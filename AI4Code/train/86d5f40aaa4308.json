{"cell_type":{"cddd5c90":"code","a0eefc07":"code","0a3111ab":"code","ed8ecd6b":"code","cab2780e":"code","b75b972c":"code","8fb604e7":"code","6a2c11ac":"code","917a6415":"code","635de988":"code","08cbed56":"markdown","954f1d0e":"markdown","b88f9664":"markdown"},"source":{"cddd5c90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image\nimport sys\nimport array\nimport cv2\nimport tensorflow as tf\nfrom keras.callbacks import LearningRateScheduler\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0eefc07":"columnNames = list()\ncolumnNames.append('label')\nfor i in range(784):\n    pixel = 'pixel'\n    pixel += str(i)\n    columnNames.append(pixel)\ntrain_data = pd.DataFrame(columns = columnNames)\ni=0\ncount=1\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/devnagri-handwritten-character\/DEVNAGARI_NEW\/TRAIN'):\n    for filename in filenames:\n        image_name = os.path.join(dirname, filename)\n        #print(os.path.join(dirname, filename))\n        label = dirname[dirname.rindex('\/')+1:]\n        #print(label)\n        img = Image.open(image_name)\n        rawData = img.load()\n        #print(rawData)\n        data = []\n        data.append(label)\n        for y in range(28):\n            for x in range(28):\n                data.append(rawData[x,y])\n        k = 0\n        train_data.loc[i] = [data[k] for k in range(785)]\n        i = i+1\n    print(count)\n    count = count + 1","0a3111ab":"train_data.head()","ed8ecd6b":"columnNames = list()\ncolumnNames.append('label')\nfor i in range(784):\n    pixel = 'pixel'\n    pixel += str(i)\n    columnNames.append(pixel)\ntest_data = pd.DataFrame(columns = columnNames)\ni=0\ncount=1\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/devnagri-handwritten-character\/DEVNAGARI_NEW\/TEST'):\n    for filename in filenames:\n        image_name = os.path.join(dirname, filename)\n        #print(os.path.join(dirname, filename))\n        label = dirname[dirname.rindex('\/')+1:]\n        #print(label)\n        img = Image.open(image_name)\n        rawData = img.load()\n        #print(rawData)\n        data = []\n        data.append(label)\n        for y in range(28):\n            for x in range(28):\n                data.append(rawData[x,y])\n        k = 0\n        test_data.loc[i] = [data[k] for k in range(785)]\n        i = i+1\n    print(count)\n    count = count + 1","cab2780e":"test_data.to_csv(\"test.csv\",index=False)\ntrain_data.to_csv('train.csv',index=False)\ntrain = train_data\ntest = test_data","b75b972c":"Y_train = train[\"label\"]\nY_train = Y_train.astype(int)\nY_train = Y_train - 1\nX_train = train.drop(labels = [\"label\"],axis = 1)\nX_train = X_train \/ 255.0\nX_test = test.drop(labels = [\"label\"],axis = 1)\nX_test = X_test \/ 255.0\nX_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nY_train = to_categorical(Y_train, num_classes = 48)","8fb604e7":"datagen = ImageDataGenerator(\n        rotation_range=10,  \n        zoom_range = 0.10,  \n        width_shift_range=0.1, \n        height_shift_range=0.1)","6a2c11ac":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size = 3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64, kernel_size = 3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size = 3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(128, kernel_size = 4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dropout(0.4))\nmodel.add(Dense(48, activation='softmax'))\n\n# COMPILE WITH ADAM OPTIMIZER AND CROSS ENTROPY COST\nmodel.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","917a6415":"X_train2, X_val2, Y_train2, Y_val2 = train_test_split(X_train, Y_train, test_size = 0.1)\nannealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)","635de988":"history = model.fit_generator(datagen.flow(X_train2,Y_train2, batch_size=64),\n        epochs = 60, steps_per_epoch = X_train2.shape[0]\/\/64)","08cbed56":"# **Converting the Test data into Pixels**","954f1d0e":"**PREPARE DATA FOR NEURAL NETWORK**\n\nSeparating the labels from the training data and converting the train and test data to a format which is suitable to be fed to the CNN","b88f9664":"# **Converting the Train data into Pixels**"}}