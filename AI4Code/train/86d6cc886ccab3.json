{"cell_type":{"37b9821f":"code","31799c4b":"code","02442ac6":"code","40baae6a":"code","be0678f3":"code","2acfa00b":"code","3e36ce89":"code","fdb9f461":"code","02d4671f":"code","c22b082f":"code","de9074a1":"code","aba26377":"code","396a3a08":"code","b5da1112":"code","b9dedcc8":"code","9bcca2a3":"code","92ae4954":"code","7250c946":"code","6be11bda":"code","5330249d":"code","04bbae31":"code","f517f2de":"code","ab43a1eb":"code","38490dca":"code","dc52efc4":"code","cc97e98a":"code","5bbd7c0b":"code","6f298799":"code","efd61d85":"code","11393136":"code","3817f27a":"code","92c268d7":"code","33996984":"code","5ad8107b":"code","37a1f5fd":"code","ee271d11":"code","1f294efe":"code","f92b6496":"code","556cee1d":"code","42fd8d29":"code","8a14b859":"code","0f31517f":"code","03461b7b":"code","9c84c355":"code","b2294536":"code","17ab0bc8":"code","13a11e7c":"code","5b940863":"code","403f4116":"code","4cc9fb39":"code","9be4d0d6":"code","62ae2923":"code","08dce4d1":"code","5523fa5d":"code","d4c81924":"code","a3260b14":"code","49b02fcd":"code","e0a4655d":"code","59a12549":"code","8f0be5dd":"code","480b5898":"code","32fa1e7e":"code","f9814ff4":"code","2a525936":"code","28e7f61f":"code","9b130e20":"code","79b3ea74":"code","787f48df":"code","68e8c3f3":"code","c1196d20":"code","1dc117ca":"code","4dda6b77":"code","5593d69d":"code","f1e091b7":"code","d6d96891":"code","fa0fb8d4":"code","e43dfad7":"code","8105b1f1":"code","12b5ef89":"code","cd214735":"code","7374fb73":"markdown","a2940e81":"markdown","c145dcdb":"markdown","338792fb":"markdown","554f16b2":"markdown","93c8ab3b":"markdown","c0751508":"markdown","6e5c20dc":"markdown","3def856b":"markdown","8dfcefb1":"markdown","a619e865":"markdown","bb0001ec":"markdown"},"source":{"37b9821f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix, mean_squared_error, accuracy_score,classification_report\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import VotingClassifier\nimport os\nimport datetime as dt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cluster import KMeans\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import r2_score\n#from lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor","31799c4b":"train = pd.read_csv('..\/input\/bigmart-sales-data\/Train.csv')\ntest = pd.read_csv('..\/input\/bigmart-sales-data\/Test.csv')","02442ac6":"train.dtypes","40baae6a":"test.dtypes","be0678f3":"train.info()","2acfa00b":"test.info()","3e36ce89":"train.isnull().sum()","fdb9f461":"test.isnull().sum()","02d4671f":"train['Item_Weight'].mean()","c22b082f":"train['Item_Weight']=train['Item_Weight'].fillna(train['Item_Weight'].mean())","de9074a1":"train.isnull().sum()","aba26377":"test['Item_Weight']=test['Item_Weight'].fillna(test['Item_Weight'].mean())","396a3a08":"test.isnull().sum()","b5da1112":"train['Outlet_Size']","b9dedcc8":"train.head()","9bcca2a3":"train.loc[train['Outlet_Type']=='Grocery Store','Outlet_Size'] = 'Small'","92ae4954":"train.isnull().sum()","7250c946":"moda = train['Outlet_Size'].mode()[0]","6be11bda":"train['Outlet_Size'] = train['Outlet_Size'].fillna(moda)","5330249d":"train.isnull().sum()","04bbae31":"train['Outlet_Size'].value_counts()","f517f2de":"test.loc[test['Outlet_Type']=='Grocery Store','Outlet_Size'] = 'Small'","ab43a1eb":"moda = test['Outlet_Size'].mode()[0]\ntest['Outlet_Size'] = test['Outlet_Size'].fillna(moda)","38490dca":"test['Outlet_Size'].isnull().sum()","dc52efc4":"test.isna().sum()","cc97e98a":"train.head()","5bbd7c0b":"for col in train.columns:\n    print('Value Count is: ',train[col].value_counts())","6f298799":"test['Item_Fat_Content'] = test['Item_Fat_Content'].replace({'LOW FAT':'Low Fat','LF':'Low Fat','Regular':'Regular','reg':'Regular','low fat':'Low Fat'})","efd61d85":"train['Item_Fat_Content'] = train['Item_Fat_Content'].replace({'LOW FAT':'Low Fat','LF':'Low Fat','Regular':'Regular','reg':'Regular','low fat':'Low Fat'})","11393136":"train.head()","3817f27a":"train['Item_Identifier'] = train['Item_Identifier'].astype(str).str[:2]","92c268d7":"train.head()","33996984":"train.loc[train['Item_Identifier']=='NC','Item_Fat_Content'] = 'Non-Edible'","5ad8107b":"test['Item_Identifier'] = test['Item_Identifier'].astype(str).str[:2]","37a1f5fd":"test.head()","ee271d11":"print(test.shape)\ntrain.shape","1f294efe":"test.loc[test['Item_Identifier']=='NC','Item_Fat_Content'] = 'Non-Edible'","f92b6496":"train['Item_Fat_Content'].value_counts()","556cee1d":"test['Item_Fat_Content'].value_counts()","42fd8d29":"test.groupby(['Item_Type'])['Item_Fat_Content'].count().sort_values().plot.bar()","8a14b859":"train.groupby(['Item_Type'])['Item_Fat_Content'].count().sort_values().plot.bar()","0f31517f":"train.groupby(['Item_Type'])['Item_Visibility'].count().sort_values().plot.bar()","03461b7b":"test.groupby(['Item_Type'])['Item_Visibility'].count().sort_values().plot.bar()","9c84c355":"sns.distplot(train['Item_MRP'],bins=30)","b2294536":"sns.catplot(x='Outlet_Size',hue='Item_Fat_Content',data=train,kind='count')","17ab0bc8":"sns.catplot(x='Outlet_Establishment_Year',hue='Outlet_Size',data=train,kind='count')","13a11e7c":"train['Outlet_Establishment_Year'].max()","5b940863":"test['Outlet_Establishment_Year'].max()","403f4116":"train['Outlet_Establishment_Year'] = 2010-train['Outlet_Establishment_Year']","4cc9fb39":"test['Outlet_Establishment_Year'] = 2010-test['Outlet_Establishment_Year']","9be4d0d6":"train.head()","62ae2923":"train=train.drop(['Item_Identifier','Outlet_Identifier'],axis=1)","08dce4d1":"train.shape","5523fa5d":"test=test.drop(['Item_Identifier','Outlet_Identifier'],axis=1)","d4c81924":"test.shape","a3260b14":"dtest = pd.get_dummies(test)","49b02fcd":"dtest.head()","e0a4655d":"dtrain = pd.get_dummies(train)","59a12549":"dtrain.head()","8f0be5dd":"y=dtrain['Item_Outlet_Sales']","480b5898":"x=dtrain.drop(['Item_Outlet_Sales'],axis=1)\nxx=x.copy()","32fa1e7e":"from sklearn.preprocessing import StandardScaler\nstds=StandardScaler()\nx = stds.fit_transform(x)\n#x['Item_Weight']=stds.fit_transform(np.array(x['Item_Weight']).reshape(-1,1))","f9814ff4":"x=pd.DataFrame(x,columns=xx.columns)","2a525936":"dtestt=dtest.copy()\ndtest = stds.fit_transform(dtest)\ndtest = pd.DataFrame(dtest,columns=dtestt.columns)","28e7f61f":"dtest.head()","9b130e20":"XX_train,X_test,yy_train,y_test = train_test_split(x,y,test_size=0.2, random_state=42)\nX_train,X_cv,y_train,y_cv = train_test_split(XX_train,yy_train, test_size=0.2,random_state=42)","79b3ea74":"RF = RandomForestRegressor()\nRF_est = {'n_estimators':range(10,1500,100),'max_depth':range(1,50)}\nRF_model = RandomizedSearchCV(RF,RF_est,scoring='neg_mean_squared_error',cv=5,n_jobs=-1)\nRF_model.fit(X_cv,y_cv)","787f48df":"print(RF_model.best_score_)\nprint(RF_model.best_estimator_)\nprint(RF_model.best_params_)\n","68e8c3f3":"RF_Result = RandomForestRegressor(n_estimators=810,max_depth=8)\nRF_Result.fit(X_train,y_train)\npred1 = RF_Result.predict(X_test)\nnp.sqrt(mean_squared_error(y_test,pred1))","c1196d20":"DTR = DecisionTreeRegressor(random_state=42)\nDTR_cv = GridSearchCV(DTR,param_grid={'min_samples_split':range(2,20)},scoring='neg_mean_squared_error',cv=5)\nDTR_cv.fit(X_cv,y_cv)","1dc117ca":"print(DTR_cv.best_score_)\nprint(DTR_cv.best_estimator_)\nprint(DTR_cv.best_params_)","4dda6b77":"DTR_result = DecisionTreeRegressor(random_state=42,min_samples_split=19)\nDTR_result.fit(X_train,y_train)\npred2 = DTR_result.predict(X_test)\nnp.sqrt(mean_squared_error(pred2,y_test))","5593d69d":"XG = XGBRegressor()\nXG.fit(X_train,y_train)\npred3 = XG.predict(X_test)\nnp.sqrt(mean_squared_error(y_test,pred3))","f1e091b7":"X_train.shape","d6d96891":"from mlxtend.regressor import StackingCVRegressor","fa0fb8d4":"comb = StackingCVRegressor(regressors=(XG,RF,DTR), cv=5,meta_regressor=RF,random_state=42)\ncomb.fit(X_train,y_train)\nX_test.columns = ['f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29', 'f30', 'f31', 'f32']\ncomb_pred = comb.predict(X_test)\nnp.sqrt(mean_squared_error(comb_pred,y_test))","e43dfad7":"X_test.shape","8105b1f1":"dtest.shape","12b5ef89":"dtest.columns = ['f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29', 'f30', 'f31', 'f32']\n\nfinal_pred = comb.predict(dtest)","cd214735":"final_pred","7374fb73":"### Random-Forest Regressor","a2940e81":"### Decision-Tree Regressor","c145dcdb":"### Preparing Data for Machine Learning Model (Train, Test, Split)","338792fb":"#### Data type and check for null values","554f16b2":"### Predicting the dtest values","93c8ab3b":"### Stacking ","c0751508":"### Importing some important Libraries","6e5c20dc":"#### EDA","3def856b":"### XG-Boost Regressor","8dfcefb1":"#### Data Clearning and Preprocessing","a619e865":"#### Converting categorical values to numeric values","bb0001ec":"#### Import Data"}}