{"cell_type":{"6886932c":"code","5d330aac":"code","ee53158e":"code","4ad7112c":"code","9880bbe7":"code","1f2ae6d9":"code","7a4cd729":"code","a4c971f9":"code","cf4eb2ee":"code","644cb6db":"code","0dcdba46":"code","dbfa5a67":"code","357404d5":"code","f4b8414c":"code","54910b99":"code","eb82dc32":"code","962155db":"code","568308d6":"code","f85d7b99":"code","ee519412":"code","86b563fa":"code","3f61497e":"code","2ab5f743":"code","faed5194":"code","351de8b6":"code","42ece966":"code","09ede991":"code","80d11dc2":"code","1cab10eb":"code","96c05519":"markdown","8d7127ad":"markdown","595de33b":"markdown","07219acc":"markdown","9f3d9c34":"markdown","c21145c2":"markdown","329b3920":"markdown","4ce17f13":"markdown","73d80820":"markdown","670f869d":"markdown","e55b00fd":"markdown","fcba9439":"markdown","d950874d":"markdown","2bb82296":"markdown","7869e192":"markdown","16c2fa84":"markdown","d15806ca":"markdown","f2b68697":"markdown","7876066a":"markdown","bac487f6":"markdown","50f8a8c2":"markdown","a66618ec":"markdown","568d23e3":"markdown","7345635d":"markdown","5e1f617a":"markdown","6eec7d3b":"markdown","37fc7822":"markdown","d4a09fe8":"markdown","216f189a":"markdown","12b6d63d":"markdown","9f711e39":"markdown","4a1dc0bd":"markdown","1789b512":"markdown","91b252df":"markdown"},"source":{"6886932c":"import pandas as pd\nimport numpy as np\nimport os\nimport warnings \nimport sklearn\nimport seaborn as sns\nimport matplotlib as plt\n#%matplotlib inline\n#%matplotlib qt\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis,  QuadraticDiscriminantAnalysis\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, log_loss, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import train_test_split\nwarnings.simplefilter('ignore')\npd.set_option('display.max_rows', 1000)","5d330aac":"train_df = pd.read_csv('..\/input\/human-activity-recognition-with-smartphones\/train.csv')\ntest_df = pd.read_csv('..\/input\/human-activity-recognition-with-smartphones\/test.csv')","ee53158e":"print(train_df.isna().sum()) ","4ad7112c":"print(train_df.dtypes)","9880bbe7":"X = train_df.drop('Activity', axis=1).reset_index(drop=True)\ny = train_df['Activity']","1f2ae6d9":"rf = RandomForestClassifier(random_state = 1)\nrf_model_basic = rf.fit(X, y)\nrf_importance = pd.Series(rf_model_basic.feature_importances_, index=X.columns).sort_values(ascending=False)\nrf_importance.nlargest(560).plot(kind='barh')","7a4cd729":"rf_variables = rf_importance.head(420).index.values","a4c971f9":"from sklearn.feature_selection import GenericUnivariateSelect","cf4eb2ee":"trans = GenericUnivariateSelect(score_func=lambda X, y: X.mean(axis=0), mode='percentile', param=75)\nchars_X_trans = trans.fit_transform(X, y)","644cb6db":"cols = trans.get_support(indices=True)\nGUS_variables = X.iloc[:,cols].columns.values","0dcdba46":"print(\"By Generic Univariate Selection we keep {1} of our original {0} features\".format(X.shape[1], chars_X_trans.shape[1]))","dbfa5a67":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.inspection import permutation_importance","357404d5":"clf = DecisionTreeClassifier()\nselection = SelectFromModel(clf, threshold='3*median', max_features=420)\nvars_selected = selection.fit_transform(X, y)\ncols = selection.get_support(indices=True)\nDT_variables = X.iloc[:,cols].columns.values","f4b8414c":"rf_var_list=list(rf_variables)\ngus_var_list=list(GUS_variables)\ndt_var_list=list(DT_variables)","54910b99":"print(len(set(rf_var_list) & set(gus_var_list) & set (dt_var_list)))\nprint(len(set(gus_var_list) & set (dt_var_list)))\nprint(len(set(rf_var_list)  & set (dt_var_list)))\nprint(len(set(rf_var_list) & set(gus_var_list)))","eb82dc32":"X1 = X.filter(items=rf_variables)\nX2 = X.filter(items=GUS_variables)\nX3 = X.filter(items=DT_variables)","962155db":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","568308d6":"X1_train, X1_test, y_train, y_test = train_test_split(X1, y, test_size = 0.2, random_state = 42)\nX2_train, X2_test, y_train, y_test = train_test_split(X2, y, test_size = 0.2, random_state = 42)\nX3_train, X3_test, y_train, y_test = train_test_split(X3, y, test_size = 0.2, random_state = 42)","f85d7b99":"classifiers = [\n    KNeighborsClassifier(3),\n    SVC(kernel=\"rbf\",probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis(),\n    MLPClassifier()]","ee519412":"def fit_basic_clf (train_features, train_labels, test_features, test_labels):\n    \n    # Log results for performance vis\n    log_cols=[\"Classifier\", \"Accuracy\", \"Log Loss\"]\n    log = pd.DataFrame(columns=log_cols)\n    for clf in classifiers:\n        clf.fit(train_features, train_labels)\n        name = clf.__class__.__name__\n        \n        print(\"=\"*30)\n        print(name)\n        \n        print('****Results****')\n        train_predictions = clf.predict(test_features)\n        acc = accuracy_score(test_labels, train_predictions)\n        \n        # calculate score\n        precision = precision_score(test_labels, train_predictions, average = 'macro') \n        recall = recall_score(test_labels, train_predictions, average = 'macro') \n        f_score = f1_score(test_labels, train_predictions, average = 'macro')\n        \n        \n        print(\"Precision: {:.4%}\".format(precision))\n        print(\"Recall: {:.4%}\".format(recall))\n        print(\"F-score: {:.4%}\".format(recall))\n        print(\"Accuracy: {:.4%}\".format(acc))\n        \n        train_predictions = clf.predict_proba(test_features)\n        ll = log_loss(test_labels, train_predictions)\n        print(\"Log Loss: {}\".format(ll))\n        \n        log_entry = pd.DataFrame([[name, acc*100, ll]], columns=log_cols)\n        log = log.append(log_entry)\n        print(\"=\"*30)\n        \n    # Plot results\n    sns.barplot(x='Accuracy', y='Classifier', data=log, color=\"b\")\n\n    sns.barplot(x='Log Loss', y='Classifier', data=log, color=\"g\")\n\n        \n# First we'll test on the complete data to see how much accuracy we lose when we drop features\nfit_basic_clf(X1_train, y_train, X1_test, y_test)   \n \n# Now test on subsets\nfit_basic_clf(X1_train, y_train, X1_test, y_test)    \nfit_basic_clf(X2_train, y_train, X2_test, y_test)    \nfit_basic_clf(X3_train, y_train, X3_test, y_test)    ","86b563fa":"from mlxtend.classifier import StackingCVClassifier\nfrom sklearn import model_selection","3f61497e":"RANDOM_SEED = 42","2ab5f743":"rf = RandomForestClassifier(n_estimators=500, random_state = 42)\nknn=KNeighborsClassifier(3)\nNN=MLPClassifier()\nxgb= GradientBoostingClassifier()","faed5194":"stack = StackingCVClassifier(classifiers=[rf, knn, NN],\n                            use_probas=True,\n                            meta_classifier=xgb,\n                            random_state=42)","351de8b6":"print('3-fold cross validation:\\n')\nfor clf, label in zip([rf, knn, NN, stack],\n                      ['Random Forest',\n                       'KNearestNeighbours',\n                       'NeuralNetwork', \n                       'StackingClassifer']):\n    scores = model_selection.cross_val_score(clf, X_train, y_train, \n                                              cv=3, scoring='accuracy')\n    print(\"Accuracy: %0.2f (+\/- %0.2f) [%s]\" \n          % (scores.mean(), scores.std(), label))\n    ","42ece966":"stack.fit(X,y) # Fit to train","09ede991":"X_test = test_df.drop('Activity', axis=1).reset_index(drop=True)\ny_test = test_df['Activity']","80d11dc2":"final_preds = stack.predict(X_test)\n    \n# calculate final accuracy\nacc = accuracy_score(y_test, final_preds)\nprecision = precision_score(y_test, final_preds, average = 'macro') \nrecall = recall_score(y_test, final_preds, average = 'macro') \nf_score = f1_score(y_test, final_preds, average = 'macro')","1cab10eb":"print('The stacked performance on test data:')\nprint(\"Precision: {:.4%}\".format(precision))\nprint(\"Recall: {:.4%}\".format(recall))\nprint(\"F-score: {:.4%}\".format(recall))\nprint(\"Accuracy: {:.4%}\".format(acc))","96c05519":"With >560 features we have a substantial data frame and it's likely that we can do without many of these. However, given that there<br>\nare a series of different processes that can be used to remove features, I will take multiple approaches and consider the agreement<br>\nbetween these before removal. I will use: \nRF importance;<br>\nGeneric Univariate Selection<br>\nand Model-based selection (i'll use a different algo from RF to differentiate between RF importance)","8d7127ad":"Here we can see the way in which there is an exponential drop in importance of variables. At around 75% there is a slight drop where<br>\nimportance becomes very limited. For this purpose we will remove 25% of the variables","595de33b":"# Model Based Selection<br>\nHere we will try a couple of different types of classifiers. In order for the SelectFromModel fn to perform, the classifier algo either<br>\n(a) must have a built in feature importance, or we can conduct permutation feature importance <br>\n(see:https:\/\/scikit-learn.org\/stable\/modules\/permutation_importance.html#:~:text=The%20permutation%20feature%20importance%20is,model%20depends%20on%20the%20feature. )<br>\nwhich will allow us to provide the feature importance from all clf models. Permutation is very computationally expensive so for the<br>\npresent purposes I will use only those with a built in output.","07219acc":"# RF importance","9f3d9c34":"Good scores, but could be better with some additional tuning next time round!","c21145c2":"Now we'll run a loop over each basic model and store the results for comparison.","329b3920":"# Data splitting","4ce17f13":"# Feature selection comparison<br>\nLets begin by converting each of these to lists as it makes matching simpler.","73d80820":"We are getting extremely well performing models with less features. If the purpose was to have a computationally fast model,<br>\nwe could probably reduce the features by ~50%. Reducing by ~75% reduces accuracy of the best models by ~0.2-0.5%. However, since<br>\nI am aiming to get maximal accuracy here every fraction of a % matters. Therefore I will work with the full feature set.<br>\nIt is an option to tune some parameters but it would likely require an extensive grid search to get a fraction of a percent extra<br>\nso we'll see how stacking goes.","670f869d":"# Final predictions","e55b00fd":"Here we see that the stacked classifier has improved the accuracy to >99% meaning the stacked model has improved estimates.\nWe can feed the stack grid searches for each classifier, however this would take a lot of time and we're already at >99%, so I'm happy with the final stacked model.","fcba9439":"# Set up<br>\nImport, set, read, initial exploration","d950874d":"There are 284 in common of the ~420 selected. This is not driven down by a single method. The implication is that there is no <br>\nclear agreement on which are most important. One way to decide on the best is to test the selections in models.","2bb82296":"This involves fitting an RF model and extracting the top n(\/%) of the features. It will also give us a good idea of what a basic model<br>\ncan produce in terms of classification accuracy.","7869e192":"Already, it seems like other users are classifying activity with extraordinarily high accuracy (~95%) with very basic models. Next,<br>\nI aim to increase this by using a stacked ensemble model. Since model accuracy is the primary goal and EDA has already been done <br>\nextensively on Kaggle, I will skip EDA and move to","16c2fa84":"Author: Jaketuricchi","d15806ca":"All data types are numeric, with categorical for the target, so all is in order here.","f2b68697":"Here we can see that model selection<br>\nWe can also do this similarly using an algo such as Decision Tree Classifier:","7876066a":"Note that I use guidance provided in a very useful kernel from Aleksey Bilogur (https:\/\/www.kaggle.com\/residentmario\/automated-feature-selection-with-sklearn)","bac487f6":"# Training a stacked Ensemble Model to recognise human activity","50f8a8c2":"Import packages","a66618ec":"So we have 3 lists of selected features generated by slightly different methods. How many are in common?","568d23e3":"# Modelling - Algorithm selection.<br>\nWe'll test a range of classification (clf) models to see which to use in our stacked model. We will avoid using any models too similar<br>\n(e.g. RF and decision trees). Lets start by listing what are (usually) the top performing clfs.","7345635d":"To prepare, lets split the data into features and labels.","5e1f617a":"# Stacking<br>\nNext, I will pick some different models and stack. I'll go for KNN, RF, NN with XGb as they meta-classifier the 3 top performing models. <br>\nI'll use package mlx, the guidance for which is very useful and can be found at:<br>\nhttp:\/\/rasbt.github.io\/mlxtend\/user_guide\/","6eec7d3b":"# Is the data set ready for modelling?","37fc7822":"Read data","d4a09fe8":"# Modelling - Feature selection","216f189a":"Predict test data","12b6d63d":"# Generic Univariate Feature Selection<br>\nHere we must define an arbitrary or % of data to remove. Lets go with 50% of variables for now and see how it compares later.","9f711e39":"Get columns to keep and create new dataframe with those only","4a1dc0bd":"The ability to continuous track activity through devices such as a smart phone largely inspires two jusxtaposed responses: one of ethical and\nmoral uncertainty (should this data be collected? and who has access to it?) and one of recognition of the huge potential such data\nmay have when combined with advanced machine learning techniques. Recent work in my PhD lab at The University of Leeds has been \nconcerned with the ability to classify activity and predict energy expenditure resulting in my interest in these kinds of data sets. ","1789b512":"We have no missing data in the df. For data of this kind this is unrealistic and implies some kind of previous preprocessing and<br>\nimputation.","91b252df":"Here we use_probas =T -- this will use probabilities of the 3 classifiers as meta-features in the meta-classifier model"}}