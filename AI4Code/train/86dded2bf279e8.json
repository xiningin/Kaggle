{"cell_type":{"4c003633":"code","30bbcef0":"code","24f52841":"code","fefd4ad9":"code","c097ccfb":"code","d3041250":"code","28157ab2":"code","dc9f2408":"code","a0e365db":"code","155aaf4c":"code","c70db89b":"code","27d9e40f":"code","0a426dc5":"code","9b62abe6":"code","056bc2e5":"code","820c4b19":"code","8fa43617":"code","6474349c":"code","2e4ba9e8":"code","4e7a5edb":"code","b6f1c56d":"code","996235fa":"code","b7eadd32":"code","d1fb603f":"code","d890b803":"code","db3e1525":"code","d9e6e5ec":"code","880115dc":"code","99c22edf":"code","4ae4ed0c":"code","2ecbb0a0":"code","8532f647":"code","70f7b442":"code","ca76292a":"code","81c5cfe6":"code","13c7f089":"code","1d11072b":"code","c975d047":"code","6b04be0a":"code","e726bcbf":"code","9bfeab0a":"code","a4e05b36":"code","e33a51b5":"code","77a49c58":"code","044c179d":"code","028fcb67":"code","cf9ef83c":"code","368f71bd":"code","18f8c2e6":"code","0eaf5f2f":"code","1610cebc":"code","a2310b80":"code","5bfbc2c4":"code","4818e749":"code","0db56717":"code","e5a256ce":"code","14683744":"code","7a18ea3b":"code","d2adeaef":"code","21bd4428":"code","7c3a16d7":"code","c9f2a3ba":"code","852e27df":"code","895e26f6":"code","3709229d":"code","ead70156":"code","11dac4f1":"code","226497df":"code","cc256c22":"code","7e367a71":"code","24aef47b":"code","029ee1fc":"code","c89b011c":"code","f53ae443":"code","97d6cf04":"code","e1d34fa8":"code","d4445fee":"code","133d7046":"code","d081df28":"code","8a4a726a":"code","6b925311":"code","bfcfebaf":"code","2b0f0441":"code","8913a4f4":"code","91644707":"code","c3a910ec":"code","93d87127":"code","54978f1b":"code","8c834b93":"code","ed953653":"code","bdd8a415":"code","54f41d83":"code","67a3abcc":"code","c9130276":"code","0de1f401":"code","fe5c710b":"code","cabd9662":"code","96c10abb":"code","2dad34f2":"code","64744a50":"code","25a747f4":"code","522b44b9":"code","3b32b5ee":"code","ec472673":"code","0d2faf0c":"code","e9a1d85e":"code","5922a9ab":"code","64b03ff1":"code","c8fdc9c2":"code","03a4534c":"code","dd6606b1":"code","0dc13a0b":"code","c01e455f":"code","5ec8f6a3":"code","203febc1":"code","98b2984b":"code","d210a51f":"code","826d31a9":"code","1c13cdbf":"code","3c4a6a00":"code","124dceab":"code","28518468":"code","ed311cde":"code","67929988":"code","77ed292c":"code","62e7539a":"code","ae906e0c":"code","f341bf20":"code","3c6aa21f":"code","0e89ac7d":"code","14923079":"code","ecd5827b":"code","c36dab67":"code","8dfcc918":"code","7c1aa66f":"code","c861c39f":"code","a86eab2a":"code","69ccb3dc":"markdown","ba8f7521":"markdown","337411b8":"markdown","aa60c945":"markdown","00cd39a5":"markdown","ae902739":"markdown","d5987c55":"markdown","35d72223":"markdown","9423e7cf":"markdown","41ef0128":"markdown","457bb76f":"markdown","ab3303e3":"markdown","2ab96d04":"markdown","fa339e52":"markdown","29d90f35":"markdown","f8f89807":"markdown","b96312ee":"markdown","947cdbc1":"markdown","c7620f1c":"markdown","50ad010e":"markdown","d36ed0e0":"markdown","ec34d90e":"markdown","31461c0f":"markdown","6d8f6858":"markdown","e1970a97":"markdown","446f662d":"markdown","f3c6b920":"markdown","2c9f1fea":"markdown","248de7c9":"markdown","98d5eba5":"markdown","f3127523":"markdown","ded0f4ce":"markdown","e9efdec4":"markdown","11dbd0f9":"markdown","04a9ba73":"markdown","173b2d75":"markdown","e58c5e24":"markdown","5ba5a14a":"markdown","9262e806":"markdown","3d781e60":"markdown","90148ca7":"markdown","b5a9bcbe":"markdown","c84a9efe":"markdown","678594d4":"markdown","bbc7a65b":"markdown","596cfd5c":"markdown","275cddb1":"markdown","c5b8f74c":"markdown","79c7368e":"markdown","a01b62a0":"markdown","eefddd34":"markdown","e5fd9152":"markdown","7ba06c1b":"markdown","4596f0d7":"markdown","5c98dd1d":"markdown","cb227839":"markdown","7f7f0264":"markdown","690dbaa6":"markdown","198d38d2":"markdown","c904d253":"markdown","0ed44acf":"markdown","ddca2f83":"markdown","ee8b5e6f":"markdown","981a8349":"markdown"},"source":{"4c003633":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","30bbcef0":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","24f52841":"df","fefd4ad9":"df.shape","c097ccfb":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ntest.head()","d3041250":"test.shape","28157ab2":"test.isna().sum()","dc9f2408":"df.describe()","a0e365db":"df.isna().sum()","155aaf4c":"sns.heatmap(df.corr())","c70db89b":"df.corr()[\"Survived\"]","27d9e40f":"sns.displot(df[\"Age\"])","0a426dc5":"sns.countplot(df[\"Sex\"])","9b62abe6":"sns.countplot(\"Embarked\", data=df)","056bc2e5":"sns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"bar\", data=df)","820c4b19":"sns.catplot(x=\"Embarked\", y=\"Fare\", hue=\"Sex\", kind=\"bar\", data=df)","8fa43617":"sns.catplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", kind=\"bar\", data=df)","6474349c":"sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"bar\", data=df)","2e4ba9e8":"sns.displot(df[\"Fare\"])","4e7a5edb":"sns.relplot(x=\"Age\", y=\"Fare\", hue=\"Sex\", data=df)","b6f1c56d":"sns.countplot(df[\"Survived\"])","996235fa":"sns.countplot(df[\"Survived\"], hue=df[\"Sex\"])","b7eadd32":"sns.countplot(df[\"Survived\"], hue=df[\"Embarked\"])","d1fb603f":"sns.countplot(df[\"Pclass\"])","d890b803":"sns.countplot(df[\"Survived\"], hue=df[\"Pclass\"])","db3e1525":"sns.violinplot(\"Survived\", \"Age\", data=df)","d9e6e5ec":"sns.countplot(\"SibSp\", data=df)","880115dc":"sns.countplot(\"Parch\", data=df)","99c22edf":"names = df[\"Name\"].values","4ae4ed0c":"names_list = list()\n\nfor name in names:\n    for word in name.split():\n        if word[-1] == \".\":\n            names_list.append(word)\n            \nnames_list.remove(\"L.\")","2ecbb0a0":"titles = pd.DataFrame(names_list, columns=[\"Title\"])\n\ntitles","8532f647":"titles[\"Title\"].nunique()","70f7b442":"titles[\"Title\"].unique()","ca76292a":"len(titles)","81c5cfe6":"df = pd.concat([df, titles], axis=1)","13c7f089":"df","1d11072b":"df[\"Title\"].value_counts().plot(kind=\"bar\")\nplt.ylabel(\"Count\")","c975d047":"names_test = test[\"Name\"].values","6b04be0a":"names_list_test = list()\n\nfor name in names_test:\n    for word in name.split():\n        if word[-1] == \".\":\n            names_list_test.append(word)","e726bcbf":"titles_test = pd.DataFrame(names_list_test, columns=[\"Title\"])","9bfeab0a":"titles_test[\"Title\"].unique()","a4e05b36":"titles_test.loc[(titles_test.Title == \"Dona.\"), \"Title\"] = \"Mrs.\"","e33a51b5":"test = pd.concat([test, titles_test], axis=1)\n\ntest","77a49c58":"df.isna().sum()","044c179d":"df[\"Cabin\"].unique()","028fcb67":"cabins = np.array(df[\"Cabin\"], dtype=\"str\")\ncabin_list = list()\n\nfor cabin in cabins:\n    cabin_list.append(cabin[0])","cf9ef83c":"cabin_types = pd.DataFrame(cabin_list, columns=[\"Cabin Type\"])","368f71bd":"cabin_types[\"Cabin Type\"] = cabin_types[\"Cabin Type\"].replace([\"n\"], np.nan)\n\ncabin_types","18f8c2e6":"cabin_types[\"Cabin Type\"].unique()","0eaf5f2f":"df = pd.concat([df, cabin_types], axis=1)\n\ndf","1610cebc":"sns.countplot(x=\"Cabin Type\", data=df, order=df[\"Cabin Type\"].value_counts().index)","a2310b80":"plot_order = df.groupby('Cabin Type')['Fare'].mean().sort_values(ascending=False).index.values\n\nsns.catplot(x=\"Cabin Type\", y=\"Fare\", kind=\"bar\", data=df, order=plot_order)","5bfbc2c4":"df[df[\"Cabin Type\"] == \"A\"]","4818e749":"sns.catplot(x=\"Cabin Type\", y=\"Fare\", hue=\"Pclass\", data=df, kind=\"bar\", order=plot_order)","0db56717":"print(\"Average fare in cabin A: \", df[df[\"Cabin Type\"] == \"A\"][\"Fare\"].mean())\nprint(\"Average fare in cabin B: \", df[df[\"Cabin Type\"] == \"B\"][\"Fare\"].mean())\nprint(\"Average fare in cabin C: \", df[df[\"Cabin Type\"] == \"C\"][\"Fare\"].mean())\nprint(\"Average fare in cabin D: \", df[df[\"Cabin Type\"] == \"D\"][\"Fare\"].mean())\nprint(\"Average fare in cabin E: \", df[df[\"Cabin Type\"] == \"E\"][\"Fare\"].mean())\nprint(\"Average fare in cabin F: \", df[df[\"Cabin Type\"] == \"F\"][\"Fare\"].mean())\nprint(\"Average fare in cabin G: \", df[df[\"Cabin Type\"] == \"G\"][\"Fare\"].mean())\nprint(\"Average fare in cabin T: \", df[df[\"Cabin Type\"] == \"T\"][\"Fare\"].mean())","e5a256ce":"print(\"Average class in cabin A: \", df[df[\"Cabin Type\"] == \"A\"][\"Pclass\"].mean())\nprint(\"Average class in cabin B: \", df[df[\"Cabin Type\"] == \"B\"][\"Pclass\"].mean())\nprint(\"Average class in cabin C: \", df[df[\"Cabin Type\"] == \"C\"][\"Pclass\"].mean())\nprint(\"Average class in cabin D: \", df[df[\"Cabin Type\"] == \"D\"][\"Pclass\"].mean())\nprint(\"Average class in cabin E: \", df[df[\"Cabin Type\"] == \"E\"][\"Pclass\"].mean())\nprint(\"Average class in cabin F: \", df[df[\"Cabin Type\"] == \"F\"][\"Pclass\"].mean())\nprint(\"Average class in cabin G: \", df[df[\"Cabin Type\"] == \"G\"][\"Pclass\"].mean())\nprint(\"Average class in cabin T: \", df[df[\"Cabin Type\"] == \"T\"][\"Pclass\"].mean())","14683744":"good_quality_idx = df.index[(df[\"Fare\"] >= 70) & (df[\"Pclass\"] == 1)]\n\ngood_quality_idx","7a18ea3b":"average_quality_idx = df.index[((df[\"Fare\"] >= 20) & (df[\"Fare\"] < 70)) | ((df[\"Fare\"] >= 70) & (df[\"Pclass\"] == 2))]\n\naverage_quality_idx","d2adeaef":"low_quality_idx = df.index[df[\"Fare\"] < 20]\n\nlow_quality_idx","21bd4428":"cabin_quality = list()\n\nfor i in range(891):\n    if i in good_quality_idx:\n        cabin_quality.append(\"Good\")\n    if i in average_quality_idx:\n        cabin_quality.append(\"Standard\")\n    if i in low_quality_idx:\n        cabin_quality.append(\"Low\")\n        \nlen(cabin_quality)","7c3a16d7":"cabin_quality = pd.DataFrame(cabin_quality, columns=[\"Cabin Quality\"])\n\ncabin_quality","c9f2a3ba":"df = pd.concat([df, cabin_quality], axis=1)\n\ndf","852e27df":"sns.countplot(x=\"Cabin Quality\", data=df)","895e26f6":"sns.countplot(x=\"Survived\", hue=\"Cabin Quality\", data=df)","3709229d":"test.loc[np.isnan(test.Fare), \"Fare\"] = df[df[\"Pclass\"] == 3][\"Fare\"].mean()","ead70156":"good_quality_test_idx = test.index[(test[\"Fare\"] >= 70)]\n\ngood_quality_test_idx","11dac4f1":"average_quality_test_idx = test.index[((test[\"Fare\"] >= 20) & (test[\"Fare\"] < 70))]\n\naverage_quality_test_idx","226497df":"low_quality_test_idx = test.index[test[\"Fare\"] < 20]\n\nlow_quality_test_idx","cc256c22":"test.shape","7e367a71":"cabin_quality_test = list()\n\nfor i in range(418):\n    if i in good_quality_test_idx:\n        cabin_quality_test.append(\"Good\")\n    if i in average_quality_test_idx:\n        cabin_quality_test.append(\"Standard\")\n    if i in low_quality_test_idx:\n        cabin_quality_test.append(\"Low\")\n        \nlen(cabin_quality_test)","24aef47b":"cabin_quality_test = pd.DataFrame(cabin_quality_test, columns=[\"Cabin Quality\"])\n\ncabin_quality_test","029ee1fc":"test = pd.concat([test, cabin_quality_test], axis=1)\n\ntest","c89b011c":"df.isna().sum()","f53ae443":"df[df[\"Age\"].isnull()]","97d6cf04":"df[\"Title\"].unique()","e1d34fa8":"age_mr = df[df[\"Title\"] == \"Mr.\"][\"Age\"].mean()\nage_miss = df[df[\"Title\"] == \"Miss.\"][\"Age\"].mean()\nage_mrs = df[df[\"Title\"] == \"Mrs.\"][\"Age\"].mean()\nage_dr = df[df[\"Title\"] == \"Dr.\"][\"Age\"].mean()\nage_master = df[df[\"Title\"] == \"Master.\"][\"Age\"].mean()\n\nprint(\"Average age of 'Mr': \", age_mr)\nprint(\"Average age of 'Miss': \", age_miss)\nprint(\"Average age of 'Mrs': \", age_mrs)\nprint(\"Average age of 'Dr': \", age_dr)\nprint(\"Average age of 'Master': \", age_master)","d4445fee":"df.loc[(df.Title == \"Mr.\") & (np.isnan(df.Age)), \"Age\"] = age_mr\ndf.loc[(df.Title == \"Miss.\") & (np.isnan(df.Age)), \"Age\"] = age_miss\ndf.loc[(df.Title == \"Mrs.\") & (np.isnan(df.Age)), \"Age\"] = age_mrs\ndf.loc[(df.Title == \"Dr.\") & (np.isnan(df.Age)), \"Age\"] = age_dr\ndf.loc[(df.Title == \"Master.\") & (np.isnan(df.Age)), \"Age\"] = age_master","133d7046":"test.loc[(test.Title == \"Mr.\") & (np.isnan(test.Age)), \"Age\"] = age_mr\ntest.loc[(test.Title == \"Miss.\") & (np.isnan(test.Age)), \"Age\"] = age_miss\ntest.loc[(test.Title == \"Mrs.\") & (np.isnan(test.Age)), \"Age\"] = age_mrs\ntest.loc[(test.Title == \"Dr.\") & (np.isnan(test.Age)), \"Age\"] = age_dr\ntest.loc[(test.Title == \"Master.\") & (np.isnan(test.Age)), \"Age\"] = age_master\ntest.loc[(test.Title == \"Ms.\") & (np.isnan(test.Age)), \"Age\"] = age_miss","d081df28":"df.isna().sum()","8a4a726a":"test.isna().sum()","6b925311":"df[df[\"Embarked\"].isnull()]","bfcfebaf":"sns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"bar\", data=df)","2b0f0441":"s_mean = df[df[\"Embarked\"] == \"S\"][\"Fare\"].mean()\nc_mean = df[df[\"Embarked\"] == \"C\"][\"Fare\"].mean()\nq_mean = df[df[\"Embarked\"] == \"Q\"][\"Fare\"].mean()\n\nprint(\"Average fare of those who boarded from S: \", s_mean)\nprint(\"Average fare of those who boarded from C: \", c_mean)\nprint(\"Average fare of those who boarded from Q: \", q_mean)","8913a4f4":"df.loc[df.Embarked.isnull(), \"Embarked\"] = \"C\"","91644707":"df.isna().sum()","c3a910ec":"df[\"Title\"].unique()","93d87127":"df.loc[(df.Title == \"Ms.\") | (df.Title == \"Mlle.\"), \"Title\"] = \"Miss.\"\ndf.loc[(df.Title == \"Mme.\"), \"Title\"] = \"Mrs.\"\ndf.loc[(df.Title == \"Don.\") | (df.Title == \"Lady.\") | (df.Title == \"Sir.\") | (df.Title == \"Countess.\") | (df.Title == \"Jonkheer.\"), \"Title\"] = \"Royalty\"\ndf.loc[(df.Title == \"Dr.\") | (df.Title == \"Rev.\") | (df.Title == \"Major.\") | (df.Title == \"Col.\") | (df.Title == \"Capt.\"),  \"Title\"] = \"Ranked\"\n\ndf[\"Title\"].unique()","54978f1b":"test[\"Title\"].unique()","8c834b93":"test.loc[test.Title == \"Ms.\", \"Title\"] = \"Miss.\"\ntest.loc[(test.Title == \"Dr.\") | (test.Title == \"Rev.\") | (test.Title == \"Col.\"),  \"Title\"] = \"Ranked\"\n\ntest[\"Title\"].unique()","ed953653":"df_final = df.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\", \"Cabin Type\"], axis=1)","bdd8a415":"test_final = test.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"], axis=1)","54f41d83":"df_final","67a3abcc":"test_final","c9130276":"df_final.isna().sum()","0de1f401":"test_final.isna().sum()","fe5c710b":"sex = pd.get_dummies(df_final[\"Sex\"])\nsex = sex.drop(\"male\", axis=1)\ndf_final[\"Sex\"] = sex","cabd9662":"sex_test = pd.get_dummies(test_final[\"Sex\"])\nsex_test = sex_test.drop(\"male\", axis=1)\ntest_final[\"Sex\"] = sex_test","96c10abb":"pclass = pd.get_dummies(df_final[\"Pclass\"], prefix=\"Pclass\")\npclass = pclass.drop(\"Pclass_3\", axis=1)\ndf_final = df_final.drop(\"Pclass\", axis=1)\ndf_final = pd.concat([df_final, pclass], axis=1)","2dad34f2":"pclass_test = pd.get_dummies(test_final[\"Pclass\"], prefix=\"Pclass\")\npclass_test = pclass_test.drop(\"Pclass_3\", axis=1)\ntest_final = test_final.drop(\"Pclass\", axis=1)\ntest_final = pd.concat([test_final, pclass_test], axis=1)","64744a50":"embarked = pd.get_dummies(df_final[\"Embarked\"], prefix=\"Embarked\")\nembarked = embarked.drop(\"Embarked_S\", axis=1)\ndf_final = df_final.drop(\"Embarked\", axis=1)\ndf_final = pd.concat([df_final, embarked], axis=1)","25a747f4":"embarked_test = pd.get_dummies(test_final[\"Embarked\"], prefix=\"Embarked\")\nembarked_test = embarked_test.drop(\"Embarked_S\", axis=1)\ntest_final = test_final.drop(\"Embarked\", axis=1)\ntest_final = pd.concat([test_final, embarked_test], axis=1)","522b44b9":"title = pd.get_dummies(df_final[\"Title\"], prefix=\"Title\")\ntitle = title.drop(\"Title_Royalty\", axis=1)\ndf_final = df_final.drop(\"Title\", axis=1)\ndf_final = pd.concat([df_final, title], axis=1)","3b32b5ee":"title_test = pd.get_dummies(test_final[\"Title\"], prefix=\"Title\")\ntest_final = test_final.drop(\"Title\", axis=1)\ntest_final = pd.concat([test_final, title_test], axis=1)","ec472673":"cabin_quality = pd.get_dummies(df_final[\"Cabin Quality\"], prefix=\"Cabin_Quality\")\ncabin_quality = cabin_quality.drop(\"Cabin_Quality_Low\", axis=1)\ndf_final = df_final.drop(\"Cabin Quality\", axis=1)\ndf_final = pd.concat([df_final, cabin_quality], axis=1)","0d2faf0c":"cabin_quality_test = pd.get_dummies(test_final[\"Cabin Quality\"], prefix=\"Cabin_Quality\")\ncabin_quality_test = cabin_quality_test.drop(\"Cabin_Quality_Low\", axis=1)\ntest_final = test_final.drop(\"Cabin Quality\", axis=1)\ntest_final = pd.concat([test_final, cabin_quality_test], axis=1)","e9a1d85e":"df_final","5922a9ab":"test_final","64b03ff1":"y_train = df_final[\"Survived\"].values\n\ny_train","c8fdc9c2":"x_train = df_final.drop(\"Survived\", axis=1).values\n\nx_train","03a4534c":"x_test = test_final.values\n\nx_test","dd6606b1":"from sklearn.neighbors import KNeighborsClassifier","0dc13a0b":"knn = KNeighborsClassifier(n_neighbors=5, metric=\"minkowski\")","c01e455f":"knn.fit(x_train, y_train)","5ec8f6a3":"y_pred = knn.predict(x_test)","203febc1":"y_pred","98b2984b":"knn_score = knn.score(x_train, y_train)","d210a51f":"from sklearn import metrics","826d31a9":"model_scores = list()\n\nfor i in range(2, 100):\n    knn = KNeighborsClassifier(n_neighbors=i, metric=\"minkowski\")\n    knn.fit(x_train, y_train)\n    y_pred = knn.predict(x_test)\n    model_scores.append(knn.score(x_train, y_train))","1c13cdbf":"plt.plot(range(2, 100), model_scores, \"r\")","3c4a6a00":"from sklearn.ensemble import RandomForestClassifier","124dceab":"rf = RandomForestClassifier(n_estimators=200, criterion=\"gini\")\nrf.fit(x_train, y_train)\nrf_score = rf.score(x_train, y_train)","28518468":"y_pred = rf.predict(x_test)\n\ny_pred","ed311cde":"from sklearn.tree import DecisionTreeClassifier","67929988":"dt = DecisionTreeClassifier()\ndt.fit(x_train, y_train)\ndt_score = dt.score(x_train, y_train)\ndt_score","77ed292c":"y_pred = dt.predict(x_test)\n\ny_pred","62e7539a":"from sklearn.naive_bayes import GaussianNB","ae906e0c":"gnb = GaussianNB()\ngnb.fit(x_train, y_train)\ngnb_score = gnb.score(x_train, y_train)\ngnb_score","f341bf20":"y_pred = gnb.predict(x_test)\n\ny_pred","3c6aa21f":"from sklearn.svm import SVC","0e89ac7d":"svc = SVC()\nsvc.fit(x_train, y_train)\nsvc_score = svc.score(x_train, y_train)\nsvc_score","14923079":"y_pred = svc.predict(x_test)\n\ny_pred","ecd5827b":"from sklearn.ensemble import GradientBoostingClassifier","c36dab67":"gbc = GradientBoostingClassifier()\ngbc.fit(x_train, y_train)\ngbc_score = gbc.score(x_train, y_train)\ngbc_score","8dfcc918":"y_pred = gbc.predict(x_test)\n\ny_pred","7c1aa66f":"scores = pd.Series([knn_score, rf_score, dt_score, svc_score, gnb_score, gbc_score], index=[\"knn\", \"rf\", \"dt\", \"svc\", \"gnb\", \"gbc\"])","c861c39f":"scores = pd.DataFrame(scores, columns=[\"Scores\"])\n\nscores","a86eab2a":"sns.pointplot(x=scores.index, y=scores[\"Scores\"], color=\"r\")\nplt.ylabel(\"Scores\")\nplt.xlabel(\"Algorithms\")","69ccb3dc":"Final version of our dataframes when we keep only useful features.","ba8f7521":"Let's find the average age of titles with missing age data.","337411b8":"We don't have any missing values on \"Title\" column. We can try to fill the missing data on \"Age\" column with the help of the \"Title\" column.","aa60c945":"Let's see if the passengers are traveling with someone or alone.","00cd39a5":"Let's try again for all neighbor numbers from 2 to 50.","ae902739":"how many passengers stayed in which cabin type.","d5987c55":"Relation between pclass and fare.","35d72223":"We will try to extract titles of the passengers to create a new feature which can be useful.","9423e7cf":"Prediction using Naive Bayes algorithm.","41ef0128":"Prediction using Decision Tree algorithm.","457bb76f":"We can see that most of those who lost their lives stayed in low quality cabins. In addition, the number of people who lost their lives in quality cabins is very few.","ab3303e3":"Let's observe the 2 missing data on \"Embarked\" column.","2ab96d04":"## Preprocessing","fa339e52":"SVC","29d90f35":"Gender distribution.","f8f89807":"Let's see how many missing data we have in our dataframe.","b96312ee":"We have enough useful features. Let's discard all unnecessary columns that have no correlation with the survival of passengers.","947cdbc1":"Title distribution.","c7620f1c":"Finally, we still have categorical data. Let's convert them to numeric values.","50ad010e":"Now that we have the titles, let's add them to our dataframe. ","d36ed0e0":"Let's fill in the missing ages with the average age of the passengers' titles.","ec34d90e":"Let's do the same to our test data.","31461c0f":"Let's see what class the survivors and non-survivors are in.","6d8f6858":"Let's look at the Age Distribution.","e1970a97":"Let's try to understand which type of cabin is the most expensive.","446f662d":"We see that all passengers who have stayed in cabin A are first class. Let's check the other cabins.","f3c6b920":"Let's examine from which port the survivors and those who did not get on board.","2c9f1fea":"Same cabin, same fare, same ticket. Embarkation places will also be no different.\n\nLet's try to find out which port's fares are close to the fare they paid.","248de7c9":"Now we don't have any more missing data on \"Age\" column.","98d5eba5":"Too many cabins with very close values. If we try to fill in each missing cabin data as one of these 8 cabins, we will definitely make a lot of mistakes. Instead; Let's divide the cabins into 3 categories: A-B-C cabins as \"Good\", the D-E cabins as \"Standard\" and the F-G cabins as \"Low\".\n\nPclass 1 and those with a fee of 70 and above are \"Good\", Pclass 2 and those whose fares are between 30 and 70 are \"Standard\" and Pclass 2 or 3 and fares less than 30 are \"Low\"","f3127523":"We can see that we have lots of missing data in \"Cabin\" feature. Let's check the unique values of it.","ded0f4ce":"Let's check the missing data in our dataset once again.","e9efdec4":"Apart from the numbers, these are just cabin types from A to F. Let's try to figure out which cabin types are more luxurious and more expensive than others.","11dbd0f9":"We're already done with the columns related to the cabin. Once we drop them, our only missing datas will be on \"Age\" and \"Embarked\" columns. Now, let's try to fill the missing data on the \"Age\" column.","04a9ba73":"Now we add \"Cabin Type\" feature on our dataframe.","173b2d75":"We can now predict what quality of cabin passengers are staying in. We have made a feature extraction which will help us predict the passengers' survival.","e58c5e24":"Let's try to narrow down the \"Title\" column.","5ba5a14a":"Prediction using KNN algorithm.","9262e806":"final version of our dataframes.","3d781e60":"The correlation heatmap of the dataframe.","90148ca7":"## EDA","b5a9bcbe":"Let's do this to our test dataframe too.","c84a9efe":"Let's examine the relationship between age and gender of paid fares.","678594d4":"We can observe that the prices are in alphabetical order.\nBut cabin \"A\" seems to be an exception. Let's observer cabin \"A\".","bbc7a65b":"Prediction using Random Forest algorithm.","596cfd5c":"Fares paid at the ports.","275cddb1":"Let's see our dataframe generally.","c5b8f74c":"The fare they paid is closer to the average fare paid by the people who embarked from C.\n\nThey are more likely embarked on C than the other options.","79c7368e":"Fare distribution.","a01b62a0":"Let's do the same for our test data.","eefddd34":"It seems that A-B-C cabins are of higher quality and generally more expensive than the other cabins.\n\nThere is no one in the A-B-C cabins other than the 1st class and there are no 1st class in F-G cabins. Then we can try to fill in the missing cabin data according to the class of the passengers and the ticket fares they paid.","e5fd9152":"Let's see all the cabin types.","7ba06c1b":"How many passengers stayed in which cabin type.","4596f0d7":"Gradient Boosting","5c98dd1d":"Features' count, mean, std, min and max values.","cb227839":"Let's look at the distribution of survivors and non-survivors.","7f7f0264":"We can now divide our dataframe into dependent and independent variables.","690dbaa6":"How many people get on from which port.","198d38d2":"Let's examine the correlation between cabin quality and survival.","c904d253":"Let's check the missing values again.","0ed44acf":"Let's see how many of the survivors and non-survivors are men and how many women.","ddca2f83":"Comparing the scores.","ee8b5e6f":"Now we don't have any more missing values.","981a8349":"We see that the age range is between 20 - 40."}}