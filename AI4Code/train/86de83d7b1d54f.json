{"cell_type":{"e8ce65a7":"code","df014fac":"code","81a61d43":"code","a6821a33":"code","122f6995":"code","b2391bdc":"code","f7a5d545":"code","67f2ff29":"code","a3824313":"code","4dea7954":"code","01bf679e":"code","a0c4bbc7":"code","09849c97":"code","be2cafc8":"code","e61d07f5":"code","56946315":"code","85b9816f":"code","aefa1d0e":"code","31b5524a":"code","3010d9b1":"code","fac429df":"code","3ac7c723":"code","74ffc5e4":"code","1eafc966":"code","7164d4f4":"code","5e266542":"code","3d1dab16":"code","6313b4d9":"code","8b64637f":"code","e60baa3f":"code","c0c8d261":"code","de3d5a34":"code","eaaf46f0":"code","b800d8ba":"code","c2ac9abf":"code","d8e782ba":"code","6389dcbd":"code","2f41e931":"code","adc98c93":"code","80e5618c":"code","3e7a0577":"code","e239f4e8":"code","f3a0bd2a":"code","e5b53d72":"code","7014fcc9":"code","cc22b8e8":"code","933a3e40":"code","b6399c42":"code","2c92d382":"code","0b8181a1":"markdown","ab6d93ba":"markdown","97a237fa":"markdown","173569de":"markdown","497ae8bd":"markdown","3aebdac3":"markdown","6ebe6d6b":"markdown","964af489":"markdown","7044b957":"markdown","a9568b51":"markdown","859fbd49":"markdown","34a79b64":"markdown","ea0df293":"markdown","fdd44268":"markdown","f702e539":"markdown","6e29b3c0":"markdown","147d4daf":"markdown","8e1ea0f9":"markdown","bb0c03db":"markdown","c41ec819":"markdown","88132272":"markdown","d0622690":"markdown","35c73517":"markdown","b7bc3dbd":"markdown","9167a041":"markdown","bf8ccfc3":"markdown","f4e6e23e":"markdown","12d5e8a9":"markdown","1fa317b8":"markdown"},"source":{"e8ce65a7":"#importing important liberaries\n\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn import model_selection\nfrom sklearn.linear_model import Ridge, RidgeCV, Lasso, LassoCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler","df014fac":"# LOading the Data\ndf = pd.read_csv('\/kaggle\/input\/baseball-player-salary-prediction\/Player.csv')\ndf","81a61d43":"# viewing Raw data\ndf.head()","a6821a33":"# Dimension of data\ndf.shape","122f6995":"# column data Types\ndf.info()","b2391bdc":"# Checking null values\ndf.isnull().sum()","f7a5d545":"#Droping NUll values\ndf.dropna(inplace = True)","67f2ff29":"\npd.set_option('precision',3)\ndf.describe()","a3824313":"# League columns\nleag = df.League.value_counts()\nprint(leag)\nleag.plot.pie()\n","4dea7954":"# Division column\ndiv = df.Division.value_counts()\nprint(div)\ndiv.plot.pie()\n","01bf679e":"# For New League\nNleag = df.NewLeague.value_counts()\nprint(Nleag)\nNleag.plot.pie()\n","a0c4bbc7":"dummyCol = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\ndummyCol.head()","09849c97":"dummyCol.info()","be2cafc8":"XTemp = df.drop(['Unnamed: 0','Salary', 'League', 'Division', 'NewLeague'], axis=1)\n\nX = pd.concat([XTemp, dummyCol[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n\nX.info()","e61d07f5":"y = df.Salary\ny.head()","56946315":"alphas = 10**np.linspace(10,-2,100)*0.00001\nridge = Ridge()\ncoeffs = []","85b9816f":"scaler = StandardScaler() \nfor a in alphas: \n    ridge.set_params(alpha=a) \n    ridge.fit(scaler.fit_transform(X), y) \n    coeffs.append(ridge.coef_) ","aefa1d0e":"np.shape(coeffs)","31b5524a":"ax = plt.gca() \nax.plot(alphas, coeffs) \nax.set_xscale('log') \nplt.axis('tight') \nplt.xlabel('Lambda') \nplt.ylabel('Coefficients') \nplt.title('Ridge coefficients as a function of lambda(alpha)')","3010d9b1":"pd.set_option('precision', 6)                              \nX_train, X_test , y_train, y_test = model_selection.train_test_split(X, y, test_size=0.5, random_state=1)  ","fac429df":"def Ridge_Regression(alpha):\n    scaler = StandardScaler()\n    ridge = Ridge(alpha=alpha)\n    ridge.fit(scaler.fit_transform(X_train),y_train)\n    pred = ridge.predict(scaler.fit_transform(X_test))\n    print(pd.Series(ridge.coef_,index=X.columns))\n    print('Mean Squared Error: ', mean_squared_error(y_test, pred))","3ac7c723":"Ridge_Regression(0)","74ffc5e4":"Ridge_Regression(5)","1eafc966":"Ridge_Regression(10)","7164d4f4":"Ridge_Regression(100)","5e266542":"Ridge_Regression(1000)","3d1dab16":"Ridge_Regression(10**10)","6313b4d9":"scaler = StandardScaler()\nridgecv = RidgeCV(alphas=alphas)\nridgecv.fit(scaler.fit_transform(X_train), y_train)\nridgecv.alpha_ ","8b64637f":"scaler = StandardScaler()\nridgecv = RidgeCV(alphas=alphas, cv = 5)\nridgecv.fit(scaler.fit_transform(X_train), y_train)\nridgecv.alpha_ ","e60baa3f":"scaler = StandardScaler()\nridgecv = RidgeCV(alphas=alphas, cv = 10)\nridgecv.fit(scaler.fit_transform(X_train), y_train)\nridgecv.alpha_ ","c0c8d261":"scaler = StandardScaler()\nopt_ridge = Ridge(alpha=ridgecv.alpha_) \nopt_ridge.fit(scaler.fit_transform(X_train), y_train) \npred = opt_ridge.predict(scaler.fit_transform(X_test))\nmean_squared_error(y_test, pred)","de3d5a34":"opt_ridge.fit(X,y)\npd.Series(opt_ridge.coef_, index = X.columns)","eaaf46f0":"lasso = Lasso(max_iter = 100000)\ncoefs = []\nscaler = StandardScaler()","b800d8ba":"for a in alphas:\n    lasso.set_params(alpha = a)\n    lasso.fit(scaler.fit_transform(X_train), y_train)\n    coefs.append(lasso.coef_)","c2ac9abf":"ax = plt.gca()\nax.plot(alphas*2, coefs)\nax.set_xscale('log')\nplt.axis('tight')\nplt.xlabel('Lambda')\nplt.ylabel('Coddicients')\nplt.title('Lasso coefficients as function of Lambda(alpha)')\nplt.show()","d8e782ba":"lassocv = LassoCV(alphas = None, cv = 10, max_iter = 100000)\nlassocv.fit(scaler.fit_transform(X_train), y_train)","6389dcbd":"lassocv.alpha_","2f41e931":"lasso.set_params(alpha = lassocv.alpha_)\nlasso.fit(scaler.fit_transform(X_train), y_train)\nmean_squared_error(y_test, lasso.predict(scaler.fit_transform(X_test)))","adc98c93":"pd.Series(lasso.coef_, index=X.columns) ","80e5618c":"pd.Series(lasso.coef_[lasso.coef_ !=0], index=X.columns[lasso.coef_ !=0])","3e7a0577":"from sklearn.preprocessing import scale\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","e239f4e8":"pca = PCA()\nx_pca_reduced = pca.fit_transform(scale(X))\nprint(pca.components_.shape)","f3a0bd2a":"pd.DataFrame(pca.components_.T).loc[:4,:4]","e5b53d72":"np.cumsum(np.round(pca.explained_variance_ratio_, decimals=4)*100)","7014fcc9":"pca_t = PCA() \n\nX_train_reduced_pca = pca_t.fit_transform(scale(X_train)) \n\nn = len(X_train_reduced_pca) \n\nkfold10 = KFold(n_splits=10)\n\nlm_regr = LinearRegression()\n\nmse = []                                                               \n\ntr_score = -1*cross_val_score(lm_regr, np.ones((n,1)),y_train, cv=kfold10, scoring='neg_mean_squared_error').mean()\n    \nmse.append(tr_score) \n\nfor i in np.arange(1, 20): \n    tr_score = -1*cross_val_score(lm_regr, X_train_reduced_pca[:,:i], y_train, cv=kfold10, scoring='neg_mean_squared_error').mean() \n    mse.append(tr_score) \n\nplt.plot(mse, '-v') \nplt.xlabel('Number of principal components in regression') \nplt.ylabel('MSE') \nplt.title('Player Salary') \nplt.xlim(xmin=-1); \nplt.plot()","cc22b8e8":"# MSE for Each Component\nmse_each_comp=pd.Series(np.array(mse).flatten(), index = np.arange(1,21)) \nmse_each_comp","933a3e40":"# Minimum MSE\nnp.amin(mse_each_comp)","b6399c42":"# Regression MOdel with reduced Component\nX_test_reduced_pca = pca_t.transform(scale(X_test))[:,:7] \n\nregr = LinearRegression() \n\nregr.fit(X_train_reduced_pca[:,:7], y_train) \n\npred = regr.predict(X_test_reduced_pca) \n\nmean_squared_error(y_test, pred) ","2c92d382":"regr.coef_","0b8181a1":"*** Ridge REgression Lambda 100 ***","ab6d93ba":"*** LassoCV - cv = 10 ***","97a237fa":"*** Principle COmponents ***","173569de":"# Cross Validation - RidgeCV","497ae8bd":"***Principal Components Variance Explained***","3aebdac3":"*** Statistical Data analysis ***","6ebe6d6b":"# LassoCV","964af489":"*** Ridge REgression Lambda 1000 ***","7044b957":"# Optimal Lasso","a9568b51":"# Optimal Rigid Regression","859fbd49":"*** Coefficient !=0 ***","34a79b64":"# Statistical Analysis and Encode Variables","ea0df293":"*** Implementing PCA ***","fdd44268":"*** Categorical Variable Analysis ***","f702e539":"*** Output Variable ***","6e29b3c0":"***RidgeCV (cv = 10)***","147d4daf":"*** Ridge REgression Lambda 10 ***","8e1ea0f9":"***Encode Categorical Variables ***","bb0c03db":"*** Ridge REgression Lambda 0 ***","c41ec819":"# Ridge Regression","88132272":"*** Ridge REgression Lambda 10^10 ***","d0622690":"# Preparing INPUT\/OUTPUT Variables","35c73517":"***RidgeCV (cv=none)***","b7bc3dbd":"# Principle Components Analysis","9167a041":"# Lasso Regression","bf8ccfc3":"*** Import Liberaries ***","f4e6e23e":"*** RidgeCV (cv=5)***","12d5e8a9":"*** Ridge REgression Lambda 5 ***","1fa317b8":"***Input Variables***"}}