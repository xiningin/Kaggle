{"cell_type":{"05ccee70":"code","49715a5e":"code","4fb0d4ce":"code","7474bc49":"code","bea0b92a":"code","32002438":"code","7177e7df":"code","65ebae0d":"code","c7d35c76":"code","719621e5":"code","c4643434":"code","8f86774c":"code","ce720ef8":"code","b32a4487":"code","eb55a02c":"code","a5235625":"code","810a2ec4":"code","6ac3505f":"code","126981b3":"code","4fc90d30":"code","49a4d877":"code","351d37c6":"code","9e0e8630":"code","75682324":"code","fdcab119":"code","b53b0e5d":"code","2ce6e1ce":"code","6c8c087f":"code","eb986569":"code","44ce5c60":"code","ccea1529":"code","9af458c1":"code","a4ba7feb":"code","ccc13666":"code","f56c85b1":"code","583bbae5":"code","fe0f46a1":"code","eff7e3ab":"code","f8cd8f4d":"code","f5cf954d":"code","c93494e0":"code","b12c72bf":"code","5c07c19f":"code","a36f3119":"code","f4190c5d":"code","5eff4eb5":"code","d9458be8":"code","652a29eb":"code","8861f394":"code","f4198d5b":"code","6c0f8a22":"code","da12f5c2":"code","9d5f02e3":"code","ab8cb1ef":"code","b73d6e1e":"code","107fa59a":"code","b21f059a":"code","1abb23d5":"code","949a1b38":"code","7710a7a4":"code","aab8a2bd":"code","cfd56267":"markdown","ffaa91d5":"markdown"},"source":{"05ccee70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","49715a5e":"from sklearn.compose import ColumnTransformer\nimport re\nfrom statistics import mean\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder , StandardScaler , LabelEncoder , MinMaxScaler\nfrom sklearn.metrics import mean_absolute_error , mean_squared_error\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score , train_test_split , StratifiedKFold , GridSearchCV , learning_curve\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.tree import DecisionTreeClassifier","4fb0d4ce":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\nsub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","7474bc49":"train_data.shape","bea0b92a":"print(train_data.isnull().sum())\n(train_data[train_data['Embarked'].isnull()])","32002438":"train_data.head()\n#print(train_data.shape)","7177e7df":"pd.crosstab(train_data.Pclass , train_data.Survived)","65ebae0d":"plt.figure()\nax = sns.countplot('Pclass' , hue = 'Survived' , data = train_data)\nheight = sum([p.get_height() for p in ax.patches])\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 2,\n            '{:1.2f}'.format(100* height\/len(train_data)),\n            ha=\"center\") \nplt.show()","c7d35c76":"plt.figure()\nax = sns.countplot('Sex' , hue = 'Survived' , data = train_data)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width()\/2 , height+2 , '{:1.2f}'.format(100 * height \/ len(train_data)) , ha = 'center')","719621e5":"pd.crosstab(train_data.Sex , train_data.Survived)","c4643434":"train_data.head()","8f86774c":"pd.crosstab([train_data.Sex , train_data.Pclass] , train_data.Survived , margins = True)","ce720ef8":"train_data.head()","b32a4487":"train_data[train_data['Age'].isnull()]","eb55a02c":"my_imputer = LabelEncoder()\ntrain_data['Sex']= my_imputer.fit_transform(train_data['Sex'])\ntest_data['Sex']= my_imputer.fit_transform(test_data['Sex'])","a5235625":"train_data.head()","810a2ec4":"ax = sns.countplot('Embarked' , data = train_data)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width()\/2 , height+4, '{:1.2f}'.format(height) , ha = 'center')","6ac3505f":"train_data['Embarked'].fillna('S',inplace = True)\ntest_data['Embarked'].fillna('S',inplace = True)","126981b3":"\nsns.factorplot('Embarked' , 'Survived', data = train_data)","4fc90d30":"print(train_data['Embarked'].isnull().sum())","49a4d877":"train_data['Title'] = train_data.Name.apply(lambda x : re.search('([A-Z][a-z]+)\\.' , x).group(1))\ntest_data['Title'] = test_data.Name.apply(lambda x : re.search('([A-Z][a-z]+)\\.' , x).group(1))","351d37c6":"pd.crosstab(train_data.Title , train_data.Sex).T","9e0e8630":"train_data.Title.replace(['Capt' , 'Col' , 'Countess' , 'Don' , 'Dr' , 'Jonkheer' , 'Lady' , 'Major' , 'Mlle' , 'Mme',\n                         'Ms' , 'Rev' , 'Sir'] , ['Mr' , 'Mr' , 'Mrs' , 'Mr' , 'Mr' , 'Mr' , 'Mrs' , 'Mr',\n                                                 'Miss' , 'Miss' , 'Mrs' , 'Mr' , 'Mr'] , inplace = True)\n\ntest_data.Title.replace(['Capt' , 'Col' , 'Countess' , 'Don' , 'Dr' , 'Jonkheer' , 'Lady' , 'Major' , 'Mlle' , 'Mme',\n                         'Ms' , 'Rev' , 'Sir'] , ['Mr' , 'Mr' , 'Mrs' , 'Mr' , 'Mr' , 'Mr' , 'Mrs' , 'Mr',\n                                                 'Miss' , 'Miss' , 'Mrs' , 'Mr' , 'Mr'] , inplace = True)\n\n","75682324":"pd.crosstab(train_data.Title , train_data.Survived).T","fdcab119":"pd.crosstab([train_data.Title,train_data.Pclass] , train_data.Survived).T","b53b0e5d":"sns.factorplot('Title' , 'Survived' , col = 'Pclass' , data = train_data)","2ce6e1ce":"print('Average Age of Mr is {0}'.format(train_data[train_data.Title == 'Mr'].Age.mean()))\nprint('Average Age of Mrs is {0}'.format(train_data[train_data.Title == 'Mrs'].Age.mean()))\nprint('Average Age of Master is {0}'.format(train_data[train_data.Title == 'Master'].Age.mean()))\nprint('Average Age of Miss is {0}'.format(train_data[train_data.Title == 'Miss'].Age.mean()))","6c8c087f":"train_data.loc[(train_data.Age.isnull())&(train_data.Title=='Mr'),'Age']=33\ntrain_data.loc[(train_data.Age.isnull())&(train_data.Title=='Mrs'),'Age']=36\ntrain_data.loc[(train_data.Age.isnull())&(train_data.Title=='Master'),'Age']=4.57\ntrain_data.loc[(train_data.Age.isnull())&(train_data.Title=='Miss'),'Age']=22\n\n\n\n\ntest_data.loc[(test_data.Age.isnull())&(test_data.Title=='Mr'),'Age']=33\ntest_data.loc[(test_data.Age.isnull())&(test_data.Title=='Mrs'),'Age']=36\ntest_data.loc[(test_data.Age.isnull())&(test_data.Title=='Master'),'Age']=4.57\ntest_data.loc[(test_data.Age.isnull())&(test_data.Title=='Miss'),'Age']=22\n","eb986569":"train_data.Age.isnull().sum()\ntest_data.Age.isnull().sum()","44ce5c60":"sns.countplot('SibSp' , hue = 'Survived' , data = train_data)\nsns.factorplot('SibSp' , 'Survived' , data = train_data)","ccea1529":"pd.crosstab(train_data.Parch , train_data.Survived).T\n","9af458c1":"sns.factorplot('Parch' , 'Survived' , data = train_data)","a4ba7feb":"train_data['Age_range'] = 0\ntrain_data.loc[(train_data.Age<=20) , 'Age_range'] = 0\ntrain_data.loc[((train_data.Age>20) & (train_data.Age<=40)) , 'Age_range'] = 1\ntrain_data.loc[((train_data.Age>40) & (train_data.Age<=60)) , 'Age_range'] = 2\ntrain_data.loc[(train_data.Age>60) , 'Age_range'] = 3\n\n\ntest_data['Age_range'] = 0\ntest_data.loc[(test_data.Age<=20) , 'Age_range'] = 0\ntest_data.loc[((test_data.Age>20) & (test_data.Age<=40)) , 'Age_range'] = 1\ntest_data.loc[((test_data.Age>40) & (test_data.Age<=60)) , 'Age_range'] = 2\ntest_data.loc[(test_data.Age>60) , 'Age_range'] = 3","ccc13666":"pd.crosstab(train_data.Age_range , train_data.Survived)","f56c85b1":"sns.factorplot('Age_range' , 'Survived' , data = train_data)","583bbae5":"print('Min of Fare Value is: {0}'.format(train_data.Fare.min()))\nprint('Max of Fare Value is: {0}'.format(train_data.Fare.max()))\nprint('Avg of Fare Value is: {0}'.format(train_data.Fare.mean()))","fe0f46a1":"sns.distplot(train_data['Fare']  )","eff7e3ab":"my_encoder = LabelEncoder()\ntrain_data.Fare = train_data.Fare.fillna(-0.5)\n\nrange1 = [-1 , 0 , 8 , 15 , 31 , 600]\n\n\n\ntrain_data['Fare_range'] = pd.cut(train_data['Fare'] , range1)\ntrain_data['Fare_range'] = my_encoder.fit_transform(train_data['Fare_range'])\n\n\n\ntest_data.Fare = test_data.Fare.fillna(-0.5)\n\nrange1 = [-1 , 0 , 8 , 15 , 31 , 600]\n\n\ntest_data['Fare_range'] = pd.cut(test_data['Fare'] , range1 )\ntest_data['Fare_range'] = my_encoder.fit_transform(test_data['Fare_range'])","f8cd8f4d":"pd.crosstab(train_data.Fare_range , train_data.Survived).T","f5cf954d":"sns.factorplot('Fare_range' , 'Survived' , data = train_data)","c93494e0":"train_data","b12c72bf":"train_data['Family_Size'] = train_data['SibSp'] + train_data['Parch'] + 1\n\ntest_data['Family_Size'] = test_data['SibSp'] + test_data['Parch'] + 1","5c07c19f":"sns.countplot('Family_Size'  ,hue = 'Survived' , data = train_data)\nsns.factorplot('Family_Size' , 'Survived' , data = train_data)","a36f3119":"train_data.drop(['PassengerId' , 'Name' , 'Age' , 'SibSp' , 'Parch' , 'Ticket' , 'Fare' ,'Cabin'] , 1 , inplace = True)\n\ntest_data.drop(['PassengerId','Name' , 'Age' , 'SibSp' , 'Parch' , 'Ticket' , 'Fare' ,'Cabin'] , 1 , inplace = True)","f4190c5d":"test_data","5eff4eb5":"test_data","d9458be8":"encoder = LabelEncoder()\ntrain_data['Embarked'] = encoder.fit_transform(train_data['Embarked'])\ntrain_data['Title'] = encoder.fit_transform(train_data['Title'])\n\n\ntest_data['Embarked'] = encoder.fit_transform(test_data['Embarked'])\ntest_data['Title'] = encoder.fit_transform(test_data['Title'])","652a29eb":"X = (train_data.iloc[: , 1:]).values\ny = (train_data.iloc[: ,:1]).values","8861f394":"X_train , X_test , y_train , y_test = train_test_split(X , y , train_size = 0.8 , test_size = 0.2 , random_state = 0\n                                                    )","f4198d5b":"kfold = StratifiedKFold(n_splits=10)","6c0f8a22":"random_state = 2\nclassifiers = []\nclassifiers.append(SVC(random_state=random_state))\nclassifiers.append(DecisionTreeClassifier(random_state=random_state))\nclassifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state),random_state=random_state,learning_rate=0.1))\nclassifiers.append(RandomForestClassifier(random_state=random_state))\nclassifiers.append(ExtraTreesClassifier(random_state=random_state))\nclassifiers.append(GradientBoostingClassifier(random_state=random_state))","da12f5c2":"cv_results = []\nfor classifier in classifiers :\n    cv_results.append(cross_val_score(classifier, X, y , scoring = \"accuracy\", cv = kfold, n_jobs=4))","9d5f02e3":"cv_means = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())","ab8cb1ef":"cv_res = pd.DataFrame({\"CrossValMeans\":cv_means,\"CrossValerrors\": cv_std,\"Algorithm\":[\"SVC\",\"DecisionTree\",\"AdaBoost\",\n\"RandomForest\",\"ExtraTrees\",\"GradientBoosting\"]})","b73d6e1e":"cv_res","107fa59a":"RFC = RandomForestClassifier()\n\n\n## Search grid for optimal parameters\nrf_param_grid = {\"max_depth\": [None],\n              \"min_samples_split\": [2, 3, 10],\n              \"min_samples_leaf\": [1, 3, 10],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[100,300],\n              \"criterion\": [\"gini\"]}\n\n\ngsRFC = GridSearchCV(RFC,param_grid = rf_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsRFC.fit(X , y)\n\nRFC_best = gsRFC.best_estimator_\n\n# Best score\ngsRFC.best_score_","b21f059a":"pred = gsRFC.predict(test_data)\nprint(mean_absolute_error(pred , sub['Survived']))","1abb23d5":"print(pred)","949a1b38":"sub['Survived'] = pred","7710a7a4":"sub\n","aab8a2bd":"sub.to_csv('submission.csv' , index = False)","cfd56267":"for i in range (0,len(train_data)):\n    if(train_data['Name'][i].find('Mr.')!=-1):\n        train_data['Name'][i] = 'Mr.'\n    elif(train_data['Name'][i].find('Mrs.')!=-1):\n         train_data['Name'][i] = 'Mrs.'\n    elif(train_data['Name'][i].find('Miss')!=-1):\n         train_data['Name'][i] = 'Miss'\n    else:\n        train_data['Name'][i] = 'other'","ffaa91d5":"x = ['Mr.' , 'Mrs.' , 'Miss' , 'Other']\ny = [train_data[train_data['Name'] == 'Mr.'].Age.mean() , \n      train_data[train_data['Name'] == 'Mrs.'].Age.mean() , \n       train_data[train_data['Name'] == 'Miss'].Age.mean() , \n        train_data[train_data['Name'] == 'other'].Age.mean()]\n\nax = sns.barplot(x , y)\nplt.xlabel('Category')\nplt.ylabel('average age')\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width()\/2 , height+0.5\n            , '{:1.2f}'.format(height) ,ha= 'center')"}}