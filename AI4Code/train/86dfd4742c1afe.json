{"cell_type":{"65283ed5":"code","86220156":"code","8ca89b52":"code","8244dcf4":"code","205081cd":"code","1280244a":"code","f5df5688":"code","89dadb2a":"code","61b4039e":"code","0ad3edb0":"code","b2fbcd95":"code","a839f8bc":"code","d2d795be":"code","79839c33":"code","983c704b":"code","f3b48ae0":"code","3842e532":"code","d8d74d64":"code","fb6b2ca2":"code","f8ee2fa2":"code","d202c031":"code","9c8b9fe5":"code","8eb4a323":"code","d7866a48":"code","6ed9a6d5":"code","05b7c726":"code","572830d8":"code","3ecb121b":"code","7b1ab7d4":"code","79c622a2":"code","3e022743":"code","b9f8d133":"code","27d5969b":"code","eff9475f":"code","48534123":"code","37d5f873":"code","399d8479":"code","8de5473a":"code","8759590f":"code","dd8049bb":"code","a9bc78ff":"code","4ac76e8f":"code","8b4f4aee":"code","c235b3f4":"code","bf77cff8":"code","083db2a6":"code","7b6e1812":"code","7ccfb07f":"code","cc016c68":"code","84690c0d":"code","c0f2760b":"code","90723dd3":"code","194830f8":"code","be9e168e":"code","f77791ce":"code","7e517533":"code","22a4b0e6":"code","f6dfcc71":"code","5580f9a6":"code","f208ac9f":"code","b6054e97":"code","4a4c97e1":"code","9f089bfb":"code","5113482a":"code","3051e19b":"code","025a040f":"code","deae8c68":"code","7494b629":"code","224e90d2":"code","8acc3e30":"code","67e6439e":"code","24ed486c":"code","f297c527":"code","ed2bf6b1":"code","e637bb44":"code","f3d42590":"code","f0dba866":"code","9ed0e182":"code","978b8dfd":"code","cd74468c":"code","03502b73":"code","5d446d9a":"code","cf7df1d3":"code","6befe4c8":"code","f8239008":"code","92185830":"code","3fa87d07":"code","347a34e3":"code","22f58a52":"code","74f90b9c":"code","af9a5bd7":"code","b7635eab":"code","f6fcf8c9":"code","d7ef1eda":"code","b8ceb94f":"code","f4f4dc3b":"code","8f81b191":"code","293341b9":"code","7f3a81c8":"code","70428225":"code","d822c4bd":"code","441ee2b5":"code","c69b4473":"code","502ff8da":"code","99bbd89e":"code","71769d48":"code","b8499a9d":"code","63180bd7":"code","1411191b":"code","639094cd":"code","da4b7d99":"code","a8465565":"code","a10a2c6a":"code","bc38bf9a":"code","72b592fd":"code","6140ee8e":"code","8fc66c6b":"code","fe37092d":"code","f1ac1230":"code","c2c114ac":"code","b89f69dd":"code","2760405d":"code","3631edd3":"code","6dce828b":"code","2456ce84":"code","9990bc5d":"code","710ff836":"code","cbd3b25f":"code","3e5a1e4e":"code","43e29b85":"code","64e8f67b":"code","998a42a0":"code","9ab7f43f":"code","fd3d39fb":"code","c6b3d989":"code","4686dad9":"code","09601dd1":"code","37bbd280":"code","e73482ba":"code","931bc93a":"code","ecdcba93":"code","bd267bda":"code","b5a5d784":"code","ca5717b3":"code","2195f3df":"code","67ded44c":"code","1500eb48":"code","28151b30":"code","56ac36ac":"code","00ee619b":"code","b08dd393":"code","842592ef":"code","b91575c9":"code","efa4a219":"code","504b8b1b":"code","af492295":"code","efc11ac7":"code","ba268ae4":"code","dfe8d8e6":"code","3dc1d806":"code","ffbf0ea0":"code","f5d95428":"code","37029470":"code","8dcbb787":"code","5280ef5b":"code","10e89723":"code","c1f653af":"code","284dd14d":"code","695cf1f2":"code","5b04b3e9":"code","61551b28":"code","0bd2cbf8":"code","811867ae":"code","0eab125a":"code","751af2d0":"code","a2ac7c37":"code","9512e0b8":"code","c0437ecc":"code","15c5bb87":"code","d17f2075":"code","a2448c2c":"code","5ee77b20":"code","3fd92e9c":"code","0bee5a3d":"code","78334658":"code","2e69f5b7":"code","ecf859c2":"code","19b4fdb4":"code","9677fa15":"code","45a5ae3c":"code","6d1725a5":"code","0925c63a":"code","253f1cc8":"code","e7d2eefb":"code","34163a4e":"code","b8b84780":"code","498f26f4":"code","fe1c0094":"code","10e1365d":"code","35e95063":"code","a5d6da71":"code","00c6aa8f":"code","084afbe7":"code","33fe41c4":"code","250135f9":"code","426ef2b9":"code","5b4a778e":"code","19814511":"code","fa6b1272":"code","2c522f3a":"code","0e1baa33":"code","9710b050":"code","c7302d63":"code","1bda910e":"code","256fb7cc":"code","ffc0d7ff":"code","df8383fc":"code","28b5dc30":"code","9d216c4e":"code","7db7aa91":"code","a2750ac8":"code","3b9a2f65":"code","f2c9c795":"code","e2b865d0":"code","7be4749c":"code","aed8c5e5":"code","96c37e00":"code","aaddc308":"code","44a479dd":"code","b344018e":"code","f3e99759":"code","fd2c88e8":"code","265d41a9":"code","da95e46b":"code","d7d47e8f":"code","05a35d43":"code","50f51e75":"code","e8a10d85":"code","dee45cba":"code","237bcafb":"code","e537d713":"code","b7af90bd":"code","d8c54809":"code","84ef6f4b":"code","8cbd567e":"code","356e1d63":"code","e976b5f7":"code","d195aad1":"code","d43575e9":"code","41d0963c":"code","4a8b808d":"code","b6f49275":"code","11de8802":"code","04195f4b":"code","7f8ced93":"code","84ff333a":"code","24ba34f4":"code","94fa761b":"code","bc75f379":"code","fc704796":"code","a57dfdf2":"code","b1553441":"code","4bd8b9f9":"code","4714b32d":"code","1a682164":"code","ef7fcbda":"code","6909febc":"code","3b8f9c86":"code","61842175":"code","f20a58ec":"code","420690ca":"code","14e28fc7":"code","58f9f12d":"code","1360a2a7":"code","00f43b44":"code","b65ebc7f":"code","75df7ebe":"code","c9b86f2b":"code","f46a78cb":"code","68412bad":"code","d29a4476":"code","2671e4ad":"code","98a27b6b":"code","583307d7":"code","d2cafdc1":"code","ebd8f467":"code","a4183f90":"code","b4874cec":"code","0e7ae13d":"code","89694e5e":"code","49924cc5":"code","2c58b76d":"code","b9d11529":"code","73bb006e":"code","b235b9db":"code","48788d51":"code","b3110784":"code","4133099c":"code","1efc62af":"code","4c997184":"code","dbdbe7a7":"code","fa5e1ee8":"code","73669721":"code","cba61ad9":"code","5be218e7":"code","34d4895a":"code","9f42b061":"code","b7bc14f6":"code","2c6b4939":"code","bedd7819":"code","692cf421":"code","02f2e8c6":"code","bc4b296f":"code","8fa906ae":"code","540cc98d":"code","761cc77e":"code","dbc3552e":"code","477c6e68":"code","186c3aae":"code","0da63a50":"code","8a2493c0":"code","be092928":"code","9c560b6c":"code","cd33b9be":"code","3397ef62":"code","7ea908c7":"code","84fb015d":"code","1866aef2":"code","7c232705":"code","9b4f671e":"code","0b971108":"code","d90221ea":"code","f6157ff6":"code","d3214b9f":"code","f57abee0":"code","6cdc946c":"code","6e129033":"code","cc682388":"code","c1997696":"code","ac11c6f4":"code","c2e53c9c":"code","2080349e":"code","de948eec":"code","0d650081":"code","1c544141":"code","f30f2b45":"code","097a72a6":"code","1223d8d9":"code","6c451880":"code","0565b4fb":"code","2fb59d48":"code","ef810767":"code","da766e25":"code","bd05dd9b":"code","b5df6d8d":"code","b5b08892":"code","f131b26c":"code","5965f9de":"code","edba350a":"code","ebcc7d1d":"code","40eb230a":"code","a90288b9":"code","7f5d8d9c":"code","1d201262":"code","db361efb":"code","897bb050":"code","1bd422bc":"code","350a8d8b":"code","edd674b7":"code","cce72ae3":"code","c9a2ed59":"code","ee8d3ecb":"code","1e08d0df":"code","932fa45f":"code","9d5a24b5":"code","569e7e5a":"code","f7008e27":"code","173030fa":"code","fb6484ce":"code","7341f659":"code","3acfd06c":"code","5b201381":"code","244a4d2b":"code","3604d4c0":"code","5868cd3d":"code","ce1f0bde":"code","47f8d0d6":"code","f50c7a4e":"code","827c12dd":"code","4ba060d2":"code","225a5eea":"code","355a5de0":"code","e3e1ef33":"code","b7eb1587":"code","c434c7a2":"code","c2a2d397":"code","eedf961d":"code","e917500d":"code","4226f0b0":"code","5b82ce56":"code","a7ad492c":"code","73ce4e01":"code","254b7fc1":"code","c8fbef09":"code","5c8d6074":"code","662290e1":"code","9c889854":"code","40bb156e":"code","74c1f1ae":"code","c0e2fc90":"code","35480e23":"code","bfe34364":"code","23659de2":"code","6fad64d5":"code","83efa0b9":"code","8026a7b2":"code","b1fc03f3":"code","0ed63681":"code","236debbc":"code","a5612f93":"code","7b2bfd2f":"code","8661016f":"code","d863c462":"code","ecf24cef":"code","ebddabd3":"code","301b5c3b":"code","7fb3574c":"code","09405a67":"code","e32c3ef7":"code","378af6fb":"code","fd6c01fd":"code","2679da6e":"code","ea58e2a0":"code","511e4e4c":"code","6cbb10b7":"code","8805454b":"code","b76cc394":"code","8078f10d":"code","ee7544c8":"code","925e38f1":"code","230fb18d":"code","7adafb6c":"code","8944d999":"code","63f32ec1":"code","90c95eca":"code","ea5970f1":"code","98973149":"code","e1869ac2":"code","d0d74190":"code","aba68251":"markdown","417bbc39":"markdown","7c77d595":"markdown","6a756e5a":"markdown","82fe01ed":"markdown","1edfa1ae":"markdown","26ff396f":"markdown","dcf2b10e":"markdown","eafb222b":"markdown","ea0ec270":"markdown","0cea6d5b":"markdown","b2d263cc":"markdown","788eb4ec":"markdown","58b46ad2":"markdown","be0a7d44":"markdown","2c574a00":"markdown","504ef98a":"markdown","0f0181cf":"markdown","2d5f6e12":"markdown","3c5adc3e":"markdown","99ca911b":"markdown","435bb117":"markdown","08f5b7e8":"markdown","3dc5f465":"markdown","9e9d87e5":"markdown","1edcfa13":"markdown","d49313b2":"markdown","7e198bb6":"markdown","d084e34c":"markdown","bac025f2":"markdown","44e54a3c":"markdown","bce58f62":"markdown","6b620aed":"markdown","adf23bde":"markdown","20a8730a":"markdown","2929d0f9":"markdown","5e44a481":"markdown","ab452dec":"markdown","c430f9f9":"markdown","8050ff20":"markdown","9f7d8978":"markdown","7ab37604":"markdown","67cdb341":"markdown","230b1dcf":"markdown","5ca4a5fb":"markdown","6dda2571":"markdown","af628fdc":"markdown","d16813d2":"markdown","ed13a8ac":"markdown","fbd3efb9":"markdown","e506487d":"markdown","9d9d2a62":"markdown","15eb0b1b":"markdown","82fc38c7":"markdown","3d50b8e1":"markdown","8b6911e3":"markdown","c75638a1":"markdown","484eb86f":"markdown","2930fb4d":"markdown","42a57e2c":"markdown","4c4fff38":"markdown","39c30086":"markdown","ec13b5f3":"markdown","1c60cdab":"markdown","7b44d1da":"markdown","838968bd":"markdown","e19d4c04":"markdown","2f123d12":"markdown","f2bd87a5":"markdown","92edc2f2":"markdown","d5456405":"markdown","ec302e42":"markdown","47b5a7dd":"markdown","1b161c04":"markdown","b098a7da":"markdown","38c0787f":"markdown","75db0e2f":"markdown","904ed223":"markdown","d7ea8209":"markdown","be2987ee":"markdown","78406b9c":"markdown","4164732b":"markdown","deb7be8c":"markdown","ca3c2116":"markdown","239bf154":"markdown","3cc9d96d":"markdown","b18fa9df":"markdown","b5f7b181":"markdown","a97845e6":"markdown","168f3577":"markdown","38e22f63":"markdown","a5d34d3d":"markdown","d2ee64de":"markdown","20d7441d":"markdown","94efd422":"markdown","2f40a574":"markdown","7157cb34":"markdown","6624c5ea":"markdown","8de11f7e":"markdown","31464aee":"markdown","5182b93c":"markdown","f9d00809":"markdown","ad58ac54":"markdown","7b12f578":"markdown","fa07d8de":"markdown","9a78d2b9":"markdown","d186963c":"markdown","2488b62c":"markdown","858d6b0e":"markdown","e6e5ab65":"markdown","752bd449":"markdown","7f7f266f":"markdown","86179bc1":"markdown","d03e8b98":"markdown","85944059":"markdown","97950390":"markdown","4515fda1":"markdown","41bf231e":"markdown","c781e9ae":"markdown","bf9440c1":"markdown","84200dd0":"markdown","ba6adf22":"markdown","1941343c":"markdown","39b9a66d":"markdown","3442ef3a":"markdown","87babbac":"markdown"},"source":{"65283ed5":"import sys\nimport keyword\nimport operator\nfrom datetime import datetime\nimport os","86220156":"print(keyword.kwlist) # List all Python Keywords","8ca89b52":"len(keyword.kwlist) # Python contains 35 keywords","8244dcf4":"1var = 10 # Identifier can't start with a digit ","205081cd":"val2@ = 35 # Identifier can't use special symbols ","1280244a":"import = 125 # Keywords can't be used as identifiers","f5df5688":"\"\"\"\nCorrect way of defining an identifier \n(Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore)\n\"\"\"\n\nval2 = 10 ","89dadb2a":"val_ = 99","61b4039e":"# Single line comment\nval1  = 10","0ad3edb0":"# Multiple \n# line \n# comment\nval1  = 10","b2fbcd95":"'''\nMultiple \nline \ncomment\n'''\nval1  = 10","a839f8bc":"\"\"\"\nMultiple \nline \ncomment\n\"\"\"\nval1  = 10","d2d795be":"# Single line statement\np1 = 10 + 20\np1","79839c33":"# Single line statement\np2 = ['a' , 'b' , 'c' , 'd']\np2","983c704b":"# Multiple line statement\np1 = 20 + 30 \\\n     + 40 + 50 +\\\n     + 70 + 80\np1","f3b48ae0":"# Multiple line statement\np2 = ['a' , \n      'b' , \n      'c' , \n      'd' \n     ]\np2","3842e532":"p = 10\nif p == 10:\n    print ('P is equal to 10') # correct indentation","d8d74d64":"# if indentation is skipped we will encounter \"IndentationError: expected an indented block\"\np = 10\nif p == 10:\nprint ('P is equal to 10')","fb6b2ca2":"for i in range(0,5):\n    print(i)               # correct indentation","f8ee2fa2":"# if indentation is skipped we will encounter \"IndentationError: expected an indented block\"\nfor i in range(0,5):\nprint(i)","d202c031":"for i in range(0,5): print(i)  # correct indentation but less readable","9c8b9fe5":"j=20\nfor i in range(0,5):\n    print(i) # inside the for loop\nprint(j) # outside the for loop","8eb4a323":"def square(num):\n    '''Square Function :- This function will return the square of a number'''\n    return num**2","d7866a48":"square(2)","6ed9a6d5":"square.__doc__  # We can access the Docstring using __doc__ method","05b7c726":"def evenodd(num):\n    '''evenodd Function :- This function will test whether a numbr is Even or Odd'''\n    if num % 2 == 0:\n        print(\"Even Number\")\n    else:\n        print(\"Odd Number\")","572830d8":"evenodd(3)","3ecb121b":"evenodd(2)","7b1ab7d4":"evenodd.__doc__","79c622a2":"p = 30","3e022743":"'''\nid() function returns the \u201cidentity\u201d of the object. \nThe identity of an object - Is an integer\n                          - Guaranteed to be unique\n                          - Constant for this object during its lifetime. \n'''\nid(p)","b9f8d133":"hex(id(p)) # Memory address of the variable","27d5969b":"p = 20  #Creates an integer object with value 20 and assigns the variable p to point to that object.\nq = 20  # Create new reference q which will point to value 20. p & q will be pointing to same memory location.\nr = q  # variable r will also point to the same location where p & q are pointing\/\np , type(p), hex(id(p)) # Variable P is pointing to memory location '0x7fff6d71a3f0' where value 20 is stored","eff9475f":"q , type(q), hex(id(q)) ","48534123":"r , type(r), hex(id(r)) ","37d5f873":"p = 20\np = p + 10 # Variable Overwriting\np","399d8479":"intvar = 10 # Integer variable\nfloatvar = 2.57 # Float Variable\nstrvar = \"Python Language\" # String variable\n\nprint(intvar)\nprint(floatvar)\nprint(strvar)","8de5473a":"intvar , floatvar , strvar = 10,2.57,\"Python Language\" # Using commas to separate variables and their corresponding values.\nprint(intvar)\nprint(floatvar)\nprint(strvar)","8759590f":"p1 = p2 = p3 = p4 = 44 # All variables pointing to same value\nprint(p1,p2,p3,p4)","dd8049bb":"val1 = 10  # Integer data type\nprint(val1)\nprint(type(val1)) # type of object\nprint(sys.getsizeof(val1)) # size of integer object in bytes \nprint(val1, \" is Integer?\", isinstance(val1, int)) # val1 is an instance of int class","a9bc78ff":"val2 = 92.78 # Float data type\nprint(val2)\nprint(type(val2)) # type of object\nprint(sys.getsizeof(val2)) # size of float object in bytes\nprint(val2, \" is float?\", isinstance(val2, float)) # Val2 is an instance of float class","4ac76e8f":"val3 = 25 + 10j # Complex data type\nprint(val3)\nprint(type(val3)) # type of object\nprint(sys.getsizeof(val3)) # size of float object in bytes\nprint(val3, \" is complex?\", isinstance(val3, complex)) # val3 is an instance of complex class","8b4f4aee":"sys.getsizeof(int()) # size of integer object in bytes ","c235b3f4":"sys.getsizeof(float())  # size of float object in bytes","bf77cff8":"sys.getsizeof(complex()) # size of complex object in bytes","083db2a6":"bool1 = True","7b6e1812":"bool2 = False","7ccfb07f":"print(type(bool1))","cc016c68":"print(type(bool2))","84690c0d":"isinstance(bool1, bool)","c0f2760b":"bool(0)","90723dd3":"bool(1)","194830f8":"bool(None)","be9e168e":"bool (False)","f77791ce":"str1 = \"HELLO PYTHON\"\n\nprint(str1)","7e517533":"mystr = 'Hello World' # Define string using single quotes\nprint(mystr)","22a4b0e6":"mystr = \"Hello World\" # Define string using double quotes\nprint(mystr)","f6dfcc71":"mystr = '''Hello               \n            World '''   # Define string using triple quotes\nprint(mystr)","5580f9a6":"mystr = \"\"\"Hello\n           World\"\"\"  # Define string using triple quotes\nprint(mystr)","f208ac9f":"mystr = ('Happy '\n         'Monday '\n         'Everyone')\nprint(mystr)","b6054e97":"mystr2 = 'Woohoo '\nmystr2 = mystr2*5\nmystr2","4a4c97e1":"len(mystr2) # Length of string","9f089bfb":"str1","5113482a":"str1[0] # First character in string \"str1\"","3051e19b":"str1[len(str1)-1] # Last character in string using len function","025a040f":"str1[-1] # Last character in string","deae8c68":"str1[6] #Fetch 7th element of the string ","7494b629":"str1[5]","224e90d2":"str1[0:5] # String slicing - Fetch all characters from 0 to 5 index location excluding the character at loc 5.","8acc3e30":"str1[6:12] # String slicing - Retreive all characters between 6 - 12 index loc excluding index loc 12.","67e6439e":"str1[-4:] # Retreive last four characters of the string","24ed486c":"str1[-6:] # Retreive last six characters of the string","f297c527":"str1[:4] # Retreive first four characters of the string","ed2bf6b1":"str1[:6] # Retreive first six characters of the string","e637bb44":"str1","f3d42590":"#Strings are immutable which means elements of a string cannot be changed once they have been assigned.\nstr1[0:5] = 'HOLAA' ","f0dba866":"del str1 # Delete a string\nprint(srt1)","9ed0e182":"# String concatenation\ns1 = \"Hello\"\ns2 = \"Asif\"\ns3 = s1 + s2\nprint(s3)","978b8dfd":"# String concatenation\ns1 = \"Hello\"\ns2 = \"Asif\"\ns3 = s1 + \" \" + s2\nprint(s3)","cd74468c":"mystr1 = \"Hello Everyone\"","03502b73":"# Iteration  \nfor i in mystr1:\n    print(i)","5d446d9a":"for i in enumerate(mystr1):\n    print(i)","cf7df1d3":"list(enumerate(mystr1)) # Enumerate method adds a counter to an iterable and returns it in a form of enumerate object.","6befe4c8":"# String membership\n\nmystr1 = \"Hello Everyone\"\n\nprint ('Hello' in mystr1) # Check whether substring \"Hello\" is present in string \"mysrt1\"\nprint ('Everyone' in mystr1) # Check whether substring \"Everyone\" is present in string \"mysrt1\"\nprint ('Hi' in mystr1) # Check whether substring \"Hi\" is present in string \"mysrt1\"","f8239008":"\"\"\"\nThe partition() method searches for a specified string and splits the string into a tuple containing three elements.\n\n - The first element contains the part before the argument string.\n\n - The second element contains the argument string.\n\n - The third element contains the part after the argument string.\n\"\"\"\n\nstr5 = \"Natural language processing with Python and R and Java\"\nL = str5.partition(\"and\") \nprint(L)","92185830":"\"\"\"\nThe rpartition() method searches for the last occurence of the specified string and splits the string into a tuple \ncontaining three elements.\n\n - The first element contains the part before the argument string.\n\n - The second element contains the argument string.\n\n - The third element contains the part after the argument string.\n\"\"\"\n\nstr5 = \"Natural language processing with Python and R and Java\"\nL = str5.rpartition(\"and\") \nprint(L)","3fa87d07":"mystr2 = \"   Hello Everyone  \"\nmystr2","347a34e3":"mystr2.strip() # Removes white space from begining & end","22f58a52":"mystr2.rstrip() # Removes all whitespaces at the end of the string","74f90b9c":"mystr2.lstrip() # Removes all whitespaces at the begining of the string","af9a5bd7":"mystr2 = \"*********Hello Everyone***********All the Best**********\"\nmystr2","b7635eab":"mystr2.strip('*') # Removes all '*' characters from begining & end of the string","f6fcf8c9":"mystr2.rstrip('*') # Removes all '*' characters at the end of the string","d7ef1eda":"mystr2.lstrip('*') # Removes all '*' characters at the begining of the string","b8ceb94f":"mystr2 = \"   Hello Everyone  \"","f4f4dc3b":"mystr2.lower() # Return whole string in lowercase ","8f81b191":"mystr2.upper() # Return whole string in uppercase ","293341b9":"mystr2.replace(\"He\" , \"Ho\") #Replace substring \"He\" with \"Ho\"","7f3a81c8":"mystr2.replace(\" \" , \"\") # Remove all whitespaces using replace function","70428225":"mystr5 = \"one two Three one two two three\"","d822c4bd":"mystr5.count(\"one\") # Number of times substring \"one\" occurred in string.","441ee2b5":"mystr5.count(\"two\") # Number of times substring \"two\" occurred in string.","c69b4473":"mystr5.startswith(\"one\")  # Return boolean value True if string starts with \"one\"","502ff8da":"mystr5.endswith(\"three\") # Return boolean value True if string ends with \"three\"","99bbd89e":"mystr4 = \"one two three four one two two three five five six seven six seven one one one ten eight ten nine eleven ten ten nine\"","71769d48":"mylist = mystr4.split() # Split String into substrings\nmylist","b8499a9d":"# Combining string & numbers using format method\nitem1 = 40\nitem2 = 55\nitem3 = 77\n\nres = \"Cost of item1 , item2 and item3 are {} , {} and {}\"\n\nprint(res.format(item1,item2,item3))","63180bd7":"# Combining string & numbers using format method\nitem1 = 40\nitem2 = 55\nitem3 = 77\n\nres = \"Cost of item3 , item2 and item1 are {2} , {1} and {0}\"\n\nprint(res.format(item1,item2,item3))","1411191b":"str2 = \" WELCOME EVERYONE \"\nstr2 = str2.center(100) # center align the string using a specific character as the fill character.\nprint(str2)","639094cd":"str2 = \" WELCOME EVERYONE \"\nstr2 = str2.center(100,'*') # center align the string using a specific character ('*') as the fill character.\nprint(str2)","da4b7d99":"str2 = \" WELCOME EVERYONE \"\nstr2 = str2.rjust(50) # Right align the string using a specific character as the fill character.\nprint(str2)","a8465565":"str2 = \" WELCOME EVERYONE \"\nstr2 = str2.rjust(50,'*') # Right align the string using a specific character ('*') as the fill character.\nprint(str2)","a10a2c6a":"str4 = \"one two three four five six seven\"\nloc = str4.find(\"five\") # Find the location of word 'five' in the string \"str4\"\nprint(loc)","bc38bf9a":"str4 = \"one two three four five six seven\"\nloc = str4.index(\"five\") # Find the location of word 'five' in the string \"str4\"\nprint(loc)","72b592fd":"mystr6 = '123456789'\nprint(mystr6.isalpha()) # returns True if all the characters in the text are letters\nprint(mystr6.isalnum())  # returns True if a string contains only letters or numbers or both\nprint(mystr6.isdecimal()) # returns True if all the characters are decimals (0-9)\nprint(mystr6.isnumeric()) # returns True if all the characters are numeric (0-9)","6140ee8e":"mystr6 = 'abcde'\nprint(mystr6.isalpha()) # returns True if all the characters in the text are letters\nprint(mystr6.isalnum())  # returns True if a string contains only letters or numbers or both\nprint(mystr6.isdecimal()) # returns True if all the characters are decimals (0-9)\nprint(mystr6.isnumeric()) # returns True if all the characters are numeric (0-9)","8fc66c6b":"mystr6 = 'abc12309'\nprint(mystr6.isalpha()) # returns True if all the characters in the text are letters\nprint(mystr6.isalnum())  # returns True if a string contains only letters or numbers or both\nprint(mystr6.isdecimal()) # returns True if all the characters are decimals (0-9)\nprint(mystr6.isnumeric()) # returns True if all the characters are numeric (0-9)","fe37092d":"mystr7 = 'ABCDEF'\nprint(mystr7.isupper())  # Returns True if all the characters are in upper case\nprint(mystr7.islower())  # Returns True if all the characters are in lower case","f1ac1230":"mystr8 = 'abcdef'\nprint(mystr8.isupper())  # Returns True if all the characters are in upper case\nprint(mystr8.islower())  # Returns True if all the characters are in lower case","c2c114ac":"str6 = \"one two three four one two two three five five six one ten eight ten nine eleven ten ten nine\"\n\nloc = str6.rfind(\"one\") # last occurrence of word 'one' in string \"str6\"\nprint(loc)","b89f69dd":"loc = str6.rindex(\"one\") # last occurrence of word 'one' in string \"str6\"\n\nprint(loc)","2760405d":"txt = \"   abc def ghi   \"\n\ntxt.rstrip()","3631edd3":"txt = \"   abc def ghi   \"\n\ntxt.lstrip()","6dce828b":"txt = \"   abc def ghi   \"\n\ntxt.strip()","2456ce84":"#Using double quotes in the string is not allowed.\nmystr = \"My favourite TV Series is \"Game of Thrones\"\"","9990bc5d":"#Using escape character to allow illegal characters\nmystr = \"My favourite series is \\\"Game of Thrones\\\"\"\nprint(mystr)","710ff836":"list1 = []      # Empty List","cbd3b25f":"print(type(list1))","3e5a1e4e":"list2 = [10,30,60]      # List of integers numbers","43e29b85":"list3 = [10.77,30.66,60.89]       # List of float numbers","64e8f67b":"list4 = ['one','two' , \"three\"]   # List of strings","998a42a0":"list5 = ['Asif', 25 ,[50, 100],[150, 90]]    # Nested Lists","9ab7f43f":"list6 = [100, 'Asif', 17.765]   # List of mixed data types","fd3d39fb":"list7 = ['Asif', 25 ,[50, 100],[150, 90] , {'John' , 'David'}]","c6b3d989":"len(list6) #Length of list","4686dad9":"list2[0] # Retreive first element of the list","09601dd1":"list4[0] # Retreive first element of the list","37bbd280":"list4[0][0] # Nested indexing - Access the first character of the first list element ","e73482ba":"list4[-1] # Last item of the list","931bc93a":"list5[-1]  # Last item of the list","ecdcba93":"mylist = ['one' , 'two' , 'three' , 'four' , 'five' , 'six' , 'seven' , 'eight']","bd267bda":"mylist[0:3] # Return all items from 0th to 3rd index location excluding the item at loc 3.","b5a5d784":"mylist[2:5] # List all items from 2nd to 5th index location excluding the item at loc 5.","ca5717b3":"mylist[:3] # Return first three items","2195f3df":"mylist[:2]  # Return first two items","67ded44c":"mylist[-3:] # Return last three items","1500eb48":"mylist[-2:] # Return last two items","28151b30":"mylist[-1] # Return last item of the list","56ac36ac":"mylist[:] # Return whole list","00ee619b":"mylist","b08dd393":"mylist.append('nine') # Add an item to the end of the list  \nmylist","842592ef":"mylist.insert(9,'ten') # Add item at index location 9\nmylist","b91575c9":"mylist.insert(1,'ONE') # Add item at index location 1\nmylist","efa4a219":"mylist.remove('ONE') # Remove item \"ONE\"\nmylist","504b8b1b":"mylist.pop() # Remove last item of the list\nmylist","af492295":"mylist.pop(8) # Remove item at index location 8\nmylist","efc11ac7":"del mylist[7] # Remove item at index location 7\nmylist","ba268ae4":"# Change value of the string\nmylist[0] = 1\nmylist[1] = 2\nmylist[2] = 3\nmylist","dfe8d8e6":"mylist.clear()  # Empty List \/ Delete all items in the list\nmylist","3dc1d806":"del mylist # Delete the whole list\nmylist","ffbf0ea0":"mylist = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']","f5d95428":"mylist1 = mylist # Create a new reference \"mylist1\" ","37029470":"id(mylist) , id(mylist1) # The address of both mylist & mylist1 will be the same as both are pointing to same list.","8dcbb787":"mylist2 = mylist.copy() # Create a copy of the list","5280ef5b":"id(mylist2) # The address of mylist2 will be different from mylist because mylist2 is pointing to the copy of the existing list","10e89723":"mylist[0] = 1","c1f653af":"mylist","284dd14d":"mylist1 # mylist1 will be also impacted as it is pointing to the same list","695cf1f2":"mylist2 # Copy of list won't be impacted due to changes made on the original list","5b04b3e9":"list1 = ['one', 'two', 'three', 'four']\nlist2 = ['five', 'six', 'seven', 'eight']","61551b28":"list3 = list1 + list2 # Join two lists by '+' operator\nlist3","0bd2cbf8":"list1.extend(list2) #Append list2 with list1\nlist1","811867ae":"# Join Method\ninput_str = [\"Hello\" , \"Good Morning\" , \"Everyone\"]\nmystr = ' & '.join(input_str)\nmystr","0eab125a":"# Join Method\ninput_str = [\"Hello\" , \"Good Morning\" , \"Everyone\"]\nmystr = ' '.join(input_str)\nmystr","751af2d0":"list1","a2ac7c37":"'one' in list1 # Check if 'one' exist in the list","9512e0b8":"'ten' in list1 # Check if 'ten' exist in the list","c0437ecc":"if 'three' in list1: # Check if 'three' exist in the list\n    print('Three is present in the list')\nelse:\n    print('Three is not present in the list')","15c5bb87":"if 'eleven' in list1:  # Check if 'eleven' exist in the list\n    print('eleven is present in the list')\nelse:\n    print('eleven is not present in the list')","d17f2075":"list1","a2448c2c":"list1.reverse() # Reverse the list\nlist1","5ee77b20":"list1 = list1[::-1] # Reverse the list\nlist1","3fd92e9c":"mylist3 = [9,5,2,99,12,88,34]\nmylist3.sort()   # Sort list in ascending order\nmylist3","0bee5a3d":"mylist3 = [9,5,2,99,12,88,34]\nmylist3.sort(reverse=True)  # Sort list in descending order\nmylist3","78334658":"mylist4 = [88,65,33,21,11,98]\nsorted(mylist4)        # Returns a new sorted list and doesn't change original list","2e69f5b7":"mylist4","ecf859c2":"list1","19b4fdb4":"for i in list1:\n    print(i)","9677fa15":"for i in enumerate(list1):\n    print(i)","45a5ae3c":"list10 =['one', 'two', 'three', 'four', 'one', 'one', 'two', 'three']","6d1725a5":"list10.count('one') # Number of times item \"one\" occurred in the list.","0925c63a":"list10.count('two') # Occurence of item 'two' in the list","253f1cc8":"list10.count('four') #Occurence of item 'four' in the list","e7d2eefb":"L1 = [1,2,3,4,0]","34163a4e":"all(L1) # Will Return false as one value is false (Value 0)","b8b84780":"any(L1)  # Will Return True as we have items in the list with True value","498f26f4":"L2 = [1,2,3,4,True,False]","fe1c0094":"all(L2) # Returns false as one value is false","10e1365d":"any(L2)  # Will Return True as we have items in the list with True value","35e95063":"L3 = [1,2,3,True]","a5d6da71":"all(L3) # Will return True as all items in the list are True","00c6aa8f":"any(L3) # Will Return True as we have items in the list with True value","084afbe7":"mystring = \"WELCOME\"\nmylist = [ i for i in mystring ] # Iterating through a string Using List Comprehension\nmylist","33fe41c4":"mylist1 = [ i for i in range(40) if i % 2 == 0] # Display all even numbers between 0 - 40 using List Comprehension\nmylist1","250135f9":"mylist2 = [ i for i in range(40) if i % 2 == 1] # Display all odd numbers between 0 - 40 using List Comprehension\nmylist2","426ef2b9":"mylist3 = [num**2 for num in range(10)] # calculate square of all numbers between 0 - 10 using List Comprehension\nmylist3","5b4a778e":"# Multiple whole list by 10\nlist1 = [2,3,4,5,6,7,8]\nlist1 = [i*10 for i in list1]\nlist1","19814511":"#List all numbers divisible by 3 , 9 & 12 using nested \"if\" with List Comprehension\nmylist4 = [i for i in range(200) if i % 3 == 0 if i % 9 == 0 if i % 12 == 0]\nmylist4","fa6b1272":"# Odd even test\nl1 = [print(\"{} is Even Number\".format(i)) if i%2==0 else print(\"{} is odd number\".format(i)) for i in range(10)]","2c522f3a":"# Extract numbers from a string\nmystr = \"One 1 two 2 three 3 four 4 five 5 six 6789\"\nnumbers = [i for i in mystr if i.isdigit()]\nnumbers","0e1baa33":"# Extract letters from a string\n\nmystr = \"One 1 two 2 three 3 four 4 five 5 six 6789\"\nnumbers = [i for i in mystr if i.isalpha()]\nnumbers","9710b050":"# If else in List Comprehension\nlist1 = ['XS' , 'S', 'M' , 'L' , 'XL']\n\n['Extra Small' if i =='XS' else ('Small' if i =='S' else ('Medium' if i =='M' \n                                                          else ('Large' if i=='L' else 'Extra Large')))  for i in list1]","c7302d63":"tup1 = ()      # Empty tuple","1bda910e":"tup2 = (10,30,60)      # tuple of integers numbers","256fb7cc":"tup3 = (10.77,30.66,60.89)       # tuple of float numbers","ffc0d7ff":"tup4 = ('one','two' , \"three\")   # tuple of strings","df8383fc":"tup5 = ('Asif', 25 ,(50, 100),(150, 90))   # Nested tuples","28b5dc30":"tup6 = (100, 'Asif', 17.765)   # Tuple of mixed data types","9d216c4e":"tup7 = ('Asif', 25 ,[50, 100],[150, 90] , {'John' , 'David'} , (99,22,33))","7db7aa91":"len(tup7) #Length of list","a2750ac8":"tup2[0] # Retreive first element of the tuple","3b9a2f65":"tup4[0] # Retreive first element of the tuple","f2c9c795":"tup4[0][0] # Nested indexing - Access the first character of the first tuple element ","e2b865d0":"tup4[-1] # Last item of the tuple","7be4749c":"tup5[-1]  # Last item of the tuple","aed8c5e5":"mytuple = ('one' , 'two' , 'three' , 'four' , 'five' , 'six' , 'seven' , 'eight')","96c37e00":"mytuple[0:3] # Return all items from 0th to 3rd index location excluding the item at loc 3.","aaddc308":"mytuple[2:5] # List all items from 2nd to 5th index location excluding the item at loc 5.","44a479dd":"mytuple[:3] # Return first three items","b344018e":"mytuple[:2]  # Return first two items","f3e99759":"mytuple[-3:] # Return last three items","fd2c88e8":"mytuple[-2:] # Return last two items","265d41a9":"mytuple[-1] # Return last item of the tuple","da95e46b":"mytuple[:] # Return whole tuple","d7d47e8f":"mytuple","05a35d43":"del mytuple[0] # Tuples are immutable which means we can't DELETE tuple items","50f51e75":"mytuple[0] = 1 # Tuples are immutable which means we can't CHANGE tuple items","e8a10d85":"del mytuple # Deleting entire tuple object is possible","dee45cba":"mytuple","237bcafb":"for i in mytuple:\n    print(i)","e537d713":"for i in enumerate(mytuple):\n    print(i)","b7af90bd":"mytuple1 =('one', 'two', 'three', 'four', 'one', 'one', 'two', 'three')","d8c54809":"mytuple1.count('one') # Number of times item \"one\" occurred in the tuple.","84ef6f4b":"mytuple1.count('two') # Occurence of item 'two' in the tuple","8cbd567e":"mytuple1.count('four') #Occurence of item 'four' in the tuple","356e1d63":"mytuple","e976b5f7":"'one' in mytuple # Check if 'one' exist in the list","d195aad1":"'ten' in mytuple # Check if 'ten' exist in the list","d43575e9":"if 'three' in mytuple: # Check if 'three' exist in the list\n    print('Three is present in the tuple')\nelse:\n    print('Three is not present in the tuple')","41d0963c":"if 'eleven' in mytuple:  # Check if 'eleven' exist in the list\n    print('eleven is present in the tuple')\nelse:\n    print('eleven is not present in the tuple')","4a8b808d":"mytuple","b6f49275":"mytuple.index('one') # Index of first element equal to 'one'","11de8802":"mytuple.index('five') # Index of first element equal to 'five'","04195f4b":"mytuple1","7f8ced93":"mytuple1.index('one') # Index of first element equal to 'one'","84ff333a":"mytuple2 = (43,67,99,12,6,90,67)","24ba34f4":"sorted(mytuple2)  # Returns a new sorted list and doesn't change original tuple","94fa761b":"sorted(mytuple2, reverse=True) # Sort in descending order","bc75f379":"myset = {1,2,3,4,5} # Set of numbers\nmyset","fc704796":"len(myset) #Length of the set","a57dfdf2":"my_set = {1,1,2,2,3,4,5,5}\nmy_set                    # Duplicate elements are not allowed.","b1553441":"myset1 = {1.79,2.08,3.99,4.56,5.45} # Set of float numbers\nmyset1","4bd8b9f9":"myset2 = {'Asif' , 'John' , 'Tyrion'} # Set of Strings\nmyset2","4714b32d":"myset3 = {10,20, \"Hola\", (11, 22, 32)} # Mixed datatypes\nmyset3","1a682164":"myset3 = {10,20, \"Hola\", [11, 22, 32]} # set doesn't allow mutable items like lists\nmyset3","ef7fcbda":"myset4 = set() # Create an empty set\nprint(type(myset4))","6909febc":"my_set1 = set(('one' , 'two' , 'three' , 'four'))\nmy_set1","3b8f9c86":"myset = {'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'}\n\nfor i in myset:\n    print(i)","61842175":"for i in enumerate(myset):\n    print(i)","f20a58ec":"myset","420690ca":"'one' in myset # Check if 'one' exist in the set","14e28fc7":"'ten' in myset # Check if 'ten' exist in the set","58f9f12d":"if 'three' in myset: # Check if 'three' exist in the set\n    print('Three is present in the set')\nelse:\n    print('Three is not present in the set')","1360a2a7":"if 'eleven' in myset:  # Check if 'eleven' exist in the list\n    print('eleven is present in the set')\nelse:\n    print('eleven is not present in the set')","00f43b44":"myset","b65ebc7f":"myset.add('NINE') # Add item to a set using add() method\nmyset","75df7ebe":"myset.update(['TEN' , 'ELEVEN' , 'TWELVE'])  # Add multiple item to a set using update() method\nmyset","c9b86f2b":"myset.remove('NINE') # remove item in a set using remove() method\nmyset","f46a78cb":"myset.discard('TEN') # remove item from a set using discard() method\nmyset","68412bad":"myset.clear() # Delete all items in a set\nmyset","d29a4476":"del myset # Delete the set object\nmyset","2671e4ad":"myset = {'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'}\nmyset","98a27b6b":"myset1 = myset  # Create a new reference \"myset1\" \nmyset1","583307d7":"id(myset) , id(myset1)  # The address of both myset & myset1 will be the same as both are pointing to same set.","d2cafdc1":"my_set = myset.copy() # Create a copy of the list\nmy_set","ebd8f467":"id(my_set) # The address of my_set will be different from myset because my_set is pointing to the copy of the existing set.","a4183f90":"myset.add('nine')\nmyset","b4874cec":"myset1 # myset1 will be also impacted as it is pointing to the same Set","0e7ae13d":"my_set # Copy of the set won't be impacted due to changes made on the original Set.","89694e5e":"A = {1,2,3,4,5}\nB = {4,5,6,7,8}\nC = {8,9,10}","49924cc5":"A | B  # Union of A and B (All elements from both sets. NO DUPLICATES)","2c58b76d":"A.union(B) # Union of A and B","b9d11529":"A.union(B, C)  # Union of A, B and C.","73bb006e":"\"\"\"\nUpdates the set calling the update() method with union of A , B & C. \n\nFor below example Set A will be updated with union of A,B & C.\n\"\"\"\nA.update(B,C)\nA","b235b9db":"A = {1,2,3,4,5}\nB = {4,5,6,7,8}","48788d51":"A & B  # Intersection of A and B (Common items in both sets)","b3110784":"A.intersection(B)  Intersection of A and B","4133099c":"\"\"\"\nUpdates the set calling the intersection_update() method with the intersection of sets.\n\nFor below example Set A will be updated  with the intersection of A & B.\n\"\"\"\nA.intersection_update(B)\nA","1efc62af":"A = {1,2,3,4,5}\nB = {4,5,6,7,8}","4c997184":"A - B  # set of elements that are only in A but not in B","dbdbe7a7":"A.difference(B) # Difference of sets","fa5e1ee8":"B- A  # set of elements that are only in B but not in A","73669721":"B.difference(A)","cba61ad9":"\"\"\"\nUpdates the set calling the difference_update() method with the difference of sets.\n\nFor below example Set B will be updated  with the difference of B & A.\n\"\"\"\nB.difference_update(A)\nB","5be218e7":"A = {1,2,3,4,5}\nB = {4,5,6,7,8}","34d4895a":"A ^ B # Symmetric difference (Set of elements in A and B but not in both. \"EXCLUDING THE INTERSECTION\").","9f42b061":"A.symmetric_difference(B)  # Symmetric difference of sets","b7bc14f6":"\"\"\"\nUpdates the set calling the symmetric_difference_update() method with the symmetric difference of sets.\n\nFor below example Set A will be updated  with the symmetric difference of A & B.\n\"\"\"\n\nA.symmetric_difference_update(B)\nA","2c6b4939":"A = {1,2,3,4,5,6,7,8,9}\nB = {3,4,5,6,7,8}\nC = {10,20,30,40}","bedd7819":"B.issubset(A) # Set B is said to be the subset of set A if all elements of B are in A.","692cf421":"A.issuperset(B) # Set A is said to be the superset of set B if all elements of B are in A.","02f2e8c6":"C.isdisjoint(A) # Two sets are said to be disjoint sets if they have no common elements.","bc4b296f":"B.isdisjoint(A) # Two sets are said to be disjoint sets if they have no common elements.","8fa906ae":"A","540cc98d":"sum(A)","761cc77e":"max(A)","dbc3552e":"min(A)","477c6e68":"len(A)","186c3aae":"list(enumerate(A))","0da63a50":"D= sorted(A,reverse=True)\nD","8a2493c0":"sorted(D)","be092928":"mydict = dict() # empty dictionary\nmydict","9c560b6c":"mydict = {}   # empty dictionary\nmydict","cd33b9be":"mydict = {1:'one' , 2:'two' , 3:'three'} # dictionary with integer keys\nmydict","3397ef62":"mydict = dict({1:'one' , 2:'two' , 3:'three'}) # Create dictionary using dict()\nmydict","7ea908c7":"mydict = {'A':'one' , 'B':'two' , 'C':'three'} # dictionary with character keys\nmydict","84fb015d":"mydict = {1:'one' , 'A':'two' , 3:'three'} # dictionary with mixed keys\nmydict","1866aef2":"mydict.keys() # Return Dictionary Keys using keys() method","7c232705":"mydict.values() # Return Dictionary Values using values() method","9b4f671e":"mydict.items() # Access each key-value pair within a dictionary ","0b971108":"mydict = {1:'one' , 2:'two' , 'A':['asif' , 'john' , 'Maria']} # dictionary with mixed keys\nmydict","d90221ea":"mydict = {1:'one' , 2:'two' , 'A':['asif' , 'john' , 'Maria'],  'B':('Bat' , 'cat' , 'hat')} # dictionary with mixed keys\nmydict","f6157ff6":"mydict = {1:'one' , 2:'two' , 'A':{'Name':'asif' , 'Age' :20},  'B':('Bat' , 'cat' , 'hat')} # dictionary with mixed keys\nmydict","d3214b9f":"keys = {'a' , 'b' , 'c' , 'd'}\nmydict3 = dict.fromkeys(keys)   # Create a dictionary from a sequence of keys\nmydict3","f57abee0":"keys = {'a' , 'b' , 'c' , 'd'}\nvalue = 10\nmydict3 = dict.fromkeys(keys , value)  # Create a dictionary from a sequence of keys with value\nmydict3","6cdc946c":"keys = {'a' , 'b' , 'c' , 'd'}\nvalue = [10,20,30]\nmydict3 = dict.fromkeys(keys , value)  # Create a dictionary from a sequence of keys with value list\nmydict3","6e129033":"value.append(40)\nmydict3","cc682388":"mydict = {1:'one' , 2:'two' , 3:'three' , 4:'four'}\nmydict","c1997696":"mydict[1] # Access item using key","ac11c6f4":"mydict.get(1) # Access item using get() method","c2e53c9c":"mydict1 = {'Name':'Asif' , 'ID': 74123 , 'DOB': 1991 , 'job' :'Analyst'}\nmydict1","2080349e":"mydict1['Name']  # Access item using key","de948eec":"mydict1.get('job')  # Access item using get() method","0d650081":"mydict1 = {'Name':'Asif' , 'ID': 12345 , 'DOB': 1991 , 'Address' : 'Hilsinki'}\nmydict1","1c544141":"mydict1['DOB'] = 1992  # Changing Dictionary Items\nmydict1['Address'] = 'Delhi'\nmydict1","f30f2b45":"dict1 = {'DOB':1995}\nmydict1.update(dict1)\nmydict1","097a72a6":"mydict1['Job'] = 'Analyst' # Adding items in the dictionary\nmydict1","1223d8d9":"mydict1.pop('Job') # Removing items in the dictionary using Pop method\nmydict1","6c451880":"mydict1.popitem() # A random item is removed","0565b4fb":"mydict1","2fb59d48":"del[mydict1['ID']] # Removing item using del method\nmydict1","ef810767":"mydict1.clear() # Delete all items of the dictionary using clear method\nmydict1","da766e25":"del mydict1 # Delete the dictionary object\nmydict1","bd05dd9b":"mydict = {'Name':'Asif' , 'ID': 12345 , 'DOB': 1991 , 'Address' : 'Hilsinki'}\nmydict","b5df6d8d":"mydict1 = mydict # Create a new reference \"mydict1\" ","b5b08892":"id(mydict) , id(mydict1) # The address of both mydict & mydict1 will be the same as both are pointing to same dictionary.","f131b26c":"mydict2 = mydict.copy() # Create a copy of the dictionary","5965f9de":"id(mydict2) # The address of mydict2 will be different from mydict because mydict2 is pointing to the copy of the existing dict.","edba350a":"mydict['Address'] = 'Mumbai'","ebcc7d1d":"mydict","40eb230a":"mydict1 # mydict1 will be also impacted as it is pointing to the same dictionary","a90288b9":"mydict2 # Copy of list won't be impacted due to the changes made in the original dictionary","7f5d8d9c":"mydict1 = {'Name':'Asif' , 'ID': 12345 , 'DOB': 1991 , 'Address' : 'Hilsinki' , 'Job': 'Analyst'}\nmydict1","1d201262":"for i in mydict1:\n    print(i , ':' , mydict1[i]) # Key & value pair","db361efb":"for i in mydict1:\n    print(mydict1[i]) # Dictionary items","897bb050":"mydict1 = {'Name':'Asif' , 'ID': 12345 , 'DOB': 1991 , 'Job': 'Analyst'}\nmydict1","1bd422bc":"'Name' in mydict1 # Test if a key is in a dictionary or not.","350a8d8b":"'Asif' in mydict1  # Membership test can be only done for keys.","edd674b7":"'ID' in mydict1","cce72ae3":"'Address' in mydict1","c9a2ed59":"mydict1 = {'Name':'Asif' , 'ID': 12345 , 'DOB': 1991 , 'Job': 'Analyst'}\nmydict1","ee8d3ecb":"all(mydict1) # Will Return false as one value is false (Value 0)","1e08d0df":"any(mydict1)  # Will Return True as we have items in the dictionary with True value","932fa45f":"mydict1[0] = 'test1'\nmydict1","9d5a24b5":"all(mydict1) # Returns false as one value is false","569e7e5a":"any(mydict1)  # Will Return True as we have items in the dictionary with True value","f7008e27":"double = {i:i*2 for i in range(10)} #double each value using dict comprehension\ndouble","173030fa":"square = {i:i**2 for i in range(10)}\nsquare","fb6484ce":"key = ['one' , 'two' , 'three' , 'four' , 'five']\nvalue = [1,2,3,4,5]\n\nmydict = {k:v for (k,v) in zip(key,value)} # using dict comprehension to create dictionary\nmydict","7341f659":"mydict1 = {'a':10 , 'b':20 , 'c':30 , 'd':40 , 'e':50}\nmydict1 = {k:v\/10 for (k,v) in mydict1.items()} # Divide all values in a dictionary by 10\nmydict1","3acfd06c":"str1 = \"Natural Language Processing\"\n\nmydict2 = {k:v for (k,v) in enumerate(str1)} # Store enumerated values in a dictionary\nmydict2","5b201381":"str1 = \"abcdefghijklmnopqrstuvwxyz\"\nmydict3 = {i:i.upper() for i in str1} # Lower to Upper Case\nmydict3","244a4d2b":"mystr4 = \"one two three four one two two three five five six seven six seven one one one ten eight ten nine eleven ten ten nine\"","3604d4c0":"mylist = mystr4.split() # Split String into substrings\nmylist","5868cd3d":"mylist1 = set(mylist) # Unique values in a list\nmylist1 = list (mylist1)\nmylist1","ce1f0bde":"# Calculate frequenct of each word\ncount1 = [0] * len(mylist1)\nmydict5 = dict()\nfor i in range(len(mylist1)):\n    for j in range(len(mylist)):\n        if mylist1[i] == mylist[j]:\n            count1[i] += 1\n    mydict5[mylist1[i]] = count1[i]\nprint(mydict5)","47f8d0d6":"a = 5\nb = 2\n\nx = 'Asif'\ny = 'Bhat'\n\n# Addition\nc = a + b\nprint('Addition of {} and {} will give :- {}\\n'.format(a,b,c))\n\n#Concatenate string using plus operator\nz = x+y\nprint ('Concatenate string \\'x\\' and \\'y\\' using \\'+\\' operaotr :- {}\\n'.format(z))\n  \n# Subtraction\nc = a - b\nprint('Subtracting {} from {} will give :- {}\\n'.format(b,a,c))\n  \n# Multiplication\nc = a * b  \nprint('Multiplying {} and {} will give :- {}\\n'.format(a,b,c))\n  \n# Division\nc = a \/ b\nprint('Dividing {} by {} will give :- {}\\n'.format(a,b,c))\n  \n# Modulo of both number  \nc = a % b\nprint('Modulo of {} , {} will give :- {}\\n'.format(a,b,c))\n  \n# Power \nc = a ** b \nprint('{} raised to the power {} will give :- {}\\n'.format(a,b,c))\n\n# Division(floor)\nc = a \/\/ b\nprint('Floor division of {} by {} will give :- {}\\n'.format(a,b,c))","f50c7a4e":"x = 20\ny = 30\n\nprint('Is x greater than y :- ',x>y)\n\nprint('\\nIs x less than  y :- ',x<y)\n\nprint('\\nIs x equal to  y :- ',x==y)\n\nprint('\\nIs x not equal to y :- ',x!=y)\n\nprint('\\nIs x greater than or equal to y :- ',x>=y)\n\nprint('\\nIs x less than or equal to y :- ',x<=y)","827c12dd":"a = 'Asif'\nb = 'Bhat'\nc = 'Asif'\n\na == b , a ==c , a != b # Comparison operators on string","4ba060d2":"x = True\ny = False\n\nprint('Logical AND operation :- ',x and y) # True if both values are true\nprint('Logical OR operation :- ',x or y) # True if either of the values is true\nprint('NOT operation :- ',not x ) # True if operand is false","225a5eea":"x = 18  # binary form 10010\ny = 6  # binary form 00110\n\nprint('Bitwise AND operation - {}'.format(x&y))\nprint('Bitwise OR operation - {}'.format(x|y))\nprint('Bitwise XOR operation - {}'.format(x^y))\nprint('Bitwise NOT operation - {}'.format(~x))\nprint('Bitwise right shift operation - {}'.format(x>>2))\nprint('Bitwise left shift operation - {}'.format(x<<2))","355a5de0":"x = 10\n\nprint('Initialize x with value 10 (x=10)) :- ',x)\n\n\nx+=20 # x = x+20\nprint ('Add 20 to x :- ',x)\n\n\nx-=20 # x = x-20\nprint ('subtract 20 from x :- ',x)\n\n\nx\/=10 # x = x\/10\nprint ('Divide x by 10 :- ',x)\n\n\n\nx*=10 # x = x\/10\nprint ('Multiply x by 10 :- ',x)\n\nx = int(x)\n\n\nx**=2 # x = x\/10\nprint ('x raised to the power 2 :- ',x)\n\n\n\nx%=2\nprint ('Modulo Division :- ',x)\n\n\nx = 20\n\n\nx\/\/=3\nprint ('Floor Division :- ',x)\n\n\nx&=2\nprint('Bitwise AND :- ',x)\n\n\nx|=2\nprint('Bitwise OR :- ',x)\n\n\nx^=2\nprint('Bitwise XOR :- ',x)\n\n\nx = 10\n\n\nx<<=2\nprint('Bitwise left shift operation',x)\n\n\nx>>=2\nprint('Bitwise right shift operation',x)","e3e1ef33":"mystr = 'Asif Ali Bhat'\n\n'Asif' in mystr , 'John' in mystr","b7eb1587":"mystr = 'Asif Ali Bhat'\n\n'Asif' not in mystr , 'John' not in mystr","c434c7a2":"def myfunc():\n  print(\"Hello Python Lovers\")\n\nmyfunc()","c2a2d397":"def details(name,userid,country): # Function to print User details\n    print('Name :- ', name)\n    print('User ID is :- ', userid)\n    print('Country :- ',country)\n    \ndetails('Asif' , 'asif123' , 'India')","eedf961d":"def square (n): #function to find square of a number\n    n= n*n\n    return n\n\nsquare (10)","e917500d":"def even_odd (num): #Even odd test\n    \"\"\" This function will check whether a number is even or odd\"\"\"\n    if num % 2 ==0:\n        print (num, ' is even number')\n    else:\n        print (num, ' is odd number')\n\neven_odd(3)\neven_odd(4)\nprint(even_odd.__doc__) # Print function documentation string","4226f0b0":"def fullname (firstname , middlename ,lastname): #Concatenate Strings\n    fullname = \"{} {} {}\".format(firstname,middlename,lastname)\n    print (fullname)\n\nfullname('Asif' , 'Ali' , 'Bhat')","5b82ce56":"def fullname (firstname , middlename ,lastname): #Concatenate Strings\n    fullname = \"{} {} {}\".format(firstname,middlename,lastname)\n    print (fullname)\n\nfullname(lastname = 'Bhat' , middlename='Ali' , firstname='Asif') # Keyword Arguments. Order of the arguments does not matter.","a7ad492c":"fullname ('Asif') # This will throw error as function is expecting 3 arguments.","73ce4e01":"def myfunc(city = 'Mumbai'):\n    print('Most Populous City :- ', city)\n    \nmyfunc() # When a function is called without an argument it will use default value","254b7fc1":"var1 = 100 # Variable with Global scope.\n\ndef myfunc():\n    print(var1) # Value 100 will be displayed due to global scope of var1\n\n    \nmyfunc()\nprint(var1)","c8fbef09":"def myfunc1():\n    var2 = 10  # Variable with Local scope\n    print(var2)\n\n\ndef myfunc2():\n    print(var2) # This will throw error because var2 has a local scope. Var2 is only accessible in myfunc1()\n\nmyfunc1()\nmyfunc2()","5c8d6074":"var1 = 100 # Variable with Global scope.\n\ndef myfunc():\n    var1 = 99  # Local scope\n    print(var1)\n\n    \nmyfunc()  \nprint(var1) # The original value of var1 (100) will be retained due to global scope.","662290e1":"list1 = [11,22,33,44,55]\n\ndef myfunc(list1):\n    del list1[0]\n\nprint('\"List1\" before calling the function:- ',list1)\nmyfunc(list1)  # Pass by reference (Any change in the parameter within the function is reflected back in the calling function.)\nprint('\"List1\" after calling the function:- ',list1)","9c889854":"list1 = [11,22,33,44,55]\n\ndef myfunc(list1):\n    list1.append(100)\n\nprint('\"List1\" before calling the function:- ',list1)\nmyfunc(list1)  # Pass by reference (Any change in the parameter within the function is reflected back in the calling function.)\nprint('\"List1\" after calling the function:- ',list1)","40bb156e":"list1 = [11,22,33,44,55]\n\ndef myfunc(list1):\n    list1 = [10,100,1000,10000] # link of 'list1' with previous object is broken now as new object is assigned to 'list1'.\n\nprint('\"List1\" before calling the function:- ',list1)\nmyfunc(list1)  # Pass by reference (Any change in the parameter within the function is reflected back in the calling function.)\nprint('\"List1\" after calling the function:- ',list1)","74c1f1ae":"def swap(a,b):\n    temp = a\n    a = b      # link of 'a' with previous object is broken now as new object is assigned to 'a'. \n    b = temp   # link of 'b' with previous object is broken now as new object is assigned to 'b'. \n\na = 10\nb = 20\nswap(a,b)\na,b","c0e2fc90":"def factorial(num):  # Calculate factorial of a number using recursive function call.\n    if num <=1 :\n        return 1\n    else:\n        return num * factorial(num-1)\n    \nfactorial(4)","35480e23":"def add(num):  # Sum of first n natural numbers\n    if num == 0:\n        return 0\n    else:\n        return num + add(num-1)\n\nadd(5) # Sum of first five natural numbers (1,2,3,4,5)","bfe34364":"def fiboacci(num):\n    if num <= 1:\n        return num\n    if num == 2:\n        return 1\n    else:  \n        return(fiboacci(num-1) + fiboacci(num-2))  \n\nnums = int(input(\"How many fibonacci numbers you want to generate -\"))\n\n\n\nfor i in range(nums):\n    print(fiboacci(i))  # Generate Fibonacci series","23659de2":"def add(a,b,c):\n    return a+b+c\n    \nprint(add(10,20,30)) # Sum of two numbers","6fad64d5":"print(add(1,2,3,4)) '''This will throw below error as this function will only take two argumengts. \nIf we want to make argument list dynamic then *args wil come in picture'''","83efa0b9":"def some_args(arg_1, arg_2, arg_3):\n    print(\"arg_1:\", arg_1)\n    print(\"arg_2:\", arg_2)\n    print(\"arg_3:\", arg_3)\n\nmy_list = [2, 3]\nsome_args(1, *my_list)","8026a7b2":"def add1(*args):\n    return sum(args)\n\nprint(add(1,2,3))\nprint(add(1,2,3,4))  # *args will take dynamic argument list. So add() function will perform addition of any number of arguments\nprint(add(1,2,3,4,5))\nprint(add(1,2,3,4,5,6))\nprint(add(1,2,3,4,5,6,7))","b1fc03f3":"list1 = [1,2,3,4,5,6,7]\ntuple1 = (1,2,3,4,5,6,7)\n\nadd1(*list1) , add1(*tuple1) #tuple & list items will be passed as argument list and sum will be returned for both cases.","0ed63681":"list1 = [1,2,3,4,5,6,7]\nlist2 = [1,2,3,4,5,6,7]\nlist3 = [1,2,3,4,5,6,7]\nlist4 = [1,2,3,4,5,6,7]\n\nadd1(*list1 , *list2 , *list3 , *list4 ) #All four lists are unpacked and each individual item is passed to add1() function","236debbc":"def UserDetails(*args):\n    print(args)\n\nUserDetails('Asif' , 7412 , 41102 , 33 ,  'India' , 'Hindi')\n\n''' For the above example we have no idea about the parameters passed e.g 7412 , 41102 , 33 etc.\n    In such cases we can take help of Keyworded arguments (**kwargs) '''","a5612f93":"def UserDetails(**kwargs):\n    print(kwargs)\n\nUserDetails(Name='Asif' , ID=7412 , Pincode=41102 , Age= 33 ,  Country= 'India' , Language= 'Hindi')","7b2bfd2f":"def UserDetails(**kwargs):\n    for key,val in kwargs.items():\n        print(\"{} :- {}\".format(key,val))\n\nUserDetails(Name='Asif' , ID=7412 , Pincode=41102 , Age= 33 ,  Country= 'India' , Language= 'Hindi')","8661016f":"mydict = {'Name': 'Asif', 'ID': 7412, 'Pincode': 41102, 'Age': 33, 'Country': 'India', 'Language': 'Hindi'}\n\nUserDetails(**mydict)","d863c462":"def UserDetails(licenseNo,  *args , phoneNo=0 , **kwargs): # Using all four arguments types\n    print('License No :- ', licenseNo)\n    j=''\n    for i in args:\n        j = j+i\n    print('Full Name :-',j)\n    print('Phone Number:- ',phoneNo)\n    for key,val in kwargs.items():\n        print(\"{} :- {}\".format(key,val))\n        \n        \nname = ['Asif' , ' ' , 'Ali' , ' ','Bhat']\nmydict = {'Name': 'Asif', 'ID': 7412, 'Pincode': 41102, 'Age': 33, 'Country': 'India', 'Language': 'Hindi'}\n\nUserDetails('BHT145' , *name , phoneNo=1234567890,**mydict )","ecf24cef":"def UserDetails(licenseNo, *args , phoneNo=0, **kwargs): # Using all four arguments types. CORRECT ORDER\n    print('Nothing')","ebddabd3":"def UserDetails(licenseNo, **kwargs , *args): # This will fail. *args MUST come before **kwargs in the argument list\n    print('Nothing')","301b5c3b":"#The below function will fail. Default argument\/positional argument (licenseNo) MUST come before Keyword argument(ID)\ndef UserDetails(ID = 1, licenseNo, *args):\n    print('Nothing')","7fb3574c":"addition = lambda a : a + 10  # This lambda function adds value 10 to an argument.\nprint(addition(5))","09405a67":"product = lambda a, b : a * b #This lambda function takes two arguments (a,b) and returns their product (a*b).\nprint(product(5, 6))","e32c3ef7":"addition = lambda a, b, c : a + b + c  #This lambda function takes three arguments (a,b,c) and returns their sum (a+b+c).\nprint(addition(5, 6, 2))","378af6fb":"res = (lambda *args: sum(args))  # This lambda function can take any number of arguments and return thier sum.\nres(10,20) , res(10,20,30,40) ,  res(10,20,30,40,50,60,70)","fd6c01fd":"res1 = (lambda **kwargs: sum(kwargs.values())) # This lambda function can take any number of arguments and return thier sum.\nres1(a = 10 , b= 20 , c = 30) , res1(a = 10 , b= 20 , c = 30, d = 40 , e = 50)","2679da6e":"res1 = (lambda **kwargs: sum(kwargs.values())) # This lambda function can take any number of arguments and return thier sum.\nres1(a = 10 , b= 20 , c = 30) , res1(a = 10 , b= 20 , c = 30, d = 40 , e = 50)","ea58e2a0":"# User defined function to find product of numbers\ndef product(nums):  \n    total = 1\n    for i in nums:\n        total *= i  \n    return total\n\n# This lambda function can take any number of arguments and return thier product.\nres1 = (lambda **kwargs: product(kwargs.values())) \nres1(a = 10 , b= 20 , c = 30) , res1(a = 10 , b= 20 , c = 30, d = 40 , e = 50)","511e4e4c":"def myfunc(n):\n  return lambda a : a + n\n\nadd10 = myfunc(10)\nadd20 = myfunc(20)\nadd30 = myfunc(30)\n\nprint(add10(5))\nprint(add20(5))\nprint(add30(5))","6cbb10b7":"list1 = [1,2,3,4,5,6,7,8,9]\n\ndef odd(n):\n    if n%2 ==1: return True\n    else: return False\n    \nodd_num = list(filter(odd,list1)) # This Filter function filters list1 and passes all odd numbers to filter().\nodd_num","8805454b":"list1 = [1,2,3,4,5,6,7,8,9]\n# The below Filter function filters \"list1\" and passes all odd numbers using lambda function to filter().\nodd_num = list(filter(lambda n: n%2 ==1 ,list1)) \nodd_num","b76cc394":"def twice(n):\n    return n*2\n  \ndoubles = list(map(twice,odd_num)) # The map function will apply user defined \"twice()\" function on all items of the list\ndoubles","8078f10d":"doubles = list(map(lambda n:n*2,odd_num)) # This map function will double all items of the list using lambda function.\ndoubles","ee7544c8":"from functools import reduce\n\ndef add(a,b):\n    return a+b\n  \nsum_all = reduce(add,doubles) # This reduce function will perform sum of all items in the list using user defined \"add()\" func.\nsum_all","925e38f1":"#The below reduce() function will perform sum of all items in the list using lambda function.\nsum_all = reduce(lambda a,b : a+b,doubles)\nsum_all","230fb18d":"# Putting all together \n\nsum_all = reduce(lambda a,b : a+b,list(map(lambda n:n*2,list(filter(lambda n: n%2 ==1 ,list1)))))\nsum_all","7adafb6c":"# More examples on Map , Filter , Reduce  ","8944d999":"list1 = [1,2,3,4,5,6,7,8,9,10]\neven = list(filter(lambda n: n%2 ==0 ,list1)) # Filter even numbers from the list\nodd =  list(filter(lambda n: n%2 !=0 ,list1))   # Filter odd numbers from the list\n\nprint('--------')\nprint(even)\nprint(odd)\nprint('--------')\n\nlist2 = ['one' , 'TWO' , 'three' , 'FOUR']\n\nupper = list(filter(lambda x: x.isupper() , list2)) # filter uppercase strings from the list\n\nlower = list(filter(lambda x: x.islower() , list2)) # filter lowercase strings from the list\n\n\nprint(upper)\nprint(lower)\nprint('--------')\n\nlist3 = ['one' , 'two2' , 'three3' ,'88' , '99' , '102']\n\nnumeric = list(filter(lambda x:x.isnumeric(), list3))  # filter numbers from the list\n\nalpha = list(filter(lambda x:x.isalpha(), list3))      # filter character strings from the list\n\nalphanum = list(filter(lambda x:x.isalnum(), list3)) # filtr numbers & character strings from the list\n\n\nprint(alpha)\nprint(numeric)\nprint(alphanum)\nprint('--------')\n\n\n#Vowel Test\n","63f32ec1":"# Filter example with & operation\nlist1 = ['soap','sharp','Shy','silent','ship','summer','sheep']\nlist(filter(lambda x : x.startswith('s') & x.endswith('p'),list1))","90c95eca":"list1 = [1,2,3,4]\nlist2 = [5,6,7,8]\n\ndef double(x):\n    return x+x\n\ndef add(x,y):\n    return x+y\n\ndef square(x):\n    return x*x\n\nprint('---------------')\n\nprint(list(map(double, list1))) # Double each number using map & User defined function\nprint(list(map(add, list1, list2))) # add two items  using map & User defined function\nprint(list(map(square, list1))) #Square numbers using map & User defined function\n\nprint('---------------')\n\nprint(list(map(lambda x: x + x, list1))) # Double each number using map & lambda\nprint(list(map(lambda x, y: x + y, list1, list2))) # add two items  using map & lambda\nprint(list(map(lambda x: x*x, list1))) #Square numbers using map & lambda\n\nprint('---------------')","ea5970f1":"countries = [\"india\" , \"pakistan\" , \"australia\" , \"dubai\"]\nlist(map(lambda x : x.capitalize(),countries))","98973149":"list2 = [1,2,3,4]\n\nproduct = reduce (operator.mul,list2) # Product of all numbers in a list\n\nadd = reduce(operator.add,list2) # Add all numbers in the list\n\nconcat_str = reduce(operator.add , ['Python' , ' ' , 'Rocks']) # Concatenate string using reduce \n\nprod = reduce(operator.mul,['Hello ' , 3]) #Repeat a string multiple times\n\nmin_num = reduce(lambda a, b: a if a < b else b, list2) # Minimum number in the list using reduce () & lambda\n\nmax_num = reduce(lambda a, b: a if a > b else b, list2) # Maximum number in the list using reduce () & lambda\n\nprint(product)\n\nprint(add)\n\nprint(concat_str)\n\nprint(prod)\n\nprint(min_num)\n\nprint(max_num)","e1869ac2":"def min_func(a, b):\n        return a if a < b else b\n \n\ndef max_func(a, b):\n    return a if a > b else b\n\nmin_num = reduce(min_func, list2) # Minimum number in the list using reduce () & User defined min function\n\nmax_num = reduce(max_func, list2) # Maximum number in the list using reduce () & User defined min function\n\nmin_num , max_num","d0d74190":"print('------')\nprint(reduce(lambda a, b: bool(a and b), [0, 0, 1, 0, 0])) # Returns True if all values in the list are True \nprint(reduce(lambda a, b: bool(a and b), [2, 3, 1, 5, 6])) # Returns True if all items in the list are True\nprint(reduce(lambda a, b: bool(a and b), [8, 9, 1, 0, 9])) # Returns True if all values in the list are True\n\nprint('------')\n\nprint(reduce(lambda a, b: bool(a or b), [0, 0, 0, 0, 0]))  # Returns True if any item in the list is True\nprint(reduce(lambda a, b: bool(a or b), [2, 3, 1, 5, 6]))  # Returns True if any item in the list is True\nprint(reduce(lambda a, b: bool(a or b), [8, 9, 1, 0, 9]))  # Returns True if any item in the list is True\n\nprint('------')","aba68251":"__Map__\n\n- The map() function applies a given function to each item of an iterable (list, tuple etc.) and returns a list of the results.\n\n\n\n\nmap() function takes two Parameters :\n\n-   __function__ :  The function to execute for each item of given iterable.\n\n\n-   __iterable__ : It is a iterable which is to be mapped.\n\n\n__Returns__ : Returns a list of the results after applying the given function to each item of a given iterable (list, tuple etc.)\n\n__Syntax:__","417bbc39":"The __all()__ method returns:\n\n- __True__ - If all elements in a list are true\n- __False__ - If any element in a list is false\n\n\nThe __any()__ function returns True if any element in the list is True. If not, any() returns False.","7c77d595":"### Tuple Creation","6a756e5a":"1. Tuple is similar to List except that the objects in tuple are immutable which means we cannot change the elements of a tuple once assigned. \n\n2. When we do not want to change the data over time, tuple is a preferred data type.\n\n3. Iterating over the elements of a tuple is faster compared to iterating over a list.","82fe01ed":"### Tuple Slicing","1edfa1ae":"### List Creation","26ff396f":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/3\/30\/Venn0111.svg\">","dcf2b10e":"![image.png](attachment:79224158-f6ac-421a-b50d-6bb736790cf3.png)","eafb222b":"Instructions that a Python interpreter can execute. ","ea0ec270":"### String concatenation","0cea6d5b":"### String Creation","b2d263cc":"### List Comprehensions","788eb4ec":"![image.png](attachment:b0eef4f2-38c6-4a20-b4d1-370cbb372e4a.png)","58b46ad2":"# Sets","be0a7d44":"### Dictionary Comprehension","2c574a00":"# List","504ef98a":"#### Symmetric Difference","0f0181cf":"1) Docstrings provide a convenient way of associating documentation with functions, classes, methods or modules. \n\n2) They appear right after the definition of a function, method, class, or module.","2d5f6e12":"### Loop through a Dictionary","3c5adc3e":"### Sorting","99ca911b":"### Count","435bb117":"# End","08f5b7e8":"![image.png](attachment:ffc1f41c-53e6-474a-abf6-c9a676bd989a.png)","3dc5f465":"### Assignment Operators","9e9d87e5":"## Variables","1edcfa13":"# Operators","d49313b2":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/99\/Venn0001.svg\">","7e198bb6":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/5a\/Venn0010.svg\">","d084e34c":"### Logical Operators","bac025f2":"![image.png](attachment:bb6a0b51-bac5-44eb-8e3d-0da4dcbe5817.png)","44e54a3c":"## Boolean","bce58f62":"# Functions","6b620aed":"### String Membership","adf23bde":"![image.png](attachment:70eb1388-bd9e-4082-a889-2d31e5961ad4.png)","20a8730a":"![image.png](attachment:11b9b479-a313-41db-97bc-489239853086.png)","2929d0f9":"![image.png](attachment:40639718-3360-49cd-b1ac-bf4c789c5a30.png)","5e44a481":"### Set Creation","ab452dec":"### String Functions","c430f9f9":"Comparison operators are used to compare values.","8050ff20":"## Identifiers","9f7d8978":"### Subset , Superset & Disjoint","7ab37604":"![image.png](attachment:bcc32428-4103-4a08-9784-55731e6ec7dd.png)","67cdb341":"![image.png](attachment:11a1aa39-c01e-4fcc-8338-c35d970ab4b8.png)","230b1dcf":"### Add , Remove & Change Items","5ca4a5fb":"### List Slicing","6dda2571":"### Add & Remove Items","af628fdc":"![image.png](attachment:2dd72111-906b-490f-9d43-930fdd2e8578.png)","d16813d2":"### Loop through a list","ed13a8ac":"### Bitwise operators","fbd3efb9":"## Strings","e506487d":"### Membership Operators","9d9d2a62":"### Copy Set","15eb0b1b":"### List Indexing","82fc38c7":"# Comments in Python","3d50b8e1":"Boolean data type can have only two possible values __true__ or __false__.","8b6911e3":"### Count","c75638a1":"### Tuple Membership","484eb86f":"Comments can be used to explain the code for more readabilty.","2930fb4d":"- __Operators are special symbols in Python which are used to perform operations on variables\/values.__","42a57e2c":"#### Intersection","4c4fff38":"### Multiple Assignments","39c30086":"### String Partitioning","ec13b5f3":"![image.png](attachment:ed4f178c-1dac-4d96-b15e-196122d0e02c.png)","1c60cdab":"### String Slicing","7b44d1da":"- List Comprehensions provide an elegant way to create new lists.\n\n- It consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. ","838968bd":"### Tuple Indexing","e19d4c04":"### Create Dictionary ","2f123d12":"### Accessing Items","f2bd87a5":"A Python variable is a reserved memory location to store values.A variable is created the moment you first assign a value to it.","92edc2f2":"### Set Membership","d5456405":"## Keywords","ec302e42":"### Arithmetic Operators","47b5a7dd":"Indentation refers to the spaces at the beginning of a code line. It is very important as Python uses indentation to indicate a block of code.If the indentation is not correct we will endup with <b>IndentationError<\/b> error.","1b161c04":"## Docstrings","b098a7da":"### Loop through a Set","38c0787f":"# Data Types ","75db0e2f":"### List Membership","904ed223":"__Lambda__\n\n- A lambda function is an anonymous function (function without a name).\n\n\n- Lambda functions can have any number of arguments but only one expression. The expression is evaluated and returned. \n\n\n- We use lambda functions when we require a nameless function for a short period of time.\n\n\n__Syntax:-__","d7ea8209":"### Index Position","be2987ee":"# Tuples","78406b9c":"### Iterating through a String","4164732b":"__**kwargs__\n- **kwargs allows us to pass the variable number of __Keyword Arguments__ to the function.\n\n- We can simply use an double asterisk ** before the parameter name to pass variable length arguments.\n\n- The arguments are passed as a dictionary.\n\n- We can rename it to anything as long as it is preceded by a double asterisk (**). It's best practice to keep naming it kwargs to make it immediately recognizable.\n\n","deb7be8c":"![image.png](attachment:7ee1b8e3-876b-421a-b822-d774d0098c5c.png)","ca3c2116":"### String Indexing","239bf154":"### Other Builtin functions","3cc9d96d":"### Word Frequency using dictionary","b18fa9df":"![image.png](attachment:24179a7c-bedb-4a33-b89e-3173e8d0b21d.png)","b5f7b181":"__Bitwise operators act on bits and performs bit by bit operation.__","a97845e6":"__Filter__\n\n\n- It is used to filter the iterables\/sequence as per the conditions. \n\n\n- Filter function filters the original iterable and passes the items that returns True for the function provided to filter. \n\n\n- It is normally used with Lambda functions to filter list, tuple, or sets.\n\n\n\nfilter() method takes two parameters:\n\n- __function__ - function tests if elements of an iterable returns true or false\n\n- __iterable__ - Sequence which needs to be filtered, could be sets, lists, tuples, or any iterators\n\n\n\n\n__Syntax:__","168f3577":"### All \/ Any","38e22f63":"## Indentation","a5d34d3d":"### Copy Dictionary","d2ee64de":"### Set Operation","20d7441d":" *__args__\n- When we are not sure about the number of arguments being passed to a function then we can use *args as function parameter.\n\n- *args allow us to pass the variable number of __Non Keyword Arguments__ to function.\n\n- We can simply use an asterisk * before the parameter name to pass variable length arguments.\n\n- The arguments are always passed as a tuple.\n\n- We can rename it to anything as long as it is preceded by a single asterisk (*). It's best practice to keep naming it args to make it immediately recognizable.","94efd422":"Keywords are the reserved words in Python and can't be used as an identifier","2f40a574":"### Loop through a tuple","7157cb34":"__Membership Operators are used to test whether a value \/ variable is present in a sequence.__","6624c5ea":"1) Unordered & Unindexed collection of items.\n\n2) Set elements are unique. Duplicate elements are not allowed.\n\n3) Set elements are immutable (cannot be changed).\n\n4) Set itself is mutable. We can add or remove items from it.","8de11f7e":"# args & kwargs","31464aee":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/46\/Venn0110.svg\">","5182b93c":"### Add, Remove & Change Items","f9d00809":"#### Union","ad58ac54":"### Comparison Operators","7b12f578":"### Dictionary Membership","fa07d8de":"# Dictionary","9a78d2b9":"### Remove & Change Items","d186963c":"__Reduce__\n\n- The reduce() function is defined in the __functools__ python module.The reduce() function receives two arguments, a function and an iterable. However, it doesn't return another iterable, instead it returns a single value.\n\n\n__Working:__\n\n 1)  Apply a function to the first two items in an iterable and generate a partial result.\n\n 2)  The function is then called again with the result obtained in __step 1__ and the next value in the sequence. This process keeps on repeating until there are items in the sequence.\n\n 3)  The final returned result is returned and printed on console.\n\n\n\n__Syntax:__","2488b62c":"### Reverse & Sort List","858d6b0e":"![image.png](attachment:a183b61d-b03f-4205-910b-3ecd4d334ccb.png)","e6e5ab65":"<!DOCTYPE html>\n<html>\n<body>\n<div align=\"center\">\n<h2>Prepared by Asif Bhat<\/h2>\n    \n<h1>Python Tutorial<\/h1>\n<\/div>\n<\/body>\n<\/html>","752bd449":"## Numeric","7f7f266f":"### Variable Assigment","86179bc1":"### Modularity","d03e8b98":"An identifier is a name given to entities like class, functions, variables, etc. It helps to differentiate one entity from another.","85944059":"- Dictionary is a mutable data type in Python. \n\n- A python dictionary is a collection of key and value pairs separated by a colon (:) & enclosed in curly braces {}.\n\n- Keys must be unique in a dictionary, duplicate values are allowed.","97950390":"### All \/ Any","4515fda1":"### Copy List","41bf231e":"- A function is a block of organized code written to carry out a specified task.\n\n- Functions help break our program into smaller and modular chunks for better readability. \n\n- Information can be passed into a function as arguments.\n\n- Parameters are specified after the function name inside the parentheses. \n\n- We can add as many parameters as we want. Parameters must be separated with a comma.\n\n- A function may or may not return data.\n\n- In Python a function is defined using the __def__ keyword\n\n### Parameter VS Argument\n\n - A parameter is the variable listed inside the parentheses in the function definition.\n\n - An argument is the value that is sent to the function when it is called.\n\n### Three types of functions in Python:-\n\n- __Built-in function :-__  Python predefined functions that are readily available for use like min() , max() , sum() , print() etc.\n\n- __User-Defined Functions:-__ Function that we define ourselves to perform a specific task.\n\n- __Anonymous functions :__ Function that is defined without a name. Anonymous functions are also called as lambda functions. They are not declared with the __def__ keyword.\n\n### Syntax","c781e9ae":"The __all()__ method returns:\n\n- __True__ - If all all keys of the dictionary are true\n- __False__ - If any key of the dictionary is false\n\n\nThe __any()__ function returns True if any key of the dictionary is True. If not, any() returns False.","bf9440c1":"### Using Escape Character","84200dd0":"### Update & Delete String","ba6adf22":"#### Difference","1941343c":"# Lambda, Filter, Map and Reduce","39b9a66d":"1) List is an ordered sequence of items. \n\n2) We can have different data types under a list. E.g we can have integer, float and string items in a same list.","3442ef3a":"## Statements","87babbac":"### Join Lists"}}