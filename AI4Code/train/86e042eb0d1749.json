{"cell_type":{"f55d427f":"code","5b84a08f":"code","c9a00175":"code","353196b6":"code","3e674732":"code","e57b8e69":"code","355a4275":"code","3ad093fa":"code","1beb30ba":"code","1ce80178":"code","8f924aa4":"code","5f5fd4df":"code","1a2a3045":"code","bf9be3a9":"code","5a70ff9b":"code","d7c2f2d9":"code","82814465":"code","9665efc6":"code","b19db907":"markdown","80c6d775":"markdown","5949407f":"markdown","4db67190":"markdown","db0d4726":"markdown","de125bb5":"markdown","10a85a87":"markdown","01b18bdf":"markdown","a615da1b":"markdown","46f2deee":"markdown","1779b0d2":"markdown","805254ac":"markdown","cd2c340a":"markdown","71e3bfab":"markdown","13f3801b":"markdown","aad0f3d3":"markdown","d952794e":"markdown","fcba1684":"markdown","6b7a7c49":"markdown","b3a4cf56":"markdown","ae166e8d":"markdown","264bd5ed":"markdown","1d4c4623":"markdown"},"source":{"f55d427f":"import random\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","5b84a08f":"fig=plt.figure(figsize=(16,6))\n\nX = np.arange(1,5)\n\nax1=plt.subplot(1,2,1)\nax1.plot(X,[x+(x*random.random()) for x in X])\nax1.set_title('Sub Plot 1')\n\nax2=plt.subplot(1,2,2)\nax2.plot(X,[x-(x*random.random()) for x in X])\nax2.set_title('Sub Plot 2')\n\nplt.show()","c9a00175":"fig,axes=plt.subplots(2,2,figsize=(16,8))\n\naxes[0][0].plot(X,[x+(x*random.random()) for x in X])\naxes[0][0].set_title('Sub Plot 1')\n\naxes[0][1].plot(X,[x*(x*random.random()) for x in X])\naxes[0][1].set_title('Sub Plot 2')\n\naxes[1][0].plot(X,[x-(x*random.random()) for x in X])\naxes[1][0].set_title('Sub Plot 3')\n\naxes[1][1].plot(X,[x\/(x*random.random()) for x in X])\naxes[1][1].set_title('Sub Plot 4')\n\nplt.show()","353196b6":"fig=plt.figure(figsize=(10,10))\n\nax1=plt.subplot2grid((4,4),(0,0),colspan=2)\nax1.plot(X,[x+(x*random.random()) for x in X])\nax1.set_title('Plot 1 : (0,0)')\n\nax2=plt.subplot2grid((4,4),(0,2),colspan=2)\nax2.plot(X,[x-(x*random.random()) for x in X])\nax2.set_title('Plot 2 : (0,3)')\n\nax3=plt.subplot2grid((4,4),(1,0),rowspan=3,colspan=3)\nax3.plot(X,[x-(x*random.random()) for x in X])\nax3.set_title('Plot 3 : (1,0)')\n\nax4=plt.subplot2grid((4,4),(1,3),rowspan=3,colspan=1)\nax4.plot(X,[x+(x*random.random()) for x in X])\nax4.set_title('Plot 4 : (1,3)')\n\nfig.tight_layout()\n\nplt.show()","3e674732":"\nfig=plt.figure(figsize=(10,6))\n\ntemp=[ random.uniform(20,40) for i in range(5)]\ncity=['City A','City B','City C','City D','City E']\ny_pos=list(range(1,6))\n\ngraph=plt.bar(y_pos, temp,color='green')\n\nplt.xticks(y_pos,city)\nplt.title('City Temperature')\nplt.xlabel('Cities')\nplt.ylabel('Temperature ($^\\circ$C)')\n\nfor bar,t in zip(graph,temp):\n    plt.text(bar.get_x() + bar.get_width()\/2.0,bar.get_height(),'%.2f $^\\circ$C'%t,ha='center',va='bottom')\n\nplt.show()","e57b8e69":"fig=plt.figure(figsize=(8,6))\n\nplt.plot(X,np.exp(X))\nplt.title('Annotating Exponential Plot using plt.annotate()')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\n\nplt.annotate('Point 1',xy=(2,7),arrowprops=dict(arrowstyle='->'),xytext=(1.25,10))\n\nplt.annotate('Point 2',xy=(3,20),arrowprops=dict(arrowstyle='->',connectionstyle='arc3,rad=-.2'),xytext=(2,22))\n\nplt.annotate('Point 2',xy=(3,20),arrowprops=dict(arrowstyle='-|>',connectionstyle='angle,angleA=90,angleB=0'),xytext=(3.5,10))\n\nplt.show()","355a4275":"plt.figure(figsize = (13,10))\nplt.subplot(221)\nplt.plot(X,[x+(x*random.random()) for x in X])\nplt.title(\"With spines\")\n\nplt.subplot(222)\nplt.plot(X,[x+(x*random.random()) for x in X])\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.title(\"Without spines\")\n\nplt.subplot(223)\nplt.plot(X,[x+(x*random.random()) for x in X])\nplt.gca().spines['left'].set_color('yellow')\nplt.gca().spines['bottom'].set_color('red')\nplt.title(\"Colored axes\" , color = 'green')\n\nplt.show()","3ad093fa":"import math\nimport random\n\nn = 250\nx = [random.triangular() for i in range(n)]\ny = [random.gauss(0.5, 0.25) for i in range(n)]\ncolors = [random.randint(1, 4) for i in range(n)]\nareas = [math.pi * random.randint(5, 15)**2 for i in range(n)]\n\nplt.figure(figsize = (13,8))\nplt.scatter(x, y, s=areas, c=colors, alpha=0.7)\nplt.title('Opacity with alpha', fontsize = 14)\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.show()","1beb30ba":"plt.figure(figsize = (17,8))\nplt.subplot(121)\nplt.scatter(x, y, s=areas, c=colors, alpha=0.7, zorder=1) # Background\nplt.plot([.2, .9], [0, .9], 'k-', lw=2, zorder=2) # Foreground\nplt.title(\"Line in Foreground\", fontsize = 14)\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\n\nplt.subplot(122)\nplt.scatter(x, y, s=areas, c=colors, alpha=0.7, zorder=2) # Background\nplt.plot([.2, .9], [0, .9], 'k-', lw=2, zorder=1) # Foreground\nplt.title(\"Line in Background\", fontsize = 14)\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\n\nplt.show()","1ce80178":"plt.figure(figsize = (13,8))\n\nplt.scatter(x, y) \n\n# Add horizontal and vertical lines\nplt.axhline(0.5, linestyle =\"--\")  #horizontal line\nplt.axvline(0.5, linestyle =\"--\")  #vertical line\n\nplt.show()","8f924aa4":"from matplotlib.patches import Rectangle","5f5fd4df":"plt.figure(figsize = (13,8))\n\nplt.scatter(x, y) \n\n# Add horizontal and vertical lines\nplt.axhline(0.5, linestyle =\"--\")  #horizontal line\nplt.axvline(0.5, linestyle =\"--\")  #vertical line\n\nplt.gca().add_patch(Rectangle((.3, .3), .4, .45,  fill = False))\nplt.show()","1a2a3045":"plt.figure(figsize = (13,8))\n\nplt.scatter(x, y) \n\n# Add horizontal and vertical spans\nplt.axhspan(.2, .3, alpha = 0.2, color = 'green')  # Horizontal shading\nplt.axvspan(.2, .3, alpha = 0.4, color = 'pink')  # Vertical shading\n\nplt.show()","bf9be3a9":"fig = plt.figure(figsize = (13,8))\nax = fig.add_subplot(1, 1, 1)\nimage = np.random.poisson(10., (100, 80))\ni = ax.imshow(image, interpolation='nearest')\nfig.colorbar(i)  # note that colorbar is a method of the figure, not the axes\nplt.show()","5a70ff9b":"fig = plt.figure(figsize = (13,8))\nax = fig.add_axes([0.1,0.1,0.6,0.8])\nimage = np.random.poisson(10., (100, 80))\ni = ax.imshow(image, interpolation='nearest')\ncolorbar_ax = fig.add_axes([0.7, 0.1, 0.05, 0.8])\nfig.colorbar(i, cax=colorbar_ax)\nplt.show()","d7c2f2d9":"fig = plt.figure(figsize = (10,8))\nax = fig.add_axes([0.1,0.1,0.6,0.8])\nimage = np.random.poisson(10., (100, 80))\ni = ax.imshow(image, aspect='auto', interpolation='nearest')\ncolorbar_ax = fig.add_axes([0.7, 0.1, 0.05, 0.8])\nfig.colorbar(i, cax=colorbar_ax)\nplt.show()","82814465":"# creating the dataset \ndata = {'C':20, 'C++':15, 'Java':30,'Python':35} \n\nx_pos_course = list(range(4))\ncourses = list(data.keys()) \nvalues = list(data.values()) \n   \nfig = plt.figure(figsize = (10, 5)) \n  \n# creating the bar plot \nplt.bar(courses, values, color ='green',  \n        width = 0.4) \n\n#Modifiying ticks\nplt.xticks([i for i in x_pos_course],courses,fontname='Chilanka',rotation=45,fontsize=14)\n\nplt.xlabel(\"Courses offered\", fontsize = 12) \nplt.ylabel(\"No. of students enrolled\", fontsize = 12) \nplt.title(\"Students enrolled in different courses\", fontsize = 14) \nplt.show() ","9665efc6":"x = np.linspace(0, 20, 1000)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize = (13,8))\nplt.plot(x, y1, \"-b\", label=\"sine\")\nplt.plot(x, y2, \"-r\", label=\"cosine\")\n\n# modifying legend\nplt.legend(loc='upper center',ncol=2,frameon=False) \nplt.ylim(-1.5, 2.0)\nplt.show()","b19db907":"# 7) Modify ticks and legends\nLet\u2019s start making our plot beautiful by modifying ticks. xticks() and yticks() are the functions that we are looking for\n\nThese functions take the position and labels as arguments and create ticks for a plot. You can use the same functions for changing the font, size, rotating ticks, and much more","80c6d775":"Order -\nMatplotlib\u2019s zorder property determines how close objects are to the foreground. Objects with smaller zorder values appear closer to the background, while those with larger values present closer to the front. If I\u2019m making a scatter plot with an accompanying line plot, for example, I can bring the line forward by increasing its zorder.","5949407f":"# 4) Layer Graph Objects\nWe can layer multiple graph objects on top of each other. Two useful properties should be utilized while layering: \n\n1) Alpha for controlling each component\u2019s opacity\n\n2) zorder for moving objects to the foreground or background.\n\nOpacity - The alpha property in Matplotlib adjusts an object\u2019s opacity. This value ranges from zero to one with zero being fully transparent and one being entirely opaque. Reducing alpha will make your plot objects see-through, allowing multiple layers to be seen at once as well as allowing overlapping points to be distinguished, say, in a scatter plot.","4db67190":"There are no issues with subplot(). But we observe that for each plot in the figure, we are writing repetitive statements, which is inappropriate when we have to create multiple subplots.\n\nThis limitation is overcome by subplots(). It returns an array instead of one axes at a time. It takes number of rows and columns as the arguments and returns an array of axes objects.","db0d4726":"You will notice that even though the axes we specified should line up nicely, they don\u2019t. This is because imshow automatically modifies the axes so that pixels are square. We can fix this with aspect='auto'","de125bb5":"# 6) Add a colorbar\nAdding a colorbar to a plot is also straightforward, and involves capturing the handle to the imshow object","10a85a87":"Shading - Shading provides an alternative option for drawing attention to a particular region of your figure, and there are a few ways to add shading with Matplotlib.\nIf you intend to highlight an entire horizontal or vertical area, just layer a span into your visual:","01b18bdf":"Above figure has multiple Axes (a list, for which we take the first element). Each Axes has a y-axis and x-axis, each of which have a collection of \u201cmajor ticks,\u201d and we grab the first one.\n\nMatplotlib presents this as a figure anatomy, rather than an explicit hierarchy","a615da1b":"# 5) Baseline and Highlight\nAdding a baseline to your visuals helps set expectations. A simple horizontal or vertical line provides others with appropriate context and often speeds along their understanding of your results. Highlighting a specific region of interest, meanwhile, can further emphasize your conclusions and also facilitates communication with your audience. Matplotlib offers several options for baselining and highlighting, including horizontal and vertical lines, shapes such as rectangles, horizontal and vertical span shading, and filling between two lines.","46f2deee":"# **2) Annotate Plots** \n\nAnnotation is a comment added to a plot at a point to make it more understandable.\n\nAnnotations are of great help in marking different positions of a plot. There are two ways of doing this in matplotlib:\n\nUsing the text() function\nUsing the annotate() function of pyplot","1779b0d2":"# 3) Remove Spines\n\nBlack box surrounding each plot is called as spines. To adjust them first we retrieve figure's axes via pyplot and then change the visibility of each plot. \nLet's remove top and right spines and even change axes color\n","805254ac":"![image.png](attachment:image.png)","cd2c340a":"Note that in the above colorbar call, the colorbar box automatically eats up space from the axes to which it is attached. If you want to customize exactly where the colorbar appears, you can define a set of axes, and pass it to colorbar via the cax= argument:","71e3bfab":"Rectangle - Matplotlib provides access to several shapes through its patches module, including a rectangle or even a dolphin. Begin by importing code for the rectangle","13f3801b":"****Hope you enjoyed the kernel! Do let me know your views\/suggestions in comments****","aad0f3d3":"Then to create a rectangle on the figure, grab the current axes and add a rectangular patch with its location, width, and height. Here we draw rectangle around dense areas of plot","d952794e":"Third method is using subplot2grid(). It displays figure as a grid and modify your plots based on the rows and columns of the grid. It takes shape, location, rowspan and columnspan as arguments and returns axes object for a specific location and of a particular size in a grid","fcba1684":"![image.png](attachment:image.png)","6b7a7c49":"Let\u2019s start with the text() function\n\nLet\u2019s say you have to mention values over each bar of a bar plot. text() function can be beneficial here because it takes x and y position as arguments and lets you write text there","b3a4cf56":"# **1) Generate Subplots**\n\nA subplot is a figure having multiple plots in it.\n\nThere are basically 3 ways to create subplots -\n\n1) Using subplot()\n\n2) Using subplots()\n\n3) Using subplot2grid()\n\nUsing subplot() is the easiest and most explicit way of creating subplots in matplotlib. It takes three parameters \u2013 number of rows, number of columns and an index \u2013 as arguments and returns an axes object, which you can then use for plotting.","ae166e8d":"In this notebook I will share some useful tips and snippets which might help you to understand matplotlib better and use it more effectively\n\nFirst of all lets briefly see Matplotlib object hierarchy. A plot is really a hierarchy of nested Python objects. A \u201chierarchy\u201d here means that there is a tree-like structure of matplotlib objects underlying each plot.\n\nA Figure object is the outermost container for a matplotlib graphic, which can contain multiple Axes objects. One source of confusion is the name: an Axes actually translates into what we think of as an individual plot or graph (rather than the plural of \u201caxis,\u201d as we might expect).\n\nYou can think of the Figure object as a box-like container holding one or more Axes (actual plots). Below the Axes in the hierarchy are smaller objects such as tick marks, individual lines, legends, and text boxes. Almost every \u201celement\u201d of a chart is its own manipulable Python object, all the way down to the ticks and labels.","264bd5ed":"Now, let\u2019s say you want to annotate a point on the plot with a marker and also write text. Here, the annotate() function can be used:","1d4c4623":"The legend can be modified using the same legend() function used to place it on the axes. It takes various arguments that can be used to modify it. Here, I will be using only the loc, frameon, and ncol arguments.\n\nThe loc argument is used for defining the location of the legend, the frameon takes a boolean value and is used for setting the visibility of the frame around a legend and ncol is used for setting the number of columns in a legend:"}}