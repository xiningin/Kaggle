{"cell_type":{"05fd77af":"code","ae00416f":"code","90a20696":"code","2ef07d7d":"code","f1ba6be0":"code","31b992eb":"code","6928b9ee":"code","31dc7bb6":"markdown","438129fc":"markdown","43d19fb8":"markdown","7866bfb4":"markdown","eb796aee":"markdown","098d38e6":"markdown","6b3a7df3":"markdown","3fe92540":"markdown","fc1fb3ce":"markdown","aeba3c3e":"markdown"},"source":{"05fd77af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n!pip install kaggle_environments==0.1.6\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae00416f":"from kaggle_environments import make, evaluate\n\n# Create the game environment\n# Set debug=True to see the errors if your agent refuses to run\nenv = make(\"connectx\", debug=True)\n\n# List of available default agents\nprint(list(env.agents))","90a20696":"# Two random agents play one game round\nenv.run([\"random\", \"random\"])\n\n# Show the game\nenv.render(mode=\"ipython\")","2ef07d7d":"# Selects random valid column\ndef agent_random(obs, config):\n    #an agent function should be fully encapsulated (no external dependencies)\n    #then we need to import all librabries inside out agent\n    import random\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return random.choice(valid_moves)\n\n# Selects middle column\ndef agent_middle(obs, config):\n    return config.columns\/\/2\n\n# Selects leftmost valid column\ndef agent_leftmost(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return valid_moves[0]","f1ba6be0":"# Agents play one game round\nenv.run([agent_random,agent_random])\n\n# Show the game\nenv.render(mode=\"ipython\")","31b992eb":"# Link: https:\/\/www.kaggle.com\/alexisbcook\/play-the-game\ndef get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    \n    #these codes are not work because of the change in kaggle environment\n    #you can fix this by downgrading the kaggle_environments\n    #!pip install kaggle_environments==0.1.6 use this before any other code.\n    \n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,0])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([0,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0.5]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0.5, None]))\n    print(\"Number of Draws (in {} game rounds):\".format(n_rounds), outcomes.count([0.5, 0.5]))\n    \n    #print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    #print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    #print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    #print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))\n    #print(\"Number of Draws (in {} game rounds):\".format(n_rounds), outcomes.count([0, 0]))\n","6928b9ee":"get_win_percentages(agent1=agent_random, agent2=agent_random)","31dc7bb6":"**You can make two agents plays against each other as**","438129fc":"Let agents play game against each other,we use the same env.run() method as before","43d19fb8":"# This notebook for Newbie in Connect X","7866bfb4":"# Defining Agents\nWe need to create our own AGENT to participate in the competition.\n\nYour agent should be implemented as a Python function that accepts two arguments: **obs** and **config**. It returns an integer with the selected column, where indexing starts at zero. So, the returned value is one of 0-6, inclusive.\n\n\n**obs** contains two pieces of information:\n\n* obs.board - the game board (a Python list with one item for each grid location)\n* obs.mark - the piece assigned to the agent (either 1 or 2)\n\n\nobs.board is a Python list that shows the locations of the discs, where the first row appears first, followed by the second row, and so on. We use 1 to track player 1's discs, and 2 to track player 2's discs. \n\nFor instance, for a game board: obs.board can be [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 2, 0, 2, 0]\n\n\nconfig contains three pieces of information:\n\n* config.columns - number of columns in the game board (7 for Connect Four)\n* config.rows - number of rows in the game board (6 for Connect Four)\n\n\nconfig.inarow - number of pieces a player needs to get in a row in order to win (4 for Connect Four)","eb796aee":"# The game environment\nThere is the connectx environment for this game. \n\nThere are also two agents created for you to play with as 'random' and 'negamax'.","098d38e6":"# And for someone taking the course: \"Intro to Game AI and Reinforcement Learning\"","6b3a7df3":"# Continue\n\nNow you got the basic of Connect X. \n\nYou should take the course **Intro to Game AI and Reinforcement Learning**\n\nhttps:\/\/www.kaggle.com\/learn\/intro-to-game-ai-and-reinforcement-learning\n\n1. Here is my notebook with revised exercise for the first lesson.\n\nhttps:\/\/www.kaggle.com\/nlebang\/corrected-exercise-play-the-game\n\n2. The revised notebook for the second lesson\n\nhttps:\/\/www.kaggle.com\/nlebang\/revised-exercise-one-step-lookahead\n\n3. The revised notebook for the third lesson\n\nhttps:\/\/www.kaggle.com\/nlebang\/revised-exercise-n-step-lookahead\n\n\nI will update more notesbooks for newbies to get started with Game AI & Reinforcement Learning here.","3fe92540":"# Evaluating agents\nThe outcome of a single game is usually not enough information to figure out how well our agents are likely to perform. To get a better idea, we'll calculate the win percentages for each agent, averaged over multiple games. For fairness, each agent goes first half of the time.\n\nTo do this, we'll use the get_win_percentages() function (defined in a hidden code cell). To view the details of this function, click on the \"Code\" button below.","fc1fb3ce":"Which agent do you think performs better against the random agent: the agent that always plays in the middle (agent_middle), or the agent that chooses the leftmost valid column (agent_leftmost)? Let's find out!","aeba3c3e":"There are three simple agents from https:\/\/www.kaggle.com\/alexisbcook\/play-the-game"}}