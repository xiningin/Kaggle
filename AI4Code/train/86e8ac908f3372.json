{"cell_type":{"8e8357d3":"code","7cb8156a":"code","1a0de4af":"code","7ce816f3":"code","ff397c7f":"code","c0bb6773":"code","2462617b":"code","2754a285":"code","35f82ac2":"code","0d10c2a4":"code","bf3661fe":"code","81964e1a":"markdown","6a88a733":"markdown","31f3a8b4":"markdown","1e22fb8a":"markdown","472d917e":"markdown","1793e321":"markdown"},"source":{"8e8357d3":"import numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nfrom tqdm import tqdm\n\nDATADIR = \"..\/input\/cat-and-dog\/PetImages\/\"\n\nCATEGORIES = [\"Dog\", \"Cat\"]\n\nfor category in CATEGORIES:  # do dogs and cats\n    path = os.path.join(DATADIR,category)  # create path to dogs and cats\n    for img in os.listdir(path):  # iterate over each image per dogs and cats\n        img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE)  # convert to array\n        plt.imshow(img_array, cmap='gray')  # graph it\n        plt.show()  # display!\n\n        break  # we just want one for now so break\n    break  #...and one more!","7cb8156a":"print(img_array)","1a0de4af":"print(img_array.shape)","7ce816f3":"IMG_SIZE = 50\n\nnew_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\nplt.imshow(new_array, cmap='gray')\nplt.show()","ff397c7f":"new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\nplt.imshow(new_array, cmap='gray')\nplt.show()","c0bb6773":"training_data = []\n\ndef create_training_data():\n    for category in CATEGORIES:  # do dogs and cats\n\n        path = os.path.join(DATADIR,category)  # create path to dogs and cats\n        class_num = CATEGORIES.index(category)  # get the classification  (0 or a 1). 0=dog 1=cat\n\n        for img in tqdm(os.listdir(path)):  # iterate over each image per dogs and cats\n            try:\n                img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE)  # convert to array\n                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  # resize to normalize data size\n                training_data.append([new_array, class_num])  # add this to our training_data\n            except Exception as e:  # in the interest in keeping the output clean...\n                pass\n            #except OSError as e:\n            #    print(\"OSErrroBad img most likely\", e, os.path.join(path,img))\n            #except Exception as e:\n            #    print(\"general exception\", e, os.path.join(path,img))\n\ncreate_training_data()\n\nprint(len(training_data))","2462617b":"import random\n\nrandom.shuffle(training_data)","2754a285":"for sample in training_data[:10]:\n    print(sample[1])","35f82ac2":"X = []\ny = []\n\nfor features,label in training_data:\n    X.append(features)\n    y.append(label)\n\nprint(X[0].reshape(-1, IMG_SIZE, IMG_SIZE, 1))\n\nX = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)","0d10c2a4":"import pickle\n\npickle_out = open(\"X.pickle\",\"wb\")\npickle.dump(X, pickle_out)\npickle_out.close()\n\npickle_out = open(\"y.pickle\",\"wb\")\npickle.dump(y, pickle_out)\npickle_out.close()","bf3661fe":"pickle_in = open(\"X.pickle\",\"rb\")\nX = pickle.load(pickle_in)\n\npickle_in = open(\"y.pickle\",\"rb\")\ny = pickle.load(pickle_in)","81964e1a":"Great, we've got the classes nicely mixed in! Time to make our model!","6a88a733":"Let's save this data, so that we don't need to keep calculating it every time we want to play with the neural network model:","31f3a8b4":"Better. Let's try that. Next, we're going to want to create training data and all that, but, first, we should set aside some images for final testing. I am going to just manually create a directory called Testing and then create 2 directories inside of there, one for Dog and one for Cat. From here, I am just going to move the first 15 images from both Dog and Cat into the training versions. Make sure you move them, not copy. We will use this for our final tests.\n\nNow, we want to begin building our training data!","1e22fb8a":"Now that we've got out dataset, we're ready to cover convolutional neural networks and implement one with our data for classification.\n\nThe next tutorial: [Convolutional Neural Networks - Deep Learning Basics With Python, TensorFlow And Keras P.3](https:\/\/www.kaggle.com\/mekhdigakhramanian\/cnn-tensorflow-and-keras-p-3-0\/)","472d917e":"* # Please upvote this kernel and like the video\n* \nThanks harrison \n\n<iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/j-3vuBynnOE\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","1793e321":"First, we need a dataset. Let's grab the [Dogs vs Cats dataset from Microsoft](https:\/\/www.microsoft.com\/en-us\/download\/confirmation.aspx?id=54765). or use the kaggle dataset that I uploaded"}}