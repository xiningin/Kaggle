{"cell_type":{"282e16e2":"code","d11a6931":"code","b867cc63":"code","0b8a18b7":"code","6e00080e":"code","bc92be3d":"code","fb26166c":"code","37f0178c":"code","5b4e247a":"code","4b51e9f9":"code","7f0c7739":"code","ca56cdb1":"code","6b4fc043":"code","5c812097":"code","733873e4":"code","479bdbcf":"code","d419bea8":"code","5d91c716":"code","62826228":"code","a1ce20bc":"markdown","e62a8d0a":"markdown","927e2a15":"markdown","9f34f1d6":"markdown","40281c03":"markdown","13c9185f":"markdown","7c4c537e":"markdown","83cd8268":"markdown","191e72c3":"markdown","53b00a4b":"markdown","4dac0ae8":"markdown","cc0ae3e3":"markdown","cc89471a":"markdown","d939b27b":"markdown","9513c5d8":"markdown","6055a2ed":"markdown","9155eac7":"markdown","ddfe9fe3":"markdown"},"source":{"282e16e2":"pip install -U lightautoml","d11a6931":"# Standard python libraries\nimport os\nimport time\nimport re\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.model_selection import train_test_split\nimport torch\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.dataset.roles import DatetimeRole\nfrom lightautoml.tasks import Task\nfrom lightautoml.utils.profiler import Profiler","b867cc63":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 600 # Time in seconds for automl run","0b8a18b7":"np.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","6e00080e":"%%time\n\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_data.head()","bc92be3d":"test_data = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data.head()","fb26166c":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission.head()","37f0178c":"def get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\ndef create_extra_features(data):\n    data['Ticket_type'] = data['Ticket'].map(lambda x: x[0:3])\n    data['Name_Words_Count'] = data['Name'].map(lambda x: len(x.split()))\n    data['Has_Cabin'] = data[\"Cabin\"].map(lambda x: 1 - int(type(x) == float))\n    data['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n    \n    data['CategoricalFare'] = pd.qcut(data['Fare'], 5).astype(str)\n    data['CategoricalAge'] = pd.cut(data['Age'], 5).astype(str)\n    \n    data['Title'] = data['Name'].apply(get_title).replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    data['Title'] = data['Title'].replace('Mlle', 'Miss')\n    data['Title'] = data['Title'].replace('Ms', 'Miss')\n    data['Title'] = data['Title'].replace('Mme', 'Mrs')\n    data['Title'] = data['Title'].map({\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}).fillna(0)\n    return data\n\ntrain_data = create_extra_features(train_data)\ntest_data = create_extra_features(test_data)","5b4e247a":"tr_data, te_data = train_test_split(train_data, \n                                     test_size=TEST_SIZE, \n                                     stratify=train_data['Survived'], \n                                     random_state=RANDOM_STATE)\nprint('Data splitted. Parts sizes: tr_data = {}, te_data = {}'.format(tr_data.shape, te_data.shape))","4b51e9f9":"%%time\ndef acc_score(y_true, y_pred, **kwargs):\n    return accuracy_score(y_true, (y_pred > 0.5).astype(int), **kwargs)\n\ndef f1_metric(y_true, y_pred, **kwargs):\n    return f1_score(y_true, (y_pred > 0.5).astype(int), **kwargs)\n\ntask = Task('binary', metric = f1_metric)","7f0c7739":"%%time\n\nroles = {\n    'target': 'Survived',\n    'drop': ['PassengerId', 'Name','Ticket'],\n}","ca56cdb1":"%%time \n\nautoml = TabularAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS})\noof_pred = automl.fit_predict(tr_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","6b4fc043":"%%time\n\ntest_pred = automl.predict(te_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(acc_score(tr_data['Survived'].values, oof_pred.data[:, 0])))\nprint('TEST score: {}'.format(acc_score(te_data['Survived'].values, test_pred.data[:, 0])))","5c812097":"%%time \n\nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS})\noof_pred = automl.fit_predict(tr_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","733873e4":"%%time\n\ntest_pred = automl.predict(te_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(acc_score(tr_data['Survived'].values, oof_pred.data[:, 0])))\nprint('TEST score: {}'.format(acc_score(te_data['Survived'].values, test_pred.data[:, 0])))","479bdbcf":"%%time \n\nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS})\noof_pred = automl.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","d419bea8":"%%time\n\ntest_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(acc_score(train_data['Survived'].values, oof_pred.data[:, 0])))","5d91c716":"submission['Survived'] = (test_pred.data[:, 0] > 0.5).astype(int)\nsubmission.to_csv('automl_utilized_600_f1_score.csv', index = False)","62826228":"submission","a1ce20bc":"Below we are going to create specific AutoML preset for TIMEOUT utilization (try to spend it as much as possible):","e62a8d0a":"# Step 0.1. Import necessary libraries ","927e2a15":"# ========= AutoML preset usage =========\n\n\n## Step 1. Create Task","9f34f1d6":"## Step 8. Predict for test data and check OOF score","40281c03":"# Step 0.4. Data load ","13c9185f":"## Step 9. Prepare submission","7c4c537e":"# Step 0.0. Install LightAutoML","83cd8268":"# Step 0.2. Parameters ","191e72c3":"Submission above scores 79.665% accuracy on public LB.","53b00a4b":"## Step 2. Setup columns roles","4dac0ae8":"# Step 0.6. Data splitting for train-test ","cc0ae3e3":"## Step 4. Predict to validation data and check scores","cc89471a":"## Step 6. Predict to validation data and check scores for utilized automl","d939b27b":"Score for `TabularUtilizedAutoML` is 85.5% accuracy for OOF preds and 82.7% accuracy for validation preds in 10 minutes. As the validation score is better for `TabularUtilizedAutoML` for this case, we choose it for final model retrain on full train dataset.\n\n## Step 7. Train on full data ","9513c5d8":"    Score for `TabularAutoML` is 83.8% accuracy for OOF preds and 82.1% accuracy for validation preds in 2 minutes time. \n\n## Step 5. Create AutoML with time utilization ","6055a2ed":"## Step 3. Create AutoML from preset and train on 80% of data","9155eac7":"# Step 0.3. Fix torch number of threads and numpy seed ","ddfe9fe3":"# Step 0.5. Add new features"}}