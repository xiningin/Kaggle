{"cell_type":{"460fec81":"code","3bd46d00":"code","fbc7edef":"code","f4a29a07":"code","69b5b23f":"code","d7affd47":"code","b37c076d":"code","7c540e3c":"code","726babe7":"code","dc301132":"code","c62be07c":"code","e4039d9a":"code","fdbc48f7":"code","990eb20a":"code","b6c6ca60":"code","17f7ad5a":"code","763e60fe":"code","638966de":"code","4be9dc32":"code","00cc3beb":"markdown","adce1312":"markdown","5133b795":"markdown","02942813":"markdown","23063456":"markdown","2563dd61":"markdown","9bd0e33f":"markdown","2cd848e4":"markdown","0c2ae77b":"markdown","63c62b48":"markdown","d9a792d3":"markdown","bb10da77":"markdown"},"source":{"460fec81":"import pandas as pd\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain.head()","3bd46d00":"import matplotlib.pyplot as plt\n\nsex_pivot = train.pivot_table(index=\"Sex\",values=\"Survived\")\nsex_pivot","fbc7edef":"sex_pivot.plot.bar()\nplt.show()","f4a29a07":"pclass_pivot = train.pivot_table(index=\"Pclass\",values=\"Survived\")\npclass_pivot","69b5b23f":"pclass_pivot.plot.bar()\nplt.show()","d7affd47":"survived = train[train[\"Survived\"] == 1]\ndied = train[train[\"Survived\"] == 0]\nsurvived[\"Age\"].plot.hist(alpha = 0.5, color = 'red', bins = 50)\ndied[\"Age\"].plot.hist(alpha = 0.5, color='green', bins = 50)\nplt.legend(['Survived','Died'])\nplt.show()","b37c076d":"embark_pivot = train.pivot_table(index=\"Embarked\",values=\"Survived\")\nembark_pivot","7c540e3c":"embark_pivot.plot.bar()\nplt.show()","726babe7":"survived = train[train[\"Survived\"] == 1]\ndied = train[train[\"Survived\"] == 0]\nsurvived[\"Fare\"].plot.hist(alpha = 0.5, color = 'red', bins = 20)\ndied[\"Fare\"].plot.hist(alpha = 0.5, color='green', bins = 20)\nplt.legend(['Survived','Died'])\nplt.show()","dc301132":"# Create a variable called Family to represent if the passenger had any family member aboard or not,\n# and see whether having any family member will increase chances of survival\n\ntrain['Family'] =  train[\"Parch\"] + train[\"SibSp\"]\n\ntrain['Family'].loc[train['Family'] > 0] = 1\ntrain['Family'].loc[train['Family'] == 0] = 0\n\ntest['Family'] =  test[\"Parch\"] + test[\"SibSp\"]\n\ntest['Family'].loc[test['Family'] > 0] = 1\ntest['Family'].loc[test['Family'] == 0] = 0\n\nfamily_pivot = train.pivot_table(index=\"Family\",values=\"Survived\")\nfamily_pivot","c62be07c":"family_pivot.plot.bar()\nplt.show()","e4039d9a":"import numpy as np\n\n# replace missing value\ntrain[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")\n\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].median())\ntest[\"Fare\"] = test[\"Fare\"].fillna(test[\"Fare\"].median())\n# test.Fare[152] = test.Fare.median()","fdbc48f7":"# convert features in train\ntrain[\"Sex\"][train[\"Sex\"] == \"male\"] = 0\ntrain[\"Sex\"][train[\"Sex\"] == \"female\"] = 1\ntest[\"Sex\"][test[\"Sex\"] == \"male\"] = 0\ntest[\"Sex\"][test[\"Sex\"] == \"female\"] = 1\n\ntrain[\"Embarked\"][train[\"Embarked\"] == \"S\"] = 0\ntrain[\"Embarked\"][train[\"Embarked\"] == \"C\"] = 1\ntrain[\"Embarked\"][train[\"Embarked\"] == \"Q\"] = 2\n\ntest[\"Embarked\"][test[\"Embarked\"] == \"S\"] = 0\ntest[\"Embarked\"][test[\"Embarked\"] == \"C\"] = 1\ntest[\"Embarked\"][test[\"Embarked\"] == \"Q\"] = 2","990eb20a":"X_train = train[['Sex', 'Pclass', 'Age', 'Embarked', 'Fare', 'Family']].values\nX_test = test[['Sex', 'Pclass', 'Age', 'Embarked', 'Fare', 'Family']].values\n\nY_train = train[\"Survived\"].values","b6c6ca60":"from sklearn import tree\n\n# fit the decision tree\nclass_tree = tree.DecisionTreeClassifier(max_leaf_nodes = 10, min_samples_leaf = 2, max_depth= 5, min_samples_split = 4, min_impurity_decrease = 0.01)\nclass_tree = class_tree.fit(X_train, Y_train)\n\n# observe the importance and score of the features\nprint(class_tree.feature_importances_)\nprint(class_tree.score(X_train, Y_train))","17f7ad5a":"# make prediction on test set\nY_test = class_tree.predict(X_test)","763e60fe":"# create DataFrame\nPassengerId = np.array(test[\"PassengerId\"]).astype(int)\nresult = pd.DataFrame(Y_test, PassengerId, columns = [\"Survived\"])\nprint(result)","638966de":"# write results to a csv file\nresult.to_csv(\"Beverly_submission.csv\", index_label = [\"PassengerId\"])","4be9dc32":"import graphviz \ntree_data = tree.export_graphviz(class_tree, out_file = None) \ngraph = graphviz.Source(tree_data) \ngraph","00cc3beb":"#### Sex","adce1312":"#### Age","5133b795":"#### Classification Tree","02942813":"### Visualize Classification","23063456":"#### Family","2563dd61":"#### Fare","9bd0e33f":"#### Embarked","2cd848e4":"#### Pclass","0c2ae77b":"### Clean Data","63c62b48":"### Create Model","d9a792d3":"### Import Data","bb10da77":"### Explore Data"}}