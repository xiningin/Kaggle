{"cell_type":{"770fdf19":"code","e41b790d":"code","123aafb2":"code","0a1faee4":"code","645cc704":"code","b7c11b09":"code","63947bbd":"code","0b7bf29c":"code","3b5406ad":"code","acababa0":"code","e3237f77":"code","ed4e809a":"code","3b02ff16":"code","e757327f":"code","08132239":"code","cc06d9cd":"code","d724f764":"code","e43dcbf8":"code","f806fb12":"code","3fe580bc":"code","f861f418":"markdown","05393220":"markdown","0697f202":"markdown","1563c69b":"markdown","e5b0ecf7":"markdown","18571907":"markdown"},"source":{"770fdf19":"%config Completer.use_jedi = False\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing.image import load_img \nfrom tensorflow.keras.preprocessing.image import img_to_array \n\n","e41b790d":"train_dir = '..\/input\/covidistesgp\/CovidDataset\/train'\ntest_dir = '..\/input\/covidistesgp\/CovidDataset\/validation'","123aafb2":"data = tf.keras.preprocessing.image_dataset_from_directory(directory = train_dir)\nclasses = data.class_names\nprint(classes)","0a1faee4":"plt.figure(figsize = (12,12))\nfor image, label in data.take(1):\n    for i in range(10):\n        ax = plt.subplot(5, 5, i+1)\n        plt.imshow(image[i].numpy().astype(\"uint8\"))\n        plt.title(classes[label[i]])\n        plt.axis(\"off\")","645cc704":"image_size = (299,299)\nbatch_size = 32","b7c11b09":"aug_train_datagen = ImageDataGenerator(\n        rescale = 1.0\/255,\n        rotation_range=10, # rotation\n        width_shift_range=0.2, # horizontal shift\n        height_shift_range=0.2, # vertical shift\n        zoom_range=0.2, # zoom\n        horizontal_flip=True, # horizontal flip\n        brightness_range=[0.2,1.2],# brightness\n        validation_split = 0.1) \ntest_datagen = ImageDataGenerator(rescale = 1.0\/255)","63947bbd":"aug_train_gen = aug_train_datagen.flow_from_directory(\n                  train_dir,\n                  target_size=image_size, # resize to this size\n                  shuffle=True,\n                  batch_size=batch_size, # number of images to extract from folder for every batch\n                  class_mode=\"binary\", # classes to predict\n                  subset=\"training\",\n                  seed=2020 # to make the result reproducible\n                  )","0b7bf29c":"aug_valid_gen = aug_train_datagen.flow_from_directory(\n                  train_dir,\n                  target_size=image_size, # resize to this size\n                  shuffle=True,\n                  batch_size=batch_size, # number of images to extract from folder for every batch\n                  class_mode=\"binary\", # classes to predict\n                  subset=\"validation\",\n                  seed=2020 # to make the result reproducible\n                  )","3b5406ad":"test_gen = test_datagen.flow_from_directory(\n                  test_dir,\n                  target_size=image_size, # resize to this size\n                  shuffle=False,\n                  batch_size=batch_size, # number of images to extract from folder for every batch\n                  class_mode=\"binary\", # classes to predict\n                  seed=2020 # to make the result reproducible\n                  )","acababa0":"# base_model = tf.keras.applications.InceptionV3(\n#     include_top=False,\n#     weights=\"imagenet\",\n#     input_shape= (299,299,3),\n# )","e3237f77":"base_model = tf.keras.applications.InceptionResNetV2(\n    include_top=False,\n    weights=\"imagenet\",\n    input_shape= (299,299,3),\n)","ed4e809a":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, BatchNormalization, GlobalAveragePooling2D\n\nmodel = keras.Sequential()\nmodel.add(base_model)\nmodel.add(keras.layers.GlobalAveragePooling2D())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(120, activation='tanh'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()\n\n","3b02ff16":"base_model.trainable = False","e757327f":"from keras.optimizers import Adam\noptimizer = Adam(lr = 0.001)\nloss = 'binary_crossentropy'\nmodel.compile(optimizer= optimizer, \n             loss = loss, \n             metrics = tf.keras.metrics.AUC())","08132239":"hist = model.fit(aug_train_gen,\n                epochs = 5,\n                validation_data = aug_valid_gen)","cc06d9cd":"test_loss, test_accuracy = model.evaluate(test_gen)\nprint('Test loss: {} Test Accuracy: {}'.format(test_loss, test_accuracy))","d724f764":"for layer in model.layers[-13:]:\n    if not isinstance(layer, BatchNormalization):\n        layer.trainable = True","e43dcbf8":"optimizer = Adam(lr = 0.0001)\nloss = 'binary_crossentropy'\nmodel.compile(optimizer= optimizer, \n             loss = loss, \n             metrics = tf.keras.metrics.AUC())","f806fb12":"hist = model.fit(aug_train_gen,\n                epochs = 5,\n                validation_data = aug_valid_gen)","3fe580bc":"test_loss, test_accuracy = model.evaluate(test_gen)\nprint('Test loss: {} Test Accuracy: {}'.format(test_loss, test_accuracy))","f861f418":"Plotting the Images","05393220":"### Un-Freezing the Base Layer","0697f202":"# Transfer Learning","1563c69b":"### Freezing the base layer","e5b0ecf7":"# Image Data Generator Class","18571907":"Loading the Dataset"}}