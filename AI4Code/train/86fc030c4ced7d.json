{"cell_type":{"3596b8cc":"code","07fca88f":"code","83a6cc37":"code","75fcface":"code","fcc4ab8f":"code","2f44e4d5":"code","1ab7d8ac":"code","57ba9586":"code","7213825c":"code","a721a9da":"code","bf10b842":"code","15ddd7f1":"code","a5400e47":"code","5649b835":"code","d38e0d50":"code","7db86207":"code","58ce3e11":"code","0a587cb6":"code","7953beb8":"code","773b7e91":"code","c49e08cc":"code","685589bd":"code","64df2e14":"markdown","c3d6188e":"markdown","ce7457cc":"markdown","d8e57de9":"markdown","57d86741":"markdown","acc71c10":"markdown"},"source":{"3596b8cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07fca88f":"data = pd.read_csv('..\/input\/chess\/games.csv')","83a6cc37":"data","75fcface":"data['winner'].unique()","fcc4ab8f":"data.query(\"winner != 'draw'\")","2f44e4d5":"moves = np.array(data.query(\"winner != 'draw'\")['moves'])","1ab7d8ac":"moves","57ba9586":"labels = np.array(data.query(\"winner != 'draw'\")['winner'].apply(lambda x : 1 if x == 'white' else 0))","7213825c":"moves.shape","a721a9da":"labels.shape","bf10b842":"np.max(data['turns'])","15ddd7f1":"all_moves = set()\n\nfor move_list in moves:\n    for move in move_list.split(\" \"):\n        if move not in all_moves:\n            all_moves.add(move)\n            \nmax_vocab = len(all_moves) ","a5400e47":"max_len = 0\n\nfor move_list in moves:\n    if len(move_list.split(\" \")) > max_len:\n        max_len = len(move_list.split(\" \"))\n        \nprint(\"Max length : \" + str(max_len))","5649b835":"print(max_vocab)\nprint(max_len)","d38e0d50":"tokenizer = Tokenizer(num_words = max_vocab)\ntokenizer.fit_on_texts(moves)\n\nsequences = tokenizer.texts_to_sequences(moves)\n\nword_index = tokenizer.word_index\n\nmodel_inputs = pad_sequences(sequences, maxlen = max_len)","7db86207":"model_inputs.shape","58ce3e11":"labels.shape","0a587cb6":"X_train, x_test, y_train, y_test = train_test_split(model_inputs, labels, train_size = 0.7, random_state = 24)","7953beb8":"embedding_dim = 512\n\ninputs = tf.keras.Input(shape = max_len)\n\nembedding = tf.keras.layers.Embedding(\n    input_dim = max_vocab,\n    output_dim = embedding_dim,\n    input_length = max_len\n)(inputs)\n\ngru = tf.keras.layers.GRU(units = embedding_dim)(embedding)\n\noutputs = tf.keras.layers.Dense(1, activation = 'sigmoid')(gru)\n\nmodel = tf.keras.Model(inputs, outputs)\n\nmodel.compile(\n    optimizer = 'adam',\n    loss = 'binary_crossentropy',\n    metrics = [\n        'accuracy',\n        tf.keras.metrics.AUC(name = 'auc')\n    ]\n)\n\nbatch_size = 32\nepochs = 7\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split = 0.2,\n    batch_size = batch_size,\n    epochs = epochs,\n    callbacks = [\n        tf.keras.callbacks.ReduceLROnPlateau()\n    ]\n)","773b7e91":"fig = px.line(\n    history.history,\n    y = ['loss', 'val_loss'],\n    labels = {'x' : \"Epochs\", 'y' : \"Loss\"},\n    title = \"Loss over time\"\n)\n\nfig.show()","c49e08cc":"fig = px.line(\n    history.history,\n    y = ['auc', 'val_auc'],\n    labels = {'x' : \"Epochs\", 'y' : \"AUC\"},\n    title = \"AUC over time\"\n)\n\nfig.show()","685589bd":"model.evaluate(x_test, y_test)","64df2e14":"## Creating input vectors","c3d6188e":"# Model training","ce7457cc":"# Preprocessing","d8e57de9":"## Length of longest sequence of moves","57d86741":"# Results","acc71c10":"## Finding unique moves in all games"}}