{"cell_type":{"8477acbc":"code","d745c996":"code","135bb22a":"code","e454d4a6":"code","e5b36e4d":"code","78abd687":"code","83de3812":"code","651a5431":"code","f5776937":"code","7641414e":"code","26a0652c":"code","a40c2ee6":"markdown"},"source":{"8477acbc":"# \ud83d\udcccNOTE: \u4e00\u5ea6Run All\u3057\u3066\uff0c\u4e0b\u8a18\u306e\u5024\u3092\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n# \u30c6\u30fc\u30d6\u30eb\u30b3\u30f3\u30da\u306eF1\u6700\u9069\u5316\u7528\u306e\u95be\u5024\nBEST_THRESHOLD = 0.100428\n# nocall\u633f\u5165\u7528\u306e\u95be\u5024\nBEST_NOCALL_THRESHOLD = 0.169353","d745c996":"# !pip install -q --pre --extra-index https:\/\/pypi.anaconda.org\/scipy-wheels-nightly\/simple scikit-learn==1.0.dev0\n# !pip install -q resnest    ","135bb22a":"!pip install ..\/input\/scikit-learn-10dev0\/scikit_learn-1.0.dev0-cp37-cp37m-manylinux2010_x86_64.whl\n# !pip install -q ..\/input\/resnest-v0-0-5\/resnest-0.0.5-py3-none-any.whl\n!pip install -q \"..\/input\/resnest50-fast-package\/resnest-0.0.6b20200701\/resnest\"","e454d4a6":"import warnings\nwarnings.filterwarnings('ignore')","e5b36e4d":"import os\nimport sys\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nsys.path.append(\"..\/input\/birdclef-toolkit-v0530-1930\/lib\")\nimport bird_recognition","78abd687":"print(bird_recognition.evaluation.TARGET_PATH)","83de3812":"# 10\u30d5\u30ec\u30fc\u30e0\u7248\nfilepath_list = [\n    # \"..\/input\/metadata-probability-v0525-2100\/birdclef_resnest50_fold0_epoch_33_f1_val_03859_20210524151554.csv\",\n    \n    # \ud83d\udc51fold: 1\n    \"..\/input\/metadata-probability-v0525-2100\/birdclef_resnest50_fold1_epoch_34_f1_val_04757_20210524185455.csv\",\n    \n    # \"..\/input\/metadata-probability-v0525-2100\/birdclef_resnest50_fold2_epoch_34_f1_val_05027_20210524223209.csv\",\n    # \"..\/input\/metadata-probability-v0525-2100\/birdclef_resnest50_fold3_epoch_20_f1_val_04299_20210525010703.csv\",\n    # \"..\/input\/metadata-probability-v0525-2100\/birdclef_resnest50_fold4_epoch_34_f1_val_05140_20210525074929.csv\"  \n]\nprob_df = pd.concat([pd.read_csv(_) for _ in filepath_list])","651a5431":"# \"..\/input\/bird-probabilities\/train_bird_call_prob_{0,1,2}.csv\" # CV: 0.7764\nclass TrainingConfig:\n    def __init__(self, debug:bool):\n        # MEMO: Config\u306enocall\u306e\u633f\u5165\u6642\u306e\u95be\u5024\u3068\u306f\u9055\u3046\u306e\u3067\u6ce8\u610f\uff01\n        self.nocall_threshold:float=0.5\n        \n        self.debug = debug\n        self.num_kfolds:int = 5\n        self.num_spieces:int = 397\n        self.num_candidates:int = 5\n        self.max_distance:int = 15 # 20\n        self.weight_rate:float = 1.0\n        self.sampling_strategy:float = None # 1.0\n        self.random_state:int=777\n        self.num_prob:int = 6\n        self.min_rating = None # choose from  [1,2,3,4,5, None]\n        self.use_to_birds=True\n        self.use_add_secondlabel=False # True\n        self.xgb_params={\n            \"objective\": \"binary:logistic\",\n            \"tree_method\": 'gpu_hist',\n            \"n_estimators\": 1000,\n        }\n        self.lgb_params = {\n            'objective': 'binary',\n            'metric': 'binary_logloss',\n            'device':'gpu',\n        }\n        self.weights_filepath_dict = {\n            # 'xgb':[f\".\/xgb_{kfold_index}.pkl\" for kfold_index in range(self.num_kfolds)],\n            'lgbm':[f\".\/lgbm_{kfold_index}.pkl\" for kfold_index in range(self.num_kfolds)],\n            # 'cat':[f\".\/cat_{kfold_index}.pkl\" for kfold_index in range(self.num_kfolds)]\n        }\n        \ntraining_config = TrainingConfig(\n    debug=False\n)\nif training_config.debug:\n    prob_df = prob_df.head(1000)","f5776937":"class Config:\n    def __init__(self):\n        self.num_kfolds:int = training_config.num_kfolds\n        self.num_spieces:int = training_config.num_spieces\n        self.num_candidates:int = training_config.num_candidates\n        self.max_distance:int = training_config.max_distance\n        self.nocall_threshold:float = training_config.nocall_threshold\n        self.num_prob:int = training_config.num_prob\n        # \u6700\u9069\u306a\u95be\u5024\u3067\u30d0\u30b5\u30c3\u3068\u5207\u3063\u305f\u5834\u5408\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3059\u308b\u304b\u3069\u3046\u304b\n        self.check_baseline:bool = True\n        # \u305d\u306e\u9ce5\u3067\u826f\u3044\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u6642\u306b\u4f7f\u3046\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u30ea\u30b9\u30c8\n        self.weights_filepath_dict = training_config.weights_filepath_dict\n        # nocall\u633f\u5165\u7528\u306e\u95be\u5024\n        self.nocall_threshold = BEST_NOCALL_THRESHOLD\n        # \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u5404\u9ce5\u306e\u9cf4\u304f\u78ba\u7387\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u306e\u91cd\u307f\n        self.checkpoint_paths = [ \n            Path(\"..\/input\/clefmodel\/birdclef_resnest50_fold0_epoch_27_f1_val_05179_20210520120053.pth\"), # id36\n            Path(\"..\/input\/clefmodel\/birdclef_resnest50_fold0_epoch_13_f1_val_03502_20210522050604.pth\"), # id51\n            Path(\"..\/input\/birdclef-groupby-author-05221040-728258\/birdclef_resnest50_fold0_epoch_33_f1_val_03859_20210524151554.pth\"), # id58\n            Path(\"..\/input\/birdclef-groupby-author-05221040-728258\/birdclef_resnest50_fold1_epoch_34_f1_val_04757_20210524185455.pth\"), # id59\n            Path(\"..\/input\/birdclef-groupby-author-05221040-728258\/birdclef_resnest50_fold2_epoch_34_f1_val_05027_20210524223209.pth\"), # id60\n            Path(\"..\/input\/birdclef-groupby-author-05221040-728258\/birdclef_resnest50_fold3_epoch_20_f1_val_04299_20210525010703.pth\"), # id61\n            Path(\"..\/input\/birdclef-groupby-author-05221040-728258\/birdclef_resnest50_fold4_epoch_34_f1_val_05140_20210525074929.pth\"), # id62\n            Path(\"..\/input\/clefmodel\/resnest50_sr32000_d7_miixup-5.0_2ndlw-0.6_grouped-by-auther\/birdclef_resnest50_fold0_epoch_78_f1_val_03658_20210528221629.pth\"), # id97\n            Path(\"..\/input\/clefmodel\/resnest50_sr32000_d7_miixup-5.0_2ndlw-0.6_grouped-by-auther\/birdclef_resnest50_fold0_epoch_84_f1_val_03689_20210528225810.pth\"), # id97\n            Path(\"..\/input\/clefmodel\/resnest50_sr32000_d7_miixup-5.0_2ndlw-0.6_grouped-by-auther\/birdclef_resnest50_fold1_epoch_27_f1_val_03942_20210529062427.pth\"), # id98\n        ]\n        # \u5019\u88dc\u62bd\u51fa\u306b\u4f7f\u3046\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306e\u5404\u9ce5\u306e\u9cf4\u304f\u78ba\u7387(\u30ad\u30e3\u30c3\u30b7\u30e5)\n        self.pred_filepath_list = [\n            self.get_prob_filepath_from_checkpoint(path) for path in self.checkpoint_paths\n        ]\n        # \u305d\u306e\u9ce5\u3067\u826f\u3044\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u6642\u306e\u6700\u9069\u306a\u95be\u5024\n        self.threshold = BEST_THRESHOLD\n        \n    def get_prob_filepath_from_checkpoint(self, checkpoint_path:Path) -> str:\n        filename = f\"train_soundscape_labels_probabilitiy_%s.csv\" % checkpoint_path.stem\n        return filename\n\nconfig = Config()","7641414e":"%%time\nsubmission_df = bird_recognition.evaluation.run(\n    training_config,\n    config,\n    prob_df,\n    model_dict=config.weights_filepath_dict,\n)","26a0652c":"submission_df.to_csv(\"submission.csv\", index=False)","a40c2ee6":"**## \u5fc5\u8981\u306a\u4f5c\u696d\n\n- \u4e00\u56deRun All\u3067\u5b9f\u884c\u3059\u308b\n- \u6700\u5f8c\u3042\u305f\u308a\u306e\u30bb\u30eb\u306e\u51fa\u529b\u3068\u3057\u3066 `best threshold` \u304c\u751f\u6210\u3055\u308c\u308b\n- \u751f\u6210\u3055\u308c\u305f\u95be\u5024\u3092\u6b21\u306e\u30bb\u30eb\u306e`BEST_THRESHOLD`\u306b\u66f8\u3044\u3066`Save Version`\u3092\u62bc\u3059\n- submission.csv\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067\uff0c\u63d0\u51fa\u3059\u308b"}}