{"cell_type":{"1e198d8a":"code","b4939dad":"code","9c5d2fe8":"code","d5d3112f":"code","5d75271d":"code","29b9f58b":"code","48d5268d":"code","96162fbb":"code","8980fa68":"code","4720f3a7":"code","675b22c9":"code","3c37b208":"code","23afd193":"code","af1c0fd4":"code","65265cb8":"code","7dfd8e43":"code","60aef93f":"code","28e04ac2":"code","3097402f":"code","7a1c611e":"code","386516b7":"code","99d77c0e":"code","ea6cc10f":"code","3b561ac3":"code","9d4bfb66":"code","0484ac7c":"code","37a12434":"code","6dc724e1":"code","cb62680a":"code","fbf850a1":"code","df80246f":"code","e695ec49":"code","8f2fb149":"code","52983554":"code","b6081f4a":"code","d22ce7b8":"code","fd18830f":"code","87d0a625":"code","2a9e9adf":"code","a576a423":"code","deaf9a27":"code","dc96e80f":"code","ecf5eb03":"code","372614fc":"code","0894fb34":"markdown","54d1ef5f":"markdown","3d4c7d45":"markdown","7a6814ba":"markdown","e0b4c861":"markdown","ab86ae04":"markdown","72782a6d":"markdown","ff2a1e72":"markdown","bf46f729":"markdown","ddb42167":"markdown","6e32f36d":"markdown","686552eb":"markdown","f657c697":"markdown","f342d085":"markdown","6e26affe":"markdown","91fbeb64":"markdown","d2bba191":"markdown","f72e13c9":"markdown","96938d27":"markdown","3fc85e9b":"markdown","081f7a65":"markdown","86c79c78":"markdown"},"source":{"1e198d8a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b4939dad":"import numpy as np\nimport pandas as pd\nimport math \nimport matplotlib.pyplot as plt\n\nimport matplotlib.dates as dt\n\nimport tensorflow as tf\nfrom tensorflow.keras import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping, LearningRateScheduler\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, LSTM, Dropout, LeakyReLU\nfrom tensorflow.keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport time\nfrom datetime import datetime, timedelta\n","9c5d2fe8":"df_confirmed = pd.read_csv(\"..\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv\")\ndf_recovered = pd.read_csv(\"..\/input\/ece657aw20asg4coronavirus\/time_series_covid19_recovered_global.csv\")\ndf_deaths = pd.read_csv(\"..\/input\/ece657aw20asg4coronavirus\/time_series_covid19_deaths_global.csv\")\n","d5d3112f":"df_deaths.head()","5d75271d":"def restructure(df):\n    df['Country'] = df['Country\/Region'].map(str) + '_' + df['Province\/State'].map(str)\n    df =  df.drop(['Province\/State', 'Country\/Region' , 'Lat' , 'Long'], axis=1)\n    df = df.set_index('Country')\n    df = df.T\n    df = df.fillna(0)\n    return df","29b9f58b":"# Create dataframes for each category\nconfirmed = restructure(df_confirmed)\nconfirmed.index = pd.to_datetime(confirmed.index)\n\nrecovered = restructure(df_recovered)\nrecovered.index = pd.to_datetime(recovered.index)\n\ndeaths = restructure(df_deaths)\ndeaths.index = pd.to_datetime(deaths.index)\n\n# Create dataframes for the world\nworld_conf = confirmed.sum(axis=1)\nworld_recv = recovered.sum(axis=1)\nworld_dead = deaths.sum(axis=1)","48d5268d":"world_conf.tail()","96162fbb":"# Creating a new dataframe for Countries\nitaly = pd.DataFrame()\nindia = pd.DataFrame()\ngermany = pd.DataFrame()\n\nitaly['Confirmed'] = confirmed['Italy_nan']\nitaly['Recovered'] = recovered['Italy_nan']\nitaly['Deaths'] = deaths['Italy_nan']\n\n\nindia['Confirmed'] = confirmed['India_nan']\nindia['Recovered'] = recovered['India_nan']\nindia['Deaths'] = deaths['India_nan']\n\ngermany['Confirmed'] = confirmed['Germany_nan']\ngermany['Recovered'] = recovered['Germany_nan']\ngermany['Deaths'] = deaths['Germany_nan']\n\n","8980fa68":"# Plots for Italy, India, Germany and The WORLD\nfig = plt.figure(figsize=(18,15))\n\nplt.subplot(2,2,1)\nplt.plot(italy.Confirmed, label='Confirmed Cases')\nplt.plot(italy.Recovered, label='Recovered Cases')\nplt.plot(italy.Deaths, label='Deaths')\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Population Count', fontsize=15)\nplt.title('Statistics of ITALY', fontsize=15)\nplt.legend()\n\nplt.subplot(2,2,2)\nplt.plot(india.Confirmed, label='Confirmed Cases')\nplt.plot(india.Recovered, label='Recovered Cases')\nplt.plot(india.Deaths, label='Deaths')\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Population Count', fontsize=15)\nplt.title('Statistics of INDIA', fontsize=15)\nplt.legend()\n\nplt.subplot(2,2,3)\nplt.plot(germany.Confirmed, label='Confirmed Cases')\nplt.plot(germany.Recovered, label='Recovered Cases')\nplt.plot(germany.Deaths, label='Deaths')\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Population Count', fontsize=15)\nplt.title('Statistics of GERMANY', fontsize=15)\nplt.legend()\n\nplt.subplot(2,2,4)\nplt.plot(world_conf.iloc[:], label='World Confirmed Cases ')\nplt.plot(world_recv.iloc[:], label='World Recovered Cases')\nplt.plot(world_dead.iloc[:], label='World Deaths')\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Population Count', fontsize=15)\nplt.title('Statistics of World', fontsize=15)\nplt.legend()","4720f3a7":"# Plot Global top 10 regions\n\n# fig = plt.figure(figsize=(12,18))\n\nconf_sort = confirmed.reindex(confirmed.max().sort_values(ascending=False).index, axis=1)\nconf_top = conf_sort.iloc[:,0:10]\n\nrec_sort = recovered.reindex(recovered.max().sort_values(ascending=False).index, axis=1)\nrec_top = rec_sort.iloc[:,0:10]\n\ndead_sort = deaths.reindex(deaths.max().sort_values(ascending=False).index, axis=1)\ndead_top = dead_sort.iloc[:,0:10]\n\nconf_top.plot(figsize=(12,5))\nplt.title('Confirmed Cases in most affected areas', fontsize=15)\n\nrec_top.plot(figsize=(12,5))\nplt.title('Recovered Cases in most affected areas', fontsize=15)\n\ndead_top.plot(figsize=(12,5))\nplt.title('Deaths in most affected areas', fontsize=15)","675b22c9":"italy.tail()","3c37b208":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, look_back):\n    dataX = []\n    dataY = []\n    print(len(dataset))\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back)]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back])\n        \n    return np.array(dataX), np.array(dataY)","23afd193":"italy_confirmed = italy.iloc[:,0]\n\nitaly_recovered = italy.iloc[:,1]\n\nitaly_dead = italy.iloc[:,2]","af1c0fd4":"# Split the series for training and testing\nsize = italy_confirmed.shape[0]\ntr =int(round(size*0.8))\nX_train, X_test = italy_confirmed[:tr] , italy_confirmed[tr:]\n\n# Reshape the series for further computations\nX_train = X_train.values.reshape(-1,1)\nX_test = X_test.values.reshape(-1,1)\n\n# Create train and test windows\nlook_back = 6\ntrainX, trainY = create_dataset(X_train, look_back)\ntestX, testY = create_dataset(X_test, look_back)\n\n# reshape input to be [samples, time steps, features] for LSTM\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\n","65265cb8":"# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(30, input_shape=(1, look_back), activation='relu', dropout=0.2))\n\nmodel.add(Dense(1, activation=LeakyReLU(alpha=0.1)))\nmodel.summary()\n\nopt = Adam(lr=0.001, beta_1=0.9, beta_2=0.999 )\n\nmodel.compile(loss='mean_squared_error', optimizer=opt)\n\nstart = time.time()\nmodel.fit(trainX, trainY, epochs=20, batch_size=1, verbose=1)\nend = time.time()\n\nruntime = end-start\nprint('Runtime: ', runtime, 'seconds')","7dfd8e43":"# Make predictions using LSTM Model\ntrainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\n\n# shift train predictions for plotting\nsize = len(italy_confirmed)\n\n# Create NULL arrays\ntrainPredictPlot = np.zeros(size)\ntestPredictPlot = np.zeros(size)\n\nfor i in range(size):\n    trainPredictPlot[i] = np.nan\n    testPredictPlot[i] = np.nan\n\n# Add predicted values to new arrays\n\nfor i in range(len(trainPredict)):\n    trainPredictPlot[look_back + i] = trainPredict[i]\n\nfor i in range(len(testPredict)):\n    testPredictPlot[len(trainPredict)+(look_back*2)+ i : size-1] = testPredict[i]\n\n# Create Dataframes for each and merge everything\ntrainPredictPlot = pd.DataFrame(trainPredictPlot, columns=['Train Predictions'])\ntestPredictPlot = pd.DataFrame(testPredictPlot, columns=['Test Predictions'])\n\nitaly_conf = pd.DataFrame(italy_confirmed.values.astype(\"float\"), columns=['Actual Confirmed'])\nitaly_conf = italy_conf.join(trainPredictPlot)\nitaly_conf = italy_conf.join(testPredictPlot)\nitaly_conf.index = italy_confirmed.index","60aef93f":"dates_range = 15\nitaly_conf_preds= italy_confirmed.copy()\nlength = italy_confirmed.shape[0]\nitaly_conf_preds = italy_conf_preds.reset_index()\n\npreds = np.zeros(dates_range)\ndatelist = pd.date_range(italy.index[-1], periods=31)\n\nfor i in range(dates_range-1):\n    col = italy_conf_preds['Confirmed']\n    value = col[-look_back:]\n    value = value.values.reshape(1, 1, look_back)\n    preds = model.predict(value)\n    df = pd.DataFrame([[datelist[i+1], preds[0,0]]], columns=['index', 'Confirmed'] )\n    italy_conf_preds = italy_conf_preds.append(df, ignore_index=True)\n\nitaly_conf_preds = italy_conf_preds.set_index('index')","28e04ac2":"italy_conf_preds.tail()","3097402f":"# Split the series for training and testing\nsize = italy_recovered.shape[0]\ntr =int(round(size*0.8))\nX_train, X_test = italy_recovered[:tr] , italy_recovered[tr:]\n\n# Reshape the series for further computations\nX_train = X_train.values.reshape(-1,1)\nX_test = X_test.values.reshape(-1,1)\n\n\n# Create Windows\nlook_back = 6\ntrainX, trainY = create_dataset(X_train, look_back)\ntestX, testY = create_dataset(X_test, look_back)\n\n# reshape input to be [samples, time steps, features] for LSTM\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","7a1c611e":"# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(40, input_shape=(1, look_back), activation='relu', dropout=0.2))\n\nmodel.add(Dense(1, activation=LeakyReLU(alpha=0.1)))\nmodel.summary()\n\nopt = Adam(lr=0.001, beta_1=0.9, beta_2=0.999 )\n\nmodel.compile(loss='mean_squared_error', optimizer=opt)\n\nstart = time.time()\nmodel.fit(trainX, trainY, epochs=20, batch_size=1, verbose=1)\nend = time.time()\n\nruntime = end-start\nprint('Runtime: ', runtime, 'seconds')","386516b7":"# Make predictions using LSTM Model\ntrainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\n\n# shift train predictions for plotting\nsize = len(italy_recovered)\n\n# Create NULL arrays\ntrainPredictPlot = np.zeros(size)\ntestPredictPlot = np.zeros(size)\n\nfor i in range(size):\n    trainPredictPlot[i] = np.nan\n    testPredictPlot[i] = np.nan\n\n# Add predicted values to new arrays\n\nfor i in range(len(trainPredict)):\n    trainPredictPlot[look_back + i] = trainPredict[i]\n\nfor i in range(len(testPredict)):\n    testPredictPlot[len(trainPredict)+(look_back*2)+ i : len(italy_recovered)-1] = testPredict[i]\n\n# Create Dataframes for each and merge everything\ntrainPredictPlot = pd.DataFrame(trainPredictPlot, columns=['Train Predictions'])\ntestPredictPlot = pd.DataFrame(testPredictPlot, columns=['Test Predictions'])\n\nitaly_recv = pd.DataFrame(italy_recovered.values.astype(\"float\"), columns=['Actual Confirmed'])\nitaly_recv = italy_recv.join(trainPredictPlot)\nitaly_recv = italy_recv.join(testPredictPlot)\nitaly_recv.index = italy_recovered.index","99d77c0e":"dates_range = 15\nitaly_recv_preds= italy_recovered.copy()\nlength = italy_recovered.shape[0]\nitaly_recv_preds = italy_recv_preds.reset_index()\n\npreds = np.zeros(dates_range)\ndatelist = pd.date_range(italy.index[-1], periods=31)\n\nfor i in range(dates_range-1):\n    col = italy_recv_preds['Recovered']\n    value = col[-look_back:]\n    value = value.values.reshape(1, 1, look_back)\n    preds = model.predict(value)\n    df = pd.DataFrame([[datelist[i+1], preds[0,0]]], columns=['index', 'Recovered'] )\n    italy_recv_preds = italy_recv_preds.append(df, ignore_index=True)\n\nitaly_recv_preds = italy_recv_preds.set_index('index')","ea6cc10f":"italy_recv_preds.tail()","3b561ac3":"# Split the series for training and testing\nsize = italy_dead.shape[0]\ntr =int(round(size*0.8))\nX_train, X_test = italy_dead[:tr] , italy_dead[tr:]\n\n# Reshape the series for further computations\nX_train = X_train.values.reshape(-1,1)\nX_test = X_test.values.reshape(-1,1)\n\n\n# Create windows\nlook_back = 6\ntrainX, trainY = create_dataset(X_train, look_back)\ntestX, testY = create_dataset(X_test, look_back)\n\n# reshape input to be [samples, time steps, features] for LSTM\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","9d4bfb66":"# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(200, input_shape=(1, look_back), activation='relu', dropout=0.2))\n\nmodel.add(Dense(1, activation=LeakyReLU(alpha=0.1)))\nmodel.summary()\n\nopt = Adam(lr=0.001, beta_1=0.9, beta_2=0.999 )\n\nmodel.compile(loss='mean_squared_error', optimizer=opt)\n\nstart = time.time()\nmodel.fit(trainX, trainY, epochs=20, batch_size=1, verbose=1)\nend = time.time()\n\nruntime = end-start\nprint('Runtime: ', runtime, 'seconds')","0484ac7c":"# Make predictions using LSTM Model\ntrainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\n\n# shift train predictions for plotting\nsize = len(italy_dead)\n\n# Create NULL arrays\ntrainPredictPlot = np.zeros(size)\ntestPredictPlot = np.zeros(size)\n\nfor i in range(size):\n    trainPredictPlot[i] = np.nan\n    testPredictPlot[i] = np.nan\n\n# Add predicted values to new arrays\n\nfor i in range(len(trainPredict)):\n    trainPredictPlot[look_back + i] = trainPredict[i]\n\nfor i in range(len(testPredict)):\n    testPredictPlot[len(trainPredict)+(look_back*2)+ i : len(italy_dead)-1] = testPredict[i]\n\n# Create Dataframes for each and merge everything\ntrainPredictPlot = pd.DataFrame(trainPredictPlot, columns=['Train Predictions'])\ntestPredictPlot = pd.DataFrame(testPredictPlot, columns=['Test Predictions'])\n\nitaly_deads = pd.DataFrame(italy_dead.values.astype(\"float\"), columns=['Actual Deaths'])\nitaly_deads = italy_deads.join(trainPredictPlot)\nitaly_deads = italy_deads.join(testPredictPlot)\nitaly_deads.index = italy_dead.index","37a12434":"dates_range = 15\nitaly_dead_preds= italy_dead.copy()\nlength = italy_dead.shape[0]\nitaly_dead_preds = italy_dead_preds.reset_index()\n\npreds = np.zeros(dates_range)\ndatelist = pd.date_range(italy.index[-1], periods=31)\n\nfor i in range(dates_range-1):\n    col = italy_dead_preds['Deaths']\n    value = col[-look_back:]\n    value = value.values.reshape(1, 1, look_back)\n    preds = model.predict(value)\n    df = pd.DataFrame([[datelist[i+1], preds[0,0]]], columns=['index', 'Deaths'] )\n    italy_dead_preds = italy_dead_preds.append(df, ignore_index=True)\n\nitaly_dead_preds = italy_dead_preds.set_index('index')","6dc724e1":"italy_dead_preds.tail()","cb62680a":"# plot Confirmed actual cases and predictions\nfig = plt.figure(figsize=(17,22))\n\nplt.subplot(3,2,1)\nplt.plot(italy_conf.iloc[:,0], label=italy_conf.iloc[:,0].name, marker='o')\nplt.plot(italy_conf.iloc[:,1], label=italy_conf.iloc[:,1].name, marker='s')\nplt.plot(italy_conf.iloc[:,2], label=italy_conf.iloc[:,2].name, marker='v')\nplt.xlabel('Date', fontsize=15)\n# plt.ylabel('Number of Cases', fontsize=15)\nplt.title('For Confirmed Cases in Italy', fontsize=15)\nplt.legend()\n\n\nplt.subplot(3,2,2)\nplt.plot(italy_conf_preds.Confirmed, label='Predicted', marker='*')\nplt.plot(italy_conf.iloc[:,0], label='Actual', marker='o')\nplt.xlabel('Date', fontsize=15)\n# plt.ylabel('Number of Cases', fontsize=15)\nplt.title('Predictions for Confirmed Cases', fontsize=15)\nplt.legend()\n\n# plot Recovered actual cases and predictions\nplt.subplot(3,2,3)\nplt.plot(italy_recv.iloc[:,0], label=italy_recv.iloc[:,0].name, marker='o')\nplt.plot(italy_recv.iloc[:,1], label=italy_recv.iloc[:,1].name, marker='s')\nplt.plot(italy_recv.iloc[:,2], label=italy_recv.iloc[:,2].name, marker='v')\nplt.xlabel('Date', fontsize=15)\n# plt.ylabel('Number of Cases', fontsize=15)\nplt.title('For Recovered Cases in Italy', fontsize=15)\nplt.legend()\n\nplt.subplot(3,2,4)\nplt.plot(italy_recv_preds.Recovered, label='Predictions', marker='*')\nplt.plot(italy_recv.iloc[:,0], label='Actual', marker='o')\nplt.xlabel('Date', fontsize=15)\n# plt.ylabel('Number of Cases', fontsize=15)\nplt.title('Predictions for Recovered Cases', fontsize=15)\nplt.legend()\n\n# plot actual Deaths and predictions\nplt.subplot(3,2,5)\nplt.plot(italy_deads.iloc[:,0], label=italy_deads.iloc[:,0].name, marker='o')\nplt.plot(italy_deads.iloc[:,1], label=italy_deads.iloc[:,1].name, marker='s')\nplt.plot(italy_deads.iloc[:,2], label=italy_deads.iloc[:,2].name, marker='v')\nplt.xlabel('Date', fontsize=15)\n# plt.ylabel('Number of Cases', fontsize=15)\nplt.title('For Death Cases in Italy', fontsize=15)\nplt.legend()\n\nplt.subplot(3,2,6)\nplt.plot(italy_dead_preds.Deaths, label='Predictions', marker='*')\nplt.plot(italy_deads.iloc[:,0], label='Actual', marker='o')\nplt.xlabel('Date', fontsize=15)\nplt.title('Predictions for Deaths', fontsize=15)\nplt.legend()","fbf850a1":"world_confirmed = pd.DataFrame(world_conf)\nworld_confirmed = world_confirmed.rename(columns={0: 'Confirmed'})\n\nworld_recovered = pd.DataFrame(world_recv)\nworld_recovered = world_recovered.rename(columns={0: 'Recovered'})\n\nworld_dead = pd.DataFrame(world_dead)\nworld_dead = world_dead.rename(columns={0: 'Deaths'})\n","df80246f":"world_confirmed.tail()","e695ec49":"# Split the series for training and testing\nsize = world_confirmed.shape[0]\ntr =int(round(size*0.8))\nX_train, X_test = world_confirmed[:tr] , world_confirmed[tr:]\n\n# Reshape the series for further computations\nX_train = X_train.values.reshape(-1,1)\nX_test = X_test.values.reshape(-1,1)\n\n# Create train and test windows\nlook_back = 12\ntrainX, trainY = create_dataset(X_train, look_back)\ntestX, testY = create_dataset(X_test, look_back)\n\n# reshape input to be [samples, time steps, features] for LSTM\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\n","8f2fb149":"# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(30, input_shape=(1, look_back), activation='relu', dropout=0.3))\n\nmodel.add(Dense(1, activation=LeakyReLU(alpha=0.1)))\nmodel.summary()\n\nopt = Adam(lr=0.001, beta_1=0.9, beta_2=0.999 )\n\nmodel.compile(loss='mean_squared_error', optimizer=opt)\n\nstart = time.time()\nmodel.fit(trainX, trainY, epochs=20, batch_size=1, verbose=1)\nend = time.time()\n\nruntime = end-start\nprint('Runtime: ', runtime, 'seconds')","52983554":"dates_range = 20\nworld_conf_preds= world_confirmed.copy()\nlength = world_confirmed.shape[0]\nworld_conf_preds = world_conf_preds.reset_index()\n\npreds = np.zeros(dates_range)\ndatelist = pd.date_range(world_conf.index[-1], periods=dates_range)\n\nfor i in range(dates_range-1):\n    value = world_conf_preds.iloc[:,1][-look_back:]\n    value = value.values.reshape(1, 1, look_back)\n    preds = model.predict(value)\n    df = pd.DataFrame([[datelist[i+1], preds[0,0]]], columns=['index', 'Confirmed'] )\n    world_conf_preds = world_conf_preds.append(df, ignore_index=True)\n\nworld_conf_preds = world_conf_preds.set_index('index')","b6081f4a":"world_conf_preds.tail()","d22ce7b8":"# Split the series for training and testing\nsize = world_recovered.shape[0]\ntr =int(round(size*0.8))\nX_train, X_test = world_recovered[:tr] , world_recovered[tr:]\n\n# Reshape the series for further computations\nX_train = X_train.values.reshape(-1,1)\nX_test = X_test.values.reshape(-1,1)\n\n# Create train and test windows\nlook_back = 12\ntrainX, trainY = create_dataset(X_train, look_back)\ntestX, testY = create_dataset(X_test, look_back)\n\n# reshape input to be [samples, time steps, features] for LSTM\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\n","fd18830f":"# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(40, input_shape=(1, look_back), activation='relu', dropout=0.2))\n\nmodel.add(Dense(1, activation=LeakyReLU(alpha=0.1)))\nmodel.summary()\n\nopt = Adam(lr=0.001, beta_1=0.9, beta_2=0.999 )\n\nmodel.compile(loss='mean_squared_error', optimizer=opt)\n\nstart = time.time()\nmodel.fit(trainX, trainY, epochs=20, batch_size=1, verbose=1)\nend = time.time()\n\nruntime = end-start\nprint('Runtime: ', runtime, 'seconds')","87d0a625":"dates_range = 20\nworld_recv_preds= world_recovered.copy()\nlength = world_recovered.shape[0]\nworld_recv_preds = world_recv_preds.reset_index()\n\npreds = np.zeros(dates_range)\ndatelist = pd.date_range(world_recv.index[-1], periods=dates_range)\n\nfor i in range(dates_range-1):\n    value = world_recv_preds.iloc[:,1][-look_back:]\n    value = value.values.reshape(1, 1, look_back)\n    preds = model.predict(value)\n    df = pd.DataFrame([[datelist[i+1], preds[0,0]]], columns=['index', 'Recovered'] )\n    world_recv_preds = world_recv_preds.append(df, ignore_index=True)\n\nworld_recv_preds = world_recv_preds.set_index('index')","2a9e9adf":"world_recv_preds.tail()","a576a423":"# Split the series for training and testing\nsize = world_dead.shape[0]\ntr =int(round(size*0.8))\nX_train, X_test = world_dead[:tr] , world_dead[tr:]\n\n# Reshape the series for further computations\nX_train = X_train.values.reshape(-1,1)\nX_test = X_test.values.reshape(-1,1)\n\n# Create train and test windows\nlook_back = 7\ntrainX, trainY = create_dataset(X_train, look_back)\ntestX, testY = create_dataset(X_test, look_back)\n\n# reshape input to be [samples, time steps, features] for LSTM\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\n","deaf9a27":"# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(30, input_shape=(1, look_back), activation='relu', dropout=0.2))\n\nmodel.add(Dense(1, activation=LeakyReLU(alpha=0.1)))\nmodel.summary()\n\nopt = Adam(lr=0.001, beta_1=0.9, beta_2=0.999 )\n\nmodel.compile(loss='mean_squared_error', optimizer=opt)\n\nstart = time.time()\nmodel.fit(trainX, trainY, epochs=20, batch_size=1, verbose=1)\nend = time.time()\n\nruntime = end-start\nprint('Runtime: ', runtime, 'seconds')","dc96e80f":"dates_range = 20\nworld_dead_preds= world_dead.copy()\nlength = world_dead.shape[0]\nworld_dead_preds = world_dead_preds.reset_index()\n\npreds = np.zeros(dates_range)\ndatelist = pd.date_range(world_dead.index[-1], periods=dates_range)\n\nfor i in range(dates_range-1):\n    value = world_dead_preds.iloc[:,1][-look_back:]\n    value = value.values.reshape(1, 1, look_back)\n    preds = model.predict(value)\n    df = pd.DataFrame([[datelist[i+1], preds[0,0]]], columns=['index', 'Deaths'] )\n    world_dead_preds = world_dead_preds.append(df, ignore_index=True)\n\nworld_dead_preds = world_dead_preds.set_index('index')","ecf5eb03":"world_dead_preds.tail()","372614fc":"# plot Confirmed actual cases and predictions\nfig = plt.figure(figsize=(12,20))\n\nplt.subplot(3,1,1)\nplt.plot(world_conf_preds['Confirmed'], label='Predictions', marker='*')\nplt.plot(world_confirmed['Confirmed'], label='Actual', marker='o')\nplt.xlabel('Date', fontsize=15)\nplt.ylabel('Cases Count', fontsize=15)\nplt.title('World Confirmed Cases ', fontsize=15)\nplt.legend()\n\n\nplt.subplot(3,1,2)\nplt.plot(world_recv_preds['Recovered'], label='Predictions', marker='*')\nplt.plot(world_recovered['Recovered'], label='Actual', marker='o')\nplt.xlabel('Date', fontsize=15)\nplt.ylabel('Cases Count', fontsize=15)\nplt.title('World Recovered Cases ', fontsize=15)\nplt.legend()\n\nplt.subplot(3,1,3)\nplt.plot(world_dead_preds['Deaths'], label='Predictions', marker='*')\nplt.plot(world_dead['Deaths'], label='Actual', marker='o')\nplt.xlabel('Date', fontsize=15)\nplt.ylabel('Cases Count', fontsize=15)\nplt.title('World Deaths', fontsize=15)\nplt.legend()","0894fb34":"# Load Datasets","54d1ef5f":"Next, we take each dataset for confirmed cases, recovered cases and deaths and convert them into a time-series dataframe","3d4c7d45":"# Plots\n\nWe plot the cases in 3 countries and also plot total worldwide cases","7a6814ba":"# Plots for Italy\n\nWe generate plots for Italy. <br>\nOn the left, we plotted the Trained and tested predictions with the actual values for each category. <br>\n\nOn the right, we plotted the predicted future trends of the virus in Italy along with the actual values. Actual values stop at one point, which is the point until when the data was collected.","e0b4c861":"# Final Thoughts","ab86ae04":"### For Confirmed Cases","72782a6d":"### Future predictions","ff2a1e72":"### Future Predictions","bf46f729":"\n\n\n*   The Final day in the training dataset is April 17, 2020 and the final day for submission of this assignment was April 22, 2020. \n\n*   So,we used this opportunity to compare our model to real world data and draw insightful comparisons.\n\n\n*   The Prediction plots of Italy overestimate the spread of the virus. They predict far more confirmed cases, recovered cases and deaths than in real life.\n\n*   But our model does a good job of estimating the increasing trend that is observed in real life as well.\n\n\n\n*   For the World Predictions, we notice a similar trend that is happening in the world right now.\n\n*   The numbers are continuing to increase, but **let's hope that our model is wrong and this pandemic ends soon!**\n\n\n\n\n\n","ddb42167":"## For Worldwide Recovered Cases","6e32f36d":"### For Deaths","686552eb":"## For Worldwide Confirmed Cases","f657c697":"# Import Libraries","f342d085":"# World\n\nNow we shift our focus to the World demographics that are affected by COVID-19. <br>\n\nWe tune our LSTM model for the world data, generate predictions and plot those predictions against the actual values.<br>\nThese predictions generated try to foresee the next 20 days of disease spread, until April 22, 2020.","6e26affe":"Train the LSTM Model","91fbeb64":"## For Worldwide Deaths","d2bba191":"Now we plot Global Top 10 regions in each category","f72e13c9":"### For Recovered Cases","96938d27":"# Plots for the World","3fc85e9b":"# Italy\n\nHere, we will be training an LSTM Model on our time-series data.\nWe will split our data in each category into train and test. <br>\nThen we will try training our model and plot the predicted train and test values. <br>\nOnce satisfied with the performance, we will use the same model to compute future trends and predict the spread of virus among the population for a set number of days.","081f7a65":"### Future Predictions","86c79c78":"# Data preprocessing\n\nWe drop the unwanted columns which we won't be using for our neural network computations."}}