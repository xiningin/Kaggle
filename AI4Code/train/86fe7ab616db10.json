{"cell_type":{"9639f95c":"code","3578af3e":"code","2987f62b":"code","7e9edd7f":"code","70a0898d":"code","ce24a8e2":"code","a86e26ab":"code","44fb2538":"code","8dafd8cf":"code","33c6158b":"code","1bbf9614":"code","daf68d5c":"code","2015b778":"code","969ea770":"code","20e68b0d":"code","be515db9":"code","89479c77":"code","faa4ee3c":"code","7396ecec":"code","9c8400df":"code","918679f7":"code","6caa5394":"markdown"},"source":{"9639f95c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3578af3e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport missingno as msno\n\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn import svm \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB \nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.model_selection import train_test_split \nfrom sklearn import metrics \nfrom sklearn.metrics import confusion_matrix ","2987f62b":"df=pd.read_csv('..\/input\/water-potability\/water_potability.csv')\ndf.head(5)","7e9edd7f":"df.shape","70a0898d":"dict={}\nfor i in list(df.columns):\n    dict[i]=df[i].value_counts().shape[0]\npd.DataFrame(dict,index=['unique count'])","ce24a8e2":"null={}\nfor i in list(df.columns):\n    null[i]=df[i].isnull().sum()\npd.DataFrame( null,index=['unique count'])","a86e26ab":"df['ph'].fillna(value=df['ph'].median(),inplace=True)\ndf['Sulfate'].fillna(value=df['Sulfate'].median(),inplace=True)\ndf['Trihalomethanes'].fillna(value=df['Trihalomethanes'].median(),inplace=True)","44fb2538":"fig, ax = plt.subplots(5,2,figsize=(20, 15))\n\n\nsns.distplot(df['ph'], bins = 20, kde = True, color='red',ax=ax[0,0])\nax[0,0].set_xlabel(xlabel = 'ph', fontsize = 16)\nax[0,0].set_title(label = 'Histogram for ph', fontsize = 20)\n                          \n                          \nsns.distplot(df['Hardness'], bins = 20, kde = True, color='red',ax=ax[0,1])\nax[0,1].set_xlabel(xlabel = 'Hardness', fontsize = 16)\nax[0,1].set_title(label = 'Histogram for Hardness', fontsize = 20)\n                          \n\nsns.distplot(df['Solids'], bins = 20, kde = True, color='blue',ax=ax[1,0])\nax[1,0].set_xlabel(xlabel = 'Solids', fontsize = 16)\nax[1,0].set_title(label = 'Histogram for Solids', fontsize = 20)\n                          \n\nsns.distplot(df['Chloramines'], bins = 20, kde = True, color='blue',ax=ax[1,1])\nax[1,1].set_xlabel(xlabel = 'Chloramines', fontsize = 16)\nax[1,1].set_title(label = 'Histogram for Chloramines', fontsize = 20)\n                          \n\nsns.distplot(df['Sulfate'], bins = 20, kde = True, color='red',ax=ax[2,0])\nax[2,0].set_xlabel(xlabel = 'Sulfate', fontsize = 16)\nax[2,0].set_title(label = 'Histogram for Sulfate', fontsize = 20)\n                          \n\nsns.distplot(df['Conductivity'], bins = 20, kde = True, color='red',ax=ax[2,1])\nax[2,1].set_xlabel(xlabel = 'Conductivity', fontsize = 16)\nax[2,1].set_title(label = 'Histogram for Conductivity', fontsize = 20)\n\n                          \nsns.distplot(df['Organic_carbon'], bins = 20, kde = True, color='blue',ax=ax[3,0])\nax[3,0].set_xlabel(xlabel = 'Organic_carbon', fontsize = 16)\nax[3,0].set_title(label = 'Histogram for Organic_carbon', fontsize = 20)                          \n                          \nsns.distplot(df['Trihalomethanes'], bins = 20, kde = True, color='blue',ax=ax[3,1])\nax[3,1].set_xlabel(xlabel = 'Trihalomethanes', fontsize = 16)\nax[3,1].set_title(label = 'Histogram for Trihalomethanes', fontsize = 20) \n                        \n\nsns.distplot(df['Turbidity'], bins = 20, kde = True, color='red',ax=ax[4,0])\nax[4,0].set_xlabel(xlabel = 'Turbidity', fontsize = 16)\nax[4,0].set_title(label = 'Histogram for Turbidity', fontsize = 20) \n\n                                                \nfig.delaxes(ax[4,1])                         \nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=2.0)                          \nplt.show()\n\n","8dafd8cf":"corr = df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(10, 10))\n    ax = sns.heatmap(corr,annot=True , mask=mask, vmax=.3, square=True)","33c6158b":"fig, ax = plt.subplots(5,2,figsize=(20, 15))\n\n\nsns.boxplot(df['ph'], color='red',ax=ax[0,0])\nax[0,0].set_xlabel(xlabel = 'ph', fontsize = 16)\nax[0,0].set_title(label = 'boxplot for ph', fontsize = 20)\n                          \n                          \nsns.boxplot(df['Hardness'], color='red',ax=ax[0,1])\nax[0,1].set_xlabel(xlabel = 'Hardness', fontsize = 16)\nax[0,1].set_title(label = 'boxplot for Hardness', fontsize = 20)\n                          \n\nsns.boxplot(df['Solids'],color='blue',ax=ax[1,0])\nax[1,0].set_xlabel(xlabel = 'Solids', fontsize = 16)\nax[1,0].set_title(label = 'boxplot for Solids', fontsize = 20)\n                          \n\nsns.boxplot(df['Chloramines'],color='blue',ax=ax[1,1])\nax[1,1].set_xlabel(xlabel = 'Chloramines', fontsize = 16)\nax[1,1].set_title(label = 'boxplot for Chloramines', fontsize = 20)\n                          \n\nsns.boxplot(df['Sulfate'],color='red',ax=ax[2,0])\nax[2,0].set_xlabel(xlabel = 'Sulfate', fontsize = 16)\nax[2,0].set_title(label = 'boxplot for Sulfate', fontsize = 20)\n                          \n\nsns.boxplot(df['Conductivity'], color='red',ax=ax[2,1])\nax[2,1].set_xlabel(xlabel = 'Conductivity', fontsize = 16)\nax[2,1].set_title(label = 'boxplot for Conductivity', fontsize = 20)\n\n                          \nsns.boxplot(df['Organic_carbon'], color='blue',ax=ax[3,0])\nax[3,0].set_xlabel(xlabel = 'Organic_carbon', fontsize = 16)\nax[3,0].set_title(label = 'boxplot for Organic_carbon', fontsize = 20)                          \n                          \nsns.boxplot(df['Trihalomethanes'], color='blue',ax=ax[3,1])\nax[3,1].set_xlabel(xlabel = 'Trihalomethanes', fontsize = 16)\nax[3,1].set_title(label = 'boxplot for Trihalomethanes', fontsize = 20) \n                        \n\nsns.boxplot(df['Turbidity'], color='red',ax=ax[4,0])\nax[4,0].set_xlabel(xlabel = 'Turbidity', fontsize = 16)\nax[4,0].set_title(label = 'boxplot for Turbidity', fontsize = 20) \n\n                                                \nfig.delaxes(ax[4,1])                         \nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=2.0)                          \nplt.show()\n","1bbf9614":"num=['ph','Hardness','Solids','Chloramines','Sulfate','Conductivity','Organic_carbon','Trihalomethanes','Trihalomethanes','Turbidity']\nfor i in df[num]:\n    q1 = df[i].quantile(0.25)\n    q3 = df[i].quantile(0.75)\n    iqr = q3-q1\n    Lower_tail = q1 - 1.5 * iqr\n    Upper_tail = q3 + 1.5 * iqr\n    med = np.median(df[i])\n    for j in df[i]:\n        if j > Upper_tail or j < Lower_tail:\n            df[i] = df[i].replace(j, med)","daf68d5c":"df.head(2)","2015b778":"x=df.drop(['Potability'],axis=1)\ny=df['Potability']","969ea770":"train_X, test_X, train_Y, test_Y = train_test_split(x, y, test_size=0.2, random_state=88)","20e68b0d":"#rbf-SVM\nmodel=svm.SVC(kernel='rbf',C=1,gamma=0.1)\nmodel.fit(train_X,train_Y)\nprediction1=model.predict(test_X)\nprint('Accuracy for rbf SVM is ',metrics.accuracy_score(prediction1,test_Y))\nsns.heatmap(confusion_matrix(test_Y,prediction1),annot=True,fmt='2.0f')","be515db9":"#linear-SVM\nmodel=svm.SVC(kernel='linear',C=0.1,gamma=0.1)\nmodel.fit(train_X,train_Y)\nprediction2=model.predict(test_X)\nprint('Accuracy for linear SVM is',metrics.accuracy_score(prediction2,test_Y))\nsns.heatmap(confusion_matrix(test_Y,prediction2),annot=True,fmt='2.0f')","89479c77":"#Logistic Regression\nmodel = LogisticRegression()\nmodel.fit(train_X,train_Y)\nprediction3=model.predict(test_X)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(prediction3,test_Y))\nsns.heatmap(confusion_matrix(test_Y,prediction3),annot=True,fmt='2.0f')","faa4ee3c":"#Decision Tree Classifier\nmodel=DecisionTreeClassifier()\nmodel.fit(train_X,train_Y)\nprediction4=model.predict(test_X)\nprint('The accuracy of the Decision Tree is',metrics.accuracy_score(prediction4,test_Y))\nsns.heatmap(confusion_matrix(test_Y,prediction4),annot=True,fmt='2.0f')","7396ecec":"#KNeighbors Classifier\nmodel=KNeighborsClassifier() \nmodel.fit(train_X,train_Y)\nprediction5=model.predict(test_X)\nprint('The accuracy of the KNN is',metrics.accuracy_score(prediction5,test_Y))\nsns.heatmap(confusion_matrix(test_Y,prediction5),annot=True,fmt='2.0f')","9c8400df":"a_index=list(range(1,11))\na=pd.Series()\nx=[0,1,2,3,4,5,6,7,8,9,10]\nfor i in list(range(1,11)):\n    model=KNeighborsClassifier(n_neighbors=i) \n    model.fit(train_X,train_Y)\n    prediction=model.predict(test_X)\n    a=a.append(pd.Series(metrics.accuracy_score(prediction,test_Y)))\nplt.plot(a_index, a)\nplt.xticks(x)\nplt.show()\nprint('Accuracies for different values of n are:',a.values,'with the max value as ',a.values.max())","918679f7":"#Random Forest Classifier\nmodel=RandomForestClassifier(n_estimators=100)\nmodel.fit(train_X,train_Y)\nprediction7=model.predict(test_X)\nprint('The accuracy of the Random Forests is',metrics.accuracy_score(prediction7,test_Y))\nsns.heatmap(confusion_matrix(test_Y,prediction7),annot=True,fmt='2.0f')","6caa5394":"ph: pH of 1. water (0 to 14).\n\nHardness: Capacity of water to precipitate soap in mg\/L.\n\nSolids: Total dissolved solids in ppm.\n\nChloramines: Amount of Chloramines in ppm.\n\nSulfate: Amount of Sulfates dissolved in mg\/L.\n\nConductivity: Electrical conductivity of water in \u03bcS\/cm.\n\nOrganic_carbon: Amount of organic carbon in ppm.\n\nTrihalomethanes: Amount of Trihalomethanes in \u03bcg\/L.\n\nTurbidity: Measure of light emiting property of water in NTU.\n\nPotability: Indicates if water is safe for human consumption. Potable - 1 and Not potable - 0"}}