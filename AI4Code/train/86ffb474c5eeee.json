{"cell_type":{"6e04bdcf":"code","b26c7fc9":"code","eefbfccd":"code","bfd0f911":"code","24a5122b":"code","2c4b897e":"code","08ad1e0a":"code","d543ab7c":"code","79efbf91":"code","411db925":"code","d6ab00da":"code","297a87b2":"code","bdf02923":"code","3271a32a":"code","87a24c0c":"code","cf7a5537":"code","e090377a":"code","f41c0b5f":"code","ec671a30":"markdown","40f423ac":"markdown","e6ab00ec":"markdown","6bd50374":"markdown","457aa008":"markdown","8c990ac4":"markdown","3e36c26c":"markdown"},"source":{"6e04bdcf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b26c7fc9":"# importing libraries\n\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","eefbfccd":"# loading the Dataset\n\ncardiodata = pd.read_csv('\/kaggle\/input\/cardiogoodfitness\/CardioGoodFitness.csv')","bfd0f911":"cardiodata.head()","24a5122b":" cardiodata.describe(include='all')","2c4b897e":"cardiodata.info()","08ad1e0a":"cardiodata.hist(figsize=(20,20))","d543ab7c":"sns.boxenplot(x='Gender', y = 'Age', data = cardiodata)","79efbf91":"sns.countplot(x='Product', hue = 'Gender', data = cardiodata)","411db925":"sns.pairplot(cardiodata)","d6ab00da":"corr = cardiodata.corr()\ncorr","297a87b2":"sns.heatmap(corr,annot= True)","bdf02923":"# loading model from sklearn library\n\nfrom sklearn import linear_model","3271a32a":"# creating linear regression parameters \n\nregr = linear_model.LinearRegression()\n\ny = cardiodata['Miles']\nx = cardiodata[['Usage','Fitness']]\n","87a24c0c":"# training the model\n\nregr.fit(x,y)","cf7a5537":"# regression coeficient \n\nregr.coef_","e090377a":"# regression intercept\n\nregr.intercept_","f41c0b5f":"# Miles Predicted = -56.74 + 20.21*Usage + 27.20*Fitness","ec671a30":"## Corelation Heat Map\n\n### Seaborn heatmaps are appealing to the eyes, and they tend to send clear messages about data almost immediately. This is why this method for correlation matrix visualization is widely used by data analysts and data scientists alike.","40f423ac":"# Cardio Good Fitness Case Study - Simple Linear Regression\n\n### The market research team at AdRight is assigned the task to identify the profile of the typical customer for each treadmill product offered by CardioGood Fitness. The market research team decides to investigate whether there are differences across the product lines with respect to customer characteristics. The team decides to collect data on individuals who purchased a treadmill at a CardioGoodFitness retail store during the prior three months. The data are stored in the CardioGoodFitness.csv file.\n\n## The team identifies the following customer variables to study:\n\n* product purchased, TM195, TM498, or TM798\n* gender;\n* age, in years;\n* education, in years;\n* relationship status, single or partnered;\n* annual household income ;\n* average number of times the customer plans to use the treadmill each week;\n* average number of miles the customer expects to walk\/run each week;\n* and self-rated fitness on an 1-to-5 scale, where 1 is poor shape and 5 is excellent shape.","e6ab00ec":"# Simple Linear Regression","6bd50374":"## Boxplots\n\n### This kind of plot shows the three quartile values of the distribution along with extreme values. The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently. Importantly, this means that each value in the boxplot corresponds to an actual observation in the data:","457aa008":"## Histograms\n\n### Histograms are likely familiar, and a hist function already exists in matplotlib. A histogram represents the distribution of data by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin.","8c990ac4":"## Visualizing pairwise relationships in a dataset\n\n### To plot multiple pairwise bivariate distributions in a dataset, you can use the pairplot() function. This creates a matrix of axes and shows the relationship for each pair of columns in a DataFrame. by default, it also draws the univariate distribution of each variable on the diagonal Axes:","3e36c26c":"## Count Plot\n\n### A special case for the bar plot is when you want to show the number of observations in each category rather than computing a statistic for a second variable. This is similar to a histogram over a categorical, rather than quantitative, variable. In seaborn, it\u2019s easy to do so with the countplot() function:"}}