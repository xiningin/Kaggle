{"cell_type":{"ec876531":"code","1943fbba":"code","9982d15d":"code","01558076":"code","6b11a6a6":"code","4b2c9f38":"code","85448aa7":"code","b7014f03":"code","f4e67ce6":"code","30934d84":"code","2207baf7":"code","e744598f":"code","ec760d60":"code","aff2ad98":"code","89f0fd76":"code","6e22eb8d":"code","063267ff":"code","90e5ef79":"code","48a7a4e5":"code","e4fbfe64":"code","00da5f28":"code","0ac0e24c":"code","4c107ce9":"code","db2fbb04":"code","d3b34967":"code","fa25649f":"code","1a55333d":"code","55ad8f44":"code","19f96dca":"code","fb10ec70":"code","f0704f59":"code","4c366217":"code","baf7fe4d":"code","76cb2c95":"code","b6a24a2a":"code","bd97f7a3":"code","2b0689c1":"code","6ffa7b07":"code","d4d81631":"code","92bad997":"code","429b012e":"markdown","3c345c82":"markdown","3983421d":"markdown","0b5a281e":"markdown","7184d856":"markdown","74b11c8a":"markdown","36edabf3":"markdown","1c632ff6":"markdown","fdd072b7":"markdown","6a20e52e":"markdown","1a932ca8":"markdown","a4400adf":"markdown","7d288c4d":"markdown","08106937":"markdown","c3f8b5a1":"markdown","9340d743":"markdown","371b7f0c":"markdown","968e5a50":"markdown"},"source":{"ec876531":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.set_printoptions(precision=4)\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score , confusion_matrix\nfrom sklearn.inspection import permutation_importance\nimport warnings\nwarnings.filterwarnings('ignore')","1943fbba":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf.head(5)","9982d15d":"df[['gender','id']].groupby(['gender']).count()","01558076":"df = df[df['gender']!='Other']\ndf.head(5)","6b11a6a6":"df.isnull().sum()","4b2c9f38":"mean_bmi_has_stroke = df[df['stroke']==1]['bmi'].mean()\nmean_bmi_has_stroke","85448aa7":"mean_bmi_no_stroke = df[df['stroke']==0]['bmi'].mean()\nmean_bmi_no_stroke","b7014f03":"df.loc[df['stroke']==1,'bmi'] = df.loc[df['stroke']==1, 'bmi'].fillna(mean_bmi_has_stroke)\ndf.loc[df['stroke']==0,'bmi'] = df.loc[df['stroke']==0, 'bmi'].fillna(mean_bmi_no_stroke)","f4e67ce6":"df","30934d84":"df[['stroke','id']].groupby(['stroke']).count().reset_index()","2207baf7":"df_all = df.copy()\n\ndf_stroke = df[df['stroke']==1]\n\ndf_non = df[df['stroke']==0]","e744598f":"def plot_pie(column, title=\"All\"):\n    fig,axs = plt.subplots(1,1)\n    data = df_all[column].value_counts()\n    plt.pie(data,autopct='%1.2f%%',labels=data.index)\n    plt.title(title)\n    plt.show()\n    \ndef plot_hist(column, title=\"all\"):\n    plt.hist(df_all[column],density=True)\n    plt.title(title)\n    plt.show()\n\ndef plot_bar(column, sort=False, title=\"all\"):\n    if sort:\n        data_all = df_all[column].value_counts().sort_index()\n    else:\n        data_all = df_all[column].value_counts()\n    plt.bar(data_all.index,data_all)\n    plt.title(title)\n    plt.show()\n    \ndef plot_bar_compare(column, sort=False):\n    if sort:\n        data_churned = df_stroke[column].value_counts().sort_index()\n        data_nonchurned = df_non[column].value_counts().sort_index()\n    else:\n        data_churned = df_stroke[column].value_counts()\n        data_nonchurned = df_non[column].value_counts()\n    \n    fig,axs = plt.subplots(2,1)\n    plt.subplots_adjust(left=0, bottom=0, right=1, top=2, wspace=0, hspace=0.2)\n    axs[0].bar(data_nonchurned.index,data_nonchurned)\n    axs[0].title.set_text('No Stroke')\n    axs[1].bar(data_churned.index,data_churned)\n    axs[1].title.set_text('Has Stroke')\n    plt.show()\n\ndef plot_hist_compare(column, bins=5):\n    plt.hist([df_non[column], df_stroke[column]] , color=['c','r'])\n    plt.legend(('No Stroke', 'Has Stroke'))\n    plt.show()\n    \ndef plot_pie_compare(column):\n    data_churned = df_stroke[column].value_counts()\n    data_nonchurned = df_non[column].value_counts()\n    \n    fig,axs = plt.subplots(2,1)\n    plt.subplots_adjust(left=0, bottom=0, right=1, top=2, wspace=0, hspace=0.2)\n    axs[0].pie(data_nonchurned,autopct='%1.2f%%',labels=data_nonchurned.index)\n    axs[0].title.set_text('No Stroke')\n    axs[1].pie(data_churned,autopct='%1.2f%%',labels=data_churned.index)\n    axs[1].title.set_text('Has Stroke')\n    plt.show()\n\ndef plot_boxplot(column, title=\"\"):\n    sns.boxplot(x=\"stroke\", y=column, palette=[\"c\", \"r\"],\n            hue=\"stroke\",  data=df_all).set_title(title, fontsize=15)\n\ndef check_median(column):\n    data_churned = df_stroke[column].describe()\n    data_nonchurned = df_non[column].describe()\n    print('No Stroke: {}'.format(data_nonchurned['50%']))\n    print('Has Stroke: {}'.format(data_churned['50%']))\n\ndef check_most(column):\n    data_churned = df_stroke[column].value_counts()\n    data_nonchurned = df_non[column].value_counts()\n    print('No Stroke: {}'.format(data_nonchurned.index[0]))\n    print('Has Stroke: {}'.format(data_churned.index[0]))","ec760d60":"plot_pie('stroke')","aff2ad98":"plot_pie('gender')\nplot_pie_compare('gender')","89f0fd76":"plot_hist('age')\nplot_hist_compare('age')","6e22eb8d":"check_median('age')","063267ff":"plot_pie('hypertension')\nplot_pie_compare('hypertension')","90e5ef79":"check_most('hypertension')","48a7a4e5":"plot_pie('heart_disease')\nplot_pie_compare('heart_disease')","e4fbfe64":"plot_pie('ever_married')\nplot_pie_compare('ever_married')","00da5f28":"check_most('ever_married')","0ac0e24c":"plot_pie('work_type')\nplot_pie_compare('work_type')","4c107ce9":"plot_pie('Residence_type')\nplot_pie_compare('Residence_type')","db2fbb04":"plot_hist('avg_glucose_level')\nplot_hist_compare('avg_glucose_level')","d3b34967":"plot_boxplot('avg_glucose_level')","fa25649f":"check_median('avg_glucose_level')","1a55333d":"plot_hist('bmi')\nplot_hist_compare('bmi')","55ad8f44":"plot_boxplot('bmi')","19f96dca":"check_median('bmi')","fb10ec70":"plot_pie('smoking_status')\nplot_pie_compare('smoking_status')","f0704f59":"X = df.copy()\n\ny = X['stroke']\n\n#Drop the Attrition_Flag Column\nX = X.drop(['stroke','gender','Residence_type','work_type','ever_married','smoking_status','bmi','avg_glucose_level','heart_disease','hypertension','id'], axis=1)","4c366217":"# transform categorical data\n#X = pd.get_dummies(X, columns=['smoking_status'])","baf7fe4d":"X.columns","76cb2c95":"#X = X.drop(columns=['smoking_status_smokes'])","b6a24a2a":"X.columns","bd97f7a3":"#Split to data train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1234)","2b0689c1":"from imblearn.over_sampling import SMOTE\n\nsm = SMOTE(random_state=1234)\n\nX_smote, y_smote = sm.fit_resample(X_train, y_train)\n\nprint(f'''Shape of X before SMOTE: {X.shape}\nShape of X after SMOTE: {X_smote.shape}''')\n\nprint('\\nBalance of positive and negative classes (%):')\ny_smote.value_counts(normalize=True) * 100","6ffa7b07":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n\nX_smote = sc.fit_transform(X_smote)\nX_test = sc.transform(X_test)","d4d81631":"# Import ML Libraries\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [[CatBoostClassifier(verbose=0),'CatBoost Classifier'],[XGBClassifier(),'XGB Classifier'], [RandomForestClassifier(),'Random Forest'], \n    [KNeighborsClassifier(), 'K-Nearest Neighbours'], [SGDClassifier(),'SGD Classifier'], [SVC(),'SVC'],[LGBMClassifier(),'LGBM Classifier'],\n              [GaussianNB(),'GaussianNB'],[DecisionTreeClassifier(),'Decision Tree Classifier'],[LogisticRegression(),'Logistic Regression']]","92bad997":"for cls in classifiers:\n    model = cls[0]\n    model.fit(X_smote, y_smote)\n    \n    y_pred = model.predict(X_test)\n    print(cls[1])\n    print ('Confusion Matrix:')\n    print(confusion_matrix(y_test, y_pred))\n    print(\"Accuracy : \", accuracy_score(y_test, y_pred) *  100)\n    print(\"Recall : \", recall_score(y_test, y_pred) *  100)\n    print(\"Precision : \", precision_score(y_test, y_pred) *  100)","429b012e":"# bmi","3c345c82":"# Stroke","3983421d":"# smoking_status","0b5a281e":"# Feature Scalling","7184d856":"# heart_disease","74b11c8a":"# work_type","36edabf3":"### Data Visualization Result\n\n| | No Stroke| Has Stroke | Note\n| :- | :-: | :-: | :-: |\n| gender (Most) | Female | Female | No Clear Difference\n| age (Median) | 43 | 71 | the median age of stroke patients is higher than patient with no stroke\n| hypertension (Most) | 0 | 0 | the patient who has hypertension from stroke patient is 18 % higher than the patient with no stroke\n| heart_disease (Most) | 0 | 0 | the patient who has heart disease from stroke patient is 14 % higher than the patient with no stroke\n| ever_married (Most) | Yes | Yes | the patient who ever married from stroke patient is 24 % higher than the patient with no stroke\n| work_type (Most) | Private | Private | the patient who work as self-employed from stroke patient is 11.4% higher than the patient with no stroke\n| Residence_type (Most) | Urban | Urban | No Clear Difference\n| avg_glucose_level (Median) | 91.5 | 105.2 | the median of avg_glucose_level from Stroke Patient is higher than the Patient with no Stroke\n| bmi (Median) | 28.3 | 30.5 | the median of bmi from Stroke Patient is little higher than the Patient with no Stroke\n| smoking_status (Most) | never smoked | never smoked | The patient who smokes or formerly smoked from is 13% higher than the patient with no stroke","1c632ff6":"# Gender","fdd072b7":"# Residence_type","6a20e52e":"# Data Preprocessing","1a932ca8":"Need your advice guys.\n\nThank you.","a4400adf":"# Age","7d288c4d":"# hypertension","08106937":"# Result\n\nThe Best Algotrithms to predict stroke are SVC and GaussianNB with Recall score 88.6% and Accuracy score 67.12%","c3f8b5a1":"# Split data to train data and test data","9340d743":"# avg_glucose_level","371b7f0c":"# Balancing Data","968e5a50":"# ever_married"}}