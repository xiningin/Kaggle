{"cell_type":{"ec4bb6b4":"code","cd4314c2":"code","f8d0c8b2":"code","9cc7fc55":"code","2ee050dd":"code","7f943734":"code","5c5245f6":"code","fe70736f":"code","c7a05096":"code","fbd03235":"code","3ed81eeb":"code","78fa5c9a":"markdown","107d8a3e":"markdown","737e91e7":"markdown"},"source":{"ec4bb6b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cd4314c2":"sns.set(style= 'darkgrid')\nplayer_df = pd.read_csv('..\/input\/data.csv')\nnumcols = ['Overall', 'Potential', 'Crossing', 'Finishing', 'ShortPassing', 'Dribbling', 'LongPassing', \n          'BallControl', 'Acceleration', 'SprintSpeed', 'Agility',  'Stamina','Value','Wage']\ncatcols = ['Name','Club','Nationality','Preferred Foot','Position','Body Type']\nplayer_df = player_df[numcols + catcols]\nplayer_df.head(5)\n","f8d0c8b2":"def wage_split(x):\n    return int(x.split('K')[0][1:])\ndef value_split(x):\n    if 'M' in x:\n        return float(x.split('M')[0][1:])\n    elif 'K' in x:\n        return float(x.split('K')[0][1:])\/1000\n    ","9cc7fc55":"player_df['Wage'] = player_df['Wage'].apply(lambda x: wage_split(x))\nplayer_df['Value'] = player_df['Value'].apply(lambda x: value_split(x))","2ee050dd":"correlation = player_df.corr()\np = sns.heatmap(correlation, vmax= 0.5, center= 0, square=True, linewidths= 0.3, annot= True, fmt = '.2f')\nsns.despine()\np.figure.set_size_inches(14, 10)\nplt.show()","7f943734":"sns.set(style= 'ticks')\nfiltered_player_df = player_df[(player_df['Club'].isin(['FC Barcelona', 'Chelsea', 'Manchester United', 'Manchester City', \n                                                       'Paris Saint-Germain', 'Real Madrid', 'FC Bayern M\u00fcnchen', 'FC Porto']))\n                              & (player_df['Nationality'].isin(['Brazil', 'Germany', 'Italy', 'England', 'Spain','Argentina']))\n                              ]\ndf_plot = filtered_player_df.groupby(['Club', 'Nationality']).size().reset_index().pivot(columns='Club', index='Nationality', values=0).reset_index()\np = df_plot.set_index('Nationality').T.plot(kind='bar', stacked=True)\nsns.despine()\np.figure.set_size_inches(14,8)\n    \nplt.show()\n","5c5245f6":"filtered_player_df = player_df[(player_df['Club'].isin(['FC Barcelona', 'Chelsea', 'Manchester United', 'Manchester City', \n                                                       'Paris Saint-Germain', 'Real Madrid', 'FC Bayern M\u00fcnchen', 'FC Porto']))\n                              & (player_df['Nationality'].isin(['Brazil', 'Germany', 'Italy', 'England', 'Spain','Argentina']))\n                              ]\np = sns.pairplot(filtered_player_df[['Value', 'SprintSpeed', 'Potential', 'Wage']])","fe70736f":"p = sns.pairplot(filtered_player_df[['Value', 'SprintSpeed', 'Potential', 'Wage', 'Club']], hue= 'Club')","c7a05096":"p = sns.swarmplot(y = 'Club', x = 'Wage', data = filtered_player_df, size = 7)\nsns.despine()\np.figure.set_size_inches(14,10)\nplt.show()","fbd03235":"g = sns.boxplot(y = \"Club\",\n              x = 'Wage', \n              data = filtered_player_df, whis=np.inf)\ng = sns.swarmplot(y = \"Club\",\n              x = 'Wage', \n              data = filtered_player_df,\n              # Decrease the size of the points to avoid crowding \n              size = 7,color = 'black')\n# remove the top and right line in graph\nsns.despine()\ng.figure.set_size_inches(12,8)\nplt.show()","3ed81eeb":"max_wage = filtered_player_df.Wage.max()\nmax_wage_player = filtered_player_df[(player_df['Wage'] == max_wage)]['Name'].values[0]\ng = sns.boxplot(y = \"Club\",\n              x = 'Wage', \n              data = filtered_player_df, whis=np.inf)\ng = sns.swarmplot(y = \"Club\",\n              x = 'Wage', \n              data = filtered_player_df,\n              size = 7,color='black')\nsns.despine()\nplt.annotate(s = max_wage_player,\n             xy = (max_wage,0),\n             xytext = (500,1), \n             # Shrink the arrow to avoid occlusion\n             arrowprops = {'facecolor':'gray', 'width': 3, 'shrink': 0.03},\n             backgroundcolor = 'white')\ng.figure.set_size_inches(12,8)\nplt.show()","78fa5c9a":"# Correlation Plot","107d8a3e":"# SwarmPlots","737e91e7":"# Pairplots"}}