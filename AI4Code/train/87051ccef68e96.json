{"cell_type":{"53b471da":"code","9b0c5146":"code","f2557bae":"code","bf974dd4":"code","49506484":"code","9c8abd0a":"code","73d1d1f5":"code","75e6fe5e":"code","57d4db55":"code","3dc4821f":"code","250317b9":"code","dd1bec18":"code","d6f717da":"code","bdc9871c":"code","b4c9df61":"code","b84a1f9d":"code","87f9dedb":"code","0d763b87":"code","96ac1c49":"code","b05c2ade":"code","b52fdb32":"code","4132243a":"code","c8e4bbbc":"code","b1d76478":"code","55be4b59":"code","87f0f287":"code","8673e2ec":"code","e1a71358":"code","ca026092":"code","480ea06f":"code","2e568c00":"code","b92506e2":"code","508fc316":"code","7034aa3a":"code","67b51d0d":"code","de597b87":"code","acff54f3":"code","24736fb6":"code","2a623c1f":"code","e1d17bf0":"code","38740be4":"code","6e83c23d":"code","abc70e0b":"code","62812db2":"code","81744568":"code","106dbf6d":"code","9a449484":"code","d67a937d":"code","64289203":"markdown"},"source":{"53b471da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b0c5146":"import warnings\nwarnings.filterwarnings('ignore')","f2557bae":"# 1. Create an empty array\n\nempty_array = np.empty([2, 2], int)\n\nprint(empty_array)\n\nprint(empty_array.shape)\n\nprint(empty_array.size)","bf974dd4":"# 2. Check whether the array is empty\n\na = np.array([])\nb = np.array([1, 2])\n\ndef check_empty(a):\n    if a.size == 0:\n        print(a, ' : Empty')\n    else:\n        print(b, ' : Non Empty')\n        \ncheck_empty(a)\ncheck_empty(b)","49506484":"# 3. Check elements count\n\nc = np.array([])\nd = np.array([1, 2])\n\ndef get_elements(c_array):\n    return c_array.ndim and c_array.size\n        \nprint(c, ', elements_count : ', get_elements(c))\nprint(d, ', elements_count : ', get_elements(d))","9c8abd0a":"# 4. Arrange numpy between numbers\n\na = np.arange(4, 12)\n\nprint(a)\nprint(a, '.shape : ', a.shape)","73d1d1f5":"# 5. Arrange numpy between numbers with intervals\n\nc = np.arange(12, 30, 3)\n\nprint(c)\nprint(c, '.shape : ', c.shape)","75e6fe5e":"# 6. Array reshape\n\nc = np.arange(12, 30, 3)\nd = c.reshape(2, 3)\n\nprint(c)\nprint(c, '.shape : ', c.shape)\nprint('\\nAfter reshaping : ')\nprint(d)\nprint(d, '.shape : ', d.shape)","57d4db55":"# 7. Create a numpy with random integers\n\na = np.random.randint(10, size = 5)\n\nprint(a)","3dc4821f":"# 8. Create a numpy with random integers and size\n\na = np.random.randint(10, size = (2, 3))\n\nprint(a)\nprint(a, '.shape : ', a.shape)\nprint('datatype : ', a.dtype)","250317b9":"# 9. Array of strings\n\na = np.array(('Toronto','Montreal','New York'))\nprint(a)\nprint(a.dtype)","dd1bec18":"# 10. Numpy array with strings and explicit dtype\n\nx = np.array(['Toronto', 'Montreal'], dtype=str)\n\nprint(x)\nprint(x.dtype)","d6f717da":"# 10. Numpy array with strings and explicit dtype\n\nx = np.array(['To'], dtype=str)\ny = x.view('S1').reshape(x.size, -1)\n\nprint(y)","bdc9871c":"# 19. Numpy view\n\nx = np.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])\nprint(x)\nprint(x.dtype)\n\ny = x.view(dtype=np.int16, type=np.matrix)\nprint(y)\nprint(y.dtype)","b4c9df61":"# 20. Using Flipud\n\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport matplotlib.image as mp_img\n\nimage_a = mp_img.imread('\/kaggle\/input\/numpy-cheatsheet\/cn_tower.jpg')\n\nimage_b = np.flipud(image_a)\nplt.imshow(image_b)\n\n# plt.savefig(\"\/kaggle\/input\/numpy-cheatsheet\/cn_tower_ver.jpg\", dpi=200)\nplt.show()","b84a1f9d":"# 21. Numpy inverse\n\nb = np.array([[2,3],[4,5]])\nprint('Before Inverse : ')\nprint(b)\n\nc = np.linalg.inv(b)\nprint('After Inverse : ')\nprint(c)","87f9dedb":"# 22. Numpy Inverse\n\nx = np.matrix([[10, 20], [60, 70]])\nprint('Before Inverse : ')\nprint(x)\n\nprint('After Inverse : ')\nprint(x.I)","0d763b87":"# 22. Trying to inverse a singular matrix\n\nb = np.array([[2,3],[4,6]])\n\ntry:\n    np.linalg.inv(b)\nexcept Exception as err:\n    print('Error : ', err)\n    \n# Note: Singular Matrix can't be inversed","96ac1c49":"# 23. Numpy compare\n\na = np.arange(12).reshape((3, 4))\nprint(a)\n\na_bool = a < 6\nprint(a_bool)","b05c2ade":"# 24. Numpy compare with nonzero count\n\na = np.arange(12).reshape((3, 4))\nprint('Before : ')\nprint(a)\n\nprint(np.count_nonzero(a > 5))\n\nprint(a % 3 == 1)\nprint(np.count_nonzero(a % 3 == 1))","b52fdb32":"# 25. Flip a numpy array by using flipud\n# flipup = flip ud = up \/ down\n\na = np.arange(4).reshape(2, 2)\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.flipud(a)\nprint(b)\n\n# Note: b returns a view \nprint('Shared memory? :', np.shares_memory(a, b))","4132243a":"# 26. Flip a numpy array by using flipud without sharing the memory\n\na = np.arange(4).reshape(2, 2)\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.flipud(a).copy()\nprint(b)\n\n# Note: b returns a view \nprint('Shared memory? :', np.shares_memory(a, b))","c8e4bbbc":"# 27. Flip a numpy array by using fliplr (horizontally)\n\na = np.arange(10).reshape(2, 5)\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.fliplr(a)\nprint(b)","b1d76478":"# 28. Flip a numpy array by using flip (both horizontally and vertically)\n\na = np.arange(10).reshape(2, 5)\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.flip(a)\nprint(b)","55be4b59":"# 29. Flipping the numpy array using slices\n\na = np.arange(10).reshape(2, 5)\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = a[::-1, ::-1]\nprint(b)","87f0f287":"# 30. Convert numpy array to list\n\na = np.arange(10).reshape(2, 5)\nprint('Before : ')\nprint(a)\n# print(d.dtype)\nprint(type(a))\nprint(type(a[0]))\nprint(type(a[0][0]))\n\nb = a.tolist()\nprint('\\nAfter : ')\nprint(b)\nprint(type(b))\nprint(type(b[0]))\nprint(type(b[0][0]))","8673e2ec":"# 31. Numpy Where\n\na = np.arange(8).reshape((2, 4))\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.where(a < 4, 0, 20)\nprint(b)\n\n# Note: it matches, replace with 0, if not replace with 20","e1a71358":"# 32. Numpy where with multiple conditions\n\na = np.arange(8).reshape((2, 4))\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.where((a > 3) & (a < 7), 0, 20)\nprint(b)","ca026092":"# 33. Numpy where with multiple conditions - apply only on matching conditions\n\na = np.arange(10).reshape((2, 5))\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.where((a > 3) & (a < 7), 0, a)\nprint(b)","480ea06f":"# 34. Process with where\n\na = np.arange(10).reshape((2, 5))\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.where((a > 3) & (a < 7),  a * 3, 0)\nprint(b)","2e568c00":"# 35. List to numpy array\n\na = [0, 1, 2]\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.array(a)\nprint(b)\nprint(b.dtype)","b92506e2":"# 36. List to numpy array with explicit dtype\n\na = [0, 1, 2]\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.array(a, dtype = float)\nprint(b)\nprint(b.dtype)","508fc316":"# 37. 2D list to numpy array\n\na = [[0, 1, 2], [21, 22, 23]]\nprint('Before : ')\nprint(a)\nprint(type(a))\n\nprint('\\nAfter : ')\nb = np.array(a)\nprint(b)\nprint(type(b))\nprint(b.dtype)\nprint(b.shape)","7034aa3a":"# 38. Convert list to float numpy array\n\nx = [1, 2]\nprint('Before : ')\nprint(x)\nprint(type(x))\n\nprint('\\nAfter : ')\nb = np.asfarray(x)\nprint(b)\nprint(type(b))\nprint(b.dtype)\n\nprint('\\nAfter : ')\nc = np.asarray(x, float)\nprint(c)\nprint(type(c))\nprint(c.dtype)","67b51d0d":"# 39. Convert list to numpy array with explicit datatype\n\nx = [1, 2]\nprint('Before : ')\nprint(x)\nprint(type(x))\n\nprint('\\nAfter : ')\nc = np.asarray(x, float)\nprint(c)\nprint(type(c))\nprint(c.dtype)","de597b87":"# 40. Find common values between two numpy array\n\na = np.random.randint(0, 10, 10)\nb = np.random.randint(0, 10, 10)\nprint(a)\nprint(b)\nprint('common values between a and b : ', np.intersect1d(a,b))","acff54f3":"# 41. Get today in numpy and deltas\n\ntoday = np.datetime64('today', 'D')\nprint('today          : ', today)\n\nafter2days = np.datetime64('today', 'D') + np.timedelta64(2, 'D')\nprint('after 2 days   : ', after2days)\n\nbefore3days = np.datetime64('today', 'D') - np.timedelta64(3, 'D')\nprint('before 3 days  : ', before3days)\n\nafter1week = np.datetime64('today', 'D') + np.timedelta64(1, 'W')\nprint('after 1 week   : ', after1week)\n\nafter10weeks = np.datetime64('today', 'D') + np.timedelta64(10, 'W')\nprint('after 10 weeks : ', after10weeks)","24736fb6":"# 42. \n\na = np.arange('2020-09-15', '2020-09-25', dtype='datetime64[D]')\nprint('Between two dates : 2020-09-15 and 2020-09-25')\nprint(a)\n\na = np.arange('2020-09', '2020-10', dtype='datetime64[D]')\nprint('\\nBetween 2 months : 2020-09 and 2020-10')\nprint(a)","2a623c1f":"# 43. Random array and sorting\n\na = np.random.random(5)\n\nprint('Before : ')\nprint(a)\n\na.sort()\nprint('\\nAfter : ')\nprint(a)","e1d17bf0":"# 44. Random int array and sorting\n\na = np.random.randint(50, 100, 5)\n\nprint('Before : ')\nprint(a)\n\na.sort()\nprint('\\nAfter : ')\nprint(a)","38740be4":"# 45. String to nump,y array\n\nfrom io import StringIO\n\ncontent = StringIO('''\n1, 2, 3\n6, ,  8\n20, , 20\n''')\na = np.genfromtxt(content, delimiter=\",\", dtype=np.int)\nprint(a)","6e83c23d":"# 45. Argsort on Numpy array\n\na = np.random.randint(0, 10, (3,3))\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = a[a[: ,2].argsort()]\nprint(b)","abc70e0b":"# 46. Find the nearest element in the array\n\na = np.arange(10, 60, 7)\nprint(a)\n\nb = 23\nc = a.flat[np.abs(a - b).argmin()]\nprint(f'Elemenet near by {b} : {c}')","62812db2":"# 47. Swap rows\n\na = np.arange(9).reshape(3, 3)\nprint('Before : ')\nprint(a)\n\na[[0,1]] = a[[1, 0]]\n\nprint('\\nAfter : ')\nprint(a)","81744568":"# 48. Shuffle\n\na = np.arange(20)\nprint('Before : ')\nprint(a)\n\nnp.random.shuffle(a)\n\nprint('\\nAfter : ')\nprint(a)","106dbf6d":"# 49. Get specific element\n\na = np.arange(27).reshape(3, 3, 3)\nprint(a)\n\nprint(a[0, 1, 1])","9a449484":"# 50. Repeat an array\n\na = np.array([[1, 2, 3]])\nprint('Before : ')\nprint(a)\n\nb = np.repeat(a, 3, axis=0)\nprint('\\nAfter : ')\nprint(b)","d67a937d":"# 51. Min, Max, Sum\n\na = np.arange(6).reshape(2, 3)\na += 1\nprint(a)\n\na_mean = np.min(a)\nprint('Mean : ', a_mean)\n\na_max = np.max(a)\nprint('Max : ', a_max)\n\na_sum = np.sum(a)\nprint('Sum : ', a_sum)","64289203":"**To Do:**\n\n* Add more exercises (targetting 100+ exercieses. You can come back and check after a while)\n* Add documentation for each exercise\n* Add more aesthetics "}}