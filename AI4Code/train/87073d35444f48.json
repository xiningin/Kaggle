{"cell_type":{"5423f4a0":"code","6e20f011":"code","1b1fcd4e":"code","898ee537":"code","091a1bb2":"code","6ac5fb3d":"code","586c86e8":"code","17b3a0e0":"code","86e03dd0":"code","87e2eaed":"code","3f98ca2c":"code","4cdff149":"code","979cd8a9":"code","7297559d":"code","4304fb6f":"code","d33f3da8":"code","01b5e921":"code","427e3d7c":"code","b4965dbe":"code","768f7b85":"markdown"},"source":{"5423f4a0":"import numpy as np\n\na = np.array([1,3,5,7,9,11])\nprint(a)","6e20f011":"\na = np.arange(1, 12, 2)    # (start, stop, step)\nprint(a)\n\na = np.linspace(5, 8, 13)  # (start, stop, number of items)\nprint(a)","1b1fcd4e":"a = np.zeros((4, 2)) # zero matrix\nprint(a)\n\na = np.ones((2, 3), dtype=np.int16)  # ones matrix \nprint(a)\n\na = np.full((6,), 88)\nprint(a)\n\n","898ee537":"a = np.fromstring('25 30 35 40', dtype=np.int, sep=' ')\nprint(a)\n\na = np.array([[1,3,5],[7,9,11]])\nprint(a)\n\nb = np.zeros_like(a)    # zeros_like gives you a new array in the same shape as the argument.\nprint(b)\n\n\nd = np.eye(2)         # Create a 2x2 identity matrix\nprint(d)  \n\ne = np.random.random((2,2))  # Create an array filled with random values\nprint(e)  ","091a1bb2":"## Numpy Array Attributes\n\nprint(a.size)\nprint(a.shape)\nprint(a.ndim)\nprint(a.itemsize)  # byte each item pick in memory \nprint(a.dtype)\nprint(a.nbytes) # same as a.size * a.itemsize","6ac5fb3d":"# Indexing and slicing \n\nprint(a)\nprint(a[1])\nprint(a[0][2])\nprint(b[2:4])\n\nprint(a[:1])\nprint(a[1:3:2])\nprint(a[:, 1:2])","586c86e8":"## Reshape, Swap Axes, Flatten\n\nc = np.arange(-9, -3,).reshape(2,3)\nprint(c)\n\nc = c.swapaxes(0,1)\nprint(c)\n\nc = c.flatten()\nprint(c)","17b3a0e0":"# Use dtype to save Space \n\nd = np.arange(0,100)\nprint(d.dtype, type(d[1]))\nprint(d.nbytes)\n\nd = np.arange(0,100, dtype='int8')\nprint(d.dtype, type(d[1]))\nprint(d.nbytes)","86e03dd0":"## UpCasting, Rounding, Print Formatting\n\ne = np.array([(1.566666,2,3), (4,5,6)])\nprint(e.dtype)\n\ne = e.round(4)\nprint(e)\n\nnp.set_printoptions(precision=2, suppress=True)    # show 2 decimal places, suppress scientific notation\nprint(e)\n","87e2eaed":"## Numpy Data Types Available\n\nimport pprint as pp\npp.pprint(np.sctypes)","3f98ca2c":"#### Mathematical Functions\nx = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n\nprint(x + y)\nprint(np.add(x, y))\n\nprint(x - y)\nprint(np.subtract(x, y))\n\nprint(x * y)\nprint(np.multiply(x, y))","4cdff149":"# Elementwise division; both produce the array\n\nprint(x \/ y)\nprint(np.divide(x, y))\n","979cd8a9":"# Elementwise square root; produces the array\n\nprint(np.sqrt(x))","7297559d":"x = np.array([[1,2],[3,4]])\n\nprint(np.sum(x))  # Compute sum of all elements; prints \"10\"\nprint(np.sum(x, axis=0))  \nprint(np.sum(x, axis=1))  ","4304fb6f":"x = np.array([[1,2], [3,4]])\nprint(x)   \nprint(x.T) ","d33f3da8":"# rank 1 array \nv = np.array([1,2,3])\nprint(v)    \nprint(v.T)  \n","01b5e921":"import matplotlib.pyplot as plt #refer to matplotlib notebook to know more \n\n#the x and y coordinates for points on a sine curve\nx = np.arange(0, 3 * np.pi, 0.1)\ny = np.sin(x)\n\n\nplt.plot(x, y)\nplt.show()\n","427e3d7c":"x = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n\nplt.plot(x, y_sin)\nplt.plot(x, y_cos)\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.title('Sine and Cosine')\nplt.legend(['Sine', 'Cosine'])\nplt.show()\n","b4965dbe":"# subplot\n\nplt.subplot(2, 1, 1)\n\n\nplt.plot(x, y_sin)\nplt.title('Sine')\n\n\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title('Cosine')\n\nplt.show()","768f7b85":"# **NumPy** \n\n**Python library used for working with arrays. It also has functions for working in domain of linear algebra, fourier transform, and matrices.**\n"}}