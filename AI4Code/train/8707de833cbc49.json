{"cell_type":{"00763630":"code","9c12d6bf":"code","8c4423cf":"code","d8e87aff":"code","6448b677":"code","c4c7d006":"code","c6862bd8":"code","d79bfd16":"code","53de6a29":"code","9f494cfd":"code","088d1fa6":"code","02fb0f09":"code","2c48c586":"markdown","d99ce3eb":"markdown","02cf694f":"markdown","13c1e49b":"markdown","56ab12c5":"markdown","1318d496":"markdown","af884e6a":"markdown","b0f0be9e":"markdown"},"source":{"00763630":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ntrain = pd.read_excel(os.path.join(dirname, \"train.xlsx\"))\ntest = pd.read_excel(os.path.join(dirname, \"test.xlsx\"))\n","9c12d6bf":"#shape of DF\nprint(\"Training data \",train.shape)\nprint(\"Testing data \",test.shape)\n\ntrain.head()","8c4423cf":"nans = train.shape[0] - train.dropna().shape[0]\nprint (\"%d rows have missing values in the train data\" %nans)\n\nnand = test.shape[0] - test.dropna().shape[0]\nprint (\"%d rows have missing values in the test data\" %nand)","d8e87aff":"# Check columns with missing data\n\ntrain.isnull().sum()","6448b677":"# number of unique values from character variables.\ncat = train.select_dtypes(include=['O'])\ncat.apply(pd.Series.nunique)","c4c7d006":"#WorkClass\ntrain.workclass.value_counts(sort=True)\ntrain.workclass.fillna('Private',inplace=True)\n\n#Occupation\ntrain.occupation.value_counts(sort=True)\ntrain.occupation.fillna('Prof-specialty',inplace=True)\n\n#Native Country\ntrain['native.country'].value_counts(sort=True)\ntrain['native.country'].fillna('United-States',inplace=True)\n\ntrain.isnull().sum()","c6862bd8":"# check the target variable to investigate if this data is imbalanced or not.\n#check proportion of target variable\ntrain.target.value_counts()\/train.shape[0]","d79bfd16":"# we are dividing by train.shape[0] which no, of rows to get percentage of values\n\npd.crosstab(train.education, train.target,margins=True)\/train.shape[0]\n# pd.crosstab(train.education, train.target,margins=True)\/train.shape[0]*100\n# another way is to get well defined percenatge is by multiplying above function with 100","53de6a29":"from sklearn import preprocessing\n\nfor x in train.columns:\n    if train[x].dtype == 'object':\n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(train[x].values))\n        train[x] = lbl.transform(list(train[x].values))\n\ntrain.head()","9f494cfd":"#<50K = 0 and >50K = 1\ntrain.target.value_counts()","088d1fa6":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n# from sklearn.cross_validation import cross_val_score\n\nfrom sklearn.metrics import accuracy_score\n\ny = train['target']\ndel train['target']\n\nX = train\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,\n                                                 random_state=1,stratify=y)\n\n#train the RF classifier\nclf = RandomForestClassifier(n_estimators = 500, max_depth = 6)\nclf.fit(X_train,y_train)\n\n#     RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n#                 max_depth=6, max_features='auto', max_leaf_nodes=None,\n#                 min_impurity_split=1e-07, min_samples_leaf=1,\n#                 min_samples_split=2, min_weight_fraction_leaf=0.0,\n#                 n_estimators=500, n_jobs=1, oob_score=False, random_state=None,\n#                 verbose=0, warm_start=False)\n\nclf.predict(X_test)","02fb0f09":"#make prediction and check model's accuracy\nprediction = clf.predict(X_test)\nacc =  accuracy_score(np.array(y_test),prediction)\nprint ('The accuracy of Random Forest is {}'.format(acc))","2c48c586":"# The accuracy of RF is 0.85198075545.","d99ce3eb":"We'll work with the popular adult data set.The data set has been taken from UCI Machine Learning Repository.In this data set, the dependent variable is \"target.\" It is a binary classification problem. We need to predict if the salary of a given person is less than or more than 50K.","02cf694f":"Since missing values are found in all 3 character variables, impute these missing values with their respective modes.","13c1e49b":"Let's count the number of unique values from character variables.","56ab12c5":"Now, let's check the missing values (if present) in this data.","1318d496":"# Building a RF Model","af884e6a":"Scikit learn accepts data in numeric format. Now, we'll have to convert the \ncharacter variable into numeric. We'll use the labelencoder function.\nIn label encoding, each unique value of a variable gets assigned a number.","b0f0be9e":"We see that 75% of the data set belongs to <=50K class. This means that even if we take a rough guess of target prediction as <=50K, \nwe'll get 75% accuracy. now create a cross tab of the target variable with education.\nWith this, we'll try to understand the influence of education on the target variable."}}