{"cell_type":{"f04d9575":"code","61d0c97c":"markdown"},"source":{"f04d9575":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import HTML\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nINPUT_DIR = '..\/input\/lish-moa\/'\nCOLS_TO_SHOW = 104\nCOLS_TO_SHOW_FROM_END = 100\n\ndef h(content):\n    display(HTML(content))\n    \ndef _desc(data, col, label):\n    d0 = data.describe().reset_index()\n    d0.columns = [col, label]\n    return d0.append({col:'unique values', label:data.unique().shape[0]}, ignore_index=True) \\\n             .append({col:'unique values \/ count', label:np.round(data.unique().shape[0] \/ data.shape[0], 4)}, ignore_index=True) \\\n             .append({col:'NaNs', label:data.isnull().sum()}, ignore_index=True) \\\n    \ndef desc1(col):\n    d0 = _desc(tr[col], col, 'Train')\n    d3 = _desc(te[col], col, 'Test')\n    dd = d0.merge(d3)\n    display(dd)\n    \n    if col not in ['sig_id']:\n        h('<b>Most popular values (NaN = -999):<\/b>')\n        N = 10\n        d0 = tr[['sig_id',col]].fillna(-999).groupby(col)['sig_id'].count().reset_index()\n        d1 = te[['sig_id',col]].fillna(-999).groupby(col)['sig_id'].count().reset_index()\n        dd = d0.merge(d1, how='left', on=col)\n        dd['Share in train'] = np.round(dd['sig_id_x'] \/ dd['sig_id_x'].sum(), 5)\n        dd['Share in test'] = np.round(dd['sig_id_y'] \/ dd['sig_id_y'].sum(), 5)\n        dd = dd.sort_values('sig_id_x', ascending=False).head(N).fillna(0).reset_index(drop=True)\n        dd = dd.rename({'sig_id_x':'Count in train (desc)','sig_id_y':'Count in test'}, axis=1)\n        display(dd)\n\ndef hist1(col):\n    plt.figure(figsize=(15, 3))\n    plt.subplot(121)\n    plt.hist(tr[col], bins=70);\n    plt.title('Train histogram: ' + col);\n    plt.subplot(122)\n    plt.hist(te[col], bins=70);\n    plt.title('Test histogram: ' + col);\n    plt.show()\n\ndef barh1(col):\n    if col not in ['sig_id']:\n        plt.figure(figsize=(15, 3))\n        plt.subplot(121)\n        tr[col].value_counts().sort_values().plot(kind = 'barh')\n        plt.title('Train value counts: ' + col);\n        plt.subplot(122)\n        te[col].value_counts().sort_values().plot(kind = 'barh')\n        plt.title('Test value counts: ' + col);\n        plt.show()\n        \ndef corr1(col):\n    N = None #10000\n    num_vars = [f for f in tr.columns if tr[f].dtype != 'object']\n    trx = tr.head(N) if N is not None else tr.copy()\n    corrs = trx[num_vars].corrwith(trx[col]).reset_index().sort_values(0, ascending=False).reset_index(drop=True).rename({'index':'Column',0:'Correlation with ' + col}, axis=1)\n    h('<b>Most correlated values with ' + col + ':<\/b>')\n    trx = pd.concat([corrs.head(6), corrs.dropna().tail(5)])\n    def linkx(val):\n        return '<a href=\"#c_{}\">{}<\/a>'.format(val, val) if val in included_cols else val\n    trx['Column'] = trx['Column'].apply(linkx)\n    h(trx.to_html(escape=False))\n    \ndef numeric(col):\n    hist1(col)\n    desc1(col)\n    corr1(col) \n    \ndef categorical(col):\n    barh1(col)\n    desc1(col)\n\ndef proc(col):\n    h('<h3 id=\"c_' + col + '\">' + col + '<\/h3>' + '<a style=\"font-size:11px\" href=\"#home\">(Jump to top)<\/a>')\n    categorical(col) if tr[col].dtype == 'object' else numeric(col)\n        \ntr = pd.read_csv(INPUT_DIR + 'train_features.csv')\nte = pd.read_csv(INPUT_DIR + 'test_features.csv')\n\nincluded_cols = list(tr.columns.values[:COLS_TO_SHOW]) + list(tr.columns.values[-COLS_TO_SHOW_FROM_END:])\nsplit_on = ['sig_id','g-0','c-0']\nh('<b>Links to column info:<\/b> ' + ', '.join([('<li>' if col in split_on else '') + '<a href=\"#c_' + col + '\">' + col + '<\/a>' for col in included_cols]))\n\nh('Train features shape: <b>' + str(tr.shape) + '<\/b>' + \n  '<br>Test features shape: <b>' + str(te.shape) + '<\/b>')\nh('Train features preview:')\ndisplay(tr.head(10))\n\nfor col in included_cols:\n    proc(col)","61d0c97c":"<a id=\"home\"><\/a>\n# MoA features columns Reference"}}