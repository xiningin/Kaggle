{"cell_type":{"cfc9b4a9":"code","df2ffab2":"code","1000b3a8":"code","8ce348e2":"code","e6bb9258":"code","04deca50":"code","691d7c42":"code","5f6a6727":"code","d2308e4e":"code","c1a37cd8":"code","2d078a46":"code","006f3df0":"code","ab9ac61a":"code","bb789518":"code","451e77c9":"code","cd336d42":"code","68b3d1fd":"code","f43367b4":"code","31f0c0a4":"code","e0d027f9":"code","de7ac730":"code","511bea0e":"code","a4ded05a":"code","7ef22be1":"code","04ca137b":"code","40e61626":"code","c91dd4b4":"code","52b22c5d":"code","77b18ccc":"code","d4da101b":"code","3a351092":"code","7d350113":"code","bc730579":"code","3a66e129":"code","61fd7103":"code","28af1cd3":"code","62fa391b":"code","18ca645c":"code","e010db69":"code","0e3b7df7":"code","29c32e32":"markdown","0b1966b0":"markdown","af4286f5":"markdown","c6d659a9":"markdown","146cd4c5":"markdown","09c023c4":"markdown","139b4f24":"markdown","eae9f9ea":"markdown","d25e4fc2":"markdown","3c6cfd4a":"markdown","1f5c3522":"markdown","8abf6505":"markdown","b86b28dd":"markdown","328b353c":"markdown","4ba7f8bd":"markdown","89fb5a13":"markdown","45b65592":"markdown"},"source":{"cfc9b4a9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set(style='white', palette='deep')\nwidth = 0.35\n%matplotlib notebook","df2ffab2":"def autolabel(rects,ax, df): #autolabel\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{} ({:.2f}%)'.format(height, height*100\/df.shape[0]),\n                    xy = (rect.get_x() + rect.get_width()\/2, height),\n                    xytext= (0,3),\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\ndef autolabel_without_pct(rects,ax, df): #autolabel\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy = (rect.get_x() + rect.get_width()\/2, height+5),\n                    xytext= (0,3),\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\ndef autolabel_horizontal(rects,ax):\n    \"\"\"\n    Attach a text label above each bar displaying its height\n    \"\"\"\n    for rect in rects:\n        width = rect.get_width()\n        ax.text(rect.get_x() + rect.get_width() \/ 2, rect.get_y() + rect.get_height()\/2.,\n                '%.2f' % width,\n                ha='center', va='center', color='black')    ","1000b3a8":"df = pd.read_excel('\/kaggle\/input\/titanic3\/titanic3.xls')","8ce348e2":"letters = np.array([])\nembarked = ['Cherbourg', 'Queenstown', 'Southampton']\nfor i in df['embarked']:\n    if i == 'S':\n        letters = np.append(letters, embarked[2])\n    elif i == 'C':\n        letters = np.append(letters, embarked[0])\n    else:\n        letters= np.append(letters, embarked[1])\n\ndf['embarked'] = letters      ","e6bb9258":"df.info()","04deca50":"# Replace columns\nnew_columns = {'sibsp':'sibling','parch': 'parents', 'home.dest': 'destination'}\ndf = df.rename(columns= new_columns)\nprint('How many peoples embarked from Cherbourg, Queenstown, and Southampton')\nprint('-'*100)\nprint('{} embarked from Cherbourg'.format(len(df[df['embarked']=='Cherbourg'])))\nprint('{} embarked from Queenstown'.format(len(df[df['embarked']=='Queenstown'])))\nprint('{} embarked from Southampton'.format(len(df[df['embarked']=='Southampton'])))","691d7c42":"survived = df[df['survived']==1]\nnot_survided = df[df['survived']==0]\ntotal_passenger = len(df.survived)\nprint('How was the percentage of survived?')\nprint('-'*100)\nprint('The percentage of survived was: {:.2f}%'.format((len(survived)\/total_passenger)*100))\nprint('The percentage of not survived was:{:.2f}%'.format((len(not_survided)\/total_passenger)*100))","5f6a6727":"max_name = np.array([])\nmin_name = np.array([])\nmax_name_value = np.array([])\nmin_name_value = np.array([])\nn=0\nfor i in df.loc[:,['age','fare']]:\n    max_name = np.append(max_name, df['name'][df[i].idxmax()])\n    max_name_value = np.append(max_name_value, max(df[i]))\n    min_name = np.append(min_name, df['name'][df[i].idxmin()])\n    min_name_value = np.append(min_name_value, min(df[i]))\n    print('The person who had the maximum {} was {} with {}'.format(i, max_name[n],max_name_value[n]))\n    print('-'*100)\n    print('The person who had the minimum {} was {} with {}'.format(i,min_name[n],min_name_value[n]))\n    print('-'*100)\n    n=+1\n\nwoman = df[df['sex']=='female'].dropna(axis=1)\nmen = df[df['sex']=='male'].dropna(axis=1)\nprint('How many male and female embarked?')\nprint('-'*100)\nprint('Total of female embarked on Titanic was {}'.format(len(woman)))\nprint('Total of male embarked on Titanic was {}'.format(len(men)))","d2308e4e":"print(\"How many bodies were recovered?\")\nprint('-'*100)\nprint('The total of deaths was {}. But only {} were recovered.'.format(len(not_survided), df['body'].count()))","c1a37cd8":"#Plot survived\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(1,1,1)\nax.set_title('Count of surviveds on Titanic')\nrects1= ax.bar('Survived', len(survived['survived']), width,color='green', alpha=0.6, edgecolor='k', label='Survived')\nrects2= ax.bar('Not Survived', len(not_survided['survived']), width,color='red', alpha=0.6, edgecolor='k', label='Not Survived')\nax.grid(b=True, which='major', linestyle='--')\nax.set_xlabel('How many survived?')\nax.set_ylabel('Count')\nautolabel(rects1, ax, df)\nautolabel(rects2, ax, df)\nplt.tight_layout()","2d078a46":"#Plot what genre survived and not survided more?\nsurvived_male = survived['survived'][survived['sex'] == 'male']\nsurvived_female = survived['survived'][survived['sex'] == 'female']\nnot_survived_male = not_survided['survived'][not_survided['sex']=='male']\nnot_survived_female = not_survided['survived'][not_survided['sex']=='female']\nlabel = ['Survived', 'Not Survived']\nind = np.arange(len(label))\nfig = plt.figure(figsize=(15,10))\nax = fig.add_subplot(1,2,1)\nrects3 = ax.bar(ind[0]+width\/2,survived_male.shape[0],width, alpha=.6, color= 'orange', edgecolor='k', label='Men' )\nrects4 = ax.bar(ind[0]-width\/2, survived_female.shape[0],width, alpha=.6, color= 'blue', edgecolor='k', label='Women' )\nrects5 = ax.bar(ind[1]+width\/2, not_survived_male.shape[0], width, alpha=.6, edgecolor='k',  color='orange')\nrects6 = ax.bar(ind[1]-width\/2, not_survived_female.shape[0], width, alpha=.6, edgecolor='k', color='blue')\nax.set_xticks(ind)\nax.set_title('What Genre Survived and Not Survived More?')\nax.set_xlabel('Genre')\nax.set_ylabel('Count')\nax.set_xticklabels(label)\nax.legend(loc='best')\nax.grid(b=True, which='major', linestyle='--')\nautolabel(rects3, ax,survived)\nautolabel(rects4, ax,survived)\nautolabel(rects5, ax,not_survided)\nautolabel(rects6, ax,not_survided)\nplt.tight_layout()","006f3df0":"#plot age\nbins = np.arange(min(df['age']), max(df['age']),10).round()\nbins2 = bins.astype(str)\nn = 0\nm = 1\nranged = np.array([])\nwhile m < 8:\n    ranged = np.append(ranged, '('+bins2[n] + ' - ' + bins2[m]+')')\n    n+=1\n    m+=1\nranged\nmale_survived_age = survived.groupby(pd.cut(survived['age'], bins))['sex'].value_counts().values[1::2]\nmale_survived_std = survived.groupby([pd.cut(survived['age'], bins), 'sex'])['age'].std().values[1::2]\nmale_survived_mean = survived.groupby([pd.cut(survived['age'], bins), 'sex'])['age'].mean().values[1::2]\nfemale_survived_age = survived.groupby(pd.cut(survived['age'], bins))['sex'].value_counts().values[::2]\nfemale_survived_std = survived.groupby([pd.cut(survived['age'], bins), 'sex'])['age'].std().values[::2]\nfemale_survived_mean = survived.groupby([pd.cut(survived['age'], bins), 'sex'])['age'].mean().values[::2]\nmale_not_survived_age = not_survided.groupby(pd.cut(not_survided['age'], bins))['sex'].value_counts().values[::2]\nmale_not_survived_std = not_survided.groupby([pd.cut(not_survided['age'], bins), 'sex'])['age'].std().values[::2]\nmale_not_survived_mean = not_survided.groupby([pd.cut(not_survided['age'], bins), 'sex'])['age'].mean().values[::2]\nfemale_not_survived_age = not_survided.groupby(pd.cut(not_survided['age'], bins))['sex'].value_counts().values[1::2]\nfemale_not_survived_std = not_survided.groupby([pd.cut(not_survided['age'], bins), 'sex'])['age'].std().values[1::2]\nfemale_not_survived_mean = not_survided.groupby([pd.cut(not_survided['age'], bins), 'sex'])['age'].mean().values[1::2]\nind=np.arange(len(ranged))\nfig = plt.figure(figsize=(15,15))\nax = fig.add_subplot(2,1,1)\nrects7 = ax.bar(ind+width\/2,male_survived_age,width, edgecolor='black', label='Men', yerr=male_survived_std)\nrects8 = ax.bar(ind-width\/2,female_survived_age,width,color='orange', edgecolor='k', label='Woman', yerr=female_survived_std)\nax.set_title('Survived Age X Genre')\nax.grid(b=True, which='major', linestyle='--')\nax.set_xticks(ind)\nax.set_xlabel('Age')\nax.set_ylabel('Quantity')\nax.set_xticklabels(ranged)\nax.legend(loc='best')\nax2 = fig.add_subplot(2,1,2)\nrects9 = ax2.bar(ind+width\/2,male_not_survived_age,width,edgecolor='k', label='Men', yerr=male_not_survived_std)\nrects10 =ax2.bar(ind-width\/2,female_not_survived_age,width,color='orange', edgecolor='k', label='Woman', yerr=female_not_survived_std)\nax2.set_title('Not Survived Age X Genre')\nax2.grid(b=True, which='major', linestyle='--')\nax2.set_xticks(ind)\nax2.set_xlabel('Age')\nax2.set_ylabel('Quantity')\nax2.set_xticklabels(ranged)\nax2.legend(loc='best')\nautolabel_without_pct(rects7,ax, survived)\nautolabel_without_pct(rects8,ax, survived)\nautolabel_without_pct(rects9,ax2, not_survided)\nautolabel_without_pct(rects10, ax2, not_survided)\nplt.tight_layout()","ab9ac61a":"# Family\nfrom collections import Counter\nc = Counter(df['ticket'])\n\nticket={}\nfor i in c:\n    if c[i] > 1:\n        ticket[i] = c[i]\ntickets_names = [i for i in ticket]\n\ndf_family = pd.DataFrame()\ndf_family1 = pd.DataFrame()\n\nfor i in tickets_names:\n    df_family1 = pd.DataFrame(df.loc[df['ticket']==i])\n    df_family = pd.concat([df_family1,df_family])\nprint('There were {:.2f} families on Titanic'.format(len(df_family))) \ndf_family_survived = df_family[df_family['survived']==1]\ndf_family_not_survived = df_family[df_family['survived']==0]\nfig= plt.figure(figsize=(10,10))\nax = fig.add_subplot(1,1,1)\nax.set_title('Families Survived')\nax.set_ylabel('Quantity')\nax.set_xlabel('Condition')\nax.grid(b=True, which='major', linestyle='--')\nrects11= ax.bar('Survived', len(df_family_survived), width,color='green', alpha=0.6, edgecolor='k', label='Survived')\nrects12= ax.bar('Not Survived', len(df_family_not_survived), width,color='red', alpha=0.6, edgecolor='k', label='Not Survived')\nautolabel(rects11,ax,df_family)\nautolabel(rects12,ax,df_family)\nplt.tight_layout()\n\ngrouped_family = df_family.groupby('ticket')['name'].count().sort_values(ascending=False).head()\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(1,1,1)\nfor i in range(0,len(grouped_family)):\n    last_name = df_family[df_family['ticket']==grouped_family.index[i]]['name'].values[0].split(',')[0]\n    rects13=ax.barh(grouped_family.index[i],grouped_family.values[i], width,label='Family '+last_name, edgecolor='black')\n    autolabel_horizontal(rects13,ax)\nax.set_title(\"Top Five Family per Ticket's\")\nax.legend(loc='best', title=(\"Family's Last Names\"))\nax.set_xlabel('Quantity')\nax.set_ylabel(\"Ticket's\")\nax.grid(b=True, which='major', linestyle='--')\nplt.tight_layout()\n\nsage = df_family[df_family['ticket']==grouped_family.index[0]]['name'].values[0].split(',')[0]\nprint('The {} Family is the greater family of Titanic with {:.2f} relatives.'.format(sage,len(df_family[df_family['ticket']==grouped_family.index[0]]['name'])))","bb789518":"# Class\nclass_1 = not_survided[not_survided['pclass'] ==1]\nclass_2 = not_survided[not_survided['pclass'] ==2]   \nclass_3 = not_survided[not_survided['pclass'] ==3]\n\nfig= plt.figure(figsize=(10,10))\nax = fig.add_subplot(1,1,1) \nax.set_title('Not Survived by Class')\nrects14 = ax.bar('Class 01', len(class_1['pclass']==1), width,edgecolor='k', label='01' )\nrects15 = ax.bar('Class 02', len(class_2['pclass']==2), width,edgecolor='k', label='02' )\nrects16 = ax.bar('Class 03', len(class_3['pclass']==3), width,edgecolor='k', label='03' )\nax.grid(b=True, which='major', linestyle='--')\nax.set_ylabel('Quantity')\nautolabel(rects14,ax,not_survided)\nautolabel(rects15,ax,not_survided)\nautolabel(rects16,ax,not_survided)","451e77c9":"#Destination\nimport re\ndef clean_strings(strings):\n    result = []\n    for value in strings:\n        value = value.strip()\n        value = re.sub('[!#?\/]', '', value)\n        value = value.title()\n        result.append(value)\n    return result\ndestination = df.dropna(subset=['destination'])\ndestination['destination'] = destination['destination'].apply(lambda x: x.split(',')[0])\ndestination['destination'] = destination['destination'].apply(lambda x: x.split('\/')[0])\ndestination['destination'] = clean_strings(destination['destination'])\ndestination_southampton = destination[destination['embarked']=='Southampton']   \ndestination_cherbourg = destination[destination['embarked']=='Cherbourg']  \ndestination_queens = destination[destination['embarked']=='Queenstown']\n  \nc_southampton = Counter(destination_southampton['destination'])\nc_cherbourg = Counter(destination_cherbourg['destination'])\nc_queens = Counter(destination_queens['destination'])\nc_southampton = {k: v for k, v in sorted(c_southampton.items(), key=lambda item: item[1], reverse=True)}\nc_cherbourg = {k: v for k, v in sorted(c_cherbourg.items(), key=lambda item: item[1], reverse=True)}\nc_queens = {k: v for k, v in sorted(c_queens.items(), key=lambda item: item[1],reverse=True)}\n    \nc_southampton_five = {}\nc_cherbourg_five = {}\nc_queens_five = {}    \ncount = 0\nwhile count < 5:\n    c_southampton_five[list(c_southampton.keys())[count]] = c_southampton[list(c_southampton.keys())[count]]\n    c_cherbourg_five[list(c_cherbourg.keys())[count]] = c_cherbourg[list(c_cherbourg.keys())[count]]\n    c_queens_five[list(c_queens.keys())[count]] = c_queens[list(c_queens.keys())[count]] \n    count+=1\n\nfig = plt.figure(figsize=(10,10))\nax1 = fig.add_subplot(3,1,1)\nax2 = fig.add_subplot(3,1,2)\nax3 = fig.add_subplot(3,1,3)\n\nax1.set_title('Top Five Destination of Passenger \\n Embarked from Southampton Without N.A Values')\nax2.set_title('Top Five Destination of Passenger \\n Embarked from Cherbourg Without N.A Values')\nax3.set_title('Top Five Destination of Passenger \\n Embarked from Queenstown Without N.A Values')\nfor i in range(0,len(c_southampton_five)):\n    rects17 = ax1.barh(list(c_southampton_five.keys())[i], list(c_southampton_five.values())[i], edgecolor='black')\n    rects18 = ax2.barh(list(c_cherbourg_five.keys())[i], list(c_cherbourg_five.values())[i], edgecolor='black')\n    rects19 = ax3.barh(list(c_queens_five.keys())[i], list(c_queens_five.values())[i], edgecolor='black')\n    ax1.grid(b=True, which='major', linestyle='--')\n    ax2.grid(b=True, which='major', linestyle='--')\n    ax3.grid(b=True, which='major', linestyle='--')\n    ax1.set_xlabel('Quantity of Passangers')\n    ax2.set_xlabel('Quantity of Passangers')\n    ax3.set_xlabel('Quantity of Passangers')\n    ax1.set_ylabel('Destination')\n    ax2.set_ylabel('Destination')\n    ax3.set_ylabel('Destination')    \n    autolabel_horizontal(rects17,ax1)\n    autolabel_horizontal(rects18,ax2)\n    autolabel_horizontal(rects19,ax3)\n    plt.tight_layout()\nfor tick in ax1.get_yticklabels():\n    tick.set_rotation(45)\nfor tick in ax2.get_yticklabels():\n    tick.set_rotation(45)\nfor tick in ax3.get_yticklabels():\n    tick.set_rotation(45)","cd336d42":"labels = ['Cherbourg','Southampton', 'Queenstown']\ndestination_survived = np.array([])\ndestination_not_survived = np.array([])\nfor i in labels:\n    survived_list = len(df[(df['survived']==1)][df['embarked']==i]['survived'])\n    not_survived_list = len(df[(df['survived']==0)][df['embarked']==i]['survived'])\n    destination_survived = np.append(destination_survived,survived_list)\n    destination_not_survived = np.append(destination_not_survived,not_survived_list)\nind = np.arange(len(labels))\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(1,1,1)\nrects20 = ax.barh(ind-width\/2, destination_survived, width, edgecolor='k',align='center', label='Survived')\nrects21 = ax.barh(ind+width\/2, destination_not_survived, width, edgecolor='k', align='center', label='Not Survived')\nax.legend(loc='best', title='Legend')\nax.grid(b=True, which='major', linestyle='--')\nax.set_yticks(ind)\nax.set_yticklabels(labels)\nax.set_xlabel('Deaths')\nax.set_title('Deaths by Location of Embarked')\nautolabel_horizontal(rects20,ax)\nautolabel_horizontal(rects21,ax)\nplt.tight_layout()","68b3d1fd":"df_feature = df.copy()\ndescribe = df_feature.describe()\ninfo = df_feature.info()\ndf_feature = df_feature.drop(['cabin','boat', 'body', 'destination'], axis=1)\n    \nlist_family = np.array([])\nfor i in df_feature['ticket']:\n    for j in c:\n        if i == j:\n            list_family = np.append(list_family, c[j])\n            \ndf_feature['family']=list_family  ","f43367b4":"df_feature.isnull().sum() #first way\ndf_feature.isnull().any() #second way\ndf_feature.isna().sum() #third way\nnull_percentage = (df_feature.isnull().sum()\/len(df_feature)*100)\nnull_percentage = pd.DataFrame(null_percentage, columns=['% Null Values'])\nnull_percentage","31f0c0a4":"df_feature['age'].fillna(df_feature['age'].mean(), inplace=True)\ndf_feature['fare'].fillna(method='ffill', inplace=True)","e0d027f9":"X = df_feature.drop(['survived', 'name', 'ticket'], axis=1)\ny = df_feature['survived']","de7ac730":"X = pd.get_dummies(X)","511bea0e":"X.columns\nX = X.drop(['sex_male', 'embarked_Southampton'], axis= 1)","a4ded05a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=0)\nX_train.shape\nX_test.shape\ny_train.shape\ny_test.shape","7ef22be1":"from sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nX_train = pd.DataFrame(sc_x.fit_transform(X_train), columns=X.columns.values)\nX_test = pd.DataFrame(sc_x.transform(X_test), columns=X.columns.values)","04ca137b":"## Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlr_classifier = LogisticRegression(random_state = 0, penalty = 'l1')\nlr_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = lr_classifier.predict(X_test)\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, precision_score, recall_score\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nresults = pd.DataFrame([['Logistic Regression (Lasso)', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])","40e61626":"## K-Nearest Neighbors (K-NN)\n#Choosing the K value\nerror_rate= []\nfor i in range(1,40):\n    from sklearn.neighbors import KNeighborsClassifier\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nprint(np.mean(error_rate))","c91dd4b4":"from sklearn.neighbors import KNeighborsClassifier\nkn_classifier = KNeighborsClassifier(n_neighbors=19, metric='minkowski', p= 2)\nkn_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = kn_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['K-Nearest Neighbors (minkowski)', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","52b22c5d":"## SVM (Linear)\nfrom sklearn.svm import SVC\nsvm_linear_classifier = SVC(random_state = 0, kernel = 'linear', probability= True)\nsvm_linear_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = svm_linear_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['SVM (Linear)', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","77b18ccc":"## SVM (rbf)\nfrom sklearn.svm import SVC\nsvm_rbf_classifier = SVC(random_state = 0, kernel = 'rbf', probability= True)\nsvm_rbf_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = svm_rbf_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['SVM (RBF)', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","d4da101b":"## Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\ngb_classifier = GaussianNB()\ngb_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = gb_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Naive Bayes (Gaussian)', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","3a351092":"## Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt_classifier = DecisionTreeClassifier(criterion='entropy', random_state=0)\ndt_classifier.fit(X_train, y_train)\n\n#Predicting the best set result\ny_pred = dt_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Decision Tree', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","7d350113":"## Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrf_classifier = RandomForestClassifier(random_state = 0, n_estimators = 100,\n                                    criterion = 'gini')\nrf_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = rf_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Random Forest Gini (n=100)', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","bc730579":"## Ada Boosting\nfrom sklearn.ensemble import AdaBoostClassifier\nad_classifier = AdaBoostClassifier()\nad_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = ad_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Ada Boosting', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","3a66e129":"##Gradient Boosting\nfrom sklearn.ensemble import GradientBoostingClassifier\ngr_classifier = GradientBoostingClassifier()\ngr_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = gr_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Gradient Boosting', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","61fd7103":"##Xg Boosting\nfrom xgboost import XGBClassifier\nxg_classifier = XGBClassifier()\nxg_classifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = xg_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Xg Boosting', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","28af1cd3":"##Ensemble Voting Classifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.metrics import accuracy_score\nvoting_classifier = VotingClassifier(estimators= [('lr', lr_classifier),\n                                                  ('kn', kn_classifier),\n                                                  ('svc_linear', svm_linear_classifier),\n                                                  ('svc_rbf', svm_rbf_classifier),\n                                                  ('gb', gb_classifier),\n                                                  ('dt', dt_classifier),\n                                                  ('rf', rf_classifier),\n                                                  ('ad', ad_classifier),\n                                                  ('gr', gr_classifier),\n                                                  ('xg', xg_classifier),],\nvoting='soft')\n\nfor clf in (lr_classifier,kn_classifier,svm_linear_classifier,svm_rbf_classifier,\n            gb_classifier, dt_classifier,rf_classifier, ad_classifier, gr_classifier, xg_classifier,\n            voting_classifier):\n    clf.fit(X_train,y_train)\n    y_pred = clf.predict(X_test)\n    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))\n\n# Predicting Test Set\ny_pred = voting_classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Ensemble Voting', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)   ","62fa391b":"#The Best Classifier\nprint('The best classifier is:')\nprint('{}'.format(results.sort_values(by='Accuracy',ascending=False).head(5)))","18ca645c":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=kn_classifier, X=X_train, y=y_train,cv=10)\naccuracies.mean()\naccuracies.std()\nprint(\" K-Nearest Neighbors (minkowski) Accuracy: %0.3f (+\/- %0.3f)\" % (accuracies.mean(), accuracies.std() * 2))","e010db69":"y_pred_proba = kn_classifier.predict_proba(X=X_test)\nimport matplotlib.pyplot as plt\nfrom scipy import integrate\ndef capcurve(y_values, y_preds_proba):\n    num_pos_obs = np.sum(y_values)\n    num_count = len(y_values)\n    rate_pos_obs = float(num_pos_obs) \/ float(num_count)\n    ideal = pd.DataFrame({'x':[0,rate_pos_obs,1],'y':[0,1,1]})\n    xx = np.arange(num_count) \/ float(num_count - 1)\n    \n    y_cap = np.c_[y_values,y_preds_proba]\n    y_cap_df_s = pd.DataFrame(data=y_cap)\n    y_cap_df_s = y_cap_df_s.sort_values([1], ascending=False).reset_index(level = y_cap_df_s.index.names, drop=True)\n    \n    print(y_cap_df_s.head(20))\n    \n    yy = np.cumsum(y_cap_df_s[0]) \/ float(num_pos_obs)\n    yy = np.append([0], yy[0:num_count-1]) #add the first curve point (0,0) : for xx=0 we have yy=0\n    \n    percent = 0.5\n    row_index = int(np.trunc(num_count * percent))\n    \n    val_y1 = yy[row_index]\n    val_y2 = yy[row_index+1]\n    if val_y1 == val_y2:\n        val = val_y1*1.0\n    else:\n        val_x1 = xx[row_index]\n        val_x2 = xx[row_index+1]\n        val = val_y1 + ((val_x2 - percent)\/(val_x2 - val_x1))*(val_y2 - val_y1)\n    \n    sigma_ideal = 1 * xx[num_pos_obs - 1 ] \/ 2 + (xx[num_count - 1] - xx[num_pos_obs]) * 1\n    sigma_model = integrate.simps(yy,xx)\n    sigma_random = integrate.simps(xx,xx)\n    \n    ar_value = (sigma_model - sigma_random) \/ (sigma_ideal - sigma_random)\n    \n    fig, ax = plt.subplots(nrows = 1, ncols = 1)\n    ax.plot(ideal['x'],ideal['y'], color='grey', label='Perfect Model')\n    ax.plot(xx,yy, color='red', label='User Model')\n    ax.plot(xx,xx, color='blue', label='Random Model')\n    ax.plot([percent, percent], [0.0, val], color='green', linestyle='--', linewidth=1)\n    ax.plot([0, percent], [val, val], color='green', linestyle='--', linewidth=1, label=str(val*100)+'% of positive obs at '+str(percent*100)+'%')\n    \n    plt.xlim(0, 1.02)\n    plt.ylim(0, 1.25)\n    plt.title(\"CAP Curve - a_r value =\"+str(ar_value))\n    plt.xlabel('% of the data')\n    plt.ylabel('% of positive obs')\n    plt.legend()\n    \ncapcurve(y_test,y_pred_proba[:,1])","0e3b7df7":"import eli5\nfrom eli5.sklearn import PermutationImportance\nperm = PermutationImportance(kn_classifier, random_state=0).fit(X_test,y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","29c32e32":"# Importing Dataset","0b1966b0":"# Applying K-fold validation for the best classification","af4286f5":"# Get Dummies","c6d659a9":"# Feature Engineering","146cd4c5":"# Looking for null values","09c023c4":"# Dataset Analysis","139b4f24":"# Renaming Embarked Values","eae9f9ea":"# Filling null Values","d25e4fc2":"# Feature scaling","3c6cfd4a":"# Define X and Y","1f5c3522":"# Dummies Trap","8abf6505":"# Plot","b86b28dd":"# Plotting Cumulative Accuracy Profile (CAP)","328b353c":"# Model Building \n### Comparing Models","4ba7f8bd":"# Trivials Functions","89fb5a13":"# Permutation Importance","45b65592":"# Splitting the Dataset into the training set and test set"}}