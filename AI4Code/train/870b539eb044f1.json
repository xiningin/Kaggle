{"cell_type":{"52635e1f":"code","361933f1":"code","6b887a94":"code","8574555f":"code","f93724ea":"code","c4341e15":"code","ae49f579":"code","2d48d537":"code","30484a01":"code","71a4cbb9":"code","7a0db4e7":"code","46ebfa50":"code","db1165e6":"code","09fe7d58":"code","274efca6":"code","78ef91fd":"code","283d3437":"code","9b6c1842":"markdown","2741f202":"markdown","cb5eb7ac":"markdown","2c00eb53":"markdown","15e1d693":"markdown","8deb9728":"markdown","acb7ed80":"markdown","6e0583ec":"markdown","84e83d96":"markdown","2087936d":"markdown","3d436b86":"markdown","0e699441":"markdown","59113025":"markdown"},"source":{"52635e1f":"def functionn():\n    x=(3,1,5)\n    return x\n(q,w,e)=functionn()\nprint(q,w,e)\n\nprint('=======================')\n\n\n\ndef addition(x,y):\n    return x+y\ndef subtraction(x,y):\n    return x-y\nx=5\ny=2\nprint(addition(x,y),\"and\",subtraction(x,y))\n    ","361933f1":"a=5 #it is a global scope\ndef scopefunk():\n    a=15  # it is a local scope beacuse we used in function\n    return a\nprint(a)\n\n# first scope is global but second scope is local scope.\n\nscopefunk()\n","6b887a94":"import builtins\ndir(builtins)","8574555f":"def calculatefunction():\n    def inside_of_calculatefunction():\n        x=4\n        y=16\n        z=x%y\n        return z\n    return inside_of_calculatefunction()**4\nprint(calculatefunction())","f93724ea":"def x(a=31,y=1,q=12):\n    b=a+y+q\n    return b\nprint(x(1,2,19))\n#answer is not 44 beacuse we used different variables.1+2+19=22","c4341e15":"def f(*args):\n    for i in args:\n        print(i)\nf(2)\nprint(\"=======\")\nf(1,55,22,11)\nprint(\"_______________________\")\ndef funk(**kwargs):\n    for key,value in kwargs.items():\n        print(key,\"model is\",value)\nfunk(BWM=\"M4\",Mercedes=\"Brabus\",Lambogini=\"Gallardo\")","ae49f579":"square_root=lambda x:x**1\/2\nprint(square_root(4))\n\nprint(\"=========\")\nsum=lambda x:x+x\nprint(sum(123))","2d48d537":"citylist=[\"\u0130stanbul\",\"London\",\"New Delhi\"]\ny=map(lambda x:x+\" city\",citylist)\nprint(list(y))\n\nprint(\"or diffent example\")\n\nnumberlist=[99,11,23,float(0.54)]\na=map(lambda o:o+12,numberlist)\nprint(list(a))","30484a01":"example=\"Donald Trump\"\nit=iter(example)\nprint(next(it)) #1\nprint(next(it)) #2\nprint(next(it)) #3\nprint(*it) #and rest of them","71a4cbb9":"list1=[99,88,77,66]\nlist2=[4,3,2,1]\nzipp=zip(list1,list2)\nprint(zipp)\nzipplist=list(zipp)\nprint(zipplist)","7a0db4e7":"unzip=zip(*zipplist)\nnewlist1,newlist2=list(unzip)\nprint(newlist1)\nprint(newlist2)\nprint(type(newlist1))","46ebfa50":"example1=[2,3,4]\nresult=[i+5*5 for i in example1]\nprint(result)\n#Attention for mathematical priority :)","db1165e6":"#Maybe we can make simple exam algorithm.Each question is 10 points.60 is limit for exams\nnotes=[5,6,9,10,1,0]\nnotesresult=[\"Failed\" if (i*10)<60 else \"Passed\" for i in notes]\nprint(notesresult)\n#50(F) 60(P) 90(P) 100(P) 10(F) 0(F)","09fe7d58":"import numpy as np  \nimport pandas as pd  \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nimport statistics\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","274efca6":"data=pd.read_csv(\"..\/input\/heart.csv\")\ndata","78ef91fd":"age_average=(statistics.mean(data[\"age\"]))\nprint(age_average)","283d3437":"data[\"Aged_or_Young\"]=[\"Aged\" if i>=age_average else \"Young\" for i in data.age]\ndata.loc[:,[\"Aged_or_Young\",\"age\"]] ","9b6c1842":"it works like while and for loops.Actually these are main idea of loops.\u0130f you look at these examples you will see main idea.","2741f202":"For Data Example I read heart disease csv ","cb5eb7ac":" ITERATORS","2c00eb53":">  LIST COMPREHENS\u0130ON[](http:\/\/)","15e1d693":"> Lambda Function****\n\nWe are using Lambda Funciton for write function which is easier than normal function writing","8deb9728":"* > But for more complicated functions we use anonymous functions","acb7ed80":"> ***ARGUMENTS***","6e0583ec":"\n**At this point we are using 2 different scope:Global and Local Scopes**","84e83d96":"> ***User Defined Function Examples**\n","2087936d":"**SCOPE**","3d436b86":"> I will use age column and I will categorize for age of age.Average and older than are \"aged\" others are \"young\".Dont worry it is just example :D","0e699441":"**Nesned Function**\n\nThis functions types is used for make function in function\n\nFor example:\n\n","59113025":"Zip and Unzip on Lists"}}