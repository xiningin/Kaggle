{"cell_type":{"b0671568":"code","8051767e":"code","ba799bad":"code","4d08b860":"code","16fdb386":"code","7e9809d1":"code","3d20c3e2":"code","b9354c78":"code","4d390ecb":"code","6e3088c1":"code","e61db8c7":"code","bb81fd9f":"code","33e4eaf2":"code","68a80f3a":"code","dcead1d5":"code","ea809102":"code","e8d92369":"code","340338ff":"code","d1c156bd":"code","2a8fa56a":"code","bfd9d33f":"code","2c3c37c2":"code","6ffdd4d5":"code","979190c6":"code","5ffe02ae":"code","d991245f":"code","3774ddee":"code","1e050fd9":"code","51b97440":"code","5d002f86":"code","09b98ed6":"code","547cd027":"code","bd99a3b3":"code","bcbf4fdf":"code","16a3245e":"code","1d87b253":"code","17f56463":"code","b8fc82f0":"code","22d3299b":"code","5f4bdeb6":"code","a392e16c":"code","0290df49":"code","2a192b32":"code","13aab729":"code","2a8fd565":"code","e69cb52a":"code","d1963347":"code","e6e2a875":"code","f48a89ed":"code","75b09092":"code","47ccc26b":"code","2d81f7c2":"code","c71de9b7":"code","f2cc4079":"code","266713dd":"code","82a02567":"code","55e45265":"code","ce322285":"code","7626d5c2":"code","bd70b80a":"code","b05d3044":"code","54ce29ce":"code","b56bed90":"code","da425e2c":"code","3fec8e3a":"code","63f98c83":"code","a32cfe59":"code","dd6cc679":"code","a3312b19":"code","d63f2b63":"code","1b86620b":"code","7ee89113":"code","c38523ed":"code","f9621f25":"code","d8026764":"markdown","9039ea35":"markdown","15676f53":"markdown","e7e358a2":"markdown","a5174543":"markdown","c4f3e267":"markdown","9d08171a":"markdown"},"source":{"b0671568":"import pandas as pd\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.metrics import accuracy_score\nimport os\nimport scipy.io\nimport math\n\nfrom sklearn.utils import shuffle\n\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\nfrom tensorflow.keras.applications import resnet50\nfrom keras.preprocessing import image\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nfrom keras.applications.imagenet_utils import preprocess_input, decode_predictions\n\nimport tensorflow as tf\nfrom keras.preprocessing import image\n\nfrom sklearn.model_selection import train_test_split\n\nfrom scipy import spatial\nfrom tqdm import tqdm\n\nimport gc","8051767e":"resnet50_model = resnet50.ResNet50(weights='imagenet')","ba799bad":"styles = pd.read_csv('\/kaggle\/input\/fashion-product-images-dataset\/fashion-dataset\/styles.csv', error_bad_lines=False)\n\nshirts = styles[styles['articleType'].isin(['Shirts'])]\ntshirts = styles[styles['articleType'].isin(['Tshirts'])]\npants =  styles[styles['articleType'].isin(['Track Pants','Shorts', 'Trunk', 'Trousers', 'Track Pants', 'Tights', 'Lounge Pants', 'Lounge Shorts', 'Leggings', 'Jeans', 'Jeggings'])]\n# np.unique(styles['articleType'])\nshirts, tshirts, pants = shirts['id'].to_numpy(), tshirts['id'].to_numpy(), pants['id'].to_numpy()\nshirts.shape, tshirts.shape, pants.shape","4d08b860":"image_path = '\/kaggle\/input\/fashion-product-images-dataset\/fashion-dataset\/images\/'\n\nIMG_SIZE = 224\nLIMIT_IMAGES = 2000\nNUM_OUTPUTS = 3","16fdb386":"def load_imgs(names):\n    imgs = []\n    for i, image_name in enumerate(tqdm(names)):\n#         if i% 50 == 0 :\n#             print(f\"Loading Image {i}\")\n        try:\n            img = image.load_img(f'{image_path}{image_name}.jpg', target_size=(IMG_SIZE, IMG_SIZE))\n        except:\n            img = None\n        if img is None:\n            continue\n        img = np.array(img)\n        imgs.append(img)\n    return np.array(imgs)","7e9809d1":"print(\"Loading Images...\")\nprint(\"Shirts\")\nshirt_images = load_imgs(shirts[:LIMIT_IMAGES])\ngc.collect()\nprint(\"TShirts\")\ntshirt_images = load_imgs(tshirts[:LIMIT_IMAGES])\ngc.collect()\nprint(\"Pants\")\npant_images = load_imgs(pants[:LIMIT_IMAGES])\ngc.collect()\nprint(\"Done\")\nshirt_images.shape, tshirt_images.shape, pant_images.shape","3d20c3e2":"train_shirt_images, test_shirt_images, _, _ = train_test_split(shirt_images, np.repeat(0, shirt_images.shape[0]), test_size = 0.2)\ntrain_shirt_images.shape, test_shirt_images.shape","b9354c78":"train_tshirt_images, test_tshirt_images, _, _ = train_test_split(tshirt_images, np.repeat(0, tshirt_images.shape[0]), test_size = 0.2)\ntrain_tshirt_images.shape, test_tshirt_images.shape","4d390ecb":"train_pant_images, test_pant_images, _, _ = train_test_split(pant_images, np.repeat(0, pant_images.shape[0]), test_size = 0.2)\ntrain_pant_images.shape, test_pant_images.shape","6e3088c1":"gc.collect()","e61db8c7":"def get_vectors(imgs):\n    processed_batch = preprocess_input(imgs, mode=\"caffe\")\n    return resnet50_model.predict(processed_batch)\n\ndef get_average_vector(imgs):\n    vectors = get_vectors(imgs)\n    print(vectors.shape)\n    return np.mean(vectors, axis=0)\n\ndef closeness(a, b):\n#     print(a.shape)\n#     print(b.shape)\n    return 1 - spatial.distance.cosine(a, b)\n\ndef closest(vector, compared_to):\n    best = -5\n    best_idx = -1\n#     print(compared_to.shape)\n    for i, cmp in enumerate(compared_to):\n        c = closeness(vector, cmp)\n        if c > best:\n            best_idx = i\n            best = c\n    return best_idx, best\n\ndef b_closest(vectors, compared_to):\n    return np.array([closest(vector, compared_to)[0] for vector in vectors])","bb81fd9f":"# Get Test And Train Sets\ntrain_X = np.concatenate((train_shirt_images, train_tshirt_images, train_pant_images), axis = 0)\ntrain_Y = np.repeat((0, 1, 2), (train_shirt_images.shape[0], train_tshirt_images.shape[0], train_pant_images.shape[0]), axis = 0)\n\ntrain_vecs = get_vectors(train_X)","33e4eaf2":"gc.collect()","68a80f3a":"test_X = np.concatenate((test_shirt_images, test_tshirt_images, test_pant_images), axis = 0)\ntest_Y = np.repeat((0, 1, 2), (test_shirt_images.shape[0], test_tshirt_images.shape[0], test_pant_images.shape[0]), axis = 0)\n\ntest_vecs = get_vectors(test_X)","dcead1d5":"gc.collect()","ea809102":"from sklearn.metrics import confusion_matrix, classification_report","e8d92369":"shirt_vector = get_average_vector(train_shirt_images)\ntshirt_vector = get_average_vector(train_tshirt_images)\npant_vector = get_average_vector(train_pant_images)\ngc.collect()","340338ff":"pred_classes = decode_predictions(np.expand_dims(shirt_vector, axis=0), top=3)\npred_classes","d1c156bd":"pred_classes = decode_predictions(np.expand_dims(tshirt_vector, axis=0), top=3)\npred_classes","2a8fa56a":"pred_classes = decode_predictions(np.expand_dims(pant_vector, axis=0), top=3)\npred_classes","bfd9d33f":"test_vector = np.array([shirt_vector, tshirt_vector, pant_vector])","2c3c37c2":"\ntrain_predictions = b_closest(train_vecs, test_vector)\n\ntrain_accuracy = accuracy_score(train_Y, train_predictions)\nprint(f\"In Sample Accuracy: {train_accuracy}\")","6ffdd4d5":"\ntest_predictions = b_closest(test_vecs, test_vector)\n\ntest_accuracy = accuracy_score(test_Y, test_predictions)\nprint(f\"Out Of Sample Accuracy: {test_accuracy}\")","979190c6":"gc.collect()","5ffe02ae":"import pandas\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\n","d991245f":"trainx, trainy = shuffle(train_vecs, train_Y)\n# trainx = np.expand_dims(trainx, axis=1)\ntrainx.shape, trainy.shape","3774ddee":"def baseline_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(8, input_dim=1000, activation='relu'))\n    model.add(Dense(3, activation='softmax'))\n    # Compile model\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","1e050fd9":"estimator = KerasClassifier(build_fn=baseline_model, epochs=200, batch_size=5, verbose=0)","51b97440":"kfold = KFold(n_splits=10, shuffle=True)","5d002f86":"classify_model = estimator.fit(trainx, trainy)","09b98ed6":"preds = estimator.predict(train_vecs)\nacc = accuracy_score(train_Y, preds)\nprint(f\"In sample Accuracy: {acc}\")","547cd027":"preds = estimator.predict(test_vecs)\nacc = accuracy_score(test_Y, preds)\nprint(f\"Out of sample Accuracy: {acc}\")","bd99a3b3":"estimator.model.save('\/kaggle\/working\/keras-vlarge-963.h5')","bcbf4fdf":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn import metrics","16a3245e":"abc = AdaBoostClassifier(n_estimators=400, learning_rate=1)\nabcm = abc.fit(trainx, trainy)","1d87b253":"preds = abc.predict(train_vecs)\nacc = accuracy_score(train_Y, preds)\nprint(f\"In sample Accuracy: {acc}\")\n\nprint(classification_report(train_Y, preds))\n\npreds = abc.predict(test_vecs)\nacc = accuracy_score(test_Y, preds)\nprint(f\"Out of sample Accuracy: {acc}\")\n\nprint(classification_report(test_Y, preds))","17f56463":"import pickle\npickle.dump(abc, open('\/kaggle\/working\/ada-vvlarge-964.pickle', 'wb'))","b8fc82f0":"gc.collect()","22d3299b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader, WeightedRandomSampler\n\nfrom sklearn.preprocessing import MinMaxScaler    \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report","5f4bdeb6":"trainx, trainy = shuffle(train_vecs, train_Y)\ntrainx.shape, trainy.shape\ntx, vx, ty, vy = train_test_split(trainx, trainy, test_size = 0.2)\ntestx, testy = test_vecs.copy(), test_Y.copy()\ntx.shape, ty.shape, vx.shape, vy.shape, testx.shape, testy.shape","a392e16c":"scaler = MinMaxScaler()\ntx = scaler.fit_transform(tx)\nvx = scaler.transform(vx)\ntestx = scaler.transform(testx)\n\ntx.shape, ty.shape, vx.shape, vy.shape, testx.shape, testy.shape","0290df49":"EPOCHS = 300\nBATCH_SIZE = 100\nLEARNING_RATE = 0.00007\nNUM_FEATURES = 1000\nNUM_CLASSES = NUM_OUTPUTS","2a192b32":"class MulticlassClassification(nn.Module):\n    def __init__(self, num_feature, num_class):\n        super(MulticlassClassification, self).__init__()\n        \n        self.layer_1 = nn.Linear(num_feature, 512)\n        self.layer_2 = nn.Linear(512, 128)\n        self.layer_3 = nn.Linear(128, 64)\n        self.layer_out = nn.Linear(64, num_class) \n        \n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(p=0.2)\n        self.batchnorm1 = nn.BatchNorm1d(512)\n        self.batchnorm2 = nn.BatchNorm1d(128)\n        self.batchnorm3 = nn.BatchNorm1d(64)\n        \n    def forward(self, x):\n        x = self.layer_1(x)\n        x = self.batchnorm1(x)\n        x = self.relu(x)\n        \n        x = self.layer_2(x)\n        x = self.batchnorm2(x)\n        x = self.relu(x)\n        x = self.dropout(x)\n        \n        x = self.layer_3(x)\n        x = self.batchnorm3(x)\n        x = self.relu(x)\n        x = self.dropout(x)\n        \n        x = self.layer_out(x)\n        \n        return x","13aab729":"gc.collect()","2a8fd565":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","e69cb52a":"torch_model = MulticlassClassification(num_feature = NUM_FEATURES, num_class=NUM_CLASSES)\ntorch_model.to(device)\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(torch_model.parameters(), lr=LEARNING_RATE)\nprint(torch_model)","d1963347":"def multi_acc(y_pred, y_test):\n    y_pred_softmax = torch.log_softmax(y_pred, dim = 1)\n    _, y_pred_tags = torch.max(y_pred_softmax, dim = 1)    \n    \n    correct_pred = (y_pred_tags == y_test).float()\n    acc = correct_pred.sum() \/ len(correct_pred)\n    \n    acc = torch.round(acc) * 100\n    \n    return acc","e6e2a875":"accuracy_stats = {\n    'train': [],\n    \"val\": []\n}\nloss_stats = {\n    'train': [],\n    \"val\": []\n}","f48a89ed":"class ClassifierDataset(Dataset):\n    \n    def __init__(self, X_data, y_data):\n        self.X_data = X_data\n        self.y_data = y_data\n        \n    def __getitem__(self, index):\n        return self.X_data[index], self.y_data[index]\n        \n    def __len__ (self):\n        return len(self.X_data)\n\n\ntrain_dataset = ClassifierDataset(torch.from_numpy(tx).float(), torch.from_numpy(ty).long())\nval_dataset = ClassifierDataset(torch.from_numpy(vx).float(), torch.from_numpy(vy).long())\ntest_dataset = ClassifierDataset(torch.from_numpy(testx).float(), torch.from_numpy(testy).long())","75b09092":"train_loader = DataLoader(dataset=train_dataset,\n                          batch_size=BATCH_SIZE\n)\nval_loader = DataLoader(dataset=val_dataset, batch_size=1)\ntest_loader = DataLoader(dataset=test_dataset, batch_size=1)","47ccc26b":"print(\"Begin training.\")\nfor e in tqdm(range(1, EPOCHS+1)):\n    # TRAINING\n    train_epoch_loss = 0\n    train_epoch_acc = 0\n    torch_model.train()\n    for X_train_batch, y_train_batch in train_loader:\n        X_train_batch, y_train_batch = X_train_batch.to(device), y_train_batch.to(device)\n        optimizer.zero_grad()\n        \n        y_train_pred = torch_model(X_train_batch)\n        \n        train_loss = criterion(y_train_pred, y_train_batch)\n        train_acc = multi_acc(y_train_pred, y_train_batch)\n        \n        train_loss.backward()\n        optimizer.step()\n        \n        train_epoch_loss += train_loss.item()\n        train_epoch_acc += train_acc.item()\n        \n        \n    # VALIDATION    \n    with torch.no_grad():\n        \n        val_epoch_loss = 0\n        val_epoch_acc = 0\n        \n        torch_model.eval()\n        for X_val_batch, y_val_batch in val_loader:\n            X_val_batch, y_val_batch = X_val_batch.to(device), y_val_batch.to(device)\n            \n            y_val_pred = torch_model(X_val_batch)\n                        \n            val_loss = criterion(y_val_pred, y_val_batch)\n            val_acc = multi_acc(y_val_pred, y_val_batch)\n            \n            val_epoch_loss += val_loss.item()\n            val_epoch_acc += val_acc.item()\n            loss_stats['train'].append(train_epoch_loss\/len(train_loader))\n    loss_stats['val'].append(val_epoch_loss\/len(val_loader))\n    accuracy_stats['train'].append(train_epoch_acc\/len(train_loader))\n    accuracy_stats['val'].append(val_epoch_acc\/len(val_loader))\n                              \n    \n    print(f'Epoch {e+0:03}: | Train Loss: {train_epoch_loss\/len(train_loader):.5f} | Val Loss: {val_epoch_loss\/len(val_loader):.5f} | Train Acc: {train_epoch_acc\/len(train_loader):.3f}| Val Acc: {val_epoch_acc\/len(val_loader):.3f}')","2d81f7c2":"y_pred_list = []\nwith torch.no_grad():\n    torch_model.eval()\n    for X_batch, _ in test_loader:\n        X_batch = X_batch.to(device)\n        y_test_pred = torch_model(X_batch)\n        y_pred_softmax = torch.log_softmax(y_test_pred, dim = 1)\n        _, y_pred_tags = torch.max(y_pred_softmax, dim = 1)\n        y_pred_list.append(y_pred_tags.cpu().numpy())\ny_pred_list = [a.squeeze().tolist() for a in y_pred_list]","c71de9b7":"print(classification_report(testy, y_pred_list))","f2cc4079":"pickle.dump(scaler, open('\/kaggle\/working\/torch-vvlarge.scaler.pickle', 'wb'))\ntorch.save(torch_model.state_dict(), '\/kaggle\/working\/torch-vvlarge.dict')","266713dd":"gc.collect()","82a02567":"trainx2, trainy2 = shuffle(train_vecs, train_Y)\ntrainx2.shape, trainy2.shape\ntx2, vx2, ty2, vy2 = train_test_split(trainx, trainy, test_size = 0.2)\ntestx2, testy2 = test_vecs.copy(), test_Y.copy()\ntx2.shape, ty2.shape, vx2.shape, vy2.shape, testx2.shape, testy2.shape","55e45265":"scaler = MinMaxScaler()\ntx2 = scaler.fit_transform(tx2)\nvx2 = scaler.transform(vx2)\ntestx2 = scaler.transform(testx2)\n\ntx2.shape, ty2.shape, vx2.shape, vy2.shape, testx2.shape, testy2.shape","ce322285":"EPOCHS = 300\nBATCH_SIZE = 100\nLEARNING_RATE = 0.00007\nNUM_FEATURES = 1000\nNUM_CLASSES = NUM_OUTPUTS","7626d5c2":"gc.collect()","bd70b80a":"class MulticlassClassification2(nn.Module):\n    def __init__(self, num_feature, num_class):\n        super(MulticlassClassification2, self).__init__()\n        \n        self.layer_1 = nn.Linear(num_feature, 512)\n        self.layer_2 = nn.Linear(512, 128)\n        self.layer_3 = nn.Linear(128, 256)\n        self.layer_4 = nn.Linear(256, 64)\n        self.layer_out = nn.Linear(64, num_class) \n        \n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(p=0.2)\n        self.batchnorm1 = nn.BatchNorm1d(512)\n        self.batchnorm2 = nn.BatchNorm1d(128)\n        self.batchnorm3 = nn.BatchNorm1d(256)\n        self.batchnorm4 = nn.BatchNorm1d(64)\n        \n    def forward(self, x):\n        x = self.layer_1(x)\n        x = self.batchnorm1(x)\n        x = self.relu(x)\n        \n        x = self.layer_2(x)\n        x = self.batchnorm2(x)\n        x = self.relu(x)\n        x = self.dropout(x)\n        \n        x = self.layer_3(x)\n        x = self.batchnorm3(x)\n        x = self.relu(x)\n        x = self.dropout(x)\n        \n        x = self.layer_4(x)\n        x = self.batchnorm4(x)\n        x = self.relu(x)\n        x = self.dropout(x)\n        \n        x = self.layer_out(x)\n        \n        return x","b05d3044":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","54ce29ce":"torch_model2 = MulticlassClassification2(num_feature = NUM_FEATURES, num_class=NUM_CLASSES)\ntorch_model2.to(device)\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(torch_model2.parameters(), lr=LEARNING_RATE)\nprint(torch_model2)\n\n\n\ndef multi_acc(y_pred, y_test):\n    y_pred_softmax = torch.log_softmax(y_pred, dim = 1)\n    _, y_pred_tags = torch.max(y_pred_softmax, dim = 1)    \n    \n    correct_pred = (y_pred_tags == y_test).float()\n    acc = correct_pred.sum() \/ len(correct_pred)\n    \n    acc = torch.round(acc) * 100\n    \n    return acc\n\naccuracy_stats = {\n    'train': [],\n    \"val\": []\n}\nloss_stats = {\n    'train': [],\n    \"val\": []\n}","b56bed90":"class ClassifierDataset(Dataset):\n    \n    def __init__(self, X_data, y_data):\n        self.X_data = X_data\n        self.y_data = y_data\n        \n    def __getitem__(self, index):\n        return self.X_data[index], self.y_data[index]\n        \n    def __len__ (self):\n        return len(self.X_data)\n\n\ntrain_dataset2 = ClassifierDataset(torch.from_numpy(tx2).float(), torch.from_numpy(ty2).long())\nval_dataset2 = ClassifierDataset(torch.from_numpy(vx2).float(), torch.from_numpy(vy2).long())\ntest_dataset2 = ClassifierDataset(torch.from_numpy(testx2).float(), torch.from_numpy(testy2).long())\n\ntrain_loader2 = DataLoader(dataset=train_dataset2,\n                          batch_size=BATCH_SIZE\n)\nval_loader2 = DataLoader(dataset=val_dataset2, batch_size=1)\ntest_loader2 = DataLoader(dataset=test_dataset2, batch_size=1)","da425e2c":"print(\"Begin training.\")\nfor e in tqdm(range(1, EPOCHS+1)):\n    gc.collect()\n    # TRAINING\n    train_epoch_loss = 0\n    train_epoch_acc = 0\n    torch_model2.train()\n    for X_train_batch, y_train_batch in train_loader2:\n        X_train_batch, y_train_batch = X_train_batch.to(device), y_train_batch.to(device)\n        optimizer.zero_grad()\n        \n        y_train_pred = torch_model2(X_train_batch)\n        \n        train_loss = criterion(y_train_pred, y_train_batch)\n        train_acc = multi_acc(y_train_pred, y_train_batch)\n        \n        train_loss.backward()\n        optimizer.step()\n        \n        train_epoch_loss += train_loss.item()\n        train_epoch_acc += train_acc.item()\n        \n        \n    # VALIDATION    \n    with torch.no_grad():\n        \n        val_epoch_loss = 0\n        val_epoch_acc = 0\n        \n        torch_model2.eval()\n        for X_val_batch, y_val_batch in val_loader:\n            X_val_batch, y_val_batch = X_val_batch.to(device), y_val_batch.to(device)\n            \n            y_val_pred = torch_model2(X_val_batch)\n                        \n            val_loss = criterion(y_val_pred, y_val_batch)\n            val_acc = multi_acc(y_val_pred, y_val_batch)\n            \n            val_epoch_loss += val_loss.item()\n            val_epoch_acc += val_acc.item()\n            loss_stats['train'].append(train_epoch_loss\/len(train_loader))\n    loss_stats['val'].append(val_epoch_loss\/len(val_loader))\n    accuracy_stats['train'].append(train_epoch_acc\/len(train_loader))\n    accuracy_stats['val'].append(val_epoch_acc\/len(val_loader))\n                              \n    gc.collect()\n    print(f'Epoch {e+0:03}: | Train Loss: {train_epoch_loss\/len(train_loader):.5f} | Val Loss: {val_epoch_loss\/len(val_loader):.5f} | Train Acc: {train_epoch_acc\/len(train_loader):.3f}| Val Acc: {val_epoch_acc\/len(val_loader):.3f}')","3fec8e3a":"y_pred_list = []\nwith torch.no_grad():\n    torch_model2.eval()\n    for X_batch, _ in test_loader2:\n        X_batch = X_batch.to(device)\n        y_test_pred = torch_model2(X_batch)\n        y_pred_softmax = torch.log_softmax(y_test_pred, dim = 1)\n        _, y_pred_tags = torch.max(y_pred_softmax, dim = 1)\n        y_pred_list.append(y_pred_tags.cpu().numpy())\ny_pred_list = [a.squeeze().tolist() for a in y_pred_list]\n\nprint(classification_report(testy, y_pred_list))","63f98c83":"import pickle","a32cfe59":"pickle.dump(scaler, open('\/kaggle\/working\/torch-2-vlarge.scaler.pickle', 'wb'))\ntorch.save(torch_model2.state_dict(), '\/kaggle\/working\/torch-2-vlarge.dict')","dd6cc679":"gc.collect()","a3312b19":"def load_img(names):\n    print(names)\n    imgs = []\n    for i, image_name in enumerate(names):\n        if i% 50 == 0 :\n            print(f\"Loading Image {i}\")\n        img = image.load_img(f'\/kaggle\/input\/vernacular-set\/{image_name}.jpeg', target_size=(IMG_SIZE, IMG_SIZE))\n        if img is None:\n            continue\n        img = np.array(img)\n        imgs.append(img)\n    return np.array(imgs)","d63f2b63":"pred_imgs = load_img(list(range(1,17)))\npred_imgs.shape\ngc.collect()","1b86620b":"pred_vecs = get_vectors(pred_imgs)","7ee89113":"preds = abc.predict(pred_vecs)\nmap_to_names = lambda x: map(lambda y: \"Shirt\" if y == 0 else \"T-Shirt\" if y == 1 else \"Pant\", x)\npred_results = list(zip(map_to_names([0,1,0,0,0,0,1,0,1,1,1,0,2,2,0,0]), map_to_names(preds)))\nprint(pred_results)","c38523ed":"for result, image in zip(pred_results, pred_imgs):\n    plt.figure()\n    plt.title(f\"Actual: {result[0]} | Predicted: {result[1]}\")\n    plt.imshow(image)\n    ","f9621f25":"gc.collect()","d8026764":"# Average Model","9039ea35":"# Load Image Files","15676f53":"# DL for classify","e7e358a2":"# NN To Classify","a5174543":"# Constants","c4f3e267":"# New Model","9d08171a":"# ADA to classify"}}