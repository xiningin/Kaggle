{"cell_type":{"f7660e3f":"code","5ffecf52":"code","ba4f8d93":"code","e39f96c8":"code","46767b11":"code","f98eb9be":"code","4f594b9c":"code","5d16e7bc":"code","c7f2df39":"code","82b3bf07":"code","45ef0748":"code","6f7e17d0":"code","386be502":"code","d6cbc324":"code","5ef01441":"code","294a7817":"code","ba1b5e36":"code","7c24bbaa":"code","d7beb366":"code","faba854e":"code","d718c892":"markdown","ea5aae84":"markdown","31932461":"markdown","31d1cac0":"markdown","bb029d82":"markdown","c523ffaa":"markdown","b832a720":"markdown","f61d001a":"markdown","3cec9d08":"markdown","950217f6":"markdown","4c3640ad":"markdown","b8d2b4a8":"markdown","e0328d4e":"markdown","255f594b":"markdown","78c5e6b4":"markdown","1e21c4c8":"markdown","b47e1fdb":"markdown","6e8a1141":"markdown","f347d883":"markdown","cab6057e":"markdown","c3cec22c":"markdown","79e5df06":"markdown","0f68cf04":"markdown","5e790e61":"markdown"},"source":{"f7660e3f":"pip install rdflib","5ffecf52":"pip install common","ba4f8d93":"# Install necessary Python pakcages\n# rdflib: RDF composition and querying with SPARQL in Python.\nfrom rdflib import RDFS, RDF, Namespace, Graph, URIRef\n\n# Other imports\nfrom common import *","e39f96c8":"# Helper functions\ndef is_notebook():\n    try:\n        shell = get_ipython().__class__.__name__\n        if shell == 'ZMQInteractiveShell':\n            return True   # Jupyter notebook or qtconsole\n        elif shell == 'TerminalInteractiveShell':\n            return False  # Terminal running IPython\n        else:\n            return False  # Other type (?)\n    except NameError:\n        return False      # Probably standard Python interpreter\n\ndef print_graph(g):\n    g_str = g.serialize(format='turtle').decode('utf-8')\n    new_g_str = ''\n    for line in g_str.split('\\n'):\n        if 'prefix' not in line:\n            new_g_str += line + '\\n'\n    if is_notebook():\n        display(Markdown('```turtle\\n' + new_g_str + '\\n```'))\n    else:\n        print(g_str)","46767b11":"g = Graph() # Initialize a graph\nRDFS # predefined namespace as 'http:\/\/www.w3.org\/2000\/01\/rdf-schema#'\nRDF # predefined namespace as 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#'\nBRICK = Namespace('https:\/\/brickschema.org\/schema\/1.0.1\/Brick#')\nBF = Namespace('https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#')\nEX = Namespace('http:\/\/example.com#')\ng.bind('ex', EX)\ng.bind('brick', BRICK)\ng.bind('bf', BF)\ng.bind('rdfs', RDFS)\ng.bind('rdf', RDF)","f98eb9be":"# Add the triple using RDFLib's syntactic sugar.\n\nfirst_triple1 = (EX['AHU-1'], RDF.type, BRICK['AHU']) # AHU-1 is an instance of a TagSet, BLD-A\nprint('The triple in Python:')\nprint(first_triple1)\nprint('\\nThe triple in Turtle:')\ng.add(first_triple1)\nprint_graph(g)\n# \"a\" is a common abbreviation of \"rdf:type\"'","4f594b9c":"# Add the triple using RDFLib with bare URIs.\n# first_triple1 is same as first_triple2 but in different style.\n\nfirst_triple2 = (URIRef('http:\/\/example.com#AHU-1'), URIRef('http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type'), URIRef('https:\/\/brickschema.org\/schema\/1.0.1\/Brick#AHU'))\ng.add(first_triple2)\nprint_graph(g)","5d16e7bc":"# Use RDFLib syntax hereafter\n\n# Rm-B100 is an instance of Basement.\ng.add((EX['Room-B100'], RDF['type'], BRICK['Basement'])) \n\n# AHU-1 is located in Room-B100.\ng.add((EX['AHU-1'], BF['isLocatedIn'], EX['Room-B100']))\n\nprint_graph(g)","c7f2df39":"# VAV-2150 is an instance of VAV\ng.add((EX['VAV-2150'], RDF['type'], BRICK['VAV']))\n\n# AHU-1 feeds VAV-2150\ng.add((EX['AHU-1'], BF['feeds'], BRICK['VAV-2150']))\n\nprint_graph(g)","82b3bf07":"# Zone-2150 is an instance of HVAC_Zone\ng.add((EX['Zone-2150'], RDF['type'], BRICK['HVAC_Zone']))\n\n# VAV-2150 feeds Zone-2150\ng.add((EX['VAV-2150'], BF['feeds'], EX['Zone-2150']))\n\nprint_graph(g)","45ef0748":"# ZNT-2150 is an instance of Zone_Temperature_Sensor\ng.add((EX['ZNT-2150'], RDF['type'], BRICK['Zone_Temperature_Sensor']))\n\n# ZNT-2150 is point of VAV-2150\ng.add((EX['ZNT-2150'], BF['isPointOf'], EX['VAV-2150']))\n\n# ZNT-2150 is located In Zone-2150\ng.add((EX['ZNT-2150'], BF['isLocatedIn'], EX['Zone-2150']))\n\nprint_graph(g)","6f7e17d0":"# Save the graph\ng.serialize(destination='sample_building_sol.ttl', format='turtle') # You can open the file in jupyter GUI.\n\n# Load the graph\ng = Graph() # Initialize a new graph.\ng.parse('sample_building_sol.ttl', format='turtle') # Load the stored graph.\ng.parse('Brick\/dist\/Brick.ttl', format='turtle') # Load Brick schema.","386be502":"### Querying All S, P and O.\n\ng = Graph()\ng.parse('sample_building_sol.ttl', format='turtle')\nq = \"\"\"\nselect ?s ?p ?o where {\n?s ?p ?o .\n}\n\"\"\"\nres = g.query(q)\nfor row in res:\n    print(row)","d6cbc324":"### Querying Only S and P \n# ?o is inside the where clauses but not in the varible declarations. \n# ?o will be considered for the pattern but not included in the answer..\n\nq = \"\"\"\nselect ?s ?p where {\n?s ?p ?o .\n}\n\"\"\"\nres = g.query(q)\nfor row in res:\n    print(row)","5ef01441":"# Load the graph with Brick for querying.\ng = Graph() # Initialize a new graph.\ng.parse('sample_building_sol.ttl', format='turtle') # Load the stored graph.\ng.parse('Brick\/dist\/Brick.ttl', format='turtle') # Load Brick schema. We need it to exploit the hierarchy.","294a7817":"### Find ?s where ?s is an instance of Zone_Temperature_Sensor.\n\nq = \"\"\"\nPREFIX brick: <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#>\nPREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\nPREFIX rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#>\nPREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\n\nselect ?s where {\n?s rdf:type brick:Zone_Temperature_Sensor.\n}\n\"\"\"\n\nres = g.query(q)\nfor row in res:\n    print(row)","ba1b5e36":"### Find ?s where ?s is any type of Sensor.\n\nq = \"\"\"\nPREFIX brick: <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#>\nPREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\nPREFIX rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#>\nPREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\nselect ?s where {\n?s rdf:type ?sensorClass .\n?sensorClass rdfs:subClassOf+ brick:Sensor .\n}\n\"\"\"\nres = g.query(q)\nfor row in res:\n    print(row)","7c24bbaa":"q = \"\"\"\nPREFIX brick: <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#>\nPREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\nPREFIX rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#>\nPREFIX bf: <https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#>\n\nselect ?z where {\n?z rdf:type brick:HVAC_Zone .\n#?z rdf:type\/rdfs:subClassOf brick:Zone . # use this if you want to be more agnostic to zone types.\n}\n\"\"\"\nres = g.query(q)\nfor row in res:\n    print(row)","d7beb366":"# VAV-2150 is an instance of VAV\nq = \"\"\"\nPREFIX brick: <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#>\nPREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\nPREFIX rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#>\nPREFIX bf: <https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#>\nselect ?z where {\n?z rdf:type brick:HVAC_Zone .\nex:AHU-1 bf:feeds+ ?z .\n}\n\"\"\"\nres = g.query(q)\nfor row in res:\n    print(row)","faba854e":"q = \"\"\"\nPREFIX brick: <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#>\nPREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\nPREFIX rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#>\nPREFIX bf: <https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#>\nselect ?s ?r where {\n  ?s bf:isLocatedIn ?r .\n  ?s rdf:type brick:Zone_Temperature_Sensor .\n  ?r rdf:type brick:HVAC_Zone .\n}\n\n\"\"\"\nres = g.query(q)\nfor row in res:\n    print(row)","d718c892":"### 4.3. Querying tuples.\n1. SPARQL is capable of finding tuples of variables. The variables after select constitutte a tuple format.","ea5aae84":"### Excercise 2.1. Add other information for AHU-1\n1. We stated that \"AHU-1\" is an instance of Brick's AHU TagSet. What kind of information do you want to put more? Let's add those:  \n  - Define VAV-2150 is an instance of VAV (https:\/\/brickschema.org\/schema\/1.0.1\/Brick#VAV)\n  - Define AHU-1 feeds air to VAV-2150 (https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#feeds)","31932461":"<img src=\"files\/composition\/ahu_room_vav_zone.png\">","31d1cac0":"### 2.2.  Add location information for AHU-1\n1. Let's add other information, AHU-1's location. Say AHU-1 is located in Room-B100, which is in the basement.\n  - Say the basement's URI is [ex:Room-B100](http:\/\/example.com#Room-B2150).\n  - Define the basement is an instance of [brick:Basement](https:\/\/brickschema.org\/schema\/1.0.1\/Brick#Basement).\n  - AHU-1 is located in BLD-A. [bf:isLocatedIn](https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#isLocatedIn).","bb029d82":"### 4.2. Subclass and intsance relationships","c523ffaa":"### 4.1. Iterating SPARQL Results in RDFLib.\n\n- A row of results in SPARQL is a tuple of variables in the query.\n- Let's see the result of the very basic query.","b832a720":"<img src=\"files\/composition\/ahu_room.png\">","f61d001a":"## 4. SPARQL Basic\n1. [SPARQL](https:\/\/www.w3.org\/TR\/sparql11-query\/) is a standard query langauge over RDF.\n2. You can define variables and a query pattern, then the SPARQL querying engine returns instances matching the pattern.\n3. Define variables followed by a question mark (?) after \"select\". Define a desired pattern inside \"where\". \n  - Find ?s where any ?p and any ?o are associated with ?s as predicate and object individually. \n      ```SPARQL\n      select ?s where {\n      ?s ?p ?o .\n      }\n      ```\n    This returns all subjects in the entire graph.\n   - Find ?s where ?s is a type of any subclasses of Sensor and also ?s is located in Room-101.\n       ```SPARQL\n       PREFIX brick: <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#>\n       PREFIX bf: <https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#>\n       PREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\n       PREFIX rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#>\n       PREFIX rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#>\n       PREFIX ex: <http:\/\/example.com#>\n       select ?s where {\n         ?sensortype rdfs:subClassOf+ brick:Sensor .\n         ?s rdf:type ?sensortype .\n         ?s bf:isLocatedIn ex:Room-101 .\n       }\n       ```","3cec9d08":"# This file is from: https:\/\/github.com\/BuildSysUniformMetadata\/brick-tutorial-buildsys2017","950217f6":"### Excercise 2.3. Add a Zone_Temperature_Sensor called ZNT-2150 and associate it with others.\n1. Define ZNT-2150 as an instance of Zone_Temperature_Sensor\n2. ZNT-2150 is point of VAV-2150 (i.e., ZNT-2150 functions for VAV-2150)\n3. ZNT-2150 is located in Zone-2150.","4c3640ad":"### Expected Output:\n(rdflib.term.URIRef('http:\/\/example.com#Zone-2150'),)\n","b8d2b4a8":"## Excercise 4.2. Find zones fed+ by AHU-1.\n1. Extend Excercise 3.1. to relate feeds relationships with the zones found there.","e0328d4e":"<img src=\"files\/composition\/ahu.png\">","255f594b":"## 2. Adding triples\n### 2.1. Your first triple.\nEach triple consists of Subject-Predicate-Object. Each of S-P-O is a URI. Let's make \"*AHU-1 is an instance of AHU TagSet*\". AHU-1 is the name of our instance in EX. AHU in Brick is a TagSet. AHU-1 and AHU is associated with instantiation relationship. \n\n- In RDF (Turtle syntax), their full URIs are:\n```turtle\n<http:\/\/example.com#AHU-1>\n<http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type>\n<https:\/\/brickschema.org\/schema\/1.0.1\/Brick#AHU>\n```\n- It can be reduced by using namespace prefixes (Turtle syntax)\n```turtle\nex:AHU-1\nrdf:type # It is often written as \"a\", which is an abbreviation of \"is a\".\nbrick:AHU\n```\n- Python RDFLib\n```python\nEX['AHU-1']\nRDF['type']\nBRICK['AHU']\n```\n\nTriple is the minimum unit that you can add into a graph. In is represented as just enumeration of S-P-O in a line in Turtle and a tuple in RDFLib. Below examples represent same things.\n\n- Turtle with full namespaces\n```turtle\n<http:\/\/example.com#AHU-1> <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#AHU> .\n```\n- Turtle with namesapce abbreviations\n```turtle\nex:AHU-1 rdf:type brick:AHU .\n```\n- RDFLib (Python code)\n```python\n(EX['AHU-1'], RDF['type'], BRICK['AHU'])\n```\n\nWe will use RDFLib for composition in Python and serialize them in Turtle.","78c5e6b4":"## 3. Save\/Load the graph in Turtle \n1. We can save and load the graph. We stick to Turtle format among multiple possible serialization formats.\n2. When you load, you can load multiple graph files into a graph.","1e21c4c8":"### Expected Output:\n```turtle\n@prefix bf: <https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#> .\n@prefix brick: <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#> .\n@prefix ex: <http:\/\/example.com#> .\n@prefix rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#> .\n@prefix rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#> .\n@prefix xml: <http:\/\/www.w3.org\/XML\/1998\/namespace> .\n@prefix xsd: <http:\/\/www.w3.org\/2001\/XMLSchema#> .\n\nex:AHU-1 a brick:AHU ;\n    bf:feeds ex:VAV-2150 ;\n    bf:isLocatedIn ex:Room-B100 .\n\nex:Room-B100 a brick:Basement .\n\nex:VAV-2150 a brick:VAV .\n```","b47e1fdb":"## Excercise 2.2. Add a Zone associated with VAV-2150\n1. Let's define Zone that VAV-2150 is feeding.\n  - Define Zone-2150 is an instance of HVAC_Zone\n  - Define VAV-2150 feeds Zone-2150\n  - Define AHU-1 feeds VAV-2150","6e8a1141":"## Excercise 4.1. Find zones.\n1. Let's find zones. Use the rdf:type and\/or rdfs:subClassOf+ ","f347d883":"## 1. Initialize a graph and define namespaces\n1. Initialize a graph in rdflib. A graph in RDF is like a whiteboard where you will put your triples.\n2. A URI represents an entity and a URI consists of a namespace and an identifier. All URIs should be unique and namespaces are prefixes that help avoiding reusing the same identifiers in other domains.\n  - Namespace: \"http:\/\/example.com#\", Identifier: \"AHU-1\", -> URI: \"http:\/\/example.com#AHU-1\"\n  - E.g., If you want to use AHU-1 for Building-A and Building-B, you may want to use different namespaces for different buildings while using AHU-1 consistently.\n3. We use following namespaces:\n  - RDFS and RDF are namespaces defined for general purpose in Semantic Web.\n  - BRICK is Brick's namespace for TagSets. \n  - EX is our building's namespace. We will intantiate our entities under this namespace.","cab6057e":"<img src=\"files\/composition\/ahu_room_vav.png\">","c3cec22c":"### Expected Output:\n```turtle\nex:AHU-1 a brick:AHU ;\n    bf:feeds brick:VAV-2150 ;\n    bf:isLocatedIn ex:Room-B100 .\n\nex:ZNT-2150 a brick:Zone_Temperature_Sensor ;\n    bf:isLocatedIn ex:Zone-2150 ;\n    bf:isPointOf ex:VAV-2150 .\n\nex:Room-B100 a brick:Basement .\n\nex:VAV-2150 a brick:VAV ;\n    bf:feeds ex:Zone-2150 .\n\nex:Zone-2150 a brick:HVAC_Zone .\n```","79e5df06":"<img src=\"files\/type_query.png\">","0f68cf04":"### Expected Output:\n```turtle\n@prefix bf: <https:\/\/brickschema.org\/schema\/1.0.1\/BrickFrame#> .\n@prefix brick: <https:\/\/brickschema.org\/schema\/1.0.1\/Brick#> .\n@prefix ex: <http:\/\/example.com#> .\n@prefix rdf: <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#> .\n@prefix rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#> .\n@prefix xml: <http:\/\/www.w3.org\/XML\/1998\/namespace> .\n@prefix xsd: <http:\/\/www.w3.org\/2001\/XMLSchema#> .\n\nex:AHU-1 a brick:AHU ;\n    bf:feeds brick:VAV-2150 ;\n    bf:isLocatedIn ex:Room-B100 .\n\nex:VAV-2150 a brick:VAV ;\n    bf:feeds ex:Zone-2150 .\n\nex:Room-B100 a brick:Basement .\n\nex:Zone-2150 a brick:HVAC_Zone .\n```","5e790e61":"<img src=\"files\/composition\/ahu_room_vav_zone_znt.png\">"}}