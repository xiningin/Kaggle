{"cell_type":{"928a84e6":"code","d874952d":"code","2b883c27":"code","77dbf5f0":"code","a9bd99e7":"code","24f74527":"code","9d3b7740":"code","038583bc":"code","d8cfad1f":"code","54c43854":"code","f2382bf6":"code","2f3716a9":"code","df862e44":"code","69cf3daa":"code","6232434a":"code","29620722":"code","aaac1e8b":"code","767e8390":"code","c6f6ef9e":"code","488f3738":"code","9218077d":"code","7cccee0f":"code","e1c54169":"code","396be473":"code","0bf9ea89":"code","9822ba5c":"code","85db3ce2":"code","292e8de6":"code","72afa01a":"code","d6789f94":"markdown","0af59d74":"markdown","b77f49cd":"markdown","55a05028":"markdown","1e2b92d5":"markdown","e414dc10":"markdown","0d2c9483":"markdown","23d86660":"markdown","c324b88b":"markdown"},"source":{"928a84e6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling as pp # exploratory data analysis EDA\nimport matplotlib.pyplot as plt # data visualization\nimport plotly.express as px #data visualisation\nfrom sklearn.preprocessing import MinMaxScaler #preprocessing\nfrom keras.models import Sequential #neural network\nfrom keras.layers import Dense, LSTM #neural network\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint","d874952d":"# install selenium, chromium and its drivers\n!pip install selenium\n!apt-get update # to update ubuntu to correctly run apt install\n!apt install chromium-chromedriver -y\n!cp \/usr\/lib\/chromium-browser\/chromedriver \/usr\/bin","2b883c27":"#here we set up the driver environment for chrome so it can be used in kaggle notebook\nimport sys\nsys.path.insert(0,'\/usr\/lib\/chromium-browser\/chromedriver')\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\noptions = Options()\noptions.add_argument('--headless')\noptions.add_argument('--no-sandbox')\noptions.add_argument('--disable-dev-shm-usage')\ndriver = webdriver.Chrome('chromedriver',options=options)","77dbf5f0":"#we'll build the url based on what we found previously\nfrom datetime import date\ntoday = date.today()\nd1 = today.strftime(\"%Y-%m-%d\")\nlink = 'https:\/\/ethereumprice.org\/history\/?start=2016-01-01&end='+d1+'&currency=USD'\n","a9bd99e7":"#setting up environment for executing script \nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\n\n\ndriver.get(link)\n#the download will be automatically located in kaggle output folder\ndriver.execute_script(\"arguments[0].click();\", WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \".fa-download\"))))","24f74527":"#Read the dataset\ninput_path='.\/2016-01-01_'+d1+'_ethereumprice_org.csv'\ndf=pd.read_csv(input_path)\n","9d3b7740":"#explore firts rows of dataset\ndf.head()","038583bc":"# Create pandas profile report and save it to html\nprofile = pp.ProfileReport(df, title = \"EDA\")\nprofile.to_file(output_file=\"reporte.html\") ","d8cfad1f":"#Convert the timestamp column to datetime object\ndf['timestamp']= pd.to_datetime(df['timestamp'],unit='s')\ndf.head()","54c43854":"# Drop columns high, low, close\ndf=df.drop(['high','low','close'],axis=1)\n","f2382bf6":"#reverse dataframe order so newest observations go to the end\ndf = df[::-1].reset_index(drop=True)","2f3716a9":"df=df.set_index('timestamp')","df862e44":"#plot data\nfig=px.line(df['open'],title=\"Historical ethereum open price 2026-2021, daily\")\nfig.show()","69cf3daa":"#split dataframe in training and test set\nfrom sklearn.model_selection import train_test_split\ntrain, test = train_test_split(df, test_size=0.1, shuffle=False)\ntrain['open'].plot(legend=True)\ntest['open'].plot(legend=True)\nplt.legend(['training', 'test'])\nplt.show()\nprint(test.shape)","6232434a":"train","29620722":"#Normalize training set\nsc = MinMaxScaler(feature_range=(0,1))\ntrain_scaled = sc.fit_transform(train)","aaac1e8b":"# La red LSTM tendr\u00e1 como entrada \"time_step\" datos consecutivos, y como salida 1 dato (la predicci\u00f3n a\n# partir de esos \"time_step\" datos). Se conformar\u00e1 de esta forma el set de entrenamiento\ntime_step = 30\nX_train = []\nY_train = []\nm = len(train_scaled)\n","767e8390":"for i in range(time_step,m):\n    # X: bloques de \"time_step\" datos: 0-time_step, 1-time_step+1, 2-time_step+2, etc\n    X_train.append(train_scaled[i-time_step:i,0])\n\n    # Y: el siguiente dato\n    Y_train.append(train_scaled[i,0])\nX_train, Y_train = np.array(X_train), np.array(Y_train)\nprint(X_train.shape)\nprint(X_train)\nprint(Y_train)\n# Reshape X_train para que se ajuste al modelo en Keras\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nprint(X_train.shape)\nprint(X_train)","c6f6ef9e":"#  LSTM Network\n\nInput_shape = (X_train.shape[1],1)\nOutput_shape = 1\nna = 30\n\nmodel = Sequential()\nmodel.add(LSTM(units=na, input_shape=Input_shape))\nmodel.add(Dense(units=Output_shape))\nmodel.summary()\n","488f3738":"#here we set some callbacks for training and execute the training\ncallbacks = [EarlyStopping(monitor='loss', mode='min', verbose=1,patience=5),ModelCheckpoint(filepath='model.hdf5',monitor='val_loss', save_best_only=True, verbose=1,mode='min')]\nmodel.compile(optimizer='rmsprop', loss='mse')\nhistory=model.fit(X_train,Y_train,epochs=50,batch_size=60,callbacks=callbacks)","9218077d":"# Gr\u00e1ficar la funci\u00f3n de p\u00e9rdida\nplt.plot(history.history['loss'])\nplt.title('loss function')\nplt.ylabel('mse')\nplt.xlabel('Epoch')\nplt.legend(['training'], loc='upper right')\nplt.show()","7cccee0f":"# Test (predicci\u00f3n del valor de las acciones)\nx_test = test.values\nx_test = sc.transform(x_test)\n\nX_test = []\nfor i in range(time_step,len(x_test)):\n    X_test.append(x_test[i-time_step:i,0])","e1c54169":"X_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nprint(X_test.shape)","396be473":"prediccion = model.predict(X_test)\nprediccion = sc.inverse_transform(prediccion)","0bf9ea89":"\n# Funciones auxiliares\ndef graficar_predicciones(real, prediccion):\n    plt.plot(real,color='red', label='Real coin value(USD)')\n    plt.plot(prediccion, color='blue', label='Predicted value (USD)')\n    plt.ylim(1.1 * np.min(real)\/2, 1.1 * np.max(real))\n    plt.xlabel('Time')\n    plt.ylabel('Ethereum price')\n    plt.legend()\n    plt.show()\n\ngraficar_predicciones(np.delete(test.values,[range(30)]),prediccion)","9822ba5c":"#using the model to actually predict values in future\nx=test.values[-60:]\nx=sc.transform(x)\n    \nX = np.array(x)\nX = np.reshape(X,(1,X.shape[0],X.shape[1]))\n\nX.shape","85db3ce2":"Prediction=model.predict(X) \nPrediction=sc.inverse_transform(Prediction)\nPrediction","292e8de6":"future_values = x\n\nfor i in range(5):\n    a=model.predict(X) \n    future_values = np.append(future_values,a,axis=0)\n    future_values = np.delete(future_values,0,axis=0)\n    X=np.reshape(future_values,(1,future_values.shape[0],future_values.shape[1]))\n\nfuture_values = sc.inverse_transform(future_values)\nfuture_values","72afa01a":"\nddd=np.concatenate((future_values),axis=0)\nplt.plot(ddd)\n","d6789f94":"# Credits\n\nethereumprice.org provided the data for this model","0af59d74":"Test model with test data","b77f49cd":"Build and train RNN","55a05028":"We'll use the library selenium (and chromiunm) to automatically download the historical ethereum price to this day. Every time the dataset grows (i.e. each day), the training and validation set will be redefined.","1e2b92d5":"According to EDA, there are no missing values on the dataset, although we can find many undefined values for high, low and close prices (1245 rows),we will exlude this colums from the analysis as we will be using a daily \"open price\" approach. Dates should stay as timestamps object for the sclaer to work properly","e414dc10":"Building the model","0d2c9483":"Now we'll use the model to predict the next 30 values of ethereum ","23d86660":"This notebook is not finished! ","c324b88b":"An html inspection on the target webpage  https:\/\/ethereumprice.org\/history\/ showed that there's a script that needs to be executed in order to start the download, the script is triggered through a click on a download icon identified with the  css selector **.fa-download.**\nAditionally, it was found that everytime a date range is specified the url asociated to the webpage its updated following the next sintax:\n*...?start=yyyy-mm-dd&end=yyyy-mm-dd&currency=xxx*\nThis information is then passed to the  mentioned script so the resulting csv contains the information of the specific date range."}}