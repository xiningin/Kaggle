{"cell_type":{"283a6121":"code","693bdb46":"code","0dfc3131":"code","f6e21a2d":"code","1407cb0c":"code","ac768591":"code","9ae920f6":"code","8b43305b":"code","e68b934f":"code","d8a22286":"code","acf4742c":"code","f95727c3":"code","aab8a90c":"code","fb6edade":"code","75a8f11f":"code","ce052ed0":"code","daa2ffdc":"code","645fb414":"code","3c79bf58":"code","ebca0de9":"code","bf3b5a3a":"code","5f86290c":"code","ae4dd8c4":"code","a60017f1":"code","fabdd1a0":"code","b4c54bd6":"code","ea80b880":"code","2a56a331":"code","e9d49c69":"code","58652c3d":"code","02f0e4ee":"code","0b2dba35":"code","19cac0eb":"code","8f718874":"code","57a649de":"code","96369627":"code","d3a239e2":"code","c2232684":"code","a9638541":"code","b6d175cd":"code","2d9edf13":"code","559a5f0a":"code","e59a1d0c":"code","f458e18c":"code","6801ee69":"code","0bebf823":"code","b51839a9":"code","d65eb66b":"code","921b2328":"code","fa56fe69":"code","bb138a4a":"code","8b239fbe":"code","d802281b":"code","02cbf5d0":"code","d46012d1":"code","64167452":"code","699a44dc":"code","09c73e9a":"code","7c5c17a9":"code","416a3cf2":"code","928e56f7":"code","5a4c49ee":"code","ea7d83d6":"code","137fa66a":"code","6720eb8b":"code","95894628":"code","0628ab97":"code","d447c9be":"markdown","67505ea6":"markdown","9d96c950":"markdown","8c3fe088":"markdown","8aa00c60":"markdown","31cf2c68":"markdown","63b9a9d0":"markdown","b26c3d3c":"markdown","b7ed21e0":"markdown","70a9c32d":"markdown","f2202611":"markdown","df471b70":"markdown","f47b3c7f":"markdown","3c81aa58":"markdown","cadc4e5a":"markdown","6544b372":"markdown","5ab732a2":"markdown","f68a982e":"markdown","475e8c99":"markdown","911c7d8a":"markdown","748070c2":"markdown","6b34150e":"markdown","53d35a6b":"markdown","48cf7e28":"markdown","041020cf":"markdown","5bb68758":"markdown","0ec88a75":"markdown","58252d6c":"markdown","e21d1fdc":"markdown","00f0d7c6":"markdown","3d45f387":"markdown","e5976215":"markdown","0926786e":"markdown","dc898966":"markdown","3567af6b":"markdown","988179db":"markdown","a7cecaf6":"markdown","d8168218":"markdown","73da6875":"markdown"},"source":{"283a6121":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy","693bdb46":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0dfc3131":"df = pd.read_csv(\"\/kaggle\/input\/automobile-dataset\/Automobile_data.csv\")\ndf","f6e21a2d":"df.describe(include='all')","1407cb0c":"df.info()","ac768591":"for col in df:\n    print(\"Column number: \", col)\n    print(df[col].value_counts())\n    print(\"\")","9ae920f6":"for col in df:\n    if df[col].dtype==\"object\":\n        df[col] = df[col].str.replace('?', '0')\ndf","8b43305b":"df.isnull().sum()","e68b934f":"df.info()","d8a22286":"for col in df:\n    if df[col].dtype==\"object\":\n        mode = df[col].mode()[0]\n        df[col][df[col] == '0'] = mode\n    if df[col].dtype == 'int':\n        mode = df[col].mode()[0]\n        df[col][df[col] == 0] = mode\n    if df[col].dtype == 'float':\n        median = df[col].median\n        df[col][df[col] == 0] = median\ndf","acf4742c":"for col in df:\n    print(\"Column number: \", col)\n    print(df[col].value_counts())\n    print(\"\")","f95727c3":"for col in df:\n    if df[col].dtype==\"object\":\n        num = pd.to_numeric(df[col], errors='coerce').notnull().all()\n        if num == True:\n            df[col] = df[col].astype(float)\n            print(df[col])\ndf","aab8a90c":"df.drop(['normalized-losses'], axis=1, inplace=True)\ndf","fb6edade":"df = df[df['price'] !=0].dropna()\ndf","75a8f11f":"df.info()","ce052ed0":"sns.displot(df['price'])","daa2ffdc":"drive_wheel_count = df['drive-wheels'].value_counts().to_frame()\ndrive_wheel_count.rename(columns={'drive-wheels':'value_counts'}, inplace=True)\ndrive_wheel_count","645fb414":"sns.boxplot(x='drive-wheels', y='price', data=df)","3c79bf58":"y = df['price']\nx = df['engine-size']\nplt.scatter(x,y)\n\nplt.title('Scatterplot engine-size vs price')\nplt.xlabel('engine-size')\nplt.ylabel('price')","ebca0de9":"df_test = df[['drive-wheels', 'body-style', 'price']]\ndf_group = df_test.groupby(['drive-wheels', 'body-style'], as_index=False).mean()\ndf_group","bf3b5a3a":"df_pivot = df_group.pivot(index='drive-wheels', columns='body-style')\nplt.pcolor(df_pivot, cmap='RdBu')\nplt.colorbar\nplt.show","5f86290c":"sns.regplot(x='highway-mpg', y='price', data=df)\nplt.ylim(0,)","ae4dd8c4":"sns.regplot(x='peak-rpm', y='price', data=df)\nplt.ylim(0,)","a60017f1":"bins = np.linspace(df['price'].min(), df['price'].max(), 4)\ngroup_names = [1, 2, 3]\ndf['price_binned'] = pd.cut(df['price'], bins, labels=group_names, include_lowest=True)\ndf","fabdd1a0":"from sklearn import preprocessing\nfrom sklearn.preprocessing import OrdinalEncoder\n\nenc = OrdinalEncoder()\n\nfor col in df:\n    if df[col].dtype==\"object\":\n        df[col] = enc.fit_transform(df[col].values.reshape(-1,1))\n    if df[col].dtype.name==\"category\":\n        df[col] = df[col].astype(str)\ndf\n","b4c54bd6":"df.info()","ea80b880":"for col in df:\n    if df[col].dtype==\"object\":\n        num = pd.to_numeric(df[col], errors='coerce').notnull().all()\n        if num == True:\n            df[col] = df[col].astype(float)\n            print(df[col])\ndf","2a56a331":"for col in df:\n    print(\"Column number: \", col)\n    print(df[col].value_counts())\n    print(\"\")","e9d49c69":"target = df['price']\ndf.drop(['price'], axis=1, inplace=True)","58652c3d":"#df = (df - np.average(df)) \/ (np.std(df))\n#df","02f0e4ee":"#calculate polynomial to 3rd degree\nX = df['highway-mpg'].values.ravel()\ny = target.values.ravel()\n\nplt.scatter(X, y)\nplt.show()","0b2dba35":"mymodel = np.poly1d(np.polyfit(X, y, 3))\n\nmyline = np.linspace(int(X.min()), int(X.max()), int(y.max()))\n\nplt.scatter(X, y)\nplt.plot(myline, mymodel(myline))\nplt.show()","19cac0eb":"from sklearn.preprocessing import PolynomialFeatures\n\n\nX = df['highway-mpg'].values.reshape(-1,1)\ny = target.values.reshape(-1,1)\n\ntrans = PolynomialFeatures(degree=3)\nX= trans.fit_transform(X)","8f718874":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression().fit(X, y)\nyhat = model.predict(X)\nprint(model.score(X, y))\n\nprint(model.intercept_)\nprint(model.coef_)","57a649de":"from sklearn.metrics import mean_squared_error\n\nprint(mean_squared_error(y, yhat))","96369627":"plt.figure(figsize=(10,10))\nplt.scatter(y, yhat, c='crimson')\nplt.yscale('log')\nplt.xscale('log')\n\np1 = max(max(yhat), max(y))\np2 = min(min(yhat), min(y))\nplt.plot([p1, p2], [p1, p2], 'b-')\nplt.xlabel('Actual Values', fontsize=15)\nplt.ylabel('Predictions', fontsize=15)\nplt.axis('equal')\nplt.show()","d3a239e2":"df = (df - df.min()) \/ (df.max() - df.min())\ndf","c2232684":"from scipy.stats import chi2_contingency\n\nstat, p, dof, expected = chi2_contingency(df)\n\nalpha = 0.05\n\nif p <= alpha:\n    print(\"dependent (reject ho)\")\nelse:\n    print(\"independent (ho holds true)\")\n    \nprint(p)","a9638541":"#for col in df:\n#    q_low = df[col].quantile(0.01)\n#    q_hi  = df[col].quantile(0.99)\n#    df_filtered = df[(df[col] < q_hi) & (df[col] > q_low)]\n\n#df_filtered","b6d175cd":"y = target\nX = df","2d9edf13":"from sklearn.feature_selection import SelectKBest, f_regression\n\nskb = SelectKBest(f_regression, k=12)\n\nX = skb.fit_transform(X, y)\nX.shape, y.shape","559a5f0a":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape","e59a1d0c":"from sklearn.linear_model import LinearRegression\n\nX = df['highway-mpg'].values.reshape(-1,1)\ny = target.values.reshape(-1,1)\n\nmodel = LinearRegression().fit(X, y)\nyhat = model.predict(X)\nprint(model.score(X, y))\n\nprint(model.intercept_)\nprint(model.coef_)","f458e18c":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(model, X, y, cv=3)\nprint(scores)","6801ee69":"from sklearn.model_selection import cross_val_predict\n\nyhat = cross_val_predict(model, X, y, cv=3)\nprint(yhat)","0bebf823":"#this does not work with polynomial regression\ntest_X = np.array(30).reshape(-1,1)\nprint(test_X)\n\nprediction = model.predict(test_X)\nprint(\"Prediction: \", prediction)\nprint(\"Coef: \",model.coef_)","b51839a9":"plt.figure(figsize=(10,10))\nplt.scatter(y, yhat, c='crimson')\nplt.yscale('log')\nplt.xscale('log')\n\np1 = max(max(yhat), max(y))\np2 = min(min(yhat), min(y))\nplt.plot([p1, p2], [p1, p2], 'b-')\nplt.xlabel('Actual Values', fontsize=15)\nplt.ylabel('Predictions', fontsize=15)\nplt.axis('equal')\nplt.show()","d65eb66b":"sns.regplot(x='highway-mpg', y=target, data=df)\nplt.ylim(0,)","921b2328":"ax1 = sns.distplot(target, hist=False, color='r', label=\"Acrual Value\")\nsns.distplot(yhat, hist=False, color='b', label='Fitted Values', ax=ax1)","fa56fe69":"sns.residplot(x='highway-mpg', y=target, data=df)\nplt.ylim(0,)","bb138a4a":"from sklearn.linear_model import LinearRegression\n\ny = target.values.reshape(-1,1)\nZ = df[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']].values.reshape(-1,4)\n\nmodel = LinearRegression().fit(Z, y)\nyhat = model.predict(Z)\nprint(model.score(Z, y))\n\nprint(model.intercept_)\nprint(model.coef_)","8b239fbe":"fig, ax = plt.subplots()\nax.scatter(y, yhat, edgecolors=(0, 0, 0))\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","d802281b":"plt.figure(figsize=(10,10))\nplt.scatter(y, yhat, c='crimson')\nplt.yscale('log')\nplt.xscale('log')\n\np1 = max(max(yhat), max(y))\np2 = min(min(yhat), min(y))\nplt.plot([p1, p2], [p1, p2], 'b-')\nplt.xlabel('Actual Values', fontsize=15)\nplt.ylabel('Predictions', fontsize=15)\nplt.axis('equal')\nplt.show()","02cbf5d0":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_predict\n\ny = target.values.reshape(-1,1)\nZ = df[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']].values.reshape(-1,4)\n\ncv = 3\n\nmodel = LinearRegression()\nyhat = cross_val_predict(model, Z, y, cv=cv)\nfinal_model = model.fit(Z, y)\nnew_predictions = final_model.predict(Z)\nscores = cross_val_score(final_model, X, y, cv=cv)\nprint(scores)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))\nprint(final_model.score(Z, y))\n\nprint(final_model.intercept_)\nprint(final_model.coef_)","d46012d1":"fig, ax = plt.subplots()\nax.scatter(y, new_predictions, edgecolors=(0, 0, 0))\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","64167452":"from sklearn.linear_model import Ridge\nfrom sklearn.metrics import r2_score\n\nmodel = Ridge(alpha=10).fit(Z,y)\nyhat = model.predict(Z)\nprint(\"Score: \",model.score(Z, y))\nprint(\"R2 score :\", r2_score(y, yhat))\nprint(model)","699a44dc":"fig, ax = plt.subplots()\nax.scatter(y, yhat, edgecolors=(0, 0, 0))\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","09c73e9a":"from sklearn.linear_model import RidgeCV\nfrom sklearn.metrics import r2_score\n\nmodel = RidgeCV(alphas=(0.001, 0.01, 0.1, 1.0, 10.0)).fit(Z,y)\nyhat = model.predict(Z)\nprint(\"Score: \",model.score(Z, y))\nprint(\"R2 score :\", r2_score(y, yhat))\nprint(\"Best Score:\", model.best_score_)\nprint(model)","7c5c17a9":"fig, ax = plt.subplots()\nax.scatter(y, yhat, edgecolors=(0, 0, 0))\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","416a3cf2":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\n\nRFR = RandomForestRegressor()\n\ny = target          \nZ = df[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']].values.reshape(-1,4)\n\nparameters = {'n_estimators':[100, 500], 'criterion':('mae', 'mse'), 'max_features': ('auto', 'sqrt', 'log2')}\n\nreg = GridSearchCV(RFR, parameters).fit(Z, y)\nprint(reg.best_params_)","928e56f7":"from sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=500, criterion='mae', max_features='sqrt', random_state=1).fit(Z,y)\ny_pred = model.predict(Z)\nprint(model.score(Z, y))","5a4c49ee":"fig, ax = plt.subplots()\nax.scatter(y, y_pred, edgecolors=(0, 0, 0))\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","ea7d83d6":"import xgboost as xgb\n\nmodel = xgb.XGBRegressor(verbosity=0).fit(X_train, y_train)\nprint(model.score(X_train, y_train))","137fa66a":"y_pred = model.predict(X_val)\ny_pred = y_pred.astype(int)\nprint(model.score(X_val, y_val))","6720eb8b":"from sklearn.metrics import mean_squared_error\n\nrmse = mean_squared_error(y_val, y_pred, squared=False)\nrmse","95894628":"df=pd.DataFrame({'Actual': y_val, 'Predicted':y_pred})\ndf","0628ab97":"plt.figure(figsize=(10,10))\nplt.scatter(y_val, y_pred, c='crimson')\nplt.yscale('log')\nplt.xscale('log')\n\np1 = max(max(y_pred), max(y_val))\np2 = min(min(y_pred), min(y_val))\nplt.plot([p1, p2], [p1, p2], 'b-')\nplt.xlabel('Actual Values', fontsize=15)\nplt.ylabel('Predictions', fontsize=15)\nplt.axis('equal')\nplt.show()","d447c9be":"Multiple linear regression with cross val predict","67505ea6":"Occurances of ? in each cell","9d96c950":"Remove outliers","8c3fe088":"Drop normalised_losses because it has too many null cells","8aa00c60":"Simple linear regression","31cf2c68":"Polynomial regression","63b9a9d0":"Import","b26c3d3c":"Binning","b7ed21e0":"Graphics","70a9c32d":"Convert categorical values to a string","f2202611":"RidgeCV","df471b70":"Correlation","f47b3c7f":"Check occurances of bins","3c81aa58":"Multiple linear regression","cadc4e5a":"Normalise","6544b372":"Chi2","5ab732a2":"Predict on validation set","f68a982e":"Format columns and make them float","475e8c99":"Grid search cv","911c7d8a":"Analyse price","748070c2":"XGB","6b34150e":"Drop rows that have zero price","53d35a6b":"Drop price from df","48cf7e28":"Select K Best","041020cf":"Analysedrive","5bb68758":"Impute zero values","0ec88a75":"Define X and y","58252d6c":"Ridge regression to prevent overfitting","e21d1fdc":"Groupby","00f0d7c6":"Standardise","3d45f387":"Analyse data","e5976215":"Split","0926786e":"Pivot table","dc898966":"Read","3567af6b":"Format columns and make them float","988179db":"Replace ?","a7cecaf6":"Check errors","d8168218":"Occurances of each cell in column","73da6875":"Load"}}