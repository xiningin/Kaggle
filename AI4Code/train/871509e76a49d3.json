{"cell_type":{"b5b68da8":"code","a86146e0":"code","b0579e85":"code","38a67503":"code","1eddf73c":"code","9e29b57f":"code","40907990":"code","a537ea77":"code","87588957":"code","5468334e":"code","05358d05":"code","000573cc":"code","3012cc52":"code","abaad07c":"code","dd04b32a":"code","177f433e":"code","ec461a64":"code","03d0ee16":"code","4c6ce4be":"code","53e8bed0":"code","a77a1bf1":"code","6b9e4a18":"code","45702581":"code","2b7c5dc8":"code","710aeef2":"code","f2a68439":"code","060a11ab":"code","4ff0ae79":"code","06a6c61e":"code","69f7097e":"code","39a5fb44":"code","1dd2f790":"code","9dd637ab":"code","7ed2a2e1":"code","bfd49f69":"code","bcba8de9":"markdown","88a545c2":"markdown","59bfbc54":"markdown","ae1633e9":"markdown","cd728b4d":"markdown","855bcdb0":"markdown","d59d3137":"markdown","23c9abae":"markdown","80101073":"markdown","b82fbfef":"markdown","d7c92788":"markdown","768d105e":"markdown","dc0c2703":"markdown","cd8dfd3a":"markdown","1464ba5e":"markdown","94177ad8":"markdown","a922910f":"markdown","314d74ee":"markdown","6a2dc670":"markdown","3a87513b":"markdown","f21ef4ff":"markdown","aabf7e33":"markdown","2dba3bd0":"markdown","c3217268":"markdown","9c117935":"markdown","55659358":"markdown","9e0ce50a":"markdown","fe86d09d":"markdown","dee42605":"markdown","b054d504":"markdown","d8d84970":"markdown","fc15e947":"markdown"},"source":{"b5b68da8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir('..\/input'))","a86146e0":"df = pd.read_csv('..\/input\/Salaries.csv')\ndf.head()","b0579e85":"df.info()","38a67503":"df.describe()","1eddf73c":"toCorrect = list(df.columns[3:7])\n# status columns has no float type, lets skip it\n# toCorrect.append(df.columns[12])\ntoCorrect","9e29b57f":"ldict = {}\nfor i in toCorrect:\n    ldict[i] = set()\n    for j in df[i].unique():\n        ldict[i].add(type(j))\nldict","40907990":"ldict = {}\ntemp = {}\nfor i in toCorrect:\n    ldict[i] = set()\n    count = 0\n    temp[i] = []\n    for j in df[i].unique():\n        if(type(j) == str):\n            ldict[i].add(j)\n            # limit as list would go long as in version 3\n            if count < 5:\n                temp[i].append(j)\n                count += 1\ntemp","a537ea77":"import re\npatt = re.compile(\"[A-Z]+.*\",re.IGNORECASE)\nfor i in list(ldict.keys()):\n    print(i,end=\" = [\")\n    for j in ldict[i]:\n        if patt.match(j):\n            print(j,end=\", \")\n    print(\"]\")","87588957":"df[(df['BasePay'] == 'Not Provided') | (df['OvertimePay'] == 'Not Provided') | (df['OtherPay'] == 'Not Provided') | \n   (df['Benefits'] == 'Not Provided')]","5468334e":"df = df[~df['Id'].isin([148647,148651,148652,148653])]\ndf.head()","05358d05":"for i in toCorrect:\n    df[i] = pd.Series(map(lambda l:np.float64(l), df[i]))\n# running previous piece of code to check type\nldict = {}\nfor i in toCorrect:\n    ldict[i] = set()\n    for j in df[i].unique():\n        ldict[i].add(type(j))\nldict","000573cc":"df.isnull().sum()","3012cc52":"del df['Notes']\ndel df['Status']","abaad07c":"df[df['BasePay'].isnull()].head(2)","dd04b32a":"df[df['Benefits'].isnull()].head(2)","177f433e":"df.fillna(value=0,inplace=True)","ec461a64":"df.describe()","03d0ee16":"toCorrect.extend(['TotalPay', 'TotalPayBenefits'])\nfor i in toCorrect:\n    df[i] = df[i].apply(lambda l: np.float64(0) if l < 0 else l)\ndf.describe()","4c6ce4be":"df[df['JobTitle'].apply(lambda l: ((l.upper().find('POLICE DEPARTMENT') != -1)) | (l.upper().find('POLICE OFFICER') != -1) | (l.upper() == 'CHIEF OF POLICE'))]['JobTitle'].unique()","53e8bed0":"df[df['JobTitle'].apply(lambda l: l.upper() == 'TRANSIT OPERATOR')]['JobTitle'].unique()","a77a1bf1":"# RE to match string ending with <any text><space><numbers> \npatt = re.compile(\".* [0-9]+$\")\n\n# replace numbers with roman equivalent\ndef i2r(n):\n    roman = ''\n    d = {1000 : 'M', 900 : 'CM', 500 : 'D', 400 : 'CD', 100 : 'C', 90 : 'XC', 50 : 'L', 40 : 'XL', 10 : 'X', 9 : 'IX', 5 : 'V', 4 : 'IV', 1 : 'I'}\n    while n > 0:\n        for i in d.keys():\n            while n >= i:\n                roman += d[i]\n                n -= i\n    return roman\n\ndef norm(l):\n    # convert to uppercase\n    l = l.upper()\n    # to convert to roman\n    if patt.match(l):\n        i = 1\n        while True:\n            if l[-i:].isdecimal():\n                i += 1\n            else:\n                break\n        l = l[:-i] + ' ' + i2r(int(l[-i:]))\n    return l \n\nprint(norm('Transit Operator 12'))","6b9e4a18":"df['JobTitle'] = df['JobTitle'].apply(norm)\n# check for previous duplication\ndf[df['JobTitle'].apply(lambda l: ((l.upper().find('POLICE DEPARTMENT') != -1)) | (l.upper().find('POLICE OFFICER') != -1) | (l.upper() == 'CHIEF OF POLICE'))]['JobTitle'].unique()","45702581":"df['EmployeeName'] = df['EmployeeName'].apply(str.upper)\ndf.head()","2b7c5dc8":"sns.countplot(df['Year'], palette='magma')","710aeef2":"jobcount = df['JobTitle'].value_counts()[:20]\nsns.barplot(x=jobcount, y=jobcount.keys())","f2a68439":"fig, ax = plt.subplots(4, figsize = (8, 13))\nfor i in range(4):\n    jcount = df[df['Year'] == (2011 + i)]['JobTitle'].value_counts()[:10]\n    sns.barplot(x=jcount, y = jcount.keys(),ax = ax[i])\n    ax[i].set_title(str(2011+i))\n    ax[i].set_xlabel(' ')\n    ax[i].set_xlim(0,2500)","060a11ab":"param = ['BasePay', 'Benefits', 'TotalPay']\ndef by_year(emp_list):\n    d = df[df['JobTitle'].isin(emp_list)].groupby(['JobTitle', 'Year']).mean().reset_index()\n    for i in range(3):\n        splot = sns.factorplot(data = d, x = param[i], y = 'JobTitle', hue = 'Year', kind = 'bar', size = len(emp_list) * 2).set(title = param[i])\n        #splot = sns.catplot(data = d, x = param[i], y = 'JobTitle', hue = 'Year', kind = 'bar', aspect = len(emp_list) \/ 2.5, height = len(emp_list) * 1.5).set(title = param[i])","4ff0ae79":"top5s = df['JobTitle'].value_counts().keys()[:5]","06a6c61e":"by_year(top5s)","69f7097e":"def dist_by_year(emp):\n    fig, ax = plt.subplots(3, 1, figsize = (15,13))\n    for i in range(3):\n        sns.violinplot(data = df[df['JobTitle'] == emp], x = 'Year', y = param[i], ax = ax[i]).set(title = param[i])\n","39a5fb44":"dist_by_year('TRANSIT OPERATOR')","1dd2f790":"def dist_among_job(emp_list):\n    fig1, ax1 = plt.subplots(4, 1, figsize = (16,13))\n    fig2, ax2 = plt.subplots(4, 1, figsize = (16,13))\n    fig3, ax3 = plt.subplots(4, 1, figsize = (16,13))\n    for i in range(4):\n        sns.violinplot(data = df[(df['JobTitle'].isin(emp_list)) & (df['Year'] == (2011 + i))], x = 'JobTitle', y = 'BasePay', ax = ax1[i])\n    for i in range(4):\n        sns.violinplot(data = df[(df['JobTitle'].isin(emp_list)) & (df['Year'] == (2011 + i))], x = 'JobTitle', y = 'Benefits', ax = ax2[i])\n    for i in range(4):\n        sns.violinplot(data = df[(df['JobTitle'].isin(emp_list)) & (df['Year'] == (2011 + i))], x = 'JobTitle', y = 'TotalPay', ax = ax3[i])\n    ax1[0].set(title='BasePay - 2011-14')\n    ax2[0].set(title='Benefits - 2011-14')\n    ax3[0].set(title='TotalPay - 2011-14')\n    ","9dd637ab":"dist_among_job(top5s)","7ed2a2e1":"def large_dist_among_job(emp_list):\n    fig1, ax1 = plt.subplots(4, 1, figsize = (16,13))\n    fig2, ax2 = plt.subplots(4, 1, figsize = (16,13))\n    fig3, ax3 = plt.subplots(4, 1, figsize = (16,13))\n    \n    for i in range(4):\n        for j in range(len(emp_list)):\n            sns.distplot(df[df['JobTitle'] == emp_list[j]]['BasePay'], hist = False, label = emp_list[j], ax = ax1[i])\n            \n    for i in range(4):\n        for j in range(len(emp_list)):\n            sns.distplot(df[df['JobTitle'] == emp_list[j]]['Benefits'], hist = False, label = emp_list[j], ax = ax2[i])\n            \n    for i in range(4):\n        for j in range(len(emp_list)):\n            sns.distplot(df[df['JobTitle'] == emp_list[j]]['TotalPay'], hist = False, label = emp_list[j], ax = ax3[i])\n            \n    ax1[0].set(title='BasePay - 2011-14')\n    ax2[0].set(title='Benefits - 2011-14')\n    ax3[0].set(title='TotalPay - 2011-14')\n    ","bfd49f69":"large_dist_among_job(df[df['JobTitle'].apply(lambda l: ((l.upper().find('POLICE OFFICER') != -1)) | (l.upper().find('CHIEF OF POLICE') != -1))]['JobTitle'].unique()[:10])","bcba8de9":"**Also apply str.upper for EmployeeName**","88a545c2":"**Lets bring them (numeric string) in one type**","59bfbc54":"**Notes and Status have lot of NaN, lets remove them** ","ae1633e9":"**Write a method to plot distribution of a 'BasePay', 'Benefits' and 'TotalPay' JobTitle by year using violin-plot**","cd728b4d":"**Apply above function**","855bcdb0":"**Read csv**","d59d3137":"**These are only 4 columns, and there is no information provided by these columns, so we can delete them**","23c9abae":"**Do it for JobTitle for which most record are available**","80101073":"**Check it yearwise**","b82fbfef":"**Most of them show numbers as string, but there are some string (alphabetic) values. Check what values they are?**","d7c92788":"**Normalizing above cases for JobTitle**","768d105e":"**Data transformed and cleaned, time for EDA**<br>\n**Check with number of records yearwise**","dc0c2703":"**Start with what different types are in each columns**","cd8dfd3a":"**See what data type these columns has**","1464ba5e":"**Examine few examples of NaN values**","94177ad8":"**Write a simple method that would accept a list of JobTitle and plot multiple barplots for 'BasePay', 'Benefits' and 'TotalPay' yearwise for each element in that list**","a922910f":"**These are string values that we can't directly convert to string**","314d74ee":"**Import libraries**","6a2dc670":"**There are some duplicate entries in JobTitle**<br>\n**For example, POLICE OFFICER 3 and POLICE OFFICER III**","3a87513b":"**min value for payment is negative, make it zero**","f21ef4ff":"**Check for records of POLICE OFFICER**","aabf7e33":"**Lets check number of job title records**","2dba3bd0":"**Float is ok. Check what values of str (String) are there**","c3217268":"**For BasePay and Benefits, it is clear that NaN values are zeroes (from TotalPay and TotalPayBenefits)**<br>\n**So, simply fill NaN values with 0**","9c117935":"**Looks good, lets run describe method**","55659358":"**Columns(3,4,5,6,12) have mixed type, lets check that using info**","9e0ce50a":"# Salary Analysis - plenty of data cleaning and methods for EDA","fe86d09d":"**Check for NaN values**","dee42605":"**For describe() it won't get any details on those columns**","b054d504":"**Write a method for same for large number of JobTitle**","d8d84970":"**Also some entries like Transit Operator appear twice as Complete UPPERCASE and Capitalized**","fc15e947":"**Write a method to above plots for comparison between number of JobTitles**"}}