{"cell_type":{"a5f7ab93":"code","dc70005b":"code","243034f1":"code","f9c3a2f4":"code","9395e2a0":"markdown","d31ebed6":"markdown","4b4ca1ed":"markdown"},"source":{"a5f7ab93":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom time import time\nfrom sklearn.metrics import accuracy_score\n\n%matplotlib inline","dc70005b":"# Imputer to fill in missing values\n# Classified the continous sequence into 'good' & 'bad' categories\n\ndf = pd.read_csv('..\/input\/winequality-red.csv')\nimputer = SimpleImputer()\nimputer.fit_transform(df)\nbins = (1, 6.5, 12)\ngroup_names = ['bad', 'good']\ndf['quality'] = pd.cut(df['quality'], bins=bins, labels=group_names)\ndf['quality'] = df['quality'].cat.codes\nX = df.drop(['quality'], axis=1)\ny = df[['quality']]\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=1511)\n","243034f1":"#SVC generates an accuracy of around 0.91\n\nt0 = time()\nclf = SVC(C=1, kernel='rbf')\nclf.fit(train_X, train_y)\nprint('Training time', round(time() - t0, 3), 's')\npred = clf.predict(test_X)\npred = pred.tolist()\nfor i in range(len(pred)):\n  pred[i] = round(pred[i])\nprint('Score', accuracy_score(test_y, pred))","f9c3a2f4":"# Random Forest generates an accuracy of around 0.93\n\nt00 = time()\nclf1 = RandomForestClassifier(n_estimators=1000, n_jobs=-1, max_depth=100)\nclf1.fit(train_X, train_y)\nprint('Training time', round(time() - t00, 3), 's')\npred1 = clf1.predict(test_X)\npred1 = pred1.tolist()\nfor i in range(len(pred1)):\n  pred[i] = round(pred1[i])\nprint('Score', accuracy_score(test_y, pred1))","9395e2a0":"# Random Forest Classifier","d31ebed6":"# SVC","4b4ca1ed":"# Data Preprocessing"}}