{"cell_type":{"b8749bef":"code","42f5277a":"code","2de04264":"code","85e54b46":"code","19221689":"code","f3798fb3":"code","fdf80a4b":"code","a5dad2c6":"code","7fdeafc7":"code","41013115":"code","a5d71f44":"code","95503e4d":"code","a7462479":"code","792a5ea1":"code","7b60d229":"code","25a66b9d":"markdown","8d6e6e18":"markdown"},"source":{"b8749bef":"import pandas as pd \nimport pickle\nimport time\nimport cv2\nimport os\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\n\nfrom IPython.display import Image, display\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.layers import Conv2D, ZeroPadding2D, Activation, Input, concatenate\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.layers import MaxPooling2D, AveragePooling2D\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import minmax_scale as Norm\nfrom tensorflow.keras.utils import to_categorical","42f5277a":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","2de04264":"from tensorflow.keras.utils import to_categorical\nX_train = np.load('..\/input\/merged\/xtest.npy')\ny_train = np.load('..\/input\/merged\/ytest.npy')\nX_test = np.load('..\/input\/merged\/xval.npy')\ny_test = np.load('..\/input\/merged\/yval.npy')\n\nnoofClasses = 6\nprint(X_train.shape)\nprint(y_train.shape)\ny_train = to_categorical(y_train, noofClasses)\ny_test = to_categorical(y_test, noofClasses)","85e54b46":"with strategy.scope():\n    model = Sequential()\n    model.add(Conv2D(32, 5, padding=\"same\", input_shape=(150, 150, 3), name = 'L1'))\n    model.add(Conv2D(32, 5, padding=\"same\", name = 'L2'))\n    model.add(BatchNormalization())\n    model.add(Activation(\"relu\"))\n    model.add(MaxPooling2D(2))\n    #2nd conv layer\n    model.add(Conv2D(64, 3, padding=\"valid\", name = 'L3'))\n    model.add(Conv2D(64, 3, padding=\"valid\", name = 'L4'))\n    model.add(BatchNormalization())\n    model.add(Activation(\"relu\"))\n    model.add(MaxPooling2D(2))\n\n    #3rd conv layer (from here model gives good result)\n    model.add(Conv2D(128, 3, padding=\"valid\", name = 'L5'))\n    model.add(Conv2D(128, 3, padding=\"valid\",name ='L6'))\n    model.add(BatchNormalization())\n    model.add(Activation(\"relu\"))\n    model.add(MaxPooling2D(2))\n    model.add(Dropout(0.5))\n\n    model.add(Flatten())\n\n    #FC1\n    model.add(Dense(1024, name = 'L7'))\n    model.add(BatchNormalization())\n    model.add(Activation(\"relu\"))\n    model.add(Dropout(0.5))\n\n    \n    #FC2\n    model.add(Dense(256,name = 'L8'))\n    #model.load_weights(by_name=True,filepath = filepath)\n    model.add(BatchNormalization())\n    model.add(Activation(\"relu\"))\n    model.add(Dropout(0.5))\n\n    #output FC\n    model.add(Dense(6, name = 'L9'))\n    #model.add(Activation('softmax'))\n    adam = tf.keras.optimizers.Adam(lr=0.001)\n    #model.summary()\n    model.compile(loss='BinaryCrossentropy', metrics=['acc'], optimizer='adam')\n\nhistory = model.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test), shuffle=1, verbose=1)#, callbacks=[mc])","19221689":"model.get_layer('L6').output","f3798fb3":"model.save(\"chestx-ray6311.h5\")","fdf80a4b":"img_size = (150, 150)\nlast_conv_layer_name = \"L6\"\nimg_path ='..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/person1009_virus_1694.jpeg'\ndisplay(Image(img_path))\n\ndef get_img_array(img_path, size):\n    image = cv2.imread(img_path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image,size)\n    array = np.expand_dims(image, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer as well as the output predictions\n    grad_model = tf.keras.models.Model(\n        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n    )\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        last_conv_layer_output, preds = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        class_channel = preds[:, pred_index]\n\n    # This is the gradient of the output neuron (top predicted or chosen)\n    # with regard to the output feature map of the last conv layer\n    grads = tape.gradient(class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    # then sum all the channels to obtain the heatmap class activation\n    last_conv_layer_output = last_conv_layer_output[0]\n    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = tf.maximum(heatmap, 0) \/ tf.math.reduce_max(heatmap)\n    return heatmap.numpy()","a5dad2c6":"# Prepare image\nimg_array = get_img_array(img_path, size=img_size)\npreds = model.predict(img_array)\nprint(\"Predicted:\", preds)\n#model.layers[-1].activation = 'softmax'\nheatmap = make_gradcam_heatmap(img_array, model, last_conv_layer_name)\nplt.matshow(heatmap)\nplt.show()","7fdeafc7":"def save_and_display_gradcam(img_path, heatmap, cam_path=\"cam.jpg\", alpha=0.4):\n    # Load the original image\n    #image = cv2.imread(img_path)\n    #image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    img = keras.preprocessing.image.load_img(img_path)\n    img = keras.preprocessing.image.img_to_array(img)\n\n    # Rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # Use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # Use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # Create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n    #jet_heatmap = cv2.imread(jet_heatmap)\n    #jet_heatmap = cv2.cvtColor(jet_heatmap, cv2.COLOR_BGR2RGB)\n    #jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    \"\"\"\n    jet_heatmap = jet_heatmap.resize((image.shape[1], img.shape[0]))\n    jet_heatmap =  cv2.imread(jet_heatmap)\n    jet_heatmap = cv2.cvtColor(jet_heatmap, cv2.COLOR_BGR2RGB)\"\"\"\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * alpha + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n    #superimposed_img =  cv2.imread(superimposed_img)\n    #superimposed_img = cv2.cvtColor(superimposed_img, cv2.COLOR_BGR2RGB)\n\n    # Save the superimposed image\n    superimposed_img.save(cam_path)\n\n    # Display Grad CAM\n    display(Image(cam_path))","41013115":"save_and_display_gradcam(img_path, heatmap)","a5d71f44":"model_builder = keras.applications.xception.Xception\nimg_size = (299, 299)\npreprocess_input = keras.applications.xception.preprocess_input\ndecode_predictions = keras.applications.xception.decode_predictions\n\nlast_conv_layer_name = \"block14_sepconv2_act\"\n\n# The local path to our target image\n#img_path ='..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/person1009_virus_1694.jpeg'\ndisplay(Image(img_path))","95503e4d":"def get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer as well as the output predictions\n    grad_model = tf.keras.models.Model(\n        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n    )\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        last_conv_layer_output, preds = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        class_channel = preds[:, pred_index]\n        print('class channel',class_channel.shape,'\\n',last_conv_layer_output.shape)\n\n    # This is the gradient of the output neuron (top predicted or chosen)\n    # with regard to the output feature map of the last conv layer\n    grads = tape.gradient(class_channel, last_conv_layer_output)\n    print(class_channel.shape,grads.shape)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    # then sum all the channels to obtain the heatmap class activation\n    last_conv_layer_output = last_conv_layer_output[0]\n    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = tf.maximum(heatmap, 0) \/ tf.math.reduce_max(heatmap)\n    return heatmap.numpy()","a7462479":"# Prepare image\nimg_array = preprocess_input(get_img_array(img_path, size=img_size))\n\n# Make model\nmodel = model_builder(weights=\"imagenet\")\n\n# Remove last layer's softmax\nmodel.layers[-1].activation = None\n\n# Print what the top predicted class is\npreds = model.predict(img_array)\nprint(\"Predicted:\", decode_predictions(preds, top=1)[0])\n\n# Generate class activation heatmap\nheatmap = make_gradcam_heatmap(img_array, model, last_conv_layer_name)\n\n# Display heatmap\nplt.matshow(heatmap)\nplt.show()","792a5ea1":"print(\"Predicted:\", decode_predictions(preds, top=10)[0])","7b60d229":"def save_and_display_gradcam(img_path, heatmap, cam_path=\"cam.jpg\", alpha=0.4):\n    # Load the original image\n    img = keras.preprocessing.image.load_img(img_path)\n    img = keras.preprocessing.image.img_to_array(img)\n\n    # Rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # Use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # Use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # Create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * alpha + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    superimposed_img.save(cam_path)\n\n    # Display Grad CAM\n    display(Image(cam_path))\n\n\nsave_and_display_gradcam(img_path, heatmap)","25a66b9d":"# our model","8d6e6e18":"# xception"}}