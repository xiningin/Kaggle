{"cell_type":{"b3a5bf20":"code","f6e63a64":"code","5dd895bb":"code","d2ee763c":"code","5c9f70ba":"code","59ae0d68":"code","63fbccc7":"code","979911ed":"code","97459305":"code","da115651":"code","edfe0ada":"code","2895c56c":"code","a3a0fe22":"code","3da7b036":"code","6963f37f":"code","5a666c46":"code","e597b2b1":"code","7e4eb926":"code","12b1a075":"code","fd1f9363":"code","cb3a7034":"code","84608e5d":"code","0cd6bd27":"code","257d8707":"code","d632816a":"code","b260366c":"code","195c1e5b":"code","05efa446":"code","3d052ab4":"code","39b15340":"code","05e52b55":"code","66e49f19":"code","e3783ea1":"code","3b8dbf35":"code","614f64f0":"code","883066f9":"code","fdb88c80":"code","38e81134":"code","4af43fb8":"code","ae3b31e4":"code","c71d6054":"code","3e86e8c9":"code","24435af5":"code","c22375aa":"code","a4fbfca5":"code","3e92877c":"code","756c2af1":"code","09160b14":"markdown","cefe015c":"markdown","299bb2e7":"markdown","81561bbd":"markdown","d5f34f96":"markdown","99359d52":"markdown","4b00723d":"markdown","eb282eb0":"markdown","f1b5cabe":"markdown","3a35d7d6":"markdown","37e2ce65":"markdown","f52f61c8":"markdown","0dd94c57":"markdown","852dce3e":"markdown","0c45a00e":"markdown","7bc0d286":"markdown","8b194b40":"markdown","66ca2c16":"markdown","117de7cc":"markdown","80cba1cb":"markdown","72cb5563":"markdown","17a21df5":"markdown","4904a87b":"markdown","f6c860ec":"markdown","e0963b00":"markdown","a12974eb":"markdown","2982f33b":"markdown","97924e9b":"markdown","d85560e7":"markdown","4fa8d533":"markdown","7557d7d5":"markdown","d9374359":"markdown","4eab8f09":"markdown","e07ae047":"markdown","7e58421a":"markdown"},"source":{"b3a5bf20":"from matplotlib import pyplot as plt\nimport plotly.express as px\nimport scikitplot as skplt\nimport missingno as msno\nimport pandas as pd\nimport numpy as np\nimport os\nimport re\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f6e63a64":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder, MinMaxScaler, LabelBinarizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom catboost import CatBoostClassifier\nfrom sklearn.svm import LinearSVC, SVC\nfrom xgboost import XGBClassifier","5dd895bb":"import seaborn as sns\ncm = sns.light_palette(\"red\", as_cmap=True)\ncm_discret = {\"1.0\":\"red\",\"0.0\":\"gray\",\"nan\":\"gainsboro\"}","d2ee763c":"path = \"\/kaggle\/input\/stroke-prediction-dataset\/\"\ndf = pd.read_csv(f\"{path}healthcare-dataset-stroke-data.csv\").set_index(\"id\", drop=True)\ndf.head(10).style.background_gradient(cmap=cm)","5c9f70ba":"msno.bar(df, figsize=(30,2), color='red')","59ae0d68":"df[\"smoking_status\"].unique()","63fbccc7":"dfplt = df.copy(deep=True)\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.histogram(dfplt, x=\"smoking_status\",color=\"stroke\",\n                   color_discrete_map=cm_discret)\n\nfig.show()\n","979911ed":"df.loc[(df[\"smoking_status\"]==\"formerly smoked\") | (df[\"smoking_status\"]==\"smokes\"),\"smoke\"] = 1\ndf[\"smoke\"]=df[\"smoke\"].fillna(0)\ndf[\"smoke\"]=df[\"smoke\"].astype(\"int\")","97459305":"df.groupby([\"stroke\",\"smoke\"])[\"stroke\"].count()","da115651":"sroke_smoke=df[(df[\"smoke\"]==1)&(df[\"stroke\"]==1)][\"smoke\"].sum()\/df[df[\"stroke\"]==1][\"stroke\"].sum()\nstroke=df[df[\"stroke\"]==1][\"stroke\"].count()\/df[\"stroke\"].count()\n\nprint(\"Stroke Rate: \",'{:,.2%}'.format(stroke))\nprint(\"Stroke Smoking Rate: \",'{:,.2%}'.format(sroke_smoke))","edfe0ada":"dfplt = df.copy(deep=True)\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.histogram(dfplt, x=\"gender\",color=\"stroke\",\n                   color_discrete_map=cm_discret)\nfig.show()","2895c56c":"df.groupby([\"gender\",\"stroke\"])[\"stroke\"].count()","a3a0fe22":"stroke_male=df[(df[\"gender\"]==\"Male\")&(df[\"stroke\"]==1)][\"gender\"].count()\/df[df[\"gender\"]==\"Male\"][\"gender\"].count()\nstroke_female=df[(df[\"gender\"]==\"Female\")&(df[\"stroke\"]==1)][\"gender\"].count()\/df[df[\"gender\"]==\"Female\"][\"gender\"].count()\n\nprint(\"Stroke Male Rate: \",'{:,.2%}'.format(stroke_male))\nprint(\"Stroke Female Rate: \",'{:,.2%}'.format(stroke_female))","3da7b036":"dfplt = df.copy(deep=True)\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.histogram(dfplt, x=\"age\",color=\"stroke\",\n                   color_discrete_map=cm_discret)\n\nfig.show()","6963f37f":"df['agebin'] = pd.cut(df.age,bins=3,labels=range(1, 4), retbins=False,include_lowest=True)\ndf['agebin']=df['agebin'].astype(int)\ndf.groupby([\"agebin\",\"stroke\"])[\"age\"].count()","5a666c46":"pd.crosstab(df[\"hypertension\"], df[\"stroke\"]).plot(kind=\"bar\", color=[\"orange\", \"purple\"]);","e597b2b1":"# Create another figure\nplt.figure(figsize=(10,6))\n\n# Start with positve examples\nplt.scatter(df.age[df.stroke==0], \n            df.bmi[df.stroke==0], \n            c=\"lightblue\") # define it as a scatter figure\n\n# Now for negative examples, we want them on the same plot, so we call plt again\nplt.scatter(df.age[df.stroke==1], \n            df.bmi[df.stroke==1], \n            c=\"salmon\") # axis always come as (x, y)\n\n# Add some helpful info\nplt.title(\"Stroke in function of Age and Hyper tension(BMI)\")\nplt.xlabel(\"Age\")\nplt.legend([\"No Disease\", \"Disease\"])\nplt.ylabel(\"BMI\");\n\nplt.savefig('stroke_prediction_hyper_tension.png')\nplt.show()","7e4eb926":"dfplt = df.copy(deep=True)\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.histogram(dfplt, x=\"ever_married\",color=\"stroke\",\n                   color_discrete_map=cm_discret)\nfig.show()","12b1a075":"\ndf.groupby([\"agebin\",\"ever_married\",\"stroke\"])[\"age\"].count()","fd1f9363":"dfplt = df.copy(deep=True)\ndfplt = dfplt[~dfplt[\"stroke\"].isna()]\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.scatter_3d(dfplt, x=\"ever_married\", y=\"age\", z= \"smoking_status\", color=\"stroke\",\n                    color_discrete_map=cm_discret, size_max=6, width=1000, height=1000)\nfig.show()","cb3a7034":"dfplt = df.copy(deep=True)\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.histogram(dfplt, x=\"heart_disease\",color=\"stroke\",\n                   color_discrete_map=cm_discret)\n\nfig.show()","84608e5d":"\ndf.groupby([\"heart_disease\",\"stroke\"])[\"age\"].count()","0cd6bd27":"dfplt = df.copy(deep=True)\ndfplt = dfplt[~dfplt[\"stroke\"].isna()]\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.scatter_3d(dfplt, x=\"heart_disease\", y=\"bmi\", z= \"smoking_status\", color=\"stroke\",\n                    color_discrete_map=cm_discret, size_max=6, width=1000, height=1000)\nfig.show()","257d8707":"dfplt = df.copy(deep=True)\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.histogram(dfplt, x=\"avg_glucose_level\",color=\"stroke\",\n                   color_discrete_map=cm_discret)\nfig.show()","d632816a":"dfplt = df.copy(deep=True)\ndfplt = dfplt[~dfplt[\"stroke\"].isna()]\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.scatter_3d(dfplt, x=\"avg_glucose_level\", y=\"bmi\", z= \"gender\", color=\"stroke\",\n                    color_discrete_map=cm_discret, size_max=6, width=1000, height=1000)\nfig.show()","b260366c":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))\ndf.plot(kind='scatter', x='age', y='avg_glucose_level', alpha=0.5, color='orange', ax=axes[0], title=\"Age vs. avg_glucose_level\")\ndf.plot(kind='scatter', x='bmi', y='avg_glucose_level', alpha=0.5, color='purple', ax=axes[1], title=\"bmi vs. avg_glucose_level\")\nplt.savefig('stroke_prediction_avg_glucose.png')\nplt.show()","195c1e5b":"dfplt = df.copy(deep=True)\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.histogram(dfplt, x=\"work_type\",color=\"stroke\",\n                   color_discrete_map=cm_discret)\nfig.show()","05efa446":"dfplt = df.copy(deep=True)\ndfplt = dfplt[~dfplt[\"stroke\"].isna()]\ndfplt[\"stroke\"] = dfplt[\"stroke\"].astype(str)\nfig = px.scatter_3d(dfplt, x=\"work_type\", y=\"heart_disease\", z= \"age\", color=\"stroke\",\n                    color_discrete_map=cm_discret, size_max=6, width=1000, height=1000)\n\nfig.show()","3d052ab4":"msno.bar(df, figsize=(30,2), color=\"red\")","39b15340":"df_bmi_null=df[df[\"bmi\"].isnull()]\ndf_bmi_null.groupby(\"stroke\")[\"age\"].count()","05e52b55":"\ndf_corr=df.corr()\nfig, ax = plt.subplots(figsize=(12, 10))\n# mask\nmask = np.triu(np.ones_like(df_corr, dtype=np.bool))\n# adjust mask and df\nmask = mask[1:, :-1]\ncorr = df_corr.iloc[1:,:-1].copy()\n# color map\ncmap = sns.diverging_palette(0, 230, 90, 60, as_cmap=True)\n# plot heatmap\nsns.heatmap(corr, mask=mask, annot=True, fmt=\".2f\", \n           linewidths=5, cmap=cmap, vmin=-1, vmax=1, \n           cbar_kws={\"shrink\": .8}, square=True)\n# ticks\nyticks = [i.upper() for i in corr.index]\nxticks = [i.upper() for i in corr.columns]\nplt.yticks(plt.yticks()[0], labels=yticks, rotation=0)\nplt.xticks(plt.xticks()[0], labels=xticks)\n# title\ntitle = 'Stroke Prediction\\nFirst Look\\n'\nplt.title(title, loc='center', fontsize=18)\nplt.show()\n\n","66e49f19":"add_bmi=df.groupby([\"age\",\"stroke\"])[[\"bmi\"]].mean().reset_index()\nadd_bmi=add_bmi.rename(columns={\"bmi\":\"bmi_add\"})\ndf_bmi_null=df_bmi_null.merge(add_bmi,how=\"left\")\ndf_bmi_null[df_bmi_null[\"bmi_add\"].isnull()]","e3783ea1":"df=df.merge(df_bmi_null,how=\"left\")\n\ndf[\"bmi\"].fillna(df[\"bmi_add\"],inplace=True)\ndf=df.drop(\"bmi_add\",axis=1)\ndf=df.dropna()","3b8dbf35":"msno.bar(df, figsize=(30,2), color=\"red\")\nplt.savefig('stroke_prediction_no_missing.png')\nplt.show()","614f64f0":"df['gender'] = np.where((df.gender == 'Male'),'0',df[\"gender\"])\ndf['gender'] = np.where((df.gender == 'Female'),'1',df[\"gender\"])\ndf['gender'] = np.where((df.gender == 'Other'),'1',df[\"gender\"])\ndf[\"gender\"]=df[\"gender\"].astype(\"int\")","883066f9":"df['ever_married'] = np.where((df.ever_married == 'No'),'0',df[\"ever_married\"])\ndf['ever_married'] = np.where((df.ever_married == 'Yes'),'1',df[\"ever_married\"])\ndf[\"ever_married\"] = df[\"ever_married\"].astype('int')","fdb88c80":"df['work_type'] = np.where((df.work_type == 'Private'),'0',df[\"work_type\"])\ndf['work_type'] = np.where((df.work_type == 'Self-employed'),'1',df[\"work_type\"])\ndf['work_type'] = np.where((df.work_type == 'Govt_job'),'2',df[\"work_type\"])\ndf['work_type'] = np.where((df.work_type == 'children'),'3',df[\"work_type\"])\ndf['work_type'] = np.where((df.work_type == 'Never_worked'),'4',df[\"work_type\"])\ndf[\"work_type\"] = df[\"work_type\"].astype('int')\n","38e81134":"df['Residence_type'] = np.where((df.Residence_type == 'Urban'),'0',df[\"Residence_type\"])\ndf['Residence_type'] = np.where((df.Residence_type == 'Rural'),'1',df[\"Residence_type\"])\ndf[\"Residence_type\"] = df[\"Residence_type\"].astype('int')\n","4af43fb8":"df['smoking_status'] = np.where((df.smoking_status == 'formerly smoked'),'0',df[\"smoking_status\"])\ndf['smoking_status'] = np.where((df.smoking_status == 'never smoked'),'1',df[\"smoking_status\"])\ndf['smoking_status'] = np.where((df.smoking_status == 'smokes'),'2',df[\"smoking_status\"])\ndf['smoking_status'] = np.where((df.smoking_status == 'Unknown'),'3',df[\"smoking_status\"])\ndf[\"smoking_status\"] = df[\"smoking_status\"].astype('int')","ae3b31e4":"df_corr=df.corr()\nfig, ax = plt.subplots(figsize=(12, 10))\n# mask\nmask = np.triu(np.ones_like(df_corr, dtype=np.bool))\n# adjust mask and df\nmask = mask[1:, :-1]\ncorr = df_corr.iloc[1:,:-1].copy()\n# color map\ncmap = sns.diverging_palette(0, 230, 90, 60, as_cmap=True)\n# plot heatmap\nsns.heatmap(corr, mask=mask, annot=True, fmt=\".2f\", \n           linewidths=5, cmap=cmap, vmin=-1, vmax=1, \n           cbar_kws={\"shrink\": .8}, square=True)\n# ticks\nyticks = [i.upper() for i in corr.index]\nxticks = [i.upper() for i in corr.columns]\nplt.yticks(plt.yticks()[0], labels=yticks, rotation=0)\nplt.xticks(plt.xticks()[0], labels=xticks)\n# title\ntitle = 'Stroke Prediction'\nplt.title(title, loc='center', fontsize=18)\n\nplt.savefig('stroke_prediction_heatmap.png')\nplt.show()","c71d6054":"from sklearn.model_selection import train_test_split\nx = df.drop(\"stroke\", axis=1)\ny = df[\"stroke\"].values\n\nnp.random.seed(42)\n\n# Splitting the data into train and test sets\nX_train, X_test, Y_train, Y_test = train_test_split(x,y,test_size=0.2)","3e86e8c9":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom catboost import CatBoostClassifier\nfrom sklearn.svm import LinearSVC, SVC\nfrom xgboost import XGBClassifier\n\nmodels = {\"CatBoostClassifier\": CatBoostClassifier(silent=True),\n          \"Logistic Regression\": LogisticRegression(), \n          \"Random Forest\": RandomForestClassifier(),\n          \"XGBoost\": XGBClassifier(objective= 'binary:logistic')}\n\ndef fit_and_score(models, x_train, x_test, y_train, y_test):\n\n    np. random.seed(42)\n    model_scores = {}\n    for name, model in models.items():\n        model.fit(x_train, y_train)\n        model_scores[name] = model.score(x_test, y_test)\n\n    return model_scores","24435af5":"from sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom lightgbm import LGBMClassifier\n\nkfold = StratifiedKFold(n_splits=10)\n\n# Modeling step Test differents algorithms \nrandom_state = 42\nclassifiers = []\nclassifiers.append(SVC(random_state=random_state))\nclassifiers.append(DecisionTreeClassifier(random_state=random_state))\nclassifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state),random_state=random_state))\nclassifiers.append(RandomForestClassifier(random_state=random_state))\nclassifiers.append(ExtraTreesClassifier(random_state=random_state))\nclassifiers.append(GradientBoostingClassifier(random_state=random_state))\nclassifiers.append(MLPClassifier(random_state=random_state))\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(LogisticRegression(random_state = random_state))\nclassifiers.append(LinearDiscriminantAnalysis())\nclassifiers.append(XGBClassifier(n_estimators= 200,objective= 'binary:logistic', random_state = random_state))\nclassifiers.append(LGBMClassifier(random_state = random_state))\nclassifiers.append(CatBoostClassifier())\n\ncv_results = []\nfor classifier in classifiers :\n    cv_results.append(cross_val_score(classifier, X_train, y = Y_train, scoring = \"accuracy\", cv = kfold, n_jobs=4))\n\ncv_means = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n\ncv_res = pd.DataFrame({\"CrossValMeans\":cv_means,\"CrossValerrors\": cv_std,\"Algorithm\":[\"SVC\",\"DecisionTree\",\"AdaBoost\",\n\"RandomForest\",\"ExtraTrees\",\"GradientBoosting\",\"MultipleLayerPerceptron\",\"KNeighboors\",\"LogisticRegression\",\"LinearDiscriminantAnalysis\",'XGBClassifier','LGBMClassifier','CatBoostClassifier']})\n","c22375aa":"plt.figure(figsize=(20,10))\ng = sns.barplot(\"CrossValMeans\",\"Algorithm\",data = cv_res, palette=\"tab10\",orient = \"h\",**{'xerr':cv_std})\nplt.axvline(0.95)\nplt.axvline(0.90)\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation scores\")\n\nplt.savefig('stroke_prediction_model_comparison.png')\nplt.show()","a4fbfca5":"cv_res.sort_values(by=\"CrossValMeans\",ascending=False)","3e92877c":"bm = SVC(random_state=random_state)\nbm.fit(X_test,Y_test)\n\ny_pred=bm.predict(X_test)\ny_true=pd.DataFrame(Y_test)\nfrom sklearn.metrics import classification_report\ncr=classification_report(y_true,y_pred,output_dict=True)\npd.DataFrame(cr)","756c2af1":"from sklearn.tree import DecisionTreeClassifier \nfrom sklearn import tree\nimport graphviz\n# DOT data\n\nclf = DecisionTreeClassifier(random_state=1234)\nmodel = clf.fit(X_train,Y_train)\n\n\nfeature_names=X_test.columns.values\n\ndot_data = tree.export_graphviz(clf, out_file=None, \n                                feature_names=feature_names,  \n\n                                filled=True)\n\n# Draw graph\ngraph = graphviz.Source(dot_data, format=\"png\") \ngraph.render(\"decision_tree_graphivz\")\n\ngraph","09160b14":"I know, that the smoking status of patients may affect on the stroke rate.\n\nFor this case we will try to analyze such status, referring to the stroke.\n\n","cefe015c":"<div class=\"alert alert-warning\" role=\"alert\">\n  <h4 class=\"alert-heading\">Observation \ud83d\udd0e\ud83d\udd0e\ud83d\udd0e.<\/h4>\n  <p> \ud83d\udccc \ndata interpretation power seems high<\/p>\n  <hr>\n","299bb2e7":"### **Seems no main difference according to gender.**\n ","81561bbd":"<div class=\"alert alert-success\" role=\"alert\">\nGreat there is no Null values anymore\n<\/div>\n","d5f34f96":"> ## <a class=\"anchor\" id=\"1.5_bullet\" style=\"color:green\"> 1.5 Ever Married Anlaysis","99359d52":"<a id=\"import\"><\/a>\n# Libraries","4b00723d":"## <a class=\"anchor\" id=\"1.6_bullet\" style=\"color:green\"> 1.6 Avg Glucose Level Anlaysis","eb282eb0":"### Now should check correaltion matrix again with new features","f1b5cabe":"> ## <a class=\"anchor\" id=\"1.7_bullet\" style=\"color:green\"> 1.7 Work Type Anlaysis","3a35d7d6":"\n<div class=\"alert alert-danger\" role=\"alert\">\n  <h4 class=\"alert-heading\">\u26d4\ufe0f\u26d4\ufe0f\u26d4\ufe0f<\/h4>\n  <p>1 year old child has a stroke<\/p>\n  <hr>\n  <p class=\"mb-0\">We can drop it as a outlier<\/p>\n<\/div>","37e2ce65":"> ## <a class=\"anchor\" id=\"1.5_bullet\" style=\"color:green\"> 1.5 Heart Disease Anlaysis","f52f61c8":"<a id=\"introduction\"><\/a>\n**INTRODUCTION**\n\nA stroke is a serious life-threatening medical condition that happens when the blood supply to part of the brain is cut off.\n\nThe main symptoms of stroke can be remembered with the word FAST:\n\n* Face \u2013 the face may have dropped on 1 side, the person may not be able to smile, or their mouth or eye may have dropped.\n* Arms \u2013 the person with suspected stroke may not be able to lift both arms and keep them there because of weakness or numbness in arm.\n* Speech \u2013 their speech may be slurred or garbled, or the person may not be able to talk at all despite appearing to be awake; they may also have problems understanding what you're saying to them.\n* Time \u2013 it's time to dial 999 immediately if you see any of these signs or symptoms.\n\n![](https:\/\/wp02-media.cdn.ihealthspot.com\/wp-content\/uploads\/sites\/520\/2020\/04\/08160759\/iStock-1168179082.jpg)\n\n\n<strong> Attribute Information <\/strong>\n*  id: unique identifier\n*  gender: \"Male\", \"Female\" or \"Other\"\n*  age: age of the patient\n*  hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n*  heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n*  ever_married: \"No\" or \"Yes\"\n*  work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n*  Residence_type: \"Rural\" or \"Urban\"\n*  avg_glucose_level: average glucose level in blood\n*  bmi: body mass index\n*  smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n*  stroke: 1 if the patient had a stroke or 0 if not <br>","0dd94c57":"### If you have heart disease, the probability of having a stroke is 16%, while if you do not have a heart disease, the same rate is 3.5%.","852dce3e":"### <a class=\"anchor\" id=\"3.1_bullet\" style=\"color:green\"> 3.1 Preparing Model","0c45a00e":"### Null values are important (stroke ratio %20). So we can not drop them","7bc0d286":"## <a class=\"anchor\" id=\"1.2_bullet\" style=\"color:green\"> 1.2 Gender Analysis","8b194b40":"## <a class=\"anchor\" id=\"1.1_bullet\" style=\"color:green\"> 1.1 Smoking Status Analysis","66ca2c16":"<h1 style=\"font-size:200%\">Table Of Content<\/h1>\n\n* [<a style=\"font-size:130%;color:green\">Preparation](#0_bullet)\n* [<a style=\"font-size:130%;color:green\">1. Exploratory Data Analysis (EDA)](#1_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 1.1 Smoking Status Analysis](#1.1_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 1.2 Gender Analysis](#1.2_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 1.3 Age Analysis](#1.3_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 1.4 Hypertension Analysis](#1.4_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 1.5 Ever Married Analysis](#1.5_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 1.6 Avg Glucose Level Anlaysis](#1.6_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 1.7 Work Type Anlaysis](#1.7_bullet)\n\n* [<a style=\"font-size:130%;color:green\">2. Feature Engeneering](#2_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 2.1 Filling None values](#2.1_bullet)\n    * [<a style=\"font-size:130%;color:green\"> 2.2 Encoding features and droping unnecessary](#2.2_bullet)\n* [<a style=\"font-size:130%;color:green\">3. Modelling](#3_bullet)\n    * [<a style=\"font-size:130%;color:green\">3.1 Preparing Data](#3.1_bullet)\n    * [<a style=\"font-size:130%;color:green\">3.2 Model Selection](#3.2_bullet)","117de7cc":"## <a class=\"anchor\" id=\"2.1_bullet\" style=\"color:green\"> 2.1 Filling None values","80cba1cb":"# <a class=\"anchor\" id=\"1_bullet\" style=\"color:green\"> 1. Exploratory Data Analysis (EDA)","72cb5563":"###  ahahaa this result made me re-think about marriage :)\n###  Just joking. Main reason is age. min. age of ever married people is 18 and the older you get, the higher the rate of marriage\n","17a21df5":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 We also have \"smoke\" column\" as binary( Yes\/No)<\/p>\n<\/div>\n","4904a87b":"> ## <a class=\"anchor\" id=\"1.4_bullet\" style=\"color:green\"> 1.4 Hypertension Analysis","f6c860ec":"<a id=\"data\"><\/a>\n# Importing & Data Check","e0963b00":"### also bmi and heart disease are more important together","a12974eb":"* ###  **Bining for Age is more accurate**","2982f33b":"## <a class=\"anchor\" id=\"2.2_bullet\" style=\"color:green\"> 2.2 Encoding features and droping unnecessary","97924e9b":"### BMI and Age seem highly related. We can group and fill in the blank data by age.","d85560e7":"### <a class=\"anchor\" id=\"3.2_bullet\" style=\"color:green\"> 3.2 Model Selection","4fa8d533":"### bmi looks effective","7557d7d5":"# <a class=\"anchor\" id=\"2_bullet\" style=\"color:green\"> 2. Feature Engeneering","d9374359":"We can see some connections in the data:\n  - For example, stroke ratio %4.2 but almost half o them smoking. \n ","4eab8f09":"> ## <a class=\"anchor\" id=\"1.3_bullet\" style=\"color:green\"> 1.3 Age Analysis","e07ae047":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 \"Other\" segment is probably female according to age,work_type and residence_type<\/p>\n<\/div>\n\n","7e58421a":"# Decision Tree"}}