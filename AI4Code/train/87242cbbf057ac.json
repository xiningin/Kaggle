{"cell_type":{"b6e7983a":"code","13fc078c":"code","3f5c290b":"code","2f42d8fe":"code","eee9b698":"code","d3cc5165":"code","d95db10c":"code","e7ffa326":"code","35f6c034":"code","cbdd4dd5":"code","f6076fc6":"code","630de12f":"code","6513859d":"code","bd4e9f84":"code","033a9336":"code","eb417865":"code","00ad7f42":"code","500c0443":"code","2eb54879":"code","64ac03bf":"code","66054adf":"code","fdde6a80":"code","160a07ae":"code","5d348573":"code","a74f41a2":"code","fe7a7077":"code","f8fef2ac":"code","bc8462d5":"code","46172a8d":"code","2f4d0439":"code","7a0d0c42":"code","41345a72":"code","771e36bd":"code","a9f0b98b":"code","cbd2bd83":"code","9c9c4abb":"code","c803724a":"code","8175c390":"code","0acd4f08":"code","8a0db9b1":"code","02c6d4cb":"code","750f3f2b":"code","b9788242":"code","7c2e3b8b":"code","66f8baf4":"code","0ccffeb0":"code","61508db7":"code","595c6cee":"code","2130f4ed":"code","383241c5":"code","3a635c44":"code","07e3e86d":"code","1945ac8b":"code","7551d105":"code","0657ef4c":"code","b3aeb694":"code","294e1c26":"code","fb078ebf":"code","813a0ce2":"code","892ef6db":"code","00014f73":"code","636637ad":"code","46f2dfa0":"code","63f0e981":"code","d119f44b":"code","1963bf47":"code","40b28112":"code","0e4681e7":"code","ad138e0b":"markdown","57f83cfa":"markdown","0bd5dfad":"markdown","78ab8127":"markdown","041f48a7":"markdown","22d3b3f3":"markdown","de96ee27":"markdown","2484c69c":"markdown","e74c906a":"markdown","e07fbd83":"markdown","89ecee05":"markdown","3c3b5c0c":"markdown","11bd2413":"markdown","d227429f":"markdown","9526c2f3":"markdown","9e4fae61":"markdown","f224d281":"markdown","b7ee5fc6":"markdown","3e2f718d":"markdown","1639dcbd":"markdown","985ad1fc":"markdown","af2e2b83":"markdown","62cb85b5":"markdown","efb119c1":"markdown","bf6fec99":"markdown","1efe4ca4":"markdown","2034bebb":"markdown","3e12ff32":"markdown","42e8f94a":"markdown"},"source":{"b6e7983a":"## Importing Libraries ##\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set()\n# plt.style.use('seaborn-colorblind')\n# sns.color_palette(COLOR_PALETTE)\nCOLOR_PALETTE = 'Blues_d'\n%matplotlib inline\npd.set_option('display.max_columns', 500)\nfrom IPython.display import Markdown, display\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.rcParams['figure.dpi'] = 200\n#import swifter","13fc078c":"mcq_2017 = pd.read_csv('..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv', encoding='latin-1')\nmcq_2018 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\nmcq_2019 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\nmcq_2020 = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')","3f5c290b":"columns = ['Age', 'Gender', 'Country', 'Degree', 'Job Title', 'Company Size', 'Team Size', 'ML Status in Company','Compensation Status','Money Spent', 'Year']","2f42d8fe":"# 2020 should be set here\ncolumn_mapping_2020 = {'Time from Start to Finish (seconds)':'Time',\n'Q1':'Age',\n'Q2':'Gender',\n'Q3':'Country',\n'Q4':'Degree',\n'Q5':'Job Title',\n'Q20':'Company Size',\n'Q21':'Team Size',\n'Q22':'ML Status in Company',\n'Q24':'Compensation Status',\n'Q25':'Money Spent'\n}\n\nmcq = mcq_2020.rename(columns= column_mapping_2020)\nmcq = mcq.drop([0], errors='ignore')","eee9b698":"## changing column names for better readability\ncolumn_mapping_2019 = {'Time from Start to Finish (seconds)':'Time',\n'Q1':'Age',\n'Q2':'Gender',\n'Q3':'Country',\n'Q4':'Degree',\n'Q5':'Job Title',\n'Q6':'Company Size',\n'Q7':'Team Size',\n'Q8':'ML Status in Company',\n'Q10':'Compensation Status',\n'Q11':'Money Spent'\n}\n\nmcq_2019 = mcq_2019.rename(columns= column_mapping_2019)\nmcq_2019 = mcq_2019.drop([0], errors='ignore')\n\n","d3cc5165":"## changing column names for better readability. 2018 columns are different as compared to 2019 columns\ncolumn_mapping_2018 = {'Time from Start to Finish (seconds)':'Time',\n'Q2':'Age',\n'Q1':'Gender',\n'Q3':'Country',\n'Q4':'Degree',\n'Q6':'Job Title',\n# 'Q8':'Team Size', ## wrong\n# 'Q9':'Company Size', ## wrong                       \n'Q10':'ML Status in Company', \n'Q9':'Compensation Status',\n# 'Q11':'Money Spent' ## wrong\n}\nmcq_2018 = mcq_2018.rename(columns = column_mapping_2018)\nmcq_2018 = mcq_2018.drop([0], errors='ignore')\n\n","d95db10c":"## changing column names for better readability. 2017 columns are totaly different as compared to 2019 columns\ncolumn_mapping_2017 = {'Age':'Age',\n'GenderSelect':'Gender',\n'Country':'Country',\n'FormalEducation':'Degree',\n'CurrentJobTitleSelect':'Job Title',\n'EmployerSize':'Company Size',\n#'EmployerSizeChange':'Team Size',\n#'EmployerMLTime':'ML Status in Company',\n'CompensationAmount':'Compensation Status',\n'WorkMethodsFrequencyTimeSeriesAnalysis' : 'Time'\n}\n\n## Creating different dataframes to make the analysis easier\nmcq_2017 = mcq_2017.rename(columns = column_mapping_2017)\nmcq_2017 = mcq_2017.drop([0], errors='ignore')\n\n","e7ffa326":"mcq['Year'] = 2020\nmcq_2019['Year'] = 2019\nmcq_2018['Year'] = 2018\nmcq_2017['Year'] = 2017","35f6c034":"combined_df = pd.concat([mcq, mcq_2019, mcq_2018, mcq_2017])\ncombined_df = combined_df[columns]\ncombined_df.reset_index(drop=True)\ncombined_df.head()","cbdd4dd5":"combined_df = combined_df.reset_index(drop=True)\ncombined_df.info()","f6076fc6":"combined_df[combined_df.duplicated()] ","630de12f":"\ndf_copy = combined_df.copy()","6513859d":"mcq['Age'].value_counts()","bd4e9f84":"mcq_2019['Age'].value_counts()","033a9336":"mcq_2018['Age'].unique()","eb417865":"mcq_2017['Age'].unique()","00ad7f42":"\ndef combine_age_2018(row):\n    if row == '80+':\n        return '70+'\n    elif row == '70-79':\n        return '70+'\n    else:\n        return row\n    ","500c0443":"combined_df['Age'] = combined_df['Age'].apply(combine_age_2018)","2eb54879":"age_ranges = mcq['Age'].unique()\n\ndef combine_age_2017(row):\n    if row.Year == 2017:\n        for local_age in age_ranges:\n            if local_age[-1] == '+':\n                \n                if row.Age >= 70:\n                    return '70+'\n            else:\n                ranges = local_age.split('-')\n                try:\n                    if int(row.Age) >= int(ranges[0]) and int(row.Age) <= int(ranges[1]):\n                        return local_age\n                except:\n                    return row.Age\n    else:\n        return row.Age","64ac03bf":"combined_df['Age'] = combined_df.apply(combine_age_2017, axis=1)","66054adf":"combined_df['Age'].value_counts()","fdde6a80":"mcq['Gender'].value_counts()","160a07ae":"mcq_2019['Gender'].value_counts()","5d348573":"mcq_2018['Gender'].value_counts()","a74f41a2":"mcq_2017['Gender'].value_counts()","fe7a7077":"def change_gender(row):\n    if row.Year == 2020:\n        if row['Gender'] == 'Man':\n            return 'Male'\n        elif row['Gender'] == 'Woman':\n            return 'Female'\n        else:\n            return row['Gender']\n        \n    elif row.Year == 2017:\n        if row['Gender'] == 'A different identity':\n            return 'Prefer not to say'\n        elif row['Gender'] == 'Non-binary, genderqueer, or gender non-conforming':\n            return 'Nonbinary'\n        else:\n            return row['Gender']\n    else:\n        return row['Gender']","f8fef2ac":"combined_df['Gender'] = combined_df.apply(change_gender, axis=1)","bc8462d5":"combined_df['Gender'].value_counts()","46172a8d":"mcq['Degree'].value_counts()","2f4d0439":"mcq_2019['Degree'].value_counts()","7a0d0c42":"mcq_2018['Degree'].value_counts()","41345a72":"mcq_2017['Degree'].value_counts()","771e36bd":"def degree_change(row):\n    if row.Year == 2017:\n        if row.Degree == 'I did not complete any formal education past high school':\n            return 'No formal education past high school'\n        elif row.Degree == 'Master\\'s degree':\n            return 'Master\u2019s degree'\n        elif row.Degree == 'Bachelor\\'s degree':\n            return 'Bachelor\u2019s degree'\n        elif row.Degree == 'Some college\/university study without earning a bachelor\\'s degree':\n            return 'Some college\/university study without earning a bachelor\u2019s degree'\n        else:\n            return row.Degree\n    else:\n        return row.Degree","a9f0b98b":"combined_df['Degree'] = combined_df.apply(degree_change, axis=1)","cbd2bd83":"combined_df['Degree'].value_counts()","9c9c4abb":"mcq['Job Title'].value_counts()","c803724a":"mcq_2019['Job Title'].value_counts()","8175c390":"mcq_2018['Job Title'].value_counts()","0acd4f08":"mcq_2017['Job Title'].value_counts()","8a0db9b1":"mcq['Company Size'].value_counts()","02c6d4cb":"mcq_2019['Company Size'].value_counts()","750f3f2b":"mcq_2017['Company Size'].value_counts()","b9788242":"def change_company_size(row):\n    if row.Year == 2019:\n        if row['Company Size'] == '> 10,000 employees':\n            return '10,000 or more employees'\n        else:\n            return row['Company Size']\n    elif row.Year == 2017:\n        if row['Company Size'] == '10 to 19 employees' or row['Company Size'] == 'Fewer than 10 employees':\n            return '0-49 employees'\n        elif row['Company Size'] == '20 to 99 employees' or row['Company Size'] == '100 to 499 employees':\n            return '50-249 employees'\n        elif row['Company Size'] == '500 to 999 employees':\n            return '250-999 employees'\n        elif row['Company Size'] == '1,000 to 4,999 employees' or row['Company Size'] == '5,000 to 9,999 employees':\n            return '1000-9,999 employees'\n        elif row['Company Size'] == '10,000 or more employees':\n            return '10,000 or more employees'\n        else:\n            return row['Company Size']\n    else:\n        return row['Company Size']","7c2e3b8b":"combined_df['Company Size'] = combined_df.apply(change_company_size, axis=1)","66f8baf4":"combined_df['Company Size'].value_counts()","0ccffeb0":"mcq['Team Size'].value_counts()","61508db7":"mcq_2019['Team Size'].value_counts()","595c6cee":"mcq['ML Status in Company'].value_counts()","2130f4ed":"mcq_2019['ML Status in Company'].value_counts()","383241c5":"mcq_2018['ML Status in Company'].value_counts()","3a635c44":"compensation_status = mcq['Compensation Status'].value_counts().reset_index().sort_values(by='index')\ncompensation_status_2= compensation_status['index'].str.split('-', expand=True)\nfinal_compensation = pd.concat([compensation_status, compensation_status_2], axis =1)\nfinal_compensation.sort_values(by='index').reset_index(drop=True)","07e3e86d":"mcq_2019['Compensation Status'].value_counts().reset_index().sort_values(by='index').reset_index(drop=True)","1945ac8b":"mcq_2018['Compensation Status'].value_counts().reset_index().sort_values(by='index').reset_index(drop=True)","7551d105":"mcq_2017['Compensation Status'].unique()","0657ef4c":"dict_salary_2018_mapping = {'0-10,000':'0-10,000','10-20,000': '10,001-20,000', '20-30,000': '20,001-30,000', '30-40,000':'30,000-39,999',\n                           '40-50,000':'40,000-49,999', '50-60,000':'50,000-59,999', '60-70,000':'60,000-69,999',\n                           '70-80,000':'70,000-79,999', '80-90,000':'80,000-89,999', '90-100,000':'90,000-99,999',\n                           '100-125,000':'100,000-124,999', '125-150,000':'125,000-149,999', '150-200,000': '150,000-199,999',\n                           '200-250,000':'200,000-249,999', '250-300,000': '250,000-299,999', '300-400,000':'300,000-500,000',\n                           '400-500,000':'300,000-500,000','500,000+':'> $500,000', 'I do not wish to disclose my approximate yearly compensation':'Cant Disclose',\n                           np.nan:np.nan}\n\nlen(dict_salary_2018_mapping)","b3aeb694":"def change_salary(row):\n    if row.Year == 2019 or row.Year == 2020:\n        if row['Compensation Status']=='$0-999' or row['Compensation Status'] == '1,000-1,999' or row['Compensation Status'] == '2,000-2,999' \\\n            or row['Compensation Status']=='3,000-3,999' or row['Compensation Status']=='4,000-4,999' or row['Compensation Status']=='5,000-7,499' or row['Compensation Status']=='7,500-9,999':\n            return '0-10,000'\n        elif row['Compensation Status'] == '10,000-14,999' or row['Compensation Status'] == '15,000-19,999':\n            return '10,001-20,000'\n        elif row['Compensation Status'] == '20,000-24,999' or row['Compensation Status'] == '25,000-29,999':\n            return '20,001-30,000'\n        else:\n            return row['Compensation Status']\n\n    elif row.Year == 2018:\n        #if not row['Compensation Status'].isna():\n        value_to_return = dict_salary_2018_mapping[row['Compensation Status']]\n        return value_to_return\n    else:\n        return row['Compensation Status']","294e1c26":"combined_df['Compensation Status'] = combined_df.apply(change_salary, axis=1)","fb078ebf":"list_values = list(dict_salary_2018_mapping.values())\nlist_values.remove(np.nan)\n\ndef change_salary_2017(row):\n    if row['Year']==2017:\n        for i in list_values:\n            ranges = i.split('-')\n            if len(ranges)==2:\n                try:\n                    if int(row['Compensation Status'].replace(',',''))>=int(ranges[0].replace(',','')) and int(row['Compensation Status'].replace(',','')) <= int(ranges[1].replace(',','')):\n                        return i\n                except:\n                    return 'Cant Disclose'\n            else:\n                try:\n                    if int(row['Compensation Status'].replace(',',''))>500000:\n                        return '> $500,000'\n                    else:\n                        return 'Cant Disclose'\n                except:\n                    return 'Cant Disclose'\n                #> 5,000,000, can't disclose\n                \n    else:\n        return row['Compensation Status']","813a0ce2":"mcq_2017[mcq_2017['Compensation Status'].isnull() == False].apply(change_salary_2017, axis=1)","892ef6db":"\ncombined_df['Compensation Status'] = combined_df.apply(change_salary_2017, axis=1)","00014f73":"combined_df['Compensation Status'].unique()","636637ad":"mcq['Money Spent'].value_counts()","46f2dfa0":"mcq_2019['Money Spent'].value_counts()","63f0e981":"combined_df.head(1)","d119f44b":"combined_df = combined_df.reset_index()\ncombined_df.info()","1963bf47":"combined_df.to_csv('kaggle_survey_17_20_v2.csv', index=False)","40b28112":"combined_df.drop_duplicates()","0e4681e7":"import os\nos.chdir(r'..\/working')\nfrom IPython.display import FileLink\nFileLink(r'kaggle_survey_17_20_v2.csv')","ad138e0b":"**Changes Required**\n\n1. Make the labels consistent for 2017 data","57f83cfa":"## 3. Degree","0bd5dfad":"## 9. **Money Spent on Cloud Computing\/ ML Products**","78ab8127":"![v1.png](attachment:v1.png)","041f48a7":"**No Changes required**","22d3b3f3":"**No changes required**","de96ee27":"## 6. Individuals for Data Science","2484c69c":"### 2. Gender","e74c906a":"## 7. ML Status in Company","e07fbd83":"### In this kernel I will be merging the survey data from all the previous Kaggle Surveys. From 2017 to 2020. The final dataset link is [here](https:\/\/www.kaggle.com\/harveenchadha\/kaggle-survey-20172020-merged-data)","89ecee05":"## 8. Compensation Status","3c3b5c0c":"**Changes Required**\n\n1. In 2020, it is man and woman, rather than male and female\n2. Make non-binary consistent from 2017","11bd2413":"### Generating Final File","d227429f":"### Data Preprocessing","9526c2f3":"## Gathering Data","9e4fae61":"## Checking Columns if they have consistent values","f224d281":"Making a copy of the original combined dataframe is a good practice","b7ee5fc6":"Merging all dataframes together!","3e2f718d":"Specifying year to each dataframe!","1639dcbd":"**Changes required:**\n\n1. Setting Bins according to 2018 data as we can merge from 2019 and 2020.\n2. Dividing 2017 data into bins","985ad1fc":"**No changes required**","af2e2b83":"## 5. Company Size","62cb85b5":"**No Changes Required**","efb119c1":"No duplicates found.","bf6fec99":"## 4. Job Title","1efe4ca4":"**Changes Required:**\n\n2019: '> 10,000 employees' to '10,000 or more employees'\n\n2018: Not present\n\n2017: Company Size (Same categories)\n","2034bebb":"**Changes Required**\n\n1. In 2018 we need to convert 80+ and 70-79 to one class i.e. 70+\n2. In 2017 we need to categorize data into bins\n","3e12ff32":"![v2.jpg](attachment:v2.jpg)","42e8f94a":"### 1. Age"}}