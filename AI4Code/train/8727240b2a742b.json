{"cell_type":{"6ec9abda":"code","bf19bf2d":"code","81e0d0d3":"code","d12e9d59":"code","3f02efe3":"code","3a6e5ef9":"code","98920279":"code","80dd9824":"code","6159c516":"code","365c665c":"code","d1fac5d9":"code","7773b8e3":"code","82eaef71":"code","ec7d7d39":"code","155723cb":"code","f09fb8eb":"code","c9d452ce":"code","b29a0260":"code","b0f076ff":"code","e041912c":"code","662cdefe":"code","233559fd":"code","6047cd18":"code","e7cf6bac":"code","903a4ef4":"code","b6dd6aa9":"code","b93aa9c0":"code","5bf8877f":"code","97ec488f":"code","eaf34714":"code","195e3d05":"code","3db8a642":"code","a1fd3139":"code","6d8c49c5":"code","26dff02a":"code","69f95044":"code","626273b2":"code","2c8ab2b5":"code","8c998e10":"code","6f05706b":"code","14b1fa9c":"code","df763dae":"code","a0f1e5ec":"code","8e86ad3d":"code","6de4b5fe":"code","8decf45d":"code","099b2961":"code","85267a67":"code","1e62aca0":"code","533ea6c3":"code","32af7851":"code","c5aa08c1":"code","14833ce2":"code","48c4a655":"code","ddd1f759":"code","90bf8e80":"code","62d7acc9":"code","29e5fb4a":"code","1cf0e3f9":"markdown","156e2827":"markdown","b16b3e32":"markdown","c418a4eb":"markdown","5f2b8b3f":"markdown","dbbf7dc0":"markdown","7bff523c":"markdown","88de708c":"markdown","dcb622e2":"markdown"},"source":{"6ec9abda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bf19bf2d":"# Carga do arquivo\ndf = pd.read_csv('\/kaggle\/input\/hmeq-data\/hmeq.csv')\n\n# Dimens\u00f5es do Dataframe\ndf.shape","81e0d0d3":"# An\u00e1lise das vari\u00e1veis\ndf.info()","d12e9d59":"# Guardando o dataframe original\ndf_br = df\n\n# Trocando nome das colunas:\ndf_br.rename(columns={\n    'BAD': 'TIPO_PAGADOR',\n    'LOAN': 'VALOR',\n    'MORTDUE': 'HIPOTECA',\n    'VALUE': 'VALOR_PROPRIEDADE',\n    'REASON': 'OBJETIVO',\n    'JOB': 'TRABALHO',\n    'YOJ': 'TEMPO_EMPRESA',\n    'DEROG': 'QTD_REL_NEGATIVO',\n    'DELINQ': 'QTD_INADIMPLENTE',\n    'CLAGE': 'IDADE_LINHA_COM',\n    'NINQ': 'QTD_CRED_RECENT',\n    'CLNO': 'QTD_LINHA_CRED',\n    'DEBTINC': 'TAXA'}, inplace=True)\n","3f02efe3":"# Listando novamenta as colunas\nfor col in df_br.columns:\n    print(col)","3a6e5ef9":"# Verificando o tipo de dados\ndf_br.dtypes","98920279":"# Listagem dos primeiros dados\ndf_br.head()","80dd9824":"# Altera\u00e7\u00e3o do conte\u00fado dos dados TIPO_PAGADOR\n\n# Transformando 1 em 'MAU' e 0 em 'BOM' na coluna TIPO_PAGADOR, com altera\u00e7\u00e3o do tipo de dado da coluna\n# Passo 1: cria\u00e7\u00e3o do dicion\u00e1rio\ndic_tipo_pagador = {1: 'MAU', 0: 'BOM'}\n\n# Passo 2: substitui\u00e7\u00e3o com altera\u00e7\u00e3o do tipo de dado da coluna\ndf_br['TIPO_PAGADOR'] = df_br['TIPO_PAGADOR'].replace(dic_tipo_pagador).astype(str)","6159c516":"# Listagem dos primeiros dados\ndf_br.head()","365c665c":"# Verifica\u00e7\u00e3o do tipo de dados\ndf_br.dtypes","d1fac5d9":"# Verificando os tipos de 'OBJETIVO':\ndf_br.groupby('OBJETIVO')['OBJETIVO'].count()","7773b8e3":"# Altera\u00e7\u00e3o do conte\u00fado dos dados 'OBJETIVO'\n\n# Transformando DebtCon em 'Consolida\u00e7\u00e3o da D\u00edvida' e 'HomeImp' em 'Melhoria da Casa' na coluna 'OBJETIVO'\n# Passo 1: cria\u00e7\u00e3o do dicion\u00e1rio\ndic_objetivo = {'DebtCon': 'Consolida\u00e7\u00e3o da D\u00edvida', 'HomeImp': 'Melhoria da Casa'}\n\n# Passo 2: substitui\u00e7\u00e3o dos dados\ndf_br['OBJETIVO'] = df_br['OBJETIVO'].replace(dic_objetivo)\n\n# Verifica\u00e7\u00e3o\ndf_br.groupby('OBJETIVO')['OBJETIVO'].count()","82eaef71":"# Verificando os tipos de 'TRABALHO'\ndf_br.groupby('TRABALHO')['TRABALHO'].count()","ec7d7d39":"# Altera\u00e7\u00e3o do conte\u00fado dos dados 'TRABALHO'\n\n# Transformando\n    # 'Mgr'     em 'Gerente'\n    # 'Office'  em 'Funcion\u00e1rio P\u00fablico'\n    # 'Other'   em 'Outro'\n    # 'ProfExe' em 'Executivo'\n    # 'Sales'   em 'Vendedor'\n    # 'Self'    em 'Aut\u00f4nomo'\n\n# Passo 1: cria\u00e7\u00e3o do dicion\u00e1rio\ndic_trabalho = {\n    'Mgr'     :'Gerente',\n    'Office'  :'Funcion\u00e1rio P\u00fablico',\n    'Other'   :'Outro',\n    'ProfExe' :'Executivo',\n    'Sales'   :'Vendedor',\n    'Self'    :'Aut\u00f4nomo'}\n\n# Passo 2: substitui\u00e7\u00e3o dos dados\ndf_br['TRABALHO'] = df_br['TRABALHO'].replace(dic_trabalho)\n\n# Verifica\u00e7\u00e3o\ndf_br.groupby('TRABALHO')['TRABALHO'].count()","155723cb":"# Preenchendo com zero as colunas de valor nulas (Nan)\n# df_br.fillna(0,inplace=True)","f09fb8eb":"# Listagem dos primeiros dados\ndf_br.head()","c9d452ce":"# An\u00e1lise Estat\u00edstica\ndf_br.describe().T","b29a0260":"# Analisando as colunas:\ndf['VALOR'].plot.hist(bins=50)","b0f076ff":"# Analisando as colunas:\ndf['HIPOTECA'].plot.hist(bins=50)","e041912c":"# Importando seaborn para gr\u00e1ficos\nimport seaborn as sns\n\n# Formatar o gr\u00e1fico\nimport matplotlib.pyplot as plt","662cdefe":"# Plotando gr\u00e1fico para TIPO_PAGADOR\nplt.figure(figsize=(15,5))\n\n# Somente os 10 primeiros\nsns.countplot(data=df_br, x='TIPO_PAGADOR',order=df_br.TIPO_PAGADOR.value_counts().index)\n                                                \nplt.show()","233559fd":"# Plotando gr\u00e1fico para TRABALHO\nplt.figure(figsize=(15,5))\n\n# Somente os 10 primeiros\nsns.countplot(data=df_br, x='TRABALHO',order=df_br.TRABALHO.value_counts().index)\n                                                \nplt.show()","6047cd18":"# Plotando gr\u00e1fico para OBJETIVO\nplt.figure(figsize=(15,5))\n\n# Somente os 10 primeiros\nsns.countplot(data=df_br, x='OBJETIVO',order=df_br.OBJETIVO.value_counts().index)\n                                                \nplt.show()","e7cf6bac":"# Relacionar MAUS E BONS PAGADORES e VALOR\nplt.figure(figsize=(15,5))\nsns.stripplot(x='TIPO_PAGADOR',y='VALOR',data=df_br, linewidth=1)","903a4ef4":"# Relacionar TIPO_PAGADOR e TEMPO_EMPRESA\nplt.figure(figsize=(15,5))\nsns.stripplot(x='TIPO_PAGADOR',y='TEMPO_EMPRESA',data=df_br, linewidth=1)","b6dd6aa9":"# Relacionar TRABALHO e VALOR\nplt.figure(figsize=(15,5))\nplt.xticks(rotation=90)\nsns.stripplot(x='TRABALHO',y='VALOR',data=df_br, linewidth=1)","b93aa9c0":"# Boxplot entre TRABALHO e VALOR\nplt.figure(figsize=(15,5))\nplt.xticks(rotation=0)\nsns.boxplot(df_br['TRABALHO'],df_br['VALOR'])","5bf8877f":"# Analisando o valor pelo tempo de empresa\n\nplt.figure(figsize=(15,5))\nsns.pointplot(x='TEMPO_EMPRESA', y='VALOR',data=df_br, color='green')\nplt.title('Valor pelo Tempo de Empresa')\nplt.grid(True, color='silver')","97ec488f":"# Relacionar MAUS E BONS PAGADORES e VALOR\nplt.figure(figsize=(15,5))\nsns.stripplot(x='TIPO_PAGADOR',y='HIPOTECA',data=df_br, linewidth=1)","eaf34714":"# Valores por tipo de trabalho\nplt.figure(figsize=(15,5))\nsns.barplot(y='VALOR',x='TRABALHO',data=df_br)","195e3d05":"# An\u00e1lise por Plotagem do Gr\u00e1fico\nsns.set(rc={'figure.figsize':(15,5)})\nplt.figure()\nsns.distplot(df_br['VALOR'], bins=50)\nplt.xticks(rotation=0)\nplt.show()","3db8a642":"# An\u00e1lise por Plotagem do Gr\u00e1fico\nsns.set(rc={'figure.figsize':(15,5)})\nplt.figure()\nsns.distplot(df_br['HIPOTECA'], bins=50)\nplt.xticks(rotation=0)\nplt.show()","a1fd3139":"# An\u00e1lise por Plotagem do Gr\u00e1fico\nsns.set(rc={'figure.figsize':(15,5)})\nplt.figure()\nsns.distplot(df_br['TEMPO_EMPRESA'], bins=50)\nplt.xticks(rotation=0)\nplt.show()","6d8c49c5":"# An\u00e1lise do cruzamento de 'VALOR' e valor de 'HIPOTECA'\nsns.scatterplot(data=df_br, x='VALOR', y='HIPOTECA')","26dff02a":"# Cruzamento tamb\u00e9m de 'VALOR' e o valor da PROPRIEDADE\nsns.scatterplot(data=df_br, x='VALOR', y='VALOR_PROPRIEDADE')","69f95044":"# Verificando a Correla\u00e7\u00e3o das vari\u00e1veis\n\nf, ax = plt.subplots(figsize=(15,6))\nsns.heatmap(df_br.corr(), annot=True, fmt='.2f', linecolor='black',ax=ax, lw=.7)","626273b2":"# C\u00f3pia do dataframe obtendo valores dummies\ndf_br2 = pd.get_dummies(df_br, columns=['OBJETIVO','TRABALHO'])","2c8ab2b5":"# Defini\u00e7\u00e3o da independentes (target)\nfeats = [coluna for coluna in df_br2.columns if coluna not in ['TIPO_PAGADOR']]","8c998e10":"# Preenchendo com zero as colunas de valor nulas (Nan)\ndf_br2.fillna(0,inplace=True)","6f05706b":"# Separa\u00e7\u00e3o do dataframe para modelo\nfrom sklearn.model_selection import train_test_split\ntrain, valid = train_test_split(df_br2, test_size=0.2, random_state=42)","14b1fa9c":"# Importa\u00e7\u00e3o daS bibliotecas para o modelo\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","df763dae":"# Execu\u00e7\u00e3o do modelo\nrf = RandomForestClassifier(n_estimators=200, random_state=42)\nrf.fit(train[feats], train['TIPO_PAGADOR'])","a0f1e5ec":"# Modelo aplicado na base de valida\u00e7\u00e3o\npreds_val = rf.predict(valid[feats])","8e86ad3d":"# Verifica\u00e7\u00e3o da acur\u00e1cia\naccuracy_score(valid['TIPO_PAGADOR'], preds_val)","6de4b5fe":"# Plotagem do resultado do modelo RandomForrest\npd.Series(rf.feature_importances_, index=feats).sort_values().plot.barh()","8decf45d":"# Matriz de Confus\u00e3o\nimport scikitplot as skplt\nskplt.metrics.plot_confusion_matrix(valid['TIPO_PAGADOR'],preds_val)","099b2961":"# Importa\u00e7\u00e3o da biblioteca\nfrom sklearn.model_selection import cross_val_score","85267a67":"# Execu\u00e7\u00e3o\nscores = cross_val_score(rf, train[feats], train['TIPO_PAGADOR'], n_jobs=-1, cv=5)","1e62aca0":"# Analisando o resultado e a m\u00e9dia\nscores, scores.mean()","533ea6c3":"# Plotando o resultado\npd.Series(rf.feature_importances_, index=feats).sort_values().plot.barh()","32af7851":"# Importando a biblioteca k-means\nfrom sklearn.cluster import KMeans","c5aa08c1":"# Vari\u00e1veis escolhidas para teste do modelo\nvariaveis = df_br2[['HIPOTECA','VALOR', 'TEMPO_EMPRESA']]","14833ce2":"# C\u00e1lculo da soma dos erros quadrados\nsse = []\n\nfor k in range (1, 12):\n    kmeans = KMeans(n_clusters=k, random_state=42).fit(variaveis)\n    sse.append(kmeans.inertia_)\nprint(sse)","48c4a655":"# M\u00e9todo Elbow \nimport matplotlib.pyplot as plt\n\nplt.plot(range(1, 12), sse, 'bx-')\nplt.xlabel('Clusters')\nplt.ylabel('Soma dos Erros Quadrados')\nplt.show()","ddd1f759":"# N\u00famero de clusters ideal observado \u00e9 de 4, conforme observado no gr\u00e1fico\nkmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)\ncluster_id = kmeans.fit_predict(variaveis)\ncluster_id","90bf8e80":"# Armazenando no dataframe\nvariaveis['cluster_id'] = cluster_id","62d7acc9":"# An\u00e1lise do dataframe\nvariaveis.sample(10).T","29e5fb4a":"# Visualizando os centroides e agrupamentos\nplt.scatter(variaveis.values[:,0], variaveis.values[:,1], c=kmeans.labels_)\nplt.scatter(kmeans.cluster_centers_[:,0] ,kmeans.cluster_centers_[:,1], marker=\"x\", s=200, color='green')\nplt.show()","1cf0e3f9":"# Utiliza\u00e7\u00e3o do Cross Validation","156e2827":"BAD - MAU_PAGADOR\n\nLOAN - VALOR\n\nMORTDUE - HIPOTECA\n\nVALUE - VALOR_PROPRIEDADE\n\nREASON - OBJETIVO\n\nJOB - TRABALHO\n\nYOJ - TEMPO_EMPRESA\n\nDEROG - QTD_REL_NEGATIVO\n\nDELINQ - QTD_INADIMPLENTE\n\nCLAGE - IDADE_LINHA_COM\n\nNINQ - QTD_CRED_RECENT\n\nCLNO - QTD_LINHA_CRED\n\nDEBTINC - TAXA","b16b3e32":"Foi demonstrado que no modelo RandomForrest desempenhou resultado atrav\u00e9s da observa\u00e7\u00e3o da acur\u00e1cia de 91,4%, o que traz a ideia da necessidade de separar a base, auxiliando ainda na melhoria do modelo.\n\nAinda h\u00e1 muitas melhorias a serem feitas, como o ajustes e a busca atrav\u00e9s de dados. Al\u00e9m disso, algoritmos diferentes tamb\u00e9m podem fornecer resultados diferentes.","c418a4eb":"# Testando modelo Random Forrest para Cr\u00e9dito ou N\u00e3o","5f2b8b3f":"BAD - MAU_PAGADOR\n    1 = cliente inadimplente no empr\u00e9stimo 0 = empr\u00e9stimo pago\n\nLOAN - VALOR\n    Valor do empr\u00e9stimo\n\nMORTDUE - HIPOTECA\n    Valor da hipoteca\n\nVALUE - VALOR_PROPRIEDADE\n    Valor da propriedade atual\n\nREASON - OBJETIVO\n    DebtCon = consolida\u00e7\u00e3o da d\u00edvida\n    HomeImp = melhoria da casa\n\nJOB - TRABALHO\n    Categorias profissionais (6)\n\nYOJ - TEMPO_EMPRESA\n    Tempo de empresa (atual)\n\nDEROG - QTD_REL_NEGATIVO\n    N\u00famero dos principais relat\u00f3rios depreciativos\n\nDELINQ - QTD_INADIMPLENTE\n    N\u00famero de linhas de cr\u00e9dito inadimplentes\n\nCLAGE - IDADE_LINHA_COM\n    Idade da linha comercial mais antiga (em meses)\n\nNINQ - QTD_CRED_RECENT\n    N\u00famero de linhas de cr\u00e9dito recentes\n\nCLNO - QTD_LINHA_CRED\n    N\u00famero de linhas de cr\u00e9dito\n\nDEBTINC - TAXA\n    Taxa de juros","dbbf7dc0":"# An\u00e1lise de Cluster","7bff523c":"Descri\u00e7\u00e3o das colunas\n\nBAD\n    1 = cliente inadimplente no empr\u00e9stimo\n    0 = empr\u00e9stimo pago\n    \nLOAN\n    Valor do empr\u00e9stimo\n    \nMORTDUE\n    Valor da hipoteca\n    \nVALUE\n    Valor da propriedade atual\n\nREASON\n    DebtCon = consolida\u00e7\u00e3o da d\u00edvida\n    HomeImp = melhoria da casa\n    \nJOB\n    Categorias profissionais (6)\n    \nYOJ\n   Tempo de empresa (atual)\n   \nDEROG\n    N\u00famero dos principais relat\u00f3rios depreciativos\n    \nDELINQ\n    N\u00famero de linhas de cr\u00e9dito inadimplentes\n    \nCLAGE\n    Idade da linha comercial mais antiga (em meses)\n    \nNINQ\n    N\u00famero de linhas de cr\u00e9dito recentes\n    \nCLNO\n    N\u00famero de linhas de cr\u00e9dito\n    \nDEBTINC\n    Taxa de juros","88de708c":"# P\u00f3s-Gradua\u00e7\u00e3o em Ci\u00eancia de Dados \n### Disciplina \u2013 Data Mining e Machine Learning II\n\n#### Professor: MARCOS VIN\u00cdCIUS GUIMAR\u00c3ES\n#### Aluno: Alain Kirk F. Silva \u2013 1931133034\n#### Abril de 2019","dcb622e2":"Fonte de dados:\nhttps:\/\/www.kaggle.com\/ajay1735\/hmeq-data\n\nContexto:\n\nO departamento de cr\u00e9dito ao consumidor de um banco deseja automatizar o processo de tomada de decis\u00e3o para aprova\u00e7\u00e3o das linhas de cr\u00e9dito do patrim\u00f4nio l\u00edquido. Para fazer isso, eles seguir\u00e3o as recomenda\u00e7\u00f5es da Lei da Igualdade de Oportunidades de Cr\u00e9dito para criar um modelo de pontua\u00e7\u00e3o de cr\u00e9dito derivado empiricamente e estatisticamente s\u00f3lido. O modelo ser\u00e1 baseado em dados coletados de solicitantes recentes concedidos cr\u00e9dito atrav\u00e9s do processo atual de subscri\u00e7\u00e3o de empr\u00e9stimos. O modelo ser\u00e1 constru\u00eddo a partir de ferramentas de modelagem preditiva, mas o modelo criado deve ser suficientemente interpret\u00e1vel para fornecer um motivo para qualquer a\u00e7\u00e3o adversa (rejei\u00e7\u00e3o).\n\nConte\u00fado\n\nO conjunto de dados de Home Equity (HMEQ) cont\u00e9m informa\u00e7\u00f5es de linha de base e de desempenho de empr\u00e9stimos para 5.960 empr\u00e9stimos recentes de home equity. O target (BAD) \u00e9 uma vari\u00e1vel bin\u00e1ria que indica se um requerente acabou por falhar ou se foi gravemente delinq\u00fcente. Esse desfecho adverso ocorreu em 1.189 casos (20%). Para cada candidato, foram registradas 12 vari\u00e1veis de entrada."}}