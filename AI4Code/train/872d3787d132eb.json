{"cell_type":{"3dacc5ca":"code","1ada7304":"code","08ecafcb":"code","09792638":"code","a1d1ba64":"code","e9890204":"code","654dabb4":"code","038c98bd":"code","7bbd8877":"code","c9800aa9":"code","225605d4":"code","0137d4f3":"code","a2bc0dc8":"code","2ac6e544":"code","6b6ecbcb":"code","b66ddf20":"code","b4cdb409":"code","97803a8f":"code","3d54f7f8":"code","2351c1d7":"code","47669394":"code","30b910af":"code","b2d7017e":"code","4a6ec510":"code","67fb88d4":"code","f374b8a8":"code","c192a420":"code","71d5a11a":"code","2b452ecd":"code","14f92156":"code","7593607f":"code","86b690f3":"code","1cab1f25":"code","850ea193":"markdown","026a9f6b":"markdown","6e8357a2":"markdown","e02f20f9":"markdown","11ce538f":"markdown","4e0bdc06":"markdown","3b0e91ca":"markdown","3fc91a31":"markdown","2ec3e59b":"markdown","d51e6be1":"markdown"},"source":{"3dacc5ca":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import manifold","1ada7304":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")","08ecafcb":"train_df.describe()","09792638":"train_df.head(5)","a1d1ba64":"test_df.head(5)","e9890204":"train_df.isnull().sum()","654dabb4":"test_df.isnull().sum()","038c98bd":"dataset = [train_df,test_df]\n\nfor data in dataset:\n    cabin_map = {\"A\":1,\"B\":2,\"C\":3,\"D\":4,\"E\":5,\"F\":6,\"G\":7,\"T\":8}\n    data['Deck'] = data.Cabin.str.extract('([A-Za-z]+)',expand=False)\n    data['Deck'] = data['Deck'].map(cabin_map)\n    data['Deck'] = data.Deck.fillna(0)\n    data['Deck'] = data.Deck.astype(int)","7bbd8877":"train_df = train_df.drop(['Cabin'],axis=1)\ntest_df = test_df.drop(['Cabin'],axis=1)","c9800aa9":"dataset = [train_df,test_df]\n\nfor data in dataset:\n    data['Title'] =  data.Name.str.extract(' ([A-Za-z]+)\\.',expand=False)\n    #train_data['Title']\n    title_map = {\"Mr\":1,\"Mrs\":2,\"Miss\":3,\"Ms\":4,\"Rare\":5}\n    data['Title'] = data['Title'].replace(['Master','Don','Rev','Dr','Major','Lady','Sir',\n                           'Col','Capt','Countess','Jonkheer'],'Rare')\n    data['Title'] = data['Title'].replace(['Mme'],'Mrs')\n    data['Title'] = data['Title'].replace(['Mlle'],'Miss')\n    data['Title'] = data['Title'].map(title_map)\n    data['Title'] = data['Title'].fillna(0)\n    data['Title'] = data.Title.astype(int)","225605d4":"train_df = train_df.drop(['Name'],axis=1)\ntest_df = test_df.drop(['Name'],axis=1)","0137d4f3":"ports = {\"S\":1,\"C\":2,\"Q\":3}\ndataset = [train_df,test_df]\n\nfor data in dataset:\n    data['Embarked'] = data['Embarked'].map(ports)\n    data['Embarked'] = data.Embarked.fillna(0)\n    data['Embarked'] = data.Embarked.astype(int)","a2bc0dc8":"gender_map = {\"male\":1 , \"female\":2}\ndataset = [train_df,test_df]\n\nfor data in dataset:\n    data['Sex'] = data['Sex'].map(gender_map)","2ac6e544":"\ndataset = [train_df,test_df]\n\nfor data in dataset:\n    mean = data['Age'].mean()\n    std = data['Age'].std()\n    is_null = data['Age'].isnull().sum()\n    rand_age = np.random.randint(mean-std,mean+std,size=is_null)\n    #rand_age\n    age_slice = data['Age'].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    data['Age'] = age_slice\n    data['Age'] = data.Age.astype(int)\n    #train_data['Age'] = train_data.Age.astype(int)","6b6ecbcb":"dataset = [train_df,test_df]\n\nfor data in dataset:\n    data.loc[ data['Age'] <= 11, 'Age'] = 0\n    data.loc[ (data['Age'] >11) & (data['Age']<=18),'Age'] = 1\n    data.loc[ (data['Age'] >18) & (data['Age']<=22),'Age'] = 2\n    data.loc[ (data['Age'] >22) & (data['Age']<=27),'Age'] = 3\n    data.loc[ (data['Age'] >27) & (data['Age']<=33),'Age'] = 4\n    data.loc[ (data['Age'] >33) & (data['Age']<=40),'Age'] = 5\n    data.loc[ (data['Age'] >40) & (data['Age']<=66),'Age'] = 6\n    data.loc[ data['Age'] >66 ,'Age'] = 7","b66ddf20":"dataset = [train_df,test_df]\n\nfor data in dataset:\n    data.loc[ data['Fare'] <= 7.91 , 'Fare'] = 0\n    data.loc[ (data['Fare'] > 7.91) & (data['Fare'] <= 14.454) , 'Fare'] = 1\n    data.loc[ (data['Fare'] > 14.454) & (data['Fare'] <= 31.00) , 'Fare'] = 2\n    data.loc[ (data['Fare'] > 31.00) & (data['Fare'] <= 100) , 'Fare'] = 3\n    data.loc[ (data['Fare'] > 100) & (data['Fare'] <= 250) , 'Fare'] = 4\n    data.loc[ data['Fare'] > 250 , 'Fare'] = 5\n    data['Fare'] = data['Fare'].fillna(0)\n    data['Fare'] = data.Fare.astype(int)","b4cdb409":"train_df = train_df.drop(['Ticket'],axis=1)\ntest_df = test_df.drop(['Ticket'],axis=1)","97803a8f":"train_df = train_df.drop(['PassengerId'],axis=1)\ntest_df = test_df.drop(['PassengerId'],axis=1)","3d54f7f8":"dataset = [train_df,test_df]\n\nfor data in dataset:\n    data['relatives'] = data['SibSp']+data['Parch']\n    data.loc[data['relatives']>0,'not_alone'] = 0\n    data.loc[data['relatives'] == 0,'not_alone'] = 1\n    data['not_alone'] = data['not_alone'].astype(int)","2351c1d7":"train_df['Age'].isnull().sum()","47669394":"test_df['Age'].value_counts()","30b910af":"train_df['Fare'].value_counts()","b2d7017e":"train_df.head(5)","4a6ec510":"test_df.head(5)","67fb88d4":"x_train = train_df.drop(['Survived'],axis=1)\ny_train = train_df['Survived']\nx_test = test_df","f374b8a8":"params = dict(     \n    max_depth = [n for n in range(9, 14)],     \n    min_samples_split = [n for n in range(4, 11)], \n    min_samples_leaf = [n for n in range(2, 5)],     \n    n_estimators = [n for n in range(10, 60, 10)],\n)","c192a420":"clf = RandomForestClassifier()\nrand_clf_cv = GridSearchCV(estimator=clf,param_grid=params, cv=5) \nrand_clf_cv.fit(x_train,y_train)\ny_pred = rand_clf_cv.predict(x_test)","71d5a11a":"rand_clf_cv.best_params_","2b452ecd":"rand_clf_cv.score(x_train,y_train)","14f92156":"dec_clf = DecisionTreeClassifier()\ndec_clf.fit(x_train,y_train)\ny_pred = dec_clf.predict(x_test)\ndec_clf.score(x_train,y_train)","7593607f":"knn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(x_train,y_train)\n\ny_pred = knn.predict(x_test)\n\nknn.score(x_train,y_train)","86b690f3":"pid = list(range(892,1310))\n#pid","1cab1f25":"submission = pd.DataFrame({\n        \"PassengerId\": pid,\n        \"Survived\": y_pred\n    })\nsubmission.to_csv('submission9.csv', index=False)","850ea193":"### Data Analysis","026a9f6b":"### data validation","6e8357a2":"### Algorithms","e02f20f9":"#### Decision tree","11ce538f":"### Submission to kaggle","4e0bdc06":"#### Random Forest","3b0e91ca":"### Data preprocessing","3fc91a31":"### Import Libraries","2ec3e59b":"### load the data","d51e6be1":"#### KNN"}}