{"cell_type":{"eb93f4e7":"code","72d78a08":"code","af3241d3":"code","53cb4378":"code","94004d60":"code","9321a9c6":"code","e0189363":"code","a61bcc28":"code","f6855bd0":"code","0c9f193f":"code","32080bae":"code","c9eaf053":"code","f9ef06cc":"code","4036dee2":"code","d719823b":"code","00e76ec4":"code","5161cf66":"code","ba0a55fa":"code","0e08c147":"code","48e02399":"code","920bfe0a":"code","9fccb517":"code","5b2a36bd":"code","530109cb":"code","d34e39d3":"code","b75952da":"code","9cb04ce4":"code","18089684":"code","19199942":"code","2ad9aff7":"code","cec68ebb":"code","946ba986":"code","756e6e6f":"code","519ed29c":"code","02573765":"markdown","458b2ee0":"markdown","43c222bb":"markdown","5a99af85":"markdown","7a3990e8":"markdown","ad1f4d8a":"markdown","04bb67ef":"markdown","c070a306":"markdown","47812b3b":"markdown","bbb476f1":"markdown","6394fd56":"markdown","6354f1b0":"markdown"},"source":{"eb93f4e7":"import pandas as pd \nimport os\nimport numpy as np","72d78a08":"!wget https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/undocumented\/connectionist-bench\/sonar\/sonar.all-data -O sonar.csv","af3241d3":"df = pd.read_csv(\"\/kaggle\/working\/sonar.csv\", header = None)\ndataset = df.values\n\nX = dataset[:, 0:60].astype(float)\nY = dataset[:, 60]","53cb4378":"from keras.models import Sequential\nfrom keras.layers import Dense \nfrom keras.wrappers.scikit_learn import KerasClassifier \nfrom sklearn.model_selection import cross_val_score \nfrom sklearn.preprocessing import LabelEncoder \n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.pipeline import Pipeline","94004d60":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.33, random_state = 21)","9321a9c6":"from sklearn.preprocessing import StandardScaler \nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","e0189363":"X_train.shape","a61bcc28":"y_train","f6855bd0":"X_test.shape","0c9f193f":"def encode(x):\n    if x == \"M\":\n        return 1\n    else:\n        return 0\n    \ny_train = np.array([encode(x) for x in y_train])\ny_test = np.array([encode(x) for x in y_test])","32080bae":"y_train","c9eaf053":"from keras.models import Sequential\nfrom keras.layers import Dense\n\n\nmodel = Sequential()\nmodel.add(Dense(50, activation = 'relu', input_shape = (60,)))\nmodel.add(Dense(8, activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))\n\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'sgd', metrics = ['accuracy'])","f9ef06cc":"model.fit(X_train, y_train, epochs = 10, batch_size = 1, verbose = 1)","4036dee2":"!pip install -q -U kaggler","d719823b":"import kaggler\nfrom kaggler.preprocessing import DAE","00e76ec4":"encoding_dim = 128\nseed = 42\nn_fold = 5\nn_class = 4","5161cf66":"train = pd.read_csv('..\/input\/cat-in-the-dat\/train.csv')\ntrain.head()","ba0a55fa":"train.drop(['id'], axis= 1, inplace = True)","0e08c147":"target = train.drop(['target'], inplace = True, axis = 1)\nfeatures = train[['bin_0', 'bin_1', 'bin_2']]","48e02399":"features","920bfe0a":"df_all = features.astype(\"int64\")\n\ndae = DAE(cat_cols = ['bin_0', 'bin_1', 'bin_2'], num_cols = [], encoding_dim = encoding_dim, random_state = seed, swap_prob = 0.3, n_layer= 3)\nX = dae.fit_transform(df_all)\ndf_dae = pd.DataFrame(X, columns = [f'dae1_{x}' for x in range(X.shape[1])])\nprint(df_dae.shape)","9fccb517":"df_dae.to_csv(\"df_dae.csv\", index = False)","5b2a36bd":"!pip install -q pytorch-tabnet","530109cb":"train_data = pd.read_csv('..\/input\/santander-customer-satisfaction\/train.csv')\ntest_data = pd.read_csv('..\/input\/santander-customer-satisfaction\/test.csv')\nsample = pd.read_csv(\"..\/input\/santander-customer-satisfaction\/sample_submission.csv\")","d34e39d3":"X_train = train_data.iloc[:, :-1].to_numpy()\ny_train = train_data['TARGET'].to_numpy().squeeze()\nX_test = test_data.to_numpy()","b75952da":"from pytorch_tabnet.tab_model import TabNetClassifier\n\n\nclassifier = TabNetClassifier(verbose = 0, seed = 21)\nclassifier.fit(X_train= X_train, y_train = y_train, patience = 5, max_epochs = 100, eval_metric = ['auc'])","9cb04ce4":"predictions = classifier.predict_proba(X_test)[:, 1]","18089684":"!pip install -q deeptables[gpu]","19199942":"from deeptables.models.deeptable import DeepTable, ModelConfig\nfrom deeptables.models.deepnets import WideDeep \nfrom deeptables.datasets import dsutils \nfrom sklearn.model_selection import train_test_split ","2ad9aff7":"df_train = dsutils.load_adult()\n\ny = df_train.pop(14)\nX = df_train\n\n\nconf = ModelConfig(nets = WideDeep, metrics = ['AUC', 'accuracy'], auto_discrete = True)\ndt = DeepTable(config = conf)\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 21)\n\n\nmodel, history = dt.fit(X_train, y_train, epochs = 100)\n\n\nscore = dt.evaluate(X_test, y_test)\n\n","cec68ebb":"print(\"Score -> \", score)","946ba986":"df_train = dsutils.load_boston()\ny = df_train.pop(\"target\")\nX = df_train","756e6e6f":"conf = ModelConfig(\n    metrics = ['RootMeanSquaredError'],\n    nets = ['dnn_nets'],\n    dnn_params = {\n        'hidden_units' : ((256, 0.3, True), (256, 0.3, True)),\n        'dnn_activation' : 'relu'\n    },\n    earlystopping_patience = 5\n)\n\ndt = DeepTable(config = conf)\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 21)\n\nmodel, history = dt.fit(X_train, y_train, epochs = 100)\nscore = dt.evaluate(X_test, y_test)","519ed29c":"print(score)","02573765":"## Deep Learning Approaches for Tabular Datasets\n\nAuthor : Antoreep Jana, 2021 <br><br>\nPlease find the relevant presentation [here](https:\/\/docs.google.com\/presentation\/d\/1fQT_5swBVRRUwWoDvdps_2plWiBLAVeGCUeny2ZmKS4\/edit?usp=sharing).","458b2ee0":"#### 3. DAE","43c222bb":"#### 5. Deep Tables","5a99af85":"#### 4. TabNets","7a3990e8":"Check out this NB by Collin Morris, https:\/\/www.kaggle.com\/colinmorris\/embedding-layers <br>\nIn the meanwhile, let me do another implementation of embeddings.","ad1f4d8a":"Regression","04bb67ef":"#### 1. NNs & CNNs","c070a306":"Binary Classification","47812b3b":"#### 2. Embeddings","bbb476f1":"### Table of Contents\n\n1. NNs & CNNs\n2. Embeddings\n3. DAE\n4. TabNets\n5. Deep Tables","6394fd56":"Learn more about model parameters here -> https:\/\/github.com\/dreamquark-ai\/tabnet#model-parameters <br>\nFor demonstration purposes, we'll be proceeding without much configurations.","6354f1b0":"Necessary Imports"}}