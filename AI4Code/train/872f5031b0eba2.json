{"cell_type":{"bccd04ea":"code","ef826d25":"code","ad8e6c98":"code","dd900412":"code","2c9c6a45":"code","c7d249e4":"code","67598637":"code","b1038ae3":"code","817b1250":"code","282be62d":"code","4703fd3f":"code","2ecea58b":"code","c27237ec":"code","21080c5c":"code","5b8be8e9":"code","d09a421c":"code","18b2db9b":"code","6ede2dc9":"code","c6b0ff64":"code","98b7592b":"code","dad05b7c":"code","cd992144":"code","2ec0c08c":"code","777fb93e":"code","b5560c80":"code","44ec0471":"code","3b41f8f3":"code","8280e8c5":"code","5965890b":"code","47080b52":"code","e15862a3":"code","d4777683":"markdown","738eee20":"markdown","0d38368f":"markdown","ec885484":"markdown","9bea4ad9":"markdown","1a5ae322":"markdown","7bbd0e86":"markdown","2c442d4f":"markdown","fd9e36b0":"markdown","8d4ce42a":"markdown","f2d1fc01":"markdown","0d4b7ccf":"markdown","65966a05":"markdown","5b0c08c7":"markdown","e416c382":"markdown","50a45618":"markdown","940e6faa":"markdown","5d699255":"markdown","c74da7f1":"markdown","ec51076b":"markdown","6798f882":"markdown","0b84fe5d":"markdown","67f5cac6":"markdown","6f4a8be1":"markdown","229ad420":"markdown","ab8c51aa":"markdown","bcd76c25":"markdown","80fde230":"markdown","3ad8da12":"markdown"},"source":{"bccd04ea":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm","ef826d25":"df = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\ndf.head(10)","ad8e6c98":"df.info()","dd900412":"df.isnull().sum()","2c9c6a45":"df.describe()","c7d249e4":"cor = df.corr()\nplt.figure(figsize=(20,15))\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","67598637":"df.corr()[\"price\"].sort_values(ascending=False)","b1038ae3":"df = df.drop([\"id\"],axis=1)\ndf.head()","817b1250":"df['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf['day'] = df['date'].dt.day\n\ndf = df.drop(\"date\",axis=1)\n\ndf.head(10)","282be62d":"sns.distplot(df['price'])","4703fd3f":"len(df)*0.01","2ecea58b":"df = df.sort_values(['price'], ascending=False).iloc[216:]\ndf.head()","c27237ec":"sns.distplot(df['price'])","21080c5c":"df.describe()","5b8be8e9":"# Creating X and Y (features and labels)\nx = df.iloc[:,1:]\ny = df.iloc[:,0:1]\nX = x.values\nY = y.values","d09a421c":"from sklearn.metrics import r2_score","18b2db9b":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X,Y)\n\n\nprint(f'R\u00b2 score: {r2_score(Y, lin_reg.predict(X))*100}')","6ede2dc9":"#Linear - Regression Graph\npredictArray_lin = lin_reg.predict(X)\nplt.scatter(Y,predictArray_lin, color=\"b\")\nplt.plot(Y,Y, color=\"r\")","c6b0ff64":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 3)\nx_poly = poly_reg.fit_transform(X)\nlin_reg2 = LinearRegression()\nlin_reg2.fit(x_poly,y)\n\n\nprint(f'R\u00b2 score: {r2_score(Y, lin_reg2.predict(poly_reg.fit_transform(X)))*100}')","98b7592b":"# Polynomial - Regression Graph\npredictArray_poly = lin_reg2.predict(poly_reg.fit_transform(X)) \nplt.scatter(Y,predictArray_poly, color=\"b\")\nplt.plot(Y,Y, color=\"r\")","dad05b7c":"#scaling the data\n\nfrom sklearn.preprocessing import StandardScaler\n\nsc1=StandardScaler()\nx_scaled = sc1.fit_transform(X)\n\nsc2=StandardScaler()\ny_scaled = np.ravel(sc2.fit_transform(Y.reshape(-1,1)))","cd992144":"from sklearn.svm import SVR\n\nsvr_reg = SVR(kernel='rbf')\nsvr_reg.fit(x_scaled,y_scaled)\n\nprint(f'R\u00b2 score: {r2_score(y_scaled, svr_reg.predict(x_scaled))*100}')\n\n","2ec0c08c":"#SVR - Regression Graph\npredictArray_svr = svr_reg.predict(x_scaled)\nplt.scatter(y_scaled,predictArray_svr, color=\"b\")\nplt.plot(y_scaled,y_scaled, color=\"r\") ","777fb93e":"from sklearn.tree import DecisionTreeRegressor\nr_dt = DecisionTreeRegressor(random_state=0)\nr_dt.fit(X,Y)\n\nprint(f'R\u00b2 score: {r2_score(Y, r_dt.predict(X))*100}')\n","b5560c80":"#Decision Tree - Regression Graph\npredictArray_dt = r_dt.predict(X)\nplt.scatter(Y,predictArray_dt, color=\"b\")\nplt.plot(Y,Y, color=\"r\")","44ec0471":"from sklearn.ensemble import RandomForestRegressor\nrf_reg=RandomForestRegressor(n_estimators = 10,random_state=0)\nrf_reg.fit(X,Y.ravel())\n\nprint(f'R\u00b2 score: {r2_score(Y, rf_reg.predict(X))*100}')\n","3b41f8f3":"#Random Forest - Regression Graph\npredictArray_rf = rf_reg.predict(X)\nplt.scatter(Y,predictArray_rf, color=\"b\")\nplt.plot(Y,Y, color=\"r\")","8280e8c5":"#Creation of R\u00b2 scores\nr2_lin = r2_score(Y, lin_reg.predict(X))*100\nr2_poly = r2_score(Y, lin_reg2.predict(poly_reg.fit_transform(X)))*100\nr2_SVR = r2_score(y_scaled, svr_reg.predict(x_scaled))*100\nr2_dt = r2_score(Y, r_dt.predict(X))*100\nr2_rf = r2_score(Y, rf_reg.predict(X))*100","5965890b":"# Regression Graphs - Subplot\nplt.figure(figsize=(16,12),facecolor='#9DF08E')\nplt.subplot(2,3,1)\nplt.scatter(Y,predictArray_lin, color='b')\nplt.plot(Y,Y, color='r')\nplt.title('Linear Reg.', color='r')\n\nplt.subplot(2,3,2)\nplt.scatter(Y,predictArray_poly, color='b')\nplt.plot(Y,Y, color='r')\nplt.title('Polynomial Reg.', color='r')\n\nplt.subplot(2,3,3)\nplt.scatter(y_scaled,predictArray_svr, color=\"b\")\nplt.plot(y_scaled,y_scaled, color=\"r\") \nplt.title('SVR Reg.', color='r')\n\nplt.subplot(2,3,4)\nplt.scatter(Y,predictArray_dt, color=\"b\")\nplt.plot(Y,Y, color='r')\nplt.title('Decision Tree', color='r')\n\nplt.subplot(2,3,5)\nplt.scatter(Y,predictArray_rf, color=\"b\")\nplt.plot(Y,Y, color='r')\nplt.title('Random Forest', color='r')","47080b52":"#Printing R\u00b2 scores\nprint(\"------------- R\u00b2 SCORES OF MODELS ----------------\\n\")\nprint(f'Linear Regression R\u00b2 Score     : {r2_lin}')\nprint(f'Polynomial Regression R\u00b2 Score : {r2_poly}')\nprint(f'SVR R\u00b2 Score                   : {r2_SVR}')\nprint(f'Decision Tree R\u00b2 Score         : {r2_dt}')\nprint(f'Random Forest R\u00b2 Score         : {r2_rf}')","e15862a3":"#Bar Graph Display of R\u00b2 Scores\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.set_title(\"Comparison of Models' R\u00b2 Score\", color='r')\nax.set_xlabel('Model Name', color='g')\nax.set_ylabel('R\u00b2 Score', color='g')\nmodels_names = ['Linear Reg.', 'Polynomial Reg.', 'SVR', 'Decision Tree', 'Random Forest']\nmodels_r2s = [r2_lin,r2_poly,r2_SVR,r2_dt,r2_rf]\nax.bar(models_names, models_r2s,color=\"#2DC100\")\nplt.show()","d4777683":"Since I will look at the r2_score after creating each model, I imported the r2_score here, at the beginning.","738eee20":"<a id = \"9\"><\/a><br>\n# Conclusion","0d38368f":"<a id = \"5\"><\/a><br>\n## Polynomial Regression","ec885484":"<a id = \"4\"><\/a><br>\n## Linear Regression ","9bea4ad9":" <h1 style=\"background-color:white\n;font-family:Arial Black;font-size:225%;text-align:center;border-radius: 15px 50px;\">  \ud83c\udfd8\ufe0f House Sales Regression \ud83c\udfd8\ufe0f  <\/h1><a id=0><\/a>\n\n# ![](https:\/\/media.giphy.com\/media\/l0IylQoMkcbZUbtKw\/giphy.gif)","1a5ae322":"There is  an 'id' column. In data preprocessing, I will drop it because the id column does not positively affect model.","7bbd0e86":"<h1 style=\"background-color:#10DEFF\n;font-family:Comic Sans MS;font-size:225%;text-align:center;border-radius: 15px 50px;\"> \ud83d\udcca Thank you all for reading. If you like it, upvote please and leave feedback. It would really help me to learn new things and develop my skills. \ud83d\ude03 <\/h1><a id=note><\/a>","2c442d4f":"We got a 'more' normal distribution, nice.","fd9e36b0":"<a id = \"8\"><\/a><br>\n## Random Forest ","8d4ce42a":"I found the number of rows to drop. So, 216 rows will be dropped.","f2d1fc01":"Data preparation is done, let's move on to creating the models.","0d4b7ccf":"<font color = '#F08841'>\nContent:\n    \n1. [Loading and Checking Data](#1)\n1. [Data Preprocessing](#2)\n1. [Creating Models](#3)\n    *          [Linear Regression ](#4)\n    *          [Polynomial Regression ](#5)\n    *          [SVR (Support Vector Regression) ](#6)\n    *          [Decision Tree  ](#7)\n    *          [Random Forest ](#8)\n1. [Conclusion](#9)\n1. [A Little Note](#10)","65966a05":"# Comments on the result\nAlthough Decision Tree has the highest R\u00b2 score (99.99), I think the most successful model for regression of this dataset is 'Random Forest'. Because 99.99 is such a perfect score it shouldn't be, there may be a mistake somewhere.\n\nAlso, The variable that affects the price the most is 'sqft_living' with +0.70 correlation value.\n","5b0c08c7":"<a id = \"6\"><\/a><br>\n## SVR (Support Vector Regression)","e416c382":"<a id = \"7\"><\/a><br>\n## Decision Tree ","50a45618":"In this way, some of the data that adversely affected the normal distribution was removed.","940e6faa":"I split the 'date' column into 'year', 'month' and 'day' columns.\nThese columns are located on the far right. Then I dropped the 'date' column.","5d699255":"The kernel function that will give the highest performance for this problem is 'rbf'.","c74da7f1":"Changes in mean price and number of rows appear after some data is removed.","ec51076b":"It is enough to drop 1% of the total data.","6798f882":"<a id = \"10\"><\/a><br>\n# A Little Note","0b84fe5d":"The 'id' column is meaningless for this problem so, I dropped it. Also, the 'date' column is non-numeric, but I don't want to drop it so I'll split it into 3 parts, 'day', 'month' and 'year'.The last thing I will do is: I will not remove the 'zipcode' column because after I finished the whole process, I removed it and checked the performance of the models, I get better results with the 'zipcode' column.","67f5cac6":"<a id = \"2\"><\/a><br>\n# Data Preprocessing","6f4a8be1":"It looks like a Normal Distribution, but on the right there is some data that distorts the distribution (shown in yellow in the picture). ![qqqqqqqq.PNG](attachment:da4c36ab-23c2-43ab-9714-ae95bc56b55d.PNG) I'll drop some of it","229ad420":"There is no null data, good.","ab8c51aa":"<a id = \"3\"><\/a><br>\n# Creating Models","bcd76c25":"Unlike other models, SVR receives the data as scaled.","80fde230":" <a id = \"1\"><\/a><br>\n # Loading and Checking Data","3ad8da12":"The variable that affects the price the most is 'sqft_living' with +0.70 correlation value."}}