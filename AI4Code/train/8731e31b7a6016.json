{"cell_type":{"70e795e5":"code","a3cc7e44":"code","1c3eb192":"code","ca000616":"code","ee924ba1":"code","f1e69368":"code","286a2d7a":"code","27381545":"code","5e1da13c":"code","7ff964f0":"code","85c3837d":"code","890bc503":"code","7007b673":"code","fae33870":"code","5882105e":"code","49827051":"code","c8fdeaf1":"code","54fe7331":"code","25a914ec":"code","d2cdf13f":"code","36a113f6":"code","1b0fd50e":"code","d3b8a2de":"code","879d07d0":"code","4f9e30c4":"code","6c5f014c":"markdown","b3e9acdd":"markdown","c06a7a19":"markdown","283a9fd2":"markdown","29343c0b":"markdown","937a22d3":"markdown","ad27c4dd":"markdown","cbc045bb":"markdown","0e679a6d":"markdown","23c1d38d":"markdown","75ab2ac2":"markdown","e63cda81":"markdown","66f83bac":"markdown"},"source":{"70e795e5":"import datetime\nimport numpy as np\nimport tensorflow as tf \nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-white')\nfrom PIL import Image \nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\nfrom random import *\n\nfrom tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint, EarlyStopping, LearningRateScheduler\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.models import Sequential, load_model, save_model\nfrom tensorflow.keras.utils import to_categorical, plot_model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout, Input, BatchNormalization, Activation\nfrom tensorflow.keras.regularizers import l2, l1_l2","a3cc7e44":"row = 300\ncol = 300\nbatch_size = 64","1c3eb192":"train = ImageDataGenerator(rescale = 1\/255)\ntrain = train.flow_from_directory(r'..\/input\/gravity-spy-gravitational-waves\/train\/train\/',\n                                      target_size = (row, col),\n                                      batch_size = batch_size,\n                                      shuffle = True,\n                                      class_mode = 'categorical')\n\nval = ImageDataGenerator(rescale = 1\/255)\nval = val.flow_from_directory(r'..\/input\/gravity-spy-gravitational-waves\/validation\/validation\/',\n                                      target_size = (row, col),\n                                      batch_size = batch_size,\n                                      shuffle = True,\n                                      class_mode = 'categorical')\n\ntest = ImageDataGenerator(rescale = 1\/255)\ntest = test.flow_from_directory(r'..\/input\/gravity-spy-gravitational-waves\/test\/test\/',\n                                      target_size = (row, col),\n                                      batch_size = 1,\n                                      shuffle = False,\n                                      class_mode = 'categorical')","ca000616":"epochs = 50\n\nmodel = Sequential([Input(shape=(row, col,3)),\n                    \n                    Conv2D(32, kernel_size=3, strides = 2, kernel_regularizer=l2(0.001), \n                           padding='same', activation='relu'),\n                    Dropout(0.3),\n                    Conv2D(32, kernel_size=3, strides = 1, kernel_regularizer=l2(0.001), \n                           padding='same', activation='relu'),\n                    Dropout(0.3),\n                    MaxPool2D(pool_size=2),\n                    \n                    Conv2D(64, kernel_size=3, strides = 1, kernel_regularizer=l2(0.001), \n                           padding='same', activation='relu'),\n                    Dropout(0.3),\n                    Conv2D(64, kernel_size=3, strides = 1, kernel_regularizer=l2(0.001), \n                           padding='same', activation='relu'),\n                    Dropout(0.3),\n                    MaxPool2D(pool_size=2),\n                    \n                    Conv2D(128, kernel_size=3, strides = 2, kernel_regularizer=l2(0.001), \n                           padding='same', activation='relu'),\n                    Dropout(0.3),\n                    Conv2D(128, kernel_size=3, strides = 1, kernel_regularizer=l2(0.001), \n                           padding='same', activation='relu'),\n                    MaxPool2D(pool_size=2),\n                    \n                    Flatten(),\n                    Dropout(0.3),\n                    Dense(100, kernel_regularizer=l2(0.001), activation='relu'),\n                    Dropout(0.3),\n                    Dense(50, kernel_regularizer=l2(0.001), activation='relu'),\n                    Dense(22, activation='softmax')])\n\n\nmodel.compile(optimizer = Adam(0.001), \n              loss = 'categorical_crossentropy', metrics = ['accuracy'])\n\nmodel.summary()\nplot_model(model, show_shapes=True)","ee924ba1":"def scheduler(epoch, learning_rate):\n    if epoch < 13:\n        return learning_rate\n    else:\n        return learning_rate*tf.math.exp(-0.1)\n\nlr_scheduler_cb = LearningRateScheduler(scheduler)  ","f1e69368":"checkpoint_cb = tf.keras.callbacks.ModelCheckpoint('mgy_gravity_spy_model11.h5',\n                                                   monitor='val_accuracy',\n                                                   mode='max',\n                                                   save_best_only=True)","286a2d7a":"callbacks = [checkpoint_cb,\n            lr_scheduler_cb]","27381545":"his = model.fit(train, batch_size=batch_size, steps_per_epoch = 22348\/\/batch_size, \n                epochs=epochs, validation_data=(val), validation_steps = 4800\/\/batch_size, callbacks = callbacks)","5e1da13c":"history_dict = his.history\n\nloss = history_dict['loss']\nval_loss = history_dict['val_loss']\n\nepochs = range(1, len(loss)+1)\nfig = plt.figure(figsize = (12,5))\n\nax1 = fig.add_subplot(1,2,1)\nax1.plot(epochs, loss, color='blue', label = 'train_loss')\nax1.plot(epochs, val_loss, color = 'red', label = 'val_loss')\nax1.set_title('Train and Validation Loss')\nax1.set_xlabel('Epochs')\nax1.set_ylabel('Loss')\nax1.grid()\nax1.legend()\n\n\nloss = history_dict['accuracy']\nval_accuracy = history_dict['val_accuracy']\n\nax2 = fig.add_subplot(1,2,2)\nax2.plot(epochs, loss, color='blue', label = 'train_accuracy')\nax2.plot(epochs, val_accuracy, color = 'red', label = 'val_accuracy')\nax2.set_title('Train and Validation Accuracy')\nax2.set_xlabel('Epochs')\nax2.set_ylabel('Accuracy')\nax2.grid()\nax2.legend()\n\nplt.show()","7ff964f0":"loaded_model = load_model('mgy_gravity_spy_model11.h5')","85c3837d":"result = loaded_model.evaluate(test)","890bc503":"pred_ys = loaded_model.predict(test)","7007b673":"argmax_pred_y = np.argmax(pred_ys, axis = 1)\n    \nmax_pred_y = np.max(pred_ys, axis = 1)\n\nargmax_pred_y[max_pred_y <= 0.25] = 22 \n\n#I define that if maximum acc lower than 0.25 treat it as etc","fae33870":"class_names = ['1080Lines','1400Ripples','Air_Compressor','Blip','Chirp','Extremely_Loud','Helix','Koi_Fish',\n               'Light_Modulation','Low_Frequency_Burst','Low_Frequency_Lines','No_Glitch','None_of_the_Above',\n               'Paired_Doves','Power_Line','Repeating_Blips','Scattered_Light','Scratchy','Tomte','Violin_Mode','Wandering_Line',\n               'Whistle', 'etc']\n\nclass_names_except_etc = ['1080Lines','1400Ripples','Air_Compressor','Blip','Chirp','Extremely_Loud','Helix','Koi_Fish',\n                          'Light_Modulation','Low_Frequency_Burst','Low_Frequency_Lines','No_Glitch','None_of_the_Above',\n                          'Paired_Doves','Power_Line','Repeating_Blips','Scattered_Light','Scratchy','Tomte','Violin_Mode','Wandering_Line',\n                          'Whistle']\n\ndef image_watch(i):\n    \n    if np.argmax((test[i])[1]) == argmax_pred_y[i]:\n        color = 'blue'\n    else:\n        color = 'red'\n    \n   \n    plt.imshow((test[i])[0].reshape(row, col,3))\n    plt.title(\"Predicted class : {} \\n True class: {} \\n Predicted percentage: {}%\".format(class_names[argmax_pred_y[i]], \n                                                                                    class_names[np.argmax((test[i])[1])],\n                                                                                    round(100*np.max((pred_ys[i])), 3)),color=color)\n    \n    test_pic = (test[i])\n    plt.show()","5882105e":"x = []\nfor i in range(10): \n    x.append(randint(0, 4720))    \n\nfor idx in x:\n    image_watch(idx)\n","49827051":"img_num = [0, 200, 236, 272, 1364, 1404, 1660, 1828, 2236, 2548, 2908, 3172, 3256, 3300, 3316, 3588, 3736, 4004, 4204, 4256, 4512,\n          4540, 4720]","c8fdeaf1":"def each_label_acc():\n    \n    for u in range(0,22):\n        \n        T = 0 \n        F = 0\n        \n        for i in range(img_num[u],img_num[u+1]):\n\n            if np.argmax((test[i])[1]) == argmax_pred_y[i]:\n                T+=1\n            if np.argmax((test[i])[1]) != argmax_pred_y[i]:\n                F+=1\n        print(class_names[u], ':' ,round(100*T\/(T+F), 3), '%')\n","54fe7331":"each_label_acc()","25a914ec":"#1080Lines : 0, 200\n#1400Ripples : 200, 236\n#Air_Compressor : 236, 272\n#Blip : 272, 1364\n#Chirp : 1364, 1404\n#Extremely_Loud : 1404, 1660\n#Helix : 1660, 1828\n#Koi_Fish : 1828, 2236\n#Light_Modulation : 2236, 2548\n#Low_Frequency_Burst : 2548, 2908\n#Low_Frequency_Lines : 2908, 3172\n#No_Glitch : 3172, 3256\n#None_of_the_Above : 3256, 3300\n#Paired_Doves : 3300, 3316\n#Power_Line : 3316, 3588\n#Repeating_Blips : 3588, 3736\n#Scattered_Light : 3736, 4004\n#Scratchy : 4004, 4204\n#Tomte : 4204, 4256\n#Violin_Mode : 4256, 4512\n#Wandering_Line : 4512, 4540\n#Whistle : 4540, 4720\n\n\n#Let's watch each label's img\n\n#for example range(3300, 3316) means Paired_Doves img's index\n\nfor idx in range(236, 272): \n    image_watch(idx)","d2cdf13f":"values, counts = np.unique(argmax_pred_y, axis=0, return_counts=1)\n    \nprint('predicted etc count :', counts[-1])","36a113f6":"print(np.where(argmax_pred_y == 22))","1b0fd50e":"image_watch(4527) #this image's maximum acc was lower than 0.25. So it was automatically labbeled 'etc'","d3b8a2de":"sns.set(style='white')\nplt.figure(figsize=(14, 14))\ncm = confusion_matrix(test.classes, np.argmax(pred_ys, axis= -1))\nheatmap = sns.heatmap(cm, annot=True, fmt = 'd', cmap='Blues')\nheatmap.set_xticklabels(class_names_except_etc, fontdict={'fontsize':12,'rotation': 90})\nheatmap.set_yticklabels(class_names_except_etc, fontdict={'fontsize':12,'rotation': 0})\nplt.xlabel('Predicted Label', fontdict={'fontsize':15})\nplt.ylabel('True Label', fontdict={'fontsize':15})\nplt.title('Confusion matrix \\n Glitch of gravitational wave', fontdict={'fontsize':20})\nplt.show()","879d07d0":"def total_acc():\n    \n    T=0\n    \n    for i in range(len(argmax_pred_y)):\n        \n        if np.argmax((test[i])[1]) == argmax_pred_y[i]:\n            T+=1\n        \n    print('total_accouracy', ':' ,round(100*T\/len(argmax_pred_y), 3), '%')\n","4f9e30c4":"total_acc()\nprint('except_etc_accuracy : {}%'.format(100*round(result[1], 5)))","6c5f014c":"============================================================================================================================\n\nthen, how many images were classified with the 'etc' label?","b3e9acdd":"============================================================================================================================\n\nLet's make a callback function","c06a7a19":"============================================================================================================================\n\nLet's make a 'etc' label for some images that don't belong any labels. \n\nWe can treat other images that didn't classified only those classes. so, 'etc' label is essential","283a9fd2":"============================================================================================================================\n\nLet's see train history","29343c0b":"============================================================================================================================\n\nuse flow from directory function to load image ","937a22d3":"============================================================================================================================\n\nThanks to callback function's modelcheckpoint, we can load best trained model from each epoch of train","ad27c4dd":"Let's see which \"one image\" was classified 'etc'","cbc045bb":"============================================================================================================================\n\nTrain model","0e679a6d":"============================================================================================================================\n\nLet's see img_watch function's result","23c1d38d":"============================================================================================================================\n\nDesignate image's width and height\nand also designate batch size ","75ab2ac2":"============================================================================================================================\n\nNow, let's check each label's accuracy","e63cda81":"============================================================================================================================\n\nMake a model","66f83bac":"============================================================================================================================\n\nLet's see the result through the confusion matrix."}}