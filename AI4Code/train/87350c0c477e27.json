{"cell_type":{"b4db8bd8":"code","4baf9b0f":"code","02848ddf":"code","bea98a63":"code","1f72d8de":"code","b768b266":"code","9563bff1":"code","d16ed63c":"code","3695e7b8":"code","e8440bcb":"code","95cdd04b":"code","d83ab922":"code","8c361f42":"code","08cda7fe":"markdown","dc5121cf":"markdown","037b56e4":"markdown","3737861c":"markdown","b146c9e0":"markdown","891a6573":"markdown"},"source":{"b4db8bd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\ndata = pd.read_csv('\/kaggle\/input\/animal-crossing-new-horizons-nookplaza-dataset\/villagers.csv')","4baf9b0f":"data.head()","02848ddf":"missing_percentage=df.isna().sum()*100\/df.shape[0]\nmissing_percentage","bea98a63":"The_Male=data[data['Gender']=='Male']\nprint(The_Male.shape)","1f72d8de":"The_Female=data[data['Gender']=='Female']\nprint(The_Female.shape)","b768b266":"import plotly.express as px\nfig = px.histogram(The_Male,x='Species',color='Species')\nfig.show()","9563bff1":"import plotly.express as px\nfig = px.histogram(The_Female,x='Species',color='Species')\nfig.show()","d16ed63c":"\nimport plotly.express as px\nfig = px.histogram(The_Male,x='Color 1',color='Color 1')\nfig.show()\n\n\nfig = px.histogram(The_Male,x='Style 1',color='Style 1')\nfig.show()\n\n\nfig = px.histogram(The_Male,x='Color 2',color='Color 2')\nfig.show()\n\n\nfig = px.histogram(The_Male,x='Style 2',color='Style 2')\nfig.show()\n\n","3695e7b8":"fig = px.histogram(The_Female,x='Color 1',color='Color 1')\nfig.show()\n\n\nfig = px.histogram(The_Female,x='Style 1',color='Style 1')\nfig.show()\n\n\nfig = px.histogram(The_Female,x='Color 2',color='Color 2')\nfig.show()\n\n\nfig = px.histogram(The_Female,x='Style 2',color='Style 2')\nfig.show()\n","e8440bcb":"Color_1 = data['Color 1'].value_counts()\nColor_1 = pd.DataFrame(Color_1)\nColor_1=Color_1.reset_index()\nfig = px.pie(Color_1, values='Color 1', names='index', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","95cdd04b":"Color_2 = data['Color 2'].value_counts()\nColor_2 = pd.DataFrame(Color_2)\nColor_2=Color_2.reset_index()\nfig = px.pie(Color_2, values='Color 2', names='index', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","d83ab922":"Style_1 = data['Style 1'].value_counts()\nStyle_1 = pd.DataFrame(Style_1)\nStyle_1=Style_1.reset_index()\nfig = px.pie(Style_1, values='Style 1', names='index', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","8c361f42":"Style_2 = data['Style 2'].value_counts()\nStyle_2 = pd.DataFrame(Style_2)\nStyle_2=Style_2.reset_index()\nfig = px.pie(Style_2, values='Style 2', names='index', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","08cda7fe":"*This for female gender*","dc5121cf":"*Femal  gender with Species *","037b56e4":"***Male gender with all color and style  ***","3737861c":"***Female gender with all color and style  ***","b146c9e0":"*Male gender with Species *","891a6573":"**This for Male gender **"}}