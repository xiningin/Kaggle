{"cell_type":{"f3f363d7":"code","192f39ee":"code","c3c26b5e":"code","5750eee6":"code","1ffa3829":"code","198fed73":"code","173c09d3":"code","3c83d32e":"code","3426eeef":"code","6bf3a459":"code","9710d26f":"code","2f510cae":"code","ac0a6b4d":"code","688cbd33":"code","06e47460":"code","01877ec0":"code","95ecfa34":"code","3be50aaf":"code","dc7a4ff4":"code","f1cc8ca4":"code","15fc69f2":"code","d0d002f3":"code","716cd79d":"markdown"},"source":{"f3f363d7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nsns.set(style='white', palette='dark')\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","192f39ee":"#Importing Dataset\ndf = pd.read_csv('\/kaggle\/input\/manufacturing-cost\/EconomiesOfScale.csv')\ndf","c3c26b5e":"#Analysing dataset with padas profiling\nfrom pandas_profiling import ProfileReport\nprofile = ProfileReport(df, title='Medical Cost Personal Datasets', html={'style':{'full_width':True}})","5750eee6":"profile","1ffa3829":"#Dataset statistic\ndf.describe()","198fed73":"#Dataset info\ndf.info()","173c09d3":"#Plotting dataset\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(1,1,1)\nax.scatter(df['Number of Units'].values, df['Manufacturing Cost'].values,marker='o', color='r', alpha=1, linewidth=1, \n            edgecolor='k')\nax.set_title('Relationship between Number of Units x Manufacturing Cost', fontsize=15)\nax.set_xlabel(df.columns[0], fontsize=15)\nax.set_ylabel(df.columns[1], fontsize=15)\nax.grid(b=True, which='major', linestyle='--')\nax.tick_params(axis='both', labelsize=15, labelcolor='k')\nplt.tight_layout()","3c83d32e":"#Splitting Data\nX=df.drop('Manufacturing Cost', axis=1)\ny=df['Manufacturing Cost']","3426eeef":"#Splitting the Dataset into the training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nX_train.shape, X_test.shape, y_train.shape,y_test.shape","6bf3a459":"#Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nX_train = pd.DataFrame(sc_x.fit_transform(X_train), columns=X.columns.values)\nX_test = pd.DataFrame(sc_x.transform(X_test), columns=X.columns.values)","9710d26f":"## Multiple Linear Regression Regression\nfrom sklearn.linear_model import LinearRegression\nlr_regressor = LinearRegression(fit_intercept=True)\nlr_regressor.fit(X_train, y_train)\n\nprint('Linear Model Coefficient (m): ', lr_regressor.coef_)\nprint('Linear Model Coefficient (b): ', lr_regressor.intercept_)\n\n# Predicting Test Set\ny_pred = lr_regressor.predict(X_test)\n\nplt.scatter(X_train, y_train, color = 'gray')\nplt.plot(X_train, lr_regressor.predict(X_train), color = 'red')\nplt.ylabel('{} ($)'.format(df.columns[1]))\nplt.xlabel('{}'.format(df.columns[0]))\nplt.title('Economies Of Scale (Training dataset)')","2f510cae":"plt.scatter(X_test, y_test, color = 'gray')\nplt.plot(X_test, lr_regressor.predict(X_test), color = 'red')\nplt.ylabel('{} ($)'.format(df.columns[1]))\nplt.xlabel('{}'.format(df.columns[0]))\nplt.title('Economies Of Scale (Test dataset)')\n\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nresults = pd.DataFrame([['Multiple Linear Regression', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])","ac0a6b4d":"## Polynomial Regressor\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 2)\nX_poly = poly_reg.fit_transform(X_train)\nlr_poly_regressor = LinearRegression(fit_intercept=True)\nlr_poly_regressor.fit(X_poly, y_train)\n\n# Predicting Test Set\ny_pred = lr_poly_regressor.predict(poly_reg.fit_transform(X_test))\n\nplt.scatter(X_test, y_test, color = 'gray')\nplt.scatter(X_test,y_pred, color = 'red')\nplt.ylabel('{} ($)'.format(df.columns[1]))\nplt.xlabel('{}'.format(df.columns[0]))\nplt.title('Economies Of Scale (Test dataset)')\n\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Polynomial Regression', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","688cbd33":"## Suport Vector Regression \n'Necessary Standard Scaler '\nfrom sklearn.svm import SVR\nsvr_regressor = SVR(kernel = 'rbf')\nsvr_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = svr_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Support Vector RBF', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","06e47460":"## Decision Tree Regression\nfrom sklearn.tree import DecisionTreeRegressor\ndt_regressor = DecisionTreeRegressor(random_state=0)\ndt_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = dt_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Decision Tree Regression', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","01877ec0":"## Random Forest Regression\nfrom sklearn.ensemble import RandomForestRegressor\nrf_regressor = RandomForestRegressor(n_estimators=300, random_state=0)\nrf_regressor.fit(X_train,y_train)\n\n# Predicting Test Set\ny_pred = rf_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Random Forest Regression', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","95ecfa34":"## Ada Boosting\nfrom sklearn.ensemble import AdaBoostRegressor\nad_regressor = AdaBoostRegressor()\nad_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = ad_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['AdaBoost Regressor', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","3be50aaf":"##Gradient Boosting\nfrom sklearn.ensemble import GradientBoostingRegressor\ngb_regressor = GradientBoostingRegressor()\ngb_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = gb_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['GradientBoosting Regressor', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","dc7a4ff4":"##Xg Boosting\nfrom xgboost import XGBRegressor\nxgb_regressor = XGBRegressor()\nxgb_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = xgb_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['XGB Regressor', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","f1cc8ca4":"##Ensemble Voting regressor\nfrom sklearn.ensemble import VotingRegressor\nvoting_regressor = VotingRegressor(estimators= [('lr', lr_regressor),\n                                                  ('lr_poly', lr_poly_regressor),\n                                                  ('svr', svr_regressor),\n                                                  ('dt', dt_regressor),\n                                                  ('rf', rf_regressor),\n                                                  ('ad', ad_regressor),\n                                                  ('gb', gb_regressor),\n                                                  ('xg', xgb_regressor)])\n\nfor clf in (lr_regressor,lr_poly_regressor,svr_regressor,dt_regressor,\n            rf_regressor, ad_regressor,gb_regressor, xgb_regressor, voting_regressor):\n    clf.fit(X_train,y_train)\n    y_pred = clf.predict(X_test)\n    print(clf.__class__.__name__, metrics.r2_score(y_test, y_pred))\n\n# Predicting Test Set\ny_pred = voting_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Ensemble Voting', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)  ","15fc69f2":"#The Best Classifier\nprint('The best regressor is:')\nprint('{}'.format(results.sort_values(by='R2 Score',ascending=False).head(5)))","d0d002f3":"#Applying K-fold validation\nfrom sklearn.model_selection import cross_val_score\ndef display_scores (scores):\n    print('Scores:', scores)\n    print('Mean:', scores.mean())\n    print('Standard:', scores.std())\n\nlin_scores = cross_val_score(estimator=voting_regressor, X=X_train, y=y_train, \n                             scoring= 'neg_mean_squared_error',cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse_scores)","716cd79d":"# Model Building\n## Comparing Models"}}