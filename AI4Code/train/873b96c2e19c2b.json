{"cell_type":{"568d43c9":"code","8c3fe9fb":"code","1aa874f5":"code","a76d4d81":"code","c9126525":"code","d8e631ea":"code","e664b862":"code","9285d432":"code","18c076e3":"markdown","4b52d4a3":"markdown","d3befbe4":"markdown"},"source":{"568d43c9":"%matplotlib inline\n\nimport numpy as np\nimport pandas as pd \nfrom skimage import io, color\nimport matplotlib.pyplot as plt\nimport cv2\nimport numpy as np\n\nimport os\nPATH = \"..\/input\/data\/data\/\"","8c3fe9fb":"def display(img):\n    plt.figure()\n    plt.set_cmap('gray')\n    plt.imshow(img)\n    plt.show()\n\n\ndef combineLAB(l, a, b):\n    shape = (l.shape[0], l.shape[1], 3)\n    zeros = np.zeros(shape)\n    zeros[:, :, 0] = l\n    zeros[:, :, 1] = a\n    zeros[:, :, 2] = b\n    return zeros\n\n\ndef combineAB(a, b):\n    shape = (a.shape[0], b.shape[1], 2)\n    zeros = np.zeros(shape)\n    zeros[:, :, 0] = a\n    zeros[:, :, 1] = b\n    return zeros\n\n\ndef combineL_AB(l, ab):\n    shape = (l.shape[0], l.shape[1], 3)\n    zeros = np.zeros(shape)\n    zeros[:, :, 0] = l\n    zeros[:, :, 1] = ab[:, :, 0]\n    zeros[:, :, 2] = ab[:, :, 1]\n    return zeros\n\n\ndef make3channels(gray):\n    shape = (gray.shape[0], gray.shape[1], 3)\n    zeros = np.zeros(shape)\n    zeros[:, :, 0] = gray\n    zeros[:, :, 1] = gray\n    zeros[:, :, 2] = gray\n    return zeros\n\n\ndef get_l_from_gray(img_path):\n    img = io.imread(img_path)\n    gray = color.rgb2gray(img)\n    gray = make3channels(gray)\n    lgray = color.rgb2lab(gray, illuminant='D50')[:, :, 0]\n    return lgray\n\n\ndef get_ab_from_file(file):\n    img = io.imread(file)\n    ab = np.zeros((64, 64, 2))\n    ab[:, :, 0] = img[:, :, 1]\n    ab[:, :, 1] = img[:, :, 2]\n    return ab\n\n\ndef lab_normal_image(path):\n    l, ab = load_img_for_training(path)\n    l, ab = (l-127.5)\/127.5, (ab-127.5)\/127.5\n    return l, ab\n\n\ndef rgb_image(l, ab):\n    l, ab = l*127.5 + 127.5, (ab*127.5)+127.5\n    lab = combineL_AB(l, ab)\n    rgb = color.lab2rgb(lab, illuminant='D50')\n    return rgb\n\n\ndef load_img_for_training(img_path):\n    img = io.imread(img_path)\n    lab = color.rgb2lab(img, illuminant='D50')\n    l, a, b = lab[:, :, 0], lab[:, :, 1], lab[:, :, 2]\n    ab = combineAB(a, b)\n    lgray = get_l_from_gray(img_path)\n    return lgray, ab\n\n\ndef save_ab_file(image, filepath):\n    # add in 0zeros to its first component\n    shape = (image.shape[0], image.shape[1], 3)\n    new_ab_image = np.zeros(shape)\n    new_ab_image[:, :, 1] = image[:, :, 0]\n    new_ab_image[:, :, 2] = image[:, :, 1]\n    save_file(new_ab_image, filepath)\n\n\ndef save_file(image, filepath):\n    io.imsave(filepath, image)\n\n\ndef load_ab_image(path):\n    img = io.imread(path)\n    shape = (img.shape[0], img.shape[1], 2)\n    ab = np.zeros(shape)\n    ab[:, :, 0] = img[:, :, 1]\n    ab[:, :, 1] = img[:, :, 2]\n    return ab\n","1aa874f5":"def get_data(path):\n    start = 1\n    end = 18000\n\n    x_data = np.zeros((18000, 64, 64))\n    y_data = np.zeros((18000, 64, 64, 2))\n\n    for i in range(start, end+1):\n        filename = path + str(i) + \".png\"\n        l, ab = lab_normal_image(filename)\n        x_data[i-1] = l\n        y_data[i-1] = ab\n\n    return x_data, y_data\n\nx_data,y_data = get_data(PATH)\nprint(\"X SHAPE:\",x_data.shape)\nprint(\"Y SHAPE:\",y_data.shape)\n","a76d4d81":"l_sample,ab_sample = x_data[3],y_data[3]\nrgb_sample = rgb_image(l_sample,ab_sample)\ndisplay(rgb_sample)\ndisplay(l_sample)","c9126525":"from keras import *\nfrom keras.layers import *\nfrom keras.activations import *\nfrom keras.optimizers import *\nfrom matplotlib import pyplot as plt\nfrom utils import *\nfrom keras.initializers import RandomNormal, Zeros","d8e631ea":"def residual_block(feature, dropout=False):\n    x = Conv2D(256, kernel_size=3, strides=1, padding='same', kernel_initializer=RandomNormal(\n        mean=0.0, stddev=0.02), bias_initializer=Zeros())(feature)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    if dropout:\n        x = Dropout(0.5)(x)\n    x = Conv2D(256, kernel_size=3, strides=1, padding='same', kernel_initializer=RandomNormal(\n        mean=0.0, stddev=0.02), bias_initializer=Zeros())(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    return Add()([feature, x])\n\n\ndef conv_block(feature, out_channel, downsample=True, dropout=False):\n    if downsample:\n        x = Conv2D(out_channel, kernel_size=4, strides=2, padding='same', kernel_initializer=RandomNormal(\n            mean=0.0, stddev=0.02), bias_initializer=Zeros())(feature)\n    else:\n        x = Conv2DTranspose(out_channel, kernel_size=4, strides=2, padding='same', kernel_initializer=RandomNormal(\n            mean=0.0, stddev=0.02), bias_initializer=Zeros())(feature)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    if dropout:\n        x = Dropout(0.5)(x)\n    return x\n\n\ndef build_model(n_block=5):\n    image_size = 64\n    input_channel = 1\n    output_channel = 2\n    input = Input(shape=(image_size, image_size, input_channel))\n    x = Conv2D(64, kernel_size=7, padding='same', kernel_initializer=RandomNormal(\n        mean=0.0, stddev=0.02), bias_initializer=Zeros())(input)  # use reflection padding instead\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    # downsample\n    x = Conv2D(128, kernel_size=3, strides=2, padding='same', kernel_initializer=RandomNormal(\n        mean=0.0, stddev=0.02), bias_initializer=Zeros())(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    # downsample\n    x = Conv2D(256, kernel_size=3, strides=2, padding='same', kernel_initializer=RandomNormal(\n        mean=0.0, stddev=0.02), bias_initializer=Zeros())(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    for i in range(n_block):\n        x = residual_block(x)\n    # upsample\n    x = Conv2DTranspose(128, kernel_size=3, strides=2, padding='same',\n                        kernel_initializer=RandomNormal(mean=0.0, stddev=0.02), bias_initializer=Zeros())(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    # upsample\n    x = Conv2DTranspose(64, kernel_size=3, strides=2, padding='same', kernel_initializer=RandomNormal(\n        mean=0.0, stddev=0.02), bias_initializer=Zeros())(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    # out\n    x = Conv2D(output_channel, kernel_size=7, padding='same', kernel_initializer=RandomNormal(\n        mean=0.0, stddev=0.02), bias_initializer=Zeros())(x)  # use reflection padding instead\n    x = BatchNormalization()(x)\n    x = Activation('tanh')(x)\n    model = Model(inputs=input, outputs=x)\n    model.summary()\n    return model\n\ndef save_images(generator, samples):\n    ab_values = generator.predict(samples)\n    plt.figure()\n    plt.set_cmap('gray')\n    for i in range(ab_values.shape[0]):\n        l_val = samples[i][:,:,0]\n        ab_val = ab_values[i]\n        rgb = rgb_image(l_val, ab_val)\n        if i == 0:\n            display(rgb)\n        ax = plt.subplot(4, 4, i+1)\n        im = ax.imshow(rgb)\n        plt.tight_layout()\n        plt.title(i)\n    plt.show()\n    plt.savefig('gan_generated_image.png')\n\n\n    \ndef train_network(x_data,y_data,epochs=100, batch_size=128, save_interval=5):\n    input_shape = (64, 64, 1)\n    output_shape = (64, 64, 2)\n    model = build_model()\n    model.compile(optimizer='adam', loss='mse', metrics=['mse', 'mae'])\n    model.fit(x_data,y_data,validation_split=0.1,epochs=epochs,batch_size=128,)\n    model.save('model.h5')\n    print(\"MODEL SAVED\")\n    return model\n    \n","e664b862":"x_data = x_data.reshape((18000,64,64,1))\nmodel=train_network(x_data,y_data,epochs=700)","9285d432":"samples = x_data[50:60]\nsave_images(model,samples)","18c076e3":"**UTILS**","4b52d4a3":"**GAN Architecture**","d3befbe4":"**Data Loading**"}}