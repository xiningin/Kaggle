{"cell_type":{"d670704e":"code","8952852e":"code","d66f9512":"code","738c2c1a":"code","378802ac":"code","8e39baf6":"code","05f9ef68":"code","1e268248":"code","10d40943":"code","f672eadb":"code","ffed2030":"code","b47fa527":"markdown"},"source":{"d670704e":"import numpy as np \nimport pandas as pd \nimport os\n\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8952852e":"# !pip install tensorflow==2.0.0-alpha0","d66f9512":"print(\"TensorFlow version: {}\".format(tf.__version__))\nprint(\"Eager execution: {}\".format(tf.executing_eagerly()))","738c2c1a":"## Downloading Dataset\n\ntrain_dataset_url = \"https:\/\/storage.googleapis.com\/download.tensorflow.org\/data\/iris_training.csv\"\n\ntrain_dataset_fp = tf.keras.utils.get_file(fname=os.path.basename(train_dataset_url),\n                                           origin=train_dataset_url)\n\nprint(\"Local copy of the dataset file: {}\".format(train_dataset_fp))","378802ac":"data = pd.read_csv(train_dataset_fp, names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species'], skiprows=1)\ndata.head()","8e39baf6":"## Correlation Matrix\ncorrMatt = data[data.columns].corr()\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\n\nfig, ax = plt.subplots()\nfig.set_size_inches(20, 10)\nsns.heatmap(corrMatt, mask=mask, vmax=.8, square=True, annot=True);","05f9ef68":"from sklearn.model_selection import train_test_split\n\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, stratify=data[\"species\"], random_state=100)","1e268248":"## Define Model\nclass IrisClasifier(tf.keras.Model):\n    def __init__(self):\n        super(IrisClasifier, self).__init__()\n        self.layer1 = tf.keras.layers.Dense(10, activation='relu')\n        self.layer2 = tf.keras.layers.Dense(10, activation='relu')\n        self.outputLayer = tf.keras.layers.Dense(3, activation='softmax')\n        \n    def call(self, x):\n        x = self.layer1(x)\n        x = self.layer2(x)\n        return self.outputLayer(x)","10d40943":"model = IrisClasifier()\nmodel.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=300, batch_size=10, verbose=1);","f672eadb":"# Evaluation\nscores = model.evaluate(X_test, y_test)\nprint(\"\\nAccuracy: %.2f%%\" % (scores[1]*100))","ffed2030":"## Get predictions\npredictions = model.predict(X_test)\nprediction1 = pd.DataFrame({\"IRIS1\":predictions[:,0], \"IRIS2\":predictions[:,1], \"IRIS3\":predictions[:,2],})\nprediction1.round(decimals=4).head()","b47fa527":"## 1. Iris Classification"}}