{"cell_type":{"6c3514ff":"code","e17d62ed":"code","8e79be0d":"code","958b98db":"code","d239879d":"code","90725cfd":"code","5effcfc9":"code","48e994e0":"code","6bc1d4d0":"code","8a3a7ec7":"code","7b308e60":"code","b34de178":"code","8195b799":"code","9dad1247":"code","60fe1226":"code","7dcd8260":"code","63d3162c":"code","fe35f3e5":"code","9d87fd0a":"code","60906dbf":"code","0c78049f":"code","0b8a59fb":"code","597685ce":"code","812cba67":"code","5a34cda6":"code","f208996b":"code","85d4716a":"code","b16d8ddc":"code","da0b9444":"code","768e8c9f":"code","959a3964":"code","1aeef03a":"code","8fcf33c7":"code","1e763ce3":"code","a4558bf6":"code","bb3a4968":"code","f664a626":"code","30aa8830":"code","749533cc":"code","bc278ac6":"code","14105f18":"code","a132209f":"code","bf02b81d":"code","7f01f604":"code","78014810":"code","1d452770":"code","7836e6c4":"code","e8173151":"code","e4c4923c":"markdown","2ae0f497":"markdown","930a1e9b":"markdown","37878d3d":"markdown","a03a7fe4":"markdown","e88306fc":"markdown","1d69e906":"markdown","0bc86cf7":"markdown","40d3e7b5":"markdown","0c90d2e1":"markdown","b89daa18":"markdown","6ad17df1":"markdown","c0e70dc7":"markdown","68818c14":"markdown","eb9897c1":"markdown","1a35679f":"markdown","0e6aeec3":"markdown","e3f90eb2":"markdown","a649ab94":"markdown","363e5cfa":"markdown","4761c62b":"markdown","88296eb3":"markdown"},"source":{"6c3514ff":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom datetime import datetime as dt\nimport itertools\n\n%matplotlib inline","e17d62ed":"# Read data from the CSV into a dataframe\nfolder='..\/input\/english-premier-league\/Datasets\/'\nraw_data_1 = pd.read_csv(folder +'2000-01.csv')\nraw_data_2 = pd.read_csv(folder +'2001-02.csv')\nraw_data_3 = pd.read_csv(folder +'2002-03.csv')\nraw_data_4 = pd.read_csv(folder +'2003-04.csv')\nraw_data_5 = pd.read_csv(folder +'2004-05.csv')\nraw_data_6 = pd.read_csv(folder +'2005-06.csv')\nraw_data_7 = pd.read_csv(folder +'2006-07.csv')\nraw_data_8 = pd.read_csv(folder +'2007-08.csv')\nraw_data_9 = pd.read_csv(folder +'2008-09.csv')\nraw_data_10 = pd.read_csv(folder +'2009-10.csv')\nraw_data_11 = pd.read_csv(folder +'2010-11.csv')\nraw_data_12 = pd.read_csv(folder +'2011-12.csv')\nraw_data_13 = pd.read_csv(folder +'2012-13.csv')\nraw_data_14 = pd.read_csv(folder +'2013-14.csv')\nraw_data_15 = pd.read_csv(folder +'2014-15.csv')\nraw_data_16 = pd.read_csv(folder +'2015-16.csv')\nraw_data_17 = pd.read_csv(folder +'2016-17.csv')\nraw_data_18 = pd.read_csv(folder +'2017-18.csv')\n","8e79be0d":"\n#Gets all the statistics related to gameplay\n                      \ncolumns_req = ['Date','HomeTeam','AwayTeam','FTHG','FTAG','FTR']\n\nplaying_statistics_1 = raw_data_1[columns_req]                      \nplaying_statistics_2 = raw_data_2[columns_req]\nplaying_statistics_3 = raw_data_3[columns_req]\nplaying_statistics_4 = raw_data_4[columns_req]\nplaying_statistics_5 = raw_data_5[columns_req]\nplaying_statistics_6 = raw_data_6[columns_req]\nplaying_statistics_7 = raw_data_7[columns_req]\nplaying_statistics_8 = raw_data_8[columns_req]\nplaying_statistics_9 = raw_data_9[columns_req]\nplaying_statistics_10 = raw_data_10[columns_req]\nplaying_statistics_11 = raw_data_11[columns_req]   \nplaying_statistics_12 = raw_data_12[columns_req]\nplaying_statistics_13 = raw_data_13[columns_req]\nplaying_statistics_14 = raw_data_14[columns_req]\nplaying_statistics_15 = raw_data_15[columns_req]\nplaying_statistics_16 = raw_data_16[columns_req]\nplaying_statistics_17 = raw_data_17[columns_req]\nplaying_statistics_18 = raw_data_18[columns_req]\n","958b98db":"# Gets the goals scored agg arranged by teams and matchweek\ndef get_goals_scored(playing_stat):\n    # Create a dictionary with team names as keys\n    teams = {}\n    for i in playing_stat.groupby('HomeTeam').mean().T.columns:\n        teams[i] = []\n    \n    # the value corresponding to keys is a list containing the match location.\n    for i in range(len(playing_stat)):\n        HTGS = playing_stat.iloc[i]['FTHG']\n        ATGS = playing_stat.iloc[i]['FTAG']\n        teams[playing_stat.iloc[i].HomeTeam].append(HTGS)\n        teams[playing_stat.iloc[i].AwayTeam].append(ATGS)\n    \n    # Create a dataframe for goals scored where rows are teams and cols are matchweek.\n    GoalsScored = pd.DataFrame(data=teams, index = [i for i in range(1,39)]).T\n    GoalsScored[0] = 0\n    # Aggregate to get uptil that point\n    for i in range(2,39):\n        GoalsScored[i] = GoalsScored[i] + GoalsScored[i-1]\n    return GoalsScored\n\n\n\n# Gets the goals conceded agg arranged by teams and matchweek\ndef get_goals_conceded(playing_stat):\n    # Create a dictionary with team names as keys\n    teams = {}\n    for i in playing_stat.groupby('HomeTeam').mean().T.columns:\n        teams[i] = []\n    \n    # the value corresponding to keys is a list containing the match location.\n    for i in range(len(playing_stat)):\n        ATGC = playing_stat.iloc[i]['FTHG']\n        HTGC = playing_stat.iloc[i]['FTAG']\n        teams[playing_stat.iloc[i].HomeTeam].append(HTGC)\n        teams[playing_stat.iloc[i].AwayTeam].append(ATGC)\n    \n    # Create a dataframe for goals scored where rows are teams and cols are matchweek.\n    GoalsConceded = pd.DataFrame(data=teams, index = [i for i in range(1,39)]).T\n    GoalsConceded[0] = 0\n    # Aggregate to get uptil that point\n    for i in range(2,39):\n        GoalsConceded[i] = GoalsConceded[i] + GoalsConceded[i-1]\n    return GoalsConceded\n\ndef get_gss(playing_stat):\n    GC = get_goals_conceded(playing_stat)\n    GS = get_goals_scored(playing_stat)\n   \n    j = 0\n    HTGS = []\n    ATGS = []\n    HTGC = []\n    ATGC = []\n\n    for i in range(380):\n        ht = playing_stat.iloc[i].HomeTeam\n        at = playing_stat.iloc[i].AwayTeam\n        HTGS.append(GS.loc[ht][j])\n        ATGS.append(GS.loc[at][j])\n        HTGC.append(GC.loc[ht][j])\n        ATGC.append(GC.loc[at][j])\n        \n        if ((i + 1)% 10) == 0:\n            j = j + 1\n        \n    playing_stat['HTGS'] = HTGS\n    playing_stat['ATGS'] = ATGS\n    playing_stat['HTGC'] = HTGC\n    playing_stat['ATGC'] = ATGC\n    \n    return playing_stat\n\n\n# Apply to each dataset\nplaying_statistics_1 = get_gss(playing_statistics_1)\nplaying_statistics_2 = get_gss(playing_statistics_2)\nplaying_statistics_3 = get_gss(playing_statistics_3)\nplaying_statistics_4 = get_gss(playing_statistics_4)\nplaying_statistics_5 = get_gss(playing_statistics_5)\nplaying_statistics_6 = get_gss(playing_statistics_6)\nplaying_statistics_7 = get_gss(playing_statistics_7)\nplaying_statistics_8 = get_gss(playing_statistics_8)\nplaying_statistics_9 = get_gss(playing_statistics_9)\nplaying_statistics_10 = get_gss(playing_statistics_10)\nplaying_statistics_11 = get_gss(playing_statistics_11)\nplaying_statistics_12 = get_gss(playing_statistics_12)\nplaying_statistics_13 = get_gss(playing_statistics_13)\nplaying_statistics_14 = get_gss(playing_statistics_14)\nplaying_statistics_15 = get_gss(playing_statistics_15)\nplaying_statistics_16 = get_gss(playing_statistics_16)\nplaying_statistics_17 = get_gss(playing_statistics_17)\nplaying_statistics_18 = get_gss(playing_statistics_18)\n","d239879d":"def get_points(result):\n    if result == 'W':\n        return 3\n    elif result == 'D':\n        return 1\n    else:\n        return 0\n    \n\ndef get_cuml_points(matchres):\n    matchres_points = matchres.applymap(get_points)\n    for i in range(2,39):\n        matchres_points[i] = matchres_points[i] + matchres_points[i-1]\n        \n    matchres_points.insert(column =0, loc = 0, value = [0*i for i in range(20)])\n    return matchres_points\n\n\ndef get_matchres(playing_stat):\n    # Create a dictionary with team names as keys\n    teams = {}\n    for i in playing_stat.groupby('HomeTeam').mean().T.columns:\n        teams[i] = []\n\n    # the value corresponding to keys is a list containing the match result\n    for i in range(len(playing_stat)):\n        if playing_stat.iloc[i].FTR == 'H':\n            teams[playing_stat.iloc[i].HomeTeam].append('W')\n            teams[playing_stat.iloc[i].AwayTeam].append('L')\n        elif playing_stat.iloc[i].FTR == 'A':\n            teams[playing_stat.iloc[i].AwayTeam].append('W')\n            teams[playing_stat.iloc[i].HomeTeam].append('L')\n        else:\n            teams[playing_stat.iloc[i].AwayTeam].append('D')\n            teams[playing_stat.iloc[i].HomeTeam].append('D')\n            \n    return pd.DataFrame(data=teams, index = [i for i in range(1,39)]).T\n\ndef get_agg_points(playing_stat):\n    matchres = get_matchres(playing_stat)\n    cum_pts = get_cuml_points(matchres)\n    HTP = []\n    ATP = []\n    j = 0\n    for i in range(380):\n        ht = playing_stat.iloc[i].HomeTeam\n        at = playing_stat.iloc[i].AwayTeam\n        HTP.append(cum_pts.loc[ht][j])\n        ATP.append(cum_pts.loc[at][j])\n\n        if ((i + 1)% 10) == 0:\n            j = j + 1\n            \n    playing_stat['HTP'] = HTP\n    playing_stat['ATP'] = ATP\n    return playing_stat\n    \n# Apply to each dataset\nplaying_statistics_1 = get_agg_points(playing_statistics_1)\nplaying_statistics_2 = get_agg_points(playing_statistics_2)\nplaying_statistics_3 = get_agg_points(playing_statistics_3)\nplaying_statistics_4 = get_agg_points(playing_statistics_4)\nplaying_statistics_5 = get_agg_points(playing_statistics_5)\nplaying_statistics_6 = get_agg_points(playing_statistics_6)\nplaying_statistics_7 = get_agg_points(playing_statistics_7)\nplaying_statistics_8 = get_agg_points(playing_statistics_8)\nplaying_statistics_9 = get_agg_points(playing_statistics_9)\nplaying_statistics_10 = get_agg_points(playing_statistics_10)\nplaying_statistics_11 = get_agg_points(playing_statistics_11)\nplaying_statistics_12 = get_agg_points(playing_statistics_12)\nplaying_statistics_13 = get_agg_points(playing_statistics_13)\nplaying_statistics_14 = get_agg_points(playing_statistics_14)\nplaying_statistics_15 = get_agg_points(playing_statistics_15)\nplaying_statistics_16 = get_agg_points(playing_statistics_16)\nplaying_statistics_17 = get_agg_points(playing_statistics_17)\nplaying_statistics_18 = get_agg_points(playing_statistics_18)","90725cfd":"def get_form(playing_stat,num):\n    form = get_matchres(playing_stat)\n    form_final = form.copy()\n    for i in range(num,39):\n        form_final[i] = ''\n        j = 0\n        while j < num:\n            form_final[i] += form[i-j]\n            j += 1           \n    return form_final\n\ndef add_form(playing_stat,num):\n    form = get_form(playing_stat,num)\n    h = ['M' for i in range(num * 10)]  # since form is not available for n MW (n*10)\n    a = ['M' for i in range(num * 10)]\n    \n    j = num\n    for i in range((num*10),380):\n        ht = playing_stat.iloc[i].HomeTeam\n        at = playing_stat.iloc[i].AwayTeam\n        \n        past = form.loc[ht][j]               # get past n results\n        h.append(past[num-1])                    # 0 index is most recent\n        \n        past = form.loc[at][j]               # get past n results.\n        a.append(past[num-1])                   # 0 index is most recent\n        \n        if ((i + 1)% 10) == 0:\n            j = j + 1\n\n    playing_stat['HM' + str(num)] = h                 \n    playing_stat['AM' + str(num)] = a\n\n    \n    return playing_stat\n\n\ndef add_form_df(playing_statistics):\n    playing_statistics = add_form(playing_statistics,1)\n    playing_statistics = add_form(playing_statistics,2)\n    playing_statistics = add_form(playing_statistics,3)\n    playing_statistics = add_form(playing_statistics,4)\n    playing_statistics = add_form(playing_statistics,5)\n    return playing_statistics    \n    \n# Make changes to df\nplaying_statistics_1 = add_form_df(playing_statistics_1)\nplaying_statistics_2 = add_form_df(playing_statistics_2)\nplaying_statistics_3 = add_form_df(playing_statistics_3)\nplaying_statistics_4 = add_form_df(playing_statistics_4)\nplaying_statistics_5 = add_form_df(playing_statistics_5)\nplaying_statistics_6 = add_form_df(playing_statistics_6)\nplaying_statistics_7 = add_form_df(playing_statistics_7)\nplaying_statistics_8 = add_form_df(playing_statistics_8)\nplaying_statistics_9 = add_form_df(playing_statistics_9)\nplaying_statistics_10 = add_form_df(playing_statistics_10)\nplaying_statistics_11 = add_form_df(playing_statistics_11)\nplaying_statistics_12 = add_form_df(playing_statistics_12)\nplaying_statistics_13 = add_form_df(playing_statistics_13)\nplaying_statistics_14 = add_form_df(playing_statistics_14)\nplaying_statistics_15 = add_form_df(playing_statistics_15)\nplaying_statistics_16 = add_form_df(playing_statistics_16)\nplaying_statistics_17 = add_form_df(playing_statistics_17)\nplaying_statistics_18 = add_form_df(playing_statistics_18)","5effcfc9":"# Rearranging columns\ncols = ['Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTGS', 'ATGS', 'HTGC', 'ATGC', 'HTP', 'ATP', 'HM1', 'HM2', 'HM3',\n        'HM4', 'HM5', 'AM1', 'AM2', 'AM3', 'AM4', 'AM5' ]\n\nplaying_statistics_1 = playing_statistics_1[cols]\nplaying_statistics_2 = playing_statistics_2[cols]\nplaying_statistics_3 = playing_statistics_3[cols]\nplaying_statistics_4 = playing_statistics_4[cols]\nplaying_statistics_5 = playing_statistics_5[cols]\nplaying_statistics_6 = playing_statistics_6[cols]\nplaying_statistics_7 = playing_statistics_7[cols]\nplaying_statistics_8 = playing_statistics_8[cols]\nplaying_statistics_9 = playing_statistics_9[cols]\nplaying_statistics_10 = playing_statistics_10[cols]\nplaying_statistics_11 = playing_statistics_11[cols]\nplaying_statistics_12 = playing_statistics_12[cols]\nplaying_statistics_13 = playing_statistics_13[cols]\nplaying_statistics_14 = playing_statistics_14[cols]\nplaying_statistics_15 = playing_statistics_15[cols]\nplaying_statistics_16 = playing_statistics_16[cols]\nplaying_statistics_17 = playing_statistics_17[cols]\nplaying_statistics_18 = playing_statistics_18[cols]","48e994e0":"def get_mw(playing_stat):\n    j = 1\n    MatchWeek = []\n    for i in range(380):\n        MatchWeek.append(j)\n        if ((i + 1)% 10) == 0:\n            j = j + 1\n    playing_stat['MW'] = MatchWeek\n    return playing_stat\n\nplaying_statistics_1 = get_mw(playing_statistics_1)\nplaying_statistics_2 = get_mw(playing_statistics_2)\nplaying_statistics_3 = get_mw(playing_statistics_3)\nplaying_statistics_4 = get_mw(playing_statistics_4)\nplaying_statistics_5 = get_mw(playing_statistics_5)\nplaying_statistics_6 = get_mw(playing_statistics_6)\nplaying_statistics_7 = get_mw(playing_statistics_7)\nplaying_statistics_8 = get_mw(playing_statistics_8)\nplaying_statistics_9 = get_mw(playing_statistics_9)\nplaying_statistics_10 = get_mw(playing_statistics_10)\nplaying_statistics_11 = get_mw(playing_statistics_11)\nplaying_statistics_12 = get_mw(playing_statistics_12)\nplaying_statistics_13 = get_mw(playing_statistics_13)\nplaying_statistics_14 = get_mw(playing_statistics_14)\nplaying_statistics_15 = get_mw(playing_statistics_15)\nplaying_statistics_16 = get_mw(playing_statistics_16)\nplaying_statistics_17 = get_mw(playing_statistics_17)\nplaying_statistics_18 = get_mw(playing_statistics_18)","6bc1d4d0":"playing_stat = pd.concat([playing_statistics_1,\n                          playing_statistics_2,\n                          playing_statistics_3,\n                          playing_statistics_4,\n                          playing_statistics_5,\n                          playing_statistics_6,\n                          playing_statistics_7,\n                          playing_statistics_8,\n                          playing_statistics_9,\n                          playing_statistics_10,\n                          playing_statistics_11,\n                          playing_statistics_12,\n                          playing_statistics_13,\n                          playing_statistics_14,\n                          playing_statistics_15,\n                          playing_statistics_16,\n                          playing_statistics_17,\n                          playing_statistics_18\n                          ], ignore_index=True)\n\n\n# Gets the form points.\ndef get_form_points(string):\n    sum = 0\n    for letter in string:\n        sum += get_points(letter)\n    return sum\n\nplaying_stat['HTFormPtsStr'] = playing_stat['HM1'] + playing_stat['HM2'] + playing_stat['HM3'] + playing_stat['HM4'] + playing_stat['HM5']\nplaying_stat['ATFormPtsStr'] = playing_stat['AM1'] + playing_stat['AM2'] + playing_stat['AM3'] + playing_stat['AM4'] + playing_stat['AM5']\n\nplaying_stat['HTFormPts'] = playing_stat['HTFormPtsStr'].apply(get_form_points)\nplaying_stat['ATFormPts'] = playing_stat['ATFormPtsStr'].apply(get_form_points)\n\n# Identify Win\/Loss Streaks if any.\ndef get_3game_ws(string):\n    if string[-3:] == 'WWW':\n        return 1\n    else:\n        return 0\n    \ndef get_5game_ws(string):\n    if string == 'WWWWW':\n        return 1\n    else:\n        return 0\n    \ndef get_3game_ls(string):\n    if string[-3:] == 'LLL':\n        return 1\n    else:\n        return 0\n    \ndef get_5game_ls(string):\n    if string == 'LLLLL':\n        return 1\n    else:\n        return 0\n    \nplaying_stat['HTWinStreak3'] = playing_stat['HTFormPtsStr'].apply(get_3game_ws)\nplaying_stat['HTWinStreak5'] = playing_stat['HTFormPtsStr'].apply(get_5game_ws)\nplaying_stat['HTLossStreak3'] = playing_stat['HTFormPtsStr'].apply(get_3game_ls)\nplaying_stat['HTLossStreak5'] = playing_stat['HTFormPtsStr'].apply(get_5game_ls)\n\nplaying_stat['ATWinStreak3'] = playing_stat['ATFormPtsStr'].apply(get_3game_ws)\nplaying_stat['ATWinStreak5'] = playing_stat['ATFormPtsStr'].apply(get_5game_ws)\nplaying_stat['ATLossStreak3'] = playing_stat['ATFormPtsStr'].apply(get_3game_ls)\nplaying_stat['ATLossStreak5'] = playing_stat['ATFormPtsStr'].apply(get_5game_ls)\n\nplaying_stat.keys()","8a3a7ec7":"# Get Goal Difference\nplaying_stat['HTGD'] = playing_stat['HTGS'] - playing_stat['HTGC']\nplaying_stat['ATGD'] = playing_stat['ATGS'] - playing_stat['ATGC']\n\n# Diff in points\nplaying_stat['DiffPts'] = playing_stat['HTP'] - playing_stat['ATP']\nplaying_stat['DiffFormPts'] = playing_stat['HTFormPts'] - playing_stat['ATFormPts']","7b308e60":"# Scale DiffPts , DiffFormPts, HTGD, ATGD by Matchweek.\ncols = ['HTGD','ATGD','DiffPts','DiffFormPts','HTP','ATP']\nplaying_stat.MW = playing_stat.MW.astype(float)\n\nfor col in cols:\n    playing_stat[col] = playing_stat[col] \/ playing_stat.MW","b34de178":"def only_hw(string):\n    if string == 'H':\n        return 'H'\n    else:\n        return 'NH'\n    \nplaying_stat['FTR'] = playing_stat.FTR.apply(only_hw)\n\n# Testing set (2015-16 season)\nplaying_stat_test = playing_stat[5700:]","8195b799":"#saving the final dataset\nplaying_stat.to_csv('final_dataset.csv')","9dad1247":"#saving the test set\nplaying_stat_test.to_csv(\"test_set.csv\")","60fe1226":"#loading the final dataset\ndataset = pd.read_csv('final_dataset.csv')","7dcd8260":"dataset.head()","63d3162c":"dataset.keys()","fe35f3e5":"plt.figure(figsize=(20,10)) \nsns.heatmap(dataset.corr(), annot= True)","9d87fd0a":"# Remove few column\ndataset2 = dataset.copy().drop(columns =['Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG',\n       'HTGS', 'ATGS', 'HTGC', 'ATGC',\n       'HM4', 'HM5','AM4', 'AM5', 'MW', 'HTFormPtsStr',\n       'ATFormPtsStr', 'HTFormPts', 'ATFormPts', 'HTWinStreak3',\n       'HTWinStreak5', 'HTLossStreak3', 'HTLossStreak5', 'ATWinStreak3',\n       'ATWinStreak5', 'ATLossStreak3', 'ATLossStreak5',\n       'DiffPts'] )","60906dbf":"dataset2.keys()","0c78049f":"dataset2.head(10)","0b8a59fb":"#what is the win rate for the home team?\n\n# Total number of matches.\nn_matches = dataset2.shape[0]\n\n# Calculate number of features. -1 because we are saving one as the target variable (win\/lose\/draw)\nn_features = dataset2.shape[1] - 1\n\n# Calculate matches won by home team.\nn_homewins = len(dataset2[dataset2.FTR == 'H'])\n\n# Calculate win rate for home team.\nwin_rate = (float(n_homewins) \/ (n_matches)) * 100\n\n# Print the results\nprint(\"Total number of matches: {}\".format(n_matches))\nprint (\"Number of features: {}\".format(n_features))\nprint( \"Number of matches won by home team: {}\".format(n_homewins))\nprint (\"Win rate of home team: {:.2f}%\".format(win_rate))","597685ce":"# Visualising distribution of data\nfrom pandas.plotting import scatter_matrix\n\n#the scatter matrix is plotting each of the columns specified against each other column.\n#You would have observed that the diagonal graph is defined as a histogram, which means that in the \n#section of the plot matrix where the variable is against itself, a histogram is plotted.\n\n#Scatter plots show how much one variable is affected by another. \n#The relationship between two variables is called their correlation\n#negative vs positive correlation\n\n#HTGD - Home team goal difference\n#ATGD - away team goal difference\n#HTP - Home team points\n#ATP - Away team points\n#DiffFormPts Diff in points\n#DiffLP - Differnece in last years prediction\n\nscatter_matrix(dataset2[['HTGD','ATGD','HTP','ATP','DiffFormPts']], figsize=(15,15))","812cba67":"# Separate into feature set and target variable\n#FTR = Full Time Result (H=Home Win, D=Draw, A=Away Win)\nX_all = dataset2.drop(['FTR'],1)\ny_all = dataset2['FTR']\n\n# Standardising the data.\nfrom sklearn.preprocessing import scale\n\n#Center to the mean and component wise scale to unit variance.\ncols = [['HTGD','ATGD','HTP','ATP']]\nfor col in cols:\n    X_all[col] = scale(X_all[col])\n    ","5a34cda6":"#last 3 wins for both sides\nX_all.HM1 = X_all.HM1.astype('str')\nX_all.HM2 = X_all.HM2.astype('str')\nX_all.HM3 = X_all.HM3.astype('str')\nX_all.AM1 = X_all.AM1.astype('str')\nX_all.AM2 = X_all.AM2.astype('str')\nX_all.AM3 = X_all.AM3.astype('str')\n\n#we want continous vars that are integers for our input data, so lets remove any categorical vars\ndef preprocess_features(X):\n    ''' Preprocesses the football data and converts catagorical variables into dummy variables. '''\n    \n    # Initialize new output DataFrame\n    output = pd.DataFrame(index = X.index)\n\n    # Investigate each feature column for the data\n    for col, col_data in X.iteritems():\n\n        # If data type is categorical, convert to dummy variables\n        if col_data.dtype == object:\n            col_data = pd.get_dummies(col_data, prefix = col)\n                    \n        # Collect the revised columns\n        output = output.join(col_data)\n    \n    return output\n\nX_all = preprocess_features(X_all)\nprint (\"Processed feature columns ({} total features):\\n{}\".format(len(X_all.columns), list(X_all.columns)))","f208996b":"X_all.head(10)","85d4716a":"from sklearn.model_selection import train_test_split\n\n# Shuffle and split the dataset into training and testing set.\nX_train, X_test, y_train, y_test = train_test_split(X_all, y_all, \n                                                    test_size = 0.3,\n                                                    random_state = 2,\n                                                    stratify = y_all)","b16d8ddc":"# Fitting Logistic Regression to the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","da0b9444":"Y_pred = classifier.predict(X_test)","768e8c9f":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_test, Y_pred)","959a3964":"sns.heatmap(cm, annot=True,fmt='d')","1aeef03a":"print(classification_report(y_test, Y_pred))","8fcf33c7":"#fitting the SVM to the training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf',random_state = 0)\nclassifier.fit(X_train, y_train)","1e763ce3":"#predicting result\nY_pred = classifier.predict(X_test)","a4558bf6":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, Y_pred)","bb3a4968":"sns.heatmap(cm, annot=True, fmt='d')","f664a626":"print(classification_report(y_test, Y_pred))","30aa8830":"#fitting the RANDOM FOREST to the training se\nfrom sklearn.ensemble import RandomForestClassifier\n#classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier = RandomForestClassifier(criterion='gini', \n                             n_estimators=700,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\nclassifier.fit(X_train, y_train)","749533cc":"#predicting result\nY_pred = classifier.predict(X_test)","bc278ac6":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, Y_pred)","14105f18":"sns.heatmap(cm, annot=True, fmt='d')","a132209f":"print(classification_report(y_test, Y_pred))","bf02b81d":"# Fitting XGBoost to the Training set\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier(seed=82)\nclassifier.fit(X_train, y_train)","7f01f604":"# Predicting the Test set results\nY_pred = classifier.predict(X_test)","78014810":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, Y_pred)","1d452770":"sns.heatmap(cm, annot=True,fmt='d')","7836e6c4":"print(classification_report(y_test, Y_pred))","e8173151":"# TODO: Import 'GridSearchCV' and 'make_scorer'\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer, f1_score\nimport xgboost as xgb\n\n# TODO: Create the parameters list you wish to tune\nparameters = { 'learning_rate' : [0.1],\n               'n_estimators' : [40],\n               'max_depth': [3],\n               'min_child_weight': [3],\n               'gamma':[0.4],\n               'subsample' : [0.8],\n               'colsample_bytree' : [0.8],\n               'scale_pos_weight' : [1],\n               'reg_alpha':[1e-5]\n             }  \n\ndef predict_labels(clf, features, target):\n    ''' Makes predictions using a fit classifier based on F1 score. '''\n\n    y_pred = clf.predict(features)\n    \n    return f1_score(target, y_pred, pos_label='H'), sum(target == y_pred) \/ float(len(y_pred))\n\n\n# TODO: Initialize the classifier\nclf = xgb.XGBClassifier(seed=2)\n\n# TODO: Make an f1 scoring function using 'make_scorer' \nf1_scorer = make_scorer(f1_score,pos_label='H')\n\n# TODO: Perform grid search on the classifier using the f1_scorer as the scoring method\ngrid_obj = GridSearchCV(clf,\n                        scoring=f1_scorer,\n                        param_grid=parameters,\n                        cv=5)\n\n# TODO: Fit the grid search object to the training data and find the optimal parameters\ngrid_obj = grid_obj.fit(X_train,y_train)\n\n# Get the estimator\nclf = grid_obj.best_estimator_\nprint(clf)\n\n# Report the final F1 score for training and testing after parameter tuning\nf1, acc = predict_labels(clf, X_train, y_train)\nprint( \"F1 score and accuracy score for training set: {:.4f} , {:.4f}.\".format(f1 , acc))\n    \nf1, acc = predict_labels(clf, X_test, y_test)\nprint(\"F1 score and accuracy score for test set: {:.4f} , {:.4f}.\".format(f1 , acc))","e4c4923c":"# Applying the SVM","2ae0f497":"**Discription of Dataset**","930a1e9b":"**A prediction system was built to predict whether a home team will win it's match or not.**\n\nKey to results data:\n* Div = League Division\n* Date = Match Date (dd\/mm\/yy)\n* Time = Time of match kick-off\n* HomeTeam = Home Team\n* Away team = Away Team\n* FTHG and HG = Full Time Home Team Goals\n* FTAG and AG = Full-Time Away Team Goals\n* FTR and Res = Full-Time Result (H=Home Win, D=Draw, A=Away Win)\n* HTHG = Half Time Home Team Goals\n* HTAG = Half Time Away Team Goals\n* HTR = Half Time Result (H=Home Win, D=Draw, A=Away Win)\n\nMatch Statistics (where available)\n* Attendance = Crowd Attendance\n* Referee = Match Referee\n* HS = Home Team Shots\n* AS = Away Team Shots\n* HST = Home Team Shots on Target\n* AST = Away Team Shots on Target\n* HHW = Home Team Hit Woodwork\n* AHW = Away Team Hit Woodwork\n* HC = Home Team Corners\n* AC = Away Team Corners\n* HF = Home Team Fouls Committed\n* AF = Away Team Fouls Committed\n* HFKC = Home Team Free Kicks Conceded\n* AFKC = Away Team Free Kicks Conceded\n* HO = Home Team Offsides\n* AO = Away Team Offsides\n* HY = Home Team Yellow Cards\n* AY = Away Team Yellow Cards\n*HR = Home Team Red Cards\nAR = Away Team Red Cards\nHBP = Home Team Bookings Points (10 = yellow, 25 = red)\nABP = Away Team Bookings Points (10 = yellow, 25 = red)","37878d3d":"# Tuning the parameters of XGBoost.\n","a03a7fe4":"**GET TEAM FORM:**","e88306fc":"# Applying the RandomForest","1d69e906":"#### Probably little best!!!!!!!!","0bc86cf7":"### Importing the dataset","40d3e7b5":"**Get MatchWeek:**","0c90d2e1":"## Spliting the dataset","b89daa18":"**Clearly XGBoost seems like the best model as it has the highest F1 score and accuracy score on the test set.**","6ad17df1":"I hope you find this kernel useful and enjoyable. If so please upVote\n\nYour comments and feedback are most welcome.","c0e70dc7":"### Correlation Matrix for dataset","68818c14":"**GOALS SCORED AND CONCEDED AT THE END OF MATCHWEEK, ARRANGED BY TEAMS AND MATCHWEEK**","eb9897c1":"POSITIVE CORRELATION: If an increase in feature A leads to increase in feature B, then they are positively correlated. A value 1 means perfect positive correlation.\n\nNEGATIVE CORRELATION: If an increase in feature A leads to decrease in feature B, then they are negatively correlated. A value -1 means perfect negative correlation.\n\nNow lets say that two features are highly or perfectly correlated, so the increase in one leads to increase in the other. This means that both the features are containing highly similar information and there is very little or no variance in information. This is known as MultiColinearity as both of them contains almost the same information.\n\nSo do you think we should use both of them as one of them is redundant. While making or training models, we should try to eliminate redundant features as it reduces training time and many such advantages.","1a35679f":"# Applying the Logistic Regression","0e6aeec3":"**FINAL DATAFRAME**","e3f90eb2":"# Predicting the Winning Football Team\n\n- Sports betting is a 500 billion dollar market (Sydney Herald)\n\n- Football is played by 250 million players in over 200 countries (most popular sport globally).\n- The English Premier League is the most popular domestic team in the world.\n- Design a predictive model capable of accurately predicting if the home team will win a football match? \n","a649ab94":"# Applying the XGBoost","363e5cfa":"**GET RESPECTIVE POINTS**","4761c62b":"Accuracy is not soo good but it can improved.\n\nActually it only depend upon past year match dataset,we can improve the accuracy by putting twitter data related to match, sentiment analysis, chances of player to play a specific match,player performace in recent series,etc..","88296eb3":"## Visualise the dataset"}}