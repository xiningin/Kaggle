{"cell_type":{"fe6ed33a":"code","02e28d05":"code","37c4b603":"code","72466b9a":"code","f39beed9":"code","ef1ef734":"code","33737551":"code","fd53200a":"code","006791e7":"code","1688bc62":"code","2a6acd73":"code","0d4f5328":"code","83f7f72b":"code","49652266":"code","ffd6d495":"code","c1612a92":"code","a806a38c":"code","aef2ffa9":"code","cc5fed15":"code","8119d955":"code","a425b47d":"code","ca074800":"code","98e6b3dc":"code","907e7b79":"code","d4dff713":"code","bde6ee74":"code","b3df74e7":"code","1b964e40":"code","c2c22fa9":"code","ffa38802":"code","1d23c4bc":"markdown","a8159067":"markdown","5d05f41b":"markdown","35474f79":"markdown","28f38787":"markdown","8c4e33bf":"markdown","f7a7ccbd":"markdown"},"source":{"fe6ed33a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02e28d05":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","37c4b603":"df = pd.read_csv(\"..\/input\/bike-datasets\/train.csv\", parse_dates = [\"datetime\"])\ndf.head()","72466b9a":"df.shape","f39beed9":"df.columns","ef1ef734":"df.info()","33737551":"df.describe()","fd53200a":"df.dtypes","006791e7":"df.isna().sum()","1688bc62":"df = df.drop([\"casual\", \"registered\"], axis = 1)\ndf.head()","2a6acd73":"# add time paramteters to enrich datafarame\n\ndf[\"year\"] = df.datetime.dt.year\ndf[\"month\"] = df.datetime.dt.month\ndf[\"day\"] = df.datetime.dt.day\ndf[\"hour\"] = df.datetime.dt.hour\ndf.head()","0d4f5328":"# drop datetime column\ndf = df.drop([\"datetime\"], axis = 1)\ndf.head()","83f7f72b":"# Copy dataframe\ndf_new = df.copy()\ndf_new.head()","49652266":"# visualize dataframe\ndf_new.hist(figsize = (20, 10));","ffd6d495":"fig = plt.figure(figsize = (20, 10))\nfig.add_subplot(221, xlabel =\"Temp\").scatter(df_new[\"temp\"], df_new[\"count\"],c=\"red\", s=25)\nfig.add_subplot(222, xlabel =\"Feels Like\").scatter(df_new[\"atemp\"], df_new[\"count\"],c=\"orange\", s=25)\nfig.add_subplot(223, xlabel =\"Humidity\").scatter(df_new[\"humidity\"], df_new[\"count\"],c=\"green\", s=25)\nfig.add_subplot(224, xlabel =\"Windspeed\").scatter(df_new[\"windspeed\"], df_new[\"count\"],c=\"blue\", s=25)\nplt.tight_layout();","c1612a92":"plt.scatter(df_new[\"hour\"], df_new[\"count\"], s =15, c=\"green\");","a806a38c":"plt.scatter(df_new[\"month\"], df_new[\"count\"], s =15, c=\"brown\");","aef2ffa9":"# split dataset\nfrom sklearn.model_selection import train_test_split\nnp.random.seed(9)\nX = df_new.drop(\"count\", axis = 1)\ny = df_new[\"count\"]\n\nX_train, X_test, y_train, y_test = train_test_split (X, y, test_size = 0.25)","cc5fed15":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","8119d955":"# Modelling using Random Forest regressor\nfrom sklearn.ensemble import RandomForestRegressor\nnp.random.seed(9)\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)","a425b47d":"y_preds = model.predict (X_test)","ca074800":"# Create function for evaluations\nfrom sklearn.metrics import mean_absolute_error, mean_squared_log_error, r2_score \ndef rmsle (y_test, y_preds):\n    return np.sqrt(mean_squared_log_error(y_test, y_preds))\n\ndef model_score(model):\n    scores = {\"MAE\" : mean_absolute_error(y_test, y_preds),\n              \"RMSLE\" : rmsle(y_test, y_preds),\n              \"R2\" : r2_score(y_test, y_preds)}\n    eval = rmsle(y_test, y_preds)\n    print (f\"Model RMSLE = {eval:.3f}\")\n    return scores","98e6b3dc":"model_score(model)","907e7b79":"## Use test datset\ndf_test = pd.read_csv(\"..\/input\/bike-datasets\/test.csv\", parse_dates=[\"datetime\"])\ndf_test.head()","d4dff713":"# test dataset preprocessing\n\ndf_test[\"year\"] = df_test.datetime.dt.year\ndf_test[\"month\"] = df_test.datetime.dt.month\ndf_test[\"day\"] = df_test.datetime.dt.day\ndf_test[\"hour\"] = df_test.datetime.dt.hour\n\ndf_test.head()","bde6ee74":"df_final = df_test.drop(\"datetime\", axis = 1)\ndf_final.head()","b3df74e7":"y_preds_final = model.predict(df_final)","1b964e40":"df_eval = pd.DataFrame()\ndf_eval[\"datetime\"] = df_test[\"datetime\"]\ndf_eval[\"count\"] = y_preds_final","c2c22fa9":"df_eval.head(10)","ffa38802":"df_eval.to_csv(\"final.csv\", sep = \",\", index = False)","1d23c4bc":"### Drop casual and register columns as we considering weather conditions in our problem","a8159067":"### Lowest demand during winter months (Jan-Feb)","5d05f41b":"### High demand during work opening\/closing hours (7:00-8:00)AM and (17:00-18:00)PM","35474f79":"# \ud83d\udeb4 Bike Sharing Demand \ud83d\udeb4\n\n### It has become the preferred mode of transport and the pastime of choice for millions of people in the coronavirus era. The interest in cycling\u00a0has come from commuters keen to avoid public transport because of the increased risk of infection and furloughed workers with time on their hands seeking a simple form of recreation. Vehicle traffic also fell sharply in many cities due to lockdowns, tempting cyclists on to the roads.\n### The global market for Bicycles estimated at 29 Billion in the year 2020, is projected to reach a revised size of 34 Billion by 2027.\n****\n![image.png](attachment:image.png)","28f38787":"### In this Notebook we will try to combine historical usage patterns with weather data in order to predict and forecast bike rental demand in the Capital Bikeshare program in Washington, D.C.\n\n### The Dataset provides hourly rental data spanning two years. The training set is comprised of the first 19 days of each month, while the test set is the 20th to the end of the month. \nWe'll predict the total count\/demand of bikes rented during each hour covered by the test set, using only information available prior to the rental period.\n\n## Features:\n\n### * datetime - hourly date + timestamp  \n### * season -  \n            1 = spring \n            2 = summer\n            3 = fall\n            4 = winter \n### * holiday - whether the day is considered a holiday\n### * workingday - whether the day is neither a weekend nor holiday\n### * weather -\n            1: Clear, Few clouds, Partly cloudy, Partly cloudy\n            2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n            3: Light Snow, Rain + Thunderstorm + Scatter clouds, Rain + Scatter clouds\n            4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \n### * temp - temperature in Celsius\n### * atemp - \"feels like\" temperature in Celsius\n### * humidity - relative humidity\n### * windspeed - wind speed\n### * casual - number of non-registered user rentals initiated\n### * registered - number of registered user rentals initiated\n### * count - number of total rentals","8c4e33bf":"### Notice that we have normal distibution on (Temp, atemp, humidity, windspeed)","f7a7ccbd":"## Required evaluation metric is Root Mean Squared Logarithmic Error (RMSLE)"}}