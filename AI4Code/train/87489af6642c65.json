{"cell_type":{"30912a70":"code","b8da9ef3":"code","80a1ccc2":"code","4ae65009":"code","c227759f":"code","8c8fcef4":"code","afc1899d":"code","e5344553":"code","e577cdb1":"code","b35fe921":"code","51d8017d":"code","3c26b681":"code","5492fe01":"code","10c346d5":"code","57ec26f3":"code","41eeec26":"code","0ba1fa96":"code","b6bad817":"code","86467647":"markdown","e9bae52c":"markdown","e4a3a913":"markdown","69dd7aaa":"markdown","fd45c91d":"markdown","abaf93bd":"markdown"},"source":{"30912a70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8da9ef3":"data = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","80a1ccc2":"data.shape","4ae65009":"data.head()","c227759f":"data.info()","8c8fcef4":"data.describe()","afc1899d":"corr_matrix = data.corr()\ncorr_matrix","e5344553":"import seaborn as sns\nsns.pairplot(data)","e577cdb1":"%matplotlib inline\nimport matplotlib.pyplot as plt","b35fe921":"corrmat=data.corr()\ntop_corr_features=corrmat.index\nplt.figure(figsize=(20,20))\n# plot heat map\ng=sns.heatmap(data[top_corr_features].corr(), annot=True, cmap=\"RdYlGn\")","51d8017d":"from sklearn.model_selection import train_test_split\nX = data.iloc[:,:-1]\ny = data.iloc[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","3c26b681":"from sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()","5492fe01":"model.fit(X_train,y_train) #fitting the model \ny_pred = model.predict(X_test) #prediction\ny_train_pred = model.predict(X_train)","10c346d5":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","57ec26f3":"from sklearn.metrics import precision_score, recall_score\nprecision_score(y_test, y_pred)","41eeec26":"recall_score(y_test, y_pred)","0ba1fa96":"from sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","b6bad817":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","86467647":"## Train-Test Splitting","e9bae52c":"## Accuracy","e4a3a913":"## Confusion Matrix","69dd7aaa":"## Plot Visualizations","fd45c91d":"## Precision and Recall","abaf93bd":"## F-Score"}}