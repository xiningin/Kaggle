{"cell_type":{"99695826":"code","c0475d4e":"code","5d74ceb0":"code","00424147":"code","1dd7dcaf":"code","7f33b4c6":"code","719cecad":"code","b3943493":"code","84160431":"code","2c42ac2b":"code","0ecc3960":"code","deebf1a4":"code","5dfb5d4a":"code","1075da71":"code","fe1b4a41":"code","39c6592e":"code","922f321f":"code","7c821705":"code","e9c49467":"code","34c66df3":"code","895e2e7d":"code","9dd07a9c":"code","6060410f":"code","01a0cd0c":"code","6c4ec0e5":"code","ebc7f6fe":"code","f1cbd17d":"code","128fc217":"code","f29353c9":"code","8e797a2f":"code","100e6ede":"markdown","ac00c06f":"markdown","75603073":"markdown","438b222f":"markdown","2ed8bd8c":"markdown","0c100d52":"markdown"},"source":{"99695826":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0475d4e":"df = pd.read_csv(\"..\/input\/bostonhoustingmlnd\/housing.csv\")","5d74ceb0":"df.head(10)","00424147":"df.info()","1dd7dcaf":"df.count()","7f33b4c6":"tabcorr = df.corr()","719cecad":"tabcorr","b3943493":"plt.figure(figsize=(12,12))\nsns.heatmap(abs(tabcorr), cmap=\"coolwarm\")","84160431":"sns.clustermap(abs(tabcorr), cmap=\"coolwarm\")","2c42ac2b":"from scipy.cluster import hierarchy as hc\n\ncorr = 1 - df.corr()\ncorr_condensed = hc.distance.squareform(corr)\nlink = hc.linkage(corr_condensed, method='ward')\nplt.figure(figsize=(12,12))\nden = hc.dendrogram(link, labels=df.columns, orientation='left', leaf_font_size=10)","0ecc3960":"correlations = tabcorr.MEDV\nprint(correlations)","deebf1a4":"correlations = correlations.drop(['MEDV'],axis=0)","5dfb5d4a":"print(abs(correlations).sort_values(ascending=False))","1075da71":"df.columns","fe1b4a41":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","39c6592e":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train, y_train)            # apprentissage\ny_pred = lm.predict(X_test)         # pr\u00e9diction sur l'ensemble de test","922f321f":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_pred)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","7c821705":"sns.distplot(y_test-y_pred)","e9c49467":"# On peut calculer l'erreur sur les moindres carr\u00e9s :\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","34c66df3":"lm.score(X_test,y_test)","895e2e7d":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","9dd07a9c":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\nprint(rf.score(X_test,y_test))","6060410f":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_rf)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","01a0cd0c":"print(np.sqrt(mean_squared_error(y_test, y_rf)))","6c4ec0e5":"rf.score(X_test,y_test)","ebc7f6fe":"import xgboost as XGB\nxgb  = XGB.XGBRegressor()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)","f1cbd17d":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_xgb)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","128fc217":"sns.distplot(y_test-y_xgb)","f29353c9":"print(np.sqrt(mean_squared_error(y_test, y_xgb)))","8e797a2f":"print(xgb.score(X_test,y_test))","100e6ede":"# R\u00e9gression lin\u00e9aire multiple","ac00c06f":"# Lecture du fichier","75603073":"# Xgboost","438b222f":"# Visualiser les corr\u00e9lations entre les colonnes","2ed8bd8c":"# Machine Learning","0c100d52":"# R\u00e9gression par for\u00eats al\u00e9atoires"}}