{"cell_type":{"1d4c3b6d":"code","f37625ab":"code","cef62d2a":"code","c93d0844":"code","4e522f47":"code","365477ab":"code","4b7706ba":"code","da8c739a":"code","a8180457":"code","8b987e09":"code","ee85831a":"code","33f84819":"code","e2a1e0a4":"code","f11d7ff6":"code","dd1be841":"code","92a50c6f":"code","d4653546":"code","94f009ab":"code","aff2707e":"code","078303b2":"code","83cb0114":"markdown","9216f634":"markdown","56195125":"markdown","a9f9f2e9":"markdown","f648c48f":"markdown","86eecf22":"markdown"},"source":{"1d4c3b6d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\nimport sys;\nimport hashlib;\nfrom os.path import isfile\nfrom joblib import Parallel, delayed\nimport psutil","f37625ab":"train_df = pd.read_csv(\"..\/input\/train.csv\")\nprint(train_df.shape)\ntest_df = pd.read_csv(\"..\/input\/sample_submission.csv\")\ntest_df['diagnosis'] = np.nan\ntrain = train_df.append(test_df)","cef62d2a":"def expand_path(p):\n    if isfile('..\/input\/train_images\/' + p + '.png'): return '..\/input\/train_images\/' + p + '.png'\n    if isfile('..\/input\/test_images\/' + p + '.png'): return '..\/input\/test_images\/' + p + '.png'\n    return p\ndef getImageMetaData(p):\n    strFile = expand_path(p)\n    file = None;\n    bRet = False;\n    strMd5 = \"\";\n    \n    try:\n        file = open(strFile, \"rb\");\n        md5 = hashlib.md5();\n        strRead = \"\";\n        \n        while True:\n            strRead = file.read(8096);\n            if not strRead:\n                break;\n            md5.update(strRead);\n        #read file finish\n        bRet = True;\n        strMd5 = md5.hexdigest();\n    except:\n        bRet = False;\n    finally:\n        if file:\n            file.close()\n\n    return p,strMd5","c93d0844":"img_meta_l = Parallel(n_jobs=psutil.cpu_count(), verbose=1)(\n    (delayed(getImageMetaData)(fp) for fp in train.id_code))","4e522f47":"img_meta_df = pd.DataFrame(np.array(img_meta_l))\nimg_meta_df.columns = ['id_code', 'strMd5']","365477ab":"train = train.merge(img_meta_df,on='id_code')","4b7706ba":"train['strMd5_count'] = train.groupby('strMd5').id_code.transform('count')","da8c739a":"train['strMd5_train_count'] = train['strMd5'].map(train.groupby('strMd5')['diagnosis'].apply(lambda x:x.notnull().sum()))","a8180457":"train['strMd5_nunique'] = train.groupby('strMd5')['diagnosis'].transform('nunique').astype('int')","8b987e09":"train.to_csv('strMd5.csv',index=None)","ee85831a":"train[train.strMd5_count>1].strMd5_count.value_counts()","33f84819":"import matplotlib.pyplot as plt\nimport cv2","e2a1e0a4":"train[(train.strMd5_train_count>1)&(train.strMd5_nunique==1)].strMd5_count.value_counts()","f11d7ff6":"strMd51 = train[(train.strMd5_count>1)&(train.strMd5_nunique==1)].strMd5.unique()\nstrMd5 = strMd51[0]\nsize = len(train[train['strMd5'] == strMd5]['id_code'])\nfig = plt.figure(figsize = (20, 5))\nfor idx, img_name in enumerate(train[train['strMd5'] == strMd5]['id_code'][:size]):\n    y = fig.add_subplot(1, size, idx+1)\n    img = cv2.imread(expand_path(img_name))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    class_id = train[train.id_code==img_name]['diagnosis'].values\n    y.set_title(img_name+f'Label: {class_id}')\n    y.imshow(img)\nplt.show()","dd1be841":"train[(train.strMd5_count>1)&(train.strMd5_nunique>1)].strMd5_count.value_counts()","92a50c6f":"strMd52 = train[(train.strMd5_count>1)&(train.strMd5_nunique>1)].strMd5.unique()\nstrMd5 = strMd52[0]\nfor strMd5 in strMd52[:5]:\n    size = len(train[train['strMd5'] == strMd5]['id_code'])\n    fig = plt.figure(figsize = (20, 5))\n    for idx, img_name in enumerate(train[train['strMd5'] == strMd5]['id_code'][:size]):\n        y = fig.add_subplot(1, size, idx+1)\n        img = cv2.imread(expand_path(img_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        class_id = train[train.id_code==img_name]['diagnosis'].values\n        y.set_title(img_name+f'Label: {class_id}')\n        y.imshow(img)\n    plt.show()","d4653546":"train[(train.strMd5_count>1)&(train.diagnosis.isnull())].shape[0]","94f009ab":"strMd52 = train[(train.strMd5_count>1)&(train.diagnosis.isnull())].strMd5.unique()\nstrMd5 = strMd52[0]\nfor strMd5 in strMd52[:5]:\n    size = len(train[train['strMd5'] == strMd5]['id_code'])\n    fig = plt.figure(figsize = (20, 5))\n    for idx, img_name in enumerate(train[train['strMd5'] == strMd5]['id_code'][:size]):\n        y = fig.add_subplot(1, size, idx+1)\n        img = cv2.imread(expand_path(img_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        class_id = train[train.id_code==img_name]['diagnosis'].values\n        y.set_title(img_name+f'Label: {class_id}')\n        y.imshow(img)\n    plt.show()","aff2707e":"train[(train.strMd5_count==2)]['strMd5_train_count'].value_counts()","078303b2":"strMd52 = train[(train.strMd5_count>2)].strMd5.unique()\nstrMd5 = strMd52[0]\nfor strMd5 in strMd52:\n    size = len(train[train['strMd5'] == strMd5]['id_code'])\n    fig = plt.figure(figsize = (20, 5))\n    for idx, img_name in enumerate(train[train['strMd5'] == strMd5]['id_code'][:size]):\n        y = fig.add_subplot(1, size, idx+1)\n        img = cv2.imread(expand_path(img_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        class_id = train[train.id_code==img_name]['diagnosis'].values\n        y.set_title(img_name+f'Label: {class_id}')\n        y.imshow(img)\n    plt.show()","83cb0114":"**conclusion**\nthere are 2\u00d7255 2-duplicated image. \n2\u00d7116 are in train. 89 have same label, 27 have differnet label;\n2\u00d7134 are in train and test,which means leak;\n2\u00d75 are in test.\n\nthere are 3\u00d73 3-duplicated image. \n1\u00d73 are in train.\n2\u00d73 are in train and test.\n\nthere are 3\u00d74 4-duplicated image. \n3\u00d74 are in train and test.\n\nthere are 1\u00d75 5-duplicated image. \n1\u00d75 are in train and test.\n\nthere are total 141(134+7) leak in test.","9216f634":"**About leak**","56195125":"**Duplicated with same label**","a9f9f2e9":"**Duplicated in both train and test**","f648c48f":"**Duplicated with different label**","86eecf22":"this kernel is from \nhttps:\/\/www.kaggle.com\/manojprabhaakr\/similar-duplicate-images-in-aptos-data\nand  https:\/\/www.kaggle.com\/maxwell110\/duplicated-list-csv-file\/ \n\nI do three things:\n1. change phash to md5 according see-'s comment https:\/\/www.kaggle.com\/maxwell110\/duplicated-list-csv-file\/comments#575422;\n2. Duplicated with different label\n3. Duplicated in both train and test."}}