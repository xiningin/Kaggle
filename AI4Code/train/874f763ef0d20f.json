{"cell_type":{"0ece2a3b":"code","030d2460":"code","336613a1":"code","33a652e5":"code","6cedc4bf":"code","78c0a8c0":"code","88f92695":"code","f20e71ee":"code","0ff4b2fc":"code","827e5a6e":"code","b825a6fd":"code","857a3db5":"code","b152ad22":"code","d2adce24":"code","eb570aa4":"code","e74e1dd3":"code","d8630ac9":"code","61dc4e3e":"code","14f8f1a9":"code","4373c274":"code","fa5016d4":"code","2a53c11d":"code","7fffce41":"code","43b0fbd2":"code","3ed745e1":"code","5a850a9c":"code","4f2fe9b8":"code","842a82df":"code","7a259fef":"code","f8deeef2":"code","fca0e52e":"code","54c05816":"code","003fbf17":"code","8e4bec52":"code","243010e6":"markdown","e76ca991":"markdown","ab5f8443":"markdown","752a36fb":"markdown","4fe30b3d":"markdown","aaf978e3":"markdown","40dacfdb":"markdown","7309845f":"markdown","d9c9ac1c":"markdown","cab6be94":"markdown","57070af0":"markdown","d2ea95ce":"markdown","db3a631a":"markdown","c203edbb":"markdown","e286c0a8":"markdown","688a7405":"markdown","3d61da98":"markdown","b5d4ce8f":"markdown","bb9072d9":"markdown","ed7a6c1a":"markdown"},"source":{"0ece2a3b":"# import libraries \nimport pandas as pd # Import Pandas for data manipulation using dataframes\nimport numpy as np # Import Numpy for data statistical analysis \nimport matplotlib.pyplot as plt # Import matplotlib for data visualisation\nimport seaborn as sns\nimport random\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")","030d2460":"# dataframes creation for both training and testing datasets \nfashion_train_df = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv',sep=',')\nfashion_test_df = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv', sep = ',')","336613a1":"# Let's view the head of the training dataset\n# 784 indicates 28x28 pixels and 1 coloumn for the label\n# After you check the tail, 60,000 training dataset are present\nfashion_train_df.head()","33a652e5":"# Let's view the last elements in the training dataset\nfashion_train_df.tail()","6cedc4bf":"# Let's view the head of the testing dataset\nfashion_test_df.head()","78c0a8c0":"# Let's view the last elements in the testing dataset\nfashion_test_df.tail()","88f92695":"fashion_train_df.shape","f20e71ee":"# Create training and testing arrays\ntrain = np.array(fashion_train_df, dtype='float32')\ntest = np.array(fashion_test_df, dtype='float32')","0ff4b2fc":"train.shape","827e5a6e":"train","b825a6fd":"test","857a3db5":"class_names = ['T_shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\n# Let's view some images!\ni = random.randint(1,60000) # select any random index from 1 to 60,000\nplt.imshow(train[i,1:].reshape((28,28))) # reshape and plot the image\n\nplt.imshow(train[i,1:].reshape((28,28)) , cmap = 'gray') # reshape and plot the image\nlabel_index = fashion_train_df[\"label\"][i]\nplt.title(f\"{class_names[label_index]}\")\n\n\n# Remember the 10 classes decoding is as follows:\n# 0 => T-shirt\/top\n# 1 => Trouser\n# 2 => Pullover\n# 3 => Dress\n# 4 => Coat\n# 5 => Sandal\n# 6 => Shirt\n# 7 => Sneaker\n# 8 => Bag\n# 9 => Ankle boot","b152ad22":"label = train[i,0]\nlabel","d2adce24":"# Let's view more images in a grid format\n# Define the dimensions of the plot grid \nW_grid = 15\nL_grid = 15\n\n# fig, axes = plt.subplots(L_grid, W_grid)\n# subplot return the figure object and axes object\n# we can use the axes object to plot specific figures at various locations\n\nfig, axes = plt.subplots(L_grid, W_grid, figsize=(17,17))\n\naxes = axes.ravel() # flaten the 15 x 15 matrix into 225 array\n\nn_train = len(train) # get the length of the train dataset\n\n# Select a random number from 0 to n_train\nfor i in np.arange(0, W_grid * L_grid): # create evenly spaces variables \n\n    # Select a random number\n    index = np.random.randint(0, n_train)\n    # read and display an image with the selected index    \n    axes[i].imshow( train[index,1:].reshape((28,28)) )\n    label_index = int(train[index,0])\n    axes[i].set_title(class_names[label_index], fontsize=8)\n    axes[i].axis('off')\n\nplt.subplots_adjust(hspace=0.4)\n\n# Remember the 10 classes decoding is as follows:\n# 0 => T-shirt\/top\n# 1 => Trouser\n# 2 => Pullover\n# 3 => Dress\n# 4 => Coat\n# 5 => Sandal\n# 6 => Shirt\n# 7 => Sneaker\n# 8 => Bag\n# 9 => Ankle boot","eb570aa4":"# Prepare the training and testing dataset \nX_train = train[:, 1:] \/ 255\ny_train = train[:, 0]\n\nX_test = test[:, 1:] \/ 255\ny_test = test[:,0]","e74e1dd3":"plt.figure(figsize=(10, 10))\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X_train[i].reshape((28,28)), cmap=plt.cm.binary)\n    label_index = int(y_train[i])\n    plt.title(class_names[label_index])\nplt.show()\nplt.tight_layout()","d8630ac9":"plt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nclasses, counts = np.unique(y_train, return_counts=True)\nplt.barh(class_names, counts)\nplt.title('Class distribution in training set')\n\nplt.subplot(2, 2, 2)\nclasses, counts = np.unique(y_test, return_counts=True)\nplt.barh(class_names, counts)\nplt.title('Class distribution in testing set')","61dc4e3e":"from sklearn.model_selection import train_test_split\n\nX_train, X_validate, y_train, y_validate = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","14f8f1a9":"print(X_train.shape)\nprint(y_train.shape)","4373c274":"# * unpack the tuple\nX_train = X_train.reshape(X_train.shape[0], * (28, 28, 1))\nX_test = X_test.reshape(X_test.shape[0], * (28, 28, 1))\nX_validate = X_validate.reshape(X_validate.shape[0], * (28, 28, 1))\n","fa5016d4":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_validate.shape)\nprint(y_validate.shape)","2a53c11d":"import keras\nimport tensorflow as tf","7fffce41":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import TensorBoard","43b0fbd2":"cnn_model = Sequential()\n\n# Try 32 fliters first then 64\ncnn_model.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu', padding='same'))\ncnn_model.add(BatchNormalization())\ncnn_model.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu', padding='same'))\ncnn_model.add(BatchNormalization())\ncnn_model.add(MaxPooling2D(pool_size=(2, 2)))\ncnn_model.add(Dropout(0.2))\n\ncnn_model.add(Conv2D(filters=64, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu', padding='same'))\ncnn_model.add(BatchNormalization())\ncnn_model.add(Conv2D(filters=64, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu', padding='same'))\ncnn_model.add(BatchNormalization())\ncnn_model.add(MaxPooling2D(pool_size=(2, 2)))\ncnn_model.add(Dropout(0.2))\n\n# cnn_model.add(Conv2D(filters=128, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu'))\n# cnn_model.add(BatchNormalization())\n# cnn_model.add(Conv2D(filters=128, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu'))\n# cnn_model.add(BatchNormalization())\n# cnn_model.add(MaxPooling2D(pool_size=(2, 2)))\n# cnn_model.add(Dropout(0.25))\n\n# cnn_model.add(Conv2D(32,3, 3, activation='relu'))\n# cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n\ncnn_model.add(Flatten())\ncnn_model.add(Dense(units=128, activation='relu'))\ncnn_model.add(Dropout(0.2))\ncnn_model.add(Dense(units=10, activation='softmax'))","3ed745e1":"METRICS = [\n    'accuracy',\n    tf.keras.metrics.Precision(name='precision'),\n    tf.keras.metrics.Recall(name='recall')\n]\n\ncnn_model.compile(loss ='sparse_categorical_crossentropy', optimizer='adam' ,metrics=['accuracy'])","5a850a9c":"epochs = 50\nbatch_size = 512\n\nhistory = cnn_model.fit(\n    X_train, y_train, \n    batch_size=batch_size, \n    epochs=epochs,\n    verbose=1, \n    validation_data=(X_validate, y_validate)\n)","4f2fe9b8":"plt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nplt.plot(history.history['loss'], label='Loss')\nplt.plot(history.history['val_loss'], label='val_Loss')\nplt.legend()\nplt.title('Loss evolution')\n\nplt.subplot(2, 2, 2)\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy')\nplt.legend()\nplt.title('Accuracy evolution')","842a82df":"evaluation = cnn_model.evaluate(X_test, y_test)\nprint(f'Test Accuracy : {evaluation[1]:.3f}')","7a259fef":"# get the predictions for the test data\npredicted_classes = cnn_model.predict(X_test)\npredicted_classes = np.argmax(predicted_classes, axis=1)","f8deeef2":"test_img = X_test[0]\nprediction = cnn_model.predict(X_test)\nprediction[0]","fca0e52e":"np.argmax(prediction[0])","54c05816":"L = 5\nW = 5\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel()\n\nfor i in np.arange(0, L * W):  \n    axes[i].imshow(X_test[i].reshape(28,28))\n    axes[i].set_title(f\"Prediction Class = {(predicted_classes[i]):0.1f}\\n True Class = {y_test[i]:0.1f}\")\n    axes[i].axis('off')\n\nplt.subplots_adjust(wspace=0.5)","003fbf17":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, predicted_classes)\nplt.figure(figsize = (14,10))\nsns.heatmap(cm, annot=True)\n# Sum the diagonal element to get the total true correct values","8e4bec52":"from sklearn.metrics import classification_report\n\nnum_classes = 10\ntarget_names = [f\"Class {i}\" for i in range(num_classes)]\n\nprint(classification_report(y_test, predicted_classes, target_names = target_names))","243010e6":"So, the model is most confident that this image is an `T-shirt\/top`, or `class_names[0]`. Examining the test label shows that this classification is correct:","e76ca991":"## Makes predictions\n\nWith the model trained, you can use it to make predictions about some images.","ab5f8443":"It turns out that the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy represents overfitting. Overfitting is when a machine learning model performs worse on new, previously unseen inputs than on the training data.","752a36fb":"# STEP #3: VISUALIZATION OF THE DATASET  ","4fe30b3d":"# Resources:\n\n1. [Machine Learning Practical 6 Real-World Applications Course - Udemy](https:\/\/www.udemy.com\/course\/machine-learning-practical\/)\n2. [Tensorflow documentation](https:\/\/www.tensorflow.org\/tutorials\/keras\/classification)","aaf978e3":"## Build the model\nBuilding the neural network requires configuring the layers of the model, then compiling the model.\n\n### Set up the layers\nThe basic building block of a neural network is the *layer*. Layers extract representations from the data fed into them. Hopefully, these representations are meaningful for the problem at hand.\n\nMost of deep learning consists of chaining together simple layers. Most layers, such as `tf.keras.layers.Dense`, have parameters that are learned during training.","40dacfdb":"# STEP #5: EVALUATING THE MODEL","7309845f":"Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It's important that the training set and the testing set be preprocessed in the same way:","d9c9ac1c":"## Train the model\n\nTraining the neural network model requires the following steps:\n\n1. Feed the training data to the model. In this example, the training data is in the `X_train` and `y_train` arrays.\n2. The model learns to associate images and labels.\n3. You ask the model to make predictions about a test set\u2014in this example, the `X_test` array. Verify that the predictions match the labels from the `y_test` array.\n\nTo start training, call the `model.fit` method\u2014so called because it \"fits\" the model to the training data:","cab6be94":"### Compile the model\nBefore the model is ready for training, it needs a few more settings. These are added during the model's compile step:\n\n- *Loss function* \u2014This measures how accurate the model is during training. You want to minimize this function to \"steer\" the model in the right direction.\n- *Optimizer* \u2014This is how the model is updated based on the data it sees and its loss function.\n- *Metrics* \u2014Used to monitor the training and testing steps. The following example uses *accuracy*, the fraction of the images that are correctly classified.","57070af0":"# FASHION CLASS CLASSIFICATION \n![5d9d40a3df1e442ce97abf21_fashion-mnist.png](attachment:5d9d40a3df1e442ce97abf21_fashion-mnist.png)\n","d2ea95ce":"The first layer in this network, `keras.layers.Flatten`, transforms the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data.\n\nAfter the pixels are flattened, the network consists of a sequence of two `keras.layers.Dense` layers. These are densely connected, or fully connected, neural layers. The first Dense layer has 128 nodes (or neurons). The second (and last) layer is a 10-node softmax layer that returns an array of 10 probability scores that sum to 1. Each node contains a score that indicates the probability that the current image belongs to one of the 10 classes.","db3a631a":"Here, the model has predicted the label for each image in the testing set. Let's take a look at the first prediction:","c203edbb":"# STEP #2: IMPORTING DATA","e286c0a8":"To verify that the data is in the correct format and that you're ready to build and train the network, let's display the first 25 images from the training set and display the class name below each image.","688a7405":"# STEP #4: TRAINING THE MODEL","3d61da98":"We split our training data into train and validate datasets, in order to train our model and validate it using the validation data set to avoid overfitting before testing the model on the test datasets which is as real-world data for our model.","b5d4ce8f":"# STEP #1: PROBLEM STATEMENT AND BUSINESS CASE","bb9072d9":"Fashion training set consists of 70,000 images divided into 60,000 training and 10,000 testing samples. Dataset sample consists of 28x28 grayscale image, associated with a label from 10 classes. \n\nThe 10 classes are as follows:  \n0 => T-shirt\/top\n1 => Trouser\n2 => Pullover\n3 => Dress\n4 => Coat\n5 => Sandal\n6 => Shirt\n7 => Sneaker\n8 => Bag\n9 => Ankle boot\n\nEach image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255. ","ed7a6c1a":"A prediction is an array of 10 numbers. They represent the model's \"confidence\" that the image corresponds to each of the 10 different articles of clothing. You can see which label has the highest confidence value:"}}