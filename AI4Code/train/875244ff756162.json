{"cell_type":{"89420e8f":"code","1f058402":"code","4ec571d7":"code","fcf17559":"code","ec5362b7":"code","8c31ca85":"code","27afe6ac":"code","6b360910":"code","5faf3615":"code","108e01b9":"code","b73e4577":"code","475dc9a9":"code","c293f0d5":"code","be1870e2":"code","6aebe91e":"code","195fd095":"code","ef600581":"code","6ec193ef":"code","516af38f":"code","e7c6ef9e":"code","2d4bf0ae":"code","df825654":"code","dbc1bae5":"code","0e39c24f":"code","62cc1932":"code","1800e6ae":"code","60d1ce1c":"code","467d83e6":"code","e789d075":"code","5de7917a":"code","20955827":"code","5af47038":"code","46038702":"code","951588e9":"code","f5736f5e":"code","d2fc25da":"code","547935ef":"code","a6f79bb6":"code","26163c81":"code","1b8cbc98":"code","a5157ec1":"code","d0269f63":"code","b41edc55":"code","ee472199":"code","3f978f16":"code","f0f486a9":"code","c16498f2":"code","65289eaa":"code","f8d4ce75":"code","9cb5f7a0":"code","3e6ca770":"code","a52ddc27":"code","c3d5e9f9":"code","f4676b1e":"code","c9f334e5":"code","65ad3dce":"code","f4df7481":"code","5599e56c":"code","2af9d890":"code","135e5cf1":"code","19a2e940":"code","305a8556":"code","20b77d10":"code","ac75c9c1":"code","453422fb":"code","9f17c5c8":"code","6e281d9b":"code","01c6459e":"code","cc56f2d1":"code","3eb2f5db":"code","882fc572":"code","681775a9":"code","a0d390f5":"code","8b0d0f7c":"code","03c4425d":"code","841cd1b4":"code","5962356f":"code","2a869a34":"code","633e763e":"code","afe8c654":"code","3728101b":"code","82f061c0":"code","b93d9f0a":"code","a0779b4a":"code","eb850793":"code","26893e21":"code","206d77e5":"code","517092a6":"code","faab646a":"code","f464232f":"code","d82db05f":"code","23652f70":"code","3b622058":"code","3b88c2d7":"code","7deff39c":"code","3ee40be8":"code","428ff99d":"code","5b9a70e3":"code","84530aa3":"code","c8394258":"code","24e01c41":"code","115c7125":"code","7939eac7":"code","1789a1fc":"code","971470c0":"code","9efb8577":"code","a5ee9324":"code","0e1ffe58":"code","4478ba93":"code","7b21ead9":"code","823f988d":"code","2497eeca":"code","1621eb52":"code","5a8a6333":"code","1bbbc13c":"code","d886364b":"code","ea2559c5":"code","1d307185":"code","066acf83":"code","05aa7785":"code","a40509b4":"code","84c1717d":"code","367a3114":"code","7ab10b12":"code","0d1a3039":"code","7cf050a6":"code","64506335":"code","93fcab97":"code","daef7cee":"code","ed6960bc":"code","301ec653":"code","ca3a7f0c":"code","f53227f2":"code","dfc92185":"code","ec2002d5":"code","10494761":"code","04ee3f5e":"code","998735f8":"code","ec2c60d6":"code","96ed2784":"code","4aadb35f":"code","dfe2f04a":"code","c88c74c2":"code","c853675d":"code","23d4b5f8":"code","b7db234c":"code","f3e72ec6":"code","bd8e6db3":"code","d4844c5d":"code","c18d65b8":"code","b3875cc9":"code","9da32f6f":"code","b03c78ad":"code","318a6497":"code","8ae760f1":"code","d1ddeae7":"code","d1df2d7d":"code","ce0dc7b2":"markdown","874af890":"markdown","fd8340ad":"markdown","b2291f68":"markdown","fdaa44fe":"markdown","510a29da":"markdown","45f5e758":"markdown","2a9c8f0c":"markdown","7669ee77":"markdown","a51237a2":"markdown","9905b875":"markdown","c80cd770":"markdown","1b811f9c":"markdown","b2576f51":"markdown","4dc191fb":"markdown","4778585a":"markdown","7b946290":"markdown","03071a25":"markdown","cf4b10fa":"markdown","60d274a3":"markdown","c8cc7280":"markdown","e847e49a":"markdown","db6f5ab0":"markdown","d5780861":"markdown","ed95f76b":"markdown","e7c385bf":"markdown","c3b969b2":"markdown","26837302":"markdown","05e6830d":"markdown","85d9793b":"markdown","5e2a39f6":"markdown","44b4e4b7":"markdown","791349a3":"markdown","a4f833a7":"markdown","8cfc0edd":"markdown","8425e2ff":"markdown","b973d52c":"markdown","f6bb3da4":"markdown","7fd4298c":"markdown","0df0e5f9":"markdown","c3d3f6c0":"markdown","dbd3e09b":"markdown","919660b0":"markdown","d0c16887":"markdown","3815c302":"markdown","0a5d8c14":"markdown","3f2d5a25":"markdown","fc20dcbd":"markdown","7299cdaa":"markdown","5f39ab08":"markdown","f9389b88":"markdown","a934e0e3":"markdown","ff98a5e5":"markdown","e18f5d4b":"markdown","886ddfbb":"markdown","f49c79c4":"markdown","ae8b0e67":"markdown","27ad2812":"markdown","1c7a9c68":"markdown","06103497":"markdown","1e68dbbc":"markdown","a6fd53a6":"markdown","eec25263":"markdown","40c11077":"markdown","1b139a41":"markdown","f5907087":"markdown"},"source":{"89420e8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n\nfrom collections import Counter\nfrom datetime import datetime\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n%matplotlib inline\n\npd.set_option(\"display.max_rows\", 250)\npd.set_option(\"display.max_columns\", 250)\n\n# Set dots per inch to 300, very high quality images\n# plt.rcParams['figure.dpi'] = 300\n\n# Enable autolayout\n# plt.rcParams['figure.autolayout'] = True","1f058402":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","4ec571d7":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","fcf17559":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\ndef find_IQR(data, column):\n    perc_25 = data[column].quantile(0.25, interpolation=\"midpoint\")\n    perc_75 = data[column].quantile(0.75, interpolation=\"midpoint\")\n    IQR = perc_75 - perc_25\n    print('Q1: {}'.format(perc_25), 'Q3: {}'.format(perc_75), 'IQR: {}'.format(IQR),\n          '\u0413\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{a},{b}]'.format(a=perc_25 - 1.5*IQR, b=perc_75 + 1.5*IQR), sep='\\n')\n\n\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u043e\u0432 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443\ndef get_boxplot(data, column):\n    fig, ax = plt.subplots(figsize=(14, 4))\n    sns.boxplot(x=column, y='Rating',\n                data=data, ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()\n\n\ndef clean_name(val):\n    if pd.isnull(val) == True: return 'Other'\n    val = val.strip(\"[]\")\n    val = val.replace(\"\\''\", \"\")\n    val = val.split(\", \")\n    return val\n\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndef number_of_reviews(input_df):\n    input_df.standard_ranking = round(input_df.standard_ranking, 2)\n    input_df['rev_number'] = input_df.groupby(['standard_ranking'])['rev_number'].apply(lambda x: x.fillna(x.mean()))\n    return input_df\n\n\ndef edit_number_of_reviews(df):\n    # all about number_of_reviews\n    # df = input_df.copy()\n    scaler = StandardScaler()\n    \n    # \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u043d\u043a\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430\n    mean_per_city = df.groupby('city')['rev_number'].mean()\n    df['mean_Number_of_Reviews_per_city'] = df['city'].apply(lambda x: mean_per_city[x])\n\n    #  \u043c\u0430\u0441\u043c\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u043d\u043a\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430\n    max_per_city = df.groupby('city')['rev_number'].max()\n    df['max_Number_of_Reviews_per_city'] = df['city'].apply(lambda x: max_per_city[x])\n\n    # \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f\n    df['stand_Number_of_Reviews'] = (df['ranking'] - df['mean_Number_of_Reviews_per_city']) \/ df['max_Number_of_Reviews_per_city']\n    \n    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n    try:\n        df['reviews_per_each_person'] = df['rev_number'] \/ df['population']\n    except:\n        pass\n\n    # \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n    reviews_per_city = df.groupby(by='city')['rev_number'].mean()\n    df['reviews_per_city'] = df['city'].apply(lambda x: reviews_per_city[x])\n    \n    try:\n        df['reviews_per_each_person'] = scaler.fit_transform(df[['reviews_per_each_person']])\n    except:\n        pass\n    \n    return df\n\n\ndef show_chained_rest(data):\n    # Create a list with restaurants which might be in chain\n    chained_rest_list = list(data['rest_id'].value_counts()[data['rest_id'].value_counts() > 1].index)\n    \n    # If it is in chain, we add in a new column the identificator '1', otherwise '0\n    data['chained_rest'] = data[data['rest_id'].isin(chained_rest_list)]['rest_id'].apply(lambda x: 1)\n    data['chained_rest'] = data['chained_rest'].fillna(0)\n    \n    \ndef show_duplicated_id(data):\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u043b\u0430\u0433, \u0435\u0441\u043b\u0438 id_ta \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 1 \u0440\u0430\u0437\u0430\n    duplicated_id = list(data['id_ta'].value_counts()[data['id_ta'].value_counts() > 1].index)\n    \n    # If it is duplicated, we add in a new column the identificator '1', otherwise '0'\n    data['dupl_id'] = data[data['id_ta'].isin(duplicated_id)]['id_ta'].apply(lambda x: 1)\n    data['dupl_id'] = data['dupl_id'].fillna(0)\n    \n    \n# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Ranking \u0438 Raiting \u043f\u043e\u0445\u043e\u0436\u0438. \u041a\u043e\u0433\u0434\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0441\u0430\u043c\u044b\u043c \u0432\u044b\u0441\u043e\u043a\u0438\u043c Ranking, \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 4-4.5\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 Ranking \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Rating\n# \u0412\u0432\u0435\u0434\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0440\u0430\u043d\u043a\u0438\u043d\u0433 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\ndef ranking_normalize(data):\n    reCount = data.city.value_counts()\n    restCount = dict(reCount)\n    data['rest_count'] = data['city'].map(restCount)\n    \n    # \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u043a, \u0447\u0442\u043e \u0431\u044b \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043b \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 city.\n    mean_per_city = data.groupby('city')['ranking'].mean()\n    data['mean_ranking_per_city'] = data['city'].apply(lambda x: mean_per_city[x])\n    max_per_city = data.groupby('city')['ranking'].max()\n    data['max_ranking_per_city'] = data['city'].apply(lambda x: max_per_city[x])\n    data['standard_ranking'] = (data['ranking'] - data['mean_ranking_per_city']) \/ data['max_ranking_per_city']\n    data.drop(['mean_ranking_per_city', 'max_ranking_per_city'], axis = 1, inplace=True)\n    \n    \ndef show_price_range(data):\n    # \u0437\u0430\u043c\u0435\u043d\u0438\u043c '$, $$-$$$, $$$$' \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n    price_range_dict = {\n        '$': 1,\n        '$$ - $$$': 2,\n        '$$$$': 3\n    }\n\n    data['price_range'].replace(price_range_dict, inplace=True)\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n    data['price_range'] = data['price_range'].fillna(data.groupby('city')['price_range'].transform('median'))\n    \n    \ndef show_city_dict(data):\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 is_capital, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0442\u043c\u0435\u0442\u0438\u043c \u0442\u0435 \u0437\u0430\u043f\u0438\u0441\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0445 \u0433\u043e\u0440\u043e\u0434-\u0441\u0442\u043e\u043b\u0438\u0446\n    is_capital_dict = {\n        'Paris': 1,\n        'Stockholm': 1,\n        'London': 1,\n        'Berlin': 1,\n        'Munich': 0,\n        'Oporto': 0,\n        'Milan': 0,\n        'Bratislava': 1,\n        'Vienna': 1,\n        'Rome': 1,\n        'Barcelona': 0,\n        'Madrid': 1,\n        'Dublin': 1,\n        'Brussels': 1,\n        'Zurich': 0,\n        'Warsaw': 1,\n        'Budapest': 1,\n        'Copenhagen': 1,\n        'Amsterdam': 1,\n        'Lyon': 0,\n        'Hamburg': 0,\n        'Lisbon': 1,\n        'Prague': 1,\n        'Oslo': 1,\n        'Helsinki': 1,\n        'Edinburgh': 1,\n        'Geneva': 0,\n        'Ljubljana': 1,\n        'Athens': 1,\n        'Luxembourg': 1,\n        'Krakow': 0\n    }\n\n    data['is_capital'] = data['city'].map(is_capital_dict)\n\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a country - \u043e\u043d \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0431\u0442\u0430\u0442\u044c \u0441 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u0443\u0445\u043d\u044f\u043c\u0438\n\n    country_dict = {\n        'Paris': 'France',\n        'Stockholm': 'Sweden',\n        'London': 'United Kingdom',\n        'Berlin': 'Germany',\n        'Munich': 'Germany',\n        'Oporto': 'Portugal',\n        'Milan': 'Italy',\n        'Bratislava': 'Slovakia',\n        'Vienna': 'Austria',\n        'Rome': 'Italy',\n        'Barcelona': 'Spain',\n        'Madrid': 'Spain',\n        'Dublin': 'Ireland',\n        'Brussels': 'Belgium',\n        'Zurich': 'Switzerland',\n        'Warsaw': 'Poland',\n        'Budapest': 'Hungary',\n        'Copenhagen': 'Denmark',\n        'Amsterdam': 'Netherlands',\n        'Lyon': 'France',\n        'Hamburg': 'Germany',\n        'Lisbon': 'Portugal',\n        'Prague': 'Chechia',\n        'Oslo': 'Norway',\n        'Helsinki': 'Finland',\n        'Edinburgh': 'United Kingdom',\n        'Geneva': 'Switzerland',\n        'Ljubljana': 'Slovenia',\n        'Athens': 'Greece',\n        'Luxembourg': 'Luxemburg',\n        'Krakow': 'Poland'\n    }\n\n    data['country'] = data['city'].map(country_dict)\n\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \"\u0427\u0438\u0441\u043b\u0435\u043d\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432\" \u0441 Wiki\n\n    city_pop_dict = {\n        'Paris': 2_187_526,\n        'Stockholm': 975_551,\n        'London': 8_982_000,\n        'Berlin': 3_769_000,\n        'Munich': 1_472_000,\n        'Oporto': 214_349,\n        'Milan': 1_352_000,\n        'Bratislava': 424_428,\n        'Vienna': 1_897_000,\n        'Rome': 2_873_000,\n        'Barcelona': 5_575_000,\n        'Madrid': 6_642_000,\n        'Dublin': 1_388_000,\n        'Brussels': 174_383,\n        'Zurich': 402_762,\n        'Warsaw': 1_708_000,\n        'Budapest': 1_752_000,\n        'Copenhagen': 602_481,\n        'Amsterdam': 821_752,\n        'Lyon': 513_275,\n        'Hamburg': 1_845_000,\n        'Lisbon': 504_718,\n        'Prague': 1_309_000,\n        'Oslo': 681_067,\n        'Helsinki': 631_695,\n        'Edinburgh': 482_005,\n        'Geneva': 499_480,\n        'Ljubljana': 279_631,\n        'Athens': 664_046,\n        'Luxembourg': 124_528,\n        'Krakow': 762_508\n    }\n\n    data['population'] = data['city'].map(city_pop_dict)\n\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \"\u0412\u0430\u043b\u043e\u0432\u044b\u0439 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\" \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0441 Wiki\n    # \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u041f\u0430\u0440\u0438\u0436 -> \u0424\u0440\u0430\u043d\u0446\u0438\u044f -> GDP (PPP) per capita = 45_454 (2020)\n    # source - https:\/\/en.wikipedia.org\/wiki\/List_of_sovereign_states_in_Europe_by_GDP_(PPP)_per_capita\n\n    country_gdp_dict = {\n        'Paris': 45_454,\n        'Stockholm': 52_477,\n        'London': 44_288,\n        'Berlin': 53_571,\n        'Munich': 53_571,\n        'Oporto': 33_131,\n        'Milan': 40_066,\n        'Bratislava': 32_184,\n        'Vienna': 55_406,\n        'Rome': 40_066,\n        'Barcelona': 38_143,\n        'Madrid': 38_143,\n        'Dublin': 89_383,\n        'Brussels': 50_114,\n        'Zurich': 68_340,\n        'Warsaw': 33_739,\n        'Budapest': 32_434,\n        'Copenhagen': 57_781,\n        'Amsterdam': 57_101,\n        'Lyon': 45_454,\n        'Hamburg': 53_571,\n        'Lisbon': 33_131,\n        'Prague': 40_293,\n        'Oslo': 64_856,\n        'Helsinki': 49_334,\n        'Edinburgh': 44_288,\n        'Geneva': 68_340,\n        'Ljubljana': 38_506,\n        'Athens': 29_045,\n        'Luxembourg': 112_875,\n        'Krakow': 33_739\n    }\n\n    data['country_gdp'] = data['city'].map(country_gdp_dict)\n\n    # \u041f\u0440\u0438\u0437\u043d\u0430\u043a - \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 Numbeo (2018)\n\n    purchasing_power_index = {\n        'London' : 24,\n        'Paris' : 22,\n        'Madrid' : 23,\n        'Barcelona' : 30,\n        'Berlin' : 8,\n        'Milan' : 40,\n        'Rome' : 37,\n        'Prague' : 31,\n        'Lisbon' : 48,\n        'Vienna' : 21,\n        'Amsterdam' : 19,\n        'Brussels' : 15,\n        'Hamburg' : 7,\n        'Munich' : 6,\n        'Lyon' : 70,\n        'Stockholm' : 13,\n        'Budapest' : 51,\n        'Warsaw' : 29,\n        'Dublin' : 27,\n        'Copenhagen' : 10,\n        'Athens' : 53,\n        'Edinburgh' : 16, \n        'Zurich' : 2,\n        'Oporto' : 42,\n        'Geneva' : 3, \n        'Krakow' : 36, \n        'Oslo' : 17, \n        'Helsinki' : 9,\n        'Bratislava' : 39,\n        'Luxembourg' : 4,\n        'Ljubljana' : 32\n    }\n\n    data['purchasing_power'] = data['city'].map(purchasing_power_index)\n\n    # \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c.\n    # \u041c\u0435\u0441\u0442\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435 \u0442\u043e\u043f-100 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0432 2018 \u0433\u043e\u0434\u0443 (\u0442\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0439)\n    # \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a - Euromonitor international\n\n    # \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0435 \u0432\u0441\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u0442\u043e\u043f-100, \u0442\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u044b:\n    # 1 - \u043c\u0435\u0441\u0442\u043e 1-25\n    # 2 - \u043c\u0435\u0441\u0442\u043e 26-50\n    # 3 - \u043c\u0435\u0441\u0442\u043e 51-75\n    # 4 - \u043c\u0435\u0441\u0442\u043e 76-100\n    # 5 - \u043c\u0435\u0441\u0442\u043e \u0432\u044b\u0448\u0435 100\n\n    tourist_attract = {\n        'London' : 1,\n        'Paris' : 1,\n        'Madrid' : 2,\n        'Barcelona' : 2,\n        'Berlin' : 2,\n        'Milan' : 5,\n        'Rome' : 1,\n        'Prague' : 1,\n        'Lisbon' : 3,\n        'Vienna' : 2,\n        'Amsterdam' : 1,\n        'Brussels' : 3,\n        'Hamburg' : 5,\n        'Munich' : 3,\n        'Lyon' : 5,\n        'Stockholm' : 4,\n        'Budapest' : 3,\n        'Warsaw' : 3,\n        'Dublin' : 5,\n        'Copenhagen' : 3,\n        'Athens' : 2,\n        'Edinburgh' : 5, \n        'Zurich' : 5,\n        'Oporto' : 4,\n        'Geneva' : 5, \n        'Krakow' : 3, \n        'Oslo' : 5, \n        'Helsinki' : 5,\n        'Bratislava' : 5,\n        'Luxembourg' : 5,\n        'Ljubljana' : 5\n    }\n\n    data['tourists'] = data.city.map(tourist_attract)\n    \n    \n# Let's sort cities by most common in dataset. Rest of them we call as 'Other'\n# To do so, create a new column 'new_city'.\n# The column 'city' we will use further and then drop it\ndef city_list_shorter(data):\n    all_cities = data['city'].value_counts().index\n    data['new_city'] = data['city']\n\n    # Create a top Cites list (more than 70% in Dataset)\n    top_cities_list = data['new_city'].value_counts()[\n        data['new_city'].value_counts() > np.percentile((data['new_city'].value_counts().values), 70)].index.tolist()\n\n    cities_to_drop = list(set(all_cities)-set(top_cities_list))\n    data.loc[data['new_city'].isin(cities_to_drop), 'new_city'] = 'Other'\n    \n    \ndef most_common_cuisines(data):\n    top_10_cuisine = []\n    top_10_cuisine = data.explode('cuisine_style')['cuisine_style'].value_counts()[\n        data.explode('cuisine_style')['cuisine_style'].value_counts() >= 3786].index.tolist()\n    data['most_common_cuisine'] = 0\n    for i in range(len(data)):\n        for cuis in top_10_cuisine:\n            if cuis in data['cuisine_style'][i]:\n                data['most_common_cuisine'][i] = 1\n                break\n            else:\n                pass\n\n\ndef top_unique_cuisines(data):\n    top_unique_cuisine = []\n    top_unique_cuisine = data.explode('cuisine_style')['cuisine_style'].value_counts()[\n        data.explode('cuisine_style')['cuisine_style'].value_counts() <= 4].index.tolist()\n    data['top_unique_cuisine'] = 0\n    for i in range(len(data)):\n        for cuis in top_unique_cuisine:\n            if cuis in data['cuisine_style'][i]:\n                data['top_unique_cuisine'][i] = 1\n                break\n            else:\n                pass\n\n\n\n# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0432\u0435\u0433\u0435\u0442\u0430\u0440\u0438\u0430\u043d\u0441\u043a\u0430\u044f \u043a\u0443\u0445\u043d\u044f\ndef show_veget(data):\n    veget_cuisine = ['Vegetarian Friendly', 'Healthy', 'Vegan Options', 'Gluten Free Options']\n\n    data['veget_cuisine'] = 0\n    for i in range(len(data)):\n        for cuis in veget_cuisine:\n            if cuis in data['cuisine_style'][i]:\n                data['veget_cuisine'][i] = 1\n                break\n            else:\n                pass\n            \n            \n# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u0444\u0430\u0441\u0442- \u0438 \u0434\u0436\u0430\u043d\u043a-\u0444\u0443\u0434\u043e\u043c\ndef show_junk_food(data):\n    pop_cuisine = ['Cafe','Grill','International','Mediterranean','Fast Food','Pizza','Pub','Sushi']\n\n    data['pop_cuisine'] = 0\n    for i in range(len(data)):\n        for cuis in pop_cuisine:\n            if cuis in data['cuisine_style'][i]:\n                data['pop_cuisine'][i] = 1\n                break\n            else:\n                pass\n            \n            \n# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0435\u0439\ndef show_local_food(data):\n    local_cuisine_by_country = {\n            'United Kingdom': ['British','Scottish'],\n            'Spain': ['Spanish'],\n            'France': ['French','Central European'], \n            'Italy': ['Italian','Central European'],\n            'Germany': ['Dutch','German','Central European'],\n            'Portugal': ['Portuguese'],\n            'Chechia': ['Czech','Eastern European'],\n            'Poland':['Polish','Eastern European'],\n            'Austria': ['Austrian','Central European'],\n            'Netherlands':['Scandinavian'],\n            'Belgium': ['Belgian','Eastern European'],\n            'Switzerland':['Swiss','Central European'],\n            'Sweden':['Scandinavian'],\n            'Hungary':['Hungarian','Eastern European'],\n            'Ireland':['Irish'],\n            'Denmark':['Scandinavian'],\n            'Greece':['Greece'],\n            'Norway':['Scandinavian'],\n            'Finland':['Scandinavian'],\n            'Slovakia':['Eastern European'],\n            'Luxemburg':['Eastern European'],\n            'Slovenia':['Slovenian','Eastern European']\n    }\n    \n    data['local_cuisine'] = 0\n    for i in range(len(data)):\n        current_country = data.country[i]\n        for cuis in local_cuisine_by_country[current_country]:\n            if cuis in data['cuisine_style'][i]:\n                data['local_cuisine'][i] = 1\n                break\n            else:\n                pass\n            \n            \ndef fix_revs_outs(data, edge):\n    # \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0434 \u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u0433\u0434\u0435 \u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441\n    data['many_revs'] = data['rev_number'].apply(lambda x: 1 if x > edge else 0)\n\n    # \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 edge.\n    data['rev_number'] = data['rev_number'].apply(lambda x: edge if x > edge else x)\n    \n    \ndef review_dt_extract(data):\n    pattern = re.compile(\"\\d+\\\/\\d+\\\/\\d+\")\n    data['review_date'] = data['reviews'].apply(pattern.findall)\n\n    # \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0438, \u043a\u043e\u0433\u0434\u0430 \u0434\u0430\u0442\u0430 \u0435\u0441\u0442\u044c \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438\n    data['review_date'] = data['review_date'].apply(lambda x: [x[-2], x[-1]] if len(x)>=3 else x)\n\n    # \u0441\u043b\u0443\u0447\u0430\u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u0438 \u0441 \u0434\u0432\u0443\u043c\u044f \u0434\u0430\u0442\u0430\u043c\u0438\n    data['review_date_1'] = data['review_date'].apply(lambda x: x[0] if len(x)>=1 else None)\n    data['review_date_2'] = data['review_date'].apply(lambda x: x[1] if len(x)==2 else None)\n\n    # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a \u0442\u0438\u043f\u0443 datetime\n    data['review_date_1'] = pd.to_datetime(data['review_date_1'])\n    data['review_date_2'] = pd.to_datetime(data['review_date_2'])\n    \n    \ndef fix_last_rev_outs(data, edge):\n    # \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0434 \u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u0433\u0434\u0435 \u0432\u0440\u0435\u043c\u044f \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441\n    data['no_recent_revs'] = data['days_from_last_rev'].apply(lambda x: 1 if x > edge else 0)\n\n    # \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 edge.\n    data['days_from_last_rev'] = data['days_from_last_rev'].apply(lambda x: edge if x > edge else x)\n    \n    # fill missing values\n    data['days_from_last_rev'] = data['days_from_last_rev'].fillna(data.groupby('city')['days_from_last_rev'].transform('median'))\n    \n    \ndef fix_rev_freq_outs(data, edge):\n    # \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0434 \u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u0433\u0434\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441\n    data['very_seldom_revs'] = data['review_freq'].apply(lambda x: 1 if x > edge else 0)\n\n    # \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 edge.\n    data['review_freq'] = data['review_freq'].apply(lambda x: edge if x > edge else x)\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    data['review_freq'] = data['review_freq'].fillna(data.groupby('city')['review_freq'].transform('median'))\n    \n    \ndef show_month_year(data):\n    # \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043c\u0435\u0441\u044f\u0446\u0430 \u0438 \u0433\u043e\u0434\u044b\n    data['rev_m1'] = pd.to_datetime(data['review_date_1']).dt.month\n    data['rev_m2'] = pd.to_datetime(data['review_date_2']).dt.month\n    data['rev_y1'] = pd.to_datetime(data['review_date_1']).dt.year\n    data['rev_y2'] = pd.to_datetime(data['review_date_2']).dt.year\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n    data['rev_m1'] = data['rev_m1'].fillna(data.groupby('city')['rev_m1'].transform('median'))\n    data['rev_m2'] = data['rev_m2'].fillna(data.groupby('city')['rev_m2'].transform('median'))\n    data['rev_y1'] = data['rev_y1'].fillna(data.groupby('city')['rev_y1'].transform('median'))\n    data['rev_y2'] = data['rev_y2'].fillna(data.groupby('city')['rev_y2'].transform('median'))\n    \n    \ndef show_reviews_and_len(data):\n    # \u0441\u043f\u0435\u0440\u0432\u0430 \u0432\u044b\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0432\u044c\u044e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\n    data['review_1'] = data['reviews'].str.findall(r\"'([\\w\\s]*)'\").str[0]\n    data['review_2'] = data['reviews'].str.findall(r\"'([\\w\\s]*)'\").str[1]\n\n    # Create a column which indicate that review is not avaliable\n    data['empty_rev1'] = data['review_1'].isnull().astype('uint8')\n    data['empty_rev2'] = data['review_2'].isnull().astype('uint8')\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0434\u043b\u0438\u043d\u0443 \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u0445\n    data['review_1_len'] = data.review_1.str.len()\n    data['review_2_len'] = data.review_2.str.len()\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n    data['review_1_len'] = data['review_1_len'].fillna(data.groupby('city')['review_1_len'].transform('mean'))\n    data['review_2_len'] = data['review_2_len'].fillna(data.groupby('city')['review_2_len'].transform('mean'))\n    \n    \ndef show_good_bad_comms(data):\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u043b\u043e\u0432 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445: well, good, excellent, poor, bad, worse, best, but, friendly, nice, ok, great\n    # without 'not'\n    # .lower()\n    check_words = ['well', 'good', 'excellent', 'poor', 'bad', 'worse', 'best', 'but', 'friendly', 'nice', 'ok', 'great', 'lovely']\n\n    for word in check_words:\n        data[word] = 0\n        for i in range(len(data)):\n            if word in data['reviews'][i].lower() and 'not' not in data['reviews'][i].lower():\n                data.loc[i, word] = 1\n            else:\n                pass\n            \n            \n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndef norm_reviews(input_df):\n    df = input_df.copy()\n    mean_rews_by_city = round((df.groupby(['city'])['rev_number'].sum() \/\n                               df.groupby(['city'])['ranking'].max()), 2)\n    mean_rews = df.city.apply(lambda x: mean_rews_by_city[x])\n    mean_rews.name = 'Mean_rews'\n    df = pd.concat([df, mean_rews],axis=1)\n\n    df['Rating_RevNr2'] = df.ranking * df['rev_number']+1\n    df['Rating_RevNr'] = df.standard_ranking * df['rev_number']+1\n    df['rel_numberOfRws'] = (df.standard_ranking)\/(df.ranking)\n    return df\n\n\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438\ndef StandardScaler_column(df, d_col):\n    scaler = StandardScaler()\n    scaler.fit(df[[d_col]])\n    return scaler.transform(df[[d_col]])","ec5362b7":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","8c31ca85":"df_train.info()","27afe6ac":"df_train.head(5)","6b360910":"df_test.info()","5faf3615":"df_test.head(5)","108e01b9":"sample_submission.info()","b73e4577":"sample_submission.head(5)","475dc9a9":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","c293f0d5":"data2 = data.copy()\ndata2.info()","be1870e2":"# Rename columns removing spaces and substituting capital letters\n\ndata2.rename(columns={'Restaurant_id': 'rest_id',\n                   'City': 'city',\n                   'Cuisine Style': 'cuisine_style',\n                   'Ranking': 'ranking',\n                   'Rating': 'rating',\n                   'Price Range': 'price_range',\n                   'Number of Reviews': 'rev_number',\n                   'Reviews': 'reviews',\n                   'URL_TA': 'url_ta',\n                   'ID_TA': 'id_ta'}, inplace=True)","6aebe91e":"data2.sample(5)","195fd095":"data2.reviews[1]","ef600581":"# Plot missing values\ncols = data2.columns\nfig, ax = plt.subplots(figsize=(7, 7))\nsns.heatmap(data2[cols].isnull())\n\n# Show in percents\nfor col in data2.columns:\n    pct_missing = np.mean(data2[col].isnull())\n    print(f'{col} - {round(pct_missing*100)}%')","6ec193ef":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c\n\ndata2.isnull().sum()","516af38f":"data2['rest_id'] = data2['rest_id'].apply(lambda x: float(x[3:]))\ndata2[['rest_id', 'ranking']].corr()","e7c6ef9e":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u043b\u0430\u0433\u0438 \u043f\u043e \u0437\u0430\u043f\u0438\u0441\u044f\u043c, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f\ndata2['empty_rev_number'] = pd.isna(data2['rev_number']).astype('uint8')\ndata2['empty_cuisine'] = pd.isna(data2['cuisine_style']).astype('uint8')\ndata2['empty_price'] = pd.isna(data2['price_range']).astype('uint8')\n\ndata2['reviews'] = data2['reviews'].fillna('[[], []]')\ndata2['empty_reviews'] = (data2['reviews'] == '[[], []]').astype('float64')","2d4bf0ae":"for col in ['empty_rev_number', 'empty_cuisine', 'empty_price', 'empty_reviews']:\n    display(data2[col].value_counts())","df825654":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c.\nfor column in ['empty_rev_number', 'empty_cuisine', 'empty_price', 'empty_reviews']:\n    fig, ax = plt.subplots(figsize = (15, 5))\n\n    sns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\n\n    plt.xticks(rotation=90)\n    ax.set_title(f'Boxplot for {column}')\n\n    plt.show()","dbc1bae5":"# \u041f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e \u043a\u0443\u0445\u043d\u044f\u0445 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0435\u0439 Other.\ndata2['cuisine_style'] = data2['cuisine_style'].fillna(\"['Other']\")","0e39c24f":"data2['cuisine_style'].value_counts()","62cc1932":"data2.info()","1800e6ae":"data2.nunique(dropna=False)","60d1ce1c":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\nfor column in data2.columns:\n    print(column, type(data2[column][0]))","467d83e6":"data2.describe()","e789d075":"for col in ['city', 'cuisine_style', 'reviews', 'url_ta', 'id_ta']:\n    display(data2[col].describe())","5de7917a":"data2.pivot_table(index='city', columns='price_range', values='rating', aggfunc='mean')","20955827":"data2.sample(5)","5af47038":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 rest_id. \u0415\u0441\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f. \ndata2['rest_id'].value_counts()","46038702":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\nplt.rcParams['figure.figsize'] = (13,8)\nds = data2['rest_id'].value_counts().hist(bins=data2['rest_id'].value_counts().max())\nds.set_xlabel('\u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432')\nds.set_ylabel('\u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432')\nds.set_title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 rest_id')","951588e9":"show_chained_rest(data2)\n\n# Check\ndata2['chained_rest'].value_counts()","f5736f5e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043e\u0442\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u0441\u0435\u0442\u0435\u0432\u043e\u043c\u0443.\ncolumn = 'chained_rest'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","d2fc25da":"# \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 id \u0440\u0435\u0441\u0442\u0430\u0440\u0430\u043d\u043e\u0432.\ndata2['id_ta'].value_counts()","547935ef":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ndata2['id_ta'] = data2['id_ta'].apply(lambda x: float(x[1:]))","a6f79bb6":"# \u0412\u0438\u0434\u043d\u043e \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0433\u0440\u0443\u043f\u043f - \u043d\u0430 ID - \u0442\u043e\u0447\u043d\u043e \u043d\u0435 \u043f\u043e\u0445\u043e\u0436\u0435.\ndata2['id_ta'].hist(figsize=(10, 5), bins=100);\nplt.tight_layout()","26163c81":"show_duplicated_id(data2)\n\n# Check\ndata2['dupl_id'].value_counts()","1b8cbc98":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ID_TA.\ncolumn = 'dupl_id'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","a5157ec1":"# \u0417\u0434\u0435\u0441\u044c \u0442\u043e\u0436\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u0430\u043a \u043e\u043d\u0438 \u0441\u043e\u043f\u043e\u0441\u0442\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 \u043d\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b.\ndata2['url_ta'].value_counts()","d0269f63":"# \u0418\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0434\u0435\u043b\u043e \u0441 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u0430\u043c\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432.\n# \u041f\u0440\u0438\u0447\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Ranking \u0443 \u043d\u0438\u0445 \u043d\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435.\ndata2[(data2['url_ta'].map(data2['url_ta'].value_counts()) == 2)].sort_values(by='id_ta')","b41edc55":"# \u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0432 \u041c\u0430\u0434\u0440\u0438\u0434\u0435, \u043d\u043e \u0435\u0441\u0442\u044c \u0438 \u0432 \u0412\u0430\u0440\u0448\u0430\u0432\u0435.\ndata2[(data2['url_ta'].map(data2['url_ta'].value_counts()) == 2)].sort_values(by='id_ta').city.value_counts()","ee472199":"# \u0412 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 url_ta \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u043e id_ta \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0430 \u0442\u0430\u043a \u0436\u0435 id \u0433\u043e\u0440\u043e\u0434\u0430.\n# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\ndata2['city_url'] = data2.url_ta.str.findall(r\"g([\\s\\S]+?)-\").str[0]\ndata2.pivot_table(index=['city', 'city_url'])","3f978f16":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ranking.\ndata2['ranking'].hist(bins=100)","f0f486a9":"# \u041d\u0430 \u044d\u0442\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e ranking \u043d\u0430\u0440\u044f\u043c\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\nfor x in (data2['city'].value_counts())[0:10].index:\n    data2['ranking'][data2['city'] == x].hist(bins=100)\nplt.show()","c16498f2":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043f\u043e \u0440\u0430\u043d\u043a\u0430\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435.\nplt.figure(figsize = (5,5))\nsns.jointplot(data = data2[(data2.city == 'Madrid') & (data2.rating > 0)], x = 'ranking', y = 'rating', kind = 'kde')","65289eaa":"plt.figure(figsize = (5,5))\nsns.jointplot(data = data2[(data2.city == 'London') & (data2.rating > 0)], x = 'ranking', y = 'rating', kind = 'kde')","f8d4ce75":"ranking_normalize(data2)\n\n# check\ndata2.sample(5)","9cb5f7a0":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u0435\u0445 \u0436\u0435 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (data2['city'].value_counts())[0:10].index:\n    data2['standard_ranking'][data2['city'] == x].hist(bins=100)\nplt.show()","3e6ca770":"show_price_range(data2)\n\n# check\ndata2['price_range'].value_counts()","a52ddc27":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ID_TA.\ncolumn = 'price_range'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","c3d5e9f9":"data2[['price_range', 'rating']].corr()","f4676b1e":"sns.jointplot(x='price_range', y='rating', data=data2, kind='reg')","c9f334e5":"data2['city'].value_counts(ascending=True).plot(kind='barh')","65ad3dce":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.\nfig, ax = plt.subplots(figsize = (15, 5))\n\nsns.boxplot(x='city', y='rating',data=data2.loc[data2.loc[:, 'city'].isin(data2.loc[:, 'city'].value_counts().index[:])],ax=ax)\n\nplt.xticks(rotation=90)\nax.set_title('Boxplot for City')\n\nplt.show()","f4df7481":"show_city_dict(data2)","5599e56c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443.\n\nplt.rcParams['figure.figsize'] = (15,15)\nsns.heatmap(data2.corr(), square=True,\n            annot=True, fmt=\".1f\", linewidths=0.1, cmap=\"RdBu\");\nplt.tight_layout()","2af9d890":"# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a-\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 1 \u0447\u0435\u043b \u0434\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\ndata2['rest_per_pop'] = data2['rest_count'] \/ (data2['population'])","135e5cf1":"city_list_shorter(data2)\n\n# check\ndata2['new_city'].value_counts()","19a2e940":"data2.info()","305a8556":"cols = ['Cuisine Style']; data_cuisine = data[cols].copy()\n\n# \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nlist_for_number_of_cuisines = data_cuisine['Cuisine Style'].apply(clean_name)\n\ndata_cuisine['Cuisine Style'] = data_cuisine['Cuisine Style'].apply(clean_name)\ndata_cuisine = data_cuisine.explode('Cuisine Style')\n\n# \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445?\nprint('\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445?', data_cuisine['Cuisine Style'].nunique() - 1)\n\n# \u041a\u0430\u043a\u0430\u044f \u043a\u0443\u0445\u043d\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432? \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u0443\u0445\u043d\u0438 \u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a \u0438\u043b\u0438 \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u043e\u0432.\nprint('\u041a\u0430\u043a\u0430\u044f \u043a\u0443\u0445\u043d\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432?', '\\n', data_cuisine['Cuisine Style'].value_counts()[:1])\n\n# \u041a\u0430\u043a\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435?\n# \u0415\u0441\u043b\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0438\u043f\u0430\u0445 \u043a\u0443\u0445\u043e\u043d\u044c, \u0442\u043e \u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435,\n# \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u0438\u043f \u043a\u0443\u0445\u043d\u0438.\n# \u041e\u0442\u0432\u0435\u0442 \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0442\u0435 \u0434\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\nprint('\u041a\u0430\u043a\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435?', len(data_cuisine) \/ len(data))","20b77d10":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\ndata2['cuisine_style'].value_counts()","ac75c9c1":"# \u043f\u0435\u0440\u0435\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\ndata2['cuisine_style'] = data2['cuisine_style'].apply(lambda x: eval(x))\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u043b-\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.\n# \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0438\u0439 \u0448\u0438\u0440\u043e\u0442\u0443 \u0430\u0441\u0441\u043e\u0440\u0442\u0438\u043c\u0435\u043d\u0442\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ndata2['cuisine_style_number'] = data2['cuisine_style'].apply(lambda x: len(x))","453422fb":"data2['cuisine_style_number']","9f17c5c8":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ID_TA.\ncolumn = 'cuisine_style_number'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","6e281d9b":"group_city_cuisine = data2.groupby(['city'])['cuisine_style'].sum().reset_index()\ngroup_city_cuisine","01c6459e":"c = Counter()\n\nfor cuisine_style in group_city_cuisine['cuisine_style']:\n    for x in cuisine_style:\n        c[x] += 1\n\nprint(c.most_common(10))\nprint()\nprint(c.most_common()[-10:])","cc56f2d1":"# \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0430\u043c\u044b\u0445 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043a\u0443\u0445\u043e\u043d\u044c\n\nmost_common_cuisines(data2)","3eb2f5db":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ID_TA.\ncolumn = 'most_common_cuisine'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","882fc572":"# \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u0430\u043c\u044b\u0435 \u0440\u0435\u0434\u043a\u0438\u0435\n\ntop_unique_cuisines(data2)","681775a9":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ID_TA.\ncolumn = 'top_unique_cuisine'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","a0d390f5":"data2[['rating', 'cuisine_style_number']].corr()","8b0d0f7c":"# \u0424\u043b\u0430\u0433\u0438 (1\/0) isMostPopCusine - \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0441\u0430\u043c\u0430\u044f \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u0430\u044f \u043a\u0443\u0445\u043d\u044f;\n# isMultyCusine - \u043a-\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u0447\u0435\u043c \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c\naverage_cousines_count = np.round(len(data_cuisine) \/ len(data))\ndata2['isMostPopCusine'] = data2['cuisine_style'].apply(lambda x: 1 if 'Vegetarian Friendly' in x else 0)\ndata2['isMultyCusine'] = data2['cuisine_style_number'].apply(lambda x: 1 if  x >= average_cousines_count else 0)\n\n# check\nprint(data2['isMostPopCusine'].value_counts())\nprint()\nprint(data2['isMultyCusine'].value_counts())","03c4425d":"show_veget(data2)\n\n# check\ndata2['veget_cuisine'].value_counts()","841cd1b4":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ID_TA.\ncolumn = 'veget_cuisine'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","5962356f":"show_junk_food(data2)\n\n# check\ndata2['pop_cuisine'].value_counts()","2a869a34":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ID_TA.\ncolumn = 'pop_cuisine'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","633e763e":"show_local_food(data2)\n\n# check\ndata2['local_cuisine'].value_counts()","afe8c654":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 rating \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ID_TA.\ncolumn = 'local_cuisine'\nfig, ax = plt.subplots(figsize = (15, 5))\nsns.boxplot(x=column, y='rating',data=data2.loc[data2.loc[:, column].isin(data2.loc[:, column].value_counts().index[:])],ax=ax)\nplt.xticks(rotation=90)\nax.set_title(f'Boxplot for {column}')\nplt.show()","3728101b":"data2.info()","82f061c0":"plt.rcParams['figure.figsize'] = (10.0, 5.0)\nax1 = data2.plot.scatter(x='rev_number', y='standard_ranking')\nax1.xaxis.get_label().set_visible(True)","b93d9f0a":"data2['rev_number'].isna().sum()","a0779b4a":"number_of_reviews(data2).head(5)","eb850793":"data2['rev_number'].isna().sum()","26893e21":"type(data2['rev_number'][0])","206d77e5":"# \u041a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043e\u0442\u0437\u044b\u0432\u044b\ndata2['NRP'] = data2['rev_number'] \/ data2['population']\n\nfig, ax = plt.subplots(figsize = (15, 5))\n\nsns.boxplot(x='city', y='NRP',data=data2.loc[data2.loc[:, 'city'].isin(data2.loc[:, 'city'].value_counts().index[:])],ax=ax)\n\nplt.xticks(rotation=45)\nax.set_title('NRP for City')\n\nplt.show()","517092a6":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n\nfind_IQR(data2, 'rev_number')","faab646a":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0443 \u043d\u0430\u0441 \u0432\u044b\u0431\u0438\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n\nsum(data2['rev_number'] > 247.5)","f464232f":"# \u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043e\u0442\u0441\u0435\u043a\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e.\n\ndata2['rev_number'].hist(bins=80)","d82db05f":"sum(data2['rev_number'] > 1200)","23652f70":"fix_revs_outs(data2, 1200)\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\n\nprint(data2['rev_number'].describe())\nprint()\nprint(data2['many_revs'].value_counts())","3b622058":"edit_number_of_reviews(data2)","3b88c2d7":"review_dt_extract(data2)\n\n# \u0433\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nprint(\"\u0421\u0430\u043c\u0430\u044f \u0441\u0432\u0435\u0436\u0430\u044f \u0434\u0430\u0442\u0430\", data2[['review_date_1', 'review_date_2']].max().max())\nprint(\"\u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u044f\u044f \u0434\u0430\u0442\u0430\", data2[['review_date_1', 'review_date_2']].min().min())\n\nmax_days = abs(data2['review_date_1'] - data2['review_date_2']).max()\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439\", max_days)","7deff39c":"data2[['review_date_1', 'review_date_2']]","3ee40be8":"data2['reviews'][100]","428ff99d":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n# \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u0441\u0430\u043c\u044b\u043c \u0441\u0432\u0435\u0436\u0438\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0441 \"\u0447\u0430\u0441\u0442\u043e\u0442\u043e\u0439 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\" - \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u0430\u0442 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438\n\ndata2['days_from_last_rev'] = abs(pd.to_datetime(data2['review_date_1']).sub(pd.Timestamp('2021-03-01')).dt.days)\ndata2['review_freq'] = abs((data2['review_date_1'] - data2['review_date_2']).dt.days)","5b9a70e3":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n\ndata2['days_from_last_rev'].plot(kind='hist', grid=True, title='days_from_last_rev')\ndata2['days_from_last_rev'].describe()","84530aa3":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\nfind_IQR(data2, 'days_from_last_rev')","c8394258":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0443 \u043d\u0430\u0441 \u0432\u044b\u0431\u0438\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n\nsum(data2['days_from_last_rev'] > 2500)","24e01c41":"fix_last_rev_outs(data2, 2500)\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\n\nprint(data2['days_from_last_rev'].describe())\nprint()\nprint(data2['no_recent_revs'].value_counts())","115c7125":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438\n\ndata2['review_freq'].plot(kind='hist', grid=True, title='review_freq')\ndata2['review_freq'].describe()","7939eac7":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\nfind_IQR(data2, 'review_freq')","1789a1fc":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0443 \u043d\u0430\u0441 \u0432\u044b\u0431\u0438\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n\nsum(data2['review_freq'] > 600)","971470c0":"fix_rev_freq_outs(data2, 600)\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\n\nprint(data2['review_freq'].describe())\nprint()\nprint(data2['very_seldom_revs'].value_counts())","9efb8577":"display(data2['days_from_last_rev'].isna().sum())\ndisplay(data2['review_freq'].isna().sum())","a5ee9324":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430, \u043e\u0442 \u0440\u0430\u043d\u0433\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u0430\n# \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\nplt.rcParams['figure.figsize'] = (10.0, 5.0)\nax1 = data2.plot.scatter(y='days_from_last_rev', x='rev_number', c='standard_ranking', colormap='viridis_r')\nax1.xaxis.get_label().set_visible(True)","0e1ffe58":"show_month_year(data2)\n\ndisplay(data2['rev_m1'].isna().sum())\ndisplay(data2['rev_m2'].isna().sum())\ndisplay(data2['rev_y1'].isna().sum())\ndisplay(data2['rev_y2'].isna().sum())","4478ba93":"data2['rev_m1'].hist()","7b21ead9":"data2['rev_m2'].hist()","823f988d":"data2['rev_y1'].hist()","2497eeca":"data2['rev_y2'].hist()","1621eb52":"month_year_corr = data2[['rating', 'rev_m1', 'rev_m2', 'rev_y1', 'rev_y2']].corr()\n\nplt.rcParams['figure.figsize'] = (15,15)\nsns.heatmap(month_year_corr, square=True,\n            annot=True, fmt=\".1f\", linewidths=0.1, cmap=\"RdBu\");\nplt.tight_layout()","5a8a6333":"data2.info()","1bbbc13c":"show_reviews_and_len(data2)","d886364b":"# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0432 \u043a\u0430\u043a\u043e\u0439 \u0443 \u043d\u0430\u0441 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u0438\u043d \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\ndata2.review_1.str.len().plot(kind='hist', bins=40)","ea2559c5":"data2.review_2.str.len().plot(kind='hist', bins=40)","1d307185":"data2[['review_1_len', 'review_2_len']].hist()","066acf83":"review_len_corr = data2[['rating', 'review_1_len', 'review_2_len']].corr()\n\nplt.rcParams['figure.figsize'] = (15,15)\nsns.heatmap(review_len_corr, square=True,\n            annot=True, fmt=\".1f\", linewidths=0.1, cmap=\"RdBu\");\nplt.tight_layout()","05aa7785":"data2.info()","a40509b4":"# typical reviews text\n\nfor i in range(1000, 1031):\n    print(data2['reviews'][i])","84c1717d":"def show_good_bad_comms(data):\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u043b\u043e\u0432 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445: well, good, excellent, poor, bad, worse, best, but, friendly, nice, ok, great\n    # without 'not'\n    # .lower()\n    check_words = ['well', 'good', 'excellent', 'poor', 'bad', 'worse', 'best', 'but', 'friendly', 'nice', 'ok', 'great', 'lovely']\n\n    for word in check_words:\n        data[word] = 0\n        for i in range(len(data)):\n            if word in data['reviews'][i].lower() and 'not' not in data['reviews'][i].lower():\n                data.loc[i, word] = 1\n            else:\n                pass","367a3114":"show_good_bad_comms(data2)","7ab10b12":"words_corr = data2[['rating', 'well', 'good', 'excellent', 'poor', 'bad', 'worse', 'best', 'but', 'friendly'\n                              , 'nice', 'ok', 'great', 'lovely']].corr()\n\nplt.rcParams['figure.figsize'] = (15,15)\nsns.heatmap(words_corr, square=True,\n            annot=True, fmt=\".1f\", linewidths=0.1, cmap=\"RdBu\");\nplt.tight_layout()","0d1a3039":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndef norm_reviews(input_df):\n    df = input_df.copy()\n    mean_rews_by_city = round((df.groupby(['city'])['rev_number'].sum() \/\n                               df.groupby(['city'])['ranking'].max()), 2)\n    mean_rews = df.city.apply(lambda x: mean_rews_by_city[x])\n    mean_rews.name = 'Mean_rews'\n    df = pd.concat([df, mean_rews],axis=1)\n\n    df['Rating_RevNr2'] = df.ranking * df['rev_number']+1\n    df['Rating_RevNr'] = df.standard_ranking * df['rev_number']+1\n    df['rel_numberOfRws'] = (df.standard_ranking)\/(df.ranking)\n    return df","7cf050a6":"data2 = norm_reviews(data2)","64506335":"sns.jointplot(x='Mean_rews', y='rating', data=data2, kind='reg')","93fcab97":"sns.jointplot(x='Rating_RevNr', y='rating', data=data2, kind='reg')","daef7cee":"sns.jointplot(x='Rating_RevNr2', y='rating', data=data2, kind='reg')","ed6960bc":"sns.jointplot(x='rel_numberOfRws', y='rating', data=data2, kind='reg')","301ec653":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","ca3a7f0c":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","f53227f2":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","dfc92185":"plt.rcParams['figure.figsize'] = (30,20)\nsns.heatmap(data2.drop(['sample'], axis=1).corr())","ec2002d5":"object_columns = [s for s in data2.columns if data2[s].dtypes == 'object']\n\n# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0440\u043e\u043c\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0438 Sample\nfor i in list(data2.columns):\n    if i not in ['rating','sample'] and i not in object_columns:\n        data2[i] = StandardScaler_column(data2, i)\n        if len(data2[data2[i].isna()]) < len(data2):\n            data2[i] = data2[i].fillna(0)","10494761":"data2.sample(5)","04ee3f5e":"# \u0434\u043b\u044f One-Hot Encoding \u0432 pandas \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - get_dummies. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0430\u0434\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 dummy_na\ncity_dummies = pd.get_dummies(data2['new_city'], prefix='city')\ndata2 = data2.join(city_dummies)\ndata2.head(5)\n\n# \u043e\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u044f dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u043a\u0443\u0445\u043d\u0438 \u043e\u0442\u043a\u0430\u0436\u0435\u043c\u0441\u044f\n# \u043a\u0443\u0445\u043e\u043d\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e, \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0435\u043d\u0430\n# \u0442\u0430\u043a\u0436\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0438\u0434\u044b \u043a\u0443\u0445\u043e\u043d\u044c\n# cuisine_dummies = pd.get_dummies(data2['cuisine_style'].explode(), prefix='cuisine').sum(level=0)\n# data2 = data2.join(cuisine_dummies)","998735f8":"# \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\nDATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\n\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","ec2c60d6":"def preproc_data2(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n    df_output = df_input.copy()\n    \n    # ################### 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 ###################\n    # Rename columns\n    df_output.rename(columns={'Restaurant_id': 'rest_id', 'City': 'city', 'Cuisine Style': 'cuisine_style'\n                              , 'Ranking': 'ranking', 'Rating': 'rating', 'Price Range': 'price_range'\n                              , 'Number of Reviews': 'rev_number', 'Reviews': 'reviews', 'URL_TA': 'url_ta'\n                              , 'ID_TA': 'id_ta'}, inplace=True)\n\n    # \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430\n    df_output['rest_id'] = df_output['rest_id'].apply(lambda x: float(x[3:]))\n    df_output['id_ta'] = df_output['id_ta'].apply(lambda x: float(x[1:]))\n    \n    # ################### 2. NAN ###################\n    df_output['empty_rev_number'] = pd.isna(df_output['rev_number']).astype('uint8')\n    df_output['empty_cuisine'] = pd.isna(df_output['cuisine_style']).astype('uint8')\n    df_output['cuisine_style'] = df_output['cuisine_style'].fillna(\"['Other']\")\n    df_output['empty_price'] = pd.isna(df_output['price_range']).astype('uint8')\n    df_output['reviews'] = df_output['reviews'].fillna('[[], []]')\n    df_output['empty_reviews'] = (df_output['reviews'] == '[[], []]').astype('float64')\n    \n    # ################### 3. Encoding & Feature Engineering ###################\n    # Restaraunt_id\n    show_chained_rest(df_output)\n    \n    # ID_TA\n    show_duplicated_id(df_output)\n    \n    # Ranking\n    ranking_normalize(df_output)\n\n    # Price Range\n    show_price_range(df_output)\n\n    # City\n    show_city_dict(df_output)\n    df_output['rest_per_pop'] = df_output['rest_count'] \/ (df_output['population'])\n    city_list_shorter(df_output)\n    \n    # Cuisine Style\n    cols = ['Cuisine Style']; data_cuisine = df_input[cols].copy()\n    # \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    list_for_number_of_cuisines = data_cuisine['Cuisine Style'].apply(clean_name)\n    data_cuisine['Cuisine Style'] = data_cuisine['Cuisine Style'].apply(clean_name)\n    data_cuisine = data_cuisine.explode('Cuisine Style')\n    \n    df_output['cuisine_style'] = df_output['cuisine_style'].apply(lambda x: eval(x))\n    df_output['cuisine_style_number'] = df_output['cuisine_style'].apply(lambda x: len(x))\n\n    most_common_cuisines(df_output)\n    top_unique_cuisines(df_output)\n    \n    average_cousines_count = np.round(len(data_cuisine) \/ len(df_output))\n    df_output['isMostPopCusine'] = df_output['cuisine_style'].apply(lambda x: 1 if 'Vegetarian Friendly' in x else 0)\n    df_output['isMultyCusine'] = df_output['cuisine_style_number'].apply(lambda x: 1 if  x >= average_cousines_count else 0)\n\n    show_veget(df_output)\n    show_junk_food(df_output)\n    show_local_food(df_output)\n    \n    # Number of Reviews\n    number_of_reviews(df_output)\n    df_output['NRP'] = df_output['rev_number'] \/ df_output['population']\n    fix_revs_outs(df_output, 1200)\n    edit_number_of_reviews(df_output)\n\n    # Review Date\n    review_dt_extract(df_output)\n    df_output['days_from_last_rev'] = abs(pd.to_datetime(df_output['review_date_1']).sub(pd.Timestamp('2021-03-01')).dt.days)\n    df_output['review_freq'] = abs((df_output['review_date_1'] - df_output['review_date_2']).dt.days)\n\n    fix_last_rev_outs(df_output, 2500)\n    fix_rev_freq_outs(df_output, 600)\n\n    show_month_year(df_output)\n    \n    # Reviews\n    show_reviews_and_len(df_output)\n    show_good_bad_comms(df_output)\n    norm_reviews(df_output)\n    \n    # Get-dummies for City\n    city_dummies = pd.get_dummies(df_output['new_city'], prefix='city')\n    df_output = df_output.join(city_dummies)\n\n    # \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n    object_columns = [s for s in df_output.columns if df_output[s].dtypes == 'object']\n\n    # \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0440\u043e\u043c\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0438 Sample\n    for i in list(df_output.columns):\n        if i not in ['rating','sample'] and i not in object_columns:\n            df_output[i] = StandardScaler_column(df_output, i)\n            if len(df_output[df_output[i].isna()]) < len(df_output):\n                df_output[i] = df_output[i].fillna(0)\n    \n    # ################### 4. Clean ################### \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u043f\u0435\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \n    # \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0441 dtypes \"object\" \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u043c \u0438\u0445 \u0438 \u0443\u0434\u0430\u043b\u0438\u043c\n    time_values = ['review_date_1', 'review_date_2']\n    bad_values = ['rest_id', 'rest_count', 'empty_cuisine']\n    df_output.drop(object_columns, axis = 1, inplace=True)\n    df_output.drop(time_values, axis = 1, inplace=True)\n    df_output.drop(bad_values, axis = 1, inplace=True)\n\n    return df_output","96ed2784":"df_preproc = preproc_data2(data)\ndf_preproc.sample(10)","4aadb35f":"df_preproc.info()","dfe2f04a":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.rating.values # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['rating'], axis=1)","c88c74c2":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","c853675d":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","23d4b5f8":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","b7db234c":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","f3e72ec6":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","bd8e6db3":"# It can be observed that the difference in that real ratings are always multiples of 0.5\n# Write a function to round the predicted ratings accordingly\ndef round_rating_pred(rating_pred):\n    if rating_pred <= 0.25:\n        return 0.0\n    if rating_pred <= 0.75:\n        return 0.5\n    if rating_pred <= 1.25:\n        return 1.0\n    if rating_pred <= 1.75:\n        return 1.5\n    if rating_pred <= 2.25:\n        return 2.0\n    if rating_pred <= 2.75:\n        return 2.5\n    if rating_pred <= 3.25:\n        return 3.0\n    if rating_pred <= 3.75:\n        return 3.5\n    if rating_pred <= 4.25:\n        return 4.0\n    if rating_pred <= 4.75:\n        return 4.5\n    return 5.0\n\n\n# Round it\nfor i in range(len(y_pred)):\n    y_pred[i] = round_rating_pred(y_pred[i])","d4844c5d":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","c18d65b8":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","b3875cc9":"test_data.sample(10)","9da32f6f":"test_data = test_data.drop(['rating'], axis=1)","b03c78ad":"sample_submission","318a6497":"predict_submission = model.predict(test_data)","8ae760f1":"predict_submission = list(map(round_rating_pred, predict_submission))","d1ddeae7":"predict_submission","d1df2d7d":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","ce0dc7b2":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","874af890":"\u0420\u0435\u0437\u044e\u043c\u0435 - Cuisine Style: \u041c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 9283 (23.2%). \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'empty_cuisine'. \u041a\u0440\u043e\u043c\u0435 \u044d\u0442\u043e\u0433\u043e, \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 'cuisine_style_number', most_common_cuisine - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0441\u0430\u043c\u044b\u043c\u0438 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u043a\u0443\u0445\u043d\u044f\u043c\u0438, top_unique_cuisine - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0441\u0430\u043c\u044b\u043c\u0438 \u0440\u0435\u0434\u043a\u0438\u043c\u0438 \u043a\u0443\u0445\u043d\u044f\u043c\u0438, isMostPopCuisine - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0441\u0430\u043c\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c \u0432\u0438\u0434\u043e\u043c \u043a\u0443\u0445\u043d\u0438 - Vegetarian Friendly, isMultyCuisine - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0430\u0441\u0441\u043e\u0440\u0442\u0438\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u0443\u0445\u043e\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e, veget_cuisine - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0432\u0435\u0433\u0435\u0442\u0430\u0440\u0438\u0430\u043d\u0441\u043a\u043e\u0439 \u043a\u0443\u0445\u043d\u0438, pop_cuisine - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0444\u0430\u0441\u0442-\u0444\u0443\u0434\u043e\u043c, local_cuisine - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0435\u0439. \u0412 \u043d\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442. \u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u043a\u0443\u0445\u043e\u043d\u044c \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b, [] \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043d\u0435 \u0431\u044b\u043b\u043e.","fd8340ad":"# \u0424\u0443\u043d\u043a\u0446\u0438\u0438","b2291f68":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","fdaa44fe":"\u041f\u043e\u043a\u0430 \u0438\u0434\u0435\u043c \u0434\u0430\u043b\u044c\u0448\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0434\u0430\u043b\u044c\u0448\u0435 \u0435\u0449\u0435 \u043a\u0430\u043a\u0443\u044e-\u043d\u0438\u0431\u0443\u0434\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441\u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043a\u0443\u0445\u043e\u043d\u044c.","510a29da":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \u0438 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!\n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","45f5e758":"\u0420\u0435\u0437\u044e\u043c\u0435 - Reviews: \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043d\u0435\u0442, \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c - 2. \u041d\u043e \u0435\u0441\u0442\u044c 6471 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0441 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u044d\u0442\u043e 16% \u043e\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0412 5680 (14%) \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043e\u0442\u0437\u044b\u0432, \u0445\u043e\u0442\u044f \u0432 \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0434\u0432\u0430.\n\u0421\u043e\u0437\u0434\u0430\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438:\n\n* empty_rev1 - \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \"\u043f\u0443\u0441\u0442\u044b\u0445\" \u043f\u0435\u0440\u0432\u044b\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* empty_rev2 - \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \"\u043f\u0443\u0441\u0442\u044b\u0445\" \u0432\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* review_1_len - \u0434\u043b\u0438\u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n* review_2_len - \u0434\u043b\u0438\u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430","2a9c8f0c":"\u0410 \u043a\u0442\u043e-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0447\u0442\u043e \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044b \u043b\u044e\u0431\u044f\u0442 \u043f\u043e\u0435\u0441\u0442\u044c=) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:","7669ee77":"## Review Date","a51237a2":"\u0420\u0435\u0437\u044e\u043c\u0435 - Price Range: \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 13886 (34.7%). \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 - 'empty_price'. \u0422\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0435\u043d\u044b - 'price_range' (\u043d\u0438\u0437\u043a\u0430\u044f \u0446\u0435\u043d\u0430 - 1, \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 -2 , \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u0446\u0435\u043d\u0430 - 3). \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.","9905b875":"## Iterations\n\nMAE \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432:\n* 0.429 - \u0441 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 object \u0438 \u0449\u0430\u043c\u0435\u043d\u043e\u0439 None-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\n\n\u0412\u0442\u043e\u0440\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f: MAE = 0.214121\n* \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d Ranking - \u043c\u0435\u0441\u0442\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441\u0440\u0435\u0434\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0432\u043e\u0435\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 (\u0432\u0437\u044f\u0442 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u043d\u0435 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438);\n* \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d Number of Reviews - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n* price_range_digit - \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0445\u0430\u0440\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0438\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d;\n* dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0443 \u0433\u043e\u0440\u043e\u0434\u0443;\n* cuisine_style_number - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n* days_from_last_rev - \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0430\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430;\n* review_freq - \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0445\u0430\u0440\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0430\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.\n\n\u0422\u0440\u0435\u0442\u044c\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f: MAE = 0.20881099999999997\n* \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a city_population - \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n\n\u0427\u0435\u0442\u0432\u0435\u0440\u0442\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f: MAE = 0.20695149999999998\n* \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a country_gdp - \u0432\u0430\u043b\u043e\u0432\u044b\u0439 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u0441\u0442\u0440\u0430\u043d\u044b per capita \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n\n\u041f\u044f\u0442\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f: MAE = 0.21191499999999996\n* \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043a\u0443\u0445\u043d\u0438; \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043d\u0438\u0437\u0438\u043b\u0430\u0441\u044c - \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043a\u0443\u0445\u043e\u043d\u044c, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435, \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c \u0434\u043b\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438, \u043d\u0435\u0436\u0435\u043b\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u041a\u041e\u041b\u0418\u0427\u0415\u0421\u0422\u0412\u041e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u043a\u0443\u0445\u043e\u043d\u044c\n\n\u0428\u0435\u0441\u0442\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f: MAE = 0.208522\n* \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a is_capital - \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0433\u043e\u0440\u043e\u0434\u0430-\u0441\u0442\u043e\u043b\u0438\u0446\u044b\n\n\u0421\u0443\u0434\u044c\u043c\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f: MAE = 0.20852300000000001\n* \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, good, excellent, worse, etc)\n\n\n8th: MAE = 0.20163499999999998\n* \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u044b\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n\n9th: MAE = 0.19437687499999998\n* \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u0433\u043e\u0440\u043e\u0434, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 1 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438-\u0444\u043b\u0430\u0433\u0438 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0441\u0430\u043c\u043e\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0438 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043e\u0434\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0438, \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n* \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a ID_TA\n\n10th: MAE = 0.165\n* \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u043a\u043e\u0434\u0430","c80cd770":"\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u044b \u043f\u043b\u043e\u0442\u043d\u043e \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438:\n* NRP - \u043d\u0435\u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430\n* many_revs - \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0438\u043c \u0437\u0430 \u0440\u0430\u043c\u043a\u0438\n* review_date - \u0434\u0430\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n* review_date_1 - \u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n* review_date_2 - \u0434\u0430\u0442\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n* days_from_last_rev - \u043a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439 \u0441 \u0434\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n* review_freq - \u043a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438\n* no_recent_revs - \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0430\u0432\u043d\u043e \u043d\u0435\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* very_seldom_revs - \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0447\u0435\u043d\u044c \u0440\u0435\u0434\u043a\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043e\u0442\u0437\u044b\u0432\u044b\n* rev_m1 - \u043c\u0435\u0441\u044f\u0446 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n* rev_m2 - \u043c\u0435\u0441\u044f\u0446 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n* rev_y1 - \u0433\u043e\u0434 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n* rev_y2 - \u0433\u043e\u0434 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n* mean_Number_of_Reviews_per_city - \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n* max_Number_of_Reviews_per_city - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n* stand_Number_of_Reviews - \u043f\u0440\u043e\u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c\n* reviews_per_each_person - \u043f\u0440\u043e\u043d\u043e\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430\n* reviews_per_city - \u043f\u0440\u043e\u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c","1b811f9c":"\u0414\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432:\n* Label Encoding\n* One-Hot Encoding\n* Target Encoding\n* Hashing\n\n\u0412\u044b\u0431\u043e\u0440 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.\n\u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u0441\u0435\u0439\u0447\u0430\u0441 \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0433\u0440\u0443\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u044d\u0442\u0443 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 One-Hot Encoding:\n![](https:\/\/i.imgur.com\/mtimFxh.png)","b2576f51":"## Reviews","4dc191fb":"\u041f\u043e\u0441\u043c\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043a\u0443\u0445\u043d\u0438 \u0443 \u043d\u0430\u0441 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f, \u0430 \u043a\u0430\u043a\u0438\u0435 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0430\u043c\u044b\u043c\u0438 \u0440\u0435\u0434\u043a\u0438\u043c\u0438.\n","4778585a":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","7b946290":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","03071a25":"# Cleaning and Prepping Data\n\u041e\u0431\u044b\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u0443\u0447\u0443 \u043c\u0443\u0441\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0432 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442. \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u044d\u0442\u0430\u043f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0447\u0442\u0438 \u043b\u044e\u0431\u043e\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.   \n![](https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/data-cleaning.png)","cf4b10fa":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e Ranking \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0437-\u0437\u0430 \u043c\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435.","60d274a3":"## Get-dummies","c8cc7280":"\u0422\u0430\u043a, \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043c\u0435\u0449\u0435\u043d\u0430 \u0432\u043f\u0440\u0430\u0432\u043e, \u0445\u0432\u043e\u0441\u0442 \u0434\u043b\u0438\u043d\u043d\u044b\u0439 \u0438 \u0443\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u0443\u0431\u044b\u043b\u044c \u0433\u0434\u0435-\u0442\u043e \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 1200. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 1200.","e847e49a":"## ID_TA","db6f5ab0":"\u0412 \u041c\u0430\u0434\u0440\u0438\u0434\u0435 \u0438 \u041c\u0438\u043b\u0430\u043d\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043d\u0438\u0436\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432. \u0412 \u0411\u0430\u0440\u0441\u0435\u043b\u043e\u043d\u0435, \u041c\u0438\u043b\u0430\u043d\u0435 \u0438 \u041b\u0438\u043e\u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043d\u0438\u0437\u043a\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 - \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u043b\u0435\u0439 \u043a \u043d\u0438\u0436\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435. \u0412 \u0411\u0440\u044e\u0441\u0441\u0435\u043b\u0435 \u0438 \u041b\u0438\u043e\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a - \u043d\u0438\u0436\u043d\u0438\u0439 \u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.","d5780861":"\u041f\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u043c\u0443, \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u044d\u0442\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u043f\u043e\u0434\u0444\u0443\u043d\u043a\u0446\u0438\u0438 (\u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u041e\u041e\u041f).","ed95f76b":"## \u0421\u0430\u043c\u044b\u0439 \u0430\u043a\u0443\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0437\u044b\u0432, \u0441\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u043e\u0442\u0437\u044b\u0432\u044b","e7c385bf":"# EDA \n[Exploratory Data Analysis](https:\/\/ru.wikipedia.org\/wiki\/\u0420\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439_\u0430\u043d\u0430\u043b\u0438\u0437_\u0434\u0430\u043d\u043d\u044b\u0445) - \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u043c\u044b \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438, \u0438\u0449\u0435\u043c \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438, \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0438, \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u043b\u0438 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438.\n\u0412 \u043e\u0431\u0449\u0435\u043c \u0446\u0435\u043b\u044c \u044d\u0442\u043e\u0433\u043e \u044d\u0442\u0430\u043f\u0430 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043d\u0430\u043c \u0434\u0430\u0442\u044c \u0438 \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435, \u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043b\u044c\u043d\u044b\u0435 \u0438, \u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c, \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0443\u0447\u0448\u0435.\n![](https:\/\/miro.medium.com\/max\/2598\/1*RXdMb7Uk6mGqWqPguHULaQ.png)","c3b969b2":"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","26837302":"# Data Preprocessing\n\u0422\u0435\u043f\u0435\u0440\u044c, \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430, \u0437\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u0432\u0441\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e.","05e6830d":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u043e\u0432","85d9793b":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","5e2a39f6":"\u0420\u0435\u0437\u044e\u043c\u0435 - City: \u0411\u0435\u0437 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a. \u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Feature Engineering \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0433\u043e\u0440\u043e\u0434\u0430 \u043f\u043e \u0442\u0438\u043f\u0443 dummies \u0434\u043b\u044f \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0434\u0435\u0441\u044c \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 Other (\u043f\u0440\u0438\u0437\u043d\u0430\u043a new_city).\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438:\n\n* is_capital - \u0441\u0442\u043e\u043b\u0438\u0446\u0430\n* population - \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 (\u0442\u044b\u0441. \u0447\u0435\u043b.)\n* standard_ranking - \u0441\u0440\u0435\u0434\u043d\u0435\u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u044b\u0439 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0440\u0430\u043d\u043a\n* country - \u0441\u0442\u0440\u0430\u043d\u0430 (\u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u0435\u0435 \u0434\u043b\u044f \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c)\n* country_gdp - \u0432\u0430\u043b\u043e\u0432\u044b\u0439 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u0441\u0442\u0440\u0430\u043d\n* purchasing power - \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n* tourists - \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n* rest_count - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n* rest_per_pop - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 1 \u0436\u0438\u0442\u0435\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430","44b4e4b7":"['rest_id']\n\u041d\u0435 \u0443\u0432\u0435\u0440\u0435\u043d, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u0434\u043d\u0430\u043a\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0432\u0438\u0434\u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c ranking. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e.","791349a3":"\u041e\u0442\u043c\u0435\u0447\u0430\u0435\u043c \u0441\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438:\n* rest_id & ranking\n* sample & rating (\u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438)\n* empty_cuisine & empty_price (\"\u043f\u043b\u043e\u0445\u0430\u044f\" \u043d\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u043e\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445?)\n* ranking, rest_count, population, tourists (\u0432\u0441\u0451 \u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u0445 \u0433\u043e\u0440\u043e\u0434\u0430)","a4f833a7":"# Model \n\u0421\u0430\u043c ML","8cfc0edd":"\u0412 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 Feature Engineering \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u0444\u043b\u0430\u0433\u0438 \u043f\u043e \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044e \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u043a\u0440\u0430\u0448\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u0441\u043e\u0431\u043e\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.","8425e2ff":"## Price Range\n\n\u0423\u0440\u043e\u0432\u043d\u0438 \u0446\u0435\u043d \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u0441\u044f (\u043e\u0442 \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u043a \u0431\u043e\u043b\u044c\u0448\u0435\u043c\u0443): 1, 2-3, 4","b973d52c":"## Ranking","f6bb3da4":"## URL_TA","7fd4298c":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","0df0e5f9":"\u0412 \u043d\u0430\u0448\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u043c\u0441\u044f \u043e\u0431\u0449\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043c\u044b \u0432\u0438\u0434\u0438\u043c 10 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (sample \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0438\u0441\u043a\u0443\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430). \u0422\u0440\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u043c\u0438. \u0427\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u043b\u044c\u0448\u0435, \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043b\u0438 \u043e\u043d\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u0442.\u0434. \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u041f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u0430\u043a \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u0442\u0441\u0443\u0441\u0442\u0432\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0432\u0430\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.","c3d3f6c0":"# What's next?\n\u0418\u043b\u0438 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n* \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u044b \u0444\u043e\u0440\u043c\u0430\u0442\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n* \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0442\u0432\u043e\u0440\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u0432\u0435\u0441\u044c\u043c\u0430 \u0443\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439! \u0423\u0434\u0430\u0447\u0438 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438!\n","dbd3e09b":"## Number of Reviews","919660b0":"### \u0418 \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u043e\u0438\u0445 \u043b\u044e\u0431\u0438\u043c\u044b\u0445 - [\u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f)\n\u041d\u0430 \u044d\u0442\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0443\u0436\u0435 \u0441\u0435\u0439\u0447\u0430\u0441 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","d0c16887":"\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043a\u0443\u0445\u043d\u0438 \u0432\u0445\u043e\u0434\u044f\u0442 \u0442\u043e\u043f-10, \u043a\u0430\u043a \u0441\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0438 \u043a\u0430\u043a \u0441\u0430\u043c\u044b\u0435 \u0440\u0435\u0434\u043a\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f.","3815c302":"\u0421\u043e\u0433\u043b\u0430\u0441\u043d\u043e TripAdvisor, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435.","0a5d8c14":"\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438?\n\n\u041a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 city. \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e get_dummies, \u0442\u0430\u043a \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u043e\u043f-10 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 other \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c.\n\n\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0441 cuisine_style, \u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0442\u0430\u043c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435.","3f2d5a25":"## \u041c\u0435\u0441\u044f\u0446 \u0438 \u0433\u043e\u0434 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430","fc20dcbd":"# import","7299cdaa":"## rest_id","5f39ab08":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","f9389b88":"# Predict TripAdvisor Rating\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor\n**\u041f\u043e \u0445\u043e\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0438:**\n* \u041f\u0440\u043e\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c\u00a0\u0440\u0430\u0431\u043e\u0442\u0443 \u0441 pandas\n* \u0423\u0447\u0438\u043c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Kaggle Notebooks\n* \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n* \u0423\u0447\u0438\u043c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 (Nan)\n* \u0417\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0432\u0438\u0434\u0430\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c\u00a0[Feature Engineering](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435_\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) (\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438)\n* \u0418 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0437\u0430\u0442\u0440\u043e\u043d\u0435\u043c ML\n* \u0418 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435...   ","a934e0e3":"\u0414\u0430, \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0435\u0441\u0442\u044c. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a rest_id \u043f\u043e\u0442\u043e\u043c \u0443\u0434\u0430\u043b\u0438\u043c. \u041f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c, \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","ff98a5e5":"## Cuisine Style","e18f5d4b":"## Good and Bad comments ","886ddfbb":"# DATA","f49c79c4":"\u041d\u0438\u0436\u0435 \u0447\u0438\u0441\u043b\u043e - \u0432\u044b\u0448\u0435 \u0440\u0430\u043d\u0433. \u041e\u043d \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c\u0438 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435. \u0422.\u0435. \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0435\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441 \u043d\u0430\u0438\u0432\u044b\u0441\u0448\u0438\u043c \u0440\u0430\u043d\u0433\u043e\u043c, \u043d\u043e \u043d\u0435 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c.\n\n\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?","ae8b0e67":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0435\u0441\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438:\n\n* Restaurant_id\n* City\n* Ranking\n* Rating\n* Reviews\n* URL_TA\n* ID_TA\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\n\n* Ranking\n* Rating\n* Number of Reviews\n\n\u041f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u043e\u043b\u0435\u0435 \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 (None) \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u043e \u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043d\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b) \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0443\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u0447\u0451\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u044d\u0442\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u2014 \u044d\u0442\u043e \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c. \u0422\u0430\u043a \u0447\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 object-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u043e\u0441\u043d\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043d\u0438\u0445 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435.","27ad2812":"\u0420\u0435\u0437\u044e\u043c\u0435 - Number of Reviews 2543 (6.4%) \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.\n\n\u041f\u0440\u043e\u0432\u0435\u043b\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e.\n\n\u0412\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043c\u043d\u043e\u0433\u043e. \u0417\u0430\u043c\u0435\u043d\u0438\u043b. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043b \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","1c7a9c68":"\u041f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 rest_id \u043c\u044b \u0441\u043c\u043e\u0433\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0447\u0442\u043e \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0432 \u0441\u0435\u0442\u0438.","06103497":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","1e68dbbc":"\u041f\u0440\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430\u0448\u043b\u0438 74 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u043c\u0438\u0441\u044f id_ta","a6fd53a6":"## City","eec25263":"\u0421\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043e","40c11077":"## \u041d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432","1b139a41":"\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043a\u0443\u0445\u043d\u0438 \u0432\u0445\u043e\u0434\u044f\u0442 \u0442\u043e\u043f-10, \u043a\u0430\u043a \u0441\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0438 \u043a\u0430\u043a \u0441\u0430\u043c\u044b\u0435 \u0440\u0435\u0434\u043a\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f.\n\n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0438\u043c\u0435\u0435\u0442 \u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u043a\u0443\u0445\u043d\u044e, \u0432\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0432 \u0442\u043e\u043f-10 \u043f\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u043e \u0440\u0435\u0434\u043a\u043e\u0441\u0442\u0438.","f5907087":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**"}}