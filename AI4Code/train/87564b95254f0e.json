{"cell_type":{"86130133":"code","4fc0fac3":"code","d26e8254":"code","9a52faa3":"code","85e4871a":"code","deb3d4ba":"code","988d9b19":"code","8fb8695e":"code","5e3d3862":"code","57161e2c":"code","2f358c6a":"code","dc9bc31b":"code","27644be1":"code","42f017b6":"code","c259b755":"code","33de51cb":"code","cca04b48":"code","803edc23":"code","20c29cb4":"markdown","d39dd2b5":"markdown","4f25f5d7":"markdown","6112c7d7":"markdown","2397a7d5":"markdown","25c28b7a":"markdown","cf4bc63f":"markdown","73287227":"markdown","2cf6526b":"markdown","ce27c778":"markdown","48b9afaf":"markdown","65e71793":"markdown","fadaf79a":"markdown","2b09d6a4":"markdown","970778aa":"markdown","26754f8c":"markdown"},"source":{"86130133":"#first import the module pandas and numpy\nimport pandas as pd#this module provide data frame \nimport numpy as np","4fc0fac3":"#import the data using pandas data frame\ntest ='..\/input\/test.csv'\ntrain = '..\/input\/train.csv'\ndf = pd.read_csv(test)\ndf1 = pd.read_csv(train)\n#to visualize all number of rows and columns to be displayed to preprocess the data\npd.set_option('display.max_rows', 1500)\npd.set_option('display.max_columns', 1500)","d26e8254":"#some missing data have continous values of numerical data so to fill the value with median values\nmedian = df['LotFrontage'].median()\nmedian1 = df['BsmtUnfSF'].median()\nmedian2 = df['BsmtUnfSF'].median()\nmedian3 = df['GarageArea'].median()","9a52faa3":"#check through every rows and columns for missing values and fill according, some are categorical data and some are numeric data\nN = 'None'\ndf['LotFrontage'].fillna(median, inplace=True)\nprint (df['MasVnrType'].fillna(N ,inplace=True))\nprint (df['Alley'].fillna(N ,inplace=True))\nprint (df['Utilities'].fillna('AllPub' ,inplace=True))\nprint (df['MSZoning'].fillna('RH' ,inplace=True))\nprint (df['Exterior1st'].fillna('VinylSd' ,inplace=True))\nprint (df['Exterior2nd'].fillna('HdBoard' ,inplace=True))\nprint (df['MasVnrType'].fillna(N ,inplace=True))\nprint (df['MasVnrArea'].fillna(0 ,inplace=True))\nprint (df['FireplaceQu'].fillna(N ,inplace=True))\nprint (df['GarageType'].fillna(N, inplace=True))\nprint (df['GarageYrBlt'].fillna(N, inplace=True))\nprint (df['GarageFinish'].fillna(N, inplace=True))\nprint (df['GarageQual'].fillna(N, inplace=True))\nprint (df['GarageCond'].fillna(N, inplace=True))\nprint (df['PoolQC'].fillna(N, inplace=True))\nprint (df['Fence'].fillna(N, inplace=True))\nprint (df['MiscFeature'].fillna(N, inplace=True))\nprint (df['BsmtQual'].fillna(N, inplace=True))\nprint (df['BsmtCond'].fillna(N, inplace=True))\nprint (df['BsmtExposure'].fillna(N, inplace=True))\nprint (df['BsmtFinType1'].fillna(N, inplace=True))\nprint (df['BsmtFinType2'].fillna(N, inplace=True))\nprint (df['BsmtFinSF1'].fillna(0, inplace=True))\nprint (df['BsmtFinSF2'].fillna(0, inplace=True))\nprint (df['BsmtUnfSF'].fillna(median1, inplace=True))\nprint (df['TotalBsmtSF'].fillna(median2, inplace=True))\nprint (df['BsmtFullBath'].fillna(0, inplace=True))\nprint (df['BsmtHalfBath'].fillna(0, inplace=True))\nprint (df['KitchenQual'].fillna('TA', inplace=True))\nprint (df['Functional'].fillna('Typ', inplace=True))\nprint (df['GarageCars'].fillna(1, inplace=True))\nprint (df['GarageArea'].fillna(median3, inplace=True))\nprint (df['SaleType'].fillna('WD', inplace=True))","85e4871a":"print (df.isnull().sum().sum())\n#find duplicate\nprint(df.duplicated().sum())","deb3d4ba":"print (df1 ['LotFrontage'])\nprint (df1 ['LotFrontage'].isnull())\n\nprint(df1.isnull().sum())\n\nmedian = df1['LotFrontage'].median()\nprint (median)\ndf1['LotFrontage'].fillna(median, inplace=True)\nN = 'None'\nprint (df1['MasVnrType'].fillna(N ,inplace=True))\nprint (df1['Alley'].fillna(N ,inplace=True))\nprint (df1['MasVnrArea'].fillna(0 ,inplace=True))\nprint (df1['FireplaceQu'].fillna(N ,inplace=True))\nprint (df1['GarageType'].fillna(N, inplace=True))\nprint (df1['GarageYrBlt'].fillna(N, inplace=True))\nprint (df1['GarageFinish'].fillna(N, inplace=True))\nprint (df1['GarageQual'].fillna(N, inplace=True))\nprint (df1['GarageCond'].fillna(N, inplace=True))\nprint (df1['PoolQC'].fillna(N, inplace=True))\nprint (df1['Fence'].fillna(N, inplace=True))\nprint (df1['MiscFeature'].fillna(N, inplace=True))\nprint (df1['BsmtQual'].fillna(N, inplace=True))\nprint (df1['BsmtCond'].fillna(N, inplace=True))\nprint (df1['BsmtExposure'].fillna(N, inplace=True))\nprint (df1['BsmtFinType1'].fillna(N, inplace=True))\nprint (df1['BsmtFinType2'].fillna(N, inplace=True))\nprint (df1['Electrical'].fillna('SBrkr', inplace=True))\n#find missing total of missing values\nprint (df1.isnull().sum())\nprint (df1.isnull().values.any())\nprint (df1.isnull().sum().sum())\n#find duplicate\nprint(df1.duplicated().sum())","988d9b19":"def convert_non_numerical_data(df):\n      columns = df.columns.values\n      \n      for column in columns:\n            text_to_val = {}\n            def convert_val(val):\n                  return text_to_val[val]\n            if df[column].dtype != np.int64 and df[column].dtype !=np.float64:\n                  unique_element = set(df[column].values.tolist())\n                  x=0\n                  for unique in unique_element:\n                        if unique not in text_to_val:\n                              text_to_val[unique]=x\n                              x+=1\n                  df[column]=list(map(convert_val, df[column]))\n      return df \ndf = convert_non_numerical_data(df)   \nprint(df) ","8fb8695e":"def convert_non_numerical_data(df1):\n      columns = df1.columns.values\n      \n      for column in columns:\n            text_to_val = {}\n            def convert_val(val):\n                  return text_to_val[val]\n            if df1[column].dtype != np.int64 and df1[column].dtype !=np.float64:\n                  unique_element = set(df1[column].values.tolist())\n                  x=0\n                  for unique in unique_element:\n                        if unique not in text_to_val:\n                              text_to_val[unique]=x\n                              x+=1\n                  df1[column]=list(map(convert_val, df1[column]))\n      return df1 \ndf1 = convert_non_numerical_data(df1)   \nprint(df1) ","5e3d3862":"#split the data into explonatory variable and response variable\nx =df1.iloc[:,:-1].values\ny =df1.iloc[:,80].values\ny = y.reshape(-1,1)","57161e2c":"#import sklearn modules\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import SelectFromModel\n#from sklearn.grid_search import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import r2_score, mean_squared_error","2f358c6a":"#implementing algorithm\nregr=RandomForestRegressor().fit(x,y)\n#feature selection\nfeature_selection = SelectFromModel(regr,threshold=0.019)\n#fitting algorithm with new selected features\nreg = RandomForestRegressor(criterion='mae', max_depth=18,\n           max_features='sqrt',\n           n_estimators=270, n_jobs=-1,\n           random_state=42)\n\n#building pipeline\nmodel = Pipeline([('fs',feature_selection),('reg',reg)])","dc9bc31b":"#these are the list of hyper parameter to be optimized\ncrit_option = ['mse','mae']\nmax_feature_option = ['sqrt','log2','auto']\nmax_depth_option = list(range(12,32))\n\nparam_grid = dict(reg__criterion =crit_option, reg__max_depth= max_depth_option,\n                  reg__max_features = max_feature_option)\n\nprint(param_grid)\n","27644be1":"#grid = GridSearchCV(model, param_grid,cv=5)\n#grid.fit(x,y)\n\n#grid.grid_scores_\n\n#print(grid.best_params_)\n#print(grid.best_score_)\n","42f017b6":"regr = RandomForestRegressor( criterion='mae', max_depth=26,\n           max_features='sqrt', n_estimators=270, n_jobs=-1,\n           random_state=42).fit(x,y)","c259b755":"feature_selection = SelectFromModel(regr,threshold=0.019,prefit = True)\nX_new = feature_selection.transform(x)\nmask = feature_selection.get_support(indices = True)\nprint(X_new.shape)\nmask = feature_selection.get_support(indices=True)","33de51cb":"from sklearn.cross_validation import train_test_split as ts\n\nx_train, x_test , y_train , y_test = ts(X_new,y,test_size= 0.3,random_state = 42)","cca04b48":"reg = RandomForestRegressor(bootstrap=True, criterion='mae', max_depth=26,\n           max_features='sqrt', n_estimators=270, n_jobs=-1,random_state=42)\nreg.fit(x_train,y_train)\npredict = reg.predict(x_test)","803edc23":"print(regr.feature_importances_)\nprint('mse', mean_squared_error(y_test,predict))\nprint('accuracy : %.5f' % r2_score(y_test, predict))","20c29cb4":"## CONVERT TO NUMERICAL DATA","d39dd2b5":"# DATA PREPROCESSING","4f25f5d7":"#### **            1: DATA PREPROCESSING\n####    **         2: HYPER PARAMETER OPTIMIZATION\n####      **       3: USING RANDOM FOREST","6112c7d7":"# HYPER PARAMETER OPTIMIZATION","2397a7d5":"### thank you, Have a nice day\n\n##### BY: Jackson paul.T","25c28b7a":"### Feed the data to the Random Forest algorithm","cf4bc63f":"## TOPICS:","73287227":"## HANDLING MISSING DATA","2cf6526b":"# **HOUSE PRICE PREDICTION USING RANDOM FOREST WITH HYPER PARAMETER OPTIMIZATION**","ce27c778":"### In same way find the prediction for the originally given test data","48b9afaf":"## FEATURE SELECTION","65e71793":"#### '''Data will not always comes in numeric form, you should need to convert categorical data into numerical data before feeding them to an algorithm '''","fadaf79a":"### Note: This may take long time to run depending on your cpu","2b09d6a4":"### For cross_validation our result we must split our data to training and test set","970778aa":"### Feature selection is essential because you cannot feed all the given data to algorithm, which may lead to overfitting the model result in poor performance","26754f8c":"###  Accuracy is good, it still can be improved better, Hope its usefull"}}