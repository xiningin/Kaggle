{"cell_type":{"6a9c105b":"code","177b64f8":"code","0cf58782":"code","5216515c":"code","59508e2e":"code","99a0042c":"code","9f0f9624":"code","f68bbe54":"code","181e0bc4":"code","5b80201d":"code","63945d12":"code","9a55b1b4":"markdown","20fb85cc":"markdown","1527485a":"markdown","f0870fff":"markdown","8165f115":"markdown","9e5819d4":"markdown","d5a25f32":"markdown","591189ec":"markdown","d6819645":"markdown","6101d4b9":"markdown"},"source":{"6a9c105b":"import numpy as np \nimport pandas as pd\n\nprint('numpy version : ', np.__version__)\nprint('pandas version : ', pd.__version__)","177b64f8":"train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv').sample(1000)","0cf58782":"target = train['target']\n\ntrain = train.drop(['target'], axis=1)","5216515c":"from sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\n\n\ndef train_model(model_cls, X, y):\n    model = model_cls() \n    train_scores, valid_scores = [], []\n    \n    skf = KFold(n_splits=5, shuffle=True)\n\n    for tr_idx, va_idx in skf.split(X, y):\n        X_train, X_val = X.iloc[tr_idx], X.iloc[va_idx]\n        y_train, y_val = y[tr_idx], y[va_idx]\n        model.fit(X_train, y_train)\n        \n        pred = model.predict(X_train)\n        train_score = roc_auc_score(y_train, pred)\n        \n        pred = model.predict(X_val)\n        valid_score = roc_auc_score(y_val, pred)\n        \n        train_scores.append(train_score)    \n        valid_scores.append(valid_score)\n        \n    \n    print('train score mean : ',np.mean(train_scores))\n    print('valid score mean : ',np.mean(valid_scores))\n    return train_scores, valid_scores","59508e2e":"dt_train, dt_val = train_model(DecisionTreeRegressor, train, target.values)\nsvm_train, svm_val = train_model(SVR, train, target.values)\nrf_train, rf_val = train_model(RandomForestRegressor, train, target.values)\nada_train, ada_val = train_model(AdaBoostRegressor, train, target.values)","99a0042c":"raw_data = np.vstack([dt_train, dt_val,\n           svm_train, svm_val,\n           rf_train, rf_val,\n           ada_train, ada_val]).T\n\nraw_data = np.vstack([raw_data, raw_data.mean(axis=0)])\nprint(raw_data)","9f0f9624":"df = pd.DataFrame(raw_data,\n                  index=pd.Index([f'Fold {idx}' for idx in range(5)]+['Mean'], name='#:'),\n                  columns=pd.MultiIndex.from_product([['Decision Tree', 'SVM', 'Random Forest', 'AdaBoost'],\n                                                      ['Train', 'Valid']], \n                                                     names=['Model:', 'Train\/Split']))\ndisplay(df)\ns = df.style.format('{:.3f}')\n","f68bbe54":"# Color Reference: https:\/\/2colors.colorion.co\/\nmain_color = '#00539C'\nsub_color = '#FFD662'\n\n# Cell\ncell_hover = {\n    'selector': 'td:hover',\n    'props': [('background-color', sub_color),\n              ('color', main_color),\n              ('font-weight', 'bold')\n             ]\n}\n\n# Index Explaination\nindex_names = {\n    'selector': '.index_name',\n    'props': [('font-style', 'italic'), \n              ('color', 'darkgrey'),  \n              ('font-weight', 'normal')]\n}\n\n# header\nheaders = {\n    'selector': 'th:not(.index_name)',\n    'props': [('background-color', main_color),\n              ('color', 'white')]\n}\n\nheaders_head = {\n    'selector': 'th.col_heading', \n    'props': [('text-align', 'center')]\n}\n\n# border\nborder_head1 = {\n    'selector': 'th.col_heading.level0', \n    'props': [\n        ('font-weight', 'bold'),\n        ('color', sub_color),\n        ('border-left', '1px solid white'),\n    \n    ]\n}\n\nborder_head2 = {\n    'selector': 'th:nth-child(2n+2)', \n    'props': [('border-left', '1px solid white')]\n}\n\nborder_body = {\n    'selector': 'td:nth-child(2n+2)', \n    'props': [('border-left', f'1px solid {main_color}')]\n}\n\nborder_footer1 = {\n    'selector': 'tr:last-child td', \n    'props': [('border-top', f'1px solid {main_color}')]\n}\n\nborder_footer2 = {\n    'selector': 'tr:last-child td', \n    'props': [('border-top', f'1px solid {main_color}')]\n}\n\nborder_footer3 = {\n    'selector': 'tr:last-child', \n    'props': [('background-color', main_color+'20')]\n}","181e0bc4":"s =s.set_table_styles([cell_hover, index_names, headers, headers_head, \n                    border_head1, border_head2, border_body, \n                    border_footer1, border_footer2, border_footer3])\ns","5b80201d":"s = s.set_caption(\"Benchmark Result(DT, SVM, RF, ADA)\")\\\n .set_table_styles([{\n     'selector': 'caption',\n     'props': [('caption-side', 'bottom'),\n               ('color', 'gray'),\n              ]\n }], overwrite=False)\n\ns","63945d12":"print(s.render())","9a55b1b4":"### 1-2. Raw Data -> DataFrame\n\nThe result is bundled using numpy's stack and overlaid with a DataFrame.","20fb85cc":"### 1-4. Apply Styles\n\nStyles can be applied with set_table_styles and passed as a list.","1527485a":"Save the result as:","f0870fff":"### 1-5. Add Caption (Figure Discription)\n\nYou can also add descriptive text below.","8165f115":"Creates a groupby type DataFrame using MultipleIndex of DataFrame.","9e5819d4":"For fast implementation, only 1000 random data were used.","d5a25f32":"## 1. K-Fold Benchmark Visualization\n\n### 1-1. Result\n\nLet's create a total of 4 models.\n\nFor demonstration, I used Decistion Tree, SVM, RandomForest, AdaBoost.\n\nThe score is RMSE.","591189ec":"## Benchmark Visualization with Pandas\n\n> Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\nThis notebook is an introduction to how to neatly visualize benchmarks on Jupyter using Pandas.\n\n![\u1109\u1173\u110f\u1173\u1105\u1175\u11ab\u1109\u1163\u11ba 2021-08-23 \u110b\u1169\u110c\u1165\u11ab 12.25.37.png](attachment:0509fc53-67e3-4174-9292-7ef95daf3471.png)\n\n**To become an expressive data scientist.**\n\n### Reference\n\n- [Table Visualization](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/style.html)\n\n## 0. Preprocessing\n\n","d6819645":"### 1-6. Export as HTML (or Excel)\n\n`.render()` method to extract it to html.","6101d4b9":"### 1-3. Design with CSS\n\nFrom here, you will need some web development knowledge.\n\nLargely, you need to decorate the css of td, tr, and th tags.\n\n- `th` : each table header\n- `tr` : each table row\n- `td` : each cell\n\nI used some more css knowledge here, please refer to the links below.\n\n### Further Reading\n\nYou can learn html\/css with the following text.\n\n- [HTML Tables](https:\/\/www.w3schools.com\/html\/html_tables.asp)\n- [CSS :hover Selector](https:\/\/www.w3schools.com\/csSref\/sel_hover.asp)\n- [CSS :first-child Selector](https:\/\/www.w3schools.com\/cssref\/sel_firstchild.asp)\n- [CSS :last-child Selector](https:\/\/www.w3schools.com\/cssref\/sel_last-child.asp)\n"}}