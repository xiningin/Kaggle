{"cell_type":{"b30d50dd":"code","6f5081cb":"code","74f1deaf":"code","f84df39f":"code","b8540381":"code","eb8cb260":"code","b1c122a8":"code","09f83094":"code","abd94f50":"code","438ccd25":"code","fc5f17b5":"code","747623ed":"code","fa64c54d":"code","bbcc8415":"code","7cd43bdc":"code","91a32503":"code","fedfdbe8":"code","f828c9d0":"code","8d0c2c99":"code","2a55522e":"code","90d8036d":"code","a0707cd5":"code","d9082e07":"code","b2bcbf26":"code","41c84f4d":"code","718dca3e":"code","12881fc5":"code","672e28aa":"code","0453301f":"code","34939eef":"code","c3d79c04":"code","9192f20c":"code","36624a8a":"code","378f8dd1":"code","b8b9f745":"code","5ce771bb":"code","924417d9":"code","91a6e618":"code","af5c5e68":"code","69d8cf3c":"code","2c3e64a3":"code","5089748c":"code","018af356":"code","9c54f756":"code","f79d916a":"code","2045eb8e":"code","f698ca83":"code","bbcea8c2":"code","c227572c":"code","2aef7b27":"code","652aceab":"code","b638442b":"code","8bdf2fe8":"code","86f49a91":"code","7b49c971":"code","d66fe252":"code","d61f0e61":"code","8de689db":"code","c42d31a8":"code","c7166e8f":"code","4e846416":"code","c82a832d":"code","491b97f8":"code","fa8f31ba":"code","c2f3086a":"code","46d369e5":"code","cd8395d1":"code","b4b6a945":"code","f35e951f":"code","99d470f2":"code","41180892":"code","a386c0e9":"code","b148ebd1":"code","69b68dcf":"code","92fd30b4":"code","a068701f":"code","5104c40e":"code","9723b504":"code","8b938a12":"code","bf33b825":"code","6e708849":"code","9e1bdb3c":"code","ce0b91cd":"code","647a142d":"code","42405c2f":"code","12e76f83":"code","475a1248":"code","a623eabf":"code","1e03af7b":"code","d47a1431":"code","5e821652":"code","9edb8343":"code","32dcff14":"code","a4329838":"code","1124ca1c":"code","6e936bf7":"code","52a333aa":"code","ab2774ac":"code","c803fdfb":"code","54f1a99a":"code","35850f18":"code","8e12b786":"code","0ed186dc":"code","ca370504":"code","b2ff05a9":"code","b78d471a":"code","53297bbe":"code","e9bcb7fb":"code","2b76ff68":"code","4f51e1d5":"code","880bdddb":"code","fc69aa6a":"code","ca976dea":"code","8d07735b":"code","c87fffe9":"code","1bc7be56":"code","759f4a11":"code","5177c79e":"code","41f65b28":"code","b49fee68":"code","badf91d5":"code","d8f2b91d":"code","58a1294f":"code","b8143f73":"code","dde33a33":"code","8d38ab52":"code","bea58713":"code","3bdddb08":"code","1a357ec4":"code","cb3070e4":"code","4e819df6":"code","2bd4819c":"code","8addc4dc":"code","f91e3b65":"markdown","8142ab36":"markdown","1a2df380":"markdown","27313b29":"markdown","c8dc7ecd":"markdown","ced21590":"markdown","b6633a14":"markdown","c645dca7":"markdown","409a0b05":"markdown","6609e56e":"markdown","020f00d3":"markdown","54f0661c":"markdown","8279ff2f":"markdown","ec4fb39b":"markdown","2f643043":"markdown","47419a0b":"markdown","9dc264d3":"markdown","222a7150":"markdown","5952a6eb":"markdown","6b57fa89":"markdown","8429d2e5":"markdown","d91c089e":"markdown","1c1ef4f0":"markdown","04c093e7":"markdown","9c80674d":"markdown","d62d4337":"markdown","7906d39c":"markdown","f263f199":"markdown","17501cda":"markdown","19efd9d7":"markdown","f78bab74":"markdown","7809c11c":"markdown","a6c0d55e":"markdown","80c8c1f8":"markdown","e373fc05":"markdown","57773d9c":"markdown","8b090216":"markdown","0f578314":"markdown","28af3fbc":"markdown","71b48ffc":"markdown","0bba51c3":"markdown","f13426db":"markdown","4f3de4a4":"markdown","0b3cfdc7":"markdown","966285b7":"markdown","81169c15":"markdown","562b69d9":"markdown","b2e5d322":"markdown","64d6fc5e":"markdown","695a67a5":"markdown","b55fdcab":"markdown","7162c5da":"markdown","dfc0dbf2":"markdown","7a38833f":"markdown","adc688c6":"markdown","b07fc9d1":"markdown","765c4d17":"markdown"},"source":{"b30d50dd":"#\u57fa\u672c\u6a21\u5757\nimport numpy as np\nimport pandas as pd\n#\u753b\u56fe\u6a21\u5757\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#\u6a21\u578b\u8bad\u7ec3\u524d\u628a\u6570\u636e\u5206\u7ec4\u7528\u7684train_test_split, \u8ba1\u7b97\u6548\u679c\u5f97\u5206roc_auc_score, \u7528\u5230\u57fa\u7840\u6a21\u578bxgboost,\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score \nimport xgboost \n#\u5ffd\u7565wainings\nimport warnings\nwarnings.filterwarnings('ignore')\n#\u6e05\u7406\u5185\u5b58\nimport gc\n#\u56fe\u8868\u663e\u793a\u8bbe\u7f6e\n%matplotlib inline\n#\u6253\u5370\u6570\u636e\u8868\u683c\u7684\u6587\u4ef6\nimport os\nos.listdir(\"..\/input\")","6f5081cb":"df_train = pd.read_csv('..\/input\/application_train.csv')\ndf_test  = pd.read_csv('..\/input\/application_test.csv')","74f1deaf":"df_train.head()","f84df39f":"df_test.head()","b8540381":"df_all = pd.concat([df_train.loc[: , 'SK_ID_CURR':'AMT_REQ_CREDIT_BUREAU_YEAR'],\n                   df_test.loc[: , 'SK_ID_CURR':'AMT_REQ_CREDIT_BUREAU_YEAR']])\ndf_all = df_all.reset_index(drop = True)\ndf_all.drop('TARGET', axis = 1, inplace = True)","eb8cb260":"print(df_train.shape, df_test.shape, df_all.shape)","b1c122a8":"#\u67e5\u627e\u7a7a\u7f3a\u503c\u7684\u5217\u53ca\u5176\u5360\u6bd4\ndef missing_values_table(df):\n    miss_value = df.isnull().sum()\n    miss_val_percent = 100 * df.isnull().sum() \/ len(df)\n    miss_table = pd.concat([miss_value,miss_val_percent], axis = 1)\n    miss_table = miss_table.rename(columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n    miss_table = miss_table[miss_table.iloc[: , 1]!= 0].sort_values('% of Total Values', ascending=False).round(2)\n    return miss_table","09f83094":"missing_values_table(df_train).head(10)","abd94f50":"missing_values_table(df_test).head(10)","438ccd25":"distribution_of_target = df_train['TARGET'].value_counts()\nprint(distribution_of_target)","fc5f17b5":"sns.countplot(x = 'TARGET',data = df_train)\nperc_target = (100 * df_train['TARGET'].sum() \/ df_train['TARGET'].count()).round(4)\nprint('percentage of default : %0.2f%%' %  perc_target)","747623ed":"#\u533a\u5206\u5f00\u6587\u672c\u5217\u548c\u6570\u5b57\u5217\nfeat_obj = df_all.dtypes[df_all.dtypes == 'object'].index\nfeat_num = df_all.dtypes[df_all.dtypes != 'object'].index","fa64c54d":"#\u770b\u770b\u6587\u672c\u5217\u6709\u591a\u5c11\u4e0d\u540c\u7684\u503c\uff08\u53ef\u7528train.select_dtypes('object').apply(pd.Series.nunique, axis = 0)\uff09\ndf_all[feat_obj].apply(pd.Series.nunique, axis = 0)","bbcc8415":"df_all['CODE_GENDER'].value_counts()","7cd43bdc":"df_all['CODE_GENDER'].replace('XNA', np.nan, inplace = True )","91a32503":"feat_obj_dum = pd.get_dummies(df_all[feat_obj], dummy_na = True)\ndf_all = pd.concat([df_all, feat_obj_dum], axis = 1)\n#\u5220\u9664\u539f\u6587\u672c\u5217\ndf_all.drop(feat_obj,axis = 1, inplace = True)","fedfdbe8":"feat_obj_dum['TARGET'] = df_train['TARGET']","f828c9d0":"obj_corr = feat_obj_dum.corr()\nobj_corr = obj_corr['TARGET']","8d0c2c99":"abs(obj_corr).sort_values(ascending = False).head(10)","2a55522e":"del feat_obj_dum\ngc.collect()","90d8036d":"df_all.loc[ : , ['DAYS_BIRTH', 'DAYS_EMPLOYED', 'DAYS_REGISTRATION', 'DAYS_ID_PUBLISH']].describe()","a0707cd5":"df_all['DAYS_EMPLOYED'].plot.hist()\nplt.xlabel('DAYS_EMPLOYED')","d9082e07":"anom = df_train[df_train['DAYS_EMPLOYED'] == 365243]\nnom = df_train[df_train['DAYS_EMPLOYED'] != 365243]\nprec_anom = 100 * anom['TARGET'].mean()\nprec_nom = 100 * nom['TARGET'].mean()\n\nprint('number of anomalies :', len(anom))\nprint('percent of anomalies that default the loans : %0.2f%%' % prec_anom)\nprint('percent of nomalies that default the loans :  %0.2f%%' % prec_nom)","b2bcbf26":"del anom, nom\ngc.collect()","41c84f4d":"df_all['DAYS_EMPLOYED_anom'] = df_all['DAYS_EMPLOYED'] == 365243\ndf_all['DAYS_EMPLOYED'].replace(365243, np.nan, inplace = True)","718dca3e":"anom_dum = pd.get_dummies(df_all['DAYS_EMPLOYED_anom'], dummy_na = True)\ndf_all = pd.concat([df_all, anom_dum], axis = 1)\ndf_all.drop(['DAYS_EMPLOYED_anom'],axis = 1, inplace = True)","12881fc5":"del anom_dum\ngc.collect()","672e28aa":"#\u5de5\u4f5c\u65f6\u95f4\u5360\u5e74\u9f84\u7684\u6bd4\u7387\ndf_all['DAY_EMPLOYED_PERC'] = df_all['DAYS_EMPLOYED'] \/ df_all['DAYS_BIRTH']\n#\u603b\u6536\u5165\u5360\u8d37\u6b3e\u7684\u6bd4\u7387\ndf_all['INCOME_CREDIT_PERC'] = df_all['AMT_INCOME_TOTAL'] \/ df_all['AMT_CREDIT']\n#\u8be5\u7528\u6237\u5bb6\u5ead\u7684\u4eba\u5747\u6536\u5165\ndf_all['INCOME_PER_PERSON'] = df_all['AMT_INCOME_TOTAL'] \/ df_all['CNT_FAM_MEMBERS']\n#\u8d37\u6b3e\u5e74\u91d1\u5360\u603b\u6536\u5165\u7684\u6bd4\u7387\ndf_all['ANNUITY_INCOME_PERC'] = df_all['AMT_ANNUITY'] \/ df_all['AMT_INCOME_TOTAL']\n#\u8d37\u6b3e\u5e74\u91d1\u5360\u8d37\u6b3e\u7684\u6bd4\u7387\ndf_all['PAYMENT_RATE'] = df_all['AMT_ANNUITY'] \/ df_all['AMT_CREDIT']","0453301f":"#\u7528train\u8868\u6570\u636e\uff0coutliers\u8868\u793a\u9700\u8981\u5220\u9664\u7684\u884c\u7d22\u5f15\noutlier_indices = []\nfor i in feat_num:\n    Q1 = df_train[i].quantile(0.02)\n    Q3 = df_train[i].quantile(0.98)\n    IQR = Q3 - Q1\n    outliers = df_train[(df_train[i] < Q1 - 1.5 * IQR) | (df_train[i] > Q3 + 1.5 * IQR)].index\n    outlier_indices.extend(outliers)","34939eef":"#\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u884c\u7d22\u5f15\uff0c\u5148\u53bb\u91cd\nfrom collections import Counter\noutlier_indices = Counter(outlier_indices)#\u5b57\u5178\u5f62\u5f0f\u51fa\u73b0\nmultiple_outliers = []\nfor key, values in outlier_indices.items():#\u5b57\u5178.items() \u51fd\u6570\u4ee5\u5217\u8868\u8fd4\u56de\u53ef\u904d\u5386\u7684(\u952e, \u503c) \u5143\u7ec4\u6570\u7ec4\n    if values > 2:\n        multiple_outliers.append(key)  ","c3d79c04":"#\u9700\u5220\u6389\u7684\u884c\u6570\nlen(multiple_outliers)\ndf_all.drop(multiple_outliers, inplace = True)","9192f20c":"#train\u6570\u636e\u96c6\u53bb\u9664outliers\u540e\u7684\u884c\u5217\u6570\ndf_all.shape","36624a8a":"tem = df_train[feat_num]\ntem[\"TARGET\"] = df_train[\"TARGET\"]\nnum_corr = tem.corr()","378f8dd1":"abs(num_corr['TARGET']).sort_values(ascending = False)","b8b9f745":"num_value_count = df_all[feat_num].apply(pd.Series.nunique, axis = 0)","5ce771bb":"feat_num_dum = num_value_count[num_value_count <= 150].index.tolist()\nfeat_num_not_dum = num_value_count[num_value_count > 150].index.tolist()\nprint('There are %d feature of num need to get dummy.' % len(feat_num_dum))\nprint('There are %d feature of num left.' % len(feat_num_not_dum))","924417d9":"df_all = pd.get_dummies(df_all, columns = feat_num_dum, dummy_na = True )","91a6e618":"df_all.shape","af5c5e68":"df_train['EXT_SOURCE_1'].value_counts().sort_values(ascending = False)","69d8cf3c":"ext_source = ['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']\ndf_ext_source = df_all[ext_source]\nfor i in ext_source:\n    print(df_ext_source[i].isnull().sum())\n    \ndf_ext_source.dropna(inplace = True)\nprint(df_ext_source.head(20))","2c3e64a3":"plt.figure(figsize = (15, 15))\nfor i, col in enumerate(ext_source):\n    plt.subplot(3, 1, i + 1)\n    plt.hist(df_ext_source[col], bins = 5000, color = 'blue')\n    plt.title('distribution of %s' % col)\n    plt.xlabel('%s' % col)   ","5089748c":"#\u65b0\u589e\u4e00\u5217EXT_SOURCE_1_null\uff0c\u8868\u793aEXT_SOURCE_1\u662f\u5426\u4e3a\u7a7a\u503c\uff0c\u7a7a\u503c\u8bb0\u4e3a1\ndf_all['EXT_SOURCE_1_null'] = 0\ndf_all['EXT_SOURCE_1_null'][df_all['EXT_SOURCE_1'].isnull()] = 1","018af356":"#\u9a8c\u8bc1\u662f\u5426\u6709\u9057\u6f0f\ndf_all['EXT_SOURCE_1_null'].sum()","9c54f756":"#\u65b0\u589e\u4e00\u5217\uff0c\u8868\u793a\u662f\u5426\u4e3a\u7a7a\u503c\u3002\u7a7a\u503c\u8bb0\u4e3a1\ndf_all['EXT_SOURCE_2_null'] = 0\ndf_all['EXT_SOURCE_2_null'][df_all['EXT_SOURCE_2'].isnull()] = 1","f79d916a":"#\u9a8c\u8bc1\u662f\u5426\u6709\u9057\u6f0f\ndf_all['EXT_SOURCE_2_null'].sum()","2045eb8e":"#\u67e5\u770b\u8ba1\u6570\u91cf\u8f83\u591a\u7684\u503c\ntem = df_all['EXT_SOURCE_2'].value_counts().sort_values(ascending = False)","f698ca83":"#\u8ba1\u6570\u91cf\u5927\u4e8e100\u7684\u503c\u670921\u4e2a\ntem[tem > 100].shape[0]","bbcea8c2":"#\u8ba1\u6570\u91cf\u5927\u4e8e100\u7684\u503c\u751f\u6210dummy\u5217\nfor i in tem[tem > 100].index:\n    df_all['EXT_SOURCE_2' + str(i)] = 0\n    df_all['EXT_SOURCE_2' + str(i)][df_all['EXT_SOURCE_2'] == i] = 1","c227572c":"df_all.shape","2aef7b27":"#\u65b0\u589e\u4e00\u5217\uff0c\u8868\u793a\u662f\u5426\u4e3a\u7a7a\u503c\u3002\u7a7a\u503c\u8bb0\u4e3a1\ndf_all['EXT_SOURCE_3_null'] = 0\ndf_all['EXT_SOURCE_3_null'][df_all['EXT_SOURCE_3'].isnull()] = 1","652aceab":"#\u9a8c\u8bc1\u662f\u5426\u6709\u9057\u6f0f\ndf_all['EXT_SOURCE_3_null'].sum()","b638442b":"#\u67e5\u770b\u8ba1\u6570\u91cf\u8f83\u591a\u7684\u503c\ntem = df_all['EXT_SOURCE_3'].value_counts().sort_values(ascending = False)","8bdf2fe8":"#\u8ba1\u6570\u91cf\u5927\u4e8e1000\u7684\u503c\u670948\u4e2a\ntem[tem > 1000].shape[0]","86f49a91":"#\u8ba1\u6570\u91cf\u5927\u4e8e1000\u7684\u503c\u751f\u6210dummy\u5217\nfor i in tem[tem > 1000].index:\n    df_all['EXT_SOURCE_3' + str(i)] = 0\n    df_all['EXT_SOURCE_3' + str(i)][df_all['EXT_SOURCE_3'] == i] = 1","7b49c971":"df_all.shape","d66fe252":"df_all.fillna(-1, inplace = True)","d61f0e61":"#\u68c0\u9a8c\u662f\u6709\u5168\u90e8\u586b\u597d\u7a7a\u503c\ndf_all.isnull().sum()","8de689db":"bureau = pd.read_csv('..\/input\/bureau.csv')\nbb = pd.read_csv('..\/input\/bureau_balance.csv')","c42d31a8":"#\u5b9a\u4e49\u5bf9dataframe\u505aone hot\u7684\u51fd\u6570\u3002\u5176\u4e2d\u53ea\u5bf9\u2018object\u2019\u7c7b\u578b\u7684\u5217\u505a\u8f6c\u5316\u3002\ndef one_hot_encoder(df, nan_category = True):\n    original_cols = list(df.columns)\n    categorial_cols = [col for col in df.columns if df[col].dtypes == 'object']\n    df = pd.get_dummies(df, columns = categorial_cols, dummy_na = nan_category)\n    new_columns = [i for i in df.columns if i not in original_cols]\n    return df, new_columns","c7166e8f":"bureau.head()","4e846416":"bb.head()","c82a832d":"b_obj = bureau.dtypes[bureau.dtypes == 'object'].index\nbb_obj = bb.dtypes[bb.dtypes == 'object'].index","491b97f8":"bureau[b_obj].apply(pd.Series.nunique, axis = 0)","fa8f31ba":"bb[bb_obj].apply(pd.Series.nunique, axis = 0)","c2f3086a":"bureau, bureau_cat = one_hot_encoder(bureau)\nbb, bb_cat = one_hot_encoder(bb)","46d369e5":"bb_aggregations = {'MONTHS_BALANCE': ['min', 'max', 'size'] } #\u7edf\u8ba1\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u51fa\u73b0\u7b14\u6570\nfor i in bb_cat:\n    bb_aggregations[i] = ['mean','sum'] #\u7b97\u51fa\u5360\u6bd4\u548c\u603b\u6b21\u6570\n\nbb_agg = bb.groupby('SK_ID_BUREAU').agg(bb_aggregations)\ntem = []\nfor i in bb_agg.columns.tolist():\n    tem.append(i[0] + '_' + i[1])\nbb_agg.columns = pd.Index(tem)","cd8395d1":"bb_agg.head()","b4b6a945":"#\u6309SK_ID_BUREAU\u8fde\u63a5bureau\u548cbb\u8868\nbureau = bureau.join(bb_agg, how= 'left', on='SK_ID_BUREAU')\nbureau.drop(['SK_ID_BUREAU'], axis= 1, inplace= True)","f35e951f":"del bb_agg, bb\ngc.collect()","99d470f2":"bureau.head()","41180892":"#\u6700\u540e\u7edf\u8ba1\u6bcf\u4e2aSK_ID_CURR\u7684\u5386\u53f2SK_ID_BUREAU\u4fe1\u606f\u3002\u5bf9\u6240\u6709\u6570\u503c\u8ba1\u7b97\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u5747\u503c\uff0c\u65b9\u5dee\uff0c\u603b\u548c\ntem = bureau.columns.tolist()\nnum_agg = { }\nfor i in tem:\n    if i != 'SK_ID_CURR':\n        num_agg[i] = ['min','max','mean','var','sum']\nbureau_agg = bureau.groupby('SK_ID_CURR', as_index = False).agg(num_agg)\n\ntem = [ ]\ntem.append('SK_ID_CURR')\nfor i in bureau_agg.columns.tolist():\n    if i[0] != 'SK_ID_CURR':\n        tem.append('bureau' + '_' + i[0] + '_' + i[1])\nbureau_agg.columns = pd.Index(tem)","a386c0e9":"bureau_agg.head()","b148ebd1":"#\u62fc\u63a5\u5230df_all\u8868\u4e0a\uff0c\u8bb0\u4e3adf_allX\ndf_allX = df_all.merge(bureau_agg, how = 'left', on= 'SK_ID_CURR')","69b68dcf":"df_allX.shape","92fd30b4":"del bureau, bureau_agg\ngc.collect()","a068701f":"ip = pd.read_csv('..\/input\/installments_payments.csv')","5104c40e":"ip.head()","9723b504":"#\u65b0\u589e\u4e00\u5217DEFAULT_DAY\uff0c\u8868\u793a\u6bcf\u7b14\u7684\u903e\u671f\u5929\u6570\nip['DEFAULT_DAY'] = ip['DAYS_ENTRY_PAYMENT'] - ip['DAYS_INSTALMENT']\ntem = ip[ip['DEFAULT_DAY'] > 0]#\u903e\u671f\u5929\u6570\u5927\u4e8e0\ntem = tem.loc[: ,['SK_ID_CURR','DEFAULT_DAY']]\n#\u8ba1\u7b97\u6bcf\u4e2aSK_ID_CURR\u7684\u903e\u671f\u603b\u5929\u6570\u548c\u903e\u671f\u603b\u6b21\u6570\ndefault_days_agg = tem.groupby('SK_ID_CURR', as_index = False).agg({ 'DEFAULT_DAY' : [ 'sum', 'count']})\n\nprint(default_days_agg.head())","8b938a12":"tem = []\ntem.append('SK_ID_CURR')\nfor i in default_days_agg.columns.tolist():\n    if i[0] != 'SK_ID_CURR':\n        tem.append('ip' + '_' + i[0] + '_' + i[1])\ndefault_days_agg.columns = pd.Index(tem)\n\nprint(default_days_agg.head())","bf33b825":"df_allX = df_allX.merge(default_days_agg, how = 'left', on = 'SK_ID_CURR')","6e708849":"del default_days_agg\ngc.collect()","9e1bdb3c":"ip['MONEY'] = ip['AMT_INSTALMENT'] - ip['AMT_PAYMENT']\ntem = ip.loc[: ,['SK_ID_PREV', 'SK_ID_CURR', 'MONEY']]","ce0b91cd":"tem = tem.groupby(['SK_ID_CURR','SK_ID_PREV'], as_index = False).count().rename(columns={'MONEY': 'TIMES'})","647a142d":"tem = tem.groupby('SK_ID_CURR', as_index = False).agg({'SK_ID_PREV': 'count', 'TIMES': 'sum'})","42405c2f":"tem = tem.rename(index = str, columns = {\"SK_ID_PREV\": \"ip_CREDIT_TIMES\", \"TIMES\": \"ip_TOTAL_INSTALLMENT_TIMES\"})","12e76f83":"tem.head()","475a1248":"df_allX = df_allX.merge(tem,how = 'left', on = 'SK_ID_CURR')","a623eabf":"df_allX.shape","1e03af7b":"tem = ip.groupby('SK_ID_CURR', as_index = False).agg({'AMT_INSTALMENT':'sum', 'AMT_PAYMENT':'sum'})\ntem['ip_default_money'] = tem['AMT_INSTALMENT'] - tem['AMT_PAYMENT']\ntem = tem.loc[:,['SK_ID_CURR','ip_default_money']]","d47a1431":"df_allX = df_allX.merge(tem, how = 'left', on= 'SK_ID_CURR')","5e821652":"del ip, tem\ngc.collect()","9edb8343":"pa = pd.read_csv('..\/input\/previous_application.csv')","32dcff14":"pa.head()","a4329838":"pa, pa_cat = one_hot_encoder(pa)","1124ca1c":"#\u65b0\u52a0\u4e00\u5217\u7279\u5f81\uff1a\u7533\u8bf7\u91d1\u989d\u5360\u4e0e\u5b9e\u9645\u53d1\u653e\u91d1\u989d\u7684\u6bd4\u503c\npa['application_credit_perc'] = pa['AMT_APPLICATION']\/ pa['AMT_CREDIT']","6e936bf7":"cat_agg = { }\nfor i in pa_cat:\n    cat_agg[i] = ['mean', 'sum']\n    \nnum_agg = {\n    'AMT_ANNUITY': ['min','max','mean'],\n    'AMT_APPLICATION':['min','max','mean'],\n    'AMT_CREDIT':['min','max','mean'],\n    'AMT_DOWN_PAYMENT':['min','max','mean'],\n    'AMT_GOODS_PRICE':['min','max','mean'],\n    'application_credit_perc':['min','max','mean','var'],\n    'HOUR_APPR_PROCESS_START':['min','max','mean'],\n    'RATE_DOWN_PAYMENT':['min','max','mean'],\n    'DAYS_DECISION':['min','max','mean'],\n    'CNT_PAYMENT':['sum','mean']\n}\n\npa_agg = pa.groupby('SK_ID_CURR', as_index = False).agg({**cat_agg, **num_agg})","52a333aa":"pa_agg.head()","ab2774ac":"tem = []\ntem.append('SK_ID_CURR')\nfor i in pa_agg.columns.tolist():\n    if i[0] != 'SK_ID_CURR':\n        tem.append(i[0] + '_' + i[1])\npa_agg.columns = pd.Index(tem)","c803fdfb":"df_allX = df_allX.merge(pa_agg, how = 'left', on = 'SK_ID_CURR')","54f1a99a":"df_allX.head()","35850f18":"del pa_agg, pa\ngc.collect()","8e12b786":"pcb = pd.read_csv('..\/input\/POS_CASH_balance.csv')","0ed186dc":"pcb['STATUS_COMPLETED'] = 0\nfor i in range(pcb['NAME_CONTRACT_STATUS'].shape[0]):\n    if pcb['NAME_CONTRACT_STATUS'].values[i] == 'Completed':\n        pcb['STATUS_COMPLETED'].values[i] = 1","ca370504":"pcb, pcb_cat = one_hot_encoder(pcb)","b2ff05a9":"pcb_cat_agg = { }\nfor i in pcb_cat:\n    pcb_cat_agg[i] = ['mean','sum']\n\npcb_num_agg = { \n    'MONTHS_BALANCE': ['max', 'mean', 'size'],\n    'SK_DPD': ['max', 'mean'],\n    'SK_DPD_DEF': ['max', 'mean'],\n    'STATUS_COMPLETED':['sum']\n}","b78d471a":"pcb_agg = pcb.groupby('SK_ID_CURR', as_index = False).agg({**pcb_cat_agg, **pcb_num_agg})","53297bbe":"tem = [ ]\ntem.append('SK_ID_CURR')\nfor i in pcb_agg.columns.tolist():\n    if i[0] != 'SK_ID_CURR':\n        tem.append('pcb' + '_' + i[0] + '_' + i[1])\npcb_agg.columns = pd.Index(tem)","e9bcb7fb":"#\u65b0\u589e\u4e00\u5217:\u6bcf\u4e2a\u7528\u6237\u7684\u8bb0\u5f55\u6570\npcb_agg['pcb_count'] = pcb.groupby('SK_ID_CURR').size()","2b76ff68":"pcb_agg.head()","4f51e1d5":"pcb.head()","880bdddb":"total_completed = pcb.loc[ : , ['SK_ID_CURR', 'STATUS_COMPLETED']].groupby('SK_ID_CURR', as_index = False).sum()\ncredt_count = pcb.loc[ : , ['SK_ID_CURR', 'SK_ID_PREV']].groupby(\n    'SK_ID_CURR', as_index = False).count().rename(columns = {'SK_ID_PREV' : 'pcb_PREV_CREDIT_COUNT'})\ntem = total_completed.merge(credt_count, how = 'left', on = 'SK_ID_CURR')\ntem['pcb_COMPLETED_PERC'] = tem['STATUS_COMPLETED'] \/ tem['pcb_PREV_CREDIT_COUNT']\nprint(tem.head())","fc69aa6a":"pcb_agg = pcb_agg.merge(tem, how = 'left', on = 'SK_ID_CURR')","ca976dea":"pcb_agg.head()","8d07735b":"df_allX = df_allX.merge(pcb_agg, how = 'left', on= 'SK_ID_CURR')","c87fffe9":"df_allX.head()","1bc7be56":"del pcb, pcb_agg\ngc.collect()","759f4a11":"ccb = pd.read_csv('..\/input\/credit_card_balance.csv')","5177c79e":"ccb['STATUS_COMPLETED'] = 0\nfor i in range(ccb['NAME_CONTRACT_STATUS'].shape[0]):\n    if ccb['NAME_CONTRACT_STATUS'].values[i] == 'Completed':\n        ccb['STATUS_COMPLETED'].values[i] = 1","41f65b28":"ccb, ccb_cat = one_hot_encoder(ccb)","b49fee68":"ccb_cat_agg = { }\nfor i in ccb_cat:\n    ccb_cat_agg[i] = ['mean','sum']\n    \nccb_num_agg = { \n    'MONTHS_BALANCE': ['max', 'mean', 'size'],\n    'SK_DPD': ['max', 'mean'],\n    'SK_DPD_DEF': ['max', 'mean'],\n    'STATUS_COMPLETED':['sum']\n}\n\nccb_num = ['AMT_BALANCE',\n       'AMT_CREDIT_LIMIT_ACTUAL', 'AMT_DRAWINGS_ATM_CURRENT',\n       'AMT_DRAWINGS_CURRENT', 'AMT_DRAWINGS_OTHER_CURRENT',\n       'AMT_DRAWINGS_POS_CURRENT', 'AMT_INST_MIN_REGULARITY',\n       'AMT_PAYMENT_CURRENT', 'AMT_PAYMENT_TOTAL_CURRENT',\n       'AMT_RECEIVABLE_PRINCIPAL', 'AMT_RECIVABLE', 'AMT_TOTAL_RECEIVABLE',\n       'CNT_DRAWINGS_ATM_CURRENT', 'CNT_DRAWINGS_CURRENT',\n       'CNT_DRAWINGS_OTHER_CURRENT', 'CNT_DRAWINGS_POS_CURRENT',\n       'CNT_INSTALMENT_MATURE_CUM']\nfor i in ccb_num:\n    ccb_num_agg[i] = ['min', 'max', 'mean', 'sum', 'var']","badf91d5":"ccb_agg = ccb.groupby('SK_ID_CURR', as_index = False).agg({**ccb_cat_agg, **ccb_num_agg})","d8f2b91d":"tem = [ ]\ntem.append('SK_ID_CURR')\nfor i in ccb_agg.columns.tolist():\n    if i[0] != 'SK_ID_CURR':\n        tem.append('ccb' + '_' + i[0] + '_' + i[1])\nccb_agg.columns = pd.Index(tem)","58a1294f":"ccb_agg['ccb_count'] = ccb.groupby('SK_ID_CURR').size()","b8143f73":"total_completed = ccb.loc[ : , ['SK_ID_CURR', 'STATUS_COMPLETED']].groupby('SK_ID_CURR', as_index = False).sum()\ncredt_count = ccb.loc[ : , ['SK_ID_CURR', 'SK_ID_PREV']].groupby(\n    'SK_ID_CURR', as_index = False).count().rename(columns = {'SK_ID_PREV' : 'ccb_PREV_CREDIT_COUNT'})\ntem = total_completed.merge(credt_count, how = 'left', on = 'SK_ID_CURR')\ntem['ccb_COMPLETED_PERC'] = tem['STATUS_COMPLETED'] \/ tem['ccb_PREV_CREDIT_COUNT']\nprint(tem.head())","dde33a33":"ccb_agg = ccb_agg.merge(tem, how = 'left',on = 'SK_ID_CURR')","8d38ab52":"ccb_agg.head()","bea58713":"df_allX = df_allX.merge(ccb_agg,how = 'left', on= 'SK_ID_CURR')","3bdddb08":"df_allX.head()","1a357ec4":"del ccb, ccb_agg, total_completed, credt_count ,tem\ngc.collect()","cb3070e4":"df_allX.fillna(0, inplace = True)","4e819df6":"#\u53d6\u51fa\u53bb\u6389outliers\u884c\u540e\u7684target\ndf_target_fin = df_train.drop(multiple_outliers)[['TARGET']].copy()","2bd4819c":"print(df_target_fin.shape)\n\ndel df_train\ngc.collect()","8addc4dc":"df_allX.drop('SK_ID_CURR',axis = 1, inplace = True )\ndf_train_fin = df_allX.loc[ : df_target_fin.shape[0]-1, : ].copy()\ndf_test_fin = df_allX.loc[df_target_fin.shape[0] : , : ].copy()\nprint(df_train_fin.shape,df_test_fin.shape)\n\ndel df_allX\ngc.collect()","f91e3b65":"**\u9700\u8981\u7528\u52304\u5f20\u8868\u683c\uff1adf_test\uff08\u539f\u6765\u7684test\u8868\uff09\u3001df_train_fin\u3001 df_test_fin\u3001 df_target_fin**","8142ab36":"#### 2-3 \u7528previous_application\u8868\u505a\u7279\u5f81","1a2df380":"### 1-3 \u67e5\u770b\u7a7a\u7f3a\u503c\u7684\u5217\u53ca\u7a7a\u7f3a\u7387","27313b29":"### 1-5 \u67e5\u770b\u6bcf\u5217\u7684\u57fa\u672c\u60c5\u51b5","c8dc7ecd":"**\u901a\u8fc7\u63d0\u524d\u505a\u597done hot\u540e\uff0cgroup by\u7edf\u8ba1\u79bb\u6563\u53d8\u91cf\u7684\u51fa\u73b0\u6b21\u6570\u5360\u6bd4\uff0c\u51fa\u73b0\u603b\u6b21\u6570\u3002\n\u5e76\u4e14\u7edf\u8ba1\u6bcf\u4e2aSK_ID_BUREAU\u7684MONTHS_BALANCE\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u8ba1\u6570\u3002**","ced21590":"#### 1-5-2 \u5bf9\u6570\u5b57\u5217\u8fdb\u884c\u5206\u6790","b6633a14":"**\u53d1\u73b0\u6027\u522b\u5217\u51fa\u73b03\u79cd\u503c\uff0c\u5355\u72ec\u67e5\u770b\u503c\u7684\u5206\u5e03\u3002**","c645dca7":"##### 2-2-3 \u8ba1\u7b97\u6bcf\u7b14\u5206\u671f\u7684\u903e\u671f\u91d1\u989d","409a0b05":"**\u53d1\u73b0\u5f02\u5e38\u503c\u7684\u903e\u671f\u7387\u4f4e\u4e8e\u6b63\u5e38\u503c\u7684\u903e\u671f\u7387\uff0c\u53ef\u4ee5\u731c\u6d4b365243\u5e76\u4e0d\u662f\u8868\u793a1000\u5e74\uff0c\u800c\u662f\u4e00\u4e2a\u6807\u8bb0\u7279\u5f81\uff0c\u6240\u4ee5\u65b0\u589e\u4e00\u5217DAYS_EMPLOYED_anom\uff0c\u75281\u8868\u793a\u3002**","6609e56e":"#### 2-2 \u7528installments_payments\u8868\u505a\u7279\u5f81","020f00d3":"### 1-1 \u5bfc\u5165\u6240\u9700\u8981\u6a21\u5757","54f0661c":"**EXT_SOURCE_3**","8279ff2f":"**\u8d85\u8fc750000\u4e2a\u7528\u6237\u7684DAYS_EMPLOYED\u5728365243\u4e0a\uff0c\u8fdb\u4e00\u6b65\u5206\u6790\u662f\u5426\u9700\u8981\u5254\u9664\u3002\n\uff08\u8ba1\u7b97\u5f02\u5e38\u503c\u4e2a\u6570\u3001\u5f02\u5e38\u503c\u7684\u903e\u671f\u7387\u548c\u6b63\u5e38\u503c\u7684\u903e\u671f\u7387\uff09**","ec4fb39b":"**\u8ba1\u7b97\u6587\u672c\u5217\u4e0etarget\u7684\u76f8\u5173\u7cfb\u6570\uff0c\u9009\u53d6target\u5217\u8fdb\u884c\u6392\u5e8f\u3002**","2f643043":"## \u56db\u3001\u8bad\u7ec3\u6a21\u578b\uff0c\u672c\u5730\u9a8c\u8bc1\u6a21\u578b\u6548\u679c\uff0c\u9884\u6d4b\u6d4b\u8bd5\u6570\u636e","47419a0b":"#### 1-5-1 \u5bf9\u6587\u672c\u5217\u8fdb\u884c\u5206\u6790","9dc264d3":"\u53d1\u73b0\u6027\u522b\u9879\u5185\u6709\u5f02\u5e38\u503c'XNA',\u7528\u2018NaN\u2019\u4ee3\u66ff","222a7150":"#### 1-5-4 \u8ba1\u7b97\u6570\u5b57\u5217\u7279\u5f81\u7684\u76f8\u5173\u7cfb\u6570","5952a6eb":"## \u4e8c\u3001\u63a2\u7d22\u6570\u636e\uff08\u5269\u4f596\u5f20\u8868\uff09","6b57fa89":"**\u53d1\u73b0'EXT_SOURCE_3','EXT_SOURCE_2','EXT_SOURCE_1'\u76f8\u5173\u7cfb\u6570\u6bd4\u8f83\u9ad8\uff0c\u9009\u53d6\u51fa\u73b0\u9891\u7387\u8f83\u9ad8\u7684\u503c\u751f\u6210\u5bf9\u5e94\u7684dummy\u5217\u3002\n\u4f59\u4e0b\u7684\u6570\u5b57\u5217\u4e2d\u628a\u975e\u91cd\u590d\u503c\u5927\u4e8e150\u4e2a\u7684\u7279\u5f81\u770b\u505a\u8fde\u7eed\u578b\uff0c\u5c0f\u4e8e\u7b49\u4e8e150\u7684\u770b\u505a\u79bb\u6563\u578b\u5e76\u751f\u6210\u5bf9\u5e94\u7684dummy\u5217\u3002**","8429d2e5":"**#\u751f\u6210train\u6570\u636e\u653e\u8fdb\u6a21\u578b\u540e\u7684\u7b54\u6848**\nans = model.predict_proba(X_test)\nroc_auc_score(y_test, ans[ : , 1]) ","d91c089e":"**\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c3\u4e2a\u7279\u5f81\u7684\u975e\u7a7a\u503c\u5206\u5e03\u57280\u20141\u4e4b\u95f4\u3002**","1c1ef4f0":"**\u5bf9\u6587\u672c\u5217\u505adummy\uff0c\u8ba1\u7b97\u6587\u672c\u5217\u7279\u5f81\u4e0etarget\u7684\u76f8\u5173\u5ea6\u3002**","04c093e7":"### 1-2 \u5bfc\u5165train \u548ctest \u8868\n","9c80674d":"**#\u628atest\u6570\u636e\u653e\u8fdb\u6a21\u578b**\nans_test = model.predict_proba(df_test_fin.values)\nprint(ans_test)\n**#\u751f\u6210\u7b54\u6848**\ndf_test_fin['TARGET'] = ans_test[:,1]\ndf_new = df_test_fin.loc[:,['SK_ID_CURR','TARGET']].reset_index()\ndf_new['SK_ID_CURR'] = df_test['SK_ID_CURR']#\u7528\u539f\u672c\u7684test\u8868\ndf_new[['SK_ID_CURR','TARGET']].to_csv('05.csv',encoding = 'utf-8',index = 0)","d62d4337":"#### 2-1 \u7528bureau\u548cbureau_balance\u8868\u505a\u7279\u5f81","7906d39c":"**EXT_SOURCE_1\n\u7531\u4e8e\u6bcf\u4e2a\u503c\u7684\u51fa\u73b0\u9891\u7387\u90fd\u6bd4\u8f83\u5c0f\uff0c\u4e0d\u505adummy\u3002**","f263f199":"#### 1-5-3 \u5904\u7406outliers","17501cda":"df_train_fin.to_csv('df_train_fin.csv',encoding = 'utf-8',index = 0)\ndf_test_fin.to_csv('df_test_fin.csv',encoding = 'utf-8',index = 0)\ndf_target_fin.to_csv('df_target_fin.csv',encoding = 'utf-8',index = 0)","19efd9d7":"**Private Score\uff1a**0.78042.   **Public Score:**0.78267.","f78bab74":"**\u53ef\u4ee5\u770b\u5230train\u548ctest\u8868\u7684\u7a7a\u7f3a\u5217\u57fa\u672c\u4e00\u81f4\uff0c\u524d\u5341\u4f4d\u7a7a\u7f3a\u5217\u90fd\u63a5\u8fd170%\u7684\u6bd4\u7387\u3002**","7809c11c":"**\u540c\u65f6\u8fd9\u79cd\u5148one hot\uff0c\u518dgroupby\u7edf\u8ba1\u7279\u5f81\u7684min\uff0cmax\uff0cmean\u7b49\u6570\u503c\u7684\u65b9\u6cd5\u8d2f\u7a7f\u4e0b\u5217\u5404\u5f20\u8868\u3002\u540e\u7eed\u5404\u5f20\u8868\u7684\u5904\u7406\u8fc7\u7a0b\u4e2d\u4e0d\u518d\u8d58\u8ff0\u3002**","a6c0d55e":"**\u4ee5\u4e0a\u662f\u524d10\u9879\u76f8\u5173\u5ea6\u8f83\u9ad8\u7684\u6587\u672c\u5217\uff0c\u53ef\u4ee5\u770b\u5230\u5de5\u4f5c\u7c7b\u578b\uff0c\u6027\u522b\u548c\u6559\u80b2\u7c7b\u578b\u7684\u76f8\u5173\u5ea6\u6bd4\u8f83\u9760\u524d\u3002**","80c8c1f8":"**\u589e\u52a0['STATUS_COMPLETED']\u4e00\u5217\uff0c1\u8868\u793aContract status = 'Completed'\uff0c0\u4e3a\u5176\u4ed6\u72b6\u6001**","e373fc05":"**\u5bf9['STATUS_COMPLETED']\u505a\u7279\u5f81\uff1a\u6bcf\u4e2aSK_ID_CURR\u7684\u5386\u53f2\u501f\u6b3e\u7b14\u6570['pcb_PREV_CREDIT_COUNT']\u3001'Completed'\u7b14\u6570\u7684\u5360\u6bd4['pcb_COMPLETED_PERC']**","57773d9c":"**\u7528\u6e29\u548c\u5f02\u5e38\u503c\u7684\u516c\u5f0f\u8fdb\u884c\u8ba1\u7b97\u3002\u4e3a\u4e86\u5c11\u5220outliers,\u628a\u7b2c\u4e00\u5206\u4f4d\u6570Q1\u548c\u7b2c\u4e09\u5206\u4f4d\u6570Q3\u7684\u8303\u56f4\u7531\u539f\u6765\u768425%\u548c75%\u53d8\u62102%\u548c98%\u3002**","8b090216":"##### 2-2-1 \u8ba1\u7b97\u6bcf\u4e00\u7b14\u903e\u671f\u5929\u6570\uff0c\u627e\u51fa\u51fa\u73b0\u903e\u671f\u7684\u7528\u6237\u53ca\u903e\u671f\u6b21\u6570","0f578314":"**\u5355\u72ec\u53d6\u51faext_source\u7684\u6570\u636e\u5206\u6790\u3002\u7531\u4e8e\u7a7a\u503c\u8f83\u591a\uff0c\u5f71\u54cd\u4e0b\u9762\u753b\u56fe\u6548\u679c\uff0c\u9700\u53bb\u6389\u7a7a\u503c\u884c\u3002**","28af3fbc":"#### 2-5 \u7528credit_card_balance\u8868\u505a\u7279\u5f81","71b48ffc":"## \u4e94\u3001\u6700\u540e\u5206\u6570","0bba51c3":"#### 2-6 \u586b\u7a7a\u7f3a\u503c","f13426db":"**\u589e\u52a0STATUS_COMPLETED\u4e00\u5217\uff0c1\u8868\u793aContract status = 'Completed'\uff0c0\u4e3a\u5176\u4ed6\u72b6\u6001**","4f3de4a4":"**\u65b0\u589eDAY_EMPLOYED_PERC\uff0cINCOME_CREDIT_PERC\uff0cINCOME_PER_PERSON\uff0cANNUITY_INCOME_PERC\uff0cPAYMENT_RATE 5\u5217\u3002**","0b3cfdc7":"##### 2-2-2 \u8ba1\u7b97\u6bcf\u4e2a\u7528\u6237\u5386\u53f2\u501f\u6b3e\u6b21\u6570\u548c\u603b\u5206\u671f\u6570","966285b7":"**\u5bf9['STATUS_COMPLETED']\u505a\u7279\u5f81\uff1a\u6bcf\u4e2aSK_ID_CURR\u7684\u501f\u6b3e\u7b14\u6570['ccb_PREV_CREDIT_COUNT']\u3001'Completed'\u7b14\u6570\u7684\u5360\u6bd4['ccb_COMPLETED_PERC']**","81169c15":"## \u4e00\u3001\u63a2\u7d22\u6570\u636e\uff08train \u548c test \u8868\uff09","562b69d9":"X = df_train_fin.values\ny = df_target_fin['TARGET'].values\n\ndel df_train_fin, df_target_fin\ngc.collect()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2 , random_state = 5)\ndel X, y\ngc.collect()","b2e5d322":"### 1-4 \u67e5\u770b\u4e00\u4e0btrain\u8868\u7684target\u5206\u5e03","64d6fc5e":"**EXT_SOURCE_2**","695a67a5":"**\u56e0\u4e3a\u5185\u5b58\u4e0d\u591f\uff0c\u65e0\u6cd5\u63a5\u7740\u8dd1\u5b8c\u6a21\u578b\uff0c\u751f\u6210**df_train_fin **\u548c **df_target_fin **\u4e24\u5f20CSV\u5907\u7528\uff0c\u4f5c\u4e3a\u7b2c\u4e8c\u7bc7\u7b14\u8bb0\u8fdb\u884c\u5efa\u6a21\u7684\u6570\u636e\u3002**","b55fdcab":"**\u53d1\u73b0DAYS_EMPLOYED\u7684\u6700\u5927\u503c365243\u5929\uff0c\u7ea6\u7b49\u4e8e1000\u5e74\uff0c\u53ef\u80fd\u662f\u5f02\u5e38\u503c\uff0c\u4e0b\u9762\u5bf9\u8be5\u5217\u8fdb\u884c\u5206\u6790\u3002**","7162c5da":"#### 2-4 \u7528POS_CASH_balance\u8868\u505a\u7279\u5f81","dfc0dbf2":"**train\u8868\u7684\u7528\u6237\u903e\u671f\u7387\u4e3a8.07%\u3002**","7a38833f":"## \u4e09\u3001\u751f\u6210\u5efa\u6a21\u9700\u7528\u7684\u8868\u683c","adc688c6":"model = xgboost.XGBClassifier(n_estimatores = 200, max_depth = 8, subsample = 0.8, colsample_bytree = 0.8, \n                              min_child_weight = 50, random_state=27).fit(X_train, y_train)","b07fc9d1":"\u76ee\u524d**df_allX**\u6709**353683**\u884c\uff0c**df_test**\u6709**48744**\u884c\uff0c**df_train**\u6709**304939**\u884c","765c4d17":"\u5b66\u4e60python\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u4f46\u7eb8\u4e0a\u5f97\u6765\u7ec8\u89c9\u6d45\uff0c\u9700\u8981\u505a\u9879\u76ee\u68c0\u9a8c\u4e00\u4e0b\u5b66\u4e60\u6210\u679c\u3002\u4ee5\u4e0b\u662fHome Credit Default Risk\u7684\u9879\u76ee\u7b14\u8bb0\u3002\u9009\u53d6\u8fd9\u4e2a\u9879\u76ee\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u6570\u636e\u8868\u683c\u6bd4\u8f83\u590d\u6742\u4e14\u8d34\u5408\u5b9e\u9645\u3002\u5728\u5b66\u4e60\u5b9e\u8df5\u8fc7\u7a0b\u4e2d\u4e5f\u7814\u8bfb\u8bb8\u591akaggle\u4e0a\u9ad8\u624b\u7684kernels\uff0c\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u770b\u4e16\u754c\uff0c\u5b9e\u5728\u53d7\u76ca\u532a\u6d45\uff0c\u8c22\u8c22\u3002"}}