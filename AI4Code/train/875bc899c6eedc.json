{"cell_type":{"75c96e4b":"code","784d0adc":"code","faf71e21":"code","3e7d81bd":"code","3470beec":"code","7cd3a237":"code","d4d0515d":"code","e6e450e9":"code","c8c6b031":"code","5f62fe67":"code","71957de0":"code","58a541ff":"markdown"},"source":{"75c96e4b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\n\nfor dirname, _, filenames in os.walk('..\/input\/abates'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","784d0adc":"# Descartando o uso das datasets do pre\u00e7o das carca\u00e7as\npeso_carcacas_files = [\n    '..\/input\/abates\/2020\/peso_total_carcacas.csv',\n    '..\/input\/abates\/2019\/peso_total_carcacas.csv',\n    '..\/input\/abates\/2018\/peso_total_carcacas.csv',\n    '..\/input\/abates\/2017\/peso_total_carcacas.csv',\n]\n\nabates_files = [\n    '..\/input\/abates\/2020\/numero_abates.csv',\n    '..\/input\/abates\/2019\/numero_abates.csv',\n    '..\/input\/abates\/2018\/numero_abates.csv',\n    '..\/input\/abates\/2017\/numero_abates.csv',\n]\n\nabates_datasets = []\n\nfor file in abates_files:\n    aux_dataset = pd.read_csv(file)\n    abates_datasets.append(aux_dataset)","faf71e21":"abates_datasets[0].head()","3e7d81bd":"# Fun\u00e7\u00e3o que normaliza as colunas das tabelas\ndef prepare_name_columns(dataset):\n    # Normalizando os nomes das colunas\n    for column in dataset.columns:\n        dataset.rename(columns={\n            column: column\n                .replace(' ', '_')\n                .replace('\u00e7', 'c')\n                .replace('\u00e3', 'a')\n                .replace('\u00ed', 'i')\n                .lower(),\n        }, inplace=True)\n    \n    # Removendo espa\u00e7os em brancos da coluna 'tempo'\n    dataset['tempo'] = dataset['tempo'].str.strip()\n    dataset['tempo'] = dataset['tempo'].str.lower()\n\n# Fun\u00e7\u00e3o que remove linhas desnecess\u00e1rias\ndef remove_rows(dataset):\n    # Removendo linhas que tenham \"Total\"\n    new_dataset = dataset[~dataset['tempo'].str.contains('total')]\n    new_dataset = new_dataset.replace(',','.', regex=True)\n    new_dataset.reset_index(inplace=True)\n    return new_dataset\n\nfor index, dataset in enumerate(abates_datasets):\n    prepare_name_columns(dataset)\n    new_dataset = remove_rows(dataset)\n    abates_datasets[index] = new_dataset\n\nabates_bovinos_2020 = abates_datasets[0][['tempo', 'bovinos_2019', 'bovinos_2020', 'bovinos_variacao']]\nabates_bovinos_2019 = abates_datasets[1][['tempo', 'bovinos_2018', 'bovinos_2019', 'bovinos_variacao']]\nabates_bovinos_2018 = abates_datasets[2][['tempo', 'bovinos_2017', 'bovinos_2018', 'bovinos_variacao']]\nabates_bovinos_2017 = abates_datasets[3][['tempo', 'bovinos_2016', 'bovinos_2017', 'bovinos_variacao']]\n\n# Fazendo merge de dois datasets em uma coluna\ndef merge_datasets(left_dataset, right_dataset, column):\n    return pd.merge(\n        left=left_dataset,\n        right=right_dataset,\n        left_on=column,\n        right_on=column,\n    )\n\nabates_dataset = merge_datasets(abates_bovinos_2017, abates_bovinos_2018, 'tempo')\nabates_dataset = merge_datasets(abates_dataset, abates_bovinos_2019, 'tempo')\nabates_dataset = merge_datasets(abates_dataset, abates_bovinos_2020, 'tempo')\nabates_dataset.head()","3470beec":"# Convertendo os valores nas colunas em FLOAT\ncolumns = abates_dataset.columns[1:]\nfor column in columns.values:\n    abates_dataset[column] = abates_dataset[column].astype(float)\n\n# Fun\u00e7\u00e3o respons\u00e1vel por fazer a m\u00e9dia de duas colunas correspondentes ao memso ano\ndef media_by_year(dataset, column_default, column_x, column_y):\n    dataset[column_default] = (\n        (dataset[column_x] + dataset[column_y]) \/ 2\n    )\n    dataset.drop(column_x, inplace=True, axis=1)\n    dataset.drop(column_y, inplace=True, axis=1)\n\nmedia_by_year(abates_dataset, 'bovinos_2017', 'bovinos_2017_x', 'bovinos_2017_y')\nmedia_by_year(abates_dataset, 'bovinos_2018', 'bovinos_2018_x', 'bovinos_2018_y')\nmedia_by_year(abates_dataset, 'bovinos_2019', 'bovinos_2019_x', 'bovinos_2019_y')\n\n# Descartando as colunas varia\u00e7\u00e3o. N\u00e3o ser\u00e3o necess\u00e1rias\nabates_dataset.drop('bovinos_variacao_x', inplace=True, axis=1)\nabates_dataset.drop('bovinos_variacao_y', inplace=True, axis=1)\n\nfor column in abates_dataset.columns:\n    abates_dataset.rename(columns={column: column.replace('bovinos_','')}, inplace=True)\n\n# Invertendo o dataset para que colunas virem linhas e linhas virem colunas\nabates_dataset = abates_dataset.T\nnew_header = abates_dataset.iloc[0]\nabates_dataset = abates_dataset.iloc[1:]\nabates_dataset.columns = new_header\n\n# Convertendo os valores nas colunas em FLOAT\ncolumns = abates_dataset.columns\nfor column in columns.values:\n    abates_dataset[column] = abates_dataset[column].astype(float)\n\n# Ajustando o INDEX do dataset\nabates_dataset.reset_index(inplace=True)\nabates_dataset.rename(columns={\n    'index': 'tempo',\n}, inplace=True)\n\n# Convertendo os valores da coluna 'tempo' em DateTime\nabates_dataset['tempo'] =  pd.to_datetime(abates_dataset['tempo'], format='%Y')\nabates_dataset.head()","7cd3a237":"sns.heatmap(abates_dataset.corr(),cbar=False,cmap='BuGn',annot=True)","d4d0515d":"plt.figure(figsize=(30,30))\nsns.heatmap(abates_dataset.corr(), annot=True, linewidths=0.01, cmap='coolwarm', cbar=False)\nplt.show()","e6e450e9":"p=abates_dataset.hist(figsize = (20, 20))","c8c6b031":"columns = ['tempo','outubro', 'novembro', 'dezembro']\nquarto_trimestre = abates_dataset[columns]\nquarto_trimestre.head()","5f62fe67":"sns.pairplot(data=quarto_trimestre, kind=\"reg\")","71957de0":"from sklearn import preprocessing\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\nscaler = preprocessing.MinMaxScaler()\nregressao = LinearRegression()\n\nano = 2022\n\nX = np.array(abates_dataset['tempo']).reshape(-1, 1)\nX = pd.DataFrame(scaler.fit_transform(X), columns=['tempo'])\n\ndef make_prediction(dataset, regressao, X, column_y):\n    Y = le.fit_transform(dataset[column_y])\n    regressao.fit(X, Y)\n    plt.scatter(X, Y, s=3)\n    plt.plot(X, (X * regressao.coef_ + regressao.intercept_), color='r')\n    print(column_y, regressao.predict(np.array([ano]).reshape(-1, 1)))\n    plt.show()\n\nfor column in quarto_trimestre.columns[1:]:\n    make_prediction(quarto_trimestre, regressao, X, column)","58a541ff":"# Abates - An\u00e1lise\n\nPergunta: quanto de gado vou precisar engordar para abater no \u00faltimo trimestre de 2021?"}}