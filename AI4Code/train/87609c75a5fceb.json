{"cell_type":{"c2f37095":"code","9dd7a627":"code","6859bc9b":"code","0da68e1d":"code","d856edc7":"code","d946ed34":"code","a1e0d632":"code","a1663a62":"code","80176e9a":"code","4b4c586b":"code","f0a17d30":"code","a407a88b":"code","526b842c":"code","9005ddd0":"code","d6f2eb89":"code","bd6d0ad9":"code","de0fef0b":"code","f98d9e49":"code","0db17d88":"code","2d85a3e1":"code","e309edc3":"code","17d1b999":"code","a249f294":"code","00b2cc5f":"code","23cf3e14":"code","b6e822ed":"code","a1c65c84":"code","6dd291e9":"code","2d808434":"code","6c47c306":"code","e0861624":"code","7a2ad7e4":"code","33cc85af":"code","b87cba0b":"code","3e5143bb":"code","41f75e67":"code","79f91e6d":"code","7082b8cf":"code","76a5c570":"code","30ee3a67":"code","31a66f08":"code","3379c0ac":"code","33bdb876":"code","a016b726":"code","208bced1":"code","23cc2464":"code","8269c2db":"code","52a2ac51":"code","c7442512":"code","c5ea9fee":"code","452b1cc8":"code","8b7f20e8":"code","d24525bc":"code","d1ad29e8":"code","9a3c1c82":"code","a608ee4a":"code","3e0aece6":"code","f8f4290e":"markdown","42464484":"markdown","805b88de":"markdown","ad436736":"markdown","1a551c7e":"markdown","13c6b74f":"markdown","9633b18f":"markdown","4eba9bca":"markdown","21bd7dc5":"markdown","d5c18e5b":"markdown","f7babcb2":"markdown","576c3738":"markdown"},"source":{"c2f37095":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9dd7a627":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import VotingRegressor\n\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\nimport re\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', 10000)\npd.set_option('display.max_rows', 10000)","6859bc9b":"df_train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')","0da68e1d":"df_train.info()","d856edc7":"y     = df_train[['Id','SalePrice']]\ndf_train = df_train.drop('SalePrice',axis=1)","d946ed34":"concat_df = [df_train,df_test]\ndf_all = pd.concat(concat_df).reset_index(drop=True)","a1e0d632":"df_all.info()","a1663a62":"df_dummy = pd.get_dummies(df_all['MSZoning'],prefix='MSZoning',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['MSZoning']","80176e9a":"df_all['LotFrontage'] = df_all['LotFrontage'].fillna(df_all['LotFrontage'].mean())","4b4c586b":"def LotFrontage(n):\n    if (n > 21) & (n < 50):\n        return 1\n    elif (n > 50) & (n <= 70):\n        return 2\n    elif (n > 70) & (n <= 75):\n        return 3\n    elif (n > 75) & (n <= 80):\n        return 4\n    elif (n > 80) & (n <= 90):\n        return 5\n    elif (n > 100) & (n <= 120):\n        return 6\n    elif (n > 120) & (n <= 140):\n        return 7\n    elif (n > 140) & (n <= 160):\n        return 8\n    elif (n > 160) & (n <= 180):\n        return 9\n    elif (n > 180) & (n <= 200):\n        return 9\n    else:\n        return 10","f0a17d30":"df_all['LotFrontage'] = df_all['LotFrontage'].apply(LotFrontage)","a407a88b":"df_dummy = pd.get_dummies(df_all['Neighborhood'],prefix='Neighborhood',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['Neighborhood']","526b842c":"df_all['Exterior2nd'] = df_all['Exterior2nd'].fillna('Other')\ndf_dummy = pd.get_dummies(df_all['Exterior2nd'],prefix='Exterior2nd',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['Exterior2nd']","9005ddd0":"df_dummy = pd.get_dummies(df_all['Utilities'],prefix='Utilities',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['Utilities']","d6f2eb89":"df_dummy = pd.get_dummies(df_all['LandContour'],prefix='LandContour',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['LandContour']","bd6d0ad9":"df_dummy = pd.get_dummies(df_all['Condition1'],prefix='Condition1',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['Condition1']","de0fef0b":"def Condition2(c):\n    if c == 'Norm':\n        return 1\n    elif c == 'Feedr':\n        return 2\n    elif c == 'PosA':\n        return 3\n    elif c == 'PosN':\n        return 4\n    elif c == 'Artery':\n        return 5\n    else:\n        return 0","f98d9e49":"df_all['Condition2'] = df_all['Condition2'].apply(Condition2).astype(int)","0db17d88":"df_dummy = pd.get_dummies(df_all['BldgType'],prefix='BldgType',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['BldgType']","2d85a3e1":"df_dummy = pd.get_dummies(df_all['HouseStyle'],prefix='HouseStyle',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['HouseStyle']","e309edc3":"df_dummy = pd.get_dummies(df_all['RoofMatl'],prefix='RoofMatl',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['RoofMatl']","17d1b999":"df_all['Exterior1st']= df_all['Exterior1st'].fillna('Other')","a249f294":"def Exterior1st(c):\n    if c == 'VinylSd':\n        return 1\n    elif c == 'Wd Sdng':\n        return 2\n    elif c == 'HdBoard':\n        return 3\n    elif c == 'Plywood':\n        return 4\n    elif c == 'MetalSd':\n        return 5\n    elif c == 'CemntBd':\n        return 6\n    elif c == 'WdShing':\n        return 7\n    elif c == 'BrkFace':\n        return 8\n    elif c == 'AsbShng':\n        return 9\n    else:\n        return 0","00b2cc5f":"df_all['Exterior1st'] = df_all['Exterior1st'].apply(Exterior1st).astype(int)","23cf3e14":"def BsmtFinSF1(n):\n    if (n > -1) & (n <= 150):\n        return 1\n    elif (n > 150) & (n <= 300):\n        return 2\n    elif (n > 300) & (n <= 450):\n        return 3\n    elif (n > 450) & (n <= 600):\n        return 4\n    elif (n > 600) & (n <= 750):\n        return 5\n    else:\n        return 10","b6e822ed":"df_all['BsmtFinSF1'] = df_all['BsmtFinSF1'].apply(BsmtFinSF1).astype(int)","a1c65c84":"def MasVnrArea(n):\n    if (n > -1) & (n <= 150):\n        return 1\n    elif (n > 150) & (n <= 200):\n        return 2\n    elif (n > 200) & (n <= 300):\n        return 3\n    else:\n        return 0","6dd291e9":"df_all['MasVnrArea'] = df_all['MasVnrArea'].apply(MasVnrArea).astype(int)","2d808434":"df_dummy = pd.get_dummies(df_all['ExterQual'],prefix='ExterQual',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['ExterQual']","6c47c306":"df_dummy = pd.get_dummies(df_all['ExterCond'],prefix='ExterCond',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['ExterCond']","e0861624":"df_all['BsmtQual'] = df_all['BsmtQual'].fillna('TA')\ndf_dummy = pd.get_dummies(df_all['BsmtQual'],prefix='BsmtQual',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['BsmtQual']","7a2ad7e4":"df_all['BsmtCond'] = df_all['BsmtCond'].fillna('TA')\ndf_dummy = pd.get_dummies(df_all['BsmtCond'],prefix='BsmtCond',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['BsmtCond']","33cc85af":"df_all['BsmtExposure'] = df_all['BsmtExposure'].fillna('TA')\ndf_dummy = pd.get_dummies(df_all['BsmtExposure'],prefix='BsmtExposure',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['BsmtExposure']","b87cba0b":"def Functional(f):\n    if f == 'Typ':\n        return 1\n    elif f == 'Min1':\n        return 2\n    elif f == 'Min2':\n        return 3\n    elif f == 'Mod':\n        return 4\n    elif f == 'Maj1':\n        return 5\n    elif f == 'Maj2':\n        return 6\n    elif f == 'Sev':\n        return 7\n    elif f == 'Sal':\n        return 8\n    else:\n        return 0","3e5143bb":"df_all['Functional'] = df_all['Functional'].apply(Functional).astype(int)","41f75e67":"df_dummy = pd.get_dummies(df_all['GarageType'],prefix='GarageType',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['GarageType']","79f91e6d":"df_dummy = pd.get_dummies(df_all['SaleType'],prefix='SaleType',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['SaleType']","7082b8cf":"df_dummy = pd.get_dummies(df_all['SaleCondition'],prefix='SaleCondition',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['SaleCondition']","76a5c570":"df_dummy = pd.get_dummies(df_all['Heating'],prefix='Heating',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['Heating']","30ee3a67":"df_dummy = pd.get_dummies(df_all['KitchenQual'],prefix='KitchenQual',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['KitchenQual']","31a66f08":"df_all['GarageQual'] = df_all['GarageQual'].fillna('TA')\ndf_dummy = pd.get_dummies(df_all['GarageQual'],prefix='GarageQual',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['GarageQual']","3379c0ac":"df_dummy = pd.get_dummies(df_all['Foundation'],prefix='Foundation',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['Foundation']","33bdb876":"df_dummy = pd.get_dummies(df_all['GarageCond'],prefix='GarageCond',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['GarageCond']","a016b726":"df_dummy = pd.get_dummies(df_all['PavedDrive'],prefix='PavedDrive',dummy_na=True)\ndf_all = pd.concat([df_all,df_dummy],axis=1)\ndel df_all['PavedDrive']","208bced1":"df_all['GarageYrBlt']= df_all['GarageYrBlt'].fillna('2003').astype(int)\ndf_all['TotalBsmtSF'] = df_all['TotalBsmtSF'].fillna('1305').astype(int)\ndf_all['BsmtFullBath'] = df_all['BsmtFullBath'].fillna('0').astype(int)\ndf_all['BsmtHalfBath'] = df_all['BsmtHalfBath'].fillna('0').astype(int)\ndf_all['GarageCars'] = df_all['GarageCars'].fillna('2').astype(int)\ndf_all['GarageArea'] = df_all['GarageArea'].fillna('420').astype(int)\ndf_all['PoolArea']=df_all['PoolArea'].astype(int)","23cc2464":"df_all =df_all.drop(['YrSold','MoSold','MiscVal','PoolQC','ScreenPorch','3SsnPorch','EnclosedPorch',\n                     'KitchenAbvGr','CentralAir','Alley','LotConfig','LotShape','LandSlope','RoofStyle',\n                     'BsmtFinSF2','BsmtUnfSF','HeatingQC','Electrical','BsmtFinType2','BsmtFinType1',\n                     'GarageFinish','MiscFeature','FireplaceQu','Fence','Alley','Street','MasVnrType'], axis = 1)","8269c2db":"Scaler = StandardScaler()\nall_scaled = pd.DataFrame(Scaler.fit_transform(df_all))\n\ntrain_scaled = pd.DataFrame(all_scaled[:1460])\ntest_scaled = pd.DataFrame(all_scaled[1460:2920])","52a2ac51":"X_train = train_scaled\ny_train = y['SalePrice']\nX_train, X_test, y_train, y_test = train_test_split(\n    X_train, y_train, test_size=0.15, random_state=0)","c7442512":"XGBoost \nparam_xgb = {\"max_depth\": [1,3,5,10,100],\n                     \"learning_rate\" : [0.0001,0.001,0.01],\n                     \"min_child_weight\" : [1, 3, 5, 10],\n                     \"n_estimators\": [1, 10, 100, 1000],\n                     \"subsample\": [0.5,0.75,0.9],\n                     \"gamma\":[0,0.1,0.2],\n                     \"eta\": [0.3,0.15,0.10]}\n\ngs_xgb = GridSearchCV(XGBRegressor(),\n                      param_xgb,\n                      cv=4,#cross validation \n                      verbose=True,#Display Logs \n                      n_jobs=-1)#Multi Tasking \ngs_xgb.fit(X_train, y_train)\n\nprint(gs_xgb.best_estimator)","c5ea9fee":"LightGBM param_lgb = {\"max_depth\": [1, 3, 5, 10, 25, 50, 75],\n                      \"learning_rate\" : [0.001,0.01,0.05,0.1],\n                      \"num_leaves\": [1, 10, 100,1000],\n                      \"n_estimators\": [1, 3, 10, 100, 1000]}\n\ngs_lgb = GridSearchCV(LGBMRegressor(),\n                      param_lgb,\n                      cv=4,#cross validation \n                      verbose=True,#Display Logs \n                      n_jobs=-1)#Multi Tasking \ngs_lgb.fit(X_train, y_train)\nprint(gs_lgb.best_estimator)","452b1cc8":"XGB = XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n                   colsample_bynode=1, colsample_bytree=1, eta=0.3, gamma=0,\n                   gpu_id=-1, importance_type='gain', interaction_constraints='',\n                   learning_rate=0.01, max_delta_step=0, max_depth=5,\n                   min_child_weight=1,monotone_constraints='()',n_estimators=1000,\n                   n_jobs=0, num_parallel_tree=1, random_state=0,\n                   reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=0.5,\n                   tree_method='exact', validate_parameters=1, verbosity=None)\nXGB.fit(X_train,y_train)","8b7f20e8":"model_lgb = LGBMRegressor(learning_rate=0.05, max_depth=3, n_estimators=1000, num_leaves=10)\nmodel_lgb.fit(X_train , y_train)","d24525bc":"votingC = VotingRegressor(estimators=[('xgb_r', XGB),('lgb_r', model_lgb)],n_jobs=4)\n\nvotingC = votingC.fit(X_train, y_train)","d1ad29e8":"print (\"Training score:\",XGB.score(X_train,y_train),\"Test Score:\",XGB.score(X_test,y_test))\nprint (\"Training score:\",model_lgb.score(X_train,y_train),\"Test Score:\",model_lgb.score(X_test,y_test))\nprint (\"Training score:\",votingC.score(X_train,y_train),\"Test Score:\",votingC.score(X_test,y_test))","9a3c1c82":"y_pred_voting = pd.DataFrame(votingC.predict(test_scaled))","a608ee4a":"y_pred=pd.DataFrame()\ny_pred['SalePrice'] = y_pred_voting[0]\ny_pred['Id'] = df_test['Id']","3e0aece6":"y_pred.to_csv('submission.csv',index=False)","f8f4290e":"<h2>Data Clearning<\/h2>\nUsing dummy function.<br>\nSome are using label encoder(Handmade!)<br>","42464484":"<h2>Prepare to submit labels<\/h2>","805b88de":"<h2>Grid Search<\/h2>\nI did GridSearch but it haste time about 14hours!! Here is GridSearch code.","ad436736":"<h2>Check data<\/h2>","1a551c7e":"Import modules. Please install pip.\n\n>pip install lightgbm<br>\n>pip install xgboost<br>\n>pip install scikit-learn","13c6b74f":"<h2>Concat train-test data<\/h2>\n\nIt makes easy to data clearning.<br>\nWhile coding, there are much errors.<br>\nIt is not match demension between train and test.<br>\n\"Thinking demension\" is very important keys to code and fix.<br>\nPlease be careful.","9633b18f":"<h2>Submit result<\/h2>","4eba9bca":"<h2>Check Score<\/h2>","21bd7dc5":"<h2>Hello, mate.<\/h2>\n\nIt is a same notebook as my [House Prices: Advanced Regression Techniques' Notebook](https:\/\/www.kaggle.com\/vet516lec\/votingregressor-xgboost-lightgbm).\n\n<h3>If you like, please upvote!<\/h3>","d5c18e5b":"<h2>Ensemble<\/h2>\nVoting = XGBoost + LightGBM","f7babcb2":"<h2>Separate Train Test data.<\/h2>","576c3738":"<h2>If you like, please upvote!<\/h2>"}}