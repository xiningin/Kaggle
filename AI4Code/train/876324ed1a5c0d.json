{"cell_type":{"69621a83":"code","9c482f33":"code","233a617a":"code","373add75":"code","8a16c82b":"code","efd5d2c1":"code","f6248ecf":"code","d6f46136":"code","480cc4c7":"code","c55a0610":"code","b529abd8":"code","e387ed23":"code","c6321a3f":"code","80518284":"code","eaf13185":"code","20943908":"code","c8c14c9a":"code","7dc48210":"code","bb323dfc":"code","a2ddb5ad":"code","13b5ff2f":"code","577cb0ef":"code","b2bbebbc":"code","82f91826":"code","8da94d6e":"code","9d70dfbd":"markdown","e28c31d1":"markdown","43c0a163":"markdown","ad5564f5":"markdown","c3e4869c":"markdown","ced464e2":"markdown","87342883":"markdown","87a08c59":"markdown","6becf180":"markdown","6fe7dd43":"markdown","8dda073c":"markdown","e40b54c6":"markdown","ab0e77ce":"markdown","dbc85633":"markdown","90de3bdf":"markdown","d40fce6d":"markdown","47f696fc":"markdown"},"source":{"69621a83":"import numpy as np\nimport pandas as pd\n\n%precision 3\npd.set_option('precision', 3)","9c482f33":"df = pd.read_csv('..\/input\/scores-em\/ch2_scores_em.csv', index_col='student number')","233a617a":"en_scores = np.array(df['english'])[:10]\nma_scores = np.array(df['mathematics'])[:10]\n\nscores_df = pd.DataFrame({'english':en_scores, 'mathematics':ma_scores}, index=pd.Index(['A', 'B', 'C', 'D','E',\n                                                                                       'F', 'G', 'H', 'I', 'J'],\n                                                                                      name='student'))\nscores_df","373add75":"summary_df = scores_df.copy()\nsummary_df['english_deviation'] =\\\nsummary_df['english'] - summary_df['english'].mean()   # \uc601\uc5b4_\ud3b8\ucc28 = \uc601\uc5b4\uc131\uc801 - \uc601\uc5b4 \ud3c9\uade0\nsummary_df['mathematics_deviation'] =\\\nsummary_df['mathematics'] - summary_df['mathematics'].mean()   # \uc218\ud559_\ud3b8\ucc28 = \uc218\ud559\uc131\uc801 - \uc218\ud559 \ud3c9\uade0\nsummary_df['product of deviations'] =\\\nsummary_df['english_deviation'] * summary_df['mathematics_deviation']   # \ud3b8\ucc28\uc758 \uacf1 = \uc601\uc5b4\ud3b8\ucc28 * \uc218\ud559\ud3b8\ucc28\nsummary_df","8a16c82b":"summary_df['product of deviations'].mean()   # \uacf5\ubd84\uc0b0","efd5d2c1":"cov_mat = np.cov(en_scores, ma_scores, ddof=0)   # ddof=0 \uc790\uc720\ub3c4 \uc0ac\uc6a9\uc548\ud568\ncov_mat","f6248ecf":"# 86 = \uc601\uc5b4*\uc601\uc5b4, 62.8 = \uc601\uc5b4*\uc218\ud559\uc758 \uacf5\ubd84\uc0b0, 68.44 = \uc218\ud559*\uc218\ud559\uc5d0 \ub300\uc751, \uace7 cov_mat \uc758 [0,1], [1, 0] \uc131\ubd84\uc774 \uacf5\ubd84\uc0b0\uc784","d6f46136":"cov_mat[0, 1], cov_mat[1, 0]   # \uacf5\ubd84\uc0b0","480cc4c7":"cov_mat[0, 0], cov_mat[1, 1]   # \uc601\uc5b4\uc758 \ubd84\uc0b0, \uc218\ud559\uc758 \ubd84\uc0b0","c55a0610":"np.var(en_scores, ddof=0), np.var(ma_scores, ddof=0)   # \uc601\uc5b4\uc758 \ubd84\uc0b0, \uc218\ud559\uc758 \ubd84\uc0b0","b529abd8":"np.cov(en_scores, ma_scores, ddof=0)[0, 1] \/\\\n(np.std(en_scores) * np.std(ma_scores))","e387ed23":"# \uc601\uc5b4\uc810\uc218\uc640 \uc218\ud559 \uc810\uc218\ub294 \uac15\ud55c \uc591\uc758 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uc74c","c6321a3f":"np.corrcoef(en_scores, ma_scores)   # [0, 1] \uc131\ubd84\uacfc [1, 0] \uc131\ubd84\uc774 \uc601\uc5b4\uc640 \uc218\ud559\uc758 \uc0c1\uad00\uacc4\uc218","80518284":"scores_df.corr()","eaf13185":"# Matplotlib \uc784\ud3ec\ud2b8\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","20943908":"english_scores =np.array(df['english'])\nmath_scores = np.array(df['mathematics'])\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111)\n\n# \uc0b0\uc810\ub3c4\nax.scatter(english_scores, math_scores)\nax.set_xlabel('english')\nax.set_ylabel('mathematics')\n\nplt.show()","c8c14c9a":"# \uc601\uc5b4 \uc131\uc801\uc774 \ub192\uc740 \uc0ac\ub78c\uc774 \uc218\ud559 \uc131\uc801\ub3c4 \ub192\uc74c","7dc48210":"# \uacc4\uc218 \ubca0\ud0c00 \uacfc \ubca0\ud0c01 \uc744 \uad6c\ud568\npoly_fit = np.polyfit(english_scores, math_scores, 1)\n\n# \ubca0\ud0c00 + \ubca0\ud0c01 * x \ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\npoly_1d = np.poly1d(poly_fit)\n\n# \uc9c1\uc120\uc744 \uadf8\ub9ac\uae30 \uc704\ud574 x \uc88c\ud45c\ub97c \uc0dd\uc131\nxs = np.linspace(english_scores.min(), english_scores.max())\n\n# xs \uc5d0 \ub300\uc751\ud558\ub294 y \uc88c\ud45c\ub97c \uad6c\ud568\nys = poly_1d(xs)\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\nax.scatter(english_scores, math_scores, label='score')\n\n# \ud68c\uadc0\uc9c1\uc120\nax.plot(xs, ys, color='gray',\n       label=f'{poly_fit[1]:.2f}+{poly_fit[0]:.2f}x')\nax.set_xlabel('english')\nax.set_ylabel('mathematics')\n\n# \ubc94\ub840 \ud45c\uc2dc\nax.legend(loc='upper left')\n\nplt.show()","bb323dfc":"fig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# \uc601\uc5b4 \uc810\uc218\uac00 35~80 \uae4c\uc9c0 5\uc810 \uac04\uaca9, \uc218\ud559 \uc810\uc218\uac00 55~95 \uae4c\uc9c0 5\uc810 \uac04\uaca9\uc73c\ub85c bins \uc640 range \uc9c0\uc815\nc = ax.hist2d(english_scores, math_scores, bins=[9,8], range=[(35, 80), (55, 95)])\nax.set_xlabel('english')\nax.set_ylabel('mathematics')\nax.set_xticks(c[1])\nax.set_yticks(c[2])\n\n# \uceec\ub7ec \ubc14 \ud45c\uc2dc\nfig.colorbar(c[3], ax=ax)\n\nplt.show()","a2ddb5ad":"# npy \ud615\uc2dd\uc73c\ub85c \uc800\uc7a5\ub41c Numpy array \uc77d\uc5b4\ub4e4\uc774\uae30 (ch3_anscombe.npy)\nanscombe_data = np.load('..\/input\/anscombe\/ch3_anscombe.npy')\nprint(anscombe_data.shape)\nanscombe_data[0]","13b5ff2f":"# \uac01 \ub370\uc774\ud130\uc758 \ud3c9\uade0, \ubd84\uc0b0, \uc0c1\uad00\uacc4\uc218, \ud68c\uadc0\uc9c1\uc120\uc744 \uacc4\uc0b0\ud558\uc5ec DataFrame \uc73c\ub85c \uc815\ub9ac","577cb0ef":"stats_df = pd.DataFrame(index=['X_mean', 'X_variance', 'Y_mean',\n                              'Y_variance', 'X&Y_correlation',\n                              'X&Y_regression line'])\nfor i, data in enumerate(anscombe_data):\n    dataX = data[:, 0]\n    dataY = data[:, 1]\n    poly_fit = np.polyfit(dataX, dataY, 1)\n    stats_df[f'data{i+1}'] =\\\n        [f'{np.mean(dataX):.2f}',    # X \ud3c9\uade0\n         f'{np.var(dataX):.2f}',     # X \ubd84\uc0b0\n         f'{np.mean(dataY):.2f}',    # Y \ud3c9\uade0\n         f'{np.var(dataY):.2f}',     # Y \ubd84\uc0b0\n         f'{np.corrcoef(dataX, dataY)[0, 1]:.2f}',    # \uc0c1\uad00\uacc4\uc218\n         f'{poly_fit[1]:.2f}+{poly_fit[0]:.2f}x']     # \ud68c\uadc0\uc9c1\uc120\nstats_df        ","b2bbebbc":"# \uc9c0\ud45c\uc0c1\uc73c\ub860 4\uac1c\uc758 \ub370\uc774\ud130\uac00 \ubaa8\ub450 \uc77c\uce58\ud568, \uc644\uc804\ud788 \ub3d9\uc77c\ud55c\uc9c0 \ud655\uc778\uc744 \uc704\ud574 \uc0b0\uc810\ub3c4\ub97c \uadf8\ub824 \ud655\uc778","82f91826":"# \uadf8\ub798\ud504\ub97c \uadf8\ub9ac\uae30 \uc704\ud55c \uc601\uc5ed\uc744 2 * 2 \uac1c \uc0dd\uc131\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 10),\n                        sharex=True, sharey=True)\n\nxs = np.linspace(0, 30, 100)\nfor i, data in enumerate(anscombe_data):\n    poly_fit = np.polyfit(data[:, 0], data[:, 1], 1)\n    poly_1d = np.poly1d(poly_fit)\n    ys = poly_1d(xs)\n    # \uadf8\ub798\ud504 \uc601\uc5ed \uc124\uc815\n    ax = axes[i\/\/2, i%2]\n    ax.set_xlim([4, 20])\n    ax.set_ylim([3, 13])\n    # \ud0c0\uc774\ud2c0 \ubd80\uc5ec\n    ax.set_title(f'data{i+1}')\n    ax.scatter(data[:, 0], data[:, 1])\n    ax.plot(xs, ys, color='gray')\n\n# \uadf8\ub798\ud504 \uc0ac\uc774\uc758 \uac04\uaca9\uc744 \uc881\ud798\nplt.tight_layout()\nplt.show()","8da94d6e":"# \uc564\uc2a4\ucef4\uc758 \uc608\ub294 \uc9c0\ud45c\ub97c \uacfc\uc2e0\ud574\uc120 \uc548\ub418\uba70, \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud560 \ub54c\ub294 \uac00\ub2a5\ud558\uba74 \uadf8\ub9bc\uc744 \uadf8\ub824\uc57c \ud568\uc744 \uac15\uc870","9d70dfbd":"# 2\ucc28\uc6d0 \ub370\uc774\ud130 \uc815\ub9ac","e28c31d1":"### \ub3d9\uc77c\ud574 \ubcf4\uc774\ub294 \uc9c0\ud45c\ub97c \uac00\uc9c0\ub294 \ub370\uc774\ud130\ub77c\ub3c4 \uadf8\ub9bc\uc73c\ub85c \ub098\ud0c0\ub0b4\uba74 \uc804\ud600 \ub2e4\ub978 \ub370\uc774\ud130\uac00 \ub418\ub294 \uacbd\uc6b0","43c0a163":"#### \uacf5\ubd84\uc0b0\uc774 \uc591\uc758 \uac12\uc774\uba74 \uba74\uc801\uc774 \uc591\uc758 \uac12\uc774 \ub418\ub294 \ub370\uc774\ud130\uac00 \ub9ce\ub2e4\ub294 \ub73b\uc774\ubbc0\ub85c \uc591\uc758 \uc0c1\uad00\uad00\uacc4\uc5d0 \uc788\uace0,\n#### \uacf5\ubd84\uc0b0\uc774 \uc74c\uc758 \uac12\uc774\uba74 \uba74\uc801\uc774 \uc74c\uc758 \uac12\uc774 \ub9ce\ub2e4\ub294 \ub73b\uc774\ubbc0\ub85c \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\uc5d0 \uc788\ub2e4\uace0 \ud560\uc218 \uc788\ub2e4.\n#### \uadf8 \uc5b4\ub290\ucabd\ub3c4 \uc544\ub2c8\uace0 \uacf5\ubd84\uc0b0\uc774 0\uc5d0 \uac00\uae4c\uc6b0\uba74 \ubb34\uc0c1\uad00\uc744 \ub098\ud0c0\ub0c4","ad5564f5":"### - \ud68c\uadc0\uc9c1\uc120 (regression line)","c3e4869c":"#### Matplotlib \uc5d0\ub294 \ud68c\uadc0\uc9c1\uc120\uc744 \uadf8\ub9ac\ub294 \uba54\uc11c\ub4dc\uac00 \uc5c6\uc5b4 Numpy\ub97c \uc0ac\uc6a9\n#### np.polyfit \ud568\uc218\uc640 np.poly1d \ud568\uc218 \uc0ac\uc6a9, \uc601\uc5b4 \uc810\uc218\ub97c x, \uc218\ud559 \uc810\uc218\ub97c y \ub85c \ud68c\uadc0\uc9c1\uc120 \uad6c\ud568","ced464e2":"#### \uacf5\ubd84\uc0b0\uc744 \uac01 \ub370\uc774\ud130\uc758 \ud45c\uc900\ud3b8\ucc28\ub85c \ub098\ub204\uc5b4 \ub2e8\uc704\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc815\uc758\ud55c \uc9c0\ud45c\n#### \uc0c1\uad00\uacc4\uc218\ub294 \ubc18\ub4dc\uc2dc -1 \uacfc 1 \uc0ac\uc774\uc758 \uac12\uc744 \ucde8\ud558\uace0, \uc591\uc758 \uc0c1\uad00\uad00\uacc4\uc2dc 1\uc5d0 \uac00\uae5d\uace0, \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\uc2dc -1\uc5d0 \uac00\uae4c\uc6c0, \ubb34\uc0c1\uad00\uc774\uba74 0","87342883":"## [\ub450 \ub370\uc774\ud130 \uc0ac\uc774\uc758 \uad00\uacc4\ub97c \ub098\ud0c0\ub0b4\ub294 \uc9c0\ud45c]","87a08c59":"- corrcoef \ud568\uc218 (numpy \uc758 \uc0c1\uad00\ud589\ub82c)","6becf180":"### - \ud788\ud2b8\ub9f5 (heat map : \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc758 2\ucc28\uc6d0 \ubc84\uc804, hist2d \ub9e4\uc11c\ub4dc \uc0ac\uc6a9)","6fe7dd43":"### - \uacf5\ubd84\uc0b0","8dda073c":"## [2\ucc28\uc6d0 \ub370\uc774\ud130\uc758 \uc2dc\uac01\ud654]","e40b54c6":"## [\uc564\uc2a4\ucef4\uc758 \uc608]","ab0e77ce":"- corr \uba54\uc11c\ub4dc ( \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uacbd\uc6b0)","dbc85633":"- var \ud568\uc218 (numpy \uc758 \ubd84\uc0b0)","90de3bdf":"### - \uc0b0\uc810\ub3c4  {scatter \ub9e4\uc11c\ub4dc \uc0ac\uc6a9: scatter(x\ucd95\uc758 \ub370\uc774\ud130, y\ucd95\uc758 \ub370\uc774\ud130)}","d40fce6d":"### - \uc0c1\uad00\uacc4\uc218","47f696fc":"- cov \ud568\uc218 (numpy \uc758 \uacf5\ubd84\uc0b0 \ud589\ub82c)"}}