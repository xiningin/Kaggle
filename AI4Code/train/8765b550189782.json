{"cell_type":{"12c94930":"code","76456147":"code","ea210779":"code","8cc97f35":"code","1e164c48":"code","7e1abfa8":"code","573745ee":"code","817d1fb7":"code","97055917":"code","71b92042":"code","08d53b9f":"code","b343e8cc":"code","1af5eaf0":"code","579b0548":"code","746eee4f":"code","8afac0c5":"code","69c300f2":"code","55e24774":"code","b67a6349":"code","223185ce":"code","1bfb055d":"code","66275a64":"code","b9720bb2":"code","24775746":"code","ed3e7236":"code","46cace7e":"code","eb64bf16":"code","7fcd403a":"code","702fcef7":"code","3fa92e67":"code","b3f2e72a":"code","df167b12":"code","03c767e0":"code","15d6dc66":"code","b9969fa9":"code","004d6a91":"code","3dfe4215":"code","b6b9203a":"code","88ceda33":"code","9d2b3f9c":"code","c155eb33":"code","00901c29":"code","3edefada":"code","17fa31ec":"code","6445ee8e":"code","3736e5b1":"code","f9307dde":"code","9b50ac93":"code","918423cd":"code","2eb12271":"code","5dc3a9e0":"code","139df527":"code","7db54d11":"code","4036a490":"code","719e39a0":"code","e68a3f96":"code","55a51be8":"code","40ca307d":"code","09883af4":"code","a48b2a52":"code","cafc4905":"code","de344b54":"code","c9fc9ce8":"code","4ce747ba":"code","6101cc17":"code","4cb8dad7":"code","8ca31bb1":"code","39661999":"code","2fd34b9d":"code","bd5cf75b":"code","2bf077ce":"code","81d902ea":"code","cbc4933f":"code","b37e8356":"code","a7f93d9f":"code","cf9fb503":"code","b0e74529":"code","ea22dea7":"code","d3fe2324":"code","e34e7542":"code","dc542d60":"code","1890f34c":"code","a00e3ede":"code","cc627e38":"code","1a9b19c5":"code","e04bf956":"code","86211c15":"code","8f396131":"code","08ab1d87":"code","058865d5":"code","c1f6c9c2":"code","2b09d1e8":"code","bc273dfb":"code","37a5415a":"code","4511bd77":"code","62cb6632":"code","5adc3e66":"code","07cdd0f2":"code","cac67739":"code","07261ebf":"code","15030cc7":"code","d5c295b8":"code","51162790":"code","d2b5ec22":"code","d816fe24":"code","22795c0e":"code","50084d06":"code","7f230025":"code","f8f60ba4":"code","75289e17":"code","4be04873":"code","323385bc":"code","07d6b709":"code","19bad1fc":"code","c7cdf942":"code","77e897e5":"code","63b4c856":"code","f4c9f611":"code","98865eed":"code","7a6b8873":"code","e9be7518":"code","0a44ac51":"code","3f7af555":"code","181bbaec":"code","5f273dce":"code","8d453fb0":"code","26e72681":"code","8d0a0d43":"code","288a57fc":"code","c88dd8a1":"code","5909e89f":"code","842142fc":"code","8f8fa2cb":"code","958e2952":"code","c621d5fc":"code","f9e8b331":"code","fdc1afdf":"code","6ebecece":"code","a88816cd":"code","29c61de1":"code","0d5d4cd6":"code","a9c5b6bc":"code","3654be89":"code","8d57dbc1":"code","13d345f3":"code","f77ed721":"code","b963ae68":"code","0926ccee":"code","09d6c0f7":"code","71802055":"code","a9509e0e":"code","c597f57b":"code","81331d4a":"code","c856e0fb":"code","c4eefa77":"code","f94c869b":"code","90dda2b8":"code","c62dfbd1":"code","3b302155":"markdown","cdf1b4d4":"markdown","3b6251c9":"markdown","0d2e2deb":"markdown","08658844":"markdown","7beb69f8":"markdown","676bb6da":"markdown","f02134d9":"markdown","978fe321":"markdown","5f323e56":"markdown","87b3e9ba":"markdown","e4139312":"markdown","3236b977":"markdown","da52d467":"markdown","1cbd5dc6":"markdown","6a678115":"markdown","05fce345":"markdown","4be19d07":"markdown","6115680f":"markdown","7a47c204":"markdown","f7ed3cf8":"markdown","f5194da3":"markdown","10cdeac1":"markdown","5180ae29":"markdown","1742b24b":"markdown","4ab8c06d":"markdown","b49f59e3":"markdown","f5f2c058":"markdown","faf1416d":"markdown","2185bfc0":"markdown","93d4bbcb":"markdown","f5d92d68":"markdown","1261c957":"markdown","45617dcd":"markdown","43b6ea6c":"markdown","6f8c6bce":"markdown","67d83d63":"markdown","37d57445":"markdown","9abc2974":"markdown","030e39f7":"markdown","ae8aed41":"markdown","672b08c7":"markdown","d9086d28":"markdown","0418573a":"markdown","fbe558f7":"markdown","05c69026":"markdown","847cb576":"markdown","9db40ede":"markdown","efa5c0c1":"markdown","8dbee154":"markdown","8be0ee9d":"markdown","f6592104":"markdown","c13add59":"markdown","390c9cab":"markdown","c9d4ef64":"markdown","fbe9c3da":"markdown","199cf719":"markdown","85d4c6dd":"markdown","88b4de63":"markdown","2cb02b31":"markdown","7247d1f4":"markdown","d060834d":"markdown","72d86da1":"markdown","448b22fe":"markdown","4da001e0":"markdown","ab763ca9":"markdown","d967fadf":"markdown","067e0856":"markdown","edd82338":"markdown","9fca3403":"markdown","022eedba":"markdown","e20a665a":"markdown","1f2d6ff8":"markdown","5fcd645d":"markdown","ff7b13e3":"markdown","da5aff55":"markdown","8b3ac904":"markdown","6f069ad9":"markdown","b3cdae1a":"markdown","92a26994":"markdown","e27c8755":"markdown","fbaad002":"markdown","f263e42f":"markdown","05b40111":"markdown","b5de7407":"markdown","182a963a":"markdown","0867b64d":"markdown","3b168630":"markdown","2bf432b1":"markdown","6310dde7":"markdown","293354b2":"markdown","281fc478":"markdown","97771205":"markdown","00dfa7cf":"markdown","382013df":"markdown","58372668":"markdown","56066506":"markdown","76c4e1e6":"markdown","25a473ba":"markdown","0b893056":"markdown","1bae5787":"markdown","21ee0c61":"markdown","728f36eb":"markdown","f8774e0d":"markdown","5771edb0":"markdown"},"source":{"12c94930":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# To check model performance\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n\n# Removes the limit from the number of displayed columns and rows.\n# This is so I can see the entire dataframe when I print it\npd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\npd.set_option('display.max_rows', 200)\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","76456147":"# read data into pandas dataframe from  the csv file\ndf_main = pd.read_csv('..\/input\/cars4u\/used_cars_data.csv')\ndf_used_cars = df_main.copy()","ea210779":"df_used_cars.sample(5).T","8cc97f35":"df_used_cars.describe().T","1e164c48":"df_used_cars.shape","7e1abfa8":"df_used_cars.dtypes","573745ee":"df_used_cars.isnull().sum()","817d1fb7":"df_used_cars['Brand'] = df_used_cars['Name'].str.split().str[0].str.upper()","97055917":"df_used_cars['Brand'].unique()","71b92042":"df_used_cars[df_used_cars['Brand'].isin(['MINI','JEEP','HINDUSTAN', 'LAND'])].sample(25).T","08d53b9f":"df_used_cars['Brand'] = df_used_cars['Brand']\\\n.str.replace('LAND', 'LAND ROVER')\\\n.str.replace('MINI', 'MINI COOPER')\\\n.str.replace('HINDUSTAN', 'HINDUSTAN MOTORS')\\\n.str.replace('JEEP', 'JEEP COMPASS')","b343e8cc":"df_used_cars['Model'] = df_used_cars['Name'].str.upper().str.split().str[1:].str.join(' ')\\\n.str.replace('ROVER ', '')\\\n.str.replace('COOPER ', '')\\\n.str.replace('MOTORS', '')\\\n.str.replace('COMPASS', '')","1af5eaf0":"df_used_cars['Model Name'] = df_used_cars['Model'].str.split(' ').str[0]","579b0548":"df_used_cars.sample(15).T","746eee4f":"df_used_cars['Brand'].unique()","8afac0c5":"df_used_cars.groupby(['Brand'])['Price'].agg({'median','mean','max'}).sort_values(by='max', ascending = False)","69c300f2":"# Creating brand class looking at the prices and using knowledge (google)\n\n# Above 50 Lakhs\nHigh = ['LAND ROVER',\n        'LAMBORGHINI',\n        'JAGUAR',\n        'BMW',\n        'MERCEDES-BENZ',\n        'PORSCHE',\n        'AUDI',\n        'BENTLEY',\n        'FORD']\n\n# Above 20 Lakhs to 50 Lakhs\nMid = ['MINI COOPER',\n        'TOYOTA',\n        'VOLVO',\n        'MITSUBISHI',\n        'SKODA',\n        'VOLKSWAGEN',\n        'JEEP COMPASS',\n        'HYUNDAI']\n\n# Upto 20Lakhs\nLow = ['ISUZU',\n        'TATA',\n        'MAHINDRA',\n        'HONDA',\n        'RENAULT',\n        'FORCE',\n        'MARUTI',\n        'CHEVROLET',\n        'NISSAN',\n        'FIAT',\n        'DATSUN',\n        'SMART',\n        'AMBASSADOR',\n        'HINDUSTAN MOTORS',\n        'OPELCORSA']","55e24774":"# Function to create brand class column using the above list\ndef classify(brand):\n    if brand in High:\n        return 'High'\n    elif brand in Mid:\n        return 'Mid'\n    elif brand in Low:\n        return 'Low'\n    else:\n        return 'is_missing'","b67a6349":"df_used_cars['Brand Class'] = df_used_cars['Brand'].apply(lambda brand: classify(brand))","223185ce":"df_used_cars['Brand Class'].unique()","1bfb055d":"df_used_cars['Mileage'].str.split(' ').str[1].unique()","66275a64":"df_used_cars['Power'].str.split(' ').str[1].unique()","b9720bb2":"df_used_cars['Engine'].str.split(' ').str[1].unique()","24775746":"df_used_cars[df_used_cars['Mileage'].isnull()]","ed3e7236":"df_used_cars[df_used_cars['Power'].isnull()]","46cace7e":"df_used_cars[df_used_cars['Engine'].isnull()]","eb64bf16":"df_used_cars['Mileage'] = df_used_cars['Mileage'].str.replace(' km\/kg', '').str.replace(' kmpl','')\ndf_used_cars['Power'] = df_used_cars['Power'].str.replace(' bhp', '')\ndf_used_cars['Engine'] = df_used_cars['Engine'].str.replace(' CC', '')","7fcd403a":"df_used_cars.isnull().sum()","702fcef7":"df_used_cars.sample(5).T","3fa92e67":"df_used_cars[(df_used_cars['Mileage'].astype(str).str.split('.').str[0] == '0') \\\n             | (df_used_cars['Mileage'].astype(str) == 'null')]['Mileage'].count()","b3f2e72a":"df_used_cars[(df_used_cars['Engine'].astype(str).str.split('.').str[0] == '0') \\\n             | (df_used_cars['Engine'].astype(str) == 'null')]['Engine'].count()","df167b12":"df_used_cars[(df_used_cars['Power'].astype(str).str.split('.').str[0] == '0') \\\n             | (df_used_cars['Power'].astype(str) == 'null')]['Power'].count()","03c767e0":"df_used_cars['Car Age'] = 2021 - df_used_cars['Year']","15d6dc66":"df_used_cars['New_Price'].str.split(' ').str[1].unique()","b9969fa9":"# Function to convert price to Lakhs\ndef price_point_conv(price):\n    if isinstance(price, str):\n        if price.split(' ')[1] == 'Lakh':\n            multiplier = 1\n        elif price.split(' ')[1] == 'Cr':\n            multiplier = 100\n        return float(price.replace(' Lakh', '').replace(' Cr','')) * multiplier\n    else:\n        return np.nan","004d6a91":"df_used_cars['New_Price'] = df_used_cars['New_Price'].apply(price_point_conv)","3dfe4215":"df_used_cars.sample(5)","b6b9203a":"df_used_cars = df_used_cars.drop(['S.No.','Model'], axis=1)","88ceda33":"df_used_cars.info()","9d2b3f9c":"df_used_cars.sample(5)","c155eb33":"df_used_cars.loc[(df_used_cars['Mileage'].astype(str).str.split('.').str[0] == '0') \\\n             | (df_used_cars['Mileage'].astype(str) == 'null'), 'Mileage'] = np.nan","00901c29":"df_used_cars.loc[(df_used_cars['Power'].astype(str).str.split('.').str[0] == '0') \\\n             | (df_used_cars['Power'].astype(str) == 'null'), 'Power'] = np.nan","3edefada":"df_used_cars.loc[(df_used_cars['Engine'].astype(str).str.split('.').str[0] == '0') \\\n             | (df_used_cars['Engine'].astype(str) == 'null'), 'Engine'] = np.nan","17fa31ec":"df_used_cars['Name'] = df_used_cars['Name'].astype('str')\ndf_used_cars['Location'] = df_used_cars['Location'].astype('category')\ndf_used_cars['Fuel_Type'] = df_used_cars['Fuel_Type'].astype('category')\ndf_used_cars['Transmission'] = df_used_cars['Transmission'].astype('category')\ndf_used_cars['Owner_Type'] = df_used_cars['Owner_Type'].astype('category')\ndf_used_cars['Mileage'] = df_used_cars['Mileage'].astype('float')\ndf_used_cars['Power'] = df_used_cars['Power'].astype('float')\ndf_used_cars['Engine'] = df_used_cars['Engine'].astype('float')\ndf_used_cars['Brand'] = df_used_cars['Brand'].astype('str')\ndf_used_cars['Model Name'] = df_used_cars['Model Name'].astype('str')\ndf_used_cars['Brand Class'] = df_used_cars['Brand Class'].astype('category')","6445ee8e":"df_used_cars.describe().T","3736e5b1":"plt.style.use('ggplot')\nnumeric_columns = df_used_cars.select_dtypes(include=np.number).columns.tolist()\nplt.figure(figsize=(20,40))\n\nfor i, col in enumerate(numeric_columns):\n                     plt.subplot(10,3,i+1)\n                     sns.distplot(df_used_cars[col],kde=True,color='green')\n                     plt.tight_layout()\n                     plt.title(str(i+1)+ ': '+ col + ' distribution', color='black')","f9307dde":"cat_columns = df_used_cars.select_dtypes(exclude=np.number).columns.tolist()\ncat_columns.remove('Model Name')\ncat_columns.remove('Name')\n\nplt.figure(figsize=(20,25))\n\nfor i, col in enumerate(cat_columns):\n    plt.subplot(4,2,i+1)\n    order = df_used_cars[col].value_counts(ascending=False).index    \n    ax=sns.countplot(x=col, data=df_used_cars , order=order, palette='pastel')\n    for p in ax.patches:\n       percentage = '{:.1f}%'.format(100 * p.get_height()\/len(df_used_cars[col]))\n       x = p.get_x() + p.get_width() \/ 2 - 0.05\n       y = p.get_y() + p.get_height() + 20\n       plt.annotate(percentage, (x, y),ha='center', color='black')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.title(col, color='black')","9b50ac93":"plt.style.use('ggplot')\nnumeric_columns = df_used_cars.select_dtypes(include=np.number).columns.tolist()\nnumeric_columns.remove('Price')\nplt.figure(figsize=(20,60))\n\nfor i, col in enumerate(numeric_columns):\n                     plt.subplot(8,2,i+1)\n                     sns.scatterplot(data=df_used_cars, x=col, y='Price', color='green', alpha=0.5)\n                     plt.tight_layout()\n                     plt.title(str(i+1)+ ': '+ col + ' vs Price Distribution', color='black')","918423cd":"# counting the number of missing values per row\nnum_missing = df_used_cars.isnull().sum(axis=1)\nnum_missing.value_counts()","2eb12271":"#Investigating how many missing values per row are there for each variable\nfor n in num_missing.value_counts().sort_index().index:\n    if n > 0:\n        print(\"*\" *30,f'\\nFor the rows with exactly {n} missing values, NAs are found in:')\n        n_miss_per_col = df_used_cars[num_missing == n].isnull().sum()\n        print(n_miss_per_col[n_miss_per_col > 0])\n        print('\\n\\n')","5dc3a9e0":"df_used_cars['Engine']=df_used_cars.groupby(['Name','Year'])['Engine'].apply(lambda x:x.fillna(x.median()))\ndf_used_cars['Power']=df_used_cars.groupby(['Name','Year'])['Power'].apply(lambda x:x.fillna(x.median()))\ndf_used_cars['Mileage']=df_used_cars.groupby(['Name','Year'])['Mileage'].apply(lambda x:x.fillna(x.median()))","139df527":"df_used_cars.isnull().sum()","7db54d11":"df_used_cars['Engine']=df_used_cars.groupby(['Brand','Model Name'])['Engine'].apply(lambda x:x.fillna(x.median()))\ndf_used_cars['Power']=df_used_cars.groupby(['Brand','Model Name'])['Power'].apply(lambda x:x.fillna(x.median()))\ndf_used_cars['Mileage']=df_used_cars.groupby(['Brand','Model Name'])['Mileage'].apply(lambda x:x.fillna(x.median()))","4036a490":"df_used_cars.isnull().sum()","719e39a0":"df_used_cars['Power']=df_used_cars.groupby(['Brand','Year'])['Power'].apply(lambda x:x.fillna(x.median()))\ndf_used_cars['Mileage']=df_used_cars.groupby(['Brand','Year'])['Mileage'].apply(lambda x:x.fillna(x.median()))","e68a3f96":"df_used_cars.isnull().sum()","55a51be8":"df_used_cars['Power']=df_used_cars.groupby(['Brand'])['Power'].apply(lambda x:x.fillna(x.median()))\ndf_used_cars['Mileage']=df_used_cars.groupby(['Brand'])['Mileage'].apply(lambda x:x.fillna(x.median()))","40ca307d":"df_used_cars.isnull().sum()","09883af4":"df_used_cars[df_used_cars['Mileage'].isnull()]","a48b2a52":"df_used_cars[df_used_cars['Power'].isnull()]","cafc4905":"#df_used_cars[(df_used_cars['Fuel_Type'] == 'Diesel') & \\\n#            (df_used_cars['Engine'] >= 799.0)]['Mileage'].median()","de344b54":"#df_used_cars['Mileage'] = df_used_cars['Mileage'].fillna(df_used_cars[(df_used_cars['Fuel_Type'] == 'Diesel') & \\\n#            (df_used_cars['Engine'] >= 799.0)]['Mileage'].median())","c9fc9ce8":"#df_used_cars[(df_used_cars['Fuel_Type'] == 'Diesel') & \\\n#            (df_used_cars['Engine'] >= 700.0)& \\\n#            (df_used_cars['Engine'] <= 800.0)]['Power'].median()","4ce747ba":"#df_used_cars[(df_used_cars['Fuel_Type'] == 'Diesel') & \\\n#            (df_used_cars['Engine'] >= 1900.0)& \\\n#            (df_used_cars['Engine'] <= 2000.0)]['Power'].median()","6101cc17":"#df_used_cars.loc[(df_used_cars['Power'].isnull()) & (df_used_cars['Brand'] == 'SMART'),'Power'] = \\\n#df_used_cars[(df_used_cars['Fuel_Type'] == 'Diesel') & \\\n#            (df_used_cars['Engine'] >= 700.0)& \\\n#            (df_used_cars['Engine'] <= 800.0)]['Power'].median()","4cb8dad7":"#df_used_cars.loc[(df_used_cars['Power'].isnull()) & (df_used_cars['Brand'] == 'HINDUSTAN MOTORS'),'Power'] = \\\n#df_used_cars[(df_used_cars['Fuel_Type'] == 'Diesel') & \\\n#            (df_used_cars['Engine'] >= 1900.0)& \\\n#            (df_used_cars['Engine'] <= 2000.0)]['Power'].median()","8ca31bb1":"sns.boxplot(df_used_cars['Seats'])","39661999":"df_used_cars['Seats'].value_counts().sort_values(ascending=False)","2fd34b9d":"df_used_cars['Seats']=df_used_cars.groupby(['Name','Year'])['Seats'].apply(lambda x:x.fillna(x.median()))","bd5cf75b":"df_used_cars['Seats']=df_used_cars.groupby(['Name'])['Seats'].apply(lambda x:x.fillna(x.median()))","2bf077ce":"df_used_cars['Seats']=df_used_cars.groupby(['Brand','Model Name'])['Seats'].apply(lambda x:x.fillna(x.median()))","81d902ea":"df_used_cars.isnull().sum()","cbc4933f":"df_used_cars[df_used_cars['Seats'].isnull()]","b37e8356":"df_used_cars['Seats'] = df_used_cars['Seats'].fillna(5)","a7f93d9f":"df_used_cars.isnull().sum()","cf9fb503":"# Filling in based on Median new price by group of Name and Year\ndf_used_cars['New_Price']=df_used_cars.groupby(['Name','Year'])['New_Price'].apply(lambda x:x.fillna(x.median()))","b0e74529":"df_used_cars['New_Price'].isnull().sum()","ea22dea7":"# Filling in based on Median new price by group of Brand and Model Name\ndf_used_cars['New_Price']=df_used_cars.groupby(['Brand','Model Name'])['New_Price'].apply(lambda x:x.fillna(x.median()))","d3fe2324":"df_used_cars['New_Price'].isnull().sum()","e34e7542":"# Filling in based on Median new price by group of Brand\ndf_used_cars['New_Price']=df_used_cars.groupby(['Brand'])['New_Price'].apply(lambda x:x.fillna(x.median()))","dc542d60":"# Checking how many values are still blank\ndf_used_cars['New_Price'].isnull().sum()","1890f34c":"# Checking if there is a pattern\ndf_used_cars[df_used_cars['New_Price'].isnull()]['Brand'].unique()","a00e3ede":"# Checking records where new price is unavailable but price is available\ndf_used_cars[(df_used_cars['New_Price'].isnull()) & (~df_used_cars['Price'].isnull())]","cc627e38":"# This could have been a step to impute the values but it seems way too much assumption\n#df_used_cars['New_Price'] = df_used_cars['New_Price'].fillna(df_used_cars['Price'])","1a9b19c5":"df_used_cars.isnull().sum()","e04bf956":"df_used_cars.dropna(inplace=True, axis=0)","86211c15":"df_used_cars.isnull().sum()","8f396131":"df_used_cars.describe()","08ab1d87":"# Checking the heatmap of correlations to understand important features\n\nplt.figure(figsize=(15,10))\nsns.heatmap(data=df_used_cars.corr(), annot=True, cmap='YlGnBu');","058865d5":"# Pair plot of the numeric variables to understand the correlation and importance\n\nsns.pairplot(data=df_used_cars, corner = False, diag_kind='kde');","c1f6c9c2":"# The function plots distribution of quantitative features by qualitative feature\n \ndef bivariate_analysis(df, x, cat_list):\n    fig, axes=plt.subplots(int(len(cat_list)\/2 if len(cat_list) % 2 == 0 else (len(cat_list)+1)\/2), 2, \\\n                           figsize=(20,40))\n    i = 0\n    for h in cat_list:\n        #sns.countplot(data=df, x=x, hue=h)\n        sns.boxplot(data=df, x=h, y=x, showmeans=True, ax=axes[i\/\/2, i%2]).set(title=x + ' By ' + h)\n        i+=1","2b09d1e8":"df_used_cars.sample(5)","bc273dfb":"# Plot quantitative value distribution box using box chart by Location\n\nbivariate_analysis(df_used_cars, x='Location', \\\n                   cat_list=['Mileage', 'Engine', 'Power', 'New_Price', 'Price', 'Car Age'])","37a5415a":"# Plot quantitative value distribution box using box chart by Fuel Type\n\nbivariate_analysis(df_used_cars, x='Fuel_Type', \\\n                   cat_list=['Mileage', 'Engine', 'Power', 'New_Price', 'Price', 'Car Age'])","4511bd77":"# Plot quantitative value distribution box using box chart by Transmission\n\nbivariate_analysis(df_used_cars, x='Transmission', \\\n                   cat_list=['Mileage', 'Engine', 'Power', 'New_Price', 'Price', 'Car Age'])","62cb6632":"# Plot quantitative value distribution box using box chart by Owner Type\n\nbivariate_analysis(df_used_cars, x='Owner_Type', \\\n                   cat_list=['Mileage', 'Engine', 'Power', 'New_Price', 'Price', 'Car Age'])","5adc3e66":"# Plot quantitative value distribution box using box chart by Brand Class\n\nbivariate_analysis(df_used_cars, x='Brand Class', \\\n                   cat_list=['Mileage', 'Engine', 'Power', 'New_Price', 'Price', 'Car Age'])","07cdd0f2":"# The function is to plot categorical analysis between two quantitative features for multiple values of a \n# qualitative feature, categorized per another qualitative feature\n\ndef categorical_plots(df, x, y, hue, kind, size):\n    '''\n    Signature:\n    categorical_plots(df, x, y, hue, kind, size):\n\n    Parameters:\n    df = pandas dataframe\n    x = x axis, quantitative feature for scatter and line kind, qualitative feature for line kind\n    y = y axis, quantitative feature\n    hue = hue parameter by categorical\/qualitative feature, unused for bar kind\n    kind = {scatter|bar|line}\n    size = tuple (width, height) format\n    '''\n    plt.figure(figsize=size)\n    if kind == 'scatter':\n        plt.title(x + ' vs. ' + y + ' by ' + hue)\n        sns.scatterplot(data=df, x=x, y=y, hue=hue); # this will plot scatter charts\n    elif kind == 'line':\n        plt.title(x + ' vs. ' + y + ' by ' + hue)\n        sns.lineplot(data = df, x = x, y = y, hue = hue); # this will plot line charts\n    elif kind == 'bar':\n        plt.title(x + ' vs. ' + y)\n        sns.barplot(data = df, x = x, y = y, hue=None) # this will plot bar charts","cac67739":"categorical_plots(df_used_cars, 'Price', 'Engine', 'Transmission', 'scatter', (15, 10))","07261ebf":"categorical_plots(df_used_cars, 'Price', 'Power', 'Transmission', 'scatter', (15,10))","15030cc7":"categorical_plots(df_used_cars, 'Price', 'Mileage', 'Transmission', 'scatter', (15,10))","d5c295b8":"categorical_plots(df_used_cars, 'Year', 'Price', 'Transmission', 'line', (15,7))","51162790":"categorical_plots(df_used_cars, 'Year', 'Price', 'Fuel_Type', 'line', (15,7))","d2b5ec22":"df_used_cars[df_used_cars['Power'].isnull()]","d816fe24":"categorical_plots(df_used_cars, 'Year', 'Price', 'Owner_Type', 'line', (15,7))","22795c0e":"# Plot Yearly Price variation by each type of owner\n\nfor val in df_used_cars['Owner_Type'].unique():\n    categorical_plots(df_used_cars[df_used_cars['Owner_Type'] == val], 'Year', 'Price', 'Owner_Type', 'scatter', (15,4))\n    plt.title('Year vs. Price by Owner Type: '+ val)","50084d06":"categorical_plots(df_used_cars, 'Seats', 'Price', hue = 'Seats', kind='bar', size=(15,7))","7f230025":"categorical_plots(df_used_cars, 'Location', 'Price', hue = 'Location', kind='bar', size=(15,7))","f8f60ba4":"categorical_plots(df_used_cars, 'Brand Class', 'Price', hue = 'Brand Class', kind='bar', size=(10,7))","75289e17":"categorical_plots(df_used_cars, 'Brand', 'Price', hue = 'Brand', kind='bar',size=(15,7))\nplt.xticks(rotation = -90);","4be04873":"# Plot count charts by Brands per Car Brand Class\n\nfig, axes = plt.subplots(3,1,figsize=(20, 20))\ni = 0\nfor val in df_used_cars['Brand Class'].unique():\n    order = df_used_cars[df_used_cars['Brand Class']==val]['Brand'].value_counts(ascending=False).index    \n    sns.countplot(x='Brand', data=df_used_cars[df_used_cars['Brand Class']==val] , order=order, palette='pastel', ax=axes[i]).set(title='Brand per Class: ' + val)\n    \n    i+=1","323385bc":"categorical_plots(df_used_cars, 'Car Age', 'Price', hue = 'Car Age', kind='bar',size=(15,4))","07d6b709":"px.scatter(data_frame=df_used_cars, x='New_Price', y='Price', color = 'Car Age')","19bad1fc":"# Check if columns have non positive values, if they have we can't log transform\n\ndef check_log_transformability(df, cols):\n    '''\n    Signature:\n    check_log_transformability(df, cols): validates if the columns are log transformable\n    \n    parameters:\n    df = pandas dataframe\n    cols = list of columns to be performed log transformation on\n    '''\n    for colname in cols:\n        plt.hist(df[colname], bins=50)\n        plt.title(colname + ' Distribution')\n        plt.show()\n        print(colname + ' data less or equal to zero in ' + str(np.sum(df[colname] <= 0)) + ' rows')\n        print('Skewness:  {}'.format(df[colname].skew()))\n        print('Kurtosis:  {}'.format(df[colname].kurt()))","c7cdf942":"check_log_transformability(df_used_cars, ['Kilometers_Driven', 'Price', 'New_Price'])","77e897e5":"# Function to perform log transformation\n\ndef log_transform(df, cols):\n    for colname in cols:\n        df[colname + '_log'] = np.log(df[colname])\n        sns.histplot(data=df, x=colname + '_log', bins=50, kde=True, color='green')\n        plt.title(colname + ' Distribution')\n        plt.show()","63b4c856":"log_transform(df_used_cars, ['Kilometers_Driven', 'Price', 'New_Price'])","f4c9f611":"df_used_cars.sample(5)","98865eed":"df_used_cars.drop(['Name', 'Year', 'Brand', 'Model Name'], axis=1, inplace=True)","7a6b8873":"df_used_cars.sample(5)","e9be7518":"# Function to 1-hot encode categorical variables and drop the first encoded category per column\n\ndef encode_cat_vars(df, cols):\n    '''\n    Signature: encode_cat_vars(df, cols): encodes categorical variables in a dataframe\n    \n    Parameters:\n    df = a pandas dataframe\n    cols = columns to encode\n    '''\n    \n    df = pd.get_dummies(\n        df,\n        columns=cols,\n        drop_first=True,\n    )\n    return df","0a44ac51":"df_used_cars_encoded = encode_cat_vars(df_used_cars, ['Location', 'Fuel_Type', 'Transmission'])","3f7af555":"df_used_cars_encoded['Owner_Type'] = df_used_cars_encoded['Owner_Type'].replace({\"First\":1,\"Second\":2,\"Third\": 3,\"Fourth & Above\":4})","181bbaec":"df_used_cars_encoded['Brand Class'] = df_used_cars_encoded['Brand Class'].replace({\"Low\":1,\"Mid\":2,\"High\":3})","5f273dce":"df_used_cars_encoded.sample(5)","8d453fb0":"df_used_cars_encoded.drop(['Kilometers_Driven', 'Price', 'New_Price'], axis=1, inplace=True)","26e72681":"# RMSE\ndef rmse(predictions, targets):\n    return np.sqrt(((targets - predictions) ** 2).mean())\n\n\n# MAPE\ndef mape(predictions, targets):\n    return np.mean(np.abs((targets - predictions)) \/ targets) * 100\n\n\n# MAE\ndef mae(predictions, targets):\n    return np.mean(np.abs((targets - predictions)))\n\n\n# Adjusted R square\ndef adj_r2_score(predictors, targets, predictions):\n    r2 = r2_score(targets, predictions)\n    n = predictors.shape[0]\n    k = predictors.shape[1]\n    return 1 - ((1 - r2) * (n - 1) \/ (n - k - 1))\n\n\n# function to compute different metrics to check performance of a regression model\ndef model_performance_regression(model, predictors, target):\n    \"\"\"\n    Function to compute different metrics to check regression model performance\n\n    model: regressor\n    predictors: independent variables\n    target: dependent variable\n    \"\"\"\n\n    # predicting using the independent variables\n    pred = model.predict(predictors)\n\n    r2 = r2_score(target, pred)  # to compute R-squared\n    adjr2 = adj_r2_score(predictors, target, pred)  # to compute adjusted R-squared\n    rmse_score = rmse(target, pred)  # to compute RMSE\n    mae_score = mae(target, pred)  # to compute MAE\n    mape_score = mape(target, pred)  # to compute MAPE\n\n    # creating a dataframe of metrics\n    df_perf = pd.DataFrame(\n        {\n            \"RMSE\": rmse_score,\n            \"MAE\": mae_score,\n            \"MAPE\": mape_score,\n            \"R-squared\": r2,\n            \"Adj. R-squared\": adjr2,\n        },\n        index=[0],\n    )\n\n    return df_perf","8d0a0d43":"x = df_used_cars_encoded.drop(['Price_log', 'New_Price_log'], axis=1)","288a57fc":"y = df_used_cars_encoded['Price_log']","c88dd8a1":"x.sample(5)","5909e89f":"y.sample(5)","842142fc":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)","8f8fa2cb":"regression_model = LinearRegression()\nregression_model.fit(x_train, y_train)","958e2952":"coef_df = pd.DataFrame(\n    np.append(regression_model.coef_, regression_model.intercept_),\n    index=x_train.columns.tolist() + [\"Intercept\"],\n    columns=[\"Coefficients\"],\n)\ncoef_df.sort_values(by='Coefficients')","c621d5fc":"model_performance_regression(regression_model, x_train, y_train)","f9e8b331":"model_performance_regression(regression_model, x_test, y_test)","fdc1afdf":"x2 = df_used_cars_encoded.drop(['Price_log'], axis=1)","6ebecece":"y2 = df_used_cars_encoded['Price_log']","a88816cd":"x2.sample(5)","29c61de1":"y2.sample(5)","0d5d4cd6":"x2_train, x2_test, y2_train, y2_test = train_test_split(x2, y2, test_size=0.3, random_state=1)","a9c5b6bc":"regression_model2 = LinearRegression()\nregression_model2.fit(x2_train, y2_train)","3654be89":"coef_df2 = pd.DataFrame(\n    np.append(regression_model2.coef_, regression_model2.intercept_),\n    index=x2_train.columns.tolist() + [\"Intercept\"],\n    columns=[\"Coefficients\"],\n)\ncoef_df2.sort_values(by='Coefficients')","8d57dbc1":"model_performance_regression(regression_model2, x2_train, y2_train)","13d345f3":"model_performance_regression(regression_model2, x2_test, y2_test)","f77ed721":"def mean_of_residuals(model, predictors, target):\n    residuals = target - model.predict(predictors)\n    mean_residuals = round(np.mean(residuals), 3)\n    print(\"Mean of Residuals {}\".format(mean_residuals))","b963ae68":"mean_of_residuals(regression_model2, x2_train, y2_train)","0926ccee":"mean_of_residuals(regression_model2, x2_test, y2_test)","09d6c0f7":"def check_homoscedasticity(model, predictors, target):\n    y_pred = model.predict(predictors)\n    residuals = target - y_pred\n    \n    p = plt.figure(figsize=(15,7))\n    p = sns.scatterplot(y_pred,residuals)\n    plt.xlabel('Predicted Values')\n    plt.ylabel('Residuals')\n    p = sns.lineplot([-2,5],[0,0],color='blue')\n    p = plt.title('Residuals vs fitted values plot for homoscedasticity check')","71802055":"check_homoscedasticity(regression_model2, x2_train, y2_train)","a9509e0e":"check_homoscedasticity(regression_model2, x2_test, y2_test)","c597f57b":"import statsmodels.stats.api as sms\nfrom statsmodels.compat import lzip\n\ndef goldfeld_quandt(model, predictors, target):\n    name = ['F statistic', 'p-value']\n    y_pred = model.predict(predictors)\n    residuals = target = y_pred\n    test = sms.het_goldfeldquandt(residuals, predictors)\n    print(lzip(name, test))","81331d4a":"goldfeld_quandt(regression_model2, x2_train, y2_train)","c856e0fb":"goldfeld_quandt(regression_model2, x2_test, y2_test)","c4eefa77":"def check_residual_normalcy(model, predictors, target):\n    y_pred = model.predict(predictors)\n    residuals = target - y_pred\n    sns.distplot(residuals, kde=True)\n    plt.title('Normality of error terms\/residuals')","f94c869b":"check_residual_normalcy(regression_model2, x2_test, y2_test)","90dda2b8":"y_pred = regression_model2.predict(x2_test)\nresiduals = y2_test - y_pred\n\nplt.figure(figsize=(15,5))\np = sns.lineplot(y_pred,residuals,marker='o',color='blue')\nplt.xlabel('Predicted values')\nplt.ylabel('Residuals')\nplt.ylim(-3,3)\nplt.xlim(-1,5)\np = sns.lineplot([-1,5],[0,0],color='red')\np = plt.title('Residuals vs fitted values plot for autocorrelation check')","c62dfbd1":"from statsmodels.stats import diagnostic as diag\nmin(diag.acorr_ljungbox(residuals , lags = 40)[1])","3b302155":"##### 3.7.2. Data Type conversions","cdf1b4d4":"##### Splitting the dataset into traing and testing sets","3b6251c9":"Checking for autocorrelation To ensure the absence of autocorrelation we use Ljungbox test.\n\nNull Hypothesis: Autocorrelation is absent.\nAlternative Hypothesis: Autocorrelation is present.","0d2e2deb":"##### Building the regression model","08658844":"##### Level 1: Fill gap by Name and Year","7beb69f8":"#### Observation:\n1. Power has 129 values as 0 or null","676bb6da":"##### Level 3: Fill gap by Brand and Year only","f02134d9":"#### Observation:\n1. Even though mileage has 2 nulls, there are data with 0.0 in that column, that will require some treatment most probably","978fe321":"##### Observation:\n1. Auto-transmission cars are costlier","5f323e56":"#### 3.1. Extract Brand, Model Name, and Model Description from Name","87b3e9ba":"##### Maruti Estilo LXI is a 5 seater car, and most of the cars are 5 seater in the dataset, thus imputing 5 for filling in further.","e4139312":"## 10. Observations from the model","3236b977":"#### Age of Car vs. Price","da52d467":"## 7. Log transform skewed columns","1cbd5dc6":"##### Observation:\n1. CNG cars provide better mileage\n2. Diesel cars generally have better engine, more power and costlier, although there appears to be a lot of high end Petrol cars with better engine, power, and higher cost (those are in the outliers)","6a678115":"First checking the units available in each of these columns","05fce345":"## 6. EDA: Bivariate and Multivariate","4be19d07":"#### 5.1. Exploring options to impute Mileage, Power and Engine","6115680f":"#### Location vs. Price","7a47c204":"##### Encode categorical variables","f7ed3cf8":"## 11. Recommendations","f5194da3":"#### 3.5. Add Car Age from Year","10cdeac1":"##### Price vs. Mileage by Transmission","5180ae29":"#### 3.4. Remove units from Mileage, Engine, Power","1742b24b":"##### Level 2: Fill gap by Brand and Model name","4ab8c06d":"##### Splitting the dataset to dependent and independent variables","b49f59e3":"Cars are sold at higher prices in Bangalore, Coimbatore, Kochi ","f5f2c058":"#### Convert new price data with units to unitless (by bringing Cr to Lakh)","faf1416d":"#### EDA on Variables that are correlated with Price variable","2185bfc0":"#### Observation:\n1. Most of the cars are Petrol or Diesel cars\n2. Most of the cars have manual transmission\n3. Most of the owners are first owners\n4. Only 20% cars are high end cars\n5. 50% of cars are from Maruti, Hyundai and Honda","93d4bbcb":"Auto-transmission cars are costlier and have better engine","f5d92d68":"##### Price vs. Power by Transmission","1261c957":"##### 3.7.1. Converting 0.0\/null Mileage\/Power\/Engine to Null to treat them all with FillNa()","45617dcd":"##### Goldfeld Quandt Test\n\nChecking heteroscedasticity : Using Goldfeld Quandt we test for heteroscedasticity.\n\nNull Hypothesis: Error terms are homoscedastic\nAlternative Hypothesis: Error terms are heteroscedastic.\n\nIf we want 95% confidence on our findings and tests then the p-value should be less than 0.05 to be able to reject the null hypothesis.\n\n***Goal: Check if we can reject the null hypothesis; if we can't, that would mean error terms are homoscedastic.***","43b6ea6c":"## 5. Missing Value handling","6f8c6bce":"***Owner Type and Brand Class gets a different treatment of Label Encoding since it has ordinal precedence in the data values***","67d83d63":"## 4. Exploratory Data Analysis","37d57445":"##### 9.5. No perfect multicollinearity\n\nIn regression, multicollinearity refers to the extent to which independent variables are correlated. Multicollinearity affects the coefficients and p-values, but it does not influence the predictions, precision of the predictions, and the goodness-of-fit statistics.\n\nWe have already checked this in heatmap.","9abc2974":"Auto-transmission cars are costlier by manual transmission cars provide more mileage","030e39f7":"***The residual terms are pretty much normally distributed for the number of test points we took.***","ae8aed41":"## 3. Feature Engineering","672b08c7":"##### Splitting the dataset into traing and testing sets","d9086d28":"##### Observation:\n1. Maruti, Honda cars are very popular in low budget\n2. Hyundai, Toyota, Volkswagen are popular in mide budget\n3. Mercedes, Ford, BMW, Audi cares are very popular among high budget cars","0418573a":"The missing values can not further be filled in. Also, rows with Price column unavailable simply would not add any value since Price is the prediction target. Hence dropping rows with unavailable data now.","fbe558f7":"Older the car, lesser is the price","05c69026":"##### Coefficients and intercept in the model","847cb576":"##### 9.4. No autocorrelation\n\nThere should not be autocorrelation in the data so the error terms should not form any pattern.","9db40ede":"##### Building the regression model","efa5c0c1":"##### Performance checks (to be used later)","8dbee154":"2 seater cars are costlier","8be0ee9d":"##### Observations:\n1. High brand cars are more costlier (obviously)\n2. High class cars have better engine, and are more powerfull\n3. Low class cars give better mileage","f6592104":"#### Brand Class vs. Price","c13add59":"#### 3.6. Dropping unnecessary columns","390c9cab":"##### Drop unnecessary features","c9d4ef64":"#### Year vs. Price by Transmission","fbe9c3da":"First owned cars are always sold on a better price","199cf719":"##### Price vs. Engine by Transmission","85d4c6dd":"***Mean of residuals is close to zero***","88b4de63":"##### Coefficients and intercept in the model","2cb02b31":"##### Observations:\n1. $R^2$ score for both train and test data is ~92% in the second model\n2. Adjusted $R^2$ values are very high for both train and test dataset (~92%)\n3. Above means we could successfully explain ~92% data\n4. RMSE for train and test data are comparable, and it improved for test dataset\n5. MAE and MAPE also are comparable for train and test data, and MAPE shows improvement in test dataset\n6. Overall it appears to be a very good model","7247d1f4":"## 8. Build Model","d060834d":"1. Our linear regression model data satisfies the assumptions of linear regression\n2. With our linear regression model we have been able to capture ~92% variation in our data.\n3. The model indicates that the most significant predictors of price of used cars are:\n\n        a. Age of the car\n        b. Number of seats in the car\n        c. Power of the engine\n        d. Mileage\n        e. Kilometers Driven\n        f. Location\n        g. Fuel_Type\n        h. OwnerType\n        i. Transmission - Automatic\/Manual\n        j. New_Price - Price of new car\n    \n4. Newer cars sell for higher prices. 1 unit increase in age of the car leads to exp(0.1172) = 1.12 Lakh decrease in the price of the vehicle, when everything else is constant.\n5. As the number of seats increases, the price of the car increases - exp(0.039) = 1.04 Lakhs\n6. Mileage is negatively correlated with Price. Generally, high mileage cars are the lower budget cars.\n7. Kilometers Driven have a negative relationship with the price. A car that has been driven more will have more damages and must have undergone multiple repair and hence sell at a lower price.\n8. If the new car price was higher for a car, it is likely to have higher selling price when it is sold after use.","72d86da1":"#### Observation:\n1. There are null data for Mileage, Engine, Power, Seats\n2. Huge null data for New_Price. This is usually a key factor that determines old car price, so need to think how to impute this\n3. Price (dependent variable) also has a lots of null values","448b22fe":"#### 3.2. Generate Brand Class","4da001e0":"### Model 2: Keeping the New Price as we were able to impute most of the null values","ab763ca9":"## Linear Regression to Predict Used Car Prices\n\n#### Background & Context\n\nThere is a huge demand for used cars in the Indian Market today. As sales of new cars have slowed down in the recent past, the pre-owned car market has continued to grow over the past years and is larger than the new car market now. Cars4U is a budding tech start-up that aims to find footholes in this market.\n\nIn 2018-19, while new car sales were recorded at 3.6 million units, around 4 million second-hand cars were bought and sold. There is a slowdown in new car sales and that could mean that the demand is shifting towards the pre-owned market. In fact, some car sellers replace their old cars with pre-owned cars instead of buying new ones. Unlike new cars, where price and supply are fairly deterministic and managed by OEMs (Original Equipment Manufacturer \/ except for dealership level discounts which come into play only in the last stage of the customer journey), used cars are very different beasts with huge uncertainty in both pricing and supply. Keeping this in mind, the pricing scheme of these used cars becomes important in order to grow in the market.\n\n#### Objective\n\n1. Explore and visualize the dataset.\n2. Build a linear regression model to predict the prices of used cars.\n3. Generate a set of insights and recommendations that will help the business.\n\n\n#### Data Dictionary \n\n    S.No. : Serial Number\n    Name : Name of the car which includes Brand name and Model name\n    Location : The location in which the car is being sold or is available for purchase Cities\n    Year : Manufacturing year of the car\n    Kilometers_driven : The total kilometers driven in the car by the previous owner(s) in KM.\n    Fuel_Type : The type of fuel used by the car. (Petrol, Diesel, Electric, CNG, LPG)\n    Transmission : The type of transmission used by the car. (Automatic \/ Manual)\n    Owner : Type of ownership\n    Mileage : The standard mileage offered by the car company in kmpl or km\/kg\n    Engine : The displacement volume of the engine in CC.\n    Power : The maximum power of the engine in bhp.\n    Seats : The number of seats in the car.\n    New_Price : The price of a new car of the same model in INR Lakhs.(1 Lakh = 100, 000)\n    Price : The price of the used car in INR Lakhs (1 Lakh = 100, 000)\n\n#### Problem\n\n    - Does various predicating factors effect the price of the used car?\n    - What all independent variables effect the pricing of used cars?\n    - Does name of a car have any effect on pricing of car?\n    - How does type of Transmission effect pricing?\n    - Does Location in which the car being sold has any effect on the price?\n    - Does kilometers_Driven, Year of manufacturing have negative correlation with price of the car?\n    - Does Mileage, Engine and Power have any impact on the pricing of the car?\n    - How does number of seat, Fuel type impact the pricing?","d967fadf":"#### Observation:\nThis confirms that certain columns tend to be missing together or all nonmissing together. The missing values should be imputed for modelling.","067e0856":"#### 2.1. Explore the data","edd82338":"***Since the p-value is not less than 0.05, we can not reject the null hypothesis, hence the data is not autocorrelated.***","9fca3403":"##### Observation:\n1. Price has high correlation with Engine, Power and New Price\n2. Age and Mileage have small negative correlation with Price","022eedba":"#### Brand vs. Price","e20a665a":"#### Observation:\n1. Further refinement required for Hindustan Motors, Land Rover, Jeep Compass, Mini Cooper","1f2d6ff8":"##### 9.2. Homoscedasticity of Error\/Residual terms\n\nHomoscedasticity means that the residuals have equal or almost equal variance across the regression line. By plotting the error terms with predicted terms we can check that there should not be any pattern in the error terms.\n\n\nHomoscedacity - If the residuals are symmetrically distributed across the regression line , then the data is said to homoscedastic.\n\nHeteroscedasticity- - If the residuals are not symmetrically distributed across the regression line, then the data is said to be heteroscedastic. In this case the residuals can form a funnel shape or any other non symmetrical shape.","5fcd645d":"##### Dropping the variables which were already transformed to log","ff7b13e3":"##### 9.1. Mean of residuals\n\nResiduals as we know are the differences between the true value and the predicted value. One of the assumptions of linear regression is that the mean of the residuals should be zero. ","da5aff55":"## 9. Linear regression assumptions testing","8b3ac904":"#### 2.3. Rows and columns and data types","6f069ad9":"#### 5.3. Filling gaps in New Price","b3cdae1a":"### Model 1: Dropping the New Price column since it had huge amount of null values","92a26994":"##### 9.3. Normality of error terms\/residuals","e27c8755":"#### Observation:\n1. Mileage has 81 values as 0.0 or null","fbaad002":"#### 5.2. Null handling for seats","f263e42f":"#### Year vs. Price by Owner Type","05b40111":"#### 3.7. Data Type conversions","b5de7407":"Kilometers driven, Price and New Price were highly right skewed, hence, performing log transform on these columns","182a963a":"#### Seats vs. Price","0867b64d":"##### Level 4: Fill gap by Brand","3b168630":"#### 3.3. Convert Mileage, Power and Engine data to integers\/floats by removing unit of measurements","2bf432b1":"#### Year vs. Price by Fuel Type","6310dde7":"##### Splitting the dataset to dependent and independent variables","293354b2":"## 2. Load data to pandas dataframe","281fc478":"Great! It appears we can perform log transformation on these columns.","97771205":"Diesel cars are getting costlier every year, and they are gaining more demand due to increasing petrol prices","00dfa7cf":"##### Observations:\n1. Used car price depreciates with number of owners","382013df":"Auto-transmission cars are costlier and have better power","58372668":"#### Observation:\n1. New Price and Price appears positively correlated\n2. Car age also has negative impact on used car price\n3. Power has a positive impact on used car price\n4. Kilometers driven has negative impact of used car prices\n5. Engine has some positive correlation with Price","56066506":"Auto transmission cars are getting famous and costlier every year","76c4e1e6":"##### Observations from EDA:\n\n1. Expensive cars are in Coimbatore and Banglore.\n2. 2 Seater cars are more expensive.\n3. Deisel cars are more expensive compared to other fuel types.\n4. As expected, Newer models are costlier.\n5. Automatic transmission vehicles have a higher price than manual transmission vehicles.\n6. Vehicles with more engine capacity have higher prices.\n7. Price decreases as number of owner increases.\n8. Automatic transmission require high engine and power.\n9. Prices for Cars with fuel type as Deisel has increased with recent models.\n10. Higher price of new car means higher price of old car. But of course the used car price decreases with age of the car\n11. Engine, Power, Car Age, Mileage, Fuel Type, Location, Transmission, New Price correlates with the price","25a473ba":"## 1. Import necessary libraries","0b893056":"#### Observation:\n1. Year is slightly left skewed and hence car age is slightly right skewed\n2. Kilometers driven is heavily right skewed. Max KM driven is 6500000.00, investigation required. Also, skewness needs to be resolved (probably with log transform)\n3. Power, New Price columns are highly right skewed and requires scaling.\n4. Max price is 160 Lakhs, which looks quite high, needs investigation.\n5. Max New Price is also high 375 Lakhs, needs investigation, hopefully it's a very high end car.\n6. Power is also right skewed. Max power is 616, which again looks high, and needs investigation.\n6. Engine is also right skewed. Max engine is 5998, which again looks high, and needs investigation.\n7. Mileage distribution looks okayish\n8. Most cars in analysis have 5 seats.","1bae5787":"#### 2.4. Check null data","21ee0c61":"***Since the p-values are not less than 0.05, we can not reject the null hypothesis, hence the data is homoscedastic.***","728f36eb":"#### 2.2. Explore spread of the data","f8774e0d":"1. Chennai, Coimbatore, Hyderabad, Bangalore tending to have higher used car prices. We can focus more on these cities to grow the business more.\n\n2. Jaipur, Mumbai, Delhi, Pune, Kochi cities have relatively riskier markets. It'd be beneficial to do market research to strategize growth in these cities.\n\n3. Kolkata appears to be a very risky market for used cars. Careful investment is advised here.\n\n4. With increasing Petrol price, Diesel cars are gaining popularity. Also, Electric cars are, although new, have a very good scope in the market. We should focus on acquiring more Diesel and Electric cars.\n\n5. Number of owners depreciates the used car prices. Thus, we should not acquire cars that have traversed through too many owners. Best is to get cars from the first owner.\n\n6. As we did during pre-processing, the cars are to be categorized in High, Mid and Low brand class cars.\n    - Maruti, Honda cars are very popular in low budget\n    - Hyundai, Toyota, Volkswagen are popular in mide budget\n    - Mercedes, Ford, BMW, Audi cares are very popular among high budget cars\n    \n7. Overall, Maruti, Hyundai and Honda cars make almost 48% of number of cars sold. This can also be a focus point.\n\n8. Auto transmission cars are sold for more price; we should concentrate on acquiring more auto-transmission cars.\n\n9. The model can provide an esimated price for a newly acquired used can, so that it is never re-sold at less than the predicted price.","5771edb0":"Price and Kilometers driven both are right skewed"}}