{"cell_type":{"9e4e1a21":"code","970a0982":"code","e8d1a2eb":"code","ee61e3d0":"code","7f68c9ca":"code","d59669fe":"code","57668ada":"code","e7370278":"code","4e0545ce":"code","6e5635b1":"code","ac08b0c7":"code","9168797c":"code","ac7ecc57":"code","a4fd7b89":"code","d12094ab":"code","1e5d2d75":"code","09ae95ab":"code","2cfb11fd":"code","27922773":"code","26dbdb7e":"code","7fabfc1e":"code","49ceb561":"markdown","1c2026d8":"markdown","fa7a27ce":"markdown","eb15226e":"markdown","67bb7966":"markdown","7a7e4bce":"markdown"},"source":{"9e4e1a21":"# Utilities\nimport datetime\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Numericals\nimport numpy as np\nimport pandas as pd\n\n# Plotting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style(\"darkgrid\")\n%matplotlib inline\n\n# TensorFlo 2.0\n!pip install -q tensorflow==2.0.0-alpha0\nimport tensorflow as tf\n# Load the TensorBoard notebook extension\n%load_ext tensorboard.notebook\n# Imports for the HParams plugin from tensorboard\nfrom tensorboard.plugins.hparams import api_pb2\nfrom tensorboard.plugins.hparams import summary as hparams_summary\nfrom google.protobuf import struct_pb2\n\n# Clear any logs from previous runs\n!rm -rf .\/logs\/ ","970a0982":"train_data = pd.read_csv(\"..\/input\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/test.csv\")\ntrain_data.info()\nprint('_'*50)\ntest_data.info()","e8d1a2eb":"train_data.head()","ee61e3d0":"train_data.describe()","7f68c9ca":"for col in train_data.columns:\n    if len(train_data[col].dropna()) <= (0.7 * len(train_data)):\n        train_data.drop(columns=[col], inplace=True)\n    else:\n        train_data.dropna(axis=0, subset=[col],inplace=True)\n\nfor col in test_data.columns:\n    if len(test_data[col].dropna()) <= (0.7 * len(test_data)):\n        test_data.drop(columns=[col], inplace=True)\n    else:\n        test_data[col].fillna(value=test_data[col].mode()[0] ,inplace=True)","d59669fe":"train_data.info()\nprint('_'*50)\ntest_data.info()","57668ada":"# Just to see the correlation\nplt.figure(figsize=(10,8))\nsns.heatmap(train_data.corr(method='pearson'),annot=True,cmap='YlGnBu',fmt='.2f',linewidths=2)","e7370278":"feature_columns = []\n\n# numeric cols\nfor header in ['Age', 'Fare']:\n  feature_columns.append(tf.feature_column.numeric_column(header))\n\n# bucketized cols\nage = tf.feature_column.numeric_column(\"Age\")\nage_buckets = tf.feature_column.bucketized_column(age, boundaries=[5, 10, 20, 30, 40, 50, 60, 70, 80])\nfeature_columns.append(age_buckets)\n\n# indicator cols\ncategorical_cols = [\"Sex\", \"Embarked\", \"Pclass\", \"SibSp\", \"Parch\"]\nfor col in categorical_cols:\n    train_data[col] = train_data[col].apply(str)\n    test_data[col] = test_data[col].apply(str)\n    cat_column_with_vocab = tf.feature_column.categorical_column_with_vocabulary_list(\n          col, list(train_data[col].value_counts().index.values))\n    one_hot = tf.feature_column.indicator_column(cat_column_with_vocab)\n    feature_columns.append(one_hot)\n\n\n# embedding cols\nticket = tf.feature_column.categorical_column_with_hash_bucket(\"Ticket\", hash_bucket_size=1000)\nticket_embedding = tf.feature_column.embedding_column(ticket, dimension=8)\nfeature_columns.append(ticket_embedding)\n\n# crossed cols\np_class = tf.feature_column.categorical_column_with_vocabulary_list(\n          \"Pclass\", list(train_data[\"Pclass\"].value_counts().index.values))\nparch = tf.feature_column.categorical_column_with_vocabulary_list(\n          \"Parch\", list(train_data[\"Parch\"].value_counts().index.values))\npclass_parch_crossed = tf.feature_column.crossed_column([p_class, parch], hash_bucket_size=1000)\npclass_parch_crossed = tf.feature_column.indicator_column(pclass_parch_crossed)\nfeature_columns.append(pclass_parch_crossed)","4e0545ce":"# A utility method to create a tf.data dataset from a Pandas Dataframe\ndef df_to_dataset(dataframe, testing=False, batch_size=32):\n    dataframe = dataframe.copy()\n    if not testing:\n        labels = dataframe.pop('Survived')\n        ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n        ds = ds.shuffle(buffer_size=len(dataframe))\n    else:\n        ds = tf.data.Dataset.from_tensor_slices(dict(dataframe))\n    ds = ds.batch(batch_size)\n    ds = ds.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n    return ds","6e5635b1":"train_data, val_data = train_test_split(train_data, test_size=0.2)","ac08b0c7":"batch_size = 32\ntrain_ds = df_to_dataset(train_data, batch_size=batch_size)\nval_ds = df_to_dataset(val_data, batch_size=batch_size)\ntest_ds = df_to_dataset(test_data, testing=True, batch_size=batch_size)","9168797c":"num_units_list = [128, 256]\ndropout_rate_list = [0.2, 0.5] \noptimizer_list = ['adam', 'sgd'] ","ac7ecc57":"# Utility method to create summary for tensorboard\ndef create_experiment_summary(num_units_list, dropout_rate_list, optimizer_list):\n  num_units_list_val = struct_pb2.ListValue()\n  num_units_list_val.extend(num_units_list)\n  dropout_rate_list_val = struct_pb2.ListValue()\n  dropout_rate_list_val.extend(dropout_rate_list)\n  optimizer_list_val = struct_pb2.ListValue()\n  optimizer_list_val.extend(optimizer_list)\n  return hparams_summary.experiment_pb(\n      # The hyperparameters being changed\n      hparam_infos=[\n          api_pb2.HParamInfo(name='num_units',\n                             display_name='Number of units',\n                             type=api_pb2.DATA_TYPE_FLOAT64,\n                             domain_discrete=num_units_list_val),\n          api_pb2.HParamInfo(name='dropout_rate',\n                             display_name='Dropout rate',\n                             type=api_pb2.DATA_TYPE_FLOAT64,\n                             domain_discrete=dropout_rate_list_val),\n          api_pb2.HParamInfo(name='optimizer',\n                             display_name='Optimizer',\n                             type=api_pb2.DATA_TYPE_STRING,\n                             domain_discrete=optimizer_list_val)\n      ],\n      # The metrics being tracked\n      metric_infos=[\n          api_pb2.MetricInfo(\n              name=api_pb2.MetricName(\n                  tag='accuracy'),\n              display_name='Accuracy'),\n      ]\n  )\n\nexp_summary = create_experiment_summary(num_units_list, dropout_rate_list, optimizer_list)\nroot_logdir_writer = tf.summary.create_file_writer(\"logs\/hparam_tuning\")\nwith root_logdir_writer.as_default():\n  tf.summary.import_event(tf.compat.v1.Event(summary=exp_summary).SerializeToString())","a4fd7b89":"# Model compiler\ndef train_test_model(hparams):\n\n  model = tf.keras.models.Sequential([\n    tf.keras.layers.DenseFeatures(feature_columns),\n    tf.keras.layers.Dense(hparams['num_units'], activation='relu'),\n    tf.keras.layers.Dropout(hparams['dropout_rate']),\n      tf.keras.layers.Dense(hparams['num_units'], activation='relu'),\n    tf.keras.layers.Dense(2, activation='sigmoid')\n  ])\n  model.compile(optimizer=hparams['optimizer'],\n                loss='binary_crossentropy',\n                metrics=['accuracy'])\n\n  model.fit(train_ds, \n            validation_data=val_ds, \n            epochs=50,\n            use_multiprocessing=True,\n            verbose=0)\n  _, accuracy = model.evaluate(val_ds)\n  return model, accuracy","d12094ab":"# Model runner\ndef run(run_dir, hparams):\n  writer = tf.summary.create_file_writer(run_dir)\n  summary_start = hparams_summary.session_start_pb(hparams=hparams)\n\n  with writer.as_default():\n    model, accuracy = train_test_model(hparams)\n    summary_end = hparams_summary.session_end_pb(api_pb2.STATUS_SUCCESS)\n      \n    tf.summary.scalar('accuracy', accuracy, step=1, description=\"The accuracy\")\n    tf.summary.import_event(tf.compat.v1.Event(summary=summary_start).SerializeToString())\n    tf.summary.import_event(tf.compat.v1.Event(summary=summary_end).SerializeToString())\n  return model, accuracy","1e5d2d75":"model_dict = {}\nsession_num = 0\nfor num_units in num_units_list:\n    for dropout_rate in dropout_rate_list:\n        for optimizer in optimizer_list:\n            hparams = {'num_units': num_units, 'dropout_rate': dropout_rate, 'optimizer': optimizer}\n            print('--- Running training session %d' % (session_num + 1))\n            print(hparams)\n            run_name = \"run-%d\" % session_num\n            model, accuracy = run(\"logs\/hparam_tuning\/\" + run_name, hparams)\n            print(accuracy)\n            model_dict[accuracy] = model\n            session_num += 1","09ae95ab":"best_model = model_dict[max(list(model_dict.keys()))]","2cfb11fd":"predictions = best_model.predict(test_ds)\npredictions = np.argmax(predictions, axis=1)","27922773":"predictions_dataframe = test_data[[\"PassengerId\"]]\npredictions_dataframe[\"Survived\"] = predictions","26dbdb7e":"predictions_dataframe.to_csv(\"gender_submission.csv\",index=False)","7fabfc1e":"best_model.save('best_model.h5')","49ceb561":"# Setup Hyperparameter tuning","1c2026d8":"## Define Feature columns for tensorflow\nExamples of each column type","fa7a27ce":"### Drop the columns if the missing values are more than 20% of the data. Drop missing rows otherwise","eb15226e":"# Description\nThe purpose of this kernel is to explore the new TensorFlow 2.0 API to achieve the ML results fast and easily with efficiency optimizations built-in.\n### Trying to automate the feature engineering and ensemble process. Both CPU and GPU compatible\n### This kernel is by no means comprehensive and accurate but serve as a starting point. \n### I hope it will make some people's life easier in getting started with new TensorFlow version.\nI will not be focussing on the utility provided by TensorFlow to convert old tf code to 2.0\n### Will try to see if we can get away without extensively preprocessing the data and get tensorflow to handle the data types","67bb7966":"## No need to convert the data types from categorical to numerical because we want tensorflow to handle this kind of data","7a7e4bce":"# It is this easy to save the model in tensorflow now. Reload is the same - with weights :)"}}