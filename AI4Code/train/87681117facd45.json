{"cell_type":{"010ae1c5":"code","7b618ba4":"code","fbb30f38":"code","16a94866":"code","da960587":"code","56f26cea":"code","5f2dec62":"code","d4ccce62":"code","f839dcba":"code","6c81661e":"code","a3db60a9":"code","5de0aedd":"code","931ee205":"code","cff1afad":"code","21f66f04":"code","9e7fcd80":"code","8b58546b":"code","28be4ab1":"code","00719403":"code","50ec5ac0":"code","883bcce0":"code","10c964cc":"code","8fd267b5":"code","8cbfc34b":"code","f63f2a82":"markdown","467ed449":"markdown","6a4f3972":"markdown","0d29e2c0":"markdown","e73f0110":"markdown","628e5da3":"markdown","820c3c43":"markdown","9fff0471":"markdown","c3a1a119":"markdown","ef0b4e28":"markdown"},"source":{"010ae1c5":"# Import Packages\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#!pip install plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\nimport datetime as dt\nfrom datetime import timedelta\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score,silhouette_samples\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport statsmodels.api as sm\nfrom statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing\nfrom fbprophet import Prophet\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom statsmodels.tsa.stattools import adfuller\n!pip install pyramid-arima\nfrom pyramid.arima import auto_arima\nstd=StandardScaler()","7b618ba4":"covid=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncovid.head()","fbb30f38":"print(\"Size\/Shape of the dataset: \",covid.shape)\nprint(\"Checking for null values:\\n\",covid.isnull().sum())\nprint(\"Checking Data-type of each column:\\n\",covid.dtypes)","16a94866":"#Dropping column as SNo is of no use, and \"Province\/State\" contains too many missing values\ncovid.drop([\"SNo\"],1,inplace=True)","da960587":"#Converting \"Observation Date\" into Datetime format\ncovid[\"ObservationDate\"]=pd.to_datetime(covid[\"ObservationDate\"])","56f26cea":"grouped_country=covid.groupby([\"Country\/Region\",\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})","5f2dec62":"grouped_country[\"Active Cases\"]=grouped_country[\"Confirmed\"]-grouped_country[\"Recovered\"]-grouped_country[\"Deaths\"]\ngrouped_country[\"log_confirmed\"]=np.log(grouped_country[\"Confirmed\"])\ngrouped_country[\"log_active\"]=np.log(grouped_country[\"Active Cases\"])","d4ccce62":"#Grouping different types of cases as per the date\ndatewise=covid.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise[\"Days Since\"]=datewise.index-datewise.index.min()","f839dcba":"print(\"Basic Information\")\nprint(\"Totol number of countries with Disease Spread: \",len(covid[\"Country\/Region\"].unique()))\nprint(\"Total number of Confirmed Cases around the World: \",datewise[\"Confirmed\"].iloc[-1])\nprint(\"Total number of Recovered Cases around the World: \",datewise[\"Recovered\"].iloc[-1])\nprint(\"Total number of Deaths Cases around the World: \",datewise[\"Deaths\"].iloc[-1])\nprint(\"Total number of Active Cases around the World: \",(datewise[\"Confirmed\"].iloc[-1]-datewise[\"Recovered\"].iloc[-1]-datewise[\"Deaths\"].iloc[-1]))\nprint(\"Total number of Closed Cases around the World: \",datewise[\"Recovered\"].iloc[-1]+datewise[\"Deaths\"].iloc[-1])\nprint(\"Approximate number of Confirmed Cases per Day around the World: \",np.round(datewise[\"Confirmed\"].iloc[-1]\/datewise.shape[0]))\nprint(\"Approximate number of Recovered Cases per Day around the World: \",np.round(datewise[\"Recovered\"].iloc[-1]\/datewise.shape[0]))\nprint(\"Approximate number of Death Cases per Day around the World: \",np.round(datewise[\"Deaths\"].iloc[-1]\/datewise.shape[0]))\nprint(\"Approximate number of Confirmed Cases per hour around the World: \",np.round(datewise[\"Confirmed\"].iloc[-1]\/((datewise.shape[0])*24)))\nprint(\"Approximate number of Recovered Cases per hour around the World: \",np.round(datewise[\"Recovered\"].iloc[-1]\/((datewise.shape[0])*24)))\nprint(\"Approximate number of Death Cases per hour around the World: \",np.round(datewise[\"Deaths\"].iloc[-1]\/((datewise.shape[0])*24)))\nprint(\"Number of Confirmed Cases in last 24 hours: \",datewise[\"Confirmed\"].iloc[-1]-datewise[\"Confirmed\"].iloc[-2])\nprint(\"Number of Recovered Cases in last 24 hours: \",datewise[\"Recovered\"].iloc[-1]-datewise[\"Recovered\"].iloc[-2])\nprint(\"Number of Death Cases in last 24 hours: \",datewise[\"Deaths\"].iloc[-1]-datewise[\"Deaths\"].iloc[-2])","6c81661e":"fig=px.bar(x=datewise.index,y=datewise[\"Confirmed\"]-datewise[\"Recovered\"]-datewise[\"Deaths\"])\nfig.update_layout(title=\"Distribution of Number of Active Cases\",\n                  xaxis_title=\"Date\",yaxis_title=\"Number of Cases\",)\nfig.show()","a3db60a9":"fig=px.bar(x=datewise.index,y=datewise[\"Recovered\"]+datewise[\"Deaths\"])\nfig.update_layout(title=\"Distribution of Number of Closed Cases\",\n                  xaxis_title=\"Date\",yaxis_title=\"Number of Cases\")\nfig.show()","5de0aedd":"datewise[\"WeekOfYear\"]=datewise.index.weekofyear\n\nweek_num=[]\nweekwise_confirmed=[]\nweekwise_recovered=[]\nweekwise_deaths=[]\nw=1\nfor i in list(datewise[\"WeekOfYear\"].unique()):\n    weekwise_confirmed.append(datewise[datewise[\"WeekOfYear\"]==i][\"Confirmed\"].iloc[-1])\n    weekwise_recovered.append(datewise[datewise[\"WeekOfYear\"]==i][\"Recovered\"].iloc[-1])\n    weekwise_deaths.append(datewise[datewise[\"WeekOfYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num.append(w)\n    w=w+1\n\nfig=go.Figure()\nfig.add_trace(go.Scatter(x=week_num, y=weekwise_confirmed,\n                    mode='lines+markers',\n                    name='Weekly Growth of Confirmed Cases'))\nfig.add_trace(go.Scatter(x=week_num, y=weekwise_recovered,\n                    mode='lines+markers',\n                    name='Weekly Growth of Recovered Cases'))\nfig.add_trace(go.Scatter(x=week_num, y=weekwise_deaths,\n                    mode='lines+markers',\n                    name='Weekly Growth of Death Cases'))\nfig.update_layout(title=\"Weekly Growth of different types of Cases in India\",\n                 xaxis_title=\"Week Number\",yaxis_title=\"Number of Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","931ee205":"fig, (ax1,ax2) = plt.subplots(1, 2,figsize=(15,5))\nsns.barplot(x=week_num,y=pd.Series(weekwise_confirmed).diff().fillna(0),ax=ax1)\nsns.barplot(x=week_num,y=pd.Series(weekwise_deaths).diff().fillna(0),ax=ax2)\nax1.set_xlabel(\"Week Number\")\nax2.set_xlabel(\"Week Number\")\nax1.set_ylabel(\"Number of Confirmed Cases\")\nax2.set_ylabel(\"Number of Death Cases\")\nax1.set_title(\"Weekly increase in Number of Confirmed Cases\")\nax2.set_title(\"Weekly increase in Number of Death Cases\")","cff1afad":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=datewise.index, y=datewise[\"Confirmed\"],\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig.add_trace(go.Scatter(x=datewise.index, y=datewise[\"Recovered\"],\n                    mode='lines+markers',\n                    name='Recovered Cases'))\nfig.add_trace(go.Scatter(x=datewise.index, y=datewise[\"Deaths\"],\n                    mode='lines+markers',\n                    name='Death Cases'))\nfig.update_layout(title=\"Growth of different types of cases\",\n                 xaxis_title=\"Date\",yaxis_title=\"Number of Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","21f66f04":"#Calculating countrywise Moratality and Recovery Rate\ncountrywise=covid[covid[\"ObservationDate\"]==covid[\"ObservationDate\"].max()].groupby([\"Country\/Region\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'}).sort_values([\"Confirmed\"],ascending=False)\ncountrywise[\"Mortality\"]=(countrywise[\"Deaths\"]\/countrywise[\"Confirmed\"])*100\ncountrywise[\"Recovery\"]=(countrywise[\"Recovered\"]\/countrywise[\"Confirmed\"])*100","9e7fcd80":"country_last_24_confirmed=[]\ncountry_last_24_recovered=[]\ncountry_last_24_deaths=[]\nfor country in countrywise.index:\n    country_last_24_confirmed.append((grouped_country.loc[country].iloc[-1]-grouped_country.loc[country].iloc[-2])[\"Confirmed\"])\n    country_last_24_recovered.append((grouped_country.loc[country].iloc[-1]-grouped_country.loc[country].iloc[-2])[\"Recovered\"])\n    country_last_24_deaths.append((grouped_country.loc[country].iloc[-1]-grouped_country.loc[country].iloc[-2])[\"Deaths\"])","8b58546b":"Last_24_Hours_country=pd.DataFrame(list(zip(countrywise.index,country_last_24_confirmed,country_last_24_recovered,country_last_24_deaths)),\n                                   columns=[\"Country Name\",\"Last 24 Hours Confirmed\",\"Last 24 Hours Recovered\",\"Last 24 Hours Deaths\"])","28be4ab1":"Top_15_Confirmed_24hr=Last_24_Hours_country.sort_values([\"Last 24 Hours Confirmed\"],ascending=False).head(15)\nTop_15_Recoverd_24hr=Last_24_Hours_country.sort_values([\"Last 24 Hours Recovered\"],ascending=False).head(15)\nTop_15_Deaths_24hr=Last_24_Hours_country.sort_values([\"Last 24 Hours Deaths\"],ascending=False).head(15)\n\n\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1,figsize=(10,20))\nsns.barplot(x=Top_15_Confirmed_24hr[\"Last 24 Hours Confirmed\"],y=Top_15_Confirmed_24hr[\"Country Name\"],ax=ax1)\nax1.set_title(\"Top 15 Countries with Highest Number of Confirmed Cases in Last 24 Hours\")\nsns.barplot(x=Top_15_Recoverd_24hr[\"Last 24 Hours Recovered\"],y=Top_15_Recoverd_24hr[\"Country Name\"],ax=ax2)\nax2.set_title(\"Top 15 Countries with Highest Number of Recovered Cases in Last 24 Hours\")\nsns.barplot(x=Top_15_Deaths_24hr[\"Last 24 Hours Deaths\"],y=Top_15_Deaths_24hr[\"Country Name\"],ax=ax3)\nax3.set_title(\"Top 15 Countries with Highest Number of Death Cases in Last 24 Hours\")","00719403":"Last_24_Hours_country[\"Proportion of Confirmed\"]=(Last_24_Hours_country[\"Last 24 Hours Confirmed\"]\/(datewise[\"Confirmed\"].iloc[-1]-datewise[\"Confirmed\"].iloc[-2]))*100\nLast_24_Hours_country[\"Proportion of Recovered\"]=(Last_24_Hours_country[\"Last 24 Hours Recovered\"]\/(datewise[\"Recovered\"].iloc[-1]-datewise[\"Recovered\"].iloc[-2]))*100\nLast_24_Hours_country[\"Proportion of Deaths\"]=(Last_24_Hours_country[\"Last 24 Hours Deaths\"]\/(datewise[\"Deaths\"].iloc[-1]-datewise[\"Deaths\"].iloc[-2]))*100","50ec5ac0":"Last_24_Hours_country[[\"Country Name\",\"Proportion of Confirmed\",\"Proportion of Recovered\",\"Proportion of Deaths\"]].sort_values([\"Proportion of Confirmed\"],ascending=False).style.background_gradient(cmap=\"Reds\")","883bcce0":"fig, (ax1, ax2) = plt.subplots(2, 1,figsize=(10,12))\ntop_15_confirmed=countrywise.sort_values([\"Confirmed\"],ascending=False).head(15)\ntop_15_deaths=countrywise.sort_values([\"Deaths\"],ascending=False).head(15)\nsns.barplot(x=top_15_confirmed[\"Confirmed\"],y=top_15_confirmed.index,ax=ax1)\nax1.set_title(\"Top 15 countries as per Number of Confirmed Cases\")\nsns.barplot(x=top_15_deaths[\"Deaths\"],y=top_15_deaths.index,ax=ax2)\nax2.set_title(\"Top 15 countries as per Number of Death Cases\")","10c964cc":"india_data=covid[covid[\"Country\/Region\"]==\"India\"]\ndatewise_india=india_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_india.iloc[-1])\nprint(\"Total Active Cases: \",datewise_india[\"Confirmed\"].iloc[-1]-datewise_india[\"Recovered\"].iloc[-1]-datewise_india[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases: \",datewise_india[\"Recovered\"].iloc[-1]+datewise_india[\"Deaths\"].iloc[-1])","8fd267b5":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=datewise_india.index, y=datewise_india[\"Confirmed\"],\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig.add_trace(go.Scatter(x=datewise_india.index, y=datewise_india[\"Recovered\"],\n                    mode='lines+markers',\n                    name='Recovered Cases'))\nfig.add_trace(go.Scatter(x=datewise_india.index, y=datewise_india[\"Deaths\"],\n                    mode='lines+markers',\n                    name='Death Cases'))\nfig.update_layout(title=\"Growth of different types of cases in India\",\n                 xaxis_title=\"Date\",yaxis_title=\"Number of Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","8cbfc34b":"fig=px.bar(x=datewise_india.index,y=datewise_india[\"Confirmed\"]-datewise_india[\"Recovered\"]-datewise_india[\"Deaths\"])\nfig.update_layout(title=\"Distribution of Number of Active Cases in India\",\n                  xaxis_title=\"Date\",yaxis_title=\"Number of Cases\",)\nfig.show()","f63f2a82":"# **Data Analaysis of India**","467ed449":"## Countrywise Distribution of All Types of Cases","6a4f3972":"It should be noted that here: Active Cases = Number of Confirmed Cases - Number of Recovered Cases - Number of Death Cases","0d29e2c0":"# Objective of the Notebook\n\nThe motive of this notebook is to visualize key details using the COVID-19 Dataset and find patterns internationally, as well as India specific. \n\nCOVID-19 has 4 main stages of spreading:\n\nStage 1: Confirmed Cases come from other countries\n\nStage 2: Local Transmission Begins\n\nStage 3: Communities impacted with local transimission\n\nStage 4: Significant Transmission with no end in sight\n\n\n***PLEASE DO UPVOTE THE NOTEBOOK IF YOU FIND IT INTERESTING***","e73f0110":"### Thanks for Reading throughout the notebook, do upvote for more and comment your thoughts.","628e5da3":"## Datewise Analysis","820c3c43":"## Countrywise Analysis","9fff0471":"Here: Closed Cases = Number of Recovered Cases + Number of Death Cases","c3a1a119":"### Import Required Python Packages and libraries ","ef0b4e28":"# Lets Get Started "}}