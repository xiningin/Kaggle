{"cell_type":{"76f08049":"code","77dcf585":"code","bd68253f":"code","d9db369b":"code","76f50ad6":"code","565c0625":"code","da344924":"code","c2e4e6e6":"code","328438b2":"code","b735cd75":"code","5ae955a8":"code","12e68645":"code","86ddecfc":"code","4c800b3b":"code","2d75bb8b":"code","57433fc9":"code","c24e5a29":"markdown","2b1c85d2":"markdown","5a1fc46f":"markdown","75c07f85":"markdown","64fb6960":"markdown","afa3f179":"markdown","93c74123":"markdown","46ff3d2f":"markdown"},"source":{"76f08049":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","77dcf585":"import warnings\nwarnings.filterwarnings('ignore')\n\nmovies = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\nprint(movies.shape)\nmovies.head(3)","bd68253f":"df = movies[['id', 'title', 'genres', 'vote_average',\n            'vote_count', 'popularity', 'keywords', 'overview']]","d9db369b":"# \uc77c\ubd80 \uce7c\ub7fc\uc740 \ud30c\uc774\uc36c \ub9ac\uc2a4\ud2b8 \ub0b4\ubd80\uc5d0 \uc5ec\ub7ec \uac1c\uc758 \ub515\uc154\ub108\ub9ac\uac00 \uc788\ub294 \ud615\ud0dc\ub85c \ud45c\ud604\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4\npd.set_option('max_colwidth', 100)\ndf[['genres', 'keywords']][:1]","76f50ad6":"# \uce7c\ub7fc\uc758 \ubb38\uc790\uc5f4\uc744 \ubd84\ud574\ud574 \uac1c\ubcc4 \uc7a5\ub974\ub97c \ud30c\uc774\uc36c \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4ed\ub2c8\ub2e4\nfrom ast import literal_eval\ndf['genres'] = df['genres'].apply(literal_eval)\ndf['keywords'] = df['keywords'].apply(literal_eval)","565c0625":"# name \uac12\ub9cc \ub9ac\uc2a4\ud2b8 \uac1d\uccb4\ub85c \ubcc0\ud658\ndf['genres'] = df['genres'].apply(lambda x: [y['name'] for y in x])\ndf['keywords'] = df['keywords'].apply(lambda x: [y['name'] for y in x])\ndf[['genres', 'keywords']][:1]","da344924":"from sklearn.feature_extraction.text import CountVectorizer\n\ndf['genres_literal'] = df['genres'].apply(lambda x: (' ').join(x))\ncount_vect = CountVectorizer(min_df=0,\n                            ngram_range=(1,2))\ngenre_mat = count_vect.fit_transform(df['genres_literal'])\nprint(genre_mat.shape)","c2e4e6e6":"# \ucf54\uc0ac\uc778 \uc720\uc0ac\ub3c4 \uacc4\uc0b0\ud558\uae30\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ngenre_sim = cosine_similarity(genre_mat, genre_mat)\nprint(genre_sim.shape)\nprint(genre_sim[:1])","328438b2":"# genre_sim \uac1d\uccb4\uc758 \uae30\uc900 \ud589\ubcc4\ub85c \ube44\uad50 \ub300\uc0c1\uc774 \ub418\ub294 \ud589\uc758 \uc720\uc0ac\ub3c4 \uac12\uc774 \ub192\uc740 \uc21c\uc73c\ub85c \uc815\ub82c\ub41c \ud589\ub82c\uc758 \uc704\uce58 \uc778\ub371\uc2a4 \uac12\uc744 \ucd94\ucd9c\ngenre_sim_sorted_ind = genre_sim.argsort()[:, ::-1]\nprint(genre_sim_sorted_ind[:1])","b735cd75":"# \ub808\ucf54\ub4dc\ubcc4 \uc7a5\ub974 \ucf54\uc0ac\uc778 \uc720\uc0ac\ub3c4 \uc778\ub371\uc2a4\ub97c \uac00\uc9c0\uace0 \uc788\ub294 df, \uc601\ud654\uc81c\ubaa9, \uac74\uc218\ub97c \uc785\ub825\ud558\uba74 \ucd94\ucc9c \uc601\ud654 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 df \ubc18\ud658\ndef find_sim_movie(df, sorted_ind, title_name, top_n=10):\n    # \uc778\uc790\ub85c \uc785\ub825\ub41c df\uc5d0\uc11c 'title' \uce7c\ub7fc\uc774 \uc785\ub825\ub41c title_name \uac12\uc778 dataframe \ucd94\ucd9c\n    title_movie = df[df['title'] == title_name]\n    \n    # title_name\uc744 \uac00\uc9c4 df\uc758 index\ub97c ndarray\ub85c \ubc18\ud658\ud558\uace0\n    # sorted_ind \uc778\uc790\ub85c \uc785\ub825\ub41c genre_sim_sorted_ind \uac1d\uccb4\uc5d0\uc11c \uc720\uc0ac\ub3c4 \uc21c\uc73c\ub85c top_n\uac1c\uc758 index \ucd94\ucd9c\n    title_index = title_movie.index.values\n    similar_indexes = sorted_ind[title_index, :(top_n)]\n    \n    # \ucd94\ucd9c\ub41c top_n index \ucd9c\ub825. top_n index\ub294 2\ucc28\uc6d0 \ub370\uc774\ud130\uc784\n    # df\uc5d0\uc11c index\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 1\ucc28\uc6d0 array\ub85c \ubcc0\uacbd\n    print(similar_indexes)\n    similar_indexes = similar_indexes.reshape(-1)\n    \n    return df.iloc[similar_indexes]","5ae955a8":"similar_movies = find_sim_movie(df,\n                               genre_sim_sorted_ind,\n                               'The Godfather',\n                               10)\nsimilar_movies[['title', 'vote_average']]","12e68645":"# \uc774\ubc88\uc5d0\ub294 \uc880 \ub354 \ub9ce\uc740 \ud6c4\ubcf4\uad70\uc744 \uc120\uc815\ud55c \ub4a4\uc5d0 \uc601\ud654\uc758 \ud3c9\uc810\uc5d0 \ub530\ub77c \ud544\ud130\ub9c1\ud558\uc5ec \ucd5c\uc885 \ucd94\uc804\ud558\ub294 \ubc29\uc2dd\n# \uc8fc\uc758\ud560 \uc810\uc740, `vote_average`\ub294 \uc18c\uc218\uc758 \uad00\uac1d\uc774 \ud2b9\uc815 \uc601\ud654\uc5d0 \ub9cc\uc801\uc774\ub098 \ub192\uc740 \ud3c9\uc810\uc744 \ubd80\uc5ec\ud574 \uc65c\uace1\ub41c \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc788\uc74c\ndf[['title', 'vote_average', 'vote_count']].sort_values('vote_average',\n                                                       ascending=False)[:10]","86ddecfc":"C = df['vote_average'].mean()\nm = df['vote_count'].quantile(0.6)\nprint('C:', round(C, 3), 'm: ', round(m, 3))","4c800b3b":"# \uc0c8\ub85c\uc6b4 \ud3c9\uc810 \uc815\ubcf4 \ub9cc\ub4e4\uae30\npercentile = 0.6\nm = df['vote_count'].quantile(percentile)\nC = df['vote_average'].mean()\n\ndef weighted_vote_average(record):\n    v = record['vote_count']\n    R = record['vote_average']\n    \n    return ((v \/ (v+m)) * R) + ((m \/ (m+v)) * C)\n\ndf['weighted_vote'] = df.apply(weighted_vote_average, axis=1)","2d75bb8b":"df[['title', 'vote_average', 'weighted_vote', 'vote_count']].sort_values('weighted_vote', ascending=False)[:10]","57433fc9":"# \uc0c8\ub86d\uac8c \uc815\uc758\ub41c \ud3c9\uc810 \uae30\uc900\uc5d0 \ub530\ub77c \uc601\ud654\ub97c \ucd94\ucc9c\ud569\ub2c8\ub2e4\ndef find_sim_movie(df, sorted_ind, title_name, top_n=10):\n    title_movie = df[df['title'] == title_name]\n    title_index = title_movie.index.values\n    \n    # top_n\uc5d0 2\ubc30\uc5d0 \ud574\ub2f9\ud558\ub294 \uc7a5\ub974 \uc720\uc0ac\uc131\uc774 \ub192\uc740 \uc778\ub371\uc2a4 \ucd94\ucd9c\n    similar_indexes = sorted_ind[title_index, :(top_n*2)]\n    similar_indexes = similar_indexes.reshape(-1)\n    # \uae30\uc900 \uc601\ud654 \uc778\ub371\uc2a4\ub294 \uc81c\uc678\n    similar_indexes = similar_indexes[similar_indexes != title_index]\n    \n    # top_n\uc758 2\ubc30\uc5d0 \ud574\ub2f9\ud558\ub294 \ud6c4\ubcf4\uad70\uc5d0\uc11c weighted_vote\uac00 \ub192\uc740 \uc21c\uc73c\ub85c top_n\ub9cc\ud07c \ucd94\ucd9c\n    return df.iloc[similar_indexes].sort_values('weighted_vote', ascending=False)[:top_n]\n\nsimilar_movies = find_sim_movie(df,\n                               genre_sim_sorted_ind,\n                               'The Godfather', 10)\nsimilar_movies[['title', 'vote_average', 'weighted_vote']]","c24e5a29":"* \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud558 `genres` \uce7c\ub7fc\uc744 Count \uae30\ubc18\uc758 \ud53c\ucc98 \ubca1\ud130\ud654 \ubcc0\ud658\ud569\ub2c8\ub2e4.\n* `genres` \ubb38\uc790\uc5f4\uc744 \ud53c\ucc98 \ubca1\ud130\ud654 \ud589\ub82c\ub85c \ubcc0\ud658\ud55c \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ucf54\uc0ac\uc778 \uc720\uc0ac\ub3c4\ub97c \ud1b5\ud574 \ube44\uad50\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \ub370\uc774\ud130 \uc138\ud2b8\uc758 \ub808\ucf54\ub4dc\ubcc4\ub85c \ud0c0 \ub808\ucf54\ub4dc\uc640 \uc7a5\ub974\uc5d0\uc11c \ucf54\uc0ac\uc778 \uc720\uc0ac\ub3c4 \uac12\uc744 \uac00\uc9c0\ub294 \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n* \uc7a5\ub974 \uc720\uc0ac\ub3c4\uac00 \ub192\uc740 \uc601\ud654 \uc911\uc5d0 \ud3c9\uc810\uc774 \ub192\uc740 \uc21c\uc73c\ub85c \uc601\ud654\ub97c \ucd94\ucc9c\ud569\ub2c8\ub2e4.","2b1c85d2":"* \ubc18\ud658\ub41c \ud589\uc774 \uc758\ubbf8\ud558\ub294 \uac83\uc740, 0\ubc88 \ub808\ucf54\ub4dc\ub294 \uc790\uae30 \uc790\uc2e0\uc77c \uacbd\uc6b0\ub97c \uc81c\uc678\ud558\uace0 3494\ubc88 \ub808\ucf54\ub4dc\uac00 \uac00\uc7a5 \uc720\uc0ac\ub3c4\uac00 \ub192\uace0 \uadf8 \ub2e4\uc74c 813\ubc88 ... \uc774\ub807\uac8c \uc774\uc5b4\uc9c0\ub294 \uac83\uc785\ub2c8\ub2e4","5a1fc46f":"### \uc7a5\ub974 \ucf58\ud150\uce20 \ud544\ud130\ub9c1\uc744 \uc774\uc6a9\ud55c \uc601\ud654 \ucd94\ucc9c","75c07f85":"* \ud574\ub2f9 \ub370\uc774\ud130 \uc138\ud2b8\ub294 20\uac1c\uc758 \ud53c\ucc98\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc774 \uc911 \ucf58\ud150\uce20 \uae30\ubc18 \ud544\ud130\ub9c1 \ucd94\ucc9c \ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ud560 \uc8fc\uc694 \uce7c\ub7fc\ub9cc \ucd94\ucd9c\ud574 \uc0c8\ub85c\uc6b4 df\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc544\uc774\ub514, \uc601\ud654\uc81c\ubaa9, \uc7a5\ub974, \ud3c9\uade0 \ud3c9\uc810, \ud3c9\uc810 \ud22c\ud45c \uc218, \uc778\uae30, \uc8fc\uc694 \ud0a4\uc6cc\ub4dc \ubb38\uad6c, \uac1c\uc694\uc124\uba85 \uc785\ub2c8\ub2e4.","64fb6960":"* `vote_count`\ub294 \ub0ae\uc9c0\ub9cc \ub192\uc740 \uc810\uc218\ub97c \ubd80\uc5ec\ud558\uc5ec `vote_average`\uac00 \ub192\uc740 \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4\n* \ub530\ub77c\uc11c \uac00\uc911 \ud3c9\uc810\uc744 \ub9e4\uaca8\uc11c \uc9c4\ud589\ud569\ub2c8\ub2e4\n* V\ub294 `vote_count`\uac12, R\uc740 `vote_average` \uac12, C\ub294 \uc804\uccb4 \uc601\ud654\uc758 \ud3c9\uade0 \ud3c9\uc810, m\uc758 \uacbd\uc6b0 \uac00\uc911\uce58\ub97c \uc9c1\uc811 \uc870\uc808\ud558\ub294 \uc5ed\ud560","afa3f179":"---","93c74123":"## [Tutorial] TMDB 5000 Movie - Recommendation System\n### \ucc45 <\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd \uac00\uc774\ub4dc> \ud544\uc0ac \ucf54\ub4dc\uc785\ub2c8\ub2e4.","46ff3d2f":"### \uc7a5\ub974 \ucf58\ud150\uce20 \uc720\uc0ac\ub3c4 \uce21\uc815"}}