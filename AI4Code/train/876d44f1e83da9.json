{"cell_type":{"e881b914":"code","339122f4":"code","f8472842":"code","79a47aed":"code","326d6d8a":"code","f0d9b896":"code","ec9824df":"code","dfab6ea1":"code","6f673ee9":"code","d50b08d5":"code","489475b1":"code","25ba29c7":"code","50a985d6":"code","700d7c68":"code","f1fe588e":"code","85f81eb1":"code","5665a892":"code","d0cff9f4":"code","46b7cd9a":"code","970ee35e":"code","c1e7893e":"code","ddecee0f":"code","3f98eb92":"code","72211c4a":"code","9f32869b":"code","37688a74":"code","36fa7f16":"code","c354715c":"code","0934bd25":"code","3faa7058":"code","0129dd40":"code","67c166b0":"code","16a94156":"code","c198de23":"code","b78e8622":"code","41b70737":"code","5d407e96":"code","35e4dc2b":"code","b2d1e6ac":"code","b748aa43":"code","8e247898":"code","7f90bce3":"code","6e6228a8":"code","1165aeb9":"code","19733ab3":"markdown","8d1a9e16":"markdown","03370f00":"markdown","2b838c74":"markdown","6b721ef5":"markdown","cafa2595":"markdown","5f594282":"markdown","1c6e79fb":"markdown","a1efa7ec":"markdown","0618394f":"markdown"},"source":{"e881b914":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np","339122f4":"def plot_corr(df, size=9):\n    corr    = df.corr()\n    fig, ax = plt.subplots(figsize=(size, size))\n    ax.matshow(corr)\n    plt.xticks(range(len(corr.columns)), corr.columns)\n    plt.yticks(range(len(corr.columns)), corr.columns)","f8472842":"input_file_path  = '..\/input\/titanic\/train.csv'\ntest_file_path = \"..\/input\/titanic\/test.csv\"\ndf = pd.read_csv(input_file_path,index_col=\"PassengerId\")","79a47aed":"df.shape","326d6d8a":"df.head(15)","f0d9b896":"df=df.drop([\"Name\",\"Ticket\", \"Cabin\"],axis=1)","ec9824df":"# how is the distribution of our data across diff columns\n\nfor i in df.columns:\n    sns.barplot(x=df[i].value_counts().index,y=df[i].value_counts()).set_title(i)\n    plt.show()","dfab6ea1":"#how survival varied across age, family structure and fare\n\npd.pivot_table(df, index = 'Survived', values = ['Age','SibSp','Parch','Fare'])","6f673ee9":"df.isnull().values.any()","d50b08d5":"df.isnull().sum()","489475b1":"df[\"Age\"].fillna(df[\"Age\"].median(),inplace=True)\ndf[\"Fare\"].fillna(df[\"Fare\"].median(),inplace=True)\ndf[\"Embarked\"].fillna(\"S\",inplace=True)","25ba29c7":"map_gender = {'male':0,'female':1}\ndf['Sex']  = df['Sex'].map(map_gender)\ndf.head()","50a985d6":"# label encoder is another way of mapping values to numbers [[java's enum ]]\n\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndf[\"Embarked\"]=le.fit_transform(df[\"Embarked\"])\ndf.head()","700d7c68":"plot_corr(df)","f1fe588e":"df.head()","85f81eb1":"num_true  =  len(df.loc[df['Survived']==True])\nnum_false =  len(df.loc[df['Survived']==False])","5665a892":"print(\"True percent   : {0}  ({1:2.2f})\".format(num_true, num_true\/(num_true+num_false)))\nprint(\"False percent   : {0}  ({1:2.2f})\".format(num_false, num_false\/(num_true+num_false)))","d0cff9f4":"from sklearn.model_selection import train_test_split\ninput_columns  = [\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Embarked\"]\noutput_columns = [\"Survived\"]\nX  =  df[input_columns].values\ny  =  df[output_columns].values\nsplit_test_size = .30\n\nX_train, X_test, y_train, y_test  =  train_test_split(X,y,test_size = split_test_size, random_state = 42)","46b7cd9a":"train_true   =   len(y_train[y_train[:]==1])\ntrain_total  =   len(y_train)\ntest_true    =   len(y_test[y_test[:]==1])\ntest_total  =   len(y_test)\nprint(\"Training Data with Survival   : {0}  ({1:0.2f}5)\".format(train_true, train_true\/(train_total)))\nprint(\"Tests  Data  with  Survival   :  {0}  ({1:0.2f}5)\".format(test_true, test_true\/(test_total)))","970ee35e":"from sklearn.impute import  SimpleImputer\nfill_zeroes  =  SimpleImputer(missing_values=np.nan, strategy=\"mean\", verbose=0)\n\nX_train = fill_zeroes.fit_transform(X_train)\nX_test  = fill_zeroes.fit_transform(X_test)","c1e7893e":"df.isnull().sum()","ddecee0f":"from sklearn.naive_bayes import GaussianNB\n#create Naive Bayes model object and then train it\nnb_model  = GaussianNB()\nnb_model.fit(X_train, y_train.ravel())","3f98eb92":"# lets first check against the training data itself\nnb_predict_train  = nb_model.predict(X_train)\nnb_predict_test  = nb_model.predict(X_test)\n\n#import the metrics library from scikit to compare the output and actuals\nfrom sklearn import metrics\n\nprint(\"\\n Accuracy with Training Data  :  {0:.4f}\".format(metrics.accuracy_score(y_train, nb_predict_train)), end=\"\\n\\n\" )\nprint(\"\\n Accuracy with Test Data  :  {0:.4f}\".format(metrics.accuracy_score(y_test, nb_predict_test)), end=\"\\n\\n\" )","72211c4a":"from sklearn.ensemble import RandomForestClassifier\nrf_model   = RandomForestClassifier(random_state=42)\nrf_model.fit(X_train, y_train.ravel())","9f32869b":"rf_predict_train  = rf_model.predict(X_train)\n\n#Print Accuracy\nprint(\"\\n Accuracy for Training data RF Algo : {0:.4f}\".format(metrics.accuracy_score(y_train, rf_predict_train)))","37688a74":"rf_predict_test  = rf_model.predict(X_test)\n\n#Print Accuracy\nprint(\"\\n Accuracy for Test data RF Algo : {0:.4f}\".format(metrics.accuracy_score(y_test, rf_predict_test)))","36fa7f16":"tes=pd.read_csv(test_file_path,index_col=\"PassengerId\")","c354715c":"tes[\"Age\"]=tes[\"Age\"].fillna(tes[\"Age\"].median())\ntes[\"Fare\"]=tes[\"Fare\"].fillna(tes[\"Fare\"].median())","0934bd25":"tfea=tes.drop([\"Name\",\"Ticket\", \"Cabin\"],axis=1)","3faa7058":"tfea.isnull().sum()","0129dd40":"tfea.head()","67c166b0":"tfea[\"Sex\"]=tfea[\"Sex\"].map(map_gender)","16a94156":"tfea.head()","c198de23":"tfea[\"Embarked\"].fillna(\"S\",inplace=True)","b78e8622":"le=LabelEncoder()\ntfea[\"Embarked\"]=le.fit_transform(tfea[\"Embarked\"])","41b70737":"tfea.isnull().sum()","5d407e96":"tfea.head()","35e4dc2b":"tfea.shape\ntfea.head()","b2d1e6ac":"tfea.head()","b748aa43":"X_exam  =  tfea[input_columns].values\nmy_pred =  rf_model.predict(X_exam)\n","8e247898":"my_pred\n","7f90bce3":"tfea['Survived']=my_pred","6e6228a8":"tfea.head()","1165aeb9":"tfea.to_csv(\"titanic_output.csv\", columns = [ 'Survived']) ","19733ab3":"# Testing the Accuracy","8d1a9e16":"# Random Forests  ; Ensemble Algorithm\n\n","03370f00":"# Training Initial Algo - Naive Bayes\n","2b838c74":"# def functions","6b721ef5":"# Repeat from here","cafa2595":"#  Processing the ACTUAL test data Now","5f594282":"# imports first, very usual","1c6e79fb":"### Predict Training Data and Check Accuracy\n","a1efa7ec":"# Relevant Files (The \"data\")","0618394f":"# Data Observations and CleanUp"}}