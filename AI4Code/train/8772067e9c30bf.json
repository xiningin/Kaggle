{"cell_type":{"5666ee3b":"code","9c91d079":"code","ee1ca78a":"code","5f245b83":"code","92a43c8f":"code","d592fe73":"code","b54d0afb":"code","a5674fb8":"code","fc543220":"code","e897f9b2":"code","fcc7ea73":"markdown","866b9ebe":"markdown","2b63bab8":"markdown","ecc7ae9a":"markdown","9e4c7aca":"markdown","10c50042":"markdown","df125ef9":"markdown"},"source":{"5666ee3b":"import pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nimport datetime\nfrom pathlib import Path","9c91d079":"PATH = Path('..\/input\/covid19-global-forecasting-week-2')\nlist(PATH.glob('*'))","ee1ca78a":"data = pd.read_csv(PATH\/'train.csv')\ndata.head()","5f245b83":"agg_funcs = {'Date': 'first', 'ConfirmedCases': 'sum', 'Fatalities': 'sum'}\ndata_sum = data.groupby(data['Date']).aggregate(agg_funcs)\ndata_sum","92a43c8f":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=data_sum['Date'], y=data_sum['ConfirmedCases'], mode='lines', name='Confirmed Cases'))\nfig.add_trace(go.Scatter(x=data_sum['Date'], y=data_sum['Fatalities'], mode='lines', name='Fatalities'))\nfig.show()","d592fe73":"countries = list(set(list(data['Country_Region'])))\nprint(countries)","b54d0afb":"num_cases = []\nfor c, country in enumerate(countries):\n    data2 = data.loc[data['Country_Region'] == country]\n    num_cases_country = data2.groupby(data2['Date']).aggregate(agg_funcs).max().ConfirmedCases\n    num_cases.append(num_cases_country)\n\n# index ordered by num_cases    \nidx_top_by_cases = list(reversed(np.argsort(num_cases)))\n\nfor i in range(20):\n    idx_top = idx_top_by_cases[i]\n    print('%d: %s (%d cases)' % (i+1, countries[idx_top], num_cases[idx_top]))","a5674fb8":"countries_str = '[%s]'% (', '.join([\"'%s'\"%countries[idx] for idx in idx_top_by_cases[:20]]))   # there must be a less ugly way to do this in pandas\ndata_top_countries = data.query(\"Country_Region == %s\" % countries_str) \n\nfig = px.line(data_top_countries, x=\"Date\", y=\"ConfirmedCases\", color=\"Country_Region\",\n              line_group=\"Country_Region\", hover_name=\"Country_Region\",\n              title=\"Daily cases for top 20 countries (with range slider)\")\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","fc543220":"num_fatalities = []\nfor c, country in enumerate(countries):\n    data2 = data.loc[data['Country_Region'] == country]\n    num_fatalities_country = data2.groupby(data2['Date']).aggregate(agg_funcs).max().Fatalities\n    num_fatalities.append(num_fatalities_country)\n\n# index ordered by num_cases    \nidx_top_by_fatalities = list(reversed(np.argsort(num_fatalities)))\n\nfor i in range(20):\n    idx_top = idx_top_by_fatalities[i]\n    print('%d: %s (%d fatalities)' % (i+1, countries[idx_top], num_fatalities[idx_top]))","e897f9b2":"countries_str = '[%s]'% (', '.join([\"'%s'\"%countries[idx] for idx in idx_top_by_fatalities[:20]]))   # there must be a less ugly way to do this in pandas\ndata_top_countries = data.query(\"Country_Region == %s\" % countries_str) \n\nfig = px.line(data_top_countries, x=\"Date\", y=\"Fatalities\", color=\"Country_Region\",\n              line_group=\"Country_Region\", hover_name=\"Country_Region\",\n              title=\"Daily fatalities for top 20 countries (with range slider)\")\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","fcc7ea73":"The plot below will graph the top 20 countries daily.","866b9ebe":"Let's get the sum total of cases for all countries and order them. The following will print the top 20.","2b63bab8":"## Countries\nAggregate cases and fatalities by country","ecc7ae9a":"The plot below will graph the top 20 countries daily.","9e4c7aca":"Plot both gloabl cases as well as fatalities.","10c50042":"Let's get the sum total of fatalities for all countries and order them. The following will print the top 20.","df125ef9":"## View daily global totals\nHere we collapse all the case totals by day."}}