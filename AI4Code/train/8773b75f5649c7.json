{"cell_type":{"c49760e7":"code","0cb599e0":"code","6a685fa3":"code","eb373987":"code","c1c9cfc6":"code","582aa9b2":"code","2c389904":"code","d8308600":"code","9940ea27":"code","7a06e24b":"code","42d790ca":"code","0c76df81":"code","d873d798":"code","51b0ae32":"code","45730112":"code","07c52d52":"code","7c4be337":"code","83fc10c8":"code","72d2c179":"code","13471e43":"code","70610cad":"code","bc945917":"code","b572996d":"code","fb355d66":"code","6a6133ab":"code","e47b9c76":"code","c9820b8b":"code","407be2da":"code","1f138687":"code","7f631fe4":"code","853d3f63":"code","2fce729e":"code","6b930c66":"markdown"},"source":{"c49760e7":"import keras\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPooling2D","0cb599e0":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\nepochs = 15","6a685fa3":"train_data.shape","eb373987":"test_data.shape","c1c9cfc6":"train_data.head()","582aa9b2":"test_data.head()","2c389904":"target_data = train_data.label.values","d8308600":"train_features = train_data.loc[:,train_data.columns !='label'].values","9940ea27":"train_features","7a06e24b":"target_data\n","42d790ca":"#normalizing the values\ntrain_features = train_features.astype('float32')\/255\ntest_data = test_data.astype('float32')\/255","0c76df81":"train_features = train_features.reshape(-1,28,28,1)\ntest = test_data.values.reshape(-1,28,28,1)","d873d798":"train_features.shape","51b0ae32":"test.shape","45730112":"from sklearn.model_selection import train_test_split","07c52d52":"x_train,x_test,y_train,y_test = train_test_split(train_features,target_data,test_size=0.1,random_state = 42)","7c4be337":"y_train = keras.utils.to_categorical(y_train,10)\ny_test = keras.utils.to_categorical(y_test,10)","83fc10c8":"print(y_train.shape,y_test.shape)","72d2c179":"model = Sequential()\nmodel.add(Conv2D(128,kernel_size=(5,5),activation='relu',input_shape= (28,28,1))) # 128 shows the numb of filters kernelsize gives the size of each filter\nmodel.add(Conv2D(64,(5,5),activation='relu'))\nmodel.add(Conv2D(32,(5,5),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2))) #Pooling layer\nmodel.add(Dropout(0.25))                  #Dropout layer\nmodel.add(Flatten())                      #Flatten Layer\nmodel.add(Dense(128, activation='relu'))  #Fully connected layer\nmodel.add(Dropout(0.5))                   #Dropout layer\nmodel.add(Dense(10, activation='softmax')) #Output Layer\n","13471e43":"#Model compilation\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])","70610cad":"#Training the model\nmodel.fit(x_train, y_train,\n          batch_size=128,\n          epochs=epochs,\n          verbose=1)","bc945917":"score = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","b572996d":"y_predicted = model.predict(x_test)\ny_pred_classes = np.argmax(y_predicted,axis=1)\ny_act = np.argmax(y_test,axis=1)","fb355d66":"y_pred_classes ","6a6133ab":"y_act","e47b9c76":"import sklearn.metrics as metrics","c9820b8b":"metrics.confusion_matrix(y_act,y_pred_classes)","407be2da":"predicted_test = model.predict(test)# predicting on test data\npredicted_test_class = np.argmax(predicted_test,axis=1)","1f138687":"predicted_test_class","7f631fe4":"sample_submission = pd.read_csv('..\/input\/sample_submission.csv')","853d3f63":"sample_submission.head()","2fce729e":"#submission_dataframe = pd.DataFrame({'ImageId': list(range(1,len(predicted_test_class)+1)),'Label':predicted_test_class})\n#submission_dataframe.to_csv('..\/input\/predict_submission.csv',index=False,header=True)","6b930c66":"need to increase the epoch size"}}