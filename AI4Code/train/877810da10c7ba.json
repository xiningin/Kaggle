{"cell_type":{"ecc93b37":"code","5dd796f9":"code","8b9acfd8":"code","c42a1314":"code","2d0764bb":"code","a294f8b3":"code","88dbe987":"code","602b16f2":"code","e2f5016a":"code","c95227cc":"code","504befdc":"code","8447c0e0":"code","c61b3a58":"code","4fce712a":"code","f7e9a59b":"code","09ab2705":"code","acba599f":"code","3f4924de":"code","eb80c618":"code","35d177fd":"code","4b6ba463":"code","205773b9":"code","4c5a6f3a":"code","85a241e9":"code","6c0a1596":"code","ecaec1c0":"code","d4cc0551":"code","9a57fb57":"code","c7a0449b":"code","d22eedcf":"code","4edc42b8":"code","d8f15115":"code","fc6f21b4":"code","f487df46":"code","6a4b9ba3":"code","9c42b7fc":"code","b0e67fb3":"code","46601b14":"markdown","70b67cd7":"markdown","01817d66":"markdown","5633f7c2":"markdown","79fbfe83":"markdown"},"source":{"ecc93b37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('darkgrid')","5dd796f9":"df = pd.read_csv('..\/input\/groceries-dataset\/Groceries_dataset.csv')\ndf.head()","8b9acfd8":"df.isna().sum()","c42a1314":"df.nunique()","2d0764bb":"df.shape","a294f8b3":"df.info()","88dbe987":"df.Date = pd.to_datetime(df.Date) ","602b16f2":"df['Year'] = df.Date.apply(lambda x : x.year)","e2f5016a":"df['Month'] = df.Date.apply(lambda x : x.month)\ndf['Days of Week'] = df.Date.apply(lambda x : x.dayofweek)","c95227cc":"df.nunique()","504befdc":"sns.countplot(df.Year)\nplt.show()","8447c0e0":"plt.figure(figsize=(12,4))\nsns.countplot(df.Month)\nplt.show()\nplt.figure(figsize=(12,4))\nsns.countplot(df.Month,hue=df.Year)\nplt.show()","c61b3a58":"plt.figure(figsize=(12,4))\nsns.countplot(df['Days of Week'])\nplt.show()\nplt.figure(figsize=(12,4))\nsns.countplot(df['Days of Week'],hue=df.Year)\nplt.show()","4fce712a":"df.groupby('Month').count().plot(legend=False,figsize=(12,4))\nplt.xticks([i for i in range(1,13)])\nplt.show()","f7e9a59b":"df[df['Year']==2014].groupby('Month').count()['Date'].plot(label=2014,figsize=(12,4))\ndf[df['Year']==2015].groupby('Month').count()['Date'].plot(label=2015)\nplt.xticks([i for i in range(1,13)])\nplt.legend()\nplt.show()","09ab2705":"df[df['Year']==2014].groupby('Days of Week').count()['Date'].plot(label=2014,figsize=(12,4))\ndf[df['Year']==2015].groupby('Days of Week').count()['Date'].plot(label=2015)\nplt.xticks([i for i in range(0,7)])\nplt.legend()\nplt.show()","acba599f":"days = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\nfor i in range(0,7):\n    df[df['Days of Week']==i].groupby('Month').count().plot(legend=False,figsize=(12,4))\n    plt.xticks([i for i in range(1,13)])\n    plt.title(days[i].upper())\n    plt.show()","3f4924de":"df.itemDescription.value_counts().head(50).plot(kind='bar',figsize=(15,6))\nplt.show()","eb80c618":"pd.DataFrame(df.itemDescription.value_counts()\/len(df)).head()","35d177fd":"dummies = pd.get_dummies(df.itemDescription)\ndummies.head()","4b6ba463":"df = df.join(dummies)\ndf.head()","205773b9":"item = df.itemDescription.unique()","4c5a6f3a":"df = df.groupby(['Member_number','Date'])[item[:]].sum()\ndf.head(10)","85a241e9":"df = df.reset_index()","6c0a1596":"df.head(10)","ecaec1c0":"df = df.drop(['Member_number','Date'],axis=1)","d4cc0551":"df.head(10)","9a57fb57":"# Converting true values to its columns names\n\ntemp = df.copy()\n\nfor i in range(len(temp)):\n    for j in (temp.columns):\n        if temp.loc[i,j]>0:\n            temp.loc[i,j]=j\ntemp.head(10)","c7a0449b":"temp = temp.values\ntransactions = []\nfor i in range(14693):\n    x=[]\n    for j in range(167):\n        if temp[i,j]!=0:\n            x.append(temp[i,j])\n    transactions.append(x)\ntransactions","d22eedcf":"!pip install apyori\nfrom apyori import apriori","4edc42b8":"results = apriori(transactions,min_support=0.0003,min_confidence=0.02,min_lift=3,min_length=2,target='rules')","d8f15115":"results = list(results)","fc6f21b4":"len(results)","f487df46":"results[0]","6a4b9ba3":"def inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    confidences = [result[2][0][2] for result in results]\n    lifts       = [result[2][0][3] for result in results]\n    return list(zip(lhs, rhs, supports, confidences, lifts))\nresultsinDF = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])","9c42b7fc":"resultsinDF.sort_values(by='Lift',ascending=False)","b0e67fb3":"resultsinDF.drop(['Confidence','Lift'],axis=1).sort_values(by='Support',ascending=False)","46601b14":"#### Eclat","70b67cd7":"### Feature Engineering","01817d66":"#### Apriori","5633f7c2":"### Exploratory Data Analysis","79fbfe83":"### Model Building"}}