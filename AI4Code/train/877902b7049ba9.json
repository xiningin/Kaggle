{"cell_type":{"8ef6de7b":"code","e6ccf9f7":"code","bfa307c8":"code","e4c944ba":"code","428d8be6":"code","441b7ee6":"code","eb08ad78":"code","6050d598":"code","6849ad06":"code","641bf9cf":"code","248a1e98":"code","830f1b89":"code","77b2ff6d":"code","6dc4dce2":"markdown","dce4bdd0":"markdown"},"source":{"8ef6de7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6ccf9f7":"train_data = pd.read_csv('\/kaggle\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip',sep = '\\t')\ntest_data = pd.read_csv('\/kaggle\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip',sep = '\\t')\ntrain_data.head()","bfa307c8":"train_data = train_data.drop(['PhraseId','SentenceId'],axis = 1)\ntest_data = test_data.drop(['PhraseId','SentenceId'],axis = 1)","e4c944ba":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Activation\nfrom keras.layers import Embedding\nfrom keras.layers import Bidirectional","428d8be6":"max_features = 20000  # Only consider the top 20k words\nmaxlen = 200","441b7ee6":"train_data.head()","eb08ad78":"from nltk.corpus import stopwords\nimport re\ndef text_cleaning(text):\n    forbidden_words = set(stopwords.words('english'))\n    if text:\n        text = ' '.join(text.split('.'))\n        text = re.sub('\\\/',' ',text)\n        text = re.sub(r'\\\\',' ',text)\n        text = re.sub(r'((http)\\S+)','',text)\n        text = re.sub(r'\\s+', ' ', re.sub('[^A-Za-z]', ' ', text.strip().lower())).strip()\n        text = re.sub(r'\\W+', ' ', text.strip().lower()).strip()\n        text = [word for word in text.split() if word not in forbidden_words]\n        return text\n    return []","6050d598":"train_data['flag'] = 'TRAIN'\ntest_data['flag'] = 'TEST'\ntotal_docs = pd.concat([train_data,test_data],axis = 0,ignore_index = True)\ntotal_docs['Phrase'] = total_docs['Phrase'].apply(lambda x: ' '.join(text_cleaning(x)))\nphrases = total_docs['Phrase'].tolist()\nfrom keras.preprocessing.text import one_hot\nvocab_size = 50000\nencoded_phrases = [one_hot(d, vocab_size) for d in phrases]\ntotal_docs['Phrase'] = encoded_phrases\ntrain_data = total_docs[total_docs['flag'] == 'TRAIN']\ntest_data = total_docs[total_docs['flag'] == 'TEST']\nx_train = train_data['Phrase']\ny_train = train_data['Sentiment']\nx_val = test_data['Phrase']\ny_val = test_data['Sentiment']","6849ad06":"y_train.unique()","641bf9cf":"x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen)\nx_val = keras.preprocessing.sequence.pad_sequences(x_val, maxlen=maxlen)","248a1e98":"model = Sequential()\ninputs = keras.Input(shape=(None,), dtype=\"int32\")\n# Embed each integer in a 128-dimensional vector\nmodel.add(inputs)\nmodel.add(Embedding(50000, 128))\n# Add 2 bidirectional LSTMs\nmodel.add(Bidirectional(LSTM(64, return_sequences=True)))\nmodel.add(Bidirectional(LSTM(64)))\n# Add a classifier\nmodel.add(Dense(5, activation=\"sigmoid\"))\n#model = keras.Model(inputs, outputs)\nmodel.summary()","830f1b89":"model.compile(\"adam\", \"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\nmodel.fit(x_train, y_train, batch_size=32, epochs=30, validation_data=(x_val, y_val))","77b2ff6d":"model.fit(x_train, y_train, batch_size=32, epochs=5, validation_data=(x_val, y_val))","6dc4dce2":"In conclusion, we created a bi-directional LSTM model and have trained it to detect sentiment. We reached 80% training and 82% validation accuracy.","dce4bdd0":"## Sentiment classification using LSTM\nIn this notebook, we are going to use LSTM architecture to train a model on the movie review dataset for predicting sentiment of the reviews. First of all, let's see what is LSTM?<br\/>\n![LSTM architecture](https:\/\/technopremium.com\/blog\/wp-content\/uploads\/2019\/06\/LSTM-cell-structure-1-1200x600.jpg)\nLSTM, or long short term memory, is a sequential neural network architecture, which preserves memory of the previous sequences using its structure. The first sequence model which was introduced is RNN. But, soon researchers discovered that RNN doesn't preserve much memory of previous sequences. Which results in losing context in long text sequences.<br\/>\nFor maintaining this context, LSTM was introduced. In a LSTM cell, there are special structures called gates and cell state, which are changed and maintained to keep memory in the LSTM. For understanding how these structures work, read [this blog](http:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/).<br\/>\nCode wise, we are using tensorflow and keras to build the model and train it. The following references were used to further understand codes\/concepts for this project.<br\/>\n### References:\n(1) [Medium article on keras lstm](https:\/\/medium.com\/@dclengacher\/keras-lstm-recurrent-neural-networks-c1f5febde03d)<br\/>\n(2) [Keras embedding layer documentation](https:\/\/keras.io\/api\/layers\/core_layers\/embedding\/#embedding)<br\/>\n(3) [Keras example of text classification from scratch](https:\/\/keras.io\/examples\/nlp\/text_classification_from_scratch\/)<br\/>\n(4)[Bi-directional lstm model example](https:\/\/keras.io\/examples\/nlp\/bidirectional_lstm_imdb\/)<br\/>\n(5)[kaggle notebook for text preprocessing](https:\/\/www.kaggle.com\/shyambhu\/score-and-nsfw-modeling-with-reddit-data)<br\/>"}}