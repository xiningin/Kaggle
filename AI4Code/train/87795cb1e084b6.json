{"cell_type":{"14457de8":"code","e1f5f20b":"code","0e2d3a41":"code","b829e917":"code","f64b655b":"code","1e210ceb":"code","0d47880b":"code","5f586bf1":"code","ec53d8dc":"code","d05678df":"code","29608642":"code","68dbba9d":"code","49553e2b":"code","cc3af78a":"code","25dc696a":"code","65debb58":"code","f5adaecf":"code","12ed3552":"code","5e1e4a88":"code","f692edb5":"code","3ad2cdf9":"code","06c9e85a":"code","4ca60fa5":"code","b97eede7":"code","ff6c45a5":"code","53ec545b":"code","cb8af654":"code","120b187c":"code","ece88fef":"code","078e438b":"code","8f96f7bf":"code","45d5c606":"code","3636c5a4":"code","915de899":"code","9b07114a":"code","4f9711c3":"code","f153a814":"markdown","ba0917c5":"markdown","955f1d1b":"markdown","66642986":"markdown","43ee69fb":"markdown","de854371":"markdown"},"source":{"14457de8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1f5f20b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import r2_score","0e2d3a41":"loan=pd.read_csv('..\/input\/loan-predication\/train_u6lujuX_CVtuZ9i (1).csv')","b829e917":"loan.head()","f64b655b":"loan.info()","1e210ceb":"print(loan.shape)","0d47880b":"loan.describe()","5f586bf1":"loan.columns","ec53d8dc":"#describe function for non numeric variables.\nq=loan[['Gender','Married','Dependents','Education','Self_Employed','Property_Area','Loan_Status']]","d05678df":"q.describe()","29608642":"loan.isna().sum()","68dbba9d":"loan['Gender'].fillna(value='Male',inplace=True)\nloan['Married'].fillna(value='Yes',inplace=True)\nloan['Dependents'].fillna(value=0,inplace=True)\nloan['Self_Employed'].fillna(value='No',inplace=True)","49553e2b":"w=['LoanAmount','Loan_Amount_Term','Credit_History']","cc3af78a":"for i in w:\n    sns.boxplot(y=i,data=loan)\n    plt.show()","25dc696a":"## as we can see oulier so impute with median.\n\nfor i in w:\n    med_i=loan[i].median(skipna=True)\n    print(med_i)\n    ","65debb58":"loan['LoanAmount'].fillna(value=128,inplace=True)\nloan['Loan_Amount_Term'].fillna(value=360,inplace=True)\nloan['Credit_History'].fillna(value=1,inplace=True)","f5adaecf":"# check missing values are imputed or not \n\nloan.isna().sum()","12ed3552":"##Drop the loan id column\n\nloan=loan.drop('Loan_ID',axis=1)","5e1e4a88":"a=[ 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount','Loan_Amount_Term']","f692edb5":"b=['Gender', 'Married', 'Dependents', 'Education','Self_Employed','Credit_History', 'Property_Area', 'Loan_Status']","3ad2cdf9":"for i in a:\n    ax=sns.histplot(loan[i],bins=10)\n    for p in ax.patches:\n        ax.annotate(p.get_height(),(p.get_x()+0.5,p.get_height()+5))\n    \n    plt.show()\n","06c9e85a":"for i in b:\n    ax1=sns.countplot(x=i,data=loan)\n    for q in ax1.patches:\n        ax1.annotate(q.get_height(),(q.get_x()+0.5,q.get_height()+5))\n\n    plt.show()\n    ","4ca60fa5":"loan.head()","b97eede7":"## encode the categorical variables\n\nloan_enc=pd.get_dummies(loan,drop_first=True)","ff6c45a5":"loan_enc.head()","53ec545b":"x=loan_enc.drop(columns='Loan_Status_Y')\ny=loan_enc['Loan_Status_Y']","cb8af654":"#split the data into train and test\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)\n","120b187c":"x_train.shape","ece88fef":"x_test.shape","078e438b":"log=LogisticRegression()","8f96f7bf":"log.fit(x_train,y_train)","45d5c606":"y_pred=log.predict(x_test)","3636c5a4":"y_pred_train=log.predict(x_train)","915de899":"print(classification_report(y_test,y_pred))","9b07114a":"print(classification_report(y_train,y_pred_train))","4f9711c3":"print(\"Coeeficent of Determination:{}\".format(r2_score(y_test,y_pred)))","f153a814":"* From the above plots we can analyze the following points.\n* Income of most of the applicants is 0 to 10000\n* Income of most of the co applicants is 0 to 5000\n* For most of the applicants the loan amount is between 80 to 200\n* For most of the applicants the loan term is 350 to 380.","ba0917c5":"* for loan amount impute with 128\n* for loan amount term impute with 360\n* for credit history impute with 1","955f1d1b":"* There are missing values in the dataset so impute them \n* impute the missing values for Gender- from the describe function we can notice that most of the applicants are Male so impute the missing values with Male\n* For Married impute the missing values with Yes\n* For dependents impute the missing values with 0\n* For selfemployed impute with No \n\n* For loan amount impute with \n","66642986":"From the above plot we can analyze like below\n*  502 Male applicants and 112 Female applicants\n* 401 Married applicant 213 unmarried applicants\n* For 345 applicants the dependents are 0, for 102 applicants 1 dependent, for 101 applicants there are 2 dependents and for 51 applicants there are 3+ dependents\n*  Graduate applicants are 480 and non graduate applicants are 134\n* self employed applicants are 82 and salaried are 500\n* For 89 applicants there credit history is 0 and for 475 applicants their credit history is 1.\n* The applicants property area is in as follows for 202 applicants urban, for 179 applicants Rural and for 233 applicants semiurban\n* Loan status for 422 applicants yes(eligible) and for 192 applicants No (not eligible)","43ee69fb":"For continuous variables before imputing check for outliers. If outliers are there impute with median otherwise impute with mean","de854371":"* separte the continuous and categorical variables "}}