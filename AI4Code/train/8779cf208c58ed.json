{"cell_type":{"b1af7c15":"code","f2ab8ae4":"code","d2bb4dba":"code","706994a1":"code","4521e2e6":"code","bf8e6a04":"code","8ac42762":"code","55cc545e":"code","6b5e0699":"code","d2e03812":"markdown","1a3c540b":"markdown","e3659644":"markdown","b362cdf0":"markdown","570f5075":"markdown","18b1a699":"markdown","89d3c647":"markdown"},"source":{"b1af7c15":"import numpy as np\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f2ab8ae4":"train = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv')","d2bb4dba":"by = ['card1', 'card2', 'card3', 'card4', 'card5', 'card6']\ngrouped = train.groupby(by, as_index=False)['TransactionID'].count()\ngrouped[grouped['TransactionID']==7].head(5)","706994a1":"# This combination of cardx features gives 7 rows.\ncard1 = 18383\ncard2 = 128\ncard3 = 150\ncard4 = 'visa'\ncard5 = 226\ncard6 = 'credit'\n\ntrain_slice = train[(train['card1']==card1)&\n                   (train['card2']==card2)&\n                   (train['card3']==card3)&\n                   (train['card4']==card4)&\n                   (train['card5']==card5)&\n                   (train['card6']==card6)]","4521e2e6":"features = ['TransactionID','TransactionDT','ProductCD', 'P_emaildomain', 'R_emaildomain'\n            , 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14', 'D15']\ntrain_slice = train_slice.sort_values(['TransactionID'])[features]\ntrain_slice","bf8e6a04":"train_slice['DaysFromStart'] = np.round(train_slice['TransactionDT']\/(60*60*24),0)","8ac42762":"train_slice","55cc545e":"train_slice['DaysFromPreviousTransaction'] = train_slice['DaysFromStart'].diff()","6b5e0699":"features = ['TransactionID', 'TransactionDT', 'D1', 'D2', 'D3', 'DaysFromStart', 'DaysFromPreviousTransaction']\ntrain_slice[features].iloc[3:]","d2e03812":"**If I'm not wrong this should be a useful knowledge to identify users and proceed with a meaningful FE.**\n\n** Please share your thoughts! **","1a3c540b":"Let's group by 'card' features and look closely on those combinations that give us around 5-10 rows.","e3659644":"**Time to identify what's behind 'D' columns!**\n\nCreate feature:\n    DaysFromPreviousTransaction = DaysFromStart[row_(i)] - DaysFromStart[row_(i-1)]","b362cdf0":"I can be wrong but I believe these transactions belong to the same user. One can see that DaysFromPreviousTransaction is equal to D3 which drives me to think that **D3 indicates number of days from the previous transaction**.\n\nAlso D1 is cumulatively increasing and for example 481 = 449 + 32 and 510 = 481 + 29, i.e. **D1 could indicate days from the first transaction**. \n\nD2 is almost always equal to D1 but for the first transaction when D1 is equal to 0 D2 is nan.","570f5075":"**Let's investigate \"D\" features!**\n\nWe all know that the data provided in this competition consist of transactions. I was curious about how to correctly identify the same cardholder\/card and group that transactions. Organizers revealed that \"D\" features contain information about different time deltas and \"card\" features apply to a payment card info. \n","18b1a699":"Now we can add \"DaysFromStart\" column by divining TransactionDT on 60*60*24 and then round it to get a number of days from a starting point.","89d3c647":"Now let's look closer at these rows."}}