{"cell_type":{"c4731d07":"code","3a089340":"code","d3b91f92":"code","3ce5a8b3":"code","21de1035":"code","5d007ead":"code","26880f82":"code","58eac32e":"code","effb3b72":"code","e3303bf2":"code","896e32fd":"code","a4105436":"code","43e3659f":"markdown","e83e727d":"markdown","dbb120ed":"markdown","0cf80d62":"markdown","043644aa":"markdown","fd95ce0c":"markdown","8d93cba4":"markdown","2d713c24":"markdown","80684f6f":"markdown","61911633":"markdown","c5c74d70":"markdown","0561301a":"markdown","342b004e":"markdown"},"source":{"c4731d07":"import requests\n\ndef guardian_search(api_key, search_query):\n    url = 'http:\/\/content.guardianapis.com\/search?q='\n    query = search_query.replace(' ', '%20') #removing spaces\n    final_url = url + query + '&api-key=' + api_key #composing the URL we want to run\n    response = requests.get(final_url) #collects the url\n    data = response.content.decode('utf-8') #this gets it into a readable format\n    return data","3a089340":"guardian_search('7fdfdabf-472f-4198-bfa3-89020e56707e', 'code')","d3b91f92":"guardian_search('7fdfdabf-472f-4198-bfa3-89020e56707e', 'banksy and london')","3ce5a8b3":"def guardian_search_version2(api_key, search_query, from_date):\n    url = 'http:\/\/content.guardianapis.com\/search?q='\n    query = search_query.replace(' ', '%20') \n    final_url = url + query + '&from-date=' + from_date + '&page-size=100' + '&api-key=' + api_key\n    response = requests.get(final_url)\n    data = response.content.decode('utf-8')\n    return data","21de1035":"guardian_search_version2('7fdfdabf-472f-4198-bfa3-89020e56707e', 'banksy and london', '2020-06-15')","5d007ead":"example_json = guardian_search_version2('7fdfdabf-472f-4198-bfa3-89020e56707e', 'banksy and london', '2020-06-15')\n\nimport json\n\nexample = json.loads(example_json) ","26880f82":"print(example['response']['results'])","58eac32e":"results_example = example['response']['results']\n\nimport pandas as pd\n\ndf = pd.DataFrame(results_example, columns=['id', 'type', 'sectionId', 'sectionName'])\n\nprint(df)","effb3b72":"def guardian_search_wordcount(api_key, search_query, from_date):\n    url = 'http:\/\/content.guardianapis.com\/search?q='\n    query = search_query.replace(' ', '%20') \n    final_url = url + query + '&from-date=' + from_date + '&show-fields=wordcount' + '&page-size=100' + '&api-key=' + api_key\n    response = requests.get(final_url)\n    data = response.content.decode('utf-8')\n    return data","e3303bf2":"print(guardian_search_wordcount('7fdfdabf-472f-4198-bfa3-89020e56707e', 'banksy and london', '2020-06-15'))","896e32fd":"wordcount_example_json = guardian_search_wordcount('7fdfdabf-472f-4198-bfa3-89020e56707e', 'banksy and london', '2020-06-15')\n\nwordcount_example = json.loads(wordcount_example_json)\n\nresults_wordcount_example = wordcount_example['response']['results']\n\ndf_wordcount = pd.DataFrame(results_wordcount_example, columns=['id', 'type', 'sectionId', 'sectionName', 'fields'])\n\ndf_wordcount['wordcount'] = df_wordcount['fields'].astype(str).str.replace('{\\'wordcount\\': \\'','').str.replace('\\'}','')\n\ndel df_wordcount['fields']\n\nprint(df_wordcount)","a4105436":"def guardian_search_wordcount_formatted(api_key, search_query, from_date, output_type):\n    url = 'http:\/\/content.guardianapis.com\/search?q='\n    query = search_query.replace(' ', '%20') \n    final_url = url + query + '&from-date=' + from_date + '&show-fields=wordcount' + '&page-size=100' + '&api-key=' + api_key\n    response = requests.get(final_url)\n    data1 = response.content.decode('utf-8')\n    data2 = json.loads(data1)\n    data3 = data2['response']['results']\n    final_data = pd.DataFrame(data3, columns=['id', 'type', 'sectionId', 'sectionName', 'fields'])\n    final_data['wordcount'] = final_data['fields'].astype(str).str.replace('{\\'wordcount\\': \\'','').str.replace('\\'}','')\n    del final_data['fields']\n    if (output_type == 'DataFrame'):\n        return final_data\n    else:\n        return data1\n\ndf_wordcount = guardian_search_wordcount_formatted('7fdfdabf-472f-4198-bfa3-89020e56707e', 'banksy and london', '2020-06-15', output_type='DataFrame')\n\nprint(df_wordcount)","43e3659f":"# What are APIs?\n\nAPI stands for Application Programming Interfaces, it is a way to interact between multiple software intermediaries. So... an API is a request, it tells the system what to do and then returns the response back to you. It is like a waiter at a restaurant, it takes a request from you from a menu, returns to the kitchen and then brings you back the food you ordered. \n\nA real life example of this is when booking a flight using a online travel service website, you input your information and then the API takes your information and communicates with different airlines websites, it brings back information from the airlines websites and presents it to you, with various prices, ratings, luggage allowances, etc. \n\nAnother example would be a news feed from multiple sources. \n\nNow that all sounds well and good, but let's launch into an in depth example of how to work with one... \n\n\n# Example: The Guardian API\n\nThe Guardian is a British daily newspaper and has a open platform, you can sign up for it and recieve an API key. This API key allows you access to their own API! Using the link below you can sign up for a developer key for personal use:\n\nhttps:\/\/open-platform.theguardian.com\/\n\nThe Guardian has a super useful explanation of how to use their API in particular on this link:\n\nhttps:\/\/open-platform.theguardian.com\/documentation\/\n\nHow APIs work is that you use a URL that contains all of the relevant information and the URL returns a JSON (or another type of) file contianing relevant information. You need to manipulate the URL to provide the correct information. JSON stands for JavaScript Object Notation, don't worry, you don't need to know Java to use it! It is just a format for storing and transporting data - like a CSV.\n\nExample of a URL from The Guardian Website: \nhttps:\/\/content.guardianapis.com\/search?q=12%20years%20a%20slave&format=json&tag=film\/film,tone\/reviews&from-date=2010-01-01&show-tags=contributor&show-fields=starRating,headline,thumbnail,short-url&order-by=relevance&api-key=test\n\nClicking this links produces this:\n![image.png](attachment:image.png)\nThis is a JSON with the results of the search.\n\nLet's break down this example URL; the URL starts off with an \"Endpoint URL\": https:\/\/content.guardianapis.com\/search which is a way to call the API. \n\nThe URL then has ?q= which indicates a query operation, there is more on this in the Guardian documentation, we can see here that the example search is for 12 years a slave and instead of having spaces, it has %20. This is pretty common for APIs and can be programmed, it is shown in the function below. \n\n& means that we telling the API that we are providing another parameter\n\nThe example goes on to provide more parameters, I would recommend using the Guardian documentation (https:\/\/open-platform.theguardian.com\/documentation\/search) to manipulate this example until you have a stronger understanding before moving onto the next parts. \n\nThe final part of the URL is very important, &api-key=test is the part of the API where you provide the individual key to access the information. Instead of writing &api-key=key, you would write &api-key=YOUROWNKEY which you get in an email from the Guardian when you sign up for a key.\n\n","e83e727d":"Now that we have 86 results, we can move on to turn these into a table for manipulation...","dbb120ed":"As we have the data in a dataframe, we can manipulate it using python! \n\nThat is how you use APIs to get data from a website and into a format that is ready for manipulation.\n\n\nWe can go one step further by making the output type an option in our search function. \n\nThis is done in the function below, I added all the lines that formatted the JSON into a DataFrame into the function. The hardest part of doing this is the if statement at the end to allow for the return types, we want the output to be JSON for everything other than when output_type says to put it in DataFrame form. If you want to add other forms then you can add an 'elif' to the definition. ","0cf80d62":"Gosh! There are even more results for that! But notice how the 'and' works with this API, 'or' and 'not' work as well. \n\nLet's try adjusting our function so that we have more speficic parameters...\n\nI also added '&page-size=100' so that we have the first 100 results, not just the first 10 results. I also added a date parameter so we get all results from a certain date.","043644aa":"# Writing your own search function\n\nLet's write a basic function that produces a URL from any intake now...","fd95ce0c":"Now let's make this a dataframe with selected columns for data manipulation, we use Pandas for this:","8d93cba4":"Note that the dates must be in ISO8601 date or datetime","2d713c24":"Note that the API key is my unique key, generate your own!\n\nNow that we have this beautiful JSON file, we can manipulate it so that we can read and manipulate these articles!\n\nBut first... \n\nYou might notice that there doesn't seem to be too many articles about code written by The Guardian! Strange... This is because of something called pagination, pagination is basically splitting results into pages so that they are more readable for the user. If you read the first line of the JSON, it says that there 47638 results and we are only viewing the first page of 4764 pages! That is a lot of results... so I will show you how to get all the results and from now on we shall use a search query will fewer results... how about 'banksy' and 'london'? ","80684f6f":"The DataFrame can now be manipulated! You can treat this just like any other table in Python, how cool is that?\n\nWe have all 86 results as we have set the API to collect the first 100 results, this can be manipulated in the function guardian_search_version2. You can even add it as a variable if you want to!\n\nLet's say we want to collect more complex aspects from the API, like the wordcount of the data and getting all the results... let's start by adjusting the function:","61911633":"That is how you use APIs to pull data from websites and turn it into a usable format in a way that can be done repeatedly.","c5c74d70":"As you can see from the JSON, we have a new addition: \"fields\":{\"wordcount\":\"445\"}. This requires a little more manipulation to get just the actual wordcount, I have done this in the code below.\n\nLet's get the data into a DataFrame:","0561301a":"We can turn the JSON into a string using json.loads() and we can turn a string into a JSON format using json.dumps(). Here we are moving the JSON into a string for reading purposes.\n\nWe want the results from the function, hence we move down the curly brackets and select the results part from the 'respose':","342b004e":"Let's test this function and search for articles with the 'code' in the title:"}}