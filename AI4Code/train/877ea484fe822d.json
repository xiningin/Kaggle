{"cell_type":{"e3e778c9":"code","5f427d26":"code","c24cf3dc":"code","c0413971":"code","8a17702f":"code","f0aa4416":"code","d7cb3923":"code","f8cf3286":"code","224441ee":"code","703101f5":"code","57aed72e":"code","4eb66d59":"code","e4615f0f":"markdown","88e5f4e6":"markdown"},"source":{"e3e778c9":"import numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor","5f427d26":"inputs = pd.read_csv(\"\/kaggle\/input\/sound-the-alarm2\/public.csv\")\ntargets = pd.read_csv(\"\/kaggle\/input\/sound-the-alarm2\/public.targets.csv\")","c24cf3dc":"inputs.head(1)","c0413971":"targets.head(1)","8a17702f":"input_tags=['AV34126_FdbkFlt','FI31132_AH','FI31132_AL','FI31132_ALL','FI31133_AH','FI31133_AL','FI31133_ALL','FI31134_AL','FI31134_ALL','FI32110_AL','FI32110_ALL','FI32111_AH','FI32111_AL','FI32112_AH','FI32112_AHH','FI32112_AL','FI32116_ALL','FI34133_AH','FI34133_AHH','FI34133_AL','FI34133_ALL','FI34138_AH','FI34140_AH','FI34140_AHH','FI34140_AL','FI34143_AH','FI34143_AHH','FI34143_AL','FI34143_ALL','FI34144_AH','FI34144_AHH','FI34170_AH','FI34170_AHH','FI34170_AL','FI34170_ALL','FI34171_AH','FI34171_AHH','FI34171_AL','FI34171_ALL','FI34172_AH','FI34172_AHH','FI34172_AL','FI34172_ALL','FI34173_AH','FI34173_AL','FI34174_AH','FI34174_AHH','FI34174_AL','FI34174_ALL','FI34175_AH','FI34175_AL','FI34175_ALL','FI34180_AL','FI34180_ALL','FI34181_AH','FI34181_AL','FI34182_AH','FI34182_AHH','FI34182_AL','FI34182_ALL','FI34183_AH','FI34183_AHH','FI34183_AL','FI34183_ALL','FI34184_AH','FI34184_AHH','FI34184_AL','FI34184_ALL','FI34185_AL','FI34185_ALL','FI34186_AH','FI34186_AHH','FI34186_AL','FI34186_ALL','FI34187_AL','FI34187_ALL','FI34188_AH','FI34188_AHH','FI34188_AL','FI34188_ALL','FI34189_AH','FI34189_AL','FI34189_ALL','FI34190_AH','FI34190_AHH','FI34190_AL','FI34190_ALL','FI34191_AH','FI34191_AHH','FI34191_AL','FI34191_ALL','FI34192_AH','FI34192_AL','FI34192_ALL','FI34193_AH','FI34193_AHH','FI34193_AL','FI34194_AH','FI34194_AL','FI34194_ALL','FI34195_AH','FI34195_AHH','FI34195_AL','FI34195_ALL','FI34196_AH','FI34196_AHH','FI34196_AL','FI34196_ALL','FI34197_AH','FI34197_AL','FI34197_ALL','FSL31231_Alarm','IDI32158_AH','IDI32158_AHH','JI32151_AH','JI32151_AHH','JI32152_AH','JI32152_AHH','JY32155_AH','JY32155_AHH','JY32155_AL','LI31016_AH','LI31016_AHH','LI31016_AL','LI31016_ALL','LI31048_AH','LI31048_AHH','LI31048_AL','LI31048_ALL','LI31066_AH','LI31066_AHH','LI31066_AL','LI31066_ALL','LI31073_AH','LI31073_AHH','LI31073_AL','LI31073_ALL','LI31122_AH','LI31122_AHH','LI31122_AL','LI31122_ALL','LI31142_AL','LI31142_ALL','LI31205_AL','LI31225_AHH','LI31225_AL','LI31225_ALL','LI32117_AH','LI34111_AH','LI34111_AHH','LI34111_AL','LI34111_ALL','LI34112_AH','LI34112_AHH','LI34112_AL','LI34112_ALL','LI34113_AH','LI34113_AHH','LI34113_AL','LI34113_ALL','LI34114_AH','LI34114_AHH','LI34114_AL','LI34114_ALL','LI34122_AH','LI34122_AHH','LI34123_AH','LI34123_AHH','LI34124_AH','LI34124_AHH','LI34125_AH','LI34125_AHH','LI34127_AH','LI34128_AH','LI34129_AH','LI34129_AHH','LI34131_AH','LI34131_AHH','LI34132_AH','LI34134_AH','LI34134_AHH','LI34141_AH','LI34141_AHH','LI34141_AL','LI34141_ALL','LSH31020_Alarm','LSH34167_Alarm','LSL31078A_Alarm','LSL31078B_Alarm','LSL31106_Alarm','PDI31145_AHH','PDI31161_AH','PDI31161_AHH','PDI31163_AH','PDI31163_AHH','PDI32100_AH','PDI32107_AH','PDSH32106A_Alarm','PDSH32106B_Alarm','PI31126_AH','PI31126_AL','PI31126_ALL','PI31147_AH','PI31147_AHH','PI31147_AL','PI31147_ALL','PI31217_AH','PI31237_AH','PI31238_AH','PI32101_AL','PI32102_AL','PI32105_AL','PI32105_ALL','PI32108_AL','PI32109_AL','PI34136_AL','PI34136_ALL','PI34137_AH','PI34137_AL','PI34137_ALL','PS31052B_Alarm','PSH31055_Alarm','SSL31154_Alarm','TI31000_AH','TI31000_AHH','TI31012A_AH','TI31012A_AHH','TI31012A_AL','TI31012A_ALL','TI31012B_AH','TI31012B_AHH','TI31012B_AL','TI31012B_ALL','TI31012C_AH','TI31012C_AHH','TI31012C_AL','TI31012C_ALL','TI31013A_AH','TI31013A_AHH','TI31013A_AL','TI31013A_ALL','TI31013B_AH','TI31013B_AHH','TI31013B_AL','TI31013B_ALL','TI31013C_AL','TI31015A_AH','TI31015B_AH','TI31101B_AH','TI31101B_AHH','TI31102A_AL','TI31102A_ALL','TI31124_AL','TI31124_ALL','TI31131_AH','TI31131_AL','TI31137_AH','TI31137_AHH','TI31143_AL','TI31143_ALL','TI31204_AL','TI31204_ALL','TI31224_ALL','TI32119_AH','TI32119_AL','TI32119_ALL','TI32120_AL','TI32121_AL','TI32122_AL','TI32123_AL','TQ31237_AH','TQ31237_AHH','TSH31232_Alarm','TV31121_PlcDiagOk','WI31011_AH','WI31014_AH','WI31014_AHH','WI31014_AL','WI31014_ALL','WI31155_AL','WI31155_ALL','WI31236_AH','WI31236_AHH','WY31236_AH','WY31236_AHH','XS31042A_Alarm','XS31044A_Alarm','XS31044_Alarm','YV31037_ClsFlt','YV31037_FdbkFlt','YV31037_OpnFlt','YV31037_PlcDiagOk','YV31038_OpnFlt','YV31039_ClsFlt','YV31047_ClsFlt','YV31047_OpnFlt','YV31047_PlcDiagOk','YV31064_PlcDiagOk','YV31065_ClsFlt','YV31065_FdbkFlt','YV31065_OpnFlt','YV31065_PlcDiagOk','YV31070_PlcDiagOk','YV31077A_ClsFlt','YV31077B_ClsFlt','YV31149_FdbkFlt','YV31149_PlcDiagOk','YV31150_FdbkFlt','YV31150_PlcDiagOk','YV31156_PlcDiagOk','YV34108_OpnFlt','YV34133_ClsFlt','YV34151_ClsFlt','YV34151_OpnFlt','YV34152_ClsFlt','YV34152_OpnFlt','YV34154_ClsFlt','YV34154_OpnFlt','YV34155_OpnFlt','YV34157_OpnFlt','YV34159_ClsFlt','YV34159_OpnFlt','YV34169_OpnFlt','ZI31148_AH','ZI31148_AHH','ZI31148_AL','ZI31148_ALL','ZI31148_MH_Alarm','ZT34145_AHH','ZT34145_ALL','_3100200_InService','_3100200_Trip','_3100201_InService','_3100201_Trip','_3100203_InService','_3100203_Trip','_3100204_InService','_3100204_Trip','_3100205_InService','_3100205_Trip','_3100301_Alarm','_3100301_InService','_3100301_Trip','_3100303_Alarm','_3100303_InService','_3100303_Trip','_3100304_Alarm','_3100304_InService','_3100304_Trip','_3100305_InService','_3100305_Trip','_3100_FIB_002_ALM','_3100_FIB_002_FLT','_3100_UPS_003_Line_Fail','_3100_UPS_003_Low_Bat','_3100_UPS_003_On','_3110_CNE_012_ZSFF_Alarm','_3110_CNE_012_ZSRR_Alarm','_3110_CRG_001_USpeed','_3110_FDA_001_PWSA_Alarm','_3110_FDA_001_PWSB_Alarm','_3110_FDA_001_USS_Alarm','_3110_HPP_009_FieldIl1','_3110_MGT_001_Faulted','_3110_PPS_033_FieldIl1','_3110_SEQ_001_SeqFault','_3110_SEQ_002_SeqFault','_3110_SEQ_003_SeqFault','_3110_SEQ_004_SeqFault','_3120_CVR_001_BCS_Alarm','_3120_CVR_001_BDSA_Alarm','_3120_CVR_001_BDSB_Alarm','_3120_CVR_001_BDSD_Alarm','_3120_CVR_001_BDSE_Alarm','_3120_CVR_001_No_Feed_1_A','_3120_CVR_001_No_Feed_4_A','_3120_CVR_001_PWSA_Alarm','_3120_CVR_001_PWSB_Alarm','_3120_CVR_001_PWSC_Alarm','_3120_CVR_001_PWSD_Alarm','_3120_CVR_001_PWSE_Alarm','_3120_CVR_001_PWSF_Alarm','_3120_HPP_016_FieldIl1','_3210_Chopper_faults0_0','_3210_Chopper_faults0_10','_3210_Chopper_faults0_2','_3210_Chopper_faults0_3','_3210_Chopper_faults0_4','_3210_Chopper_faults0_7','_3210_Chopper_faults0_8','_3210_Chopper_faults0_9','_3210_Chopper_faults1_4','_3210_Chopper_faults1_6','_3210_Chopper_faults1_7','_3210_Chopper_faults1_8','_3210_Chopper_faults2_5','_3210_Chopper_faults3_0','_3210_Chopper_faults3_13','_3210_Chopper_faults4_9','_3210_Chopper_faults5_14','_3210_Chopper_faults5_9','_3210_MLS_001_Coupling_Al','_3210_MLS_001_DVAR_Alarm','_3210_MLS_001_FrozenCharg','_3210_PPD_017_DrvFail','_3210_PPD_018_DrvFail','_3210_PPD_020_DrvFail','_3210_PPD_032_Drop_Failed','_3210_PPD_032_Lift_Failed','_3210_SEQ_001_SeqFault','_3210_SEQ_002_SeqFault','_3210_SEQ_003_SeqFault','_3210_SERm_faults0_12','_3210_SERm_faults0_14','_3210_SERm_faults0_7','_3210_SERm_faults0_9','_3210_SERm_faults1_12','_3210_SERm_faults1_2','_3210_SERm_faults1_5','_3210_SERm_faults1_6','_3210_SERm_faults2_12','_3210_SERm_faults2_15','_3210_SERm_faults2_2','_3210_SERm_faults3_1','_3210_SERm_faults3_10','_3210_SERm_faults4_12','_3210_SERm_faults4_15','_3210_SERm_faults4_6','_3210_SERm_faults5_1','_3210_SERm_faults5_10','_3210_SERm_faults5_14','_3210_SERm_faults5_5','_3210_SERm_faults5_6','_3210_SERs_faults0_11','_3210_SERs_faults0_12','_3210_SERs_faults0_14','_3210_SERs_faults0_7','_3210_SERs_faults1_1','_3210_SERs_faults1_12','_3210_SERs_faults1_2','_3210_SERs_faults1_3','_3210_SERs_faults1_5','_3210_SERs_faults1_6','_3210_SERs_faults1_9','_3210_SERs_faults2_12','_3210_SERs_faults2_14','_3210_SERs_faults3_1','_3210_SERs_faults3_10','_3210_SERs_faults3_14','_3210_SERs_faults4_12','_3210_SERs_faults4_15','_3210_SERs_faults4_6','_3210_SERs_faults4_9','_3210_SERs_faults5_2','_3210_SERs_faults5_3','_3210_XMM_047_FltCom','_3210_XMM_047_USpeed']\ntarget_tags=['FI31132_AL','FI31133_AL','FI31134_AL','FI32111_AL','PDI31161_AH','PDI31163_AH','PDSH32106A_Alarm','PDSH32106B_Alarm','PI31126_AL','PI31147_AH','PI31147_AL','PI31217_AH','PI31237_AH','PI32105_AL','PI34136_AL','PI34136_ALL','PI34137_AL','PSH31055_Alarm','TI31000_AH','TI31012A_AL','TI31012B_AH','TI31012B_AL','TI31012C_AH','TI31012C_AL','TI31013A_AL','TI31013B_AL','TI31013C_AL','TI31131_AL','TI31204_AL','TI32119_AL','_3100_UPS_003_Line_Fail','_3110_MGT_001_Faulted','_3210_Chopper_faults1_8','_3210_Chopper_faults3_0','_3210_PPD_018_DrvFail']","f0aa4416":"def rolling(df, window, step):\n    count = 0\n    df_length = len(df)\n    while count < (df_length - window):\n        yield count, df[count:window+count]\n        count += step\n\ndef preprocess(alarms, labels=None):\n\n    alarms = alarms[alarms.major_down_time==False].drop(columns=['major_down_time'])\n    #count frequencies\n    t = alarms.groupby(['day', 'tag']).count().rename(columns={'date':'freq'}).reset_index()\n    \n    # add an empty row for all columns so we always get the same shape output\n    t = t.append(pd.DataFrame({'day':[pd.to_datetime(alarms.date.values[0]).date()]*len(input_tags),'freq':[0]*len(input_tags), 'tag':input_tags}))\n    X = pd.pivot_table(t, values='freq', columns='tag', index='day', aggfunc=np.sum).reset_index()\n    \n    # ensure the columns are in the same order\n    X=X[['day'] + input_tags]\n    x=dict()\n\n    # For model input we will take 30 days of history for every row IE 3 dimensions\n    # (sample_day, history date, column)\n    # then flatten to 2 dimensions using date\n    # (sample day, datecolumn)\n    \n    for offset, window in rolling(X, 30, 1): # prepare the X input\n        d = window.tail(1).day.values[0]\n        if d in labels[labels.window=='7 day'].date.values : # make sure we have a label for the date\n            x[d]=window.drop(columns=['day']).fillna(0)\n\n    inputs = [x[y] for y in x]\n    inp = np.array(inputs)\n    X = inp.reshape((inp.shape[0],inp.shape[1]*inp.shape[2])) # flatten to one row per day\n\n    target1 = labels[(labels.window=='7 day') & labels.date.isin(x)].fillna(0)\n    target2 = labels[(labels.window=='8-14 day') & labels.date.isin(x)].fillna(0)\n    target3 = labels[(labels.window=='15-21 day') & labels.date.isin(x)].fillna(0)\n    return X, x.keys(), target1[target_tags], target2[target_tags], target3[target_tags]","d7cb3923":"class  EnsembleModel:\n\n    def __init__(self):\n        self.models = dict()\n        self.models['model1'] = DecisionTreeRegressor(random_state=1)\n        self.models['model2'] = DecisionTreeRegressor(random_state=1)\n        self.models['model3'] = DecisionTreeRegressor(random_state=1)\n\n    def fit1(self, X, y):\n        self.models['model1'].fit(X, y)\n\n    def fit2(self, X, y):\n        self.models['model2'].fit(X, y)\n\n    def fit3(self, X, y):\n        self.models['model3'].fit(X, y)\n\n    def _predict(self,model_name, inp_X, dates):\n        preds = self.models[model_name].predict(inp_X)\n        preds = pd.DataFrame(dict(zip(target_tags,preds.T)))\n        preds['date']=dates\n        return preds\n\n    def _predict_all(self,inp_X, dates):\n        p1 = self._predict('model1',inp_X,dates)\n        p2 = self._predict('model2',inp_X,dates)\n        p3 = self._predict('model3',inp_X,dates)\n        p1['window']=['7 day']*len(p1)\n        p2['window']=['8-14 day']*len(p2)\n        p3['window']=['15-21 day']*len(p3)\n        return pd.concat([p1,p2,p3]).reset_index(drop=True)\n\n    def predict(self, inp_X, dates):\n        return self._predict_all(inp_X, dates)","f8cf3286":"X,dates,y1,y2,y3 = preprocess(inputs,targets)\nX_train, X_test = X[:int(X.shape[0]*0.8)], X[int(X.shape[0]*0.8):]\ndates_train, dates_test = list(dates)[:int(len(dates)*0.8)], list(dates)[int(len(dates)*0.8):]","224441ee":"models = EnsembleModel()\nmodels.fit1(X_train, y1[:167])\nmodels.fit2(X_train, y2[:167])\nmodels.fit3(X_train, y3[:167])","703101f5":"pred = models.predict(X_test, dates_test)","57aed72e":"def scoring(gt, pred):\n    gt['date']=pd.to_datetime(gt.date)\n    pred['date']=pd.to_datetime(pred.date)\n\n    gt = gt.set_index(['window','date'])\n\n    pred = pred.set_index(['window','date'])\n    m = gt.join(pred, how='inner', rsuffix='_pred')\n\n    p_cols  = [c+\"_pred\" for c in target_tags]\n    gt = m[target_tags].values\n    pred = m[p_cols].values\n    correct = np.bitwise_and(gt>0,pred>0).sum()\n    incorrect = np.bitwise_and(gt==0,pred>0).sum()\n    return correct - (incorrect\/2)","4eb66d59":"scoring(targets, pred)","e4615f0f":"## This is a code for the write-up around a model that got me to 10th place in Australia-based machine learning competition: https:\/\/dspyt.com\/machine-learning-simple-sklearn-ensemble\/","88e5f4e6":"![](https:\/\/miro.medium.com\/max\/1200\/1*IHNY-j3mp00H_i6gb5DA-w.png)"}}