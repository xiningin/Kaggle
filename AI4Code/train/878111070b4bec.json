{"cell_type":{"92b432aa":"code","c4f5c1fd":"code","8bb04a8a":"code","decca111":"code","b61630c7":"code","d30a14c7":"code","750a20fb":"code","3a804952":"code","63ab4862":"code","11d69f7e":"code","23d48c4b":"markdown","efed1cee":"markdown"},"source":{"92b432aa":"import os\nimport random\nimport re\nimport gc\nimport glob\nimport plotly.graph_objects as go\nimport plotly.express as px\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import EarlyStopping\nfrom keras.callbacks import ModelCheckpoint\nimport pydicom\nfrom tqdm import tqdm\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML\nimport numpy as np \nimport pandas as pd ","c4f5c1fd":"#Data Visualization\ndf = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\")\npreds = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv')\ndf.drop(index=109,inplace = True)\ndf.drop(index=488,inplace = True)","8bb04a8a":"px.histogram(df, x='MGMT_value')","decca111":"def show_dcm_info(dataset):\n    print(\"Filename.........:\", file_path)\n    print(\"Storage type.....:\", dataset.SOPClassUID)\n    print()\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    print(\"Patient id..........:\", dataset.PatientID)\n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing....:\", dataset.PixelSpacing)","b61630c7":"def plot_pixel_array(dataset, figsize=(10,10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    plt.show()","d30a14c7":"i = 1\nnum_to_plot = 5\nfor file_name in tqdm(os.listdir('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/FLAIR')):\n    file_path = os.path.join('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/FLAIR', file_name)\n    dataset = pydicom.dcmread(file_path)\n    show_dcm_info(dataset)\n    plot_pixel_array(dataset)    \n    if i >= num_to_plot:\n        break\n    \n    i += 1","750a20fb":"def load_dicom(path):\n    dicom=pydicom.read_file(path,force=True)\n    data=dicom.pixel_array\n    data=data-np.min(data)\n    if np.max(data) != 0:\n        data=data\/np.max(data)\n    data=(data*255).astype(np.uint8)\n    return data","3a804952":"from matplotlib import animation, rc\nrc('animation', html='jshtml')\n\n\ndef create_animation(ims):\n    fig = plt.figure(figsize=(6, 6))\n    plt.axis('off')\n    im = plt.imshow(ims[0], cmap=\"gray\")\n\n    def animate_func(i):\n        im.set_array(ims[i])\n        return [im]\n\n    return animation.FuncAnimation(fig, animate_func, frames = len(ims), interval = 1000\/\/24)","63ab4862":"def load_dicom_line(path):\n    t_paths = sorted(\n        glob.glob(os.path.join(path, \"*\")), \n        key=lambda x: int(x[:-4].split(\"-\")[-1]),\n    )\n    images = []\n    for filename in t_paths:\n        data = load_dicom(filename)\n        if data.max() == 0:\n            continue\n        images.append(data)\n        \n    return images","11d69f7e":"images = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00006\/FLAIR\")\ncreate_animation(images)","23d48c4b":"**TO BE CONTINUED .....**\n","efed1cee":"################################################################################"}}