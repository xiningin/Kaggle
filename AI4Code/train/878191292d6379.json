{"cell_type":{"f7020b1d":"code","a744f000":"code","f9ae322d":"code","98715895":"code","adaf2c00":"code","67d472b0":"code","2de38319":"code","2006c656":"code","8c5027ae":"code","a33e4cc4":"markdown","6d3e9b94":"markdown","07cf826d":"markdown","4b37e07f":"markdown"},"source":{"f7020b1d":"import pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\npd.options.mode.chained_assignment = None \n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\n# Creating categorical variables for class, sibsp, and parch\ntrain.Pclass.replace([1,2,3],['U','M','L'], inplace=True)\ntrain['SibSp'] = np.where(train.SibSp <= 1, 'L', 'H')\ntrain['Parch'] = np.where(train.Parch <= 2, 'L', 'H')","a744f000":"# Estimating missing age values\nage_train = train.dropna(subset = ['Age','Pclass','Sex','SibSp','Parch','Fare','Embarked'])\nage_train_dummies = pd.get_dummies(age_train[['Pclass','Sex','Embarked','SibSp','Parch']], drop_first=True)\nage_train = pd.concat([age_train, age_train_dummies], axis=1)\nx_age_var = list(age_train_dummies.columns) + ['Fare']\nage_test = train.loc[train.Age.isnull() == True].dropna(subset = ['Pclass','Sex','SibSp','Parch','Fare','Embarked'])\nage_test_dummies = pd.get_dummies(age_test[['Pclass','Sex','Embarked','SibSp','Parch']], drop_first = True)\nage_test = pd.concat([age_test, age_test_dummies], axis=1)\nage_test['Parch_L'] = np.ones((len(age_test_dummies),1))\nx_age_train = age_train[x_age_var]\nreg_age = linear_model.LinearRegression()\nreg_age.fit(x_age_train, age_train.Age)\nx_age_test = age_test[x_age_var]\nage_pred = reg_age.predict(x_age_test).tolist()\nx_age_test.loc[:,'Age'] = pd.Series(age_pred, index=x_age_test.index)\ntrain.loc[x_age_test.index.values.tolist(),'Age'] = x_age_test.Age","f9ae322d":"# OLS Estimation of Survived Probability\ntrain = train.dropna(subset = ['Age','Pclass','Sex','SibSp','Parch','Fare','Embarked'])\ntrain_dummies = pd.get_dummies(train[['Pclass','Sex','Embarked','SibSp','Parch']], drop_first=True)\ntrain = pd.concat([train, train_dummies], axis=1)\nx_train_var = list(train_dummies.columns) + ['Age', 'Fare']\nx_train = train[x_train_var]\ny_train = train.Survived\nreg = linear_model.LinearRegression()\nreg.fit(x_train, y_train)\nprob = reg.predict(x_train).tolist()\ntrain['Prob'] = prob","98715895":"# Determine optimal critcal percentage by RMSE\ntrue_sur = train.Survived.tolist()\ncrit = list(np.arange(0,1,0.01))\nrmse_result = list()\nfor i in crit:\n    pred_sur = list()\n    for j in prob:\n        if j <= i:\n            pred_sur.append(0)\n        else:\n            pred_sur.append(1)\n    rmse_result.append(mean_squared_error(true_sur, pred_sur))\n    \ncrit_result = pd.DataFrame({'Critical':crit, 'RMSE':rmse_result})\nplt.plot(crit_result.Critical, crit_result.RMSE, color='red')\nanswer = crit_result.loc[crit_result.RMSE == min(crit_result.RMSE)]\nprint(answer)","adaf2c00":"# Logit Regression\nlogreg = LogisticRegression(max_iter=10000)\nlogreg.fit(x_train, y_train)\npred = logreg.predict(x_train)\nprint('Accuracy of Logistic Regression Classifier on Train Set: ', logreg.score(x_train, y_train))\nprint('Confusion Matrix: ', confusion_matrix(y_train, pred))\ntrain['Pred_Survive'] = pred","67d472b0":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.Pclass.replace([1,2,3],['U','M','L'], inplace=True)\ntest['SibSp'] = np.where(test.SibSp <= 1, 'L', 'H')\ntest['Parch'] = np.where(test.Parch <= 2, 'L', 'H')","2de38319":"# Estimating missing Fare value\ntest_fare_est = test.loc[test.Fare.isnull() == True]\nmean = test.loc[(test.Pclass == 'L') & (test.Embarked == 'S')].Fare.mean()\ntest_fare_est['Fare'] = mean\ntest.loc[test_fare_est.index.values.tolist(), 'Fare'] = test_fare_est.Fare","2006c656":"# Estimating missing Age values\ntest_age_est = test.loc[test.Age.isnull() == True]\ntest_age_est_dummies = pd.get_dummies(test_age_est[['Pclass','Sex','Embarked','SibSp','Parch']], drop_first = True)\ntest_age_est = pd.concat([test_age_est, test_age_est_dummies], axis=1)\ntest_age_est = test_age_est[x_age_var]\ntest_age_pred = reg_age.predict(test_age_est).tolist()\ntest_age_est.loc[:,'Age'] = pd.Series(test_age_pred, index=test_age_est.index)\ntest.loc[test_age_est.index.values.tolist(), 'Age'] = test_age_est.Age","8c5027ae":"# Logistical Prediction of Test Sample\ntest_dummies = pd.get_dummies(test[['Pclass','Sex','Embarked','SibSp','Parch']], drop_first=True)\ntest = pd.concat([test, test_dummies], axis=1)\ntest_data = test[x_train_var]\ntest_pred = logreg.predict(test_data)\nfinal = pd.DataFrame({'PassengerId':test.PassengerId, 'Survived':test_pred})\nprint(final)","a33e4cc4":"# Logistical Regression","6d3e9b94":"# Estimating Age","07cf826d":"# Apply Logistic Prediction to Test Sample","4b37e07f":"# OLS Estimation of Probability of Survive"}}