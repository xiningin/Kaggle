{"cell_type":{"e4c58bcf":"code","edc3148c":"code","9f76f74c":"code","c99af5cd":"code","919c267d":"code","4aecfcc7":"code","994c26a2":"code","d3c5c2fd":"code","a4491368":"code","b6bad3ad":"code","eee29ba9":"code","6a232e3f":"code","42167646":"code","ae6fe892":"code","0bde49f6":"code","1ee3badf":"code","550091a8":"code","44ca2822":"code","67a24d35":"markdown","f760598e":"markdown","caa39278":"markdown","9ee79f5c":"markdown","2940b470":"markdown","a48b9f61":"markdown","b6ec3fbe":"markdown","e031a773":"markdown","84bf9609":"markdown","2d80fa01":"markdown","2c721918":"markdown","078739bb":"markdown","5cd50007":"markdown","bc6a3401":"markdown"},"source":{"e4c58bcf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n\nfrom sklearn.model_selection import train_test_split, TimeSeriesSplit\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.metrics import mean_squared_error as MSE\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","edc3148c":"train = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv', low_memory=False)\ntest = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv', low_memory=False)","9f76f74c":"train = train[train['Group'] == 'By Week']","c99af5cd":"train.shape","919c267d":"train.head()","4aecfcc7":"train.describe()","994c26a2":"train.isnull().sum()","d3c5c2fd":"train.drop(['Month', 'Year', 'Footnote', 'Total Deaths', 'id', 'Data As Of', 'Group', 'MMWR Week', 'HHS Region', 'End Date', 'Week-Ending Date'], inplace = True, axis = 1)\ntest.drop(['Month', 'Year', 'Total Deaths', 'id', 'Data As Of', 'Group', 'MMWR Week', 'HHS Region', 'End Date', 'Week-Ending Date'], inplace = True, axis = 1)\ntrain.isnull().sum()","a4491368":"train.dropna(inplace = True)\ntrain.isnull().sum()","b6bad3ad":"print(train.dtypes)\nprint(\"\\nverifying conversion to datetime\\n\")\ntrain['Start Date'] = pd.to_datetime(train['Start Date'])\nprint(train.dtypes)","eee29ba9":"print(train['Age Group'].value_counts())\nprint()\nprint(train['Race and Hispanic Origin Group'].value_counts())\nprint()","6a232e3f":"# graph deaths based on race\nraceDeaths = train.groupby('Race and Hispanic Origin Group', as_index = False)['COVID-19 Deaths'].sum()\nfig_dims = (6, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.barplot(y ='Race and Hispanic Origin Group' , x = 'COVID-19 Deaths', ax=ax, data=raceDeaths)\n\n# graph deaths based on age group\nageDeaths = train.groupby('Age Group', as_index = False)['COVID-19 Deaths'].sum()\nfig_dims = (6, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.barplot(y ='Age Group' , x = 'COVID-19 Deaths', ax=ax, data=ageDeaths)","42167646":"print(train['Start Date'].value_counts())\nweeklyDeaths = train.groupby('Start Date', as_index = False)['COVID-19 Deaths'].sum()\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.lineplot(data = weeklyDeaths, x = 'Start Date', y = 'COVID-19 Deaths', ax = ax)","ae6fe892":"dummies = pd.get_dummies(train[['Race and Hispanic Origin Group', 'Age Group']], drop_first = True)\ntrain = pd.concat([train, dummies], axis=1)\ntrain.drop(['Race and Hispanic Origin Group', 'Age Group'], inplace = True, axis = 1)\n\n# prepare for TimeSeriesSplit\ntrain.sort_values('Start Date')\ntrain.drop(['Start Date'], inplace = True, axis = 1)","0bde49f6":"X = train.drop('COVID-19 Deaths', axis = 1)\ny = train['COVID-19 Deaths']\n\nmodels = [LinearRegression(), Ridge(), Lasso(), ElasticNet()]\ncv = TimeSeriesSplit(n_splits = 100)","1ee3badf":"RMSEs = []\nscores = []\n\nfor model in models:\n    print(model)\n    print(\"=============================\")\n    for train_index, test_index in cv.split(X):\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        RMSEs.append(MSE(y_test, y_pred, squared = False))\n        scores.append(model.score(X_test, y_test))\n    \n    print(\"average score: \" + str(np.mean(scores)))\n    print(\"average RMSE: \" + str(np.mean(RMSEs)))\n    print(\"cross val score: \" + str(np.mean(cross_val_score(model, X, y, cv = 5))))\n    RMSEs.clear()\n    scores.clear()\n    print()\n\n","550091a8":"# turn race and age groups into booleans\ntest.sort_values('Start Date')\ntest.drop(['Start Date'], inplace = True, axis = 1)\n\ndummies = pd.get_dummies(test[['Race and Hispanic Origin Group', 'Age Group']], drop_first = True)\ntest = pd.concat([test, dummies], axis=1)\ntest.drop(['Race and Hispanic Origin Group', 'Age Group'], inplace = True, axis = 1)\n\nLN = LinearRegression()\nX_train = train.drop('COVID-19 Deaths', axis = 1)\ny_train = train['COVID-19 Deaths']\n\n\n\nX_test = test\n\nLN.fit(X_train, y_train)\ny_pred = LN.predict(X_test)\n\n","44ca2822":"sample = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/sample_submission.csv')\nids = sample.id\n\nsubmission = pd.DataFrame({'id': ids, 'COVID-19 Deaths': y_pred})\nsubmission.to_csv('submission.csv', index = False)","67a24d35":"# Build and Evaluate Models","f760598e":"# Preprocessing\nThe race group must be turned into a dummies in order to be processed.","caa39278":"### Removing repeated data\nData that is grouped by month or year are summaries of the data that is grouped by weeks","9ee79f5c":"# Import necessary modules","2940b470":"# Exploratory Data Analysis","a48b9f61":"## All weekly data is null for their month column\nSince all non-weekly rows have been dropped, the month and year columns can be dropped as well. This gets rid of many null values. \nThe columns which have absolutely no effect on the covid-19 deaths, Total Deaths and Footnote, can also be dropped.\n\nThe test file only uses 'United States' for HHS Region, and since all HHS regions are within the United States, the column as a whole is not relevant for making predictions","b6ec3fbe":"Kaggle Username: tahsinislam","e031a773":"## There seems to be even splits within the age groups, race groups, and also HHS Regions of the people from the data, which helps avoid bias.","84bf9609":"## Get best prediction","2d80fa01":"## The data above tells us the groups that are more likely to die from covid\nNow, we need to account for the time period. Due to the nature of a virus, it makes sense that there are less deaths early on and more deaths later down the line.","2c721918":"The rows with null covid-19 deaths may cause problems with the machine learning algorithm. Replacing the null values with the average covid-19 deaths may skew the data, so its best to just remove the rows","078739bb":"# Output to a submission file","5cd50007":"# Load Data","bc6a3401":"All RMSEs are good and pretty similar, but it looks like ElasticNet() is overfitting. I'll go with LinearRegression() because it is least likely to overfit."}}