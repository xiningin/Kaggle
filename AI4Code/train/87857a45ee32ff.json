{"cell_type":{"cd5f5535":"code","8ababcde":"code","b1d12b30":"code","f6b2b724":"code","6db97cd2":"code","611315f1":"code","014df3ad":"code","80a710cc":"code","37ddc237":"code","f52b3307":"code","f6b169c7":"code","ef8f23f7":"code","1b4b74f2":"code","723dccc8":"code","aaccdda4":"code","e1f1f942":"code","9d8d0992":"code","efec23d2":"code","20b06f9f":"code","a2b299ab":"code","60dfdd25":"code","7d41a71a":"code","b9d3bb07":"code","9bccdbcd":"code","1586ad6c":"code","33026c2b":"code","1345a8e0":"code","175e3568":"markdown","6d329428":"markdown"},"source":{"cd5f5535":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ababcde":"data = pd.read_csv('\/kaggle\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv')","b1d12b30":"data.head()","f6b2b724":"data.columns","6db97cd2":"num_data = data.select_dtypes(include=['float64','int64'])","611315f1":"num_data.head()","014df3ad":"rev = num_data['price'] * num_data['units_sold']","80a710cc":"num_data['rev'] = rev","37ddc237":"num_data.describe()","f52b3307":"%matplotlib inline\nimport matplotlib.pyplot as plt\nnum_data.hist(bins=50, figsize=(20,15))\nplt.show()","f6b169c7":"from pandas.plotting import scatter_matrix\n\nattributes = [\"rev\", \"units_sold\", \"rating\",\n              \"rating_count\"]\nscatter_matrix(num_data[attributes], figsize=(12, 8))","ef8f23f7":"# will make it a classification problem because there is not a lot of data,\n# the buckets are in the output\nimport numpy as np\nX = num_data.drop(['units_sold','rev'],axis=1)\ny = pd.qcut(num_data['rev'], 5, labels=False)\nnp.unique(pd.qcut(num_data['rev'], 5).values)","1b4b74f2":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\n\n\nnum_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy=\"median\")),\n        ('std_scaler', StandardScaler()),\n    ])\n\nX = num_pipeline.fit_transform(X)","723dccc8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","aaccdda4":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\nlog_clf = LogisticRegression(solver=\"lbfgs\", random_state=42)\nrnd_clf = RandomForestClassifier(n_estimators=100, random_state=42)\nsvm_clf = SVC(gamma=\"scale\", random_state=42)\n\nvoting_clf = VotingClassifier(\n    estimators=[('lr', log_clf), ('rf', rnd_clf), ('svc', svm_clf)],\n    voting='hard')","e1f1f942":"voting_clf.fit(X_train, y_train)\n","9d8d0992":"\nfrom sklearn.metrics import accuracy_score\n\nfor clf in (log_clf, rnd_clf, svm_clf, voting_clf):\n    clf.fit(X_train[:1150], y_train[:1150])\n    y_pred = clf.predict(X_train[1150:])\n    print(clf.__class__.__name__, accuracy_score(y_train[1150:], y_pred))","efec23d2":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint","20b06f9f":"params = {'max_leaf_nodes': list(range(80, 200)),'n_estimators':list(range(20, 200)),\n          'max_features': randint(low=10, high=23),}\nrnd_search = RandomizedSearchCV(RandomForestClassifier(random_state=42), params,\n                                    verbose=1, cv=3,n_iter=10,scoring='accuracy')\n\nrnd_search.fit(X_train, y_train)","a2b299ab":"\ncvres = rnd_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(mean_score, params)","60dfdd25":"model = rnd_search.best_estimator_","7d41a71a":" for i,j in zip(num_data.drop(['units_sold','rev'],axis=1).columns.values,model.feature_importances_):\n        print(i,j)","b9d3bb07":"pred = model.predict(X_test)","9bccdbcd":"accuracy_score(pred,y_test)","1586ad6c":"pred.shape","33026c2b":"len(model.predict(X_test))","1345a8e0":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test.values, pred)","175e3568":"random forest has the best results so i will use random search CV to find better peramiters","6d329428":"## Summary: Try and predict the revenue generated from a new product based on multiple peramiters (units_sold, rating, retail_price,...)"}}