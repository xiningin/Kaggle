{"cell_type":{"c7747b58":"code","0b54adaf":"code","71ee95a2":"code","5116dcc1":"code","6b806c8e":"code","f51b7d7b":"code","d218cd49":"code","b862723c":"code","e941a9a9":"code","6dd40cba":"code","709ee4ef":"code","edc83e8d":"code","3eea344f":"code","f7cb9301":"code","db4aaa63":"code","b1ee55dd":"code","9d71a372":"code","1a7b90c6":"markdown","78bc3189":"markdown","4905ef59":"markdown","d4eaf621":"markdown"},"source":{"c7747b58":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\n%matplotlib inline","0b54adaf":"df=pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')","71ee95a2":"df.head()","5116dcc1":"df.info()","6b806c8e":"df.shape","f51b7d7b":"pd.DataFrame(list(df.isnull().any()),index=list(df.columns))","d218cd49":"sns.heatmap(df.corr(), annot=True)","b862723c":"x=df.drop(['Y house price of unit area','No'], axis=1)\n\ny=df['Y house price of unit area']","e941a9a9":"# Train List of RMSE per degree\ntrain_RMSE_list=[]\n#Test List of RMSE per degree\ntest_RMSE_list=[]\n\nfor d in range(1,10):\n    \n    #Preprocessing\n    #create poly data set for degree (d)\n    polynomial_converter= PolynomialFeatures(degree=d)\n    poly_features= polynomial_converter.fit(x)\n    poly_features= polynomial_converter.transform(x)\n    \n    #Split the dataset\n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n    \n    #Train the Model\n    polymodel=LinearRegression()\n    polymodel.fit(X_train, y_train)\n    \n    #Predicting on both Train & Test Data\n    y_train_pred=polymodel.predict(X_train)\n    y_test_pred=polymodel.predict(X_test)\n    \n    #RMSE of Train set\n    train_RMSE=np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n    \n    #RMSE of Test Set\n    test_RMSE=np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    \n    #Append the RMSE to the Train and Test List\n    train_RMSE_list.append(train_RMSE)\n    test_RMSE_list.append(test_RMSE)","6dd40cba":"display(pd.DataFrame({'degree': list(range(1, 10)),'train_RMSE': train_RMSE_list,'test_RMSE':test_RMSE_list}).set_index('degree'))\n\nfig = plt.figure(figsize=(10,5))\nplt.plot(range(1,5), train_RMSE_list[:4], label='Train RMSE')\nplt.plot(range(1,5), test_RMSE_list[:4], label='Test RMSE')\n\nplt.xlabel('Polynomial Degree')\nplt.ylabel('RMSE')\nplt.legend()\nplt.show()","709ee4ef":"polynomial_converter= PolynomialFeatures(degree=2)\npoly_features= polynomial_converter.fit(x)\npoly_features= polynomial_converter.transform(x)","edc83e8d":"X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n","3eea344f":"polymodel=LinearRegression()\npolymodel.fit(X_train, y_train)","f7cb9301":"y_train_pred=polymodel.predict(X_train)\ny_test_pred=polymodel.predict(X_test)","db4aaa63":"test_residuals = y_test - y_test_pred","b1ee55dd":"sns.scatterplot(x=y_test, y=test_residuals)\nplt.axhline(y=0, color='r', ls='--')","9d71a372":"sns.kdeplot(test_residuals)","1a7b90c6":"## Train the Model\n","78bc3189":"## Predicting on both Train & Test Data\n","4905ef59":"## create poly data set for degree 2","d4eaf621":"## Split the dataset\n\n"}}