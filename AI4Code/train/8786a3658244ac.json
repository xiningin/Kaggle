{"cell_type":{"4509c9c5":"code","7b84139e":"code","b22d4092":"code","964772cd":"code","3abe7899":"code","7f6e7965":"code","2679149b":"code","80f2260c":"code","353c3442":"code","35d8091a":"code","f006abd9":"code","85abb5c1":"code","c0cce58a":"code","3ba01eeb":"code","10f0fc76":"code","52b7dd3d":"markdown","df0edc29":"markdown","8bcf7aeb":"markdown","468fe9a2":"markdown","dc2476ed":"markdown","a7d07378":"markdown","3ad64100":"markdown","d71af335":"markdown","ee7a7099":"markdown"},"source":{"4509c9c5":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg   \nimport pandas as pd\nimport pickle\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","7b84139e":"# Load the training data into a DataFrame named 'train' and Print the shape of the resulting DataFrame. \ntrain = pd.read_csv('..\/input\/cifar10-mu\/train.csv', dtype = 'str')\nprint('Training Set shape:', train.shape)","b22d4092":"# Display the head of the train DataFrame. \ntrain.head()","964772cd":"# Display a DataFrame showing the proportion of observations with each \n(train.label.value_counts() \/ len(train)).to_frame()","3abe7899":"# Sample 16 images from the training set and display these along with their labels, 4x4 grid of subplots and figure sizeto (6,6)\nsample = train.sample(n=16).reset_index()\n\nplt.figure(figsize=(8,8))\n\nfor i, row in sample.iterrows():\n\n    img = mpimg.imread(f'..\/input\/cifar10-mu\/train_images\/{train[\"filename\"][i]}')    \n    label = row.label\n\n    plt.subplot(4,4,i+1)\n    plt.imshow(img)\n    plt.text(0, -5, f'Class {label}', color='k')\n        \n    plt.axis('off')\n\nplt.tight_layout()\nplt.show()","7f6e7965":"# Split the dataframe,20% of the data for the validation set, Use stratified and set a random seed for the split. \ntrain_df, valid_df = train_test_split(train, test_size=0.2, random_state=1, stratify=train.label)\nprint(train_df.shape)\nprint(valid_df.shape)","2679149b":"# Create image data generators for both the training set and the validation set. \n# Use the data generators to scale the pixel values by a factor of 1\/255. \ntrain_datagen = ImageDataGenerator(rescale=1\/255)\nvalid_datagen = ImageDataGenerator(rescale=1\/255)","80f2260c":"# Complete the code for the data loaders below. \n\nBATCH_SIZE = 64\n\ntrain_loader = train_datagen.flow_from_dataframe(\n    dataframe = train_df,\n    directory = '..\/input\/cifar10-mu\/train_images\/',\n    x_col = 'filename',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (32,32)\n)\n\nvalid_loader = train_datagen.flow_from_dataframe(\n    dataframe = valid_df,\n    directory = '..\/input\/cifar10-mu\/train_images\/',\n    x_col = 'filename',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (32,32)\n)","353c3442":"# Run this cell to determine the number of training and validation batches. \n\nTR_STEPS = len(train_loader)\nVA_STEPS = len(valid_loader)\n\nprint(TR_STEPS)\nprint(VA_STEPS)","35d8091a":"# Use this cell to construct a convolutional neural network model, your model should make use of each of the following layer types:\n#    Conv2D, MaxPooling2D, Dropout, BatchNormalization, Flatten, Dense\nnp.random.seed(1)\ntf.random.set_seed(1)\n\ncnn = Sequential([\n    Conv2D(32, (3,3), activation = 'relu', padding = 'same', input_shape=(32,32,3)),\n    Conv2D(32, (3,3), activation = 'relu', padding = 'same'),\n    MaxPooling2D(2,2),\n    Dropout(0.2),\n    BatchNormalization(),\n\n    Conv2D(64, (3,3), activation = 'relu', padding = 'same'),\n    Conv2D(64, (3,3), activation = 'relu', padding = 'same'),\n    MaxPooling2D(2,2),\n    Dropout(0.5),\n    BatchNormalization(),\n    \n    Conv2D(128, (3,3), activation = 'relu', padding = 'same'),\n    Conv2D(128, (3,3), activation = 'relu', padding = 'same'),\n    MaxPooling2D(2,2),\n    Dropout(0.5),\n    BatchNormalization(),\n\n    Flatten(),\n    \n    Dense(32, activation='relu'),\n    Dropout(0.5),\n    Dense(16, activation='relu'),\n    Dropout(0.2),\n    BatchNormalization(),\n    Dense(10, activation='softmax')\n])\n\ncnn.summary()","f006abd9":"# Define an optimizer and select a learning rate, then compile the model. \nopt = tf.keras.optimizers.Adam(0.002)\ncnn.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])","85abb5c1":"# Complete one or more training runs and display training curves after each run. \n# %%time\n\nh1 = cnn.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 100,\n    validation_data = valid_loader,\n    validation_steps = VA_STEPS,\n    verbose = 1\n)","c0cce58a":"history = h1.history\nprint(history.keys())","3ba01eeb":"epoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\nplt.tight_layout()\nplt.show()","10f0fc76":"# When you are satisfied with the model you have found, save the model and the combined history dictionary to files.\ncnn.save('CIFAR10_model.h5')\npickle.dump(history, open(f'CIFAR_history_v01.pkl', 'wb'))","52b7dd3d":"# Load Training DataFrame","df0edc29":"# View Sample of Images","8bcf7aeb":"# Data Generators","468fe9a2":"# Label Distribution","dc2476ed":"# CIFAR 10 Image Classification\n\nMost of the code cells below include comments explaining the task to be performed in those cells. Please delete the comments and add code to perform those tasks. There are a few code cells in which code has already been provided for you. In some cases, you will need to complete this code.\n\n\u26a0 **NOTE:** You should make use of GPU acceleration in this notebook. \n\n","a7d07378":"# Save Model and History","3ad64100":"# Build Network","d71af335":"# Import Packages","ee7a7099":"# Train Network"}}