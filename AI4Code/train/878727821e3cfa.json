{"cell_type":{"0aa4edaa":"code","8f79a8b5":"code","90d37999":"code","f7a274bf":"code","6eba5b6f":"code","735d04ca":"code","d32688c4":"code","f5130f9e":"code","0ea77db0":"code","bf27d79a":"code","4b26fed8":"code","e886ad1c":"code","df829775":"code","9c4c4c51":"markdown"},"source":{"0aa4edaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f79a8b5":"import cv2\nimport numpy as np \nfrom matplotlib import pyplot as plt","90d37999":"r = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nr1 = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nr = r.sum(axis=-1)","f7a274bf":"def blur(r) :\n    for i in range(1,r.shape[0]-1):\n        for j in range(1,r.shape[1]-1):\n            r[i,j] = (15*r[i,j] + r[i-1,j] + r[i+1,j] + r[i,j-1] + r[i,j+1])\/5.0\n    return r","6eba5b6f":"%timeit blur(r)","735d04ca":"plt.figure(figsize=(8,7))\nplt.imshow(r1, cmap=\"gray\")\nplt.title('Original'),plt.xticks([]), plt.yticks([])\nblur(r)\nblur(r)\nblur(r)\nplt.figure(figsize=(8,7))\nplt.imshow(r, cmap=\"gray\")\nplt.title('has Blured'), plt.xticks([]), plt.yticks([])","d32688c4":"img = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)","f5130f9e":"edge_Canny = cv2.Canny(img_gray,100,200)","0ea77db0":"sobel_x = cv2.Sobel(img_gray,cv2.CV_64F,1,0,ksize=5)\nsobel_y = cv2.Sobel(img_gray,cv2.CV_64F,0,1,ksize=5)","bf27d79a":"def filter2d(src, kernel):\n    m, n = kernel.shape\n\n    q = int((m-1)\/2)\n    r, s = src.shape[0], src.shape[1]\n\n    fit = np.zeros((r, s))\n\n    for y in range(q, r - q):\n        for x in range(q, s - q):\n           \n            fit[y][x] = np.sum(src[y-q:y+q+1, x-q:x+q+1]*kernel)\n\n    return fit\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nkernel = np.array([[1, 1,  1],\n                   [1, -8, 1],\n                   [1, 1,  1]])\n\nfit = filter2d(gray, kernel)","4b26fed8":"plt.figure(figsize=(8,7))\nplt.subplot(2,2,1),plt.imshow(edge_Canny,cmap = 'gray')\nplt.title('Canny Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,7))\nplt.subplot(2,2,2),plt.imshow(sobel_x,cmap = 'gray')\nplt.title('Sobel X Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,7))\nplt.subplot(2,2,3),plt.imshow(sobel_y,cmap = 'gray')\nplt.title('Sobel Y Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,7))\nplt.subplot(2,2,4),plt.imshow(fit,cmap = 'gray')\nplt.title('Laplacian Image'), plt.xticks([]), plt.yticks([])\n\nplt.show()","e886ad1c":"import cv2\nimport numpy as np \n\nimage = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\n\nkernel_sharpening = np.array([[-1,-1,-1],\n                              [-1, 9,-1],\n                              [-1,-1,-1]])\n\nsharped = cv2.filter2D(image,-1,kernel_sharpening)","df829775":"plt.figure(figsize=(7,8))\nplt.imshow(image)\nplt.title('Original'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,8))\nplt.imshow(sharped)\nplt.title('This Is Sharpened'), plt.xticks([]),plt.yticks([])","9c4c4c51":"Sharped"}}