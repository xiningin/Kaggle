{"cell_type":{"ff86a0b7":"code","000e575c":"code","fbd476e4":"code","ef0c7208":"code","ca7e0a95":"code","265bb6e8":"code","375c21e7":"code","0e3ddd3a":"code","d3474c34":"code","24f1ebc8":"code","9f494693":"code","ee599827":"code","ce4d0462":"code","1807245b":"code","005282cc":"code","d9f00be7":"code","a798e692":"code","8de13c05":"code","0f731a7e":"code","4535c4f6":"code","a877f7e7":"code","755766ad":"code","6b5ec06d":"code","d1d36ac3":"code","f7dd9498":"code","c390da5b":"code","cddb2c57":"code","a83e5fbd":"code","8afa6f4d":"code","f5001747":"code","279564a5":"code","15993378":"code","6661a1ad":"code","fbf67d04":"code","f43947a0":"code","2b9c3b5f":"code","96c08ce7":"code","d8fcbe40":"code","aa6504a9":"code","4d6a75ce":"code","3f4bf433":"code","a821bd59":"markdown","5a65bfa6":"markdown","08ae17cd":"markdown","9d1bb805":"markdown","79a4af76":"markdown","8a74b6f2":"markdown","e1c38c9c":"markdown","038f2895":"markdown","63bd7469":"markdown","bf7869b3":"markdown"},"source":{"ff86a0b7":"# IMPORT \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","000e575c":"#! head -n 3 ..\/input\/exercise_02_train.csv","fbd476e4":"insu = pd.read_csv('..\/input\/exercise_02_train.csv')","ef0c7208":"insu.head(2).T","ca7e0a95":"insu.y.value_counts().plot(kind='bar')","265bb6e8":"insu.info(verbose=True, max_cols=101)","375c21e7":"insu.head(1).T","0e3ddd3a":"# CATEGORICAL COLUMNS\ninsu.loc[:,insu.dtypes==object].head()","d3474c34":"# Remove the $ symbol\ninsu['x41'] = insu['x41'].str.replace('$','').astype(float)","24f1ebc8":"#Remove the % symbol\ninsu['x45'] = insu['x45'].str.replace('%','').astype(float)","9f494693":"insu.loc[:,insu.dtypes==object].head()","ee599827":"insu['x34'].value_counts().plot(kind='barh')","ce4d0462":"# Make all brand names lowercase\ninsu['x34'] = insu['x34'].str.lower()","1807245b":"insu['x35'].value_counts().plot(kind='barh')","005282cc":"s1 = insu['x35']","d9f00be7":"# Standardize the day names\ninsu['x35'] = s1.replace({'monday':'mon', 'tuesday':'tue', 'wednesday':'wed',\n        'thurday':'thu', 'thur':'thu','friday':'fri'})","a798e692":"insu['x35'].value_counts().plot(kind='barh')","8de13c05":"insu.loc[:,insu.dtypes==object].head()","0f731a7e":"insu['x68'].value_counts().sort_values().plot(kind='barh')","4535c4f6":"insu['x68'] = insu['x68'].str.lower()","a877f7e7":"#Standardize the month names\ninsu['x68'] = insu['x68'].replace({'january':'jan', 'dev':'dec', 'sept.':'sep',\n        'july':'jul'})","755766ad":"insu['x93'].value_counts().sort_values().plot(kind='barh')","6b5ec06d":"insu.loc[:,insu.dtypes==object].head()","d1d36ac3":"# Look at missing rows\ninsu[insu.isnull().any(axis=1)].shape","f7dd9498":"#Drop rows with missing data\ninsu.dropna(how='any', inplace=True)","c390da5b":"# Look at missing rows AGAIN\ninsu[insu.isnull().any(axis=1)].shape","cddb2c57":"insu.x0.plot(kind='hist')","a83e5fbd":"\ncols = insu.columns\ninsu.boxplot(column=['x0', 'x1', 'x2'])","8afa6f4d":"target = insu.y\ninsu.drop('y', axis=1, inplace=True)","f5001747":"insu2 = pd.get_dummies(insu, columns=['x34', 'x35', 'x68', 'x93'])","279564a5":"insu2.head()","15993378":"X = insu2.values\ny = target.values","6661a1ad":"corr = np.corrcoef(X.T,y)","fbf67d04":"sns.heatmap(data = corr,vmin=0, vmax=1)","f43947a0":"# Split the data for train and dev\/test purpose \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, y,test_size=0.20, \n                                                    random_state=10)","2b9c3b5f":"#Normalizer or Standardized\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nXn_train = scaler.transform(X_train)\nXn_test = scaler.transform(X_test)","96c08ce7":"from sklearn.linear_model import LogisticRegressionCV","d8fcbe40":"lrm = LogisticRegressionCV(tol=0.0001)\nlrm.fit(Xn_train, Y_train)","aa6504a9":"print(\"Test Accuracy: \", 100*lrm.score(Xn_test, Y_test))","4d6a75ce":"from sklearn.metrics import classification_report\nprint (\"CLASSIFICATION REPORT:\\n\")\nprint (classification_report(Y_test, lrm.predict(Xn_test)))","3f4bf433":"from sklearn.ensemble import AdaBoostClassifier\nabc = AdaBoostClassifier(base_estimator=LogisticRegressionCV())\nabc.fit(Xn_train, Y_train)\nprint(\"Test Accuracy: \\n\", 100*abc.score(Xn_test, Y_test))\nprint( \"CLASSIFICATION REPORT:\\n\")\nprint (classification_report(Y_test,abc.predict(Xn_test)))","a821bd59":"#### Adaboost an ensemble of Logistic Regression Classifiers","5a65bfa6":"#### Logistic Regression","08ae17cd":"### Handling Columns of type object\n***\n- Cleaning\n- Standardizing Names\n- Value count bar-plots","9d1bb805":"#### Prepare data for modeling","79a4af76":"### Missing data","8a74b6f2":"### Insurance Data Exploration\n***\n.","e1c38c9c":"**Work in progress....**","038f2895":"### Encode categorical columns using get_dummies","63bd7469":"### Handle Outliers\n*** \nWe will return on this in next class","bf7869b3":"#### Object-type Columns are\n- x34: Brand\n- x35: Day\n- x41: Money amount\n- x45: Some %-age\n- x68: Month\n- x93: Country\n***\nWe need to clean some columns."}}