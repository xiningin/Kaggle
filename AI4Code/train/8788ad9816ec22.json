{"cell_type":{"cfb8cbd4":"code","34381046":"code","862aaeff":"code","b762e4aa":"code","da4bbdb7":"code","c60cb3d6":"code","b9977b19":"code","2762e842":"code","ba519698":"code","242a1baf":"code","99dc3e87":"code","c9534427":"code","533b5147":"code","d95bc04f":"code","928a07e1":"code","851f04dd":"code","42084cf5":"code","581658e5":"code","0e9cbaf3":"code","dc7351c4":"code","1fd44a77":"code","dfeb0c99":"code","8ada88b5":"code","9a2492de":"code","4ec37216":"code","43811780":"markdown","4419feb9":"markdown","328768a8":"markdown","c8c07c7b":"markdown","27743cea":"markdown","cd7be1d0":"markdown","60dabcbc":"markdown","51a0f7a7":"markdown"},"source":{"cfb8cbd4":"# Basic setup stuff\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        display(os.path.join(dirname, filename))\n\nplt.rcParams['figure.figsize'] = (12.0, 8.0)  # default figure size\nsns.set_context(\"notebook\")\nsns.set()","34381046":"matches = pd.read_csv(\"\/kaggle\/input\/age-of-empires-ii-de-match-data\/matches.csv\")\ndisplay(matches.info())\nmatches.head()","862aaeff":"players = pd.read_csv(\"\/kaggle\/input\/age-of-empires-ii-de-match-data\/match_players.csv\")\ndisplay(players.info())\nplayers.head()","b762e4aa":"# What's the most popular color?\ncolors = players[~players[\"color\"].isna()]\npercent_colors = colors.groupby(\"color\")[\"token\"].count().reset_index().rename(columns={\"token\": \"counts\"})\npercent_colors[\"percent\"] = percent_colors[\"counts\"] \/ len(colors)\nplt.pie(percent_colors[\"percent\"],labels=percent_colors[\"color\"], colors=percent_colors[\"color\"], autopct='%1.1f%%')\nplt.title(\"Most Popular Player Colors\")\nplt.show()","da4bbdb7":"# What's the most popular server?\nservers = matches[~matches[\"server\"].isna()]\npercent_servers = servers.groupby(\"server\")[\"token\"].count().reset_index().rename(columns={\"token\": \"counts\"})\npercent_servers[\"percent\"] = percent_servers[\"counts\"] \/ len(servers)\nplt.pie(percent_servers[\"percent\"],labels=percent_servers[\"server\"], autopct='%1.1f%%')\nplt.title(\"Most Popular Servers\")\nplt.show()","c60cb3d6":"# What patches are included in the data?\nmatches[\"patch\"].unique()","b9977b19":"# As someone might note, 37650 was hotfixed by 37906! Let's replace 37650 with 37906 so they're together.\ntidy_matches = matches.copy()\ntidy_matches[\"patch\"] = tidy_matches[\"patch\"].replace(37650, 37906)\n\npatches = [35584, 36202, 36906, 37906]\nlatest_patch = patches[-1]\n\n# Looking at the .info() output there are some matches that don't have an average_rating\ntidy_matches = tidy_matches.dropna(subset=[\"average_rating\"])\n\n# Let's convert duration to datetime objects\ntidy_matches[\"duration\"] = pd.to_timedelta(tidy_matches[\"duration\"])\ntidy_matches[\"duration_s\"] = tidy_matches[\"duration\"].dt.total_seconds()\n\n# Great, now let's do some plots!\nfig, axs = plt.subplots(1, 3, figsize=(30, 5))\nsns.boxplot(data=tidy_matches, x=\"patch\", y=\"duration_s\", hue=\"ladder\", order=patches, ax=axs[0])\nsns.countplot(data=tidy_matches, x=\"patch\", hue=\"ladder\", order=patches, ax=axs[1])\nsns.distplot(tidy_matches[\"average_rating\"], ax=axs[2])\nplt.show()","2762e842":"# It looks like we have a few outliers in match duration, let's filter to matches less than 2 hours\ntidy_matches = tidy_matches[(tidy_matches[\"duration_s\"] > 60 * 5) & (tidy_matches[\"duration_s\"] < 60 * 60 * 2)]\nsns.catplot(kind=\"box\", data=tidy_matches[tidy_matches[\"duration_s\"] < 7200], x=\"patch\", y=\"duration_s\", hue=\"ladder\", order=patches)\nplt.show()","ba519698":"# Better! We can live with those longer matches in the dataset\n# Final data cleanup, converting some columns to category variables and verifying all of our civs and maps look valid\ntidy_matches[\"map\"] = tidy_matches[\"map\"].astype(\"category\")\ntidy_matches[\"map_size\"] = tidy_matches[\"map_size\"].astype(\"category\")\ntidy_matches[\"ladder\"] = tidy_matches[\"ladder\"].astype(\"category\")\ntidy_matches[\"patch\"] = tidy_matches[\"patch\"].astype(\"category\")\ntidy_matches[\"server\"] = tidy_matches[\"server\"].astype(\"category\")\nplayers[\"civ\"] = players[\"civ\"].astype(\"category\")\ndisplay(sorted(tidy_matches[\"map\"].unique()))\nsorted(players[\"civ\"].unique())","242a1baf":"# Last but not least we'll join the tidy_matches with the player data\njoined_df = pd.merge(players, tidy_matches, left_on=\"match\", right_on=\"token\", suffixes=[\"_player\", \"_match\"])\njoined_df.head()","99dc3e87":"# Let's first explore which civs are played most often!\nordered_civs = sorted(joined_df[\"civ\"].unique())\n\ng = sns.catplot(x=\"civ\", data=joined_df, col=\"ladder\", kind=\"count\", order=ordered_civs)\ng.set_xticklabels(rotation=90)\nplt.show()","c9534427":"# That's great! Let's convert to relative percentages instead of raw counts\njoined_1v1 = joined_df[joined_df[\"ladder\"] == \"RM_1v1\"]\njoined_team = joined_df[joined_df[\"ladder\"] == \"RM_TEAM\"]\n\ndef get_play_rates(df):\n    counts = df.groupby(\"civ\")[\"token_player\"].count().reset_index()\n    counts[\"play_rate\"] = counts[\"token_player\"] \/ len(df)\n    return counts.sort_values(\"play_rate\", ascending=False)\n\nplay_rate_1v1, play_rate_team = get_play_rates(joined_1v1), get_play_rates(joined_team)","533b5147":"from matplotlib.ticker import PercentFormatter\n\n\n# Thought it might be cool to annotate with the actual percents, but the graph gets super cluttered...\n# def autolabel(rects, ax):\n#     for rect in rects:\n#         height = rect.get_height()\n#         ax.annotate('{}%'.format(round(height * 100, 1)),\n#                     xy=(rect.get_x() + rect.get_width() \/ 2, height \/ 2),\n#                     xytext=(0, 3),  # 3 points vertical offset\n#                     textcoords=\"offset points\",\n#                     ha='center', va='bottom', rotation=90, fontsize='x-small')\n\nfig, [ax1, ax2] = plt.subplots(ncols=2, sharey=True)\nrects = ax1.bar(play_rate_1v1[\"civ\"], play_rate_1v1[\"play_rate\"])\nax1.set_xticklabels(play_rate_1v1[\"civ\"], rotation=90)\nax1.yaxis.set_major_formatter(PercentFormatter(1))\nax1.set_title(\"RM_1v1\")\nax1.set_ylabel(\"Play rate (%)\")\nax1.set_xlabel(\"Civ\")\n# autolabel(rects, ax1)\n\nrects = ax2.bar(play_rate_team[\"civ\"], play_rate_team[\"play_rate\"])\nax2.set_xticklabels(play_rate_team[\"civ\"], rotation=90)\nax2.set_title(\"RM_TEAM\")\nax2.set_xlabel(\"Civ\")\nfig.tight_layout()\n\nfig.suptitle(\"Civ Play Rates by Ladder\", y=1.02)\nplt.show()","d95bc04f":"# Looks like Franks, Mongols, and Britons are the most popular civs! Now, which civs actually win the most games?\ndef get_win_rates(df):\n    return (\n        df.groupby(\"civ\")[\"winner\"]\n            .mean()\n            .reset_index()\n            .rename(columns={\"winner\": \"win_rate\"})\n            .sort_values(\"win_rate\", ascending=False)\n    )\n\nwin_rate_1v1, win_rate_team = get_win_rates(joined_1v1), get_win_rates(joined_team)","928a07e1":"fig, [ax1, ax2] = plt.subplots(ncols=2, sharey=True)\nrects = ax1.bar(win_rate_1v1[\"civ\"], win_rate_1v1[\"win_rate\"])\nax1.set_xticklabels(win_rate_1v1[\"civ\"], rotation=90)\nax1.yaxis.set_major_formatter(PercentFormatter(1))\nax1.set_title(\"RM_1v1\")\nax1.set_ylabel(\"Win rate (%)\")\nax1.set_xlabel(\"Civ\")\nax1.set_ylim(0.4, 0.55)\n\nrects = ax2.bar(win_rate_team[\"civ\"], win_rate_team[\"win_rate\"])\nax2.set_xticklabels(win_rate_team[\"civ\"], rotation=90)\nax2.set_title(\"RM_TEAM\")\nax2.set_xlabel(\"Civ\")\nfig.tight_layout()\n\nfig.suptitle(\"Civ Win Rates by Ladder\", y=1.02)\nplt.show()","851f04dd":"# Awesome! The Goths are really good?! But this is across all the data! How do the win rates vary by patch?\n# From here on out I will only be looking at 1v1 games\nax = sns.pointplot(data=joined_1v1[joined_1v1[\"civ\"] == \"Goths\"], x=\"patch\", order=patches, y=\"winner\")\nax.yaxis.set_major_formatter(PercentFormatter(1))\nax.set_xlabel(\"Patch\")\nax.set_ylabel(\"Win rate (%)\")\nplt.title(\"Goth Win Rate by Patch (RM_1v1)\")\nplt.show()","42084cf5":"# The goths used to be even better! Looks like they were nerfed in patch 36202... \n# Checks out! https:\/\/www.ageofempires.com\/news\/aoe2de-update-36202\/ Looks like their unique bonus was nerfed.\n# Let's look at the latest patch and determine our 95% confidence interval in the Goth's win rate. Seaborn is nice\n# and provides it on the graph, but let's calculate it ourselves to see the actual values\ngoths_latest = joined_1v1[(joined_1v1[\"civ\"] == \"Goths\") & (joined_1v1[\"patch\"] == latest_patch)]\ndef bootstrap(df, n=10000, p=1000):\n    means = pd.DataFrame([df.sample(n=n, replace=True)[\"winner\"].mean() for _ in range(p)])\n    return means.quantile(0.025)[0] * 100, means.quantile(0.975)[0] * 100\nbottom, top = bootstrap(goths_latest)\nwin_rate_avg = goths_latest[\"winner\"].mean() * 100\nprint(f\"Goths have an average win rate of {win_rate_avg:.2f}% with a 95% confidence interval between {bottom:.2f}% and {top:.2f}%\")","581658e5":"# Ok, but what about other civs?\ng = sns.catplot(kind=\"point\", \n                data=joined_1v1, \n                y=\"winner\", \n                x=\"patch\", \n                col=\"civ\", \n                order=patches,\n                col_wrap=5, \n                sharey=True, \n                sharex=False)\nfor ax in g.axes:\n    ax.yaxis.set_major_formatter(PercentFormatter(1))\ng.fig.suptitle(\"Civ Win Rates by Patch (RM_1v1)\", y=1.02)\ng.set_xlabels(\"Patch\")\ng.set_titles(\"{col_name}\")\ng.set_ylabels(\"Win rate (%)\")\nplt.show()","0e9cbaf3":"latest_1v1 = joined_1v1[joined_1v1[\"patch\"] == latest_patch].reset_index(drop=True)\nlatest_1v1.head()","dc7351c4":"renames = {\n    \"token_player\": \"opponent\",\n    \"civ\": \"opponent_civ\",\n}\nopponents = latest_1v1[[\"match\", \"token_player\", \"civ\"]].rename(columns=renames)\nvs_df = pd.merge(latest_1v1, opponents, left_on=\"match\", right_on=\"match\").rename(columns={\"token_player\": \"player\"})\n\n# Since we've merged the same dataframe a player will be an opponent of itself, we should drop those rows\nvs_df = vs_df[vs_df[\"player\"] != vs_df[\"opponent\"]]\nassert(len(vs_df) == len(latest_1v1))  # ensure we didn't lose any data\nvs_df[[\"match\", \"player\", \"opponent\", \"civ\", \"opponent_civ\", \"winner\"]].head(6)","1fd44a77":"# Awesome, now that we have the civs and their opponents, we can easily calculate their win rates vs other civs!\nwin_vs = vs_df.pivot_table(values=\"winner\", index=\"civ\", columns=\"opponent_civ\")\nwin_vs.head()","dfeb0c99":"# What does this look like graphically?\nsns.heatmap(win_vs)\nplt.title(\"Win Rates of Each Civ vs Each Other\")\nplt.show()","8ada88b5":"# One point stands out on this heat map. What is it?\nmelted_win_vs = win_vs.unstack().reset_index().rename(columns={0: \"win_rate\"})\nmelted_win_vs.sort_values(\"win_rate\").nlargest(5, columns=\"win_rate\")\n","9a2492de":"# What's the most played map?\nlatest_1v1_matches = tidy_matches[(tidy_matches[\"patch\"] == latest_patch) & (tidy_matches[\"ladder\"] == \"RM_1v1\")]\npercent_maps = (\n    latest_1v1_matches.groupby(\"map\")[\"token\"]\n    .count()\n    .reset_index()\n    .rename(columns={\"token\": \"counts\"})\n)\npercent_maps = percent_maps[percent_maps[\"counts\"] > 0]\npercent_maps[\"percent\"] = percent_maps[\"counts\"] \/ len(latest_1v1_matches)\npercent_maps = percent_maps.sort_values(\"percent\", ascending=False)\n\nfig, ax = plt.subplots()\nrects = ax.bar(percent_maps[\"map\"], percent_maps[\"percent\"])\nax.set_xticklabels(percent_maps[\"map\"], rotation=90)\nax.yaxis.set_major_formatter(PercentFormatter(1))\nax.set_title(\"Map Play Rate RM_1v1\")\nax.set_ylabel(\"Play rate (%)\")\nax.set_xlabel(\"Map\")\nplt.show()","4ec37216":"# Looks like Arabia is pretty popular this patch! (And all patches, fwiw)\n# How often do certain civs win on each map? Well, let's use the pivot table and heat map again\nwin_maps = latest_1v1.pivot_table(values=\"winner\", index=\"civ\", columns=\"map\")\ndisplay(win_maps.head())\nsns.heatmap(win_maps)\nplt.show()","43811780":"## How do civs stack up against each other?\n\nCool! It's awesome seeing how the Malay up time bug affected their win rate and how the Teutons buff up'ed their win rate to above 50%! But how do civs fair against each other? From here on out I will be using only data from the latest patch, but the same analysis could be applied to any previous patch as well. Also note that I will only be using 1v1 data, since you can't directly compare one civ vs one civ in a team game.","4419feb9":"# Map rates\n\nAwesome! Now we know how civs stack up against each other in the latest patch, ow win rates have changed over time, and which civs are popular to play. But how do civs perform on each map? Which civ is best for which map? For this analysis I will again be using the latest RM_1v1 patch data, but the same analysis could be applied to RM_TEAM or any previous patch.","328768a8":"# Civ Rates\n\nLet's explore the civ win and play rates overall then patch over patch. What will the data reveal...","c8c07c7b":"Looks like the Protuguese are in fact pretty bad... Appearing 3 times in the worst rates vs other civs. The Turks crush them, winning almost 70% of the time! That explains the white hotspot on our heat map!","27743cea":"## Inspecting the data\n\nLet's read in the data and see what it looks like! First we'll read the data into pandas dataframes, check the column types, and print out the first few rows.","cd7be1d0":"# aoestats.io example data analysis\n\nThis is an example data anlysis using the [aoestats.io](https:\/\/aoestats.io) dataset. The goal of this kernel is to showcase how one might use the dataset to perform their own analysis and to derive that stats displayed on aoestats.io. I hope people enjoy the dataset! I would love to see what people do with it.","60dabcbc":"## Cleaning and Exploring\n\nLet's checkout the data a bit more, do some cleaning, and make some graphs\n","51a0f7a7":"# Fin\n\nThere you go. An example data anlysis of Age of Empires II DE match data. Hope you all learned some things about various civs, maps, etc... I hope you enjoy the dataset! I would love to see what people create."}}