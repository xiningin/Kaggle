{"cell_type":{"48b572cf":"code","c6f78c8f":"code","2c70aebf":"code","8b2e1bbf":"code","b490ce81":"code","d2fc3fcf":"code","840b943c":"code","6c3b5072":"code","01f8a000":"code","7980c4f2":"code","3e8cffeb":"code","ec490b48":"code","393fa53f":"code","2a374b9b":"code","b3b5535e":"code","ec50bee9":"code","e7cd486b":"code","38ee5b33":"code","5b08cfae":"code","2e84ab18":"code","fae77cbb":"code","17019473":"code","aacd7109":"code","c976a6b1":"code","e822af32":"code","7bce689f":"code","88659eca":"code","46f0a246":"code","74915263":"code","6306e033":"code","b21be04a":"code","170247b9":"code","e5038c9a":"code","2be6bf35":"code","f0fce97d":"code","a9619e2a":"code","6b2584bd":"code","1e34e1f1":"code","6159699f":"code","b1e9a395":"code","a4d89b88":"code","2e2fec70":"markdown","c35cb2f5":"markdown","13aedaea":"markdown","d751a102":"markdown","4771a9fd":"markdown","a6da6e46":"markdown","0a1a66bc":"markdown","39001fbe":"markdown","c35b3574":"markdown","13ad5b39":"markdown","8865b11b":"markdown","2bf62c7f":"markdown","29c61926":"markdown","8e39f3ba":"markdown","3ea2bf81":"markdown","c6f17fce":"markdown","75d37f59":"markdown","ab943ede":"markdown","86b40256":"markdown","82d12401":"markdown","3a5c7379":"markdown","64001c65":"markdown","9186bd53":"markdown","ec96ec87":"markdown","92b0dcd9":"markdown","e1945781":"markdown","dbcb7d4f":"markdown"},"source":{"48b572cf":"a = 2\nprint(a, type(a))","c6f78c8f":"a = 4.2\nprint(a, type(a))","2c70aebf":"a = \"hey there\"\nprint(type(a), a)\n\na = \"hi\"\nprint(type(a), a)\n\na = 'i'\nprint(type(a), a)\n\na = \"d\"\nprint(type(a), a)","8b2e1bbf":"b = 1\n\nsum = a + b\nprint(sum, type(sum))","b490ce81":"print(z)","d2fc3fcf":"z = \"I'm down here. Help :(\"","840b943c":"a = \"hey\" + 'there'\nprint(a, type(a))","6c3b5072":"str1 = \"Papa Kevin\"\nstr2 = \"Mama Kevin\"\nstr3 = \"Kevin 11\"\nstr4 = \"7-11\"\n\nprint(str1.endswith(\"Kevin\"))\nprint(str2.endswith(\"in\"))\nprint(str2.endswith(\"  11\"))","01f8a000":"type(str1.endswith(\"Kevin\"))","7980c4f2":"bool","3e8cffeb":"list1 = list()\nlist2 = []\n\nprint(\"list1:\", list1)\nprint(\"list2:\", list2)","ec490b48":"list1.append(\"a\")\nlist1.append(\"b\")\nlist1.append(\"c\")\n\n# printing entire list\nprint(list1)\n\n# printing the zeroth element of the list\nprint(list1[0])\n\n# printing the second element of the list\nprint(list1[2])","393fa53f":"print(list1[3])","2a374b9b":"cholesterol = \"hi\"\n# cholesterol = \"med\"\n# cholesterol = \"low\"\n# cholesterol = \"over level 9000\"\n\nif (cholesterol == \"hi\"):\n    print(\"Get help, now!\")\nelif (cholesterol == \"med\"):\n    print(\"Take it easy!\")\nelse:\n    print(\"Enjoy :)\")","b3b5535e":"movieRating = 3\n# movieRating = 9.5\n# movieRating = 7\n# movieRating = 5.4\n# movieRating = 9999\n# movieRating = -2\n\nif (movieRating > 8 and movieRating >=10):\n    print(\"Loved\")\nelif (movieRating > 6):\n    print(\"Liked it\")\nelif (movieRating > 4):\n    print(\"Ok\")\nelif (movieRating > 2):\n    print(\"Disliked it\")\nelif (movieRating > 0):\n    print(\"Hated it\")\nelse:\n    print(\"Invalid movieRating\")\n    ","ec50bee9":"sunOut = True\nclouds = False\nrain = False\nsnow = False\n\nif (sunOut):\n    print(\"Sunny\")\nelif (clouds):\n    if (rain):\n        print(\"Rainy\")\n        print(\"Take an Umbrella!\")\n    else:\n        print(\"Cloudy\")\nelif (snow):\n    print(\"Snowing\")\n    print(\"Wear a jacket\")\nelse:\n    print(\"It's cloudy with a chance of meatballs\")","e7cd486b":"sunOut = False\nclouds = True\nrain = True\nsnow = False\n\nif (sunOut):\n    print(\"Sunny\")\nelif (clouds):\n    if (not rain):\n        print(\"Cloudy\")\n    else:\n        print(\"Rainy\")\n        print(\"Take an Umbrella!\")        \nelif (snow):\n    print(\"Snowing\")\n    print(\"Wear a jacket\")\nelse:\n    print(\"It's cloudy with a chance of meatballs\")","38ee5b33":"sunOut = False\nclouds = False\nrain = False\nsnow = False\n\nif (sunOut):\n    print(\"Sunny\")\nelif (clouds):\n    if (not rain):\n        print(\"Cloudy\")\n    else:\n        print(\"Rainy\")\n        print(\"Take an Umbrella!\")        \nelif (snow):\n    print(\"Snowing\")\n    print(\"Wear a jacket\")\nelse:\n    print(\"It's cloudy with a chance of meatballs!\")","5b08cfae":"def predictWeather(sunOut, clouds, rain, snow):\n    if (sunOut):\n        print(\"Sunny\")\n    elif (clouds):\n        if (not rain):\n            print(\"Cloudy\")\n        else:\n            print(\"Rainy\")\n            print(\"Take an Umbrella!\")        \n    elif (snow):\n        print(\"Snowing\")\n        print(\"Wear a jacket\")\n    else:\n        print(\"It's cloudy with a chance of meatballs!\")\n    ","2e84ab18":"sunOut = True\nclouds = False\nrain = False\nsnow = False\n\npredictWeather(sunOut, clouds, rain, snow)","fae77cbb":"predictWeather(True, False, False, False)","17019473":"predictWeather(sunOut=True, clouds=False, rain=False, snow=False)","aacd7109":"predictWeather(clouds=False, rain=False, snow=False, sunOut=True)","c976a6b1":"def predictWeather(sunOut, clouds, rain, snow=False):\n    if (sunOut):\n        print(\"Sunny\")\n    elif (clouds):\n        if (not rain):\n            print(\"Cloudy\")\n        else:\n            print(\"Rainy\")\n            print(\"Take an Umbrella!\")        \n    elif (snow):\n        print(\"Snowing\")\n        print(\"Wear a jacket\")\n    else:\n        print(\"It's cloudy with a chance of meatballs!\")","e822af32":"predictWeather(False, False, False)","7bce689f":"def predictWeather(sunOut, clouds, rain, snow=True):\n    if (sunOut):\n        print(\"Sunny\")\n    elif (clouds):\n        if (not rain):\n            print(\"Cloudy\")\n        else:\n            print(\"Rainy\")\n            print(\"Take an Umbrella!\")        \n    elif (snow):\n        print(\"Snowing\")\n        print(\"Wear a jacket\")\n    else:\n        print(\"It's cloudy with a chance of meatballs!\")","88659eca":"predictWeather(False, False, False)","46f0a246":"def predictWeather(sunOut, clouds=True, rain, snow=True):\n    if (sunOut):\n        print(\"Sunny\")\n    elif (clouds):\n        if (not rain):\n            print(\"Cloudy\")\n        else:\n            print(\"Rainy\")\n            print(\"Take an Umbrella!\")        \n    elif (snow):\n        print(\"Snowing\")\n        print(\"Wear a jacket\")\n    else:\n        print(\"It's cloudy with a chance of meatballs!\")","74915263":"print(\"ACM\")\nprint(\"ACM\")\nprint(\"ACM\")\nprint(\"ACM\")\nprint(\"ACM\")\nprint(\"ACM\")\nprint(\"ACM\")","6306e033":"for i in range(0, 10, 1):\n    print(i)","b21be04a":"for i in range(0, 10, 3):\n    print(i)","170247b9":"for i in range(0, 10):\n    print(i)","e5038c9a":"print(list1)","2be6bf35":"for element in list1:\n    print(element)","f0fce97d":"import math\n\na = 2\nresult = math.pow(a, 5)\nprint(result)","a9619e2a":"print(a ** 5)","6b2584bd":"a = 5\nmath.sin(a)","1e34e1f1":"math.pi","6159699f":"list2 = [1, math.pi, 89, -3]\n\nfor element in list2:\n    math.sin(element)\n    \nprint(list2)","b1e9a395":"list2 = [1, math.pi, 89, -3]\n\nfor elem in list2:\n    elem = math.sin(elem)\n    \nprint(list2)","a4d89b88":"for i, element in enumerate(list2):\n    list2[i] = math.sin(element)\n    \nprint(list2)","2e2fec70":"Did you notice that `print()` is also a function? You can spot a function by `()`. \n\nLet's say you have to `print(\"ACM\")` 5 times. You could copy-paste that. How about 10? Still do-able.\n\nWhat about 100? You could count your number of pastes? **What about a 1000** `print(\"ACM\")`**?** You'd definitely loose track of the count and loose your mind in the process!\n\nAnd copy pasting code over and over and over and over and over again looks ugly. Get my flow? :P","c35cb2f5":"`str.endswith()` is function that you can perform on a string.","13aedaea":"Now let's try storing it...","d751a102":"There is no 3rd element in `list1`. Hence there `IndexError`.","4771a9fd":"Here's a style of writing code in jupyter notebook. When you write code in cells. Make sure you do everything in your power to keep your code sequential. An example to make that more concrete...","a6da6e46":"Your first error! \n\nNow a good rule of thumb when you get errors is to **try deciphering the last line of the error message** and figure what went wrong or use the all powerful Google! Here's the [first link](https:\/\/stackoverflow.com\/questions\/51252580\/new-to-coding-python-error-typeerror-can-only-concatenate-str-not-int-t\/51252705). \n\nElse try the first line of the error message.","0a1a66bc":"Python isn't  picky whether you use `\" \"` or `' '` both work just as fine. Not in other languages though!","39001fbe":"Hol' up! What is this output `True` and `False`? Try `type()` on the output.","c35b3574":"You could also do.","13ad5b39":"Now what if writing functions, loops, if statements and all that jazz gets annoying? If you're working on a project that needs you to have multiple python files that use the same lines of code over and over again. You use modules. You could either make your own modules or install modules that someone else has made to make life easier.","8865b11b":"What happens if you try to print `list1[3]`? ","2bf62c7f":"Here are multiple ways to call the same fucntion. You can m some ways are more convenient than others. ","29c61926":"### def function():\n\nYou can see how annoying it can get to copy-paste the same lines of code over and over again. To prevent all that copy-pasting and increasing the size of code in your file or in this case \"cell\". We use functions!","8e39f3ba":"### modules","3ea2bf81":"What things get far more complex? What if you have to find the $sine$ of a value?","c6f17fce":"`int` can be thought of as short for integers\n*example:* $1, 2, 3, 4, -5, -99998, 177098$ $etc.$\n\n`float` can be thought of real numbers but always have a decimal\n*example:* $ 1.34565, 2.0, 4.9, -.5, -99998.$ $etc.$","75d37f59":"### strings\n\n`str`  (aka string) in python is a charachter or multiple charachters. Think of characters as the letter, number, symbol combo that you can type out with your keyboard.","ab943ede":"### if elif else\n","86b40256":"Try `shift+tab` on bool for more info!","82d12401":"# Python Crash Course","3a5c7379":"You can think of bool of saying True or False. Kind of like 1 for True and 0 for False. So you only need 1 binary bit to store the answer and is more space efficient. Now `int` can be 32-bit or 64-bit binary number. ","64001c65":"I'm going to leave you to do more experimenting. Feel free to do that with all cells in this notebook. \n\nA good rule of thumb is never deleting your code. You can always comment your code out and then delete it at the very end. Often a time you'll delete code that was off by 1 variable and re-write something that just don't even work.\n\nComment your code. **Or** make a new cell in notebook. Get comfortable with navigating the notebook. \n\n*TODO show shortcuts*","9186bd53":"### for loops\n\nLoops are used when you need to perform the same lines of code over and over again and when doing function calls just can't suffice. Below is a basic example of a `for` loop using `range()`","ec96ec87":"That didn't work. Reason being it just copies the element in `list2` to the variable `elem` and any changes you do to element doesn't do anything because `elem` only has a copy of the current element you're currently looping through in `list2`.","92b0dcd9":"Let's play around with the `range()` to figure out how it works. Whenever you learn a new coding topic. It's essential  you play around with it. \n\nTry weird values. Predict the output. And then check if it matches your assumption. Break it. Tweak it. Test it. Grok it.\n\n**Don't just read code. Write more code than you read. And read a lot!**","e1945781":"### Lists\n\nList can hold pretty much anything. They're far more versatile than arrays (if you know what they are...) But if you don't that's cool too! \n\nThink of it as a \"list\" that hold different things. And, indexing starts at zero. That is zeroth, first, second, third element and so on...","dbcb7d4f":"Let's try finding the sine of a list of values"}}