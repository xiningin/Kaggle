{"cell_type":{"c8fdc264":"code","3dd5367d":"code","806d2d3e":"code","4b54c8c1":"code","fe11eb4d":"code","604469c0":"code","0e47182a":"code","35773a7c":"code","cc64eb5c":"code","696d8a30":"code","a1f91ad2":"code","45f93a23":"code","83efc340":"code","213b165b":"code","f89ca197":"code","5a758fc3":"code","19c26a3b":"code","c9c5f095":"code","61e5c021":"code","a9887bbd":"code","aaea3ab0":"code","1bde4db2":"code","9b022622":"code","52dabd68":"code","7d3bc4fb":"code","dcf98c14":"code","6895a308":"code","b6f0d686":"code","275ca369":"code","5d7ffaa5":"code","196e9823":"code","ededc8b1":"code","ff1001f3":"code","ecd12385":"markdown","21a2fc25":"markdown","0ed63625":"markdown","ada2b302":"markdown","07ba1cc6":"markdown","587030e3":"markdown","5a3aa67a":"markdown","cb11e94d":"markdown","b76ae853":"markdown","644a67c2":"markdown","6324343a":"markdown","fca406ce":"markdown","a656d630":"markdown","9c48cbf1":"markdown","734b3a6a":"markdown","46ddfd69":"markdown","716bd2e7":"markdown","04c0a64b":"markdown","9b14b768":"markdown","49f47d34":"markdown","6c05d69f":"markdown","73d2a2ea":"markdown","06a6a8a4":"markdown","5568032f":"markdown","95148dff":"markdown","5e9d5556":"markdown","aa82172d":"markdown","775d1d95":"markdown","b9adab7d":"markdown","59a424ed":"markdown","6de93190":"markdown","143f5b17":"markdown","c5970165":"markdown","9df79771":"markdown","5be2c6e9":"markdown"},"source":{"c8fdc264":"import numpy as np\nimport pandas as pd ","3dd5367d":"import matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","806d2d3e":"df = pd.read_csv('..\/input\/911.csv')","4b54c8c1":"df.info() #can use df.columns or df.describe()","fe11eb4d":"df.head(5)","604469c0":"df['zip'].value_counts().head(5)","0e47182a":"df['twp'].value_counts().head(5)","35773a7c":"df['title'].nunique()","cc64eb5c":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","696d8a30":"df['Reason'].value_counts()","a1f91ad2":"sns.countplot(x='Reason',data=df,palette='viridis')","45f93a23":"type(df['timeStamp'].iloc[0])","83efc340":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","213b165b":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","f89ca197":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","5a758fc3":"df['Day of Week'] = df['Day of Week'].map(dmap)","19c26a3b":"sns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","c9c5f095":"sns.countplot(x='Month',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","61e5c021":"# It is missing some months! 9,10, and 11 are not there.","a9887bbd":"byMonth = df.groupby('Month').count()\nbyMonth.head()","aaea3ab0":"# Could be any column\nbyMonth['twp'].plot()","1bde4db2":"sns.lmplot(x='Month',y='twp',data=byMonth.reset_index())","9b022622":"df['Date']=df['timeStamp'].apply(lambda t: t.date())","52dabd68":"df.groupby('Date').count()['twp'].plot()\nplt.tight_layout()","7d3bc4fb":"df[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()","dcf98c14":"df[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()","6895a308":"df[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()","b6f0d686":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.head()","275ca369":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')","5d7ffaa5":"sns.clustermap(dayHour,cmap='viridis')","196e9823":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()","ededc8b1":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='viridis')","ff1001f3":"sns.clustermap(dayMonth,cmap='viridis')","ecd12385":"** Now repeat these same plots and operations, for a DataFrame that shows the Month as the column. **","21a2fc25":"**Continue exploring the Data however you see fit!**\n# Thanks!","0ed63625":"** Now do the same for Month:**","ada2b302":">## Data Setup & Importing useful libraries:","07ba1cc6":"** Now create a HeatMap using this new DataFrame. **","587030e3":"## **911 Statistical Data Analysis***\nHello,\nThis was the project submitted by me during my Udemy Data Science training. May be I am too sluggish to change somethings right now but I will be continuously adding some more cognitive stuff to it like some more plots or interactive plots using plotly for EDA (Exploratory data analysis) and machine learning stuff etc.\n\n\n\nThanks\n\nStay Connected!\n\nANKIT\u62c9\u5c14\u592b \n","5a3aa67a":"** Take a look at the 'title' column, how many unique title codes are there? **","cb11e94d":"**Check the info() of the df **","b76ae853":"** Now create a clustermap using this DataFrame. **","644a67c2":"For this project from Udemy I have analyzed some 911 call data from [Kaggle](https:\/\/www.kaggle.com\/mchirico\/montcoalert). The data contains the following fields:\n\n*** lat : String variable, Latitude\n* lng: String variable, Longitude\n* desc: String variable, Description of the Emergency Call\n* zip: String variable, Zipcode\n* title: String variable, Title\n* timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n* twp: String variable, Township\n* addr: String variable, Address\n* e: String variable, Dummy variable (always 1)**\n\n","6324343a":"**Create a new column called 'Date' that contains the date from the timeStamp column. You'll need to use apply along with the .date() method. ** ","fca406ce":"** Now recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call**","a656d630":"** Now create a gropuby object called byMonth, where you group the DataFrame by the month column and use the count() method for aggregation. Use the head() method on this returned DataFrame. **","9c48cbf1":"- The Matplotlib (The plotting) and Seaborn (The polpular statstical plotting,built on top of Matplotlib) libraries which offers compatibility with pandas DataFrames and allows us to create good designs in plots","734b3a6a":"** Now use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column. **","46ddfd69":"** Check the head of df **","716bd2e7":"___\n** Now let us begin to focus on time information. What is the data type of the objects in the timeStamp column? **","04c0a64b":"- Numpy is an linear algebra library for python from which we can create vector and matrix arrays.\n   - Whle pandas which is built on top of NumPy and gives us various features to convert huge data into series\n   and Dataframes for better and efficient visualization.\n   - For Installation:\n   - use `pip install numpy` for numpy.\n   - use  `pip install pandas` for pandas.","9b14b768":"** You should have noticed it was missing some Months, let's see if we can maybe fill in this information by plotting the information in another way, possibly a simple line plot that fills in the missing months, in order to do this, we'll need to do some work with pandas...**","49f47d34":"** What are the top 5 townships (twp) for 911 calls? **","6c05d69f":"** Now groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.**","73d2a2ea":"** What are the top 5 zipcodes for 911 calls? **","06a6a8a4":"** Now see if you can use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column. **","5568032f":"** Now use seaborn to create a countplot of 911 calls by Reason. **","95148dff":">## Import visualization libraries and set %matplotlib inline. ","5e9d5556":"** Now create a simple plot off of the dataframe indicating the count of calls per month. **","aa82172d":"> ## Creating new features","775d1d95":"** In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.** \n\n**For example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS. **","b9adab7d":"> ## Read in the csv file as a dataframe called df","59a424ed":"** You should have seen that these timestamps are still strings. Use [pd.to_datetime](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.to_datetime.html) to convert the column from strings to DateTime objects. **","6de93190":"** Did you notice something strange about the Plot? **","143f5b17":"** Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week: **\n\n    dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","c5970165":"** You can now grab specific attributes from a Datetime object by calling them. For example:**\n\n    time = df['timeStamp'].iloc[0]\n    time.hour\n\n**You can use Jupyter's tab method to explore the various attributes you can call. Now that the timestamp column are actually DateTime objects, use .apply() to create 3 new columns called Hour, Month, and Day of Week. You will create these columns based off of the timeStamp column, reference the solutions if you get stuck on this step.**","9df79771":"** What is the most common Reason for a 911 call based off of this new column? **","5be2c6e9":"> ## Basic Questions"}}