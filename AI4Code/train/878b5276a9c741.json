{"cell_type":{"032579c4":"code","534f9e61":"code","57cbd713":"code","a7625dd5":"code","9b778f9e":"code","6a9b0889":"code","1f0cc088":"markdown","429ac168":"markdown","7d9ae581":"markdown"},"source":{"032579c4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib import animation, rc\nimport seaborn as sns\nfrom IPython.display import HTML","534f9e61":"def x_rotate(v, theta):\n    x_theta = np.array([\n        [1, 0, 0],\n        [0, np.cos(theta), -np.sin(theta)],\n        [0, np.sin(theta), np.cos(theta)]\n    ])\n    return np.matmul(v, x_theta)\n    \ndef y_rotate(v, theta):\n    y_theta = np.array([\n        [np.cos(theta), 0, np.sin(theta)],\n        [0, 1, 0],\n        [-np.sin(theta), 0, np.cos(theta)]\n    ])\n    return np.matmul(v, y_theta)\n    \n\ndef z_rotate(v, theta):\n    z_theta = np.array([\n        [np.cos(theta), -np.sin(theta), 0],\n        [np.sin(theta), np.cos(theta), 0],\n        [0, 0, 1]\n    ])\n    return np.matmul(v, z_theta)","57cbd713":"%%capture\n# rc('animation', html='jshtml')\nnp.random.seed(0)\n\nfig,ax = plt.subplots(figsize=(12, 9))\nax.axis('off')\nax.set_aspect('equal')\n\nnums = 1000\niters = 100\n\nv = np.random.rand(nums,3)*np.pi*2\nv[:,0] = np.sin(v[:,0])\nv[:,1] = np.cos(v[:,1])\nv[:,2] = np.sqrt(1-np.power(v[:,0], 2)-np.power(v[:,1], 2))\nv[:,2] *= np.random.choice([-1, 1], nums)\nims = []\n\n\nfor i in range(iters):\n    x = v[:,0]\n    y = v[:,1]\n    z = v[:,2]\n    im = ax.scatter(x, y, color='black', s=np.power(z+2.5,2)*5, animated=True)\n    ims.append([im])\n    v = y_rotate(v, 2*np.pi\/100)\n    \n\nfig.tight_layout()\nani = animation.ArtistAnimation(fig, ims, interval=50, blit=True,\n                                repeat_delay=0)\n\nani.save('3d_globe.gif', dpi=160, writer='imagemagick')","a7625dd5":"HTML(ani.to_jshtml())","9b778f9e":"%%capture\nfrom itertools import product\n\nnp.random.seed(0)\n\nfig,ax = plt.subplots(figsize=(12, 9))\nax.axis('off')\nax.set_aspect('equal')\n\niters = 100\n\nrg = np.linspace(-1, 1,20)\nv = np.array(list(product(rg, rg, rg)))\nprint(v.shape)\nims = []\n\n\nfor i in range(iters):\n    x = v[:,0]\n    y = v[:,1]\n    z = v[:,2]\n    im = ax.scatter(x, y, color='black', s=np.power(z+2.5,2)*12, animated=True)\n    ims.append([im])\n    v = z_rotate(v, 2*np.pi\/100)\n    v = y_rotate(v, 4*np.pi\/100)\n    \n\nfig.tight_layout()\nani = animation.ArtistAnimation(fig, ims, interval=50, blit=True,\n                                repeat_delay=0)\n\nani.save('3d_cube.gif', dpi=160, writer='imagemagick')","6a9b0889":"HTML(ani.to_jshtml())","1f0cc088":"## 3D Globe \n\n> orginal idea from https:\/\/codepen.io\/Mamboleoo\/pen\/rNzYPjq","429ac168":"## 3D Cube","7d9ae581":"## Matplotlib Animation Techniques (2)\n\n![](https:\/\/matplotlib.org\/stable\/_static\/logo2.svg)\n\n### Related Notebooks\n\n- [Matplotlib Animation Techniques](https:\/\/www.kaggle.com\/subinium\/matplotlib-animation-techniques)"}}