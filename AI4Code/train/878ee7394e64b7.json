{"cell_type":{"f020cfca":"code","3797f2ee":"code","5a0826ce":"code","30d64e8a":"code","66d367ee":"code","2c78209a":"code","bb6a5f45":"code","3fef8e78":"code","d4540a01":"code","383a5e61":"code","3091419c":"code","ba7e9ec0":"code","39916509":"code","be26a3c2":"code","6282c40a":"code","fa14c301":"code","9b99810a":"code","50a1ea3b":"code","db6a0149":"code","1d9e3fae":"code","868e2d7b":"code","9acba02f":"code","3a570cd9":"code","be4ef5f6":"code","4ff2f778":"code","34b52921":"code","ca64c68e":"code","2b270f6d":"code","8fab46e0":"code","fa7cd56a":"code","f3f96f0e":"markdown","b279346b":"markdown","3bdd8ab7":"markdown","64fcf512":"markdown","a2f3b995":"markdown","997f92c8":"markdown","4ae9b5b9":"markdown","c5ef2a4d":"markdown","ab568a4e":"markdown","940b18b2":"markdown","d5db135a":"markdown","69cf7bcf":"markdown","1e06be21":"markdown","5f0b906d":"markdown","99cceaa5":"markdown"},"source":{"f020cfca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3797f2ee":"import torch\nfrom torch import nn\nfrom torch import optim\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\nimport torchvision.transforms.functional as TF\n\nimport random\nimport os, shutil\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nfrom tqdm.auto import tqdm\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score\n\n%matplotlib inline","5a0826ce":"class Config:   \n    # data preprocessing\n    data_dir = '\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/'\n    logdir = 'logdir'\n    validation_fraction = 0.15\n    test_fraction = 0.10\n    train_batch = 16\n    valid_batch = 32\n    test_batch = 32\n    \n    # model setup\n    input_dim = 256\n    input_ch = 3\n    output_dim = 256\n    output_ch = 1\n    \n    # training\n    seed = 21\n    learning_rate = 0.01\n    epochs = 30\n    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')","30d64e8a":"def set_seed(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)","66d367ee":"def plot_example(idx):\n    base_path = os.path.join(Config.data_dir, test_df['directory'].iloc[idx])\n    img_path = os.path.join(base_path, test_df['images'].iloc[idx])\n    mask_path = os.path.join(base_path, test_df['masks'].iloc[idx])\n    img = Image.open(img_path)\n    mask = Image.open(mask_path)\n\n    fig, ax = plt.subplots(1, 2, figsize=(8,4))\n    ax[0].imshow(img)\n    ax[0].set_title('Image')\n    ax[1].imshow(mask) \n    ax[1].set_title('Mask')\n    plt.show()","2c78209a":"def show_sample(sample, title=None):\n    fig, ax = plt.subplots(1, 2)\n    ax[0].imshow(sample[0])\n    ax[1].imshow(sample[1], cmap='gray')\n    if title:\n        fig.suptitle(title)\n    plt.show()","bb6a5f45":"def plot_predictions(model, idx):\n    base_path = os.path.join(Config.data_dir, test_df['directory'].iloc[idx])\n    img_path = os.path.join(base_path, test_df['images'].iloc[idx])\n    mask_path = os.path.join(base_path, test_df['masks'].iloc[idx])\n\n    img = Image.open(img_path)\n    mask = Image.open(mask_path)\n\n    tensor_img, tensor_mask = eval_transforms((img, mask))\n    tensor_img = tensor_img.unsqueeze(0).to(Config.device) \n    \n    model.eval()\n    with torch.no_grad():\n        pred = model(tensor_img)[0].detach().cpu().numpy()\n        pred = pred.transpose((1, 2, 0)).squeeze()\n        rounded = np.round(pred)\n    \n    plot_images = {'Image': img, \n                   'Mask': mask, \n                   'Predicted Mask': pred, \n                   'Predicted Rounded Mask': rounded}\n\n    fig, ax = plt.subplots(1, 4, figsize=(16,4))\n    for i, key in enumerate(plot_images.keys()):\n        ax[i].imshow(plot_images[key])\n        ax[i].set_title(key)\n    plt.show()","3fef8e78":"set_seed(Config.seed)","d4540a01":"dirs, images, masks = [], [], []\nfor root, folders, files in os.walk(Config.data_dir):\n    for file in files:\n        # save only images with corresponding masks\n        if 'mask'in file:\n            dirs.append(root.replace(Config.data_dir, ''))\n            masks.append(file)\n            images.append(file.replace('_mask', ''))\n\nPathDF = pd.DataFrame({'directory': dirs, 'images': images, 'masks': masks})\nPathDF.head()","383a5e61":"train2rest = Config.validation_fraction + Config.test_fraction\ntest2valid = Config.validation_fraction\/train2rest\n\ntrain_df, rest = train_test_split(\n    PathDF, random_state=Config.seed,\n    test_size=train2rest\n)\n\ntest_df, valid_df = train_test_split(\n    rest, random_state=Config.seed,\n    test_size=test2valid\n)\n\nprint('Train:', train_df.shape[0])\nprint('Valid:', valid_df.shape[0])\nprint('Test:', test_df.shape[0])","3091419c":"plot_example(59)\nplot_example(123)\nplot_example(246)\nplot_example(346)","ba7e9ec0":"class MRI_Dataset(Dataset):\n    def __init__(self, path_df, transform=None):\n        self.path_df = path_df\n        self.transform = transform\n\n    def __len__(self):\n        return self.path_df.shape[0]\n\n    def __getitem__(self, idx):\n        base_path = os.path.join(Config.data_dir, self.path_df.iloc[idx]['directory'])\n        img_path = os.path.join(base_path, self.path_df.iloc[idx]['images'])\n        mask_path = os.path.join(base_path, self.path_df.iloc[idx]['masks'])\n\n        image = Image.open(img_path)\n        mask = Image.open(mask_path)\n\n        sample = (image, mask)\n        # apply the same transform on both image and a mask\n        if self.transform:\n            sample = self.transform(sample)\n\n        return sample","39916509":"class PairedRandomHorizontalFlip():\n    \"\"\"Custom transform for horizontal flipping\"\"\"\n    def __init__(self, prob=0.5):\n        self.prob = prob   \n\n    def __call__(self, sample):\n        \"\"\"\n        Randomly flips both of the images\n\n        Arguments:\n        sample - tuple, image and segmentation mask\n    \n        Returns:\n        (img, mask) - tuple, transformed sample\n        \"\"\"\n        img, mask = sample\n        if np.random.random() < self.prob:\n            img, mask = TF.hflip(img), TF.hflip(mask)\n        return img, mask","be26a3c2":"class PairedRandomAffine():\n    \"\"\"\n    Randomly applies affine transformation\n    on both of the images\n    \"\"\"\n    def __init__(self, degrees=None, translate=None, scale_ranges=None, shears=None):\n\n        self.params = {\n            'degrees': degrees,\n            'translate': translate,\n            'scale_ranges': scale_ranges,\n            'shears': shears\n        }\n\n    def __call__(self, sample):\n        img, mask = sample\n        w, h = img.size\n        # extract parameters from trasnforms.RandomAffine\n        angle, translations, scale, shear = transforms.RandomAffine.get_params(self.params['degrees'], self.params['translate'], self.params['scale_ranges'], self.params['shears'], (w,h))\n        # apply TF.affine using fixed parameters\n        img = TF.affine(img, angle, translations, scale, shear)\n        mask = TF.affine(mask, angle, translations, scale, shear)\n        return img, mask","6282c40a":"class PairedToTensor():\n    \"\"\"\n    Convert ndarrays in sample to Tensors.\n    \"\"\"\n    def __call__(self, sample):\n        img, mask = sample\n        img = np.array(img)\n        mask = np.expand_dims(mask, -1)\n        img = np.moveaxis(img, -1, 0)\n        mask = np.moveaxis(mask, -1, 0)\n        img, mask =  torch.FloatTensor(img), torch.FloatTensor(mask)\n        img = img\/255\n        mask = mask\/255\n        return img, mask","fa14c301":"dataset = MRI_Dataset(test_df)\nsample = dataset[59]\ntransform = PairedRandomHorizontalFlip(prob=1)\nshow_sample(sample, title='Original')\nshow_sample(transform(sample), title='Transformed')","9b99810a":"transform = PairedRandomAffine(\n    degrees=(15, 15),\n    scale_ranges=(1.2, 1.2)\n) # for testing purposes we fix degrees and scale to a constant number\nshow_sample(sample, 'Original')\nshow_sample(transform(sample), 'Transformed')","50a1ea3b":"train_transforms = transforms.Compose([                       \n    PairedRandomHorizontalFlip(), \n    PairedRandomAffine(\n        degrees=(-15, 15),\n        translate=(0.1, 0.1),\n        scale_ranges=(0.8, 1.2)\n    ),\n    PairedToTensor()\n])\neval_transforms = PairedToTensor()\n\ntrain_data = MRI_Dataset(train_df, transform=train_transforms)\nvalid_data = MRI_Dataset(valid_df, transform=eval_transforms)\ntest_data = MRI_Dataset(test_df, transform=eval_transforms)\n\ntrain_loader = DataLoader(train_data, batch_size=Config.train_batch, shuffle=True, num_workers=2)\nvalid_loader = DataLoader(valid_data, batch_size=Config.valid_batch, shuffle=False, num_workers=2)\ntest_loader = DataLoader(test_data, batch_size=Config.test_batch, shuffle=False, num_workers=2)","db6a0149":"class DoubleConv(nn.Module):\n    def __init__(self, in_ch, out_ch):\n        super(DoubleConv, self).__init__()\n        self.conv = nn.Sequential( \n            nn.Conv2d(in_ch, out_ch, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(out_ch),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(out_ch, out_ch, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(out_ch),\n            nn.ReLU(inplace=True)\n         )\n    def forward(self, x):\n        x = self.conv(x)\n        return x","1d9e3fae":"class InConv(nn.Module):\n    def __init__(self, in_ch, out_ch):\n        super(InConv, self).__init__()\n        self.conv = DoubleConv(in_ch, out_ch)\n    def forward(self, x):\n        x = self.conv(x)\n        return x","868e2d7b":"class Down(nn.Module):\n    def __init__(self, in_ch, out_ch):\n        super(Down, self).__init__()\n        self.mpconv = nn.Sequential( \n            nn.MaxPool2d(2,2),\n            DoubleConv(in_ch, out_ch)\n         )\n    def forward(self, x):\n        x = self.mpconv(x)\n        return x","9acba02f":"class Up(nn.Module):\n    def __init__(self, in_ch, out_ch):\n        super(Up, self).__init__()\n        self.up = nn.ConvTranspose2d(in_ch \/\/ 2, in_ch \/\/ 2, kernel_size=2, stride=2)\n        self.conv = DoubleConv(in_ch, out_ch)\n    def forward(self, x1, x2):\n        x1 = self.up(x1)\n        x = torch.cat([x2, x1], dim=1)\n        x = self.conv(x)\n        return x","3a570cd9":"class OutConv(nn.Module):\n    def __init__(self, in_ch, out_ch):\n        super(OutConv, self).__init__()\n        self.conv = nn.Conv2d(in_ch, out_ch, 1)\n        self.sigmoid = nn.Sigmoid()\n    def forward(self, x):\n        x = self.conv(x)\n        x = self.sigmoid(x)\n        return x","be4ef5f6":"class UNet(nn.Module):\n    def __init__(self, in_channels, num_classes):\n        super(UNet, self).__init__()\n        self.inc = InConv(in_channels, 64)\n        self.down1 = Down(64, 128)\n        self.down2 = Down(128, 256)\n        self.down3 = Down(256, 512)\n        self.down4 = Down(512, 512)\n        self.up1 = Up(1024, 256)\n        self.up2 = Up(512, 128)\n        self.up3 = Up(256, 64)\n        self.up4 = Up(128, 64)\n        self.outc = OutConv(64, num_classes)\n    def forward(self, x):\n        x1 = self.inc(x)\n        x2 = self.down1(x1)\n        x3 = self.down2(x2)\n        x4 = self.down3(x3)\n        x5 = self.down4(x4)\n        x = self.up1(x5, x4)\n        x = self.up2(x, x3)\n        x = self.up3(x, x2)\n        x = self.up4(x, x1)\n        x = self.outc(x)\n        return x","4ff2f778":"def train_loop(model, optimizer, criterion, train_loader, device=Config.device):\n    running_loss = 0\n    model.train()\n    pbar = tqdm(train_loader, desc='Iterating over train data')\n    for imgs, masks in pbar:\n        # pass to device\n        imgs = imgs.to(device)\n        masks = masks.to(device)\n        # forward\n        out = model(imgs)\n        loss = criterion(out, masks)\n        running_loss += loss.item()*imgs.shape[0] \n        # optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n    running_loss \/= len(train_loader.sampler)\n    return running_loss","34b52921":"def eval_loop(model, criterion, eval_loader, device=Config.device):\n    running_loss = 0\n    model.eval()\n    with torch.no_grad():\n        accuracy, f1_scores = [], []\n        pbar = tqdm(eval_loader, desc='Iterating over evaluation data')\n        for imgs, masks in pbar:\n            # pass to device\n            imgs = imgs.to(device)\n            masks = masks.to(device)\n            # forward\n            out = model(imgs)\n            loss = criterion(out, masks)\n            running_loss += loss.item()*imgs.shape[0]\n            # calculate predictions using output\n            predicted = (out > 0.5).float()\n            predicted = predicted.view(-1).cpu().numpy()\n            labels = masks.view(-1).cpu().numpy()\n            accuracy.append(accuracy_score(labels, predicted))\n            f1_scores.append(f1_score(labels, predicted))\n    acc = sum(accuracy)\/len(accuracy)\n    f1 = sum(f1_scores)\/len(f1_scores)\n    running_loss \/= len(eval_loader.sampler)\n    return {\n        'accuracy':acc,\n        'f1_macro':f1, \n        'loss':running_loss}","ca64c68e":"def train(model, optimizer, criterion, train_loader, valid_loader,\n          device=Config.device, \n          num_epochs=Config.epochs, \n          valid_loss_min=np.inf):\n    \n    for e in range(num_epochs):\n        # train for epoch\n        train_loss = train_loop(\n            model, optimizer, criterion, train_loader, device=device)\n        # evaluate on validation set\n        metrics = eval_loop(\n            model, criterion, valid_loader, device=device\n        )\n        # show progress\n        print_string = f'Epoch: {e+1} '\n        print_string+= f'TrainLoss: {train_loss:.5f} '\n        print_string+= f'ValidLoss: {metrics[\"loss\"]:.5f} '\n        print_string+= f'ACC: {metrics[\"accuracy\"]:.5f} '\n        print_string+= f'F1: {metrics[\"f1_macro\"]:.3f}'\n        print(print_string)\n\n        # save the model \n        if metrics[\"loss\"] <= valid_loss_min:\n            torch.save(model.state_dict(), 'UNet.pt')\n            valid_loss_min = metrics[\"loss\"]","2b270f6d":"set_seed(Config.seed)\nmodel = UNet(Config.input_ch, Config.output_ch).to(Config.device)\noptimizer = optim.Adam(model.parameters(), lr=Config.learning_rate)\ncriterion = nn.BCELoss()\ntrain(model, optimizer, criterion, train_loader, valid_loader)","8fab46e0":"# Load the latest model\nmodel.load_state_dict(torch.load('UNet.pt'))\nmetrics = eval_loop(model, criterion, test_loader)\nprint('accuracy:', metrics['accuracy'])\nprint('f1 macro:', metrics['f1_macro'])\nprint('test loss:', metrics['loss'])","fa7cd56a":"plot_predictions(model, 59)\nplot_predictions(model, 123)\nplot_predictions(model, 246)\nplot_predictions(model, 346)","f3f96f0e":"# **Custom Transformations**","b279346b":"## **Train, test and validation split**","3bdd8ab7":"# **Helper functions**","64fcf512":"# **Loading and exploring the data**","a2f3b995":"# **Train loop**","997f92c8":"# **Define the model**","4ae9b5b9":"# **Evaluation loop**","c5ef2a4d":"# **Importing the required libraries**","ab568a4e":"# **Train the model**","940b18b2":"# **Setup Config class**","d5db135a":"# **Data transformation and loaders**","69cf7bcf":"# **Dataset class**","1e06be21":"# **Visualizing the results**","5f0b906d":"# **Model Evaluation**","99cceaa5":"# **Visualization of the images and the masks**"}}