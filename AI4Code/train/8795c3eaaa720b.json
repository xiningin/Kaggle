{"cell_type":{"b1b0542f":"code","a23ffb11":"code","f14be85d":"code","d735281a":"code","284c566f":"code","669841f2":"code","33540ee4":"code","b059a4e5":"code","9451693a":"code","94813eee":"code","b91abde3":"code","841c0cf3":"code","7c56977f":"code","26dd3a5e":"code","4ff10608":"code","7b45b413":"code","0226c307":"code","f37882a5":"code","a815a6ed":"code","7abf1077":"code","a34a7c4b":"code","582f188e":"code","2a71ca14":"code","b4f87079":"code","bbaa1975":"code","e86eed99":"code","4b64d253":"markdown","01114b3a":"markdown","bb556839":"markdown","6e7bd749":"markdown","232b3ac2":"markdown","1000c237":"markdown","9e23c62d":"markdown"},"source":{"b1b0542f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.layers import LSTM,Dense,Dropout\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.dates as mdates\nfrom sklearn import linear_model","a23ffb11":"df_final = pd.read_csv(\"..\/input\/stock-price-edatime-series-analysis\/individual_stocks_5yr\/GOOGL_data.csv\",na_values=['null'],index_col='date',parse_dates=True,infer_datetime_format=True)\ndf_final.head()","f14be85d":"df_final.drop(df_final.columns[[5]], axis=1, inplace=True)\ndf_final.head()","d735281a":"df_final.shape","284c566f":"df_final['close'].plot()","669841f2":"D = df_final.drop(['close'],axis=1)","33540ee4":"D.corrwith(df_final['close']).plot.bar(\n        figsize = (20, 10), title = \"Correlation with Close Feature\", fontsize = 20,\n        rot = 90, grid = True)","b059a4e5":"#We can see that all other features except volume are positively correlated\ntest = df_final\n# Target column\ntarget = pd.DataFrame(test['close'])\ndisplay(test.head())","9451693a":"feature_columns = ['open', 'high', 'low', 'volume']\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nfeature_minmax_transform_data = scaler.fit_transform(test[feature_columns])\nfeature_minmax_transform = pd.DataFrame(columns=feature_columns, data=feature_minmax_transform_data, index=test.index)\nfeature_minmax_transform.head()","94813eee":"print('Shape of features : ', feature_minmax_transform.shape)\nprint('Shape of target : ', target.shape)","b91abde3":"target = target.shift(-1)\nvalidation_y = target[-100:-1]\ntarget = target[:-100]","841c0cf3":"validation_X = feature_minmax_transform[-100:-1]\nfeature_minmax_transform = feature_minmax_transform[:-100]\ndisplay(validation_X.tail())\ndisplay(validation_y.tail())","7c56977f":"print('Shape of features : ', feature_minmax_transform.shape)\nprint('Shape of target : ', target.shape)\ndisplay(target.tail())","26dd3a5e":"ts_split= TimeSeriesSplit(n_splits=10)\nfor train_index, test_index in ts_split.split(feature_minmax_transform):\n        X_train, X_test = feature_minmax_transform[:len(train_index)], feature_minmax_transform[len(train_index): (len(train_index)+len(test_index))]\n        y_train, y_test = target[:len(train_index)].values.ravel(), target[len(train_index): (len(train_index)+len(test_index))].values.ravel()","4ff10608":"X_train.shape","7b45b413":"y_train.shape","0226c307":"X_test.shape","f37882a5":"y_test.shape","a815a6ed":"X_train =np.array(X_train)\nX_test =np.array(X_test)\n\nX_tr_t = X_train.reshape(X_train.shape[0], 1, X_train.shape[1])\nX_tst_t = X_test.reshape(X_test.shape[0], 1, X_test.shape[1])","7abf1077":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.layers import LSTM\nK.clear_session()\nmodel_lstm = Sequential()\nmodel_lstm.add(LSTM(16, input_shape=(1, X_train.shape[1]), activation='relu', return_sequences=False))\nmodel_lstm.add(Dense(1))\nmodel_lstm.compile(loss='mean_squared_error', optimizer='adam')\nearly_stop = EarlyStopping(monitor='loss', patience=5, verbose=1)\nhistory_model_lstm = model_lstm.fit(X_tr_t, y_train, epochs=200, batch_size=8, verbose=1, shuffle=False, callbacks=[early_stop])","a34a7c4b":"y_pred_test_lstm = model_lstm.predict(X_tst_t)\ny_train_pred_lstm = model_lstm.predict(X_tr_t)\nprint(\"The R2 score on the Train set is:\\t{:0.3f}\".format(r2_score(y_train, y_train_pred_lstm)))\nr2_train = r2_score(y_train, y_train_pred_lstm)\n\nprint(\"The R2 score on the Test set is:\\t{:0.3f}\".format(r2_score(y_test, y_pred_test_lstm)))\nr2_test = r2_score(y_test, y_pred_test_lstm)","582f188e":"score_lstm= model_lstm.evaluate(X_tst_t, y_test, batch_size=1)","2a71ca14":"print('LSTM: %f'%score_lstm)","b4f87079":"y_pred_test_LSTM = model_lstm.predict(X_tst_t)","bbaa1975":"plt.plot(y_test, label='True')\nplt.plot(y_pred_test_LSTM, label='LSTM')\nplt.title(\"LSTM's_Prediction\")\nplt.xlabel('Observation')\nplt.ylabel('INR_Scaled')\nplt.legend()\nplt.show()","e86eed99":"from sklearn import metrics\nprint('Avg. error in predicting score =',metrics.mean_absolute_error(y_test,y_pred_test_lstm))","4b64d253":"# **Evaluation of lstm model**","01114b3a":"# **Plotting the close column**","bb556839":"# **Correlating the features with close**","6e7bd749":"# **Plotting the predictions**","232b3ac2":"# **Model making**","1000c237":"# **Splitting into training and testing sets**","9e23c62d":"# **Processing the data**"}}