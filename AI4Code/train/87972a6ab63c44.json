{"cell_type":{"978941f9":"code","763fc6a5":"code","9a761a61":"code","459029da":"code","fd393d44":"code","bf3d6096":"code","ea6a0ab2":"code","508a49d1":"code","bcdb0fb9":"code","3dc391c8":"code","162b5d32":"code","28ca250c":"code","788d7a81":"markdown","8540fcec":"markdown","87686b9b":"markdown"},"source":{"978941f9":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n##for dirname, _, filenames in os.walk('\/kaggle\/input'):\n  ##  for filename in filenames:\n    ##    print(os.path.join(dirname, filename))\nimport cv2\n\nimport tensorflow.keras.layers as Layers\n#from Layers import Dense,Flatten,Dropout,Conv2D,MaxPool2D\nimport tensorflow.keras.activations as Actications\nimport tensorflow.keras.models as Models\nimport tensorflow.keras.optimizers as Optimizer\nimport tensorflow.keras.metrics as Metrics\nimport tensorflow.keras.utils as Utils\nfrom keras.utils.vis_utils import model_to_dot\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import confusion_matrix as CM\nfrom random import randint\nfrom IPython.display import SVG\nimport matplotlib.gridspec as gridspec\n# Any results you write to the current directory are saved as output.","763fc6a5":"def get_images(directory):\n    Images = []\n    Labels = []  # 0 for Building , 1 for forest, 2 for glacier, 3 for mountain, 4 for Sea , 5 for Street\n    label = 0\n    \n    for labels in os.listdir(directory): #Main Directory where each class label is present as folder name.\n        if labels == 'glacier': #Folder contain Glacier Images get the '2' class label.\n            label = 2\n        elif labels == 'sea':\n            label = 4\n        elif labels == 'buildings':\n            label = 0\n        elif labels == 'forest':\n            label = 1\n        elif labels == 'street':\n            label = 5\n        elif labels == 'mountain':\n            label = 3\n        \n        for image_file in os.listdir(directory+labels): #Extracting the file name of the image from Class Label folder\n            image = cv2.imread(directory+labels+r'\/'+image_file) #Reading the image (OpenCV)\n            image = cv2.resize(image,(150,150)) #Resize the image, Some images are different sizes. (Resizing is very Important)\n            Images.append(image)\n            Labels.append(label)\n    \n    return (Images,Labels)\n\ndef get_classlabel(class_code):\n    labels = {2:'glacier', 4:'sea', 0:'buildings', 1:'forest', 5:'street', 3:'mountain'}\n    \n    return labels[class_code]","9a761a61":"Images, Labels = get_images('..\/input\/intel-image-classification\/seg_train\/seg_train\/') #Extract the training images from the folders.\n\nImages = np.array(Images) #converting the list of images to numpy array.\nLabels = np.array(Labels)","459029da":"model=Models.Sequential()\n\nmodel.add(Layers.Conv2D(200,kernel_size=(3,3),activation='relu',input_shape=(150,150,3)))\n#model.add(Layers.Conv2D(200,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.MaxPool2D(2,2))\nmodel.add(Layers.Dropout(0.5))\nmodel.add(Layers.Conv2D(150,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.MaxPool2D(2,2))\n#model.add(Layers.Conv2D(120,kernel_size=(3,3),activation='relu'))\n#model.add(Layers.Dropout(0.5))\nmodel.add(Layers.Conv2D(100,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.MaxPool2D(2,2))\nmodel.add(Layers.Conv2D(80,kernel_size=(3,3),activation='relu',input_shape=(150,150,3)))\nmodel.add(Layers.Dropout(0.5))\nmodel.add(Layers.Flatten())\nmodel.add(Layers.Dense(180, activation='relu'))\n\nmodel.add(Layers.Dense(100, activation='relu'))\nmodel.add(Layers.Dense(50, activation='relu'))\nmodel.add(Layers.Dropout(0.5))\nmodel.add(Layers.Dense(6, activation='softmax'))\n","fd393d44":"model.summary()\nmodel.compile(optimizer = Optimizer.Adam(lr=0.0001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])","bf3d6096":"trained = model.fit(Images,Labels,epochs=35,validation_split=0.30)\n","ea6a0ab2":"test_images,test_labels = get_images('..\/input\/intel-image-classification\/seg_test\/seg_test\/')\ntest_images = np.array(test_images)\ntest_labels = np.array(test_labels)\nmodel.evaluate(test_images,test_labels, verbose=1)","508a49d1":"model2=Models.Sequential()\n\nmodel2.add(Layers.Conv2D(200,kernel_size=(3,3),activation='relu',input_shape=(150,150,3)))\nmodel2.add(Layers.Conv2D(180,kernel_size=(3,3),activation='relu'))\nmodel2.add(Layers.MaxPool2D(2,2))\nmodel2.add(Layers.Dropout(0.5))\nmodel2.add(Layers.Conv2D(150,kernel_size=(3,3),activation='relu'))\nmodel2.add(Layers.MaxPool2D(2,2))\nmodel2.add(Layers.Conv2D(120,kernel_size=(3,3),activation='relu'))\nmodel2.add(Layers.Dropout(0.5))\nmodel2.add(Layers.Conv2D(100,kernel_size=(3,3),activation='relu'))\nmodel2.add(Layers.MaxPool2D(2,2))\nmodel2.add(Layers.Conv2D(80,kernel_size=(3,3),activation='relu',input_shape=(150,150,3)))\nmodel2.add(Layers.Dropout(0.5))\nmodel2.add(Layers.Flatten())\nmodel2.add(Layers.Dense(180, activation='relu'))\n\nmodel2.add(Layers.Dense(100, activation='relu'))\nmodel2.add(Layers.Dense(30, activation='relu'))\nmodel2.add(Layers.Dropout(0.5))\nmodel2.add(Layers.Dense(6, activation='softmax'))\nmodel2.summary()\nmodel2.compile(optimizer = Optimizer.Adam(lr=0.0001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])","bcdb0fb9":"trained2 = model2.fit(Images,Labels,epochs=35,validation_split=0.30)\n","3dc391c8":"#test_images,test_labels = get_images('..\/input\/intel-image-classification\/seg_test\/seg_test\/')\n#test_images = np.array(test_images)\n#test_labels = np.array(test_labels)\nmodel2.evaluate(test_images,test_labels, verbose=1)","162b5d32":"pred_images,no_labels = get_images('..\/input\/intel-image-classification\/seg_pred\/')\npred_images = np.array(pred_images)\npred_images.shape\n\n","28ca250c":"fig = plt.figure(figsize=(60, 60))\nouter = gridspec.GridSpec(4, 4, wspace=0.2, hspace=0.3)\n\nfor i in range(16):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 2,subplot_spec=outer[i], wspace=0.1, hspace=0.1)\n    rnd_number = randint(0,len(pred_images))\n    pred_image = np.array([pred_images[rnd_number]])\n    pred_class = get_classlabel(model2.predict_classes(pred_image)[0])\n    pred_prob = model2.predict(pred_image).reshape(6)\n    for j in range(2):\n        if (j%2) == 0:\n            ax = plt.Subplot(fig, inner[j])\n            ax.imshow(pred_image[0])\n            ax.set_title(pred_class)\n            ax.set_xticks([])\n            ax.set_yticks([])\n            fig.add_subplot(ax)\n        else:\n            ax = plt.Subplot(fig, inner[j])\n            ax.bar([\" Building\",\"forest\",\"glacier\",\"mountain\",\"Sea\",\"Street\"],pred_prob)\n            fig.add_subplot(ax)\n\n\nfig.show()","788d7a81":"****This is just a demo notebook and also my first. If you are seeing this notebook, then you will understand that I am a beginner** and here to learn. Any advice will be appreciated in the comments. Thank you in advance!******","8540fcec":"We can do better than that.\n","87686b9b":"**We see that model2 is working better\n**"}}