{"cell_type":{"ec31dd5c":"code","eee892a4":"code","9c58090e":"code","5f6f91d4":"code","6998a937":"code","555c4532":"code","ab4619b6":"code","09195f26":"code","ac504ca9":"code","0cc40cac":"code","b385158b":"code","1607c039":"code","b75ff021":"code","59dea5b3":"code","72f41eca":"code","a8844009":"markdown","6d6fbdb4":"markdown","be211285":"markdown","30dc0aba":"markdown","02964762":"markdown","6d56cd7a":"markdown","23d300c2":"markdown","e64f250d":"markdown","e61ad670":"markdown","27e9e5d2":"markdown","5de4de21":"markdown","62a8682e":"markdown","416c45ef":"markdown","70f50f58":"markdown"},"source":{"ec31dd5c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualization tools\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport folium\nfrom folium.plugins import HeatMap\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eee892a4":"df=pd.read_csv(\"..\/input\/crimes-in-boston\/crime.csv\",encoding = \"ISO-8859-1\")","9c58090e":"df.sample(5)","5f6f91d4":"df.info()","6998a937":"df.isnull().sum()","555c4532":"import missingno as msno\nmsno.matrix(df)\nplt.show()","ab4619b6":"df.columns","09195f26":"df.drop(columns=['INCIDENT_NUMBER','OFFENSE_CODE','SHOOTING'],inplace=True)","ac504ca9":"plt.figure(figsize=(25,15))\nax = sns.countplot(x=\"HOUR\", data=df,\n                   facecolor=(0, 0, 0, 0),\n                   linewidth=5,\n                   edgecolor=sns.color_palette(\"dark\", 24))","0cc40cac":"df2 = pd.DataFrame(columns = ['Offenses'])\ndf2[\"Offenses\"]=[each for each in df.OFFENSE_CODE_GROUP.unique()]\ndf2[\"Count\"]=[len(df[df.OFFENSE_CODE_GROUP==each]) for each in df2.Offenses]\ndf2=df2.sort_values(by=['Count'],ascending=False)\n\nplt.figure(figsize=(25,15))\nsns.barplot(x=df2.Offenses.head(50), y=df2.Count.head(50))\nplt.xticks(rotation= 90)\nplt.xlabel('Offenses')\nplt.ylabel('Count')\nplt.show()","b385158b":"x = df.DAY_OF_WEEK\ny = df.HOUR\n\nfig = go.Figure(go.Histogram2d(\n        x=x,\n        y=y\n    ))\nfig.show()","1607c039":"labels = df.DAY_OF_WEEK.unique()\nvalues=[]\nfor each in labels:\n    values.append(len(df[df.DAY_OF_WEEK==each]))\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","b75ff021":"fig = px.scatter_mapbox(df[df[\"OFFENSE_CODE_GROUP\"]==\"Service\"], lat=\"Lat\", lon=\"Long\", hover_name=\"HOUR\", hover_data=[\"YEAR\", \"HOUR\"],\n                        color_discrete_sequence=[\"fuchsia\"], zoom=10, height=600)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","59dea5b3":"vand=df[df[\"OFFENSE_CODE_GROUP\"]==\"Service\"].iloc[:,11:13]\nvand.rename(columns={'Lat':'latitude','Long':'longitude'}, inplace=True)\nvand.latitude.fillna(0, inplace = True)\nvand.longitude.fillna(0, inplace = True) \n\nBostonMap=folium.Map(location=[42.5,-71],zoom_start=10)\nHeatMap(data=vand, radius=16).add_to(BostonMap)\n\nBostonMap","72f41eca":"plt.figure(figsize=(25,15))\nwordcloud = WordCloud(\n                          background_color='black',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.OFFENSE_CODE_GROUP))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","a8844009":"# Data Cleaning\n### Removed unnecessary","6d6fbdb4":"# Plotly - Map Box ( Interactive )","be211285":"# Seaborn - Count Plot","30dc0aba":"# Word Cloud","02964762":"# Plotly - Donut Chart ( Interactive )","6d56cd7a":"### Reading Data","23d300c2":"# Crimes Data Analysis and Visualization (EDA)","e64f250d":"### Used Libraries\n1. NumPy (Numerical Python)\n2. Pandas\n3. Matplotlib\n4. Seaborn\n5. Plotly\n6. Missingno\n7. Folium","e61ad670":"# Seaborn - Bar Plot","27e9e5d2":"# Plotly - 2D Histogram ( Interactive )","5de4de21":"# Thank You\n\nIf you have any suggestion or advice or feedback, I will be very appreciated to hear them.\n### Also there are other kernels\n* [FIFA 19 Player Data Analysis and Visualization EDA](https:\/\/www.kaggle.com\/ismailsefa\/f-fa-19-player-data-analysis-and-visualization-eda)\n* [Crimes Data Analysis and Visualzation (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/crimes-data-analysis-and-visualzation-eda)\n* [Google Play Store Apps Data Analysis (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/google-play-store-apps-data-analysis-eda)\n* [World Happiness Data Analysis and Visualization](https:\/\/www.kaggle.com\/ismailsefa\/world-happiness-data-analysis-and-visualization)\n* [Used Cars Data Analysis and Visualization (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/used-cars-data-analysis-and-visualization-eda)\n* [Gender Recognition by Voice Machine Learning SVM](https:\/\/www.kaggle.com\/ismailsefa\/gender-recognition-by-voice-machine-learning-svm)\n* [Iris Species Classify Machine Learning KNN](https:\/\/www.kaggle.com\/ismailsefa\/iris-species-classify-machine-learning-knn)\n* [Breast Cancer Diagnostic Machine Learning R-Forest](https:\/\/www.kaggle.com\/ismailsefa\/breast-cancer-diagnostic-machine-learning-r-forest)\n* [Heart Disease Predic Machine Learning Naive Bayes](https:\/\/www.kaggle.com\/ismailsefa\/heart-disease-predic-machine-learning-naive-bayes)\n* [Mushroom Classify Machine Learning Decision Tree](https:\/\/www.kaggle.com\/ismailsefa\/mushroom-classify-machine-learning-decision-tree)","62a8682e":"### Content:\n1. Missingo - Missing Data\n2. Data Cleaning\n3. Seaborn - Count Plot\n4. Seaborn - Bar Plot\n5. Plotly - 2D Histogram\n6. Plotly - Donut Chart\n7. Plotly - Map Box\n8. Folium - Map\n9. Word Cloud","416c45ef":"# Folium - Map","70f50f58":"# Missingno - Missing Data"}}