{"cell_type":{"1912fe70":"code","0126f1df":"code","49f6397a":"code","8c3cfedf":"code","f9bdae53":"code","06962dad":"code","9e45350a":"code","6e6b9031":"code","425cc872":"code","584e77d5":"code","4f78cf48":"code","609d518d":"code","1030d775":"code","3036d6ed":"code","f30cc93e":"code","daa57c57":"code","887bc8fe":"code","90e1a3b9":"code","ce841ac2":"code","074628d4":"code","cb2cab8a":"code","3fc8e753":"code","eaa618c6":"code","c0354ed8":"code","3a245600":"code","ea05279b":"code","ca23641a":"code","4b52ef1a":"code","c38b4771":"code","54c7a542":"code","63a34e41":"code","136700af":"code","ed816194":"code","df8b5e0a":"code","8201204e":"code","0f492b07":"code","5fb99ea7":"code","71e50e07":"code","a3bd0c6c":"code","ab402791":"code","2b8e5ee7":"code","cdd0336d":"code","9e81177d":"code","78f7ca70":"code","b6d50a66":"code","385b8ad3":"code","1b43d6f3":"code","0367a17a":"code","60bdd016":"code","7268f538":"code","89e13a8c":"code","e66e1fb7":"code","5e5b2853":"code","95ebc788":"markdown","47f25582":"markdown","157fab1f":"markdown","12b90269":"markdown","5749855a":"markdown","06d72c24":"markdown","c55d6239":"markdown","2cd653f0":"markdown","5279e312":"markdown","41266a71":"markdown","367f4278":"markdown","85af238d":"markdown","a1afa0fb":"markdown"},"source":{"1912fe70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0126f1df":"!pip install chart_studio","49f6397a":"import seaborn as sns # visualization library\nimport matplotlib.pyplot as plt # visualization library\nimport chart_studio.plotly as py # visualization library\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings        \nwarnings.filterwarnings(\"ignore\")\nplt.style.use('ggplot') ","8c3cfedf":"df = pd.read_csv('..\/input\/world-war-ii\/operations.csv')\ndf_loc = pd.read_csv('..\/input\/weatherww2\/Weather Station Locations.csv')\ndf_weather = pd.read_csv('..\/input\/weatherww2\/Summary of Weather.csv')","f9bdae53":"df.shape","06962dad":"df.head()","9e45350a":"df.isnull().sum()","6e6b9031":"df = df[df.Country.notnull()]","425cc872":"df = df[df['Target Longitude'].notnull()]\ndf = df[df['Takeoff Longitude'].notnull()]","584e77d5":"df.shape","4f78cf48":"drop_columns = ['Mission ID','Unit ID','Target ID','Altitude (Hundreds of Feet)','Airborne Aircraft',\n             'Attacking Aircraft', 'Bombing Aircraft', 'Aircraft Returned',\n             'Aircraft Failed', 'Aircraft Damaged', 'Aircraft Lost',\n             'High Explosives', 'High Explosives Type','Mission Type',\n             'High Explosives Weight (Pounds)', 'High Explosives Weight (Tons)',\n             'Incendiary Devices', 'Incendiary Devices Type',\n             'Incendiary Devices Weight (Pounds)',\n             'Incendiary Devices Weight (Tons)', 'Fragmentation Devices',\n             'Fragmentation Devices Type', 'Fragmentation Devices Weight (Pounds)',\n             'Fragmentation Devices Weight (Tons)', 'Total Weight (Pounds)',\n             'Total Weight (Tons)', 'Time Over Target', 'Bomb Damage Assessment','Source ID']\n\ndf.drop(drop_columns, axis=1, inplace=True)\ndf = df[df.iloc[:,8]!=\"4248\"] # drop this takeoff latitude \ndf = df[df.iloc[:,9]!=1355]   # drop this takeoff longitude","609d518d":"df.head()","1030d775":"# Extract required columns from the other two dataframes\n\ndf_loc = df_loc.loc[:, [\"WBAN\",\"NAME\",\"STATE\/COUNTRY ID\",\"Latitude\",\"Longitude\"]]\ndf_weather = df_weather.loc[:, [\"STA\", \"Date\", \"MeanTemp\"]]","3036d6ed":"df.info()","f30cc93e":"df_loc.info()","daa57c57":"df_weather.info()","887bc8fe":"plt.figure(figsize=(15,10))\nprint(df['Country'].value_counts())\nsns.countplot(df['Country'])\nplt.title('Frequency of each country in the dataset')\nplt.show()","90e1a3b9":"# Top target countries\nprint(df['Target Country'].value_counts()[:10])\nsample_df = df['Target Country'].value_counts()[:10]\nplt.figure(figsize=(15, 10))\nsns.barplot(x=sample_df.index, y=sample_df.values)\nplt.xlabel('Frequency')\nplt.ylabel('Country')\nplt.show()","ce841ac2":"# Producing the result for aircraft series using plotly\nsample_df = df['Aircraft Series'].value_counts()[:10]\nprint(sample_df)\ndata = go.Bar(x=sample_df.index, y=sample_df.values, hoverinfo='text', marker=dict(color='rgba(123, 234, 213, 0.5)', line=dict(color='rgb(0,0,0)', width=1.2)))\n\nlayout = dict(title='Frequency of aircraft series in dataset')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","074628d4":"df.Country.unique()","cb2cab8a":"df['color'] = \"\"\ndf.color[df.Country == \"USA\"] = \"rgb(0,116,217)\"\ndf.color[df.Country == \"GREAT BRITAIN\"] = \"rgb(255,65,54)\"\ndf.color[df.Country == \"NEW ZEALAND\"] = \"rgb(133,20,75)\"\ndf.color[df.Country == \"SOUTH AFRICA\"] = \"rgb(255,133,27)\"","3fc8e753":"# Defining the plot attributes and marker point attributes\ndata = dict(type='scattergeo', lon=df['Takeoff Longitude'], lat=df['Takeoff Latitude'],\n           hoverinfo='text',\n           text = \"Country: \"+df.Country+\" TakeOff Location: \"+df['Takeoff Location']+\" Takeoff Base: \"+df['Takeoff Base'],\n           mode='markers',\n           marker=dict(\n               sizemode='area',\n               sizeref=1,\n               size=10,\n               line=dict(width=1, color='white'),\n               color=df['color'],\n               opacity = 0.7))\n\n# Defining the layout \n# This includes - the title, hovering and the map attributes\nlayout = dict(title='Takeoff bases of each country',\n             hovermode='closest',\n             geo=dict(showframe=False, showland=True, showcoastlines=True,showcountries=True,\n                     countrywidth=1, projection=dict(type='mercator'),\n                     landcolor='rgb(200, 200, 200)',\n                     subunitwidth=1,\n                     showlakes=True,\n                     lakecolor='rgb(255, 255, 255)',\n                     countrycolor='rgb(5, 5, 5)')\n             )\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=800)\niplot(fig)","eaa618c6":"df.iloc[0, 8], df.iloc[0, 15]","c0354ed8":"df[:20]","3a245600":"df.iloc[:, 9]","ea05279b":"df.iloc[0, 16]","ca23641a":"# Plotting the take-off areas for bombing\nbombers = [dict(type='scattergeo',\n              lon=df['Takeoff Longitude'],\n              lat=df['Takeoff Latitude'],\n              hoverinfo='text',\n              text = \"Country: \"+df.Country+\" TakeOff Location: \"+df['Takeoff Location']+\" Takeoff Base: \"+df['Takeoff Base'],\n              mode='markers', marker=dict(size=5, color=df['color'], line = dict(width=1, color='white')))\n          ]\n           \n# Plotting the attacked cities\n\ntargets = [dict(type='scattergeo',\n              lon=df['Target Longitude'],\n              lat=df['Target Latitude'],\n              hoverinfo='text',\n              text='Target country: '+df['Target Country']+' Target City: '+df['Target City'],\n              mode='markers',\n              marker=dict(\n              size=1,\n              color='red',\n              line=dict(width=0.5, color='red')))\n          ]\n\n# Mapping out a path from take-off point to attacked city\npath = []\n# For each row in the dataset\nfor i in range(len(df['Target Longitude'])):\n    path.append(\n        dict(\n            type='scattergeo',\n            # Takeoff longitute -> Target longitude\n            lon=[df.iloc[i, 9], df.iloc[i, 16]],\n            # Takeoff latitude -> Target latitude\n            lat=[df.iloc[i, 8], df.iloc[i, 15]],\n            mode='lines',line=dict(width=0.7,color='black'),\n            opacity=0.6\n        )\n    )\n    \nlayout = dict(title='Bombing path from Bunker to Target',\n             hovermode='closest',\n             geo=dict(showframe=False, showland=True, showcoastlines=True,showcountries=True,\n                     countrywidth=1, projection=dict(type='mercator'),\n                     landcolor='rgb(200, 200, 200)',\n                     subunitwidth=1,\n                     showlakes=True,\n                     lakecolor='rgb(255, 255, 255)',\n                     countrycolor='rgb(5, 5, 5)')\n             )\n\nfig = dict(data=path+bombers+targets, layout=layout)\niplot(fig)","4b52ef1a":"print(df['Theater of Operations'].value_counts())\nplt.figure(figsize=(15, 5))\nsns.countplot(df['Theater of Operations'])\nplt.title('Frequency of operations')\nplt.show()","c38b4771":"# Location of weather stations\ndata = dict(type='scattergeo',\n           lon=df_loc.Longitude,\n           lat = df_loc.Latitude,\n           hoverinfo='text',\n           text='Name: '+df_loc.NAME+\" Country: \"+df_loc['STATE\/COUNTRY ID'],\n           mode='markers',\n           marker=dict(\n               sizemode='area',\n               sizeref=1,\n               size=8,\n               line=dict(width=1, color='white'),\n               color='blue',\n               opacity=0.7\n           )\n        )\n\nlayout = dict(title='Weather Station locations', hovermode='closest',\n             geo=dict(showframe=False, showland=True, showcoastlines=True,showcountries=True,\n                     countrywidth=1, projection=dict(type='mercator'),\n                     landcolor='rgb(200, 200, 200)',\n                     subunitwidth=1,\n                     showlakes=True,\n                     lakecolor='rgb(255, 255, 255)',\n                     countrycolor='rgb(5, 5, 5)')\n             )\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=800)\niplot(fig)","54c7a542":"df_loc_id = df_loc[df_loc.NAME=='BINDUKURI'].WBAN\ndf_loc_id","63a34e41":"bin_weather = df_weather[df_weather.STA==32907]\nbin_weather['Date'] = pd.to_datetime(bin_weather['Date'])","136700af":"plt.figure(figsize=(15,10))\nplt.plot(bin_weather.Date, bin_weather.MeanTemp)\nplt.title('Mean temperature for Bindukuri')\nplt.xlabel('Date')\nplt.ylabel('Mean temperature')\nplt.show()","ed816194":"dff = pd.read_csv('..\/input\/world-war-ii\/operations.csv')\nprint(dff.shape)\ndff['Mission Date'] = pd.to_datetime(dff['Mission Date'], format=r'%m\/%d\/%Y')\ndff['year'] = dff['Mission Date'].dt.year\ndff['month'] = dff['Mission Date'].dt.month\nprint(dff.shape)\ndff = dff[dff[\"year\"]>=1943]\ndff = dff[dff[\"month\"]>=8]\nprint(dff.shape)","df8b5e0a":"dff['Mission Date'].isnull().sum()","8201204e":"dff = dff[dff['year']>=1943]\ndff = dff[dff['month']>=8]","0f492b07":"dff['month']","5fb99ea7":"dff['month'].unique()","71e50e07":"dff.shape","a3bd0c6c":"attack=\"USA\"\ntarget=\"BURMA\"\ncity = \"KATHA\"\n\n# We now have a dataset pertaining to all the dates when USA bombed Katha\ndff_s = dff[dff.Country==attack]\ndff_s = dff_s[dff_s['Target Country']==target]\ndff_s = dff_s[dff_s['Target City']==city]","ab402791":"dff_s.shape","2b8e5ee7":"l = []\na = []\nfor each in dff_s['Mission Date']:\n    # Extract the BIN (closest weather station to Katha) dataframe w.r.t the date\n    d = bin_weather[bin_weather.Date==each]\n    # Extract the temperature\n    l.append(d['MeanTemp'].values)\n\ndff_s['vals'] = l\nfor each in dff_s.vals.values:\n    # Add all temperatures to the list\n    # Converting it from a list of arrays into a list\n    a.append(each[0])","cdd0336d":"l[:10]","9e81177d":"a[:10]","78f7ca70":"trace = go.Scatter(\n    x = bin_weather.Date,\n    mode='lines',\n    y=bin_weather.MeanTemp,\n    marker=dict(color='rgba(12, 124, 32, 0.5)'),\n    name='Mean temperature'\n)\n\ntrace1 = go.Scatter(\n    x = dff_s['Mission Date'],\n    mode='markers',\n    y=a,\n    marker=dict(color='rgba(123,43,1, 0.9)'),\n    name='Bombing temperature'\n)\n\nlayout = dict(title='Mean temperatures at the weather temperature alongside bombings')\ndata = [trace, trace1]\nfig = dict(data=data, layout=layout)\niplot(fig)","b6d50a66":"plt.figure(figsize=(22, 10))\nplt.plot(bin_weather.Date, bin_weather.MeanTemp)\nplt.title(\"Mean temperature for the Bindukuri Area\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean temperature\")\nplt.show()\n\ntS = bin_weather.loc[:, ['Date', 'MeanTemp']]\ntS.index = tS.Date\ntSeries = tS.drop('Date', axis=1)","385b8ad3":"from statsmodels.tsa.stattools import adfuller\ndef adf_check(ts):\n    res = adfuller(ts, autolag='AIC')\n    print('Test statistic', res[0])\n    print('P-value', res[1])\n    print('Critical Value', res[4])\n    \ndef mean_std(ts):\n    rolling_mean = ts.rolling(6).mean()\n    rolling_std = ts.rolling(6).std()\n    plt.figure(figsize=(22, 10))\n    orig = plt.plot(ts, color='red', label='Time series')\n    mean = plt.plot(rolling_mean, color='Black', label='Rolling mean')\n    std = plt.plot(rolling_std, color='Green', label='Rolling STD')\n    plt.xlabel('Date')\n    plt.ylabel('Mean temperature')\n    plt.title('Rolling mean and standard deviation')\n    plt.legend()\n    plt.show()\n    \nadf_check(tSeries)\n# Our index is the date\nmean_std(tSeries.MeanTemp)","1b43d6f3":"moving_avg_ts = tSeries.rolling(6).mean()\nplt.figure(figsize=(15, 10))\norig = plt.plot(tSeries, color='red', label='Time series')\nmean = plt.plot(moving_avg_ts, color='Black', label='Rolling mean')\nplt.xlabel('Date')\nplt.ylabel('Mean temperature')\nplt.title('Mean Temp and Rolling mean')\nplt.legend()\nplt.show()","0367a17a":"moving_avg_ts_diff = tSeries-moving_avg_ts\nmoving_avg_ts_diff.dropna(inplace=True)\n\nadf_check(moving_avg_ts_diff)\nmean_std(moving_avg_ts_diff)","60bdd016":"tSeries_diff = tSeries-tSeries.shift()\nplt.figure(figsize=(15, 10))\nplt.plot(tSeries_diff)\nplt.title('Differencing the time series')\nplt.xlabel('Date')\nplt.ylabel('Differencing mean temp')\nplt.show()","7268f538":"tSeries_diff.dropna(inplace=True) # first value\nadf_check(tSeries_diff)\nmean_std(tSeries_diff.MeanTemp)","89e13a8c":"from statsmodels.tsa.stattools import acf, pacf\nacf_lag = acf(tSeries_diff, nlags=20)\npacf_lag = pacf(tSeries_diff, nlags=20, method='ols')\nplt.figure(figsize=(22, 10))\n\nplt.subplot(121)\nplt.plot(acf_lag)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(tSeries_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(tSeries_diff)),linestyle='--',color='gray')\nplt.title('Autocorrelation function')\n\nplt.subplot(122)\nplt.plot(pacf_lag)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(tSeries_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(tSeries_diff)),linestyle='--',color='gray')\nplt.title('Partial autocorrelation function')\nplt.tight_layout()\nplt.show()","e66e1fb7":"from statsmodels.tsa.arima_model import ARIMA\nfrom pandas import datetime\n\n# fit model\nmodel = ARIMA(tSeries, order=(1,0,1)) # (ARMA) = (1,0,1)\nmodel_fit = model.fit(disp=0)\n\nstart_index = datetime(1944, 6, 25)\nend_index = datetime(1945, 5, 31)\nforecast = model_fit.predict(start=start_index, end=end_index)\n\n# visualization\nplt.figure(figsize=(22,10))\nplt.plot(bin_weather.Date,bin_weather.MeanTemp,label = \"original\")\nplt.plot(forecast,label = \"predicted\")\nplt.title(\"Time Series Forecast\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.legend()\nplt.show()","5e5b2853":"from sklearn.metrics import mean_squared_error\n# fit model\nmodel2 = ARIMA(tSeries, order=(1,0,1)) # (ARMA) = (1,0,1)\nmodel_fit2 = model2.fit(disp=0)\nforecast2 = model_fit2.predict()\nerror = mean_squared_error(tSeries, forecast2)\nprint(\"error: \" ,error)\n# visualization\nplt.figure(figsize=(22,10))\nplt.plot(bin_weather.Date,bin_weather.MeanTemp,label = \"original\")\nplt.plot(forecast2,label = \"predicted\")\nplt.title(\"Time Series Forecast\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.legend()\nplt.savefig('graph.png')\n\nplt.show()","95ebc788":"<h2>Converting a time series to be stationary<\/h2>\n\nThere are two major reasons behind non-stationarity of time series\n\n* Trend - Varying mean over time. We need a constant mena\n* Seasonality - Variations at a specific time, we need constant variations (i.e. constant std) for stationarity of time series.\n\n\nTo solve the constant mean problem - We can take moving averages. We have a window that takes the average over the past x samples. Here x is our window size.","47f25582":"Through the plot, we can see that the time series has seasonal variation. The mean is higher in the summer while lower in the winters. We will now check the stationarity using the following methods\n\n* **Plotting rolling-window stats** - We have a window with say window size 6, we find the rolling mean and variance to check stationary.\n\n* **Dickey-Fuller test** - The test comprises of a test statistic and some critical values for different confidence levels. If the test statistic is less than the critical value, we say that the time series is stationary.","157fab1f":"Now let us visualize the take-off bases. A country can contain a take-off base of another country. We will visualize each separate country with a color.","12b90269":"<h2>Exploratory data analysis<\/h2>","5749855a":"<h2>Forecasting a time series<\/h2>\n\nNow that we've covered two different techniques to avoid the trend and seasonality problem. We will now look at modeling our predictions. We will be using the time-series created by the differencing method\n\n\n**The ARIMA model** i.e. the auto-regressive integrated moving averages model consists of the following parts:\n* AR: Auto-regressive(p): These terms are just lags of dependent variables. Let us say p=3, then we will use x(t-1), x(t-2) and x(t-3) i.e. three terms to predict x(t)\n* I: Integrated (d): Number of non-seasonal differences. We take the first-order difference, we pass that variable and put d=0.\n* MA: Moving averages (q): MA terms are the lagged forecast errors in the prediction equation.\n\n**P, D and Q are parameters of the ARIMA model**. To choose there parameters, we will use two different plots:\n* Autocorrelation function (ACF): Measurement of correlation between time series and lagged version of time series\n* Partial autocorrelation function (PACF): Measurement of correlation between time series and lagged versions of time series, but after eliminating the variations already explained by the intervening comparisons.","06d72c24":"We hjave two dotted lines that refer to the confidence intervals. We use them to determine the P and Q values\n* P - The lag value where the PACF chart crosses upper confidence interval for first time - p=1\n\n* Q - The lag value where the ACF chart crosses the upper confidence interval for the first time q=1\n\nNow wee will use the configuration (1, 0, 1) as parameters of ARIMA model and predict","c55d6239":"We can see that the mean looks pretty constant now. The variance is also in the same boat.\nThe test statistic is now lesser than 1% critical values, implying that we can say with 99% confidence that the given series is stationary.\n\nWe have achieved stationarity with our time series. We also have one more method to avoid trend and seasonality that is the **Differencing method**. It takes a difference between a time series and a shifted time series.","2cd653f0":"We can see the temperature measurements from 1943 to 1945. The temperature oscillates  between 12-32 degrees. The winter month temperatures are lower than that of the summer months (as expected).","5279e312":"Now we will go for a more complex plot. We will map out the path from the take-off base, to the target location.","41266a71":"Now let us go through our results in detail\n\n* Our first critera for stationarity is a constant mean. We can see from above that our mean shifts between a big range. It is not constant.\n\n* The second criteria is constant variance. Our variance in the model looks nearly constant (we can assume it to be).\n\n* Third criteria is that our test statistic is lower than the critical value, as is the principle for hypothesis testing. Our test staistic is bigger that all of the aforementioned critical values (from 1% to 10%) therefore it is not stationary\n\nAll these point towards our time series being non-stationary, we will convert it to be so.","367f4278":"We can see that our mean value is approximately constant, alongside the variance. The test statistic is similar to the one predicted above, we can say with 99% confidence that we have a stationary series.","85af238d":"<h2>Time series predictions<\/h2>\n\nWe will be using the ARIMA model - AutoRegressive Integrated Moving average.\n\n**What is a time series** - It is a collection of data points collected at constant time intervals, which is time dependent. Most of the time series have a form of seasonality trend - for eg - Ice cream sales will be higher in summers than in winters. \n\n**Stationarity of time series** - There are three basic criterion for a time series to understand whether it is stationary or not. \n\n* Constant mean\n* Constant variance\n* Auto-covariance does not depend on time. It is covariance between time series and lagged time series.\n\nWe can visualize and check seasonality trends of our time series","a1afa0fb":"Let us focus on the US-BURMA war. USA managed to bomb Katha City in Burma from 1942-1945. The closest weather station to that location is BINDUKURI and has a temperature record from 1943 to 1945. \n\nLet us visualize the situation, after converting the relevant features into datetime objects"}}