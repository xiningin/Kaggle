{"cell_type":{"f0a64bc3":"code","6bbf05ca":"code","67079bc2":"code","4875e952":"markdown","a21e7a99":"markdown"},"source":{"f0a64bc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n#nihao hafasdofjlas1234123412341234uhaskladfjlaskjfasdjlk12j342421342\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6bbf05ca":"import psycopg2\nimport pandas as pd\n\nconnection = psycopg2.connect(user = \"username\",\n                                  password = \"password\",\n                                  host = \"127.0.0.1\",\n                                  port = \"5432\",\n                                  database = \"dn_name\")\ncursor = connection.cursor()\n\ntest_query = \"\"\"SELECT subject_id, hadm_id, admittime, dischtime, admission_type, diagnosis\nFROM admissions\n\"\"\"\n\ntest = pd.read_sql_query(test_query, connection)","67079bc2":"import numpy as np\n\n#Transposing Array\nI = np.transpose(b) #\u8f6c\u7f6e\u77e9\u9635\ni.T #\u8f6c\u7f6e\u77e9\u9635\n\n#Changing Array Shape\nb.ravel() #\u964d\u4e3a\u4e00\u7ef4\u6570\u7ec4\ng.reshape(3,-2) #\u91cd\u7ec4\n\n#Adding\/Removing Elements\nh.resize((2,6)) #\u8fd4\u56deshape(2,6)\nnp.append(h,g) #\u6dfb\u52a0\nnp.insert(a,1,5) #\u63d2\u5165\nnp.delete(a,[1]) #\u5220\u9664\n\n#Combining Arrays\nnp.concatenate((a,d), axis=0) #\u8fde\u7ed3\nnp.vstack((a,b)) #\u5782\u76f4\u5806\u53e0\nnp.r_[e,f] #\u5782\u76f4\u5806\u53e0\nnp.hstack((e,f)) #\u6c34\u5e73\u5806\u53e0\nnp.column_stack((a,d)) #\u521b\u5efa\u6c34\u5e73\u5806\u53e0\nnp.c_[a,d] ##\u521b\u5efa\u6c34\u5e73\u5806\u53e0","4875e952":"ceshi \n#meiyou tupian \n\n\nsafdljsaldfjas\n\naf\nasdfasla","a21e7a99":"fsadfasdfasdflals\n![nihao](https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_Song_Popularity_Prediction_\/main\/songs.jpg)"}}