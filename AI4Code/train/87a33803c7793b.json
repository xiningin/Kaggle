{"cell_type":{"93bb0403":"code","259e246f":"code","d5a7a68c":"code","7feefbdd":"code","055ea2a4":"code","5b574715":"code","066a2009":"code","dac40283":"code","31332bd4":"code","79f15593":"code","d0ba2ccb":"code","676fdca3":"code","3cbc9200":"code","64ad832d":"code","b4f8fb80":"code","6175961a":"code","b331c13f":"code","8cfe099c":"markdown","31b3d683":"markdown","45bdedc3":"markdown","a692e2c7":"markdown","1f422e4d":"markdown","48e169cd":"markdown","a7b4027a":"markdown","93c89245":"markdown","d2521485":"markdown","0868d282":"markdown","a97d0db0":"markdown","801b8611":"markdown","001391c9":"markdown","79229184":"markdown","abf0c0d3":"markdown","2cf469ff":"markdown"},"source":{"93bb0403":"import pandas as pd\ntrain = pd.read_csv('..\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('..\/input\/kakr-4th-competition\/test.csv')\nsubmission = pd.read_csv('..\/input\/kakr-4th-competition\/sample_submission.csv')","259e246f":"print(train.shape)\nprint(test.shape)\nprint(submission.shape)","d5a7a68c":"pip install pycaret","7feefbdd":"from pycaret.classification import *","055ea2a4":"train.head()","5b574715":"# 'voted' \uceec\ub7fc\uc774 \uc608\uce21 \ub300\uc0c1\uc774\ubbc0\ub85c target \uc778\uc790\uc5d0 \uba85\uc2dc\n# 'voted' column is the target variable\nclf = setup(data = train, target = 'income', silent = True)","066a2009":"best_3 = compare_models(sort = 'F1', n_select = 3)","dac40283":"blended = blend_models(estimator_list = best_3, fold = 5, method = 'soft')","31332bd4":"pred_holdout = predict_model(blended)","79f15593":"final_model = finalize_model(blended)","d0ba2ccb":"predictions = predict_model(final_model, data = test)","676fdca3":"predictions","3cbc9200":"submission['voted'] = predictions['Score']","64ad832d":"submission.loc[submission['voted'] >= 0.5, 'prediction'] = 1","b4f8fb80":"submission","6175961a":"del(submission['voted'])","b331c13f":"submission.to_csv('submission_proba_0.csv', index = False)","8cfe099c":"- predict_model \ud568\uc218\ub97c \ud1b5\ud574 \uc7ac\ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \ub300\ud68c\uc6a9 test set\uc5d0 \ub300\ud574 \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n- We will now use the re-trained model on the test set for the competition","31b3d683":"- \ud604\uc7ac\uae4c\uc9c0 \uc2e4\ud5d8\uc740 \uc8fc\uc5b4\uc9c4 train \ub370\uc774\ud130\ub97c \ub2e4\uc2dc \ud55c \ubc88 train \/ validation\uc73c\ub85c \ub098\ub220\uc11c \uc2e4\ud5d8\uc744 \ud55c \uac83\uc774\ubbc0\ub85c, \uc804\uccb4 train \ub370\uc774\ud130\uc5d0 \ud559\uc2b5\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \n- \ucd5c\uc801\uc758 \uc131\ub2a5\uc744 \uc704\ud574 \uc804\uccb4 \ub370\uc774\ud130\uc5d0 \ud559\uc2b5\uc744 \uc2dc\ucf1c\uc8fc\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \n\n------\n- Until now we have splitted the given train data into another train \/ validation sets to experiment. So the models are not trained on the full training data set.\n- We will train the model on the whole dataset for the most optimal performance. ","45bdedc3":"## \ub370\uc774\ud130 \uad6c\uc870 \ud655\uc778 (Checking the shapes of data)","a692e2c7":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 (Read Data)","1f422e4d":"- \ud559\uc2b5\ub41c 3\uac1c\uc758 \ubaa8\ub378\uc744 \uc559\uc0c1\ube14 \uc2dc\ud0a4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\ud655\ub960 \uac12\uc744 \uae30\uc900\uc73c\ub85c soft vote ensemble\uc744 \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4. ","48e169cd":"## \ubd84\ub958 \uc791\uc5c5\uc5d0 \ud544\uc6a9\ud55c \ud568\uc218 \ubd88\ub7ec\uc624\uae30 (Import methods for classification task)","a7b4027a":"## \uc2e4\ud5d8 \ud658\uacbd \uad6c\ucd95 (Setup the environment)\n\n- PyCaret\uc5d0\uc11c\ub294 \ubaa8\ub378 \ud559\uc2b5 \uc804 \uc2e4\ud5d8 \ud658\uacbd\uc744 \uad6c\ucd95 \ud574\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4. setup \ud568\uc218\ub97c \ud1b5\ud574 \ud658\uacbd\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n \n----\n\n- In PyCaret you have to setup the environment before experimenting with the models. It can be done by using 'setup' method. ","93c89245":"## \ubaa8\ub378 \ud559\uc2b5 \ubc0f \ube44\uad50 (Train models and compare)\n\n- \ud658\uacbd \uad6c\ucd95\uc744 \ud588\uc73c\ub2c8 PyCaret\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ubcf8 \ubaa8\ub378\uc5d0 \ub300\ud574 \ud559\uc2b5\ud558\uace0 \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n- compared_models \ud568\uc218\ub97c \ud1b5\ud574 15\uac1c\uc758 \uae30\ubcf8 \ubaa8\ub378\uc744 \ud559\uc2b5\ud558\uace0 \uc131\ub2a5\uc744 \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n- F1 \uae30\uc900\uc73c\ub85c \uc131\ub2a5\uc774 \uac00\uc7a5 \uc88b\uc740 3\uac1c\uc758 \ubaa8\ub378\uc744 \ucd94\ub824\ub0b4\uc5b4 \uc800\uc7a5\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ubcf8 \ub300\ud68c \ud3c9\uac00\uc9c0\ud45c\uac00 F1\uc774\uae30 \ub54c\ubb38\uc5d0 F1 \uae30\uc900\uc73c\ub85c \ubaa8\ub378\uc744 \uc120\uc815\ud569\ub2c8\ub2e4.\n-----\n- Now we have constructed the environment, we will now train and compare the default models provided in PyCaret\n- By using 'compare_models' method we can easily train and compare 15 default models provided in the package\n- We will select top 3 models in terms of F1, that is because the evaluation metric for this competition is F1","d2521485":"- \uac00\uc7a5 \uc88b\uc740 3\uac1c\uc758 \ubaa8\ub378\uc740 best_3 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.  ","0868d282":"## \ub300\ud68c\uc6a9 test set\uc5d0 \ub300\ud55c \uc608\uce21 (Predicting on test set for the competition)","a97d0db0":"## \ubaa8\ub378 \uc608\uce21 (Prediction)\n- \uad6c\ucd95\ub41c \uc559\uc0c1\ube14 \ubaa8\ub378\uc744 \ud1b5\ud574 \uc608\uce21\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n- setup \ud658\uacbd\uc5d0 \uc774\ubbf8 hold-out set\uc774 \uc874\uc7ac\ud558\ubbc0\ub85c \ud574\ub2f9 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc608\uce21\uc744 \ud558\uc5ec \ubaa8\ub378 \uc131\ub2a5\uc744 \ud655\uc778\ud558\uaca0\uc2b5\ub2c8\ub2e4. \n\n----\n- We will use the ensembled model on predicting unseen data.\n- There is already a hold-out set constucted on our environment so we will test on it to evaluate the performance.","801b8611":"## AutoML \uc608\uc81c (DACON \ub300\ud68c \uacf5\uc720\ucf54\ub4dc)\n**\ucd9c\ucc98 : https:\/\/dacon.io\/competitions\/official\/235647\/codeshare\/1701?page=1&dtype=recent&ptype=pub **\n\n","001391c9":"\uc774\ubc88 \ucf54\ub4dc\uc5d0\uc11c\ub294 AutoML \ud328\ud0a4\uc9c0\uc778 PyCaret\uc744 \ud65c\uc6a9\ud558\uc5ec \uc815\ud615\ub370\uc774\ud130 \ub300\ud68c\uc5d0 \ucc38\uc5ec\ud558\ub294 \uacfc\uc815\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Feature engineering, model tuning \uc5c6\uc774 \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub97c \uadf8\ub300\ub85c \ud65c\uc6a9\ud558\uc5ec default \ubaa8\ub378\uc744 \ud6c8\ub828\ud558\uace0 \uc608\uce21 \ud588\uc73c\ubbc0\ub85c, \ucd94\uac00 \uc791\uc5c5\uc744 \ud1b5\ud574 \ub192\uc740 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc904 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \n\n\uac1c\uc778\uc801\uc73c\ub85c PyCaret\uc740 \uc544\uc9c1\uae4c\uc9c0 single output\uc778 \ubb38\uc81c\uc5d0\ub294 \uc801\ud569\ud55c\ub370 multi output \ubb38\uc81c\uc5d0\ub294 \ubd80\uc801\ud569\ud55c\uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud639\uc2dc multi output \ubb38\uc81c\uc5d0\ub3c4 \uc798 \uc801\uc6a9\ub41c\ub2e4\uba74 \uc54c\ub824\uc8fc\uc138\uc694!\n\nIn this kernel we will use an AutoML package called PyCaret to enter data science competitions with structured data. I've used the given data without any feature engineering and trained the models without model tuning, so I expect better scores if we engineer additional feature and tune the models. \n\nI think PyCaret is approporiate for single output prediction tasks, but I still haven't figured out easier way to implement it on multi output prediction tasks. Would appreciate it if anyone could share tutorial code on applying PyCaret on multi output prediction task. ","79229184":"## \uc804\uccb4 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc7ac\ud559\uc2b5 (Re-training the model on whole data)","abf0c0d3":"## \ubaa8\ub378 \uc559\uc0c1\ube14 (Model Ensemble)","2cf469ff":"## PyCaret \ud328\ud0a4\uc9c0 \uc124\uce58 (Install PyCaret)"}}