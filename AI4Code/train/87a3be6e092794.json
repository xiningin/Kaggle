{"cell_type":{"f441d43c":"code","ac4993df":"code","113a69ae":"code","f62e4b28":"markdown","bb86f5f6":"markdown","07570682":"markdown","7ff1df87":"markdown","41ef712f":"markdown"},"source":{"f441d43c":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\n\n# \ubaa8\ub378\uc744 \ub9cc\ub4e4 \ub54c\ub9c8\ub2e4 \ub9e4\ubc88 \uc544\ub798 \ub124 \uc904\uc758 \ucf54\ub4dc\ub97c \uc801\uae30 \uadc0\ucc2e\uc73c\ub2c8\n# \ud568\uc218\ub85c \ubb36\ub294\ub2e4\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)","ac4993df":"import pandas as pd\n    \n# \ub370\uc774\ud130 \ub85c\ub4dc\nmelbourne_file_path = '..\/input\/melbourne-housing-snapshot\/melb_data.csv'\nmelbourne_data = pd.read_csv(melbourne_file_path) \n\n# \ub204\ub77d\ub41c \uac12\uc758 \ud589 \uc81c\uac70\nfiltered_melbourne_data = melbourne_data.dropna(axis=0)\n\n# \ud0c0\uae43 \ubc0f \ud2b9\uc9d5 \uc120\ud0dd\ny = filtered_melbourne_data.Price\nmelbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'BuildingArea', \n                        'YearBuilt', 'Lattitude', 'Longtitude']\nX = filtered_melbourne_data[melbourne_features]\n\nfrom sklearn.model_selection import train_test_split\n\n# \ub370\uc774\ud130 \ubd84\ud560\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state = 0)","113a69ae":"# \ub124 \uc885\ub958\uc758 max_leaf_nodes \uac12\uc73c\ub85c \uc2e4\ud5d8\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes \uac1c\uc218: %d    \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","f62e4b28":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161285) to chat with other Learners.*","bb86f5f6":"We can use a for-loop to compare the accuracy of models built with different values for *max_leaf_nodes.*","07570682":"The data is loaded into **train_X**, **val_X**, **train_y** and **val_y** using the code you've already seen (and which you've already written).","7ff1df87":"# \ub2e4\uc591\ud55c \ud30c\ub77c\ubbf8\ud130\uc758 \ubaa8\ub378 \uc2e4\ud5d8\ud574\ubcf4\uae30\n\n\uc624\ubc84\ud53c\ud305(\uacfc\uc801\ud569)\n- \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\ub97c \ub108\ubb34\ub098\ub3c4 \uc644\ubcbd\ud558\uac8c \ud559\uc2b5\ud55c \uacbd\uc6b0. \ub2e4\ub978 \ub370\uc774\ud130 \ub530\uc704\ub294 \ub098\ubab0\ub77c\n- => \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub294 \uc9c0\ub098\uce58\uac8c \uc88b\uc740 \uc131\ub2a5 & \uac80\uc99d\uc6a9 \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub294 \uc9c0\ub098\uce58\uac8c \ud5c8\uc811\ud55c \uc131\ub2a5\n\n\uc5b8\ub354\ud53c\ud305(\uacfc\uc18c\uc801\ud569)\n- \ud559\uc2b5 \uc790\uccb4\uac00 \uac70\uc758 \uc548\ub428. \ub354 \ud559\uc2b5\ub418\uc5b4\uc57c \ud568\n- => \ud559\uc2b5\uc6a9 & \uac80\uc99d\uc6a9 \ub370\uc774\ud130\uc14b \ubaa8\ub450\uc5d0\uc11c \uc9c0\ub098\uce58\uac8c \ud5c8\uc811\ud55c \uc131\ub2a5\n\n![underfitting_overfitting](http:\/\/i.imgur.com\/2q85n9s.png)\n\n# \uc608\uc81c\n\ub514\uc2dc\uc804\ud2b8\ub9ac\ub97c \ub9cc\ub4e4 \ub418, *max_leaf_nodes* \ud30c\ub77c\ubbf8\ud130\ub97c \ub2e4\uc591\ud558\uac8c \uad6c\uc131\ud574 \ube44\uad50\ud55c\ub2e4:\n","41ef712f":"\ub124 \uac1c\uc758 \ubaa8\ub378 \uc911 max_leaf_nodex\uac00 500\uc778 \uacbd\uc6b0\uc758 \uc131\ub2a5\uc774 \uadf8\ub098\ub9c8 \uac00\uc7a5 \uc88b\uc74c\n\n---\n\n\n# Your Turn\n\nTry **[optimizing the model you've previously built](https:\/\/www.kaggle.com\/kernels\/fork\/1259126)**."}}