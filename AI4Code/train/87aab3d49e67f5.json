{"cell_type":{"70b0fc77":"code","e01f3df0":"code","d184016b":"code","8048e23f":"code","2bb51d59":"code","1f06e00c":"code","a9b998b7":"code","ce0567e2":"code","e98b0541":"code","e1ed22a4":"code","f27b75e1":"code","a9e82611":"code","1e5561cf":"code","ca93dae6":"code","3e834f57":"code","0156ef10":"code","1b5953f0":"code","b9a23ec1":"code","a517b725":"code","a6e7ebc3":"code","a3d92102":"code","38aba821":"code","f8833f8b":"code","f86d654c":"code","8352889d":"code","296e56f1":"code","85cd2fdc":"code","a32d9f1e":"code","b0911eb7":"code","e98bc230":"code","102a94d0":"markdown","5560efd3":"markdown","198aaa50":"markdown","226039ad":"markdown"},"source":{"70b0fc77":"!pip install fastai\nimport pandas as pd\nfrom fastai.tabular.all import *\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype, is_categorical_dtype\nfrom fastai.tabular.all import *","e01f3df0":"from IPython.display import Image, display_svg, SVG","d184016b":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\n\ntrain.shape,train.head()","8048e23f":"splits = RandomSplitter()(range_of(train))\nsplits","2bb51d59":"#Columns for Continuous and Categories_Values\ntrain.columns","1f06e00c":"procs = [Categorify, FillMissing, Normalize]","a9b998b7":"cat=['PassengerId','Pclass','Name','Sex','SibSp','Parch','Cabin','Embarked','Ticket']\ncont=[ 'Fare','Age']\ny_names = 'Survived'#Target\nds = TabularPandas(train, procs, cat, cont, y_names=y_names, splits=splits , y_block=RegressionBlock())","ce0567e2":"#The lenhg of train and validationset\nlen(ds.train),len(ds.valid)","e98b0541":"ds.show(4)","e1ed22a4":"#Select the Train and validation data from TabularPandas\nx_train,y_train=ds.train.xs,ds.train.y\nx_valid,y_valid=ds.valid.xs,ds.valid.y\ny_train.head(3)","f27b75e1":"x_train.head(3)","a9e82611":"dls = ds.dataloaders(10)","1e5561cf":"learn = tabular_learner(dls, metrics=accuracy, layers=[500,250])","ca93dae6":"learn.lr_find()","3e834f57":"learn.fit_one_cycle(10, 1e-3)","0156ef10":"to=ds","1b5953f0":"class TabDataset():\n    \"A `NumPy` dataset from a `TabularPandas` object\"\n    def __init__(self, to):\n        self.cats = to.cats.to_numpy().astype(np.long)\n        self.conts = to.conts.to_numpy().astype(np.float32)\n        self.ys = to.ys.to_numpy()\n\n    def __getitem__(self, idx):\n        idx = idx[0]\n        return self.cats[idx:idx+self.bs], self.conts[idx:idx+self.bs], self.ys[idx:idx+self.bs]\n\n    def __len__(self): return len(self.cats)","b9a23ec1":"train_ds = TabDataset(to.train)\nvalid_ds = TabDataset(to.valid)","a517b725":"class TabDataLoader(DataLoader):\n    def __init__(self, dataset, bs=1, num_workers=0, device='cuda', shuffle=False, **kwargs):\n        \"A `DataLoader` based on a `TabDataset`\"\n        super().__init__(dataset, bs=bs, num_workers=num_workers, shuffle=shuffle, \n                         device=device, drop_last=shuffle, **kwargs)\n        self.dataset.bs=bs\n    \n    def create_item(self, s): return s\n\n    def create_batch(self, b):\n        \"Create a batch of data\"\n        cat, cont, y = self.dataset[b]\n        return tensor(cat).to(self.device), tensor(cont).to(self.device), tensor(y).to(self.device)\n\n    def get_idxs(self):\n        \"Get index's to select\"\n        idxs = Inf.count if self.indexed else Inf.nones\n        if self.n is not None: idxs = list(range(len(self.dataset)))\n        return idxs\n\n    def shuffle_fn(self):\n        \"Shuffle the interior dataset\"\n        rng = np.random.permutation(len(self.dataset))\n        self.dataset.cats = self.dataset.cats[rng]\n        self.dataset.conts = self.dataset.conts[rng]\n        self.dataset.ys = self.dataset.ys[rng]","a6e7ebc3":"train_ds = TabDataset(to.train)\nvalid_ds = TabDataset(to.valid)","a3d92102":"dls = TabDataLoaders(to, bs=8)\nemb_szs = get_emb_sz(to)\nnet = TabularModel(emb_szs,n_cont=2,  out_sz=2, layers=[400,100])\nlearn = Learner(dls, net, metrics=accuracy, loss_func=CrossEntropyLossFlat())","38aba821":"learn.lr_find()","f8833f8b":"learn.fit(4, 3e-3)","f86d654c":"def r_mse(pred,y): return round(math.sqrt(((pred-y)**2).mean()), 6)\ndef m_rmse(m, xs, y): return r_mse(m.predict(xs), y)","8352889d":"preds,targs = learn.get_preds()\nr_mse(preds,targs)","296e56f1":"!pip install -Uqq fastbook kaggle waterfallcharts treeinterpreter dtreeviz\nimport fastbook\n\n","85cd2fdc":"from fastbook import *\nfrom fastai.vision.widgets import *","a32d9f1e":"#There is no \ncluster_columns(x_train)","b0911eb7":"regr = tree.DecisionTreeRegressor(max_leaf_nodes=6)\nregr.fit(x_train, y_train)\n\nviz = dtreeviz(regr,\n               x_train,\n               y_train,\n               target_name='Survived',\n               feature_names=x_train.columns,\n               scale=2, label_fontsize=10)\n              \n    \n         \n","e98bc230":"viz","102a94d0":"### Using TabularPandas and TabularProc\n\n- `Categorify` is a `TabularProc` that replaces a column with a numeric categorical column.\n- `FillMissing` is a `TabularProc` that replaces missing values with the median of the column, and creates a new Boolean column that is set to `True` for any row where the value was missing.\n","5560efd3":"### Display the data as strings for categories\n- ## we can see the missvalues as `#na#`\n","198aaa50":"###  Split randomly the Data to Train and Validation set","226039ad":"### Create a function to calculate the mean square error"}}