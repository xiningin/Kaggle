{"cell_type":{"72bff971":"code","f86ccd18":"code","0f5680da":"code","0fe7417a":"code","9a5dad35":"code","83d5d451":"code","34fde733":"code","2c80ada6":"code","c6f0133b":"code","b1a264e0":"code","47eda049":"code","a51a8c3b":"code","2fd168de":"code","cc4fb175":"code","ef4c7e66":"code","ec915737":"code","6e36bb03":"code","a8ad4bce":"code","65a5ae6f":"code","41485ba0":"code","9133ab6c":"code","41928bab":"code","8a23d6fe":"code","53013ca3":"code","ae791f6a":"code","363aa7fd":"code","02169eab":"code","bc848ffb":"code","22714cae":"code","53e3df05":"code","08795acc":"code","132e679e":"code","fb34acdd":"code","6dd5610f":"code","c3af543b":"code","3133faea":"code","a2263c2c":"code","7fc254c6":"code","b8fe747f":"code","a3aec5f7":"markdown","e373ac15":"markdown","c78aa951":"markdown","d8f10db2":"markdown","ff105fb5":"markdown","cfbe8e66":"markdown","407dc881":"markdown","d00a2eca":"markdown","dc753c35":"markdown"},"source":{"72bff971":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport sys\nimport csv\nimport requests\nimport subprocess\nfrom datetime import datetime\nimport time\nimport json\n","f86ccd18":"\ninput_file='\/kaggle\/input\/neelmf\/NEELFUND.xlsx' # since there are two directories neelmf also needs to be mentioned in path\nprint(input_file)\nmydata=pd.read_excel(input_file)\nprint(mydata)","0f5680da":"input_file='..\/input\/goodfellas\/goodfellas.txt'\nprint(input_file)\n\nfin=open(input_file, 'r')\ndata=fin.read()\nfin.close()\n#data.close()\nprint(data)","0fe7417a":"out_file='test2.txt'\nwith open(out_file, 'w') as fout:\n    fout.writelines(data[1:])  # note that it removed only the first character but not the 1st line. Hence, we will try splitlines next.\ndata_truncated=print(open(out_file,'r').read()) # first line is remvoed","9a5dad35":"if not os.path.exists (out_file):\n    open(out_file, 'w').close()\n\n## Now read the details of all assets with high loudness levels\nwith open(input_file, 'r') as fin:\n    data = fin.read().splitlines(True)\nfin.close() \n\nprint(data)","83d5d451":"# not fuctioning code\nwith open(input_file, 'w') as fout:\n    fout.writelines(data[1:])\nfout.close() ","34fde733":"out_file='test2.txt'\nwith open(out_file, 'w') as fout:\n    fout.writelines(data[1:])\nfout.close() ","2c80ada6":"data_truncated=print(open(out_file,'r').read()) # first line is remvoed","c6f0133b":"from scipy.stats import skewtest \nfrom scipy import stats\nimport matplotlib.pyplot as plt\nb=skewtest([1,2,3,4,5,6,7,8,8,8,8])\nprint(b)\na=np.array([1,2,3,4,5,6,7,8,8,8,8])\nstats.zscore(a)","b1a264e0":"a=['1','3','2','10','5']\na.sort()\nprint(a)\nb=map(int,a)\nprint(b)\nprint(list(b)) # maps can't be printed just like that","47eda049":"def myfunc(n):\n  return len(n)\n\nx = map(myfunc, ('apple', 'banana', 'cherry'))\nprint(list(x))\n","a51a8c3b":"mylist =['a','b','c','d','e']\n\nmylist.pop()\n","2fd168de":"mylist.pop(1)","cc4fb175":"mylist.append('b')","ef4c7e66":"mylist","ec915737":"mylist[:2]","6e36bb03":"mylist[:-1]","a8ad4bce":"mylist.sort()","65a5ae6f":"mylist","41485ba0":"mylist.reverse()","9133ab6c":"mylist","41928bab":"mylist.index('a')","8a23d6fe":"dir(mylist)","53013ca3":"mylist.insert(3,'z')","ae791f6a":"mylist","363aa7fd":"mylist.clear()","02169eab":"mylist","bc848ffb":" prices_lookup={'apple':2.9, 'orange':1.9}","22714cae":"prices_lookup['apple']\n","53e3df05":"prices_lookup['apple']=2\n","08795acc":"print(prices_lookup.keys(),type(prices_lookup.keys()))","132e679e":"prices_lookup.values()","fb34acdd":"prices_lookup.items()","6dd5610f":"a = \"\"\"   Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.\"\"\"\nprint(a)","c3af543b":"a=a.strip()\nprint(a)","3133faea":"flag='labor' in a\nprint(flag)","a2263c2c":"quantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want {} pieces of item {} for {} dollars.\"\nprint(myorder.format(quantity, itemno, price))","7fc254c6":"help(str.find)","b8fe747f":"a.find(\"in\",10)","a3aec5f7":"# Splitlines","e373ac15":"the strip method acts like TRIM of EXCEL. The strip() method removes any whitespace from the beginning or the end:\n\n","c78aa951":"\n# Generally you can't read Microsoft Excel files as a text files using methods like readlines or read. You should convert files to another format before (good solution is .csv which can be readed by csv module) or use a special python modules like pyexcel and openpyxl to read .xlsx files directly.\n","d8f10db2":"# Writing to an input file is not allowed {input section}","ff105fb5":"# Format Method\nThe format() method takes the passed arguments, formats them, and places them in the string where the placeholders {} are:\n\n","cfbe8e66":"# #quick read","407dc881":"You can assign a multiline string to a variable by using three quotes:\n\n# Multiline Strings","d00a2eca":"# Check String\nTo check if a certain phrase or character is present in a string, we can use the keywords in or not in.","dc753c35":"# **We cover kaggle input and output file systems (understanding paths and read-only restrictions on input folder)**. Reading an excel file from 1 dataset using pandas and reading text files from other dataset using FileIO. In IO, we cover **Open(), object.read(), object.read.splitlines()** and their use cases (character vs lines)."}}