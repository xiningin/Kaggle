{"cell_type":{"6b2d1c0c":"code","9c690183":"code","3804568f":"code","cc033148":"code","9e0e96fc":"code","37e16367":"code","93e29b61":"code","4a425e59":"code","76274c80":"code","3a790a18":"code","d38fab26":"code","dca2ab4b":"code","c402a0cf":"code","97bd059f":"code","94fe68cb":"code","a2fb0728":"code","0dbc4185":"code","946b57b8":"code","68ffe5ec":"code","a79f3e68":"code","4a1e9954":"code","9e2efae4":"code","9d61f1be":"code","63dddb04":"code","b98bcd5f":"code","fe324a25":"code","24b3677d":"code","1d133098":"code","f839b5a1":"code","f05c974e":"code","4520a398":"code","9ff2e2db":"code","69593c11":"code","2ebe47c6":"code","687a406c":"code","ebf14e99":"code","eac44e89":"code","84a1bda9":"code","285a7569":"code","0c5951c8":"code","8c0549bc":"code","642bec3e":"code","313abe0f":"code","c1dd0a48":"code","591325a1":"code","d4938bd7":"code","c40a3f1a":"code","778a159a":"code","cf3507cb":"code","aff9c32f":"code","20b6a6fe":"code","e3d298ac":"code","a46d562f":"code","5281f052":"code","51260b7a":"code","cf079803":"code","e2e31bf7":"code","0dbf39d7":"markdown","61cfda17":"markdown","88433609":"markdown","1e20bcc1":"markdown","343ab0fc":"markdown","3812d25c":"markdown","9db4635f":"markdown","34c55d8b":"markdown","93000686":"markdown","03cb2eb7":"markdown","67e335f0":"markdown","e99e4258":"markdown","ad7d3242":"markdown","7c9ad1c8":"markdown","8786e964":"markdown","ba16aa4d":"markdown","57b669a6":"markdown","195d528f":"markdown","01ca6de1":"markdown","ff8c0157":"markdown","bf09978d":"markdown","b567616a":"markdown","1c90c69e":"markdown","ff1ce972":"markdown","3c1a8053":"markdown","6a5a7226":"markdown","e54bc473":"markdown","8dc671a5":"markdown","ce56f335":"markdown","2bd16eb4":"markdown","19384cde":"markdown","64c29183":"markdown","4b293da3":"markdown","f92b7207":"markdown","57abd855":"markdown"},"source":{"6b2d1c0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9c690183":"data = pd.read_csv(\"..\/input\/googleplaystore.csv\")","3804568f":"data.info()","cc033148":"data.head() #view the top five data","9e0e96fc":"series = data['Category'] #type series\nprint(type(series))\ndata_frame = data[['Category']] #type data frame\nprint(type(data_frame))","37e16367":"#Filter Pandas data frame\ncontrol_rating = data['Rating']>4.0  #list with rating greater than 4\ndata[control_rating]","93e29b61":"len(data[control_rating]) #total number of ratings with a rating greater than 4","4a425e59":"#Filtering Pandas with logical_and\ndata[np.logical_and(data['Rating']>4.0, data['Content Rating']=='Teen')]","76274c80":"#we can also use '&' for filtering.\ndata[(data['Rating']>4.0) & (data['Content Rating'] == 'Teen')]","3a790a18":"data['Rating'].mean() #average of ratings","d38fab26":"data[data['Rating'] == data['Rating'].max()] #application with the highest rating","dca2ab4b":"data[data['Rating'] == data['Rating'].min()] #applications with the lowest rating","c402a0cf":"data[\"Category\"].nunique() #total number of categories","97bd059f":"data.groupby(\"Category\").mean() #average number of ratings in categories","94fe68cb":"data['Category'].value_counts() #Number of applications in categories","a2fb0728":"data.drop(['Android Ver'],axis = 1,inplace = True) #drop 'Android Ver' column\ndata.info()","0dbc4185":"import warnings\nwarnings.filterwarnings(\"ignore\")\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\ndata2 = data2.set_index(\"date\")\ndata2","946b57b8":"#resample with year\ndata2.resample(\"A\").mean()","68ffe5ec":"#resample with month\ndata2.resample(\"M\").mean()","a79f3e68":"data2.resample(\"M\").first().interpolate(\"linear\")","4a1e9954":"data2.resample(\"M\").mean().interpolate(\"linear\")","9e2efae4":"x = np.arange(1,6)\ny = np.arange(2,11,2)\nplt.plot(x,y,\"red\")\nplt.show()","9d61f1be":"plt.subplot(2,2,1)\nplt.plot(x,y,\"blue\")\n\nplt.subplot(2,2,2)\nplt.plot(y,x,\"red\")\n\nplt.subplot(2,2,3)\nplt.plot(x**2,y,\"black\")\n\n\nplt.subplot(2,2,4)\nplt.plot(x,y**2,\"green\")\nplt.show()","63dddb04":"fig = plt.figure()\naxes = fig.add_axes([0.1,0.2,0.4,0.6])\naxes.plot(x,y)\naxes.set_xlabel(\"x axis\")\naxes.set_ylabel(\"y axis\")\naxes.set_title(\"Plot\")\n\nplt.show()","b98bcd5f":"int_reviews = []\n\nfor i in data['Reviews']:\n    try:\n        int_reviews.append(int(i))\n    except ValueError:\n        int_reviews.append(0)\n\ndata['IntReviews'] = int_reviews #add new column\ndata.info()","fe324a25":"x = data['Rating']\ny = data['IntReviews']\nfig = plt.figure()\naxes = fig.add_axes([0.1,0.1,0.8,0.8])\naxes.plot(x,y,\"red\",linewidth=2,linestyle=\"--\",marker=\"o\",markersize=5,markerfacecolor=\"black\",markeredgecolor=\"yellow\",markeredgewidth=2)\nplt.show()","24b3677d":"data.Rating.plot(kind=\"line\",color=\"y\",label=\"Rating\",linewidth=1,alpha=0.5,grid=True,linestyle=\":\")\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Rating Plot')\nplt.show()","1d133098":"data.IntReviews.plot(kind=\"line\",color=\"b\",label=\"Rating\",linewidth=5,alpha=1,grid=True,linestyle=\"-\",figsize=(12,12))\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Rating Plot')\nplt.show()","f839b5a1":"data.plot(kind='scatter',x='IntReviews', y='Rating', alpha = 0.5, color='green')\nplt.xlabel('Reviews')\nplt.ylabel('Rating')\nplt.title('Scatter Plot')\nplt.show()","f05c974e":"data.Rating.plot(kind='hist',bins=100,figsize=(12,12))\nplt.show()","4520a398":"data[\"rating_status\"] = [\"Popular\" if i > 4.0 else \"Not Popular\" for i in data.Rating]\n\nprint(data.loc[:10,[\"rating_status\",\"Rating\"]])","9ff2e2db":"numbers1 = np.arange(1,6)\nprint([i+10 for i in numbers1])","69593c11":"numbers2 = np.arange(1,25)\n\nprint([\"Even Number\" if i%2==0 else \"Odd Number\" for i in numbers2])","2ebe47c6":"# classic function\ndef square_area_classic(x):\n    return x**2\n\n#lambda function\nsquare_area_lambda = lambda x: x**2\n\n#use functions\nprint(square_area_classic(10))\nprint(square_area_lambda(10))\n","687a406c":"#use multiple veriables\nrectangle_area = lambda x,y: x*y\nprint(rectangle_area(3,5))","ebf14e99":"#exercise lambda function\nreverse_str = lambda s : s[::-1]\nprint(reverse_str(\"Data Science\"))","eac44e89":"def calculate(v_r,v_pi = 3.14):\n    result = v_pi * v_r**2\n    return result\nprint(calculate(3)) # v_r = 3 , v_pir = 3.14(default) \nprint(calculate(4,3)) # change default arguments","84a1bda9":"def flexible(*args):\n    for i in args:\n        print(i**2)\nflexible(1,2,3)","285a7569":"data.head() #show first 5 rows\n","0c5951c8":"data.tail() #show last 5 rows","8c0549bc":"data.columns #gives column names of features","642bec3e":"data.shape #gives number of rows and columns in a tuble","313abe0f":"data.info() #gives data type like dataframe, number of sample or row, number of feature or column","c1dd0a48":"data.describe()","591325a1":"print(data['Rating'].value_counts(dropna=False))","d4938bd7":"first_five_data = data.head()\nmelted = pd.melt(frame=first_five_data,id_vars='App',value_vars=['Rating','Type'])\nprint(melted)","c40a3f1a":"data.boxplot(column=\"Rating\",by =\"rating_status\")","778a159a":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True)\nconc_data_row","cf3507cb":"data.dtypes","aff9c32f":"#convert object(str) to categorical\ndata['Type'] = data['Type'].astype('category')\ndata.dtypes","20b6a6fe":"#look at does data have nan value\ndata.info()","e3d298ac":"#check Rating\ndata[\"Rating\"].value_counts(dropna=False)","a46d562f":"#drop nan values\ndata1 = data\ndata1[\"Rating\"].dropna(inplace=True)","5281f052":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","51260b7a":"assert  data['Rating'].notnull().all() # returns nothing because we drop nan values","cf079803":"data[\"Rating\"].fillna('empty',inplace = True)","e2e31bf7":"assert  data['Rating'].notnull().all() # returns nothing because we do not have nan values","0dbf39d7":"<h3>DEFAULT ARGUMENT<\/h3>","61cfda17":"**value_counts(): Frequency counts**\n","88433609":"<h2>CLEANING DATA<\/h2>","1e20bcc1":"<h3>TIDY DATA<\/h3>\nWe tidy data with melt().","343ab0fc":"<a id=4><\/a>","3812d25c":"<a id=5><\/a>","9db4635f":"<h3>RESAMPLING PANDAS TIME SERIES<\/h3>","34c55d8b":"<h2>MATPLOTLIB<\/h2>","93000686":"<a id=14><\/a>\n<h3>Line Plot<\/h3>","03cb2eb7":"<h3>VISUAL EXPLORATORY DATA ANALYSIS<\/h3>\nBox plots: visualize basic statistics like outliers, min\/max or quantiles","67e335f0":"We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n","e99e4258":"<h3>CONCATENATING DATA<\/h3>\nWe can concatenate two dataframe ","ad7d3242":"<a id=15><\/a>\n<h3>Scatter Plot<\/h3>","7c9ad1c8":"<a id=3><\/a>\n**I use two types;**\n* First type = Series\n* Second type = data_frame","8786e964":"<a id=16><\/a>\n<h3>Histogram Plot<\/h3>","ba16aa4d":"<a id=9><\/a>","57b669a6":"<h3>List Comprehension<\/h3>","195d528f":"<h2>Content<\/h2>\n<hr>\n<h3>Pandas<\/h3><li>Read csv<\/li>\n<li>info()<\/li>\n<li>mean()<\/li>\n<li>min()<\/li>\n<li>max()<\/li>\n<li>nunique()<\/li>\n<li>min()<\/li>\n<li>max()<\/li>\n<li>nunique()<\/li>\n<li>value_counts()<\/li>\n<li>drop()<\/li>\n<li>Indexing Pandas Time Series<\/li>\n<li>Resampling Pandas Time Series<\/li>\n\n<h3>Matplotlib<\/h3>\n<li>Create Figure<\/li>\n<li>Subplot<\/li>\n<li>Line Plot<\/li>\n<li>Scatter Plot<\/li>\n<li>Histogram Plot<\/li>\n\n<h3>Python Data Science Toolbox<\/h3>\n<li>List Comprehension<\/li>\n<li>Lambda Function<\/li>\n<li>Default Argument<\/li>\n<li>Flexible Argument<\/li>\n\n<h3>Cleaning Data<\/h3>\n<li>Diagnose Data for Cleaning<\/li>\n<li>Exploratory Data Analysis<\/li>\n<li>Dity Data<\/li>\n<li>Visual Exploratory Data Analysis<\/li>\n<li>Concatenating Data<\/li>\n<li>Data Types<\/li>\n<li>Missing Data and Testing With Assert<\/li>","01ca6de1":"<h2>PYTHON DATA SCIENCE TOOLBOX<\/h2>","ff8c0157":"<a id=12><\/a>\nCreate figure","bf09978d":"<h3>DATA TYPES<\/h3>\nThere are 5 basic data types:\n* object(string)\n* boolean\n* integer\n* float\n* categorial\n","b567616a":"<a id=6><\/a>","1c90c69e":"<h3>MISSING DATA and TESTING WITH ASSERT<\/h3>","ff1ce972":"<a id=8><\/a>","3c1a8053":"<a id=11><\/a>","6a5a7226":"<h3>EXPLORATORY DATA ANALYSIS<\/h3>","e54bc473":"<h3>LAMBDA FUNCTION<\/h3>","8dc671a5":"<a id=2><\/a>","ce56f335":"<a id=7><\/a>","2bd16eb4":"<h3>DIAGNOSE DATA for CLEANING<\/h3>\nWe will use head, tail, columns, shape and info methods to diagnose data","19384cde":"<h3>INDEXING PANDAS TIME SERIES<\/h3>","64c29183":"<h3>FLEXIBLE ARGUMENT<\/h3>","4b293da3":"<a id=10><\/a>","f92b7207":"<a id=13><\/a>","57abd855":"Reviews type = string \n<br>Reviews type convert to int"}}