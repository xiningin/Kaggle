{"cell_type":{"1a1fd6b0":"code","8b449323":"code","bf87eaeb":"code","5c4cee47":"code","306fe3a1":"code","0fecfd93":"code","480e0388":"code","825aaed7":"code","d27d0313":"code","0bc4eacf":"code","9c792687":"code","a923ddad":"code","8cbd8472":"code","23368993":"code","bcaa0c1e":"code","e56c5474":"code","24b66744":"code","e7663ef9":"code","a5fddc33":"code","b09c8b02":"code","b48297d1":"code","300c4145":"code","050ec49c":"code","ae924b99":"code","444baca4":"code","83e97a32":"code","9dc90776":"code","c5cc93cb":"markdown","0ce6aefa":"markdown","51901390":"markdown","7ea68105":"markdown","28a487e4":"markdown","f1146088":"markdown"},"source":{"1a1fd6b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b449323":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn","bf87eaeb":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain.head()","5c4cee47":"test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest=test.rename(columns = {0:'new_name'})\ntest.head()","306fe3a1":"train.isnull().sum()","0fecfd93":"y_train = train['label']\nx_train = train.drop('label', axis=1)","480e0388":"x_train.head()","825aaed7":"print(x_train.shape)\n\nprint(test.shape)","d27d0313":"x_train = x_train.astype('float32')\ntest = test.astype('float32')\nx_train = x_train\/225.0\ntest = test\/225.0\nx_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","0bc4eacf":"print(x_train.shape)\nprint(test.shape)","9c792687":"fig, axes = plt.subplots(4,4, figsize=(15, 15))\naxes = axes.ravel()\n\nfor i in np.arange(0, 16):\n    axes[i].imshow(x_train[i])\n    axes[i].set_title(\"Digit = %s\" % y_train[i])\n    axes[i].axis(\"off\")\n    plt.subplots_adjust(wspace=1)","a923ddad":"print(y_train.shape)","8cbd8472":"y_train[:10]","23368993":"from keras.utils import np_utils\ny_train = np_utils.to_categorical(y_train,10)","bcaa0c1e":"print(y_train.shape)","e56c5474":"from sklearn.model_selection import train_test_split\nx1, x_val, y1, y_val = train_test_split(x_train,y_train, test_size = 0.3, random_state = 12)","24b66744":"print(x1.shape)\nprint(x_val.shape)\nprint(y1.shape)\nprint(y_val.shape)","e7663ef9":"import keras\nfrom keras.models import Sequential\nfrom keras.optimizers import SGD\nfrom keras.layers import Flatten\nfrom keras.layers import Dense \nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import AveragePooling2D\nfrom keras.optimizers import Adam\nfrom keras.layers import BatchNormalization\nfrom keras.layers import Dropout \nfrom keras.layers import Activation","a5fddc33":"model1 = Sequential()\nmodel1.add(Conv2D(16, (3,3), activation = 'relu', kernel_initializer = 'he_uniform', input_shape = (28,28,1)))\nmodel1.add(MaxPooling2D((2,2)))\nmodel1.add(Conv2D(32, (3,3), activation = 'relu', kernel_initializer = 'he_uniform'))\nmodel1.add(MaxPooling2D((2,2)))\nmodel1.add(Flatten())\nmodel1.add(Dense(100, activation = 'relu', kernel_initializer = 'he_uniform'))\nmodel1.add(Dense(64, activation = 'relu', kernel_initializer = 'he_uniform'))\nmodel1.add(Dense(10, activation = 'softmax'))","b09c8b02":"model1.compile(optimizer = Adam(), loss='categorical_crossentropy', metrics=['accuracy'])","b48297d1":"history1 = []                \nhistory1 = model1.fit(x1, y1, batch_size=32, epochs = 10, validation_data=(x_val, y_val),  callbacks=[history1])","300c4145":"ytest1 = model1.predict(test)","050ec49c":"y_pred = np.argmax(ytest1, axis=1)\ny_pred","ae924b99":"len(test)","444baca4":"y_pred_df = pd.DataFrame({'ImageID': range(1, len(test)+1), 'Label': y_pred})","83e97a32":"y_pred_df.head()","9dc90776":"y_pred_df.to_csv('\/kaggle\/working\/Predictions.csv', index=False)","c5cc93cb":"Spliting Data","0ce6aefa":"Preprocessing Labels","51901390":"Preprocessing input data","7ea68105":"Compile Model","28a487e4":"Fit model on training data","f1146088":"Defining Model Architecture"}}