{"cell_type":{"5885d886":"code","70338dcb":"code","b6e7ec38":"code","635d0a45":"code","a144a4fe":"code","57acddd9":"code","89db8b53":"code","39268478":"code","20decf2e":"code","e080595c":"code","1e961a0d":"code","0f0ae396":"code","ee486e38":"code","06277bc5":"code","080c5f20":"code","e254fea6":"code","b7afc5c1":"markdown","88d5f665":"markdown","f8881d88":"markdown","357509b3":"markdown","d44c5698":"markdown","bfe2d4de":"markdown","dc346b7e":"markdown","e19fd283":"markdown"},"source":{"5885d886":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","70338dcb":"from catboost import CatBoostClassifier, CatBoostRegressor, Pool, cv\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn import preprocessing, model_selection, neighbors, svm\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, MaxAbsScaler\nfrom sklearn.metrics import accuracy_score, mean_squared_error, mean_absolute_error, roc_auc_score, precision_score, recall_score","b6e7ec38":"df=pd.read_csv('\/kaggle\/input\/weight-height\/weight-height.csv')","635d0a45":"df.describe()","a144a4fe":"df.head()","57acddd9":"X = df.drop(['Weight'], axis=1)\ny = df['Weight']\nprint(X.shape, y.shape)","89db8b53":"X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2, shuffle=True)\nprint(X_train.shape, X_test.shape)","39268478":"model = CatBoostRegressor(iterations=100_000, \n                           verbose=1000,\n                           #learning_rate=0.01,\n                           early_stopping_rounds=2000,\n                           #bootstrap_type='Poisson',\n                           boosting_type='Ordered',\n                           #loss_function='LogLoss', \n                           #custom_metric='Accuracy',\n                           #grow_policy='Lossguide',\n                           cat_features = ['Gender'],\n                           task_type='GPU')","20decf2e":"model.fit(X_train, y_train, ['Gender'], use_best_model=True, eval_set=(X_test, y_test))","e080595c":"y_pred = model.predict(X)","1e961a0d":"y_pred","0f0ae396":"y.values","ee486e38":"print(\"MAE:\", mean_absolute_error(y, y_pred))\nprint(\"MSE:\", mean_squared_error(y, y_pred))","06277bc5":"my_data = pd.DataFrame(columns=['Gender','Height'], data=[['Male', 167.0*0.3937007874], ['Female', 170.0*0.3937007874]])","080c5f20":"my_pred = model.predict(my_data)","e254fea6":"my_pred*0.45359237","b7afc5c1":"Predict","88d5f665":"Split data for validation and shuffle","f8881d88":"Define features and labels. I try to predict weight. So my label is weight, gender is a categorial feature and height is a numerical feature","357509b3":"Define catboost regression model. We have not much data so we could choose boosting type ordered, it is better.","d44c5698":"Import Data","bfe2d4de":"Seems right :), So in conculision catbooost can learn quickly a lineer data","dc346b7e":"Calculate me and my wife data (Conversion to kg -> lbs, cm->inces)","e19fd283":"Calculate Errors"}}