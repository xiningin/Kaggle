{"cell_type":{"ebe0c897":"code","604ebfc2":"code","10d77279":"code","773deb12":"code","6373a6b6":"code","961a47f2":"code","8a5d5feb":"code","37486139":"code","1aa40a37":"code","e771b760":"code","d8b019b3":"code","f701d15d":"code","689aa0e4":"code","cbf0b1e1":"code","e4007207":"code","59031ca8":"code","5c968361":"code","add8cef7":"code","bde1f611":"code","d9668c91":"code","51274481":"code","6ac37035":"code","72734167":"code","ef2b3672":"code","247ba3fc":"code","a6bc5940":"code","28fc3e3a":"code","613c626d":"code","181a48cc":"code","fca1fc9d":"code","bf59e8e4":"code","38dc73fd":"code","86a0c76b":"code","14c33b58":"code","3b658fd8":"code","9ac30929":"code","2c089102":"code","8842c30d":"code","37a38b79":"code","919a6fcc":"code","5c9416ef":"code","e06c2e19":"code","0cffc50c":"code","83236195":"code","6f1ff980":"code","e635930b":"code","cb645ee3":"code","78c66906":"code","8fba33dc":"code","8b31e0c3":"code","ba324c67":"code","54dba1dd":"code","cf94bcdc":"code","4f0aa418":"code","315b6a6b":"code","3fa623e1":"code","badd6ff2":"code","bf5cdae5":"code","5f247019":"code","7c2a4439":"code","6596d7a2":"code","8b75d904":"code","3ba3d011":"code","55ae5db8":"code","5f9782a7":"code","ba9d0f51":"code","32bc5816":"code","b581940b":"code","c9fdd878":"code","af00c63b":"code","26b0234b":"code","bcb60353":"code","3e602c10":"code","dae0d669":"code","95314b7e":"code","651b6461":"code","ebbac83b":"code","6ec4fff8":"code","bf18df77":"code","000f34fb":"code","e2a20a23":"markdown","a892e7c7":"markdown","ad54f527":"markdown","9c54fd2d":"markdown","f22fd02c":"markdown","0b01291b":"markdown","ea1fbde1":"markdown","909fc842":"markdown","da8a19b3":"markdown","6a2ed519":"markdown"},"source":{"ebe0c897":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\ndf=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/train.csv\")\ndf1=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")","604ebfc2":"train_original=df.copy()\ntest_original=df1.copy()","10d77279":"df.head(10)","773deb12":"#COUNT THE NUMBER OF ROWS AND COLUMNS IN THE DATA SET.","6373a6b6":"df.shape","961a47f2":"df1.shape","8a5d5feb":"#GET SOME STATISTICS","37486139":"df.describe()","1aa40a37":"df.info()","e771b760":"df.isnull().sum()","d8b019b3":"#VIEWING THE TEST DATASET\n\n\ndf1.head()","f701d15d":"df1.info()","689aa0e4":"df1.isnull().sum()","cbf0b1e1":"data=[df,df1]\nfor dataset in data:\n    #FILTER CATEGORICAL VARIABLES\n    categorical_columns=[x for x in dataset.dtypes.index if dataset.dtypes[x]=='object']\n    #EXCLUDE ID COLS AND SOURCE:\n    categorical_columns =[x for x in categorical_columns if x not in['Loan_ID']]\n    \n    \n    #PRINT FREQUENCY OF CATEGORIES\nfor col in categorical_columns:\n    print('\\nFrequency of categories for variable %s'%col)\n    print(df[col].value_counts())\n    \n    ","e4007207":"#GENDER\n\nsns.countplot(df['Gender'])","59031ca8":"pd.crosstab(df.Gender, df.Loan_Status, margins=True)","5c968361":"#DEPENDENDANTS\n\nplt.figure(figsize=(6,6))\nlabels=['0','1','2','3+']\nexplode=(0.05,0,0,0)\nsize=[345,102,101,51]\nplt.pie(size,explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()","add8cef7":"#GET THE COUNT OF THE NUMBER OF DEPENDENTS\n\ndf.Dependents.value_counts()","bde1f611":"pd.crosstab(df.Dependents,df.Loan_Status,margins=True)","d9668c91":"#CREDIT HISTORY\n\nsns.countplot(df['Credit_History'])","51274481":"pd.crosstab(df.Credit_History,df.Loan_Status, margins=True)","6ac37035":"#SELF EMPLOYED\n\nsns.countplot(df['Self_Employed'])","72734167":"pd.crosstab(df.Self_Employed, df.Loan_Status, margins=True)","ef2b3672":"#MARRIED\n\nsns.countplot(df.Married)","247ba3fc":"pd.crosstab(df.Married, df.Loan_Status, margins=True)","a6bc5940":"#LOAN AMOUNT \n\nsns.displot(df['LoanAmount'])","28fc3e3a":"#EDUCATION\n\nsns.countplot(df.Education)","613c626d":"#PROPERTY AREA\n\n\nsns.countplot(df.Property_Area)","181a48cc":"# APPLICANT INCOME\n\ndf['ApplicantIncome'].hist(bins=50)","fca1fc9d":"df.boxplot(column='ApplicantIncome')","bf59e8e4":"# APPLICANT INCOME AND EDUCATION\n\ndf.boxplot(column='ApplicantIncome',by='Education')\n","38dc73fd":"temp1=df['Credit_History'].value_counts(ascending=True)\ntemp2=df.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc= lambda x: x.map({'Y':1,'N':0}).mean())\nprint('Frequency Table for Credit History:')\nprint(temp1)\nprint('\\n probability of getting loan for each credit history class:')\nprint(temp2)","86a0c76b":"import matplotlib.pyplot as plt\nfig=plt.figure(figsize=(8,4))\nax1=fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of applicants')\nax1.set_title(\"Applicants by credit_History\")\ntemp1.plot(kind='bar')\nax2=fig.add_subplot(122)\ntemp2.plot(kind='bar')\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")","14c33b58":"temp3=pd.crosstab(df['Credit_History'],df['Loan_Status'])\ntemp3.plot(kind='bar',stacked=True, color=['red','blue'],grid=False)","3b658fd8":"df.apply(lambda x: sum(x.isnull()),axis=0)","9ac30929":"df['LoanAmount'].fillna(df['LoanAmount'].mean(),inplace=True)","2c089102":"df[\"Self_Employed\"].value_counts()","8842c30d":"# HEATMAP REPRESENTATION OF THE CORRELATION\n\nmatrix=df.corr()\nf,ax=plt.subplots(figsize=(9,6))\nsns.heatmap(matrix,vmax=.8,square=True,cmap=\"BuPu\")","37a38b79":"df.isnull().sum()","919a6fcc":"df.head()","5c9416ef":"#CONVERTING STRING VALUES(CATEGORICAL VALUES) TO INTEGER\n\ndf.Gender=df.Gender.map({\"Female\":0,\"Male\":1})\ndf.Married=df.Married.map({\"No\":0,\"Yes\":1})\ndf.Self_Employed=df.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf.Education=df.Education.map({\"Not\":1,\"Graduate\":0})\ndf.Property_Area=df.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf.Loan_Status=df.Loan_Status.map({\"N\":0,\"Y\":1})\ndf.Dependents=df.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","e06c2e19":"df.head()","0cffc50c":"#CONVERTING STRING VALUES(CATEGORICAL VALUES)TO INTEGER\n\ndf1.Gender=df1.Gender.map({\"Female\":0,\"Male\":1})\ndf1.Married=df1.Married.map({\"No\":0,\"Yes\":1})\ndf1.Self_Employed=df1.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf1.Education=df1.Education.map({\"Not\":1,\"Graduate\":0})\ndf1.Property_Area=df1.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf1.Dependents=df1.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","83236195":"df1.head()","6f1ff980":"df[\"Gender\"].fillna(df[\"Gender\"].mode()[0],inplace=True)\ndf[\"Married\"].fillna(df[\"Married\"].mode()[0],inplace=True)\ndf[\"Dependents\"].fillna(df[\"Dependents\"].mode()[0],inplace=True)\ndf[\"Self_Employed\"].fillna(df[\"Self_Employed\"].mode()[0],inplace=True)\ndf[\"Credit_History\"].fillna(df[\"Credit_History\"].mode()[0],inplace=True)\ndf[\"Education\"].fillna(df[\"Education\"].mode()[0],inplace=True)\ndf[\"Property_Area\"].fillna(df[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","e635930b":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\n\ndf[\"Loan_Amount_Term\"].value_counts()","cb645ee3":"df[\"Loan_Amount_Term\"].fillna(df[\"Loan_Amount_Term\"].mode()[0],inplace=True)","78c66906":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf[\"LoanAmount\"].fillna(df[\"LoanAmount\"].median(),inplace=True)","8fba33dc":"df.isnull().sum()","8b31e0c3":"df1.isnull().sum()","ba324c67":"df1[\"Gender\"].fillna(df1[\"Gender\"].mode()[0],inplace=True)\ndf1[\"Married\"].fillna(df1[\"Married\"].mode()[0],inplace=True)\ndf1[\"Dependents\"].fillna(df1[\"Dependents\"].mode()[0],inplace=True)\ndf1[\"Self_Employed\"].fillna(df1[\"Self_Employed\"].mode()[0],inplace=True)\ndf1[\"Credit_History\"].fillna(df1[\"Credit_History\"].mode()[0],inplace=True)\ndf1[\"Education\"].fillna(df1[\"Education\"].mode()[0],inplace=True)\ndf1[\"Property_Area\"].fillna(df1[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","54dba1dd":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\ndf1[\"Loan_Amount_Term\"].value_counts()","cf94bcdc":"df1[\"Loan_Amount_Term\"].fillna(df1[\"Loan_Amount_Term\"].mode()[0],inplace=True)","4f0aa418":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf1[\"LoanAmount\"].fillna(df1[\"LoanAmount\"].median(),inplace=True)","315b6a6b":"df1.isnull().sum()","3fa623e1":"df['Total_Income']=df[\"ApplicantIncome\"]+df['CoapplicantIncome']\ndf1['Total_Income']=df1[\"ApplicantIncome\"]+df1['CoapplicantIncome']","badd6ff2":"sns.displot(df[\"Total_Income\"])","bf5cdae5":"df['Total_Income_log']=np.log(df[\"Total_Income\"])\ndf1['Total_Income_log']=np.log(df1[\"Total_Income\"])","5f247019":"sns.displot(df1[\"Total_Income_log\"])","7c2a4439":"df['EMI']=df[\"LoanAmount\"]\/df['Loan_Amount_Term']\ndf1['EMI']=df1[\"LoanAmount\"]\/df1['Loan_Amount_Term']","6596d7a2":"sns.displot(df[\"EMI\"])","8b75d904":"sns.displot(df[\"EMI\"])","3ba3d011":"#MULTIPLYING BY 1000 TO MAKE THE UITS EQUAL\n\ndf['Balance Income']=df[\"Total_Income\"]-(df['EMI']*1000)\ndf1['Balance Income']=df1[\"Total_Income\"]-(df1['EMI']*1000)","55ae5db8":"sns.displot(df[\"Balance Income\"])","5f9782a7":"sns.displot(df[\"Balance Income\"])","ba9d0f51":"df=df.drop([\"Loan_ID\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\ndf","32bc5816":"df.dtypes","b581940b":"df1=df1.drop([\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\n","c9fdd878":"df1=df1.drop(\"Loan_ID\",axis=1)\ndf1","af00c63b":"df1.dtypes","26b0234b":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","bcb60353":"#LETS PREPARE THE DATA FOR FEEDING IN TO THE MODELS\n#SAVE THE TARGET VARIABLE IN SEPARATE\n\nx=df.drop(\"Loan_Status\",1)\ny=df.Loan_Status","3e602c10":"x=pd.get_dummies(x)\ndf=pd.get_dummies(df)","dae0d669":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=102)","95314b7e":"from sklearn.linear_model import LogisticRegression\nlogmodel=LogisticRegression()\nlogmodel.fit(x_train,y_train)\npred_l=logmodel.predict(x_test)\nacc_l=accuracy_score(y_test,pred_l)*100\nacc_l","651b6461":"pred_test=logmodel.predict(df1)","ebbac83b":"loancsv=pd.DataFrame({\"Loan_ID\":test_original[\"Loan_ID\"],\"Loan_Status\":pred_test})","6ec4fff8":"loancsv","bf18df77":"loancsv[\"Loan_Status\"].replace(0,\"N\",inplace=True)\nloancsv[\"Loan_Status\"].replace(1,\"Y\",inplace=True)","000f34fb":"loancsv","e2a20a23":"# EXPLORING AND PREPARING THE DATA","a892e7c7":"# DROPPING THE VARIABLES","ad54f527":"# FILLING MISSING VALUES\n","9c54fd2d":"# FEATURE ENGINEERING","f22fd02c":"# FILLING MISSING VALUES IN TEST DATA","0b01291b":"# CORRELATION BETWEEN ALL THE NUMERICAL VARIABLES\n","ea1fbde1":"# IMPORTING PACKAGES","909fc842":"# READING THE DATA","da8a19b3":"# REPLACING THE CATEGORICAL VALUES","6a2ed519":"# LOGISTIC REGRESSION"}}