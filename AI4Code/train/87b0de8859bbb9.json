{"cell_type":{"816d3258":"code","ef9e88f6":"code","2c4ac26c":"code","b2a55308":"code","59dcf3b5":"code","ef6fc509":"code","eaffdf5c":"code","98ff1f19":"code","d1f3a54b":"code","408d93da":"code","0163fa4b":"code","e4b8c600":"code","68c5733a":"code","5e50c3bd":"code","3816694c":"code","f758821c":"code","87b74eb7":"code","4a4e48a7":"code","6415167c":"code","906ce2d4":"markdown"},"source":{"816d3258":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt","ef9e88f6":"train_data = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv',\n                        low_memory = False)\ntrain_data.shape","2c4ac26c":"train_data.head()","b2a55308":"train_data.info()","59dcf3b5":"train_data.isna().sum()","ef6fc509":"train_data.target.value_counts()","eaffdf5c":"from sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\n\nnp.random.seed(42)\n\nmodels = {'RandomForestClassifier': RandomForestClassifier(n_jobs=-1,random_state=42),\n          'SGDClassifier': SGDClassifier(n_jobs=-1,random_state=42),\n          'LogisticRegression': LogisticRegression(solver='liblinear',random_state=42,dual=False),\n          'LinearSVC': LinearSVC(dual=False),\n          'GradientBoostingClassifier':GradientBoostingClassifier(),\n          }\n\nX = train_data.drop(columns= ['id','target'],axis=1)\ny = train_data['target']\n\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size = 0.2)\n\nX_train = X_train[:20000]\ny_train = y_train[:20000]\nX_val = X_val[:20000]\ny_val = y_val[:20000]\n\ndef model_fit_score(models,X_train,X_val,y_train,y_val):\n    model_scores = {}\n    for lables,model in models.items():\n        model.fit(X_train,y_train)\n        model_scores[lables]=model.score(X_val,y_val)\n    return model_scores","98ff1f19":"model_scores = model_fit_score(models=models,\n                               X_train=X_train,\n                               X_val=X_val,\n                               y_train=y_train,\n                               y_val=y_val)\nmodel_scores","d1f3a54b":"model_compare = pd.DataFrame(model_scores, index = ['accuracy'])\nmodel_compare.T.plot.bar()\nplt.xticks(rotation=0);","408d93da":"import warnings\nwarnings.filterwarnings('ignore')","0163fa4b":"lg_grid = {'solver': ['liblinear','sag','saga'],\n           'C':np.logspace(-4,4,30)}\nlsvm_grid = {'loss':['hinge','squared-hinge'],\n             'C':np.logspace(-4,4,30)}\n\nlg_model = RandomizedSearchCV(estimator = LogisticRegression(),\n                              param_distributions = lg_grid,\n                              cv = 5,\n                              n_iter = 100,\n                              verbose = True)\n\nlsvm_model = RandomizedSearchCV(estimator = LinearSVC(),\n                               param_distributions = lsvm_grid,\n                               cv = 5,\n                               n_iter = 100,\n                               verbose = True)\nlg_model.fit(X_train,y_train)\nlsvm_model.fit(X_train,y_train)","e4b8c600":"lg_model.score(X_val,y_val), lsvm_model.score(X_val,y_val)","68c5733a":"lsvm_model.best_params_","5e50c3bd":"X_train,X_val,y_train,y_val = train_test_split(X,y,test_size = 0.25)\n\nmodel = LinearSVC(random_state =42, loss = 'hinge', C = 0.001268)\n\nmodel.fit(X_train,y_train)\n\nprint(f'The complete accuracy obtained is {model.score(X_val,y_val)*100:.2f} %')\n\n\n","3816694c":"from sklearn.metrics import plot_roc_curve\n\nplot_roc_curve(model,X_val,y_val)","f758821c":"test_data = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv',\n                       low_memory = False)\ntest_data.head()","87b74eb7":"X_test = test_data.drop('id',axis = 1)\nX_test.head()","4a4e48a7":"preds = model.predict(X_test)\npreds","6415167c":"df = pd.DataFrame({'id': test_data['id'],\n                   'target': preds})\ndf.to_csv('TP_Nov2021.csv',index = False)\n","906ce2d4":"# Machine Learning Playground Practice"}}