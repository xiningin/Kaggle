{"cell_type":{"f97d86a2":"code","6680a0cb":"code","8f3f98ee":"code","0b6be6e4":"code","4e32fa7a":"code","daa57d77":"code","26252977":"code","56833192":"code","421c30ed":"code","7cb74bef":"code","52508163":"code","60200448":"code","94e7fdd7":"code","20d9363e":"code","82766b88":"code","52c45266":"code","11bc76f0":"code","4b1eed9b":"code","91f97d7e":"code","826756cd":"code","f58449a3":"code","cc63ceac":"code","03ef1b0b":"code","8f84c55f":"code","b1daaf64":"code","3407d9de":"code","b0d23e58":"code","2d4b9b1b":"code","bec40410":"code","74b1fd59":"code","fdc3400d":"code","31bcb52b":"code","68b95f12":"code","7df132c2":"code","16627cfa":"code","c3dfca3f":"code","7bfdc6d5":"code","ea15a1fe":"code","a38f2438":"code","4f736901":"code","9cf76034":"code","cf39ef70":"code","bfcc891f":"code","85286ace":"code","dd9823c6":"code","8b4d3d42":"code","cc36b29f":"code","2f33fdb9":"code","d3ab485a":"code","d959ca31":"code","49099ed7":"code","6f2c55f8":"code","f19d0cbd":"code","73996640":"code","0eb9bd37":"code","15cb08f5":"code","b2e5e588":"code","fb1d643d":"code","6d92b481":"markdown","a286ec22":"markdown","bceeb8d4":"markdown","61432b50":"markdown","7e856776":"markdown","a4a6aaf5":"markdown","044f20bb":"markdown","92ceef9b":"markdown","692c9e58":"markdown","7cf95b23":"markdown","2af5bfaf":"markdown","2154b00c":"markdown","2255f659":"markdown","710f6e30":"markdown","4dfc76b2":"markdown","319c464c":"markdown","ba125aef":"markdown","ce727c5d":"markdown","405ba76d":"markdown","7dd50fae":"markdown","25e2c91f":"markdown","b60fe7d0":"markdown","95fcad4a":"markdown","f8f84621":"markdown","92c0b6cb":"markdown","88b382e3":"markdown","0d3581c0":"markdown","67cb68e3":"markdown","5ec99b9f":"markdown","9eeb7bd3":"markdown","7134d1f7":"markdown","b6fcc80f":"markdown","b905db2b":"markdown","b3d04aba":"markdown","569d4b09":"markdown","6504915b":"markdown","303269a0":"markdown"},"source":{"f97d86a2":"#Basic Libraries\nimport pandas as pd\nimport numpy as np \nimport calendar\nimport os\n\n#Visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.figure_factory as ff \nimport plotly.graph_objects as go\nfrom plotly.offline import iplot, init_notebook_mode\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nfrom plotly import tools\nimport plotly.express as px\n\ninit_notebook_mode(connected=False)  # Set notebook mode to work in offline\n\n#Statistical libraries an ML\nimport scipy\nimport statistics\nimport sklearn\nfrom sklearn.cluster import KMeans\nimport statsmodels as sm","6680a0cb":"df = pd.read_excel('..\/input\/superstore\/US Superstore data.xls')\noriginal_data = df.copy()\ndf.head()","8f3f98ee":"df.info()","0b6be6e4":"df[['Sales','Discount','Profit','Quantity']].describe()","4e32fa7a":"# df.head().style.background_gradient(cmap=sns.light_palette('green', as_cmap=True))\ndf.head(5).style.highlight_max(axis=0)","daa57d77":"corr = df.corr()\n\ndata=go.Heatmap(z=corr.values,\n                x=corr.index.values.tolist(),\n                y=corr.index.values.tolist(),\n                hoverinfo='all')\nlayout = go.Layout(title='Correlation Heatmap',titlefont=dict(size=20))\n    \niplot(dict(data=data,layout=layout))","26252977":"#In this data We have a right skewed distribution in which most Sales are between  0 \u2212 80000.\n\nfig = make_subplots(1,2,subplot_titles=('Sales Distribution','Log Sales Distribution'))\n\nfig.append_trace(go.Histogram(x=df['Sales'],\n                             name='Sales Distribution') ,1,1)\nfig.append_trace(go.Histogram(x=np.log10(df['Sales']),\n                              name='Log Sales Distribution')  ,1,2)\n\niplot(dict(data=fig))","56833192":"Q25 = np.quantile(df['Sales'],q=0.25)\nQ75 = np.quantile(df['Sales'],q=0.75)\nIQR = Q75 - Q25\ncut_off = IQR * 1.5\n\nprint('Number of Sales Lower Outliers : ',df[df['Sales']<=(Q25 - cut_off)]['Sales'].count())\nprint('Number of Sales Upper Outliers : ',df[df['Sales']>=(Q75 + cut_off)]['Sales'].count())","421c30ed":"temp_data = df.drop(['Row ID','Order ID','Customer ID','Country','Product ID'],axis=1)","7cb74bef":"# Defining new columns in the data to deal with the year and months\n\ntemp_data['Order Date'] = pd.to_datetime(temp_data['Order Date'])\n\ntemp_data['year'] = temp_data['Order Date'].apply(lambda data :data.year)\ntemp_data['month'] = temp_data['Order Date'].apply(lambda data :data.month)","52508163":"Quantity = temp_data['Quantity'].unique()\ndata = []\n\nfor q in Quantity:\n    data.append(go.Box(y=temp_data[temp_data['Quantity']==q]['Sales'],\n                      name=str(q),\n                      boxmean=True))\n    \nlayout = go.Layout(title='BoxPlots For Each Quantity' ,\n                  xaxis=dict(title='Quantity',titlefont=(dict(size=18))),\n                  yaxis=dict(title='Sales',titlefont=(dict(size=18))))\n\niplot(dict(data=data,layout=layout))","60200448":"temp = df.groupby('Region').sum().sort_values('Sales',ascending=False)\n\ndata = []\n\ndata.append(go.Bar(x=temp.index,y=temp['Sales'],name='Sales'))\ndata.append(go.Bar(x=temp.index,y=temp['Profit'],name='Profits'))\n\nlayout = go.Layout(xaxis=dict(title='Region',titlefont=dict(size=20)),\n                   yaxis=dict(title='Sales\/Profits',titlefont=dict(size=20)))\n\niplot(dict(data=data,layout=layout))","94e7fdd7":"# data = df.groupby('Region').sum().sort_values('Sales',ascending=False)\nshowlegend = [ True, False, False, False]\ni = 0\ndata = []\n\nfor reg in df['Region'].unique():\n    data.append(go.Violin(x=df[df['Region']==reg]['Region'],\n                            y=df[df['Region']==reg]['Sales'],\n                            name='Sales',\n                            jitter=0,\n                            box={'visible':True},\n                            meanline={'visible':True},\n                            line={\"color\": '#F78181'},\n                            side='negative',\n                            marker=dict(color= '#81F781'),\n                           showlegend=showlegend[i]))\n    \n    data.append(go.Violin(x=df[df['Region']==reg]['Region'],\n                            y=df[df['Region']==reg]['Profit'],\n                            name='Profits',\n                            jitter=0,\n                            box={'visible':True},\n                            meanline={'visible':True},\n                            line={\"color\": '#00FF40'},\n                            side='positive',\n                            marker=dict(color= '#F78181'),\n                            showlegend=showlegend[i]))\n    i+=1\n\n\nlayout = dict(title='Sales & Profit Distribution<br><i><i>Grouped By Region',\n              width=1000,height=600,\n              yaxis=dict(title='Profits & Sales',titlefont=dict(size=20)))\n\niplot(dict(data=data,layout=layout))","20d9363e":"names = ['South Distribution','Log South Distribution','West Distribution','Log West Distribution',\n         'Central Distribution','Log Central Distribution',\n         'East Distribution','Log East Distribution']\n\nfig_1 = make_subplots(4,2,subplot_titles=names)\n\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Region']=='South']['Sales'],name='South Distribution'),1,1)\nfig_1.add_trace(go.Histogram(x=np.log(temp_data[temp_data['Region']=='South']['Sales']),name='Log South Distribution'),1,2)\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Region']=='West']['Sales'],name='West Distribution'),2,1)\nfig_1.add_trace(go.Histogram(x=np.log(temp_data[temp_data['Region']=='West']['Sales']),name='Log West Distribution'),2,2)\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Region']=='Central']['Sales'],name='Central Distribution'),3,1)\nfig_1.add_trace(go.Histogram(x=np.log(temp_data[temp_data['Region']=='Central']['Sales']),name='Log Central Distribution'),3,2)\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Region']=='East']['Sales'],name='East Distribution'),4,1)\nfig_1.add_trace(go.Histogram(x=np.log(temp_data[temp_data['Region']=='East']['Sales']),name='Log East Distribution'),4,2)","82766b88":"top_10_state_sales = temp_data.groupby('State').sum()['Sales'].sort_values(ascending=False)[0:10]\ntop_10_state_profits = temp_data.groupby(by='State').sum().sort_values(by='Sales',ascending=False)[0:10]['Profit']\n\ndata=[go.Bar(x=top_10_state_sales.index,\n             y=top_10_state_sales,\n             name='Top 10 States Sales'),\n      go.Bar(x=top_10_state_profits.index,\n             y=top_10_state_profits,\n             name='Top 10 States Profits')]\n\nlayout=go.Layout(dict(title=\"Grouped Bar Plot Fot Sales and Profits<br>(For The Top Ten State Sales)\",\n                      barmode='group'))\n    \niplot(dict(data=data,layout=layout))","52c45266":"#Grouping the data by state\ntemp_data.groupby('State').sum().head(10).style.background_gradient(cmap='Blues')","11bc76f0":"fig = go.Figure(data=px.scatter(x=temp_data.groupby('State').sum()['Sales'],\n                                y=temp_data.groupby('State').sum()['Profit'],\n                                hover_name=temp_data.groupby('State').sum().index,\n                                size=temp_data.groupby('State').sum()['Quantity']))\n\nfig['layout']=go.Layout(title='Sales & Profits by States',\n                        titlefont=dict(size=25),\n                        xaxis=dict(title='Sales',titlefont=dict(size=18)),\n                        yaxis=dict(title='Profits',titlefont=dict(size=18)))\niplot(dict(data=fig))","4b1eed9b":"data=go.Pie(labels=df['Sub-Category'].value_counts().index,\n            values=df['Sub-Category'].value_counts(),\n            textinfo='label+percent',\n            hoverinfo='label+percent',\n            marker=dict(line=dict(width=1.5)))\n\nlayout=go.Layout(title='Pie Plot for Total Sales for each Sub-Category',\n                 titlefont=dict(size=25),\n                 height=700)\n\niplot(dict(data=data,layout=layout))","91f97d7e":"#Creating a sales piviot table with sub_categories and year as indices and months as columns\nsub_category_year = pd.pivot_table(data=temp_data,values='Sales',index=['Sub-Category','year'],columns='month').rename(\n    columns=lambda x:calendar.month_name[x])\n    \nsub_category_year.style.background_gradient(cmap='Blues')","826756cd":"temp = df.groupby(by=['Sub-Category']).sum().sort_values(by='Sales',ascending=False).reset_index()\n\ndata=go.Bar(x=temp['Sub-Category'],\n            y=temp['Sales'])\n\nlayout=go.Layout(title='Bar Plot For Sub-Categrotries Sales',titlefont=dict(size=25),\n                 xaxis=dict(title='Sub-Categroies',titlefont=dict(size=19)),\n                 yaxis=dict(title='Sales',titlefont=dict(size=19)),\n                 orientation=45)\n    \niplot(dict(data=data,layout=layout))","f58449a3":"temp = df.groupby(by=['Sub-Category']).sum().sort_values(by='Profit',ascending=False).reset_index()\n\ndata=go.Bar(x=temp['Sub-Category'],\n            y=temp['Profit'])\n\nlayout=go.Layout(title='Bar Plot For Sub-Categrotries Profits',titlefont=dict(size=25),\n                 xaxis=dict(title='Sub-Categroies',titlefont=dict(size=19)),\n                 yaxis=dict(title='Profit',titlefont=dict(size=19)),\n                 orientation=45)\n    \niplot(dict(data=data,layout=layout))","cc63ceac":"discount = temp_data['Sub-Category'].unique()\ndata = []\n\nfor dis in discount:\n    data.append(go.Box(y=temp_data[temp_data['Sub-Category']==dis]['Sales'],\n                      name=str(dis),\n                      boxmean=True))\n    \nlayout = go.Layout(title='BoxPlots For Sub-Categories' ,\n                  xaxis=dict(title='Sub Categories',titlefont=(dict(size=18))),\n                  yaxis=dict(title='Sales',titlefont=(dict(size=18))))\n\niplot(dict(data=data,layout=layout))","03ef1b0b":"data=px.scatter(df,x='Sales',y='Profit',size='Quantity')\n\ndata['layout'].update(title='Scatter plot For The Relationshhip Between Sales And Profits',\n                      titlefont=dict(size=20),\n                      xaxis=dict(title='Sales',titlefont=dict(size=19)),\n                      yaxis=dict(title='Profit',titlefont=dict(size=19)))\n\niplot(dict(data=data))","8f84c55f":"temp_data = temp_data.drop(temp_data[(temp_data['Sales']>=6000)|(temp_data['Profit']<-4000)].index,axis=0)","b1daaf64":"data=px.scatter(temp_data,x='Sales',y='Profit',size='Quantity')\n\ndata['layout'].update(title='Scatter plot For The Relationshhip Between Sales And Profits without outliers',\n                        titlefont=dict(size=20),\n                        xaxis=dict(title='Sales',titlefont=dict(size=19)),\n                        yaxis=dict(title='Profit',titlefont=dict(size=19)))\n\niplot(dict(data=data,layout=layout))","3407d9de":"data=go.Histogram(x=temp_data['Sales'])\n\nlayout = go.Layout(title='Sales Distribution Without Outliers<br>(No sales value higher than 6000 or Profits lower than - 4000)',\n                   titlefont=dict(size=20),\n                   xaxis=dict(title='Sales',titlefont=dict(size=19)),\n                   yaxis=dict(title='Count',titlefont=dict(size=19)))\n\niplot(dict(data=data,layout=layout))","b0d23e58":"labels = ['o% Discount','20% Discount','70% Discount','80% Discount','30% Discount','40% Discount',\n          '60% Discount','10% Discount','50% Discount','15% Discount','32% Discount','45% Discount']\n\ntrace_pie = go.Pie(labels=labels,\n                   values=temp_data['Discount'].value_counts(),\n                   textinfo='label+percent',hoverinfo='label+percent',\n                   marker=dict(line=dict(width=1.5)),)\n\nlayout = go.Layout(title='Discount Pie Plot' ,titlefont=dict(size=20))\n\niplot(dict(data=trace_pie,layout=layout))","2d4b9b1b":"data=go.Histogram(x=temp_data.sort_values('Discount')['Discount']),\n\nlayout=go.Layout(xaxis=dict(title='Sales Histogram Plot For Each Discount',title_font=dict(size=20)))\n\niplot(dict(data=data,layout=layout))","bec40410":"fig_1 = make_subplots(3,2,subplot_titles=['o% Discount','10% Discount','15% Discount',\n                                          '20% Discount','30% Discount','32% Discount'],\n                      horizontal_spacing=0.1,vertical_spacing=0.1)\n\nfig_2 = make_subplots(3,2,subplot_titles=['40% Discount','45% Discount','50% Discount',\n                                          '60% Discount','70% Discount','80% Discount'],\n                      horizontal_spacing=0.1,vertical_spacing=0.1)\n\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0]['Sales'],name='0% Distribution'),1,1)\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.1]['Sales'],name='10% Distribution'),1,2)\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.15]['Sales'],name='15% Distribution'),2,1)\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.2]['Sales'],name='20% Distribution'),2,2)\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.3]['Sales'],name='30% Distribution'),3,1)\nfig_1.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.32]['Sales'],name='32% Distribution'),3,2)\nfig_2.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.4]['Sales'],name='40% Distribution'),1,1)\nfig_2.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.45]['Sales'],name='45% Distribution'),1,2)\nfig_2.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.5]['Sales'],name='50% Distribution'),2,1)\nfig_2.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.6]['Sales'],name='60% Distribution'),2,2)\nfig_2.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.7]['Sales'],name='70% Distribution'),3,1)\nfig_2.add_trace(go.Histogram(x=temp_data[temp_data['Discount']==0.8]['Sales'],name='80% Distribution'),3,2)\n\nfig_1.show()\nfig_2.show()","74b1fd59":"#Creating a new column With Categorical Discount (very_low_dis , low_dis , high_dis , very_high_dis)\ntemp_data['dis_cat'] = pd.cut(df['Discount'],\n                              bins=(-1,0.15,0.30,.5,1),\n                              labels=['very_low_dis','low_dis','high_dis','very_high_dis'])","fdc3400d":"discount = [temp_data['dis_cat'].unique()][0]\ndata = []\n\nfor dis in discount:\n    data.append(go.Box(y=temp_data[temp_data['dis_cat']==dis]['Sales'],\n                      name=str(dis),\n                      boxmean=True))\n    \nlayout = go.Layout(title='BoxPlots For Discount Categories' ,\n                  xaxis=dict(title='Discount',titlefont=(dict(size=18))),\n                  yaxis=dict(title='Sales',titlefont=(dict(size=18))))\n\niplot(dict(data=data,layout=layout))","31bcb52b":"from scipy.stats import ttest_ind\n# from sklearn.preprocessing\n\nprint(ttest_ind(temp_data['Sales'],pd.get_dummies(temp_data['dis_cat'])))","68b95f12":"import statsmodels.api as sm\nimport statsmodels\n\nresult = statsmodels.formula.api.ols('Sales~dis_cat' ,data=temp_data).fit()\nprint(result.summary())","7df132c2":"temp = temp_data.groupby('month').sum().reset_index()\ntemp['month'] = [calendar.month_name[i] for i in range(13)][1:]\ntemp = temp.set_index('month')","16627cfa":"data=[go.Scatter(y=temp['Sales'],x=temp.index,name='Sales Trend Line'),\n      go.Scatter(y=temp['Profit'],x=temp.index,name='Profit Trend Line')]\n\nlayout = go.Layout(title='Sales\/Profits Line plot',titlefont=(dict(size=25)),\n                   xaxis=dict(title='Months',titlefont=(dict(size=18))),\n                   yaxis=dict(title='Sales\/Profit',titlefont=(dict(size=18))))\n\niplot(dict(data=data,layout=layout))","c3dfca3f":"temp = temp_data.groupby(['year']).sum()\n\ndata=[go.Scatter(y=temp['Sales'],x=temp.index,name='Sales Trend Line'),\n      go.Scatter(y=temp['Profit'],x=temp.index,name='Profit Trend Line')]\n\niplot(dict(data=data,layout=layout))","7bfdc6d5":"south = np.mean(df[df['Region']=='South']['Sales'])\nwest = np.mean(df[df['Region']=='West']['Sales'])\ncentral = np.mean(df[df['Region']=='Central']['Sales'])\neast = np.mean(df[df['Region']=='East']['Sales'])\n\nfig = make_subplots(rows=1, cols=2,\n                    specs=[[{\"type\": \"scatterpolar\"}, {\"type\": \"bar\"}]],\n                    subplot_titles=['Scattter Polar Plot for the mean sales of each region',\n                                    'Bar for the mean sales of each region'])\n\nfig.append_trace(go.Scatterpolar(r=[south,west,central,east],\n                                 theta=df['Region'].unique(),\n                                 fill='toself',\n                                 hoverinfo='all',\n                                 showlegend=False),1,1)\n\nfig.append_trace(go.Bar(x=df['Region'].unique(),\n                        y=[south,west,central,east],\n                        showlegend=False),1,2)\n\niplot(dict(data=fig))","ea15a1fe":"df_k = df[['Ship Mode','Quantity','Sales','Profit','Sub-Category','Category','Region']].copy()","a38f2438":"sub_Cat = df_k['Sub-Category'].astype('category')\nsub_Cat_dict = dict(enumerate(sub_Cat.cat.categories))\nprint(sub_Cat_dict)","4f736901":"category_cat = df_k['Category'].astype('category')\ncat_dict = dict(enumerate(category_cat.cat.categories))\nprint(cat_dict)","9cf76034":"region_cat = df_k['Region'].astype('category')\nregion_dict = dict(enumerate(region_cat.cat.categories))\nprint(region_dict)","cf39ef70":"ship_cat = df_k['Ship Mode'].astype('category')\nship_dict = dict(enumerate(ship_cat.cat.categories))\nprint(ship_dict)","bfcc891f":"# first we reverse our dictionaries to apply them on the dataframe \n\nsub_map = {v: k for k, v in sub_Cat_dict.items()}\ncat_map = {v: k for k, v in cat_dict.items()}\nregion_map = {v: k for k, v in region_dict.items()}\nship_map = {v: k for k, v in ship_dict.items()}\ndf_k = df_k.replace({'Ship Mode':ship_map,'Region':region_map,'Category':cat_map,'Sub-Category':sub_map})\ndf_k","85286ace":"d = pd.merge(df_k['Sub-Category'],df.\\\n             rename(columns={'Sub-Category':'Sub-Category_cat'}),on=df.index)[['Sub-Category','Sub-Category_cat']]\nd","dd9823c6":"d = pd.merge(df_k['Region'],df.\\\n             rename(columns={'Region':'Region_cat'}),on=df.index)[['Region','Region_cat']]\nd","8b4d3d42":"d = pd.merge(df_k['Ship Mode'],df.\\\n             rename(columns={'Ship Mode':'Ship_Mode_cat'}),on=df.index)[['Ship Mode','Ship_Mode_cat']]\nd","cc36b29f":"d = pd.merge(df_k['Category'],df.\\\n             rename(columns={'Category':'Category_cat'}),on=df.index)[['Category','Category_cat']]\nd","2f33fdb9":"df_k = df_k.dropna()","d3ab485a":"from sklearn.cluster import KMeans\n\nk = []\nfor i in range(1,30):\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(df_k[['Ship Mode','Quantity','Sales','Profit','Sub-Category','Category','Region']])\n    k.append(kmeans.inertia_)","d959ca31":"elbow_df = pd.DataFrame(index=range(1,30),data=k).reset_index()\nelbow_df = elbow_df.rename(columns={'index':'Number_of_clusters',0:'Sum_of_intra_cluster_squares'})","49099ed7":"data = go.Line(x=tuple(range(1,30)),y=elbow_df['Sum_of_intra_cluster_squares'])\nlayout = go.Layout(title='Elbow-Method results',\n                   titlefont=dict(size=20),\n                  xaxis=dict(title='Number of clusters',titlefont=dict(size=18)),\n                  yaxis=dict(title='Sum of intra cluster squares',titlefont=dict(size=18))) \niplot(dict(data=data,layout=layout))","6f2c55f8":"from sklearn.cluster import MiniBatchKMeans\n\nkmeans = MiniBatchKMeans(n_clusters=6,\n                          random_state=0,\n                          batch_size=10)\n\ny_pred = kmeans.fit_predict(df_k[['Ship Mode','Quantity','Sales','Profit','Sub-Category','Category','Region']])","f19d0cbd":"df_k['k_means_clusters'] = pd.Series(y_pred)\ndf_k","73996640":"px.scatter(data_frame=df_k ,\n           x='Sales',\n           y='Quantity',\n           color='k_means_clusters')","0eb9bd37":"px.scatter(data_frame=df_k ,\n           x='Profit',\n           y='Sales',\n           color='k_means_clusters')","15cb08f5":"px.scatter_3d(data_frame=df_k,\n              x='Sales',\n              y='Profit',\n              z='Region',\n              color='k_means_clusters',)","b2e5e588":"px.scatter_3d(data_frame=df_k,\n              x='Sales',\n              y='Profit',\n              z='Sub-Category',\n              color='k_means_clusters',)","fb1d643d":"px.scatter_3d(data_frame=df_k,\n              x='Sales',\n              y='Quantity',\n              z='Ship Mode',\n              color='k_means_clusters',)","6d92b481":"#### Sales Distribution For each Region","a286ec22":"#### Sales Histogram Plot For Each Discount","bceeb8d4":"# Sales and Profits Data Line","61432b50":"#### Creating a boxplot for each Quantity ","7e856776":"### Forth (Ship Mode)","a4a6aaf5":"### Let's do the encoding","044f20bb":"# Discount Analysis","92ceef9b":"# States Analysis","692c9e58":"#### Profits and sales Boxplots for each Region","7cf95b23":"#### Profits Barplot for each sub_categories","2af5bfaf":"> <b>Third (Region)","2154b00c":"#### Profits and sales Bar plots for each Region","2255f659":"#### Removing data have sales value higher than 6000 or Profits lower than - 4000","710f6e30":"#### Sales Barplot for each sub_categories","4dfc76b2":"> ## Let's see the resulst","319c464c":"### Now let's apply K-Means with (k=6)","ba125aef":"# Region Analysis","ce727c5d":"#### Sales Boxplot for each sub_categories","405ba76d":"#### Sales Distribution For each Discount","7dd50fae":"#### Top 10 States Sales And Profits","25e2c91f":"#### Sub-Category Pie Plot","b60fe7d0":"#### Sales and Profits Scatter plot with Quantity as a size","95fcad4a":"#### Discount Pie plot","f8f84621":"#### A HeatMap For Data Correlation","92c0b6cb":"##### P-value: The p-value being higher than 0.05 tells us that we take the Null hypothesis, meaning that there is no a significant change between the four discount categories when it comes to Sales (No need to add dis_cat to the data).","88b382e3":"#### Sales Distribution","0d3581c0":"#### Scatter plot for sales and profits for each region ","67cb68e3":"# Sales Analysis\n###### Using Logarithms helps us to have a normal distribution which could help us in a number of different ways such as outlier detection","5ec99b9f":"> <b>Second (Category)","9eeb7bd3":"#### Before applying k-Means Let's apply the elbow method to know the best number of clusters (K)","7134d1f7":"# Sub-Categories Analysis","b6fcc80f":"#### Sales Outliers","b905db2b":"><b>We find that the best number of clusters is 6","b3d04aba":"### <b><h2 align=\"center\" style='color:black' > Thanks<\/h2>","569d4b09":"## Preprocessing the Data\n#### <li>Lets see how to do encoding\n> <b>First (Sub-Category)","6504915b":"# Profits Analysis","303269a0":"### <h1 align=\"center\"> US Superstore <\/h1>\n<h2 align=\"lef\" style='color:red' > Upvote my work if you found it useful<\/h2>\n<h2>Wait a few seconds until the notebook is ready<\/h2>\n<img src='https:\/\/upload.wikimedia.org\/wikipedia\/en\/2\/20\/NBC_Superstore.png' width=1000 hight=600><br>\n<b>You can also see:<\/b>\n<ul>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/predicting-the-survival-of-titanic-top-6'>Predicting the Survival of Titanic (Top 6%)<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/create-shapash-dashboard'>Create Shapash dashboard<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/learn-data-analysis-using-sql-and-pandas'>Learn Data Analysis using SQL and Pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/hotel-booking-eda-cufflinks-and-plotly'>Hotel booking EDA (Cufflinks and plotly)<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/data-exploration-and-visualization-uber-data'>Data exploration and visualization(Uber Data)<\/a><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/suicide-rates-visualization-and-geographic-maps\/edit\/run\/53135916'>Suicide Rates visualization and Geographic maps<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-cufflinks-and-pandas'>Superstore Analysis With Cufflinks and pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>European soccer database with sqlite3<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>European soccer database with sqlite3<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>Chinook data questions with sqlite3<\/a><br>"}}