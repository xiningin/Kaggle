{"cell_type":{"82c663c5":"code","f982c9cd":"code","de0ec70c":"code","74cf0b85":"code","6593a065":"code","7b49e349":"code","d7057c0c":"code","14da0331":"code","25d89dc4":"code","f5ed5572":"code","501d1aeb":"code","3763a85f":"code","41710a1f":"code","456ff414":"code","ecad4c4c":"code","936e3424":"code","25578d2c":"code","b64481be":"code","6d7bd527":"code","dc165577":"code","9f55b454":"code","8f96bf26":"code","0c2ce747":"code","1dc1ab3d":"code","987f46df":"code","5285b5fa":"code","36510526":"code","41a7b31c":"code","0017949e":"code","4c87fb6e":"code","308d4a0f":"markdown","2703f557":"markdown","cc6b4ad6":"markdown","46818353":"markdown","b2aa90ad":"markdown","f87c5c86":"markdown","faab8f6f":"markdown","bc230483":"markdown","79642f5f":"markdown","6816b6c6":"markdown","29a59c3a":"markdown","775d792d":"markdown","5e0af297":"markdown"},"source":{"82c663c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f982c9cd":"# plt.style.available","de0ec70c":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","74cf0b85":"train_df.columns","6593a065":"train_df.head()","7b49e349":"train_df.describe()","d7057c0c":"train_df.info()","14da0331":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","25d89dc4":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","f5ed5572":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","501d1aeb":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","3763a85f":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","41710a1f":"train_df[[\"Pclass\",\"Survived\"]]","456ff414":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","ecad4c4c":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","936e3424":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","25578d2c":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","b64481be":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","6d7bd527":"train_df.loc[detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","dc165577":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis=0).reset_index(drop = True)","9f55b454":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df, test_df], axis=0).reset_index(drop=True)","8f96bf26":"train_df.head()","0c2ce747":"train_df.columns[train_df.isnull().any()]","1dc1ab3d":"train_df.isnull().sum()","987f46df":"train_df[train_df[\"Embarked\"].isnull()]","5285b5fa":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","36510526":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"c\")\ntrain_df[train_df[\"Embarked\"].isnull()]","41a7b31c":"train_df[train_df[\"Fare\"].isnull()]","0017949e":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","4c87fb6e":"train_df[train_df[\"Fare\"].isnull()]","308d4a0f":"* float64(2): Fare and Age\n* int64(5): Pclass, Sibsp, Parch, PassengerId and Survived\n* object(5): Cabin,Embarked, Ticket, Name and Sex","2703f557":"<a id = \"7\"><\/a><br>\n# Outlier Detection","cc6b4ad6":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","46818353":"<a id = \"5\"><\/a><br>\n## Numerical Variable","b2aa90ad":"* [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        \n        * [Numerical Variable Analysis](#5)\n","f87c5c86":"<a id = \"4\"><\/a><br>\n## Categorical Variable","faab8f6f":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","bc230483":"## Intorduction\nThe sinking of Titanic is one of the most notorious shipwrecks is the history. In 1912, during her voyage, the Titanic sank after coliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = \"blue\" >\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        \n        * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","79642f5f":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable : Survived, Sev, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable : Fare, age and passengerid","6816b6c6":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* Sibsp - Survived\n* Parch - Survived","29a59c3a":"<a id = \"1\"><\/a><br>\n# Load and Check Data","775d792d":"<a id = \"9\"><\/a><br>\n## Find Missing Value","5e0af297":"<a id = \"2\"><\/a><br>\n## Variable Description\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or die(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings \/spouses\n1. Parch: number of parent\/children\n1. Ticket: ticket number\n1. Fare: amounth of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked(c = Cherbourg, Q = Queenstown, S = Southampton)\n"}}