{"cell_type":{"acdc85f0":"code","68f5c554":"code","f18d7071":"code","c5fb08a7":"code","702738b8":"code","461dd40e":"code","483609d5":"code","b4457436":"code","dcccaadd":"code","7f41aace":"code","c8f8d99c":"code","730a18f5":"code","d2c537d9":"code","9144ac2f":"code","99da34b6":"code","7e366181":"code","7771af8f":"code","3284f157":"code","0b3e333a":"code","c35d8448":"code","acbc6088":"code","93c3a4bb":"code","3828bcc2":"code","0a6f6f8b":"code","e22e4a26":"markdown","c50d9511":"markdown","25769896":"markdown","a9e1248d":"markdown","703ecd40":"markdown","c1750982":"markdown","cbce39f9":"markdown"},"source":{"acdc85f0":"import pandas as pd\nimport os\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.io\nimport plotly.offline as pyo\nimport scipy.stats as ss\nfrom plotly.subplots import make_subplots\nfrom imblearn.under_sampling import RandomUnderSampler\nimport plotly.figure_factory as ff\nimport time","68f5c554":"import pandas as pd\n..\/input\/titanic\ndf = pd.read_csv(r'C:\\Users\\tanav\\Downloads\\titanic\\train.csv')\ny='Survived'","f18d7071":"# MAIN FUNCTION\ndef eda_clf(df, y):\n    \"\"\"\n    Parametrs: \n    1. df - Pandas Dataframe \n    2. y - Categorical Dependent variable wrt which Data needs to be analyzed\n    Returns: HTML File with basic EDA\n    \"\"\"\n    start = time.time()\n    print(\"Shape of Dataframe:\", df.shape)\n    print(\"Split of Classes:\", df[y].value_counts(), sep =\"\\n\")\n    \n    df = undersample(df, y)\n    cont_cols, cat_cols=split_cols(df, y)\n    print(\"-\"*70)    \n    \n    fig6 = bar_plot(df, y)\n    print(\"Step 1\/8: Preliminary Data Analysis\")\n    \n    fig5 = description_table(df)\n    print(\"Step 2\/8: Description for Numerical Variables\")\n    \n    fig8 = univariate_histograms(df, cont_cols)\n    print(\"Step 3\/8: Histograms for Numerical Variables\")\n    \n    fig7 = univariate_bar_plots(df, y, cat_cols)\n    print(\"Step 4\/8: Bar Plots for Categorical Variables\")\n    \n    fig4 = pearson_matrix(df)\n    print(\"Step 5\/8: Pearson Correlation Matrix - Numerical Variables\")\n    \n    fig3 = cramer_matrix(df, cat_cols, y)\n    print(\"Step 6\/8: Cramer Correlation Matrix - Categorical Variables\")\n    \n    fig1 = box_plot(df, cont_cols, y)\n    print(\"Step 7\/8: Relation with dependent variable - Numerical Variables\")\n    \n    fig2 = stack_plot(df, cat_cols, y)\n    print(\"Step 8\/8: Relation with dependent variable - Categorical Variables\")\n    \n    print(\"-\"*70)\n    export_html(fig1, fig2, fig3, fig4, fig5, fig6, fig7, fig8)\n    print(\"HTML FILE saved at {0}\\SmartViz_Report.html\".format(os.getcwd()))\n    \n    end = time.time()\n    ttime = end-start\n    print(\"Time Taken: {0} seconds\".format(round(ttime,2)))","c5fb08a7":"def undersample(df, y):\n    X=df.drop([y],axis=1)\n    Y=df[[y]]\n    try:\n        undersample = RandomUnderSampler(random_state=121, sampling_strategy=0.2)\n        X, Y = undersample.fit_resample(X, Y)\n        print(\"Majority class undersampled to obtain ratio 1:5\")\n    except:\n        print(\"Undersampling Not Required.\")\n    df = pd.concat([X,Y], axis=1)\n    return df","702738b8":"def split_cols(df, y):\n    cont_cols=[]\n    cat_cols=[]\n    for col in df.columns:\n        if col!=y:\n            if len(pd.unique(df[col])) <= 30:\n                cat_cols.append(col)\n            elif (df.dtypes[col]=='int64' or df.dtypes[col]=='float64'):\n                cont_cols.append(col)\n    return cont_cols, cat_cols","461dd40e":"cont_cols, cat_cols = split_cols(df, y)","483609d5":"def univariate_bar_plots(df, y, cat_cols):\n    cols =[y] + cat_cols\n    fig = go.Figure()\n    df = df[cols]\n    for column in df.columns:\n        y0=df[column].value_counts()\n        if df.dtypes[column] in ('int64','float64', 'int32'):\n            xlab= [\"value_\" + str(x) for x in list(y0.index)]\n        else:\n            xlab = list(y0.index)\n        fig.add_trace(go.Bar(x=xlab, y=y0.values, name=column))\n\n    \n    def create_layout_button(column):\n            return dict(label= column, \n                    method = 'update',\n                      args = [{'visible': df.columns.isin([column]),\n                               'showlegend':False}])\n    \n    button_all = dict(label ='Select any one',\n                      method = 'update',\n                      args = [{'visible': df.columns.isin(df.columns),\n                               'showlegend':False}])\n    fig.update_layout(\n        updatemenus=[go.layout. Updatemenu(\n            active= 0,\n            buttons = [button_all] + list(df.columns.map(lambda column: create_layout_button(column)))\n        )])\n    fig.update_layout(height=500, width = 1200, title_text=\"Bar Plots for Categorical Variables\")\n    return fig","b4457436":"fig7 = univariate_bar_plots(df, y, cat_cols)\npyo.iplot(fig7)","dcccaadd":"def univariate_histograms(df, cont_cols):\n    df = df[cont_cols]\n    fig = go.Figure()\n    for column in df.columns:\n        fig.add_trace(go.Histogram(x=df[column].values, histnorm='probability'))\n\n    \n    def create_layout_button(column):\n            return dict(label= column, \n                    method = 'update',\n                      args = [{'visible': df.columns.isin([column]),\n                               'showlegend':False}])\n    \n    button_all = dict(label ='Select any one',\n                      method = 'update',\n                      args = [{'visible': df.columns.isin(df.columns),\n                               'showlegend':False}])\n    fig.update_layout(\n        updatemenus=[go.layout. Updatemenu(\n            active= 0,\n            buttons = [button_all] + list(df.columns.map(lambda column: create_layout_button(column)))\n        )])\n    fig.update_layout(height=500, width = 1200, title_text=\"Histograms for Numerical Variables\")\n    return fig","7f41aace":"fig8 = univariate_histograms(df, cont_cols)\npyo.iplot(fig8)","c8f8d99c":"def bar_plot(df, y):\n    zero = (df == 0).sum(axis=0)\n    zero_prct = zero\/len(df)*100\n    null = (df.isnull()).sum(axis=0)\n    null_prct = null\/len(df)*100\n    unq = df.nunique()\n    unq_prct = unq\/len(df)*100\n    df2 = pd.concat([null_prct, zero_prct,unq_prct], axis=1)\n    df2.columns = [\"Missing Values Percent\", \"Zeroes Percent\", \"Unique Values Percent\"]\n    \n    fig = go.Figure()\n    for column in df2.columns:\n        fig.add_trace(\n            go.Bar(\n                x = df2.index, \n                y = df2[column],\n                name = column,\n                hovertemplate=\"%{y:.2f}%\"\n            )\n        )\n\n    def create_layout_button(column):\n            return dict(label= column, \n                    method = 'update',\n                      args = [{'visible': df2.columns.isin([column]),\n                               'showlegend':False}])\n    \n    button_all = dict(label ='All',\n                      method = 'update',\n                      args = [{'visible': df2.columns.isin(df2.columns),\n                               'showlegend':True}])\n    fig.update_layout(\n        updatemenus=[go.layout. Updatemenu(\n            active= 0,\n            buttons = [button_all] + list(df2.columns.map(lambda column: create_layout_button(column)))\n        )])\n    fig.update_layout(height=500, width = 1200, title_text=\"Preliminary Data Analysis\", yaxis_title=\"Percentage\")\n    return fig","730a18f5":"fig6 = bar_plot(df, y)\npyo.iplot(fig6)","d2c537d9":"def description_table(df):\n    a = df.describe([0.05,0.25,0.5,0.75,.95]).round(2).T\n    fig = go.Figure(data=[go.Table(\n        header=dict(values=['Variable'] + list(a.columns),\n                    fill_color='paleturquoise',\n                    align='center',font=dict(color = \"Black\", size=14),\n        height=30),\n        cells=dict(values=[a.index]+[a[col] for col in a.columns],\n                   fill_color='lavender',\n                   align='center', height = 25))\n    ])\n    fig.update_layout(height=a.shape[1]*25+200, width = 1200,  title_text=\"Description for Numerical Variables\")\n\n    \n    return fig","9144ac2f":"fig5 = description_table(df)\npyo.iplot(fig5) ","99da34b6":"def pearson_matrix(df):\n    z=df.corr().round(2)\n    fig = go.Figure(go.Heatmap(z=z, x=z.index, y=z.index, colorscale= \"rdbu\",zmid=0))\n    fig.update_layout(height=600, width = 600,  title_text=\"Pearson Correlation Matrix - Numerical Variables\")\n    return fig","7e366181":"fig4 = pearson_matrix(df)\npyo.iplot(fig4)","7771af8f":"def cramers(x, y):\n    confusion_matrix = pd.crosstab(df[x],df[y])\n    chi2 = ss.chi2_contingency(confusion_matrix)[0]\n    n = confusion_matrix.sum().sum()\n    phi2 = chi2\/n\n    r, k = confusion_matrix.shape\n    phi2_new = max(0, phi2 - ((k-1)*(r-1))\/(n-1))    \n    r_new = r - ((r-1)**2)\/(n-1)\n    k_new = k - ((k-1)**2)\/(n-1)\n    v_new = np.sqrt(phi2_new \/ min( (k_new-1), (r_new-1)))\n    return v_new\n\ndef cramer_matrix(df, cat_cols, y):\n    cols = cat_cols.copy()\n    cols.append(y)\n    df = df[cols]\n    \n    z=pd.DataFrame(index=df.columns, columns=df.columns)\n    for i in df.columns:\n        for j in df.columns:\n            z[i][j] = cramers(i,j)\n    z=z.astype(float).round(2)\n    fig = go.Figure(go.Heatmap(z=z, x=z.index, y=z.index, colorscale= \"blues\"))\n    fig.update_layout(height=600, width = 600,  title_text=\"Cramer Correlation Matrix - Categorical Variables\")\n    return fig","3284f157":"fig3 = cramer_matrix(df, cat_cols, y)\npyo.iplot(fig3)","0b3e333a":"def box_plot(df, cont_cols, y):\n    cols = cont_cols.copy()\n    cols.append(y)\n    \n    df = df[cols]\n    fig = go.Figure()\n    for column in cont_cols:\n        y0=df[df[y]==0][column].values\n        y1=df[df[y]==1][column].values\n        fig.add_trace(go.Box(y=y0, name = 'Class: 0', boxpoints=False,\n                        marker_color = 'indianred'))\n        fig.add_trace(go.Box(y=y1, name = 'Class: 1', boxpoints=False,\n                        marker_color = 'lightseagreen'))\n        \n    \n\n    def create_layout_button(column):\n            return dict(label= column, \n                    method = 'update',\n                      args = [{'visible': np.repeat(df.columns.isin([column]),2),\n                               'showlegend':True}])\n    \n    df = df[cont_cols]\n    button_all = dict(label ='Select any one',\n                      method = 'update',\n                      args = [{'visible': np.repeat(df.columns.isin(df.columns),2),\n                               'showlegend':False}])\n    fig.update_layout(\n        updatemenus=[go.layout.Updatemenu(\n            active= 0,\n            buttons = [button_all] + list(df.columns.map(lambda column: create_layout_button(column)))\n        )])\n    fig.update_layout(height=500, width = 1200, title_text=\"Relation with dependent variable - Numerical Variables\")\n    return fig","c35d8448":"fig1 = box_plot(df, cont_cols, y)\npyo.iplot(fig1)","acbc6088":"def stack_plot(df, cat_cols, y):\n    cols = cat_cols.copy()\n    cols.append(y)\n    \n    df = df[cols]\n    fig = go.Figure()\n    for column in cat_cols:\n        t0=df[df[y]==0][column].value_counts()\n        t1=df[df[y]==1][column].value_counts()\n#         y2 = pd.concat([y0, y1], axis=1).fillna(0)\n#         t0=y2.iloc[:,0]*100\/(y2.iloc[:,0]+y2.iloc[:,1])\n#         t1=y2.iloc[:,1]*100\/(y2.iloc[:,0]+y2.iloc[:,1])\n        if df.dtypes[column]=='int64' or df.dtypes[column]=='float64':\n            xlab= [\"value_\" + str(x) for x in list(t0.index)]\n        else:\n            xlab = list(t0.index)\n        fig.add_trace(go.Bar(x=xlab, y=t0.values, name = 'Class: 0',\n                        marker_color = 'indianred', hovertemplate=\"%{y:.2f}%\"))\n        fig.add_trace(go.Bar(x=xlab, y=t1.values, name = 'Class: 1',\n                        marker_color = 'lightseagreen', hovertemplate=\"%{y:.2f}%\"))\n        #fig.update_layout(barmode=\"stack\")        \n        \n\n    def create_layout_button(column):\n            return dict(label= column, \n                    method = 'update',\n                      args = [{'visible': np.repeat(df.columns.isin([column]),2),\n                               'showlegend':True}])\n    \n    df = df[cat_cols]\n    button_all = dict(label ='Select any one',\n                      method = 'update',\n                      args = [{'visible': np.repeat(df.columns.isin(df.columns),2),\n                               'showlegend':False}])\n    fig.update_layout(\n        updatemenus=[go.layout. Updatemenu(\n            active= 0,\n            buttons = [button_all] + list(df.columns.map(lambda column: create_layout_button(column)))\n        )])\n    fig.update_layout(height=500, width = 1200, title_text=\"Relation with dependent variable - Categorical Variables\", yaxis_title=\"Percentage\")\n    return fig","93c3a4bb":"fig2 = stack_plot(df, cat_cols, y)\npyo.iplot(fig2)","3828bcc2":"def export_html(fig1, fig2, fig3, fig4, fig5, fig6, fig7, fig8):\n    text = '''<html><body><center>\n        <h1>SmartViz Automated EDA Report<\/h1>\n    <\/center><\/body><\/html>'''\n\n    text2 = '''<html><body><center>\n        <h4>Created by CDS Group 9, PGDBA 6, ISI under the supervision of Dr. Debapriyo Majumdar<\/h4>\n    <\/center><\/body><\/html>'''\n    with open('SmartViz_Report.html', 'a') as f:\n        f.write(text)\n        f.write(fig6.to_html(full_html=False, include_plotlyjs='cdn'))\n        f.write(fig5.to_html(full_html=False, include_plotlyjs='cdn'))\n        f.write(fig8.to_html(full_html=False, include_plotlyjs='cdn'))\n        f.write(fig7.to_html(full_html=False, include_plotlyjs='cdn'))\n        f.write(fig4.to_html(full_html=False, include_plotlyjs='cdn'))\n        f.write(fig3.to_html(full_html=False, include_plotlyjs='cdn'))\n        f.write(fig1.to_html(full_html=False, include_plotlyjs='cdn'))\n        f.write(fig2.to_html(full_html=False, include_plotlyjs='cdn'))\n        f.write(text2)","0a6f6f8b":"export_html()","e22e4a26":"___","c50d9511":"___","25769896":"___","a9e1248d":"___","703ecd40":"_______","c1750982":"___","cbce39f9":"____"}}