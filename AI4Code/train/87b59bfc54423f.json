{"cell_type":{"909918aa":"code","b3b294cd":"code","a9eb8845":"code","5113d707":"code","eec68a29":"code","cc28fe18":"code","09544fa3":"code","ca9cace8":"code","1a6cca87":"code","3b7389f1":"code","36d203b6":"code","ce29aa95":"code","99d4d759":"code","f1c2c419":"code","9cae8cac":"code","9655d617":"code","dcbcf7dc":"code","8610b444":"code","b37b4ec4":"code","9cc2889b":"code","bf9d32d6":"code","233a821f":"code","3f97eb31":"code","47ab8f7b":"code","b18d702c":"code","6f0c593a":"code","fec11683":"code","96a6ebbc":"code","069d16e2":"code","39d4e40d":"code","2d3aac12":"code","165e69eb":"code","f11b38b1":"code","9be39b64":"code","a9891109":"code","11fc71f0":"code","e0728ceb":"code","7e942508":"code","503d3d05":"code","48fddd03":"code","5618c50e":"code","24425571":"code","bff65f12":"code","3de3727e":"code","6035a5c2":"markdown","e2cb8a63":"markdown","0477239e":"markdown","15764a42":"markdown","4345de59":"markdown","2be8bf3b":"markdown","61654328":"markdown","83f812be":"markdown","d017b2b3":"markdown","b9e71d72":"markdown","1c9c040f":"markdown","c813be32":"markdown","ba314dbf":"markdown","fc2507f6":"markdown","7d4fa488":"markdown","0ea9b303":"markdown","ef689663":"markdown","b9c848dd":"markdown","249b1f85":"markdown","ab4bddad":"markdown","2c38c8b4":"markdown","9b5ecbb2":"markdown","6959e20a":"markdown","ae809c63":"markdown","6879efc9":"markdown","dc07ff31":"markdown","585956b7":"markdown","e07baf5b":"markdown","e47714a5":"markdown","c6b4717d":"markdown","1513fb83":"markdown","09e4fb73":"markdown","ed6505dd":"markdown","9478d0c4":"markdown","e9141e01":"markdown","83e4c736":"markdown","a0373743":"markdown","17d87353":"markdown","621d3cee":"markdown","7ac914df":"markdown","01b1daf7":"markdown","bf3b2d36":"markdown","c9385369":"markdown","60316a5d":"markdown","94029702":"markdown","90d71d84":"markdown","fc629dc0":"markdown","88a902d1":"markdown","d2e9d225":"markdown"},"source":{"909918aa":"import sys\nimport warnings\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport gensim\nfrom nltk.tokenize import word_tokenize\nimport dateutil.parser\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\npd.set_option('display.max_colwidth', -1)\n%matplotlib inline\nfrom matplotlib.pyplot import figure\nfrom matplotlib_venn import venn2, venn2_circles\nfrom matplotlib_venn import venn3, venn3_circles","b3b294cd":"print(os.listdir(\"..\/input\"))\npro= pd.read_csv('..\/input\/professionals.csv')\nstu=pd.read_csv(\"..\/input\/students.csv\")\n\nqs=pd.read_csv(\"..\/input\/questions.csv\")\nans= pd.read_csv('..\/input\/answers.csv')\ncom= pd.read_csv('..\/input\/comments.csv')\nemail= pd.read_csv('..\/input\/emails.csv')\nmatch= pd.read_csv('..\/input\/matches.csv')\n\nschool_mem= pd.read_csv('..\/input\/school_memberships.csv')\n\ntags= pd.read_csv('..\/input\/tags.csv')\nqs_tags=pd.read_csv('..\/input\/tag_questions.csv')\nuser_tag=pd.read_csv('..\/input\/tag_users.csv')","a9eb8845":"print(\"Number of students registered:\",stu['students_id'].count())\nprint(\"Number of professional registered:\",pro['professionals_id'].count())","5113d707":"ans_stu= pd.merge(ans,stu, left_on='answers_author_id',right_on='students_id')\nans_pro= pd.merge(ans,pro, left_on='answers_author_id',right_on='professionals_id')\n\ncom_stu= pd.merge(com,stu, left_on='comments_author_id',right_on='students_id')\ncom_pro= pd.merge(com,pro, left_on='comments_author_id',right_on='professionals_id')\n\nactive_pro= set(ans_pro['answers_author_id']).union(set(com_pro['comments_author_id']))\nactive_stu= set(ans_stu['answers_author_id']).union(set(com_stu['comments_author_id']))\n\nfigure(figsize=(20,20))\nplt.subplot(1, 2, 1)\nvenn3([set(ans_pro['answers_author_id']), set(pro['professionals_id']),set(com_pro['comments_author_id'])],\n      set_labels = ('Answered','PROFESSIONALS','Commented'))\n\nplt.subplot(1, 2, 2)\nvenn3([set(active_stu), set(stu['students_id']), set(qs['questions_author_id'])],\n      set_labels = ('Commented\/Answered','STUDENTS','Question Posted' ))\n\nplt.tight_layout()\nplt.show()\n","eec68a29":"a_s=pd.read_csv('..\/input\/answer_scores.csv')\nan_s= pd.merge(ans,a_s,left_on='answers_id',right_on='id')\n\nans_score_tab=an_s.pivot_table(values='score',index='answers_author_id',aggfunc='sum')\nans_score_tab.index.names=['user_id']\n\nans_score_tab.columns=['Hearts Earned']\nans_count_tab=ans.pivot_table(values='answers_id',index='answers_author_id',aggfunc='count')\nans_count_tab.index.names=['user_id']\nans_count_tab.columns=['Questions Answered']\n\nscore_tab=ans_score_tab.join(ans_count_tab,how='outer')\nscore_tab=score_tab.replace(np.NaN,0)\nscore_tab['Total_score']=score_tab['Hearts Earned']+score_tab['Questions Answered']\nscore_tab=score_tab.sort_values('Total_score',ascending=False)\nprint(\"Professionals' Score Chart\")\nscore_tab.head()","cc28fe18":"print(\"Popularity Chart\")\nans_score_tab.sort_values('Hearts Earned',ascending=False).head()","09544fa3":"print(\"Activity Chart\")\nans_count_tab.sort_values('Questions Answered',ascending=False).head()","ca9cace8":"print(\"Number of questions asked:\",qs['questions_id'].count())\nprint(\"Number of answers given:\",ans['answers_id'].count())","1a6cca87":"print(\"Number of tags:\",tags['tags_tag_id'].count())\nprint(\"Number of comments made:\",com['comments_id'].count())\nprint(\"Number of emails sent:\",email['emails_id'].count())","3b7389f1":"figure(figsize=(20,20))\nplt.subplot(1, 2, 1)\nvenn3([set(ans['answers_id']), set(com['comments_parent_content_id']),set(qs['questions_id'])],\n      set_labels = ('ANSWERS','COMMENTS','QUESTIONS' ))\n\nplt.tight_layout()\nplt.show()\n","36d203b6":"def to_date(val):\n    return datetime.strptime( str(val),'%Y-%m-%d %H:%M:%S UTC+0000')\ndef to_year(val):\n    return val.strftime('%Y')\ndef to_yr_mon(val):\n    return val.strftime('%Y-%m')\n    \n#Question Timestamp Processing    \nqs['ts']=qs.apply(lambda x: to_date(x['questions_date_added']),axis=1)\nqs['year']=qs.apply(lambda x: to_year(x['ts']),axis=1)\nqs['yr_mon']=qs.apply(lambda x: to_yr_mon(x['ts']),axis=1)\n\n#Answer Timestamp Processing    \nans['ts']=ans.apply(lambda x: to_date(x['answers_date_added']),axis=1)\nans['year']=ans.apply(lambda x: to_year(x['ts']),axis=1)\n\n#Question ids that got answered at some point\nanswered_id= ans['answers_question_id'].unique()\n\n#Questions which never got answered\nn_ans=pd.DataFrame(qs.loc[~qs['questions_id'].isin(answered_id)])\nn_ans=n_ans.reset_index(drop=True)\nn_ans['ts']=n_ans.apply(lambda x: to_date(x['questions_date_added']),axis=1)\nn_ans['y_m']=n_ans.apply(lambda x: to_yr_mon(x['ts']),axis=1)\nn_ans['yr']=n_ans.apply(lambda x: to_year(x['ts']),axis=1)\n\n#Questions that got answered at some point\ny_ans=pd.DataFrame(qs.loc[qs['questions_id'].isin(answered_id)])\n\n#Time taken for replies\nans_gap= pd.merge(ans,y_ans,left_on='answers_question_id',right_on='questions_id')\nans_gap['time_to_answer']= ans_gap.apply(lambda x: (x['ts_x']-x['ts_y']).days ,axis=1 )\n\n#Reply gap tabulated\ntab_gap= ans_gap.groupby('time_to_answer').count()[['answers_id']]\n\n#Questions raised by yr-mon\ntab_q= qs.groupby('yr_mon').count()[['questions_id']]\ntab_q.sort_index()\n\n#Answers given by yr-mon\ntab_a= n_ans.groupby('y_m').count()[['questions_id']]\n\n#Answers by year\ntab_a_yr = n_ans.groupby('yr').count()[['questions_id']]\n#Questions by year\ntab_q_yr= qs.groupby('year').count()[['questions_id']]\n\n#Response rates\ntab_response_rate=tab_a_yr.join(tab_q_yr,how='outer', lsuffix='_unanswered', rsuffix='_posted')\ntab_response_rate=tab_response_rate.fillna(0)\ntab_response_rate['response rate']=round(100- ((tab_response_rate['questions_id_unanswered']\/tab_response_rate['questions_id_posted'])*100),2)\ntab_response_rate.columns=['Questions Unanswered','Questions Posted','Response Rate']\nprint(\"RESPONSE RATES OVER THE YEARS\")\ntab_response_rate","ce29aa95":"#Professionals Timestamp Processing    \npro['ts']=pro.apply(lambda x: to_date(x['professionals_date_joined']),axis=1)\npro['year']=pro.apply(lambda x: to_year(x['ts']),axis=1)\ntab_pro= pro.groupby('year').count()[['professionals_id']]\ntab_pro.columns=['Professionals joined each year']\ntab_pro['Total Professionals']= tab_pro['Professionals joined each year'].cumsum()\n\n#Students Timestamp Processing    \nstu['ts']=stu.apply(lambda x: to_date(x['students_date_joined']),axis=1)\nstu['year']=stu.apply(lambda x: to_year(x['ts']),axis=1)\ntab_stu= stu.groupby('year').count()[['students_id']]\ntab_stu.columns=['Students joined each year']\ntab_stu['Total Students']= tab_stu['Students joined each year'].cumsum()\ntab_pro_stu= tab_pro.join(tab_stu,how='inner')\n\nprint(\"Size of the community over the years\")\ntab_pro_stu[:-1]","99d4d759":"tab_pro_stu[:-1].plot()","f1c2c419":"#Reply gap tabulated\ntab_gap= ans_gap.groupby(['time_to_answer']).count()[['answers_id']]\ntab_gap['per']=round((tab_gap['answers_id']\/tab_gap['answers_id'].sum())*100,2)\nprint(\"TIME TO RESPOND TO QUESTIONS\")\ntab_gap[0:10]","9cae8cac":"email['ts']= email.apply(lambda x: to_date(x['emails_date_sent']),axis=1)\nemail['year']= email.apply(lambda x: to_year(x['ts']),axis=1)\n\nemailed_qs = pd.merge(email,match,left_on='emails_id',right_on='matches_email_id')\nemailed_qs_ans=pd.merge(emailed_qs,ans,left_on=['emails_recipient_id','matches_question_id'],right_on=['answers_author_id','answers_question_id'],how='inner')\n\nsent     = emailed_qs.groupby(['emails_recipient_id','year']).nunique()[['matches_question_id']] \nresponded= emailed_qs_ans.groupby(['emails_recipient_id','year_x']).nunique()[['answers_id']]\n\nsent=sent.reset_index(level=['year'])\nresponded=responded.reset_index(level=['year_x'])\n\nsent_responded= pd.merge(sent,responded,how='left',left_on=['emails_recipient_id','year'],right_on=['emails_recipient_id','year_x'])\nsent_responded=sent_responded.drop('year_x',axis=1)\nsent_responded['rate']= np.array((sent_responded['answers_id'] \/ sent_responded['matches_question_id'])*100)","9655d617":"venn3([set(qs_tags['tag_questions_tag_id']), set(user_tag['tag_users_tag_id']),set(tags['tags_tag_id'])],\n      set_labels = ('Question_tags','User_tags','TAGS'))","dcbcf7dc":"figure(figsize=(5,5))\nvenn3([set(user_tag['tag_users_user_id']),set(ans_pro['answers_author_id']),set(pro['professionals_id'])],\n      set_labels = ('Tagged Users','Professionals Answered','Professionals'))","8610b444":"qs.head(2)","b37b4ec4":"qs_tags.sort_values('tag_questions_question_id')[:10]","9cc2889b":"qs_tagnames= pd.merge(qs_tags,tags,left_on='tag_questions_tag_id',right_on='tags_tag_id')\nqs_tagnames=qs_tagnames.drop(['tags_tag_id','tag_questions_tag_id'],axis=1)\nprint(qs_tagnames.sort_values('tag_questions_question_id')[:10])\nqs_tag_pivot=qs_tagnames.pivot_table(index='tag_questions_question_id',values='tags_tag_name',aggfunc=lambda x: \" \".join(x))\nqs_tag_pivot['tag_questions_question_id']=qs_tag_pivot.index\nprint(\"\\nNumber of questions asked:\",qs['questions_id'].count())\nprint(\"Number of questions with tags:\",len(qs_tag_pivot))\nqs_tag_pivot=qs_tag_pivot.reset_index(drop=True)\nprint(\"\\n\",qs_tag_pivot.head())","bf9d32d6":"print(\"Example:\\nQuestion id-\", qs_tag_pivot.iloc(0)[0]['tag_questions_question_id'],\n      \":\\n\\n\",qs.loc[qs['questions_id']==qs_tag_pivot.iloc(0)[0]['tag_questions_question_id']]['questions_body'],\n      \"\\n\\n*************************************************************************\\nTag string:\",\n      qs_tag_pivot.iloc(0)[0]['tags_tag_name'])","233a821f":"qs_with_tags=pd.merge(qs,qs_tag_pivot,left_on='questions_id',right_on='tag_questions_question_id')\nprint(\"Number of questions with tags:\",len(qs_with_tags))\nqs_with_tags.head(2)","3f97eb31":"raw_documents=qs_with_tags['questions_title']+qs_with_tags['questions_body']+qs_with_tags['tags_tag_name']\nraw_documents.head()","47ab8f7b":"print(\"Number of Questions:\",len(raw_documents))\nprint(\"Tokenizing data...\")\ngen_docs = [[w.lower() for w in word_tokenize(text)] \n            for text in raw_documents]\nprint(\"Creating dictionary...\")\ndictionary = gensim.corpora.Dictionary(gen_docs)\nprint(\"Creating Document-Term Matrix...\")\ncorpus = [dictionary.doc2bow(gen_doc) for gen_doc in gen_docs]\nprint(\"Creating TF-IDF Model...\")\ntf_idf = gensim.models.TfidfModel(corpus)\nprint(\"Creating Similarity Checker...\")\nsimilar_qs = gensim.similarities.Similarity(\"\",tf_idf[corpus],num_features=len(dictionary))\nprint(\"Processing Completed!\")","b18d702c":"Query='Can I become data scientist without studying at university?#technology #data-science'\nQuery","6f0c593a":"query_doc = [w.lower() for w in word_tokenize(Query)]\nquery_doc_bow = dictionary.doc2bow(query_doc)\nquery_doc_tf_idf = tf_idf[query_doc_bow]","fec11683":"q_sim=similar_qs[query_doc_tf_idf]","96a6ebbc":"sim_threshold=0.10","069d16e2":"qs_with_tags['Similarity']=q_sim\nques=qs_with_tags[qs_with_tags['Similarity']>=sim_threshold]\nques=ques.sort_values('Similarity',ascending=False)\nques.head()","39d4e40d":"qlist=ques['questions_id']\nqlist_ans=ans[ans['answers_question_id'].isin(qlist)]\nprof_answered=set(qlist_ans['answers_author_id'])\n#print(prof_answered)\nsolution1= pro[pro['professionals_id'].isin(prof_answered)]\nsolution1.head()\n","2d3aac12":"print(\"Number of professionals registered:\",len(pro['professionals_id']))\nprint(\"Number of users who have answered:\",len(ans['answers_author_id'].unique()))\nans_pro=pro[pro['professionals_id'].isin(ans['answers_author_id'])]\nprint(\"Number of professionals who have answered:\",len(ans_pro))\nans_stu=stu[stu['students_id'].isin(ans['answers_author_id'])]\nprint(\"Number of students who have answered:\",len(ans_stu))\nprint(\"\\n***PROFESSIONALS IGNORED VIA THIS SOLUTION***\")\nprint(\"Number of professionals who haven't answered yet:\",len(set(pro['professionals_id']))-len(ans_pro))","165e69eb":"print(\"From the numbers, it is clear that users who identify themselves as neither professionals nor students have answered to questions.\\nHow big is this population?\\n\")\nu= set(ans['answers_author_id'])\ns= set(stu['students_id'])\np= set(pro['professionals_id'])\nst_ansrd= u.intersection(s)\npr_ansrd= u.intersection(p)\nall_ansrd= st_ansrd.union(pr_ansrd)\nunknwn= u.difference(all_ansrd)\nprint(\"Unknown users: \",len(unknwn))","f11b38b1":"user_tag_exp=pd.merge(tags,user_tag,left_on='tags_tag_id',right_on='tag_users_tag_id')\nuser_tag_exp=user_tag_exp.drop(['tags_tag_id','tag_users_tag_id'],axis=1)\nuser_tag_exp.sort_values('tag_users_user_id')[:10]","9be39b64":"tag_pivot=user_tag_exp.pivot_table(values='tags_tag_name',index='tag_users_user_id',aggfunc=lambda x: \" \".join(x))\ntag_pivot['tag_users_user_id']=tag_pivot.index\nprint(\"Number of all users with tags:\",len(tag_pivot))\ntag_pivot=tag_pivot.reset_index(drop=True)\ntag_pivot.head()","a9891109":"pro_tagstring= tag_pivot[tag_pivot['tag_users_user_id'].isin(pro['professionals_id'])]\nprint(\"Number of professionals with tags:\",len(pro_tagstring))","11fc71f0":"raw_tags=pro_tagstring['tags_tag_name']\nprint(\"Tag string table of professionals:\")\nraw_tags.head()\n","e0728ceb":"print(\"Number of Tags:\",len(raw_tags))\nprint(\"Tokenizing data...\")\ngen_docs = [[w.lower() for w in word_tokenize(text)] \n            for text in raw_tags]\nprint(\"Creating dictionary...\")\ndictionary = gensim.corpora.Dictionary(gen_docs)\nprint(\"Creating Document-Term Matrix...\")\ncorpus = [dictionary.doc2bow(gen_doc) for gen_doc in gen_docs]\nprint(\"Creating TF-IDF Model...\")\ntf_idf = gensim.models.TfidfModel(corpus)\nprint(\"Creating Similarity Checker...\")\nsims = gensim.similarities.Similarity(\"\",tf_idf[corpus],num_features=len(dictionary))\nprint(\"Processing Completed!\")\n\nQuery='Can I become data scientist without studying at university?#technology #data-science'\nprint(\"\\nQuestion posted:\",Query)\n","7e942508":"query_doc = [w.lower() for w in word_tokenize(Query)]\nquery_doc_bow = dictionary.doc2bow(query_doc)\nquery_doc_tf_idf = tf_idf[query_doc_bow]","503d3d05":"sim=sims[query_doc_tf_idf]","48fddd03":"sim_threshold=0.10","5618c50e":"pro_tagstring['sim']=sim\nprof_tag=pro_tagstring[pro_tagstring['sim']>=sim_threshold]\nprof_tag=prof_tag.sort_values('sim',ascending=False)\nprof_tag.head()","24425571":"prof_list=prof_tag['tag_users_user_id']\nsolution2= pro[pro['professionals_id'].isin(prof_list)]\nsolution2.head()","bff65f12":"print(\"Number of users with tags:\",len(tag_pivot))\nprint(\"\\nNumber of professionals registered:\",len(pro['professionals_id']))\n\nprint(\"Number of professionals with tags:\",len(pro_tagstring))\n\nprint(\"\\n***PROFESSIONALS IGNORED VIA THIS SOLUTION***\")\nprint(\"Number of professionals without any tags:\",len(set(pro['professionals_id']))-len(pro_tagstring))","3de3727e":"answered_pro= set(ans_pro['professionals_id'])\ntagged_pro= set(pro_tagstring['tag_users_user_id'])\nA1= len(answered_pro.difference(tagged_pro))\nB1= len(tagged_pro.difference(answered_pro))\nAnB= len(answered_pro.intersection(tagged_pro))\nprint(\"Number of professionals ignored via both methods:\",len(pro['professionals_id'])-(A1+AnB+B1))","6035a5c2":"**TAGS PER USER**\n\nCombine user_tag table with tag table.","e2cb8a63":"Out of the ~24k questions posted, almost 10k were matched through emails or at least emails can be thought to be the motivating factor for answering those questions. ","0477239e":"**DISPLAY THE PROFESSIONALS WITH TAGS MOST SIMILAR TO THE QUESTION**","15764a42":"**'TAG STRING' TABLE OF USERS**","4345de59":"**Let's explore the tag landscape - questions and users tags **","2be8bf3b":"\u2b50  **NO QUESTION LEFT BEHIND AND NO PROFESSIONAL IGNORED**  \u2b50 \n\nOn a daily and weekly basis, make a list of questions which haven't received any reponses.\n\nBased on the email frequency each professional has opted for, group them into daily and weekly categories.\n\nThere are professionals who have opted for immediate notification - there should be a cut-off level set on this to limit the number of emails sent on a day.\n\nMay be once or twice by default (could also ask the professional for their input as well)\n\nFind the most relevant questions for each professional based on their answering history and recommend questions which are most similar to the questions answered in the past from the 'no-responses' list created before.\n\nIn this way, no professional will get ignored and can also try to engage professionals who have been inactive for a while. ","61654328":"# **Identify professionals with tags most similar to the question asked.**","83f812be":"**AVAILABLE FILES**","d017b2b3":"**TEXT PROCESSING BEGINS...**","b9e71d72":"**PROCESSING THE QUESTION...**\n\n**CHECKING FOR MOST SIMILAR QUESTIONS FROM THE PAST...**","1c9c040f":"\u2b50  The highest influx in the student community has been in the year 2016-- 12k students joined that year!\n\n\u2b50  That is the highest number of students joining the platform in any one year.\n\n\u2b50  Professionals' community has seen a steady growth, which is a good sign.","c813be32":"\u2b50 ** Almost 24% of questions get answered in 24 hours' time.**\n\nNB: The first row may correspond to some glitch in the timestamp recording, answers being posted before questions?","ba314dbf":"**DISPLAY THE MOST SIMILAR QUESTIONS FROM THE PAST**","fc2507f6":"***The venn diagram shows that both,questions and answers can get commented on.***\n\n***However, answers tend to get more comments than questions.***","7d4fa488":"**CHECKING FOR MOST SIMILAR QUESTIONS FROM THE PAST**","0ea9b303":"*Now that's a good start. But if we only use this method, as mentioned earlier, professionals who haven't answered any questions in the past will be ignored.*\n\n**How big is the population that gets ignored via this method?**","ef689663":"![](http:\/\/)","b9c848dd":"# **Solution 1** <a id=1><\/a>","249b1f85":"There are question tags that do not match any user's tags and there are users' tags which haven't matched any questions asked so far.","ab4bddad":"# **Data Exploration**","2c38c8b4":"# \ud83d\udd0e**CareerVillage.org Recommendation System**\ud83d\udd0d\n![Imgur](https:\/\/i.imgur.com\/oA5T6RX.jpg)\n\n **Objective:** To develop a method to recommend relevant questions on CareerVillage.com to the professionals who are most likely to answer them.","9b5ecbb2":"***The platform was able to stick to the policy of answering all questions during the years 2011-'15.***\n\n\n***2018 has seen the lowest response rate of 91%; 712 questions went unanswered.***\n\n\n***In 2016, there has been a massive increase in questions posted. ***\n***Has our student community also grown by so much in 2016??***\n\n***Let's inspect...***","6959e20a":"**RESPONSE RATES**\n\nLet's inspect the rate of questions getting answered on the platform.","ae809c63":"**TEXT PROCESSING...**","6879efc9":"\u2b50  Well, each question can have multiple tags. We have to concatenate these tags and create a **\"tag string\"** per question (where tags are available)","dc07ff31":"**COMBINE QUESTIONS TABLE WITH CORRESPONDING TAGS**","585956b7":"**IDENTIFY PROFESSIONALS WHO ANSWERED THESE QUESTIONS** ","e07baf5b":"First user answered 1710 questions and the third user answered almost half of it, 915. \n\nBut the latter has earned more \ud83d\udc99 than the former.\n\nSo it is best to create two charts for internal use- \n* one based on activity \n* one based on popularity","e47714a5":"**Combine question title, body and tags.**","c6b4717d":"**LET'S SET,\n SIMILARITY THRESHOLD = 0.1**\n \n*Any question from the past with a similarity index less than the threshold gets ignored*","1513fb83":"*As mentioned earlier, professionals without any tags will be ignored via this solution.*\n\n**How big is that population?**","09e4fb73":"**Professionals ignored in Solution 2 is far less than in Solution 1**\n\n*Are there professionals who are ignored in both methods?*\n\nLet's inspect this.","ed6505dd":"The first user has three tags - content creation, script writing and digital media. This means each user can have multiple tags.\n\n\u2b50  Concatenate all tags of a user to create a **'tag string'** per user.","9478d0c4":"**QnA archive**","e9141e01":"This table contains both- students and professionals.\n\nAs we are interested in sending emails only to professionals, let's filter this table.\n\n**'TAG STRING' TABLE OF PROFESSIONALS**","83e4c736":"**LET'S SET, SIMILARITY THRESHOLD = 0.1**\n\nAny question from the past with a similarity index less than the threshold gets ignored","a0373743":"**NEW QUESTION POSTED**\n\nLet's take a fresh question from the website which is not included in the training set:\n\n","17d87353":"# **Solution 2** <a id=2><\/a>","621d3cee":"**TIME TO RESPOND TO QUESTIONS POSTED**","7ac914df":"Every Question has a title and body. There is a separate table that holds hashtags associated to the question as well.\n\nLet's have a look at this table.","01b1daf7":"# **Approach:**\n\n\n\n**************************************************************************************************************************************************************************************\n[Solution 1:](#1) \n\nFind questions similar to the one asked, and track down professionals who answered those questions.\n\n\ud83d\udc4d**Pros:**  \u2757\u2757New Feature Alert\u2757\u2757 This can be used to add a feature in the system that suggests the student similar questions asked in the past to check if the question is similar to any existing questions and they could be given a chance to take a look at the responses of the previous questions before posting the question. \n\n\u231b**Added bonus:**\u231b\nIf they are satisfied with those answers, they can then skip posting the question in the forum, thereby saving valuable time of our professionals a.k.a Superheroes and also avoids duplication of questions in the forum. \n\n\ud83d\udc4e**Cons:** \n\n**COLD-START PROBLEM:**This method will not suggest professionals who haven't made any responses yet. This issue will be handled under Solution 2.\n\n***************************************************************************************************************************************************************************************\n[Solution 2:](#2) \n\nProfessionals have tags to indicate topics of interest. We can check for similarity betweeen the question posted and the professionals' tags.\n\n\ud83d\udc4d**Pros:** This method will not take into account whether the professionals have made any responses in the past.\n\n\ud83d\udc4e**Cons:** This method will not suggest professionals who do not have any tags.\n\n****************************************************************************************************************************************************************************************\n[Solution 3:](#3) \n\nMarket-Basket\/ Association analysis: \n\nSuggest questions similar to the ones answered by professionals with similar tags.\n\n\ud83d\udc4d**Pros:** This method will include professionls who do not have any activity on the platform.\n\n\n\n****************************************************************************************************************************************************************************************\n\n\n\u2705  A combination of the results from these methods should be a good start.\n\n","bf3b2d36":"**HISTORICAL QUESTIONS ASKED**","c9385369":"~18k professionals and ~18.6k students haven't contributed in anyway- no questions\/answers\/comments.\n\nOnly about ~36% of the professionals and ~36% of students have engaged in the platform.\n\n\u2b50  **NEW DATA FEATURE ALERT**  \u2b50 \n\nAn **'activity indicator'** could be added as a feature to professionals data table.\n\n\u2b50  **NEW DATA FEATURE ALERT**  \u2b50 \n\nAnother metric showing the **time since last activity\/ last login** could be indicators of 'interest' to respond to new questions.\n","60316a5d":"\u2b50  Activity and popularity charts could be generated for rolling one-month period.","94029702":"**IMPORT REQUIRED LIBRARIES**","90d71d84":"# **Find questions from the past most similar to the current question and target professionals who have answered those questions**","fc629dc0":"**SIZE OF THE COMMUNITY**","88a902d1":"These professionals do not have any tags and haven't responded to any questions yet.\n\n**Further Thoughts:**\n\nOne method is to promote these professionals to add tags and that way questions can be directed to them by solution 2.\nOnce they start answering them, they will also be considered under solution 1.\n\nAnother alternative is to suggest tags to these professionals based on their Job Title, Headline, Location etc.","d2e9d225":"**TAGS, COMMENTS AND EMAILS**"}}