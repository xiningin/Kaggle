{"cell_type":{"6b881d14":"code","dfc99183":"code","81645c97":"code","f7c398dd":"code","8267cf93":"code","4e94663c":"code","89f9c84e":"code","16d3f7a1":"code","643ee2ce":"markdown","f525800c":"markdown","5fad9e3f":"markdown","6efa57d3":"markdown"},"source":{"6b881d14":"from ipywidgets import interact, interactive, IntSlider, ToggleButtons\nimport numpy as np\nimport pandas as pd\nimport random, re, math\nimport matplotlib.pyplot as plt\nimport seaborn as sns","dfc99183":"DATA_DIR = \"\/kaggle\/input\/covid-segmentation\/\"\nrad=DATA_DIR + \"images_radiopedia.npy\", DATA_DIR + \"masks_radiopedia.npy\"\nmed=DATA_DIR + \"images_medseg.npy\", DATA_DIR + \"masks_medseg.npy\"\ntest=DATA_DIR + \"test_images_medseg.npy\"\n\ndef load_case(image_file, mask_file=None):\n    image =np.load(image_file).astype(np.float32)\n    if not mask_file is None:\n        mask =np.load(mask_file).astype(np.int8)\n        return image, mask\n    return image","81645c97":"def explore_image(slices):\n    plt.figure(figsize=(10, 10))\n    plt.imshow(load_case(med[0],med[1])[0][slices, :, :, 0], cmap='gray');\n    plt.imshow(load_case(med[0],med[1])[1][slices, :, :, 0].squeeze(), alpha=0.3, cmap='Reds')\n    plt.imshow(load_case(med[0],med[1])[1][slices, :, :, 1].squeeze(), alpha=0.2, cmap='Blues')\n    plt.title('Explore slices of Images_medseg \\n Blue color is Consolidations \\n Red color is Ground Glass  ', fontsize=20)\n    plt.axis('off')\n    return slices\n\n\ninteract(explore_image, slices=(0, load_case(med[0],med[1])[0].shape[0] - 1));","f7c398dd":"def visualize(batch_1,batch_2,pred=False):\n   \n    classes_dict = {'Ground_Glass': 0.,\n                    'Consolidations': 1.,\n                    'Lungs_Other': 2.,\n                    'Background': 3. }\n                                   \n    \n    \n    fix, ax = plt.subplots(2, 5, figsize=(60, 40))\n    \n    for i in range(2):\n        \n        \n        ax[i,0].set_xticks([]) \n        ax[i,0].set_yticks([])\n        if i==0:\n            ax[i,0].imshow(batch_1[0][:,:,0], cmap='Greys')\n            ax[i,0].set_ylabel(\"Ground Truth \", fontsize=55) if pred==True else ax[i,0].set_ylabel(\"From batch_1 \", fontsize=55)\n            for j in range(4):\n                mask_f = batch_1[1][:,:,j]\n                img_label = list(classes_dict.keys())[j]\n\n                ax[i, j + 1].imshow(mask_f, vmin=0, vmax=1,cmap='cividis')\n                ax[i, j + 1].set_xticks([]) \n                ax[i, j + 1].set_yticks([]) \n                ax[i][j + 1].set_title(f\"{img_label} \", fontsize=55)\n \n        else:\n            ax[i,0].imshow(batch_2[0][:,:,0], cmap='Greys')\n            ax[i,0].set_ylabel(\"Prediction\", fontsize=55) if pred==True else ax[i,0].set_ylabel(\"From batch_2 \", fontsize=55)\n            for j in range(4):\n                mask_f = batch_2[1][:,:,j]\n                img_label = list(classes_dict.keys())[j]\n\n                ax[i, j + 1].imshow(mask_f, vmin=0, vmax=1,cmap='cividis')\n                ax[i, j + 1].set_xticks([]) \n                ax[i, j + 1].set_yticks([]) \n \n                    \n\n    plt.tight_layout()\n    plt.show()\n    ","8267cf93":"maxval = 99\ni = np.random.randint(0, maxval)\nvisualize(batch_1=(load_case(med[0])[i], load_case(med[1])[i]),batch_2=(load_case(rad[0])[i], load_case(rad[1])[i]),pred=False)","4e94663c":"def count_classes(image,mask):\n    ground_glass=[]\n    consolidations=[]\n    other=[]\n    background=[]\n    \n    for i in range(image.shape[0]):\n        if mask[i,:,:,0].sum()!=0:\n            ground_glass.append(image[i])\n        if mask[i,:,:,1].sum()!=0:\n            consolidations.append(image[i])\n        if mask[i,:,:,2].sum()!=0:\n            other.append(image[i])\n        if mask[i,:,:,3].sum()!=0:\n            background.append(image[i])\n            \n    x=['ground_glass','consolidations','other','background']\n    y=[len(ground_glass),len(consolidations),len(other),len(background)]\n    plt.figure(figsize=(12,5))\n    plt.title('The number of each category segmentaion in images', fontsize=20)\n    sns.set_context('paper',font_scale=2)\n    sns.barplot(x=x,y=y,palette='coolwarm')\n    \n    print(f'The number of images that has: \\n Ground_Glass Segmentation:{y[0]} \\\n    \\n Consolidations Segmentation:{y[1]} \\n Lung_Others Segmentation:{y[2]} \\n Background Segmentation:{y[3]}')\n        \n                \n    return y","89f9c84e":"y=count_classes(load_case(med[0],med[1])[0],load_case(med[0],med[1])[1])","16d3f7a1":"v=count_classes(load_case(rad[0],rad[1])[0],load_case(rad[0],rad[1])[1])","643ee2ce":"## Function and pathes for loading data","f525800c":"## Importing Library","5fad9e3f":"### Let's look at some images and their masks using widget interact ","6efa57d3":"## Visualization functions"}}