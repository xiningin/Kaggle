{"cell_type":{"6301b5d2":"code","8bda0926":"code","90a3f16a":"code","b64a5107":"code","882aefc2":"code","ccd6f433":"code","ddea6891":"code","6a825372":"code","ca97eb23":"code","e539baa3":"code","b2555ac2":"code","eeed7517":"code","5319b013":"code","cca8feda":"code","591f1013":"code","c024d138":"code","c6ef80f9":"code","58ee9ee9":"code","08e012cf":"code","4800fad1":"code","f21976ef":"code","3f1b4b58":"code","bf3eddf5":"markdown"},"source":{"6301b5d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bda0926":"\nimport pandas as pd\nimport numpy as np\n\n","90a3f16a":"\n\ndata = pd.read_csv( '\/kaggle\/input\/restaurant-revenue-prediction\/train.csv.zip')\ntest_data = pd.read_csv('\/kaggle\/input\/restaurant-revenue-prediction\/test.csv.zip')\n\ndata.head()\n\n","b64a5107":"\n\ndata.describe()\n\n","882aefc2":"data.dtypes","ccd6f433":"data['City Group'].unique()","ddea6891":"data['City'].unique()","6a825372":"#Creating a flag for each type of restaurant\ndata['Type_IL'] = np.where(data['Type'] == 'IL', 1, 0)\ndata['Type_FC'] = np.where(data['Type'] == 'FC', 1, 0)\ndata['Type_DT'] = np.where(data['Type'] == 'DT', 1, 0)\n\n#Creating a flag for 'Big Cities'\ndata['Big_Cities'] = np.where(data['City Group'] == 'Big Cities', 1, 0)\n\n#Converting Open_Date into day count\n#Considering the same date the dataset was made available\ndata['Days_Open'] = (pd.to_datetime('2015-03-23') - pd.to_datetime(data['Open Date'])).dt.days\n\n#Removing unused columns\ndata = data.drop('Type', axis=1)\ndata = data.drop('City Group', axis=1)\ndata = data.drop('City', axis=1)\ndata = data.drop('Open Date', axis=1)\n\n#Adjusting test data as well\ntest_data['Type_IL'] = np.where(test_data['Type'] == 'IL', 1, 0)\ntest_data['Type_FC'] = np.where(test_data['Type'] == 'FC', 1, 0)\ntest_data['Type_DT'] = np.where(test_data['Type'] == 'DT', 1, 0)\ntest_data['Big_Cities'] = np.where(test_data['City Group'] == 'Big Cities', 1, 0)\ntest_data['Days_Open'] = (pd.to_datetime('2015-03-23') - pd.to_datetime(test_data['Open Date'])).dt.days\ntest_data = test_data.drop('Type', axis=1)\ntest_data = test_data.drop('City Group', axis=1)\ntest_data = test_data.drop('City', axis=1)\ntest_data = test_data.drop('Open Date', axis=1)","ca97eb23":"\n\nfrom sklearn import model_selection\nfrom sklearn import linear_model\n\n\nX = data.drop(['Id', 'revenue'], axis=1)\nY = data.revenue\n\n","e539baa3":"\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\n\nfrom sklearn import metrics\n\ndef check_rmse(X, Y, alpha):\n    RMSE_lasso = []\n    RMSE_ridge = []\n\n    for i in alpha:\n        lasso = Lasso(alpha=i)\n        lasso.fit(X, Y)\n\n        ridge = Ridge(alpha=i)\n        ridge.fit(X, Y)\n\n        RMSE_lasso.append(metrics.mean_squared_error(Y, lasso.predict(X)))\n        RMSE_ridge.append(metrics.mean_squared_error(Y, ridge.predict(X)))\n        \n    \n    return (RMSE_lasso, RMSE_ridge)\n\n","b2555ac2":"\n\nimport matplotlib.pyplot as plt\n\nalpha = [i\/10 for i in range(25, 100, 10)]\nRMSE_lasso, RMSE_ridge = check_rmse(X, Y, alpha)\n\nplt.figure()\nplt.plot(alpha, RMSE_lasso, 'o-', color=\"r\", label=\"RMSE_lasso\")\nplt.plot(alpha, RMSE_ridge, 'o-', color=\"b\", label=\"RMSE_ridge\")\nplt.legend(loc='best')\nplt.show()\n\n","eeed7517":"plt.figure()\nplt.plot(alpha, RMSE_lasso, 'o-', color=\"r\", label=\"RMSE_lasso\")\nplt.legend(loc='best')\nplt.show()","5319b013":"lasso = Lasso(alpha=5.5)\nlasso.fit(X, Y)\n\nmetrics.mean_squared_error(Y, lasso.predict(X))","cca8feda":"\n\nmodel = Lasso(alpha=5.5)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-lasso-5.5.csv', index=False)\ntest_predicted.describe()\n\n","591f1013":"\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=150)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-random-forest.csv', index=False)\ntest_predicted.describe()\n\n","c024d138":"\n\nmodel = Ridge(alpha=330)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-ridge-330.csv', index=False)\ntest_predicted.describe()\n\n","c6ef80f9":"\n\nmodel = Lasso(alpha=200000)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-lasso-high-alpha.csv', index=False)\ntest_predicted.describe()\n\n","58ee9ee9":"data['Days_Open'].unique()\n\n","08e012cf":"\n\ndata['Time_Open'] = round(data['Days_Open'] \/ 700, 0)\ndata = data.drop('Days_Open', axis=1)\n\ntest_data['Time_Open'] = round(test_data['Days_Open'] \/ 700, 0)\ntest_data = test_data.drop('Days_Open', axis=1)\n\n","4800fad1":"\n\nX = data.drop(['Id', 'revenue'], axis=1)\nY = data.revenue\n\n","f21976ef":"model = Ridge(alpha=330)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission.csv', index=False)\ntest_predicted","3f1b4b58":"\n\nmodel = Lasso(alpha=200000)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-lasso-.csv', index=False)\ntest_predicted.describe()\n\n","bf3eddf5":"Data preprocessing"}}