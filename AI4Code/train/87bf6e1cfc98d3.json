{"cell_type":{"d8aaf847":"code","032597a7":"code","8d486a0c":"code","32b11d32":"code","0b71a1fa":"code","3c62ccf0":"code","08c92a66":"code","83b74051":"code","ff85b4ce":"code","d5a5a20a":"code","63903a08":"code","ec46da48":"code","6b3aeead":"code","2f156c9d":"markdown","073cca92":"markdown","314482f3":"markdown","5a2baf26":"markdown","e5676342":"markdown","7927a048":"markdown","27515ea2":"markdown","d017b58b":"markdown"},"source":{"d8aaf847":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","032597a7":"import pandas as pd\npath = '\/kaggle\/input\/tabular-playground-series-jul-2021\/'\ndf = pd.read_csv(path+'train.csv',parse_dates=['date_time'])","8d486a0c":"df.head()","32b11d32":"df.isna().sum()","0b71a1fa":"pd.plotting.scatter_matrix(df,alpha=0.2, figsize=(20,20));","3c62ccf0":"import re\nimport numpy as np\n\n#### Create new features called Day of month, Day of weak and hours as new features\ndef add_datepart(df, field_name, drop=True, time=False):\n    df[field_name] = pd.to_datetime(df[field_name], infer_datetime_format=True)\n    field = df[field_name]\n    attr = [ 'Day', 'Dayofweek']\n    if time: attr = attr + ['Hour']\n    week = field.dt.isocalendar().week.astype(field.dt.day.dtype) if hasattr(field.dt, 'isocalendar') else field.dt.week\n    for n in attr: df[n] = getattr(field.dt, n.lower()) if n != 'Week' else week\n    mask = ~field.isna()\n    if drop: df.drop(field_name, axis=1, inplace=True)\n    return df","08c92a66":"df_processed = add_datepart(df,'date_time', time=True)\n## Convert targets to log1p as per competition requirement\ndf_processed['target_carbon_monoxide'] = np.log1p(df_processed['target_carbon_monoxide'])\ndf_processed['target_benzene'] = np.log1p(df_processed['target_benzene'])\ndf_processed['target_nitrogen_oxides'] = np.log1p(df_processed['target_nitrogen_oxides'])","83b74051":"#### Split dataset to 7000 train and 111 as test dataset\ndf_processed_train = df_processed[:7000]\ndf_processed_test = df_processed[7000:]","ff85b4ce":"X_train = df_processed_train.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'],axis = 1)\nY_train = df_processed_train.loc[:,['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\nX_valid = df_processed_test.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'],axis = 1)\nY_valid = df_processed_test.loc[:,['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]","d5a5a20a":"from sklearn.ensemble.forest import RandomForestRegressor, RandomForestClassifier\nimport math\ndef rmse(x,y):\n  return math.sqrt(((x-y)**2).mean())\n\ndef print_score_co(m):\n  res = [rmse(m.predict(X_train),Y_train.target_carbon_monoxide),rmse(m.predict(X_valid),Y_valid.target_carbon_monoxide), m.score(X_train,Y_train.target_carbon_monoxide), m.score(X_valid,Y_valid.target_carbon_monoxide)]\n  if hasattr(m,'oob_score_'): res.append(m.oob_score_)\n  print(res)\n\ndef print_score_b(m):\n  res = [rmse(m.predict(X_train),Y_train.target_benzene),rmse(m.predict(X_valid),Y_valid.target_benzene), m.score(X_train,Y_train.target_benzene), m.score(X_valid,Y_valid.target_benzene)]\n  if hasattr(m,'oob_score_'): res.append(m.oob_score_)\n  print(res)\n\ndef print_score_no(m):\n  res = [rmse(m.predict(X_train),Y_train.target_nitrogen_oxides),rmse(m.predict(X_valid),Y_valid.target_nitrogen_oxides), m.score(X_train,Y_train.target_nitrogen_oxides), m.score(X_valid,Y_valid.target_nitrogen_oxides)]\n  if hasattr(m,'oob_score_'): res.append(m.oob_score_)\n  print(res)\n  \nm_co = RandomForestRegressor(n_jobs=-1, oob_score=True,max_features=0.5,min_samples_leaf=3,n_estimators=200)   ### default 10 trees, here set to 40 , n_jobs = number of cores preferable\nm_co.fit(X_train, Y_train.target_carbon_monoxide)\nprint_score_co(m_co)","63903a08":"m_b = RandomForestRegressor(n_jobs=-1, oob_score=True,max_features=0.5,min_samples_leaf=3,n_estimators=200)   ### default 10 trees, here set to 40 , n_jobs = number of cores preferable\nm_b.fit(X_train, Y_train.target_benzene)\nprint_score_b(m_b)","ec46da48":"m_no = RandomForestRegressor(n_jobs=-1, oob_score=True,max_features=0.5,min_samples_leaf=3,n_estimators=200)   ### default 10 trees, here set to 40 , n_jobs = number of cores preferable\nm_no.fit(X_train, Y_train.target_nitrogen_oxides)\nprint_score_no(m_no)","6b3aeead":"(0.125**2 + 0.107**2 + 0.157**2)**0.5","2f156c9d":"### Train test split","073cca92":"### RMSLE calculation","314482f3":"#### This is a Basic implementation of random forest model to airpollution data with day, date and hour data used for predicting the targets ","5a2baf26":"### Data visualization","e5676342":"### Model Building","7927a048":"### Date_time data extraction","27515ea2":"### Load Dataset","d017b58b":"### Check data consistency"}}