{"cell_type":{"c8e8f214":"code","bf75a960":"code","49ab590e":"code","ce9f5e1f":"code","9f3968e8":"code","b05852b0":"code","fc31d33a":"code","773af09a":"code","ae155a6f":"code","a146bb73":"code","13434386":"code","d08371d7":"code","14033651":"code","94ff5536":"code","850fab03":"code","aac0bafc":"code","df63ea4c":"code","9d4815b7":"code","31766111":"markdown","dde06617":"markdown","0f3274ac":"markdown","81681b36":"markdown"},"source":{"c8e8f214":"# Load the libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport random\nimport time\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras import Sequential\nfrom keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom sklearn.utils import shuffle\nfrom IPython.display import display\n","bf75a960":"def load_images_from_folder(folder,only_path = False, label = \"\"):\n    if only_path == False:\n        images = []\n        for filename in os.listdir(folder):\n            img = cv2.imread(os.path.join(folder,filename))\n            if img is not None:\n                images.append(img)\n        return images\n    else:\n        path = []\n        for filename in os.listdir(folder):\n            img_path = os.path.join(folder,filename)\n            if img_path is not None:\n                path.append([label,img_path])\n        return path","49ab590e":"images = []\ndirp = \"\/kaggle\/input\/fruit-recognition\/\"\nfor f in os.listdir(dirp):\n    if \"png\" in os.listdir(dirp+f)[0]:\n        images += load_images_from_folder(dirp+f,True,label = f)\n    else:\n        for d in os.listdir(dirp+f):\n            images += load_images_from_folder(dirp+f+\"\/\"+d,True,label = f)","ce9f5e1f":"df = pd.DataFrame(images, columns = [\"fruit\", \"path\"])","9f3968e8":"df.head()","b05852b0":"df = shuffle(df, random_state = 0)\ndf = df.reset_index(drop=True)\n","fc31d33a":"fruit_names = sorted(df.fruit.unique())\nfuture_num = dict(zip(fruit_names, [t for t in range(len(fruit_names))]))\ndf[\"label\"] = df[\"fruit\"].map(future_num)\nprint(future_num)","773af09a":"df.head()","ae155a6f":"plt.figure(figsize=(12,8))\np = df[\"fruit\"].value_counts().plot(kind='bar')\n","a146bb73":"fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(15, 15))\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(df.path[i]))\n    ax.set_title(df.fruit[i])\nplt.tight_layout()\nplt.show()\n","13434386":"def load_img(df):\n\n    img_paths = df[\"path\"].values\n    img_labels = df[\"label\"].values\n    X = []\n    y = []\n    \n    for i,path in enumerate(img_paths):\n        img =  cv2.imread(path)\n        img = cv2.resize(img, (150,150))\n        label = img_labels[i]\n        X.append(img)\n        y.append(label)\n    return np.array(X),np.array(y)","d08371d7":"def from_categorical(lst):  \n    lst = lst.tolist()\n    lst2 = []\n    for x in lst:\n        lst2.append(x.index(max(x)))\n    return lst2","14033651":"def train_df(df, number_of_parts, part):\n\n    if part < 1:\n        print(\"Error, the part should be at least 1\")\n    elif part > number_of_parts:\n        print(\"Error, the part cannot be higher than the number_of_parts\")\n        \n    number_imgs_each_part = int(df.shape[0]\/number_of_parts)\n    idx1 = (part-1) * number_imgs_each_part\n    idx2 = part * number_imgs_each_part\n    return df.iloc[idx1:idx2]","94ff5536":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3,3),input_shape=(150,150,3), activation='relu', padding = 'same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding = 'same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu', padding = 'same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding = 'same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding = 'same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Conv2D(filters=16, kernel_size=(3,3), activation='relu', padding = 'same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(len(future_num)))\nmodel.add(Activation('softmax'))\n\n\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nmodel.summary()","850fab03":"model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","aac0bafc":"X_train, y_train = load_img(train_df(df,3,2))\ny_train = to_categorical(y_train)","df63ea4c":"callbacks = [EarlyStopping(monitor='val_loss', patience=10),\n             ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)]\n    \nhistory = model.fit(X_train, y_train, batch_size=128, epochs=50, callbacks=callbacks, validation_split = 0.2, verbose = 2)\n\n    \n","9d4815b7":"plt.figure(0)\n\nplt.plot(history.history['accuracy'], label='training accuracy')\nplt.plot(history.history['val_accuracy'], label='val accuracy')\nplt.title('Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\n\nplt.figure(1)\nplt.plot(history.history['loss'], label='training loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.title('Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()","31766111":"**Creating a dataframe of fruits and their respective image paths**","dde06617":"**Predictions**","0f3274ac":"# MDELLING AND TRAINING","81681b36":"**Distribution of different fruits in the dataset**"}}