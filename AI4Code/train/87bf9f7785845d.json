{"cell_type":{"b456e035":"code","47077376":"code","cdbaf632":"code","eacf5da1":"code","a52ee1f1":"code","f58f9a03":"code","9e32e9f0":"code","84969b73":"code","7c33ed98":"code","c996a010":"code","14756d78":"code","6f1aa6a9":"code","62f01954":"code","e70e1e9e":"code","05cd7ba8":"code","8a99ea95":"code","f9d84305":"code","b29b0780":"code","05355d3e":"code","737d7aa5":"code","e8542aa2":"code","2c5056f4":"code","7b555655":"code","b4765762":"code","0cf6ec93":"code","a479d5e6":"code","64e016c5":"code","818f61cb":"code","1ec4c770":"code","b32c95ab":"code","a66a9064":"code","cacb6d6b":"code","29dd8e9c":"code","e626804e":"code","e2dfc480":"code","9d9c5c45":"code","77dfeffa":"code","adda4846":"code","6081550c":"code","65bae03d":"code","7744d3d8":"code","e9d095d8":"code","5fa56d93":"code","148927bc":"code","1efd6541":"code","3ae4ab38":"code","4c274113":"code","cce9c18b":"code","9583a63a":"code","d4aa5cdc":"code","bdab0dce":"code","d5575f75":"code","8b1cbd99":"code","e786e8de":"code","8dea5efb":"code","7549e63c":"code","0f7456f6":"code","e24f6131":"code","846710c4":"code","99f15a15":"code","d4abf661":"code","d28bbad5":"code","7a1891c3":"code","a9472134":"code","369a1016":"code","d82a6b84":"code","1e882bb5":"code","47944fbd":"code","640f2359":"code","a62a0aa3":"code","74d73637":"code","6965d0f8":"code","fce6eede":"code","fac925fe":"code","efa35dea":"code","19a728e4":"code","a8b81bd0":"code","1b352f56":"code","11d58477":"code","74c98d0c":"code","012ff19b":"code","e540570a":"code","6c7d6db9":"code","8d8ae8de":"code","b18f4ff4":"code","b239f064":"markdown","d183283e":"markdown","d5578ee2":"markdown","35fc9328":"markdown","9f366b18":"markdown","8ceab723":"markdown","d85ab0fc":"markdown","c6f1426d":"markdown","0b847f3e":"markdown","0b1c0994":"markdown","89984261":"markdown","84e2f55d":"markdown","02d2ab45":"markdown","b806d5b0":"markdown","c4709dab":"markdown","e3f4a882":"markdown","17823e77":"markdown","a2b754f9":"markdown","bded33a5":"markdown","15c727be":"markdown","075793c1":"markdown","d94d2052":"markdown","ecfb5c95":"markdown","cdffd63c":"markdown","c8e5e0cb":"markdown","c63e59ea":"markdown","2585ebab":"markdown","9a2c512f":"markdown","f9c0eccb":"markdown","589bd144":"markdown"},"source":{"b456e035":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport random\nimport time\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\nfrom scipy.io import loadmat\nimport nibabel as nib\nimport csv\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\nimport skimage\nfrom skimage.morphology import convex_hull_image, erosion\nfrom IPython import display\nfrom scipy.ndimage import gaussian_filter\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport matplotlib.patches as patches\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose,\\\nLeakyReLU, GaussianNoise, GlobalMaxPooling2D, ReLU, Input, Concatenate\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\nfrom keras.models import Model\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","47077376":"Ground_PATH = Path(\"..\/input\/artificial-lunar-rocky-landscape-dataset\/images\/ground\")\nRender_PATH = Path(\"..\/input\/artificial-lunar-rocky-landscape-dataset\/images\/render\")","cdbaf632":"Ground_PNG = list(Ground_PATH.glob(\"*.png\"))\nRender_PNG = list(Render_PATH.glob(\"*.png\"))","eacf5da1":"print(\"GROUND LEN: \", len(Ground_PNG))\nprint(\"---\"*10)\nprint(\"RENDER LEN: \", len(Render_PNG))","a52ee1f1":"print(\"10th GROUND: \",Ground_PNG[10])\nprint(\"---\"*10)\nprint(\"10th RENDER: \",Render_PNG[10])","f58f9a03":"Sorted_Ground = sorted(Ground_PNG)\nSorted_Render = sorted(Render_PNG)","9e32e9f0":"print(\"10th GROUND: \",Sorted_Ground[10])\nprint(\"---\"*10)\nprint(\"10th RENDER: \",Sorted_Render[10])","84969b73":"Ground_SERIES = pd.Series(Sorted_Ground,name=\"MASK\").astype(str)\nRender_SERIES = pd.Series(Sorted_Render,name=\"IMAGE\").astype(str)","7c33ed98":"print(Ground_SERIES.head(-1))","c996a010":"print(Render_SERIES.head(-1))","14756d78":"Main_Data = pd.concat([Render_SERIES,Ground_SERIES],axis=1)","6f1aa6a9":"print(Main_Data.columns)","62f01954":"print(Main_Data.isnull().sum())","e70e1e9e":"print(Main_Data.head(-1))","05cd7ba8":"Bounding_Box = pd.read_csv(\"..\/input\/artificial-lunar-rocky-landscape-dataset\/bounding_boxes.csv\")","8a99ea95":"print(Bounding_Box.head(-1))","f9d84305":"print(Bounding_Box[\"Frame\"])","b29b0780":"Bounding_Box = Bounding_Box.drop(\"Frame\",axis=1)","05355d3e":"print(Bounding_Box.head(-1))","737d7aa5":"print(\"EXAMPLE 1th IMAGE BOUNDING:\\n\",Bounding_Box.iloc[0])","e8542aa2":"print(\"EXAMPLE 1th IMAGE BOUNDING:\\n\",Bounding_Box.iloc[0].values)","2c5056f4":"print(\"EXAMPLE 1th IMAGE BOUNDING TYPE:\\n\",type(Bounding_Box.iloc[0].values))","7b555655":"plt.style.use(\"dark_background\")","b4765762":"figure,axis = plt.subplots(1,2,figsize=(12,12))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][1]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][1]),cv2.COLOR_BGR2RGB)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\nOperation_Colorbar = axis[1].imshow(Example_Picking_MASK)\n\nfigure.colorbar(Operation_Colorbar, ax=axis.ravel().tolist(), shrink=0.5,label='SEGMENTATION')","0cf6ec93":"figure,axis = plt.subplots(1,2,figsize=(12,12))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][3]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][3]),cv2.COLOR_BGR2RGB)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\nOperation_Colorbar = axis[1].imshow(Example_Picking_MASK)\n\nfigure.colorbar(Operation_Colorbar, ax=axis.ravel().tolist(), shrink=0.5,label='SEGMENTATION')","a479d5e6":"figure,axis = plt.subplots(1,2,figsize=(12,12))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][3000]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][3000]),cv2.COLOR_BGR2RGB)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\nOperation_Colorbar = axis[1].imshow(Example_Picking_MASK)\n\nfigure.colorbar(Operation_Colorbar, ax=axis.ravel().tolist(), shrink=0.5,label='SEGMENTATION')","64e016c5":"figure,axis = plt.subplots(1,5,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][1]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][1]),cv2.COLOR_BGR2GRAY)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK,cmap=\"gray\")\n\naxis[2].set_xlabel(Example_Picking_MASK.shape)\naxis[2].set_ylabel(Example_Picking_MASK.size)\naxis[2].set_title(\"MASK\")\naxis[2].imshow(Example_Picking_MASK,cmap=\"jet\")\n\naxis[3].set_xlabel(Example_Picking_MASK.shape)\naxis[3].set_ylabel(Example_Picking_MASK.size)\naxis[3].set_title(\"MASK\")\naxis[3].imshow(Example_Picking_MASK,cmap=\"hot\")\n\naxis[4].set_xlabel(Example_Picking_MASK.shape)\naxis[4].set_ylabel(Example_Picking_MASK.size)\naxis[4].set_title(\"MASK\")\naxis[4].imshow(Example_Picking_MASK,cmap=\"plasma\")","818f61cb":"figure,axis = plt.subplots(1,5,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][10]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][10]),cv2.COLOR_BGR2GRAY)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK,cmap=\"gray\")\n\naxis[2].set_xlabel(Example_Picking_MASK.shape)\naxis[2].set_ylabel(Example_Picking_MASK.size)\naxis[2].set_title(\"MASK\")\naxis[2].imshow(Example_Picking_MASK,cmap=\"jet\")\n\naxis[3].set_xlabel(Example_Picking_MASK.shape)\naxis[3].set_ylabel(Example_Picking_MASK.size)\naxis[3].set_title(\"MASK\")\naxis[3].imshow(Example_Picking_MASK,cmap=\"hot\")\n\naxis[4].set_xlabel(Example_Picking_MASK.shape)\naxis[4].set_ylabel(Example_Picking_MASK.size)\naxis[4].set_title(\"MASK\")\naxis[4].imshow(Example_Picking_MASK,cmap=\"plasma\")","1ec4c770":"figure,axis = plt.subplots(1,5,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][2345]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][2345]),cv2.COLOR_BGR2GRAY)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK,cmap=\"gray\")\n\naxis[2].set_xlabel(Example_Picking_MASK.shape)\naxis[2].set_ylabel(Example_Picking_MASK.size)\naxis[2].set_title(\"MASK\")\naxis[2].imshow(Example_Picking_MASK,cmap=\"jet\")\n\naxis[3].set_xlabel(Example_Picking_MASK.shape)\naxis[3].set_ylabel(Example_Picking_MASK.size)\naxis[3].set_title(\"MASK\")\naxis[3].imshow(Example_Picking_MASK,cmap=\"hot\")\n\naxis[4].set_xlabel(Example_Picking_MASK.shape)\naxis[4].set_ylabel(Example_Picking_MASK.size)\naxis[4].set_title(\"MASK\")\naxis[4].imshow(Example_Picking_MASK,cmap=\"plasma\")","b32c95ab":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][2345]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][2345]),cv2.COLOR_BGR2GRAY)\n\nCopy_IMG = Example_Picking_IMG.copy()\nCopy_IMG[Example_Picking_MASK == 1] = [255,0,0]\nCopy_IMG[Example_Picking_MASK == 2] = [0,0,255]\nCopy_Compile_IMG = Example_Picking_IMG.copy()\n\nLayer_Concat_IMG = cv2.addWeighted(Copy_IMG,0.5,Copy_Compile_IMG,0.3,0,Copy_Compile_IMG)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Layer_Concat_IMG.shape)\naxis[2].set_ylabel(Layer_Concat_IMG.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Layer_Concat_IMG)","a66a9064":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][3]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][3]),cv2.COLOR_BGR2GRAY)\n\nCopy_IMG = Example_Picking_IMG.copy()\nCopy_IMG[Example_Picking_MASK == 1] = [255,0,0]\nCopy_IMG[Example_Picking_MASK == 2] = [0,0,255]\nCopy_Compile_IMG = Example_Picking_IMG.copy()\n\nLayer_Concat_IMG = cv2.addWeighted(Copy_IMG,0.5,Copy_Compile_IMG,0.8,0.2,Copy_Compile_IMG)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Layer_Concat_IMG.shape)\naxis[2].set_ylabel(Layer_Concat_IMG.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Layer_Concat_IMG)","cacb6d6b":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][12]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][12]),cv2.COLOR_BGR2GRAY)\n\nCopy_IMG = Example_Picking_IMG.copy()\nCopy_IMG[Example_Picking_MASK == 1] = [255,0,0]\nCopy_IMG[Example_Picking_MASK == 2] = [0,0,255]\n\nCopy_Compile_IMG = Example_Picking_IMG.copy()\n\nLayer_Concat_IMG = cv2.addWeighted(Copy_IMG,0.5,Copy_Compile_IMG,0.5,0,Copy_Compile_IMG)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Layer_Concat_IMG.shape)\naxis[2].set_ylabel(Layer_Concat_IMG.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Layer_Concat_IMG)","29dd8e9c":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][12]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][12]),cv2.COLOR_BGR2RGB)\n\n\nLayer_Concat_IMG = cv2.addWeighted(Example_Picking_IMG,0.8,Example_Picking_MASK,5.0,0.5)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Layer_Concat_IMG.shape)\naxis[2].set_ylabel(Layer_Concat_IMG.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Layer_Concat_IMG)","e626804e":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][888]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][888]),cv2.COLOR_BGR2RGB)\n\nLayer_Concat_IMG = cv2.addWeighted(Example_Picking_IMG,0.7,Example_Picking_MASK,2.9,1.5)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Layer_Concat_IMG.shape)\naxis[2].set_ylabel(Layer_Concat_IMG.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Layer_Concat_IMG[:,:,0],cmap=\"jet\")","e2dfc480":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][552]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][552]),cv2.COLOR_BGR2RGB)\n\n\nLayer_Concat_IMG = cv2.addWeighted(Example_Picking_IMG,0.8,Example_Picking_MASK,0.4,0.5)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Layer_Concat_IMG.shape)\naxis[2].set_ylabel(Layer_Concat_IMG.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Layer_Concat_IMG[:,:,0],cmap=\"jet\")","9d9c5c45":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][552]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][552]),cv2.COLOR_BGR2GRAY)\n\nCopy_IMG = Example_Picking_IMG.copy()\nCopy_IMG[Example_Picking_MASK == 255] = (255,0,255)\n\nLayer_Concat_IMG = cv2.addWeighted(Example_Picking_IMG,0.8,Copy_IMG,0.9,0.5)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Layer_Concat_IMG.shape)\naxis[2].set_ylabel(Layer_Concat_IMG.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Layer_Concat_IMG)","77dfeffa":"print(Bounding_Box.iloc[0].values)","adda4846":"print(Bounding_Box.iloc[0].values[0])\nprint(Bounding_Box.iloc[0].values[1])\nprint(Bounding_Box.iloc[0].values[2])\nprint(Bounding_Box.iloc[0].values[3])","6081550c":"print(Bounding_Box.iloc[0].values.reshape(2,2))","65bae03d":"for coordinates_x, coordinates_y in Bounding_Box.iloc[0].values.reshape(2,2):\n    coordinates_x = int(coordinates_x)\n    coordinates_y = int(coordinates_y)\n    print(coordinates_x)\n    print(coordinates_y)","7744d3d8":"for coordinates_x, coordinates_y in Bounding_Box.iloc[0].values.reshape(2,2):\n    print(coordinates_x)\n    print(coordinates_y)","e9d095d8":"x = Bounding_Box.iloc[2].values[0]\ny = Bounding_Box.iloc[2].values[1]\nt = Bounding_Box.iloc[2].values[2]\ns = Bounding_Box.iloc[2].values[3]\nstart_point = (x, y)\nend_point = (x + t, y + s)\nprint(start_point)\nprint(end_point)","5fa56d93":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][2]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][2]),cv2.COLOR_BGR2GRAY)\n\nCopy_Mask = Example_Picking_MASK.copy()\nfor coordinates_x, coordinates_y in Bounding_Box.iloc[2].values.reshape(2,2):\n    coordinates_x = int(coordinates_x)\n    coordinates_y = int(coordinates_y)\n    cv2.drawMarker(Copy_Mask, (coordinates_x, coordinates_y), (255, 0, 0),thickness=5)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Copy_Mask.shape)\naxis[2].set_ylabel(Copy_Mask.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Copy_Mask)","148927bc":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][0]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][0]),cv2.COLOR_BGR2GRAY)\n\nCopy_Mask = Example_Picking_MASK.copy()\n\nx = Bounding_Box.iloc[0].values[0]\ny = Bounding_Box.iloc[0].values[1]\nt = Bounding_Box.iloc[0].values[2]\ns = Bounding_Box.iloc[0].values[3]\n\n\nCopy_Mask = Example_Picking_MASK.copy()\n\nMarker_Image = cv2.drawMarker(Copy_Mask, (int(x), int(y)), (255, 0, 0),thickness=5)\ncv2.putText(Copy_Mask, \"ROCK\", (int(x), int(y)), cv2.FONT_HERSHEY_COMPLEX_SMALL, 2, (255, 0, 0), 2)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Marker_Image.shape)\naxis[2].set_ylabel(Marker_Image.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Marker_Image)","1efd6541":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][1]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][1]),cv2.COLOR_BGR2GRAY)\n\nCopy_Mask = Example_Picking_MASK.copy()\n\nx = Bounding_Box.iloc[1].values[0]\ny = Bounding_Box.iloc[1].values[1]\nt = Bounding_Box.iloc[1].values[2]\ns = Bounding_Box.iloc[1].values[3]\n\n\nCopy_Mask = Example_Picking_MASK.copy()\n\nMarker_Image = cv2.drawMarker(Copy_Mask, (int(x), int(y)), (255, 0, 0),thickness=5)\ncv2.putText(Copy_Mask, \"ROCK\", (int(x), int(y)), cv2.FONT_HERSHEY_COMPLEX_SMALL, 2, (255, 0, 0), 2)\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Marker_Image.shape)\naxis[2].set_ylabel(Marker_Image.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Marker_Image)","3ae4ab38":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][1]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][1]),cv2.COLOR_BGR2RGB)\n\nCopy_Mask = Example_Picking_MASK.copy()\n\nx = Bounding_Box.iloc[1].values[0]\ny = Bounding_Box.iloc[1].values[1]\nt = Bounding_Box.iloc[1].values[2]\ns = Bounding_Box.iloc[1].values[3]\n\nCopy_Mask = Example_Picking_MASK.copy()\n\nRec_IMG = cv2.rectangle(Copy_Mask, (int(x), int(y)), (int(x + t), int(y + s)), (255, 255, 0), 5)\ncv2.putText(Copy_Mask, \"ROCK\", (int(x), int(y)), cv2.FONT_HERSHEY_COMPLEX_SMALL, 2, (255, 0, 0), 2)\n\naxis[0].set_xlabel(Example_Picking_IMG.shape)\naxis[0].set_ylabel(Example_Picking_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].imshow(Example_Picking_IMG)\n\naxis[1].set_xlabel(Example_Picking_MASK.shape)\naxis[1].set_ylabel(Example_Picking_MASK.size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(Example_Picking_MASK)\n\naxis[2].set_xlabel(Rec_IMG.shape)\naxis[2].set_ylabel(Rec_IMG.size)\naxis[2].set_title(\"CONCAT\")\naxis[2].imshow(Rec_IMG)","4c274113":"figure,axis = plt.subplots(1,figsize=(20,20))\n\nExample_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data[\"IMAGE\"][0]),cv2.COLOR_BGR2RGB)\nExample_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data[\"MASK\"][0]),cv2.COLOR_BGR2RGB)\n\nBound_Coor = []\nwith open(\"..\/input\/artificial-lunar-rocky-landscape-dataset\/bounding_boxes.csv\") as bounding_boxes_csv:\n    CSV_Reader = csv.reader(bounding_boxes_csv, delimiter=',')\n    next(bounding_boxes_csv)\n    for rows in CSV_Reader:\n        if rows[0] == '1':\n            Bound_Coor.append(rows[1:5])\n        else:\n            break\naxis.imshow(Example_Picking_MASK)\n\nfor bounding_coor in Bound_Coor:\n    bounding_box = list(map(float, bounding_coor)) \n    Rect_Image = patches.Rectangle((bounding_box[0]-0.5,bounding_box[1]-0.5),\n                             bounding_box[2],bounding_box[3],\n                             linewidth=4,\n                             edgecolor='r',facecolor='none')\n    axis.add_patch(Rect_Image)","cce9c18b":"Main_Data_Reduced = Main_Data[0:1000]","9583a63a":"print(Main_Data_Reduced.head(-1))","d4aa5cdc":"Image_List = []\nTransformation_List = []\n\nfor image_x,mask_x in zip(Main_Data_Reduced.IMAGE.values,Main_Data_Reduced.MASK.values):\n    \n    Picking_IMG = cv2.cvtColor(cv2.imread(image_x),cv2.COLOR_BGR2RGB)\n    Picking_MASK = cv2.cvtColor(cv2.imread(mask_x),cv2.COLOR_BGR2RGB)\n    Layer_Concat_IMG = cv2.addWeighted(Picking_IMG,0.8,Picking_MASK,5.0,0.5)\n    \n    Resized_Image = cv2.resize(Picking_IMG,(256,256))\n    Resized_Transformation = cv2.resize(Layer_Concat_IMG,(256,256))\n    \n    Resized_Image = Resized_Image \/ 255.\n    Resized_Transformation = Resized_Transformation \/ 255.\n    \n    Image_List.append(Resized_Image)\n    Transformation_List.append(Resized_Transformation)","bdab0dce":"print(\"ARRAY IMAGE SHAPE: \",np.shape(np.array(Image_List)))\nprint(\"ARRAY MASK SHAPE: \",np.shape(np.array(Transformation_List)))","d5575f75":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Transformation_List[10])\naxis[0].set_xlabel(Transformation_List[10].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(Image_List[10])\naxis[1].set_xlabel(Image_List[10].shape)\naxis[1].set_title(\"LUNAR\")","8b1cbd99":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Transformation_List[100])\naxis[0].set_xlabel(Transformation_List[100].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(Image_List[100])\naxis[1].set_xlabel(Image_List[100].shape)\naxis[1].set_title(\"LUNAR\")","e786e8de":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Transformation_List[450])\naxis[0].set_xlabel(Transformation_List[450].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(Image_List[450])\naxis[1].set_xlabel(Image_List[450].shape)\naxis[1].set_title(\"LUNAR\")","8dea5efb":"Train_Set = np.array(Image_List,dtype=\"float32\")\nTransformation_Set = np.array(Transformation_List,dtype=\"float32\")","7549e63c":"print(\"TRAIN SHAPE: \",Train_Set.shape)\nprint(\"TRANSFORMATION SHAPE: \",Transformation_Set.shape)\nprint(\"---\"*10)\nprint(\"TRAIN DTYPE: \",Train_Set.dtype)\nprint(\"TRANSFORMATION DTYPE: \",Transformation_Set.dtype)","0f7456f6":"compile_loss = \"binary_crossentropy\"\ncompile_optimizer = Adam(lr=0.0001)\noutput_class = 1","e24f6131":"Checkpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")","846710c4":"E_AE = Sequential()\n#\nE_AE.add(Conv2D(32,(2,2),kernel_initializer = 'he_normal',use_bias = True, padding=\"same\"))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(64,(2,2),kernel_initializer = 'he_normal',use_bias = True, padding=\"same\"))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(128,(5,5),kernel_initializer = 'he_normal',use_bias = True, padding=\"same\"))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n\n\n\n\nD_AE = Sequential()\n#\nD_AE.add(Conv2DTranspose(64,(2,2), padding=\"same\"))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(32,(5,5), padding=\"same\"))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(output_class,(5,5), padding=\"same\"))\nD_AE.add(ReLU())","99f15a15":"print(D_AE.summary())","d4abf661":"print(E_AE.summary())","d28bbad5":"Auto_Encoder = Sequential([E_AE,D_AE])\nAuto_Encoder.compile(loss=compile_loss,optimizer=compile_optimizer,metrics=[\"mse\"])","7a1891c3":"Model_AutoEncoder = Auto_Encoder.fit(Train_Set,Transformation_Set,epochs=55,callbacks=[Checkpoint_Model])","a9472134":"print(Auto_Encoder.summary())","369a1016":"print(Auto_Encoder.layers)","d82a6b84":"print(Model_AutoEncoder.params)","1e882bb5":"Prediction_MASK_Seen = Auto_Encoder.predict(Train_Set[:10])","47944fbd":"figure,axis = plt.subplots(1,2,figsize=(14,14))\npre_img_number = 1\n\nOriginal_Img = Train_Set[pre_img_number]\nPredict_Mask = Prediction_MASK_Seen[pre_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"PREDICTION\")","640f2359":"figure,axis = plt.subplots(1,2,figsize=(14,14))\npre_img_number = 2\n\nOriginal_Img = Train_Set[pre_img_number]\nPredict_Mask = Prediction_MASK_Seen[pre_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"PREDICTION\")","a62a0aa3":"figure,axis = plt.subplots(1,2,figsize=(14,14))\npre_img_number = 5\n\nOriginal_Img = Train_Set[pre_img_number]\nPredict_Mask = Prediction_MASK_Seen[pre_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"PREDICTION\")","74d73637":"figure,axis = plt.subplots(1,2,figsize=(14,14))\npre_img_number = 8\n\nOriginal_Img = Train_Set[pre_img_number]\nPredict_Mask = Prediction_MASK_Seen[pre_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"PREDICTION\")","6965d0f8":"figure,axis = plt.subplots(1,2,figsize=(14,14))\npre_img_number = 9\n\nOriginal_Img = Train_Set[pre_img_number]\nPredict_Mask = Prediction_MASK_Seen[pre_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"PREDICTION\")","fce6eede":"figure,axis = plt.subplots(1,2,figsize=(14,14))\npre_img_number = 6\n\nOriginal_Img = Train_Set[pre_img_number]\nPredict_Mask = Prediction_MASK_Seen[pre_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"PREDICTION\")","fac925fe":"Reading_IMG = cv2.cvtColor(cv2.imread(\"..\/input\/artificial-lunar-rocky-landscape-dataset\/real_moon_images\/PCAM1.png\"),cv2.COLOR_BGR2RGB)\nReading_IMG = cv2.resize(Reading_IMG,(256,256))","efa35dea":"print(Reading_IMG.shape)","19a728e4":"Reading_IMG_Shape = Reading_IMG.reshape(1,Reading_IMG.shape[0],Reading_IMG.shape[1],Reading_IMG.shape[2])","a8b81bd0":"figure = plt.figure(figsize=(10,10))\n\nplt.imshow(Reading_IMG)","1b352f56":"MASK_Seen = Auto_Encoder.predict(Reading_IMG_Shape)","11d58477":"figure,axis = plt.subplots(1,2,figsize=(14,14))\n\naxis[0].imshow(Reading_IMG)\naxis[0].set_xlabel(Reading_IMG.shape)\naxis[0].set_ylabel(Reading_IMG.size)\naxis[0].set_title(\"IMAGE\")\naxis[0].axis(\"off\")\naxis[1].imshow(MASK_Seen[0])\naxis[1].set_xlabel(MASK_Seen[0].shape)\naxis[1].set_ylabel(MASK_Seen[0].size)\naxis[1].set_title(\"PREDICTION\")\naxis[1].axis(\"off\")","74c98d0c":"Real_Lunar_Photos = Path(\"..\/input\/artificial-lunar-rocky-landscape-dataset\/real_moon_images\")\nList_Real_Photos = list(Real_Lunar_Photos.glob(r\"*.png\"))","012ff19b":"print(List_Real_Photos[1])","e540570a":"List_Real_Photos = pd.Series(List_Real_Photos,name=\"TARGET\").astype(str)","6c7d6db9":"figure,axis = plt.subplots(6,6,figsize=(14,14))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_Real_IMG = List_Real_Photos[indexing]\n    Reading_IMG = cv2.cvtColor(cv2.imread(Picking_Real_IMG),cv2.COLOR_BGR2RGB)\n    Reading_IMG = cv2.resize(Reading_IMG,(256,256))\n    Reading_IMG_Shape = Reading_IMG.reshape(1,Reading_IMG.shape[0],Reading_IMG.shape[1],Reading_IMG.shape[2])\n    MASK_Prediction = Auto_Encoder.predict(Reading_IMG_Shape)\n    \n    operations.axis(\"off\")\n    operations.imshow(MASK_Prediction[0])\n\nplt.tight_layout()\nplt.show()","8d8ae8de":"figure,axis = plt.subplots(6,6,figsize=(14,14))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_Real_IMG = List_Real_Photos[indexing]\n    Reading_IMG = cv2.cvtColor(cv2.imread(Picking_Real_IMG),cv2.COLOR_BGR2RGB)\n    Reading_IMG = cv2.resize(Reading_IMG,(256,256))\n    Reading_IMG_Shape = Reading_IMG.reshape(1,Reading_IMG.shape[0],Reading_IMG.shape[1],Reading_IMG.shape[2])\n    MASK_Prediction = Auto_Encoder.predict(Reading_IMG_Shape)\n    \n    operations.axis(\"off\")\n    operations.imshow(MASK_Prediction[0],cmap=\"jet\")\n\nplt.tight_layout()\nplt.show()","b18f4ff4":"figure,axis = plt.subplots(6,6,figsize=(14,14))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_Real_IMG = List_Real_Photos[indexing]\n    Reading_IMG = cv2.cvtColor(cv2.imread(Picking_Real_IMG),cv2.COLOR_BGR2RGB)\n    Reading_IMG = cv2.resize(Reading_IMG,(256,256))\n    Reading_IMG_Shape = Reading_IMG.reshape(1,Reading_IMG.shape[0],Reading_IMG.shape[1],Reading_IMG.shape[2])\n    MASK_Prediction = Auto_Encoder.predict(Reading_IMG_Shape)\n    \n    operations.axis(\"off\")\n    operations.imshow(MASK_Prediction[0],cmap=\"hot\")\n\nplt.tight_layout()\nplt.show()","b239f064":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSEhUSEhMVFRUXFRUVFRUXFxcWGBUXFxcXGBcXFRYYHSggGBolHRUVITEhJSkrLi4uFx8zODMsNygtLisBCgoKDg0OGhAQGi0lHyUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAHYBqwMBIgACEQEDEQH\/xAAcAAAABwEBAAAAAAAAAAAAAAAAAQIDBAUGBwj\/xABGEAABAwICBwUDCgMIAQUBAAABAAIDBBESIQUGMUFRYXETIoGRoQcywRQjQlJygpKx0fBisuEkM0Njc6LC8VMldJOj0hX\/xAAaAQACAwEBAAAAAAAAAAAAAAABAgADBAUG\/8QAMxEAAgECBAIJBAEEAwAAAAAAAAECAxEEEiFRMUEFEyJhcYGhsfAykcHR4SNysvEGM0L\/2gAMAwEAAhEDEQA\/ANP2xO1NEoHPLcixLuWsYhV0rtEh3NFZSxBE1yVn9bNL9kwRNPecLu5N\/qfyK0QZck3ADQS4nYABck+C5PpfSBmlfJnZxyB3N2NHgLKyCu7bEirsanqCd6XDkBzULbkpgK1U9C0cBSUkyJDatgIDjtyHVW54xV2xLbEljLkDZz3DmbblZ6T1bqoBd8LsO0Pb32EHeHNvko1PbYB\/Vdf9nc8jqTBJ\/hvLG8cFg4A9MVully8R0lOErwXZ7+f69SyFNPicPKIL0FpPVmkqP72BhP1gMLvNq55rzqIylhNRTueWtcA9jrGwO8HhdWYfpSnUkoyTTem6+\/8AAs6LSuc5ZL2c8EuzDKwk8sQv6XXQfaNF\/aY5Rslgjdfi5t2H0a3zXO62PEwjkulabDqjRdLUuaQ+IhkgIILRIBe4P8TWgfaTVuxiYS3uvnnYi1gZMBLATTXJ0FaWhIjc0VwVXRuLHWOwq5ChVkQcFE+QR6JyeD1UxVWVjfENwS3U8j88RYOR73nuQehOJYz6Ra3uNBe+3uN3c3HY0dfVaTV7SAli+S1ZFibxvF\/mXHZa+ZGwHZflksnS0zWCzRbO54k8SdpKkmRU1aHWK97Pk9n+fbuGjKzJmk6R8EjopBZwPUEbnNO8EZgqEHLU0jxXwiBxAqYh8y4\/4jdpicTx3HceRKy5aQSCLEEgg5EEZEEbimoVXNNSVpLiv13PkLKNmnyHWlE8XSQgHK8lxDsuu4\/outal6d+Vw2efnY7Nk\/iH0X+Ns+YPJclcp2gNLupZ2zNzANnt+sw+8Ou8cwFmxVDroWXFcPnePCVmdqcxNlo5p6CRsjWvYQ5rmhzTxBFwUosXBNBGwjgfP+iUGjh6p7skYjTXGQxh5D1VRR6S7SqfC0DBHGbni8OaDnfYL263UHWTWtrAY4CHP2OkGYZxwnYXegSPZ7R92SY7yGN573G\/Ut8iszr3qKEPP9HTjg3DDyr1VbS0U93z+3D7+OqDBy\/fVKDQcrDkl4UZbl++S1HNsQ3Rf9FNFllPkZfNNEIqQLEMhNvYpbouH78U05idMKkuZDcxMuYrBzEw+NOmEitNlB0nSfTG\/I9eKtDGgGXyOxWxlbUDVzMiHb0PHeLfFRXQ2ueAsOp2Z+Z8FoJaa2Ifvj8FCmpd3C5J\/e02t4rTGqVspRDYX37B8SP3+SZEN8lcSw3Pw4DqkRwZ34XPlst42VyqC3Kt8d3EjnbpsFvRJ7L9\/qVbRw23fvmidDfd+n9UesQE9SExhPj5XG3zFvFK7MHcp0dPu8uo2WHmnPkF8+KXOOpJE2Rtkhin1UPBRo2ZrOpXRjYw1qdihJPJT4KMKxgpBdVyrJDKDZjfaFVCnoixvvzuEfPB7z\/CwDfvrkZK2\/tbrsdY2EbIYx4Pk7zv9ojWHJWnD\/RffX55D2sLgF3KUQolH71+SlSOWuHAhGqHkKnqHXVpUKrmVFXYeBvdW4\/m2OPvFrST1F11vUJv9neeMzvRkY+C5foZlo2Dg1o9Aurajt\/srTxfIfJxb\/xXHxWkF4kp\/UXuFMVtK2WN8bxdr2lp6FN6M0k2Z0zBk6GUxuHgHB3Qg+YKnWXPTNByPRuqsVO93afOPa4gYvdbY5EDedmZ8Fs9AMZMx9PNG17QAW4he7CfdvtsDa3Xkj1q0eBI2YDJ3dd1Gwnw\/lTmq4vK\/wD0x6u\/otFatOt25u7K4xUdEZDX7QlDStHZ42zPzbGHXaBvc69yByvmsQ1y1ntecRVMJ2dkADxIcbjwuPMLERvLjZuZXoMBFuhGUm23rq7\/ADgZar7TJjnpsyXVnQ6LLs5D90bfE7lttXNWqOtiLHsLJo7Bz4zhxNPuOI2HYQctovvSVsdSpStq\/D5qPGlKSucoqG4XXCsYHi2fBbrTHsrkt8xM143NeMJ8xcfksdpLV2qpR8\/E5rb2D8i0k7BiCeGKo1rKMte\/R+v4FcJR5CHDJIITbJO6lByuQByCocx4c02INwVpdMwtq4vlkY+caAKlo37hKB5B3geJWTbtKudX9KmnlDtrT3XtOYc05EEbxZU4iEk1Vh9S9VzX6DCz7L4MrmvQc5T9aNFiCRro7mCQF8R22H0mH+JpIHQg71VFyuhOM4qUeDA1Z2DL03iSHuRMicfdaf3zTSnGCzSdl3uw9OMqkssE29krv7HUfZVpvGx1I85su+LmwnvN8Cb\/AHjwW+LFwXQhlp5452uALHA297ENjmm24gkeK0ulNcKqe4D+zbwju3Lmb4j525Ly+OxdBVW6cs19t+evDvO3huhsXUXajlXf+ld\/jvN9pjWGnprh78T\/APxs7zvHc3xWC05rXNUXa35uP6rTm4fxnaemQ5LOlKauTVxU56cF85nosL0VQw9n9Ut3+FwXq9mSKCldLI2Ngu5xsB8TwAzJ6LsOjaBsETIm7Gi1+J2knqST4qk1I1d7BnbSD514yB2xs4faO\/wHFactWzCUckcz4v0Rxelsaq9TJB9mPq\/0uCE2QISsKBatlzkCAE26NPWSiFLkGWWCaeE+WJJYmuLlV7kR0f7\/AKpp0amliQWJlIltiA6NNFqnvjTLolYpBTI00VwDwOfTd8QoM0H6n9FcsZbI7xb4j4KNJFZPGQGsxTup0XyfI+A+PwVk6JEYDYZHyVmcrylYabIIfJlaOhPAodieCnWASK1tOnfko4BTBCeBSuyPNBzDYQ9hKEdKrARJxsSqdWyEULsjRR2UuJqNrQhPKGMc\/wCq1zvIE\/BUykWKNtTzxrVWdtWVMn1pngfZacDf9rWqpJQa4kXOZ3nnvSXLtK0VYpsP0m\/w+KeeUxRnb1Tryr4fQgMjzuVbNmp8yiRNu9o4vaPMhU1B4HTKFtgAupani1HFz7Q+cjyuX0YXVNXBalh\/0wfPP4rjYzgg0eJjtBaV7LSc1z3JZXRu637h8Dl94rpQXDHT4p5ucsn85XXtXNJfKKdkh962F\/225HzyPisD4mhk3SNL2sTmbyMvtDMeqo9Ux85LyYwW4Zu\/RaIPUKhoTHPNJ9GQRkfaBfi\/MHxUvZAMZ7VKMTwTBuctNhnA39mWgSDybi+4uES1LgQQbEEEdQuu606w\/JdP2d\/dSQRRvB2fStfzI8Quc6z6A+T1zqZt8DnNMJ4xPPdPPCLgniwrr4Ko1B0ntdeD4lMrXubTV4GWNj3DDiaDbqL7V03UWkDYpJLWxvwjm1gt\/M548FhqMNZHlsaPKw2LpNLakpAX5dlEXv8AtWLn+bifNY8TJcEGmi2VRrVo75RSTRb3RnD9od5vqFG1I0waqjjlebvGJkn2mn\/8lp8Vf3WSMmndFzXI8xsm4\/8ASebKFotZtDRwVUzGtyxlwxYjk7vDIdVWDC3YAPABdKp09Si2lB+i\/b9DpYf\/AI7VqQjN1IpNX0Tf6XqV8bji7oPkpLIZDu810DUjVNk\/ztQXFotaMZXJAdZxGYsC02HHkVrq\/VelLe7AwW+qLeoVcul8RJdmEY+N37W9jPLCYGjPLKc575csV63ZzvQgFTA6imcLk4on\/UkGTTnuNy08iqOXRgY4te12JpLXA7iDYjJdDn1LAPaU7y1wzwPOR5B20eKqtZNHOe0zEYZI8LJ2naTkI3jjcEA9AufPFYpU3aTjrd5bJO\/NbHRwkOj3iElFSjJJLNq4yXJ34qXLjroZJsbRsA9fzS01UVMbPfe1vUi\/kqup1lhb7t3nkLDzP6LnKNWs72cn5v1Z6Odahh4WbjFbaL0\/gubJTI3OxFrS7CMRtuHF18mjmSFmIdJ1NScMIEbd5H0erzv6C60GidGiOzWkufI5rXOJsXuJAaBc22kbVZOg6X1vXZavz5L37jPTxvXpuiuzznLRd9lxfolzfIeY0m2WfDb4Lo2p2qPZ2nqG9\/a2M\/Q4OfwdwG7rsn6q6pMpgJZLPm3b2x\/Z4u5+XE6my0UMNbtT+xxekelesTpUXpze\/cu7v5+F7tEIsKcIRWW65wxuyUAlWR2UuEbwoWS7I7KXANYUMCdshZQgwWpLmqQWpOFNchFMaSY7fopTmpp0abMQiO6Jckd8xZOGJLibuTXIVz4jzSHQ32KzfGmDEmUgkJ0OaPsgpnZojGjmFykPByCGEqS6JDs1MxLBNCMlBEVWKGVVa01GGhq3DaKae3Xs3WVg4FU2ubbaPq\/\/AG8v8hTxV2hGzgCS5GCkuK6uYrH6Pf4fFOPKYpHZnp+\/zUxtJI7Y0\/aOX5q5VYQpqU2ku929wwpzqSywi5PZJt+hXzFN0DbzRj\/Mb6EFWUuiX73AfZ7yj0+CCVr3XNjcAjImxGfmufPpHDt2jK\/hf34G+XRmKpwc6kMq77f7OlaIoZJbNjbdx2bh1J3Dmup01N2cTYxngY1gPHC0C\/ouAUOt9SxxdDUOZe1w2xbls7jgR5haOh9qVXGPnhDK0bSWmN34mnCPwrBWbqO64GWEcujM9S1RFRNG\/J4lkuD9o5j9710X2f6TwzOhJylF2\/bYL+rb\/gC5hrPrHBV1AqaaN8U1x2gJDo3fxB2R5Wwq1otIuY5sjDZzHNc3qDcLNlbbL5ZMqsd6ulsKh6OrGzRMmZ7r2hw5XGw8wbjwUsJRDkHtIp2PrnOcxhIayxIJtYLKaQmc7NxJsLDFc2HAX2Dkp\/tZ0zLDpGRuAYS1haSD3hh2jPjdZfR089U4NFmgnMgbBfbms0sPVlK74ctT0uG6UwdHDwh\/6SV+zz8TqGotBiZTRn6bsbubbmQ36tbbxWh9r+mOwoC0HvSvay3FoOJ\/oLeKc1FpAHEgZRRtjb963qAwfiVzpaaje\/sah0Jdb3JC0GzuGLjbctLTStsefnUUqrm+buZH2R14vJDfuvaJWdRk7zDm\/hXSis7o7VemhkZNA0x4b4Qw9whwIIsd2e5X90LFcnd3Oae1lrIXxTuNg8dnsJu4Z2y5X8lzao0kx7cLA8uOQs0j812X2p6M7fR8hA70RbO3efmzdwH3brkWi6cA3SPDRm8zOjQ6Xr0aSpRSst739\/iO2aiSXpQd+N2LrZp\/Kyka2RzyUs0dO4tldGQwg4TfgHDNpIyuFmNQdKhr3QONhJZzOGMCxb1LQLfZK3cgVrWtjm31uedtBaYraKYnt3tsSHxvc59zwc1374LojNbKWta3tLNke0wVEFzd8TgfnGEbhnmbEEjlew171QirGF4+bmGx4yxW+i+20eq4lJo+qic4D5rA6xwEd8g7iM3bN6dKnZuUrePzUsjCrXnaEbvuXywemdVpIKmSndnhd3X\/APkYc2PA5tIPW43KyoNWI8JEwJNwRZxbbiCNljlz5rZmsbWUQqhnJAOzksO8Y75fhcfJ5O5Q9UC6euhjsMF3OeLA91rS7MnmGjLikq168+zDRb\/Pwjdh6WDox62u80rtZPB89\/FtLx1tJ0fq7O6ImGEWA7rScAd0v+azmlqGpheO3Y+N17sJyFxvYRllku\/NYBsWW9pej+1o3PA70Tg8dNjvQ38FZgFGjUTavd8Xx1+amfHY+riVZ6RXCK4ee\/45I1uhK4VFPFOP8SNrjyJHeHgbjwU2yxfsjre0oTGdsUr2j7LrPHq53ktsrKsMk5R2ZjTurhEJNk4k2SDCELJSJQISNGjUAFZFZKQQIJsgQlIkQiLJBCcIREI3IMkIinSE25MmQUM00Wo2usnbXU4AGMKLCnixIsjcKEFiLCnEalwlfdFiSSkEIZhMo6XKt1tZjoKsDaaae3Xs3KaCkVMOON7PrMe38TSPijm1QGtGeab8SBzOQ8VZtoIowHTTCxzAbv6HafBVBGVimTYbAtVeNWppCeVeGpbha1Cld1KWd8rt2XkuPmXn\/wDXp4v7mIk8fdv4uzUaXWGod7jGt63cfX9FUMf3h1CtuzVdLoqjN3leT3bNVTpvF5csGoR2ikkQZ6uodtlPhl+SgvjcdpJV32aMQArWsBTjwic2eKq1Prk34tsqaWneMwbJFXiJ7xv+XkroMUWoprorCpcirrNyqpZMDgd29XsOlW7A4fkfVVj6RMPpSqKmGd9B1JM1NBpqaE3hmkjzv3HuaD1ANj4rUaO9pldH772Sj\/MYL\/iZh9brmlNRO3Et6KTO8gWJv1Sxwrm7MjnY1XtA1wh0lGwOpyyoYbNexwe1zTtabgEcRa+asdUNHRscxjpImOsP7x7WA7trv+1zuKsDHXwm42Hh0Cmx6Sad5ueIVdSMY9iN9Bk9z1BoTR7IY8LHB2I4nPGxxIAytuAAHguN+0etczSUrHDaGOZzYWgX8w5ZDR2nDDK0NlliBcMT43FhHPIi6uNeJao1MTZZTPEWl9PK5rceA2xMe9oGIh1r35Hes3VuMtRs10S9GV8zM4pXx7+44tz5gZHxXd9G1PawxyfXjY\/8TQT+a4Joishjc3tg9zR7wjw4vAuIC6vovXzR7g1gl7KwADZGloAGQGIXb6pJLYiNPURB7XMdmHAtPQixXnB1R8mnlpZMnRPcwfxNB7p62svRdNWxyjFFIyQcWOa4ebSuXa96r0xrjUyC\/aNabXs0ubkTYZk5D0Rpyir3Gyyk0o6vbiZYaTyBzGeTsxmLHI8Rktzq37RDgwVLHPIHdlZa7rbngkZ\/xDxA2rNV00b4+xbE3CHh4ysQQLZWysfVV2kpHQht43DEO6SCGAbNu\/oss6+d5aauzs0eilSh1uMlkjtzfvbw472NRpfWWeqOFoLGnY1tzfrvPQKK3VeeSN+EhkuE4Li9zwPBRtQNLuZVNjcMTZiGHLNrs8Lm8BuI4Z7l1SaAA3SrDvNebuwVelVGPV4WOSO\/N\/N9X3nINQJnQOwTgkSY2ytO8OuHA+H5LZai6DMFdUXz7NmFp4iRwcx3i1nqqfWmkDKx+Hfhf4uFz63W51RqWyRF9u+A1jjxazEWeWJy3Td1dczjcXqI0XprHXVVOTk0MLPugCT1c3yKuaqASMcx2xzS09CLLlujZ5qfSAmnjfGHzOuXNIGGQkbdmQIPgurFUhMF7I3GKpq6Z20AG3+m8tJ\/+wLqS51RQdhpxpGQqIn+eHE71jB8V0VbcTLPJT3Sf4fqhILSwESBRLOOgIXQKSoMKugiQUIGgkNeCSARcbRwuLi\/DIpYUIGgiQuoQCSlIlCCSkEJTikFyZBEuCQ0kJRckORRB8G6S4Jm+d0614KjAJsiTlkLIEKlCyBRhQgSCCJQh5o1jhMVVURbME0jQOQccPpZVbitn7XKHstIvdulZHKOtuzd6x38Vi10YSvFMoSsEr2J2JoPEAqiVroqS7MPA+h\/ZWvDS7VtxZrQlEJTURCMLblKWKISCEtJCGVCXGyxEYgnkdkrgg3GsCOnLoy4twnExzCHNDgWu25ccvRPAJKrnSTVmhlJ3KwaOuc1NhpWsGQ8d6eCNVSopu4cxn66O5JWv1Xqm11MaCVwbK3vU8h3OtsPI7D5qonY0ixCpoZTFJiabOabtI5LJiaF9UWwmSKiomhe6KVmF7CWuaciCNo3p6DSeIhoDrnYAL38lrNMQxaShhncDFUizJHYcpYwMib\/AEhsB3joLIpqKGlZcWbxcblx8fgFyK2JhDRay2W\/za52MH0RWrrPN5Ibv8J+702uN6O0c+4e8lpGYAyd+IbPBWVVXEmz3Oc4C3ecXEDgXOvb95LM6U1ie67YQWD6x949Pqqll0lMdhwjgB+fFKsFWq9qtotvnD38DXPpHC4NZMHG75zev8vysjq+q9bSxtlnqS3uFgYzbiJxHut37BnsHJbXQen6OtZ2Zwhx2wyht\/u3yf4ZjeAvPEGlz9Jvl+hUoaTvkAfFXxw0VolY4tXEVKss9R3fzyS7kj0pQ6CpoHYooI2O+sGi+e3Pcn9ITMjYXyODWjMkmw\/fJecYtb62IYYqqZg4B5IHQOuAm4NLzTydrVTyy2vhD3l1iRYloJs3K4yttTywziryaKlO5vq\/SPbzvl3bG324Rsutfq\/C6nbA4C5nifkcgZLl8YPC7XNH3VzLRmskcTwTAJWja1z8N+tgRbln8FtKr2j0s7GsLZIpRJG6MOwlpcHWsHNN\/dLhmBtSOMrWsRMtaT2iU78pY3s42tI0ddjv9q1dHVsmY2WN2JjhdpsRcbNhzGw7Vx3WGgwVsoaO68iZnSUYzbkCXDwXTNTaN8VIxjwQbvcAdoa51xfzJ8VW4pK4yd3YXpekvUUc42xzhp+zK0s\/MjzWsVNMMr2uQQ4Dm0hw9QFcNcCLjYcx0RUm0k+ROYaTdAlJJRGFEpN0guQuiEXdVmsmm2UdO+ofnhFmt+u85NaOp8gCdysQVxn2zaaL6llKD3YWhzhxkeL59Glv4ihJ2Q0I5pWIOqusM0NTJVk4nzuJmvsksfd5AXsOA8l23RekGTxtljN2u8wd7TzC4DTStwAAGwGX632Laez7TRimETj3JbNPJ\/0XDr7p6jgs0KjUrPmdXEYSMqOaC1ivuv2jqt0V0i6F1pOQKuiuiuiKJAnlNpRRFEnEJJeEaW0IhGQl4UstQwqNkEtJS8fJAIrIEsVSAQQKgAIIIKEOZe3DRmKGCpA\/u3ujd9mQXaT0cy331x5enNZdFCrpJ6ewu+MhhO547zD+INXmN4IyIsdhB2g7wVroS0sVyWokqXo2XC8Dc7L9PX81EQBWiMsrTQrV9DRlBpSKebGwO8+u9WtZojs6aCp7aN\/aue0xNPfjw3zcL8uAtcbbrrOcez38PcztEApJCRdXOk9XZ4KaCqkwGOoDSzC4lwxNxtDxYWu0E5E7M7JXOMWk3q+HeJZ8SoRokacAZck4kZKk6K0eJ+1Bnih7OF0o7Q27Qtt3G57T49DuSclFZpcApXIoemZahRXSqRo\/Rr5Tf3W73fpxKrrVYUoOc3ZIvoYedeap01dvkMMjfK7C0XP5c77leaN0ExlnP+cf\/tb4b+pU9jI4Gb2t8y8\/8iqyqrXSXGxvD632j8F56pXxGPk40Vlhzb+ei82emhhsJ0XHPiHnq8orl9\/8peSuTajTLAS1hD3jbbYP1Ku6\/VkV0LKiiONzWBskDiMVxmXRnK5O8Hw4LmlTEYn3bkFotVNZXwSBzDb6zdxV1LBRw6vT+pb8\/wBeRycb0nWxj\/qaR2XLx3fj5WIE9IQ4tc0tcDYtILSDwIOYKbdQArtrWUel4wJQGy27srbB7fH6TeRy6HNcy1g0NJRzugltcWIcNj2H3Xt5Gx6EEbluw9aFbs2s9v0c2UXDwKAaPCYdFY2VoSo07d609QhLlfJTlNR0Jve9lbt2Iw3JJOhfQZSZUvLm5YifH4piKXA4OtcjMZ7+Kun04O5RZaVtr3AHHcklhuzZDRmjc68196agqQSGyRPicRsuwtc0G3ESP8lR6K1qqIz8zUyN\/hDyW\/gN2+itqyETaChzv2VUzP8AhLJWG3jhWWpKcNNwFipYdzbXK7Q7lY6Rq\/r5XSSxwlsUpe5rAXgxm7jYEuZkB90rr2jY5GstIGgjYGuLgBwuWtuAbgZDKy4P7PWYtI0w\/wAzF+Frnf8AFegSUmMoQozSjtf1Y9OTktQiUklGUkhZS0JABCyMBEgpgXmjXOqMldUvO+eQDo1xa30AXpOOoaXlgPeFiR1t+o815f1gP9pn\/wBaX+cpJl1HixVHObYb5XutJoyQixG3IjruWRpibrRaMf8AvJYqiO5hJX0Z3\/RVV2sMcn1mg+O\/1upKodRJr0Yufcc5t9lhYHw2laGy2xldJnAqRyTcdhsInOTmFIdFdNcUaLkRcjdGUQYiQMJQQARFygRWJAFN4koKAHGhLwpDCnboEZR2QQQRABBBBQhHr6tsDS99yALm1ifDMLzxr8yMV0r4QRHKRMGuABaX3xiwJHvBxHIhBBW0X2iuZnkCggtYpYaHkzLNxz8R\/wB+isSEEF08I\/6X3KZ8Qm3uGjeQPM2T01RJYROke5jCcLC9xYzjgaTZvgAggrZcSpiEh7kEEQcxiWRME3QQQZYiz0PowSd5x7oOziefJW9ZV9mA0DP6P1WgcAggvK4hvEdI9VV1imrLxXcexwyWF6JdejpNq7fPjbn858SteScybu4omDJBBejUVFZYqyR4xylOTlJ3b5sYqoA4EFUMjDG7I7ESCpqosg9DUaG0rLCQ9jrHarHWPWKStcx0gALGYBbfmTc+exBBW0qFO6q27VuPj6Fbk7WKkpqZBBaRRqN2SudBUDJoat7i4Ogg7ZgFrOOIgh989w2cTwsQgs2Jk4wbj3e6LI8SkwvN7usODR8Sp9XRkkTSHG6S5xOLnuJacBLi7f3d3psQQRyppSfG7FuzV04\/9Fl\/14\/51kGhBBJh1rP+5\/gZ8vBG49k0AdpBp+pFI8dcIb\/yXbboILndIf8Ad5L8mij9ICUV0EFiLgIwESCBDMGtcyZ0m35wgj+EXGXOwC4TrXHhr6pvCpqAP\/ldZBBSqWYfiO0ehJHW7zPM\/otBo\/Qz9mJvqgguLWrTXP0R6DDRSV0bvREroaGpabEh0Yy2fOOsfRbDV6r7WBrs8rDPpcfmggunQd6avscfGrtyfe\/ZFkiKCCtMYlwTRCCCKCJco5KCCZBA0pwbEaCYA7Abp1BBVviRn\/\/Z)","d183283e":"![](https:\/\/www.researchgate.net\/publication\/309139997\/figure\/fig1\/AS:613952190963731@1523389017281\/Architecture-of-an-auto-encoder-and-decoder-in-a-deep-neural-network-DNN.png)","d5578ee2":"#### 2-D SPECTRUM","35fc9328":"# TRANSFORMATION DATA","9f366b18":"# PATH PROCESS","8ceab723":"#### TO SERIES","d85ab0fc":"#### SAME SIMPLE PREDICTION","c6f1426d":"#### IMAGE TRANSFORMATION FOR LABELING","0b847f3e":"# **OPERATION ARTEMIS**\n\n> We will build sustainable elements on and around the Moon that allow our robots and astronauts to explore more and conduct more science than ever before.","0b1c0994":"READ MISSION:\nhttps:\/\/www.nasa.gov\/sites\/default\/files\/atoms\/files\/artemis_plan-20200921.pdf","89984261":"https:\/\/www.nasa.gov\/specials\/artemis\/","84e2f55d":"# PACKAGES AND LIBRARIES","02d2ab45":"# AUTO ENCODER PROCESS AND PARAMETERS","b806d5b0":"#### SIMPLE","c4709dab":"![](https:\/\/www.nasa.gov\/specials\/artemis\/img\/why-03.jpg)","e3f4a882":"#### TO DATAFRAME & BOUNDING BOX","17823e77":"![](https:\/\/www.nasa.gov\/specials\/artemis\/img\/home-art.jpg)","a2b754f9":"#### REDUCING FOR MEMORY FOR KERNEL","bded33a5":"#### BOUNDING","15c727be":"#### LAYER READING","075793c1":"#### MAIN PREDICTION","d94d2052":"#### PNG EXPORTING","ecfb5c95":"* One area we will focus our technology development on is finding and using local resources in space to help us extend our reach. We will send new instruments to help us find and test capabilities to extract resources like water to produce new materials.\n\n* Our calling is to go farther into the solar system than ever before. To prepare for Mars we must study and prove new human deep space capabilities on our Moon.\n\n* NEW science INVESTIGATIONS and technology EXPERIMENTS are leading the return to the Moon beginning in 2021. Through a variety of upcoming robotic and human activities on the surface and in orbit around the Moon, we will better understand the universe and our home planet.","cdffd63c":"#### TRANSFORMATION ARRAY","c8e5e0cb":"#### MAIN PREDICTION OVERVIEW","c63e59ea":"# VISION & ANALYSIS","2585ebab":"#### MAIN","9a2c512f":"# HISTORY\n\n#### Context\n* It is often difficult to conduct any kind of machine learning experiment on lunar images because of their scarcity and lack of annotation. The goal of this dataset is to provide the general public with a sample of artificial yet realistic lunar landscapes, which can be used to train rock detection algorithms. Those trained algorithms can then be tested on actual lunar pictures or other pictures of rocky terrain.\n\n#### Content\n* The dataset currently contains 9,766 realistic renders of rocky lunar landscapes, and their segmented equivalents (the 3 classes are the sky, smaller rocks, and larger rocks). A table of bounding boxes for all larger rocks and processed, cleaned-up ground truth images are also provided. We recommend that users check the \"Understanding and Using the Dataset\" kernel for additional information and guidelines on how to use the dataset effectively.\n\n#### Acknowledgements\n* This dataset was created by Romain Pessia and Genya Ishigami of the Space Robotics Group, Keio University, Japan. The authors also thank Quentin Jodelet, Tokyo Institute of Technology, for his invaluable help.\n* To contact the author, please reach out to pessia[at]keio.jp.\n\n* The software used for creating the images and their ground truth is Planetside Software's Terragen.\n* The authors used NASA's LRO LOLA Elevation Model as a source of large-scale terrain data.","f9c0eccb":"![](https:\/\/www.nasa.gov\/specials\/artemis\/img\/why-02.jpg)","589bd144":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT6GxRkDVSaGU72niQap2IqglDHolQoBj7_Sg&usqp=CAU)"}}