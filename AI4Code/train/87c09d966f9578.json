{"cell_type":{"63df0624":"code","352fcc2f":"code","ee0da3db":"code","1681f55d":"code","8e261ad7":"code","40dff144":"code","430e7a44":"code","4bb1d016":"code","24c60f1c":"code","d683d152":"code","d12d903d":"code","eff77ff5":"code","42a082f4":"code","fd68ef74":"code","697f2e5b":"code","54a7feb0":"code","42f4f486":"code","725c0bab":"code","cd4ed8a6":"code","d8585eaf":"code","1018f7c3":"code","16a266a4":"code","8f9e57df":"code","eb153bf4":"code","43a26f73":"code","ca639165":"code","bc4c73e9":"code","d698c696":"code","f43465af":"code","1328073c":"code","819a0da8":"code","9c2407e2":"code","c2db79f2":"code","27b7646e":"markdown","b7c231a1":"markdown","75088c38":"markdown","aabb70d3":"markdown","7eb0395f":"markdown","d3c61504":"markdown","fdf3b6de":"markdown","3295b000":"markdown","da35d096":"markdown","98b18798":"markdown","dd613495":"markdown","6dd07a14":"markdown","394e6d7e":"markdown","6507116d":"markdown","7e749ffe":"markdown","35d3717b":"markdown","4d0ff5b1":"markdown"},"source":{"63df0624":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","352fcc2f":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns ","ee0da3db":"import pandas as pd \ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","1681f55d":"train.head()","8e261ad7":"test.head()","40dff144":"train.info()","430e7a44":"test.info()","4bb1d016":"train = train.drop([\"Cabin\",\"Name\", \"Ticket\"], axis=1)","24c60f1c":"test = test.drop([\"Cabin\",\"Name\", \"Ticket\"], axis=1)","d683d152":"train[\"Age\"].mean()","d12d903d":"train[\"Fare\"].mean()","eff77ff5":"train[\"Fare\"] = train[\"Fare\"].replace(np.nan, 32)\ntest[\"Fare\"] = test[\"Fare\"].replace(np.nan, 32)\ntrain[\"Age\"] = train[\"Age\"].replace(np.nan, 30)\ntest[\"Age\"] = test[\"Age\"].replace(np.nan, 30)\ntrain[\"Embarked\"] = train[\"Embarked\"].replace(np.nan, \"C\")\n","42a082f4":"train.info()","fd68ef74":"test.info()","697f2e5b":"train[\"Sex\"].replace([\"female\",\"male\"] , [0,1], inplace = True)\ntest[\"Sex\"].replace([\"female\",\"male\"] , [0,1], inplace = True)\ntrain[\"Embarked\"].replace([\"Q\",\"S\",\"C\"],[0,1,2],inplace=True)\ntest[\"Embarked\"].replace([\"Q\",\"S\",\"C\"],[0,1,2],inplace=True)","54a7feb0":"bins = [0,8,15,20,40,60,100]\nnames=(['Baby', 'Child', 'Teenager', 'Youngster', 'Adult', 'Senior Citizen'])\n\ntrain[\"Age\"] = pd.cut(train[\"Age\"], bins, labels = names)\ntest[\"Age\"] = pd.cut(test[\"Age\"], bins, labels = names)","42f4f486":"train[\"Fare\"] = pd.cut(train.Fare,[-1, 130, 260, 390, 520], labels=['1', '2', '3', '4'])\ntest[\"Fare\"] = pd.cut(test.Fare,[-1, 130, 260, 390, 520], labels=['1', '2', '3', '4'])","725c0bab":"train.pivot_table(index = \"Sex\", values = \"Survived\")","cd4ed8a6":"train.pivot_table(index = \"Pclass\", values = \"Survived\")","d8585eaf":"train.pivot_table(index = \"Age\", values = \"Survived\")","1018f7c3":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train)\nplt.show()","16a266a4":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train)\nplt.show()","8f9e57df":"sns.barplot(x=\"Age\", y=\"Survived\", data=train)\nplt.show()","eb153bf4":"age_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Youngster': 4, 'Adult': 5, 'Senior Citizen': 6}\ntrain['Age'] = train['Age'].map(age_mapping)\ntest['Age'] = test['Age'].map(age_mapping)","43a26f73":"from sklearn.linear_model import LogisticRegression","ca639165":"lr = LogisticRegression()\ncolumns = ['Pclass', 'Sex', 'SibSp','Embarked', 'Age', 'Fare']","bc4c73e9":"from sklearn.model_selection import train_test_split","d698c696":"test_df = test\nX = train[columns]\ny = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.20,random_state=0)","f43465af":"from sklearn.metrics import accuracy_score\nlr.fit(X_train,y_train)\npredictions = lr.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint(accuracy)","1328073c":"from sklearn.model_selection import cross_val_score\n\nlr = LogisticRegression()\nscores = cross_val_score(lr, X, y, cv=10)\naccuracy = np.mean(scores)\nprint(scores)\nprint(accuracy)","819a0da8":"#Final Model\ncolumns = ['Pclass', 'Sex', 'SibSp','Embarked', 'Age', 'Fare']\nlr = LogisticRegression()\nlr.fit(X,y)\ntest_df_predictions = lr.predict(test_df[columns])","9c2407e2":"#Submission dataframe\ntest_df_ids = test_df[\"PassengerId\"]\nsubmission_df = {\"PassengerId\": test_df_ids,\n                 \"Survived\": test_df_predictions}\nsubmission = pd.DataFrame(submission_df)\nsubmission.head()","c2db79f2":"submission.to_csv(\"submission.csv\",index=False)\n\n\nprint(lr.score(X_test, y_test))","27b7646e":"Building a Model Using Logistic Regression","b7c231a1":"b) Reading and Understanding the Data","75088c38":"For better classification lets create a set of Fare ranges","aabb70d3":"Cross Validation","7eb0395f":"Missing Values: Age will be replaced by the mean age, Embarked will be replaced by \"C\" class, and Fare by mean fare.","d3c61504":"Change categorical features Sex and Embarked by numbers","fdf3b6de":"Remove features that have not influence in the analysis, as Cabin (Too many NaN values), Name and Ticket.","3295b000":"Now lets chang Age categories by numbers.","da35d096":"Verification that each data set is completed","98b18798":"**This is the end**","dd613495":"Final Model using test dataset","6dd07a14":"Completing the Data sets with mean values to remove NaN","394e6d7e":"a) Importing Libraries","6507116d":"For better classification lets create a set of Age ranges","7e749ffe":"Data visualization to see the relationships between Features and Survival. As you can see below about 75% of women survived. Also babies had hith chances to survive. Finally 63% of the First class passengers survived.","35d3717b":"The accuracy of the predictions is 0.79","4d0ff5b1":"Simple ML Titanic Survival\n\na) Importing Libraries\nb) Reading and Understanding the Data\nc) Data Preparation Featuring Engineering\nd) Data Visualization & Cleaning\ne) Selectin a Model\nf) Prediction submission"}}