{"cell_type":{"e6e759f9":"code","5d4d091d":"code","229a8f98":"code","a297e741":"code","43eb4616":"code","2e2b463f":"code","71cbed18":"code","062f0409":"code","39756882":"markdown","74baa288":"markdown","fb336e81":"markdown","1fa465ae":"markdown","c15b1648":"markdown"},"source":{"e6e759f9":"import warnings\nwarnings.filterwarnings('ignore')","5d4d091d":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"stackoverflow\" dataset\ndataset_ref = client.dataset(\"stackoverflow\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)","229a8f98":"# We are looking for specialists on SQL\n\nspecialist_query = \"\"\"\n                SELECT\n                u.display_name,\n                u.reputation,\n                COUNT (a.parent_id) AS Number_of_Answers\n                    FROM \n                        `bigquery-public-data.stackoverflow.users` AS u\n                    INNER JOIN\n                        `bigquery-public-data.stackoverflow.posts_answers` AS a\n                    ON a.owner_user_id = u.id\n                    INNER JOIN\n                        `bigquery-public-data.stackoverflow.posts_questions` AS q\n                    ON a.parent_id = q.id\n                    INNER JOIN\n                        `bigquery-public-data.stackoverflow.tags` AS t\n                    ON t.tag_name = q.tags\n                    WHERE q.creation_date >= '2021-01-01' AND t.tag_name = 'sql' # adjust this line to your needs!\n                    GROUP BY u.display_name, u.reputation\n                    ORDER BY Number_of_Answers DESC\n                    \"\"\"\nspecialist = client.query(specialist_query).result().to_dataframe()\nspecialist","a297e741":"# Create a new data frame with users who answered at least 20 questions\n\nproductive_specialsts = specialist.loc[specialist['Number_of_Answers'] >= 20]\n\nproductive_specialsts","43eb4616":"# Sort the most productive users by reputation\n\nproductive_specialsts.sort_values('reputation', ascending = False)","2e2b463f":"# We are looking for specialists on Python\n\nspecialist_query_python = \"\"\"\n                SELECT\n                u.display_name,\n                u.reputation,\n                COUNT (a.parent_id) AS Number_of_Answers\n                    FROM \n                        `bigquery-public-data.stackoverflow.users` AS u\n                    INNER JOIN\n                        `bigquery-public-data.stackoverflow.posts_answers` AS a\n                    ON a.owner_user_id = u.id\n                    INNER JOIN\n                        `bigquery-public-data.stackoverflow.posts_questions` AS q\n                    ON a.parent_id = q.id\n                    INNER JOIN\n                        `bigquery-public-data.stackoverflow.tags` AS t\n                    ON t.tag_name = q.tags\n                    WHERE q.creation_date >= '2021-01-01' AND t.tag_name = 'python'\n                    GROUP BY u.display_name, u.reputation\n                    ORDER BY Number_of_Answers DESC\n                    \"\"\"\nspecialist_python = client.query(specialist_query_python).result().to_dataframe()\nspecialist_python","71cbed18":"# Create a new data frame with users who answered at least 50 questions \n\nproductive_specialsts_python = specialist_python.loc[specialist_python['Number_of_Answers'] >= 50]\n\nproductive_specialsts_python","062f0409":"# Sort the most productive users by reputation\n\nproductive_specialsts_python.sort_values('reputation', ascending = False)","39756882":"Who is the **best specialist** in a particular subject on Stack Overflow? What could be the best criteria? I suggest it might be reputation + a number of questions answered on a particular topic. I created an SQL-query which displays **a user name, his reputation and a number of questions answered** on a chosen topic. Only questions asked 2021 or later are taken into consideration. Of course a topic or a date can be adjusted if you **fork this kaggle** (notebook).","74baa288":"We see that [Barmar](https:\/\/stackoverflow.com\/users\/1491895\/barmar) is the most productive Python expert this year!","fb336e81":"If you like this notebook, you may also like\n* [Titanic: Decision Tree Explained](https:\/\/www.kaggle.com\/sergejnuss\/titanic-decision-tree-explained)\n* [Hacker News: Domination & Bias](https:\/\/www.kaggle.com\/sergejnuss\/hacker-news-domination-bias)\n* [StackOverflow Hits: Typescript, Python, Javascript](https:\/\/www.kaggle.com\/sergejnuss\/stackoverflow-hits-typescript-python-javascript?scriptVersionId=71195602)","1fa465ae":"![](https:\/\/images.unsplash.com\/photo-1484417894907-623942c8ee29?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1189&q=80)","c15b1648":"We see that [Gordon Linoff](https:\/\/stackoverflow.com\/users\/1144035\/gordon-linoff) is the most productive SQL expert this year!"}}