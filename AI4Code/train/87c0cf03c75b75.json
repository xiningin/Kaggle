{"cell_type":{"a7b0412e":"code","a1723edc":"code","72aa0fa7":"code","e7368ee5":"code","15a638a3":"code","ebe3e5f5":"code","71b21a41":"code","77f7c4ea":"code","058ad0d0":"code","0dbb5c3a":"code","66f8ac6a":"code","23c3b77e":"code","28422353":"code","a6be580a":"code","f3085ec5":"code","7098eca8":"code","f5b5fa1f":"code","b3a72fc6":"code","a937c154":"code","0fbc4e44":"code","ff608550":"code","ff2cb995":"code","69a4bcae":"code","d6179ded":"code","1e435d57":"code","1773419c":"code","a1451117":"code","aa1a254d":"code","4f5f7909":"markdown","a97fb39d":"markdown"},"source":{"a7b0412e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","a1723edc":"train = pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")","72aa0fa7":"train.head()","e7368ee5":"train.groupby('Reached.on.Time_Y.N').mean()","15a638a3":"train.groupby('Reached.on.Time_Y.N').median()","ebe3e5f5":"train.drop(train.columns[[0,10]], axis=1, inplace=True)","71b21a41":"train.Mode_of_Shipment[train.Mode_of_Shipment == 'Flight'] = 1\ntrain.Mode_of_Shipment[train.Mode_of_Shipment == 'Ship'] = 2\ntrain.Mode_of_Shipment[train.Mode_of_Shipment == 'Road'] = 3","77f7c4ea":"train.Product_importance[train.Product_importance == 'high'] = 1\ntrain.Product_importance[train.Product_importance== 'low'] = 2\ntrain.Product_importance[train.Product_importance == 'medium'] = 3","058ad0d0":"train.Gender[train.Gender == 'F'] = 1\ntrain.Gender[train.Gender== 'M'] = 2","0dbb5c3a":"train.Warehouse_block[train.Warehouse_block == 'A'] = 1\ntrain.Warehouse_block[train.Warehouse_block== 'B'] = 2\ntrain.Warehouse_block[train.Warehouse_block == 'C'] = 3\ntrain.Warehouse_block[train.Warehouse_block== 'D'] = 4\ntrain.Warehouse_block[train.Warehouse_block== 'F'] = 5\ntrain","66f8ac6a":"train[\"Mode_of_Shipment\"]= train[\"Mode_of_Shipment\"].astype(int) \ntrain[\"Product_importance\"]= train[\"Product_importance\"].astype(int) \ntrain[\"Gender\"]= train[\"Gender\"].astype(int) \ntrain[\"Warehouse_block\"]= train[\"Warehouse_block\"].astype(int) ","23c3b77e":"train.info()","28422353":"#from sklearn.feature_selection import SelectKBest\n#from sklearn.feature_selection import chi2\n#from sklearn.preprocessing import MinMaxScaler\n#X_norm = MinMaxScaler().fit_transform(X)\n#X_new = SelectKBest(chi2, k=6).fit_transform(X, Y)\n#X_new","a6be580a":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\nscaler.fit(train.drop('Reached.on.Time_Y.N',axis=1))\nscaled_features = scaler.transform(train.drop('Reached.on.Time_Y.N',axis=1))\n\nXnew = pd.DataFrame(scaled_features,columns=train.columns[:-1])\nXnew.head()","f3085ec5":"X=Xnew\nY=train['Reached.on.Time_Y.N']","7098eca8":"import statsmodels.api as sm\nX=train.drop('Reached.on.Time_Y.N',axis=1)\nY=train['Reached.on.Time_Y.N']\n\n#logit_model=sm.Logit(Y,X)\n#result=logit_model.fit()\n#print(result.summary2())","f5b5fa1f":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.20)","b3a72fc6":"from sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()\nmodel.fit(X_train,y_train)\npredictions=model.predict(X_test)","a937c154":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test,predictions))","0fbc4e44":"X=train.drop(columns=['Warehouse_block','Mode_of_Shipment','Reached.on.Time_Y.N'],axis=1)\nY=train['Reached.on.Time_Y.N']","ff608550":"from sklearn.feature_selection import RFE\nrfe = RFE(model, 6)\n#Transforming data using RFE\nX_rfe = rfe.fit_transform(X,Y)  \n#Fitting the data to model\nmodel.fit(X_rfe,Y)\nprint(rfe.support_)","ff2cb995":"X.head()","69a4bcae":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.30)","d6179ded":"from sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()\nmodel.fit(X_train,y_train)\npredictions=model.predict(X_train)","1e435d57":"## To minimize the residual sum of squares between the observed targets in the dataset.\n\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(\"Coefficients of the Logistic regression model\")\ncoef = model.coef_\nintercept = model.intercept_\nprint(\"Coef: \", coef)\nprint(\"Intercept: \", intercept)","1773419c":"print(\"Confusion Matrix for LR model::\")\nconf_mat_lr = confusion_matrix(y_train.tolist(),predictions)\nprint(conf_mat_lr)\nsns.heatmap(conf_mat_lr,annot = True,fmt=\"d\",linewidths=.5) \nplt.xlabel('Predicted classes')\nplt.ylabel('Actual classes')\nplt.show()\n\n# calculate accuracy scores for train sets\naccuracy_lr = accuracy_score(y_train,predictions)\nprint(\"Accuracy score (train) for LR model::\", accuracy_lr)","a1451117":"## Test SET\npredicted_test_classes_lr = model.predict(X_test)\n\n## Confusion Matrix\nprint(\"Confusion Matrix (Test set) for LR model::\")\nconf_mat_test_lr = confusion_matrix(y_test.tolist(),predicted_test_classes_lr)\nprint(conf_mat_test_lr)\n\nsns.heatmap(conf_mat_test_lr,annot = True,fmt=\"d\",linewidths=.5) \nplt.xlabel('Predicted classes')\nplt.ylabel('Actual classes')\nplt.show()\n\naccuracy_test_lr = accuracy_score(y_test,predicted_test_classes_lr)\nprint(\"Accuracy score - Log Reg (Test set)::\", accuracy_test_lr)\n","aa1a254d":"## ROC AUC\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\nplt.figure()\nlogit_roc_auc = roc_auc_score(y_test, model.predict_proba(X_test)[:,1])\nfpr, tpr, thresholds = roc_curve(y_test, model.predict_proba(X_test)[:,1], drop_intermediate=False)\n#, drop_intermediate=False\nplt.plot(fpr, tpr, 'b--', label='Logistic Regression (area = %0.3f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1], color='orange', linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend()\nplt.show()","4f5f7909":"## RFE Selection","a97fb39d":"### Scaling out the data"}}