{"cell_type":{"48f6cc13":"code","36cb96f8":"code","36c818d1":"code","be3e49ad":"code","061dcb32":"code","96f2752d":"code","0e2c7208":"code","ea85d34d":"code","1b96e5eb":"code","d6d4c8b9":"code","c0f42356":"code","d03b2e3c":"code","00a192e1":"code","a3c8352e":"code","2c4c6763":"code","38a2bac9":"code","3ba2574e":"code","8798e8bb":"code","6d8c8a81":"code","960edc95":"code","6da1dfbe":"code","166bfde7":"code","6eccb1d7":"code","9e280808":"code","372d8f6a":"code","4621fafc":"code","9a3275b6":"code","0ce58bec":"code","cce87aa5":"code","66819a36":"code","79dfbe89":"code","7f0d17c3":"code","1f427fca":"code","c662a310":"code","8bc22a13":"code","8071b6d3":"code","ba5bfca8":"code","65bf4102":"code","79730ab6":"code","0c9ee74c":"code","36a74f63":"code","bf6ca033":"code","b7260d79":"code","7ffd09f9":"code","86644b55":"code","34ea7c35":"code","9f6be750":"code","8c5ca720":"code","7ba2748d":"code","ff6cf8d1":"code","4d14d12d":"code","7064c2be":"code","b13708c1":"code","4140c1f4":"markdown","2ae91aee":"markdown","e24c8a25":"markdown","ea799da5":"markdown","aef9182d":"markdown","480229c3":"markdown","ddb02838":"markdown","6cbba4e9":"markdown"},"source":{"48f6cc13":"# Load in libraries\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#libraries for handling data\nimport pandas as pd\nimport numpy as np\n\n#libraries for data visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\n\n#libaries for modelling\n# Modelling Algorithms\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier\n\n# Modelling Helpers\nfrom sklearn.preprocessing import Imputer , Normalizer , scale\nfrom sklearn.cross_validation import train_test_split , StratifiedKFold\nfrom sklearn.feature_selection import RFECV ","36cb96f8":"#import and read head of train data set\ntrain = pd.read_csv('..\/input\/train.csv')\ntrain.head(3)","36c818d1":"#import and read head of test data set\ntest = pd.read_csv('..\/input\/test.csv')\ntest.head(3)","be3e49ad":"#import and read head of gender_submission data set\ngenderSub = pd.read_csv('..\/input\/gender_submission.csv')\ngenderSub.head(3)","061dcb32":"#append the train and test data sets and name it full\n#full = train.append( test , ignore_index = True )\n#train = full[ :891 ]\n\n#print ('Datasets:' , 'full:' , full.shape , 'titanic:' , train.shape)","96f2752d":"#merging test and train data sets\n#dataFull = train.append(test, ignore_index= True)\n#dataFull.head()","0e2c7208":"train.info()","ea85d34d":"train.isna().sum()\n#train.isnull().sum()\n#train['Age'].isnull().sum()","1b96e5eb":"test.info()","d6d4c8b9":"test.isnull().sum()","c0f42356":"train.describe()","d03b2e3c":"test.describe()","00a192e1":"train.groupby(['Survived']).mean()","a3c8352e":"train[['Survived','Age', 'Fare', 'SibSp']].groupby(['Survived']).mean()","2c4c6763":"train.groupby(['Pclass']).mean()","38a2bac9":"train[['Age','Fare', 'Sex', 'Survived']].groupby(['Sex', 'Survived']).mean()","3ba2574e":"train[['Pclass', 'Survived', 'Age']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","8798e8bb":"train.pivot_table('Survived', index='Sex', columns='Pclass')","6d8c8a81":"sns.barplot(x='Sex', y='Survived',data=train)","960edc95":"sns.barplot(x='Pclass', y='Survived', hue='Sex', palette='deep', data=train)","6da1dfbe":"grid = sns.FacetGrid(train, size=5)\ngrid.map(sns.barplot, 'Pclass', 'Survived', palette='deep', order=[3,2,1], data=train)","166bfde7":"\nsns.barplot(x='Sex', y='Survived', hue='Pclass', order=['male', 'female'], palette='deep', data=train)","6eccb1d7":"grid = sns.FacetGrid(train, col='Pclass', col_wrap=4, size = 3)\ngrid.map(sns.barplot, 'Sex', 'Survived', order=['male','female'], palette='deep')","9e280808":"train.hist(column=\"Age\",by=\"Pclass\",bins=30)","372d8f6a":"#plt.hist(x='Survived', y='Sex', data=train)\ngrid = sns.FacetGrid(train, hue='Survived', size=3.5)\ngrid.map(plt.hist, 'Fare', alpha=.5)\ngrid.add_legend();","4621fafc":"grid = sns.FacetGrid(train, col=\"Pclass\", hue=\"Survived\", size=3)\ngrid.map(plt.scatter, \"Fare\", \"Age\", alpha=.5)\nplt.xlim(0,300)\ngrid.add_legend();","9a3275b6":"# create new data sets without n variables that seem irrelevant to the survivival rates\ntrain_df = train.drop(['Ticket', 'Cabin', 'Name', 'PassengerId'], axis=1)\ntest_df = test.drop(['Ticket', 'Cabin', 'Name'], axis=1)\n\n#dataFull_df = train_df.append(test_df, ignore_index=True)\n\ndataFull_df = [train_df, test_df]\ntrain_df.shape, test_df.shape","0ce58bec":"train.tail()","cce87aa5":"train_df.isnull().sum()","66819a36":"# replaces age null values.\n\n#train_df['Age'].fillna(train_df['Age'].dropna().mode()[0], inplace=True)\n#train_df.isnull().sum()\n\ntrain_df['Age'].fillna(train_df['Age'].dropna().median(), inplace=True)\ntrain_df.isnull().sum()","79dfbe89":"train_df['Embarked'].fillna(train_df['Embarked'].dropna().mode()[0], inplace=True)\ntrain_df.isnull().sum()","7f0d17c3":"test_df.isnull().sum()","1f427fca":"test_df['Age'].fillna(test_df['Age'].dropna().median(), inplace=True)\ntest_df.isnull().sum()","c662a310":"test_df['Fare'].fillna(test_df['Fare'].dropna().mode()[0], inplace=True)\ntest_df.isnull().sum()","8bc22a13":"test_df.head()","8071b6d3":"# Transform Sex into binary values 0 and 1\nfor dataset in dataFull_df:\n    dataset['Sex'] = dataset['Sex'].map({'female':1,'male':0}).astype(int)\n\ntrain_df.head()\n\n#sex = pd.Series( np.where( dataFull.Sex == 'male' , 1 , 0 ) , name = 'Sex' )","ba5bfca8":"# Create a new variable for every unique value of Embarked\nfor dataset in dataFull_df:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\n","65bf4102":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\n#train_df.head()\ntrain_df[['AgeBand', 'Survived']].groupby('AgeBand', as_index=False).mean().sort_values(by='AgeBand', ascending=True)","79730ab6":"for dataset in dataFull_df:\n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4 ;","0c9ee74c":"train_df.head()","36a74f63":"train_df['Fareband'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['Fareband', 'Survived']].groupby('Fareband', as_index=False).mean().sort_values(by='Fareband', ascending=True)","bf6ca033":"for dataset in dataFull_df:    \n    # Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] \t\t\t\t\t\t        = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] \t\t\t\t\t\t\t        = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df.head()","b7260d79":"train_df = train_df.drop('AgeBand', axis=1)\ntrain_df = train_df.drop('Fareband', axis=1)\n\ntrain_df.head(2)","7ffd09f9":"train_df = train_df.drop('Embarked', axis=1)","86644b55":"train_df.head()","34ea7c35":"\ntest_df = test_df.drop('PassengerId', axis=1)\ntest_df = test_df.drop('Embarked', axis=1)","9f6be750":"test_df.head()","8c5ca720":"#setting up logistic regression\nx_train = train_df.drop('Survived', axis=1)\ny_train = train_df['Survived']\nx_test = test_df\n\nx_train.shape","7ba2748d":"x_test.shape","ff6cf8d1":"# logistic regression\nlog_clf = LogisticRegression() \nlog_clf.fit(x_train, y_train)\ny_pred_log_reg = log_clf.predict(x_test)\nlog_clf.score(x_train,y_train)","4d14d12d":"#support vector machine\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred_svc = svc.predict(x_test)\nsvc.score(x_train, y_train) ","7064c2be":"#random forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(x_train, y_train)\ny_pred_randomforest = random_forest.predict(x_test)\nrandom_forest.score(x_train,y_train)","b13708c1":"#dataFull_df = train_df.append(test_df, ignore_index=True)\n#dataFull_df.head()","4140c1f4":"check if there are any null values","2ae91aee":"simple data description","e24c8a25":"# DATA PREPARATION","ea799da5":"From the above, we can tell that :\n\nthe avg of Survived = .3838  -->  ppl survived (survived=1) < ppl unsurvived (survived=0)\n\nthe Age ranged from .42 years old to 80 years old. \n\nthe average age was 29.6 and the median age was 28, but 177 null values for age exist.\n","aef9182d":"MODEL APPLICATIONS","480229c3":"# DATA VISUALIZATION","ddb02838":"\n\npivot table","6cbba4e9":"# DATA EXPLORATION"}}