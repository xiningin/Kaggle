{"cell_type":{"4ad32b98":"code","88552c00":"code","850caf47":"code","fad5ce82":"markdown","25ac6fad":"markdown","bc141f4b":"markdown","ffafd26f":"markdown","aca29088":"markdown","2148a224":"markdown","862187ca":"markdown","55bf6b22":"markdown","a1673f27":"markdown","b0330b30":"markdown","4168f398":"markdown","d17c5717":"markdown"},"source":{"4ad32b98":"!pip install streamlit\n!python -m textblob.download_corpora\n!pip install pyngrok\n!python -m spacy download en_core_web_sm\nfrom pyngrok import ngrok\nspacy.load('en_core_web_sm')","88552c00":"%%writefile streamlit_app.py\nimport streamlit as st \nimport os\nimport nltk\nnltk.download('punkt')\n \n \n# import libraries\nfrom textblob import TextBlob \nimport spacy\nfrom gensim.summarization import summarize\nsp = spacy.load('en_core_web_sm')\nfrom spacy import displacy\n \n\nHTML_WRAPPER = \"\"\"<div style=\"overflow-x: auto; border: 1px solid #e6e9ef; border-radius: 0.25rem; padding: 1rem\">{}<\/div>\"\"\"\n\n# Function to Analyse Tokens and Lemma\n@st.cache\ndef text_analyzer(my_text):\n    nlp = spacy.load('en')\n    docx = nlp(my_text)\n    # tokens = [ token.text for token in docx]\n    allData = [('\"Token\":{},\\n\"Lemma\":{}'.format(token.text,token.lemma_))for token in docx ]\n    return allData\n \ndef main():\n \n    # Title\n    st.markdown(\"<h1 style='text-align: center; color: red;'>Natural Language Processing App<\/h1>\", unsafe_allow_html=True)\n\n\n \n    # Tokenize and Lemmatize the text\n    if st.checkbox(\"Tokens and Lemma\"):\n        st.subheader(\"Tokenize Your Text\")\n \n        message = st.text_area(\"Enter Text\",\"Type Here ...\")\n        if st.button(\"Submit\"):\n            nlp_result = text_analyzer(message)\n            st.json(nlp_result)\n \n \n    # Sentiment Analysis\n    if st.checkbox(\"Sentiment Analysis\"):\n        st.subheader(\"Analyse Your Text\")\n \n        message = st.text_area(\"Enter Text\",\"Type Here ...\")\n        if st.button(\"Submit\"):\n            blob = TextBlob(message)\n            result_sentiment = blob.sentiment\n            st.success(result_sentiment)\n            \n \n    # Summarize the text\n    if st.checkbox(\"Text Summarization\"):\n        st.subheader(\"Summarize Your Text\")\n \n        message = st.text_area(\"Enter Text\",\"Type Here ..\")\n        if st.button(\"Submit\"):\n            summary_result = summarize(message)\n            st.success(summary_result)\n \n     # Named Entity Recognition\n    if st.checkbox(\"Named Entities\"):\n        st.subheader(\"Analyze Your Text\")\n         \n        message = st.text_area(\"Enter Text\",\"Type Here ...\")\n        if st.button(\"Submit\"):\n            sen = sp(message)\n            html = displacy.render(sen,style=\"ent\")\n            st.write(HTML_WRAPPER.format(html),unsafe_allow_html=True)\n\n\n     # Part Of Speech Tagging\n    if st.checkbox(\"Part Of Speech Tagging\"):\n        st.subheader(\"Analyze Your Text\")\n         \n        message = st.text_area(\"Enter Text\",\"Type Here ...\")\n        if st.button(\"Submit\"):\n            # create a textblob object\n            blob_sen = TextBlob(message)\n            # pos tags\n            pos_result = blob_sen.tags\n            st.success(pos_result)\n\n \n    st.sidebar.subheader(\"About App\")\n    st.sidebar.text('This is a NLP based app')\n    st.sidebar.markdown(\"\"\"\n    ### Description \n    This is a Natural Language Processing(NLP) Based App useful for:\n    - Tokenization and Lemmatization\n    - Sentiment\n    - Summarization\n    - Named Entities Recognition\n    - Part Of Speech Tagging\n    \"\"\")\n    \n \nif __name__ == '__main__':\n    main()","850caf47":"# public_url = ngrok.connect(port=80)\n# print(public_url)\n# !streamlit run --server.port 80 streamlit_app.py >\/dev\/null","fad5ce82":"![image.png](attachment:image.png)","25ac6fad":"Now your streamlit app is ready,you can deploy it on heroku or streamlit share.Just make a requirements.txt file and Procfile and upload it on github and from there you can deploy it on any platform","bc141f4b":"Now it's time to make a nlp streamli app.Note that use **%%writefile streamlit_app.py** in top of the code, this will create a streamlit_app.py file in colab.","ffafd26f":"So around one month ago I have made a notebook on \"How to run a Flask in Colab\".If you wanna check that notebook click on this [link](https:\/\/www.kaggle.com\/dikshabhati2002\/run-flask-in-colab).In this notebook I will show how to run a streamlit in colab.I will make a nlp based app which will do multiple nlp task.Following is covered in NLP streamlit app:\n- Tokenization and Lemmatization\n- Text Summarization\n- Named Entities\n- Part of Speech Tagging\n- Sentiment Analysis","aca29088":"I have deployed it on streamlit share, here is the [app link](https:\/\/share.streamlit.io\/dikshabhati1\/nlp-streamlit-app\/main)","2148a224":"Here is the app what it look like","862187ca":"# Build A Basic NLP app","55bf6b22":"# Code to run Streamlit App in colab","a1673f27":"# Import Libraries","b0330b30":"# Heroku or Streamlit Share","4168f398":"This code will give you the link to run app in your local.Here we are using port 80 and running app using ngrok.You don't need to create a account on ngrok","d17c5717":"First of all you need to import all the required libraries for running nlp streamlit app in colab"}}