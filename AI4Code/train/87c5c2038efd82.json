{"cell_type":{"ec9bdf6b":"code","58d3f0c0":"code","5ab7fcdf":"code","d04cdd30":"code","4b64d18b":"code","5f59b3b0":"code","2b9b5d8c":"code","f12281b5":"code","d6495a8d":"code","bbf2cd22":"code","4d42f50a":"code","42ec0774":"code","e71f0dad":"code","895c6eb7":"code","6a21669a":"code","a6967a1c":"code","8977e27e":"code","043c639e":"code","be4cbddb":"code","549bd35d":"code","2f0374f7":"markdown"},"source":{"ec9bdf6b":"import xgboost as xgb\nimport numpy as np\nimport pandas as pd\nimport optuna\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","58d3f0c0":"train = pd.read_csv(\"..\/input\/predicting-pulsar-starintermediate\/pulsar_data_train.csv\")\ntest = pd.read_csv(\"..\/input\/predicting-pulsar-starintermediate\/pulsar_data_test.csv\")","5ab7fcdf":"train.head()","d04cdd30":"test.head()","4b64d18b":"train['target_class'].value_counts()","5f59b3b0":"train=train.fillna(0)\ntest=test.fillna(0)","2b9b5d8c":"target = train['target_class']\ndata = train.drop('target_class',axis=1)\ntest = test.drop('target_class',axis=1)","f12281b5":"columns=data.columns.to_list()\ncolumns","d6495a8d":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param = {\n        'tree_method':'gpu_hist',  # using the GPU\n        'lambda': trial.suggest_loguniform('lambda',1e-3,10.0),\n        'alpha': trial.suggest_loguniform('alpha',1e-3,10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.008,0.01,0.012,0.014,0.016,0.018,0.02]),\n        'n_estimators': 4000,\n        'max_depth': trial.suggest_categorical('max_depth', [5,7,9,11,13,15,17,20]),\n        'random_state': trial.suggest_categorical('random_state', [24,48,2020]),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1,300),\n    }\n    model = xgb.XGBRegressor(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","bbf2cd22":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=20)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","4d42f50a":"study.trials_dataframe()","42ec0774":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","e71f0dad":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","895c6eb7":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","6a21669a":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['lambda','learning_rate'])","a6967a1c":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","8977e27e":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","043c639e":"Best_trial= {'lambda': 1.9029439063696163, 'alpha': 0.028064106937089998, \n             'colsample_bytree': 0.7, 'subsample': 0.4, 'learning_rate': 0.018, \n             'max_depth': 5, 'random_state': 48, 'min_child_weight': 3}","be4cbddb":"preds = np.zeros(test.shape[0])\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\n\nfor trn_idx, test_idx in kf.split(train[columns],train['target_class']):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=train['target_class'].iloc[trn_idx],train['target_class'].iloc[test_idx]\n    model = xgb.XGBRegressor(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","549bd35d":"preds2=np.where(preds<0.5,0,1)\npreds2[0:10]","2f0374f7":"# XGBoost with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna\n* thanks to: \nhttps:\/\/www.kaggle.com\/miklgr500\/optuna-xgbclassifier-parameters-optimize\n"}}