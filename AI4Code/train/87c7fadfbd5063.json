{"cell_type":{"d51fa9ce":"code","6705cd80":"code","e19d72d5":"code","bdf2be77":"code","d48d8c66":"code","eb36014f":"code","35cc6a58":"code","2df99e87":"code","c95f1cc8":"code","b710575f":"code","507632f4":"code","f63ac715":"code","a2a210ed":"code","3992160d":"code","73b0c066":"code","571232c7":"code","8e466803":"code","22181084":"code","353948f8":"code","8fe6dbd5":"code","fe0b4133":"code","d296cb57":"code","6ab485be":"code","9276bf39":"code","d617cc5d":"code","8e5a1544":"code","bc5bd1bb":"code","05b8663d":"code","78241154":"code","b170b55f":"code","68f5d01f":"code","906f91ca":"code","84f8d60c":"code","45cba649":"code","35323849":"code","c075d42f":"code","8bd72630":"code","7bee3994":"code","ca4719c2":"code","79e113fa":"code","811ad861":"code","bbcd2df8":"code","88165f5e":"code","26475b52":"code","38a03535":"code","802ce4eb":"code","7707b5c2":"code","2a85c2b4":"code","0409c123":"code","4602d2a2":"code","1e3c1a53":"code","148d21ca":"code","4f95157b":"code","ec78b007":"code","94c21cff":"code","0646a170":"code","5b0677d8":"code","e415bab1":"code","2e84aadd":"code","2ef12cdc":"code","bb2ed7ba":"code","e74dcc7c":"code","508b520e":"code","49a78a5a":"code","d91c2ccc":"code","1eeac09e":"code","8a7e9e29":"code","bd30188e":"code","43fea51a":"code","84718ac9":"code","f46f8670":"code","4178a15e":"code","ebb97b92":"code","5d889be5":"code","835df147":"code","26f2aba5":"code","2b459e62":"markdown","674bc272":"markdown","974d8e7c":"markdown","e40dcd09":"markdown","23793c26":"markdown","e6b60ecd":"markdown","f08fe7e0":"markdown","e472d486":"markdown","4c3f1f01":"markdown","91e171a4":"markdown","69f40eed":"markdown","170c2a57":"markdown","3433e465":"markdown","dfecd300":"markdown","bce0ee78":"markdown","f3a35213":"markdown","ea1783b8":"markdown","f7ec86be":"markdown","b3d447e5":"markdown","9c07ae7e":"markdown","b5b8c6b3":"markdown","380ccb4b":"markdown","2f3ca205":"markdown","f7489ce8":"markdown","c4789c3f":"markdown","864c89ce":"markdown","074aafa6":"markdown","462aacb4":"markdown","4fcaf522":"markdown","330e6b57":"markdown","112c025c":"markdown","a26fccb2":"markdown","e4e6ddbb":"markdown","4e9a54c3":"markdown","41204307":"markdown","17fc4c27":"markdown","1a109230":"markdown","7e8fbe39":"markdown","42e13d8f":"markdown","831acc1b":"markdown","54e1ea36":"markdown","a270a248":"markdown","5ab5773d":"markdown","64673a5b":"markdown","28c37883":"markdown","8dd4397d":"markdown","c8f6364a":"markdown","f70df030":"markdown","9e14b708":"markdown","17c9ea4f":"markdown","bb17fb57":"markdown","62513b7e":"markdown","9fcadd43":"markdown","3c40c962":"markdown"},"source":{"d51fa9ce":"# Import libs\nfrom numpy import nan\nimport pandas as pd\nimport re\n\n# Set width of display\nprint('display.width:', pd.get_option('display.width'))\npd.set_option('display.width', 120)\nprint('display.width:', pd.get_option('display.width'))\n\n# Get data\nmoma = pd.read_csv('\/kaggle\/input\/museum-of-modern-art-collection\/Artworks.csv')\nmoma.head()","6705cd80":"moma.info()","e19d72d5":"# Number of null values per column\nmoma_nan_cnt = moma[['Title', 'Artist', 'ArtistBio', 'Nationality', 'BeginDate', 'EndDate',\n                     'Gender', 'Date', 'Department']].isnull().sum()\n\n# Percentage of null values\nmoma_nan_pct = moma_nan_cnt \/ moma.shape[0] * 100\n\nmoma_nan = pd.DataFrame({'nan_count': moma_nan_cnt, 'nan_percentage': moma_nan_pct})\nmoma_nan","bdf2be77":"# Duplicated\nprint('Duplicated: {}'.format(moma.duplicated(subset='ObjectID').sum()))","d48d8c66":"artist_bio_pattern_org = r'(?:founded|established|est\\.|active|formed)'\n\n# Value examples\nmoma.loc[((moma['ArtistBio'].notnull())\n          & (moma['ArtistBio'].str.contains(artist_bio_pattern_org, flags=re.I))\n         ),\n         ['Title', 'Artist', 'ConstituentID', 'ArtistBio',\n          'Nationality', 'BeginDate', 'EndDate', 'Gender', 'Date'\n         ]\n        ].head(15)","eb36014f":"# Value examples\nmoma['Gender'].value_counts(dropna=False).head(15)","35cc6a58":"gender_pattern_arr = r'(?:\\((?:male|female)?\\))'\n\n# Value examples\nmoma.loc[((moma['Gender'].notnull())\n          & (moma['Gender'].str.count(gender_pattern_arr, flags=re.I) > 1)\n         )\n        ]","2df99e87":"# Value examples\nmoma.iloc[[101220, 63914, 131800, 136750], 0:20]","c95f1cc8":"# Value examples\nprint(moma['BeginDate'].value_counts(dropna=False).sort_index().tail(40),\n      moma['BeginDate'].value_counts(dropna=False).sort_index().head(40).index,\n      sep='\\n'\n     )","b710575f":"# Value examples\nprint(moma['EndDate'].value_counts(dropna=False).sort_index().tail(40),\n      moma['EndDate'].value_counts(dropna=False).sort_index().head(40).index,\n      sep='\\n'\n     )","507632f4":"# Value examples\nprint(moma['Date'].value_counts(dropna=False).sort_index())","f63ac715":"print('Before drop:', moma.columns, sep='\\n', end='\\n\\n')\n\n# List to drop\ndrop_cols = ['ConstituentID', 'Medium', 'Dimensions', 'CreditLine', 'AccessionNumber', 'DateAcquired',\n             'Cataloged', 'ObjectID', 'URL', 'ThumbnailURL', 'Circumference (cm)',\n             'Depth (cm)', 'Diameter (cm)', 'Height (cm)', 'Length (cm)', 'Weight (kg)', 'Width (cm)',\n             'Seat Height (cm)', 'Duration (sec.)'\n            ]\n\n# Drop columns\nmoma.drop(drop_cols, axis=1, inplace=True)\n\nprint('After drop:', moma.columns, sep='\\n')","a2a210ed":"print('Before rename:', moma.columns, sep='\\n', end='\\n\\n')\n\n# Convert to lower case\nmoma.columns = moma.columns.str.lower()\n\n# Add underline\ncols = {'artistbio':'artist_bio', 'begindate':'begin_date', 'enddate':'end_date'}\nmoma.rename(columns=cols, inplace=True)\n\nprint('After rename:', moma.columns, sep='\\n')","3992160d":"artist_bio_pattern_drop = r'(?:founded|established|est\\.|active|formed)'\n\n# Test\nartist_bio_test = pd.DataFrame(['(British, founded 1967)',\n                                '(Italian, established 1969)',\n                                '(est. 1933)',\n                                '(American, active 1904\u2013present)'\n                               ], columns=['artist_bio'])\nartist_bio_test['artist_bio_pattern_drop'] = artist_bio_test['artist_bio'].str.contains(artist_bio_pattern_drop, flags=re.I)\nprint(artist_bio_test, end='\\n\\n')\n\nartist_bio_bool_drop = moma['artist_bio'].str.contains(artist_bio_pattern_drop, flags=re.I) # bool mask to drop\nartist_bio_bool_drop.fillna(False, inplace=True) # do not drop artist_bio with NaN\n\n# Number of valid (True) and invalid (False) rows\nartist_bio_cnt = (~artist_bio_bool_drop).value_counts(dropna=False)\n\n# Percentage of valid (True) and invalid (False) rows\nartist_bio_pct = artist_bio_cnt * 100 \/ moma.shape[0]\nartist_bio_pct = (~artist_bio_bool_drop).value_counts(dropna=False)\n\nartist_bio_stat = pd.DataFrame({'valid_count': artist_bio_cnt, 'valid_percentage': artist_bio_pct})\nartist_bio_stat","73b0c066":"print('Before drop:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~artist_bio_bool_drop).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\nartist_bio_drop = moma[artist_bio_bool_drop].index # rows to drop\nmoma.drop(index=artist_bio_drop, inplace=True)\n\nprint('After drop:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~(moma['artist_bio'].str.contains(artist_bio_pattern_drop, flags=re.I)\n                           .fillna(False)\n        )\n      ).value_counts(dropna=False)\n     )","571232c7":"print('Before dropna:')\nprint('total:', moma.shape[0]) # print the total number of rows before\nprint('NaNs:', moma['begin_date'].isna().sum(), end='\\n\\n') # print the number of NaNs before\n\nmoma.dropna(subset=['begin_date'], axis=0, inplace=True) # drop NaNs\n\nprint('After dropna:')\nprint('total:', moma.shape[0]) # print the total number of rows after\nprint('NaNs:', moma['begin_date'].isna().sum()) # print the number of NaNs after","8e466803":"begin_date_pattern = r'^\\(([0-2]\\d{3})\\)$'\n\n# Test\nbegin_date_test = pd.DataFrame(['(0)',\n                                '(0)  (0)',\n                                '(1885) (0)',\n                                '(0) (1995)'\n                                '(1895) (1847) (1900)',\n                                '(1880)'\n                         ], columns=['begin_date'])\nbegin_date_test['begin_date_pattern'] = (begin_date_test['begin_date'].str.replace(r'\\s', '')\n                                                                      .str.match(begin_date_pattern, flags=re.I)\n                                        )\nprint(begin_date_test, end='\\n\\n')\n\n# Valid rows\nbegin_date_bool_valid = moma['begin_date'].str.replace(r'\\s', '').str.match(begin_date_pattern, flags=re.I)\n\n# Number of valid (True) and invalid (False) rows\nbegin_date_cnt = begin_date_bool_valid.value_counts(dropna=False)\n\n# Percentage of valid (True) and invalid (False) rows\nbegin_date_pct = begin_date_cnt * 100 \/ moma.shape[0]\n\nbegin_date_stat = pd.DataFrame({'valid_count': begin_date_cnt, 'valid_percentage': begin_date_pct})\nbegin_date_stat","22181084":"print('Before drop:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint(begin_date_bool_valid.value_counts(dropna=False), end='\\n\\n')\n\n# Drop\nbegin_date_drop = moma[~begin_date_bool_valid].index # rows to drop\nmoma.drop(index=begin_date_drop, inplace=True)\n\nprint('After drop:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((moma['begin_date'].str.replace(r'\\s', '')\n                         .str.match(begin_date_pattern, flags=re.I)\n                         .value_counts(dropna=False)\n      ), end='\\n\\n'\n     )","353948f8":"# Extract the birth year\nmoma['begin_date_clean'] = (moma['begin_date'].str.replace(r'\\s', '')\n                                              .str.extract(begin_date_pattern, flags=re.I)\n                                              .astype(int)\n                           )\nmoma[['begin_date', 'begin_date_clean']].head(10) # check the values","8fe6dbd5":"print('NaNs:', moma['end_date'].isna().sum()) # print the number of NaNs","fe0b4133":"end_date_pattern = r'^\\(([0-2]\\d{3})\\)$'\n\n# Valid rows\nend_date_bool_valid = moma['end_date'].str.replace(r'\\s', '').str.match(end_date_pattern, flags=re.I)\n\n# Number of valid (True) and invalid (False) rows\nend_date_cnt = end_date_bool_valid.value_counts(dropna=False)\n\n# Percentage of valid (True) and invalid (False) rows\nend_date_pct = end_date_cnt * 100 \/ moma.shape[0]\n\nend_date_stat = pd.DataFrame({'valid_count': end_date_cnt, 'valid_percentage': end_date_pct})\nend_date_stat","d296cb57":"# Inspect values\nmoma.loc[~end_date_bool_valid, 'end_date'].value_counts()","6ab485be":"# Extract the death year\nmoma['end_date_clean'] = (moma.loc[end_date_bool_valid, 'end_date'].str.replace(r'\\s', '')\n                                                                   .str.extract(end_date_pattern, flags=re.I)\n                         )\nmoma['end_date_clean'].fillna(0, inplace=True)\nmoma['end_date_clean'] = moma['end_date_clean'].astype(int)\n\n# Number of valid (True) and invalid (False) rows\nprint(moma['end_date_clean'].notnull().value_counts())\nmoma[['end_date', 'end_date_clean']].head(6) # check the values","9276bf39":"print('NaNs:', moma['gender'].isna().sum()) # print the number of NaNs","d617cc5d":"gender_pattern = r'^\\((?P<gender>(?:male|female))\\)$'\n\n# Valid rows\ngender_bool_valid = moma['gender'].str.replace(r'\\s', '').str.match(gender_pattern, flags=re.I)\n\n# Number of valid (True) and invalid (False) rows\ngender_cnt = gender_bool_valid.value_counts(dropna=False)\n\n# Percentage of valid (True) and invalid (False) rows\ngender_pct = gender_cnt * 100 \/ moma.shape[0]\n\ngender_stat = pd.DataFrame({'valid_count': gender_cnt, 'valid_percentage': gender_pct})\ngender_stat","8e5a1544":"# Inspect values\nmoma.loc[~gender_bool_valid, 'gender'].value_counts()","bc5bd1bb":"# Extract the gender\nmoma['gender_clean'] = (moma.loc[gender_bool_valid, 'gender'].str.replace(r'\\s', '')\n                                                             .str.extract(gender_pattern, flags=re.I)['gender']\n                                                             .str.lower()\n                       )\n# Number of valid (True) and invalid (False) rows\nprint(moma['gender_clean'].notnull().value_counts(), end='\\n\\n')\nprint(moma['gender_clean'].value_counts(dropna=False))\nmoma[['gender', 'gender_clean']].head() # check the values","05b8663d":"print('NaNs:', moma['nationality'].isna().sum()) # print the number of NaNs","78241154":"nationality_pattern = r'^\\((?P<nationality>(.+))\\)$'\n\n# Valid rows\nnationality_bool_valid = moma['nationality'].str.replace(r'\\s', '').str.match(nationality_pattern, flags=re.I)\n\n# Number of valid (True) and invalid (False) rows\nnationality_cnt = nationality_bool_valid.value_counts(dropna=False)\n\n# Percentage of valid (True) and invalid (False) rows\nnationality_pct = nationality_cnt * 100 \/ moma.shape[0]\n\nnationality_stat = pd.DataFrame({'valid_count': nationality_cnt, 'valid_percentage': nationality_pct})\nnationality_stat","b170b55f":"# Inspect values\nmoma.loc[~nationality_bool_valid, 'nationality'].value_counts()","68f5d01f":"# Extract the nationality\nmoma['nationality_clean'] = (moma.loc[nationality_bool_valid, 'nationality'].str.replace(r'\\s', '')\n                                     .str.extract(nationality_pattern, flags=re.I)['nationality']\n                                     .str.lower()\n                       )\n# Number of valid (True) and invalid (False) rows\nprint(moma['nationality_clean'].notnull().value_counts(), end='\\n\\n')\nprint(moma['nationality_clean'].value_counts(dropna=False))\nmoma[['nationality', 'nationality_clean']].head() # check the values","906f91ca":"print('Before dropna:')\nprint('total:', moma.shape[0]) # print the total number of rows before\nprint('NaNs:', moma['date'].isna().sum(), end='\\n\\n') # print the number of NaNs before\n\nmoma.dropna(subset=['date'], axis=0, inplace=True) # drop NaNs\n\nprint('After dropna:')\nprint('total:', moma.shape[0]) # print the total number of rows after\nprint('NaNs:', moma['date'].isna().sum()) # print the number of NaNs after","84f8d60c":"date_pattern_char_replace = {r'(?:\\bc\\.\\s?|\\(|\\)|;|:)': '', # remove special chars\n                             r'\\s+': ' ', # reduce gaps\n                             r'(?:\\\u2013|\\\/|\\s\\-\\s)': '-' # set range character as hyphen\n                            } # dictionary to replace\n\n# Test\ndate_test = pd.DataFrame(['c. 1960s',\n                          'c. 1964, printed 1992',\n                          'c.1935-1945',\n                          'c. 1983, signed 2007',\n                          '(c. 1914-20)',\n                          '1964, assembled c.1965',\n                          '1927.  (Print executed c. 1925-1927).',\n                          'published c. 1946',\n                          '(1960s)',\n                          '1973 (published 1974)',\n                          'Published 1944 (Prints executed 1915-1930)',\n                          '(September 29-October 24, 1967)',\n                          '1965-66,  printed 1983',\n                          '1968 - 1972',\n                          '1947\u201349, published 1949',\n                          'Dec. 9, 1954'\n                         ], columns=['date'])\ndate_test['date_pattern_char_replace'] = date_test['date'].replace(regex=date_pattern_char_replace)\nprint(date_test, end='\\n\\n')\n\n# Replace chars\nprint('Before replace:', moma['date'].tail(10), sep='\\n', end='\\n\\n')\nmoma['date'] = moma['date'].replace(regex=date_pattern_char_replace) # replace\nprint('After replace:', moma['date'].tail(10), sep='\\n')","45cba649":"date_pattern_drop_1 = r'([0-2]\\d{3})'\n\ndate_bool_drop_1 = moma['date'].str.count(date_pattern_drop_1) == 0 # bool mask to drop\n\n# Inspect values\nprint('moma values:', moma.loc[date_bool_drop_1, 'date'].value_counts(dropna=False), sep='\\n', end='\\n\\n')\nprint('Matched: {}'.format(date_bool_drop_1.sum()))","35323849":"print('Before drop 1:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~date_bool_drop_1).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\ndate_drop_1 = moma[date_bool_drop_1].index # rows to drop\nmoma.drop(index=date_drop_1, inplace=True)\n\nprint('After drop 1:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((moma['date'].str.count(date_pattern_drop_1) != 0).value_counts(dropna=False))","c075d42f":"date_pattern_drop_2 = (r'^(?:early|late)?\\s?[0-2]\\d{3}\\'?(?:s|\\s?\\?|s\\?)'\n                         '(?:(?:\\-|\\sor\\s)(?:[0-2]\\d)?\\d{2}\\'?(?:s|\\s?\\?|s\\?))?$'\n                      )\n\n# Test\ndate_test = pd.DataFrame(['1915?',\n                          '1860s?',\n                          '1880 ?',\n                          '1920s',\n                          '1880s-90s',\n                          '1960s-1970s',\n                          '1920s or 1930s',\n                          'late 1950s',\n                          'early 1940s',\n                          'Early 1970\\'s'\n                         ], columns=['date'])\ndate_test['date_pattern_drop_2'] = date_test['date'].str.contains(date_pattern_drop_2, flags=re.I)\nprint(date_test, end='\\n\\n')\n\ndate_bool_drop_2 = moma['date'].str.contains(date_pattern_drop_2, flags=re.I) # bool mask to drop\n\n# Inspect values\npd.set_option('display.max_rows', 80) # increase the number of rows to display\nprint('moma values:', moma.loc[date_bool_drop_2, 'date'].value_counts(dropna=False), sep='\\n', end='\\n\\n')\nprint('Matched: {}'.format(date_bool_drop_2.sum()))\npd.reset_option('display.max_rows') # reset the number of rows to display to default","8bd72630":"print('Before drop 2:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~date_bool_drop_2).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\ndate_drop_2 = moma[date_bool_drop_2].index # rows to drop\nmoma.drop(index=date_drop_2, inplace=True)\n\nprint('After drop 2:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~moma['date'].str.contains(date_pattern_drop_2, flags=re.I)).value_counts(dropna=False))","7bee3994":"date_pattern_drop_3 = r'^(?:before|after)\\s?[0-2]\\d{3}\\s?\\??$'\n\n# Test\ndate_test = pd.DataFrame(['Before 1900',\n                          'Before 1900?',\n                          'After 1933',\n                          'after 1891'\n                         ], columns=['date'])\ndate_test['date_pattern_drop_3'] = date_test['date'].str.contains(date_pattern_drop_3, flags=re.I)\nprint(date_test, end='\\n\\n')\n\ndate_bool_drop_3 = moma['date'].str.contains(date_pattern_drop_3, flags=re.I) # bool mask to drop\n\n# Inspect values\nprint('moma values:', moma.loc[date_bool_drop_3, 'date'].value_counts(dropna=False), sep='\\n', end='\\n\\n')\nprint('Matched: {}'.format(date_bool_drop_3.sum()))","ca4719c2":"print('Before drop 3:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~date_bool_drop_3).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\ndate_drop_3 = moma[date_bool_drop_3].index # rows to drop\nmoma.drop(index=date_drop_3, inplace=True)\n\nprint('After drop 3:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~moma['date'].str.contains(date_pattern_drop_3, flags=re.I)).value_counts(dropna=False))","79e113fa":"date_pattern_drop_4 = r'^[0-2]\\d{3}\\sor\\s(?:before|after|earlier)\\??$'\n\n# Test\ndate_test = pd.DataFrame(['1898 or earlier',\n                          '1898 or before?'\n                         ], columns=['date'])\ndate_test['date_pattern_drop_4'] = date_test['date'].str.contains(date_pattern_drop_4, flags=re.I)\nprint(date_test, end='\\n\\n')\n\ndate_bool_drop_4 = moma['date'].str.contains(date_pattern_drop_4, flags=re.I) # bool mask to drop\n\n# Inspect values\nprint('moma values:', moma.loc[date_bool_drop_4, 'date'].value_counts(dropna=False), sep='\\n', end='\\n\\n')\nprint('Matched: {}'.format(date_bool_drop_4.sum()))","811ad861":"print('Before drop 4:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~date_bool_drop_4).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\ndate_drop_4 = moma[date_bool_drop_4].index # rows to drop\nmoma.drop(index=date_drop_4, inplace=True)\n\nprint('After drop 4:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~moma['date'].str.contains(date_pattern_drop_4, flags=re.I)).value_counts(dropna=False))","bbcd2df8":"date_pattern_drop_5 = r'(?!.*prints executed.*)^(?:newspapers?\\s)?(?:published.*)'\n\n# Test\ndate_test = pd.DataFrame(['published 1965',\n                          'Published 1946',\n                          'published April 1898',\n                          'newspaper published May 15-16, 1999',\n                          'Published 1944 Prints executed 1915-1930' # must be False (we'll explore this later)\n                         ], columns=['date'])\ndate_test['date_pattern_drop_5'] = date_test['date'].str.contains(date_pattern_drop_5, flags=re.I)\nprint(date_test, end='\\n\\n')\n\ndate_bool_drop_5 = moma['date'].str.contains(date_pattern_drop_5, flags=re.I) # bool mask to drop\n\n# Inspect values\nprint('moma values:', moma.loc[date_bool_drop_5, 'date'].value_counts(dropna=False), sep='\\n', end='\\n\\n')\nprint('Matched: {}'.format(date_bool_drop_5.sum()))","88165f5e":"print('Before drop 5:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~date_bool_drop_5).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\ndate_drop_5 = moma[date_bool_drop_5].index # rows to drop\nmoma.drop(index=date_drop_5, inplace=True)\n\nprint('After drop 5:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~moma['date'].str.contains(date_pattern_drop_5, flags=re.I)).value_counts(dropna=False))","26475b52":"date_updated_replace = (r'(?:published|repainted\\sin|printed\\sin|printed|assembled|'\n                         'realized|signed|reprinted|reconstructed|fabricated|'\n                         'released|cast|arranged|manufactured)'\n                       ) # keys to replace with placeholder\ndate_pattern_1 = (r'^(?P<year_1>[0-2]\\d{3})'\n                   '(?:\\-(?P<year_2>(?:[0-2]\\d)?\\d{2}))?'\n                   '(?:,?(?:\\supdated|\\-)\\s?[0-2]\\d{3}(?:\\-(?:[0-2]\\d)?\\d{2})?)?s?\\.?$'\n                 )\n\n# Test\ndate_test = pd.DataFrame(['1896',\n                          '1941-1948',\n                          '1969-70',\n                          '1965 printed 2014',\n                          '1964, printed 1992',\n                          '2000-01, printed 2007',\n                          '1973 published 1974',\n                          '1941, published 1943',\n                          '1975 Published 1976.',\n                          '1947-49, published 1949',\n                          '1918, published 1922-1923',\n                          '1961, assembled 1964-65',\n                          '1969, realized 1973',\n                          '1983, signed 2007',\n                          '1945, reprinted 1990',\n                          '1961, reconstructed 1981',\n                          '1963, fabricated 1975',\n                          '1985, released 1990',\n                          '1944, printed in 1967',\n                          '1966 repainted in 1990',\n                          '1950-52 manufactured 1955',\n                          '1950-55-1980'\n                         ], columns=['date'])\ndate_test[['year_1', 'year_2']] = (date_test['date'].str.replace(date_updated_replace, 'updated', flags=re.I)\n                                                    .str.extract(date_pattern_1, flags=re.I)\n                                  )\nprint(date_test, end='\\n\\n')\n\ndate_bool_1 = (moma['date'].str.replace(date_updated_replace, 'updated', flags=re.I)\n                           .str.match(date_pattern_1, flags=re.I)\n              ) # bool mask to extract the years\n\n# Inspect values\nprint('moma values:', moma.loc[date_bool_1, 'date'].value_counts(dropna=False).tail(40), sep='\\n', end='\\n\\n')\nprint('Matched: {}'.format(date_bool_1.sum()))","38a03535":"print('Before extract 1:')\n# Total number of rows\nprint('total:', moma.shape[0])\n# Number of rows matching the pattern (True) and the rest (False)\nprint(date_bool_1.value_counts(dropna=False), end='\\n\\n')\n\n# Extract\nmoma.loc[date_bool_1, ['year_1', 'year_2']] = (moma.loc[date_bool_1, 'date']\n                                                   .str.replace(date_updated_replace, 'updated', flags=re.I)\n                                                   .str.extract(date_pattern_1, flags=re.I)\n                                              )\n\n# Inspect values\nprint('After extract 1:', moma[['date', 'year_1', 'year_2']].describe().loc[['count', 'unique']], sep='\\n', end='\\n\\n')\nmoma.loc[date_bool_1, ['date', 'year_1', 'year_2']].head(8)","802ce4eb":"(moma.loc[moma['date'].str.contains(r'print executed', flags=re.I), 'classification']\n     .value_counts()\n)","7707b5c2":"# Value examples\n(moma.loc[moma['date'].str.contains(r'print executed', flags=re.I)])","2a85c2b4":"date_char_trim = r'[\\.,]'\ndate_pattern_2 = (r'^(?:[0-2]\\d{3})?(?:\\-\\d{2,4})?,?\\s?'\n                   '(?:originals?|drawings?|prints?|woodcuts?|sculpture?)?\\s?executed\\s(?:in\\s)?'\n                   '(?P<year_1>[0-2]\\d{3})(?:\\-(?P<year_2>(?:[0-2]\\d)?\\d{2}))?$'\n                 )\n\n# Test\ndate_test = pd.DataFrame(['1921 executed 1920',\n                          '1922, executed 1920-21',\n                          '1935 originals executed 1933-34',\n                          '1935 drawings executed 1933-34',\n                          '1922-23 original executed in 1922',\n                          '1973-1974, executed 1973',\n                          'Print executed 1936',\n                          'Prints executed 1956',\n                          '1950, print executed 1949-50',\n                          '1972. Print executed 1971-1972.',\n                          '1962. Print executed 1960.',\n                          '1944. Print executed 1942.',\n                          '1927. Print executed 1925-1927.',\n                          '1963 Woodcuts executed 1907',\n                          '1970. Sculpture executed 1968-1970.'\n                         ], columns=['date'])\ndate_test[['year_1', 'year_2']] = (date_test['date'].str.replace(date_char_trim, '', flags=re.I)\n                                                    .str.extract(date_pattern_2, flags=re.I)\n                                  )\nprint(date_test, end='\\n\\n')\n\ndate_bool_2 = (moma['date'].str.replace(date_char_trim, '', flags=re.I)\n                           .str.match(date_pattern_2, flags=re.I)\n              ) # bool mask to extract the years\n\n# Inspect values\nprint('moma values:', moma.loc[date_bool_2, 'date'].value_counts(dropna=False).tail(40), sep='\\n', end='\\n\\n')\nprint('Matched: {}'.format(date_bool_2.sum()))","0409c123":"print('Before extract 2:')\n# Total number of rows\nprint('total:', moma.shape[0])\n# Number of rows matching the pattern (True) and the rest (False)\nprint(date_bool_2.value_counts(dropna=False), end='\\n\\n')\n\n# Extract\nmoma.loc[date_bool_2, ['year_1', 'year_2']] = (moma.loc[date_bool_2, 'date'].str.replace(date_char_trim, '', flags=re.I)\n                                                                            .str.extract(date_pattern_2, flags=re.I)\n                                              )\n\n# Inspect values\nprint('After extract 2:', moma[['date', 'year_1', 'year_2']].describe().loc[['count', 'unique']], sep='\\n', end='\\n\\n')\nmoma.loc[date_bool_2, ['date', 'year_1', 'year_2']][120:130]","4602d2a2":"date_char_trim = r'[\\.,]'\ndate_pattern_special = (r'^(?:\\d{,2}\\s)?(?:issy-les-moulineaux\\ssummer|fontainebleau\\ssummer|'\n                         'summer|spring|winter|autumn|fall|january|february|march|'\n                         'april|may|june|july|august|september|october|november|'\n                         'december|decemer|dec|begun|late|early|'\n                         'mars\\s7\\sh\\smatin|mars\\s8\\sh\\smatin|mars|'\n                         'avril\\s7\\sh\\smatin|avril|'\n                         'paris\\sjune\\s-\\sjuly|paris\\searly|paris\\swinter|paris\\sspring|paris|'\n                         'juin\\s7\\sh\\smatin|juin|'\n                         'mai\\s8\\sh\\smatin|mai|'\n                         'gallifa|juillet|kamakura|ao\u00fbt|frankfurt|cannes|circa|hiver|bogot\u00e1|cuba|'\n                         'berlin|meudon|jupiter\\sisland|barcelona|cavali\u00e8re|arles|germany|rome|'\n                         'horta\\sde\\ssan\\sjoan|collioure|new\\syork|saint\\sr\u00e9my|issy-les-moulineaux)'\n                       ) # special cases\ndate_pattern_3 = (r'^.*?(?P<year_1>[0-2]\\d{3})'\n                   '(?:\\-(?:(?P<year_2_2>[0-2]\\d)|.*(?P<year_2_4>[0-2]\\d{3})))?$'\n                 )\n\n# Test\ndate_test = pd.DataFrame(['October 1977',\n                          'August 15 1966',\n                          'February 1, 1970',\n                          'May 15, 1962.',\n                          '11 July 1854',\n                          'May-June 1991',\n                          'May 13-19, 1970',\n                          'May 2-10 1969',\n                          'September 29-October 24, 1967',\n                          'August 5, 1877-June 22, 1894',\n                          'Dec. 9, 1954',\n                          'Spring 1909',\n                          'Early 1969',\n                          'Late 1924-1925',\n                          'Mars 1926',\n                          'Mars, 7 h. matin, 1925',\n                          'Mai 1926',\n                          'Mai, 8 h. matin, 1925',\n                          'Gallifa, 1956',\n                          'Juillet 1921',\n                          'Fontainebleau, summer 1921',\n                          'Avril, 7 h. matin, 1925',\n                          'Juin, 7 h. matin, 1925',\n                          'Kamakura, 1952',\n                          'Ao\u00fbt 1924',\n                          'Decemer 1888',\n                          'Issy-les-Moulineaux, summer 1916',\n                          'Paris, early 1899',\n                          'Paris, June - July 1914',\n                          'Paris, winter 1914-15',\n                          'Paris, spring 1908',\n                          'Frankfurt 1920',\n                          'Cannes, 1958',\n                          'Mars, 8 h. matin, 1925',\n                          'circa 1980',\n                          'Begun 1938',\n                          'Berlin 1926',\n                          'Meudon 1932',\n                          'Jupiter Island 1992',\n                          'Seasons of 1871, 1872 and 1873' # must be False (we'll explore this later)\n                         ], columns=['date'])\ndate_test['date_pattern_special'] = (date_test['date'].str.replace(date_char_trim, '', flags=re.I)\n                                                      .str.contains(date_pattern_special, flags=re.I)\n                                    )\ndate_test[['year_1', 'year_2_2', 'year_2_4']] = (date_test['date'].str.replace(date_char_trim, '', flags=re.I)\n                                                                  .str.extract(date_pattern_3, flags=re.I)\n                                                )\ndate_test['year_2'] = date_test['year_2_2'].fillna(date_test['year_2_4'])\nprint(date_test, end='\\n\\n')\n\ndate_bool_3 = (moma['date'].str.replace(date_char_trim, '', flags=re.I)\n                           .str.match(date_pattern_3, flags=re.I)\n               & moma['year_1'].isnull() # among the remaining rows\n               & moma['date'].str.replace(date_char_trim, '', flags=re.I)\n                             .str.contains(date_pattern_special, flags=re.I) # among the rows with special cases\n              ) # bool mask to extract the years\n\n# Inspect values\nprint('moma values:', moma.loc[date_bool_3, 'date'].value_counts(dropna=False).tail(20), sep='\\n\\n', end='\\n\\n')\nprint('Matched: {}'.format(date_bool_3.sum()))","1e3c1a53":"print('Before extract 3:')\n# Total number of rows\nprint('total:', moma.shape[0])\n# Number of rows matching the pattern (True) and the rest (False)\nprint(date_bool_3.value_counts(dropna=False), end='\\n\\n')\n\n# Extract\nmoma.loc[date_bool_3, ['year_1', 'year_2_2', 'year_2_4']] = (moma.loc[date_bool_3, 'date']\n                                                                 .str.replace(date_char_trim, '', flags=re.I)\n                                                                 .str.extract(date_pattern_3, flags=re.I)\n                                                            )\nmoma.loc[date_bool_3, 'year_2'] = moma.loc[date_bool_3, 'year_2_2'].fillna(moma.loc[date_bool_3, 'year_2_4'])\n\n# Inspect values\nprint('After extract 3:', moma[['date', 'year_1', 'year_2']].describe().loc[['count', 'unique']], sep='\\n', end='\\n\\n')\nmoma.loc[date_bool_3, ['date', 'year_1', 'year_2']].head(8)","148d21ca":"date_bool_rest = ~(date_bool_1 \n                    | date_bool_2\n                    | date_bool_3\n                  )\n# Or another way\n# date_bool_not_year_1 = moma['year_1'].isnull()\n\n# Statistics for the rest rows\nprint('rest count: {}'.format(date_bool_rest.sum()))\nprint('rest percentage: {}'.format(round(date_bool_rest.sum()*100\/moma.shape[0], 2)))\nprint('rest count unique: {}'.format(moma.loc[date_bool_rest, 'date'].value_counts(dropna=False).shape[0]))\nprint('total: {}'.format(moma.shape[0]), end='\\n\\n')\n\n# Inspect values\nprint('moma values:',\n      (moma.loc[date_bool_rest, 'date']\n           .value_counts(dropna=False)\n           .sort_values(ascending=False)\n           .head(16)\n      ),\n      sep='\\n'\n     )","4f95157b":"print('Before drop rest:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((~date_bool_rest).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\ndate_drop_rest = moma[date_bool_rest].index # rows to drop\nmoma.drop(index=date_drop_rest, inplace=True)\n\nprint('After drop rest:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint(moma['year_1'].notnull().value_counts(dropna=False))","ec78b007":"# Fill in a two-digit year to four digits\nyear_2_bool_two = moma['year_2'].str.len() == 2\n\nmoma.loc[year_2_bool_two, 'year_2'] = (moma.loc[year_2_bool_two, 'year_1'].str[0:2] \n                                       + moma.loc[year_2_bool_two, 'year_2']\n                                      )\n\n# Inspect values\nprint(moma.loc[year_2_bool_two, ['year_1', 'year_2']].tail())\n\n# Fill in NaN 'year_2' with 'year_1'\nmoma['year_2'].fillna(value=moma['year_1'], inplace=True)\n# Cast years to int\nmoma[['year_1', 'year_2']] = moma[['year_1', 'year_2']].astype(int)\n# Calculate date as average\nmoma['date_clean'] = round((moma['year_2'] + moma['year_1']) \/ 2)\nmoma['date_clean'] = moma['date_clean'].astype(int) # cast to int\n# Calculate age\nmoma['age'] = moma['date_clean'] - moma['begin_date_clean']\nmoma['age'] = moma['age'].astype(int) # cast to int\n# Inspect values\nmoma[['begin_date_clean', 'date_clean', 'age']].head(10)","94c21cff":"moma_bool_invalid = ~(\n                      (moma['year_1'] <= moma['year_2'])\n                      & (moma['begin_date_clean'] < moma['year_1'])\n                      & (((moma['end_date_clean'] >= moma['year_2']) & (moma['end_date_clean'] != 0))\n                         | (moma['end_date_clean'] == 0)\n                        )\n                     )\n\n# Statistics for the rest rows\nprint('invalid count: {}'.format(moma_bool_invalid.sum()))\nprint('invalid percentage: {}'.format(round(moma_bool_invalid.sum()*100\/moma.shape[0], 2)))\nprint('total:', moma.shape[0], end='\\n\\n')\n\n# Inspect values\nprint('moma invalid values:')\nmoma.loc[moma_bool_invalid]","0646a170":"print('Before drop invalid:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of the valid (True) and invalid (False) rows\nprint((~moma_bool_invalid).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\nmoma_drop_invalid = moma[moma_bool_invalid].index # rows to drop\nmoma.drop(index=moma_drop_invalid, inplace=True)\n\nprint('After drop invalid:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of valid (True) and invalid (False) rows\nprint((\n       (moma['year_1'] <= moma['year_2'])\n       & (moma['begin_date_clean'] < moma['year_1'])\n       & (((moma['end_date_clean'] >= moma['year_2']) & (moma['end_date_clean'] != 0))\n          | (moma['end_date_clean'] == 0)\n         )\n      ).value_counts(dropna=False)\n     )","5b0677d8":"moma['age'].describe()","e415bab1":"pd.set_option('display.max_rows', 85) # increase the number of rows to display\n\n# Inspect values\nprint(moma.loc[moma['age'] > 90, 'artist'].value_counts())\nmoma[moma['age'] > 90].sort_values('age').tail(85)","2e84aadd":"# Inspect values\nprint(moma.loc[moma['age'] < 10, 'artist'].value_counts())\nmoma[moma['age'] < 10].sort_values('age')","2ef12cdc":"artist_org = ['Hi Red Center', 'General Idea', 'Gorgona artists group', \n              'Grey Organisation', 'Grapus', 'Banana Equipment', \n              'Atelier Martine, Paris, France'\n             ]\nartist_bool_org = moma['artist'].isin(artist_org)\n\n# Statistics for the rest rows\nprint('org count:', artist_bool_org.sum())\nprint('org percentage:', round(artist_bool_org.sum()*100\/moma.shape[0], 2))\nprint('total:', moma.shape[0], end='\\n\\n')\n\n# Inspect values\nprint('moma org values:')\nmoma.loc[artist_bool_org]","bb2ed7ba":"print('Before drop org:')\n# Total number of rows before\nprint('total:', moma.shape[0])\n# Number of the valid (True) and invalid (False) rows\nprint((~artist_bool_org).value_counts(dropna=False), end='\\n\\n')\n\n# Drop\nartist_drop_org = moma[artist_bool_org].index # rows to drop\nmoma.drop(index=artist_drop_org, inplace=True)\n\nprint('After drop org:')\n# Total number of rows after\nprint('total:', moma.shape[0])\n# Number of the valid (True) and invalid (False) rows\nprint((~(moma['artist'].isin(artist_org))).value_counts(dropna=False))","e74dcc7c":"moma['age'].value_counts(dropna=False, normalize=True).head(20)*100","508b520e":"bins=[i for i in range(0, 110, 5)] # age groups\nmoma['age'].value_counts(dropna=False, bins=bins, normalize=True) * 100","49a78a5a":"# Import libs\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Turn on svg rendering\n%config InlineBackend.figure_format = 'svg'\n\n# Color palette for the blog\nsnark_palette = ['#e0675a', # red\n                 '#5ca0af', # green\n                 '#edde7e', # yellow\n                 '#211c47' # dark blue\n                ]","d91c2ccc":"# Set the figure\nsns.set(context='paper', style='ticks', palette=snark_palette,\n        rc={'xtick.major.size': 4, 'ytick.left':False,\n            'axes.spines.left': False, 'axes.spines.bottom': True,\n            'axes.spines.right': False, 'axes.spines.top': False\n           }\n       )\n\n# Create the plot\nax_age = sns.distplot(moma['age'], hist=True, rug=False)\nax_age.axvline(x=33, ymin=0, ymax=0.97, marker='x', linestyle=':', color=snark_palette[-1]) # 33 boundary\n\n# Set some aesthetic params for the plot\nax_age.annotate('33', [35, 0.0325], c=snark_palette[-1]) # set label for the 33 boundary\nax_age.set_title('Amount of Artworks by Age', loc='right', pad=0, c=snark_palette[-1]) # set title of the plot\nax_age.set_xlabel('Age', c=snark_palette[-1]) # set label of x axis\nax_age.get_yaxis().set_visible(False) # hide y axis\nax_age.set_xticks([i for i in range(0, 110, 10)]) # set x ticks labels\nax_age.set_xlim([10, 100]) # set x axis range\nax_age.tick_params(axis='x', colors=snark_palette[-1]) # color x ticks\nax_age.spines['bottom'].set_color(snark_palette[-1]) # color x axis\n\n# Save and plot\nplt.savefig('plot.pic\\plot.age.png', dpi=150)\nplt.show()","1eeac09e":"# Women\nmoma.loc[(moma['gender_clean'] == 'female'), 'age'].value_counts(normalize=True, bins=bins).head(20) * 100","8a7e9e29":"# Men\nmoma.loc[(moma['gender_clean'] == 'male'), 'age'].value_counts(normalize=True, bins=bins).head(20) * 100","bd30188e":"# Set the figure\nsns.set(context='paper', style='ticks', palette=snark_palette,\n        rc={'xtick.major.size': 4, 'ytick.left':False,\n            'axes.spines.left': False, 'axes.spines.bottom': True,\n            'axes.spines.right': False, 'axes.spines.top': False\n           }\n       )\n\n# Create the plot\nf_ag, ax_ag = plt.subplots()\nsns.distplot(moma.loc[moma['gender_clean'] == 'female', 'age'], hist=False, rug=False, label='female', ax=ax_ag)\nsns.distplot(moma.loc[moma['gender_clean'] == 'male', 'age'], hist=False, rug=False, label='male', ax=ax_ag)\n\nax_ag.axvline(x=33, ymin=0, ymax=0.98, marker='x', linestyle=':', color=snark_palette[-1]) # 33 boundary\n\n# Set some aesthetic params for the plot\nax_ag.annotate('33', [28, 0.0323], c=snark_palette[-1]) # set label for the 33 boundary\nax_ag.legend() # set legend\nax_ag.set_title('Amount of Artworks by Age: gender', loc='right', c=snark_palette[-1]) # set title of the plot\nax_ag.set_xlabel('Age', c=snark_palette[-1]) # set label of x axis\nax_ag.get_yaxis().set_visible(False) # hide y axis\nax_ag.set_xticks([i for i in range(0, 110, 10)]) # set x ticks labels\nax_ag.set_xlim([10, 110]) # set x axis range\nax_ag.tick_params(axis='x', colors=snark_palette[-1]) # color x ticks\nax_ag.spines['bottom'].set_color(snark_palette[-1]) # color x axis\n\n# Save and plot\nplt.savefig('plot.pic\\plot.age.gender.png', dpi=150)\nplt.show()","43fea51a":"# Women\nprint('Total by gender:', moma['gender_clean'].value_counts(), sep='\\n')\n\n# 46 peack\nmoma.loc[(moma['gender_clean'] == 'female'), 'age'].value_counts().head(20)","84718ac9":"# Top5 women in 46\nwomen_46_top5 = (moma.loc[(moma['gender_clean'] == 'female') & (moma['age'] == 46), 'artist']).value_counts().head()\n\nprint(women_46_top5)\nmoma.loc[(moma['artist'].isin(women_46_top5.index)) & (moma['age'] == 46)]","f46f8670":"# 90 peack\nprint(moma.loc[(moma['gender_clean'] == 'female') & (moma['age'].between(80, 90)), 'age'].value_counts().head(20))\n\n# Top5 women in 88\nwomen_88_top5 = (moma.loc[(moma['gender_clean'] == 'female') & (moma['age'] == 88), 'artist']).value_counts().head()\n\nprint(women_88_top5)\nmoma.loc[(moma['artist'].isin(women_88_top5.index)) & (moma['age'] == 88)]","4178a15e":"nationality_top4 = moma['nationality_clean'].value_counts(normalize=False).head(4)\nprint(nationality_top4)","ebb97b92":"# Set the figure\nsns.set(context='paper', style='ticks', palette=snark_palette,\n        rc={'xtick.major.size': 4, 'ytick.left':False,\n            'axes.spines.left': False, 'axes.spines.bottom': True,\n            'axes.spines.right': False, 'axes.spines.top': False\n           }\n       )\n\n# Create the plot\nmoma_nationality = moma.loc[moma['nationality_clean'].isin(nationality_top4.index), ['nationality_clean', 'age']] # data\ng_an = sns.FacetGrid(moma_nationality, hue='nationality_clean')\ng_an = g_an.map(sns.distplot, 'age', hist=False, rug=False)\n\ng_an.ax.axvline(x=33, ymin=0, ymax=0.98, marker='x', linestyle=':', color=snark_palette[-1]) # 33 boundary\n\n# Set some aesthetic params for the plot\ng_an.fig.set_size_inches(6, 4)\ng_an.ax.annotate('33', [28, 0.0415], c=snark_palette[-1]) # set label for the 33 boundary\ng_an.ax.legend() # set legend\ng_an.ax.set_title('Amount of Artworks by Age: nationality', loc='right', c=snark_palette[-1]) # set title of the plot\ng_an.ax.set_xlabel('Age', c=snark_palette[-1]) # set label of x axis\ng_an.ax.get_yaxis().set_visible(False) # hide y labels\ng_an.despine(left=True) # hide y axis\ng_an.ax.set_xticks([i for i in range(0, 110, 10)]) # set x ticks labels\ng_an.ax.set_xlim([10, 110]) # set x axis range\ng_an.ax.tick_params(axis='x', colors=snark_palette[-1]) # color x ticks\ng_an.ax.spines['bottom'].set_color(snark_palette[-1]) # color x axis\n\n# Save and plot\ng_an.fig.subplots_adjust(bottom=0.125, top=0.88, left=0.125, right=0.9) # adjust for the post picture\ng_an.savefig('plot.pic\\plot.age.nationality.png', dpi=150, bbox_inches=None)\nplt.show()","5d889be5":"# Extract \nmoma['century'] = ((moma['date_clean'] \/\/ 100) + 1).astype(int)\n\n# Inspect values\nmoma[['date_clean', 'century']]","835df147":"moma['century'].value_counts().sort_index(ascending=False)","26f2aba5":"# Set the figure\nsns.set(context='paper', style='ticks', palette=snark_palette,\n        rc={'xtick.major.size': 4, 'ytick.left':False,\n            'axes.spines.left': False, 'axes.spines.bottom': True,\n            'axes.spines.right': False, 'axes.spines.top': False\n           }\n       )\n\n# Create the plot\nmoma_century = moma.loc[moma['century'].isin([19, 20, 21]), ['century', 'age']] # data\ng_ac = sns.FacetGrid(moma_century, hue='century')\ng_ac = g_ac.map(sns.distplot, 'age', hist=False, rug=False)\n\ng_ac.ax.axvline(x=33, ymin=0, ymax=0.98, marker='x', linestyle=':', color=snark_palette[-1]) # 33 boundary\n\n# Set some aesthetic params for the plot\ng_ac.fig.set_size_inches(6, 4)\ng_ac.ax.annotate('33', [28, 0.041], c=snark_palette[-1]) # set label for the 33 boundary\ng_ac.ax.legend() # set legend\ng_ac.ax.set_title('Amount of Artworks by Age: century', loc='right', c=snark_palette[-1]) # set title of the plot\ng_ac.ax.set_xlabel('Age', c=snark_palette[-1]) # set label of x axis\ng_ac.ax.get_yaxis().set_visible(False) # hide y labels\ng_ac.despine(left=True) # hide y axis\ng_ac.ax.set_xticks([i for i in range(0, 110, 10)]) # set x ticks labels\ng_ac.ax.set_xlim([10, 110]) # set x axis range\ng_ac.ax.tick_params(axis='x', colors=snark_palette[-1]) # color x ticks\ng_ac.ax.spines['bottom'].set_color(snark_palette[-1]) # color x axis\n\n# Save and plot\ng_ac.fig.subplots_adjust(bottom=0.125, top=0.88, left=0.125, right=0.9) # adjust for post picture\ng_ac.savefig('plot.pic\\plot.age.century.png', dpi=150, bbox_inches=None)\nplt.show()","2b459e62":"For women, more artworks are created at the age of 46.","674bc272":"There are no `NaN` values in the `Nationality` column.\n\nLet's consider the rows where the `nationality` column contains a single value.","974d8e7c":"By exploring the columns `Gender` and `ArtistBio` above, we have found that the artist can be represented by a company, a collective of artists, an association of a company and artists.\n  \nThere is no clear indication in the data to check whether the artist is an individual or a team.  \nWe could identify the teams by the missing value in the `Gender` column.  \nHowever, gender can also be specified for the team. Below is an example of such data:\n\n- `Robin Schwartz` is a photographer,\n- `General Idea` is a collective of three Canadian artists,\n- `Hi Red Center` is a short-lived radical art collective.","e40dcd09":"We need to perform the following data validation:\n\n- `year_1 <= year_2` - valid range\n- `begin_date_clean < year_1`\n- for the death year:\n    - `year_2 <= end_date_clean` if `end_date_clean` is specified  \n    or\n    - `end_date_clean` may not be specified.","23793c26":"It looks like there is no artist defined for 1314 (0.95%) artworks (`Artist`, `Nationality`, `BeginDate`, `EndDate`, `Gender` columns). The important column `Date` contains 1.6% empty values.\n\nLet's find duplicate artworks in the dataset using the unique identifier of the object `ObjectID`.","e6b60ecd":"Let's remove rows containing a group of values from the dataset (for example, `(2020) (0) (1969)`), that is, organizations.","f08fe7e0":"Let's inspect **the `Gender` column**.","e472d486":"### Clear the `Date` column\n\nNow, we'll continue with clearing the `date` column.\n\nAs a reminder, we decided to process the `date` column as follows:\n\n- If the date isn't a range:\n\n    * Extract and convert the value to a number.\n\n- If the date is a range:\n\n    * Extract two bound years.\n    * Convert them to the integer type and then average them by adding them together and dividing by two.\n    * Use the round() function to round the average, so values like 1872.5 become 1872.\n\n- Assign the year to the `data_clean` column.\n\nLet's drop the rows with `NaN` values.","4c3f1f01":"For some artworks, the years of publication are specified instead of the years of creation (`published 1965`, `published April 1898`). We'll remove these data from the dataset.","91e171a4":"Below is the distribution of the number of artworks by age groups.","69f40eed":"### Clear the `Gender` column\n\nWe'll clean up the `Gender` column to create plots for men and women.\n\nLet's check for NaN values.","170c2a57":"It looks like thirty is really the most productive age.\n\nFor men, the distribution of the number of works reflects the pattern of 30 years.  \nHowever, the plot is ambiguous for women, perhaps because of a small portion of the data.\n\nLet's deep into the values for women.","3433e465":"### Clear the `Nationality` column\n\nWe'll process the this column to create plots depending on nationality.\n\nFirst, check for NaN values.","dfecd300":"Let's continue with *the third case*. \n\n\nWe'll classify this group of values as special cases.  \nSince it is better for our task to drop data than to have questionable cleaned data, we will only clean up the values that we can say for sure that this is the year the artwork was created.\n\nFor convenience, we'll first create a dictionary, with the patterns we are sure of. Then we'll extract the year or range of years the artwork was created from the values corresponding to the dictionary.","bce0ee78":"Let's distinguish three groups among the remaining values:\n\n- Year or range of years followed by additional information, for instance:\n    - year of printing `(1964, printed 1992)`,\n    - years of assembly `(1961, assembled 1964-65)`.  \n\n- Year or range of years specified after `executed`:\n    - `(1922, executed 1920-21)`,\n    - for prints `(Print executed 1936)`.  \n\n- Year or range of years with detailed information such as season, month, date, place, etc., such as:\n    - `September 29-October 24, 1967`,\n    - `August 5, 1877-June 22, 1894`,\n    - `Fontainebleau, summer 1921`.\n\n\nWe'll consider each case separately.\n\nIn *the first case* we'll do the following:\n\n- Replace the secondary words with placeholder `updated` for convenience.\n- Extract the year or years of creation.\n- Store them in the additional columns `year_1` and `year_2` of the `moma` dataframe.","f3a35213":"### Clear the `ArtistBio` column\n\nThe `ArtistBio` column contains some details about the artist. Years from this column are also represented in the `BeginDate` and `EndDate` columns we are interested in.\n\nAs mentioned, we need to remove all companies and other author groups. For instance, the `ArtistBio` contains values such as `(British, founded 1967)` or `(Italian, established 1969)` for organizations.\n\nAlso, the column may represent the artist's years of activity, rather than the years of life. Since we are interested in the year of birth to calculate the age, these rows are useless.\n\nLet's drop all of them.","ea1783b8":"It's curious that most of the works were created at the age of 33!  \n33 is a meaningful age. For example, in Christianity, Jesus was crucified and then resurrected at the age of 33.\n\nWe can assume that there is a certain time lag between the origin of the idea and its implementation, the artist had an idea a little earlier.\n\n### Plot by gender\n\nWe are interested in plotting the distribution of the number of artworks by age for men and women.","f7ec86be":"We have extracted most of the data in the `Date` column (94.9%)!\n\nLet's move on to *the second case* (that is, `executed`).","b3d447e5":"Let's take a look at the `age` column.","9c07ae7e":"There are no empty values in the `end_date`.  \n\nLet's take a look at the single year values.","b5b8c6b3":"And such as `Before 1900`, `After 1933`.","380ccb4b":"### Clear the `EndDate` column\n\nThe year of death is not directly involved in the calculation of age. However, we'll clean up the `end_date` column to use it for validation: `date <= end_date`.\n\nLet's check the column for `NaN` values.","2f3ca205":"Fortunately, there are no duplicates!\n\nLet's inspect **the `ArtistBio` column**.","f7489ce8":"As well as the rows with an indistinct year such as `1898 or earlier`.","c4789c3f":"We would like to drop the rows that don't pass the validation above.","864c89ce":"The gender is not defined in 429 rows.\n\nWe'll extract valid gender values and assign them to the `gender_clean` column.","074aafa6":"We see 138,161 artworks. Almost all of the columns contain `null` values.\n\n\n## Exploring The Data\n\nNow, we'll overview the `NaN` values in the data.","462aacb4":"Since the main goal of this project is to analyze the individual capabilities of the human brain, we'll focus on the artworks created by single authors, not teams.\n\nLet's inspect **the `date` columns** such as **`BeginDate`, `EndDate`, `Date`**.","4fcaf522":"The age values over 90 years old look quite likely.\n\nThere are many teams and organizations with the `age` value less than 10 years old.\n\nAs we mentioned above, there is no clear way to check whether the artist is an individual or a team.  \nHowever, as a result of exploring the outliers, we found such teams as `Hi Red Center`, `General Idea`, `Gorgona artists group`, `Gray Organization`. Let's remove them from the dataset.","330e6b57":"Most of the artworks were created in the 4th decade of life. The peak is 33 years old.\n\n### The overall plot\n\nLet's plot the distribution of the number of artworks by age.","112c025c":"Let's calculate the year the artwork was created.","a26fccb2":"### Rename the columns\n\nLet's convert the remaining column names to `snake_case` format.","e4e6ddbb":"We need to extract the year when the print was created.\n\nNow let's process the values with `originals executed` etc.","4e9a54c3":"Only 0.76% of questionable values remain in the `Data` column.\n\nWe are currently looking for high-level results, so we will not waste time on the rest.","41204307":"Although this is a large percentage (about 11%) of the total number of rows, we have to drop them.","17fc4c27":"It doesn't make sense to do data recovery as part of this project. So we'll get rid of these rows.","1a109230":"Now let's convert the years to the integer type and add these values to the new `begin_date_clean` column.","7e8fbe39":"There are no `NaN` values in the `gender` column.\n\nLet's consider the rows where the `gender` column contains a single value.","42e13d8f":"In total, *we found out, that 33 is really especial age!*","831acc1b":"First, we'll prepare the data: remove `c.`, `(`, `)` and do some others replacements that you can see below.","54e1ea36":"Five female artists influence the outliers of 46 years. More than others, [Lilly Reich](https:\/\/www.moma.org\/artists\/8059).\n\nWe can see a peak around 90 years on the plot. Let's take a closer look.","a270a248":"# When Does The Brain Reach It's Peak In Art?\n\n\n## The Museum of Modern Art (MoMA) Collection\n\nThe Museum of Modern Art (MoMA) acquired its first artworks in 1929, the year it was established. Today, the Museum\u2019s evolving collection contains almost 200,000 works from around the world spanning the last 150 years.\nMoMA is committed to helping everyone understand, enjoy, and use it collection. The Museum\u2019s website features 88,398 artworks from 26,422 artists. [This research dataset](https:\/\/github.com\/MuseumofModernArt\/collection\/blob\/master\/Artworks.csv) contains 138,161 records, representing all of the works that have been accessioned into MoMA\u2019s collection and cataloged in its database. It includes basic metadata for each work, including title, artist, date made, medium, dimensions, and date acquired by the Museum. At this time, the dataset is available in CSV format, encoded in `UTF-8`.\n\nDescription of some of the MoMA's columns we are interested in:\n\n- `Title`: The title of the artwork.\n- `Artist`: The name of the artist who created the artwork.\n- `Nationality`: The nationality of the artist.\n- `BeginDate`: The year in which the artist was born.\n- `EndDate`: The year in which the artist died.\n- `Gender`: The gender of the artist.\n- `Date`: The date that the artwork was created.\n- `Department`: The department inside MoMA to which the artwork belongs.\n- `Medium`: Description of the artwork.\n- `Classification`: The kind of the artwork.\n\n\n## Introduction\n\nScientists say that the human brain reaches its peak efficiency by the age of 30. For instance, you can read *Chapter 6* of [Behave: The Biology of Humans at Our Best and Worst](https:\/\/www.amazon.com\/Behave-Biology-Humans-Best-Worst\/dp\/1594205078) by [Robert M. Sapolsky](https:\/\/en.wikipedia.org\/wiki\/Robert_Sapolsky).  \n\nWe discovered the Moma dataset and wondered *if most of the artworks were actually created by artists in their 30s*.  \n\nWe'll proceed from the assumption that, since the artworks have been preserved and included in the collection of the museum, they represent a valuable result of the human brain activity. \n\nWe'll calculate the age when the artist created his work as the difference between the `Date` and the `BeginDate` columns.  \nThen we'll create a plot to see *at what age the most of the valuable artworks were created*.\n\n\n## Reading The MoMA Dataset\n\nLet's take a look at the data.","5ab5773d":"We have processed 3991 special cases. In general, we have cleaned up 115,819 values.\n\nLet's evaluate the remaining data in the `date` column.","64673a5b":"This peak is characterized by works of Louise Bourgeois, an artist who did not pay attention to age.\n\nYou can find more about Louise Bourgeois and her creativity [here](https:\/\/en.wikipedia.org\/wiki\/Louise_Bourgeois) and [here](https:\/\/www.moma.org\/artists\/8059).\n\n### Plot by nationality\n\nLet's determine 4 nationalities with the largest number of the art objects.","28c37883":"We'll discard values such as `early 1940s`, `1920s`, since this is a rather vague period and therefore has no value for our task.","8dd4397d":"We can see some suspicious outliers. For instance, it's unlikely that the artwork was created at the age of 1 year. What are these outliers?","c8f6364a":"## Conclusions\n\nSince we were focused on getting quick high-level results, we assume that there are some erroneous values among the cleared data. \n\nNow, let's continue with the `age` values.","f70df030":"About 30% of the rows doesn't contain the year of death.  \n\nWe'll extract the years and convert them to an integer, then add those values to the `end_date_clean` column.\nAlso we'll fill in the empty values with `0` in the `end_date_clean` column.","9e14b708":"The `BeginDate` and `EndDate` columns, like the `Gender` column, contain groups of values for the teams:\n\n- `(2020) (2006) (2009)`\n- `(0) (0) (0) (0)`\n- `(0) (0) (0) (1936) (0)`\n\nThe `Date` column contains quite mixed data that needs to be cleaned up. The artwork creation date can be:\n\n- one year,\n- range of years.\n\nSo, we have a following plan to clean up the data:\n\n1. Drop the rows where the `BeginDate` or `Date` columns contain null values, since we won't be able calculate the age.\n2. Drop the rows where artist is not a single author.\n3. For the `BeginDate` and `EndDate` columns:\n\n    - Extract and convert the year to a number.\n    - Assign it to the new columns `begin_date_clean` and `end_date_clean`.\n\n\n4. Clean up the gender and assign it to the `gender_clean` column.\n5. For the `Date` column:\n\n    - If the date isn't a range:\n\n        * Extract and convert the value to a number.\n\n    - If the date is a range:\n\n        * Extract two bound years.\n        * Convert them to the integer type and then average them by adding them together and dividing by two.\n        * Use the round() function to round the average, so values like 1872.5 become 1872.\n\n    - Assign the year to the `data_clean` column.\n\n\n## Clearing The Data\n\nWe'll perform data cleanup iteratively, step by step. We'll use hard-coded regular expression patterns to avoid missing any values.\n\n### Drop the columns\n\nFirst, let's drop the unnecessary columns from the dataframe.  \nThe `ConstituentID`, `Medium`, `Dimensions`, `CreditLine`, `AccessionNumber`, `DateAcquired`, `Cataloged`, `ObjectID`, `URL`, `ThumbnailURL`, `Circumference (cm)`, `Depth (cm)`, `Diameter (cm)`, `Height (cm)`, `Length (cm)`, `Weight (kg)`, `Width (cm)`, `Seat Height (cm)`, `Duration (sec.)` columns don't contain some useful information for our goal.","17c9ea4f":"Look at the values without year pattern.","bb17fb57":"The `Gender` column can contain the following:\n\n- `Male`\n- `Female`\n- empty value\n- combinations of the values above\n\nLet's look at the last case.","62513b7e":"### Clear the `BeginDate` column\n\nAccording to the plan above, we'll remove rows with `NaN` values.","9fcadd43":"The nationality is not defined in 163 rows.\n\nWe'll extract valid nationality values and assign them to the `nationality_clean` column.","3c40c962":"### Plot by century\n\nLet's create the plot based on the centuries in which the artworks were created.  \nFirst, we'll save the century in a separate column `century`."}}