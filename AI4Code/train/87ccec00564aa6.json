{"cell_type":{"976924f8":"code","b3e15745":"code","5338eb4d":"code","cf26dda2":"code","dfe63089":"code","fbaa2c51":"code","400bdcc3":"code","e1c39efc":"code","61a52cf3":"code","9b5ada06":"code","70b181a0":"code","89a56b7f":"code","66f9f057":"code","93827e3e":"code","c5d86cdd":"code","38be5171":"code","4c929ad9":"code","796e7dd0":"code","c05a7f5b":"markdown","adad9c90":"markdown","c4c50ad2":"markdown","5579e22c":"markdown","0af134f9":"markdown","c54fe8ce":"markdown","c8a0b952":"markdown","632d179f":"markdown","07828daa":"markdown","9dd84dc6":"markdown","a33950fd":"markdown","fa855ac9":"markdown","3390ca03":"markdown","7afb3ed1":"markdown"},"source":{"976924f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b3e15745":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras import regularizers\nfrom keras.models import Sequential\nfrom keras.models import Model\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\nfrom keras.callbacks import ReduceLROnPlateau\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom keras.layers import InputLayer\n \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image\nimport keras.preprocessing.image as img\nfrom keras.applications.resnet50 import ResNet50","5338eb4d":"os.listdir('..\/input\/pothole-detection-small\/My Dataset\/train')","cf26dda2":"def make_train_data(label,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        path = os.path.join(DIR,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n    \n        X.append(np.array(img))\n        Z.append(str(label))","dfe63089":"X=[]\nZ=[]\nIMG_SIZE=256\nPlain='..\/input\/pothole-detection-small\/My Dataset\/train\/Plain'\nPothole='..\/input\/pothole-detection-small\/My Dataset\/train\/Pothole'\n\nmake_train_data('Plain',Plain)\nmake_train_data('Pothole',Pothole)","fbaa2c51":"fig,ax=plt.subplots(2,5)\nplt.subplots_adjust(bottom=0.3, top=0.7, hspace=0)\nfig.set_size_inches(10,10)\n\nfor i in range(2):\n    for j in range (5):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l][:])\n        ax[i,j].set_title(Z[l])\n        ax[i,j].set_aspect('equal')","400bdcc3":"le=LabelEncoder()\nY=le.fit_transform(Z)\nY=to_categorical(Y,2)\nprint(Y)\nX=np.array(X)\n\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=1337)\n\nnp.random.seed(42)\nrn.seed(42)","e1c39efc":"base_model=ResNet50(include_top=False, weights='imagenet',input_shape=(256,256,3), pooling='max')\nbase_model.summary()","61a52cf3":"model=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.20))\nmodel.add(Dense(2048,activation='relu'))\nmodel.add(Dense(1024,activation='relu'))\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dense(2,activation='softmax'))","9b5ada06":"epochs=50\nbatch_size=128\nred_lr=ReduceLROnPlateau(monitor='val_acc', factor=0.1, min_delta=0.0001, patience=2, verbose=1)\nbase_model.trainable=True # setting the VGG model to be trainable.\nmodel.compile(optimizer=Adam(lr=1e-5),loss='categorical_crossentropy',metrics=['accuracy'])\nmodel.summary()","70b181a0":"History = model.fit(x_train, y_train, epochs=epochs, validation_data=(x_test,y_test))","89a56b7f":"model.save('..\/working\/model.h5')\n","66f9f057":"plt.plot(History.history['accuracy'])\nplt.plot(History.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","93827e3e":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","c5d86cdd":"path = \"\/kaggle\/input\/pothole-detection-small\/My Dataset\/test\/Pothole\"\nfiles = os.listdir(path)\nfiles","38be5171":"for i in tqdm(files):\n    pth = os.path.join(path,i)\n    X = cv2.imread(pth,cv2.IMREAD_COLOR)\n    X = cv2.resize(X,(256,256))\n    plt.figure()\n    plt.imshow(X[:,:,::-1]) \n    plt.show()  \n\n    X = np.array(X)\n    X = np.expand_dims(X, axis=0)\n\n    y_pred = np.round(model.predict(X))\n    if y_pred[0][0] == 1:\n        print(\"Plain Road\")\n    else:\n        print(\"Pothole Road\")","4c929ad9":"path = \"\/kaggle\/input\/pothole-detection-small\/My Dataset\/test\/Plain\"\nfiles = os.listdir(path)\nfiles","796e7dd0":"for i in tqdm(files):\n    pth = os.path.join(path,i)\n    X = cv2.imread(pth,cv2.IMREAD_COLOR)\n    X = cv2.resize(X,(256,256))\n    plt.figure()\n    plt.imshow(X[:,:,::-1]) \n    plt.show()  \n\n\n    X = np.array(X)\n    X = np.expand_dims(X, axis=0)\n\n    y_pred = np.round(model.predict(X))\n    if y_pred[0][0] == 1:\n        print(\"Plain Road\")\n    else:\n        print(\"Pothole Road\")","c05a7f5b":"### Testing the trained model on Plain images","adad9c90":"## Saving the trained model","c4c50ad2":"## Splitting the data into Training and Validation data","5579e22c":"## Model Accuracy","0af134f9":"## Model Loss","c54fe8ce":"### Dataset Path","c8a0b952":"## Displaying the training data with labels","632d179f":"## Dataset is divided into two parts : test & train\n### Both the directories (test and train) are divided further : Plain & Pothole","07828daa":"### Testing the trained model on Pothole images","9dd84dc6":"## Importing all the required libraries","a33950fd":"# Pothole Detection","fa855ac9":"# Testing the trained model \n### [0,1] --> Pothole road\n### [1,0] --> Plain road","3390ca03":"# Building the CNN model using RESNET (pretrained model)","7afb3ed1":"Resizing the images into (256 * 256) "}}