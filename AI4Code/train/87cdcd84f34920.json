{"cell_type":{"2f743afc":"code","2c9572ab":"code","2ccf4c8a":"code","64fa496d":"code","2be3e2b4":"code","226ccb21":"code","0b355895":"code","e947d6ae":"code","f45977a3":"code","9fda20b6":"code","402a7715":"code","5c5cc275":"code","c39390af":"code","01c5bf88":"code","f341d71e":"code","0b14be0e":"code","253fb87e":"code","044f4480":"code","5a88123e":"code","039d5249":"code","8a1b99d7":"code","25875dc4":"code","65700e88":"code","0b1e85f3":"code","0476ba3f":"code","e098dfca":"code","4cac9565":"code","00b38a2c":"code","cc1de018":"code","a0f60046":"code","41715af8":"code","c0fd7e1f":"code","260cb09a":"code","60ae9bcf":"code","49db8bc8":"code","58f25472":"code","d3fe1051":"code","7d2a8900":"code","be4e618f":"code","462e91b1":"code","dac3c26e":"code","b0c237ba":"code","7e850024":"code","9c7f59be":"code","4ca62401":"code","c5a60f2e":"code","1c0f925c":"code","6a25295f":"code","10fb5d64":"code","8e0f4ca6":"code","55e5ceb5":"code","104d97cd":"code","a1dadb22":"code","9d955bfd":"code","d51bcd60":"code","cc149e0f":"code","87d35e64":"code","4ca3ef2e":"code","7a67d374":"code","eaa98ccd":"code","e3a7aaa5":"code","aa2a8db0":"code","b4bcff4a":"code","56481132":"code","a3713834":"code","449b7af4":"code","d6b90b2e":"code","25325144":"code","7d3a3d28":"code","4900e2b8":"code","2334730b":"code","e2632a87":"code","911bb89a":"code","7e2184f7":"code","fb0fe7bf":"code","58490192":"code","feef728d":"code","4eed1e42":"code","4979cf0f":"code","240ef258":"code","67122593":"code","67820bc3":"code","3b9c5015":"code","9aba6aa4":"code","eb15ac1e":"code","1cea1ad7":"code","12c28ebb":"code","c8237bbb":"code","27cd5afe":"code","f1acfe61":"code","e7fd7863":"code","e59614a1":"code","1a32621d":"code","ec747425":"code","db56df8b":"code","2aae6d2b":"markdown","220d986c":"markdown","b246d02c":"markdown","a881f637":"markdown","ca636898":"markdown","fa48c672":"markdown","6c96ea32":"markdown","ada34c06":"markdown","1f4cb37c":"markdown","0445f33e":"markdown","83511938":"markdown"},"source":{"2f743afc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c9572ab":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv') #Yukar\u0131da buldu\u011fumuz adresi Pandas olarak input etmek (yani bu veriye ula\u015fmak istedi\u011fimizde) soldaki kodu kullan\u0131yoruz.\ndata.head(10) #Veri setinin ilk X sat\u0131r\u0131n\u0131n g\u00f6zlemlemek i\u00e7in data.head kodunu kullan\u0131yoruz. De\u011fer yazmad\u0131\u011f\u0131m\u0131zda ilk 5 sat\u0131r g\u00f6r\u00fcn\u00fcnr. Ben burada 10 sat\u0131r\u0131 g\u00f6rmek i\u00e7in parantez i\u00e7ine 10 ifadesini yazd\u0131m.","2ccf4c8a":"data.info() #Bu kod ile verilerin  tipleri hakk\u0131nda bilgi sahibi oluyoruz.","64fa496d":"data.corr() # S\u00fctunlardaki her verinin kendi i\u00e7indeki korelasyonu bulmaya \u00e7al\u0131\u015ft\u0131k. Verilerden 0 olanlar ili\u015fki olmad\u0131\u011f\u0131n\u0131, 1'e do\u011fru yakla\u015ft\u0131k\u00e7a pozitif bir korelasyon oldu\u011funu, -1'e do\u011fru yakla\u015ft\u0131k\u00e7a negatif korealasyon oldu\u011funu bizlere g\u00f6sterir.","2be3e2b4":"import matplotlib.pyplot as plt #plt ifadesini \u00f6nceden tan\u0131mlamam\u0131\u015ft\u0131k. Burada onu tan\u0131ml\u0131yoruz. \nimport seaborn as sns  # sns'yi de g\u00f6rselle\u015ftirme (visualization tool) i\u00e7in kullan\u0131yoruz.\n#korelasyonu g\u00f6rsel olarak g\u00f6r\u00fcnt\u00fclemek i\u00e7in a\u015fa\u011f\u0131daki i\u015flemi yap\u0131yoruz.\nf,ax = plt.subplots(figsize=(32, 32)) #Parantez i\u00e7indeki de\u011ferler bizlere \u00e7izim alan\u0131n\u0131n boyutunu g\u00f6steriyor.\nsns.heatmap(data.corr(), annot=True, linewidths=.7, fmt= '.1f',ax=ax) #sns kodunu g\u00f6rselle\u015ftirme i\u00e7in kullan\u0131yoruz.\nplt.show() # En altta form\u00fcl\u00fcn \u00e7\u0131kmas\u0131n\u0131 engelliyor.","226ccb21":"data.columns #Verisetindeki s\u00fctunlar\u0131n neler oldu\u011funu g\u00f6remk i\u00e7in kullan\u0131yoruz.","0b355895":"# \u00c7izgi Grafi\u011fi\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.V7.plot(kind = 'line', color = 'b',label = 'V7',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.V8.plot(color = 'r',label = 'V8',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='lower right')     # anahtar\u0131n sa\u011f altta olmas\u0131 i\u00e7in kullan\u0131yoruz. \nplt.xlabel('V7')              # ad\u0131n\u0131 yazmak i\u00e7in kullan\u0131yoruz.\nplt.ylabel('V8 De\u011feri')\nplt.title('Credit Card Fraud')            # Grafi\u011fin ba\u015fl\u0131\u011f\u0131n\u0131 yaz\u0131yoruz.\nplt.show()","e947d6ae":"# Da\u011f\u0131l\u0131m grafi\u011fi\ndata.plot(kind='scatter', x='V7', y='V8',alpha = 0.7,color = 'b') #Alpha, solukla\u015ft\u0131rma i\u00e7in kulland\u0131\u011f\u0131m\u0131z de\u011ferdir.\nplt.xlabel('V7')  # x ekseninin ad\u0131 \nplt.ylabel('V8')  # y ekseninin ad\u0131\nplt.title('V7 & V8 Da\u011f\u0131l\u0131m Grafi\u011fi')            # Grafi\u011fin ba\u015fl\u0131\u011f\u0131\nplt.show()","f45977a3":"# V7 i\u00e7in Histogram grafi\u011fini a\u015fa\u011f\u0131daki form\u00fcl ile \u00e7iziyoruz.\ndata.V7.plot(kind = 'hist',bins = 1000,figsize = (12,5)) # De\u011ferler 0 ve \u00e7evresinde da\u011f\u0131ld\u0131\u011f\u0131 i\u00e7in Bins de\u011ferini 1000 yaparak s\u0131kl\u0131\u011f\u0131n da\u011f\u0131l\u0131m\u0131n\u0131 daha net g\u00f6rebilidik.\nplt.show()","9fda20b6":"#s\u00f6zl\u00fck olu\u015fturma\ndictionary = {'elma' : 'apple','\u00fcz\u00fcm' : 'grape'}\nprint(dictionary.keys())\nprint(dictionary.values())\ndictionary['elma'] = \"apple1\" \nprint(dictionary)\ndictionary['kavun'] = \"melon\"       # S\u00f6zl\u00fc\u011fe kavun kelimesini ekliyoruz.\nprint(dictionary)\ndel dictionary['elma']              # S\u00f6zl\u00fckten elma kelimesini siliyoruz. \nprint(dictionary)\nprint('kavun' in dictionary)        # kavun s\u00f6zl\u00fckte vaar m\u0131? Gelecek yan\u0131t true veya false (var ya da yok)\ndictionary.clear()                   # s\u00f6zl\u00fc\u011f\u00fc temizle\nprint(dictionary)\ndel dictionary         # t\u00fcm s\u00f6zl\u00fc\u011f\u00fc silmek i\u00e7in kullan\u0131yoruz. \nprint(dictionary)   # bir \u00fcst sat\u0131rda s\u00f6zl\u00fc\u011f\u00fc slidi\u011fimiz i\u00e7in kod hata vermelidir. \n","402a7715":"import pandas as pd #Padndas'\u0131 pd olarak import edece\u011fimizi tan\u0131ml\u0131yoruz.\ndata = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')  #pd ifadesi Pandas olarak okuma yapmak istedi\u011fimizi ifade ediyor.\nseries = data['V7']        # V7 s\u00fctununu seri olarak tan\u0131lmad\u0131k\nprint(type(series))\ndata_frame = data[['V7']]  # V7'yi tablo olarak tan\u0131lmad\u0131k. A\u015fa\u011f\u0131da bunun tan\u0131ml\u0131 oldu\u011fu form\u00fcle ula\u015faca\u011f\u0131z.\nprint(type(data_frame))","5c5cc275":"# K\u0131yaslama operat\u00f6r\u00fc\nprint(30 > 29)  # 30, 29'dan b\u00fcy\u00fck ise True, de\u011fil ise false\nprint(30!=29)  # 30, 29'a e\u015fit ise True, de\u011fil ise false\n# Boolean operat\u00f6rleri (Mant\u0131k ile ilgili i\u015flemler)\nprint(True and False) # True ve False, False d\u00f6nd\u00fcr\u00fcr. \u00d6rne\u011fin 3<4 ve 6<3 ko\u015fululunun beraber sa\u011flanmamas\u0131 durumunda Talse olur.\nprint(True or False) # True veya False, True d\u00f6nd\u00fcr\u00fcr. \u00d6rne\u011fin 3<4 veya 6<3 ko\u015fululunun birinin sa\u011flanmas\u0131 durumunda True olur.","c39390af":"# Tablodaki verileri filtreleme. \nx = data['V7']> 40     # V7 de\u011ferinin 40'tan b\u00fcy\u00fck oldu\u011fu sat\u0131rlar\u0131 filtreliyoruz. Burada iki sat\u0131r 40'tan b\u00fcy\u00fck olarak \u00e7\u0131kt\u0131.\ndata[x]","01c5bf88":"# Burada, iki \u00fcst kod b\u00f6lmesinde g\u00f6rd\u00fc\u011f\u00fcm\u00fcz Boolean operat\u00f6r\u00fcn\u00fc (mant\u0131k) kullanarak i\u015flem yapaca\u011f\u0131z. \ndata[np.logical_and(data['V7']>40, data['V6']<70 )] #V7 40'tan b\u00fcy\u00fck, V6 ise 70'ten k\u00fc\u00e7\u00fck olsun istiyoruz. ","f341d71e":"i = 0  # i de\u011ferini 0'dan ba\u015flat\u0131yoruz. \nwhile i != 10 :  # i d\u00f6ng\u00fcs\u00fc 10 say\u0131s\u0131na kadar sa\u011fl\u0131yoruz. 10 de\u011ferine ula\u015ft\u0131\u011f\u0131nda d\u00f6ng\u00fcden \u00e7\u0131kacak. Mesela buraya 11 yazar isek say\u0131lar 10, 12 \u015feklinde gidece\u011fi ve hi\u00e7bir zaman 11 olmayaca\u011f\u0131 i\u00e7in d\u00f6ng\u00fcden \u00e7\u0131kmayacakt\u0131r.\n    print('i: ',i)  # i de\u011ferlerinin \u00e7\u0131kt\u0131s\u0131n\u0131 bizlere verecek. \n    i +=2   # Her i de\u011ferine 2 ekletece\u011fiz. \u0130lk de\u011ferimiz 0 idi. 0,2,4,6 \u015feklinde devam eden bir d\u00f6ng\u00fc i\u00e7inde olaca\u011f\u0131z.\nprint(i,' d\u00f6ng\u00fc sonunda de\u011ferimiz 10')  #D\u00f6ng\u00fcden \u00e7\u0131kt\u0131ktan sonraki ifadeyi yazaca\u011f\u0131z.","0b14be0e":"# Stay in loop if condition( i is not equal 5) is true\nlis = [2,4,6,8,10] # Liste de\u011ferlerini tan\u0131mlad\u0131k.\nfor i in lis:  # i de\u011ferlerini listeden \u00e7ek.\n    print('i de\u011feri: ',i) # Listedeki de\u011ferlerin kar\u015f\u0131l\u0131\u011f\u0131n\u0131 yaz.\nprint('')\n\nfor index, value in enumerate(lis):  # Burada index de\u011ferinin kar\u015f\u0131l\u0131\u011f\u0131n\u0131 buluyoruz. index de\u011feri 0'dan ba\u015flar.\n    print(index,\" : \",value)\nprint('')   \n\n# S\u00f6zl\u00fck i\u00e7in \ndictionary = {'elma':'apple','kavun':'melon'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value) # anahtar ve de\u011ferleri (kar\u015f\u0131l\u0131\u011f\u0131n\u0131) yazd\u0131raca\u011f\u0131z.\n\ndictionary = {'elma':'apple','kavun':'melon'}\nfor key,value in dictionary.items():\n    print(value,\" : \",key) # de\u011ferleri (kar\u015f\u0131l\u0131\u011f\u0131n\u0131) ve anahtar\u0131 yazd\u0131raca\u011f\u0131z.\n  \n# Pandas i\u00e7in index de\u011feri \nfor index,value in data[['V7']][0:1].iterrows(): #V7'nin 1. sat\u0131rdaki de\u011ferini buluyoruz. A\u015fa\u011f\u0131da 0.239599 olarak yazacak.\n    print(index,\" : \",value) ","253fb87e":"def tuple_ex(): #Derste tuble olarak tan\u0131mlanm\u0131\u015f ama olmas\u0131 gereken tuple (demet) olabilir. Bununla norma parantezli String (karakter dizisi) verileri tan\u0131mlan\u0131r. \n    t = (4,5,9)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","044f4480":"x = 7  # x de\u011ferini global scope olarak tan\u0131mland\u0131. Bu en soldad\u0131r. \ndef f():\n    x = 99\n    return x   # x de\u011ferini local scope olarak tan\u0131mland\u0131. Bu bir tab i\u00e7eridedir. Local scope alt\u0131nda i\u015flem yapt\u0131\u011f\u0131m\u0131zda bunun sonucunu d\u00f6nd\u00fcr\u00fcr.\nprint(x)      # x = 7 global scope\nprint(f())    # x = 99 local scope","5a88123e":"# local scope yok ise global scope verisi ile i\u015flem yap\u0131l\u0131r.\nx = 50\ndef f():\n    y = 2*x        # local scope x verisi yok\n    return y\nprint(f())         # bu sebeple global scope x verisi kullan\u0131l\u0131r.","039d5249":"# built in scope ifadesi de Python'un kendi tan\u0131mlad\u0131\u011f\u0131 ifadelerdir. Bu ifadelere eri\u015fmek i\u00e7in a\u015fa\u011f\u0131daki dorm\u00fcl\u00fc kullanabiliriz.\nimport builtins\ndir(builtins)","8a1b99d7":"#nested (fonksiyon i\u00e7inde fonkisyon)\ndef kare(): # kare almak i\u00e7in bir fonksiyon yazaca\u011f\u0131z. Neyin karesini alaca\u011f\u0131m\u0131z a\u015fa\u011f\u0131da \"return add()**3\" ile ifade ediliyor. \n    def toplam ():\n        x = 20\n        y = -5\n        z = x + y # burada da bir toplam form\u00fcl\u00fc tan\u0131mlad\u0131k. \n        return z\n    return toplam()**3\nprint(kare()) ","25875dc4":"# default arguments - varsay\u0131lan de\u011fi\u015fkenler.\ndef f(a, b = 10, c = 8):\n    y = a + b + c\n    return y\nprint(f(6))  # Burada b ve c de\u011ferleri yukar\u0131daki fonksiyonda tan\u0131mland\u0131\u011f\u0131 i\u00e7in aksi belirtilmedik\u00e7e 10 ve 8 de\u011ferlerini al\u0131r.\n# Bu de\u011ferlerin aksini belitmek istersek istenilen de\u011ferler belirilelibir. \nprint(f(6,4,1))","65700e88":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(10)\nprint(\"\")\nf(4,3,2,1)\n# flexible arguments **kwargs that is dictionary\n\ndef f(**kwargs):\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(\u00dclke = 'T\u00fcrkiye', Ba\u015fkent = 'Ankara', N\u00fcfus = 83154997)","0b1e85f3":"# Form\u00fclleri daha kolay bir \u015fekilde yazmak i\u00e7in lambda fonksiyonu kullanabiliriz. \nkare = lambda x: x**2 \nprint(kare(4))\ntoplam = lambda x,y,z: x+y+z\nprint(toplam(1,2,3))","0476ba3f":"# Anonymus (liste de\u011feri \u00fczerinden hesaplama yapmak i\u00e7in kullan\u0131l\u0131r)\nliste = [3,6,9]  # Bir liste tan\u0131ml\u0131yoruz.\ny = map(lambda x:x**3,liste)  #Listedeki de\u011ferlerin 3. kuvvetini almak i\u00e7in soldaki kodu yaz\u0131yoruz.\nprint(list(y))","e098dfca":"# Iterators\nname = \"T\u00fcrkiye\"\niterasyon = iter(name)  # iterasyon yap\u0131lacak ifadeyi tan\u0131ml\u0131yoruz.\nprint(next(iterasyon))    # ilk de\u011feri yaz\u0131yor.\nprint(*iterasyon)         # kalan de\u011ferleri yaz\u0131yor.","4cac9565":"# zip example\nliste1 = [2,6,4,9] \nliste2 = [12,3,5,7]  # iki adet liste tan\u0131ml\u0131yoruz. \nzipli = zip(liste1,liste2) #bunlar\u0131 zipli diye bir isimle birle\u015ftiriyoruz.\nprint(zipli)\nzlistesi = list(zipli)  # zlistesi ad\u0131nda yeni bir liste tan\u0131ml\u0131yoruz. \nprint(zlistesi) # tan\u0131lmad\u0131\u011f\u0131m\u0131z z listesini yazd\u0131r\u0131yoruz. ","00b38a2c":"un_zip = zip(*zlistesi)  #birle\u015ftirdi\u011fimiz zlistesi de\u011ferini tekrar ayr\u0131mak i\u00e7in bu form\u00fcl\u00fc kullan\u0131yoruz. \nun_liste1,un_liste2 = list(un_zip) # unzip yapt\u0131\u011f\u0131m\u0131zda t\u00fcr\u00fc tuple oluyor.\nprint(un_liste1)\nprint(un_liste2)\nprint(type(un_liste2))","cc1de018":"# list comprehension\nnum1 = [6,9,7,8,12,5]  # Liste de\u011ferini tan\u0131ml\u0131yoruz. \nnum2 = [i **2 for i in num1 ]  # Bir \u00fcst sat\u0131rdaki liste de\u011ferlerinin karesini al\u0131p, alt sat\u0131rda yazd\u0131r\u0131yoruz.\nprint(num2)","a0f60046":"# iterable (Ko\u015fullu)\nnum1 = [6,20,22]\nnum2 = [i**2 if i == 20 else i-4 if i < 9 else i+15 for i in num1] # Bu form\u00fcl \u015funu anlat\u0131r: e\u011fer i de\u011feri 20'ye e\u015fit ise onun karesini al,9'den k\u00fc\u00e7\u00fck ise 4 \u00e7\u0131kart, hi\u00e7biri de\u011filse 15 ekle\nprint(num2)","41715af8":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\ndata = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\nthreshold = sum(data.V7)\/len(data.V7)  # ortalama almak i\u00e7in bu form\u00fcl\u00fc yazd\u0131k\ndata[\"V7\"] = [\"ortalamadan_y\u00fcksek\" if i > threshold else \"ortalaman\u0131n_alt\u0131nda\" for i in data.V7]","c0fd7e1f":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.head() # \u0130lk 5 sat\u0131r\u0131 g\u00f6sterir.","260cb09a":"data.tail() # Son 5 sat\u0131r\u0131 g\u00f6sterir.","60ae9bcf":"data.columns # s\u00fctun ba\u015fl\u0131klar\u0131n\u0131 g\u00f6sterir.","49db8bc8":"data.shape # Sat\u0131r ve s\u00fctun say\u0131s\u0131n\u0131 g\u00f6sterir.","58f25472":"data.info() # Veriler hakk\u0131nda bilgi verir.","d3fe1051":"# Verilerin s\u0131kl\u0131\u011f\u0131n\u0131 a\u015fa\u011f\u0131daki form\u00fcl ile buluyoruz. \nprint(data['V7'].value_counts(dropna =False))  # eksik veriler olsa bunu da bulacakt\u0131k. Ancak ekssik veri yok. ","7d2a8900":"data.describe() #istatistiksel veriler (ortalama, medyan vb.) bulmak i\u00e7in bu form\u00fcl\u00fc kullan\u0131yoruz.","be4e618f":"# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='V7') #V7 de\u011ferlerini histogram olarak \u00e7izdiriyoruz. ","462e91b1":"# Verisetinin ilk on sat\u0131r\u0131ndan yeni bir veri tan\u0131ml\u0131yoruz.\ndata_yeni = data.head(10)    # I only take 5 rows into new data\ndata_yeni","dac3c26e":"# Veriyi daratma. Yukar\u0131da 10 sat\u0131ra daraltm\u0131\u015ft\u0131k. Burada ise Amount ve Class s\u00fctunlar\u0131 ile daralt\u0131yoruz. Bunlar\u0131 de\u011fi\u015fken olarak alt alta ekliyor.\nmelted = pd.melt(frame=data_yeni,id_vars = 'V7', value_vars= ['Amount','Class'])\nmelted","b0c237ba":"# Melting i\u015fleminin tersini (Reverse) yap\u0131yoruz.\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'V7', columns = 'variable',values='value')","7e850024":"# Veri birle\u015ftirme (Concentrating Data) Veri setinin ilk ve son 5 sat\u0131r\u0131n\u0131 birle\u015ftirdik.\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # a\nconc_data_row","9c7f59be":"data1 = data['V7'].head()\ndata2= data['Amount'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # V7 ve Amount s\u00fctunlar\u0131n\u0131 birle\u015ftiriyoruz. \nconc_data_col","4ca62401":"#5 Temel veri tipi (data types): object(string),booleab, integer, float and categorical.\ndata.dtypes #Tipleri bu form\u00fcl ile bluuyoruz.","c5a60f2e":"data['V7'] = data['V7'].astype('category')\ndata['Amount'] = data['Amount'].astype('int')\ndata.dtypes #T\u00fcrleri de\u011fi\u015ftirip tekrar veri tiplerini sorguluyoruz.","1c0f925c":"data.info() #Null veri bulunmuyor. Veri seti dolu.","6a25295f":"data[\"V7\"].value_counts(dropna =False) #NaN value yok. ","10fb5d64":"# data frames from dictionary\nimport pandas as pd # Bu sat\u0131r\u0131 yazmad\u0131\u011f\u0131m\u0131zda \"pd\" nin ne oldu\u011funu tan\u0131yamayacakt\u0131r. \ncountry = [\"T\u00fcrkiye\",\"Almanya\"]\npopulation = [\"83\",\"82\"]\nlist_label = [\"\u00dclke\",\"N\u00fcfus\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf\n","8e0f4ca6":"# Yeni s\u00fctun eklemek i\u00e7in\nimport pandas as pd\ndf[\"Ba\u015fkent\"] = [\"Ankara\",\"Berlin\"]\ndf","55e5ceb5":"# T\u00fcm s\u00fctuna ayn\u0131 de\u011feri tan\u0131mlamak i\u00e7in - Broadcasting\ndf[\"Gelir\"] = 0\ndf","104d97cd":"# T\u00fcm verileri Plot \u00e7izdirme\ndata = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata1 = data.loc[:,[\"V7\",\"V8\",\"V9\"]]\ndata1.plot()","a1dadb22":"import matplotlib.pyplot as plt # T\u00fcm verileri ayr\u0131 grafiklerde \u00e7izdiriyoruz.\ndata1.plot(subplots = True)\nplt.show()","9d955bfd":"# scatter plot \ndata1.plot(kind = \"scatter\",x = \"V7\",y= \"V8\")\nplt.show()","d51bcd60":"# hist plot\ndata = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata1.plot(kind = \"hist\",y = \"V7\",bins = 1000,range= (-10,10))\n","cc149e0f":"# histogram \u00e7izimlerini normal ve k\u00fcm\u00fclatif olarak \u00e7izdiriyoruz.\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"V7\",bins = 1000,range= (-10,10),ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"V8\",bins = 1000,range= (-10,10),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","87d35e64":"data.describe()","4ca3ef2e":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))\n","7a67d374":"import warnings #Uyar\u0131lar\u0131 kapatmak i\u00e7in bu komutu kullanabiliriz. \nwarnings.filterwarnings(\"ignore\") #Uyar\u0131lar\u0131 kapatmak i\u00e7in bu komutu kullanabiliriz. \n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head() #Veri seninin ilk 5 sat\u0131r\u0131n\u0131 al\u0131yoruz. \ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"] # Buraya 5 adet tarih atad\u0131k.\ndatetime_object = pd.to_datetime(date_list) \ndata2[\"date\"] = datetime_object #Liste halindeki objeleri dataset'e ekliyoruz.\ndata2= data2.set_index(\"date\") # Bu veriyi index yapmak i\u00e7in bu form\u00fcl\u00fc kullan\u0131yoruz. \ndata2 ","eaa98ccd":"# Tarihlere g\u00f6re verileri buluyoruz.\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","e3a7aaa5":"# Yukar\u0131daki data2 verisini kullan\u0131yoruz.\ndata2.resample(\"A\").mean() #A ifadesi Annual - y\u0131ll\u0131k, M olsa idi Monthly (ayl\u0131k) olacakt\u0131.","aa2a8db0":"# Ay ile d\u00f6n\u00fc\u015f\u00fcm yapmak istersek\ndata2.resample(\"M\").mean()\n# T\u00fcm aylara ait veriler bulunmad\u0131\u011f\u0131 (tan\u0131mlamad\u0131\u011f\u0131m\u0131z) i\u00e7in NaN verileri ile kar\u015f\u0131la\u015f\u0131yoruz.","b4bcff4a":"# NaN olan verileri interpolasyon ile doldurabiliriz. Bunu da a\u015fa\u011f\u0131daki form\u00fcl ile yapac\u011fa\u0131z. \ndata2.resample(\"M\").first().interpolate(\"linear\")","56481132":"# Ortalama de\u011ferleri alarak da interpolasyon yapmak istersek a\u015fa\u011f\u0131daki form\u00fcl\u00fc kullanabiliriz.\ndata2.resample(\"M\").mean().interpolate(\"linear\")","a3713834":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.head()\ndata.set_index('Time')\ndata.head()\n","449b7af4":"# indexing using square brackets\ndata[\"V5\"][4]  #V5 s\u00fcnunun 4. index verisini buluyoruz.","d6b90b2e":"data.loc[1,[\"V7\"]]","25325144":"# Baz\u0131 s\u00fctunlar\u0131 se\u00e7mek i\u00e7in\ndata[[\"V7\",\"Amount\"]]","7d3a3d28":"# Seriler ve Data Frame'ler aras\u0131ndaki fark a\u015fa\u011f\u0131da tan\u0131mlanm\u0131\u015ft\u0131r.\nprint(type(data[\"V7\"]))     # seriler\nprint(type(data[[\"V7\"]]))   # data frame ler","4900e2b8":"# Slicing and indexing series\ndata.loc[0:5,\"V7\":\"Amount\"]   # V7'den, Amount \u00fcstununa kadar, 0. index'ten, 5. index'e kadar verileri se\u00e7","2334730b":"# A\u015fa\u011f\u0131dan yukar\u0131 s\u0131ralama\ndata.loc[5:0:-1,\"V7\":\"Amount\"] ","e2632a87":"# Bir yerden, sona kadar slicing \ndata.loc[0:5,\"Amount\":] ","911bb89a":"# boolean serileri olu\u015fturma\nboolean = data.V7 > 35 #V7'nin 35'ten b\u00fcy\u00fck oldu\u011fu seriyi olu\u015fturuyoruz.\ndata[boolean]","7e2184f7":"first_filter = data.V6 > 23\nsecond_filter = data.V8 > -10\ndata[first_filter & second_filter]  # \u0130ki filtreyi de uygulayarak buldu\u011fumuz sonucu yazd\u0131r\u0131yoruz.","fb0fe7bf":"# Filtering column based others V8, -20'den b\u00fcy\u00fck iken V7 verilerini yazd\u0131r \ndata.V7[data.V8>-20]","58490192":"# Plain python functions\ndef div(n):\n    return n\/3 # 3'e b\u00f6lmek i\u00e7in bir fonksiyon tan\u0131ml\u0131yoruz. V7 s\u00fctununa bu fonksiyonun tan\u0131mlanmas\u0131n\u0131 yazd\u0131r\u0131yoruz.\ndata.V7.apply(div)","feef728d":"# Or we can use lambda function\ndata.V7.apply(lambda n : n\/3)","4eed1e42":"# Defining column using other columns\ndata[\"V7&V8\"] = data.V7 * data.V8 # Verileri kullanarak ba\u015fka bir s\u00fctuna atama yap\u0131yoruz.\ndata.head()","4979cf0f":"# index ad\u0131n\u0131 a\u015fa\u011f\u0131daki form\u00fcl ile \u00e7al\u0131\u015ft\u0131r\u0131yoruz. \u0130lk etapta ismi olmad\u0131\u011f\u0131 i\u00e7in none \u00e7\u0131k\u0131yor.\ndata = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\nprint(data.index.name)\ndata.index.name = \"endeks\" # index ad\u0131n\u0131 endeks olarak tan\u0131mlamak i\u00e7in bu form\u00fcl\u00fc kullan\u0131yoruz. \ndata.head()","240ef258":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# index de\u011ferlerini 100'den ba\u015flat\u0131p 284907'ye kadar 1'er 1'er art\u0131rd\u0131k\ndata3.index = range(100,284907,1) \ndata3.head()","67122593":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.head(20)","67820bc3":"# Time index : Class is outer Time is inner index\ndata1 = data.set_index([\"Class\",\"Time\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # how to use indexes","3b9c5015":"dic = {\"spor\":[\"Basket\",\"Basket\",\"Futbol\", \"Futbol\"],\"Cinsiyet\":[\"K\",\"E\",\"K\",\"E\"],\"Ya\u015f\":[22,18,25,33],\"Ba\u015far\u0131\":[11,4,8,24]}\ndf = pd.DataFrame(dic)\ndf","9aba6aa4":"# pivoting\ndf.pivot(index= \"spor\",columns = \"Cinsiyet\", values= \"Ba\u015far\u0131\")","eb15ac1e":"df1 = df.set_index([\"spor\",\"Cinsiyet\"])\ndf1\n# unstack","1cea1ad7":"# level determines indexes\ndf1.unstack(level=0)","12c28ebb":"df1.unstack(level=1)","c8237bbb":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","27cd5afe":"df","f1acfe61":"# df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df,id_vars=\"Cinsiyet\",value_vars=[\"Ya\u015f\",\"spor\"])","e7fd7863":"df","e59614a1":"# according to treatment take means of other features\ndf.groupby(\"spor\").mean()   # mean is aggregation \/ reduction method Spor de\u011ferlerinin ortalamas\u0131n\u0131 al\u0131yoruz\n# there are other methods like sum, std,max or min","1a32621d":"# we can only choose one of the feature\ndf.groupby(\"spor\").Ya\u015f.max() ","ec747425":"# Or we can choose multiple features\ndf.groupby(\"spor\")[[\"Ya\u015f\",\"Ba\u015far\u0131\"]].min() ","db56df8b":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"Ya\u015f\"] = df[\"Cinsiyet\"].astype(\"category\")\n#df[\"spor\"] = df[\"spor\"].astype(\"category\")\n#df.info()","2aae6d2b":"Pandas ile ilgili \u00e7al\u0131\u015fmalar\u0131 a\u015fa\u011f\u0131da yapaca\u011f\u0131z. ","220d986c":"10 sat\u0131r\u0131n\u0131 g\u00f6rd\u00fc\u011f\u00fcm\u00fcz verinin Zaman, V1...., V28, Amount ve Class olan 31 s\u00fctundan olu\u015ftu\u011funu g\u00f6zlemlemekteyiz. ","b246d02c":"B\u00f6l\u00fcm 2: Python Data Toolbox","a881f637":"PANDAS FOUNDATION","ca636898":"Yukar\u0131da da g\u00f6rece\u011fimiz \u00fczere 30 adet veri tipi ondal\u0131k (float), bir tanesi de tamsay\u0131d\u0131r.","fa48c672":"While ve For D\u00f6ng\u00fcleri","6c96ea32":"Verileri Zaman Serilerine Uyarlama - Burada index k\u0131sm\u0131n\u0131 zamana d\u00f6n\u00fc\u015ft\u00fcrece\u011fiz. ","ada34c06":"Siyaha yak\u0131n renkli olanlar bize negatif korelasyon, turuncular da pozitif korelasyon oldu\u011funu g\u00f6steriyor.","1f4cb37c":"INDEX OBJECTS AND LABELED DATA","0445f33e":"Kodu a\u00e7t\u0131\u011f\u0131m\u0131zda a\u015fa\u011f\u0131daki ekran kar\u015f\u0131m\u0131za \u00e7\u0131k\u0131yor. Bunu run etti\u011fimizde a\u015fa\u011f\u0131da dosyan\u0131n ad\u0131na ula\u015f\u0131yoruz. Dosya ad\u0131na ula\u015fmak, dosyay\u0131 import edece\u011fimiz a\u00e7amad kullanmam\u0131z i\u00e7in gerekli olacakt\u0131r.","83511938":"CLEANING DATA"}}