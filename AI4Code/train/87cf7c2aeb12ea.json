{"cell_type":{"ce6d91bf":"code","4e62df1d":"code","7015aa14":"code","2bb8a57e":"code","4132ae73":"code","a35ede2d":"code","f4bc9ceb":"code","e14a7875":"code","83d865f5":"code","23513c89":"code","413cc5b8":"code","f8dcaea3":"code","67f00c4b":"code","a8ce2d1e":"code","098f233a":"code","29204a10":"code","55257f8a":"code","24b97f44":"code","05d323e3":"code","e7c093fd":"code","8d03f8c4":"code","274221b5":"markdown","325c1933":"markdown","1f2f4eae":"markdown","7e418412":"markdown"},"source":{"ce6d91bf":"!pip install plotly","4e62df1d":"#Helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #Viz\nimport seaborn as sns #Viz\nimport plotly.express as px #Viz\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7015aa14":"df = pd.read_excel('\/kaggle\/input\/productos-consumo-masivo\/output - Kaggle.xlsx', decimal=',')\n# Se muestran los primeros 3 valores\ndf.head(3)","2bb8a57e":"df_clean = df[['prod_id','prod_brand', 'tags', 'prod_unit_price']]\ndf_clean.head(3)","4132ae73":"#Agrupamos nuestra tabla anterior por el prod_id. Buscamos tener para cada producto:\n# prod_id: Identificador del producto en la base de datos\n# NumVentasPorProducto: Veces que se vendi\u00f3 ese producto\n# VentasTotalesPorProducto = Sumatoria total de las ventas de ese producto\n# PrecioPromedioPorProducto = Promedio del precio de ese producto a lo largo del tiempo (Es v\u00e1lido porque solo es 1 a\u00f1o)\n# Tags: sector comercial al que pertenece el producto\n# Brand: nombre de la marca comercial que fabric\u00f3 el producto\n\nNumVentasPorProducto = df_clean.groupby(['prod_id'])[['prod_unit_price']].count()\nVentasTotalesPorProducto = df_clean.groupby(['prod_id'])[['prod_unit_price']].sum()\nPrecioPromedioPorProducto = df_clean.groupby(['prod_id'])[['prod_unit_price']].mean()\ntags = df_clean.groupby(['prod_id'])[['tags']].first()\nprod_brand = df_clean.groupby(['prod_id'])[['prod_brand']].first()\nNumVentasPorProducto.columns = ['NumVentasPorProducto']\nVentasTotalesPorProducto.columns = ['VentasTotalesPorProducto']\nPrecioPromedioPorProducto.columns = ['PrecioPromedioPorProducto']\ntags.columns = ['tags']\nprod_brand.columns = ['prod_brand']\n\n# Ahora unimos todos estos vectores en un data frame, uniendolos a trav\u00e9s del prod_id\ndf_compl = prod_brand.merge(tags,left_on='prod_id', right_on='prod_id')\ndf_compl = df_compl.merge(PrecioPromedioPorProducto,left_on='prod_id', right_on='prod_id')\ndf_compl = df_compl.merge(VentasTotalesPorProducto,left_on='prod_id', right_on='prod_id')\ndf_compl = df_compl.merge(NumVentasPorProducto,left_on='prod_id', right_on='prod_id')\ndf_compl.head(3)\n","a35ede2d":"#Agrupamos df_compl por prod_brand. Buscamos tener para cada prod_brand o Marca tener:\n# prod_brand: nombre de la marca comercial que fabric\u00f3 el producto\n# PorMarca_PrecioProductos: precio promedio de los productos que ofrece la Marca\n# PorMarca_Total_NumProductos: # productos distintos que ofrece cada marca\n# PorMarca_Total_DiversificacionPrecios: desv_est de cada producto distinto (Su promedio) respecto del promedio de los productos de la marca\n# PorMarca_Total_NumVentas: # total de ventas por cada marca. Sumatoria del n\u00famero de ventas de todos los productos de la marca\n# PorMarca_Total_ValorVentas: valor total de todas las ventas dentro de cada sector comercial. Sumatoria del valor de todas las ventas en el sector\n\nPorMarca_Total_NumProductos = df_compl.groupby(['prod_brand'])[['PrecioPromedioPorProducto']].count()\nPorMarca_Total_DiversificacionPrecios = df_compl.groupby(['prod_brand'])[['PrecioPromedioPorProducto']].std()\nPorMarca_Total_NumVentas = df_compl.groupby(['prod_brand'])[['NumVentasPorProducto']].sum()\nPorMarca_Total_ValorVentas = df_compl.groupby(['prod_brand'])[['VentasTotalesPorProducto']].sum()\n\nPorMarca_Total_NumProductos.columns = ['PorMarca_Total_NumProductos']\nPorMarca_Total_DiversificacionPrecios.columns = ['PorMarca_Total_DiversificacionPrecios']\nPorMarca_Total_NumVentas.columns = ['PorMarca_Total_NumVentas']\nPorMarca_Total_ValorVentas.columns = ['PorMarca_Total_ValorVentas']\n\n# Ahora unimos todos estos vectores en un data frame, uniendolos a trav\u00e9s del prod_id\ndf_ByBrand = PorMarca_Total_NumProductos.merge(PorMarca_Total_DiversificacionPrecios,left_on='prod_brand', right_on='prod_brand')\ndf_ByBrand = df_ByBrand.merge(PorMarca_Total_NumVentas,left_on='prod_brand', right_on='prod_brand')\ndf_ByBrand = df_ByBrand.merge(PorMarca_Total_ValorVentas,left_on='prod_brand', right_on='prod_brand')\ndf_ByBrand.head(3)","f4bc9ceb":"#Agrupamos df_compl por prod_brand y Tags, para un posterior an\u00e1lisis\n# tags: sector comercial al que pertenece el producto\n# prod_brand: nombre de la marca comercial que fabric\u00f3 el producto\n# PrecioProductos: precio promedio de los productos para cada marca intersectada con el sector comercial\n# NumProductos: # productos distintos para cada marca intersectada con el sector comercial\n# PrecioProductos_Desviacion: desv_est de los precios respecto del promedio para cada marca intersectada con el sector comercial\n# NumVentas: # total de ventas para cada marca intersectada con el sector comercial\n# ValorVentas: valor total de todas las ventas para cada marca intersectada con el sector comercial\n\nPrecioProductos = df_compl.groupby(['prod_brand','tags'])[['PrecioPromedioPorProducto']].mean()\nNumProductos = df_compl.groupby(['prod_brand','tags'])[['PrecioPromedioPorProducto']].count()\nNumVentas = df_compl.groupby(['prod_brand','tags'])[['NumVentasPorProducto']].sum()\nValorVentas = df_compl.groupby(['prod_brand','tags'])[['VentasTotalesPorProducto']].sum()\n\nPrecioProductos.columns = ['PrecioProductos']\nNumProductos.columns = ['NumProductos']\nNumVentas.columns = ['NumVentas']\nValorVentas.columns = ['ValorVentas']\n\n# Ahora unimos todos estos vectores en un data frame, uniendolos a trav\u00e9s del prod_id\ndf_BrandAndTags = PrecioProductos.merge(NumProductos,on=['prod_brand','tags'])\ndf_BrandAndTags = df_BrandAndTags.merge(NumVentas,on=['prod_brand','tags'])\ndf_BrandAndTags = df_BrandAndTags.merge(ValorVentas,on=['prod_brand','tags'])\ndf_BrandAndTags.head(3)","e14a7875":"#Agrupamos df_BrandAndTags por prod_brand, para conseguir datos de las Marcas en el contexto de los sectores comerciales\n# prod_brand: nombre de la marca comercial que fabric\u00f3 el producto\n# Marca_NumSectoresComerciales: # Tags o sectores comerciales en los que participa una Marca\n# PorMarca_DiversificacionGananciasEntreSectores: desv_est dentro de cada marca para los ganancias totales en cada sector comercial respecto del promedio\n# PorMarca_DiversificacionProductosPorSector: desv_est dentro de cada marca para los precios por producto en cada sector comercial respecto del promedio\n# PorMarca_DiversificacionNumeroVentasPorSector: desv_est dentro de cada marca para el n\u00famero de ventas en cada sector comercial respecto del promedio\n\nPorMarca_NumSectoresComerciales = df_BrandAndTags.groupby(['prod_brand'])[['ValorVentas']].count()\nPorMarca_DiversificacionProductosPorSector = df_BrandAndTags.groupby(['prod_brand'])[['NumProductos']].std()\nPorMarca_DiversificacionNumeroVentasPorSector = df_BrandAndTags.groupby(['prod_brand'])[['NumVentas']].std()\n\nPorMarca_NumSectoresComerciales.columns = ['PorMarca_NumSectoresComerciales']\nPorMarca_DiversificacionProductosPorSector.columns = ['PorMarca_DiversificacionProductosPorSector']\nPorMarca_DiversificacionNumeroVentasPorSector.columns = ['PorMarca_DiversificacionNumeroVentasPorSector']\n\n# Ahora unimos todos estos vectores en un data frame, uniendolos a trav\u00e9s del prod_id\ndf_BrandAndTagsByBrand = PorMarca_NumSectoresComerciales.merge(PorMarca_DiversificacionProductosPorSector,on=['prod_brand'])\ndf_BrandAndTagsByBrand = df_BrandAndTagsByBrand.merge(PorMarca_DiversificacionNumeroVentasPorSector,on=['prod_brand'])\ndf_BrandAndTagsByBrand.head(3)\n","83d865f5":"#Agrupamos df_BrandAndTags por tags, para conseguir datos de los sectores comerciales en el contexto de las brands\n# tags: sector comercial al que pertenece el producto\n# PorTag_InequidadGananciasPorSector: desv_est dentro de cada sector comercial para los precios por producto por cada marca respecto del promedio\n# PorTag_DiversificacionProductosPorSector: desv_est dentro de cada sector comercial para el n\u00famero de productos por cada marca respecto del promedio\n# PorTag_DiversificacionPreciosPorSector: desv_est dentro de cada sector comercial para los precios por producto por cada marca respecto del promedio\n\nPorTag_NumMarcas = df_BrandAndTags.groupby(['tags'])[['ValorVentas']].count()\nPorTag_InequidadGananciasPorSector = df_BrandAndTags.groupby(['tags'])[['ValorVentas']].std()\nPorTag_DiversificacionProductosPorSector = df_BrandAndTags.groupby(['tags'])[['NumProductos']].std()\nPorTag_DiversificacionPreciosPorSector = df_BrandAndTags.groupby(['tags'])[['PrecioProductos']].std()\n\nPorTag_NumMarcas.columns = ['PorTag_NumMarcas']\nPorTag_InequidadGananciasPorSector.columns = ['PorTag_InequidadGananciasPorSector']\nPorTag_DiversificacionProductosPorSector.columns = ['PorTag_DiversificacionProductosPorSector']\nPorTag_DiversificacionPreciosPorSector.columns = ['PorTag_DiversificacionPreciosPorSector']\n\n# Ahora unimos todos estos vectores en un data frame, uniendolos a trav\u00e9s del prod_id\ndf_BrandAndTagsByTag = PorTag_NumMarcas.merge(PorTag_InequidadGananciasPorSector,on=['tags'])\ndf_BrandAndTagsByTag = df_BrandAndTagsByTag.merge(PorTag_DiversificacionProductosPorSector,on=['tags'])\ndf_BrandAndTagsByTag = df_BrandAndTagsByTag.merge(PorTag_DiversificacionPreciosPorSector,on=['tags'])\ndf_BrandAndTagsByTag.head(3)","23513c89":"#Ahora unimos toda la informaci\u00f3n de las marcas en el df_BrandAndTags\ndf_BrandAndTagsWithBrands = df_BrandAndTags.copy()\ndf_BrandAndTagsWithBrands = df_BrandAndTagsWithBrands.reset_index()\ndf_BrandAndTagsWithBrands = df_BrandAndTagsWithBrands.merge(df_ByBrand,on=['prod_brand'])\ndf_BrandAndTagsWithBrands = df_BrandAndTagsWithBrands.merge(df_BrandAndTagsByBrand,on=['prod_brand'])\ndf_BrandAndTagsWithBrands = df_BrandAndTagsWithBrands.fillna(0)\ndf_BrandAndTagsWithBrands.head(3)","413cc5b8":"#Ahora calculamos qu\u00e9 tanto ha invertido cada marca de su # ventas, diversidad de productos y ganancia en cada sector\nInversionEnSector_NumProductos = df_BrandAndTagsWithBrands['NumProductos'] \/ df_BrandAndTagsWithBrands['PorMarca_Total_NumProductos']\nInversionEnSector_NumVentas = df_BrandAndTagsWithBrands['NumVentas'] \/ df_BrandAndTagsWithBrands['PorMarca_Total_NumVentas']\nInversionEnSector_ValorVentas = df_BrandAndTagsWithBrands['ValorVentas'] \/ df_BrandAndTagsWithBrands['PorMarca_Total_ValorVentas']\n\n# Y posteriormente calculamos \ndf_BrandSummary = df_BrandAndTagsWithBrands.copy()\ndf_BrandSummary['PorMarca_InversionEnSector'] = (InversionEnSector_NumProductos+InversionEnSector_NumVentas+InversionEnSector_ValorVentas)\/3\ndf_BrandSummary['PorMarca_Potencia'] = df_BrandAndTagsWithBrands['PorMarca_Total_NumVentas'] * df_BrandAndTagsWithBrands['PorMarca_Total_ValorVentas']\ndf_BrandSummary['PorMarca_Diversificacion'] = df_BrandAndTagsWithBrands['PorMarca_Total_NumProductos'] * df_BrandAndTagsWithBrands['PorMarca_NumSectoresComerciales'] \ndf_BrandSummary['PorMarca_NoEspecializacion'] = (df_BrandAndTagsWithBrands['PorMarca_DiversificacionProductosPorSector'] + df_BrandAndTagsWithBrands['PorMarca_DiversificacionNumeroVentasPorSector'])\/2\ndf_BrandSummary = df_BrandSummary[['prod_brand','tags','PorMarca_InversionEnSector','PorMarca_Potencia','PorMarca_Diversificacion','PorMarca_NoEspecializacion']]\n\ndf_BrandSummary.head(3)","f8dcaea3":"# Ahora calculamos el impacto de la potencia, diversificacion y estabilidad de cada marca para cada sector\n# Ya que si una marca est\u00e1 en 10 sectores, no va a ser tan relevante su impacto en el \u00e1rea\ndf_BrandSummary_adjustedByInversion = df_BrandSummary.copy()\ndf_BrandSummary_adjustedByInversion['PorMarca_Ajustado_Potencia'] = df_BrandSummary_adjustedByInversion['PorMarca_Potencia'] * df_BrandSummary_adjustedByInversion['PorMarca_InversionEnSector']\ndf_BrandSummary_adjustedByInversion['PorMarca_Ajustado_Diversificacion'] = df_BrandSummary_adjustedByInversion['PorMarca_Diversificacion'] * df_BrandSummary_adjustedByInversion['PorMarca_InversionEnSector']\ndf_BrandSummary_adjustedByInversion['PorMarca_Ajustado_NoEspecializacion'] = df_BrandSummary_adjustedByInversion['PorMarca_NoEspecializacion'] * df_BrandSummary_adjustedByInversion['PorMarca_InversionEnSector']\ndf_BrandSummary_adjustedByInversion = df_BrandSummary_adjustedByInversion[['prod_brand','tags','PorMarca_Ajustado_Potencia','PorMarca_Ajustado_Diversificacion','PorMarca_Ajustado_NoEspecializacion']]\ndf_BrandSummary_adjustedByInversion.head(3)","67f00c4b":"\n# Y posteriormente resumimos las estadisticas de las marcas para los tags\n\nPorTag_PotenciaDeMarcas = df_BrandSummary_adjustedByInversion.groupby(['tags'])[['PorMarca_Ajustado_Potencia']].mean()\nPorTag_DiversificacionDeMarcas = df_BrandSummary_adjustedByInversion.groupby(['tags'])[['PorMarca_Ajustado_Diversificacion']].mean()\nPorTag_NoEspecializacionDeMarcas = df_BrandSummary_adjustedByInversion.groupby(['tags'])[['PorMarca_Ajustado_NoEspecializacion']].mean()\nPorTag_Variedad_PotenciaDeMarcas = df_BrandSummary_adjustedByInversion.groupby(['tags'])[['PorMarca_Ajustado_Potencia']].std()\nPorTag_Variedad_DiversificacionDeMarcas = df_BrandSummary_adjustedByInversion.groupby(['tags'])[['PorMarca_Ajustado_Diversificacion']].std()\nPorTag_Variedad_NoEspecializacionDeMarcas = df_BrandSummary_adjustedByInversion.groupby(['tags'])[['PorMarca_Ajustado_NoEspecializacion']].std()\n\nPorTag_PotenciaDeMarcas.columns = ['PorTag_PotenciaDeMarcas']\nPorTag_DiversificacionDeMarcas.columns = ['PorTag_DiversificacionDeMarcas']\nPorTag_NoEspecializacionDeMarcas.columns = ['PorTag_NoEspecializacionDeMarcas']\nPorTag_Variedad_PotenciaDeMarcas.columns = ['PorTag_Variedad_PotenciaDeMarcas']\nPorTag_Variedad_DiversificacionDeMarcas.columns = ['PorTag_Variedad_DiversificacionDeMarcas']\nPorTag_Variedad_NoEspecializacionDeMarcas.columns = ['PorTag_Variedad_NoEspecializacionDeMarcas']\n\n# Ahora unimos todos estos vectores en un data frame, uniendolos a trav\u00e9s del prod_id\ndf_BrandStatsByTag = PorTag_PotenciaDeMarcas.merge(PorTag_DiversificacionDeMarcas,on=['tags'])\ndf_BrandStatsByTag = df_BrandStatsByTag.merge(PorTag_NoEspecializacionDeMarcas,on=['tags'])\ndf_BrandStatsByTag = df_BrandStatsByTag.merge(PorTag_Variedad_PotenciaDeMarcas,on=['tags'])\ndf_BrandStatsByTag = df_BrandStatsByTag.merge(PorTag_Variedad_DiversificacionDeMarcas,on=['tags'])\ndf_BrandStatsByTag = df_BrandStatsByTag.merge(PorTag_Variedad_NoEspecializacionDeMarcas,on=['tags'])\ndf_BrandStatsByTag = df_BrandStatsByTag.fillna(0)\ndf_BrandStatsByTag.head(3)","a8ce2d1e":"#Agrupamos df_compl por Tags. Buscamos tener para cada tag o sector comercial tener:\n# tags: sector comercial al que pertenece el producto\n# PorTag_PrecioProductos: precio promedio de los productos dentro de cada sector comercial\n# PorTag_NumProductos: # productos distintos dentro de cada sector comercial\n# PorTag_PrecioProductos_Desviacion: desv_est de cada producto distinto (Su promedio) respecto del promedio de los productos en el sector comercial\n# PorTag_NumVentas: # total de ventas dentro de cada sector comercial. Sumatoria del n\u00famero de ventas de todos los productos en el sector\n# PorTag_ValorVentas: valor total de todas las ventas dentro de cada sector comercial. Sumatoria del valor de todas las ventas en el sector\n\nPorTag_PrecioProductos = df_compl.groupby(['tags'])[['PrecioPromedioPorProducto']].mean()\nPorTag_NumProductos = df_compl.groupby(['tags'])[['PrecioPromedioPorProducto']].count()\nPorTag_DiversificacionPrecios = df_compl.groupby(['tags'])[['PrecioPromedioPorProducto']].std()\nPorTag_NumVentas = df_compl.groupby(['tags'])[['NumVentasPorProducto']].sum()\nPorTag_ValorVentas = df_compl.groupby(['tags'])[['VentasTotalesPorProducto']].sum()\n\nPorTag_PrecioProductos.columns = ['PorTag_PrecioProductos']\nPorTag_NumProductos.columns = ['PorTag_NumProductos']\nPorTag_DiversificacionPrecios.columns = ['PorTag_DiversificacionPrecios']\nPorTag_NumVentas.columns = ['PorTag_NumVentas']\nPorTag_ValorVentas.columns = ['PorTag_ValorVentas']\n\n# Ahora unimos todos estos vectores en un data frame, uniendolos a trav\u00e9s del prod_id\ndf_Bytags = PorTag_PrecioProductos.merge(PorTag_NumProductos,left_on='tags', right_on='tags')\ndf_Bytags = df_Bytags.merge(PorTag_DiversificacionPrecios,left_on='tags', right_on='tags')\ndf_Bytags = df_Bytags.merge(PorTag_NumVentas,left_on='tags', right_on='tags')\ndf_Bytags = df_Bytags.merge(PorTag_ValorVentas,left_on='tags', right_on='tags')\ndf_Bytags.head(3)","098f233a":"# Ahora unimos las estad\u00edsticas de cada tag junto con las estad\u00edsticas de las marcas, por tag\ndf_BytagsWithBrandStats = df_Bytags.merge(df_BrandStatsByTag,left_on='tags', right_on='tags')\ndf_BytagsWithBrandStats.head(3)","29204a10":"#Aqu\u00ed calculamos las variables que vamos a presentar finalmente\ndf_finalTagStats = df_BytagsWithBrandStats.copy()\ndf_finalTagStats['BajoCostoEntradaMercado'] = 1\/(df_finalTagStats['PorTag_PrecioProductos']-(df_finalTagStats['PorTag_DiversificacionPrecios']\/2))\ndf_finalTagStats['FacilidadVenta'] = df_finalTagStats['PorTag_NumVentas']\ndf_finalTagStats['FlujoDinero'] = df_finalTagStats['PorTag_ValorVentas']\ndf_finalTagStats['DebilidadMarcasRivales'] = 1\/(df_finalTagStats['PorTag_PotenciaDeMarcas']+1)\ndf_finalTagStats['MercadoNoEspecializado'] = df_finalTagStats['PorTag_NoEspecializacionDeMarcas']+df_finalTagStats['PorTag_Variedad_DiversificacionDeMarcas']\ndf_finalTagStats = df_finalTagStats[['BajoCostoEntradaMercado','FacilidadVenta','FlujoDinero','DebilidadMarcasRivales','MercadoNoEspecializado']]\ndf_finalTagStats.head(3)","55257f8a":"#Definimos la formula para normalizar\ndef NormalizeData(data):\n    return (data - np.min(data)) \/ (np.max(data) - np.min(data))","24b97f44":"# Normalizaci\u00f3n y pesos de los atributos\nPeso_BajoCostoEntradaMercado = 3 #Es muy importante que los productos no sean tan caros que se necesite ser millonario para entrar\nPeso_FacilidadVenta = 1\nPeso_FlujoDinero = 2 # Tiene que ser f\u00e1cil ganar dinero\nPeso_DebilidadMarcasRivales = 1\nPeso_MercadoNoEspecializado = 3 #Si el mercado es muy especializado, al punto que las marcas solo tienen esa l\u00ednea de productos,\n                                #Como en la fabricaci\u00f3n de vino. Es muy dif\u00edcil entrar al mercado y habr\u00e1n regulaciones estrictas\n\ndf_finalTagStats_norm = df_finalTagStats.copy()\ndf_finalTagStats_norm['BajoCostoEntradaMercado'] =  NormalizeData(df_finalTagStats_norm['BajoCostoEntradaMercado']**Peso_BajoCostoEntradaMercado)\ndf_finalTagStats_norm['FacilidadVenta'] = NormalizeData(df_finalTagStats_norm['FacilidadVenta']**Peso_FacilidadVenta)\ndf_finalTagStats_norm['FlujoDinero'] = NormalizeData(df_finalTagStats_norm['FlujoDinero']**Peso_FlujoDinero)\ndf_finalTagStats_norm['DebilidadMarcasRivales'] = NormalizeData(df_finalTagStats_norm['DebilidadMarcasRivales']**Peso_DebilidadMarcasRivales)\ndf_finalTagStats_norm['MercadoNoEspecializado'] = NormalizeData(df_finalTagStats_norm['MercadoNoEspecializado']**Peso_MercadoNoEspecializado)\ndf_finalTagStats_norm.head(3)","05d323e3":"#Calculo final\ndf_finalTagStats_norm['Clasificador de mejor inversi\u00f3n'] = df_finalTagStats_norm['BajoCostoEntradaMercado'] * df_finalTagStats_norm['FacilidadVenta'] * df_finalTagStats_norm['FlujoDinero'] * df_finalTagStats_norm['DebilidadMarcasRivales'] * df_finalTagStats_norm['MercadoNoEspecializado']\ndf_finalTagStats_norm['Clasificador de mejor inversi\u00f3n'] = NormalizeData(df_finalTagStats_norm['Clasificador de mejor inversi\u00f3n'])\ndf_finalTagStats_norm=df_finalTagStats_norm.reset_index()\ndf_finalTagStats_norm['Sector Comercial'] = df_finalTagStats_norm['tags']\ndf_finalTagStats_norm = df_finalTagStats_norm.drop(['tags'],axis=1)\ndf_finalTagStats_norm=df_finalTagStats_norm.set_index('Sector Comercial')\ndf_finalTagStats_norm = df_finalTagStats_norm.sort_values(['Clasificador de mejor inversi\u00f3n'], ascending = (False))\ndf_result = df_finalTagStats_norm.head(20)\n\ndf_result","e7c093fd":"from matplotlib import cm\nimport matplotlib.colors as colors\ndef truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):\n    new_cmap = colors.LinearSegmentedColormap.from_list(\n    'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),\n    cmap(np.linspace(minval, maxval, n)))\n    return new_cmap  \n\ncmap = plt.get_cmap('Blues')\nnew_cmap = truncate_colormap(cmap, 0.3, 0.9)\n\ndf_result[['BajoCostoEntradaMercado','FacilidadVenta','FlujoDinero','DebilidadMarcasRivales','MercadoNoEspecializado']].plot(kind='bar', stacked=True, cmap=new_cmap,title ='Los 20 mejores sectores para emprender').set_ylabel('Sumatoria de scores')\ndf_result['Clasificador de mejor inversi\u00f3n'].plot(secondary_y=True, legend =True,color='red', rot =90).set_ylabel('Score geom\u00e9trico ponderado\\n(Clasificador de inversi\u00f3n)')","8d03f8c4":"[]","274221b5":"## Librerias","325c1933":"# Objetivo\n\nEl an\u00e1lisis exploratorio hace referencia al proceso investigar, descubrir patrones, anomal\u00edas, probar hip\u00f3tesis y comprobar supuestos con la ayuda de la estad\u00edstica y visualizaciones. Este es un proceso iterativo basado en el ensayo y error. Es este notebook se mostrar\u00e1 el esquema l\u00f3gico de un an\u00e1lisis exploratorio y unas conclusiones sobre uno de los muchos enfoques que tiene este conjunto de datos. ","1f2f4eae":"## An\u00e1lisis Exploratorio","7e418412":"> El primer paso es identificar el tama\u00f1o de la base de datos y como lucen dichos datos, cuantos puntos de informaci\u00f3n tiene, cuantas variables.Esto nos da un panorama general de los datos y su dimensi\u00f3n, pero adem\u00e1s es un criterio fundamental con el fin de conocer la confiabilidad de las conclusiones. "}}