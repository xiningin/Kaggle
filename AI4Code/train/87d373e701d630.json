{"cell_type":{"47ff34ba":"code","e77e2a7c":"code","235fec17":"code","867ed64b":"code","eb763dd4":"code","8dfe8501":"code","e1163534":"code","28b55ab5":"code","e976c169":"code","b9f9f4f1":"code","59368f2c":"code","dbde1663":"code","f107de2e":"code","c14894b1":"code","d0e59aa8":"code","f30511d8":"code","3f3b3b8b":"code","050577c5":"code","1f0d059d":"code","fd379814":"code","b3edfd01":"code","c4474e31":"code","fb76563a":"markdown","d496f7d9":"markdown","020e290b":"markdown","fc1d4e8b":"markdown","ce6db0c5":"markdown","924b5ebb":"markdown","8dfba49e":"markdown","45e64554":"markdown","2cd523f3":"markdown","97dad9e3":"markdown","1fda0cc8":"markdown","0ae9b1a1":"markdown","c9f4342d":"markdown","c203b91f":"markdown","53649049":"markdown"},"source":{"47ff34ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e77e2a7c":"!pip install xlrd\n!pip install openpyxl\n!pip install lifetimes\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport datetime as dt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.2f' % x)","235fec17":"# Read the 2010-2011 data in the OnlineRetail II excel. Make a copy of the data frame you created.\n\ndf = pd.read_excel(\"\/kaggle\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\ndf_copy = df.copy()\ndf.head()","867ed64b":"#Checking Variables\n\ndef check_df(dataframe):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(3))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(3))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\ncheck_df(df)","eb763dd4":"df.describe([0.01,0.25,0.50,0.75,0.99]).T","8dfe8501":"# There is no specific correlation between missing values\n\nmsno.heatmap(df)","e1163534":"sns.boxplot(df[\"Quantity\"]);","28b55ab5":"sns.boxplot(df[\"Price\"]);","e976c169":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","b9f9f4f1":"replace_with_thresholds(df,\"Quantity\")\nreplace_with_thresholds(df,\"Price\")","59368f2c":"# outliers values are now cleaner.\n\ndf.describe([0.01,0.25,0.50,0.75,0.99]).T","dbde1663":"def data_prep(dataframe):\n    dataframe.dropna(axis=0, inplace=True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe[\"TotalPrice\"] = dataframe[\"Quantity\"] * dataframe[\"Price\"]\n    return dataframe","f107de2e":"df= data_prep(df)\ncheck_df(df)","c14894b1":"sns.boxplot(df[\"Quantity\"])","d0e59aa8":"sns.boxplot(df[\"Price\"]);","f30511d8":"df[\"InvoiceDate\"].max()\ntoday_date = dt.datetime(2011, 12, 11)\n\n# recency\n# frequency\n# monetary\n\nrfm = df.groupby(\"Customer ID\").agg({\"InvoiceDate\": lambda x: (today_date - x.max()).days,\n                               \"Invoice\": lambda x: x.nunique(),\n                               \"TotalPrice\": lambda x: x.sum()})\n\nrfm.columns = [\"recency\", \"frequency\", \"monetary\"]\n\nrfm = rfm[rfm[\"monetary\"] > 0]\nrfm.head()","3f3b3b8b":"rfm[\"recency_score\"] = pd.qcut(rfm['recency'], 5, labels=[5, 4, 3, 2, 1])\n\nrfm[\"frequency_score\"] = pd.qcut(rfm['frequency'].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\n\nrfm[\"monetary_score\"] = pd.qcut(rfm['monetary'], 5, labels=[1, 2, 3, 4, 5])\n","050577c5":"rfm[\"RFM_SCORE\"] = (rfm['recency_score'].astype(str) +\n                    rfm['frequency_score'].astype(str))","1f0d059d":"seg_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at_Risk',\n    r'[1-2]5': 'cant_loose',\n    r'3[1-2]': 'about_to_sleep',\n    r'33': 'need_attention',\n    r'[3-4][4-5]': 'loyal_customers',\n    r'41': 'promising',\n    r'51': 'new_customers',\n    r'[4-5][2-3]': 'potential_loyalists',\n    r'5[4-5]': 'champions'\n}\n\n\nrfm['segment'] = rfm['RFM_SCORE'].replace(seg_map, regex=True)\n\nrfm[[\"segment\", \"recency\", \"frequency\", \"monetary\"]].groupby(\"segment\").agg([\"mean\", \"count\"])\n","fd379814":"plt.figure(figsize=(15,7))\nsns.barplot(x=\"segment\", y=\"frequency\", data=rfm)","b3edfd01":"# Select the customer IDs of the Loyal Customers class and get the excel output.\n\nrfm[rfm[\"segment\"] == \"loyal_customers\"]\n\nnew_df = pd.DataFrame()\nnew_df[\"new_customer_id\"] = rfm[rfm[\"segment\"] == \"loyal_customers\"].index\nnew_df.head()","c4474e31":"new_df.to_excel(\"loyal_customers.xlsx\")","fb76563a":"# **Customer Segmentation with RFM**","d496f7d9":"In order to see the RFM values together, we defined a variable named \"RFM_SCORE\" and combined the RFM values by converting them to strings. If we tried to combine without converting, we might get an error because it would not combine the two categorical variables. (We do not include monetary_score)","020e290b":"# Creating RFM Metrics & Calculating RFM Scores","fc1d4e8b":"# Dataset and Story\n\nAn e-commerce company wants to segment its customers and determine marketing strategies according to these segments. The company believes that marketing activities specific to customer segments that exhibit common behaviors will increase revenue. For example, it is desired to organize different campaigns for new customers and different campaigns to retain very profitable customers for the company.\n\nThe dataset named Online Retail includes the sales of a UK-based online store between 01\/12\/2009-09\/12\/2011. This company's product catalog includes souvenirs. The majority of the company's customers are corporate customers.\n\n**Variables of the data set:**\n\n* InvoiceNo : The number of the invoice, unique per each purchase. Refund invoice numbers contain \"C\"\n* StockCode : Unique code per each item\n* Description : Name of the item\n* Quantity : The number of items within the invoice\n* InvoiceDate : Date and time of the purchase\n* UnitPrice : Price of a single item, as of Sterlin\n* CustomerID : Unique id number per each customer\n* Country : The country where the customer is living","ce6db0c5":"Then segments are created.\n\n**So why are we doing this?**\n\nWe look for answers to these questions;\n\n-Who is our most profitable customer? -What is it they appreciate in my products or services? -Who are my new customers? -How do I attract new customers to the company?\n\nThe answers to the questions are hidden in the segmentation.\n\nWith better RFM segmentation, we\u2019ll be able to address certain segments in a personalized manner, based on their needs and preferences.\n\nBrowse the scheme to more easily understand segmentation.\n\n![image.png](attachment:cf8c52ed-6b35-4bf3-b7ef-caa20ba0a0f3.png)","924b5ebb":"Missing values are deleted. Canceled Invoices are not received and and a new variable was created.","8dfba49e":"We segmented our RFM values with the qcut () function. The high recency value means that the customer gets away from us. For this reason, we made the labels decreasing in order to avoid confusion.","45e64554":"# What is RFM?\n\n\nRFM represents a method used for measuring customer value. An RFM analysis can show you who are the most valuable customers for your business. The ones who buy most frequently, most often, and spend the most. First of all, the metrics you have seen are calculated. \n\n![image.png](attachment:e6cbfb14-897a-47cc-842e-87eb5722e3dd.png)\n\n**Recency:** The value that indicates how much time has passed since a customer's last activity or transaction with the brand. The activity is usually a purchase, but sometimes variations are used such as the last visit to a website or the use of a mobile app.\n\n**Frequency:** How often a customer shows in a certain period of activity value. Customers who operate more often may be more loyal than others.\n\n**Monetary:** It is the value that shows how much a customer has spent in a certain period of time. Dividing the value of the spend by frequency shows us the average purchase amount.","2cd523f3":"Now we can see the customer segments that we want to focus on. For the customer segment that they want to focus on, a marketing strategy can be chosen easily.","97dad9e3":"# Naming & Analysing RFM Segments","1fda0cc8":"Outlier values are trimmed (very little) without damaging the data.Here we have set a lower and upper limit. But since the lower limit is set, we'll only assign it to the upper limit. We'll do it for Quantity and Price.","0ae9b1a1":"# Data Preprocessing","c9f4342d":"Check out descriptive statistics of numerical variables. See the difference between 75% and 99% values and then See the difference between 99% and max values. We can think that there are some outliers.","c203b91f":"# Load Dataset\n","53649049":"Variables are as follows after they are cleared of outliers values."}}