{"cell_type":{"e10a361e":"code","2a0c55b4":"code","79f7047e":"code","f00b3124":"code","974a0a62":"code","1f6d3a1a":"code","7897ec2a":"code","0620faed":"code","e169c406":"code","86a3a48b":"code","5d5ee5e2":"code","93940f0f":"code","44eff80c":"code","5c92f814":"code","3fd0c49d":"code","00152e73":"code","0fc39695":"code","de12cb51":"code","0132a4d0":"code","537cb15d":"code","ca0f3946":"code","9d7b633a":"code","d224b1ef":"code","4dae2385":"code","67740d5d":"code","5c2b37d9":"code","f45680ef":"code","42e3ce8b":"code","3b040cce":"code","18d0383d":"code","37899e4c":"code","6ea85c60":"code","cf9ad70b":"code","b611114e":"code","13c946ee":"code","a0e8bf86":"code","94142695":"code","5a648f4d":"code","1b2b492f":"markdown","8225f4bb":"markdown","11267cf1":"markdown","61599450":"markdown","71d9eb07":"markdown","e8bf813c":"markdown","ba7a3aac":"markdown","a136f9ac":"markdown","67d68a78":"markdown","ed4e6b65":"markdown","be9d5a91":"markdown","37c91b1e":"markdown","f44c276f":"markdown","1eb53557":"markdown","ad632b96":"markdown","eded3a71":"markdown","fdffc565":"markdown","45ae2290":"markdown","1969b92d":"markdown","d8f63d77":"markdown","dd9f7bf2":"markdown","730ce5c0":"markdown","2da16cf8":"markdown","c09855c8":"markdown","301646e7":"markdown","c2e26e66":"markdown","4f323f36":"markdown"},"source":{"e10a361e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a0c55b4":"df = pd.read_csv('..\/input\/real-estate\/real_estate.csv')\ndf","79f7047e":"df.info()","f00b3124":"df.describe().round(2)","974a0a62":"X = df['area']","1f6d3a1a":"y = df['price']","7897ec2a":"plt.scatter(X,y)\nplt.xlabel('Area', fontsize=15)\nplt.ylabel('Price', fontsize=15)\nplt.show()","0620faed":"sns.regplot(data=df, x=X, y=y)","e169c406":"import statsmodels.api as sm","86a3a48b":"X_stat = sm.add_constant(X)","5d5ee5e2":"reg_stat = sm.OLS(y,X_stat).fit()","93940f0f":"reg_stat.params","44eff80c":"# The linear equation\n# y = mx + b\n# price = 223.178743 * area + 101912.601801","5c92f814":"from sklearn.linear_model import LinearRegression","3fd0c49d":"X_sk = X.values.reshape(-1,1)","00152e73":"reg_sk = LinearRegression().fit(X_sk, y)","0fc39695":"reg_sk.coef_","de12cb51":"reg_sk.intercept_","0132a4d0":"# using Linear equation\n# y = mx + b\n# price = 223.178743 * area + 101912.601801","537cb15d":"reg_stat.summary()","ca0f3946":"# y = mx + b\n# price = 223.178743 * area(X_stat) + 101912.601801","9d7b633a":"# Let's substitute the values for the equation\nplt.scatter(X,y)\ny_hat = 223.178743 * X_stat + 101912.601801\nfig = plt.plot(X_stat, y_hat, c = 'r')\nplt.xlabel('Area', fontsize = 15)\nplt.ylabel('Price', fontsize = 15)\nplt.show()","d224b1ef":"reg_sk.predict([[1000]])","4dae2385":"from sklearn.model_selection import train_test_split","67740d5d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","5c2b37d9":"from sklearn.linear_model import LinearRegression","f45680ef":"reg = LinearRegression()","42e3ce8b":"reg.fit(X_train.values.reshape(-1,1), y_train)","3b040cce":"y_pred = reg.predict(X_test.values.reshape(-1,1))","18d0383d":"from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","37899e4c":"# MAE\nprint(mean_absolute_error(y_test, y_pred))","6ea85c60":"# MSE\nprint(mean_squared_error(y_test, y_pred))","cf9ad70b":"# RMSE\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","b611114e":"np.mean(y_test)","13c946ee":"np.mean(y_pred)","a0e8bf86":"# R^2\nreg_sk.score(X_train.values.reshape(-1,1), y_train)","94142695":"reg_sk.score(X_test.values.reshape(-1,1), y_test)","5a648f4d":"r2_score(y_pred,y_test)","1b2b492f":"#### Now let's try by using Scikit_Learn","8225f4bb":"Regression Metrics Demo: https:\/\/www.geogebra.org\/m\/yybenxjm","11267cf1":"#### First let's Predicting Values using random number","61599450":"Here are three common evaluation metrics for regression problems:\n\n**Mean Absolute Error** (MAE):\n$$\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|$$\n\n**Mean Squared Error** (MSE):\n$$\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2$$\n\n**Root Mean Squared Error** (RMSE):\n$$\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}$$\n\nAll of these are **loss functions**, because we want to minimize them.","71d9eb07":"### 2] Using Scikit-Learn (Machine Learning Approach)","e8bf813c":"## Libraries and tools using in this project \n\n#### 1 - Python\n#### 2 - Pandas\n#### 3 - Numpy\n#### 4 - Scikit-Learn\n#### 5 - Statsmodel (Statistical Approach)\n#### 6 - Matplotlib\n#### 7 - Seaborne","ba7a3aac":"## Please leave an upvote and comment to helps me continue my data science journy and improves my work. Thanks","a136f9ac":"# Introduction \n#### In this project i used linear regression algorithms to predict the real estate price based on area of the estate","67d68a78":"### 1] Using Statsmodel (Statistical Approach)","ed4e6b65":"#### **It show same results, Now let's building the prediction model**","be9d5a91":"#### **It show that the regression model is the best for the data**","37c91b1e":"#### **I will use two library to build this model and compare it together**","f44c276f":"### Model Prediction ","1eb53557":"### Exploring Data","ad632b96":"### 2] Using Scikit-Learn (Machine Learning Approach)","eded3a71":"It seems work good let's continue","fdffc565":"##### Evaluating Results","45ae2290":"### Splitting Data","1969b92d":"#### Model Re-Building","d8f63d77":"Scikit-learn Regression Metrics: https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html#regression-metrics","dd9f7bf2":"#### **Same like the previous we start with Statsmodel**","730ce5c0":"### Importing Libraries","2da16cf8":"### Importing Dataset","c09855c8":"### 1] Using Statsmodels (Statistical Approach)","301646e7":"### Model Building & Training","c2e26e66":"### Evaluating Results","4f323f36":"#### Splitting Data"}}