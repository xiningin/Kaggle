{"cell_type":{"3e6321d0":"code","0b75ba53":"code","7f5da35a":"code","7d622054":"code","e9ecca4c":"code","529467bc":"code","067a556c":"code","69ce5445":"code","6f87c8c1":"code","919f268b":"code","2b761815":"code","bd134520":"code","710969f5":"code","a5a69931":"code","09594b90":"code","1747f95a":"code","973adef3":"code","d84e01a7":"code","358df8e0":"code","9b426500":"code","87ef9eb4":"code","ed4ff714":"code","081d9900":"code","ddae3981":"code","f4589da9":"code","52a71714":"code","0dc68ca9":"code","1f755b47":"code","bcca1bde":"code","5021d7eb":"code","69883253":"code","dc3e0cfb":"code","ce930cdc":"code","91b380c5":"code","21bb2138":"code","a9b0c3f8":"code","828c1092":"code","68cf58de":"code","be6cf9a8":"code","8453d6a9":"code","1127ebac":"markdown","68e373e3":"markdown","fa39f153":"markdown","9db0c813":"markdown","a9607108":"markdown","9c0ee303":"markdown","537864b6":"markdown","0df54c0a":"markdown","0d9210f3":"markdown","f72bf76f":"markdown","96eec7b9":"markdown","2e373fa9":"markdown","e1f6c155":"markdown","6865bd30":"markdown","052f8700":"markdown","fd160181":"markdown","548c397b":"markdown","b9cd6899":"markdown","f90fe8e0":"markdown","048ce9ab":"markdown","d9708091":"markdown","6ed255cd":"markdown","df6d70af":"markdown","c1333fd4":"markdown","09d1c172":"markdown","c2e34ca5":"markdown","791fe48d":"markdown","109f524b":"markdown","ac32b672":"markdown","98125a32":"markdown","3c548720":"markdown","7966e658":"markdown","8917e890":"markdown","85d3bcf1":"markdown","69925b10":"markdown","a0f90ed6":"markdown","e1c447fc":"markdown","db8ba360":"markdown","fda39de6":"markdown"},"source":{"3e6321d0":"import os\nfrom typing import List\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\nfrom gensim.models import Word2Vec\n\nfrom tqdm import tqdm","0b75ba53":"train = pd.read_csv('..\/input\/data-science-winter-osaka2\/train.csv')\ntest = pd.read_csv('..\/input\/data-science-winter-osaka2\/test.csv')","7f5da35a":"train.head(10)","7d622054":"type(train['popular_tags'][0])","e9ecca4c":"def eval_data(row):\n    if row == row:\n        return eval(row)\n    else:\n        return np.nan\n\nfor column in ['popular_tags', 'categories', 'minimum_requirements', 'recommended_requirements']:\n    train[column] = train[column].apply(eval_data)\n    test[column] = test[column].apply(eval_data)","529467bc":"type(train['popular_tags'][0]), type(train['categories'][0]), type(train['minimum_requirements'][0]), type(train['recommended_requirements'][0])","067a556c":"train.info()","69ce5445":"def eval_data(row):\n    if row == row:\n        return eval(row)\n    else:\n        return np.nan\n\nfor column in ['popular_tags', 'categories', 'minimum_requirements', 'recommended_requirements']:\n    train[column] = train[column].apply(eval_data)\n    test[column] = test[column].apply(eval_data)","6f87c8c1":"type(train['popular_tags'][0]), type(train['categories'][0]), type(train['minimum_requirements'][0]), type(train['recommended_requirements'][0])","919f268b":"train.info()","2b761815":"train['release_date'].tail(50)","bd134520":"train['description'].tolist()[0]","710969f5":"train['user_reviews'].hist()","a5a69931":"from torchvision.io import read_image\n\nfor i in range(10):\n    img = read_image(os.path.join('..\/input\/data-science-winter-osaka2\/train\/train', train['img_path'][i]))\n    print(img.shape)\n    plt.imshow(img.permute(1, 2, 0))\n    plt.show()","09594b90":"train['is_train'] = True\ntest['user_reviews'] = np.nan\ntest['is_train'] = False\n\ndf = pd.concat([train, test], axis=0)\ndf = df.reset_index(drop=True)","1747f95a":"def category_numeric_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    # \u30bf\u30b0\u306e\u6570\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df['popular_tags_len'] = df['popular_tags'].fillna(\"\").apply(len)\n    df['categories_len'] = df['categories'].fillna(\"\").apply(len)\n    \n    # \u5024\u6bb5\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df = price_preprocess(df)\n    \n    # developer\u3068publisher\u3092label encode\u3059\u308b\u3002\n    for column in ['developer', 'publisher']:\n        df = apply_label_encode(df, column)\n    \n    # \u5e74\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    # \u6b63\u898f\u8868\u73fe\u3067\u5e74\u3092\u62bd\u51fa\u3059\u308b\u3002\n    df['year'] = df['release_date'].str.extract(r'(\\d{4})')\n    df['year'] = df['year'].astype(float)\n    return df\n\ndef price_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    df['price'] = df['price'].replace({'free':0})\n    price_null_index = df[df['price']==''].index\n    df.loc[price_null_index, 'price'] = -1\n    df['price'] = df['price'].astype(float)\n    return df\n\ndef apply_label_encode(df:pd.DataFrame, column:str)-> pd.DataFrame:\n    label_df = df[~df[column].isnull()]\n    le = LabelEncoder()\n    le_data = le.fit_transform(label_df[column])\n    label_df_index = label_df.index\n    df.loc[label_df_index, f'{column}_label_encoding'] = le_data\n    return df","973adef3":"df = category_numeric_preprocess(df)","d84e01a7":"def tfidf_preprocess(df: pd.DataFrame, column: str, embedding_dim: int=20)-> pd.DataFrame:\n    # tfidf\u3067\u5909\u63db\u3057\u305f\u5f8c\u306b\u3001SVD\u3067\u6642\u9650\u524a\u6e1b\u3059\u308b\u3002\n    tfidf_vec = TfidfVectorizer(ngram_range=(1,2))\n    text_tfidf = tfidf_vec.fit_transform(df[column].fillna('').values.tolist())\n    svd = TruncatedSVD(n_components=embedding_dim, algorithm='arpack',random_state=9999)\n    return svd.fit_transform(text_tfidf)\n\nclass W2VSWEM(object):\n    def __init__(self, word_list: List[str], embedding_dim:int=20):\n        # word2vec\u3067\u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u3001wrod2vec\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b\u3002\n        self.word_list = word_list\n        self.embedding_dim = embedding_dim\n        self.__validation_type()\n        self.__train_w2v()\n        \n    def __validation_type(self):\n        if isinstance(self.word_list, pd.Series):\n            self.word_list = self.word_list.tolist()\n        if not isinstance(self.word_list, list):\n            raise TypeError(f'you should use list object, however you are using {type(word_list)}.')\n        \n    def __train_w2v(self):\n        self.w2v_model = Word2Vec(self.word_list, vector_size=self.embedding_dim)\n        self.vocab = self.w2v_model.wv.key_to_index\n        \n    def _get_single_column_vec(self, words) -> np.array:\n        result = []\n        \n        for word in words:\n            if word in self.vocab:\n                \n                vector = self.w2v_model.wv[word]\n                result.append(vector)\n        result = np.array(result)\n        return result\n    \n    def get_result(self):\n        self.swem_result = np.zeros([len(self.word_list), self.embedding_dim])\n        for num, i in enumerate(self.word_list):\n            swem = self._get_single_column_vec(i)\n            if len(swem):\n                swem = np.mean(swem, axis=0)\n            else:\n                swem = np.zeros(self.embedding_dim)\n            self.swem_result[num, :] = swem    ","358df8e0":"# word2vec\u3067tags\u3092encode\u3059\u308b\ntags_df = []\nfor column in ['categories', 'popular_tags']:\n    df[column] = df[column].fillna('')\n    w2v_swem = W2VSWEM(df[column].tolist())\n    w2v_swem.get_result()\n    result = w2v_swem.swem_result\n    _df = pd.DataFrame(result, columns=[f'w2v_{column}_{x}' for x in range(result.shape[1])])\n    tags_df.append(_df)\ntags_df = pd.concat(tags_df, axis=1)","9b426500":"# \u30b2\u30fc\u30e0\u306e\u8aac\u660e\u3092tfidf\u3067\u7279\u5fb4\u91cf\u306b\u3059\u308b\ntext_svd = tfidf_preprocess(df, 'description')\ntext_svd_df = pd.DataFrame(text_svd, columns=[f'text_svd_{x}' for x in range(text_svd.shape[1])])","87ef9eb4":"nlp_df = pd.concat([tags_df, text_svd_df], axis=1)","ed4ff714":"use_df = df.copy()\nuse_columns = ['name', 'price', 'popular_tags_len', 'categories_len', 'year', 'developer_label_encoding', 'publisher_label_encoding', 'user_reviews', 'is_train']\nuse_df = use_df[use_columns]\n","081d9900":"use_df = pd.concat([use_df, nlp_df], axis=1)","ddae3981":"#Groupby\u3067\u96c6\u7d04\u306e\u5143\u306b\u306a\u308b'year'\u30ab\u30e9\u30e0\u3092\u30ab\u30c6\u30b4\u30ea\u5909\u6570\uff08str\uff09\u306b\u3059\u308b\u3002\u6570\u5024\u5909\u6570\uff08float\uff09\u306e\u307e\u307e\u3060\u3068\u3067\u304d\u306a\u3044\n\nuse_df['year_str'] = use_df['year'].astype(object)","f4589da9":"#'year_str'\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001Drop\u3057\u3066\u304a\u304d\u307e\u3059\nuse_df = use_df.drop(columns=['year_str'])","52a71714":"#\u4e00\u756a\u53f3\u306b\u3001'YearPriceMean'\u306e\u30ab\u30e9\u30e0\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\nuse_df.head(5)","0dc68ca9":"train = use_df[use_df['is_train']==True].reset_index(drop=True)\ntest =  use_df[use_df['is_train']!=True].reset_index(drop=True)","1f755b47":"train = train.drop(columns=['is_train'])\ntest = test.drop(columns=['is_train', 'user_reviews'])","bcca1bde":"train.shape, test.shape","5021d7eb":"X = train.copy().drop(columns='user_reviews')\ny = train['user_reviews']","69883253":"y = y.map({'c0':0, 'c1':1, 'c2':2})","dc3e0cfb":"from typing import Optional, List\n\nimport lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\n\nclass TreeModel:\n    \"\"\"LGB\/XGB\u306eAPI\u3092\u7d71\u4e00\u3057\u305fwrapper\"\"\"\n\n    def __init__(self, model_type: str):\n        self.model_type = model_type\n        self.trn_data = None\n        self.val_data = None\n        self.model = None\n\n    def train(self,\n              params: dict,\n              X_train: pd.DataFrame,\n              y_train: np.ndarray,\n              X_val: pd.DataFrame,\n              y_val: np.ndarray,\n              train_weight: Optional[np.ndarray] = None,\n              val_weight: Optional[np.ndarray] = None,\n              train_params: dict = {}):\n        if self.model_type == \"lgb\":\n            self.trn_data = lgb.Dataset(X_train, label=y_train, weight=train_weight)\n            self.val_data = lgb.Dataset(X_val, label=y_val, weight=val_weight)\n            self.model = lgb.train(params=params,\n                                   train_set=self.trn_data,\n                                   valid_sets=[self.trn_data, self.val_data],\n                                   **train_params)\n        elif self.model_type == \"xgb\":\n            self.trn_data = xgb.DMatrix(X_train, y_train, weight=train_weight, enable_categorical=True)\n            self.val_data = xgb.DMatrix(X_val, y_val, weight=val_weight, enable_categorical=True)\n            self.model = xgb.train(params=params,\n                                   dtrain=self.trn_data,\n                                   evals=[(self.trn_data, \"train\"), (self.val_data, \"val\")],\n                                   **train_params)\n        else:\n            raise NotImplementedError\n        return self.model\n\n    def predict(self, X: pd.DataFrame):\n        if self.model_type == \"lgb\":\n            return self.model.predict(X, num_iteration=self.model.best_iteration)  # type: ignore\n        elif self.model_type == \"xgb\":\n            X_DM = xgb.DMatrix(X)\n            return self.model.predict(X_DM)  # type: ignore\n        else:\n            raise NotImplementedError\n\n    @property\n    def feature_names_(self):\n        if self.model_type == \"lgb\":\n            return self.model.feature_name()\n        elif self.model_type == \"xgb\":\n            return list(self.model.get_score(importance_type=\"gain\").keys())\n        else:\n            raise NotImplementedError\n\n    @property\n    def feature_importances_(self):\n        if self.model_type == \"lgb\":\n            return self.model.feature_importance(importance_type=\"gain\")\n        elif self.model_type == \"xgb\":\n            return list(self.model.get_score(importance_type=\"gain\").values())\n        else:\n            raise NotImplementedError","ce930cdc":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\n\n\n\nfeature_importances = pd.DataFrame()\nscores=0.0\nnum_fold=5\noof = pd.DataFrame()\n    \nskf = StratifiedKFold(n_splits=num_fold, random_state=1213, shuffle=True)\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(\"*\" * 100)\n    print(f\"Fold: {fold}\")\n\n    X_trn = X.iloc[trn_idx].drop(columns='name')\n    X_val = X.iloc[val_idx].drop(columns='name')\n    y_trn = y.iloc[trn_idx].reset_index(drop=True)\n    y_val = y.iloc[val_idx].reset_index(drop=True)\n        \n\n    model = TreeModel(model_type='lgb')\n    params = {\n                \"objective\": \"softmax\",\n                \"boosting\": \"gbdt\",\n                \"num_class\":3,\n                \"learning_rate\": 0.1,\n                \"seed\": 1213,\n                'metric': 'multi_logloss',\n                'num_leaves': 5,\n                'verbose': 1,\n                'lambda_l2': 3,\n            }\n    model.train(params=params,\n                X_train=X_trn,\n                y_train=y_trn.values.astype('float32'),\n                X_val=X_val,\n                y_val=y_val.values.astype('float32'),\n                train_params={\n                                \"num_boost_round\": 20000,\n                                \"early_stopping_rounds\": 100,\n                                \"verbose_eval\": 1000,\n                })\n    fi_tmp = pd.DataFrame()\n    fi_tmp[\"feature\"] = model.feature_names_\n    fi_tmp[\"importance\"] = model.feature_importances_\n    fi_tmp[\"fold\"] = fold\n    feature_importances = feature_importances.append(fi_tmp)\n\n    val_pred = model.predict(X_val)\n    score = log_loss(y_val, val_pred)\n    scores += score \/ num_fold\n\n    pred = model.predict(test.drop(columns='name'))\n    if fold == 0:\n        prediction = np.copy(pred) \/ num_fold\n    else:\n        prediction += pred \/ num_fold\n    print(f\"score: {score:.5f}\")\n    oof = oof.append(pd.DataFrame({\"name\": X.loc[val_idx, \"name\"], \"preds_c0\": val_pred[:, 0], \n                                   \"preds_c1\": val_pred[:, 1],\"preds_c2\": val_pred[:, 2]}))\nprint(f'average_score: {scores:.5f}')","91b380c5":"oof['prediction'] = np.argmax(np.array(oof.iloc[:, 1:]), axis=1)","21bb2138":"from sklearn.metrics import accuracy_score\naccuracy_score(y, oof.sort_index()['prediction'])","a9b0c3f8":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n\norder = list(feature_importances.groupby(\"feature\").mean().sort_values(\"importance\", ascending=False).index)\nplt.figure(figsize=(10, 30))\nsns.barplot(x=\"importance\", y=\"feature\", data=feature_importances, order=order)\nplt.title(f\"LGBM importance, average auc score {score}\")\nplt.tight_layout()","828c1092":"test_prediction = np.argmax(prediction, axis=1)\npred_df = pd.DataFrame(test_prediction)\npred_df = pred_df[0].map({0:'c0', 1:'c1', 2:'c2'})","68cf58de":"pred_df","be6cf9a8":"sub = pd.read_csv('..\/input\/data-science-winter-osaka2\/sample_submission.csv')\nsub['user_reviews'] = pred_df.tolist()\nsub","8453d6a9":"sub.to_csv('submission.csv', index=False)","1127ebac":"Target encodeing\u3092\u3057\u306a\u3044\u306e\u3067\u3001dataframe\u3092\u7d50\u5408\u3057\u3066\u524d\u51e6\u7406\u3092\u3057\u307e\u3059\u3002","68e373e3":"0\u304c\u30dd\u30b8\u30c6\u30a3\u30d6\u3001\uff11\u304c\u30cd\u30ac\u30c6\u30a3\u30d6\u30012\u304c\u30ec\u30d3\u30e5\u30fc\u306a\u3057\u306a\u306e\u3067\u3001\u30ec\u30d3\u30e5\u30fc\u304c\u306a\u3044\u306e\u304c\u6700\u3082\u591a\u3088\u3046\u3067\u3059\u3002<br>\n\u753b\u50cf\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","fa39f153":"# \uff15\uff0e\u6a5f\u68b0\u5b66\u7fd2\u3000\u3000\u3000\n\u4eca\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306flightGBM\u3068xgboost\u3068\u3044\u3046\u6c7a\u5b9a\u6728\u3092\u7d44\u307f\u5408\u305b\u305f\u624b\u6cd5\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\n\u5b66\u7fd2\u3055\u305b\u308b","9db0c813":"description\u3082\u898b\u3066\u307f\u307e\u3059","a9607108":"## \u30e2\u30c7\u30eb\u4f5c\u6210\naccuracy\u304cmetric\u3067\u3059\u304c\u3001\u4e88\u6e2c\u78ba\u7387\u3092\u51fa\u3057\u30665 fold\u306e\u5e73\u5747\u3092\u53d6\u308a\u305f\u3044\u306e\u3067\u3001log_loss\u3067\u30e2\u30c7\u30eb\u3092\u4e00\u5ea6\u4f5c\u6210\u3057\u307e\u3059\u3002","9c0ee303":"df","537864b6":"# \uff13\uff0e\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u78ba\u8a8d\u3000\n\u521d\u53c2\u52a0\u306e\u65b9\u5411\u3051\u306e\u4e8b\u524d\u8aac\u660e\u4f1a\u306e\u4f8b\u3067\u8a00\u3046\u3068train\u30c7\u30fc\u30bf\uff081\u5e741\u7d44\u306e\u751f\u5f92\u306e\u30c7\u30fc\u30bf\uff09\u30fbtest\u30c7\u30fc\u30bf\uff081\u5e742\u7d44\u306e\u30c7\u30fc\u30bf\uff09\u30fb\u753b\u50cf\uff08\u89aa\u306e\u5199\u771f\uff09","0df54c0a":"\u4ed6\u306b\u3082\u3001developer, publisher\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3001price\u306f\u6570\u5024\u5909\u6570\u3001popular_tags, categories\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u3053\u308c\u3089\u306e\u524d\u51e6\u7406\u3092\u3053\u306enotebook\u3067\u306f\u884c\u3044\u307e\u3059\u3002","0d9210f3":"call of duty\u306e\u8aac\u660e\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u8aac\u660e\u306e\u6587\u5b57\u5217\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001NLP\u306e\u524d\u51e6\u7406\u304c\u9069\u5fdc\u3067\u304d\u305d\u3046\u3067\u3059\u3002","f72bf76f":"## \u2605\u3053\u3053\u307e\u3067","96eec7b9":"# \uff11\uff0e\u8a2d\u5b9a\u3000\u3053\u306e\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u547c\u3073\u51fa\u3057","2e373fa9":"#\u3053\u3061\u3089\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3067\u30de\u30fc\u30af\u30c0\u30a6\u30f3\u21d2\u30b3\u30fc\u30c9\u306b\u5909\u66f4\u3059\u308b\n#Year\u6bce\u306e\u5e73\u5747\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\n#'mean'\u306e\u6240\u3092\u5909\u66f4\u3059\u308b\u3068\u69d8\u3005\u306a\u7279\u5fb4\u91cf\u306e\u96c6\u7d04\u30ab\u30e9\u30e0\u3092\u4f5c\u308c\u307e\u3059\u3002\u8907\u6570\u306e\u7279\u5fb4\u91cf\u304c\u8ffd\u52a0\u3067\u304d\u307e\u3059\n#'median'\u306f\u30e1\u30c7\u30a3\u30a2\u30f3\u3001'max'\u306f\u6700\u5927\u3001'min'\u306f\u6700\u5c0f\u3001'sum'\u306f\u5408\u8a08\u3001'std'\u306f\u6a19\u6e96\u504f\u5dee\u3001'var'\u306f\u5206\u6563\u3067\u3059\n\nuse_df['YearPriceMean'] = use_df.groupby(\"year_str\")[\"price\"].transform('mean')","e1f6c155":"groupby\u3067\u306f\u3042\u308b\u96c6\u7d04\u5143\u5909\u6570\u3067\u306e\u7d71\u8a08\u91cf\u3092\u7b97\u51fa\u3067\u304d\u307e\u3059\n\u4f8b\u3048\u3070\u3001\u8ca9\u58f2\u5e74\u6bce\u306e\u5e73\u5747\u4fa1\u683c\u3092\u7b97\u51fa\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u66f8\u304d\u307e\u3057\u305f\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u5143\u306b\u6570\u5024\u30c7\u30fc\u30bf\u306e\u96c6\u7d04\u5909\u6570\u3092\u7b97\u51fa\u3057\u305f\u3044\u5834\u5408\u306f\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u3059","6865bd30":"## \u8a00\u8a9e\u7cfb\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u308b","052f8700":"\u3068\u6587\u5b57\u5217\u306e\u307f\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u3084\u3001\u5927\u96d1\u628a\u306a\u5b63\u7bc0\u3001\u5e74\u306e\u307f\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u306a\u3069\u5168\u3066\u306b\u65e5\u4ed8\u304c\u5165\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002<br>\n\u65e5\u4ed8\u306b\u3064\u3044\u3066\u306f\u524d\u51e6\u7406\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<br>","fd160181":"\u5024\u6bb5\u3068publisher,\u5e74\u304c\u5927\u304d\u306a\u5f71\u97ff\u3092\u53ca\u307c\u3057\u3066\u3044\u307e\u3059\u3002","548c397b":"# \uff12. \u30c7\u30fc\u30bf\u306e\u547c\u3073\u51fa\u3057\u3000\n\u4eca\u56de\u306f\u30b3\u30f3\u30da\u3067\u63d0\u4f9b\u9802\u3044\u305f\u30c7\u30fc\u30bf\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059","b9cd6899":"# \u2605\u3053\u3053\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u8ffd\u52a0\u306e\u30cd\u30bf\u3067\u3059\uff01\u3000OOTAKE\u3055\u3093\u306b\u63d0\u4f9b\u3057\u3066\u304f\u3060\u3055\u3063\u305f\u30cd\u30bf\u3067\u3059\n\nhttps:\/\/www.kaggle.com\/ootake\/starter-with-groupby","f90fe8e0":"\u5143\u3005list\u30c7\u30fc\u30bf\u3060\u3063\u305f\u306e\u304c\u3001csv\u306b\u3057\u305f\u3053\u3068\u3067\u6587\u5b57\u5217\u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002<br>\n\u5143\u3005\u306e\u30c7\u30fc\u30bf\u306b\u623b\u3059\u305f\u3081\u306b\u3001eval\u95a2\u6570\u3092\u9069\u5fdc\u3057\u3066\u3044\u304d\u307e\u3059\u3002","048ce9ab":"# \u2605\u305d\u306e\u4ed6\u306e\u30c7\u30fc\u30bf\u306eEDA\uff08\u30b3\u30f3\u30da\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u5206\u6790\uff09KAMOGAWA_HORUMO\u3055\u3093\u63d0\u4f9b\u9802\u3044\u3066\u3044\u307e\u3059\n\n\nhttps:\/\/www.kaggle.com\/xia464\/data-science-winter-osaka2-eda","d9708091":"## CV\u306eaccuracy\u3092\u51fa\u3059","6ed255cd":"# \uff14\uff0e\u524d\u51e6\u7406\n\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u6a5f\u68b0\u5b66\u7fd2\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\u3000\u3000\u8a00\u8449\u306f\u6570\u5b57\u5316\uff08\u6b63\u898f\u5206\u5e03\u3059\u308b\u30c7\u30fc\u30bf\u306b\u5909\u63db\uff09","df6d70af":"popular_tags\u3068categories\u3001minimum_requirements\u3001recommended_requirements\u306flist\u3068dict\u30c7\u30fc\u30bf\u3063\u307d\u3044\u3002","c1333fd4":"\u6587\u7ae0\u306e\u7279\u5fb4\u3092\u6570\u5b57\u306b\u3059\u308b\u3002\n* tfidf=tf(\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6)\u00d7idf(\u5404\u5358\u8a9e\u306e\u30ec\u30a2\u5ea6)\u3067\u6587\u66f8\u3092\u6570\u5b57\u5316\u3059\u308b\u3002\n* word2vec\u306f\u5358\u8a9e\u306e\u610f\u5473\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3001\u6570\u5b57\u306b\u5909\u63db\u3059\u308b","09d1c172":"\u4ee5\u4e0a\u3067\u30c7\u30fc\u30bf\u304c\u5143\u306e\u5f62\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3057\u305f\u3002\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u78ba\u304b\u3081\u307e\u3059\u3002","c2e34ca5":"\u77e5\u3063\u3066\u308b\u30b2\u30fc\u30e0\u304c\u51fa\u3066\u304f\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\uff08\u79c1\u306fcall of duty\u3068fallout\u306f\u77e5\u3063\u3066\u3044\u307e\u3057\u305f\uff09<br>\n\u3053\u308c\u3089\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306f215x460\u306e\u30b5\u30a4\u30ba\u3067\u3042\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u3002<br>\n\u753b\u50cf\u3092\u6570\u5024\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u4f55\u304b\u5bc4\u4e0e\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","791fe48d":"# \u7b2c\uff15\u56de\u3082\u597d\u8a55\u3067\u3057\u305f\u306e\u3067\u3001\u8abf\u3079\u305f\u3053\u3068\u3084\u601d\u3063\u305f\u3053\u3068\u3092\u521d\u5fc3\u8005\u76ee\u7dda\u3067\u8ffd\u8a18\u3057\u307e\u3059\u3002","109f524b":"\u4ee5\u4e0a\u3067\u30c7\u30fc\u30bf\u304c\u5143\u306e\u5f62\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3057\u305f\u3002\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u78ba\u304b\u3081\u307e\u3059\u3002","ac32b672":"\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u8efd\u304fEDA\u3092\u3057\u3066\u307f\u308b","98125a32":"\u6b20\u640d\u3057\u3066\u306a\u3044\u306e\u306f\u3001\u540d\u524d\u3068\u3001categories, \u753b\u50cf\u3001\u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u307f\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u6b20\u640d\u304c\u3042\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u3002<br>\n\nrelease_date\u306e\u6700\u5f8c\u306e\u65b9\u3092\u898b\u3066\u307f\u308b\u3068\u3001","3c548720":"# \uff16\uff0e\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\nsubmit\u7528\u306b\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3000\u4e8b\u524d\u8aac\u660e\u4f1a\u306e\u4f8b\u3067\u8a00\u3046\u30681\u5e742\u7d44\u306e\u51fa\u5e2d\u756a\u53f7\u3068\u8eab\u9577\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u307e\u3059","7966e658":"\u524d\u51e6\u7406\u3092\u884c\u3046\n## \u30ab\u30c6\u30b4\u30ea\u3001\u6570\u5024","8917e890":"\u8a00\u8a9e\u51e6\u7406\u3067\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u3068\u5148\u307b\u3069\u524d\u51e6\u7406\u3057\u305f\u6570\u5024\u30fb\u30ab\u30c6\u30b4\u30ea\u306e\u7279\u5fb4\u91cf\u3092\u5408\u4f53\u3055\u305b\u307e\u3059\u3002","85d3bcf1":"\u4e0b\u8a18\u3067\u6a5f\u68b0\u5b66\u7fd2\u7528\u306b\uff11\u5e74\uff11\u7d44\u306e\u30c7\u30fc\u30bf\u3068\uff11\u5e74\uff12\u7d44\u306e\u30c7\u30fc\u30bf\u306b\u623b\u3057\u3066\u3044\u307e\u3059\u3002","69925b10":"# \u2605\u5370\u307e\u3067\u306fStarter\u306e\u307e\u307e\u3067\u3059","a0f90ed6":"target\u306e\u5206\u5e03\u3092\u898b\u3066\u307f\u307e\u3059","e1c447fc":"* train test\u3092\uff11\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u3066\u4f5c\u696d\u6642\u9593\u3092\u77ed\u7e2e\u3057\u3066\u3044\u307e\u3059\u3002\n* train\u3068test\u3069\u3061\u3089\u306e\u30c7\u30fc\u30bf\u304b\u308f\u304b\u308b\u3088\u3046\u306b'is_train'\u306e\u5217\u306bTrue\u3068False\u3067\u76ee\u5370\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n* \u307e\u305ftest\u30c7\u30fc\u30bf\u306e\u8a55\u4fa1\u5024\u306b\u306f\u30c7\u30fc\u30bf\u306a\u3057\u300cnan\u300d\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002","db8ba360":"\uff1c\u30b3\u30fc\u30c9\u306e\u69cb\u6210\uff1e\n\n> \uff11\uff0e\u8a2d\u5b9a\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3053\u306e\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u547c\u3070\u308c\u308b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304f\u308c\u308b\u7269\u306e\u547c\u3073\u51fa\u3057\n\n> \uff12. \u30c7\u30fc\u30bf\u306e\u547c\u3073\u51fa\u3057\u3000\u3000\u3000\u4eca\u56de\u306f\u30b3\u30f3\u30da\u3067\u63d0\u4f9b\u9802\u3044\u305f\u30c7\u30fc\u30bf\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\n\n> \uff13\uff0e\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u78ba\u8a8d\u3000\u3000\u3000\u521d\u53c2\u52a0\u306e\u65b9\u5411\u3051\u306e\u4e8b\u524d\u8aac\u660e\u4f1a\u306e\u4f8b\u3067\u8a00\u3046\u3068train\u30c7\u30fc\u30bf\uff081\u5e741\u7d44\u306e\u751f\u5f92\u306e\u30c7\u30fc\u30bf\uff09\u30fbtest\u30c7\u30fc\u30bf\uff081\u5e742\u7d44\u306e\u30c7\u30fc\u30bf\uff09\u30fb\u753b\u50cf\uff08\u89aa\u306e\u5199\u771f\uff09\n\n> \uff14\uff0e\u524d\u51e6\u7406\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u6a5f\u68b0\u5b66\u7fd2\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\u3000\u3000\u8a00\u8449\u306f\u6570\u5b57\u5316\uff08\u6b63\u898f\u5206\u5e03\u3059\u308b\u30c7\u30fc\u30bf\u306b\u5909\u63db\uff09\n\n> \uff15\uff0e\u6a5f\u68b0\u5b66\u7fd2\uff0b\u4e88\u6e2c\u3000\u3000\u3000\u3000\u4eca\u56de\u306flightGBM\u3068XGboost\u3068\u3044\u3046\u6c7a\u5b9a\u6728\u3068\u547c\u3070\u308c\u308b\u624b\u6cd5\u3092\u4f7f\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u30011\u5e742\u7d44\u306e\u30c7\u30fc\u30bf\u3092\u653e\u308a\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\u3000\u3000\u3000\u3000\u3000\n\n> \uff16\uff0e\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u3000\u3000\u3000\u3000\u3000submit\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3000\u4e8b\u524d\u8aac\u660e\u4f1a\u306e\u4f8b\u3067\u8a00\u3046\u30681\u5e742\u7d44\u306e\u51fa\u5e2d\u756a\u53f7\u3068\u8eab\u9577\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u307e\u3059","fda39de6":"\u524d\u306enotebook\u304b\u3089\u753b\u50cf\u90e8\u5206\u3092\u53d6\u308a\u9664\u3044\u3066\u3001GPU\u3092\u7121\u304f\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002"}}