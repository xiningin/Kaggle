{"cell_type":{"f1cacf6f":"code","a57fc6f8":"code","6971dfa4":"code","5255ee07":"code","696448cc":"code","539c0216":"code","3a75f100":"code","fbb2b54b":"code","b824480d":"code","1248700f":"code","d4b4219e":"code","b51cfb2e":"code","9fe0b94e":"code","3cdde72e":"code","00450bda":"code","0fe4536f":"code","39cef514":"code","4ff5fc98":"code","82a81564":"code","f8039089":"code","0388120c":"code","d431289c":"code","5170d28a":"code","7e9878c0":"code","7897d7e0":"code","261c8916":"code","fbd05047":"code","ebd1ab42":"code","b51257d3":"code","1eb3037d":"code","3dc46636":"code","35aa08fd":"code","7b63f1b9":"code","e8cd9f03":"code","864e06ba":"code","2d9cda26":"code","a6d9db44":"code","2b576469":"markdown","1ec845e5":"markdown","5adf39aa":"markdown","22fa7688":"markdown","5481046b":"markdown","5283a24f":"markdown","d92bd10e":"markdown","a9426912":"markdown","ae072ba4":"markdown","ffe32f79":"markdown","c02070b7":"markdown","2206e088":"markdown","0d013d50":"markdown","2277c17d":"markdown","a23459e4":"markdown","9b4988d4":"markdown","11d64d4d":"markdown","826fd743":"markdown","16106f4a":"markdown","8e2571ac":"markdown","4afca504":"markdown","6a991c4d":"markdown","018f0e38":"markdown","b24b305a":"markdown","8c05b4bf":"markdown","22b651c2":"markdown","4799fffb":"markdown","7bed3274":"markdown","fa779a0c":"markdown","35466dd0":"markdown","d39e8ecb":"markdown","9b1e8ae6":"markdown","97df57ff":"markdown"},"source":{"f1cacf6f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# from mpl_toolkits.basemap import Basemap\nimport seaborn as sns\n\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nimport io\nimport requests\nimport os\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nplt.rc('figure', figsize=(12,10))\n%matplotlib inline\n\n#specific to time series analysis\nimport scipy.stats as st\nfrom statsmodels.tsa import stattools as stt\nfrom statsmodels import tsa\nimport statsmodels.api as smapi\nimport datetime\n\nfrom statsmodels.tsa.arima_model import ARIMA\n\nimport warnings\nwarnings.simplefilter(action='ignore')","a57fc6f8":"try:\n    terrorism = pd.read_csv('..\/input\/globalterrorismdb_0718dist.csv', encoding='ISO-8859-1')\n    print('File load: Success')\nexcept:\n    print('File load: Failed')","6971dfa4":"# terrorism = pd.read_csv('global terrorism.csv', encoding='ISO-8859-1')\nterrorism.head(10)","5255ee07":"terrorism.info()","696448cc":"terrorism.describe() ##describes only numeric data","539c0216":"rename = terrorism.rename(columns={'iyear':'Year','imonth':'Month','iday':'Day','country_txt':'Country','region_txt':'Region','attacktype1_txt':'AttackType','target1':'Target','nkill':'Killed','nwound':'Wounded','summary':'Summary','gname':'Group','targtype1_txt':'Target_type','weaptype1_txt':'Weapon_type','motive':'Motive'},inplace=True)\nterrorism = terrorism[['Year','Country','Region','city','latitude','longitude','AttackType','Killed','Wounded','Target','Summary','Group','Target_type','Weapon_type','Motive']]\nterrorism['casualities']=terrorism['Killed']+terrorism['Wounded']\nterrorism.head(10)","3a75f100":"terrorism.dropna(how = 'all', inplace=True)\nprint('Size After Dropping Rows with NaN in All Columns:', terrorism.shape)","fbb2b54b":"terrorism.isnull().sum()","b824480d":"print('Country with Highest Terrorist Attacks:',terrorism['Country'].value_counts().index[0])\nprint('Regions with Highest Terrorist Attacks:',terrorism['Region'].value_counts().index[0])\nprint('Maximum people killed in an attack are:',terrorism['Killed'].max(),'that took place in',terrorism.loc[terrorism['Killed'].idxmax()].Country)","1248700f":"plt.subplots(figsize=(13,6))\nsns.countplot('Year',data=terrorism,palette='RdYlGn_r',edgecolor=sns.color_palette('husl',8))\nplt.xticks(rotation=90)\nplt.title('Number Of Terrorist Activities Each Year')\nplt.show()","d4b4219e":"people_killed_eachyr = terrorism[[\"Year\",\"casualities\"]].groupby('Year').sum()\n\nplt.subplots(figsize = (15,6))\nsns.barplot(x=people_killed_eachyr.index, \n            y=[i[0] for i in people_killed_eachyr.values], data = people_killed_eachyr, palette='RdYlGn_r',edgecolor=sns.color_palette(\"Set2\", 10))\nplt.xticks(rotation=90)\nplt.title('Number Of people were killed of wouded by terrorism each year')\nplt.show()","b51cfb2e":"terrorism.to_csv('terr.csv', index = False)","9fe0b94e":"dateparse = lambda d: pd.datetime.strptime(d, '%Y')\n","3cdde72e":"f='terr.csv'\nterrorism_ts = pd.read_csv(f,\n                   parse_dates=['Year'], \n                   index_col='Year', \n                   date_parser=dateparse,\n                   )","00450bda":"terrorism_ts.head()","0fe4536f":"terrorism_ts = terrorism_ts.iloc[:, 0]\nterrorism_ts.head()","39cef514":"type(terrorism_ts)","4ff5fc98":"plt.subplots(figsize=(13,6))\nsns.countplot('Region',data=terrorism, palette='RdYlGn_r',edgecolor=sns.color_palette('husl',8))\nplt.xticks(rotation=90)\nplt.title('Number Of Terrorist Activities Each Region')\nsns.set(font_scale=1)\nplt.show()","82a81564":"terror_region=pd.crosstab(terrorism.Year,terrorism.Region)\nterror_region.plot(color=sns.color_palette('Set2',12))\nfig=plt.gcf()\nfig.set_size_inches(18,6)\nplt.show()","f8039089":"plt.subplots(figsize=(15,6))\nsns.barplot(terrorism['Country'].value_counts()[:15].index,terrorism['Country'].value_counts()[:15].values,palette='inferno')\nplt.title('Top Affected Countries')\nsns.set(font_scale=1)\nplt.show()","0388120c":"pd.crosstab(terrorism.Region,terrorism.AttackType).plot.barh(stacked=True,width=1,color=sns.color_palette('RdYlGn',9))\nfig=plt.gcf()\nfig.set_size_inches(12,8)\nsns.set(font_scale=0.5)\nplt.show()","d431289c":"plt.subplots(figsize=(15,6))\nsns.countplot('AttackType',data=terrorism,palette='inferno',order=terrorism['AttackType'].value_counts().index)\nplt.xticks(rotation=90)\nplt.title('Attacking Methods by Terrorists')\nsns.set(font_scale=2)\nplt.show()","5170d28a":"# pd.crosstab(terrorism.AttackType,terrorism.Group).plot.barh(stacked=True,width=1,color=sns.color_palette('RdYlGn',9))\n# fig=plt.gcf()\n# fig.set_size_inches(12,8)\n# sns.set(font_scale=0.5)\n# plt.show()","7e9878c0":"# plt.subplots(figsize=(13,6))\n# sns.countplot('Target',data=terrorism,palette='RdYlGn_r',edgecolor=sns.color_palette('husl',8))\n# plt.xticks(rotation=90)\n# plt.title('Number Of Terrorist Activities Each Target')\n# plt.show()","7897d7e0":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import label_binarize\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\n\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.dummy import DummyClassifier","261c8916":"####7.1 Preprocessing\n\n# Before we do the classification, we may want to delete some columns like city and motive since some of them may have\n# linear relationship with other columns like killed and some of them has too many missing value like motive\n\nterrorism_cm = terrorism.drop(columns = ['Motive','Target','Killed','Wounded','Summary','city'])","fbd05047":"# Encode category predictors into numbers, facilitating later work\nlabelEncoding = LabelEncoder()\nterrorism_cm['Country'] = labelEncoding.fit_transform(terrorism_cm['Country'])\nterrorism_cm['AttackType'] = labelEncoding.fit_transform(terrorism_cm['AttackType'])\nterrorism_cm['Target_type'] = labelEncoding.fit_transform(terrorism_cm['Target_type'])\nterrorism_cm['Weapon_type'] = labelEncoding.fit_transform(terrorism_cm['Weapon_type'])\nterrorism_cm['Region'] = labelEncoding.fit_transform(terrorism_cm['Region'])\nterrorism_cm['Group'] = labelEncoding.fit_transform(terrorism_cm['Group'])\n\n\nterrorism_cm['casualities'] = terrorism_cm['casualities'].apply(lambda x: 0 if x == 0 else 1)","ebd1ab42":"terrorism_cm.head(5)","b51257d3":"len(terrorism_cm)","1eb3037d":"# We drop na to avoid misinformation\nterrorism_cm = terrorism_cm.dropna()\nlen(terrorism_cm)","3dc46636":"len(terrorism_cm[terrorism_cm['casualities'] == 0])","35aa08fd":"####7.2 Cross Validation\n\n# Split data for training data and validation data\nX = terrorism_cm[['Year','Country','Region','latitude','longitude','AttackType','Group','Target_type','Weapon_type']]\nvalid = terrorism_cm['casualities']\n\nX_train, X_test, valid_train, valid_test = train_test_split(X, valid, test_size=0.3)","7b63f1b9":"####7.3 Compute the feature importances with random forest\nforest = ExtraTreesClassifier(n_estimators=20,\n                              random_state=0)\n\nforest.fit(X, valid)\nimportances = forest.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in forest.estimators_],\n             axis=0)\nindices = np.argsort(importances)[::-1]\nfnames = [['Year','Country','Region','latitude','longitude','AttackType','Group','Target_type','Weapon_type'][i] for i in indices]\n\n# Plot the feature importances of the forest\nplt.figure()\nplt.title(\"Feature importances\")\nplt.bar(range(X.shape[1]), importances[indices],\n       color=\"r\", yerr=std[indices], align=\"center\")\nplt.xticks(range(X.shape[1]), fnames, rotation=90)\nplt.xlim([-1, X.shape[1]])\nplt.show()","e8cd9f03":"####7.4 Train the model\nX = terrorism_cm[['Year','Country','latitude','longitude','AttackType','Group','Target_type','Weapon_type']]\nvalid = terrorism_cm['casualities']\n\nX_train, X_test, valid_train, valid_test = train_test_split(X, valid, test_size=0.3)","864e06ba":"model = RandomForestClassifier(n_estimators=10)\nmodel.fit(X_train, valid_train)\npred = model.predict(X_test)\nnp.mean(pred == valid_test)","2d9cda26":"####7.5 Confusion Matrix\n# reference: https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html#sphx-glr-auto-examples-model-selection-plot-confusion-matrix-py\ncnf_matrix = confusion_matrix(valid_test, pred)\n \n\ndef plot_confusion_matrix(cm,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n \n    print(cm)\n \n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n \n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n \n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n \n# Compute confusion matrix\nnp.set_printoptions(precision=2)\n \n# Plot non-normalized confusion matrix\nplt.figure()\nplot_confusion_matrix(cnf_matrix,\n                      title='Confusion matrix, without normalization')\n \n# Plot normalized confusion matrix\nplt.figure()\nplot_confusion_matrix(cnf_matrix, normalize=True,\n                      title='Normalized confusion matrix')\n \nplt.show()","a6d9db44":"####7.6 ROC curve\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nfrom sklearn.metrics import roc_curve\nscore = model.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(pred, score, pos_label=1)\nauc = np.trapz(tpr, fpr)\n\nplt.plot(fpr, tpr, label=\"AUC=\" + str(auc))\nplt.xlabel(\"FPR\")\nplt.ylabel(\"TPR\")\nplt.grid()\nplt.legend()\nplt.show() ","2b576469":"As it can be seen from the AUC analysis that, the curve is pretty close to the upper left of the plot, demonstrating a high overall accuracy of our learner. (There exists a moment that True positive rate could be high whereas false positive rate could be maintained at a pretty low value)","1ec845e5":"As it can be seen from above, features like longitude, latitude, target type and year have high feature importance index, which means that these features are more influential when predicting the value of casualty. However, we may want to check whether this outcome is accurate enough so we need to calculate the accuracy from the learner to demonstrate it is a valid result.","5adf39aa":"### 5.1 Distribution of terrorism in different regions.(groupby region on attacks)","22fa7688":"### 3.2 Check missing data","5481046b":"As for the prediction part, we may want to figure out which factors matters most when we want to predict the outcome of an attack. To accomplish a study on this, we set casualty value (killed + injured) as our target variable and other variable as our predictors.","5283a24f":"8. Citation","d92bd10e":"5. Geographical Analysis of Terrorism  \nDistribution of terrorism in different regions.(groupby region on attacks)   \nWhich country has the highest attacks (groupby country on attacks)  \nWhat kinds of methodes(weapons) were used by terrorists? (groupby methords on attacks)  \nAttack type vs region\nRegions Attacked By Terrorist Groups  \nTerrorism by country\n\n","a9426912":"### 6.1 What kinds of targets were favored by terrorist?  ","ae072ba4":"The result shows that about the True Positive rate reaches about 0.86 whereas the True Negative rate reaches about 0.74.","ffe32f79":"Agnes & Junming","c02070b7":"### 5.5 Attack types were used by Terrorist Groups","2206e088":"Firstly, we may want to do some preprocessing. ","0d013d50":"3. Preparing the Data  \n3.1 Check missing data  \n3.2 Data Cleaning","2277c17d":"### 5.2 Number of attacks by countries.","a23459e4":"The table from above describes the information about the numeric columns of the terrorism data. Since the information is provided for only the numeric columns, and no information is provided about missing data, I created a more in-depth tool below to describe the information for all the attributes.","9b4988d4":"In the project, we would like to analyze the percent distribution of incidents and fatalities by region, the main characteristics of terrorist events,  the frequency of attacks by region ,terrorism tactics by region over time and the terrorism activity over time for select countries, etc.","11d64d4d":"Global Terrorism Trend\n==","826fd743":"4.Distribution of Terrorism by time\n--","16106f4a":"### 5.3 What kinds of methodes(weapons) were used by terrorists? (groupby methords on attacks)","8e2571ac":"2.Glimps of Data \n--\n","4afca504":"As we can see from above, the accuracy result is about 81.9%. This proves that the result from our feature importance analysis is almost accurate.","6a991c4d":"### 3.1 Rename Dataframe","018f0e38":"### 4.1 Number of terrorist activities each year","b24b305a":"### 2.1 Read Data","8c05b4bf":"## 7. Prediction","22b651c2":"### 2.1 Statistic Overview of Data","4799fffb":"======================================================================================================================","7bed3274":"### 5.4 What kinds of methods(weapons) were used by terrorists? (groupby methods on attacks)","fa779a0c":"### 4.2 Number of people were killed by terrorism each year.","35466dd0":"1.import libraries \n--","d39e8ecb":"what is the distribution of terror incidents and fatalities by region? What is the frequency of attacks by region? What is terrorism tactics in different region? Which countries have the most frequency of attacked and is there some similarity between these counties? ","9b1e8ae6":"A good amount of our inspiration came from other Kaggle notebooks under this dataset. It was inevitable that we would come across the notebooks while learning about the dataset. We have referred other great kagglers' works to accomplish this project. Thanks for all of you.","97df57ff":"6. Act of Terrorism Analysis  \n  \n  Share of kills, wounded and property damage per attack type."}}