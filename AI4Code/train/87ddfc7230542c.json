{"cell_type":{"a69a9cc1":"code","3b927661":"code","2f554915":"code","f0db8cfe":"code","c316e0a5":"code","56f89154":"code","3bca494a":"code","7a3cb9db":"code","866f9a5d":"code","70c38407":"code","856976b8":"code","53d41145":"code","3f06ea65":"code","9161caea":"code","b112f06a":"code","6ad90983":"code","b486b45f":"code","ce173364":"code","04915ada":"code","663d3137":"code","292025af":"code","55918f56":"code","3ae0f019":"code","cf99fb56":"code","86f16595":"code","8ba06940":"code","eee626a5":"code","fa4dd10f":"code","41fdec46":"code","30d3d73e":"code","565994c1":"code","cbc414b6":"code","89bacc43":"code","b96c2381":"code","cbd554ce":"code","753fc538":"markdown","ca087a55":"markdown","2ce7f605":"markdown","0268e850":"markdown","34d64411":"markdown","3b0b1385":"markdown","166225d1":"markdown","023a7995":"markdown","ff9b5a7c":"markdown","460d9021":"markdown","935946b4":"markdown","f6df0775":"markdown","47b1d472":"markdown","ae1ef64d":"markdown"},"source":{"a69a9cc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\npd.options.mode.chained_assignment = None \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ngames_2019 = pd.read_csv('..\/input\/baseball-game-logs-2010-19\/GL2019.TXT',header=None,)\n\n        \n    \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b927661":"# change format of date column to Date\ngames_2019.loc[:,0] = games_2019.loc[:,0].apply(lambda x: pd.to_datetime(str(x), format='%Y%m%d'))","2f554915":"# move colum name numbers to +1 to match Retro website coumn naming\ncolumns_name_number =  np.arange(1, 162).tolist()\ngames_2019.columns = columns_name_number\ngames_2019.head()","f0db8cfe":"# rename colums \ngames_2019 = games_2019.rename(columns={1: 'game_date', 2: 'game_number_in_series', 3: 'day_of_week', 4:'visiting_team', 5:'visiting_team_league', 6:'visiting_team_game_number', 7: 'home_team', 8:'home_team_league',\n                                       9:'home_team_game_number', 10:'visiting_team_score', 11:'home_team_score',12:'game_outs', 13:'day_or_night', 17:'park_id', 22:'visiting_at_bats',\n                                       23:'visiting_hits', 24:'visiting_doubles', 25:'visiting_triples', 26:'visiting_homeruns', 27:'visiting_RBI',\n                                        28:'visiting_sacrafice_hits',29:'visiting_sacrifice_flies', 30:'visiting_hit_by_pitch',\n                                       31:'visiting_walks', 32:'visiting_intentional_walks', 33:'visiting_strikeouts', 34:'visiting_stolen_bases', \n                                        35:'visiting_caught_stealing', 36: 'visiting_grounded_into_double_plays', 37:'visiting_awarded_first_on_catchers_interference',\n                                       38:'visiting_left_on_base', 39:'visiting_pitchers_used', 40: 'visiting_individual_earned_runs', 41: 'visiting_team_earned_runs',\n                                       42: 'visiting_wild_pitches', 43: 'visiting_balks', 44: 'visitng_putouts', 45: 'visiting_assists', 46: 'visiting_errors', 47: 'visitng_passed_balls', \n                                        48: 'visiting_double_plays', 49: 'visiting_triple_plays',\n                                        50:'home_at_bats',\n                                       51:'home_hits', 52:'home_doubles', 53:'home_triples', 54:'home_homeruns', 55:'home_RBI',\n                                         56:'home_sacrafice_hits',57:'home_sacrifice_flies', 58:'home_hit_by_pitch',\n                                       59:'home_walks', 60:'home_intentional_walks', 61:'home_strikeouts', 62:'home_stolen_bases', \n                                        63:'home_caught_stealing', 64: 'homeg_grounded_into_double_plays', 65:'home_awarded_first_on_catchers_interference',\n                                       66:'home_left_on_base', 67:'home_pitchers_used', 68: 'home_individual_earned_runs', 69: 'home_team_earned_runs',\n                                       70: 'home_wild_pitches', 71: 'home_balks', 72: 'home_putouts', 73: 'home_assists', 74: 'home_errors', 75: 'home_passed_balls', \n                                        76: 'home_double_plays', 77: 'home_triple_plays' })","c316e0a5":"# drop columms if name is number\ncols_to_drop = np.arange(14, 17).tolist() + np.arange(18, 22).tolist() + np.arange(78, 162).tolist()\ngames_2019.drop(columns = cols_to_drop, inplace=True, axis = 1)\ngames_2019.head()","56f89154":"# function to create cumalative totals the window property here relates to the form of the team \n\ndef cumalative_totals(df):\n    for col in df.columns:\n        if df[col].dtype == int:\n            col_index = df.columns.get_loc(col)\n            new_col_name = \"cumalative_{}\".format(col)\n            df.insert(loc=col_index, column=new_col_name, value=df[col].rolling(min_periods=1, window=2).sum().shift(1))\n        else:\n            pass","3bca494a":"# funtion to create MLB stats\n\ndef create_home_visiting_stats(team_game):\n    # Batting stats worked out. \n\n    # The first part get the cumalative totals that will be used for working out common baseball stats\n    \n    team_game.insert(loc=0, column='team_cumalative_singles', value=team_game['cumalative_team_hits']-\n                                                                                   team_game['cumalative_team_doubles']-\n                                                                                   team_game['cumalative_team_triples']-\n                                                                                   team_game['cumalative_team_homeruns'])\n                                                                                 \n\n    team_game.insert(loc=0, column='team_cumalative_on_plate', value=(team_game['cumalative_team_sacrifice_flies']+\n                                                                             team_game['cumalative_team_walks']+\n                                                                             team_game['cumalative_team_hit_by_pitch']+\n                                                                             team_game['cumalative_team_sacrafice_hits']+\n                                                                             team_game['cumalative_team_sacrifice_flies']+\n                                                                             team_game['cumalative_team_intentional_walks']))\n                                                                            \n\n    # Batting average - Hits \/ at Bats\n\n    team_game.insert(loc=0, column='team_batting_average', value=team_game['cumalative_team_hits']\n                                                                               \/team_game['cumalative_team_at_bats'])\n\n    # Home run ratio - home runs \/ at Bat\n\n    team_game.insert(loc=0, column='team_homerun_ratio', value=team_game['cumalative_team_homeruns']\n                                                                            \/team_game['cumalative_team_at_bats'])\n\n    # Base on balls  - walks \/ on plate \n\n    team_game.insert(loc=0, column='team_base_on_balls_percentage', value=team_game['cumalative_team_walks']\n                                                                                        \/team_game['team_cumalative_on_plate'])\n\n    # on base percentage - Hits + walks + hit by pitch \/ at Bat + walks + hit by pitch + sacrafice flies\n\n    team_game.insert(loc=0, column='team_on_base_percentage', value= (team_game['cumalative_team_hits']+\n                                                                                    team_game['cumalative_team_walks']+\n                                                                                    team_game['cumalative_team_hit_by_pitch'])\/(\n                                                                                    team_game['cumalative_team_at_bats']+\n                                                                                    team_game['cumalative_team_walks']+\n                                                                                    team_game['cumalative_team_hit_by_pitch']+\n                                                                                    team_game['cumalative_team_sacrifice_flies']))\n\n    # Slug % - singles + 2 x doubles + 3 x treples 4 x home run \/ at Bat\n\n    team_game.insert(loc=0, column='team_slug',value= ( (team_game['team_cumalative_singles']+\n                                                                       (2*team_game['cumalative_team_doubles'])+\n                                                                       (3*team_game['cumalative_team_triples'])+\n                                                                       (4*team_game['cumalative_team_homeruns']))\/\n                                                                        team_game['cumalative_team_at_bats']))\n\n    # Stolen Bases - stolen bases \/ caught stolen bases\n\n    team_game.insert(loc=0, column='team_stolen_base_runs',value= (0.3*team_game['cumalative_team_stolen_bases']-\n                                                                                  (0.6*team_game['cumalative_team_caught_stealing'])))\n    # Strike out ratio - strikeouts \/ at bats\n\n    team_game.insert(loc=0, column='team_strikeout_ratio',value= (team_game['cumalative_team_strikeouts']\/\n                                                                            team_game['cumalative_team_at_bats']))\n\n    # Fielding stats\n\n    # Cumalative totals for fielding stats\n\n\n    # fielding average - putouts + assists \/ putouts + assists + errors\n\n    team_game.insert(loc=0, column='team_feilding_average', value= (team_game['cumalative_team_putouts']+\n                                                                                team_game['cumalative_team_assists']\/(\n                                                                                team_game['cumalative_team_putouts']+\n                                                                                team_game['cumalative_team_assists']+\n                                                                                team_game['cumalative_team_errors'])))\n    \n    \n    # Pitching Stats\n\n    # average earned runs (ERA) - 9 x earned runs \/ innings\n\n    team_game.insert(loc=0, column='team_ERA', value= ((9*(team_game['cumalative_team_earned_runs'])\/\n                                                                                    ((team_game['cumalative_game_outs'])\/6)\n                                                                                   )))\n\n    # Walks And Hits per Innings Pitched [WHIP] - allowed hits + allowed walks \/ innings\n\n    team_game.insert(loc=0, column='team_WHIP', value= (((((team_game['cumalative_game_outs'])\/6)+\n                                                                        team_game['cumalative_opposing_walks'])\/\n                                                                        ((team_game['cumalative_game_outs'])\/6)\n                                                                                   )))\n\n    # Opposing Team's Batting Average - allowed hits \/ batters faced - allowed walks - allowed hit batsmen - allowed sacrifice hits - alowed sacricfice flies - catcher interference. \n\n    team_game.insert(loc=0, column='team_OTBA', value= (((((team_game['cumalative_game_outs'])\/6)\/\n                                                                         (team_game['cumalative_opposing_at_bats']-\n                                                                         team_game['cumalative_opposing_walks']-\n                                                                         team_game['cumalative_opposing_hit_by_pitch']-\n                                                                         team_game['cumalative_opposing_sacrafice_hits']-\n                                                                         team_game['cumalative_opposing_sacrifice_flies']-\n                                                                         team_game['cumalative_opposing_awarded_first_on_catchers_interference'])\n                                                                                   ))))\n\n    return team_game","7a3cb9db":"# create home game win \ndef home_win_func(pd):\n    if pd['home_team_score'] > pd['visiting_team_score']:\n        return 1\n    else:\n        return 0\n\n# create away game win\ndef away_win_func(pd):\n    if pd['visiting_team_score'] > pd['home_team_score']:\n        return 1\n    else:\n        return 0\n","866f9a5d":"# define colums for the visitor team and the home team. Then create new colums that will be use for the one team's performance. \n\nvisitor_cols = ['visiting_team_score','visiting_at_bats','visiting_hits','visiting_doubles','visiting_triples','visiting_homeruns', 'visiting_RBI',\n                                        'visiting_sacrafice_hits','visiting_sacrifice_flies', 'visiting_hit_by_pitch',\n                                       'visiting_walks', 'visiting_intentional_walks', 'visiting_strikeouts', 'visiting_stolen_bases', \n                                        'visiting_caught_stealing', 'visiting_grounded_into_double_plays','visiting_awarded_first_on_catchers_interference',\n                                       'visiting_left_on_base', 'visiting_pitchers_used',  'visiting_individual_earned_runs',  'visiting_team_earned_runs',\n                                        'visiting_wild_pitches', 'visiting_balks', 'visitng_putouts', 'visiting_assists', 'visiting_errors', 'visitng_passed_balls', \n                                        'visiting_double_plays', 'visiting_triple_plays',\n\n'home_at_bats','home_hits', 'home_sacrafice_hits','home_sacrifice_flies', 'home_hit_by_pitch',\n'home_walks', 'home_intentional_walks', 'home_awarded_first_on_catchers_interference'             \n               ]\n            \nhome_cols = ['home_team_score','home_at_bats','home_hits','home_doubles', 'home_triples','home_homeruns', 'home_RBI',\n                                         'home_sacrafice_hits','home_sacrifice_flies', 'home_hit_by_pitch',\n                                       'home_walks', 'home_intentional_walks', 'home_strikeouts', 'home_stolen_bases', \n                                        'home_caught_stealing',  'homeg_grounded_into_double_plays', 'home_awarded_first_on_catchers_interference',\n                                       'home_left_on_base', 'home_pitchers_used', 'home_individual_earned_runs', 'home_team_earned_runs',\n                                       'home_wild_pitches', 'home_balks', 'home_putouts', 'home_assists', 'home_errors', 'home_passed_balls', \n                                        'home_double_plays', 'home_triple_plays',\n'visiting_at_bats','visiting_hits','visiting_sacrafice_hits','visiting_sacrifice_flies', 'visiting_hit_by_pitch',\n'visiting_walks', 'visiting_intentional_walks','visiting_awarded_first_on_catchers_interference',]\n\n\nnew_cols = ['team_score','team_at_bats','team_hits','team_doubles','team_triples','team_homeruns', 'team_RBI',\n                                        'team_sacrafice_hits','team_sacrifice_flies', 'team_hit_by_pitch',\n                                       'team_walks', 'team_intentional_walks', 'team_strikeouts', 'team_stolen_bases', \n                                        'team_caught_stealing', 'team_grounded_into_double_plays','team_awarded_first_on_catchers_interference',\n                                       'team_left_on_base', 'team_pitchers_used',  'team_individual_earned_runs',  'team_earned_runs',\n                                        'team_wild_pitches', 'team_balks', 'team_putouts', 'team_assists', 'team_errors', 'team_passed_balls', \n                                        'team_double_plays', 'team_triple_plays',\n'opposing_at_bats','opposing_hits','opposing_sacrafice_hits','opposing_sacrifice_flies', 'opposing_hit_by_pitch',\n'opposing_walks', 'opposing_intentional_walks','opposing_awarded_first_on_catchers_interference'           \n]\n\n","70c38407":"# Create a dictionary with the keys equal to each team and value the data frame of that team's games.\n\nhome_away_game_dict_by_team = dict.fromkeys(list(games_2019.home_team.unique()))","856976b8":"# Create dictionaries to map teams home and away stats to one column\n\n# map the selected teams home games values to a new column for the team \nkeys = home_cols\nvalues = new_cols\nhome_dictionary = dict(zip(keys, values))\n\n# map the selected teams away games values to a new column for the team \nkeys = visitor_cols\nvalues = new_cols\naway_dictionary = dict(zip(keys, values))","53d41145":"unique_teams = list(games_2019.home_team.unique())","3f06ea65":"# lopp through all teams\n\nfor team in unique_teams:\n    \n    # Get home winning percentage into what will be a shared column for the teams away and home winning record    \n    # get games for one team only\n    away_team_games = games_2019[games_2019['visiting_team'].str.match(team)]\n    home_team_games = games_2019[games_2019['home_team'].str.match(team)]\n    \n    # create home game counter\n    home_team_games['home_counter'] = range(len(home_team_games))\n    \n    # create cumlative total of home wins\n    home_team_games['home_winner'] = home_team_games.apply(home_win_func, axis=1)\n    home_team_games['cumalative_won_games'] =  home_team_games['home_winner'].cumsum().shift(1)\n\n    # dived the two \n    home_team_games['home_winning_percentage'] = home_team_games['cumalative_won_games'] \/ home_team_games['home_counter']\n    \n    # Get away winning percentage into what will be a shared column for the teams away and home winning record \n    # create away game counter\n    away_team_games['away_counter'] = range(len(away_team_games))\n  \n    # create cumlative total of away wins\n    away_team_games['away_winner'] = away_team_games.apply(away_win_func, axis=1)\n    away_team_games['cumalative_won_games'] =  away_team_games['away_winner'].cumsum().shift(1)\n\n    # dived the two \n    away_team_games['away_winning_percentage'] = away_team_games['cumalative_won_games'] \/ away_team_games['away_counter']\n    \n    # map the stats in the home_team_games data frame to one column\n    home_team_games = home_team_games.rename(columns=home_dictionary)\n\n    #  map the stats in the away_team_games data frame to one column\n    away_team_games = away_team_games.rename(columns=away_dictionary)\n    \n    # concat the home and away games to one table\n    home_away_games = pd.concat([home_team_games, away_team_games]).sort_values('game_date')\n    \n    # add all the MLB stats to the dataframe     \n    cumalative_totals(home_away_games)\n    home_away_games = create_home_visiting_stats(home_away_games)\n    \n    # add the dataframe to the dictionary    \n    home_away_game_dict_by_team[team] = home_away_games","9161caea":"home_away_games.head()","b112f06a":"home_away_game_dict_by_team['BOS'][['home_winning_percentage', 'away_winning_percentage']].tail()","6ad90983":"home_away_game_dict_by_team['SEA'][['home_winning_percentage', 'away_winning_percentage']].head()\n","b486b45f":"# columns to keep\ncol_numbers_to_keep = list(range(0,14))\n\n# columns to add\n\ncols_to_add = ['home_batting_average', 'home_on_base_percentage', 'home_slug', 'home_stolen_base_runs', 'home_feilding_average', 'home_ERA', 'home_WHIP', 'home_OTBA', 'home_winning_percentage', \n               'visiting_batting_average', 'visiting_on_base_percentage', 'visiting_slug', 'visiting_stolen_base_runs', 'visiting_feilding_average', 'visiting_ERA', 'visiting_WHIP', 'visiting_OTBA', \n               'visiting_winning_percentage' ]\n\ngames_2019 = games_2019.iloc[:, col_numbers_to_keep]\nfor col in cols_to_add:\n    games_2019.insert(loc=14, column = col, value = 0)","ce173364":"cols_in_team_df = ['team_batting_average', 'team_on_base_percentage', 'team_slug', 'team_stolen_base_runs', 'team_feilding_average', 'team_ERA', 'team_WHIP', 'team_OTBA']\ncols_for_home_team = ['home_batting_average', 'home_on_base_percentage', 'home_slug', 'home_stolen_base_runs', 'home_feilding_average', 'home_ERA', 'home_WHIP', 'home_OTBA']\ncols_for_away_team = ['visiting_batting_average', 'visiting_on_base_percentage', 'visiting_slug', 'visiting_stolen_base_runs', 'visiting_feilding_average', 'visiting_ERA', 'visiting_WHIP', 'visiting_OTBA']","04915ada":"\n# function to map the values of each team stat to the correct game \n\ndef stat_map(row):\n    home_team_placeholder = row['home_team']\n    away_team_placeholder = row['visiting_team']\n    games_2019.loc[row.name, 'home_winning_percentage'] = home_away_game_dict_by_team[home_team_placeholder]['home_winning_percentage'][row.name]\n    games_2019.loc[row.name, 'visiting_winning_percentage'] = home_away_game_dict_by_team[away_team_placeholder]['away_winning_percentage'][row.name]\n  \n    for home_col, team_col in zip(cols_for_home_team, cols_in_team_df):\n        games_2019.loc[row.name, home_col] = home_away_game_dict_by_team[home_team_placeholder][team_col][row.name]\n    for away_col, team_col in zip(cols_for_away_team, cols_in_team_df):\n        games_2019.loc[row.name, away_col] = home_away_game_dict_by_team[away_team_placeholder][team_col][row.name]","663d3137":"games_2019.apply(stat_map, axis = 1)\n\n# round all figure to 3dp\n\ngames_2019 = games_2019.round(3)","292025af":"options = ['SEA']\nseatle_games = games_2019[games_2019['visiting_team'].isin(options) | games_2019['home_team'].isin(options)] ","55918f56":"seatle_games[['home_team', 'visiting_team','home_winning_percentage', 'visiting_winning_percentage']].head()","3ae0f019":"games_2019.head()","cf99fb56":"# create new column for winner \ndef who_won(pd):\n    if pd['home_team_score'] > pd['visiting_team_score']:\n        return 'home_win'\n    elif pd['home_team_score'] < pd['visiting_team_score']:\n        return 'away win'\n    else:\n        return 'tie'\n\n# create column for score difference\n\ndef point_diff(pd):\n    return pd['home_team_score'] - pd['visiting_team_score']","86f16595":"games_2019['game_winner'] = games_2019.apply(who_won, axis = 1)\ngames_2019['margin'] = games_2019.apply(point_diff, axis = 1)","8ba06940":"corre = games_2019[['game_outs', 'margin']]\ncorre.corr()","eee626a5":"games_2019.dropna(inplace=True)","fa4dd10f":"# 2 possible target variabels  - home win \/ away win and margin difference \n\ny_cat = games_2019['game_winner']\ny_num = games_2019['margin']\n\n# Feature data \n\nX = games_2019.drop(columns = ['day_of_week', 'game_winner', 'home_team_score', 'visiting_team_score', 'game_outs', 'margin'])\n\n# X = games_2019.drop(columns = ['day_of_week', 'visiting_team', 'visiting_team_league', 'home_team',\n#        'home_team_league',  'day_or_night', 'park_id','game_winner', 'home_team_game_number', 'margin', 'home_team_score',\n#                                'visiting_team_score', 'game_date','game_number_in_series', 'visiting_team_game_number', 'visiting_winning_percentage', 'visiting_OTBA', 'visiting_WHIP', 'visiting_ERA', 'visiting_feilding_average', 'visiting_stolen_base_runs', 'visiting_slug', 'visiting_on_base_percentage', 'visiting_batting_average', 'home_winning_percentage', 'home_OTBA', 'home_WHIP', 'home_ERA', 'home_feilding_average', 'home_stolen_base_runs', 'home_slug', 'home_on_base_percentage', 'home_batting_average' ], axis = 1)","41fdec46":"numerical_cols = []\nobject_cols = []\nfor col in X.columns:\n    if(X[col].dtype == np.float64 or X[col].dtype == np.int64):\n          numerical_cols.append(col)\n    else:\n          object_cols.append(col)","30d3d73e":"# test train split\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y_num, train_size=0.8, test_size=0.2)","565994c1":"\nfrom sklearn import preprocessing\n\n# Apply one-hot encoder to each column with categorical data\nOH_encoder = preprocessing.OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[object_cols]))\nOH_cols_valid = pd.DataFrame(OH_encoder.transform(X_valid[object_cols]))\n\n# One-hot encoding removed index; put it back\nOH_cols_train.index = X_train.index\nOH_cols_valid.index = X_valid.index\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X_train = X_train.drop(object_cols, axis=1)\nnum_X_valid = X_valid.drop(object_cols, axis=1)\n\n\n\n\n# Add one-hot encoded columns to numerical features\nX_train = pd.concat([num_X_train, OH_cols_train], axis=1)\nX_valid = pd.concat([num_X_valid, OH_cols_valid], axis=1)\n","cbc414b6":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor(objective = 'reg:squarederror', colsample_bytree = 0.7, learning_rate = 0.2,\n                max_depth = 15, alpha = 10, n_estimators = 10)\n\nmy_model.fit(X_train, y_train)\n\n\nfrom sklearn.metrics import mean_absolute_error\n\npredictions = my_model.predict(X_valid)\n\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_valid)))\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(np.zeros(len(y_valid)), y_valid)))\n\n\nd = {'true': y_valid, 'preds': predictions}\n\ndf = pd.DataFrame(data = d)\nprint(df.head(50))","89bacc43":"# test train split\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y_cat, train_size=0.8, test_size=0.2)","b96c2381":"\nfrom sklearn import preprocessing\n\n# Apply one-hot encoder to each column with categorical data\nOH_encoder = preprocessing.OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[object_cols]))\nOH_cols_valid = pd.DataFrame(OH_encoder.transform(X_valid[object_cols]))\n\n# One-hot encoding removed index; put it back\nOH_cols_train.index = X_train.index\nOH_cols_valid.index = X_valid.index\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X_train = X_train.drop(object_cols, axis=1)\nnum_X_valid = X_valid.drop(object_cols, axis=1)\n\n\n\n\n# Add one-hot encoded columns to numerical features\nX_train = pd.concat([num_X_train, OH_cols_train], axis=1)\nX_valid = pd.concat([num_X_valid, OH_cols_valid], axis=1)","cbd554ce":"from sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train)\n\ny_pred=clf.predict(X_valid)\n\n#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_valid, y_pred))\n\nd = {'true': y_valid, 'preds': y_pred}\n\ndf = pd.DataFrame(data = d)\nprint(df.head(50))","753fc538":"# XGBoost\n\nThe results below are not great and show that it is little better than random guessing scores. I think there could be an error in the reasembling of the main data frame...","ca087a55":"# Rename Columns and drop columns not needed","2ce7f605":"# Prepare data for modeling - test\/train,  scale, deal with cat data etc","0268e850":"# Check head and tail make sense","34d64411":"# Seperate the features and target","3b0b1385":"# Drop NaN ","166225d1":"# Function to create column for away\/home win percentage ","023a7995":"# Now we have each individual teams table with their own cumlative stats its time to rebuild the main data frame using the cumlative stats for the home and away teams ","ff9b5a7c":"# Funtion add to create MLB stats from data","460d9021":"# Create target columns ","935946b4":"# Change format of date column to date","f6df0775":"# Function to create dataframe for one team's away and home games\n\nBy doing this we can the make cumalative stat totals for the teams games both home and away from one column. We can then get a running look of their batting\/pitching\/fielding stats through the season. ","47b1d472":"\n# Baseball Game Predictor \n\u200b\nThere are lots of statistics used in baseball. For teams these are usually calculated from the start of the season to the current time or if by player for their entire career. One for the things I wanted do here was calculate the average for every team based on past x number of games. The number x will be a parameter to tune. The number selected for x will then essentially mean the form of the team. For example if we pick then number 3 then the batting average for the 4th game will be calculated over the prior three games. So if they have performed well in batting for the last three games the expectation is they will perform well in the 4th game. But should this include the last 4, 5 or 20 games? This will have to be tuned in the model and the best outcome for the validation data will be used. \n\u200b\n\nBecause the game logs keep the data in home and visiting team columns, each team has its data separated.  I need to create separate data frames for each team with a set of common data columns where all the game data for that team can be stored. From there I can work out the cumulative stats over the games in date\/index order. I can then reassemble the main data frame using the indexes so the visitor and home data correspond to the cumulative data in the individual team data frames.  \nI will do the following:\n\n\u2022  Rename the columns using the names from the data source \u2013 RetroGames (can be found in the Data file description) \n\u200b\n\n\u2022   Create a function that will separate each team into its own data frame with a common column for data from the home games and away games.\n\n\u2022   Create a function that will create cumaltive totals for the stats which will make it easier to create the baseball stats \n\n\n\u2022  Create a function that will convert these into common baseball stats \n\n\u200b\n\u2022   Create a function that will work out winning and losing percentage for each team\n\n\u200b   Create a function that then reasembles the mean data frame of all games with the correct MLB stats to each home or away team ","ae1ef64d":"# Sort numerical columns from categorical columns"}}