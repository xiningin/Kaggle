{"cell_type":{"513d4254":"code","6a3dbfdd":"code","bc74adc5":"code","a6672121":"code","b3e4a09f":"code","d68536b3":"code","364093fe":"code","607244d8":"code","5fcbf47c":"code","e1b43d63":"code","11c1ff47":"code","f954f2db":"code","ba15d637":"code","243948c9":"code","4f9a5e8f":"code","79ddd6f2":"code","44b6b863":"code","854dc086":"code","0a72bb30":"code","49f45995":"code","c2ce4f6c":"code","dcb506c0":"code","7ab81c6e":"code","6882e2aa":"code","964d2b2d":"code","83840753":"code","470fd45e":"code","933f637a":"code","81a2ee5d":"code","6e861f7d":"code","942e8132":"code","5782b0e0":"code","8591c8fc":"code","b3486d8a":"code","760ddc06":"code","81a461fe":"code","19418a6f":"code","7bab0a80":"code","403ea52c":"code","e5b02765":"code","13a159c6":"code","bc97352c":"code","e8e74e00":"code","ab0d5c52":"code","1d5d0aa0":"code","0540702d":"code","00f1c6f4":"code","45e16b2b":"code","60f2700c":"code","5c777071":"code","7cf3ebf9":"code","4d6716d8":"code","8dfab355":"code","be89fd4e":"code","e112edfb":"code","e4fff384":"markdown","23e98dae":"markdown","4ade5fff":"markdown","4add34e0":"markdown","432b7207":"markdown","e6a95ebf":"markdown","398dfc0e":"markdown","439dd8c6":"markdown","69aed691":"markdown"},"source":{"513d4254":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport statistics\nimport os\n\nwarnings.filterwarnings('ignore')\nsns.set_style('darkgrid')\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6a3dbfdd":"train=pd.read_csv(\"..\/input\/best-multiclassification-model\/train_data.csv\/train_data.csv\")","bc74adc5":"train.head()","a6672121":"train.shape","b3e4a09f":"train.info()","d68536b3":"train.describe()","364093fe":"train.isnull().sum()","607244d8":"train['Bed Grade'].dtypes\ntrain[\"City_Code_Patient\"].dtypes","5fcbf47c":"train['Bed Grade'].fillna(statistics.mode(train['Bed Grade']),inplace=True)\ntrain['City_Code_Patient'].fillna(statistics.mode(train['City_Code_Patient']),inplace=True)","e1b43d63":"train.isnull().sum()","11c1ff47":"train.drop(['case_id', 'patientid'], axis=1, inplace=True)","f954f2db":"cat_cols=[]\nnum_cols=[]\n\nfor col in train.columns:\n    if train[col].dtypes=='object':\n        cat_cols.append(col)\n        \nfor col in train.columns:\n    if train[col].dtypes!='object':\n        num_cols.append(col)\n        \nprint(cat_cols ,'\\n\\n')\n\n\nprint(num_cols)","ba15d637":"cat_cols=[]\nnum_cols=[]\n\nfor col in train.columns:\n    if train[col].dtypes=='object':\n        cat_cols.append(col)\n        \nfor col in train.columns:\n    if train[col].dtypes!='object':\n        num_cols.append(col)\n        \nprint(cat_cols)\nprint(num_cols)","243948c9":"train.info()","4f9a5e8f":"i=1\nplt.figure(figsize=(28,20))\nfor col in cat_cols:\n    plt.subplot(5,2,i)\n    sns.countplot(train[col])\n    i=i+1\nplt.show()","79ddd6f2":"train['Stay'].value_counts()","44b6b863":"train['Stay'].replace('More than 100 Days', '>100', inplace=True)","854dc086":"train['Stay'].value_counts()","0a72bb30":"train['Stay']= train['Stay'].replace({'0-10':0, '11-20':0, '21-30':1, '31-40':1, '41-50':1, '51-60':2,'61-70':2,'71-80':2,'81-90':2,'91-100':2,'>100':2})","49f45995":"train[\"Stay\"].value_counts()","c2ce4f6c":"i=1\nplt.figure(figsize=(28,18))\nfor col in num_cols:\n    plt.subplot(4,2,i)\n    sns.distplot(train[col])\n    i=i+1\n    \nplt.show()","dcb506c0":"from sklearn.preprocessing import LabelEncoder\n\nle= LabelEncoder()\ncat_cols.append('Bed Grade')\ncat_cols.append('City_Code_Hospital')\ncat_cols.append('City_Code_Patient')\nfor col in cat_cols:\n    train[col]= le.fit_transform(train[col])","7ab81c6e":"print(train[\"Bed Grade\"].value_counts()) \nprint(\"\\n\",train[\"City_Code_Hospital\"].value_counts())\nprint(\"\\n\",train[\"City_Code_Patient\"].value_counts())","6882e2aa":"num_cols.remove('Bed Grade')\nnum_cols.remove('City_Code_Hospital')\nnum_cols.remove('City_Code_Patient')\nnum_cols","964d2b2d":"plt.figure(figsize=(12,12))\nsns.heatmap(train.corr(), annot=True, cmap='coolwarm')","83840753":"from sklearn.preprocessing import StandardScaler\n\nss= StandardScaler()\n\ntrain[num_cols]= ss.fit_transform(train[num_cols].values)\n","470fd45e":"a=pd.concat([train[cat_cols],train[num_cols]],axis=1)\na","933f637a":"from sklearn.model_selection import train_test_split\n\ny= a['Stay']\nX= a.drop('Stay', axis=1)","81a2ee5d":"X_train, X_test, y_train,y_test= train_test_split(X,y,test_size= 0.2, stratify=y, random_state=42)","6e861f7d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import RandomizedSearchCV","942e8132":"params= {'objective':['binary:logistic'],\n              'max_depth': [3,4,5,6],\n              'min_child_weight': [1,5,10,12],\n              'subsample': [0.6,0.8,1.0],\n              'colsample_bytree': [0.6,0.8,1.0], 'gamma': [0.5,1,1.5,2]}\n\nxgb= XGBClassifier(n_estimators=600)\n\ngrid= RandomizedSearchCV(xgb, cv=3, verbose=3,param_distributions= params, n_iter=5)\ngrid.fit(X,y)","5782b0e0":"grid.best_estimator_","8591c8fc":"grid.best_score_","b3486d8a":"y_pred= grid.best_estimator_.predict(X_test)\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","760ddc06":"test= pd.read_csv('..\/input\/best-multiclassification-model\/test_data.csv\/test_data.csv')\ntest.head()","81a461fe":"test['Bed Grade'].fillna(statistics.mode(test['Bed Grade']),inplace=True)\ntest['City_Code_Patient'].fillna(statistics.mode(test['City_Code_Patient']),inplace=True)","19418a6f":"test.drop(['case_id', 'patientid'], axis=1, inplace=True)","7bab0a80":"grid.best_score_","403ea52c":"grid.best_estimator_","e5b02765":"test[num_cols]= ss.transform(test[num_cols].values)","13a159c6":"test","bc97352c":"a.shape","e8e74e00":"test.shape","ab0d5c52":"test.info()","1d5d0aa0":"a.info()","0540702d":"test","00f1c6f4":"test[num_cols]= ss.transform(test[num_cols].values)","45e16b2b":"predictions= grid.best_estimator_.predict(test)","60f2700c":"np. set_printoptions(threshold=np. inf)\nprint(predictions)","5c777071":"sns.countplot(predictions)","7cf3ebf9":"submission= pd.read_csv('..\/input\/best-multiclassification-model\/sample_sub.csv\/sample_sub.csv')","4d6716d8":"submission.head()","8dfab355":"submission['Stay']= predictions","be89fd4e":"submission['Stay']= submission['Stay'].replace({0:'Less than 20 days', 1:'21-50 days', 2:'51-100+ days'})","e112edfb":"submission","e4fff384":"# Please UpVote if you like the Notebook","23e98dae":"# Building our Model","4ade5fff":"# Scaling Numerical Columns","4add34e0":"**I found that some columns in numerical category were actually categorical columns. So I shifted them to the category**","432b7207":"# Final Predictions","e6a95ebf":"# Exploratory Data Analysis","398dfc0e":"# Dividing the Labels\n**Here, I divide the stay duration into 3 categories**\n\n0: 0-20 days\n1: 21-60 days\n2: 61-100+ days\n\nYou might say why a disproportionate distribution. This is to balance the number of patients in each category\n\nPlus the model will not give good prediction accuracy if there are 11 classes to predict. It would have given good results if there were a proportionate number of rows give, example 1,000,000 but with the amount of data we have, we can get a decent accuracy with 3 labels to predict.","439dd8c6":"# Load Data","69aed691":"**Dividing the columns into categorical and numerical for EDA**"}}