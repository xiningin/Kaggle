{"cell_type":{"243f806c":"code","ab182e31":"code","023764e8":"code","deee46bf":"code","34164c74":"code","a03ba0ba":"code","79797242":"code","6abed150":"code","09cfe2fb":"code","627021db":"code","a869715a":"code","ab057c36":"code","87ac6667":"code","a8188639":"code","c8021a62":"code","af2e2752":"code","4212ba96":"code","fe13f39a":"code","6a5a1cca":"code","3388e08e":"code","e7c975c8":"code","e3ee8ee4":"code","677e0295":"code","a09e9428":"code","be4d61ed":"code","70629d4d":"code","df954208":"code","0d31f6ef":"code","f9e7a706":"code","7de6a62f":"code","67d28125":"code","a38d871f":"code","d40e4be8":"code","af05d88d":"markdown","3c516272":"markdown","8bc57208":"markdown","f247d5ee":"markdown","6178bd44":"markdown","50d95f58":"markdown","e6363042":"markdown","c3b27660":"markdown","e7eb5ac8":"markdown"},"source":{"243f806c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab182e31":"import pandas as pd\nimport numpy as np  # \ud30c\uc774\uc36c\uc5d0\uc11c \uc218\uce58\uacc4\uc0b0\uc744 \ud558\ub824\uace0 \ud560\ub54c numpy\uc758 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\nfrom sklearn import tree\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom matplotlib import font_manager, rc\nimport platform \n\nif platform.system() == 'Windows': \n    path = 'c:\/Windows\/Fonts\/malgun.ttf'\n    font_name = font_manager.FontProperties(fname=path).get_name()\n    rc('font', family=font_name)\nelif platform.system() == 'Darwin':\n    rc('font', family='AppleGothic')","023764e8":"df =pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf","deee46bf":"df.info()\n# \uc774 \ub370\uc774\ud130 \uc14b\uc740 \uacb0\uce21\uce58\uac00 \uc5c6\ub294 \uc0c1\ud0dc\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","34164c74":"df.isnull().sum()","a03ba0ba":"df.isnull()","79797242":"import missingno as msno\nmsno.matrix(df)","6abed150":"df.describe()","09cfe2fb":"df.columns","627021db":"feature_columns = df.columns[:-1].to_list()\nfeature_columns ","a869715a":"cols = feature_columns[1:]\ncols","ab057c36":"# 0\uc774\ub77c\uace0 \ub418\uc5b4 \uc788\ub294\uac12\ub4e4\uc744 np.nan\uc73c\ub85c (\uacb0\uce21\uce58\ub85c) \ubc14\uafb8\uc5b4 \uc900\ub2e4\uc74c \uc2dc\uac01\ud654\ub97c \ud574\ubcf4\uc790\ndf_null=df[cols].replace(0,np.nan)\ndf_null=df_null.isnull()\ndf_null.sum()","87ac6667":"df_null.sum().plot.barh()  #\uacb0\uce21\uce58\uac00 \uc5b4\ub514\uc5d0 \ub9ce\uc740\uc9c0\ub97c \uc218\uc9c1\ud615 \ub9c9\ub300\uadf8\ub798\ud504\ub85c \uc54c\uc544\ubcf4\uc790","a8188639":"# \uc6d0\ub798 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uba3c\uc800 .isnull\ub85c \ub9cc\ub4e4\uc5b4 \ub193\uc740 \ub2e4\uc74c .mean()\uc744 \ud574\uc57c\ud55c\ub2e4.\ndf_null.mean() *100  # \uacb0\uce21\uce58\ub4e4\ub9cc \uace8\ub77c\ub193\uc740 \ub370\uc774\ud130\ud504\ub808\uc784 \ub4a4\uc5d0 mean\uc744 \ud558\uac8c\ub418\uba74 \uacb0\uce21\uce58\ub4e4\uc758 \ube44\uc728\uc744 \uc54c \uc218 \uc788\ub2e4.","c8021a62":"#\uacb0\uce21\uce58\ub97c heatmap\uc73c\ub85c \uc2dc\uac01\ud654 \ud558\uae30\nplt.figure(figsize=(15,5))\nsns.heatmap(df_null,cmap='Greys_r')\n# \uacb0\uce21\uce58\ub9cc \ud770\uc0c9\uc73c\ub85c \ub098\uc624\uac8c \ub41c\ub2e4","af2e2752":"#\uc815\ub2f5\uac12\uc778 Outcome\uc758 \uac2f\uc218\ub97c \ubcf4\uc790\ndf['Outcome'].value_counts()\n#\ub2f9\ub1e8\ubcd1\uc774 \ubc1c\ubcd1\ud55c\ub2e4 1, \ubc1c\ubcd1\ud558\uc9c0 \uc54a\ub294\ub2e4 0","4212ba96":"df['Outcome'].value_counts(normalize=True)  # value_counts(normalize=True)\ud558\uac8c \ub418\uba74 \ube44\uc728\uc744 \uad6c\ud574\uc900\ub2e4.\n# \ubc1c\ubcd1: \uc57d 35%,  \ubc1c\ubcd1\ud558\uc9c0 \uc54a\uc74c: \uc57d 65%","fe13f39a":"df.groupby([\"Pregnancies\"])[\"Outcome\"].mean()  # \uc784\uc2e0 \ud69f\uc218\uac00 \ub298\uc5b4\ub0a0 \uc218\ub85d \ub2f9\ub1e8\ubcd1\uc774 \ubc1c\uc0dd\ud560 \ud655\ub960\ub3c4 \uc62c\ub77c\uac04\ub2e4.","6a5a1cca":"df.groupby([\"Pregnancies\"])[\"Outcome\"].agg([\"mean\",\"count\"])\n\n#\uc784\uc2e0\ud55c \ud69f\uc218\uc5d0 \ub300\ud55c \ube48\ub3c4\uc218\ub3c4 \uac19\uc774 \uc54c\uc544\ubcf4\uc558\ub2e4","3388e08e":"df_po=df.groupby([\"Pregnancies\"])[\"Outcome\"].agg([\"mean\",\"count\"]).reset_index()\ndf_po","e7c975c8":"#\uc784\uc2e0\ud69f\uc218\uc5d0 \ub530\ub978 \ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1 \ube44\uc728   plot\uc740 \uce7c\ub7fc1\uac1c\ub2f9 1\uac1c\uc758 \uc120\uc73c\ub85c \uadf8\ub824\uc900\ub2e4.\ndf_po.plot()","e3ee8ee4":"fig,((ax1,ax2)) = plt.subplots(nrows=1,ncols=2)\ndf_po['mean'].plot(ax=ax1)\ndf_po['mean'].plot.bar(ax=ax2,rot=0,figsize=(16,8))\n#plot\uc77c\ub54c\ub294 \uadf8\ub0e5 \uc548\uc5d0 figsize=()\ub97c \uc801\uc5b4\uc8fc\uba74 \ub41c\ub2e4.","677e0295":"fig,((ax1,ax2))=plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(18,8)\n#sns\ub294 \ubc14\uae65\uc5d0 plt.figure(figsize=()) \ub610\ub294 fig.set_size_inches()\ub97c \ud574\uc918\uc57c \ud55c\ub2e4.\n\nsns.countplot(data=df, x=\"Outcome\",ax=ax1)\nsns.countplot(data=df, x=\"Pregnancies\",ax=ax2, hue=\"Outcome\")","a09e9428":"# \uc784\uc2e0\ud69f\uc218\uac00 7\ubc88 \uc774\uc0c1\uc744 \uae30\uc900\uc73c\ub85c Pregnancies_high\ub77c\ub294 \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5c8\ub2e4.\ndf[\"Pregnancies_high\"]=df[\"Pregnancies\"]>=7\ndf[[\"Pregnancies\",\"Pregnancies_high\"]].head()","be4d61ed":"#Pregnacies_high \ubcc0\uc218\uc758 \ube48\ub3c4\uc218\ub97c \uc54c\uc544\ubcf4\uace0 Outcome \uac12\uc5d0 \ub530\ub77c \ub2e4\ub978 \uc0c9\uc0c1\uc73c\ub85c \ud45c\ud604\ud574\ubcf4\uc558\ub2e4.\nsns.countplot(data=df, x=\"Pregnancies_high\",hue=\"Outcome\")","70629d4d":"#\ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1\uc5d0 \ub530\ub978 BMI\uc218\uce58\ub97c \ube44\uad50\nsns.barplot(data=df, x=\"Outcome\",y=\"BMI\")","df954208":"#\ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1\uc5d0 \ub530\ub978 \ud3ec\ub3c4\ub2f9 \uc218\uce58\ub97c \ube44\uad50\nsns.barplot(data=df,x=\"Outcome\",y=\"Glucose\")","0d31f6ef":"sns.barplot(data=df,x=\"Outcome\",y=\"Insulin\")","f9e7a706":"fig,((ax1,ax2,ax3)) = plt.subplots(nrows=1,ncols=3)\nfig.set_size_inches(18,8)\nsns.barplot(data=df, x=\"Outcome\",y=\"BMI\",ax=ax1)\nsns.barplot(data=df,x=\"Outcome\",y=\"Glucose\",ax=ax2)\nsns.barplot(data=df,x=\"Outcome\",y=\"Insulin\",ax=ax3)","7de6a62f":"plt.figure(figsize=(10,6))\nsns.barplot(data=df,x=\"Pregnancies\",y=\"Outcome\")","67d28125":"# \uc784\uc2e0\ud69f\uc218(Pregnancies)\uc5d0 \ub530\ub978 \ud3ec\ub3c4\ub2f9(Glucose) \uc218\uce58\ub97c \ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1\uc5ec\ubd80(Outcome)\uc5d0 \ub530\ub77c \uc2dc\uac01\ud654 \nplt.figure(figsize=(10,6))\nsns.barplot(data=df,x=\"Pregnancies\",y=\"Glucose\",hue=\"Outcome\")","a38d871f":"# \uc784\uc2e0\ud69f\uc218(Pregnancies)\uc5d0 \ub530\ub978 \uccb4\uc9c8\ub7c9\uc9c0\uc218(BMI)\ub97c \ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1\uc5ec\ubd80(Outcome)\uc5d0 \ub530\ub77c \uc2dc\uac01\ud654 \nplt.figure(figsize=(10,6))\nsns.barplot(data=df,x=\"Pregnancies\",y=\"BMI\",hue=\"Outcome\")","d40e4be8":"#\uc778\uc290\ub9b0 \uc218\uce58\uc5d0 \uacb0\uce21\uce58\uac00 \ub9ce\uae30 \ub54c\ubb38\uc5d0 0\ubcf4\ub2e4 \ud070\uac12\uc5d0 \ub300\ud574\uc11c\ub9cc \uadf8\ub9ac\uac8c \ub41c\ub2e4.\nplt.figure(figsize=(20,9))\nsns.boxplot(data=df, x=\"Pregnancies\", y=\"Insulin\",hue=\"Outcome\")","af05d88d":"## \uacb0\uce21\uce58\uac00 \ub9ce\uc740\uc9c0 \ud655\uc778\ud574\ubcf4\uae30","3c516272":"\uacb0\uce21\uce58 0 \ub77c\uace0 \uc0dd\uac01\ud588\uc73c\ub098... \uc54c\uace0\ubcf4\ub2c8... \uce21\uc815 \uc548\ub41c\uac83\uc744 \uc8c4\ub2e4 0\uc73c\ub85c \ud574\ub1a8\ub2e8\uac83\uc744 \uc54c\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.","8bc57208":"\ub370\uc774\ud130\uc5d0 \uacb0\uce21\uce58\uac00 \uc788\ub294\uc9c0 \uc5c6\ub294\uc9c0\ub97c \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.","f247d5ee":"## \uadf8\ub798\ud504\ub4e4\uc744 \ud55c\ubc88\uc5d0 \ud569\uccd0\uc11c \ubcf4\uae30","6178bd44":"\uc778\uc290\ub9b0: 48%\uac00 \uacb0\uce21\uce58\ub2e4. \/ \ud53c\ubd80\ub450\uaed8: 29%\uac00 \uacb0\uce21\uce58\uc600\uc2b5\ub2c8\ub2e4.... \u314e\u3137\u3137","50d95f58":"## \uc784\uc2e0 \ud69f\uc218\uc5d0 \ub530\ub978 \ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1 \ube48\ub3c4\uc218","e6363042":"## \uc784\uc2e0\ud69f\uc218\uc5d0 \ub530\ub978 \ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1 \ube44\uc728 \ube44\uad50","c3b27660":"\uc778\uc290\ub9b0 \ud638\ub974\ubaac\uc5d0 \ub300\ud55c \uacb0\uce21\uce58\uac00 \ubb34\uc9c0\ub9c9\uc9c0\ud558\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.","e7eb5ac8":"\uc778\uc290\ub9b0\uc740 \ub2f9\ub1e8\ubcd1\uc5d0 \ub9e4\uc6b0 \uc911\uc694\ud55c \uc18c\ud654 \ud6a8\uc18c\uc774\ubbc0\ub85c \uacb0\uce21\uce58\ub97c \ub0b4\ubc84\ub824\ub450\ub294 \uac83\uc740 \uc633\uc9c0 \uc54a\ub2e4\uace0 \ud310\ub2e8\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\uc778\uc290\ub9b0\uc758 \uacb0\uce21\uce58\ub97c \ucc44\uc6cc\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4."}}