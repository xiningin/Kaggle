{"cell_type":{"a211f540":"code","a779b175":"code","4fe83726":"code","d63227fc":"code","1054d3d3":"code","9d72048c":"code","3c905486":"code","50af6720":"code","0b96d6c7":"code","15a4f11c":"code","b0c80d18":"code","8d047c1b":"code","2f56ede3":"code","b00bbe9f":"code","bb6483a1":"code","a1f136bc":"code","ed3cc73c":"code","f47705e2":"code","ad40feb8":"markdown"},"source":{"a211f540":"import matplotlib.pyplot as plt\nplt.style.use('ggplot') \nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats\nfrom xgboost import XGBRegressor\nimport warnings\nimport json\nfrom plotnine import *\nwarnings.filterwarnings('ignore')\n%matplotlib inline","a779b175":"wineDataBase = pd.read_csv('..\/input\/wine-reviews\/winemag-data-130k-v2.csv')\n","4fe83726":"#verificando o tamanho da Base\nwineDataBase.shape","d63227fc":"wineDataBase.describe()","1054d3d3":"wineDataBase.head(3)","9d72048c":"def resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary\n\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n\nresumetable(wineDataBase)","3c905486":"\n#Verificando valores nulos\ntotal = wineDataBase.isnull().sum().sort_values(ascending=False)\npercent = (wineDataBase.isnull().sum()\/wineDataBase.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","50af6720":"import squarify \n\ndf_raw = wineDataBase\n\ndf = df_raw.groupby('points').size().reset_index(name='counts')\nlabels = df.apply(lambda x: str(x[0]) + \"\\n (\" + str(x[1]) + \")\", axis=1)\nsizes = df['counts'].values.tolist()\ncolors = [plt.cm.Spectral(i\/float(len(labels))) for i in range(len(labels))]\n\nplt.figure(figsize=(12,8), dpi= 80)\nsquarify.plot(sizes=sizes, label=labels, color=colors, alpha=.8)\n\nplt.title('Treemap of Vechile Class')\nplt.axis('off')\nplt.show()","0b96d6c7":"\ndf = wineDataBase.head(1000).dropna()\n(ggplot(df)\n     + aes('points', 'price')\n     + aes(color='points')\n     + geom_point()\n     + stat_smooth()\n     + facet_wrap('~variety')\n)","15a4f11c":"(ggplot(df, aes('points', 'price'))\n + geom_point()\n)","b0c80d18":"plt.figure(figsize = (40, 20))\nsns.boxplot(x = 'country', y = 'points',  data = wineDataBase)","8d047c1b":"b = wineDataBase.groupby('country')[['points','price']].mean()\nb = b.sort_values(by=['points'],ascending=False)\na4_dims = (11.7, 8.27)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.scatterplot(x='points',y='price',hue= b.index, data = b)","2f56ede3":"b.head(10)","b00bbe9f":"def estatistica(pais):\n    media = wineDataBase[wineDataBase['country'] == pais\n                       ].points.mean()\n    moda = wineDataBase[wineDataBase['country'] == pais\n                      ].points.mode()[0]\n    mediana = wineDataBase[wineDataBase['country'] == pais\n                     ].points.median()\n    desvio = wineDataBase[wineDataBase['country'] == pais\n                        ].points.std()\n    estado = {'moda': float(moda), 'mediana': float(mediana), 'media': float(media), 'desvio_padrao': float(desvio)}\n    return json.dumps(estado)","bb6483a1":"medidasEstatisticasPais = pd.DataFrame(wineDataBase.groupby('country')['points'].describe())","a1f136bc":"medidasEstatisticasPais = medidasEstatisticasPais.sort_values(by=['mean','std'],ascending =False)\nmedidasEstatisticasPais.head()","ed3cc73c":"medidasEstatisticasProvincia = pd.DataFrame(wineDataBase.groupby('province')['points'].describe())","f47705e2":"medidasEstatisticasProvincia = medidasEstatisticasProvincia.sort_values(by=['mean','std'],ascending =False)\nmedidasEstatisticasProvincia.head()","ad40feb8":"88 \u00e9 a nota mais distribu\u00edda \nNotas menores que 80 foram fracamente distribu\u00eddas"}}