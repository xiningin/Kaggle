{"cell_type":{"5c00474c":"code","c974f8f8":"code","2e7ea4f4":"code","5b0b0c3b":"code","267e6793":"code","3dbac5ad":"code","950a8701":"code","555764ba":"code","c72832b1":"code","8ed4553c":"code","cbddc15a":"code","0bbf25f6":"code","baa6d31b":"markdown","ed9c90ab":"markdown","63d9ec79":"markdown","ab78a50d":"markdown","39eb51f2":"markdown","1e116522":"markdown","a2499257":"markdown","8ea4dc52":"markdown","69a9fa2d":"markdown"},"source":{"5c00474c":"from bs4 import BeautifulSoup\nimport requests\nimport pandas as pd","c974f8f8":"all_years=pd.DataFrame(columns=['link','title','speaker','event','year'])\nyears=range(1996,2006)\nfor year in years:\n    speeches_one_year = pd.DataFrame()\n    page = requests.get(f'https:\/\/www.federalreserve.gov\/newsevents\/speech\/{year}speech.htm')\n    soup = BeautifulSoup(page.text, 'html.parser')\n    title = soup.select(\".title\")\n    speakers = soup.select(\".speaker\")\n    locations = soup.select(\".location\")\n    for i in range(len(title)):\n        speeches_one_year.at[i,'link'] = 'https:\/\/www.federalreserve.gov'+title[i].find_all('a', href=True)[0]['href']\n        speeches_one_year.at[i,'title'] = title[i].text.split('\\n')[1]\n        speeches_one_year.at[i,'speaker'] = speakers[i].text.split('\\n')[1].strip()\n        speeches_one_year.at[i,'event'] = locations[i].text.split('\\n')[1].strip()\n        speeches_one_year.at[i,'year'] = year\n    all_years=all_years.append(speeches_one_year,ignore_index=True)","2e7ea4f4":"years=range(2006,2021)\nfor year in years:\n    if year > 2010:\n        page = requests.get(f'https:\/\/www.federalreserve.gov\/newsevents\/speech\/{year}-speeches.htm')\n    else:\n        page = requests.get(f'https:\/\/www.federalreserve.gov\/newsevents\/speech\/{year}speech.htm')\n    soup = BeautifulSoup(page.text, 'html.parser')\n    events = soup.select(\".eventlist__event\")\n    speeches_one_year = pd.DataFrame()\n    for i,speech in enumerate(events):\n        speeches_one_year.at[i,'link'] = 'https:\/\/www.federalreserve.gov'+events[i].find_all('a', href=True)[0]['href']\n        speeches_one_year.at[i,'title'] = events[i].text.split('\\n')[2]\n        if events[i].text.split('\\n')[3]=='Watch Live' or events[i].text.split('\\n')[3]=='Video':\n            speeches_one_year.at[i,'speaker'] = events[i].text.split('\\n')[4]\n            speeches_one_year.at[i,'event'] = events[i].text.split('\\n')[5]\n        else:\n            speeches_one_year.at[i,'speaker'] = events[i].text.split('\\n')[3]\n            speeches_one_year.at[i,'event'] = events[i].text.split('\\n')[4]\n        speeches_one_year.at[i,'year'] = year\n    all_years=all_years.append(speeches_one_year,ignore_index=True)","5b0b0c3b":"old_site_version_length = sum(all_years['year']<1999)\nfor i in range(old_site_version_length):\n    print(i)\n    page = requests.get(all_years.loc[i,'link'])\n    soup = BeautifulSoup(page.text, 'html.parser')\n    text_list = [i for i in soup.find('p').getText().split('\\n') if i] \n    text_list=text_list[:-8]\n    text_list = ' '.join(text_list)\n    text_list = text_list.replace('--', ' ')\n    text_list = text_list.replace('\\r', '')\n    text_list = text_list.replace('\\t', '')\n    all_years.loc[i,'text'] = text_list","267e6793":"for i in range(len(all_years)):\n    if ((all_years.loc[i,'year']>1998) & (all_years.loc[i,'year']<2006)):\n        print(i)\n        page = requests.get(all_years['link'].iloc[i])\n        soup = BeautifulSoup(page.text, 'html.parser')\n        events = soup.select(\"table\")\n        if len(str(events[0].text))>600:\n            text_list = [i for i in events[0].text if i] \n        else:\n            text_list = [i for i in events[1].text if i]\n        text_list = ''.join(text_list)\n        text_list = text_list.replace('--', '')\n        text_list = text_list.replace('\\r', '')\n        text_list = text_list.replace('\\t', '')\n        if ((i>=383) & (i<=536)):\n            text_list = text_list.replace('     ', ' ')\n            text_list = text_list.replace('    ', ' ')\n        all_years.loc[i,'text'] = text_list","3dbac5ad":"black_listed=[744,748]\nfor i in range(1,len(all_years)):\n    if ((all_years.loc[i,'year']>2005) and (i not in black_listed)):\n        print(i)\n        page = requests.get(all_years.loc[i,'link'])\n        soup = BeautifulSoup(page.text, 'html.parser')\n        events = soup.select(\".col-md-8\")\n        text_list = events[1].text\n        text_list = text_list.replace('\\xa0', ' ')\n        text_list = text_list.replace('\\n', ' ')\n        all_years.loc[i,'text'] = text_list","950a8701":"all_years['date'] = all_years['link'].str.extract('(\\d\\d\\d\\d\\d\\d\\d\\d)')","555764ba":"all_years = all_years[~all_years['text'].isna()]\nall_years['text_len'] = all_years['text'].str.split().apply(len)","c72832b1":"all_years['location'] = all_years.event.str.split(', ').apply(lambda x: x[-1])","8ed4553c":"all_years.loc[all_years['speaker']=='Chairman  Ben S. Bernanke','speaker'] = 'Chairman Ben S. Bernanke'\nall_years.loc[all_years['speaker']=='Governor Ben S. Bernanke and Vincent R. Reinhart, Director, Division of Monetary Affairs','speaker'] = 'Governor Ben S. Bernanke'\nall_years.loc[all_years['speaker']=='Governor Donald L. Kohn and Brian P. Sack, Senior Economist','speaker'] = 'Governor Donald L. Kohn'\nall_years.loc[all_years['speaker']=='Governor Susan Schmidt Bies','speaker'] = 'Governor Susan S. Bies'\nall_years.loc[all_years['speaker']=='Vice Chair for Supervision and Chair of the Financial Stability Board Randal K. Quarles','speaker'] = 'Vice Chair for Supervision Randal K. Quarles'\nall_years.loc[all_years['speaker']=='Vice Chairman for Supervision and Chair of the Financial Stability Board Randal K. Quarles','speaker'] = 'Vice Chair for Supervision Randal K. Quarles'\nall_years.loc[all_years['speaker']=='Vice Chairman for Supervision Randal K. Quarles','speaker'] = 'Vice Chair for Supervision Randal K. Quarles'\nall_years.loc[all_years['speaker']=='Vice Chairman Roger W. Ferguson, Jr','speaker'] = 'Vice Chairman Roger W. Ferguson'\nall_years.loc[all_years['speaker']=='Vice Chairman Roger W. Ferguson, Jr.','speaker'] = 'Vice Chairman Roger W. Ferguson'\nall_years.loc[all_years['speaker']=='Chair Jerome H. Powell','speaker'] = 'Chairman Jerome H. Powell'\nall_years.loc[all_years['speaker']=='Vice Chair Richard H. Clarida','speaker'] = 'Vice Chairman Richard H. Clarida'\nall_years = all_years[all_years['speaker']!='Brian F. Madigan, Director, Division of Monetary Affairs']","cbddc15a":"all_years = all_years[all_years.text_len!=0]","0bbf25f6":"all_years.to_csv('fed_speeches_1996_2020.csv',index=False)","baa6d31b":"## Create a dataframe of all of the speeches","ed9c90ab":"## Import relevant packages","63d9ec79":"## Output to csv","ab78a50d":"## Get speeches length","39eb51f2":"## Get the speeches text","1e116522":"## Get speeches dates","a2499257":"## Fix speakers names","8ea4dc52":"## Get speeches location","69a9fa2d":"# This notebook is a copy of the notebook I used for scraping the speeches. It might not run from this kernel because of security issues. If you wish to run it yourself, download the notebook and run it on your local machine, or just copy the code."}}