{"cell_type":{"08a0bd0e":"code","d8dcdb84":"code","eae2c41d":"code","172e6b27":"code","1a1442a6":"code","c2974c8b":"code","53b200d8":"code","98e27407":"code","2fb80b27":"code","fe753c3f":"code","3d00a333":"code","b6ea72a4":"code","bf967a14":"code","960b6be0":"code","a8351523":"code","99521e27":"code","d038484d":"code","9e51b87f":"code","c2e268ec":"code","d44dccda":"code","c2ffc1d6":"code","27d2c20d":"code","63e3382f":"code","24ff4000":"code","68fe2acf":"code","9195ec85":"code","8c3f9423":"code","764ad9e1":"code","89a98817":"code","4eea76c3":"code","23e9e1aa":"code","6c2e605e":"code","079bbc1b":"code","99c4de23":"code","5186b8a5":"code","36bcaae3":"code","49357069":"code","8ca90077":"code","a7f97b2f":"code","22ede80b":"code","2cd62595":"code","4f29a51d":"code","6f5684b2":"code","58849b5d":"markdown","baf0ca2a":"markdown","d5b9a6c1":"markdown","efec98fe":"markdown","8f9bb895":"markdown","b9cf95b0":"markdown","5b14fe91":"markdown","50303515":"markdown"},"source":{"08a0bd0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d8dcdb84":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","eae2c41d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\nfrom fastai.imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *","172e6b27":"# make sure CUDA is available and enabled\nprint(torch.cuda.is_available(), torch.backends.cudnn.enabled)","1a1442a6":"comp_name = \"digit_recognizer\"\ninput_path = \"..\/input\/\"\nwd = \"\/kaggle\/working\/\"","c2974c8b":"def create_symlnk(src_dir, lnk_name, dst_dir=wd, target_is_dir=False):\n    \"\"\"\n    If symbolic link does not already exist, create it by pointing dst_dir\/lnk_name to src_dir\/lnk_name\n    \"\"\"\n    if not os.path.exists(dst_dir + lnk_name):\n        os.symlink(src=src_dir + lnk_name, dst = dst_dir + lnk_name, target_is_directory=target_is_dir)","53b200d8":"create_symlnk(input_path, \"train.csv\")\ncreate_symlnk(input_path, \"test.csv\")","98e27407":"# perform sanity check\n!ls -alh","2fb80b27":"# load data\ntrain_df = pd.read_csv(f\"{wd}train.csv\")\ntest_df = pd.read_csv(f\"{wd}test.csv\")","fe753c3f":"train_df.head()","3d00a333":"print(train_df.shape, test_df.shape)","b6ea72a4":"# create validation dataset\nval_df = train_df.sample(frac=0.2, random_state=1337)\nval_df.shape","bf967a14":"# remove validation data from train dataset\ntrain_df = train_df.drop(val_df.index)\ntrain_df.shape","960b6be0":"# separate labels from data\nY_train = train_df[\"label\"]\nY_valid = val_df[\"label\"]\nX_train = train_df.drop(\"label\", axis=1)\nX_valid = val_df.drop(\"label\", axis=1)","a8351523":"print(X_train.shape, X_valid.shape)\nprint(Y_train.shape, Y_valid.shape)","99521e27":"# display an actual image\/digit\nimg = X_train.iloc[0,:].values.reshape(28,28)\nplt.imshow(img, cmap=\"gray\")","d038484d":"def reshape_img(matrix):\n    \"\"\"\n    Reshape an existing 2D pandas.dataframe into 3D-numpy.ndarray\n    \"\"\"\n    try:\n        return matrix.values.reshape(-1, 28, 28)\n    except AttributeError as e:\n        print(e)\n        \ndef add_color_channel(matrix):\n    \"\"\"\n    Add missing color channels to previously reshaped image\n    \"\"\"\n    matrix = np.stack((matrix, ) *3, axis = -1)\n    return matrix\n\ndef convert_ndarry(matrix):\n    \"\"\"\n    Convert pandas.series into numpy.ndarray\n    \"\"\"\n    try:\n        return matrix.values.flatten()\n    except AttributeError as e:\n        print(e)\n        \n# reshape data and add color channels\nX_train = reshape_img(X_train)\nX_train = add_color_channel(X_train)\nX_valid = reshape_img(X_valid)\nX_valid = add_color_channel(X_valid)\ntest_df = reshape_img(test_df)\ntest_df = add_color_channel(test_df)\n\n# convert y_train and y_valid into proper numpy.ndarray\nY_train = convert_ndarry(Y_train)\nY_valid = convert_ndarry(Y_valid)","9e51b87f":"# run sanity checks\npreprocessed_data = [X_train, Y_train, X_valid, Y_valid, test_df]\nprint([e.shape for e in preprocessed_data])\nprint([type(e) for e in preprocessed_data])","c2e268ec":"# define architecture\n# arch = resnet50\n# sz = 28\n# classes = np.unique(Y_train)","d44dccda":"# data = ImageClassifierData.from_arrays(path=wd, \n#                                        trn=(X_train, Y_train),\n#                                        val=(X_valid, Y_valid),\n#                                        classes=Y_train,\n#                                        test=test_df\n#                                        #, tfms=tfms_from_model(arch, sz)\n#                                       )\n","c2ffc1d6":"# run learner with precompute enabled\n# learn = ConvLearner.pretrained(arch, data, precompute=True)","27d2c20d":"# fit learner\n# %time learn.fit(0.02, 2)","63e3382f":"# data.classes","24ff4000":"# lr_finder = learn.lr_find(start_lr=1e-5)","68fe2acf":"# Plotting learning rate across minibatches\n# learn.sched.plot_lr()","9195ec85":"# learn.sched.plot()","8c3f9423":"# tfms = tfms_from_model(resnet34, sz, max_zoom=1.1) #aug_tfms=transforms_side_on,\n\n# data = ImageClassifierData.from_arrays(path=wd, \n#                                        trn=(X_train, Y_train),\n#                                        val=(X_valid, Y_valid),\n#                                        classes=Y_train,\n#                                        test=test_df\n#                                        , tfms=tfms_from_model(arch, sz)\n#                                       )\n# learn = ConvLearner.pretrained(arch, data, precompute=True)\n# %time learn.fit(0.02, 2)\n","764ad9e1":"# shutil.rmtree(f'{wd}tmp', ignore_errors=True)","89a98817":"# Allos us to unfreeze layers\n# learn = ConvLearner.pretrained(arch, data, precompute=False)\n# %time learn.fit(0.02, 2)","4eea76c3":"# Cycle length - Number of epochs before resseting the learning lenght\n# 3 in here is number of epochs\n# learn.fit(1e-2, 3, cycle_len=2)","23e9e1aa":"# learn.sched.plot_lr()","6c2e605e":"# learn.save('mymodel_lastlayer')","079bbc1b":"# learn.load('mymodel_lastlayer')","99c4de23":"# shutil.rmtree(f'{wd}tmp', ignore_errors=True)","5186b8a5":"# learn = ConvLearner.pretrained(arch, data, precompute=False)\n# learn.unfreeze()","36bcaae3":"# lr=np.array([1e-4,1e-3,1e-2])\n# learn.fit(lr, 3, cycle_len=2)","49357069":"# learn.sched.plot_lr()","8ca90077":"arch = resnet50\nsz = 28\nclasses = np.unique(Y_train)\n\ntfms = tfms_from_model(arch, sz, max_zoom=1.1) #aug_tfms=transforms_side_on,\n\ndata = ImageClassifierData.from_arrays(path=wd, \n                                       trn=(X_train, Y_train),\n                                       val=(X_valid, Y_valid),\n                                       classes=classes,\n                                       test=test_df,\n                                       tfms=tfms_from_model(arch, sz)\n                                      )\n\n\nlearn = ConvLearner.pretrained(arch, data, precompute=False)\nlearn.unfreeze()\nlr = np.array([0.001, 0.0075, 0.01])\n","a7f97b2f":"learn.fit(lr, 3, cycle_len=1, cycle_mult=2)","22ede80b":"learn.save(\"mymodel_992\")","2cd62595":"log_preds, y = learn.TTA(is_test=True)","4f29a51d":"probs_test = np.mean(np.exp(log_preds), 0)\nresults = pd.DataFrame(probs_test)\nresults.index += 1\nresults = results.assign(Label = results.values.argmax(axis=1))\nresults = results.assign(ImageId = results.index.values)\nresults = results.drop([0,1,2,3,4,5,6,7,8,9], axis=1)","6f5684b2":"results.to_csv(f\"submission.csv\", index=False)","58849b5d":"# Set up","baf0ca2a":"# Submit results","d5b9a6c1":"# Cycle multiplier","efec98fe":"## Find the best Learning Rate","8f9bb895":"# Prepare Data","b9cf95b0":"# Unfreezing other layers","5b14fe91":"# Improving model further","50303515":"# Image transformations"}}