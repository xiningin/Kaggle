{"cell_type":{"9f88ffee":"code","3cdd8d5b":"code","cfd04133":"code","76b57e52":"code","384565f1":"code","0a9ac4ac":"code","31e4dc1b":"code","ee61c726":"code","729c95ff":"code","d965b7c0":"code","a83b233d":"code","3213beab":"code","1d35755d":"code","970bc634":"code","9053ab5d":"code","77e818c7":"code","e9cdff9b":"code","c9fbd03d":"code","e731c079":"code","0889d144":"code","be3b6c8f":"code","83dc9172":"code","93abea05":"code","10b20591":"code","57d55cdc":"code","736f3f00":"code","819eeb2e":"code","02954da0":"code","2419d522":"code","f26be73b":"code","fb4b4fd1":"code","644803eb":"code","4b80a760":"code","c8f4d56d":"code","0c208702":"code","c39debce":"code","f02a4668":"code","3f0fe8f5":"code","f509f2e7":"code","0c9d49b8":"code","8811514e":"code","6aa745f1":"code","f826a081":"code","3b61e0cc":"code","e7c82f6f":"markdown","2557ea56":"markdown","4c130d00":"markdown","e945495c":"markdown","0fbe6d9d":"markdown","be269927":"markdown","02766be1":"markdown","e7dfd945":"markdown","90e3073a":"markdown","79acf7e6":"markdown","05d6868b":"markdown","fd201e22":"markdown","37c8f50b":"markdown","d9fc5664":"markdown","61712b64":"markdown","45413562":"markdown","68b56a62":"markdown","3130e46d":"markdown","6c4cf463":"markdown","88762c91":"markdown","f8f13c6b":"markdown","d049f08f":"markdown","f6c64e06":"markdown","9733c8c7":"markdown","9dd3c696":"markdown","7ef42eb1":"markdown","d3992d33":"markdown","263a3e64":"markdown","95e0fcdc":"markdown","84f154d2":"markdown","0d769fe6":"markdown","8a446586":"markdown","e8603270":"markdown","75be8f89":"markdown","0a7827d8":"markdown","9a25f209":"markdown","9924c600":"markdown","60ae329c":"markdown","93d664dd":"markdown","df38bd21":"markdown"},"source":{"9f88ffee":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3cdd8d5b":"#load data\nmain_df=pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\nmain_df.head()","cfd04133":"main_df.info()","76b57e52":"# Visualize missing values as a matrix\nmsno.matrix(main_df);","384565f1":"# Visualize the number of missing values as a bar chart\nmsno.bar(main_df);","0a9ac4ac":"# Visualize the correlation between the number of missing values in different columns as a heatmap\nmsno.heatmap(main_df);","31e4dc1b":"for i in main_df.columns:\n    null_rate = main_df[i].isna().sum() \/ len(main_df) * 100 \n    if null_rate > 0 :\n        print(\"{}'s null rate :{}%\".format(i,round(null_rate,2)))","ee61c726":"#number of unique elements\nmain_df.nunique()","729c95ff":"#Detect missing values\nmain_df.isna().sum()","d965b7c0":"main_df[\"rating\"].unique()","a83b233d":"main_df[main_df[\"rating\"].isna()]","3213beab":" rating_replacements = {\n    67: 'TV-PG',\n    2359: 'TV-14',\n    3660: 'TV-MA',\n    3736: 'TV-MA',\n    3737: 'NR',\n    3738: 'TV-MA',\n    4323: 'TV-MA '\n}\n\nfor id, rate in rating_replacements.items():\n    main_df.iloc[id, 8] = rate\n    \nmain_df['rating'].isna().sum()","1d35755d":"main_df = main_df.drop(['director', 'cast'], axis=1)\nmain_df.columns","970bc634":"main_df[main_df['date_added'].isna()]","9053ab5d":"main_df=main_df[main_df[\"date_added\"].notna()]","77e818c7":"main_df['country'] = main_df['country'].fillna(main_df['country'].mode()[0])","e9cdff9b":"# Lets retrieve just the first country\nmain_df['principal_country'] = main_df['country'].apply(lambda x: x.split(\",\")[0])\nmain_df['principal_country'].head()","c9fbd03d":"main_df.isna().sum()","e731c079":"main_df.dtypes","0889d144":"main_df['year_added'] = main_df['date_added'].apply(lambda x: x.split(\" \")[-1])\nmain_df['year_added'].head()","be3b6c8f":"main_df['month_added'] = main_df['date_added'].apply(lambda x: x.split(\" \")[0])\nmain_df['month_added'].head()","83dc9172":"ratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}\n\nmain_df['target_ages'] = main_df['rating'].replace(ratings_ages)\nmain_df['target_ages'].unique()","93abea05":"# type should be a category\nmain_df['type'] = pd.Categorical(main_df['type'])\n\n# target_ages is another category (4 classes)\nmain_df['target_ages'] = pd.Categorical(main_df['target_ages'], categories=['Kids', 'Older Kids', 'Teens', 'Adults'])\n\n# Year added should be integer so we can compare with `released_year`\nmain_df['year_added'] = pd.to_numeric(main_df['year_added'])","10b20591":"main_df.dtypes","57d55cdc":"plt.figure(figsize=(14, 7))\nlabels=['TV Show', 'Movie']\nplt.pie(main_df['type'].value_counts().sort_values(),labels=labels,explode=[0.1,0.1],\n        autopct='%1.2f%%',colors=['lightblue','royalblue'], startangle=90)\nplt.title('Type of Netflix Content')\nplt.axis('equal')\nplt.show()","736f3f00":"df_tv = main_df[main_df[\"type\"] == \"TV Show\"]\ndf_movies = main_df[main_df[\"type\"] == \"Movie\"]","819eeb2e":"movie_ratings = df_movies.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,7)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=movie_ratings)\nplt.title('Top Movie Ratings Based On Rating System',size='20')\nplt.show()","02954da0":"tv_ratings = df_tv.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,7)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=tv_ratings)\nplt.title('Top TV Show Ratings Based On Rating System',size='20')\nplt.show()","2419d522":"def generate_rating_df(main_df):\n    rating_df = main_df.groupby(['rating', 'target_ages']).agg({'show_id': 'count'}).reset_index()\n    rating_df = rating_df[rating_df['show_id'] != 0]\n    rating_df.columns = ['rating', 'target_ages', 'counts']\n    rating_df = rating_df.sort_values('target_ages')\n    return rating_df","f26be73b":"rating_df = generate_rating_df(main_df)\nfig = px.bar(rating_df, x='rating', y='counts', color='target_ages', title='Ratings of Movies And TV Shows Based On Target Age Groups',  labels={'counts':'COUNT', 'rating':'RATINGS', 'target_ages':'TARGET AGE GROUPS' })\nfig.show()","fb4b4fd1":"rating_order_movie =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\nrating_order_tv =  [ 'TV-Y', 'TV-G', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'TV-14', 'R', 'TV-MA']\nmovie_rating = df_movies['rating'].value_counts()[rating_order_movie]\ntv_rating = df_tv['rating'].value_counts()[rating_order_tv].fillna(0)\ndef rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(15, 7))\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\n    ax.set_title(f'Distribution of {title} Rating', fontsize=20, fontweight='bold', position=(0.5, 1.0+0.03))\n    plt.show()","644803eb":"rating_barplot(movie_rating,'Movie', 1500)","4b80a760":"rating_barplot(tv_rating,'TV Show' , 600, 1500)","c8f4d56d":"df_content = main_df['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_content['percent'] = df_content['count'].apply(lambda x : 100*x\/sum(df_content['count']))\n\n\ndf_tv1 = df_tv['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_tv1['percent'] = df_tv1['count'].apply(lambda x : 100*x\/sum(df_tv1['count']))\n\n\ndf_movies1 = df_movies['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_movies1['percent'] = df_movies1['count'].apply(lambda x : 100*x\/sum(df_movies1['count']))\n\nt1 = go.Scatter(x=df_movies1['year_added'], y=df_movies1[\"count\"], name=\"Movies\", marker=dict(color=\"royalblue\"))\nt2 = go.Scatter(x=df_tv1['year_added'], y=df_tv1[\"count\"], name=\"TV Shows\", marker=dict(color=\"red\"))\nt3 = go.Scatter(x=df_content['year_added'], y=df_content[\"count\"], name=\"Total Contents\", marker=dict(color=\"gold\"))\n\ndata = [t1, t2, t3]\n\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","0c208702":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"release_year\", data=df_movies, palette=\"coolwarm\", order=df_movies['release_year'].value_counts().index[0:15])\n\nplt.title('ANALYSIS ON RELEASE YEAR OF MOVIES', fontsize=15, fontweight='bold')\nplt.show()","c39debce":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"release_year\", data=df_tv, palette=\"coolwarm\", order=df_tv['release_year'].value_counts().index[0:15])\n\nplt.title('ANALYSIS ON RELEASE YEAR OF TV Show', fontsize=15, fontweight='bold')\nplt.show()","f02a4668":"from scipy.stats import norm\n\nplt.figure(figsize=(15,7))\nsns.distplot(df_movies['duration'].str.extract('(\\d+)'),fit=norm,kde=False, color=['red'])\nplt.title('Distplot with Normal distribution for Movies',fontweight=\"bold\")\nplt.show()","3f0fe8f5":"fig = px.histogram(x=df_tv['duration'])\nfig.update_xaxes(categoryorder=\"total descending\")\nfig.update_layout(\n    title=\"Distribution of TV Shows duration\",\n    xaxis_title=\"Duration of TV ShowS\",\n)\nfig.show()","f509f2e7":"plt.figure(figsize=(15,5))\nsns.barplot(x = df_movies[\"listed_in\"].value_counts().head(10).index,\n            y = df_movies[\"listed_in\"].value_counts().head(10).values,palette=\"pink\")\nplt.xticks(rotation=60)\nplt.title(\"Top10 Genre in Movies\",fontweight=\"bold\")\nplt.show()","0c9d49b8":"plt.figure(figsize=(15,5))\nsns.barplot(x = df_tv[\"listed_in\"].value_counts().head(10).index,\n            y = df_tv[\"listed_in\"].value_counts().head(10).values,palette=\"vlag\")\nplt.xticks(rotation=70)\nplt.title(\"Top10 Genre in TV Shows\",fontweight=\"bold\")\nplt.show()","8811514e":"from collections import Counter\ncountry_data = main_df['country']\ncountry_count = pd.Series(dict(Counter(','.join(country_data).replace(' ,',',').replace(\n    ', ',',').split(',')))).sort_values(ascending=False)\ntop20country = country_count.head(20)","6aa745f1":"plt.figure(figsize=(15,5))\nsns.barplot(x= top20country.index, y=top20country, palette=\"pastel\")\nplt.xticks(rotation=50)\nplt.title('Top 20 countries with most contents', fontsize=15, fontweight='bold')\nplt.show()","f826a081":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df_movies['listed_in'])\n\nplt.rcParams['figure.figsize'] = (12,12)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","3b61e0cc":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df_tv['listed_in'])\n\nplt.rcParams['figure.figsize'] = (12,12)\nwordcloud = WordCloud(background_color = 'black',colormap='vlag', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","e7c82f6f":"# <span style=\"font-family:serif; font-size:28px;\"> 2. Visualize missing values <\/span>\n","2557ea56":"### Fix \"date_added\" column","4c130d00":"Since it is difficult to find the date_added so I will drop these as they are only 10 rows.","e945495c":">  Nearly 2\/3rd of the content on netflix are movies while the rest are TV Show","0fbe6d9d":"I learnt the above visualization from @subinium , reference to his <a href=\"https:\/\/www.kaggle.com\/subinium\/simple-matplotlib-visualization-tips\"> notebook <\/a>","be269927":"## World Cloud-TV Show Genre","02766be1":"### Let's fix the datatype ","e7dfd945":"> **Heatmap shows the correlation of missingness between every 2 columns. A value near 0 means there is no dependence between the occurrence of missing values of two variables.**","90e3073a":"## Top10 Genre in Movies and TV Shows:","79acf7e6":"## Top-20 countries producing most contents:","05d6868b":"**Lets check how many nulls are there in the data** ","fd201e22":"Since there are only 7 rows so I decided to find there replacements from internet.","37c8f50b":"# <span style=\"font-family:serif; font-size:28px;\"> 3. Data Cleaning <\/span>\n","d9fc5664":"> There's less movies for the kids while more for teens and adults.","61712b64":"## Distribution of Movie duration","45413562":"### Let's fix the missing \"rating\"","68b56a62":"> We can say that mostTV Shows end by season 3","3130e46d":"> **This bar chart gives you an idea about how many missing values are there in each column.\n> \"director\" has the most missing value followed by \"cast\" and \"country\". There are few missing value in \"date_added\" and \"rating\".**\n\n","6c4cf463":"### Drop \"director\" and \"cast\" columns","88762c91":"# <span style=\"font-family:serif; font-size:28px;\"> 1. Quick look at the data<\/span>","f8f13c6b":"### Let's check the clean data","d049f08f":" <span style=\"color:crimson;font-family:serif; font-size:20px;\">  Please upvote if you liked the kernel! \ud83d\ude00\n    <p style=\"color:royalblue;font-family:serif; font-size:20px;\">KEEP KAGGLING!<\/p> \n<\/span>","f6c64e06":"**<center> <span style=\"color:crimson;font-family:serif; font-size:32px;\"> NETFLIX MOVIES AND TV SHOWS EDA \ud83d\udcca<\/span> <\/center>**","9733c8c7":"### Let's Generate new columns based on variables\n#### Year and month ","9dd3c696":"## World Cloud-Movie Genre","7ef42eb1":"* The growth in number of movies on netflix is much higher than that of TV shows\n* About 1200 new movies were added in both 2018 and 2019\n* The growth in content started from 2013","d3992d33":"> Most of the TV Shows were released in 2020 followed by 2019 and 2018","263a3e64":"\"rating\" for missing values has been fixed.","95e0fcdc":"> It is evident that majority of the movies have duration ranging from 85 min to 120 min.","84f154d2":"> TV Show are more for the kids and teens.","0d769fe6":"**The missing values are in:**\n\n* \"director\": Very less information-not needed for the analysis so I will be dropping this \n* \"cast\": there are too many diferent values so I will be dropping this \n* \"country\":Important variable hence we need to fix this\n* \"date_added\": there are just a few cases, so lets scrap them\n* \"rating\": there are just a few cases, so lets scrap them  ","8a446586":"There are some entry where \"country\" has multiple values. so i think i will add a new column with just the first one so we can check witch regions have more productions","e8603270":"#### Targets based on \"rating\"","75be8f89":"The dataset has 7787 rows and 12 columns:\n* show_id: unique id of each show (not much of a use for us in this notebook)\n* type: The category of a show, can be either a Movie or a TV Show\n* title: Name of the show\n* director: Name of the director(s) of the show\n* cast: Name of actors and other cast of the show\n* country: Name of countries the show is available to watch on Netflix\n* date_added: Date when the show was added on Netflix\n* release_year: Release year of the show\n* rating: Show rating on netflix\n* duration: Time duration of the show\n* listed_in: Genre of the show\n* description: Some text describing the show","0a7827d8":"![NNN.png](attachment:NNN.png)","9a25f209":"### Fix \"country\" missing values","9924c600":"# <span style=\"font-family:serif; font-size:28px;\"> 4. Data Visualization <\/span>","60ae329c":"\n> **Using this matrix you can very quickly find the pattern of missingness in the dataset.\nFrom the above visualisation we can observe that \"director\" has a peculiar pattern that stands out.\"cast\" and \"country\" have a similar pattern of missing values while column \"date_added\" shows a different pattern.**\n","93d664dd":"> Most of the movies were released in the year 2017 followed by 2018 and 2016.","df38bd21":" <span style=\"color:crimson;font-family:serif; font-size:28px;\"> Let's get started! <\/span>\n \nThis dataset consists of tv shows and movies available on Netflix as of 2019. The dataset is collected from Flixable which is a third-party Netflix search engine."}}