{"cell_type":{"f12762e2":"code","408dfc36":"code","4fa2b8df":"code","f5241648":"code","7debb34b":"code","edd37703":"code","20389240":"code","4ccec27f":"code","b3639dc3":"code","edacaf17":"code","eec15690":"code","82b6738a":"code","b4d8f3db":"code","8a9e9f51":"code","3ec77e2d":"code","20c3fb50":"code","8d1d1b40":"code","d6ab457e":"code","27f185df":"code","df997f73":"code","5be0e258":"code","1991c80f":"code","0e364167":"code","935e2ef8":"code","979efd54":"code","c784bfa2":"markdown","849122c2":"markdown","1c6dc8f1":"markdown","c93c9e07":"markdown","4e57a82e":"markdown","69ebf4c7":"markdown","1026120d":"markdown","4adb4e6f":"markdown","74c42e13":"markdown","cc2607bf":"markdown","2eee100c":"markdown","b587b57e":"markdown","25e991c2":"markdown","b1ec1489":"markdown","16d86893":"markdown","d1e12a95":"markdown","3f597cb1":"markdown","294f9e87":"markdown","c0a86d3e":"markdown","943963b0":"markdown","1f438001":"markdown","423d03ea":"markdown","24ae0c16":"markdown","516d3a16":"markdown","f0fbd5e6":"markdown","1174f7c9":"markdown","38aa63af":"markdown","304b99f3":"markdown","507a7ad3":"markdown","c9e9ac6c":"markdown","cfe88aa0":"markdown"},"source":{"f12762e2":"!pip install --upgrade wandb ","408dfc36":"import wandb\nfrom wandb.keras import WandbCallback\nimport os\n\nfrom kaggle_secrets import UserSecretsClient\nsecret_label = \"wandb_api\"\nsecret_value = UserSecretsClient().get_secret(secret_label)\nos.environ[\"WANDB_API_KEY\"] = secret_value\n\nconfig = dict (\n    architecture = \"Ensemble\",\n    dataset_id = \"tpu-getting-started\",\n    infra = \"TPU\",\n    use_models=[\"EfficientNetB7\", \"Xception\"],\n    ensemble_concat=\"maximum\",\n    epochs=30,\n    start_lr=0.000025, \n    min_lr=0.000001,\n    max_lr=0.01,\n    rampup_epochs=8, \n    sustain_epochs=8,\n    exp_decay=0.9\n)","4fa2b8df":"import math, re, os\nimport numpy as np\nimport tensorflow as tf\n\nprint(\"Tensorflow version \" + tf.__version__)","f5241648":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","7debb34b":"from kaggle_datasets import KaggleDatasets\n\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\nprint(GCS_DS_PATH) # what do gcs paths look like?","edd37703":"\nIMAGE_SIZE = [512, 512]\nGCS_PATH = GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\nAUTO = tf.data.experimental.AUTOTUNE\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') \n\nCLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102\n\n\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset","20389240":"def data_augment(image, label):\n    # set the seed for augmentation\n    \n    seed = (298, 29)\n    # Thanks to the dataset.prefetch(AUTO)\n    # statement in the next function (below), this happens essentially\n    # for free on TPU. Data pipeline code is executed on the \"CPU\"\n    # part of the TPU while the TPU itself is computing gradients.\n    image = tf.image.stateless_random_flip_left_right(image, seed=seed)\n    image = tf.image.stateless_random_flip_up_down(image, seed=seed)\n    image = tf.image.stateless_random_saturation(image, 0, 2, seed=seed)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec\n    # files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))\n","4ccec27f":"# Define the batch size. This will be 16 with TPU off and 128 (=16*8) with TPU on\nBATCH_SIZE = 8 * strategy.num_replicas_in_sync\n\nconfig[\"batch_size\"] = BATCH_SIZE\nds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n\nprint(\"Training:\", ds_train)\nprint (\"Validation:\", ds_valid)\nprint(\"Test:\", ds_test)","b3639dc3":"np.set_printoptions(threshold=15, linewidth=80)\n\nprint(\"Training data shapes:\")\nfor image, label in ds_train.take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())","edacaf17":"print(\"Test data shapes:\")\nfor image, idnum in ds_test.take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U=unicode string","eec15690":"\nfrom matplotlib import pyplot as plt\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case,\n                                     # these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is\n    # the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square\n    # or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\n\ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","82b6738a":"ds_iter = iter(ds_train.unbatch().batch(20))","b4d8f3db":"one_batch = next(ds_iter)\ndisplay_batch_of_images(one_batch)","8a9e9f51":"INPUT_SHAPE = tuple([*IMAGE_SIZE, 3])\nINPUT_LAYER = tf.keras.layers.Input(shape=INPUT_SHAPE)\n\ndef get_model(use_model, input_layer):\n    pretrained_model = getattr(tf.keras.applications, use_model)(\n        weights='imagenet',\n        include_top=False,\n        input_shape=INPUT_SHAPE\n    )\n\n    pretrained_model.trainable = False\n\n    model = pretrained_model(input_layer, training=False)\n    model = tf.keras.layers.GlobalMaxPooling2D()(model)\n    model = tf.keras.layers.Dropout(0.5)(model)\n    model = tf.keras.layers.Dense(len(CLASSES) * 2, activation=\"selu\")(model)\n\n    return model\n\ndef compile_model(model):\n    # This seems to set the minimum learning rate, and will cap the custom LR schedule if it's too high.\n    opt = tf.keras.optimizers.Adam(learning_rate=0.000001, epsilon=1)\n    model.compile(\n        optimizer=opt,\n        loss='sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy'])\n    print(model.summary())\n    return model\n\ndef build_models(input_layer):\n    with strategy.scope():\n        models = [get_model(m, INPUT_LAYER) for m in config[\"use_models\"]]\n        model = getattr(tf.keras.layers, config['ensemble_concat'])(models)\n        model = tf.keras.layers.Dropout(0.5)(model)\n        model = tf.keras.layers.Dense(len(CLASSES), activation = 'softmax')(model)\n        model = tf.keras.Model(inputs=[input_layer], outputs=[model])\n    return model\n    \nmodel = compile_model(build_models(INPUT_LAYER))","3ec77e2d":"\nimport os\n\ncheckpoint_filepath = f'\/tmp\/ecofsky-petal-head.h5'\n\ntry:\n    os.unlink(checkpoint_filepath)\nexcept FileNotFoundError:\n    pass\n\ncp_callback = tf.keras.callbacks.ModelCheckpoint(\n        checkpoint_filepath,\n        monitor=\"val_sparse_categorical_accuracy\",\n        verbose=1,\n        save_best_only=True,\n        save_weights_only=False,\n        mode=\"max\"\n    )","20c3fb50":"EPOCHS = config[\"epochs\"]\n\n# Learning Rate Schedule for Fine Tuning #\ndef exponential_lr(epoch,\n                   start_lr = config[\"start_lr\"], min_lr = config[\"min_lr\"], max_lr = config[\"max_lr\"],\n                   rampup_epochs = config[\"rampup_epochs\"], sustain_epochs = config[\"sustain_epochs\"],\n                   exp_decay = 0.9):\n\n    def lr(epoch, start_lr, min_lr, max_lr, rampup_epochs, sustain_epochs, exp_decay):\n        # linear increase from start to rampup_epochs\n        if epoch < rampup_epochs:\n            lr = ((max_lr - start_lr) \/\n                  rampup_epochs * epoch + start_lr)\n        # constant max_lr during sustain_epochs\n        elif epoch < rampup_epochs + sustain_epochs:\n            lr = max_lr\n        # exponential decay towards min_lr\n        else:\n            lr = ((max_lr - min_lr) *\n                  exp_decay**(epoch - rampup_epochs - sustain_epochs) +\n                  min_lr)\n        return lr\n    return lr(epoch,\n              start_lr,\n              min_lr,\n              max_lr,\n              rampup_epochs,\n              sustain_epochs,\n              exp_decay)\n\nlr_callback = tf.keras.callbacks.LearningRateScheduler(exponential_lr, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [exponential_lr(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))\n","8d1d1b40":"STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\nwith wandb.init(\n    project=\"flower-classification\",\n    config=config,\n    resume=\"never\",\n    reinit=True,\n    ):\n    history = model.fit(ds_train, validation_data=ds_valid, epochs=EPOCHS, steps_per_epoch=STEPS_PER_EPOCH, callbacks=[cp_callback, lr_callback, WandbCallback()])\n    model.load_weights(checkpoint_filepath)\n\n    model.trainable = True\n    model = compile_model(model)\n\n    history_fine = model.fit(ds_train, validation_data=ds_valid, epochs=EPOCHS, steps_per_epoch=STEPS_PER_EPOCH, callbacks=[cp_callback, lr_callback, WandbCallback()])\n    model.load_weights(checkpoint_filepath)","d6ab457e":"model.load_weights(checkpoint_filepath)\ndef plot_history(name, history):\n    display_training_curves(\n        history.history['loss'],\n        history.history['val_loss'],\n        f'{name}-loss',\n        211,\n    )\n    display_training_curves(\n        history.history['sparse_categorical_accuracy'],\n        history.history['val_sparse_categorical_accuracy'],\n        f'{name}-accuracy',\n        212,\n    )\n    display_training_curves(\n        history.history['loss'],\n        history.history['val_loss'],\n        f'{name}-loss',\n        211,\n    )\n    display_training_curves(\n        history.history['sparse_categorical_accuracy'],\n        history.history['val_sparse_categorical_accuracy'],\n        f'{name}-accuracy',\n        212,\n    )\n    \nplot_history(\"head\", history)\nplot_history(\"full\", history_fine)","27f185df":"\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n\ndef display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid'])","df997f73":"cmdataset = get_validation_dataset(ordered=True)\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\n\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy()\ncm_probabilities = model.predict(images_ds)\ncm_predictions = np.argmax(cm_probabilities, axis=-1)\n\nlabels = range(len(CLASSES))\ncmat = confusion_matrix(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n)\ncmat = (cmat.T \/ cmat.sum(axis=1)).T # normalize","5be0e258":"score = f1_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nprecision = precision_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nrecall = recall_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\ndisplay_confusion_matrix(cmat, score, precision, recall)","1991c80f":"dataset = get_validation_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)","0e364167":"images, labels = next(batch)\nprobabilities = model.predict(images)\npredictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)","935e2ef8":"test_ds = get_test_dataset(ordered=True)\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)","979efd54":"print('Generating submission.csv file...')\n\n# Get image ids from test set and convert to unicode\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\n# Write the submission file\nnp.savetxt(\n    'submission.csv',\n    np.rec.fromarrays([test_ids, predictions]),\n    fmt=['%s', '%d'],\n    delimiter=',',\n    header='id,label',\n    comments='',\n)\n\n# Look at the first few predictions\n!head submission.csv","c784bfa2":"## Learning Rate Schedule\n\nWe use a custom learning rate schedule that has ramp-up, a plateau at the full rate, and then an exponential decay on the tail. _NOTE: This also requires the optimizer to have a learning rate configured that doesn't interfere with the schedule._\n\nOur model is pretty thick so we use a pretty fast rate.","849122c2":"# Step 8: Make Test Predictions #\n\nOnce you're satisfied with everything, you're ready to make predictions on the test set.","1c6dc8f1":"You can display a single batch of images from a dataset with another of our helper functions. The next cell will turn the dataset into an iterator of batches of 20 images.","c93c9e07":"## Fit Models ##\n\nAnd now we're ready to train the model. After defining a few parameters, we're good to go! We train the model in two phases. The first just rains our new head layers. The base model is set to non-trainable when it's built to enable this.\n\nSecond we set the whole model to be trainable. This also tunes the base model parameters to our data to improve accuracy even more. Since our head has already trained a bit, it's more stable and so the internal parameters can get more of the updates.","4e57a82e":"## Configuration\n\nHere we have a configuration dictionary. This is a good place to put hyperparameter configuration, notes, and other details about the run that will be used later to set things up. Anything in this dictionary is recorded by wandb also, and is available in the dashboard.\n\n\n| name | type | description       |\n-------|------|--------------------\n`architecture` | `string` | The network architecture name. |\n`dataset_id` | `string` | The ID of the dataset. Here we use the name from the inputs path.\n`infra` | `string` | The infrastructure we're running on. \"TPU\" for this notebook.\n`use_models` |`[string]` | A list of models to ensemble. These are loaded from the [Keras Applications](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/) module.\n`ensemble_concat` | `string` | The Keras [concat function](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/#functions_2) to use to ensemble the modles after their new heads, but before the final discriminator.","69ebf4c7":"We'll generate a file `submission.csv`. This file is what you'll submit to get your score on the leaderboard.","1026120d":"# Step 2: Distribution Strategy #\n\nA TPU has eight different *cores* and each of these cores acts as its own accelerator. (A TPU is sort of like having eight GPUs in one machine.) We tell TensorFlow how to make use of all these cores at once through a **distribution strategy**. Run the following cell to create the distribution strategy that we'll later apply to our model.","4adb4e6f":"We'll use the distribution strategy when we create our neural network model. Then, TensorFlow will distribute the training among the eight TPU cores by creating eight different *replicas* of the model, one for each core.\n\n# Step 3: Loading the Competition Data #\n\n## Get GCS Path ##\n\nWhen used with TPUs, datasets need to be stored in a [Google Cloud Storage bucket](https:\/\/cloud.google.com\/storage\/). You can use data from any public GCS bucket by giving its path just like you would data from `'\/kaggle\/input'`. The following will retrieve the GCS path for this competition's dataset.","74c42e13":"These datasets are `tf.data.Dataset` objects. You can think about a dataset in TensorFlow as a *stream* of data records. The training and validation sets are streams of `(image, label)` pairs.","cc2607bf":"The `'sparse_categorical'` versions of the loss and metrics are appropriate for a classification task with more than two labels, like this one.","2eee100c":"This next cell shows how the loss and metrics progressed during training. We plot each training session.","b587b57e":"# Step 7: Evaluate Predictions #\n\nBefore making your final predictions on the test set, it's a good idea to evaluate your model's predictions on the validation set. This can help you diagnose problems in training or suggest ways your model could be improved. We'll look at two common ways of validation: plotting the **confusion matrix** and **visual validation**.","25e991c2":"# Step 1: Imports #\n\nWe begin by importing several Python packages.","b1ec1489":"\n# Introduction #\n\nWelcome to the [**Petals to the Metal**](https:\/\/www.kaggle.com\/c\/tpu-getting-started) competition! In this competition, you\u2019re challenged to build a machine learning model to classify 104 types of flowers based on their images.\n\nIn this tutorial notebook, you'll learn how to build an image classifier in Keras and train it on a [Tensor Processing Unit (TPU)](https:\/\/www.kaggle.com\/docs\/tpu). At the end, you'll have a complete project you can build off of with ideas of your own.\n\n<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n    <strong>Fork This Notebook!<\/strong><br>\nCreate your own editable copy of this notebook by clicking on the <strong>Copy and Edit<\/strong> button in the top right corner.\n<\/blockquote>","16d86893":"### Changes\n\nThis was based on a starter notebook and I heavily modified it. Here's an incomplete list of changes. It's also a bit of an example for doing ensembling of other deep neural network models.\n\n1. Use Xception _big increase_\n2. Use faster training schedule _moderate increase_\n3. Update adam to not override training schedule _see above_\n4. Train head, then train full model _moderate increase_\n5. Add more data augmentation _large increase_\n6. Add some dropout _increase_\n7. Add another FC and dropout _large increase, second best?_\n8. Try ensembling again now that one model is training up.\n9. Add wandb.\n10. Pull models to use up to top.\n11. Consolidate more of the configuration to sed up to wandb.\n12. Start documenting a bit better.\n13. Start experimenting and letting wandb record the changes.","d1e12a95":"And here is a set of flowers with their predicted species. Run the cell again to see another set.","3f597cb1":"## Confusion Matrix ##\n\nA [confusion matrix](https:\/\/en.wikipedia.org\/wiki\/Confusion_matrix) shows the actual class of an image tabulated against its predicted class. It is one of the best tools you have for evaluating the performance of a classifier.\n\nThe following cell does some processing on the validation data and then creates the matrix with the `confusion_matrix` function included in [`scikit-learn`](https:\/\/scikit-learn.org\/stable\/index.html).","294f9e87":"## Install Weights and Biases Client\n\nThis is for [Weights and Biases](https:\/\/wandb.ai\/), a good site for recording the runs. When configuring the client later, we can pass the config object we create and it'll be recorded along with the training details.","c0a86d3e":"You can use data from any public dataset here on Kaggle in just the same way. If you'd like to use data from one of your private datasets, see [here](https:\/\/www.kaggle.com\/docs\/tpu#tpu3pt5).\n\n## Load Data ##\n\nWhen used with TPUs, datasets are often serialized into [TFRecords](https:\/\/www.kaggle.com\/ryanholbrook\/tfrecords-basics). This is a format convenient for distributing data to each of the TPUs cores. We've hidden the cell that reads the TFRecords for our dataset since the process is a bit long. You could come back to it later for some guidance on using your own datasets with TPUs.","943963b0":"## Model Checkpointing\n\nThis will save the current model state if the val accuracy metric is higher than the previous checkpoint. This way we can take the best-performing model weights for our final model. The path is named with the model name and the prefix included to keep models and training runs separate.","1f438001":"# Step 5: Define Model #\n\nCurrently I'm working with [Xception](https:\/\/arxiv.org\/abs\/1610.02357) and [EfficientNetB7](https:\/\/ai.googleblog.com\/2019\/05\/efficientnet-improving-accuracy-and.html). \n\nWe're ensembling these two models to train them together, and using a pooling layer defined in the config above to combine the results. We then train just our new head to get it converging, and after that do another training run with the entire model trainable to fine tune the whole thing.\n\nHere we build and compile the model. We also reuse the `compile_model` function later after we set the whole stack to be trainable. _NOTE: `training` must be `False` to keep the `BatchNormalization` layer from getting trashed._","423d03ea":"# Step 4: Explore Data #\n\nLet's take a moment to look at some of the images in the dataset.","24ae0c16":"# Step 9: Make a submission #\n\nIf you haven't already, create your own editable copy of this notebook by clicking on the **Copy and Edit** button in the top right corner. Then, submit to the competition by following these steps:\n\n1. Begin by clicking on the blue **Save Version** button in the top right corner of the window.  This will generate a pop-up window.  \n2. Ensure that the **Save and Run All** option is selected, and then click on the blue **Save** button.\n3. This generates a window in the bottom left corner of the notebook.  After it has finished running, click on the number to the right of the **Save Version** button.  This pulls up a list of versions on the right of the screen.  Click on the ellipsis **(...)** to the right of the most recent version, and select **Open in Viewer**.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n4. Click on the **Output** tab on the right of the screen.  Then, click on the file you would like to submit, and click on the blue **Submit** button to submit your results to the leaderboard.\n\nYou have now successfully submitted to the competition!\n\nIf you want to keep working to improve your performance, select the blue **Edit** button in the top right of the screen. Then you can change your code and repeat the process. There's a lot of room to improve, and you will climb up the leaderboard as you work.\n","516d3a16":"## Create Data Pipelines ##\n\nIn this final step we'll use the `tf.data` API to define an efficient data pipeline for each of the training, validation, and test splits.","f0fbd5e6":"The test set is a stream of `(image, idnum)` pairs; `idnum` here is the unique identifier given to the image that we'll use later when we make our submission as a `csv` file.","1174f7c9":"You might be familiar with metrics like [F1-score](https:\/\/en.wikipedia.org\/wiki\/F1_score) or [precision and recall](https:\/\/en.wikipedia.org\/wiki\/Precision_and_recall). This cell will compute these metrics and display them with a plot of the confusion matrix. (These metrics are defined in the Scikit-learn module `sklearn.metrics`; we've imported them in the helper script for you.)","38aa63af":"By defining `ds_iter` and `one_batch` in separate cells, you only need to rerun the cell above to see a new batch of images.","304b99f3":"# This next cell will create the datasets that we'll use with Keras during training and inference. Notice how we scale the size of the batches to the number of TPU cores.","507a7ad3":"## Visual Validation ##\n\nIt can also be helpful to look at some examples from the validation set and see what class your model predicted. This can help reveal patterns in the kinds of images your model has trouble with.\n\nThis cell will set up the validation set to display 20 images at a time -- you can change this to display more or fewer, if you like.","c9e9ac6c":"Use the Python `next` function to pop out the next batch in the stream and display it with the helper function.","cfe88aa0":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161321) to chat with other Learners.*"}}