{"cell_type":{"9959c6de":"code","55bb70f2":"code","203db837":"code","11a80cf3":"code","ee039b57":"code","bcde060b":"code","e26bb41e":"code","f874fd02":"code","3ecd6918":"code","fa47753a":"markdown","8e0d7db9":"markdown","ad7870a7":"markdown","45145183":"markdown","240c3f92":"markdown","b58e1733":"markdown","21986434":"markdown"},"source":{"9959c6de":"import pandas as pd \nimport numpy as np \ntrain = pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/train.csv\")\ntest = pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/sample_submission.csv\")","55bb70f2":"train.head()","203db837":"test.head()","11a80cf3":"train[\"question\"].tolist()\ntrain[\"answer_text\"].tolist()","ee039b57":"fails = []\n\ndef return_default_value_if_fails(default_value):\n\n    def decorator(func):\n        def inner(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                fails.append((func, (args, kwargs), e))\n                return default_value\n        return inner\n\n    return decorator","bcde060b":"def getResults(questions, fn):\n    @return_default_value_if_fails(default_value=0.1)\n    def getResult(q):\n        answer, score, prediction = fn(q)\n        return [q, prediction, answer, score]\n    output=pd.DataFrame(list(map(getResult, questions)), columns=[\"Question\", \"Prediction\", \"Correct Answer\", \"Score\"])\n    return output\ntrain_data=train[\"question\"].tolist()\n","e26bb41e":"from Levenshtein import ratio\ndata=train\ndef gettingApproximateAnswer(q):\n    max_score = 0\n    answer = \"\"\n    prediction = \"\"\n    for idx, row in data.iterrows():\n        score = ratio(row[\"question\"], q)\n        if score >= 0.9: #You can stop\n            return row[\"answer_text\"], score, row[\"answer_text\"]\n        elif score > max_score: # Need to continue because unsure\n            max_score = score\n            answer = row[\"answer_text\"]\n            prediction = row[\"answer_text\"]\n    if max_score > 0.3:\n        return answer, max_score, prediction\n    \n    return \"Apology.I couldn't get you.\", max_score, prediction","f874fd02":"test_data=test['question'].tolist()\noutput=getResults(test_data, gettingApproximateAnswer)\noutput","3ecd6918":"output.iloc[:,1:4]\noutput.to_csv('submission.csv', index=False)","fa47753a":"# **Use of Levenshtein Distance to predict correct answer.**\n\nLibraries used\n1. panda\n2. numpy\n3. Levenshtein","8e0d7db9":"**Creating Dataframe to store train or test data**","ad7870a7":"**Function Decorator**","45145183":"# Converting output to csv","240c3f92":"# Levenshtein Distance\nThe Levenshtein distance between two sequences is the simplest weighting factor in which each operation that is insertion and deletion has a cost of 1. Substitution is considered as a pair of operation hence it has a cost of 2.\n\nThe Levenshtein Python C extension module contains functions for fast computation of:\n\n* Levenshtein (edit) distance, and edit operations\n* string similarity\n* approximate median strings, and generally string averaging\n* string sequence and set similarity\n\n**Installation**\npip install levenshtein\n","b58e1733":"# Training the model","21986434":"# Testing"}}