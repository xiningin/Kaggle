{"cell_type":{"2a60084b":"code","dd96c402":"code","1e93dae8":"code","6374ce13":"code","531cc338":"code","cf641fdd":"code","032b8de6":"code","d84d6652":"code","3ee32e11":"code","7e3b3115":"code","019d7fb2":"code","83a09fed":"code","31d52dc3":"code","babe42cc":"code","0f9bc5b6":"code","4a8f6d8f":"code","bf076bb2":"code","c0125b76":"code","88fa54d6":"code","1c549c78":"code","930e69fa":"code","c3cfb6c5":"code","6d733aa1":"code","0bdf2e58":"code","42c65036":"code","b30cf192":"code","7db1a4c4":"code","4631da6e":"code","4cdb2743":"code","b9d498ef":"code","63b43188":"code","16f9fd20":"code","c097a6bb":"code","b5d15fc5":"code","33a1e4f6":"code","58b70f00":"code","be4f3c84":"code","659f25a1":"code","17b8b581":"code","31465ddc":"code","7d9d245b":"code","188086d5":"code","e92f6305":"markdown","7dfb755a":"markdown","9fc6fe2f":"markdown","681eff4a":"markdown","168b72f1":"markdown"},"source":{"2a60084b":"from datetime import datetime\nfrom scipy.stats import skew  # for some statistics\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport pandas as pd \nfrom sklearn import preprocessing\nimport sklearn.metrics as metrics\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","dd96c402":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","1e93dae8":"train.head()","6374ce13":"test.head()","531cc338":"train.shape","cf641fdd":"test.shape","032b8de6":"train.info()","d84d6652":"train.describe()","3ee32e11":"plt.rcParams['figure.figsize']= (20,10)\nsns.distplot(train['deg_C'], color='red')\nplt.xlabel('Degree in celcius', size=15)","7e3b3115":"plt.rcParams['figure.figsize']= (20,10)\nsns.distplot(train['relative_humidity'], color='red')\nplt.xlabel('Relative Humidity', size=15)","019d7fb2":"plt.rcParams['figure.figsize']= (20,10)\nsns.distplot(train['absolute_humidity'], color='red')\nplt.xlabel('Absolute Humidity', size=15)","83a09fed":"plt.rcParams['figure.figsize']= (20,10)\nsns.distplot(train['sensor_1'], color='red')\nplt.xlabel('Data of sensor 1', size=15)","31d52dc3":"plt.rcParams['figure.figsize']= (20,10)\nsns.distplot(train['sensor_2'], color='red')\nplt.xlabel('Data of sensor 2', size=15)","babe42cc":"plt.rcParams['figure.figsize']= (20,10)\nsns.distplot(train['sensor_3'], color='red')\nplt.xlabel('Data of sensor 3', size=15)","0f9bc5b6":"plt.rcParams['figure.figsize']= (20,10)\nsns.distplot(train['sensor_4'], color='red')\nplt.xlabel('Data of sensor 5', size=15)","4a8f6d8f":"new_train = train.drop(['target_benzene', 'date_time', 'target_carbon_monoxide', 'target_nitrogen_oxides'], axis=1) \nnew_test = test.drop('date_time', axis=1)\nfeatures= ['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']\ntargets = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']","bf076bb2":"import matplotlib.pyplot as plt\nsns.set_theme(style=\"whitegrid\")\nfig, axes = plt.subplots(4,2) # create figure and axes\nfig.subplots_adjust(left=0.08, right=0.98, bottom=0.05, top=0.9,\n                    hspace=0.9, wspace=0.3)\n\ndf = pd.DataFrame(data={'Degree celsuis': train['deg_C'],\n                    'Relative Humidity': train['relative_humidity'],\n                    'Absolute Humidity': train['absolute_humidity'],\n                    'Sensor 1 Data': train['sensor_1'],\n                    'Sensor 2 Data': train['sensor_2'],\n                    'Sensor 3 Data': train['sensor_3'],\n                    'Sensor 4 Data': train['sensor_4'],\n                    'Sensor 5 Data': train['sensor_5'],  \n                       })\n\nfor i,el in enumerate(list(df.columns.values)):\n    a = df.boxplot(el, ax=axes.flatten()[i])\n\n#fig.delaxes(axes[1,1]) # remove empty subplot\nplt.tight_layout() \n\nplt.show()","c0125b76":"import matplotlib.pyplot as plt\nsns.set_theme(style=\"whitegrid\")\nfig, axes = plt.subplots(4,2) # create figure and axes\nfig.subplots_adjust(left=0.08, right=0.98, bottom=0.05, top=0.9,\n                    hspace=0.9, wspace=0.3)\n\ndf = pd.DataFrame(data={'Degree celsuis': test['deg_C'],\n                    'Relative Humidity': test['relative_humidity'],\n                    'Absolute Humidity': test['absolute_humidity'],\n                    'Sensor 1 Data': test['sensor_1'],\n                    'Sensor 2 Data': test['sensor_2'],\n                    'Sensor 3 Data': test['sensor_3'],\n                    'Sensor 4 Data': test['sensor_4'],\n                    'Sensor 5 Data': test['sensor_5'],  \n                       })\n\nfor i,el in enumerate(list(df.columns.values)):\n    a = df.boxplot(el, ax=axes.flatten()[i])\n\n#fig.delaxes(axes[1,1]) # remove empty subplot\nplt.tight_layout() \n\nplt.show()","88fa54d6":"sns.kdeplot(train['deg_C'], color='palegreen')\nsns.kdeplot(test['deg_C'], color = 'lightcoral')","1c549c78":"sns.kdeplot(train['absolute_humidity'], color='palegreen')\nsns.kdeplot(test['absolute_humidity'], color = 'lightcoral')","930e69fa":"sns.kdeplot(train['relative_humidity'], color='palegreen')\nsns.kdeplot(test['relative_humidity'], color = 'lightcoral')","c3cfb6c5":"sns.kdeplot(train['sensor_1'], color='palegreen')\nsns.kdeplot(test['sensor_1'], color = 'lightcoral')","6d733aa1":"sns.kdeplot(train['sensor_2'], color='palegreen')\nsns.kdeplot(test['sensor_2'], color = 'lightcoral')","0bdf2e58":"sns.kdeplot(train['sensor_3'], color='palegreen')\nsns.kdeplot(test['sensor_3'], color = 'lightcoral')","42c65036":"sns.kdeplot(train['sensor_4'], color='palegreen')\nsns.kdeplot(test['sensor_4'], color = 'lightcoral')","b30cf192":"sns.kdeplot(train['sensor_5'], color='palegreen')\nsns.kdeplot(test['sensor_5'], color = 'lightcoral')","7db1a4c4":"train['date_time'] = pd.to_datetime(train['date_time'], errors='coerce')\nsns.scatterplot(x=train['date_time'], y= train['target_carbon_monoxide'])\nplt.title(\"carbon monoxide distribution over time\", size=20)","4631da6e":"train['date_time'] = pd.to_datetime(train['date_time'], errors='coerce')\nsns.scatterplot(x=train['date_time'], y= train['target_benzene'])\nplt.title(\"Benzene distribution over time\", size=20)","4cdb2743":"train['date_time'] = pd.to_datetime(train['date_time'], errors='coerce')\nsns.scatterplot(x=train['date_time'], y= train['target_nitrogen_oxides'])\nplt.title(\"Nitrogen Oxides distribution over time\", size=20)","b9d498ef":"sns.lineplot(x= train['deg_C'], y= train['target_carbon_monoxide'])\nplt.title(\"Relationship between carbon monoxide and degree\", size=15)","63b43188":"sns.lineplot(x= train['deg_C'], y= train['target_benzene'])\nplt.title(\"Relationship between benzene and degree\", size=15)","16f9fd20":"sns.lineplot(x= train['deg_C'], y= train['target_nitrogen_oxides'])\nplt.title(\"Relationship between nitrogen oxides and degree\", size=15)","c097a6bb":"plt.figure(figsize = (12, 8))\ncorr_train = train.corr()\nsns.heatmap(corr_train, annot = True);","b5d15fc5":"plt.figure(figsize = (12, 8))\ncorr_test = test.corr()\nsns.heatmap(corr_test, annot = True);","33a1e4f6":"train['date_time'] = pd.to_datetime(train['date_time'], errors='coerce')\ntrain.loc[:, 'weekofyear'] = train['date_time'].dt.weekofyear\ntrain.loc[:, 'month'] = train['date_time'].dt.month\ntrain.loc[:, 'hour'] = train['date_time'].dt.hour\ntrain['fer_C'] = (train['deg_C']*(9\/5)) + 32 # in farenheit\ntrain['kel_C'] = train['deg_C'] + 273.15     #in kelvin\ntrain['dew_point'] = train['deg_C'] - ((100 - train['relative_humidity'])\/5)","58b70f00":"test['date_time'] = pd.to_datetime(test['date_time'], errors='coerce')\ntest.loc[:, 'weekofyear'] = test['date_time'].dt.weekofyear\ntest.loc[:, 'month'] = test['date_time'].dt.month\ntest.loc[:, 'hour'] = test['date_time'].dt.hour\ntest['fer_C'] = (test['deg_C']*(9\/5)) + 32\ntest['kel_C'] = test['deg_C'] + 273.15\ntest['dew_point'] = test['deg_C'] - ((100 - test['relative_humidity'])\/5)","be4f3c84":"y = train.loc[:,targets]","659f25a1":"y1 = np.array(y.loc[:, list(y.columns)[0] ] )# first column for prediction\n\ny2 = np.array(y.loc[:, list(y.columns)[1] ]) # second column for prediction\n\ny3 = np.array(y.loc[:, list(y.columns)[2] ]) # third column for prediction","17b8b581":"from lightgbm import LGBMRegressor\nfrom sklearn.model_selection import train_test_split\nimport math\nfrom sklearn.metrics import mean_squared_log_error as msle\nfrom sklearn.model_selection import GridSearchCV\n\nX_train, X_valid, y_train, y_valid = train_test_split(new_train, y1 , test_size=0.2, random_state=1)\nlgbm = LGBMRegressor()\nparams = {\n    'num_leaves': [7, 14, 21, 28, 31, 50],\n    'learning_rate': [0.1, 0.03, 0.003],\n    'max_depth': [-1, 3, 5],\n    'n_estimators': [50, 100, 200, 500],\n}\ngrid= GridSearchCV(estimator=lgbm, param_grid = params, cv = 2, n_jobs=-1)\ngrid.fit(X_train, y_train)\nprint(\" Results from Grid Search \" )\nprint(\"\\n The best estimator across ALL searched params:\\n\", grid.best_estimator_)\nprint(\"\\n The best score across ALL searched params:\\n\", grid.best_score_)\nprint(\"\\n The best parameters across ALL searched params:\\n\", grid.best_params_)","31465ddc":"columns = test.columns[1:]\nX = train[columns].values\nX_test = test[columns].values\n\n#Since we are to predict 3 targets so we are setting target 1,2,3\n#Reshaping otherwise it will throw an error\ntarget_1 = train['target_carbon_monoxide'].values.reshape(-1,1)\ntarget_2 = train['target_benzene'].values.reshape(-1,1)\ntarget_3 = train['target_nitrogen_oxides'].values.reshape(-1,1)\n\nsub = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")\nsub.head()","7d9d245b":"lgbm = LGBMRegressor(learning_rate= 0.1, max_depth= 5, n_estimators= 500, num_leaves= 7)\n\nlgbm.fit(X, target_1)\nsub['target_carbon_monoxide'] = lgbm.predict(X_test)\n\nlgbm.fit(X, target_2)\nsub['target_benzene'] = lgbm.predict(X_test)\n\nlgbm.fit(X, target_3)\nsub['target_nitrogen_oxides'] = lgbm.predict(X_test)\n\nsub.head()","188086d5":"sub.to_csv('submission with LGBMBoost.csv', index=False)","e92f6305":"### Outliers in train set","7dfb755a":"## Univariate Analysis","9fc6fe2f":"### There are no missing values","681eff4a":"### Nitrogen oxides have increased significantly over time wheras carbon monoxides and benzene don't show much difference","168b72f1":"### Outliers in Test set"}}