{"cell_type":{"b47160c8":"code","b1a790fd":"code","ccce12c7":"code","1e5ef469":"code","411ef355":"code","03057058":"code","728996b7":"code","72983a07":"code","8484681d":"code","d7ab53b9":"code","397d850e":"code","55523056":"code","df6de9cc":"code","2faf9c6e":"code","29b40387":"code","14ac0726":"code","0c57476c":"code","41c5a190":"code","af5d5014":"code","82157aaf":"code","4a61aec6":"code","173b497d":"code","5e07352c":"code","d62da4c9":"markdown"},"source":{"b47160c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1a790fd":"import seaborn as sn\nimport matplotlib.pyplot as plt\nimport nltk","ccce12c7":"dataset = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndataset.head()","1e5ef469":"import pandas_profiling\ndataset.profile_report(title='Netflix Reviews - Report' , progress_bar = False)\n","411ef355":"dataset = dataset[['title','director','listed_in','description']]\ndataset.head()","03057058":"dataset.isna().sum()","728996b7":"dataset.director.fillna(\"\", inplace = True)\n","72983a07":"dataset['movie_info'] = dataset['director'] + ' ' + dataset['listed_in']+ ' ' + dataset['description']","8484681d":"dataset.head()","d7ab53b9":"dataset  = dataset[['title','movie_info']]","397d850e":"from nltk.corpus import stopwords\nimport string\nstop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)\n","55523056":"from nltk.stem import WordNetLemmatizer\nimport nltk\nnltk.download('wordnet')","df6de9cc":"lemmatizer = WordNetLemmatizer()\ndef lemmatize_words(text):\n    final_text = []\n    for i in text.split():\n         if i.strip().lower() not in stop:\n                word = lemmatizer.lemmatize(i.strip())\n                final_text.append(word.lower())\n                \n    return  \" \".join(final_text)      \n                ","2faf9c6e":"dataset.movie_info = dataset.movie_info.apply(lemmatize_words)","29b40387":"dataset.head()","14ac0726":"from sklearn.feature_extraction.text import CountVectorizer\ntf=CountVectorizer()","0c57476c":"X=tf.fit_transform(dataset['movie_info'])  ","41c5a190":"from sklearn.metrics.pairwise import cosine_similarity","af5d5014":"cosine_sim = cosine_similarity(X)","82157aaf":"liked_movie = 'Transformers Prime'","4a61aec6":"index_l = dataset[dataset['title'] == liked_movie].index.values[0]\nsimilar_movies = list(enumerate(cosine_sim[index_l]))\nsort_movies = sorted(similar_movies , key = lambda X:X[1] , reverse = True)\nsort_movies.pop(0)\nsort_movies = sort_movies[:10]","173b497d":"sort_movies","5e07352c":"for movies in sort_movies:\n    print(dataset.title[movies[0]])","d62da4c9":"finding misiing values "}}