{"cell_type":{"85155fc1":"code","74e2d439":"code","e93ddfcf":"code","6dd0d52a":"code","7fb699bd":"code","80b11f34":"code","b0bcc08d":"code","503f81c3":"code","7f0f4f8c":"code","0bd99d3a":"code","e6b998dd":"code","e6bbf209":"code","5d4955e5":"code","97a9ad28":"code","d42bd20a":"code","1507cfe7":"code","5d2c53d7":"code","b7cf86c0":"code","10533ffd":"code","0d5e1258":"code","60024925":"code","43b13afc":"code","f65f53a7":"code","f7bc3ac3":"code","2b258c15":"code","28675a7c":"code","a34ef0fa":"code","1859cfc8":"code","3fb591e7":"code","d5353c60":"code","0f978a59":"code","02538de4":"code","0f70d569":"code","18b4302d":"code","0efb0d58":"code","6d91ad05":"code","dd367a6b":"code","ba2bbce8":"code","687899e2":"code","c9ddf241":"code","27185548":"code","4b851196":"code","a06bd1c2":"code","6915f647":"code","c2b878bc":"code","cb299cbc":"code","4d82340c":"code","e4237540":"code","749c678d":"code","adac73ee":"code","b49ef265":"code","04e63b74":"code","5cc3ae4e":"code","25d2c5f7":"code","8551602f":"code","8e010391":"code","543c380c":"code","9d8fd780":"code","c2f3828d":"code","a9d96e4e":"code","4bf2cab0":"code","8ba09fcc":"code","2d33e4d6":"code","83f102a8":"code","faebae81":"code","61ae5c55":"code","aa986d50":"code","56fc419c":"code","bd79ef04":"code","e6e6dfdb":"code","dde6c599":"code","e4bdb7cf":"code","8561be67":"code","f5b9345d":"code","c981bf0b":"code","9f4acfa9":"code","fb8155cf":"code","1ed11713":"code","d29a81a1":"code","6562e7dd":"code","ac062d8c":"code","30cad493":"code","4d5ad66d":"code","75429488":"code","3822ff69":"code","b7c41112":"code","7ba31e8e":"code","ae3546f9":"markdown","35afbd67":"markdown","c3778895":"markdown","39ca07ff":"markdown","16556f36":"markdown","4e4c4f1c":"markdown","3e68c066":"markdown","878a4890":"markdown","424b0495":"markdown","12bdc77a":"markdown","380b62b9":"markdown","5081f5fb":"markdown","c4b8f65b":"markdown","fd6bc62f":"markdown","ee021cbd":"markdown","966c92b1":"markdown","1501c97e":"markdown","a4940bef":"markdown","7e6adfd6":"markdown","07f21ef8":"markdown","a6b9c044":"markdown","d488965c":"markdown","194672bf":"markdown","fdc990a9":"markdown","b97ee9b8":"markdown","abdaa44b":"markdown","178e74ce":"markdown"},"source":{"85155fc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","74e2d439":"a = [1,2,3,4,5]\nplt.plot(a)\nplt.show()","e93ddfcf":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerID = test_df[\"PassengerId\"]\n","6dd0d52a":"test_df.columns #s\u00fct\u00fcnlar","7fb699bd":"train_df.head() #ilk 5 hane","80b11f34":"train_df.describe() # say\u0131sal bilgiler","b0bcc08d":"train_df.info()","503f81c3":"def bar_plot(variable):\n    \"\"\"\n    input : variable ex: \"sex\"\n    output : bar plot and value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize =(9,3))\n    plt.bar(varValue.index, varValue) # x,y\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n{}\".format(variable, varValue))","7f0f4f8c":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)\n","0bd99d3a":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","e6b998dd":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","e6bbf209":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","5d4955e5":"#Pclass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]]","97a9ad28":"#Pclass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean() # groupla ve ortalamas\u0131n\u0131 g\u00f6ster","d42bd20a":"#Pclass - Survived\n# groupla ve ortalamas\u0131n\u0131 g\u00f6ster, s\u0131rala survived'a g\u00f6re azalan bir s\u0131rada\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","1507cfe7":"#Sex - Survived\n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","5d2c53d7":"#SibSp - Survived\n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","b7cf86c0":"#Parch - Survived\n\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","10533ffd":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        #1st quartile\n        Q1 = np.percentile(df[c],25)\n        #3rd quartile\n        Q3 = np.percentile(df[c],75)\n        #IQR\n        IQR = Q3-Q1\n        #Outlier step\n        outlier_step = IQR * 1.5\n        #detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    \n    outlier_indices = Counter(outlier_indices)\n    mult_outliers = list(i for i, v in outlier_indices.items() if v > 2) # e\u011fer 2'den fazla ise \u00e7\u0131kartabiliriz\n    \n    return mult_outliers\n    \n    \n    ","0d5e1258":"#outliers\ntrain_df.loc[detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","60024925":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis = 0).reset_index(drop = True)#sat\u0131rlar\u0131 sil axis ile","43b13afc":"train_df.loc[detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","f65f53a7":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","f7bc3ac3":"train_df.head()","2b258c15":"train_df.columns[train_df.isnull().any()] # missing value var m\u0131 diye bak\u0131yoruz null?","28675a7c":"train_df.isnull().sum()","a34ef0fa":"train_df[train_df[\"Embarked\"].isnull()]","1859cfc8":"train_df.boxplot(column = \"Fare\",by = \"Embarked\")\nplt.show()","3fb591e7":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\") # NAN olanlar\u0131 C ile doldurduk \u00e7\u00fcnk\u00fc 80 fare olan Cden binmi\u015f\ntrain_df[train_df[\"Embarked\"].isnull()]","d5353c60":"train_df[train_df[\"Fare\"].isnull()]","0f978a59":"np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])","02538de4":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","0f70d569":"train_df[train_df[\"Fare\"].isnull()]","18b4302d":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\") # annot de\u011ferlerin g\u00f6r\u00fclmesini sa\u011fl\u0131yor, fmt virg\u00fclden sonra 2 hane\nplt.show()","0efb0d58":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","6d91ad05":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nsplt.show()","dd367a6b":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Prob\")\nplt.show()","ba2bbce8":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","687899e2":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","c9ddf241":"g = sns.FacetGrid(train_df, row =\"Embarked\", size = 3)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","27185548":"g = sns.FacetGrid(train_df, row =\"Embarked\",col = \"Survived\", size = 3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","4b851196":"train_df[train_df[\"Age\"].isnull()]","a06bd1c2":"sns.factorplot(x = \"Sex\", y = \"Age\", data= train_df, kind = \"box\")\nplt.show()","6915f647":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data= train_df, kind = \"box\")\nplt.show()","c2b878bc":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","cb299cbc":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","4d82340c":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)\nplt.show()","e4237540":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","749c678d":"train_df[\"Name\"].head(10) ","adac73ee":"#virg\u00fcle g\u00f6re noktaya g\u00f6re ay\u0131ral\u0131m\nname = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\ntrain_df[\"Title\"].head(10) ","b49ef265":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","04e63b74":"#convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\", \"the Countess\", \"Capt\", \"Col\", \"Don\", \"Dr\", \"Major\", \"Rev\", \"Sir\", \"Jonkheer\", \"Dona\"], \"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(30) ","5cc3ae4e":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\", \"Mrs\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","25d2c5f7":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","8551602f":"train_df.head(10)","8e010391":"train_df = pd.get_dummies(train_df, columns = [\"Title\"])\ntrain_df.head()","543c380c":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1\ntrain_df.head()","9d8fd780":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival Probability\")\nplt.show()","c2f3828d":"train_df[\"family size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]\ntrain_df.head(20)","a9d96e4e":"sns.countplot(x = \"family size\", data = train_df)\nplt.show()","4bf2cab0":"g = sns.factorplot(x = \"family size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival Probability\")\nplt.show()","8ba09fcc":"train_df = pd.get_dummies(train_df, columns = [\"family size\"])\ntrain_df.head(20)","2d33e4d6":"train_df[\"Embarked\"].head()\nsns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","83f102a8":"train_df = pd.get_dummies(train_df, columns = [\"Embarked\"])\ntrain_df.head()","faebae81":"train_df[\"Ticket\"].head(20)","61ae5c55":"ticket_list = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        ticket_list.append(i.replace(\".\", \"\").replace(\"\/\", \"\").strip().split(\" \")[0])\n    else:\n        ticket_list.append(\"x\")\ntrain_df[\"Ticket\"] = ticket_list","aa986d50":"train_df[\"Ticket\"].head(20)","56fc419c":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix = \"T\")\ntrain_df.head()","bd79ef04":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","e6e6dfdb":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Sex\"])\ntrain_df.head()","dde6c599":"train_df.drop( labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True) \n","e4bdb7cf":"train_df.columns","8561be67":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","f5b9345d":"train_df_len","c981bf0b":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis = 1, inplace = True)","9f4acfa9":"test.head()","fb8155cf":"train = train_df[:train_df_len]\nx = train.drop(labels = [\"Survived\"], axis = 1)\ny = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.35, random_state = 42)\nprint(\"x_train\", len(x_train))\nprint(\"x_test\", len(x_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","1ed11713":"lr = LogisticRegression()\nlr.fit(x_train, y_train)\nacc_log_train = round(lr.score(x_train, y_train) * 100,2) \nacc_log_test = round(lr.score(x_test, y_test) * 100,2) \nprint(\"training accuracy: {}\".format(acc_log_train))\nprint(\"test accuracy: {}\".format(acc_log_test))","d29a81a1":"#Decision Tree\n#SVM\n#Random Forest\n#KNN\n#Logistic Regression\n","6562e7dd":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n            SVC(random_state = random_state),\n            RandomForestClassifier(random_state = random_state),\n            LogisticRegression(random_state = random_state),\n            KNeighborsClassifier()]","ac062d8c":"dt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                 \"max_depth\" : range(1,20,2)}\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                  \"gamma\" : [0.001, 0.01, 0.1, 1],\n                  \"C\" : [1,10,50,100,200,500,1000]}\nrf_param_grid = {\"max_features\" : [1, 3, 10],\n                 \"min_samples_split\" : [2, 3, 10],\n                 \"min_samples_leaf\" : [1, 3, 10],\n                 \"bootstrap\" : [False],\n                 \"n_estimators\" : [100, 300],\n                 \"criterion\" : [\"gini\"]}\nlr_param_grid = {\"C\" : np.logspace(-3, 3, 7),\n                 \"penalty\" : [\"l1\", \"l2\"]}\nknn_param_grid = {\"n_neighbors\" : np.linspace(1, 19, 10, dtype = int).tolist(),\n                  \"weights\" : [\"uniform\", \"distance\"],\n                  \"metric\" : [\"euclidean\", \"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   lr_param_grid,\n                   knn_param_grid]","30cad493":"cv_results = []\nbest_estimator = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid = classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1, verbose = 1)\n    clf.fit(x_train, y_train)\n    cv_results.append(clf.best_score_)\n    best_estimator.append(clf.best_estimator_)\n    print(cv_results[i])\n    ","4d5ad66d":"Cross_Validation = pd.DataFrame({\"Cross Validation Means\" : cv_results,\n                          \"ML Models\" : [\"DecisionTreeClassifier\",\"SVC\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = Cross_Validation)\ng.set_xlabel(\"mean accuracy\")\ng.set_title(\"Cross Validation Scores\")\n\n","75429488":"votingC = VotingClassifier(estimators = [(\"dt\", best_estimator[0]),\n                                          (\"rfc\", best_estimator[2]),\n                                          (\"lr\", best_estimator[3])],\n                                          voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test), y_test))","3822ff69":"test.columns","b7c41112":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nsonuclar = pd.concat([test_passengerID, test_survived], axis = 1)\nsonuclar.to_csv(\"titanic.csv\", index = False)","7ba31e8e":"test_survived","ae3546f9":"First class passengers are older than second, and second older than third","35afbd67":"## Embarked, Sex, Fare and Survived","c3778895":"<a id=\"2\"><\/a>\n# Variable description\n\n1. PassengerId : Uniqe id number\n   Survived : passenger (1)survived or (0)died\n1. Pclass : passenger class\n1. Name : name\n1. Sex : gender\n1. Age : age\n1. SibSp : number of siblings\/spouses\n1. Parch : number of parents\/children\n1. Ticket : ticket number\n1. Fare : amount of money spent for ticket\n1. Cabin : cabin category\n1. Embarked : ports ( C = Cherbourg, Q = Queenstown, S = Southampton)\n","39ca07ff":"<a id=\"4\"><\/a>\n## Categorical Variable","16556f36":"# Intro\n\nThe Titanic is one of the most famous disaster in the history. In 1912, the Titanic sank after colliding with an iceberg, 1,502 dead out of 2,224 passengers.\n\n<font color = \"blue\">\nContent\n\n1. [Load and Check data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Values](#8)\n    * [Find Missing Values](#9)\n    * [Fill Missing Values](#10)\n6. [Visualization](#11)\n    * [Correlation between SibSp, Parch, Age, Fare, Survived](#12)\n7. [Modeling](#29)\n","4e4c4f1c":"<a id=\"5\"><\/a>\n## Numerical Variable ","3e68c066":"pclass feature is important for modeling ","878a4890":"## Pclass, Age and Survived","424b0495":"<a id=\"9\"><\/a>\n## Find Missing Values","12bdc77a":"<a id = \"29\" ><\/a><br>\n# Modeling","380b62b9":"<font color = \"green\">\n* float64(2): Fare, Age\n* int64(5)  : PassengerId, Survived, Pclass, SibSp, Parch \n* object(5  : Name, Sex, Ticket, Cabin, Embarked ","5081f5fb":"<a id=\"13\"><\/a>\n## SibSp and Survived","c4b8f65b":"<a id=\"11\"><\/a>\n# Visualization\n   * Correlation between SibSp, Parch, Age, Fare, Survived\n   * SibSp and Survived","fd6bc62f":"## Pclass and Survived","ee021cbd":"<a id=\"12\"><\/a>\n## Correlation between SibSp, Parch, Age, Fare, Survived","966c92b1":"<a id=\"8\"><\/a>\n# Missing Values\n   * Find Missing Values\n   * Fill Missing Values\n     ","1501c97e":"sibsp and parch can be used for new feature extraction with th = 3\nsmall families have more chance to survive\nthere is a std in survival of passenger with parch = 3","a4940bef":"<a id=\"1\"><\/a>\n# Load and Check data","7e6adfd6":"## Age and Survived","07f21ef8":"<a id=\"10\"><\/a>\n## Fill Missing Values\n* embarked has 2 missing value\n* Fare has only 1","a6b9c044":"<a id=\"3\"><\/a>\n# Univariate Variable Analysis\n   * Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, Parch\n   * Numerical Variable   : Age, PassengerId, Fare","d488965c":"## Fill missing values : Age ","194672bf":"##### yukar\u0131dakini yorumlamak gerekirse, Fare'in y\u00fcksek oranda olan yani fazla para vermi\u015f insanlar\u0131n survived olma oran\u0131 y\u00fcksek,\nFare feature seems to have a correlation with survived","fdc990a9":"## Parch and Survived","b97ee9b8":"<a id=\"7\"><\/a>\n# Outlier Detection","abdaa44b":"<a id=\"6\"><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n","178e74ce":"## Embarked, Sex, Pclass and Survived"}}