{"cell_type":{"c8455ace":"code","08fab7b2":"code","a81d6da4":"code","4b449ac4":"code","5a548b80":"code","3d3a6bea":"code","4350dd22":"code","1770b486":"code","e232f9b7":"code","9896adde":"code","29cfeeb4":"code","683d752c":"code","f67f3bc6":"code","416c07e3":"code","3bf86c69":"code","a63bed8b":"code","26b32474":"code","5b5ab050":"code","6dbc2af7":"code","564326bf":"code","83c92534":"code","c7ce77ef":"code","97ebdf8b":"code","9f3ec963":"code","f1f1a60a":"code","cc7303b3":"code","2ceafd0a":"code","f353e6c2":"code","c64eb147":"code","6da7ba46":"code","5005f315":"markdown","0a579beb":"markdown","2ea21b2d":"markdown","1d85f474":"markdown","8352e3a0":"markdown","1e08e716":"markdown","037faec0":"markdown","eb465bb3":"markdown","d26ce3c6":"markdown","736fe0df":"markdown","5c6e43b1":"markdown","84b95934":"markdown"},"source":{"c8455ace":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid') \nimport seaborn as sns\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08fab7b2":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]\n","a81d6da4":"train_df.columns","4b449ac4":"train_df.head()","5a548b80":"train_df.describe()","3d3a6bea":"train_df.info()","4350dd22":"def bba_plot(variable):    \n    #get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue=var.value_counts()\n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values) #determine the x axis ticks\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show\n    print(\"{}: \\n {}\".format(variable,varValue))  ","1770b486":"category1=['Survived','Pclass','Sex','SibSp','Parch','Embarked']\nfor c in category1:\n    bba_plot(c)\n","e232f9b7":"category2=[\"Cabin\",\"Name\",\"Ticket\"]  # there variables have several values so we evelaute them separately\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","9896adde":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show","29cfeeb4":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)\n    ","683d752c":"#Pclass sv Survied\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n#here we use the as_index=false to put a new indexing instead of Pclass","f67f3bc6":"#Sex sv Survied\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False) \n\n","416c07e3":"#SibSp sv Survied\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n","3bf86c69":"#Parch sv Survied\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n","a63bed8b":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25) #lower quartile\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75) #upper quartile\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)  # count the #of indices \n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)  # note: i for i expression exactly mean:print i for i in [1,2,3]\n    \n    return multiple_outliers","26b32474":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","5b5ab050":"#drop outliers\n\ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","6dbc2af7":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","564326bf":"train_df.head()","83c92534":"train_df.columns[train_df.isnull().any()] #at which columns there are missing values","c7ce77ef":"train_df.isnull().sum()  #how many missing values","97ebdf8b":"#lets combine previous 2 code, an alternative way to find the # of nulls \ntrain_df[train_df.columns[train_df.isnull().any()]].isnull().sum()","9f3ec963":"train_df[train_df[\"Embarked\"].isnull()] ","f1f1a60a":"#we will check the Fare(ticket paid amount) according to Embarked(the port the get in the ship)\n#and make a forecast that the missing values of embarked\ntrain_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()\n","cc7303b3":"#at the box plot we saw the the Fare value=80 is generally get in the ship from port \"C\"\ntrain_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()] ","2ceafd0a":"train_df[train_df[\"Fare\"].isnull()]  ","f353e6c2":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]) ","c64eb147":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","6da7ba46":"train_df[train_df[\"Fare\"].isnull()] ","5005f315":"<a id='3'><\/a><br>\n### **Univariate Variable Analysis**\n* Categorical Variable: Survived ,Sex, Pclass,Embarked,Cabin,Ticket,SibSp and Parch\n* Numerical Variable: Fare, age and passengerId","0a579beb":" <a id='9'><\/a><br>\n### **Find Missing Value**\n","2ea21b2d":"**Introduction**\n\nTransatlantic cruise ship RMS Titanic,  the giant ship that was thought unsinkable. \nShe struck an iceberg at around 23:40 and sank in 3 hours.There were 2,240 passengers and crew on board, more than 1,500 lost their lives in the  disaster.\n\n<font color ='blue'>\nContent:\n      \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n","1d85f474":"* float64(2): Fare, Age\n* int64(5) : PassengerID, Survives, Pcalss,SibSp,Parch\n* object(5): Name,Sex, Ticket","8352e3a0":"<a id='2'><\/a><br>\n### **Variable Description**\n1. PassengerId: unique id number for each passanger\n2. Survived: passenger survive(1) or died(0)\n3. Pclass: passanger class\n4. Name : name of passanger\n5. Sex : gender of passanger\n6. Age : age of passanger\n7. SibSp : number of siblings\/spouses\n8. Parch : number of parents\/childeren\n9. Ticket: ticket number\n10. Fare : amount of money paid for ticket\n11. Cabin: cabin category\n12. Embarked: port where passenger embarked(C=Cherbourg, Q=Queenstown, S=Southampton)\n  \n","1e08e716":"<a id='5'><\/a><br>\n### **Numerical Variable Analysis**","037faec0":"<a id='1'><\/a><br>\n### **Load and Check Data**","eb465bb3":" <a id='4'><\/a><br>\n### **Categorical Variable Analysis**\n        ","d26ce3c6":" <a id='6'><\/a><br>\n \n### **[Basic Data Analysis](#6)**\nHere we will check how survival is related with some variables or not\n\n* Pclass-Survived\n* Sex-Survived\n* SibSp-Survived\n* Parch-Survived\n","736fe0df":" <a id='7'><\/a><br>\n### **Outlier Detection**","5c6e43b1":" <a id='8'><\/a><br>\n### **Missing Value**","84b95934":" <a id='10'><\/a><br>\n### Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1 missing value"}}