{"cell_type":{"4a32eb57":"code","5928be89":"code","622089fd":"code","7dc46c05":"code","e473adaa":"code","3f37a56f":"code","7de78815":"code","6b15f6b6":"code","ff38c840":"code","37d2a40e":"code","bd0bb710":"code","d4ea2b1e":"code","0910c87f":"code","f2a73e9c":"code","9577576e":"code","6a0cefb3":"code","6100e073":"code","e8327c9c":"code","d66e1492":"code","b73d638a":"code","4f754e0f":"code","06689f5e":"code","854edad2":"code","ba1dba3f":"code","71f1f9b5":"code","43489f95":"code","2c5e5605":"code","de7da0ef":"code","d45e0c39":"code","b8ca610a":"code","4f856d56":"code","2d023479":"code","c749bd5a":"code","24edebf3":"code","7aaf7e6d":"code","16cb6e7e":"code","ff7415e3":"code","a629ed70":"code","2c75aefa":"code","50b4a4e1":"code","52d5128c":"code","757b335d":"code","07a3c48f":"code","02171fd5":"code","8913f1b0":"code","5c17c25c":"code","cf8ea16a":"code","cf8875c2":"code","2ea5f0b7":"code","3c1ab7e3":"code","191f6f67":"code","aefe6da2":"code","6904d972":"code","2565b24d":"code","105946da":"code","f2e3072e":"code","7a96dfae":"code","ea14a4b4":"code","753a666d":"code","9e39ff09":"code","d36a96a7":"code","402efc5a":"code","953f4073":"code","622f20df":"code","5732dd44":"code","654e084a":"code","ea1024ed":"code","fee1f3c6":"code","89467e6a":"code","3f5499ec":"code","234eb9df":"markdown","2880504a":"markdown","13e7af79":"markdown","b7e8cb02":"markdown","cc160be1":"markdown","18b31c0d":"markdown","40600ec8":"markdown","b84a579a":"markdown","f7a0b7b8":"markdown","b67b5976":"markdown","40a41760":"markdown","1a79be37":"markdown","6d20b507":"markdown","db6c613e":"markdown","2b2406be":"markdown","884f1367":"markdown","b1ab077d":"markdown","db615bdf":"markdown","d23e8d20":"markdown","9eeab4d0":"markdown","1cfa484e":"markdown","5a00b6c2":"markdown","3c4a43b5":"markdown"},"source":{"4a32eb57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","5928be89":"data = np.array([['a','b','c'], [4,5,6], [True,False,None]])","622089fd":"data","7dc46c05":"df_data = pd.DataFrame(data)","e473adaa":"df_data","3f37a56f":"import matplotlib.pyplot as plt","7de78815":"df_emissions = pd.DataFrame(data = [[25, 30], [45, 25], [30, 45]],\n                            index = [2011, 2012, 2013],\n                            columns = ['Canada', 'USA'])","6b15f6b6":"df_emissions","ff38c840":"plt.figure(figsize=(10,5))\nplt.plot(df_emissions)\nplt.xticks(df_emissions.index)\nplt.legend(df_emissions.columns)\nplt.xlabel('Time')\nplt.ylabel('Emissions')\nplt.title('Emissions From Cars')\n\nplt.show()","37d2a40e":"import folium","bd0bb710":"data = (\n    # Matrix of size 70 by 3, filled with numbers \n    # between -1 and 1 following a normal distribution\n    np.random.normal(size=(70, 3)) *\n    # Matrix of size 3 by 1, to scale values in the previous matrix\n    np.array([[0.01, 0.01, 1]]) +\n    # Matrix of size 3 by 1, with coordiates of University of Waterloo\n    np.array([[43.471257, -80.543021, 1]])\n).tolist()","d4ea2b1e":"# format of data: [latitude, longitude, weight]\ndata[0:3]","0910c87f":"from folium.plugins import HeatMap\n\nmap_demo = folium.Map([43.471257, -80.543021],\n                      #tiles='Stamen Toner',\n                      zoom_start=14)\nHeatMap(data).add_to(map_demo)\n\nmap_demo","f2a73e9c":"# Importing OS is typically used for reading and writing from files\nimport os\n# Print contents in the input folder\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9577576e":"# Pandas for data importing\ndf_ksi = pd.read_csv('..\/input\/KSI_CLEAN.csv')","6a0cefb3":"# the info() function writes down descriptive information about the dataset such as:\n#  - Number of rows\n#  - Attribute names, here each attribute is represented as a column of data\n#  - Data types of attributes\n#  - Order of attributes\n\ndf_ksi.info()","6100e073":"# write down just the column names of dataset\nprint(df_ksi.columns)","e8327c9c":"# Shortlist of the numerical attributes\nksi_numerical = ['YEAR', 'MONTH', 'DAY', 'HOUR', 'MINUTES', 'WEEKDAY', \n                 'LATITUDE', 'LONGITUDE', 'PEDESTRIAN', 'CYCLIST', 'AUTOMOBILE', \n                 'MOTORCYCLE', 'TRUCK', 'TRSN_CITY_VEH', 'EMERG_VEH', 'PASSENGER', \n                 'SPEEDING', 'AG_DRIV', 'REDLIGHT', 'ALCOHOL', 'DISABILITY', 'FATAL']","d66e1492":"# Shortlist of the categorical attributes\nksi_categorical = ['Ward_Name', 'Ward_ID', 'Hood_Name', 'Hood_ID', 'Division', \n                   'District', 'STREET1', 'STREET2', 'OFFSET', 'ROAD_CLASS', \n                   'LOCCOORD', 'ACCLOC', 'TRAFFCTL', 'VISIBILITY', 'LIGHT', \n                   'RDSFCOND', 'ACCLASS', 'IMPACTYPE', 'INVTYPE', 'INVAGE', \n                   'INJURY', 'INITDIR', 'VEHTYPE', 'MANOEUVER', 'DRIVACT', \n                   'DRIVCOND', 'PEDTYPE', 'PEDACT', 'PEDCOND', 'CYCLISTYPE', \n                   'CYCACT', 'CYCCOND']","b73d638a":"# Shortlist of the geographic attributes\nksi_geographical = ['LATITUDE', 'LONGITUDE', 'Ward_Name', 'Hood_Name', 'District',\n                   'Division', 'STREET1', 'STREET2']","4f754e0f":"# Shortlist of the Boolean attributes\nksi_boolean = ['PEDESTRIAN', 'CYCLIST', 'AUTOMOBILE', 'MOTORCYCLE', 'TRUCK', \n               'TRSN_CITY_VEH','EMERG_VEH', 'PASSENGER', 'SPEEDING', 'AG_DRIV', \n               'REDLIGHT', 'ALCOHOL', 'DISABILITY', 'FATAL']","06689f5e":"df_ksi.head(3)","854edad2":"df_ksi.tail(3)","ba1dba3f":"# Remove incidents which are listed as property damage\n# in order to keep only Fatal and Non-Fatal injuries\n\nprint(\"KSI number of rows: \", len(df_ksi))\n\ndf_ksi = df_ksi[df_ksi['ACCLASS'] != 'Property Damage Only']\n\nprint(\"KSI number of rows: \", len(df_ksi))","71f1f9b5":"df_ksi.sample(3)","43489f95":"print(\"Numerical Attributes: \\n\", str(ksi_numerical))","2c5e5605":"# Learning Exercise\n# Try changing the attribute with another numerical attribute listed above:\nattribute = 'YEAR'\n\nplt.figure(figsize=(12,6))\ndata = df_ksi[attribute].value_counts().sort_index()\ndata.plot(kind='bar')\nplt.show()","de7da0ef":"print(\"Categorical Attributes: \\n\", str(ksi_categorical))","d45e0c39":"# Learning Exercise\n# Try changing the attribute with another categorical attribute listed above:\n# INVAGE is \"Age of Involved Party\"\nattribute = 'INVAGE'\n\nplt.figure(figsize=(12,6))\ndata = df_ksi[attribute].value_counts()\ndata.plot(kind='bar')\nplt.show()","b8ca610a":"print(ksi_boolean)","4f856d56":"# Learning Exercise\n# Change the attribute below to calculate what percentage of incidents\n# reported th involvemnt of possible items listed above\nattribute = 'AUTOMOBILE'\n\nprint(\"Percentage of incidents that involve\", attribute, \"=\", df_ksi[attribute].sum() \/ df_ksi[attribute].count())","2d023479":"# Summary statistics, for simplicity\n# we run it over all attributes,\n# but they only make sense for numeric\ndf_ksi.describe()","c749bd5a":"# Summary statistics aggregated by month\ndf_ksi_monthly = df_ksi.groupby(by=['YEAR', 'MONTH'],as_index=False).sum()\n\n# Show only the last 10 rows\ndf_ksi_monthly.tail(10)","24edebf3":"import seaborn as sns","7aaf7e6d":"# Learning Exercise\n\n# Try changing the independent (x) and dependent (y) \n# variables to visualize the trends in the data\n# (optional: uncomment the Hue and see how that changes the plot)\n\nplt.figure(figsize=(18,6))\n\nsns.barplot(data = df_ksi_monthly,\n            #hue = 'MONTH',\n            x = 'YEAR',\n            # Number of events involving automobiles\n            y = 'AUTOMOBILE',\n            capsize = 0.2)\n\n# Legend Placement\nplt.legend(loc='best')\n#plt.legend(loc='upper right')\n#plt.legend(loc='upper left')\n\nplt.show()","16cb6e7e":"# Learning Exercise\n# Try changing the independent (x) and dependent (y) \n# variables to visualize the trends in the data\n\nsns.jointplot(data = df_ksi_monthly,\n              kind = 'reg',\n              x = 'AG_DRIV', # Aggressive and Distracted Driving Collision\n              y = 'SPEEDING') # Speeding Related Collision\nplt.show()","ff7415e3":"# More correlations between attributes accumulated by month\n\n# PASSENGER Passenger Involved in Collision\n# SPEEDING Speeding Related Collision\n# AG_DRIV Aggressive and Distracted Driving Collision\n# ALCOHOL Alcohol Related Collision\n# FATAL Fatal event\n\nsns.pairplot(df_ksi_monthly[['PASSENGER','SPEEDING','AG_DRIV','ALCOHOL','FATAL']])\nplt.show()","a629ed70":"data = df_ksi_monthly.pivot('MONTH','YEAR','FATAL')\ndata","2c75aefa":"plt.figure(figsize=(12,6))\nsns.heatmap(data)\nplt.show()","50b4a4e1":"print(\"Geographic Attributes: \\n\", str(ksi_geographical))","52d5128c":"# Learning Exercise\n# Try changing the geographic attribute with another attribute listed above:\nattribute = 'District'\n\nplt.figure(figsize=(12,6))\ndata = df_ksi[attribute].value_counts().head(12)\ndata.plot(kind='bar')\nplt.show()","757b335d":"df_ksi_geo = df_ksi[df_ksi['FATAL'] == 1]\ndf_ksi_geo = df_ksi_geo[['LATITUDE', 'LONGITUDE', 'FATAL']].sample(1000)\ndf_ksi_geo.sample(3)","07a3c48f":"lat_Toronto = df_ksi.describe().at['mean','LATITUDE']\nlng_Toronto = df_ksi.describe().at['mean','LONGITUDE']","02171fd5":"# Heatmap of fatal events\nmap_ksi_fatal = folium.Map(location = [lat_Toronto, lng_Toronto],\n                           #tiles = 'Stamen Toner', # uncomment this code to change basemap\n                           zoom_start = 11)\n\nHeatMap(df_ksi_geo.values, min_opacity =0.4).add_to(map_ksi_fatal)\nmap_ksi_fatal","8913f1b0":"# Below we are visualizing the correlation of the attributes.\n#  - If the correlation for two attributes is closer to positive one, \n#    they are positively correlated, meaning that if the value for one increases, \n#    the other is expected to increase as well.\n#  - If the correlation for two attributes is close to negative one, \n#    they are negatively correlated, meaning that if the value for one increases, \n#    the other is expected to decrease as well.\n#  - If the correlation is close to zero, there is likely no correlation.\n\nplt.figure(figsize=(14,10))\nsns.heatmap(df_ksi_monthly[ksi_boolean].corr())\nplt.show()","5c17c25c":"from sklearn.model_selection import train_test_split","cf8ea16a":"# the function below takes in the dataset, and a list of input columns names \n# as model input and a column name to predict for.\ndef split_train_test(data, X, y):\n    X_all = data[X]\n    y_all = data[y]\n    \n    X_train, X_test, y_train, y_test = train_test_split(X_all,\n                                                        y_all,\n                                                        test_size=0.4,\n                                                        random_state=42)\n    \n    return X_train, X_test, y_train, y_test","cf8875c2":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","2ea5f0b7":"from sklearn.tree import DecisionTreeClassifier","3c1ab7e3":"# Learning Exercise:\n# Try changing the variables of the model and see how the model accuracy changes!\nmodel_input = ['YEAR','MONTH','WEEKDAY','Hood_ID']\nmodel_output = 'FATAL'\n\nX_train, X_test, y_train, y_test = split_train_test(data = df_ksi,\n                                                    X = model_input,\n                                                    y = model_output)","191f6f67":"dtree = DecisionTreeClassifier()","aefe6da2":"dtree.fit(X_train, y_train)","6904d972":"predictions = dtree.predict(X_test)","2565b24d":"# The confusion matrix shows the proportion of incidents predicted correctly, and incorrectly\n\nprint(confusion_matrix(y_test, predictions))","105946da":"print(classification_report(y_test, predictions))","f2e3072e":"accuracy_score(y_test, predictions)","7a96dfae":"from IPython.display import Image\nfrom sklearn.externals.six import StringIO\nfrom sklearn.tree import export_graphviz\nimport pydot\n\ndot_data = StringIO()","ea14a4b4":"def draw_decision_tree(tree):\n    export_graphviz(tree,\n                    out_file=dot_data,\n                    feature_names = X_train.columns,\n                    filled = True,\n                    rounded = True)\n    \n    graph = pydot.graph_from_dot_data(dot_data.getvalue())\n    \n    return Image(graph[0].create_png())","753a666d":"# NOTE: Depending on your device performance, you may not want to\n#       run the command below because it computationally intensive\n\n# Running the command below will draw the entire descision tree!\n# You can copy the image and paste it in Microsoft Paint or another image viewer and see the decision paths.\n\n#draw_decision_tree(dtree)","9e39ff09":"from sklearn.ensemble import RandomForestClassifier","d36a96a7":"# Learning Exercise:\n# Try changing the variables of the model and see how the model accuracy changes!\nmodel_input = ['YEAR','MONTH','WEEKDAY','Hood_ID']\nmodel_output = 'FATAL'\n\nX_train, X_test, y_train, y_test = split_train_test(data = df_ksi,\n                                                    X = model_input,\n                                                    y = model_output)","402efc5a":"model_input = ['YEAR','MONTH','WEEKDAY','LATITUDE','LONGITUDE']\nmodel_output = 'FATAL'\n\nX_train, X_test, y_train, y_test = split_train_test(data = df_ksi,\n                                                    X = model_input,\n                                                    y = model_output)","953f4073":"rfc = RandomForestClassifier(n_estimators = 200)","622f20df":"rfc.fit(X_train, y_train)","5732dd44":"predictions = rfc.predict(X_test)","654e084a":"print(confusion_matrix(y_test, predictions))","ea1024ed":"print(classification_report(y_test, predictions))","fee1f3c6":"accuracy_score(y_test, predictions)","89467e6a":"print(\"Number of Descision Trees  our Random Forest Model contains: \", len(rfc.estimators_))","3f5499ec":"# NOTE: Depending on your device performance, you may want to\n#       run the command below because it is resource intensive\n\n# Running the command below will draw the entire descision tree!\n# You can copy the image and paste it in Microsoft Paint or another image viewer and see the decision paths.\n\n#draw_decision_tree(rfc.estimators_[5])","234eb9df":"## Random Forest Classifier","2880504a":"## Plotting Numerical Data","13e7af79":"## Working with Aggregrate Statistics","b7e8cb02":"## Attribute names ","cc160be1":"# Folium Overview\n\nFolium is a Python library for visualizing geospatial data, in fact it, uses Leaflet under the hood.\n\n* http:\/\/python-visualization.github.io\/folium\/\n\n* https:\/\/leafletjs.com\/","18b31c0d":"## Seaborn\nSeaborn is another visualization library similar to matplotlib. https:\/\/seaborn.pydata.org\/","40600ec8":"# Data Exploration","b84a579a":"## Descision Tree Classifier","f7a0b7b8":"## Plotting Geographic Data","b67b5976":"## Plotting Categorical data","40a41760":"# Loading Data\n [Killed or Seriously Injured (KSI) from 2007 \u2013 2017](http:\/\/bit.ly\/open-data-ksi-toronto)","1a79be37":"## Data Cleaning","6d20b507":"# Matplotlib Overview\n\nMatplotlib is a Python library for data visualization.\n\nhttps:\/\/matplotlib.org\/","db6c613e":"### **Press CTRL+Enter to run each cell**\n### Press SHIFT+Enter to run a cell and move onto the next cell","2b2406be":"## Plotting Time-Series Numerical Data","884f1367":"## Visualizing the Decision Tree","b1ab077d":"# Pandas Overview\n\nPandas is a Python library for data preparation and analysis.\n\nhttps:\/\/pandas.pydata.org\/","db615bdf":"# Working with Python Libraries\n\nhttps:\/\/www.python.org\/","d23e8d20":"# Numpy Overview\n\nNumpy is a Python library for linear algebra (matrices) calculations.\n\nhttp:\/\/www.numpy.org\/","9eeab4d0":"# Machine Learning for Geospatial Data Workshop #1\n*Geospatial Club -\nWinter 2019*\n\n## [Slides](http:\/\/bit.ly\/geoml-1) and [Kernel](https:\/\/www.kaggle.com\/jrmistry\/uwgeo-club-ml-for-vector-geodata-workshop-1) for the first workshop on Machine Learning for [Vector data](https:\/\/www.kaggle.com\/jrmistry\/killed-or-seriously-injured-ksi-toronto-clean).\n\n## [Slides](http:\/\/bit.ly\/geoml-2) and [Kernel](https:\/\/www.kaggle.com\/jcarrillo\/machine-learning-for-geospatial-data-workshop-2a) for the second workshop on Machine Learning for [Raster data](https:\/\/www.kaggle.com\/c\/planet-understanding-the-amazon-from-space).\n\n\n\nThe purpose of the workshop is to give the [UWaterloo](https:\/\/uwaterloo.ca\/) students and the members of the [Geospatial Club](http:\/\/bit.ly\/uwgeospatial) an introduction to the most recent Machine Learning tools for analysis of Geospatial data. The workshop is held in collaboration with the [Geospatial Centre at the University of Waterloo](https:\/\/uwaterloo.ca\/library\/geospatial\/).\n\nAll of the software tools and libraries are open source. The dataset we use is a table titled \"Killed or Seriously Injured\" (KSI) from the [City of Toronto's Police Open Data portal](http:\/\/bit.ly\/open-data-ksi-toronto). It contains registries of all traffic collisions between 2007 and 2017 where a person was injured or property damage was reported.\n\nWe hope that you will learn something new from the content of this workshop. If you have questions after the workshop, then please feel free to message the Geospatial Club or the workshop presenters.\n\n* [Jaydeep Mistry](https:\/\/www.linkedin.com\/in\/jaydeep-mistry\/) at jaydeep.mistry@uwaterloo.ca\n\n* [Juan Carrillo](https:\/\/www.linkedin.com\/in\/jmcarrillog\/) at jmcarril@uwaterloo.ca\n\n\n","1cfa484e":"# Machine Learning for predicting fatal events\nScikit-learn is one of the most popular Machine Learning libraries written in Python.\n\nhttps:\/\/scikit-learn.org\/","5a00b6c2":"## Correlation Analysis","3c4a43b5":"## Train\/Test Splitting"}}