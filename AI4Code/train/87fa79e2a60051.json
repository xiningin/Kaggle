{"cell_type":{"bf940614":"code","7c7bef67":"code","71916b8c":"code","ff360c91":"markdown","31f1ec9c":"markdown","53746952":"markdown","8a379328":"markdown","d9527c8d":"markdown","492cec76":"markdown","1be11931":"markdown","60d1bcc9":"markdown","c302a590":"markdown","a9be0d01":"markdown"},"source":{"bf940614":"print(rydd_opp_i_tekst(\"Skikkelig enkel string\"))\nprint(rydd_opp_i_tekst(\"Dette er tekst med STOOOORE og sm\u00e5 bokstaver. Av og til kommer det tegn, noen er enkler (.) og noen er rare \\\"?\/'@'\"))\nprint(rydd_opp_i_tekst(\"*&%#*&^&*#%^&*@!^&*%^&*@^&*^&*@#^&*^&*@^&*\u00e5lesund er best!\"))","7c7bef67":"vinner_score = 100\n\nspill_ferdig = False\nrunde_nummer = 1\ntotal_sum = 0\nwhile not spill_ferdig:\n    print(f\"Runde {runde_nummer}\")\n    runde_ferdig = False\n    while not runde_ferdig:\n        # Kast to terninger og lag en variabel med summen\n        print(\"  Du kastet 1 og 3 = 4. Vil du kaste igjen?\")\n        # Be om input fra brukeren (y \/ n) og la dette avgj\u00f8re om runden er ferdig eller ikke\n        runde_ferdig = True # Dette skal bare skje n\u00e5r spilleren kaster 7 eller velger \u00e5 st\u00e5\n        if runde_ferdig:\n            print(f\"  Runde {runde_nummer} er ferdig. Total sum: {total_sum}\")\n    \n    spill_ferdig = True # Dette skal bare skje n\u00e5r total_sum er st\u00f8rre eller lik 100\n\nprint(f\"Spillet er ferdig. Det tok {runde_nummer} runder, og du fikk {total_sum} poeng!\")","71916b8c":"import pandas as pd\n\ndef rydd_opp_i_tekst(data):\n    data.text=data.text.apply(lambda x:x.lower())\n    # Gj\u00f8r resten av tingenene her\n    return data\n\ndata = pd.read_csv('..\/input\/nlpgettingstarted\/train.csv') # Her m\u00e5 du ha lastet inn datasettet `nlp-getting-started`\ndata = rydd_opp_i_tekst(data)\ndisplay(data)","ff360c91":"# Lag din egen .csv-leser\n#### Vanskelighetsgrad 2\nMan vil egentlig sjeldent lage sin egen .csv-leser med mindre det er for l\u00e6ringens skyld, men nettopp det er jo en god grunn!\n\n1) Finn en enkel .csv-fil (for eksempel https:\/\/www.kaggle.com\/andershafreager\/browser-market-share?select=browsers_marketshare_year.csv).\n\n2) Les inn alle linjene fra filen i Python.\n\n3) Lag en variabel `kolonner` der du splitter f\u00f8rste linje p\u00e5 komma.\n\n4) Lag en variabel `rader` som er en tom liste.\n\n5) Loop over alle linjer bortsett fra den f\u00f8rste, og splitt p\u00e5 komma. Denne listen er en rad. Legg til raden i listen `rader` med `.append()`-funksjonen\n\nGratulerer, du har n\u00e5 laget en .csv-leser! N\u00e5 kan du hente ut celle i f\u00f8rste rad og f\u00f8rste kolonne med `rader[0][0]` (f\u00f8rste tall peker p\u00e5 hvilken rad, andre tall peker p\u00e5 hvilken kolonne).","31f1ec9c":"# Lag en BMI-kalkulator\n#### Vanskelighetsgrad 1\n\nI denne oppgaven skal vi lage en funksjon som tar inn to argumenter `h\u00f8yde` og `vekt`, og returnerer beregnet BMI. \n\n1) Lag en funksjon `regn_ut_bmi(h\u00f8yde, vekt)` som tar inn to argumenter h\u00f8yde og vekt.\n\n2) Lag en variabel `bmi` som er BMI basert p\u00e5 formelen.\n\n3) Returner variabelen `bmi` og test at programmet funker.","53746952":"# Terningkast og histogram\n#### Vanskelighetsgrad 2\nI denne oppgaven skal du l\u00e6re hvordan du lager tilfeldige tall. Du skal bruke dette til \u00e5 kaste veldig mange terninger for \u00e5 se p\u00e5 hva som er mest sannsynlig \u00e5 f\u00e5 dersom du kaster to terninger.\n\n1) S\u00f8k p\u00e5 google og finn ut hvordan du kan lage tilfeldige tall for terningkast i Python (Hint: du vil sannsynligvis bruke `random`-modulen).\n\n2) Bli litt kjent med `random.randint` (eller hva du har funnet) ved \u00e5 pr\u00f8ve litt forskjellige ting, lese dokumentasjonen og eksempler.\n\n### Du skal n\u00e5 bruke dette til \u00e5 spille mange runder med 2 terningkast. For hver runde skal du ta vare p\u00e5 summen slik at vi til slutt kan lage et histogram over alle kastene.\n\n3) Lag en tom liste `terningkast_sum_liste` \n\n4) Lag en for-loop som kj\u00f8rer for eksempel 10 ganger (vi skal \u00f8ke dette tallet n\u00e5r vi ser at alt er riktig). I for-loopen, lag to variabler som representerer hvert sitt terningkast (for eksempel `terningkast1` og `terningkast2`). Print ut disse for se at alt er som det skal v\u00e6re.\n\n5) Lag en ny variabel `terningkast_sum` som er summen av terningkastene, og legg til verdien av denne i listen (Hint: bruk `.append()`-funksjonen).\n\n6) S\u00f8k p\u00e5 google og finn ut hvordan du kan lage et histogram med `matplotlib`, og gj\u00f8r dette. Hvor mange bins l\u00f8nner seg \u00e5 bruke? (les om bins om du ikke vet hva det er).\n\n7) Hva er den mest sannsynlige summen \u00e5 f\u00e5 med to terningkast? Forst\u00e5r du hvorfor?","8a379328":"# Lag din egen len()-funksjon\n#### Vanskelighetsgrad 1\n\nI Python er det en innebygget funksjon `len()` som gir deg lengden til en string, en liste og liknende. I denne oppgaven skal vi lage v\u00e5r egen! Strategien er \u00e5 lage en tellevariabel, og loope over alle elementene i stringen\/listen, og \u00f8ke tellevariabelen med 1 for hver gang.\n\n1) Lag en tom funksjon `min_len(ting)` som tar inn et argument `ting` og returner tallet 0.\n\n2) En m\u00e5te \u00e5 telle lengden til en string eller liste p\u00e5 er \u00e5 lage en tellevariabel, og loope over alt i stringen\/listen, og \u00f8ke tellevariabelen med 1 for hvert element. Lurt! Lag en variabel `teller` som er lik 0.\n\n3) Lag en for-loop over alle elementene (`for element in ting:`), og for hvert element, \u00f8k verdien til `teller` med 1.\n\n4) Returner `teller` i stedet for tallet 0.\n\n5) Test funksjonen p\u00e5 noen forskjellige strings og lister, og sammenlikne at den gir samme svar som `len()`.","d9527c8d":"# Tri smi kinisiri-generator\n#### Vanskelighetsgrad 2\n\nN\u00e5 skal vi lage en funksjon som gj\u00f8r om tekst i klassisk tre sm\u00e5 kinesere. Alle vokaler blir gjort om til den samme vokalen.\n\n1) Lag en funksjon `lag_tre_sm\u00e5_kinesere(string, erstatt_med_vokal)` som tar inn en string og en vokal og returnerer `string` (funksjonen gj\u00f8r ingenting enn\u00e5).\n\n2) I funksjonen, lag en variabel med navn `vokaler`, som er en string som inneholder alle vokalene.\n\n3) I funksjonen, loop over alle vokalene i variabelen `vokaler` (`for vokal in vokaler:`), og gj\u00f8r en `.replace()` p\u00e5 inputvariabelen `string` s\u00e5 du bytter ut alle vokalene med `erstatt_med_vokal`.\n\n4) Test funksjonen med forskjellige inputstrings.","492cec76":"# Celcius til Fahrenheit-kalkulator\n#### Vanskelighetsgrad 1\n1) Lag en funksjon som regner om Celcius til Fahrenheit (Hint: `def celcius_til_fahrenheit(celcius):`)\n\n2) Lag en loop over tall (grader celcius) fra -50 til +100 og bruk funksjonen til \u00e5 regne ut hvor mange fahrenheit de forskjellige verdiene tilsvarer og print dette ut.\n\n3) Lag to lister (`celcius` og `fahrenheit`), og bruk `.append()`-funksjonen til \u00e5 legge til hvert av tallene mens du looper over.\n\n4) Bruk `matplotlib` til \u00e5 plotte disse `Hint: plt.plot(celcius, fahrenheit)`. N\u00e5r har celcius og fahrenheit samme verdi?","1be11931":"# Spill med terningkast\n#### Vanskelighetsgrad 3\nN\u00e5 skal du programmere et spill med terningkast. Dette spillet er ogs\u00e5 morsomt p\u00e5 fest, men kanskje enda morsommere i Python \ud83d\ude0e \n\nI dette spillet kaster vi 2 terninger, og m\u00e5let er \u00e5 f\u00e5 over 100 poeng. Spillet foreg\u00e5r ved at det spilles flere runder. I hver runde kan du kaste s\u00e5 mange ganger du vil, men hvis du f\u00e5r 7 f\u00e5r du 0 poeng den runden. Det kan derfor l\u00f8nne seg \u00e5 st\u00e5 og ta vare p\u00e5 poengene.\nEksempel som viser gangen i spillet:\n - Runde 1\n   - Du kaster 3 og 6 = 9. Totalt 9 poeng.\n   - Du kaster 2 og 3 = 5. Totalt 14 poeng.\n   - Du kaster 4 og 4 = 8. Totalt 22 poeng.\n   - Du st\u00e5r. Totalt 22 poeng.\n - Runde 2\n   - Du kaster 5 og 5 = 10. Totalt 32 poeng.\n   - Du kaster 2 og 5 = 7 og mister poengene denne runden. Totalt 22 poeng.\n - Runde 3\n   - Du kaster 6 og 5 = 11. Totalt 33 poeng.\n   - Du kaster 3 og 3 = 6. Totalt 39 poeng.\n   - st\u00e5r. Totalt 39 poeng.\n - Runde 4\n   - Du kaster 3 og 4 = 7 og mister poengene denne runden. Totalt 39 poeng.\n - Runde 5\n   - Du kaster 1 og 1 = 2 og mister alle poengene. Totalt 0 poeng\n ...\n\nDu skal n\u00e5 lage dette spillet. I cellen under er det et utgangspunkt av logikk du kan bruke for \u00e5 lage spillet. Bruk godt med tid p\u00e5 \u00e5 forst\u00e5 hva koden gj\u00f8r, og hva som mangler. Vi lar denne v\u00e6re litt \u00e5pen (uten punkt 1, 2, 3 osv) slik at du blir presset til \u00e5 tenke n\u00f8ye :)\n\nBonusoppgave: Utvid spillet til \u00e5 ha 2 (eller flere) spillere.","60d1bcc9":"# rydd_opp_i_tekst-funksjon\n#### Vanskelighetsgrad 1\n\nTidligere i kurset har vi jobbet med tekst fra tweets og liknende. Vi husker jo at datamaskinen p\u00e5 ingen m\u00e5te mener at `Hei` og `hei` er det samme ordet, s\u00e5 vi m\u00e5 hjelpe den. P\u00e5 fagspr\u00e5ket kaller vi dette preprosessering av dataene, der vi jobber med \u00e5 gj\u00f8re om dataene til et enklere format som datamaskinen kan jobbe med. I denne oppgaven skal du lage en `rydd_opp_i_tekst`-funksjon, dvs en funksjon som fjerner alle spesialtegn, gj\u00f8r alt om til sm\u00e5 bokstaver, og evt andre ting du kan komme p\u00e5. For \u00e5 gj\u00f8re analyse av tekst (feks med maskinl\u00e6ring) m\u00e5 teksten ryddes i aller f\u00f8rst.\n\n1) Lag en funksjon `rydd_opp_i_tekst` som tar inn et argument `tekst`.\n\n2) Gj\u00f8r de forskjellige stegene vi har jobbet med tidligere inne i funksjonen. Pass p\u00e5 \u00e5 skrive gode kommentarer.\n\n3) Se at du f\u00e5r fornuftig output fra koden under. Kanskje det er verdt et google-s\u00f8k (evt sp\u00f8rre oss) om du st\u00e5r fast!","c302a590":"# Gangetabellenspill\n#### Vanskelighetsgrad 2\n\nI denne oppgaven skal vi lage det alle skulle hatt da vi l\u00e6rt gangetabellen! Et spill som gir mengdetrening p\u00e5 gangestykker!\n\n1) S\u00f8k p\u00e5 google og finn ut hvordan man kan lage tilfeldige tall.\n\n2) Bli litt kjent med modulen (det er sannsynligvis `random`-modulen du finner) ved \u00e5 bruke den litt.\n\n3) Lag en for-loop som kj\u00f8rer 10 ganger, og trekk to tilfeldige tall `tall1` og `tall2`. Gang disse sammen og print ut tekst som `3 * 4 = 12` for \u00e5 se at alt virker som det skal.\n\n4) I stedet for \u00e5 printe ut med svar, print ut kun oppgaven og be om svaret fra spilleren (bruk `input()`-kommandoen) og lagre dette i en variabel.\n\n5) Sjekk om brukeren svarte riktig, og print ut \"Ja, du svarte riktig!\" eller \"Feil svar\" avhengig av om det var riktig eller ikke.\n\n6) Lag en variabel `antall_riktige_svar` f\u00f8r for-loopen som starter, og \u00f8k verdien med 1 for hvert riktige svar i for-loopen.\n\n7) N\u00e5r spillet er ferdig, print ut hvor mange riktige svar brukeren fikk.\n\n8) De vanskeligste gangestykkene er gjerne de med og 7, 8. Gj\u00f8r om spillet til \u00e5 kun teste 7- og 8-gangeren.","a9be0d01":"# Lag rydd_opp_i_tekst-funksjon p\u00e5 pandas-objekt\n#### Vanskelighetsgrad 2\n\nI denne oppgaven skal vi gj\u00f8re det samme som lenger opp, men denne gangen gj\u00f8r vi det slik vi s\u00e5 i forelesningen p\u00e5 pandas-objektet. Fra forelesningsnotatene husker vi at vi kunne gj\u00f8re om all tekst i hele csv-filen ved \u00e5 kj\u00f8re `data.text=data.text.apply(lambda x:x.lower())`. "}}