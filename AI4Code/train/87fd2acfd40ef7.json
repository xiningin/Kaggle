{"cell_type":{"226a9edb":"code","f1ccb2a3":"code","446e83cf":"code","724f5ba8":"code","b45f15c8":"code","1f313587":"code","a47c923e":"code","efbcb558":"code","7e7f0dfc":"code","52717f63":"markdown","8b628909":"markdown","ea4133f7":"markdown","d48f052e":"markdown","e6b90b43":"markdown","b8e86195":"markdown"},"source":{"226a9edb":"from IPython.display import Image\nImage(\"..\/input\/sign-language-mnist\/amer_sign2.png\")","f1ccb2a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","446e83cf":"import csv\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom os import getcwd","724f5ba8":"def get_data(filename):\n    with open(filename) as training_file:\n        csv_reader = csv.reader(training_file, delimiter=',')\n        first_line = True\n        temp_images = []\n        temp_labels = []\n        for row in csv_reader:\n            if first_line:\n                # print(\"Ignoring first line\")\n                first_line = False\n            else:\n                temp_labels.append(row[0])\n                image_data = row[1:785]\n                image_data_as_array = np.array_split(image_data, 28)\n                temp_images.append(image_data_as_array)\n        images = np.array(temp_images).astype('float')\n        labels = np.array(temp_labels).astype('float')\n    return images, labels","b45f15c8":"train_path = '..\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv'\ntest_path = '..\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv'\n\ntraining_images, training_labels = get_data(train_path)\ntesting_images, testing_labels = get_data(test_path)\n\nprint(training_images.shape)\nprint(training_labels.shape)\nprint(testing_images.shape)\nprint(testing_labels.shape)","1f313587":"training_labels","a47c923e":"training_images = np.expand_dims(training_images, axis=3)\ntesting_images = np.expand_dims(testing_images, axis=3)\n\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\n\nvalidation_datagen = ImageDataGenerator(rescale=1. \/ 255)\n    \n# Keep These\nprint(training_images.shape)\nprint(testing_images.shape)\n","efbcb558":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.1),\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.1),\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.1),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation=tf.nn.relu),\n    tf.keras.layers.Dense(26, activation=tf.nn.softmax)])\n\nmodel.compile(optimizer = 'adam',\n              loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n\nhistory = model.fit_generator(train_datagen.flow(training_images, training_labels, batch_size=128),\n                              steps_per_epoch=len(training_images) \/ 128,\n                              epochs=50,\n                              validation_data=validation_datagen.flow(testing_images, testing_labels, batch_size=32),\n                              validation_steps=len(testing_images) \/ 32)\n\nmodel.evaluate(testing_images, testing_labels, verbose=0)","7e7f0dfc":"# Plot the chart for accuracy and loss on both training and validation\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()","52717f63":"### Data Augmentation","8b628909":"## Prediction of Sign-Language MNIST (American Sign Language)","ea4133f7":"## Convolutional Neural Network (CNN)\n\nThe Convolutional Neural Network model is a popular classification model for images and this is built via Keras.\n\nDescription of Model:\n\n#### 3 Convolutional Blocks\nEach block consists of a Conv2D layers with RelU activation function to extract the features. A MaxPool2D layer is added to reduce the output image and summarize the features extracted from the Convd2D layers. A Dropout Layer is added at a dropout rate of 0.1 to increase the robustness of the model\/prevent overfitting on the training dataset.\n\n#### Deep Neural Network Layer\nA flatten layer is added from the output of the 3 Convolutional Block to transform the image into a single vector output.\nA Dense Layer and an Output layer is added after this Flatten layer.","d48f052e":"With a small dataset, it is likely that the Convolutional Neural Network will miss out on extracting features on the different shapes of hands. For example, pictures where the hand is slightly tilted at an angle or mirror images of the hand. To avoid such a problem, we need to expand the scope of our dataset to include images that cover these types of scenarios. One way of increasing our dataset is to perform data augmentation. In data augmentation, we can grayscale an image, flip the image vertically or horizontally, zoom in the image, rotations, shearing and etc. Here we perform data augmentation on the following ways, \n\n   - `rotation_range`=40,\n   - `width_shift_range`=0.2,\n   - `height_shift_range`=0.2,\n   - `shear_range`=0.2,\n   - `zoom_range`=0.2,\n   - `horizontal_flip`=True","e6b90b43":"American Sign Language (ASL) is a complete, natural language that has the same linguistic properties as spoken languages, with grammar that differs from English. ASL is expressed by movements of the hands and face. It is the primary language of many North Americans who are deaf and hard of hearing, and is used by many hearing people as well. The dataset format is patterned to match closely with the classic MNIST. Each training and test case represents a label (0-25) as a one-to-one map for each alphabetic letter A-Z (and no cases for 9=J or 25=Z because of gesture motions). The training data (27,455 cases) and test data (7172 cases) are approximately half the size of the standard MNIST but otherwise similar with a header row of label, pixel1,pixel2\u2026.pixel784 which represent a single 28x28 pixel image with grayscale values between 0-255. The original hand gesture image data represented multiple users repeating the gesture against different backgrounds. The Sign Language MNIST data came from greatly extending the small number (1704) of the color images included as not cropped around the hand region of interest. To create new data, an image pipeline was used based on ImageMagick and included cropping to hands-only, gray-scaling, resizing, and then creating at least 50+ variations to enlarge the quantity","b8e86195":"### About Dataset\n\nMNIST dataset has the following features:\n\n- The size of each image is 28x28 pixels.\n- Each image has only 1 color channel, i.e., grayscale image.\n- Each pixel has value in the range of [0,255] where 0 represents black, and 255 represents white.\n"}}