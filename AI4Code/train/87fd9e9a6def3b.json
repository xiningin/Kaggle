{"cell_type":{"d4d6d77f":"code","999511d8":"code","51e561ea":"code","2dd5276a":"code","9d15d5b0":"code","bcca85a2":"code","20b64f04":"code","e37ae7f0":"code","3a286853":"code","af11be18":"code","0b06e798":"code","69a89c6a":"code","d6b14cc1":"markdown"},"source":{"d4d6d77f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","999511d8":"#Importing the library\nimport lightgbm as lgb\nimport warnings\nwarnings.filterwarnings(\"ignore\")","51e561ea":"%%time\ntrain = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use","2dd5276a":"#We don't want weight=0 datas\ntrain = train.query('weight > 0').reset_index(drop = True)\ntrain.head(10)","9d15d5b0":"#Filling the nan values\nf_mean = train.mean()\ntrain.fillna(f_mean, inplace=True)","bcca85a2":"#For generating 0 or 1 on the basis of resp features(which are returns from the market)\ntrain['action'] =  ( ((train['resp_1'] > 0 ) | (train['resp_2'] > 0 ) | (train['resp_3'] > 0 ) | (train['resp_4'] > 0 )) & (train['resp'] > 0 ) ).astype('int')","20b64f04":"x_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = train.loc[:, 'action']","e37ae7f0":"y_train.head(10)","3a286853":"#Hypertuned Model\nclf = lgb.LGBMClassifier(boosting_type='gbdt', num_leaves=124, \n                         max_depth=- 1, learning_rate=0.07, n_estimators=150, \n                         subsample_for_bin=200000, objective='binary', metric='auc', \n                         min_split_gain=0.5, min_child_weight=1, min_child_samples=5, \n                         subsample=0.7, subsample_freq=1, colsample_bytree=0.75, \n                         reg_alpha=1.2, reg_lambda=1.2, random_state=42, n_jobs=- 1, \n                         silent=True, importance_type='split')","af11be18":"%time clf.fit(x_train, y_train)","0b06e798":"from tqdm import tqdm\nimport janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set","69a89c6a":"for (test_df, pred_df) in tqdm(iter_test):\n    if test_df['weight'].item() > 0:\n        X_test = test_df.loc[:, test_df.columns.str.contains('feature')]\n        y_preds = clf.predict(X_test)\n        pred_df.action = y_preds\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","d6b14cc1":"**LightGBM Classifier** is used here with hyperparameter tuned already.\n\n**Note:** LightGBM is used for classification generally when the data are in millions which matches the problem statement.\n\nIf it helps you understanding the concept and ease of code used then please **UPVOTE** this notebook for a *Good Cause*.\n\nComments are appreciated if having any doubt. Happy Learning!"}}