{"cell_type":{"7c036a16":"code","d4142593":"code","0ad4e7e4":"code","4ad01593":"code","2fa4795c":"code","53b88cf5":"code","0c7c38a3":"code","4af0b207":"code","110dc808":"markdown","a208faea":"markdown","cba5329c":"markdown","dcc6b01c":"markdown","b1686dfc":"markdown"},"source":{"7c036a16":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.spatial.distance import cdist\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n\nfrom google.cloud import bigquery\n\ndata_path = Path('\/kaggle\/input\/covid19-global-forecasting-week-1\/')\ntrain = pd.read_csv(data_path \/ 'train.csv')\ntest = pd.read_csv(data_path \/ 'test.csv')\n\ndata_path = Path('\/kaggle\/input\/covid19-global-forecasting-week-4\/')\ntrain_2 = pd.read_csv(data_path \/ 'train.csv')\ntest_2 = pd.read_csv(data_path \/ 'test.csv')","d4142593":"x = len([nation for nation in train_2['Country_Region'].unique()])\nprint(\"There are {} different nations in the training dataset.\".format(x))\n\ns = train_2.groupby('Country_Region').ConfirmedCases.max()\nnations_cases = [x for x in s.index if s[x]]\nprint(\"{} of these nations have confirmed cases of COVID-19.\".format(len(nations_cases)))\n\ns_2 = train_2.groupby('Country_Region').Fatalities.max()\nnations_deaths = [x for x in s_2.index if s_2[x]]\nprint(\"In {} of these nations, people have died of COVID-19.\".format(len(nations_deaths)))\n\nbarplot_df = pd.DataFrame({\n    'nations': nations_cases,\n    'cases': [s[x] for x in s.index if s[x]]\n})\nplt.figure(figsize=(20, 20))\nsns.barplot(x=\"cases\", y=\"nations\", data=barplot_df.sort_values(by='cases', ascending=False))\nplt.title('cases by nation')\nplt.tight_layout()\nplt.show()","0ad4e7e4":"barplot_df = pd.DataFrame({\n    'nations': nations_deaths,\n    'deaths': [s_2[x] for x in s_2.index if s_2[x]]\n})\nplt.figure(figsize=(20, 20))\nsns.barplot(x=\"deaths\", y=\"nations\", data=barplot_df.sort_values(by='deaths', ascending=False))\nplt.title('deaths by nation')\nplt.tight_layout()\nplt.show()","4ad01593":"client = bigquery.Client()\ndataset_ref = client.dataset(\"noaa_gsod\", project=\"bigquery-public-data\")\ndataset = client.get_dataset(dataset_ref)\n\ntables = list(client.list_tables(dataset))\n\ntable_ref = dataset_ref.table(\"stations\")\ntable = client.get_table(table_ref)\nstations_df = client.list_rows(table).to_dataframe()\n\ntable_ref = dataset_ref.table(\"gsod2020\")\ntable = client.get_table(table_ref)\ntwenty_twenty_df = client.list_rows(table).to_dataframe()\n\nstations_df['STN'] = stations_df['usaf'] + '-' + stations_df['wban']\ntwenty_twenty_df['STN'] = twenty_twenty_df['stn'] + '-' + twenty_twenty_df['wban']\n\ncols_1 = ['STN', 'mo', 'da', 'temp', 'min', 'max', 'stp', 'slp', 'dewp', 'wdsp', 'prcp', 'fog']\ncols_2 = ['STN', 'country', 'state', 'call', 'lat', 'lon', 'elev']\nweather_df = twenty_twenty_df[cols_1].join(stations_df[cols_2].set_index('STN'), on='STN')\n\nweather_df['temp'] = weather_df['temp'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['max'] = weather_df['max'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['min'] = weather_df['min'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['stp'] = weather_df['stp'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['slp'] = weather_df['slp'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['dewp'] = weather_df['dewp'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['wdsp'] = weather_df['wdsp'].apply(lambda x: np.nan if x==999.9 else x)\nweather_df['prcp'] = weather_df['prcp'].apply(lambda x: np.nan if x==99.9 else x)\n\ndisplay(weather_df.tail(10))\nweather_df.info(verbose=True)","2fa4795c":"# convert everything into celsius\ntemp = (weather_df['temp'] - 32) \/ 1.8\ndewp = (weather_df['dewp'] - 32) \/ 1.8\n    \n# compute relative humidity as ratio between actual vapour pressure (computed from dewpoint temperature)\n# and saturation vapour pressure (computed from temperature) (the constant 6.1121 cancels out)\nweather_df['rh'] = (np.exp((18.678*dewp)\/(257.14+dewp))\/np.exp((18.678*temp)\/(257.14+temp)))\n\n# calculate actual vapour pressure (in pascals)\n# then use it to compute absolute humidity from the gas law of vapour \n# (ah = mass \/ volume = pressure \/ (constant * temperature))\nweather_df['ah'] = ((np.exp((18.678*dewp)\/(257.14+dewp))) * 6.1121 * 100) \/ (461.5 * temp)","53b88cf5":"weather_df['day_from_jan_first'] = (weather_df['da'].apply(int)\n                                   + 31*(weather_df['mo']=='02') \n                                   + 60*(weather_df['mo']=='03')\n                                   + 91*(weather_df['mo']=='04')  \n                                   )\n\nmo = train['Date'].apply(lambda x: x[5:7])\nda = train['Date'].apply(lambda x: x[8:10])\ntrain['day_from_jan_first'] = (da.apply(int)\n                               + 31*(mo=='02') \n                               + 60*(mo=='03')\n                               + 91*(mo=='04')  \n                              )\n\nC = []\nfor j in train.index:\n    df = train.iloc[j:(j+1)]\n    mat = cdist(df[['Lat','Long', 'day_from_jan_first']],\n                weather_df[['lat','lon', 'day_from_jan_first']], \n                metric='euclidean')\n    new_df = pd.DataFrame(mat, index=df.Id, columns=weather_df.index)\n    arr = new_df.values\n    new_close = np.where(arr == np.nanmin(arr, axis=1)[:,None],new_df.columns,False)\n    L = [i[i.astype(bool)].tolist()[0] for i in new_close]\n    C.append(L[0])\n    \ntrain['closest_station'] = C\n\ntrain = train.set_index('closest_station').join(weather_df[['temp', 'min', 'max', 'stp', 'slp', 'dewp', 'rh', 'ah', 'wdsp', 'prcp', 'fog']], ).reset_index().drop(['index'], axis=1)\ntrain.sort_values(by=['Id'], inplace=True)\ntrain.index = train['Id'].apply(lambda x: x-1)\ntrain.head()","0c7c38a3":"train.to_csv('training_data_with_weather_info_week_1.csv', index=False)","4af0b207":"display(train_2.head())\n#display(test_2.head())\n\n# Create cross feature country + province\ntrain['country+province'] = train['Country\/Region'].fillna('') + '-' + train['Province\/State'].fillna('')\ntrain_2['country+province'] = train_2['Country_Region'].fillna('') + '-' + train_2['Province_State'].fillna('')\n\n# Conversion table to add coordinates for regions that weren't in week 1's dataset\ndf = train.groupby('country+province')[['Lat', 'Long']].mean()\ndf.loc['United Kingdom-'] = df.loc['United Kingdom-United Kingdom']\ndf.loc['Diamond Princess-'] = df.loc['Cruise Ship-Diamond Princess']\ndf.loc['Denmark-'] = df.loc['Denmark-Denmark']\ndf.loc['France-'] = df.loc['France-France']\ndf.loc['Gambia-'] = df.loc['Gambia, The-']\ndf.loc['Netherlands-'] = df.loc['Netherlands-Netherlands']\ndf.loc['Dominica-'] = (15.3, -61.383333)\ndf.loc['Angola-'] = (-8.830833, 13.245)\ndf.loc['Bahamas-'] = (25.066667, -77.333333)\ndf.loc['Belize-'] = (17.498611, -88.188611)\ndf.loc['Cabo Verde-'] = (14.916667, -23.516667)\ndf.loc['Chad-'] = (12.134722, 15.055833)\ndf.loc['Denmark-Greenland'] = (64.181389, -51.694167)\ndf.loc['El Salvador-'] = (13.698889, -89.191389)\ndf.loc['Eritrea-'] = (15.322778, 38.925)\ndf.loc['Fiji-'] = (-18.166667, 178.45)\ndf.loc['France-Martinique'] = (14.666667, -61)\ndf.loc['France-New Caledonia'] = (-22.2758, 166.458)\ndf.loc['Grenada-'] = (12.05, -61.75)\ndf.loc['Guinea-Bissau-'] = (11.85, -15.566667)\ndf.loc['Haiti-'] = (18.533333, -72.333333)\ndf.loc['Laos-'] = (17.966667, 102.6)\ndf.loc['Libya-'] = (32.887222, 13.191389)\ndf.loc['Madagascar-'] = (-18.933333, 47.516667)\ndf.loc['Mali-'] = (12.639167, -8.002778)\ndf.loc['Mozambique-'] = (-25.966667, 32.583333)\ndf.loc['Netherlands-Sint Maarten'] = (18.052778, -63.0425)\ndf.loc['Nicaragua-'] = (12.136389, -86.251389)\ndf.loc['Niger-'] = (13.511667, 2.125278)\ndf.loc['Papua New Guinea-'] = (-9.478889, 147.149444)\ndf.loc['Saint Kitts and Nevis-'] = (17.3, -62.733333)\ndf.loc['Syria-'] = (33.513056, 36.291944)\ndf.loc['Timor-Leste-'] = (-8.566667, 125.566667)\ndf.loc['Uganda-'] = (0.313611, 32.581111)\ndf.loc['Zimbabwe-'] = (-17.829167, 31.052222)\ndf.loc['United Kingdom-Bermuda'] = (32.293, -64.782)\ndf.loc['United Kingdom-Isle of Man'] = (54.145, -4.482)\n\ndf.loc['Botswana-'] = (-24.658056, 25.912222)\ndf.loc['Burma-'] = (16.85, 96.183333)\ndf.loc['Burundi-'] = (-3.383333, 29.366667)\ndf.loc['Canada-Northwest Territories'] = (62.442222, -114.394722)\ndf.loc['Canada-Yukon'] = (60.716667, -135.05)\ndf.loc['Kosovo-'] = (42.666667, 21.166667)\ndf.loc['MS Zaandam-'] = (26.086111, -80.115278)\ndf.loc['Sierra Leone-'] = (8.484444, -13.234444)\ndf.loc['United Kingdom-Anguilla'] = (18.220833, -63.051667)\ndf.loc['United Kingdom-British Virgin Islands'] = (18.431389, -64.623056)\ndf.loc['United Kingdom-Turks and Caicos Islands'] = (21.783333, -72.283333)\ndf.loc['West Bank and Gaza-'] = (31.703056, 35.195556)\n\ndf.loc['France-Saint Pierre and Miquelon'] = (46.7778, -56.1778)\ndf.loc['Malawi-'] = (-13.983333, 33.783333)\ndf.loc['Netherlands-Bonaire, Sint Eustatius and Saba'] = (12.144444, -68.265556)\ndf.loc['Sao Tome and Principe-'] = (0.336111, 6.730556)\ndf.loc['South Sudan-'] = (4.85, 31.6)\ndf.loc['United Kingdom-Falkland Islands (Malvinas)'] = (-51.694444, -57.852778)\ndf.loc['Western Sahara-'] = (27.153611, -13.203333)\n \n# add latitudes and longitudes to new dataframe\ntrain_2['Lat'] = train_2['country+province'].apply(lambda x: df.loc[x, 'Lat'])\ntrain_2['Long'] = train_2['country+province'].apply(lambda x: df.loc[x, 'Long'])\n\n# compute closest weather station, as done for week 1\nmo = train_2['Date'].apply(lambda x: x[5:7])\nda = train_2['Date'].apply(lambda x: x[8:10])\ntrain_2['day_from_jan_first'] = (da.apply(int)\n                               + 31*(mo=='02') \n                               + 60*(mo=='03')\n                               + 91*(mo=='04')  \n                              )\n\nC = []\nfor j in train_2.index:\n    df = train_2.iloc[j:(j+1)]\n    mat = cdist(df[['Lat','Long', 'day_from_jan_first']],\n                weather_df[['lat','lon', 'day_from_jan_first']], \n                metric='euclidean')\n    new_df = pd.DataFrame(mat, index=df.Id, columns=weather_df.index)\n    arr = new_df.values\n    new_close = np.where(arr == np.nanmin(arr, axis=1)[:,None],new_df.columns,False)\n    L = [i[i.astype(bool)].tolist()[0] for i in new_close]\n    C.append(L[0])\n    \ntrain_2['closest_station'] = C\n\n# add weather observations from closest station\ntrain_2= train_2.set_index('closest_station').join(weather_df[['temp', 'min', 'max', 'stp', 'slp', 'dewp', 'rh', 'ah', 'wdsp', 'prcp', 'fog']], ).reset_index().drop(['index'], axis=1)\ntrain_2.sort_values(by=['Id'], inplace=True)\ntrain_2.index = train_2['Id'].apply(lambda x: x-1)\ndisplay(train_2.head())\n\n# output\ntrain_2.to_csv('training_data_with_weather_info_week_4.csv', index=False)","110dc808":"Here is the weather data:\n* `temp`: Mean temperature for the day in degrees Fahrenheit to tenths.\n* `max`: Maximum temperature reported during the day in Fahrenheit to tenths--time of max temp report varies by country and region, so this will sometimes not be the max for the calendar day.\n* `min`: Minimum temperature reported during the day in Fahrenheit to tenths--time of min temp report varies by country and region, so this will sometimes not be the min for the calendar day.\n* `stp`: Mean station pressure for the day in millibars to tenths.\n* `slp`: Mean sea level pressure for the day in millibars to tenths.\n* `dewp`: Mean dew point for the day in degrees Fahrenheit to tenths. \n* `wdsp`: Mean wind speed for the day in knots to tenths.\n* `prcp`: Total precipitation (rain and\/or melted snow) reported during the day in inches and hundredths; will usually not end with the midnight observation--i.e., may include latter part of previous day. .00 indicates no measurable precipitation (includes a trace).\n* `fog`: Indicators (1 = yes, 0 = no\/not reported) for the occurrence during the day","a208faea":"Now let's compute absolute and relative humidity from temperature and dew point:","cba5329c":"# Week 1:","dcc6b01c":"# Week 2:\n\nSee commit no. 16.\n\n# Week 3:\n\nSee commit no. 21.\n\n# Week 4:","b1686dfc":"In this notebook I add weather informations, such as temperature and precipitations, to the training set of the [COVID-19 forecasting competition](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-1\/discussion), in order to determine whether there is any correlation with the growth of confirmed cases. Weather data is imported from the [NOAA GSOD dataset](https:\/\/www.kaggle.com\/noaa\/gsod), continuously updated to include recent measurments.\n\n[Data for this and previous weeks is available in dataset form here.](https:\/\/www.kaggle.com\/davidbnn92\/weather-data-for-covid19-data-analysis)\n\nEdit: now missing values are denoted with usual `NaN`s, and not with `9999`s.\n\nEdit 2: information concerning humidity was added, following [brennanmurphy](https:\/\/www.kaggle.com\/brennanmurphy)'s advice. More specifically, dewpoint temperature was added from the NOAA GSOD dataset, then absolute and relative humidity were computed."}}