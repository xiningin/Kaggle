{"cell_type":{"6889ac3a":"code","16ed6d72":"code","c9d5ced0":"code","3eabc3d8":"code","747e97d3":"code","69f0be7a":"code","146a5c4a":"code","a376337e":"code","09cad20b":"code","97d79b2c":"code","548f6694":"code","176c4a8b":"code","438f9d56":"code","aba873da":"code","7da3f7dc":"code","1a864c62":"code","6f36677b":"code","af9d1c92":"code","a4137cdd":"code","9c1a400f":"code","ee40cb37":"code","5748023a":"code","e5d1f70d":"markdown","2f5b7bc6":"markdown","5d96dc7c":"markdown","a536547d":"markdown","813cf677":"markdown","7ea4c6b0":"markdown","ed61bf0c":"markdown","3d984fa9":"markdown","335290a2":"markdown","a327854d":"markdown","9299d3c1":"markdown","a30d9254":"markdown","9c4ac7e1":"markdown","86461105":"markdown","32febf79":"markdown","fe351a68":"markdown","9bcaa6dc":"markdown","80b85508":"markdown","944c4440":"markdown","d7cb209a":"markdown","3a0d972a":"markdown","af127cd9":"markdown","c1ab1405":"markdown","2d9803a9":"markdown","642e60a7":"markdown","8c25a12c":"markdown"},"source":{"6889ac3a":"import numpy as np\nimport pandas as pd\nimport os\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom random import randrange\nimport cv2","16ed6d72":"classes = {'Black-grass': 0,\n         'Charlock': 1,\n         'Cleavers': 2,\n         'Common Chickweed': 3,\n         'Common wheat': 4,\n         'Fat Hen': 5,\n         'Loose Silky-bent': 6,\n         'Maize': 7,\n         'Scentless Mayweed': 8,\n         'Shepherds Purse': 9,\n         'Small-flowered Cranesbill': 10,\n         'Sugar beet': 11}\nimage_size = 256\ntarget_size = (256, 256)\nbatch_size = 32","c9d5ced0":"training_img_list = pd.DataFrame(columns=['filename','class'])\npathToTrainData='\/kaggle\/input\/plant-seedlings-classification\/train'\n\n\nfor dirname, _, filenames in os.walk(pathToTrainData):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\n        class_label = dirname.split('\/')[-1]\n        training_img_list = training_img_list.append({'filename':path , 'class':class_label}, ignore_index = True)","3eabc3d8":"\ntraining_img_list = sklearn.utils.shuffle(training_img_list)\ntraining_img_list.head(10)","747e97d3":"idg_sample = tf.keras.preprocessing.image.ImageDataGenerator(\n                    rescale=1.\/255,\n                    horizontal_flip=True,\n                    vertical_flip=True\n                    )\nsample_data = idg_sample.flow_from_directory('..\/input\/plant-seedlings-classification\/train\/',\n                                                    target_size=target_size,\n                                                    subset='training',\n                                                    class_mode='categorical',\n                                                    batch_size=32,\n                                                    shuffle=True,\n                                                    seed=1,\n                                                    classes = classes\n                                                )","69f0be7a":"from mpl_toolkits.axes_grid1 import ImageGrid\n\ndef show_unique_grid(image_gen, figsize=(10,10)):\n    dist_classes = [image_gen.classes.tolist().index(x) for x in set(image_gen.classes.tolist())]\n    title_list = [image_gen.classes.tolist()[i] for i in dist_classes]\n    im_set = [image_gen[i\/\/32][0][i%32] for i in dist_classes]\n    fig = plt.figure(None, (10,10),frameon=False)\n    grid = ImageGrid(fig, 111, \n                     nrows_ncols=(3, 4),  \n                     axes_pad=0.2, \n                     share_all=True,\n                     )\n    for i in range(12):\n        ax = grid[i]\n        ax.imshow(im_set[i],cmap='Greys_r')\n        ax.set_title(title_list[i])\n        ax.axis('off')\n","146a5c4a":"show_unique_grid(sample_data)\nsample_data.class_indices","a376337e":"unique, counts = np.unique(sample_data.classes, return_counts=True)\ndict1 = dict(zip(sample_data.class_indices, counts))\n\nkeys = dict1.keys()\nvalues = dict1.values()\n\nplt.xticks(rotation='vertical')\nbar = plt.bar(keys, values)","09cad20b":"def get_model():\n    model = tf.keras.models.Sequential() #1\n    model.add(tf.keras.layers.InputLayer(input_shape=(image_size,image_size,3,))) #2\n    model.add(tf.keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu')) #3\n    model.add(tf.keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu')) #4\n    model.add(tf.keras.layers.MaxPool2D(pool_size = (2,2))) #5\n    model.add(tf.keras.layers.BatchNormalization()) #6\n    model.add(tf.keras.layers.Conv2D(64, kernel_size=(3,3), strides = (1,1), activation='relu')) #7\n    model.add(tf.keras.layers.MaxPool2D(pool_size = (2,2))) #8\n    model.add(tf.keras.layers.BatchNormalization()) #9\n    model.add(tf.keras.layers.Conv2D(128, kernel_size=(3,3), strides = (1,1), activation='relu')) #10\n    model.add(tf.keras.layers.MaxPool2D(pool_size = (2,2))) #11\n    model.add(tf.keras.layers.BatchNormalization()) #12\n    model.add(tf.keras.layers.Conv2D(128, kernel_size=(3,3), strides = (1,1), activation='relu')) #13\n    model.add(tf.keras.layers.MaxPool2D(pool_size = (2,2))) #14\n    model.add(tf.keras.layers.GlobalMaxPool2D()) #15\n    model.add(tf.keras.layers.Flatten()) #16 \n    model.add(tf.keras.layers.Dense(128, activation='relu')) #17\n    model.add(tf.keras.layers.Dropout(0.2)) #18\n    model.add(tf.keras.layers.Dense(64, activation='relu')) #19\n    model.add(tf.keras.layers.BatchNormalization()) #20\n    model.add(tf.keras.layers.Dense(12, activation='softmax')) #21\n    \n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model","97d79b2c":"get_model().summary()","548f6694":"from keras.utils import plot_model\nplot_model(get_model(), show_shapes=True, show_layer_names=True)","176c4a8b":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score\n\n\nkfold = KFold(n_splits=5, shuffle=True)\nfold = 1\naccuracies = []\nrand_num = randrange(100000)\nfor train, test in kfold.split(training_img_list):\n    model = get_model()\n    idg = tf.keras.preprocessing.image.ImageDataGenerator(\n            rescale=1.\/255,\n            horizontal_flip=True,\n            vertical_flip=True,\n            validation_split=0.2\n           )\n    #Actual Training data for the model\n    train_gen = idg.flow_from_dataframe(training_img_list.iloc[train,:],\n                                        x_col=\"filename\",\n                                        y_col=\"class\",\n                                        subset='training',\n                                        target_size=target_size,\n                                        class_mode='categorical',\n                                        batch_size=32,\n                                        seed=1,\n                                        shuffle=True,\n                                        classes=classes\n                                        )\n    #Validation set for training the model, so the checkpoint can track the best model with max val accuracy\n    val_gen   = idg.flow_from_dataframe(training_img_list.iloc[train,:],\n                                        x_col=\"filename\",\n                                        y_col=\"class\",\n                                        subset='validation',\n                                        target_size=target_size,\n                                        class_mode='categorical',\n                                        batch_size=32,\n                                        seed=1,\n                                        classes=classes\n                                        )\n    \n\n    model_name = 'plant_classifier_'+str(rand_num)+'_fold_no_'+str(fold)+'.h5'\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(model_name,\n                                                    save_best_only=True, \n                                                    monitor='val_accuracy', \n                                                    mode='max', \n                                                    verbose = 1\n                                                    )\n    es = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, mode='min', min_delta=0.0001)\n    history = model.fit(train_gen,\n                        epochs=20,\n                        validation_data=val_gen,\n                        callbacks = [checkpoint, es],\n                        verbose = 1\n                        )\n    # Testing for the fold\n    idg2 = tf.keras.preprocessing.image.ImageDataGenerator(\n                        rescale=1.\/255,\n                        horizontal_flip=True,\n                        vertical_flip=True\n                       )\n    test_gen = idg2.flow_from_dataframe(training_img_list.iloc[test,:],\n                                        x_col=\"filename\",\n                                        y_col=\"class\",\n                                        target_size=target_size,\n                                        class_mode='categorical',\n                                        batch_size=32,\n                                        seed=1,\n                                        classes=classes,\n                                        shuffle=False\n                                        )\n    model.load_weights('.\/'+model_name)\n    predictions = model.predict(test_gen, steps=test_gen.samples)\n    y_pred = []\n    for i in range(0, predictions.shape[0]):\n      y_class = predictions[i, :].argmax(axis=-1)\n      y_pred.append(y_class)\n    accuracies.append(accuracy_score(test_gen.classes, y_pred))\n    print('Accuracy for the fold ',fold, ': ', accuracies[fold-1])\n    fold += 1","438f9d56":"print('5 fold accuracies= ', accuracies)\nprint('5 fold accuracy = ', np.mean(accuracies))","aba873da":"idg3 = tf.keras.preprocessing.image.ImageDataGenerator(\n            rescale=1.\/255,\n            horizontal_flip=True,\n            vertical_flip=True,\n            validation_split=0.2\n           )\ntrain_gen = idg3.flow_from_directory('..\/input\/plant-seedlings-classification\/train\/',\n                                                    target_size=target_size,\n                                                    subset='training',\n                                                    class_mode='categorical',\n                                                    batch_size=batch_size,\n                                                    shuffle=True,\n                                                    seed=1,\n                                                    classes=classes\n                                                )\nval_gen = idg3.flow_from_directory('..\/input\/plant-seedlings-classification\/train\/',\n                                                   target_size=(image_size, image_size),                                                   \n                                                   subset='validation',\n                                                   class_mode='categorical',\n                                                   batch_size=batch_size,\n                                                   shuffle=True,\n                                                   seed=1,\n                                                   classes=classes\n                                                )","7da3f7dc":"model = get_model()\n\nmodel_name = 'plant_classifier_fully_trained_'+str(randrange(100000))+'.h5'\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(model_name, #where to save the model\n                                                    save_best_only=True, \n                                                    monitor='val_accuracy', \n                                                    mode='max', \n                                                    verbose = 1)\nes = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=30, mode='min', min_delta=0.0001)\nhistory = model.fit(train_gen,\n          epochs=30, # Increase number of epochs if you have sufficient hardware\n          validation_data=val_gen,\n          callbacks = [checkpoint, es],\n          verbose = 1\n)","1a864c62":"from keras.models import Model\nlayer_before_flattening = 10 #Edit this with the layer you need the visualization for\n\nviz_model = Model(inputs=model.inputs, outputs=model.layers[layer_before_flattening].output)\nviz_model.summary()","6f36677b":"image_no = 14","af9d1c92":"plt.imshow(train_gen[0][0][image_no])","a4137cdd":"nn = viz_model.predict(train_gen[0][0])","9c1a400f":"grid = (8, 16) \nix = 1\nfig = plt.figure(figsize=(32,16))\nfor _ in range(grid[0]):\n    for _ in range(grid[1]):\n        # specify subplot and turn of axis\n        ax = fig.add_subplot(grid[0], grid[1], ix)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        # plot filter channel in grayscale\n        plt.imshow(nn[image_no, :, :, ix-1])\n        ix += 1\n\nplt.show()","ee40cb37":"idg4 = tf.keras.preprocessing.image.ImageDataGenerator(\n            rescale=1.\/255,\n            horizontal_flip=True,\n            vertical_flip=True\n           )\ntest_generator = idg4.flow_from_directory(\n        directory='\/kaggle\/input\/plant-seedlings-classification\/',\n        classes=['test'],\n        target_size=target_size,\n        batch_size=batch_size,\n        shuffle=False,\n        class_mode='categorical',\n        seed=1)","5748023a":"final_model = get_model()\nfinal_model.load_weights('.\/'+model_name)\npredictions = final_model.predict(test_generator, steps=test_generator.samples)\n\nclass_list = []\n\nfor i in range(0, predictions.shape[0]):\n  y_class = predictions[i, :].argmax(axis=-1)\n  class_list += [list(classes.keys())[y_class]]\n\nsubmission = pd.DataFrame()\nsubmission['file'] = test_generator.filenames\nsubmission['file'] = submission['file'].str.replace(r'test\/', '')\nsubmission['species'] = class_list\n\nsubmission.to_csv('submission.csv', index=False)","e5d1f70d":"# 1 Importing the Libraries and Configurations","2f5b7bc6":"# 2 Creating a dataframe of filenames and classes with Training Data","5d96dc7c":"# 5 Training the Model with full dataset","a536547d":"## 6.3 Visualizing the features from the output layer for above image","813cf677":"## 4.5 Final 5-Cross Validation Score for the Model","7ea4c6b0":"## 7.1 Creating Data Generator for Test Data","ed61bf0c":"## 2.1 Scanning the file paths","3d984fa9":"# 7 Create Submission","335290a2":"## 7.2 Loading the model and Creating Submission","a327854d":"## 6.1 Getting the Model\nEdit *layer_before_flattening* to have any layer before flattening to visualize the output from that layer","9299d3c1":"## 3.3 Sample of Each Class in the Training Data","a30d9254":"# CNN with Keras\n\n**This notebook includes Visualizing of layers before flattening and 5 fold cross validation for the model evaluation**\n\nModel can be modified by changing the get_model() function and the change will be effective for all cells throughout the notebook","9c4ac7e1":"## 4.3 Visualizing Model","86461105":"## 4.1 Defining Model","32febf79":"model_name has the previously created model for training. But can replace with any model","fe351a68":"# 6 Visualizing the Output of the model before flattening\n","9bcaa6dc":"## 4.2 Model Summary","80b85508":"## 4.4 Evaluating the Model doing a 5 fold cross validation","944c4440":"## 3.2 Defining a function to display unique set of images out of a image generator","d7cb209a":"# 3 Visualizing Training Data Sample","3a0d972a":"Layer Structure for the Model is influenced by https:\/\/www.kaggle.com\/ilyapozdnyakov\/computer-vision-plants-cnn-visualisation ","af127cd9":"## 3.1 Loading All training data to a image generator","c1ab1405":"# 4 Generating the CNN Model","2d9803a9":"## 6.2 Visualizing a Random Image on its original state.\nChange the *image_no* to change the image(valid values: 0-31)","642e60a7":"## 2.2 Shuffling the training image path list","8c25a12c":"## 3.4 Class Distribution"}}