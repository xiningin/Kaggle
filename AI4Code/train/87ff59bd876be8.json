{"cell_type":{"3110924a":"code","f77f9de9":"code","94d873eb":"code","741442c4":"code","e56dd375":"code","6ea6e2bb":"code","54a93df6":"code","c19117e6":"code","e11e71bd":"code","15082871":"code","83f5d73d":"code","cdd7c89b":"code","f9b34cf7":"code","aeb0704a":"code","1a6a1dbe":"code","1c8191a7":"code","6122b374":"code","9a38f473":"code","18a5f5b0":"code","ea8334ef":"code","a6775139":"code","7f3a0a69":"code","d00f1e48":"code","fe35ba03":"code","e0006321":"code","dd992141":"code","118567af":"code","6a76a4b7":"code","d77b5500":"code","5617ab7a":"code","98a1fefb":"code","3fc079ea":"code","76ff3908":"code","53100e5e":"code","ade0d602":"code","311de284":"code","b31d1bba":"code","e5e7430f":"code","3f1d4c01":"code","298f3ffc":"code","6a6a97d9":"code","48988b9c":"code","930c872a":"code","ec7e0b32":"code","6eb6d0a0":"code","050e887c":"code","295418b8":"code","3034c1f9":"code","cd36ca51":"code","bfef279c":"code","5d10ba30":"markdown","e3095dc3":"markdown","5eac67ef":"markdown","3c6a6ed9":"markdown","f0c878d3":"markdown","ddc36bae":"markdown","cf858321":"markdown","26db2e3d":"markdown","337d2b74":"markdown","2fd2f8c0":"markdown","d08b18de":"markdown","313a6d50":"markdown"},"source":{"3110924a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\n### for multiple outputs in cell\nfrom IPython.core.interactiveshell import InteractiveShell  ## getting\nInteractiveShell.ast_node_interactivity = \"all\"\n\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\n\n\nfrom sklearn.pipeline import Pipeline\n\n\n\nfrom xgboost import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n\n\n","f77f9de9":"data = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","94d873eb":"data.head()","741442c4":"data.columns\ndata.shape\n","e56dd375":"data.groupby(\"quality\")[\"quality\"].count()   ## here is the distribution of the \n","6ea6e2bb":"data[data[\"quality\"]==4].shape","54a93df6":"data.info()","c19117e6":"data.isnull().sum()","e11e71bd":"data.describe()","15082871":"plot = plt.figure(figsize=(5,5))\nsns.barplot(data=data,x=\"quality\",y=\"volatile acidity\",palette=\"rocket\")","83f5d73d":"plot = plt.figure(figsize=(5,5))\nsns.barplot(data=data,x=\"quality\",y=\"fixed acidity\",palette=\"rocket\")","cdd7c89b":"plot = plt.figure(figsize=(5,5))\nsns.barplot(data=data,x=\"quality\",y=\"fixed acidity\",palette=\"rocket\")","f9b34cf7":"plot = plt.figure(figsize=(5,5))\nsns.barplot(data=data,x=\"quality\",y=\"citric acid\",palette=\"rocket\")\n\nplot = plt.figure(figsize=(5,5))\nsns.barplot(data=data,x=\"quality\",y=\"residual sugar\",palette=\"rocket\")\n\nplot = plt.figure(figsize=(5,5))\nsns.barplot(data=data,x=\"quality\",y=\"chlorides\",palette=\"rocket\")","aeb0704a":"plot = plt.figure(figsize=(5,5))\nsns.barplot(data=data,x=\"quality\",y=\"pH\",palette=\"vlag\")\n\nplot = plt.figure(figsize=(5,5))\nsns.barplot(data=data,x=\"quality\",y=\"density\",palette=\"rocket\")\n","1a6a1dbe":"\n# Plot\nplt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(data.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap='RdYlGn', center=0, annot=True)\n\n# Decorations\nplt.title('Correlogram of mtcars', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)","1c8191a7":"plot = plt.figure(figsize=(5,5))\n\nsns.jointplot(data=data,x=\"quality\",y=\"alcohol\", kind=\"reg\", truncate=False,\n                  \n                  color=\"r\", height=7)","6122b374":"## now it's   time to preprocess our data\n\ndata.groupby(\"quality\")[\"quality\"].count()","9a38f473":"## we can now divide them into 3 segments : bad, average, good\n\nbins =(2,4,6,8)\nnames =[\"bad\",\"average\",\"good\"]\n\ndata[\"quality\"] = pd.cut(data[\"quality\"],bins=bins,labels=names)","18a5f5b0":"data.groupby(\"quality\")[\"quality\"].count()","ea8334ef":"data.head()","a6775139":"### now we can see  there is average, bad ,and good labels in quality columns\n\nsns.countplot(data[\"quality\"])","7f3a0a69":"le = LabelEncoder()\n\ndata[\"quality\"] = le.fit_transform(data[\"quality\"])\n","d00f1e48":"data.head()","fe35ba03":"data.groupby(\"quality\")[\"quality\"].count()","e0006321":"### now we can see  the average, bad ,and good labels in quality columns are encoded into numeric \n\nsns.countplot(data[\"quality\"])","dd992141":"X=data.drop(\"quality\",axis=1)\ny = data[\"quality\"]","118567af":"X.head()","6a76a4b7":"y.value_counts()","d77b5500":"X_train, X_valid, y_train, y_valid = train_test_split(X, y,\n                                                                train_size=0.8,\n                                                                test_size=0.2,\n                                                                random_state=0)\n","5617ab7a":"scaler = StandardScaler()\n\nmodel_rf=RandomForestClassifier(n_estimators=100,random_state=0)\nmodel_xgb = XGBClassifier(n_estimators=200,random_state=0)\n\n\n\nrf_pipeline =Pipeline(steps=[\n    (\"sc\",scaler),\n    (\"rf\",model_rf)\n])\n\nxgb_pipeline = Pipeline(steps=[\n    (\"sc\",scaler),\n    (\"xgb\",model_xgb)\n])\n\n\nparameters_xgb = {'xgb__n_estimators':[i for i in range(100,1000,100)]}\n\nparameters_rf = {'rf__n_estimators':[i for i in range(100,1000,100)]}","98a1fefb":"cv = GridSearchCV(xgb_pipeline,parameters_xgb,cv=5)\n","3fc079ea":"cv.fit(X_train,y_train)","76ff3908":"preds = cv.predict(X_valid)","53100e5e":"print(classification_report(y_valid,preds))","ade0d602":"print(confusion_matrix(y_valid,preds))","311de284":"rf_cv = GridSearchCV(rf_pipeline,parameters_rf,cv=5)\n","b31d1bba":"rf_cv.fit(X_train,y_train)","e5e7430f":"rf_preds = rf_cv.predict(X_valid)\n\nprint(confusion_matrix(y_valid,rf_preds))","3f1d4c01":"print(classification_report(y_valid,rf_preds))","298f3ffc":"rf_cv.score(X_valid,y_valid)","6a6a97d9":"cv.score(X_valid,y_valid)","48988b9c":"\ndt_classifier = DecisionTreeClassifier(criterion = 'gini', max_features=6, max_leaf_nodes=400, random_state = 0)\n","930c872a":"dt_pipeline = Pipeline(steps=[\n    (\"sc\",scaler),\n    (\"dt\",dt_classifier)\n])\n\n\nparams_dt = {\"dt__criterion\":[\"gini\",\"entropy\"],\n          \"dt__max_features\":[3,4,5,6,7,8,9,10],\n          \"dt__max_leaf_nodes\":[200,300,400,500]\n         }","ec7e0b32":"dt_cv = GridSearchCV(dt_pipeline,params_dt,cv=5)\n","6eb6d0a0":"dt_cv.fit(X_train,y_train)","050e887c":"dt_cv.best_params_","295418b8":"dt_cv.score(X_valid,y_valid)","3034c1f9":"dt_preds=dt_cv.predict(X_valid)","cd36ca51":"print(classification_report(y_valid,dt_preds))","bfef279c":"print(confusion_matrix(y_valid,dt_preds))","5d10ba30":"\n<b><font color=\"red\">Please <b><font color=\"green\">UPVOTE <\/font><\/b> this notebook if you like it, this keeps me motivated for creating more such notebooks ,thank you\n","e3095dc3":"Input Variables:\n- **fixed acidity: ** most acids involved with wine or fixed or nonvolatile\n- **volatile acidity: ** the amount of acetic acid in wine\n- **citric acid: ** found in small quantities, citric acid can add 'freshness' and flavor to wines \n- **residual sugar: ** the amount of sugar remaining after fermentation stops\n- **chlorides: ** the amount of salt in the wine\n- **free sulfur dioxide: ** the free form of SO2 exists in equilibrium between molecular SO2 (as a dissolved gas) and bisulfite ion\n- **total sulfur dioxide: ** amount of free and bound forms of S02\n- **density: ** the density of water is close to that of water depending on the percent alcohol and sugar content\n- **pH: ** describes how acidic or basic a wine is on a scale from 0 (very acidic) to 14 (very basic)\n- **sulphates: ** a wine additive which can contribute to sulfur dioxide gas (S02) levels \n- **alcohol: ** the percent alcohol content of the wine<br>\n\nOutput Variable:\n- **quality: ** output variable (based on sensory data, score between 0 and 10)","5eac67ef":"### Reading the Data","3c6a6ed9":"## <span id=\"1\"><\/span> ** 1. Overview **","f0c878d3":"## <span id=\"4\"><\/span> ** 4. Preprocessing**","ddc36bae":"## <span id=\"6\"><\/span> ** 6. Conclusion**","cf858321":"\n\n# Lets Get Started\n","26db2e3d":"## <span id=\"5\"><\/span> ** 5. Creating Pipelines And Training Models**","337d2b74":"## <span id=\"3\"><\/span> ** 3. Data Visualization**","2fd2f8c0":"Thus in this kernel we built several pipelines using sklearn and used models like XGBoostClassifier,RandomForest,and DecisionTreeClassifier for classifying the wine quality in our pre-defined segments (good,average,bad)\nThere's still lot more we can do with our models and data like feature engineering and fine tuning the models adding some more parameters.\nI will keep updating this kernel frequently as possible\n","d08b18de":"\n<hr\/>\n[**Dhruv Patel**](https:\/\/www.kaggle.com\/dhruvpatel1057)[](http:\/\/)\n<hr\/>\n\n### Red Wine Quality Dataset - EDA and Classification\n\n![image.png](attachment:image.png)\n\n<br>\n<br>\n\n\n#### Table of Contents\n\n<font color=green>\n1. [Overview](#1)\n1. [Importing Libraries](#2)\n1. [Data Visualization](#3)\n1. [Data Preprocessing](#4)\n1. [Creating Pipelines And Training Models](#5)\n1. [Conclusion](#6)\n<hr\/>","313a6d50":"## <span id=\"2\"><\/span> ** 2. Importing Libraries**"}}