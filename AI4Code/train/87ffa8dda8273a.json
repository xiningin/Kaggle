{"cell_type":{"217f6e47":"code","9e60f39b":"code","00eee2a4":"code","7836ff1e":"code","c3a41d17":"code","f201f084":"code","778431b4":"code","556a0161":"code","345d64c3":"code","89ff851a":"markdown","51a07b61":"markdown","64a0d089":"markdown","daafb317":"markdown","e37c7725":"markdown"},"source":{"217f6e47":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# data visualization\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n# Model Selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# Model Libraries\nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout,Flatten, Conv2D, MaxPooling2D\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9e60f39b":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest =  pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","00eee2a4":"img_size = 28\n\ntrain_piksel = np.array(train.drop(\"label\",axis=1))\ntest_piksel = np.array(test)\ntest_piksel = test_piksel.reshape(test.shape[0],img_size,img_size,1)\n\nplt.subplot(1,2,1)\nplt.imshow(train_piksel[1].reshape(img_size, img_size))\nplt.axis('off')\nplt.subplot(1, 2, 2)\nplt.imshow(train_piksel[15].reshape(img_size, img_size))\nplt.axis('off')\nplt.show()","7836ff1e":"num_classes = 10\n\nX_train, X_test, Y_train, Y_test = train_test_split(train_piksel,train.loc[:,\"label\"],test_size=0.3)\n\nX_train = X_train.reshape(X_train.shape[0],img_size,img_size,1)\nX_test = X_test.reshape(X_test.shape[0],img_size,img_size,1)\n\nY_train = keras.utils.to_categorical(Y_train, num_classes)\nY_test = keras.utils.to_categorical(Y_test, num_classes)\n\nprint(\"X_train.shape :\",X_train.shape)\nprint(\"X_test.shape :\",X_test.shape)\nprint(\"Y_train.shape :\",Y_train.shape)\nprint(\"Y_test.shape :\",Y_test.shape)","c3a41d17":"model = Sequential()\nmodel.add(Conv2D(6, kernel_size=(5,5),activation=\"relu\",input_shape=(28,28,1)))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Conv2D(16, kernel_size=(5,5),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(256,activation = \"relu\"))\nmodel.add(Dense(128,activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()","f201f084":"epochs = 20\nbatch_size = 86\n\nmodel.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(X_train,Y_train,epochs=epochs,batch_size=batch_size)","778431b4":"loss, acc = model.evaluate(X_test,Y_test)\nprint(\"loss :\",loss)\nprint(\"accuracy :\",acc)","556a0161":"Y_pred = model.predict(X_test)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(Y_test,axis = 1) \nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n\n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","345d64c3":"#set ids as ImageId and predict label \nsId = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\nids = sId.drop(\"Label\",axis=1)\npredict = model.predict(test_piksel)\npredict = np.argmax(predict,axis = 1) \n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'ImageId' : ids.ImageId, 'Label': predict})\noutput.to_csv('submission.csv', index=False)","89ff851a":"For this dataset, I used to LeNet5 model that is fisrt and famous CNN model. In this model was used to avareage pooling. But I wanted to use max pooling.\n\n* The model => conv(6 filter) - maxpooling - conv(16 filter) - Full Connected - Full Connected - Dropout - Output Layer\n* I used to ReLU as activation function. But this model was used to sigmoid and tan(h) as activation function.\n* As last layer is output layer and the dataset contains multi classes, I used to softmax as activation function.","51a07b61":"# Conclusion\n\n* Convolusion Neural Network is deep learning algorithm that is usually used to image recognizer project. \n* As technogy improved, new CNN models came up. But First and famous CNN model is LeNet5 model.\n* It can be make image agumentation to increase accuracy. ","64a0d089":"In this train dataframe has 42000 images (28x28 piksel) and 10 classes. I splitted as 70% train and 30% test dataset. ","daafb317":"The results are more successful than that I waited. Image Agumentation can be made to increase accuracy. :) I compared the results with confusion matrix.","e37c7725":"# Convolutional Neural Network %98 Accuracy\n\nHi everybody! I'm new into deep learning. I wrote this kernel to convert a application my learning. If this kernel is benefit for you or if there are your idea about this kernel. Please write comments. I'm wating your ideas about your kernel. \n\nEnjoy with Deep Learning !"}}