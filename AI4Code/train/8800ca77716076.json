{"cell_type":{"a0a17630":"code","090809d0":"code","ab15ac59":"code","49ebfdeb":"code","ae66e1c5":"code","e75d90ee":"code","4204bf13":"code","4780b235":"code","9d4499bd":"code","63400ff3":"code","4b00e55e":"code","8571d3b2":"code","e8e818d4":"code","952c0a77":"code","1b64e7e4":"code","ee076f9c":"code","e5b577e5":"code","ff778717":"code","36956e4a":"code","aa844dbd":"code","829a7c40":"code","f83cf479":"code","85d1f1ac":"code","c5a39cdd":"code","91b4613c":"code","57d2466d":"code","a72946fb":"code","52d6a6d5":"code","6f594eef":"markdown","d44dd4d4":"markdown","322ad317":"markdown","ed7782f1":"markdown","5968254b":"markdown","e8e87c2c":"markdown","70486a9e":"markdown","391466eb":"markdown","b2716333":"markdown","56375c66":"markdown","7c7cbdde":"markdown","1b3b7358":"markdown","568d852f":"markdown"},"source":{"a0a17630":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os","090809d0":"df = pd.read_csv('..\/input\/books.csv',error_bad_lines=False)\ndf.head()","ab15ac59":"df = df.drop(['isbn','isbn13'],axis=1)","49ebfdeb":"df.head()","ae66e1c5":"df = df.rename(columns={'# num_pages':'num_pages'})","e75d90ee":"df.info()","4204bf13":"df.describe()","4780b235":"df[df['num_pages']==0]['bookID']","9d4499bd":"sum_pages = sum(df['num_pages'])\nnum_pages = len(df['num_pages'])\navg_pages = sum_pages \/ num_pages\nfor i in range(num_pages):\n    if (df['num_pages'][i] == 0):\n        df['num_pages'][i] = avg_pages  ","63400ff3":"df.describe()","4b00e55e":"for i,name in enumerate(df['authors']):\n    if name.split('-') != [name]:\n        df['authors'][i] = name.split('-')[0]","8571d3b2":"df.head()","e8e818d4":"a = 'J.K. Rowling-Mary GrandPr\u00e9'\nif a.split('-') != [a]:\n    print(a.split('-')[0])","952c0a77":"num_author = len(pd.unique(df['authors']))\nnum_language = len(pd.unique(df['language_code']))\nprint('number of authors:{},  number of language:{}'.format(num_author,num_language))","1b64e7e4":"df[df['average_rating']==5] = 0","ee076f9c":"print(df['average_rating'].sort_values(ascending=False).head(5))\ndf.sort_values(by='average_rating',ascending=False).head(5).plot.bar(x='authors',y='average_rating')\nplt.title('top 5 authors with average rating')\n\ndf.sort_values(by='average_rating',ascending=False).head(5).plot.bar(x='title',y='average_rating')\nplt.title('top 5 title with average rating')","e5b577e5":"df.sort_values(by='ratings_count',ascending=False).head(5).plot.bar(x='authors',y='ratings_count')\nplt.title('top 5 authors with ratings count')\n\ndf.sort_values(by='ratings_count',ascending=False).head(5).plot.bar(x='title',y='ratings_count')\nplt.title('top 5 title with ratings count')","ff778717":"df.sort_values(by='text_reviews_count',ascending=False).head(5).plot.bar(x='authors',y='text_reviews_count')\nplt.title('top 5 authors with text reviews count')\n\ndf.sort_values(by='text_reviews_count',ascending=False).head(5).plot.bar(x='title',y='text_reviews_count')\nplt.title('top 5 title with text reviews count')","36956e4a":"five_text_reviews = (df['text_reviews_count'].sort_values(ascending=False).head(5)).index\nfor i in five_text_reviews:\n    print('{}:{}'.format(df['title'][i],df['average_rating'][i]))","aa844dbd":"plt.scatter(df['ratings_count'],df['average_rating'])\nplt.xlabel('ratings count')\nplt.ylabel('average rating')\nplt.show()","829a7c40":"plt.scatter(df['text_reviews_count'],df['average_rating'])\nplt.xlabel('text reviews count')\nplt.ylabel('average rating')\nplt.show()","f83cf479":"plt.scatter(df['text_reviews_count'],df['ratings_count'])\nplt.xlabel('text reviews count')\nplt.ylabel('ratings_count')\nplt.show()","85d1f1ac":"plt.figure(figsize=(20,10))\nsns.countplot('language_code',data=df,palette='bright')","c5a39cdd":"avg_eng = np.average(df[df['language_code']=='eng']['num_pages'])\navg_en_us = np.average(df[df['language_code']=='en-US']['num_pages'])\navg_spa = np.average(df[df['language_code']=='spa']['num_pages'])\n\nx = ['avg_eng','avg_en_us','avg_spa']\ny = [avg_eng,avg_en_us,avg_spa]\nplt.bar(x,y)\nplt.xlabel('Language')\nplt.ylabel('average of pages')\nplt.show()","91b4613c":"author_avg_pages_count = []\nratings_count_authors = []\nratings_count_index = df['ratings_count'].sort_values(ascending=False).head(5).index\nfor index in ratings_count_index:    \n    author_avg_pages = np.average(df[df['authors']==df['authors'][index]]['num_pages'])\n    author_avg_pages_count.append(author_avg_pages)\n    ratings_count_authors.append(df['authors'][index])\n\nprint(ratings_count_authors)\nprint(author_avg_pages_count)\nplt.figure(figsize=(10,5))\nplt.bar(ratings_count_authors,author_avg_pages_count)\nplt.xlabel('TOP 5 ratings count authors')\nplt.ylabel('average of pages')\nplt.show()","57d2466d":"author_avg_pages_count = []\nratings_count_authors = []\nratings_count_index = df['text_reviews_count'].sort_values(ascending=False).head(5).index\nfor index in ratings_count_index:    \n    author_avg_pages = np.average(df[df['authors']==df['authors'][index]]['num_pages'])\n    author_avg_pages_count.append(author_avg_pages)\n    ratings_count_authors.append(df['authors'][index])\n\nprint(ratings_count_authors)\nprint(author_avg_pages_count)\nplt.figure(figsize=(10,5))\nplt.bar(ratings_count_authors,author_avg_pages_count)\nplt.xlabel('TOP 5 text reviews count authors')\nplt.ylabel('average of pages')\nplt.show()","a72946fb":"avg_eng = np.average(df[df['language_code']=='eng']['ratings_count'])\navg_en_us = np.average(df[df['language_code']=='en-US']['ratings_count'])\navg_spa = np.average(df[df['language_code']=='spa']['ratings_count'])\n\nx = ['avg_eng','avg_en_us','avg_spa']\ny = [avg_eng,avg_en_us,avg_spa]\nplt.bar(x,y)\nplt.xlabel('Language')\nplt.ylabel('average of ratings count')\nplt.show()","52d6a6d5":"avg_eng = np.average(df[df['language_code']=='eng']['text_reviews_count'])\navg_en_us = np.average(df[df['language_code']=='en-US']['text_reviews_count'])\navg_spa = np.average(df[df['language_code']=='spa']['text_reviews_count'])\n\nx = ['avg_eng','avg_en_us','avg_spa']\ny = [avg_eng,avg_en_us,avg_spa]\nplt.bar(x,y)\nplt.xlabel('Language')\nplt.ylabel('average of text reviews count')\nplt.show()","6f594eef":"We can see why the average rate is not necessary by visualization","d44dd4d4":"As we guess that Harry Potter #1 got highest average rating.  \nAnd then,We know Twilight have amount of text reviews count.However,It doesnt mean that everyone like it","322ad317":"## Finding the great book and author\n* The average rating of the book received in total.  \n* Total number of ratings the book received.   \n* Total number of written text reviews the book received.","ed7782f1":"### Quick conclusion:  \nI don't regard average_rating as a great evaluation,because these Top five average_rating do not famous enough to get amount of text_reviews_count and ratings_count.  \n  \nThen,J.K. Rowling's Harry Potter live up to people's expectation getting the most ratings count.It's interesting that Harry Potter is not the most text reviews count so I guess Harry Potter is the highest average rating in the top 5 title with text reviews count.  \nThat see about it.","5968254b":"## Data clean\n In this case,we don't consider isnb","e8e87c2c":"We can see average pages top 5 authors write","70486a9e":"### And we can find some zero pages book or some pages is less than ten pages","391466eb":"We should make the name have same way for displaying  \nex:J.K. Rowling-Mary GrandPr\u00e9 and J.K. Rowling  \nso I hold the name before dash(-)","b2716333":"## Reading dataset","56375c66":" We can check how many authors and language in this dataset  \n and then finding prevalent language","7c7cbdde":"df.info ():  \n* It was used to find the number of samples and the number of features.  \n* data type  \n* making sure if null data exist  ","1b3b7358":"### I'll replace this error data to average pages","568d852f":"# Analyze by visualizing data"}}