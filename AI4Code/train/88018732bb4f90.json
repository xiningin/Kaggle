{"cell_type":{"d9f783fe":"code","479299aa":"code","e758ed08":"code","896c19da":"code","59cccb64":"code","77ccd562":"code","defe13b6":"code","188fc86a":"code","8d0073ee":"code","c3718281":"code","bc78b786":"code","336e9f12":"code","49e581b3":"code","9728fd62":"code","71559c54":"code","f16b3077":"code","d2221f8a":"code","9271c223":"code","66a11dc8":"code","07753000":"code","5f737752":"code","96a15052":"code","d2b88df8":"code","31fbbbb1":"code","5fcddd10":"code","9c7b3f92":"code","6c5e6030":"code","bf412172":"code","1e8967cf":"code","6dd92302":"code","7459d666":"code","4db4b599":"code","dc7fc066":"code","633ca602":"code","58f7982d":"code","01d3b9b2":"code","eec5a05e":"code","79155b29":"code","ec9e7046":"code","abd70c8d":"code","a389b3dc":"code","ad99c342":"code","762ed1e5":"code","b82c5e0b":"code","3d6f9142":"code","71b787f7":"code","711b5e63":"code","1d7131fc":"code","16a0b0f5":"code","fbfa8393":"code","4ee428dc":"code","e28f8abc":"code","04df61bb":"code","e6da18bc":"code","51b5d247":"code","860b876a":"code","6929f915":"code","8164c079":"code","648b0972":"code","2f3bc58c":"markdown","7e2cb5ec":"markdown","1dca59bd":"markdown","b8a91916":"markdown","b973960b":"markdown","91fccd1f":"markdown","dbe198f6":"markdown","05dfc371":"markdown","42abaa51":"markdown","5bd8305e":"markdown","5659befa":"markdown","6a4e37c3":"markdown","8c5ecaac":"markdown","3346ce41":"markdown","d25c8bc0":"markdown","61be5a2a":"markdown","10dd1329":"markdown","f0a7fad9":"markdown","044e95d2":"markdown","360ac107":"markdown","83eb7def":"markdown","2c1fe111":"markdown","24cd4382":"markdown","5b866d1f":"markdown","8979daab":"markdown","296e2959":"markdown","3b18ff54":"markdown","187f654b":"markdown","eefba593":"markdown","58f20420":"markdown","f250fd2d":"markdown","e25c9660":"markdown"},"source":{"d9f783fe":"import os\nimport folium\nimport geopandas\nimport numpy as np\nimport pandas as pd\nimport missingno as msn\nfrom scipy import stats\n\npd.options.mode.chained_assignment = None","479299aa":"import seaborn as sns\nfrom matplotlib import style\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom matplotlib.gridspec import GridSpec\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode\n\ninit_notebook_mode(connected=True)\nsns.set()\nstyle.use('fivethirtyeight')","e758ed08":"from sklearn import preprocessing\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier","896c19da":"from tensorflow import keras\nfrom tensorflow.keras.utils import plot_model\nfrom sklearn.preprocessing import StandardScaler","59cccb64":"data = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')","77ccd562":"data.head()","defe13b6":"fig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(go.Indicator(\n                mode = \"number\",\n                value = data.shape[0],\n                number={'font':{'color': '#7b68ee', 'size':100}},\n                delta = {\"reference\": 600, \"valueformat\": \".0f\"},\n                title = {\"text\": \"Rows \ud83d\uddd2 <br><span style=\"\n                                 \"'font-size:0.7em;color:gray'>in the data<\/span>\"},\n                domain = {'y': [0.7, 1], 'x': [0, 0.5]}))\n\nfig.add_trace(go.Indicator(\n                mode = \"number\",\n                value = data.shape[1],\n                number={'font':{'color': '#7b68ee', 'size':100}},\n                delta = {\"reference\": 600, \"valueformat\": \".0f\"},\n                title = {\"text\": \"Columns \ud83c\udfdb <br><span style=\"\n                                 \"'font-size:0.7em;color:gray'>in the data<\/span>\"},\n                domain = {'y': [0, 0.3], 'x': [0.5, 1]}))\nfig.show()","188fc86a":"data.nunique()","8d0073ee":"data.describe().T","c3718281":"data.isnull().sum()","bc78b786":"# Excellent !\nmsn.bar(data)","336e9f12":"data.Exited.value_counts()\nplt.figure(figsize=(12, 8))\nexited_plot = sns.countplot(x=data.Exited)\nexited_plot.set_title('Count for each class of exited customer',\n                      fontsize=30,\n                      pad=10)\nexited_plot.set_xticklabels(['No', 'Yes'], fontsize=20)","49e581b3":"colors = ['lightcoral','deepskyblue',\n          'orchid',    'tomato',\n          'teal',      'darkcyan',\n          'limegreen', 'darkorange']\n\ndef distribution_plot(column, title):\n\n    fig = plt.figure(figsize=(17, 7))\n    grid = GridSpec(nrows=2, ncols=1, figure=fig)\n    color = np.random.choice(colors, 1)[0]\n\n    ax0 = fig.add_subplot(grid[0, :])\n    ax0.set_title(f'Histogram and BoxPlot of {title}')\n    sns.histplot(column, ax=ax0, color=color)\n\n    ax1 = fig.add_subplot(grid[1, :])\n    plt.axis('off')\n    sns.boxplot(x=column, ax=ax1, color=color)\n    print(f'Skewness for {title} =======>>> {column.skew():.3f}')","9728fd62":"data.drop(['RowNumber', 'CustomerId'], axis=1, inplace=True)","71559c54":"data.Surname.value_counts().head(30)","f16b3077":"ending_type = []\nending_amount = []","d2221f8a":"i_sur = data[data.Surname.str[-1]=='i'].Exited.value_counts()\nration = i_sur.iloc[0] \/ i_sur.iloc[1]\n\nending_type.append('i')\nending_amount.append(ration)\n\nprint(f'Ratio : {ration:.2f}')","9271c223":"er_sur = data[data.Surname.str[-2:]=='er'].Exited.value_counts()\nration = er_sur.iloc[0] \/ er_sur.iloc[1]\n\nending_type.append('er')\nending_amount.append(ration)\n\nprint(f'Ratio : {ration:.2f}')","66a11dc8":"son_sur = data[data.Surname.str[-3:]=='son'].Exited.value_counts()\nration = son_sur.iloc[0] \/ son_sur.iloc[1]\n\nending_type.append('son')\nending_amount.append(ration)\n\nprint(f'Ratio : {ration:.2f}')","07753000":"ov_sur = data[(data.Surname.str[-2:]=='ov')\n              |\n              (data.Surname.str[-3:]=='ova')].Exited.value_counts()\nration = ov_sur.iloc[0] \/ ov_sur.iloc[1]\n\nending_type.append('ov(ova)')\nending_amount.append(ration)\n\nprint(f'Ratio : {ration:.2f}')","5f737752":"three_sur = data[data.Surname.str.len() <= 3].Exited.value_counts()\nration = three_sur.iloc[0] \/ three_sur.iloc[1]\n\nending_type.append('3 char')\nending_amount.append(ration)\n\nprint(f'Ratio : {ration:.2f}')","96a15052":"df_surnames = pd.DataFrame({'Types': ending_type,\n                            'Amount': ending_amount})\n\nsurnames_plot = sns.catplot(x='Types',\n                            y='Amount',\n                            data=df_surnames,\n                            kind='bar',\n                            aspect=2)\nsurnames_plot.fig.suptitle('(none-exited \/ exited) by surname ending',\n                           fontsize=25)\nsurnames_plot.fig.subplots_adjust(top=0.9)","d2b88df8":"data.drop(['Surname'], axis=1, inplace=True)","31fbbbb1":"data.head(3)","5fcddd10":"distribution_plot(data.CreditScore, 'Credit score')","9c7b3f92":"def credit_plot(data):\n    \n    col_name = 'CreditScore'\n    credit_data = data[[col_name, 'Exited']]\n    credit_data[col_name] = pd.cut(credit_data[col_name],\n                               bins=[0, 400, 500, 600, 700, 800, 900],\n                               labels=[400, 500, 600, 700, 800, 900])\n\n    color = np.random.choice(colors, 1)[0]\n    plt.figure(figsize=(15, 5))\n    sns.pointplot(x=col_name, y='Exited',\n                  dodge=0.1, capsize=.1, data=credit_data, color=color) \\\n                 .set_title(f'{col_name} influence', fontsize=25)\n\n\ncredit_plot(data)","6c5e6030":"geo_df = data.Geography.value_counts()\ncountries = geo_df.index.values\ngeo_df = pd.DataFrame({'name': geo_df.index,\n                       'Number of employees': geo_df.values})\n\nworld = geopandas.read_file(\n        geopandas.datasets.get_path('naturalearth_lowres'))\n\nworld.name = world.name.apply(lambda x: x if x in countries else np.NaN)\nworld = world.dropna()\n\nworld = world.merge(geo_df, on='name', how='outer')\nworld.iso_a3[world.name == 'France'] = 'FRA'","bf412172":"url = (\n    \"https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data\"\n)\nstate_geo = f\"{url}\/world-countries.json\"\n\nmap = folium.Map(location=[46.2276, 2.2137],\n               zoom_start=4)\n\nfolium.Choropleth(\n    geo_data=state_geo,\n    name='choropleth',\n    data=world,\n    columns=['iso_a3', 'Number of employees'],\n    key_on='feature.id',\n    fill_color=\"PiYG\",\n).add_to(map)\n\nmap","1e8967cf":"plt.figure(figsize=(12, 8))\ngender_plot = sns.countplot(x=data.Gender)\ngender_plot.set_title('Count plot for Gender', fontsize=30, pad=10)\ngender_plot.set_xticklabels(['Female', 'Male'], fontsize=20)","6dd92302":"gen_cat_plot = sns.catplot(x='Gender',\n                              y='Exited',\n                              data=data,\n                              aspect=2, kind='bar')\ngen_cat_plot.fig.suptitle('Gender Influence on \"Exited\"', fontsize=27)\ngen_cat_plot.fig.subplots_adjust(top=0.9)\ngen_cat_plot.set_xticklabels(['Female', 'Male'], fontsize=20)","7459d666":"plt.figure(figsize=(12, 8))\ntenure_plot = sns.countplot(x=data.Tenure)\ntenure_plot.set_title('Count plot for Tenure', fontsize=30, pad=10)","4db4b599":"tenure_cat_plot = sns.catplot(x='Tenure',\n                              y='Exited',\n                              data=data,\n                              aspect=2, kind='bar')\ntenure_cat_plot.fig.suptitle('Tenure Influence on \"Exited\"', fontsize=27)\ntenure_cat_plot.fig.subplots_adjust(top=0.9)","dc7fc066":"plt.figure(figsize=(12, 8))\nbalance_plot = sns.histplot(x=data.Balance)\nbalance_plot.set_title('Balance Histogram ', fontsize=30, pad=10)","633ca602":"def balance_plot(data):\n\n    col_name = 'Balance'\n    balance_data = data[[col_name, 'Exited']]\n    balance_data[col_name] = pd.cut(balance_data[col_name],\n                               bins=[0, 10000, 50000, 100000,\n                                     150000, 200000, 250000],\n                               labels=['<10000',\n                                       '10k-49k',\n                                       '50k-99k',\n                                       '100k-149k',\n                                       '150k-200k',\n                                       '200k+'])\n\n    color = np.random.choice(colors, 1)[0]\n    plt.figure(figsize=(15, 5))\n    sns.pointplot(x=col_name, y='Exited',\n                  dodge=0.1, capsize=.1, data=balance_data, color=color) \\\n                 .set_title(f'{col_name} influence', fontsize=25)\n\n\nbalance_plot(data)","58f7982d":"zero_balance = data[data.Balance == 0]\n\nplt.figure(figsize=(12, 8))\nzero_balance_plot = sns.countplot(x=zero_balance.Exited)\nzero_balance_plot.set_title('Zero balance People', fontsize=25)","01d3b9b2":"data.NumOfProducts.value_counts()","eec5a05e":"plt.figure(figsize=(12, 8))\nnum_prod_plot = sns.countplot(x=data.NumOfProducts)\nnum_prod_plot.set_title('Count plot of \"NumOfProducts\"', fontsize=25)","79155b29":"color = np.random.choice(colors, 1)[0]\n\nplt.figure(figsize=(15, 5))\nsns.pointplot(x='NumOfProducts', y='Exited', data=data,\n              dodge=0.1, capsize=.1, color=color) \\\n             .set_title(f'Number of products influence', fontsize=25)","ec9e7046":"plt.figure(figsize=(12, 8))\ncredit_plot = sns.countplot(x=data.HasCrCard)\ncredit_plot.set_title('Count plot of \"HasCrCard\"', fontsize=25)","abd70c8d":"color = np.random.choice(colors, 1)[0]\n\nplt.figure(figsize=(15, 5))\nsns.pointplot(x='HasCrCard', y='Exited', data=data,\n              dodge=0.1, capsize=.1, color=color) \\\n             .set_title(f'Credit card influence', fontsize=25)","a389b3dc":"plt.figure(figsize=(12, 8))\nactive_plot = sns.countplot(x=data.IsActiveMember)\nactive_plot.set_title('Count plot for active members', fontsize=25)","ad99c342":"color = np.random.choice(colors, 1)[0]\n\nplt.figure(figsize=(15, 5))\nsns.pointplot(x='IsActiveMember', y='Exited', data=data,\n              dodge=0.1, capsize=.1, color=color) \\\n             .set_title(f'Activity influence', fontsize=25)","762ed1e5":"distribution_plot(data.EstimatedSalary, 'Estimated salary')","b82c5e0b":"\ndef salary_plot(data):\n\n    col_name = 'Balance'\n    salary_data = data[[col_name, 'Exited']]\n    salary_data[col_name] = pd.cut(salary_data[col_name],\n                               bins=[0, 25000, 50000, 75000,\n                                     100000, 125000, 150000, 200000],\n                               labels=['<25000',\n                                       '25k-50k',\n                                       '50k-75k',\n                                       '75k-100k',\n                                       '100k-125k',\n                                       '125k-150k',\n                                       '150k-200k'])\n\n    color = np.random.choice(colors, 1)[0]\n    plt.figure(figsize=(15, 5))\n    sns.pointplot(x=col_name, y='Exited',\n                  dodge=0.1, capsize=.1, data=salary_data, color=color) \\\n                 .set_title(f'{col_name} influence', fontsize=25)\n\n\nsalary_plot(data)","3d6f9142":"plt.figure(figsize=(17, 15))\n\ncorr_mask = np.triu(data.corr())\nh_map = sns.heatmap(data.corr(), mask=corr_mask, cmap='Blues')\nh_map","71b787f7":"data.head()","711b5e63":"cat_columns = [cname for cname in data.columns\n                        if data[cname].dtype == 'object']\n\nencoder = preprocessing.LabelEncoder()\n\nfor col in cat_columns:\n    data[col] = encoder.fit_transform(data[col])","1d7131fc":"# Checking the result of encoding\ndata.head()","16a0b0f5":"X = data.drop(['Exited'], axis=1)\ny = data.Exited","fbfa8393":"models_results = np.zeros(4)\n\ndef show_training_results(X, y, model_name, model, split_share=0.3, **kwargs):\n\n    print(f'The model {model_name} with parameters : {kwargs}')\n    m = model(**kwargs)\n\n    X_train, X_test, y_train, y_test = \\\n        train_test_split(X, y, test_size=split_share, random_state=rnd_state)\n\n    m.fit(X_train, y_train)\n\n    score = m.score(X_test, y_test)\n\n    print(f'{model_name} score    ========>>> {score:.{3}f}\\n')\n\n    plot_conf_mat(m, X_test, y_test)\n\n    return score\n\n\ndef plot_conf_mat(model, X_test, y_test):\n\n    y_pred = model.predict(X_test)\n    matrix = confusion_matrix(y_pred, y_test)\n\n    df_cm = pd.DataFrame(matrix, index = ['Stay', 'Exited'],\n                                columns = ['Stay', 'Exited'])\n    plt.figure(figsize = (12,8))\n    sns.heatmap(df_cm,\n                annot=True,\n                cmap='Blues',\n                fmt='.5g',\n                annot_kws={\"size\": 20}).set_title('Confusion matrix', fontsize = 25)\n    plt.xlabel('Predicted values', fontsize = 20)\n    plt.ylabel('True values', fontsize = 20)\n    plt.show()","4ee428dc":"rnd_state = 0\n\nmodels_results[0] =   show_training_results(X, y,\n                      'RF',\n                      RandomForestClassifier,\n                      n_estimators=500,\n                      n_jobs=-1,\n                      random_state=rnd_state)","e28f8abc":"models_results[1] =   show_training_results(X, y,\n                      'kNN',\n                      KNeighborsClassifier,\n                      n_neighbors=1,\n                      algorithm='kd_tree',\n                      weights='uniform')","04df61bb":"models_results[2] =   show_training_results(X, y,\n                      'GradBoost',\n                      GradientBoostingClassifier,\n                      learning_rate=0.01,\n                      loss='exponential',\n                      max_depth=70,\n                      max_features=2,\n                      n_estimators=300)","e6da18bc":"os.environ[\"KMP_SETTINGS\"] = \"false\" # to avoid a huge warning about sort of settings","51b5d247":"def neural_net_results(X, y):\n\n    y = keras.utils.to_categorical(y, 2)\n\n    X_train, X_val, y_train, y_val = train_test_split(X, y,test_size=0.25, random_state=rnd_state)\n\n    scaler = StandardScaler()\n    X_train = scaler.fit_transform(X_train)\n    X_val = scaler.transform(X_val)\n\n    model = keras.Sequential([\n        keras.layers.Flatten(input_dim=X_train.shape[1]),\n        keras.layers.Dropout(0.1),\n        keras.layers.Dense(64, activation='relu'),\n        keras.layers.Dropout(0.3),\n        keras.layers.Dense(32, activation='relu'),\n        keras.layers.Dropout(0.3),\n        keras.layers.Dense(2, activation='softmax')\n    ])\n\n    model.compile(optimizer='adam',\n                  loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n\n    history = model.fit(X_train, y_train,\n              batch_size=20, epochs=100,\n              validation_data=(X_val, y_val),\n              verbose=0)\n\n    score = np.round(model.evaluate(X_val, y_val, verbose=0)[1], 3)\n    print(f'Neural Network score    ========>>> {score}')\n\n    history_plot(history)\n\n    return score\n\n\ndef history_plot(history):\n\n    fig = plt.figure(figsize=(12, 8))\n    plt.plot(history.history['accuracy'], label=\"Train loss\")\n    plt.plot(history.history['val_accuracy'], label=\"Test loss\")\n    plt.legend()\n\n    \ndef plot_nn_model(model):\n    plot_model(model, show_shapes=True)","860b876a":"models_results[-1] = neural_net_results(X, y)","6929f915":"plot_model(keras.Sequential([\n        keras.layers.Flatten(input_dim=X.shape[1]),\n        keras.layers.Dropout(0.1),\n        keras.layers.Dense(64, activation='relu'),\n        keras.layers.Dropout(0.3),\n        keras.layers.Dense(32, activation='relu'),\n        keras.layers.Dropout(0.3),\n        keras.layers.Dense(2, activation='softmax')\n    ]), show_shapes=True)","8164c079":"models_results = pd.DataFrame(models_results, columns=['Result'])\nmodels_results['Model name'] = \\\n    ['Random Forest', 'kNN', 'Gradient Boosting', 'ANN']\nmodels_results.sort_values(by=['Result'], inplace=True)","648b0972":"g = sns.catplot(x='Model name', y='Result', data=models_results,\n            height=5, aspect=2, kind='bar', legend=True)\nax = g.facet_axis(0,0)\nax.tick_params(axis='x', which='major', labelsize=20)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.27,\n            p.get_height() * 1.02,\n           '{0:.2f}%'.format(p.get_height()*100),\n            color='black',\n            rotation='horizontal',\n            size='x-large')","2f3bc58c":"### Tenure\n\nTenure - the time of bond with company\n\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/tenure.png?raw=true\" width=\"100\"\/>","7e2cb5ec":"### Credit score\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/credit%20score.png?raw=true\" width=\"100\"\/>","1dca59bd":"### Conclusion:\nWe see that most clients are those whose balance is zero. And it is in most cases they leave the company. It is most likely that a customer\u2019s lack of funds will make him no longer a client of this company","b8a91916":"![](https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/LinePurplePink.jpg?raw=true)\n\n# <center>Introduction<\/center>\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/intro.png?raw=true\" width=\"100\"\/>\n\n#### Nowadays, some companies are running out of customers. To understand this issue, my NoteBook introduces the EDA (Exploratory Data Analysis), as well as building the models to predict the possibility of a client\u2019s departure depending on the properties it possesses","b973960b":"# K-Nearest Neighbours\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/near-me.png?raw=true\" width=\"100\"\/>","91fccd1f":"### Conclusion:\n\nWe can notice that the surname has no effect on the ratio of\nnone-exited \/ exited customers, so this column should be deleted","dbe198f6":"### Work with categorical columns","05dfc371":"### Is Active member ?\nHow active member they are\n\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/active.png?raw=true\" width=\"100\"\/>","42abaa51":"# EDA + FE: Exploratory Data Analysis and Feature Engineering\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/data%20analysis.png?raw=true\" width=\"100\"\/>","5bd8305e":"# Loading and Checking Dataset\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/add-to-database.png?raw=true\" width=\"100\"\/>","5659befa":"# <center> Thank You ! <\/center>\n\n<img height=\"150\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/thank-you.png?raw=true\" width=\"150\"\/>\n\n## <center> If you have found something useful for yourself in my work , please evaluate and comment <\/center>\n\n![](https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/LinePurplePink.jpg?raw=true)","6a4e37c3":"### Number of products\nThe products they own\n\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/num_of_prod.png?raw=true\" width=\"100\"\/>","8c5ecaac":"## Heatmap","3346ce41":"### Surname\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/surname.png?raw=true\" width=\"100\"\/>","d25c8bc0":"# Data for Model\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/prepare.png?raw=true\" width=\"100\"\/>","61be5a2a":"# Import libraries\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/upload-icon.png?raw=true\" width=\"100\"\/>","10dd1329":"# Random Forest\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/forest.png?raw=true\" width=\"100\"\/>","f0a7fad9":"### Row Number and CustomerId\n\nThese columns aren't needed in the model learning process as\nthey present information that is not needed\nin the learning process\n\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/row%20number.png?raw=true\" width=\"100\"\/>","044e95d2":"# Models Evaluating\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/evaluate.png?raw=true\" width=\"100\"\/>","360ac107":"# Missing Values\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/missing.png?raw=true\" width=\"100\"\/>","83eb7def":"# GradientBoostingClassifier\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/boost-grad.png?raw=true\" width=\"100\"\/>","2c1fe111":"## Divide by X and y","24cd4382":"## Neural Network structure\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/structure.png?raw=true\" width=\"100\"\/>","5b866d1f":"### Gender\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/gender.png?raw=true\" width=\"100\"\/>","8979daab":"### Geography\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/geography-new.png?raw=true\" width=\"100\"\/>","296e2959":"### Has a credit card\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/credit%20card.png?raw=true\" width=\"100\"\/>","3b18ff54":"# Model\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/external-training-lineal-.png?raw=true\" width=\"100\"\/>","187f654b":"# <center>Conclusions<\/center>\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/conclusion.png?raw=true\" width=\"100\"\/>\n\n## Two models fared best: ANN and Random Forest with score >86.3%","eefba593":"## Such models will be uncovered:\n1. ### ML models\n    1. Random Forest Classifier\n    2. kNN (K-Nearest Neighbours)\n    3. GradientBoostingClassifier\n2. ### Neural net","58f20420":"# ANN (Artificial Neural Network)\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/neural%20net.png?raw=true\" width=\"100\"\/>","f250fd2d":"### Balance\nThe amount left with them\n\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/balance.png?raw=true\" width=\"100\"\/>","e25c9660":"### Estimated salary\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/estimated%20salary.png?raw=true\" width=\"100\"\/>"}}