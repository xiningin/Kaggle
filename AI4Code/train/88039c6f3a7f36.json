{"cell_type":{"574ebc19":"code","835fd4e1":"code","328e7ea5":"code","780482b3":"code","39ec49be":"code","462f0155":"code","9bd16a5b":"code","9fe59608":"code","cebbca0d":"code","c0b46070":"code","56ee8b67":"code","dce918c3":"markdown","9e6c7c45":"markdown"},"source":{"574ebc19":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nfrom subprocess import check_output\nimport bq_helper","835fd4e1":"github_repos = bq_helper.BigQueryHelper(active_project= \"bigquery-public-data\", \n                                       dataset_name = \"github_repos\")\nquery1= \"\"\"SELECT size\n            FROM `bigquery-public-data.github_repos.contents`\n            WHERE binary = True\n            LIMIT 5000\n        \"\"\"\ngithub_repo_sizes = github_repos.query_to_pandas_safe(query1, max_gb_scanned=2.34)\nBYTES_PER_MB = 2**20\nplt.figure(figsize=(12,6))\nplt.plot(github_repo_sizes.divide(BYTES_PER_MB),color=\"black\")\nplt.savefig('github-sizes-on-head-branch.png')\nplt.title(\"Sizes of Github Repos on Head Branch in MBs\");","328e7ea5":"query2= \"\"\"SELECT binary\n            FROM `bigquery-public-data.github_repos.contents`\n            LIMIT 50000\n        \"\"\"\n\nbinary_files=github_repos.query_to_pandas_safe(query2)\nbinary_files.head()\nsns.countplot(binary_files.binary)\nplt.savefig('github-binary-files.png')\nplt.title(\"Binary Vs. Text Files\");","780482b3":"query3= \"\"\"SELECT language\n            FROM `bigquery-public-data.github_repos.languages`\n            LIMIT 5000\n        \"\"\"\ngithub_languages = github_repos.query_to_pandas_safe(query3)\nlanguagesList=[]\nfor lang in github_languages.language:\n    languagesList.extend(lang)\nLanguages_count={}\nfor lang in languagesList:\n    if lang[\"name\"] not in Languages_count:\n        Languages_count[lang[\"name\"]]=0\n    Languages_count[lang[\"name\"]]+=1\nimport operator\nsorted_Languages_counts = sorted(Languages_count.items(), key=operator.itemgetter(1),reverse=True)\nlanguage = list(zip(*sorted_Languages_counts[:15]))[0]\ncount = list(zip(*sorted_Languages_counts[:15]))[1]\nx_pos = np.arange(len(language))\n\n\n# calculate slope and intercept for the linear trend line\nslope, intercept = np.polyfit(x_pos, count, 1)\ntrendline = intercept + (slope * x_pos)\nplt.figure(figsize=(12,8))\nplt.plot(x_pos, trendline, color='black', linestyle='--')    \nplt.bar(x_pos, count,align='center',color=sns.color_palette(\"gist_rainbow\",len(x_pos)))\nplt.xticks(x_pos, language,rotation=45) \nplt.title('Language Popularity Score')\nplt.savefig('github-language-popularity.png');","39ec49be":"query9 =\"\"\"\n        SELECT repo_name, watch_count\n        FROM `bigquery-public-data.github_repos.sample_repos`\n        ORDER BY watch_count DESC \n        LIMIT 2000\n        \"\"\"\ngithub_repo_trending_repos = github_repos.query_to_pandas_safe(query9)\nplt.figure(figsize=(12,8))\ng = sns.barplot(y=\"repo_name\", x=\"watch_count\", data=github_repo_trending_repos[:20], palette=\"winter\")\nplt.title('Trending Github Repositories')\nplt.ylabel(\"Repository Name\")\nplt.xlabel(\"Watch Count\")\nplt.savefig('github-trending-repo-by-watch-count.png');","462f0155":"query8 =\"\"\"\n        SELECT license, COUNT(*) AS count\n        FROM `bigquery-public-data.github_repos.licenses`\n        GROUP BY license\n        ORDER BY COUNT(*) DESC\n        \"\"\"\ngithub_repos.query_to_pandas_safe(query8)\ngithub_repo_licenses = github_repos.query_to_pandas_safe(query8)\nplt.figure(figsize=(12,9))\nsns.barplot(y=\"license\", x=\"count\", data=github_repo_licenses, palette=\"viridis\")\nplt.title('Licenses in order of their popularity in Github Repositories')\nplt.savefig('github-licenses-popularity.png');","9bd16a5b":"query10 = (\"\"\"\n        -- Select all the columns we want in our joined table\n        SELECT L.license, COUNT(sf.path) AS number_of_files\n        FROM `bigquery-public-data.github_repos.sample_files` as sf\n        -- Table to merge into sample_files\n        INNER JOIN `bigquery-public-data.github_repos.licenses` as L \n            ON sf.repo_name = L.repo_name -- what columns should we join on?\n        GROUP BY L.license\n        ORDER BY number_of_files DESC\n        \"\"\")\n\nfile_count_by_license = github_repos.query_to_pandas_safe(query10, max_gb_scanned=6)\nplt.figure(figsize=(12,9))\ng = sns.barplot(y=\"license\", x=\"number_of_files\", data=file_count_by_license, palette=\"inferno\")\nplt.title(' Number of Files covered by each License')\nplt.savefig('num-of-files-by-license.png')\nplt.xlabel(\"\");","9fe59608":"query11 = \"\"\"\nWITH python_repos AS (\n    SELECT DISTINCT repo_name -- Notice DISTINCT\n    FROM `bigquery-public-data.github_repos.sample_files`\n    WHERE path LIKE '%.py')\nSELECT commits.repo_name, COUNT(commit) AS num_commits\nFROM `bigquery-public-data.github_repos.sample_commits` AS commits\nJOIN python_repos\n    ON  python_repos.repo_name = commits.repo_name\nGROUP BY commits.repo_name\nORDER BY num_commits DESC\n\"\"\"\ngithub_repo_num_commits_distinct = github_repos.query_to_pandas_safe(query11, max_gb_scanned=10)\nplt.figure(figsize=(12,9))\ng = sns.barplot(y=\"repo_name\", x=\"num_commits\", data=github_repo_num_commits_distinct[:15], palette=\"inferno\")\nplt.title(' Top Python Github Repositories by their commits Count')\nplt.savefig('python-by-commits.png')\nplt.xlabel(\"\");","cebbca0d":"query12 = \"\"\"\nSELECT repo_name, COUNT(path) AS num_python_files\nFROM `bigquery-public-data.github_repos.sample_files`\nWHERE repo_name IN ('torvalds\/linux', 'apple\/swift', 'Microsoft\/vscode', 'facebook\/react', 'tensorflow\/tensorflow')\n    AND path LIKE '%.py'\nGROUP BY repo_name\nORDER BY num_python_files DESC\n\"\"\"\n\ngithub_repo_num_python_files = github_repos.query_to_pandas_safe(query12, max_gb_scanned=10)\nplt.figure(figsize=(12,9))\ng = sns.barplot(y=\"repo_name\", x=\"num_python_files\", data=github_repo_num_python_files, palette=\"Spectral_r\")\nplt.title(' Python Github Repositories by their files Count')\nplt.savefig('python-by-files-.png')\nplt.xlabel(\"\");","c0b46070":"query13 = \"\"\"\nWITH java_repos AS (\n    SELECT DISTINCT repo_name -- Notice DISTINCT\n    FROM `bigquery-public-data.github_repos.sample_files`\n    WHERE path LIKE '%.java')\nSELECT commits.repo_name, COUNT(commit) AS num_commits\nFROM `bigquery-public-data.github_repos.sample_commits` AS commits\nJOIN java_repos\n    ON  java_repos.repo_name = commits.repo_name\nGROUP BY commits.repo_name\nORDER BY num_commits DESC\n\"\"\"\ngithub_repo_num_java_distinct = github_repos.query_to_pandas_safe(query13, max_gb_scanned=5.3)\nplt.figure(figsize=(12,9))\ng = sns.barplot(y=\"repo_name\", x=\"num_commits\", data=github_repo_num_java_distinct, palette=\"PuBu\")\nplt.title(' Top Java Github Repositories by their commits Count')\nplt.savefig('java-by_commits.png')\nplt.xlabel(\"\");","56ee8b67":"from google.cloud import bigquery\nclient = bigquery.Client()\n\nQUERY = (\n\"\"\"SELECT REGEXP_EXTRACT(content, r'(random_state=\\d*|seed=\\d*|random_seed=\\d*|random_number=\\d*)') FROM `bigquery-public-data.github_repos.sample_contents`\"\"\"\n)\n\nquery_job = client.query(QUERY)\n\niterator = query_job.result(timeout=30)\nrows = list(iterator)\nimport pandas as pd\nseeds = pd.Series(rows)\nimport numpy as np\nseeds = (\n    seeds.map(lambda s: s[0])\n     .map(lambda s: np.nan if pd.isnull(s) else s.split(\"=\")[-1].strip())\n     .map(lambda s: np.nan if (pd.isnull(s) or s == \"\") else float(s))\n     .value_counts(dropna=False)\n)\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n\n(seeds\n     # Reagg by percentage usage, excluding the empty (NaN) seed.\n     .pipe(lambda srs: srs \/ srs.iloc[1:].sum())\n     .sort_values(ascending=False)\n     # Exclude the empty (NaN) seed.\n     .head(11)\n     .iloc[1:]\n     .pipe(lambda srs: srs.reindex(srs.index.astype(int)))\n     .plot.bar(\n         figsize=(12, 6), title='Most Common Integer Random Seeds'\n     )\n)\nax = plt.gca()\nax.set_ylabel('Percent Usage')\nax.set_xlabel('Seed (Integer)')","dce918c3":"# 2. Plots using BigQuery","9e6c7c45":"# 1. Necessary Imports"}}