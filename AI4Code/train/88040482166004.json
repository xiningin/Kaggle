{"cell_type":{"3481164b":"code","510e85ec":"code","c19dcc09":"code","0694d464":"code","fd582b4b":"code","b86e0f11":"code","e14823e3":"code","9fe26efb":"code","085dca04":"code","4d428ee5":"code","069d0761":"code","de0f7034":"code","75ab60f5":"code","74785bd5":"code","c5a18b47":"code","7e41c814":"code","d347ce82":"code","af5d17dc":"code","2e07b6cc":"code","8baf0b17":"code","c694f11c":"code","0a8ade15":"code","ff903756":"code","ec4bcd51":"code","9ad1c316":"code","d27c6f9c":"code","6738e7c1":"code","8d3a145f":"code","022f4357":"code","b9823b3b":"code","41547a05":"code","ae38271a":"code","9f20b0fb":"code","f1442cc1":"code","6d685900":"code","1e627828":"code","c6408b4d":"code","f264fafa":"code","da72e906":"code","581ad74b":"code","c090bcb4":"code","27383176":"code","f48ada20":"code","3f937147":"code","c3f1cfed":"code","9922205c":"code","87791d85":"code","5b50483e":"code","cf9af48a":"code","b3f8dc6d":"code","683752ae":"code","de233a82":"code","8b338dc9":"code","29d0a440":"code","2acacbbd":"code","1d30bf9f":"code","cdbfddb6":"code","d7a4a4d4":"code","1acca962":"code","4cb5f602":"code","06dba42f":"code","be565e9e":"code","46673e99":"code","c3cc846d":"code","c33739cd":"code","1b818f69":"code","082ae1bb":"code","b8783bd3":"code","de3d9531":"code","32b52254":"code","eddc069f":"code","e7914786":"code","e2da43c1":"code","7550d79e":"code","f7925b5c":"code","2f138ad1":"code","35e3cf95":"code","b900914e":"code","fcdaf2cc":"code","d9ff4deb":"code","afb45c8a":"code","256268ab":"code","e35739e6":"code","9ed031c0":"markdown","30efd864":"markdown","b98ea845":"markdown","732bf37b":"markdown","9715e18b":"markdown","3a61b318":"markdown","9e0a4aba":"markdown","8d47ab7a":"markdown"},"source":{"3481164b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import linear_model\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For exa```````````````````````````mple, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","510e85ec":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n","c19dcc09":"df_train.shape, df_test.shape","0694d464":"all_data = [df_train, df_test]\n","fd582b4b":"df_train.head()","b86e0f11":"df_train.describe()","e14823e3":"df_test.describe()","9fe26efb":"df_train.groupby('Survived').hist(figsize=(9,9))","085dca04":"# EDA Col 'Sex'\ndf_train.groupby('Sex')[['Sex', 'Survived']].mean()","4d428ee5":"print(pd.crosstab(df_train.Sex, df_train.Survived) \/ df_train.shape[0]*100)\nsns.countplot(data = df_train, hue='Survived', x='Sex')\nplt.title('Survived Gender Count')\nplt.show()","069d0761":"# EDA Col 'Sex' accoding to 'Age'\n\ngrid = sns.FacetGrid(df_train, col = 'Survived', row = 'Sex')\ngrid.map(plt.hist, 'Age', bins = 20)\ngrid.add_legend()","de0f7034":"# EDA Col 'Pclass'\ndf_train.groupby('Pclass')[['Pclass', 'Survived']].mean()","75ab60f5":"print(pd.crosstab(df_train.Pclass, df_train.Survived))\n","74785bd5":"sns.countplot(data = df_train, x='Pclass', hue='Survived')\nplt.title('Survived according to the Class')\nplt.show()","c5a18b47":"grid = sns.FacetGrid(df_train, col='Survived', row = 'Pclass')\ngrid.map(plt.hist, 'Age', bins = 20)\ngrid.add_legend();","7e41c814":"# EDA Col 'SibSp'\ndf_train.groupby('SibSp')[['SibSp', 'Survived']].mean()","d347ce82":"print(pd.crosstab(df_train.SibSp, df_train.Survived))\n","af5d17dc":"sns.countplot(data = df_train, x='SibSp', hue='Survived')\nplt.title('Sibling according to the Class')\nplt.show()","2e07b6cc":"# EDA Col 'Parch'\ndf_train.groupby('Parch')[['Parch', 'Survived']].mean()","8baf0b17":"print(pd.crosstab(df_train.Parch, df_train.Survived))\n","c694f11c":"sns.countplot(data = df_train, x='Parch', hue='Survived')\nplt.title('Parch according to the Class')\nplt.show()","0a8ade15":"# EDA Col 'Age'\ndf_train.groupby('Age')[['Age', 'Survived']].mean()","ff903756":"plt.figure(figsize=(15,6))\ngrid = sns.FacetGrid(df_train, col = 'Survived')\ngrid.map(plt.hist, 'Age', bins = 20)\nplt.show()","ec4bcd51":"# EDA Col 'Embarked'\nprint(pd.crosstab(df_train.Embarked, df_train.Survived))\n","9ad1c316":"sns.countplot(data = df_train, x='Embarked', hue='Survived')\nplt.title('Embarked according to the Class')\nplt.show()","d27c6f9c":"df_train.isnull().sum()\n","6738e7c1":"df_train.isnull().sum()[df_train.isnull().any()]\n","8d3a145f":"df_test.isnull().sum()[df_test.isnull().any()]\n","022f4357":"# Almost half of the data in \"Cabin\" Col is NAN, so I will drop it \ndf_train.drop(labels='Cabin', axis = 1, inplace= True)\ndf_test.drop(labels='Cabin', axis = 1, inplace= True)","b9823b3b":"df_train","41547a05":"df_test","ae38271a":"df_train['Ticket'].unique()\n","9f20b0fb":"# Almost half of the data in \"Ticket\" Col is Unique, so I drop it \ndf_train.drop(labels='Ticket', axis = 1, inplace= True)\ndf_test.drop(labels='Ticket', axis = 1, inplace= True)","f1442cc1":"df_train","6d685900":"df_test['Age'] = df_test['Age'].fillna(df_test['Age'].mean())\ndf_test.info()","1e627828":"df_train['Age'] = df_train['Age'].fillna(df_train['Age'].mean())","c6408b4d":"df_train['Embarked'] = df_train['Embarked'].fillna('S')\n","f264fafa":"df_test.isnull().sum()[df_test.isnull().any()]\n","da72e906":"df_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].mean())","581ad74b":"df_train.isnull().sum()[df_train.isnull().any()]\n","c090bcb4":"df_train.shape, df_test.shape","27383176":"all_data = [df_train, df_test]\n\nfor dataset in all_data:\n    dataset['title'] = dataset.Name.str.extract('([A-Za-z]+)\\.', expand=False)\n","f48ada20":"pd.crosstab(df_train.title, df_train.Sex)","3f937147":"for dataset in all_data:\n    dataset['title'] = dataset['title'].replace(['Lady', 'Countess','Capt', 'Col',\n                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['title'] = dataset['title'].replace('Mlle', 'Miss')\n    dataset['title'] = dataset['title'].replace('Ms', 'Miss')\n    dataset['title'] = dataset['title'].replace('Mme', 'Mrs')\n","c3f1cfed":"print(df_train[['title','Survived']].groupby(['title'], as_index=False).mean())\n","9922205c":"df_train.title.value_counts()\n","87791d85":"print(pd.crosstab(df_train.title, df_train.Survived))","5b50483e":"df_train.head","cf9af48a":"# Drop col 'Name'\n\ndf_train.drop(labels='Name', axis=1, inplace=True)\ndf_test.drop(labels='Name', axis=1, inplace=True)\n\nall_data = [df_train, df_test]\n","b3f8dc6d":"df_train[\"AgeState\"] = pd.cut(df_train.Age, bins = [0, 2, 5, 18,60,100], labels=[\"Infant\", \"Toddler\", \"Child\", \"Adult\", 'Senior_Citizen'],include_lowest=True)\n","683752ae":"df_test[\"AgeState\"] = pd.cut(df_test.Age, bins = [0, 2, 5, 18,60,100], labels=[\"Infant\", \"Toddler\", \"Child\", \"Adult\", 'Senior_Citizen'],include_lowest=True)\n","de233a82":"df_train.AgeState.value_counts()","8b338dc9":"print(pd.crosstab(df_train.AgeState, df_train.Survived))","29d0a440":"# Drop col 'Age'\n\ndf_train.drop(labels='Age', axis=1, inplace=True)\ndf_test.drop(labels='Age', axis=1, inplace=True)\n\nall_data = [df_train, df_test]","2acacbbd":"df_train.info()\n","1d30bf9f":"df_test.info()","cdbfddb6":"df_test.shape, df_train.shape","d7a4a4d4":"df_train.drop(labels='PassengerId', axis=1, inplace=True)","1acca962":"for dataset in all_data:\n    dataset['Sex'] = dataset['Sex'].map({'female':0,'male':1}).astype('int64')","4cb5f602":"df_train.Sex.value_counts()\n","06dba42f":"for dataset in all_data:\n    dataset['Embarked'] = dataset['Embarked'].map({'S':0,'C':1,'Q':2}).astype('int64')\n","be565e9e":"df_train.Embarked.value_counts()\n","46673e99":"for dataset in all_data:\n    dataset['title'] = dataset['title'].map({'Mr':0,'Miss':1,'Mrs':2,'Master':3,'Rare':4}).astype('int64')","c3cc846d":"df_train.title.value_counts()\n","c33739cd":"for dataset in all_data:\n    dataset['AgeState'] = dataset['AgeState'].map({'Adult':0,'Child':1,'Infant':2,\n                                                  'Senior_Citizen':3,'Toddler':4}).astype('int64')\ndf_train.AgeState.value_counts()\n","1b818f69":"X = df_train.drop('Survived', axis = 1)\ny = df_train['Survived']\nX_test_data = df_test.drop('PassengerId', axis = 1).copy()\n","082ae1bb":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 10)","b8783bd3":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","de3d9531":"model_xg = XGBRegressor(n_estimators = 500, learning_rate =.04, random_state=0)\nmodel_xg.fit(X_train, y_train,\n            early_stopping_rounds=5, \n               eval_set=[(X_test, y_test)],\n               verbose = False)\n\ny_pred = model_xg.predict(X_test)\npredictions = [round(value) for value in y_pred]\n\n\ntraining_data_accuracy_xg = accuracy_score(y_test, predictions)\nprint(\"The accuracy of XGBoost Model is\",(training_data_accuracy_xg*100), '%')","32b52254":"param_grid = {\n    'n_estimators':[200,150,100,50],\n    'criterion':['gini','entropy'],\n    'max_depth':[2,4,6]\n}","eddc069f":"Model_rf = RandomForestClassifier()\ngrid = GridSearchCV(estimator=Model_rf, param_grid=param_grid, n_jobs=-1)\ngrid.fit(X_train, y_train)\nModel_rf = grid.best_estimator_\n","e7914786":"y_pred_train = Model_rf.predict(X_test)\ntraining_data_accuracy_rf = accuracy_score(y_test, y_pred_train)\n\nprint(\"The accuracy of RandomForestC Model is\", (training_data_accuracy_rf*100), '%')\n","e2da43c1":"rf = RandomForestClassifier(criterion='entropy', max_depth=6)\n\n","7550d79e":"rf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nprint(accuracy_score(y_pred, y_test))\ny_train_pre = rf.predict(X_train)\nprint(accuracy_score(y_train_pre, y_train))","f7925b5c":"scores = cross_val_score(rf, X_train, y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())\n","2f138ad1":"print(\"Accuracy_score\", accuracy_score(y_train_pre, y_train))\nprint(\"Mean:\", scores.mean())\nprint(\"Variation:\", scores.var())","35e3cf95":"y_preds_test = rf.predict(X_test_data)\n","b900914e":"importances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(rf.feature_importances_,3)})\n","fcdaf2cc":"importances1 = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances1.plot(kind='bar',figsize=(15,6))\n","d9ff4deb":"Titanic_submission = pd.DataFrame({'Passengerid':df_test['PassengerId'],\n                                     'Survived':y_preds_test})\n","afb45c8a":"Titanic_submission.head()\n","256268ab":"Titanic_submission.shape","e35739e6":"Titanic_submission.to_csv('Titanic_submission.csv', index=False)","9ed031c0":"# **Explore the Data set**","30efd864":"# **Change Var of Col 'Name'**","b98ea845":"# Fitting Model (Random Forest Classifer)","732bf37b":"# **Exploratory data analysis (Visualisation )**","9715e18b":"# **Data Cleaning and imputation** \n","3a61b318":"# **Fitting Model**","9e0a4aba":"# Categorical Variables","8d47ab7a":"# Fitting Model (XGBRegressor)"}}