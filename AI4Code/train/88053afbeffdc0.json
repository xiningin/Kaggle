{"cell_type":{"6d3e0ca5":"code","5d8ea6ff":"code","cef37fc2":"code","ecf90bc4":"code","44e3f641":"code","1e7dce24":"code","7db168e5":"code","46a05452":"code","738ae087":"code","827aa9ba":"code","e154ad75":"code","9d3efee2":"code","6e1d1d6d":"code","fde9a21e":"code","7e6b3bc0":"code","d0d5e2a2":"code","c6a02a3d":"code","0b3e0929":"code","c40cdf64":"code","24a1a352":"code","6679b28b":"code","909761c7":"code","ef71596c":"code","b74f639f":"code","7835a61c":"code","6121d1d9":"code","51f553e5":"code","de4b9cf6":"code","c46bd4e9":"code","6efe1fcb":"code","5af0e651":"code","14e35ddd":"code","3fd15722":"markdown","0d32708c":"markdown","3163df43":"markdown"},"source":{"6d3e0ca5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline","5d8ea6ff":"df=pd.read_csv('..\/input\/iris\/Iris.csv')","cef37fc2":"df.drop('Id',axis=1,inplace=True)","ecf90bc4":"df.head()","44e3f641":"sb.pairplot(df,hue='Species')","1e7dce24":"from sklearn.preprocessing import StandardScaler","7db168e5":"scaler=StandardScaler()","46a05452":"scaler.fit(df.drop('Species',axis=1))","738ae087":"scaled_features=scaler.transform(df.drop('Species',axis=1))","827aa9ba":"df_features=pd.DataFrame(scaled_features,columns=df.columns[:-1])","e154ad75":"df_features.head()","9d3efee2":"from sklearn.model_selection import train_test_split","6e1d1d6d":"x=df_features\ny=df['Species']","fde9a21e":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=101)","7e6b3bc0":"from sklearn.neighbors import KNeighborsClassifier","d0d5e2a2":"knn=KNeighborsClassifier(n_neighbors=1)","c6a02a3d":"knn.fit(x_train,y_train)","0b3e0929":"pred=knn.predict(x_test)","c40cdf64":"from sklearn.metrics import classification_report,confusion_matrix","24a1a352":"print(confusion_matrix(y_test,pred))\nprint(classification_report(y_test,pred))","6679b28b":"error_rate=[]\nfor i in range(1,50):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    pred_i=knn.predict(x_test)\n    error_rate.append(np.mean(pred_i != y_test))","909761c7":"plt.figure(figsize=(10,6))\nplt.plot(range(1,50),error_rate,color='blue',linestyle='dashed',marker='o',markerfacecolor='red',markersize=10)\n\nplt.title('Error rate vs K value')\n\nplt.xlabel('K value')\nplt.ylabel('Error rate')","ef71596c":"knn=KNeighborsClassifier(n_neighbors=12)\nknn.fit(x_train,y_train)\npred=knn.predict(x_test)","b74f639f":"print(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","7835a61c":"df.head()","6121d1d9":"x=df[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\ny=df['Species']","51f553e5":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33,random_state=101)","de4b9cf6":"from sklearn.linear_model import LogisticRegression","c46bd4e9":"logmodel=LogisticRegression()","6efe1fcb":"logmodel.fit(x_train,y_train)","5af0e651":"prediction=logmodel.predict(x_test)","14e35ddd":"print(confusion_matrix(y_test,prediction))\nprint(classification_report(y_test,prediction))","3fd15722":" First,i want to  start from with KNN method then i continue with\n* \n* Logistic Regression,finally i compare them together.","0d32708c":"****Now i want to start prediction with Logistic Regression","3163df43":"# **Finish**"}}