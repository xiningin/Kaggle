{"cell_type":{"08804257":"code","4db14334":"code","5aea33f2":"code","70430b4c":"code","2fc5c9b5":"code","80c339e6":"code","ddc95e07":"code","139d35d4":"code","102456a0":"code","9516689d":"code","c0a2412b":"code","d0bf16cc":"code","2234e45a":"code","6a3dda13":"code","e7508444":"code","a5bb0811":"code","52911094":"code","59446218":"code","08beb772":"code","120aaf84":"code","9cc05b4c":"code","dc18f2c0":"code","675c4624":"code","5b08c9e6":"code","323f3385":"code","e1737083":"code","755aa406":"code","72de75ba":"code","d4153d18":"code","a102542a":"code","40b865db":"code","a5399a7d":"code","33e92e92":"code","05d9ea29":"code","eef2b269":"code","2fd5c542":"code","ede944d2":"code","34386fa0":"code","4f6244fe":"code","cd3eeb8e":"code","3a1fec3a":"code","c7ad18c2":"code","0ecb0529":"code","064643c9":"code","32a4a998":"code","b82049d9":"code","a500e9a3":"code","2f825c94":"code","8f77e659":"code","4b52681f":"code","6ad1e6bc":"code","21d59449":"code","310ecaaf":"code","84f2a04c":"code","1541e92b":"code","694adedd":"code","269f2255":"code","dfacffb4":"code","27cac1b5":"code","aeef5115":"code","3e03a2f1":"code","0fd259ab":"code","163d01f0":"code","fcdb5511":"markdown","9fe39280":"markdown","f50b2a2a":"markdown","91e3da7b":"markdown","b71c2370":"markdown","ebec73fe":"markdown","66d2a558":"markdown","5d7e0007":"markdown","d1709d55":"markdown","fa9fd4db":"markdown","a1e1ad42":"markdown","446f565a":"markdown","d3ba5ad3":"markdown","7bc2863d":"markdown","67f8ee8a":"markdown","a6f67aa2":"markdown","826abf9f":"markdown","24a0c0ba":"markdown","a1de0838":"markdown","ada31094":"markdown","28b00e7e":"markdown","55ce0143":"markdown","4a044fc3":"markdown","7add230e":"markdown","d3bb7ade":"markdown","6660d58f":"markdown","c0eadf60":"markdown","c75a70d2":"markdown","8286811f":"markdown","7154bd59":"markdown","a59a9c69":"markdown","ec697b5b":"markdown","234db8ed":"markdown","5e6762f7":"markdown","f742a8a8":"markdown","2fcafa4d":"markdown","005569e4":"markdown","494f4692":"markdown","25e92442":"markdown","3bb6c4a3":"markdown","7547dbca":"markdown","453481ec":"markdown","0c035ba0":"markdown","a6aa5d41":"markdown","0cade2c8":"markdown","2e78e211":"markdown","50ed7d05":"markdown","52f964a1":"markdown","ae39805c":"markdown","5e6ec948":"markdown","82f4ec62":"markdown"},"source":{"08804257":"# install calmap\n! pip install calmap","4db14334":"# essential libraries\nimport json\nimport random\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport calmap\nimport folium\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# html embedding\nfrom IPython.display import Javascript\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML","5aea33f2":"# list files\n# !ls ..\/input\/corona-virus-report","70430b4c":"# importing datasets\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","2fc5c9b5":"# dataframe info\n# full_table.info()","80c339e6":"# checking for missing value\n# full_table.isna().sum()","ddc95e07":"# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)","139d35d4":"# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","102456a0":"full_latest_grouped.head()\nfull_table.head()","9516689d":"fr = full_table[full_table['Province\/State']=='France']\nfr_active = fr[['Date','Active']]\nfr_dth = fr[['Date','Deaths']]\nfr_rcv = fr[['Date','Recovered']]\nfr_conf = fr[['Date','Confirmed']]\nfr_active.head()","c0a2412b":"fr_active = fr_active.rename(columns={\"Date\" : \"ds\", \"Active\" : \"y\"})\nfr_active.head()\n\nfr_dth = fr_dth.rename(columns={\"Date\" : \"ds\", \"Deaths\" : \"y\"})\nfr_rcv = fr_rcv.rename(columns={\"Date\" : \"ds\", \"Recovered\" : \"y\"})\nfr_conf = fr_conf.rename(columns={\"Date\" : \"ds\", \"Confirmed\" : \"y\"})\n\n\n\n","d0bf16cc":"fr_active_plot = fr_active.copy()\nfr_active_plot.index = pd.to_datetime(fr_active_plot.index, format=\"%Y-%m-%d\")\nfr_active_plot.set_index('ds', inplace=True)\nfr_active_plot.index = pd.to_datetime(fr_active_plot.index)\nfr_active_plot.plot()","2234e45a":"ch = full_table[full_table['Province\/State']=='Hubei']\nch = ch[['Date','Active']]\nch = ch.rename(columns={\"Date\" : \"ds\", \"Active\" : \"y\"})\n\nch_plot = ch.copy()\nch_plot.index = pd.to_datetime(ch_plot.index, format=\"%Y-%m-%d\")\nch_plot.set_index('ds', inplace=True)\nch_plot.index = pd.to_datetime(ch_plot.index)\nch_plot.plot()","6a3dda13":"fr_active.head()\nlist(fr_active.columns)","e7508444":"fr_active = fr_active[(fr_active['ds'] > '2020-03-01')]\nfr_rcv = fr_rcv[(fr_rcv['ds'] > '2020-03-01')]\nfr_dth = fr_dth[(fr_dth['ds'] > '2020-03-01')]\nfr_conf = fr_conf[(fr_conf['ds'] > '2020-03-01')]\nimport math\n\nmath.log(fr_active['y'])","a5bb0811":"from fbprophet import Prophet\nm = Prophet()\nm.fit(fr_active)\nfuture = m.make_future_dataframe(periods=15)\n\nm_rcv = Prophet()\nm_rcv.fit(fr_rcv)\nfuture_rcv = m_rcv.make_future_dataframe(periods=15)\n\nm_dth = Prophet()\nm_dth.fit(fr_dth)\nfuture_dth = m_dth.make_future_dataframe(periods=15)\n\nm_conf = Prophet()\nm_conf.fit(fr_conf)\nfuture_conf = m_conf.make_future_dataframe(periods=15)","52911094":"forecast = m.predict(future)\n\nforecast_rcv = m_rcv.predict(future_rcv)\nforecast_dth = m_dth.predict(future_dth)\nforecast_conf = m_conf.predict(future_conf)\n\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","59446218":"fig1 = m.plot(forecast)","08beb772":"fig3 = m_dth.plot(forecast_dth)","120aaf84":"fig_conf = m_conf.plot(forecast_conf)","9cc05b4c":"fig2 = m_rcv.plot(forecast_rcv)","dc18f2c0":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\n# temp.style.background_gradient(cmap='Reds')","675c4624":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","5b08c9e6":"tm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=400, width=600,\n                 color_discrete_sequence=[rec, act, dth])\nfig.show()","323f3385":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","e1737083":"temp_flg = temp_f[temp_f['Deaths']>0][['Country\/Region', 'Deaths']]\ntemp_flg.sort_values('Deaths', ascending=False).reset_index(drop=True).style.background_gradient(cmap='Reds')","755aa406":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Reds')","72de75ba":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","d4153d18":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']+\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","a102542a":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])**1.1).add_to(m)\nm","40b865db":"# Confirmed\n\nfig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,7000], \n                    color_continuous_scale=\"aggrnyl\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","a5399a7d":"# Deaths\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"agsunset\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","33e92e92":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","05d9ea29":"temp = full_table.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.show()","eef2b269":"temp = full_table.groupby('Date').sum().reset_index()\n\n# adding two more columns\ntemp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/temp['Confirmed'], 3)*100\n# temp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/temp['Deaths'], 3)\n\ntemp = temp.melt(id_vars='Date', value_vars=['No. of Deaths to 100 Confirmed Cases', 'No. of Recovered to 100 Confirmed Cases'], \n                 var_name='Ratio', value_name='Value')\n\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', log_y=True, \n              title='Recovery and Mortality Rate Over The Time', color_discrete_sequence=[dth, rec])\nfig.show()","2fd5c542":"c_spread = china[china['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='Date', y='Province\/State', text='Province\/State',\n              title='Number of Provinces\/States\/Regions of China to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\nfig.update_traces(textposition='top center')\nfig.show()\n\n# ------------------------------------------------------------------------------------------\n\nspread = full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='Date', y='Country\/Region', text='Country\/Region',\n              title='Number of Countries\/Regions to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\nfig.update_traces(textposition='top center')\nfig.show()","ede944d2":"flg = full_latest_grouped\nflg.head()","34386fa0":"fig = px.bar(flg.sort_values('Confirmed', ascending=False).head(20).sort_values('Confirmed', ascending=True), \n             x=\"Confirmed\", y=\"Country\/Region\", title='Confirmed Cases', text='Confirmed', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Confirmed'])+10000])\nfig.update_traces(marker_color='#46cdcf', opacity=0.8, textposition='outside')\nfig.show()","4f6244fe":"fig = px.bar(flg.sort_values('Deaths', ascending=False).head(20).sort_values('Deaths', ascending=True), \n             x=\"Deaths\", y=\"Country\/Region\", title='Deaths', text='Deaths', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Deaths'])+500])\nfig.update_traces(marker_color=dth, opacity=0.6, textposition='outside')\nfig.show()","cd3eeb8e":"fig = px.bar(flg.sort_values('Recovered', ascending=False).head(20).sort_values('Recovered', ascending=True), \n             x=\"Recovered\", y=\"Country\/Region\", title='Recovered', text='Recovered', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Recovered'])+10000])\nfig.update_traces(marker_color=rec, opacity=0.6, textposition='outside')\nfig.show()","3a1fec3a":"fig = px.bar(flg.sort_values('Active', ascending=False).head(20).sort_values('Active', ascending=True), \n             x=\"Active\", y=\"Country\/Region\", title='Active', text='Active', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Active'])+3000])\nfig.update_traces(marker_color='#f0134d', opacity=0.6, textposition='outside')\nfig.show()","c7ad18c2":"# (Only countries with more than 100 case are considered)\n\nflg['Mortality Rate'] = round((flg['Deaths']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>100]\ntemp = temp.sort_values('Mortality Rate', ascending=False)\n\nfig = px.bar(temp.sort_values('Mortality Rate', ascending=False).head(15).sort_values('Mortality Rate', ascending=True), \n             x=\"Mortality Rate\", y=\"Country\/Region\", text='Mortality Rate', orientation='h', \n             width=700, height=600, range_x = [0, 10], title='No. of Deaths Per 100 Confirmed Case')\nfig.update_traces(marker_color='#00a8cc', opacity=0.6, textposition='outside')\nfig.show()","0ecb0529":"# load population dataset\npop_clean_data = pd.read_csv(\"..\/input\/world-population-19602018\/population_clean.csv\")\n\n# select only the latest data\npop = pop_clean_data.loc[:, ['Country Name', '2018']]\n\n# substitute for missing values\ncols = ['French Guiana', 'Martinique', 'Palestine' , 'Republic of Ireland', 'Saint Barthelemy', 'Taiwan', 'Vatican City']\npops = [290691, 376480, 4750000, 4920455, 7122, 23476640, 1000]\nfor c, p in zip(cols, pops):\n    temp.loc[temp['Country\/Region']== c, 'Population'] = p\n\n# replace country names \nname = {\n    'Egypt, Arab Rep.': 'Egypt',\n    'Hong Kong SAR, China': 'Hong Kong',\n    'Iran, Islamic Rep.': 'Iran (Islamic Republic of)',\n    'Macao SAR, China': 'Macau',\n    'Hong Kong SAR': 'Hong Kong',\n    'Russian Federation': 'Russia',\n    'Slovak Republic': 'Slovakia',\n    'Korea, Rep.': 'Republic of Korea',\n    'United Kingdom': 'UK',\n    'United States': 'US' }\npop.loc[:, 'Country Name'] = pop.loc[: 'Country Name'].replace(name)\n\n# merge dataframes\ntemp = pd.merge(full_latest_grouped, pop, how='left', right_on='Country Name', left_on='Country\/Region')\n# print(temp[temp['Country Name'].isna()])\n\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', '2018']]\ntemp.columns = ['Country\/Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'Population']\n    \n# calculate Confirmed\/Population\ntemp['Confirmed Per Million People'] = round(temp['Confirmed']\/temp['Population']*1000000, 2)\n\n# countries with population greater that 1 million only\ntemp = temp[temp['Population']>1000000].sort_values('Confirmed Per Million People', ascending=False).reset_index(drop=True)\n# temp.head()\n\nfig = px.bar(temp.head(20).sort_values('Confirmed Per Million People', ascending=True), \n             x='Confirmed Per Million People', y='Country\/Region', orientation='h', \n             width=700, height=700, text='Confirmed Per Million People', title='Confirmed cases Per Million People',\n             range_x = [0, max(temp['Confirmed Per Million People'])+40])\nfig.update_traces(textposition='outside', marker_color='#2a7886', opacity=0.7)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","064643c9":"temp = full_table.groupby(['Country\/Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', orientation='v', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","32a4a998":"fig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region', orientation='v', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","b82049d9":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region',title='New cases')\nfig.show()","a500e9a3":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","2f825c94":"# temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum().reset_index()\n# temp = temp.sort_values('Confirmed').reset_index(drop=True).head(20)\n# # temp['Date'] = temp['Date'].dt.strftime('%Y-%m-%d')\n# temp = temp.sort_values(by='Date')\n# temp['Date'] = temp['Date'].apply(lambda x: x.date()).apply(str)\n# temp.head()\n\n# fig = px.bar(temp, y='Country\/Region', x='Confirmed', color='Country\/Region', orientation='h',  \n#              title='Over time', animation_frame='Date', height=1000, log_x=True)\n# # fig.update_traces(textposition='outside')\n# # fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n# # fig.update_layout(yaxis={'categoryorder':'array', \n# #                          'categoryarray':['Hubei','Other Chinese Provinces','Rest of the World']})\n# fig.show()","8f77e659":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum().reset_index().sort_values('Confirmed', ascending=False)\n\npx.line(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', title='Cases Spread', height=600)","4b52681f":"fig = px.scatter(full_latest_grouped.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region',\n                 text='Country\/Region', log_x=True, log_y=True, title='Deaths vs Confirmed')\nfig.update_traces(textposition='top center')\nfig.show()","6ad1e6bc":"fig = px.treemap(full_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(full_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","21d59449":"# first date\n# ----------\nfirst_date = full_table[full_table['Confirmed']>0]\nfirst_date = first_date.groupby('Country\/Region')['Date'].agg(['min']).reset_index()\n# first_date.head()\nfrom datetime import timedelta  \n# last date\n# ---------\nlast_date = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = last_date['Country\/Region'] != last_date['Country\/Region'].shift(1)\nlast_date.loc[mask, 'Confirmed'] = np.nan\nlast_date.loc[mask, 'Deaths'] = np.nan\nlast_date.loc[mask, 'Recovered'] = np.nan\n\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Country\/Region')['Date'].agg(['max']).reset_index()\n# last_date.head()\n\n# first_last\n# ----------\nfirst_last = pd.concat([first_date, last_date[['max']]], axis=1)\n\n# added 1 more day, which will show the next day as the day on which last case appeared\nfirst_last['max'] = first_last['max'] + timedelta(days=1)\n\n# no. of days\nfirst_last['Days'] = first_last['max'] - first_last['min']\n\n# task column as country\nfirst_last['Task'] = first_last['Country\/Region']\n\n# rename columns\nfirst_last.columns = ['Country\/Region', 'Start', 'Finish', 'Days', 'Task']\n\n# sort by no. of days\nfirst_last = first_last.sort_values('Days')\n# first_last.head()\n\n# visualization\n# --------------\n\n# produce random colors\nclr = [\"#\"+''.join([random.choice('0123456789ABC') for j in range(6)]) for i in range(len(first_last))]\n\n#plot\nfig = ff.create_gantt(first_last, index_col='Country\/Region', colors=clr, show_colorbar=False, \n                      bar_width=0.2, showgrid_x=True, showgrid_y=True, height=1600, \n                      title=('Gantt Chart'))\nfig.show()","310ecaaf":"# In China\ntemp = china.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='In China',\n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n#-----------------------------------------------------------------------------\n\n# ROW\ntemp = row.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Outside China',\n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()","84f2a04c":"def from_china_or_not(row):\n    if row['Country\/Region']=='China':\n        return 'From China'\n    else:\n        return 'Outside China'\n    \ntemp = full_table.copy()\ntemp['Region'] = temp.apply(from_china_or_not, axis=1)\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\nmask = temp['Region'] != temp['Region'].shift(1)\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x='Date', y='Confirmed', color='Region', barmode='group', \n             text='Confirmed', title='Confirmed', color_discrete_sequence= [cnf, dth, rec])\nfig.update_traces(textposition='outside')\nfig.show()\n\nfig = px.bar(temp, x='Date', y='Deaths', color='Region', barmode='group', \n             text='Confirmed', title='Deaths', color_discrete_sequence= [cnf, dth, rec])\nfig.update_traces(textposition='outside')\nfig.update_traces(textangle=-90)\nfig.show()","1541e92b":"gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngdf = gdf.reset_index()\n\ntemp = gdf[gdf['Country\/Region']=='China'].reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n            title='China', color_discrete_sequence=[cnf, dth, rec])\nfig.show()\n\ntemp = gdf[gdf['Country\/Region']!='China'].groupby('Date').sum().reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='ROW', color_discrete_sequence=[cnf, dth, rec])\nfig.show()","694adedd":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_table.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp['Date'] = temp['Date'].dt.strftime('%Y-%m-%d')\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars=['Region', 'Date'], value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\n# temp = temp.sort_values(['Date', 'Region', 'Case']).reset_index()\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', animation_frame='Date',\n             color_discrete_sequence= [dth, rec, cnf], range_x=[0, 70000])\nfig.update_traces(textposition='outside')\n# fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n# fig.update_layout(yaxis={'categoryorder':'array', \n#                          'categoryarray':['Hubei','Other Chinese Provinces','Rest of the World']})\nfig.show()\n\ntemp = full_latest.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp = temp.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars='Region', value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', \n             color_discrete_sequence= [dth, rec, cnf])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","269f2255":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum()\nrl = rl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             title='Number of Cases outside China', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             title='Number of Cases in China', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","dfacffb4":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(plt.plot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","27cac1b5":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(sns.lineplot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","aeef5115":"temp = full_table.groupby('Date')['Confirmed'].sum()\ntemp = temp.diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(temp, fillcolor='white', cmap='Reds', linewidth=0.5)","3e03a2f1":"spread = full_table[full_table['Confirmed']!=0].groupby('Date')\nspread = spread['Country\/Region'].unique().apply(len).diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(spread, fillcolor='white', cmap='Greens', linewidth=0.5)","0fd259ab":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [full_latest['Confirmed'].sum(), 8096, 28646, 2494, 6724149],\n    'deaths' : [full_latest['Deaths'].sum(), 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.head()","163d01f0":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","fcdb5511":"### Derived Tables","9fe39280":"Note : In the graph, last day is shown as one day after the last time a new confirmed cases reported in the Country \/ Region","f50b2a2a":"# Maps","91e3da7b":"# Dataset","b71c2370":"# Acknowledgements\n\n> https:\/\/github.com\/CSSEGISandData\/COVID-19\n\n# Collection methodology\n\n> https:\/\/github.com\/imdevskp\/covid_19_jhu_data_web_scrap_and_cleaning","ebec73fe":"# Latest Data","66d2a558":"### Import","5d7e0007":"### Latest Complete Data","d1709d55":"# Proportion of Cases","fa9fd4db":"# Top 20 Countries","a1e1ad42":"# Cases over the time","446f565a":"### Countries with deaths reported","d3ba5ad3":"# Comparison with similar epidemics","7bc2863d":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1\n\n","67f8ee8a":"### Countries with all the cases recovered","a6f67aa2":"### Countries with all cases died","826abf9f":"### Latest Condensed Data","24a0c0ba":"# Hubei - China - World","a1de0838":"starting on 7\/03 for active cases","ada31094":"# Country Wise","28b00e7e":"### Confirmed","55ce0143":"# Calander map","4a044fc3":"# Preprocessing","7add230e":"### Number of new cases every day","d3bb7ade":"# Recovery and mortality rate over time","6660d58f":"### Countries with no affected case anymore","c0eadf60":"# Epidemic Span","c75a70d2":"### Confirmed cases","8286811f":"### Active cases","7154bd59":"### China","a59a9c69":"# China vs ROW","ec697b5b":"### Prediction PROPHET","234db8ed":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n\n","5e6762f7":"# Libraries","f742a8a8":"## ACTIVE CASES FRANCE","2fcafa4d":"# Composition of Cases","005569e4":"### Cleaning Data","494f4692":"# Analysis on similar epidemics","25e92442":"# COVID 19 Forked notebook","3bb6c4a3":"# Country wise Data","7547dbca":"### New cases","453481ec":"### Number of new countries every day","0c035ba0":"### Install","a6aa5d41":"### Across the world","0cade2c8":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","2e78e211":"# No. of places to which COVID-19 spread","50ed7d05":"# France predictions","52f964a1":"### Recover","ae39805c":"# Date vs","5e6ec948":"### In each country","82f4ec62":"### Deaths"}}