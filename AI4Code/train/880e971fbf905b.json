{"cell_type":{"c3e20eda":"code","36a19ec5":"code","fa7aafa2":"code","6968a311":"code","84e1dd4f":"code","bb2da0e4":"code","4cd39b72":"code","e7330edf":"code","f9de1f93":"markdown","c16d0b16":"markdown","8dcba3cf":"markdown","0646bf11":"markdown"},"source":{"c3e20eda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36a19ec5":"import matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns\nfrom colorama import Fore, Back, Style \nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport xgboost\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom statsmodels.formula.api import ols\nimport plotly.graph_objs as gobj\nimport argparse\nimport cv2\nimport cv2 as cv\nimport pydicom as dicom\nfrom pydicom.filereader import dcmread\nimport pydicom","fa7aafa2":"import re\nfrom PIL import Image\nfrom IPython.display import Image as show_gif\nfrom PIL import Image\nfrom IPython.display import Image as show_gif\nimport scipy.misc\nimport matplotlib\nfrom skimage import exposure\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nfrom glob import glob\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport scipy.ndimage\nfrom skimage import morphology\nfrom skimage import measure\nfrom skimage.transform import resize\nfrom sklearn.cluster import KMeans\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.tools import FigureFactory as FF\nimport plotly.figure_factory as ff\nfrom plotly.graph_objs import *\ninit_notebook_mode(connected=True)","6968a311":"image = cv2.imread('\/kaggle\/input\/summer2winter-yosemite\/testA\/2011-06-14 23_29_30.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nplt.imshow(image)","84e1dd4f":"import pydicom as dicom\nfrom pydicom.filereader import dcmread\nimport pydicom","bb2da0e4":"#Code from Salman Faroz https:\/\/www.kaggle.com\/salmanfaroz\/fibrosis-let-s-talk-to-the-data\/notebook\n\n# Let's define our Kaggle Notebook size\nKNotebook = np.ones((5,5), np.uint8)\n#Image=image.pixel_array\nImage=image\nImage=exposure.equalize_adapthist(Image)\nplt.figure(figsize = (65,35))\nplt.axis('off')\n\nplt.subplot(341)\n\n# Now we erode\nerosion = cv2.erode(Image, KNotebook, iterations = 1)\nplt.axis('off')\nplt.title(\"Erosion\", fontsize=50)\n\nplt.imshow(erosion)\n\nplt.subplot(342, frameon=False)\n\nKNotebook = np.ones((5,5), np.uint8)\ndilation = cv2.dilate(Image, KNotebook, iterations = 1)\nplt.axis('off')\nplt.title(\"Dilation\", fontsize=50)\n\nplt.imshow(dilation)\n\nplt.subplot(343, frameon=False)\n\n# Opening - Good for removing noise\nopening = cv2.morphologyEx(Image, cv2.MORPH_OPEN, KNotebook)\nplt.axis('off')\nplt.title(\"Opening\", fontsize=50)\n\nplt.imshow(opening)\n\nplt.subplot(344, frameon=False)\n\n# Closing - Good for removing noise\nclosing = cv2.morphologyEx(Image, cv2.MORPH_CLOSE, KNotebook)\nplt.title(\"Closing\", fontsize=50)\nplt.axis('off')\n\nplt.imshow(closing)","4cd39b72":"def make_rainbowmask(img, display=False):\n    row_size= img.shape[1]\n    col_size = img.shape[1]\n    \n    mean = np.mean(img)\n    std = np.std(img)\n    img = img-mean\n    img = img\/std\n    # Find the average pixel value near the lungs\n    # to renormalize washed out images\n    middle = img[int(col_size\/5):int(col_size\/5*4),int(row_size\/5):int(row_size\/5*4)] \n    mean = np.mean(middle)  \n    max = np.max(img)\n    min = np.min(img)\n    # To improve threshold finding, I'm moving the \n    # underflow and overflow on the pixel spectrum\n    img[img==max]=mean\n    img[img==min]=mean\n    #\n    # Using Kmeans to separate foreground (soft tissue \/ bone) and background (lung\/air)\n    #\n    kmeans = KMeans(n_clusters=2).fit(np.reshape(middle,[np.prod(middle.shape),1]))\n    centers = sorted(kmeans.cluster_centers_.flatten())\n    threshold = np.mean(centers)\n    thresh_img = np.where(img<threshold,1.0,0.0)  # threshold the image\n\n    # First erode away the finer elements, then dilate to include some of the pixels surrounding the lung.  \n    # We don't want to accidentally clip the lung.\n\n    eroded = morphology.erosion(thresh_img,np.ones([1,1]))\n    dilation = morphology.dilation(eroded,np.ones([8,8]))\n\n    labels = measure.label(dilation) # Different labels are displayed in different colors\n    label_vals = np.unique(labels)\n    regions = measure.regionprops(labels)\n    good_labels = []\n    for prop in regions:\n        B = prop.bbox\n        if B[2]-B[0]<row_size\/10*9 and B[3]-B[1]<col_size\/10*9 and B[0]>row_size\/5 and B[2]<col_size\/5*4:\n            good_labels.append(prop.label)\n    mask = np.ndarray([row_size,col_size],dtype=np.int8)\n    mask[:] = 0\n\n    #\n    #  After just the lungs are left, we do another large dilation\n    #  in order to fill in and out the lung mask \n    #\n    for N in good_labels:\n        mask = mask + np.where(labels==N,1,0)\n    mask = morphology.dilation(mask,np.ones([10,10])) # one last dilation\n\n    if (display):\n        fig, ax = plt.subplots(3, 2, figsize=[12, 12])\n        ax[0, 0].set_title(\"Original\")\n        ax[0, 0].imshow(img, cmap='gray')\n        ax[0, 0].axis('off')\n        ax[0, 1].set_title(\"Threshold\")\n        ax[0, 1].imshow(thresh_img, cmap='gray')\n        ax[0, 1].axis('off')\n        ax[1, 0].set_title(\"After Erosion and Dilation\")\n        ax[1, 0].imshow(dilation, cmap='gray')\n        ax[1, 0].axis('off')\n        ax[1, 1].set_title(\"Color Labels\")\n        ax[1, 1].imshow(labels)\n        ax[1, 1].axis('off')\n        ax[2, 0].set_title(\"Final Mask\")\n        ax[2, 0].imshow(mask, cmap='gray')\n        ax[2, 0].axis('off')\n        ax[2, 1].set_title(\"Apply Mask on Original\")\n        ax[2, 1].imshow(mask*img, cmap='gray')\n        ax[2, 1].axis('off')\n        \n        plt.show()\n    return mask*img\nimg = image[230]\nmake_rainbowmask(img, display=True)","e7330edf":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here' )","f9de1f93":"#Yosemite National Park - Seasons\n\nAs is true of all mountainous regions, weather in the Sierra Nevada can change rapidly at any time of the year. Elevation plays a major role in temperature and precipitation variability. Since Yosemite varies in elevation from 2,000 feet to over 13,000 feet, the lower foothills of the park can be experiencing the rebirth of spring while the higher elevations remain in the grip of winter. The higher you go, the colder and more temperamental the climate gets. March, April, October, and November are transitional months when warm, sunny days can suddenly become stormy. Although summer in the Sierra is known for its sunny days, it is not unheard of for clouds to build up suddenly, creating a downpour that could last a few hours or several days. See descriptions below for more information on each season.https:\/\/www.nps.gov\/yose\/planyourvisit\/seasons.htm","c16d0b16":"#I got no `pixel_array` therefore my Image=image","8dcba3cf":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSTaZTSEcp1uo7mG990QY03lPPX30bwjNeXNA&usqp=CAU)vroomvroomvroom.com","0646bf11":"#After 1h41 `make_rainbow` didn't work. No mask or rainbow. Other things didn't work too. Just a black square."}}