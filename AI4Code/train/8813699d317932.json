{"cell_type":{"9fe3ceb3":"code","a0a5655f":"code","4da9c15f":"code","7477aab7":"code","2139f0bd":"code","73af465f":"code","d5fab58d":"code","a6322058":"code","452f8186":"code","3e2e7885":"code","43342adc":"code","07142d8a":"code","d258fbf6":"code","10a89282":"code","476994f4":"code","ad513409":"code","4ce1724e":"code","6c88319d":"code","e4a611de":"code","f0e6de03":"code","11ed35a4":"code","00c674cb":"code","1c0caa20":"code","589c5134":"code","423aeb93":"code","f6fa3a92":"code","f9e9fef2":"code","2457ee3e":"code","1d0d84ce":"code","f838fd6c":"code","c2e8a36c":"code","d7792cc4":"markdown","1089df25":"markdown","a885fb95":"markdown","3057dca3":"markdown","2ad91e05":"markdown","f6275887":"markdown"},"source":{"9fe3ceb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0a5655f":"import pandas as pd \nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","4da9c15f":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","7477aab7":"train.head()","2139f0bd":"test.head()","73af465f":"train.info()","d5fab58d":"train.columns","a6322058":"plt.figure(figsize=(10,6))\nsns.distplot(train['SalePrice'], color='g')\nplt.legend(['Normal dist.'])\nplt.title('Distribution of Sales Price', fontsize=18)\nplt.show() ","452f8186":"plt.figure(figsize=(30,10))\nsns.heatmap(train.corr(),cmap='Greens',annot=True)\nplt.show()","3e2e7885":"corr = train.corr()\ntop_corr_features = corr.index[abs(corr['SalePrice'])>0.5]\ntop_corr_features","43342adc":"plt.figure(figsize=(30,10))\nsns.heatmap(train[top_corr_features].corr(),cmap='Greens',annot=True)\nplt.show()","07142d8a":"plt.figure(figsize=(8,6))\nsns.scatterplot(x='SalePrice',y='1stFlrSF',data=train , color=\"#DF3A41\", alpha=0.6)\nplt.show()","d258fbf6":"plt.figure(figsize=(8,6))\nsns.scatterplot(x='SalePrice',y='OverallQual', data=train)\nplt.title('SalePrice and OverallQual')\nplt.show()","10a89282":"plt.figure(figsize=(8,6))\nsns.scatterplot(x='YearBuilt',y='SalePrice', data=train,color='c', alpha=0.6)\nplt.title('YearBuilt and SalePrice')\nplt.show()","476994f4":"plt.figure(figsize=(8,6))\nsns.scatterplot(x='YearBuilt',y='SalePrice', data=train,color='g', alpha=0.6)\nplt.title('YearBuilt and SalePrice')\nplt.show()","ad513409":"plt.figure(figsize=(8,6))\nsns.scatterplot(x= 'SalePrice', y='GrLivArea',color='#DA43E1', data=train, alpha=0.6)\nplt.show()","4ce1724e":"train = train[['OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF',\n       'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars', 'GarageArea',\n       'SalePrice']]\ntest = test[['OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF',\n       'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars', 'GarageArea']]","6c88319d":"total_train_nan = train.isnull().sum().sort_values(ascending=False)\nmiss_train_data = pd.concat([total_train_nan], axis=1, keys=['Total'])\nmiss_train_data.head(15)","e4a611de":"total_nan = test.isnull().sum().sort_values(ascending=False)\nmissi_data = pd.concat([total_nan], axis=1, keys=['Total'])\nmissi_data.head(15)","f0e6de03":"test['GarageArea'] = test['GarageArea'].fillna(train['GarageArea'].mean())\ntest['GarageCars'] = test['GarageCars'].fillna(train['GarageCars'].mean())\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(train['TotalBsmtSF'].mean())","11ed35a4":"total_test_nan = test.isnull().sum().sort_values(ascending=False)\nmiss_test_data = pd.concat([total_test_nan], axis=1, keys=['Total'])\nmiss_test_data.head(15)","00c674cb":"categorical_train = train.dtypes==object\ncategorical_train","1c0caa20":"categorical_test = test.dtypes==object\ncategorical_test","589c5134":"X_train, X_test, y_train, y_test = train_test_split(train.drop('SalePrice', axis=1), train['SalePrice'], test_size=0.2, random_state=1)\n\ny_train= y_train.values.reshape(-1,1)\ny_test= y_test.values.reshape(-1,1)\n\nstd_X = StandardScaler()\nstd_Y = StandardScaler()\nX_train = std_X.fit_transform(X_train)\nX_test = std_X.fit_transform(X_test)\ny_train = std_Y.fit_transform(y_train)\ny_test = std_Y.fit_transform(y_test)\n\ntree = RandomForestRegressor(n_estimators=500 ,random_state=0)\ntree.fit(X_train,y_train.ravel())\n\npred = tree.predict(X_test)\n\nprint('MSE:', metrics.mean_squared_error(y_test, pred))\nprint('Score train', tree.score(X_train,y_train))\nprint('Score test', tree.score(X_test,y_test))","423aeb93":"take_id = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nId = take_id['Id']\ntake_id = pd.DataFrame(Id, columns=['Id'])\ntest.shape","f6fa3a92":"test = std_X.fit_transform(test)","f9e9fef2":"test_pred = tree.predict(test)\ntest_pred= test_pred.reshape(-1,1)\ntest_pred.shape","2457ee3e":"test_pred_tree =std_Y.inverse_transform(test_pred)\ntest_pred_tree = pd.DataFrame(test_pred_tree, columns=['SalePrice'])","1d0d84ce":"test_pred_tree.head()","f838fd6c":"result = pd.concat([take_id,test_pred_tree], axis=1)\nresult.head()","c2e8a36c":"result.to_csv('submission.csv',index=False)","d7792cc4":"## Results ##","1089df25":"#### Cleaning data ####","a885fb95":"#### Search categorical data ####","3057dca3":"## Create model ##","2ad91e05":"## Import Libraries ##","f6275887":"#### Take the most relevant characteristics for training ####"}}