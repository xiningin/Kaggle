{"cell_type":{"c83e2dd6":"code","ceb78906":"code","7babe288":"code","5927737a":"code","0aee57a7":"code","44614ed6":"code","02d691df":"code","a78322ac":"code","caf5e14f":"code","155d8656":"code","e6dffe93":"code","5f9104c2":"code","48dcf7a5":"code","3796e720":"code","ee256e0a":"code","99494ef9":"code","bd02b30b":"code","dc521fe5":"code","85837d69":"code","29394d11":"code","6a706549":"code","52ffe413":"code","f745bd0f":"code","2ba13daf":"code","7ea57665":"code","422c0512":"code","e6d65391":"code","c357ffd7":"code","bb716742":"code","1b492e0c":"code","93ab30be":"code","f41bb959":"code","88309f3d":"code","d6e1fa58":"code","cf5b3231":"code","713e4c01":"code","1072294e":"code","8e00fac6":"markdown","88e85666":"markdown","6cbdcd75":"markdown","9bc3f596":"markdown","ccc8b23f":"markdown"},"source":{"c83e2dd6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ceb78906":"#import more libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","7babe288":"data_SF=pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\")","5927737a":"data_SF.head()","0aee57a7":"data_SF.describe()","44614ed6":"data_SF.columns","02d691df":"f, axes = plt.subplots(1, 3)\nsns.distplot(data_SF['reading score'],ax=axes[0])\nsns.distplot(data_SF['writing score'],ax=axes[1])\nsns.distplot(data_SF['math score'],ax=axes[2])\n","a78322ac":"sns.pairplot(data_SF, hue='lunch', height=2.5);","caf5e14f":"sns.pairplot(data_SF, hue='gender', height=2.5)","155d8656":"from sklearn.model_selection import train_test_split\ndata=data_SF.copy()\ndata.columns\n","e6dffe93":"data=data.drop(['parental level of education'],axis=1)","5f9104c2":"# creating bool series True for NaN values  \nbool_series = pd.isnull(data[\"math score\"])  \n    \n# filtering data  \n# displaying data only with Gender = NaN  \ndata[bool_series]  ","48dcf7a5":"# Get list of categorical variables\ns = (data.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","3796e720":"data.head()","ee256e0a":"y=dict()\nfor i in data['test preparation course']:\n    print","99494ef9":"y= data['test preparation course']\n\nprint(y)","bd02b30b":"one_hot = pd.get_dummies(data[object_cols])\n# Drop column B as it is now encoded\ndata = data.drop(object_cols,axis = 1)\n# Join the encoded df\ndata = data.join(one_hot)\ndata","dc521fe5":"X = data.iloc[:, :-2].values\nprint(X)\n","85837d69":"\n# split data into training and validation data, for both features and target\n# The split is based on a random number generator. Supplying a numeric value to\n# the random_state argument guarantees we get the same split every time we\n# run this script.\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\n","29394d11":"model = LogisticRegression(solver='liblinear', random_state=0)","6a706549":"model.fit(train_X, train_y)","52ffe413":"model.predict(val_X)","f745bd0f":"model.score(val_X,val_y)","2ba13daf":"confusion_matrix(val_y, model.predict(val_X))","7ea57665":"#Import svm model\nfrom sklearn import svm\n\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n\n#Train the model using the training sets\nclf.fit(train_X, train_y)\n\n#Predict the response for test dataset\ny_pred = clf.predict(val_X)","422c0512":"clf.score(val_X,val_y)","e6d65391":"confusion_matrix(val_y,y_pred)","c357ffd7":"from sklearn.svm import SVC\nclf1 = SVC(kernel='poly',degree=10)\nclf1.fit(train_X, train_y)\ny_pred1 = clf1.predict(val_X)","bb716742":"clf1.score(val_X,val_y)","1b492e0c":"confusion_matrix(val_y,y_pred1)","93ab30be":"from sklearn.svm import SVC\nclf2 = SVC(kernel='sigmoid')\nclf2.fit(train_X, train_y)\ny_pred2 = clf2.predict(val_X)","f41bb959":"clf2.score(val_X,val_y)","88309f3d":"confusion_matrix(val_y,y_pred2)","d6e1fa58":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\n\n#instantiate model and train\nclf3 = XGBClassifier(learning_rate = 0.05, n_estimators=60, max_depth=10)\nclf3.fit(train_X, train_y)\n\n# make predictions for test set\ny_pred3 = clf3.predict(val_X)\n\n\naccuracy = accuracy_score(val_y, y_pred3)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","cf5b3231":"confusion_matrix(val_y,y_pred3)","713e4c01":"from sklearn.neural_network import MLPClassifier\naccuracy={}\nfor i in range(1,500):\n    clf4 = MLPClassifier(solver='lbfgs', alpha=1e-7,hidden_layer_sizes=(12, 2),max_iter=i,random_state=1)\n    clf4.fit(X, y)\n# make predictions for test set\n    y_pred4 = clf4.predict(val_X)\n    accuracy[i] = accuracy_score(val_y, y_pred4)\n    #print(\"Accuracy: %.2f%%\" % (accuracy[i] * 100.0))\n    #confusion_matrix(val_y,y_pred4)\naccuracy","1072294e":"#from sklearn.neural_network import MLPClassifier\nclf4 = MLPClassifier(solver='lbfgs', alpha=1e-7,hidden_layer_sizes=(12, 2),max_iter=115,random_state=1)\nclf4.fit(X, y)\n# make predictions for test set\ny_pred4 = clf4.predict(val_X)\naccuracy = accuracy_score(val_y, y_pred4)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\nconfusion_matrix(val_y,y_pred4)\n","8e00fac6":"We could see the dataset has 8 columns.\nGender,Race,parental level of education, lunch, test preparation score,math score,reading score,writing score.\nMay be we could try finding out most contributing factor for highest\/lowest scores.","88e85666":"Lets now try with SVM model","6cbdcd75":"Explore the data","9bc3f596":"Let's tune with the kernel parameter","ccc8b23f":"**Read input data**"}}