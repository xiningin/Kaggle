{"cell_type":{"bfb12181":"code","30bbd1dd":"code","8dbbbb84":"code","d5165a72":"code","f90074a5":"code","9867b21f":"code","ac8cb834":"code","ca2e35f0":"code","d111c6bd":"code","2cd998e3":"code","52d2275c":"code","e2b7f4fd":"code","d80d6c11":"code","bb63f4e8":"code","b22aa4b2":"code","57b8f3d2":"code","c0c81b5d":"code","e68b1e25":"code","8553ad71":"code","52570de1":"code","affc1d50":"code","c8bc1cdc":"code","49464b2c":"code","4ad88711":"code","e6aef984":"code","19bf1e5f":"code","1f12b7da":"code","6bdda47b":"code","145caf4c":"code","3a7ef636":"code","d344ca4f":"code","2d47b5d3":"code","acd64486":"code","948cb01e":"code","6f0a4293":"code","26a9d236":"code","d2f7d16c":"code","7ea7a762":"code","860fc4c3":"code","08f3ad5e":"code","888edad0":"code","3fa77330":"code","e71969ee":"code","576969f3":"code","b8e79df9":"code","265e7823":"code","56f439d8":"code","b49f635a":"code","23cf7a59":"code","ffd023bc":"code","9d22f8d6":"code","013081d9":"code","46613eee":"code","f39cc1bf":"code","b8028dd1":"code","78f4035c":"code","284312ea":"code","bb948725":"code","02b24cc9":"code","a7262bd1":"code","abf4d626":"code","69c0ec24":"code","8d563cfc":"code","3d94656f":"code","9b4d0d0d":"markdown","7cf5cec3":"markdown","769ef0ef":"markdown","77a2f991":"markdown","ac9b93a4":"markdown","a1e27ec1":"markdown","be93cc9d":"markdown","fd43c926":"markdown","edff2df2":"markdown","1f824177":"markdown","9e134a7b":"markdown","965b295f":"markdown","db4f0a8a":"markdown","e83a40a8":"markdown","855ada6a":"markdown","49df6b36":"markdown"},"source":{"bfb12181":"import numpy as np\nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p","30bbd1dd":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","8dbbbb84":"train.head()","d5165a72":"train.shape","f90074a5":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","9867b21f":"test.head()","ac8cb834":"test.shape","ca2e35f0":"train.columns","d111c6bd":"num_cols = train._get_numeric_data().columns\ndisplay(num_cols)\nprint()\nprint(\"Count:\", len(num_cols))","2cd998e3":"plt.figure(figsize = (25,45))\nfor i in enumerate(num_cols):\n    plt.subplot(13, 3, i[0]+ 1)\n    sns.boxplot(x = train[i[1]])\n    plt.xlabel(i[1])","52d2275c":"sns.heatmap(train.isnull(), cbar = False, yticklabels = False, cmap = 'viridis')","e2b7f4fd":"Null_train = train.isnull().sum()\nNull_train[Null_train > 0]","d80d6c11":"train.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature', 'Id'], axis = 1, inplace = True)","bb63f4e8":"Null_train_data = train[['LotFrontage','MasVnrType', 'MasVnrArea', 'FireplaceQu',\n                         'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1',\n                         'BsmtFinType2', 'Electrical', 'GarageType', 'GarageYrBlt',\n                         'GarageFinish', 'GarageQual', 'GarageCond']]","b22aa4b2":"def view_null_data(data):\n    return pd.DataFrame({\"Data Type\":data.dtypes, \"Unique Count\":data.apply(lambda x: x.nunique(),axis=0), \n                         \"Null Count\": data.isnull().sum() })","57b8f3d2":"view_null_data(Null_train_data)","c0c81b5d":"Null_train_data[['LotFrontage', 'MasVnrArea', 'GarageYrBlt']].describe()","e68b1e25":"train['LotFrontage'] = train['LotFrontage'].fillna(train.LotFrontage.mean())\ntrain['GarageYrBlt'] = train['GarageYrBlt'].fillna(train.GarageYrBlt.mean())\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(train.MasVnrArea.mode()[0])","8553ad71":"sns.heatmap(test.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","52570de1":"Null_test = test.isnull().sum()\nNull_test[Null_test > 0]","affc1d50":"Id = test['Id']\ntest.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature', 'Id'], axis = 1, inplace = True)","c8bc1cdc":"Null_test_data = test[['MSZoning', 'LotFrontage', 'Utilities', 'Exterior1st',\n                       'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'BsmtQual','FireplaceQu',\n                       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n                       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n                       'BsmtFullBath', 'BsmtHalfBath', 'KitchenQual', 'Functional',\n                       'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageQual',\n                       'GarageCars','GarageArea','GarageQual', 'GarageCond', 'SaleType']]","49464b2c":"view_null_data(Null_test_data)","4ad88711":"Null_test_data[['LotFrontage', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2',\n                'BsmtUnfSF', 'TotalBsmtSF','BsmtFullBath','BsmtHalfBath',\n                'GarageYrBlt', 'GarageArea']].describe()","e6aef984":"test['LotFrontage'] = test['LotFrontage'].fillna(test['LotFrontage'].mean())\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mean())\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mean())\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean())\ntest['GarageYrBlt'] = test['GarageYrBlt'].fillna(test['GarageYrBlt'].mean())\ntest['GarageArea'] = test['GarageArea'].fillna(test['GarageArea'].mean())\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(test['MasVnrArea'].mode()[0])\ntest['BsmtFullBath'] = test['BsmtFullBath'].fillna(test['BsmtFullBath'].mode()[0])\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].mode()[0])\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mode()[0])\ntest['LotFrontage'] = test['LotFrontage'].fillna(test['LotFrontage'].mode()[0])","19bf1e5f":"corr_matrix = train.corr().style.background_gradient()\ncorr_matrix","1f12b7da":"def filter_correlation(data, limit):\n    col = set()\n    corr_matrix = data.corr() \n    for i in range(len(corr_matrix)):\n        for j in range(i):\n            if (corr_matrix.iloc[i, j]) > limit:\n                col_name = corr_matrix.columns[i]\n                col.add(col_name)\n    return col","6bdda47b":"high_corr_col = filter_correlation(train, 0.7)\nhigh_corr_col","145caf4c":"train = train.drop(['1stFlrSF', 'GarageArea', 'TotRmsAbvGrd'], axis = 1)\ntest = test.drop(['1stFlrSF', 'GarageArea', 'TotRmsAbvGrd'], axis = 1)","3a7ef636":"sns.pairplot(data = train, x_vars = ['MiscVal', 'MoSold','YrSold', 'SaleType', 'SaleCondition'], y_vars = 'SalePrice', kind = 'scatter')","d344ca4f":"train.drop(['MiscVal', 'MoSold','YrSold'], axis = 1, inplace = True)\ntest.drop(['MiscVal', 'MoSold','YrSold'], axis = 1, inplace = True)","2d47b5d3":"sns.histplot(x = 'SalePrice', data = train, kde = True)","acd64486":"train['SalePrice'] = np.log1p(train['SalePrice'])\nsns.histplot(x = 'SalePrice', data = train, kde = True)","948cb01e":"#cols = ['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual',\n#      'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1',\n #      'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '2ndFlrSF',\n  #     'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n   #    'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr',\n    #   'Fireplaces', 'GarageYrBlt', 'GarageCars', 'WoodDeckSF',\n     #  'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea']\n#skewed_features = train[cols].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\n#print(\"Skewed features :\\n\")\n\n#skewness = pd.DataFrame()\n#skewness['Skew_value'] = skewed_features\n#skewness","6f0a4293":"#features with skewness greater than \n#skewed_features = ['PoolArea', '3SsnPorch', 'LowQualFinSF', 'BsmtHalfBath',\n#                   'ScreenPorch', 'BsmtFinSF2', 'KitchenAbvGr', 'EnclosedPorch', \n#                   'FullBath', 'OverallQual', 'LotFrontage', 'GarageCars', \n#                  'BsmtUnfSF', 'BedroomAbvGr', 'TotalBsmtSF']\n#lamb_da = 0.25\n#for feature in skewed_features:\n#    train[feature] = boxcox1p(train[feature], lamb_da)\n#    test[feature] = boxcox1p(train[feature], lamb_da)","26a9d236":"X = train.drop(['SalePrice'], axis = 1)\ncol_to_use = list(X.columns)\n\ny = train['SalePrice']","d2f7d16c":"print(X.shape)\nprint(y.shape)","7ea7a762":"num_cols = [col for col in col_to_use if train[col].dtype in ['int64', 'float64']]\ncat_cols = [col for col in col_to_use if train[col].dtype == 'object']","860fc4c3":"num_cols","08f3ad5e":"cat_cols","888edad0":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler","3fa77330":"num_processor = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('scaler', MinMaxScaler())\n])","e71969ee":"cat_processor = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy = 'most_frequent')),\n    ('ohe', OneHotEncoder(handle_unknown = 'ignore', sparse = False))\n])","576969f3":"preprocessor = ColumnTransformer([\n    ('num', num_processor, num_cols),\n    ('cat', cat_processor, cat_cols)\n])","b8e79df9":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","265e7823":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)","56f439d8":"print(X_train.shape)\nprint(y_train.shape)","b49f635a":"print(X_test.shape)\nprint(y_test.shape)","23cf7a59":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor","ffd023bc":"model = LinearRegression()","9d22f8d6":"model1 = Lasso()","013081d9":"model2 = Ridge()","46613eee":"model3 = DecisionTreeRegressor(max_leaf_nodes = 30, random_state = 42)","f39cc1bf":"model4 = RandomForestRegressor(n_estimators = 500, random_state = 42)","b8028dd1":"model5 = XGBRegressor(n_estimators = 1000, learning_rate = 0.05, random_state = 42)","78f4035c":"model6 = GradientBoostingRegressor(learning_rate = 0.1, n_estimators = 165, random_state=42)","284312ea":"model7 = CatBoostRegressor(random_state=0,verbose=False, depth = 5, early_stopping_rounds=300, learning_rate= 0.1)","bb948725":"def build_model(model):\n    clf = Pipeline(steps = [\n        ('preprocessor', preprocessor),\n        ('model', model)\n    ])\n    clf.fit(X_train, y_train)\n    print(model)\n    print(\"Train set score:\", clf.score(X_train, y_train))\n    print(\"Test set score:\", clf.score(X_test, y_test))\n    print(\"\\n\")\n    print(\"Train set rmse:\", mean_squared_error(y_train, clf.predict(X_train),squared=False))\n    print(\"Test set rmse:\", mean_squared_error(y_test, clf.predict(X_test),squared=False))\n    print(\"\\n\")\n    predictions = clf.predict(test)\n    return predictions","02b24cc9":"predictions = build_model(model7)","a7262bd1":"predictions","abf4d626":"predictions = np.exp(predictions)","69c0ec24":"predictions","8d563cfc":"output = pd.DataFrame({'Id': Id, 'SalePrice': predictions})\noutput.to_csv('submission.csv', index = False)","3d94656f":"sub = pd.read_csv('.\/submission.csv')\nsub","9b4d0d0d":"### Read Testing Dataset","7cf5cec3":"### Feature Transformation - 'SalePrice'","769ef0ef":"### Missing Data Handling - Training Dataset","77a2f991":"##### Observations: 'LotFrontage', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2','BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath','BsmtHalfBath', 'GarageYrBlt', 'GarageArea' are continuous data attributes","ac9b93a4":"### EDA","a1e27ec1":"### Missing Data Handling - Testing Dataset","be93cc9d":"### Model Building","fd43c926":"Many Attributes have Outliers","edff2df2":"##### Observation: 'LotFrontage', 'MasVnrArea', 'GarageYrBlt' may be continuous data attributes","1f824177":"### Read Training Dataset","9e134a7b":"### Filtering Highly Correlated Data","965b295f":"##### Observations:\n1. For 'LotFrontage' and 'GarageYrBlt', we can use both mean and Median to replace null values\n2. For 'MasVnrArea', we will use Mode to replace null values","db4f0a8a":"##### Observations:\n1. For {'LotFrontage', 'BsmtFinSF1', 'BsmtUnfSF', 'TotalBsmtSF', 'GarageYrBlt', 'GarageArea'}, we can use both mean and median to replace null values\n2. For {'MasVnrArea', 'BsmtFinSF2', 'BsmtFullBath','BsmtHalfBath'}, we use mode to replace null values","e83a40a8":"**Observation: {'1stFlrSF', 'GarageArea', 'TotRmsAbvGrd'} have correlation greater than 0.7. So, we will drop them except 'SalePrice' and ''GarageYrBlt'**","855ada6a":"**Observation: 'SalePrice' is Right-skewed**","49df6b36":"**Observation: {'MiscVal', 'MoSold','YrSold'} don't affect 'SalePrice'. So, we drop them**"}}