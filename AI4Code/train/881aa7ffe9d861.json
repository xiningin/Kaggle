{"cell_type":{"c9d847cd":"code","709a3e1b":"code","01ba9496":"code","d3b94ebf":"code","115cebf2":"code","58654a1c":"code","cedae6b5":"code","4807fb55":"code","b9917b06":"code","b5e6d11e":"code","75201c2e":"code","8d2c6590":"code","97f7ea9b":"code","4aa62999":"code","93a271d0":"code","c0ebd04a":"code","255ae0ee":"code","3f09fe92":"code","f50a4b93":"code","7b6a4842":"code","896542a7":"code","7d5834d3":"code","96a82a12":"code","b04ec5f1":"code","b3d2630f":"code","e83eb250":"code","7167ac5b":"code","81c93965":"code","f0e7bcc7":"code","abfcdc27":"code","6cc649dd":"code","a3055895":"code","142ceb4d":"code","b1ec7d40":"code","92effcc5":"code","c0e2cda1":"code","94f8f5c9":"code","4fb055ef":"markdown","5b838900":"markdown","f9e3eb1c":"markdown","3b7663e5":"markdown","9678f2dc":"markdown","86433a71":"markdown","9f5d768c":"markdown","1f924877":"markdown","c08c044c":"markdown","df5c9388":"markdown"},"source":{"c9d847cd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport plotly.express as px\nimport statsmodels.api as sm\n!pip install pmdarima\nfrom pmdarima.arima import auto_arima\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn import metrics","709a3e1b":"inventory = pd.read_csv('..\/input\/toy-sales\/inventory.csv')\nproducts = pd.read_csv('..\/input\/toy-sales\/products.csv')\nsales = pd.read_csv('..\/input\/toy-sales\/sales.csv')\nsales['Date'] = pd.to_datetime(sales['Date'])\nstores = pd.read_csv('..\/input\/toy-sales\/stores.csv')","01ba9496":"sales1 = pd.merge(sales, products, on='Product_ID')\nsales2 = pd.merge(sales1, stores, on='Store_ID')\n\nsales2['Product_Cost'] = sales2['Product_Cost'].str.replace('$', '')\nsales2['Product_Cost'] = sales2['Product_Cost'].str.replace(' ', '')\nsales2['Product_Price'] = sales2['Product_Price'].str.replace('$', '')\nsales2['Product_Price'] = sales2['Product_Price'].str.replace(' ', '')\n\nsales2['Product_Cost'] = sales2['Product_Cost'].astype(float)\nsales2['Product_Price'] = sales2['Product_Price'].astype(float)\n\nsales2['sales'] = sales2['Units'] * sales2['Product_Price']\nsales2['cost'] = sales2['Units'] * sales2['Product_Cost']\nsales2['Date'] = pd.to_datetime(sales2['Date'])\nsales2.head()","d3b94ebf":"sales2.info()","115cebf2":"sales2.groupby(['Store_City','Product_Category']).sum().unstack().plot(kind='barh',y='sales', stacked=True, figsize=(20, 10))\nplt.show()","58654a1c":"sales2.groupby(['Product_Category'])['sales'].sum().sort_values(ascending=False)","cedae6b5":"sales2.groupby(['Store_Name','Product_Category']).sum().unstack().plot(kind='barh',y='sales', stacked=True, figsize=(15, 15))\nplt.show()","4807fb55":"sales2.groupby(['Store_Location','Product_Category']).sum().unstack().plot(kind='bar',y='sales', stacked=True, figsize=(8, 8))\nplt.xticks(rotation=0)\nplt.show()","b9917b06":"sales2.groupby(['Product_Name','Store_Location']).sum().unstack().plot(kind='barh',y='sales', stacked=True, figsize=(8, 8))\nplt.xticks(rotation=0)\nplt.show()","b5e6d11e":"sales2.groupby('Store_City')['sales'].sum().sort_values(ascending=False).head(3)","75201c2e":"sales_city1 = sales2[sales2['Store_City'] == 'Cuidad de Mexico']\nplt.figure(figsize=(6,6))\nsales_city1.groupby(['Product_Name'])['sales'].sum().sort_values(ascending=False).head(5).plot(kind='barh')\nplt.xticks(rotation=0)\nplt.show()","8d2c6590":"sales_city2 = sales2[sales2['Store_City'] == 'Guadalajara']\nplt.figure(figsize=(6,6))\nsales_city2.groupby(['Product_Name'])['sales'].sum().sort_values(ascending=False).head(5).plot(kind='barh')\nplt.xticks(rotation=0)\nplt.show()","97f7ea9b":"sales_city3 = sales2[sales2['Store_City'] == 'Monterrey']\nplt.figure(figsize=(6,6))\nsales_city3.groupby(['Product_Name'])['sales'].sum().sort_values(ascending=False).head(5).plot(kind='barh')\nplt.xticks(rotation=0)\nplt.show()","4aa62999":"sales_downtown = sales2[sales2['Store_Location'] == 'Downtown']\nsales_downtown.head()","93a271d0":"plt.figure(figsize=(8,8))\nsales_downtown.groupby(['Product_Name'])['sales'].sum().sort_values(ascending=False).head(5).plot(kind='barh')\nplt.xticks(rotation=0)\nplt.show()","c0ebd04a":"sales2.groupby(['Product_Name'])['sales'].sum().sort_values(ascending=False).head(5)","255ae0ee":"sales_daily = sales2.groupby('Date').sales.sum()\nsales_daily_df = pd.DataFrame(sales_daily)\nsales_weekly_mean = sales_daily_df['sales'].resample('W').mean()\nsales_monthly_mean = sales_daily_df['sales'].resample('M').mean()","3f09fe92":"plt.figure(figsize=(30, 10))\nplt.plot(sales_daily, label='Daily')\nplt.plot(sales_weekly_mean, label='Weekly Mean')\nplt.plot(sales_monthly_mean, label='Monthly Mean')\nplt.legend()\nplt.show()","f50a4b93":"sales_daily.plot(style='k.', figsize=(30, 6))\nplt.show()","7b6a4842":"sales_monthly = sales2.groupby([sales2['Date'].dt.year.rename('year'), sales2['Date'].dt.to_period(\"M\").rename('month')])['sales'].sum().reset_index()\nsales_monthly['month'] = sales_monthly['month'].astype(str)\n\nplt.figure(figsize=(30, 6))\nplt.plot(sales_monthly['month'],sales_monthly['sales'], label='Monthly Sales')\nplt.legend()\n\nxcoords = ['2017-04', '2018-04','2017-02', '2018-02', '2017-08', '2018-08']\nfor xc in xcoords:\n    plt.axvline(x=xc, color='black', linestyle='--')\n    \n    \nplt.annotate('PATTERN-1', ('2017-03', 750000))\nplt.annotate('PATTERN-2', ('2017-06', 750000))\nplt.annotate('PATTERN-3', ('2017-10', 750000))\n\nplt.annotate('Similiar to PATTERN-1', ('2018-02', 700000))\nplt.annotate('Similiar to PATTERN-2', ('2018-05', 700000))\nplt.annotate('Possible PATTERN-3?', ('2018-08', 750000))\n\nplt.show()","896542a7":"sales_weekly = pd.DataFrame(sales2.groupby([sales2['Date'].dt.year.rename('year'), sales2['Date'].dt.to_period(\"W\").rename('week')])['sales'].sum().reset_index().drop('year', axis=1).set_index('week'))\nsales_weekly","7d5834d3":"arima_model=auto_arima(sales_weekly['sales'], start_p=1,d=1,start_q=1,\n                      max_p=5,max_q=5,max_d=5,m=12,\n                        start_P=0,D=1,start_Q=0,max_P=5,max_D=5,max_Q=5,\n                      seasonal=True,\n                       trace=True,\n                      error_action=\"ignore\",\n                      suppress_warnings=True,\n                      stepwise=True,n_fits=50)","96a82a12":"arima_model.summary()","b04ec5f1":"size=int(len(sales_weekly)*0.66)\nX_train,X_test=sales_weekly[0:size],sales_weekly[size:len(sales_weekly)]\n\nmodel=SARIMAX(sales_weekly['sales'],\n             order=(1,1,0),\n             seasonal_order=(0,1,1,12))\nresult=model.fit()\nresult.summary()","b3d2630f":"start_index=0\nend_index=len(X_train)-1\ntrain_prediction=result.predict(start_index,end_index)\n\nst_index=len(X_train)\ned_index=len(sales_weekly)-1\nprediction=result.predict(st_index,ed_index)","e83eb250":"plt.figure(figsize=(10, 6))\ntrain_prediction.plot(legend=True)\nX_train['sales'].plot(legend=True)","7167ac5b":"print('Absolute Error:', metrics.mean_absolute_error(X_train, train_prediction))\nprint('MSE:', metrics.mean_squared_error(X_train, train_prediction))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(X_train, train_prediction)))","81c93965":"plt.figure(figsize=(10, 4))\nprediction.plot(legend=True)\nX_test['sales'].plot(legend=True)","f0e7bcc7":"print('Absolute Error:', metrics.mean_absolute_error(X_test, prediction))\nprint('MSE:', metrics.mean_squared_error(X_test, prediction))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(X_test, prediction)))","abfcdc27":"forecast=result.predict(len(sales_weekly), (len(sales_weekly)-1)+56).rename('Forecast')\n\nplt.figure(figsize=(10,4))\n\nX_train['sales'].plot(label=\"Training\",color='green')\ntrain_prediction.plot(legend=True)\nX_test['sales'].plot(label=\"Test\",color='blue')\nprediction.plot(legend=True)\nforecast.plot(label=\"Forecast\",color=\"red\")\nplt.legend(loc=\"lower right\")","6cc649dd":"out_of_stock = pd.merge(inventory, products, on='Product_ID')\nout_of_stock = pd.merge(out_of_stock, stores, on='Store_ID')\nout_of_stock = out_of_stock[out_of_stock['Stock_On_Hand'] == 0]\nout_of_stock","a3055895":"sale_for_out = pd.DataFrame(sales2.groupby([sales2['Date'].dt.year.rename('year'), sales2['Date'].dt.to_period(\"M\").rename('month'), 'Product_Name', 'Store_Location'])['Units'].sum().reset_index())\nsale_for_out = sale_for_out[sale_for_out['month'] == '2018-09']\nsale_for_out","142ceb4d":"out_of_stock['Product_Cost'] = out_of_stock['Product_Cost'].str.replace('$', '')\nout_of_stock['Product_Cost'] = out_of_stock['Product_Cost'].str.replace(' ', '')\nout_of_stock['Product_Price'] = out_of_stock['Product_Price'].str.replace('$', '')\nout_of_stock['Product_Price'] = out_of_stock['Product_Price'].str.replace(' ', '')\n\nout_of_stock['Product_Cost'] = out_of_stock['Product_Cost'].astype(float)\nout_of_stock['Product_Price'] = out_of_stock['Product_Price'].astype(float)\n\nout_of_stock","b1ec7d40":"out_of_stock.info()","92effcc5":"sales_loss = pd.merge(out_of_stock, sale_for_out, on=['Product_Name', 'Store_Location'])\nsales_loss['loss'] = sales_loss['Units'] * (sales_loss['Product_Price']-sales_loss['Product_Cost'])\nsales_loss","c0e2cda1":"print('According to the last months data, The Loss from out of Stock Products for 1 month is', sales_loss['loss'].sum(), 'Dollars')","94f8f5c9":"in_stock = pd.merge(inventory, products, on='Product_ID')\nin_stock = pd.merge(in_stock, stores, on='Store_ID')\n\nin_stock['Product_Cost'] = in_stock['Product_Cost'].str.replace('$', '')\nin_stock['Product_Cost'] = in_stock['Product_Cost'].str.replace(' ', '')\nin_stock['Product_Price'] = in_stock['Product_Price'].str.replace('$', '')\nin_stock['Product_Price'] = in_stock['Product_Price'].str.replace(' ', '')\n\nin_stock['Product_Cost'] = in_stock['Product_Cost'].astype(float)\nin_stock['Product_Price'] = in_stock['Product_Price'].astype(float)\n\nin_stock['Total']= in_stock['Product_Price'] * in_stock['Stock_On_Hand']\nprint('According to the inventory data, Total money tied up in inventory at the toy stores is', in_stock['Total'].sum(), 'Dollars') ","4fb055ef":"# Mexico Toy Sales","5b838900":"**Sales Graph over period in the given Datasets**","f9e3eb1c":"# Possible Pattern","3b7663e5":"# Inventory","9678f2dc":"# Building a Model","86433a71":"Even though top location is Downtown, first two cities with the biggest sales are from residential areas\n","9f5d768c":"# TOP Location","1f924877":"# TOP 3 Cities","c08c044c":"Best seller is Lego Bricks from Toys category, which is also the top category. Now lets see if it is true for top 3 cities","df5c9388":"# EDA"}}