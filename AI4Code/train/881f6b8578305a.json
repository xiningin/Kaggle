{"cell_type":{"38c0dd79":"code","f5557e2a":"code","068202c6":"code","61f17ef0":"code","8fb056dd":"code","33ed4120":"code","ca3817b0":"code","6629b01a":"code","d80845b3":"code","3a498edd":"code","9508c6e0":"code","b21ab199":"code","839d78be":"code","26af9077":"code","1e8b11ef":"code","9d46fc62":"code","682f2b84":"code","082070e6":"code","10ffef30":"code","4451e5fd":"code","9a562cc6":"code","782b8641":"code","a5edc4f0":"code","c8383d0c":"markdown","13a18c0a":"markdown","a16930df":"markdown","5d5375bc":"markdown","9e9ca3e4":"markdown","e65aec91":"markdown","cc0c8b28":"markdown","d8b1e7b8":"markdown","e78773da":"markdown","7c633526":"markdown","45163874":"markdown","f55f1254":"markdown","89ff8bc3":"markdown","d12b8107":"markdown","a6256358":"markdown","e8cd17c9":"markdown","3e0a95b9":"markdown"},"source":{"38c0dd79":"import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport statistics as s\nimport nltk as n\nfrom nltk.corpus import stopwords","f5557e2a":"df1= pd.read_csv(\"..\/input\/industrial-safety-and-health-analytics-database\/IHMStefanini_industrial_safety_and_health_database.csv\")\ndf2= pd.read_csv(\"..\/input\/industrial-safety-and-health-analytics-database\/IHMStefanini_industrial_safety_and_health_database_with_accidents_description.csv\") ","068202c6":"#Selectionner la colonne voulue:\nindustry_sector =df2['Industry Sector']\nindustry_sector_list=[]\n\n#Collenction des attribut de la colonne voulue dans un liste pour l'utiliser en suite:\nfor i in industry_sector:\n    if i in industry_sector_list:\n        None\n    else:\n        industry_sector_list.append(i)\n        \nprint(industry_sector_list)\n","61f17ef0":"#graphe representant la portion des accidents par pays:\n\n#Grouper le dataset en factions des pays:\n#Le reset_index nous permettera d'utiliser la colonne de trie afin de l'utiliser pour notre plot: \ntemp=df2.groupby('Countries').count().reset_index()\n\n#Tracer le diagrammes en barre des nombre accidents par pays:\nplt.figure(figsize=(10,5))\nplt.bar(temp['Countries'],temp['Data'])\nplt.title('Graphe representant la portion des accidents par pays')\nplt.xlabel('Countries')\nplt.ylabel('Accidents')\nplt.show()\n\n\n","8fb056dd":"#graphe representant la portion des accidents par secteur\n\n#On trie les valeurs suivant la colonne 'Data' afin d'avoir la bonne repr\u00e9sentation d'apres les listes des labels utilis\u00e9es:\nsecteur= df2.groupby('Industry Sector').count().sort_values(by=['Data'],ascending = False).reset_index()\n\n#Represnetation par diagramme des secteur\nplt.pie(secteur['Data'], labels= secteur['Industry Sector'], autopct='%1.1f%%', shadow = True, explode = [0.1, 0.1, 0.1], radius = 1) \nplt.title(\"Graphe representant la portion des accidents par secteur\")","33ed4120":"#graphe representant la proportion des accidents par genre :\n\ngenre=df2.groupby('Genre').count().sort_values(by=['Data'], ascending = False).reset_index()\n\n#Representation en diagramme des secteurs:\nplt.pie(genre['Data'], labels = genre['Genre'], autopct='%1.1f%%', shadow = True)\nplt.title('graphe representant la proportion des accidents par genre')\n\nprint(\"Le nombre d'accident subis par les males = \",genre.loc[0,'Data'])\nprint(\"Le nombre d'accident subis par les femelles = \",genre.loc[1,'Data'])","ca3817b0":"#Graphe representant la r\u00e9partition d'accident par Local\nlocal = df2.groupby('Local').count().sort_values(by=['Data'], ascending = False).reset_index()\n\n\n#Extraire les nombres des locaux\nlocals = []\nfor x in local['Local']:\n    locals.append(x[7:])\n#Tracer le graphe en barres: \nplt.figure(figsize=(10,5))\nplt.bar(locals,local['Data'])\nplt.xlabel(\"Local\")\nplt.ylabel(\"Accident\")\nplt.title(\"Graphe representant la r\u00e9partition d'accident par Local\")\nplt.show()\n\nprint(\"La moyenne d'accident par local = \",s.mean(local['Data']))","6629b01a":"df2.head()","d80845b3":"risk=df2.groupby('Critical Risk').count().sort_values(by=['Data'], ascending = False).reset_index()\n\n#Representation en diagramme secteur:\nplt.figure(figsize=(20,10))\nplt.bar(risk['Critical Risk'],risk['Data'])\nplt.xticks(rotation = 'vertical')","3a498edd":"interi=df2.groupby('Employee or Third Party').count().sort_values(by = ['Data'], ascending = False).reset_index()\nplt.figure(figsize=(10,5))\nplt.pie(interi['Data'], labels =interi['Employee or Third Party'], autopct='%1.1f%%', shadow = True, explode=[0.1, 0.1, 0])\nplt.title('Repartition des accidents subis par des employees ou des interimaires')","9508c6e0":"#Extraction des donn\u00e9es n\u00e9cessaires pour tracer le graphe en baton\n\naccident_level= df2.groupby('Accident Level').count().sort_values(by=['Data'],ascending = False).reset_index()\n\npot_accident_level= df2.groupby('Potential Accident Level').count().sort_values(by = ['Data'], ascending = False).reset_index()\n\ndf_al=accident_level.loc[:,'Accident Level': 'Data']\ndf_pal = pot_accident_level.loc[:, 'Potential Accident Level': 'Data']\n\ndf_al = df_al.sort_values(by=['Accident Level'], ascending= True).reset_index()\ndf_pal= df_pal.sort_values(by=['Potential Accident Level'], ascending= True).reset_index()\n\n\n#Digramme en batons (groupe):\n\nl_bar = 0.2\n\nbar1 = df_al['Data']\nbar2 = df_pal['Data']\n\n\n#Positions des bars sur l'axe des X:\n\nr1=np.arange(len(bar1) +1)\nr2=[(x + l_bar) for x in r1]\nr11=np.arange(len(bar1))\n#Plot:\nplt.figure(figsize=(10,5))\nplt.bar(r11, bar1,color='#7f6d5f', width=l_bar, edgecolor='white', label=\"Niveau D'accident\")\n\nplt.bar(r2, bar2,color='#2d7f5e', width=l_bar, edgecolor='white', label=\"Niveau Potentiel D'accident\")\n\nplt.xlabel(\"Niveau D'accident\")\nplt.xticks([x for x in range(len(bar1))],['I','II','III','IV','V'])\nplt.ylabel(\"Reccurence D'accident\")\nplt.legend()\nplt.title(\"Graphe en Baton representant la recurrence des accidents selon le niveau d'accident enregistr\u00e9 et le niveau potentiel d'accident dans un secteur\")","b21ab199":"#Reccurence des accidents par mois et l'ann\u00e9e :\n\n#Ann\u00e9e\ndf2['Ann\u00e9e']=df2['Data'].str[:4]\n#Mois:\ndf2['Mois'] = df2['Data'].str[5:7]\ndf2.head()\n\n#On va essayer de compoarer la r\u00e9ccurence d'accidents pendant chaque mois entre 2016 et 2017 :\n\n        #on commence par l'annee 2016\nannee_2016=df2.loc[df2['Ann\u00e9e']=='2016'].groupby('Mois').count().reset_index()\n        #On passe a lanne 2017\nannee_2017=df2.loc[df2['Ann\u00e9e']=='2017'].groupby('Mois').count().reset_index()\n\n\n#Diagramme en baton pour comparer les 7 mois entre 2016 et 2017:\n\nl_bar = 0.2\n\nbar1 = annee_2016['Data'][0:7]\nbar2 = annee_2017['Data'][0:7]\n\n\n#Positions des bars sur l'axe des X:\n\nr1=np.arange(len(bar1))\nr2=[(x + l_bar) for x in r1]\nr11=np.arange(len(bar1))\n#Plot:\nplt.figure(figsize=(10,5))\nplt.bar(r11, bar1,color='#7f6d5f', width=l_bar, edgecolor='white', label=\"2016\")\n\nplt.bar(r2, bar2,color='#2d7f5e', width=l_bar, edgecolor='white', label=\"2017\")\n\nplt.xlabel(\"Mois\")\nplt.xticks([x for x in range(len(bar1))],[i for i in range(1,8)])\nplt.ylabel(\"Reccurence D'accident\")\nplt.legend()\nplt.title(\"Graphe en Baton representant la recurrence des accidents selon les mois 1 jusqu au mois 7 entre 2016 et 2017.\")","839d78be":"#on trace le graphe des 19 mois :\n\nmerge_mois =pd.concat([annee_2016['Data'],annee_2017['Data']],axis =0)\nplt.figure(figsize=(10,5))\nplt.bar([x for x in range(1,20)],merge_mois)\n\nplt.xlabel('Mois')\nplt.ylabel(\"Nombre D'accidents\")\nplt.xticks([x for x in range (1,20)], [x for x in range(1,20)])\nplt.show()\nprint(\"La moyenne des accidents par mois pour l'ann\u00e9e 2016 = \",s.mean(annee_2016['Data']))\nprint(\"La moyenne des accident pour les 7 premier mois de 2016 = \",s.mean(annee_2016['Data'][:7]),\"\\nLa moyenne des accidens pour les 7 premiers mois de 2017 = \",s.mean(annee_2017['Data']))","26af9077":"# On selectionne les colonnes necessaires :\nsec_genre = df2.loc[:,'Industry Sector': 'Genre']\nsec_genre.drop(columns =['Accident Level','Potential Accident Level'],inplace = True)\n\n\nsec_genre=sec_genre.groupby(['Genre','Industry Sector'])['Industry Sector'].count().unstack().reset_index()\n\nsec_genre.head()\n\n\n#pLot\nl=0.2\n\nmin_g=[x for x in range(2)]\noth_g=[x+l for x in range(2)]\nmet_g=[x+2*l for x in range(2)]\nplt.figure(figsize=(10,5))\nplt.bar(min_g,sec_genre['Mining'],color='blue', width=l, edgecolor='white', label=\"Mining\")\nplt.bar(met_g,sec_genre['Metals'],color='green', width=l, edgecolor='white', label=\"Metal\")\nplt.bar(oth_g,sec_genre['Others'],color='Black', width=l, edgecolor='white', label=\"Others\")\n\nplt.legend()\nplt.title('Proportion des accidents (males\/femelles) par secteur')\nplt.xticks([x\/10 for x in range(2,13,10)],['Femelle','Male'])","1e8b11ef":"lev_mal=df2.loc[:,'Accident Level':'Genre']\nlev_mal.drop(columns = 'Potential Accident Level', inplace = True)\n\n#lev_mal=lev_mal.groupby(['Genre'])\n\nlev_mal = lev_mal.groupby(['Accident Level','Genre'])['Genre'].count().unstack().reset_index()\n\n#Les statistiques :\n\nprint(\"********************************* Le nombre total des accidents subis par les hommes =  \",sum(lev_mal['Male']),\" *********************\\n\")\ni = 0\nfor i in range(len(lev_mal['Male'])):\n    print(\"Le nombre total des accidents de niveaux \",lev_mal['Accident Level'][i],\" subis par les hommes =  \",lev_mal['Male'][i])\n\nplt.bar(lev_mal['Accident Level'],lev_mal['Male'],color = 'Blue',label = 'Male')\nplt.title(\"Le nombre d'accidents subis par les males par secteur \")\n\n#Supprimer les lignes ayant un manque d'info pour les femelles :\nlev_fem=lev_mal['Female'].dropna()\nlev_fem\nprint(\"\\n******************************** Le nombre total des accidents subis par les femmes =  \",sum(lev_fem),' ***********************\\n')\ni = 0\nfor i in range(len(lev_fem)):\n    print(\"Le nombre total des accidents de niveaux \",lev_mal['Accident Level'][i],\" subis par les femmes =  \",lev_fem[i])\n\nplt.bar(lev_mal['Accident Level'],lev_mal['Female'],color = 'red', label = 'Female')\nplt.title(\"Le nombre d'accidents subis par les females par secteur\")\nplt.legend()\n    \n","9d46fc62":"#Selections des jours :\njours = ['Vendredi', 'Samedi','Dimanche','Lundi','Mardi','Mercredi','Jeudi']\ndf2['Jour']=df2['Data'].str[8:10]\n\nj=0\nfor i in range(0,len(df2)):\n    #print(df2['Jour'])\n    df2.loc[i,['Jour']]=jours[j]\n    j=j+1\n    if(j>6):\n        j=0\n#Grouper par les jours :\nsecteurs = ['I','II','III','IV','V']\ndf_jours = pd.concat([df2['Accident Level'],df2['Jour']],axis = 1)\n\n\nfor day in jours :\n    tempp =df_jours.loc[df2['Jour']== day].sort_values(by='Accident Level')\n    plt.figure(figsize=(10,5))\n    plt.bar([x for x in range(len(tempp['Accident Level'].value_counts()))],tempp['Accident Level'].value_counts())\n    plt.xticks([x for x in range(len(tempp['Accident Level'].value_counts()))],secteurs[0:len(tempp['Accident Level'].value_counts())])\n    plt.xlabel('Secteurs')\n    plt.ylabel(\"R\u00e9currence D'accident\")\n    print(\"Graphe representant la r\u00e9currence d'accidents par secteur pour le\",day)\n    plt.show()\n    print(tempp['Accident Level'].describe(),'\\n')\n","682f2b84":"n.download('punkt')","082070e6":"import nltk\nnltk.download('stopwords')","10ffef30":"print(stopwords)","4451e5fd":"secc = ['I','II','III','IV','V']\ntext = ''\nfor e in secc:\n    #print(e)\n    acc = df2.loc[:,['Accident Level','Description']].loc[df2['Accident Level'] == e]\n    #print ('********************************************* Secteur : ',e,'*****************************************\\n')\n    for i in acc['Description']:\n        text = text + ' \\n' + i \n        #print(i,'\\n')\n\n#classer les mots de la description :\ntokens = n.word_tokenize(text.lower())\n\n#filtrer les mots usuels \"stopwords\" de notre token :\n\nstop_words = set(stopwords.words('english'))\n#ajouter les ponctuations:\nstop_words.update(['.',',','the','of','and',\"'\",')','(','-'])\nfiltred_tokens = [x for x in tokens if  not x  in stop_words]\n\noccurence_mots = n.FreqDist(filtred_tokens)\nplt.figure(figsize=(20,10))\nplt.title(\"Graphe representant la recurrence de mots cl\u00e9s de la description d'accidents\")\noccurence_mots.plot(60,cumulative = False)\nplt.show()\nplt.savefig(\"figure.png\")","9a562cc6":"from nltk.collocations import BigramCollocationFinder\nfrom nltk.metrics import BigramAssocMeasures\n\n\n\nbi_temp = BigramCollocationFinder.from_words(filtred_tokens)\nbi_temp.nbest(BigramAssocMeasures.likelihood_ratio,100)","782b8641":"from nltk.collocations import TrigramCollocationFinder\nfrom nltk.metrics import TrigramAssocMeasures\n\n\n\nbi_temp = TrigramCollocationFinder.from_words([x for x in filtred_tokens if not x in ['accident']])\ntri = bi_temp.nbest(TrigramAssocMeasures.likelihood_ratio,100)\n\ntri_dist = n.FreqDist(tri)\n#plt.figure(figsize=(20,10))\n#tri.plot(100,cumulative = False)\ntri","a5edc4f0":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split,cross_val_score,validation_curve\nfrom sklearn.metrics import accuracy_score\nimport joblib\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Ajouter les differentes Colonnes pour am\u00e9liorer de plus l'entrainement du model :\ndf2['Pays']=df2['Countries'].str[-1]\nX=pd.concat([df2['Genre'],df2['Accident Level'],df2['Potential Accident Level']],axis = 1)\n\n\n#Genre to int:\n    \ni=0\nfor x in X['Genre']:\n    if X['Genre'][i] == 'Male':\n        X['Genre'][i] =1\n    else:\n        X['Genre'][i]=2\n    i=i+1\n    \n#Accident level to int:\n\ni=0\nfor x in X['Accident Level']:\n    if X['Accident Level'][i] == 'I':\n        X['Accident Level'][i] =1\n    if X['Accident Level'][i] == 'II':\n        X['Accident Level'][i] =2\n    if X['Accident Level'][i] == 'III':\n        X['Accident Level'][i] =3\n    if X['Accident Level'][i] == 'IV':\n        X['Accident Level'][i] =4\n    if X['Accident Level'][i] == 'V':\n        X['Accident Level'][i] =5\n    i=i+1\n\n#Potential Accident Level to int:\ni=0\nfor x in X['Potential Accident Level']:\n    if X['Potential Accident Level'][i] == 'I':\n        X['Potential Accident Level'][i] =1\n    if X['Potential Accident Level'][i] == 'II':\n        X['Potential Accident Level'][i] =2\n    if X['Potential Accident Level'][i] == 'III':\n        X['Potential Accident Level'][i] =3\n    if X['Potential Accident Level'][i] == 'IV':\n        X['Potential Accident Level'][i] =4\n    if X['Potential Accident Level'][i] == 'V':\n        X['Potential Accident Level'][i] =5\n    if X['Potential Accident Level'][i] == 'VI':\n        X['Potential Accident Level'][i] =6\n    i=i+1\n#Local to int :\ni=0 \n# for x in X['Industry Sector']:\n#     if X['Industry Sector'][i]=='Mining':\n#         X['Industry Sector'][i]=1\n#     if X['Industry Sector'][i]=='Metals':\n#         X['Industry Sector'][i]=2\n#     if X['Industry Sector'][i]=='Others':\n#         X['Industry Sector'][i]=3\n#     i=i+1\n    \n\nY=X['Accident Level']\n\nX=X.drop(columns='Accident Level')\n\nY=Y.astype('int')\n\n#entrainement et test du model :\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.1)\n#model = DecisionTreeClassifier()\n#model.fit(X_train,Y_train)\n\n# prediction = model.predict(X_test)\n# score= accuracy_score(Y_test,prediction)\n# score\nmodel = KNeighborsClassifier()\ntrain_val, val_score= validation_curve(model,X_train,Y_train,'n_neighbors',np.arange(1,50),cv=5)\nplt.plot(np.arange(1,50),val_score.mean(axis=1))\n#cross_val_score(KNeighborsClassifier(50),X_train,Y_train,cv=5,scoring='accuracy')\nmodel.fit(X_train,Y_train)\nprediction=model.predict(X_test)\nscore=accuracy_score(Y_test,prediction)\nprint(\"score = \",score)","c8383d0c":"# Le niveau d'accidents subis par les males:","13a18c0a":"# Reccurence d'accidents par jours :","a16930df":"#persistence\njoblib.dump(model,'model_acc.joblib')\n\nmodel = joblib.load('model_acc.joblib')\n#predictions = model.predict(X_test)\n#score= accuracy_score(Y_test,predictions)\n#score\n\n\n#conversion des output en Str:\ntemp =[]\nfor x in sorted(Y.unique()):\n    temp.append(str(x))\ntree.export_graphviz(model, out_file = \"Arbre d'accident.dot\",feature_names=['Genre','Niveau Potentiel d accident'],class_names=temp,label ='all',rounded =True,filled=True)","5d5375bc":"# Graphe representant la r\u00e9partition d'accident par Local","9e9ca3e4":"# ML","e65aec91":"# #Reccurence des accidents par mois et l'ann\u00e9e :","cc0c8b28":"# On considere maintenant la proportion des accidents (males\/femelles) par secteur","d8b1e7b8":"# Repartition des accidents subis par des employees ou des interimaires:","e78773da":"# Librairies","7c633526":"# Collectionner les diff\u00e8rents attributs des colonnes:","45163874":"# Graphe representant la portion des accidents par pays:","f55f1254":"# #Graphe representant la portion des accidents par secteur","89ff8bc3":"# Relation entre le niveau et la description d'accidents :","d12b8107":"# Y' a t-il une correlation en le niveau d'accident et le niveau potentiel d'accident?","a6256358":"# joindre les deux ficheirs .csv en un seul dataset","e8cd17c9":"# Graphe representant la proportion des accidents par genre :","3e0a95b9":"# Classification par risque critique: "}}