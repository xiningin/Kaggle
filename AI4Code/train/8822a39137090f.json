{"cell_type":{"6cc49ee5":"code","312ca84c":"code","8c9199d2":"code","029255fd":"code","9cfe3bcc":"code","f0cf6cc5":"code","594800b2":"code","34af0088":"code","86e8fb3a":"code","ef170387":"code","5dc96d62":"code","c6dca9d9":"code","c67bb8d7":"code","2caafd44":"code","f09c1546":"code","18417c6e":"code","0f6ec380":"code","1fc194e9":"code","243a2bc6":"code","4cbc5b00":"code","06d1edee":"code","d2779412":"code","dac69f84":"code","83b3a870":"code","c0bc340d":"code","df631e1f":"code","931ee284":"code","6fdfa488":"code","3a11ef3b":"code","42f97f6e":"code","35aea2d3":"code","db12adcb":"code","16196b77":"code","26ab22e6":"code","e36d527b":"code","d7cb6318":"code","c9146dc7":"code","11c611ee":"code","aa19c342":"code","c2211532":"code","dabfbcfc":"code","4269ee31":"code","20a07667":"code","d76de70a":"code","873a4ae6":"code","81e261de":"code","d9df598a":"code","e72ace97":"code","9a7826f0":"code","221ccdd5":"code","d2d15651":"code","cf8f34b0":"code","12b4dac0":"code","8a7d6b85":"code","da08f6a2":"code","afffbb6d":"code","51ba580a":"markdown","2986bf56":"markdown","827c6b21":"markdown","485a1a1e":"markdown","a1f8d638":"markdown","20eae43a":"markdown","f4774041":"markdown","5d8ed5c7":"markdown","515e4d37":"markdown","0f6dfe61":"markdown","67a5da49":"markdown","b0376298":"markdown","55148038":"markdown","36ac5434":"markdown","11c02995":"markdown","5e113d32":"markdown","d652a4cf":"markdown","af4669db":"markdown","288d817e":"markdown","c58796bb":"markdown","ca93af15":"markdown","9c773a6c":"markdown","1a1de554":"markdown","aa727290":"markdown","e7725f89":"markdown","11c542a5":"markdown","711872e8":"markdown","c82a979b":"markdown","b95ca7f6":"markdown","39d23820":"markdown","484edc60":"markdown","709e9bec":"markdown","0120c8fe":"markdown","fc25de17":"markdown","75118d82":"markdown","fe26f0e3":"markdown"},"source":{"6cc49ee5":"# loading packages\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport matplotlib.gridspec as gridspec\nfrom matplotlib.ticker import MaxNLocator\n\nimport math\nimport random\nimport os\nimport time\n\nfrom numpy import interp\n\nimport warnings\nwarnings.filterwarnings('ignore') ","312ca84c":"# styling\ncust_palt = [\n    '#111d5e', '#c70039', '#f37121', '#ffbd69', '#ffc93c'\n]\n\nplt.style.use('ggplot')","8c9199d2":"# seeding\n\ndef seed_all(seed):\n    \n    ''' A function to seed everything for getting stable results'''\n    \n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n\nseed = 42    \nseed_all(seed)","029255fd":"# reading csv file\ntrain = pd.read_csv('..\/input\/heart-disease-cleveland-uci\/heart_cleveland_upload.csv')","9cfe3bcc":"# taking random samples from data\ntrain.head(5)","f0cf6cc5":"print(\n    f'Train data has {train.shape[1]} features, {train.shape[0]} observations.\\nTrain features are:\\n{train.columns.tolist()}\\n'\n)","594800b2":"train.isnull().sum().sum()","34af0088":"# renaming columns\ntrain.columns = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved',\n       'exercise_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia', 'condition']\n\n","86e8fb3a":"train.nunique()","ef170387":"# renaming cateorical data\n\ntrain['sex'] = train['sex'].map({0:'female',1:'male'})\ntrain['chest_pain_type'] = train['chest_pain_type'].map({3:'asymptomatic', 1:'atypical_angina', 2:'non_anginal_pain', 0:'typical_angina'})\ntrain['fasting_blood_sugar'] = train['fasting_blood_sugar'].map({0:'less_than_120mg\/ml',1:'greater_than_120mg\/ml'})\ntrain['rest_ecg'] = train['rest_ecg'].map({0:'normal',1:'ST-T_wave_abnormality',2:'left_ventricular_hypertrophy'})\ntrain['exercise_induced_angina'] = train['exercise_induced_angina'].map({0:'no',1:'yes'})\ntrain['st_slope'] = train['st_slope'].map({0:'upsloping',1:'flat',2:'downsloping'})\ntrain['thalassemia'] = train['thalassemia'].map({1:'fixed_defect',0:'normal',2:'reversable_defect'})\ntrain['condition'] = train['condition'].map({0:'no_disease', 1:'has_disease'})\n","5dc96d62":"# masks for easier selection\ncategorical = [i for i in train.loc[:,train.nunique()<=10]]\ncontinuous = [i for i in train.loc[:,train.nunique()>=10]]","c6dca9d9":"def ctg_dist(df, cols, hue=None,rows=3, columns=3):\n    \n    '''A function for displaying cateorical distribution'''\n    \n    fig, axes = plt.subplots(rows, columns, figsize=(16, 12))\n    axes = axes.flatten()\n\n    for i, j in zip(df[cols].columns, axes):\n        sns.countplot(x=i,\n                    data=df,\n                    palette=cust_palt,\n                    hue=hue,\n                    ax=j,\n                    order=df[i].value_counts().index)\n        j.tick_params(labelrotation=10)\n        \n        total = float(len(df[i]))\n        \n        j.set_title(f'{str(i).capitalize()} Distribution')\n        \n        \n        for p in j.patches:\n            height = p.get_height()\n            j.text(p.get_x() + p.get_width() \/ 2.,\n                    height + 2,\n                    '{:1.2f}%'.format((height \/ total) * 100),\n                    ha='center')\n        \n        plt.tight_layout()","c67bb8d7":"ctg_dist(train, categorical)","2caafd44":"# Displaying numeric distribution\n\nfig = plt.figure(constrained_layout=True, figsize=(16, 12))\n\n\ngrid = gridspec.GridSpec(ncols=6, nrows=3, figure=fig)\n\nax1 = fig.add_subplot(grid[0, :2])\n\nax1.set_title('Trestbps Distribution')\n\nsns.distplot(train[continuous[1]],\n                 hist_kws={\n                 'rwidth': 0.85,\n                 'edgecolor': 'black',\n                 'alpha': 0.8},\n                 color=cust_palt[0])\n\nax15 = fig.add_subplot(grid[0, 2:3])\n\nax15.set_title('Trestbps')\n\nsns.boxplot(train[continuous[1]], orient='v', color=cust_palt[0])\n\nax2 = fig.add_subplot(grid[0, 3:5])\n\nax2.set_title('Chol Distribution')\n\nsns.distplot(train[continuous[2]],\n                 hist_kws={\n                 'rwidth': 0.85,\n                 'edgecolor': 'black',\n                 'alpha': 0.8},\n                 color=cust_palt[1])\n\nax25 = fig.add_subplot(grid[0, 5:])\n\nax25.set_title('Chol')\n\nsns.boxplot(train[continuous[2]], orient='v', color=cust_palt[1])\n\nax3 = fig.add_subplot(grid[1, :2])\n\nax3.set_title('Thalach Distribution')\n\nsns.distplot(train[continuous[3]],\n                 hist_kws={\n                 'rwidth': 0.85,\n                 'edgecolor': 'black',\n                 'alpha': 0.8},\n                 color=cust_palt[2])\n\nax35 = fig.add_subplot(grid[1, 2:3])\n\nax35.set_title('Thalach')\n\nsns.boxplot(train[continuous[3]], orient='v', color=cust_palt[2])\n\nax4 = fig.add_subplot(grid[1, 3:5])\n\nax4.set_title('Oldpeak Distribution')\n\nsns.distplot(train[continuous[4]],\n                 hist_kws={\n                 'rwidth': 0.85,\n                 'edgecolor': 'black',\n                 'alpha': 0.8},\n                 color=cust_palt[3])\n\nax45 = fig.add_subplot(grid[1, 5:])\n\nax45.set_title('Oldpeak')\n\nsns.boxplot(train[continuous[4]], orient='v', color=cust_palt[3])\n\nax5 = fig.add_subplot(grid[2, :4])\n\nax5.set_title('Age Distribution')\n\nsns.distplot(train[continuous[0]],\n                 hist_kws={\n                 'rwidth': 0.95,\n                 'edgecolor': 'black',\n                 'alpha': 0.8},\n                 color=cust_palt[4])\n\nax55 = fig.add_subplot(grid[2, 4:])\n\nax55.set_title('Age')\n\nsns.boxplot(train[continuous[0]], orient='h', color=cust_palt[4])\n\nplt.show()\n","f09c1546":"# categorical data vs condition\nctg_dist(train, categorical[:-1], 'condition', 4, 2)","18417c6e":"# Displaying numeric distribution vs condition\n\nfig = plt.figure(constrained_layout=True, figsize=(16, 12))\n\n\ngrid = gridspec.GridSpec(ncols=4, nrows=3, figure=fig)\n\nax1 = fig.add_subplot(grid[0, :2])\n\nax1.set_title('resting_blood_pressure Distribution')\n\nsns.boxplot(x='condition',\n                    y='resting_blood_pressure',\n                    data=train,\n                    palette=cust_palt[2:],\n                    ax=ax1)\nsns.swarmplot(x='condition',\n                    y='resting_blood_pressure',\n                    data=train,\n                    palette=cust_palt[:2],\n                    ax=ax1)\n\nax2 = fig.add_subplot(grid[0, 2:])\n\nax2.set_title('cholesterol Distribution')\n\nsns.boxplot(x='condition',\n                    y='cholesterol',\n                    data=train,\n                    palette=cust_palt[2:],\n                    ax=ax2)\nsns.swarmplot(x='condition',\n                    y='cholesterol',\n                    data=train,\n                    palette=cust_palt[:2],\n                    ax=ax2)\n\nax3 = fig.add_subplot(grid[1, :2])\n\nax3.set_title('max_heart_rate_achieved Distribution')\n\nsns.boxplot(x='condition',\n                    y='max_heart_rate_achieved',\n                    data=train,\n                    palette=cust_palt[2:],\n                    ax=ax3)\nsns.swarmplot(x='condition',\n                    y='max_heart_rate_achieved',\n                    data=train,\n                    palette=cust_palt[:2],\n                    ax=ax3)\n\nax4 = fig.add_subplot(grid[1, 2:])\n\nax4.set_title('st_depression Distribution')\n\nsns.boxplot(x='condition',\n                    y='st_depression',\n                    data=train,\n                    palette=cust_palt[2:],\n                    ax=ax4)\nsns.swarmplot(x='condition',\n                    y='st_depression',\n                    data=train,\n                    palette=cust_palt[:2],\n                    ax=ax4)\n\nax5 = fig.add_subplot(grid[2, :])\n\nax5.set_title('age Distribution')\n\nsns.boxplot(x='condition',\n                    y='age',\n                    data=train,\n                    palette=cust_palt[2:],\n                    ax=ax5)\nsns.swarmplot(x='condition',\n                    y='age',\n                    data=train,\n                    palette=cust_palt[:2],\n                    ax=ax5)\nplt.show()","0f6ec380":"# numeric data vs each other and condition\n\nplt.figure(figsize=(16, 10))\nsns.pairplot(train[['resting_blood_pressure','cholesterol','max_heart_rate_achieved','st_depression','age', 'condition']], hue='condition', palette=cust_palt,\n           markers=['o','D'], plot_kws=dict(s=25, alpha=0.75, ci=None)\n            )\n\nplt.show()","1fc194e9":"# 3d scatterplot of numeric data\n\nfig = px.scatter_3d(train, x='cholesterol', y='max_heart_rate_achieved', z='age', size='st_depression',\n              color='condition', opacity=0.8)\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\nfig.show()","243a2bc6":"def ctn_freq(df, cols, xaxi, hue=None,rows=4, columns=1):\n    \n    ''' A function for displaying numerical data frequency vs age and condition '''\n    \n    fig, axes = plt.subplots(rows, columns, figsize=(16, 12), sharex=True)\n    axes = axes.flatten()\n\n    for i, j in zip(df[cols].columns, axes):\n        sns.pointplot(x=xaxi,\n                      y=i,\n                    data=df,\n                    palette=cust_palt[:2],\n                    hue=hue,\n                    ax=j,ci=False)      \n        j.set_title(f'{str(i).capitalize()} vs. Age')\n\n        \n        plt.tight_layout()","4cbc5b00":"ctn_freq(train, ['st_depression','max_heart_rate_achieved','resting_blood_pressure','cholesterol'], 'age', hue='condition',rows=4, columns=1)","06d1edee":"# loadin data for corrmap\n\nheat_train = pd.read_csv('..\/input\/heart-disease-cleveland-uci\/heart_cleveland_upload.csv')","d2779412":"# corr heatmap between variables\n\nsns.set(font_scale=1.1)\ncorrelation_train = heat_train.corr()\nmask = np.triu(correlation_train.corr())\nplt.figure(figsize=(20, 12))\nsns.heatmap(correlation_train,\n            annot=True,\n            fmt='.3f',\n            cmap='Wistia',\n            linewidths=1,\n            cbar=True)\n\nplt.show()","dac69f84":"# top correlated variables vs condition\n\ncorrelations = heat_train.corrwith(heat_train['condition']).iloc[:-1].to_frame()\ncorrelations['Abs Corr'] = correlations[0].abs()\nsorted_correlations = correlations.sort_values('Abs Corr', ascending=False)['Abs Corr']\nfig, ax = plt.subplots(figsize=(12,12))\nsns.heatmap(sorted_correlations.to_frame()[sorted_correlations>=.35], cmap='Wistia', annot=True, vmin=-1, vmax=1,linewidths=1,fmt='.5f', ax=ax);","83b3a870":"# setting train and condition data\n\nX = train.drop('condition', axis=1)\ny = heat_train['condition']","c0bc340d":"# one hot encoding\nctg_df = pd.get_dummies(data=train[['sex', 'chest_pain_type', 'fasting_blood_sugar', 'rest_ecg', 'exercise_induced_angina', 'st_slope', 'num_major_vessels', 'thalassemia']])\nX.drop(['sex', 'chest_pain_type', 'fasting_blood_sugar', 'rest_ecg', 'exercise_induced_angina', 'st_slope', 'num_major_vessels', 'thalassemia'], axis=1, inplace=True)\nX = pd.concat([X, ctg_df], axis=1)","df631e1f":"# loading sklearn packages\n\nfrom sklearn.model_selection import cross_validate, KFold, learning_curve,  cross_val_score, RandomizedSearchCV, train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, IsolationForest\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.covariance import EllipticEnvelope\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import plot_confusion_matrix","931ee284":"# selecting some sklearn classifiers\n\ngradclass = GradientBoostingClassifier(random_state=seed)\n\nknclass = KNeighborsClassifier()\n\ndectree = DecisionTreeClassifier(random_state=seed)\n\nsvc = SVC()\n\nrandfclass = RandomForestClassifier(random_state=seed)\n\nadaclass = AdaBoostClassifier(random_state=seed)\n\nmlpclass = MLPClassifier(random_state=seed)\n\ngsclass = GaussianNB()","6fdfa488":"# setting 5 fold cv\n\ncv = KFold(5, shuffle=True, random_state=seed)\nclassifiers = [gradclass, knclass, dectree, svc, randfclass, adaclass, mlpclass, gsclass]","3a11ef3b":"def model_check(X, y, classifiers, cv):\n    \n    ''' A function for testing multiple classifiers and return several metrics. '''\n    \n    model_table = pd.DataFrame()\n\n    row_index = 0\n    for cls in classifiers:\n\n        MLA_name = cls.__class__.__name__\n        model_table.loc[row_index, 'Model Name'] = MLA_name\n        \n        cv_results = cross_validate(\n            cls,\n            X,\n            y,\n            cv=cv,\n            scoring=('accuracy','f1','roc_auc'),\n            return_train_score=True,\n            n_jobs=-1\n        )\n        model_table.loc[row_index, 'Train Roc\/AUC Mean'] = cv_results[\n            'train_roc_auc'].mean()\n        model_table.loc[row_index, 'Test Roc\/AUC Mean'] = cv_results[\n            'test_roc_auc'].mean()\n        model_table.loc[row_index, 'Test Roc\/AUC Std'] = cv_results['test_roc_auc'].std()\n        model_table.loc[row_index, 'Train Accuracy Mean'] = cv_results[\n            'train_accuracy'].mean()\n        model_table.loc[row_index, 'Test Accuracy Mean'] = cv_results[\n            'test_accuracy'].mean()\n        model_table.loc[row_index, 'Test Acc Std'] = cv_results['test_accuracy'].std()\n        model_table.loc[row_index, 'Train F1 Mean'] = cv_results[\n            'train_f1'].mean()\n        model_table.loc[row_index, 'Test F1 Mean'] = cv_results[\n            'test_f1'].mean()\n        model_table.loc[row_index, 'Test F1 Std'] = cv_results['test_f1'].std()\n        model_table.loc[row_index, 'Time'] = cv_results['fit_time'].mean()\n\n        row_index += 1        \n\n    model_table.sort_values(by=['Test F1 Mean'],\n                            ascending=False,\n                            inplace=True)\n\n    return model_table","42f97f6e":"raw_models = model_check(X, y, classifiers, cv)\ndisplay(raw_models)","35aea2d3":"def f_imp(classifiers, X, y, bins):\n    \n    ''' A function for displaying feature importances'''\n    \n    fig, axes = plt.subplots(1, 2, figsize=(20, 6))\n    axes = axes.flatten()\n\n    for ax, classifier in zip(axes, classifiers):\n\n        try:\n            classifier.fit(X, y)\n            feature_imp = pd.DataFrame(sorted(\n                zip(classifier.feature_importances_, X.columns)),\n                                       columns=['Value', 'Feature'])\n\n            sns.barplot(x=\"Value\",\n                        y=\"Feature\",\n                        data=feature_imp.sort_values(by=\"Value\",\n                                                     ascending=False),\n                        ax=ax,\n                        palette='plasma')\n            plt.title('Features')\n            plt.tight_layout()\n            ax.set(title=f'{classifier.__class__.__name__} Feature Impotances')\n            ax.xaxis.set_major_locator(MaxNLocator(nbins=bins))\n        except:\n            continue\n    plt.show()\n\n","db12adcb":"f_imp([randfclass,dectree], X, y, 6)","16196b77":"# applying isolation forest\n\niso = IsolationForest(contamination=0.1,random_state=seed)\nyhat = iso.fit_predict(X)\n\nmask = (yhat != -1)\n\nX_iso = X.loc[mask, :]\ny_iso= y[mask]","26ab22e6":"iso_models = model_check(X_iso, y_iso, classifiers, cv)\ndisplay(iso_models)","e36d527b":"# applying ellipticalenvelope\n\neli = EllipticEnvelope(contamination=0.1,assume_centered=True, random_state=seed)\nyhat = eli.fit_predict(X)\n\nmask = (yhat != -1)\n\nX_eli = X.loc[mask, :]\ny_eli= y[mask]","d7cb6318":"eli_models = model_check(X_eli, y_eli, classifiers, cv)\ndisplay(eli_models)","c9146dc7":"def kbin_cat(col, X, nbins=5):\n    \n    ''' A function for binning multiple numeric columns'''\n    \n    categorize = KBinsDiscretizer(n_bins = nbins, encode = 'onehot', strategy = 'kmeans')\n    cat = categorize.fit_transform(X[col].values.reshape(-1,1))\n    cat= pd.DataFrame(cat.toarray())\n    cat_n = [f'cat_{str(i)}' for i in range(nbins)]\n    cat.columns = [i.replace('cat',f'{str(col)}') for i in cat_n]\n    cat = cat.astype('int')\n    \n    return cat","11c611ee":"# applying kbins discretizer\nrt = ['age','resting_blood_pressure','cholesterol', 'max_heart_rate_achieved','st_depression']\nX_cat = X_eli\nfor i in rt:    \n    X_cat = X_cat.join(kbin_cat(i,X,5))\n    X_cat.drop(i, axis=1, inplace=True)","aa19c342":"binn_models = model_check(X_cat, y_eli, classifiers, cv)\ndisplay(binn_models)","c2211532":"def plot_learning_curve(classifiers,\n                        X,\n                        y,\n                        ylim=None,\n                        cv=None,\n                        n_jobs=None,\n                        train_sizes=np.linspace(.1, 1.0, 5)):\n    \n    ''' A function for displaying learning curvers fur multiple ml algorithms'''\n\n    fig, axes = plt.subplots(math.ceil(len(classifiers) \/ 2),\n                             2,\n                             figsize=(25, 50))\n    axes = axes.flatten()\n\n    for ax, classifier in zip(axes, classifiers):\n\n        ax.set_title(f'{classifier.__class__.__name__} Learning Curve')\n        if ylim is not None:\n            ax.set_ylim(*ylim)\n        ax.set_xlabel('Training examples')\n        ax.set_ylabel('Score')\n\n        train_sizes, train_scores, test_scores, fit_times, _ = \\\n            learning_curve(classifier, X, y, cv=cv, n_jobs=n_jobs,\n                           train_sizes=train_sizes,\n                           return_times=True, scoring='f1', random_state=seed\n                          )\n        train_scores_mean = np.mean(train_scores, axis=1)\n        train_scores_std = np.std(train_scores, axis=1)\n        test_scores_mean = np.mean(test_scores, axis=1)\n        test_scores_std = np.std(test_scores, axis=1)\n\n        # Plot learning curve\n\n        ax.fill_between(train_sizes,\n                        train_scores_mean - train_scores_std,\n                        train_scores_mean + train_scores_std,\n                        alpha=0.1,\n                        color='r')\n        ax.fill_between(train_sizes,\n                        test_scores_mean - test_scores_std,\n                        test_scores_mean + test_scores_std,\n                        alpha=0.1,\n                        color='g')\n        ax.plot(train_sizes,\n                train_scores_mean,\n                'o-',\n                color='r',\n                label='Training score')\n        ax.plot(train_sizes,\n                test_scores_mean,\n                'o-',\n                color='g',\n                label='Cross-validation score')\n        ax.legend(loc='best')\n        ax.yaxis.set_major_locator(MaxNLocator(nbins=24))\n\n    plt.show()","dabfbcfc":"# displaying learning curves\nplot_learning_curve(classifiers,\n                    X_cat,\n                    y_eli,\n                    ylim=None,\n                    cv=cv,\n                    n_jobs=-1,\n                    train_sizes=np.linspace(.1, 1.0, 10))","4269ee31":"# fine tuning models\nfor i in [randfclass,svc, adaclass]:\n    if i == svc:\n        parameters = {\n        'C': [1,3,9,27],\n        'tol': [1e-2, 1e-3, 1e-4],\n        'kernel': ['linear', 'rbf', 'sigmoid'],\n        'shrinking': [True, False]}\n    if i == randfclass:\n        parameters = {\n            'max_depth': [2, 3, 5],\n            'n_estimators': [50, 100, 150],\n            'criterion': ['gini', 'entropy'],\n            'bootstrap': [True, False],\n        }\n    if i == adaclass:\n        parameters = {\n            'base_estimator': [None, dectree],\n            'n_estimators': [50, 100, 150],\n            'algorithm': ['SAMME','SAMME.R'],\n            'learning_rate': [0.8,1,1.2],\n        }\n    \n    \n    def hyperparameter_tune(base_model, parameters, n_iter, cv, X, y):\n        \n        ''' A function for optimizing mutliple classifiers'''\n        \n        start_time = time.time()\n        optimal_model = RandomizedSearchCV(base_model,\n                                param_distributions=parameters,\n                                n_iter=n_iter,\n                                cv=cv,\n                                scoring = 'f1',\n                                n_jobs=-1,\n                                random_state=seed)\n\n        optimal_model.fit(X, y)    \n\n\n        scores = cross_val_score(optimal_model, X, y, cv=cv,n_jobs=-1, scoring='f1')\n        stop_time = time.time()\n\n        print('====================')\n        print(f'Updated Parameters for {str(base_model.__class__.__name__)}')\n        print('Cross Val Mean: {:.3f}, Cross Val Stdev: {:.3f}'.format(scores.mean(), scores.std()))\n        print('Best Score: {:.3f}'.format(optimal_model.best_score_))\n        print('Best Parameters: {}'.format(optimal_model.best_params_))\n        print('Elapsed Time:', time.strftime('%H:%M:%S', time.gmtime(stop_time - start_time)))\n        print('====================')\n\n\n        return optimal_model.best_params_, optimal_model.best_score_\n    best_params, best_score = hyperparameter_tune(i, parameters, 20, cv, X_cat, y_eli)\n    i.set_params(**best_params)","20a07667":"binn_models = model_check(X_cat, y_eli, classifiers, cv)\ndisplay(binn_models)","d76de70a":"pca = PCA()\npca.fit(X_cat)\npca_samples = pca.transform(X_cat)","873a4ae6":"# explaining variance ratio\n\nfig, ax = plt.subplots(figsize=(14, 5))\nplt.plot(range(X_cat.shape[1]), pca.explained_variance_ratio_.cumsum(), linestyle='--', drawstyle='steps-mid', color=cust_palt[0],\n         label='Cumulative Explained Variance')\nsns.barplot(np.arange(1,X_cat.shape[1]+1), pca.explained_variance_ratio_, alpha=0.85, color=cust_palt[1],\n            label='Individual Explained Variance')\n\nplt.ylabel('Explained Variance Ratio', fontsize = 14)\nplt.xlabel('Number of Principal Components', fontsize = 14)\nplt.legend(loc='center right', fontsize = 13);","81e261de":"pca = PCA(5)\npca.fit(X_cat)\npca_samples = pca.transform(X_cat)","d9df598a":"# displaying 50% of the variance\n\ntotal_var = pca.explained_variance_ratio_.sum() * 100\n\nlabels = {str(i): f'PC {i+1}' for i in range(5)}\nlabels['color'] = 'condition'\n\nfig = px.scatter_matrix(\n    pca_samples,\n    color=y_eli,\n    dimensions=range(5),\n    labels=labels,\n    title=f'Total Explained Variance: {total_var:.2f}%',\n    opacity=0.8,\n    color_continuous_scale=cust_palt,\n)\nfig.update_traces(diagonal_visible=False)\nfig.show()","e72ace97":"pca = PCA(3)  # project from 46 to 3 dimensions\nmatrix_3d = pca.fit_transform(X_cat)","9a7826f0":"# displaying 3 components\ntotal_var = pca.explained_variance_ratio_.sum() * 100\nfig = px.scatter_3d(x=matrix_3d[:, 0], y=matrix_3d[:, 1], z=matrix_3d[:, 2], color=y_eli, opacity=0.8,color_continuous_scale=cust_palt,\n                    title=f'Total Explained Variance: {total_var:.2f}%',\n                    labels = {'x':'Component 1', 'y':'Component 2','z':'Component 3'})\nfig.show()","221ccdd5":"pca = PCA(2)  # project from 46 to 2 dimensions\nmatrix_2d = pca.fit_transform(X_cat)","d2d15651":"# displaying 2 pca\ntotal_var = pca.explained_variance_ratio_.sum() * 100\nfig= plt.figure(figsize=(20, 12))\nax =sns.scatterplot(matrix_2d[:, 0], matrix_2d[:, 1],palette=cust_palt[:2],\n            hue=y_eli, alpha=0.9, )\nax.set_title(f'Total Explained Variance: {total_var:.2f}%')\nplt.xlabel('PCA 1')\nplt.ylabel('PCA 2')\n\nplt.show()","cf8f34b0":"model_check(matrix_2d, y_eli, classifiers, cv)","12b4dac0":"def prob_reg(X, y):\n    \n    ''' A function for displaying decision regions'''\n    \n    from matplotlib.colors import ListedColormap\n    figure = plt.figure(figsize=(20, 40))\n    h = .02\n    i = 1\n\n    # preprocess dataset, split into training and test part\n    X_train, X_test, y_train, y_test = \\\n        train_test_split(X, y, test_size=.2, random_state=42)\n\n    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\n    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                         np.arange(y_min, y_max, h))\n\n    # Just plot the dataset first\n    cm = plt.cm.RdYlGn\n    cm_bright = ListedColormap(['#e00d14', '#3ca02c'])\n    ax = plt.subplot(5, 2, i)\n\n    # Iterate over classifiers\n    for clf in classifiers:\n        ax = plt.subplot(math.ceil(len(classifiers) \/ 2), 2, i)\n        clf.fit(X_train, y_train)\n        score = clf.score(X_test, y_test)\n\n        # Plot the decision boundary. For that, we will assign a color to each\n        # point in the mesh [x_min, x_max]x[y_min, y_max].\n        if hasattr(clf, 'decision_function'):\n            Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n        else:\n            Z = clf.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]\n\n        # Put the result into a color plot\n        Z = Z.reshape(xx.shape)\n        ax.contourf(xx, yy, Z, cmap=cm, alpha=.8)\n\n        # Plot the training points\n        g = ax.scatter(X_train[:, 0],\n                       X_train[:, 1],\n                       c=y_train,\n                       cmap=cm_bright,\n                       edgecolors='k')\n        # Plot the testing points\n        ax.scatter(X_test[:, 0],\n                   X_test[:, 1],\n                   c=y_test,\n                   cmap=cm_bright,\n                   edgecolors='k',\n                   alpha=0.6)\n\n        ax.set_xlim(xx.min(), xx.max())\n        ax.set_ylim(yy.min(), yy.max())\n\n        ax.set_title(clf.__class__.__name__)\n\n        ax.set_xlabel('PCA 1')\n        ax.set_ylabel('PCA 2')\n        plt.legend(handles=g.legend_elements()[0],\n                   labels=['No Disease', 'Has Disease'],\n                   framealpha=0.3,\n                   scatterpoints=1)\n\n        i += 1\n\n    plt.tight_layout()\n    plt.show()","8a7d6b85":"prob_reg(matrix_2d, y_eli)","da08f6a2":"def conf_mat(X,y, classifiers):\n    \n    ''' A function for displaying confusion matrices'''\n    \n    fig, axes = plt.subplots(4,2, figsize=(20,12))\n    axes = axes.flatten()\n\n    for ax, classifier in zip(axes, classifiers):\n        classifier.fit(X,y)\n        plot_confusion_matrix(classifier, X, y,\n                                         values_format = 'n',\n                                         display_labels = ['No Disease', 'Diease'],\n                                         cmap='summer_r',ax=ax)\n        ax.set_title(f'{classifier.__class__.__name__}')\n        plt.tight_layout()","afffbb6d":"conf_mat(X_cat, y_eli, classifiers)","51ba580a":"# Dimension Reduction Using PCA\n\n    PCA is used to decompose a multivariate dataset in a set of successive orthogonal components that explain a maximum amount of the variance. In scikit-learn, PCA is implemented as a transformer object that learns components in its fit method, and can be used on new data to project it on these components.\n\nReducing dimensions is useful for bigger datasets because by transforming a large set of variables into a smaller one that still contains most of the information in the large set makes your modelling faster. This is not the case here since we have very small data but we still can use it for visualization which I find it cool...","2986bf56":"# Introduction \n\nHello all!\n\nIn this notebook I tried to play with some sklearn features while exploring and visualizing the heart disease data we have given. Basically I tried to show distribution of data, relations between variables and target as well as correlations between each other.\n\nThe data includes 303 patient level features including if they have heart disease at the end or not. Features are like;\n\n- Age: Obvious one...\n- Sex:\n    - 0: Female\n    - 1: Male\n- Chest Pain Type: \n    - 0: Typical Angina\n    - 1: Atypical Angina\n    - 2: Non-Anginal Pain\n    - 3: Asymptomatic\n- Resting Blood Pressure: Person's resting blood pressure.\n- Cholesterol: Serum Cholesterol in mg\/dl  \n- Fasting Blood Sugar:\n    - 0:Less Than 120mg\/ml\n    - 1: Greater Than 120mg\/ml\n- Resting Electrocardiographic Measurement:\n    - 0: Normal\n    - 1: ST-T Wave Abnormality\n    - 2: Left Ventricular Hypertrophy\n- Max Heart Rate Achieved: Maximum Heart Rate Achieved\n- Exercise Induced Angina:\n    - 1: Yes\n    - 0: No\n- ST Depression: ST depression induced by exercise relative to rest.\n- Slope: Slope of the peak exercise ST segment:\n    - 0: Upsloping\n    - 1: Flat\n    - 2: Downsloping\n- Thalassemia: A blood disorder called 'Thalassemia':\n    - 0: Normal\n    - 1: Fixed Defect\n    - 2: Reversable Defect\n- Number of Major Vessels: Number of major vessels colored by fluoroscopy.\n\nAfter doing some usual exploratory data analysis I noticed some of the results doesn't make sense, I ain't no expert in field but made me curious and then I found this topic here [The ultimate guide to this dataset!](https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci\/discussion\/105877), his points made sense so I decided to use this dataset after inspecting it: [Heart Disease Cleveland UCI](https:\/\/www.kaggle.com\/cherngs\/heart-disease-cleveland-uci).\n\nI'd say it gave me more reasonable results and decided to stick with it, both datasets are pretty close but targets are reversed. It's up to you what dataset you choose, the original one gave me better F1 score but as I said EDA didn't make sense to but I have to tell I'm just inspecting the data and have no medical knowledge on the field.\n\nOne last note: I used some sklearn features just for the sake of showing them, they might be not needed in actual use for this case...\n\nWell, let's get goin then!","827c6b21":"# Confusion Matrix\n\n### One last thing before we finish our sklearn journey, I wanted to use another cool sklearn tool to show confusion matrices for each model. It's important for this case since we don't want our models to predict no disease on actually unhealty person or vice versa. It'd be very bad for patients in actual use. So we want less false positives and negatives but don't forget we still have some overfitted models so be careful about checking overfitted models like decision tree etc.","485a1a1e":"# Classifiers\n\n### Here I selected some common sklearn classifiers, I didn't want to include some common ml algorithms like xgboost, lightgbm or catboost since I wanted to play with sklearn only for this notebook. I'll do small quotes for each classifier from sklearn's official page:\n\n## GradientBoostingClassifier\n\n> Gradient Tree Boosting or Gradient Boosted Decision Trees (GBDT) is a generalization of boosting to arbitrary differentiable loss functions. GBDT is an accurate and effective off-the-shelf procedure that can be used for both regression and classification problems in a variety of areas including Web search ranking and ecology.\n\n## KNeighborsClassifier\n\n> Neighbors-based classification is a type of instance-based learning or non-generalizing learning: it does not attempt to construct a general internal model, but simply stores instances of the training data. Classification is computed from a simple majority vote of the nearest neighbors of each point: a query point is assigned the data class which has the most representatives within the nearest neighbors of the point.\n\n## DecisionTreeClassifier\n\n> Decision Trees (DTs) are a non-parametric supervised learning method used for classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. Decision trees learn from data to approximate a sine curve with a set of if-then-else decision rules. The deeper the tree, the more complex the decision rules and the fitter the model.\n\n## Support Vector Machines\n\n> Support vector machines (SVMs) are a set of supervised learning methods used for classification, regression and outliers detection.\n- The advantages of support vector machines are:\n    - Effective in high dimensional spaces.\n    - Still effective in cases where number of dimensions is greater than the number of samples.\n    - Uses a subset of training points in the decision function (called support vectors), so it is also memory efficient.\n    - Versatile: different Kernel functions can be specified for the decision function. Common kernels are provided, but it is also possible to specify custom kernels.\n    \n## RandomForestClassifier\n\n>The sklearn.ensemble module includes two averaging algorithms based on randomized decision trees: the RandomForest algorithm and the Extra-Trees method. Both algorithms are perturb-and-combine technique specifically designed for trees. This means a diverse set of classifiers is created by introducing randomness in the classifier construction. The prediction of the ensemble is given as the averaged prediction of the individual classifiers.\n\n## AdaBoostClassifier\n\n> An AdaBoost classifier is a meta-estimator that begins by fitting a classifier on the original dataset and then fits additional copies of the classifier on the same dataset but where the weights of incorrectly classified instances are adjusted such that subsequent classifiers focus more on difficult cases.\n\n## MLP Classifier\n\n> Multi-layer Perceptron classifier.\nThis model optimizes the log-loss function using LBFGS or stochastic gradient descent.\n\n## GaussianNB\n\n> GaussianNB implements the Gaussian Naive Bayes algorithm for classification. The likelihood of the features is assumed to be Gaussian.","a1f8d638":"# Learning Curves\n\n### Before finalizing our modelling I wanted to use another tool sklearn offers: Learning Curves. That can show us how fast the models learning and especially how is the model doing with the number of data given so we can decide if more data needed for better results. In our case we can see that some models overfitting and most of our models can get better with the more data...","20eae43a":"# Discretization\n\n    Discretization (otherwise known as quantization or binning) provides a way to partition continuous features into discrete values. Certain datasets with continuous features may benefit from discretization, because discretization can transform the dataset of continuous attributes to one with only nominal attributes.\n\n    One-hot encoded discretized features can make a model more expressive, while maintaining interpretability. For instance, pre-processing with a discretizer can introduce nonlinearity to linear models.\n\n### Since we have small and noisy data I thougt binning them would be better choice of action, for this purpose I'm going to choose another sklearn tool:\n\n## K-Bbins Discretization\n\n### This method discretizes features into 'k' bins. Sklearn module takes several strategy parameters but we going to use 'kmeans' strategy which defines bins based on a k-means clustering procedure performed on each feature independently.","f4774041":"# Tuned Model Results\n\n### Alright! As you can see even little bit tuned parameters added regularization to our models and increased the CV score. That's a good sign! Now we have three decent models to make predictions!","5d8ed5c7":"### On 2D space we can still diverse the clusters according to our target variables. These two components explains almost one third of the variance...","515e4d37":"# Univariate Analysis\n\n> Univariate analysis is the simplest form of analyzing data. \u201cUni\u201d means \u201cone\u201d, so in other words your data has only one variable. It doesn't deal with causes or relationships (unlike regression) and it's major purpose is to describe; It takes data, summarizes that data and finds patterns in the data.\n\n#### For this part we going to inspect how's the data distribution is and what patterns we can inspect.","0f6dfe61":"# Baseline Results\n\n### We have many metrics but I decided to sort them by F1 score since precision and recall is pretty important on this case. Looking at our first results showing RandomForestClassifier is the best performing one in the list of not tuned classifiers, followed by MLP and GradientBoosting classifiers.\n\n### But we can see most of our decision tree based models are overfitting, that's something we should look at soon.","67a5da49":"# Multivariate Analysis\n\n> Multivariate analysis (MVA) is based on the principles of multivariate statistics, which involves observation and analysis of more than one statistical outcome variable at a time. Typically, MVA is used to address the situations where multiple measurements are made on each experimental unit and the relations among these measurements and their structures are important.","b0376298":"# Loading Data","55148038":"# Elliptic Envelope\n\nLet's try another automatic outlier detection method. We assumed our distribution close to gaussian while inspecting the data so elliptic envelope worth to take a look.\n\n> The Minimum Covariance Determinant (MCD) method is a highly robust estimator of multivariate location and scatter, for which a fast algorithm is available. [\u2026] It also serves as a convenient and efficient tool for outlier detection.\n\nThis one did a little bit better than isolation forest so let's stick with it for this case...","36ac5434":"## Since our decision tree based models overfitting I wanted to look which features are most effecting these decisions, I sampled 2 of the tree based models you can see below:","11c02995":"# Decision Regions\n\n### With these contour plots we can see how the models decide on their predictions based on 2d data with confidence intervals. Looks cool!","5e113d32":"# RandomizedSearchCV\n\n### Let's get rid of overfitting, one of the easiest ways of doing it is tuning parameters for our estimators and regularize them. Thankfully sklearn is coming to help with useful tools for this case too! We going to use RandomizedSearchCV for this:\n\n    While using a grid of parameter settings is currently the most widely used method for parameter optimization, other search methods have more favourable properties. RandomizedSearchCV implements a randomized search over parameters, where each setting is sampled from a distribution over possible parameter values. This has two main benefits over an exhaustive search:\n\n    A budget can be chosen independent of the number of parameters and possible values.\n\n    Adding parameters that do not influence the performance does not decrease efficiency.\n\n### I'm going to choose small amount of estimators and not many parameters to search for timing purposes but you'll see even that's useful!","d652a4cf":"# Modelling\n\n### Ok... Here's the fun part, who doesn't love a bit of modelling? We start by loading our train data and labels as X and y's and we get dummy variables for categorical data using one hot encoding. Then we import loads of sklearn modules.","af4669db":"# Bivariate Analysis\n\n> Bivariate analysis is one of the simplest forms of quantitative analysis. It involves the analysis of two variables, for the purpose of determining the empirical relationship between them. Bivariate analysis can be helpful in testing simple hypotheses of association.\n\nIn this part we goin to take our variables and compare them against our target condition which is if the observed patient has disease or not.","288d817e":"# Automatic Outlier Detection\n\n## Before going to tune our models I decided to get rid of some outliers, we have pretty small database and we can actually remove them by hand or more basic methods. But I wanted to use what sklearn can offer us for this so we gonna try couple sklearn features.","c58796bb":"## Explained Variance\n\n### This graph shows that first 15 components explains more than 80% of the variance in the data and currently we have 46 of them. So it's safe to reduce some...","ca93af15":"# Isolation Forest\n\n    The IsolationForest \u2018isolates\u2019 observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature.\n\n    Since recursive partitioning can be represented by a tree structure, the number of splittings required to isolate a sample is equivalent to the path length from the root node to the terminating node.\n\n    This path length, averaged over a forest of such random trees, is a measure of normality and our decision function.\n\n    Random partitioning produces noticeably shorter paths for anomalies. Hence, when a forest of random trees collectively produce shorter path lengths for particular samples, they are highly likely to be anomalies.\n\nBasically I set contamination rate of our data to 10% and dropped them using masks. It didn't do great on the results, we have pretty small dataset and removing some more damaging model performances probably. But it's ok for now...","9c773a6c":"## Cholesterol, Max Heart Rate, Age, St Depression vs Target\n\n### Here I tried to fit every single numerical feature into one graph so we can have some visualized version of the effects.\n\n#### On X axis we have Cholesterol levels, on Y Max Heart Rate presented and Z axis is patient Age, marker sizes are based on ST_Depression levels and coloring based on the patient condition.","1a1de554":"## Categorical Data vs Target\n\n### Here we can do these observations:\n\n- Males are much more likely for heart diseases.\n- Chest pain type is very subjective and has no direct relation on the outcome, asymptomatic chest pains having highest disease outcome.\n- Blood sugar has no direct effect on the disease.\n- Rest ECG results showing no direct results but having normal ECG is pretty good sign. Even though it's pretty rare in the data, if you ST-T wave abnormality you are 3 times more likely to have heart disease.\n- Having exercise induced angina is pretty strong indicator for heart disease, patients are almost 3 times more likely to have disease if they have exercise induced angina. Meanwhile it's less than half for not having it.\n- Patients who had flat slope distribution are more likely to have disease.\n- Number of major vessels observed seems on similar levels for patients who have disease but 0 observations is good sign for not having disease.\n- Having defected thalium test results is pretty strong indicator for heart disease.","aa727290":"### I decided to rename columns for easier understanding in EDA part.","e7725f89":"## Numerical Data\n\n### Most of the continuous variables somewhat close to gaussian distribution with small skews left or right except for oldpeak. Again there are some outliers espacially a strong one in Cholesterol worth to take a look later.","11c542a5":"## Numerical Data vs Target\n\n### Here we can do these observations:\n\n- Having higher resting blood pressure shows you are little bit more likely to have heart disease.\n- Again same for Cholesterol, it's not strong indicator but patients are little bit more likely to have disease with high cholesterol. There's is also one outlier there with no disease, pretty interesting.\n- I find max heart rate distribution a bit interesting, expecting the other way around but it might be due to testing conditions and if you have normal results on ECG while exercising instructors might be increasing your excercise density?\n- It's pretty clear that heart disease likelihood increases with ST depression levels...\n- Lastly older patients are more likely to have heart disease.","711872e8":"# Correlations","c82a979b":"## 5 Components\n\n### We start with 5 components. It looks like these 5 explains half of the variance in our data.","b95ca7f6":"### Again renaming the categorical variables for easier EDA interpretation.","39d23820":"# Final Words\n\n### Well this concludes my notebook. It was fun sklearn journey for me, I hope you had fun while reading it and thanks for taking a look. \n\n### Feel free to comment I'll try to answer it all and as usual if you liked my work please don't forget to vote, have good one all!","484edc60":"### Here I chose top related features with outcome condition, seems thal is the most correlated one...","709e9bec":"# Inspecting Age Closer","0120c8fe":"# Reduced Dimension Model Results\n\n### These are pretty good results! We almost have same model metrics for most of the classifiers and even got some better regularization for some estimators!","fc25de17":"### By looking at the results it improved some of them little but some of them like SVC got huge boost(F1 score 0.44 > 0.80)","75118d82":"## 3 Components\n\n### More we reduce dimensions further we can visualize it better for our graphs. At 3D we can have this scatterplot, showing us some kind of meaningful clusters.","fe26f0e3":"## Categorical Data\n\n### Here we can do these observations:\n- Males on the dataset is more than double of the female observations.\n- Most common ches pain type is 'Asymptomatic' ones which is almost 50% of the data\n- 85% of the patients has no high levels of fastin blood sugar.\n- Resing electrocardiographic observations are evenly distributed between normal and left ventricular hypertrophy with ST-T minority\n- 67% of the patients had no exercise induced angina\n- Peak exercise slope seems mainly divided between upsloping and flat."}}