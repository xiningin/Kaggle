{"cell_type":{"3e14a045":"code","141d1b07":"code","949b7629":"code","33bfa6cc":"code","9d4717a7":"code","9ad92492":"markdown","d6036cad":"markdown","4359d04a":"markdown","9734cea3":"markdown","cd996de5":"markdown","69975c01":"markdown","2dbe3872":"markdown","8b937155":"markdown","d14305dc":"markdown","f81497ca":"markdown","b4613baa":"markdown","8a754a37":"markdown","0a807969":"markdown","210305a3":"markdown"},"source":{"3e14a045":"!pip install neptune-client","141d1b07":"import neptune\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\n\n# Initializing a neptune. First argument is your-user-name\/project-name, second argument is your API Token.\n# It is strongly recommended to store it in an environment variable NEPTUNE_API_TOKEN\nneptune.init('kaggle-presentation\/kaggle', api_token='eyJhcGlfYWRkcmVzcyI6Imh0dHBzOi8vdWkubmVwdHVuZS5tbCIsImFwaV9rZXkiOiIwNTM2NjM2OS1mY2YxLTQyNWQtODQyZi03NWQ5NDhhMWI3YWYifQ==')\n\n# Creating a dataset\nX, y = make_classification()\n# Splitting it into training and testing\nX_train, X_test, y_train, y_test = X[:70], X[70:], y[:70], y[70:]\n\n# Creating experiment in the project defined above\nneptune.create_experiment()\n\n# Fitting a model\nlr = LogisticRegression(solver='lbfgs')\nlr.fit(X_train, y_train)\nauc = roc_auc_score(y_test, lr.predict_proba(X_test)[:, 1])\n\n# Sending a metric to the experiment\nneptune.send_metric('AUC', auc)\n\n# Stop the experiment\nneptune.stop()","949b7629":"from sklearn.ensemble import RandomForestClassifier\n\n# Dictionary with parameters\nparams = {'n_estimators':10,\n          'criterion': 'gini',\n          'max_depth': 5,\n          'min_samples_split': 10,\n          'min_samples_leaf': 2,\n          'random_state': 47}\n\n# This time we are sending parameters\nneptune.create_experiment(params=params)\n\nclf = RandomForestClassifier(**params)\nclf.fit(X_train, y_train)\nauc = roc_auc_score(y_test, lr.predict_proba(X_test)[:, 1])\n\n# Sending a metric to the experiment\nneptune.send_metric('AUC', auc)\n\n# Stop the experiment\nneptune.stop()","33bfa6cc":"from sklearn.neural_network import MLPClassifier\nimport matplotlib.pyplot as plt\n\n\n# Dictionary with parameters\nparams = {'hidden_layer_sizes': (200,),\n          'activation': 'relu',\n          'max_iter': 500,\n          'learning_rate': 'adaptive',\n          'random_state': 47}\n\nneptune.create_experiment(params=params)\n\nclf = MLPClassifier(**params)\nclf.fit(X_train, y_train)\nauc = roc_auc_score(y_test, lr.predict_proba(X_test)[:, 1])\n\n# Sending a metric to the experiment\nneptune.send_metric('AUC', auc)\n\nplt.plot(clf.loss_curve_)\nplt.savefig('loss_curve.png')\nneptune.send_image('loss_curve', 'loss_curve.png')\nneptune.stop()","9d4717a7":"import joblib\n\nwith neptune.create_experiment():\n    clf = LogisticRegression(solver='lbfgs', random_state=47)\n    clf.fit(X_train, y_train)\n    auc = roc_auc_score(y_test, lr.predict_proba(X_test)[:, 1])\n    neptune.send_metric('AUC', auc)\n    joblib.dump(clf, 'logistic_regression.pkl')\n    neptune.send_artifact('logistic_regression.pkl')","9ad92492":"<a id=\"3\"><\/a>\n## Running an experiment\n\nIt is time to create and run our first experiment. To track you experiment first you need to initialize it using neptune.init() method with your token.\n\nYou can obtain a token by clicking your user icon in the upper-right corner and selecting 'Get API Token'\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2F03662a1b9f79b4da78120f1f390313c8%2Fneptune_kernel_5.png?generation=1564558561773321&alt=media)\n\nNext I will create a small dataset with a synthetic data using sklearn.datasets.make_classification and run our first experiment.","d6036cad":"<a id=\"2\"><\/a>\n## Setting up a project\nNeptune has a good documentation let alone an interface is intuitive and easy to use. But I still will guide you with your first experiment.\n\nFirst of all we need to create a project for our experiments. Let's do it.\n\nGo to 'Projects' in the upper-left corner and then click a 'New project' button. You will see a modal window with some fields. Let's fill them and proceed.\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2Fbd37ce0d4cda1c6908f808941b59f358%2Fneptune_kernel_2.png?generation=1564558568867977&alt=media)","4359d04a":"<a id=\"5\"><\/a>\n## Track images\n\nAnother thing you can log is an images. If you are more visual person this might be really helpful feature for you. Let's, for example, train another model and...","9734cea3":"An image is now available in 'Logs' section of the experiment's page.\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2F545fec8350e6c060d49eac18b0d33ddb%2Fneptune_kernel_9.png?generation=1564562627500744&alt=media)","cd996de5":"<a id=\"8\"><\/a>\n## Conclusion\n\nI have described only basic features and functionality of neptune and if you like it then don't hesitate to explore this servis on our own. Trust me there is much more cool stuff to see.","69975c01":"# Hot to track you Data Science experiments with neptune.ml\n![](https:\/\/neptune.ml\/wp-content\/uploads\/2018\/08\/Company-Header-Neptune.ml_-2-e1560327936998.png)\n\n*Important disclaimer: I am not an owner nor a developer of the presented service. I only use it for my own projects (including Kaggle competitions) because I've found it very useful.*\n\n* Have you ever faced a situation when some of your experiments have finished, you got the results, but you completely forgot what exactly you have changed?\n* Maybe you want to run several of experiments to check multiple ideas and see the results in a convenient form?\n* Or you want to collaborate with your teammates more effectively?\n\nIf your answer is 'yes' to any of those questions then you will like a [neptune](https:\/\/neptune.ml\/) project.\n\nIn this kernel I will show you how to set it up and use in your kaggle competitions.","2dbe3872":"You can now find this parameters in the experiment's page if you follow the link above.\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2F9ee8902a6a74a207a3d475c205414f4a%2Fneptune_kernel_8.png?generation=1564561096062206&alt=media)\n\nAs for dashboard - you should select parameters you want to be displayed. You can then sort and filter your experiments by any of them.","8b937155":"Let's get familiar with an interface. \n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2F7fbbbc2d193fcb0a30ea2438b5fc90c6%2Fneptune_kernel_3.png?generation=1564558568764085&alt=media)\n\nWe have 4 tabs at the top:\n* Wiki\n* Notebooks\n* Experiments\n* Settings\n\nWiki is a README and comments for you project\n\nNotebooks contains all of the notebooks you are tracking. If you are using a Jupyter notebook (which I bet you are) then you can install a jupyter extension called *neptune-notebooks* and integrate it. After that by simply clicking on one button you will save a notebook checkpoint to your project and then you can keep working without a fear to remove some cell or rewrite a code in it. You will always have a backup. The outputs of the cells are being saved as well.\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2Ff7d9882ddc9c732be20bcd438d9677d9%2Fneptune_kernel_4.png?generation=1564564644071941&alt=media)\n\nUnfortunately kaggle kernels does not support such integration but you can upvote my [feature request](https:\/\/www.kaggle.com\/product-feedback\/101200#583902) for it.","d14305dc":"<a id=\"7\"><\/a>\n## Monitoring resources\n\nNeptun client has another cool feature - by default it tracks all the resources usage metrics, such as CPU, Memory and GPU usage. They can be found in the 'Monitoring' section of the experiment's page. \n\nFor example you can see how your model utilizes a GPU during the experiment.\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2F0946f5f0d667c85296a0cddfe23497e8%2Fneptune_kernel_10.png?generation=1564563636462867&alt=media)","f81497ca":"1. [Registering and installing neptune client](#1)\n2. [Setting up a project](#2)\n3. [Running an experiment](#3)\n4. [Track parameters](#4)\n5. [Track images](#5)\n6. [Track artifacts](#6)\n7. [Monitoring resources](#7)\n8. [Conclusion](#8)","b4613baa":"As an output we have an experiment ID and a link to it. Let's see how the experiment results look in neptune interface. \n\nHere is a result on the dashboard:\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2Fc3c9eb7e9965ee7317ca0fcd350c770e%2Fneptune_kernel_6.png?generation=1564559613195430&alt=media)\n\nWe called our metric 'AUC', but this is not a default column in neptune, so in order to see it we need to add it the dasboard.\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2F9324a9242a9789c6d9fbbd92a9f3d06f%2Fneptune_kernel_7.png?generation=1564559774143612&alt=media)\n","8a754a37":"<a id=\"4\"><\/a>\n## Track parameters\n\nAnother useful feature is an ability to save the parameters of the model for your experiment. Here is how you can do it.","0a807969":"<a id=\"6\"><\/a>\n## Track artifacts\n\nYou can also send some artifacts. For example lets dump the model to pkl and send it to neptune. It is going to be stored in 'Artifacts' section.\n\nAlso we can use neptune experiment in more pythonic way.","210305a3":"<a id=\"1\"><\/a>\n## Registering and installing neptune client\n\nI think there is no need to describe how to register in neptune, just go to the project page and click 'Sign up'. Google, Facebook and Github SSO works as well.\n\nNext step is to install a neptune client. In order to do this enable an Internet access in your kernel's settings.\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1696976%2Ffc475a6556225863484d04e9ed1baecb%2Fneptune_kernel_1.png?generation=1564558569759774&alt=media)\n\nThen run *pip install neptune-client*"}}