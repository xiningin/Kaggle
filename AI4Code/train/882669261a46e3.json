{"cell_type":{"3dcb8346":"code","0533a6e2":"code","4078a518":"code","50bd2b69":"code","5f5c4382":"code","7c20539e":"code","7748da87":"code","fb5cee01":"code","3da53b48":"code","e488b271":"code","bfdc4cf2":"code","ec4c0458":"code","9c0e28ed":"code","17b61cd7":"code","2e8af2a5":"code","80e42c88":"code","84204ef4":"code","ec7100d8":"code","cdd401e0":"code","76e88835":"code","a6480737":"code","a2afca06":"code","8cb61f0f":"code","8c5d380e":"code","762c31f9":"code","0e2b67cd":"code","531e64d1":"code","15b16f8c":"code","77639448":"markdown","4455f556":"markdown","3fcc770d":"markdown","cc94da31":"markdown","b4b91842":"markdown","f48cf952":"markdown","a7b95910":"markdown","ed6c0b4c":"markdown","9c248a21":"markdown","f2bea624":"markdown","d83f8df3":"markdown","ec0db57b":"markdown","34037be9":"markdown","dce7f29a":"markdown","3d2d238a":"markdown","67b88ba7":"markdown","0a4ed3ed":"markdown"},"source":{"3dcb8346":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0533a6e2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4078a518":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv\")\ntrain\n","50bd2b69":"test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv\")\ntest\n","5f5c4382":"sample = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")\nsample","7c20539e":"target_count = train.groupby('target').target.count()\ntarget_count","7748da87":"percent_target = (target_count \/ len(train)) * 100\npercent_target","fb5cee01":"train.groupby('target').target.count().plot.bar(ylim=0)\nplt.show()","3da53b48":"target = train.target\n\ntrain.drop(['target'], axis=1, inplace=True)\n\ntest_id = test.id\ntrain_length = len(train)\n\n\nframes = [train, test]\ncombo = pd.concat(frames)\ncombo","e488b271":"combo.drop(['id'], axis=1, inplace=True)\ncombo","bfdc4cf2":"combo.isnull().sum()","ec4c0458":"corrmat = combo.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","9c0e28ed":"combo.info()","17b61cd7":"combo.describe()","2e8af2a5":"from sklearn import preprocessing\nfrom sklearn.preprocessing import OrdinalEncoder\n\nenc = OrdinalEncoder()\n\ncombo.cat0 = enc.fit_transform(combo.cat0.values.reshape(-1,1))\ncombo.cat1 = enc.fit_transform(combo.cat1.values.reshape(-1,1))\ncombo.cat2 = enc.fit_transform(combo.cat2.values.reshape(-1,1))\ncombo.cat3 = enc.fit_transform(combo.cat3.values.reshape(-1,1))\ncombo.cat4 = enc.fit_transform(combo.cat4.values.reshape(-1,1))\ncombo.cat5 = enc.fit_transform(combo.cat5.values.reshape(-1,1))\ncombo.cat6 = enc.fit_transform(combo.cat6.values.reshape(-1,1))\ncombo.cat7 = enc.fit_transform(combo.cat7.values.reshape(-1,1))\ncombo.cat8 = enc.fit_transform(combo.cat8.values.reshape(-1,1))\ncombo.cat9 = enc.fit_transform(combo.cat9.values.reshape(-1,1))\ncombo.cat10 = enc.fit_transform(combo.cat10.values.reshape(-1,1))\ncombo.cat11 = enc.fit_transform(combo.cat11.values.reshape(-1,1))\ncombo.cat12 = enc.fit_transform(combo.cat12.values.reshape(-1,1))\ncombo.cat13 = enc.fit_transform(combo.cat13.values.reshape(-1,1))\ncombo.cat14 = enc.fit_transform(combo.cat14.values.reshape(-1,1))\ncombo.cat15 = enc.fit_transform(combo.cat15.values.reshape(-1,1))\ncombo.cat16 = enc.fit_transform(combo.cat16.values.reshape(-1,1))\ncombo.cat17 = enc.fit_transform(combo.cat17.values.reshape(-1,1))\ncombo.cat18 = enc.fit_transform(combo.cat18.values.reshape(-1,1))\ncombo","80e42c88":"combo = (combo - combo.min()) \/ (combo.max() - combo.min())\ncombo","84204ef4":"y = target\nX = combo[:train_length]\nX_test = combo[train_length:]","ec7100d8":"y","cdd401e0":"X","76e88835":"X_test","a6480737":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split( X, y, test_size=0.1, shuffle=True, random_state=1)\nX_train.shape, y_train.shape, X_val.shape, y_val.shape, X_test.shape","a2afca06":"from sklearn.linear_model import LogisticRegression\n\n\nmodel = LogisticRegression(C=100, class_weight='balanced', random_state=1, max_iter=10000).fit(X_train, y_train)\nprint(model.score(X_train, y_train))","8cb61f0f":"#from sklearn.experimental import enable_hist_gradient_boosting  \n#from sklearn.ensemble import HistGradientBoostingClassifier\n\n#model = HistGradientBoostingClassifier(max_iter=50000, random_state=1).fit(X_train, y_train)\n#print(model.score(X_train, y_train))","8c5d380e":"y_pred = model.predict(X_val)\nprint(model.score(X_val,y_val))","762c31f9":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_val, y_pred)","0e2b67cd":"predictions = model.predict(X_test)","531e64d1":"output = pd.DataFrame({'id': test_id, 'target': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","15b16f8c":"#upload submission\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission","77639448":"Load datasets","4455f556":"Predict on test set","3fcc770d":"Problem statement","cc94da31":"Predict on validation set","b4b91842":"Analyse target","f48cf952":"Prepare submission","a7b95910":"Normalise combo","ed6c0b4c":"Import libraries","9c248a21":"Merge train and test","f2bea624":"Drop id","d83f8df3":"Check for missing values","ec0db57b":"Select Model","34037be9":"Define X and y","dce7f29a":"Split X","3d2d238a":"Analytics","67b88ba7":"For this competition, you will be predicting a binary target based on a number of feature columns given in the data. All of the feature columns, cat0 - cat18 are categorical, and the feature columns cont0 - cont10 are continuous.\n\nThe dataset is used for this competition is synthetic but based on a real dataset and generated using a CTGAN. The original dataset deals with predicting the amount of an insurance claim. Although the features are anonymized, they have properties relating to real-world features.","0a4ed3ed":"Ordinal encode"}}