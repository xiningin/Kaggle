{"cell_type":{"1d4a72d7":"code","27327361":"code","6252c577":"code","222c9e20":"code","3a5b2894":"code","8cdfbc89":"code","e5c1e352":"code","e8c0068f":"code","6edd7292":"code","67589e41":"code","deb911e2":"code","93c55df7":"code","4c972451":"code","e444a4ee":"code","72ef0924":"code","68be0daf":"code","2cbe74d8":"code","694677be":"code","5160e2a7":"code","594c2b66":"code","0ddc351b":"code","cbad107a":"code","32277ad6":"code","3c3fea47":"code","001c503f":"code","aec7e8e5":"code","66635115":"code","b2b0b21d":"markdown","9f914ecc":"markdown","cee54b7a":"markdown","c33773ec":"markdown","e43d35b9":"markdown","8972e424":"markdown","335c4ccf":"markdown","f9570188":"markdown","94e68dd0":"markdown","4483cb46":"markdown","529f61af":"markdown"},"source":{"1d4a72d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27327361":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\",category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\",category=FutureWarning)\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","6252c577":"df=pd.read_csv(\"\/kaggle\/input\/flightdata.csv\")   #veri setimizi ekliyoruz\ndf.shape","222c9e20":"df.isnull().values.any()","3a5b2894":"df.isnull().sum()","8cdfbc89":"df.drop('Unnamed: 25',axis=1,inplace=True)    #bu s\u00fctun tamamen kay\u0131p veriden olu\u015fuyor. o y\u00fczden silebiliriz\ndf.head()","e5c1e352":"df = df[[\"MONTH\", \"DAY_OF_MONTH\", \"DAY_OF_WEEK\", \"ORIGIN\", \"DEST\", \"CRS_DEP_TIME\", \"ARR_DEL15\"]]\ndf.head()","e8c0068f":"df.isnull().sum()","6edd7292":"df = df.fillna({'ARR_DEL15': 1})     #nan de\u011ferleri modelimizde kullanabilmek i\u00e7in 1 e \u00e7eviriyoruz\ndf.isnull().sum()","67589e41":"df.describe().T","deb911e2":"df=pd.get_dummies(df, columns=['ORIGIN', 'DEST'])    #modelimizde kullanabilmek i\u00e7in or\u0131g\u0131n ve dest kolonlar\u0131 ekliyoruz\ndf.head()","93c55df7":"df['CRS_DEP_TIME']=df['CRS_DEP_TIME']\/\/100\ndf.head()","4c972451":"x=df.drop('ARR_DEL15',axis=1)    #ba\u011f\u0131ml\u0131 ve ba\u011f\u0131ms\u0131z de\u011fi\u015fkenimizi ay\u0131r\u0131yoruz\ny=df['ARR_DEL15']","e444a4ee":"y.value_counts()","72ef0924":"y.value_counts().plot(kind='bar', title='Count (ARR_DEL15)');","68be0daf":"X_train, X_test, y_train, y_test=train_test_split(x,y,test_size=0.25, random_state=42 )","2cbe74d8":"from lightgbm import LGBMClassifier\nfrom sklearn.metrics import confusion_matrix   \nfrom sklearn.metrics import accuracy_score, classification_report","694677be":"from sklearn.utils import class_weight\nclass_weights = dict(zip(np.unique(y_train), class_weight.compute_class_weight('balanced',\n                                                 np.unique(y_train),\n                                                 y_train)))","5160e2a7":"lgbm_model=LGBMClassifier(class_weight=class_weights).fit(X_train,y_train)  ","594c2b66":"y_pred=lgbm_model.predict(X_test) ","0ddc351b":"accuracy_score(y_test,y_pred)","cbad107a":"print(classification_report(y_test,y_pred))","32277ad6":"from sklearn.metrics import confusion_matrix    \nconfusion_matrix(y_test,y_pred)","3c3fea47":"from sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve\n\ny_proba= lgbm_model.predict_proba(X_test)\nroc_auc_score(y_test, y_proba[:, 1])","001c503f":"fpr, tpr, _ = roc_curve(y_test, y_proba[:, 1])\nplt.plot(fpr, tpr)\nplt.plot([0, 1], [0, 1], color='red', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate');","aec7e8e5":"def possibility_delay(date_time,origin,dest):\n    \n    flight_date = datetime.strptime(date_time, '%d\/%m\/%Y %H:%M:%S')\n    month = flight_date.month\n    day = flight_date.day\n    day_of_week = flight_date.isoweekday()\n    hour = flight_date.hour\n    \n    origin = origin.upper()\n    dest = dest.upper()\n    \n    new_data = [{'MONTH': month,\n              'DAY': day,\n              'DAY_OF_WEEK': day_of_week,\n              'CRS_DEP_TIME': hour,\n              'ORIGIN_ATL': 1 if origin == 'ATL' else 0,\n              'ORIGIN_DTW': 1 if origin == 'DTW' else 0,\n              'ORIGIN_JFK': 1 if origin == 'JFK' else 0,\n              'ORIGIN_MSP': 1 if origin == 'MSP' else 0,\n              'ORIGIN_SEA': 1 if origin == 'SEA' else 0,\n              'DEST_ATL': 1 if dest == 'ATL' else 0,\n              'DEST_DTW': 1 if dest == 'DTW' else 0,\n              'DEST_JFK': 1 if dest == 'JFK' else 0,\n              'DEST_MSP': 1 if dest == 'MSP' else 0,\n              'DEST_SEA': 1 if dest == 'SEA' else 0 }]\n\n    return lgbm_model.predict_proba(pd.DataFrame(new_data))[0][0]","66635115":"days = ('1. Day', '2.Day', '3.Day', '4.Day', '5.Day', '6.Day', '7.Day')\ndate_and_flight = (possibility_delay('1\/7\/2018 12:00:00', 'ATL', 'jfk'),\n          possibility_delay('2\/5\/2016 20:00:00', 'DTW', 'SEA'),\n          possibility_delay('2\/6\/2019 12:00:00', 'JFK', 'SEA'),\n          possibility_delay('4\/7\/2017 12:00:00', 'MSP', 'ATL'),\n          possibility_delay('22\/10\/2018 22:00:00', 'SEA', 'DTW'),\n          possibility_delay('13\/11\/2019 17:00:00', 'DTW', 'MSP'),\n          possibility_delay('9\/12\/2017 12:00:00', 'ATL', 'JFK'))\n\nplt.bar(days, date_and_flight, align='center', alpha=0.5)\nplt.ylabel('possibility of delay')\nplt.ylim((0,1));","b2b0b21d":"Modelimizin do\u011frulu\u011funu \u00f6l\u00e7mek i\u00e7in ROC AUC kullanaca\u011f\u0131z.","9f914ecc":"kay\u0131p de\u011fer olma durumunu kontrol ediyoruz. True de\u011fer d\u00f6n\u00fcyorsa kay\u0131p de\u011ferlerimiz var demektir","cee54b7a":"### Veri setimizi d\u00fczenledi\u011fimize g\u00f6re model kurmaya ge\u00e7ebiliriz\u00b6\n","c33773ec":"Yap\u0131ca\u011f\u0131m\u0131z fonksiyon ile al\u0131ca\u011f\u0131m\u0131z tarih, kalk\u0131\u015f havaliman\u0131 ve var\u0131\u015f havaliman\u0131 bilgileri ile u\u00e7a\u011f\u0131n zaman\u0131nda gitme olas\u0131l\u0131\u011f\u0131n\u0131 bulaca\u011f\u0131z. Olas\u0131l\u0131\u011f\u0131 hesaplarken kurmu\u015f oldu\u011fumuz lgbm_model den yararlanaca\u011f\u0131z\n\n","e43d35b9":"Contact : https:\/\/www.linkedin.com\/in\/onur-y%C4%B1lmaz-9a58a11a2\/","8972e424":"Crs_Dep_time \u0131 100 e b\u00f6l\u00fcp 24 saatliki dilimdeki kar\u015f\u0131l\u0131\u011f\u0131n\u0131 bulmal\u0131y\u0131z","335c4ccf":"yukar\u0131da a\u011f\u0131rl\u0131k kat say\u0131s\u0131n\u0131 hesaplad\u0131k ve bunu modelimize yollayaca\u011f\u0131z.","f9570188":"ROC E\u011frisini \u00e7izelim","94e68dd0":"Veri setimizi dengesiz (imbalanced dataset) oldu\u011fu i\u00e7in az\u0131nl\u0131k s\u0131n\u0131fa (r\u00f6tar olma ihtimali =0 olan class) daha y\u00fcksek bi a\u011f\u0131rl\u0131k de\u011feri girebiliriz. B\u00f6ylelikle modelimizin daha iyi e\u011fitilmesini sa\u011flam\u0131\u015f oluruz\n\n","4483cb46":"veri setimizde bir dengesizlik g\u00f6r\u00fcl\u00fcyor. bunu ilerleyen kodlarda d\u00fczelticez","529f61af":"baz\u0131 g\u00fcnlerdeki u\u00e7u\u015flar\u0131n r\u00f6tar yapma ihtimaline bakal\u0131m \u015fimdi de\n"}}