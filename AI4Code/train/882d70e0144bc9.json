{"cell_type":{"e5d45c89":"code","47f45142":"code","f82fbbaf":"code","8e3e102f":"code","195a18de":"code","6ea72638":"code","f75e975d":"code","285bd7e2":"code","d5c141ac":"code","ff48f582":"code","2dbf2b35":"code","3b548c8f":"code","d71484b9":"code","0d0a883d":"code","d40f01b7":"code","4d7dc18b":"code","ad4fd669":"code","cfd477bc":"code","699eafb3":"code","83a2db36":"code","0c69f27d":"code","d11f0865":"code","9bfe8f9a":"code","586a3408":"code","c54880f3":"code","d31a171b":"code","8023bd53":"code","4fd16c8a":"code","a3314f31":"code","a69c3019":"code","d543e4e9":"code","8745ea06":"code","1401b9cf":"code","4f79a3b7":"code","907bd395":"code","8b0a8d4a":"code","9e6138c7":"code","48147f46":"code","db0aaa59":"code","d22dd14a":"code","929a7679":"code","f8c87e62":"code","827b7496":"markdown","b8d50ae9":"markdown","8442e728":"markdown","2c3505ca":"markdown","83322937":"markdown","d9bf4241":"markdown","6cc54dcc":"markdown","ace1a8de":"markdown","2098874b":"markdown"},"source":{"e5d45c89":"import matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","47f45142":"print(os.listdir('..\/input'))","f82fbbaf":"team_info = pd.read_csv('..\/input\/team_info.csv', delimiter=',', usecols=['team_id', 'shortName', 'abbreviation'])\nteam_info.head()","8e3e102f":"game_teams_stats = pd.read_csv('..\/input\/game_teams_stats.csv', delimiter=',', usecols=['game_id', 'team_id', 'HoA', 'won', 'settled_in', 'goals', 'shots', 'powerPlayGoals'])","195a18de":"game_teams_stats.head()","6ea72638":"b = game_teams_stats.goals.value_counts().to_frame()\ngame_teams_stats.goals.value_counts().to_frame().plot.bar()\nb = pd.DataFrame([{\"goals\": int(b.loc[[0, 1, 2, 3] , :].sum())}, {\"goals\": int(b.loc[[4,5,6,7,8,9,10], :].sum())}], index = [\"3 or less goal games\", \"4 or more goal games\"]).plot.bar()\nb.set_ylabel(\"Games\")\nb.get_legend().remove()\nplt.xticks([0,1], [\"3 or less goal games\", \"4 or more goal games\"], rotation=\"horizontal\")","f75e975d":"game_teams_stats.loc[(game_teams_stats[\"won\"] == True) & (game_teams_stats[\"settled_in\"] != \"SO\")][\"goals\"].value_counts().plot.bar()","285bd7e2":"print(game_teams_stats.loc[(game_teams_stats[\"won\"] == True)][\"team_id\"].value_counts().mean())\nprint(game_teams_stats.loc[(game_teams_stats[\"won\"] == True) & (game_teams_stats[\"team_id\"] == 14)][\"team_id\"].value_counts())\nprint(game_teams_stats.loc[(game_teams_stats[\"won\"] == True) & (game_teams_stats[\"team_id\"] == 21)][\"team_id\"].value_counts())\nprint(game_teams_stats.loc[(game_teams_stats[\"won\"] == True) & (game_teams_stats[\"team_id\"] == 26)][\"team_id\"].value_counts())\nprint(game_teams_stats.loc[(game_teams_stats[\"won\"] == True) & (game_teams_stats[\"team_id\"] == 2)][\"team_id\"].value_counts())\nprint(game_teams_stats.loc[(game_teams_stats[\"won\"] == True) & (game_teams_stats[\"team_id\"] == 22)][\"team_id\"].value_counts())","d5c141ac":"game_teams_stats_home = game_teams_stats[game_teams_stats.HoA == 'home']\ngame_teams_stats_away = game_teams_stats[game_teams_stats.HoA == 'away']\ngame_teams_combined_result = game_teams_stats_home.merge(game_teams_stats_away, left_on=\"game_id\", right_on=\"game_id\", suffixes=(\"_home\", \"_away\")).drop(\n    [\"HoA_home\", \"HoA_away\", \"won_away\", \"settled_in_away\"], axis=1\n).rename(columns={\"settled_in_home\": \"settled_in\"}).sort_values(by = [\"game_id\"])\ngame_teams_combined_result.head()","ff48f582":"name_replace_dict = {\"team_id_away\": \"team_id\", \"team_id_home\": \"team_id\"}\ngame_losing_team = game_teams_combined_result.loc[(game_teams_combined_result[\"won_home\"] == True)][[\"game_id\", \"team_id_away\", \"settled_in\"]].rename(columns = name_replace_dict).append(\n    game_teams_combined_result.loc[(game_teams_combined_result[\"won_home\"] == False)][[\"game_id\", \"team_id_home\", \"settled_in\"]].rename(columns = name_replace_dict)\n).sort_values(by = [\"game_id\"])\ngame_losing_team.head()","2dbf2b35":"game_plays = pd.read_csv('..\/input\/game_plays.csv', delimiter=',', usecols=['play_id', 'game_id', 'play_num', 'team_id_for', 'team_id_against', 'event', 'secondaryType', 'period', 'periodType'])","3b548c8f":"game_plays_goals = game_plays.loc[(game_plays[\"event\"] == 'Goal') & (game_plays[\"periodType\"] != 'SHOOTOUT')].sort_values(by = [\"game_id\", \"play_num\"])\ngame_plays_goals.head()","d71484b9":"lead_data = {}\nlost_lead_game_data = {}","0d0a883d":"for index, row in game_plays_goals.iterrows():\n    \n    game_id = row[\"game_id\"]\n    team_id_for = row[\"team_id_for\"]\n    team_id_against = row[\"team_id_against\"]\n    \n    if game_id not in lead_data:\n        lead_data[game_id] = {}\n        lead_data[game_id][\"largest_lead\"] = 0\n        lead_data[game_id][team_id_for] = 0\n        lead_data[game_id][team_id_against] = 0        \n\n    lead_data[game_id][team_id_for] += 1\n    \n    score_dif = lead_data[game_id][team_id_for] - lead_data[game_id][team_id_against]\n    \n       \n    if score_dif >= 2:\n        # >= because wanna know latest lead\n        if score_dif >= lead_data[game_id][\"largest_lead\"]:\n            if game_id in lost_lead_game_data:\n                if lost_lead_game_data[game_id][\"largest_lead_team\"] == team_id_for:\n                    lead_data[game_id][\"largest_lead\"] = score_dif\n                    lead_data[game_id][\"largest_lead_score\"] = str(lead_data[game_id][team_id_for]) + \"-\" + str(lead_data[game_id][team_id_against])\n                    lead_data[game_id][\"largest_lead_team\"] = team_id_for\n            else:\n                lead_data[game_id][\"largest_lead\"] = score_dif\n                lead_data[game_id][\"largest_lead_score\"] = str(lead_data[game_id][team_id_for]) + \"-\" + str(lead_data[game_id][team_id_against])\n                lead_data[game_id][\"largest_lead_team\"] = team_id_for\n\n            if game_losing_team.loc[game_losing_team[\"game_id\"] == game_id][\"team_id\"].squeeze() == team_id_for:\n                lead_data[game_id][\"winning_team\"] = team_id_against\n                lost_lead_game_data[game_id] = lead_data[game_id]\n                lost_lead_game_data[game_id][\"settled_in\"] = game_losing_team.loc[game_losing_team[\"game_id\"] == game_id][\"settled_in\"].squeeze()\n\n    elif score_dif == 0 and game_id in lost_lead_game_data:\n        if \"period_tied\" not in lost_lead_game_data[game_id]:\n            lost_lead_game_data[game_id][\"period_tied\"] = row[\"period\"]","d40f01b7":"print(len(lead_data))\nprint(\"###\")\nprint(len(lost_lead_game_data))\n","4d7dc18b":"game_plays.loc[(game_plays[\"event\"] == 'Goal') & (game_plays[\"game_id\"] == 2010020007)]","ad4fd669":"dict_to_pd_prep = {}\nfinal_pd_columns = [\"game_id\", \"largest_lead_score\", \"largest_lead\", \"losing_team\", \"winning_team\", \"period_tied\", \"settled_in\"]","cfd477bc":"count = 0\nfor game_id, data in lost_lead_game_data.items():\n    if team_info.loc[team_info[\"team_id\"] == data[\"largest_lead_team\"]][\"abbreviation\"].squeeze() != \"VGK\" and team_info.loc[team_info[\"team_id\"] == data[\"winning_team\"]][\"abbreviation\"].squeeze() != \"VGK\":\n        dict_to_pd_prep[count] = []\n        dict_to_pd_prep[count].append(game_id)\n        dict_to_pd_prep[count].append(data[\"largest_lead_score\"])\n        dict_to_pd_prep[count].append(data[\"largest_lead\"])\n        \n        # Thrashers and Phoenix relocated to Winnipeg and Arizona\n        if team_info.loc[team_info[\"team_id\"] == data[\"largest_lead_team\"]][\"abbreviation\"].squeeze() == \"PHX\":\n            dict_to_pd_prep[count].append(\"ARI\")\n        elif team_info.loc[team_info[\"team_id\"] == data[\"largest_lead_team\"]][\"abbreviation\"].squeeze() == \"ATL\":\n            dict_to_pd_prep[count].append(\"WPG\")\n        else:\n            dict_to_pd_prep[count].append(team_info.loc[team_info[\"team_id\"] == data[\"largest_lead_team\"]][\"abbreviation\"].squeeze())\n        \n        if team_info.loc[team_info[\"team_id\"] == data[\"winning_team\"]][\"abbreviation\"].squeeze() == \"PHX\":\n            dict_to_pd_prep[count].append(\"ARI\")\n        elif team_info.loc[team_info[\"team_id\"] == data[\"winning_team\"]][\"abbreviation\"].squeeze() == \"ATL\":\n            dict_to_pd_prep[count].append(\"WPG\")\n        else:\n            dict_to_pd_prep[count].append(team_info.loc[team_info[\"team_id\"] == data[\"winning_team\"]][\"abbreviation\"].squeeze())\n\n            dict_to_pd_prep[count].append(data[\"period_tied\"])\n        dict_to_pd_prep[count].append(data[\"settled_in\"])\n\n        count += 1","699eafb3":"lead_losers_pd = pd.DataFrame.from_dict(dict_to_pd_prep, orient='index', columns=final_pd_columns)","83a2db36":"lead_losers_pd.head(4)","0c69f27d":"all_score_plot = lead_losers_pd.largest_lead_score.value_counts().to_frame().plot.bar()\nall_score_plot.set_title(\"Distribution of lost leads\", fontdict = {\"fontsize\": 18})\nall_score_plot.set_xlabel(\"Scores\")\nall_score_plot.set_ylabel(\"Total\")\nall_score_plot.get_legend().remove()","d11f0865":"game_losing_team[\"settled_in\"].value_counts().to_frame()","9bfe8f9a":"all_game_settled_in_plot = game_losing_team[\"settled_in\"].value_counts().plot.bar(color=[\"green\", \"blue\", \"red\"])\nall_game_settled_in_plot.set_title(\"Settled in (All games)\", fontdict = {\"fontsize\": 18})\nall_game_settled_in_plot.set_xlabel(\"Settled in\")\nall_game_settled_in_plot.set_ylabel(\"Total\")","586a3408":"lead_losers_pd[\"settled_in\"].value_counts().to_frame()","c54880f3":"gt_2_game_settled_in_plot = lead_losers_pd[\"settled_in\"].value_counts().plot.bar(color=[\"green\", \"blue\", \"red\"])\ngt_2_game_settled_in_plot.set_title(\"Settled in (Lost leads >= 2)\", fontdict = {\"fontsize\": 18})\ngt_2_game_settled_in_plot.set_xlabel(\"Settled in\")\ngt_2_game_settled_in_plot.set_ylabel(\"Total\")","d31a171b":"lead_losers_pd.loc[lead_losers_pd[\"largest_lead\"] >= 3][\"settled_in\"].value_counts().to_frame()","8023bd53":"gt_3_game_settled_in_plot = lead_losers_pd.loc[lead_losers_pd[\"largest_lead\"] >= 3][\"settled_in\"].value_counts().plot.bar(color=[\"green\", \"blue\", \"red\"])\ngt_3_game_settled_in_plot.set_title(\"Settled in (Lost leads >= 3)\", fontdict = {\"fontsize\": 18})\ngt_3_game_settled_in_plot.set_xlabel(\"Settled in\")\ngt_3_game_settled_in_plot.set_ylabel(\"Total\")\ngt_3_game_settled_in_plot.set_xticklabels(['REG', 'OT', \"SO\"]) ","4fd16c8a":"gt_4_game_settled_in_plot = lead_losers_pd.loc[lead_losers_pd[\"largest_lead\"] >= 4][\"settled_in\"].value_counts().plot.bar(color=[\"blue\", \"green\", \"red\"])\ngt_4_game_settled_in_plot.set_title(\"Settled in (Lost leads >= 4)\", fontdict = {\"fontsize\": 18})\ngt_4_game_settled_in_plot.set_xlabel(\"Settled in\")\ngt_4_game_settled_in_plot.set_ylabel(\"Total\")","a3314f31":"losing_team_counts = lead_losers_pd[\"losing_team\"].value_counts().plot.bar()\nlosing_team_counts.set_title(\"Lost Leads per Team\", fontdict = {\"fontsize\": 18})\nlosing_team_counts.set_xlabel(\"Team\")\nlosing_team_counts.set_ylabel(\"Total\")","a69c3019":"comeback_team_counts = lead_losers_pd[\"winning_team\"].value_counts().plot.bar()\ncomeback_team_counts.set_title(\"Comeback wins per Team\", fontdict = {\"fontsize\": 18})\ncomeback_team_counts.set_xlabel(\"Team\")\ncomeback_team_counts.set_ylabel(\"Total\")","d543e4e9":"nyi_leads_plot = lead_losers_pd.loc[lead_losers_pd[\"losing_team\"] == \"NYI\"][\"largest_lead_score\"].value_counts().plot.bar(color=\"#F47E2D\")\nnyi_leads_plot.set_title(\"Distribution of lost leads (NYI)\", fontdict = {\"fontsize\": 18})\nnyi_leads_plot.set_xlabel(\"Scores\")\nnyi_leads_plot.set_ylabel(\"Total\")\nnyi_leads_plot.set_ylim(top=30)","8745ea06":"tor_leads_plot = lead_losers_pd.loc[lead_losers_pd[\"losing_team\"] == \"TOR\"][\"largest_lead_score\"].value_counts().plot.bar(color=\"#003876\")\ntor_leads_plot.set_title(\"Distribution of lost leads (TOR)\", fontdict = {\"fontsize\": 18})\ntor_leads_plot.set_xlabel(\"Scores\")\ntor_leads_plot.set_ylabel(\"Total\")\ntor_leads_plot.set_ylim(top=30)","1401b9cf":"pit_leads_plot = lead_losers_pd.loc[lead_losers_pd[\"winning_team\"] == \"PIT\"][\"largest_lead_score\"].value_counts().plot.bar(color=\"#FFC80C\")\npit_leads_plot.set_title(\"Distribution of comeback wins (PIT)\", fontdict = {\"fontsize\": 18})\npit_leads_plot.set_xlabel(\"Scores\")\npit_leads_plot.set_ylabel(\"Total\")\npit_leads_plot.set_ylim(top=30)","4f79a3b7":"pit_leads_plot = lead_losers_pd.loc[lead_losers_pd[\"winning_team\"] == \"MTL\"][\"largest_lead_score\"].value_counts().plot.bar(color=\"red\")\npit_leads_plot.set_title(\"Distribution of comeback wins (MTL)\", fontdict = {\"fontsize\": 18})\npit_leads_plot.set_xlabel(\"Scores\")\npit_leads_plot.set_ylabel(\"Total\")\npit_leads_plot.set_ylim(top=30)","907bd395":"lead_losers_pd[\"largest_lead_score\"].value_counts().multiply(1\/len(lead_losers_pd[\"winning_team\"].value_counts())).to_frame()","8b0a8d4a":"team_names = lead_losers_pd[\"winning_team\"].unique()","9e6138c7":"dicty = {}\nfor team in team_names:\n    result = lead_losers_pd[\"largest_lead_score\"].value_counts().multiply(1\/len(team_names)).subtract(lead_losers_pd.loc[lead_losers_pd[\"losing_team\"] == team][\"largest_lead_score\"].value_counts())\n    dicty[team] = result.divide(lead_losers_pd[\"largest_lead_score\"].value_counts().multiply(1\/len(team_names)))","48147f46":"nyi = dicty[\"NYI\"].plot.bar(color=\"#F47E2D\")\nnyi.set_ylim((-1, 1))\nnyi.set_title(\"Lost Leads Difference with League Average (NYI)\", fontdict = {\"fontsize\": 18})\nnyi.set_xlabel(\"Scores\")\nnyi.set_ylabel(\"Percentage off Average\")","db0aaa59":"tor = dicty[\"TOR\"].plot.bar(color=\"#003876\")\ntor.set_ylim((-1, 1))\ntor.set_title(\"Lost Leads Difference with League Average (TOR)\")\ntor.set_xlabel(\"Scores\")\ntor.set_ylabel(\"Percentage off Average\")","d22dd14a":"pit = dicty[\"TBL\"].plot.bar(color=\"#003E7E\")\npit.set_ylim((-1, 1))\npit.set_title(\"Lost Leads Difference with League Average (TBL)\")\npit.set_xlabel(\"Scores\")\npit.set_ylabel(\"Percentage off Average\")","929a7679":"pit = dicty[\"COL\"].plot.bar(color=\"#003E7E\")\npit.set_ylim((-1, 1))\npit.set_title(\"Lost Leads Difference with League Average (COL)\")\npit.set_xlabel(\"Scores\")\npit.set_ylabel(\"Percentage off Average\")","f8c87e62":"count = 0\nfig = plt.figure(figsize=(120, 120))\nfor step in range(30):\n    ax = fig.add_subplot(5, 6, count+1)\n#     temp_data_frame = df[df['step'].str.contains(step)]\n    dicty[team_names[count]].plot(x = 'Score', y = 'Percentage off Average', kind='bar', legend=True, fontsize=40, ax=ax).set_ylim((-1, 1))\n    ax.set_title(team_names[count], fontdict = {\"fontsize\": 60})\n    ax.set_xlabel(\"Score\", fontsize=60)\n    ax.set_ylabel(\"Percentage off Average\", fontsize=60)\n    ax.get_legend().remove()\n    count += 1","827b7496":"## Game results","b8d50ae9":"Example of game where a lead is lost","8442e728":"Comebacks in regulation vs overtime vs shootout","2c3505ca":"## Team info","83322937":"Data from: https:\/\/www.kaggle.com\/martinellis\/nhl-game-data\/downloads\/nhl-game-data.zip\/4","d9bf4241":"Distribution of lost lead totals","6cc54dcc":"really common to go below average but not very common to be above average","ace1a8de":"Collect which team lost in each game and in what fashion","2098874b":"Combine home and away stats into one row"}}