{"cell_type":{"e9c730b7":"code","787182e0":"code","d966d763":"code","0ac873b5":"code","c73c5ba1":"code","e3f5298d":"code","91e9c15b":"code","80a98907":"code","69f80385":"code","492b707e":"code","4f580c7d":"code","d4622e11":"code","3ab7a36e":"code","28b7bbef":"code","1809efcf":"code","a44af392":"code","ad39f5b7":"code","56dcd726":"code","4a5d220e":"code","07fd604c":"code","9ea06d29":"code","f8edc920":"code","2030f286":"code","a859e509":"code","4c582314":"markdown","d18f7c3e":"markdown","dc034956":"markdown","fa1aa7cc":"markdown"},"source":{"e9c730b7":"import pandas as pd\n\nad = pd.read_csv(\"..\/input\/advertisingg\/Advertising.csv\")\n# ad = pd.read_csv(\"Advertising.csv\", usecols = [1,2,3,4])\n# burda indexi kolon olarak ald\u0131\u011f\u0131 i\u00e7in alttaki \u015fekilde veya bu \u015fekilde \u00e7\u00f6z\u00fclebilir\ndf = ad.copy()\ndf.head()","787182e0":"df = df.iloc[:,1:len(df)] # We prevented from taking indexes as column\ndf.head()","d966d763":"df.describe().T","0ac873b5":"df.isnull().values.any()","c73c5ba1":"df.corr() #we can see corelation between variables ","e3f5298d":"import seaborn as sns\nsns.pairplot(df, kind=\"reg\");","91e9c15b":"sns.jointplot(data=df, x=\"TV\", y = \"sales\", kind = \"reg\");","80a98907":"import statsmodels.api as sm","69f80385":"X = df[[\"TV\"]] # we choose the TV as a independent variable\nX[0:5]","492b707e":"X = sm.add_constant(X)\n# X matrix has a one variable In order to perform matrix operations we add 1 as a variable in X matrix","4f580c7d":"X[0:5]","d4622e11":"y = df[\"sales\"] # we took our dependent variable","3ab7a36e":"lm = sm.OLS(y,X)\n# Ordinary least squares","28b7bbef":"model = lm.fit() # we fitted the model","1809efcf":"model.summary()","a44af392":"model.summary().tables[1]","ad39f5b7":"model.fittedvalues[0:5] # predicted y values via model","56dcd726":"y[0:5] # orginal y values    ","4a5d220e":"print(\"Sales = \" +  str(\"%.2f\" % model.params[0]) + \" + TV\" + \"*\" + str(\"%.2f\" % model.params[1]))","07fd604c":"g = sns.regplot(df[\"TV\"], df[\"sales\"], ci=None, scatter_kws={'color':'r', 's':9})\ng.set_title(\"Model Equation: Sales = 7.03 + TV*0.05\")\ng.set_ylabel(\"Number of Sales\")\ng.set_xlabel(\"TV Expenses\")\nimport matplotlib.pyplot as plt\nplt.xlim(-10,310)\nplt.ylim(bottom=0);","9ea06d29":"from sklearn.linear_model import LinearRegression # implementaion via sklearn","f8edc920":"X = df[[\"TV\"]]\ny = df[\"sales\"]\nreg = LinearRegression() # OOP sample\nmodel = reg.fit(X, y)\nmodel.intercept_ # The point where the y-axis intercept","2030f286":"model.predict(X)[0:15]","a859e509":"model.predict([[30]])\n#Sales forecast when 30 units of ad spend is spent","4c582314":"Prediction\n\nModel equation:\n\nSales = 7.03 + TV * 0.04","d18f7c3e":"This table is most important part. const -> coef indicate the bo .there is also giving us a confidence interval for coefficients[0.025 0.975]\n\nT = bo + b1*X\n\nsales = 7.0326 + 0.0475 * TV","dc034956":"R-squared: the success of the independent variable in explaining the variability in the dependent variable. in this case its nearly %60 explaining.\n\nP>|t| is one of the most important statistics in the summary. It uses the t statistic to produce the p value, a measurement of how likely your coefficient is measured through our model by chance.\nhe p value of 0.000 for TV is saying there is no a 0.00% chance the TV variable has no affect on the dependent variable, sales, and our results aren't produced by chance. Proper model analysis will compare the p value to a previously established alpha value. A common alpha is 0.05, which few of our variable can not pass in this instance.","fa1aa7cc":"### Modeling with Statsmodels"}}