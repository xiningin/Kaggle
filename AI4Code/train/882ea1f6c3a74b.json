{"cell_type":{"9d5721ae":"code","44f44526":"code","8df348e3":"code","e6e3cabb":"code","196cfdf5":"code","48c4c887":"code","4a0b624c":"code","f482eba7":"code","29bbe7f5":"code","39e2e3a7":"code","6b3289bf":"code","a46e27c0":"code","46e32833":"code","c378bb9e":"code","88fa5a0e":"code","f1d20093":"code","d99fdb6c":"code","3ef30686":"code","1531ccb9":"code","ace9b05c":"code","e5444150":"code","c134896d":"code","4d04a8af":"code","49b48299":"markdown","c84f1ad7":"markdown","90a21503":"markdown","fc0a57ed":"markdown","a2f62ad1":"markdown","6aa1f296":"markdown","7130784c":"markdown","ba1730f0":"markdown","eed85296":"markdown","db36cf27":"markdown","2de9ee94":"markdown","2a40ee52":"markdown","0f3021ef":"markdown","a1db424b":"markdown"},"source":{"9d5721ae":"import tensorflow as tf\nprint(tf.__version__)","44f44526":"tf.random.set_seed(42)","8df348e3":"import pandas as pd\nfrom sklearn.datasets import load_iris","e6e3cabb":"data = load_iris()","196cfdf5":"X = data.data","48c4c887":"y = data.target","4a0b624c":"y","f482eba7":"from sklearn.model_selection import train_test_split","29bbe7f5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state =42)","39e2e3a7":"from keras.utils import to_categorical","6b3289bf":"y_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","a46e27c0":"# Import `Sequential` from `keras.models`\nfrom tensorflow.keras import layers","46e32833":"# Initialize the constructor\nmodel = tf.keras.Sequential()","c378bb9e":"# Add an input layer \nmodel.add(layers.Dense(3, activation='sigmoid',input_shape=(4,)))\n\n# Add an output layer \nmodel.add(layers.Dense(3, activation='softmax'))","88fa5a0e":"model.compile(loss='categorical_crossentropy',\n              optimizer='SGD',\n              metrics=['accuracy'])","f1d20093":"print(len(model.layers))\nprint(len(model.inputs))\nprint(len(model.outputs))","d99fdb6c":"model.summary()","3ef30686":"model.get_config()","1531ccb9":"print(X_train.shape)","ace9b05c":"y_train.shape","e5444150":"from keras.utils import to_categorical\nmodel.fit(X_train, y_train,epochs=100, batch_size=1, verbose=1)","c134896d":"import numpy as np\ny_pred = np.round(model.predict(X_test))\n","4d04a8af":"y_pred[0:10]","49b48299":"# Set random seed","c84f1ad7":"# Create train and test data\n\n1. use train_test_split to get train and test set\n2. set a random_state & test_size: 0.25","90a21503":"\n# Make predictions\n\n* Predict labels on one row","fc0a57ed":"# **The Iris Dataset**\n\nThe data set consists of 50 samples from each of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). Four features were measured from each sample: the length and the width of the sepals and petals, in centimeters.\n\nThe dataset contains a set of 150 records under five attributes - petal length, petal width, sepal length, sepal width and species","a2f62ad1":"# Fit the model\n\n* Give train data as training features and labels\n* Epochs: 100\n* Give validation data as testing features and labels","6aa1f296":"# One-hot encode the labels\n\n* convert class vectors (integers) to binary class matrix\n* convert labels\n* number of classes: 3\n* we are doing this to use categorical_crossentropy as loss","7130784c":"\n# Compile the model\n\n* Use SGD as Optimizer\n* Use categorical_crossentropy as loss function\n* Use accuracy as metrics","ba1730f0":"# Get features and label from the dataset in separate variable\n\n1. you can get the features using .data method\n2. you can get the features using .target method","eed85296":"# Please upvote if you liked the kernel\n\nThank you","db36cf27":"# Add a layer\n\n* Use Dense Layer with input shape of 4 (according to the feature set) and number of outputs set to 3\n* Apply Softmax on Dense Layer outputs","2de9ee94":"\n# Import TensorFlow\n\nRun import tensorflow as normal and verify which version was imported as follows:","2a40ee52":"# Import dataset\n\n1. Import iris dataset\n2. Import the dataset using sklearn library","0f3021ef":"# Summarize the model\n\n* Check model layers\n* Understand number of trainable parameters","a1db424b":"#  Initialize a sequential model\n\n* Define a sequential model"}}