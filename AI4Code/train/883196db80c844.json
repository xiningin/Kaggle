{"cell_type":{"4e6b4730":"code","d5cbada0":"code","89eec315":"code","a9d22c1d":"code","c0f683d4":"code","30f29ea7":"code","111c1874":"code","2cbb135e":"code","da3beec8":"code","30c9ff44":"code","2cf6ade4":"code","14b8762d":"code","162ca6d8":"code","75e33007":"code","2288d35d":"code","8d813c1f":"code","cb686d8d":"code","24802072":"code","09c18df6":"code","5a0d2d78":"code","816539f7":"markdown","01266377":"markdown","d5c574c0":"markdown","961fc6f8":"markdown","823ab63d":"markdown","e8dbf056":"markdown","b0533b1f":"markdown","adfa953b":"markdown","6bea4347":"markdown","94f3d132":"markdown","b8dcd308":"markdown"},"source":{"4e6b4730":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfrom os.path import join\n\nimport pandas as pd\nimport numpy as np\n\nimport missingno as msno\n\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import KFold, cross_val_score\nimport xgboost as xgb\nimport lightgbm as lgb\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d5cbada0":"train_data_path = join('..\/input', 'train.csv')\nsub_data_path = join('..\/input', 'test.csv')","89eec315":"data = pd.read_csv(train_data_path)\nsub = pd.read_csv(sub_data_path)\nprint('train data dim : {}'.format(data.shape))\nprint('sub data dim : {}'.format(sub.shape))","a9d22c1d":"y = data['price']\n\ndel data['price']","c0f683d4":"train_len = len(data)\ndata = pd.concat((data, sub), axis=0)","30f29ea7":"data.head()","111c1874":"msno.matrix(data)","2cbb135e":"for c in data.columns:\n    print('{} : {}'.format(c, len(data.loc[pd.isnull(data[c]), c].values)))","da3beec8":"sub_id = data['id'][train_len:]\ndel data['id']\ndata['date'] = data['date'].apply(lambda x : str(x[:6])).astype(str)","30c9ff44":"fig, ax = plt.subplots(10, 2, figsize=(20, 60))\n\n# id \ubcc0\uc218\ub294 \uc81c\uc678\ud558\uace0 \ubd84\ud3ec\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\ncount = 0\ncolumns = data.columns\nfor row in range(10):\n    for col in range(2):\n        sns.kdeplot(data[columns[count]], ax=ax[row][col])\n        ax[row][col].set_title(columns[count], fontsize=15)\n        count+=1\n        if count == 19 :\n            break","2cf6ade4":"skew_columns = ['bedrooms', 'sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement']\n\nfor c in skew_columns:\n    data[c] = np.log1p(data[c].values)","14b8762d":"fig, ax = plt.subplots(3, 2, figsize=(10, 15))\n\ncount = 0\nfor row in range(3):\n    for col in range(2):\n        if count == 5:\n            break\n        sns.kdeplot(data[skew_columns[count]], ax=ax[row][col])\n        ax[row][col].set_title(skew_columns[count], fontsize=15)\n        count+=1\n\n","162ca6d8":"sub = data.iloc[train_len:, :]\nx = data.iloc[:train_len, :]","75e33007":"gboost = GradientBoostingRegressor(random_state=2019)\nxgboost = xgb.XGBRegressor(random_state=2019)\nlightgbm = lgb.LGBMRegressor(random_state=2019)\n\nmodels = [{'model':gboost, 'name':'GradientBoosting'}, {'model':xgboost, 'name':'XGBoost'},\n          {'model':lightgbm, 'name':'LightGBM'}]","2288d35d":"def get_cv_score(models):\n    kfold = KFold(n_splits=5, random_state=2019).get_n_splits(x.values)\n    for m in models:\n        print(\"Model {} CV score : {:.4f}\".format(m['name'], np.mean(cross_val_score(m['model'], x.values, y)), \n                                             kf=kfold))","8d813c1f":"get_cv_score(models)","cb686d8d":"def AveragingBlending(models, x, y, sub_x):\n    for m in models : \n        m['model'].fit(x.values, y)\n    \n    predictions = np.column_stack([\n        m['model'].predict(sub_x.values) for m in models\n    ])\n    return np.mean(predictions, axis=1)","24802072":"y_pred = AveragingBlending(models, x, y, sub)","09c18df6":"sub = pd.DataFrame(data={'id':sub_id,'price':y_pred})","5a0d2d78":"sub.to_csv('submission.csv', index=False)","816539f7":"## 2. \uac04\ub2e8\ud55c \uc804\ucc98\ub9ac \n\uac01 \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574 \uacb0\uce21 \uc720\ubb34\ub97c \ud655\uc778\ud558\uace0, \ubd84\ud3ec\ub97c \ud655\uc778\ud574\ubcf4\uba74\uc11c \uac04\ub2e8\ud558\uac8c \uc804\ucc98\ub9ac\ub97c \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n### \uacb0\uce21\uce58 \ud655\uc778\n\uba3c\uc800 \ub370\uc774\ud130\uc5d0 \uacb0\uce21\uce58\uac00 \uc788\ub294\uc9c0\ub97c \ud655\uc778\ud558\uaca0\uc2b5\ub2c8\ub2e4.<br>\nmissingno \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 matrix \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74, \ub370\uc774\ud130\uc758 \uacb0\uce21 \uc0c1\ud0dc\ub97c \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc0b4\ud3b4\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","01266377":"### \uac01 \ubcc0\uc218\ub4e4\uc758 \ubd84\ud3ec \ud655\uc778\n\ud55c\ucabd\uc73c\ub85c \uce58\uc6b0\uce5c \ubd84\ud3ec\ub294 \ubaa8\ub378\uc774 \uacb0\uacfc\ub97c \uc608\uce21\ud558\uae30\uc5d0 \uc88b\uc9c0 \uc54a\uc740 \uc601\ud5a5\uc744 \ubbf8\uce58\ubbc0\ub85c \ub2e4\ub4ec\uc5b4\uc904 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4.","d5c574c0":"\uc5b4\ub290\uc815\ub3c4 \uce58\uc6b0\uce68\uc774 \uc904\uc5b4\ub4e0 \ubd84\ud3ec\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","961fc6f8":"### Cross Validation\n\uad50\ucc28 \uac80\uc99d\uc744 \ud1b5\ud574 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \uac04\ub2e8\ud788 \ud3c9\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4.","823ab63d":"## 1. \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\npandas\uc758 read_csv \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uc77d\uc5b4\uc624\uace0, \uac01 \ubcc0\uc218\ub4e4\uc774 \ub098\ud0c0\ub0b4\ub294 \uc758\ubbf8\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n1. ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n2. date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n3. price : \ud0c0\uac9f \ubcc0\uc218\uc778 \uc9d1\uc758 \uac00\uaca9\n4. bedrooms : \uce68\uc2e4\uc758 \uc218\n5. bathrooms : \uce68\uc2e4\ub2f9 \ud654\uc7a5\uc2e4 \uac1c\uc218\n6. sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n7. sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n8. floors : \uc9d1\uc758 \uce35 \uc218\n9. waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n10. view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n11. condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n12. grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n13. sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8\n14. sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n15. yr_built : \uc9d1\uc744 \uc9c0\uc740 \ub144\ub3c4\n16. yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n17. zipcode : \uc6b0\ud3b8\ubc88\ud638\n18. lat : \uc704\ub3c4\n19. long : \uacbd\ub3c4\n20. sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n21. sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)","e8dbf056":"\ud68c\uadc0 \ubaa8\ub378\uc758 \uacbd\uc6b0\uc5d0\ub294 cross_val_score \ud568\uc218\uac00 R<sup>2<\/sup>\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.<br>\nR<sup>2<\/sup> \uac12\uc774 1\uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \ubaa8\ub378\uc774 \ub370\uc774\ud130\ub97c \uc798 \ud45c\ud604\ud568\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 3\uac1c \ud2b8\ub9ac \ubaa8\ub378\uc774 \uc0c1\ub2f9\ud788 \ud6c8\ub828 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uad1c\ucc2e\uc740 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4.<br> \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc73c\ub85c 3\uac1c \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uace0, Average Blending\uc744 \ud1b5\ud574 \uc81c\ucd9c \uacb0\uacfc\ub97c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.","b0533b1f":"\ubaa8\ub4e0 \ubcc0\uc218\uc5d0 \uacb0\uce21\uce58\uac00 \uc5c6\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\uc9c0\ub9cc, \ud639\uc2dc \ubaa8\ub974\ub2c8 \ud655\uc2e4\ud558\uac8c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.<br>","adfa953b":"### Make Submission","6bea4347":"## 3. \ubaa8\ub378\ub9c1\n### Average Blending\n\uc5ec\ub7ec\uac00\uc9c0 \ubaa8\ub378\uc758 \uacb0\uacfc\ub97c \uc0b0\uc220 \ud3c9\uade0\uc744 \ud1b5\ud574 Blending \ubaa8\ub378\uc744 \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.","94f3d132":"price, bedrooms, sqft_living, sqft_lot, sqft_above, sqft_basement \ubcc0\uc218\uac00 \ud55c\ucabd\uc73c\ub85c \uce58\uc6b0\uce5c \uacbd\ud5a5\uc744 \ubcf4\uc600\uc2b5\ub2c8\ub2e4.<br>\nlog-scaling\uc744 \ud1b5\ud574 \ub370\uc774\ud130 \ubd84\ud3ec\ub97c \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae5d\uac8c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","b8dcd308":"### id, date \ubcc0\uc218 \uc815\ub9ac\nid \ubcc0\uc218\ub294 \ubaa8\ub378\uc774 \uc9d1\uac12\uc744 \uc608\uce21\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \uc8fc\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc81c\uac70\ud569\ub2c8\ub2e4.<br>\ndate \ubcc0\uc218\ub294 \uc5f0\uc6d4\uc77c\uc2dc\uac04\uc73c\ub85c \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294\ub370, \uc5f0\uc6d4\ub9cc \uace0\ub824\ud558\ub294 \ubc94\uc8fc\ud615 \ubcc0\uc218\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4."}}