{"cell_type":{"a6b60d00":"code","09974a6a":"code","3c10efef":"code","92309c3c":"code","34403940":"code","366f519a":"code","d3befb14":"code","f8079689":"code","fd57b018":"code","312ebdf1":"code","76b92211":"code","11fbea55":"code","97ce1f9e":"code","a8811144":"code","14325f3a":"code","1a7f6dff":"code","71d5e1a2":"code","fcc00e0a":"code","3357c91f":"code","1debcd62":"code","69436b08":"code","eba3da76":"code","76debdeb":"code","39108477":"code","e41f39a2":"code","e7909b2a":"code","19c17115":"code","5a08db96":"code","c4b8734c":"code","6a95dc2d":"code","2fccf6a7":"code","3184fd2c":"code","6a13ff99":"code","009c8d55":"code","0a9a8ffc":"code","dc1a8834":"code","65b4bd80":"code","6eec3c44":"code","2af395da":"code","9d3c5b01":"markdown","4440fa9a":"markdown","f2f92aef":"markdown","a4e78482":"markdown","986031a9":"markdown","9485a255":"markdown","4fec01b4":"markdown"},"source":{"a6b60d00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","09974a6a":"!pip install yfinance","3c10efef":"import yfinance as yf\n\nmsft = yf.Ticker(\"MTSS.ME\")\n\nhist = msft.history(period=\"max\")\nhist","92309c3c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA","34403940":"df = hist\ndf.head()","366f519a":"len(df)","d3befb14":"# Convert index to pandas datetime\ndf.index = pd.to_datetime(df.index, format=\"%Y\/%m\/%d\")","f8079689":"df_final = df.drop(['Open','Low','Close','Volume'], axis=1)","fd57b018":"# Conver to Series to run Dickey-Fuller test\ndf_final = pd.Series(df_final['High'])","312ebdf1":"type(df_final)","76b92211":"def check_stationarity(ts_data):\n    \n    # Rolling statistics\n    roll_mean = ts_data.rolling(30).mean()\n    roll_std = ts_data.rolling(5).std()\n    \n    # Plot rolling statistics\n    fig = plt.figure(figsize=(20,10))\n    plt.subplot(211)\n    plt.plot(ts_data, color='black', label='Original Data')\n    plt.plot(roll_mean, color='red', label='Rolling Mean(30 days)')\n    plt.legend()\n    plt.subplot(212)\n    plt.plot(roll_std, color='green', label='Rolling Std Dev(5 days)')\n    plt.legend()\n    \n    # Dickey-Fuller test\n    print('Dickey-Fuller test results\\n')\n    df_test = adfuller(ts_data, regresults=False)\n    test_result = pd.Series(df_test[0:4], index=['Test Statistic','p-value','# of lags','# of obs'])\n    print(test_result)\n    for k,v in df_test[4].items():\n        print('Critical value at %s: %1.5f' %(k,v))\n    ","11fbea55":"df_final.dropna()","97ce1f9e":"check_stationarity(df_final)","a8811144":"# Log transform time series\ndf_final_log = np.log(df_final)\ndf_final_log.head()","14325f3a":"# Check stationarity\ndf_final_log.dropna(inplace=True)\ncheck_stationarity(df_final_log)","1a7f6dff":"# Log Differencing\ndf_final_log_diff = df_final_log - df_final_log.shift()","71d5e1a2":"df_final_log_diff.dropna(inplace=True)\ncheck_stationarity(df_final_log_diff)","fcc00e0a":"# Differencing\ndf_final_diff = df_final - df_final.shift()","3357c91f":"df_final_diff.dropna(inplace=True)\ncheck_stationarity(df_final_diff)","1debcd62":"from statsmodels.tsa.stattools import acf, pacf","69436b08":"df_acf = acf(df_final_diff)","eba3da76":"df_pacf = pacf(df_final_diff)","76debdeb":"import statsmodels.api as sm","39108477":"fig1 = plt.figure(figsize=(20,10))\nax1 = fig1.add_subplot(211)\nfig1 = sm.graphics.tsa.plot_acf(df_acf, ax=ax1)\nax2 = fig1.add_subplot(212)\nfig1 = sm.graphics.tsa.plot_pacf(df_pacf, ax=ax2)","e41f39a2":"model = ARIMA(df_final_diff, (1,1,0))","e7909b2a":"fit_model = model.fit(full_output=True)","19c17115":"predictions = model.predict(fit_model.params, start=len(df_final_diff)+1, end=len(df_final_diff)+10)","5a08db96":"fit_model.summary()","c4b8734c":"predictions","6a95dc2d":"fit_model.predict(start=len(df_final_diff), end=len(df_final_diff)+40)","2fccf6a7":"pred_model_diff = pd.Series(fit_model.fittedvalues, copy=True)\npred_model_diff.head()","3184fd2c":"# Calculate cummulative sum of the fitted values (cummulative sum of differences)\npred_model_diff_cumsum = pred_model_diff.cumsum()\npred_model_diff_cumsum.head()","6a13ff99":"# Element-wise addition back to original time series\ndf_final_trans = df_final.add(pred_model_diff_cumsum, fill_value=0)\n# Last 5 rows of fitted values\ndf_final_trans.tail()","009c8d55":"# Last 5 rows of original time series\ndf_final.tail()","0a9a8ffc":"# Plot of orignal data and fitted values\nplt.figure(figsize=(20,10))\nplt.plot(df_final, color='black', label='Original data')\nplt.plot(df_final_trans, color='red', label='Fitted Values')\nplt.legend()","dc1a8834":"x = df_final.values\ny = df_final_trans.values","65b4bd80":"# Trend of error\nplt.figure(figsize=(20,8))\nplt.plot((x - y), color='red', label='Delta')\nplt.axhline((x-y).mean(), color='black', label='Delta avg line')\nplt.legend()","6eec3c44":"final_pred = []\nfor i in predictions:\n    t = df_final[-1] + i\n    final_pred.append(t)","2af395da":"final_pred = pd.Series(final_pred)\nfinal_pred","9d3c5b01":"### Log Transformation","4440fa9a":"### Average error appears to be around $0.35 per share","f2f92aef":"### Back-transform data to original scale","a4e78482":"## Stationarity Check","986031a9":"### Log Differencing Transformation","9485a255":"### Input from user to select company for ARIMA model","4fec01b4":"### Simple Differencing Transformation"}}