{"cell_type":{"d91c261f":"code","9ab9e634":"code","f0e62b09":"code","a081dc9d":"code","a2c4429d":"code","6915a36e":"code","0f292aba":"code","ee4ea674":"code","0e3bc5cf":"code","c7d35426":"code","8305543c":"code","9730838f":"code","79146118":"code","0d10e3ab":"code","a4da962f":"code","382cc546":"code","500555e2":"code","3f90c00f":"code","31f2d2a6":"code","b19202bb":"code","412bd849":"code","f41862b4":"code","1d250e7b":"code","ce872bb6":"code","7ae099d1":"code","a7452eb6":"code","71985edb":"code","6ccb2c12":"markdown","4f178535":"markdown","0990141d":"markdown","58d21e12":"markdown","7d4c7e6d":"markdown","8772c3b2":"markdown","8c3aac7a":"markdown","9a08e0e6":"markdown","19645b2b":"markdown","44c95a83":"markdown","8f2e3cff":"markdown","05c8abf9":"markdown","f16250bd":"markdown","12cd8fed":"markdown","52ec3f2a":"markdown","8e3b1326":"markdown","129783ce":"markdown","e0b24a96":"markdown","19231fa8":"markdown","23ffcfeb":"markdown","798dc863":"markdown","09adf8d4":"markdown","bc440edb":"markdown","82e61f91":"markdown","fcfa978f":"markdown","2a430d93":"markdown","26049037":"markdown","22c2b27a":"markdown","1721e399":"markdown","b65b2f17":"markdown"},"source":{"d91c261f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9ab9e634":"titanic = pd.read_csv(\"..\/input\/titanic\/train.csv\")\niris = pd.read_csv(\"..\/input\/iriscsv\/Iris.csv\")\n\nuniform_data = np.random.rand(10,12)\ndata = pd.DataFrame({'x': np.arange(1,101), 'y': np.random.normal(0,4,100)})\nprint(titanic.columns, iris.columns)\n","f0e62b09":"f, ax = plt.subplots(figsize=(5,6))  # Create a figure and a one subplot\nsns.set()                            # Set the matplotlib paramters\nsns.set_style(\"whitegrid\")           # Set the matplotlib paramters\nsns.set_style(\"ticks\", {\"xtick.major.size\": 8, \"ytick.major.size\": 8} )           # Set the matplotlib paramters\nsns.axes_style(\"whitegrid\")           # Set the matplotlib paramters      # Retuns a dict of params or use with with to temporarily set the style","a081dc9d":"g = sns.FacetGrid(titanic, col=\"Survived\", row=\"Sex\")\ng = g.map(plt.hist, \"Age\")","a2c4429d":"sns.factorplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=titanic)","6915a36e":"sns.lmplot(x=\"SepalWidthCm\", y=\"SepalLengthCm\",  hue=\"Species\", data=iris)","0f292aba":"h = sns.PairGrid(iris)\nh = h.map(plt.scatter)","ee4ea674":"sns.pairplot(iris)","0e3bc5cf":"i = sns.JointGrid(x=\"x\", y=\"y\", data=data)\ni = i.plot(sns.regplot, sns.distplot)","c7d35426":"sns.jointplot(\"SepalLengthCm\", \"SepalWidthCm\", data= iris, kind='kde')","8305543c":"sns.stripplot(x=\"Species\", y=\"PetalLengthCm\", data=iris)\n","9730838f":"sns.swarmplot(x=\"Species\", y=\"PetalLengthCm\", data=iris)","79146118":"sns.barplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", data=titanic)","0d10e3ab":"sns.countplot(x=\"Parch\", data=titanic, palette=\"Greens_d\")","a4da962f":"sns.pointplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=titanic, pallette={\"male\":\"g\", \"female\": \"m\"}, markers=[\"^\",\"o\"], linestyles=[\"-\", \"--\"])","382cc546":"sns.boxplot(x=\"Survived\", y=\"Age\", hue=\"Sex\", data=titanic)","500555e2":"sns.boxplot(data=iris, orient=\"h\")","3f90c00f":"sns.violinplot(x=\"Age\", y=\"Sex\", hue=\"Survived\", data=titanic)","31f2d2a6":"ax = sns.regplot(x=\"SepalWidthCm\", y=\"SepalLengthCm\", data=iris)","b19202bb":"plot = sns.distplot(data.y, kde=False, color=\"b\") ","412bd849":"sns.heatmap(uniform_data, vmin=0, vmax=1)","f41862b4":"g.despine(left=True)     # remove left spines \n\ng.set_ylabels(\"Survived\")  # Set the labels of the y-axis \n\ng.set_xticklabels(rotation=45)  #  Set the tick labels for x\n\ng.set_axis_labels(\"Survived\", \"Sex\")  # Set the axis labels\n\nh.set(xlim=(0,5), ylim=(0,5), xticks=[0,2.5,5], yticks=[0,2.5,5])    # Set the limit and ticks of the x-and y-axis","1d250e7b":"plt.title(\"A Title\") # Add plot title\nplt.ylabel(\"Survived\") # Adjust the label of the y-axis\nplt.xlabel(\"Sex\") # Adjust the label of the x-axis\nplt.ylim(0,100) # Adjust the limits of the y-axis\nplt.xlim(0,10) # Adjust the limits of the x-axis\nplt.setp(ax,yticks=[0,5]) # Adjust a plot property\nplt.tight_layout() #Adjust subplot params","ce872bb6":"plt.show() # Show the plot\nplt.savefig(\"foo.png\") # Save the plot as a figure\nplt.savefig(\"foo.png\", transparent=True)  # Save transparent figure \n\nplt.cla() # Clear an axis\nplt.clf() # Clear an entire \nplt.close() # Close a window\n","7ae099d1":"data = pd.DataFrame({'x': np.arange(0,500000,5000), 'y': [140, 242, 371, 523, 742, 1140, 1285, 1679, 2289, 2964, 3414, 3953, 4144, 5824, 7144, 7710, 8585, 10007, 10750, 11421]})","a7452eb6":"#data.plot()\nf, ax = plt.subplots(figsize=(40,20))\nax = sns.lineplot(x=\"x\", y=\"y\", data=data)","71985edb":"datay= [54.6875,125,210.9375,300.7813,402.3438,515.625,656.25,839.8438,988.2813,1148.438,1285.156,1488.281,1570.313,1710.938,1898.438,2097.656,2257.813,2316.406,2597.656,2300.781,3421.875,3414.063,3585.938,4023.438,4171.875,4242.188,4210.938,4507.813,4675.781,4597.656,4371.094,4238.281,4644.531,4546.875,4769.531,4835.938,5136.719,5351.563,5347.656,5804.688,6835.938,8996.094,9277.344,8902.344,7128.906,7285.156,7113.281,6765.625,7566.406,7183.594,7394.531,7519.531,8609.375,9070.313,8332.031,8273.438,9050.781,9234.375,9343.75,9632.813,13542.97,10453.13,10550.78,12550.78,14855.47,11250,11414.06,11207.03,11312.5,14847.66,12878.91,16421.88,13203.13,13472.66,14886.72,15632.81,15968.75,16152.34,15894.53,13937.5,14519.53,13519.53,13492.19,14066.41,14058.59,14214.84,20460.94,17546.88,15726.56,16410.16,20875,19667.97,18324.22,18320.31,18140.63,18335.94,18968.75,23558.59,18125,18949.22]\n\ndata_r = [23.4375,31.25,46.875,105.4688,93.75,136.7188,167.9688,222.6563,250,285.1563,308.5938,332.0313,347.6563,378.9063,496.0938,433.5938,453.125,519.5313,507.8125,519.5313,589.8438,578.125,609.375,667.9688,710.9375,714.8438,894.5313,800.7813,789.0625,808.5938,812.5,988.2813,992.1875,914.0625,1027.344,1023.438,1187.5,1144.531,1082.031,1156.25,1230.469,1312.5,1226.563,1968.75,1355.469,1718.75,1402.344,1734.375,1421.875,2023.438,1628.906,1921.875,1894.531,2003.906,2691.406,2109.375,2464.844,2218.75,3328.125,2128.906,2859.375,2656.25,3828.125,2656.25,2449.219,2894.531,2925.781,3726.563,3085.938,4718.75,3082.031,3421.875,5386.719,4144.531,4113.281,4117.188,4437.5,4429.688,5019.531,4890.625]\n\ndata_w = [93.75,195.3125,187.5,375,367.1875,617.1875,761.7188,953.125,1167.969,1394.531,1582.031,1855.469,2007.813,2242.188,2390.625,2753.906,2761.719,3230.469,3414.063,3546.875,4468.75,4414.063,4554.688,4847.656,5453.125,5472.656,6750,6949.219,6531.25,6628.906,6890.625,7343.75,7589.844,8195.313,8351.563,8664.063,9562.5,10105.47,9671.875,10503.91,11472.66,11250,11511.72,14945.31,13582.03,13175.78,14035.16,14718.75,14941.41,18039.06,15781.25,16335.94,16867.19,17253.91,18980.47,18019.53,18578.13,18914.06,21933.59,21640.63,20003.91,23667.97,23414.06,23671.88,21328.13,22250,24476.56,23113.28,24238.28,24847.66,25507.81,24617.19,25949.22,29210.94,27691.41,26312.5,28105.47,30117.19,27695.31,29566.41]\n#'applicationValuesCount': np.arange(0,400000,5000), \ndata = pd.DataFrame({'timeForAdding_ms': data_w, 'timeForReading_ms': data_r })\nf, ax = plt.subplots(figsize=(40,20))\nax = sns.lineplot(data=data)","6ccb2c12":"# 1. Data","4f178535":"###  3.1.4 Subplot grid for plotting relationships ","0990141d":"### 3.2.6 Violintplot\n\nViolint plot","58d21e12":"Plot data and a  linesr model fit","7d4c7e6d":"###  3.1.3 Plot data and regression model fits across a FacetGrid","8772c3b2":"## 3.3 Regression plots","8c3aac7a":"###  3.1.7 Plot bivariate distibution","9a08e0e6":"### 3.2.3 Count Plot\n\nShow count of observation","19645b2b":"# 4. Further Customization","44c95a83":"###  3.1.5 Plot pairwiase bivariate","8f2e3cff":"Plot univariate distribution","05c8abf9":"###  3.1.6 Grid for bivariate plot vs univariate plots","f16250bd":"Heatmaps","12cd8fed":"## 3.5 Matrix Plots","52ec3f2a":"## 4.1 Axisgrid Objects","8e3b1326":"### 3.2.2 Bar Chart\n\nShow point estimates and confidence intervals with scatterplot glyphs ","129783ce":"###  3.1.1 Subplot grid for plotting conditional relationships","e0b24a96":"## 3.1 Axis Grids","19231fa8":"### 3.2.1 Scatterplot\n\na) Scatterplot with one categorical variable","23ffcfeb":"### 3.2.4 Point Plot\n\nShow point estimates and confidence intervals as rectangular bars ","798dc863":"b) Categorical scatterplot with non-overlapping points","09adf8d4":"# 3. Plotting with Seaborn","bc440edb":"###  3.1.2 Draw a categorical plot onto a Facetgrid","82e61f91":"# 2. Figure Aesthetics","fcfa978f":"## 3.2 Categorical Plots ","2a430d93":"## 4.2 Plot","26049037":"## 3.4 Distribution Plots ","22c2b27a":"### 3.2.5 BoxPlot\n\na) Boxplot","1721e399":"# 5. Show or Save Plot","b65b2f17":"b) Boxplot with wide-form data"}}