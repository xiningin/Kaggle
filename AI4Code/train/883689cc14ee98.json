{"cell_type":{"d48a9666":"code","2bdc2048":"code","17b19f54":"code","8d673a42":"code","c8717291":"code","56a1477e":"code","34b2d7de":"code","2de99916":"code","22981dc6":"code","e2adbbb7":"code","52ae6605":"code","4b603f6c":"code","20b6767f":"code","8172f8f1":"code","223ad593":"code","56259f79":"code","79e4c5af":"code","5a886832":"code","860018d0":"code","b8c7aab7":"code","02a49909":"code","adcbd4c3":"code","a5c3cf70":"code","49fe6d5d":"code","e66b5549":"markdown","c00ea4a6":"markdown"},"source":{"d48a9666":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#pip install mlxtend  \nfrom mlxtend.preprocessing import minmax_scaling\nimport sklearn.model_selection as model_selection","2bdc2048":"data = pd.read_csv('..\/input\/headsizebrain-weight\/dataset.csv')","17b19f54":"data.head()","8d673a42":"data.drop(data.columns[[0,1]], axis=1, inplace=True)","c8717291":"data['Head Size(cm^3)'].head()","56a1477e":"x = data['Head Size(cm^3)'].values\ny = data['Brain Weight(grams)'].values\n","34b2d7de":"plt.figure(figsize=(15,5))\nsns.lmplot(x='Head Size(cm^3)', y = 'Brain Weight(grams)', data = data, fit_reg=True)","2de99916":"def loss(theta,x1,y1):\n    J = (1 \/ len(y1) * 2) * np.power(y1 - np.dot(x1,theta), 2).sum()\n    return J","22981dc6":"def gradiant(alpha, theta, x, y, epoch):\n    cost = []\n    for i in range(epoch):\n        error = loss(theta, x, y)\n        \n        theta = theta - (alpha \/ len(y)) * np.transpose(x) @ (x @ theta - y)\n        \n        cost.append(error)\n    return theta,cost\n","e2adbbb7":"x_sc = minmax_scaling(x, columns=[0])\ny_sc = minmax_scaling(y, columns=[0])","52ae6605":"X_train, X_test, y_train, y_test = model_selection.train_test_split(\n    x_sc, y_sc, train_size=0.65,test_size=0.35, random_state=101)","4b603f6c":"b = np.ones((154,1))","20b6767f":"X_train = np.concatenate((b, X_train),axis=1)","8172f8f1":"epoch = 30000\ntheta = np.ones((2,1))","223ad593":"res,cost = gradiant(0.002,theta, X_train, y_train, epoch)\nres","56259f79":"def pred(X, theta):\n    return np.dot(X, theta)","79e4c5af":"plt.xlabel('Epochs')\nplt.ylabel('Cost')\nep = np.array([i for i in range(epoch)])\nplt.plot(ep, cost, 'm')\nplt.show()","5a886832":"b = np.ones(83).reshape(83,1)\nX_test1 = np.concatenate((b,X_test),axis = 1)","860018d0":"price_pred = pred(X_test1, res)\nplt.scatter(X_test, y_test, color='k')\nplt.plot(X_test, price_pred, color='g')","b8c7aab7":"b = np.ones(83).reshape(83,1)\nX_test1 = np.concatenate((b,X_test),axis = 1)","02a49909":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import learning_curve","adcbd4c3":"reg = LinearRegression().fit(X_train, y_train)\nreg.coef_","a5c3cf70":"price_predict = reg.predict(X_test1)","49fe6d5d":"plt.scatter(X_test, y_test, color='k')\nplt.plot(X_test, price_predict, color='g', label='sklearn')\nplt.plot(X_test, price_pred, color='r', label='myregression')\nplt.legend(loc=\"upper left\")\nplt.show()","e66b5549":"Please help me for getting better my linear regression, Thank you.","c00ea4a6":"Hello everyone\nI am implement linear regression from scratch but i think i had some mistakes please help me and leaver comment if its good.\nthank you."}}