{"cell_type":{"39b66a17":"code","cf16641d":"code","0a581648":"code","3f6e92d9":"code","2483f9a6":"code","d3cceca0":"code","6c97684a":"code","94526cba":"code","ba872dcd":"code","29fc7849":"code","ec44655e":"code","5e1b7981":"code","df528f7d":"code","46cccd0e":"code","abe978fa":"code","0101aa50":"code","f21f48ea":"code","8f235827":"markdown","1a28390b":"markdown","2904954c":"markdown","6e260dd6":"markdown","a6c9a2a7":"markdown","4ab67c3a":"markdown"},"source":{"39b66a17":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np","cf16641d":"# make data\nbloods = {}\n\nbloods['A'] = 30\nbloods['B'] = 24\nbloods['AB'] = 8\nbloods['O'] = 38\n\ndf = pd.DataFrame.from_dict({'Type':bloods.keys(),'Count':bloods.values()})\ndf.head()","0a581648":"# matplotlib\nplt.bar('Type', 'Count',data=df)","3f6e92d9":"# pandas\ndf.plot.bar(x='Type', y='Count')","2483f9a6":"# seaborn\nsns.barplot(x=\"Type\", y=\"Count\", data=df)","d3cceca0":"# matplotlib\nfig, ax = plt.subplots()\nax.pie(df['Count'],labels=df['Type'], autopct='%.2f%%')\n\nplt.show()","6c97684a":"# pandas\ndf.plot.pie(autopct=\"%.2f%%\",y='Count');","94526cba":"# make my theme\ndef set_my_theme():\n    import cycler\n    \n    plt.style.use('default')\n    plt.style.use('fivethirtyeight')\n\n    my_theme = ({'axes.axisbelow': True,\n              'axes.prop_cycle': cycler.cycler('color', ['#30c7c7','#32b9e3', '#fc7158', '#f2bc46', '#98d466', '#9371d9','#bd64b9']),\n\n              'axes.edgecolor': 'white',\n              'axes.grid': True,\n              'axes.labelcolor': '.15',\n              'axes.linewidth': 0.0,\n              'figure.facecolor': 'white',\n              'font.family': ['sans-serif'],\n              'font.sans-serif': ['Arial',\n                                  'Liberation Sans',\n                                  'DejaVu Sans',\n                                  'Bitstream Vera Sans',\n                                  'sans-serif'],\n\n              'grid.color': 'white',\n              'grid.linestyle': '-',\n              'image.cmap': 'jet',\n              'legend.frameon': False,\n              'legend.numpoints': 1,\n              'legend.scatterpoints': 1,\n              'lines.solid_capstyle': 'round',\n              'lines.color': '#38c7bd',\n\n              'patch.force_edgecolor' : True,\n\n              'lines.linewidth': '2',\n              'text.color': '.15',\n              'xtick.color': '.15',\n              'xtick.direction': 'out',\n              'xtick.major.size': 0.0,\n              'xtick.minor.size': 0.0,\n              'ytick.color': '.15',\n              'ytick.direction': 'out',\n              'ytick.major.size': 0.0,\n              'ytick.minor.size': 0.0})\n\n    for style in my_theme :\n        plt.rcParams[style] = my_theme[style]\n        ","ba872dcd":"# matplotlib - my-theme (bar)\nset_my_theme()\n\nplt.title('Blood Type Vs Count', size=8)\nplt.bar('Type', 'Count',data=df)","29fc7849":"# matplotlib - my-theme (pie)\nfig, ax = plt.subplots()\nax.pie(df['Count'],labels=df['Type'], autopct='%.2f%%')\n\nplt.show()","ec44655e":"# matplotlib - plt-theme (bar)\nplt.style.use('fivethirtyeight')\n\nplt.bar('Type', 'Count',data=df,color='b')\nplt.show()","5e1b7981":"# matplotlib - plt-theme (pie)\nplt.style.use('dark_background')\n\nfig, ax = plt.subplots()\nax.pie(df['Count'],labels=df['Type'], autopct='%.2f%%')\n\nplt.show()","df528f7d":"# make data\nfan_speed = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ncpu_temp = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\ndf = pd.DataFrame.from_dict({'fan_speed':fan_speed,'cpu_temp':cpu_temp})\ndf.head()","46cccd0e":"# pandas\nset_my_theme()\ndf.plot.scatter(x='cpu_temp',y='fan_speed')","abe978fa":"# make data\nmy_data = np.random.normal(170, 10, 300)\n\ndf = pd.DataFrame.from_dict({'Numbers':my_data})\ndf.describe()","0101aa50":"# pandas\ndf.plot.hist()","f21f48ea":"# seaborn\nsns.displot(df['Numbers'],kde=True)","8f235827":"## \u062f\u0648\u0645\u06cc\u0646 \u0628\u0648\u062a \u06a9\u0645\u067e \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc \u0641\u06cc\u0644\u0627\u06af\u0631 - \u062a\u0645\u0631\u06cc\u0646 \u062c\u0644\u0633\u0647 \u06f3\nMahdi Ghaemi :)","1a28390b":"3- \u0628\u0627 \u0628\u06a9\u0627\u0631\u06af\u06cc\u0631\u06cc \u06a9\u062a\u0627\u0628\u062e\u0627\u0646\u0647 numpy \u060c 311 \u0645\u0634\u0627\u0647\u062f\u0647 \u06a9\u0647 \u062f\u0627\u0631\u0627\u06cc \u062a\u0648\u0632\u06cc\u0639 \u0646\u0631\u0645\u0627\u0644 \u0628\u0627 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 171 \u0648 \u0627\u0646\u062d\u0631\u0627\u0641 \u0645\u0639\u06cc\u0627\u0631 11 \u0647\u0633\u062a\u0646\u062f \u0631\u0627 \u062a\u0648\u0644\u06cc\u062f \u0646\u0645\u0648\u062f\u0647 \u0648 \u0633\u067e\u0633 \u0628\u0631\u0627\u06cc \u0622\u0646\u0647\u0627 \u06cc\u06a9 \u0647\u0633\u06cc\u062a\u0648\u06af\u0631\u0627\u0645 \u0631\u0633\u0645 \u0646\u0645\u0627\u06cc\u06cc\u062f.","2904954c":"\u0628- \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0641\u0648\u0642 \u0631\u0627 \u0628\u0635\u0648\u0631\u062a \u06cc\u06a9 \u0646\u0645\u0648\u062f\u0627\u0631 \u062f\u0627\u06cc\u0631\u0647 \u0627\u06cc \u0646\u0645\u0627\u06cc\u0634 \u062f\u0647\u06cc\u062f.","6e260dd6":"4- \u0645\u0634\u0627\u0647\u062f\u0627\u062a \u0632\u06cc\u0631 \u0631\u0627 \u062f\u0631 \u0646\u0638\u0631 \u06af\u0631\u0641\u062a\u0647 \u0648 \u0628\u0631\u0627\u06cc \u0622\u0646 \u06cc\u06a9 \u0627\u0633\u06a9\u0627\u062a\u0631 \u067e\u0644\u0627\u062a (scatter plot) \u0631\u0633\u0645 \u0646\u0645\u0627\u06cc\u06cc\u062f. \u0648 \u0628\u0647 \u0646\u0645\u0648\u062f\u0627\u0631 \u062e\u0648\u062f \u0639\u0646\u0648\u0627\u0646 \u0627\u0635\u0644\u06cc\u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u062d\u0648\u0631 \u0627\u0641\u0642\u06cc \u0648 \u0639\u0645\u0648\u062f\u06cc \u0627\u0636\u0627\u0641\u0647 \u0646\u0645\u0627\u06cc\u06cc\u062f (\u0639\u0646\u0627\u0648\u06cc\u0646 \u0641\u0631\u0636\u06cc)","a6c9a2a7":"1- \u0627\u0632 111 \u0646\u0641\u0631\u060c 31 \u0646\u0641\u0631 \u062f\u0627\u0631\u0627\u06cc \u06af\u0631\u0648\u0647 \u062e\u0648\u0646\u06cc A\u060c 42\u0646\u0641\u0631 \u062f\u0627\u0631\u0627\u06cc \u06af\u0631\u0648\u0647 \u062e\u0648\u0646\u06cc B\u060c 8 \u0646\u0641\u0631 \u062f\u0627\u0631\u0627\u06cc \u06af\u0631\u0648\u0647 \u062e\u0648\u0646\u06ccAB \n<br>\u0648\n38 \u0646\u0641\u0631 \u062f\u0627\u0631\u0627\u06cc \u06af\u0631\u0648\u0647 \u062e\u0648\u0646\u06cc O \u0647\u0633\u062a\u0646\u062f.","4ab67c3a":"\u062c \u2013 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 matplotlib styling \u0633\u0639\u06cc \u06a9\u0646\u06cc\u062f \u0646\u0645\u0648\u062f\u0627\u0631 \u0631\u0627 \u0634\u06a9\u06cc\u0644 \u062a\u0631 \u0646\u0645\u0627\u06cc\u06cc\u062f."}}