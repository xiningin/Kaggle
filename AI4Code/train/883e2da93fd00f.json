{"cell_type":{"65919e4e":"code","327427fd":"code","aa91f37d":"code","a2724b5d":"code","e01389c3":"code","56f055b4":"code","9bc59ca5":"code","2868f74f":"code","e7a4bdfe":"code","f39bc6c3":"code","4d87146b":"code","5e7f6fac":"markdown","f1b40b27":"markdown"},"source":{"65919e4e":"import pandas as pd\nimport numpy as np\nfrom pathlib import Path\nfrom datetime import datetime\nimport time\n\nINPUT=Path(\"..\/input\/g-research-crypto-forecasting\")","327427fd":"def ResidualizeMarket(df, mktColumn, window):\n  if mktColumn not in df.columns:\n    return df\n\n  mkt = df[mktColumn]\n  num = df.multiply(mkt.values, axis=0).rolling(window).mean() #numerator of linear regression coefficient\n  denom = mkt.multiply(mkt.values, axis=0).rolling(window).mean()  #denominator of linear regression coefficient\n  beta = np.nan_to_num( num.values.T \/ denom.values, nan=0., posinf=0., neginf=0.)  #if regression fell over, use beta of 0\n\n  resultRet = df - (beta * mkt.values).T  #perform residualization\n  resultBeta = 0.*df + beta.T  #shape beta\n\n  return resultRet.drop(columns=[mktColumn]), resultBeta.drop(columns=[mktColumn])\n","aa91f37d":"# Function log_return_ahead computes R_t = log(P_{t+16} \/ P_{t+1})\ndef log_return_ahead(series, periods=1):\n    return np.exp(-np.log(series).diff(periods=-periods).shift(-1)) - 1","a2724b5d":"train_df = pd.read_csv(INPUT\/\"train.csv\")","e01389c3":"prices = train_df.pivot(index=[\"timestamp\"], columns=[\"Asset_ID\"], values=[\"Close\"])\n\nprices.columns = [f\"A{a}\" for a in range(14)]\n\nprices = prices.reindex(range(prices.index[0], prices.index[-1]+60,60), method='ffill')\n\nprices.index = prices.index.map(lambda x: datetime.utcfromtimestamp(x))\nprices['mday'] = prices.index.day\nprices['minute'] = prices.index.minute\nprices['hour'] = prices.index.hour\n# remove first minute of each month\nprices = prices[~((prices['mday']==1) & (prices['minute']==0) & (prices['hour']==0))]\nprices = prices.drop(columns=['mday','minute','hour'])\nprices.sort_index(inplace=True)\n","56f055b4":"target = train_df.pivot(index=[\"timestamp\"], columns=[\"Asset_ID\"], values=[\"Target\"])\ntarget.columns = [f\"A{a}\" for a in range(14)]\ntarget = target.reindex(range(target.index[0], target.index[-1]+60,60), method='ffill')\ntarget.index = target.index.map(lambda x: datetime.utcfromtimestamp(x))\ntarget.sort_index(inplace=True)","9bc59ca5":"log_returns_15min = log_return_ahead(prices, periods=15)","2868f74f":"assets_df = pd.read_csv(INPUT\/\"asset_details.csv\", index_col = \"Asset_ID\")\nassets_df.sort_index(inplace=True)","e7a4bdfe":"weights = assets_df.Weight.values\nweighted_avg_market_log_returns = log_returns_15min.mul(weights, axis='columns').div(log_returns_15min.notnull().mul(weights, axis='columns').sum(axis=1), axis=0).sum(axis=1)","f39bc6c3":"log_returns_15min[\"market\"] = weighted_avg_market_log_returns\nresidualized_market_returns, beta = ResidualizeMarket(log_returns_15min, \"market\", window=3750)","4d87146b":"target_diffs = residualized_market_returns - target\n\n#target_diffs.dropna(inplace=True)\nprint(np.nanmean(np.abs(target_diffs.values)))\nprint(np.nanmax(np.abs(target_diffs.values)))","5e7f6fac":"## Target Computation\n\nBased off of https:\/\/www.kaggle.com\/vi2018\/g-research-crypto-repro-target-computation\n\nThis notebook attempts to compute target as described here:\n\nhttps:\/\/www.kaggle.com\/c\/g-research-crypto-forecasting\/discussion\/286778\n\nVersion 2.0 improves readability by avoiding some unnecessary shift operations.","f1b40b27":"## Target Computation\n\nBased off of https:\/\/www.kaggle.com\/vi2018\/g-research-crypto-repro-target-computation\n\nThis notebook attempts to compute target as described here:\n\nhttps:\/\/www.kaggle.com\/c\/g-research-crypto-forecasting\/discussion\/286778\n\nVersion 2.0 improves readability by avoiding some unnecessary shift operations."}}