{"cell_type":{"bdc8c70c":"code","929b3cd3":"code","2cd5c865":"code","251287a2":"code","ca92f578":"code","518d7033":"code","8be02e00":"code","bf008d61":"code","a64d7d89":"code","67939bac":"code","db377f2c":"code","8d9b0197":"markdown","c7e85f9a":"markdown","171460b7":"markdown","2cc7fd74":"markdown","2625f2ce":"markdown","678b1de4":"markdown","e46b5f2d":"markdown"},"source":{"bdc8c70c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras import layers\nfrom keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.models import Model\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n%matplotlib inline","929b3cd3":"# Load the train and test datasets\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","2cd5c865":"# Train dataset has 'label' in the first column\n# Split it and make X and Y\nY_train_orig = train['label']\nX_train_orig = train.drop(labels=['label'], axis=1)\nprint(f'Shape of X is: {X_train_orig.shape}')\nprint(f'Shape of Y is: {Y_train_orig.shape}')","251287a2":"# Standardize dataset. Divide by 255 to get all x values between 0 and 1\nX_train = X_train_orig \/ 255.\ntest = test \/ 255.\n\n# Convert Y to one-hot vectors\nY_train = pd.get_dummies(Y_train_orig)\n\n# Reshape X to dimensions (m, n_h, n_w, n_c)\nX_train = X_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)\n\nprint(X_train.shape)\nprint(Y_train.shape)\n\nX_train, X_dev, Y_train, Y_dev = train_test_split(X_train, Y_train, test_size=0.1, random_state=42)\n\n# X_train, X_dev, Y_train, Y_dev = X_train.T, X_dev.T, Y_train.T, Y_dev.T\nprint(X_train.shape)\nprint(Y_train.shape)","ca92f578":"index = 560\nplt.figure()\nplt.imshow(X_train[index][:,:,0])\nplt.colorbar()\nplt.grid(False)\nprint (\"y = \" + str(np.squeeze(Y_train.values[index, :])))","518d7033":"def model(input_shape):\n    # Define the input placeholder as a tensor with shape input_shape. Think of this as your input image!\n    X_input = Input(input_shape)\n\n    # Zero-Padding: pads the border of X_input with zeroes\n    X = ZeroPadding2D((3, 3))(X_input)\n\n    # CONV -> BN -> RELU Block applied to X\n    X = Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0')(X)\n    X = BatchNormalization(axis = 3, name = 'bn0')(X)\n    X = Activation('relu')(X)\n\n    # MAXPOOL\n    X = MaxPooling2D((2, 2), name='max_pool0')(X)\n    \n    # CONV -> BN -> RELU Block applied to X\n    X = Conv2D(64, (7, 7), strides = (1, 1), name = 'conv1')(X)\n    X = BatchNormalization(axis = 3, name = 'bn1')(X)\n    X = Activation('relu')(X)\n\n    # MAXPOOL\n    X = MaxPooling2D((2, 2), name='max_pool1')(X)\n\n    # FLATTEN X (means convert it to a vector) + FULLYCONNECTED\n    X = Flatten()(X)\n    X = Dense(128, activation='relu', name='fc0')(X)\n    X = Dense(128, activation='relu', name='fc1')(X)\n    X = Dense(10, activation='softmax', name='fc2')(X)\n\n    # Create model. This creates your Keras model instance, you'll use this instance to train\/test the model.\n    model = Model(inputs = X_input, outputs = X, name='DigitRecognizer')\n\n    return model","8be02e00":"datagen = ImageDataGenerator(\n    rotation_range=10,\n    zoom_range=0.1,\n    width_shift_range=0.1,\n    height_shift_range=0.1, \n    horizontal_flip=False,\n    vertical_flip=False)\n\ndatagen.fit(X_train)","bf008d61":"# Trying some things for improving performance\nreduce_lr = ReduceLROnPlateau(monitor='val_acc', factor=0.5, patience=3, min_lr=0.00001, verbose=1)","a64d7d89":"print(X_train.shape[1:])\ndigit_recognizer = model(X_train.shape[1:])\ndigit_recognizer.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])\n# digit_recognizer.fit(x = X_train, y = Y_train, epochs = 5, batch_size = 16, validation_data=(X_dev, Y_dev))\ndigit_recognizer.fit_generator(datagen.flow(X_train, Y_train, batch_size=32), \n                               epochs=30, \n                               steps_per_epoch=len(X_train) \/ 32, \n                               validation_data=(X_dev, Y_dev), \n                               callbacks=[reduce_lr])","67939bac":"# predict results\nresults = digit_recognizer.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","db377f2c":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"digit_recognizer_cnn.csv\",index=False)","8d9b0197":"## View a sample image and the label that is assigned to it","c7e85f9a":"## Generate output predictions for the test samples","171460b7":"## Data Augmentation\n\nIn order to avoid overfitting the model to the training set, we need to add more training data. We do this by generating synthetic data from the provided dataset by -\n1. Rotating the images by a few degrees  \n2. Zooming into the images by a few factors\n3. Shifting images vertically or horizontally","2cc7fd74":"## Load the datasets and split into X and Y","2625f2ce":"## Train model and validate on dev dataset to see generalization performance.","678b1de4":"## Annealing Method\n\nManage the learning rate such that if there is no significant improvement in the accuracy over few epoch, reduce the learning rate so that the steps taken by the model are smaller and helps in getting to the minima faster instead of oscillating around it.","e46b5f2d":"## Standardization, Reshaping for Keras, and One-hot encoding\n\n- Standardize the pixel values so that all the X values are between 0 and 1 instead of between 0 and 255\n- Convert Y values into 1-hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\n- Split the training set into Train and Dev datasets. Reshape dataset into 4 dimentional matrix where\n    *     m: number of training examples\n    *     n_h: pixels represnting height of image\n    *     n_w: pixels representing width of image\n    *     n_c: pixels representing the RGB channels"}}