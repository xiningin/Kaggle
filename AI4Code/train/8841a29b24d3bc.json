{"cell_type":{"601ead34":"code","78d80a48":"code","5b6a17a4":"code","13bd9c04":"code","5b4d410f":"code","4de025f7":"code","a65de669":"code","dc0582a3":"code","15bdd472":"code","d7e17ce5":"code","1f79568e":"code","b7d220d9":"code","72935b6e":"code","2649eac3":"code","b177eeb6":"code","34d649a0":"code","49487eae":"code","4e8b8f61":"code","04e37862":"code","fce734c0":"code","ae9d2bc6":"code","cc73da9b":"code","0e3f65ee":"code","8e0e11b6":"code","09df6d47":"code","2baf5e8c":"code","a0045899":"code","5dd82e8d":"code","73f5415a":"code","d1dbf57e":"code","5f22c5a6":"code","f22c9a4d":"code","d21e805a":"code","5b4e8f60":"code","1ad81fa8":"code","5da103c9":"code","d23fe463":"code","4bec9143":"code","1d1e1b7b":"code","ed56d5af":"code","963b8b4c":"code","d2f04174":"code","e3e8edf5":"code","988aec60":"code","7429aa67":"code","f826000f":"code","72239f75":"code","4120d832":"code","56a93572":"code","80994a4f":"markdown","58da4bc4":"markdown","bcd570d1":"markdown","78a51da1":"markdown","bccdf098":"markdown","676287af":"markdown","97816146":"markdown","867df713":"markdown","90862ed5":"markdown","0bf24051":"markdown","e0e571f2":"markdown","82028441":"markdown","8b877e8c":"markdown","19607168":"markdown","d349ce54":"markdown","6281ad7a":"markdown","75679af7":"markdown","caa51049":"markdown","16588e87":"markdown","bd8e5457":"markdown","bf9c766a":"markdown","cfabba75":"markdown","c41a3c30":"markdown","3ad8b9bc":"markdown","efce1330":"markdown","9025474a":"markdown","9f63b4d9":"markdown","4f8c76e8":"markdown"},"source":{"601ead34":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n%matplotlib inline","78d80a48":"!pip install chart-studio\n\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","5b6a17a4":"init_notebook_mode(connected=True) \ndf = pd.read_csv(\"..\/input\/spacelaunches\/space_payloads.csv\")\ncountries = pd.read_csv(\"..\/input\/country-mapping-iso-continent-region\/continents2.csv\")\n\ndf.head()","13bd9c04":"countries.head()","5b4d410f":"countries[\"name\"] = countries[\"name\"].apply(lambda x : x.lower())","4de025f7":"df[ df[\"first_nation\"].str.contains(\"[^a-z ]\", regex=True)]","a65de669":"df[ df[\"first_nation\"].str.contains(\"[^a-z ]\", regex=True)][\"first_nation\"].value_counts().tail(30)","dc0582a3":"mask_uk =  df[\"first_nation\"].str.contains(\"u.k.\")\ndf.loc[ mask_uk, \"first_nation\"] = \"uk\"\nmask =  df[\"first_nation\"].str.contains(\"[^a-z ]\", regex=True)\ndf.loc[ mask, \"second_nation\"] = df[mask][\"first_nation\"].apply(lambda x: re.split(\"[^a-z ]\",x)[1].strip())\ndf.loc[ mask, \"first_nation\"] = df[mask][\"first_nation\"].apply(lambda x: re.split(\"[^a-z ]\",x)[0].strip())\n\ndf[\"first_nation\"] = df[\"first_nation\"].str.strip()\ndf[\"second_nation\"] = df[\"second_nation\"].str.strip()","15bdd472":"def unmatched_codes(launch_site_codes,site_codes):\n    unmatched_code_list = list(set(launch_site_codes)-set(site_codes))\n    return unmatched_code_list","d7e17ce5":"unmatched_codes(df[\"first_nation\"],countries[\"name\"])","1f79568e":"print(countries[ countries[\"name\"].str.contains(\"korea\") ])\nprint(countries[ countries[\"name\"].str.contains(\"czech\") ])\n\ndf[\"first_nation\"].replace(to_replace={\"uk\":\"united kingdom\",\"usa\":\"united states\",\"czechoslovakia\":\"czech republic\",\"ussr\":\"russia\"}, inplace=True)\n\nkorea_mask = countries[\"name\"].str.contains(\"south korea\")\nskorea_mask = countries[\"name\"].str.contains(\"korea, republic of\")\ncountries.loc[korea_mask,\"name\"] = \"north korea\"\ncountries.loc[skorea_mask,\"name\"] = \"south korea\"\nunmatched_codes(df[\"first_nation\"],countries[\"name\"])","b7d220d9":" df[\"country\"].value_counts().tail(30)","72935b6e":"df[\"country\"] = df[\"country\"].apply(lambda x: re.split(\"[\/]\",x)[0].lower().strip())\ndf[\"country\"].replace(to_replace={\"uk\":\"united kingdom\",\"usa\":\"united states\",\"czechoslovakia\":\"czech republic\",\"ussr\":\"russia\"}, inplace=True)","2649eac3":"df[\"country\"].value_counts().tail(30)","b177eeb6":"unmatched_codes(df[\"country\"],countries[\"name\"])","34d649a0":"nation_payloads_with_code = df.join(countries.set_index(\"name\"), on=\"first_nation\", lsuffix=\"payload_\", rsuffix=\"country_\",  how=\"right\")\nnation_payloads_with_code.describe()","49487eae":"nation_payloads_with_code.columns","4e8b8f61":"#Use group by, and create a smaller dataframe with year, month of the launch, the country code, and the number of launches in that period for the selected country.\nnations_per_month = nation_payloads_with_code.groupby( [\"year\",\"month\",\"alpha-3\"]).agg({\"nation\":\"count\",\"date\":\"first\"}).reset_index().rename(columns={\"nation\":\"payloads\",\"alpha-3\":\"country\"})\nnations_per_month[\"year-month\"] = pd.to_datetime(nations_per_month[\"date\"]).dt.to_period(\"M\")\nnations_per_month[\"month\"] = nations_per_month[\"month\"].astype(int)\nnations_per_month[\"year\"] = nations_per_month[\"year\"].astype(int)\n\n#The same, but grouping by year.\nnations_per_year = nation_payloads_with_code.groupby( [\"year\",\"alpha-3\"]).agg({\"nation\":\"count\"}).reset_index().rename(columns={\"nation\":\"payloads\",\"alpha-3\":\"country\"})\nnations_per_month\n#nations_per_year.groupby( [\"year\"]).agg({\"country\":\"first\"}).size().reset_index().rename(columns={0:\"payloads\",\"alpha-3\":\"country\"})","04e37862":"!wget https:\/\/github.com\/plotly\/orca\/releases\/download\/v1.2.1\/orca-1.2.1-x86_64.AppImage -O \/usr\/local\/bin\/orca\n!chmod +x \/usr\/local\/bin\/orca\n!apt-get install -y xvfb libgtk2.0-0 libgconf-2-4\nimport sys\n!conda install --yes --prefix {sys.prefix} -c plotly plotly-orca \n\nimport plotly.graph_objects as go","fce734c0":"import chart_studio.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.io as pio\n\ninit_notebook_mode(connected=False)\n\nfirst_month = nations_per_month.loc[0].to_frame().transpose()\n\ndata = dict(\n        type = 'choropleth',\n        locations = first_month[\"country\"],\n        z = first_month[\"payloads\"],\n        text = first_month[\"payloads\"],\n         marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n        colorbar = {\n            'title' : 'Number of payloads in orbit for the month',\n            'x' : 1.2\n        },\n        colorscale= 'Viridis',\n      ) \n\nlayout = dict(\n    title = dict(text = 'Satellites put to space in ' + str(first_month.loc[0][\"month\"]) + '\/'+ str(first_month.loc[0][\"year\"]),\n                x = 0.5),\n    geo = dict(\n        showframe = False,\n        projection = {'type':'mercator'}\n    ),\n    legend = dict(\n    xanchor = \"left\",\n    yanchor = \"bottom\"),\n    width = 1000,\n    height = 700\n    \n)\n\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap, animation_opts={'frame': {'duration': 100}} )\n","ae9d2bc6":"first_frame = nations_per_month.loc[1400].to_frame().transpose()\nsecond_frame = nations_per_month.loc[1401].to_frame().transpose()\nthird_frame = nations_per_month.loc[1402].to_frame().transpose()\n\ndata = dict(\n        type = 'choropleth',\n        locations = first_frame[\"country\"],\n        z = first_frame[\"payloads\"],\n        text = first_frame[\"payloads\"],\n         marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n        colorbar = {'title' : 'Total number of payloads'},\n                colorscale= 'Portland',\n\n      ) \n\ndata2 = dict(\n        type = 'choropleth',\n        locations = second_frame[\"country\"],\n        z = second_frame[\"payloads\"],\n        text = second_frame[\"payloads\"],\n         marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n        colorbar = {'title' : 'Total number of payloads'},\n                colorscale= 'Portland',\n\n      ) \ndata3 = dict(\n        type = 'choropleth',\n        locations = third_frame[\"country\"],\n        z = third_frame[\"payloads\"],\n        text = third_frame[\"payloads\"],\n         marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n        colorbar = {'title' : 'Total number of payloads'},\n                colorscale= 'Portland',\n\n      ) \n\nlayout = dict(\n   title = dict(text = 'Number of Satellites per country ',\n                x = 0.5),\n    geo = dict(\n        showframe = False,\n        projection = {'type':'mercator'}\n    ),\n    width = 1000,\n    height = 700,\n     legend = dict(\n    xanchor = \"left\",\n    yanchor = \"bottom\")\n)\n\n#If we wanted an interactive plot, we would use iplot like this. For demonstration purposes, we'll plot each frame separately.\n#https:\/\/plotly.com\/python\/getting-started-with-chart-studio\/ \n#choromap_multi = go.Figure(data = [data],layout = layout, frames=[\n#    go.Frame({'data': data2}),\n#    go.Frame({'data':data3}),{'layout':dict(\n#    title = 'Second Test',\n#    geo = dict(\n#        showframe = False,\n#        projection = {'type':'mercator'}\n#    )\n#    , updatemenus=[dict(\n#            type=\"buttons\",\n#            buttons=[dict(label=\"Play\",\n#                          method=\"animate\",\n#                          args=[None])])]\n#        \n#)}])\n#iplot(choromap_multi, animation_opts={'frame': {'duration': 100}} )\n\niplot(go.Figure(data=[data],layout=layout))","cc73da9b":"iplot(go.Figure(data=[data2],layout=layout))","0e3f65ee":"iplot(go.Figure(data=[data3],layout=layout))","8e0e11b6":"rows_1 = nations_per_month[ (nations_per_month[\"year\"]<1960) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"})\nrows_2 = nations_per_month[ (nations_per_month[\"year\"]<1961) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"})\nprint(rows_1.reset_index())\nprint(rows_2.reset_index())","09df6d47":"sample_period_dataframe = nations_per_month[ nations_per_month[\"year-month\"]<=pd.Period(\"1959-1\") ]\nprint(sample_period_dataframe)\nprint(sample_period_dataframe.groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}))","2baf5e8c":"def setup_map_plot(dataframe, start_year=1957,end_year=2020,  save_images=False, title = \"Map\"):\n    projection = \"miller\"\n    frames = []\n\n    first_year = dataframe[ dataframe[\"year\"]==start_year]\n\n    base_layout = dict(\n        title = 'Test',\n        geo = dict(\n            showframe = False,\n            projection = {'type':projection}\n        )\n\n    )\n\n    for i in range(start_year,end_year):\n        for m in range(1,12):\n            row =  dataframe[ dataframe[\"year-month\"]<=pd.Period(str(i)+\"-\"+str(m)) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index()\n            \n            layout = dict(\n                title = dict(text = 'Number of Satellites launched per country in ' + str(m)+'-'+str(i),\n                        x = 0.5),\n                geo = dict(\n                    showframe = False,\n                    projection = {'type':projection},\n                    lataxis = {\"range\":[-55,90]}\n                ),\n            width = 1000,\n            height = 700,\n             legend = dict(xanchor = \"left\",yanchor = \"bottom\")\n\n            )   \n\n            data = dict(\n                type = 'choropleth',\n                locations = row[\"country\"],\n                z = row[\"payloads\"],\n                text = row[\"payloads\"],\n                 marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n                colorbar = {'title' : title},\n                        colorscale= 'Portland',\n\n              ) \n            frames.append(go.Frame({\"data\":data,\"layout\":layout}))\n            if save_images:\n                choro_save = go.Figure(data=[data], layout = layout)\n                choro_save.write_image(title+\"_\"+str(i+m)+\".png\")\n            \n    frames.append({'layout':dict(\n        title = '',\n        geo = dict(\n            showframe = False,\n            projection = {'type':projection}\n        )\n        , updatemenus=[dict(\n                type=\"buttons\",\n                buttons=[dict(label=\"Play\",\n                              method=\"animate\",\n                              args=[None])])]        \n    )})\n    \n    first_frame = dict(\n        type = 'choropleth',\n        locations = first_year[\"country\"],\n        z = first_year[\"payloads\"],\n        text = first_year[\"payloads\"],\n         marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n        colorbar = {\n            'title' : title,\n            'x' : 1.2\n        },\n                colorscale= 'Viridis',\n\n      ) \n\n    \n    \n    return (frames, first_frame, layout)","a0045899":"frames, data, layout = setup_map_plot(nations_per_month, start_year=1958, end_year=1965, title = \"Number of payloads in orbit\");\n\nchoromap_multi = go.Figure(data=[data], layout = layout, frames=frames)\n\niplot(choromap_multi, animation_opts={'frame': {'duration': 100}} )\n#pio.write_html(choromap, file='hello_world_2.html', auto_open=True)","5dd82e8d":"nations_per_month.groupby(\"country\").agg({\"payloads\":\"sum\"}).sort_values(\"payloads\",ascending=False).head(5).plot(kind=\"bar\")","73f5415a":"starting_period = pd.Period(\"1970-1\")\nmonths = 12\n\nprint(\"12 month period since 1970\")\nprint(nations_per_month[  ( nations_per_month[\"year-month\"]>=starting_period ) & ( nations_per_month[\"year-month\"]<=starting_period + months ) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index())\n\n#Now, we'll run this for 2 years, one month at a time, and get 24 different dataframes.\n\ntest_df = pd.DataFrame()\n\nfor i in range(12):\n    period = starting_period + i\n    tdf = nations_per_month[  ( nations_per_month[\"year-month\"]>=period ) & ( nations_per_month[\"year-month\"]<=period + months ) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index()\n    tdf[\"frame\"] = i;\n    test_df = test_df.append(tdf)\n\nfig = plt.figure(figsize=(14,10))\n\nfig = sns.lineplot(data=test_df,y=\"payloads\",x=\"frame\", hue=\"country\")","d1dbf57e":"def setup_map_plot(dataframe, frame_calculation, start_year=1957,end_year=2020, chart_title = \"Title\", title = \"Map\", filename=\"map\", save_images=False, **kwargs):\n    projection = \"miller\"\n    frames = []\n\n    first_year = dataframe[ dataframe[\"year\"]==start_year]\n\n    base_layout = dict(\n        title = 'Test',\n        geo = dict(\n            showframe = False,\n            projection = {'type':projection}\n        )\n\n    )\n    \n    z_min = 0;\n    z_max = 0;\n\n    rows = [frame_calculation(dataframe,i,m,extra_args=kwargs) for i in range(start_year,end_year) for m in range(1,12)]\n    \n    for i in range(start_year,end_year):\n        for m in range(1,12):\n            row =  frame_calculation(dataframe,i,m,extra_args=kwargs)\n            z_max = max(z_max,row[\"payloads\"].max())\n    \n        \n    data = dict(\n        type = 'choropleth',\n        locations = first_year[\"country\"],\n        z = first_year[\"payloads\"],\n        zmax = z_max,\n        text = first_year[\"payloads\"],\n         marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n        colorbar = {'title' : title},\n                colorscale= 'Wistia',\n\n      ) \n    layout = dict(\n        title = dict(text = chart_title,\n                x = 0.5),\n        geo = dict(\n            showframe = False,\n            projection = {'type':projection},\n            lataxis = {\"range\":[-55,90]}\n        ),\n    width = 1000,\n    height = 700,\n     legend = dict(xanchor = \"left\",yanchor = \"bottom\")\n\n    )   \n    \n    z_range = (z_max-z_min)\n\n    for i,row in enumerate(rows):\n        data = dict(\n                type = 'choropleth',\n                locations = row[\"country\"],\n                z = row[\"payloads\"],\n                zmax = z_max,\n                zmin = z_min,\n                text = row[\"payloads\"],\n                 marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n                colorbar = {'title' : title,'x':1.2},\n                colorscale = \"portland\",\n\n              )\n        \n        layout[\"title\"][\"text\"] = chart_title + str((1+i)%12)+'-'+str( (start_year)+(i\/\/12) )\n        frames.append(go.Frame({\"data\":data,\"layout\":layout}))\n        \n        if save_images:\n            choro_save = go.Figure(data=[data], layout = layout)\n            choro_save.write_image(str(i)+\"_gif_\"+filename+\".png\")\n\n    frames.append({'layout':dict(\n        title = title,\n        geo = dict(\n            showframe = False,\n            projection = {'type':projection}\n        )\n        , updatemenus=[dict(\n                type=\"buttons\",\n                buttons=[dict(label=\"Play\",\n                              method=\"animate\",\n                              args=[None])])]        \n    )})\n  \n\n    return (frames, data, layout)","5f22c5a6":"def cummulative_rows(dataframe,year,month, extra_args):\n    rows =  dataframe[ dataframe[\"year-month\"]<=pd.Period(str(year)+\"-\"+str(month)) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index()\n    return rows;\n\ndef running_average_rows(dataframe,year,month, extra_args):\n    months = extra_args[\"months\"]\n    starting_period = pd.Period(str(year)+\"-\"+str(month))\n    period = starting_period + months\n    rows = dataframe[  ( dataframe[\"year-month\"]>starting_period ) & ( dataframe[\"year-month\"]<=period ) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index()\n    return rows;\n\n\n","f22c9a4d":"window_size = 48\n\nframes, data, layout = setup_map_plot(nations_per_month, running_average_rows, start_year = 2012, end_year = 2018,\n                                      chart_title = 'Satellites belonging to each country launched in the ' + str(window_size) + \" months after \",\n                                      title=\"Satellites put in orbit last \"+ str(window_size) + \" months\", filename=\"running_avg_4_years\", save_images=False, months=window_size, column=\"payload\");\nchoromap_multi = go.Figure(data=[data], layout = layout, frames=frames)\n\n\n\niplot(choromap_multi, animation_opts={'frame': {'duration': 500}} )","d21e805a":"months = 12\nyear = 2012\nmonth = 4\nstarting_period = pd.Period(str(year)+\"-\"+str(month))\nperiod = starting_period + months\nrows_window = nations_per_month[  ( nations_per_month[\"year-month\"]>starting_period ) & ( nations_per_month[\"year-month\"]<=period ) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index()\nrows_cummulative = nations_per_month[  ( nations_per_month[\"year-month\"]<=starting_period ) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index()\nrows_cummulative[\"payloads\"] = 0.01\nrows_window[\"payloads\"] = rows_window[\"payloads\"]*10\nmerged = rows_cummulative.merge(rows_window,how=\"outer\",on=\"country\",suffixes=(\"_window\",\"_cummulative\"))\nmerged = merged.fillna(0)\nmerged.head(10)","5b4e8f60":"merged[\"year\"] = merged[\"year_window\"].astype(int)\nmerged[\"payloads\"] = merged[ [\"payloads_cummulative\",\"payloads_window\"] ].max(axis=1)\nmerged = merged[ [\"year\",\"payloads\",\"country\"] ]\nmerged.head()","1ad81fa8":"def running_average_with_memory_rows(dataframe,year,month, extra_args):\n    months = extra_args[\"months\"]\n    starting_period = pd.Period(str(year)+\"-\"+str(month))\n    period = starting_period + months\n    rows_window = dataframe[  ( dataframe[\"year-month\"]>starting_period ) & ( dataframe[\"year-month\"]<=period ) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index()\n    rows_cummulative = dataframe[  ( dataframe[\"year-month\"]<=starting_period ) ].groupby(\"country\").agg({\"payloads\":\"sum\",\"year\":\"last\"}).reset_index()\n    rows_cummulative[\"payloads\"] = 0.01\n    merged = rows_cummulative.merge(rows_window,how=\"outer\",on=\"country\",suffixes=(\"_window\",\"_cummulative\"))\n    merged = merged.fillna(0)\n    merged[\"year\"] = merged[\"year_window\"].astype(int)\n    merged[\"payloads\"] = merged[ [\"payloads_cummulative\",\"payloads_window\"] ].max(axis=1)\n    return merged[ [\"year\",\"payloads\",\"country\"] ]\n    \n","5da103c9":"dec_2019_satellites = running_average_with_memory_rows(nations_per_month,2019,12,extra_args={'months': 12})\ndec_2019_satellites.tail(10)","d23fe463":"dec_2019_satellites[\"payloads\"].hist(bins=30)","4bec9143":"def transform_payload_count(count):\n    if count == 0.01:\n        return np.log10(1)\n    elif count == 1:\n        return np.log10(1.1)\n    else:\n        return np.log10(count)","1d1e1b7b":"dec_2019_satellites[\"payloads\"].apply(transform_payload_count)","ed56d5af":"def setup_map_plot(dataframe, frame_calculation, start_year=1957,end_year=2020, chart_title = \"Title\", title = \"Map\", filename=\"map\", save_images=False, **kwargs):\n    projection = \"miller\"\n    frames = []\n\n    first_year = dataframe[ dataframe[\"year\"]==start_year]\n\n    base_layout = dict(\n        title = 'Test',\n        geo = dict(\n            showframe = False,\n            projection = {'type':projection}\n        )\n\n    )\n    \n    z_min = 0;\n    z_max = 0;\n\n    rows = [frame_calculation(dataframe,i,m,extra_args=kwargs) for i in range(start_year,end_year) for m in range(1,12)]\n    \n    for i in range(start_year,end_year):\n        for m in range(1,12):\n            row =  frame_calculation(dataframe,i,m,extra_args=kwargs)\n            z_max = max(z_max,row[\"payloads\"].apply(transform_payload_count).max())\n\n    layout = dict(\n        title = dict(text = chart_title,\n                x = 0.5),\n        geo = dict(\n            showframe = False,\n            projection = {'type':projection},\n            lataxis = {\"range\":[-55,90]}\n        ),\n    width = 800,\n    height = 600,\n     legend = dict(xanchor = \"left\",yanchor = \"bottom\")\n\n    )   \n    tick_values = [0,0.2,0.4,0.6,1]\n    z_range = (z_max-z_min)\n    #smallest_value = (0.9)\/(z_range)\n    smallest_value = 0.001\n    print(\"factor is \", smallest_value)\n    for i,row in enumerate(rows):\n        data = dict(\n                type = 'choropleth',\n                locations = row[\"country\"],\n                z = row[\"payloads\"].apply(transform_payload_count),\n                zmax = z_max,\n                zmin = z_min,\n                text = row[\"payloads\"],\n                 marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n                colorbar = {'title' : title,'x':1.2,'tickmode': \"array\",\n                            'tickvals': [tval * z_range for tval in tick_values],\n                            'ticktext': [np.power(10,tval * z_range).astype(int) for tval in tick_values]\n                           },\n                colorscale = [[0, 'rgb(90,90,90, 0.5)'],\n                      [smallest_value, 'rgb(90,90,90,0.5)'],\n                      [smallest_value, 'rgb(0,255,0,0.5)'],\n                      [0.5, 'rgb(0,255,255,0.5)'],\n                      [1, 'rgb(0,0,255,0.5)'],\n                     ],\n\n              )\n        \n        layout[\"title\"][\"text\"] = chart_title + str(1+(i)%12)+'-'+str( (start_year)+(i\/\/12) )\n        frames.append(go.Frame({\"data\":data,\"layout\":layout}))\n        \n        if save_images:\n            choro_save = go.Figure(data=[data], layout = layout)\n            choro_save.write_image(str(i)+\"_gif_\"+filename+\".png\")\n\n    frames.append({'layout':dict(\n        title = title,\n        geo = dict(\n            showframe = False,\n            projection = {'type':projection}\n        )\n        , updatemenus=[dict(\n                type=\"buttons\",\n                buttons=[dict(label=\"Play\",\n                              method=\"animate\",\n                              args=[None])])]        \n    )})\n  \n\n    return (frames, data, layout)","963b8b4c":"window_size = 24\n\nframes, data, layout = setup_map_plot(nations_per_month, running_average_with_memory_rows, start_year = 1957, end_year = 2020,\n                                      chart_title = 'Satellites belonging to each country launched in the ' + str(window_size) + \" months after \",\n                                      title=\"Satellites in orbit last \"+ str(window_size) + \" months\",filename=\"running_avg_memory_2_years\",save_images=False, months=window_size );\nchoromap_multi = go.Figure(data=[data], layout = layout, frames=frames)\n\n\n\niplot(choromap_multi, animation_opts={'frame': {'duration': 100}} )","d2f04174":"!pip install Pillow","e3e8edf5":"setup_map_plot(nations_per_month, running_average_with_memory_rows, start_year = 1957, end_year = 2020,\n                                      chart_title = 'Satellites belonging to each country launched in the ' + str(window_size) + \" months after \",\n                                      title=\"Satellites in orbit last \"+ str(window_size) + \" months\",filename=\"1_running_avg_memory_2_years\",save_images=True, months=24 );\n\nsetup_map_plot(nations_per_month, running_average_rows, start_year = 1957, end_year = 2020,\n                                      chart_title = 'Satellites belonging to each country launched in the ' + str(window_size) + \" months after \",\n                                      title=\"Satellites put in orbit last \"+ str(window_size) + \" months\", filename=\"2_running_avg_2_years\", save_images=True, months=24);\n","988aec60":"!ls *2_running_avg_2_years*.png","7429aa67":"import glob\nfrom PIL import Image\n\ngif_1 = \"1_running_avg_memory_2_years\"\ngif_2 = \"2_running_avg_2_years\"\n\n'''Build a gif with all the images starting with the given prefix.\n'''\ndef pngs_to_gif(file_prefix):\n    # filepaths\n    fp_in = \".\/*_gif_\"+file_prefix+\"*.png\"\n    fp_out = \"gif_\"+file_prefix+\"_image.gif\"\n\n    # https:\/\/pillow.readthedocs.io\/en\/stable\/handbook\/image-file-formats.html#gif\n    img, *imgs = [Image.open(f) for f in [\".\/\"+f.split(\"_gif_\")[0].replace(\".\/\",\"\")+\"_gif_\"+file_prefix+\".png\" for f in sorted([f.split(\"_gif_\")[0].replace(\".\/\",\"\") for f in glob.glob(fp_in)], key=int) ] ]\n    img.save(fp=fp_out, format='GIF', append_images=imgs,\n             save_all=True, duration=200, loop=0)\n    \npngs_to_gif(gif_1)\npngs_to_gif(gif_2)","f826000f":"!ls -ltr *.gif","72239f75":"\nfrom IPython.display import FileLink\nFileLink(r'gif_'+gif_1+'_image.gif')\n","4120d832":"FileLink(r'gif_'+gif_2+'_image.gif')","56a93572":"!rm -rf *.png","80994a4f":"Putting it all together:","58da4bc4":"It works! It's not very pretty, but it works. We only displayed the data for the first month in our dataset, in 1957, with the USSR (which we renamed to Russia) launching their first satellite. we'll do a second test now, trying to animate a plot with different frames. There are several ways. We'll be passing several \"frames\" to the Figure object we build, in this case the 1400th month in our dataframe, and two months after that.","bcd570d1":"Finally, we'll create a gif from the output images, using our \"save_images\" parameters we'll create a series of png files for each frame of our map, and combine for export. Some of the files can be a bit large!","78a51da1":"These lines are necessary in order to run in Google Colab. In case you are running in Google Colab, this should works. If you are running your jupyter notebook locally, you might need to install the orca package in some other way (just removing the ! sign and running each command individually before each should be enough).","bccdf098":"Now we are ready to join! We'll create a nations with payloads dataset, joining on the first_nation column. ","676287af":"Several countries are not in the list. We'll replace the values for USA and the UK, and consider the USSR as Russia. We'll also fix czechoslovakia and North Korea. For satellites that mark their nation as International or Europe, we'll do nothing for the time being. Remember our goal is to visualize the access to space in a map, as the years go by.\n\nAfter some review of our dataset, the \"countries\" csv seems to have a mistake: country code \"KP\" is listed as north korea but should be south korea. We'll fix this as well.","97816146":"But that's not enough, since we also will be using the month. In each of our rows, we have the year and month a payload was launched, as our period. Using that, we can slice our dataset.","867df713":"Now, how many countries are used in the \"first_country\" column of the dataset, and are absent in the country list? ","90862ed5":"That's pretty good. It would also be nice if our map could \"remember\" what countries have launched in the past, to be able to tell them apart from countries that haven't launched yet. In order to do that, we'll define a new function and pass it as a parameter for our map plot function: It'll return the running average, but countries that have launched in the past will be included with \"0.1\" payloads.","0bf24051":"# Animated Maps with country satellite information\n\nPreviously, we examined some trends in access to space: how many launches and what payloads were put in orbit lately. Now we'll visualize some of that information in a map. We'll use plotly choropleth Maps. Besides our space launch dataset, we will be using a list of country codes, [available here](https:\/\/www.kaggle.com\/andradaolteanu\/country-mapping-iso-continent-region) with the full name of the country and the continent: in order to properly color a country in the map, we will need the country ISO code. ","e0e571f2":"Finally, we build a link to be able to download the files","82028441":"To fix this, we use a mask, and split the nation column by any of those characters. Any country after a non-letter character we will send to the \"second_country\" column. The UK will be handled separately.","8b877e8c":"One extra thing: redifining the function to plot the log of the payloads: The vast majority of our values are between 0 and 20, with few above 100 and 400. With a logarithmic scale we'll be able to visualize that information better. We'll define a function to transform our payload, keeping our fake 0.01 value to signify past launches as 0, a single launch as log(1.1), and log of the number of payloads for the rest.","19607168":"Taking a look at the first_nation and second_nation colums, some contain several countries. Some satellites are jointly opperated. Others may have changed ownership while in orbit.","d349ce54":"# Plotting\n\nWhat would we like to see first? First, a few tests to get Choropleth Maps working. Our final goal is an animated map with each passing month, and the space launches that took place at that time.\n\nSo we'll begin by preparing our data. We'll be using the period abstraction here to get the information summarized by month. A Period will represent the month and year the launch took place, and it is convenient since we can add and substract months from it easily. Remember the columns we had: alpha-3 has the country cide, year and month the moment of the launch. We are interested in those right now.\n\nWe'll group by year, month, and country code, and count how many times a nation has put a payload in space in that period. As \"date\" we'll keep the first one in the group, since any date will do for calculating the period.\n\nWe rename our columns, and create a new year-month column with the period abstraction.","6281ad7a":"We will now define a new function putting it all together. With the dataframe and some parameters, we'll build the figure, data, and layout needed to plot. We'll also make the map a bit smaller, hiding Antarctica.","75679af7":"# Cleaning\n\nFirst, time to clean our datasets. For easier comparisons, we'll lowercase the country name. ","caa51049":"As a quick reminder, the \"nation\" column contains the nation owner of the satellite launched, \"country\" stores the launch site's country. \"first_nation\" and \"second_nation\" are used for satellites that belong to more than one country, or had their ownership transfered.","16588e87":"To have our slice of dataframe ready, we'll keep the larger value between the cummulative and the window values, for the \"payloads\" column.","bd8e5457":"This is not too bad, but since Russia and the US account for a significant number of the launches, we can not really see any new trends emerging, for example in the last few years. If we take a look at the top 5 countries, we notice the imbalance.","bf9c766a":"Clean the \"country\" column as well","cfabba75":"There's still a big difference, but we'll modify our function and see how that works out. We'll be passing the portion of code that creates the frame as a callback, in order to test several window sizes. And, as you might have noticed, the scale varies wildly from one moment to the other. That's not useful, so we'll fix the minimum and maximum values of z, checking the global max when we compute our data.\n\nFurthermore, in order to deal with the large difference in values from our scale, we won't use a continuous color map, but segment our scale conviniently to have the smallest values use a different color.\n\nTo do this, we compute the smallest value in our set of data, and map that value to a 0-1 scale. (the input for the color scale is an array [0 to 1, [rgb] ]. So any value below 0.9 (we'll see why later on) will be the lowest \"threshold\" in our scale, and we'll paint that gray. From there, we'll use a green -> blue color scale. It goes from [0,255,0] to [0,255,255], and then removes green to have only blue in the higher values: [0,0,255]\n\nThat scale won't be linear, however: the lowest 20% will account for most of our color values. Once a country is above a certain threshold, we don't really care about the difference The upper 80% we'll then have most of the higher, \"only blue\" values.","c41a3c30":"We seem to have missed some 200 launches (the count for year and region-code is different). Those may be because they are international launches, european, or the country code wasn't registered. Being a bit sloppy, we'll let that slide and go on with our map.","3ad8b9bc":"The problem with this approach is each frame only shows a single month. It's hard to see a trend if we only visualize what countries launch any given month. It would be better to see thes results accumulate over time, and instead of each of our frames displaying how many satellites were launched at a given months, show instead how much satellites has a given country put to space up to that point.\n\nTo build the data we need, first we find all the rows before a given year, group by country, and then sum. For instance:","efce1330":"It's necessary to make sure our country names are clean, and join our launch dataset with the country list. In order to do that, we start by looking for countries with unusual characters in their name (any non-letter). ","9025474a":"We'll try solving this using a running average of the payloads in the last few years, and plot that. We'll use a \"sliding window\" of valid periods, just using pd.Period + N, with N the number of months we'd like to consider.","9f63b4d9":"These are the functions that will create the rows to plot in our map. To make it more usable later, we'll allow the target column (the one we'll sum) as a parameter","4f8c76e8":"Now, in order to display our map we'll use choropleth maps, from plotly. The code should be easy to understand, and we won't cover how to use the library. The documentation [is extensive](https:\/\/plotly.com\/python\/choropleth-maps\/) and should help making sense of the code.\n\nWe need to build a layout, and our data. In our layout, we'll define the type of projection we want for our map (mercator, in this case), and the title of our plot. In the data, we'll specify how to interpret our dataframe. We'll use only the first month. We need to specify where to get the locations to plot in the map (in this case, country codes), in the location key of the data dictionary. z is the value we want to \"paint\" that location with. In our case, the number of launches. Colorbar and Colorscale will affect how the color bar is displayed next to the map."}}