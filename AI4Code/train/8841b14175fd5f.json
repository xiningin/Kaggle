{"cell_type":{"16d7127d":"code","25239c3f":"code","a3d07f58":"code","350637ca":"code","2224288b":"code","47f0d675":"code","80523c0b":"code","649be330":"code","621743af":"code","7033ae5c":"code","ecd22700":"code","36ccc87b":"code","db7c6841":"code","9ece9740":"code","d57cf98c":"code","0b50e28f":"code","a7c9a48d":"code","85a12075":"code","c0d0c870":"code","1e143973":"code","2dfbefc4":"code","8dfff0ac":"code","8be7c19b":"code","ed0f0c9a":"code","a4599676":"code","33469bad":"code","9229fb24":"code","b440452d":"code","b67ebaf0":"code","d61cb83f":"code","5c673d6f":"code","5e29d9cb":"code","1e9a4e3c":"code","e7a2aa3f":"code","b65d44b6":"code","87e631d0":"code","d09a4f2c":"markdown","dce63324":"markdown","1a1afd8f":"markdown","c9b7d354":"markdown","0ddc36af":"markdown","fff8d33d":"markdown","2f1de56e":"markdown","56d26255":"markdown","168b0e1a":"markdown","b71e3173":"markdown","65992436":"markdown","781eb302":"markdown","ff8f8a73":"markdown","7a5ece00":"markdown","da3cf9a5":"markdown","979d069c":"markdown","10615b3f":"markdown"},"source":{"16d7127d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25239c3f":"class person:\n    def __init__(self,a,b,c):\n        self.a = a\n        self.b = b\n        self.c = c\n    def __str__(self):\n        return \"Hii! My name is utsav\"","a3d07f58":"p = person(3,4,5)\nprint(p)","350637ca":"#parent class\nclass person:\n    def __init__(self,a,b,c):\n        self.a = a\n        self.b = b\n        self.c = c\n    def __str__(self):\n        return \"Hii! My name is utsav. \"\np = person(3,4,5)\nprint(p)","2224288b":"#child class\nclass student(person):\n    def __init(self,student_id,*args):\n        super(student,self).__init__(*args)\n        self.student_id = student_id\n    def __str__(self):\n        return super(student,self).__str__() + \"I am a student\"","47f0d675":"s = student(3,4,5)","80523c0b":"print(p)\nprint(s)","649be330":"class tyre:\n    def __init__(self, branch, baise, opt_pre):\n        self.branch = branch\n        self.baise = baise\n        self.opt_pre = opt_pre\n    def __str__(self):\n        return str(self.branch) + \" \" + str(self.baise) + \" \" + str(self.opt_pre)\n\nt = tyre(\"mumbai\", 50, 20)\nprint(t)","621743af":"class engine:\n    def __init__(self, fuel_type, noise):\n        self.fuel_type = fuel_type\n        self.noise = noise\n       \n    def __str__(self):\n        return str(self.fuel_type) + \" \" + str(self.noise)\n\ne = engine(\"petrol\", 40)\nprint(e)","7033ae5c":"class body:\n    def __init__(self, body_size):\n        self.body_size = body_size\n    def __str__(self):\n        return \"The body size is\" + str(self.body_size)\n\nb = body(500)\nprint(b)","ecd22700":"class car:\n    def __init__(self, ti, ei, bi):\n        self.ti = ti\n        self.ei = ei\n        self.bi = bi\n    def __str__(self):\n        return str(self.ti) + \" \" + str(self.ei) + \" \" + str(self.bi)","36ccc87b":"c = car(t,e,b)\nprint(c)","db7c6841":"c = car(t,e,\"The body size is500\")\nprint(c)","9ece9740":"def add(a,b):\n    return a + b","d57cf98c":"add(\"utsav\",\"gada\")","0b50e28f":"add (5,4)","a7c9a48d":"add([1,2,3,4],[5,6,7,8])","85a12075":"%%writefile xyz.txt\nmy name is utsav","c0d0c870":"pwd()","1e143973":"f = open(\"xyz.txt\")\nf","2dfbefc4":"f.seek(5) #points to the 5th location","8dfff0ac":"f.read() #reads from the pointed location","8be7c19b":"#updating a file\nf1 = open(\"xyz.txt\", \"w+\") #write mode\nf1.write(\"Hey! This is Utsav Gada\")","ed0f0c9a":"f1.seek(0)\nf1.read()","a4599676":"#Multiple lines\nf2 = open(\"xyz.txt\", \"w+\") #write mode\nf2.write(\"Hey! This is Utsav Gada \\ndfgrfgfdf \\nfdgfgfdf \\nfvdfbfbfbfb \\ndvfvfbdf\")","33469bad":"#method 1\nfor i in open(\"xyz.txt\"):\n    print(i)","9229fb24":"#method 2\nf2.seek(0)\nf2.readlines()","b440452d":"from io import StringIO","b67ebaf0":"s = input()","d61cb83f":"s1 = StringIO(s)","5c673d6f":"type(s)","5e29d9cb":"type(s1)","1e9a4e3c":"#Example (Using file method read() s1 can be implemented)\ns1.seek(0)\ns1.read()","e7a2aa3f":"try:\n    a = int(input())\n    b = 5\/a\n    print(b)\nexcept:\n    print(\"There is an error in the code\")\nelse:\n    print(\"The code ran perfectly\")\nfinally:\n    print(\"This line will be printed irrespective of error or not\")","b65d44b6":"try:\n    a = int(input())\n    b = 5\/a\n    print(b)\nexcept:\n    print(\"There is an error in the code\")\nelse:\n    print(\"The code ran perfectly\")\nfinally:\n    print(\"This line will be printed irrespective of error or not\")","87e631d0":"#If you want to print the exact error\ntry:\n    a = int(input())\n    b = 5\/a\n    print(b)\nexcept Exception as e:\n    print(e)","d09a4f2c":"# Polymorphism\nDifferent behaviour of the same entity","dce63324":"The word polymorphism means having many forms. In programming, polymorphism means same function name (but different signatures) being uses for different types.","1a1afd8f":"# OOPS Concepts","c9b7d354":"## Composite Encapsulation","0ddc36af":"## To convert a string to file like operation, convert the string into StringIO","fff8d33d":"## All the characters and their Functions","2f1de56e":"Overriding is the property of a class to change the implementation of a method provided by one of its base classes.\n\nOverriding is a very important part of OOP since it makes inheritance utilize its full power. By using method overriding a class may \"copy\" another class, avoiding duplicated code, and at the same time enhance or customize part of it. Method overriding is thus a part of the inheritance mechanism.\n\nIn Python method overriding occurs by simply defining in the child class  a method with the same name of a method in the parent class. When you  define a method in the object you make this latter able to satisfy that  method call, so the implementations of its ancestors do not come in  play.","56d26255":"# Encapsulation","168b0e1a":"Overloading, in the context of programming, refers to the ability of a function or an operator to behave in different ways depending on the parameters that are passed to the function, or the operands that the operator acts on.\n\nOverloading a method fosters reusability. For instance, instead of writing multiple methods that differ only slightly, we can write one method and overload it. Overloading also improves code clarity and eliminates complexity.","b71e3173":"# Overloading","65992436":"## Dynamic Encapsulation\n\nWhere we can provide both objects and local values","781eb302":"Note : Now the 's1' variable can be considered for file like operations but 's' variable cannot. The supported operations can be checked by clicking the TAB button after the variable.","ff8f8a73":"Encapsulation is one of the fundamental concepts in object-oriented programming (OOP). It describes the idea of wrapping data and the methods that work on data within one unit. This puts restrictions on accessing variables and methods directly and can prevent the accidental modification of data. To prevent accidental change, an object\u2019s variable can only be changed by an object\u2019s method. Those types of variables are known as private variable. \n\nA class is an example of encapsulation as it encapsulates all the data that is member functions, variables, etc.","7a5ece00":"# Exception Handling","da3cf9a5":"# Overriding","979d069c":"# File Handling","10615b3f":"![image.png](attachment:7106545d-a872-445d-8bd3-159d767c4f0b.png)"}}