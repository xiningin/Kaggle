{"cell_type":{"893db76d":"code","38611abb":"code","27c5bc21":"code","6052b36c":"code","23fa6f16":"code","14ef9e47":"code","26d24fca":"code","e8cd1d51":"code","79907824":"code","3f068a92":"code","db1481c2":"code","3ac10a1e":"code","1851cdaa":"code","52629400":"code","857aedcc":"code","10309a20":"code","fbe352a1":"code","c0e7f1fa":"code","39e3363c":"code","2ff53462":"code","5d387692":"code","b3a00fdb":"code","35e09b3a":"code","b794e44f":"code","24361a37":"code","5f0f5959":"code","d4e83255":"code","232893b7":"code","5b968802":"code","89a43d34":"code","2c585029":"code","f59b3693":"code","c823bc0f":"code","7a80a6af":"code","b1328063":"code","79c2e70d":"code","34747ffc":"code","15c5ee80":"code","7d46d299":"code","d6d1077d":"code","9b178a92":"code","18e602ba":"code","4d685282":"code","321405ec":"code","c57c3113":"code","48ad0bc2":"code","12e05ea8":"code","8f556e98":"code","63ea48e2":"code","15855eb2":"code","13ed9f05":"code","3fdc328b":"code","a172157e":"code","d839d08f":"code","1de62603":"code","3bb5dabd":"code","64836730":"code","a9593702":"code","59f4102c":"code","0190265f":"code","d36178fa":"code","d680fbf4":"code","54332403":"code","1b32adf9":"code","3b4d259d":"code","953cc8c4":"code","6b8a31db":"code","6a495160":"code","1954d4f3":"code","599db62a":"code","f101fb2b":"code","562f5c0f":"code","d5b39d39":"code","ec9ac584":"code","4f2db4fb":"code","d5e5434d":"code","c55ebca0":"code","79e0ac2b":"code","fc2933e6":"code","b0752679":"code","3cf23588":"code","001da8c9":"code","c24deca4":"code","cea152d8":"code","c354f0b0":"code","5309c404":"code","09c0e07a":"code","dc1a53eb":"code","7ec78d9d":"code","2ec346f4":"code","57f20f06":"code","240a48be":"code","98d6840e":"code","137e65e4":"code","85e57980":"code","13e7efcf":"code","8d9adedd":"code","8fd6e21a":"code","903e59e8":"code","0ff39f7a":"code","9f67b86c":"code","0ec6b881":"code","b883ade7":"code","bc79b908":"code","64c219d2":"code","128d4028":"code","3e3bb10e":"code","bcb63efe":"code","7d5e3060":"code","e999bb2d":"code","780e6ecf":"code","0d29d5ad":"code","74142a0a":"code","3bed1dd7":"code","e6e96f37":"code","bb502b85":"code","468d6b79":"code","9c8fd966":"code","eafe7a86":"code","39b8d173":"code","413e7e0d":"code","f924b124":"code","2b5fda12":"code","832a4ec4":"code","198e31e2":"code","a8d9d693":"code","08d9fc14":"code","dd058eb4":"markdown","1eda4ca1":"markdown"},"source":{"893db76d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38611abb":"df = pd.read_csv('..\/input\/avacado-price-prediction\/Avocado.csv')","27c5bc21":"df.head()","6052b36c":"df = df.drop('Unnamed: 0', axis = 1)","23fa6f16":"df.Date.count()","14ef9e47":"df.AveragePrice.describe()","26d24fca":"df.AveragePrice.hist()","e8cd1d51":"df['Total Volume'].describe()","79907824":"df['Total Volume'].hist()","3f068a92":"\ndf['4046'].describe()","db1481c2":"df['4046'].hist()","3ac10a1e":"df['XLarge Bags'].describe()","1851cdaa":"df['XLarge Bags'].hist()","52629400":"df.type.value_counts()","857aedcc":"df.region.value_counts()","10309a20":"df.year.value_counts()","fbe352a1":"df.columns","c0e7f1fa":"df = df.rename(columns = {'Total Volume' : 'totalVolume', '4046' : 'PLU4046', '4225' : 'PLU4225', '4770' : 'PLU4770', 'Total Bags' : 'totalBags', \\\n          'Small Bags' : 'smallBags', 'Large Bags' : 'largeBags', 'XLarge Bags' : 'xLargeBags', 'Date' : 'date', 'AveragePrice' : 'averagePrice'})","39e3363c":"df.head()","2ff53462":"from sklearn.preprocessing import MinMaxScaler","5d387692":"scalerMinMax = MinMaxScaler()","b3a00fdb":"df.columns[2:10]","35e09b3a":"scalerMinMax.fit(df[df.columns[2:10]])","b794e44f":"scalerMinMax.min_","24361a37":"scalerMinMax.scale_","5f0f5959":"scalerMinMax.data_min_","d4e83255":"scalerMinMax.data_max_","232893b7":"scalerMinMax.data_range_","5b968802":"df[df.columns[2:10]] = scalerMinMax.transform(df[df.columns[2:10]])","89a43d34":"df.head()","2c585029":"df['type'] = df.type.astype('category')","f59b3693":"df = df.drop('year', axis = 1)","c823bc0f":"df['type'].cat.categories","7a80a6af":"df['type'] = df.type.cat.codes","b1328063":"df['region'] = df.region.astype('category')","79c2e70d":"df.region.cat.categories","34747ffc":"df['region'] = df.region.cat.codes","15c5ee80":"df['date'] = pd.to_datetime(df.date)","7d46d299":"df.dtypes","d6d1077d":"df.date.min()","9b178a92":"df.date.max()","18e602ba":"df.date.count()","4d685282":"df.date.nunique()","321405ec":"df['dayOfWeek'] = df.date.dt.dayofweek","c57c3113":"df['month'] = df.date.dt.month ","48ad0bc2":"df['firstPartOfMonth'] = df.date.dt.day <= 10","12e05ea8":"df['secondPartOfMonth'] = ((df.date.dt.day > 10) & (df.date.dt.day <= 20))","8f556e98":"df['thirdPartOfMonth'] = df.date.dt.day > 20","63ea48e2":"df['day'] = df.date.dt.day","15855eb2":"df.head()","13ed9f05":"df.firstPartOfMonth.astype('int')","3fdc328b":"df['firstPartOfMonth'] = df.firstPartOfMonth.astype('int')","a172157e":"df['secondPartOfMonth'] = df.secondPartOfMonth.astype('int')","d839d08f":"df['thirdPartOfMonth'] = df.thirdPartOfMonth.astype('int')","1de62603":"df.head()","3bb5dabd":"df = df.drop('date', axis = 1)","64836730":"df.corr()","a9593702":"from sklearn.model_selection import train_test_split","59f4102c":"df.averagePrice.count()","0190265f":"df.averagePrice.hist()","d36178fa":"df.averagePrice.describe()","d680fbf4":"X_train, X_test, y_train, y_test = train_test_split(df.drop('averagePrice', axis = 1), df.averagePrice, test_size = 5000, random_state = 42)","54332403":"y_train.describe()","1b32adf9":"y_train.hist()","3b4d259d":"y_test.describe()","953cc8c4":"y_test.hist()","6b8a31db":"from sklearn.tree import DecisionTreeRegressor","6a495160":"tree = DecisionTreeRegressor(random_state = 42)","1954d4f3":"tree.fit(X_train, y_train)","599db62a":"from sklearn.metrics import mean_squared_error","f101fb2b":"y_train_pred = tree.predict(X_train)\ny_test_pred = tree.predict(X_test)","562f5c0f":"mean_squared_error(y_train, y_train_pred, squared = False)","d5b39d39":"mean_squared_error(y_test, y_test_pred, squared = False)","ec9ac584":"from sklearn.metrics import max_error","4f2db4fb":"print('train set: ', max_error(y_train, y_train_pred))\nprint('test set: ', max_error(y_test, y_test_pred))","d5e5434d":"abs(y_test - y_test_pred).describe()","c55ebca0":"abs(y_test - y_test_pred).hist()","79e0ac2b":"sum(abs(y_test - y_test_pred) > 0.5)","fc2933e6":"y_test.count()","b0752679":"from sklearn.metrics import explained_variance_score","3cf23588":"print('train set: ', explained_variance_score(y_train, y_train_pred))\nprint('test set: ', explained_variance_score(y_test, y_test_pred))","001da8c9":"from sklearn.metrics import r2_score","c24deca4":"print('train set: ', r2_score(y_train, y_train_pred))\nprint('test set: ', r2_score(y_test, y_test_pred))","cea152d8":"def checkMetrics(model):\n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n    \n    print('Train Set:')\n    print('RMSE :', mean_squared_error(y_train, y_train_pred, squared = False))\n    print('Max Error: ', max_error(y_train, y_train_pred))\n    print('R2-score: ', r2_score(y_train, y_train_pred))\n    print('Number of errors > 0.5: ', str(sum(abs(y_train - y_train_pred) > 0.5)), end = '\\n\\n\\n')\n    \n    print('Test Set:')\n    print('RMSE :', mean_squared_error(y_test, y_test_pred, squared = False))\n    print('Max Error: ', max_error(y_test, y_test_pred))\n    print('R2-score: ', r2_score(y_test, y_test_pred))\n    print('Number of errors > 0.5: ', str(sum(abs(y_test - y_test_pred) > 0.5)))","c354f0b0":"checkMetrics(tree)","5309c404":"from sklearn.linear_model import ElasticNet","09c0e07a":"elasNet = ElasticNet(random_state = 42)","dc1a53eb":"elasNet.fit(X_train, y_train)","7ec78d9d":"checkMetrics(elasNet)","2ec346f4":"from sklearn.linear_model import LinearRegression","57f20f06":"reg = LinearRegression()\nreg.fit(X_train, y_train)\ncheckMetrics(reg)","240a48be":"from sklearn.ensemble import GradientBoostingRegressor","98d6840e":"checkMetrics(tree)","137e65e4":"gBoost = GradientBoostingRegressor(random_state = 42)\ngBoost.fit(X_train, y_train)\ncheckMetrics(gBoost)","85e57980":"from sklearn.ensemble import RandomForestRegressor","13e7efcf":"forest = RandomForestRegressor(random_state = 42)\nforest.fit(X_train, y_train)\ncheckMetrics(forest)","8d9adedd":"from sklearn.ensemble import AdaBoostRegressor","8fd6e21a":"ada = AdaBoostRegressor(base_estimator = DecisionTreeRegressor(random_state = 42), random_state = 42)\nada.fit(X_train, y_train)\ncheckMetrics(ada)","903e59e8":"from sklearn.model_selection import RandomizedSearchCV","0ff39f7a":"params = {\n    'base_estimator__max_depth' : [None, 5, 8, 10, 12, 15, 20, 25],\\\n    'base_estimator__max_features' : [None, 'log2', 'auto', 'sqrt'],\\\n    'base_estimator__max_leaf_nodes' : [None, 2, 4, 6, 8, 10, 15],\\\n    'n_estimators' : [25, 50, 75, 100, 150, 250],\\\n    'loss' : ['linear', 'square', 'exponential']\n}","9f67b86c":"from sklearn.metrics import SCORERS","0ec6b881":"SCORERS.keys()","b883ade7":"base_tree = DecisionTreeRegressor(random_state = 42) \nbase_ada = AdaBoostRegressor(base_estimator = base_tree, random_state = 42) \nclf = RandomizedSearchCV(random_state = 42, param_distributions = params, estimator = base_ada, scoring = 'neg_root_mean_squared_error', n_iter = 200, return_train_score = True)","bc79b908":"clf.fit(X_train, y_train)","64c219d2":"clf.best_params_","128d4028":"clf.best_score_","3e3bb10e":"best_model = clf.best_estimator_","bcb63efe":"checkMetrics(best_model)","7d5e3060":"ada = AdaBoostRegressor(base_estimator = DecisionTreeRegressor(random_state = 42, max_depth = 8), random_state = 42, n_estimators = 100, loss = 'square')\nada.fit(X_train, y_train)\ncheckMetrics(ada)","e999bb2d":"params = {\n    'max_depth' : [None, 5, 8, 10, 12, 15, 20, 25],\\\n    'max_features' : [None, 'log2', 'auto', 'sqrt'],\\\n    'max_leaf_nodes' : [None, 2, 4, 6, 8, 10, 15],\\\n    'n_estimators' : [25, 50, 75, 100, 150, 250]\n}","780e6ecf":"base_forest = RandomForestRegressor(random_state = 42)\nclf = RandomizedSearchCV(random_state = 42, param_distributions = params, estimator = base_forest,\\\n                         scoring = 'neg_root_mean_squared_error', n_iter = 200, return_train_score = True)","0d29d5ad":"clf.fit(X_train, y_train)","74142a0a":"clf.best_params_","3bed1dd7":"best_forest = clf.best_estimator_","e6e96f37":"checkMetrics(best_forest)","bb502b85":"from sklearn.feature_selection import RFECV","468d6b79":"rfe = RFECV(estimator = best_forest, min_features_to_select = 5, verbose = 4, scoring = 'neg_root_mean_squared_error')","9c8fd966":"rfe.fit(X_train, y_train)","eafe7a86":"rfe.support_","39b8d173":"rfe.ranking_","413e7e0d":"X_train.columns","f924b124":"X_train.columns[rfe.support_]","2b5fda12":"X_train_sub = rfe.transform(X_train)\nX_test_sub = rfe.transform(X_test)","832a4ec4":"forest = RandomForestRegressor(random_state = 42, n_estimators = 75, max_features = 'auto')","198e31e2":"forest.fit(X_train_sub, y_train)","a8d9d693":"def checkSubMetrics(model):\n    y_train_pred = model.predict(X_train_sub)\n    y_test_pred = model.predict(X_test_sub)\n    \n    print('Train Set:')\n    print('RMSE :', mean_squared_error(y_train, y_train_pred, squared = False))\n    print('Max Error: ', max_error(y_train, y_train_pred))\n    print('R2-score: ', r2_score(y_train, y_train_pred))\n    print('Number of errors > 0.5: ', str(sum(abs(y_train - y_train_pred) > 0.5)), end = '\\n\\n\\n')\n    \n    print('Test Set:')\n    print('RMSE :', mean_squared_error(y_test, y_test_pred, squared = False))\n    print('Max Error: ', max_error(y_test, y_test_pred))\n    print('R2-score: ', r2_score(y_test, y_test_pred))\n    print('Number of errors > 0.5: ', str(sum(abs(y_test - y_test_pred) > 0.5)))","08d9fc14":"checkSubMetrics(forest)","dd058eb4":"Ada\nTest Set:\nRMSE : 0.19002481465267532\nMax Error:  0.9565432098765427\nR2-score:  0.77541986395577\nNumber of errors > 0.5:  44\nForest\nTest Set:\nRMSE : 0.16037730275544326\nMax Error:  0.9559999999999997\nR2-score:  0.8400307473893369\nNumber of errors > 0.5:  60","1eda4ca1":"AdaBoost\nTrain Set:\nRMSE : 0.15704756892047753\nMax Error:  0.4219480519480525\nR2-score:  0.8483424500450756\nNumber of errors > 0.5:  0\n\n\nTest Set:\nRMSE : 0.19002481465267532\nMax Error:  0.9565432098765427\nR2-score:  0.77541986395577\nNumber of errors > 0.5:  44"}}