{"cell_type":{"7bfb983a":"code","0c1657f5":"code","4fbf7901":"code","621bfbc7":"code","dab79abc":"code","a36545b8":"code","6be14c72":"code","fe4a5e50":"code","d6c43192":"code","e9277100":"code","2e0ddcfc":"code","c0d88386":"code","7d4a4eb3":"code","c16ca1f8":"code","7876a07b":"code","25d0ad96":"code","292fd454":"code","7559b811":"code","685607c0":"code","8258d9a0":"code","18024e76":"code","a5fd77c5":"code","9adbad40":"code","6ce379f5":"code","87a77840":"code","d02e649b":"code","f679a7d6":"code","aef95922":"code","5c11a294":"code","39b0b676":"code","9c1899cd":"code","1c9b0237":"code","48bfa34c":"code","7bda3ee6":"code","9c82997a":"code","c56c82c5":"code","e78d64be":"code","f3483d3b":"code","34f7ba1b":"code","163dfc68":"code","e9038dd4":"code","5705fa65":"code","90001cb5":"code","b0476012":"code","e2459fdc":"code","a704134e":"markdown","426051a2":"markdown","0e8af8d9":"markdown","3222e137":"markdown","64794579":"markdown","b373b8a6":"markdown","c5855a47":"markdown","b70d72f2":"markdown","6dbc3f41":"markdown","0e49d3ce":"markdown","4f6af7a4":"markdown","6dff490b":"markdown","7aa7abc9":"markdown","1c592edb":"markdown","07b5f65c":"markdown","d1fe51e5":"markdown","d018a2d8":"markdown","3a9d7a06":"markdown","ac265783":"markdown","09687c29":"markdown"},"source":{"7bfb983a":"#For uploading and accessing the data\nimport pandas as pd\nimport numpy as np\n\n#For visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n!pip install dexplot -q\n!pip install pycaret -q\n!pip install stylecloud -q\n# for visualizations\nplt.style.use('ggplot')\n\n# for interactive visualizations\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected = True)\nimport plotly.figure_factory as ff\nfrom sklearn.preprocessing import StandardScaler\n\nfrom pandas_profiling import ProfileReport\n\nimport dexplot as dxp\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n\n# Nltk for tokenize and stopwords\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom wordcloud import WordCloud, STOPWORDS\nimport stylecloud\nfrom wordcloud import ImageColorGenerator\nRANDOM_SEED = 42\n","0c1657f5":"df = pd.read_csv('\/kaggle\/input\/covid19-tweets\/covid19_tweets.csv')\ndf.head()","4fbf7901":"def missing_value_of_data(data):\n    total=data.isnull().sum().sort_values(ascending=False)\n    percentage=round(total\/data.shape[0]*100,2)\n    return pd.concat([total,percentage],axis=1,keys=['Total','Percentage'])\n\ndef duplicated_values_data(data):\n    dup=[]\n    columns=data.columns\n    for i in data.columns:\n        dup.append(sum(data[i].duplicated()))\n    return pd.concat([pd.Series(columns),pd.Series(dup)],axis=1,keys=['Columns','Duplicate count'])\n\ndef unique_values_in_column(data,feature):\n    unique_val=pd.Series(data.loc[:,feature].unique())\n    return pd.concat([unique_val],axis=1,keys=['Unique Values'])\n\ndef count_values_in_column(data,feature):\n    total=data.loc[:,feature].value_counts(dropna=False)\n    percentage=round(data.loc[:,feature].value_counts(dropna=False,normalize=True)*100,2)\n    return pd.concat([total,percentage],axis=1,keys=['Total','Percentage'])\n\ndef ngrams_top(corpus,ngram_range,n=None):\n    \"\"\"\n    List the top n words in a vocabulary according to occurrence in a text corpus.\n    \"\"\"\n    vec = CountVectorizer(stop_words = 'english',ngram_range=ngram_range).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    total_list=words_freq[:n]\n    df=pd.DataFrame(total_list,columns=['text','count'])\n    return df\n\n","621bfbc7":"missing_value_of_data(df)","dab79abc":"duplicated_values_data(df)","a36545b8":"count_values_in_column(df,'user_location')","6be14c72":"count_values_in_column(df,'hashtags')","fe4a5e50":"dd_11 = ngrams_top(df['text'],(1,1),n=10)\ndxp.bar(x='text', y='count', data=dd_11,figsize=(10,5),cmap='dark12_r',title='Count Plot for Most Frequent words in Tweets')","d6c43192":"dd_22 = ngrams_top(df['text'],(2,2),n=10)\ndxp.bar(x='text', y='count', data=dd_22,figsize=(10,5),cmap='dark12_r',title='Count Plot for Most Frequent words in Tweets')","e9277100":"dd_33 = ngrams_top(df['text'],(3,3),n=10)\ndxp.bar(x='text', y='count', data=dd_33,figsize=(10,5),cmap='dark12_r',title='Count Plot for Most Frequent words in Tweets')","2e0ddcfc":"Top10_source = pd.DataFrame(df['source'].value_counts().sort_values(ascending=False)[:10]).reset_index()\nTop10_source.columns = ['Source','Count']","c0d88386":"dxp.bar(x='Source', y='Count', data=Top10_source,figsize=(10,5),cmap='viridis',title='Source for Tweets in COVID-19')","7d4a4eb3":"best_10_regions = pd.DataFrame(df['user_location'].value_counts().sort_values(ascending=False)[:15]).reset_index()\nbest_10_regions.columns = ['user_location','Count']","c16ca1f8":"dxp.bar(x='user_location', y='Count', data=best_10_regions,figsize=(15,5),cmap='viridis',title='Geographical Location for Tweets')","7876a07b":"Top10_user = pd.DataFrame(df['user_name'].value_counts().sort_values(ascending=False)[:10]).reset_index()\nTop10_user.columns = ['user_name','count']","25d0ad96":"dxp.bar(x='user_name', y='count', data=Top10_user,figsize=(15,5),cmap='viridis',title='Users Dominating in Tweets in COVID-19')","292fd454":"dxp.bar(x='user_verified', y='user_followers', data=df.head(100),figsize=(10,10),split='source',aggfunc='mean',title='Relationship betwwen fake and real users')","7559b811":"hashtags = df['hashtags'].dropna().tolist()\nunique_hashtags=(\" \").join(hashtags)\nstylecloud.gen_stylecloud(text = unique_hashtags,\n                          icon_name='fas fa-first-aid',\n                          palette='colorbrewer.diverging.Spectral_11',\n                          background_color='black',\n                          gradient='horizontal')\n","685607c0":"from IPython.display import Image \n\nImage(\".\/stylecloud.png\",width = 600, height = 600)","8258d9a0":"hashtags = df['text'].dropna().tolist()\nunique_hashtags=(\" \").join(hashtags)\nstylecloud.gen_stylecloud(text = unique_hashtags,\n                          icon_name='far fa-comment',\n                          background_color='white',\n                          gradient='horizontal')\n","18024e76":"from IPython.display import Image \n\nImage(\".\/stylecloud.png\",width = 600, height = 600)","a5fd77c5":"df_plot = df[['user_created','user_followers','user_favourites','user_friends']]\ndf_plot['user_created'] = pd.to_datetime(df_plot.user_created)\ndf_plot['user_created'] = df_plot['user_created'].dt.strftime('%m\/%d\/%Y')\ndf_plot = df_plot.sort_values('user_created')","9adbad40":"dxp.line(x='user_created',y = 'user_followers',aggfunc='mean',data=df_plot.head(100),figsize=(10,5),cmap='viridis',title='Followers Timeline')","6ce379f5":"dxp.line(x='user_created',y = 'user_favourites',aggfunc='mean',data=df_plot.head(100),figsize=(10,5),cmap='viridis_r',title='User Favourite Timeline')","87a77840":"dxp.line(x='user_created',y = 'user_friends',aggfunc='mean',data=df_plot.head(100),figsize=(10,5),cmap='plotly3',title='User Friends Timeline')","d02e649b":"from pycaret.nlp import *","f679a7d6":"nlp1 = setup(df, target = 'text', session_id=RANDOM_SEED, experiment_name='covid')","aef95922":"models()","5c11a294":"#Latent Dirichlet Allocation\nlda = create_model('lda',multi_core=True)","39b0b676":"#Non-Negative Matrix Factorization\nnmf = create_model('nmf', num_topics = 6)","9c1899cd":"#Latent Semantic Indexing\nlsi = create_model('lsi', num_topics = 6)","1c9b0237":"#Hierarchical Dirichlet Process\nhdp = create_model('hdp', num_topics = 6)","48bfa34c":"#Random Projections\nrp = create_model('rp',num_topics = 6)","7bda3ee6":"lda_results = assign_model(lda)\nlda_results.head()","9c82997a":"nmf_results = assign_model(nmf)\nnmf_results.head()","c56c82c5":"hdp_results = assign_model(hdp)\nhdp_results.head()","e78d64be":"plot_model(lda)","f3483d3b":"plot_model(lda, plot = 'distribution')","34f7ba1b":"plot_model(lda, plot = 'bigram')","163dfc68":"plot_model(lda, plot = 'trigram')","e9038dd4":"plot_model(lda, plot = 'tsne')","5705fa65":"plot_model(lda, plot = 'topic_distribution')","90001cb5":"plot_model(lda, plot = 'wordcloud')","b0476012":"plot_model(lda, plot = 'umap')","e2459fdc":"evaluate_model(lda)","a704134e":"<img src = \"https:\/\/ieee-dataport.org\/sites\/default\/files\/coronavirus-dataset-1.png\">\n<img src = \"https:\/\/media.giphy.com\/media\/6h8jgwC3dU6vS\/giphy.gif\">","426051a2":"# <a id='1'> References<\/a>\n* [Pycaret](https:\/\/github.com\/pycaret\/pycaret)\n* [Helper Functions Notebook](https:\/\/www.kaggle.com\/raenish\/cheatsheet-text-helper-functions)","0e8af8d9":"# <a id='1'> Detailed Analysis for Tweets in COVID Pandemic<\/a>","3222e137":"##### Plotting Word Distribution","64794579":"## Made with \u2764\ufe0f for Learning ","b373b8a6":"#### Inference-\n* India dominates in Tweets for COVID -19 followed by US.","c5855a47":"###### Plotting Topic Distribution","b70d72f2":"###### Plotting Trigrams","6dbc3f41":"<b> This function takes a trained model object (optional) and returns a plot based on the inferred dataset by internally calling assign_model before generating a plot <\/b>","0e49d3ce":"##### Plotting tsne 3D Dimension Plot","4f6af7a4":"###### Plotting Bigrams","6dff490b":"#### Inference-\n* Twitter Web app has most tweets followed by Twitter for Android and Iphone","7aa7abc9":"##### Plotting UMAP Dimensionality Plot","1c592edb":"<b> This function assigns each of the data point in the dataset passed during setup stage to one of the topic using trained model object passed as model param. create_model() function must be called before using assign_model(). This function returns data frame with topic weights, dominant topic and % of the dominant topic (where applicable). <b>\n\n","07b5f65c":"# <a id='1'> Topic Modeling with PyCaret<\/a><br>\n<img src = 'https:\/\/pycaret.org\/wp-content\/uploads\/2020\/03\/Divi93_43.png'> <br>\n\n###### PyCaret is an open source low-code machine learning library in Python that aims to reduce the hypothesis to insights cycle time in a ML experiment. It enables data scientists to perform end-to-end experiments quickly and efficiently. In comparison with the other open source machine learning libraries, PyCaret is an alternative low-code library that can be used to perform complex machine learning tasks with only few lines of code. PyCaret is essentially a Python wrapper around several machine learning libraries and frameworks such as scikit-learn, XGBoost, Microsoft LightGBM, spaCy and many more.\n\n###### PyCaret is a great library which not only simplifies the machine learning tasks for citizen data scientists but also helps new startups to reduce the cost of investing in a team of data scientists. Therefore, this library has not only helped the citizen data scientists but has also helped individuals who want to start exploring the field of data science, having no prior knowledge in this field.\n\n###### PyCaret is simple, easy to use and deployment ready. All the steps performed in a ML experiment can be reproduced using a pipeline that is automatically developed and orchestrated in PyCaret as you progress through the experiment. A pipeline can be saved in a binary file format that is transferable across environments.","d1fe51e5":"##### Plotting LDA Results(Word Frequency Distribution)","d018a2d8":"<b> This function creates a model on the dataset passed as a data param during the setup stage. setup() function must be called before using create_model(). This function returns a trained model object.  <\/b>\n\n","3a9d7a06":"<b> This function initializes the environment in pycaret. setup() must called before executing any other function in pycaret. It takes one mandatory parameter: dataframe {array-like, sparse matrix} or object of type list. If a dataframe is passed, target column containing text must be specified. When data passed is of type list, no target parameter is required.<b>","ac265783":"###### Plotting WordCloud","09687c29":"<b> This function displays the user interface for all the available plots for a given model. It internally uses the plot_model() function.<b\/>\n\n"}}