{"cell_type":{"e5f19eda":"code","67901dca":"code","8c5d4e46":"code","7d540b93":"code","406996d4":"code","06e1cb43":"code","b1ab1e69":"code","68208948":"code","e87544a4":"code","8a1b2b77":"code","240408df":"code","b11c21d7":"code","94d38e3f":"code","b6e94291":"code","fe3b1cc2":"code","f16258ff":"code","6823dc16":"code","a0f13ad0":"code","14540d30":"code","05a1c6c6":"code","4c79dd14":"code","84c1d01f":"code","9dfa6e12":"code","7a8ded26":"code","7c74b0b6":"code","27285f43":"code","5816e9fd":"code","6543bdb3":"code","18564171":"code","0b049f80":"code","57227aed":"code","ad5b8130":"code","9c950749":"code","65c91586":"code","7929f0db":"code","a89bb79d":"code","d6da54a2":"code","fbde6eac":"code","d2017e9e":"code","ca8bbd9c":"code","5628bc64":"code","e427d882":"code","ba812907":"code","8ab2a353":"code","f83ea774":"code","61e51192":"code","40d2816e":"code","d245f63c":"code","f38d42cc":"code","d157873a":"code","88f07763":"code","4d683911":"markdown","f06a38dd":"markdown","efd6716a":"markdown","889bb43f":"markdown"},"source":{"e5f19eda":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom scipy.stats import skew\nfrom sklearn.impute import KNNImputer\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.decomposition import PCA","67901dca":"figure_size = [20,20]\ndef get_aca(size=None):\n    if size is None:\n        size = [20, 20]\n    fig = plt.figure(figsize=size,)\n    return fig.gca()\n\nplt.style.use('seaborn')","8c5d4e46":"train_df = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/test.csv\")\nconcat_list = [train_df,test_df]\nbike_share_df = pd.concat(concat_list,axis=0,ignore_index=True)","7d540b93":"bike_share_df.info()","406996d4":"bike_share_df","06e1cb43":"bike_share_df.describe()","b1ab1e69":"\"\"\"split the date into day, month and year\"\"\"\nbike_share_df['datetime'] = pd.to_datetime(bike_share_df[\"datetime\"],format=\"%Y-%m-%d %H\")\nbike_share_df['hour'] = bike_share_df['datetime'].apply(lambda date: date.strftime(\"%H\")).astype(\"int64\")\nbike_share_df['day'] = bike_share_df['datetime'].apply(lambda date: date.strftime(\"%d\")).astype(\"int64\")\nbike_share_df['month'] = bike_share_df['datetime'].apply(lambda date: date.strftime(\"%m\")).astype(\"int64\")\nbike_share_df['year'] = bike_share_df['datetime'].apply(lambda date: date.strftime(\"%Y\")).astype(\"int64\")\nbike_share_df['weekday'] = bike_share_df['datetime'].apply(lambda date: date.weekday()).astype(\"int64\")\nbike_share_df['yearWeek'] = bike_share_df['datetime'].apply(lambda date: date.isocalendar()[1]).astype(\"int64\")\n\nbike_share_df.drop(columns=\"datetime\",inplace=True)","68208948":"bike_share_df.isna().sum().plot.bar()","e87544a4":"bike_share_df.isnull().sum().plot.bar()\n\"\"\"no null or na values\"\"\"","8a1b2b77":"\"\"\"No duplication in the data\"\"\"\nbike_share_df.duplicated().value_counts()","240408df":"categorical_features = [\"season\",\"holiday\",\"workingday\",\"weather\",\"hour\",\"yearWeek\"]\nnumerical_features = list(set(bike_share_df.columns.to_list()).difference(categorical_features))\ndiscrete_features = [col for col in bike_share_df[numerical_features] if len(bike_share_df[col].value_counts())<=10]\ncontinuous_features = [col for col in bike_share_df[numerical_features] if len(bike_share_df[col].value_counts())>10]\n\nprint(\"The categorical feature\",categorical_features,\" ,their number:\",len(categorical_features))\nprint(\"The numerical feature\",numerical_features,\" ,their number:\",len(numerical_features))\nprint(\"The discrete feature\",discrete_features,\" ,their number:\",len(discrete_features))\nprint(\"The continuous feature\",continuous_features,\" ,their number:\",len(continuous_features))","b11c21d7":"heatmap_mask = np.triu(bike_share_df[numerical_features].corr())\nsns.heatmap(data=bike_share_df[numerical_features].corr(),mask=heatmap_mask,annot=True,ax=get_aca(),cmap=\"coolwarm\")","94d38e3f":"sns.pairplot(data=bike_share_df[numerical_features],corner=True)\n\"\"\"skewed target\"\"\"","b6e94291":"bike_share_df.hist(bins=100,ax=get_aca());","fe3b1cc2":"sns.lineplot(data=bike_share_df,x=\"hour\",y=\"casual\",hue=\"holiday\")","f16258ff":"sns.lineplot(data=bike_share_df,x=\"hour\",y=\"registered\",hue=\"holiday\")","6823dc16":"sns.lineplot(data=bike_share_df,x=\"hour\",y=\"casual\",hue=\"workingday\")","a0f13ad0":"sns.lineplot(data=bike_share_df,x=\"hour\",y=\"registered\",hue=\"workingday\")","14540d30":"sns.lineplot(data=bike_share_df,x=\"hour\",y=\"registered\",color=\"r\")\nsns.lineplot(data=bike_share_df,x=\"hour\",y=\"casual\",color=\"b\")","05a1c6c6":"fig = plt.figure(figsize=figure_size)\nfor num, col in zip(list(range(1,len(categorical_features)+1)) , categorical_features):\n    ax = fig.add_subplot(10,2,num)\n    sns.boxplot(data=bike_share_df,x=col,y=\"count\",ax=ax)","4c79dd14":"fig = plt.figure(figsize=figure_size)\nfor num, col in zip(list(range(1,len(discrete_features)+1)) , discrete_features):\n    ax = fig.add_subplot(10,2,num)\n    sns.boxplot(data=bike_share_df,x=col,y=\"count\",ax=ax)","84c1d01f":"\"\"\"for zero classification model\"\"\"\nbike_share_df[\"nonZeroClass\"] = bike_share_df[\"count\"]!=0","9dfa6e12":"sns.displot(data=bike_share_df,x=\"count\",kind=\"kde\",fill=True)","7a8ded26":"sns.ecdfplot(data=bike_share_df,x=\"count\")\nprint(\"the skewness in target\",skew(bike_share_df[\"count\"]))","7c74b0b6":"bike_share_df[\"log_count\"] = np.log1p(bike_share_df[\"count\"].to_numpy().reshape(-1,1))","27285f43":"sns.displot(data=bike_share_df,x=\"log_count\",kind=\"kde\",fill=True)","5816e9fd":"sns.ecdfplot(data=bike_share_df,x=\"log_count\")\nprint(\"the skewness in target\",skew(bike_share_df[\"log_count\"]))","6543bdb3":"\"\"\"impute zero windSpeed and humidity using knnImputer\"\"\"\ncasual = bike_share_df[\"casual\"]\nregistered = bike_share_df[\"registered\"]\ncount = bike_share_df[\"count\"]\n\nbike_share_df[\"windspeed\"] = bike_share_df[\"windspeed\"].replace({0:np.nan})\nbike_share_df[\"humidity\"] = bike_share_df[\"humidity\"].replace({0:np.nan})\nimputer = KNNImputer(n_neighbors=10,)\nbike_share_df = pd.DataFrame(imputer.fit_transform(bike_share_df),columns=bike_share_df.columns)\n\nbike_share_df[\"casual\"] = casual\nbike_share_df[\"registered\"] = registered\nbike_share_df[\"count\"] = count","18564171":"bike_share_df.info()","0b049f80":"drop_list = [\n    \"casual\",\n    \"registered\",\n    \"count\",\n    # \"log_count\",\n    \"nonZeroClass\",\n]","57227aed":"categorical_features.remove(\"holiday\")\ncategorical_features.remove(\"workingday\")\nbike_share_df = bike_share_df.astype(dict(zip(categorical_features,[\"category\"]*len(categorical_features))))","ad5b8130":"bike_share_df = bike_share_df.astype(dict(zip(discrete_features,[\"category\"]*len(discrete_features))))","9c950749":"bike_share_df.info()","65c91586":"# bike_share_df = pd.get_dummies(bike_share_df)","7929f0db":"train_new_df = bike_share_df[bike_share_df[\"count\"].isna()==False].drop(columns=drop_list)\ntest_new_df = bike_share_df[bike_share_df[\"count\"].isna()==True].drop(columns=drop_list)","a89bb79d":"# train_new_df = train_new_df.filter(selection_list,axis=1)\n# test_new_df = test_new_df.filter(selection_list,axis=1)","d6da54a2":"X_train = train_new_df.drop(columns=[\"log_count\"])\nY_train = train_new_df[\"log_count\"]","fbde6eac":"X_test = test_new_df.drop(columns=\"log_count\")","d2017e9e":"X_train.head()","ca8bbd9c":"\"\"\"model pipline\"\"\"\nhgbr = HistGradientBoostingRegressor()\nhgbr_pipline = Pipeline([(\"rodbust_scaler\",RobustScaler()),(\"hgbr\",hgbr)])\n\nrf = RandomForestRegressor()\nrf_pipline = Pipeline([(\"rodbust_scaler\",RobustScaler()),(\"rf\",rf)])","5628bc64":"class Mypipeline(Pipeline):\n    @property\n    def coef_(self):\n        return self._final_estimator.coef_\n    @property\n    def feature_importances_(self):\n        return self._final_estimator.feature_importances_\n\npipeline = Mypipeline([(\"rodbust_scaler\",RobustScaler()),(\"rf\",rf)])","e427d882":"\"\"\"feature selection\"\"\"\nfeature_selection = RFECV(estimator=pipeline,step=1,verbose=2,n_jobs=-1,scoring=\"neg_mean_squared_log_error\").fit(X_train,Y_train)\nselected_feature_df = pd.DataFrame()\nselected_feature_df[\"features\"] = X_train.columns\nselected_feature_df[\"supported\"] = feature_selection.support_\nselected_feature_df[\"ranking\"] = feature_selection.ranking_","ba812907":"selected_feature_df.iloc[7,1] = False","8ab2a353":"selected_feature_df","f83ea774":"X_train = X_train.filter((selected_feature_df[selected_feature_df[\"supported\"]==True])[\"features\"],axis=1)","61e51192":"X_train.columns","40d2816e":"k_fold = KFold(n_splits=30,shuffle=True)\nscores = cross_validate(estimator=hgbr_pipline,X=X_train,y=Y_train,scoring=[\"r2\",\"neg_root_mean_squared_error\",\"neg_mean_squared_log_error\"],cv=k_fold,n_jobs=-1,verbose=2)","d245f63c":"def print_scores(scores):\n    print(\"Model Evaluation:\",\n        \"\\n\\tTime to fit:\",np.mean(scores[\"fit_time\"]),\n        \"\\n\\tScore time:\",np.mean(scores[\"score_time\"]),\n        \"\\n\\tR2 score:\",np.mean(scores[\"test_r2\"]),\n        \"\\n\\tRMSE score:\",np.mean(-1*scores[\"test_neg_root_mean_squared_error\"]),\n        \"\\n\\tRMSLE score:\", np.mean(np.sqrt(-1*scores[\"test_neg_mean_squared_log_error\"])))","f38d42cc":"print_scores(scores)","d157873a":"X_test = X_test.filter((selected_feature_df[selected_feature_df[\"supported\"]==True])[\"features\"],axis=1)","88f07763":"hgbr_pipline.fit(X_train,Y_train)\ny_test_predict = hgbr_pipline.predict(X_test)\nbike_share_prediction = pd.DataFrame()\nbike_share_prediction[\"datetime\"] = test_df[\"datetime\"]\nbike_share_prediction[\"count\"] = pd.Series(np.expm1(y_test_predict)).astype(int)\nbike_share_prediction.to_csv(\"\/kaggle\/working\/bike_share_prediction.csv\",index=False)","4d683911":"## Data Exploration","f06a38dd":"### General model","efd6716a":"* The count of bike sharing is least for spring\n* The number of bike shares increased in 2019\n* The count values increases in summer months\n* The count values ars less during holidays\n* The hour hase 8 and 18 hase a peak","889bb43f":"Fixing the skewness in the data using log1p"}}