{"cell_type":{"67e20301":"code","5f11f86b":"code","be84b5a8":"code","32a15176":"code","7eb0e818":"code","00f9707e":"code","172a33dd":"code","c9168971":"code","7c553b3e":"code","c406b127":"code","3f8aabf2":"code","e4e95342":"code","78c7ac14":"code","74c9bc7c":"code","2cb4bd49":"code","90af1590":"code","cf1841e3":"code","4ac0329a":"code","90c2883c":"code","c2c218e8":"code","c16134fe":"code","4c45b65d":"code","5d2595b9":"code","f77a84d1":"code","529e61a0":"code","3f930b44":"code","c2d4ac8c":"code","2a5af99a":"code","ecaf6e64":"code","5ee90c31":"code","fb50dd35":"code","1eb94daf":"code","f6cbf54c":"code","a7cbf7e9":"code","fa7ffd49":"code","c2ca4448":"markdown","74359c97":"markdown","644eb40e":"markdown","6ba9d95a":"markdown","f1a30526":"markdown","6e9a557d":"markdown","18c92aa0":"markdown","4682fca4":"markdown","a5477274":"markdown","fd7dc029":"markdown","7c7d1b03":"markdown","51ce9b42":"markdown","6631cd1f":"markdown","81d8d716":"markdown"},"source":{"67e20301":"# Importing the basic libraries\nimport pandas as pd, numpy as np\nimport matplotlib.pyplot as plt, seaborn as sns\n\n%matplotlib inline","5f11f86b":"# Reading the file\ndf = pd.read_csv(\"..\/input\/heartdiseasedata\/heart_v2.csv\")\ndf.info()","be84b5a8":"# Checking first five records\ndf.head()","32a15176":"# Checking the distribution of target column\ndf['heart disease'].value_counts()","7eb0e818":"# Prepare the data\nX = df.drop('heart disease', axis=1)\ny = df['heart disease'].copy()\n\nX.head()","00f9707e":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)\nX_train.shape, X_test.shape","172a33dd":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","c9168971":"# pip users\n!pip install pydotplus\n!pip install six\n\nfrom IPython.display import Image\nfrom six import StringIO\nfrom sklearn.tree import export_graphviz\nimport pydotplus, graphviz\n\ndot_data = StringIO()\n\nexport_graphviz(dt, out_file=dot_data, filled=True, rounded=True, feature_names=X.columns, \n                class_names=['No Disease', 'Disease'])\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png())","7c553b3e":"y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nprint(\"Train set performance\")\nprint(accuracy_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","c406b127":"print(\"Test set performance\")\nprint(accuracy_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","3f8aabf2":"def get_dt_graph(dt_classifier):\n    dot_data = StringIO()\n\n    export_graphviz(dt_classifier, out_file=dot_data, filled=True, rounded=True, feature_names=X.columns, \n                class_names=['No Disease', 'Disease'])\n    \n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    \n    return graph","e4e95342":"def evaluate_model(dt_classifier):\n    y_train_pred = dt_classifier.predict(X_train)\n    y_test_pred = dt_classifier.predict(X_test)\n    \n    print(\"Train set performance\")\n    print(accuracy_score(y_train, y_train_pred))\n    print(confusion_matrix(y_train, y_train_pred))\n    print(\"-\"*50)\n    print(\"Test set performance\")\n    print(accuracy_score(y_test, y_test_pred))\n    print(confusion_matrix(y_test, y_test_pred))","78c7ac14":"evaluate_model(dt)","74c9bc7c":"gph = get_dt_graph(dt)\nImage(gph.create_png())","2cb4bd49":"dt_default = DecisionTreeClassifier(random_state=42)\ndt_default.fit(X_train, y_train)","90af1590":"gph = get_dt_graph(dt_default)\nImage(gph.create_png())","cf1841e3":"evaluate_model(dt_default)","4ac0329a":"dt_depth = DecisionTreeClassifier(max_depth=3, random_state=42)\ndt_depth.fit(X_train, y_train)","90c2883c":"gph = get_dt_graph(dt_depth)\nImage(gph.create_png())","c2c218e8":"evaluate_model(dt_depth)","c16134fe":"dt_min_split = DecisionTreeClassifier(min_samples_split=20, random_state=42)\ndt_min_split.fit(X_train, y_train)\n\ngph = get_dt_graph(dt_min_split)\nImage(gph.create_png())","4c45b65d":"evaluate_model(dt_min_split)","5d2595b9":"dt_min_leaf = DecisionTreeClassifier(min_samples_leaf=20, random_state=42)\ndt_min_leaf.fit(X_train, y_train)\n\ngph = get_dt_graph(dt_min_leaf)\nImage(gph.create_png())","f77a84d1":"evaluate_model(dt_min_leaf)","529e61a0":"dt_min_leaf_entropy = DecisionTreeClassifier(min_samples_leaf=20, random_state=42, criterion=\"entropy\")\ndt_min_leaf_entropy.fit(X_train, y_train)\n\ngph = get_dt_graph(dt_min_leaf_entropy)\nImage(gph.create_png())","3f930b44":"evaluate_model(dt_min_leaf_entropy)","c2d4ac8c":"dt = DecisionTreeClassifier(random_state=42)\n\nfrom sklearn.model_selection import GridSearchCV\n\nparams = {\n    \"max_depth\": [2, 3, 5, 10, 20],\n    \"min_samples_leaf\": [5, 10, 20, 50, 100],\n    \"criterion\": ['gini', 'entropy']\n}\n\ngrid_search = GridSearchCV(estimator=dt, param_grid=params, cv=4, n_jobs=-1, verbose=1, scoring=\"accuracy\")","2a5af99a":"%%time\ngrid_search.fit(X_train, y_train)","ecaf6e64":"cv_df = pd.DataFrame(grid_search.cv_results_)\ncv_df.head()","5ee90c31":"cv_df.shape","fb50dd35":"cv_df.nlargest(5, 'mean_test_score')","1eb94daf":"grid_search.best_estimator_","f6cbf54c":"grid_search.best_score_","a7cbf7e9":"dt_best = grid_search.best_estimator_\nevaluate_model(dt_best)","fa7ffd49":"gph = get_dt_graph(dt_best)\nImage(gph.create_png())","c2ca4448":"#### Building the decision tree\nUse all default parameters except depth","74359c97":"# Model Evaluation","644eb40e":"#### Decision tree without any hyper-parameter setting","6ba9d95a":"#### Specifying the minimum samples in leaf node","f1a30526":"# Model Building","6e9a557d":"#### Evaluating the model performance on the test set","18c92aa0":"#### Using Entropy instead of Gini","4682fca4":"# Data Preparation","a5477274":"#### Specifying the minimum samples before the split","fd7dc029":"#### Create helper functions to evaluate the model performance and create the graph for DT","7c7d1b03":"#### Hyper-parameter tuning using Grid Search CV","51ce9b42":"# Data Sourcing","6631cd1f":"#### Train - test split","81d8d716":"#### Controlling the depth of the tree"}}