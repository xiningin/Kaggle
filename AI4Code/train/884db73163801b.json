{"cell_type":{"8764d2be":"code","7adbfabf":"code","0410dcd9":"code","1deabe42":"code","97438fcc":"code","f4b6695e":"code","a307279a":"code","7044e398":"code","54d9f0bb":"code","9da5f4d0":"code","4ddac432":"code","c96213de":"code","d01a92d4":"code","dd1795c0":"code","1ba2ec24":"code","1aeb26e7":"code","9524e358":"code","e0fd8144":"code","3631ba4e":"code","bae323ae":"code","6704bd1a":"code","6f177eb5":"code","aaa5d15c":"code","09646e4b":"code","8be05ffa":"code","24f83a98":"code","e88f453e":"code","ce5e2f89":"code","8efc4f56":"code","19a41a1a":"code","5a0d240c":"code","991c0e1e":"code","a70a624d":"code","41f70648":"code","efe99a1d":"code","d3051504":"code","592c2183":"code","a35f16af":"code","1f30b895":"code","9c7860b3":"code","bd9b823c":"code","61eccbfb":"code","4856a1b9":"code","eed935e7":"code","b7c946b8":"code","66c579dd":"code","651a00e3":"code","a5868ccd":"code","9abc7c1c":"code","869e8dc6":"code","b298495e":"code","626abb4c":"code","3e8f2c2f":"code","78333e1a":"code","c61d907c":"code","836260d0":"code","6140ccf6":"code","d6c84ffd":"code","9a22c1ef":"code","9f3a6531":"code","066d7f0e":"code","a867196c":"code","1c3f3de2":"code","c82c41e8":"code","301a6d57":"code","a0c2d067":"code","4f9bdfb1":"code","fab54445":"code","28639a1c":"code","8c9f2a47":"code","d58001e3":"code","7152363e":"code","e1651420":"code","a7ca1d64":"code","46be49bd":"code","84546e88":"code","b068df74":"code","26044e14":"code","61d5a917":"code","6859564a":"code","43b21e74":"code","db6888b3":"code","f6c0ab27":"code","26d09ea0":"code","b4624fe7":"code","7b060142":"code","4a564d79":"code","ef8780e2":"code","3e1ec97f":"code","24e2fbbd":"code","4290c6a3":"code","8c289c3c":"code","ea59131f":"code","50cd25dd":"code","abd27e94":"code","fb197c53":"code","3ec066bf":"code","c60a0451":"code","4a588ac8":"code","715a1a72":"code","c3a95442":"code","57cd66ab":"code","bbaf5358":"code","c0368e60":"code","b495fb20":"code","6239833d":"code","8601cfe1":"code","4d931be4":"code","a03fac67":"code","b85a3dc1":"code","96258392":"code","f218c00e":"code","63dfe4c1":"code","8dfb72e8":"code","957bd2e3":"code","eeef0def":"code","b558e4fb":"code","26ac857c":"code","09c9cac2":"code","f85a57f1":"code","4cb2787c":"code","e228c656":"code","8534310e":"code","8d4a1d55":"code","024645e9":"code","1a5a53d9":"code","932fc034":"code","d828e487":"code","222367b7":"code","ee2331d4":"code","159367e3":"code","5aa1c94f":"code","20bf672c":"code","8482e2a0":"code","1c493450":"code","8c2842dd":"code","03d18e64":"code","2b0c27f0":"code","317cdfea":"code","956dd7e5":"code","361c455f":"code","c0274d8f":"code","fcbe9a60":"code","941bd92c":"code","1c2b4756":"code","8718f8d9":"code","6891d24b":"code","8c708925":"code","81214e67":"code","9f65f07e":"code","e9d539d1":"code","8b181a77":"code","8b93ed0c":"code","3b71b1ff":"code","27adc2d6":"code","050276d8":"code","4770e37e":"code","f7c3fb43":"code","6e74e8bb":"code","ce22dc2e":"code","d617cc78":"code","bac6301f":"code","a6d9eaf0":"code","bd3b3b41":"code","3c88e195":"code","5bae2102":"code","bb82a225":"code","1df2039b":"code","4ee6c1a9":"code","f3f192ce":"code","ab471f39":"code","23b11328":"code","d82e3031":"code","27e170ad":"code","565e5d19":"code","b1553e2e":"code","ed3fe106":"code","ae430278":"code","bdc66999":"code","2df31260":"code","3047fdda":"code","26d1fe5e":"code","5665a27f":"code","5b1c3955":"code","e746da2f":"code","e1754262":"code","bf3b874c":"code","4113041a":"code","5102c139":"markdown","22788e41":"markdown","3039442d":"markdown","8e0849bd":"markdown","8207f8a1":"markdown","f2e30320":"markdown","b160d620":"markdown","3a543d1c":"markdown","0f0d6646":"markdown","6d478119":"markdown","7c736e6b":"markdown","9c71e0f3":"markdown","1ed19f83":"markdown","8fc7ef41":"markdown","830ebd59":"markdown","3a31a838":"markdown","18788997":"markdown","bfffc94d":"markdown","007ffeb7":"markdown","48a08834":"markdown","a7e49de5":"markdown","6838d1a1":"markdown","d0f3290f":"markdown","cb59f0e1":"markdown","20d9d76e":"markdown","b9871ff3":"markdown","4412b8e1":"markdown","40626957":"markdown","9b42bb0e":"markdown","d8e8d509":"markdown","24bb69b2":"markdown","2d58021b":"markdown","6ee8206f":"markdown","c03d5516":"markdown","8c5dacd6":"markdown","2360283a":"markdown","f69b8711":"markdown","0df9bb40":"markdown","217fe690":"markdown","f1310115":"markdown","ca68550a":"markdown","72af15ae":"markdown","4cb99801":"markdown","3a0ba54f":"markdown","928b799a":"markdown","b266a798":"markdown","55bce12e":"markdown","e0959dcb":"markdown","803a1e60":"markdown","8bb0ece1":"markdown","f5ccae91":"markdown","230534be":"markdown","e680596d":"markdown","ca948273":"markdown","241904ea":"markdown","80e3b1e1":"markdown","937b7bd8":"markdown","f2d7dc05":"markdown","43dc5e81":"markdown","67433094":"markdown","04fb98c5":"markdown","e6cb2892":"markdown","355106c4":"markdown","96a6e12b":"markdown","d26169ae":"markdown","b24da596":"markdown","d2f456fe":"markdown","1951b75e":"markdown","ec899e77":"markdown","63e823b9":"markdown","2b84b150":"markdown","7b8b32b8":"markdown","def7e205":"markdown","08e484f7":"markdown","7dede19d":"markdown","31bf94b2":"markdown","5cdb96ae":"markdown","f5bb3504":"markdown","a654185a":"markdown","ceddcebf":"markdown","178408ef":"markdown","0a4694ff":"markdown"},"source":{"8764d2be":"import numpy as np\n\nx=np.array([1,2,3,4],np.int16)","7adbfabf":"print(x)\nprint(type(x))","0410dcd9":"print(x[0])\nprint(x[1])","1deabe42":"print(x[-1])\nprint(x[3])","97438fcc":"x=np.array([[1,2,3],[5,6,7]],np.int16)\nprint(x)","f4b6695e":"print(x[0,0])\nprint(x[0,1])\nprint(x[0,2])","a307279a":"print(x[:,0])\nprint(x[:,1])","7044e398":"print(x[0,:])\nprint(x[1,:])","54d9f0bb":"x=np.array([[[1,2,3],[5,6,7]],[[0,-1,-2],[-4,-2,-6]]],np.int16)\nprint(x)","9da5f4d0":"print(x[0,0,0])\nprint(x[0,0,2])","4ddac432":"print(x[1,0,2])","c96213de":"print(x[:,:,0])\nprint(x[:,:,1])","d01a92d4":"print(x[:,1,1])","dd1795c0":"x=np.array([[[1,2,4],[5,7,8]],[[0,-1,-2],[-4,-2,-6]]],np.int16)\nprint(x)","1ba2ec24":"print(x.shape)","1aeb26e7":"print(x.ndim)","9524e358":"print(x.dtype)","e0fd8144":"print(x.size)","3631ba4e":"print(x.nbytes)","bae323ae":"print(x.T)","6704bd1a":"print(np.inf)\nprint(np.NAN)\nprint(np.NaN)\nprint(np.NINF)\nprint(np.PINF)\nprint(np.NZERO)\nprint(np.PZERO)","6f177eb5":"print(np.e)\nprint(np.euler_gamma)\nprint(np.pi)","aaa5d15c":"x = np.empty([3, 3], np.uint8)\nprint(x)","09646e4b":"y = np.eye(5, dtype=np.uint8)\nprint(y)","8be05ffa":"y = np.eye(5, dtype=np.uint8, k=1)\nprint(y)","24f83a98":"y = np.eye(5, dtype=np.uint8, k=-1)\nprint(y)","e88f453e":"x = np.identity(5, dtype= np.uint8)\nprint(x)","ce5e2f89":"x = np.ones((2, 5, 5), dtype=np.int16)\nprint(x)","8efc4f56":"x = np.zeros((2, 5, 5, 2), dtype=np.int16)\nprint(x)","19a41a1a":"x = np.full((3, 3, 3), dtype=np.int16, fill_value = 5)\nprint(x)","5a0d240c":"x = np.tri(3, 3, k=0, dtype=np.uint16)\nprint(x)","991c0e1e":"x = np.tri(5, 5, k=1, dtype=np.uint16)\nprint(x)","a70a624d":"x = np.tri(5, 5, k=-1, dtype=np.uint16)\nprint(x)","41f70648":"x = np.ones((5, 5), dtype=np.uint8)\ny = np.tril(x, k=-1)\nprint(y)","efe99a1d":"x = np.ones((5, 5), dtype=np.uint8)\ny = np.triu(x, k=0)\nprint(y)","d3051504":"x = np.ones((5, 5), dtype=np.uint8)\ny = np.triu(x, k=-1)\nprint(y)","592c2183":"x = np.ones((5, 5), dtype=np.uint8)\ny = np.triu(x, k=1)\nprint(y)","a35f16af":"%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt","1f30b895":"x = np.arange(5)\nprint(x)","9c7860b3":"y = x \nprint(y)","bd9b823c":"plt.plot(x, y, 'o--')\nplt.plot(x, -y, 'o-')\nplt.show()","61eccbfb":"plt.plot(x, y, 'o--')\nplt.plot(x, -y, 'o-')\nplt.title('y=x and y=-x')\nplt.show()","4856a1b9":"N = 11\nx = np.linspace(0, 10, N)\nprint(x)\ny = x","eed935e7":"plt.plot(x, y, 'o--')\nplt.axis('off')\nplt.show()","b7c946b8":"y = np.logspace(0.1, 1, N)\nprint(y)\nplt.plot(x, y, 'o--')\nplt.show()","66c579dd":"y = np.geomspace(0.1, 1000, N)\nprint(y)\nplt.plot(x, y, 'o--')\nplt.show()","651a00e3":"x = np.random.randint( low = 0, high = 9, size = 10)\nprint(x)","a5868ccd":"x = np.random.rand(3, 3)\nprint(x)","9abc7c1c":"x = np.random.rand(3, 3, 3)\nprint(x)","869e8dc6":"x = np.random.rand(2, 2, 2, 2, 2)\nprint(x)","b298495e":"x = np.arange(6)\nprint(x)","626abb4c":"y = x.reshape((3, 2))\nprint(y)","3e8f2c2f":"x = np.array([[0, 1, 2], [3, 4, 5]], dtype = np.uint8)\nprint(x)","78333e1a":"y = np.reshape(x, 6)\nprint(y)","c61d907c":"print(x)","836260d0":"y = np.ravel(x)\nprint(y)","6140ccf6":"print(x)","d6c84ffd":"y = x.flatten()\nprint(y)","9a22c1ef":"y = x.flatten('C')\nprint(y)","9f3a6531":"y = x.flatten('F')\nprint(y)","066d7f0e":"x = np.array([1, 2, 3], dtype = np.uint8)\ny = np.array([4, 5, 6], dtype = np.uint8)\n\nprint(x.dtype)\n\nprint(x)\nprint(y)","a867196c":"z = np.stack((x, y))\nprint(z)","1c3f3de2":"z = np.stack((x, y), axis = 0 )\nprint(z)","c82c41e8":"z = np.stack((x, y), axis = -1 )\nprint(z)","301a6d57":"z = np.stack((x, y), axis = 1 )\nprint(z)","a0c2d067":"print(x)\nprint(y)","4f9bdfb1":"z = np.dstack((x, y))\nprint(z)","fab54445":"print(z.shape)","28639a1c":"z = np.hstack((x, y))\nprint(z)","8c9f2a47":"z = np.vstack((x, y))\nprint(z)","d58001e3":"print(z.shape)","7152363e":"x = np.arange(9)\nprint(x)","e1651420":"a, b, c = np.split(x, 3)\nprint(a, b, c)","a7ca1d64":"x = np.random.rand(4, 4, 4)\nprint(x)","46be49bd":"y, z = np.split(x, 2)\nprint(y, z)","84546e88":"y, z = np.dsplit(x, 2)\nprint(y, z)","b068df74":"y, z = np.hsplit(x, 2)\nprint(y, z)","26044e14":"y, z = np.vsplit(x, 2)\nprint(y, z)","61d5a917":"x = np.arange(16).reshape(4, 4)\nprint(x)","6859564a":"y = np.flip(x, axis = -1)\nprint(y)","43b21e74":"y = np.flip(x, axis = 0)\nprint(y)","db6888b3":"y = np.flip(x, axis = 1)\nprint(y)","f6c0ab27":"y = np.fliplr(x)\nprint(x)\nprint(y)","26d09ea0":"y = np.flipud(x)\nprint(x)\nprint(y)","b4624fe7":"y = np.roll(x, 8)\nprint(y)","7b060142":"y = np.rot90(x)\nprint(x)\nprint(y)","4a564d79":"x = np.array([0, 1, 0, 1], np.uint8)\ny = np.array([0, 0, 1, 1], np.uint8)\n\nprint(np.bitwise_and(x, y))\nprint(np.bitwise_or(x, y))\nprint(np.bitwise_xor(x, y))\nprint(np.bitwise_not(x))","ef8780e2":"a = np.random.randint(low = 0, high = 10, size = 10)\nprint(a)","3e1ec97f":"print(np.median(a))","24e2fbbd":"print(np.average(a))","4290c6a3":"print(np.mean(a))","8c289c3c":"print(np.std(a))","ea59131f":"print(np.var(a))","50cd25dd":"print(np.histogram(a))","abd27e94":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = [1, 4, 5, 2, 3, 6]\n\nplt.plot(x)\nplt.show()","fb197c53":"x = np.arange(10)\nplt.plot(x)\nplt.show()","3ec066bf":"plt.plot(x, [y**2 for y in x])\nplt.show()","c60a0451":"plt.plot(x, x**2)\nplt.show()","4a588ac8":"x = np.arange(10)\nplt.plot(x, x**2)\nplt.plot(x, x**3)\nplt.plot(x, x*2)\nplt.plot(x, 2**x)\nplt.show()","715a1a72":"plt.plot(x, x**2, x, x**3, x, x*2, x, 2**x)\nplt.show()","c3a95442":"x = np.array([[1, 2, 6, 3], [4, 5, 3, 2]])\nplt.plot(x)\nplt.show()","57cd66ab":"data = np.random.randn(2, 10)\nprint(data)\nplt.plot(data[0], data[1])\nplt.show()","bbaf5358":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.grid(True)\nplt.show()","c0368e60":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.grid(True)\nprint(plt.axis())\nplt.show()","b495fb20":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.grid(True)\nplt.axis([0, 2, 0, 8])\nplt.show()","6239833d":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.grid(True)\nplt.xlim([0, 2])\nplt.ylim([0, 8])\nplt.show()","8601cfe1":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.grid(True)\nplt.xlabel('x = np.arange(3)')\nplt.xlim([0, 2])\nplt.ylabel('y = f(x)')\nplt.ylim([0, 8])\nplt.show()","4d931be4":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.grid(True)\nplt.xlabel('x = np.arange(3)')\nplt.xlim([0, 2])\nplt.ylabel('y = f(x)')\nplt.ylim([0, 8])\nplt.title('Simple Plot Demo')\nplt.show()","a03fac67":"x = np.arange(3)\nplt.plot(x, x**2, label='x**2')\nplt.plot(x, x**3, label='x**3')\nplt.plot(x, 2*x, label='2*x')\nplt.plot(x, 2**x, label='2**x')\nplt.legend()\nplt.grid(True)\nplt.xlabel('x = np.arange(3)')\nplt.xlim([0, 2])\nplt.ylabel('y = f(x)')\nplt.ylim([0, 8])\nplt.title('Simple Plot Demo')\nplt.show()","b85a3dc1":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.legend(['x**2', 'x**3', '2*x', '2**x'])\nplt.grid(True)\nplt.xlabel('x = np.arange(3)')\nplt.xlim([0, 2])\nplt.ylabel('y = f(x)')\nplt.ylim([0, 8])\nplt.title('Simple Plot Demo')\nplt.show()","96258392":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.legend(['x**2', 'x**3', '2*x', '2**x'], loc='upper center')\nplt.grid(True)\nplt.xlabel('x = np.arange(3)')\nplt.xlim([0, 2])\nplt.ylabel('y = f(x)')\nplt.ylim([0, 8])\nplt.title('Simple Plot Demo')\nplt.show()","f218c00e":"x = np.arange(3)\nplt.plot(x, x**2, x, x**3, x, 2*x, x, 2**x)\nplt.legend(['x**2', 'x**3', '2*x', '2**x'], loc='upper center')\nplt.grid(True)\nplt.xlabel('x = np.arange(3)')\nplt.xlim([0, 2])\nplt.ylabel('y = f(x)')\nplt.ylim([0, 8])\nplt.title('Simple Plot Demo')\nplt.savefig('test.png')\nplt.show()","63dfe4c1":"x = np.arange(5)\ny = x\n\nplt.plot(x, y+1, 'g')\nplt.plot(x, y+0.5, 'y')\nplt.plot(x, y, 'r')\nplt.plot(x, y-0.2, 'c')\nplt.plot(x, y-0.4, 'k')\nplt.plot(x, y-0.6, 'm')\nplt.plot(x, y-0.8, 'w')\nplt.plot(x, y-1, 'b')\nplt.show()","8dfb72e8":"plt.plot(x, y+1, 'g', x, y+0.5, 'y', x, y, 'r', x, y-0.2, 'c', \n         x, y-0.4, 'k', x, y-0.6, 'm', x, y-0.8, 'w', x, y-1, 'b')\nplt.show()","957bd2e3":"plt.plot(x, y, '-', x, y+1, '--', x, y+2, '-.', x, y+3, ':')\nplt.show()","eeef0def":"plt.plot(x, y, '.')\nplt.plot(x, y+0.5, ',')\nplt.plot(x, y+1, 'o')\nplt.plot(x, y+2, '<')\nplt.plot(x, y+3, '>')\nplt.plot(x, y+4, 'v')\nplt.plot(x, y+5, '^')\nplt.plot(x, y+6, '1')\nplt.plot(x, y+7, '2')\nplt.plot(x, y+8, '3')\nplt.plot(x, y+9, '4')\nplt.plot(x, y+10, 's')\nplt.plot(x, y+11, 'p')\nplt.plot(x, y+12, '*')\nplt.plot(x, y+13, 'h')\nplt.plot(x, y+14, 'H')\nplt.plot(x, y+15, '+')\nplt.plot(x, y+16, 'D')\nplt.plot(x, y+17, 'd')\nplt.plot(x, y+18, '|')\nplt.plot(x, y+19, '_')\nplt.show()","b558e4fb":"plt.plot(x, y, 'mo--')\nplt.plot(x, y+1 , 'g*-.')\nplt.show()","26ac857c":"plt.plot(x, y, color='g', linestyle='--', linewidth=1.5,\n        marker='^', markerfacecolor='b', markeredgecolor='k',\n        markeredgewidth=1.5, markersize=5)\nplt.grid(True)\nplt.show()","09c9cac2":"x = y = np.arange(10)\nplt.plot(x, y, 'o--')\nplt.xticks(range(len(x)), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\nplt.yticks(range(1, 10, 1))\nplt.show()","f85a57f1":"# !pip3 install plotly","4cb2787c":"import plotly","e228c656":"plotly.__version__","8534310e":"import datetime\nfrom plotly import subplots\nfrom plotly.offline import plot\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)","8d4a1d55":"N = 1000\nrandom_x = np.random.randn(N)\nrandom_y = np.random.randn(N)\n\ntrace = go.Scatter(\nx = random_x,\ny = random_y,\nmode = 'markers')\n\ndata = [trace]\n\n# plot(data, filename='basicScatter.html')\niplot(data)","024645e9":"N = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N)+5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N)-5\n\n# Create traces\ntrace0 = go.Scatter(\n    x = random_x,\n    y = random_y0,\n    mode = 'markers',\n    name = 'markers'\n)\n\ntrace1 = go.Scatter(\n    x = random_x,\n    y = random_y1,\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\n\ntrace2 = go.Scatter(\n    x = random_x,\n    y = random_y2,\n    mode = 'lines',\n    name = 'lines'\n)\n\ndata = [trace0, trace1, trace2]\n\n# Plot the data and system generated filename\n# plot(data)\niplot(data)","1a5a53d9":"N = 500\n\ntrace0 = go.Scatter(\n    x = np.random.randn(N),\n    y = np.random.randn(N)+2,\n    name = 'Above',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = 'rgba(152, 0, 0, .8)',\n        line = dict(\n            width = 2,\n            color = 'rgb(0, 0, 0)'\n        )\n    )\n)\n\ntrace1 = go.Scatter(\n    x = np.random.randn(N),\n    y = np.random.randn(N)-2,\n    name = 'Below',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = 'rgba(255, 182, 193, .9)',\n        line = dict(\n            width = 2,\n        )\n    )\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(title = 'Styled Scatter',\n              yaxis = dict(zeroline = False),\n              xaxis = dict(zeroline = False)\n             )\n\nfig = dict(data=data, layout=layout)\n# plot(fig, filename='styled-scatter.html')\niplot(fig)","932fc034":"trace = go.Scatter(\ny = np.random.randn(500),\nmode = 'markers',\nmarker=dict(\nsize=16,\ncolor=np.random.randn(500),\ncolorscale='Viridis',\nshowscale=True\n)\n)\n\ndata = [trace]\n\n# plot(data , filename= 'colorscale.html')\niplot(data)","d828e487":"N = 100000\ntrace = go.Scattergl(\nx = np.random.randn(N),\ny = np.random.randn(N),\nmode='markers',\nmarker=dict(\ncolor = '#FFBAD2',\nline=dict(width=1)))\ndata = [trace]\n# plot(data, filename='large.html')\niplot(data)","222367b7":"trace0 = go.Scatter(\nx = [1, 2, 3, 4],\ny = [10, 20, 30, 40],\nmode='markers',\nmarker=dict(\nsize=[20, 30, 40, 50]))\n\ndata = [trace0]\n# plot(data, filename='bubblechart.html')\niplot(data)","ee2331d4":"trace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 20, 30, 40],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',\n               'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n        opacity=[1, 0.8, 0.6, 0.4],\n        size=[20, 30, 40, 50]\n    )\n)\n\ndata = [trace0]\n# plot(data, filename='bubblechart-size.html')\niplot(data)","159367e3":"size = [20, 40, 60, 80, 100, 80, 60, 40, 20, 40]\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    y=[11, 12, 10, 11, 12, 11, 12, 13, 12, 11],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',\n               'rgb(98, 54, 114)', 'rgb(45, 244, 134)',\n               'rgb(73, 134, 217)', 'rgb(235, 144, 14)',\n               'rgb(63, 164, 54)', 'rgb(215, 146, 78)',\n               'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n        size=size,\n        sizemode='area',\n        sizeref=2.*max(size)\/(40.**2),\n        sizemin=4\n    )\n)\n\ndata = [trace0]\n# plot(data, filename='bubblechart-size-ref.html')\niplot(data)","5aa1c94f":"trace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 11, 12, 13],\n    text=['A<br>size: 40', 'B<br>size: 60', 'C<br>size: 80', 'D<br>size: 100'],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  \n               'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n        size=[40, 60, 80, 100],\n    )\n)\n\ndata = [trace0]\n# plot(data, filename='bubblechart-text.html')\niplot(data)","20bf672c":"data = [\n    {\n        'x': [1, 3.2, 5.4, 7.6, 9.8, 12.5],\n        'y': [1, 3.2, 5.4, 7.6, 9.8, 12.5],\n        'mode': 'markers',\n        'marker': {\n            'color': [120, 125, 130, 135, 140, 145],\n            'size': [15, 30, 55, 70, 90, 110],\n            'showscale': True\n        }\n    }\n]\n\n# plot(data, filename='scatter-colorscale.html')\niplot(data)","8482e2a0":"N = 500\nrandom_x = np.linspace(0, 1, N)\nrandom_y = np.random.randn(N)\n\n# Create a trace\ntrace = go.Scatter(\n    x = random_x,\n    y = random_y\n)\n\ndata = [trace]\n\n# plot(data, filename='basic-line.html')\niplot(data)","1c493450":"N = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N)+5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N)-5\n\n# Create traces\ntrace0 = go.Scatter(\n    x = random_x,\n    y = random_y0,\n    mode = 'lines',\n    name = 'lines'\n)\ntrace1 = go.Scatter(\n    x = random_x,\n    y = random_y1,\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\ntrace2 = go.Scatter(\n    x = random_x,\n    y = random_y2,\n    mode = 'markers',\n    name = 'markers'\n)\ndata = [trace0, trace1, trace2]\n\n# plot(data, filename='line-mode.html')\niplot(data)","8c2842dd":"trace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5, \n       6, 7, 8, 9, 10,\n       11, 12, 13, 14, 15],\n    y=[10, 20, None, 15, 10,\n       5, 15, None, 20, 10,\n       10, 15, 25, 20, 10],\n    name = '<b>No<\/b> Gaps', # Style name\/legend entry with html tags\n    connectgaps=True\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3, 4, 5,\n       6, 7, 8, 9, 10,\n       11, 12, 13, 14, 15],\n    y=[5, 15, None, 10, 5,\n       0, 10, None, 15, 5,\n       5, 10, 20, 15, 5],\n    name = 'Gaps',\n)\n\ndata = [trace1, trace2]\n\nfig = dict(data=data)\niplot(fig)","03d18e64":"trace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[0, 2, 3, 5],\n    fill='tozeroy'\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[3, 5, 1, 7],\n    fill='tonexty'\n)\n\ndata = [trace1, trace2]\niplot(data)","2b0c27f0":"trace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[0, 2, 3, 5],\n    fill='tozeroy',\n    mode= 'none'\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[3, 5, 1, 7],\n    fill='tonexty',\n    mode= 'none'\n)\n\ndata = [trace1, trace2]\niplot(data)","317cdfea":"x=['Winter', 'Spring', 'Summer', 'Fall']\n\ntrace0 = dict(\n    x=x,\n    y=[40, 60, 40, 10],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(131, 90, 241)'),\n    stackgroup='one'\n)\ntrace1 = dict(\n    x=x,\n    y=[20, 10, 10, 60],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(111, 231, 219)'),\n    stackgroup='one'\n)\ntrace2 = dict(\n    x=x,\n    y=[40, 30, 50, 30],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(184, 247, 212)'),\n    stackgroup='one'\n)\ndata = [trace0, trace1, trace2]\n\nfig = dict(data=data)\niplot(fig,validate=False)","956dd7e5":"data = [go.Bar(\n            x=['giraffes', \n               'orangutans', \n               'monkeys'],\n            y=[20, 14, 23]\n    )]\n\niplot(data)","361c455f":"trace1 = go.Bar(\n    x=['giraffes', 'orangutans', \n       'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo'\n)\ntrace2 = go.Bar(\n    x=['giraffes', 'orangutans', \n       'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='group'\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c0274d8f":"trace1 = go.Bar(\n    x=['giraffes', 'orangutans', \n       'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo'\n)\ntrace2 = go.Bar(\n    x=['giraffes', 'orangutans', \n       'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","fcbe9a60":"trace0 = go.Bar(\n    x=['Product A', 'Product B', 'Product C'],\n    y=[20, 14, 23],\n    text=['27% market share', \n          '24% market share', \n          '19% market share'],\n    marker=dict(\n        color='rgb(158,202,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5,\n        )\n    ),\n    opacity=0.6\n)\n\ndata = [trace0]\nlayout = go.Layout(\n    title='January 2013 Sales Report',\n)\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","941bd92c":"x = ['Product A', \n     'Product B', \n     'Product C']\ny = [20, 14, 23]\n\ndata = [go.Bar(\n            x=x,\n            y=y,\n            text=y,\n            textposition = 'auto',\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )]\n\niplot(data)","1c2b4756":"trace0 = go.Bar(\n    x=['Jan', 'Feb', 'Mar', \n       'Apr', 'May', 'Jun',\n       'Jul', 'Aug', 'Sep', \n       'Oct', 'Nov', 'Dec'],\n    y=[20, 14, 25, 16, 18, 22, \n       19, 15, 12, 16, 14, 17],\n    name='Primary Product',\n    marker=dict(\n        color='rgb(49,130,189)'\n    )\n)\ntrace1 = go.Bar(\n    x=['Jan', 'Feb', 'Mar', \n       'Apr', 'May', 'Jun',\n       'Jul', 'Aug', 'Sep', \n       'Oct', 'Nov', 'Dec'],\n    y=[19, 14, 22, 14, 16, 19, \n       15, 14, 10, 12, 12, 16],\n    name='Secondary Product',\n    marker=dict(\n        color='rgb(204,204,204)',\n    )\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    xaxis=dict(tickangle=-45),\n    barmode='group',\n)\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","8718f8d9":"trace0 = go.Bar(\n    x=['Feature A', 'Feature B', \n       'Feature C',\n       'Feature D', 'Feature E'],\n    y=[20, 14, 23, 25, 22],\n    marker=dict(\n        color=['rgba(204,204,204,1)', \n               'rgba(222,45,38,0.8)',\n               'rgba(204,204,204,1)', \n               'rgba(204,204,204,1)',\n               'rgba(204,204,204,1)']),\n)\n\ndata = [trace0]\nlayout = go.Layout(\n    title='Least Used Feature',\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6891d24b":"trace0 = go.Bar(\n    x=[1, 2, 3, 5.5, 10],\n    y=[10, 8, 6, 4, 2],\n    width = [0.8, 0.8, \n             0.8, 3.5, 4]\n)\n\ndata = [trace0]\n\nfig = go.Figure(data=data)\niplot(fig)","8c708925":"data = [\n    go.Bar(\n        x = ['2016',\n             '2017',\n             '2018'],\n        y = [500, 600, 700],\n        base = [-500, -600, -700],\n        marker = dict(\n          color = 'red'\n        ),\n        name = 'expenses'\n    ),\n    go.Bar(\n        x = ['2016', \n             '2017', \n             '2018'],\n        y = [300, 400, 700],\n        base = 0,\n        marker = dict(\n          color = 'blue'\n        ),\n        name = 'revenue'\n    )\n]\n\n\nfig = go.Figure(data=data)\niplot(fig)","81214e67":"data = [go.Bar(\n            x=[20, 14, 23],\n            y=['giraffes', 'orangutans', 'monkeys'],\n            orientation = 'h'\n)]\n\niplot(data)","9f65f07e":"trace1 = go.Bar(\n    y=['giraffes', 'orangutans', 'monkeys'],\n    x=[20, 14, 23],\n    name='SF Zoo',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(246, 78, 139, 0.6)',\n        line = dict(\n            color = 'rgba(246, 78, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=['giraffes', 'orangutans', 'monkeys'],\n    x=[12, 18, 29],\n    name='LA Zoo',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(58, 71, 80, 0.6)',\n        line = dict(\n            color = 'rgba(58, 71, 80, 1.0)',\n            width = 3)\n    )\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e9d539d1":"df = [dict(Task=\"Job A\", Start='2009-01-01', \n           Finish='2009-02-28'),\n      dict(Task=\"Job B\", Start='2009-03-05', \n           Finish='2009-04-15'),\n      dict(Task=\"Job C\", Start='2009-02-20', \n           Finish='2009-05-30')]\n\nfig = ff.create_gantt(df)\niplot(fig)","8b181a77":"df = [dict(Task=\"Job A\", Start='2009-01-01', \n           Finish='2009-02-28', Complete=10),\n      dict(Task=\"Job B\", Start='2008-12-05', \n           Finish='2009-04-15', Complete=60),\n      dict(Task=\"Job C\", Start='2009-02-20', \n           Finish='2009-05-30', Complete=95)]\n\nfig = ff.create_gantt(df, colors='Viridis', \n                      index_col='Complete', \n                      show_colorbar=True)\niplot(fig)","8b93ed0c":"df = [dict(Task=\"Job A\", Start='2009-01-01', \n           Finish='2009-02-01', Resource='Apple'),\n      dict(Task=\"Job B\", Start='2009-03-05', \n           Finish='2009-04-15', Resource='Grape'),\n      dict(Task=\"Job C\", Start='2009-04-20', \n           Finish='2009-09-30', Resource='Banana')]\n\ncolors = ['#7a0504', (0.2, 0.7, 0.3), \n          'rgb(210, 60, 180)']\n\nfig = ff.create_gantt(df, colors=colors, index_col='Resource', \n                      reverse_colors=True, show_colorbar=True)\niplot(fig)","3b71b1ff":"df = [dict(Task=\"Job A\", Start='2016-01-01', \n           Finish='2016-01-02', Resource='Apple'),\n      dict(Task=\"Job B\", Start='2016-01-02', \n           Finish='2016-01-04', Resource='Grape'),\n      dict(Task=\"Job C\", Start='2016-01-02', \n           Finish='2016-01-03', Resource='Banana')]\n\ncolors = dict(Apple = 'rgb(220, 0, 0)',\n              Grape = 'rgb(170, 14, 200)',\n              Banana = (1, 0.9, 0.16))\n\nfig = ff.create_gantt(df, colors=colors, \n                      index_col='Resource', \n                      show_colorbar=True)\niplot(fig)","27adc2d6":"labels = ['Oxygen','Hydrogen',\n          'Carbon_Dioxide','Nitrogen']\nvalues = [4500,2500,1053,500]\n\ntrace = go.Pie(labels=labels, values=values)\n\niplot([trace])","050276d8":"labels = ['Oxygen','Hydrogen',\n          'Carbon_Dioxide','Nitrogen']\nvalues = [4500,2500,1053,500]\ncolors = ['#FEBFB3', '#E1396C', \n          '#96D38C', '#D0F9B1']\n\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='label+percent', \n               textinfo='value', \n               textfont=dict(size=20),\n               marker=dict(colors=colors, \n                           line=dict(color='#000000', \n                                     width=2)))\n\niplot([trace])","4770e37e":"fig = {\n  \"data\": [\n    {\n      \"values\": [16, 15, 12, 6, 5, 4, 42],\n      \"labels\": [\n        \"US\",\n        \"China\",\n        \"European Union\",\n        \"Russian Federation\",\n        \"Brazil\",\n        \"India\",\n        \"Rest of World\"\n      ],\n      \"domain\": {\"x\": [0, .48]},\n      \"name\": \"GHG Emissions\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },\n    {\n      \"values\": [27, 11, 25, 8, 1, 3, 25],\n      \"labels\": [\n        \"US\",\n        \"China\",\n        \"European Union\",\n        \"Russian Federation\",\n        \"Brazil\",\n        \"India\",\n        \"Rest of World\"\n      ],\n      \"text\":[\"CO2\"],\n      \"textposition\":\"inside\",\n      \"domain\": {\"x\": [.52, 1]},\n      \"name\": \"CO2 Emissions\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Global Emissions 1990-2011\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"GHG\",\n                \"x\": 0.20,\n                \"y\": 0.5\n            },\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"CO2\",\n                \"x\": 0.8,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig)","f7c3fb43":"fig = {\n    'data': [\n        {\n            'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n            'values': [38, 27, 18, 10, 7],\n            'type': 'pie',\n            'name': 'Starry Night',\n            'marker': {'colors': ['rgb(56, 75, 126)',\n                                  'rgb(18, 36, 37)',\n                                  'rgb(34, 53, 101)',\n                                  'rgb(36, 55, 57)',\n                                  'rgb(6, 4, 4)']},\n            'domain': {'x': [0, .48],\n                       'y': [0, .49]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n        },\n        {\n            'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n            'values': [28, 26, 21, 15, 10],\n            'marker': {'colors': ['rgb(177, 127, 38)',\n                                  'rgb(205, 152, 36)',\n                                  'rgb(99, 79, 37)',\n                                  'rgb(129, 180, 179)',\n                                  'rgb(124, 103, 37)']},\n            'type': 'pie',\n            'name': 'Sunflowers',\n            'domain': {'x': [.52, 1],\n                       'y': [0, .49]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n\n        },\n        {\n            'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n            'values': [38, 19, 16, 14, 13],\n            'marker': {'colors': ['rgb(33, 75, 99)',\n                                  'rgb(79, 129, 102)',\n                                  'rgb(151, 179, 100)',\n                                  'rgb(175, 49, 35)',\n                                  'rgb(36, 73, 147)']},\n            'type': 'pie',\n            'name': 'Irises',\n            'domain': {'x': [0, .48],\n                       'y': [.51, 1]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n        },\n        {\n            'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n            'values': [31, 24, 19, 18, 8],\n            'marker': {'colors': ['rgb(146, 123, 21)',\n                                  'rgb(177, 180, 34)',\n                                  'rgb(206, 206, 40)',\n                                  'rgb(175, 51, 21)',\n                                  'rgb(35, 36, 21)']},\n            'type': 'pie',\n            'name':'The Night Caf\u00e9',\n            'domain': {'x': [.52, 1],\n                       'y': [.51, 1]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n        }\n    ],\n    'layout': {'title': 'Van Gogh: 5 Most Prominent Colors Shown Proportionally',\n               'showlegend': False}\n}\n\niplot(fig)","6e74e8bb":"trace = go.Table(\n    header=dict(values=['A Scores', 'B Scores']),\n    cells=dict(values=[[100, 90, 80, 90],\n                       [95, 85, 75, 95]]))\n\ndata = [trace] \niplot(data)","ce22dc2e":"trace = go.Table(\n    header=dict(values=['A Scores', 'B Scores'],\n                line = dict(color='#7D7F80'),\n                fill = dict(color='#a1c3d1'),\n                align = ['left'] * 5),\n    cells=dict(values=[[100, 90, 80, 90],\n                       [95, 85, 75, 95]],\n               line = dict(color='#7D7F80'),\n               fill = dict(color='#EDFAFF'),\n               align = ['left'] * 5))\n\nlayout = dict(width=500, height=300)\ndata = [trace]\nfig = dict(data=data, layout=layout)\niplot(fig)","d617cc78":"# !pip3 install colorlover","bac6301f":"import colorlover as cl\n\ncolors = cl.scales['9']['seq']['Reds']\na = np.random.randint(low=0, high=9, size=10)\nb = np.random.randint(low=0, high=9, size=10)\nc = np.random.randint(low=0, high=9, size=10)\n\n\ntrace0 = go.Table(\n  header = dict(\n    values = ['<b>Column A<\/b>', '<b>Column B<\/b>', '<b>Column C<\/b>'],\n    line = dict(color = 'white'),\n    fill = dict(color = 'white'),\n    align = 'center',\n    font = dict(color = 'black', size = 12)\n  ),\n  cells = dict(\n    values = [a,b,c],\n    line = dict(color = [np.array(colors)[a],np.array(colors)[b],\n                        np.array(colors)[c]]),\n    fill = dict(color = [np.array(colors)[a],np.array(colors)[b],\n                        np.array(colors)[c]]),\n    align = 'center',\n    font = dict(color = 'white', size = 11)\n    ))\n\ndata = [trace0]\n\niplot(data)","a6d9eaf0":"trace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5],\n    y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]\n)\ntrace2 = go.Bar(\n    x=[0, 1, 2, 3, 4, 5],\n    y=[1, 0.5, 0.7, -1.2, 0.3, 0.4]\n)\n\ndata = [trace1, trace2]\niplot(data)","bd3b3b41":"import json\nimport six.moves.urllib\n\nresponse = six.moves.urllib.request.urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/steepest.json')\ndata = json.load(response)\n\ntrace1 = go.Contour(\n    z=data['contour_z'][0],\n    y=data['contour_y'][0],\n    x=data['contour_x'][0],\n    ncontours=30,\n    showscale=False\n)\ntrace2 = go.Scatter(\n    x=data['trace_x'],\n    y=data['trace_y'],\n    mode='markers+lines',\n    name='steepest',\n    line=dict(\n        color='black'\n    )\n)\n\ndata = [trace1, trace2]\niplot(data)","3c88e195":"trace1 = go.Scatter(\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y = [8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\n\ntrace2 = go.Scatter(\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\nxaxis=dict(\ntype='log',\n    autorange=True\n),\nyaxis=dict(\ntype='log',\n    autorange=True\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5bae2102":"trace = go.Scatterpolar(\nr = [39, 28, 8, 7, 28, 39],\ntheta =['A', 'B', 'C', 'D', 'E', 'A'],\nfill = 'toself')\n\ndata = [trace]\n\nlayout = go.Layout(\npolar = dict(\nradialaxis = dict(\nvisible = True,\nrange = [0, 50])),\nshowlegend=False)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","bb82a225":"trace1 = go.Scatterpolar(\n      r = [39, 28, 8, 7, 28, 39],\n      theta = ['A','B','C', 'D', 'E', 'A'],\n      fill = 'toself',\n      name = 'Group A'\n    )\ntrace2 = go.Scatterpolar(\n      r = [1.5, 10, 39, 31, 15, 1.5],\n      theta = ['A','B','C', 'D', 'E', 'A'],\n      fill = 'toself',\n      name = 'Group B'\n    )\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 50]\n    )\n  ),\n  showlegend = True\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","1df2039b":"trace1 = go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n      tickprefix = 'a = ',\n      ticksuffix = 'm',\n      smoothing = 1,\n      minorgridcount = 9\n      ),\n    baxis = dict(\n      tickprefix = 'b = ',\n      ticksuffix = 'Pa',\n      smoothing = 1,\n      minorgridcount = 9\n      )\n    )\n\ndata = [trace1]\n\nfig = go.Figure(data = data)\niplot(fig)","4ee6c1a9":"trace1 = go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n      tickprefix = 'a = ',\n      ticksuffix = 'm',\n      smoothing = 1,\n      minorgridcount = 9\n      ),\n    baxis = dict(\n      tickprefix = 'b = ',\n      ticksuffix = 'Pa',\n      smoothing = 1,\n      minorgridcount = 9\n      )\n    )\n\ntrace2 = go.Scattercarpet(\n    a = [4, 4.5, 5, 6],\n    b = [2.5, 2.5, 2.5, 2.5],\n    line = dict(\n      shape = 'spline',\n      smoothing = 1,\n      color = 'blue'\n    )\n  )\n\ndata = [trace1,trace2]\n\nfig = go.Figure(data = data)\niplot(fig)","f3f192ce":"trace1 = go.Carpet(\n    a = [0.1,0.2,0.3],\n    b = [1,2,3],\n    y = [[1,2.2,3],[1.5,2.7,3.5],[1.7,2.9,3.7]],\n    cheaterslope = 1,\n    aaxis = dict(\n        title = \"a\",\n        tickmode = \"linear\",\n        dtick = 0.05\n    ),\n    baxis = dict(\n        title = \"b\",\n        tickmode = \"linear\",\n        dtick = 0.05\n    )\n)\n\ntrace2 = go.Scattercarpet(\n    name = \"b = 1.5\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [1.5, 1.5, 1.5, 1.5]\n)\n\ntrace3 = go.Scattercarpet(\n    name = \"b = 2\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [2, 2, 2, 2]\n)\n\ntrace4 = go.Scattercarpet(\n    name = \"b = 2.5\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [2.5, 2.5, 2.5, 2.5]\n)\n\ntrace5 = go.Scattercarpet(\n    name = \"a = 0.15\",\n    a = [0.15, 0.15, 0.15, 0.15],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    )\n)\n\ntrace6 = go.Scattercarpet(\n    name = \"a = 0.2\",\n    a = [0.2, 0.2, 0.2, 0.2],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    ),\n      marker = dict(\n        size = [10, 20, 30, 40],\n        color = [\"#000\", \"#f00\", \"#ff0\", \"#fff\"]\n      )\n)\n\ntrace7 = go.Scattercarpet(\n    name = \"a = 0.25\",\n    a = [0.25, 0.25, 0.25, 0.25],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    )\n)\n\nlayout = go.Layout(\n    title = \"scattercarpet extrapolation, clipping, and smoothing\",\n    hovermode = \"closest\"\n)\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","ab471f39":"x = y = np.linspace(-3, 3, 100)\nY, X = np.meshgrid (x, y)\n\nu = -1 - X**3 + Y\nv = 1 + X - Y**4\n\nfig = ff.create_streamline(x, y, u, v, arrow_scale=0.1)\niplot(fig)","23b11328":"x, y = np.meshgrid ( np.arange(0, 2, 0.2),\n                   np.arange(0, 2, 0.2))\n\nu = np.cos(x) * y\nv = np.sin(x) * y\n\nfig = ff.create_quiver(x, y, u, v)\niplot(fig)","d82e3031":"trace = go.Heatmap(z = [[1, 20, 30],\n                       [20, 1, 60],\n                       [30, 60, 1]])\ndata = [trace]\niplot(data)","27e170ad":"trace = go.Heatmap(z = [[1, 20, 30, 50, 1],\n                       [20, 1, 60, 80, 30],\n                       [30, 60, 1, -10, 20]],\n                  x = ['Moday', 'Tuesday', 'Wednsday', 'Thursday', 'Friday'],\n                  y = ['Morning', 'Sfternoon', 'Evening'])\ndata = [trace]\niplot(data)","565e5d19":"programmers = ['Alex', 'Nicole', 'Sara',\n               'Etienne', 'Chelsea', \n               'Jody', 'Marianne']\n\nbase = datetime.datetime.today()\ndate_list = [base - datetime.timedelta(days=x) for x in range(0, 180)]\n\nz = []\n\nfor prgmr in programmers:\n    new_row = []\n    for date in date_list:\n        new_row.append( np.random.poisson() )\n    z.append(list(new_row))\n\ndata = [\n    go.Heatmap(\n        z=z,\n        x=date_list,\n        y=programmers,\n        colorscale='Viridis',\n    )\n]\n\nlayout = go.Layout(\n    title='GitHub commits per day',\n    xaxis = dict(ticks='', nticks=36),\n    yaxis = dict(ticks='' )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b1553e2e":"X = np.random.rand(15, 15)\ndendro = ff.create_dendrogram(X)\ndendro['layout'].update({'width':800, \n                         'height':500})\niplot(dendro)","ed3fe106":"X = np.random.rand(15, 15)\ndendro = ff.create_dendrogram(X, \n                              color_threshold=1.5)\ndendro['layout'].update({'width':800, \n                         'height':500})\niplot(dendro)","ae430278":"X = np.random.rand(10, 10)\nnames = ['Jack', 'Oxana', 'John', \n         'Chelsea', 'Mark', 'Alice', \n         'Charlie', 'Rob', 'Lisa', 'Lily']\nfig = ff.create_dendrogram(X, orientation='left', \n                           labels=names)\nfig['layout'].update({'width':800, 'height':800})\niplot(fig)","bdc66999":"trace1 = go.Barpolar(\n    r=[77.5, 72.5, 70.0, 45.0, \n       22.5, 42.5, 40.0, 62.5],\n    text=['North', 'N-E', 'East', \n          'S-E', 'South', 'S-W', \n          'West', 'N-W'],\n    name='11-14 m\/s',\n    marker=dict(\n        color='rgb(106,81,163)'\n    )\n)\ntrace2 = go.Barpolar(\n    r=[57.49999999999999, 50.0, \n       45.0, 35.0, 20.0, 22.5, \n       37.5, 55.00000000000001],\n    text=['North', 'N-E', 'East', \n          'S-E', 'South', 'S-W', \n          'West', 'N-W'],\n    name='8-11 m\/s',\n    marker=dict(\n        color='rgb(158,154,200)'\n    )\n)\ntrace3 = go.Barpolar(\n    r=[40.0, 30.0, 30.0, 35.0, \n       7.5, 7.5, 32.5, 40.0],\n    text=['North', 'N-E', 'East', \n          'S-E', 'South', 'S-W', \n          'West', 'N-W'],\n    name='5-8 m\/s',\n    marker=dict(\n        color='rgb(203,201,226)'\n    )\n)\ntrace4 = go.Barpolar(\n    r=[20.0, 7.5, 15.0, 22.5, \n       2.5, 2.5, 12.5, 22.5],\n    text=['North', 'N-E', 'East', \n          'S-E', 'South', 'S-W', \n          'West', 'N-W'],\n    name='< 5 m\/s',\n    marker=dict(\n        color='rgb(242,240,247)'\n    )\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    title='Wind Speed Distribution in Laurel, NE',\n    font=dict(\n        size=16\n    ),\n    legend=dict(\n        font=dict(\n            size=16\n        )\n    ),\n    radialaxis=dict(\n        ticksuffix='%'\n    ),\n    orientation=270\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2df31260":"\ntrace =     go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]]\n    )\n\ndata = [trace]\niplot(data)","3047fdda":"data = [\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        x=[-9, -6, -5 , -3, -1],\n        y=[0, 1, 4, 5, 7]\n    )]\n\niplot(data)","26d1fe5e":"data = [\n     go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n#        colorscale='Jet',\n         colorscale='Viridis'\n    )]\niplot(data)","5665a27f":"data = [\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorscale='Jet',\n        autocontour=False,\n        contours=dict(\n            start=0,\n            end=8,\n            size=2\n        )\n    )\n]\niplot(data)","5b1c3955":"data = [\n    {\n        'z': [[10, 10.625, 12.5, 15.625, 20],\n              [5.625, 6.25, 8.125, 11.25, 15.625],\n              [2.5, 3.125, 5., 8.125, 12.5],\n              [0.625, 1.25, 3.125, 6.25, 10.625],\n              [0, 0.625, 2.5, 5.625, 10]],\n        'colorscale':'Jet',\n        'type': u'contour',\n        'dx': 10,\n        'x0': 5,\n        'dy': 10,\n        'y0':10\n    }\n]\niplot(data)","e746da2f":"trace0 = go.Contour(\n    z=[[2, 4, 7, 12, 13, 14, 15, 16],\n       [3, 1, 6, 11, 12, 13, 16, 17],\n       [4, 2, 7, 7, 11, 14, 17, 18],\n       [5, 3, 8, 8, 13, 15, 18, 19],\n       [7, 4, 10, 9, 16, 18, 20, 19],\n       [9, 10, 5, 27, 23, 21, 21, 21],\n       [11, 14, 17, 26, 25, 24, 23, 22]],\n    line=dict(smoothing=0)\n)\ntrace1 = go.Contour(\n    z=[[2, 4, 7, 12, 13, 14, 15, 16],\n       [3, 1, 6, 11, 12, 13, 16, 17],\n       [4, 2, 7, 7, 11, 14, 17, 18],\n       [5, 3, 8, 8, 13, 15, 18, 19],\n       [7, 4, 10, 9, 16, 18, 20, 19],\n       [9, 10, 5, 27, 23, 21, 21, 21],\n       [11, 14, 17, 26, 25, 24, 23, 22]],\n    line=dict(smoothing=1)\n)\n\nfig = subplots.make_subplots(rows=1, cols=2,\n                          subplot_titles=('Without Smoothing', \n                                          'With Smoothing'))\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\niplot(fig)","e1754262":"data=[\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        contours=dict(\n            coloring='heatmap'\n        )\n    )\n]\niplot(data)","bf3b874c":"data=[\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        contours=dict(\n            coloring ='heatmap',\n            showlabels = True,\n            labelfont = dict(\n                family = 'Raleway',\n                size = 12,\n                color = 'white'\n            )\n        )\n    )\n]\n\niplot(data)","4113041a":"data = [\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorscale='Jet',\n        contours=dict(\n            coloring='lines'\n        )\n    )\n]\niplot(data)","5102c139":"### Ndarrays Properties","22788e41":"### Styled Pie Chart","3039442d":"### Area Charts with Boundry Lines","8e0849bd":"### Customizing Spacing Between X and Y Axis Ticks","8207f8a1":"### Add Multiple Scatter Traces","f2e30320":"### Basic Radar Plot","b160d620":"## Basic Visualization with Matplotlib\n### Matplotlib\n- Plotting library for Python and NumPy\n- visualization package, 2D plotting and basic 3D plotting\n- Pyplot module in matplotlib is MATLAB style interface for visualization\n- plots, histograms, power spectra, bar charts, error charts,scatterplots, etc., with just a few lines of code\n- Developed by John D. Hunter\n- Works with Ipython and Jupyter interfaces","3a543d1c":"## Plotting with matplotlib\n### Single Line Plots in details","0f0d6646":"### Set Orientation and Add Labels","6d478119":"### Basic Bar Chart","7c736e6b":"### Scatter with a Color Dimension","9c71e0f3":"## Basic Data Visualization with Plotly\n### Installation and Version Checking","1ed19f83":"### Basic Carpet plot","8fc7ef41":"### Multiline Plots","830ebd59":"## Random Sampling","3a31a838":"### Use a Dictionary for Colors","18788997":"### Simple Pie Chart","bfffc94d":"### Line Plot Modes","007ffeb7":"### Customizing Individual Bar Base","48a08834":"### Add Carpet Scatter Trace","a7e49de5":"### Basic Quiver Plot","6838d1a1":"### Colored Horizontal Bar Chart","d0f3290f":"### Customizing Individual Bar Widths","cb59f0e1":"### Hover Text with Bubble Charts","20d9d76e":"## Array Manipulation Routines","b9871ff3":"### Windrose","4412b8e1":"### Index by Numeric Variable","40626957":"### Grid Axes and Labels","9b42bb0e":"# Scientific Data Visualization with Plotly","d8e8d509":"### Large Data Sets","24bb69b2":"## Scientific Python Ecosystem\n### Core Packages\n\n- **NumPy** - the fundamental package for numerical computation\n- **SciPy Library** - a collection of numerical algorithms and domain-specific toolboxes\n- **Matplotlib** \u2013 plotting and visualization package, 2D plotting and basic 3D plotting\n- **SymPy** - for symbolic mathematics and computer algebra\n- **Pandas** \u2013 easy to use data structures for data science\n- **IPython** \u2013 Interactive shell and web based notebook for rapid prototyping of ideas\n\n### Additional Packages:\nnot the part of the core packages, yet very important\n- **Scikit-image** \u2013 Image processing library\n- **Scikit-learn** \u2013 machine learning and AI library\n- **Jupyter** \u2013 Interactive web based notebook with code,visualizations, rich text, videos, and more\n- **h5py and PyTables** \u2013 both access data stored in HDF5 format\n- **nose and pytest** \u2013 unit testing frameworks for python (nose is being phased out in preference for pytest","2d58021b":"### Matrix creation routines","6ee8206f":"### NumPy Constants","c03d5516":"### What is SciPy\n**SciPy** one of the core packages of SciPy ecosystem. Many user-friendly and efficient numerical routines. Extensively used for scientific and technical computing. SciPy builds on the NumPy array object\n### SciPy Routines\n- Integration\n- FFTs\n- Optimization\n- Image Processing\n- Signal Processing\n- Interpolation\n- Linear Algebra\n- Statistics","8c5dacd6":"### Set Color Threshold","2360283a":"### Heatmap with Datetime Axis","f69b8711":"### Basic Heatmap","0df9bb40":"### Stacked Area Chart","217fe690":"### List of NumPy Datatypes\n| NumPy Type | C Type  | Description\n|---------|---------|---------\n|np.int8 |int8_t |Byte (-128 to 127)\n|np.int16 |int16_t |Integer (-32768 to 32767)\n|np.int32 |int32_t |Integer (-2147483648 to2147483647)\n|np.int64 |int64_t |Integer (-9223372036854775808 to9223372036854775807)\n|np.uint8 |uint8_t |Unsigned integer (0 to 255)\n|np.uint16 |uint16_t |Unsigned integer (0 to 65535)\n|np.uint32 |uint32_t |Unsigned integer (0 to 4294967295)\n|np.uint64 |uint64_t |Unsigned integer (0 to 18446744073709551615)\n|np.intp |intptr_t |Integer used for indexing, typically the same as ssize_t\n|np.uintp |uintptr_t |Integer large enough to hold a pointer\n|np.float32 |float \n|np.float64 \/ np.float_ |double| Note that this matches the precision of the builtin python float.\n|np.complex64 |float complex |Complex number, represented by two 32-bit floats (real and imaginary components)\n|np.complex128 \/ np.complex_| double complex| Note that this matches the precision","f1310115":"### Basic Horizontal Bar Chart","ca68550a":"### Basic Contour Plot","72af15ae":"## Array creation routines\n### Ones and Zeros","4cb99801":"### Stacked Bar Chart","3a0ba54f":"### Scatter plots - simple","928b799a":"### Connect Data Gaps","b266a798":"### Basic Area Charts","55bce12e":"## Contents\n- Getting Started with NumPy\n- Array creation routines\n- Basic Visualization with Matplotlib\n- Random Sampling\n- Array Manipulation\n- Bitwise Operations\n- Statistical Functions\n- Plotting with matplotlib\n- Basic Visualization with Plotly\n- Advanced Data Visualization with Plotly","e0959dcb":"### Angled Bar Chart Labels","803a1e60":"### Simple Line Plot","8bb0ece1":"### Contour Line Labels","f5ccae91":"### Pie Chart Subplots","230534be":"### Color Line Markers","e680596d":"### Index by String Variable","ca948273":"### Multiple Trace Radar Chart","241904ea":"### Donut Chart","80e3b1e1":"### Bubble Charts","937b7bd8":"### Smooth Contour Coloring","f2d7dc05":"### Setting X and Y Coordinates in a Contour Plot","43dc5e81":"### Basic Streamline Plot","67433094":"### Bubble Charts with Colorscale","04fb98c5":"### Ndarrays, indexing, and Slicing","e6cb2892":"### Customizing Individual Bar Colors","355106c4":"### Basic Tables","96a6e12b":"### Gantt Charts","d26169ae":"### Grouped Bar Chart","b24da596":"### Basic Dendrogram","d2f456fe":"### Setting Marker Size and Color","1951b75e":"### Styled Table","ec899e77":"### Contour Lines","63e823b9":"### Colorscale for Contour Plot","2b84b150":"### Multiple Visualization\n### Line Chart and a Bar Chart","7b8b32b8":"## Statistical Functions\n","def7e205":"### Smoothing the Contour lines","08e484f7":"### Bar Chart with Hover Text","7dede19d":"### Bar Chart with Direct Labels","31bf94b2":"## Bitwise Operations","5cdb96ae":"### Customizing Size and Range of a Contour Plot's Contours","f5bb3504":"### Cell Colors based on Variables","a654185a":"## Getting Started with NumPy\n### What is NumPy\n**NumPy**:Fundamental package for scientific computing with Python. It has a powerful N-dimensional Array Object called as ndarray and routines to manipulate it. It also has other derived objects like masked arrays and matrices. Assortment of routines for arrays for faster computation.NumPy is used by other libraries like SciPy, matplotlib, OpenCV,Scikit-image, Scikit-learn, pandas to store the multi-dimentional\ndata.","ceddcebf":"## Advanced Data Visualization with Plotly\n### Log Plots","178408ef":"### Heatmap with Categorical Axis Labels","0a4694ff":"### Scaling the Size of Bubble Charts"}}