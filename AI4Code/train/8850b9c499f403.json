{"cell_type":{"01059dc5":"code","b29153c9":"code","1e2da276":"code","255a9e35":"code","0d40e9f8":"code","6f018060":"code","053ed08c":"code","e1b7c5a7":"code","74f140bb":"code","2da63f16":"code","b702cea6":"code","445ef8e1":"code","1aeb66e9":"code","e0d1d7df":"code","bcb4e065":"code","fed9545d":"code","5f6a4d54":"code","17109aee":"code","ef1113fb":"code","4b04c6a0":"code","e4ae784a":"code","6bce0345":"code","aec680ac":"markdown","89a655a9":"markdown","8f2d57e1":"markdown"},"source":{"01059dc5":"import pandas as pd \nimport matplotlib.pyplot as plt \nimport networkx as nx\nfrom tqdm import tqdm\nfrom collections import defaultdict\nfrom itertools import combinations","b29153c9":"data = pd.read_json(\"..\/input\/multichannel-contacts-problem\/contacts.json\") \ndata.head()","1e2da276":"data_1 = data.iloc[:1000, :]","255a9e35":"df_test = pd.DataFrame(columns=['Id', 'Email', 'Phone', 'Contacts', 'OrderId'])\ndf_test.loc[0] = [0,'abx@gmail.com','234567', 3,''] # user 1\ndf_test.loc[1] = [1,'','234567', 7,'45678765456789'] # user 1\ndf_test.loc[2] = [2,'abx@gmail.com','', 8,'45678765456789'] # user 1\ndf_test.loc[3] = [3,'','', 1,'45678765456789'] # user 1\ndf_test.loc[4] = [4,'','234567', 2,''] # user 1\ndf_test.loc[5] = [5,'abx@gmail.com','', 8,''] # user 1\ndf_test.loc[6] = [6,'','46546546123189', 8,'45678765456789'] # user 1\ndf_test.loc[7] = [7,'cfg@gmail.com','46546546123189', 8,''] # user 1\ndf_test.loc[8] = [77,'ccc@gmail.com','12644654', 12,''] # user 2\ndf_test.loc[9] = [78,'','12644654', 1,'456465464654'] # user 2\ndf_test.loc[10] = [79,'ccc@gmail.com','', 2,'456465464654'] # user 2\ndf_test.loc[11] = [80,'','', 12,'456465464654'] # user 2\ndf_test.loc[12] = [81,'','12644654', 10,''] # user 2\ndf_test.loc[13] = [82,'ccc@gmail.com','', 12,''] # user 2\ndf_test.loc[14] =  [83,'ccc@hotmail.com','', 12,'456465464654'] # user 2\ndf_test.loc[15] =  [84,'ccc@hotmail.com','123321', 12,''] # user 2","0d40e9f8":"df_dict = df_test.to_dict('record') # convert to a list of dicts, where each dict is a row","6f018060":"G = nx.Graph() # define an empty undirected graph","053ed08c":"for row in df_dict: # represent each ticket as a node in the graph\n    G.add_node(row[\"Id\"], Email = row[\"Email\"], Phone = row[\"Phone\"], OrderId = row[\"OrderId\"]) \nnx.draw(G)","e1b7c5a7":"combination = lambda x : list(combinations(x, 2)) # list of all possible connections between nodes\nemail_link = defaultdict(list)\nphone_link = defaultdict(list)\norder_link = defaultdict(list)\n\nfor node in tqdm(G.nodes(data = True)):\n    email, phone, order = node[1].values()\n    if email != '':\n        email_link[email].append(node[0]) # create mapping of attributes to the tickets that contain that attribute\n    if phone != '':\n        phone_link[phone].append(node[0])\n    if order != '':\n        order_link[order].append(node[0])\n\nfor email in email_link.values():\n    G.add_edges_from(combination(email))\n\nfor phone in phone_link.values():\n    G.add_edges_from(combination(phone))\n\nfor order in order_link.values():\n    G.add_edges_from(combination(order))","74f140bb":"nx.draw(G)","2da63f16":"S = [G.subgraph(c).copy() for c in nx.connected_components(G)] # get the two subgraphs (users) shown in the graph","b702cea6":"nx.draw(S[1])","445ef8e1":"ticket_list = []\ncontact_list = []\nfor customer in S:\n    ticket_trace_contact = str('-'.join(map(str,sorted(customer.nodes)))) + \", \"  + str(df_test[df_test[\"Id\"].isin(customer.nodes)][\"Contacts\"].sum())\n    for ticket in customer.nodes:\n        ticket_list.append(ticket)\n        contact_list.append(ticket_trace_contact)\n\noutput = pd.DataFrame({\n    \"ticket_id\" : ticket_list,\n    \"ticket_trace\/contact\": contact_list\n})\noutput.sort_values(\"ticket_id\", inplace= True)\noutput.head()","1aeb66e9":"df_dict = data.to_dict('record')\ndf_dict","e0d1d7df":"G = nx.Graph()","bcb4e065":"for row in df_dict:\n    G.add_node(row[\"Id\"], Email = row[\"Email\"], Phone = row[\"Phone\"], Orderid = row[\"OrderId\"])","fed9545d":"# for node in tqdm(G.nodes(data=True)):\n#     for node_2 in G.nodes(data = True):\n#         attr_1 = set(node[1].values())\n#         attr_2 = set(node_2[1].values())\n#         if len(attr_1 & attr_2) > 1:\n#             # print(attr_1)\n#             # print(attr_2)\n#             G.add_edge(node[0], node_2[0])\n# from collections import defaultdict\n# from itertools import combinations\ncombination = lambda x : list(combinations(x, 2)) # list of all possible connections between nodes\nemail_link = defaultdict(list)\nphone_link = defaultdict(list)\norder_link = defaultdict(list)\n\nfor node in tqdm(G.nodes(data = True)):\n    email, phone, order = node[1].values()\n    if email != '':\n        email_link[email].append(node[0])\n    if phone != '':\n        phone_link[phone].append(node[0])\n    if order != '':\n        order_link[order].append(node[0])\n\nfor email in email_link.values():\n    G.add_edges_from(combination(email))\n\nfor phone in phone_link.values():\n    G.add_edges_from(combination(phone))\n\nfor order in order_link.values():\n    G.add_edges_from(combination(order))","5f6a4d54":"S = [G.subgraph(c).copy() for c in nx.connected_components(G)]","17109aee":"nx.draw(S[1])","ef1113fb":"data.iloc[list(S[1].nodes), :]","4b04c6a0":"ticket_list = []\ncontact_list = []\nfor i in S:\n    ticket_trace_contact = str('-'.join(map(str,sorted(i.nodes)))) + \", \"  + str(data[data[\"Id\"].isin(i.nodes)][\"Contacts\"].sum())\n    for ticket in i.nodes:\n        ticket_list.append(ticket)\n        contact_list.append(ticket_trace_contact)\n\n","e4ae784a":"output = pd.DataFrame({\n    \"ticket_id\" : ticket_list,\n    \"ticket_trace\/contact\": contact_list\n})\noutput.sort_values(\"ticket_id\", inplace= True)","6bce0345":"output.to_csv(\"submit.csv\", index = False)","aec680ac":"Processing entire dataset","89a655a9":"Unfortnately, I only managed to come up with this idea AFTER the deadline so I can't submit this notebook (previous attempt was a brute force through every pair of nodes which ran out of time and thus I had to submit an almost empty csv file lol). But I'm pretty sure this attempt works in answering the question based on some testing I did and it does it 1000x faster than the old notebook.","8f2d57e1":"Testing on a Sample Test Case"}}