{"cell_type":{"2c288493":"code","d9c0be35":"code","dcbcbb4e":"code","122dd902":"code","f1bf9b6c":"code","93dad596":"code","f3b5cdc4":"code","ee07ed26":"code","f968d31d":"code","503358ba":"code","b29e84f5":"code","17906acb":"code","c6196802":"code","758f1923":"code","7e2c6e0d":"code","2259672e":"code","a2cd86ec":"code","5044e3f4":"code","63484983":"code","240de2d4":"code","d1248339":"code","79dd3bdb":"code","50c3072f":"code","3531c192":"code","377868a7":"code","839fe8d3":"code","71062783":"code","0219d383":"code","54fe65a5":"code","fcaef983":"code","8b483a6d":"code","9488be45":"code","dcd9f652":"code","df9e7622":"code","17d638a6":"code","226149bb":"code","3c44cff9":"code","35e50da0":"code","f3b67391":"code","48e13925":"code","7a6580bc":"code","e68e5915":"code","761834bf":"code","455cb887":"code","91a7c12b":"code","47377ca2":"code","ad43c206":"code","907df716":"code","fd466596":"code","14d421b4":"code","ac30ff69":"code","18437032":"code","46ae0274":"code","eb0f1c75":"code","bdc920ec":"code","ecab7f50":"code","d56f1a6b":"code","9578c3fa":"code","d1db21e7":"code","f4085c1f":"markdown","469ed047":"markdown","59423a1a":"markdown","933045b5":"markdown","a919b1e4":"markdown"},"source":{"2c288493":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9c0be35":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","dcbcbb4e":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","122dd902":"df.head()","f1bf9b6c":"df.keys()","93dad596":"df.tail()","f3b5cdc4":"sns.pairplot(df, hue = 'DEATH_EVENT', vars = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', \n                                             'serum_sodium', 'time'])","ee07ed26":"sns.countplot(df['DEATH_EVENT'])","f968d31d":"sns.countplot(df['smoking'])","503358ba":"sns.countplot(df['high_blood_pressure'])","b29e84f5":"sns.countplot(df['sex'])","17906acb":"sns.countplot(df['diabetes'])","c6196802":"plt.figure(figsize = (20,10))\n\nsns.countplot(df['age'])","758f1923":"sns.scatterplot(x = 'serum_sodium', y = 'serum_creatinine', hue = 'DEATH_EVENT', data = df)","7e2c6e0d":"sns.boxplot(x = 'sex', y = 'age', data = df)","2259672e":"plt.figure(figsize = (20,10))\nsns.heatmap(df.corr(), annot = True)","a2cd86ec":"X = df[['time', 'ejection_fraction', 'serum_creatinine', 'age']]\n","5044e3f4":"X.head()","63484983":"y = df['DEATH_EVENT']","240de2d4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 1)","d1248339":"X_train","79dd3bdb":"X_test","50c3072f":"from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix","3531c192":"svc_model = SVC()\nsvc_model.fit(X_train, y_train)","377868a7":"y_predict = svc_model.predict(X_test)","839fe8d3":"cm = confusion_matrix(y_test, y_predict)","71062783":"sns.heatmap(cm, annot = True)","0219d383":"min_train = X_train.min()\nrange_train = (X_train-min_train).max()\nX_train_scaled = (X_train - min_train)\/range_train","54fe65a5":"sns.scatterplot(x = X_train['age'], y = X_train['time'], hue = y_train)","fcaef983":"min_test = X_test.min()\nrange_test = (X_test - min_test).max()\nX_test_scaled = (X_test - min_test)\/range_test","8b483a6d":"svc_model.fit(X_train_scaled, y_train)","9488be45":"y_predict = svc_model.predict(X_test_scaled)","dcd9f652":"cm = confusion_matrix(y_test, y_predict)","df9e7622":"sns.heatmap(cm, annot=True)","17d638a6":"print(classification_report(y_test, y_predict))","226149bb":"param_grid = {'C' : [0.1, 1, 10, 100], 'gamma' : [1, .1, .01, .001], 'kernel' : ['rbf']}","3c44cff9":"from sklearn.model_selection import GridSearchCV","35e50da0":"grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 4)","f3b67391":"grid.fit(X_train_scaled, y_train)","48e13925":"grid.best_params_","7a6580bc":"grid_predictions = grid.predict(X_test_scaled)","e68e5915":"cm = confusion_matrix(y_test, grid_predictions)","761834bf":"sns.heatmap(cm, annot=True)","455cb887":"print(classification_report(y_test, grid_predictions))","91a7c12b":"X = df[['time', 'ejection_fraction', 'serum_creatinine', 'age', 'high_blood_pressure']]\n\ny = df['DEATH_EVENT']\n\nfrom sklearn.linear_model import LogisticRegression\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, random_state=0)","47377ca2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","ad43c206":"logmodel = LogisticRegression()","907df716":"logmodel.fit(X_train, y_train)","fd466596":"predictions = logmodel.predict(X_test)","14d421b4":"print(classification_report(y_test, predictions))","ac30ff69":"from sklearn.model_selection import train_test_split\nX = df[['time', 'ejection_fraction', 'serum_creatinine', 'age']]\ny = df['DEATH_EVENT']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 1)","18437032":"from sklearn.neighbors import KNeighborsClassifier\n","46ae0274":"knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train,y_train)","eb0f1c75":"pred = knn.predict(X_test)","bdc920ec":"from sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_test,pred))","ecab7f50":"print(classification_report(y_test,pred))","d56f1a6b":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","9578c3fa":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","d1db21e7":"knn = KNeighborsClassifier(n_neighbors=10)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nprint('WITH K=10')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","f4085c1f":"# PART 5: KNN Model\n","469ed047":"# Part 1: Importing and Exploring Data****","59423a1a":"# Part 3: Building a Model \n\nFor this, we're going to do  a model based on time, the medicines, platelets, and age","933045b5":"# Part 4: Building A Logistic Regression Model\nBuilding a Logistic Regression Model based on diabetes, smoking, and high blood pressure","a919b1e4":"# Part 2: Visualizing The Data\n\nSome basic visualizations of some of the variables"}}