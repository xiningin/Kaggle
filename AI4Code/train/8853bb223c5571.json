{"cell_type":{"00dc7b7f":"code","d1014dd8":"code","3c9a435a":"code","3d991f2d":"code","87feeda2":"code","c29a51fe":"code","3fdce8f8":"code","42f9aef1":"code","55ddf565":"code","1b65db76":"code","0c83f873":"code","8317c871":"code","4be260ef":"code","aed77c11":"markdown","84bfc614":"markdown","92ff2741":"markdown","79e19d14":"markdown","df0e24b0":"markdown","4cc15323":"markdown","80e72dd5":"markdown","02d672ca":"markdown","117dee7f":"markdown","d6fefa0b":"markdown","8e29b0be":"markdown","cfb311c4":"markdown","6ff7c6ab":"markdown","5934b87c":"markdown","377897d7":"markdown","831bdef7":"markdown"},"source":{"00dc7b7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1014dd8":"import numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\nplt.rc('image', cmap='magma')\n\nimage_path = '..\/input\/cusersmarildownloadstigerjpg\/tiger.jpg'\nimage = tf.io.read_file(image_path)\nimage = tf.io.decode_jpeg(image, channels=1)\nimage = tf.image.resize(image, size=[400, 400])\n\nplt.figure(figsize=(6, 6))\nplt.imshow(tf.squeeze(image), cmap='gray')\nplt.axis('off')\nplt.show();","3c9a435a":"import learntools.computer_vision.visiontools as visiontools\nfrom learntools.computer_vision.visiontools import edge, bottom_sobel, emboss, sharpen\n\nKaggleNotebooks = [edge, bottom_sobel, emboss, sharpen]\nnames = [\"Edge Detect\", \"Bottom Sobel\", \"Emboss\", \"Sharpen\"]\n\nplt.figure(figsize=(12, 12))\nfor i, (KaggleNotebook, name) in enumerate(zip(KaggleNotebooks, names)):\n    plt.subplot(1, 4, i+1)\n    visiontools.show_kernel(KaggleNotebook)\n    plt.title(name)\nplt.tight_layout()","3d991f2d":"#Define a Kaggle Notebook with 3 rows and 3 columns.\n\nKaggleNotebook  = tf.constant([\n    [-2, -1, 0],\n    [-1, 1, 1],\n    [0, 1, 2],\n])","87feeda2":"# Reformat for batch compatibility.\nimage = tf.image.convert_image_dtype(image, dtype=tf.float32)\nimage = tf.expand_dims(image, axis=0)\nKaggleNotebook = tf.reshape(KaggleNotebook, [*KaggleNotebook.shape, 1, 1])\nKaggleNotebook = tf.cast(KaggleNotebook, dtype=tf.float32)","c29a51fe":"#Give the TensorFlow convolution function (without arguments)\n\nconv_fn = tf.nn.conv2d","3fdce8f8":"image_filter = conv_fn(\n    input=image,\n    filters=KaggleNotebook,\n    strides=1, # or (1, 1)\n    padding='SAME',\n)\n\nplt.imshow(\n    # Reformat for plotting\n    tf.squeeze(image_filter)\n)\nplt.axis('off')\nplt.show();","42f9aef1":"# Give the TensorFlow ReLU function (without arguments)\nrelu_fn = tf.nn.relu","55ddf565":"image_detect = relu_fn(image_filter)\n\nplt.imshow(\n    # Reformat for plotting\n    tf.squeeze(image_detect)\n)\nplt.axis('off')\nplt.show();","1b65db76":"# Sympy is a python library for symbolic mathematics. It has a nice\n# pretty printer for matrices, which is all we'll use it for.\nimport sympy\nsympy.init_printing()\nfrom IPython.display import display\n\nimage = np.array([\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 1, 1, 1],\n    [0, 1, 0, 0, 0, 0],\n])\n\nKaggleNotebook = np.array([\n    [1, -1],\n    [1, -1],\n])\n\ndisplay(sympy.Matrix(image))\ndisplay(sympy.Matrix(KaggleNotebook))\n# Reformat for Tensorflow\nimage = tf.cast(image, dtype=tf.float32)\nimage = tf.reshape(image, [1, *image.shape, 1])\nKaggleNotebook = tf.reshape(KaggleNotebook, [*KaggleNotebook.shape, 1, 1])\nKaggleNotebook = tf.cast(KaggleNotebook, dtype=tf.float32)","0c83f873":"image_filter = tf.nn.conv2d(\n    input=image,\n    filters=KaggleNotebook,\n    strides=1,\n    padding='VALID',\n)\nimage_detect = tf.nn.relu(image_filter)\n\n# The first matrix is the image after convolution, and the second is\n# the image after ReLU.\ndisplay(sympy.Matrix(tf.squeeze(image_filter).numpy()))\ndisplay(sympy.Matrix(tf.squeeze(image_detect).numpy()))","8317c871":"from PIL import Image\n\nimg = Image.open(\"..\/input\/cusersmarildownloadstigerjpg\/tiger.jpg\")\nimg","4be260ef":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thank you Ryan Holbrook, @mpwolke Was here' )","aed77c11":"#Define Kaggle Notebook\n\nYou have your choice of what kind of Kaggle Notebook to apply. One thing to keep in mind is that the sum of the numbers in the Kaggle Notebook determines how bright the final image is. Generally, you should try to keep the sum of the numbers between 0 and 1 (though that's not required for a correct answer).\n\nIn general, a Kaggle Notebook can have any number of rows and columns. Let's use a  3\u00d73  kernel, which often gives the best results. Define a Kaggle Notebook with tf.constant.","84bfc614":"#Apply convolution and ReLU to the image and display the result.","92ff2741":"#Apply Convolution","79e19d14":"#Apply Transformations","df0e24b0":"#Now you tell me ConVolution (and ReLU) or WITHOUT Volution?\n\nThe picture above is: \"The Embrace. (by Sergey Gorshkov \/ Wildlife Photographer of the Year) Grand Title Winner and Animals in their Environment Winner: A tigress hugs an ancient Manchurian fir, rubbing her cheek against the bark to leave secretions from her scent glands. She is an Amur, or Siberian, tiger, in Russia's Land of the Leopard National Park. Hunted almost to extinction in the past century, the population is still threatened by poaching and logging, which also impact their prey\u2014mostly deer and wild boar\"\n\nhttps:\/\/www.theatlantic.com\/photo\/2020\/10\/winners-wildlife-photographer-year-2020\/616710\/","4cc15323":"#Run this cell to see some standard kernels used in image processing.","80e72dd5":"In the tutorial, our discussion of Kaggle Notebooks and feature maps was mainly visual. We saw the effect of Conv2D and ReLU by observing how they transformed some example images.\n\nBut the operations in a convolutional network (like in all neural networks) are usually defined through mathematical functions, through a computation on numbers. In the next exercise, we'll take a moment to explore this point of view.\n\nLet's start by defining a simple array to act as an image, and another array to act as the Kaggle Notebook. The following cell show these arrays.","02d672ca":"Can you see how the Kaggle Notebook you chose relates to the feature map it produced?","117dee7f":"#Instructor:Ryan Holbrook, Data Scientist. All codes by Ryan Holbrook. I just changed kernel to KAGGLE NOTEBOOK.","d6fefa0b":"#Module 'learntools.computer_vision.visiontools' has no attribute 'show_KaggleNotebooks'  I came back to kernel.","8e29b0be":"#Execute the Convolution and see the result!","cfb311c4":"#Conclusion\n\nIn this lesson, you learned about the first two operations a convolutional classifier uses for feature extraction: filtering an image with a convolution and detecting the feature with the rectified linear unit.","6ff7c6ab":"#Do the first step of feature extraction, the filtering step. First run this cell to do some reformatting for TensorFlow.","5934b87c":"#Apply ReLU\n\nNow detect the feature with the ReLU function. In Keras, you'll usually use this as the activation function in a Conv2D layer. What is the backend function in TensorFlow that does the same thing?","377897d7":"#Detect the feature with ReLU and see the result!\n\nThe image you see below is the feature map produced by the Kaggle Notebook you chose. If you like, experiment with some of the other suggested Kaggle Notebooks above, or, try to invent one that will extract a certain kind of feature.","831bdef7":"#Observe Convolution on a Numerical Matrix\n\nWhat do you see? The image is simply a long vertical line on the left and a short horizontal line on the lower right. What about the Kaggle Notebook? What effect do you think it will have on this image? After you've thought about it, run the next cell for the answer."}}