{"cell_type":{"7990e36a":"code","a91129ce":"code","91661eb2":"code","1378b4bc":"code","01336b73":"code","9e61b7f4":"code","fadcccf9":"code","140b5d5f":"code","57983d40":"code","ea8e1083":"code","23b88609":"code","874d7ba9":"code","de318409":"code","f4239215":"code","128b29f7":"code","fd5aa235":"code","2c380962":"code","eaa9e178":"code","e689c2b0":"code","5d10dbbc":"markdown","fba77b8f":"markdown","306dcd1d":"markdown","d7d4ad41":"markdown","48cd9bb7":"markdown","da4d78c3":"markdown"},"source":{"7990e36a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm \nfrom glob import glob\nfrom sklearn.model_selection import *\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n\nfrom tensorflow.keras.applications import *\nfrom tensorflow.keras.layers import *\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.utils import Sequence\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.optimizers import *","a91129ce":"train_images='..\/input\/petfinder-pawpularity-score\/train'\ntest_images='..\/input\/petfinder-pawpularity-score\/test'\ntrain_df=pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\nsample_sub=pd.read_csv('..\/input\/petfinder-pawpularity-score\/sample_submission.csv')","91661eb2":"train_df.head()","1378b4bc":"#Target Distribution\nsns.displot(train_df['Pawpularity'])","01336b73":"#Let's plot some pets along with it's popularity\nr=c=3\nfig=plt.figure(figsize=(12,12))\nfor i in range(1,r*c+1):\n    img=cv2.imread(os.path.join(train_images,train_df.loc[i,'Id'])+'.jpg')\n    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    lbl=train_df.loc[i,'Pawpularity']\n    \n    fig.add_subplot(r,c,i)\n    plt.imshow(img)\n    plt.title('Pawwpularity: '+str(lbl))\n    plt.xticks([])\n    plt.yticks([])\n\nplt.show()","9e61b7f4":"#data Split\ntrain_df_,val_df=train_test_split(train_df,test_size=0.15)\nprint('Training Shape: ',train_df_.shape)\nprint('Validation Shape: ',val_df.shape)\n\ntrain_ids=train_df_['Id'].values\ntrain_targets=train_df_['Pawpularity'].values\n\nval_ids=val_df['Id'].values\nval_targets=val_df['Pawpularity'].values","fadcccf9":"#HyperParameters\nWIDTH=HEIGHT=224\nBATCH_SIZE=32\nEPOCHS=15\nlr_=0.001","140b5d5f":"#Kustom Generator\nclass KustomGenerator(Sequence):\n    def __init__(self,image_data,batch_size=BATCH_SIZE,dims=(WIDTH,HEIGHT,3),is_train=True):\n        self.imageids=image_data[0]\n        self.meta_data=image_data[1]\n        self.target=image_data[2]\n        self.batch_size=batch_size\n        self.dims=dims\n        self.is_train=is_train\n        self.on_epoch_end()\n    \n    def __len__(self):\n        return len(self.imageids)\/\/self.batch_size\n    \n    def on_epoch_end(self):\n        self.indexes=np.arange(len(self.imageids))\n        if self.is_train:\n            np.random.shuffle(self.indexes)\n    \n    def __getitem__(self,index):\n        indexes=self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        X_ids=[self.imageids[k] for k in indexes]\n        X_meta=[self.meta_data[k] for k in indexes]\n        y_=[self.target[k] for k in indexes]\n        \n        X=self.__data_generation(X_ids)\n        return [X,np.array(X_meta)],np.array(y_)\n    \n    def __data_generation(self,ids_):\n        tmp_images=np.zeros((self.batch_size,*self.dims))\n        for ix,id_ in enumerate(ids_):\n            img=cv2.imread(os.path.join(train_images,id_+'.jpg'))\n            img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n            img=cv2.resize(img,(HEIGHT,WIDTH))\n            tmp_images[ix]=img.astype('float')\/255.\n        return tmp_images","57983d40":"#Train data\ntrain_ids=train_df_['Id'].values\ntrain_meta=train_df_.iloc[:,2:13].values\ntrain_target=train_df_['Pawpularity'].values\n\n#Val data\nval_ids=val_df['Id'].values\nval_meta=val_df.iloc[:,2:13].values\nval_target=val_df['Pawpularity'].values","ea8e1083":"#Augmentation will be added in next update\ntrain_gen=KustomGenerator([train_ids,train_meta,train_target])\nval_gen=KustomGenerator([val_ids,val_meta,val_target],is_train=False) ","23b88609":"def simple_model(lr=lr_):\n    #Inputs\n    inp_0=Input((HEIGHT,WIDTH,3))\n    inp_1=Input(11)\n    \n    #Base Model\n    base_feat=EfficientNetB5(weights=None,\n                             include_top=False,input_tensor=inp_0)\n    for layer in base_feat.layers:\n        layer.trainable=True\n        \n    gap=GlobalAvgPool2D()(base_feat.output)\n    x=Dense(1024,activation='relu')(gap)\n    \n    #Meta Data\n    fc=Dense(256,activation='relu')(inp_1)\n    fc=Dense(512,activation='relu')(fc)\n    \n    x=Concatenate()([x,fc])\n    x=Dense(1024,activation='relu')(x)\n    out=Dense(1,activation='relu')(x)\n    \n    model_=Model([inp_0,inp_1],out)\n    model_.compile(loss='mse',optimizer=RMSprop(lr_))\n    return model_","874d7ba9":"model=simple_model()","de318409":"mc=ModelCheckpoint('val_loss',save_best_only=True,mode='min',save_freq=\"epoch\")","f4239215":"history=model.fit(train_gen,steps_per_epoch=train_gen.__len__(),epochs=EPOCHS,\n          validation_data=val_gen,validation_steps=val_gen.__len__(),callbacks=[mc])","128b29f7":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs=range(1,len(loss)+1)\nplt.plot(epochs,loss,'b',color='red',label='Training MSE')\nplt.plot(epochs,val_loss,'b',color='blue',label='Validation MSE')\nplt.title('Training and Validation Loss')\nplt.legend()\nplt.figure()\nplt.show()","fd5aa235":"def test_data(data):\n    image_ids=data[0]\n    meta_data=data[1]\n    \n    tmp_images=np.zeros((len(image_ids),HEIGHT,WIDTH,3))\n    for ix,id_ in enumerate(image_ids):\n        img=cv2.imread(os.path.join('..\/input\/petfinder-pawpularity-score\/test',id_+'.jpg'))\n        img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n        img=cv2.resize(img,(HEIGHT,WIDTH))\n        tmp_images[ix]=img.astype('float')\/255.\n    \n    return [tmp_images,np.array(meta_data)]","2c380962":"test_df=pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')\nimage_ids=test_df['Id'].values\nmeta_data=test_df.iloc[:,2:].values","eaa9e178":"pred=model.predict(test_data([image_ids,meta_data]))","e689c2b0":"sample_sub['Pawpularity']=pred\nsample_sub.to_csv('submission.csv',index=False)","5d10dbbc":"**Read Images**","fba77b8f":"**Some Insights**","306dcd1d":"**Custom Generator**\n* Takes in ids,meta_data,target\n* Output: Images,meta_data,target\n\n> In Next Update: Augmentation will be added","d7d4ad41":"**Prediction For test data**","48cd9bb7":"**Simple Model with 2 inputs and 1 output**","da4d78c3":"**Define Hyperparameters**"}}