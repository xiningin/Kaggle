{"cell_type":{"8c7b2565":"code","d6394447":"code","413bbdae":"code","e3104004":"code","9803ef0f":"code","7070d599":"code","c8fc8237":"code","7d170ad5":"code","a29d7183":"code","8482c933":"code","ba605407":"code","fce550ae":"code","91d7d571":"code","1a3e97f7":"code","38f6a5a7":"code","218970a0":"code","c4a15ae9":"code","bbe00cf3":"code","7a1cda71":"code","0084545c":"code","d875e187":"code","6245fea7":"code","0e55cf17":"code","ec1c1853":"code","e5c51b7d":"code","6aafa612":"code","f8a31f7c":"code","5bba6774":"code","605835e2":"code","461f415c":"code","8124a295":"code","0e2cdd3b":"code","615afebf":"code","83f8fa11":"code","7ba9c92c":"code","f2ee8b3e":"code","8a6a31f3":"code","03576eb4":"code","aec6481f":"code","336e9620":"markdown","a2523c56":"markdown","33fdb9e3":"markdown","b5c31786":"markdown","d33cb06e":"markdown","a64229ce":"markdown","94e9a9e3":"markdown","86a5409c":"markdown","1f5cdc6e":"markdown","79dcbd36":"markdown","68303366":"markdown"},"source":{"8c7b2565":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d6394447":"#building dataframe from pandas reference\nd = {'Elektrik' : pd.Series([100., 102., 130.], index=['Abone 1', 'Abone 2' , 'Abone 3']),'Su' : pd.Series([150., 70., 63., 94.], index=['Abone 1', 'Abone 2' , 'Abone 3','Abone 4'])}\ndf = pd.DataFrame(d)\ndf","413bbdae":"# buillding dataframes from DATAI's notebook\naboneler = [\"Abone 1\", \"Abone 2\" , \"Abone 3\",\"Abone 4\", \"Abone 5\" , \"Abone 6\"]\nd_elk=[100., 102., 130.,np.nan,104.5,75.8]\nd_su = [150., 70., 94.,45,126,np.nan]\nlist_label = [\"Aboneler\",\"Elektrik\",\"Su\"]\nlist_col = [aboneler,d_elk,d_su]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","e3104004":"# Add new columns\ndf[\"\u0130l\u00e7e\"] = \"\u00c7ankaya\"\ndf","9803ef0f":"data=pd.read_csv('..\/input\/FIFA18 - Ultimate Team players.csv')\ndata.head()","7070d599":"# Plotting all data \ndata1 = data.loc[:,[\"age\",\"height\",\"weight\"]]\ndata1.plot(figsize=[18,8])\nplt.show()\n# it is confusing","c8fc8237":"# subplots\ndata1.plot(subplots = True,figsize=[20,10])\nplt.show()","7d170ad5":"data1 = data.loc[:,[\"age\",\"height\",\"price_pc\"]]\ndata1.plot(kind = \"scatter\",x=\"age\",y = \"price_pc\")\nplt.show()","a29d7183":"data.info()","8482c933":"data1 = data.loc[:,[\"age\",\"height\",\"overall\"]]\ndata1.plot(figsize=[15,5],kind = \"hist\",y = \"age\",bins = 30,range= (0,40),density = True)\nplt.show()","ba605407":"data.describe()","fce550ae":"data.head()","91d7d571":"time_list = [\"2018-03-08\",\"2018-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","1a3e97f7":"df","38f6a5a7":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = df.head()\ndate_list = [\"2017-11-10\",\"2017-12-11\",\"2018-01-09\",\"2018-02-12\",\"2018-05-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"FaturaTar\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"FaturaTar\")\ndata2 ","218970a0":"print(data2.loc[\"2018-01-09\"])\nprint(data2.loc[\"2018-01-09\":\"2018-02-12\"])","c4a15ae9":"data2.resample(\"A\").median()","bbe00cf3":"time_list = \"2018-09-08\"\ndatetime_object = pd.to_datetime(time_list)\ndf1 = pd.DataFrame([[\"Abone 6\",410,256.8,\"\u00c7ankaya\"]],columns=['Aboneler','Elektrik','Su','\u0130l\u00e7e'],index=[datetime_object])\ndf2 = pd.DataFrame({'Aboneler':[\"Abone 7\"],\n                    'Elektrik':[410],\n                    'Su':[256.8],\n                   '\u0130l\u00e7e':[\"\u00c7ankaya\"]},\n                   index = [datetime_object])\n\ndata2=pd.concat([data2,df1,df2])\ndata2","7a1cda71":"data2.resample(\"M\").mean()","0084545c":"data2.resample(\"M\").mean().interpolate(\"linear\")\n","d875e187":"data=pd.read_csv('..\/input\/FIFA18 - Ultimate Team players.csv')\ndata= data.set_index(\"player_ID\")\ndata.head()","6245fea7":"# selecting cell\ndata[\"overall\"][1]\n#or \n#data.overall[1]","0e55cf17":"data.loc[1,[\"player_name\"]]\n#data.iloc[0][\"player_name\"]","ec1c1853":"# Selecting only some columns \n#nationality\tposition\tage\n#data[[\"player_name\",\"nationality\",\"position\",\"age\"]]\ndata.reindex(columns=[\"player_name\",\"nationality\",\"position\",\"age\"]).head(10)","e5c51b7d":"# Slicing and indexing series\ndata.loc[1:10,\"player_name\":\"league\"] ","6aafa612":"# reversed sliced data \ndata.loc[30:10:-1,\"player_name\":\"nationality\"]","f8a31f7c":"# Creating boolean series\nboolean = data.height > 190\ndata[boolean]","5bba6774":"# Combining filters\nfirst_filter = data.overall > 90\nsecond_filter = data.age < 22\ndata[first_filter & second_filter]","605835e2":"data.index.name = \"id\"\ndata","461f415c":"# Overwrite index\ndata3=data.tail(100)\ndata3.index = range(100,200,1)\ndata3.head()","8124a295":"dic = {\"blood\":[\"A\",\"A\",\"B\",\"B\",\"AB\",\"AB\",\"0\",\"0\"],\"gender\":[\"F\",\"M\",\"F\",\"M\",\"F\",\"M\",\"F\",\"M\"],\"rh\":[1,0,0,1,0,1,0,1],\"age\":[15,4,72,65,43,36,18,20]}\ndf = pd.DataFrame(dic)\ndf","0e2cdd3b":"# pivoting\ndf.pivot(index=\"blood\",columns = \"gender\",values=\"rh\")","615afebf":"df1 = df.set_index([\"blood\",\"gender\"])\ndf1","83f8fa11":"df1.unstack(level=0)","7ba9c92c":"df2 = df1.swaplevel(0,1)\ndf2","f2ee8b3e":"pd.melt(df,id_vars=\"age\",value_vars=[\"blood\",\"rh\"])\n","8a6a31f3":"df.groupby(\"gender\").mean()   #that means males have rh(+) more than females (according to our ridiculous dataset) ","03576eb4":"df.groupby(\"rh\").age.max() \n","aec6481f":"df.groupby(\"blood\")[[\"age\",\"rh\"]].min() ","336e9620":"HIERARCHICAL INDEXING\n","a2523c56":"MELTING DATA FRAMES","33fdb9e3":"INDEX OBJECTS AND LABELED DATA","b5c31786":"SLICING DATA FRAME\u00b6","d33cb06e":"FILTERING DATA FRAMES","a64229ce":"# MANIPULATING DATA FRAMES WITH PANDAS\nINDEXING DATA FRAMES","94e9a9e3":"RESAMPLING PANDAS TIME SERIES\nResampling: statistical method over different time intervals\nNeeds string to specify frequency like \"M\" = month or \"A\" = year\nDownsampling: reduce date time rows to slower frequency like from daily to weekly\nUpsampling: increase date time rows to faster frequency like from daily to hourly\nInterpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html","86a5409c":"VISUAL EXPLORATORY DATA ANALYSIS\nPlot\nSubplot\nHistogram:","1f5cdc6e":"###BUILDING DATA FRAMES FROM SCRATCH","79dcbd36":"PIVOTING DATA FRAMES","68303366":"CATEGORICALS AND GROUPBY"}}