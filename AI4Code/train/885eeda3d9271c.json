{"cell_type":{"f6398f8e":"code","bc9209fa":"code","6cb08398":"code","faa1b173":"code","4a706785":"code","9db60aa3":"code","8604bf12":"code","4b616b4d":"code","51041ce7":"code","b399098e":"code","9b9f0a1b":"code","1a037fc2":"code","1a796e6f":"code","73345dfe":"code","aae473db":"code","c5727645":"code","52fd1abc":"code","1f140c5d":"code","c553fece":"code","47c009bf":"code","b3bbea00":"markdown","f0ec374f":"markdown","8560773f":"markdown","e4e4e6f9":"markdown","4f7dc0ff":"markdown","a86d1b7d":"markdown","bd9e445d":"markdown","44d86707":"markdown","686e9a53":"markdown","13a3a903":"markdown","1b5a41c5":"markdown","b55f13c2":"markdown","861e4f10":"markdown","a760fb30":"markdown","d9b1b71f":"markdown","52fb4cb5":"markdown","7c7b5910":"markdown","98af82af":"markdown","4268c936":"markdown"},"source":{"f6398f8e":"# Importing libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Creating data frames\ndf1 = pd.read_csv(\"..\/input\/d\/artyomvp1\/cyclistic-2021\/202101-divvy-tripdata.csv\")\ndf2 = pd.read_csv(\"..\/input\/d\/artyomvp1\/cyclistic-2021\/202102-divvy-tripdata.csv\")\ndf3 = pd.read_csv(\"..\/input\/d\/artyomvp1\/cyclistic-2021\/202103-divvy-tripdata.csv\")\ndf4 = pd.read_csv(\"..\/input\/d\/artyomvp1\/cyclistic-2021\/202104-divvy-tripdata.csv\")\ndf5 = pd.read_csv(\"..\/input\/d\/artyomvp1\/cyclistic-2021\/202105-divvy-tripdata.csv\")\ndf6 = pd.read_csv(\"..\/input\/d\/artyomvp1\/cyclistic-2021\/202106-divvy-tripdata.csv\")\ndf7 = pd.read_csv(\"..\/input\/d\/artyomvp1\/cyclistic-2021\/202107-divvy-tripdata.csv\")\ndf8 = pd.read_csv(\"..\/input\/d\/artyomvp1\/cyclistic-2021\/202108-divvy-tripdata.csv\")\ndf = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8])\n\n# Merging data frames (SQL-like union)\ndf = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8])\ndf.reset_index(drop=True, inplace=True)\ndf.head(2)","bc9209fa":"# Visualization of empty rows\ndf.isna().sum()","6cb08398":" # Filling the empty values\nfor i in df:\n    if i in ['start_station_name', 'end_station_name']:\n        df[i] = df[i].fillna('Unknown')\n    elif i in ['start_station_id', 'end_station_id']:\n        df[i] = df[i].fillna(0)\n    elif i in ['end_lat', 'end_lng']:\n        df.dropna(subset=['end_lat', 'end_lng'], inplace=True)\n\n# Checking empty values after cleaning        \ndf.isna().sum()","faa1b173":"# Existing data types\ndf.dtypes","4a706785":"# Changing the data types\nfor i in df:\n    if i in ['started_at', 'ended_at']:\n        df[i] = pd.to_datetime(df[i])\n\n# Checking data types after cleaning\ndf.dtypes","9db60aa3":"# Total number of rows\ndf.count()[0]","8604bf12":"# Inserting a new column showing duration of a ride in minutes\nduration = df['ended_at'] - df['started_at']\ndf.insert(4, 'duration_minutes', np.round(duration.dt.seconds\/60, 1))","4b616b4d":"# Inserting a new column showing a start date\nstart_date = pd.to_datetime(df['started_at']).dt.date\ndf.insert(2, 'start_date', start_date)\ndf['start_date'] = pd.to_datetime(df['start_date'])","51041ce7":"# Create a function to calculate the distance between two points\ndef haversine_np(lon1, lat1, lon2, lat2):\n    \"\"\"\n    Calculate the great circle distance between two points\n    on the earth (specified in decimal degrees)\n    All args must be of equal length.    \n    \"\"\"\n    lon1, lat1, lon2, lat2 = map(np.radians, [lon1, lat1, lon2, lat2])\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = np.sin(dlat\/2.0)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/2.0)**2\n    c = 2 * np.arcsin(np.sqrt(a))\n    km = 6367 * c\n    \n    return km\n\n# Add new column with the distance between points\ndistance_km = haversine_np(df['start_lng'], df['start_lat'], df['end_lng'], df['end_lat'])\ndf.insert(10, 'distance_km', distance_km)","b399098e":"# Add weekday column\nday_of_week = df['start_date'].dt.day_name()\ndf.insert(3, 'day_of_week', df['start_date'].dt.day_name())","9b9f0a1b":"# Quick check all new columns have been added\ndf.sample(5)","1a037fc2":"# Quick check new columns\ndf.dtypes","1a796e6f":"# Data frame grouped by driver type (count)\nmember = df.groupby('member_casual').count().reset_index(drop=False)[['member_casual', 'ride_id']]\n\n# Parameters\nvalues = [i for i in member['ride_id']]\nlabels = [j for j in member['member_casual']]\ncolors = sns.color_palette('pastel')[0:2]\n\n# Pie chart\nplt.figure(figsize=(8, 8))\nplt.pie(values, labels=labels, colors=colors, autopct = '%.1f %%', explode=[0.01, 0.01], textprops={'fontsize': 15})\n\n# Non-data parameters\nplt.title('Members vs. Casual Drivers', fontdict={'fontweight':'bold', 'fontsize':20})\n\nplt.show()","73345dfe":"# Table with average overall distance\nmember_avg_distance = df[['member_casual', 'distance_km']].groupby('member_casual').mean()\nmember_avg_distance.reset_index(drop=False, inplace=True)\nmember_avg_distance.rename(columns={'member_casual':'Type', 'distance_km':'AVG. Distance'}, inplace=True)\nmember_avg_distance","aae473db":"# Total distance daily\nmember_distance = df[['start_date', 'member_casual', 'distance_km']]\nmember_distance = member_distance.groupby(['start_date', 'member_casual']).sum()\nmember_distance.reset_index(drop=False, inplace=True)\n\n# Line plot\nplt.figure(figsize=(19, 9))\nsns.lineplot(data=member_distance, x='start_date', y='distance_km', hue='member_casual')\n\n# Non-data objects\nplt.title('Daily Usage', fontdict={'fontweight':'bold', 'fontsize':20})\nplt.xlabel('Date', fontdict={'fontsize':18, 'fontweight':'bold'})\nplt.ylabel('Total Distance (Km)', fontdict={'fontsize':18, 'fontweight':'bold'})\nplt.legend(['Casual', 'Member'], fontsize=12)\n\nplt.show()","c5727645":"# Creating a data frame\navg_duration = df[['member_casual', 'rideable_type', 'duration_minutes']].groupby(['member_casual', 'rideable_type']).mean()\navg_duration.reset_index(drop=False, inplace=True)\n\n# Barplot (facegrid)\ng = sns.FacetGrid(avg_duration, col='member_casual')\ng.map(sns.barplot, 'rideable_type', 'duration_minutes', order=['classic_bike', 'docked_bike', 'electric_bike'], palette='magma')\n\n# Non-data parameters\ng.fig.suptitle('Average Duration by a Bike Type')\ng.fig.set_size_inches(10,10)\ng.set_titles(col_template=\"{col_name}\")\ng.set_axis_labels('', 'AVG Duration (minutes)')\ng.set_xticklabels(['Classic', 'Docked', 'Electric'])\n\nplt.show()","52fd1abc":"# Casual\/Member avg DISTANCE and bike type\navg_distance = df[['member_casual', 'rideable_type', 'distance_km']].groupby(['member_casual', 'rideable_type']).mean()\navg_distance.reset_index(drop=False, inplace=True)\n\n# Barplot (facegrid)\ng = sns.FacetGrid(avg_distance, col='member_casual')\ng.map(sns.barplot, 'rideable_type', 'distance_km', order=['classic_bike', 'docked_bike', 'electric_bike'], palette='mako')\n\n# Non-data parameters\ng.fig.suptitle('Average distance by a Bike Type')\ng.fig.set_size_inches(10,10)\ng.set_titles(col_template=\"{col_name}\")\ng.set_axis_labels('', 'AVG Distance (Km)')\ng.set_xticklabels(['Classic', 'Docked', 'Electric'])\n\nplt.show()","1f140c5d":"# Table with average time\nmember_avg_time = df[['member_casual', 'duration_minutes']].groupby('member_casual').mean()\nmember_avg_time.reset_index(drop=False, inplace=True)\nmember_avg_time.rename(columns={'member_casual':'Type', 'duration_minutes':'AVG. Time'}, inplace=True)\nmember_avg_time","c553fece":"test = df[['day_of_week', 'member_casual', 'duration_minutes', 'distance_km']]\ntest = test.groupby(['day_of_week', 'member_casual']).mean()\ntest.reset_index(drop=False, inplace=True)\n\n# Changing order or week days\nweekdays =['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ntest['day_of_week'] = pd.Categorical(test['day_of_week'], categories=weekdays, ordered=True)\n\n# test['day_of_week'] - check type changed\n# test.sort_values('day_of_week')","47c009bf":"# Grouped Barplot\nplt.figure(figsize=(10, 8))\nsns.barplot(data=test, \n            x=\"day_of_week\", \n            y='duration_minutes', \n            hue='member_casual', \n            ci=None, \n            palette='rocket')\n\n# Non-data parameters\nplt.title('Duration by Days', fontdict={'fontweight':'bold', 'fontsize':20})\nplt.xlabel('')\nplt.ylabel('Average Duration (minutes)', fontdict={'fontweight':'bold', 'fontsize':14})\nplt.legend(['Casual', 'Member'], fontsize=12)\n\nplt.show()","b3bbea00":"### 4.2. Members vs. Casual\nIn the previous section, we determined that the number of rides between Jan - Aug 2021 is `3,596,815`. The pie chart below shows that **48.1%** of rides were made by casual riders. ","f0ec374f":"### 4.6 Impacts\n\nBike-share programs generate a number of economic externalities, both positive and negative. The positive externalities include reduction of traffic congestion and pollution, while the negative externalities can include degradation of urban aesthetic environment and reduction of parking.\n\n**Less traffic congestion**  \nA primary goal of bicycle-sharing systems has been to reduce traffic congestion, particularly in large urban areas. Some empirical evidence indicates that this goal has been achieved to varying degrees in different cities\n\n**Less pollution**  \nNot only do bike-share systems intend to reduce traffic congestion, they also aim to reduce air pollution through decreased automobile usage, and indirectly through the reduction of congestion.\n\n**Healthy transport**  \nBicycle-sharing systems have been shown to have a strong net positive health effect. Cycling is a good way for exercise and stress relief. It can increase recreation and improve sociability of a city, which make people live more happy and relaxed.\n\n[Source](https:\/\/en.wikipedia.org\/wiki\/Bicycle-sharing_system)","8560773f":"# Stage 4: Analysis\nNext, I will be performing data transformation and visualization. All the conclusions will be summarized in the Stage 5.\n\n### 4.1 Additional calculations\nI am going to calculate parameters that are not in the data frame, but will be very useful during the analysis process.  \nParameter `duration_minutes` is calculated by subtracting time when a ride was ended and starting time:","e4e4e6f9":"Quick check the updated data frame and its data types:","4f7dc0ff":"### 4.3 Daily distance\nFollowing, the calculation shows that difference between average distance covered daily by members with a subscription and casual members is almost similar (**2.25** km vs. **2.19** km):","a86d1b7d":"Having latitude and longitude parameters allow us to calculate the distance between starting point and destination by creating a custom function.\nThe result of the function will be represented in kilometers and can be checked [here](https:\/\/www.meridianoutpost.com\/resources\/etools\/calculators\/calculator-latitude-longitude-distance.php?).","bd9e445d":"# Stage 5: Share\n\n### 5.1 Recap\nConsidering that the customer base of the company is divided 50\/50, there are some differences in customer behavior:\n* Casual customers spend much more time using the service than the members\n* Casual customers cover more distance\n* Activity in the first quarter of a year is much lower\n* Docked type of a bike is much more popular among casual customers\n* Weekend is the most active period\n\n### 5.2 Recommendations\n* Cyclistic have managed to create a business model that accommodates a variety of customer needs whether it is work or travel. However, aiming the business strategy towards tourism and entertainment aspects could encourage casual members to consider buying membership. \n\n* Cyclistic can use digital media to influence casual riders to become members by telling about positive impacts that bike-sharing program provides. Customers can be attracted by ideas of helping to support a healthy lifestyle, improve air quality, reduce traffic and congestion.","44d86707":"The table below allows us to discover that casual members spent as much as twice more time than customers with the membership. Comparing this information with the table from the section **4.3**, brings me to the conclusion that **casual members use the service mostly for entertainment and recreation**.","686e9a53":"### 3.2 Handling empty values\nThe table below shows that the data frame contains cells in `start_station_name`, `start_station_id`, `end_station_name`, `end_station_id`, `end_lat`, and `end_lng` columns. Since I am not able to find the information about latitude and longitude, the rows will be deleted. The information in the rest of the columns is not crucial, so the empty cells will be replaced with `0` and `Unknown` values.","13a3a903":"Identifying a day of a week according to `start_date` can be useful when visualizing the distribution of the rides between week days:","1b5a41c5":"After visualizing the total distance covered daily, we can see the difference: subscribed members use the service for daily similar purposes (commuting) whereas casual members use it mostly as one time trip, but for a longer distance. Additionally, it is clear that the usage in the first quarter is much lower than in the rest of the year. Most likely this pattern is related to weather conditions:","b55f13c2":"# Stage 2: Prepare\n**Data**: [click here](https:\/\/divvy-tripdata.s3.amazonaws.com\/index.html)  \n**Licence**: [click here](https:\/\/www.divvybikes.com\/data-license-agreement)  \n**Description**: The data contains raw information about the customers using Cyclistic services in 2019.  \n**Problems**:  \n* Some columns contain incorrect format\n* Some columns contain empty cells  \n\nAll the problems will be handled during cleaning and the description will be provided in stage 3.","861e4f10":"# Stage 3: Cleaning\n### 3.1 Uploading and processing the data\nDuring this case study the common libraries will be used, namely `pandas` (working with data frames), `numpy` (data structures and math operations), `matplotlib` and `seaborn` (both for data visualization)","a760fb30":"The new column `start_date` will be useful to represent changing overtime. Basically, I am going to change the format of the `started_at` parameter to a standard year-month-day type:","d9b1b71f":"### 3.3 Incorrect data types\nColumns `started_at` and `ended_at` represent timestamps during which the service was provided, however these columns have data type `string`. I am going to convert them to `datetime64` type.","52fb4cb5":"# Introduction\nIn 2016, Cyclistic launched a successful bike-share offering. Since then, the program has grown to a fleet of 5,824 bicycles that are geotracked and locked into a network of 692 stations across Chicago. The bikes can be unlocked from one station and returned to any other station in the system anytime.\n\nUntil now, Cyclistic\u2019s marketing strategy relied on building general awareness and appealing to broad consumer segments. One approach that helped make these things possible was the flexibility of its pricing plans: single-ride passes, full-day passes, and annual memberships. Customers who purchase single-ride or full-day passes are referred to as casual riders. Customers who purchase annual memberships are Cyclistic members.","7c7b5910":"### 4.4 Average duration and distance\nIn this section I will break down how member groups use the service.  \nThe next plot shows that unlike subscribers, casual members prefer using a docked type of bikes rather than classic or electric: ","98af82af":"# Stage 1: Questions and Goals\n#### Stakeholders:  \n **Lily Moreno** : The director of marketing and your manager. Moreno is responsible for the development of campaigns and initiatives to promote the bike-share program. These may include email, social media, and other channels.  \n **Cyclistic marketing analytics team** : A team of data analysts who are responsible for collecting, analyzing, and reporting data that helps guide Cyclistic marketing strategy. You joined this team six months ago and have been busy learning about Cyclistic\u2019s mission and business goals \u2014 as well as how you, as a junior data analyst, can help Cyclistic achieve them.  \n **Cyclistic executive team** : The notoriously detail-oriented executive team will decide whether to approve the recommended marketing program.  \n#### Questions:\n1. How do annual members and casual riders use Cyclistic bikes differently?\n2. Why would casual riders buy Cyclistic annual membership?\n3. How can Cyclistic use digital media to influence casual riders to become members?","4268c936":"### 4.5 Usage by days\nFrom dividing the data on days of a week, we can see that there is a pattern showing that the casual members are active on weekends and this activity is slightly going down by the middle of a week. This pattern is not so explicit when it comes to subscribed members:"}}