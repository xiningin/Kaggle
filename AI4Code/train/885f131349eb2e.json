{"cell_type":{"b9277c52":"code","3087b375":"code","c0736899":"code","3bbc57d6":"code","c9eba4ce":"code","f75777e9":"code","7a3e2bd9":"code","5eddd798":"code","bec159e7":"code","fd76cdbf":"code","add7f8da":"code","df5868f8":"code","c7763ebc":"code","c12854b5":"code","6a661687":"code","fedb031a":"code","480c59bd":"code","2189a3e5":"code","5d0f15b2":"markdown","adc6bb35":"markdown","7b0fd6f8":"markdown","be3ae8b8":"markdown","ec80cfff":"markdown","f372a242":"markdown","894338e1":"markdown","191a3cf4":"markdown","c7248609":"markdown"},"source":{"b9277c52":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, train_test_split\nfrom sklearn.metrics import classification_report, roc_curve, precision_recall_curve, plot_precision_recall_curve\n\nfrom scipy.stats import chi2_contingency, shapiro, probplot, mannwhitneyu\n\nimport warnings\nwarnings.simplefilter('ignore')\n\n%matplotlib inline","3087b375":"DATASET_PATH = '..\/input\/credit-default\/train.csv'\nVALID_DATASET_PATH = '..\/input\/credit-default\/test.csv'","c0736899":"df_train_base = pd.read_csv(DATASET_PATH)\ndf_valid_base = pd.read_csv(VALID_DATASET_PATH)","3bbc57d6":"target_name = 'Credit Default'\nfeature_names = df_train_base.columns.drop(target_name).tolist()\nfeature_names_cat = ['Home Ownership', 'Years in current job', 'Tax Liens', 'Term',  \n                     'Purpose', 'Bankruptcies', 'Number of Credit Problems']","c9eba4ce":"df_train_base.isna().sum()","f75777e9":"Current_Loan_Amount_max = 800000\nMaximum_Open_Credit_max = df_train_base['Maximum Open Credit'].quantile(.95)\nmedians = df_train_base[['Annual Income', 'Credit Score']].median()\ndf_train_base['Years in current job'].fillna('nan', inplace=True)\ndf_train_base['Months since last delinquent'].fillna(0, inplace=True)\ndf_train_base['Bankruptcies'].fillna(0, inplace=True)\ndf_train_base['Annual Income'].fillna(medians['Annual Income'], inplace=True)\ndf_train_base['Credit Score'].fillna(medians['Credit Score'], inplace=True)","7a3e2bd9":"df_train_base[feature_names].hist(figsize=(16,16), bins=20, grid=False);","5eddd798":"df_train_base.loc[df_train_base['Current Loan Amount'] > Current_Loan_Amount_max, 'Current Loan Amount'] = Current_Loan_Amount_max\ndf_train_base.loc[df_train_base['Maximum Open Credit'] > Maximum_Open_Credit_max, 'Maximum Open Credit'] = Maximum_Open_Credit_max\n        \ndf_train_base[['Tax Liens', 'Bankruptcies', 'Number of Credit Problems']] = df_train_base[['Tax Liens', 'Bankruptcies', 'Number of Credit Problems']].astype(int)","bec159e7":"df_train_base.loc[df_train_base['Number of Credit Problems'] == 4,'Number of Credit Problems'] = 1\ndf_train_base.loc[df_train_base['Tax Liens'] == 2,'Tax Liens'] = 1","fd76cdbf":"X = df_train_base[feature_names]\ny = df_train_base[target_name]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X,\n    y,\n    shuffle=True,\n    test_size=0.1,\n    random_state=42,\n    stratify=y\n)","add7f8da":"params = {\n    'eval_metric': 'F1',\n    'auto_class_weights': 'Balanced',\n    'silent': True,\n    'cat_features': feature_names_cat,\n    'one_hot_max_size': 20,\n    'early_stopping_rounds': 50,\n    'boosting_type': 'Ordered',\n    'allow_writing_files': False\n}","df5868f8":"%%time\n\ncbr_final_model = CatBoostClassifier(\n    **params,\n    depth=8,\n    iterations=100,\n    learning_rate=0.5\n)\n\ncbr_final_model.fit(X_train, y_train, eval_set=(X_test, y_test))","c7763ebc":"def evaluate_preds(model, X_train, X_test, y_train, y_test):\n    \n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n    \n    cv_score = cross_val_score(\n        model,\n        X_train,\n        y_train,\n        scoring='f1',\n        cv=StratifiedKFold(\n            n_splits=5,\n            random_state=42,\n            shuffle=True\n        )\n    )\n    get_classification_report(y_train, y_train_pred, y_test, y_test_pred, cv_score)\n    \n    fpr, tpr, thresholds = roc_curve(y_test, y_test_pred, pos_label=1)\n    plt.rcParams['figure.figsize'] = 5, 5\n    plt.plot(fpr, tpr)\n    plt.plot([0, 1], [0, 1], color='grey', linestyle='dashed')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC curve')\n    \n    disp = plot_precision_recall_curve(model, X_test, y_test)\n    disp.ax_.set_title('Precision-Recall curve')","c12854b5":"def get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred, cv_score):\n    \n    print('Train\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('Test\\n\\n' + classification_report(y_test_true, y_test_pred))\n    print('Confusion Matrix\\n')\n    print(pd.crosstab(y_test_true, y_test_pred))\n    print('\\nCross Validation Score: ' + str(round(cv_score.mean(),3)))","6a661687":"evaluate_preds(cbr_final_model, X_train, X_test, y_train, y_test)","fedb031a":"feature_importances = pd.DataFrame(\n    zip(X.columns, cbr_final_model.get_feature_importance()),\n    columns=['feature_name', 'importance']\n)\n\nfeature_importances.sort_values(by='importance', ascending=False, inplace=True)\nfeature_importances","480c59bd":"Current_Loan_Amount_max = 800000\nMaximum_Open_Credit_max = df_valid_base['Maximum Open Credit'].quantile(.95)\nmedians = df_valid_base[['Annual Income', 'Credit Score']].median()\ndf_valid_base['Years in current job'].fillna('nan', inplace=True)\ndf_valid_base['Months since last delinquent'].fillna(0, inplace=True)\ndf_valid_base['Bankruptcies'].fillna(0, inplace=True)\ndf_valid_base['Annual Income'].fillna(medians['Annual Income'], inplace=True)\ndf_valid_base['Credit Score'].fillna(medians['Credit Score'], inplace=True)\ndf_valid_base.loc[df_valid_base['Current Loan Amount'] > Current_Loan_Amount_max, 'Current Loan Amount'] = Current_Loan_Amount_max\ndf_valid_base.loc[df_valid_base['Maximum Open Credit'] > Maximum_Open_Credit_max, 'Maximum Open Credit'] = Maximum_Open_Credit_max\n        \ndf_valid_base[['Tax Liens', 'Bankruptcies', 'Number of Credit Problems']] = df_valid_base[['Tax Liens', 'Bankruptcies', 'Number of Credit Problems']].astype(int)\ndf_valid_base.loc[df_valid_base['Number of Credit Problems'] == 4,'Number of Credit Problems'] = 1\ndf_valid_base.loc[df_valid_base['Tax Liens'] == 2,'Tax Liens'] = 1","2189a3e5":"y_test_pred = cbr_final_model.predict(df_valid_base)\n\npreds_final = pd.DataFrame()\npreds_final = pd.DataFrame({'Id': np.arange(0,y_test_pred.shape[0]), 'Credit Default': y_test_pred})\npreds_final.to_csv('.\/predictions.csv', index=False, encoding='utf-8', sep=',')\npreds_final.head(10)","5d0f15b2":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","adc6bb35":"# \u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c","7b0fd6f8":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b","be3ae8b8":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b","ec80cfff":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","f372a242":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0444\u0430\u0439\u043b\u044b","894338e1":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","191a3cf4":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0444\u0438\u0447","c7248609":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443"}}