{"cell_type":{"59210aa0":"code","71f86144":"code","f1fdb7a7":"code","f70e3050":"code","0f76813b":"code","c3670a05":"code","5e89ffa5":"code","03cee9ec":"code","1a593d5f":"code","d563efee":"code","085fbc9e":"code","a66336f0":"code","eb76dfe9":"code","f58d1880":"code","37688a11":"code","6557ae61":"code","a508dbd9":"code","6dd3b328":"code","2d78c9d8":"code","65404ed7":"code","74b38729":"code","19265527":"code","3b34f7b8":"code","1efcdf1d":"code","27f4415e":"code","225367fa":"code","e52dcf07":"code","486b99fc":"code","09c2ab82":"code","ad393621":"code","0e8ed02b":"code","116a443e":"code","a46c48e9":"markdown","2ecacfcb":"markdown","62e8532a":"markdown","1d29238e":"markdown"},"source":{"59210aa0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","71f86144":"train = pd.read_csv(\"\/kaggle\/input\/train_Wc8LBpr.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/test_VsU9xXK.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/sample_submission_NoPBkjr.csv\")","f1fdb7a7":"train = train.set_index('Trip_ID')","f70e3050":"train.head()","0f76813b":"# Target\/label analysis\ntrain.Surge_Pricing_Type.value_counts()","c3670a05":"train.shape","5e89ffa5":"# Set Trip_ID as index because we are not using it as feature.\ntest = test.set_index('Trip_ID')","03cee9ec":"test.head()","1a593d5f":"test.shape","d563efee":"sub.head()","085fbc9e":"sub.shape","a66336f0":"train.info()","eb76dfe9":"train['Surge_Pricing_Type'].value_counts()","f58d1880":"test.info()","37688a11":"# List of columns that contains null values\ncols_with_missing = [col for col in train.columns \n                                 if train[col].isnull().any()]\ncols_with_missing","6557ae61":"# for imputation of missing values\nfrom sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer(strategy='mean')","a508dbd9":"#List of columns that contains category values\ncat_column  = [col for col in train.columns if train[col].dtypes == 'object']\ncat_column","6dd3b328":"# for imputation of category values\nfrom category_encoders.one_hot import OneHotEncoder\ntarget_enc = OneHotEncoder(cols=cat_column)","2d78c9d8":"# Classification Model\nfrom catboost import CatBoostClassifier\ncatb = CatBoostClassifier()","65404ed7":"# Pileline where all things like imputation, category encoding and modeling is done\nfrom sklearn.pipeline import Pipeline\nfrom catboost import CatBoostClassifier\nmy_pipeline = Pipeline([('enc',target_enc),('imputer',my_imputer),('clf',catb)])","74b38729":"# Features\nX = train.drop('Surge_Pricing_Type', axis=1).copy()\nX.head()","19265527":"# Labels\ny = train['Surge_Pricing_Type'].copy()\ny.head()","3b34f7b8":"# Split the data into train, test sets\nfrom sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,train_size=0.80, test_size=0.20,random_state = 0)","1efcdf1d":"# Fit the Pipeline and predcit the validation set with checking accuracy score\nfrom sklearn.metrics import accuracy_score\nmy_pipeline.fit(train_X, train_y)\npredictions = my_pipeline.predict(val_X)\nprint(f'Accuracy score is {accuracy_score(val_y, predictions)}')","27f4415e":"# prediction of test data\npredict = my_pipeline.predict(test)\npredict","225367fa":"# convert the predictions to dataframe\nd = pd.DataFrame(predict)\nd.shape","e52dcf07":"# covert the train id to dataframe\nd1 = pd.DataFrame(test.index)\nd1.shape","486b99fc":"# concatinate the prediction corresponding to train_id\ndf1 = pd.concat([d,d1],axis=1)","09c2ab82":"# Give the names to columns\ndf1.columns = ['Surge_Pricing_Type', 'Trip_ID']","ad393621":"# Set index as Trip_id\ndf1 = df1.set_index('Trip_ID')","0e8ed02b":"df1.head()","116a443e":"# Save the final submission file\ndf1.to_csv('submission.csv')","a46c48e9":"Set Trip_ID as index because we are not using it as feature.","2ecacfcb":"Check the information about dataset like data type, null values,etc.","62e8532a":"# Mobility Analytics\n\nWith the upcoming cab aggregators and demand for mobility solutions, the past decade has seen immense growth in data collected from commercial vehicles with major contributors such as Uber, Lyft and Ola to name a few. \n\nThere are loads of innovative data science and machine learning solutions being implemented using such data and that has led to tremendous business value for such organizations. \n\n**So Let's Hack the crises....**","1d29238e":"# DATA"}}