{"cell_type":{"6d87aac6":"code","fe7cb584":"code","a1c66837":"code","29dd6c40":"code","8ad955fb":"code","327d0c77":"code","66b8a612":"code","066335d0":"code","bf0ac466":"code","369f6331":"code","cdab80f6":"code","2eed1e75":"code","ffacf5c9":"code","d2637fb0":"code","6404851b":"code","36a52e03":"code","9f56ffa9":"code","641149c3":"code","d1e4c75d":"code","9be31b4c":"code","29a16118":"code","f346d448":"code","62e8cf19":"markdown","c9846da2":"markdown","df4d74af":"markdown","5f5e442c":"markdown","393462ad":"markdown","83493984":"markdown","37e6f21a":"markdown","dac59112":"markdown","3088de19":"markdown","6857a49a":"markdown","2f168e5d":"markdown"},"source":{"6d87aac6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe7cb584":"from sklearn.model_selection import train_test_split\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport string\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n%matplotlib inline","a1c66837":"df = pd.read_csv('..\/input\/sms-spam-collection-dataset\/spam.csv', encoding = 'latin-1')\ndf.head()","29dd6c40":"df.head()","8ad955fb":"df.describe()","327d0c77":"(df.isna().sum() * 100) \/ df.shape[0]","66b8a612":"df = df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis = 1)\ndf = df.rename(columns = {'v1':'label', 'v2':'message'})","066335d0":"df.describe()","bf0ac466":"df['length'] = df['message'].apply(len)\ndf.head()","369f6331":"text_feat = df['message'].copy()","cdab80f6":"def text_process(text):\n    text = text.translate(str.maketrans('','', string.punctuation))\n    text = [word for word in text.split() if word.lower() not in stopwords.words('english')]\n    \n    return \" \".join(text)","2eed1e75":"text_feat = text_feat.apply(text_process)","ffacf5c9":"vectorizer = TfidfVectorizer(\"english\")","d2637fb0":"features = vectorizer.fit_transform(text_feat)","6404851b":"X_train, X_test, y_train, y_test = train_test_split(features, df['label'], test_size = 0.2, random_state = 16)","36a52e03":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.metrics import accuracy_score","9f56ffa9":"svc = SVC(kernel='sigmoid', gamma=1.0)\nknc = KNeighborsClassifier(n_neighbors=49)\nmnb = MultinomialNB(alpha=0.2)\ndtc = DecisionTreeClassifier(min_samples_split=7, random_state=111)\nlrc = LogisticRegression(solver='liblinear', penalty='l1')\nrfc = RandomForestClassifier(n_estimators=31, random_state=111)\nabc = AdaBoostClassifier(n_estimators=62, random_state=111)\nbc = BaggingClassifier(n_estimators=9, random_state=111)\netc = ExtraTreesClassifier(n_estimators=9, random_state=111)","641149c3":"clfs = {'SVC' : svc,'KN' : knc, 'NB': mnb, 'DT': dtc, 'LR': lrc, 'RF': rfc, 'AdaBoost': abc, 'BgC': bc, 'ETC': etc}","d1e4c75d":"def train_classifier(clf, X_train, y_train):    \n    clf.fit(X_train, y_train)","9be31b4c":"def predict_labels(clf, features):\n    return (clf.predict(features))","29a16118":"pred_scores = []\nfor k,v in clfs.items():\n    train_classifier(v, X_train, y_train)\n    pred = predict_labels(v,X_test)\n    pred_scores.append((k, [accuracy_score(y_test,pred)]))","f346d448":"pred_scores","62e8cf19":"Remove punctuations","c9846da2":"Best accuracy achieves by Naive Bayes with 0.9847%","df4d74af":"Additional feature that can be extracted from the message is the length of the text, which can be added to the data:","5f5e442c":"Now the remaining data looks as below:","393462ad":"Text processing and vectorizing into tokens:","83493984":"**Model classifiers and predictions**","37e6f21a":"Perform data exploratory to get to know the data:","dac59112":"Import all neccesary imports:","3088de19":"Check the percentage of missing values in the dataset:","6857a49a":"Read the data into pandas:","2f168e5d":"It can be seen for v1 and v2 data have no missing values while the rest of the columns have less than 1% of data existed. For the sake of simplicity and ease of understanding for the project, only the v1 (label) and v2 (message) will be used."}}