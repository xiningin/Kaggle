{"cell_type":{"87bbb1bf":"code","53ee46fd":"code","953b37ef":"code","9c51082e":"code","739dc69a":"code","12ce3723":"code","e649a33a":"code","fa73df86":"code","773aa123":"code","a0116199":"code","c408d8e9":"code","138936e2":"code","f213a0d0":"code","510929bf":"code","41283fc4":"code","bbd141a3":"code","f54507ec":"code","5d21812e":"code","624367c7":"code","a000a9f9":"code","ad06316f":"code","aafe536a":"code","ac235bea":"code","8b36f50f":"code","09fb2697":"code","c858e325":"code","320d5abf":"code","2cd46777":"code","713c4cb3":"code","52cd2a50":"code","0dee224f":"code","0f24c49c":"code","ccc17d71":"code","05261223":"code","1508cbc5":"code","bd53e927":"code","3ee3b59b":"code","1e3f1ffc":"code","e89d4e53":"code","6d78ecc8":"code","97073ae4":"code","6e64e0e3":"code","5f784bfb":"code","11fafffa":"code","ca5a45bd":"code","864df788":"code","ce03052c":"code","4fd952f8":"code","8829c219":"code","71335f50":"code","90f8ff4c":"code","2ee2932e":"code","480324d8":"code","2b086802":"code","f81f5c9d":"code","78318c99":"code","a1ca2e7c":"code","24ad18da":"code","1652e6c0":"code","146dff6b":"code","59021525":"code","fe8073b4":"code","61627097":"code","36c4fe8c":"code","addb85f3":"code","adb5d669":"code","9413c945":"code","17fae6d0":"code","62d18c0e":"code","81106dd6":"code","5453a13f":"code","fe6f2f1a":"code","f709fa21":"code","0f505eef":"code","514a38c6":"code","2e82a27a":"code","69fefaa5":"code","a227ed39":"code","0f7ddd69":"code","8bf2dd74":"code","0a53978a":"code","7920be03":"code","401aeab1":"code","e19cad31":"code","49bc3a4d":"code","dbd1d64e":"code","4208008b":"code","8f21e1ee":"code","4b358aac":"code","f864a952":"code","b0cb76d6":"code","f9980b0d":"code","b00741b4":"code","fc80df02":"code","56bf9d6f":"code","27c3f549":"code","72c9d7a3":"code","f6158ce2":"code","096072a8":"code","4d17811d":"code","f740f7d8":"code","6da5abd9":"code","d822ac3f":"code","f7cfa9c0":"code","474edb7e":"code","9dab86d6":"code","cb85525f":"code","53bdf359":"code","5b4a955e":"code","b538ce6e":"code","d4e43a51":"code","151df470":"code","9bd6665d":"code","5509ffd5":"code","4008012a":"code","e79472d9":"code","e518b97c":"code","a1dc486a":"code","da4fbc7b":"code","6be2bacf":"code","ae205520":"code","4ab94bd9":"code","2d4689d0":"code","dab066eb":"code","0775182f":"code","a7840de7":"code","a3167b83":"code","655e8c2b":"code","d0a6049e":"code","3beb7c31":"code","e46459f2":"code","bfa88d19":"code","4afad104":"code","986985d5":"code","73eb274d":"code","71f5d45a":"code","c42ecad7":"code","e910aa34":"code","39deec57":"code","e7197efb":"code","c7b2a6e0":"code","330e7f06":"markdown","abd9877e":"markdown","f069408c":"markdown","663a6b77":"markdown","a35f7212":"markdown","4ecb2099":"markdown","40e4e295":"markdown","58f07c10":"markdown","094bf515":"markdown","28236352":"markdown","e034edfb":"markdown","34d49af3":"markdown","850c9c77":"markdown","3c834575":"markdown","ee4020ce":"markdown","85d2808f":"markdown","0c2afc41":"markdown","6d93581b":"markdown","ff3e93b0":"markdown","50123230":"markdown","78ee3dfa":"markdown","b741a687":"markdown","3fa8a358":"markdown","13f157a6":"markdown","0bf9f9ed":"markdown","87aecc8c":"markdown","efd4a2d1":"markdown","58a090b6":"markdown","1cd091bd":"markdown","2e422b81":"markdown","be3c1133":"markdown","3f7b25c3":"markdown","980bb4b2":"markdown","c769641b":"markdown","499b6770":"markdown","50dd142d":"markdown"},"source":{"87bbb1bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","53ee46fd":"%ls -lrth ..\/input\/m5-forecasting-accuracy\/","953b37ef":"INPUT_PATH='\/kaggle\/input\/m5-forecasting-accuracy'","9c51082e":"df_calendar = pd.read_csv(f'{INPUT_PATH}\/calendar.csv')","739dc69a":"df_sales_train = pd.read_csv(f'{INPUT_PATH}\/sales_train_validation.csv')","12ce3723":"df_sell_prices = pd.read_csv(f'{INPUT_PATH}\/sell_prices.csv')","e649a33a":"df_sample_sub = pd.read_csv(f'{INPUT_PATH}\/sample_submission.csv')","fa73df86":"for day in range(1914, 1914+28):\n    df_sales_train[f\"d_{day}\"] = df_sales_train[df_sales_train.columns[-5:]].mean(axis=1)\n\n#df[df.columns[-33:]]","773aa123":"date_cols = [col for col in df_sales_train.columns if 'd_' in col]\ntemp_sample = df_sales_train.set_index('id')[date_cols[-28:]].reset_index()","a0116199":"temp_sample.columns = df_sample_sub.columns\ntemp_sample = temp_sample + df_sample_sub\ntemp_sample.id = df_sample_sub.id\ntemp_sample.fillna(0, inplace=True)\nprint(temp_sample)\ntemp_sample.to_csv('submission.csv', index=False)","c408d8e9":"df_sales_train.head()","138936e2":"#np.r_[0,-28:0]","f213a0d0":"df_calendar.head()","510929bf":"df_sell_prices.head()","41283fc4":"#df_sell_prices[(df_sell_prices.store_id == 'CA_1') & (df_sell_prices.item_id == 'HOBBIES_1_001')].sort_values(by='wm_yr_wk').plot(kind='scatter', x='wm_yr_wk', y='sell_price')","bbd141a3":"#np.finfo(np.float16)","f54507ec":"#np.iinfo(np.int16)","5d21812e":"df_sell_prices.describe()","624367c7":"df_sell_prices.info()","a000a9f9":"df_calendar.info()","ad06316f":"df_calendar.describe()","aafe536a":"df_sales_train.info()","ac235bea":"df_sales_train.describe()#.apply(lambda x: format(x, 'f'))","8b36f50f":"# df_sales_train.drop(columns='id', inplace=True, axis=1)","09fb2697":"def updateDataType(df):\n    datatypes = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    columns = df.columns\n    for column in columns:\n        column_type = df[column].dtype\n        if column_type in datatypes:\n            minVal, maxVal = df[column].min(), df[column].max()\n            if str(column_type).startswith('int'):\n                if minVal > np.iinfo(np.int8).min and maxVal < np.iinfo(np.int8).max:\n                    df[column] = df[column].astype('int8')\n                elif minVal > np.iinfo(np.int16).min and maxVal < np.iinfo(np.int16).max:\n                    df[column] = df[column].astype('int16')\n                elif minVal > np.iinfo(np.int32).min and maxVal < np.iinfo(np.int32).max:\n                    df[column] = df[column].astype('int32')\n                else: pass\n            else:\n                if minVal > np.finfo(np.float16).min and maxVal < np.finfo(np.float16).max:\n                    df[column] = df[column].astype('float16')\n                elif minVal > np.finfo(np.float32).min and maxVal < np.finfo(np.float32).max:\n                    df[column] = df[column].astype('float32')\n                else: pass\n    return df        ","c858e325":"df_sales_train_l = df_sales_train.select_dtypes(exclude='int64')","320d5abf":"df_sales_train_r = df_sales_train.select_dtypes(include='int64').astype('int8')","2cd46777":"df_sales_train = df_sales_train_l.join(df_sales_train_r)","713c4cb3":"df_sales_train.info()","52cd2a50":"df_calendar = updateDataType(df_calendar)\n# df_sales_train = updateDataType(df_sales_train) # As we already converted the dtypes\ndf_sell_prices = updateDataType(df_sell_prices)","0dee224f":"df_calendar.info()","0f24c49c":"df_sales_train.info()","ccc17d71":"df_sell_prices.info()","05261223":"import plotly.express as px","1508cbc5":"df_calendar.shape","bd53e927":"df_sales_train.shape","3ee3b59b":"df_sell_prices.shape","1e3f1ffc":"print(df_sales_train.item_id.nunique())\nprint(df_sales_train.item_id.unique())","e89d4e53":"print(df_sales_train.dept_id.nunique())\nprint(df_sales_train.dept_id.unique())","6d78ecc8":"print(df_sales_train.cat_id.nunique())\nprint(df_sales_train.cat_id.unique())","97073ae4":"print(df_sales_train.store_id.nunique())\nprint(df_sales_train.store_id.unique())","6e64e0e3":"print(df_sales_train.state_id.nunique())\nprint(df_sales_train.state_id.unique())","5f784bfb":"print(df_calendar.event_name_1.nunique())\nprint(df_calendar.event_name_1.unique())\n\nprint(df_calendar.event_name_2.nunique())\nprint(df_calendar.event_name_2.unique())","11fafffa":"print(df_calendar.event_type_1.nunique())\nprint(df_calendar.event_type_1.unique())\n\nprint(df_calendar.event_type_2.nunique())\nprint(df_calendar.event_type_2.unique())","ca5a45bd":"values = {'event_name_1': 'No_Event', 'event_name_2': 'No_Event', 'event_type_1': 'Regular', 'event_type_2': 'Regular'}\ndf_calendar.fillna(value=values, inplace=True)","864df788":"df_calendar.head()","ce03052c":"df_sales_train.head()","4fd952f8":"# fig = px.bar(df_calendar, x=\"event_type_1\", y=\"sales\", barmode=\"group\", facet_row=\"year\", facet_col=\"weekday\",\n#             category_orders={\"weekday\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thrusday\", \"Friday\", \"Saturday\", \"Sunday\"]})\n# fig.show()","8829c219":"print(df_sell_prices.item_id.nunique())\nprint(df_sell_prices.item_id.unique())","71335f50":"df_sell_prices.head()","90f8ff4c":"# %%time\n# df_sell_prices.item_id.str.split(\"_\").str[0]\n\n# This takes 14sec to fetch result","2ee2932e":"%%time\npd.Series(df_sell_prices.item_id.unique().tolist()).str.split(\"_\").str[0].unique()","480324d8":"# hobbiesCount = df_sell_prices.item_id.str.match('HOBBIES').sum()\n# householdCount = df_sell_prices.item_id.str.match('HOUSEHOLD').sum()\n# fooddCount = df_sell_prices.item_id.str.match('FOODS').sum()\n","2b086802":"pd.Series(df_sell_prices.item_id.unique().tolist()).str.split(\"_\").str[0].value_counts()","f81f5c9d":"#import matplotlib.pyplot as plt\n#import seaborn as sb","78318c99":"#sb.countplot(df_sell_prices.item_id.str.split(\"_\").str[0])","a1ca2e7c":"#df_sell_prices.sell_price.describe().apply(lambda x: format(x, 'f'))","24ad18da":"#df_sales_train.id.str.split(\"_\")","1652e6c0":"#df_sales_train_ca = df_sales_train[df_sales_train.state_id.str.startswith('CA')]\n#df_sales_train_ca.shape","146dff6b":"#df_sales_train_tx = df_sales_train[df_sales_train.state_id.str.startswith('TX')]\n#df_sales_train_tx.shape","59021525":"#df_sales_train_wi = df_sales_train[df_sales_train.state_id.str.startswith('WI')]\n#df_sales_train_wi.shape","fe8073b4":"#df_sample_sub.head()","61627097":"#df_sample_sub.id.str.split(\"_\").str[3].unique()","36c4fe8c":"#id_vars=['A'], value_vars=['B'], var_name='myVarname', value_name='myValname'","addb85f3":"import gc","adb5d669":"df_sales_train_tx_melt.info()","9413c945":"df_sales_train_tx_melt.head()","17fae6d0":"df_calendar.head()","62d18c0e":"df_sales_train_last28 = df_sales_train.iloc[:, np.r_[0,-28:0]]\ndf_sales_train_last28.tail()","81106dd6":"df_sales_train_last28_melt = df_sales_train_last28.melt('id', var_name='d', value_name='demand')\ndf_sales_train_last28_melt.head()","5453a13f":"df_sales_train_byweek = df_sales_train_last28_melt.merge(df_calendar).groupby(['id', 'wday'])['demand'].mean()","fe6f2f1a":"sub = df_sample_sub.copy()\n# change the column names to match the last 28 days\nsub.columns = ['id'] + ['d_' + str(1914+x) for x in range(28)]\n# select only the rows with an id with the validation tag\nsub = sub.loc[sub.id.str.contains('validation')]","f709fa21":"# melt this dataframe and merge it with the calendar so we can join it with by_weekday dataframe\nsub = sub.melt('id', var_name='d', value_name='demand')\nsub = sub.merge(df_calendar)[['id', 'd', 'wday']]\ndf = sub.join(df_sales_train_byweek, on=['id', 'wday'])\ndf.head()","0f505eef":"df = df.pivot(index='id', columns='d', values='demand')\ndf.reset_index(inplace=True)\ndf.head()","514a38c6":"submission = df_sample_sub[['id']].copy()\nsubmission = submission.merge(df)\nsubmission = pd.concat([submission, submission], axis=0)\nsubmission['id'] = df_sample_sub.id.values\nsubmission.columns = columns = ['id'] + ['F' + str(i) for i in range(1,29)]","2e82a27a":"submission.to_csv('submission.csv', index=False)","69fefaa5":"submission.shape","a227ed39":"del df_sales_train, df_sales_train_tx, df_sales_train_tx_melt, df_calendar\ngc.collect()","0f7ddd69":"df_sales_train_tx_melt_merge.head()","8bf2dd74":"df_sell_prices.head()","0a53978a":"del df_sales_train_tx_melt_merge, df_sell_prices\ngc.collect()","7920be03":"df_merge1.head()","401aeab1":"from sklearn import preprocessing\ndef transform(data):\n    \n    nan_features = ['event_name_1', 'event_type_1', 'event_name_2', 'event_type_2']\n    for feature in nan_features:\n        data[feature].fillna('unknown', inplace = True)\n    \n    encoder = preprocessing.LabelEncoder()\n    data['id_encode'] = encoder.fit_transform(data['id'])\n    \n    cat = ['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id', 'd', 'event_name_1', 'event_type_1', 'event_name_2', 'event_type_2', 'weekday']\n    for feature in cat:\n        encoder = preprocessing.LabelEncoder()\n        data[feature] = encoder.fit_transform(data[feature])\n    \n    return data","e19cad31":"df_merge1.info()","49bc3a4d":"df_merge1.info()","dbd1d64e":"df_merge1.head()","4208008b":"#df_merge1[df_merge1.id == 'HOBBIES_1_004_TX_1_validation']","8f21e1ee":"df_merge1.info()","4b358aac":"#df_merge1.date.max()","f864a952":"#df_merge1.drop(columns='id', axis=1, inplace=True)","b0cb76d6":"features = df_merge1.select_dtypes(exclude=['object', 'datetime64[ns]']).columns.tolist()\nfeatures","f9980b0d":"X_train = df_merge1[df_merge1.date <= '2016-01-29'][features]\ny_train = X_train['demand']\n\nX_test = df_merge1[(df_merge1['date'] > '2016-03-27') & (df_merge1['date'] <= '2016-04-24')][features]\ny_test = X_test.demand","b00741b4":"del df_merge1\ngc.collect()","fc80df02":"X_train.head()","56bf9d6f":"X_test.head()","27c3f549":"ad","72c9d7a3":"from sklearn import linear_model, metrics","f6158ce2":"X_train.drop(columns = 'demand', axis=1, inplace=True)\nX_test.drop(columns = 'demand', inplace=True)","096072a8":"import lightgbm as lgb","4d17811d":"best_params = {\n    \"boosting_type\": \"gbdt\",\n    \"metric\": \"rmse\",\n    \"objective\": \"regression\",\n    \"n_jobs\": -1,\n    \"seed\": 42,\n    \"learning_rate\": 0.1,\n    \"bagging_fraction\": 0.75,\n    \"bagging_freq\": 10,\n    \"colsample_bytree\": 0.75,\n}\nfit_params = {\n    \"num_boost_round\": 100_000,\n    \"early_stopping_rounds\": 50,\n    \"verbose_eval\": 100,\n}","f740f7d8":"print(type(lgb_train))","6da5abd9":"from datetime import datetime","d822ac3f":"execution_time_lgbm = stop-start\nexecution_time_lgbm","f7cfa9c0":"z","474edb7e":"y_pred = model.predict(X_test)","9dab86d6":"y_pred","cb85525f":"y_test = y_test.astype('float16')","53bdf359":"sfdsefs","5b4a955e":"y_pred = model.predict(X_test)","b538ce6e":"fsjaslk;f","d4e43a51":"df_sales_train_melt = pd.melt(df_sales_train, id_vars = ['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], var_name = 'day', value_name = 'demand')","151df470":"df_sales_train_melt.head()","9bd6665d":"df_sales_train_melt.id.nunique()","5509ffd5":"df_sales_train.head()","4008012a":"df_sell_prices.head()","e79472d9":"df_calendar.head()","e518b97c":"df_sales_train.columns","a1dc486a":"    df_sell_prices.columns","da4fbc7b":"df_calendar.columns","6be2bacf":"import gc","ae205520":"del df_calendar_t\ndel df_sales_train\ngc.collect()","4ab94bd9":"df_sales_train_melt.head()","2d4689d0":"df_sales_train_melt.tail()","dab066eb":"# merged_data = pd.merge(df_sales_train_melt, df_sell_prices, on=['store_id', 'item_id'])","0775182f":"#df_merge1 = df_sell_prices.merge(df_calendar, on=['wm_yr_wk'])","a7840de7":"df_merge1.shape","a3167b83":"df_merge1.head()","655e8c2b":"del df_sell_prices\ndel df_calendar\ngc.collect()","d0a6049e":"#df_sales_train_melt = df_sales_train_melt.loc[df_sales_train_melt.demand != 0]","3beb7c31":"#df_sales = df_sales_train_melt[['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id']].drop_duplicates()","e46459f2":"#df_merge2 = df_sales.merge(df_merge1, on=['store_id', 'item_id'])","bfa88d19":"gc.collect()","4afad104":"df_merge2.shape","986985d5":"df_merge2.head()","73eb274d":"pd.Series(df_merge1.id.unique().tolist()).str.split(\"_\").str[-1].unique()","71f5d45a":"del df_merge1\ndel df_sales_train_melt\ngc.collect()","c42ecad7":"df_plot = df_merge2.loc[df_merge2.item_id == 'FOODS_3_611', ['state_id', 'date', 'sell_price']].sort_values(by='sell_price')\ndf_plot.head()","e910aa34":"fig = px.scatter(df_plot, x=\"date\", y=\"sell_price\", color=\"state_id\", \n                 marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\")\n                 #marginal_y=\"rug\", marginal_x=\"histogram\")\nfig.show()","39deec57":"df_sample_sub.id.head()","e7197efb":"df_sales_train.id.head()","c7b2a6e0":"df_sales_train.groupby(['cat_id']).sum().T.reset_index(drop = True)","330e7f06":"lgb_train = lgb.Dataset(X_train,\n                        label=y_train,\n                        free_raw_data=False)\nlgb_test = lgb.Dataset(X_test,\n                       label=y_test,\n                       free_raw_data=False)\n    \ndel X_train, X_test\ngc.collect()","abd9877e":"df_sales_train_tx_melt_merge = df_sales_train_tx_melt.merge(df_calendar, on='d')","f069408c":"df_calendar\ndf_sales_train\ndf_sell_prices\ndf_sample_sub","663a6b77":"df_merge1 = transform(df_merge1)","a35f7212":"### No.of Departments in the Dataset","4ecb2099":"df_calendar_t = df_calendar.copy()\n\ncategories = df_sales_train.cat_id.unique()\ndays = [day for day in df_sales_train.columns if 'd_' in day]\nfor day in days:\n    for cat in categories:\n        df_calendar_t.loc[df_calendar_t.d == day, cat] = df_sales_train.loc[df_sales_train.cat_id == cat, day].sum()","40e4e295":"### This is a Sample Submission which actually copies the last 28 days of data to Future. And this is my first submission. Exploring the solution futher, I can predict by using Moving Average, Time Series, Regression Algo, etc.","58f07c10":"### No.of Event Types in the Calandar Dataset","094bf515":"### No.of Stores in the Dataset","28236352":"start=datetime.now()\n\nmodel = lgb.train(best_params,\n                lgb_train,\n                valid_sets=lgb_test,\n                **fit_params,\n                )\n\nstop=datetime.now()","e034edfb":"df_sales_train_tx_melt = pd.melt(df_sales_train_tx, id_vars = ['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], var_name = 'd', value_name = 'demand')","34d49af3":"### No.of Catagories in the Dataset","850c9c77":"model.fit(X_train, y_train)","3c834575":"from sklearn.metrics import mean_squared_error \n\nmse_lgbm = mean_squared_error(y_pred,y_test)\nprint(mse_lgbm)\nprint(np.sqrt(mse_lgbm))","ee4020ce":"df_merge1['1day_change'] = df_merge1.groupby('id')['demand'].transform(lambda x: x - x.shift(1))\ndf_merge1['2day_change'] = df_merge1.groupby('id')['demand'].transform(lambda x: x - x.shift(2))\ndf_merge1['5day_change'] = df_merge1.groupby('id')['demand'].transform(lambda x: x - x.shift(5))\ndf_merge1['10day_change'] = df_merge1.groupby('id')['demand'].transform(lambda x: x - x.shift(10))\ndf_merge1['28day_change'] = df_merge1.groupby('id')['demand'].transform(lambda x: x - x.shift(28))","85d2808f":"From the above, every Christmas, the sales are dropped to single digit value almost. It is clear that People wish to celebrate rather purchase.","0c2afc41":"f,ax=plt.subplots(1,2,figsize=(16,9))\n\nsb.countplot('state_id', data=df_sales_train, ax=ax[0])\ndf_sales_train.state_id.value_counts().plot.pie(autopct='%1.1f%%',ax=ax[1],shadow=True)\n\nax[0].set_title('Sales per State')\nax[1].set_title('Statewise Sales')\n\nplt.show()","6d93581b":"#### Fit regression model\nparams = {'n_estimators': 100, 'max_depth': 4, 'min_samples_split': 2,\n          'learning_rate': 0.01, 'loss': 'ls'}\nmodel = ensemble.GradientBoostingRegressor(**params)","ff3e93b0":"df_calendar\n\ndf_sales_train\n\ndf_sell_prices\n\ndf_sample_sub","50123230":"### No.of Item Types","78ee3dfa":"To make analysis of data in table easier, we can reshape the data into a more computer-friendly form using Pandas in Python. Pandas.melt() is one of the function to do so..\n\nPandas.melt() unpivots a DataFrame from wide format to long format.","b741a687":"df_calendar_t.head()","3fa8a358":"### No.of States in the Dataset","13f157a6":"df_merge1['7day_std'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.shift(7).rolling(7).std())\ndf_merge1['15day_std'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.shift(15).rolling(15).std())\ndf_merge1['28day_std'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.shift(28).rolling(28).std())\ndf_merge1['100day_std'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.shift(100).rolling(100).std())","0bf9f9ed":"fig1 = px.line(df_calendar_t, x=\"date\", y=\"HOBBIES\", color=\"year\", line_group=\"weekday\", hover_name=\"month\",\n        line_shape=\"spline\", render_mode=\"svg\")\nfig2 = px.line(df_calendar_t, x=\"date\", y=\"HOUSEHOLD\", color=\"month\", line_group=\"year\", hover_name=\"weekday\",\n        line_shape=\"vh\", render_mode=\"svg\")\nfig3 = px.line(df_calendar_t, x=\"date\", y=\"FOODS\", color=\"weekday\", line_group=\"month\", hover_name=\"weekday\",\n        line_shape=\"linear\", render_mode=\"svg\")\n\nfig1.show()\nfig2.show()\nfig3.show()","87aecc8c":"df_merge1 = updateDataType(df_merge1)","efd4a2d1":"df_merge1['7day_min'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.rolling(7).min())\ndf_merge1['7day_max'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.rolling(7).max())\ndf_merge1['28day_min'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.rolling(28).min())\ndf_merge1['28day_max'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.rolling(28).max())","58a090b6":"### No.of Items in the Dataset","1cd091bd":"df_merge1['5day_avg'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.shift(5).rolling(5).mean())\ndf_merge1['10day_avg'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.shift(10).rolling(10).mean())\ndf_merge1['20day_avg'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.shift(20).rolling(20).mean())\ndf_merge1['50day_avg'] = df_merge1.groupby('id')['demand'].transform(lambda x: x.shift(50).rolling(50).mean())","2e422b81":"df_merge1 = updateDataType(df_merge1)","be3c1133":"df_merge1[\"date\"] = pd.to_datetime(df_merge1[\"date\"])\ndf_merge1[\"year\"] = df_merge1[\"date\"].dt.year\ndf_merge1[\"month\"] = df_merge1[\"date\"].dt.month\ndf_merge1[\"week\"] = df_merge1[\"date\"].dt.week\ndf_merge1[\"day\"] = df_merge1[\"date\"].dt.day\ndf_merge1[\"dayofweek\"] = df_merge1[\"date\"].dt.dayofweek\ndf_merge1[\"is_weekend\"] = df_merge1[\"dayofweek\"].isin([5, 6])","3f7b25c3":"mse = mean_squared_error(y_test, y_pred)\nprint(\"MSE: %.4f\" % mse)","980bb4b2":"### No.of Items in the Sell Prices Dataset","c769641b":"df_merge1 = df_sales_train_tx_melt_merge.merge(df_sell_prices, on=['store_id', 'item_id', 'wm_yr_wk'])","499b6770":"linear_reg = linear_model.LinearRegression()\nlinear_reg.fit(X_train, y_train)\nprint(linear_reg.score(X_test, y_test))","50dd142d":"### No.of Event Names in the Calendar Dataset"}}