{"cell_type":{"be705fc6":"code","d5e822b9":"code","45487b18":"code","4e6657a1":"code","de2527ab":"code","7351f0e4":"code","76d04e76":"code","1bac0b29":"code","b384d2ae":"code","16a137ce":"code","48c95d21":"code","4d1e3af3":"code","ca9d31cd":"code","3148c4b4":"code","3fb56f12":"code","d6c456fb":"code","6020ce36":"markdown","5d1db559":"markdown","b9ccc847":"markdown","50dad90b":"markdown","1d83cf32":"markdown","e15bca27":"markdown","9352d42b":"markdown","b994c6d2":"markdown","6ef7d8e9":"markdown","a6b4cc49":"markdown","c60109d6":"markdown","7b25135c":"markdown","10de237e":"markdown","8f3676cc":"markdown","336db065":"markdown","583e2ed3":"markdown","7abf83ff":"markdown"},"source":{"be705fc6":"# sklearn\uc73c\ub85c bagging \ub9cc\ub4e4\uae30\n# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.BaggingClassifier.html\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection # cross-validation score\ub97c \uac00\uc838\uc624\uae30 \uc704\ud568\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import BaggingClassifier # bagging\n\nfrom collections import Counter # count\nfrom sklearn.metrics import f1_score","d5e822b9":"filename = '..\/input\/ysp-koreauniv-tutorial\/pima-indians-diabetes.data.csv'\n# \ndf = pd.read_csv(filename, header=None)\ndf.columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Class']\ndf","45487b18":"X = df.iloc[:,:-1]  # \ub9c8\uc9c0\ub9c9 column \uc81c\uc678 \ub3c5\ub9bd\ubcc0\uc218\nY = df.iloc[:,-1] # \ub9c8\uc9c0\ub9c9 column\uc740 \uc885\uc18d\ubcc0\uc218","4e6657a1":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=0)\nprint('Number of train set:', len(x_train))\nprint('Number of test set:', len(x_test))","de2527ab":"# sklearn\uc73c\ub85c random forest \ub9cc\ub4e4\uae30\n# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html\n\nimport pandas as pd\nfrom sklearn import model_selection\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, roc_auc_score","7351f0e4":"rf_model = RandomForestClassifier(random_state = 0) # RF \ubaa8\ub378 \uc124\uc815 (default \ud30c\ub77c\ubbf8\ud130\ub85c)\nrf_model.fit(x_train, y_train) # \ud559\uc2b5\npred = rf_model.predict(x_test) # test \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc608\uce21\nprint(classification_report(y_test, pred)) # \uc2e4\ub370\uc774\ud130\uc640 \uc608\uce21 \ub370\uc774\ud130 \ube44\uad50\n# roc_auc_score(y_test, pred)","76d04e76":"# hyperparameters\n# \ud0d0\uc0c9\ud558\uace0\uc790\ud558\ub294 \ud30c\ub77c\ubbf8\ud130\ub97c dictionary \ud615\uc2dd\uc73c\ub85c \uc800\uc7a5\nparam_grid = {'n_estimators': [50, 100, 200],\n              'criterion': ['gini', 'entropy'],\n              'oob_score': [True], # compute out of bag error\n#               'n_jobs':[-1], \n#               'max_depth':[6,8,10,12],\n              'min_samples_leaf':[8,12,18],\n              'min_samples_split':[8,16,20]\n              }","1bac0b29":"# 1) \ubaa8\ub378 \uc120\uc5b8 & 2) \uc5ec\ub7ec \ubaa8\ub378\ub4e4\uc744 ensemble: randomforest\nrf_model = RandomForestClassifier()\n\n# hyperparameter search\ngrid_search = GridSearchCV(rf_model, # \ud30c\ub77c\ubbf8\ud130 \ud0d0\uc0c9 \ub300\uc0c1 \ubaa8\ub378 \n                           param_grid = param_grid, # \ud0d0\uc0c9 \ud30c\ub77c\ubbf8\ud130 \uc785\ub825\n                           cv=5, # cross validation \ud69f\uc218\n                           scoring='f1', # f1 score\ub97c \uae30\uc900\uc73c\ub85c \ud0d0\uc0c9\n                           verbose=1)\ngrid_search.fit(x_train, y_train) # train data\uc5d0 \ub300\ud574 \ud0d0\uc0c9 \uc2dc\uc791","b384d2ae":"grid_search.best_params_","16a137ce":"opt_model = grid_search.best_estimator_ # \ucd5c\uace0 \uc131\ub2a5 \ud30c\ub77c\ubbf8\ud130\uc758 \ubaa8\ub378\uc744 \ubd88\ub7ec\uc628 \ud6c4 \uc800\uc7a5\nopt_model","48c95d21":"# \uac80\uc99d\ub370\uc774\ud130\uc5d0 \ub300\ud55c f1-score\nopt_model.oob_score_","4d1e3af3":"# 4) \uc608\uce21\ntest_pred = opt_model.predict(x_test)\ntest_pred","ca9d31cd":"# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud55c f1-score\nprint(classification_report(y_test, test_pred)) # \uc2e4 \ub370\uc774\ud130\uc640 \ubca0\uc2a4\ud2b8 \ud30c\ub77c\ubbf8\ud130 \ubaa8\ub378 \uacb0\uacfc \ube44\uad50\nroc_auc_score(y_test, test_pred)","3148c4b4":"opt_model.feature_importances_","3fb56f12":"df.columns[:-1]","d6c456fb":"plt.bar(list(df.columns[:-1]), opt_model.feature_importances_) # x\ucd95\uc744 \uceec\ub7fc \uc774\ub984\uc73c\ub85c, y\ucd95\uc744 \ubcc0\uc218\uc911\uc694\ub3c4\ub85c bar plot\uadf8\ub9ac\uae30\nplt.xticks(rotation=90) # x\ucd95 90\ub3c4 \ud68c\uc804 (\uceec\ub7fc \uc774\ub984)\nplt.show()","6020ce36":"## \uc559\uc0c1\ube14\uc758\ubaa9\uc801: \ub2e4\uc218\uc758\ubaa8\ub378\uc744\ud559\uc2b5\ud558\uc5ec\uc624\ub958\uc758\uac10\uc18c\ub97c\ucd94\uad6c\n>**\ubd84\uc0b0\uc758\uac10\uc18c\uc5d0\uc758\ud55c\uc624\ub958\uac10\uc18c: \ubc30\uae45(Bagging), \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8(Random Forest)** <br>\n>\ud3b8\ud5a5\uc758\uac10\uc18c\uc5d0\uc758\ud55c\uc624\ub958\uac10\uc18c: \ubd80\uc2a4\ud305(Boosting)","5d1db559":"- \ucd5c\uc801\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\uc740 \ud6c4 \ubaa8\ub378 \uacb0\uc815","b9ccc847":"---","50dad90b":"### Random forest\n> Bagging \ubaa8\ub378: subsample\ub4e4\uc758 **\ubaa8\ub4e0 \ubcc0\uc218**\ub97c \uc0ac\uc6a9\ud574 \ubaa8\ub378 \uad6c\uc131 <br>\n> Random forest \ubaa8\ub378: subsample\ub4e4\uc758 **\ub79c\ub364\ud558\uac8c \uc120\ud0dd\ub41c \ubcc0\uc218**\ub97c \uc0ac\uc6a9\ud574 \ubaa8\ub378 \uad6c\uc131","1d83cf32":"---","e15bca27":"![bagging.png](attachment:c782db42-ad14-442b-b70e-320227f57441.png)","9352d42b":"![bagging.png](attachment:7d03d5f0-feb8-4eee-8d0c-72a9788cf06b.png)","b994c6d2":"### Bias & Variance","6ef7d8e9":"# __Bagging__","a6b4cc49":"![bias.png](attachment:b6ec2a90-fd7f-4fa2-91a8-58a5628e02c7.png)","c60109d6":"![image.png](attachment:image.png)","7b25135c":"- \ubcc0\uc218\uc124\uba85\n    - preg: Number of times pregnant\n\n    - plas: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n\n    - pres: Diastolic blood pressure ($\\text{mm Hg}$)\n\n    - skin: Triceps skin fold thickness ($\\text{mm}$)\n\n    - test: 2-Hour serum insulin ($\\text{mu U\/ml}$)\n\n    - mass: Body mass index ($\\text{weight in kg}$\/$(\\text{height in m})^2$)\n\n    - pedi: Diabetes pedigree function\n\n    - age: Age ($\\text{years}$)\n\n    - class = (1: `tested positive for diabetes`, 0: `tested negative for diabetes`)","10de237e":"# __Ensembles__","8f3676cc":"### Bagging: Bootstrapp Aggregating\n> \uc559\uc0c1\ube14\uc758 \uac01 \uba64\ubc84(\ubaa8\ub378)\uc740 \uc11c\ub85c \ub2e4\ub978 \ud559\uc2b5 \ub370\uc774\ud130\uc14b\uc744 \uc774\uc6a9 <br>\n> \uac1c\ubcc4 \ub370\uc774\ud130\uc14b\uc744 \ubd93\uc2a4\ud2b8\ub7a9(bootstrap)\uc774\ub77c \ubd80\ub984","336db065":"### __Ensembles almost always work better__","583e2ed3":"# __Package\ub97c \uc0ac\uc6a9\ud558\uc5ec random forest \ucf54\ub4dc \uc791\uc131__","7abf83ff":"- \ubcc0\uc218\uc911\uc694\ub3c4\n    - \ubaa8\ub378\uc774\ub984.feature_importances_"}}