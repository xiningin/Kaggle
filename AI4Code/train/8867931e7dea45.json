{"cell_type":{"db2b55c4":"code","28f63cde":"code","50ed4a76":"code","1c0f9221":"code","a8335442":"code","88c2ccd8":"code","a1006e99":"code","fa4c339c":"code","da2fb376":"code","4cfba9d1":"code","a7c701a3":"code","f94b3781":"markdown","1195451b":"markdown","778e7843":"markdown","4111d8a2":"markdown","e6d638a8":"markdown","04476499":"markdown","c00a8839":"markdown","2fd89ca0":"markdown","6a74aa35":"markdown"},"source":{"db2b55c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nfrom skimage.io import imread, imshow\nfrom skimage.transform import rescale\nimport skimage\nimport bitarray\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))","28f63cde":"All_SW_Scripts = \"\"\n\ndef TextToString(txt):\n    with open (txt, \"r\") as file:\n        data=file.readlines()\n        script = \"\"\n        for x in data[1:]:\n            x = x.replace('\"','').replace(\"\\n\",\" \\n \").split(' ')\n            x[1] += \":\"\n            script += \" \".join(x[1:-1]).replace(\"\\n\",\" \\n \")\n        return script\nAll_SW_Scripts += TextToString(\"..\/input\/star-wars-movie-scripts\/SW_EpisodeIV.txt\")\nAll_SW_Scripts += TextToString(\"..\/input\/star-wars-movie-scripts\/SW_EpisodeV.txt\")\nAll_SW_Scripts += TextToString(\"..\/input\/star-wars-movie-scripts\/SW_EpisodeVI.txt\")\nprint(All_SW_Scripts[:1000])","50ed4a76":"deathstar_img = imread(\"..\/input\/star-wars-steganography-images\/Death-Star.jpg\")\n\nplt.figure(figsize=(10, 10))\nplt.imshow(deathstar_img)\n\nprint(\"Image is \"+str(deathstar_img.shape[0])+\" by \"+str(deathstar_img.shape[1])+\" pixels with \"+str(deathstar_img.shape[2])+\" color channels\")","1c0f9221":"def MessageToBits(message):\n    #tag message (and pad w\/ spaces till 10 characters)\n    tag = \"{:<10}\".format(str(len(message)*8))\n    message = tag+message\n    #convert to bits\n    code = bitarray.bitarray()\n    code.frombytes(message.encode('utf-8'))\n    code = \"\".join(['1' if x == True else '0' for x in code.tolist()])\n    return code","a8335442":"def CheckBitSize(img, message):\n    h = img.shape[0]\n    w = img.shape[1]\n    try:\n        c = img.shape[2]\n    except:\n        c = 1\n    image_max_size = h*w*c*2\n    string_size = len(message)\n    print(\"Message is \"+str(string_size\/8000)+\" KB and image can fit \"+str(image_max_size\/8000)+\" KB of data\")\n    if string_size > image_max_size:\n        print(\"Message is too big to be encoded in image\")\n        return False\n    else:\n        print(\"Image can be encoded with message. Proceed\")\n        return True\n    \nCheckBitSize(deathstar_img, MessageToBits(All_SW_Scripts))","88c2ccd8":"%%time\ndef EncodeImage(img, message):\n    code = MessageToBits(message)\n    if CheckBitSize(img, code):\n        shape = img.shape\n        img = img.flatten()\n        code = list(code)\n        code_len = len(code)\n        for i,x in enumerate(img):\n            if i*2 <code_len:\n                zbits = list('{0:08b}'.format(x))[:6]+code[i*2:i*2+2]\n                img[i] = int(\"\".join(zbits), 2)\n            else:\n                return img.reshape(shape)\n        return img.reshape(shape)\n\nencoded_img = EncodeImage(deathstar_img, All_SW_Scripts)","a1006e99":"def CompareTwoImages(img1,img2):\n    fig=plt.figure(figsize=(20, 20))\n\n    fig.add_subplot(2, 2, 1)\n    plt.imshow(img1)\n    fig.add_subplot(2, 2, 2)\n    plt.imshow(img2)\n\n    plt.show()\nCompareTwoImages(deathstar_img, encoded_img)","fa4c339c":"print(deathstar_img[200][200])\nprint(encoded_img[200][200])","da2fb376":"%%time\ndef DecodeImage(img):\n    bit_message = \"\"\n    bit_count = 0\n    bit_length = 200\n    for i,x in enumerate(img):\n        for j,y in enumerate(x):\n            for k,z in enumerate(y):\n                zbits = '{0:08b}'.format(z)\n                bit_message += zbits[-2:]\n                bit_count += 2\n                if bit_count == 80:\n                    try:\n                        decoded_tag = bitarray.bitarray(bit_message).tobytes().decode('utf-8')\n                        bit_length = int(decoded_tag)+80\n                        bit_message = \"\"\n                    except:\n                        print(\"Image does not have decode tag. Image is either not encoded or, at least, not encoded in a way this decoder recognizes\")\n                        return\n                elif bit_count >= bit_length:\n                    return bitarray.bitarray(bit_message).tobytes().decode('utf-8')\n\ndecoded_message = DecodeImage(encoded_img)\nprint(decoded_message[:1000])","4cfba9d1":"print(decoded_message == All_SW_Scripts)","a7c701a3":"skimage.io.imsave(\"Death_Star_With_Scripts.jpg\", encoded_img)","f94b3781":"*The cover image is then saved.*","1195451b":"# **Image Steganography**","778e7843":"*The following function finds the bit size of message and checks if it can fit in the image.*","4111d8a2":"*The following function converts the string All_SW_Scripts to bits.*","e6d638a8":"*Star-Wars-Script is read from all 3 files in star-wars-movie-scripts dataset. It is then cleaned and combined into a single string, All_SW_Scripts.*","04476499":"*The CompareTwoImages function compares the initial and cover images.*","c00a8839":"                                                                                                  *Project by Minal H. R and Rishika Satheesh.*","2fd89ca0":"*The following message encodes the message into the image using LSB Algorithm.*","6a74aa35":"*The DecodeImage function decodes and helps in retrieving the data hidden and prints it as the output.*"}}