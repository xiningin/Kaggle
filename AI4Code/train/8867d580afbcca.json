{"cell_type":{"4534e561":"code","1028518e":"code","ed6412e3":"code","b9f6782a":"code","d2dc917a":"code","f6bdc089":"code","043fe2a1":"code","8daac640":"code","fe531c80":"code","341b151b":"code","e58bf7ba":"code","9415a9c6":"code","85fbf52a":"code","aa1db0f3":"code","9fc25d20":"code","6e267dcc":"code","54982d4a":"code","58020b98":"code","930a61f9":"code","b4ff5a89":"code","87573b79":"code","3614711c":"code","fd72c71f":"code","46cb4f17":"code","c2a0eafa":"code","fce634fc":"markdown","15a1eb2e":"markdown","2097ee2b":"markdown","b81a0ccf":"markdown","c62a5bc8":"markdown","78e33d0c":"markdown","2100359e":"markdown","a1f3ba80":"markdown","edcb0331":"markdown","ee9c6541":"markdown"},"source":{"4534e561":"import pandas as pd\nimport numpy as np\n\n\nsong_data = pd.read_csv('..\/input\/19000-spotify-songs\/song_data.csv') \nsong_info = pd.read_csv('..\/input\/19000-spotify-songs\/song_info.csv') \n","1028518e":"song_data.head()","ed6412e3":"song_info.head()","b9f6782a":"song_info[song_info['song_name'] == 'Footloose']","d2dc917a":"song_info['playlist'] = song_info['playlist'].str.lower()\nsong_info['song_name'] = song_info['song_name'].str.lower()\nsong_info['artist_name'] = song_info['artist_name'].str.lower()\nsong_info['album_names'] = song_info['album_names'].str.lower()\n\nsong_data['song_name'] = song_data['song_name'].str.lower()\n\n\n\n#song_info[song_info['playlist'].str.contains('pop')]\n","f6bdc089":"song_df = song_data.copy()\nsong_df['artist_name'] = song_info['artist_name']\n\n\nsong_df = song_df.drop_duplicates(subset=['song_name','artist_name'])\n\nsong_info = song_info.drop_duplicates(subset=['song_name','artist_name'])\n\n\nsong_df = song_df.reset_index()\nsong_df = song_df.drop('index',axis=1)\n\nsong_df.head()","043fe2a1":"from scipy.stats import shapiro\n\nstat,p =shapiro(song_df[['song_popularity', 'acousticness',\n       'danceability', 'energy', 'instrumentalness', 'key', 'liveness',\n       'loudness', 'audio_mode', 'speechiness', 'tempo','audio_valence']])\n\nprint(\"stat: \",stat,\":\",\"p :\",p)\nif p>0.05:\n    print(\"gaussian distribution - fail to reject H0\")\nelse:\n    print(\"not gaussian distribution - reject H0\")","8daac640":"song_df = song_df.drop(['time_signature','song_duration_ms'], axis=1)\nsong_df.head()","fe531c80":"from sklearn.preprocessing import MinMaxScaler\n\n\nminmaxscaler = MinMaxScaler()\nminmaxscaled = minmaxscaler.fit_transform(song_df[['song_popularity', 'acousticness',\n       'danceability', 'energy', 'instrumentalness', 'key', 'liveness',\n       'loudness', 'audio_mode', 'speechiness', 'tempo','audio_valence']])\nsongs_normalized = pd.DataFrame(minmaxscaled, columns=[['song_popularity', 'acousticness',\n       'danceability', 'energy', 'instrumentalness', 'key', 'liveness',\n       'loudness', 'audio_mode', 'speechiness', 'tempo','audio_valence']])","341b151b":"song_df_normalized = song_df.copy()\nsong_df_normalized.head()\n\n","e58bf7ba":"\nsong_df_normalized[['song_popularity', 'acousticness',\n       'danceability', 'energy', 'instrumentalness', 'key', 'liveness',\n       'loudness', 'audio_mode', 'speechiness', 'tempo','audio_valence']] = songs_normalized\n#song_df_normalized.drop(['bpm','nrgy','dnce','dB','live','val','acous','spch','pop'],axis=1,inplace=True)\nsong_df_normalized.head()","9415a9c6":"song_features=song_df_normalized.set_index(\"song_name\")\nsong_features.drop([\"artist_name\"],axis=1,inplace=True)\nsong_features.head()","85fbf52a":"song_features.info()","aa1db0f3":"song_features.tail()","9fc25d20":"from scipy.sparse import csr_matrix\n\nsong_features_csr = csr_matrix(song_features.values)","6e267dcc":"song_features_csr ","54982d4a":"song_features.values","58020b98":"from sklearn.neighbors import NearestNeighbors\n\nmodel_nn = NearestNeighbors(metric='cosine',algorithm='brute')\nmodel_nn.fit(song_features_csr)","930a61f9":"temp = song_features.copy()\ntemp.reset_index(inplace=True)\nsongsearch = 'footloose'\nsongsearch = songsearch.lower()\nsong_index = temp.index[temp['song_name'] ==songsearch].tolist()[0]\nprint(song_index)\n\nprint(song_features.index[song_index])\n\n\ndistances,indices = model_nn.kneighbors(X = song_features.iloc[song_index,:].values.reshape(1,-1), n_neighbors=6)\n\nfor i in range(0, len(distances.flatten())):\n    if i == 0:\n        print(\"Recommendation for \",song_features.index[song_index],\"are: \")\n    else:\n        print(i,\": \",song_features.index[indices.flatten()[i]], \"| distance= \",distances.flatten()[i])","b4ff5a89":"songgname = 'footloose'\nsonggname = songgname.lower()\nsongg = song_info[song_info['song_name'] == songgname]\n#songg['artist_name'].unique().tolist()[0]\nsongg","87573b79":"songgname = 'red red wine'\nsonggname = songgname.lower()\nsongg = song_info[song_info['song_name'] == songgname]\n#songg['album_names'].unique().tolist()\nsongg","3614711c":"artistname = 'aretha franklin'\nartistname = artistname.lower()\nartist = song_df[song_df['artist_name'] == artistname]\nartist['song_name'].unique().tolist()\n#artist","fd72c71f":"song = 'i say a little prayer'\nsong = song.lower()","46cb4f17":"playlist = song_info[song_info['song_name'] == song]\nx = playlist['playlist'].unique().tolist()\nx[0]","c2a0eafa":"temp_df = song_df.copy()\ntemp_df[['artist_name','playlist']] = song_info[['artist_name','playlist']]\ntemp_df = temp_df.drop_duplicates(subset=['song_name','artist_name'])\n\n\ntemp_df = temp_df.reset_index()\ntemp_df = temp_df.drop('index',axis=1)\n\ntemp_df[temp_df['playlist'] == x[0]]","fce634fc":"# create feature matrix","15a1eb2e":"# Use cosine similarity based NN algo to calculate min distances and find similar songs","2097ee2b":"# find artist of song","b81a0ccf":"# find songs of artist ","c62a5bc8":"# splitting main df as per playlists ","78e33d0c":"# Standardise using MinMaxScaler","2100359e":"# Convert all str to lower case","a1f3ba80":"# Merging the two datasets into one","edcb0331":"# check if the numeric features follow Gaussian distribution","ee9c6541":"# find album of song"}}