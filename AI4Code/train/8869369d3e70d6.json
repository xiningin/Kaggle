{"cell_type":{"3ed4a7af":"code","7b4cd001":"code","affe84c4":"code","2c52caf7":"code","ec8e2c3d":"code","d4a6a2e6":"code","d258350f":"code","9c54845c":"code","bef3f87d":"code","58488f63":"code","12d7060e":"code","ee82f503":"code","dbc054bc":"code","d65a536a":"code","86ac1dff":"code","20a0f324":"code","ea31f909":"code","7e4a47bb":"code","f494b3ea":"code","ec8f8f8c":"code","26b7fcf8":"code","9311fe89":"code","9b05ce11":"code","a8aeccba":"code","153c1b5d":"code","9900a881":"markdown","fdf9da73":"markdown","2babe781":"markdown","dc1d2d70":"markdown","c57faf0d":"markdown","165732c4":"markdown","190f93a8":"markdown","59e7772b":"markdown","1df9a920":"markdown","75c67aff":"markdown","f1bff914":"markdown","d7b1b863":"markdown","63a8331e":"markdown","e9f01efd":"markdown","bc78fe51":"markdown","6e8a2cf1":"markdown","1179c398":"markdown","061a3c6d":"markdown","470bc52e":"markdown","c4383708":"markdown","ddabcaba":"markdown"},"source":{"3ed4a7af":"import numpy as np \nimport pandas as pd \nimport os\nfrom glob import glob\nfrom tqdm import tqdm\nimport seaborn as sns\nsns.set(style = 'dark')\nimport matplotlib.pyplot as plt","7b4cd001":"train_files_dir = glob('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/*')\ntest_files_dir = glob('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/test\/*')","affe84c4":"train_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')","2c52caf7":"train_df.head()","ec8e2c3d":"test_df.head()","d4a6a2e6":"train_df['sex'].fillna('unkown',inplace = True) # missing value","d258350f":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()","9c54845c":"train_df['sex_enc'] = enc.fit_transform(train_df.sex.astype('str'))\ntest_df['sex_enc'] = enc.transform(test_df.sex.astype('str'))","bef3f87d":"plt.figure(figsize = (12,6))\nsns.countplot(x = 'sex', hue = 'target', data = train_df)","58488f63":"train_df.head()","12d7060e":"test_df.anatom_site_general_challenge = test_df.anatom_site_general_challenge.fillna('unknown')\ntrain_df.anatom_site_general_challenge = train_df.anatom_site_general_challenge.fillna('unknown')","ee82f503":"train_df['anatom_enc']= enc.fit_transform(train_df.anatom_site_general_challenge.astype('str'))\ntest_df['anatom_enc']= enc.transform(test_df.anatom_site_general_challenge.astype('str'))","dbc054bc":"train_df['age_approx'] = train_df['age_approx'].fillna(train_df['age_approx'].mode().values[0])\ntest_df['age_approx']  = test_df['age_approx'].fillna(test_df['age_approx'].mode().values[0]) # Test data doesn't have any NaN in age_approx","d65a536a":"plt.figure(figsize = (20,6))\nsns.countplot(x = 'age_approx', hue = 'target', data = train_df)","86ac1dff":"train_df['n_images'] = train_df.patient_id.map(train_df.groupby(['patient_id']).image_name.count())\ntest_df['n_images'] = test_df.patient_id.map(test_df.groupby(['patient_id']).image_name.count())","20a0f324":"train_images = train_df['image_name'].values\ntrain_sizes = np.zeros(train_images.shape[0])\nfor i, img_path in enumerate(tqdm(train_images)):\n    train_sizes[i] = os.path.getsize(os.path.join('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/', f'{img_path}.jpg'))\n    \ntrain_df['image_size'] = train_sizes\n\n\ntest_images = test_df['image_name'].values\ntest_sizes = np.zeros(test_images.shape[0])\nfor i, img_path in enumerate(tqdm(test_images)):\n    test_sizes[i] = os.path.getsize(os.path.join('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/test\/', f'{img_path}.jpg'))\n    \ntest_df['image_size'] = test_sizes","ea31f909":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nscale = MinMaxScaler()\ntrain_df['image_size_scaled'] = scale.fit_transform(train_df['image_size'].values.reshape(-1, 1))\ntest_df['image_size_scaled'] = scale.transform(test_df['image_size'].values.reshape(-1, 1))","7e4a47bb":"train_df['age_id_min']  = train_df['patient_id'].map(train_df.groupby(['patient_id']).age_approx.min())\ntrain_df['age_id_max']  = train_df['patient_id'].map(train_df.groupby(['patient_id']).age_approx.max())\n\ntest_df['age_id_min']  = test_df['patient_id'].map(test_df.groupby(['patient_id']).age_approx.min())\ntest_df['age_id_max']  = test_df['patient_id'].map(test_df.groupby(['patient_id']).age_approx.max())","f494b3ea":"features = [\n            'age_approx',\n            'age_id_min',\n            'age_id_max',\n            'sex_enc',\n            'anatom_enc',\n            'n_images',\n            'image_size_scaled',\n           ]","ec8f8f8c":"X = train_df[features]\ny = train_df['target']\n\nX_test = test_df[features]","26b7fcf8":"# Load libraries for training\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold","9311fe89":"model = XGBRegressor(base_score=0.5, booster=None, colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.8, gamma=1, gpu_id=-1,\n             importance_type='gain', interaction_constraints=None,\n             learning_rate=0.002, max_delta_step=0, max_depth=10,\n             min_child_weight=1, missing=None, monotone_constraints=None,\n             n_estimators=700, n_jobs=-1, nthread=-1, num_parallel_tree=1,\n             objective='binary:logistic', random_state=0, reg_alpha=0,\n             reg_lambda=1, scale_pos_weight=1, silent=True, subsample=0.8,\n             tree_method=None, validate_parameters=False, verbosity=None)\n\nkfold = StratifiedKFold(n_splits=5, random_state=1001, shuffle=True)\ncv_results = cross_val_score(model, X, y, cv=kfold, scoring='roc_auc', verbose = 3)\ncv_results.mean()","9b05ce11":"model.fit(X,y)\npred_xgb = model.predict(X_test)","a8aeccba":"feature_important = model.get_booster().get_score(importance_type='weight')\nkeys = list(feature_important.keys())\nvalues = list(feature_important.values())\n\ndata = pd.DataFrame(data=values, index=keys, columns=[\"score\"]).sort_values(by = \"score\", ascending=False)\nplt.figure(figsize= (12,10))\nsns.barplot(x = data.score , y = data.index, orient = 'h', palette = 'Blues_r')","153c1b5d":"sub = pd.DataFrame({'image_name':test_df.image_name.values,\n                    'target':pred_xgb})\nsub.to_csv('submission.csv',index = False)","9900a881":"Label encoding","fdf9da73":"### Training on entire data for making predictions","2babe781":"### Scaling Image Size","dc1d2d70":"### Feature Importance","c57faf0d":"### Loading image files","165732c4":"### Images Per Patient","190f93a8":"Imputing missing values","59e7772b":"### Anatom_site_general_challenge","1df9a920":"Let's check the encoding columns","75c67aff":"Imputing mising values","f1bff914":"## Imputing missing values & Feature Engineering","d7b1b863":"Label encoding","63a8331e":"### Sex","e9f01efd":"## Training the model","bc78fe51":"### Training Xgboost with Stratified K-Fold Cross Validation","6e8a2cf1":"### Image Size ","1179c398":"### Age","061a3c6d":"### Creating submission file","470bc52e":"### Min-Max age of Patient","c4383708":"Imputing missing values","ddabcaba":"### Loading Metadata"}}