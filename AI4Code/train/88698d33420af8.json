{"cell_type":{"932791b6":"code","31f97ac5":"code","bf1040e6":"code","64e9b5ff":"code","17936964":"code","6fd51f5f":"code","fbc1d55a":"code","23fc2c78":"code","fbcb0145":"code","f1fcc8d0":"code","44c03f26":"code","f27c3709":"code","ed6f8b7e":"code","d81b675d":"code","98f0e56b":"code","17a81f72":"code","cc789271":"code","d9988f2e":"code","bd8cdd22":"code","eead7b19":"code","3c510d11":"code","46111451":"code","d1e483a6":"code","e39296c1":"code","4ee6f2f3":"code","f80f32b6":"code","4515e12b":"code","294c7e21":"code","1fe67e10":"code","8927016c":"code","ca822dd0":"code","fdbce8c6":"code","8ab6e6e0":"code","5faeb2f9":"code","14dc8317":"code","8c227a3b":"code","687ce855":"code","b545464f":"code","5ae76a29":"code","e2680e89":"code","85e75b96":"code","7424b1a0":"markdown","98c418f2":"markdown","590c21d9":"markdown","eb6098d6":"markdown","3c55db92":"markdown","bbbf4e97":"markdown","c21a35bc":"markdown","6e0d2c12":"markdown","ee7ee5d3":"markdown","bd4a1710":"markdown","7f6a4931":"markdown","145101e1":"markdown","fcc1cdab":"markdown","0facecee":"markdown","a810021d":"markdown","82b38719":"markdown","ebebb99f":"markdown","5d10500b":"markdown","5ae69d42":"markdown","0ae584d7":"markdown","858ef5fc":"markdown","1768ff79":"markdown","f8ebacc5":"markdown","15d331f4":"markdown","daecd8d0":"markdown","8569002d":"markdown","cc0caac1":"markdown","19e0a3ca":"markdown"},"source":{"932791b6":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","31f97ac5":"import pandas as pd\nimport os\nprint(os.listdir(\"..\/input\"))\ndata = pd.read_csv('..\/input\/results.csv')","bf1040e6":"data.head()","64e9b5ff":"data.home_team.value_counts().head(10)","17936964":"data.away_team.value_counts().head(10)","6fd51f5f":"data.tournament.value_counts().head(10)","fbc1d55a":"data['home_win'] = data['home_score'] #filler values for now\n\nfor i in range(data.shape[0]): #for each row\n    \n    home_score = data.at[i,'home_score'] #get home score\n    away_score = data.at[i,'away_score'] #get away score\n    \n    if home_score > away_score: #home score win\n        data.at[i,'home_win'] = 1\n    elif away_score > home_score: #away score win\n        data.at[i,'home_win'] = 0\n    else:\n        data.at[i,'home_win'] = 0.5 #tie","23fc2c78":"data['home_win'].head()","fbcb0145":"unique_countries_home = list(data.home_team.unique())\nunique_countries_away = list(data.away_team.unique())\nunique_countries = unique_countries_home + unique_countries_away\n#Only get unique values by converting to set, then list\nunique_countries = list(set(unique_countries))","f1fcc8d0":"country_stats = pd.DataFrame({\"country\":unique_countries})","44c03f26":"country_stats.country.value_counts()","f27c3709":"data.head(3)","ed6f8b7e":"#Initialize 4 columns\ncol_names = ['away_win','away_lose','home_win','home_lose']\nfor name in col_names:\n    country_stats[name] = 0 #placeholder value\n\n#Counting process\nfor i in range(data.shape[0]):\n    \n    #Get indexes in country_stat for home and away country\n    home_index = country_stats[country_stats['country']==data.at[i,'home_team']].index.values.astype(int)[0]\n    away_index = country_stats[country_stats['country']==data.at[i,'away_team']].index.values.astype(int)[0]\n    \n    #Add 1 to either away win or away lose to away team, and home win or home lose to home team\n    if data.at[i,'home_win'] == 1: #The home team has won\n        country_stats.at[home_index,'home_win'] += 1\n        country_stats.at[away_index,'away_lose'] += 1\n    elif data.at[i,'home_win'] == 0: #The home team has lost\n        country_stats.at[home_index,'home_lose'] += 1\n        country_stats.at[away_index,'away_win'] += 1\n    else: #tie. We will just do nothing, since no one really won or lost.\n        pass","d81b675d":"country_stats.head()","98f0e56b":"#Get total losses and wins\ncountry_stats['lose'] = country_stats['away_lose'] + country_stats['home_lose']\ncountry_stats['win'] = country_stats['away_win'] + country_stats['home_win']\n\n#Get total games played away and at home, and in general\ncountry_stats['home'] = country_stats['home_win'] + country_stats['home_lose']\ncountry_stats['away'] = country_stats['away_win'] + country_stats['away_lose']\ncountry_stats['games'] = country_stats['home'] + country_stats['away']\n\n#Win-to-lose ratio (the bigger the better)\ncountry_stats['win_lose_ratio'] = country_stats['win']\/country_stats['lose']","17a81f72":"country_stats.head()","cc789271":"country_stats[country_stats.lose == 0]","d9988f2e":"#Dealing with two pesky infinity cases, we can just delete them as they are\n#not significant\ncountry_stats.drop(list(country_stats[country_stats.lose == 0].index.values.astype(int)),inplace=True)","bd8cdd22":"country_stats[country_stats.lose == 0]","eead7b19":"country_stats.head()","3c510d11":"grid = sns.JointGrid(country_stats.lose, country_stats.win, space=0, size=7, ratio=5)\ngrid.plot_joint(plt.scatter, color=\"b\")\nplt.plot([0, 0], [700, 700], linewidth=100)\nplt.title('Win to Lose Ratio Scatterplot')","46111451":"sns.distplot(country_stats.win_lose_ratio,rug=True)\nplt.title(\"Country Win to Lose Ratio Distribution Plot\")","d1e483a6":"country_stats['away_win_lose_ratio'] = country_stats['away_win']\/country_stats['away_lose']\ncountry_stats['home_win_lose_ratio'] = country_stats['home_win']\/country_stats['home_lose']\n\ncountry_stats['home_away_degree'] = country_stats['home_win_lose_ratio'] - country_stats['away_win_lose_ratio']","e39296c1":"country_stats.head()","4ee6f2f3":"country_stats['home_away_degree'].nlargest(5)","f80f32b6":"country_stats.loc[list(country_stats[country_stats.home_away_degree == float('inf')].index.values.astype(int))]","4515e12b":"problem_indexes = list(country_stats[country_stats.home_away_degree == float('inf')].index.values.astype(int))\nbad_columns = ['home_win_lose_ratio','home_away_degree']\nfor column in bad_columns:\n    for index in problem_indexes:\n        country_stats.at[index,column] = np.nan","294c7e21":"country_stats['home_away_degree'].nlargest(5)","1fe67e10":"country_stats.loc[country_stats['home_away_degree'].nlargest(5).index.values.astype(int)]","8927016c":"country_stats[country_stats.country=='Jersey']","ca822dd0":"country_stats['home_away_degree'].nsmallest(5)","fdbce8c6":"country_stats.loc[country_stats['home_away_degree'].nsmallest(3).index.values.astype(int)]","8ab6e6e0":"problem_indexes = country_stats['home_away_degree'].nsmallest(3).index.values.astype(int)\nbad_columns = ['away_win_lose_ratio','home_away_degree']\nfor column in bad_columns:\n    for index in problem_indexes:\n        country_stats.at[index,column] = np.nan","5faeb2f9":"country_stats['home_away_degree'].nsmallest(5)","14dc8317":"country_stats.loc[country_stats['home_away_degree'].nsmallest(5).index.values.astype(int)]","8c227a3b":"top_cs = country_stats\ntop_cs = top_cs.iloc[0:0] #clearing out all data\ntop_cs.drop('country',axis=1,inplace=True)","687ce855":"top_cs","b545464f":"for i in range(5):\n    top_cs.loc[i] = 0","5ae76a29":"top_cs","e2680e89":"top_cs.reset_index()\n\ndef get_country(index): #function to get country by index\n    return country_stats.loc[index]['country']\n    \n#For each column\nfor column in top_cs.columns:\n    \n    placement_index = 0\n    \n    #For each index in a list of top indexes by column value\n    for index in list(country_stats[column].nlargest(5).index.values.astype(int)):\n        \n        #Assign value to country\n        top_cs.loc[placement_index,column] = get_country(index)\n        #Next index\n        placement_index += 1","85e75b96":"top_cs","7424b1a0":"## Countries","98c418f2":"Woah! Basque county has played a substantial amount of games at home and away, but perform a lot better away than at home - a bit larger than 2.75x better.","590c21d9":"Uh oh, we've come across pesky infinity again! Let's check out which countries these are and if they are significant.","eb6098d6":"Let's get some additional metrics:\n- away win-to-lose ratio\n- home win-to-lose ratio\n- difference between home and away win-to-lose ratios\n     - Does the team win more at home (positive value) or away (negative value), and to what degree (absolute value of value)?","3c55db92":"#### Let's visualize which countries win, lose, or participate the most.","bbbf4e97":"Our new leaderboard:","c21a35bc":"Viola!","6e0d2c12":"# Data Analysis & Visualization","ee7ee5d3":"As expected, most of the points are cluttered around the lower left area because most countries haven't played very many games, gradually thining out the more up\/right the scatterplot goes.\nLet's try to plot the ratio out with seaborn's handy distplot.","bd4a1710":"Jersey has played a substantial amount of home and away games (48 and 34 respectively), which means that the numbers are secure.\nThis suggests that Jersey has an advantage when playing at home - a big advantage.","7f6a4931":"Pesky infinity again! We know the drill.","145101e1":"# Data Loading","fcc1cdab":"Let's get a visual for how countries fare in a win-to-lose ratio by creating a scatterplot.","0facecee":"Great! Now, using these four columns, we can generate some statistics.","a810021d":"Good! Now, let's add four columns, away_win, away_lose, home_win, home_lose.","82b38719":"Above is a nice little chart with each of the features we managed to extract, and which countries top in them.","ebebb99f":"And the ranking code:","5d10500b":"Most teams have lost a little more than they have won (a win-lose ratio just under 1). ","5ae69d42":"Let's check these out:","0ae584d7":"All of these teams have played at least 5 teams.\nWhat is particularly interesting is the Jersey Team - they've played 82 games and still have the 2nd highest difference between their home and away win-lose ratios. Let's focus on this team.","858ef5fc":"Let's create a new DataFrame with country stats.","1768ff79":"Let's get these countries' rows for further analysis.","f8ebacc5":"These teams have all played 2 or over games, so let's try to take care of this by setting them to nan.","15d331f4":"Now, let's create a dataframe that gets the top performers in each category.","daecd8d0":"Good! Let's check out our country_stats DataFrame:","8569002d":"Let's see which countries have the highest home_away_degree values.","cc0caac1":"Let's look at the smallest ones (the most negative)","19e0a3ca":"# Soccer Matches Feature Engineering\nUsing only the scores and teams, how much information can we get?"}}