{"cell_type":{"0cded710":"code","9ee6b129":"code","677f06a9":"code","d27833f1":"code","3d234f42":"code","1dfbeec1":"code","161a4b99":"code","4f53c4a8":"code","d0bbd305":"code","7f6cf6cc":"code","87394e3d":"code","1aa8877d":"code","257f70d5":"code","42da57f7":"code","c1926c54":"code","a93c1829":"code","b3e7edf1":"code","34c6c068":"code","a908111b":"code","101c3d8d":"code","b0e6c192":"code","71fd1205":"code","48d869a6":"code","e6f49538":"code","2faa7e04":"code","0ee42656":"code","e9cac8d2":"code","6415e219":"code","d8c4ad3a":"markdown","8834ec4d":"markdown","09c8559c":"markdown","d14261cb":"markdown","575ef3e2":"markdown","00628cc0":"markdown","87a3f1d2":"markdown","d746e56e":"markdown","a72a53b6":"markdown","f6c8e083":"markdown","6f0fe5f1":"markdown","483b0b1f":"markdown","152e4669":"markdown","b1661dac":"markdown","93c0f9f1":"markdown","f0c8a09f":"markdown","7811dd5d":"markdown","a5fbabe6":"markdown","fce2b8d4":"markdown","77c921d0":"markdown"},"source":{"0cded710":"import numpy as np \nimport pandas as pd\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import mean_squared_log_error\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nfrom sklearn.model_selection import StratifiedKFold, KFold, LeaveOneGroupOut\n\nimport optuna\n\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\n\npd.set_option('display.max_columns', None)\n#########################################################\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nss = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","9ee6b129":"train.head(3)","677f06a9":"train.info()","d27833f1":"train = train.drop([7110], axis = 0)\nfor i in [train, test]:\n    i['date_time'] = pd.to_datetime(i['date_time'])\nmonths = train[\"date_time\"].dt.month\n\nfor i in [train, test]:\n    i['day_of_week'] = i['date_time'].dt.dayofweek\n    i['hour'] = i['date_time'].dt.hour\n    i['max_hours'] =  i['hour'].isin([8, 9, 17, 18, 19, 20]).astype('int')\n    i['working_hours'] =  i['hour'].isin(np.arange(8, 19, 1)).astype('int')\n    i['is_weekend'] = (i['date_time'].dt.dayofweek >= 5).astype('int')\n    i['rel_hum-12'] = i['relative_humidity'] - i['relative_humidity'].shift(periods = 12, fill_value = 0)\n    i['deg-12'] = i['deg_C'] - i['deg_C'].shift(periods = 12, fill_value = 0)\n    for k in [1, 3, 6, 8, 12, 24]:\n        i[f's1-{k}'] = i['sensor_1'] - i['sensor_1'].shift(periods = k, fill_value = 0)\n        i[f's1+{k}'] = i['sensor_1'] - i['sensor_1'].shift(periods = -k, fill_value = 0)\n        i[f's2-{k}'] = i['sensor_2'] - i['sensor_2'].shift(periods = k, fill_value = 0)\n        i[f's2+{k}'] = i['sensor_2'] - i['sensor_2'].shift(periods = -k, fill_value = 0)\n        i[f's3-{k}'] = i['sensor_3'] - i['sensor_3'].shift(periods = k, fill_value = 0)\n        i[f's3+{k}'] = i['sensor_3'] - i['sensor_3'].shift(periods = -k, fill_value = 0)\n        i[f's4-{k}'] = i['sensor_4'] - i['sensor_4'].shift(periods = k, fill_value = 0)\n        i[f's4+{k}'] = i['sensor_4'] - i['sensor_4'].shift(periods = -k, fill_value = 0)\n        i[f's5-{k}'] = i['sensor_5'] - i['sensor_5'].shift(periods = k, fill_value = 0)\n        i[f's5+{k}'] = i['sensor_5'] - i['sensor_5'].shift(periods = -k, fill_value = 0)","3d234f42":"for i in [train, test]:\n    i['date_time'] = i['date_time'].astype('object')\n\nfig = plt.figure(figsize = (15, 15))\n\nplt.subplot(211)\nsns.set_style(\"white\")\nplt.title('Carbon monoxide', size = 25, y = 1.06, fontname = 'monospace', color = '#1e1f26')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.kdeplot(train['target_carbon_monoxide'], color = '#4cb5f5', shade = True, label = 'Carbon monoxide', alpha = 0.8, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nfor j in ['right', 'left', 'top']:\n    a.spines[j].set_visible(False)\na.spines['bottom'].set_linewidth(1.1)\n\nplt.subplot(212)\nb = sns.lineplot(x = \"date_time\", y = \"target_carbon_monoxide\", data = train, color = '#4cb5f5', linewidth = 0.5)\nplt.ylabel('carbon moxide level', size = 14, fontname = 'monospace')\nplt.xlabel('train date time', size = 14, fontname = 'monospace', labelpad = 10)\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.16, 0.08, '''START\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace')\n\nplt.figtext(0.87, 0.08, '''END\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right')\n\nplt.show()","1dfbeec1":"fig = plt.figure(figsize = (15, 15))\n\nplt.subplot(211)\nsns.set_style(\"white\")\nplt.title('Benzene', size = 25, y = 1.06, fontname = 'monospace', color = '#1e1f26')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.kdeplot(train['target_benzene'], color = '#b7b8b6', shade = True, label = 'Benzene', alpha = 0.8, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nfor j in ['right', 'left', 'top']:\n    a.spines[j].set_visible(False)\na.spines['bottom'].set_linewidth(1.1)\n\nplt.subplot(212)\nb = sns.lineplot(x = \"date_time\", y = \"target_benzene\", data = train, color = '#b7b8b6', linewidth = 0.5)\nplt.ylabel('benzene level', size = 14, fontname = 'monospace')\nplt.xlabel('train date time', size = 14, fontname = 'monospace', labelpad = 10)\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.16, 0.08, '''START\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace')\n\nplt.figtext(0.87, 0.08, '''END\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right')\n\nplt.show()","161a4b99":"fig = plt.figure(figsize = (15, 15))\n\nplt.subplot(211)\nsns.set_style(\"white\")\nplt.title('Nitrogen oxides', size = 25, y = 1.06, fontname = 'monospace', color = '#1e1f26')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.kdeplot(train['target_nitrogen_oxides'], color = '#34675c', shade = True, label = 'Nitrogen oxides', alpha = 0.8, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nfor j in ['right', 'left', 'top']:\n    a.spines[j].set_visible(False)\na.spines['bottom'].set_linewidth(1.1)\n\nplt.subplot(212)\nb = sns.lineplot(x = \"date_time\", y = \"target_nitrogen_oxides\", data = train, color = '#34675c', linewidth = 0.5)\nplt.ylabel('nitrogen oxides level', size = 14, fontname = 'monospace')\nplt.xlabel('train date time', size = 14, fontname = 'monospace', labelpad = 10)\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.16, 0.08, '''START\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace')\n\nplt.figtext(0.87, 0.08, '''END\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right')\n\nplt.show()","4f53c4a8":"fig = plt.figure(figsize = (15, 18))\n\nplt.subplot(421)\nsns.set_style(\"white\")\nplt.title('Degree C\u00b0', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.kdeplot(train['deg_C'], color = '#b7b8b6', shade = True, label = 'TRAIN', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nsns.kdeplot(test['deg_C'], color = '#34675c', shade = True, label = 'TEST', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\nplt.legend(['TRAIN', 'TEST'], bbox_to_anchor = (1.28, 1.2), ncol = 1, borderpad = 3, frameon = False, fontsize = 11)\n\nplt.subplot(422)\nsns.set_style(\"white\")\nplt.title('Relative humidity', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.kdeplot(train['relative_humidity'], color = '#b7b8b6', shade = True, label = 'TRAIN', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nsns.kdeplot(test['relative_humidity'], color = '#34675c', shade = True, label = 'TEST', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(423)\nsns.set_style(\"white\")\nplt.title('Absolute humidity', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nc = sns.kdeplot(train['absolute_humidity'], color = '#b7b8b6', shade = True, label = 'TRAIN', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nsns.kdeplot(test['absolute_humidity'], color = '#34675c', shade = True, label = 'TEST', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(424)\nsns.set_style(\"white\")\nplt.title('Sensor 1', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nd = sns.kdeplot(train['sensor_1'], color = '#b7b8b6', shade = True, label = 'TRAIN', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nsns.kdeplot(test['sensor_1'], color = '#34675c', shade = True, label = 'TEST', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(425)\nsns.set_style(\"white\")\nplt.title('Sensor 2', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\ne = sns.kdeplot(train['sensor_2'], color = '#b7b8b6', shade = True, label = 'TRAIN', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nsns.kdeplot(test['sensor_2'], color = '#34675c', shade = True, label = 'TEST', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(426)\nsns.set_style(\"white\")\nplt.title('Sensor 3', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nf = sns.kdeplot(train['sensor_3'], color = '#b7b8b6', shade = True, label = 'TRAIN', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nsns.kdeplot(test['sensor_3'], color = '#34675c', shade = True, label = 'TEST', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(427)\nsns.set_style(\"white\")\nplt.title('Sensor 4', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\ng = sns.kdeplot(train['sensor_4'], color = '#b7b8b6', shade = True, label = 'TRAIN', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nsns.kdeplot(test['sensor_4'], color = '#34675c', shade = True, label = 'TEST', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(428)\nsns.set_style(\"white\")\nplt.title('Sensor 5', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nh = sns.kdeplot(train['sensor_5'], color = '#b7b8b6', shade = True, label = 'TRAIN', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nsns.kdeplot(test['sensor_5'], color = '#34675c', shade = True, label = 'TEST', alpha = 0.7, linewidth = 1, edgecolor = 'black')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nfor i in [a,b,c,d,e,f,g,h]:\n    for j in ['right', 'left', 'top']:\n        i.spines[j].set_visible(False)\n        i.spines['bottom'].set_linewidth(1.5)\n        \nfig.tight_layout(h_pad = 3)\n\nplt.show()","d0bbd305":"fig = plt.figure(figsize = (15, 45))\n\n####################\n#######################  1\n####################\n\nplt.subplot(811)\nplt.title('Degree C\u00b0', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"deg_C\", data = train, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"deg_C\", data = test, color = '#34675c', linewidth = 0.5)\nplt.ylabel('degree C\u00b0 level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.09, 0.881, '''START TRAIN\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace', color = '#b7b8b6')\n\nplt.figtext(0.74, 0.881, '''END TRAIN\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#b7b8b6')\n\nplt.figtext(0.745, 0.881, '''START TEST\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', color = '#34675c')\n\nplt.figtext(0.95, 0.881, '''END TEST\n2011-04-04\n14:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#34675c')\n\n####################\n#######################  2\n####################\n\nplt.subplot(812)\nplt.title('Relative humidity', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"relative_humidity\", data = train, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"relative_humidity\", data = test, color = '#34675c', linewidth = 0.5)\nplt.ylabel('relative humidity level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.09, 0.754, '''START TRAIN\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace', color = '#b7b8b6')\n\nplt.figtext(0.74, 0.754, '''END TRAIN\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#b7b8b6')\n\nplt.figtext(0.745, 0.754, '''START TEST\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', color = '#34675c')\n\nplt.figtext(0.95, 0.754, '''END TEST\n2011-04-04\n14:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#34675c')\n\n####################\n#######################  3\n####################\n\nplt.subplot(813)\nplt.title('Absolute humidity', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"absolute_humidity\", data = train, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"absolute_humidity\", data = test, color = '#34675c', linewidth = 0.5)\nplt.ylabel('absolute humidity level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.09, 0.627, '''START TRAIN\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace', color = '#b7b8b6')\n\nplt.figtext(0.74, 0.627, '''END TRAIN\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#b7b8b6')\n\nplt.figtext(0.745, 0.627, '''START TEST\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', color = '#34675c')\n\nplt.figtext(0.95, 0.627, '''END TEST\n2011-04-04\n14:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#34675c')\n\n####################\n#######################  4\n####################\n\nplt.subplot(814)\nplt.title('Sensor 1', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"sensor_1\", data = train, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"sensor_1\", data = test, color = '#34675c', linewidth = 0.5)\nplt.ylabel('sensor 1 level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.09, 0.5, '''START TRAIN\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace', color = '#b7b8b6')\n\nplt.figtext(0.74, 0.5, '''END TRAIN\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#b7b8b6')\n\nplt.figtext(0.745, 0.5, '''START TEST\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', color = '#34675c')\n\nplt.figtext(0.95, 0.5, '''END TEST\n2011-04-04\n14:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#34675c')\n\n####################\n#######################  5\n####################\n\nplt.subplot(815)\nplt.title('Sensor 2', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"sensor_2\", data = train, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"sensor_2\", data = test, color = '#34675c', linewidth = 0.5)\nplt.ylabel('sensor 2 level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.09, 0.373, '''START TRAIN\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace', color = '#b7b8b6')\n\nplt.figtext(0.74, 0.373, '''END TRAIN\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#b7b8b6')\n\nplt.figtext(0.745, 0.373, '''START TEST\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', color = '#34675c')\n\nplt.figtext(0.95, 0.373, '''END TEST\n2011-04-04\n14:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#34675c')\n\n####################\n#######################  6\n####################\n\nplt.subplot(816)\nplt.title('Sensor 3', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"sensor_3\", data = train, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"sensor_3\", data = test, color = '#34675c', linewidth = 0.5)\nplt.ylabel('sensor 3 level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.09, 0.246, '''START TRAIN\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace', color = '#b7b8b6')\n\nplt.figtext(0.74, 0.246, '''END TRAIN\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#b7b8b6')\n\nplt.figtext(0.745, 0.246, '''START TEST\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', color = '#34675c')\n\nplt.figtext(0.95, 0.246, '''END TEST\n2011-04-04\n14:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#34675c')\n\n####################\n#######################  7\n####################\n\nplt.subplot(817)\nplt.title('Sensor 4', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"sensor_4\", data = train, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"sensor_4\", data = test, color = '#34675c', linewidth = 0.5)\nplt.ylabel('sensor 4 level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.09, 0.12, '''START TRAIN\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace', color = '#b7b8b6')\n\nplt.figtext(0.74, 0.12, '''END TRAIN\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#b7b8b6')\n\nplt.figtext(0.745, 0.12, '''START TEST\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', color = '#34675c')\n\nplt.figtext(0.95, 0.12, '''END TEST\n2011-04-04\n14:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#34675c')\n\n####################\n#######################  8\n####################\n\nplt.subplot(818)\nplt.title('Sensor 5', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"sensor_5\", data = train, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"sensor_5\", data = test, color = '#34675c', linewidth = 0.5)\nplt.ylabel('sensor 5 level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.09, -0.007, '''START TRAIN\n2010-03-10\n18:00:00''', fontsize = 11, fontname = 'monospace', color = '#b7b8b6')\n\nplt.figtext(0.74, -0.007, '''END TRAIN\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#b7b8b6')\n\nplt.figtext(0.745, -0.007, '''START TEST\n2011-01-01\n00:00:00''', fontsize = 11, fontname = 'monospace', color = '#34675c')\n\nplt.figtext(0.95, -0.007, '''END TEST\n2011-04-04\n14:00:00''', fontsize = 11, fontname = 'monospace', ha = 'right', color = '#34675c')\n\nfig.tight_layout(h_pad = 7)\n\nplt.show()","7f6cf6cc":"m_carbon = train.groupby('day_of_week').agg({'target_carbon_monoxide': 'mean'}).reset_index()\nm_carbon = m_carbon.iloc[1:,]\n\nm_benzene = train.groupby('day_of_week').agg({'target_benzene': 'mean'}).reset_index()\nm_benzene = m_benzene.iloc[1:,]\n\nm_nitrogen = train.groupby('day_of_week').agg({'target_nitrogen_oxides': 'mean'}).reset_index()\nm_nitrogen = m_nitrogen.iloc[1:,]\n\nfig = plt.figure(figsize = (15, 13))\n\nplt.subplot(311)\nsns.set_style(\"white\")\nplt.title('Carbon monoxide', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.lineplot(data = m_carbon, x = 'day_of_week', y = 'target_carbon_monoxide', color = '#4cb5f5', linewidth = 3)\nsns.scatterplot(data = m_carbon, x = 'day_of_week', y = 'target_carbon_monoxide', color = '#4cb5f5', s = 60)\nplt.xticks(fontname = 'monospace')\nplt.yticks(fontname = 'monospace')\nplt.ylabel('')\nplt.xlabel('')\n\n\nplt.subplot(312)\nplt.title('Benzene', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(data = m_benzene, x = 'day_of_week', y = 'target_benzene', color = '#b7b8b6', linewidth = 3)\nsns.scatterplot(data = m_benzene, x = 'day_of_week', y = 'target_benzene', color = '#b7b8b6', s = 60)\nplt.xticks(fontname = 'monospace')\nplt.yticks(fontname = 'monospace')\nplt.ylabel('')\nplt.xlabel('')\n\nplt.subplot(313)\nplt.title('Nitrogen oxides', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nc = sns.lineplot(data = m_nitrogen, x = 'day_of_week', y = 'target_nitrogen_oxides', color = '#34675c', linewidth = 3)\nsns.scatterplot(data = m_nitrogen, x = 'day_of_week', y = 'target_nitrogen_oxides', color = '#34675c', s = 60)\nplt.xticks(fontname = 'monospace')\nplt.yticks(fontname = 'monospace')\nplt.ylabel('')\nplt.xlabel('')\n\nfor i in [a,b,c]:\n    for j in ['right', 'top']:\n        i.spines[j].set_visible(False)\n    for k in ['left', 'bottom']:\n        i.spines[k].set_linewidth(1.5)\n        \nfor i in [a,b,c]:\n    i.tick_params(labelsize = 11)\n    \nplt.figtext(0.2, 1.05, 'Changes of target values mean by day of week', fontsize = 30, fontname = 'monospace')\n    \nfig.tight_layout(h_pad = 5)\n\nplt.show()","87394e3d":"h_carbon = train.groupby('hour').agg({'target_carbon_monoxide': 'mean'}).reset_index()\nh_benzene = train.groupby('hour').agg({'target_benzene': 'mean'}).reset_index()\nh_nitrogen = train.groupby('hour').agg({'target_nitrogen_oxides': 'mean'}).reset_index()\n\nfig = plt.figure(figsize = (15, 13))\n\nplt.subplot(311)\nsns.set_style(\"white\")\nplt.title('Carbon monoxide', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.lineplot(data = h_carbon, x = 'hour', y = 'target_carbon_monoxide', color = '#4cb5f5', linewidth = 3)\nsns.scatterplot(data = h_carbon, x = 'hour', y = 'target_carbon_monoxide', color = '#4cb5f5', s = 60)\nplt.xticks(range(0,24,1), fontname = 'monospace')\nplt.yticks(fontname = 'monospace')\nplt.ylabel('')\nplt.xlabel('')\n\n\nplt.subplot(312)\nplt.title('Benzene', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(data = h_benzene, x = 'hour', y = 'target_benzene', color = '#b7b8b6', linewidth = 3)\nsns.scatterplot(data = h_benzene, x = 'hour', y = 'target_benzene', color = '#b7b8b6', s = 60)\nplt.xticks(range(0,24,1), fontname = 'monospace')\nplt.yticks(fontname = 'monospace')\nplt.ylabel('')\nplt.xlabel('')\n\nplt.subplot(313)\nplt.title('Nitrogen oxides', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nc = sns.lineplot(data = h_nitrogen, x = 'hour', y = 'target_nitrogen_oxides', color = '#34675c', linewidth = 3)\nsns.scatterplot(data = h_nitrogen, x = 'hour', y = 'target_nitrogen_oxides', color = '#34675c', s = 60)\nplt.xticks(range(0,24,1), fontname = 'monospace')\nplt.yticks(fontname = 'monospace')\nplt.ylabel('')\nplt.xlabel('')\n\nfor i in [a,b,c]:\n    for j in ['right', 'top']:\n        i.spines[j].set_visible(False)\n    for k in ['left', 'bottom']:\n        i.spines[k].set_linewidth(1.5)\n        \nfor i in [a,b,c]:\n    i.tick_params(labelsize = 11)\n    \nplt.figtext(0.17, 1.05, 'Changes of target values mean by hour', fontsize = 30, fontname = 'monospace')\n    \nfig.tight_layout(h_pad = 5)\n\nplt.show()\n\nfor i in [train, test]:\n    i.drop(['hour'], axis = 1, inplace = True)","1aa8877d":"matrix = np.triu(train.corr())\nplt.figure(figsize = (12, 10))\nsns.heatmap(train.corr(), annot = False, cmap = 'Blues', fmt=\".2f\", mask = matrix, vmin = -1, vmax = 1, linewidths = 0.1, linecolor = 'white', cbar = False)\nplt.xticks(size = 8, fontname = 'monospace')\nplt.yticks(size = 8, fontname = 'monospace')\nplt.figtext(0.88, 0.76, '''Correlation\nmap''', fontsize = 40, fontname = 'monospace', ha = 'right', color = '#4897d8')\nplt.show()","257f70d5":"for i in ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']:\n    train[i] = np.log1p(train[i])\n\ny1 = train['target_carbon_monoxide']\ny2 = train['target_benzene']\ny3 = train['target_nitrogen_oxides']\n\nX = train.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis = 1)\nX['date_time'] = X['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9\ntest['date_time'] = test['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9","42da57f7":"fig = plt.figure(figsize = (16, 7))\n\nplt.subplot(131)\nsns.set_style(\"white\")\nplt.title('Carbon monoxide', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.distplot(y1, color = '#4cb5f5')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(132)\nsns.set_style(\"white\")\nplt.title('Benzene', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.distplot(y2, color = '#b7b8b6')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(133)\nsns.set_style(\"white\")\nplt.title('Nitrogen oxides', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nc = sns.distplot(y3, color = '#34675c')\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nfor i in [a,b,c]:\n    for j in ['right', 'left', 'top']:\n        i.spines[j].set_visible(False)\n        i.spines['bottom'].set_linewidth(1.5)\n        \nplt.figtext(0.3, 1.05, 'Logarithm of the target values', fontsize = 30, fontname = 'monospace')\n\nplt.show()","c1926c54":"# Optuna parameters for each target (I change here only targets)\n\ndef objective(trial, data = X, target = y3):\n\n    params = {\n        'max_depth': trial.suggest_int('max_depth', 2, 8),\n        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.2),\n        'n_estimators': trial.suggest_int('n_estimators', 5000, 30000),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1, 200),\n        'gamma': trial.suggest_float('gamma', 0.0001, 1.0, log = True),\n        'alpha': trial.suggest_float('alpha', 0.0001, 10.0, log = True),\n        'lambda': trial.suggest_float('lambda', 0.0001, 10.0, log = True),\n        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.1, 0.8),\n        'subsample': trial.suggest_float('subsample', 0.1, 0.8),\n        'tree_method': 'gpu_hist',\n        'booster': 'gbtree',\n        'random_state': 228,\n        'use_label_encoder': False,\n        'eval_metric': 'rmsle'\n    }\n    \n    model = XGBRegressor(**params)\n    scores = []\n    k = KFold(n_splits = 5, random_state = 228, shuffle = True)\n    for i, (trn_idx, val_idx) in enumerate(k.split(X)):\n        \n        X_train, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n        y_train, y_val = y3.iloc[trn_idx], y3.iloc[val_idx]\n\n        model.fit(X_train, y_train, eval_set = [(X_val, y_val)], early_stopping_rounds = 200, verbose = False)\n        \n        tr_preds = np.expm1(model.predict(X_train))\n        tr_preds[tr_preds < 0] = 0\n        tr_score = np.sqrt(mean_squared_log_error(np.expm1(y_train), tr_preds))\n        \n        val_preds = np.expm1(model.predict(X_val))\n        val_preds[val_preds < 0] = 0\n        val_score = np.sqrt(mean_squared_log_error(np.expm1(y_val), val_preds))\n\n        scores.append((tr_score, val_score))\n        \n        print(f\"Fold {i} | RMSLE: {val_score}\")\n        \n        \n    scores = pd.DataFrame(scores, columns = ['train score', 'validation score'])\n    \n    return scores['validation score'].mean()\n\nstudy = optuna.create_study(direction = 'minimize')\nstudy.optimize(objective, n_trials = 100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)\nprint('Best value:', study.best_value)","a93c1829":"# Carbon monoxide\n# Mean RMSLE on 5 Folds with Optuna - 0.099\nparamsXGB1 = {'max_depth': 3, \n              'learning_rate': 0.06974270910763652, \n              'n_estimators': 24813, \n              'min_child_weight': 15, \n              'gamma': 0.00015352935707382668, \n              'alpha': 0.007300887912196733, \n              'lambda': 0.00233147304187698, \n              'colsample_bytree': 0.6706673656091967, \n              'subsample': 0.32392556118811044,\n              'tree_method': 'gpu_hist',\n              'booster': 'gbtree',\n              'random_state': 123,\n              'use_label_encoder': False,\n              'eval_metric': 'rmsle'}\n\n# Benzene\n# Mean RMSE on 5 Folds with Optuna - 0.078\nparamsXGB2 = {'max_depth': 3, \n              'learning_rate': 0.01630350395073977, \n              'n_estimators': 20058, \n              'min_child_weight': 11, \n              'gamma': 0.0009762828881569192, \n              'alpha': 0.001235465069634119, \n              'lambda': 0.0005268383741494084, \n              'colsample_bytree': 0.5100114916691317, \n              'subsample': 0.31372256786444536,\n              'tree_method': 'gpu_hist',\n              'booster': 'gbtree',\n              'random_state': 123,\n              'use_label_encoder': False,\n              'eval_metric': 'rmsle'}\n\n# Nitrogen oxides\n# Mean RMSLE on 5 Folds with Optuna - 0.201\nparamsXGB3 = {'max_depth': 6, \n              'learning_rate': 0.07398714527058703, \n              'n_estimators': 15509, \n              'min_child_weight': 1, \n              'gamma': 0.0010264813784765508, \n              'alpha': 0.002893496668661691, \n              'lambda': 0.008742987610869259, \n              'colsample_bytree': 0.6256322009147708, \n              'subsample': 0.5955732014997671,\n              'tree_method': 'gpu_hist',\n              'booster': 'gbtree',\n              'random_state': 123,\n              'use_label_encoder': False,\n              'eval_metric': 'rmsle'}","b3e7edf1":"# I change here only targets\npredictions = np.zeros(len(test))\nlogo = LeaveOneGroupOut()\nn_splits = months.nunique()\nfor fold, (trn_idx, val_idx) in enumerate(logo.split(X, y1, months)):\n    \n    X_train, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n    y_train, y_val = y1.iloc[trn_idx], y1.iloc[val_idx]\n\n    model = XGBRegressor(**paramsXGB1)\n   \n    model.fit(X_train, y_train, eval_set = [(X_val, y_val)], eval_metric = 'rmsle', verbose = False, early_stopping_rounds = 200)\n    \n    predictions += model.predict(test) \/ n_splits \n    \nss['target_carbon_monoxide'] = np.expm1(predictions)","34c6c068":"ss.to_csv('xgb.csv', index=False)","a908111b":"for i in ['day_of_week', 'max_hours', 'working_hours', 'is_weekend']:\n    X[i] = X[i].astype('category')\n    test[i] = test[i].astype('category')","101c3d8d":"# Optuna parameters for each target (I change here only targets)\n\ndef objective(trial, data = X, target = y1):\n\n    params = {\n        'reg_alpha': trial.suggest_float('reg_alpha', 0.001, 10.0),\n        'reg_lambda': trial.suggest_float('reg_lambda', 0.001, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 10, 500),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n        'max_depth': trial.suggest_int('max_depth', 2, 6),\n        'n_estimators': trial.suggest_int('n_estimators', 5000, 30000),\n        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.2),\n        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.1, 0.6),\n        'cat_smooth' : trial.suggest_int('cat_smooth', 10, 100),\n        'cat_l2': trial.suggest_int('cat_l2', 1, 20),\n        'min_data_per_group': trial.suggest_int('min_data_per_group', 1, 200),\n        'cat_feature': ['day_of_week', 'max_hours', 'working_hours', 'is_weekend'],\n        'device_type': 'gpu',\n        'boosting_type': 'gbdt',\n        'random_state': 228,\n        'metric': 'rmse'\n    }\n    \n    model = LGBMRegressor(**params)\n    scores = []\n    k = KFold(n_splits = 5, random_state = 228, shuffle = True)\n    for i, (trn_idx, val_idx) in enumerate(k.split(X)):\n        \n        X_train, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n        y_train, y_val = y1.iloc[trn_idx], y1.iloc[val_idx]\n\n        model.fit(X_train, y_train, eval_set = [(X_val, y_val)], early_stopping_rounds = 200, verbose = False)\n        \n        tr_preds = np.expm1(model.predict(X_train))\n        tr_preds[tr_preds < 0] = 0\n        tr_score = np.sqrt(mean_squared_log_error(np.expm1(y_train), tr_preds))\n        \n        val_preds = np.expm1(model.predict(X_val))\n        val_preds[val_preds < 0] = 0\n        val_score = np.sqrt(mean_squared_log_error(np.expm1(y_val), val_preds))\n\n        scores.append((tr_score, val_score))\n        \n        print(f\"Fold {i} | RMSLE: {val_score}\")\n        \n        \n    scores = pd.DataFrame(scores, columns = ['train score', 'validation score'])\n    \n    return scores['validation score'].mean()\n\nstudy = optuna.create_study(direction = 'minimize')\nstudy.optimize(objective, n_trials = 100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)\nprint('Best value:', study.best_value)","b0e6c192":"# Carbon monoxide\n# Mean RMSLE on 5 Folds with Optuna - 0.093\nparamsLGBM1 = {'reg_alpha': 0.15427250456095098, \n               'reg_lambda': 3.5336982866924536, \n               'num_leaves': 316, \n               'min_child_samples': 11,\n               'max_depth': 6, \n               'n_estimators': 8261, \n               'learning_rate': 0.012655980151740909, \n               'colsample_bytree': 0.57088321168468, \n               'cat_smooth': 73, \n               'cat_l2': 14, \n               'min_data_per_group': 145,\n               'cat_feature': ['day_of_week', 'max_hours', 'working_hours', 'is_weekend'],\n               'device_type': 'gpu',\n               'boosting_type': 'gbdt',\n               'random_state': 228,\n               'metric': 'rmse'}\n\n# Benzene\n# Mean RMSE on 5 Folds with Optuna - 0.078\nparamsLGBM2 = {'reg_alpha': 0.20068505646131332, \n               'reg_lambda': 8.4922551227129, \n               'num_leaves': 363, \n               'min_child_samples': 20, \n               'max_depth': 3, \n               'n_estimators': 11088, \n               'learning_rate': 0.010393056328793684, \n               'colsample_bytree': 0.4742585430027215, \n               'cat_smooth': 96, \n               'cat_l2': 6, \n               'min_data_per_group': 27,\n               'cat_feature': ['day_of_week', 'max_hours', 'working_hours', 'is_weekend'],\n               'device_type': 'gpu',\n               'boosting_type': 'gbdt',\n               'random_state': 228,\n               'metric': 'rmse'}\n\n# Nitrogen oxides\n# Mean RMSLE on 5 Folds with Optuna - 0.195\nparamsLGBM3 = {'reg_alpha': 0.35252677348886996, \n               'reg_lambda': 2.474116211604083, \n               'num_leaves': 322, \n               'min_child_samples': 5, \n               'max_depth': 5, \n               'n_estimators': 24463, \n               'learning_rate': 0.020175434042643575, \n               'colsample_bytree': 0.46226355546207754, \n               'cat_smooth': 37, \n               'cat_l2': 8, \n               'min_data_per_group': 159,\n               'cat_feature': ['day_of_week', 'max_hours', 'working_hours', 'is_weekend'],\n               'device_type': 'gpu',\n               'boosting_type': 'gbdt',\n               'random_state': 228,\n               'metric': 'rmse'}","71fd1205":"# I change here only targets\npredictions = np.zeros(len(test))\nfor fold, (trn_idx, val_idx) in enumerate(logo.split(X, y1, months)):\n    \n    X_train, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n    y_train, y_val = y1.iloc[trn_idx], y1.iloc[val_idx]\n\n    model = LGBMRegressor(**paramsLGBM1)\n   \n    model.fit(X_train, y_train, eval_set = [(X_val, y_val)], eval_metric = 'rmse', verbose = False, early_stopping_rounds = 200)\n    \n    predictions += model.predict(test) \/ n_splits\n    \nss['target_carbon_monoxide'] = np.expm1(predictions)","48d869a6":"ss.to_csv('lgbm.csv', index=False)","e6f49538":"# Optuna parameters for each target (I change here only targets)\ndef objective(trial, data = X, target = y3):\n    params = {\n        'depth': trial.suggest_int('depth', 2, 6),\n        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.2),\n        'iterations': trial.suggest_int('iterations', 5000, 30000),\n        'max_bin': trial.suggest_int('max_bin', 1, 300),\n        'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 1, 300),\n        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 0.0001, 1.0, log = True),\n        'bagging_temperature': trial.suggest_float('bagging_temperature', 0.1, 10.0),\n        'subsample': trial.suggest_float('subsample', 0.1, 0.8),\n        'grow_policy': trial.suggest_categorical('grow_policy', ['SymmetricTree', 'Depthwise', 'Lossguide']),\n        'leaf_estimation_method': trial.suggest_categorical('leaf_estimation_method', ['Newton', 'Gradient']),\n        'cat_features': ['day_of_week', 'max_hours', 'working_hours', 'is_weekend'],\n        'random_seed': 228,\n        'loss_function': 'RMSE',\n        'eval_metric': 'RMSE'\n    }\n    \n    model = CatBoostRegressor(**params)\n    scores = []\n    k = KFold(n_splits = 5, random_state = 228, shuffle = True)\n    for i, (trn_idx, val_idx) in enumerate(k.split(X)):\n        \n        X_train, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n        y_train, y_val = y3.iloc[trn_idx], y3.iloc[val_idx]\n\n        model.fit(X_train, y_train, eval_set = [(X_val, y_val)], early_stopping_rounds = 200, verbose = False, use_best_model = True)\n        \n        tr_preds = np.expm1(model.predict(X_train))\n        tr_preds[tr_preds < 0] = 0\n        tr_score = np.sqrt(mean_squared_log_error(np.expm1(y_train), tr_preds))\n        \n        val_preds = np.expm1(model.predict(X_val))\n        val_preds[val_preds < 0] = 0\n        val_score = np.sqrt(mean_squared_log_error(np.expm1(y_val), val_preds))\n\n        scores.append((tr_score, val_score))\n        \n        print(f\"Fold {i} | RMSLE: {val_score}\")\n        \n        \n    scores = pd.DataFrame(scores, columns = ['train score', 'validation score'])\n    \n    return scores['validation score'].mean()\n\nstudy = optuna.create_study(direction = 'minimize')\nstudy.optimize(objective, n_trials = 100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)\nprint('Best value:', study.best_value)","2faa7e04":"# Carbon monoxide\n# Mean RMSLE on 5 Folds with Optuna - 0.091\nparamsCB1 = {'depth': 5, \n             'learning_rate': 0.010965529849139899, \n             'iterations': 14648, \n             'max_bin': 254, \n             'min_data_in_leaf': 200, \n             'l2_leaf_reg': 0.06534721701106948, \n             'bagging_temperature': 9.204797744803724, \n             'subsample': 0.49288891655151623, \n             'grow_policy': 'SymmetricTree', \n             'leaf_estimation_method': 'Newton',\n             'random_seed': 228,\n             'loss_function': 'RMSE',\n             'eval_metric': 'RMSE',\n             'cat_features': ['day_of_week', 'max_hours', 'working_hours', 'is_weekend']}\n\n# Benzene\n# Mean RMSLE on 5 Folds with Optuna - 0.077\nparamsCB2 = {'depth': 3, \n             'learning_rate': 0.014982832523377104, \n             'iterations': 12631, \n             'max_bin': 127, \n             'min_data_in_leaf': 198,\n             'l2_leaf_reg': 0.03581505752474062, \n             'bagging_temperature': 7.849773202956249, \n             'subsample': 0.5267753257701031, \n             'grow_policy': 'SymmetricTree', \n             'leaf_estimation_method': 'Gradient',\n             'loss_function': 'RMSE',\n             'eval_metric': 'RMSE',\n             'cat_features': ['day_of_week', 'max_hours', 'working_hours', 'is_weekend']}\n\n# Nitrogen oxides\n# Mean RMSLE on 5 Folds with Optuna - 0.196\nparamsCB3 = {'depth': 4, \n             'learning_rate': 0.01584329468703163, \n             'iterations': 25893, \n             'max_bin': 155, \n             'min_data_in_leaf': 283, \n             'l2_leaf_reg': 0.007844089667882592, \n             'bagging_temperature': 4.004631998790942, \n             'subsample': 0.7778197035482992, \n             'grow_policy': 'SymmetricTree',\n             'leaf_estimation_method': 'Gradient',\n             'random_seed': 228,\n             'loss_function': 'RMSE',\n             'eval_metric': 'RMSE',\n             'cat_features': ['day_of_week', 'max_hours', 'working_hours', 'is_weekend']}","0ee42656":"predictions = np.zeros(len(test))\nlogo = LeaveOneGroupOut()\nn_splits = months.nunique()\nfor fold, (trn_idx, val_idx) in enumerate(logo.split(X, y3, months)):\n    \n    X_train, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n    y_train, y_val = y3.iloc[trn_idx], y3.iloc[val_idx]\n\n    model = CatBoostRegressor(**paramsCB3)\n   \n    model.fit(X_train, y_train, eval_set = [(X_val, y_val)], verbose = False, early_stopping_rounds = 200, use_best_model = True)\n    \n    predictions += model.predict(test) \/ n_splits\n    \nss['target_nitrogen_oxides'] = np.expm1(predictions)","e9cac8d2":"ss.to_csv('cb.csv', index=False)","6415e219":"train_v = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\nfig = plt.figure(figsize = (15, 18))\n\nplt.subplot(311)\nplt.title('Carbon monoxide', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.lineplot(x = \"date_time\", y = \"target_carbon_monoxide\", data = train_v, color = '#4cb5f5', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"target_carbon_monoxide\", data = ss, color = '#1e434c', linewidth = 0.5)\nplt.ylabel('carbon moxide level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    a.spines[j].set_visible(False)\na.spines['bottom'].set_linewidth(1.3)\na.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.42, 0.675, 'train', fontsize = 13, fontname = 'monospace', color = '#4cb5f5')\nplt.figtext(0.8, 0.675, 'predictions', fontsize = 13, fontname = 'monospace', color = '#1e434c')\n\nplt.subplot(312)\nplt.title('Benzene', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"target_benzene\", data = train_v, color = '#b7b8b6', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"target_benzene\", data = ss, color = '#1e434c', linewidth = 0.5)\nplt.ylabel('benzene level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.42, 0.335, 'train', fontsize = 13, fontname = 'monospace', color = '#b7b8b6')\nplt.figtext(0.8, 0.335, 'predictions', fontsize = 13, fontname = 'monospace', color = '#1e434c')\n\nplt.subplot(313)\nplt.title('Nitrogen oxides', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'y', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.lineplot(x = \"date_time\", y = \"target_nitrogen_oxides\", data = train_v, color = '#34675c', linewidth = 0.5)\nsns.lineplot(x = \"date_time\", y = \"target_nitrogen_oxides\", data = ss, color = '#1e434c', linewidth = 0.5)\nplt.ylabel('nitrogen oxides level', size = 14, fontname = 'monospace')\nplt.xlabel('')\nplt.xticks([])\nplt.yticks(size = 12, fontname = 'monospace')\n\nfor j in ['right', 'top']:\n    b.spines[j].set_visible(False)\nb.spines['bottom'].set_linewidth(1.3)\nb.spines['left'].set_linewidth(1.3)\n\nplt.figtext(0.41, -0.005, 'train', fontsize = 13, fontname = 'monospace', color = '#34675c')\nplt.figtext(0.8, -0.005, 'predictions', fontsize = 13, fontname = 'monospace', color = '#1e434c')\n\nfig.tight_layout(h_pad = 5)\n\nplt.show()","d8c4ad3a":"**Result - 0.19910**","8834ec4d":"**Dynamics of feature changes**","09c8559c":"This is my first experience working with time series, and I can say with full confidence that the results of building time series models depend very much on data preprocessing. If you add a few new features here or remove them, the results may worsen up to 0.25, from which I could not crawl out for a very long time until I found out about lags.","d14261cb":"# CatBoost","575ef3e2":"**As we have regression task, we should take the logarithm of target values for the most linear relationship.**","00628cc0":"# Basic information","87a3f1d2":"# Preprocessing for modeling","d746e56e":"**Changes of target values mean by month\/day\/hour**","a72a53b6":"# XGB","f6c8e083":"**Result - 0.20204**","6f0fe5f1":"# LGBM","483b0b1f":"**Target values**","152e4669":"# EDA","b1661dac":"**Distribution of features in train and test data**","93c0f9f1":"# Conclusion","f0c8a09f":"# Visualizing CatBoost predictions","7811dd5d":"**Result - 0.19584**","a5fbabe6":"Nice, there are no NA values, 8 float features and 3 target values.","fce2b8d4":"# New features","77c921d0":"**Correlation**"}}