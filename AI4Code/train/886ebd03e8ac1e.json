{"cell_type":{"68be156d":"code","1757e9ac":"code","9a07b983":"code","fc701c83":"code","6c754466":"code","b40287e9":"code","61ca9cfc":"code","6b576343":"code","23fe2595":"code","f193ae39":"code","abee017d":"code","40226cef":"code","9b5beba5":"code","fb9b152f":"code","a5fc20c3":"code","02d42337":"code","d2f815c4":"code","89b872c2":"code","a6f9cfc4":"code","462346a9":"code","5c76fd3b":"code","70bf40ab":"code","b106761c":"code","15e495f8":"markdown","7322bce9":"markdown"},"source":{"68be156d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1757e9ac":"df=pd.read_csv('\/kaggle\/input\/telecom-churn-datasets\/churn-bigml-80.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/telecom-churn-datasets\/churn-bigml-20.csv')","9a07b983":"df.info()#Told us it contains 20 col and 2666 rows and zero missing value","fc701c83":"df.describe()","6c754466":"correlations = df.corr()\ncorrelations","b40287e9":"\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.heatmap(correlations)\nplt.show()","61ca9cfc":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\n#Removing correlated and unneccessary columns\ncol_to_drop = ['State', 'Area code', 'Total day charge', 'Total eve charge', \n               'Total night charge', 'Total intl charge']\n   \ndf = df.drop(columns = col_to_drop, axis = 1)\ndf_test = df_test.drop(columns = col_to_drop, axis = 1)\n\n#target column\ntarget_col = [\"Churn\"]\n\n#number of levels in feature to be a categorical feature\nnlevels = 6\n\n#Separating categorical and numerical columns\n#categorical columns\ncat_cols = list(set(df.nunique()[df.nunique()<nlevels].keys().tolist() \n                    + df.select_dtypes(include='object').columns.tolist()))\ncat_cols = [x for x in cat_cols if x not in target_col]\n#numerical columns\nnum_cols = [x for x in df.columns if x not in cat_cols + target_col]\n#Binary columns with 2 values\nbin_cols = df.nunique()[df.nunique() == 2].keys().tolist()\n#Columns more than 2 values\nmulti_cols = [i for i in cat_cols if i not in bin_cols]\n\n#Label encoding Binary columns\nle = LabelEncoder()\nfor i in bin_cols:\n    df[i] = le.fit_transform(df[i])\n    df_test[i] = le.transform(df_test[i])\n\n#combining the train and test datasets\ntrainsize = df.shape[0]\ncomb = pd.concat((df, df_test), sort=False)\n\n#Duplicating columns for multi value columns\ncomb = pd.get_dummies(data = comb, columns = multi_cols)\n\n#Separating the train and test datasets\ndf = comb[:trainsize]\ndf_test = comb[trainsize:]\n\n#Scaling Numerical columns\nstd = StandardScaler()\nscaled = std.fit_transform(df[num_cols])\nscaled = pd.DataFrame(scaled, columns=num_cols)\n\nscaled_test = std.transform(df_test[num_cols])\nscaled_test = pd.DataFrame(scaled_test, columns=num_cols)\n\n#dropping original values merging scaled values for numerical columns\ndf_telcom_og = df.copy()\ndf = df.drop(columns = num_cols, axis = 1)\ndf = df.merge(scaled, left_index=True, right_index=True, how = \"left\")\n\ndf_telcom_test_og = df_test.copy()\ndf_test = df_test.drop(columns = num_cols, axis = 1)\ndf_test = df_test.merge(scaled_test, left_index=True, right_index=True, how = \"left\")","6b576343":"#Importing libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom math import * # module math\nimport matplotlib.pyplot as plt # visualization\nfrom PIL import Image\nimport seaborn as sns # visualization\nimport itertools\nimport io\nimport plotly.offline as py # visualization\npy.init_notebook_mode(connected=True) # visualization\nimport plotly.graph_objs as go # visualization\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff # visualization\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n%matplotlib inline","23fe2595":"summary = (df_telcom_og[[i for i in df_telcom_og.columns]].\n           describe().transpose().reset_index())\n\nsummary = summary.rename(columns = {\"index\" : \"feature\"})\nsummary = np.around(summary,3)\n\nval_lst = [summary['feature'], summary['count'],\n           summary['mean'],summary['std'],\n           summary['min'], summary['25%'],\n           summary['50%'], summary['75%'], summary['max']]\n\ntrace  = go.Table(header = dict(values = summary.columns.tolist(),\n                                line = dict(color = ['#506784']),\n                                fill = dict(color = ['#119DFF']),\n                               ),\n                  cells  = dict(values = val_lst,\n                                line = dict(color = ['#506784']),\n                                fill = dict(color = [\"lightgrey\",'#F5F8FF'])\n                               ),\n                  columnwidth = [200,60,100,100,60,60,80,80,80])\nlayout = go.Layout(dict(title = \"Training variable Summary\"))\nfigure = go.Figure(data=[trace],layout=layout)\npy.iplot(figure)","f193ae39":"#correlation\ncorrelation = df.corr()\n#tick labels\nmatrix_cols = correlation.columns.tolist()\n#convert to array\ncorr_array = np.array(correlation)\n\n#Plotting\ntrace = go.Heatmap(z = corr_array,\n                   x = matrix_cols,\n                   y = matrix_cols,\n                   colorscale = \"Viridis\",\n                   colorbar = dict(title = \"Pearson Correlation coefficients\", titleside = \"right\"),\n                  )\nlayout = go.Layout(dict(title = \"Correlation matrix\",\n                        autosize = False,\n                        height = 720,\n                        width = 800,\n                        margin = dict(r = 0, l = 210, t = 25, b = 210),\n                        yaxis = dict(tickfont = dict(size = 9)),\n                        xaxis = dict(tickfont = dict(size = 9))\n                       )\n                  )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","abee017d":"def pca_scatter(pcadf, targetfeature, targetlabel, color):\n    tracer = go.Scatter(x = pcadf[pcadf[targetfeature]==targetlabel][\"PC1\"],\n                        y = pcadf[pcadf[targetfeature]==targetlabel][\"PC2\"],\n                        name = targetlabel, mode = \"markers\",\n                        marker = dict(color = color, line = dict(width = .5), symbol = \"diamond-open\"),\n                       )\n    return tracer","40226cef":"from sklearn.decomposition import PCA\n\npca = PCA(n_components = 2)\n\nX = df[[i for i in df.columns if i not in target_col]]\nY = df[target_col]\n\nprincipal_components = pca.fit_transform(X)\npca_data = pd.DataFrame(principal_components, columns = [\"PC1\", \"PC2\"])\npca_data = pca_data.merge(Y, left_index=True, right_index=True, how=\"left\")\npca_data[\"Churn\"] = pca_data[\"Churn\"].replace({1: \"Churn\", 0: \"Not churn\"})\n\nlayout = go.Layout(dict(title = \"Visualizing data with PCA\",\n                        plot_bgcolor = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"first principal component (PC1)\",\n                                     zerolinewidth=1, ticklen=5, gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"second principal component (PC2)\",\n                                     zerolinewidth=1, ticklen=5, gridwidth=2),\n                        height = 400\n                       )\n                  )\ntrace1 = pca_scatter(pca_data, 'Churn', 'Churn', 'red')\ntrace2 = pca_scatter(pca_data, 'Churn', 'Not churn', 'royalblue')\ndata = [trace2, trace1]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","9b5beba5":"def plot_radar(df, aggregate, title):\n    data_frame = df[df[\"Churn\"] == aggregate] \n    data_frame_x = data_frame[bi_cs].sum().reset_index()\n    data_frame_x.columns = [\"feature\", \"yes\"]\n    data_frame_x[\"no\"] = data_frame.shape[0] - data_frame_x[\"yes\"]\n    data_frame_x = data_frame_x[data_frame_x[\"feature\"] != \"Churn\"]\n    \n    #count of 1's (yes)\n    trace1 = go.Scatterpolar(r = data_frame_x[\"yes\"].values.tolist(),\n                             theta = data_frame_x[\"feature\"].tolist(),\n                             fill = \"toself\", \n                             name = \"count of 1's\",\n                             mode = \"markers+lines\",\n                             marker = dict(size = 5)\n                            )\n    #count of 0's (no)\n    trace2 = go.Scatterpolar(r = data_frame_x[\"no\"].values.tolist(),\n                             theta = data_frame_x[\"feature\"].tolist(),\n                             fill = \"toself\", \n                             name = \"count of 0's\",\n                             mode = \"markers+lines\",\n                             marker = dict(size = 5)\n                            ) \n    layout = go.Layout(dict(polar = dict(radialaxis = dict(visible = True,\n                                                           side = \"counterclockwise\",\n                                                           showline = True,\n                                                           linewidth = 2,\n                                                           tickwidth = 2,\n                                                           gridcolor = \"white\",\n                                                           gridwidth = 2),\n                                         angularaxis = dict(tickfont = dict(size = 10),\n                                                            layer = \"below traces\"\n                                                           ),\n                                         bgcolor = \"rgb(243,243,243)\",\n                                        ),\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            title = title, height = 600, width = 600))\n    \n    data = [trace2, trace1]\n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig)","fb9b152f":"#separating binary columns\nbi_cs = df.nunique()[df.nunique() == 2].keys()\ndat_rad = df[bi_cs]\n\n#plotting radar chart for churn and not churn customers (binary variables)\nplot_radar(dat_rad, 1, \"Churn customers\")\nplot_radar(dat_rad, 0, \"Not churn customers\")","a5fc20c3":"def telecom_churn_prediction(algorithm, training_x, testing_x, training_y, testing_y, cf, threshold_plot):\n    #model\n    algorithm.fit(training_x, training_y)\n    predictions = algorithm.predict(testing_x)\n    probabilities = algorithm.predict_proba(testing_x)\n        \n    print('Algorithm:', type(algorithm).__name__)\n    print(\"\\nClassification report:\\n\", classification_report(testing_y, predictions))\n    print(\"Accuracy Score:\", accuracy_score(testing_y, predictions))\n    \n    #confusion matrix\n    conf_matrix = confusion_matrix(testing_y, predictions)\n    #roc_auc_score\n    model_roc_auc = roc_auc_score(testing_y, predictions) \n    print(\"Area under curve:\", model_roc_auc,\"\\n\")\n    \n    fpr, tpr, thresholds = roc_curve(testing_y, probabilities[:,1])\n     \n    #plot confusion matrix\n    trace1 = go.Heatmap(z = conf_matrix,\n                        x = [\"Not churn\", \"Churn\"],\n                        y = [\"Not churn\", \"Churn\"],\n                        showscale = False, colorscale = \"Picnic\",\n                        name = \"Confusion matrix\")\n    \n    #plot roc curve\n    trace2 = go.Scatter(x = fpr, y = tpr,\n                        name = \"Roc: \" + str(model_roc_auc),\n                        line = dict(color = ('rgb(22, 96, 167)'), width = 2))\n    trace3 = go.Scatter(x = [0,1], y = [0,1],\n                        line = dict(color = ('rgb(205, 12, 24)'), width = 2,\n                        dash = 'dot'))\n    \n    if cf in ['coefficients', 'features']:\n        if cf == 'coefficients':\n            coefficients = pd.DataFrame(algorithm.coef_.ravel())\n        elif cf == 'features':\n            coefficients = pd.DataFrame(algorithm.feature_importances_)\n        \n        column_df = pd.DataFrame(training_x.columns.tolist())\n        coef_sumry = (pd.merge(coefficients, column_df, left_index=True, \n                               right_index=True, how=\"left\"))\n        coef_sumry.columns = [\"coefficients\", \"features\"]\n        coef_sumry = coef_sumry.sort_values(by = \"coefficients\", ascending=False)\n        \n        #plot coeffs\n        trace4 = go.Bar(x = coef_sumry[\"features\"], y = coef_sumry[\"coefficients\"], \n                        name = \"coefficients\",\n                        marker = dict(color = coef_sumry[\"coefficients\"],\n                                      colorscale = \"Picnic\",\n                                      line = dict(width = .6, color = \"black\")\n                                     )\n                       )\n        #subplots\n        fig = make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                                subplot_titles=('Confusion matrix',\n                                                'Receiver operating characteristic',\n                                                'Feature importances')\n                           )  \n        fig.append_trace(trace1,1,1)\n        fig.append_trace(trace2,1,2)\n        fig.append_trace(trace3,1,2)\n        fig.append_trace(trace4,2,1)\n        fig['layout'].update(showlegend=False, title=\"Model performance\",\n                             autosize=False, height = 900, width = 800,\n                             plot_bgcolor = 'rgba(240,240,240, 0.95)',\n                             paper_bgcolor = 'rgba(240,240,240, 0.95)',\n                             margin = dict(b = 195))\n        fig[\"layout\"][\"xaxis2\"].update(dict(title = \"false positive rate\"))\n        fig[\"layout\"][\"yaxis2\"].update(dict(title = \"true positive rate\"))\n        fig[\"layout\"][\"xaxis3\"].update(dict(showgrid = True, tickfont = dict(size = 10), tickangle = 90))\n        \n    elif cf == 'None':\n        #subplots\n        fig = make_subplots(rows=1, cols=2,\n                            subplot_titles=('Confusion matrix',\n                                            'Receiver operating characteristic')\n                           )\n        fig.append_trace(trace1,1,1)\n        fig.append_trace(trace2,1,2)\n        fig.append_trace(trace3,1,2)\n        fig['layout'].update(showlegend=False, title=\"Model performance\",\n                         autosize=False, height = 500, width = 800,\n                         plot_bgcolor = 'rgba(240,240,240,0.95)',\n                         paper_bgcolor = 'rgba(240,240,240,0.95)',\n                         margin = dict(b = 195))\n        fig[\"layout\"][\"xaxis2\"].update(dict(title = \"false positive rate\"))\n        fig[\"layout\"][\"yaxis2\"].update(dict(title = \"true positive rate\"))  \n        \n    py.iplot(fig)\n    \n    if threshold_plot == True: \n        visualizer = DiscriminationThreshold(algorithm)\n        visualizer.fit(training_x,training_y)\n        visualizer.poof()","02d42337":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, cohen_kappa_score\nfrom sklearn.metrics import roc_auc_score, roc_curve,scorer, f1_score, precision_score, recall_score\nfrom sklearn.metrics import precision_recall_curve, average_precision_score\n\nimport statsmodels.api as sm\nfrom yellowbrick.classifier import DiscriminationThreshold\n\n#defining the studied or used independent features (columns) as well the target  \ncols = [i for i in df.columns if i not in target_col]\ntarget_col = ['Churn']\n\n#splitting the principal training dataset to subtrain and subtest datasets\nx_train, x_test, y_train, y_test = train_test_split(df[cols], df[target_col], \n                                                    test_size = .25, random_state = 111)\n\n#splitting the no scaled principal training dataset to subtrain and subtest datasets\nx_train_og, x_test_og, y_train_og, y_test_og = train_test_split(df_telcom_og[cols], df[target_col],\n                                                                test_size = .25, random_state = 111)","d2f815c4":"def treeplot(classifier, cols, classnames):\n    #plot decision tree\n    graph = Source(tree.export_graphviz(classifier, out_file=None, \n                                        rounded=True, proportion=False,\n                                        feature_names = cols, \n                                        precision = 2,\n                                        class_names = classnames,\n                                        filled = True)\n                  )\n    display(graph)","89b872c2":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG, display\n\ndecision_tree = DecisionTreeClassifier(max_depth = 9, random_state = 123,\n                                       splitter = \"best\", criterion = \"gini\")\n\ntelecom_churn_prediction(decision_tree, x_train, x_test, y_train, y_test, \"features\", threshold_plot=True)\n\n#plot decision tree\ntreeplot(decision_tree, cols, [\"Not churn\", \"Churn\"])","a6f9cfc4":"import pickle\nfilename = 'DT_model.sav'\npickle.dump(decision_tree, open(filename, 'wb'))","462346a9":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(n_estimators = 100, random_state = 123,\n                             max_depth = 9, criterion = \"gini\")\n\ntelecom_churn_prediction(rfc, x_train, x_test, y_train, y_test, 'features', threshold_plot=True)","5c76fd3b":"filename = 'RFC_model.sav'\npickle.dump(rfc, open(filename, 'wb'))","70bf40ab":"from sklearn.svm import SVC\n\n#Support vector classifier using linear hyper plane\nsvc_lin  = SVC(C=1.0, kernel='linear', probability=True, random_state=124)\n\ntelecom_churn_prediction(svc_lin, x_train, x_test, y_train, y_test, \"coefficients\", threshold_plot=True)#support vector classifier using non-linear hyper plane (\"rbf\")\nsvc_rbf  = SVC(C=10.0, kernel='rbf', gamma=0.1, probability=True, random_state=124)   \n\ntelecom_churn_prediction(svc_rbf, x_train, x_test, y_train, y_test, \"None\", threshold_plot=True)","b106761c":"filename = 'svc_model.sav'\npickle.dump(svc_rbf, open(filename, 'wb'))","15e495f8":"Several of the numerical data are very correlated. (Total day minutes and Total day charge), (Total eve minutes and Total eve charge), (Total night minutes and Total night charge) and lastly (Total intl minutes and Total intl charge) are alo correlated. We only have to select one of them.","7322bce9":"# Correlation"}}