{"cell_type":{"2dfaf8fa":"code","47ddd905":"code","94b8ed7d":"code","8ebef622":"code","59f69ce3":"code","2eac4c12":"code","97e8af1f":"code","cfd2cdc5":"code","31e85461":"markdown","c88f6741":"markdown","f57f0e90":"markdown","ab13bd29":"markdown","b7ddcd7f":"markdown"},"source":{"2dfaf8fa":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport missingno as msno\nfrom sklearn.ensemble import RandomForestClassifier\nfrom itertools import product","47ddd905":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ncolor_code = ['#E100A8', '#FF6766', '#97CE68', '#6BCBCA', '#FF9900']\ndf = pd.concat([train_data,test_data], axis=0, ignore_index = True)\nmsno.bar(df, color=color_code)","94b8ed7d":"df[\"Honorific\"] = pd.DataFrame(df[\"Name\"].str.strip().str.split(\".\"))\ndf[\"Honorific\"] = df[\"Honorific\"].map(lambda honorific : honorific[0])\ndf[\"Honorific\"] = df[\"Honorific\"].str.strip().str.split(\",\").map(lambda honorific: honorific[1].strip())\nrename = {\"Miss\":[\"Ms\",\"Mlle\"],\n          \"Mrs\": \"Mme\",\n          \"Others\": [\"Don\",\"Rev\",\"Dr\",\"Lady\",\"Sir\",\"Col\",\"the Countess\",\"Major\",\"Capt\",\"Jonkheer\",\"Dona\"]}\nfor new_honorific in rename:\n    df[\"Honorific\"].replace(rename[new_honorific],new_honorific,inplace=True)\ndf.groupby(\"Honorific\")[\"Age\"].median()","8ebef622":"honorifics = [\"Master\",\"Miss\",\"Mr\",\"Mrs\",\"Others\"]\nfor honorific in honorifics:\n    msk = (df[\"Honorific\"]==honorific)\n    df.loc[msk,\"Age\"] = df[msk][\"Age\"].fillna(df[msk][\"Age\"].median())\nmsno.bar(df, color=color_code)","59f69ce3":"df[\"AgeGroup\"] = df[\"Age\"].map(lambda x: int(x\/\/10))\ndf[\"AgeGroup\"].value_counts()","2eac4c12":"df[\"Fare\"].replace(np.nan,df.groupby(\"Pclass\")[\"Fare\"].median()[df.loc[df[\"Fare\"].isnull()][\"Pclass\"].item()],inplace=True)","97e8af1f":"df[\"Embarked\"] = df[\"Embarked\"].fillna(df[\"Embarked\"].value_counts().index[0])\nmsno.bar(df, color=color_code)","cfd2cdc5":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\", \"Honorific\", \"AgeGroup\"]\ndummies = pd.get_dummies(df[features])\nx = dummies[:889]\nx_test = dummies[-418:]\ntrain_data = df[:889]\ny = train_data[\"Survived\"]\nmodel = RandomForestClassifier(n_estimators = 100, max_depth = 5, random_state = 1)\nmodel.fit(x, y)\npredictions = model.predict(x_test)\npredictions = predictions.astype('int')\noutput = pd.DataFrame({\"PassengerId\" : test_data.PassengerId, \"Survived\" : predictions})\noutput.to_csv(\"result.csv\", index = False)","31e85461":"Let's add new column \"Honorific\", which will include various honorifics from passengers names. As we can see there are 4 informative types of honorifics in the dataframe: Master (boys and young men), Mr (adult men), Miss (unmarried women), Mrs (married women). This can help us to set the unknown \"Age\" values for some passengers. The rest of honorifics we can just put in the category \"Others\".","c88f6741":"One passenger has Nan value in the \"Fare\" column. Let's replace this value with the median \"Fare\" value of this passenger's Pclass. (Just because every person is important!)","f57f0e90":"In the next step we can group all passengers based on their division quotient of the \"Age\" value divided by 10.","ab13bd29":"Next we should set all of the unknown \"Age\" values for the rest of the passengers based on their \"Honorific\" values.","b7ddcd7f":"Last thing in the preprocessing part is some missing values from the \"Embarked\" column."}}