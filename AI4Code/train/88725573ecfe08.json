{"cell_type":{"8741bddd":"code","96c663df":"code","a7ee91a7":"code","cc9cf874":"code","9f1b0a67":"code","b2d1e9a3":"code","ce089306":"code","2dcc6d47":"code","79df5e0c":"code","cc16529f":"code","d6bf1639":"code","19137e71":"code","019cf478":"code","4eafc396":"code","58abb46f":"code","1a64829f":"markdown","b1318632":"markdown","6dc1092f":"markdown","7d804c90":"markdown","b1ed6795":"markdown","7cd79a7a":"markdown","16a0542a":"markdown","211a1b31":"markdown"},"source":{"8741bddd":"# TabNet\n!pip install pytorch-tabnet","96c663df":"import torch\nfrom torch import nn\nimport torch.optim as optim\nfrom torch.nn import functional as F\nfrom torch.nn.modules.loss import _WeightedLoss\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\n# Tabnet \nfrom pytorch_tabnet.metrics import Metric\nfrom pytorch_tabnet.tab_model import TabNetRegressor","a7ee91a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport os\nimport random\nimport sys\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import decomposition\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, QuantileTransformer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom tqdm.auto import tqdm\nfrom sklearn import linear_model\nimport xgboost as xgb\nimport operator\nimport lightgbm as lgb\nfrom catboost import CatBoostRegressor, CatBoostClassifier\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('seaborn-colorblind')\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc9cf874":"SEED = 42\nNFOLD = 5\nNSA = 3 # number of seed average","9f1b0a67":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\n\nfeatures = [f'cont{i}' for i in range(1, 15)]\ntarget_col = 'target'\n\nX_train = train.drop(['id', 'target'], axis=1)\ny_train = train['target']\nX_test = test.drop('id', axis=1)","b2d1e9a3":"print(X_train.shape)\nX_train.head()","ce089306":"print(X_test.shape)\nX_test.head()","2dcc6d47":"y_train.hist()","79df5e0c":"scaler = StandardScaler()\nX_train[features] = scaler.fit_transform(X_train[features])\nX_test[features] = scaler.transform(X_test[features])","cc16529f":"def set_seed(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    \n    if torch.cuda.is_available():\n        torch.cuda.manual_seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\nset_seed(SEED)","d6bf1639":"MAX_EPOCH = 160\n# n_d and n_a are different from the original work, 32 instead of 24\n# This is the first change in the code from the original\ntabnet_params = dict(\n    n_d = 24,\n    n_a = 24,\n    n_steps = 4,\n    gamma = 1.2,\n    lambda_sparse = 1e-3,\n    optimizer_fn = optim.Adam,\n    optimizer_params = dict(lr = 1e-3, weight_decay = 1e-5),\n    mask_type = \"entmax\",\n    scheduler_params = dict(\n        mode = \"min\", patience = 5, min_lr = 1e-5, factor = 0.8),\n    scheduler_fn = ReduceLROnPlateau,\n    seed = SEED,\n    verbose = 10\n)","19137e71":"def fit_model(params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED):\n    cv = KFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\n    models = []\n    oof_train = np.zeros((len(X_train),))\n    y_preds = np.zeros((len(X_test),))\n\n    for fold_id, (train_index, valid_index) in tqdm(enumerate(cv.split(X_train, y_train))):\n        # split\n        X_tr = X_train.loc[train_index, features].values\n        X_val = X_train.loc[valid_index, features].values\n        y_tr = y_train.loc[train_index].values\n        y_val = y_train.loc[valid_index].values\n        \n        # model\n        model = TabNetRegressor(**params)\n            \n        # fit\n        model.fit(\n            X_train = X_tr,\n            y_train = y_tr.reshape(-1, 1),\n            eval_set = [(X_val, y_val.reshape(-1, 1))],\n            eval_name = [\"val\"],\n            eval_metric = ['mse'],\n            max_epochs = MAX_EPOCH,\n            patience = 80,\n            batch_size = 16000, \n            virtual_batch_size = 800,\n            num_workers = 4,\n            drop_last = False\n        )\n        \n        # predict\n        oof_train[valid_index] = model.predict(X_val).ravel()\n        y_pred = model.predict(X_test[features].values).ravel()\n        y_preds += y_pred \/ n_fold\n        models.append(model)\n        \n    return oof_train, y_preds, models","019cf478":"oof = np.zeros(len(train))\ny_pred = np.zeros(len(test))\nfor n in range(NSA):\n    # fit\n    oof_train, y_preds, models = fit_model(tabnet_params, \n        X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED + n**2)\n    \n    # average\n    oof += oof_train \/ NSA\n    y_pred += y_preds \/ NSA","4eafc396":"print(f'CV score: {mean_squared_error(y_train, oof, squared=False)}')","58abb46f":"sub = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')\nsub['target'] = y_pred\nsub.to_csv('submission.csv', index=False)\nsub.head()","1a64829f":"# Libraries","b1318632":"# Score","6dc1092f":"# Submit","7d804c90":"# Scaling","b1ed6795":"# Config","7cd79a7a":"# Target\nNormal?","16a0542a":"# Tabnet","211a1b31":"# Load data"}}