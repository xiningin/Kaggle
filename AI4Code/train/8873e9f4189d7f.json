{"cell_type":{"4f76fea9":"code","a25813ed":"code","976dcd37":"code","bf0ea2fd":"code","e85e7f72":"code","ee792518":"code","c5cd6de2":"code","0524f524":"code","2cce827b":"code","e5a6ff2d":"code","1904ca61":"code","0c85601a":"code","999dced1":"code","ccb8ee5d":"code","6c872991":"code","0fd681b7":"code","20970b99":"code","5edb5f7f":"code","cacdfe43":"code","cad82e12":"code","9cc3c27c":"code","70433f5f":"code","2ceb36bb":"code","09dc9561":"code","57f5610c":"code","20f06a85":"code","821cd946":"code","4a2e8bbf":"code","fe04f85c":"code","88525cc0":"code","9236e0bf":"code","836e9ea5":"code","c488e1e7":"code","d41b836c":"code","3866a298":"code","31b65510":"code","e5834c53":"code","141d6a9d":"code","1f413545":"code","2ca5397a":"code","2fe6668d":"code","a0374d21":"code","35f03ac8":"code","dc371065":"code","7631bfdf":"code","6be28f5a":"code","af1797aa":"code","0b56f6ef":"code","e5a0e830":"code","6a7be87d":"code","2f8c6013":"code","5fc90c3d":"code","1f7f9896":"code","71364a5b":"code","a7139f98":"code","6f49d422":"code","c4830263":"code","4edbc642":"code","9e9b84ce":"code","317e7359":"code","31af416f":"code","67663ac2":"code","082e4231":"code","eec2e081":"code","6c8c582e":"code","eaa34f09":"code","f9c581eb":"code","933d992d":"code","c5aca5b3":"code","fd10e524":"code","b0b05add":"code","d8d12517":"code","c13b925c":"code","06a820d2":"code","1f27be1b":"code","6355d8d7":"code","d856d03b":"code","9d4028b6":"code","9484aea2":"code","9f2d60fb":"code","1f9f887f":"code","67b5dacf":"code","52474997":"code","25ab6db8":"code","482d2f68":"code","d2b72eb3":"code","c1465106":"code","12355db8":"code","acc59805":"code","958b5b63":"code","6d35e016":"code","37e83484":"code","cf4e808d":"markdown","9b0f27e6":"markdown","17c1d5d6":"markdown","f791df4d":"markdown","32598d9b":"markdown","b712ad01":"markdown","d04e23e2":"markdown","92f1fca0":"markdown","a828b903":"markdown","e6693680":"markdown"},"source":{"4f76fea9":"# Importing the required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt","a25813ed":"pd.set_option('display.max_columns', None)  \npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', -1)","976dcd37":"# Loading the training set\ndf_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")","bf0ea2fd":"# Loading the test set\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","e85e7f72":"df_train.head()","ee792518":"df_test.head()","c5cd6de2":"df_train.info()","0524f524":"df_test.info()","2cce827b":"df_train.isnull().sum()","e5a6ff2d":"df_train.describe()","1904ca61":"#replacing age null valtes with mean\ndf_train['Age'].fillna(df_train['Age'].mean() , inplace=True)","0c85601a":"# Forward filling null values for Embarket\ndf_train['Embarked'].fillna(method ='ffill' , inplace=True)","999dced1":"# Deleting Cabin column. Many null values\ndf_train.drop('Cabin', axis = 1 , inplace = True)","ccb8ee5d":"# Deleting Ticket Column \ndf_train.drop('Ticket', axis = 1 , inplace = True)","6c872991":"# Identifier column\ndf_train.drop('PassengerId', axis = 1 , inplace = True)","0fd681b7":"# Extracting title from Name\ndf_train['title'] = df_train['Name'].astype(str).str.split().str[1]","20970b99":"\ndf_train['title'].value_counts()","5edb5f7f":"#https:\/\/www.gordon.edu\/styleguide\/names-titles\ndf_train['title'] = np.where(df_train['title'].isin(['Mr.','Miss.','Mrs.','Master.']), df_train['title'], 'Other')","cacdfe43":"df_train['Family'] = df_train.SibSp + df_train.Parch","cad82e12":" df_train['family_num'] = np.where((df_train['Family']>0),'Yes','No')","9cc3c27c":"df_train.drop('Name', axis = 1 , inplace = True)","70433f5f":"# Binning Fare for visualization\nbins = [0, 50, 100, 150, 200, np.inf]\nnames = ['Coach', 'Economy', 'Premium','Business', 'First']\ndf_train['FareRange'] = pd.cut(df_train['Fare'], bins, labels=names)","2ceb36bb":"# Binning Age for visualization\nbins = [0, 16, 40, 60, np.inf]\nnames = ['Kids', 'Youth', 'Adults', 'Elderly']\ndf_train['AgeRange'] = pd.cut(df_train['Age'], bins, labels=names)","09dc9561":"df_train[\"Survived\"].value_counts().plot.bar()\nplt.style.use('classic')","57f5610c":"df_train.hist(bins=10, figsize=(20,15))\nplt.show()","20f06a85":"sns.set(rc={'figure.figsize':(12,9)})","821cd946":"sns.set_palette(\"muted\")\nsns.countplot(y=\"FareRange\", hue=\"Survived\", data=df_train)\nplt.show()","4a2e8bbf":"sns.set_palette(\"muted\")\nsns.countplot(y=\"AgeRange\", hue=\"Survived\", data=df_train)\nplt.show()","fe04f85c":"sns.set_palette(\"muted\")\nsns.countplot(y=\"family_num\", hue=\"Survived\", data=df_train)\nplt.show()","88525cc0":"sns.set_palette(\"muted\")\nsns.countplot(y=\"Survived\", hue=\"Sex\", data=df_train)\nplt.show()","9236e0bf":"sns.set_palette(\"muted\")\nsns.countplot(y=\"title\", hue=\"Survived\", data=df_train)\nplt.show()","836e9ea5":"sns.set_palette(\"muted\")\nsns.countplot(y=\"Survived\", hue=\"Embarked\", data=df_train)\nplt.show()","c488e1e7":"df_train[\"Survived\"].value_counts().plot.bar()\nplt.style.use('classic')","d41b836c":"# Correlation\ncorr = df_train.corr()\nsns.heatmap(corr)","3866a298":"corr","31b65510":"np.random.seed(45)\nfrom sklearn import preprocessing\nfrom sklearn.utils import resample\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier","e5834c53":"df_train[\"Survived\"].value_counts(normalize=True) * 100","141d6a9d":"df_train.drop('FareRange', axis = 1 , inplace = True)","1f413545":"df_train.drop('AgeRange', axis = 1 , inplace = True)","2ca5397a":"df_train.drop('SibSp', axis = 1 , inplace = True)","2fe6668d":"df_train.drop('Parch', axis = 1 , inplace = True)","a0374d21":"df_train['family_num'] =  df_train['family_num'].map({'Yes': 1, 'No': 0})","35f03ac8":"df_train['Sex'] = df_train['Sex'].map({'male': 1, 'female': 0})","dc371065":"df_train['title'] = df_train['title'].map({'Mr.':1,'Miss.':2,'Mrs.':3,'Master.':4, 'Other': 5})","7631bfdf":"df_train['Embarked'] = df_train['Embarked'].map({'S': 1, 'C': 2, 'Q': 3})","6be28f5a":"df_train.info()","af1797aa":"X = df_train.drop('Survived', axis = 1)","0b56f6ef":"y = df_train['Survived'].copy()","e5a0e830":"le = preprocessing.LabelEncoder()\ny = le.fit_transform(df_train['Survived'])","6a7be87d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","2f8c6013":"clf_logreg = LogisticRegression()\nclf_logreg.fit(X_train,y_train)","5fc90c3d":"pred_logreg = clf_logreg.predict(X_test)\naccuracy_score(pred_logreg,y_test)","1f7f9896":"print(confusion_matrix(y_test, pred_logreg))","71364a5b":"clf_dt = DecisionTreeClassifier()\nclf_dt.fit(X_train,y_train)","a7139f98":"pred_dt = clf_dt.predict(X_test)\naccuracy_score(pred_dt,y_test)","6f49d422":"print(confusion_matrix(y_test, pred_dt))","c4830263":"clf_svc = SVC()\nclf_svc.fit(X_train,y_train)","4edbc642":"pred_svc = clf_svc.predict(X_test)\naccuracy_score(pred_svc,y_test)","9e9b84ce":"print(confusion_matrix(y_test, pred_svc))","317e7359":"clf_sgd = SGDClassifier(penalty=None)\nclf_sgd.fit(X_train, y_train)","31af416f":"pred_sgd = clf_sgd.predict(X_test)\naccuracy_score(pred_sgd,y_test)","67663ac2":"print(confusion_matrix(y_test, pred_sgd))","082e4231":"df_train.head()","eec2e081":"df_test.head()","6c8c582e":"df_test['title'] = df_test['Name'].astype(str).str.split().str[1]","eaa34f09":"df_test['title'] = np.where(df_test['title'].isin(['Mr.','Miss.','Mrs.','Master.']), df_test['title'], 'Other')","f9c581eb":"df_test['Family'] = df_test.SibSp + df_test.Parch","933d992d":"df_test['family_num'] = np.where((df_test['Family']>0),'Yes','No')","c5aca5b3":"df_test.drop('SibSp', axis = 1 , inplace = True)","fd10e524":"df_test.drop('Parch', axis = 1 , inplace = True)","b0b05add":"df_test['family_num'] =  df_test['family_num'].map({'Yes': 1, 'No': 0})","d8d12517":"df_test['Embarked'] = df_test['Embarked'].map({'S': 1, 'C': 2, 'Q': 3})","c13b925c":"df_test['Sex'] = df_test['Sex'].map({'male': 1, 'female': 0})","06a820d2":"df_test['Age'].fillna(df_test['Age'].mean() , inplace=True)","1f27be1b":"df_test['Fare'].fillna(df_test['Fare'].mean() , inplace=True)","6355d8d7":"df_test.drop('Cabin', axis = 1 , inplace = True)","d856d03b":"df_test.drop('Ticket', axis = 1 , inplace = True)","9d4028b6":"df_test.drop('Name', axis = 1 , inplace = True)","9484aea2":"df_test['title'] = df_test['title'].map({'Mr.':1,'Miss.':2,'Mrs.':3,'Master.':4, 'Other': 5})","9f2d60fb":"df_test.head()","1f9f887f":"#set ids \nPid = df_test['PassengerId']","67b5dacf":"df_test['Fare'] = df_test['Fare'].round(2)","52474997":"df_test['Age'] = df_test['Age'].round(2)","25ab6db8":"Pid","482d2f68":"test_pred = df_test.drop('PassengerId', axis=1,inplace = True)","d2b72eb3":"df_test.info()","c1465106":"df_test.head()","12355db8":"predict = clf_logreg.predict(df_test)","acc59805":"#output as CSV\noutput = pd.DataFrame({ 'PassengerId' : Pid, 'Survived': predict })\noutput.to_csv('submissions.csv', index=False)","958b5b63":"output.head()","6d35e016":"output[\"Survived\"].value_counts(normalize=True) * 100","37e83484":"import pandas as pd\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","cf4e808d":"Logistic Regression","9b0f27e6":"****Machine Learning Models","17c1d5d6":"Basic Data Description","f791df4d":"Using Decision Tree for predicting on test. ","32598d9b":"SGD Classifier","b712ad01":"Preparing for ML ","d04e23e2":"Some plots","92f1fca0":"Decision Tree ","a828b903":"## Titanic","e6693680":"SVC"}}