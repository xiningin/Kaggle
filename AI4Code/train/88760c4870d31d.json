{"cell_type":{"4be3a0c1":"code","da43485d":"code","a1411da7":"code","dae30863":"code","3eb477a5":"code","885de96c":"code","868e428d":"code","888d173d":"code","89f6aefb":"code","4565ab08":"code","fdb2d173":"code","0fdebad7":"code","5f6a06fb":"code","5aea54ca":"markdown"},"source":{"4be3a0c1":"import numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score, mean_absolute_error\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np","da43485d":"df = pd.read_csv(\"diamonds_train.csv\", index_col=0)","a1411da7":"df[\"cut\"] = df[\"cut\"].apply(lambda x: x.replace(\"Fair\",\"0\"))\ndf[\"cut\"] = df[\"cut\"].apply(lambda x: x.replace(\"Very Good\",\"2\"))\ndf[\"cut\"] = df[\"cut\"].apply(lambda x: x.replace(\"Good\",\"1\"))\ndf[\"cut\"] = df[\"cut\"].apply(lambda x: x.replace(\"Ideal\",\"3\"))\ndf[\"cut\"] = df[\"cut\"].apply(lambda x: x.replace(\"Premium\",\"4\"))\ndf[\"cut\"] = df[\"cut\"].astype(int)\n\ndf[\"color\"] = df[\"color\"].apply(lambda x: x.replace(\"D\",\"0\"))\ndf[\"color\"] = df[\"color\"].apply(lambda x: x.replace(\"E\",\"1\"))\ndf[\"color\"] = df[\"color\"].apply(lambda x: x.replace(\"F\",\"2\"))\ndf[\"color\"] = df[\"color\"].apply(lambda x: x.replace(\"G\",\"3\"))\ndf[\"color\"] = df[\"color\"].apply(lambda x: x.replace(\"H\",\"4\"))\ndf[\"color\"] = df[\"color\"].apply(lambda x: x.replace(\"I\",\"5\"))\ndf[\"color\"] = df[\"color\"].apply(lambda x: x.replace(\"J\",\"6\"))\ndf[\"color\"] = df[\"color\"].astype(int)\n\ndf[\"clarity\"] = df[\"clarity\"].apply(lambda x: x.replace(\"SI1\",\"4\"))\ndf[\"clarity\"] = df[\"clarity\"].apply(lambda x: x.replace(\"SI2\",\"5\"))\ndf[\"clarity\"] = df[\"clarity\"].apply(lambda x: x.replace(\"I1\",\"0\"))\ndf[\"clarity\"] = df[\"clarity\"].apply(lambda x: x.replace(\"IF\",\"1\"))\ndf[\"clarity\"] = df[\"clarity\"].apply(lambda x: x.replace(\"VVS1\",\"2\"))\ndf[\"clarity\"] = df[\"clarity\"].apply(lambda x: x.replace(\"VVS2\",\"3\"))\ndf[\"clarity\"] = df[\"clarity\"].apply(lambda x: x.replace(\"VS1\",\"6\"))\ndf[\"clarity\"] = df[\"clarity\"].apply(lambda x: x.replace(\"VS2\",\"7\"))\ndf[\"clarity\"] = df[\"clarity\"].astype(int)","dae30863":"X = np.array(df[[\"carat\",\"cut\", \"color\", \"clarity\"]])\ny = np.array(df[\"price\"])","3eb477a5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 235)","885de96c":"from sklearn.ensemble import RandomForestRegressor\nforest_reg = RandomForestRegressor(n_estimators = 100, random_state = 235, ccp_alpha=1)\nforest_reg.fit(X_train, y_train)","868e428d":"y_pred = forest_reg.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))\n# 586.2747608384778","888d173d":"X_pred = pd.read_csv(\"diamonds_test.csv\", index_col = 0)","89f6aefb":"\n\nX_pred[\"cut\"] = X_pred[\"cut\"].apply(lambda x: x.replace(\"Fair\",\"0\"))\nX_pred[\"cut\"] = X_pred[\"cut\"].apply(lambda x: x.replace(\"Very Good\",\"2\"))\nX_pred[\"cut\"] = X_pred[\"cut\"].apply(lambda x: x.replace(\"Good\",\"1\"))\nX_pred[\"cut\"] = X_pred[\"cut\"].apply(lambda x: x.replace(\"Ideal\",\"3\"))\nX_pred[\"cut\"] = X_pred[\"cut\"].apply(lambda x: x.replace(\"Premium\",\"4\"))\nX_pred[\"cut\"] = X_pred[\"cut\"].astype(int)\n\nX_pred[\"color\"] = X_pred[\"color\"].apply(lambda x: x.replace(\"D\",\"0\"))\nX_pred[\"color\"] = X_pred[\"color\"].apply(lambda x: x.replace(\"E\",\"1\"))\nX_pred[\"color\"] = X_pred[\"color\"].apply(lambda x: x.replace(\"F\",\"2\"))\nX_pred[\"color\"] = X_pred[\"color\"].apply(lambda x: x.replace(\"G\",\"3\"))\nX_pred[\"color\"] = X_pred[\"color\"].apply(lambda x: x.replace(\"H\",\"4\"))\nX_pred[\"color\"] = X_pred[\"color\"].apply(lambda x: x.replace(\"I\",\"5\"))\nX_pred[\"color\"] = X_pred[\"color\"].apply(lambda x: x.replace(\"J\",\"6\"))\nX_pred[\"color\"] = X_pred[\"color\"].astype(int)\n\nX_pred[\"clarity\"] = X_pred[\"clarity\"].apply(lambda x: x.replace(\"SI1\",\"4\"))\nX_pred[\"clarity\"] = X_pred[\"clarity\"].apply(lambda x: x.replace(\"SI2\",\"5\"))\nX_pred[\"clarity\"] = X_pred[\"clarity\"].apply(lambda x: x.replace(\"I1\",\"0\"))\nX_pred[\"clarity\"] = X_pred[\"clarity\"].apply(lambda x: x.replace(\"IF\",\"1\"))\nX_pred[\"clarity\"] = X_pred[\"clarity\"].apply(lambda x: x.replace(\"VVS1\",\"2\"))\nX_pred[\"clarity\"] = X_pred[\"clarity\"].apply(lambda x: x.replace(\"VVS2\",\"3\"))\nX_pred[\"clarity\"] = X_pred[\"clarity\"].apply(lambda x: x.replace(\"VS1\",\"6\"))\nX_pred[\"clarity\"] = X_pred[\"clarity\"].apply(lambda x: x.replace(\"VS2\",\"7\"))\nX_pred[\"clarity\"] = X_pred[\"clarity\"].astype(int)","4565ab08":"X_pred = np.array(X_pred[[\"carat\",\"cut\", \"color\", \"clarity\"]])\npd.DataFrame(X_pred)","fdb2d173":"predictions_submit = forest_reg.predict(X_pred)\npd.DataFrame(predictions_submit)","0fdebad7":"submission = pd.DataFrame({\"id\": range(len(predictions_submit)), \"price\": predictions_submit})","5f6a06fb":"submission.to_csv(\"submission12.csv\", index = False)","5aea54ca":"# TO TEST"}}