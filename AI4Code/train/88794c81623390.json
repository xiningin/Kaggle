{"cell_type":{"6d187e5d":"code","2514f99a":"code","4ce2e7d0":"code","40650cf3":"code","b0319566":"code","3cba961f":"code","166f4b7d":"code","20f021af":"code","0c88a2e6":"code","3bf71d20":"code","f8f5cce9":"code","db15748b":"code","a6d7b4a4":"code","5f15af60":"code","e3c8ad9d":"code","27d38f2e":"code","9de30f3a":"code","2b880bf8":"code","c0462e2a":"code","70f959ab":"code","229ad15f":"code","2e6897ac":"code","0bfa554f":"code","39bb0eac":"code","38465523":"code","ec347f0d":"code","f5685bdf":"code","93108ca1":"code","b6c2d655":"code","0807babf":"code","55e98764":"code","687b983f":"code","90249c0d":"code","6d95253d":"code","6f9f4ea2":"code","bde9cf15":"code","4bf7b092":"code","c24ef4b4":"code","2db6cd5c":"code","ac64a094":"code","6bf4131e":"code","b8636a40":"code","931431b8":"code","3608bf5b":"code","bc9eb7e0":"code","4351089d":"markdown","025c5a90":"markdown","471cec62":"markdown","6091d663":"markdown","436eb516":"markdown","ccad5222":"markdown","477b89b0":"markdown","b4fe3af5":"markdown","cdbe4584":"markdown","d022e3ac":"markdown","b5006766":"markdown","605c7e52":"markdown","ab5c35de":"markdown","7341e252":"markdown","5868d1d3":"markdown","f2158d0d":"markdown","d42fc399":"markdown","9a1e2237":"markdown","e44c1ec0":"markdown"},"source":{"6d187e5d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2514f99a":"data = pd.read_csv('\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\nregions = pd.read_csv('\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv')\nhosts = pd.read_csv('\/kaggle\/input\/olympic-host-cities\/olym.csv',header=0,encoding = 'unicode_escape')\ngdp = pd.read_csv('\/kaggle\/input\/worldwide-gdp-history-19602016\/gdp_data.csv')","4ce2e7d0":"data.head()","40650cf3":"hosts.head(20)","b0319566":"#winter = data.loc[data['Season'] == 'Winter']\ndf = data.loc[data['Season'] == 'Summer']\ndf = df.drop(['Season'], axis=1)\n\ndf['Medal'] = df['Medal'].replace(['Bronze','Silver','Gold'],1)\ndf['Medal'] = df['Medal'].fillna(0)\ndf.head()","3cba961f":"hosts = hosts.loc[hosts['Winter'].isnull()]\nhosts.head(20)","166f4b7d":"medals = df.groupby(['NOC','Year'])[['Medal']].agg('sum').reset_index()\n\nusa = medals.loc[medals['NOC'] == 'USA'].drop('NOC',axis=1)\ngbr = medals.loc[medals['NOC'] == 'GBR'].drop('NOC',axis=1)\nchn = medals.loc[medals['NOC'] == 'CHN'].drop('NOC',axis=1)\nmedals2 = medals.merge(hosts, on='Year', suffixes=('', '_host')).drop(['City','Country','Summer','Winter','Latitude','Longitude'], axis=1)\nmedals2 = medals2.merge(usa, 'inner', on='Year', suffixes=('','_USA')).merge(gbr, 'inner', on='Year', suffixes=('','_GBR')).merge(chn, 'inner', on='Year', suffixes=('','_CHN'))\nmedals2 = medals2.drop(['NOC','Medal'], axis=1).rename(columns={'NOC_host': 'Host'})\nmedals2","20f021af":"medals = df.groupby(['NOC','Year'])[['Medal']].agg('sum').reset_index()\n\nathletes = df.groupby(['NOC','Year'])[['Name']].agg('count').reset_index().rename(columns={'Name': 'Athletes'})\nathletes = athletes.merge(medals, on=['NOC','Year'])\nathletes","0c88a2e6":"np.corrcoef(athletes['Athletes'],athletes['Medal'])","3bf71d20":"gdp['Code'].replace('DEU','GER')","f8f5cce9":"df = athletes.merge(gdp, left_on = ['NOC','Year'], right_on = ['Code','Year']).drop(['Country','Code'], axis = 1).dropna()\ndf = df.merge(hosts, on='Year', suffixes=('', '_host')).drop(['City','Country','Summer','Winter','Latitude','Longitude'], axis=1).rename(columns={'NOC_host': 'Host'})\ndf","db15748b":"dfHost = athletes.merge(hosts, on='Year', suffixes=('', '_host')).drop(['City','Country','Summer','Winter','Latitude','Longitude'], axis=1).rename(columns={'NOC_host': 'Host'})\ndfHost","a6d7b4a4":"def is_host(row):\n    if row['NOC'] == row['Host'] :\n        return 1\n    return 0\n\ndfHost['is_host'] = dfHost.apply(lambda row: is_host(row), axis=1)\ndf['is_host'] = df.apply(lambda row: is_host(row), axis=1)\ndf","5f15af60":"def lin_reg(X,y):\n    from sklearn.linear_model import LinearRegression\n    model = LinearRegression()\n    model.fit(X, y)\n\n    return model\n\ndef mod_perf(model, X, y):\n    from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n    y_pred = model.predict(X)\n    mse = mean_squared_error(y_true=y, y_pred=y_pred)\n    mae = mean_absolute_error(y_true=y, y_pred=y_pred)\n    print('MLR MSE: {:0.2f}\\n'.format(mse))\n    print('MLR MAE: {:0.2f}\\n'.format(mae))\n    print('Variance score: %.2f' % r2_score(y, y_pred))\n    return","e3c8ad9d":"dfNum = df.drop(['NOC','Host'],axis=1)\nX = dfNum.drop(['Medal'],axis=1)\ny = dfNum['Medal']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=123)\n\nmed_all = lin_reg(X_train, y_train)\n\npd.Series(med_all.coef_, index=X_train.columns).sort_values(ascending=False).round(4)","27d38f2e":"print('Training Performance:\\n')\nmod_perf(med_all, X_train, y_train)","9de30f3a":"print('Testing Performance:\\n')\nmod_perf(med_all, X_test, y_test)","2b880bf8":"med_int = med_all.intercept_.round(3)\n\ndef pred_medals(ath,year,gdpg,is_host=0):\n    med = med_int + .1248*ath + .0965*year + .0289*gdpg + 6.6871*is_host\n    return med","c0462e2a":"dfNum.corr()","70f959ab":"sns.pairplot(dfNum)","229ad15f":"X = dfHost.drop(['Medal','Host','NOC','Athletes'],axis=1)\ny = dfHost['Medal']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01, random_state=123)\n\nml_reg  = lin_reg(X_train, y_train)\n\npd.Series(ml_reg.coef_, index=X_train.columns).sort_values(ascending=False).round(4)","2e6897ac":"dfHost_only = dfHost[dfHost['NOC'].isin(hosts['NOC'])]\n\nX = dfHost_only.drop(['Medal','Host','NOC','Athletes'],axis=1)\ny = dfHost_only['Medal']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01, random_state=123)\n\nml_reg  = lin_reg(X_train, y_train)\n\npd.Series(ml_reg.coef_, index=X_train.columns).sort_values(ascending=False).round(4)","0bfa554f":"X = dfHost.drop(['Medal','Host','NOC'],axis=1)\ny = dfHost['Medal']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01, random_state=123)\n\nml_reg  = lin_reg(X_train, y_train)\n\npd.Series(ml_reg.coef_, index=X_train.columns).sort_values(ascending=False).round(4)","39bb0eac":"X = dfHost_only.drop(['Medal','Host','NOC'],axis=1)\ny = dfHost_only['Medal']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01, random_state=123)\n\nml_reg  = lin_reg(X_train, y_train)\n\npd.Series(ml_reg.coef_, index=X_train.columns).sort_values(ascending=False).round(4)","38465523":"usaNum = dfHost.loc[dfHost['NOC'] == 'USA'].sort_values(by=['Year'])\ngbrNum = dfHost.loc[dfHost['NOC'] == 'GBR'].sort_values(by=['Year'])\nchnNum = dfHost.loc[dfHost['NOC'] == 'CHN'].sort_values(by=['Year'])","ec347f0d":"from scipy.interpolate import interp1d\nusaAth = interp1d(usaNum['Year'],usaNum['Athletes'], fill_value='extrapolate')\ngbrAth = interp1d(gbrNum['Year'],gbrNum['Athletes'], fill_value='extrapolate')\nchnAth = interp1d(chnNum['Year'],chnNum['Athletes'], fill_value='extrapolate')","f5685bdf":"X = usaNum.drop(['Medal','NOC','Host'],axis=1)\ny = usaNum['Medal']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=123)\n\nmed_usa = lin_reg(X_train, y_train)\n\npd.Series(med_usa.coef_, index=X_train.columns).sort_values(ascending=False).round(4)","93108ca1":"usa_int = med_usa.intercept_.round(3)\n\ndef pred_medals_usa(ath,year,host=0):\n    med = usa_int + .2992*ath + .2707*year + 31.2275*host\n    return med","b6c2d655":"mod_perf(med_usa,X_train,y_train)","0807babf":"mod_perf(med_usa,X_test,y_test)","55e98764":"usaNum.tail()","687b983f":"year = 2020\nath = usaAth(year)\ngdpg = 2.9\ngdpp = 54541.7\nprint('USA 2020 Medal Count: %.0f' % pred_medals_usa(ath,year))","90249c0d":"print('2020 Medal Count  w\/ Base Model: %.0f' % pred_medals(ath,year,gdpg))","6d95253d":"X = gbrNum.drop(['Medal','NOC','Host'],axis=1)\ny = gbrNum['Medal']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=123)\n\nmed_gbr = lin_reg(X_train, y_train)\n\npd.Series(med_gbr.coef_, index=X_train.columns).sort_values(ascending=False).round(4)","6f9f4ea2":"gbr_int = med_gbr.intercept_.round(3)\n\ndef pred_medals_gbr(ath,year,host=0):\n    med = gbr_int + .0774*ath - 0.8806*year - 20.4233*host\n    return med","bde9cf15":"mod_perf(med_gbr,X_train,y_train)","4bf7b092":"gbrNum.tail()","c24ef4b4":"year = 2020\nath = gbrAth(year)\ngdpg = 1.4\ngdpp = 42986\nprint('GBR 2020 Medal Count: %.0f' % pred_medals_gbr(ath,year))","2db6cd5c":"print('2020 Medal Count  w\/ Base Model: %.0f' % pred_medals(ath,year,gdpg))","ac64a094":"X = chnNum.drop(['Medal','NOC','Host'],axis=1)\ny = chnNum['Medal']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=123)\n\nmed_chn = lin_reg(X_train, y_train)\n\npd.Series(med_chn.coef_, index=X_train.columns).sort_values(ascending=False).round(4)","6bf4131e":"chn_int = ml_reg.intercept_.round(3)\n\ndef pred_medals_chn(ath,year,host=0):\n    med = chn_int + 0.0605*ath + 1.1477*year + 65.5159*host\n    return med","b8636a40":"mod_perf(med_chn,X_train,y_train)","931431b8":"chnNum.tail()","3608bf5b":"year = 2020\nath = chnAth(year)\ngdpg = 6.6\ngdpp = 7755\nprint('CHN 2020 Medal Count: %.0f' % pred_medals_chn(ath,year))","bc9eb7e0":"print('2020 Medal Count  w\/ Base Model: %.0f' % pred_medals(ath,year,gdpg))","4351089d":"### Predict CHN 2020 medal count","025c5a90":"#### There is DEFINITELY a home field advantage\n * The host tends to win 127 extra medals versus all competitors and 99 extra medals versus past hosts.\n * However, this is almost entirely due to the host country's ability to send more athletes.\n * When accounting for the increased athlete count, host countries only win an extra 12 medals.\n * When only looking at countries who have hosted in the past, host countries actually win 7 LESS medals.","471cec62":"### Predict GBR 2020 medal count","6091d663":"### Loading data","436eb516":"### Adding GDP Data as a potential predictor","ccad5222":"### Generate regression coefficients","477b89b0":"### Predict USA 2020 medal count","b4fe3af5":"#### Looking at the correlational coefficient, we can conclude that there is a strong correlation between sending more athletes and winning more medals.","cdbe4584":"### Looking at the data format","d022e3ac":"### Grabbing summer stats and dummy coding Medal","b5006766":"### Looking at athletes sent vs. medals won","605c7e52":"#### Countries can expect to win an extra medal for every ~8 athletes they send to the olympics\n#### GDP and GDP per Capita have no effect on medal count\n#### Hosting the olympics increases your expected medal count","ab5c35de":"### Make data frames specific to USA, GBR, and CHN","7341e252":"### Add variable to track if country is hosting","5868d1d3":"### Check for multicollinearity","f2158d0d":"### Importing modules","d42fc399":"### Build functions for extrapolating athlete counts","9a1e2237":"# 120 Years of Olympic History","e44c1ec0":"### Getting medal counts by country"}}