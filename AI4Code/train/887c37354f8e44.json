{"cell_type":{"9d1291e3":"code","65ae3fad":"code","0efe3d7e":"code","6f38934e":"code","a2d715a8":"code","56590cc5":"code","473f8ddc":"code","f679ef30":"code","aad4aded":"code","224db25c":"code","df8f9430":"code","3592ec76":"code","8d09d0f6":"code","0c1e8b0b":"code","dd3c80d5":"code","342efb12":"code","3f2a25cc":"code","0a829473":"code","11e06c2d":"code","508aaffc":"code","daea617b":"code","181ba146":"code","935b09d4":"code","f809c5ac":"code","23a65a8c":"code","3b9102de":"code","2636d4b1":"code","552533df":"code","aea5d1d6":"markdown","d189df46":"markdown","f8e163e6":"markdown","9fa467cb":"markdown","f8fcbe51":"markdown","2569df59":"markdown","b2da26e4":"markdown","9458023f":"markdown","bfd3d9f6":"markdown","7cf20959":"markdown","76cb51c3":"markdown","7622caa1":"markdown","3e5f692f":"markdown","361d21f2":"markdown","d9499ec4":"markdown","09a2cd41":"markdown"},"source":{"9d1291e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65ae3fad":"import plotly.graph_objects as go\nfrom plotly.offline import iplot\nimport folium\nfrom  folium  import  plugins","0efe3d7e":"resultsDF = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/results.csv')\ncircuitsDF = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/circuits.csv')\ndriversDF = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/drivers.csv')\nracesDF = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/races.csv')\nconstructorDF = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/constructors.csv')\n","6f38934e":"resultsDF.head()\n\n","a2d715a8":"circuitsDF.head()","56590cc5":"driversDF.head()","473f8ddc":"racesDF.head()","f679ef30":"constructorDF.head()","aad4aded":"#joining resulDF with driversDF by column driverID,using inner join\ndfresul = pd.merge(resultsDF,driversDF,on='driverId')\n#joining racesDF with dfresul by column raceID,using inner join\ndfresulcons = pd.merge(dfresul,racesDF,on='raceId')\n#joining constructorDF with dfresulcons by column constructorID,using inner join\ndfresulrac = pd.merge(dfresulcons,constructorDF,on='constructorId')\n\n","224db25c":"dfresulrac.head()","df8f9430":"dfresulrac.isnull().sum()","3592ec76":"dfresulrac = dfresulrac.drop(columns=['url_x','url_y','name_y','nationality_y','url','time_y'])\ndfresulrac.head()","8d09d0f6":"coordinates=[]\nfor lat,lng in zip(circuitsDF['lat'],circuitsDF['lng']):\n  coordinates.append([lat,lng])","0c1e8b0b":"maps = folium.Map(location=[-15.788497,-47.879873],zoom_start=2,tiles='Stamen Toner')","dd3c80d5":"maps.add_child(plugins.HeatMap(coordinates))\nmaps","342efb12":"def championship_year(year):\n    classi = dfresulrac[(dfresulrac['year']== year)].groupby('driverRef')['points'].sum().reset_index()\n    classi = classi.sort_values(by=['points'],ascending=False)\n    fig = go.Figure(data=[go.Bar(\n    x=classi['driverRef'],\n    y=classi['points']\n)])\n    fig.update_layout(title={\n        'text': f\"Driver\u00b4s championship ranking of {year}\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Points',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Driver',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\n    return iplot(fig)","3f2a25cc":"# choose the year to show the ranking: 1950 - 2021\nchampionship_year(2007)","0a829473":"def championship_cons(year):\n    classi_equp = dfresulrac[(dfresulrac['year']== year)].groupby('constructorRef')['points'].sum().reset_index()\n    classi_equp = classi_equp.sort_values(by=['points'],ascending=False)\n    fig = go.Figure(data=[go.Bar(\n    x=classi_equp['constructorRef'],\n    y=classi_equp['points']\n    )])\n    fig.update_layout(title={\n        'text': f\"Constructors' Championship ranking of {year}\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Points',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Constructor',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\n    return iplot(fig)","11e06c2d":"# choose the year to show the ranking: 1950 - 2021\nchampionship_cons(2013)","508aaffc":"num_wins = dfresulrac[(dfresulrac['position']== '1')]\nnum_wins['position_mod'] = num_wins['position'].astype(int)\nnum_wins = num_wins.groupby(['driverRef','nationality_x'])['position_mod'].sum().reset_index()\nnum_wins = num_wins.sort_values(by=['position_mod'], ascending=False)","daea617b":"fig = go.Figure(data=[go.Bar(\n    x= num_wins['driverRef'],\n    y= num_wins['position_mod'],\n    hovertext = num_wins['nationality_x']\n)])\nfig.update_layout(title={\n        'text': \"Drivers with more wins\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='wins',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Driver',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\niplot(fig)","181ba146":"sum_driver = dfresulrac.groupby(['year','driverRef'])['points'].sum().reset_index()\nchampions = sum_driver.loc[sum_driver.reset_index().groupby(['year'])['points'].idxmax()]\nchampions = champions['driverRef'].value_counts().reset_index()\nchampions.rename(columns={'index':'driver','driverRef':'titles'}, inplace = True)","935b09d4":"fig = go.Figure(data=[go.Bar(\n    x=champions['driver'],\n    y=champions['titles']\n    )])\nfig.update_layout(title={\n        'text': \"Drivers with more titles\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Titles',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Driver',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\niplot(fig)","f809c5ac":"driver_pole = dfresulrac[dfresulrac['grid']== 1].groupby(by=['driverRef','nationality_x'])['grid'].sum().reset_index()\ndriver_pole = driver_pole.sort_values(by=['grid'], ascending=False)","23a65a8c":"fig = go.Figure(data=[go.Bar(\n    x=driver_pole['driverRef'],\n    y=driver_pole['grid'],\n    hovertext = driver_pole['nationality_x']\n)])\nfig.update_layout(title={\n        'text': \"Drivers with more pole positions\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Pole positions',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Driver',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\niplot(fig)","3b9102de":"p1 = dfresulrac[(dfresulrac['position']== '1')].groupby('driverRef')['position'].value_counts()\np2 = dfresulrac[(dfresulrac['position']== '2')].groupby('driverRef')['position'].value_counts()\np3 = dfresulrac[(dfresulrac['position']== '3')].groupby('driverRef')['position'].value_counts()\n#pilotos = dfresulrac.sort_values(by=['driverRef'])['driverRef'].unique()\ndriver1 = dfresulrac[(dfresulrac['position']== '1')].sort_values(by=['driverRef'])['driverRef'].unique()\ndriver2 = dfresulrac[(dfresulrac['position']== '2')].sort_values(by=['driverRef'])['driverRef'].unique()\ndriver3 = dfresulrac[(dfresulrac['position']== '3')].sort_values(by=['driverRef'])['driverRef'].unique()","2636d4b1":"fig = go.Figure(go.Bar(x=driver1, y=p1, name='1\u00ba place'))\nfig.add_trace(go.Bar(x=driver2, y=p2, name='2\u00ba place'))\nfig.add_trace(go.Bar(x=driver3, y=p3, name='3\u00ba place'))\n\nfig.update_layout(barmode='stack',title={\n        'text': \"driver with more podiums\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Podiums',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Driver',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\niplot(fig)","552533df":"fig = go.Figure(data=[go.Pie(labels=dfresulrac[(dfresulrac['position']== '1')].sort_values(by=['nationality_x'])['nationality_x'].unique(), values=dfresulrac[(dfresulrac['position']== '1')].groupby('nationality_x')['position'].value_counts(),hole=.3)])\nfig.update_layout(title={\n        'text': \"Country with more wins\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n        template = \"plotly_dark\")\niplot(fig)","aea5d1d6":"# I will update with analysis about fastest lap and pit stops","d189df46":"# drivers with more pole positions","f8e163e6":"# showing the contents of the Dataframes","9fa467cb":"# Constructors' Championship ranking by season","f8fcbe51":"# deleting unnecessary and repeated columns","2569df59":"# drivers with more wins","b2da26e4":"# joining the Dataframes","9458023f":"# showing the dataframe after the joins","bfd3d9f6":"# Loading the datas","7cf20959":"# i am importing the libraries that will be used","76cb51c3":"# country with more wins","7622caa1":"# drivers with more podiums","3e5f692f":"# checking for null values","361d21f2":"# showing all circuits that have had races through a heat map","d9499ec4":"# drivers with more titles.\nps: the result points out as champion the driver who scored the most in a season, that's why prost appears with 5 titles when he actually has 4 and senna with 2 when he actually has 3, due to the regulation of the 1988 championship, which drivers discard the worst results , hamilton has 8 titles because he is the leader of the championship until the data is updated","09a2cd41":"# driver's championship ranking by season"}}