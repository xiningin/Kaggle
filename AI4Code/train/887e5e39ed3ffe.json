{"cell_type":{"5035db76":"code","ad8c0018":"code","17b2b4f2":"code","7d1ba8a1":"code","478f7b3e":"code","6abc2f37":"code","30e999f8":"code","39259570":"code","2488b163":"code","d42233a2":"code","89b64b1a":"code","ba4c0a0c":"code","533c80fc":"code","2bd221a4":"code","dc982dad":"code","70f0b4b8":"code","8024121c":"code","5ff07407":"code","6200ac99":"code","92f9b377":"code","28fb9a95":"code","d51dbf4a":"code","0f23ff04":"code","5071d2a5":"code","cd11fd39":"markdown","b30c5fba":"markdown","cfcfb096":"markdown","2025f5a9":"markdown","946c0ee2":"markdown","97be6bff":"markdown","eebd69dc":"markdown","ad5d8ba4":"markdown","7de02e02":"markdown","7d9de3c7":"markdown","8a9d99b5":"markdown","bb1c2aeb":"markdown","8590230f":"markdown","7e2b53f3":"markdown","71bac3e2":"markdown","ec2010b0":"markdown","780e93e6":"markdown","20c80e39":"markdown","89c98a57":"markdown","c81e971c":"markdown"},"source":{"5035db76":"#Desciption: this program classifier images","ad8c0018":"import warnings\n\ndef fxn():\n    warnings.warn(\"deprecated\", DeprecationWarning)\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    fxn()","17b2b4f2":"pip install keras.utils","7d1ba8a1":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten,Conv2D, MaxPooling2D, Dropout\nfrom tensorflow.keras import layers\n#from keras.utils import to_categorical\nfrom tensorflow.keras.utils import to_categorical\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n\nplt.style.use('fivethirtyeight')","478f7b3e":"from tensorflow.keras.datasets import cifar10\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()","6abc2f37":"print(type(x_train))\nprint(type(y_train))\nprint(type(x_test))\nprint(type(y_test))\n","30e999f8":"print('x_train shape: ',x_train.shape)\nprint('y_train shape: ',y_train.shape)\nprint('x_test shape: ',x_test.shape)\nprint('y_test shape: ',y_test.shape)","39259570":"index = 0\nx_train[index]","2488b163":"img = plt.imshow(x_train[index])","d42233a2":"print('The image label is: ', y_train[index])","89b64b1a":"classification = ['airplane', 'autombile','bird','cat','deer','dog','frog','horse','ship','truck']\n#print the image class\nprint('The image class is :', classification[y_train[index][0]])","ba4c0a0c":"y_train_one_hot = to_categorical(y_train)\ny_test_one_hot = to_categorical(y_test)","533c80fc":"print(y_train_one_hot)","2bd221a4":"print('The one hot label is:', y_train_one_hot[index])","dc982dad":"x_train = x_train \/ 255\nx_test = x_test \/255","70f0b4b8":"x_train[index]","8024121c":"model = Sequential()\n\n#add the first layer\nmodel.add(Conv2D(32,(5,5), activation='relu',input_shape=(32,32,3)))\n\n#add a pooling layer\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n# Add another convolutiona layer\nmodel.add(Conv2D(32,(5,5), activation='relu'))\n\n#Add another pooling layer\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n# add a flatting layer\nmodel.add(Flatten())\n\n# add a layer with 1000 neurons\nmodel.add(Dense(1000,activation='relu'))\n\n#Add a drop out layer\nmodel.add(Dropout(0.5))\n\n# add a layer with 500 neurons\nmodel.add(Dense(500,activation='relu'))\n\n#Add a drop out layer\nmodel.add(Dropout(0.5))\n\n# add a layer with 250 neurons\nmodel.add(Dense(250,activation='relu'))\n\n# add a layer with 10 neurons\nmodel.add(Dense(10,activation='softmax'))\n\n","5ff07407":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","6200ac99":"hist = model.fit(x_train, y_train_one_hot, \n                batch_size= 256,\n                epochs= 10,\n                validation_split = 0.2)","92f9b377":"model.evaluate(x_test, y_test_one_hot)[1]","28fb9a95":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Val'], loc ='upper left')\nplt.show()","d51dbf4a":"plt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Val'], loc ='upper right')\nplt.show()","0f23ff04":"import PIL.ImageOps","5071d2a5":"import requests\nfrom PIL import Image\n\nurl = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT76mSMtKQWGstcqGi-0kPWJyVBqz8RCp8SuplMipkidRY0z9Mc&usqp=CAU'\nresponse = requests.get(url, stream = True)\nimg = Image.open(response.raw)\nplt.imshow(img)","cd11fd39":"import the libraries","b30c5fba":"## Show the images as a picture","cfcfb096":"Get the image label","2025f5a9":"# Visualize the model loss\n","946c0ee2":"# Train the model","97be6bff":"# Evaluate the model using the test data set","eebd69dc":"## Create the models architecture","ad5d8ba4":"Here we get a 4 dimentional array:\n\nwe have\n  x_train:\n- 50000 rows of data\n- 32 * 32 images\n- with depth 3(red, green, blue) \n\n  y_train:\n-50000 rows of data\n- 1 column\n\n  x_test:\n- 10000 rows of data\n- 32 * 32 images\n- with depth 3(red, green, blue) \n\n  y_test:\n-10000 rows of data\n- 1 column","7de02e02":"### look at the data types of variables","7d9de3c7":"## Take a look at the first image as an array","8a9d99b5":"## Compile the model","bb1c2aeb":"## Get the image classification","8590230f":"## Get the shape of the arrays","7e2b53f3":"## Print the new label of the image\/picture above","71bac3e2":"## print the new labels","ec2010b0":"## Normolize the pixels to be values between 0 and 1","780e93e6":"# Visualiza the model accuracy","20c80e39":"## Load the data","89c98a57":"## Convert the label into a set of 10 numbers to input into the Neural Network","c81e971c":"# Test the model with an example"}}