{"cell_type":{"76d35d97":"code","d9cc8cc2":"code","d8f08080":"code","5c312172":"code","2e0c322e":"code","71466714":"code","50c47282":"code","b4b456a0":"code","eb08f54b":"code","d63de8ab":"code","6e88ebc3":"code","3d24c431":"code","f87c902e":"code","a7aafdfe":"code","77dd567e":"code","f90dac5f":"markdown","c30f4226":"markdown","642cf732":"markdown","019eda31":"markdown","cb2c2bf1":"markdown","a7e8346c":"markdown","f8dfe1f8":"markdown","2b341800":"markdown","1ec01884":"markdown","0621dffe":"markdown","3a7303ce":"markdown","127af3d0":"markdown","bc57ce01":"markdown","7e1c3e51":"markdown"},"source":{"76d35d97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt # graphs and plotting\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9cc8cc2":"df = pd.read_csv(\"..\/input\/data-analyst-jobs\/DataAnalyst.csv\") #Pull in the DataAnalyst CSV\ndf.rename(columns = {\"Unnamed: 0\":\"Index\"}, inplace = True) #Replace the weird name for the index column\ndf.head() #View the dataframe","d8f08080":"values = df[\"Salary Estimate\"] #Puts the salary estimate \n\n#For loop to check for null values\nfor i in range(0,len(df.index)):\n    if values[i] == \"-1\": #If the estimate is null\n        df.drop(df.index[i],inplace=True) #Drop the line with the null value\ndf.reset_index(drop=True, inplace=True) #Reset indecies so we can still loop through\ndf.head() #Opens up the dataframe to take a peek","5c312172":"estimate = df[\"Salary Estimate\"].apply(lambda x: x.split(\"(\")[0]) #Lambda function to remove the (Glassdoor est.) from the row\nestimate = estimate.replace({\"\\$\" : \"\",\"K\" : \"\"},regex = True) #Takes out the dollar sign and k off of the numbers\ndf[\"Salary Estimate\"] = estimate #Puts the variable removing the fluff back into the dataframe\ndf.head() #Take a peek at the dataframe","2e0c322e":"df[\"low_estimate\"] = df[\"Salary Estimate\"].apply(lambda x: x.split(\"-\")[0]).astype(int) #Gets the low salary estimate as a new column\ndf[\"high_estimate\"] = df[\"Salary Estimate\"].apply(lambda x: x.split(\"-\")[1]).astype(int) #Gets the high salary estimate as a new column\ndf.head() #Take a peek at the dataframe","71466714":"states = df[\"Location\"].apply(lambda x: x.split(\", \")[1]) #Pull the state from the location\ndf[\"State\"] = states.apply(lambda x: \"CO\" if \"Arapahoe\" in x else x) #Arapahoe comes from \"Greenwood Village, Arapahoe, CO\" in the data\ndf[\"State\"].value_counts() #Make sure there is no problems in the state data","50c47282":"df[\"Easy Apply\"] = df[\"Easy Apply\"].apply(lambda x: False if x==\"-1\" else True) #Fixed Easy Apply to True\/False\ndf[\"Competitors\"] = df[\"Competitors\"].apply(lambda x: \"None\" if x==\"-1\" else x) #Changed competitors from -1 to None\ndf.head() #Take a peek at the data","b4b456a0":"df[\"Company Name\"] = df[\"Company Name\"].astype(str).apply(lambda x: x.split(\"\\n\")[0]) #Removed the rating off the end of the company name\ndf[\"Job Description\"] = df[\"Job Description\"].replace({\"\\n\" : \" \"}, regex=True) #Turned the description into one long string, deleting \\n characters\ndf.head() #Take a peek at the dataframe","eb08f54b":"df[\"Description Length\"] = df[\"Job Description\"].apply(lambda x: len(x)) #Get the length of the description using a lambda function\ndf.head() #Take a peek at the data","d63de8ab":"df[\"Has_Competitor\"] = df[\"Competitors\"].apply(lambda x: False if x==\"None\" else True) #Created a new row to see if the company has any competitors\nprint(df[\"Has_Competitor\"].value_counts()) #Display the counts of the true or false","6e88ebc3":"df.Industry = df.Industry.apply(lambda x: \"Undefined\" if x==\"-1\" else x) #another cleaning aspect it seems I overlooked, but fixed here\nprint(df[\"Industry\"].value_counts()) #Display the counts of each industry","3d24c431":"df[\"Revenue\"] = df[\"Revenue\"].apply(lambda x: \"Unknown \/ Non-Applicable\" if x==\"-1\" else x) #Fixing the null values in the revenue column\nprint(df[\"Revenue\"].value_counts()) #Display the counts of each revenue class","f87c902e":"df[\"Size\"] = df[\"Size\"].apply(lambda x: \"Unknown\" if x==\"-1\" else x) #Update null values in the Size area\nprint(df[\"Size\"].value_counts()) #Display the counts of each size class","a7aafdfe":"df = df.drop([\"Index\"], axis=1) #Drop the index column, as it is not really needed in analysis\ndf.head()","77dd567e":"df.to_csv(r\".\/DataAnalytics_clean.csv\", index = False) #Sends the data to a new csv","f90dac5f":"# Fix the null values (-1) in the Company Size column","c30f4226":"# Divide the salary estimate into high and low for later math","642cf732":"# Get the length of the description","019eda31":"# Pull the state out from the city, as a better metric","cb2c2bf1":"# Make a column simply saying if there is a competitor or not","a7e8346c":"# Change the null values to Unknown in the Revenue column","f8dfe1f8":"# Fix easy apply and competitors to remove the -1","2b341800":"# Drop the Index column, as it was only needed in cleanup","1ec01884":"# Change the -1 null value to unknown in Industry","0621dffe":"# Pulls in the CSV for the DataAnalyst","3a7303ce":"# Removes the salary listings that are -1 (Null)","127af3d0":"# Removes the fluff from the Salary Estimate Column","bc57ce01":"# Send newly cleaned data to a new CSV","7e1c3e51":"# Replace the newline \\n from Description and Company Name"}}