{"cell_type":{"942219a2":"code","1a93ace4":"code","8c4b0f85":"code","73f4123b":"code","57839ecd":"code","77c3b68e":"code","81186bc0":"code","fd4b0dd6":"code","fa3fb509":"code","445e0d40":"code","6cbd80f6":"code","084d07c7":"code","892ddc12":"code","67bab033":"code","7a80fc07":"code","f4631ccd":"code","f86f9bd7":"code","bdd492ce":"code","e78d4fc2":"code","1b3b6405":"code","c9ec6cfd":"code","d89dd0b4":"markdown","4ac3e899":"markdown","0a3ce047":"markdown","08658733":"markdown","29e75ac3":"markdown","b2a4ca10":"markdown","dbfd1af1":"markdown","318dc1f4":"markdown","16eedcb2":"markdown","691a149c":"markdown"},"source":{"942219a2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport tensorflow as tf\nfrom tensorflow.keras import datasets,models,layers\nimport matplotlib.pyplot as plt\n%matplotlib inline","1a93ace4":"(x_train,y_train),(x_test,y_test)=datasets.cifar10.load_data()","8c4b0f85":"x_train.shape","73f4123b":"x_test.shape","57839ecd":"y_train=y_train.reshape(-1,)\ny_test=y_test.reshape(-1,)","77c3b68e":"classes = [\"airplane\",\"automobile\",\"bird\",\"cat\",\"deer\",\"dog\",\"frog\",\"horse\",\"ship\",\"truck\"]","81186bc0":"def plot(x,y,index):\n    plt.imshow(x[index])\n    plt.xlabel(classes[y[index]])","fd4b0dd6":"plot(x_train,y_train,0)","fa3fb509":"x_train[0]","445e0d40":"x_train=x_train\/255\nx_test=x_test\/255","6cbd80f6":"ann=models.Sequential([\n    layers.Flatten(input_shape=(32,32,3)),\n    layers.Dense(300,activation='relu'),\n    layers.Dense(100,activation='relu'),\n    layers.Dense(10,activation='sigmoid')\n])\nann.compile(optimizer='adam',\n           loss='sparse_categorical_crossentropy',\n           metrics=['accuracy'])\nann.fit(x_train,y_train,epochs=30)","084d07c7":"ann.evaluate(x_test,y_test)","892ddc12":"y_probs=ann.predict(x_test)","67bab033":"y_pred=[np.argmax(element) for element in y_probs]\ny_pred[:5]","7a80fc07":"from sklearn.metrics import classification_report\nprint(classification_report(y_pred,y_test))","f4631ccd":"cnn=models.Sequential([\n    layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(32,32,3)),\n    layers.MaxPooling2D((2,2)),\n    layers.Conv2D(filters=64,kernel_size=(3,3),activation='relu'),\n    layers.MaxPooling2D((2,2)),\n    layers.Flatten(),\n    layers.Dense(64,activation='relu'),\n    layers.Dense(10,activation='softmax')\n])\n\ncnn.compile(optimizer='adam',\n           loss='sparse_categorical_crossentropy',\n           metrics=['accuracy'])\ncnn.fit(x_train,y_train,epochs=30)","f86f9bd7":"cnn.evaluate(x_test,y_test)","bdd492ce":"y_probcnn=cnn.predict(x_test)","e78d4fc2":"y_predcnn=[np.argmax(ele) for ele in y_probcnn]\ny_predcnn[0:5]","1b3b6405":"y_test[:5]","c9ec6cfd":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_predcnn))","d89dd0b4":"## Evaluating Results","4ac3e899":"50000 train images each of size 32x32 having 3 channels(RGB)","0a3ce047":"#### Converting y to 1-D array so as to access the class names","08658733":"10000 test images having same size as that of input images","29e75ac3":"## Loading The CIFAR 10 Dataset from inbuilt KerasAPI","b2a4ca10":"## Using ANN for image classification","dbfd1af1":"#### Normalizing values of x between 0 to 1 by dividing every value of the array by 255","318dc1f4":"## Using CNN for image classification","16eedcb2":"Now using CNN we have increase our accuracy to 68 percent","691a149c":"Since we have got an accuracy of only 49% ANN is not suitable for image classification"}}