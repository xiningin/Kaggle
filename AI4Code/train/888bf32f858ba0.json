{"cell_type":{"d0b9acaa":"code","2e89c3cb":"code","e322be53":"code","10e0f0cb":"code","50cd43fb":"code","88bdbc61":"code","bdde40bf":"code","eb5dec1f":"code","13f438cc":"code","3e960245":"code","d691026d":"code","a3f165d3":"code","cef53481":"code","f1bbebd1":"code","04c69b22":"code","5dc6344d":"markdown","1d5e804e":"markdown","aa13ba5a":"markdown"},"source":{"d0b9acaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e89c3cb":"import pandas as pd","e322be53":"root_path = \"..\/input\/global-wheat-detection\/\"\ntrain_folder = os.path.join(root_path, \"train\")\ntest_folder = os.path.join(root_path, \"test\")\ntrain_csv_path = os.path.join(root_path, \"train.csv\")\nsample_submission = os.path.join(root_path, \"sample_submission.csv\")","10e0f0cb":"train = pd.read_csv('..\/input\/global-wheat-detection\/train.csv')\ntrain.head()","50cd43fb":"train.shape","88bdbc61":"train.isnull().sum()","bdde40bf":"train.info()","eb5dec1f":"train['bbox'] = train['bbox'].apply(lambda x: x[1:-1].split(\",\"))\ntrain['x_min'] = train['bbox'].apply(lambda x: x[0]).astype('float32')\ntrain['y_min'] = train['bbox'].apply(lambda x: x[1]).astype('float32')\ntrain['width'] = train['bbox'].apply(lambda x: x[2]).astype('float32')\ntrain['height'] = train['bbox'].apply(lambda x: x[3]).astype('float32')\ntrain = train[['image_id','x_min', 'y_min', 'width', 'height']]\ntrain[\"x_max\"] = train.apply(lambda col: col.x_min + col.width, axis=1)\ntrain[\"y_max\"] = train.apply(lambda col: col.y_min + col.height, axis = 1)\ntrain.head()","13f438cc":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","3e960245":"train.corr()","d691026d":"sns.heatmap(train.corr(), cmap=\"YlGnBu\", annot=True, linewidths=2)","a3f165d3":"# Visualize few samples of current training dataset\nfig, ax = plt.subplots(nrows=2, ncols=4, figsize=(20, 10))\ncount=1000\nfor row in ax:\n    for col in row:\n        img = plt.imread(f'{os.path.join(root_path, \"train\", train[\"image_id\"].unique()[count])}.jpg')\n        col.grid(False)\n        col.set_xticks([])\n        col.set_yticks([])\n        col.imshow(img)\n        count += 1\nplt.show()","cef53481":"import matplotlib.patches as patches","f1bbebd1":"def get_bbox(image_id, df, col, color='white'):\n    bboxes = train[train['image_id'] == image_id]\n    \n    for i in range(len(bboxes)):\n        # Create a Rectangle patch\n        rect = patches.Rectangle(\n            (bboxes['x_min'].iloc[i], bboxes['y_min'].iloc[i]),\n            bboxes['width'].iloc[i], \n            bboxes['height'].iloc[i], \n            linewidth=2, \n            edgecolor=color, \n            facecolor='none')\n\n        # Add the patch to the Axes\n        col.add_patch(rect)","04c69b22":"# Visualize few samples of current training dataset\nfig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20, 20))\ncount=0\nfor row in ax:\n    for col in row:\n        img_id = train[\"image_id\"].unique()[count]\n        img = plt.imread(f'{os.path.join(root_path, \"train\", img_id)}.jpg')\n        col.grid(False)\n        col.set_xticks([])\n        col.set_yticks([])\n        get_bbox(img_id, train, col, color='red')\n        col.imshow(img)\n        count += 1\nplt.show()","5dc6344d":"## Missing Values","1d5e804e":"## EDA","aa13ba5a":"## Loading Data"}}