{"cell_type":{"6dc6f95d":"code","5b0b472b":"code","5f5e1d35":"code","4848af46":"code","0bbe0dbb":"code","ec57e264":"code","f0b904b7":"code","936d0871":"code","dc417f0c":"code","50a1fd3c":"code","bf33917f":"code","e8c66912":"code","a43be8b5":"code","dcccec28":"code","6f527e54":"code","c122f63c":"code","02a6262a":"code","1c8a9bd6":"code","726ca247":"code","c10c93bc":"code","f257cfe0":"code","ae433d65":"code","e2d13e3d":"code","d009229c":"code","c04ba7b2":"code","613140e0":"code","0cfa51bc":"code","f86240c8":"code","0db601b4":"code","c9af8f6f":"code","7e2153ec":"code","bbf79937":"code","14373be1":"code","cc1008ed":"code","86a1da14":"code","5b7eb47e":"code","bc0014be":"code","581efc2f":"code","dfad5690":"code","b53a9f4c":"code","0357839b":"code","6c876dba":"code","adde668f":"code","c3c80470":"code","f903ec85":"code","a9f8b126":"code","7738b8fb":"code","ba481ae5":"code","d5a7f970":"code","d6f16fce":"code","74f8de6b":"code","99766b48":"code","6c9411ca":"code","8d70a71c":"code","9b0c16f4":"code","795ea58a":"code","85d9b20b":"code","495a077b":"code","23b407d6":"code","21b45c0b":"code","2d640a74":"code","01e7c7cf":"code","92b50e5f":"code","a55b3388":"code","308bdba7":"code","07735780":"code","c2819686":"code","4a87987a":"code","d562263e":"code","1a2384a9":"code","b36ac355":"code","8a8f2171":"code","d1000d4c":"code","4204a79b":"code","63e73ba6":"code","67f45212":"code","6430bb28":"code","86a86aee":"code","4191cc2c":"code","27a967d4":"code","26aa735e":"code","239800ed":"code","48e7305d":"markdown","48016aa2":"markdown","011eb5d0":"markdown","3d288248":"markdown","cb267365":"markdown","5241bcc3":"markdown","28aa86c8":"markdown","60316205":"markdown","c99cc418":"markdown","cb14469f":"markdown","b2e46589":"markdown","63a8e03d":"markdown","741c0c8b":"markdown","e9234df6":"markdown","367c4804":"markdown","ced877f1":"markdown","75205506":"markdown","3d4b173b":"markdown","60a2c48a":"markdown","ab4e2dec":"markdown"},"source":{"6dc6f95d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","5b0b472b":"df = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')","5f5e1d35":"df.head()","4848af46":"df.info()","0bbe0dbb":"df['Stay'].nunique()","ec57e264":"df['Stay'].unique()","f0b904b7":"plt.figure(figsize=(15,6))\nsns.countplot(x='Stay',data=df)","936d0871":"df.drop(['case_id','Hospital_code'],axis=1,inplace=True)","dc417f0c":"def stay_cat_encoder(x):\n    if x == '0-10':\n        return 0\n    elif x == '11-20':\n        return 1\n    elif x == '21-30':\n        return 2\n    elif x == '31-40':\n        return 3\n    elif x == '41-50':\n        return 4\n    elif x == '51-60':\n        return 5\n    elif x == '61-70':\n        return 6\n    elif x == '71-80':\n        return 7\n    elif x == '81-90':\n        return 8\n    elif x == '91-100':\n        return 9\n    elif x == 'More than 100 Days':\n        return 10","50a1fd3c":"df['Stay_cat'] = df['Stay'].apply(stay_cat_encoder)","bf33917f":"df.corr()['Stay_cat'].sort_values()[:-1]","e8c66912":"df.head()","a43be8b5":"df.drop(['City_Code_Hospital','patientid','City_Code_Patient'],axis=1,inplace=True)","dcccec28":"df.head()","6f527e54":"df['Hospital_type_code'].nunique()","c122f63c":"df['Hospital_type_code'].unique()","02a6262a":"df['Hospital_region_code'].unique()","1c8a9bd6":"df.isnull().sum()","726ca247":"11300\/(len(df)-113) # percentage of missing data in Bed Grade column","c10c93bc":"df['Bed Grade'].median()","f257cfe0":"def imputer_Bed_Grade(x):\n    if pd.isnull(x):\n        return 3\n    else:\n        return x","ae433d65":"df['Bed Grade'] = df['Bed Grade'].apply(imputer_Bed_Grade)","e2d13e3d":"df.isnull().sum()","d009229c":"df['Bed Grade'].unique()","c04ba7b2":"df['Age'].nunique()","613140e0":"df['Age'].unique()","0cfa51bc":"def Age_cat_encoder(x):\n    if x == '0-10':\n        return 1\n    elif x == '11-20':\n        return 2\n    elif x == '21-30':\n        return 3\n    elif x == '31-40':\n        return 4\n    elif x == '41-50':\n        return 5\n    elif x == '51-60':\n        return 6\n    elif x == '61-70':\n        return 7\n    elif x == '71-80':\n        return 8\n    elif x == '81-90':\n        return 9\n    elif x == '91-100':\n        return 10","f86240c8":"df['Age_cat'] = df['Age'].apply(Age_cat_encoder)","0db601b4":"df.corr()['Stay_cat'].sort_values()[:-1]","c9af8f6f":"df.select_dtypes(include=['object']).columns","7e2153ec":"from sklearn.preprocessing import LabelEncoder","bbf79937":"le = LabelEncoder()","14373be1":"df3 = df.copy()","cc1008ed":"df3.drop('Age',axis=1,inplace=True)","86a1da14":"df3.select_dtypes(include=['object']).columns","5b7eb47e":"df3['Hospital_type_code'] = le.fit_transform(df3['Hospital_type_code'])\ndf3['Hospital_region_code'] = le.fit_transform(df3['Hospital_region_code'])\ndf3['Department'] = le.fit_transform(df3['Department'])\ndf3['Ward_Type'] = le.fit_transform(df3['Ward_Type'])\ndf3['Ward_Facility_Code'] = le.fit_transform(df3['Ward_Facility_Code'])\ndf3['Type of Admission'] = le.fit_transform(df3['Type of Admission'])\ndf3['Severity of Illness'] = le.fit_transform(df3['Severity of Illness'])","bc0014be":"df3.info()","581efc2f":"df3.corr()['Stay_cat'].sort_values()[:-1]","dfad5690":"X = df3.drop(['Stay_cat','Stay'],axis=1)\ny = df3['Stay']","b53a9f4c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","0357839b":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()","6c876dba":"X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","adde668f":"X_train.shape","c3c80470":"from sklearn.linear_model import LogisticRegression","f903ec85":"lr = LogisticRegression(fit_intercept=True,n_jobs=-1)","a9f8b126":"lr.fit(X_train,y_train)","7738b8fb":"lr_pred = lr.predict(X_test)","ba481ae5":"from sklearn.metrics import classification_report,confusion_matrix","d5a7f970":"print(confusion_matrix(y_test,lr_pred))\nprint('\\n')\nprint(classification_report(y_test,lr_pred))","d6f16fce":"from sklearn.ensemble import RandomForestClassifier","74f8de6b":"rf = RandomForestClassifier(n_estimators=100)","99766b48":"rf.fit(X_train,y_train)","6c9411ca":"rf_pred = rf.predict(X_test)","8d70a71c":"print(classification_report(y_test,rf_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,rf_pred))","9b0c16f4":"from sklearn.neighbors import KNeighborsClassifier","795ea58a":"knn = KNeighborsClassifier(n_neighbors=100,n_jobs=-1)","85d9b20b":"knn.fit(X_train,y_train)","495a077b":"knn_pred = knn.predict(X_test)\nprint(classification_report(y_test,knn_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,knn_pred))","23b407d6":"from catboost import CatBoostClassifier\ncb = CatBoostClassifier(random_state=42,use_best_model=True,iterations=1000)\ncb.fit(X_train,y_train,use_best_model=True,verbose=100,eval_set=(X_test,y_test))","21b45c0b":"cb_pred = cb.predict(X_test)\nprint(classification_report(y_test,cb_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,cb_pred))","2d640a74":"df4 = df3.copy()","01e7c7cf":"len(df4[df4['Stay_cat']==0])","92b50e5f":"plt.figure(figsize=(15,6))\nsns.countplot(x='Stay',data=df4)","a55b3388":"for i in df4['Stay'].unique():\n    print(f'count of category {i} is : ')\n    print(len(df4[df4['Stay']==i]))\n    ","308bdba7":"d_0 = df4[df4['Stay_cat']==0][:2700]","07735780":"d_1 = df4[df4['Stay_cat']==1][:2700]","c2819686":"d_2 = df4[df4['Stay_cat']==2][:2700]\nd_3 = df4[df4['Stay_cat']==3][:2700]\nd_4 = df4[df4['Stay_cat']==4][:2700]\nd_5 = df4[df4['Stay_cat']==5][:2700]\nd_6 = df4[df4['Stay_cat']==6][:2700]\nd_7 = df4[df4['Stay_cat']==7][:2700]\nd_8 = df4[df4['Stay_cat']==8][:2700]\nd_9 = df4[df4['Stay_cat']==9][:2700]\nd_10 = df4[df4['Stay_cat']==10][:2700]","4a87987a":"df_new = pd.concat([d_0,d_1,d_2,d_3,d_4,d_5,d_6,d_7,d_8,d_9,d_10],axis=0)","d562263e":"df_new.head()","1a2384a9":"df_new.corr()['Stay_cat'].sort_values()[:-1]","b36ac355":"X = df_new.drop(['Stay_cat','Stay'],axis=1)\ny = df_new['Stay']","8a8f2171":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","d1000d4c":"X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","4204a79b":"len(X)","63e73ba6":"X_train.shape","67f45212":"cb = CatBoostClassifier(random_state=42,use_best_model=True,iterations=1000)\ncb.fit(X_train,y_train,use_best_model=True,verbose=100,eval_set=(X_test,y_test))","6430bb28":"cb_pred = cb.predict(X_test)\nprint(classification_report(y_test,cb_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,cb_pred))","86a86aee":"X2 = df4.drop(['Stay_cat','Stay'],axis=1)\ny2 = df4['Stay']\nX2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.2, random_state=42)\nX2_train = sc.fit_transform(X2_train)\nX2_test = sc.transform(X2_test)","4191cc2c":"cb_pred2 = cb.predict(X2_test)\nprint(classification_report(y2_test,cb_pred2))\nprint('\\n')\nprint(confusion_matrix(y2_test,cb_pred2))","27a967d4":"X = df3.drop(['Stay_cat','Stay'],axis=1)\ny = df3['Stay']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","26aa735e":"cb = CatBoostClassifier(random_state=42,use_best_model=True,iterations=600)\ncb.fit(X_train,y_train,use_best_model=True,verbose=100,eval_set=(X_test,y_test))","239800ed":"cb_pred = cb.predict(X_test)\nprint(classification_report(y_test,cb_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,cb_pred))","48e7305d":"# KNN ACCURACY = 38% with k=100","48016aa2":"# Hence, the best approach is to use CatBoost classifier on the original dataset, which will give around 41% accuracy","011eb5d0":"# NOW LET'S DO LABEL ENCODING OF ALL THESE OBJECT COLUMNS","3d288248":"# So, when the resampled CatBoost model is applied to the original dataset, the model's performance is very poor.","cb267365":"# RF = 35% with n=100 (it is the same even when n=500)","5241bcc3":"# Let's get rid of unneccessary columns\n# City_Code_Patient , City_Code_Hospital, patientid ","28aa86c8":"# CatBoost accuracy on resampled dataset = 32%\n# CatBoost seems to perform not as good as it performed on the original dataset","60316205":"# 1) LOGISTIC REGRESSION","c99cc418":"# we'll make a dataset which conatins only 2700 values from each category","cb14469f":"# Bed Grade has some missing values...let's try filling those..since only less than 0.4% of data is missing we can fit missing values with the median\/mean as it won't affect accuracy much","b2e46589":"# MISSING DATA HAS BEEN TAKEN CARE OF","63a8e03d":"# 3) CATBOOST","741c0c8b":"# 3) KNN","e9234df6":"# CatBoost = 41% ACCURACY\n# So far, CatBoost seems to be the best model","367c4804":"# TRYING THE APPROACH OF RESAMPLING OF DATASET (NORMALLY USED IN HIGHLY IMBALANCED DATASET)","ced877f1":"# we'll go with median","75205506":"# LR = 38% ; can't use thise model as this model couldn't calculate F-1 score properly","3d4b173b":"# DROPPING SOME UNNECCESSARY COLUMNS","60a2c48a":"# make a function and create another column as 'stay_category'(number it from 1 to 11)...make it int..then use df.corr()","ab4e2dec":"# 2) RANDOM FOREST"}}