{"cell_type":{"2eb8015b":"code","6b22145a":"code","7f99ce54":"code","93a1cb83":"code","5b071af9":"code","07d78861":"code","064eb056":"code","33042ce5":"code","37b235d1":"code","fef8fcd2":"code","d32b84b5":"code","d5693971":"code","a34483e3":"code","a736d6d0":"code","0e9c7e1e":"code","b5f8a301":"code","1f84fd40":"code","516da1f9":"code","be707b2e":"code","aa5fd504":"code","1c63afef":"code","49d31850":"code","bab6204a":"code","6587895c":"code","3ff7e554":"code","813c44d5":"code","eede9525":"code","9f392e45":"code","93e83897":"code","817e656e":"code","4e1e9860":"code","3a92c015":"code","c249911c":"code","90a1a498":"code","82f15864":"code","4186930c":"code","d72e4e23":"code","7de38653":"code","6f86ed72":"code","b8598490":"code","c46705d6":"code","c26d3148":"markdown","d7daeeff":"markdown","fc1a2fdb":"markdown","0aa67b5b":"markdown","296aac19":"markdown","7933a35a":"markdown","25285c47":"markdown","71947742":"markdown","08853052":"markdown"},"source":{"2eb8015b":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6b22145a":"df = pd.read_csv(\"..\/input\/Churn_Modelling.csv\")\ndf.head()","7f99ce54":"# Column Headings\n\nprint(list(df.columns))","93a1cb83":"df.set_index('RowNumber')\ndf.RowNumber.count()","5b071af9":"# so we have 1000 rows of data with 14 column headings","07d78861":"# Further Information about data\ndf.info()","064eb056":"# 10,000 rows with no NaN value","33042ce5":"#  Different Column Exploration\nprint(df[\"Geography\"].unique())\nprint(df[\"Tenure\"].unique())\nprint(df[\"NumOfProducts\"].unique())","37b235d1":"#Looking at the results we can say that we have 3 main geographical region in our dataset,i.e.,France,Spain and Germany.\n#Following: [ 2  1  8  7  4  6  3 10  5  9  0] tenure\n#And 4 different Number of Products","fef8fcd2":"# Exited Count\n\npd.value_counts(df['Exited'].values, sort=False)","d32b84b5":"# IsActive Count\ndf[\"IsActiveMember\"].value_counts()","d5693971":"#So we have approximately 8000 costumer who does not Exited and aprrox. 2000 count that Exited\n#And Aprroximately 5000 are still active membert and approx. 4.8k are not an active member","a34483e3":"# Stastical Analysis Of Dataset\ndf.describe()","a736d6d0":"# Costumer Left\n\nleft=df.groupby('Exited').count()\nplt.figure(figsize=(5,5))\nplt.bar(left.index.values, left['RowNumber'])\nplt.xlabel('Left')\nplt.ylabel('Number of Costumer')\nplt.show()","0e9c7e1e":"#  Number of costumer from each Region\n\nregion=df.groupby('Geography').count()\nplt.bar(region.index.values, region['RowNumber'])\nplt.xlabel('Region')\nplt.ylabel('Number of Costumer')\nplt.show()","b5f8a301":"# Most of the costumer are from France and number of costumer from Germany and Spain are equal.","1f84fd40":"# Total count of costumer based on Gender\n\ngender=df.groupby('Gender').count()\nplt.bar(gender.index.values, gender['RowNumber'])\nplt.xlabel('Age')\nplt.ylabel('Number of Costumer')\nplt.show()","516da1f9":"# we have more male costumer than the female costumer","be707b2e":"# Total count of costumer based on Different AgeGroup\n\nage=df.groupby('Age').count()\nplt.figure(figsize=(12,6))\nplt.bar(age.index.values, age['RowNumber'])\nplt.xlabel('Age')\nplt.ylabel('Number of Costumer')\nplt.show()","aa5fd504":"# most of the Costumer lies between age group of 25-50","1c63afef":"# Total count of costumer based on Credit Score\n\ncred_sco=df.groupby('CreditScore').count()\nplt.figure(figsize=(12,6))\nplt.bar(cred_sco.index.values, cred_sco['RowNumber'])\nplt.xlabel('Credit Score')\nplt.ylabel('Number of Employees')\nplt.show()\nprint(\"Max of Credit Score:\", df[\"CreditScore\"].max())\ncount3=0\nfor i in df[\"CreditScore\"]:\n    if i==850:\n        count3=count3+1\nprint(\"Costumers with max Credit Score:\", count3)","49d31850":"# Subplots For various parameters \n\nfeatures=[ 'Geography', 'Gender','Tenure', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'Exited']\nfig=plt.subplots(figsize=(15,15))\nfor i, j in enumerate(features):\n    plt.subplot(3, 3, i+1)\n    plt.subplots_adjust(hspace = 1.0)\n    sns.countplot(x=j,data = df)\n    plt.title(\"No. of costumers\")","bab6204a":"# plot based on Number of costumer who exited based on differnt parameters\nfig=plt.subplots(figsize=(15,15))\nfor i, j in enumerate(features):\n    plt.subplot(4, 2, i+1)\n    plt.subplots_adjust(hspace = 1.0)\n    sns.countplot(x=j,data = df, hue='Exited')\n    plt.title(\"No. of costumer\")","6587895c":"# In the plots shown above the Orange line represent the count of the costumer who \"Exited\"  \n# title shows the Parameter on which it is counted ","3ff7e554":"# Data Preprocessing for developing model","813c44d5":"# Keeping only those column which are useful for prediction \n#like RowNumber and CostumerID wont affect the prediction.\ncolumn_to_keep=['CreditScore', 'Geography', 'Gender', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary', 'Exited']\ndf=df[column_to_keep]\ndf.head()","eede9525":"# Representing Gender and Age Value in Numeric \ndf[\"Geography\"][df[\"Geography\"]==\"France\"]=1\ndf[\"Geography\"][df[\"Geography\"]==\"Spain\"]=2\ndf[\"Geography\"][df[\"Geography\"]==\"Germany\"]=3\n\ndf[\"Gender\"][df[\"Gender\"]==\"Female\"]=1\ndf[\"Gender\"][df[\"Gender\"]==\"Male\"]=2\n\ndf.head()","9f392e45":"#finding Correlation between parametrs \ncorr=df.corr(method ='pearson') \ncorr","93e83897":"# Correlation Heatmap Using seaborn library\nsns.heatmap(corr, xticklabels=corr.columns,yticklabels=corr.columns)","817e656e":"# Excluding \"HasCrCard\"  \n\ncolumn_to_keep2=['CreditScore', 'Geography', 'Gender', 'Age',\"HasCrCard\", 'Tenure', 'Balance', 'NumOfProducts', 'IsActiveMember', 'EstimatedSalary', 'Exited']\ndf=df[column_to_keep2]","4e1e9860":"# Preparing Data For Splitting And Testing\nX=df.iloc[:,0:10]\nY=df.iloc[:,10]","3a92c015":"# Splitting Data In Training Set and Test Set \n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y,test_size=0.05,random_state = 0)\nY_train=Y_train.astype('int')","c249911c":"# Feature Scaling\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","90a1a498":"# Logistic Regression Algorithm\n\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train,Y_train)","82f15864":"# Prediction\nY_pred = classifier.predict(X_test)","4186930c":"# Confusion Matrix For Evaluation\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(Y_test, Y_pred)\nprint(confusion_matrix)","d72e4e23":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(Y_test, Y_pred))\n# Model Precision\nprint(\"Precision:\",metrics.precision_score(Y_test, Y_pred))\n# Model Recall\nprint(\"Recall:\",metrics.recall_score(Y_test, Y_pred))","7de38653":"from sklearn.neighbors import KNeighborsClassifier\nclassifier2 = KNeighborsClassifier(n_neighbors = 15, metric = 'minkowski', p = 2)\nclassifier2.fit(X_train, Y_train)","6f86ed72":"# Prediction\nY_pred2 = classifier2.predict(X_test)\n","b8598490":"# Confusion Matrix for evaluation\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(Y_test, Y_pred2)\nprint(confusion_matrix)","c46705d6":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(Y_test, Y_pred2))\n# Model Precision\nprint(\"Precision:\",metrics.precision_score(Y_test, Y_pred2))\n# Model Recall\nprint(\"Recall:\",metrics.recall_score(Y_test, Y_pred2))","c26d3148":"# LogisticRegression","d7daeeff":"# Data Visualization","fc1a2fdb":"# KNN ","0aa67b5b":"# Importing Libraries\nImporting various libraries that are used in visualization and prediction of the dataset.\n","296aac19":"# Data Insights\n","7933a35a":"# Results And Conclusion\nThe datasets is Visualized based on different criterion.\nThe prediction of CostumerChurn is performed using LogisticRegression with accuracy of 82.4% and\nusing KNN with accuracy of 86%.","25285c47":"# Developing Model","71947742":"# Building Prediction Model","08853052":"# Loading Data\nLoading our churn_modelling dataset"}}