{"cell_type":{"8301aa32":"code","ce3dc2c5":"code","111003dc":"code","8c0aa298":"code","91e569dc":"code","b441c96f":"code","f601addc":"code","ca53a6ac":"code","d70459d1":"code","d6ef94a1":"code","022fb566":"code","be87a141":"code","49a5706b":"code","4bd92f9e":"code","c5b40b91":"code","23a849b2":"code","fbfd2ae0":"code","e47672af":"markdown","11beb8c9":"markdown","65312f0b":"markdown","76e63e80":"markdown","0b7891f3":"markdown","03b2d0d7":"markdown","cd9465dc":"markdown","41dd796b":"markdown","78cd8bca":"markdown","9566dc71":"markdown"},"source":{"8301aa32":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce3dc2c5":"import warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_rows', 1000)\nfrom sklearn.metrics import mean_absolute_error\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom scipy.stats import boxcox\nfrom scipy.special import inv_boxcox\nfrom sklearn.decomposition import PCA, KernelPCA","111003dc":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(\"Datasets loaded\")","8c0aa298":"train.describe().T","91e569dc":"from collections import Counter\nnum_col = train.loc[:,'MSSubClass':'SaleCondition'].select_dtypes(exclude=['object']).columns\n# Outlier detection \n\ndef detect_outliers(df,n,features):\n    \"\"\"\n    Takes a dataframe df of features and returns a list of the indices\n    corresponding to the observations containing more than n outliers according\n    to the Tukey method.\n    \"\"\"\n    outlier_indices = []\n    \n    # iterate over features(columns)\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 1.7 * IQR ## increased to 1.7\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        \n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n        \n    # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)        \n    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n    \n    return multiple_outliers   \n\n# detect outliers \nOutliers_to_drop = detect_outliers(train,2, num_col)\ntrain.loc[Outliers_to_drop] # Show the outliers rows\n","b441c96f":"# Drop outliers\ntrain = train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)\nprint('Outliers dropped')","f601addc":"df = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'], test.loc[:,'MSSubClass':'SaleCondition']))\nprint('Concatenation of train and test datasets finished')","ca53a6ac":"# before tuning\ndef basic_details(df):\n    b = pd.DataFrame()\n    b['Missing value'] = df.isnull().sum()\n    b['N unique value'] = df.nunique()\n    b['dtype'] = df.dtypes\n    return b\nbasic_details(df)","d70459d1":"df['MSZoning'].fillna('N')\ndf['LotFrontage'].fillna(df['LotFrontage'].median(), inplace = True)\ndf['Alley'].fillna('N')\ndf['Exterior1st'].fillna('N')\ndf['Exterior2nd'].fillna('N')\ndf['Utilities'].fillna('N')\ndf['MasVnrType'].fillna('N')\ndf['BsmtFullBath'].fillna(0)\ndf['BsmtHalfBath'].fillna(0)\ndf['FullBath'].fillna(0)\ndf['HalfBath'].fillna(0)\ndf['KitchenQual'].fillna('N')\ndf['Functional'].fillna('N')\ndf['FireplaceQu'].fillna('N')\ndf['GarageType'].fillna('N')\ndf['GarageYrBlt'].fillna(0,inplace=True)\ndf['GarageFinish'].fillna('N')\ndf['GarageCars'].fillna(0)\ndf['GarageArea'].fillna(0,inplace=True)\ndf['GarageQual'].fillna('N')\ndf['GarageCond'].fillna('N')\ndf['BsmtFinSF2'].fillna(0,inplace=True)\ndf['MasVnrArea'].fillna(0,inplace=True)\ndf['BsmtFinSF1'].fillna(0,inplace=True)\ndf['SaleType'].fillna('N')\ndf['BsmtUnfSF'].fillna(0,inplace=True)\ndf['TotalBsmtSF'].fillna(0,inplace=True)\ndf['PoolQC'].fillna('N')\ndf['Fence'].fillna('N')\ndf['MiscFeature'].fillna('N')\ndf['BsmtQual'].fillna('N')\ndf['BsmtCond'].fillna('N')\ndf['BsmtExposure'].fillna('N')\ndf['BsmtFinType1'].fillna('N')\ndf['BsmtFinType2'].fillna('N')\ndf['Electrical'].fillna('N')\ndf[\"AllSF\"] = df[\"GrLivArea\"] + df[\"TotalBsmtSF\"]\ndf['Area'] = df['LotArea']*df['LotFrontage']\ndf['Area_log'] = np.log1p(df['Area'])\n\ndef Gar_category(cat):\n    if cat <= 250:\n        return 1\n    elif cat <= 500 and cat > 250:\n        return 2\n    elif cat <= 1000 and cat > 500:\n        return 3\n    return 4\ndf['GarageArea_cat'] = df['GarageArea'].apply(Gar_category)\n\ndef Low_category(cat):\n    if cat <= 1000:\n        return 1\n    elif cat <= 2000 and cat > 1000:\n        return 2\n    elif cat <= 3000 and cat > 2000:\n        return 3\n    return 4\ndf['GrLivArea_cat'] = df['GrLivArea'].apply(Low_category)\n\ndef fl1_category(cat):\n    if cat <= 500:\n        return 1\n    elif cat <= 1000 and cat > 500:\n        return 2\n    elif cat <= 1500 and cat > 1000:\n        return 3\n    elif cat <= 2000 and cat > 1500:\n        return 4\n    return 5\ndf['1stFlrSF_cat'] = df['1stFlrSF'].apply(fl1_category)\ndf['2ndFlrSF_cat'] = df['2ndFlrSF'].apply(fl1_category)\n\ndef bsmtt_category(cat):\n    if cat <= 500:\n        return 1\n    elif cat <= 1000 and cat > 500:\n        return 2\n    elif cat <= 1500 and cat > 1000:\n        return 3\n    elif cat <= 2000 and cat > 1500:\n        return 4\n    return 5\ndf['TotalBsmtSF_cat'] = df['TotalBsmtSF'].apply(bsmtt_category)\n\ndef bsmt_category(cat):\n    if cat <= 500:\n        return 1\n    elif cat <= 1000 and cat > 500:\n        return 2\n    elif cat <= 1500 and cat > 1000:\n        return 3\n    elif cat <= 2000 and cat > 1500:\n        return 4\n    return 5\ndf['BsmtUnfSF_cat'] = df['BsmtUnfSF'].apply(bsmt_category)\n\ndef lot_category(cat):\n    if cat <= 50:\n        return 1\n    elif cat <= 100 and cat > 50:\n        return 2\n    elif cat <= 150 and cat > 100:\n        return 3\n    return 4\ndf['LotFrontage_cat'] = df['LotFrontage'].apply(lot_category)\n\ndef lot_category1(cat):\n    if cat <= 5000:\n        return 1\n    elif cat <= 10000 and cat > 5000:\n        return 2\n    elif cat <= 15000 and cat > 10000:\n        return 3\n    elif cat <= 20000 and cat > 15000:\n        return 4\n    elif cat <= 25000 and cat > 20000:\n        return 5\n    return 6\ndf['LotArea_cat'] = df['LotArea'].apply(lot_category1)\n\ndef year_category(yb):\n    if yb <= 1910:\n        return 1\n    elif yb <= 1950 and yb > 1910:\n        return 2\n    elif yb >= 1950 and yb < 1980:\n        return 3\n    elif yb >= 1980 and yb < 2000:\n        return 4\n    return 5\n\n\n\ndf['YearBuilt_cat'] = df['YearBuilt'].apply(year_category) \ndf['YearRemodAdd_cat'] = df['YearRemodAdd'].apply(year_category)\ndf['GarageYrBlt_cat'] = df['GarageYrBlt'].apply(year_category)\n\ndef vnr_category(cat):\n    if cat <= 250:\n        return 1\n    elif cat <= 500 and cat > 250:\n        return 2\n    elif cat <= 750 and cat > 500:\n        return 3\n    return 4\n\ndf['MasVnrArea_cat'] = df['MasVnrArea'].apply(vnr_category)\n\ndef allsf_category(yb):\n    if yb <= 1000:\n        return 1\n    elif yb <= 2000 and yb > 1000:\n        return 2\n    elif yb >= 3000 and yb < 2000:\n        return 3\n    elif yb >= 4000 and yb < 3000:\n        return 4\n    elif yb >= 5000 and yb < 4000:\n        return 5\n    elif yb >= 6000 and yb < 5000:\n        return 6\n    return 7\n\ndf['AllSF_cat'] = df['AllSF'].apply(allsf_category)\n\n\n\ndummy_col=['OverallQual', 'AllSF_cat', 'MiscVal','OverallCond', 'BsmtFinType2', 'SaleCondition','SaleType', 'YrSold', 'MoSold', 'MiscFeature', 'Fence', 'PoolQC', 'PoolArea', 'PavedDrive', 'GarageCond', 'GarageQual', 'GarageArea_cat', 'GarageCars', 'GarageFinish', 'GarageType', 'FireplaceQu', 'Fireplaces','Functional', 'TotRmsAbvGrd', 'KitchenQual', 'KitchenAbvGr', 'BedroomAbvGr', 'HalfBath', 'FullBath', 'BsmtHalfBath', 'BsmtFullBath','GrLivArea_cat','MSSubClass', 'MSZoning', 'LotFrontage_cat', 'LotArea_cat', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n          'BldgType', 'HouseStyle', 'YearBuilt_cat', 'YearRemodAdd_cat', 'RoofStyle', 'RoofMatl', 'Exterior2nd', 'Exterior1st', 'MasVnrType', 'MasVnrArea_cat', 'ExterQual', 'ExterCond', 'Foundation', \n          'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtUnfSF_cat', 'TotalBsmtSF_cat', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF_cat', '2ndFlrSF_cat']\ndf = pd.get_dummies(df, columns=dummy_col, drop_first=False)\n\ndf['LotFrontage_log'] = np.log1p(df['LotFrontage'])\ndf['LotArea_log'] = np.log1p(df['LotArea'])\ndf['BsmtUnfSF_log'] = np.log1p(df['BsmtUnfSF'])\n\ndf['Is_MasVnr'] = [1 if i != 0 else 0 for i in df['MasVnrArea']]\ndf['Is_BsmtFinSF1'] = [1 if i != 0 else 0 for i in df['BsmtFinSF1']]\ndf['Is_BsmtFinSF2'] = [1 if i != 0 else 0 for i in df['BsmtFinSF2']]\ndf['Is_BsmtUnfSF'] = [1 if i != 0 else 0 for i in df['BsmtUnfSF']]\ndf['Is_TotalBsmtSF'] = [1 if i != 0 else 0 for i in df['TotalBsmtSF']]\ndf['Is_2ndFlrSF'] = [1 if i != 0 else 0 for i in df['2ndFlrSF']]\ndf['Is_LowQualFinSF'] = [1 if i != 0 else 0 for i in df['LowQualFinSF']]\ndf['Is_GarageArea'] = [1 if i != 0 else 0 for i in df['GarageArea']]\ndf['Is_WoodDeckSF'] = [1 if i != 0 else 0 for i in df['WoodDeckSF']]\ndf['Is_OpenPorchSF'] = [1 if i != 0 else 0 for i in df['OpenPorchSF']]\ndf['Is_EnclosedPorch'] = [1 if i != 0 else 0 for i in df['EnclosedPorch']]\ndf['Is_3SsnPorch'] = [1 if i != 0 else 0 for i in df['3SsnPorch']]\ndf['Is_ScreenPorch'] = [1 if i != 0 else 0 for i in df['ScreenPorch']]\n\n\n\nprint('finished')\n","d6ef94a1":"# after tuning\ndef basic_details(df):\n    b = pd.DataFrame()\n    b['Missing value'] = df.isnull().sum()\n    b['N unique value'] = df.nunique()\n    b['dtype'] = df.dtypes\n    return b\nbasic_details(df)","022fb566":"df.shape","be87a141":"def descrictive_stat_feat(df):\n    df = pd.DataFrame(df)\n    dcol= [c for c in df.columns if df[c].nunique()>=10]\n    d_median = df[dcol].median(axis=0)\n    d_mean = df[dcol].mean(axis=0)\n    q1 = df[dcol].apply(np.float32).quantile(0.25)\n    q3 = df[dcol].apply(np.float32).quantile(0.75)\n    \n    #Add mean and median column to data set having more then 10 categories\n    for c in dcol:\n        df[c+str('_median_range')] = (df[c].astype(np.float32).values > d_median[c]).astype(np.int8)\n        df[c+str('_mean_range')] = (df[c].astype(np.float32).values > d_mean[c]).astype(np.int8)\n        df[c+str('_q1')] = (df[c].astype(np.float32).values < q1[c]).astype(np.int8)\n        df[c+str('_q3')] = (df[c].astype(np.float32).values > q3[c]).astype(np.int8)\n    return df\n\ndf = descrictive_stat_feat(df)","49a5706b":"#creating matrices for feature selection:\nX_train = df[:train.shape[0]]\nX_test_fin = df[train.shape[0]:]\ny = train.SalePrice\nX_train['Y'] = y\ndf = X_train\nprint('finished')","4bd92f9e":"import xgboost as xgb\nfrom sklearn.model_selection import train_test_split\n\n\nX = df.drop('Y', axis=1)\ny = df.Y\n\nx_train, x_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=10)\n\n\n# sc = MinMaxScaler(feature_range=(-1, 1))\n# x_train = sc.fit_transform(x_train)\n# x_valid = sc.fit_transform(x_valid)\n\nd_train = xgb.DMatrix(x_train, label=y_train)\nd_valid = xgb.DMatrix(x_valid, label=y_valid)\nd_test = xgb.DMatrix(X_test_fin)\n\n\n\nparams = {\n        'objective':'reg:linear',\n#         'n_estimators': 50,\n        'booster':'gbtree',\n        'max_depth':2,\n        'eval_metric':'rmse',\n        'learning_rate':0.1, \n        'min_child_weight':1,\n        'subsample':0.80,\n        'colsample_bytree':0.81,\n        'seed':45,\n        'reg_alpha':1,#1e-03,\n        'reg_lambda':0,\n        'gamma':0,\n        'nthread':-1\n\n}\n\n\nwatchlist = [(d_train, 'train'), (d_valid, 'valid')]\n\nclf = xgb.train(params, d_train, 2000,  watchlist, early_stopping_rounds=300, maximize=False, verbose_eval=10)\n\np_test = clf.predict(d_test)","c5b40b91":"from sklearn.metrics import mean_absolute_error, r2_score\nd_test = clf.predict(d_valid)\nr2_score(y_valid, d_test)","23a849b2":"sub = pd.DataFrame()\nsub['Id'] = test['Id']\nsub['SalePrice'] = p_test\nsub","fbfd2ae0":"import matplotlib.pyplot as plt\n# plot the important features #\nfig, ax = plt.subplots(figsize=(12,18))\nxgb.plot_importance(clf, max_num_features=50, height=0.8, ax=ax)\nplt.show()","e47672af":"Let's load train and test datasets...","11beb8c9":"data imputation and feature engeneering...","65312f0b":"and look for feature distribution..","76e63e80":"and drop them with outliers step 1.7 instead of 1.5 for better perfomance...","0b7891f3":"creating matrices for feature selection","03b2d0d7":"data after tuning...","cd9465dc":"adding some additional features....","41dd796b":"checking for outliers in train dataset...","78cd8bca":"checking for missing and unique values in combined dataset...","9566dc71":"modelling..."}}