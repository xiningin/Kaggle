{"cell_type":{"c8b5cff9":"code","7031a499":"code","ee27cb6f":"code","e68401fe":"code","4e41aa5f":"code","16224e61":"code","fac1e557":"code","72da89d5":"code","2c1bcd34":"code","fb0d8729":"code","5ac8e306":"code","58cce92d":"code","3960a14c":"code","3bef7ce4":"code","3c70bfaa":"code","e3dcc2b3":"code","de97d40a":"code","bae47fd5":"code","bde21d29":"code","8ef95022":"code","40c1df7b":"code","f1846858":"code","09548bd9":"code","43366902":"code","559e1658":"code","68a76e8d":"code","37780b76":"code","2061343d":"code","be773565":"code","614f8e39":"code","66349ea5":"code","85a2bfb9":"code","32ebfd1e":"code","4012e9bf":"code","efd93288":"code","804d96a9":"code","16d85d22":"code","273288b0":"code","af176cd4":"code","556828b2":"code","07a27054":"code","cbd58832":"markdown","1a10e9e3":"markdown","147cbd80":"markdown","2c86dc52":"markdown","6c15edc5":"markdown","cf512605":"markdown","feeac34a":"markdown","91df4843":"markdown","ab0c2825":"markdown"},"source":{"c8b5cff9":"%matplotlib inline\nimport pandas as pd\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\npd.set_option('display.max_columns', 99)\npd.set_option('display.max_rows', 99)\nimport os\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom tqdm import tqdm\nimport datetime as dt","7031a499":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nsns.set_palette(sns.color_palette('tab20', 20))\n\nimport plotly.express as px\nimport plotly.graph_objects as go","ee27cb6f":"COMP = '..\/input\/covid19-global-forecasting-week-2'\nDATEFORMAT = '%Y-%m-%d'\n\n\ndef get_comp_data(COMP):\n    train = pd.read_csv(f'{COMP}\/train.csv')\n    test = pd.read_csv(f'{COMP}\/test.csv')\n    submission = pd.read_csv(f'{COMP}\/submission.csv')\n    print(train.shape, test.shape, submission.shape)\n    train['Country_Region'] = train['Country_Region'].str.replace(',', '')\n    test['Country_Region'] = test['Country_Region'].str.replace(',', '')\n\n    train['Location'] = train['Country_Region'] + '-' + train['Province_State'].fillna('')\n\n    test['Location'] = test['Country_Region'] + '-' + test['Province_State'].fillna('')\n\n    train['LogConfirmed'] = to_log(train.ConfirmedCases)\n    train['LogFatalities'] = to_log(train.Fatalities)\n    train = train.drop(columns=['Province_State'])\n    test = test.drop(columns=['Province_State'])\n\n    country_codes = pd.read_csv('..\/input\/covid19-metadata\/country_codes.csv', keep_default_na=False)\n    train = train.merge(country_codes, on='Country_Region', how='left')\n    test = test.merge(country_codes, on='Country_Region', how='left')\n\n    train['DateTime'] = pd.to_datetime(train['Date'])\n    test['DateTime'] = pd.to_datetime(test['Date'])\n    \n    return train, test, submission\n\n\ndef process_each_location(df):\n    dfs = []\n    for loc, df in tqdm(df.groupby('Location')):\n        df = df.sort_values(by='Date')\n        df['Fatalities'] = df['Fatalities'].cummax()\n        df['ConfirmedCases'] = df['ConfirmedCases'].cummax()\n        df['LogFatalities'] = df['LogFatalities'].cummax()\n        df['LogConfirmed'] = df['LogConfirmed'].cummax()\n        df['LogConfirmedNextDay'] = df['LogConfirmed'].shift(-1)\n        df['ConfirmedNextDay'] = df['ConfirmedCases'].shift(-1)\n        df['DateNextDay'] = df['Date'].shift(-1)\n        df['LogFatalitiesNextDay'] = df['LogFatalities'].shift(-1)\n        df['FatalitiesNextDay'] = df['Fatalities'].shift(-1)\n        df['LogConfirmedDelta'] = df['LogConfirmedNextDay'] - df['LogConfirmed']\n        df['ConfirmedDelta'] = df['ConfirmedNextDay'] - df['ConfirmedCases']\n        df['LogFatalitiesDelta'] = df['LogFatalitiesNextDay'] - df['LogFatalities']\n        df['FatalitiesDelta'] = df['FatalitiesNextDay'] - df['Fatalities']\n        dfs.append(df)\n    return pd.concat(dfs)\n\n\ndef add_days(d, k):\n    return dt.datetime.strptime(d, DATEFORMAT) + dt.timedelta(days=k)\n\n\ndef to_log(x):\n    return np.log(x + 1)\n\n\ndef to_exp(x):\n    return np.exp(x) - 1\n","e68401fe":"start = dt.datetime.now()\ntrain, test, submission = get_comp_data(COMP)\ntrain.shape, test.shape, submission.shape\ntrain.head(2)\ntest.head(2)","4e41aa5f":"train.describe()\ntrain.nunique()\ntrain.dtypes\ntrain.count()\n\nTRAIN_START = train.Date.min()\nTEST_START = test.Date.min()\nTRAIN_END = train.Date.max()\nTEST_END = test.Date.max()\nTRAIN_START, TRAIN_END, TEST_START, TEST_END","16224e61":"train = train.sort_values(by='Date')\ncountries_latest_state = train[train['Date'] == TRAIN_END].groupby([\n    'Country_Region', 'continent', 'geo_region', 'country_iso_code_3']).sum()[[\n    'ConfirmedCases', 'Fatalities']].reset_index()\ncountries_latest_state['Log10Confirmed'] = np.log10(countries_latest_state.ConfirmedCases + 1)\ncountries_latest_state['Log10Fatalities'] = np.log10(countries_latest_state.Fatalities + 1)\ncountries_latest_state = countries_latest_state.sort_values(by='Fatalities', ascending=False)\ncountries_latest_state.to_csv('countries_latest_state.csv', index=False)\n\ncountries_latest_state.shape\ncountries_latest_state.head()","fac1e557":"fig = go.Figure(data=go.Choropleth(\n    locations = countries_latest_state['country_iso_code_3'],\n    z = countries_latest_state['Log10Confirmed'],\n    text = countries_latest_state['Country_Region'],\n    colorscale = 'viridis_r',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_tickprefix = '10^',\n    colorbar_title = 'Confirmed cases <br>(log10 scale)',\n))\n\n_ = fig.update_layout(\n    title_text=f'COVID-19 Global Cases [Updated: {TRAIN_END}]',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    )\n)\n\nfig.show()","72da89d5":"fig = go.Figure(data=go.Choropleth(\n    locations = countries_latest_state['country_iso_code_3'],\n    z = countries_latest_state['Log10Fatalities'],\n    text = countries_latest_state['Country_Region'],\n    colorscale = 'viridis_r',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_tickprefix = '10^',\n    colorbar_title = 'Deaths <br>(log10 scale)',\n))\n\n_ = fig.update_layout(\n    title_text=f'COVID-19 Global Deaths [Updated: {TRAIN_END}]',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    )\n)\n\nfig.show()","2c1bcd34":"countries_latest_state['DeathConfirmedRatio'] = (countries_latest_state.Fatalities + 1) \/ (countries_latest_state.ConfirmedCases + 1)\ncountries_latest_state['DeathConfirmedRatio'] = countries_latest_state['DeathConfirmedRatio'].clip(0, 0.1) \nfig = px.scatter(countries_latest_state,\n                 x='ConfirmedCases',\n                 y='Fatalities',\n                 color='DeathConfirmedRatio',\n                 size='Log10Fatalities',\n                 size_max=20,\n                 hover_name='Country_Region',\n                 color_continuous_scale='viridis_r'\n)\n_ = fig.update_layout(\n    title_text=f'COVID-19 Deaths vs Confirmed Cases by Country [Updated: {TRAIN_END}]',\n    xaxis_type=\"log\",\n    yaxis_type=\"log\"\n)\nfig.show()","fb0d8729":"# The source dataset is not necessary cumulative we will force it\nlatest_loc = train[train['Date'] == TRAIN_END][['Location', 'ConfirmedCases', 'Fatalities']]\nmax_loc = train.groupby(['Location'])[['ConfirmedCases', 'Fatalities']].max().reset_index()\ncheck = pd.merge(latest_loc, max_loc, on='Location')\nnp.mean(check.ConfirmedCases_x == check.ConfirmedCases_y)\nnp.mean(check.Fatalities_x == check.Fatalities_y)\ncheck[check.Fatalities_x != check.Fatalities_y]\ncheck[check.ConfirmedCases_x != check.ConfirmedCases_y]","5ac8e306":"train_clean = process_each_location(train)\n\ntrain_clean.shape\ntrain_clean.tail()","58cce92d":"regional_progress = train_clean.groupby(['DateTime', 'continent']).sum()[['ConfirmedCases', 'Fatalities']].reset_index()\nregional_progress['Log10Confirmed'] = np.log10(regional_progress.ConfirmedCases + 1)\nregional_progress['Log10Fatalities'] = np.log10(regional_progress.Fatalities + 1)\nregional_progress = regional_progress[regional_progress.continent != '#N\/A']","3960a14c":"fig = px.area(regional_progress, x=\"DateTime\", y=\"ConfirmedCases\", color=\"continent\")\n_ = fig.update_layout(\n    title_text=f'COVID-19 Cumulative Confirmed Cases by Continent [Updated: {TRAIN_END}]'\n)\nfig.show()\nfig2 = px.line(regional_progress, x='DateTime', y='ConfirmedCases', color='continent')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases by Continent [Updated: {TRAIN_END}]'\n)\nfig2.show()\n\n","3bef7ce4":"fig = px.area(regional_progress, x=\"DateTime\", y=\"Fatalities\", color=\"continent\")\n_ = fig.update_layout(\n    title_text=f'COVID-19 Cumulative Confirmed Deaths by Continent [Updated: {TRAIN_END}]'\n)\nfig.show()\nfig2 = px.line(regional_progress, x='DateTime', y='Fatalities', color='continent')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Deaths by Continent [Updated: {TRAIN_END}]'\n)\nfig2.show()","3c70bfaa":"china = train_clean[train_clean.Location.str.startswith('China')]\ntop10_locations = china.groupby('Location')[['ConfirmedCases']].max().sort_values(\n    by='ConfirmedCases', ascending=False).reset_index().Location.values[:10]\nfig2 = px.line(china[china.Location.isin(top10_locations)], x='DateTime', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases in China [Updated: {TRAIN_END}]'\n)\nfig2.show()","e3dcc2b3":"europe = train_clean[train_clean.continent == 'Europe']\ntop10_locations = europe.groupby('Location')[['ConfirmedCases']].max().sort_values(\n    by='ConfirmedCases', ascending=False).reset_index().Location.values[:10]\nfig2 = px.line(europe[europe.Location.isin(top10_locations)], x='DateTime', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases in Europe [Updated: {TRAIN_END}]'\n)\nfig2.show()","de97d40a":"us = train_clean[train_clean.Country_Region == 'US']\ntop10_locations = us.groupby('Location')[['ConfirmedCases']].max().sort_values(\n    by='ConfirmedCases', ascending=False).reset_index().Location.values[:10]\nfig2 = px.line(us[us.Location.isin(top10_locations)], x='DateTime', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases in the USA [Updated: {TRAIN_END}]'\n)\nfig2.show()","bae47fd5":"africa = train_clean[train_clean.continent == 'Africa']\ntop10_locations = africa.groupby('Location')[['ConfirmedCases']].max().sort_values(\n    by='ConfirmedCases', ascending=False).reset_index().Location.values[:10]\nfig2 = px.line(africa[africa.Location.isin(top10_locations)], x='DateTime', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases in Africa [Updated: {TRAIN_END}]'\n)\nfig2.show()","bde21d29":"country_progress = train_clean.groupby(['Date', 'DateTime', 'Country_Region']).sum()[[\n    'ConfirmedCases', 'Fatalities', 'ConfirmedDelta', 'FatalitiesDelta']].reset_index()\ntop10_countries = country_progress.groupby('Country_Region')[['Fatalities']].max().sort_values(\n    by='Fatalities', ascending=False).reset_index().Country_Region.values[:10]\n\nfig2 = px.line(country_progress[country_progress.Country_Region.isin(top10_countries)],\n               x='DateTime', y='ConfirmedCases', color='Country_Region')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases by Country [Updated: {TRAIN_END}]'\n)\nfig2.show()\nfig3 = px.line(country_progress[country_progress.Country_Region.isin(top10_countries)],\n               x='DateTime', y='Fatalities', color='Country_Region')\n_ = fig3.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Deaths by Country [Updated: {TRAIN_END}]'\n)\nfig3.show()","8ef95022":"countries_0301 = country_progress[country_progress.Date == '2020-03-01'][[\n    'Country_Region', 'ConfirmedCases', 'Fatalities']]\ncountries_0331 = country_progress[country_progress.Date == '2020-03-31'][[\n    'Country_Region', 'ConfirmedCases', 'Fatalities']]\ncountries_in_march = pd.merge(countries_0301, countries_0331, on='Country_Region', suffixes=['_0301', '_0331'])\ncountries_in_march['IncreaseInMarch'] = countries_in_march.ConfirmedCases_0331 \/ (countries_in_march.ConfirmedCases_0301 + 1)\ncountries_in_march = countries_in_march[countries_in_march.ConfirmedCases_0331 > 200].sort_values(\n    by='IncreaseInMarch', ascending=False)\ncountries_in_march.tail(15)","40c1df7b":"selected_countries = [\n    'Italy', 'Vietnam', 'Bahrain', 'Singapore', 'Taiwan*', 'Japan', 'Kuwait', 'Korea, South', 'China']\nfig2 = px.line(country_progress[country_progress.Country_Region.isin(selected_countries)],\n               x='DateTime', y='ConfirmedCases', color='Country_Region')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases by Country [Updated: {TRAIN_END}]'\n)\nfig2.show()\nfig3 = px.line(country_progress[country_progress.Country_Region.isin(selected_countries)],\n               x='DateTime', y='Fatalities', color='Country_Region')\n_ = fig3.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Deaths by Country [Updated: {TRAIN_END}]'\n)\nfig3.show()","f1846858":"train_clean['Geo#Country#Contintent'] = train_clean.Location + '#' + train_clean.Country_Region + '#' + train_clean.continent\nlatest = train_clean[train_clean.Date == '2020-03-31'][[\n    'Geo#Country#Contintent', 'ConfirmedCases', 'Fatalities', 'LogConfirmed', 'LogFatalities']]\ndaily_confirmed_deltas = train_clean[train_clean.Date >= '2020-03-17'].pivot(\n    'Geo#Country#Contintent', 'Date', 'LogConfirmedDelta').round(3).reset_index()\ndaily_confirmed_deltas = latest.merge(daily_confirmed_deltas, on='Geo#Country#Contintent')\ndaily_confirmed_deltas.shape\ndaily_confirmed_deltas.head()\ndaily_confirmed_deltas.to_csv('daily_confirmed_deltas.csv', index=False)","09548bd9":"deltas = train_clean[np.logical_and(\n        train_clean.LogConfirmed > 2,\n        ~train_clean.Location.str.startswith('China')\n)].dropna().sort_values(by='LogConfirmedDelta', ascending=False)\n\ndeltas['start'] = deltas['LogConfirmed'].round(0)\nconfirmed_deltas = pd.concat([\n    deltas.groupby('start')[['LogConfirmedDelta']].mean(),\n    deltas.groupby('start')[['LogConfirmedDelta']].std(),\n    deltas.groupby('start')[['LogConfirmedDelta']].count()\n], axis=1)\n\ndeltas.mean()\n\nconfirmed_deltas.columns = ['avg', 'std', 'cnt']\nconfirmed_deltas\nconfirmed_deltas.to_csv('confirmed_deltas.csv')","43366902":"fig = px.box(deltas,  x=\"start\", y=\"LogConfirmedDelta\", range_y=[0, 0.35])\nfig.show()","559e1658":"fig = px.box(deltas[deltas.Date >= '2020-03-01'],  x=\"DateTime\", y=\"LogConfirmedDelta\", range_y=[0, 0.6])\nfig.show()","68a76e8d":"deltas = train_clean[np.logical_and(\n        train_clean.LogConfirmed > 0,\n        ~train_clean.Location.str.startswith('China')\n)].dropna().sort_values(by='LogConfirmedDelta', ascending=False)\ndeltas = deltas[deltas['Date'] >= '2020-03-12']\n\nconfirmed_deltas = pd.concat([\n    deltas.groupby('Location')[['LogConfirmedDelta']].mean(),\n    deltas.groupby('Location')[['LogConfirmedDelta']].std(),\n    deltas.groupby('Location')[['LogConfirmedDelta']].count(),\n    deltas.groupby('Location')[['LogConfirmed']].max()\n], axis=1)\nconfirmed_deltas.columns = ['avg', 'std', 'cnt', 'max']\n\nconfirmed_deltas.sort_values(by='avg').head(10)\nconfirmed_deltas.sort_values(by='avg').tail(10)\nconfirmed_deltas.to_csv('confirmed_deltas.csv')","37780b76":"DECAY = 0.93\nDECAY ** 7, DECAY ** 14, DECAY ** 21, DECAY ** 28\n\nconfirmed_deltas = train.groupby(['Location', 'Country_Region', 'continent'])[[\n    'Id']].count().reset_index()\n\nGLOBAL_DELTA = 0.11\nconfirmed_deltas['DELTA'] = GLOBAL_DELTA\n\nconfirmed_deltas.loc[confirmed_deltas.continent=='Africa', 'DELTA'] = 0.14\nconfirmed_deltas.loc[confirmed_deltas.continent=='Oceania', 'DELTA'] = 0.06\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Korea South', 'DELTA'] = 0.011\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='US', 'DELTA'] = 0.15\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='China', 'DELTA'] = 0.01\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Japan', 'DELTA'] = 0.05\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Singapore', 'DELTA'] = 0.05\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Taiwan*', 'DELTA'] = 0.05\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Switzerland', 'DELTA'] = 0.05\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Norway', 'DELTA'] = 0.05\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Iceland', 'DELTA'] = 0.05\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Austria', 'DELTA'] = 0.06\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Italy', 'DELTA'] = 0.04\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Spain', 'DELTA'] = 0.08\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Portugal', 'DELTA'] = 0.12\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Israel', 'DELTA'] = 0.12\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Iran', 'DELTA'] = 0.08\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Germany', 'DELTA'] = 0.07\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Malaysia', 'DELTA'] = 0.06\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Russia', 'DELTA'] = 0.18\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Ukraine', 'DELTA'] = 0.18\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Brazil', 'DELTA'] = 0.12\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Turkey', 'DELTA'] = 0.18\nconfirmed_deltas.loc[confirmed_deltas.Country_Region=='Philippines', 'DELTA'] = 0.18\nconfirmed_deltas.loc[confirmed_deltas.Location=='France-', 'DELTA'] = 0.1\nconfirmed_deltas.loc[confirmed_deltas.Location=='United Kingdom-', 'DELTA'] = 0.12\nconfirmed_deltas.loc[confirmed_deltas.Location=='Diamond Princess-', 'DELTA'] = 0.00\nconfirmed_deltas.loc[confirmed_deltas.Location=='China-Hong Kong', 'DELTA'] = 0.08\nconfirmed_deltas.loc[confirmed_deltas.Location=='San Marino-', 'DELTA'] = 0.03\n\n\nconfirmed_deltas.shape, confirmed_deltas.DELTA.mean()\n\nconfirmed_deltas[confirmed_deltas.DELTA != GLOBAL_DELTA].shape, confirmed_deltas[confirmed_deltas.DELTA != GLOBAL_DELTA].DELTA.mean()\nconfirmed_deltas[confirmed_deltas.DELTA != GLOBAL_DELTA]\nconfirmed_deltas.describe()","2061343d":"daily_log_confirmed = train_clean.pivot('Location', 'Date', 'LogConfirmed').reset_index()\ndaily_log_confirmed = daily_log_confirmed.sort_values(TRAIN_END, ascending=False)\ndaily_log_confirmed.to_csv('daily_log_confirmed.csv', index=False)\n\nfor i, d in tqdm(enumerate(pd.date_range(add_days(TRAIN_END, 1), add_days(TEST_END, 1)))):\n    new_day = str(d).split(' ')[0]\n    last_day = dt.datetime.strptime(new_day, DATEFORMAT) - dt.timedelta(days=1)\n    last_day = last_day.strftime(DATEFORMAT)\n    for loc in confirmed_deltas.Location.values:\n        confirmed_delta = confirmed_deltas.loc[confirmed_deltas.Location == loc, 'DELTA'].values[0]\n        daily_log_confirmed.loc[daily_log_confirmed.Location == loc, new_day] = daily_log_confirmed.loc[daily_log_confirmed.Location == loc, last_day] + \\\n            confirmed_delta * DECAY ** i","be773565":"daily_log_confirmed.head()","614f8e39":"confirmed_prediciton = pd.melt(daily_log_confirmed[:25], id_vars='Location')\nconfirmed_prediciton['ConfirmedCases'] = to_exp(confirmed_prediciton['value'])\nfig2 = px.line(confirmed_prediciton,\n               x='Date', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases Prediction [Updated: {TRAIN_END}]'\n)\nfig2.show()","66349ea5":"train_clean['Geo#Country#Contintent'] = train_clean.Location + '#' + train_clean.Country_Region + '#' + train_clean.continent\nlatest = train_clean[train_clean.Date == TRAIN_END][[\n    'Geo#Country#Contintent', 'ConfirmedCases', 'Fatalities', 'LogConfirmed', 'LogFatalities']]\ndaily_death_deltas = train_clean[train_clean.Date >= '2020-03-17'].pivot(\n    'Geo#Country#Contintent', 'Date', 'LogFatalitiesDelta').round(3).reset_index()\ndaily_death_deltas = latest.merge(daily_death_deltas, on='Geo#Country#Contintent')\ndaily_death_deltas.shape\ndaily_death_deltas.head()\ndaily_death_deltas.to_csv('daily_death_deltas.csv', index=False)","85a2bfb9":"death_deltas = train.groupby(['Location', 'Country_Region', 'continent'])[[\n    'Id']].count().reset_index()\n\nGLOBAL_DELTA = 0.11\ndeath_deltas['DELTA'] = GLOBAL_DELTA\n\ndeath_deltas.loc[death_deltas.Country_Region=='China', 'DELTA'] = 0.005\ndeath_deltas.loc[death_deltas.continent=='Oceania', 'DELTA'] = 0.08\ndeath_deltas.loc[death_deltas.Country_Region=='Korea South', 'DELTA'] = 0.04\ndeath_deltas.loc[death_deltas.Country_Region=='Japan', 'DELTA'] = 0.04\ndeath_deltas.loc[death_deltas.Country_Region=='Singapore', 'DELTA'] = 0.05\ndeath_deltas.loc[death_deltas.Country_Region=='Taiwan*', 'DELTA'] = 0.06\n\n\n\ndeath_deltas.loc[death_deltas.Country_Region=='US', 'DELTA'] = 0.17\n\ndeath_deltas.loc[death_deltas.Country_Region=='Switzerland', 'DELTA'] = 0.15\ndeath_deltas.loc[death_deltas.Country_Region=='Norway', 'DELTA'] = 0.15\ndeath_deltas.loc[death_deltas.Country_Region=='Iceland', 'DELTA'] = 0.01\ndeath_deltas.loc[death_deltas.Country_Region=='Austria', 'DELTA'] = 0.14\ndeath_deltas.loc[death_deltas.Country_Region=='Italy', 'DELTA'] = 0.07\ndeath_deltas.loc[death_deltas.Country_Region=='Spain', 'DELTA'] = 0.1\ndeath_deltas.loc[death_deltas.Country_Region=='Portugal', 'DELTA'] = 0.13\ndeath_deltas.loc[death_deltas.Country_Region=='Israel', 'DELTA'] = 0.16\ndeath_deltas.loc[death_deltas.Country_Region=='Iran', 'DELTA'] = 0.06\ndeath_deltas.loc[death_deltas.Country_Region=='Germany', 'DELTA'] = 0.14\ndeath_deltas.loc[death_deltas.Country_Region=='Malaysia', 'DELTA'] = 0.14\ndeath_deltas.loc[death_deltas.Country_Region=='Russia', 'DELTA'] = 0.2\ndeath_deltas.loc[death_deltas.Country_Region=='Ukraine', 'DELTA'] = 0.2\ndeath_deltas.loc[death_deltas.Country_Region=='Brazil', 'DELTA'] = 0.2\ndeath_deltas.loc[death_deltas.Country_Region=='Turkey', 'DELTA'] = 0.22\ndeath_deltas.loc[death_deltas.Country_Region=='Philippines', 'DELTA'] = 0.12\ndeath_deltas.loc[death_deltas.Location=='France-', 'DELTA'] = 0.14\ndeath_deltas.loc[death_deltas.Location=='United Kingdom-', 'DELTA'] = 0.14\ndeath_deltas.loc[death_deltas.Location=='Diamond Princess-', 'DELTA'] = 0.00\n\ndeath_deltas.loc[death_deltas.Location=='China-Hong Kong', 'DELTA'] = 0.01\ndeath_deltas.loc[death_deltas.Location=='San Marino-', 'DELTA'] = 0.05\n\n\ndeath_deltas.shape\ndeath_deltas.DELTA.mean()\n\ndeath_deltas[death_deltas.DELTA != GLOBAL_DELTA].shape\ndeath_deltas[death_deltas.DELTA != GLOBAL_DELTA].DELTA.mean()\ndeath_deltas[death_deltas.DELTA != GLOBAL_DELTA]\ndeath_deltas.describe()","32ebfd1e":"daily_log_deaths = train_clean.pivot('Location', 'Date', 'LogFatalities').reset_index()\ndaily_log_deaths = daily_log_deaths.sort_values(TRAIN_END, ascending=False)\ndaily_log_deaths.to_csv('daily_log_deaths.csv', index=False)\n\nfor i, d in tqdm(enumerate(pd.date_range(add_days(TRAIN_END, 1), add_days(TEST_END, 1)))):\n    new_day = str(d).split(' ')[0]\n    last_day = dt.datetime.strptime(new_day, DATEFORMAT) - dt.timedelta(days=1)\n    last_day = last_day.strftime(DATEFORMAT)\n    for loc in death_deltas.Location:\n        death_delta = death_deltas.loc[death_deltas.Location == loc, 'DELTA'].values[0]\n        daily_log_deaths.loc[daily_log_deaths.Location == loc, new_day] = daily_log_deaths.loc[daily_log_deaths.Location == loc, last_day] + \\\n            death_delta * DECAY ** i","4012e9bf":"confirmed_prediciton = pd.melt(daily_log_deaths[:25], id_vars='Location')\nconfirmed_prediciton['Fatalities'] = to_exp(confirmed_prediciton['value'])\nfig2 = px.line(confirmed_prediciton,\n               x='Date', y='Fatalities', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Fatalities Prediction [Updated: {TRAIN_END}]'\n)\nfig2.show()","efd93288":"submission.head(2)","804d96a9":"confirmed = []\nfatalities = []\nfor id, d, loc in tqdm(test[['ForecastId', 'Date', 'Location']].values):\n    c = to_exp(daily_log_confirmed.loc[daily_log_confirmed.Location == loc, d].values[0])\n    f = to_exp(daily_log_deaths.loc[daily_log_deaths.Location == loc, d].values[0])\n    confirmed.append(c)\n    fatalities.append(f)","16d85d22":"my_submission = test.copy()\nmy_submission['ConfirmedCases'] = confirmed\nmy_submission['Fatalities'] = fatalities\nmy_submission.shape\nmy_submission.head()\n\n\n","273288b0":"my_submission.groupby('Date').sum().tail()","af176cd4":"total = my_submission.groupby('Date')[['ConfirmedCases', 'Fatalities']].sum().reset_index()\n\nfig2 = px.line(pd.melt(total, id_vars=['Date']), x='Date', y='value', color='variable')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Prediction Total [Updated: {TRAIN_END}]'\n)\nfig2.show()","556828b2":"my_submission[[\n    'ForecastId', 'ConfirmedCases', 'Fatalities'\n]].to_csv('submission.csv', index=False)\nprint(DECAY)\nmy_submission.head()\nmy_submission.tail()\nmy_submission.shape","07a27054":"end = dt.datetime.now()\nprint('Finished', end, (end - start).seconds, 's')","cbd58832":"# Countries","1a10e9e3":"# Create prediction","147cbd80":"# Fatalities","2c86dc52":"# Create submission file","6c15edc5":"# Worldwide","cf512605":"# Outbreak during March","feeac34a":"# COVID-19 W2: A few charts and a simple baseline\n\n\n# Summary\n\n**Disclaimer** We still have limited data to predict or understand what will happen in the next few weeks (months).\n\nAt this point I see more value in collecting data and monitoring the outbreak than trying to predict the future.\n\n[Please don't kill yourself because I published a notebook](https:\/\/www.reddit.com\/r\/datascience\/comments\/fsfdn2\/the_best_thing_you_can_do_to_fight_covid19_is\/)\n\n\n\n### Challenges\n * The outbreak patterns vary a lot among countries\n * Most countries have only 2 weeks data\n * Only a handful countries managed to succesfuly slow down the outbreak\n * Almost every country had several serious regulations in recent weeks\n * Increasing testing capacity could have serious impact on confirmed cases\n\n\n\n ### Assumptions\n  * As we are still in the early period, we will see exponential growth in the next few weeks\n  * Thanks to the panic\/awareness\/regulations\/social distancing the exponential increase will slow down\n\nAs the process is not stationary at all I decided to use a simple heuristic approach. Maybe I will import sklearn next week.\n  \n  ### TIL\n * Namibia's country code is NA. Now I remember I heard it in joke before, but I had to investigate a bug learn it again :)\n * I haven't used plotly recently, I quite enjoyed the \"new\" Plotly Express interface\n","91df4843":"# Continents","ab0c2825":"# Sanity check"}}