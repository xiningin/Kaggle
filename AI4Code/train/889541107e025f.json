{"cell_type":{"3ac6423b":"code","6c1b7af7":"code","d406dddf":"code","db0b9599":"code","932748d7":"code","e576ea47":"code","cef1fc8f":"code","b7bce4cd":"code","0cf1364a":"code","d890e907":"code","a0b8ba41":"code","5e7d8157":"code","27c7934d":"code","9150a2db":"code","553042f9":"code","2cb9d1a5":"code","b23dceff":"code","4a6263fe":"code","190fd0b7":"code","2102142c":"code","d7821bfc":"markdown","ea6e262e":"markdown","49e03d5f":"markdown","fda12fbb":"markdown","9a5e5772":"markdown"},"source":{"3ac6423b":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn import set_config","6c1b7af7":"pd.options.display.max_columns = None","d406dddf":"sns.set(font_scale=1.4)\nsns.set_style({'font.family': 'serif',\n               'fontname': 'Times New Roman'})","db0b9599":"mpl.rcParams['figure.dpi'] = 100","932748d7":"set_config(display='diagram')","e576ea47":"titanic_df = sns.load_dataset('titanic')\n\ntitanic_df.dropna(subset=['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare'], inplace=True)\n\ntitanic_df.drop(columns=['who', 'deck', 'embark_town', \n                         'alive', 'embarked', 'class', \n                         'alone', 'adult_male'], inplace=True)\n\ntitanic_df.head()","cef1fc8f":"dados_numericos = titanic_df.loc[:,'pclass':'fare'].select_dtypes(include=['int64', 'float64']).columns\ndados_categoricos = titanic_df.loc[:,'pclass':'fare'].select_dtypes(include=['object', 'bool']).columns","b7bce4cd":"dados_numericos","0cf1364a":"dados_categoricos","d890e907":"X = titanic_df.loc[:,'pclass':'fare']\ny = titanic_df['survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y,\n                                                    stratify = y,\n                                                    test_size=0.25, \n                                                    random_state=0)\n\nprint('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","a0b8ba41":"transformers=[('cat', OneHotEncoder(), dados_categoricos),\n              ('num', MinMaxScaler(), dados_numericos)]\n\npreprocessor = ColumnTransformer(transformers = transformers)\n\nsteps=[('preprocessor', preprocessor),\n       ('tree_model', DecisionTreeClassifier(criterion = 'entropy',\n                                             max_depth = 3, \n                                             min_samples_split = 2,\n                                             random_state = 0))]\n\nmodel = Pipeline(steps = steps,\n                 verbose = 1)","5e7d8157":"model","27c7934d":"model.fit(X_train, y_train)\ntrain_score = model.score(X_train, y_train)\ntest_score = model.score(X_test, y_test)","9150a2db":"train_score","553042f9":"test_score","2cb9d1a5":"cv = KFold(n_splits = 5, \n           shuffle = True, \n           random_state=0)\n\nn_scores = cross_val_score(model, \n                           X_train, y_train, \n                           scoring = 'accuracy', \n                           cv = cv)","b23dceff":"print('Valida\u00e7\u00e3o Cruzada\\n')\nprint(f'Acur\u00e1cias: {n_scores}\\n')\nprint(f'Acur\u00e1cias (m\u00e9dia): {round(np.mean(n_scores), 4)}')\nprint(f'Acur\u00e1cias (desvio padr\u00e3o): {round(np.std(n_scores), 4)}')","4a6263fe":"%%time\n\nparams = {'tree_model__criterion': ['entropy', 'gini'], \n          'tree_model__max_depth': [3, 4, 6, 8, 10],\n          'tree_model__min_samples_split': [2, 4, 6, 8],\n          'tree_model__random_state': [0]}\n\ngrid = GridSearchCV(model, \n                    param_grid = params,\n                    cv = cv)\n\ngrid.fit(X_train, y_train)","190fd0b7":"grid.best_params_","2102142c":"grid.best_score_","d7821bfc":"## 2. Pipelines\n\n* [OneHotEncoder](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.OneHotEncoder.html)\n* [MinMaxScaler](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.MinMaxScaler.html)\n* [ColumnTransformer](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.compose.ColumnTransformer.html)\n* [Pipeline](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.pipeline.Pipeline.html)","ea6e262e":"# Pipelines e Grid Search","49e03d5f":"## 3. Pipelines e valida\u00e7\u00e3o cruzada\n\n* KFold\n* cross_val_score","fda12fbb":"## 1) Base de dados: Titanic","9a5e5772":"## 4. Pipelines e Grid Search\n\n* [GridSearchCV](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.GridSearchCV.html)"}}