{"cell_type":{"ad0c49f8":"code","b04ed254":"markdown"},"source":{"ad0c49f8":"import pandas as pd\n\n# read dataframe\n# you can reference any of the data frames in the\n# https:\/\/www.kaggle.com\/kaushiksuresh147\/top-10-cryptocurrencies-historical-dataset\n\nraw_data = pd.read_csv('Bitcoin Historical Data.csv')\n\n# the data in question is structured such that the dates begin with the most recent date\n# to make for a more convenient data set, this command will reverse the rows so that the date starts at the earliest\n# recorded one and counts up\n\ndata = raw_data[::-1].reset_index(drop=True)\n\n# some of the data sets use different column names from the others, these statements check to fix that\n\nif 'Vol.' in data.columns:\n    data = data.rename(columns = {'Vol.':'Volume'})\n\nif 'Change %' in data.columns:\n    data = data.rename(columns = {'Change %':'Change'})\n\n# change Date format AND create separate columns for year, month, day\n\ndef date_format(df):\n    if isinstance(df, pd.DataFrame):\n        if 'Date' in df.columns:\n            df.Date = pd.to_datetime(df.Date)\n            df[['year','month','day']] = df.Date.apply(lambda x: pd.Series(x.strftime(\"%Y-%m-%d\").split(\"-\")))\n    else:\n        print(\"Invalid entry, please use a data frame with a Date column.\")\n    return\n\n# remove parts from Price, Open, High, Low, and Change that may prevent them from being registered as numeric\n\ndef num_format(df):\n    if isinstance(df, pd.DataFrame):\n\n        # ensure the data frame is in the correct format\n\n        if 'Price' and 'Open' and 'High' and 'Low' and 'Change' not in df.columns:\n            print(\"Invalid entry, please use a data frame with Price, Open, High, Low and Change columns.\")\n\n        else:\n\n            # the price, open, high and low columns may or may not include commas which change their type to strings\n            # this will check for that\n\n            if isinstance(df['Price'], str):\n                df['Price'] = df.Price.str.replace(',', '')\n            if isinstance(df['Open'], str):\n                df['Open'] = df.Open.str.replace(',', '')\n            if isinstance(df['High'], str):\n                df['High'] = df.High.str.replace(',', '')\n            if isinstance(df['Low'], str):\n                df['Low'] = df.Low.str.replace(',', '')\n\n            # the Change column will always have the % signs removed so it does not check for string\n\n            df['Change'] = df.Change.str.replace('%', '')\n    return\n\n# reformat the Volume column to numeric\n\ndef to_float(x):\n    if type(x) == float or type(x) == int:\n        return x\n    if 'K' in x:\n        if len(x) > 1:\n            return float(x.replace('K', '')) * 1000\n        return 1000.0\n    if 'M' in x:\n        if len(x) > 1:\n            return float(x.replace('M', '')) * 1000000\n        return 1000000.0\n    if 'B' in x:\n        return float(x.replace('B', '')) * 1000000000\n    return 0.0\n\n# change column names for more convenient typing for operations\n# convention will be all lower case, 4 character max\n\ndef col_names(df):\n    if isinstance(df, pd.DataFrame):\n        df.columns = ['date', 'prc', 'opn', 'hi', 'lo', 'vol', 'pchg', 'yr', 'mo', 'dy']\n    else:\n        print(\"Please enter a valid data frame.\")\n    return\n\ndef run_all(df):\n    if isinstance(df, pd.DataFrame):\n        date_format(df)\n        num_format(df)\n        df['Volume'] = df['Volume'].apply(to_float)\n        col_names(df)\n    else:\n        print(\"Invalid entry, please insert a data frame.\")\n    return\n\n# run function to alter the data frame\n\nrun_all(data)\n\n# export to CSV\n\ndata.to_csv('btc.csv')","b04ed254":"In order to make a more convenient data set out of these, I wrote a script that can clean any of the main files in this dataset.\n\nThere are a few minor issues that I ran into when importing the data set to a few different programs. The first is that the data begins with the most recent date as the first row, which if one wished to do something such as a regression model would make for an unintuitive model that goes backwards, so the data frames rows are inverted, starting with the first recorded date.\n\nDue to the way the dates are structured, some programs may not read them as a date. To solve this, the code changes to a Y-M-D format in numerical data, and creates separate columns for the year, month and day in addition if someone may want them.\n\nThe format of the numerical columns which might be read as strings rather than numbers due to the commas.\n\nTthe Volume column which is the most significant change, as it is currently not written in a numeric format. The code simply allows for Volume to be numeric now.\n\nThe column names are edited to be shorter and all lower case for more convenient use in coding.\n\nThe program then exports these changes to a new CSV file."}}