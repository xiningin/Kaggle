{"cell_type":{"0cca551b":"code","997164eb":"code","36821e54":"code","3defabc0":"code","b69e9b24":"code","4a21a379":"code","e540bc6c":"code","6d06b199":"code","34d27934":"code","876a4f86":"code","5b7f82c2":"code","6b91e5c3":"code","38042359":"code","4ecae3a9":"code","419b2ed6":"code","d8c27220":"code","7c7958f8":"code","309cbefd":"code","ec687d37":"code","54e63732":"code","1660f44c":"code","40069518":"code","3d105494":"code","59d48551":"code","337b2913":"code","691bb8cc":"code","422c8371":"code","38eacbef":"code","53b4b35e":"code","f1b2f909":"code","05f13f13":"code","516224d0":"code","ddfe8ccc":"code","178727bc":"code","0589e6b7":"code","13faea49":"code","708a10c2":"code","06fdaca8":"code","3be8c5ca":"code","f8b94462":"code","71cb75fd":"code","a8dc07aa":"code","de764c61":"code","c8dc1605":"code","e5f004be":"code","c274b86b":"code","738f85de":"code","3f53fb55":"code","6085c15d":"code","9611d021":"code","cddcf381":"code","cd49db60":"code","c1cf321d":"code","fe233e1b":"code","5d2c3e59":"code","3e305b69":"code","03d8fae3":"code","a7b4055e":"code","a84494d6":"code","14aa0256":"code","b11169d7":"code","f3c4a83a":"code","e42c0ec6":"code","fc0c0ebb":"code","0c0ded8c":"code","37d45e68":"markdown","6ee52838":"markdown","4e9c719d":"markdown","d2e072c9":"markdown","a67355f9":"markdown","a04aa292":"markdown","d6601f35":"markdown"},"source":{"0cca551b":"!pip install pycaret","997164eb":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport sklearn\nimport sklearn.utils\nimport warnings\nimport sklearn.utils\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import *\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.decomposition import PCA\nfrom pycaret.regression import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","36821e54":"# Load and Prepare Data","3defabc0":"New_Z_1 = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_01Sep2021.csv\")\nNew_Z_2 = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_02Sep2021.csv\")\nNew_Z_3 = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_03Sep2021.csv\")\nNew_Z_4 = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_06Sep2021.csv\")\nNew_Z_5 = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_07Sep2021.csv\")\nNew_Z_6 = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_08Sep2021.csv\")\nNew_Z_7 = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_09Sep2021.csv\")","b69e9b24":"New_Z = pd.concat([New_Z_1,New_Z_2,New_Z_3,New_Z_4,New_Z_5,New_Z_6,New_Z_7],axis=0)","4a21a379":"New_Z.head()","e540bc6c":"New_Z.info()","6d06b199":"New_Z.isnull().sum()","34d27934":"New_Z['Price'].value_counts(normalize = True)*100","876a4f86":"New_Z['Volume'].value_counts(normalize = True)*100","5b7f82c2":"New_Z['Capitalisation'].value_counts(normalize = True)*100","6b91e5c3":"t_corr = New_Z.corr()\nplt.figure(figsize=(8,8))\nsns.heatmap(t_corr, annot=True, annot_kws={'size':10}, cmap='Reds')","38042359":"sns.catplot(x=\"Date\", y=\"Value\", kind=\"point\" , data=New_Z , aspect = 4 , height = 5)","4ecae3a9":"sns.catplot(x=\"Date\", y=\"Volume\", kind=\"point\", data=New_Z , aspect = 4 , height = 5 )","419b2ed6":"X_1 = New_Z['Date']\nX_2 = New_Z['Date']\nY_1 = New_Z['Value']\nY_2 = New_Z['Volume']","d8c27220":"f = plt.figure()\nf.set_figwidth(15)\nf.set_figheight(6)\nplt.xlabel('Date')\nplt.ylabel('Value - Volume')\nplt.plot(X_1, Y_1)\nplt.plot(X_2, Y_2)\nplt.legend([\"Date-Value\", \"Date-Volume\"])","7c7958f8":"# Label Encoding \n#New_Z['Date']=New_Z['Date'].map({'9\/1\/2021':1,'9\/2\/2021':2,'9\/3\/2021':3 , '9\/6\/2021':6 , '9\/7\/2021':7 , '9\/8\/2021':8 , '9\/9\/2021':9 , '9\/10\/2021':10})","309cbefd":"#Droping Useless Column :\nNew_Z = New_Z.drop(['Company'] , axis =1)","ec687d37":"New_Z.head()","54e63732":"#New_New_Z = pd.get_dummies(New_Z)\n#New_New_Z.shape","1660f44c":"New_Z = New_Z.drop(['Code'],axis=1)\nNew_Z = New_Z.drop(['Date'],axis=1)\nNew_Z.head()","40069518":"#SC = StandardScaler()\n#New_Z = SC.fit_transform(New_Z)\n#New_Z = pd.DataFrame(data = New_Z , columns = ['Price','Change','Volume','Value','Capitalisation'])\n#New_Z.head()","3d105494":"regressor = setup(data = New_Z , target = 'Price', session_id = 1)","59d48551":"best = compare_models()","337b2913":"#Im tryng to find the optimal 'n-components' value for PCA\npca = PCA(n_components = 0.95)\npca.fit(New_Z)\nreduced = pca.transform(New_Z)","691bb8cc":"pca = PCA().fit(New_Z)\n\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, 6, step=1)\ny = np.cumsum(pca.explained_variance_ratio_)\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='black')\n\nplt.xlabel('Number of Components')\nplt.xticks(np.arange(0, 11, step=1)) \nplt.ylabel('Cumulative variance (%)')\nplt.title('The number of components needed to explain variance')\n\nplt.axhline(y=0.90, color='r', linestyle='-')\nplt.text(0.5, 0.85, '90% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()","422c8371":"#regressor_2 = setup(data = New_Z , pca = True , pca_method = 'linear' , pca_components=4 , target = 'Price', session_id = 1)","38eacbef":"#best = compare_models()\n# it seems PCA is not working good here !!","53b4b35e":"# Save the final model\nExt_tree_reg = create_model('et')","f1b2f909":"plot_model(Ext_tree_reg)","05f13f13":"evaluate_model(Ext_tree_reg)","516224d0":"save_model(Ext_tree_reg , 'my et reg model')","ddfe8ccc":"gbr_1 = GradientBoostingRegressor(alpha=0.9 , loss='ls', min_samples_split=2 , min_samples_leaf=1 , validation_fraction=0.1 , learning_rate=0.1, n_estimators=100, subsample=1.0, criterion='friedman_mse', max_depth=3, max_features = 0.9 , random_state=1, tol=0.0001)","178727bc":"New_Z.head()","0589e6b7":"X = New_Z.drop(['Price'],axis=1)\nX = pd.DataFrame(data = X , columns = ['Change','Volume','Value','Capitalisation'])\nX.head()","13faea49":"y = New_Z['Price']\ny = pd.DataFrame(data = y , columns = ['Price'])\ny.head()","708a10c2":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.25, random_state = 1)","06fdaca8":"gbr_1.fit(X_train,y_train)","3be8c5ca":"r2 = r2_score(y_test, gbr_1.predict(X_test))\nprint(r2)","f8b94462":"parameters = [{'alpha':[0.9], 'ccp_alpha':[0.0], 'criterion':['friedman_mse'],\n                          'init':[None], 'learning_rate':[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9], 'loss':['ls'], 'max_depth':[1,2,3,4,5,6,7,8,9],\n                          'max_features':[0.9], 'max_leaf_nodes':[None],\n                          'min_impurity_decrease':[0.0], 'min_impurity_split':[None],\n                          'min_samples_leaf':[1], 'min_samples_split':[2],\n                          'min_weight_fraction_leaf':[0], 'n_estimators':[100],\n                          'n_iter_no_change':[None], 'presort':['deprecated'],\n                          'random_state':[1], 'subsample':[1.0], 'tol':[0.0001],\n                          'validation_fraction':[0.1], 'verbose':[0], 'warm_start':[False]}]","71cb75fd":"grid_search = GridSearchCV(estimator = gbr_1,\n                           param_grid = parameters,\n                           scoring = 'r2',\n                           cv = 10,\n                           n_jobs = -1)","a8dc07aa":"# Run these commands in first run \ngrid_search.fit(X_train, y_train.values.ravel())","de764c61":"best_r2 = grid_search.best_score_\nprint(\"Best r2 score: {:.2f} \".format(best_r2))","c8dc1605":"best_parameters = grid_search.best_params_\nprint(\"Best Parameters:\", best_parameters)","e5f004be":"gbr_2 = GradientBoostingRegressor(alpha=0.9 , loss='ls', min_samples_split=2 , min_samples_leaf=1 , validation_fraction=0.1 , learning_rate=0.3, n_estimators=100, subsample=1.0, criterion='friedman_mse', max_depth=3, max_features = 0.9 , random_state=1, tol=0.0001)","c274b86b":"gbr_2.fit(X_train, y_train)","738f85de":"save_model(gbr_2 , 'my gbr model')","3f53fb55":"Test = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_10Sep2021.csv\")","6085c15d":"Test_input = Test.drop(['Date','Company','Code','Price'],axis=1)\nTest_input.head()","9611d021":"Test.head()","cddcf381":"Actual_val = Test['Price']\nActual_val = pd.DataFrame(data=Actual_val,columns=['Price'])\nActual_val.head()","cd49db60":"#SC = StandardScaler()\n#Test = SC.fit_transform(Test)\n#Test = pd.DataFrame(data = Test , columns = ['Price','Change','Volume','Value','Capitalisation','Date'])\n#Test.head()","c1cf321d":"predictions = predict_model(gbr_2, data = Test_input)","fe233e1b":"predictions","5d2c3e59":"Predicted_val = predictions['Label']\n#Actual_val = predictions['Price'].values","3e305b69":"mean_absolute_error(Actual_val, Predicted_val)","03d8fae3":"r2_score(Actual_val, Predicted_val)","a7b4055e":"Test = pd.read_csv(\"..\/input\/nzxdata-edited\/nzxData_10Sep2021.csv\")\nPrice = Test['Price']\nTest.head()","a84494d6":"Test = Test.drop(['Price'],axis=1)","14aa0256":"Predicted_val = Predicted_val.values","b11169d7":"Predicted_val = pd.DataFrame(data=Predicted_val,columns=['Predicted Price'])","f3c4a83a":"Predicted_val.head()","e42c0ec6":"Result = pd.concat([Test, Price ,Predicted_val],axis=1)\nResult","fc0c0ebb":"sns.regplot(x=\"Price\", y=\"Predicted Price\", data=Result)","0c0ded8c":"# M.Hossein.Hashemi","37d45e68":"# Manual Way","6ee52838":"# Data Preprocessing","4e9c719d":"# Visualization","d2e072c9":"# Importing Libraries","a67355f9":"# Testing PCA on data","a04aa292":"# EDA","d6601f35":"# Visualization"}}