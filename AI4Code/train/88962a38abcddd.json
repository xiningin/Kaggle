{"cell_type":{"ec07ec36":"code","654aeb9a":"code","2abaf580":"code","93419c90":"code","a1ae6908":"code","92ee58fd":"code","9942f1dc":"code","5ba04378":"code","19f07199":"code","315894cd":"code","bde19713":"code","9d4b95c5":"code","b48ee79f":"code","8d385f7d":"code","9100e5c7":"code","1e0b2de2":"code","e482d25b":"code","b8b7c164":"code","ba9e8dbb":"code","f8a3086f":"code","4a6b8968":"code","0686d866":"code","e55d2cc9":"code","ca757035":"code","14d389e0":"code","034402a2":"markdown","45ef2064":"markdown","f50cecfe":"markdown","7ae7252f":"markdown","b98ac9c7":"markdown","ac0ebd64":"markdown","e523fb38":"markdown","ebe24e02":"markdown","3d5eb354":"markdown","a1314d20":"markdown","1e5253e7":"markdown","a437e34b":"markdown","82f1564c":"markdown","325a5735":"markdown","cc30fc44":"markdown","f61e8a11":"markdown","ac8ad9a6":"markdown","5f71960e":"markdown","1905cebb":"markdown","4bb83e2a":"markdown","aa788a69":"markdown","af995c08":"markdown","aa3beb92":"markdown"},"source":{"ec07ec36":"import json\nimport datetime\nimport pandas as pd\nimport numpy as np\nimport urllib.request\nimport plotly.express as px\nimport matplotlib.pyplot as plt","654aeb9a":"#url = '..\/input\/rki-covid19-dataset\/data'\nurl = '..\/input\/rki-covid19-dataset\/dd4580c810204019a7b8eb3e0b329dd6_0.csv'\nrki_data = pd.read_csv(url, usecols=['IdLandkreis', 'Meldedatum', 'AnzahlFall', 'AnzahlTodesfall'], \n                       dtype={'IdLandkreis': str}, parse_dates=['Meldedatum'])\n#rki_data.head()","2abaf580":"print('Rows: ', len(rki_data), ' Cases: ', rki_data.AnzahlFall.sum())","93419c90":"berlin_ids = [str(x) for x in range(11001, 11013)]\nnew_ids = ['11000' for x in range(11001, 11013)]\nreplace_ids = dict(zip(berlin_ids, new_ids))\nrki_data = rki_data.replace(replace_ids)","a1ae6908":"rki_data = rki_data.groupby(['Meldedatum','IdLandkreis']).sum()\nrki_data = rki_data.sort_values(by=['IdLandkreis', 'Meldedatum'])\nrki_data = rki_data.reset_index()\nrki_data.head()","92ee58fd":"print('Rows: ', len(rki_data), ' Cases: ', rki_data.AnzahlFall.sum())","9942f1dc":"with open('..\/input\/countiespolygonssmaller\/counties_polygons_smaller.json') as file:\n    counties_polygons = json.load(file)","5ba04378":"population_data = pd.read_csv('..\/input\/population-germanycsv\/population_germany.csv', sep=';', dtype={'county_id':str})\npopulation_data.head()","19f07199":"print('Rows: ', len(population_data), ' Total: ', population_data.population.sum())","315894cd":"weeks_review = abs(round((rki_data.Meldedatum.min() - rki_data.Meldedatum.max()).days\/7)) - 1","bde19713":"def select_periode(weeks=3):\n    first_record_date = rki_data.Meldedatum.min()\n    most_recent_record_date = rki_data.Meldedatum.max()\n    periods = {}\n    for week in range(weeks):\n        periode = [most_recent_record_date - datetime.timedelta(days=(7+week*7)) , most_recent_record_date - datetime.timedelta(days=(week*7))]\n        if periode[0] > first_record_date:\n            periods[(weeks-week)] = periode\n    return periods\nperiods = select_periode(weeks_review)","9d4b95c5":"def fill_zero_records(df, date):\n    for county_id in population_data.county_id:\n        if county_id not in df.IdLandkreis.values:\n            df = df.append({'IdLandkreis': county_id, 'AnzahlFall': 0.0, 'week': date} , ignore_index=True) \n    return df","b48ee79f":"def append_periode_data(periode):\n    mask = (rki_data['Meldedatum'] > periode[0]) & (rki_data['Meldedatum'] <= periode[1])\n    periode_data = rki_data.loc[mask]\n    periode_data = periode_data.groupby(['IdLandkreis']).sum()\n    periode_data = periode_data.sort_values(by=['IdLandkreis'])\n    periode_data = periode_data.reset_index()\n    periode_data['week'] = [periode[1] for n in range(len(periode_data))]\n    periode_data = fill_zero_records(periode_data, periode[1])\n    return periode_data","8d385f7d":"plot_data = pd.DataFrame(columns=['IdLandkreis', 'AnzahlFall', 'week'])\nfor i in range(1, (weeks_review+1)):\n    plot_data = plot_data.append(append_periode_data(periods[i]))","9100e5c7":"plot_data = plot_data.merge(population_data, left_on='IdLandkreis', right_on='county_id')\nplot_data['per100000'] = round(100000 * (plot_data.AnzahlFall \/ plot_data.population), 1)\nplot_data = plot_data.astype({'week': 'str'})\nplot_data.head()","1e0b2de2":"print('Rows: ', len(plot_data), 'Cases selected: ', plot_data.AnzahlFall.sum())","e482d25b":"def plot_choropleth_map(counties_polygons, df, max_range=150):\n    fig = px.choropleth_mapbox(df, geojson=counties_polygons, locations=\"county_id\", color=\"per100000\",\n                               color_continuous_scale=[\"green\", \"yellow\", \"red\", \"purple\", \"darkblue\", \"#03002e\"],\n                               featureidkey=\"properties.krs_code\",\n                               hover_name=\"name\",\n                               range_color=(0, max_range),\n                               animation_frame=\"week\",\n                               mapbox_style=\"carto-positron\",\n                               zoom=4.5, center={\"lat\": 51.2, \"lon\": 11.03283},\n                               opacity=0.8)\n    fig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\n    fig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 2000\n    fig.show(\"notebook\")","b8b7c164":"plot_choropleth_map(counties_polygons, plot_data)","ba9e8dbb":"# load data from local drive\ndf_rki_data = pd.read_excel('..\/input\/rki-daily-numbers\/Fallzahlen_Kum_Tab.xlsx', 'F\u00e4lle-Todesf\u00e4lle-gesamt', header=2)","f8a3086f":"# change all incorrect date formats into python datetime \ndef unify_dateformat(item):\n    dateformats = ['%Y-%m-%d %H:%:M:%S', \n                   '%d.%m.%Y',\n                   '%d.%m,%Y']\n    if isinstance(item, datetime.date):\n        if item.year == 2022:\n            item = item.replace(year=2021)\n        if item.year == 2012:\n            item = item.replace(year=2021)\n        return item\n    else:\n        for dformat in dateformats:\n            try:\n                date = datetime.datetime.strptime(item, dformat)\n                if date.year == 2022:\n                    date = date.replace(year=2021)\n                return date\n            except:\n                pass\n        \n\nnew_dates = []\nfor item in df_rki_data.Berichtsdatum:\n    new = unify_dateformat(item)\n    new_dates.append(new)\nnew_dates = pd.Series(new_dates)\n\ndf_rki_data.Berichtsdatum = new_dates","4a6b8968":"def cases(title, df_plot, info_text):\n    \n    fig, ax1 = plt.subplots(figsize=(20,5))\n    \n    ax1.annotate('Pandemic \\nplans update', xy=(datetime.datetime(2020, 2, 26), 350), \n                 xytext=(datetime.datetime(2020, 2, 15), 5000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('Recommendation\\nto cancel events\\nwith more than\\n1000 participants', \n                 xy=(datetime.datetime(2020, 3, 8), 500), \n                 xytext=(datetime.datetime(2020, 2, 15), 8500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('Berlin schools closed', xy=(datetime.datetime(2020, 3, 17), 4000), \n                 xytext=(datetime.datetime(2020, 2, 15), 15500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Germany-wide contact ban', xy=(datetime.datetime(2020, 3, 23), 4000), \n                 xytext=(datetime.datetime(2020, 2, 15), 17500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Berlin schools restarted', xy=(datetime.datetime(2020, 4, 27), 1500), \n                 xytext=(datetime.datetime(2020, 5, 25), 9500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('Easings', xy=(datetime.datetime(2020, 5, 6), 1000), \n                 xytext=(datetime.datetime(2020, 5, 25), 7500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Start Bln Holidays', xy=(datetime.datetime(2020, 6, 25), 1000), \n                 xytext=(datetime.datetime(2020, 6, 25), 6000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('End Bln Holidays', xy=(datetime.datetime(2020, 8, 7), 1000), \n                 xytext=(datetime.datetime(2020, 8, 7), 6000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Start BaW\u00fc Holidays', xy=(datetime.datetime(2020, 7, 30), 1200), \n                 xytext=(datetime.datetime(2020, 7, 30), 7000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('End BaW\u00fc Holidays', xy=(datetime.datetime(2020, 9, 12), 1200), \n                 xytext=(datetime.datetime(2020, 9, 12), 7000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Announcement', xy=(datetime.datetime(2020, 10, 28), 0), \n                 xytext=(datetime.datetime(2020, 10, 28), 30500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('\"Wellenbrecher-Lockdown\"', xy=(datetime.datetime(2020, 11, 2), 0), \n                 xytext=(datetime.datetime(2020, 11, 2), 27500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Announcement', xy=(datetime.datetime(2020, 12, 13), 0), \n                 xytext=(datetime.datetime(2020, 12, 13), 18500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('Stricter \\nLockdown', xy=(datetime.datetime(2020, 12, 16), 0), \n                 xytext=(datetime.datetime(2020, 12, 16), 14500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Vaccinations \\nstart', xy=(datetime.datetime(2020, 12, 27), 0), \n                 xytext=(datetime.datetime(2020, 12, 27), 32500), arrowprops=dict(color='lightgrey', shrink=0.05))\n\n    \n    ax1.annotate('Announcement', xy=(datetime.datetime(2021, 1, 5), 0), \n                 xytext=(datetime.datetime(2021, 1, 5), 10500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('Stricter\\nLockdown', xy=(datetime.datetime(2021, 1, 11), 0), \n                 xytext=(datetime.datetime(2021, 1, 11), 6000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Hairdessers\\nreopen ', xy=(datetime.datetime(2021, 3, 1), 0), \n                 xytext=(datetime.datetime(2021, 3, 1), 12500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    \n    ax1.text(datetime.datetime(2020, 6, 20), 12000, info_text)\n    \n    ax2 = ax1.twinx()\n    \n    ax1.plot(df_plot.Berichtsdatum, df_plot['Differenz Vortag F\u00e4lle'], label='cases recorded', color='lightblue')\n    ax2.plot(df_plot.Berichtsdatum, df_plot['Differenz Vortag Todesf\u00e4lle'], label='deaths recorded', color='blue')\n    ax1.set_xlabel('Date')\n    ax1.set_ylabel('cases recorded', color='lightblue')\n    ax2.set_ylabel('deaths recorded', color='blue')\n    \n    ax1.axhline(linewidth=0.1, color='black')\n    \n    plt.title('Daily recorded Covid19 cases in ' + title)\n    ax1.legend(loc='upper left', bbox_to_anchor=(0.01, 0.98))\n    ax2.legend(loc='upper left', bbox_to_anchor=(0.01, 0.9))\n    plt.show()","0686d866":"info_text = 'Number of recorded cases \\n total:' + str(df_rki_data['Differenz Vortag F\u00e4lle'].sum()) + '\\n'\nfor day in range(7):\n    date_last_records = df_rki_data.Berichtsdatum.max() - datetime.timedelta(days=day)\n    df_last_records = df_rki_data.loc[df_rki_data['Berichtsdatum'] == date_last_records]\n    number = df_last_records.groupby(['Berichtsdatum']).sum()\n    info_text += '\\n' + str(date_last_records.strftime('%Y-%m-%d')) + ': ' + str(int(number['Differenz Vortag F\u00e4lle'].values[0]))","e55d2cc9":"title = 'Germany'\ncases(title, df_rki_data, info_text)","ca757035":"def means(title, df_plot):\n    fig, ax1 = plt.subplots(figsize=(20,5))   \n    \n    ax1.annotate('Berlin schools closed', xy=(datetime.datetime(2020, 3, 17), 0), \n                 xytext=(datetime.datetime(2020, 3, 17), 15000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Germany-wide contact ban', xy=(datetime.datetime(2020, 3, 23), 0), \n                 xytext=(datetime.datetime(2020, 3, 23), 13500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Berlin schools restarted', xy=(datetime.datetime(2020, 4, 27), 0), \n                 xytext=(datetime.datetime(2020, 4, 27), 10500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('Easings', xy=(datetime.datetime(2020, 5, 6), 0), \n                 xytext=(datetime.datetime(2020, 5, 6), 8000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Start Bln Holidays', xy=(datetime.datetime(2020, 6, 25), 0), \n                 xytext=(datetime.datetime(2020, 6, 25), 8000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('End Bln Holidays', xy=(datetime.datetime(2020, 8, 7), 0), \n                 xytext=(datetime.datetime(2020, 8, 7), 8000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Start BaW\u00fc Holidays', xy=(datetime.datetime(2020, 7, 30), 0), \n                 xytext=(datetime.datetime(2020, 7, 30), 10500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('End BaW\u00fc Holidays', xy=(datetime.datetime(2020, 9, 12), 0), \n                 xytext=(datetime.datetime(2020, 9, 12), 10500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Announcement', xy=(datetime.datetime(2020, 10, 28), 0), \n                 xytext=(datetime.datetime(2020, 10, 28), 21500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('\"Wellenbrecher-Lockdown\"', xy=(datetime.datetime(2020, 11, 2), 0), \n                 xytext=(datetime.datetime(2020, 11, 2), 19500), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Announcement', xy=(datetime.datetime(2020, 12, 13), 0), \n                 xytext=(datetime.datetime(2020, 12, 13), 15000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('Stricter \\nLockdown', xy=(datetime.datetime(2020, 12, 16), 0), \n                 xytext=(datetime.datetime(2020, 12, 16), 12000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Vaccinations \\nstart', xy=(datetime.datetime(2020, 12, 27), 0), \n                 xytext=(datetime.datetime(2020, 12, 27), 5000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    \n    \n    ax1.annotate('Announcement', xy=(datetime.datetime(2021, 1, 5), 0), \n                 xytext=(datetime.datetime(2021, 1, 5), 21000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    ax1.annotate('Stricter\\nLockdown', xy=(datetime.datetime(2021, 1, 11), 0), \n                 xytext=(datetime.datetime(2021, 1, 11), 12000), arrowprops=dict(color='lightgrey', shrink=0.05))\n    \n    ax1.annotate('Hairdessers\\nreopen', xy=(datetime.datetime(2021, 3, 1), 0), \n                 xytext=(datetime.datetime(2021, 3, 1), 12000), arrowprops=dict(color='lightgrey', shrink=0.05))\n\n    \n    ax2 = ax1.twinx()\n    ax1.plot(df_plot.Berichtsdatum, df_plot.SMA_7, label='7days means', color='blue')\n    ax1.axhline(y=0, linewidth=0.3, color='blue')\n    \n    ax2.plot(df_plot.Berichtsdatum, df_plot.Gradient7, label='gradient', color='darkgreen')\n    ax2.axhline(y=0, linewidth=0.3, color='darkgreen')\n    \n    ax1.set_xlabel('Date')\n    ax1.set_ylabel('7 days mean of cases recorded', color='blue')\n    ax2.set_ylabel('gradient', color='darkgreen')\n    \n    ax1.legend(loc='upper left', bbox_to_anchor=(0.01, 0.98))\n    ax2.legend(loc='upper left', bbox_to_anchor=(0.01, 0.9))\n    \n    plt.title(title + '-wide 7 days mean of recorded cases and the gradient')\n    \n    plt.show()","14d389e0":"df_rki_data['SMA_7'] = df_rki_data['Differenz Vortag F\u00e4lle'].rolling(window=7).mean()\ndf_rki_data['Gradient7'] = pd.DataFrame(np.gradient(df_rki_data.SMA_7))\nmeans('Germany', df_rki_data)","034402a2":"---\n### 2.1 Selecting 7-days steps and reduce the dataframe to the selected dates\n","45ef2064":"---\n### 1.3 Getting the population numbers of the individual counties.\n\nI will use the statistic database of the German government https:\/\/www-genesis.destatis.de\/genesis\/online\n\nTable  '12411-0018: Bev\u00f6lkerung: Kreise, Stichtag, Geschlecht, Altersgruppen' is suitable for this purpose. \n\nThis table also includes the currently 401 active district names (city of Berlin as a district with the number 11000) as well as several older district names from the time before the last district reform. A reduced version of this file is also saved locally.","f50cecfe":"---\n### 2.5 Combining dataframes - Add population data ","7ae7252f":"---\n### 2.3 Gathers the data of the selected 7-day period","b98ac9c7":"#### Add the simple mean average over 7 days and the corresponding gradient","ac0ebd64":"Re-check number of rows and total number of cases included in the table (the total number of cases should be the same before and after the data preparations).","e523fb38":"---\n### 1.1 Cases reported to the RKI \n\nThe data transmitted by the federal state authorities to the RKI are made available online on a daily basis. The data set is usually updated during the night. The entire current data set is loaded here, which may well take some seconds. \n\nDescription of the data: https:\/\/www.arcgis.com\/home\/item.html?id=f10774f1c63e40168479a1feb6c7ca74 \n\nDownload link of the current data: https:\/\/www.arcgis.com\/sharing\/rest\/content\/items\/f10774f1c63e40168479a1feb6c7ca74\/data\n\nA preview of the dataset reveals which columns are sufficient for further processing; all other columns are not loaded into the dataframe for reasons of data economy.\n\nOf further interest are the columns \n\n- 'AnzahlFall' (number of recorded cases), \n- 'Meldedatum' (date of record) and \n- 'IdLandkreis' (county ID).\n\nFrom version 51 on I use an additional data source, with the official report figures of the RKI for further analysis. Details see below at \"Some aditional information\".","ebe24e02":"Check number of rows and total number of population included in the table.","3d5eb354":"---\n## 1. Collecting data:","a1314d20":"---\n## 3. Plot weekly 7-days incidence per county in Germany\n\nDepending on the selected number of weeks to be displayed, this may take a little longer. I am still looking for a faster solution (suggestions are welcome).","1e5253e7":"# Animated Choropleth Covid19 Germany - 7 Days Incidence\n\nAn animated map of the recorded Covid19 cases in Germany. \n\nI still lack a visualisation of the temporal course of the 7-day incidence (which is an important indicator for protection measures for German authorities), with the highest possible spatial resolution.\n\nTherefore I have animate the temporal course of the 7 days incidence with a choropleth map. As input data I use the current case numbers reported by the Robert Koch Institut - RKI (German government\u2019s central scientific institution in the field of biomedicine). ","a437e34b":"Now group and summarise records of a date ('Meldedatum') and a county ('IdLandkreis'). \n\nThe reported cases of one day from one county (which previously appeared in the table differentiated by age and gender) are grouped and summarised accordingly. Afterwards I restore the table index changed by the grouping ( reset.index() )","82f1564c":"Lets do some first data preparation:\n\nGroup the data for Berlin into a single county ID, because in the RKI data set, the district of Berlin is divided into 12 individual districts; no.11001 to no.11012. Both the GEOJSON file later selected here as well as the population statistic file later used here consider Berlin only as one district or county. Thats why all county ids from no.11001 to no.11012 will be replaced now by no.11000, the county id of Berlin.","325a5735":"Add the population figures to the compiled plot data. Calculate the reported cases of 7 days per 100000 inhabitants; in column per100000.","cc30fc44":"Check number of rows and total number of cases selected included in the table.","f61e8a11":"Check number of rows and total number of cases included in the table.","ac8ad9a6":"Starting from the last reported date in the table, the table values are summarised in groups of 7 day steps. According to the previously entered values (week review) the values of these weeks are selected for further processing.","5f71960e":"---\n## 2. Preparing data for plots\n\nNow that all the relevant basic data are available in a usable form, they are ready to be further processed and merged for the map display.","1905cebb":"---\n### 1.2 Load county shapes as geojson file from a websource and save in a local file. \n\nHere I will use a geojson file with the polygons of the districts in Germany from public.opendatasoft.com - Look at: Map - Language: German - Kreise-Germany. As described above, the city of Berlin is summarized in a single administrative district (here with the number 11000). Thats why this file contains the outlines of the current 401 administrative districts in Germany. ","4bb83e2a":"---\n### 2.4 Merging all 7-day data sets","aa788a69":"Every 7 day period is displayed in play mode for about 2 seconds before the pointer jumps forward. The colour scale is selected according to the traffic light models of the federal states. Note: This illustrations are for training purposes only. ","af995c08":"---\n## Some additional information\n\nI have changed the data source for the daily case numbers for the following plots. The daily case numbers are now read directly from the table published by RKI. The daily new reports from the reduced data set of the districts used here could only be determined with strong temporal deviations. The cumulative values of the figures from the above-mentioned reduced data set still correspond to the officially reported case numbers of the RKI; likewise the calculated 7-day incidences for each district.\n","aa3beb92":"---\n### 2.2 Double check if all counties are located in the rki dataframe for the selected time span; insert zeros for counties without reported cases.\n\nSometimes in some counties no Covid19 cases are reported. Therefore the counties do not appear in the RKI list (for the selected timespan). For this reason, the county table is used to compare which counties are not listed and these are added to the plot table with county id ('IdLandkreis') and the values 0 and 0. After all, there must be 401 counties again."}}