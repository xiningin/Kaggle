{"cell_type":{"3f238381":"code","1ff57e18":"code","b65e098f":"code","2b2e94ec":"code","52ccf541":"code","3a490669":"code","723f14bd":"code","a2046998":"code","82b560c8":"code","3b0f5aa0":"code","8b33e615":"code","dacb911c":"code","16b20c97":"code","500de161":"code","df38bbf7":"code","834137cf":"code","96cd4c24":"code","b4e43d2f":"markdown","f4e3650a":"markdown","577ff0c5":"markdown"},"source":{"3f238381":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing import image\nimport os","1ff57e18":"sample = image.load_img(\"..\/input\/rockpaperscissors\/paper\/04l5I8TqdzF9WDMJ.png\")\nplt.imshow(sample)\nplt.axis(\"off\")\nplt.show()","b65e098f":"X_train = []\nlabels = []\n\nlabels_dict = {\n    \"paper\" : 0,\n    \"rock\" : 1,\n    \"scissors\" : 2\n}\n\nfilepath = \"..\/input\/rockpaperscissors\"\n\nfor file in os.listdir(filepath):\n    \n    if file in labels_dict.keys():\n        \n        for img_path in os.listdir(os.path.join(filepath, file)):\n            \n            img = image.load_img(os.path.join(filepath, file, img_path), target_size=(224,224))\n            img = image.img_to_array(img)\/255.0\n            \n            X_train.append(img)\n            labels.append(labels_dict[file])\n\nX_train = np.array(X_train)","2b2e94ec":"len(X_train), len(labels)","52ccf541":"from keras.applications.resnet50 import ResNet50\nfrom keras.optimizers import Adam\nfrom keras.layers import *\nfrom keras.models import Model","3a490669":"model = ResNet50(include_top=False, weights='imagenet', input_shape=(224, 224, 3))","723f14bd":"# We are using the Convolution base of ResNet50 model\n# and will add the dense layers according to our classifier\nav1 = GlobalAveragePooling2D()(model.output)\nfc1 = Dense(256, activation='relu')(av1)\nd1 = Dropout(0.5)(fc1)\nfc2 = Dense(3, activation='softmax')(d1)","a2046998":"model_new = Model(inputs= model.input, outputs = fc2)","82b560c8":"# FINE TUNING the model\nfor ix in range(169):\n\n    model_new.layers[ix].trainable = False\n\n# Compiling the model after freezing\n\nadam = Adam(learning_rate=0.00003)\nmodel_new.compile(\n    loss= 'categorical_crossentropy',\n    optimizer=adam,\n    metrics=['accuracy']\n)","3b0f5aa0":"from keras.callbacks import ModelCheckpoint\ncheckpoint = ModelCheckpoint(\n    \"best_model.h5\",\n    monitor=\"val_loss\",\n    verbose=0,\n    save_best_only=True,\n    save_weights_only=True\n)","8b33e615":"# One hot encoded labels\nfrom keras.utils import np_utils\nY_train = np_utils.to_categorical(labels)","dacb911c":"hist = model_new.fit(X_train,\n                     Y_train,\n                     shuffle= True,\n                     batch_size= 16,\n                     epochs= 20,\n                     validation_split= 0.15,\n                     callbacks=[checkpoint]\n                     )","16b20c97":"# Loading the best model\nmodel_new.load_weights(\".\/best_model.h5\")","500de161":"h = hist.history\nplt.style.use('seaborn')","df38bbf7":"plt.plot(h['loss'], c='blue', label='Training Loss')\nplt.plot(h['val_loss'], c= 'green', label= 'Validation loss')\nplt.title(\"Loss\")\nplt.legend()\nplt.show()","834137cf":"plt.plot(h['accuracy'], c='blue', label='Training Accuracy')\nplt.plot(h['val_accuracy'], c= 'green', label= 'Validation Accuracy')\nplt.title(\"Accuracy\")\nplt.legend()\nplt.show()","96cd4c24":"## Testing some random samples\n\nrev_label_dict = dict([(value, key) for (key, value) in labels_dict.items()])\n\nimport random\n\nfor i in range(10):\n    idx = random.randint(0, len(X_train))\n    plt.imshow(X_train[idx])\n    plt.axis(\"off\")\n    pred = rev_label_dict.get(np.argmax(model_new.predict(X_train[idx].reshape(1,224,224,3))))\n    org = rev_label_dict.get(labels[idx])\n    plt.title(\"Pred : {}, Org : {}\".format(pred, org))\n    plt.show()","b4e43d2f":"## Visulaising Loss and Accuracy","f4e3650a":"## A sample Image","577ff0c5":"## Model Prep\n- Will use ResNet50 Model\n- Will implement Transfer learning"}}