{"cell_type":{"d0c79da6":"code","9f53b42f":"code","5a4491db":"code","9f4d2719":"code","9730f3c4":"code","5321e0d0":"code","168b29b1":"code","edd1e845":"code","ad746a24":"code","3dba986f":"code","60131f48":"code","c1fa388c":"code","ee41d17d":"code","3fad3dc4":"code","cb2c6040":"code","0dc1d659":"code","94b9d6d6":"code","53727d94":"code","2e43409a":"code","0e2deb1c":"code","496c130d":"code","2eb66061":"code","384aa7ad":"markdown","9c8a7e3d":"markdown","dda84592":"markdown","13398d65":"markdown","faa3c9c0":"markdown","828ce8d5":"markdown","3a0dd1e3":"markdown","b624909c":"markdown","cce65de5":"markdown","3ef98a32":"markdown","4334acc8":"markdown","0d12bf39":"markdown","f7374255":"markdown","edb69364":"markdown","97fa9201":"markdown","22bc79f8":"markdown","a18c8abb":"markdown"},"source":{"d0c79da6":"import numpy as np # linear algebra\nimport pandas as pd ","9f53b42f":"!pip3 install pycaret","5a4491db":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","9f4d2719":"from pycaret import classification\nclassification_setup = classification.setup(data=train,target='Survived', ignore_features = ['Ticket', 'Name', 'PassengerId'], silent = True, session_id=42)","9730f3c4":"classification.compare_models()","5321e0d0":"from pycaret.classification import *\nmodels()\ncompare_models(models().index.tolist())","168b29b1":"lgb_classifier = classification.create_model('lightgbm')","edd1e845":"params = {'learning_rate':[0.15,0.1,0.05,0.01,0.005,0.001],\n          'n_estimators':[100,250,500,750,1000,1250,1500,1750],\n          'max_depth': np.random.randint(1, (len(train.columns)*.85),20),\n          'max_features': np.random.randint(1, len(train.columns),20),\n          'min_samples_split':[2,4,6,8,10,20,40,60,100], \n          'min_samples_leaf':[1,3,5,7,9],\n          'criterion': [\"gini\", \"entropy\"]}\n\ntune_lgb = classification.tune_model(lgb_classifier, custom_grid = params)","ad746a24":"# Tune the model\nparams = {'alpha':[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}\ntune_ridge = classification.tune_model(create_model('ridge'), custom_grid = params, n_iter=50, fold=50)","3dba986f":"# ensemble boosting\nbagging = classification.ensemble_model(tune_lgb, method= 'Bagging')","60131f48":"from pycaret.classification import blend_models\n# blending all models\n# blend_all = blend_models(method='hard')","c1fa388c":"# create individual models for stacking\nridge_cls = classification.create_model('ridge')\nextre_tr = classification.create_model('et')\nlgb = classification.create_model('lightgbm')\ncat_cls = classification.create_model('catboost')\nlg_cls = classification.create_model('lr')\n","ee41d17d":"from pycaret.classification import stack_models\n# stacking models\n# stacker = stack_models(estimator_list = [ridge_cls, extre_tr, lgb, cat_cls, lg_cls],method='hard')","3fad3dc4":"interpret_model(tune_lgb)","cb2c6040":"from pycaret.classification import *\n# plotting a model\nplot_model(tune_lgb,plot = 'pr')","0dc1d659":"# plotting a model\nplot_model(tune_lgb,plot = 'confusion_matrix')","94b9d6d6":"# Validation Curve\nplot_model(tune_lgb, plot = 'vc')","53727d94":"# AUC Curve\nplot_model(tune_lgb, plot = 'auc')","2e43409a":"# error Curve\nplot_model(tune_lgb, plot = 'error')","0e2deb1c":"y_pred = predict_model(tune_lgb, data=test)","496c130d":"y_pred","2eb66061":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred['Label']\n    })\nsubmission.to_csv(\"submission.csv\", index=False)","384aa7ad":"**Ensemble Model**","9c8a7e3d":"**Prediction**","dda84592":"* Above score grid, shows the result of the model at each iteration and provide mean and std of it.","13398d65":"In PyCaret, we can create bagging, boosting, blending, and stacking ensemble models with just one line of code.","faa3c9c0":"Quickly let us get into the installation and build a perfect model.","828ce8d5":"**Stack Models**\n\nStacking is an ensembling method that uses meta-learning. The idea behind stacking is to build a meta-model that generates the final prediction using the prediction of multiple base estimators.","3a0dd1e3":"So, now the necessary preprocessing is done, let\u2019s create a classification model. ","b624909c":"**Plot Model**\nPycaret also evaluate your model performance as easy as you build the model with different plots","cce65de5":"**Hyperparameter Tuning**\n\n* Depending on the model evaluation metric(s) we are interested in pycaret helps us to straightaway zoom in on the top-performing model which we can further tune using the hyper-parameters.\n* tune_model() function tune the hyperparameters of a model and it takes one parameter model abbreviation string (same as we used for creating model)","3ef98a32":"**Data Dictionary**:\n* survival - Survival (0 = No; 1 = Yes)\n* class - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n* name - Name\n* sex - Sex\n* age - Age\n* sibsp - Number of Siblings\/Spouses Aboard\n* parch - Number of Parents\/Children Aboard\n* ticket - Ticket Number\n* fare - Passenger Fare\n* cabin - Cabin\n* embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)","4334acc8":"**Create Model**\n\n* Let\u2019s create an individual model that displays different evaluation matric using 10 k-fold with mean and std.\n* create_model function takes just the one parameter \u2013 the model abbreviation as a string.","0d12bf39":"**Blend Models**\n\nCombining different machine learning models and use a majority vote or the average predicted probabilities in case of classification to predict the final outcome.","f7374255":"**Setup**\n\n* Setup() performs inferences about the data and creates the transformation pipeline to prepare the data for modeling and deployment. \n* Initializing setup() function performs some basic preprocessing tasks like ignoring the IDs and Date Columns, imputing the missing values, encoding the categorical variables, and splitting the dataset into the train-test split, data imbalance, feature selection, binning, etc. for the rest of the modeling steps. When you run the setup function, it will first confirm the data types, and then if you press enter, it will create an environment for data preprocessing.\n* It takes 2 mendatory parameter Dataframe and name of the target column\n","edb69364":"## Import Libararies","97fa9201":"Just a functional execution call, and it will compare all the classification models with few seconds and display the sorted score grid.\n\nNote: It seems that the Ridge classifier gives higher accuracy than the rest classifier.","22bc79f8":"**Compare Models**\n\n* Compare_models function train all the models which are available in library using stratified cross validation, this function will return score grid of all model across k-fold(default=10).\n* Scoring matrics used are Accuracy, AUC, Recall, Precision, F1, Kappa and MCC. Mean and standard deviation of the scores across the folds are also returned.\n* You can blacklist(omit certain models from the comparison) and whiltelist(un only certain models for the comparison) the model, passig model ID\u2019s as a list of strings\neg. whitelist = compare_models(whitelist = ['dt','rf','xgboost'])\nblacklist = compare_models(blacklist = ['catboost', 'svm'])\n* Best model return as per the sort parameter(default=Accuracy) passed.\n* Also we can select N top models passing n_select(default=1) parameter","a18c8abb":"This returns you pandas dataframe with all ready-to-use models available in the library."}}