{"cell_type":{"c99ddab2":"code","706ecfd2":"code","b673a3f1":"code","181a1ab2":"code","b2f56c7b":"code","9ce6bf7a":"code","eadb7b8f":"code","045a1df5":"code","c719d579":"code","43e826d3":"code","2756e241":"code","1d2e22fa":"code","3ac459b4":"code","795c8104":"code","af05ab29":"code","6dcfad18":"code","e6ba6b43":"code","6bbe5ddd":"code","a98a2ac4":"code","03a3d325":"code","7f144322":"code","5df4c0ef":"code","e907448c":"code","e0cf61b0":"code","1d00e28c":"code","095dc625":"code","01e6ece9":"code","9d76e95d":"code","e4fa00ea":"code","742bd111":"code","41af945d":"code","8c283238":"code","aa375c09":"code","78db3190":"code","eadbb672":"code","f45bc05a":"code","daa666cc":"code","9b1ce8c2":"code","cb1f9123":"code","c481a293":"code","aab64c32":"code","4c3874f2":"code","70881e34":"code","64eb183f":"code","998b1d54":"code","5b37e1a8":"code","5948bf58":"code","b00b1f82":"code","173d1a75":"code","18d30707":"code","1def53a6":"code","bb18ecb0":"code","d12580e3":"code","add45298":"code","f5fc1967":"code","e73d52eb":"code","29cf89af":"code","e99c82f7":"code","6c7f50eb":"code","35a21f24":"code","ad089f1d":"code","191e037f":"code","369a24eb":"code","57b2d94b":"code","61f88348":"code","d68696a1":"code","fc17ab71":"code","f6b33f48":"code","9a3cb72f":"code","5b668a3e":"code","d0a85509":"code","fb20bc41":"code","82fe5815":"code","adcbe3be":"code","977c28c1":"code","7f4e96f0":"markdown","2e88597c":"markdown","ecb201c7":"markdown","1623883a":"markdown","c6d7c0f1":"markdown","bc15e606":"markdown","df296ca1":"markdown","fd18af76":"markdown","1b64ca0d":"markdown","c07199c5":"markdown","1f0a1a72":"markdown","5d524c95":"markdown","675b9873":"markdown","b255ad57":"markdown","b448d1b8":"markdown","040283fc":"markdown","502ca21e":"markdown","2fe38856":"markdown","726def3d":"markdown","d51a28e4":"markdown","3e1903b0":"markdown","183cf5da":"markdown","e3424de4":"markdown"},"source":{"c99ddab2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","706ecfd2":"train = pd.read_csv('..\/input\/slashing-prices\/Train.csv')","b673a3f1":"test=pd.read_csv('..\/input\/slashing-prices\/Test.csv')","181a1ab2":"train.head()","b2f56c7b":"test.head()","9ce6bf7a":"train.tail()","eadb7b8f":"test.tail()","045a1df5":"print(test.nunique())\nprint()\nprint(train.nunique())","c719d579":"categorical_feats= ['Item_Id','Date']\nnumerical_feats = []\nfor col in train.columns:\n    if col not in categorical_feats:\n        numerical_feats.append(col)\nnumerical_feats","43e826d3":"train[numerical_feats].describe()","2756e241":"numerical_feats_test=numerical_feats[:5]\nnumerical_feats_test.append(numerical_feats[-1])\ntest[numerical_feats_test].describe()","1d2e22fa":"#checking correlation\n\nnum=train.select_dtypes(exclude='object')\nnumcorr=num.corr()\nf,ax=plt.subplots(figsize=(17,1))\nsns.heatmap(numcorr.sort_values(by=['Low_Cap_Price'], ascending=False).head(1), cmap='Reds')\nplt.title(\" Numerical features correlation with the sale price\", weight='bold', fontsize=18)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold', color='dodgerblue', rotation=0)\nnumcorr['Low_Cap_Price'].sort_values(ascending=False)","3ac459b4":"train['Date'].value_counts(sort=False).plot.bar(figsize=(15,5))","795c8104":"test['Date'].value_counts(sort=False).plot.bar(figsize=(15,5))","af05ab29":"res = set.intersection(*(set(df['Product_Category']) for df in [train,test]))\nres","6dcfad18":"train['Product_Category'].value_counts().plot.bar()\nprint('train')","e6ba6b43":"test['Product_Category'].value_counts().plot.bar()\nprint('test')","6bbe5ddd":"train.groupby('Product_Category')['High_Cap_Price'].median().plot.bar()","a98a2ac4":"train.groupby('Product_Category')['Low_Cap_Price'].median().plot.bar()","03a3d325":"test.groupby('Product_Category')['High_Cap_Price'].median().plot.bar()","7f144322":"unique_train=train[numerical_feats[0]].unique()\nunique_train.sort()\nprint(unique_train)","5df4c0ef":"unique_test=test[numerical_feats[0]].unique()\nunique_test.sort()\nprint(unique_test)","e907448c":"res = set.intersection(*(set(df[numerical_feats[0]]) for df in [train,test]))\nres","e0cf61b0":"train[numerical_feats[0]].value_counts().plot.bar()\nprint('Train')\n","1d00e28c":"test[numerical_feats[0]].value_counts().plot.bar()\nprint('Test')","095dc625":"train.groupby(numerical_feats[0])['High_Cap_Price'].median().plot.bar()","01e6ece9":"train.groupby(numerical_feats[0])['Low_Cap_Price'].median().plot.bar()","9d76e95d":"test.groupby(numerical_feats[0])['High_Cap_Price'].median().plot.bar()","e4fa00ea":"train[numerical_feats[1]].value_counts(sort=False).plot.bar(figsize=(15,8))\nprint('train')","742bd111":"test[numerical_feats[1]].value_counts(sort=False).plot.bar(figsize=(15,8))\nprint('test')","41af945d":"train[numerical_feats[3]].value_counts(sort=False).plot.bar()\nprint('train')","8c283238":"test[numerical_feats[3]].value_counts(sort=False).plot.bar()\nprint('test')","aa375c09":"train[numerical_feats[4]].value_counts(sort=False).plot.bar(figsize=(15,5))\nprint(numerical_feats[4])","78db3190":"train.groupby('Product_Category')['Demand'].mean().plot.bar()","eadbb672":"train.groupby('State_of_Country')['Demand'].mean().plot.bar()","f45bc05a":"plt.figure(figsize=(15,6))\nplt.scatter(x=train['High_Cap_Price'], y=train['Low_Cap_Price'], color='crimson', alpha=0.5)\nplt.title('High\/low', weight='bold', fontsize=16)\nplt.xlabel('High Price', weight='bold', fontsize=12)\nplt.ylabel('Low Price', weight='bold', fontsize=12)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold')\nplt.show()","daa666cc":"plt.figure(figsize=(15,6))\nplt.scatter(x=train['Demand'], y=train['Low_Cap_Price'], color='crimson', alpha=0.5)\nplt.title('Demand\/low', weight='bold', fontsize=16)\nplt.xlabel('Demand', weight='bold', fontsize=12)\nplt.ylabel('Low Price', weight='bold', fontsize=12)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold')\nplt.axis([0, 50,0,20000])\nplt.show()","9b1ce8c2":"#Let's set the threshold as 40(this is totally experimental), and categorize as low demand and high demand.\ntrain['low_high']=train['Demand']>=40","cb1f9123":"test['low_high']=test['Demand']>=40","c481a293":"train['low_high'].value_counts().plot.bar()","aab64c32":"test['low_high'].value_counts().plot.bar()","4c3874f2":"from datetime import datetime  \ntrain['Date'] = pd.to_datetime(train.Date,format='%Y-%m-%d') \ntest['Date'] = pd.to_datetime(test.Date,format='%Y-%m-%d')\nfor i in (train, test):\n    i['year']=i.Date.dt.year \n    i['month']=i.Date.dt.month \n    i['day']=i.Date.dt.day\n   ","70881e34":"train['day of week']=train['Date'].dt.dayofweek \ntemp = train['Date']\ntest['day of week']=test['Date'].dt.dayofweek ","64eb183f":"def applyer(row):\n    if row.dayofweek ==4 or row.dayofweek == 5 or row.dayofweek == 6:\n        return 1\n    else:\n        return 0 \ntemp2 = train['Date'].apply(applyer) \ntrain['weekend']=temp2","998b1d54":"temp3 = test['Date'].apply(applyer) \ntest['weekend']=temp3","5b37e1a8":"num=train.select_dtypes(exclude='object')\nnumcorr=num.corr()\nf,ax=plt.subplots(figsize=(17,1))\nsns.heatmap(numcorr.sort_values(by=['Low_Cap_Price'], ascending=False).head(1), cmap='Reds')\nplt.title(\" Numerical features correlation with the sale price\", weight='bold', fontsize=18)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold', color='dodgerblue', rotation=0)\nnumcorr['Low_Cap_Price'].sort_values(ascending=False)","5948bf58":"train.head()","b00b1f82":"train.drop(['Date','Demand','year','Item_Id', 'day of week', 'day'],axis=1,inplace=True)\ntest.drop(['Date','Demand','year','Item_Id', 'day of week', 'day'],axis=1,inplace=True)","173d1a75":"from sklearn.preprocessing import MinMaxScaler\nscaler= MinMaxScaler()\nscaler.fit(train.drop(['Low_Cap_Price'],axis=1))\nscaled_features_train= scaler.transform(train.drop('Low_Cap_Price',axis=1))","18d30707":"from sklearn.preprocessing import MinMaxScaler\nscaler= MinMaxScaler()\nscaler.fit(test)\nscaled_features_train= scaler.transform(test)","1def53a6":"train.info()","bb18ecb0":"from sklearn.model_selection import train_test_split, cross_val_score\nX= train[['State_of_Country','Market_Category','Product_Category','Grade','High_Cap_Price','low_high','month','weekend']]\ny= train['Low_Cap_Price'] ","d12580e3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,random_state=101)","add45298":"from sklearn.linear_model import LinearRegression\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics","f5fc1967":"models=[]\nmodels.append(('DTC',DecisionTreeRegressor()))\nmodels.append(('KNC',KNeighborsRegressor()))\n#models.append(('LR',LinearRegression()))\nmodels.append(('RFC',RandomForestRegressor()))\n#models.append((\"MLP\",MLPRegressor()))\nmodels.append((\"GBC\",GradientBoostingRegressor()))","e73d52eb":"names=[]\nfor name,algo in models:\n    algo.fit(X_train,y_train)\n    prediction= algo.predict(X_test)\n    a= metrics.mean_squared_log_error(y_test,prediction) \n    print(\"%s: %f \"%(name, a))","29cf89af":"rm= RandomForestRegressor(random_state=22, n_estimators=400)","e99c82f7":"rm.fit(X_train,y_train)","6c7f50eb":"X_= test[['State_of_Country','Market_Category','Product_Category','Grade','High_Cap_Price','low_high','month','weekend']]","35a21f24":"prediction = rm.predict(X_)","ad089f1d":"rm2= RandomForestRegressor(random_state=101, n_estimators=400)","191e037f":"rm2.fit(X_train, y_train)","369a24eb":"prediction2= rm2.predict(X_)","57b2d94b":"gb= GradientBoostingRegressor(random_state=101, n_estimators=400)","61f88348":"gb.fit(X_train,y_train)","d68696a1":"pred=gb.predict(X_)","fc17ab71":"gb2= GradientBoostingRegressor(random_state=101, n_estimators=400)","f6b33f48":"gb2.fit(X_train,y_train)","9a3cb72f":"pred2=gb2.predict(X_)","5b668a3e":"gb3= GradientBoostingRegressor(random_state=101, n_estimators=400)","d0a85509":"gb3.fit(X_train,y_train)","fb20bc41":"pred3=gb3.predict(X_)","82fe5815":"gb4= GradientBoostingRegressor()\ngb4.fit(X_train,y_train)\npred4=gb4.predict(X_)","adcbe3be":"gb5= GradientBoostingRegressor()\ngb5.fit(X_train,y_train)\npred5=gb5.predict(X_)","977c28c1":"pre=(prediction+prediction2+pred+pred2+pred3+pred4+pred5)\/7","7f4e96f0":"some peaks. But, demand has very little effect on low cap prices. Quite shockingly, -ve correlation means when demand increases, the prices fall by very little amount(all other features remain constant).\n\nNOTE: correlation doesn't imply causation","2e88597c":"Low Cap price moves quite similarly to high cap in most product categories","ecb201c7":"DATE","1623883a":"There is some kind of trend. Peaks can easily be seen","c6d7c0f1":"Since, the date is not in continuation to the train data or something, so, we only need to extract some features from date. Because all the dates in test set are different from training data and it's not a time series as well. Let's check the plot for date.","bc15e606":"High Cap Price is the most correlated feature, i.e, it'll have the max weight in predicting the low cap price.","df296ca1":"I submitted 'pre' for the contest and got 39 rank on the public leaderboard out of 600+ submissions. There's a lot you can explore.\n","fd18af76":"STATE_OF_COUNTRY","1b64ca0d":"Here I'll use the average output of these 7 models. This is known as Ensemble learning.","c07199c5":"But from the graph we can easily see that uncommon elements belong to right side, i.e., they're scarce. So, they wont be affecting that much badly!! :D","1f0a1a72":"since grade has -ve correlation to low cap price, that means as grade inc, the low cap price decreases(all other features remain constant), therefore, we may reason that grade=0 is best quality and grade=3 is the worst.","5d524c95":"GRADE","675b9873":"MARKET CATEGORY","b255ad57":"the plots are quite similar in first 0-9 state_of_country and 18-23","b448d1b8":"1) Present in train but not in test: 10, 13, 14\n\n2) Present in test but not in train: 12, 15","040283fc":"**IF YOU LIKED THE NOTEBOOK, THEN DO UPVOTE :)**","502ca21e":"Here, false just means low demand and true means high demand. ","2fe38856":"Present in train but not in test: 8\n\nPresent in test but not in train: 2","726def3d":"Hmmm, interesting, something triangle like figure is formed. Another interesting thing to note is that when max=60k, then also, the low price is quite low. ","d51a28e4":"The product category '0' isthe most abundant and is 7 times more than second most abundant category '10'(in train set). What can be the reason for this? Have they filled null values with 0? It might be possible that the products whose category is unknown have been marked '0' randomly.","3e1903b0":"the peaks are interesting to note. Means some market types are more abundant on the site.","183cf5da":"So, we generated some good features. But, I thought weekend to be a great metric to offer discounts, but looks, that's not the case. Let's drop Date, day, year, demand, day of week","e3424de4":"PRODUCT CATEGORY"}}