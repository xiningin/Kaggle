{"cell_type":{"eaff9a0f":"code","550b565e":"code","d73d1c6e":"code","7f8d72f4":"code","0d49d3b4":"code","917b1a62":"code","8b0a607b":"code","2a1418c4":"code","eb5f1ce5":"code","6897b91a":"code","a3129424":"code","fbdf9096":"code","5f1e34d2":"code","eceb0da3":"code","0237bcbd":"code","d92a2b45":"code","b1269dd1":"code","ae8e362d":"markdown","77fa1694":"markdown","dd1889d7":"markdown","c020be7c":"markdown","cb6f4e13":"markdown","805563e1":"markdown","c7cdaaae":"markdown","9088a0ee":"markdown"},"source":{"eaff9a0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import StandardScaler\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","550b565e":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/test.csv')\nlen(train), len(test)","d73d1c6e":"train.head()","7f8d72f4":"test.head()","0d49d3b4":"# Check if there are columns with null values\nfor col in test.columns:\n    na_tr = len(train[train[col].isna()])\n    na_te = len(test[test[col].isna()])\n    print(col, na_tr, na_te)","917b1a62":"from sklearn.model_selection import KFold, StratifiedKFold\nimport tensorflow as tf\n# import tensorflow_addons as tfa\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.callbacks import *","8b0a607b":"feat_cols = [f'cont{i}' for i in range(1, 15)]\nfeat_cols","2a1418c4":"all_feat_cols = feat_cols","eb5f1ce5":"scalar = StandardScaler()\ntrain[all_feat_cols] = scalar.fit_transform(train[all_feat_cols])\ntest[all_feat_cols] = scalar.transform(test[all_feat_cols])","6897b91a":"# loss function\ndef RMSE(y_true, y_pred):\n    return tf.sqrt(tf.reduce_mean(tf.square(y_true - y_pred)))","a3129424":"# model function\ndef build_model():\n    inp = Input(shape=(len(all_feat_cols)))\n    x = Dense(64, activation='relu')(inp)\n    x = Dropout(0.2)(x)\n    x = Dense(32, activation='relu')(x)\n    x = Dropout(0.2)(x)\n    output = Dense(1, activation='linear')(x)\n\n    model = Model(inputs=inp, outputs=output)\n\n    adam = tf.optimizers.Adam(lr=1e-3)\n    # radam = tfa.optimizers.RectifiedAdam(learning_rate=LR, weight_decay=1e-5)\n    # lookahead = tfa.optimizers.Lookahead(radam, sync_period=5, slow_step_size=0.5)\n    model.compile(optimizer=adam, loss=RMSE)\n\n    return model","fbdf9096":"def RMSE_fn(y_true, y_pred):\n    return np.sqrt(np.mean(np.power(np.array(y_true, float).reshape(-1, 1) - np.array(y_pred, float).reshape(-1, 1), 2)))","5f1e34d2":"cv_rmse = []\noof_pred = np.zeros(len(train))\ntest_pred = np.zeros(len(test))\n\nimport time\nstart_time = time.time()\nkf = KFold(5, shuffle=True, random_state=42)\nfor _fold, (train_idx, valid_idx) in enumerate(kf.split(train[all_feat_cols].values, train['target'].values)):\n    print(f'\\nFold{_fold} Train\/Val: {len(train_idx)}\/{len(valid_idx)}')\n    train_feat, valid_feat = train.loc[train_idx, all_feat_cols].values, train.loc[valid_idx, all_feat_cols].values\n    train_label, valid_label = train.loc[train_idx].target.values, train.loc[valid_idx].target.values\n    \n    K.clear_session()\n    model = build_model()\n    model_weights = f'.\/model{_fold}.h5'\n    checkpoint = ModelCheckpoint(model_weights, monitor='val_loss', verbose=0, save_best_only=True, mode='min',\n                                 save_weights_only=True)\n#     plateau = ReduceLROnPlateau()\n    plateau = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, verbose=1, min_delta=1e-4, mode='min')\n    early_stopping = EarlyStopping(monitor=\"val_loss\", patience=5)\n    history = model.fit(train_feat, train_label,\n                        validation_data=(valid_feat, valid_label),\n                        batch_size=128,\n                        epochs=100,\n                        callbacks=[plateau, checkpoint, early_stopping],\n                        verbose=2\n                       )\n\n    val_rmse = min(history.history['val_loss'])\n    print(f'Fold{_fold} val_rmse: {val_rmse:.4f}\\tTime={(time.time()-start_time) \/ 60:.2f}min')\n    cv_rmse.append(val_rmse)\n    \n    oof_pred[valid_idx] = model.predict(valid_feat).reshape(-1)\n    test_pred += model.predict(test[all_feat_cols].values).reshape(-1) \/ 5\n\ncv_score = np.mean(cv_rmse)\noof_score = RMSE(train.target.values, oof_pred)\nprint(f'cv_score: {cv_score:.4f}')\nprint(f'oof_score: {oof_score:.4f}')","eceb0da3":"cv_score: 0.7108\noof_score: 0.7119","0237bcbd":"from tensorflow.keras.utils import plot_model\nplot_model(model, to_file='model_test.png',show_shapes=True)","d92a2b45":"output = pd.DataFrame({\"id\":test.id, \"target\":test_pred})\noutput.to_csv('submission.csv', index=False)","b1269dd1":"output.target.min() \/ 5, output.target.max() \/ 5","ae8e362d":"# If it is helpful, Please upvote!!!","77fa1694":"# Define RMSE loss function","dd1889d7":"# Just Upvoting!!!","c020be7c":"# Train Model","cb6f4e13":"# Define Model","805563e1":"# Submit","c7cdaaae":"# Load Data","9088a0ee":"# StandardScaler"}}