{"cell_type":{"2e542432":"code","826290bc":"code","803b9498":"code","f935e558":"code","91d4dc76":"code","874f3675":"code","74395b71":"code","c7450620":"code","e956f556":"code","ce9d5dd7":"code","3a809ec7":"code","f8a1d006":"code","9415d193":"code","a93c4cda":"code","eb6c4826":"code","96af78a4":"code","fbbe4f31":"code","8969cbb6":"code","a184c01b":"code","a7aa07ac":"code","ea7f63ac":"code","e2d2e0a7":"code","5c46ec37":"code","2f42e6b4":"code","8b694df7":"code","f9d697de":"code","3536bd15":"code","64de9e6d":"code","3d21b7d3":"code","4e04005d":"code","60edfb7f":"code","3deb2477":"code","e494d640":"code","bf143860":"code","90a9b2e2":"code","2e781267":"code","171af1d6":"code","961c0f81":"code","ecaba567":"code","0e32f82d":"code","f29961af":"code","a082fed0":"code","527ba8ef":"code","ef70ea9a":"code","1af89d2c":"code","7c6755a8":"code","d8604c0a":"code","b40dc73e":"code","e237ee57":"code","2f9b00e9":"code","f632dc14":"code","b827e5d4":"code","c563c18f":"code","8a61340d":"code","6ccc7e28":"code","571cfa88":"code","d9a50493":"code","8f69e816":"code","0d78a7e1":"code","087833d9":"code","a2cc259e":"code","6c8bca56":"code","be946a39":"code","91bb573c":"code","4ed69ca3":"code","4ce38332":"markdown","b1f9bc16":"markdown","5d9ac775":"markdown","64ae706b":"markdown","51ea56aa":"markdown","43d8e962":"markdown","22d87f89":"markdown","2a83117e":"markdown","ff90b7e4":"markdown","175ba42b":"markdown","659133bf":"markdown","9802a7cf":"markdown","599ec5f0":"markdown","ae55eb0f":"markdown","35335689":"markdown","339b56b3":"markdown","513490e6":"markdown","e887bb03":"markdown","4655d864":"markdown","9a9468da":"markdown","d95fcfad":"markdown","9f97e8cc":"markdown","8e89d361":"markdown","c1687607":"markdown","2e865dc0":"markdown","c4dbb403":"markdown","010d16a2":"markdown","b4ec0db5":"markdown","6b61e471":"markdown","eba9f8b2":"markdown","8ad8e56a":"markdown","fbf29d1f":"markdown","96f9ea81":"markdown","08a1e5a6":"markdown","56b5ba24":"markdown","7f693a8f":"markdown","4a186e3a":"markdown","03af9db4":"markdown","5ac1b572":"markdown","abed1d81":"markdown","83dc6b33":"markdown","16fae43b":"markdown","aac10d35":"markdown","4c416d35":"markdown","8574f211":"markdown","8da19a6c":"markdown","8375d44f":"markdown","8636aea6":"markdown"},"source":{"2e542432":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats # used to calculate z-scores to investigate outliers\n\nimport warnings        \nwarnings.filterwarnings(\"ignore\") # ignores warnings\n","826290bc":"pd.options.display.float_format = \"{:.2f}\".format # formats floats to two decimal places","803b9498":"data = pd.read_csv(\"..\/input\/ecommerce-data\/data.csv\", encoding = \"ISO-8859-1\")","f935e558":"data.shape","91d4dc76":"data.head(10)","874f3675":"data.info()","74395b71":"# cast InvoiceDate as a date type\ndata[\"InvoiceDate\"] = pd.to_datetime(data[\"InvoiceDate\"])","c7450620":"data.isna().sum()","e956f556":"data[data.isin([\"NA\",\"NaN\",\"Na\",\"na\",\"N\/A\",\n                \"n\/a\",\"missing\",\"MISSING\",\n                \"no data\",\"nodata\",\"\",\"?\",\n                \"??\",\"???\",\"????\",\"?????\"]).any(axis=1)].shape","ce9d5dd7":"data[data.isin([\"NA\",\"NaN\",\"Na\",\"na\",\"N\/A\",\n                \"n\/a\",\"missing\",\"MISSING\",\n                \"no data\",\"nodata\",\"\",\"?\",\n                \"??\",\"???\",\"????\",\"?????\"]).any(axis=1)].head(20)","3a809ec7":"data[\"UnitPrice\"].describe()","f8a1d006":"data[data[\"UnitPrice\"] == 0].shape","9415d193":"# number of unique Descriptions when UnitPrice is 0\ndata[data[\"UnitPrice\"] == 0][\"Description\"].nunique(dropna = False) # also counts NaN","a93c4cda":"# look at these descriptions\ndata[data[\"UnitPrice\"] == 0][\"Description\"].unique()[0:10] # only the first 10 shown here, but I have looked at them","eb6c4826":"data = data[data[\"UnitPrice\"] != 0]","96af78a4":"data.isna().sum()","fbbe4f31":"data[data[\"UnitPrice\"] < 0]","8969cbb6":"data[data[\"Description\"].str.lower().str.contains(\"adjust\")]","a184c01b":"data = data[data[\"Description\"].str.lower().str.contains(\"adjust\") == False]","a7aa07ac":"# number of unique descriptions\ndata[\"Description\"].nunique(dropna = False)","ea7f63ac":"# first strip any leading and trailing whitespace\ndata[\"Description\"] = data[\"Description\"].str.strip()","e2d2e0a7":"# number of unique descriptions\ndata[\"Description\"].nunique(dropna = False)","5c46ec37":"data[data[\"Description\"].str.contains(\"PAPER CRAFT\")]","2f42e6b4":"data[data[\"InvoiceNo\"].str.startswith(\"C\")].head(10)","8b694df7":"#  list of credit Descriptions\ncredit_descr = pd.Series(data[data[\"InvoiceNo\"].str.startswith(\"C\")][\"Description\"].unique())\ncredit_descr","f9d697de":"credit_descr[credit_descr.str.isupper() == False]","3536bd15":"data = data[data[\"Description\"].isin([\"Bank Charges\", \"CRUK Commission\"]) == False]","64de9e6d":"# chech short credit Descriptions\ncredit_descr[credit_descr.str.len() < 15]","3d21b7d3":"data = data[data[\"Description\"].isin([\"AMAZON FEE\", \"SAMPLES\", \"POSTAGE\", \"PACKING CHARGE\"]) == False]","4e04005d":"list_dotcom = data[data[\"Description\"].replace({np.nan:\"\"}).str.lower().str.contains(\"dotcom\", regex = True)] \\\n[\"Description\"].unique().tolist()\n\nlist_dotcom","60edfb7f":"data[\"Description\"] = data[\"Description\"].replace(list_dotcom, \"DOTCOM\")","3deb2477":"# check number of unique Descriptions\ndata[\"Description\"].nunique()","e494d640":"# check number of unique StockCodes\ndata[\"StockCode\"].nunique()","bf143860":"num_descriptions = data.groupby(\"StockCode\")[\"Description\"].nunique().sort_values(ascending = False)\nnum_descriptions","90a9b2e2":"num_descriptions.value_counts()","2e781267":"groups = data.groupby(\"StockCode\")[\"Description\"].unique()\ngroups","171af1d6":"# check some of the groups with multiple Descriptions\ngroups[groups.str.len() > 1]","961c0f81":"dictionary = {}\nfor index, group in groups.items():\n    dictionary[index] =  group[0]","ecaba567":"# what the dictionary looks like\nlist(dictionary.items())[0:10]","0e32f82d":"descriptions = pd.DataFrame()","f29961af":"descriptions[\"StockCode\"] = list(dictionary.keys())","a082fed0":"descriptions[\"Unique_Description\"] = list(dictionary.values())","527ba8ef":"descriptions.head(10)","ef70ea9a":"data = data.merge(descriptions, on = \"StockCode\", how = \"inner\")","1af89d2c":"data.head()","7c6755a8":"data[\"Description\"].nunique()","d8604c0a":"data[\"Unique_Description\"].nunique()","b40dc73e":"data[\"Description\"] = data[\"Unique_Description\"]\ndata = data.drop(\"Unique_Description\", axis = 1)","e237ee57":"data[\"StockCode\"].nunique()","2f9b00e9":"descr_counts = pd.Series(descriptions[\"Unique_Description\"].value_counts())\ndescr_counts[descr_counts > 1]","f632dc14":"descriptions[descriptions[\"Unique_Description\"].str.contains(\"METAL SIGN,CUPCAKE\")]","b827e5d4":"descriptions[descriptions[\"Unique_Description\"].str.contains(\"COLUMBIAN CANDLE ROUND\")]","c563c18f":"# add an ItemTotal column\ndata[\"ItemTotal\"] = data[\"Quantity\"] * data[\"UnitPrice\"]","8a61340d":"data.describe()","6ccc7e28":"plt.style.use(\"default\")\nfig, (ax1,ax2) = plt.subplots(1,2, figsize = (8,3.7))\n\nax1.boxplot(data[\"UnitPrice\"])\nax1.set_title(\"Unit Price\")\nax2.boxplot(data[\"Quantity\"])\nax2.set_title(\"Quantity\")\nfig.suptitle(\"Unit Price and Quantity Outlier Analysis\")\nplt.show()","571cfa88":"z = np.abs(stats.zscore(data[\"Quantity\"])) # calculate z-scores for Quantity\nlen(np.where(z>3)[0]) # how many values are outside 3 std.dev","d9a50493":"z = np.abs(stats.zscore(data[\"UnitPrice\"])) # calculate z-scores for UnitPrice\nlen(np.where(z>3)[0]) # how many values are outside 3 std.dev","8f69e816":"data[np.abs(data[\"Quantity\"]) > 10000]","0d78a7e1":"# remove extreme outliers\ndata = data[np.abs(data[\"Quantity\"]) < 10000]","087833d9":"# look at some more records \ndata[np.abs(data[\"Quantity\"]) > 2000]","a2cc259e":"z = np.abs(stats.zscore(data[\"UnitPrice\"])) # calculate z-scores for UnitPrice\ndata[z > 3].sort_values(by = \"UnitPrice\", ascending = False)","6c8bca56":"data[z > 3][\"Description\"].unique()","be946a39":"data[data[\"Description\"].str.contains(\"PICNIC BASKET\")].sort_values(by = \"UnitPrice\", ascending = False)","91bb573c":"# drop erroneous high UnitPrice records\ndata = data.drop(data.index[[88771,88772,297271]])","4ed69ca3":"# data.to_csv(\"online_retail.csv\", index = False) # saves the file","4ce38332":"A simple striping of whitespaces has reduced the number of unique Descriptions.\n\nAbove we saw InvoiceNos starting with C, which probably refers to credit. To illustrate what credit entries are, the below records show that an error was likely made: Quantity = 80995, and then it is cancelled out with a credit entry. ","b1f9bc16":"Drop \"AMAZON FEE\", \"SAMPLES\", \"POSTAGE\" and \"PACKING CHARGE\" since they are not related to sales: ","5d9ac775":"Now every record has an assigned unique Description.","64ae706b":"We now have a reference table matching every StockCode with a unique Description.\n\nWe can now assign these unique Descriptions to their StockCode in the original data:","51ea56aa":"As we see, all similar Descriptions have been converted to a single unique Description. We can now drop the original Description column and replace it with the cleaned Unique_Description column:","43d8e962":"<a id=\"section-two\"><\/a>\n# Data Cleaning","22d87f89":"We see that when there are missing values for Description: UnitPrice is 0, CustomerID is missing, and we have negative values for quantity, but not always.\n\nLet's start by investigating negative and 0 unit prices:","2a83117e":"The other credit Descriptions have actual product names, so they are likely related to returned items, and therefore affect sales. \"Manual\" and \"Discount\" also affect sales, so we leave them in the data as well.\n\nThere are also items sold on DOTCOM:","ff90b7e4":"Manual, Discounts and Next Day Carriage are related to sales, but the other Descriptions are expenses, so we drop them.","175ba42b":"Create a DataFrame from the dictionary:","659133bf":"The next step is to remove very similar Descriptions which relate to the same item and have the same StockCode. To do this, we will match each StockCode with a unique Description.","9802a7cf":"We see that the unique StockCodes are more than the unique Descriptions, which means that some Descriptions are repeated for different StockCodes. Let's see which these are:","599ec5f0":"We now have records with positive UnitPrices only. ","ae55eb0f":"Let's look into the not capitalised Descriptions since capitalised Descriptions are usually for products.","35335689":"This has cleaned the NaN values for Description.","339b56b3":"As we can see, some StockCodes have multiple very similar Descriptions. In order to remove duplicated Descriptions, we can take the first Description in each group and assign this Desctiption to all records with the same StockCode. \nFor this purpose we create a dictionary matching each StockCode with the first Description from its corresponding group:","513490e6":"This notebook provides the data cleaning process of an online retail business' sales data. The aim of this notebook is to prepare the dataset for further analysis. I have also published a notebook with the sales analysis and visualizations, which you can find [<ins>here<\/ins>](https:\/\/www.kaggle.com\/atanaskanev\/sales-analysis-and-visualization).\n\nThe business questions answered in the analysis notebook include:\n* What is the overall sales trend?\n* Which is the best selling product in each country?\n* How many new customers are there each month?\n* When do customers make the most purchases?\n\nThe data contains 541,909 sales records and 8 columns, including a product description, quanitity of items sold, unit price, date of sale and country. In short, the cleaning process includes:\n* cleaning erroneous and missing data\n* removing duplicated descriptions for the same stockcodes\n* handling outliers\n\n","e887bb03":"Let's have all items related to DOTCOM share the same Description \"DOTCOM\":","4655d864":"The data is now cleaned and ready for analyses and visualizations.","9a9468da":"<a id=\"section-six\"><\/a>\n## Clean Erroneous and Non-Sales Related Descriptions\nLet's start with cleaning some of the Descriptions, since we saw issues with them above.","d95fcfad":"Bad debts are expenses and not sales, therefore we drop them.","9f97e8cc":"As expected, these records relate to high Quantity sales of cheap items - perhaps purchases by other retailers. Some other records are error reversals by credit entries, as seen above. We leave those records as they are.\n\nLet's now look at high UnitPrice records:","8e89d361":"We see there are more unique Descriptions than unique StockCodes, so some StockCodes likely have more than 1 Description. Let's see which these StockCodes are:","c1687607":"We see that these products are similar, so they can be grouped together in analyses.","2e865dc0":"## Table of Contents\nClick on any heading to jump straight to the content\n\n[<font size=\"5\">Importing Libraries and Data. Initial Data Overview<\/font>](#section-one)\n\n[<font size=\"5\">Data Cleaning<\/font>](#section-two)\n* [Negative and 0 Unit Price](#section-three)\n    - [Unit Price = 0](#section-four)\n    - [Unit Price < 0](#section-five)\n* [Clean Erroneous and Non-Sales Related Descriptions](#section-six)\n* [Assign Unique Descriptions to Each StockCode](#section-seven)\n* [Outliers](#section-eight)","c4dbb403":"We did infact find some missing data. Let's have a look at some of those records:","010d16a2":"<a id=\"section-seven\"><\/a>\n## Assign Unique Descriptions to Each StockCode","b4ec0db5":" Let's see the Descriptions of records with credit InvoiceNos and clean some of them:","6b61e471":"Some are actual product Descriptions e.g. 'ROUND CAKE TIN VINTAGE GREEN', but others are ambiguous: '?', '?display?' etc. These were probably entered as errors and a UnitPrice of 0 was assigned, so that they do not affect the sales figures.\n\nA lot of these descriptions are adjustments for missing or damaged items e.g. 'missing?', 'Breakages' etc.\nSuch records have negative quantities in order to adjust for the missing\/damaged inventory, but have UnitPrices = 0 so that they do no affect sales negatively. \n\nIn other words, records with a UnitPrice of 0 are likely related to inventory and not sales. It could be that the system used to enter this data does not have separate accounts for sales and inventory, and they were entered in the same place.\n\nWe can therefore drop records with a UnitPrice of 0.","eba9f8b2":"<a id=\"section-four\"><\/a>\n### UnitPrice = 0\nFirst let's investigate records with a UnitPrice of 0.","8ad8e56a":"We see StockCodes with mulptiple Descriptions. Let's see the distribution:","fbf29d1f":"<a id=\"section-five\"><\/a>\n### UnitPrice < 0\nLet's check records with a negative UnitPrice.","96f9ea81":"2515 records have a UnitPrice = 0","08a1e5a6":"<font size=\"5\">Thank you for reading my notebook!<\/font>\n\nAny comments and suggestions are highly appreciated!","56b5ba24":"We check whether the data contains any missing values which are strings and not NaNs by checking against a simple list, which usually finds some missing data:","7f693a8f":" I have continued the analysis of this dataset including visualizations in another notebook, which you can find [<ins>here<\/ins>](https:\/\/www.kaggle.com\/atanaskanev\/sales-analysis-and-visualization).\n \n If you wish to download the cleaned dataset, you can do so [<ins>here<\/ins>](https:\/\/www.kaggle.com\/atanaskanev\/online-retail-business-cleaned-dataset).","4a186e3a":"Something to note is that product descriptions are capitalised.","03af9db4":"We see that these records were likely entered by mistake, so the amounts were cancelled out with credit entries. We drop these records for data clarity, although they have a net impact of 0 on ItemTotal.","5ac1b572":"\n# E-commerce Business Data Cleaning","abed1d81":"We see Manual entries, discounts and DOTCOM sales. We see Manual entries that cancel each other out.\n\nIn reality, we would contact the sales department to inquire about what Manual entries refer to. For the present analysis, we assume that these are correct entries, possibly about returned items or crediting wrongly entered sales. \n\nDiscounts affect sales, so we leave them in the data as well.\n\nWe see vintage and antique items, which are expected to have high prices, so we keep such records as well.\n\nSomething interesting we see, however, is the \"PICNIC BASKET WICKER SMALL\" item.\nLet's investigate:","83dc6b33":"Check a few of those:","16fae43b":"<a id=\"section-one\"><\/a>\n# Importing Libraries and Data. Initial Data Overview","aac10d35":"We see that the first two records are likely mistakes, since these UnitPrices are way above the normal prices for this product, and since we see a Manual credit entry of the exactly same amount above. We therefore drop these records, and drop the corresponding Manual credit adjustment.","4c416d35":"We see some big outliers.\n\nSince there are a lot of values outside the interquartile range, we expect that there would also be a lot of values beyond 3 standard deviations (z-score > 3), which means that using z-score as a means to eliminate outliers would be problematic.\n\nLet's see how many values are outside 3 standard deviations:\n","8574f211":"<a id=\"section-eight\"><\/a>\n## Outliers","8da19a6c":"We see that 200 StockCodes have 2 Descriptions each; 15 StockCodes have 3, and 2 StockCodes have 4.\n\nWe can group by StockCode and create a list of Descriptions for each StockCode:","8375d44f":"As we see, there are a lot of values beyond 3 std. deviations. Moreover, we expect high values for Quantity to be related to very cheap items. \n\nLet's investigate by starting from the extreme outliers for Quantity:","8636aea6":"<a id=\"section-three\"><\/a>\n## Negative and 0 Unit Prices"}}