{"cell_type":{"c7f4b76e":"code","f30b0e60":"code","3166b51e":"code","c2eec905":"code","03e72358":"code","b3f4981c":"code","08c25d07":"code","6484d171":"code","c8cde344":"code","ce1bd44a":"code","9ad72b26":"code","d9a6c53c":"code","3074c680":"code","995acf94":"code","cd6142cf":"code","2d94cfa2":"code","d255cd4a":"code","e6c0badf":"markdown"},"source":{"c7f4b76e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f30b0e60":"# Load Data\n\ntrain = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/train.csv\")\ntest = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/test.csv\")\n","3166b51e":"# We will create one hot encoding for entry , exit direction fields for train, test set\n\ndfen = pd.get_dummies(train[\"EntryHeading\"],prefix = 'en')\ndfex = pd.get_dummies(train[\"ExitHeading\"],prefix = 'ex')\ntrain = pd.concat([train,dfen],axis=1)\ntrain = pd.concat([train,dfex],axis=1)","c2eec905":"dfent = pd.get_dummies(test[\"EntryHeading\"],prefix = 'en')\ndfext = pd.get_dummies(test[\"ExitHeading\"],prefix = 'ex')\ntest = pd.concat([test,dfent],axis=1)\ntest = pd.concat([test,dfext],axis=1)","03e72358":"train.shape,test.shape","b3f4981c":"test.head()","08c25d07":"train.columns","6484d171":"X = train[[\"IntersectionId\",\"Hour\",\"Weekend\",\"Month\",'en_E',\n       'en_N', 'en_NE', 'en_NW', 'en_S', 'en_SE', 'en_SW', 'en_W', 'ex_E',\n       'ex_N', 'ex_NE', 'ex_NW', 'ex_S', 'ex_SE', 'ex_SW', 'ex_W']]\ny1 = train[\"TotalTimeStopped_p20\"]\ny2 = train[\"TotalTimeStopped_p50\"]\ny3 = train[\"TotalTimeStopped_p80\"]\ny4 = train[\"DistanceToFirstStop_p20\"]\ny5 = train[\"DistanceToFirstStop_p50\"]\ny6 = train[\"DistanceToFirstStop_p80\"]\n\n\n\n\n","c8cde344":"testX = test[[\"IntersectionId\",\"Hour\",\"Weekend\",\"Month\",'en_E',\n       'en_N', 'en_NE', 'en_NW', 'en_S', 'en_SE', 'en_SW', 'en_W', 'ex_E',\n       'ex_N', 'ex_NE', 'ex_NW', 'ex_S', 'ex_SE', 'ex_SW', 'ex_W']]","ce1bd44a":"from sklearn.linear_model import LinearRegression","9ad72b26":"lr = LinearRegression()","d9a6c53c":"lr.fit(X,y1)\npred1 = lr.predict(testX)\nlr.fit(X,y2)\npred2 = lr.predict(testX)\nlr.fit(X,y3)\npred3 = lr.predict(testX)\nlr.fit(X,y4)\npred4 = lr.predict(testX)\nlr.fit(X,y5)\npred5 = lr.predict(testX)\nlr.fit(X,y6)\npred6 = lr.predict(testX)","3074c680":"# Appending all predictions\nall_preds = []\nfor i in range(len(pred1)):\n    for j in [pred1,pred2,pred3,pred4,pred5,pred6]:\n        all_preds.append(j[i])\n        \n\n","995acf94":"len(all_preds)","cd6142cf":"sub  = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv\")","2d94cfa2":"sub[\"Target\"] = all_preds","d255cd4a":"sub.to_csv(\"benchmark_beat_lr.csv\",index = False)","e6c0badf":" ### Approach: We will make 6 predictions based on features - IntersectionId , Hour , Weekend , Month , entry & exit directions .Target variables will be TotalTimeStopped_p20 ,TotalTimeStopped_p50,TotalTimeStopped_p80,DistanceToFirstStop_p20,DistanceToFirstStop_p50,DistanceToFirstStop_p80 ."}}