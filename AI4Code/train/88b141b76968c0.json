{"cell_type":{"bf857be4":"code","ddbd6a0f":"code","2c730cdf":"code","9b73b441":"code","20951ab1":"code","565feae4":"code","c4e1424a":"code","f95f9b20":"code","30761ba8":"code","666598ce":"code","362c2c18":"code","3fca6eed":"code","c41610cb":"code","21dc2af8":"code","f35c6d34":"code","c0000e19":"code","0b971677":"code","67c466a4":"code","1e076922":"code","45b82054":"code","f390de08":"code","09f16458":"code","18688618":"code","5769d318":"code","3d2f8d77":"code","52734984":"code","6a0056e9":"code","fdb109a0":"code","dfd22ed2":"markdown","55141350":"markdown"},"source":{"bf857be4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddbd6a0f":"import pandas as pd\npd.set_option('display.max_columns', 30)\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","2c730cdf":"df = pd.read_csv(\"..\/input\/movies-with-overview\/movies_metadata.csv\") \ndf = df.iloc[:30000, :]","9b73b441":"df.shape","20951ab1":"df.head()","565feae4":"df.columns","c4e1424a":"df[\"overview\"].head()","f95f9b20":"# TF\/IDF = TF(t) * IDF(t)\n# TF(term frequency) = Frequency of occurrence of a t term in the relevant document \/ total number of terms\n# IDF(inverse document frequency ) = Loge(total number of documents \/ Number of documents with t term in it)","30761ba8":"df['overview'].isnull().sum()","666598ce":"df['overview'] = df['overview'].fillna('')\ndf['overview'].isnull().sum()","362c2c18":"tfidf = TfidfVectorizer(stop_words = 'english')","3fca6eed":"tfidf_matrix = tfidf.fit_transform(df['overview'])","c41610cb":"tfidf_matrix.shape","21dc2af8":"# There are 30000 rows and 58562 unique words (exluding a, an, the , of etc) in overview column.","f35c6d34":"cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)","c0000e19":"cosine_sim.shape","0b971677":"cosine_sim[1]","67c466a4":"df = df[~df['title'].isnull()]","1e076922":"df['title'].isnull().sum()","45b82054":"indices = pd.Series(df.index, index = df['title'])\nprint(indices)","f390de08":"indices = indices[~indices.index.duplicated(keep='last')]","09f16458":"indices.shape","18688618":"indices[:10]","5769d318":"movie_index = indices['GoldenEye']","3d2f8d77":"similarity_scores = pd.DataFrame(cosine_sim[movie_index], columns=[\"score\"])\nprint(similarity_scores)","52734984":"movie_indices = similarity_scores.sort_values(\"score\", ascending=False)[1:11]\nprint(movie_indices )","6a0056e9":"movie_indices = similarity_scores.sort_values(\"score\", ascending=False)[1:11].index\nprint(movie_indices )","fdb109a0":"df['title'].iloc[movie_indices]","dfd22ed2":"# COSINE SIMILARITY MATRIX","55141350":"# TF\/IDF METHOD"}}