{"cell_type":{"5b54f3a3":"code","a5633e66":"code","2febde5a":"code","0e2584c2":"code","37283164":"code","0fb54d3e":"code","3908d005":"code","5f314613":"code","ec6e966d":"code","6677c7f3":"code","837593c8":"code","963b61b7":"code","f1a75e98":"code","f67873af":"code","db576dcb":"code","1d15426d":"code","097e1a09":"code","56c5ae9f":"code","1d065faa":"code","cd785e8a":"code","7fc82c29":"code","0d15297a":"code","65c11b22":"code","dab5c8b4":"code","737fbad0":"code","ae15819f":"code","d12e9aaf":"markdown","3a7a66a7":"markdown","78ca2a58":"markdown","9a2fca67":"markdown","30596c6b":"markdown","90f85b33":"markdown","f1f8bbc1":"markdown","448546e4":"markdown"},"source":{"5b54f3a3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB","a5633e66":"df = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\")","2febde5a":"df.head()","0e2584c2":"df.drop(\"enrollee_id\", axis=1, inplace=True)","37283164":"df.shape","0fb54d3e":"df.info()","3908d005":"df.describe().T","5f314613":"df.isnull().sum()","ec6e966d":"num_cols = df.select_dtypes([\"float64\",\"int64\"])\ncat_cols = df.select_dtypes([\"object\"])\n\nfor col in num_cols.columns:\n    df[col].fillna(df[col].median(), inplace=True)\n\nfor col in cat_cols.columns:\n    df[col].fillna(df[col].mode().values[0], inplace=True)","6677c7f3":"df.isnull().sum()","837593c8":"df.duplicated().sum()","963b61b7":"df.drop_duplicates(inplace=True)","f1a75e98":"X = df.drop(\"target\", axis=1)\ny = df[\"target\"]\n\ny = pd.DataFrame(y, columns=[\"target\"])","f67873af":"X_num_cols  = X.select_dtypes([\"float64\",\"int64\"])\nX_cat_cols  = X.select_dtypes([\"object\"])\n\nss = StandardScaler()\nX[X_num_cols.columns] = ss.fit_transform(X[X_num_cols.columns])","db576dcb":"X = pd.get_dummies(X, columns=X_cat_cols.columns)","1d15426d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","097e1a09":"models = pd.DataFrame(columns=[\"Models\",\"Accuracy Score\"])","56c5ae9f":"log_reg = LogisticRegression(solver='liblinear')\nlog_reg.fit(X_train, y_train)\npredictions = log_reg.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(\"LogisticRegression: \", score)\n\nnew_row = {\"Models\": \"LogisticRegression\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","1d065faa":"GNB = GaussianNB()\nGNB.fit(X_train, y_train)\npredictions = GNB.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(\"GaussianNB: \", score)\n\nnew_row = {\"Models\": \"GaussianNB\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","cd785e8a":"BNB = BernoulliNB()\nBNB.fit(X_train, y_train)\npredictions = BNB.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(\"BernoulliNB: \", score)\n\nnew_row = {\"Models\": \"BernoulliNB\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","7fc82c29":"svm = SVC(random_state=42)\nsvm.fit(X_train, y_train)\npredictions = svm.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(\"SVC: \", score)\n\nnew_row = {\"Models\": \"SVC\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","0d15297a":"randomforest = RandomForestClassifier(n_estimators=1000, random_state=42)\nrandomforest.fit(X_train, y_train)\npredictions = randomforest.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(\"RandomForestClassifier: \", score)\n\nnew_row = {\"Models\": \"RandomForestClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","65c11b22":"import re\nregex = re.compile(r\"\\[|\\]|<\", re.IGNORECASE)\nX_train.columns = [regex.sub(\"_\", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in X_train.columns.values]\ny_train.columns = [regex.sub(\"_\", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in y_train.columns.values]\n\n\nxgb = XGBClassifier(n_estimators=1000, random_state=42)\nxgb.fit(X_train, y_train)\npredictions = xgb.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(\"XGBClassifier: \", score)\n\nnew_row = {\"Models\": \"XGBClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","dab5c8b4":"score_list = []\nfor i in range(1, 20):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    predictions = knn.predict(X_test)\n    score_list.append(accuracy_score(y_test, predictions))\n\nplt.plot(range(1, 20), score_list)\nplt.xticks(np.arange(1, 20, 1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()","737fbad0":"knn = KNeighborsClassifier(n_neighbors=17)\nknn.fit(X_train, y_train)\npredictions = knn.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(\"KNeighborsClassifier: \", score)\n\nnew_row = {\"Models\": \"KNeighborsClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","ae15819f":"models.sort_values(by=\"Accuracy Score\", ascending=False)","d12e9aaf":"# Handling Duplicates","3a7a66a7":"# Machine Learning Models","78ca2a58":"# Cleaning the Data","9a2fca67":"# Comparison of Machine Learning Models","30596c6b":"# Train Test Split","90f85b33":"# Exploratory Data Analysis","f1f8bbc1":"# One Hot Encoding","448546e4":"# Data Standardization"}}