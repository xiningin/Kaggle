{"cell_type":{"b4235684":"code","17b7826b":"code","c7b09ace":"code","25e6b70c":"code","ca2ad4b5":"code","2cade241":"code","96bc6e0b":"code","271c86d5":"code","fb0f683a":"code","b6948bf3":"code","ccf63cb4":"code","cdcf929a":"code","2ac44f97":"code","674ccd6e":"code","1d4eb4bd":"code","57dd1e39":"code","4cbff843":"code","9094f05e":"code","7843eeee":"code","3dab817f":"code","f609ee8b":"code","3cc622cb":"code","a79defda":"code","f33b0ce4":"code","27daa657":"code","5c9a6ac4":"code","f5c2bf68":"code","0cd09e07":"code","bceed2de":"code","5fd6c13a":"code","1f9ed9be":"code","fc783282":"code","74976b59":"code","6427f19a":"code","22504fe7":"code","025c6d0a":"code","58ea34b7":"code","24f28c1c":"code","f956b6b9":"markdown"},"source":{"b4235684":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom datetime import datetime\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import GridSearchCV , train_test_split , cross_val_score\nfrom sklearn.metrics import classification_report , confusion_matrix\n\n\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import roc_curve, auc\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\/\"))\n# Any results you write to the current directory are saved as output.","17b7826b":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv' , index_col= 'Id')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv'  , index_col= 'Id')\ntrain = train[train.GrLivArea < 4500]\ntrain.reset_index(drop=True, inplace=True)\nlabel = train[['SalePrice']]\ntrain.drop('SalePrice' , axis = 1 , inplace=True)\ntrain.head(3)","c7b09ace":"label.head()","25e6b70c":"train.info()","ca2ad4b5":"numerical_col = []\ncat_col = []\nfor x in train.columns:\n    if train[x].dtype == 'object':\n        cat_col.append(x)\n        print(x+': ' + str(len(train[x].unique())))\n    else:\n        numerical_col.append(x)\n        \nprint('CAT col \\n', cat_col)\nprint('Numerical col\\n')\nprint(numerical_col)","2cade241":"numerical_col.remove('MSSubClass')\ncat_col.append('MSSubClass')","96bc6e0b":"train_num = train[numerical_col]\ntrain_num.head()","271c86d5":"imputer = SimpleImputer(missing_values=np.nan, strategy='median')\n#imputer = Imputer(missing_values='NaN' , strategy='median' , axis = 0)\nimputer = imputer.fit(train_num)\ntrain_num = imputer.transform(train_num)","fb0f683a":"test_num = imputer.transform(test[numerical_col])","b6948bf3":"print(train_num.shape)\nprint(test_num.shape)","ccf63cb4":"X_train , X_test , y_train , y_test=  train_test_split(train_num , label , test_size= 0.2 , random_state=123)","cdcf929a":"from sklearn.linear_model import LinearRegression\nclf = LinearRegression(normalize=True)\nscores = cross_val_score(clf, X_train, y_train, cv=5).mean()\nscores","2ac44f97":"from sklearn.linear_model import Lasso\nclf = Lasso(alpha=0.3, normalize=True)\nscores = cross_val_score(clf, X_train, y_train, cv=5).mean()\nscores","674ccd6e":"from sklearn.linear_model import ElasticNet\nclf = ElasticNet(alpha=1, l1_ratio=0.5, normalize=False)\nscores = cross_val_score(clf, X_train, y_train, cv=5).mean()\nscores","1d4eb4bd":"import xgboost\nclf=xgboost.XGBRegressor(n_estimators=100, learning_rate=0.08, gamma=0, subsample=0.75,\ncolsample_bytree=1, max_depth=7)\nscores = cross_val_score(clf, X_train, y_train, cv=5).mean()\nscores","57dd1e39":"train_cat = train[cat_col]\ntest_cat = test[cat_col]\nprint(train_cat.info())\nprint(test_cat.info())","4cbff843":"dropp = ['MiscFeature' , 'PoolQC' , 'Fence' ,'Alley' ]\ntrain_cat.drop(columns=dropp , axis=1, inplace=True)","9094f05e":"train_cat = train_cat.astype('category')\nprint(train_cat.info())","7843eeee":"test_cat.drop(columns=dropp , axis=1, inplace=True)\ntest_cat = test_cat.astype('category')\ntest_cat.info()","3dab817f":"most_freq = {}\nfor col in train_cat.columns:\n    p = train_cat[col].mode()[0] \n    train_cat[col].fillna(p, inplace=True)\n    most_freq[col] = p","f609ee8b":"for col in train_cat.columns:\n    test_cat[col].fillna(most_freq[col], inplace=True)","3cc622cb":"print(test_cat.info())\nprint(train_cat.info())","a79defda":"train_cat.head(2)","f33b0ce4":"test_cat.head(2)","27daa657":"train_num =pd.DataFrame(train_num)\ntrain_num.head(2)","5c9a6ac4":"test_num =pd.DataFrame(test_num)\ntest_num.head(2)","f5c2bf68":"for col in train_cat:\n    train_cat[col] = train_cat[col].cat.codes\nfor col in test_cat:\n    test_cat[col] = test_cat[col].cat.codes","0cd09e07":"train_cat.head(2)","bceed2de":"train_num.index = train_cat.index","5fd6c13a":"test_num.index = test_cat.index","1f9ed9be":"train_cat = pd.get_dummies(train_cat)\ntest_cat = pd.get_dummies(test_cat)","fc783282":"train_ = train_num.join(train_cat)","74976b59":"test_ = test_num.join(test_cat)","6427f19a":"scalar = MinMaxScaler()\ntrain_ = scalar.fit_transform(train_)\ntest_ = scalar.transform(test_)","22504fe7":"# import xgboost\n# clf=xgboost.XGBRegressor(n_estimators=1000, learning_rate=0.07, gamma=0, subsample=0.75,\n# colsample_bytree=1, max_depth=7)\n# scores = cross_val_score(clf, train_, label, cv=5).mean()\n# scores","025c6d0a":"import lightgbm as lgb\nlightgbm = lgb.LGBMRegressor(objective='regression', \n                                       num_leaves=8,\n                                       learning_rate=0.03, \n                                       n_estimators=4000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )\nscores = cross_val_score(lightgbm, train_, label, cv=5).mean()\nscores","58ea34b7":"clf.fit(train_ , label)\npre = clf.predict(test_)\nsubmit = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsubmit.head()\n\n\nsubmit.SalePrice = pre\n\nsubmit.to_csv('submit.csv', index = False)","24f28c1c":"submit.head()","f956b6b9":"### ***Show Your support by Upvoting this Post*** \ud83d\udc4d \n\n### ***Follow me on Kaggle for getting more of such resources.***"}}