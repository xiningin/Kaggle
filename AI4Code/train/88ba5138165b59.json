{"cell_type":{"7e880c0d":"code","9a8e6c12":"code","c2c5aa0b":"code","40abc834":"code","0d6d7d70":"code","e321eb79":"code","7b1edc14":"code","192bf6fb":"code","807ca3b5":"code","8c59d461":"code","d5a31678":"code","44d8b5ad":"code","8fcf53c0":"code","01108e91":"code","6c6d9186":"code","ed480f3b":"code","6c2f644f":"markdown","13c1f5ac":"markdown","c54e33ba":"markdown","c64b43e3":"markdown","4b6d5cd8":"markdown","138f8bc3":"markdown","e54cd8aa":"markdown","bdc61e3c":"markdown","5733445e":"markdown","7a93195a":"markdown","286ae806":"markdown"},"source":{"7e880c0d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nfrom fbprophet import Prophet\n\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'","9a8e6c12":"plant1_generation = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\nplant1_weather = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\nplant2_generation = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')\nplant2_weather = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')","c2c5aa0b":"plant1_generation.head()","40abc834":"plant2_weather.tail()","0d6d7d70":"fig, axes = plt.subplots(nrows = 2, sharex=False, figsize=(20, 5))\nfig.subplots_adjust(top = 2.5)\nax = plant1_generation.plot(x = 'DATE_TIME', logy = True, title = 'Plant 1', rot = 20, ax = axes[0]); \nax = plant2_generation.plot(x = 'DATE_TIME', logy = True, title = 'Plant 2', rot = 20, ax = axes[1]); ","e321eb79":"fig, axes = plt.subplots(nrows = 2, sharex=False, figsize=(20, 5))\nfig.subplots_adjust(top = 2.6)\nax = plant1_weather.plot(x = 'DATE_TIME', logy = True, title = 'Plant 1', rot = 20, ax = axes[0]); \nax = plant2_weather.plot(x = 'DATE_TIME', logy = True, title = 'Plant 2', rot = 20, ax = axes[1]); ","7b1edc14":"power_metrics =  plant1_generation.columns[3:]\nweather_metrics = plant1_weather.columns[3:]","192bf6fb":"print(power_metrics)\nprint(weather_metrics)","807ca3b5":"# Overlay of TOTAL_YIELD for plant 1 vs plant 2, with IRRADIATION for plant 1 vs plant 2 next to it\n# ANOVA for both plant 1 v 2 comparisons below\nfrom scipy import stats\nfrom matplotlib.offsetbox import AnchoredText\nfrom statsmodels.stats.weightstats import ztest\n\nDY_t = stats.ttest_ind(plant1_generation['DAILY_YIELD'],plant2_generation['DAILY_YIELD'])\nDY_z = ztest(plant1_generation['DAILY_YIELD'],plant2_generation['DAILY_YIELD'])\n# DY_v_1, DY_v_2 = np.var(plant1_generation['DAILY_YIELD']), np.var(plant2_generation['DAILY_YIELD'])\nDY_m_1, DY_m_2 = plant1_generation['DAILY_YIELD'].median(), plant2_generation['DAILY_YIELD'].median()\n\nIR_t = stats.ttest_ind(plant1_weather['IRRADIATION'],plant2_weather['IRRADIATION'])\nIR_z = ztest(plant1_weather['IRRADIATION'],plant2_weather['IRRADIATION'])\nIR_m_1, IR_m_2 = plant1_weather['IRRADIATION'].median(), plant2_weather['IRRADIATION'].median()\n\nAT_t = stats.ttest_ind(plant1_weather['AMBIENT_TEMPERATURE'],plant2_weather['AMBIENT_TEMPERATURE'])\nAT_z = ztest(plant1_weather['AMBIENT_TEMPERATURE'],plant2_weather['AMBIENT_TEMPERATURE'])\nAT_m_1, AT_m_2 = plant1_weather['AMBIENT_TEMPERATURE'].median(), plant2_weather['AMBIENT_TEMPERATURE'].median()\n\nMT_t = stats.ttest_ind(plant1_weather['MODULE_TEMPERATURE'],plant2_weather['MODULE_TEMPERATURE'])\nMT_z = ztest(plant1_weather['MODULE_TEMPERATURE'],plant2_weather['MODULE_TEMPERATURE'])\nMT_m_1, MT_m_2 = plant1_weather['MODULE_TEMPERATURE'].median(), plant2_weather['MODULE_TEMPERATURE'].median()\n\nfig, axes = plt.subplots(ncols = 2, nrows = 2, sharex=False, figsize=(20, 5))\nfig.subplots_adjust(top = 2)\nAlpha = 0.3\n\nanc1 = AnchoredText(f\"{DY_t}\\n Z test {DY_z}\", loc=\"upper left\", frameon=False)\nax1 = sns.distplot(plant1_generation['DAILY_YIELD'], ax=axes[0,0], color = 'b', label = 'Plant 1', hist_kws=dict(alpha=0.2))\nax1 = sns.distplot(plant2_generation['DAILY_YIELD'], ax=axes[0,0], color = 'r', label = 'Plant 2', hist_kws=dict(alpha=0.2))\nfig.axes[0].axvline(DY_m_1, color = 'b', alpha=Alpha, label = 'Median Plant 1')\nfig.axes[0].axvline(DY_m_2, color = 'r', alpha=Alpha, label = 'Median Plant 2')\nax1.add_artist(anc1)\nax1.legend()\n\nanc2 = AnchoredText(f\"{IR_t}\\n Z test {IR_z}\", loc=\"upper left\", frameon=False)\nax2 = sns.distplot(plant1_weather['IRRADIATION'], ax=axes[0,1], color = 'b', label = 'Plant 1', hist_kws=dict(alpha=0.2))\nax2 = sns.distplot(plant2_weather['IRRADIATION'], ax=axes[0,1], color = 'r', label = 'Plant 2', hist_kws=dict(alpha=0.2))\nfig.axes[1].axvline(IR_m_1, color = 'b', alpha=Alpha, label = 'Median Plant 1')\nfig.axes[1].axvline(IR_m_2, color = 'r', alpha=Alpha, label = 'Median Plant 2')\nax2.add_artist(anc2)\nax2.legend()\n\nanc3 = AnchoredText(f\"{AT_t}\\n Z test {AT_z}\", loc=\"upper left\", frameon=False)\nax3 = sns.distplot(plant1_weather['AMBIENT_TEMPERATURE'], ax=axes[1,0], color = 'b', label = 'Plant 1', hist_kws=dict(alpha=0.2))\nax3 = sns.distplot(plant2_weather['AMBIENT_TEMPERATURE'], ax=axes[1,0], color = 'r', label = 'Plant 2', hist_kws=dict(alpha=0.2))\nfig.axes[2].axvline(AT_m_1, color = 'b', alpha=Alpha, label = 'Median Plant 1')\nfig.axes[2].axvline(AT_m_2, color = 'r', alpha=Alpha, label = 'Median Plant 2')\nax3.add_artist(anc3)\nax3.legend()\n\nanc4 = AnchoredText(f\"{MT_t}\\n Z test {MT_z}\", loc=\"upper left\", frameon=False)\nax4 = sns.distplot(plant1_weather['MODULE_TEMPERATURE'], ax=axes[1,1], color = 'b', label = 'Plant 1', hist_kws=dict(alpha=0.2))\nax4 = sns.distplot(plant2_weather['MODULE_TEMPERATURE'], ax=axes[1,1], color = 'r', label = 'Plant 2', hist_kws=dict(alpha=0.2))\nfig.axes[3].axvline(MT_m_1, color = 'b', alpha=Alpha, label = 'Median Plant 1')\nfig.axes[3].axvline(MT_m_2, color = 'r', alpha=Alpha, label = 'Median Plant 2')\nax4.add_artist(anc4)\nax4.legend();","8c59d461":"df = plant2_generation.copy()  \ndf.rename(columns= {'DATE_TIME':'ds', 'DAILY_YIELD': 'y'}, inplace = True)\nm = Prophet(daily_seasonality=True, weekly_seasonality = True, yearly_seasonality = False)\nm.fit(df)\nfuture = m.make_future_dataframe(periods=30)\nforecast = m.predict(future)","d5a31678":"fig1 = m.plot(forecast, xlabel='Date', ylabel='DAILY_YIELD Plant 2',figsize = (15,5))\nax = fig.gca()\nax.set_title(\"DAILY_YIELD Forecast\", size=34)\nax.set_xlabel(\"X\", size=34)\nax.set_ylabel(\"Y\", size=34)\nax.tick_params(axis=\"x\", labelsize=24)\nax.tick_params(axis=\"y\", labelsize=24)","44d8b5ad":"fig2 = m.plot_components(forecast, figsize = (11,5))","8fcf53c0":"df2 = plant2_weather.copy()  \ndf2.rename(columns= {'DATE_TIME':'ds', 'MODULE_TEMPERATURE': 'y'}, inplace = True)","01108e91":"def fit_predict_model(dataframe, interval_width = 0.9, changepoint_range = 0.8):\n    m = Prophet(daily_seasonality = True, yearly_seasonality = False, weekly_seasonality = True,\n                seasonality_mode = 'multiplicative', \n                interval_width = interval_width,\n                changepoint_range = changepoint_range)\n    m = m.fit(dataframe)\n    \n    forecast = m.predict(dataframe)\n    forecast['fact'] = dataframe['y'].reset_index(drop = True)\n    #fig1 = m.plot(forecast, figsize = (30, 5));\n    return forecast\n    \npred = fit_predict_model(df2)","6c6d9186":"def detect_anomalies(forecast):\n    forecasted = forecast[['ds','trend', 'yhat', 'yhat_lower', 'yhat_upper', 'fact']].copy()\n    #forecast['fact'] = df['y']\n\n    forecasted['anomaly'] = 0\n    forecasted.loc[forecasted['fact'] > forecasted['yhat_upper'], 'anomaly'] = 1\n    forecasted.loc[forecasted['fact'] < forecasted['yhat_lower'], 'anomaly'] = -1\n\n    #anomaly importances\n    forecasted['importance'] = 0\n    forecasted.loc[forecasted['anomaly'] ==1, 'importance'] = \\\n        (forecasted['fact'] - forecasted['yhat_upper'])\/forecast['fact']\n    forecasted.loc[forecasted['anomaly'] ==-1, 'importance'] = \\\n        (forecasted['yhat_lower'] - forecasted['fact'])\/forecast['fact']\n    \n    forecasted['MODULE_TEMPERATURE'] = forecasted['fact']\n    return forecasted\n\npred = detect_anomalies(pred)","ed480f3b":"sns.set(style=\"whitegrid\")\nfig, axes = plt.subplots(ncols = 1, nrows = 1, sharex=False, figsize=(30, 5))\nax = sns.scatterplot(x = pred.index, y = pred['MODULE_TEMPERATURE'], hue = pred['anomaly'], ax=axes, palette = 'bright')\nax = ax.fill_between(pred.index, pred['yhat_lower'], pred['yhat_upper'],color='#0072B2', alpha=0.2)","6c2f644f":"- From the distributions and Z test results above we can see that although the mean DAILY_YIELD of the two plants is similar; however the median DAILY_YIELD for plant 2 is higher\n- The levels of IRRADIATION between the two plants are very similar, though plant 2 has slightly higher irradiation levels > ~0.8\n- AMBIENT_TEMPERATURE and MODULE_TEMPERATURE are more variable between plant 1 and plant 2\n- Plant 2 has a warmer AMBIENT_TEMPERATURE and MODULE_TEMPERATURE on average. \n- Could these occasional days where ambient temperature rises above 35degC and the higher average module temperature, be the reason for the fluctuations in TOTAL_YIELD seen from plant 2? Perhaps the equipment is over-heating causing it to be less efficient or fail when its preferred operational temperature is exceeded?","13c1f5ac":"- From the plots above we see distinct peaks in power output, irradiation and temperature, rising and falling with the sun each day\n- We can also see in the comparisons between plant 1 and plant 2, that for plant 1 TOTAL_YIELD is consistently > ~10^6 whilst for plant 2 TOTAL_YIELD varies dramatically with several interludes where it falls to zero and at other times in the 10^6 - >10^8 range. \n- Daily weather trends on the other hand appear superficially similar between plant 1 and plant 2","c54e33ba":"# Conclusions\n\n- By looking at the distributions we can see clearly that plant 1 and plant 2 are operating in somewhat different environmental conditions. Plant 2 operates in a higher ambient temperature on average, which may put a strain on the equipment, perhap explaining some of it's unusual fluctuations in TOTAL_YIELD\n- Using forecasting methods it should definitely be possible to predict likely power outputs for the following week from data such as this. In order to capture larger seasonal trends over the course of a year, one would need a few years worth of training data (ideally though one year might do). fbprophet is a great library for quick and easy time-series forecasting\n- Anomaly detection systems can be built from various time series models, provided the models generate confidence intervals which may be use for setting meaningful thresholds. Many approaches exist to capturing the normal trend and variation of the time series and outputting confidence intervals for anomaly detection but the fbprophet one seems to do the job here, given that we have daily\/weekly trended data. The sensitivity of any anomaly detection system may be arbitrarily tuned to define \"anomalous\" data points as being more or less dramatically different from the normal time series trend and this requires some domain knowledge of the system to setup","c64b43e3":"- From the forecast above we can see that the expected trend of DAILY_YIELD for plant 2 is for a slight decline in yield over the next week\n- The confidence interval in blue, indicates that the forecast is less certain, the further away from the present we go\n- The model has been set up to look for weekly seasonality, which it appears to have captured in its forecast","4b6d5cd8":"- In the forecast plots above we can see again the slight downward trend in DAILY_YIELD for the coming week, as well as a tendency for lower DAILY_YIELD on Thursdays seen in the weekly trend\n- As expected DAILY_YIELD rises from ~7am onwards with the sun and maxes out by ~9pm each day ","138f8bc3":"# Detecting anomalous MODULE_TEMPERATURE with Facebook Prophet\n\n- Aside from setting thresholds, whereby if a value is crossed an anomaly is registered, more sophisticated time series anomaly detection can be achieved using models which capture the trend in the data through time and assign confidence intervals, outside of which values are classed as anomalies\n\n- fbprophet can also be used for anomaly detection quite easily\nhttps:\/\/facebook.github.io\/prophet\/docs\/outliers.html\n\n- Using the yhat_lower and yhat_upper values (the confidence intervals of the fit model) as thresholds, we can mark any values falling above or below them as \"anomalous\" values, whilst capturing the normal variation of the time-series\n\n- Many thanks to the authors of https:\/\/towardsdatascience.com\/anomaly-detection-time-series-4c661f6f165f and https:\/\/www.mikulskibartosz.name\/prophet-plot-explained\/ for the starter code used in this section","e54cd8aa":"# Visualisation\n\nLets look at the data and see if anything can be gleaned from it","bdc61e3c":"# Questions\n- Can we predict the power generation for next couple of days? - this allows for better grid management\n\nWe can try, I'm inclined to use fbprophet for this as we have weekly data\n\n- Can we identify the need for panel cleaning\/maintenance?\n- Can we identify faulty or suboptimally performing equipment?\n\nI feel like these two questions go together. The way to identify a need for maintenance or fault detection is to build a trend of normal system performance (power output) in a given set of environmental conditions (time of day, weather etc). Any fall in power output indicates a need for maintenance\/cleaning or the occurance of a fault. As we only have a month of data, this will be challenging to do properly...but I can explore how it could be done","5733445e":"#### Let's compare the distributions of some of these features between the two plants","7a93195a":"# Forecasting Power Output With Facebook Prophet\n\n- Prophet conducts a form of Bayesian time series forecasting, modelling the change in your chosen variable y, with respect to time, using the following summation:\n\n$y(t) = g(t) + s(t) + h(t) + \\epsilon_t \\tag{1}$\n\n- $ g(t) $ refers to a piece-wise linear\/logistic growth model, $ s(t) $ captures seasonality effects, $ h(t) $ models special events (fb calls them holidays) and $\\epsilon_t$ models the error\n- This type of model is called a generalised additive model and to learn more and build this from scratch in PyMC3, I recommend this link:\nhttps:\/\/www.ritchievink.com\/blog\/2018\/10\/09\/build-facebooks-prophet-in-pymc3-bayesian-time-series-analyis-with-generalized-additive-models\/","286ae806":"- An anomaly detection such as this, would allow the operators at the solar plants to identify spikes or drops in MODULE_TEMPERATURE which may be indicative of faults or suboptimal operating conditions and allow them to react accordingly"}}