{"cell_type":{"7f52aab4":"code","1e1ae250":"code","cb69c827":"code","f6fb52ab":"code","062e22a9":"code","2eeee1cf":"code","a1761c07":"code","0ecb8f0c":"code","bcd2bcb8":"code","6430dddb":"code","38126be1":"code","09ba1a36":"code","c1bb94df":"code","1c26e27f":"code","e3c62da3":"code","79f1398c":"code","71fc674e":"code","637798a9":"code","c920b993":"code","a25f9188":"code","a4e24577":"code","8dd447b3":"code","9b98002e":"code","12162315":"code","3c5ff2dc":"code","67eecddb":"code","98dafdd6":"code","813005b4":"code","8394d105":"code","2dd4d5ff":"code","b2110067":"code","5b87078e":"markdown","42187c5e":"markdown","352c660d":"markdown","f73bb0e2":"markdown","3b82c31d":"markdown"},"source":{"7f52aab4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e1ae250":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.gridspec as gridspec\n","cb69c827":"sell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsample_sub= pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\ncalendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsales_train_val = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')","f6fb52ab":"calendar.info()","062e22a9":"calendar.head()","2eeee1cf":"calendar['date'] = pd.to_datetime(calendar['date'])\nfor col in ['event_name_1','event_type_1','event_name_2','event_type_2']:\n    calendar[col].fillna('unknown',inplace=True)","a1761c07":"total_sale = []\nfor i in sales_train_val.index:\n    total_sale.append(sales_train_val.loc[i]['d_1':].sum())\nsales_train_val['total_sale'] = total_sale ","0ecb8f0c":"fig = plt.figure(figsize=(18,13))\ngs = gridspec.GridSpec(5,10)\nax1 = fig.add_subplot(gs[0:2,:4])\nax2 = fig.add_subplot(gs[0:2,5:])\nax3 = fig.add_subplot(gs[3:5,2:7])\nfor cat,ax in zip(sales_train_val['cat_id'].unique(),[ax1,ax2,ax3]):\n    \n    sales_train_val[sales_train_val['cat_id'] == cat]\\\n                                                .sort_values(by='total_sale',ascending=False)[:11]\\\n                                                .plot(x='id',y='total_sale',kind='bar',legend=False,ax=ax)\n    \n    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\n    ax.set_title('Top selling items(id) in ' + cat + ' category',fontsize=15)\n    ax.grid(axis='y',alpha=0.5)\n    ylabel = 'Total Sale'\n    xlabel = 'Id'\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n","bcd2bcb8":"fig = plt.figure(figsize=(18,13))\ngs = gridspec.GridSpec(2,10)\nax1 = fig.add_subplot(gs[0,:5])\nax2 = fig.add_subplot(gs[0,5:])\nax3 = fig.add_subplot(gs[1,2:7])\nfor cat,ax in zip(sales_train_val['cat_id'].unique(),[ax1,ax2,ax3]):\n    sales_train_val[sales_train_val['cat_id'] == cat]\\\n                                        [['item_id','total_sale']]\\\n                                        .groupby('item_id')\\\n                                        .sum()\\\n                                        .sort_values(by='total_sale',ascending=False)[:11]\\\n                                        .plot(kind='bar',ax = ax)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\n    ax.set_title('Top 10 selling ' + cat + ' items',fontsize=20)\n    ax.grid(axis='y',alpha=0.5)\nplt.tight_layout()","6430dddb":"def create_feature_list(feature):\n    feature_list = [feature]\n    for col in sales_train_val.columns:\n        if col.startswith('d_'):\n            feature_list.append(col)\n    return feature_list\n\n\ndef groupby_sale(key,feature_list):\n    total_daily_sale = sales_train_val[feature_list]\\\n                             .groupby(key)\\\n                             .sum()\\\n                             .T\\\n                             .set_index(calendar[:1913]['date'])\n    return total_daily_sale\n\n\n\ndef daily_sale_plot(total_daily_sale,label):\n    fig = plt.figure(figsize=(18,15))\n    gs = gridspec.GridSpec(5,3)\n    ax1 = fig.add_subplot(gs[0:2,0])\n    ax2 = fig.add_subplot(gs[0:2,1:])\n    ax3 = fig.add_subplot(gs[2:,:])\n\n    ylabel = 'Daily Sale'\n    xlabel = 'Date'\n\n    total_daily_sale.sum().sort_values(ascending=False).plot(kind='bar',legend=False,ax=ax1)\n    ax1.set(xlabel=label, ylabel='Total Sale')\n    ax1.set_title('Total Sale for each ' + label,fontsize=15)\n\n\n    total_daily_sale[:31].plot(marker='o',ax=ax2)\n    ax2.autoscale(axis='x',tight=True)\n    ax2.legend(bbox_to_anchor=(1.2, 1), loc='upper right',fancybox=True, framealpha=1, shadow=True, borderpad=1)\n    ax2.set_title('Daily Sale for each ' + label +' (one month snippet)',fontsize=15)\n    ax2.set(xlabel=xlabel, ylabel=ylabel)\n\n    total_daily_sale.plot(ax=ax3)\n    ax3.autoscale(axis='x',tight=True)\n    ax3.legend(bbox_to_anchor=(1.12, 1), loc='upper right',fancybox=True, framealpha=1, shadow=True, borderpad=1)\n    ax3.set_title('Daily Sale for each '+ label,fontsize=20)\n    ax3.set(xlabel=xlabel, ylabel=ylabel)\n\n    plt.tight_layout()\n    plt.show()\n    \n\n\ndef Weekday_month_sales_plot(total_daily_sale_Copy,label):\n    fig = plt.figure(figsize=(18,6))\n    gs = gridspec.GridSpec(1,19)\n    ax1 = fig.add_subplot(gs[0,:8])\n    ax2 = fig.add_subplot(gs[0,8:])\n\n    for freq,ax in zip(['weekday','month'],[ax1,ax2]):\n        total_daily_sale = total_daily_sale_Copy.copy()\n        total_daily_sale = total_daily_sale.reset_index(drop=True)\n        total_daily_sale[freq] = calendar[:1913][freq]\n        total_daily_sale.set_index(calendar[:1913]['date'],inplace=True)\n\n        total_daily_sale.groupby(freq,sort=False).mean().plot(marker = 'o',linewidth=3,ax=ax,legend=False)\n        ax.set(xlabel=freq, ylabel='Average Sale')\n        ax.set_title('Average Sale vs ' + freq +' (Per ' + label +')',fontsize=15)\n\n    handles, labels = ax2.get_legend_handles_labels()\n    fig.legend(handles, labels,bbox_to_anchor=(1.1, 0.8),fancybox=True, framealpha=1, shadow=True, borderpad=1)\n    plt.tight_layout()\n\n \n\n\ndef Average_Sale_plot(total_daily_sale,label):\n    fig = plt.figure(figsize=(18,15))\n    gs = gridspec.GridSpec(2,3)\n    ax1 = fig.add_subplot(gs[0,0])\n    ax2 = fig.add_subplot(gs[0,1:])\n    ax3 = fig.add_subplot(gs[1,:])\n\n    total_daily_sale.resample('Y').mean().plot(marker='o',ax=ax1,legend=False,linewidth=3.0)\n    ax1.autoscale(axis='x',tight=True)\n    ax1.set_title('Average Yearly Sale for each ' + label,fontsize=15)\n    ax1.set(ylabel = 'Average Sale')\n\n    total_daily_sale.resample('M').mean().plot(marker='o',ax=ax2,legend=False)\n    ax2.autoscale(axis='x',tight=True)\n    ax2.set_title('Average Monthly Sale for each ' + label,fontsize=20)\n    ax2.set(ylabel = 'Average Sale')\n\n    total_daily_sale.resample('W').mean().plot(marker='o',ax=ax3,legend=False)\n    ax3.autoscale(axis='x',tight=True)\n    ax3.set_title('Average Weekly Sale for each ' + label,fontsize=20)\n    ax3.set(ylabel = 'Average Sale')\n\n    handles, labels = ax3.get_legend_handles_labels()\n    fig.legend(handles, labels,bbox_to_anchor=(1.08, 0.9),fancybox=True, framealpha=1, shadow=True, borderpad=1)\n\n    plt.tight_layout()\n    plt.show()\n\n    \n    \ndef rolling_average_plot(total_daily_sale,label):\n    for cat in total_daily_sale.columns:\n        total_daily_sale[cat].rolling(window=90)\\\n                                                 .mean()\\\n                                                 .plot(figsize=(15,8),label= cat + ': 90 days mean',legend=True,linewidth=3)\n    plt.legend(bbox_to_anchor=(1.3, 1), loc='upper right',fancybox=True, framealpha=1, shadow=True, borderpad=1,fontsize='large')\n    plt.autoscale(axis='x',tight=True)\n    plt.title('Rolling Average(90 days) Sales for each category',fontsize=20)\n    plt.show()\n    \n    \n    \ndef sell_prices_plot(cat):\n    top_selling_items = sales_train_val[sales_train_val['cat_id'] == cat]\\\n                                            [['item_id','total_sale']]\\\n                                            .groupby('item_id')\\\n                                            .sum()\\\n                                            .sort_values(by='total_sale',ascending=False)[:7].index\n    stores = sell_prices['store_id'].unique()\n\n    fig,((ax1,ax2,ax3),(ax4,ax5,ax6)) = plt.subplots(2,3,figsize=(18,12))\n    fig.suptitle(cat + ' category Sell Prices vs Year (Per Store)',fontsize=20)\n\n    for item,ax in zip(top_selling_items,[ax1,ax2,ax3,ax4,ax5,ax6]):\n\n        for store in stores:\n            sell_price_per_store[store] = sell_prices_merged[(sell_prices_merged['item_id']==item) & (sell_prices_merged['store_id']==store)]['sell_price']\n        sell_price_per_store.resample('A').mean().plot(ax=ax)\n        ax.autoscale(axis='x',tight=True)\n        ax.set_title(item +' Average Sell Prices vs Year (Per Store)',fontsize=10)\n        ax.set(ylabel = 'Average Sell Price',xlabel='Year')\n        ax.legend(fancybox=True, framealpha=1, shadow=True, borderpad=1)","38126be1":"feature_list = create_feature_list('cat_id')\ntotal_daily_sale_Copy = groupby_sale('cat_id',feature_list)","09ba1a36":"total_daily_sale = total_daily_sale_Copy.copy()\ndaily_sale_plot(total_daily_sale,label = 'Category')","c1bb94df":"total_daily_sale = total_daily_sale_Copy.copy()\nWeekday_month_sales_plot(total_daily_sale,label='Category')","1c26e27f":"total_daily_sale = total_daily_sale_Copy.copy()\nAverage_Sale_plot(total_daily_sale,label='Category')","e3c62da3":"total_daily_sale = total_daily_sale_Copy.copy()\nrolling_average_plot(total_daily_sale,label='Category')","79f1398c":"feature_list = create_feature_list('dept_id')\ntotal_daily_sale_Copy = groupby_sale('dept_id',feature_list)","71fc674e":"total_daily_sale = total_daily_sale_Copy.copy()\ndaily_sale_plot(total_daily_sale,label = 'Department')","637798a9":"total_daily_sale = total_daily_sale_Copy.copy()\nWeekday_month_sales_plot(total_daily_sale,label='Department')","c920b993":"total_daily_sale = total_daily_sale_Copy.copy()\nAverage_Sale_plot(total_daily_sale,label='Department')","a25f9188":"total_daily_sale = total_daily_sale_Copy.copy()\nrolling_average_plot(total_daily_sale,label='Department')","a4e24577":"feature_list = create_feature_list('store_id')\ntotal_daily_sale_Copy = groupby_sale('store_id',feature_list)","8dd447b3":"total_daily_sale = total_daily_sale_Copy.copy()\ndaily_sale_plot(total_daily_sale,label = 'Store')","9b98002e":"total_daily_sale = total_daily_sale_Copy.copy()\nWeekday_month_sales_plot(total_daily_sale,label='Store')","12162315":"total_daily_sale = total_daily_sale_Copy.copy()\nAverage_Sale_plot(total_daily_sale,label='Store')","3c5ff2dc":"total_daily_sale = total_daily_sale_Copy.copy()\nrolling_average_plot(total_daily_sale,label='Store')","67eecddb":"sell_prices.info()","98dafdd6":"sell_prices.head()","813005b4":"sell_prices_merged = sell_prices.merge(calendar[['date','wm_yr_wk']],on='wm_yr_wk').sort_values(by=['date','wm_yr_wk','item_id','store_id'])\nsell_prices_merged.set_index('date',inplace=True)\n\nsell_price_per_store = pd.DataFrame(index = calendar['date'],columns=sell_prices_merged['store_id'].unique())","8394d105":"sell_prices_plot(cat='FOODS')","2dd4d5ff":"sell_prices_plot(cat='HOUSEHOLD')","b2110067":"sell_prices_plot(cat='HOBBIES')","5b87078e":"## Sell Prices Data Visualization","42187c5e":"##  EDA ( GroupBy Category)","352c660d":"## Helper functions for Data analysis and visualization","f73bb0e2":"## EDA ( GroupBy Department)","3b82c31d":"## EDA ( GroupBy Store) "}}