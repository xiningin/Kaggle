{"cell_type":{"27394d92":"code","4d964ca6":"code","24cd7d3a":"code","a4f40b09":"code","08621cbb":"code","6954ac23":"code","650d4d81":"code","184bb44d":"code","74cf9363":"code","a0c66885":"markdown","813dec56":"markdown","461c9d0d":"markdown","04b95f40":"markdown"},"source":{"27394d92":"import numpy as np\nimport pandas as pd\nimport cv2\n\nimport numpy as np\nfrom numpy import genfromtxt\n\nfrom keras import layers\n\nfrom keras.layers import (Input, Dense, Activation, ZeroPadding2D,\nBatchNormalization, Flatten, Conv2D, concatenate)\n\nfrom keras.layers import (AveragePooling2D, MaxPooling2D, Dropout,\nGlobalMaxPooling2D, GlobalAveragePooling2D)\n\nfrom keras.models import Model, load_model\nfrom keras import regularizers, optimizers\n\nfrom keras.utils import to_categorical\n\nimport os\n\nprint(os.listdir('..\/input\/fruits'))","4d964ca6":"def create_dictionary(directory):\n    \n    dict_labels = {}\n    i = 0\n    \n    for x in os.listdir(directory):\n        dict_labels[x] = i\n        i = i+1\n        \n    return dict_labels\n\ndict_labels = create_dictionary('..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Training')","24cd7d3a":"def create_train_data(directory):\n    \n    train_x = []\n    train_y = []\n    \n    for x in os.listdir(directory):\n        path = os.path.join(directory,x)\n        \n        for y in os.listdir(path):\n            temp = os.path.join(path,y)\n            img = cv2.resize(cv2.imread(temp),(50,50))\n            train_x.append(img)\n            train_y.append(dict_labels[x])\n    \n    return train_x,train_y\n\n        \ntrain_x,train_y = create_train_data('..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Training')","a4f40b09":"train_x = np.array(train_x)\ntrain_y = np.array(train_y)\ntrain_y = np.reshape(train_y,[train_y.shape[0],1])\ntrain_y = to_categorical(train_y)","08621cbb":"test_x,test_y = create_train_data('..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Test')\ntest_x = np.array(test_x)\ntest_y = np.array(test_y)\ntest_y = np.reshape(test_y,[test_y.shape[0],1])\ntest_y = to_categorical(test_y)","6954ac23":"print(\"Train_x shape - \", train_x.shape)\nprint(\"Train_y.shape - \", train_y.shape)\nprint(\"\")\nprint(\"Test_x.shape -  \", test_x.shape)\nprint(\"Test_y.shape -  \", test_y.shape)","650d4d81":"def model(input_size):\n    \n    weight_decay = 0.0005\n    \n    x_input = Input(shape=(input_size,input_size,3))\n    x = ZeroPadding2D((2,2))(x_input)\n    \n    x = Conv2D(16,(3,3),padding='same',kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((2,2))(x)\n    x = BatchNormalization(axis=3)(x)\n    x = Dropout(0.2)(x)\n    \n    x = Conv2D(64,(3,3),padding='same',kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((2,2))(x)\n    x = BatchNormalization(axis=3)(x)\n    x = Dropout(0.2)(x)\n    \n    x = Conv2D(128,(3,3),padding='same',kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((2,2))(x)\n    x = BatchNormalization(axis=3)(x)\n    x = Dropout(0.2)(x)\n    \n    x = Conv2D(256,(3,3),padding='same',kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((2,2))(x)\n    x = BatchNormalization(axis=3)(x)\n    x = Dropout(0.2)(x)\n\n    x = Flatten()(x)\n    \n    x = Dense(256,activation='relu')(x)\n    x = Dropout(0.2)(x)\n    \n    x = Dense(103,activation='softmax')(x)\n    \n    model = Model(inputs=x_input,outputs=x,name='model')\n    \n    return model\n\nmodel = model(50)\n\nmodel.compile(loss='categorical_crossentropy',\n             optimizer='Adam',\n             metrics=['accuracy'])\n\nmodel.fit(train_x,train_y,batch_size=32,epochs=18,validation_data=(test_x,test_y),shuffle=True)\n\nmodel.save(\"Model-Fruits360\")\n\n","184bb44d":"pred = model.evaluate(test_x,test_y)\n\nprint(\"Accuracy on Test Set = \", pred[1])","74cf9363":"img = cv2.imread(''..\/input\/testimage\/test_image.jpg')","a0c66885":"Testing Model","813dec56":"Defining and Training Model","461c9d0d":"Loading the Training and Testing Data","04b95f40":"Import Modules"}}