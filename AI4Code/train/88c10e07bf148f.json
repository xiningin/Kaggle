{"cell_type":{"f070cd35":"code","861c5b6a":"code","4035ec65":"code","243e87e0":"code","cd3310c3":"code","22086687":"code","df05f41b":"code","6a4170cd":"code","8d5f0587":"code","9089532a":"code","89cb2475":"code","64a8785a":"code","de600fa2":"markdown"},"source":{"f070cd35":"import pandas as pd\nimport numpy as np\nimport cv2\nimport os\nimport re\n\nfrom PIL import Image\n\nimport albumentations as A\nfrom albumentations.pytorch.transforms import ToTensorV2\n\nimport torch\nimport torchvision\n\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection import FasterRCNN\nfrom torchvision.models.detection.rpn import AnchorGenerator\n\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.utils.data.sampler import SequentialSampler\n\nfrom matplotlib import pyplot as plt\n\nDIR_INPUT = '\/kaggle\/input\/global-wheat-detection'\nDIR_TRAIN = f'{DIR_INPUT}\/train'\nDIR_TEST = f'{DIR_INPUT}\/test'\n\n#a way to join names of the file given\n\n","861c5b6a":"train_df = pd.read_csv(f'{DIR_INPUT}\/train.csv')\ntrain_df.shape\n\n#read the train.csv\n#it has 5 columns and ogonito items","4035ec65":"train_df.head()","243e87e0":"train_df['x'] = -1\ntrain_df.head()\n#it actually assigns a new col and also a single value to the entire col","cd3310c3":"train_df['x'] = -1\ntrain_df['y'] = -1\ntrain_df['w'] = -1\ntrain_df['h'] = -1\n\n#they are defining a bbox by this","22086687":"r = np.array(re.findall(\"([0-9]+[.]?[0-9]*)\", \"[834.0, 222.0, 56.0, 36.0]\"))\nprint(r)\n\n#get all the individual values","df05f41b":"def expand_bbox(x):\n    r = np.array(re.findall(\"([0-9]+[.]?[0-9]*)\", x))\n    if len(r) == 0:\n        r = [-1, -1, -1, -1]\n    return r\n\n#if there is no value then [-1, -1, -1, -1 is assigned]","6a4170cd":"#seperate all the values from bbox\ntrain_df[['x', 'y', 'w', 'h']] = np.stack(train_df['bbox'].apply(lambda x: expand_bbox(x)))\n#remove the \"bbox\" column from the dataframe permanently\ntrain_df.drop(columns=['bbox'], inplace=True)\n \n#assign the value as float type, that was extracted from bbox as string type\ntrain_df['x'] = train_df['x'].astype(np.float)\ntrain_df['y'] = train_df['y'].astype(np.float)\ntrain_df['w'] = train_df['w'].astype(np.float)\ntrain_df['h'] = train_df['h'].astype(np.float)","8d5f0587":"train_df.head()","9089532a":"#got all the unique image ids\nimage_ids = train_df['image_id'].unique()\n#randomly divided this as training and validation sets\nvalid_ids = image_ids[-665:]\ntrain_ids = image_ids[:-665]","89cb2475":"valid_df = train_df[train_df['image_id'].isin(valid_ids)]\ntrain_df = train_df[train_df['image_id'].isin(train_ids)]","64a8785a":"valid_df.shape, train_df.shape","de600fa2":"# Pytorch starter - FasterRCNN Train\nIn this notebook I enabled the GPU and the Internet access (needed for the pre-trained weights). We can not use Internet during inference, so I'll create another notebook for commiting. Stay tuned!\n\nYou can find the inference notebook here\n\n* FasterRCNN from torchvision\n* Use Resnet50 backbone\n* Albumentation enabled (simple flip for now)"}}