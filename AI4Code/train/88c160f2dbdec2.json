{"cell_type":{"b8541bfa":"code","2f2e87e5":"code","88021f32":"code","48a4e18c":"code","2dc51c97":"code","e2fa20b4":"code","73c453ec":"code","0c7a4302":"code","04ca7e29":"code","02a9121b":"code","ac4ac573":"code","f5f504ef":"code","f1df2a99":"code","eacd00bb":"code","8c303a93":"code","e57f1132":"code","a0f74461":"code","bd8b0877":"code","9e8a243c":"code","3d273b46":"code","0f45d595":"code","7e8052a1":"code","7175ae5e":"code","2d8ec6fb":"code","a1c8a7c5":"markdown","4b159bed":"markdown","e8b00460":"markdown","ca9005ce":"markdown","66ef342e":"markdown","99e29ed3":"markdown","293be544":"markdown","869678ea":"markdown","bfc6fc05":"markdown","a94b6633":"markdown","84112073":"markdown"},"source":{"b8541bfa":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport cv2\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport numpy as np\nfrom keras.utils import np_utils\nfrom keras import applications\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nfrom keras.models import Sequential, Model \nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping","2f2e87e5":"CATEGORIES = ['Black-grass', 'Charlock', 'Cleavers', 'Common Chickweed', 'Common wheat', 'Fat Hen', 'Loose Silky-bent',\n              'Maize', 'Scentless Mayweed', 'Shepherds Purse', 'Small-flowered Cranesbill', 'Sugar beet']\nNUM_CATEGORIES = len(CATEGORIES)","88021f32":"SEED = 1987\ndata_dir = '..\/input\/'\ntrain_dir = os.path.join(data_dir, 'train')\ntest_dir = os.path.join(data_dir, 'test')\nsample_submission = pd.read_csv(os.path.join(data_dir, 'sample_submission.csv'))","48a4e18c":"for category in CATEGORIES:\n    print('{} {} images'.format(category, len(os.listdir(os.path.join(train_dir, category)))))","2dc51c97":"train = []\nfor category_id, category in enumerate(CATEGORIES):\n    for file in os.listdir(os.path.join(train_dir, category)):\n        train.append(['train\/{}\/{}'.format(category, file), category_id, category])\ntrain = pd.DataFrame(train, columns=['file', 'category_id', 'category'])\ntrain.head(2)\ntrain.shape","e2fa20b4":"test = []\nfor file in os.listdir(test_dir):\n    test.append(['test\/{}'.format(file), file])\ntest = pd.DataFrame(test, columns=['filepath', 'file'])\ntest.head(2)\ntest.shape","73c453ec":"fig = plt.figure(1, figsize=(NUM_CATEGORIES, NUM_CATEGORIES))\ngrid = ImageGrid(fig, 111, nrows_ncols=(NUM_CATEGORIES, NUM_CATEGORIES), axes_pad=0.05)\ni = 0\nfor category_id, category in enumerate(CATEGORIES):\n    for filepath in train[train['category'] == category]['file'].values[:NUM_CATEGORIES]:\n        ax = grid[i]\n        img = Image.open(\"..\/input\/\"+filepath)\n        img = img.resize((240,240))\n        ax.imshow(img)\n        ax.axis('off')\n        if i % NUM_CATEGORIES == NUM_CATEGORIES - 1:\n            ax.text(250, 112, filepath.split('\/')[1], verticalalignment='center')\n        i += 1\nplt.show();","0c7a4302":"model = applications.VGG19(weights = \"imagenet\", include_top=False, input_shape = (240, 240, 3))","04ca7e29":"for layer in model.layers[:5]:\n    layer.trainable = False","02a9121b":"x = model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nx = Dense(1024, activation=\"relu\")(x)\npredictions = Dense(12, activation=\"softmax\")(x) ","ac4ac573":"model_final = Model(input = model.input, output = predictions)\n#compling our model\nmodel_final.compile(loss = \"categorical_crossentropy\", optimizer = optimizers.SGD(lr=0.0001, momentum=0.9), metrics=[\"accuracy\"])","f5f504ef":"model_final.summary() #Model summary","f1df2a99":"gen = ImageDataGenerator(\n            rotation_range=360.,\n            width_shift_range=0.3,\n            height_shift_range=0.3,\n            zoom_range=0.3,\n            horizontal_flip=True,\n            vertical_flip=True)","eacd00bb":"train_data_dir = \"..\/input\/train\"\ntrain_generator = gen.flow_from_directory(\n                        train_data_dir,\n                        target_size = (240, 240),\n                        batch_size = 16, \n                        class_mode = \"categorical\")","8c303a93":"checkpoint = ModelCheckpoint(\"vgg16_1.h5\", monitor='loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='loss', min_delta=0, patience=10, verbose=1, mode='auto')","e57f1132":"model_final.fit_generator(\n                    train_generator,\n                    epochs = 50,\n                    shuffle= True,\n                    callbacks = [checkpoint, early])","a0f74461":"classes = train_generator.class_indices  \nprint(classes)","bd8b0877":"#Invert Mapping\nclasses = {v: k for k, v in classes.items()}\nprint(classes)","9e8a243c":"prediction = []\nfor filepath in test['filepath']:\n    img = cv2.imread(os.path.join(data_dir,filepath))\n    img = cv2.resize(img,(240,240))\n    img = np.asarray(img)\n    img = img.reshape(1,240,240,3)\n    pred = model_final.predict(img)\n    prediction.append(classes.get(pred.argmax(axis=-1)[0])) #Invert Mapping helps to map Label","3d273b46":"test = test.drop(columns =['filepath']) #Remove file path from test DF","0f45d595":"sample_submission.head()","7e8052a1":"pred = pd.DataFrame({'species': prediction})\ntest =test.join(pred)","7175ae5e":"test.to_csv('submission.csv', index=False)","2d8ec6fb":"test.head()","a1c8a7c5":"### Train our Model","4b159bed":"## Keras VGG19 + Data Augmentation + Transfer Learning, Kaggle Plant Seedlings Classification \n\nSimple Keras implementation with Transfer Learning. \n\n* You must run this on a GPU.\n<br>\n\n[MY GITHUB](https:\/\/github.com\/AtriSaxena\/)\n","e8b00460":"### See some of the Images","ca9005ce":"### Final submission File","66ef342e":"### Number of training images for each Category","99e29ed3":"### Adding output Layer","293be544":"### Freezing first few layers\n\nfreeze the first few layers as these layers will be detecting edges and blobs,","869678ea":"### Prediction on each image","bfc6fc05":"## Model Preparation","a94b6633":"## Predicting the test images from trained model","84112073":"## Data Augmentation"}}