{"cell_type":{"3cf9ad95":"code","28ccce27":"code","74d62e17":"code","4b70ed09":"code","1fd0dc57":"code","23431a40":"code","21306e9e":"code","9f8adfc5":"code","a80edbda":"code","a0d1e6b3":"code","d6c5caf7":"code","69c2d670":"code","d6e1fc16":"code","3b4cfcb6":"code","aa4f6b63":"code","fca6d3b8":"code","73e90cd8":"code","c3e7a25f":"code","30f9cfd9":"code","5efac4c9":"code","a8bca3f1":"code","f302943c":"code","fda61e7f":"code","d4b78c6d":"code","4cd7b350":"code","18b79278":"code","5fee1215":"code","dcf4f968":"code","eee2e38d":"code","3f8ec070":"markdown","057bba66":"markdown","7e1aa262":"markdown","5353dfce":"markdown","9922ab84":"markdown","86e8cc0c":"markdown","fa533ec4":"markdown","7b6f0a17":"markdown","4c70b454":"markdown","bb166e56":"markdown","62c74273":"markdown","08e100a6":"markdown","dd5744f9":"markdown","34252cf8":"markdown","6f303224":"markdown","819f68bd":"markdown","b50754d8":"markdown","ade44983":"markdown","d9bd3410":"markdown","5b6bc914":"markdown","3f974b24":"markdown","cf4bbd4b":"markdown","e7bc87bd":"markdown","c39c9bc3":"markdown","731dba8a":"markdown","2092fe2e":"markdown","ec372af7":"markdown"},"source":{"3cf9ad95":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_colwidth', -1)","28ccce27":"data = pd.read_csv('\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv', header = None)\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head(12)","74d62e17":"data.plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","4b70ed09":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","1fd0dc57":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Linear_Interpolation'],inplace=True)","23431a40":"import seaborn as sns\nfig = plt.subplots(figsize=(20, 5))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","21306e9e":"fig = data.Passengers.hist(figsize = (20,5))","9f8adfc5":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 20, 10\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","a80edbda":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","a0d1e6b3":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","d6c5caf7":"data['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","69c2d670":"from statsmodels.tsa.stattools import adfuller\nadf_test = adfuller(data['Passengers'])\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","d6e1fc16":"from statsmodels.tsa.stattools import kpss\nkpss_test = kpss(data['Passengers'])\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","3b4cfcb6":"from scipy.stats import boxcox\ndata_boxcox = pd.Series(boxcox(data['Passengers'], lmbda=0), index = data.index)\n\ndata['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.plot(data_boxcox, label='After Box Cox tranformation')\nplt.legend(loc='best')\nplt.title('After Box Cox transform')\nplt.show()","aa4f6b63":"data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(), data.index)\nplt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(data_boxcox_diff, label='After Box Cox tranformation and differencing')\nplt.legend(loc='best')\nplt.title('After Box Cox transform and differencing')\nplt.show()","fca6d3b8":"data_boxcox_diff.dropna(inplace=True)","73e90cd8":"data_boxcox_diff.tail()","c3e7a25f":"adf_test = adfuller(data_boxcox_diff)\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","30f9cfd9":"kpss_test = kpss(data_boxcox_diff)\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","5efac4c9":"from statsmodels.graphics.tsaplots import plot_acf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_acf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","a8bca3f1":"from statsmodels.graphics.tsaplots import plot_pacf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_pacf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","f302943c":"train_data_boxcox = data_boxcox[:train_len]\ntest_data_boxcox = data_boxcox[train_len:]\ntrain_data_boxcox_diff = data_boxcox_diff[:train_len-1]\ntest_data_boxcox_diff = data_boxcox_diff[train_len-1:]","fda61e7f":"train_data_boxcox_diff[:5]","d4b78c6d":"promo = pd.read_csv('\/kaggle\/input\/promotion\/promotion.csv', header = None)\npromo.columns = ['Month','Event']\npromo['Month'] = pd.to_datetime(promo['Month'], format='%Y-%m')\npromo = promo.set_index('Month')\npromo.head(12)","4cd7b350":"promo_train = promo[0:train_len] # first 120 months as training set\npromo_test = promo[train_len:] # last 24 months as out-of-time test set","18b79278":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(train_data_boxcox, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12),exog=promo_train) \nmodel_fit = model.fit()\nprint(model_fit.params)","5fee1215":"y_hat_sarimax = data_boxcox_diff.copy()\ny_hat_sarimax['sarimax_forecast_boxcox'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max(),exog=promo_test)\ny_hat_sarimax['sarimax_forecast'] = np.exp(y_hat_sarimax['sarimax_forecast_boxcox'])","dcf4f968":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_sarimax['sarimax_forecast'][test.index.min():], label='SARIMAX forecast')\nplt.legend(loc='best')\nplt.title('SARIMAX method')\nplt.show()","eee2e38d":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_sarimax['sarimax_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_sarimax['sarimax_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['SARIMAX method'], 'RMSE': [rmse],'MAPE': [mape] })\n\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","3f8ec070":"# Auto Regressive methods","057bba66":"# Time series analysis","7e1aa262":"### Histogram plot","5353dfce":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","9922ab84":"### Box Cox transformation to make variance constant","86e8cc0c":"# Build and evaluate time series forecast","fa533ec4":"## Outlier detection","7b6f0a17":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","4c70b454":"## Partial autocorrelation function (PACF)","bb166e56":"## Seasonal auto regressive integrated moving average with external variables (SARIMAX)","62c74273":"### Augmented Dickey-Fuller (ADF) test","08e100a6":"### Differencing to remove trend","dd5744f9":"# Initial setup","34252cf8":"## Split time series data into training and test set","6f303224":"### Multiplicative seasonal decomposition","819f68bd":"## Import required packages","b50754d8":"### Recover original time series forecast","ade44983":"### Additive seasonal decomposition","d9bd3410":"## Time series Decomposition","5b6bc914":"## Missing value treatment","3f974b24":"### Calculate RMSE and MAPE","cf4bbd4b":"### Augmented Dickey-Fuller (ADF) test","e7bc87bd":"### Plot train, test and forecast","c39c9bc3":"## Stationarity vs non-stationary time series","731dba8a":"### Box plot and interquartile range","2092fe2e":"## Plot time series data","ec372af7":"## Autocorrelation function (ACF)"}}