{"cell_type":{"a80506ea":"code","824f880c":"code","9096e8e3":"code","1718653c":"code","3ff3d58f":"code","abbb4c92":"code","219f2e18":"code","65763fcd":"code","05cfb2f2":"code","dea9bb67":"code","da3e014d":"code","39aa9489":"code","82662f94":"code","4f4e1e87":"code","442b1e7f":"code","578d1a25":"code","ef10b97b":"code","7f5df249":"code","5b00c29d":"code","29850a72":"code","8fdac112":"code","22ea5659":"code","69c448c4":"code","2ae62008":"code","75749529":"code","56bc68ca":"code","1d602565":"code","986713f9":"code","7b916ca8":"code","c23c3c83":"code","6ebcf8ef":"code","5ae7f1c3":"code","ec0a8691":"code","f2e2416c":"code","464e3826":"code","11e02750":"code","5094a9ad":"code","dcba9e90":"code","96af58a5":"code","532ae337":"code","750da4b9":"markdown","05692991":"markdown","d39b9263":"markdown","f3eae21e":"markdown"},"source":{"a80506ea":"import pandas as pd\nimport numpy as np\ndf1 = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\ndf2 = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","824f880c":"df1.head()","9096e8e3":"df1.columns = ['id','tile','cast','crew']\ndf2= df2.merge(df1,on='id')","1718653c":"df2.head()","3ff3d58f":"C= df2['vote_average'].mean()\nC","abbb4c92":"m= df2['vote_count'].quantile(0.9)\nm","219f2e18":"q_movies = df2.copy().loc[df2['vote_count'] >= m]\nq_movies.shape","65763fcd":"C= df2['vote_average'].mean()\nC","05cfb2f2":"m= df2['vote_count'].quantile(0.9)\nm","dea9bb67":"q_movies = df2.copy().loc[df2['vote_count'] >= m]\nq_movies.shape","da3e014d":"def weighted_rating(x, m=m, C=C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","39aa9489":"# Define a new feature 'score' and calculate its value with `weighted_rating()`\nq_movies['score'] = q_movies.apply(weighted_rating, axis=1)","82662f94":"#Sort movies based on score calculated above\nq_movies = q_movies.sort_values('score', ascending=False)\n\n#Print the top 15 movies\nq_movies[['title', 'vote_count', 'vote_average', 'score']].head(10)","4f4e1e87":"pop= df2.sort_values('popularity', ascending=False)\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,4))\n\nplt.barh(pop['title'].head(6),pop['popularity'].head(6), align='center',\n        color='skyblue')\nplt.gca().invert_yaxis()\nplt.xlabel(\"Popularity\")\nplt.title(\"Popular Movies\")","442b1e7f":"df2['overview'].head()","578d1a25":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf = TfidfVectorizer(stop_words = 'english')\n\ndf2['overview'] = df2['overview'].fillna('')\n\ntfidf_matrix = tfidf.fit_transform(df2['overview'])\n\ntfidf_matrix.shape\n\n","ef10b97b":"from sklearn.metrics.pairwise import linear_kernel\n\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n\n","7f5df249":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(df2.index, index = df2['title']).drop_duplicates()","5b00c29d":"# Function that takes in movie title as input and outputs most similar movies\n\ndef get_recommendations(title, cosine_sim = cosine_sim):\n    \n    idx = indices[title]\n    \n    sim_scores = list(enumerate(cosine_sim[idx]))\n    \n    sim_scores = sorted(sim_scores, key = lambda x:x[1], reverse=True)\n    \n    sim_scores = sim_scores[1:11]\n    \n    movie_indices = [i[0] for i in sim_scores]\n    \n    return df2['title'].iloc[movie_indices]","29850a72":"get_recommendations('The Dark Knight Rises')","8fdac112":"get_recommendations('The Avengers')","22ea5659":"# Parse the stringified features into their corresponding python objects\nfrom ast import literal_eval\n\nfeatures = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    df2[feature] = df2[feature].apply(literal_eval)\n\n","69c448c4":"def get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","2ae62008":"def get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        \n        if len(names) > 3:\n            names = names[:3]\n        return names\n    \n    \n    return []","75749529":"df2['director'] = df2['crew'].apply(get_director)\n\nfeatures = ['cast', 'keywords', 'genres']\nfor feature in features:\n    df2[feature] = df2[feature].apply(get_list)","56bc68ca":"# Print the new features of the first 3 films\ndf2[['title', 'cast', 'director', 'keywords', 'genres']].head(3)","1d602565":"# Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \",\"\")) for i in x]\n    \n    else:\n        \n        if isinstance(x , str):\n            return str.lower(x.replace(\" \",\"\"))\n        else:\n            return ''","986713f9":"# Apply clean_data function to your features.\nfeatures = ['cast', 'keywords', 'director', 'genres']\n\nfor feature in features:\n    df2[feature] = df2[feature].apply(clean_data)","7b916ca8":"def create_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])\ndf2['soup'] = df2.apply(create_soup, axis=1)\n","c23c3c83":"# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(df2['soup'])","6ebcf8ef":"# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","5ae7f1c3":"# Reset index of our main DataFrame and construct reverse mapping as before\ndf2 = df2.reset_index()\nindices = pd.Series(df2.index, index=df2['title'])","ec0a8691":"get_recommendations('The Dark Knight Rises', cosine_sim2)","f2e2416c":"get_recommendations('The Godfather', cosine_sim2)","464e3826":"from surprise import Reader, Dataset, SVD\nfrom surprise.model_selection import cross_validate\nreader = Reader()\nratings = pd.read_csv('..\/input\/the-movies-dataset\/ratings_small.csv')\nratings.head()","11e02750":"data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)\ndata.split(n_folds=5)","5094a9ad":"svd = SVD()\ncross_validate(svd, data, measures=['RMSE', 'MAE'])","dcba9e90":"trainset = data.build_full_trainset()\nsvd.fit(trainset)","96af58a5":"ratings[ratings['userId'] == 1]","532ae337":"svd.predict(1, 302, 3)","750da4b9":"Demographic Filtering","05692991":"Content Based Filtering\n","d39b9263":"Credits, Genres and Keywords Based Recommender","f3eae21e":"Collaborative Filtering"}}