{"cell_type":{"a9e9cd02":"code","eb84aa9f":"code","c5cf3967":"code","c840a412":"code","fe0c6271":"code","a861414f":"code","7cf0e733":"code","35ddbc02":"code","8eae6658":"markdown","4882e278":"markdown","a7b8ccb1":"markdown","de5a7d3c":"markdown","83915cb6":"markdown","82aaed9d":"markdown","57c55086":"markdown","ba5696c6":"markdown","e1cdd3be":"markdown"},"source":{"a9e9cd02":"import pandas as pd","eb84aa9f":"FILE_PATH = '\/kaggle\/input\/groceries-dataset\/Groceries_dataset.csv'\ndf = pd.read_csv(FILE_PATH)\ndf.head()","c5cf3967":"df.shape","c840a412":"df.itemDescription.hist()","fe0c6271":"df.itemDescription.nunique(), df.Member_number.nunique()","a861414f":"df.Member_number.hist()","7cf0e733":"max_item = 5\nn_association = 10\ndict_cross_sell_result = {}\n\nfor item in df.itemDescription.unique()[:max_item]: # (1)\n    list_member_with_item = df[df['itemDescription'] == item].Member_number.tolist() # (2)\n    df_transaction_of_member = df[df['Member_number'].isin(list_member_with_item)] # (3)\n    cross_sell_item = df_transaction_of_member.itemDescription.value_counts().index.tolist()[1:n_association] # (4)\n    dict_cross_sell_result[item] = cross_sell_item # (5)\n    ","35ddbc02":"dict_cross_sell_result","8eae6658":"# 1. Read the dataset","4882e278":"# Quick and easy cross-selling algorithm\n\nWelcome to this notebook. \n\nOn this notebook you will see a very quick and easy cross-selling algorithm using the most sold items for a given item.\nThis could be the first version of a cross-selling algorithm (=> the recommended products for the product pages of an ecommerce website). Usually, the text above this recommendation on an ecommerce website is \"You may also like ...\".\n\nThis model could be improve by:\n\n* performing AB testing and measuring KPIs;\n* addind statistical association rules (if an item is very popular, it would be recommended for each item. But this is sometime not a pattern we want to see);\n* addind business rules;\n* going from a non persolized to a personalized cross-selling algorith;\n* taking into account stock availability of your warehouse;\n* not displaying already bought item of the current user visiting your website;\n* not displaying female item if you know your current user is male;\n* building geolocalized cross-selling (because you know where are located your customers);\n* ... and many more additional steps!\n\nIf you have an interest for personalization, retail or ecommerce you can check out this [Medium blog post](https:\/\/medium.com\/decathlondevelopers\/personalization-strategy-and-recommendation-systems-at-d%C3%A9cathlon-canada-d9cb3d37f675)\n\nFeel free to comment :)","a7b8ccb1":"# 2. Quick exploratory data analysis to understand the dataset","de5a7d3c":"## 2.2. Number of unique item and number of unique member","83915cb6":"# Thank you for reading, feel free to have a look at my other notebooks","82aaed9d":"## 2.1. Number of transactions by item","57c55086":"## 2.3. Number of transactions by member","ba5696c6":"# 3. Quick and easy cross-selling algorithm\n\n## 3.1. Description of the algorithm\n\n1) for each item;\n\n2) get a list of memnber which purchased this item\n\n3) then, get all the transactions of these members\n\n4) in the transactions, take the most purchased items, this means, there are the most purchased with the current given product\n\n5) save the list of cross-selling products on a dictionary","e1cdd3be":"# 0. Import the required python lib"}}