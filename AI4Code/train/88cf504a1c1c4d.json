{"cell_type":{"6407f04a":"code","e3d03b16":"code","58feedb2":"code","f72a041b":"code","77c3be38":"code","dfc8fa1b":"code","bede344d":"code","b86eb77f":"code","59afa93b":"code","f9da8092":"code","98a2ae64":"code","008a0d5f":"code","f44341c0":"code","14b4a258":"code","e6e82976":"code","b0898cd0":"code","7481bf65":"code","9478f08f":"code","126f0deb":"code","c244a39b":"code","9ddd0b5a":"code","7feb638c":"code","087c7faa":"code","40808b5f":"code","44877249":"code","77006dd1":"code","e7a40ac4":"code","73345779":"code","03dd4ac1":"code","a7135657":"code","63f95152":"code","c55499f0":"code","fccdeef5":"code","6be12e90":"code","f1e31427":"code","3364af1d":"code","18d8399a":"code","9c5e549c":"code","6ca51fbb":"code","f451a35d":"code","8c672beb":"code","e77cbf01":"code","7073d3ae":"code","017b7ef8":"code","d32748cb":"code","af6a93e9":"code","1e37b882":"code","ada5b596":"code","f54c056d":"code","3c6c8c3f":"code","cf717d4e":"code","d67e5532":"code","42b0fa9c":"code","2b5c125d":"code","80e0dde4":"code","7190872b":"code","de15ca0a":"code","683ad46e":"code","83f74a9f":"code","b117226a":"code","67db83f0":"code","7f9c1b74":"code","ee73f763":"code","5371553d":"code","dd242a9c":"code","12a426ad":"code","60d9ef3c":"code","df1c3149":"code","d652337b":"code","ea44af09":"code","b04272b5":"code","df96455e":"code","8a2c6d1b":"code","4b3f0356":"code","76c36d96":"code","8c2042d3":"code","21110187":"code","b1c41c80":"code","d01ca999":"code","0bde2e6f":"code","6aab7a2d":"code","64c8ef68":"code","7aebda75":"code","36e6aa2c":"code","ad916917":"code","25316d6e":"code","debbf36e":"code","76ed2d86":"code","f88c5e70":"code","b4e20fe5":"code","92e0b9dd":"code","cc8aadb4":"code","408c5c2a":"code","c5924393":"code","53d7e673":"code","d322c82a":"code","e4c29085":"code","c891c6bf":"code","ac91bad0":"code","2a58b817":"code","29366833":"code","0d89657c":"code","6ddc338a":"code","5aaebf7d":"code","c727efbb":"code","2f3f8d62":"code","66ea7eaf":"code","47e2cb0b":"code","5046eeeb":"code","0deff28e":"code","5afb3f32":"code","0910d2a6":"code","b79ccb14":"code","502b9802":"code","811b9be3":"code","df325903":"code","4d3873fc":"code","3c46a648":"code","3f8aef40":"code","bd0aee5d":"code","c003a079":"code","0b62ee87":"code","3162c05d":"code","c1a5d383":"code","86f1cde7":"code","f4282e6b":"code","fb0c7571":"code","ed39be17":"code","0fdeef26":"code","2d2d667e":"code","31854a2e":"code","2722f367":"code","66cc6e74":"markdown","c054c26a":"markdown","de62fc62":"markdown","736a59ca":"markdown","119abdef":"markdown","7343eae1":"markdown","34348304":"markdown","d1654285":"markdown","62793066":"markdown","fb3dd9aa":"markdown","fd84605d":"markdown","f27cd9a1":"markdown","2eda8767":"markdown","79f82ed3":"markdown","0faec831":"markdown","019fd8a3":"markdown","b2b1197b":"markdown","c9fa5e6a":"markdown","1c3e2c4e":"markdown","1d1d2fc2":"markdown","bec47a25":"markdown","6453a335":"markdown","50b2801b":"markdown","9ef62fe2":"markdown","a1237b34":"markdown","06bf8645":"markdown","fb895d2d":"markdown","2f2ec5ff":"markdown","053ad771":"markdown","0f63d05a":"markdown","ab8b9149":"markdown","d46b028d":"markdown","31af573e":"markdown","d5595a78":"markdown","4ffa0781":"markdown","c36f0c3b":"markdown","9a0e30ec":"markdown","55e882eb":"markdown","d1c0ad99":"markdown","86c29c75":"markdown","b9f703b7":"markdown","606a523b":"markdown","9f9e424d":"markdown","5d59c9ef":"markdown","7d736ad2":"markdown","b04b5477":"markdown","eb115530":"markdown","164ba1e2":"markdown","a3ef7882":"markdown","bcb54791":"markdown","c85124c5":"markdown","c29b9bd9":"markdown","805c1f9f":"markdown","b322010c":"markdown","54b520a3":"markdown","3539bddb":"markdown","57ea07cb":"markdown","2d656c54":"markdown","ff6dbce0":"markdown","f3b3cd37":"markdown","fc54f4e0":"markdown","c4e4c458":"markdown","8c9ad3a8":"markdown","08648d18":"markdown","54e4324b":"markdown","f4605ea2":"markdown","ee0126f0":"markdown","2e03ea92":"markdown","4186efa5":"markdown","533fbde4":"markdown","6d64b892":"markdown","076b5efd":"markdown","8657a46d":"markdown","c1e3ba41":"markdown","8f14cdef":"markdown","dd1b7de2":"markdown","dd05a3d6":"markdown","cca7bc40":"markdown","b040a092":"markdown"},"source":{"6407f04a":"#import libraires\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import make_scorer, f1_score, accuracy_score, classification_report, confusion_matrix\n\n%matplotlib inline","e3d03b16":"df = pd.read_csv(\"..\/input\/airlines-passenger-satisfaction\/train.csv\") #read train file\ndf.head(5) #tsample of train data","58feedb2":"df2=pd.read_csv(\"..\/input\/airlines-passenger-satisfaction\/test.csv\") #read test file\ndf.head(5) #sampel of test data","f72a041b":"df.describe().T #statical information about train data","77c3be38":"df.info() #number of nulls and data types for each column","dfc8fa1b":"df.drop(['Unnamed: 0', 'id'], axis = 1, inplace = True) #remove unnecessary train columns\n","bede344d":"df.head() #data after editing\n","b86eb77f":"df2.drop(['Unnamed: 0', 'id'], axis = 1, inplace = True) #remove unnecessary test columns","59afa93b":"df2.head() #data after editing","f9da8092":"#detect if there any duplicated rows\nduplicates = df.duplicated().sum() \nif  duplicates == 0:\n    print(\"there is no duplicted rows in this data\")\nelse:\n    print('there are: ', str(duplicates), \" duplicates\")","98a2ae64":"df.isnull().sum()","008a0d5f":"df2.isnull().sum()","f44341c0":"# number of null is too low according to the whole data so we can remove it in train\ndf.dropna(inplace = True) \ndf.isnull().sum() #check null again","14b4a258":"df2.dropna(inplace = True)\ndf2.isnull().sum() #check null again in test","e6e82976":"#check outliers\ndf.plot(kind = \"box\" , subplots = True , figsize = (20,15) ,  layout = (5,5))\nplt.show()","b0898cd0":"#statical information about columns with outliers \ndf[['Flight Distance', 'Departure Delay in Minutes', 'Arrival Delay in Minutes']].describe().T","7481bf65":"#removing outliers from the columns\nsns.boxenplot(x =df['Flight Distance'], palette = 'Set2')","9478f08f":"df.loc[df['Flight Distance'] > 3736.5].shape #get number of rows with outliers (Q3 + 1.5(Q3 - Q1))","126f0deb":"outliers_distance = df[df['Flight Distance'] > 3736.5]\ndf.drop(outliers_distance.index, inplace = True)","c244a39b":"#removing outliers from the columns\nsns.boxenplot(x =df['Departure Delay in Minutes'], palette = 'Set2')","9ddd0b5a":"df.loc[df['Departure Delay in Minutes'] > 800].shape","7feb638c":"outliers_departure = df[df['Departure Delay in Minutes'] > 800]\ndf.drop(outliers_departure.index, inplace = True)","087c7faa":"sns.boxenplot(x =df['Departure Delay in Minutes'], palette = 'Set2')","40808b5f":"sns.boxenplot(x =df['Arrival Delay in Minutes'], palette = 'Set2')","44877249":"df.loc[df['Arrival Delay in Minutes'] > 650].shape","77006dd1":"outlier_arrival = df[df['Arrival Delay in Minutes'] > 650]\ndf.drop(outlier_arrival.index, inplace = True)","e7a40ac4":"df.rename(columns = lambda x:x.strip().lower().replace(\" \", \"_\"), inplace = True)\ndf2.rename(columns = lambda x:x.strip().lower().replace(\" \", \"_\"), inplace = True)#rename the columns","73345779":"df.columns #check columns after renaming","03dd4ac1":"plt.subplots(figsize=(20,20))\nsns.heatmap(df.corr(), annot=True)","a7135657":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1)\nsns.countplot(x = df['satisfaction'], data = df)\n\nplt.subplot(1, 2, 2)\nlabel = [df.satisfaction.unique()[0], df.satisfaction.unique()[1]]\nplt.pie(x= df['satisfaction'].value_counts(), labels = label, explode = (0, 0.08), shadow = True, autopct = '%1.2f%%')\n\nplt.show()","63f95152":"def plot_data(column):\n    plt.figure(figsize = (10, 5))\n    plt.subplot(1, 2, 1)\n    sns.countplot(x = df[column], data = df)\n\n    plt.subplot(1, 2, 2)\n    label = [df.satisfaction.unique()[0], df.satisfaction.unique()[1]]\n    sns.countplot(x = df[column], hue = 'satisfaction', data = df, )\n\n    plt.show()","c55499f0":"for i in df.columns:\n    if len(df[i].unique())<= 6 and i != 'satisfaction':\n        plot_data(i)","fccdeef5":"sns.catplot(x=\"type_of_travel\", y=\"food_and_drink\", hue=\"satisfaction\",data= df)\nplt.title = (\"Effect of Food and drink on satisfaction in different types of travel\")","6be12e90":"sns.catplot(x=\"class\", y=\"on-board_service\", hue=\"satisfaction\",data= df)\nplt.title = ('Effect of on-board service on satisfaction in different classes')","f1e31427":"satis=df[\"satisfaction\"]\nnum0=satis[df[\"inflight_entertainment\"]==0].value_counts()\nnum1=satis[df[\"inflight_entertainment\"]==1].value_counts()\nnum2=satis[df[\"inflight_entertainment\"]==2].value_counts()\nnum3=satis[df[\"inflight_entertainment\"]==3].value_counts()\nnum4=satis[df[\"inflight_entertainment\"]==4].value_counts()\nnum5=satis[df[\"inflight_entertainment\"]==5].value_counts()\nplotdata=pd.DataFrame({\"0\":num0, \"1\":num1, \"2\":num2,\"3\":num3,\"4\":num4,\"5\":num5})\nplotdata2=plotdata.div(plotdata.sum(axis=1),axis=0)*100\nplotdata2.plot(kind='bar',stacked = True)\nplt.title =('Effect of Inflight entertainment on satisfaction')","3364af1d":"satis=df[\"satisfaction\"]\nnum0=satis[df[\"seat_comfort\"]==0].value_counts()\nnum1=satis[df[\"seat_comfort\"]==1].value_counts()\nnum2=satis[df[\"seat_comfort\"]==2].value_counts()\nnum3=satis[df[\"seat_comfort\"]==3].value_counts()\nnum4=satis[df[\"seat_comfort\"]==4].value_counts()\nnum5=satis[df[\"seat_comfort\"]==5].value_counts()\nplotdata=pd.DataFrame({\"0\":num0, \"1\":num1, \"2\":num2,\"3\":num3,\"4\":num4,\"5\":num5})\nplotdata2=plotdata.div(plotdata.sum(axis=1),axis=0)*100\nplotdata2.plot(kind='bar',stacked = True, style=\"Classic\")\nplt.title =\"Effect of Seat comfort on satisfaction\"","18d8399a":"group_data = df.groupby(['class']).mean().T[2:16]\ngroup_data","9c5e549c":"group_data.plot.barh(figsize = (10, 10), stacked = False, title = 'mean rates for services according to class')\nplt.show()","6ca51fbb":"data = df.groupby(['type_of_travel']).mean().T[2:16]\ngroup_data","f451a35d":"data.plot.barh(figsize = (10, 10), title = 'mean of rates for features according to type of travels')\nplt.show()","8c672beb":"grouped = df.groupby(['customer_type', 'type_of_travel', 'satisfaction'])['age'].count()[:6]\ngrouped","e77cbf01":"grouped.plot.pie(shadow = True , autopct = '%1.1f%%', subplots = True, figsize = (7, 7))\nplt.show()","7073d3ae":"grouped = df.groupby(['customer_type', 'type_of_travel']).mean().T[2:16]\ngrouped","017b7ef8":"grouped.plot.bar(figsize = (20, 12), subplots = True)\nplt.show()","d32748cb":"b = buisness_travels = df[df['type_of_travel'] == 'Business travel'] #get the data of buisness travles on a separate container\nbuisness_travels.drop(['gender', 'departure_delay_in_minutes', 'flight_distance'], axis = 1, inplace = True) #drop unnecessary columns","af6a93e9":"p = personal_travels = df[df['type_of_travel'] == 'Personal Travel']\npersonal_travels.drop(['gender', 'departure_delay_in_minutes', 'flight_distance'], axis = 1, inplace = True)","1e37b882":"buisness_travels.head(5) #sample of buisness travles","ada5b596":"personal_travels.head() #sample of personal travels","f54c056d":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1)\nplt.title = ('age_distribution')\nsns.distplot(buisness_travels['age']).set_title(\"buisness customers' age dist\")\n\nplt.subplot(1, 2, 2)\nplt.title = ('age distribution in personal travels')\nsns.distplot(personal_travels['age']).set_title(\"personal customers' age dist\")\n\nplt.show()","3c6c8c3f":"def separate_ages(age):\n    if age <= 18:\n        return 'underage'\n    elif 18 < age <= 30:\n        return 'youth'\n    elif 30 < age < 60:\n        return 'adult'\n    else:\n        return 'old'","cf717d4e":"buisness_travels.age = buisness_travels.age.apply(separate_ages)\npersonal_travels.age = personal_travels.age.apply(separate_ages)","d67e5532":"print(buisness_travels.age.value_counts())\nprint(personal_travels.age.value_counts())","42b0fa9c":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1) \nsns.countplot(buisness_travels['age'], hue = 'satisfaction', data = buisness_travels).set_title(\"satisfaction according to age, buisness travel\")\n\nplt.subplot(1, 2, 2)\nsns.countplot(personal_travels['age'], hue = 'satisfaction', data = personal_travels).set_title(\"satisfaction according to age, personal travel\")\n\nplt.show()","2b5c125d":"def get_satisfaction_rate(column):\n    \n    buis =  buisness_travels.groupby([column, 'satisfaction'])['satisfaction'].count().unstack().fillna(0)\n    pers = personal_travels.groupby([column, 'satisfaction'])['satisfaction'].count().unstack().fillna(0)\n    return buis, pers","80e0dde4":"def print_dist(column):\n    plt.figure(figsize = (15, 6))\n    plt.subplot(1, 2, 1) \n    sns.countplot(buisness_travels[column], hue = 'satisfaction', data = buisness_travels).set_title('satisfaction with {}, buisness travel'.format(column))\n\n    plt.subplot(1, 2, 2)\n    sns.countplot(personal_travels[column], hue = 'satisfaction', data = personal_travels).set_title(\"satisfaction with {}, personal travel\".format(column))\n\n    plt.show()","7190872b":"def print_plot(column):\n    satis=b[\"satisfaction\"]\n    num0=satis[b[column]==0].value_counts()\n    num1=satis[b[column]==1].value_counts()\n    num2=satis[b[column]==2].value_counts()\n    num3=satis[b[column]==3].value_counts()\n    num4=satis[b[column]==4].value_counts()\n    num5=satis[b[column]==5].value_counts()\n    plotdata=pd.DataFrame({\"0\":num0, \"1\":num1, \"2\":num2,\"3\":num3,\"4\":num4,\"5\":num5})\n    plotdata2=plotdata.div(plotdata.sum(axis=1),axis=0)*100\n    plotdata2.plot(kind='bar',stacked = True, title = 'Effect of {} on satisfaction in business travel'.format(column))\n\n    satis=p[\"satisfaction\"]\n    num0=satis[p[column]==0].value_counts()\n    num1=satis[p[column]==1].value_counts()\n    num2=satis[p[column]==2].value_counts()\n    num3=satis[p[column]==3].value_counts()\n    num4=satis[p[column]==4].value_counts()\n    num5=satis[p[column]==5].value_counts()\n    plotdata=pd.DataFrame({\"0\":num0, \"1\":num1, \"2\":num2,\"3\":num3,\"4\":num4,\"5\":num5})\n    plotdata2=plotdata.div(plotdata.sum(axis=1),axis=0)*100\n    plotdata2.plot(kind='bar',stacked = True, title = 'Effect of {} on satisfaction in personal travel'.format(column))\n\n","de15ca0a":"wifi_sat_buisness, wifi_sat_personal = get_satisfaction_rate('inflight_wifi_service')\nprint(wifi_sat_buisness)\nprint() \nprint(wifi_sat_personal)","683ad46e":"wifi_sat_buisness.plot(kind = 'bar', stacked = True, figsize = (15, 6))","83f74a9f":"wifi_sat_personal.plot(kind = 'bar', stacked = True, figsize = (15, 6)) #analysis of the data on the ","b117226a":"booking_sat_buisness, booking_sat_personal = get_satisfaction_rate('ease_of_online_booking')\n\nprint(booking_sat_buisness)\nprint(booking_sat_personal)","67db83f0":"print_dist('ease_of_online_booking')","7f9c1b74":"gate_sat_buisness, gate_sat_personal = get_satisfaction_rate('gate_location')\ngate_sat_buisness, gate_sat_personal","ee73f763":"print_dist('gate_location')","5371553d":"food_sat_buisness, food_sat_personal = get_satisfaction_rate('food_and_drink')\nfood_sat_buisness, food_sat_personal","dd242a9c":"print_dist('food_and_drink')","12a426ad":"print_plot('food_and_drink')","60d9ef3c":"dep_sat_buisness, dep_sat_personal = get_satisfaction_rate('departure\/arrival_time_convenient')\ndep_sat_buisness, dep_sat_personal","df1c3149":"print_dist('departure\/arrival_time_convenient')","d652337b":"print_dist('inflight_entertainment')","ea44af09":"print_plot('inflight_entertainment')","b04272b5":"print_dist('online_boarding')","df96455e":"print_plot('online_boarding')","8a2c6d1b":"print_dist('seat_comfort')","4b3f0356":"print_plot('seat_comfort')","76c36d96":"print_dist('on-board_service')","8c2042d3":"print_plot('on-board_service')","21110187":"print_dist('leg_room_service')","b1c41c80":"print_plot('leg_room_service')","d01ca999":"print_dist('baggage_handling')","0bde2e6f":"print_plot('baggage_handling')","6aab7a2d":"print_dist('checkin_service')","64c8ef68":"print_plot('checkin_service')","7aebda75":"print_dist('inflight_service')","36e6aa2c":"print_plot('inflight_service')","ad916917":"print_dist('cleanliness')","25316d6e":"print_plot('cleanliness')","debbf36e":"plt.figure(figsize = (15,15))\nsns.heatmap(buisness_travels.corr(), annot = True)","76ed2d86":"sns.boxplot(x = 'inflight_wifi_service', y = 'ease_of_online_booking', data = buisness_travels)","f88c5e70":"sns.barplot(x='inflight_wifi_service', y='ease_of_online_booking', hue = 'satisfaction', data = buisness_travels)","b4e20fe5":"sns.violinplot(x = 'ease_of_online_booking', y = 'departure\/arrival_time_convenient', data = buisness_travels)","92e0b9dd":"sns.barplot(x = 'cleanliness', y = 'food_and_drink', data = buisness_travels)","cc8aadb4":"df_3 = df.drop(['gender', 'departure_delay_in_minutes', 'gate_location'], axis = 1)\ndf_3","408c5c2a":"categorical = ['gender', 'customer_type', 'type_of_travel', 'class', 'satisfaction']\n#Count number of distinct elements in specified axis.\nmaxDistinct = 0\nfor column in categorical:\n    distinctRows1 = df[column].nunique()\n    distinctRows2 = df2[column].nunique()\n    if distinctRows1 > maxDistinct:\n        maxDistinct = distinctRows1\n    if distinctRows2 > maxDistinct:\n        maxDistinct = distinctRows2\n\nprint('The maximum number of distinct values of a categorical feature is', maxDistinct)","c5924393":"# Categorical to numerical in train set\nfor column in categorical:\n    numerical = pd.get_dummies(df[column], drop_first=True)\n    df = pd.concat([df, numerical], axis=1)\n    df.drop(column, inplace=True, axis=1)\n\ndf.head()","53d7e673":"# Categorical to numerical in test set\nfor column in categorical:\n    numerical = pd.get_dummies(df2[column], drop_first=True)\n    df2 = pd.concat([df2, numerical], axis=1)\n    df2.drop([column], inplace=True, axis=1)\n\ndf2.head()","d322c82a":"# Find whether any null value exists in train_df and test_df\nprint(df.isna().sum())\nprint(df2.isna().sum())","e4c29085":"# Convert pandas to numpy array for processing\ntrain = df.values\ntest = df2.values","c891c6bf":"# Seperate labels from features. Label is our last column\nidx_of_label = df.shape[1] - 1\n\nX_train = train[:, :idx_of_label]\ny_train = train[:, idx_of_label]\n\nX_test = test[:, :idx_of_label]\ny_test = test[:, idx_of_label]\n\n# Final data shapes\nprint(X_train.shape)\nprint(y_train.shape)","ac91bad0":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(X_train)\nX_train_scaled=scaler.transform(X_train)\nX_test_scaled=scaler.transform(X_test)\n#We use Feature Scaling to standardize the independent features in a fixed range so each feature contributes approximately to model. \n","2a58b817":"no_of_satisfied = np.sum(y_train, axis=0)\nsamples = y_train.shape[0]\nprint('The percentage of satisfied customers is: {:.2f} %'.format((no_of_satisfied \/ samples) * 100))\nprint('The percentage of dissatisfied customers is: {:.2f} %'.format((1 - (no_of_satisfied \/ samples)) * 100))","29366833":"#importing Models\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC","0d89657c":"#importing validation models\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import  f1_score\nfrom sklearn.metrics import confusion_matrix,classification_report,plot_confusion_matrix,ConfusionMatrixDisplay","6ddc338a":"def classification_task( model,X_train_scaled, y_train ,X_test_scaled ,y_test, predic,model_name):\n \n    perf_df=pd.DataFrame({'Train_Score':model.score(X_train_scaled,y_train),\"Test_Score\":model.score(X_test_scaled,y_test),\n                       \"Precision_Score\":precision_score(y_test,predic),\"Recall_Score\":recall_score(y_test,predic),\n                       \"F1_Score\":f1_score(y_test,predic) , \"accuracy\":accuracy_score(y_test,predic)}, index=[model_name])\n    return perf_df\n","5aaebf7d":"# Train KNN model on the scaled data \nKNN = KNeighborsClassifier()\n# Fit the model\nKNN.fit(X_train_scaled,y_train)\n#predict x_test_scaled\npred_1 = KNN.predict(X_test_scaled)\n","c727efbb":"#calling the score function\nEval_KNN= classification_task(KNN,X_train_scaled, y_train ,X_test_scaled ,y_test,pred_1,\"KNN\" )\nEval_KNN\n","2f3f8d62":"#creating confusion matrix to know the errors\nconf = confusion_matrix(y_test, pred_1 ,normalize=\"all\")\ndisp = ConfusionMatrixDisplay(conf).plot(cmap=plt.cm.PuBuGn)","66ea7eaf":"# Train decision tree model on the scaled data\nDecision_Tree = DecisionTreeClassifier() \n# Fit the model\nDecision_Tree.fit(X_train_scaled,y_train)\n#predict x_test_scaled\npred_ = Decision_Tree.predict(X_test_scaled)","47e2cb0b":"#calling the score function\nEval_dec = classification_task(Decision_Tree,X_train_scaled, y_train ,X_test_scaled ,y_test,pred_,\"Decision Tree\" )\nEval_dec","5046eeeb":"#creating confusion matrix to know the errors\nconf = confusion_matrix(y_test, pred_ ,normalize=\"all\")\ndisp = ConfusionMatrixDisplay(conf).plot(cmap=plt.cm.PuBuGn)","0deff28e":"# Train Random forest model on the scaled data\nRandom_Forest= RandomForestClassifier()\n# Fit the model\nRandom_Forest.fit(X_train_scaled,y_train)\n#predict x_test_scaled\npred_rand = Random_Forest.predict(X_test_scaled)\n\n","5afb3f32":"#calling the score function\nEval_fores= classification_task(Random_Forest,X_train_scaled, y_train ,X_test_scaled ,y_test,pred_rand,\"Random Forest\" )\nEval_fores","0910d2a6":"#creating confusion matrix to know the errors\nconf = confusion_matrix(y_test, pred_rand ,normalize=\"all\")\ndisp = ConfusionMatrixDisplay(conf).plot(cmap=plt.cm.PuBuGn)","b79ccb14":"# Train XGB boost model on the scaled data\nxgb = XGBClassifier()\n# Fit the model\nxgb.fit(X_train_scaled,y_train)\n#predict x_test_scaled\npred = xgb.predict(X_test_scaled)\n","502b9802":"#calling the score function\nEval_XGB= classification_task(xgb,X_train_scaled, y_train ,X_test_scaled ,y_test,pred,\"XGB\" )\nEval_XGB","811b9be3":"#creating confusion matrix to know the errors\nconf = confusion_matrix(y_test, pred ,normalize=\"all\")\ndisp = ConfusionMatrixDisplay(conf).plot(cmap=plt.cm.PuBuGn)","df325903":"# Train naive bayes boost model on the scaled data\nclf = GaussianNB()\n# Fit the model\nclf.fit(X_train_scaled,y_train)\n#predict x_test_scaled\npred_clf = clf.predict(X_test_scaled)\n","4d3873fc":"#calling the score function\nEval_clf= classification_task(clf,X_train_scaled, y_train ,X_test_scaled ,y_test,pred_clf,\"Naive Bayes\" )\nEval_clf","3c46a648":"#creating confusion matrix to know the errors\nconf = confusion_matrix(y_test, pred_clf ,normalize=\"all\")\ndisp = ConfusionMatrixDisplay(conf).plot(cmap=plt.cm.PuBuGn)","3f8aef40":"# Train the Logistic Regression model on the scaled data and print the model score\nlr = LogisticRegression()\n# Fit the model\nlr.fit(X_train_scaled, y_train)\n#predict x_test_scaled\npred_2 = lr.predict(X_test_scaled)\n","bd0aee5d":"#calling the score function\nEval_lr= classification_task(lr,X_train_scaled, y_train ,X_test_scaled ,y_test,pred_2,\"logisitc regression\" )\nEval_lr","c003a079":"#creating confusion matrix to know the errors\nconf = confusion_matrix(y_test, pred_2 ,normalize=\"all\")\ndisp = ConfusionMatrixDisplay(conf).plot(cmap=plt.cm.PuBuGn)","0b62ee87":"# Train the svc model on the scaled data and print the model score\nsvc = SVC(random_state=0,C=0.2,kernel='rbf')\n#fitting model\nsvc.fit(X_train_scaled, y_train)\n#predict\npred_svc = svc.predict(X_test_scaled)","3162c05d":"#calling the score function\nEval_svc= classification_task(svc,X_train_scaled, y_train ,X_test_scaled ,y_test,pred_svc,\"SVC\" )\nEval_svc","c1a5d383":"#creating confusion matrix to know the errors\nconf = confusion_matrix(y_test, pred_svc ,normalize=\"all\")\ndisp = ConfusionMatrixDisplay(conf).plot(cmap=plt.cm.PuBuGn)","86f1cde7":"#model comparison \npd.concat([Eval_KNN, Eval_dec , Eval_fores , Eval_XGB ,Eval_clf , Eval_lr, Eval_svc])   ","f4282e6b":"plt.figure(figsize=(12, 8))\ncf_matrix=confusion_matrix(y_test,pred_rand)\ngroup_names = [\"True Negative\",\"False Positive\",\"False Negative\",\"True Positive\"]\ngroup_counts = [\"{0:0.0f}\".format(value) for value in cf_matrix.flatten()]\ngroup_percentages = [\"{0:.2%}\".format(value) for value in cf_matrix.flatten()\/np.sum(cf_matrix)]\nlabels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in zip(group_names,group_counts,group_percentages)]\nlabels = np.asarray(labels).reshape(2,2)\nax=sns.heatmap(cf_matrix, annot=labels, fmt=\"\", cmap='Blues',xticklabels=[\"neutral or dissatisfied\",\"satisfied\"], yticklabels=[\"neutral or dissatisfied\",\"satisfied\"])\nax.set_xlabel('Predicted Label',fontsize = 15)\nax.set_ylabel('Actual Label',fontsize = 15)\nplt.show()","fb0c7571":"print(classification_report(y_test, pred_rand))","ed39be17":"plt.figure(figsize=(12, 8))\ncf_matrix=confusion_matrix(y_test,pred)\ngroup_names = [\"True Negative\",\"False Positive\",\"False Negative\",\"True Positive\"]\ngroup_counts = [\"{0:0.0f}\".format(value) for value in cf_matrix.flatten()]\ngroup_percentages = [\"{0:.2%}\".format(value) for value in cf_matrix.flatten()\/np.sum(cf_matrix)]\nlabels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in zip(group_names,group_counts,group_percentages)]\nlabels = np.asarray(labels).reshape(2,2)\nax=sns.heatmap(cf_matrix, annot=labels, fmt=\"\", cmap='Blues',xticklabels=[\"neutral or dissatisfied\",\"satisfied\"], yticklabels=[\"neutral or dissatisfied\",\"satisfied\"])\nax.set_xlabel('Predicted Label',fontsize = 15)\nax.set_ylabel('Actual Label',fontsize = 15)\nplt.show()","0fdeef26":"print(classification_report(y_test, pred))","2d2d667e":"feature_names = [f\"feature {i}\" for i in range(X_train_scaled.shape[1])]\nforest = RandomForestClassifier(random_state=0)\nforest.fit(X_train_scaled, y_train)","31854a2e":"import time\nimport numpy as np\n\nstart_time = time.time()\nimportances = Random_Forest.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in Random_Forest.estimators_], axis=0)\nelapsed_time = time.time() - start_time\n\nprint(f\"Elapsed time to compute the importances: {elapsed_time:.3f} seconds\")","2722f367":"import pandas as pd\n\nRandom_Forest_importances = pd.Series(importances, index=feature_names)\n\nfig, ax = plt.subplots()\nRandom_Forest_importances.plot.barh(yerr=std, ax=ax)\nax.set_title(\"Feature importances using MDI\")\nax.set_ylabel(\"Mean decrease in impurity\")\nfig.tight_layout()","66cc6e74":"as we can see there is a linear relation between ease of online booking and departure and arrival time as online booking offers a good way to choose the suitable time for each customer  ","c054c26a":"## check affect of the wifi on the satisfaction","de62fc62":"We can conclude that the data is quite balanced and do not require any special treatment or resampling.\n\ngender:\nThe satisfied vs dissatisfied ratio in both genders is the same.\nSo, this feature should be ignored as it does not contribute to the overall satisfaction level.\n\ngate location:- \nThis feature does not affect the satisfaction level in both types of travel. So, this feature is to be ignored.\n\ninflight entertainment:-\nAs shown, a change in the satisfaction level causes a huge rise in the number of satisfied people in the Business type of travel\n\nseat comfort:-\nThe number of satisfied people in business level substantially increases by increasing the satisfaction level of seat comfort.\n\nonline boarding :-\nAs shown below, the higher the satisfaction level, the bigger is the number of satisfied customers.\n\nbaggage handling:-\nAny increase in the satisfaction level of baggage handling service is accompanied by a substantial increase in the number of satisfied customers.\n\nonboard service:-\nA change in rating has an enormous effect on the number of satisfied customer in the business travel.\n\nonline booking:- \nThe number of satisfied people slightly increases by changing the satisfaction level.","736a59ca":"# affect of seat comfort on satisfaction","119abdef":"# Table of content\n- [Data Description](#data_describtion)\n- [Cleaing Process](#cleaning)\n- [Exploratory Data Analysis](#eda)\n- [Analysis Conclusion](#conculsion)\n- [Modeling](#modeling)","7343eae1":"Models i use:\n\n1- K-Nearest Neighbors\n\n2- Decision Tree\n\n3- Random Forest\n\n4- XGB \n\n5- Naive Classifier\n\n6- Logistic Regression\n\n7- Linear Support Vector Machine\n\n\n","34348304":"### relation between leg room and satisfaction","d1654285":"from the tabel above we can see that in Flight Distance, Departure\/Arrival Delay in Minutes: max value far from Q3 which mean we could find outliers in this columns","62793066":"form here we can see that providing a good inflight wifi service to the customers is more important than providing an easy way to book online","fb3dd9aa":"the data is huge so we don't to have outliers to skew distribution of the data","fd84605d":"### as shown from the plots most of the  features has no outliers ","f27cd9a1":"<a id=\"conculsion\"><\/a>\n# Conclusion","2eda8767":"XGB was made to obtain better results with XGBoost. It provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way","79f82ed3":"## visualize data, analysis data","0faec831":"### we want to find which features has the most corrolation to the goal","019fd8a3":"-By improving the Inflight entertainment service, the number of satisfied customers increases.","b2b1197b":"in the above plot we can see that people can be satisfied in case there was no wifi service on the plane for all ages but in case there was any wifi service so they get un-satisfied when the wifi get worse\n\nin conclusion:\n    wifi is an affecting feautres in case it was available","c9fa5e6a":"### Function to validate scores ","1c3e2c4e":"## 1- KNN model","1d1d2fc2":"## business metrics","bec47a25":"- On-board service nealy has no effect on the satisfaction for eco class passengers.\n\n- In the business class, the higher is the on-board service rating, the more satisfied the customers become.","6453a335":"Applying feature_importances_ over the trained model shows the weight each column (feature) has. For example, the 7-th feature (\"Online Boarding\") has the highest importance for determining a passenger's satisfaction as we in visualization.","50b2801b":"## 6- Logisitc Regression","9ef62fe2":"as shown in the above relations, in case there was no online booking there would be some dis-satisfaction but the majority is satisfied with it \nbut in case there was a bad servie and the quality is bad then customers get dis-satisfied\n\nso to improve buinsness travels we need to to increase quality of the online booking and make it easier for the customers\nwhile in personal travels we need to make a new system for online booknig becahse it had a realy bad rates","a1237b34":"from this location we can find that gate location doesnot affect customers satisfaction at all , as shown in buisness travels they always satisfied despite gate location rate\non the other hand personal travels always dis-satisfied dispite all rates","06bf8645":"from the plots abvoe we can see that more that half of the customers are unsatisfied, so we will try to know which features is affecting them the most ","fb895d2d":"### food and drink affect on the satisfaction","2f2ec5ff":"#### visualize the target","053ad771":"in case of personal travels we find tha that it's the same case, in case there was no wifi then people are satisfied but when the travel get a bad wifi service then the become dissatisfaction and wifi in personal travels is very bad\n\nso to increase people satisfaction we can improve wifi service in case it was available","0f63d05a":"### affect of inflight entertainment of satisfaction","ab8b9149":"### relation between checkin service and satisfaction","d46b028d":"-Most of customers who rated 4-5 are satisfied with the airline service.","31af573e":"from this plot we can find that the companies that support online booknig in easy way have a good in inflight wifi whcih mean more satisfaction in the flight","d5595a78":"from the plots above we can find the next:\n\n     1- half of the customers are males and the other half are females and for both of them the majority are not satifsied  \n     2- loyal Customers are the majority of the customers over the half are dissatisfied and for the disloyal customers they are minority but most of them are not satisfied\n     3- buisness travels are much more than personal travels and most customers in buisness travel are satisfied but for the\n     personal travel most customers are not satisfied\n     4- for flight classes: eco plus is the least class but the majority are dissatisfied for the buisness class and eco \n     class they have the majority of the customers. most customers of the buisness class are satisfied about it but the \n     opposite for the eco class\n     5- for the inflight wifi service the take at most rate 2 so most of the customers are dissatisfied with it\n     6- for departure time most of people gave rate 4 and 5 but at the same time they are dissatisfied which mean there are\n     another reasons for the dissatisfaction\n     7-the online booknig took 2-3 rates which means most of the people wasn't sastisfied with it\n     8- and 3 rates was the most rates for gate location so the poeple wasn't satisfied with it\n     9- food and drink get high rates but at the same time the most of the people was dissatisfied which mean there are \n     another reasons for their dissatisfaction\n     10- online booking get high rate and most of the peopel was satisfied with it\n     11- most of rate for seat comfort was high and the majority of the customers were satisfied\n     12- inflight entertainment get high reates and majority of the customers were satifsied\n     13- on board service have high rates but half of the customers are satisfied and the others are not\n     14- leg space has high rates and most people satisfied with it\n     15- baggage handling despite it has high reate but many customers were not satisfied which mean there are other reasons\n     16- checkin service is high rated withdissatisfaction and the same for inflight service\n     17- but for the cleanliness most rates are high but satisfaction is very low","4ffa0781":"As we see in the comparison best model is Random forest then after it Bagging\nSo here is confusion matrix in details for Random forest ","c36f0c3b":"## 2- Decision Tree model","9a0e30ec":"as expected only the three columns(Flight Distance, Departure\/Arrival Delay in Minutes) has outliers we need to remove it","55e882eb":"Now we are ready, yaaaaaaah","d1c0ad99":"this features has no effect as it's out of the control of the customer so no need to worry about customer satisfaction according to this feature","86c29c75":"from the brevious chars and plots we found that gender has no effect, flight distance is not a thing we cna control and departure delay in minutes has a big relation almost the same as arrival delay in minutes so we don't need to use them in our analysis","b9f703b7":"### relation between cleanliness and satisfaction","606a523b":"## check affect of some features one by one ","9f9e424d":"## 3- Random Forest","5d59c9ef":"### affect of online boarding on satisfaction","7d736ad2":"## Feature Scaling","b04b5477":"### relation between inflight service and satisfaction","eb115530":"<a id='modeling'><\/a>\n# Modeling","164ba1e2":"SVMs are models that \"draw\" lines or hyperplanes (based on the training set) to determine which class any new test sample belongs to. The lines or hyperplanes are created so as to maximize the distance between them and the training samples. Linear SVMs are used to solve linearly separable problems whereas for more complex problems SVMs that utilize rbf kernels and augment the dimensionality of the problem are used instead.","a3ef7882":"there is a big relation between cleanliness and food and drink as shown in the above data, so","bcb54791":"## Applying feature_importances_ over the trained model ","c85124c5":"-Most of Satisfied customers in the Business Travel type chose 4 and 5  rating. ","c29b9bd9":"the data has more that 100k enteries so droping 310 rows with null values will not affect the data","805c1f9f":"the top category is satisfied loyal customers in buinsess travel then dissatisfied loyal customers in personal travel","b322010c":"## 7- SVM model","54b520a3":"# PROJECT: Airlines Passenger satisfaction","3539bddb":"# remove unnecessary columns after analysis","57ea07cb":"<a id=\"data_describtion\"><\/a>\n# Airlines passenger satisfaction\n\n**the data consists of: _23 columns_ x _103903 entires_** represents some information and degree of satisfictaion for the customers\n\n**data columns are:**\n> Gender: Gender of the passengers (Female, Male)\n\n>Customer Type: The customer type (Loyal customer, disloyal customer)\n\n>Age: The actual age of the passengers\n\n>Type of Travel: Purpose of the flight of the passengers (Personal Travel, Business Travel)\n\n>Class: Travel class in the plane of the passengers (Business, Eco, Eco Plus)\n\n>Flight distance: The flight distance of this journey(0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Inflight wifi service: Satisfaction level of the inflight wifi service (0:Not Applicable;1-5)\n\n>Departure\/Arrival time convenient: Satisfaction level of Departure\/Arrival time convenient (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Ease of Online booking: Satisfaction level of online booking (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Gate location: Satisfaction level of Gate location (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Food and drink: Satisfaction level of Food and drink (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Online boarding: Satisfaction level of online boarding (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Seat comfort: Satisfaction level of Seat comfort (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Inflight entertainment: Satisfaction level of inflight entertainment (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>On-board service: Satisfaction level of On-board service (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Leg room service: Satisfaction level of Leg room service (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Baggage handling: Satisfaction level of baggage handling (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Check-in service: Satisfaction level of Check-in service (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Inflight service: Satisfaction level of inflight service (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Cleanliness: Satisfaction level of Cleanliness (0:5\/0: Not Applicable 1: less satisfied, 5: most satisfied)\n\n>Departure Delay in Minutes: Minutes delayed when departure\n\n>Arrival Delay in Minutes: Minutes delayed when Arrival\n\n>Satisfaction: Airline satisfaction level(Satisfaction, neutral or dissatisfaction)\n","2d656c54":"we can see that the most of buesniss travelers are between 20s and 50s so to get a high effect we need to concentrate on this age group , while in personal travels all ages from about 10 to 70 so we need to satisfy most of them in any age class so we get hight rates and higher percentage of satisfaction","ff6dbce0":"### affect of departure\/arrival time convenient","f3b3cd37":"disloyal customers in personal travels are very small so we can ignore them as they will not affect the system","fc54f4e0":"#  Start analysis according to type of travels","c4e4c458":"Decision Trees (DTs) are a non-parametric supervised learning method used for classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. Decision Trees has several hyper-parameters but the ones used in this example are \"max_depth\" (i.e., the maximum number of nodes) and \"min_samples_leaf\" (i.e., the minimum number of samples required to be at a leaf node).\n\nGridSearchCV() is used for selecting the combination of hyper-parameters that returns the highest value of \"f1_score\" (a classification metric, harmonic mean of \"precision\" ( TPTP+FP ) and \"recall\" ( TPTP+FN ) ). It is instantiated and placed as a scoring parameter.","8c9ad3a8":"<a id='eda'><\/a>\n# EDA","08648d18":"\nRandom Forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. ","54e4324b":"## relation between some features and each other","f4605ea2":"<a id='cleaning'><\/a>\n# Clean Data:\n\n### 1- reomve unnecessary columns\n### 2- remove duplicates\n### 3- remove nulls\n### 4- remove outliers","ee0126f0":"from the above heatmap we can find that there is a powerful relation between some services like\n\n1- cleanliness with food and drink, seat comfort and inflight entertainment\n\n2- inflight service with on board service and baggage handling\n\n3- inflight wifi services with ease of online booking\n\n4- online boarding with seat comfort\n\n5- gate location with ease of online booking and departure\/arrival time convenient","2e03ea92":"### affect of gate location on the satisfaction","4186efa5":"### affect of on board service on satisfaction","533fbde4":"## 5- Naive Bayes classifier","6d64b892":"# Encoding","076b5efd":"### representing data and check how the customer satisfied with it\n","8657a46d":"as we can see from this plots the food is very affective features on the flight when it is high quality it get high rates and the customers are very satisfied \non the other hand the food represented on the personal flight has alot of low rates and even the high rates has low percentage of satisfaction as the whole features represented on this type of flight is very bad","c1e3ba41":"## affect of online booking","8f14cdef":"### relation between baggage_handling and satisfaction","dd1b7de2":"we can find that most satisfied group are the adults in buisness travels(30~60 years old) on the other case personal travels have no satisfaction at all","dd05a3d6":"# Buisness KPI \n\n### 1- what factors contriobute to custoemer sataisfiction\n\n\n**buisness questions should be asked:** \n\n1- what types of travels that had more people with more satisfaction\n\n2- what is the relation between the feautres and satisfaction\n\n3- what is the relation between the features with each other","cca7bc40":"<a id='perprocessing'><\/a>\n## Preprocessing\n\n### 1- rename columns\n### 2- encoding(will be done later before modeling)","b040a092":"## 4- XGB model"}}