{"cell_type":{"2838dd7c":"code","964a5229":"code","7e36cea5":"code","26920d77":"code","17ee9636":"code","aa3b6516":"code","153e04cd":"code","e29d4cde":"code","df26ea22":"code","df947827":"code","3c897a29":"code","a00907e4":"code","c77d2f06":"code","d76e8482":"code","bfdf4ba2":"code","7c6d31f8":"code","782dd407":"code","33f1b5d6":"code","82959baa":"code","c763f4ce":"code","17be85a3":"code","3575b124":"code","a70da764":"code","ce16fa58":"code","a4013ebf":"code","90bc2c81":"code","6eba6574":"code","91e441bd":"code","49047749":"code","fb7131c8":"code","8988a57b":"code","ff0b2fe0":"code","778e71a2":"code","8ad30f03":"markdown","2aa88ed0":"markdown","a680903f":"markdown","dd1f0471":"markdown","3a5fdfcf":"markdown","10b4435c":"markdown"},"source":{"2838dd7c":"import pandas as pd\nimport os\nimport numpy as np\nfrom datetime import date","964a5229":"os.listdir(\"\/kaggle\/input\/\")","7e36cea5":"csv = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k-full.csv\")","26920d77":"csv.head()","17ee9636":"# Go from birth date to age\nage = np.datetime64(date.today()) - csv[\"b_day\"].astype(np.datetime64)\ncsv[\"age\"] = np.array((age.astype(int)\/31536000000000000), dtype = np.int32)","aa3b6516":"csv.drop([\"b_day\"], axis=1, inplace=True)","153e04cd":"# Get numerical height(in meters) of each player\nheight = [height_m.split(\"\/\")[1:] for height_m in csv[\"height\"]]\nheight = np.array(height, dtype = np.float32)\ncsv[\"height_m\"] = height","e29d4cde":"# Get numerical weight(in kilograms) of each player\nweight = [weight_kg.split(\"\/\")[1:] for weight_kg in csv[\"weight\"]]\nweight = np.array(weight).flatten()\nweight = [weight_kg.split(\" \")[1:2] for weight_kg in weight]\nweight = np.array(weight, dtype=np.float32)\ncsv[\"weight_kg\"] = weight","df26ea22":"# Convert salary to number\nsalary = [s[1:] for s in csv[\"salary\"]]\ncsv[\"salary\"] = np.array(salary, dtype= np.int64)","df947827":"csv.drop([\"height\", \"weight\"], axis=1, inplace=True)","3c897a29":"# Calculating experience of each player\ncurrYear = int(date.today().year)\nexperience = [currYear - draftYear for draftYear in csv[\"draft_year\"]]\ncsv[\"experience\"] = experience","a00907e4":"csv.head()\n","c77d2f06":"csv.drop([\"draft_year\"], axis = 1, inplace = True)","d76e8482":"csv.info()","bfdf4ba2":"# Drop duplicates by full name\ncsv.drop_duplicates([\"full_name\"], inplace=True)","7c6d31f8":"version2k21 = csv.loc[csv[\"version\"] == \"NBA2k21\"]\nversion2k21.head()","782dd407":"# Replacing missing values with value \"Uneducated\" in column \"college\"\ncsv[\"college\"] = csv[\"college\"].apply(lambda item: \"Uneducated\" if item is np.nan else item)","33f1b5d6":"# Replacing zero jersey values with value \"Unsigned\" in column \"jersey\"\ncsv[\"jersey\"] = csv[\"jersey\"].apply(lambda item: \"Unsigned\" if item == \"#0\" else item)","82959baa":"# Replacing missing values with value \"without team\" in column \"team\"\ncsv[\"team\"] = csv[\"team\"].apply(lambda item: \"w\/o team\" if item is np.nan else item)","c763f4ce":"# No null values are present\ncsv.info()","17be85a3":"import plotly.express as px\ncountries = csv.loc[:, \"country\"]\nhist = px.histogram(countries, y = \"country\", color = \"country\", title = \"Distribution of players by country\")\nhist.show()","3575b124":"teams_dist = csv.loc[:, [\"team\"]]\nhist = px.histogram(teams_dist, y = \"team\", color = \"team\", title = \"distribution of players by country teams\").update_yaxes(categoryorder=\"total ascending\")\nhist.update_layout(bargap = 0.3)\nhist.show()","a70da764":"education_dist = csv.loc[:, [\"college\"]]\neducation_dist[\"college\"] = education_dist[\"college\"].apply(lambda item: item if (item == \"Uneducated\") else \"Educated\")\nhist = px.histogram(education_dist, x = \"college\", color = \"college\", title = \"players distributed by eduaction\")\nhist.show()","ce16fa58":"positions = csv.loc[:,[\"position\"]]\nhist = px.histogram(positions, x = \"position\", title = \"position distribution\", color = \"position\")\nhist.show()","a4013ebf":"players_age = csv.loc[:, [\"age\"]]\nhist = px.histogram(players_age, x = \"age\")\nhist.update_layout(bargap = 0.1, title = \"distribution of players by age\")\nhist.show()","90bc2c81":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nage_rating = csv.loc[:, [\"age\", \"rating\"]]\ngrouped_age_rating = age_rating.groupby([\"age\"], dropna = True, as_index = False).mean()\n\n\ngraph = px.line(grouped_age_rating, x = \"age\", y = \"rating\", title = \"rating to age dependency\")\ngraph.show()\n    \n\n\n\n    ","6eba6574":"salary_rating = csv.loc[:, [\"salary\", \"rating\"]]\ngrouped_salary_rating = salary_rating.groupby([\"rating\"], dropna = True, as_index = False).mean()\n\ngraph = px.line(grouped_salary_rating, x = \"rating\", y = \"salary\", title = \"salary to rating dependency\")\ngraph.show()\n\n","91e441bd":"rating_experience = csv.loc[:, [\"rating\", \"experience\"]]\ngrouped_rating_experience = rating_experience.groupby(\"experience\", dropna = True, as_index = False).mean()\n\ngraph = px.line(grouped_rating_experience, x = \"experience\", y = \"rating\", title = \"rating to experience dependency\")\ngraph.show()","49047749":"correlation = csv.corr()\nheat_hist = px.imshow(correlation)\nheat_hist.show()","fb7131c8":"import plotly.graph_objects as go\n\nage_position_gr = csv.loc[:, [\"age\", \"position\"]]\nbox_chart = go.Figure()\nfor position in np.unique(age_position_gr[\"position\"]):\n    box_chart.add_trace(go.Box(y = age_position_gr[age_position_gr[\"position\"] == position][\"age\"] , name = f\"{position}\"))\nbox_chart.update_layout(title = \"Position by age distribution\")\nbox_chart.show()","8988a57b":"draft_round = csv.loc[:, [\"draft_round\"]]\npie = px.pie(draft_round,\n             values=\"draft_round\", \n             names = \"draft_round\", \n             title = \"Total number of players, chosen in...\", \n             color = \"draft_round\", color_discrete_map = {1: \"green\", 2:\"darkblue\"})\npie.show()","ff0b2fe0":"csv[\"draft_peak\"] = csv[\"draft_peak\"].apply(lambda item: 0 if item == \"Undrafted\" else int(item))\ndraft_peak = csv.loc[:, [\"draft_peak\", \"rating\"]]\nbox_chart = go.Figure()\nfor peak in np.unique(draft_peak[\"draft_peak\"]):\n    box_chart.add_trace(go.Box(y = draft_peak[draft_peak[\"draft_peak\"] == peak][\"rating\"], name = f\"{peak}\"))#    \nbox_chart.update_layout( title = \"rating to draft phase dependency\")\nbox_chart.show()","778e71a2":"csv.head(50)","8ad30f03":"# From this bar chart we can see the most aged, therefore experienced, players choosing either center or guarding position, considered the most skill-dependent roles in basketball community","2aa88ed0":"## From this chart we see that first players picked more likely to be more successful in career, undrafted players(0) are players with the worst rating ","a680903f":"## As we see the most of the players are educated  ","dd1f0471":"## Most of the players are from USA because players from other countries were allowed to participate in draft later","3a5fdfcf":"### As we can see there are no players with version **NBA2k21** after deleting duplicates by full name, because the main part of the statistics done on **NBA2k20** version, adding version **NBA2k21** with repeating players from **NBA2k20** will slightly mess up the whole analysis, after removing duplicating players turns out in **version** column we have only **NBA2k20** value that does not have an impact on analysis","10b4435c":"### From this heat histogram we see strong correlation between:\n### **1) Salary and rating**\n### **2) Age and experience**\n### And some medium correlations between:\n### **1) Experience and rating**\n### **2) Salary and experience**\n### And a logical correlation between height and weight"}}