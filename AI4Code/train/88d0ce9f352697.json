{"cell_type":{"2938a000":"code","350a94c1":"code","5465daa7":"code","5a9ba898":"code","c0d4f110":"code","8b40dd4b":"code","396dda84":"code","bef4fe0c":"code","8b81bc89":"code","de00a027":"code","981b75a2":"code","2b6bc71e":"code","f9a24c52":"code","4ca97152":"code","a6d16156":"code","d1caff64":"code","0356d1e8":"code","37b2ff4d":"code","cc451267":"markdown","0c33c6d0":"markdown","56208bdd":"markdown","3bb55048":"markdown","b3556b7b":"markdown","521a68da":"markdown","ac5d751f":"markdown","300d1d1d":"markdown","33132bb1":"markdown","41c19cd9":"markdown","16646997":"markdown","38fc3b8b":"markdown"},"source":{"2938a000":"import pandas as pd\n%matplotlib inline","350a94c1":"dfTrain = pd.read_csv('..\/input\/dataset\/Train.csv')\ndfCampDetail = pd.read_csv('..\/input\/dataset\/Health_Camp_Detail.csv')\ndfPatientProfile = pd.read_csv('..\/input\/dataset\/Patient_Profile.csv')\ndfFirstCampDetail = pd.read_csv('..\/input\/dataset\/First_Health_Camp_Attended.csv')\ndfSecondDetail = pd.read_csv('..\/input\/dataset\/Second_Health_Camp_Attended.csv')\ndfThirdDetail = pd.read_csv('..\/input\/dataset\/Third_Health_Camp_Attended.csv')\ndfTest = pd.read_csv('..\/input\/dataset\/Test.csv')","5465daa7":"dfSecondDetail.rename(columns={\"Health Score\": \"Health_Score\"}, inplace=True)","5a9ba898":"dfTrain.head()","c0d4f110":"df_00 = dfTrain.merge(dfCampDetail, how = 'inner', on=['Health_Camp_ID'])\ndf_01 = df_00.merge(dfPatientProfile, how = 'left', on=['Patient_ID'])","8b40dd4b":"# mostar 5 registros con los campos que tenemos hasta ahora\ndf_01.head().T","396dda84":"# campamento del primer formato\ndf_02 = df_01[df_01['Category1'] == 'First']\ndf_03 = df_02.merge(dfFirstCampDetail, how = 'left', on=['Health_Camp_ID','Patient_ID'])\ndf_03[\"Target\"] = df_03[\"Health_Score\"].apply(lambda h: 1 if h > 0 else 0)","bef4fe0c":"# mostar 5 registros de los campamentos del primer formato\ndf_03.head().T","8b81bc89":"# campamento del segundo formato\ndf_04 = df_01[df_01['Category1'] == 'Second']\ndf_05 = df_04.merge(dfSecondDetail, how = 'left', on=['Health_Camp_ID','Patient_ID'])\ndf_05[\"Target\"] = df_05[\"Health_Score\"].apply(lambda h: 1 if h > 0 else 0)","de00a027":"# mostar 5 registros de los campamentos del segundo formato\ndf_05.head().T","981b75a2":"# campamento del tercer formato\ndf_06 = df_01[df_01['Category1'] == 'Third']\ndf_07 = df_06.merge(dfThirdDetail, how = 'left', on=['Health_Camp_ID','Patient_ID'])\ndf_07[\"Target\"] = df_07[\"Number_of_stall_visited\"].apply(lambda h: 1 if h > 0 else 0)","2b6bc71e":"# mostar 5 registros de los campamentos del tercer formato\ndf_07.head().T","f9a24c52":"# Concatenar los campamentos de los 3 formatos\ndf_08 = pd.concat([df_03,df_05,df_07])\ndf_08 = df_08[['Patient_ID', 'Health_Camp_ID', 'Target', 'Registration_Date', 'Var1', 'Var2', 'Var3', 'Var4', 'Var5', 'Camp_Start_Date', 'Camp_End_Date', 'Category1', 'Category2', 'Category3', 'Camp_Start_Date_t', 'Camp_End_Date_t', 'Online_Follower', 'LinkedIn_Shared', 'Twitter_Shared', 'Facebook_Shared', 'Income', 'Education_Score', 'Age', 'First_Interaction', 'City_Type', 'Employer_Category', 'Donation', 'Health_Score', 'Last_Stall_Visited_Number', 'Number_of_stall_visited']]\ndf_08.reset_index(drop=True, inplace=True)","4ca97152":"pd.DataFrame(df_08.Target.value_counts(normalize=True)).reset_index(drop=False).rename(columns={\"Target\": \"%\", \"index\": \"Target\"})","a6d16156":"df_08['Camp_Start_Date_t'] = pd.to_datetime(df_08['Camp_Start_Date'])\ndf_08['Camp_End_Date_t'] = pd.to_datetime(df_08['Camp_End_Date'])\ndf_08['Registration_Date_t'] = pd.to_datetime(df_08['Registration_Date'])\ndf_08[\"Registration_period\"] = df_08.loc[pd.notnull(df_08['Registration_Date_t']), 'Registration_Date_t'].apply(lambda r: r.strftime(\"%Y%m\"))","d1caff64":"df_09 = df_08.groupby([\"Registration_period\"], as_index=False).agg({\"Patient_ID\": \"nunique\", \"Target\": \"sum\"})\ndf_09[\"assistance_%\"] = df_09.apply(lambda row: (row[\"Target\"] * 100.0)\/row[\"Patient_ID\"] , axis=1)\ndf_09.plot(x=\"Registration_period\", y=\"assistance_%\", figsize=(20, 10), ylim=(0, 100), title=\"Hist\u00f3rico del % de asistentes respecto a los registrados a los campamentos\")","0356d1e8":"print(\"Total de registros: {}\".format(dfTrain.shape[0] + dfTest.shape[0]))","37b2ff4d":"dfTest","cc451267":"#### 3.3. Cruce con los campamentos de cada formato y construcci\u00f3n de Target","0c33c6d0":"#### 3.4. Distribuci\u00f3n del Target","56208bdd":"### 1. Importar librer\u00edas","3bb55048":"Por ejemplo en el primer registro, queremos saber cu\u00e1l es la probabilidad de que el Patient_ID (523729) asista o tenga un resultado favorable en el Health_Camp_ID (6534).","b3556b7b":"### 3. Construcci\u00f3n del Target\nEn pocas palabras, cuando un registro tiene el valor de 1 en el Target quiere decir que **ese usuario que se registr\u00f3 en ese campamento termin\u00f3 asistiendo**.","521a68da":"### 4. Entendimiento del Problema","ac5d751f":"Uno de los costos enormes para organizar estos campamentos es la cantidad de inventario que se necesita llevar. Si se lleva m\u00e1s inventario que el requerido, incurre en costos innecesariamente altos. Por otro lado, si se lleva un inventario inferior al requerido para realizar estos controles m\u00e9dicos, las personas terminan teniendo una mala experiencia.","300d1d1d":"#### 3.1. Partimos del Dataset de Entrenamiento","33132bb1":"MedCamp ha realizado 44 eventos de este tipo en un per\u00edodo de 3 a\u00f1os y han observado una gran disminuci\u00f3n entre el \"Registro\" y el n\u00famero de personas que toman ex\u00e1menes en los campamentos. En los \u00faltimos 3 a\u00f1os, han almacenado datos de aproximadamente 75,000 registros que han realizado.","41c19cd9":"Necesitas predecir las posibilidades (probabilidad) de tener un resultado favorable (que seg\u00fan la definici\u00f3n de resultado favorable, es lo mismo a que asista).","16646997":"### 2. Lectura de Datasets","38fc3b8b":"#### 3.2. Crucemos con los datos de los campamentos y de los pacientes"}}