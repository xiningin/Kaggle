{"cell_type":{"a27038dc":"code","fee520b9":"code","ea127d65":"code","57a1375c":"code","ec6e2c64":"code","e2494a9f":"code","73c806b3":"code","7a0e6376":"code","17b941a3":"code","d19924e3":"code","703e2a69":"code","eb2a68c6":"code","5ac881ee":"markdown","6c75b5dc":"markdown","522e041c":"markdown"},"source":{"a27038dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fee520b9":"pd.set_option('display.max_columns',500)","ea127d65":"train = pd.read_csv('..\/input\/wns-freshstart-dataconsol-v0\/consolTrain.csv')\ntest = pd.read_csv('..\/input\/wns-freshstart-dataconsol-v0\/consolTest.csv')\n\ntrain.head(1)","57a1375c":"train.head()","ec6e2c64":"contingencyCandidates = [('app_code','NearestLog_item_id_0'),('app_code','NearestLog_item_id_1'),\n                         ('app_code','NearestLog_device_type_0')\n                        ,('app_code','NearestLog_device_type_1'),('app_code','impression_weekday'),\n('app_code','product_type_0'),('app_code','product_type_1'),('app_code','category_1_1'),\n('app_code','category_2_1'),('app_code','category_3_1'),('app_code','category_1_2'),\n('app_code','category_2_2'),('app_code','category_3_2'),('app_code','category_3_0'),\n('product_type_0','category_1_1'),('product_type_1','category_1_1'),\n('product_type_0','category_1_2'),('product_type_1','category_1_2'),('product_type_1','category_3_1'),\n ('product_type_0','category_3_1'),('app_code','NearestLog_server_time_weekday')]","e2494a9f":"cols = [i for i in train.columns if i in test.columns]\nY = train['is_click']\nconsol = pd.concat([train[cols],test[cols]],0)\nconsol.reset_index(drop=True,inplace=True)","73c806b3":"def getNMFFeatures(df,contingencyCandidates):\n    from sklearn.decomposition import NMF\n    from tqdm import tqdm_notebook\n    for cc in tqdm_notebook(contingencyCandidates):\n        l,r = cc\n        print(l,r)\n        cMat = pd.crosstab(df[l],df[r])\n        model = NMF(n_components=20, init='random', alpha=0.1,l1_ratio=0.1,random_state=0)\n        W = model.fit_transform(cMat)\n        H = model.components_\n        colDF = pd.concat([pd.DataFrame(cMat.columns),pd.DataFrame(H.T)],1)\n        prefix = l+\"_\"+r+\"_NMF\"\n        newNames = [prefix+str(i)+\"_1\" for i in range(colDF.shape[1]-1)]\n        oldNames = colDF.columns[1:]\n        mapper = dict(zip(oldNames,newNames))\n        colDF.rename(columns=mapper,inplace=True)\n        rowDF = pd.concat([pd.DataFrame(cMat.index),pd.DataFrame(W)],1)\n        newNames = [prefix+str(i)+'_2' for i in range(rowDF.shape[1]-1)]\n        oldNames = rowDF.columns[1:]\n        mapper = dict(zip(oldNames,newNames))\n        rowDF.rename(columns=mapper,inplace=True)  \n        df = pd.merge(df,colDF,on=colDF.columns[0],how='left')\n        df = pd.merge(df,rowDF,on=rowDF.columns[0],how='left')\n    return df","7a0e6376":"consol = getNMFFeatures(consol,contingencyCandidates)","17b941a3":"consol.head(1)","d19924e3":"train = consol.iloc[:train.shape[0],:]\ntrain['is_click'] = Y\ntest = consol.iloc[train.shape[0]:,:]\ntrain.to_csv('consoltrainNMFFeats.csv',index=False)\ntest.to_csv('consoltestNMFFeats.csv',index=False)","703e2a69":"train.head()","eb2a68c6":"from IPython.display import FileLink, FileLinks\nFileLinks('.') #lists all downloadable files on server","5ac881ee":"### Fin ###","6c75b5dc":"### Contingency table matrix factorization:","522e041c":"### We will try to extract more features based on matrix factorization, primarily SVD or the like on:\n\n- Contingency tables\n- TFIDF like featuers"}}