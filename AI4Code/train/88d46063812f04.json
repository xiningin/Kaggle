{"cell_type":{"d6786b5b":"code","827813e8":"code","9eae9c6a":"code","4bed52cd":"code","036694f8":"code","80c66ef6":"code","e062f2b7":"code","831874b4":"code","d9bdc00d":"code","e834b4c6":"code","dee3a3bc":"code","4491791f":"code","1f2452c1":"code","9bd6ef2e":"code","b2189d10":"code","491d46c1":"code","f838264e":"code","b08b57ff":"code","68f31e77":"code","f7363567":"code","2de685ce":"code","eb430c28":"code","34464cca":"code","b9863beb":"code","8fda8b1e":"code","dc0ae99f":"code","81c0d6f8":"markdown","b3f255d5":"markdown","f4d5021e":"markdown","a0e0f776":"markdown","ed6adc24":"markdown","06351083":"markdown","be7c8ead":"markdown","d876962a":"markdown","f798f1df":"markdown","80f15a3f":"markdown","6ac8f357":"markdown"},"source":{"d6786b5b":"import pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 5000)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nseed = 51\n\nimport tensorflow as tf\nimport random\n\nprint('TensorFlow version = ' + tf.__version__)\ntf.random.set_seed(seed)\nrandom.seed(seed)","827813e8":"performance_summary = pd.read_csv('\/kaggle\/input\/rendimiento-escolar-chile\/20180214_Resumen_Rendimiento 2017_20180131.csv'\n                                  , delimiter=';')\nperformance_summary['PROM_ASIS'] = [x.replace(',', '.') for x in performance_summary['PROM_ASIS']]\n\nindices = []\nfor index, row in performance_summary.iterrows():\n    try:\n        (float(row.PROM_ASIS))\n    except:\n        indices.append(index)\n        \nperformance_summary.drop(indices, axis='index', inplace=True)\n\nperformance_summary['PROM_ASIS'] = performance_summary['PROM_ASIS'].astype(float)\nperformance_summary.head()","9eae9c6a":"cohort = performance_summary.copy()\n\n# SI_MUJ_TO = Total number of wommen in the type of education, without information on their final situation\nindices = cohort.index[cohort['SI_MUJ_TO'] >0].tolist()\ncohort.drop(indices, axis='index', inplace=True)\n# SI_HOM_TO = Total number of men in the type of education, without information on their final situation\nindices = cohort.index[cohort['SI_HOM_TO'] >0].tolist()\ncohort.drop(indices, axis='index', inplace=True)\n# APR_SI_TO = Total number of approved students for whom there is no information of their sex, in the type of education\nindices = cohort.index[cohort['APR_SI_TO'] >0].tolist()\ncohort.drop(indices, axis='index', inplace=True)\n# RET_SI_01 = Number of students who do not have information on their gender who dropped out of 1st grade\nindices = cohort.index[cohort['RET_SI_01'] >0].tolist()\ncohort.drop(indices, axis='index', inplace=True)\n\ncohort.drop(['APR_SI_03', 'APR_SI_04', 'APR_SI_07', 'APR_SI_TO', 'RET_SI_01', 'SI_HOM_01', 'SI_HOM_02', 'SI_HOM_03',\n             'SI_HOM_04', 'SI_HOM_05', 'SI_HOM_07', 'SI_HOM_TO', 'SI_MUJ_01', 'SI_MUJ_02', 'SI_MUJ_03', 'SI_MUJ_04',\n             'SI_MUJ_05', 'SI_MUJ_07', 'SI_MUJ_TO', 'PROM_ASIS_APR_SI'], axis='columns', inplace=True)","4bed52cd":"cohort.drop(['PROM_ASIS_APR_HOM', 'PROM_ASIS_APR_MUJ', 'PROM_ASIS_APR', 'PROM_ASIS_REP_HOM', 'PROM_ASIS_REP_MUJ',\n             'PROM_ASIS_REP'], axis='columns', inplace=True)","036694f8":"cohort.isna().sum()","80c66ef6":"cohort.sample(5)","e062f2b7":"# APR_HOM_TO = Total number of men who passed\n# REP_HOM_TO = Total number of men who failed\n# RET_HOM_TO = Total number of men who returned (drop-out)\n# TRA_HOM_TO = Total number of men who changed location\ncohort['total_males'] = cohort['APR_HOM_TO'] + cohort['REP_HOM_TO'] + cohort['RET_HOM_TO'] + cohort['TRA_HOM_TO']\n\n# drop schools with no males\nindices = cohort.index[cohort['total_males'] == 0].tolist()\ncohort.drop(indices, axis='index', inplace=True)\n\n# APR_MUJ_TO = Total number of women who passed\n# REP_MUJ_TO = Total number of women who failed\n# RET_MUJ_TO = Total number of women who returned (drop-out)\n# TRA_MUJ_TO = Total number of women who changed location\ncohort['total_females'] = cohort['APR_MUJ_TO'] + cohort['REP_MUJ_TO'] + cohort['RET_MUJ_TO']+ cohort['TRA_MUJ_TO']\n\ncohort['target'] = cohort['APR_HOM_TO'] # how many male students pass\ncohort['target'] = (cohort['target']\/(cohort['total_males']))  # ratio of males that pass","831874b4":"cohort.drop([\n'APR_HOM_01',\n'APR_HOM_02',        \n'APR_HOM_03',        \n'APR_HOM_04',        \n'APR_HOM_05',        \n'APR_HOM_06',       \n'APR_HOM_07',        \n'APR_HOM_08',        \n'APR_HOM_TO',        \n'APR_MUJ_01',        \n'APR_MUJ_02',        \n'APR_MUJ_03',        \n'APR_MUJ_04',        \n'APR_MUJ_05',        \n'APR_MUJ_06',        \n'APR_MUJ_07',        \n'APR_MUJ_08',        \n'APR_MUJ_TO',        \n'REP_HOM_01',        \n'REP_HOM_02',        \n'REP_HOM_03',        \n'REP_HOM_04',        \n'REP_HOM_05',        \n'REP_HOM_06',        \n'REP_HOM_07',        \n'REP_HOM_08',        \n'REP_HOM_TO',        \n'REP_MUJ_01',        \n'REP_MUJ_02',        \n'REP_MUJ_03',        \n'REP_MUJ_04',        \n'REP_MUJ_05',        \n'REP_MUJ_06',        \n'REP_MUJ_07',        \n'REP_MUJ_08',        \n'REP_MUJ_TO',        \n'RET_HOM_01',        \n'RET_HOM_02',        \n'RET_HOM_03',        \n'RET_HOM_04',        \n'RET_HOM_05',        \n'RET_HOM_06',        \n'RET_HOM_07',        \n'RET_HOM_08',        \n'RET_HOM_TO',        \n'RET_MUJ_01',        \n'RET_MUJ_02',        \n'RET_MUJ_03',        \n'RET_MUJ_04',        \n'RET_MUJ_05',        \n'RET_MUJ_06',        \n'RET_MUJ_07',        \n'RET_MUJ_08',        \n'RET_MUJ_TO',        \n'TRA_HOM_01',        \n'TRA_HOM_02',        \n'TRA_HOM_03',        \n'TRA_HOM_04',        \n'TRA_HOM_05',        \n'TRA_HOM_06',        \n'TRA_HOM_07',        \n'TRA_HOM_08',        \n'TRA_HOM_TO',        \n'TRA_MUJ_01',        \n'TRA_MUJ_02',        \n'TRA_MUJ_03',        \n'TRA_MUJ_04',        \n'TRA_MUJ_05',        \n'TRA_MUJ_06',        \n'TRA_MUJ_07',        \n'TRA_MUJ_08',        \n'TRA_MUJ_TO'        \n    ], axis='columns', inplace=True)","d9bdc00d":"cohort.sample(5)","e834b4c6":"cohort.drop(['AGNO', 'RBD', 'DGV_RBD', 'NOM_RBD'], axis='columns', inplace=True)","dee3a3bc":"cohort.info()","4491791f":"# Encode a numeric column as zscores\ndef encode_numeric_zscore(df, name, mean=None, sd=None):\n    if mean is None:\n        mean = df[name].mean()\n\n    if sd is None:\n        sd = df[name].std()\n\n    df[name] = (df[name] - mean) \/ sd\n    \n# Encode text values to dummy variables(i.e. [1,0,0],[0,1,0],[0,0,1] for red,green,blue)\ndef encode_text_dummy(df, name):\n    dummies = pd.get_dummies(df[name])\n    for x in dummies.columns:\n        dummy_name = f\"{name}-{x}\"\n        df[dummy_name] = dummies[x]\n    df.drop(name, axis=1, inplace=True)","1f2452c1":"cohort.drop(['NOM_COM_RBD', 'NOM_DEPROV_RBD'], axis='columns', inplace=True)","9bd6ef2e":"# for col in cohort.columns:\n#     print(col + ' : ' + str(cohort[col].nunique()))\ncohort.drop(['ESTADO_ESTAB'], axis='columns', inplace=True)","b2189d10":"cohort.info()","491d46c1":"cohort.COD_REG_RBD.value_counts()","f838264e":"cohort = pd.get_dummies(cohort, columns=['COD_DEPE', 'COD_DEPE2','RURAL_RBD', 'COD_ENSE', 'COD_ENSE2'])\n# encode_text_dummy(cohort, 'COD_REG_RBD')\n# encode_text_dummy(cohort, 'COD_PRO_RBD')\n# encode_text_dummy(cohort, 'COD_COM_RBD')  \n# encode_text_dummy(cohort, 'COD_DEPROV_RBD') \ncohort = pd.get_dummies(cohort, columns=['COD_REG_RBD', 'COD_PRO_RBD', 'COD_COM_RBD', 'COD_DEPROV_RBD'])\ncohort.info()","b08b57ff":"cohort.sample(5)","68f31e77":"y = cohort['target']\nx = cohort.drop(['target'], axis='columns')","f7363567":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state=seed)\n\nprint('Training size: ' + str(len(x_train)))\nprint('Validation size: ' + str(len(x_test)))","2de685ce":"import tensorflow\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Dense, ELU, Input, Dropout\n\ninput = Input(shape=x.shape[1])\n\nm = Dense(1024)(input)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\nm = Dense(1024)(m)\nm = ELU()(m)\nm = Dropout(0.33)(m)\n\noutput = Dense(1, activation='linear')(m)\n\nmodel = Model(inputs=[input], outputs=[output])\n\nmodel.summary()","eb430c28":"from tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nmodel.compile(optimizer=Adam(lr=1e-4), loss='mean_squared_error', metrics=['mae'])\n\nes = EarlyStopping(monitor='val_loss', patience=20, verbose=1, restore_best_weights=True)","34464cca":"%%time\nhistory = model.fit(x_train, y_train, validation_data=(x_test, y_test), callbacks=[es], \n                    verbose=2, epochs=300, batch_size=256)","b9863beb":"history = history.history\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex='col', figsize=(20, 14))\n\nax1.plot(history['loss'], label='Training')\nax1.plot(history['val_loss'], label='Validation')\nax1.legend(loc='best')\nax1.set_title('Loss')\n\nax2.plot(history['mae'], label='Training')\nax2.plot(history['val_mae'], label='Validation')\nax2.legend(loc='best')\nax2.set_title('Mean Absolute Error')\n\nplt.xlabel('Epochs')\nsns.despine()\nplt.show()","8fda8b1e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex='col', figsize=(20, 14))\n\nax1.plot(history['loss'][10:], label='Training')\nax1.plot(history['val_loss'][10:], label='Validation')\nax1.legend(loc='best')\nax1.set_title('Loss')\n\nax2.plot(history['mae'][10:], label='Training')\nax2.plot(history['val_mae'][10:], label='Validation')\nax2.legend(loc='best')\nax2.set_title('Mean Absolute Error')\n\nepochs = range(10, len(history['loss']))\nplt.xlabel('Epochs')\nsns.despine()\nplt.show()","dc0ae99f":"model.evaluate(x_test, y_test)","81c0d6f8":"Removing school identification columns.","b3f255d5":"**TODO**: normalize numerical columns","f4d5021e":"Convert categorical columns into indicator columns","a0e0f776":"**TODO** : Use multiple years of data in training","ed6adc24":"Removing redundant name columns. Retaining code columns with this information.","06351083":"[Dataset](https:\/\/www.kaggle.com\/rpparada\/rendimiento-escolar-chile): Student data for all schools in Chile. Showing the student's *situaci\u00f3n final* (Passed, failed, retired, or transferred)\n\nGoal: Prediction of the total percentage of male students who pass in their grade in 2017.","be7c8ead":"Skip the plot of the first 10 Epochs so we can view at a scale to see training in later epochs.","d876962a":"Removing all outcome data at the grade level and school level so that our model isn't just learning how to do arithmetic.","f798f1df":"Removing attendance data for specific outcomes, but retaining general attendance data (PROM_ASIS column).","80f15a3f":"Creating our target column. ","6ac8f357":"Removing all student data for which their outcomes are unknown."}}