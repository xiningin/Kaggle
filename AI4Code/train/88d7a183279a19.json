{"cell_type":{"219cf2d3":"code","faace26b":"code","8dc7b8c2":"code","d6777256":"code","c3ac60ab":"code","4cf58bd0":"code","374a7cf1":"code","1afaff30":"code","48f8782e":"code","6d941172":"code","1879c317":"code","93df0dd8":"code","52fa95f0":"code","259e1065":"code","4ed9ffa0":"code","3cc4a377":"code","36bc1ee2":"code","dd5222bb":"code","e3c0de3b":"code","d45e5bf2":"code","a38e7bad":"code","5c239c14":"code","1f674bf3":"code","de5f1879":"code","4337fa68":"code","37d6a86c":"code","2152357f":"code","50ed537f":"code","4ec37fcc":"code","bd77967e":"code","1c6c4f03":"markdown","7a5c219a":"markdown","5eee247c":"markdown","4f1c258c":"markdown","98d6c18f":"markdown","617e19d4":"markdown"},"source":{"219cf2d3":"!git clone https:\/\/github.com\/codestella\/putting-nerf-on-a-diet.git","faace26b":"# INPUT YOUR BRANCH HERE!\nBRANCH_NAME = \"nerf\"","8dc7b8c2":"!cd \/kaggle\/working\/putting-nerf-on-a-diet && ls && git pull && git checkout $BRANCH_NAME\nprint(\"=\"*7)\n!cd \/kaggle\/working\/putting-nerf-on-a-diet\/ && git branch","d6777256":"#pull the updates\n!cd \/kaggle\/working\/putting-nerf-on-a-diet && git pull origin $BRANCH_NAME","c3ac60ab":"!pip install livelossplot\n!pip install imageio","4cf58bd0":"!pip install \"jax[tpu]>=0.2.16\" -f https:\/\/storage.googleapis.com\/jax-releases\/libtpu_releases.html\n!conda install -y importlib-metadata\n#!conda install -y -c conda-forge jax jaxlib flax optax datasets transformers\n!conda install -y -c conda-forge jaxlib flax optax datasets transformers","374a7cf1":"!echo $TPU_NAME","1afaff30":"# TPU setup\nimport os\nif 'TPU_NAME' in os.environ:\n    import requests\n    if 'TPU_DRIVER_MODE' not in globals():\n        url = 'http:' + os.environ['TPU_NAME'].split(':')[1] + ':8475\/requestversion\/tpu_driver_nightly'\n        resp = requests.post(url)\n        TPU_DRIVER_MODE = 1\n\n    from jax.config import config\n    config.FLAGS.jax_xla_backend = \"tpu_driver\"\n    config.FLAGS.jax_backend_target = os.environ['TPU_NAME']\n    print('Registered TPU:', config.FLAGS.jax_backend_target)\nelse:\n    print('No TPU detected. Can be changed under \"Runtime\/Change runtime type\".')\n\n# Module check\nimport jax\nimport flax\n\nfor _m in (jax, flax):\n    print(f'{_m.__name__}: {_m.__version__}')\njax.local_devices()","48f8782e":"%cd \/kaggle\/working\/putting-nerf-on-a-diet\n!git status","6d941172":"from src.trainer import *","1879c317":"class Config:\n    max_iters: int = 20 # lower for testing (orig 150000)\n    N_samples: int = 16 # lower it if OOM (orig 128)\n    datadir: str = '\/kaggle\/input\/'\n    select_data: str = 'phototourism\/sacre'\n    dataset: str = 'phototourism'\n    scene: str = 'sacre'\n    inner_step_size: int = 1\n    inner_update_steps: int = 64\n    test_inner_steps: int = 64\n    batch_size: int = 64\n    lr: float = 5e-4","93df0dd8":"my_trainer = Trainer(Config)","52fa95f0":"from jax import jit, vmap, pmap, random\nfrom functools import partial","259e1065":"%%time\n# test sampling 1 data point\nimg, rays, bds = my_trainer.get_example(1, split='train', \n                                        downsample=4)","4ed9ffa0":"@partial(jit, static_argnums=[0, 1, 2])\ndef get_example_jit(img_idx, split, downsample, imgdata, posedata):\n    sc = .05\n\n    img = imgdata[split][img_idx]\n\n    # (4, 4)\n    c2w = posedata[split]['c2w_mats'][img_idx]\n    # (3, 3)\n    kinv = posedata[split]['kinv_mats'][img_idx]\n    c2w = np.concatenate([c2w[:3 ,:3], c2w[:3 ,3:4 ] * sc], -1)\n    # (2, )\n    bds = posedata[split]['bds'][img_idx] * np.array([.9, 1.2]) * sc\n\n    H, W = img.shape[:2]\n    # (0, 4, 8, ..., H)\n    i, j = np.meshgrid(np.arange(0, W, downsample), np.arange(0, H, downsample), indexing='xy')\n\n    test_images = img[j, i]\n    test_rays = get_rays(c2w, kinv, i, j)\n\n    return test_images, test_rays, bds","3cc4a377":"%%time\n_ = get_example_jit(\n    1, split='train', downsample=4, \n    imgdata=my_trainer.imgdata, \n    posedata=my_trainer.posedata\n)","36bc1ee2":"rng = random.PRNGKey(0)\ninner_update_steps = 64\nparams = my_trainer.params\n\nbatch_size = Config.batch_size\ninner_step_size = Config.inner_step_size\nN_samples = Config.N_samples\nmodel = my_trainer.model\n\nflat_img = np.reshape(img, (-1, 3))\nflat_rays = np.reshape(rays, (2, -1, 3))","dd5222bb":"%%time\n_ = my_trainer.update_network_weights(\n    rng, flat_img, flat_rays, \n    params, inner_update_steps, bds\n)","e3c0de3b":"def update_network_weights_jit(rng, images, rays, params, inner_steps, bds,\n                               batch_size, inner_step_size, N_samples, model):\n    for _ in range(inner_steps):\n        rng, rng_input = random.split(rng)\n        idx = random.randint(rng_input, shape=(batch_size,), minval=0, maxval=images.shape[0])\n        image_sub = images[idx, :]\n        rays_sub = rays[:, idx, :]\n        rng, params, loss = single_step(rng, image_sub, rays_sub, params, bds,\n                                        inner_step_size, N_samples, model)\n    return rng, params, loss","d45e5bf2":"%%time\n_ = update_network_weights_jit(\n    rng, flat_img, flat_rays, \n    params, inner_update_steps, bds,\n    batch_size, inner_step_size, N_samples, model\n)","a38e7bad":"@partial(pmap, axis_name=\"inner_step\")\ndef _inner_update_network_weights(rng, images, rays, params, inner_steps, bds,\n                                  batch_size, inner_step_size, N_samples, model):\n    rng, rng_input = random.split(rng)\n    idx = random.randint(rng_input, shape=(batch_size,), \n                         minval=0, maxval=images.shape[0])\n    image_sub = images[idx, :]\n    rays_sub = rays[:, idx, :]\n    rng, params, loss = single_step(rng, image_sub, rays_sub, params, bds,\n                                    inner_step_size, N_samples, model)\n","5c239c14":"flat_img.shape","1f674bf3":"flat_rays.shape","de5f1879":"N_samples","4337fa68":"batch_size","37d6a86c":"inner_update_steps","2152357f":"%%time\nfor _ in range(inner_step_size):\n    _inner_update_network_weights(\n        rng, flat_img, flat_rays,\n        params, inner_update_steps, bds,\n        batch_size, inner_step_size, N_samples,model\n    )","50ed537f":"%%time\nmy_trainer.train()","4ec37fcc":"#!cd putting-nerf-on-a-diet && python main.py","bd77967e":"!rm -rf .git","1c6c4f03":"### 1. Optimise `get_example`","7a5c219a":"### Delete Your Personal Credentials Upon Checking Out!","5eee247c":"## Run `trainer`","4f1c258c":"## Sanity Check TPU Setup (If Available)","98d6c18f":"### Last: Trigger training","617e19d4":"### 2. Optimise `update_network_weights`"}}