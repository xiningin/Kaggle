{"cell_type":{"e9790ca2":"code","6cc4c188":"code","ef3ac9ba":"code","efb6c653":"code","5a07cee7":"code","8d4f91f6":"code","0299d2c2":"code","bef191b9":"code","96b12f8f":"code","ed173125":"code","ab591ae1":"code","a4b039ba":"code","02312a7a":"code","ab7d960a":"code","697c8126":"code","f7eb8c67":"code","18135c6b":"code","ead5e047":"code","56631484":"code","833d269c":"code","35a79263":"code","4ff8cb57":"markdown","320981e7":"markdown","54a6162a":"markdown","9d7e0920":"markdown","db0e11c5":"markdown","01322c4b":"markdown","520265a3":"markdown","c5784c6e":"markdown","7e04278e":"markdown","dd9a361e":"markdown","e31a0343":"markdown","c6be0259":"markdown","4c8df319":"markdown","428bb5dc":"markdown","09c2ffff":"markdown","a573cce1":"markdown","9b956c37":"markdown","e3a2c100":"markdown","3815befe":"markdown","c2a8b8fb":"markdown","c293bf72":"markdown","9da1efe2":"markdown","d0cf7750":"markdown","2bc583f1":"markdown","33210fa0":"markdown"},"source":{"e9790ca2":"import os\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport statsmodels.api as sm\nimport plotly.graph_objs as go\nimport seaborn as sns\n\n%matplotlib inline","6cc4c188":"! ls ..\/input\/nfl-big-data-bowl-2021\/","ef3ac9ba":"df_players = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/players.csv\")","efb6c653":"df_players.head()","5a07cee7":"defence = [\"DL\", \"DE\", \"DT\",\"LB\", \"OLB\", \"MLB\", \"CB\", \"FS\", \"SS\", \"S\", \"DB\"]\ndf_players = df_players[df_players[\"position\"].isin(defence)].reset_index(drop=True)","8d4f91f6":"g_position = sns.countplot(df_players[\"position\"])\ng_position.set_title(\"Number of players per position\")","0299d2c2":"# Inspired by https:\/\/www.kaggle.com\/fatihbilgin\/nfl-big-data-visualization\ndf_players[\"HeightFt\"] = df_players[\"height\"].str.split('-', expand=True)[0].astype(int)\ndf_players[\"HeightIn\"] = df_players[\"height\"].str.split('-', expand=True)[1].fillna(0).astype(int)\ndf_players[\"HeightCm\"] = df_players[\"HeightFt\"]*30.48 + df_players[\"HeightIn\"]*2.54\n\ndf_players[\"WeightKg\"] = df_players[\"weight\"]*0.45359237\n\ndf_height = df_players.groupby(['height','HeightFt','HeightIn']).size().reset_index().sort_values([\"HeightFt\", \"HeightIn\"])\n\ndf_height.columns = [\"height\",\"HeightFt\",\"HeightIn\",\"Count\"]","bef191b9":"g_height = df_height.loc[:,[\"height\",\"Count\"]].set_index(\"height\").plot(color='green', kind='bar')\n\ng_height.set_xlabel(\"Height\") \ng_height.set_ylabel(\"Count\") \ng_height.get_legend().remove()\ng_height.set_title('Player Height (ft-in)')","96b12f8f":"g_weight = sns.distplot(df_players[\"weight\"], kde=False, rug=False)\n\ng_weight.set_xlabel(\"Weight\") \ng_weight.set_title('Player Weight (lbs)')","ed173125":"#Create figure and Axes. And set title.\nfig, axes = plt.subplots(2, 2, figsize=(10,6), gridspec_kw=dict(wspace=0.1, hspace=0.6))\nfig.suptitle(\"Defensive players' information\", fontsize=15)\n\n#Too check layout, I'll show text on each Axes.\ngs = axes[0, 1].get_gridspec()\naxes[0, 0].remove()\naxes[1, 0].remove()\n#Add gridspec we got\naxbig = fig.add_subplot(gs[:, 0])\n\n\n#Add three plots.\nsns.countplot(df_players[\"position\"], ax=axbig)\naxbig.set_title(\"Number of players per position\", fontsize=12)\n\ndf_height.loc[:,[\"height\",\"Count\"]].set_index(\"height\").plot(kind='bar', ax=axes[0, 1])\naxes[0, 1].set_ylabel(\"Count\") \naxes[0, 1].get_legend().remove()\naxes[0, 1].set_title('Player Height (ft-in)', fontsize=12)\n\nsns.distplot(df_players[\"weight\"], kde=False, rug=False, ax=axes[1, 1])\naxes[1, 1].set_xlabel(\"Weight\") \naxes[1, 1].set_title('Player Weight (lbs)', fontsize=12)","ab591ae1":"#Create figure and Axes. And set title.\nfig, axes = plt.subplots(2, 2, figsize=(10,5))\nfig.suptitle('2 row x 2 columns axes with no data')\n\n#Too check layout, I'll show text on each Axes.\nfor col in range(axes.shape[0]):\n    for row in range(axes.shape[1]):\n        label = 'Col: {}\\nRow: {}'.format(col, row)\n        axes[col][row].annotate(label, (0.1, 0.5), xycoords='axes fraction', va='center')","a4b039ba":"#Create figure and Axes. And set title.\nfig, axes = plt.subplots(2, 2, figsize=(10,5))\nfig.suptitle('Bigger 1 row x 2 columns axes with no data')\n\n#Too check layout, I'll show text on each Axes.\nfor col in range(axes.shape[0]):\n    for row in range(axes.shape[1]):\n        label = 'Col: {}\\nRow: {}'.format(col, row)\n        axes[col][row].annotate(label, (0.1, 0.5), xycoords='axes fraction', va='center')\n\n#Get gridspec and remove unwanted Axes objects\ngs = axes[0, 1].get_gridspec()\naxes[0, 0].remove()\naxes[1, 0].remove()\n\n#Add gridspec we got\naxbig = fig.add_subplot(gs[:, 0])\n\n#Too check layout, I'll show text on the new big Axes.\naxbig.annotate('Big Axes \\nGridSpec[:, 0]', (0.1, 0.5),\n               xycoords='axes fraction', va='center')","02312a7a":"plt.style.available","ab7d960a":"def titanic_subplot(style_available):\n    #set style\n    plt.style.use(style_available)\n    \n    #Create figure and Axes. And set title.\n    fig, axes = plt.subplots(2, 2, figsize=(10,6), gridspec_kw=dict(wspace=0.1, hspace=0.6))\n    fig.suptitle(f\"Defensive players' information with {style_available} style\", fontsize=15)\n\n    #Too check layout, I'll show text on each Axes.\n    gs = axes[0, 1].get_gridspec()\n    axes[0, 0].remove()\n    axes[1, 0].remove()\n    #Add gridspec we got\n    axbig = fig.add_subplot(gs[:, 0])\n\n\n    #Add three plots.\n    sns.countplot(df_players[\"position\"], ax=axbig)\n    axbig.set_title(\"Number of players per position\", fontsize=12)\n\n    df_height.loc[:,[\"height\",\"Count\"]].set_index(\"height\").plot(kind='bar', ax=axes[0, 1])\n    axes[0, 1].set_ylabel(\"Count\") \n    axes[0, 1].get_legend().remove()\n    axes[0, 1].set_title('Player Height (ft-in)', fontsize=12)\n\n    sns.distplot(df_players[\"weight\"], kde=False, rug=False, ax=axes[1, 1])\n    axes[1, 1].set_xlabel(\"Weight\") \n    axes[1, 1].set_title('Player Weight (lbs)', fontsize=12)","697c8126":"for style_available in plt.style.available:\n    titanic_subplot(style_available)","f7eb8c67":"def titanic_subplot(style_available, palette_available):\n    #set style\n    plt.style.use(style_available)\n    \n    #get palette\n    palette = sns.color_palette(palette_available)\n    \n    #Create figure and Axes. And set title.\n    fig, axes = plt.subplots(2, 2, figsize=(10,6), gridspec_kw=dict(wspace=0.1, hspace=0.6))\n    fig.suptitle(\"Defensive players' information\", fontsize=15)\n\n    #Too check layout, I'll show text on each Axes.\n    gs = axes[0, 1].get_gridspec()\n    axes[0, 0].remove()\n    axes[1, 0].remove()\n    #Add gridspec we got\n    axbig = fig.add_subplot(gs[:, 0])\n\n\n    #Add three plots.\n    sns.countplot(df_players[\"position\"], ax=axbig, palette=palette)\n    axbig.set_title(\"Number of players per position\", fontsize=12)\n\n    df_height.loc[:,[\"height\",\"Count\"]].set_index(\"height\").plot(colormap=palette_available, kind='bar', ax=axes[0, 1])\n    axes[0, 1].set_ylabel(\"Count\") \n    axes[0, 1].get_legend().remove()\n    axes[0, 1].set_title('Player Height (ft-in)', fontsize=12)\n\n    #Unfortunately, it does not seem to be possible to specify colormap.\n    sns.distplot(df_players[\"weight\"], kde=False, rug=False, ax=axes[1, 1])\n    axes[1, 1].set_xlabel(\"Weight\") \n    axes[1, 1].set_title('Player Weight (lbs)', fontsize=12)","18135c6b":"titanic_subplot(\"bmh\", \"Accent\")","ead5e047":"titanic_subplot(\"bmh\", \"copper_r\")","56631484":"titanic_subplot(\"dark_background\", \"plasma\")","833d269c":"titanic_subplot(\"dark_background\", \"YlOrRd\")","35a79263":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#3cb371','#eb3446','Big Shoulders Stencil Text','Smokum',45,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Have a nice plot!' )","4ff8cb57":"<a id=\"2\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Examples of visualization<\/div>\n\nFor example, I'll take a look at the following three perspectives on defensive players\n\n- Count of position\n\n- Defensive player's height\n\n- Defensive player's weight","320981e7":"First, let's look at the results!","54a6162a":"## Summary\n\nI introduced tips to create impressed nice plots using following 3 techniques.\n\n- Subplot\n\n- Style\n\n- Color\n\n## Motivation\n\nIt's very important to create a compact, compelling and impressive graph. \n\nDue to the nature of jutyter notebooks, our analysis usually proceeds vertically. Readers might get tired or difficult to understand the relationships between the graphs. \n\nIf we could arrange the graphs in an orderly fashion, the readers might get better understanding for the relationships between the graphs, which may lead to deeper insights. If we can create a impressive and memorable figure, readers may look at the graph more carefully, or they may recall it in other competitions and use the findings to their advantage.\n\nOf course, changing the color and shape of the graph can create misunderstandings and, in some cases, deceive readers. But basically, I think devices that makes the graph look better are a positive thing.\n\nIn this notebook,  I'll explain the techniques we need to create nice graphs and its' references.","9d7e0920":"By plt.subplots, the number of vertical and horizontal divisions will be equal. If you want to create non-equal layout subplots, there are some ways, but I'll show you following way.","db0e11c5":"We could easily change the look of the graphs.\n\nDepending on the style, the texts color may have been assimilated to the background, so this needs to be corrected.","01322c4b":"<a id=\"1\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Tip2: Style<\/div>","520265a3":"Let's look . Let's apply all styles to our plot.","c5784c6e":"Now, we've looked at the results of the three visualization so far. But the graphs are hard to see because they are in a vertical line. It is difficult to compare between the graphs, and the results of each analysis are not memorable.\n\nIn the next section, we'll take advantage of the subplot to solve this problem.","7e04278e":"You can see all options by plt.style.available.","dd9a361e":"Next, I'll see distribution of players' height and weight.","e31a0343":"These were the tips I had gathered while create graphs and read good notebooks.","c6be0259":"We were able to fit the three graphs into a single diagram. Now you can see the graphs at a time without scrolling through the screen! In addition, by combining them into a single piece, we are able to create a single theme, \"Defensive players' information\".\n\nThe readers must get be more interested in the factor and more likely to consider it than when it was presented in a disjointed fashion.","4c8df319":"We could place multiple graphs  in a single image, compactly. But the image's color remain the default and the graph has no personality and I've seen its' design anywhere.\n\nTo improve this problem, we can change graphs' style by using plt.style.use(). If we choose style, we can easilly chage graph's color, font and so on.  \n\nWe can check about style in [Controlling figure aesthetics](https:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html).","428bb5dc":"If we can do these two things, it should be enough for now.\n\nIf you want ot know more detail, you can see [Customizing Figure Layouts Using GridSpec and Other Functions](https:\/\/matplotlib.org\/3.3.2\/tutorials\/intermediate\/gridspec.html).","09c2ffff":"The same style but with a different color of the figure made a big difference in the impression.","a573cce1":"<a id=\"1\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Tip1: Subplot<\/div>","9b956c37":"<a id=\"1\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Tip3: Color<\/div>","e3a2c100":"I'll pull out the data on the defensive players.","3815befe":"<a id=\"1\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Data and library loading<\/div>\n\nFirst, I'll import libraries and dataset.","c2a8b8fb":"Using palette for seaborn and colormap for matplotlib, we can also change each plot's color. If you don't like the colors you've chosen by style, you can change them in this way.\n\nIn seaborn, we pass following strings or a list of colors specified any way that matplotlib accepts(an RGB tuple, a hex code, or a name in the X11 table) to **sns.color_palette()**, we can get colormaps. And we can pass it to **palette** augment. For pandas.DataFrame.plot, we can also pass the strings to **colormap** augment.\n\nTo know more detail, following tutrials will help you,\n\n- [Choosing color palettes](https:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html)\n\n- [Choosing Colormaps in Matplotlib](https:\/\/matplotlib.org\/tutorials\/colors\/colormaps.html)","c293bf72":"First, I count up number of players' position.","9da1efe2":"-------------","d0cf7750":"Now, let's talk about how to make it. We can create subplots by using plt.subplots. For example, to split the screen into a 2x2 screen and arrange the graph, do the following,","2bc583f1":"1. Use get_gridspec() to get the geometry information of the Axes you want to combine, and remove the Axes that are no longer needed with remove().\n\n1. Based on the geometry we just acquired, we will place the new large Axes.","33210fa0":"# How to create nice plots? 3Tips\ud83d\udc4d\ud83d\udcca\n\n## **Content**\n1. [Data and library loading](#1)\n1. [Examples of visualization](#2)\n1. [Tip1: Subplot](#3)\n1. [Tip2: Style](#4)\n1. [Tip3: Color](#5)"}}