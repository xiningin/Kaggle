{"cell_type":{"eb629db8":"code","164dbc58":"code","2e35205d":"code","bb934404":"code","d0a08484":"code","5e6e7994":"code","b1b47281":"code","03564a0e":"code","362231e9":"code","4cf4c09c":"code","403714bf":"code","a00ee354":"code","120c4ebe":"code","78ab7048":"code","7a75929c":"code","0528150c":"code","5c6fde2b":"code","91603d41":"code","421f8600":"code","e1d14fd2":"code","57882fb0":"code","14a94f98":"code","055c275e":"code","a14dc9b8":"code","e1a8ef44":"code","1ea455e7":"code","0bcdcceb":"code","c70265ab":"code","00059836":"code","491ae2cf":"code","51def17c":"code","074604e5":"code","64885510":"code","c3ce5b2f":"code","7135992b":"code","d105357c":"code","e6366764":"code","94307e12":"code","4505d882":"code","4c2dd899":"code","77a58001":"code","6bcaae4e":"code","cbd78812":"code","56884282":"code","0e7b12b7":"code","99478a31":"code","6e7c1414":"code","ae4147cf":"code","709dd49c":"code","a80dbc08":"code","659822fe":"code","ace19f45":"code","08b2edac":"code","c83ef0e9":"code","cb18589f":"code","06f845fc":"code","b578867f":"code","851e49dd":"code","50eb5de9":"code","16c247c4":"code","a51749c8":"code","f551c17b":"code","618d16cd":"code","cd58dbae":"code","7f5bae16":"code","04586a2f":"code","375b9b34":"code","be05fc40":"code","48fbb44d":"code","e936dce0":"code","80127648":"code","9eb730d6":"code","80175d28":"code","45acb88f":"code","64d8b11b":"code","a38d9aae":"code","7feb9903":"code","897081c4":"code","212db442":"markdown","26978e7f":"markdown","9dfad3be":"markdown","e0c19016":"markdown","39285aa5":"markdown","557ffa1b":"markdown","90771569":"markdown","20397310":"markdown","f731f2e9":"markdown","24a184ad":"markdown","fdfe18e0":"markdown","a916a6ef":"markdown"},"source":{"eb629db8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'svg'\nimport seaborn as sns\n\nimport warnings \nwarnings.filterwarnings('ignore')","164dbc58":"#load data\n\ndf_train = pd.read_csv('..\/input\/song-popularity-prediction\/train.csv')\ndf_test = pd.read_csv('..\/input\/song-popularity-prediction\/test.csv')","2e35205d":"df_train.shape","bb934404":"df_test.shape","d0a08484":"df_train.head()","5e6e7994":"df_test.head()","b1b47281":"np.sum(df_train.isnull())","03564a0e":"from sklearn.impute import SimpleImputer\nimptr = SimpleImputer(strategy=\"median\", add_indicator=False)","362231e9":"#Train data\nimptr = imptr.fit(df_train[['song_duration_ms','acousticness','danceability','energy','instrumentalness','key','liveness','loudness']])\ndf_train[['song_duration_ms','acousticness','danceability','energy','instrumentalness','key','liveness','loudness']] = imptr.transform(df_train[['song_duration_ms','acousticness','danceability','energy','instrumentalness','key','liveness','loudness']])","4cf4c09c":"#Test data\nimptr = imptr.fit(df_test[['song_duration_ms','acousticness','danceability','energy','instrumentalness','key','liveness','loudness']])\ndf_test[['song_duration_ms','acousticness','danceability','energy','instrumentalness','key','liveness','loudness']] = imptr.transform(df_test[['song_duration_ms','acousticness','danceability','energy','instrumentalness','key','liveness','loudness']])","403714bf":"np.sum(df_train.isnull())","a00ee354":"np.sum(df_test.isnull())","120c4ebe":"df_train.describe()","78ab7048":"df_train.audio_mode.value_counts()","7a75929c":"df_train.time_signature.value_counts()","0528150c":"df_train.song_popularity.value_counts()\n#0 -- not popular\n#1 -- popular","5c6fde2b":"pop = df_train[df_train['song_popularity'] == 1]\nnot_pop = df_train[df_train['song_popularity'] == 0]\n\nprint(\"Percentage of Songs popular\", len(pop['song_popularity']) * 100 \/ len(df_train))\nprint(\"Percentage of Songs not popular\", len(not_pop['song_popularity']) * 100 \/ len(df_train))","91603d41":"corr = df_train.corr()\nsns.heatmap(corr,\n            fmt='.1f',\n            linewidth=0.2,\n            linecolor='black',\n            annot = True,\n            cmap=\"YlGnBu\" \n            )","421f8600":"plt.scatter(df_train.loudness,df_train.energy)\nsns.set_style(\"whitegrid\")","e1d14fd2":"plt.scatter(df_train.energy,df_train.acousticness)\nsns.set_style(\"whitegrid\")","57882fb0":"plt.scatter(df_train.loudness,df_train.acousticness)\nsns.set_style(\"whitegrid\")","14a94f98":"#testing low coorelated values\nplt.scatter(df_train.audio_valence,df_train.tempo)\nsns.set_style(\"whitegrid\")","055c275e":"df_train.dtypes\n#audio_mode and time_signature are categorical\n#other are continuous","a14dc9b8":"#train\ndf_train_encoded = pd.get_dummies(df_train, columns=[\"audio_mode\", \"time_signature\"])","e1a8ef44":"#test\ndf_test_encoded = pd.get_dummies(df_test, columns=[\"audio_mode\", \"time_signature\"])","1ea455e7":"df_train_encoded.head(5)","0bcdcceb":"#dropping id column as they are not necessary for predicting\ndf_train = df_train_encoded.drop(['id'], axis = 1)","c70265ab":"df_test = df_test_encoded.drop(['id'], axis = 1)","00059836":"df_train.shape","491ae2cf":"df_test.shape","51def17c":"sns.distplot(df_train['song_duration_ms'],rug=True,color='#38b000')","074604e5":"sns.distplot(df_train['loudness'],rug=True,color='#38b000')","64885510":"sns.distplot(df_train['acousticness'],rug=True,color='#38b000')","c3ce5b2f":"sns.distplot(df_train['danceability'],rug=True,color='#38b000')","7135992b":"sns.distplot(df_train['energy'],rug=True,color='#38b000')","d105357c":"sns.distplot(df_train['instrumentalness'],rug=True,color='#38b000')","e6366764":"sns.distplot(df_train['key'],rug=True,color='#38b000')","94307e12":"#interpret_model(tuned_xgboost)","4505d882":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate, cross_val_score","4c2dd899":"rf = RandomForestClassifier()","77a58001":"df_train","6bcaae4e":"X = df_train.copy()\n#X_test = df_test.copy()","cbd78812":"#X,y split\ny = X['song_popularity']\nX = X.drop('song_popularity', axis=1)","56884282":"X.shape","0e7b12b7":"X.head()","99478a31":"y.head()","6e7c1414":"df_test.shape","ae4147cf":"#Scaling data\nfrom sklearn import preprocessing\nscaler = preprocessing.StandardScaler()\n\ncol = X.columns\nX = pd.DataFrame(scaler.fit_transform(X))\nX.columns = col\n\n\ncol = df_test.columns\ndf_test = pd.DataFrame(scaler.fit_transform(df_test))\ndf_test.columns = col","709dd49c":"sns.kdeplot(df_test.loudness, shade=True,color=\"g\")\nsns.kdeplot(df_test.energy, shade=True,color=\"r\")","a80dbc08":"sns.kdeplot(df_test.acousticness, shade=True,color=\"g\")\nsns.kdeplot(df_test.energy, shade=True,color=\"r\")","659822fe":"#Split dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4)","ace19f45":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","08b2edac":"#fitting on training data\nrf.fit(X_train, y_train)","c83ef0e9":"rf.score(X_train, y_train)","cb18589f":"#this cannot be ran as we don't have y_test - in the Test data, we do not have the target variable\nrf.score(X_test, y_test)","06f845fc":"#now prdicting the RF model on the X_train features\npred_y_train_rf = rf.predict(X_train)","b578867f":"#now prdicting the RF model on the X_test features\npred_y_test_rf = rf.predict(X_test)","851e49dd":"metrics.accuracy_score(pred_y_train_rf, y_train)","50eb5de9":"metrics.accuracy_score(pred_y_test_rf, y_test)","16c247c4":"#print('Random Forest R2 Score', metrics.r2_score(y_train,rf.predict(X_train)))\n#print('Random Forest OOB Score',rf.oob_score_ )","a51749c8":"print('AUC scores on the training set: ', cross_val_score(rf, X_train,y_train, cv=5, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(rf, X_train,y_train, cv=5, scoring='roc_auc')))","f551c17b":"print('AUC scores on the training set: ', cross_val_score(rf, X_train,pred_y_train_rf, cv=5, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(rf, X_train,pred_y_train_rf, cv=5, scoring='roc_auc')))","618d16cd":"print('AUC scores on the test set: ', cross_val_score(rf, X_test,pred_y_test_rf, cv=5, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(rf, X_test,pred_y_test_rf, cv=5, scoring='roc_auc')))","cd58dbae":"actual_test_rf_preds = rf.predict(df_test)","7f5bae16":"actual_test_rf_preds.shape","04586a2f":"print('AUC scores on the test set: ', cross_val_score(rf, df_test,actual_test_rf_preds, cv=5, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(rf, df_test,actual_test_rf_preds, cv=5, scoring='roc_auc')))","375b9b34":"#from sklearn.neighbors import KNeighborsClassifier","be05fc40":"#knn = KNeighborsClassifier(n_neighbors=5)","48fbb44d":"#knn.fit(X_train, y_train)","e936dce0":"#pred_y_test_knn = knn.predict(X_test)","80127648":"#print('AUC scores on the training set: ', cross_val_score(knn, X_train,y_train, cv=5, scoring='roc_auc'),\n#     'Mean of AUC scores: ', np.mean(cross_val_score(knn, X_train,y_train, cv=5, scoring='roc_auc')))","9eb730d6":"#print('AUC scores on the test set: ', cross_val_score(rf, X_test,pred_y_test_knn, cv=5, scoring='roc_auc'),\n#      'Mean of AUC scores: ', np.mean(cross_val_score(rf, X_test,pred_y_test_knn, cv=5, scoring='roc_auc')))","80175d28":"sample_submission = pd.read_csv('..\/input\/song-popularity-prediction\/sample_submission.csv')","45acb88f":"sample_submission.shape","64d8b11b":"sample_submission.head(5)","a38d9aae":"output = pd.DataFrame({'id': sample_submission.index,\n                       'song_popularity': actual_test_rf_preds})","7feb9903":"output","897081c4":"output.to_csv('.\/submission.csv', index=False)","212db442":"**plotting highly coorelated attributes**","26978e7f":"**Using AutoML(PyCaret) to check on predictions, will be using the optimised algorithm later**","9dfad3be":"**Using SimpleIMputer from SKlearn for imputing data for missing values**","e0c19016":"skewed data will be handled later","39285aa5":"**checking distribution of data if they are normal, right or left skewed**","557ffa1b":"**Loading data**","90771569":"**Positive corr**\n\nloudness and energy = 0.6\n\nloudness and audio_valence = 0.4\n\ndanceability and audio_valence = 0.4\n\n**Negative corr**\n\nacousticness and energy = -0.6\n\nacousticness and loudness = -0.5","20397310":"**Basic EDA**","f731f2e9":"**SkLearn -- KNN**","24a184ad":"**Submission** ::\nRandom Forest and XGBoost seems to be providing the best scores **~.54**\n\nRandom Forest AUC on X_Test is **0.80** which is good, hence submitting for the same. Will be working further on XGBoost","fdfe18e0":"**Encoding both the values using \"One-hot\" encoder**","a916a6ef":"audio mode and time signature are categorical values, they will be handled later using Encoding"}}