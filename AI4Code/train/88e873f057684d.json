{"cell_type":{"15d707e2":"code","680bce43":"code","ac00f55b":"code","2e6d089f":"code","cfe0b869":"code","a96b3df9":"code","0914dd8a":"code","67de40cb":"code","7503fab3":"code","8ab3b556":"code","dc942435":"code","c04269b5":"code","23f93546":"code","2633995c":"code","77594b00":"code","024b45d7":"code","84ab48c0":"code","399f090d":"code","b1402cec":"code","284b5cfd":"code","370c2a77":"code","357b36ab":"code","8cfb8a23":"code","0c579c8f":"code","5bcc81c0":"code","25b79593":"code","ef396c28":"code","e6e6ce93":"code","c847c04f":"code","da6b58fa":"code","097bcf35":"code","d15758f0":"markdown","2c4c1bb3":"markdown","4d58531a":"markdown","3bfd9b99":"markdown","d525725b":"markdown","2ade387d":"markdown","0675b4f1":"markdown","eccd49a8":"markdown","88424d2b":"markdown","428bda4c":"markdown","73136187":"markdown","b2fa621d":"markdown","528f7be5":"markdown","6c931a58":"markdown","504abd1b":"markdown","4cc6345a":"markdown","5103dcff":"markdown","d68d66f1":"markdown","87219809":"markdown","ec017930":"markdown","2b5da06c":"markdown","f13a042b":"markdown","c9031f21":"markdown","f459f61a":"markdown","c0a8d6ad":"markdown","5faf58cf":"markdown","95bda9b4":"markdown"},"source":{"15d707e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nplt.style.use('fivethirtyeight')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","680bce43":"df = pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')","ac00f55b":"df_genre = df.groupby('Genre')","2e6d089f":"def genre_sales(region):\n    xrange = np.arange(1,len(df_genre.sum())+1)\n    fig,ax= plt.subplots(ncols=2,figsize=(18,6))\n    df_to_plot = df_genre.sum().sort_values(by=region,ascending =False)[::-1]\n    df_to_plot[region].plot(kind='barh')\n    #labels\n    ax[1].set_ylabel(None)\n    ax[1].tick_params(axis='both', which='major', labelsize=13)\n    ax[1].set_xlabel('Total Sales(in millions)', fontsize=15,labelpad=21)\n    #spines\n    ax[1].spines['top'].set_visible(False)\n    ax[1].spines['right'].set_visible(False)\n    ax[1].grid(False)\n    #annotations    \n    for x,y in zip(np.arange(len(df_genre.sum())+1),df_genre.sum().sort_values(by=region,ascending =False)[::-1][region]):\n        label = \"{:}\".format(y)\n        labelr = round(y,2)\n        plt.annotate(labelr, # this is the text\n                     (y,x), # this is the point to label\n                      textcoords=\"offset points\",# how to position the text\n                     xytext=(6,0), # distance from text to points (x,y)\n                    ha='left',va=\"center\")\n     \n    #donut chart\n    theme = plt.get_cmap('Blues')\n    ax[0].set_prop_cycle(\"color\", [theme(1. * i \/ len(df_to_plot))for i in range(len(df_to_plot))])    \n    wedges, texts,_ = ax[0].pie(df_to_plot[region], wedgeprops=dict(width=0.45), startangle=-45,labels=df_to_plot.index,\n                      autopct=\"%.1f%%\",textprops={'fontsize': 13,})\n\n \n    plt.tight_layout()    ","cfe0b869":"genre_sales('Global_Sales')","a96b3df9":"genre_sales('NA_Sales')","0914dd8a":"genre_sales('EU_Sales')","67de40cb":"genre_sales('JP_Sales')","7503fab3":"df_platform = df.groupby('Platform')","8ab3b556":"def platform_sales(region):\n    df_platform_plot = df_platform.sum().sort_values(by=region,ascending = False).head(12)[::-1]\n    xrange = np.arange(1,len(df_platform_plot)+1)\n    fig,ax = plt.subplots(ncols=2,figsize=(18,6))\n    df_platform_plot[region].plot(kind='barh',color='#961515',alpha=.9)\n    #labels\n    ax[1].set_ylabel(None)\n    ax[1].tick_params(axis='both', which='major', labelsize=13)\n    ax[1].set_xlabel('Total Sales(in millions)', fontsize=15,labelpad=21)\n    #spines\n    ax[1].spines['top'].set_visible(False)\n    ax[1].spines['right'].set_visible(False)\n    ax[1].grid(False)\n    #annotations    \n    for x,y in zip( np.arange(len(df_platform_plot)+1),df_platform_plot[region]):\n        label = \"{:}\".format(y)\n        labelr = round(y,2)\n        plt.annotate(labelr, # this is the text\n                     (y,x), # this is the point to label\n                      textcoords=\"offset points\",# how to position the text\n                     xytext=(6,0), # distance from text to points (x,y)\n                     ha='left',va=\"center\")\n    #donut chart    \n    theme = plt.get_cmap('Reds')\n    ax[0].set_prop_cycle(\"color\", [theme(1. * i \/ len(df_platform_plot))for i in range(len(df_platform_plot))])    \n    wedges, texts,_ = ax[0].pie(df_platform_plot[region], wedgeprops=dict(width=0.45), startangle=-45,labels=df_platform_plot.index,\n                      autopct=\"%.1f%%\",textprops={'fontsize': 13,})\n    \n    plt.tight_layout()  ","dc942435":"platform_sales('Global_Sales')","c04269b5":"platform_sales('NA_Sales')","23f93546":"platform_sales('EU_Sales')","2633995c":"platform_sales('JP_Sales')","77594b00":"df_game_title = df.groupby('Name').sum()","024b45d7":"df_game_title[['Global_Sales','NA_Sales','EU_Sales','JP_Sales']].sort_values(by='Global_Sales',\n                                         ascending =False).head(12)[::-1].plot(kind='barh',figsize=(18,9),grid=False)","84ab48c0":"df_title = df.groupby('Name')","399f090d":"def title_sales(region):\n    df_title_plot = df_title.sum().sort_values(by=region,ascending = False).head(12)[::-1]\n    xrange = np.arange(1,len(df_title_plot)+1)\n    fig,ax = plt.subplots(figsize=(15,6))\n    df_title_plot[region].plot(kind='barh',color='#0aa391',alpha=.9)\n    #labels\n    ax.set_ylabel(None)\n\n    ax.tick_params(axis='both', which='major', labelsize=13)\n    ax.set_xlabel('Total Sales(in millions)', fontsize=15,labelpad=21)\n    #spines\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.grid(False)\n    #annotations    \n    for x,y in zip( np.arange(len(df_title_plot)+1),df_title_plot[region]):\n        label = \"{:}\".format(y)\n        labelr = round(y,2)\n        plt.annotate(labelr, # this is the text\n                     (y,x), # this is the point to label\n                      textcoords=\"offset points\",# how to position the text\n                     xytext=(6,0), # distance from text to points (x,y)\n                     ha='left',va=\"center\") \n    plt.tight_layout()    ","b1402cec":"title_sales('Global_Sales')","284b5cfd":"title_sales('NA_Sales')","370c2a77":"title_sales('EU_Sales')","357b36ab":"title_sales('JP_Sales')","8cfb8a23":"df_publisher = df.groupby('Publisher')","0c579c8f":"def studio_sales(region):\n    df_pub_plot = df_publisher.sum().sort_values(by=region,ascending = False).head(12)[::-1]\n    xrange = np.arange(1,len(df_pub_plot)+1)\n    fig,ax = plt.subplots(figsize=(15,6))\n    df_pub_plot[region].plot(kind='barh',color='#469109',alpha=.9)\n    #labels\n    ax.set_ylabel(None)\n    ax.tick_params(axis='both', which='major', labelsize=13)\n    ax.set_xlabel('Total Sales(in millions)', fontsize=15,labelpad=21)\n    #spines\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.grid(False)\n    #annotations    \n    for x,y in zip( np.arange(len(df_pub_plot)+1),df_pub_plot[region]):\n        label = \"{:}\".format(y)\n        labelr = round(y,2)\n        plt.annotate(labelr, # this is the text\n                     (y,x), # this is the point to label\n                    textcoords=\"offset points\",# how to position the text\n                     xytext=(6,0), # distance from text to points (x,y)\n                     ha='left',va=\"center\")  ","5bcc81c0":"studio_sales('Global_Sales')","25b79593":"studio_sales('NA_Sales')","ef396c28":"studio_sales('EU_Sales')","e6e6ce93":"studio_sales('JP_Sales')","c847c04f":"df_year = df.groupby('Year').sum().sort_values(by=['Year'],ascending = False)","da6b58fa":"#Dropped 2020 year because data of 2018,2019 were not present.\ndf_year.drop([2020.0],inplace =True)","097bcf35":"fig,ax = plt.subplots(figsize=(18,6))\nax.plot(df_year.index,df_year['Global_Sales'],label ='Global',linewidth=3)\nax.plot(df_year.index,df_year['NA_Sales'],label ='North-America',linewidth=3)\nax.plot(df_year.index,df_year['EU_Sales'],label ='Europe',linewidth=3)\nax.plot(df_year.index,df_year['JP_Sales'],label ='Japan',linewidth=3)\nax.legend(loc=\"upper left\")\nax.set_ylabel('Total Sales(in millions)', fontsize=15,labelpad=21)\nax.set_xticks(np.arange(1980,2018,1))\nax.tick_params(axis='both', which='major', labelsize=12)\nax.grid(False)\nfor item in ax.get_xticklabels():\n    item.set_rotation(45)","d15758f0":"#####  Best selling game studio in Japan","2c4c1bb3":"##### North American sales","4d58531a":"##### North-American Sales","3bfd9b99":"##### European sales ","d525725b":"#### Observations\nFrom the above graphs the following points can be summarized.<br>\n<ul>\n    <li>Globally the most popular platform till date is <b>PS2<\/b> followed by Xbox360 and PS3.<\/li>\n    <li>The most popular platform in till dateNorth America is <b>Xbox 360<\/b> followed by PS2 and Wii<\/li>\n    <li>The most popular platform in Europe is <b>PS3<\/b> followed by PS2 and Xbox360<\/li>\n    <li>The most popular platform in Japan is <b>DS<\/b> followed by PS and PS2<\/li>\n<\/ul>    ","2ade387d":"#####  Best selling game studio in North-America","0675b4f1":"### Best-selling game titles till date","eccd49a8":"### Time series of video game sales from 1980 to 2017","88424d2b":"### Best selling game studios ","428bda4c":"#### Observations\nFrom the above graphs the following points can be summarized.<br>\n<ul>\n    <li>Globally the best selling title till date is <b>Wii Sports<\/b> followed by Grand Theft Auto V<\/li>\n    <li>Across North America the best selling title is also <b>Wii Sports<\/b> followed by Super Mario Bros<\/li>\n    <li>In Europe the best selling game is<b> Wii Sports<\/b><\/li>\n    <li>In Japan the best selling game is <b>Pokemon Red\/Pokemon Blue <\/li>\n<\/ul>    ","73136187":"##### Global sales ","b2fa621d":"#### Sales of game titles across all regions.","528f7be5":"#### Observations\n<ul>\n    <li>As seen in the graph above video-game sales peaked in <b>2008-2010<\/b> across the globe.\n    <li>But the overall sales of <b>Japan<\/b> has remained consistent nontheless.   ","6c931a58":"##### Japanese Sales","504abd1b":"##### North American Sales","4cc6345a":"##### Best selling game studio world-wide","5103dcff":"##### European Sales","d68d66f1":"<ul>\n    <li>The best selling game studio across all regions is<b> Nintendo","87219809":"#####  Best selling game studio in Europe","ec017930":"### Sales of video games per platform","2b5da06c":"##### Global Sales","f13a042b":"##### Japanese sales ","c9031f21":"#### Observations\nFrom the above graphs the following points can be summarized.<br>\n<ul>\n    <li>World-wide the most popular genre is<b> Action<\/b> followed by Sports and Shooter.<\/li>\n    <li>The most popular genre across North America and Europe is also <b>Action<\/b>.<\/li>\n    <li>The most popular genre in Japan is <b>Role-Playing<\/b>.<\/li>\n<\/ul>    \n","f459f61a":"### Sales of video games per genre.","c0a8d6ad":"##### Global Sales","5faf58cf":"##### Japanese Sales","95bda9b4":"##### European Sales"}}