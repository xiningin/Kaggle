{"cell_type":{"70a14481":"code","22bfb06a":"code","7cf3f41f":"code","70c02861":"code","076dd949":"code","611a6a13":"code","762c58da":"code","8686bccb":"code","656f3cd7":"code","26fcf250":"code","b17d6eb1":"code","a727372b":"code","478eaa45":"code","5bacdc37":"code","2e4e5d70":"code","09e1ada5":"code","c2b3e7ef":"code","23f0fef5":"code","b67ce69a":"code","50acf08a":"code","930b0c57":"code","31cbdc58":"code","5cc841c9":"code","78c5fe18":"code","77541cca":"code","48cb2ddc":"code","4cd0e8c6":"code","b69028fa":"code","572924d2":"code","3e5920c9":"code","2fee34e5":"code","9ca6c3e4":"code","b5417394":"code","e02a0aae":"code","387b6958":"code","d86a4507":"code","3ce6408e":"code","0435b0e8":"code","6db5b44b":"code","9bb1e4f4":"code","9075b307":"code","275ba390":"code","b70f62ac":"code","3a7b1d5e":"code","7cd89d8c":"code","0512820b":"code","a32dacd0":"code","b785c31b":"code","136277f0":"code","6ea0e21a":"code","62cd3486":"code","47ccdfb4":"code","b148e350":"code","eedb7b6c":"code","14d942a0":"code","dee0f8be":"code","ebfe5352":"code","396a0c24":"code","5dd74c30":"code","b351fb27":"code","8fbf655b":"code","4ca974f7":"code","17973de0":"code","776facdd":"code","143b6120":"code","a52df9aa":"code","8eb9c5cf":"code","7766306e":"code","d919f4bb":"code","f3aaf97a":"code","df0c4d71":"code","99252183":"code","eca1df99":"code","4055afc9":"code","86294ad5":"code","b4c250b8":"code","246351d0":"code","4e40a38a":"code","82cd71cd":"code","05f91fe4":"code","ef1a1ad2":"code","9c0d394c":"code","244e477a":"code","3bd035ad":"code","2fd2d4a9":"code","aa3a96df":"code","bb3e524d":"code","d2be7e36":"code","6ad80538":"code","8bdf2c4e":"code","857983b0":"code","d34d8405":"code","dc8eda72":"code","6ccafeba":"code","a25761c5":"code","10938d73":"code","ca883e78":"code","ce1ae872":"code","dff7cd30":"code","ab1c56e0":"code","40abb59f":"code","7986ccf0":"code","733551dc":"code","7a518656":"code","4c5a6edf":"code","5f85a190":"code","a7ecf784":"code","1312ae9e":"code","2b61f18c":"code","97081032":"code","cad10c8d":"code","86a49753":"code","a0549d7a":"code","29a4eec9":"code","6f557077":"code","e1d51123":"code","8702cb58":"code","f168b471":"code","628d899b":"code","56c3d444":"code","21550561":"code","50654880":"code","e6a52056":"code","cb4ad8ce":"code","fac6471d":"code","c087d045":"code","d8c207d4":"code","325cc0f2":"code","10fbeea7":"code","7b62b2db":"code","e60ce5f2":"code","f82e6f11":"code","b134255f":"code","1687afb0":"code","2a1ebc4a":"code","d6c7ad86":"code","c0e35ea9":"code","b98fa227":"code","30b19266":"code","d213b30f":"code","1b35808e":"code","38fd0eab":"code","2eaa4f6a":"code","0b199f05":"code","ead90180":"code","8ec59be7":"code","55c5081b":"code","4f54b0a2":"code","b677d9d9":"code","aabe74b4":"code","fd7de5c9":"code","b1b3f059":"code","fd5145ee":"code","42f9efeb":"code","82c5c5ca":"code","487ba643":"code","3122da13":"code","c5fcc818":"code","f77bb43d":"code","0c1507eb":"code","b73db8bb":"code","ffe201ad":"code","13588b3a":"code","6fa13067":"code","e09dafff":"code","32d92d96":"code","cdc4c133":"code","c2d4f1bd":"code","c909a360":"code","e9c28207":"code","ddccac8b":"code","cbddf21c":"code","42b09ecf":"code","717bdbb1":"code","5be84aff":"code","1787673f":"code","f67d1f89":"code","4a093691":"code","f4428582":"markdown","84032c1e":"markdown","b5580b23":"markdown","a9b9e2e3":"markdown","169ad12c":"markdown","f889d1b8":"markdown","d5605109":"markdown","3a12c26e":"markdown","9461b67f":"markdown","d554c061":"markdown","9ae841cc":"markdown","f0a19dc4":"markdown","4ecdb48e":"markdown","53067e78":"markdown","ab710130":"markdown","9e1fab24":"markdown","06f0b329":"markdown","195f08fb":"markdown","53efa422":"markdown","9e9f9844":"markdown","1f015356":"markdown","c6944971":"markdown","916e042a":"markdown","9bfe19b5":"markdown","aea7c9a9":"markdown","c206c28f":"markdown","c6ddc688":"markdown","8faf7d2a":"markdown","9a7f1d14":"markdown","c9c14ea9":"markdown","2e4a5c09":"markdown","83a14427":"markdown","2c2f7f46":"markdown"},"source":{"70a14481":"import pandas as pd\nimport numpy as np \nimport glob \nimport warnings \nfrom collections import Counter\nwarnings.filterwarnings(\"ignore\")\nimport plotly.express as px \nimport seaborn as sns \nimport matplotlib.pyplot as plt \nimport lightgbm as lgbm \nfrom sklearn.model_selection import StratifiedKFold\nimport math\nimport os \nimport random\nimport torch \nimport torch.nn as nn\nfrom transformers import AdamW\nfrom torch.utils.data import Dataset , DataLoader\nfrom colorama import Fore , Style\nr__=Fore.RED\ng__=Fore.GREEN\nst__=Style.RESET_ALL","22bfb06a":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONASSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True","7cf3f41f":"seed_everything(42)","70c02861":"def wap(row) :\n    denom = row.ask_size1 + row.bid_size1\n    return ((row.bid_price1 * row.ask_size1 + row.ask_price1 * row.bid_size1)\/denom)","076dd949":"def log_return(list_prices):\n    return np.log(list_prices).diff()","611a6a13":"def realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))","762c58da":"def custom_loss(ytrue,ypred) :\n    squared_residual = (ytrue-ypred)**2\/ytrue\n    grad = squared_residual\n    hess = np.ones(len(ytrue))\n    \n    return grad,hess","8686bccb":"def rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))","656f3cd7":"def feval_RMSPE(preds, train_data):\n    labels = train_data.get_label()\n    return 'RMSPE', round(rmspe(y_true = labels, y_pred = preds),5), False\n","26fcf250":"def custom_rmspe_valid(y_true, y_pred):\n    residual = (y_true - y_pred).astype(\"float\")\n    residual = residual ** 2 \/ y_true\n    residual = np.mean(residual)\n    return \"eval_RMSPE\", math.sqrt(residual), False","b17d6eb1":"def simple_volatility(series_prix):\n    mx = np.max(series_prix)\n    mn = np.min(series_prix)\n    moy = np.mean(series_prix)\n    vol = (moy-mn)\/(mx-mn)\n    return vol","a727372b":"def count_unique(series):\n    return len(np.unique(series))","478eaa45":"# load train datas \ntrain = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")","5bacdc37":"# get a look at train data.\ntrain.head() ","2e4e5d70":"# get a look at test data \ntest = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")\ntest.head()","09e1ada5":"# load book train for stock_id = 1\nbook_train_stock_id_1 = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=1\")","c2b3e7ef":"# get a look at book train for stock_id = 1\nbook_train_stock_id_1.head()","23f0fef5":"# load trade train for stock_id = 1\ntrade_train_stock_id_1 = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=1\")","b67ce69a":"# get a look at trade train .\ntrade_train_stock_id_1.head()","50acf08a":"nb_time_id_per_stock_id = Counter(train[\"stock_id\"])\ntrain[\"nb_time_id\"]  = train[\"stock_id\"].map(nb_time_id_per_stock_id)\nfig = px.pie(data_frame=train,names=\"nb_time_id\",values=\"nb_time_id\",title=\"Percentage of number of time_id for each stock_id\")\nfig.update_layout(title={\"xanchor\":\"center\",\"x\":0.5})\nfig.show()","930b0c57":"#  Compute the weighted averaged price for each option.\nbook_train_stock_id_1[\"wap\"] = book_train_stock_id_1.apply(wap,axis=1)","31cbdc58":"book_train_stock_id_1[\"squared_wap\"] = book_train_stock_id_1[\"wap\"] **2","5cc841c9":"# Compute the second weighted averaged price for each option \nbook_train_stock_id_1.loc[:,\"wap1\"] = (book_train_stock_id_1['bid_price2'] * book_train_stock_id_1['ask_size2']+book_train_stock_id_1['ask_price2'] * book_train_stock_id_1['bid_size2'])  \/ (\n                                      book_train_stock_id_1['bid_size2']+ book_train_stock_id_1[\n                                  'ask_size2'])","78c5fe18":"book_train_stock_id_1.loc[:,\"supply_demand\"] = (book_train_stock_id_1.loc[:,\"ask_size1\"]+book_train_stock_id_1.loc[:,\"ask_size2\"])\\\n\/(book_train_stock_id_1.loc[:,\"bid_size1\"] + book_train_stock_id_1.loc[:,\"bid_size2\"])","77541cca":"book_train_stock_id_1.loc[:,\"log_supply_demand\"] = book_train_stock_id_1.groupby(\"time_id\")[\"supply_demand\"].apply(log_return)","48cb2ddc":"book_train_stock_id_1.loc[:,\"avg_wap\"] = book_train_stock_id_1.loc[:,\"wap\"] + \\\nbook_train_stock_id_1.loc[:,\"wap1\"]\/2","4cd0e8c6":"# compute the log return for each option .\nbook_train_stock_id_1[\"log_return\"]=book_train_stock_id_1.groupby(\"time_id\")[\"wap\"].\\\napply(log_return)","b69028fa":"book_train_stock_id_1.loc[:,\"log_return1\"] = book_train_stock_id_1.groupby(\"time_id\")[\"wap1\"].apply(log_return)","572924d2":"book_train_stock_id_1.loc[:,\"log_squared_wap\"] = book_train_stock_id_1.groupby(\"time_id\")[\"squared_wap\"].apply(log_return)","3e5920c9":"book_train_stock_id_1.loc[:,\"log_avg_wap\"] = book_train_stock_id_1.groupby(\"time_id\")\\\n[\"avg_wap\"].apply(log_return)","2fee34e5":"book_train_stock_id_1[\"diff_bid_price\"] = book_train_stock_id_1[\"bid_price1\"]-\\\nbook_train_stock_id_1[\"bid_price2\"]","9ca6c3e4":"book_train_stock_id_1[\"diff_ask_price\"] = book_train_stock_id_1[\"ask_price2\"]-\\\nbook_train_stock_id_1[\"ask_price1\"]","b5417394":"book_train_stock_id_1[\"log_diff_ask_price\"] = book_train_stock_id_1.groupby(\"time_id\")[\"diff_ask_price\"].\\\napply(log_return)","e02a0aae":"book_train_stock_id_1[\"log_diff_bid_price\"] = book_train_stock_id_1.groupby(\"time_id\")[\"diff_bid_price\"].\\\napply(log_return)","387b6958":"book_train_stock_id_1[\"wap3\"] = ((book_train_stock_id_1[\"bid_price1\"] * book_train_stock_id_1[\"bid_size1\"])+\\\n                                 (book_train_stock_id_1[\"ask_price1\"] * book_train_stock_id_1[\"ask_size1\"]))\/\\\n(book_train_stock_id_1[\"ask_price1\"] + book_train_stock_id_1[\"ask_size1\"])","d86a4507":"book_train_stock_id_1[\"log_wap3\"] = book_train_stock_id_1.groupby(\"time_id\")[\"wap3\"].\\\napply(log_return)","3ce6408e":"book_train_stock_id_1[\"wap_balance\"] = abs(book_train_stock_id_1[\"wap\"]-\\\n                                           book_train_stock_id_1[\"wap1\"])+1","0435b0e8":"book_train_stock_id_1[\"log_wap_balance\"] = book_train_stock_id_1.groupby(\"time_id\")[\"wap_balance\"]\\\n.apply(log_return)","6db5b44b":"book_train_stock_id_1[\"price_spread\"] = book_train_stock_id_1[\"ask_price1\"] - \\\nbook_train_stock_id_1[\"bid_price1\"]","9bb1e4f4":"book_train_stock_id_1[\"log_price_spread\"] = book_train_stock_id_1.groupby(\"time_id\")[\"price_spread\"]\\\n.apply(log_return)","9075b307":"book_train_stock_id_1[\"price_spread_1\"] = book_train_stock_id_1[\"ask_price2\"] - \\\nbook_train_stock_id_1[\"bid_price2\"]","275ba390":"book_train_stock_id_1[\"log_price_spread_1\"] = book_train_stock_id_1.groupby(\"time_id\")[\"price_spread_1\"].\\\napply(log_return)","b70f62ac":"book_train_stock_id_1.loc[:,\"avg_wap\"] = book_train_stock_id_1.loc[:,\"wap\"] + \\\nbook_train_stock_id_1.loc[:,\"wap1\"]\/2","3a7b1d5e":"book_train_stock_id_1[\"price_spread_avg\"] = book_train_stock_id_1[\"price_spread\"] + \\\nbook_train_stock_id_1[\"price_spread_1\"] \/2","7cd89d8c":"book_train_stock_id_1[\"price_spread_diff\"] = book_train_stock_id_1[\"price_spread_1\"] - \\\nbook_train_stock_id_1[\"price_spread\"]","0512820b":"book_train_stock_id_1[\"log_avg_wap\"] = book_train_stock_id_1.groupby(\"time_id\")[\"avg_wap\"].apply(log_return)","a32dacd0":"book_train_stock_id_1[\"log_price_spread_avg\"] = book_train_stock_id_1.groupby(\"time_id\")[\"price_spread_avg\"].apply(log_return)","b785c31b":"book_train_stock_id_1[\"log_price_spread_diff\"] = book_train_stock_id_1.groupby(\"time_id\")[\"price_spread_diff\"].\\\napply(log_return)","136277f0":"book_train_stock_id_1[\"total_volume\"] = book_train_stock_id_1[\"ask_size1\"]+\\\nbook_train_stock_id_1[\"bid_size1\"] + book_train_stock_id_1[\"ask_size2\"] +\\\nbook_train_stock_id_1[\"bid_size2\"]","6ea0e21a":"book_train_stock_id_1[\"volume_imbalance\"] = (book_train_stock_id_1[\"bid_size1\"] +\\\nbook_train_stock_id_1[\"bid_size2\"]) - (book_train_stock_id_1[\"ask_size1\"]+\\\n                                       book_train_stock_id_1[\"ask_size2\"])","62cd3486":"book_train_stock_id_1[\"volume_imbalance\"] = 1 + book_train_stock_id_1[\"volume_imbalance\"].abs()","47ccdfb4":"\nbook_train_stock_id_1[\"log_volume_imbalance\"] = book_train_stock_id_1.groupby(\"time_id\")[\"volume_imbalance\"]\\\n.apply(log_return)","b148e350":"book_train_stock_id_1[\"bid_size\"] = book_train_stock_id_1.loc[:,\"bid_size1\"] + book_train_stock_id_1.loc[:,\"bid_size2\"]","eedb7b6c":"book_train_stock_id_1[\"ask_size\"] = book_train_stock_id_1.loc[:,\"ask_size1\"] + book_train_stock_id_1.loc[:,\"ask_size2\"]","14d942a0":"book_train_stock_id_1 = book_train_stock_id_1.loc[~((book_train_stock_id_1[\"log_return\"].isnull())|\\\n                                                  (book_train_stock_id_1[\"log_return1\"].isnull())|(\\\n                                                    book_train_stock_id_1[\"log_supply_demand\"].isnull())),:]","dee0f8be":"# book order for stock_id= 1 and time_id=5\nbook_train_stock_id_1_time_id_5 = book_train_stock_id_1.loc[book_train_stock_id_1[\"time_id\"]==5,:]","ebfe5352":"fig = px.line(data_frame=book_train_stock_id_1_time_id_5,x=\"seconds_in_bucket\",y=\"wap\",\\\n             title=\"WAP of stock_id_1,time_id_5\")\nfig.show()","396a0c24":"fig = px.line(data_frame=book_train_stock_id_1_time_id_5,x=\"seconds_in_bucket\",y=\"log_return\",\\\n             title =\"log return for stock_id_1,time_id_5\")\nfig.show()","5dd74c30":"fig = px.line(data_frame=book_train_stock_id_1_time_id_5,x=\"seconds_in_bucket\",y=\"wap1\",\\\n             title=\"WAP1 of stock_id_1,time_id_5\")\nfig.show()","b351fb27":"fig = px.line(data_frame=book_train_stock_id_1_time_id_5,x=\"seconds_in_bucket\",y=\"log_return1\",\\\n             title=\"log_return1 of stock_id_1,time_id_5\")\nfig.show()","8fbf655b":" create_feature_dict = {\n        'log_return':[realized_volatility],\n        'log_return1':[realized_volatility],\n        'log_squared_wap':[realized_volatility],\n        \"log_supply_demand\":[realized_volatility],\n        \"log_avg_wap\" :[realized_volatility],\n        \"supply_demand\":[np.mean],\n        \"diff_bid_price\":[np.mean],\n        \"diff_ask_price\":[np.mean],\n        \"log_diff_ask_price\":[realized_volatility],\n        \"log_diff_bid_price\" :[realized_volatility],\n        \"log_wap3\":[realized_volatility],\n        'wap_balance':[np.mean],\n        \"price_spread_1\" :[np.mean],\n        'price_spread':[np.mean],\n        \"price_spread_avg\":[np.mean],\n        \"price_spread_diff\":[np.mean],\n        'volume_imbalance':[np.mean],\n        'total_volume':[np.mean],\n        'wap':[np.mean],\n        \"log_wap_balance\":[realized_volatility],\n        \"log_price_spread\":[realized_volatility],\n        \"log_price_spread_1\":[realized_volatility],\n        \"log_price_spread_avg\":[realized_volatility],\n        \"log_price_spread_diff\":[realized_volatility],\n        \"log_volume_imbalance\":[realized_volatility],\n        \"bid_size\":[np.sum],\n        \"ask_size\":[np.sum]\n            }","4ca974f7":"book_features = book_train_stock_id_1.groupby(\"time_id\").agg(create_feature_dict).reset_index()","17973de0":"book_features.columns = [\"_\".join(col) for col in book_features]","776facdd":"book_features.rename(columns={\"time_id_\":\"time_id\"},inplace=True)","143b6120":"data_stock_id_1 = train.loc[train[\"stock_id\"]==1,:]","a52df9aa":"data_stock_id_1[\"row_id\"] = data_stock_id_1[\"stock_id\"].astype(\"str\").str.cat(data_stock_id_1\\\n                                                                             [\"time_id\"].astype(\"str\"),sep=\"-\")","8eb9c5cf":"book_features[\"stock_id\"] = 1\nbook_features[\"row_id\"] = book_features[\"stock_id\"].astype(\"str\").str.cat(book_features[\"time_id\"]\\\n                                                                         .astype(\"str\"),sep=\"-\")","7766306e":"data_stock_id_1 = data_stock_id_1.merge(book_features,how=\"left\",on=\"row_id\")","d919f4bb":"data_stock_id_1.rename(columns={\"stock_id_x\":\"stock_id\",\"time_id_x\":\"time_id\"},inplace=True)","f3aaf97a":"del(data_stock_id_1[\"time_id_y\"])\ndel(data_stock_id_1[\"stock_id_y\"])","df0c4d71":"data_stock_id_1.rename(columns={\"log_return_realized_volatility\":\"realized_volatility\",\\\n                               \"log_return1_realized_volatility\":\"realized1_volatility\",\\\n                               \"log_squared_wap_realized_volatility\":\"realized_squared_volatility\",\\\n                               \"log_supply_demand_realized_volatility\":\"supply_demand_volatilty\",\\\n                               \"log_diff_ask_price_realized_volatility\":\"realized_diff_ask_price\",\\\n                               \"log_diff_bid_price_realized_volatility\":\"realized_diff_bid_price\"},\\\n                      inplace=True)","99252183":"data_stock_id_1 = data_stock_id_1[[\"stock_id\",\"time_id\",\"target\",\"realized_volatility\",\"realized1_volatility\",\\\n                                 'realized_squared_volatility','supply_demand_volatilty','log_avg_wap_realized_volatility',\\\n                                 'supply_demand_mean','diff_bid_price_mean','diff_ask_price_mean','realized_diff_ask_price',\\\n                                 'realized_diff_bid_price','log_wap3_realized_volatility','wap_balance_mean','price_spread_1_mean',\\\n                                  'price_spread_mean','price_spread_avg_mean','price_spread_diff_mean','volume_imbalance_mean',\\\n                                   'total_volume_mean','wap_mean','log_wap_balance_realized_volatility',\n       'log_price_spread_realized_volatility',\n       'log_price_spread_1_realized_volatility',\n       'log_price_spread_avg_realized_volatility',\n       'log_price_spread_diff_realized_volatility',\n       'log_volume_imbalance_realized_volatility', 'bid_size_sum',\n       'ask_size_sum']]","eca1df99":"data_stock_id_1.rename(columns={\"realized_volatility\":\"realized_t\",\"realized1_volatility\":\"realized1_t\"},inplace=True)","4055afc9":"for i in range(1,6) :\n    data_stock_id_1[f\"realized_t_{i}\"] = data_stock_id_1[\"realized_t\"].shift(i)","86294ad5":"data_stock_id_1 = data_stock_id_1.reset_index(drop=True)","b4c250b8":"missing_realized_t_1 = np.where(data_stock_id_1[\"realized_t_1\"].isna())[0]\nmissing_realized_t_2 = np.where(data_stock_id_1[\"realized_t_2\"].isna())[0]\nmissing_realized_t_3 = np.where(data_stock_id_1[\"realized_t_3\"].isna())[0]\nmissing_realized_t_4 = np.where(data_stock_id_1[\"realized_t_4\"].isna())[0]\nmissing_realized_t_5 = np.where(data_stock_id_1[\"realized_t_5\"].isna())[0]\nfor i in missing_realized_t_1 : \n    data_stock_id_1.loc[i,\"realized_t_1\"] = data_stock_id_1.loc[i,\"realized_t\"]\nfor i in missing_realized_t_2 : \n    data_stock_id_1.loc[i,\"realized_t_2\"] = data_stock_id_1.loc[i,\"realized_t_1\"]\nfor i in missing_realized_t_3 : \n    data_stock_id_1.loc[i,\"realized_t_3\"] = data_stock_id_1.loc[i,\"realized_t_2\"]\nfor i in missing_realized_t_4 : \n    data_stock_id_1.loc[i,\"realized_t_4\"] = data_stock_id_1.loc[i,\"realized_t_3\"]\nfor i in missing_realized_t_5 : \n    data_stock_id_1.loc[i,\"realized_t_5\"] = data_stock_id_1.loc[i,\"realized_t_4\"]","246351d0":"fix,axes = plt.subplots(3,2,figsize=(15,20))\nfor i in range(6) :\n    if i != 0 :\n       sns.lineplot(data_stock_id_1.loc[:,f\"realized_t_{i}\"].values,data_stock_id_1.loc[:,\"target\"].\\\n                 values,ax=axes[i\/\/2,i%2])\n       axes[i\/\/2,i%2].set_xlabel(f\"realized_t_{i}\",size=15)\n       axes[i\/\/2,i%2].set_ylabel(\"target\",size=15)\n       axes[i\/\/2,i%2].set_title(f\"target=f(realized_t_{i})\",size=15,color=\"green\")\n       axes[i\/\/2,i%2].set_xlim([0,0.04])\n    else : \n       sns.lineplot(data_stock_id_1.loc[:,\"realized_t\"].values,data_stock_id_1.loc[:,\"target\"].\\\n                 values,ax=axes[i\/\/2,i%2])\n       axes[i\/\/2,i%2].set_xlabel(\"realized_t\",size=15)\n       axes[i\/\/2,i%2].set_ylabel(\"target\",size=15)\n       axes[i\/\/2,i%2].set_xlim([0,0.04])\n       axes[i\/\/2,i%2].set_title(\"target=f(realized_t)\",size=15,color=\"green\")","4e40a38a":"table_correlation = pd.DataFrame({f\"realized_t_{i}\":data_stock_id_1[\"target\"].\\\n                                  corr(data_stock_id_1[f\"realized_t_{i}\"]) for i in range(1,6)},index=[\"target\"])","82cd71cd":"table_correlation[\"realized_t\"] = data_stock_id_1[\"target\"].corr(data_stock_id_1[\"realized_t\"])","05f91fe4":"fig, ax = plt.subplots(1,1,figsize=(15,5))\nsns.heatmap(table_correlation,annot=True,square=True)","ef1a1ad2":"for i in range(5) :\n    if i == 0 : \n       data_stock_id_1[\"diff_t\"] = data_stock_id_1[\"realized_t\"] - data_stock_id_1[f\"realized_t_{i+1}\"]\n    else :\n        data_stock_id_1[f\"diff_t_{i}\"] = data_stock_id_1[f\"realized_t_{i}\"] - data_stock_id_1[f\"realized_t_{i+1}\"]","9c0d394c":"fig,ax = plt.subplots(5,1,figsize=(10,30))\nfor i in range(5) :\n    if i == 0 : \n       sns.lineplot(data_stock_id_1[\"diff_t\"],data_stock_id_1[\"target\"],ax=ax[i])\n    else :\n       sns.lineplot(data_stock_id_1[f\"diff_t_{i}\"],data_stock_id_1[\"target\"],ax=ax[i])\n    ax[i].set_title(f\"target = f('diff_t_{i}')\",size=15,color=\"green\")","244e477a":"table_correlation = pd.DataFrame({f\"diff_t_{i}\":data_stock_id_1[\"target\"].\\\n                                  corr(data_stock_id_1[f\"diff_t_{i}\"]) for i in range(1,5)},index=[\"target\"])\ntable_correlation[\"diff_t\"] = data_stock_id_1[\"target\"].corr(data_stock_id_1[\"diff_t\"])","3bd035ad":"fig, ax = plt.subplots(1,1,figsize=(15,5))\nsns.heatmap(table_correlation,annot=True,square=True)","2fd2d4a9":"# study quadratic relation between realized_t_i features for i in {1,2,3,4,5} and target feature.\nfor i in range(1,6):\n    data_stock_id_1[f\"realized_t_{i}^2\"] = data_stock_id_1[f\"realized_t_{i}\"] ** 2","aa3a96df":"fig,ax = plt.subplots(5,1,figsize=(10,30))\nfor i in range(1,6) :\n    sns.lineplot(data_stock_id_1[f\"realized_t_{i}^2\"],data_stock_id_1[\"target\"],ax=ax[i-1])\n    ax[i-1].set_title(f\"Target = f(realized_t_{i}^2)\",size=15,color=\"green\")","bb3e524d":"table_correlation = pd.DataFrame({f\"realized_t_{i}^2\": data_stock_id_1[\"target\"].corr(data_stock_id_1[f\"realized_t_{i}^2\"])\\\n                                                                                      for i in range(1,6)},index=[\"target\"])","d2be7e36":"fig = plt.figure(figsize=(15,5))\nsns.heatmap(table_correlation,annot=True,square=True)","6ad80538":"# Study correlation between target feature and diff_t_i features for i in {1,2,3,4}.\nfor i in range(1,5) : \n    data_stock_id_1[f\"diff_t_{i}^2\"] = data_stock_id_1[f\"diff_t_{i}\"] ** 2","8bdf2c4e":"fig,ax = plt.subplots(4,1,figsize=(10,30))\nfor i in range(1,5) :\n    sns.lineplot(data_stock_id_1[f\"diff_t_{i}^2\"],data_stock_id_1[\"target\"],ax=ax[i-1])\n    ax[i-1].set_title(f\"target=f(diff_t_{i}^2)\",size=15,color=\"green\")","857983b0":"table_correlation = pd.DataFrame({f\"diff_t_{i}^2\":data_stock_id_1[f\"diff_t_{i}^2\"].\\\n                                  corr(data_stock_id_1[\"target\"])for i in range(1,5)},index=\\\n                                [\"target\"])","d34d8405":"fig = plt.figure(figsize=(15,5))\nsns.heatmap(table_correlation,annot=True,square=True)","dc8eda72":"# Let's study correlation between the quadratic of realized_t feature, the quadratic of \n# diff_t feature and the target feature.\ndata_stock_id_1[\"realized_t^2\"] = data_stock_id_1[\"realized_t\"] ** 2\ndata_stock_id_1[\"diff_t^2\"] = data_stock_id_1[\"diff_t\"] ** 2","6ccafeba":"fig,ax = plt.subplots(1,2,figsize=(20,5))\n\nsns.lineplot(data_stock_id_1[\"realized_t^2\"],data_stock_id_1[\"target\"],ax=ax[0])\nax[0].set_title(\"target=f(realized_t^2)\",size=15,color=\"green\")\nsns.lineplot(data_stock_id_1[\"diff_t^2\"],data_stock_id_1[\"target\"],ax=ax[1])\nax[1].set_title(\"target=f(diff_t^2)\",size=15,color=\"green\")","a25761c5":"table_correlation = pd.DataFrame({\"realized_t^2\":data_stock_id_1[\"realized_t^2\"].\\\n                                  corr(data_stock_id_1[\"target\"]),\"diff_t^2\":data_stock_id_1[\"diff_t^2\"].corr(data_stock_id_1[\"target\"])},\\\n                                index=[\"target\"])","10938d73":"fig = plt.figure(figsize=(50,2))\nsns.heatmap(table_correlation,annot=True,square=True)","ca883e78":"for i in range(1,6):\n    data_stock_id_1[f\"realized1_t_{i}\"] = data_stock_id_1[\"realized1_t\"].shift(i)","ce1ae872":"missing_realized1_t_1 = np.where(data_stock_id_1[\"realized1_t_1\"].isna())[0]\nmissing_realized1_t_2 = np.where(data_stock_id_1[\"realized1_t_2\"].isna())[0]\nmissing_realized1_t_3 = np.where(data_stock_id_1[\"realized1_t_3\"].isna())[0]\nmissing_realized1_t_4 = np.where(data_stock_id_1[\"realized1_t_4\"].isna())[0]\nmissing_realized1_t_5 = np.where(data_stock_id_1[\"realized1_t_5\"].isna())[0]\nfor i in missing_realized_t_1 : \n    data_stock_id_1.loc[i,\"realized1_t_1\"] = data_stock_id_1.loc[i,\"realized1_t\"]\nfor i in missing_realized_t_2 : \n    data_stock_id_1.loc[i,\"realized1_t_2\"] = data_stock_id_1.loc[i,\"realized1_t_1\"]\nfor i in missing_realized_t_3 : \n    data_stock_id_1.loc[i,\"realized1_t_3\"] = data_stock_id_1.loc[i,\"realized1_t_2\"]\nfor i in missing_realized_t_4 : \n    data_stock_id_1.loc[i,\"realized1_t_4\"] = data_stock_id_1.loc[i,\"realized1_t_3\"]\nfor i in missing_realized_t_5 : \n    data_stock_id_1.loc[i,\"realized1_t_5\"] = data_stock_id_1.loc[i,\"realized1_t_4\"]","dff7cd30":"fix,axes = plt.subplots(3,2,figsize=(15,20))\nfor i in range(6) :\n    if i != 0 :\n       sns.lineplot(data_stock_id_1.loc[:,f\"realized1_t_{i}\"].values,data_stock_id_1.loc[:,\"target\"].\\\n                 values,ax=axes[i\/\/2,i%2])\n       axes[i\/\/2,i%2].set_xlabel(f\"realized1_t_{i}\",size=15)\n       axes[i\/\/2,i%2].set_ylabel(\"target\",size=15)\n       axes[i\/\/2,i%2].set_title(f\"target=f(realized1_t_{i})\",size=15,color=\"green\")\n       axes[i\/\/2,i%2].set_xlim([0,0.04])\n    else : \n       sns.lineplot(data_stock_id_1.loc[:,\"realized1_t\"].values,data_stock_id_1.loc[:,\"target\"].\\\n                 values,ax=axes[i\/\/2,i%2])\n       axes[i\/\/2,i%2].set_xlabel(\"realized1_t\",size=15)\n       axes[i\/\/2,i%2].set_ylabel(\"target\",size=15)\n       axes[i\/\/2,i%2].set_xlim([0,0.04])\n       axes[i\/\/2,i%2].set_title(\"target=f(realized1_t)\",size=15,color=\"green\")","ab1c56e0":"table_correlation = pd.DataFrame({f\"realized1_t_{i}\":data_stock_id_1[\"target\"].\\\n                                  corr(data_stock_id_1[f\"realized1_t_{i}\"]) for i in range(1,6)},index=[\"target\"])\ntable_correlation[\"realized1_t\"] = data_stock_id_1[\"target\"].corr(data_stock_id_1[\"realized1_t\"])","40abb59f":"fig, ax = plt.subplots(1,1,figsize=(15,5))\nsns.heatmap(table_correlation,annot=True,square=True)","7986ccf0":"data_stock_id_1.loc[:,\"diff1_t\"] = data_stock_id_1.loc[:,\"realized1_t\"] - data_stock_id_1.loc[:,\"realized1_t_1\"]\ndata_stock_id_1.loc[:,\"realized1_t^2\"] = data_stock_id_1.loc[:,\"realized1_t\"] ** 2\ndata_stock_id_1.loc[:,\"diff1_t^2\"] = data_stock_id_1.loc[:,\"diff1_t\"] ** 2","733551dc":"features = [\"diff1_t\",\"realized1_t^2\",\"diff1_t^2\"]\nfig,ax = plt.subplots(3,1,figsize=(15,20))\nfor i in range(3) :\n    sns.lineplot(data_stock_id_1.loc[:,f\"{features[i]}\"].values,data_stock_id_1.loc[:,\"target\"].values,\\\n                ax=ax[i])\n    ax[i].set_title(f\"taget=f({features[i]})\",size=15,color=\"green\")","7a518656":"table_correlation = pd.DataFrame({features[i]:data_stock_id_1[\"target\"].corr(data_stock_id_1[features[i]])\\\n                                 for i in range(3)},index=[\"target\"])","4c5a6edf":"fig = plt.figure(figsize=(35,2))\nsns.heatmap(table_correlation,annot=True,square=True)","5f85a190":"data_stock_id_1[\"supply_demand_1\"] = data_stock_id_1[\"supply_demand_volatilty\"].shift(1)","a7ecf784":"ind = np.where(data_stock_id_1[\"supply_demand_1\"].isna())[0]\nfor i in ind :\n    data_stock_id_1.loc[i,\"supply_demand_1\"] = data_stock_id_1.loc[i,\"supply_demand_volatilty\"]","1312ae9e":"data_stock_id_1[\"diff_supply_demand\"] = data_stock_id_1[\"supply_demand_volatilty\"]-data_stock_id_1[\\\n                                                                                                  \"supply_demand_1\"]","2b61f18c":"supply_features = [\"supply_demand_volatilty\",\"supply_demand_1\",\"diff_supply_demand\",\\\n                   \"supply_demand_mean\"]","97081032":"table_correlation = pd.DataFrame({f:data_stock_id_1[f].corr(data_stock_id_1[\"target\"]) for \\\n                                 f in supply_features},index=[\"target\"])","cad10c8d":"sns.heatmap(table_correlation,annot=True,square=True)","86a49753":"others_features = [\"realized_squared_volatility\",\"realized_diff_bid_price\",\"realized_diff_ask_price\",\\\n                  \"diff_bid_price_mean\",\"diff_ask_price_mean\",'log_wap3_realized_volatility','wap_balance_mean',\\\n                  'price_spread_mean','volume_imbalance_mean','total_volume_mean','wap_mean',\\\n                  'log_avg_wap_realized_volatility','price_spread_1_mean','price_spread_avg_mean',\\\n                   'price_spread_diff_mean','log_wap_balance_realized_volatility',\n       'log_price_spread_realized_volatility',\n       'log_price_spread_1_realized_volatility',\n       'log_price_spread_avg_realized_volatility',\n       'log_price_spread_diff_realized_volatility',\n       'log_volume_imbalance_realized_volatility', 'bid_size_sum',\n       'ask_size_sum']\ntable_correlation = pd.DataFrame({f:data_stock_id_1[f].corr(data_stock_id_1[\"target\"]) for f in others_features},\\\n                                index=[\"target\"])","a0549d7a":"fig = plt.figure(figsize=(25,10))\nsns.heatmap(table_correlation,annot=True,square=True)","29a4eec9":"trade_train_stock_id_1[\"log_price\"] = trade_train_stock_id_1.groupby(\"time_id\")[\"price\"].\\\napply(log_return)","6f557077":"trade_train_stock_id_1[\"size_order\"] = trade_train_stock_id_1[\"size\"]\/trade_train_stock_id_1[\"order_count\"]\n","e1d51123":"trade_train_stock_id_1 = trade_train_stock_id_1.loc[~(trade_train_stock_id_1.loc[:,\"log_price\"].isnull())]","8702cb58":"aggregate_dictionary={\n    \"price\" : [np.mean],\n    \"log_price\" : [realized_volatility],\n    \"size_order\" : [np.mean],\n    \"size\" : [np.mean,np.sum,np.std],\n    \"order_count\" : [np.sum],\n    \"seconds_in_bucket\":[count_unique],\n    \"order_count\":[np.sum,np.std,np.mean]\n}","f168b471":"stock_features = trade_train_stock_id_1.groupby(\"time_id\").agg(aggregate_dictionary).reset_index()","628d899b":"stock_features.columns = [\"_\".join(col) for col in stock_features]","56c3d444":"stock_features.rename(columns={\"log_price_realized_volatility\":\"vol_price\"},inplace=True)","21550561":"stock_features.rename(columns={\"time_id_\":\"time_id\"},inplace=True)","50654880":"data_stock_id_1 = data_stock_id_1.merge(stock_features,how=\"left\",on=\"time_id\")","e6a52056":"data_stock_id_1[\"vol_price_1\"] = data_stock_id_1[\"vol_price\"].shift()","cb4ad8ce":"indices = np.where(data_stock_id_1[\"vol_price_1\"].isna())[0]\n\nfor i in indices :\n    data_stock_id_1.loc[i,\"vol_price_1\"] =  data_stock_id_1.loc[i,\"vol_price\"] ","fac6471d":"data_stock_id_1[\"diff_price\"] = data_stock_id_1[\"vol_price_1\"] - data_stock_id_1[\"vol_price\"]","c087d045":"data_stock_id_1[\"vol_price^2\"] = data_stock_id_1[\"vol_price\"] ** 2","d8c207d4":"data_stock_id_1[\"balance_wap_price\"] = abs(data_stock_id_1[\"price_mean\"]- \\\n                                           data_stock_id_1[\"wap_mean\"])","325cc0f2":"data_stock_id_1[\"rapp_price\"] = (data_stock_id_1[\"price_mean\"]+1)\/(data_stock_id_1[\"wap_mean\"]+1)","10fbeea7":"data_stock_id_1[\"shares_vs_bid\"] = data_stock_id_1[\"size_sum\"] - data_stock_id_1[\"bid_size_sum\"]","7b62b2db":"data_stock_id_1[\"shares_vs_ask\"] = data_stock_id_1[\"size_sum\"] - data_stock_id_1[\"ask_size_sum\"]","e60ce5f2":"f = list(stock_features.columns[1:]) + [\"vol_price_1\",\"diff_price\",\"vol_price^2\",\\\n                                        \"balance_wap_price\",\"rapp_price\",\"shares_vs_bid\",\\\n                                       \"shares_vs_ask\"]","f82e6f11":"fig,ax = plt.subplots(math.ceil(len(f)\/2),2,figsize=(15,45))\nfor i in range(len(f)) :\n    sns.lineplot(data_stock_id_1[f[i]],data_stock_id_1[\"target\"],ax=ax[i\/\/2,i%2])\n    ax[i\/\/2,i%2].set_title(f\"target=f({f[i]})\",size=15,color=\"green\")","b134255f":"table_correlation = pd.DataFrame({f[i]:data_stock_id_1[f[i]].corr(data_stock_id_1[\"target\"]) for i in range(len(f))},\\\n                                index=[\"target\"])","1687afb0":"fig = plt.figure(figsize=(15,2))\nsns.heatmap(table_correlation,annot=True,square=True)\nplt.show()","2a1ebc4a":"def preprocessing_stock_id_time_id(st_file):\n    book_train_stock_id = pd.read_parquet(st_file)\n    stock_id = st_file.split(\"=\")[1]\n    book_train_stock_id[\"stock_id\"] = stock_id \n    book_train_stock_id[\"wap\"] = (book_train_stock_id['bid_price1'] * book_train_stock_id['ask_size1']+book_train_stock_id['ask_price1'] * book_train_stock_id['bid_size1'])  \/ (\n                                      book_train_stock_id['bid_size1']+ book_train_stock_id[\n                                  'ask_size1'])\n    book_train_stock_id[\"wap1\"] = (book_train_stock_id['bid_price2'] * book_train_stock_id['ask_size2']+book_train_stock_id['ask_price2'] * book_train_stock_id['bid_size2'])  \/ (\n                                      book_train_stock_id['bid_size2']+ book_train_stock_id[\n                                  'ask_size2'])\n    book_train_stock_id[\"supply_demand\"] = (book_train_stock_id[\"ask_size1\"]+book_train_stock_id[\"ask_size2\"])\/(book_train_stock_id[\"bid_size1\"]+book_train_stock_id[\"bid_size2\"])\n    book_train_stock_id[\"squared_wap\"] = book_train_stock_id[\"wap\"] ** 2\n    book_train_stock_id[\"squared_wap_1\"] = book_train_stock_id[\"wap1\"] ** 2\n    \n    book_train_stock_id[\"log_supply_demand\"] = book_train_stock_id.groupby(\"time_id\")[\"supply_demand\"].apply(log_return)\n    book_train_stock_id[\"log_return\"] = book_train_stock_id.groupby(\"time_id\")[\"wap\"].apply(log_return)\n    book_train_stock_id[\"log_return1\"] = book_train_stock_id.groupby(\"time_id\")[\"wap1\"].apply(log_return)\n    book_train_stock_id[\"log_squared_wap\"] = book_train_stock_id.groupby(\"time_id\")[\"squared_wap\"].apply(log_return)\n    book_train_stock_id[\"log_squared_wap_1\"] = book_train_stock_id.groupby(\"time_id\")[\"squared_wap_1\"].apply(log_return)\n    \n    book_train_stock_id[\"diff_bid_price\"] = book_train_stock_id[\"bid_price1\"] - book_train_stock_id[\"bid_price2\"]\n    book_train_stock_id[\"diff_ask_price\"] = book_train_stock_id[\"ask_price2\"] - book_train_stock_id[\"ask_price1\"]\n    \n    book_train_stock_id[\"log_diff_bid_price\"] = book_train_stock_id.groupby(\"time_id\")[\"diff_bid_price\"].apply(log_return)\n    book_train_stock_id[\"log_diff_ask_price\"] = book_train_stock_id.groupby(\"time_id\")[\"diff_ask_price\"].apply(log_return)\n    \n    \n    book_train_stock_id[\"wap3\"] =  (book_train_stock_id['bid_price1'] * book_train_stock_id['bid_size1']+book_train_stock_id['ask_price1'] * book_train_stock_id['ask_size1'])  \/ (\n                                      book_train_stock_id['ask_size1']+ book_train_stock_id[\n                                  'bid_size1'])\n    book_train_stock_id[\"log_wap3\"] = book_train_stock_id.groupby(\"time_id\")[\"wap3\"].apply(log_return)\n    \n    \n    book_train_stock_id[\"wap_balance\"] = abs(book_train_stock_id[\"wap\"] - book_train_stock_id[\"wap1\"])\n    book_train_stock_id[\"price_spread\"] = book_train_stock_id[\"ask_price1\"] - book_train_stock_id[\"bid_price1\"]\n    book_train_stock_id[\"price_spread_1\"] = book_train_stock_id[\"ask_price2\"] - \\\nbook_train_stock_id_1[\"bid_price2\"]\n    book_train_stock_id[\"total_volume\"] = book_train_stock_id[\"ask_size1\"]+\\\nbook_train_stock_id[\"bid_size1\"] + book_train_stock_id[\"ask_size2\"] +\\\nbook_train_stock_id[\"bid_size2\"]\n    \n    book_train_stock_id.loc[:,\"avg_wap\"] = book_train_stock_id.loc[:,\"wap\"] + \\\nbook_train_stock_id.loc[:,\"wap1\"]\/2\n    book_train_stock_id[\"log_avg_wap\"] = book_train_stock_id.groupby(\"time_id\")[\"avg_wap\"].apply(log_return)\n    book_train_stock_id[\"price_spread_avg\"] = book_train_stock_id[\"price_spread\"] + \\\nbook_train_stock_id[\"price_spread_1\"] \/2\n    book_train_stock_id[\"price_spread_diff\"] = book_train_stock_id[\"price_spread_1\"] - \\\nbook_train_stock_id[\"price_spread\"]\n    \n    book_train_stock_id[\"wap_balance\"] = abs(book_train_stock_id[\"wap\"]-\\\n                                           book_train_stock_id[\"wap1\"])+1\n    \n    book_train_stock_id[\"log_wap_balance\"] = book_train_stock_id.groupby(\"time_id\")[\"wap_balance\"]\\\n.apply(log_return)\n    book_train_stock_id[\"log_price_spread\"] = book_train_stock_id.groupby(\"time_id\")[\"price_spread\"]\\\n.apply(log_return)\n    book_train_stock_id[\"log_price_spread_1\"] = book_train_stock_id.groupby(\"time_id\")[\"price_spread_1\"].\\\napply(log_return)\n    book_train_stock_id[\"log_avg_wap\"] = book_train_stock_id.groupby(\"time_id\")[\"avg_wap\"].apply(log_return)\n    book_train_stock_id[\"log_price_spread_avg\"] = book_train_stock_id.groupby(\"time_id\")[\"price_spread_avg\"].\\\n    apply(log_return)\n    book_train_stock_id[\"log_price_spread_diff\"] = book_train_stock_id.groupby(\"time_id\")[\"price_spread_diff\"].\\\napply(log_return)\n    book_train_stock_id[\"volume_imbalance\"] = (book_train_stock_id[\"bid_size1\"] +\\\nbook_train_stock_id[\"bid_size2\"]) - (book_train_stock_id[\"ask_size1\"]+\\\n                                       book_train_stock_id[\"ask_size2\"])\n    book_train_stock_id[\"volume_imbalance\"] = 1 + book_train_stock_id[\"volume_imbalance\"].abs()\n    book_train_stock_id[\"log_volume_imbalance\"] = book_train_stock_id.groupby(\"time_id\")[\"volume_imbalance\"]\\\n.apply(log_return)\n    book_train_stock_id[\"bid_size\"] = book_train_stock_id[\"bid_size1\"] + book_train_stock_id[\"bid_size2\"]\n    book_train_stock_id[\"ask_size\"] = book_train_stock_id[\"ask_size1\"] + book_train_stock_id[\"ask_size2\"]\n    book_train_stock_id = book_train_stock_id.loc[~((book_train_stock_id[\"log_return\"].isnull())|\\\n                                                  (book_train_stock_id[\"log_return1\"].isnull())|(\\\n                                                    book_train_stock_id[\"log_supply_demand\"].isnull())),:]\n    \n    create_feature_dict = { 'log_return':[realized_volatility],\n        'log_return1':[realized_volatility],\n        'log_squared_wap':[realized_volatility],\n        'log_squared_wap_1':[realized_volatility],                \n        \"log_supply_demand\":[realized_volatility],\n        \"diff_bid_price\":[np.mean],\n        \"diff_ask_price\":[np.mean],\n        \"log_diff_ask_price\":[realized_volatility],\n        \"log_diff_bid_price\" :[realized_volatility],\n        \"log_wap3\":[realized_volatility],\n        'wap_balance':[np.mean],\n        'price_spread':[np.mean],\n        #'volume_imbalance':[np.mean],\n        'total_volume':[np.mean],\n        'wap':[np.mean],\n        \"log_avg_wap\" :[realized_volatility],\n        \"price_spread_1\":[np.mean],\n        \"price_spread_avg\":[np.mean],\n        \"price_spread_diff\":[np.mean],\n        \"log_wap_balance\":[realized_volatility],\n        \"log_price_spread\":[realized_volatility],\n        \"log_price_spread_1\":[realized_volatility],\n        \"log_price_spread_avg\":[realized_volatility],\n        \"log_price_spread_diff\":[realized_volatility],\n        \"log_volume_imbalance\":[realized_volatility],\n        \"bid_size\":[np.sum],\n        \"ask_size\":[np.sum]\n    }\n    book_features = book_train_stock_id.groupby(\"time_id\").agg( create_feature_dict).reset_index()\n    book_features.columns = [\"_\".join(col) for col in book_features]\n    book_features.rename(columns={\"time_id_\":\"time_id\"},inplace=True)\n    \n    book_features.rename(columns={\"log_return_realized_volatility\":\"realized_volatility\",\\\n                               \"log_return1_realized_volatility\":\"realized_volatility1\",\\\n                               \"log_squared_wap_realized_volatility\":\"squared_wap_vol\",\\\n                               \"log_supply_demand_realized_volatility\":\"realized_supply_demand\",\\\n                               \"log_diff_ask_price_realized_volatility\":\"realized_ask_price\",\\\n                               \"log_diff_bid_price_realized_volatility\":\"realized_bid_price\",\\\n                                \"log_squared_wap_1_realized_volatility\":\"squared_wap1_vol\",\\\n                                \"log_wap_balance\":[realized_volatility]},inplace=True)\n    book_features[\"row_id\"] = book_features[\"time_id\"].map(lambda x :f\"{stock_id}-{x}\")\n        \n    return book_features","d6c7ad86":"def preprocessing_all_files (all_files):\n    df = pd.DataFrame()\n    \n    for file in all_files :\n        df= pd.concat([df,preprocessing_stock_id_time_id(file)])\n        #dff = pd.concat([dff,preprocessing_stock_id_time_id(file)[1]])\n    return df ","c0e35ea9":"all_files = glob.glob(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*\")","b98fa227":"data_train_episodes = preprocessing_all_files(all_files)","30b19266":"def preprocessing_trade_stock_time_id(file):\n    trade_id = pd.read_parquet(file)\n    trade_id[\"log_price\"] = trade_id.groupby(\"time_id\")[\"price\"].apply(log_return)\n    trade_id = trade_id.loc[~(trade_id.loc[:,\"log_price\"].isnull()),:]\n    trade_id[\"size_order\"] = trade_id[\"size\"]\/trade_id[\"order_count\"]\n    aggregate_dictionary={\n    \"price\" : [np.mean],\n    \"log_price\" : [realized_volatility],\n    \"size_order\" : [np.mean],\n    \"size\" : [np.mean,np.sum,np.std],\n    \"order_count\" : [np.sum],\n    \"seconds_in_bucket\":[count_unique],\n    \"order_count\":[np.sum,np.std,np.mean]\n    }\n    df = trade_id.groupby(\"time_id\").agg(aggregate_dictionary)\n    df = df.reset_index(drop=False)\n    df.columns = [\"_\".join(col) for col in df]\n    df.rename(columns={\"log_price_realized_volatility\":\"vol_price\"},inplace=True)\n    df.rename(columns={\"time_id_\":\"time_id\"},inplace=True)\n    \n    df[\"stock_id\"] = file.split(\"=\")[1]\n    df[\"row_id\"] = df[\"time_id\"].apply(lambda x : f\"{file.split('=')[1]}-{x}\")\n    \n    return df\n    ","d213b30f":"def preprocessing_trade_all_file(files):\n    df = pd.DataFrame()\n    for f in files :\n        df = pd.concat([df,preprocessing_trade_stock_time_id(f)])\n    return df ","1b35808e":"files = glob.glob(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/*\")","38fd0eab":"trade_stock = preprocessing_trade_all_file(files)","2eaa4f6a":"def merge_and_create_feature_engineering(labeled_df,data_episodes):\n    \n    labeled_df[\"row_id\"] = labeled_df[\"stock_id\"].astype(str).str.cat(labeled_df[\"time_id\"].\\\n                                                                     astype(str),sep=\"-\")\n    del(labeled_df[\"time_id\"])\n    #del(labeled_df[\"stock_id\"])\n    comb_data = labeled_df.merge(data_episodes,on=\"row_id\",how=\"left\")\n    comb_data.rename(columns={\"realized_volatility\":\"realized_t\"},inplace=True)\n    comb_data[\"realized_t_1\"] = comb_data.groupby(\"stock_id\")[\"realized_t\"].shift(1)\n    index = np.where(comb_data[\"realized_t_1\"].isna())[0]\n    for i in index :\n        comb_data.loc[i,\"realized_t_1\"] = comb_data.loc[i,\"realized_t\"]\n    comb_data.loc[:,\"diff_t\"] = comb_data.loc[:,\"realized_t\"] - comb_data.loc[:,\"realized_t_1\"]\n    comb_data.drop(\"realized_t_1\",axis=1,inplace=True)\n    comb_data.loc[:,\"diff_t^2\"] = comb_data.loc[:,\"diff_t\"] ** 2\n    comb_data.loc[:,\"realized_t^2\"] = comb_data.loc[:,\"realized_t\"] ** 2\n   \n    return comb_data","0b199f05":"train = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")","ead90180":"train_df = merge_and_create_feature_engineering(train,data_train_episodes)","8ec59be7":"def merge_and_create_feature_engineering_for_second_level(labeled_df):\n    #labeled_df[\"row_id\"] = labeled_df[\"stock_id\"].astype(str).str.cat(labeled_df[\"time_id\"].\\\n                                                                     #astype(str),sep=\"-\")\n    #comb_data = labeled_df.merge(data_episodes,on=\"row_id\",how=\"right\")\n    comb_data = labeled_df\n    comb_data.rename(columns={\"realized_volatility1\":\"realized1_t\"},inplace=True)\n    comb_data[\"realized1_t_1\"] = comb_data.groupby(\"stock_id\")[\"realized1_t\"].shift(1)\n    index = np.where(comb_data[\"realized1_t_1\"].isna())[0]\n    for i in index :\n        comb_data.loc[i,\"realized1_t_1\"] = comb_data.loc[i,\"realized1_t\"]\n    comb_data.loc[:,\"diff1_t\"] = comb_data.loc[:,\"realized1_t\"] - comb_data.loc[:,\"realized1_t_1\"]\n    comb_data.drop(\"realized1_t_1\",axis=1,inplace=True)\n    comb_data.loc[:,\"diff1_t^2\"] = comb_data.loc[:,\"diff1_t\"] ** 2\n    comb_data.loc[:,\"realized1_t^2\"] = comb_data.loc[:,\"realized1_t\"] ** 2\n    return comb_data","55c5081b":"train_df = merge_and_create_feature_engineering_for_second_level(train_df)","4f54b0a2":"train_df = train_df.merge(trade_stock,how=\"inner\",on=\"row_id\")","b677d9d9":"train_df[\"vol_price^2\"] = train_df[\"vol_price\"] ** 2","aabe74b4":"del(train_df['stock_id_y'])\ndel(train_df['time_id_y'])","fd7de5c9":"train_df.rename(columns={\"stock_id_x\":\"stock_id\",\"time_id_x\":\"time_id\"},inplace=True)","b1b3f059":"train_df[\"vol_price_1\"] = train_df.groupby(\"stock_id\")[\"vol_price\"].shift(1)\nind = np.where(train_df[\"vol_price_1\"].isna())[0]\nfor i in ind :\n    train_df.loc[i,\"vol_price_1\"] = train_df.loc[i,\"vol_price\"]","fd5145ee":"train_df[\"diff_price\"] = train_df[\"vol_price\"] - train_df[\"vol_price_1\"]\ndel(train_df[\"vol_price_1\"])","42f9efeb":"train_df[\"balance_wap_price\"] = abs(train_df[\"price_mean\"]- \\\n                                           train_df[\"wap_mean\"])","82c5c5ca":"train_df.columns","487ba643":"#retained_features = [\"stock_id\",\"realized_t\",\"diff_t\",\"realized_t^2\",\"diff_t^2\",\"realized1_t\",\\\n                    #\"diff1_t\",\"diff1_t^2\",\"realized1_t^2\",'realized_supply_demand','squared_wap_vol',\\\n                     #'squared_wap1_vol',\"vol_price\",\"vol_price^2\",\"diff_price\",\"realized_bid_price\",\"realized_ask_price\"]\nretained_features = [f for f in train_df.columns if f not in (\"target\",\"row_id\",\"time_id\")]","3122da13":"skf = StratifiedKFold(n_splits=5,shuffle=True,random_state=42)","c5fcc818":"def create_lgbm_model(X_train,Y_train,X_val,Y_val):\n    #gbm = lgbm.LGBMRegressor(objective=\"mse\",random_state=33,early_stopping_round= 100,n_estimators=10000)\n    #gbm.set_params(**{'objective':custom_loss})\n    #gbm.fit(X_train,Y_train,eval_set=[(X_val,Y_val)],eval_metric=\"mse\",verbose=10)\n    #gbm_eval = gbm.evals_result_\n    params_lgbm = {\n        'task': 'train',\n        'boosting_type': 'gbdt',\n        'learning_rate': 0.01,\n        'objective': 'regression',\n        'metric': 'None',\n        'max_depth': -1,\n        'n_jobs': -1,\n        'feature_fraction': 0.8,\n        'bagging_fraction': 0.8,\n        'lambda_l2': 1,\n        'verbose': -1\n        #'bagging_freq': 5\n    }\n    cats=[\"stock_id\"]\n    train_data = lgbm.Dataset(X_train, label=Y_train, categorical_feature=cats, weight=1\/np.power(Y_train,2))\n    val_data = lgbm.Dataset(X_val, label=Y_val, categorical_feature=cats, weight=1\/np.power(Y_val,2))\n    n_rounds = 5000\n    model = lgbm.train(params_lgbm, \n                      train_data, \n                      n_rounds, \n                      valid_sets=val_data, \n                      feval=feval_RMSPE,\n                      verbose_eval= 250,\n                      early_stopping_rounds=500\n                     )\n    \n    return model","f77bb43d":"models = []\n\nfor i ,(tr_ind,ts_ind) in enumerate(skf.split(train_df,train_df[\"stock_id\"])) :\n    X_tr = train_df.loc[tr_ind,retained_features]\n    X_val = train_df.loc[ts_ind,retained_features]\n    Y_tr= train_df.loc[tr_ind,\"target\"]\n    Y_val = train_df.loc[ts_ind,\"target\"]\n    print(f\"{r__} Training model_{i} starting{st__}\")\n    md = create_lgbm_model(X_tr,Y_tr,X_val,Y_val)\n    #print(f\"{g__}The MSE of the lgbm model n\u00b0{i+1} = {perf['valid_0']['l2'][-1]}{st__}\")\n    models.append(md)","0c1507eb":"fig ,ax  = plt.subplots(4,1,figsize=(15,40))\nfor i in range(4) :\n    lgbm.plot_importance(models[i],ax=ax[i])","b73db8bb":"train_df[\"cible\"] = np.mean(np.vstack([model.predict(train_df[retained_features]) for model in models]),axis=0)","ffe201ad":"RMSPE = round(rmspe(y_true = train_df['target'], y_pred = train_df['cible']),3)\nprint(f'Performance of LGBM model  RMSPE: {RMSPE}')","13588b3a":"test_all_files = glob.glob(\"..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*\")","6fa13067":"data_test_all_files = preprocessing_all_files(test_all_files)","e09dafff":"test_df = merge_and_create_feature_engineering(test,data_test_all_files)","32d92d96":"test_df = merge_and_create_feature_engineering_for_second_level(test_df)","cdc4c133":"files_test = glob.glob(\"..\/input\/optiver-realized-volatility-prediction\/trade_test.parquet\/*\")\ntrade_stock = preprocessing_trade_all_file(files_test)","c2d4f1bd":"test_df = test_df.merge(trade_stock,how=\"left\",on=\"row_id\")","c909a360":"test_df[\"vol_price^2\"] = test_df[\"vol_price\"] ** 2","e9c28207":"del(test_df[\"stock_id_y\"])\ndel(test_df[\"time_id_y\"])","ddccac8b":"test_df.rename(columns={\"time_id_x\":\"time_id\"},inplace=True)\ntest_df.rename(columns={\"stock_id_x\":\"stock_id\"},inplace=True)\n","cbddf21c":"test_df[\"vol_price_1\"] = test_df.groupby(\"stock_id\")[\"vol_price\"].shift(1)\nind = np.where(test_df[\"vol_price_1\"].isna())[0]\nfor i in ind :\n    test_df.loc[i,\"vol_price_1\"] = test_df.loc[i,\"vol_price\"]","42b09ecf":"test_df[\"diff_price\"] = test_df[\"vol_price\"] - test_df[\"vol_price_1\"]\ndel(test_df[\"vol_price_1\"])","717bdbb1":"test_df[\"balance_wap_price\"] = abs(test_df[\"price_mean\"]- \\\n                                           test_df[\"wap_mean\"])","5be84aff":"test_df[\"prediction\"] = np.mean(np.vstack([model.predict(test_df[retained_features]) for model in models]),axis=0)","1787673f":"test_df.rename(columns={\"prediction\":\"target\"},inplace=True)","f67d1f89":"test_df[[\"row_id\",\"target\"]].to_csv(\"submission.csv\",index=False)","4a093691":"train_df.to_csv(\"train_df\",index=False)","f4428582":"> ==> High positive correlation between realized volatility for second price in time t with target of time t.Moreover, we don't find any correlation between realized volatility for second price of previous times and the current target.","84032c1e":"> ==> High positive correlation between realized volatility in time t with target of time t.Moreover, we don't find any correlation between realized volatility of previous times and the current target. Besides the charts above can urge to study an eventual quadratic relation between target feature and realized_t_i features for i in {1,2,3,4,5}. ","b5580b23":"## Trade features explorations :","a9b9e2e3":"> ==> very high positive correlation between realized_t^2 feature and target feature. We can also underline some positive correlation between diff_t^2 and target feature.","169ad12c":"# 1. Helper functions :","f889d1b8":"> The above analysis shows a high positive correlation , between diff_t and the target feature. Besides , the chart above show also a quadratic relation between diff_t_i and target features for i in {1,2,3,4}","d5605109":"# 5. Modeling :","3a12c26e":"# 3. EDA : ","9461b67f":"### Exploration and feature engineering related to realized_t feature:","d554c061":"We notice that more than 95 % of stock_id have the same number of time_id, which is 3830 number of time_id.","9ae841cc":"## Top insights :\n- High positive correlation between realized squared volatility and target feature.\n- High positive correlation between vol_price feature and target feature.\n- High positive correlation between realized_t feature and target feature.\n- Positive correlation between vol_price^2 feature and target feature.\n- negative correlation between diff_price feature and target feature.\n- Positive correlation between diff_t feature and target feature.\n- Positive correlation between realized_t^2 feature and target feature.\n- High positive correlation between realized1_t feature and target feature.  \n- Positive correlation between diff1_t feature and target feature.\n- Positive correlation between realized1_t^2 feature and target feature.","f0a19dc4":"### 5.1 LGBM :","4ecdb48e":"simple_volatility = book_train_stock_id_1.groupby(\"time_id\")[\"wap\"].apply(simple_volatility)","53067e78":"> ===> We can notice from the chart above , that there is high correlation between target feature and vol_price feature, besides we notice also a positive correaltion between vol_price^2 feature and target feature , and a negative correlation between diff_price feature and target feature.","ab710130":"realized_diff_bid_price = book_train_stock_id_1.groupby(\"time_id\")[\"diff_bid_price\"].apply(\\\n                                                                                          realized_volatility)","9e1fab24":"# 5.Submission :","06f0b329":"# 2. Get a Look at Datas:","195f08fb":"> ==> high correlation between realized_squared_volatility feature and target feature.","53efa422":"supply_demand_volatility = book_train_stock_id_1.groupby(\"time_id\")[\"log_supply_demand\"].apply(realized_volatility)","9e9f9844":"realized_diff_ask_price = book_train_stock_id_1.groupby(\"time_id\")[\"diff_ask_price\"].apply(\\\n                                                                                          realized_volatility)","1f015356":"realized_volatility1_stock_id_1 =  book_train_stock_id_1.groupby(\"time_id\")[\"log_return1\"].\\\napply(realized_volatility)","c6944971":"> ==> The chart above shows a respectful positive correlation between diff1_t and realized1_t^2 features with the target feature. We can also,see very slim positive correlation of target feature with diff1_t^2 feature.","916e042a":"# 0.Import Librairies :","9bfe19b5":"> ==> very slim correlation between target feature and the features supply_demand_volatilty and diff_supply_demand features.","aea7c9a9":"realized_volatility_squared_price = book_train_stock_id_1.groupby(\"time_id\")[\"log_squared_wap\"].apply(realized_volatility)","c206c28f":"### Exploration and feature engineering related to others features:","c6ddc688":"realized_volatility_stock_id_1 = book_train_stock_id_1.groupby(\"time_id\")[\"log_return\"].\\\napply(realized_volatility)","8faf7d2a":"==> No correlation shown between quadratic realized_t_i features and target feature  for i in{1,2,3,4,5}.","9a7f1d14":"## Book order features explorations :","c9c14ea9":"### Exploration and feature engineering related to supply_demand_volatility feature:","2e4a5c09":"### Exploration and feature engineering related to realized1_t feature:","83a14427":"> ==> No correlation showed between diff_t_i^2 features for i in {1,2,3,4} and target feature.","2c2f7f46":"# 4.Preprocessing datas :"}}