{"cell_type":{"f5ac3b58":"code","84dc58b3":"code","139a45d7":"code","75da374b":"code","18564d4e":"code","03b81a75":"code","355ed106":"code","817f4973":"code","6e49b96f":"code","326446cd":"code","5b148235":"code","957ea72b":"code","b022c7bf":"code","d01efe8a":"code","b0e84b99":"code","a1380dc9":"code","90e25c3d":"markdown","a3943e3c":"markdown","5920a1fd":"markdown"},"source":{"f5ac3b58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","84dc58b3":"import seaborn as sns\nimport matplotlib.pylab as plt\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport gc\n","139a45d7":"%%time\ntrain = pd.read_feather('\/kaggle\/input\/jane-street-market-train-data-best-formats\/jane_street_train.feather')","75da374b":"date = 0\nn_features = 130\n\nfeatures = [f'feature_{i}' for i in range(1, n_features)]\nfig = px.histogram(train[train.date == date], x=features, animation_frame='variable', range_y=[0, 600], range_x=[-7, 7])\nfig.show()","18564d4e":"fig = px.line(train[train.date == date], x='resp',y=features, animation_frame='variable', range_y=[0, 100], range_x=[-7, 7])\nfig.show()","03b81a75":"del fig\ngc.collect()","355ed106":"corre = train.corr()\nfig, axs = plt.subplots(figsize=(16, 16))\nsns.heatmap(corre)\nfig.show()","817f4973":"fig, ax = plt.subplots(figsize=(15, 5))\nbalance= pd.Series(train['resp']).cumsum()\nax.set_xlabel (\"Trade\", fontsize=18)\nax.set_ylabel (\"Cumulative resp\", fontsize=18);\nbalance.plot(lw=3);\ndel balance\ngc.collect();","6e49b96f":"fig, ax = plt.subplots(figsize=(15, 5))\nbalance= pd.Series(train['resp']).cumsum()\nresp_1= pd.Series(train['resp_1']).cumsum()\nresp_2= pd.Series(train['resp_2']).cumsum()\nresp_3= pd.Series(train['resp_3']).cumsum()\nresp_4= pd.Series(train['resp_4']).cumsum()\nax.set_xlabel (\"Trade\", fontsize=18)\nax.set_title (\"Cumulative resp and time horizons 1, 2, 3, and 4 (500 days)\", fontsize=18)\nbalance.plot(lw=3)\nresp_1.plot(lw=3)\nresp_2.plot(lw=3)\nresp_3.plot(lw=3)\nresp_4.plot(lw=3)\nplt.legend(loc=\"upper left\");\ndel resp_1\ndel resp_2\ndel resp_3\ndel resp_4\ngc.collect();","326446cd":"sns.pairplot(train[['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']],corner=True);\n","5b148235":"t_start = 0\nt_end = 30\n\nfig = px.histogram(\n    train[(train.date >= t_start) & (train.date <= t_end)], \n    x=['resp_1', 'resp_2', 'resp_3', 'resp_4'], \n    facet_col='variable', animation_frame='date')\nfig.show()","957ea72b":"missing_features = train.iloc[:,7:137].isnull().sum(axis=1).groupby(train['date']).sum().to_frame()\n# now make a plot\nfig, ax = plt.subplots(figsize=(15, 5))\nplt.plot(missing_features)\nax.set_xlabel (\"Day\", fontsize=18)\nax.set_title (\"Total number of missing values in all features for each day\", fontsize=18)\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=2)\nax.axvspan(0,  85, color=sns.xkcd_rgb['grey'], alpha=0.1)\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\nplt.show()","b022c7bf":"count_weights    = train[['date', 'weight']].groupby('date').agg(['count'])\nresult = pd.merge(count_weights, missing_features, on = \"date\", how = \"inner\")\nresult.columns = ['weights','missing']\nresult['ratio'] = result['missing']\/result['weights']\nmissing_per_trade = result['ratio'].mean()\n\n# now make a plot\nfig, ax = plt.subplots(figsize=(15, 5))\nplt.plot(result['ratio'])\nplt.axhline(missing_per_trade, linestyle='--', alpha=0.85, c='r');\nax.set_xlabel (\"Day\", fontsize=18)\nax.set_title (\"Average number of missing feature values per trade, for each day\", fontsize=18)\nplt.show()","d01efe8a":"trades_per_day = train.groupby(['date'])['ts_id'].count()\nfig, ax = plt.subplots(figsize=(15, 5))\nplt.plot(trades_per_day)\nax.set_xlabel (\"Day\", fontsize=18)\nax.set_title (\"Total number of ts_id for each day\", fontsize=18)\n# day 85 marker\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=1)\nax.axvspan(0, 85 , color=sns.xkcd_rgb['grey'], alpha=0.1)\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\nplt.show()","b0e84b99":"fig, ax = plt.subplots(figsize=(15, 5))\nplt.plot(23400\/trades_per_day)\nax.set_xlabel (\"Day\", fontsize=18)\nax.set_ylabel (\"Av. time between trades (s)\", fontsize=18)\nax.set_title (\"Average time between trades for each day\", fontsize=18)\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=1)\nax.axvspan(0, 85 , color=sns.xkcd_rgb['grey'], alpha=0.1)\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\nax.set_ylim(ymin=0)\nax.set_ylim(ymax=12)\nplt.show()","a1380dc9":"plt.figure(figsize = (12,4))\n# the minimum has been set to 1000 so as not to draw the partial days like day 2 and day 294\n# the maximum number of trades per day is 18884\n# I have used 125 bins for the 500 days\nax = sns.distplot(trades_per_day, \n             bins=125, \n             kde_kws={\"clip\":(1000,20000)}, \n             hist_kws={\"range\":(1000,20000)},\n             color='darkcyan', \n             kde=True);\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(), values.max())\ncolors = plt.cm.jet(norm(values))\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Number of trades per day\", size=14)\nplt.show();","90e25c3d":"### Disclaimer \nThis notebook is created for educational\/seminar purpose. This notebook is collection of various visualizations from some of the beautiful public notebooks in jane street competition. The original authors of those notebooks from which these visualizations are taken and links to their notebooks are mentioned below. Thanks to their contribution in the kaggle community.\n1. [Jane Street Animated and Interactive plots](https:\/\/www.kaggle.com\/xhlulu\/jane-street-animated-and-interactive-eda) by [xhlulu](https:\/\/www.kaggle.com\/xhlulu)\n\n2. [Jane Street: EDA of day 0 and feature importance](https:\/\/www.kaggle.com\/carlmcbrideellis\/jane-street-eda-of-day-0-and-feature-importance) by [Carl McBride Ellis](https:\/\/www.kaggle.com\/carlmcbrideellis)\n\n3. [Jane_street_Extensive_EDA & PCA starter \ud83d\udcca\u26a1](https:\/\/www.kaggle.com\/muhammadmelsherbini\/jane-street-extensive-eda-pca-starter) by [Muhammad M. El.Sherbini](https:\/\/www.kaggle.com\/muhammadmelsherbini)\n","a3943e3c":"## Missing Values","5920a1fd":"### Histogram return over time"}}