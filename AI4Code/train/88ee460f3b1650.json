{"cell_type":{"8376993b":"code","800bf924":"code","54b40f83":"code","429403c1":"code","a88ccfcb":"code","1b433fe1":"code","599ea986":"code","98de75ab":"code","d8a3510d":"code","562e6a31":"code","81b38505":"code","be84c49f":"code","f4537814":"code","33ac36f6":"code","c3037a6f":"code","04076594":"code","2e997ed9":"code","6643af25":"code","e0979aeb":"code","9d9e79ac":"code","c71c66f9":"code","03b14268":"code","2b26fa32":"markdown","a43432b5":"markdown","6b16cec6":"markdown","e7a663eb":"markdown","62f8583b":"markdown"},"source":{"8376993b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","800bf924":"df = pd.read_csv('..\/input\/eeg-brainwave-dataset-feeling-emotions\/emotions.csv')","54b40f83":"df.head(10)","429403c1":"print(df.shape)","a88ccfcb":"df.isnull().sum().sum()","1b433fe1":"df.info()","599ea986":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n\nX = df.drop(columns=['label'])\ny = df['label']\n\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\nenc = LabelEncoder()\ny = enc.fit_transform(y)\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","98de75ab":"X","d8a3510d":"y","562e6a31":"X_train.shape","81b38505":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\n\nparameters_svc = {'kernel':('linear', 'rbf'), 'C':[1, 10]}\ngrid_search_svc = GridSearchCV(SVC(), parameters_svc, n_jobs=-1)\ngrid_search_svc.fit(X_train, y_train)\n\n","be84c49f":"grid_search_svc.best_score_","f4537814":"import xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV\n\n\nxgb_clf = xgb.XGBClassifier()\n\nparameters_xgb =    {\n            'max_depth': [3, 4, 5],\n            'learning_rate': [0.1, 0.2, 0.3],\n            'n_estimators': [50, 100, 150],\n            'gamma': [0, 0.1, 0.2],\n            'min_child_weight': [0, 0.5, 1],\n            'max_delta_step': [0],\n            'subsample': [0.7, 0.8, 0.9, 1],\n            'colsample_bytree': [0.6, 0.8, 1],\n            'colsample_bylevel': [1],\n            'reg_alpha': [0, 1e-2, 1, 1e1],\n            'reg_lambda': [0, 1e-2, 1, 1e1],\n            'base_score': [0.5]\n            }\n\nsearch_xgb = RandomizedSearchCV(xgb_clf, parameters_xgb, n_jobs=-1)\nsearch_xgb.fit(X_train, y_train)\n\n\n\n","33ac36f6":"search_xgb.best_score_","c3037a6f":"from keras.models import Sequential\n\nmodel = Sequential()","04076594":"from keras.layers import Dense\n\nmodel.add(Dense(32, activation='relu', input_shape=(1,2548)))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(3, activation=\"softmax\"))\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","2e997ed9":"from keras.utils import to_categorical\n\nX_train_ann, X_val_ann, y_train_ann, y_val_ann = train_test_split(X_train, y_train, test_size=0.33, random_state=42)\n\ny_train_ann = to_categorical(y_train_ann, 3)\ny_val_ann = to_categorical(y_val_ann, 3)\n","6643af25":"history = model.fit(X_train_ann, y_train_ann, epochs=100)\n","e0979aeb":"model.evaluate(X_val_ann, y_val_ann)","9d9e79ac":"best_xgb = search_xgb.best_estimator_\nbest_xgb","c71c66f9":"best_xgb.score(X_test, y_test)","03b14268":"X_test_np = np.array([X_test[98]])\nbest_xgb.predict(X_test_np)","2b26fa32":"# **Test set**","a43432b5":"# **Loading data and preprocessing**","6b16cec6":"There are no null values in this dataset, it will make things easier going forward.","e7a663eb":"# **Building an ANN**","62f8583b":"# **EEG sentiment analysis**"}}