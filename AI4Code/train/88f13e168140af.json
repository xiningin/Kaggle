{"cell_type":{"44993a13":"code","0b4af6dd":"code","a3b96fff":"code","73862b45":"code","5a3090e8":"code","d47a05f4":"code","9cd7b6d5":"code","93385ad0":"code","57dc100c":"code","469bd3f3":"code","a4106348":"code","3ff6fb70":"code","3ec17fa3":"code","15ea23ec":"code","2d78f7f9":"code","66a8e1d4":"code","2747db19":"code","9bba8926":"code","6802c079":"code","7f0b88ae":"code","bff4a79e":"code","745e9811":"code","1bb36f6f":"code","edc18d22":"code","bddffbdc":"code","ea6890e9":"code","6e0aa9e7":"code","d8f8dd1e":"code","6c12dcf2":"code","b0ae72a0":"code","86621cbf":"code","3da8b7ca":"code","4c35fbbc":"code","5cd8babc":"markdown","47050545":"markdown","17085c50":"markdown","7b494aae":"markdown","fe6ebfba":"markdown","ce1626f4":"markdown","d3e59b16":"markdown","1ce0202f":"markdown","c9b7ebca":"markdown","112e1b71":"markdown","6a26f636":"markdown","dde8363d":"markdown","577509e2":"markdown","40176415":"markdown","4c30f10c":"markdown","d5115d86":"markdown","17959a06":"markdown","c0f51b19":"markdown","e0d2325f":"markdown","e99f072c":"markdown","95441559":"markdown","627d971f":"markdown","dfe8394c":"markdown","bf4a864c":"markdown","e3cbee50":"markdown","262a6fab":"markdown","9af218f7":"markdown","a9417e6d":"markdown","7c283bc9":"markdown","20f80ea7":"markdown","7c8e3745":"markdown","fd2d6547":"markdown","7a5926b7":"markdown","dc6337e3":"markdown","1088a840":"markdown","115dc977":"markdown","b515811b":"markdown","cf27593a":"markdown","8e7f09bd":"markdown"},"source":{"44993a13":"#Load the libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import LabelBinarizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\nfrom bs4 import BeautifulSoup\nimport spacy\nimport re,string,unicodedata\nfrom nltk.tokenize.toktok import ToktokTokenizer\nfrom nltk.stem import LancasterStemmer,WordNetLemmatizer\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom textblob import TextBlob\nfrom textblob import Word\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings('ignore')\n","0b4af6dd":"#importing the training data\nimdb_data=pd.read_csv('..\/input\/IMDB Dataset.csv')\nprint(imdb_data.shape)\nimdb_data.head(10)","a3b96fff":"#Summary of the dataset\nimdb_data.describe()","73862b45":"#sentiment count\nimdb_data['sentiment'].value_counts()","5a3090e8":"#split the dataset  \n#train dataset\ntrain_reviews=imdb_data.review[:40000]\ntrain_sentiments=imdb_data.sentiment[:40000]\n#test dataset\ntest_reviews=imdb_data.review[40000:]\ntest_sentiments=imdb_data.sentiment[40000:]\nprint(train_reviews.shape,train_sentiments.shape)\nprint(test_reviews.shape,test_sentiments.shape)","d47a05f4":"#Tokenization of text\ntokenizer=ToktokTokenizer()\n#Setting English stopwords\nstopword_list=nltk.corpus.stopwords.words('english')","9cd7b6d5":"#Removing the html strips\ndef strip_html(text):\n    soup = BeautifulSoup(text, \"html.parser\")\n    return soup.get_text()\n\n#Removing the square brackets\ndef remove_between_square_brackets(text):\n    return re.sub('\\[[^]]*\\]', '', text)\n\n#Removing the noisy text\ndef denoise_text(text):\n    text = strip_html(text)\n    text = remove_between_square_brackets(text)\n    return text\n#Apply function on review column\nimdb_data['review']=imdb_data['review'].apply(denoise_text)","93385ad0":"#Define function for removing special characters\ndef remove_special_characters(text, remove_digits=True):\n    pattern=r'[^a-zA-z0-9\\s]'\n    text=re.sub(pattern,'',text)\n    return text\n#Apply function on review column\nimdb_data['review']=imdb_data['review'].apply(remove_special_characters)","57dc100c":"#Stemming the text\ndef simple_stemmer(text):\n    ps=nltk.porter.PorterStemmer()\n    text= ' '.join([ps.stem(word) for word in text.split()])\n    return text\n#Apply function on review column\nimdb_data['review']=imdb_data['review'].apply(simple_stemmer)","469bd3f3":"#set stopwords to english\nstop=set(stopwords.words('english'))\nprint(stop)\n\n#removing the stopwords\ndef remove_stopwords(text, is_lower_case=False):\n    tokens = tokenizer.tokenize(text)\n    tokens = [token.strip() for token in tokens]\n    if is_lower_case:\n        filtered_tokens = [token for token in tokens if token not in stopword_list]\n    else:\n        filtered_tokens = [token for token in tokens if token.lower() not in stopword_list]\n    filtered_text = ' '.join(filtered_tokens)    \n    return filtered_text\n#Apply function on review column\nimdb_data['review']=imdb_data['review'].apply(remove_stopwords)","a4106348":"#normalized train reviews\nnorm_train_reviews=imdb_data.review[:40000]\nnorm_train_reviews[0]\n#convert dataframe to string\n#norm_train_string=norm_train_reviews.to_string()\n#Spelling correction using Textblob\n#norm_train_spelling=TextBlob(norm_train_string)\n#norm_train_spelling.correct()\n#Tokenization using Textblob\n#norm_train_words=norm_train_spelling.words\n#norm_train_words","3ff6fb70":"#Normalized test reviews\nnorm_test_reviews=imdb_data.review[40000:]\nnorm_test_reviews[45005]\n##convert dataframe to string\n#norm_test_string=norm_test_reviews.to_string()\n#spelling correction using Textblob\n#norm_test_spelling=TextBlob(norm_test_string)\n#print(norm_test_spelling.correct())\n#Tokenization using Textblob\n#norm_test_words=norm_test_spelling.words\n#norm_test_words","3ec17fa3":"#Count vectorizer for bag of words\ncv=CountVectorizer(min_df=0,max_df=1,binary=False,ngram_range=(1,3))\n#transformed train reviews\ncv_train_reviews=cv.fit_transform(norm_train_reviews)\n#transformed test reviews\ncv_test_reviews=cv.transform(norm_test_reviews)\n\nprint('BOW_cv_train:',cv_train_reviews.shape)\nprint('BOW_cv_test:',cv_test_reviews.shape)\n#vocab=cv.get_feature_names()-toget feature names","15ea23ec":"#Tfidf vectorizer\ntv=TfidfVectorizer(min_df=0,max_df=1,use_idf=True,ngram_range=(1,3))\n#transformed train reviews\ntv_train_reviews=tv.fit_transform(norm_train_reviews)\n#transformed test reviews\ntv_test_reviews=tv.transform(norm_test_reviews)\nprint('Tfidf_train:',tv_train_reviews.shape)\nprint('Tfidf_test:',tv_test_reviews.shape)","2d78f7f9":"#labeling the sentient data\nlb=LabelBinarizer()\n#transformed sentiment data\nsentiment_data=lb.fit_transform(imdb_data['sentiment'])\nprint(sentiment_data.shape)","66a8e1d4":"#Spliting the sentiment data\ntrain_sentiments=sentiment_data[:40000]\ntest_sentiments=sentiment_data[40000:]\nprint(train_sentiments)\nprint(test_sentiments)","2747db19":"#training the model\nlr=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)\n#Fitting the model for Bag of words\nlr_bow=lr.fit(cv_train_reviews,train_sentiments)\nprint(lr_bow)\n#Fitting the model for tfidf features\nlr_tfidf=lr.fit(tv_train_reviews,train_sentiments)\nprint(lr_tfidf)","9bba8926":"#Predicting the model for bag of words\nlr_bow_predict=lr.predict(cv_test_reviews)\nprint(lr_bow_predict)\n##Predicting the model for tfidf features\nlr_tfidf_predict=lr.predict(tv_test_reviews)\nprint(lr_tfidf_predict)","6802c079":"#Accuracy score for bag of words\nlr_bow_score=accuracy_score(test_sentiments,lr_bow_predict)\nprint(\"lr_bow_score :\",lr_bow_score)\n#Accuracy score for tfidf features\nlr_tfidf_score=accuracy_score(test_sentiments,lr_tfidf_predict)\nprint(\"lr_tfidf_score :\",lr_tfidf_score)","7f0b88ae":"#Classification report for bag of words \nlr_bow_report=classification_report(test_sentiments,lr_bow_predict,target_names=['Positive','Negative'])\nprint(lr_bow_report)\n\n#Classification report for tfidf features\nlr_tfidf_report=classification_report(test_sentiments,lr_tfidf_predict,target_names=['Positive','Negative'])\nprint(lr_tfidf_report)","bff4a79e":"#confusion matrix for bag of words\ncm_bow=confusion_matrix(test_sentiments,lr_bow_predict,labels=[1,0])\nprint(cm_bow)\n#confusion matrix for tfidf features\ncm_tfidf=confusion_matrix(test_sentiments,lr_tfidf_predict,labels=[1,0])\nprint(cm_tfidf)","745e9811":"#training the linear svm\nsvm=SGDClassifier(loss='hinge',max_iter=500,random_state=42)\n#fitting the svm for bag of words\nsvm_bow=svm.fit(cv_train_reviews,train_sentiments)\nprint(svm_bow)\n#fitting the svm for tfidf features\nsvm_tfidf=svm.fit(tv_train_reviews,train_sentiments)\nprint(svm_tfidf)","1bb36f6f":"#Predicting the model for bag of words\nsvm_bow_predict=svm.predict(cv_test_reviews)\nprint(svm_bow_predict)\n#Predicting the model for tfidf features\nsvm_tfidf_predict=svm.predict(tv_test_reviews)\nprint(svm_tfidf_predict)","edc18d22":"#Accuracy score for bag of words\nsvm_bow_score=accuracy_score(test_sentiments,svm_bow_predict)\nprint(\"svm_bow_score :\",svm_bow_score)\n#Accuracy score for tfidf features\nsvm_tfidf_score=accuracy_score(test_sentiments,svm_tfidf_predict)\nprint(\"svm_tfidf_score :\",svm_tfidf_score)","bddffbdc":"#Classification report for bag of words \nsvm_bow_report=classification_report(test_sentiments,svm_bow_predict,target_names=['Positive','Negative'])\nprint(svm_bow_report)\n#Classification report for tfidf features\nsvm_tfidf_report=classification_report(test_sentiments,svm_tfidf_predict,target_names=['Positive','Negative'])\nprint(svm_tfidf_report)","ea6890e9":"#confusion matrix for bag of words\ncm_bow=confusion_matrix(test_sentiments,svm_bow_predict,labels=[1,0])\nprint(cm_bow)\n#confusion matrix for tfidf features\ncm_tfidf=confusion_matrix(test_sentiments,svm_tfidf_predict,labels=[1,0])\nprint(cm_tfidf)","6e0aa9e7":"#training the model\nmnb=MultinomialNB()\n#fitting the svm for bag of words\nmnb_bow=mnb.fit(cv_train_reviews,train_sentiments)\nprint(mnb_bow)\n#fitting the svm for tfidf features\nmnb_tfidf=mnb.fit(tv_train_reviews,train_sentiments)\nprint(mnb_tfidf)","d8f8dd1e":"#Predicting the model for bag of words\nmnb_bow_predict=mnb.predict(cv_test_reviews)\nprint(mnb_bow_predict)\n#Predicting the model for tfidf features\nmnb_tfidf_predict=mnb.predict(tv_test_reviews)\nprint(mnb_tfidf_predict)","6c12dcf2":"#Accuracy score for bag of words\nmnb_bow_score=accuracy_score(test_sentiments,mnb_bow_predict)\nprint(\"mnb_bow_score :\",mnb_bow_score)\n#Accuracy score for tfidf features\nmnb_tfidf_score=accuracy_score(test_sentiments,mnb_tfidf_predict)\nprint(\"mnb_tfidf_score :\",mnb_tfidf_score)","b0ae72a0":"#Classification report for bag of words \nmnb_bow_report=classification_report(test_sentiments,mnb_bow_predict,target_names=['Positive','Negative'])\nprint(mnb_bow_report)\n#Classification report for tfidf features\nmnb_tfidf_report=classification_report(test_sentiments,mnb_tfidf_predict,target_names=['Positive','Negative'])\nprint(mnb_tfidf_report)","86621cbf":"#confusion matrix for bag of words\ncm_bow=confusion_matrix(test_sentiments,mnb_bow_predict,labels=[1,0])\nprint(cm_bow)\n#confusion matrix for tfidf features\ncm_tfidf=confusion_matrix(test_sentiments,mnb_tfidf_predict,labels=[1,0])\nprint(cm_tfidf)","3da8b7ca":"#word cloud for positive review words\nplt.figure(figsize=(10,10))\npositive_text=norm_train_reviews[1]\nWC=WordCloud(width=1000,height=500,max_words=500,min_font_size=5)\npositive_words=WC.generate(positive_text)\nplt.imshow(positive_words,interpolation='bilinear')\nplt.show","4c35fbbc":"#Word cloud for negative review words\nplt.figure(figsize=(10,10))\nnegative_text=norm_train_reviews[8]\nWC=WordCloud(width=1000,height=500,max_words=500,min_font_size=5)\nnegative_words=WC.generate(negative_text)\nplt.imshow(negative_words,interpolation='bilinear')\nplt.show","5cd8babc":"**Normalized train reviews**","47050545":"**Word cloud for positive review words**","17085c50":"Let us build logistic regression model for both bag of words and tfidf features","7b494aae":"**Accuracy of the model**","fe6ebfba":"**Model performance on test data**","ce1626f4":"**Let us see positive and negative words by using WordCloud.**","d3e59b16":"**Multinomial Naive Bayes for bag of words and tfidf features**","1ce0202f":"We can see that the dataset is balanced.","c9b7ebca":"**Split the sentiment tdata**","112e1b71":"**Text normalization**","6a26f636":"**Stochastic gradient descent or Linear support vector machines for bag of words and tfidf features**","dde8363d":"**Plot the confusion matrix**","577509e2":"**Import necessary libraries**","40176415":"**Spliting the training dataset**","4c30f10c":"**Problem Statement:**\n\nIn this, we have to predict the number of positive and negative reviews based on sentiments by using different classification models.","d5115d86":"**Sentiment count**","17959a06":"**Labeling the sentiment text**","c0f51b19":"**Print the classification report**","e0d2325f":"**Normalized test reviews**","e99f072c":"**Accuracy of the model**","95441559":"**Removing special characters**","627d971f":"**Model performance on test data**","dfe8394c":"**Logistic regression model performane on test dataset**","bf4a864c":"**Confusion matrix**","e3cbee50":"**Plot the confusion matrix**","262a6fab":"**Removing stopwords**","9af218f7":"**Word cloud for negative review words**","a9417e6d":"**Removing html strips and noise text**","7c283bc9":"**Text stemming\n**","20f80ea7":"**Bags of words model **\n\nIt is used to convert text documents to numerical vectors or bag of words.","7c8e3745":"**Conclusion:**\n* We can observed that both logistic regression and multinomial naive bayes model performing well compared to linear support vector  machines.\n* Still we can improve the accuracy of the models by preprocessing data and by using lexicon models like Textblob.","fd2d6547":"**Exploratery data analysis**","7a5926b7":"**Term Frequency-Inverse Document Frequency model (TFIDF)**\n\nIt is used to convert text documents to  matrix of  tfidf features.","dc6337e3":"**Print the classification report**","1088a840":"**Sentiment Analysis of IMDB Movie Reviews**","115dc977":"**Print the classification report**","b515811b":"**Import the training dataset**","cf27593a":"**Modelling the dataset**","8e7f09bd":"**Accuracy of the model**"}}