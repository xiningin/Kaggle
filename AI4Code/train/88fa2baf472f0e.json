{"cell_type":{"774b5f89":"code","e0ea6131":"code","da361a3b":"code","4f80a7fe":"code","7b76ba92":"code","d5dd5f58":"code","22df8504":"code","4e8426ab":"code","9090a62d":"code","053459d9":"code","0ad3f304":"markdown","675ca72a":"markdown","6ac851b9":"markdown","f28d4671":"markdown","e49ca6d0":"markdown","56899e2f":"markdown","1ac983de":"markdown","cda80a88":"markdown"},"source":{"774b5f89":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom math import sqrt\n\nimport gc\nimport time\nimport seaborn as sns; sns.set()\n\nimport geojson\nimport geopandas as gpd\nfrom fiona.crs import from_epsg\nimport os, json\nfrom shapely.geometry import shape, Point, Polygon, MultiPoint\nfrom geopandas.tools import sjoin\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns; sns.set()\nfrom IPython.display import Image\n\nimport pickle\nimport folium\n\n\nfrom branca.colormap import  linear\nimport json\nimport branca.colormap as cm\n\nfrom tqdm.notebook import tqdm\n\nimport pickle","e0ea6131":"# seasonal model (baseline)\npath = '..\/input\/seasonal-persistence-model\/save_predictions_results.pkl'\nwith open(path,'rb') as f:\n        base_rmse_list, base_mae_list = pickle.load(f)\n        \n# Direct simple LSTM model\npath = '..\/input\/simple-lstm-tensorflow\/save_predictions_results.pkl'\nwith open(path,'rb') as f:\n        Dlstm_rmse_list, Dlstm_mae_list = pickle.load(f)\n        \n# Autoregressive simple LSTM model\npath = '..\/input\/simple-ar-lstm-tensorflow\/save_predictions_results.pkl'\nwith open(path,'rb') as f:\n        Alstm_rmse_list, Alstm_mae_list = pickle.load(f)\n\n# Direct LSTM encoder decoder model\npath = '..\/input\/lstm-encoder-decoder-tensorflow\/save_predictions_results.pkl'\nwith open(path,'rb') as f:\n        DED_rmse_list, DED_mae_list = pickle.load(f)\n        \n# Autoregressive LSTM encoder decoder model\npath = '..\/input\/ar-lstm-encoder-decoder-tensorflow\/save_predictions_results.pkl'\nwith open(path,'rb') as f:\n        AED_rmse_list, AED_mae_list = pickle.load(f)","da361a3b":"base_rmse = np.mean(base_rmse_list)\nstd_base_rmse = np.std(base_rmse_list)\nprint(' Baseline RMSE '+str(base_rmse)+' +-'+str(std_base_rmse))\nprint('')\n\nDlstm_rmse = np.mean(Dlstm_rmse_list)\nstd_Dlstm_rmse = np.std(Dlstm_rmse_list)\nprint(' Dir LSTM model RMSE '+str(Dlstm_rmse)+' +-'+str(std_Dlstm_rmse))\nprint('')\n\nAlstm_rmse = np.mean(Alstm_rmse_list)\nstd_Alstm_rmse = np.std(Alstm_rmse_list)\nprint(' AutoRegr LSTM model RMSE '+str(Alstm_rmse)+' +-'+str(std_Alstm_rmse))\nprint('')\n\nDED_rmse = np.mean(DED_rmse_list)\nstd_DED_rmse = np.std(DED_rmse_list)\nprint(' Dir LSTM Enc-Dec RMSE '+str(DED_rmse)+' +-'+str(std_DED_rmse))\nprint('')\n\nAED_rmse = np.mean(AED_rmse_list)\nstd_AED_rmse = np.std(AED_rmse_list)\nprint(' AutoRegr LSTM Enc-Dec RMSE '+str(AED_rmse)+' +-'+str(std_AED_rmse))\nprint('')","4f80a7fe":"base_mae = np.mean(base_mae_list)\nstd_base_mae = np.std(base_mae_list)\nprint(' Baseline MAE '+str(base_mae)+' +-'+str(std_base_mae))\nprint('')\n\nDlstm_mae = np.mean(Dlstm_mae_list)\nstd_Dlstm_mae = np.std(Dlstm_mae_list)\nprint(' Dir LSTM model MAE '+str(Dlstm_mae)+' +-'+str(std_Dlstm_mae))\nprint('')\n\nAlstm_mae = np.mean(Alstm_mae_list)\nstd_Alstm_mae = np.std(Alstm_mae_list)\nprint(' AutoRegr LSTM model MAE '+str(Alstm_mae)+' +-'+str(std_Alstm_mae))\nprint('')\n\nDED_mae = np.mean(DED_mae_list)\nstd_DED_mae = np.std(DED_mae_list)\nprint(' Dir LSTM Enc-Dec MAE '+str(DED_mae)+' +-'+str(std_DED_mae))\nprint('')\n\nAED_mae = np.mean(AED_mae_list)\nstd_AED_mae = np.std(AED_mae_list)\nprint(' AutoRegr LSTM Enc-Dec MAE '+str(AED_mae)+' +-'+str(std_AED_mae))\nprint('')","7b76ba92":"base_rmse = np.mean(base_rmse_list, axis=0).mean(axis=1)\nstd_base_rmse = np.std(base_rmse_list, axis=0).mean(axis=1)\n\nDlstm_rmse = np.mean(Dlstm_rmse_list, axis=0).mean(axis=1)\nstd_Dlstm_rmse = np.std(Dlstm_rmse_list, axis=0).mean(axis=1)\n\nAlstm_rmse = np.mean(Alstm_rmse_list, axis=0).mean(axis=1)\nstd_Alstm_rmse = np.std(Alstm_rmse_list, axis=0).mean(axis=1)\n\nDED_rmse = np.mean(DED_rmse_list, axis=0).mean(axis=1)\nstd_DED_rmse = np.std(DED_rmse_list, axis=0).mean(axis=1)\n\nAED_rmse = np.mean(AED_rmse_list, axis=0).mean(axis=1)\nstd_AED_rmse = np.std(AED_rmse_list, axis=0).mean(axis=1)","d5dd5f58":"ax = ['t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8','t+9','t+10','t+11','t+12']\n\n\nmean_rmse = pd.DataFrame(list(zip(Dlstm_rmse\/base_rmse, Alstm_rmse\/base_rmse, DED_rmse\/base_rmse, AED_rmse\/base_rmse)), \n               columns = ['D_lstm', 'A_lstm', 'D_lstm_ED', 'A_lstm_ED'], index=ax)\n\n\nfig, ax = plt.subplots(figsize=(20, 10))\nmean_rmse.plot.bar( ax=ax, capsize=3, rot=45, grid=True, color=['blue', 'purple', 'orange','red']) #yerr=std_rmse,\nfig.suptitle('Normalized Multi-horizon RMSE', fontsize=20)\nax.legend(loc='center right')\nplt.show()\n\n","22df8504":"mean_rmse_scatter = mean_rmse.reset_index()\n\npositions = (0,1, 2, 3,4,5,6,7,8,9,10,11)\nlabels = ('t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8','t+9','t+10','t+11','t+12')\n\n\nfig, ax = plt.subplots(figsize=(20, 10))\n\nplt.plot( mean_rmse_scatter['D_lstm'],'o', label = 'D_lstm', c ='orange', markersize=10)\nplt.plot( mean_rmse_scatter['D_lstm'], '--', c ='orange', linewidth=2.5)\n\nplt.plot( mean_rmse_scatter['A_lstm'],'o', label = 'A_lstm', c ='green', markersize=10)\nplt.plot( mean_rmse_scatter['A_lstm'], '--', c ='green', linewidth=2.5)\n\nplt.plot( mean_rmse_scatter['D_lstm_ED'],'o', label = 'D_lstm_ED', c ='blue', markersize=10)\nplt.plot( mean_rmse_scatter['D_lstm_ED'], '--', c ='blue', linewidth=2.5)\n\nplt.plot( mean_rmse_scatter['A_lstm_ED'],'o', label = 'A_lstm_ED', c ='purple', markersize=10)\nplt.plot( mean_rmse_scatter['A_lstm_ED'], '--', c ='purple', linewidth=2.5)\n\nplt.xticks(positions, labels, fontsize=25, rotation=30)\nplt.title('Normalized Multi-horizon RMSE', fontsize=30)\nax.legend(loc='upper left', fontsize=30)\nplt.savefig(\"rmse.png\")\nplt.show()","4e8426ab":"base_mae = np.mean(base_mae_list, axis=0).mean(axis=1)\nstd_base_mae = np.std(base_mae_list, axis=0).mean(axis=1)\n\nDlstm_mae = np.mean(Dlstm_mae_list, axis=0).mean(axis=1)\nstd_Dlstm_mae = np.std(Dlstm_mae_list, axis=0).mean(axis=1)\n\nAlstm_mae = np.mean(Alstm_mae_list, axis=0).mean(axis=1)\nstd_Alstm_mae = np.std(Alstm_mae_list, axis=0).mean(axis=1)\n\nDED_mae = np.mean(DED_mae_list, axis=0).mean(axis=1)\nstd_DED_mae = np.std(DED_mae_list, axis=0).mean(axis=1)\n\nAED_mae = np.mean(AED_mae_list, axis=0).mean(axis=1)\nstd_AED_mae = np.std(AED_mae_list, axis=0).mean(axis=1)","9090a62d":"ax = ['t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8','t+9','t+10','t+11','t+12']\n\n\nmean_mae = pd.DataFrame(list(zip( Dlstm_mae\/base_mae, Alstm_mae\/base_mae, DED_mae\/base_mae, AED_mae\/base_mae)), \n               columns = ['D_lstm', 'A_lstm', 'D_lstm_ED', 'A_lstm_ED'], index=ax)\n\n\n# std_mae = pd.DataFrame(list(zip(std_base_mae, std_Dlstm_mae, std_Alstm_mae, std_DED_mae, std_AED_mae)),\n#                    columns = ['Base', 'D_lstm', 'A_lstm','D_lstm_ED', 'A_lstm_ED'],index=ax)\n\n\nfig, ax = plt.subplots(figsize=(20, 8))\nmean_rmse.plot.bar( ax=ax, capsize=3, rot=45, grid=True, color=['lightgreen', 'yellow', 'orange','red']) #yerr=std_rmse,\nfig.suptitle('Normalized Multi-horizon MAE', fontsize=20)\nax.legend(loc='center right')\nplt.show()\n","053459d9":"mean_mae_scatter = mean_mae.reset_index()\n\npositions = (0,1, 2, 3,4,5,6,7,8,9,10,11)\nlabels = ('t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8','t+9','t+10','t+11','t+12')\n\n\nfig, ax = plt.subplots(figsize=(20, 10))\n\nplt.plot( mean_mae_scatter['D_lstm'],'o', label = 'D_lstm', c ='orange', markersize=10)\nplt.plot( mean_mae_scatter['D_lstm'], '--', c ='orange', linewidth=2.5)\n\nplt.plot( mean_mae_scatter['A_lstm'],'o', label = 'A_lstm', c ='green', markersize=10)\nplt.plot( mean_mae_scatter['A_lstm'], '--', c ='green', linewidth=2.5)\n\nplt.plot( mean_mae_scatter['D_lstm_ED'],'o', label = 'D_lstm_ED', c ='blue', markersize=10)\nplt.plot( mean_mae_scatter['D_lstm_ED'], '--', c ='blue', linewidth=2.5)\n\nplt.plot( mean_mae_scatter['A_lstm_ED'],'o', label = 'A_lstm_ED', c ='purple', markersize=10)\nplt.plot( mean_mae_scatter['A_lstm_ED'], '--', c ='purple', linewidth=2.5)\n\nplt.xticks(positions, labels, fontsize=25, rotation=30)\nplt.title('Normalized Multi-horizon MAE', fontsize=30)\nax.legend(loc='upper left', fontsize=30)\nplt.savefig(\"mae.png\")\nplt.show()","0ad3f304":"### MAE metric","675ca72a":"### Normalised RMSE metric","6ac851b9":"### compute total average metric","f28d4671":"## compute average metric for each forecast horizon t+H","e49ca6d0":"### RMSE metric","56899e2f":"## General Import","1ac983de":"## Upload Results","cda80a88":"### MAE metric"}}