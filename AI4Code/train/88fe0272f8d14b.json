{"cell_type":{"6aab7058":"code","adc1e789":"code","1d4960c1":"code","2b77ed5e":"code","a1c94a66":"code","aff9af2f":"code","eb40cbe8":"code","64f7abae":"code","37bac887":"code","50d5155a":"code","8a3fd01d":"code","2fb388d0":"code","cc4f93ab":"code","aad90d6f":"code","971fa828":"code","d6e3501c":"code","7a93b7bd":"code","7ed20b97":"code","1a2b557e":"code","0c2d6ee8":"code","b959a8de":"markdown","340a4eb9":"markdown","c11571f8":"markdown"},"source":{"6aab7058":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport time\nimport math\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Conv2D, Dropout,Dense,Flatten\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Input, Dense, BatchNormalization\nimport functools\nfrom sklearn.model_selection import train_test_split\nimport datetime\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n        \n# Any results you write to the current directory are saved as output.","adc1e789":"IdLookupTable = pd.read_csv(\"..\/input\/facial-keypoints-detection\/IdLookupTable.csv\")\nSampleSubmission = pd.read_csv(\"..\/input\/facial-keypoints-detection\/SampleSubmission.csv\")\ntrainData = pd.read_csv(\"..\/input\/facial-keypoints-detection\/training.zip\")  \ntestData = pd.read_csv(\"..\/input\/facial-keypoints-detection\/test.zip\")  ","1d4960c1":"def plot_sample(X,y,axs):\n    '''\n    kaggle picture is 96 by 96\n    y is rescaled to range between -1 and 1\n    '''\n    \n    axs.imshow(X.reshape(96,96),cmap=\"gray\")\n    axs.scatter(48*y[0::2]+ 48,48*y[1::2]+ 48)\n","2b77ed5e":"trainData.head().T","a1c94a66":"imageList = []\nfor i in range(0,len(trainData)):\n    image = trainData['Image'][i].split(' ')    \n    imageList.append(image)\n    \nimageList = np.array(imageList,dtype = 'float')\n\nlabelList = (trainData.T[0:-1])\n","aff9af2f":"labelList.T.isnull().sum()","eb40cbe8":"averagedFeatures = labelList.T.mean(skipna = True)\nfor index, i in enumerate(imageList):\n    if labelList[index].isnull().any():\n        plt.imshow(i.reshape(96,96),cmap='gray')\n        for pos, feature in enumerate(labelList[index][::2]):\n            if math.isnan(feature):\n                plt.scatter(averagedFeatures[pos], averagedFeatures[pos+1], c='blue', marker='+')\n#         plt.scatter(labelList[index][0::2], labelList[index][1::2], c='red', marker='x')\n#         plt.show()\n# #         time.sleep(1)","64f7abae":"# remove images without a position for every feature\ntraining = trainData.T.dropna(axis='columns')\ny=[]\nX=training.T['Image']\ntraining.drop('Image')\nfor i in range(len(training)):\n    y.append(training.iloc[i,:])\n    ","37bac887":"def prepare_model():\n    input = Input(shape=(96, 96, 1,))\n    \n    input = Input(shape=(96, 96, 1,))\n    conv_1 = Conv2d(16, (2, 2))(input)\n    batch_norm_1 = BatchNormalization()(conv_1)\n    conv_2 = Conv2d(32, (3, 3))(batch_norm_1)\n    batch_norm_2 = BatchNormalization()(conv_2)\n    conv_3 = Conv2d(64, (4, 4))(batch_norm_2)\n    avg_pool_1 = AveragePooling2D((2,2))(conv_3)\n    batch_norm_3 = BatchNormalization()(avg_pool_1)\n    conv_128 = Conv2d(128, (4, 4))(batch_norm_3)\n    avg_pool_128 = AveragePooling2D((2,2))(conv_128)\n    batch_norm_128 = BatchNormalization()(avg_pool_128)\n    conv_256 = Conv2d(256, (5, 5))(batch_norm_128)\n    avg_pool_256 = AveragePooling2D((2,2))(conv_256)\n    batch_norm_256 = BatchNormalization()(avg_pool_256)\n    conv_4 = Conv2d(64, (7, 7))(batch_norm_256)\n    avg_pool_4 = AveragePooling2D((2, 2))(conv_4)\n    batch_norm_4 = BatchNormalization()(avg_pool_4)\n    conv_5 = Conv2d(32, (7, 7))(batch_norm_4)\n    flat_1 = Flatten()(conv_5)\n    dense_1 = Dense(30)(flat_1)\n    outputs = Dense(30)(dense_1)\n    model = tf.keras.Model(input, dense_1)\n    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n    return model\n\n\n\n","50d5155a":"def data_pipe(X, y, shuf_size):\n    dataset = (\n    tf.data.Dataset.from_tensor_slices((X, y))\n    .shuffle(shuf_size)\n    .batch(32)\n    .prefetch(1)\n    .repeat())\n    ite = tf.compat.v1.data.make_one_shot_iterator(dataset)\n    return dataset","8a3fd01d":"Activation='elu'\nInput = tf.keras.layers.Input\nConv2d = functools.partial(\n            tf.keras.layers.Conv2D,\n            activation=Activation,\n            padding='same'\n        )\nBatchNormalization = tf.keras.layers.BatchNormalization\nAveragePooling2D = tf.keras.layers.AveragePooling2D\nMaxPooling2D = tf.keras.layers.MaxPool2D\nDense = functools.partial(\n            tf.keras.layers.Dense,\n            activation=Activation\n        )\nFlatten = tf.keras.layers.Flatten\nmodel = prepare_model()","2fb388d0":"y = []\nX = []\nfor index, row in training.T.iterrows():\n    y.append(row.iloc[:-1].values)\n    X.append(np.array(row['Image'].split(' '), dtype=np.float32))\n\nX = np.asarray(X, dtype=np.float32).reshape(len(X), 96, 96, 1)\ny = np.asarray(y, dtype=np.float32)\n\nX = [x \/ 255.0 for x in X]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=42)\n\ntrain_data = data_pipe(X_train, y_train, len(X_train))\ntest_data = data_pipe(X_test, y_test, len(X_test))","cc4f93ab":"logdir = os.path.join(\"logs\", datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\ntensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)\ncallbacks = [\n    tf.keras.callbacks.ModelCheckpoint(filepath='.\/weights.hdf5', verbose=1, save_best_only=True),\n    tensorboard_callback,\n    tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\n]","aad90d6f":"model.fit(train_data, steps_per_epoch=24, epochs=250, validation_data=test_data, validation_steps=6)","971fa828":"len(X_train)","d6e3501c":"len(X_test)","7a93b7bd":"averagedData = trainData.iloc[:,:-1].apply(lambda x: x.fillna(x.mean())) \naveragedData['Image'] = trainData['Image']","7ed20b97":"y = []\nX = []\nfor index, row in averagedData.iterrows():\n    y.append(row.iloc[:-1].values)\n    X.append(np.array(row['Image'].split(' '), dtype=np.float32))\n\nX = np.asarray(X, dtype=np.float32).reshape(len(X), 96, 96, 1)\ny = np.asarray(y, dtype=np.float32)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=42)\n\ntrain_data = data_pipe(X_train, y_train, len(X_train))\ntest_data = data_pipe(X_test, y_test, len(X_test))","1a2b557e":"model.fit(train_data, steps_per_epoch=26, epochs=500, validation_data=test_data, validation_steps=6)","0c2d6ee8":"y_test_guess = model.predict(X_test)\n\nfor i in range(1,50):\n    fig, ax = plt.subplots()\n    ax.imshow(X_test[i*5].reshape(96,96),cmap=\"gray\")\n    ax.scatter(y_test_guess[i*3][0::2], y_test_guess[i*3][1::2])\n    plt.show()\n    time.sleep(1)","b959a8de":"Lets try building a model on just our fully labelled data\n","340a4eb9":"*Attempt to average each feature and plot for images missing values. Looks promising for some images but not great for most. Bad labels probably worse than no labels*","c11571f8":"Lets see the effect of averaging unknown points on the accuracy. As oppose to just excluding those images like above.."}}