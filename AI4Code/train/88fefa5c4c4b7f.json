{"cell_type":{"e343c47e":"code","6be47f65":"code","67182d9f":"code","848cdcad":"code","879e8aa6":"code","173e4369":"code","335829e4":"code","707192db":"code","a2791c26":"code","7d41ce7e":"code","7b61a100":"code","437c8f00":"code","d9708122":"code","5699a01c":"code","180c7222":"code","2eaf26ed":"code","9c534f55":"code","f34762fb":"code","a126af1b":"code","460bdd39":"code","cfee2250":"code","5d652a94":"code","7bdf91ff":"code","9ed319eb":"code","d58efdba":"code","a130e74a":"code","74c8de4e":"code","22626ad8":"code","2c0025ce":"code","7d292236":"code","7dc28dd5":"code","368f7d52":"code","906da902":"code","8d2f2495":"code","c880a154":"code","3eddcb51":"code","935b86ab":"code","7716069f":"code","74754d02":"code","27bad2e1":"code","427caae4":"code","dddfbd82":"code","379041f4":"code","f3325409":"code","9d83e8ce":"code","c314b902":"code","5ef6da0b":"code","e3e54749":"code","4c821df3":"code","f64a1324":"code","e2f03fe7":"code","b99b7080":"code","5f787748":"code","e7a5d40c":"code","9a03495a":"code","d456518a":"code","69e4264b":"code","d3376abf":"code","67b4952a":"code","637b094b":"code","de80d1de":"code","0334e818":"code","259c4897":"code","8064639d":"code","4e0f9e1b":"code","1b69b341":"code","e14b4506":"code","2f8d4e6d":"code","7987f3c8":"code","c5facd8b":"code","9903b8f7":"code","bcacd230":"code","421c6708":"code","defe9814":"code","01827961":"code","b48e91b8":"code","31ecc0dd":"code","fb5274b5":"code","b7449b7c":"code","5696e376":"code","fe5f56d2":"code","063eaa96":"code","1cf18042":"code","4c9873e2":"code","0dc6f854":"code","932e56bc":"code","f17cb1cc":"code","7ef24c6a":"code","35eb290a":"code","7a5adfef":"code","bee38eeb":"code","d46eedcf":"code","3baa5b69":"code","fe3042e5":"code","073e1870":"code","b943bcbc":"code","6ac09036":"code","87d6722a":"code","28127ffe":"code","711f66c7":"code","53cfdaad":"code","641fb3d7":"code","e1080c4c":"code","aab1ee06":"code","96fdaeaf":"code","eb45e983":"code","a166d7f0":"code","7fe4be53":"code","a1724752":"markdown","3f4db413":"markdown","37c9f9c0":"markdown","ae0e92d7":"markdown","1a9c58c5":"markdown","630b0da2":"markdown","bd53356e":"markdown","4d409ed5":"markdown","2e34a1ac":"markdown","49508a89":"markdown","5ad495f9":"markdown"},"source":{"e343c47e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nimport statsmodels.api as sm\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.linear_model import Lasso,LassoCV,Ridge,RidgeCV,ElasticNet,ElasticNetCV\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n","6be47f65":"df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndft = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n# pd.set_option('display.max_rows',None)\n# pd.set_option('display.max_columns',None)","67182d9f":"df.head()","848cdcad":"dft.head()","879e8aa6":"# checking for null Values\ndf.isnull().sum()","173e4369":"full = df.append(dft)","335829e4":"full.info()","707192db":"df.shape","a2791c26":"sns.distplot(df['SalePrice'],fit = stats.norm)","7d41ce7e":"mu,sigma = stats.norm.fit(df['SalePrice'])","7b61a100":"# mu, sigma","437c8f00":"plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\n\n#Probablity plot\n\nfig = plt.figure()\nstats.probplot(df['SalePrice'], plot=plt)\nplt.show()","d9708122":"sm.qqplot(df['SalePrice'],line = 'r')","5699a01c":"df['SalePrice'] = np.log(df['SalePrice']+1)\n\n#Check again for more normal distribution\n\nplt.subplots(figsize=(12,9))\nsns.distplot(df['SalePrice'], fit=stats.norm)\n\n# Get the fitted parameters used by the function\n(mu, sigma) = stats.norm.fit(df['SalePrice'])\n\n# plot with the distribution\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\n\n#Probablity plot\n\nfig = plt.figure()\nstats.probplot(df['SalePrice'], plot=plt)\nplt.show()\n","180c7222":"df.isnull().sum()","2eaf26ed":"# % of missing values\nIsnull  = df.isnull().sum()\/len(df) * 100\nIsnull = Isnull[Isnull>0]\nIsnull.sort_values(inplace = True,ascending = False)\nIsnull","9c534f55":"Isnull = Isnull.to_frame()","f34762fb":"Isnull.columns = ['count']\nIsnull.index.names = ['Name']\nIsnull['Name'] = Isnull.index","a126af1b":"Isnull","460bdd39":"#plot Missing values\nplt.figure(figsize=(13, 5))\nsns.set(style='whitegrid')\nsns.barplot(x='Name', y='count', data=Isnull)\nplt.xticks(rotation = 60)\nplt.show()","cfee2250":"df_corr = df.select_dtypes(include=[np.number])","5d652a94":"df_corr.shape","7bdf91ff":"df_corr","9ed319eb":"#Delete Id because that is not need for corralation plot\ndel df_corr['Id']","d58efdba":"corr = df_corr.corr()\nplt.subplots(figsize=(20,9))\nsns.heatmap(corr, annot=True)","a130e74a":"top_feature = corr.index[abs(corr['SalePrice']>0.5)]\nplt.subplots(figsize=(12, 8))\ntop_corr = df[top_feature].corr()\nsns.heatmap(top_corr, annot=True)\nplt.show()","74c8de4e":"num_cols = list(df.select_dtypes(include = np.number))","22626ad8":"num_colst = list(dft.select_dtypes(include = np.number))","2c0025ce":"dfn = df[num_cols]\ndftn = dft[num_colst]","7d292236":"# dfn.isnull().sum()","7dc28dd5":"# dftn.isnull().sum()","368f7d52":"dfn['LotFrontage'].fillna(dfn['LotFrontage'].mode()[0],inplace = True)\ndftn['LotFrontage'].fillna(dftn['LotFrontage'].mode()[0],inplace = True)","906da902":"dfn['MasVnrArea'].fillna(dfn['MasVnrArea'].mode()[0],inplace = True)\ndftn['MasVnrArea'].fillna(dftn['MasVnrArea'].mode()[0],inplace = True)\n","8d2f2495":"dfn['GarageYrBlt'].unique()","c880a154":"dfn['GarageYrBlt'].fillna(dfn['GarageYrBlt'].median(),inplace = True)\ndftn['GarageYrBlt'].fillna(dftn['GarageYrBlt'].median(),inplace = True)\n\ndfn.info()","3eddcb51":"dftn.isnull().sum()","935b86ab":"dftn['BsmtFinSF1'].fillna(method='ffill',inplace = True)\ndftn['BsmtFinSF2'].fillna(method='ffill',inplace = True)\ndftn['BsmtUnfSF'].fillna(method='ffill',inplace = True)\ndftn['TotalBsmtSF'].fillna(method='ffill',inplace = True)\ndftn['BsmtFullBath'].fillna(method='ffill',inplace = True)\ndftn['BsmtHalfBath'].fillna(method='ffill',inplace = True)\ndftn['GarageCars'].fillna(method='ffill',inplace = True)\ndftn['GarageArea'].fillna(method='ffill',inplace = True)","7716069f":"dftn.isnull().sum()","74754d02":"dfn['MasVnrArea'].unique()","27bad2e1":"dfn['MasVnrArea'] = dfn['MasVnrArea'].astype(float)\ndfn.isnull().sum()","427caae4":"dfn.drop('Id',axis = 1,inplace = True)\ndftn.drop('Id',axis = 1,inplace = True)\n","dddfbd82":"for col in dfn.columns:\n    print(' ')\n    print(col)\n    print(dfn[col].value_counts())","379041f4":"co = list(dfn['OverallQual'].value_counts().head(5).index)\ndfn['OverallQual'] = np.where(dfn['OverallQual'].isin(co),dfn['OverallQual'],'Other')\nco = list(dftn['OverallQual'].value_counts().head(5).index)\ndftn['OverallQual'] = np.where(dftn['OverallQual'].isin(co),dftn['OverallQual'],'Other')","f3325409":"co = list(dfn['OverallCond'].value_counts().head(3).index)\ndfn['OverallCond'] = np.where(dfn['OverallCond'].isin(co),dfn['OverallCond'],'Other')\n\nco = list(dftn['OverallCond'].value_counts().head(3).index)\ndftn['OverallCond'] = np.where(dftn['OverallCond'].isin(co),dftn['OverallCond'],'Other')","9d83e8ce":"cd = list(dfn['YearBuilt'].value_counts().head(10).index)\ndfn['YearBuilt'] = np.where(dfn['YearBuilt'].isin(cd),dfn['YearBuilt'],'Other')\n\ncd = list(dftn['YearBuilt'].value_counts().head(10).index)\ndftn['YearBuilt'] = np.where(dftn['YearBuilt'].isin(cd),dftn['YearBuilt'],'Other')","c314b902":"cf = list(dfn['YearRemodAdd'].value_counts().head(10).index)\ndfn['YearRemodAdd'] = np.where(dfn['YearRemodAdd'].isin(cf),dfn['YearRemodAdd'],'Other')\ncf = list(dftn['YearRemodAdd'].value_counts().head(10).index)\ndftn['YearRemodAdd'] = np.where(dftn['YearRemodAdd'].isin(cf),dftn['YearRemodAdd'],'Other')","5ef6da0b":"ce = list(dfn['GarageYrBlt'].value_counts().head(10).index)\ndfn['GarageYrBlt'] = np.where(dfn['GarageYrBlt'].isin(ce),dfn['GarageYrBlt'],'Other')\n\nce = list(dftn['GarageYrBlt'].value_counts().head(10).index)\ndftn['GarageYrBlt'] = np.where(dftn['GarageYrBlt'].isin(ce),dftn['GarageYrBlt'],'Other')","e3e54749":"cg = list(dfn['GarageCars'].value_counts().head(3).index)\ndfn['GarageCars'] = np.where(dfn['GarageCars'].isin(cg),dfn['GarageCars'],'Other')\n\ncg = list(dftn['GarageCars'].value_counts().head(3).index)\ndftn['GarageCars'] = np.where(dftn['GarageCars'].isin(cg),dftn['GarageCars'],'Other')","4c821df3":"cat_cols = ['OverallQual','OverallCond','YearBuilt','GarageYrBlt','GarageCars','YearRemodAdd']","f64a1324":"dfn=pd.get_dummies(dfn,columns=cat_cols,drop_first=True)\ndftn=pd.get_dummies(dftn,columns=cat_cols,drop_first=True)","e2f03fe7":"print(dfn.shape)\nprint(dftn.shape)","b99b7080":"X = dfn.drop('SalePrice',axis = 1)\ny = dfn['SalePrice']","5f787748":"from sklearn.ensemble import RandomForestRegressor","e7a5d40c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,random_state = 42)","9a03495a":"rf = RandomForestRegressor()\nrf = rf.fit(X_train, y_train)\ny_pred =  rf.predict(X_test)\nrf.score(X_test,y_test)","d456518a":"r2_score(y_test,y_pred)","69e4264b":"print('RMSe : ',np.sqrt(mean_squared_error(y_test,y_pred)))","d3376abf":"dfn.head()","67b4952a":"dftn.head()","637b094b":"def rmsle(real, predicted):\n    sum=0.0\n    for x in range(len(predicted)):\n        if predicted[x]<0 or real[x]<0: #check for negative values\n            continue\n        p = np.log(predicted[x]+1)\n        r = np.log(real[x]+1)\n        sum = sum + (p - r)**2\n    return (sum\/len(predicted))**0.5","de80d1de":"X = dfn.drop('SalePrice',axis = 1)\ny = dfn['SalePrice']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,random_state = 42)","0334e818":"from xgboost import XGBRegressor","259c4897":"xgb = XGBRegressor()\nxgb = xgb.fit(X_train,y_train)\ny_pred = xgb.predict(X_test)","8064639d":"xgb.score(X_test,y_test)","4e0f9e1b":"r2_score(y_test,y_pred)","1b69b341":"print('RMSe : ',np.sqrt(mean_squared_error(y_test,y_pred)))","e14b4506":"# rmsle(y_test,y_pred)","2f8d4e6d":"X = dfn.drop('SalePrice',axis = 1)\ny = dfn['SalePrice']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,random_state = 42)","7987f3c8":"from sklearn.metrics import mean_squared_error\ndef adjusted_r2_score(y_true, y_pred, X_test):\n    r2 = r2_score(y_true=y_true, y_pred=y_pred)\n    adjusted_r2 = 1 - (1-r2)*(len(y_true)-1)\/(len(y_true) - X_test.shape[1]-1)\n    return adjusted_r2","c5facd8b":"xgr = XGBRegressor(objective='reg:linear', n_estimators=50, max_depth=5, n_jobs=-1, random_state=42)\nxgr.fit(X_train, y_train)\n\ny_pred = xgr.predict(X_test)\n\nrsq_baseline2_xgb = r2_score(y_true=y_test, y_pred=y_pred)\nadj_rsq_baseline2_xgb = adjusted_r2_score(y_true=y_test, y_pred=y_pred, X_test=X_test)\nrmse_baseline2_xgb = mean_squared_error(y_true=y_test, y_pred=y_pred) ** 0.5\nprint('R-sq:', rsq_baseline2_xgb)\nprint('Adj. R-sq:', adj_rsq_baseline2_xgb)\nprint('RMSE:', rmse_baseline2_xgb)","9903b8f7":"from sklearn.tree import DecisionTreeRegressor","bcacd230":"X = dfn.drop('SalePrice',axis = 1)\ny = dfn['SalePrice']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,random_state = 42)","421c6708":"dt = DecisionTreeRegressor()\ndt = dt.fit(X_train,y_train)\ny_pred = dt.predict(X_test)","defe9814":"\nprint('r2_score: ',r2_score(y_test,y_pred))\nprint('Accuracy: ',dt.score(X_test,y_test))\nprint('RMSE: ',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('adj r sq.: ',1 - (1-r2_score(y_test,y_pred))*(len(y_test)-1)\/(len(y_test) - X_test.shape[1]-1) )","01827961":"from sklearn.model_selection import GridSearchCV\n","b48e91b8":"# # rf = RandomForestRegressor()\n\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# rfc = RandomForestRegressor(n_jobs=-1 , oob_score = True,random_state = 42) \n\n# param_grid = {\n#     'n_estimators': [50,100,200, 700],\n#     'max_features': ['auto', 'sqrt', 'log2'],\n#     }\n\n# CV_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5)\n# CV_rfc.fit(X_train,y_train)\n# print('\\n',CV_rfc.best_estimator_)","31ecc0dd":"rf = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n                      max_features='sqrt', max_leaf_nodes=None,\n                      min_impurity_decrease=0.0, min_impurity_split=None,\n                      min_samples_leaf=1, min_samples_split=2,\n                      min_weight_fraction_leaf=0.0, n_estimators=700, n_jobs=-1,\n                      oob_score=True, random_state=42, verbose=0,\n                      warm_start=False)\n\n\nX = dfn.drop('SalePrice',axis = 1)\ny = dfn['SalePrice']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,random_state = 42)\n\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\n# y_pred = np.exp(y_pred-1)\nprint('r2_score: ',r2_score(y_test,y_pred))\nprint('Accuracy: ',dt.score(X_test,y_test))\nprint('RMSE: ',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('adj r sq.: ',1 - (1-r2_score(y_test,y_pred))*(len(y_test)-1)\/(len(y_test) - X_test.shape[1]-1) )","fb5274b5":"X.head()","b7449b7c":"dftn.head()","5696e376":"pred = rf.predict(dftn)","fe5f56d2":"predantilog = np.exp(pred)-1","063eaa96":"predantilog","1cf18042":"import xgboost as xgb","4c9873e2":"data_dmatrix = xgb.DMatrix(data=X,label=y)","0dc6f854":"# X_train.head()","932e56bc":"params = {\"objective\":\"reg:linear\",'colsample_bytree': 0.3,'learning_rate': 0.1,\n                'max_depth': 20, 'alpha': 10}\n\ncv_results = xgb.cv(dtrain=data_dmatrix, params=params, nfold=3,\n                    num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)","f17cb1cc":"cv_results.head()","7ef24c6a":"print((cv_results[\"test-rmse-mean\"]).tail(1))\n","35eb290a":"# xg = XGBRegressor(n_jobs = -1)\n# params = {\n#         'max_depth' : [10,20],\n#         'learning_rate' : [0.1,0.2],\n#         'n_estimators' : [100,200],\n#         \"subsample\" : [0.5, 0.8]\n        \n#         }\n\n# grid = GridSearchCV(estimator = xg,param_grid=params,cv = 5,n_jobs = -1)\n# grid.fit(X_train,y_train)\n# grid.best_params_","7a5adfef":"xg  = XGBRegressor(max_depth = 20,subsample=0.8).fit(X_train,y_train)\npredic = xg.predict(X_test)\nprint('r2_score: ',r2_score(y_test,predic))\nprint('Accuracy: ',dt.score(X_test,predic))\nprint('RMSE: ',np.sqrt(mean_squared_error(y_test,predic)))\nprint('adj r sq.: ',1 - (1-r2_score(y_test,predic))*(len(y_test)-1)\/(len(y_test) - X_test.shape[1]-1) )\n","bee38eeb":"xg.feature_importances_","d46eedcf":"feat_importances = pd.Series(xg.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')","3baa5b69":"X.head()","fe3042e5":"X.shape","073e1870":"from sklearn.preprocessing import StandardScaler","b943bcbc":"X_std = pd.DataFrame(StandardScaler().fit_transform(X),columns = X.columns)","6ac09036":"cov_matrix = np.cov(X_std.T)\nprint(']n Covariance Matrix \\n%s',cov_matrix)","87d6722a":"eig_vals, eig_vecs = np.linalg.eig(cov_matrix)\nprint('Eigen Values \\n%s',eig_vals)\nprint('Eigen Vectors \\n%s',eig_vecs)","28127ffe":"eigen_pairs = [(np.abs(eig_vals[i]),eig_vecs[:,i]) for i in range(len(eig_vals))]\ntot  = sum(eig_vals)\nvar_exp = [(i\/tot)*100 for i in sorted(eig_vals,reverse = True)]\ncum_var_exp = np.cumsum(var_exp)\nprint('Cumulative VAriance Explained',cum_var_exp)","711f66c7":"from sklearn.preprocessing import StandardScaler\nscX = StandardScaler() \nX_train = scX.fit_transform(X_train) \nX_test = scX.fit_transform(X_test)","53cfdaad":"from sklearn.decomposition import PCA\npca = PCA(n_components = None) \nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\nexplainedvariance = pca.explained_variance_ratio_","641fb3d7":"# rf = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n#                       max_features='sqrt', max_leaf_nodes=None,\n#                       min_impurity_decrease=0.0, min_impurity_split=None,\n#                       min_samples_leaf=1, min_samples_split=2,\n#                       min_weight_fraction_leaf=0.0, n_estimators=700, n_jobs=-1,\n#                       oob_score=True, random_state=42, verbose=0,\n#                       warm_start=False)\nfrom sklearn.ensemble import AdaBoostRegressor\nimport xgboost as xgb\nrf = xgb.XGBRegressor(max_depth=3)\npredicts = rf.fit(X_train,y_train).predict(X_test)\nnp.sqrt(mean_squared_error(y_test,predicts))","e1080c4c":"# dftn = scX.fit_transform(dftn) \n# dftn = pca.fit_transform(dftn)","aab1ee06":"# predictrf = rf.predict(dftn)","96fdaeaf":"# predictrfanti = np.exp(predictrf)-1","eb45e983":"xg  = XGBRegressor(max_depth = 20,subsample=0.8).fit(X_train,y_train)\npredic = xg.predict(X_test)\nprint('r2_score: ',r2_score(y_test,predic))\nprint('Accuracy: ',dt.score(X_test,predic))\nprint('RMSE: ',np.sqrt(mean_squared_error(y_test,predic)))\nprint('adj r sq.: ',1 - (1-r2_score(y_test,predic))*(len(y_test)-1)\/(len(y_test) - X_test.shape[1]-1) )\n","a166d7f0":"t = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission_predicted = pd.DataFrame({'Id' : t['Id'],'SalePrice':predantilog })\nsubmission_predicted.head()","7fe4be53":"submission_predicted.to_csv('submission.csv',index = False)","a1724752":"#### As we are seeing below that slightly data is right skewed so we will convert the target varaible into log form.","3f4db413":"### Random Forest","37c9f9c0":"### The best results were given by Random Forest with hyperparameters tuning and rmse of 0.17","ae0e92d7":"### Grid Search CV","1a9c58c5":" ### XGBOOSt ","630b0da2":"### Data Imputation : Filling Na","bd53356e":"### Decision Tree","4d409ed5":"### So in this what we are going to do is trying out every combination of feature engineering and \n### will go for every ML algo which is most suitable and will pick the best.\n### The dataset is all about everything for a house related things \n### Target Variable : SalePrice","2e34a1ac":"#### Glimpse of the data - Train and test","49508a89":"#### Importing all libraries","5ad495f9":"### Modelling"}}