{"cell_type":{"1bda5d34":"code","c7949eea":"code","6c038b54":"code","f40e22a9":"code","cecab38d":"code","f4f3be54":"code","9d7cdb12":"code","3ceafad0":"code","2ab77a78":"code","6c57c2e3":"code","5020f9b8":"code","08475531":"code","5a29fdb3":"code","9beed8c7":"code","30feda08":"code","7f0030e7":"code","f6cab0a4":"code","614fbf5c":"code","61ed2a9f":"code","ed1633bd":"code","5c36efd0":"code","7e30430a":"code","fe54bfef":"code","f95a267c":"code","9fbb1f51":"code","aff70cd6":"code","d3c6cfcb":"code","32129d19":"code","c8c7f66a":"code","231be446":"markdown","a321cc91":"markdown","d89733c2":"markdown","dc8878af":"markdown","7c3daa86":"markdown","ea5be93d":"markdown","4cb1e18e":"markdown","6558ee52":"markdown","6a5dbf4c":"markdown","1c3a0aa6":"markdown"},"source":{"1bda5d34":"from argparse import Namespace\n\n#There are 1115 stores. Select a  small sample to do experimentation on. Select all for full training.\nnum_sample_stores=1115\n\n#The test set is 47 days. Normally use the last 47 days of the training data for validation. Se to 0 and use all data for traing when submitting to kaggle\nvalid_days=0\n\n#Hyperparameters\ns= Namespace( **{\n    \"l1\":4497,\n    \"l2\":2328,\n    \"ps1\":0.2771132028380148,\n    \"ps2\":0.15631474446268287,\n    \"emb_drop\":0.14301109844119272,\n    \"batchsize\":64,\n    \"lrate\":0.0660858230905056,\n    \"lrate_ratio\":9,\n    \"wd\":0.17305139150930285,\n    \"l1epoch\":4,\n    \"l2epoch\":3,\n    \"l3epoch\":8,\n})\n","c7949eea":"from pathlib import Path\nfrom datetime import datetime, timedelta\n\nimport numpy as np\nimport pandas as pd\n\nfrom fastai import *\nfrom fastai.tabular import * \n\n\n#display results\nimport plotly\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport cufflinks as cf\n","6c038b54":"plotly.offline.init_notebook_mode(connected=False)\ncf.go_offline()\n\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\n\npd.set_option('display.max_columns', 0)\npd.set_option('display.max_rows', 500)","f40e22a9":"!ls ..\/input\/","cecab38d":"path=Path(\"..\/input\/rossmann-data-engineering\/\")\ntraindf=pd.read_feather(path\/\"train.feather\")\ntestdf=pd.read_feather(path\/\"test.feather\")","f4f3be54":"#Remove zero sales\ntraindata=traindf[traindf[\"Sales\"]!=0]\n\n#Select sample base num_sample_stores \nsample_stores=list(range(1,num_sample_stores+1)) \ntraindata=traindata[traindata.Store.isin(sample_stores)].sample(frac=1,random_state=0).reset_index(drop=True) ","9d7cdb12":"#Select size validation set based on valid_days variable \nfrom datetime import datetime, timedelta\nvalid_idx=traindata[traindata.Date>=(traindata.Date.max()- timedelta(days=valid_days))].index.tolist()","3ceafad0":"#Convert datetime columns to int64 for traning\ndatecols=traindata.select_dtypes(include=\"datetime\").columns.tolist()\ntraindata[datecols]=traindata[datecols].astype(\"int64\")\ntestdf[datecols]=testdf[datecols].astype(\"int64\")","2ab77a78":"procs = [FillMissing, Categorify, Normalize]\ndep_var = 'Sales'\n#cont_names,cat_names= cont_cat_split(sample_train,dep_var=\"Sales\")\ncont_names=[\n 'CompetitionDistance',\n 'Week',\n 'Day',\n 'Dayofyear',\n 'Elapsed',\n 'ratio-sales-customer',\n 'ratio-saturday-week',\n 'ratio-sunday-week',\n 'ratio-promo-nopromo',\n 'Promo_thisweek',\n 'Open_thisweek',\n 'StateHolidayBool_thisweek',\n 'SchoolHoliday_thisweek',\n 'Promo_prevweek',\n 'Open_prevweek',\n 'StateHolidayBool_prevweek',\n 'SchoolHoliday_prevweek',\n 'Promo_nextweek',\n 'Open_nextweek',\n 'StateHolidayBool_nextweek',\n 'SchoolHoliday_nextweek',\n 'Promo2Days',\n 'CompetitionDaysOpen',\n 'trend',\n 'trend_DE',\n 'Max_Humidity',\n 'Max_Wind_SpeedKm_h',\n 'Mean_Humidity',\n 'Mean_TemperatureC',\n 'Max_TemperatureC_chnage',\n 'Month_Sales_mean',\n 'Year_Sales_mean',\n 'Dayofweek_Sales_mean',\n 'Dayofweek_promo_Sales_mean',\n 'BeforeSchoolHoliday',\n 'AfterSchoolHoliday',\n 'BeforeClosed',\n 'AfterClosed',\n 'BeforePromo',\n 'AfterPromo',\n 'BeforeStateHolidayBool',\n 'AfterStateHolidayBool',\n 'Promo2ActiveMonthBool',\n 'BeforePromo2ActiveMonthBool',\n 'AfterPromo2ActiveMonthBool',\n 'SchoolHoliday_fw',\n 'StateHolidayBool_fw',\n 'Promo_fw',\n 'Closed_fw',\n 'Promo2ActiveMonthBool_fw',\n    'CompetitionOpenSince', 'Promo2Since'\n]\ncat_names=[\n  'Store',  \n  'DayOfWeek',\n 'Open',\n 'Promo',\n 'StateHoliday',\n 'SchoolHoliday',\n 'StoreType',\n 'Assortment',\n 'Promo2',\n 'PromoInterval',\n 'Year',\n 'Month',\n 'Dayofweek',\n 'Is_month_end',\n 'Is_month_start',\n 'Is_quarter_end',\n 'Is_quarter_start',\n 'Is_year_end',\n 'Is_year_start',\n 'Promo2SinceYear',\n 'Promo2Na',\n 'Events',\n'Fog',\n 'Hail',\n 'Rain',\n 'Snow',\n 'Thunderstorm',\n 'Quarter',\n 'CompetitionOpenNA',\n 'CompetitionDistanceNA',\n 'CompetitionOpenSinceYear',\n  'State'\n]\n","6c57c2e3":"max_log_y = np.log(np.max(traindata['Sales']))#*1.2\ny_range = torch.tensor([0, max_log_y], device=defaults.device)","5020f9b8":"databunch = (TabularList.from_df(traindata, path=\"\", cat_names=cat_names, cont_names=cont_names, procs=procs,)\n                .split_by_idx(valid_idx)\n                .label_from_df(cols=dep_var, label_cls=FloatList, log=True)\n                .add_test(TabularList.from_df(testdf, path=path, cat_names=cat_names, cont_names=cont_names))\n                .databunch())\ndatabunch.batch_size=s.batchsize","08475531":"learn = tabular_learner(databunch, layers=[s.l1,s.l2], ps=[s.ps1,s.ps2], emb_drop=s.emb_drop, y_range=y_range, metrics=exp_rmspe)","5a29fdb3":"learn.model","9beed8c7":"learn.lr_find()","30feda08":"learn.recorder.plot()","7f0030e7":"learn.fit_one_cycle(s.l1epoch, s.lrate, wd=s.wd)","f6cab0a4":"learn.fit_one_cycle(s.l2epoch, s.lrate\/s.lrate_ratio, wd=s.wd)","614fbf5c":"learn.fit_one_cycle(s.l3epoch, s.lrate\/(s.lrate_ratio*s.lrate_ratio), wd=s.wd)","61ed2a9f":"valid_preds=learn.get_preds(DatasetType.Valid)\ntraindata[\"SalesPreds\"]=pd.Series(index=traindata.iloc[valid_idx].index,data=np.exp(valid_preds[0].numpy().T[0]))","ed1633bd":"#Define error function\ndef rmspe_metric(act,pred):\n       return np.sqrt(np.mean(((act-pred)\/act)**2))","5c36efd0":"rmspe_metric(traindata.Sales,traindata.SalesPreds)","7e30430a":"#Sort stores by how much error\nstore_rmspe=traindata.groupby([\"Store\"]).apply(lambda x:rmspe_metric(x.Sales,x.SalesPreds)).sort_values(ascending=False)","fe54bfef":"store_rmspe.iplot(kind=\"histogram\")","f95a267c":"store_rmspe[:10]","9fbb1f51":"t=traindata.set_index(\"Date\")","aff70cd6":"#Stores with most error\nfor store in store_rmspe.index[:4].tolist():\n    t[t.Store==store][[\"Sales\",\"SalesPreds\"]].iplot(kind=\"bar\",barmode=\"overlay\",title=\"Store {}\".format(store))","d3c6cfcb":"#Stores with least error\nfor store in store_rmspe.index[-4:].tolist():\n    t[t.Store==store][[\"Sales\",\"SalesPreds\"]].iplot(kind=\"bar\",barmode=\"overlay\",title=\"Store {}\".format(store))","32129d19":"test_preds=learn.get_preds(DatasetType.Test)\ntestdf[\"Sales\"]=np.exp(test_preds[0].data).numpy().T[0]\ntestdf[[\"Id\",\"Sales\"]]=testdf[[\"Id\",\"Sales\"]].astype(\"int\")\ntestdf[[\"Id\",\"Sales\"]].to_csv(\"rossmann_submission.csv\",index=False)","c8c7f66a":"#!kaggle competitions submit -c rossmann-store-sales -f rossmann_submission.csv -m \"rossman with extra features\"","231be446":"## Visualize results ","a321cc91":"# Validation data","d89733c2":"## Test data","dc8878af":"# Deep learning with fast.ai v1 simple version\n\nThis notebook is part of series of notebooks analyzing the Rossmann store data set:\n\n 1. [Deep learning with fast.ai v1 simple version](https:\/\/www.kaggle.com\/omgrodas\/rossmann-deep-learning-with-fast-ai-v1-simplen)\n 2. [Exploratory data analysis](https:\/\/www.kaggle.com\/omgrodas\/rossmann-exploratory-data-analysis)(this one)\n 2. [Data engineering](https:\/\/www.kaggle.com\/omgrodas\/rossmann-data-engineering) \n 3. [Deep Learning with fast.ai](https:\/\/www.kaggle.com\/omgrodas\/rossmann-deep-learning-with-fast-ai-v1) \n 4. Hyper parameter search with hyperopt\n \nThese notebooks are based one the notebook used in lesson 3 of the fast.ai deep learning for coders course.\n\nhttps:\/\/github.com\/fastai\/fastai\/blob\/master\/courses\/dl1\/lesson3-rossman.ipynb\n\nIdeas for extra features are taken from:\n\nhttps:\/\/www.kaggle.com\/c\/rossmann-store-sales\/discussion\/17896","7c3daa86":"## Validation results","ea5be93d":"# Create train,validation and test dataset\n","4cb1e18e":"# Deep learning","6558ee52":"# Setup enviroment","6a5dbf4c":"# Load Data","1c3a0aa6":"## Variables"}}