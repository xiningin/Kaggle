{"cell_type":{"476fa874":"code","c5eea043":"code","4d9ed979":"code","3bd152cd":"code","f01d3981":"code","bdf725e6":"code","48c17005":"code","b00df3e7":"code","26692e96":"code","24d37b1f":"code","5b36de86":"code","6fcc8d13":"code","aedff057":"code","50e2bd9d":"code","a5e7cb03":"code","524723fa":"code","4a7c6fd8":"code","8c91605f":"code","42e139db":"code","6ec51464":"code","cedc88bc":"code","731c8e7d":"code","2f0b1fe4":"code","27b3a992":"code","a0207b89":"code","abbd58ee":"code","9d67ed1c":"code","38c3b5aa":"code","a1ab6b08":"code","baa96365":"markdown","4cf7fb73":"markdown","3f9f028e":"markdown","70b0f277":"markdown","5269a564":"markdown","807f2333":"markdown","33606434":"markdown","52cafb39":"markdown","ef5fffe9":"markdown","9f9d6b68":"markdown","c1158182":"markdown","a8bfe017":"markdown","790787cb":"markdown","3b9cca05":"markdown","b03dc503":"markdown","bb8d5a2d":"markdown","9df1924f":"markdown","848ecfb4":"markdown","4f3d09c1":"markdown"},"source":{"476fa874":"from math import pi\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.basemap import Basemap\nfrom bokeh.io import output_notebook, show\nfrom bokeh.palettes import Category20c\nfrom bokeh.plotting import figure\nfrom bokeh.transform import cumsum\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\ndir = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        dir.append(os.path.join(dirname, filename))\n        \n\n# Any results you write to the current directory are saved as output.","c5eea043":"df_loaded = pd.read_csv(dir[0])\n#dataset = pd.read_csv(dir[1])","4d9ed979":"df_loaded.shape","3bd152cd":"df_loaded.head()","f01d3981":"df_loaded.tail()","bdf725e6":"df_loaded.info()","48c17005":"df_loaded.describe()","b00df3e7":"df_loaded.isnull().sum()","26692e96":"indek = df_loaded.columns.where((df_loaded.isnull().sum() \/ len(df_loaded) * 100) >= 50).dropna()\ndf_clean = df_loaded.drop(columns = indek)","24d37b1f":"numerikal = ['odometer', 'weather']\nkategorikal = ['year', 'manufacturer', 'make', 'condition', 'cylinders', 'fuel', 'title_status', 'transmission',\n               'drive', 'paint_color', 'county_fips', 'county_name', 'state_code', 'type']\nunused = ['image_url', 'state_fips']","5b36de86":"for num in numerikal:\n    df_clean[num] = df_clean[num].fillna(df_clean[num].mean())","6fcc8d13":"for kat in kategorikal:\n    df_clean[kat] = df_clean[kat].fillna(df_clean[kat].mode().values[0])","aedff057":"df_clean = df_clean.drop(columns = unused)","50e2bd9d":"df_clean.isnull().sum()","a5e7cb03":"df_clean = df_clean.where(df_clean['year']>1885)\ndf_clean = df_clean.dropna()","524723fa":"#create correlation with heatmap\ncorr = df_clean.corr(method = 'pearson')\n\n#convert correlation to numpy array\nmask = np.array(corr)\n\n#to mask the repetitive value for each pair\nmask[np.tril_indices_from(mask)] = False\nfig, ax = plt.subplots(figsize = (15,12))\nfig.set_size_inches(20,20)\nsns.heatmap(corr, mask = mask, vmax = 0.9, square = True, annot = True)","4a7c6fd8":"numerikal = ['price', 'odometer', 'lat', 'long', 'weather']\nkategorikal = ['year', 'manufacturer', 'make', 'condition', 'cylinders', 'fuel', 'title_status', 'transmission',\n               'drive', 'paint_color', 'county_fips', 'county_name', 'state_code', 'type']","8c91605f":"fig = plt.figure(figsize = (20,20))\naxes = 320\nfor num in numerikal:\n    axes += 1\n    fig.add_subplot(axes) \n    sns.boxplot(data = df_clean, x = num).set_title('%s - Boxplot' % num)\nplt.show()","42e139db":"plt.figure(figsize=(20,6))\nax = sns.countplot(x='year',data=df_clean);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=6);","6ec51464":"df_clean = df_clean.where(df_clean['year']>=1960)\ndf_clean = df_clean.dropna()","cedc88bc":"plt.figure(figsize=(20,6))\nax = sns.countplot(x='year',data=df_clean);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=6);","731c8e7d":"# fig = plt.figure(figsize = (20,20))\n# axes = 440\n# for kat in kategorikal:\n#     axes += 1\n#     fig.add_subplot(axes) \n#     ax = sns.countplot(x=kat, data=df_clean);\n#     ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=6);\n# #     sns.countplot(df_clean[kat], order = df_clean[kat].value_counts().index)\n# plt.show()","2f0b1fe4":"plt.figure(figsize=(10,6))\nyears = df_clean['year'].value_counts().iloc[:10]\nyears = pd.DataFrame({'years' : years.index.astype(int), 'count' : years.values.astype(int)})\nax = sns.barplot(x='years', y='count', data=years, order = years['years']);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=8);\nplt.title(\"Top 10 years car production\");# fig = plt.figure(figsize = (20,20))","27b3a992":"df_shuffled = df_clean.sample(frac=1)\nfig = plt.figure(figsize=(15, 15))\nm = Basemap(projection='ortho', resolution=None,\n            width=8E6, height=8E6, \n            lat_0=45,lon_0=-100)\nm.etopo(scale=0.5, alpha=0.5)\n\ni = 0\nfor index, row in df_shuffled.iterrows():\n    lat = row['lat']\n    lon = row['long']\n    xpt, ypt = m(lon, lat)\n    m.plot(xpt,ypt,'.',markersize=0.2,c=\"red\")\n    # stopping criteria\n    i = i + 1\n    if (i == 10000): break","a0207b89":"plt.figure(figsize=(10,6))\nyears = df_clean['manufacturer'].value_counts().iloc[:10]\nyears = pd.DataFrame({'manufacturer' : years.index, 'count' : years.values.astype(int)})\nax = sns.barplot(x='manufacturer', y='count', data=years, order = years['manufacturer']);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=12);\nplt.title(\"Top 10 manufacturer\");# fig = plt.figure(figsize = (20,20))","abbd58ee":"plt.figure(figsize=(10,6))\nyears = df_clean['type'].value_counts().iloc[:10]\nyears = pd.DataFrame({'type' : years.index, 'count' : years.values.astype(int)})\nax = sns.barplot(x='type', y='count', data=years, order = years['type']);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=12);\nplt.title(\"Top 10 type of car\");# fig = plt.figure(figsize = (20,20))","9d67ed1c":"plt.figure(figsize=(10,6))\nyears = df_clean['cylinders'].value_counts().iloc[:5]\nyears = pd.DataFrame({'cylinders' : years.index, 'count' : years.values.astype(int)})\nax = sns.barplot(x='cylinders', y='count', data=years, order = years['cylinders']);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=12);\nplt.title(\"Top 10 type of car\");# fig = plt.figure(figsize = (20,20))","38c3b5aa":"years = df_clean['cylinders'].value_counts().iloc[:5]\nx = {}\n\nfor A, B in zip(years.index, years.values.astype(int)):\n    x[A] = B\noutput_notebook()","a1ab6b08":"data = pd.Series(x).reset_index(name='value').rename(columns={'index':'country'})\ndata['angle'] = data['value']\/data['value'].sum() * 2*pi\ndata['color'] = Category20c[len(x)]\n\np = figure(plot_height=350, title=\"Pie Chart dari persebaran cylinders mobil yang sering terjual\", toolbar_location=None,\n           tools=\"hover\", tooltips=\"@country: @value\", x_range=(-0.5, 1.0))\n\np.wedge(x=0, y=1, radius=0.4,\n        start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),\n        line_color=\"white\", fill_color='color', legend='country', source=data)\n\np.axis.axis_label=None\np.axis.visible=False\np.grid.grid_line_color = None\n\nshow(p)","baa96365":"check if there's still any missing values in dataframe","4cf7fb73":"There's a missing values in:\n1. year\n2. manufacturer\n3. make\n4. condition\n5. cylinders\n6. fuel              \n7. odometer\n8. title_status\n9. transmission\n10. vin\n11. drive\n12. size\n13. type\n14. paint_color\n15. image_url\n16. county_fips\n17. county_name\n18. state_fip\n19. state_code\n20. weather\n\nKita harus mengisi missing values dengan values sesuai tipe data dari masing masing kolom tersebut. jika missing values lebih dari 50%, maka akan didrop. jika missing values berada pada kolom kategorikal, maka diisi dengan modus dari kolom tersebut. namun, jika missing values ada di kolom numerikal, maka diisi dengan mean.","3f9f028e":"Menampilkan semua kolom yang memiliki tipe numerikal dalam Boxplot, sehingga bisa terlihat jumlah outliernya","70b0f277":"## Visualisasi data yang ada\nTampilkan korelasi agar memudahkan menampilkan visualisasi antar 2 variable numerik","5269a564":"Berikut adalah jumlah mobil yang dijual setiap silindernya","807f2333":"## Identify missing value\n\nJika missing value terjadi pada data kategorikal, maka akan diambil modus pada kolom tersebut untuk mengisi missing value, jika numerikal maka akan diambil median dari kolom tersebut untuk mengisi missing value","33606434":"## Load the data & summarize the data","52cafb39":"Berikut adalah grafik dari top 10 Manufaktur","ef5fffe9":"Menampilkan jumlah mobil diproduksi setiap tahunnya","9f9d6b68":"Berikut adalah tipe mobil yang paling banyak dijual","c1158182":"fill or drop the columns with missing values","a8bfe017":"Setelah mengetahui pergerakan grafik penjualan dari pembuatan mobil, berikut adalah grafik tahun produksi mobil yang dijual kembali","790787cb":"drop saat missing values lebih dari 50%","3b9cca05":"mengelompokkand data berdasarkan kategorikal, numerikal dan yang sekiranya tidak terpakai","b03dc503":"karena data yang terlihat sangat signifikan terjadi dari tahun 1960, maka data dibawah 1960 akan dibuang","bb8d5a2d":"Merk mobil yang paling banyak dijual","9df1924f":"menghapus data mobil yang memiliki tahun dibawah 1885 dianggap tidak relevan karena mobil pertama kali ditemukan pada tahun tersebut. ","848ecfb4":"mengisi missing values","4f3d09c1":"kelompokkan tipe kolom untuk dilakukan visualisasi"}}