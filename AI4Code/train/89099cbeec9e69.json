{"cell_type":{"a89aa68b":"code","6ba970dd":"code","c2fc38a7":"code","18f24385":"code","bbbdfd65":"code","76de67a9":"code","e3cf290d":"code","efa5009c":"code","d68fccef":"code","0a36ffd1":"code","b86e44aa":"code","58b8e9df":"code","8ee49a23":"code","1c930417":"code","34bfc66c":"code","b737c1ab":"code","3ed03014":"code","5d2f2fb6":"markdown","dd4d3d62":"markdown","0ca8d230":"markdown","98b8660d":"markdown","371b566a":"markdown","b18e46c5":"markdown"},"source":{"a89aa68b":"# Set-up libraries\nimport os\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report","6ba970dd":"# Check input data source\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c2fc38a7":"# Read-in data\ndf = pd.read_csv('..\/input\/paysim1\/PS_20174392719_1491204439457_log.csv')","18f24385":"# Look at some details\ndf.info()","bbbdfd65":"# Look at some records\ndf.head()","76de67a9":"# Check for missing values\ndf.isna().sum()","e3cf290d":"# Look at breakdown of label\ndf.isFlaggedFraud.value_counts()\nsns.countplot(df.isFlaggedFraud)","efa5009c":"# Look at breakdown of categorical feature(s)\ndf.type.value_counts()\nsns.countplot(df.type)","d68fccef":"# Summarise\ndf.describe()","0a36ffd1":"# Transform categorical feature(s) to numeric\nle = LabelEncoder()\ndf.type = le.fit_transform(df.type)","b86e44aa":"# Explore correlations to label\ndf.corr().isFlaggedFraud.sort_values(ascending=False)","58b8e9df":"# Explore correlations visually\nf, ax = plt.subplots(figsize=(12,6))\nsns.heatmap(df.corr(), annot=True, fmt='.2f')","8ee49a23":"# Split data into 80% train and 20% test\nX = df.drop(columns=['isFlaggedFraud', 'nameDest', 'nameOrig'], axis=1)\ny = df['isFlaggedFraud']\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=0)","1c930417":"# Build and train model\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)","34bfc66c":"# Apply model to validation data\ny_predict = model.predict(X_val)","b737c1ab":"# Compare actual and predicted values\nactual_vs_predict = pd.DataFrame({'Actual': y_val,\n                                'Prediction': y_predict})\nactual_vs_predict.sample(12)","3ed03014":"# Evaluate model\nprint('Classification metrics: \\n', classification_report(y_val, y_predict))","5d2f2fb6":"## Learn more\nIf you found this example interesting, you may also want to check out:\n\n* [Machine learning in minutes - very fast fundamental examples in Python](https:\/\/www.kaggle.com\/jamiemorales\/machine-learning-in-minutes-very-fast-examples)\n* [List of machine learning methods & datasets](https:\/\/www.kaggle.com\/jamiemorales\/list-of-machine-learning-methods-datasets)\n\nThanks for reading. Don't forget to upvote.","dd4d3d62":"## Step 1: Set-up and understand data\nThis step helps uncover issues that we will want to address in the next step and take into account when building and evaluating our model. We also want to find interesting relationships or patterns that we can possibly leverage in solving the problem we specified.","0ca8d230":"## About\n_________\n\nThis notebook contains a very fast fundamental decision tree classifier example in Python.\n\t\nThis work is part of a series called [Machine learning in minutes - very fast fundamental examples in Python](https:\/\/www.kaggle.com\/jamiemorales\/machine-learning-in-minutes-very-fast-examples). \n\t\nThe approach is designed to help grasp the applied machine learning lifecycle in minutes. It is not an alternative to actually taking the time to learn. What it aims to do is help someone get started fast and gain intuitive understanding of the typical steps early on.","98b8660d":"## Step 0: Understand the problem\nWhat we're trying to do here is to classify whether a transaction is fraudulent or not.","371b566a":"## Step 2: Preprocess data and understand some more\nThis step typically takes the most time in the cycle but for our purposes, most of the datasets chosen in this series are clean. \n\t\nReal-world datasets are noisy and incomplete. The choices we make in this step to address data issues can impact downstream steps and the result itself. For example, it can be tricky to address missing data when we don't know why it's missing. Is it missing completely at random or not? It can also be tricky to address outliers if we do not understand the domain and problem context enough.","b18e46c5":"## Step 3: Model and evaluate\nThis last step is three-fold.\n\nWe create the model and fit the model to the data we prepared for training.\n\t\nWe then proceed to classifying with the data we prepared for validation.\n\t\nLastly, we evaluate the model's performance with mainstream classification metrics. "}}