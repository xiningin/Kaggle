{"cell_type":{"03c7433e":"code","8ac8f78a":"code","c528fad8":"code","c3e52047":"code","6c311715":"code","b8984f9e":"code","7598e214":"code","9aa05e85":"code","a790fae7":"code","8c63386a":"code","709767b4":"code","cc77f05e":"code","6f8f5600":"code","af2d4da1":"code","dc60ce62":"code","2bff0e5d":"code","221b2b0e":"code","265b9c66":"code","b7d57d55":"code","e95e567d":"code","8cbc73e0":"code","35e88f42":"code","b63375f6":"code","a7b87a4a":"code","7f13cafe":"code","23a9e37f":"code","e0a1f32b":"code","4c544a40":"code","a90e79a4":"code","a61e07fb":"code","37084752":"code","814127c9":"code","3f753fdd":"code","55cb441c":"code","66bc2208":"code","0e3e4ef7":"code","72516cad":"code","2839032b":"code","98017ab9":"code","787608de":"markdown","601297ee":"markdown","17583a35":"markdown","6eff6ac6":"markdown","aaf95ea3":"markdown","203e2d99":"markdown","908555ee":"markdown","5239316c":"markdown","f4a7b771":"markdown","6079c9f9":"markdown","bec9627a":"markdown","891ea9a9":"markdown","c65ffcb3":"markdown","ac45724d":"markdown","9bc99c44":"markdown","8cd54e0a":"markdown","3fc13f1b":"markdown","2626029e":"markdown","5444e86a":"markdown","c664bd06":"markdown","2e5cdf57":"markdown","560962d2":"markdown","b14996af":"markdown","b7163948":"markdown","80d5cf7f":"markdown","dd0af03a":"markdown"},"source":{"03c7433e":"# linear algebra\nimport numpy as np \nimport math\n\n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd \n\n#file path\nimport glob\nimport os\n\n#data visualization and graphical plotting\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#visualisations to understand the presence and distribution of missing data \nimport missingno as msno \n\n#Build better models more efficiently with Weights & Biases experiment tracking\nimport wandb\n\n#Geospatial analysis\nimport folium\nfrom geopy.geocoders import Nominatim\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster","8ac8f78a":"!pip install -qqq wandb ","c528fad8":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\n\n\nCONFIG = {'competition': 'learnplatform', '_wandb_kernel': 'eyerus'}\n\nos.environ[\"WANDB_SILENT\"] = \"true\"","c3e52047":"wandb.login()","6c311715":"path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data' \nall_files = glob.glob(path + \"\/*.csv\")\nUpdated_Df = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    district_id = filename.split(\"\/\")[4].split(\".\")[0]\n#     print (district_id)\n    df[\"district_id\"] = district_id\n    Updated_Df.append(df)\nengagement_df = pd.concat( Updated_Df)\nengagement_df = engagement_df.reset_index(drop=True)\nengagement_df.head()    \n    \n","b8984f9e":"products_df = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\")\nproducts_df.head()","7598e214":"districts_df = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")\ndistricts_df.head()","9aa05e85":"# missing values for product data\nmsno.bar(products_df,color='lightblue', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.show()","a790fae7":"# missing values for district data\nmsno.bar(districts_df,color='cadetblue', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.show()","8c63386a":"# missing values for engagement data\nmsno.bar(engagement_df,color='skyblue', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.show()","709767b4":"sns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\n#====== Function to plot WandB bar chart ======\ndef plot_wb_bar(df,col1,col2): \n    run = wandb.init(project='LearnPlatform', job_type='image-visualization',name=col1,config = CONFIG, anonymous=\"allow\")\n    \n    dt = [[label, val] for (label, val) in zip(df[col1], df[col2])]\n    table = wandb.Table(data=dt, columns = [col1,col2])\n    wandb.log({col1 : wandb.plot.bar(table, col1,col2,title=col1)})\n    run.finish()\n    \n#====== Function to create a dataframe of value counts ======\ndef count_values(df,col,top=False):\n    df = pd.DataFrame(df[col].value_counts().reset_index().values,columns=[col, \"counts\"])\n    if top==True: df=df[:10]\n    return df\n\n#====== Function to create a dataframe ======\ndef intermediate_df(col, labels, sizes):\n    d = pd.DataFrame()\n    d[col] = labels\n    d['counts'] = sizes\n    return d\n\npal1 = [\"#fec5bb\",\"#fcd5ce\",\"#fae1dd\",\"#f8edeb\",\"#e8e8e4\",\"#d8e2dc\",\"#ece4db\",\"#ffe5d9\",\"#ffd7ba\",\"#fec89a\"]\npal2 = [\"#ffcbf2\",\"#f3c4fb\",\"#ecbcfd\",\"#e5b3fe\",\"#e2afff\",\"#deaaff\",\"#d8bbff\",\"#d0d1ff\",\"#c8e7ff\",\"#c0fdff\"]\npal3 = [\"#d6d2d2\",\"#f1e4f3\",\"#f4bbd3\",\"#f686bd\",\"#fe5d9f\"]\npal4 = [\"#a09abc\",\"#b6a6ca\",\"#d5cfe1\",\"#e1dee9\",\"#d4bebe\"]","cc77f05e":"plot_wb_bar(count_values(districts_df,\"state\"),\"state\", 'counts')","6f8f5600":"# Distribution of state\nplt.figure(figsize=(16, 10))\nsns.countplot(y=\"state\",data=districts_df,order=districts_df.state.value_counts().index,palette=\"Blues\",linewidth=3)\nplt.title(\"State Distribution\",font=\"Serif\", size=20)\nplt.show()","af2d4da1":"#districts state wordcloud\nfrom wordcloud import WordCloud\ncloud = WordCloud(width=1440, height=1080).generate(\" \".join(districts_df['state'].astype(str)))\nplt.figure(figsize=(15, 10))\nplt.imshow(cloud)\nplt.axis('off')","dc60ce62":"# Locale distribution\n\nfig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Locale Distribution', size = 20, font=\"Serif\")\nexplode = (0.01, 0.01, 0.01, 0.01)\nlabels = list(districts_df.locale.value_counts().index)\nsizes = districts_df.locale.value_counts().values\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.0f%%',\n       pctdistance=0.7, colors=['slategray','lavender','thistle','rosybrown'] )\nplt.show()","2bff0e5d":"plot_wb_bar(count_values(districts_df,\"locale\"),\"locale\", 'counts')","221b2b0e":"## pct_free\/reduced\nsns.countplot(data= districts_df, x = \"pct_free\/reduced\", color='skyblue')\nplt.show()","265b9c66":"#Distribution of Sector(s) \nproducts_sec=products_df['Sector(s)'].value_counts().reset_index()\n\nproducts_sec.columns = ['Sector(s)','percent']\n\nproducts_sec['percent'] \/= len(products_df)\nfig = px.pie(\n    products_sec, \n    names='Sector(s)', \n    values='percent',\n    color_discrete_sequence=px.colors.sequential.Mint,\n    title='Distribution of Sector(s) in the Product Information Data:', \n    width=700,\n    height=500\n)\nfig.show()\n","b7d57d55":"plot_wb_bar(count_values(products_df,\"Provider\/Company Name\",top=True),\"Provider\/Company Name\", 'counts')\n","e95e567d":"# Distribution of Education Sectors\nc1=c2=c3=0\nfor s in products_df[\"Sector(s)\"]:\n    if(not pd.isnull(s)):\n        s = s.split(\";\")\n        for i in range(len(s)):\n            sub = s[i].strip()\n            if(sub == 'PreK-12'): c1+=1\n            if(sub == 'Higher Ed'): c2+=1\n            if(sub == 'Corporate'): c3+=1\n\nfig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Sector Distribution', size = 20, font=\"Serif\")\nexplode = (0.02, 0.02, 0.02)\nlabels = ['PreK-12','Higher Ed','Corporate']\nsizes = [c1,c2, c3]\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.2f%%', pctdistance=0.7, colors=['lavender','thistle','rosybrown'])\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","8cbc73e0":"plot_wb_bar(intermediate_df('Sector', labels, sizes),\"Sector\", 'counts')\n","35e88f42":"plot_wb_bar(intermediate_df('Primary Essential Function', labels, sizes),\"Primary Essential Function\", 'counts')","b63375f6":"#Distribution of top 15 Provider\/Company Name\nplt.figure(figsize=(16,10))\nsns.countplot(y='Provider\/Company Name', data= products_df, order= products_df['Provider\/Company Name'].value_counts().index[:15])\nplt.title('Top 15 Provider\/Company Name')\nplt.show()\n","a7b87a4a":"# identifying unique learning methods\nprint(products_df['Primary Essential Function'].unique())","7f13cafe":"#Distribution of Primary Essential Function\nprimary_essential_main = []\nprimary_essential_sub = []\nfor s in products_df[\"Primary Essential Function\"]:\n    if(not pd.isnull(s)):\n        s1 = s.split(\"-\",1)[0].strip()\n        primary_essential_main.append(s1)\n    else:\n        primary_essential_main.append(np.nan)\n    \n    if(not pd.isnull(s)):\n        s2 = s.split(\"-\",1)[1].strip()\n        primary_essential_sub.append(s2)\n    else:\n        primary_essential_sub.append(np.nan)\n\nproducts_df[\"primary_essential_main\"] = primary_essential_main\nproducts_df[\"primary_essential_sub\"] = primary_essential_sub\n","23a9e37f":"# Visualizing the Primary Essential Function Learn Platform catagories\nLP1=LP2=LP3=0\n\nfor s in products_df[\"primary_essential_main\"]:\n    if(not pd.isnull(s)):\n        LP1 += s.count(\"CM\")\n        LP2 += s.count(\"LC\")\n        LP3 += s.count(\"SDO\")\n\nfig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Primary Essential Function', size = 30, font=\"Serif\")\nexplode = (0.02, 0.02, 0.02)\nlabels = ['CM','LC','SDO']\nsizes = [LP1, LP2, LP3]\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.2f%%', pctdistance=0.7, colors=[\"lightpink\",'lavender','thistle'])\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","e0a1f32b":"plot_wb_bar(count_values(products_df,\"primary_essential_sub\"),\"primary_essential_sub\", 'counts')","4c544a40":"# Visualizing the Primary Essential Function Learn Platform sub-catagories\nplt.figure(figsize=(16, 20))\nsns.countplot(y='primary_essential_sub', data=products_df, order=products_df[\"primary_essential_sub\"].value_counts().index, color= 'thistle')\nplt.title(\"Primary Essential Function(Sub)\",font=\"Serif\")\nplt.show()\n","a90e79a4":"engagement_df['time'] = pd.to_datetime(engagement_df['time'])","a61e07fb":"print(products_df[\"LP ID\"].nunique())\nprint(engagement_df[\"lp_id\"].nunique())","37084752":"product_engage = pd.merge(products_df, engagement_df, left_on='LP ID', right_on='lp_id')\nproduct_engage.head()","814127c9":"# Top 15 Products With atleast one-page load event and With number of page-load per 1000 students\n\none_page= product_engage.groupby(\"Product Name\")[\"pct_access\"].mean().sort_values(ascending=False).head(15)\none_page=one_page.reset_index()\n\nPage_load= product_engage.groupby(\"Product Name\")[\"engagement_index\"].sum().sort_values(ascending=False).head(15)\nPage_load=Page_load.reset_index()\n\n\n# plot\nplt.figure(figsize=(15,4))\n\nplt.subplot(121)\nsns.barplot(data= one_page ,x=\"Product Name\", y=\"pct_access\", palette=\"ch:s=.25,rot=-.25\")\nplt.xlabel('Product Name')\nplt.xticks(rotation=90)\nplt.ylabel('Mean percentage of students')\nplt.title(\"With at least one-page load event\")\n\n\nplt.subplot(122)\nsns.barplot(data= Page_load ,x=\"Product Name\", y=\"engagement_index\", palette=\"flare\")\nplt.xlabel('Product Name')\nplt.xticks(rotation=90)\nplt.ylabel('Page-load per 1000 students')\nplt.title(\"With number of page-load per 1000 students\")\n\n","3f753fdd":"print(districts_df[\"district_id\"].nunique())\nprint(engagement_df[\"district_id\"].nunique())","55cb441c":"engagement_df[\"district_id\"] = engagement_df[\"district_id\"].astype(str).astype(int)\ndistricts_engagement_data = pd.merge(districts_df, engagement_df, left_on='district_id', right_on='district_id')\ndistricts_engagement_data.head()","66bc2208":"# Plot data in a time-series\n\ndef plot_time_series(df,col1,col2,col3):\n    max_list = df[[col1,col2]]\\\n        .groupby([col1])[col2].mean()\\\n        .sort_values(ascending=False).index[:5].tolist()\n\n    df = df[df[col1].isin(max_list)].reset_index(drop=True)[[col3, col1, col2]]\n    df = df.pivot_table(index=col3, columns=col1, values=col2)\n\n    fig = px.line(df, facet_col=col1, facet_col_wrap=1, width=800, height=800)\n    fig.update_layout(\n                      title=(col1 + \" , \" + col2 + \" , \" + col3).title(),\n                      title_x=0.39,\n                      template=\"plotly_white\",\n                      paper_bgcolor='#f5f7f8',\n                      font = {'family': 'Serif', 'size': 20}\n                     )\n    fig.show()","0e3e4ef7":"plot_time_series(districts_engagement_data,\"state\",\"pct_access\",\"time\")\nplot_time_series(districts_engagement_data,\"state\",\"engagement_index\",\"time\")\nplot_time_series(districts_engagement_data,\"locale\",\"pct_access\",\"time\")\nplot_time_series(districts_engagement_data,\"locale\",\"engagement_index\",\"time\")\n","72516cad":"from geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"http\")\n\ndef feature_generation(df):\n    lat=[]\n    long=[]\n    for i in df['state']: \n        location = geolocator.geocode(i)\n        try:\n            lat.append(location.latitude)\n            long.append(location.longitude)\n        except:\n            lat.append(\"NA\")\n            long.append(\"NA\")\n    df['Latitude'] = lat\n    df['Longitude'] = long\n    \n    return df\n\ndef map_df(df,col1,col2):\n    df = pd.DataFrame(df[[col1,col2]]\\\n            .groupby([col1])[col2].mean()\\\n            .sort_values(ascending=False)[:20]).reset_index()\n    \n    df = feature_generation(df)\n    \n    return df\n\nstate_access = map_df(districts_engagement_data, \"state\", \"pct_access\")\nstate_engagement_index = map_df(districts_engagement_data, \"state\", \"engagement_index\")\n","2839032b":"north_america_map = folium.Map(location=[38.9, -77.05], tiles='Stamen Watercolor', zoom_start=3)\nnorth_america_map","98017ab9":"mc = MarkerCluster()\nfor idx, row in state_access.iterrows():\n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        popup = \"\"\"\n        State : <b>%s<\/b><br>\n        Percentage Access : <b>%s<\/b><br>\n        \"\"\" % (row['state'], row['pct_access'])\n        mc.add_child(Marker([row['Latitude'], row['Longitude']],tooltip=popup))\n    north_america_map.add_child(mc)\nnorth_america_map","787608de":"|**Name**               |          **Description**                                        |\n|-------------------    |:--------------------------------:                               |\n|  time                 |                             date in \"YYYY-MM-DD\"                |\n|  lp_id                |The unique identifier of the product                             |\n|  pct_access           |Percentage of students in the district <br>have at least one page-load event of a <br> given product and on a given day |\n| engagement_index       |Total page-load events per one thousand students <br> of a given product and on a given day                              |","601297ee":"### *Visualizing the Merged Data(Districts_Engagement)*","17583a35":"## Product Data Visualization","6eff6ac6":"## *Merging Engagement Data and Product Data*","aaf95ea3":"## **Reading the data files**","203e2d99":"## **Merging files \ud83d\udcc1**","908555ee":"## Engagement data\n\nThe engagement data are based on LearnPlatform\u2019s Student Chrome Extension. The extension collects page load events of over 10K education technology products in our product library, including websites, apps, web apps, software programs, extensions, ebooks, hardwares, and services used in educational institutions. \n\nThe engagement data are aggregated at school district level, and each file in the folder engagement_data represents data from one school district. The 4-digit file name represents district_id which can be used to link to district information in district_info.csv. The lp_id can be used to link to product information in product_info.csv.","5239316c":"As we can see in the above chart the first 3 places are occupied by well known companies -Google,Microsoft and  houghton mifflin harcourt having values above five. which means those are the one that mainly offer online learning website.","f4a7b771":"*The outbreak of the SARS-Cov-2 virus pandemic causing the COVID-19 disease, which spread rapidly around the world, has forced billions of people to limit direct contact with each other. Many companies have switched to remote work, and commerce has largely moved to the Internet. Schools, universities and other educational institutions did the same - they switched to remote learning where teachers conduct lessons via the Internet for their students. It was certainly a challenge for teachers and students, but many ready-made tools that helped in conducting classes and lectures came to the rescue. Rapidly developing before the pandemic and gaining in popularity, e-learning has thus become the best form of education in these strange times. Today we'll look at this problem from the perspective of the specific tools used in the USA in 2020, thus checking: when, where, how and why specific learning products were used.* ","6079c9f9":"## *Merging Engagement Data and Districts Data*","bec9627a":"*Google Classroom and Google Docs are the two products having maximum accessibility to the students in terms of one-page load event and total-page load event.*","891ea9a9":"The district file districts_info.csv includes information about the characteristics of school districts, including data from, NCES (2018-19),FCC (Dec 2018), and Edunomics Lab.\n\n- distrist_id\n- state\n- locale\n- pct_black\/hispanic - percentage of students in the districts identified as Black or Hispanic based on 2018-19 NCES data.\n- pct_free\/reduced - percentage of students in the districts eligible for free or reduced-price lunch based on 2018-19 NCES data.\n- county_connections_ratio - ratio (residential fixed high-speed connections over 200 kbps in at least one direction\/households) based on the county level data from FCC From 477 (December 2018 version).\n- pp_total_raw - per-pupil total expenditure (sum of local and federal expenditure) from Edunomics Lab's National Education Resource Database on Schools (NERD$) project.\n\n","c65ffcb3":"## District Data visualization","ac45724d":"## **Missing values**","9bc99c44":"## Product information data\nThe product file products_info.csv includes information about the characteristics of the top 372 products with most users in 2020. The categories listed in this file are part of LearnPlatform's product taxonomy.\n\n- LP ID - the unique identifier of the product. URL\n- Product Name\n- Provider\/Company Name\n- Sector(s) - sector of education where the product is used.\n- Primary Essential Function - the basic function of the product. There are two layers of labels here. Products are first labeled as one of these three categories: LC = Learning & Curriculum, CM = Classroom Management, and SDO = School & District Operations. Each of these categories have multiple sub-categories with which the products were labeled.","8cd54e0a":"# **Geospatial Analysis \ud83d\uddfa\ufe0f**","3fc13f1b":"## **Base Map \ud83c\udf0e**","2626029e":"## **Importing all the necessary packages**","5444e86a":"## This is what my[ project ](https:\/\/wandb.ai\/eyerusalem\/LearnPlatform?workspace=user-eyerusalem)looks like on the W&B dashboard \u2b07\ufe0f\n![Screenshot from 2021-09-04 20-01-43.png](attachment:512d3589-c45f-4da0-9b72-aa1198776dd2.png))","c664bd06":"## ","2e5cdf57":"## District information data","560962d2":"## State and Percentage Access (Top 20) \ud83c\udf0e","b14996af":"![](https:\/\/www.pngitem.com\/pimgs\/m\/379-3795922_wandb-logo-circle-hd-png-download.png)\n\n\n### **Integrating W&B for visualizations and logging artifacts!**\n\n[LearnPlatform COVID-19 Impact on Digital Learning W&B Dashboard](https:\/\/wandb.ai\/eyerusalem\/LearnPlatform?workspace=user-eyerusalem)\n\n- To get the API key, an account is to be created on the [website first](https:\/\/wandb.ai\/site).\n- Next, use secrets to use API Keys more securely.","b7163948":"# **COVID-19 Imapct on Digital Learning**\n\n![](https:\/\/mk0tiptopbrainjs8r5q.kinstacdn.com\/wp-content\/uploads\/2020\/07\/pros-and-cons-of-online-learning.jpg)","80d5cf7f":"### *Visualizaing the Merged Data(Product_Engagement)*","dd0af03a":"# **EDA \ud83d\udcca**"}}