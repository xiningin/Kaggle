{"cell_type":{"fc4456b0":"code","91391135":"code","8c43abe5":"code","58d28183":"code","6c4bdc67":"code","7b8279ee":"code","54303912":"code","ef0f6dc7":"code","4f601dfa":"code","5b720419":"code","da4bf2f0":"code","516dac37":"code","fdcd0fef":"code","c1b9a293":"code","5f222e49":"code","b3e6f3b6":"code","5ef29b2e":"code","90c4b178":"code","8b148fb1":"code","f6c1769d":"code","7138bf63":"code","67a8982c":"code","757b0e52":"code","ca0f9b51":"markdown","86081a04":"markdown","b8b3731f":"markdown","7454e462":"markdown","a4803152":"markdown","53d98229":"markdown","8ea1ac9d":"markdown","87528f67":"markdown","ec2b6c30":"markdown","60655f81":"markdown","0f317c6d":"markdown","dcfdc1f3":"markdown","872e9158":"markdown","33db3f78":"markdown","4b984581":"markdown","c9e97788":"markdown","d1776ecc":"markdown","ec8db736":"markdown","bc196457":"markdown","a1ebccc4":"markdown","6c2108d9":"markdown","aa1032f7":"markdown","50836a6f":"markdown","d5355543":"markdown","abcb18db":"markdown"},"source":{"fc4456b0":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\n%matplotlib inline","91391135":"df = pd.read_csv('..\/input\/fuelconsumptionco2\/FuelConsumptionCo2.csv')\n\n# take a look at the dataset\ndf.head()","8c43abe5":"# Checking the shape of the data frame\ndf.shape","58d28183":"# Checking the infomration\ndf.info()","6c4bdc67":"#Checking columns\ndf.columns","7b8279ee":"# descriptive statistics\ndf.describe().T","54303912":"# Checking null count\nimport missingno as msno\np=msno.bar(df)\n","ef0f6dc7":"# The CO2 Emission is what is need to be calculated, so it is important to plot each column vs Emission. \n# With that it is easy to understand the data when it is visualized.\nfig, ax = plt.subplots(2, 2, figsize=(20, 10), sharey = True)\n\nax[0,0].set_ylabel(\"CO2 Emission\")\nax[0,0].scatter(df[\"FUELCONSUMPTION_CITY\"], df[\"CO2EMISSIONS\"])\nax[0,0].set_xlabel(\"FUELCONSUMPTION_CITY\")\n\nax[0,1].scatter(df[\"FUELCONSUMPTION_HWY\"], df[\"CO2EMISSIONS\"])\nax[0,1].set_xlabel(\"FUELCONSUMPTION_HWY\")\n\nax[1,0].set_ylabel(\"CO2 Emission\")\nax[1,0].scatter(df[\"ENGINESIZE\"], df[\"CO2EMISSIONS\"])\nax[1,0].set_xlabel(\"ENGINESIZE\")\n\nax[1,1].scatter(df[\"CYLINDERS\"], df[\"CO2EMISSIONS\"])\nax[1,1].set_xlabel(\"CYLINDERS\")\n\n#plt.savefig('images\/visualData.png', dpi=400, bbox_inches=\"tight\")","4f601dfa":"cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]\ncdf.head(9)","5b720419":"plt.figure(figsize = (15,10))\nviz = cdf[['CYLINDERS','ENGINESIZE','CO2EMISSIONS','FUELCONSUMPTION_COMB']]\nviz.hist()\nplt.show()","da4bf2f0":"plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"FUELCONSUMPTION_COMB\")\nplt.ylabel(\"Emission\")\nplt.show()","516dac37":"plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","fdcd0fef":"plt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS, color='blue')\nplt.xlabel(\"Cylinders\")\nplt.ylabel(\"Emission\")\nplt.show()","c1b9a293":"msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]","5f222e49":"plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","b3e6f3b6":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\ntrain_x = np.asanyarray(train[['ENGINESIZE']])\ntrain_y = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (train_x, train_y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)","5ef29b2e":"plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nplt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], 'red')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")","90c4b178":"from sklearn.metrics import r2_score\n\ntest_x = np.asanyarray(test[['ENGINESIZE']])\ntest_y = np.asanyarray(test[['CO2EMISSIONS']])\ntest_y_hat = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_hat - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_hat - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_hat , test_y) )","8b148fb1":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import linear_model\ntrain_x = np.asanyarray(train[['ENGINESIZE']])\ntrain_y = np.asanyarray(train[['CO2EMISSIONS']])\n\ntest_x = np.asanyarray(test[['ENGINESIZE']])\ntest_y = np.asanyarray(test[['CO2EMISSIONS']])\n\n\npoly = PolynomialFeatures(degree=2)\ntrain_x_poly = poly.fit_transform(train_x)\ntrain_x_poly","f6c1769d":"regr = linear_model.LinearRegression()\ntrain_y_ = regr.fit(train_x_poly, train_y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)","7138bf63":"plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nXX = np.arange(0.0, 10.0, 0.1)\nyy = regr.intercept_[0]+ regr.coef_[0][1]*XX+ regr.coef_[0][2]*np.power(XX, 2)\nplt.plot(XX, yy, 'red' )\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")","67a8982c":"from sklearn.metrics import r2_score\n\ntest_x_poly = poly.fit_transform(test_x)\ntest_y_ = regr.predict(test_x_poly)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_ , test_y) )","757b0e52":"poly3 = PolynomialFeatures(degree=3)\ntrain_x_poly3 = poly3.fit_transform(train_x)\n\nregr3 = linear_model.LinearRegression()\nregr3.fit(train_x_poly3, train_y)\n\nplt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nyy = regr3.intercept_[0]+ regr3.coef_[0][1]*XX+ regr3.coef_[0][2]*np.power(XX, 2)+ regr3.coef_[0][3]*np.power(XX, 3)\nplt.plot(XX, yy, 'red' )\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\n\ntest_x_poly = poly3.fit_transform(test_x)\ntest_y_ = regr3.predict(test_x_poly)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_ , test_y) )\n","ca0f9b51":"As mentioned before, __Coefficient__ and __Intercept__ in the simple linear regression, are the parameters of the fit line. \nGiven that it is a simple linear regression, with only 2 parameters, and knowing that the parameters are the intercept and slope of the line, sklearn can estimate them directly from our data. \nNotice that all of the data must be available to traverse and calculate the parameters.\n","86081a04":"**Checking the null values**\n","b8b3731f":"### Reading & Understanding the data ","7454e462":"#### Plot outputs","a4803152":"we can plot the fit line over the data:","53d98229":"Sometimes, the trend of data is not really linear, and looks curvy. In this case we can use Polynomial regression methods. In fact, many different regressions exist that can be used to fit whatever the dataset looks like, such as quadratic, cubic, and so on, and it can go on and on to infinite degrees.\n\nIn essence, we can call all of these, polynomial regression, where the relationship between the\u00a0independent variable\u00a0x\u00a0and the\u00a0dependent variable\u00a0y\u00a0is modeled as an\u00a0nth degree\u00a0polynomial\u00a0in\u00a0x. Lets say you want to have a polynomial regression (let's make 2 degree polynomial):\n\n\n$y = b + \\theta_1  x + \\theta_2 x^2$\n\nNow, the question is: how we can fit our data on this equation while we have only x values, such as __Engine Size__? \nWell, we can create a few additional features: 1, $x$, and $x^2$.\n\n\n\n__PolynomialFeatures()__ function in Scikit-learn library, drives a new feature sets from the original feature set. That is, a matrix will be generated consisting of all polynomial combinations of the features with degree less than or equal to the specified degree. For example, lets say the original feature set has only one feature, _ENGINESIZE_. Now, if we select the degree of the polynomial to be 2, then it generates 3 features, degree=0, degree=1 and degree=2: ","8ea1ac9d":"we can plot each of these features:","87528f67":"Now, lets plot each of these features vs the Emission, to see how linear is their relation:","ec2b6c30":"### Data Exploration","60655f81":"The data has a lineal tendency. So we can confirm that we can use a lineal regression to predict the CO2 emission. For the model, we are going to select 80% of the data for training and 20% for testing.","0f317c6d":"#### Train data distribution","dcfdc1f3":"## <font color = Brown> 1. Simple Regression Model\n    \nLinear Regression fits a linear model with coefficients $\\theta = (\\theta_1, ..., \\theta_n)$ to minimize the 'residual sum of squares' between the independent x in the dataset, and the dependent y by the linear approximation. ","872e9158":" Regression using Polynomial 3 is slightly better since it has a smaller MSE by 5","33db3f78":"This program consists in creating a model using **simple & polynomial regression** to determine the possible CO2 emission of a car given the engine size, numbers of cylinders and fuel consumption. he programming language used is Python and the libraries used are Pandas, Numpy, Matplotlib and Scikit-learn.","4b984581":"#### Evaluation\nwe compare the actual values and predicted values to calculate the accuracy of a regression model. Evaluation metrics provide a key role in the development of a model, as it provides insight to areas that require improvement.\n\nThere are different model evaluation metrics, lets use MSE here to calculate the accuracy of our model based on the test set: \n<ul>\n    <li> Mean absolute error: It is the mean of the absolute value of the errors. This is the easiest of the metrics to understand since it\u2019s just average error.<\/li>\n    <li> Mean Squared Error (MSE): Mean Squared Error (MSE) is the mean of the squared error. It\u2019s more popular than Mean absolute error because the focus is geared more towards large errors. This is due to the squared term exponentially increasing larger errors in comparison to smaller ones.<\/li>\n    <li> Root Mean Squared Error (RMSE): This is the square root of the Mean Square Error. <\/li>\n    <li> R-squared is not error, but is a popular metric for accuracy of your model. It represents how close the data are to the fitted regression line. The higher the R-squared, the better the model fits your data. Best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse).<\/li>\n<\/ul>","c9e97788":"## <font color = Brown> 2. Polynomial regression","d1776ecc":"#### Modeling\nUsing sklearn package to model data.","ec8db736":"There is no missing \/null values in the dataset","bc196457":"As mentioned before, __Coefficient__ and __Intercept__ , are the parameters of the fit curvy line. \nGiven that it is a typical multiple linear regression, with 3 parameters, and knowing that the parameters are the intercept and coefficients of hyperplane, sklearn has estimated them from our new set of feature sets. Lets plot it:","a1ebccc4":"**2.2 Trying with degree 3 polynomial**\n\nLet's try to use a polynomial regression with degree three (cubic).","6c2108d9":"### Importing Needed packages","aa1032f7":"**2.1 Evaluation**","50836a6f":"#### Creating train and test dataset\nTrain\/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. \nThis will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.\n\nThis means that we know the outcome of each data point in this dataset, making it great to test with! And since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it is truly an out-of-sample testing.\n\nLets split our dataset into train and test sets, 80% of the entire data for training, and the 20% for testing. We create a mask to select random rows using __np.random.rand()__ function: ","d5355543":"## <font color =Blue> Creating a Model for predicting the CO2 Emissions using simple regression & polynomial regression","abcb18db":"Plot CYLINDERs vs the Emission, to see how linear is their relation:"}}