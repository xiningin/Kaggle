{"cell_type":{"6edfb547":"code","877c6a11":"code","c837299b":"code","1800c3e8":"code","e18af71f":"code","8e1c81cb":"code","b3c83aab":"code","a597aacf":"code","2592d1ac":"code","d36aae88":"code","0d64f92e":"code","a581d180":"code","c716bd79":"code","ddd4eeca":"code","ddc29d7e":"code","770e107a":"code","042dfd0b":"code","c0331d11":"code","c3b576d7":"code","3445ccf9":"code","39cc8d61":"code","bc1e90c1":"code","8550ae52":"code","7c72b3b8":"code","af258008":"code","f69df389":"code","4db545c5":"code","6b729167":"code","2c2b3d37":"code","162f7243":"code","5dafb7c8":"code","99602a9a":"code","3ea5dd43":"code","dc4c110d":"code","32d98107":"code","b3bc1da0":"code","0350250a":"code","34603ea3":"code","c5428f77":"code","d7aa8197":"code","234a3001":"code","ef06c9aa":"code","052a0e15":"code","3db02281":"code","52b01224":"code","d2521339":"code","d23d2b40":"code","5e59bf71":"code","973ac209":"code","3d6ac24b":"code","dd587601":"code","50046a6f":"code","a6fe8216":"code","681eb4a3":"code","8f9372b9":"code","ab6684ff":"code","62c22415":"code","4ed9458a":"code","dd610583":"code","2526c2ec":"code","267b4efc":"code","c54fcdf2":"code","287445a7":"code","1152b61f":"code","37ee10a8":"code","6e3ec2eb":"code","fb2ea2a7":"code","1a41ce7c":"code","19cae217":"code","d0676462":"code","cb29466c":"code","139d69c1":"code","642a7254":"code","93e13e21":"code","1b3c0532":"code","c6b99f00":"code","dd163950":"code","d090bd78":"code","7b0602ff":"code","08f7ae4c":"code","df0eea94":"markdown","8e8fb793":"markdown","4c9939cc":"markdown","eab54649":"markdown","d4057f28":"markdown","0cb7f670":"markdown","7033b0ea":"markdown","033b7cfe":"markdown","ba1ad916":"markdown","3bb6ed76":"markdown","c73256d6":"markdown","21803b56":"markdown","e211ab23":"markdown","c246c34d":"markdown","7eff2fa1":"markdown","3b6eeb1c":"markdown","d064a78a":"markdown","6938d851":"markdown","eb5ef973":"markdown","ee57f7c9":"markdown","09864bae":"markdown","ba051e23":"markdown","276b7a0f":"markdown","e12e5907":"markdown","73dda453":"markdown","42eeb6a2":"markdown","a5fffe1a":"markdown","625bf39e":"markdown","9b999013":"markdown","6c750851":"markdown","22ba1317":"markdown","1761a589":"markdown","3a166787":"markdown","a769a768":"markdown","89820ef2":"markdown","bce13138":"markdown","45b835d8":"markdown","5c8f720f":"markdown","0f6101dd":"markdown","2f5c31fc":"markdown","f77a156b":"markdown","d1412b40":"markdown","03f7f439":"markdown","1cefca53":"markdown","b3028a00":"markdown","de6c7b72":"markdown","4939de0d":"markdown","5a65a785":"markdown"},"source":{"6edfb547":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score,train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error,make_scorer\nimport seaborn as sns","877c6a11":"import warnings\nwarnings.filterwarnings('ignore')","c837299b":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","1800c3e8":"print(train.shape)","e18af71f":"train.isnull().sum().sort_values(ascending=False)[0:20]","8e1c81cb":"train.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)","b3c83aab":"train.isnull().sum().sort_values(ascending=False)[0:20]","a597aacf":"plt.scatter(x=train['GrLivArea'],y=train['SalePrice'])\nplt.xlabel('GrLivArea')\nplt.ylabel('SalePrice')\nplt.show()","2592d1ac":"train['GrLivArea'].sort_values(ascending=False)[:2]","d36aae88":"train=train[(train['GrLivArea']<4500)]","0d64f92e":"plt.scatter(x=train['GrLivArea'],y=train['SalePrice'])\nplt.xlabel('GrLivArea')\nplt.ylabel('SalePrice')\nplt.show()","a581d180":"sns.distplot(train['SalePrice'])\nprint('skewness:',train['SalePrice'].skew())","c716bd79":"train_id=train['Id']\ntrain.drop('Id',axis=1,inplace=True)","ddd4eeca":"train.columns","ddc29d7e":"train['MSSubClass'].value_counts()","770e107a":"train['MSZoning'].value_counts()","042dfd0b":"fig,ax=plt.subplots(figsize=(9,11))\nsns.scatterplot(ax=ax,x=train['LotArea'],y=train['SalePrice'])","c0331d11":"fig,ax=plt.subplots(figsize=(9,11))\nsns.violinplot(ax=ax,x=train['OverallQual'],y=train['SalePrice'])","c3b576d7":"fig,ax=plt.subplots(figsize=(9,11))\nsns.violinplot(ax=ax,x=train['OverallCond'],y=train['SalePrice'])","3445ccf9":"plt.scatter(data=train,x='YearBuilt',y='SalePrice')","39cc8d61":"cols=train[['TotalBsmtSF','GrLivArea','TotRmsAbvGrd','YrSold','OverallQual','GarageArea','SalePrice']]\nsns.pairplot(cols)","bc1e90c1":"sns.distplot(train['SalePrice'])\nprint('skewness before transforming:',train['SalePrice'].skew())","8550ae52":"train['SalePrice']=np.log1p(train['SalePrice'])\nsns.distplot(train['SalePrice'])\nprint('skewness after transform:',train['SalePrice'].skew())","7c72b3b8":"train.isnull().sum().sort_values(ascending=False)[:30]","af258008":"plt.scatter(data=train,x='SalePrice',y='LotFrontage')\nplt.xlabel('sale price')\nplt.ylabel('lotfrontage')","f69df389":"def impute_lot(cols):\n    l=cols[0]\n    s=cols[1]\n    if pd.isnull(l):\n        if s<=11.0:\n            l=train[train['SalePrice']<=11.0]['LotFrontage'].mean()\n            return l\n        elif 11.0<s<=12.5:\n            l=train[(train['SalePrice']>11.0)&(train['SalePrice']<=12.5)]['LotFrontage'].mean()\n            return l\n        else:\n            l=train[(train['SalePrice']>12.5)]['LotFrontage'].mean()\n            return l\n    else:\n        return l\ntrain['LotFrontage']=train[['LotFrontage','SalePrice']].apply(impute_lot,axis=1)","4db545c5":"train.isnull().sum().sort_values(ascending=False)[:15]","6b729167":"fig,ax=plt.subplots(figsize=(8,10))\nsns.scatterplot(data=train,x='GarageYrBlt',y='SalePrice',hue='GarageType')\nprint(train['GarageType'].value_counts())","2c2b3d37":"print(train[train['SalePrice']>11.8]['GarageType'].value_counts())\nprint(train[train['SalePrice']<=11.8]['GarageType'].value_counts())","162f7243":"def impute_gtype(cols):\n    g=cols[0]\n    s=cols[1]\n    if pd.isnull(g):\n        if s<=11.8:\n            g='Detchd'\n            return g\n        else:\n            g='Attchd'\n            return g\n    else:\n        return g\ntrain['GarageType']=train[['GarageType','SalePrice']].apply(impute_gtype,axis=1)","5dafb7c8":"train.isnull().sum().sort_values(ascending=False)[:15]","99602a9a":"corr_data=train.corr()\ncorr_data['GarageYrBlt'].sort_values(ascending=False)[:10]","3ea5dd43":"sns.scatterplot(data=train,x='GarageYrBlt',y='YearBuilt')","dc4c110d":"sns.scatterplot(data=train,x='GarageYrBlt',y='YearBuilt')\nplt.xlim(1900,)\nplt.ylim(1900,)","32d98107":"def impute_gyear(cols):\n    g=cols[0]\n    y=cols[1]\n    if pd.isnull(g):\n        g=y\n        return g\n    else:\n        return g","b3bc1da0":"train['GarageYrBlt']=train[['GarageYrBlt','YearBuilt']].apply(impute_gyear,axis=1)\ntrain.isnull().sum().sort_values(ascending=False)[:15]","0350250a":"train['GarageFinish'].value_counts()","34603ea3":"fig,ax=plt.subplots(figsize=(8,10))\nsns.scatterplot(data=train,x='GarageYrBlt',y='SalePrice',hue='GarageFinish')","c5428f77":"print(train[train['SalePrice']<12]['GarageFinish'].value_counts())\nprint(train[(train['SalePrice']>12)&(train['SalePrice']<=12.5)]['GarageFinish'].value_counts())\nprint(train[train['SalePrice']>12.5]['GarageFinish'].value_counts())","d7aa8197":"def impute_gfinish(cols):\n    g=cols[0]\n    s=cols[1]\n    if pd.isnull(g):\n        if s<=12.0:\n            g='Unf'\n            return g\n        elif (s>12.0)&(s<=12.5):\n            g='RFn'\n            return g\n        else:\n            g='Fin'\n            return g\n    else:\n        return g","234a3001":"train['GarageFinish']=train[['GarageFinish','SalePrice']].apply(impute_gfinish,axis=1)\ntrain.isnull().sum().sort_values(ascending=False)[:15]","ef06c9aa":"train['GarageQual'].value_counts()","052a0e15":"train['GarageQual'].fillna('TA',inplace=True)","3db02281":"train.isnull().sum().sort_values(ascending=False)[:10]","52b01224":"train['GarageCond'].value_counts()","d2521339":"train['GarageCond'].fillna('TA',inplace=True)\ntrain.isnull().sum().sort_values(ascending=False)[:10]","d23d2b40":"train['BsmtFinType2'].value_counts()","5e59bf71":"train['BsmtFinType2'].fillna('Unf',inplace=True)\ntrain.isnull().sum().sort_values(ascending=False)[:10]","973ac209":"train['BsmtExposure'].value_counts()","3d6ac24b":"train['BsmtExposure'].fillna('No',inplace=True)\ntrain.isnull().sum().sort_values(ascending=False)[:10]","dd587601":"train['BsmtQual'].value_counts()","50046a6f":"sns.violinplot(data=train,y='SalePrice',x='BsmtQual')","a6fe8216":"print(train[train['SalePrice']>12]['BsmtQual'].value_counts())\nprint(train[train['SalePrice']<=12]['BsmtQual'].value_counts())","681eb4a3":"def impute_bqual(cols):\n    b=cols[0]\n    s=cols[1]\n    if pd.isnull(b):\n        if b<=12.0:\n            b='TA'\n            return b\n        else:\n            b='Gd'\n            return b\n    else:\n        return b","8f9372b9":"train['BsmtQual']=train[['BsmtQual','SalePrice']].apply(impute_bqual,axis=1)\ntrain.isnull().sum().sort_values(ascending=False)[:10]","ab6684ff":"train['BsmtCond'].value_counts()","62c22415":"train['BsmtCond'].fillna('TA',inplace=True)\ntrain.isnull().sum().sort_values(ascending=False)[:10]","4ed9458a":"train['BsmtFinType1'].value_counts()","dd610583":"plt.subplots(figsize=(8,9))\nsns.violinplot(data=train,y='SalePrice',x='BsmtFinType1')","2526c2ec":"print(train[train['SalePrice']>12]['BsmtFinType1'].value_counts())\nprint(train[train['SalePrice']<=12]['BsmtFinType1'].value_counts())","267b4efc":"def impute_bfin1(cols):\n    b=cols[0]\n    s=cols[1]\n    if pd.isnull(b):\n        if b<=12.0:\n            b='Unf'\n            return b\n        else:\n            b='GLQ'\n            return b\n    else:\n        return b","c54fcdf2":"train['BsmtFinType1']=train[['BsmtFinType1','SalePrice']].apply(impute_bfin1,axis=1)\ntrain.isnull().sum().sort_values(ascending=False)[:10]","287445a7":"train['MasVnrType'].fillna('None',inplace=True)\ntrain['MasVnrArea'].fillna('None',inplace=True)\ntrain['Electrical'].fillna('SBrkr',inplace=True)\ntrain.isnull().sum().sort_values(ascending=False)[:10]","1152b61f":"fig=plt.subplots(figsize=(9,8))\ncorr_data=train.corr()\nsns.heatmap(corr_data)","37ee10a8":"train=pd.get_dummies(train)","6e3ec2eb":"train.shape","fb2ea2a7":"scorer=make_scorer(mean_squared_error,greater_is_better=False)","1a41ce7c":"y=train['SalePrice']\ntrain.drop('SalePrice',axis=1,inplace=True)\nx_train,x_test,y_train,true_p=train_test_split(train,y,test_size=0.2,random_state=120)","19cae217":"print(x_train.shape,y_train.shape,x_test.shape,true_p.shape)","d0676462":"def rmse_cv_train(model):\n    rmse=np.sqrt(-cross_val_score(model,x_train,y_train,scoring=scorer,cv=10))\n    return rmse\ndef rmse_cv_test(model):\n    rmse=np.sqrt(-cross_val_score(model,x_test,true_p,scoring=scorer,cv=10))\n    return rmse","cb29466c":"from sklearn.linear_model import LinearRegression,RidgeCV,LassoCV","139d69c1":"lreg=LinearRegression()\nlreg.fit(x_train,y_train)\nprint('rmse value of train data:',rmse_cv_train(lreg).mean())\nprint('rmse value of test data:',rmse_cv_test(lreg).mean())","642a7254":"train_pred=lreg.predict(x_train)\ntest_pred=lreg.predict(x_test)","93e13e21":"plt.scatter(x=train_pred,y=train_pred-y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=test_pred-true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('residuals')\nplt.title('linear regression')\nplt.plot([10.0,13.5],[0.0,0.0],c='red')\nplt.show()\n\n\nplt.scatter(x=train_pred,y=y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('real values')\nplt.title('linear regression')\nplt.plot([11,13.25],[11,13.25],c='red')\nplt.show()\n\nprint('accuracy:',r2_score(test_pred,true_p))","1b3c0532":"alphas=[0.01,0.03,0.07,0.1,0.3,0.6,1,3,5,7,10,30,60]\nridge=RidgeCV(alphas)\nridge.fit(x_train,y_train)\nalpha=ridge.alpha_\nprint('best alpha:',alpha)\nalphas=[alpha * .6, alpha * .65, alpha * .7, alpha * .75, alpha * .8, alpha * .85, \n                          alpha * .9, alpha * .95, alpha, alpha * 1.05, alpha * 1.1, alpha * 1.15,\n                          alpha * 1.25, alpha * 1.3, alpha * 1.35, alpha * 1.4]\nridge=RidgeCV(alphas,cv=10)\nridge.fit(x_train,y_train)\nalpha=ridge.alpha_\nprint('optimised alphas:',alpha)\nprint('rmse value of train data:',rmse_cv_train(ridge).mean())\nprint('rmse value of test data:',rmse_cv_test(ridge).mean())","c6b99f00":"train_pred=ridge.predict(x_train)\ntest_pred=ridge.predict(x_test)","dd163950":"plt.scatter(x=train_pred,y=train_pred-y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=test_pred-true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('residuals')\nplt.title('ridge regression')\nplt.plot([10.0,13.5],[0.0,0.0],c='red')\nplt.show()\n\n\nplt.scatter(x=train_pred,y=y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('real values')\nplt.title('ridge regression')\nplt.plot([11,13.25],[11,13.25],c='red')\nplt.show()\n\nprint('accuracy:',r2_score(test_pred,true_p))","d090bd78":"lasso = LassoCV(alphas = [0.0001, 0.0003, 0.0006, 0.001, 0.003, 0.006, 0.01, 0.03, 0.06, 0.1, \n                          0.3, 0.6, 1], \n                max_iter = 50000, cv = 10)\nlasso.fit(x_train, y_train)\nalpha = lasso.alpha_\nprint('best alpha:',alpha)\nlasso = LassoCV(alphas = [alpha * .6, alpha * .65, alpha * .7, alpha * .75, alpha * .8, \n                          alpha * .85, alpha * .9, alpha * .95, alpha, alpha * 1.05, \n                          alpha * 1.1, alpha * 1.15, alpha * 1.25, alpha * 1.3, alpha * 1.35, \n                          alpha * 1.4], \n                max_iter = 50000, cv = 10)\nlasso.fit(x_train, y_train)\nalpha = lasso.alpha_\nprint('optimised alpha:',alpha)\nprint('rmse value of train data:',rmse_cv_train(lasso).mean())\nprint('rmse value of test data:',rmse_cv_test(lasso).mean())","7b0602ff":"train_pred=lasso.predict(x_train)\ntest_pred=lasso.predict(x_test)","08f7ae4c":"plt.scatter(x=train_pred,y=train_pred-y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=test_pred-true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('residuals')\nplt.title('lasso regression')\nplt.plot([10.0,13.5],[0.0,0.0],c='red')\nplt.show()\n\n\nplt.scatter(x=train_pred,y=y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('real values')\nplt.title('lasso regression')\nplt.plot([11,13.25],[11,13.25],c='red')\nplt.show()\n\nprint('accuracy:',r2_score(test_pred,true_p))","df0eea94":"# Lasso Regression","8e8fb793":"yes it is. So lets just equate them and impute.","4c9939cc":"Similar situation again","eab54649":"Great!! rmse values of both train and test data have improved a lot.","d4057f28":"It is said that there are outliars in variable 'GrLivArea'.\n[Documentation][1] for the Ames Housing Data indicates that there are outliers present in the training data [1]: http:\/\/ww2.amstat.org\/publications\/jse\/v19n3\/Decock\/DataDocumentation.txt\nLets see","0cb7f670":"Lets see the list of 20 variables having at least one null value","7033b0ea":"Cheers.\nWe have treated all the missing values in the dataset. Now lets have a quick look at correlation within dataset.","033b7cfe":"rmse value of train data looks weird here. Im not sure why. Lets see if that creates a problem later on.","ba1ad916":"As we can see, there is a very small improvement in rmse values of train and test data. Thus we can expect Lasso regression to improve out model minimally. Let's see","3bb6ed76":"# Outlier treatment","c73256d6":"We can see that the sale prices increases with the year built. Newer the house, higher the price.","21803b56":"Since most of the values are either attached or detached, we can impute those two variables based on their respective sale price.","e211ab23":"Accuracy looks pretty good though. Now lets start using regularised linear regression.","c246c34d":"This is the function I've used to impute where I have fitted the average value in certain ranges of sale prices.","7eff2fa1":"Now lets see the relationship between Lot size and sale price.","3b6eeb1c":"Lets begin with lot frontage variable first.","d064a78a":"Now the accuracy has increased by roughly 3 percent. Lets move on to another regularised model lasso regression which eliminates insignificant variables and improve the accuracy.","6938d851":"readying the train,test datasets before training.","eb5ef973":"# Treating missing values","ee57f7c9":"Now lets do some research on some variables.","09864bae":"Its best to check highly correlated variable to the variable for which you're gonna impute. It is to ensure that we're imputing highly likely value.","ba051e23":"Majority of the houses comes under the categories 20,60,50. In other words, most of the houses are 1-STORY 1946 & NEWER ALL STYLES, 2-STORY 1946 & NEWER and 1-1\/2 STORY FINISHED ALL AGES respectively.","276b7a0f":"# Linear Regression","e12e5907":"Easy peasy. We can safely impute all missing values as 'TA'.","73dda453":"The saleprice is right skewed. Thus using log transformation would do the job.","42eeb6a2":"Since we have to fit values that are most likely, we need to see how  it is distributed. I'm taking sale price as second variable to see how it is related with target variable.","a5fffe1a":"Imputing garage year built variable\n\nAssuming that garage year built has relationship with garage type, im plotting the scattterplot to check the distribution.","625bf39e":"We can easily conclude that ID has no significance in prediciting sale price. So we can delete them to avoid disturbance in our model.","9b999013":"Lets fill mode values of these respective ranges of sale price.","6c750851":"Great. We can see clearly that most of the garages that are unfinished have lower sale price.","22ba1317":"# Data analysis","1761a589":"Four data points looks like outliars in the plot. But two points with high saleprice over 70000 seems to follow the linear trend. However, We can easily conclude that thwo ","3a166787":"It looks like detached garage type has saleprice value lower than 12. Lets verify","a769a768":"Sale price increases linearly with overall quality which is obvious. We can expect to see similar trends quality and condition based variables later on.","89820ef2":"If you look closely, year built and garage year built are same at most of the occasions.","bce13138":"This is surprising. Majority of the sale prices are listed similarly with respect to overall condtion of the house. Although there are few exceptions with higher saleprices for rating more than 5.","45b835d8":"Well. All three values are distributed simliarly. We need to dig more to see pattern","5c8f720f":"# Treating skewed data","0f6101dd":"Well. We cant see any significant relationship between Lo size and sale price. But we can say that majority of the houses has lot area in range between 0 and 25000 square feet. ","2f5c31fc":"Since there are significant amount of data with null values in columns 'PoolQC','MiscFeature','Alley','Fence' and 'FireplaceQu', its better to remove those variables since they dont have significant influence in predicting saleprice.","f77a156b":"Now lets display a pairplot by picking few numerical variables that seem important.","d1412b40":"# Ridge regression","03f7f439":"We can see the linear relationship with saleprice vs yearbuilt, total basement area,ground living area, total no of rooms above ground,overall quality,garage area. However, there is weak relationship with year sold.","1cefca53":"As we expected, theres is a slight increase in accuracy in the model.","b3028a00":"Now lets see the skewness of our target variable","de6c7b72":"\nMajority of the houses are classified as Residential Low Density.\n","4939de0d":"Inorder to train the model, it is important to make sure we dont have any categorical variable in the dataset. Thus we will create dummies for all categorical variables.","5a65a785":"Lets analyse the densities within the categorical variables with respect to our target variable sale price."}}