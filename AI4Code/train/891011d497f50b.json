{"cell_type":{"0cd504a8":"code","84847b61":"code","102f8642":"code","09c1461b":"code","c9319e07":"code","5473d888":"code","ec055ac8":"code","da1269df":"code","62653769":"code","ab8f84ef":"code","11e1863d":"code","9f6ac284":"code","5fad2774":"code","e787ba67":"code","5ace6414":"code","d95ae097":"code","93c262e9":"code","cf280d26":"code","1abb45bd":"code","00f1c63b":"code","9d15ff15":"code","7a99551d":"code","13b84307":"code","f5854c83":"code","40ee8e4a":"code","06265d0a":"code","5c745b23":"code","d422e958":"code","0a375995":"code","cd937968":"code","fd8acb84":"code","9da5757a":"code","99043249":"code","e3f269e7":"code","9fde6171":"code","e86213d4":"code","0bfe313e":"code","c1016903":"code","8c662ab6":"markdown","390a5290":"markdown","d4a9588f":"markdown","b0795d20":"markdown","6f5eafdc":"markdown","ac48b263":"markdown","182d12fb":"markdown","a06039d9":"markdown","a46cb098":"markdown","f3e1ba74":"markdown","e32ec26f":"markdown","c94ee039":"markdown","07a41b0a":"markdown","92a67d00":"markdown","3ac558f5":"markdown"},"source":{"0cd504a8":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom statsmodels.graphics.mosaicplot import mosaic\n\n# ML tools\nimport h2o\nfrom h2o.estimators import H2OGradientBoostingEstimator","84847b61":"# import data\ndf = pd.read_csv('..\/input\/loan-data\/loan_data.csv')\ndf.head()","102f8642":"# data overview\ndf.info()","09c1461b":"# basic stats\ntarget = 'not.fully.paid'\nprint(df[target].value_counts())\ndf[target].value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","c9319e07":"features_num = ['int.rate', 'installment', 'log.annual.inc',\n                'dti', 'fico', 'days.with.cr.line',\n                'revol.bal', 'revol.util',\n                'inq.last.6mths', 'delinq.2yrs']","5473d888":"# basic stats\ndf[features_num].describe()","ec055ac8":"# plot distribution of numerical features\nfor f in features_num:\n    plt.figure(figsize=(8,4))\n    df[f].plot(kind='hist', bins=30)\n    plt.title(f)\n    plt.grid()\n    plt.show()","da1269df":"plt.figure(figsize=(8,2))\nplt.boxplot(df['revol.bal'], vert=False)\nplt.title('revol.bal - Boxplot')\nplt.grid()\nplt.show()","62653769":"plt.figure(figsize=(8,2))\nplt.boxplot(np.log10(1+df['revol.bal']), vert=False)\nplt.title('revol.bal - Boxplot \/ log-transformed')\nplt.grid()\nplt.show()","ab8f84ef":"corr_pearson = df[features_num].corr(method='pearson')\ncorr_spearman = df[features_num].corr(method='spearman')\n\nfig = plt.figure(figsize = (9,7))\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()\n\nfig = plt.figure(figsize = (9,7))\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","11e1863d":"# example of scatter plot\nsns.jointplot(data=df, x='fico', y='int.rate', kind='hex')\nplt.show()","9f6ac284":"# example of scatter plot\nsns.jointplot(data=df, x='revol.util', y='int.rate', kind='hex')\nplt.show()","5fad2774":"features_cat = ['credit.policy', 'purpose', 'pub.rec']","e787ba67":"# plot distribution of categorical features\nfor f in features_cat:\n    plt.figure(figsize=(14,4))\n    df[f].value_counts().plot(kind='bar')\n    plt.title(f)\n    plt.grid()\n    plt.show()","5ace6414":"# plot target vs binned numerical features using mosaic plot\nplt_para_save = plt.rcParams['figure.figsize'] # remember plot settings\n\nfor f in features_num:\n    \n    # add binned version of each numerical feature first\n    new_var = f + '_bin'\n    df[new_var] = pd.qcut(df[f], 10, duplicates='drop')\n    \n    # then create mosaic plot\n    plt.rcParams['figure.figsize'] = (16,5) # increase plot size for mosaics\n    mosaic(df, [new_var, target], title='Target vs ' + f + ' [binned]')\n    plt.show()\n    \n# reset plot size again\nplt.rcParams['figure.figsize'] = plt_para_save","d95ae097":"# plot target vs features using mosaic plot\nplt_para_save = plt.rcParams['figure.figsize'] # remember plot settings\n\nfor f in features_cat:\n    plt.rcParams['figure.figsize'] = (16,5) # increase plot size for mosaics\n    mosaic(df, [f, target], title='Target vs ' + f + ' [binned]',\n           label_rotation=90)\n    plt.show()\n    \n# reset plot size again\nplt.rcParams['figure.figsize'] = plt_para_save","93c262e9":"# select predictors\npredictors = features_num + features_cat\nprint('Number of predictors: ', len(predictors))\nprint(predictors)","cf280d26":"# start H2O\nh2o.init(max_mem_size='12G', nthreads=4) # Use maximum of 12 GB RAM and 4 cores","1abb45bd":"# upload data frame in H2O environment\ndf_hex = h2o.H2OFrame(df)\n\n# force categorical target\ndf_hex[target] = df_hex[target].asfactor()\n\n# train \/ test split (70\/30)\ntrain_perc = 0.7\ntrain_hex, test_hex = df_hex.split_frame(ratios=[train_perc], seed=999)","00f1c63b":"# define Gradient Boosting model\nn_cv = 5\n\nfit_1 = H2OGradientBoostingEstimator(ntrees = 50,\n                                     max_depth=4,\n                                     min_rows=10,\n                                     learn_rate=0.01, # default: 0.1\n                                     sample_rate=1,\n                                     col_sample_rate=0.7,\n                                     nfolds=n_cv,\n                                     seed=999)","9d15ff15":"# train model\nt1 = time.time()\nfit_1.train(x=predictors,\n            y=target,\n            training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","7a99551d":"# show cross validation metrics\nfit_1.cross_validation_metrics_summary()","13b84307":"# show scoring history - training vs cross validations\nfor i in range(n_cv):\n    cv_model_temp = fit_1.cross_validation_models()[i]\n    df_cv_score_history = cv_model_temp.score_history()\n    my_title = 'CV ' + str(1+i) + ' - Scoring History [AUC]'\n    plt.scatter(df_cv_score_history.number_of_trees,\n                y=df_cv_score_history.training_auc, \n                c='blue', label='training')\n    plt.scatter(df_cv_score_history.number_of_trees,\n                y=df_cv_score_history.validation_auc, \n                c='darkorange', label='validation')\n    plt.title(my_title)\n    plt.xlabel('Number of Trees')\n    plt.ylabel('AUC')\n    plt.ylim(0,1)\n    plt.legend()\n    plt.grid()\n    plt.show()","f5854c83":"# basic version\nfit_1.varimp_plot(-1)","40ee8e4a":"# variable importance using shap values => see direction as well as severity of feature impact\nt1 = time.time()\nfit_1.shap_summary_plot(train_hex);\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","06265d0a":"# confusion matrix with manual threshold - here we try to achieve a symmetric outcome\ntt = 0.19813527\nconf_train_man = fit_1.confusion_matrix(train=True, thresholds=tt)\nconf_train_man.show()","5c745b23":"# confusion matrix on cross validation\nconf_cv_man = fit_1.confusion_matrix(xval=True, thresholds=tt)\nconf_cv_man.show()","d422e958":"# training performance - AUC\nperf_train = fit_1.model_performance(train=True)\nperf_train.plot()","0a375995":"# cross validation performance - AUC\nperf_cv = fit_1.model_performance(xval=True)\nperf_cv.plot()","cd937968":"# calc performance on test test\nperf_test = fit_1.model_performance(test_hex)\n\n# ROC Curve - Test Set\nperf_test.plot()","fd8acb84":"# confusion matrix using our manual threshold\nconf_test_man = perf_test.confusion_matrix(thresholds=tt)\nconf_test_man.show()","9da5757a":"# calc corresponding accuracy\nconf_list_temp = conf_test_man.to_list()\nn_matrix = sum(conf_list_temp[0]) + sum(conf_list_temp[1]) \nacc_t1_test = (conf_list_temp[0][0]+conf_list_temp[1][1]) \/ n_matrix\nprint('Accuracy:', np.round(acc_t1_test,6))","99043249":"# predict on test set (extract probabilities only)\npred_test = fit_1.predict(test_hex)['p1']\npred_test = pred_test.as_data_frame().p1","e3f269e7":"# plot test set predictions (probabilities)\nplt.figure(figsize=(7,5))\nplt.hist(pred_test, bins=100)\nplt.title('Predictions on Test Set')\nplt.grid()\nplt.show()","9fde6171":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='credit.policy');","e86213d4":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='int.rate');","0bfe313e":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='fico');","c1016903":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='purpose');","8c662ab6":"### Scatter Plots:","390a5290":"### Correlations:","d4a9588f":"<a id='2'><\/a>\n# Numerical Features","b0795d20":"<a id='3'><\/a>\n# Categorical Features","6f5eafdc":"### More details:","ac48b263":"<a id='1'><\/a>\n# Target Exploration","182d12fb":"### Categorical Features","a06039d9":"### Numerical Features","a46cb098":"<a id='4'><\/a>\n# Target vs Features","f3e1ba74":"### Training\/CV - Performance","e32ec26f":"### Test Set - Performance","c94ee039":"# Table of Contents\n* [Target Exploration](#1)\n* [Numerical Features](#2)\n* [Categorical Features](#3)\n* [Target vs Features](#4)\n* [Fit Model](#5)\n* [Partial Dependence Plots](#6)","07a41b0a":"<a id='6'><\/a>\n# Partial Dependence Plots","92a67d00":"### Variable Importance","3ac558f5":"<a id='5'><\/a>\n# Fit Model"}}