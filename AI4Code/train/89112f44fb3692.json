{"cell_type":{"737093fa":"code","3c2d72be":"code","4046375b":"code","1df4bd2d":"code","c4d25b0f":"code","d81fff48":"code","c8f80eb9":"code","11bcef5a":"code","c71c009a":"code","c028caf5":"code","efab04e1":"code","2a82c947":"code","c052d89d":"code","35d3796c":"code","15f80117":"code","52267436":"code","3bf56953":"code","dbab09ae":"markdown","dc0e8c5a":"markdown","f6713ec9":"markdown","1e0c8f36":"markdown","5186ef79":"markdown","06e91a55":"markdown","6edd055e":"markdown","ce6d6504":"markdown","cf454cc5":"markdown","40742f47":"markdown","80e816cb":"markdown","e80c5fa4":"markdown","bba5154e":"markdown","9a5d5982":"markdown","bf5540e4":"markdown","dc3771dc":"markdown","65c2785d":"markdown","a442e60c":"markdown","7b4b9de0":"markdown","224e38a0":"markdown"},"source":{"737093fa":"from imageio import imread\nfrom PIL import Image\nimport imageio\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimport numpy as np\n\nfrom PIL import Image, ImageEnhance\n%matplotlib inline \n\nimport cv2 # for openCV","3c2d72be":"#Read image for Open CV - BGR\nimage1 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets100.png')\nimage2 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets105.png')\nimage3 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets120.png')\nimage4 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets114.png')\nimage5 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets11.png')\nimage6 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets103.png')\nimage7 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets110.png')\nimage8 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets111.png')\nimage9 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets112.png')\nimage10 = cv2.imread('\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets119.png')","4046375b":"def preview(image_set, titles, figsize): # This is fucntion to preview all images before processing\n    \n    for p in range(len(image_samples)):\n        plt.figure(figsize = (figsize,figsize)) \n        plt.subplot(5,2,p+1)\n        plt.imshow(image_samples[p],'gray')\n        plt.title(titles[p])\n        plt.xticks([]),plt.yticks([])\n\ndef crop(image, start_y, end_y, start_x, end_x): # To crop the image\n       \n    img_cropped = image[start_y:end_y, start_x:end_x]\n    \n    return img_cropped\n\ndef resize(image, width, height): # To resize the image\n\n    img_resized = cv2.resize(image,(width,height))\n\n    return img_resized\n\ndef gamma_correction(image, y): # To control the overall brightness of an image\n    \n    gamma_correct = np.array(255 * (image \/ 255) ** y , dtype='uint8')\n    \n    return gamma_correct\n\ndef threshold(image): # For object segmenting, this changes the pixels to make the image easier to analyze\n    \n    thresh = cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 255, 19)\n    thresh = cv2.bitwise_not(thresh)\n\n    return thresh\n\ndef dilation_erosion(image): # Adding and removing pixels in the image to smoothen out the shape\n    \n    kernel = np.ones((15,15), np.uint8)\n    img_dilation = cv2.dilate(image, kernel, iterations=1)\n    img_erode = cv2.erode(img_dilation,kernel, iterations=1)\n\n    # clean all noise after dilatation and erosion\n    img_erode = cv2.medianBlur(img_erode, 7)\n    \n    return img_erode\n\ndef plotting(image_set, titles, rows, cols, figsize):\n    \n    for i in range(len(images)):\n        plt.figure( figsize = (figsize,figsize) )\n        plt.subplot(rows, cols, i+1)\n        \n        plt.imshow(images[i],'gray')\n        plt.title(titles[i])\n        \ndef plt_wo_lbl(imgs, titles, figsize):\n    \n    for i in range(len(images)):\n        plt.figure( figsize = (figsize,figsize) )\n        plt.subplot(2,3,i+1),plt.imshow(images[i],'gray')\n        plt.title(titles[i])\n        plt.xticks([]),plt.yticks([])\n\ndef plt_xy_lbl(imgs, titles, figsize):\n    \n    for i in range(len(images)):\n        plt.figure( figsize = (figsize,figsize) )\n        plt.subplot(2,3,i+1),plt.plot(images[i])\n        plt.title(titles[i])\n        plt.xlabel('bins')\n        plt.ylabel(\"No of pixels\")\n\ndef plt_hist(img):\n    plt.hist(img.flatten(), 256, [0,256])\n    plt.show()\n        \n\n            ","1df4bd2d":"images = [image1, image2, image3, image4, image5, image6, image7, image8, image9, image10]\ntitles = ['Helmet 1', 'Helmet 2', 'Helmet 3', 'Helmet 4', 'Helmet 5', 'No Helmet 1', 'No Helmet 2', 'No Helmet 3', 'No Helmet 4', 'No Helmet 5']\n\nplotting(images, titles, 5, 2, 18)\n\nprint(\"Image size for all images (height, width):\", (image1.shape))  \n","c4d25b0f":"#Hist = Historgram\n\nhist_h1 = cv2.calcHist(image1,[0],None,[256],[0,256])\nhist_nh1 = cv2.calcHist(image6,[0],None,[256],[0,256])\n\ntitles = ['Helmet 1','No Helmet 1']\nimages = [hist_h1, hist_nh1,]\n\nplt_xy_lbl(images, titles, 10)\n","d81fff48":"#Hist = Historgram\n\nhist_h2 = cv2.calcHist(image2,[0],None,[256],[0,256])\nhist_nh2 = cv2.calcHist(image7,[0],None,[256],[0,256])\n\ntitles = ['Helmet 2','No Helmet 2']\nimages = [hist_h2, hist_nh2,]\n\nplt_xy_lbl(images, titles, 10)","c8f80eb9":"#Hist = Historgram\n\nhist_h3 = cv2.calcHist(image3,[0],None,[256],[0,256])\nhist_nh3 = cv2.calcHist(image8,[0],None,[256],[0,256])\n\ntitles = ['Helmet 3','No Helmet 3']\nimages = [hist_h3, hist_nh3,]\n\nplt_xy_lbl(images, titles, 10)","11bcef5a":"#Hist = Historgram\n\nhist_h4 = cv2.calcHist(image4,[0],None,[256],[0,256])\nhist_nh4 = cv2.calcHist(image9,[0],None,[256],[0,256])\n\ntitles = ['Helmet 4','No Helmet 4']\nimages = [hist_h4, hist_nh4,]\n\nplt_xy_lbl(images, titles, 10)","c71c009a":"#Hist = Historgram\n\nhist_h5 = cv2.calcHist(image5,[0],None,[256],[0,256])\nhist_nh5 = cv2.calcHist(image10,[0],None,[256],[0,256])\n\ntitles = ['Helmet 5','No Helmet 5']\nimages = [hist_h5, hist_nh5,]\n\nplt_xy_lbl(images, titles, 10)","c028caf5":"# For image 1\n\nmultiplier = 2\n\nresized_1 = resize(image1, (image1.shape[1])*multiplier, (image1.shape[0])*multiplier)\nresized_2 = resize(image2, (image2.shape[0])*multiplier, (image2.shape[1])*multiplier)\nresized_3 = resize(image3, (image3.shape[1])*multiplier, (image3.shape[0])*multiplier)\nresized_4 = resize(image4, (image4.shape[1])*multiplier, (image4.shape[0])*multiplier)\nresized_5 = resize(image5, (image5.shape[1])*multiplier, (image5.shape[0])*multiplier)\nresized_6 = resize(image6, (image6.shape[1])*multiplier, (image6.shape[0])*multiplier)\nresized_7 = resize(image7, (image7.shape[1])*multiplier, (image7.shape[0])*multiplier)\nresized_8 = resize(image8, (image8.shape[1])*multiplier, (image8.shape[0])*multiplier)\nresized_9 = resize(image9, (image9.shape[1])*multiplier, (image9.shape[0])*multiplier)\nresized_10 = resize(image10, (image10.shape[1])*multiplier, (image10.shape[0])*multiplier)\n\nimages = [resized_1, resized_2, resized_3, resized_4, resized_5, resized_6, resized_7, resized_8, resized_9, resized_10]\ntitles = ['Resized Helmet 1', 'Resized Helmet 2', 'Resized Helmet 3', 'Resized Helmet 4', 'Resized Helmet 5', 'Resized No Helmet 1', 'Resized No Helmet 2', 'Resized No Helmet 3', 'Resized No Helmet 4', 'Resized No Helmet 5']\n\nplotting(images, titles, len(images), 1, 50)\n\nfor r in range (len(images)):\n    print(titles[r], \"size (height, width): \", images[r].shape)\nprint(\"\")","efab04e1":"gamma_1 = gamma_correction(resized_1, 1.3)\ngamma_2 = gamma_correction(resized_2, 3.8)\ngamma_3 = gamma_correction(resized_3, 4.0)\ngamma_4 = gamma_correction(resized_4, 3.9)\ngamma_5 = gamma_correction(resized_5, 2.0)\ngamma_6 = gamma_correction(resized_6, 3.1)\ngamma_7 = gamma_correction(resized_7, 2.5)\ngamma_8 = gamma_correction(resized_8, 1.2)\ngamma_9 = gamma_correction(resized_9, 2.6)\ngamma_10 = gamma_correction(resized_10, 4.5)\n\nimages = [gamma_1, gamma_2, gamma_3, gamma_4, gamma_5, gamma_6, gamma_7, gamma_8, gamma_9, gamma_10]\ntitles = ['Gamma Correction Helmet 1', 'Gamma Correction Helmet 2', 'Gamma Correction Helmet 3', 'Gamma Correction Helmet 4', 'Gamma Correction Helmet 5', 'Gamma Correction No Helmet 1','Gamma Correction No Helmet 2', 'Gamma Correction No Helmet 3', 'Gamma Correction No Helmet 4', 'Gamma Correction No Helmet 5']\n\nplotting(images, titles, len(images), 1, 40)","2a82c947":"#Function to Increase Brightness\ndef increase_brightness(image, which):\n    #increase brightness\n    increase_brightness = cv2.cvtColor(image.copy(),cv2.COLOR_BGR2RGB)\n    hsvImg = cv2.cvtColor(increase_brightness,cv2.COLOR_BGR2HSV)\n    value = 55\n    vValue = hsvImg[...,2]\n    hsvImg[...,2] = np.where((255-vValue) < value, 255, vValue+value)\n#     save_image(cv2.cvtColor(hsvImg,cv2.COLOR_HSV2RGB),which)\n    return cv2.cvtColor(hsvImg,cv2.COLOR_HSV2RGB)\n\n#Function to Decrease Brightness\ndef decrease_brightness(image, which):\n    #decrease brightness\n    decrease_brightness = cv2.cvtColor(image.copy(),cv2.COLOR_BGR2RGB)\n    hsvImg1 = cv2.cvtColor(decrease_brightness,cv2.COLOR_BGR2HSV)\n    hsvImg1[...,2] = hsvImg1[...,2] * 0.55\n#     save_image(cv2.cvtColor(hsvImg1,cv2.COLOR_HSV2RGB),which)\n    return cv2.cvtColor(hsvImg1,cv2.COLOR_HSV2RGB)\n\n#Function for Contrast\ndef contrast(image, which):\n    #contrast\n    contrast_img = cv2.addWeighted(image,1.55,np.zeros(image.shape,image.dtype),0,0)\n#     save_image(contrast_img,which)\n    return contrast_img\n\n#Function for Clipping\ndef clip_image(image, which):\n    clipped = np.clip(image,a_min = 0, a_max= 220)\n#     save_image(clipped,which)\n    return clipped\n\n#Function for Thresholding\ndef thresh(imagePath, which):\n    image = cv2.imread(imagePath)\n    gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n    image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n    thresh1 = cv2.threshold(image,15,220,cv2.THRESH_BINARY)[1]\n    thresh2 = cv2.threshold(image,15,220,cv2.THRESH_BINARY_INV)[1]\n    hist_m = cv2.calcHist(gray,[0],None,[256],[0,256])\n    mgray_eqhist=cv2.equalizeHist(gray)\n    hist_m=cv2.calcHist(mgray_eqhist,[0],None,[256],[0,256])\n    clahe=cv2.createCLAHE(clipLimit=40)\n    mgray_clahe = clahe.apply(mgray_eqhist)\n    ret,clthresh1 = cv2.threshold(mgray_clahe,80,255,cv2.THRESH_BINARY)\n    ret,clthresh2 = cv2.threshold(mgray_clahe,80,255,cv2.THRESH_BINARY_INV)\n    thresh11 = cv2.adaptiveThreshold(mgray_clahe, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)\n    thresh31 = cv2.adaptiveThreshold(mgray_clahe, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 21,5 )\n    images = [thresh1,thresh2,clthresh1,clthresh2,thresh11,thresh31]\n    titles = ['Binary','Binary Invert','CLAHE Binary','CLAHE Binary Invert','Adaptive Mean','Adaptive Gaussian']\n    f, axarr = plt.subplots(1,6,figsize=(15,15))\n    f.tight_layout()\n    for i in range(6):\n        if i < 2:\n              axarr[i].imshow(images[i])\n        else:\n              axarr[i].imshow(images[i],cmap='gray')\n        axarr[i].title.set_text(titles[i])\n    \n#Main Function    \ndef forPreprocess(imagePath,which):\n    image = cv2.imread(imagePath)\n    image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n    ib = increase_brightness(image,which)\n    db = decrease_brightness(image,which)\n    co = contrast(image, which)\n    cl = clip_image(image,which)\n    images = [image,ib,db,co,cl]\n    titles = ['Original','Increased Brightness','Decreased Brightness','Contrast','Clipping']\n    f, axarr = plt.subplots(1,5,figsize=(15,15))\n    f.tight_layout()\n    for i in range(5):\n        axarr[i].imshow(images[i])\n        axarr[i].title.set_text(titles[i])\n    thresh(imagePath,which)","c052d89d":"image1 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets100.png\"\nimage6 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets103.png\"\nforPreprocess(image1,0)\nforPreprocess(image6,1)","35d3796c":"image2 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets105.png\"\nimage7 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets110.png\"\nforPreprocess(image1,0)\nforPreprocess(image7,1)","15f80117":"image3 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets120.png\"\nimage8 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets111.png\"\nforPreprocess(image3,0)\nforPreprocess(image8,1)","52267436":"image4 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets114.png\"\nimage9 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets112.png\"\nforPreprocess(image4,0)\nforPreprocess(image9,1)","3bf56953":"image5 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets11.png\"\nimage10 = \"\/kaggle\/input\/bike-helmets-detection\/images\/BikesHelmets119.png\"\nforPreprocess(image5,0)\nforPreprocess(image10,1)","dbab09ae":"**Contrast Adjustment using Gamma Correction**","dc0e8c5a":"**Code that reads the images**","f6713ec9":"**Functions to be Used**","1e0c8f36":"**1st Pair**","5186ef79":"**Resizing**","06e91a55":"**5th Pair**","6edd055e":"**Helmet vs No Helmet**","ce6d6504":"**3rd Pair**","cf454cc5":"**Thresholding**","40742f47":"**2nd Pair**","80e816cb":"**1st Pair**","e80c5fa4":"**3rd Pair**","bba5154e":"**Histogram**","9a5d5982":"**Image Preprocessing**","bf5540e4":"**Preview of Images We Are Going to Use (In Grayscale)**","dc3771dc":"**4th Pair**","65c2785d":"**2nd Pair**","a442e60c":"**4th Pair**","7b4b9de0":"**5th Pair**","224e38a0":"**Bike Helmets Detection**\n\n**Image Analyzation and Thresholding**\n\n**CCS 221 - Midterms (Code)**\n\n**Joemaez Napatal**\n\n**Cember Mae Paborada** \n\n**Lyle Adrian Contreras**\n\n**Julian Anthony Aguirre**"}}