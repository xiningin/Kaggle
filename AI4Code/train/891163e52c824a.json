{"cell_type":{"feedfe18":"code","cb62e310":"code","06b6722f":"code","c07c160a":"code","3866e654":"code","20384f67":"code","af0e783e":"code","881abbe7":"code","e8293820":"code","5d94ce45":"code","81213ef0":"code","7de272e9":"code","2aa08b02":"code","a5799df8":"code","01b6c6b7":"markdown","0c37a3d7":"markdown","d1d50a1e":"markdown","9ab46819":"markdown","1bdb9ff4":"markdown","5d92036b":"markdown","5f138e4f":"markdown","0f6159a2":"markdown","35be946b":"markdown","c3381098":"markdown","97538939":"markdown","4d6bc478":"markdown","d49f3fd0":"markdown"},"source":{"feedfe18":"import pandas as pd \npd.options.display.float_format = '${:,.2f}'.format\nimport numpy as np \n\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom tensorflow.keras.layers import Dense, Activation, SimpleRNN, Flatten,TimeDistributed\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import StandardScaler\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport plotly.graph_objects as go \nfrom IPython.display import display\nfrom PIL import Image\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npath = '..\/input\/nvidia-stock-price-prediction\/NVDA.csv'\ndf= pd.read_csv(path)\nimport tensorflow as tf\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n","cb62e310":"df['Date'] = pd.to_datetime(df['Date'])\ndf['DOW'] = df['Date'].dt.dayofweek # Day of the week\ndf['Day'] = df['Date'].dt.day # Day of the month\ndf['MONTH'] = df['Date'].dt.month # Month of the year\ndf['WOY'] = df['Date'].dt.week # Week of the year\ndf.sample(5)","06b6722f":"fig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                                     open=df['Open'],high=df['High'],low=df['Low'],close=df['Close'],\n                                     increasing_line_color= 'cyan', decreasing_line_color= 'gray')])\nfig.show()","c07c160a":"fig = go.Figure([go.Scatter(x=df['Date'], y=df['Open'])])\nfig.show()","3866e654":"display(Image.open('..\/input\/timeprocess\/Time seties.png'))","20384f67":"# Extracting Date for future predictions \ndates_ = df['Date']\n\n# Feature needed # open --> Volumen\ntest_data = df.iloc[:,1:].astype('float64')\n\n#Scaling Data\nSC = StandardScaler()\nSC = SC.fit(test_data)\ntest_data_SC = SC.transform(test_data)\n\n#Creating Sequences,\nXD_train, YD_train = [],[]\nn_steps = 1 # Number of day we want to predict into the future\nn_past = 1 # Number of past days we want to use to predict the future\n\nfor i in range(n_past, len(test_data_SC) - n_steps + 1):\n    XD_train.append(test_data_SC[i - n_past:i, 0:test_data_SC.shape[1]])\n    YD_train.append(test_data_SC[i + n_steps - 1:i + n_steps,0])\n    \nX_train,y_train = np.array(XD_train)[:201] , np.array(YD_train)[:201]\nX_test,y_test = np.array(XD_train)[201:226] , np.array(YD_train)[201:226]\nX_valid,y_valid = np.array(XD_train)[226:] , np.array(YD_train)[226:]\n\nprint(f\"X_train shape :{X_train.shape}, y_train shape :{y_train.shape}\")\nprint(f\"X_test shape :{X_test.shape}, y_test shape :{y_test.shape}\")\nprint(f\"X_valid shape :{X_valid.shape}, y_valid shape :{y_valid.shape}\")","af0e783e":"# ----> Keras TimeSeries Generator --> I didnt use it at all\nts_generator = TimeseriesGenerator(XD_train,YD_train,length=4,sampling_rate =20, batch_size = 128)\nprint('Data Shape',ts_generator[0][0].shape)","881abbe7":"model = Sequential()\nmodel.add(SimpleRNN(20, input_shape = [None, 10], return_sequences=True))\nmodel.add(SimpleRNN(20))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer = 'adam', loss = 'mse')\nhistory = model.fit(X_train, y_train, epochs=500, verbose = 0,\n                    validation_data=(X_valid, y_valid))","e8293820":"prediction_ = model.predict(X_valid)\nforecast = np.repeat(prediction_,test_data_SC.shape[1],axis=-1)\ny_pred_future = SC.inverse_transform(forecast)[:,0]","5d94ce45":"fig,ax = plt.subplots(1,2, figsize = (20,7))\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\n\n#Training Results\nax[0].plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")\nax[0].plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")\nax[0].legend(fontsize=12)\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Loss\")\nax[0].grid(True)\n\n#Prediction\nax[1].plot(df[226:]['Open'], label =\"Real Values\")\nax[1].plot(test_data[-1:]['Open'],\"bx\", markersize=10 , label = 'Real Stock price at 2021-08-11')\nax[1].plot(251,y_pred_future[-1],\"ro\",label = 'Predicted Stock price at 2021-08-11')\nax[1].set_xlabel(\"Day\")\nax[1].set_ylabel(\"Price\")\nax[1].grid(True)\nax[1].legend(fontsize=12) ;\n","81213ef0":"#Creating Sequences,\nXD_train, YD_train = [],[]\nn_steps = 1 # Number of day we want to predict into the future\nn_past = 10 # Number of past days we want to use to predict the future\n\nfor i in range(n_past, len(test_data_SC) - n_steps + 1):\n    XD_train.append(test_data_SC[i - n_past:i, 0:test_data_SC.shape[1]])\n    YD_train.append(test_data_SC[i + n_steps - 1:i + n_steps,0])\n\nX_train,y_train = np.array(XD_train)[:201] , np.array(YD_train)[:201]\nX_test,y_test = np.array(XD_train)[201:226] , np.array(YD_train)[201:226]\nX_valid,y_valid = np.array(XD_train)[226:] , np.array(YD_train)[226:]\n\nprint(f\"X_train shape :{X_train.shape}, y_train shape :{y_train.shape}\")\nprint(f\"X_test shape :{X_test.shape}, y_test shape :{y_test.shape}\")\nprint(f\"X_valid shape :{X_valid.shape}, y_valid shape :{y_valid.shape}\")","7de272e9":"model = Sequential()\nmodel.add(SimpleRNN(20, input_shape = [None, 10], return_sequences=True))\nmodel.add(SimpleRNN(20))\nmodel.add(Dense(10)) #Ten Sequence output\n\nmodel.compile(optimizer = 'adam', loss = 'mse')\nhistory = model.fit(X_train, y_train, epochs=400, verbose = 0,\n                    validation_data=(X_valid, y_valid))","2aa08b02":"n_futures = 10\ny_pred_10 = model.predict(X_valid[-n_futures:])[:,[0]]\nforecast_ = np.repeat(y_pred_10,test_data_SC.shape[1],axis=-1)\ny_pred_future = SC.inverse_transform(forecast_)","a5799df8":"from plotly.subplots import make_subplots\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objects as go\n\nSP = go.Scatter(x=df['Date'][220:], y=df['Open'][220:] , name = 'Stock Prices')\nRSP= go.Scatter(x=df['Date'][-15:], y=df['Open'][-15:] , name = 'Real Stock Prices')\nPSP = go.Scatter(x=df['Date'][-10:], y=list(y_pred_future[-10:,0]), name = 'Predicted Stock Prices')\n\nfig = make_subplots()\nfig.add_trace(SP)\nfig.add_trace(RSP)\nfig.add_trace(PSP)\nfig['layout'].update(height = 600, width = 800, title = 'Ten day Stock Prices Prediction',xaxis=dict(tickangle=-90))\niplot(fig)\n","01b6c6b7":"<div style=\"color:white;\n       display:fill;\n       border-radius:5px;\n       background-color:#00bde6 ;\n       font-size:200%;\n       font-family:Nexa;\n       letter-spacing:0.5px\">\n    <p style=\"padding: 20px;\n          color:white;\">\n        <b> 1 |<\/b> Introduction\n    <\/p>\n<\/div>\n\nThank you very Much for passing and checking this notebook\/code\n- This is again Marvin Garcia trying to practice and understand a bit more of Deep learning. In this Oppotunity I am Using ***Keras Libraries*** to implement ***recruiter neural network*** and using the book [Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems](https:\/\/www.amazon.com\/s?k=hands+on+machine+learning+with+scikit-learn+and+tensorflow+2&crid=NMJ5XBNJN7BF&sprefix=hands+on+machine+%2Caps%2C344&ref=nb_sb_ss_ts-doa-p_1_17)\n- I am using Stock prices from [NVIDIA Coorportation](https:\/\/finance.yahoo.com\/quote\/NVDA\/history\/) From sept 2020 to sept 2021.-- Check it out for more Details\n\n#### Very important Information\n* If you follow this company you might know that they made [Stock Splits](https:\/\/www.fool.com\/investing\/2021\/07\/03\/nvidia-announced-a-stock-split-heres-why-investors\/) check the post where you have an amazing description of what it is.\n* Recurrent neural network (RNN) is a artificial neural networks where connections between nodes might return to the same perceptron in temporal sequence. This allows it to exhibit temporal dynamic behavior. Derived from feedforward neural networks, RNNs can use their internal state (memory) to process variable length sequences of inputs\n\n| Brief Description of RNN|\n| - |\n|<img src=\"https:\/\/www.simplilearn.com\/ice9\/free_resources_article_thumb\/Network_framework.gif\" alt=\"Drawing\" style=\"width:700px;\"\/> |\nby [SimpliLearn](https:\/\/www.simplilearn.com\/tutorials\/deep-learning-tutorial\/rnn)\n    \n\n### **<span style='color:#00bde6'>1.1<\/span> | Python Libraries**\n\n- #### <span> 1.1. Loading Libraries  <\/span>\n","0c37a3d7":"<div style=\"color:white;\n       display:fill;\n       border-radius:5px;\n       background-color:#00bde6 ;\n       font-size:200%;\n       font-family:Nexa;\n       letter-spacing:0.5px\">\n    <p style=\"padding: 20px;\n          color:white;\">\n        <b> 4 |<\/b> Training RNN\n    <\/p>\n<\/div>\n\n| Training - Unrolling RNN|\n| - |\n|<img src=\"https:\/\/static.wixstatic.com\/media\/3eee0b_969c1d3e8d7943f0bd693d6151199f69~mv2.gif\" alt=\"Drawing\" style=\"width:500px;height:200px\"\/> |\nby [Nagesh Singh](https:\/\/www.theaidream.com\/post\/introduction-to-rnn-and-lstm)\n\n### **<span style='color:#00bde6'>4.1<\/span> | RNN Predicting the Next Step \/ Price T+1**\n\n- In this section I am using Simple RNN to predict the Stock price in the 25th day.\n- If you dont know how RNN works internally you can check this Lecture from [\nMIT 6.S191 (2020): Recurrent Neural Networks](https:\/\/www.youtube.com\/watch?v=SEnXr6v2ifU) Amazing video\n- Let's star Predicting the stock price.","d1d50a1e":"- **Important** : Before Predicting the Price at the dat 25th , We have to apply [inverse_transform](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html) this is like applying ","9ab46819":"- Predicting 10 day ahead","1bdb9ff4":"### **<span style='color:#00bde6'>3.2<\/span> | Brief Explanation**\n- How are we gonig to process the data ? Let's see the follwoing array [1,2,3,4,5,6] we can easily say that the next value is 7 because is increasing in t+1 *** This is T step concept ***\n- How can we create Sequence, length etc? well very simple , given [0,1,2,3,4,5,6,7,8,9] , we can define the length of our sequence [0,1,2,3,4][prediction] and predict then [1,2,3,4,5][prediction], ..... [...,n][n+1] **This is the T+1 concept and offset** check the image below \n-How can we do that? ... well very simple , we can use [Time Series Generator](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/preprocessing\/sequence\/TimeseriesGenerator) by keras but first let's take a look","5d92036b":"#### <span> 1.2. A little bit of the Data  <\/span>\n\n- From left to rigth:\n- ***Open*** : It is initial price when the stock price market starts, do not get confused ***with pre-market prices***\n- ***High*** : Highest stock price reached during the day \n- ***Low*** : Lowest stock price reached during the day \n- ***Close*** : Final stock price reached during the day ","5f138e4f":"<div style=\"color:white;\n       display:fill;\n       border-radius:5px;\n       background-color:#00bde6 ;\n       font-size:200%;\n       font-family:Nexa;\n       letter-spacing:0.5px\">\n    <p style=\"padding: 20px;\n          color:white;\">\n        <b> 5 |<\/b> Summary\n    <\/p>\n<\/div>\n\n### **<span style='color:#00bde6'>5.1<\/span>** | Coming up....\n- **LSTM**, **Custom RNN**\n- Thank you very much to read until this point, work with RNN was a bit challenging and I have to admit that There are model even more complex but this is just the beggining and better do it now \n- **I woould Appreciate** any Comment, Feedback and please upvote on this notebook \n- Speciall thanks to [Andrey Shtrauss](https:\/\/www.kaggle.com\/shtrausslearning) and her post which are great and full of new things | Training - Unrolling RNN|\n\n\n| UPVOTE|\n| - |\n|<img src=\"https:\/\/i.imgflip.com\/lm9kc.jpg\" alt=\"Drawing\" style=\"width:500px;height:500px\"\/> |\nby [IMGFLIP](https:\/\/imgflip.com\/i\/lm9kc)\n\n\n","0f6159a2":"### **<span style='color:#00bde6'>3.2<\/span> | Time Series Generator one Step ahead**\n- Important parameters **data, target, sampling or offset** then you can use .fit(Timeseriesgenerator) however I am not sure how it improve the training process therefore i decided to do in a traditional way **Timeseriesgenerator example right below**","35be946b":"- Plotting Loss - Valdiation and prediction","c3381098":"<div style=\"color:white;\n       display:fill;\n       border-radius:5px;\n       background-color:#00bde6 ;\n       font-size:200%;\n       font-family:Nexa;\n       letter-spacing:0.5px\">\n    <p style=\"padding: 20px;\n          color:white;\">\n        <b> 3 |<\/b> Data Processing\n    <\/p>\n<\/div>\n\n### **<span style='color:#00bde6'>3.1<\/span> | Preparing Data into Sequence**\n\n- This is in my opinion the most difficult part, RNN can work with **Seq2seq** , **Seq2seq to one** , **Seq2Gen**\n- Slide the data might be a bit challenging so let's go but before let's see some representation os **Seq2Seq**, however in this notebook I will Use **Seq2seq to one**  and predit not only the price of the next day but **5 days ahead**\n\n| Sequence One Prediction |\n| - |\n<img src=\"https:\/\/machinelearningmastery.com\/wp-content\/uploads\/2017\/07\/Example-of-a-Sequence-Prediction-Problem.png\" alt=\"Drawing\" style=\"width:700px;\"\/> \n\n| Sequence-to-Sequence Prediction |\n| - |\n<img src=\"https:\/\/machinelearningmastery.com\/wp-content\/uploads\/2017\/07\/Example-of-a-Sequence-to-Sequence-Prediction-Problem.png.png\" alt=\"Drawing\" style=\"width:700px;\"\/>\n\n| Sequence Classification |\n| - |\n<img src=\"https:\/\/machinelearningmastery.com\/wp-content\/uploads\/2017\/07\/Sequence-Classification.png\" alt=\"Drawing\" style=\"width:700px;\"\/>\nall of them were created by [Jason Brownlee](https:\/\/machinelearningmastery.com\/lstms-with-python\/n)\n","97538939":"### **<span style='color:#00bde6'>4.2<\/span>** | RNN Predicting the Next 10 Step \n\n- We have to Create Sequence with 10 Step ahead\n- add 9 more Percentron in the last layer\n- Apply Inverser Transformation \n- Plot","4d6bc478":"<div style=\"color:white;\n       display:fill;\n       border-radius:5px;\n       background-color:#00bde6 ;\n       font-size:200%;\n       font-family:Nexa;\n       letter-spacing:0.5px\">\n    <p style=\"padding: 20px;\n          color:white;\">\n        <b> 2 |<\/b> Stock Prices\n    <\/p>\n<\/div>\n\n### **<span style='color:#00bde6'>2.1<\/span> | Time series with Plotly**\n\n- Here we have the stock Prices - 1 year as mentioned before sept 2020 - sept 2021\n- Notice that ***Prices and record are giving by day***\n\n#### <span> 2.2. Stock price by day  <\/span>\n- The first time series chart is the real transaction representation with high and low by a given time\n","d49f3fd0":"#### <span> 2.2. Stock price by day  <\/span>\n- This represents the initial price ***Open** per day."}}