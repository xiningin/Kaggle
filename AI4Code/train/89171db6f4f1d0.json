{"cell_type":{"96cbfb34":"code","0aa7e776":"code","900c464a":"code","0a3e5518":"code","3f0f83a1":"code","8c640a17":"code","f87d9ca0":"code","84174b5a":"code","0aeed2b0":"code","4652d454":"code","efc1630b":"code","0513dc62":"code","30a5323e":"code","24e093b9":"code","5a40ccc4":"code","0f7daac9":"code","efa052ef":"code","af1e9b8d":"code","249ca1af":"code","66a76f38":"code","fa37c03a":"code","0753e7da":"code","91b47212":"code","aab7c6fc":"code","0087d327":"code","b6afd908":"code","a56e156f":"code","ad4cbd3f":"code","bb1c8c38":"code","16360857":"code","478d3f3e":"code","ba225101":"code","298f7049":"code","04a3a60d":"code","ac2c68fc":"markdown","27969ac0":"markdown","f323c2ea":"markdown","24625eea":"markdown","1d5507db":"markdown","75146d40":"markdown","76e40fd5":"markdown","1199c7fb":"markdown","bea7fead":"markdown","13b9f443":"markdown","49198b08":"markdown"},"source":{"96cbfb34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0aa7e776":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns","900c464a":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","0a3e5518":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","3f0f83a1":"m.shape\nm = m.transpose()\nm.shape","8c640a17":"pData.head(2)","f87d9ca0":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","84174b5a":"df.describe()","0aeed2b0":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","4652d454":"genes.groupby(1)[0].count().sort_values(ascending = False).head(60)","efc1630b":"plt.figure(figsize = (15,4))\n\nf = 'n.umi'\ndf2 = df.sort_values('n.umi')\nv = df2[f].values\nplt.plot(np.log10( 1+  (v)[:] )  , '-', label = f )\n\nf = 'count genes expressed'\nv = df2[f].values\nplt.plot(np.log10( 1+  (v)[:] )  , '-', label = f )\n\n\nplt.legend()\nplt.ylabel('Log10 n.umi and genes ')\nplt.xlabel('cell sorted by n.umi')\nplt.title('Log10 n.umi and genes all cells')\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (15,4))\nf = 'ratio mt2non_mt'\nv = df2[f].values\nplt.plot(( 0+  (v)[:] )  , '-', label = f )\nplt.title(f)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (15,4))\nf = 'dose'\nv = df2[f].values\nplt.plot(( 0+  (v)[:] )  , '-', label = f )\nplt.title(f)\nplt.grid()\nplt.show()\n","0513dc62":"plt.figure(figsize = (15,4))\n\nf = 'n.umi'\ndf2 = df.sort_values('n.umi').tail(100)\nv = df2[f].values\nplt.plot(np.log10( 1+  (v)[:] )  , '*-', label = f )\n\nf = 'count genes expressed'\nv = df2[f].values\nplt.plot(np.log10( 1+  (v)[:] )  , '*-', label = f )\n\n\nplt.legend()\nplt.ylabel('Log10 n.umi and genes ')\nplt.xlabel('cell sorted by n.umi')\nplt.title('Log10 n.umi and genes all cells')\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (15,4))\n\nf = 'n.umi'\ndf2 = df.sort_values('n.umi').tail(1000)\nv = df2[f].values\nplt.plot(np.log10( 1+  (v)[:] )  , '*-', label = f )\n\nf = 'count genes expressed'\nv = df2[f].values\nplt.plot(np.log10( 1+  (v)[:] )  , '*-', label = f )\n\n\nplt.legend()\nplt.ylabel('Log10 n.umi and genes ')\nplt.xlabel('cell sorted by n.umi')\nplt.title('Log10 n.umi and genes all cells')\nplt.grid()\nplt.show()","30a5323e":"plt.figure(figsize = (15,4))\n\n#msk = df['drug'] == 'SAHA'\n#df2 = df[msk].sort_values('dose') # .tail(100)\n#msk = df['drug'] == 'SAHA'\ndf2 = df.sort_values('dose') # .tail(100)\n\n\nplt.figure(figsize = (15,4))\nf = 'ratio mt2non_mt'\nv = df2[f].values\nplt.plot(( 0+  (v)[:] )  , '-', label = f )\nplt.title(f)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (15,4))\nf = 'dose'#'ratio mt2non_mt'\nv = df2[f].values\nplt.plot(( 0+  (v)[:] )  , '-', label = f )\nplt.title(f)\nplt.grid()\nplt.show()\n\nf = 'dose'#'ratio mt2non_mt'\nv1 = df2[f].values\nf = 'ratio mt2non_mt'\nv2 = df2[f].values\nplt.scatter(v1,v2 )\nplt.show()","24e093b9":"df2.tail(60)","5a40ccc4":"l = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\n\nprint()\ngenes_expr_sum_over_cells = np.array(m.sum(axis = 0 )).ravel()\ng = genes_expr_sum_over_cells\nprint('Count unexpressed genes:', (g==0).sum(), 'Same in percent', np.round((g==0).sum()\/len(g)*100,1), 'Count genes:',len(g) )\n\nprint('median expression:', np.median(g) )\nprint('mean expression:', np.mean(g) )\n","0f7daac9":"print(( np.sum(l) ),  genes[1].values[l],  )","efa052ef":"genes_expr_sum_over_cells = np.array(m.sum(axis = 0 )).ravel()\ng = genes_expr_sum_over_cells\n\nplt.figure(figsize = (15,4))\nplt.plot(np.log10( 1+  np.sort(g)[:] )  , '*-' ) \nplt.ylabel('Log10 expression for genes ')\nplt.xlabel('genes sorted by expression')\nplt.title('all genes')\nplt.grid()\nplt.show()\n\n\nplt.figure(figsize = (15,4))\nplt.plot(np.log10( 1+  np.sort(g[~l])[:] )  , '*-' ) \nplt.ylabel('Log10 expression for genes ')\nplt.xlabel('genes sorted by expression')\nplt.title('non mitochondrial genes')\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (15,4))\nplt.plot(np.log10( 1+  np.sort(g[l])[:] )  , '*-' ) \nplt.ylabel('Log10 expression for genes ')\nplt.xlabel('genes sorted by expression')\nplt.title('mitochondrial genes')\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (15,4))\nplt.plot(np.log10( 1+  np.sort(g)[-100:] )  , '*-' ) \nplt.ylabel('Log10 expression for genes ')\nplt.xlabel('genes sorted by expression')\nplt.title('Top 100 from all genes')\nplt.grid()\nplt.show()","af1e9b8d":"m2 = m != 0 \ncount_cells_expressed4given_genes = np.array(m2.sum(axis = 0)).ravel()\ncount_cells_expressed4given_genes.shape","249ca1af":"g = count_cells_expressed4given_genes\nplt.figure(figsize = (15,4))\nplt.plot(np.log10( 1+  np.sort(g)[:] )  , '*-' ) \n#plt.plot(( 0+  np.sort(g)[:] )  , '*-' ) \nplt.ylabel('Log10 cell counts with non-zero expression for genes ')\nplt.xlabel('genes sorted by count of cells with non-zero expression')\nplt.title('Log10 cell counts with non-zero expression for genes ')\nplt.grid()\nplt.show()","66a76f38":"genes['Expression Sum'] = genes_expr_sum_over_cells\ngenes['cells count with non-zero expression'] = count_cells_expressed4given_genes\ngenes.sort_values('Expression Sum', ascending = False).head(50)\n","fa37c03a":"g2 = genes.sort_values('Expression Sum', ascending = False)#.head(50)\n\nplt.figure(figsize = (15,4))\nf = 'Expression Sum'\ng = g2[f]\nplt.plot(np.log10( 1+  np.sort(g)[:] )  , '*-', label = f ) \n\nf = 'cells count with non-zero expression'\ng = g2[f]\nplt.plot(np.log10( 1+  np.sort(g)[:] )  , '*-', label = f ) \n\nplt.ylabel('Log10')\nplt.xlabel('genes sorted by expression')\nplt.title('all genes')\nplt.grid()\nplt.legend()\nplt.show()\n","0753e7da":"l = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\n\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\n\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\n\nplt.figure(figsize = (15,6))\nv = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\nratio_mt2non_mt = v\n#plt.plot(np.log10( 1+  np.sort(v)[:] )  , '*-' ) \nplt.plot(( 0+  np.sort(v)[:] )  , '-' ) \n#plt.ylabel('Log10 n.umi ')\n#plt.xlabel('cell sorted by n.umi')\n#plt.title('Log10 n.umi all cells')\n# plt.plot(range(len(v)), 0.05*np.ones(len(v)))\nplt.grid()\nplt.title( 'Ratio:  (1 + Expression for MT genes) \/ (1+Expression of non MT genes) ')\nplt.xlabel('cells sorted')\nplt.show()\n","91b47212":"print(m.shape)\nm2 = m.multiply( 1\/m.sum(axis = 1) )\nprint(m2.shape, np.asarray(m2.sum(axis = 1)[:5]).ravel() )\ngenes['Normalized Expression Sum'] = np.asarray(m2.sum(axis=0)).ravel()\ngenes.sort_values('Normalized Expression Sum' , ascending = False ).head(50)","aab7c6fc":"c = 'cells count with non-zero expression'\nc = 'Normalized Expression Sum'\nv = genes[c].values\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v),'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-100:],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-100:-3],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-200:-60],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-500:-60],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\n","0087d327":"c = 'cells count with non-zero expression'\nc = 'Normalized Expression Sum'\nc = 'Expression Sum'\nv = genes[c].values\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v),'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-100:],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-100:-3],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-200:-60],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-500:-60],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\n","b6afd908":"print(df['dose'].isnull().sum())\ndf['dose'].value_counts()","a56e156f":"mask = df['dose'] == 0\nm2 = m[mask.values,:]\n\nv = m2.sum(axis = 0)\nv = np.asarray(v).ravel()\n\nc = 'Expression Sum over no cells with no drugs'\ngenes[c] = v # np.asarray(m2.sum(axis=0)).ravel()\ngenes.sort_values(c , ascending = False ).head(50)","ad4cbd3f":"c = 'cells count with non-zero expression'\nc = 'Normalized Expression Sum'\nc = 'Expression Sum'\nc = 'Expression Sum over no cells with no drugs'\n\nv = genes[c].values\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v),'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-100:],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-100:-3],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-200:-60],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\nplt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-500:-60],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n\n","bb1c8c38":"plt.figure(figsize = (20,5))\nplt.plot(np.sort(v)[-1000:],'*-', label = c)\nplt.title(c)\nplt.grid()\nplt.show()\n","16360857":"t = m.copy()\nt.data **= 2#.toarray()\n#print( t.toarray() )\nX_var = np.array(t.mean(axis = 0 )).ravel() - np.array(m.mean(axis = 0) ).ravel()**2  \n\ngenes['Variance'] = X_var\n\nc = 'Variance' #  'Expression Sum over no cells with no drugs'\ngenes[c] = v # np.asarray(m2.sum(axis=0)).ravel()\ngenes.sort_values(c , ascending = False ).head(50)","478d3f3e":"\nv = genes['Variance']\nfor i1,i2 in [(0,len(v)), (-100,len(v)), (-100,-2), (-1000,-2),]:\n    plt.figure(figsize = (20,5))\n    plt.plot(np.sort(v)[i1:i2],'*-')\n    plt.title('Variance. Genes sliced: from ' +  str(i1) + ' to ' +str(i2))\n    plt.xlabel('genes sorted')\n    plt.grid()\n    plt.show()\n","ba225101":"IX = []\nfor i in range(len(genes)):\n    if genes[1].iat[i].startswith('MT-'):\n        IX.append(i)\nprint(len(IX))\ncf = np.corrcoef( m2[:,IX].toarray().T)\nv = np.triu(cf,1).ravel()\nprint(len(v))\nv = v[v!=0]\nprint(len(v))\nplt.plot(np.sort(v),'*-')\nplt.title('Correlation for MT genes (sorted) ')\n\npd.Series(v).describe()\n","298f7049":"import time\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:1000]\nlen(IX)\n\nt0 = time.time() \ntt = m2[:,IX].toarray()\ncf = np.corrcoef(tt.T)\n\nprint( time.time()-t0, 'seconds passed')\n\nc = np.triu(cf,1).ravel()\nprint(np.sort(c)[-10:],'top 10 correlations')\ng= genes[1].iloc[IX].values\npd.DataFrame(cf, columns = g, index = g)","04a3a60d":"a,b = np.where(cf > 0.75)\nprint(len(a),len(b))\nc = 0\nfor i in range(len(a)):\n    if a[i]==b[i]:\n        continue\n    if g[a[i]].startswith('MT-') and g[b[i]].startswith('MT-'):\n        continue\n    c += 1\n    print( g[a[i]], g[b[i]] , cf[a[i],b[i]], 'count',c )","ac2c68fc":"# Load count matrix and convert it to sparse matrix csr_matrix","27969ac0":"# Correlations for top 1000 expressed genes","f323c2ea":"# Analyse and filter genes\/cells\n","24625eea":"# Calculte variance for genes\n\nsince matrix is sparse we do not have build-in function, but it is easy to write it directly","1d5507db":"# Correlation analysis\n\nConclusions - part of 37 mitochondrial genes are very correlated (0.6 - 0.9). \n\nExcluding MT-genes correlation >= 0.75 is for 100 gene pairs\n","75146d40":"# Create columns with information on each cell (drug, dose, etc)","76e40fd5":"why to look at mitochondrial genes ?\n\nSee section 1.1 of the notebook:\nhttps:\/\/www.kaggle.com\/reminho\/basic-scrnaseq-tutorial\n\nbriefly: the cells with high number of mito genes - might be considered as nearly dead cells.\n\nNormally, you would filter out cells with >5% mtDNA. Moreover, it is common to filter out cells with less than 200 features and more than 2500 features. (See notebook cited above). \nThe exact numbers - 5%,200,2500 -- seems to be irrelevant for our dataset, but we should be guided by the idea.\n\n\nHuman MT-DNA contains 37 genes\nhttps:\/\/en.wikipedia.org\/wiki\/Mitochondrial_DNA\n","1199c7fb":"# Look at duplicated genes symbols","bea7fead":"# What is about \n\nHere we analyse sciPlex2 subdataset.\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n \n -------------------\n \n Findings:\n \n 1) Top exrepressed genes seems to be outliers especially top-3 MT-RNR2, MALAT1, MT-ND4 ...\n Further processing like  umap shows these genes should be deleted.\n They are on top in various schemes normalized or non-normalized calculations of expressions, so we are confident that they are outliers.  There should be some bio\/techno explanation why they are outliers. \n \n 2) Many mitochondrial genes seems to be at the top of expressions list. Why is it so ? Is it specific for that dataset ? \n \n\n 3) Correlation analysis\n    \nConclusions - \n    \n    \nPart of 37 mitochondrial genes are very correlated (0.6 - 0.9).\n\nIf exclude MT-genes, then correlation >= 0.75 is for 108 gene pairs","13b9f443":"# Load information files: genes annotations, cells info etc...","49198b08":"# Visualizations"}}