{"cell_type":{"7ca6b5d7":"code","65dab605":"code","85372565":"code","7b57f30b":"code","907cc660":"code","47f9f0dc":"code","9f0541af":"code","ed87c775":"code","29ee48a1":"code","d16505e1":"code","1f001ca4":"code","f7399301":"code","7b8588f9":"code","b11a0902":"code","41f3ae9b":"code","4c64d2ef":"code","2cfb44c9":"code","ccb01ff1":"code","71bd540f":"code","aff57af0":"code","225eb56e":"code","3356f4a7":"code","6325c3ec":"code","a76a1d79":"code","d13a4fa6":"code","731f2641":"code","6ca60bdb":"code","365f529d":"code","312cd453":"code","4775d941":"code","a4621371":"code","8fad0124":"code","07e5668f":"code","b0e9e20a":"code","9e99eafe":"code","136e8b79":"code","dfca38d3":"code","59aeb523":"code","988adaed":"code","d245c6d9":"code","4a22fa0d":"markdown","d89504c0":"markdown","31719c7e":"markdown","f837b180":"markdown","2af2ae87":"markdown"},"source":{"7ca6b5d7":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.model_selection import cross_val_score\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import RepeatedKFold, GridSearchCV\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn import svm\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import RandomForestRegressor","65dab605":"from sklearn.feature_selection import mutual_info_regression\n\ndef make_mi_scores(X, y):\n    mi_scores = np.abs(mutual_info_regression(X, y))\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")","85372565":"N_FOLDS = 3\nN_REPEATS = 5\nTARGET_VARS = ['target_carbon_monoxide',\n               'target_benzene',\n               'target_nitrogen_oxides']","7b57f30b":"train_data = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest_data  = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","907cc660":"train_data.head()","47f9f0dc":"y_carbon  = train_data['target_carbon_monoxide']                                           \ny_benzene = train_data['target_benzene']\ny_nitrogen= train_data['target_nitrogen_oxides']\ny_train   = train_data[TARGET_VARS]","9f0541af":"X_train   = train_data.drop(['date_time','target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis=1)\nfeatures_to_check = ['deg_C', 'relative_humidity', 'absolute_humidity']\ntarget_features   = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']","ed87c775":"sns.relplot(\n    x=\"value\", y=\"target_carbon_monoxide\", col=\"variable\", data=train_data.melt(id_vars=\"target_carbon_monoxide\", value_vars=features_to_check), facet_kws=dict(sharex=False),\n);","29ee48a1":"sns.relplot(\n    x=\"value\", y=\"target_benzene\", col=\"variable\", data=train_data.melt(id_vars=\"target_benzene\", value_vars=features_to_check), facet_kws=dict(sharex=False),\n);","d16505e1":"sns.relplot(\n    x=\"value\", y=\"target_nitrogen_oxides\", col=\"variable\", data=train_data.melt(id_vars=\"target_nitrogen_oxides\", value_vars=features_to_check), facet_kws=dict(sharex=False),\n);","1f001ca4":"features_sensors = ['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']\n\nsns.relplot(\n    x=\"value\", y=\"target_carbon_monoxide\", col=\"variable\", data=train_data.melt(id_vars=\"target_carbon_monoxide\", value_vars=features_sensors), facet_kws=dict(sharex=False),\n);","f7399301":"sns.relplot(\n    x=\"value\", y=\"target_benzene\", col=\"variable\", data=train_data.melt(id_vars=\"target_benzene\", value_vars=features_sensors), facet_kws=dict(sharex=False),\n);","7b8588f9":"sns.relplot(\n    x=\"value\", y=\"target_nitrogen_oxides\", col=\"variable\", data=train_data.melt(id_vars=\"target_nitrogen_oxides\", value_vars=features_sensors), facet_kws=dict(sharex=False),\n);","b11a0902":"pd.DataFrame.corr(train_data[target_features])","41f3ae9b":"X_train","4c64d2ef":"pd.DataFrame.corr(train_data)","2cfb44c9":"pd.DataFrame(make_mi_scores(X_train, y_carbon))","ccb01ff1":"pd.DataFrame(make_mi_scores(X_train, y_benzene))","71bd540f":"pd.DataFrame(make_mi_scores(X_train, y_nitrogen))","aff57af0":"plot_mi_scores(make_mi_scores(X_train, y_carbon))","225eb56e":"plot_mi_scores(make_mi_scores(X_train, y_benzene))","3356f4a7":"plot_mi_scores(make_mi_scores(X_train, y_nitrogen))","6325c3ec":"sns.histplot(train_data['sensor_2'])","a76a1d79":"date_time = pd.to_datetime(train_data['date_time'])\ndate = pd.DataFrame(date_time.dt.month)\nday  = pd.DataFrame(date_time.dt.day)\ntime = pd.DataFrame(date_time.dt.hour)","d13a4fa6":"def date_time_encoding(f_name, f_itself, max_val, key):\n    if (key == 'test'):\n        test_data['sin_' + f_name] = np.sin(2 * np.pi * (f_itself\/max_val))\n        test_data['cos_' + f_name] = np.cos(2 * np.pi * (f_itself\/max_val))\n        test_data['tan_' + f_name] = np.tan(2 * np.pi * (f_itself\/max_val))\n        #test_data['sinh_' + f_name]= np.sinh(2 * np.pi * (f_itself\/max_val))\n        #test_data['cosh_' + f_name]= np.cosh(2 * np.pi * (f_itself\/max_val))\n    if (key == 'train'):\n        X_train['sin_' + f_name] = np.sin(2 * np.pi * (f_itself\/max_val))\n        X_train['cos_' + f_name] = np.cos(2 * np.pi * (f_itself\/max_val))\n        X_train['tan_' + f_name] = np.tan(2 * np.pi * (f_itself\/max_val))\n        #X_train['sinh_' + f_name]= np.sinh(2 * np.pi * (f_itself\/max_val))\n        #X_train['cosh_' + f_name]= np.cosh(2 * np.pi * (f_itself\/max_val))\n    return 0","731f2641":"date_time_encoding('time', time, 24, 'train')\ndate_time_encoding('date', date, 12, 'train')\ndate_time_encoding('day' , day,  31, 'train')","6ca60bdb":"X_train","365f529d":"pd.DataFrame.corr(X_train.join(train_data[target_features]))","312cd453":"plot_mi_scores(make_mi_scores(X_train, y_carbon))","4775d941":"plot_mi_scores(make_mi_scores(X_train, y_benzene))","a4621371":"plot_mi_scores(make_mi_scores(X_train, y_nitrogen))","8fad0124":"#catb_est = CatBoostRegressor(silent=True)\ncatb_carbon   = CatBoostRegressor(silent=True)\ncatb_benzene  = CatBoostRegressor(silent=True)\ncatb_nitrogen = CatBoostRegressor(silent=True)\n#rf_est = RandomForestRegressor()","07e5668f":"#pars = {#'estimator__learning_rate': [.01, .05, .1],\n        #'estimator__max_depth': [3, 5],\n#        'estimator__subsample': [.5, .75, 1.]\n#        'estimator__n_estimators': [500]\n#}\n#cv_pars = RepeatedKFold(n_splits=N_FOLDS, n_repeats=N_REPEATS)\n\n#Build and initialize CV\n#cv_model = MultiOutputRegressor(catb_est)\n#crossval = GridSearchCV(cv_model, pars, scoring='neg_mean_squared_error', cv=cv_pars)","b0e9e20a":"%%time\n#crossval.fit(X_train, y_train)\n#cv_model.fit(X_train, y_train)","9e99eafe":"%%time\ncatb_carbon.fit(X_train, y_carbon)\ncatb_benzene.fit(X_train, y_benzene)\ncatb_nitrogen.fit(X_train, y_nitrogen)","136e8b79":"date_time = pd.to_datetime(test_data['date_time'])\ndate = pd.DataFrame(date_time.dt.month)\nday  = pd.DataFrame(date_time.dt.day)\ntime = pd.DataFrame(date_time.dt.hour)","dfca38d3":"date_time_encoding('time', time, 24, 'test')\ndate_time_encoding('date', date, 12, 'test')\ndate_time_encoding('day', day, 31,  'test')","59aeb523":"submission['target_carbon_monoxide'] = catb_carbon.predict(test_data.drop(\"date_time\", axis=1))\nsubmission['target_benzene']         = catb_benzene.predict(test_data.drop(\"date_time\", axis=1))\nsubmission['target_nitrogen_oxides'] = catb_nitrogen.predict(test_data.drop(\"date_time\", axis=1))","988adaed":"submission.to_csv(\"catboost_subm.csv\", index=False)","d245c6d9":"submission","4a22fa0d":"Looks like sensor_2 has the most important value. What does it give us?","d89504c0":"We see high level of correlation between target features and sensors.","31719c7e":"# Later I will try some stacking.","f837b180":"# Ok. Lets train the simplest model (Catboost).","2af2ae87":"# A little bit of Feature Engineering."}}