{"cell_type":{"d17e8f4b":"code","dcee967e":"code","e33f599f":"code","94b94a86":"code","746a7383":"code","71dc0638":"code","f9f9f513":"code","0f28c7ca":"code","f5263ead":"code","b2381fa8":"code","9780c5b2":"code","b53ee98c":"code","aaa72796":"code","8fa1c4d8":"markdown","b9940a50":"markdown","a1076077":"markdown","5164b2c4":"markdown","72a28be0":"markdown","a9e9174c":"markdown","5d1b7535":"markdown","10915999":"markdown","b262a46c":"markdown","be8d0fa0":"markdown","e6fa36dd":"markdown","4d7fe8ce":"markdown","ac20834d":"markdown","365ab065":"markdown"},"source":{"d17e8f4b":"from dataclasses import dataclass, field\nfrom typing import NamedTuple, Tuple, List, Set, FrozenSet, Dict, Iterable, Optional, Any, Iterator\nimport itertools\nfrom itertools import chain\nimport collections\nfrom operator import itemgetter, attrgetter\nfrom collections import Counter, defaultdict\nimport numpy as np\nfrom scipy.optimize import linear_sum_assignment","dcee967e":"SIZE_X: int = 15\nSIZE_Y: int = 15\n    \nNUM_SHIPS: int = 7\nMIN_NUM_GATHERER: int = 3\nNUM_HUNTER: int = 1\n\nHALITE_MINE_FACTOR: float = 0.25\nTIME_FACTOR: float = 0.99","e33f599f":"class Pos(NamedTuple):\n    x: int\n    y: int\n\n    def __repr__(self):\n        return f\"[{self.x}:{self.y}]\"\n\n\nDiffType = Tuple[int, int]\n\n\nclass Geometry:\n    def __init__(self, size_x: int, size_y: int):\n        self.size_x = size_x\n        self.size_y = size_y\n\n        self.poses = {Pos(x, y) for x in range(size_x) for y in range(size_y)}\n\n    def int_to_pos(self, int_pos: int) -> Pos:\n        x = int_pos % self.size_x\n        y = int_pos \/\/ self.size_x\n        assert 0 <= y < self.size_y\n        return Pos(x, y)\n\n    def _to_xy(self, pos: Pos) -> DiffType:\n        assert isinstance(pos, Pos), f\"Invalid position {pos}\"\n        x = pos.x\n        y = pos.y\n        if not 0 <= x < self.size_x and 0 <= y < self.size_y:\n            raise ValueError(\n                f\"Position {pos} is illegal for geometry of size {self.size_x} x {self.size_y}\"\n            )\n\n        return (x, y)\n\n    def _to_pos(self, x: int, y: int) -> Pos:\n        x %= self.size_x\n        y %= self.size_y\n        return Pos(x, y)\n\n    def _diff_to(self, pos1: Pos, pos2: Pos) -> DiffType:\n        \"\"\"\n        Return diff vector for shortest path (torus)\n        External function currently are not supposed to deal with position differences\n        \"\"\"\n        x1, y1 = self._to_xy(pos1)\n        x2, y2 = self._to_xy(pos2)\n\n        dxy_shifted = [\n            (x2 + shift_x - x1, y2 + shift_y - y1)\n            for shift_x, shift_y in itertools.product(\n                [-self.size_x, 0, self.size_x], [-self.size_y, 0, self.size_y]\n            )\n        ]\n\n        dx, dy = min(dxy_shifted, key=lambda dxy: self._raw_dist(dxy[0], dxy[1]))\n\n        return (dx, dy)\n\n    @staticmethod\n    def _raw_dist(dx: int, dy: int) -> int:\n        return abs(dx) + abs(dy)\n\n    def dist(self, pos1: Pos, pos2: Pos) -> int:\n        dx, dy = self._diff_to(pos1, pos2)\n        return self._raw_dist(dx, dy)\n\n    def pos_towards(self, pos1: Pos, pos2: Pos) -> Set[Pos]:\n        if pos1 == pos2:\n            return {pos2}\n\n        x1, y1 = self._to_xy(pos1)\n        dx, dy = self._diff_to(pos1, pos2)\n\n        result = []\n\n        if dx > 0:\n            result.append((x1 + 1, y1))\n\n        if dx < 0:\n            result.append((x1 - 1, y1))\n\n        if dy > 0:\n            result.append((x1, y1 + 1))\n\n        if dy < 0:\n            result.append((x1, y1 - 1))\n\n        return set(itertools.starmap(self._to_pos, result))\n\n    def get_prox(self, pos: Pos, *dists: int) -> Set[Pos]:\n        x, y = self._to_xy(pos)\n\n        result = []\n        for dist in dists:\n            if dist == 0:\n                result.append((x, y))\n                continue\n            for d in range(dist):\n                result.append((x + d, y + dist - d))\n                result.append((x - d, y - dist + d))\n                result.append((x - dist + d, y + d))\n                result.append((x + dist - d, y - d))\n\n        return set(itertools.starmap(self._to_pos, result))\n\n    ","94b94a86":"geometry = Geometry(SIZE_X, SIZE_Y)\ndist = geometry.dist\nget_prox = geometry.get_prox\npos_towards = geometry.pos_towards\nint_to_pos = geometry.int_to_pos\n_diff_to = geometry._diff_to\n\n\n@dataclass\nclass ClosestDist:\n    idx: int\n    pos: Pos\n    dist: int\n\n\ndef find_closest(pos: Pos, dest_poses: Iterable[Pos]) -> Optional[ClosestDist]:\n    dists = [\n        (i, dest_pos, dist(pos, dest_pos)) for i, dest_pos in enumerate(dest_poses)\n    ]\n\n    if not dists:\n        return None\n\n    closest = min(dists, key=itemgetter(2),)\n\n    return ClosestDist(*closest)\n\n\ndef is_unique(elems: Iterable):  # what if empty?\n    cnts = Counter(elems)\n\n    if not cnts:\n        return True\n\n    return cnts.most_common(1)[0][1] == 1","746a7383":"class ObservationShip(NamedTuple):\n    pos: Pos\n    halite: float\n\n\nclass ObservationShipYard(NamedTuple):\n    pos: Pos\n\n\nId = str\nEnemyId = Tuple[int, Id]\n\n\n@dataclass  # pylint: disable=too-many-instance-attributes\nclass Observation:\n    \"\"\"\n    Holds obs info with types Pos, ObservationShip, ObservationShipYard for clarity\n    Precalculates some frequently needed information\n    \"\"\"\n\n    step: int\n    player_idx: int\n    map_halite: Dict[Pos, float]\n\n    player_halite: List[float]\n    ships: List[Dict[Id, ObservationShip]]\n    shipyards: List[Dict[Id, ObservationShipYard]]\n\n    my_halite: float = field(init=False)\n    my_ships: Dict[Id, ObservationShip] = field(init=False)\n    my_shipyards: Dict[Id, ObservationShipYard] = field(init=False)\n    ship_poses: Set[Pos] = field(init=False)\n    shipyard_poses: Set[Pos] = field(init=False)\n\n    enemy_ships: Dict[EnemyId, ObservationShip] = field(init=False)\n    enemy_shipyards: Dict[EnemyId, ObservationShipYard] = field(init=False)\n    enemy_ship_poses: Set[Pos] = field(init=False)\n    enemy_shipyard_poses: Set[Pos] = field(init=False)\n\n    num_ships: int = field(init=False)\n\n    def __repr__(self):\n        return (\n            f\"Observation(step={self.step}, {self.num_ships} ships, \"\n            f\"{len(self.enemy_ships)} enemy ships)\"\n        )\n\n    def __post_init__(self):\n        self.my_halite = self.player_halite[self.player_idx]\n\n        self.my_ships = self.ships[self.player_idx]\n\n        self.enemy_ships = {\n            (idx, id_): ship\n            for idx, cur_ships in enumerate(self.ships)\n            if idx != self.player_idx\n            for id_, ship in cur_ships.items()\n        }\n\n        self.my_shipyards = self.shipyards[self.player_idx]\n\n        self.enemy_shipyards = {\n            (idx, id_): ship\n            for idx, cur_shipyards in enumerate(self.shipyards)\n            if idx != self.player_idx\n            for id_, ship in cur_shipyards.items()\n        }\n\n        self.ship_poses = set(ship.pos for ship in self.my_ships.values())\n\n        self.shipyard_poses = set(\n            shipyard.pos for shipyard in self.my_shipyards.values()\n        )\n\n        self.enemy_ship_poses = set(ship.pos for ship in self.enemy_ships.values())\n\n        self.enemy_shipyard_poses = set(\n            shipyard.pos for shipyard in self.enemy_shipyards.values()\n        )\n\n        self.num_ships = len(self.my_ships)\n\n    @classmethod\n    def from_obs(cls, obs):\n        player_halite = []\n        shipyards = []\n        ships = []\n\n        for (cur_player_halite, cur_shipyards, cur_ships) in obs[\"players\"]:\n            player_halite.append(cur_player_halite)\n\n            ships.append(\n                {\n                    id_: ObservationShip(pos=int_to_pos(int_pos), halite=halite)\n                    for id_, (int_pos, halite) in cur_ships.items()\n                }\n            )\n\n            shipyards.append(\n                {\n                    id_: ObservationShipYard(pos=int_to_pos(int_pos))\n                    for id_, int_pos in cur_shipyards.items()\n                }\n            )\n\n        return cls(\n            step=obs[\"step\"],\n            player_idx=obs[\"player\"],\n            map_halite={int_to_pos(pos): val for pos, val in enumerate(obs[\"halite\"])},\n            player_halite=player_halite,\n            ships=ships,\n            shipyards=shipyards,\n        )\n","71dc0638":"class AssignSolverMixin:\n    \"\"\"\n    You can use goal=None to signify a non-conflicting goal\n    \"\"\"\n\n    @property\n    def obj_goal_penalty(self) -> Tuple[Any, Any, float]:\n        raise NotImplementedError()\n\n\ndef solve_assign(penalty_objs: List[AssignSolverMixin]):\n    if not penalty_objs:\n        return []\n    \n    obj_goal_penalties = [penalty_obj.obj_goal_penalty for penalty_obj in penalty_objs]\n\n    # Rewrite non-conflict goals\n    non_conflict_goals = ((\"nc\", i) for i in itertools.count())\n\n    obj_goal_penalties = [\n        (obj, goal if goal is not None else next(non_conflict_goals), score)\n        for obj, goal, score in obj_goal_penalties\n    ]\n\n    all_to_resolve_objs = defaultdict(list)\n\n    for obj_goal_penalty, penalty_obj in zip(obj_goal_penalties, penalty_objs):\n        all_to_resolve_objs[obj_goal_penalty[:2]].append(\n            (obj_goal_penalty, penalty_obj)\n        )\n\n    best_to_resolve_objs = list(\n        min(objs, key=lambda x: x[1].obj_goal_penalty[2])\n        for objs in all_to_resolve_objs.values()\n    )\n\n    best_obj_goal_penalties, best_penalty_objs = zip(*best_to_resolve_objs)\n\n    matrix, obj_goal_penalty_map = make_matrix(\n        best_obj_goal_penalties, best_penalty_objs\n    )\n\n    x_idxs, y_idxs = linear_sum_assignment(matrix)\n\n    try:\n        result = [\n            obj_goal_penalty_map[x_idx, y_idx] for x_idx, y_idx in zip(x_idxs, y_idxs)\n        ]\n    except KeyError as exc:\n        raise ValueError(\n            f\"Assignment solution could not be resolved for {exc}. \"\n            \"You may need to add a stay on the spot move to the bot.\"\n        )\n\n    assert is_unique(x.obj_goal_penalty[0] for x in result), result\n    assert is_unique(x.obj_goal_penalty[1] for x in result), result\n\n    return result\n\n\ndef make_matrix(obj_goal_penalties, penalty_objs: List[AssignSolverMixin]):\n    assert is_unique(obj[:2] for obj in obj_goal_penalties)\n\n    xs = list(set(x[0] for x in obj_goal_penalties))\n    ys = list(set(x[1] for x in obj_goal_penalties))\n    penalty_vals = list(x[2] for x in obj_goal_penalties)\n\n    result = np.full(shape=(len(xs), len(ys)), fill_value=np.inf)\n\n    obj_goal_penalty_map = {}\n\n    for (x, y, penalty), obj in zip(obj_goal_penalties, penalty_objs):\n        x_idx = xs.index(x)\n        y_idx = ys.index(y)\n\n        obj_goal_penalty_map[x_idx, y_idx] = obj\n\n        result[x_idx, y_idx] = penalty\n\n    return result, obj_goal_penalty_map\n","f9f9f513":"@dataclass\nclass Plan(AssignSolverMixin):\n    \"\"\"\n    Bot plan with all information for resolution\n\n    Every plan probably should also have a StayAction to guarantee resolution\n    \"\"\"\n\n    id: str\n    score: float\n\n    @property\n    def actions(self):\n        raise NotImplementedError()\n\n\n@dataclass\nclass MovePlan(Plan):\n    start_pos: Pos\n    end_pos: Pos\n    forbidden_pos: Set[Pos] = field(default_factory=set)\n\n    @property\n    def obj_goal_penalty(self):\n        return (self.id, self.end_pos, -self.score)\n\n    @property\n    def actions(self):\n        if self.start_pos == self.end_pos:\n            return [StayAction(id=self.id, pos=self.start_pos, score=1)]\n\n        next_poses = pos_towards(self.start_pos, self.end_pos) - self.forbidden_pos\n\n        return [\n            MoveAction(id=self.id, from_pos=self.start_pos, pos=pos, score=1)\n            for pos in next_poses\n        ] + [StayAction(id=self.id, pos=self.start_pos, score=0)]\n\n\n@dataclass\nclass ConvertPlan(Plan):\n    pos: Pos\n\n    @property\n    def obj_goal_penalty(self):\n        return (self.id, None, -self.score)\n\n    @property\n    def actions(self):\n        return [\n            ConvertAction(id=self.id, pos=self.pos, score=self.score),\n            StayAction(id=self.id, pos=self.pos, score=0),\n        ]\n\n\n@dataclass\nclass SpawnPlan(Plan):\n    pos: Pos\n\n    @property\n    def obj_goal_penalty(self):\n        return (self.id, None, -self.score)\n\n    @property\n    def actions(self):\n        return [\n            SpawnAction(id=self.id, pos=self.pos, score=self.score),\n            NoShipYardAction(id=self.id, pos=self.pos, score=0),\n        ]\n\n\n@dataclass\nclass ScatterPlan(Plan):\n    start_pos: Pos\n\n    @property\n    def obj_goal_penalty(self):\n        return (self.id, None, -self.score)\n\n    @property\n    def actions(self):\n        return [\n            MoveAction(id=self.id, from_pos=self.start_pos, pos=next_pos, score=1)\n            for next_pos in get_prox(self.start_pos, 1)\n        ] + [StayAction(id=self.id, pos=self.start_pos, score=0)]\n","0f28c7ca":"@dataclass\nclass Action(AssignSolverMixin):\n    id: Id\n    score: float\n    pos: Pos\n\n    @property\n    def obj_goal_penalty(self):\n        return (self.id, self.pos, -self.score)\n\n    @property\n    def halite_command(self):\n        raise NotImplementedError()\n\n\n@dataclass\nclass ConvertAction(Action):\n    @property\n    def obj_goal_penalty(self):\n        return (self.id, (\"sy\", self.pos), -self.score)\n\n    @property\n    def halite_command(self):\n        return {self.id: \"CONVERT\"}\n\n\n@dataclass\nclass SpawnAction(Action):\n    @property\n    def halite_command(self):\n        return {self.id: \"SPAWN\"}\n\n\n@dataclass\nclass StayAction(Action):\n    @property\n    def halite_command(self):\n        return {}\n\n\nclass NoShipYardAction(Action):\n    @property\n    def obj_goal_penalty(self):\n        return (self.id, (\"sy\", self.pos), -self.score)\n\n    @property\n    def halite_command(self):\n        return {}\n\n\n@dataclass\nclass MoveAction(Action):\n    from_pos: Pos\n\n    def __repr__(self):\n        return f\"MoveAction({self.id}: {self.from_pos}->{self.pos}; {self.score})\"\n\n    @property\n    def halite_command(self):\n        if self.from_pos == self.pos:\n            return {}\n\n        dx, dy = _diff_to(self.from_pos, self.pos)\n        result = {\n            (1, 0): \"EAST\",\n            (-1, 0): \"WEST\",\n            (0, 1): \"SOUTH\",\n            (0, -1): \"NORTH\",\n        }.get((dx, dy))\n\n        if result is None:\n            raise ValueError(\n                f\"Cannot move in one step from {self.from_pos} to {self.pos}\"\n            )\n\n        return {self.id: result}\n","f5263ead":"class Strategy:\n    def __init__(self, *, id):\n        self.id: str = id\n\n    def make_plans(self, num) -> List[Plan]:\n        \"\"\"\n        Num says how many strategies you need at most. To save time you can limit your strategies to this number.\n        \"\"\"\n        raise NotImplementedError()\n\n    def notify_action(self, action: Action) -> None:\n        pass\n\n\nclass Ship(Strategy):  # pylint: disable=abstract-method\n    @property\n    def pos(self):\n        return obs.my_ships[self.id].pos\n\n    @property\n    def halite(self):\n        return obs.my_ships[self.id].halite\n\n\nclass ShipYard(Strategy):  # pylint: disable=abstract-method\n    @property\n    def pos(self):\n        return obs.my_shipyards[self.id].pos","b2381fa8":"class FirstShip(Ship):\n    def make_plans(self, num):\n        return [ConvertPlan(id=self.id, pos=self.pos, score=1)]\n\n    \n\nclass PlainShipYard(ShipYard):\n    def make_plans(self, num):\n        if (\n            obs.num_ships < NUM_SHIPS\n            and obs.my_halite > 500\n            and self.pos not in obs.ship_poses\n        ):\n            return [SpawnPlan(id=self.id, pos=self.pos, score=1)]\n\n        return []\n    \nclass Gatherer(Ship):\n    def make_plans(self, num) -> List[MovePlan]:\n        plans = []\n\n        if not mine_scores:\n            return []\n\n        for end_pos in geometry.poses:\n            ship_pos_dist = dist(self.pos, end_pos)\n\n            mine_score = mine_scores[end_pos]\n\n            total_steps = ship_pos_dist + mine_score.steps\n\n            extra_halite = (\n                HALITE_MINE_FACTOR * mine_score.halite\n                if self.pos == end_pos\n                else 0\n            )\n\n            trip_score = (\n                (self.halite + extra_halite) \/ (total_steps + 1)\n                + HALITE_MINE_FACTOR * mine_score.score\n            ) * (TIME_FACTOR if self.pos == end_pos else 1)\n\n            plans.append(\n                MovePlan(\n                    id=self.id, start_pos=self.pos, end_pos=end_pos, score=trip_score\n                )\n            )\n\n        plans.sort(key=attrgetter(\"score\"), reverse=True)\n\n        return plans[:num]\n    \n    \nclass Hunter(Ship):\n    def make_plans(self, num):\n        enemy_ship_poses = obs.enemy_ship_poses\n        if not enemy_ship_poses:\n            return []\n\n        closest_enemy_pos = find_closest(self.pos, enemy_ship_poses)\n\n        return [\n            MovePlan(\n                id=self.id, start_pos=self.pos, end_pos=closest_enemy_pos.pos, score=1\n            )\n        ]","9780c5b2":"class MineScore(NamedTuple):\n    \"\"\"\n    Score of a mining position independent of ship\n    Used only for precalculations\n    \"\"\"\n\n    score: float  # final value\n    halite: float\n    steps: int\n\n\ndef update_new_state(new_obs):\n    global obs\n    \n    obs = new_obs\n    update_mine_scores()\n    update_strategies()\n\n\ndef update_strategies():\n    # Ships\n    for id_ in obs.my_ships.keys():\n        if id_ not in strategies:\n            #if obs.step == 0:   # use this with non-buggy kaggle env again\n            if obs.step == 1:\n                strat_class = FirstShip\n            else:\n                ship_type_cnts = Counter(\n                    strat.__class__.__name__ for strat in strategies.values()\n                )\n\n                if ship_type_cnts[\"Gatherer\"] >= MIN_NUM_GATHERER and ship_type_cnts[\"Hunter\"] < NUM_HUNTER:\n                    strat_class = Hunter\n                else:\n                    strat_class = Gatherer\n\n            strategies[id_] = strat_class(id=id_)\n\n    # Shipyards\n    for id_ in obs.my_shipyards.keys():\n        if id_ not in strategies:\n            strategies[id_] = PlainShipYard(id=id_)\n\n    # Delete dead\n    for id_ in (\n        strategies.keys()\n        - obs.my_ships.keys()\n        - obs.my_shipyards.keys()\n    ):\n        del strategies[id_]\n\n\ndef update_mine_scores():\n    global mine_scores\n    \n    mine_scores = {}\n\n    if not obs.my_shipyards:\n        return\n\n    for pos in geometry.poses:\n        closest = find_closest(pos, obs.shipyard_poses)\n        pos_dist = closest.dist\n\n        discount = 1 \/ (pos_dist + 1)\n\n        halite = obs.map_halite[pos]\n\n        mine_scores[pos] = MineScore(\n            score=halite * discount, halite=halite, steps=pos_dist,\n        )\n","b53ee98c":"strategies: Dict[Id, Strategy] = {}\n\nobs: Observation = None\n\nmine_scores: Dict[Pos, MineScore] = {}\n\n        \ndef agent(raw_obs) -> Dict[str, str]:\n    obs = Observation.from_obs(raw_obs)\n\n    update_new_state(obs)\n\n    assert obs.my_ships.keys() | obs.my_shipyards.keys() == strategies.keys(), (\n        obs.my_ships,\n        obs.my_shipyards,\n        strategies,\n    )\n\n    bot_plans = list(\n        chain.from_iterable(\n            bot.make_plans(num=len(strategies))\n            for bot in strategies.values()\n        )\n    )\n\n    best_plans = solve_assign(bot_plans)  # TODO type\n\n    possible_actions = list(chain.from_iterable(plan.actions for plan in best_plans))\n\n    best_actions = solve_assign(possible_actions)\n\n    for action in best_actions:\n        strategies[action.id].notify_action(action)\n\n    halite_actions = {}\n    for action in best_actions:\n        halite_actions.update(action.halite_command)\n\n    return halite_actions","aaa72796":"from kaggle_environments import evaluate, make\nimport random\nimport numpy\n\nrandom.seed(5)\n\nenv = make(\"halite\", debug=True)\n\ntrainer = env.train([None, \"random\"])\n\nobs_ = trainer.reset()\n\nwhile not env.done:\n    # dirty fix for ids due to buggy kaggle envs\n    player_info = obs_[\"players\"][0]\n    if player_info[1]:\n        player_info[1] = {key+\"sy\": val for key, val in player_info[1].items()}\n\n    action = agent(obs_)\n    obs_, reward, done, info = trainer.step(action)\n    \n    \n    \nenv.render(mode=\"ipython\", width=800, height=600)","8fa1c4d8":"# Parse obs\n\nWe provide a class that can parse the `obs` parameter into a more structured format.","b9940a50":"\ud83e\udd16 \ud83d\ude80 \ud83e\udd16 \ud83d\ude80 \ud83e\udd16   **BoilerBot v3.1 at your service**   \ud83e\udd16 \ud83d\ude80 \ud83e\udd16 \ud83d\ude80 \ud83e\udd16\n\nThe following code provides a framework to write bot strategies easily. You write strategies, which emit so-called plans (e.g. to move to a distant location) and the framework does the resolution and bot control.\n\nI can provide more documentation or updates, if I see that people are interested.","a1076077":"## State updater\n\nWe also need rules which decide which strategies to assign to new bots.","5164b2c4":"Some configuration","72a28be0":"# Execute agent\n\nHere we go. Some gatherer and hunter ships. Enjoy!","a9e9174c":"## Actions\n\nActions can generate Halite commands. Most likely you do not need to write new actions.","5d1b7535":"## Plans\n\nPlans are generated by strategies and themselves generate actions. Simple plans are like moving to a particular position. For starting you probably do not need to write new plans.","10915999":"# Generation of commands\n\nCommand are generated by:\n\n* strategies create scored plans; for example it can be the intention to move to a distant particular field occupied by halite or an enemy ship\n* plans are resolved to \"best plans\" such that no two strategies pursue the same goal\n* each of \"best plans\" generates scored actions that are required next to execute the plan; for example an action for a move plan is a step to a neighboring field, most other actions are trivial\n* proposed actions are resolved to \"best actions\"\n* finally \"best actions\" translate to Halite commands\n\nThat's it.\n\n`strategy.make_plans()` -> `List[Plan]` -> best `List[Plan]` -> `List[Action]` -> best `List[Action]` -> Halite command.\n\n## Resolver\n\nThe resolver uses `scipy.optimize.linear_sum_assignment` to solve the assignment problem.","b262a46c":"Any questions or further suggestions?","be8d0fa0":"# Strategies\n\nStrategies have mainly the task to implement `strategy.make_plans()`. They are stored as objects in a global variable.","e6fa36dd":"## Our Strategies\n\nWith all that framework, setting up strategies is easy:","4d7fe8ce":"We also initialize the geometry","ac20834d":"# Agent\n\nNow all we need is some global state. The agent function is pretty simple.","365ab065":"# Geometry package\n\nWe start with a package which handles the map geometry and provides helpful functions"}}