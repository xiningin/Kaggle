{"cell_type":{"133fd1ff":"code","4f9ec2b6":"code","9f7a7523":"code","09509416":"code","d002a763":"code","46c9a4da":"code","bb80ad4f":"code","9190d5e5":"code","c99d297c":"code","79dbc8eb":"code","e572ea72":"code","7047d5d5":"code","4cc5beb3":"code","3507e3a8":"code","b617c333":"code","9365e275":"code","33e22640":"code","da331fdb":"code","2f316a6a":"code","7f1f601a":"code","3653176d":"code","8401330d":"code","372864cf":"code","6021ad8f":"code","73598a38":"code","03a9ebcf":"code","3156e519":"code","51d718f1":"code","54f8724a":"code","5de07f28":"code","e404cf18":"code","bf3e96ce":"code","b2b6f4a3":"code","d797b14b":"code","34bed4c7":"code","a67fb0ad":"code","b9900c3f":"code","89ff3d12":"code","f4339069":"code","e94beb91":"code","5d955491":"code","671f4342":"code","f432c0db":"code","80340346":"code","3ae295c0":"code","9f95802e":"code","570a688a":"code","41ece20b":"code","f2740e93":"code","5f6bde4b":"code","8388a902":"code","84008ccd":"code","92f16137":"code","7164092f":"code","bf68c2b4":"code","9d66bbc4":"code","1d507765":"code","94338ec4":"code","0a53d3fb":"code","ed952d3c":"code","b47d96d3":"code","c5987c2e":"code","a9f8def8":"code","7ad69e16":"code","4eb56c9e":"code","c8e1943c":"markdown","6e015fd5":"markdown","406cde96":"markdown","238ffd79":"markdown","0a13dde4":"markdown","4d9ca49d":"markdown","9e917cff":"markdown","43d4a3fb":"markdown","e6eed10b":"markdown"},"source":{"133fd1ff":"# 22p22c0589_Naratip_W4HW1_12102020\n# Thai Mnist\n# re-write\/adapt model crop\/thes","4f9ec2b6":"import numpy as np\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nimport os","9f7a7523":"import cv2\nfrom skimage import feature\nfrom skimage import measure","09509416":"os.listdir('\/kaggle\/input\/thai-mnist-classification')","d002a763":"train_img_path = '\/kaggle\/input\/thai-mnist-classification\/train'\ntrain_label_path = '\/kaggle\/input\/thai-mnist-classification\/mnist.train.map.csv'","46c9a4da":"pd.read_csv(train_label_path)\ndx = pd.read_csv(train_label_path)","bb80ad4f":"class getdata():\n    def __init__(self,data_path,label_path):\n        self.dataPath = data_path\n        self.labelPath = label_path\n        self.label_df = pd.read_csv(label_path)\n        self.dataFile = self.label_df['id'].values\n        self.label = self.label_df['category'].values\n        self.n_index = len(self.dataFile)\n        \n    \n    def get1img(self,img_index,mode='rgb',label = False):\n        img = cv2.imread( os.path.join(self.dataPath,self.label_df.iloc[img_index]['id']) )\n        if mode == 'rgb':\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        elif mode == 'gray':\n            img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n            \n        if label:\n            return img,self.label_df.iloc[img_index]['category']\n        \n        return img","9190d5e5":"gdt = getdata(train_img_path,train_label_path)","c99d297c":"gdt.get1img(1,'rgb').shape","79dbc8eb":"plt.gray()","e572ea72":"from skimage.morphology import convex_hull_image\nfrom skimage.util import invert","7047d5d5":"temp_img = invert(gdt.get1img(234,'gray'))\nfig, [ax1,ax2] = plt.subplots(1, 2)\n\nax1.imshow(temp_img)\n\ncvh =  convex_hull_image(temp_img)\nax2.imshow(cvh)","4cc5beb3":"def convex_crop(img,pad=50):\n    convex = convex_hull_image(img)\n    r,c = np.where(convex)\n    while (min(r)-pad < 0) or (max(r)+pad > img.shape[0]) or (min(c)-pad < 0) or (max(c)+pad > img.shape[1]):\n        pad = pad - 1\n    return img[min(r)-pad:max(r)+pad,min(c)-pad:max(c)+pad]","3507e3a8":"crop_img = convex_crop(temp_img,pad=100)\nplt.imshow(crop_img)","b617c333":"def convex_resize(img):\n    img = invert(img)\n    img = convex_crop(img,pad=80)\n    img = cv2.resize(img,(224,224))\n    return img","9365e275":"def thes_resize(img,thes=10):\n    img = invert(img)\n    img = convex_crop(img,pad=80)\n    \n    img = ((img > thes)*255).astype(np.uint8)\n    if(min(img.shape) > 300):\n        img = cv2.resize(img,(300,300))\n        img = ((img > thes)*255).astype(np.uint8)\n    if(min(img.shape) > 224):\n        img = cv2.resize(img,(224,224))\n        img = ((img > thes)*255).astype(np.uint8)\n    img = cv2.resize(img,(224,224))\n    img = ((img > thes)*255).astype(np.uint8)\n#     img = cv2.resize(img,(50,50))\n#     img = ((img > thes)*255).astype(np.uint8)\n#     img = cv2.resize(img,(32,32))\n#     img = ((img > thes)*255).astype(np.uint8)\n    return img","33e22640":"temp_img = gdt.get1img(64,'gray')\nfig, [ax1,ax2] = plt.subplots(1, 2,figsize=(10,7))\nax1.imshow(convex_resize(temp_img))\nax1.set_title('Without thresholding')\nax2.imshow(thes_resize(temp_img))\nax2.set_title('Thresholding')","da331fdb":"convex_resize(temp_img).shape","2f316a6a":"fig, ax = plt.subplots(5, 5, figsize=(15,15))\nfor i in range(5):\n    for j in range(5):\n        img_index = np.random.randint(0,gdt.n_index)\n        ax[i][j].imshow(thes_resize(gdt.get1img(img_index,'gray')))\n        ax[i][j].set_title('Class: '+str(gdt.label[img_index]))\n        ax[i][j].set_axis_off()","7f1f601a":"gdt.n_index","3653176d":"X = []\nfor i in range(gdt.n_index):\n    X.append(thes_resize(gdt.get1img(i,'gray')))\n    if (i+1) % 100 == 0:\n        print(i)\n        \nX = np.array(X)","8401330d":"y = gdt.label\nX = X.reshape((-1,224,224,1))\nX.shape,y.shape","372864cf":"import tensorflow as tf","6021ad8f":"y_cat = tf.keras.utils.to_categorical(y)\ny_cat.shape","73598a38":"y_cat","03a9ebcf":"y","3156e519":"from sklearn.model_selection import train_test_split","51d718f1":"X_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.33)","54f8724a":"X_train = X_train \/ 255.\nX_test = X_test \/ 255.","5de07f28":"len(X_train)","e404cf18":"import tensorflow as tf\nfrom tensorflow import keras\n\nresnet = tf.keras.applications.ResNet50V2(\n    include_top=False,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n)","bf3e96ce":"resnet.summary()","b2b6f4a3":"\nIMAGE_WIDTH=224\nIMAGE_HEIGHT=224\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=1\nbatch_size = 64","d797b14b":"from tensorflow.keras import layers, Model\nx_in = layers.Input(shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)) # \u0e2a\u0e23\u0e49\u0e32\u0e07 input layer\n# \u0e40\u0e2d\u0e32 x_in \u0e40\u0e02\u0e49\u0e32 conv2D\nx = layers.Conv2D(3, 1)(x_in) # \u0e40\u0e2d\u0e32 conv2D \u0e43\u0e2a\u0e48 filter 3 filter \u0e17\u0e33\u0e43\u0e2b\u0e49 grey scale \u0e21\u0e35 3 channel \u0e41\u0e25\u0e30 \u0e02\u0e19\u0e32\u0e14 1*1 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e44\u0e21\u0e48\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e04\u0e48\u0e32\n# x = 32,32,3 \u0e02\u0e19\u0e32\u0e14 32*32 \/3 filter\nx = resnet(x)\n# fit output\n\nx = layers.Flatten()(x) # \u0e40\u0e2d\u0e32 x \u0e40\u0e02\u0e49\u0e32 flatten\nx = layers.Dense(10, activation='softmax')(x) # \u0e40\u0e2d\u0e32 x \u0e40\u0e02\u0e49\u0e32 dense\nmodel = Model(x_in, x)\nmodel.summary()","34bed4c7":"model.compile(loss='categorical_crossentropy', optimizer='adam',metrics='acc')","a67fb0ad":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\nearlystop = EarlyStopping(monitor='val_acc', patience=10,verbose=1)\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.1, \n                                            min_lr=0.0000001)\n\ncallbacks = [earlystop, learning_rate_reduction]","b9900c3f":"history = model.fit(X_train, \n                    y_train, \n                    batch_size=batch_size,\n                    validation_data=(X_test,y_test),\n                    epochs=50, \n                    callbacks=callbacks)","89ff3d12":"# summarize history for accuracy\nplt.figure(figsize=(12,6))\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model acc')\nplt.ylabel('acc')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# summarize history for loss\nplt.figure(figsize=(12,6))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","f4339069":"model.save_weights(\"incepResnew.h5\")","e94beb91":"from keras.models import load_model\n \n# load weight model\n# \u0e42\u0e2b\u0e25\u0e14\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48 train \u0e41\u0e25\u0e49\u0e27\u0e21\u0e32\u0e43\u0e0a\u0e49 \n\n# history = model.load_weights('..\/input\/modelh5\/incepResnew.h5')    \n# history = model.load_weights('..\/input\/resold\/incepRes.h5') \n","5d955491":"class gettestdata():\n    def __init__(self,data_path,label_list):\n        \n        self.dataPath = data_path\n        self.labelPath = label_list\n        self.label_df = label_list\n        \n        self.dataFile = self.label_df['id'].values\n#         self.label = self.label_df['category'].values\n        self.n_index = len(self.dataFile)\n        \n    \n    def get1img(self,img_index,mode='rgb',label = False):\n        img = cv2.imread(os.path.join(self.dataPath,self.label_df.iloc[img_index]['id']) )\n        if mode == 'rgb':\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        elif mode == 'gray':\n            img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n            \n        if label:\n            return img,self.label_df.iloc[img_index]['category']\n        \n        return img","671f4342":"test_filenames = os.listdir(\"..\/input\/thai-mnist-classification\/test\")\ntest_df = pd.DataFrame({\n    'id': test_filenames\n})\nnb_samples = test_df.shape[0]","f432c0db":"test_df","80340346":"test_img_path = '\/kaggle\/input\/thai-mnist-classification\/test'\n# test_label_path = '\/kaggle\/input\/thai-mnist-classification\/test.rules.csv'","3ae295c0":"gdt_test = gettestdata(test_img_path, test_df)","9f95802e":"test = []\nfor i in range(gdt_test.n_index): # gdt_test.n_index\n    test.append(thes_resize(gdt_test.get1img(i,'gray')))\n    if (i+1) % 100 == 0:\n        print(i)\ntest = np.array(test)\ntest = test\/255.","570a688a":"Ztest = model.predict(test)","41ece20b":"test_df['category'] = np.argmax(Ztest, axis=-1)","f2740e93":"test_df","5f6bde4b":"test_df.to_csv ('.\/m_val.csv', index = False)","8388a902":"df1 = pd.read_csv(\"..\/input\/thai-mnist-classification\/test.rules.csv\")\ndf1","84008ccd":"df_label1 = test_df\ndf_label1 = df_label1.rename(columns={\"id\": \"feature1\", \"category\": \"label1\"})\n\ndf_label2 = test_df\ndf_label2 = df_label2.rename(columns={\"id\": \"feature2\", \"category\": \"label2\"})\n\ndf_label3 = test_df\ndf_label3 = df_label3.rename(columns={\"id\": \"feature3\", \"category\": \"label3\"})\n","92f16137":"df_clogic = df1\ndf_clogic[\"feature1\"] = df_clogic[\"feature1\"].fillna('99')\ndf_clogic","7164092f":"df_clogic2 = df_clogic.merge(df_label1, on ='feature1', how='left')\ndf_clogic2 = df_clogic2.merge(df_label2, on ='feature2', how='left')\ndf_clogic2 = df_clogic2.merge(df_label3, on ='feature3', how='left')\ndf_clogic2[\"label1\"] = df_clogic2[\"label1\"].fillna(99)\ndf_clogic2 = df_clogic2[[\"id\",\"label1\",\"label2\",\"label3\",\"predict\"]]\n\ndf_clogic2['label1'] = df_clogic2['label1'].astype(int)\ndf_clogic2['label2'] = df_clogic2['label2'].astype(int)\ndf_clogic2['label3'] = df_clogic2['label3'].astype(int)\ndf_clogic2","bf68c2b4":"df_clogic2.info()","9d66bbc4":"import math \n\ndef f_0(f2,f3):\n    return f2*f3\n\ndef f_1(f2,f3):\n    return math.sqrt((f2-f3)**2)\n    \ndef f_2(f2,f3):\n    return (f2+f3) * math.sqrt((f2-f3)**2)\n    \ndef f_3(f2,f3):\n    return math.sqrt((((f3*(f3+1))-(f2*(f2-1)))\/2)**2)\n    \ndef f_4(f2,f3):\n    return 50+(f2-f3)\n    \ndef f_5(f2,f3):\n    return min(f2,f3)\n    \ndef f_6(f2,f3):\n    return max(f2,f3)\n    \ndef f_7(f2,f3):\n    return ((f2*f3)%9)*11\n\ndef f_8(f2,f3):\n    \n    result = (((f2**2)+1)*f2)+((f3)*(f3+1))\n    result = f_8re(result)\n    \n    return result\n    \ndef f_8re(result):  \n    if result > 99:\n        result = result - 99\n        result = f_8re(result)\n        \n    return result\n\n    \ndef f_9(f2,f3):\n    return 50+f2\n    \ndef f_99(f2,f3):\n    return f2+f3\n    \n","1d507765":"def controller(f1,f2,f3):\n    if f1 == 99:\n        return f_99(f2,f3)\n    \n    elif f1 == 0:\n        return f_0(f2,f3)\n    \n    elif f1 == 1:\n        return f_1(f2,f3)\n    \n    elif f1 == 2:\n        return f_2(f2,f3)\n    \n    elif f1 == 3:\n        return f_3(f2,f3)\n    \n    elif f1 == 4:\n        return f_4(f2,f3)\n    \n    elif f1 == 5:\n        return f_5(f2,f3)\n    \n    elif f1 == 6:\n        return f_6(f2,f3)\n    \n    elif f1 == 7:\n        return f_7(f2,f3)\n    \n    elif f1 == 8:\n        return f_8(f2,f3)\n    \n    elif f1 == 9:\n        return f_9(f2,f3)\n    \n","94338ec4":"df_clogic2.info()","0a53d3fb":"ans = []\nfor i in range(0,len(df_clogic2)):\n    ans.append(int(controller(df_clogic2[\"label1\"][i],df_clogic2[\"label2\"][i],df_clogic2[\"label3\"][i])))","ed952d3c":"df_clogic2[\"ans\"] = ans","b47d96d3":"submit = pd.read_csv(\"..\/input\/thai-mnist-classification\/submit.csv\")\nsubmit","c5987c2e":"val = df_clogic2[['id','ans']]\nval = val.rename(columns={\"ans\": \"predict\"})","a9f8def8":"val","7ad69e16":"print(\"min: {0}\".format(min(val[\"predict\"])))\nprint(\"max: {0}\".format(max(val[\"predict\"])))","4eb56c9e":"val.to_csv ('.\/submit.csv', index = False)","c8e1943c":"# F2 Prepare","6e015fd5":"# Model","406cde96":"## Apply to all images","238ffd79":"# Merge predict with F2","0a13dde4":"# F2 Cal","4d9ca49d":"load model","9e917cff":"predict","43d4a3fb":"# Image convex hull","e6eed10b":"## Crop image"}}