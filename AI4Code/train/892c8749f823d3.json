{"cell_type":{"88f37caf":"code","fc6beb7b":"code","0d7a3812":"code","2cc91c4d":"code","1a6bfb19":"code","7bd713ed":"code","e3adbc81":"code","7c6a6d92":"code","70fb240d":"code","b3391e64":"code","a89da43d":"code","e1ac8776":"code","9683fad1":"code","27128639":"code","c9b34ad9":"code","36e774ad":"code","668814f8":"markdown","c970bd35":"markdown","201a3491":"markdown","62b24d8e":"markdown"},"source":{"88f37caf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport os\n\nbase_dir = '..\/input'","fc6beb7b":"X_train = pd.read_csv(f'{base_dir}\/X_train.csv').drop(['measurement_number', 'row_id'], axis=1)\ny_train = pd.read_csv(f'{base_dir}\/y_train.csv')\ntrain_set = X_train.merge(y_train, on='series_id')\nX_test = pd.read_csv(f'{base_dir}\/X_test.csv').drop(['measurement_number', 'row_id'], axis=1)","0d7a3812":"from functools import reduce\ndef transform_features(df):\n    df['orientation_sum'] = df['orientation_X'] + df['orientation_Y'] + df['orientation_Z'] + df['orientation_W']\n    df['velocity_sum'] = df['angular_velocity_X'] + df['angular_velocity_Y'] + df['angular_velocity_Z']\n    df['acc_sum'] = df['linear_acceleration_X'] + df['linear_acceleration_Y'] + df['linear_acceleration_Z']\n    df['orientation_prod'] = df['orientation_X'] * df['orientation_Y'] * df['orientation_Z'] * df['orientation_W']\n    df['velocity_prod'] = df['angular_velocity_X'] * df['angular_velocity_Y'] * df['angular_velocity_Z']\n    df['acc_prod'] = df['linear_acceleration_X'] * df['linear_acceleration_Y'] * df['linear_acceleration_Z']\n    dfs = []\n    for t in [('min', lambda x: x.min()), ('max', lambda x: x.max()), ('mean', lambda x: x.mean()), ('std_dev', lambda x: x.std())]:\n        name = t[0]\n        agg_func = t[1]\n        agg_df = df.groupby('series_id', as_index=False).apply(agg_func).drop('series_id', axis=1).reset_index().rename(index=str, columns={'index': 'series_id'})\n        agg_df['series_id'] = agg_df['series_id'].astype(int)\n        agg_df.columns = ['series_id'] + [str(col) + f'_{name}' for col in agg_df.columns if not col == 'series_id']\n        dfs.append(agg_df)\n    df = reduce(lambda left, right: pd.merge(left, right, on='series_id'), dfs)\n    return df","2cc91c4d":"features_df = transform_features(X_train)","1a6bfb19":"target_df = train_set[['series_id','surface']].groupby('series_id', as_index=False).first()","7bd713ed":"X = features_df.drop('series_id', axis=1).values\nfeature_names = features_df.drop('series_id', axis=1).columns.values\ny = target_df['surface'].values\ny = y.reshape(y.shape[0])","e3adbc81":"import xgboost\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\n\n#grid = {base_score=0.5, booster='gbtree', colsample_bylevel=1,\n#       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n#        max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n#       n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,\n#       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n#       silent=True, subsample=1}\ngrid = {'max_depth': 20, 'n_estimators': 200, 'n_jobs':4}\nmodel = xgboost.XGBClassifier()\nmodel.set_params(**grid)\nkfold = StratifiedKFold(n_splits=10, random_state=7)\nresults = cross_val_score(model, X, y, cv=kfold)\nprint(f'Accuracy: {results.mean():.2%} ({results.std():.2%})')","7c6a6d92":"from sklearn.metrics import accuracy_score\ngroup_ids = train_set[['series_id','group_id']].groupby('series_id', as_index=False).first()\nxv_set = features_df.merge(target_df, on='series_id').merge(group_ids, on='series_id')\nacc_sum = 0\nfor split in np.array_split(xv_set['group_id'].unique(), 4):\n    xv_test_set = xv_set[xv_set['group_id'].isin(split)]\n    xv_train_set = xv_set[~xv_set['group_id'].isin(split)]\n    model = xgboost.XGBClassifier()\n    model.set_params(**grid)\n    model.fit(xv_train_set.drop(['series_id', 'group_id', 'surface'], axis=1).values, xv_train_set['surface'].values)\n    y_pred = model.predict(xv_test_set.drop(['series_id', 'group_id', 'surface'], axis=1).values)\n    accuracy = accuracy_score(xv_test_set['surface'].values, y_pred)\n    acc_sum += accuracy\n    print(f\"Accuracy = {accuracy}\")\nprint(f\"Final cv accuracy = {acc_sum \/ 4:.2%}\")","70fb240d":"model = xgboost.XGBClassifier()\nmodel.set_params(**grid)\nmodel.fit(X, y)","b3391e64":"model.get_booster().feature_names = None","a89da43d":"from xgboost import plot_importance\nax = xgboost.plot_importance(model)\nfig = ax.figure\nfig.set_size_inches(20, 32)","e1ac8776":"X_pred = transform_features(X_test).drop('series_id', axis=1).values\npreds = model.predict(X_pred)","9683fad1":"pd.DataFrame(preds)[0].value_counts()","27128639":"submission = X_test[['series_id']].groupby('series_id', as_index=False).first()\nsubmission['surface'] = preds","c9b34ad9":"submission.to_csv('submission.csv', index=False)","36e774ad":"pd.read_csv('submission.csv')","668814f8":"**Train model on all data and generate final predictions.**","c970bd35":"**Cross-validation based on group IDs. This is used to see how well the model generalizes across recording sessions.**","201a3491":"**Plot feature importance:**","62b24d8e":"**Ten-fold cross-validation:**"}}