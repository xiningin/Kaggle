{"cell_type":{"c660ca48":"code","da5d02b1":"code","91be0f9b":"code","8e828b92":"code","1a1c6f25":"code","3327d448":"code","ac15e913":"code","7c67564e":"code","42bf75be":"code","3772fdcf":"code","6275e621":"code","d108bbd2":"code","e713a7b8":"code","0f918fe2":"code","aba54ade":"code","08c8171a":"code","2a500e67":"code","673718f4":"code","e3b7fb1b":"code","a419a1ab":"code","2f36029e":"code","20d082f5":"code","f131744c":"code","c3f03b75":"code","2da61b21":"code","8dd2dc22":"code","6f27dacb":"code","39431c97":"code","e7531048":"code","8e4fdc32":"code","56f15bcf":"code","0d440732":"code","401b983a":"code","bc0cb6e8":"code","52a2417b":"code","de85c6ce":"code","a6a33083":"code","3061e42c":"markdown","07dd1569":"markdown","668eeb64":"markdown","b7ca0a95":"markdown","93c079d0":"markdown"},"source":{"c660ca48":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da5d02b1":"# importing libaries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings","91be0f9b":"data = pd.read_csv(\"..\/input\/medium-articles-dataset\/medium_data.csv\")\ndata.head()","8e828b92":"# Checking max value in claps\ndata['claps'].max()","1a1c6f25":"data.shape","3327d448":"data.columns","ac15e913":"data.info()","7c67564e":"data.describe()","42bf75be":"data_numeric=data._get_numeric_data()\ndata_numeric.head()","3772fdcf":"# Checking for missing value\nmissing_data=data.isnull()\nmissing_data.head()","6275e621":"for column in missing_data.columns.values.tolist():\n    print(column)\n    print(missing_data[column].value_counts())\n    print(\"\")","d108bbd2":"dummy_variable_1=pd.get_dummies(data['subtitle'])\ndummy_variable_1.head()","e713a7b8":"data=pd.concat([data,dummy_variable_1],axis=1)\n\ndata.drop(\"subtitle\",axis=1,inplace=True)","0f918fe2":"data.head()","aba54ade":"dummy_variable_2=pd.get_dummies(data['title'])\ndummy_variable_2.head()","08c8171a":"data=pd.concat([data,dummy_variable_2],axis=1)\ndata.drop('title',axis=1,inplace=True)","2a500e67":"data.head()","673718f4":"dummy_variable_3=pd.get_dummies(data['image'])\ndummy_variable_3.head()","e3b7fb1b":"data=pd.concat([data,dummy_variable_3],axis=1)\n\ndata.drop(\"image\",axis=1,inplace=True)","a419a1ab":"data.head()","2f36029e":"data.drop(['id','url','responses','reading_time','publication','date'],axis=1,inplace=True)","20d082f5":"data.head()","f131744c":"test_data=data['claps']","c3f03b75":"train_data=data.drop('claps',axis=1)","2da61b21":"from sklearn.model_selection import train_test_split\n\n\nx_train, x_test, y_train, y_test = train_test_split(train_data, test_data, test_size=0.30, random_state=1)\n\n\nprint(\"number of test samples :\", x_test.shape[0])\nprint(\"number of training samples:\",x_train.shape[0])","8dd2dc22":"from sklearn.linear_model import LinearRegression","6f27dacb":"lm=LinearRegression()","39431c97":"lm.fit(x_train,y_train)","e7531048":"lm.score(x_train,y_train)","8e4fdc32":"lm.score(x_test,y_test)","56f15bcf":"y_hat_train=lm.predict(x_train)\ny_hat_train[0:5]","0d440732":"y_hat_test=lm.predict(x_test)\ny_hat_test[0:5]","401b983a":"%%capture\n! pip install ipywidgets","bc0cb6e8":"from IPython.display import display\nfrom IPython.html import widgets \nfrom IPython.display import display\nfrom ipywidgets import interact, interactive, fixed, interact_manual","52a2417b":"def DistributionPlot(RedFunction, BlueFunction, RedName, BlueName, Title):\n    width = 12\n    height = 10\n    plt.figure(figsize=(width, height))\n\n    ax1 = sns.distplot(RedFunction, hist=False, color=\"r\", label=RedName)\n    ax2 = sns.distplot(BlueFunction, hist=False, color=\"b\", label=BlueName, ax=ax1)\n\n    plt.title(Title)\n    plt.xlabel('Claps')\n    plt.ylabel('')\n\n    plt.show()\n    plt.close()","de85c6ce":"Title = 'Distribution  Plot of  Predicted Value Using Training Data vs Training Data Distribution'\nDistributionPlot(y_train, y_hat_train, \"Actual Values (Train)\", \"Predicted Values (Train)\", Title)","a6a33083":"Title = 'Distribution  Plot of  Predicted Value Using Training Data vs Training Data Distribution'\nDistributionPlot(y_test, y_hat_test, \"Actual Values (Train)\", \"Predicted Values (Train)\", Title)","3061e42c":"# Predict number of claps based on title, subtitle, and featured image","07dd1569":"# Data Preprocessing","668eeb64":" # Free to edit this notebook and give me advice for better model implmentation and Evolution","b7ca0a95":"# Handinling Categorical Variable","93c079d0":"# Implementing Linear Regression"}}