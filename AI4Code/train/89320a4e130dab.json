{"cell_type":{"0b2920ad":"code","5fc37dbb":"code","3306ab79":"code","52f0bf78":"code","99cf6bed":"code","5e9b33b4":"code","798d3c43":"code","43b0813a":"code","1bf6c79b":"code","332a5ee8":"code","56c47769":"code","415bdb40":"code","71dc6ec0":"code","c67a52d5":"code","fadf8ffc":"code","b5c5acd0":"code","5c940064":"code","56591e86":"code","223734e5":"code","d5c13c69":"code","3c088ebc":"code","1dea41b7":"code","5d94b95d":"code","039d948b":"code","a4cc8ed5":"code","f9e5699d":"code","a85d27c6":"code","18b812ef":"code","e6148573":"code","bf5e0fa5":"code","e0fd0afb":"code","7dca634c":"code","f435eacd":"code","93b57794":"code","edf022a7":"code","4bd4c8fb":"code","37fa5776":"code","187f0cb6":"code","01a10ee7":"code","868b7a53":"code","535a8f27":"code","67abdc3f":"code","da696014":"code","4de3d44a":"code","5a99696f":"code","e72f0118":"code","c51f45b8":"code","e8429dcf":"code","3482865f":"code","96ec4d91":"code","c418795b":"code","a64a87dc":"code","78f2d3dd":"code","ba5d7d99":"code","45c649be":"code","fa34aeff":"code","2be07fc0":"code","da7f7096":"code","42499531":"code","68e8f076":"code","69eb13b2":"code","a95b175c":"code","9d4b0239":"code","dc7b4f35":"code","56e4f84f":"code","34876c5f":"code","736444bc":"code","552eb50f":"code","224672bb":"code","caf1cdc5":"code","77ede2d9":"code","7adf3dc3":"code","a5c1a372":"code","891b479c":"code","d8aaaea6":"code","7c0d5dac":"code","fe690230":"code","a6cdf6a6":"code","716d33e3":"code","21bb56da":"code","4ac21fbd":"code","34c24fb2":"code","26a5c136":"code","8be16f1f":"code","5ed17ec1":"code","6be08aef":"code","9b44e30b":"code","63e1e370":"code","4c12eba8":"code","7a7fa429":"code","528fe60a":"code","f92f2eb5":"code","d9d5ab0c":"code","67d339b1":"code","cb696fca":"code","150547ec":"code","f2d23a07":"code","91e78dcb":"code","59623673":"code","9e443172":"code","0d4e2251":"code","862ff330":"code","85b0883f":"code","1fbe9280":"code","c7ac170b":"code","ad13e758":"code","2963c0f7":"code","7642b2f1":"code","759cb370":"code","e617e52a":"code","877f15cc":"code","901a1584":"code","d7623688":"code","7d6d242e":"code","98c2fb0f":"code","82188cd6":"code","bbf92b9e":"code","72b6fb22":"code","41b3a577":"code","b4d3cf45":"code","b0283d4b":"code","7ab52a4d":"code","dd6dc9d9":"code","686c96bb":"code","646d55f7":"code","a8472bdb":"code","03ea2380":"code","c4b33287":"code","c5920d81":"markdown","cdd8e159":"markdown","d90acef4":"markdown","db0ee67d":"markdown","e1e5542f":"markdown","fa14d464":"markdown","790d5a35":"markdown","ed667668":"markdown","fc74fb25":"markdown","c7640b04":"markdown","c16a6149":"markdown","9ab9aacd":"markdown","760c90fa":"markdown","a85e6078":"markdown","6c5d5815":"markdown","7dfc216b":"markdown","10f2acdf":"markdown","09e1bf83":"markdown","35b18222":"markdown","42517a3c":"markdown","6a5894b5":"markdown","7452646b":"markdown","ae74006d":"markdown","be04e6d0":"markdown","921d94b3":"markdown","819c8ffd":"markdown","3dbfcbf3":"markdown","bfa8e64e":"markdown","428e17c9":"markdown","9a8064d5":"markdown","7fa8ec46":"markdown","77a81b9f":"markdown","af0cccda":"markdown","edc00a87":"markdown","a5ca99b5":"markdown","744055ec":"markdown","cf0fece9":"markdown","6e49c83c":"markdown","3d827e27":"markdown","aff08b82":"markdown","d2687bd8":"markdown","cfaeab0b":"markdown","5fc34b90":"markdown","1621e6d6":"markdown","df9781dd":"markdown","4ddd2cb6":"markdown","18b3efbc":"markdown","59ec18ea":"markdown","34e368ef":"markdown","a087f3f2":"markdown","ead49aa3":"markdown"},"source":{"0b2920ad":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport time\nimport json\nimport requests as r\nimport warnings\nimport pandas_profiling\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nwarnings.simplefilter('ignore')\nfrom tqdm.notebook import tqdm\nfrom pandas import Series\nfrom bs4 import BeautifulSoup\nfrom catboost import CatBoostRegressor\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.base import clone\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n","5fc37dbb":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","3306ab79":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt\n# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","52f0bf78":"#\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred - y_true) \/ y_true))","99cf6bed":"#\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0438, \u043d\u0430\u0434\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c \u0432 \u041c\u043e\u0441\u043a\u0432\u0435:\nSTART_URL='https:\/\/auto.ru\/moskva\/cars\/used\/'\n#\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0441\u044b\u043b\u043e\u043a\npages_url_list=[]\n","5e9b33b4":"\"\"\"\nwhile len(pages_url_list) < 4001\n    for i in range(1,99):   \n        response = r.get(START_URL+'?page=%s'%i)\n        page = BeautifulSoup(response.text, 'html.parser')\n        for link in page.findAll('a',{\"class\": \"Link OfferThumb\"}):\n            try:\n                if link['href'] not in pages_url_list:\n                    pages_url_list.append(link['href'])\n            except:\n                print('Except!')\n                pass\n    print(len(pages_url_list))  \n    time.sleep(5)\n    \"\"\"","798d3c43":"\"\"\"cars_list = []\nfor item in pages_url_list:\n    response = r.get(item)\n    response.encoding = 'utf8'\n    page = BeautifulSoup(response.text, 'html.parser')\n    if page.find('div', class_='CardSold') == None:\n        try:\n            json_data = json.loads(page.find('script', type=\"application\/ld+json\").string)\n        except:\n            print(item)\n            pass\n        cls_str = 'CardInfoRow_'\n        #span_str = 'CardInfoRow__cell'\n        try:\n            cars_list.append({\n            'bodyType': json_data['bodyType'],\n            'brand': json_data['brand'],\n            'car_url': json_data['offers']['url'],\n            'color': json_data['color'],\n            'description': json_data['description'],\n            'engineDisplacement': json_data['vehicleEngine']['engineDisplacement'],\n            'enginePower': json_data['vehicleEngine']['enginePower'],\n            'fuelType': json_data['fuelType'],\n            'image': json_data['image'],\n            'mileage': page.find(\n                'li', class_=cls_str+'kmAge').find_all('span')[1].text,\n            'modelDate': json_data['modelDate'],\n            'model_name': json_data['name'],\n            'name': json_data['vehicleEngine']['name'],\n            'numberOfDoors': json_data['numberOfDoors'],\n            'parsing_unixtime': int(time.time()),\n            'priceCurrency': json_data['offers']['priceCurrency'],\n            'productionDate': json_data['productionDate'],\n            'sell_id': page.find('div', title='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f').text,\n            'vehicleConfiguration': json_data['vehicleConfiguration'],\n            'vehicleTransmission': json_data['vehicleTransmission'],\n            '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b': page.find(\n                'li', class_=cls_str+'ownersCount').find_all('span')[1].text,\n            '\u041f\u0422\u0421': page.find(\n                'li', class_=cls_str+'pts').find_all('span')[1].text,\n            '\u041f\u0440\u0438\u0432\u043e\u0434': page.find(\n                'li', class_=cls_str+'drive').find_all('span')[1].text,\n            '\u0420\u0443\u043b\u044c': page.find(\n                'li', class_=cls_str+'wheel').find_all('span')[1].text,\n            '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435': page.find(\n                'li', class_=cls_str+'state').find_all('span')[1].text,\n            '\u0422\u0430\u043c\u043e\u0436\u043d\u044f': page.find(\n                'li', class_=cls_str+'customs').find_all('span')[1].text,\n            'price': page.find(\n                'span', class_='OfferPriceCaption__price').text\n            })\n        except:\n            print(item)\n            pass\n\n    else:\n        print('\u041f\u0440\u043e\u0434\u0430\u043d\u0430...')\n\n    print('\u041e\u0436\u0438\u0434\u0430\u044e 0.1 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u0421\u0442\u0440\u043e\u043a', len(cars_list))\n    time.sleep(0.1)\n    \"\"\"","43b0813a":"# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0434\u043b\u044f \u043d\u0430\u0441 \u0432\u0438\u0434 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n#df = pd.DataFrame(cars_list)\n# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b, \u043c\u043e\u0436\u043d\u043e \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c car_url \u0438\u043b\u0438 sell_id\n#df['sell_id'].duplicated().sum()\n# \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 csv\n#df.to_csv('cars_df.csv', index=False)","1bf6c79b":"VERSION    = 16\nDIR_TRAIN  = '..\/input\/cars-df2\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TRAIN20  = '..\/input\/parsing-all-moscow-auto-ru-0909-2020\/'\nDIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/'\nVAL_SIZE   = 0.20   # 20%","332a5ee8":"!ls '..\/input'","56c47769":"train = pd.read_csv(DIR_TRAIN + 'cars_df.csv') # \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntrain_2020 = pd.read_csv(DIR_TRAIN20 + 'all_auto_ru_09_09_2020.csv')\ntest = pd.read_csv(DIR_TEST + 'test.csv')\nsample_submission = pd.read_csv(DIR_TEST + 'sample_submission.csv')","415bdb40":"train.head(5)","71dc6ec0":"#\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u0447\u0442\u043e \u0430\u0432\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0441 \u0446\u0435\u043d\u043e\u0439\ntrain.price.isnull().values.any()","c67a52d5":"train.info()\n#\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\ntrain.isna().sum()","fadf8ffc":"test.head(3)","b5c5acd0":"test.info()\n\n#\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\ntest.isna().sum()","5c940064":"print('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', train.shape)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', test.shape)","56591e86":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0437\u043d\u0430\u043a \u0432\u0430\u043b\u044e\u0442\u044b \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0432 \u0446\u0435\u043d\u0435\n\ntrain['price'] = train['price'].apply(lambda x: str(x))\ntrain.price = train.price.apply(lambda x: (\"\".join(filter(str.isdigit, x)))).astype('int')","223734e5":"#\u0423\u0447\u0442\u0435\u043c \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u044e \u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u0446\u0435\u043d\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0431\u044b\u043b\u0438 \u043f\u043e\u0445\u043e\u0436\u0438 \u043d\u0430 \u043e\u0441\u0435\u043d\u044c 2020 \u0433\u043e\u0434\u0430\nbrands = train_2020.brand.unique()\ndisplay(train.price.head(7))","d5c13c69":"for brand in brands:\n    mean20 = train_2020[train_2020[\"brand\"]==brand].price.mean()\n    \n    mean21 = train[train[\"brand\"]==brand].price.mean()\n    inf = (mean21 - mean20)\/mean20\n    if inf > 0:\n        train.loc[train[\"brand\"]==brand, ['price']] = train.loc[train[\"brand\"]==brand, ['price']].apply(lambda x: round(x \/ (1+inf),0))\ndisplay(train.price.head(7))","3c088ebc":"# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b\ntrain = train.drop_duplicates(subset=['car_url'])","1dea41b7":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u043d\u0430 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u043f\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\ntrain['car_url'].duplicated().sum()","5d94b95d":"test['sell_id'].duplicated().sum()","039d948b":"# \u043d\u0430\u043c \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043d\u0435 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435(\u043b\u0438\u0431\u043e \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043d\u0435 \u0443\u0432\u0438\u0434\u0435\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438), \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435\n# \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0438\u0445 \u043d\u0435 \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e)\ntest.drop(['complectation_dict', 'equipment_dict', 'model_info',\n           'sell_id', 'super_gen', 'vendor','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'], axis=1, inplace=True)","a4cc8ed5":"test['price'] = 0\ndf_train = train\ndf_test = test\n\n# \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","f9e5699d":"# \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b\ndata = data.drop_duplicates(subset=['car_url'])","a85d27c6":"# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n#pandas_profiling.ProfileReport(data)","18b812ef":"# \u0411\u0443\u0434\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a:\n# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435:\nnum_cols = []\n\n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435\nbin_cols = []\n\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\ncat_cols = []","e6148573":"data.bodyType.value_counts()","bf5e0fa5":"#\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e - \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0443\u0437\u043e\u0432\u0430\ndata['bodyType'] = data['bodyType'].astype(str).apply(lambda x: None if x.strip()=='' else x)\ndata['bodyType'] = data.bodyType.apply(lambda x: x.split(' ')[0].lower())\ndata.bodyType.value_counts()","e0fd0afb":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ndata.bodyType.value_counts().plot.barh()","7dca634c":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442,\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\"\ncat_cols.append('bodyType')","f435eacd":"data.brand.value_counts()","93b57794":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442,\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\"\ncat_cols.append('brand')","edf022a7":"data.color.value_counts()","4bd4c8fb":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ndata.color.value_counts().plot.barh()","37fa5776":"#\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442,\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442,\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\"\ncat_cols.append('color')","187f0cb6":"# \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438\ndata['description_len'] = data.description.apply(lambda x: len(str(x)))\n# \u0441\u0430\u043c description \u0443\u0434\u0430\u043b\u0438\u043c\ndata = data.drop('description',axis=1)","01a10ee7":"#\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0435\u0433\u043e \u043a\u0430\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\nnum_cols.append('description_len')","868b7a53":"data.fuelType.value_counts()","535a8f27":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ndata.fuelType.value_counts().plot.barh()","67abdc3f":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442,\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\"\ncat_cols.append('fuelType')","da696014":"# image - \u0444\u043e\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0444\u043e\u0442\u043e \u043d\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\ncount_photos = data.image.value_counts()\ncount_photos.head(5)","4de3d44a":"# image - \u0444\u043e\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0444\u043e\u0442\u043e \u043d\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\ncount_photos = data.image.value_counts()\ncount_photos.head(5)","5a99696f":"# \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e \u0442\u0438\u043f\u0443 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0444\u043e\u0442\u043e\ndata['real_photo'] = data.image.apply(lambda x: x.find('get-verba') == -1)\n\nreal = data[data['real_photo'] == False].image.value_counts()","e72f0118":"# \u0441\u0430\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a image \u0443\u0434\u0430\u043b\u0438\u043c\ndata = data.drop('image',axis=1)","c51f45b8":"data['real_photo'].value_counts()\n#\u0420\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u043e\u0442\u043e \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e","e8429dcf":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442,\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435\nbin_cols.append('real_photo')","3482865f":"data.engineDisplacement.unique()","96ec4d91":"#\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\ndata.engineDisplacement = data.engineDisplacement.apply(lambda x: x[:3])\ndata.engineDisplacement = data.engineDisplacement.replace(' LT', '2.0')\ndata.engineDisplacement = data.engineDisplacement.apply(lambda x: float(x))","c418795b":"#\u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\ndata[\"engineDisplacement\"] = data[\"engineDisplacement\"].astype('float').apply(lambda x: 4 if x >= 4 else \n   3 if x >= 3 else(2 if x >= 2 else (1 if x >= 1 else 0)))\ndata.engineDisplacement.value_counts()","a64a87dc":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442,\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\"\ncat_cols.append('engineDisplacement')","78f2d3dd":"data.enginePower.unique()","ba5d7d99":"#\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u043f\u0435\u0440\u0432\u044b\u0435 \u0446\u0438\u0444\u0440\u044b\ndata['enginePower'] = data['enginePower'].apply(lambda x: x[:3])\ndata['enginePower'] = data['enginePower'].replace('7 N','7')\ndata['enginePower'] = data['enginePower'].apply(lambda x: int(x))","45c649be":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ndata.enginePower.hist().barh","fa34aeff":"#\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\nnum_cols.append('enginePower')","2be07fc0":"data['mileage'].value_counts()","da7f7096":"#\u041f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043d\u0435\u0440\u0430\u0437\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0438 \u0431\u0443\u043a\u0432\ndata['mileage'] = data['mileage'].apply(lambda x: str(x).replace('\u043a\u043c', '').replace('\\xa0', ''))\n\ndata['mileage'].unique()","42499531":"# \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u0442\u0438\u043f\u0443\ndata['mileage'] = data.mileage.apply(lambda x: int(\"\".join(filter(str.isdigit, x))))","68e8f076":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ndata['mileage'].hist(figsize=(5,5), bins=50)","69eb13b2":"#\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'mileage_cat'  \ndata[\"mileage_cat\"] = data[\"mileage\"].apply(lambda x: 4 if x>=40000 else(3 if x>=30000 else(2 if x>=20000 else (1 if x>=10000 else 0))))","a95b175c":"data.mileage_cat.value_counts()","9d4b0239":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\nnum_cols.append('mileage')\ncat_cols.append('mileage_cat')","dc7b4f35":"display(data.productionDate.value_counts())\n#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ndata['productionDate'].hist(figsize=(5,5), bins=50)","56e4f84f":"display(data.modelDate.value_counts())\n#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ndata['modelDate'].hist(figsize=(5,5), bins=50)","34876c5f":"#\u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043e\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043c\u043e\u0434\u0435\u043b\u0438\ndata['prod_age'] = 2021 - data.productionDate\ndata['model_age'] = 2021 - data.modelDate","736444bc":"#\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\nnum_cols.append('productionDate')\nnum_cols.append('modelDate')\nnum_cols.append('prod_age')\nnum_cols.append('model_age')","552eb50f":"display(data.model_name.value_counts())","224672bb":"cat_cols.append('model_name')","caf1cdc5":"data.numberOfDoors.value_counts() \n#\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a,\u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 \u0434\u043e\u043f.\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","77ede2d9":"cat_cols.append('numberOfDoors')","7adf3dc3":"data.vehicleTransmission.value_counts()","a5c1a372":"#\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ncat_cols.append('vehicleTransmission')","891b479c":"data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].value_counts()","d8aaaea6":"#\u043f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432\ndata['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].apply(lambda x: int(x[0])).astype('int32')","7c0d5dac":"data.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.value_counts()","fe690230":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442,\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\"\ncat_cols.append('\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b')","a6cdf6a6":"data.\u041f\u0422\u0421.value_counts()","716d33e3":"data.\u041f\u0422\u0421.isna().sum()","21bb56da":"data.\u041f\u0422\u0421 = data.\u041f\u0422\u0421.fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b')# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c","4ac21fbd":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u041f\u0422\u0421\ndata['\u041f\u0422\u0421'] = data['\u041f\u0422\u0421'].apply(lambda x: 1 if x == '\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b' else 0).astype('int8')","34c24fb2":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\nsns.countplot(x = '\u041f\u0422\u0421', data = data)","26a5c136":"#\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nbin_cols.append('\u041f\u0422\u0421')","8be16f1f":"data.\u041f\u0440\u0438\u0432\u043e\u0434.value_counts()","5ed17ec1":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\nsns.countplot(x = '\u041f\u0440\u0438\u0432\u043e\u0434', data = data)","6be08aef":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442,\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\"\ncat_cols.append('\u041f\u0440\u0438\u0432\u043e\u0434')","9b44e30b":"data.\u0420\u0443\u043b\u044c.value_counts()","63e1e370":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0420\u0443\u043b\u044c\ndata['\u0420\u0443\u043b\u044c'] = data['\u0420\u0443\u043b\u044c'].apply(lambda x: 1 if x == '\u041b\u0435\u0432\u044b\u0439' else 0).astype('int8')","4c12eba8":"sns.countplot(x = '\u0420\u0443\u043b\u044c', data = data)","7a7fa429":"#\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nbin_cols.append('\u0420\u0443\u043b\u044c')","528fe60a":"data.\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435.value_counts()","f92f2eb5":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\ndata['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'] = data['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'].apply(lambda x: 1 if x == '\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u043c\u043e\u043d\u0442\u0430' else 0).astype('int8')","d9d5ab0c":"data.\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435.value_counts()","67d339b1":"#\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nbin_cols.append('\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435')","cb696fca":"# \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u0442\u0438\u043f\u0443\ndata['price'] = data['price'].apply(lambda x: str(x))\ndata.price = data.price.apply(lambda x: (\"\".join(filter(str.isdigit, x)))).astype('int')\n","150547ec":"plt.figure()\nplt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 {'price'}\")\nsns.distplot(data.price, kde=False)","f2d23a07":"plt.figure(figsize=(10, 15))\nplt.scatter(np.log(data.price), data.brand)","91e78dcb":"plt.figure(figsize=(10, 15))\nplt.scatter(np.log(data.price), data.mileage)","59623673":"data = data.drop(columns = ['car_url','name','parsing_unixtime','vehicleConfiguration','priceCurrency','\u0422\u0430\u043c\u043e\u0436\u043d\u044f'], axis=1)","9e443172":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u044b\u0435 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\nfor colum in ['bodyType','color','model_name','brand','fuelType', 'vehicleTransmission','\u041f\u0440\u0438\u0432\u043e\u0434','real_photo']:\n    data[colum] = data[colum].astype('category').cat.codes","0d4e2251":"data.sample(5)","862ff330":"print('\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044be: {} \\n\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435: {}\\n\u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435: {}'.format(cat_cols, bin_cols,num_cols))","85b0883f":"for i in bin_cols:\n    display(data[i].value_counts())","1fbe9280":"#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\ndf = data[data['sample'] == 0]\nimp_cat = Series(mutual_info_classif(data[bin_cols], data['price'],\n                                     discrete_features =True), index = bin_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","c7ac170b":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\ntemp_df = data[data['sample'] == 1]\nimp_cat = Series(mutual_info_classif(data[cat_cols], data['price'],\n                                     discrete_features=True), index=cat_cols)\nimp_cat.sort_values(inplace=True)\nimp_cat.plot(kind='barh')","ad13e758":"imp_num = Series(f_classif(data[num_cols][data['sample'] == 1], data[data['sample'] == 1]['price'])[0], \n                 index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","2963c0f7":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\nfig, ax = plt.subplots(1, 1, figsize=(15, 15))\nax = sns.heatmap(data.corr(),fmt='.1g',\n                 annot=True, cmap='coolwarm')","7642b2f1":"train_data = data.query('sample == 1').drop(['sample'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample','price'], axis=1)\nX = train_data.drop(['price'], axis=1)\ny = train_data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","759cb370":"train_data","e617e52a":"tmp_train = X_train.copy()\ntmp_train['price'] = y_train","877f15cc":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c median \u043f\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c engineDisplacement \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\npredict = X_test['engineDisplacement'].map(tmp_train.groupby('engineDisplacement')['price'].median())\nVERSION = 1\n#\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict.values)) * 100:0.2f}%\")","901a1584":"linear_regr = LinearRegression().fit(X_train, np.log(y_train+1))\nVERSION = 2\npredict_test = np.exp(linear_regr.predict(X_test))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test)) * 100:0.2f}%\")","d7623688":"model = CatBoostRegressor(iterations = 5000,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          silent=True,\n                         )\nmodel.fit(X_train, y_train,\n         eval_set=(X_test, y_test),\n         verbose_eval=0,\n         use_best_model=True,\n         )\n\nmodel.save_model('catboost_single_model_baseline.model')","7d6d242e":"# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\npredict = model.predict(X_test)\npredict_submission = model.predict(test_data)\nVERSION = 3\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict)) * 100:0.2f}%\")","98c2fb0f":"model = CatBoostRegressor(iterations = 5000,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          silent=True,\n                         )\nmodel.fit(X_train, np.log(y_train),\n         eval_set=(X_test, np.log(y_test)),\n         verbose_eval=0,\n         use_best_model=True,\n         )\n\nmodel.save_model('catboost_single_model_2_baseline.model')\npredict_test = np.exp(model.predict(X_test))\npredict_submission = np.exp(model.predict(test_data))\nVERSION = 4\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test)) * 100:0.2f}%\")","82188cd6":"rf = RandomForestRegressor(random_state = RANDOM_SEED, n_jobs = -1, verbose = 1).fit(X_train, np.log(y_train+1))\npredict_submission = np.exp(rf.predict(test_data))\nVERSION = 5\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, np.exp(rf.predict(X_test)))) * 100:0.2f}%\")","bbf92b9e":"#\u0417\u0430\u0434\u0430\u0434\u0438\u043c \u0441\u0435\u0442\u043a\u0443 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0442\u044c\u0441\u044f:\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","72b6fb22":"#\u041e\u0431\u0443\u0447\u0438\u043c \u043d\u0430\u0448 \u043b\u0435\u0441:\n#rf = RandomForestRegressor(random_state=RANDOM_SEED).fit(X_train, np.log(y_train+1))\n#rf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid, n_iter=100, \n#                              cv=3, verbose=2, random_state=RANDOM_SEED, n_jobs=-1)\n#rf_random.fit(X_train, np.log(y_train+1))","41b3a577":"VERSION = 6\n#predict_submission = np.exp(rf_random.predict(test_data))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, np.exp(rf.predict(X_test)))) * 100:0.2f}%\")","b4d3cf45":"xb = xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5, learning_rate=0.03, max_depth=12, alpha=1, n_jobs=-1, n_estimators=1000)\nxb.fit(X_train, np.log(y_train+1))\nVERSION = 7\npredict_test = np.exp(xb.predict(X_test))\npredict_submission = np.exp(xb.predict(test_data))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test)) * 100:0.2f}%\")","b0283d4b":"sample_submission['price'] = np.round(predict_submission,-3).astype('int')\nsample_submission.to_csv(f'submission.csv', index=False)\nsample_submission.head()","7ab52a4d":"def regularise(X_train, y_train):\n    max_depth = [5, 10,15]\n    n_estimators = [100, 200,1000]\n    hyperparameters = dict(max_depth=max_depth, n_estimators=n_estimators)\n    model = GradientBoostingRegressor()\n    model.fit(X_train, y_train)\n\n    clf = GridSearchCV(model, hyperparameters)\n\n    best_model = clf.fit(X_train, y_train)\n\n    best_max_depth = best_model.best_estimator_.get_params()['max_depth']\n    best_n_estimators = best_model.best_estimator_.get_params()['n_estimators']\n\n    return best_max_depth, best_n_estimators","dd6dc9d9":"#best_max_depth, best_n_estimators = regularise(X_train, y_train)\n#best_max_depth, best_n_estimators","686c96bb":"gb = GradientBoostingRegressor(min_samples_split=2, learning_rate=0.03, max_depth=5, n_estimators=1000)\ngb.fit(X_train, np.log(y_train+1))\nVERSION = 8\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, np.exp(gb.predict(X_test))))*100:0.2f}%\")","646d55f7":"scaler = StandardScaler() \nX_train = scaler.fit_transform(X_train) \nX_test = scaler.transform(X_test) \n\n\ny_train = y_train \ny_test = y_test\n\ncv = KFold(n_splits=5, shuffle=True, random_state=RANDOM_SEED)\n\ndef compute_meta_feature(regr, X_train, X_test, y_train, cv):\n    X_meta_train = np.zeros_like(y_train, dtype=np.float32)    \n    splits = cv.split(X_train)\n    for train_fold_index, predict_fold_index in splits:\n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n\n        folded_regr = clone(regr)\n        folded_regr.fit(X_fold_train, y_fold_train)\n\n        X_meta_train[predict_fold_index] = folded_regr.predict(X_fold_predict)\n\n    meta_regr = clone(regr)\n    meta_regr.fit(X_train, y_train)\n\n    X_meta_test = meta_regr.predict(X_test)\n\n\n    return X_meta_train, X_meta_test\n\ndef generate_meta_features(regr, X_train, X_test, y_train, cv):\n    features = [compute_meta_feature(regr, X_train, X_test, y_train, cv) for regr in tqdm(regr)]    \n    stacked_features_train = np.vstack([features_train for features_train, features_test in features]).T\n    stacked_features_test = np.vstack([features_test for features_train, features_test in features]).T\n    return stacked_features_train, stacked_features_test\n\nX_train = np.where(np.isnan(X_train), 0, X_train)\nX_test = np.where(np.isnan(X_test), 0, X_test)\ny_train = np.where(np.isnan(y_train), 0, y_train)","a8472bdb":"regr = RandomForestRegressor(n_estimators=300, min_samples_split=2, min_samples_leaf=1, \n                             max_features=3, max_depth=19, bootstrap=True, random_state=RANDOM_SEED)\n\nstacked_features_train, stacked_features_test = generate_meta_features([\n                            regr,\n                            GradientBoostingRegressor(min_samples_split=2, learning_rate=0.03, max_depth=10, n_estimators=300),\n                            KNeighborsRegressor(n_neighbors=2, algorithm = 'ball_tree', weights = 'distance', p=1),\n                            RandomForestRegressor(random_state = RANDOM_SEED, n_jobs=-1, verbose=1, max_depth=5, n_estimators=200),\n                            ExtraTreesRegressor(random_state=RANDOM_SEED), \n                            RandomForestRegressor(random_state=RANDOM_SEED, max_depth=15) \\\n], X_train, X_test, y_train, cv)","03ea2380":"def compute_metric(regr, X_train, y_train, X_test, y_test): \n    regr.fit(X_train, y_train) \n    y_test_pred = regr.predict(X_test) \n    return np.round(mape(y_test, y_test_pred)*100, 2)\nVERSION = 9\n#print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {compute_metric(regr, stacked_features_train, y_train, stacked_features_test, y_test)}%\")","c4b33287":"sample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_2_v{VERSION}.csv', index=False)\nsample_submission.head()","c5920d81":"**model_name**","cdd8e159":"**enginePower**","d90acef4":"# CatBoost","db0ee67d":"# Random Forest","e1e5542f":"<img src=\"https:\/\/i.ibb.co\/R6yBZxM\/4.jpg\"\/>\n\n## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\n\n# \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435:\n* bodyType - \u0442\u0438\u043f \u043a\u0443\u0437\u043e\u0432\u0430\n* brand - \u043c\u0430\u0440\u043a\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \n* car_url - \u0430\u0434\u0440\u0435\u0441 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435\u043c \n* color - \u0446\u0432\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n* complectation_dict - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438 \u0430\u0432\u0442\u043e\n* description - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \n* engineDisplacement - \u043e\u0431\u044a\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\n* enginePower - \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\n* equipment_dict - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043e\u0441\u043d\u0430\u0449\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e \n* fuelType - \u0442\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \n* image - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \n* mileage - \u043f\u0440\u043e\u0431\u0435\u0433 \n* modelDate - \u0434\u0430\u0442\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\n* model_info - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043c\u043e\u0434\u0435\u043b\u0438\n* model_name - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n* name - \u0438\u043c\u044f\n* numberOfDoors - \u043a\u043e\u043b-\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\n* parsing_unixtime - \u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445\n* priceCurrency - \u0432\u0430\u043b\u044e\u0442\u0430\n* productionDate - \u0433\u043e\u0434 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430\n* sell_id\n* super_gen - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0434\u043e\u043f\u043e\u043b\u0438\u043d\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439\n* vehicleConfiguration - \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0433\u043e \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\n* vehicleTransmission - \u0442\u0440\u0430\u043d\u0441\u043c\u0438\u0441\u0441\u0438\u044f\n* vendor - \u0441\u0442\u0440\u0430\u043d\u0430-\u0438\u0437\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u0435\u043b\u044c\n* \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b - \u043a\u043e\u043b-\u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432\n* \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 - \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f\n* \u041f\u0422\u0421\n* \u041f\u0440\u0438\u0432\u043e\u0434\n* \u0420\u0443\u043b\u044c\n* \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n* \u0422\u0430\u043c\u043e\u0436\u043d\u044f","fa14d464":"\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435","790d5a35":"# Setup","ed667668":"**fuelType**","fc74fb25":"\u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u0438\u043c,\u0447\u0442\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u041f\u0422\u0421 \u0438 \u0420\u0443\u043b\u044c \u043d\u0430 \u0446\u0435\u043d\u0443","c7640b04":"# Stacking","c16a6149":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0446\u0435\u043d\u044b \u043e\u0442 \u043c\u0430\u0440\u043a\u0438 \u0430\u0432\u0442\u043e:","9ab9aacd":"**\u0420\u0443\u043b\u044c**","760c90fa":"**mileage**","a85e6078":"## Train Split","6c5d5815":"**engineDisplacement**","7dfc216b":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \"\u043d\u0430\u0438\u0432\u043d\u0443\u044e\" \u043c\u043e\u0434\u0435\u043b\u044c \n\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0446\u0435\u043d\u0443 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f (engineDisplacement). \nC \u043d\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.\n","10f2acdf":"# \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","09e1bf83":"\u0412\u044b\u044f\u0441\u043d\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043d\u0443\u0436\u0435\u043d \u0443\u0447\u0435\u0442 \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u0438.\n\u041f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 2020 \u0433\u043e\u0434\u0430 (all_auto_ru_09_09_2020.csv) \u0432\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u0446\u0435\u043d\u044b \u0432 2021 \u0433\u043e\u0434\u0443 \u0441\u0438\u043b\u044c\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c. \u041f\u0440\u0438\u0447\u0435\u043c \u0446\u0435\u043d\u044b \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0435 \u0431\u0440\u0435\u043d\u0434\u044b \u043c\u0435\u043d\u044f\u043b\u0438\u0441\u044c \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443. \n\u041c\u043e\u0436\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0431\u0440\u0435\u043d\u0434\u0443 \u0438 \u0443\u0437\u043d\u0430\u0442\u044c % \u0440\u043e\u0441\u0442\u0430. \u0417\u0430\u0442\u0435\u043c \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0446\u0435\u043d\u0443 \u0441\u043f\u0430\u0440\u0441\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 2021 \u0433\u043e\u0434\u0430 \u043d\u0430 \u044d\u0442\u043e\u0442 %","35b18222":"\u041a\u0440\u0430\u0442\u043a\u0438\u0439 \u0438\u0442\u043e\u0433: \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 37181 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439, \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 - 34686. \u0412\u0441\u0435\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 - 69181 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439. \u0418\u043c\u0435\u0435\u0442\u0441\u044f 28 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0418\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441: modelDate, numberOfDoors, productionDate,parsing_unixtime. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 - \u0442\u0438\u043f\u0430 Object. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 price, parsing_unixtime \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c \u0438\u0441\u0441\u043a\u0443\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a sample \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f.","42517a3c":"**\u041f\u0440\u0438\u0432\u043e\u0434**","6a5894b5":"**\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b**","7452646b":"**\u041f\u0422\u0421**","ae74006d":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","be04e6d0":"**numberOfDoors**","921d94b3":"# \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","819c8ffd":" \u0423\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430 \u043d\u0430\u0448 \u0432\u0437\u0433\u043b\u044f\u0434 \u043d\u0435 \u043d\u0435\u0441\u0443\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438,\u043b\u0438\u0431\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e:","3dbfcbf3":"# \u041a\u043e\u0434 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430","bfa8e64e":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0446\u0435\u043d\u044b \u043e\u0442 \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u0430\u0436\u0430","428e17c9":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c cars_list \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u0447\u0442\u043e \u0430\u0432\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0441 \u0446\u0435\u043d\u043e\u0439.","9a8064d5":"\u041b\u043e\u0433\u0438\u0447\u043d\u043e,\u0447\u0442\u043e \u0446\u0435\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u043c\u0430\u0440\u043a\u0438 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u0430\u0448\u0438\u043d\u044b","7fa8ec46":"# GradientBoosting \u0441 \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","77a81b9f":"### Log Target\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u0437\u044f\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442 \u0432 \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c - \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e np.log \u0438 np.exp).    ","af0cccda":"**color**","edc00a87":"\u041f\u0440\u043e\u0432\u0435\u0434\u044f \u0440\u044f\u0434 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:\n* CatBoost \u0438 GradientBoosting \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438, \u043d\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043b xgboost - 15.75%.\n* \u0417\u0430\u043c\u0435\u0442\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n* \u0442\u0430\u043a \u0436\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u043e\u043c \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0430-\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u043c\u0438.\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0441\u043f\u0430\u0440\u0441\u0438\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430\u0434 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0441\u043e\u0437\u0434\u0430\u0432 \u043d\u043e\u0432\u044b\u0435, \u043d\u043e \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u043f\u0440\u043e\u0435\u043a\u0442 \u0437\u0430\u0442\u044f\u043d\u0443\u043b - \u043d\u0435 \u0441\u0442\u0430\u043b \u0434\u0435\u043b\u0430\u0442\u044c.\n\u0414\u043e\u043b\u0433\u043e \u0440\u0430\u0437\u043e\u0431\u0438\u043f\u0430\u043b\u0441\u044f \u043f\u043e\u0447\u0435\u043c\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0430\u0431\u043c\u0438\u0448\u0435\u043d\u0430 132%, \u0445\u043e\u0442\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u0438 submission_2_v7 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0431\u044b\u043b\u0430 15.75%","a5ca99b5":"\u0412\u0438\u0434\u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 'engineDisplacement' \u0438 'enginePower', \u0430 \u0442\u0430\u043a \u0436\u0435 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438. \u0423\u0434\u0430\u043b\u044f\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c, \u0442\u043a \u043f\u0440\u043e\u0432\u0435\u0434\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e, \u0437\u0430\u043c\u0435\u0442\u0438\u043b\u0438 \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0445\u0443\u0436\u0435.","744055ec":"# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","cf0fece9":"# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","6e49c83c":"# Data","3d827e27":"**brand**","aff08b82":"**bodyType**","d2687bd8":"## Data Preprocessing","cfaeab0b":"**\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435**","5fc34b90":"\u0412\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0446\u0435\u043d\u0443","1621e6d6":"## Label Encoding","df9781dd":"**image**","4ddd2cb6":"**Description**","18b3efbc":"# xgboost","59ec18ea":"# Submission","34e368ef":"**productionDate \u0438 modelDate**","a087f3f2":"**\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439:**","ead49aa3":"**vehicleTransmission**"}}