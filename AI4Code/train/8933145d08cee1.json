{"cell_type":{"82fcfd74":"code","7dacb523":"code","04b521a7":"code","dde282dd":"code","46cca760":"code","92f2c701":"code","b10d63b9":"code","4e1b3d5b":"code","aacfdd06":"code","20c365f7":"code","e6d02ca3":"code","7db2a01f":"code","b84054f5":"code","14b4cbdd":"code","fa65ac95":"code","cde9981f":"code","1fdadf8f":"code","5091cd7e":"code","95253c22":"code","416570b9":"code","dfe2573d":"code","aa1d39e6":"code","4f48df96":"code","e57799ec":"markdown","3acabda0":"markdown","0b9e7412":"markdown","33063113":"markdown","a6a4f636":"markdown","52eb5417":"markdown","d0a31d4f":"markdown","fbc90185":"markdown","aef17e6b":"markdown","9d16195c":"markdown","a2e97009":"markdown","4968de13":"markdown"},"source":{"82fcfd74":"import pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.express as px","7dacb523":"confirmed_cases_file_link = \"https:\/\/raw.githubusercontent.com\/AbdelfattahMohamed\/COVID-20\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\ndeath_cases_file_link = \"https:\/\/raw.githubusercontent.com\/AbdelfattahMohamed\/COVID-20\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\nrecovered_cases_file_link = \"https:\/\/raw.githubusercontent.com\/AbdelfattahMohamed\/COVID-20\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"\n#datasets\/covid-19-master\/data\/countries-aggregated.csv\ncountry_cases_file_link = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\"","04b521a7":"confirmed_df = pd.read_csv(confirmed_cases_file_link)\nprint(confirmed_df.shape)\ndeath_df = pd.read_csv(death_cases_file_link)\nprint(death_df.shape)\nrecovered_df = pd.read_csv(recovered_cases_file_link)\nprint(recovered_df.shape)\ncases_country_df = pd.read_csv(country_cases_file_link)\nprint(cases_country_df.shape)","dde282dd":"confirmed_df.columns","46cca760":"confirmed_df[confirmed_df[\"Country\/Region\"] == \"Egypt\"]","92f2c701":"confirmed_df[\"Country\/Region\"].nunique()","b10d63b9":"confirmed_df = confirmed_df.replace(np.nan, '', regex = True)\ndeath_df = death_df.replace(np.nan, '', regex = True)\nrecovered_df = recovered_df.replace(np.nan, '', regex = True)\ncases_country_df = cases_country_df.replace(np.nan, '', regex = True)","4e1b3d5b":"confirmed_df.columns","aacfdd06":"cases_country_df.columns","20c365f7":"global_data = cases_country_df.copy().drop(['Lat', 'Long_', 'Country_Region', 'Last_Update'], axis = 1)\nglobal_summary = pd.DataFrame(global_data.sum()).transpose()\nglobal_summary.style.format(\"{:,.0f}\")\nglobal_summary.style.format({\"\": \"${:20,.0f}\", \n                          \"\": \"${:20,.0f}\", \n                          \"\": \"${:20,.0f}\",\n                          \"\":\"${:20,.0f}\"})\\\n                 .format({\"\": lambda x:x.lower(),\n                          \"\": lambda x:x.lower()})\\\n                 .hide_index()\\\n                 .background_gradient(cmap='Blues')\n","e6d02ca3":"confirmed_SouthAfrica = cases_country_df[cases_country_df['Country_Region'] == \"South Africa\"]\nconfirmed_SouthAfrica = confirmed_SouthAfrica.drop(['Lat', 'Long_', 'Country_Region', 'Last_Update'], axis = 1)\nSA_Summary = pd.DataFrame(confirmed_SouthAfrica.sum()).transpose()\nSA_Summary.style.format({\"\": \"${:20,.0f}\", \n                          \"\": \"${:20,.0f}\", \n                          \"\": \"${:20,.0f}\",\n                          \"\":\"${:20,.0f}\"})\\\n                 .format({\"\": lambda x:x.lower(),\n                          \"\": lambda x:x.lower()})\\\n                 .hide_index()\\\n                 .background_gradient(cmap='Blues')\n","7db2a01f":"confirmed_cp = confirmed_df.copy().drop(['Province\/State','Long','Lat','Country\/Region'], axis = 1)\n#confirmed_cp.head()\nconfirmed_ts_summary = confirmed_cp.sum()\n#confirmed_ts_summary.head()","b84054f5":"fig = go.Figure(data=go.Scatter(x=confirmed_ts_summary.index,\n                                y=confirmed_ts_summary.values,\n                                mode='lines+markers')) # hover text goes here\n\nfig.update_layout(title='Total COVID_19 Confirmed Cases (Globally)',\n                  yaxis_title = 'Confirmed Cases',\n                  \n                  xaxis_tickangle = 300)\nfig.show()","14b4cbdd":"# Intialize color array to be used across the analysis\ncolor_arr = px.colors.qualitative.Dark24","fa65ac95":"def draw_plot(ts_array,\n              ts_label,\n              title,\n              colors,\n              mode_size,\n              line_size,\n              x_axis_title,\n              y_axis_title,\n              tickangle = 0,\n              yaxis_type=\"\",\n              additional_annotations=\"\"\n             ):\n\n    # Intialize figure\n    fig = go.Figure()\n    #add all traces\n    for index, ts in enumerate(ts_array):\n        fig.add_trace(go.Scatter(\n                                x = ts.index,\n                                y = ts.values,\n                                name = ts_label[index],\n                                line = dict(color = colors[index], width = line_size[index]),\n                                connectgaps=True\n                                ))\n    # base x_axis prop.\n    x_axis_dict = dict(\n                       showline = True,\n                       showgrid = True,\n                       showticklabels=True,\n                       linecolor='rgb(204,204,204)',\n                       linewidth=2,\n                       ticks='outside',\n                       tickfont = dict(family = 'Arial',size = 12,color='rgb(204,204,204)')\n                      )\n    # Setting x_axis params\n    if x_axis_title:\n        x_axis_dict['title'] = x_axis_title\n        \n    if tickangle > 0:\n        x_axis_dict['tickangle'] = tickangle\n        \n    # Base y_axis prop \n    y_axis_dict = dict(\n                        showline = True,\n                        showgrid = True,\n                        showticklabels=True,\n                        linecolor = 'rgb(204,204,204)',\n                        linewidth=2\n    )\n    # Setting y_axis prop\n    if yaxis_type != \"\":\n        y_axis_dict['type'] = yaxis_type\n    \n    if y_axis_title:\n        y_axis_dict['title'] = y_axis_title\n        \n    # Updating the layout\n    fig.update_layout(xaxis = x_axis_dict,\n                      yaxis = y_axis_dict,\n                      autosize=True,\n                      margin = dict(autoexpand=True,l=100,r=20,t=110),\n                      showlegend = True,\n                      \n                        )\n    # Base annotations for any graph\n    annotations = []\n    # Title\n    annotations.append(dict(xref='paper',yref='paper',x=0.0,y=1.05,xanchor='left',yanchor='bottom',\n                            text=title,\n                            font=dict(family='Impact',size=18,color='#072F39'),\n                            showarrow=False,\n                           ))\n    # Adding annotations in params\n    if len(additional_annotations) > 0:\n        annotations.append(additional_annotations)\n    # Updating the layout\n    fig.update_layout(annotations=annotations)\n    \n    return fig","cde9981f":"confirmed_agg_ts = confirmed_df.copy().drop(['Province\/State','Long','Lat','Country\/Region'],\n                                            axis = 1).sum()\ndeath_agg_ts = death_df.copy().drop(['Province\/State','Long','Lat','Country\/Region'],\n                                             axis = 1).sum()\nrecovered_agg_ts = recovered_df.copy().drop(['Province\/State','Long','Lat','Country\/Region'],\n                                             axis = 1).sum ()\n# There is no timeseries data for Active cases, therefore it needs to be engineered separately\nactive_agg_ts = pd.Series(\n                  data=np.array(\n                        [x1 - x2 - x3 for (x1,x2,x3) in zip(confirmed_agg_ts.values,\n                                                                death_agg_ts.values,\n                                                                recovered_agg_ts.values)]),\n                        index=confirmed_agg_ts.index)\n#plot and add traces for all the aggregrated timeseries","1fdadf8f":"ts_array=[confirmed_agg_ts,active_agg_ts,recovered_agg_ts, death_agg_ts]\nlabels = ['Confirmed','Active','Recovered','Deaths']\ncolors = [color_arr[5],color_arr[0], color_arr[2], color_arr[3]]\nmode_size = [8,8,12,8]\nline_size = [2,2,4,2]\n# Calling the draw plot function defined above\nfig_2 = draw_plot(\n                ts_array=ts_array,\n                ts_label=labels,\n                title = \"(COVID_19) case status from 22\/1\/2020 to 21\/4\/2020\",\n                colors=colors,\n                mode_size=mode_size,\n                line_size=line_size,\n                x_axis_title = \"Date\",\n                y_axis_title = \"Case Count\",\n                tickangle = 315,\n                yaxis_type = \"\",\n                additional_annotations=[]\n                )\n\nfig_2.show()","5091cd7e":"from IPython.display import HTML\nHTML('<img src=\"India-States.gif\" height=\"600\" width=\"400\">')","95253c22":"cases_country_df.copy().drop(\n    ['Lat','Long_','Last_Update'],axis = 1).sort_values('Confirmed', ascending=False).reset_index(drop=True).style.bar(\n    align=\"left\",width=98,color=\"#000\")\n                ","416570b9":"cases_country_df.copy().drop(\n    ['Lat','Long_','Last_Update','People_Tested','People_Hospitalized'],axis = 1).sort_values('Recovered', ascending=False).reset_index(drop=True).style.bar(\n    align=\"left\",width=98,color=\"#FF3333\")\n","dfe2573d":"# Confirmed Cases\nconfirmed_Egypt_ts = confirmed_df[confirmed_df['Country\/Region'] == \"Egypt\"]\nconfirmed_Egypt_ts = confirmed_Egypt_ts.drop(\n    ['Lat','Long','Country\/Region','Province\/State'],axis = 1).reset_index(drop=True).sum()\n# Deaths Casse\ndeaths_Egypt_ts = death_df[death_df['Country\/Region'] == \"Egypt\"]\ndeaths_Egypt_ts = deaths_Egypt_ts.drop(['Lat','Long','Country\/Region','Province\/State'],\n                                             axis = 1).reset_index(drop=True).sum()\n# Recovered Cases\nrecovered_Egypt_ts = recovered_df[recovered_df['Country\/Region'] == \"Egypt\"]\nrecovered_Egypt_ts = recovered_Egypt_ts.drop(['Lat','Long','Country\/Region','Province\/State'],\n                                             axis = 1).reset_index(drop=True).sum()\n# Active Cases\nactive_Egypt_ts = pd.Series(\n                  data=np.array(\n                        [x1 - x2 - x3 for (x1,x2,x3) in zip(confirmed_agg_ts.values,\n                                                                death_agg_ts.values,\n                                                                recovered_agg_ts.values)]),\n                        index=confirmed_agg_ts.index)","aa1d39e6":"ts_array=[confirmed_Egypt_ts,active_Egypt_ts,recovered_Egypt_ts, deaths_Egypt_ts]\nlabels = ['Confirmed','Active','Recovered','Deaths']\ncolors = [color_arr[5],color_arr[0], color_arr[2], color_arr[3]]\nmode_size = [8,8,12,8]\nline_size = [2,2,4,2]\n# Calling the draw plot function defined above\nfig_2 = draw_plot(\n                ts_array=ts_array,\n                ts_label=labels,\n                title = \"(COVID_19) In EGYPT status from 22\/1\/2020 to 21\/4\/2020 (\u0645\u0635\u0631)\",\n                colors=colors,\n                mode_size=mode_size,\n                line_size=line_size,\n                x_axis_title = \"Date\",\n                y_axis_title = \"Case Count\",\n                tickangle = 315,\n                yaxis_type = \"\",\n                additional_annotations=[]\n                )\n\nfig_2.show()","4f48df96":"ts_array=[confirmed_Egypt_ts[39:],active_Egypt_ts[39:],recovered_Egypt_ts[39:], deaths_Egypt_ts]\nlabels = ['Confirmed','Active','Recovered','Deaths']\ncolors = [color_arr[5],color_arr[0], color_arr[2], color_arr[3]]\nmode_size = [8,8,12,8]\nline_size = [2,2,4,2]\n# Calling the draw plot function defined above\nfig_2 = draw_plot(\n                ts_array=ts_array,\n                ts_label=labels,\n                title = \"(COVID_19) In EGYPT status from 22\/1\/2020 to 21\/4\/2020 (\u0645\u0635\u0631)\",\n                colors=colors,\n                mode_size=mode_size,\n                line_size=line_size,\n                x_axis_title = \"Date\",\n                y_axis_title = \"Case Count\",\n                tickangle = 315,\n                yaxis_type = \"\",\n                additional_annotations=[]\n                )\n\nfig_2.show()","e57799ec":"##### Chart_2: COVID_19 Case Status","3acabda0":" ##### Defining a template plot function & color array","0b9e7412":"###### Sort by Recovered Cases","33063113":"###### Viewing the columns in the dataframes - Timeseries","a6a4f636":"#### Exploratory Analysis\n\n###### For case count - Global Summary","52eb5417":"###### South Africa","d0a31d4f":"### Egypt Cases COVID_19","fbc90185":"###### Modeling & Prediction","aef17e6b":"##### For country Level Drill Down\n###### Sort by Confirmed Cases","9d16195c":"###### Inputing data","a2e97009":"## For Chart 1 : Total COVID_19 cases (Globally)","4968de13":"###### Global"}}