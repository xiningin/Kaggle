{"cell_type":{"fc332539":"code","ac2db97f":"code","1df0d35d":"code","1c23720d":"code","54dc6701":"code","59650984":"code","f02e84e9":"code","540ebb7b":"code","45a2667b":"code","89a7da2e":"code","c8fe6fdf":"code","6ff819e2":"code","06339a13":"code","717efe65":"code","4ea2aee9":"code","9f1626c2":"code","9c9b867d":"code","30c31f47":"markdown","439a5b85":"markdown","77a14205":"markdown","1ac2884a":"markdown","8e6f50ee":"markdown","007bf4cc":"markdown","8a1428cf":"markdown","520d6367":"markdown","ee05bd03":"markdown","0998a71a":"markdown","57c0cd1f":"markdown","e90a2122":"markdown","c67d0a9c":"markdown"},"source":{"fc332539":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ac2db97f":"!unzip ..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip","1df0d35d":"train = pd.read_csv('.\/train.csv')\ntrain.head()","1c23720d":"# https:\/\/www.kaggle.com\/subinium\/dark-mode-visualization-apple-version\n\nfrom cycler import cycler\n\nraw_light_palette = [\n    (0, 122, 255), # Blue\n    (255, 149, 0), # Orange\n    (52, 199, 89), # Green\n    (255, 59, 48), # Red\n    (175, 82, 222),# Purple\n    (255, 45, 85), # Pink\n    (88, 86, 214), # Indigo\n    (90, 200, 250),# Teal\n    (255, 204, 0)  # Yellow\n]\n\nraw_dark_palette = [\n    (10, 132, 255), # Blue\n    (255, 159, 10), # Orange\n    (48, 209, 88),  # Green\n    (255, 69, 58),  # Red\n    (191, 90, 242), # Purple\n    (94, 92, 230),  # Indigo\n    (255, 55, 95),  # Pink\n    (100, 210, 255),# Teal\n    (255, 214, 10)  # Yellow\n]\n\nraw_gray_light_palette = [\n    (142, 142, 147),# Gray\n    (174, 174, 178),# Gray (2)\n    (199, 199, 204),# Gray (3)\n    (209, 209, 214),# Gray (4)\n    (229, 229, 234),# Gray (5)\n    (242, 242, 247),# Gray (6)\n]\n\nraw_gray_dark_palette = [\n    (142, 142, 147),# Gray\n    (99, 99, 102),  # Gray (2)\n    (72, 72, 74),   # Gray (3)\n    (58, 58, 60),   # Gray (4)\n    (44, 44, 46),   # Gray (5)\n    (28, 28, 39),   # Gray (6)\n]\n\n\nlight_palette = np.array(raw_light_palette)\/255\ndark_palette = np.array(raw_dark_palette)\/255\ngray_light_palette = np.array(raw_gray_light_palette)\/255\ngray_dark_palette = np.array(raw_gray_dark_palette)\/255\n\nmpl.rcParams['axes.prop_cycle'] = cycler('color',dark_palette)\nmpl.rcParams['figure.facecolor']  = gray_dark_palette[-2]\nmpl.rcParams['figure.edgecolor']  = gray_dark_palette[-2]\nmpl.rcParams['axes.facecolor'] =  gray_dark_palette[-2]\n\nwhite_color = gray_light_palette[-2]\nmpl.rcParams['text.color'] = white_color\nmpl.rcParams['axes.labelcolor'] = white_color\nmpl.rcParams['axes.edgecolor'] = white_color\nmpl.rcParams['xtick.color'] = white_color\nmpl.rcParams['ytick.color'] = white_color\n\nmpl.rcParams['figure.dpi'] = 200\n\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False","54dc6701":"train.describe()","59650984":"from termcolor import colored, cprint\n\nprint(colored('hello', 'red'), colored('world', 'green'))\nprint(colored(\"hello red world\", 'red'))","f02e84e9":"def word_highligt(txt, word, color=None, highlight=None, attr=None):\n    if isinstance(word, str):\n        txt = txt.replace(word, colored(word, color, highlight))\n    else : \n        if not isinstance(color, list): \n            color = [color] * len(word)\n        if not isinstance(highlight, list):\n            highlight = [highlight] * len(word)\n        for w, c, h in zip(word, color, highlight):\n            txt = txt.replace(w, colored(w, c, h))\n    return txt","540ebb7b":"print(word_highligt(train.iloc[1]['comment_text'], 'with', None, 'on_red'))","45a2667b":"print(word_highligt(train.iloc[1]['comment_text'], ['with', 'Thanks'], 'red', None))","89a7da2e":"print(word_highligt(train.iloc[1]['comment_text'], ['with', 'Thanks'], [None, 'cyan'], ['on_red', None]))","c8fe6fdf":"from IPython.core.display import HTML\nHTML(\"<span style='color:red'>hello<\/span> word\")","6ff819e2":"def word_highligt_html(txt, word, color='black', highlight=None, attr=None):\n    if isinstance(word, str):\n        txt = txt.replace(word, f'<span style=\"color: {color}; background-color:{highlight}\">{word}<\/span>')\n    else : \n        if not isinstance(color, list): \n            color = [color] * len(word)\n        if not isinstance(highlight, list):\n            highlight = [highlight] * len(word)\n        for w, c, h in zip(word, color, highlight):\n\n            txt = txt.replace(w, f'<span style=\"color: {c}; background-color:{h}\">{w}<\/span>')\n    return txt","06339a13":"HTML(word_highligt_html(train.iloc[1]['comment_text'], ['with', 'Thanks'], ['red', 'white'],  [None, '#B19CD9']))","717efe65":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom umap import UMAP\n\ntfidf = TfidfVectorizer() \n\ntrain = train.sample(10000)\ndocs = tfidf.fit_transform(train['comment_text'])\ntarget = train['toxic']","4ea2aee9":"umap = UMAP(random_state=0)\ndr = umap.fit_transform(docs, target)","9f1626c2":"color = [dark_palette[0] if i==0 else dark_palette[1] for i in target]","9c9b867d":"fig = plt.figure(figsize=(12, 12))\nax = fig.add_subplot(111)\nax.axis('off')\n\nax.scatter(x=dr[:,0], y=dr[:,1], s=10, alpha=0.05, c=color)\nax.set_title('TFIDF Dimension Reduction', loc='left', fontsize=20, fontweight='bold')\n\nfig.tight_layout()\nplt.show()","30c31f47":"- Text Color\n    - grey\n    - red\n    - green\n    - yellow\n    - blue\n    - magenta\n    - cyan\n    - white\n \n- Text highlights\n    * on_grey\n    * on_red\n    * on_green\n    * on_yellow\n    * on_blue\n    * on_magenta\n    * on_cyan\n    * on_white","439a5b85":"- Case 2 : 2 or more words highlihgt with different color","77a14205":"### I-2. Highlight your output (html)\n\nThe notebook can output the result as HTML. You can use this to highlight a variety of colors.","1ac2884a":"Now you can pass color with rgb hex code.","8e6f50ee":"## Reference\n\n- https:\/\/textvis.lnu.se\/\n- https:\/\/jehyunlee.github.io\/2021\/02\/11\/Python-DS-61-mpl_colormapkde\/ (korean document)\n\n### Futher Readings\n\nMore text data analysis library.\n\n- LIT : https:\/\/github.com\/PAIR-code\/lit\n    - interactive model-understanding tool for NLP models\n- Ecco : https:\/\/www.eccox.io\/\n    - Ecco is a python library that creates interactive visualizations allowing you to explore what your NLP Language Model is thinking.\n- https:\/\/github.com\/jbesomi\/texthero\n- https:\/\/github.com\/bmabey\/pyLDAvis\n- https:\/\/github.com\/JasonKessler\/scattertext\n- https:\/\/github.com\/ryanjgallagher\/shifterator","007bf4cc":"Using Word2Vec and Dimension Reduction, you can check whether text data is clustered.\n\nI used **TF-IDF** to convert the text of the document to a vector for quick execution, and then I used **UMAP** to reduce the dimensions.\n\nTo turn a document into a vector, you can use **word2vec, fasttext** (gensim) to average the word weights of the text, or you can use a nlp model to extract the vector.\n\n- https:\/\/github.com\/RaRe-Technologies\/gensim\/blob\/develop\/gensim\/models\/doc2vec.py\n- https:\/\/github.com\/jhlau\/doc2vec","8a1428cf":"# How to Visualized Text Dataset?\n\n![](https:\/\/images.unsplash.com\/photo-1475154404624-07909433bbfb?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1266&q=80)\n\n> Please leave a reference when using code or taking ideas in my visualizations.\n\nWhen proceeding with text data EDA, I wonder what kind of visualization can be done except for word distribution and wordcloud.\n\nI would like to introduce you to various ways to visualize text.\n\n## Import Library & Dataset","520d6367":"You can see that the trend comes out with just tf-idf + umap.","ee05bd03":"## I. Highlight is all you need.\n\nWhen reading a document, highlighting is the best way to highlight the areas you want to see.\n\nIf you have a word you want to see or a part of speech you want to see, use it to highlight it,\n\nIf there is a weight for each word, you can use it to highlight it. Depending on the weight type, you can select divergent or continuous type.\n\n### I-1. Highlight your output (console)\n\n- https:\/\/stackoverflow.com\/questions\/287871\/how-to-print-colored-text-to-the-terminal\n    - https:\/\/github.com\/ikalnytskyi\/termcolor\n    - https:\/\/github.com\/feluxe\/sty\n    - https:\/\/github.com\/erikrose\/blessings\n    - https:\/\/github.com\/willmcgugan\/rich\n\nFor explain, I use `termcolor` library.\n","0998a71a":"- Case 1 : single word highlihgt","57c0cd1f":"- dataset source : https:\/\/www.kaggle.com\/c\/jigsaw-toxic-comment-classification-challenge","e90a2122":"## II. Word\/Doc as Vector","c67d0a9c":"- Case 2 : 2 or more words highlihgt with single color"}}