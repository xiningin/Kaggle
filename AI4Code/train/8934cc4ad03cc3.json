{"cell_type":{"00c451db":"code","d3f67e04":"code","a88c24af":"code","1c2e69c7":"code","a6c57a39":"code","ec60052e":"code","348902dd":"code","59bd0db7":"code","67440f67":"code","86c6f4ec":"code","7fa889c7":"code","4cd89b81":"code","f64ff045":"code","209abfd6":"code","b4948533":"code","490438cb":"code","8e1aab7d":"code","05b67700":"code","e807d7fe":"code","6dd98d1a":"code","43ed3894":"code","d984c298":"code","72102d22":"code","54837905":"code","abf06d02":"code","cb6ccd32":"code","6331313c":"code","27c38701":"markdown","83bc2959":"markdown","4c9a09cd":"markdown","1df4642a":"markdown"},"source":{"00c451db":"import pandas as pd\nimport missingno\nimport matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns","d3f67e04":"plt.style.use('ggplot')\nwarnings.simplefilter('ignore')","a88c24af":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\n\nfrom yellowbrick.regressor import PredictionError\nfrom yellowbrick.regressor import ResidualsPlot\nfrom yellowbrick.regressor import CooksDistance\n\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor, XGBRFRegressor","1c2e69c7":"df = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')\ndf.head()","a6c57a39":"df.sex = df.sex.replace(['male','female'],['Male','Female'])\ndf.smoker = df.smoker.replace(['yes','no'],['Yes','No'])","ec60052e":"df.info()","348902dd":"df.describe()","59bd0db7":"pd.DataFrame(df.groupby(\"region\")[\"age\",\"charges\",\"bmi\",\"children\"].mean().sort_values(\"age\",ascending=False)[:10]).style.background_gradient(\"Reds\")","67440f67":"pd.DataFrame(df.groupby(\"sex\")[\"age\",\"charges\",\"bmi\",\"children\"].mean().sort_values(\"age\",ascending=False)[:10]).style.background_gradient(\"Reds\")","86c6f4ec":"pd.DataFrame(df.groupby(\"smoker\")[\"age\",\"charges\",\"bmi\",\"children\"].mean().sort_values(\"age\",ascending=False)[:10]).style.background_gradient(\"Reds\")","7fa889c7":"pd.DataFrame(df.groupby(\"children\")[\"age\",\"charges\",\"bmi\"].mean().sort_values(\"age\",ascending=False)[:10]).style.background_gradient(\"Reds\")","4cd89b81":"missingno.matrix(df);","f64ff045":"plt.figure(figsize=(13,10))\nplt.subplot(2,2,1)\nlabel  = df.sex.value_counts().index\nsize   = df.sex.value_counts().values\nplt.pie(x=size,autopct='%1.1f%%',shadow=False, textprops={'color':\"k\",\"fontsize\":14}, startangle=90,explode=(0,.1),\n       colors=['teal','pink'])\nplt.legend(label,bbox_to_anchor=(0.4, 0, .85, 1))\nplt.subplot(2,2,2)\nlabel  = df.smoker.value_counts().index\nsize   = df.smoker.value_counts().values\nplt.pie(x=size,autopct='%1.1f%%',shadow=False, textprops={'color':\"w\",\"fontsize\":14}, startangle=90,explode=(0,.1),\n       colors=['green','orange'])\nplt.legend(label,bbox_to_anchor=(0.8, -0.04, 0.4, 1))\nplt.subplot(2,2,(3,4))\nsns.countplot(data = df, x = 'sex', hue = 'smoker')\nplt.xlabel('Sex')\nplt.ylabel('')\nplt.show()","209abfd6":"plt.figure(figsize=(13,10))\nplt.subplot(2,2,1)\nsns.boxplot(data = df, x = 'sex', y = 'age')\nplt.subplot(2,2,2)\nsns.boxplot(data = df, x = 'sex', y = 'charges')\nplt.subplot(2,2,(3,4))\nsns.scatterplot(data = df, x = 'age', y = 'charges', hue = 'sex', edgecolor = 'k')\nplt.legend(loc='upper left')\nplt.show()","b4948533":"plt.figure(figsize=(13,10))\nplt.subplot(2,2,1)\nsns.violinplot(data = df, x = 'sex', y = 'bmi')\nplt.subplot(2,2,2)\nsns.violinplot(data = df, x = 'smoker', y = 'bmi')\nplt.subplot(2,2,3)\nsns.scatterplot(data = df, x = 'bmi', y = 'charges', hue = 'sex', edgecolor = 'k')\nplt.legend(loc='upper left')\nplt.subplot(2,2,4)\nsns.scatterplot(data = df, x = 'bmi', y = 'age', hue = 'sex', edgecolor = 'k')\nplt.show()","490438cb":"plt.figure(figsize=(13,10))\nplt.subplot(2,2,1)\nsns.distplot(df.age, color='C0')\nplt.subplot(2,2,2)\nsns.distplot(df.charges, color='C1')\nplt.subplot(2,2,3)\nsns.distplot(df.bmi, color='C2')\nplt.subplot(2,2,4)\nsns.distplot(df.children, color='C4')\nplt.show()","8e1aab7d":"plt.figure(figsize=(13,5))\ndf.groupby(['sex','smoker'])['charges'].mean().plot(kind=\"barh\")\nplt.xlabel('Average of Charges')\nplt.show()","05b67700":"plt.figure(figsize=(13,7))\ndf.groupby(['sex','smoker'])['region'].value_counts().plot(kind=\"barh\")\nplt.xlabel('Average of Age')\nplt.show()","e807d7fe":"X = df.drop(['charges','region'],axis=1)\nregion = pd.get_dummies(df.region)\nX.sex = X.sex.replace(['Female','Male'],[0,1])\nX.smoker = X.smoker.replace(['No','Yes'],[0,1])\nX  = pd.concat([X,region], axis=1)\nscale = StandardScaler()\nscale.fit(X)\nX = scale.transform(X)\ny = df.charges\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state=123)","6dd98d1a":"visualizer = CooksDistance()\nvisualizer.fit(X, y)\nvisualizer.show();","43ed3894":"model = LinearRegression()\nmodel.fit(X_train,y_train)\nprint(\"Score Test:\",model.score(X_test,y_test))\npred_br = model.predict(X_test)\nprint(\"MAE:\",mean_absolute_error(y_test,pred_br))\nprint(\"MSE:\",mean_squared_error(y_test,pred_br))\n\nvisualizer = PredictionError(model)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)        \nvisualizer.show(); \n\nvisualizer = ResidualsPlot(model)\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();","d984c298":"model = Lasso()\nmodel.fit(X_train,y_train)\nprint(\"Score Test:\",model.score(X_test,y_test))\npred_br = model.predict(X_test)\nprint(\"MAE:\",mean_absolute_error(y_test,pred_br))\nprint(\"MSE:\",mean_squared_error(y_test,pred_br))\n\nvisualizer = PredictionError(model)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)        \nvisualizer.show(); \n\nvisualizer = ResidualsPlot(model)\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();","72102d22":"model = Ridge()\nmodel.fit(X_train,y_train)\nprint(\"Score Test:\",model.score(X_test,y_test))\npred_br = model.predict(X_test)\nprint(\"MAE:\",mean_absolute_error(y_test,pred_br))\nprint(\"MSE:\",mean_squared_error(y_test,pred_br))\n\nvisualizer = PredictionError(model)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)        \nvisualizer.show(); \n\nvisualizer = ResidualsPlot(model)\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();","54837905":"model = MLPRegressor()\nmodel.hidden_layer_sizes = (20,40,20)\nmodel.activation = 'relu'\nmodel.solver = 'adam'\nmodel.max_iter = 500\nmodel.alpha = 0.01\n\nmodel.fit(X_train,y_train)\nprint(\"Score Test:\",model.score(X_test,y_test))\npred_br = model.predict(X_test)\nprint(\"MAE:\",mean_absolute_error(y_test,pred_br))\nprint(\"MSE:\",mean_squared_error(y_test,pred_br))\n\nvisualizer = PredictionError(model)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)        \nvisualizer.show(); \n\nvisualizer = ResidualsPlot(model)\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();","abf06d02":"model = RandomForestRegressor()\nmodel.fit(X_train,y_train)\nprint(\"Score Test:\",model.score(X_test,y_test))\npred_br = model.predict(X_test)\nprint(\"MAE:\",mean_absolute_error(y_test,pred_br))\nprint(\"MSE:\",mean_squared_error(y_test,pred_br))\n\nvisualizer = PredictionError(model)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)        \nvisualizer.show(); \n\nvisualizer = ResidualsPlot(model)\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();","cb6ccd32":"model = XGBRegressor()\nmodel.fit(X_train,y_train)\nprint(\"Score Test:\",model.score(X_test,y_test))\npred_br = model.predict(X_test)\nprint(\"MAE:\",mean_absolute_error(y_test,pred_br))\nprint(\"MSE:\",mean_squared_error(y_test,pred_br))\n\nvisualizer = PredictionError(model)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)        \nvisualizer.show(); \n\nvisualizer = ResidualsPlot(model)\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();","6331313c":"model = XGBRFRegressor()\nmodel.fit(X_train,y_train)\nprint(\"Score Test:\",model.score(X_test,y_test))\npred_br = model.predict(X_test)\nprint(\"MAE:\",mean_absolute_error(y_test,pred_br))\nprint(\"MSE:\",mean_squared_error(y_test,pred_br))\n\nvisualizer = PredictionError(model)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)        \nvisualizer.show(); \n\nvisualizer = ResidualsPlot(model)\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();","27c38701":"<h1><center>Medical Cost Personal Datasets<\/center><\/h1>\n\n<center><img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAASUAAACsCAMAAAAKcUrhAAABOFBMVEX+trnwYGDbWVk00bQ0SV7+tLf\/0tTdn6AWoIb\/u71yp5b\/ubwAn4Ps8PHd4eL7trgou5+orKPpp6kuxqkZQFclQ1r\/\/\/8uR1whQlnaVVUtPlDxra\/vW1uSeITdo6jsrLAcqI6phY\/8qKrIl571gYLxaGjw5eZaW2zaoaeCcH29kZmdfolyZ3ZGUWW93dj08vTzcXHylpjgZ2fkcnP5k5QTPE\/mXVz019l6bHpVWGois5ecz8Pm9PE2QVs02LhoYnLmeXrrhYb0eXr7oqWwUVbVWFg5QFFvR1PZSUgAJz7EzNBidYCOTVdiRVOoUlnAV1v6w8X44eKBjJfCr6lP1LqU39DM6uV31sOp49jQ392cpa1Frphxvq2v2M8ZNVBhbnyesrZuvKo1h4Q1Ym40VGQsZGkdjXwHeXBOJkTKAAALEUlEQVR4nO2dDVfbOBaGDdhdtEowHezY5JMkJYRAoFBC+WqhQOejnd2ZdhnawkB3dmd3\/v8\/WF3JduzYsp3MkhDJ7znT004TjvWce19dSdatomTKlClTpkyZMk1EGGOt0dAwnvSDPGJhfHE2u0y0e9ZAk36Yxyq0QxDNUhFQjSyeIoS1Fw4iB9QbaTFhpqi\/acwGIBFMu2N\/vEch3Nh7dn5+\/mwnbM94Z4ARxaRN5DEnKtx4Xi6XZ2bIL+XnO0FOUZAAk3RJh58RQp7KM3s+TvgiChLBdCbbVPfcDwk4rV64CHAjGhLBtCNVNOFBSMDpmeIw4DACTJN97PEKn4chQTjRogi\/4IWSXPUA3ouCBJwuMMe5PUzyzHMaBxLBtIc0DqS3l5dv9yUKpuD0NojpjEPp216v993b5VlZpjl+KAEmDqTLXrFY7BV3v29M+vHHI64rMXEMiVIq\/vDuG0lSDq\/GQZrZ52D6jmRc730+\/0EO\/27EhhKX0j7Y95tWPt+SARNLuDIXFY8S1fLyy3z+pQSYYIYrz\/74t0sepzhKBBOJJgmmOfx8pvz3Xq\/YezsKJbLilSLn8GqZzeo\/jkRp9vuXMgQTLq92YVLv\/TQapWVdBmfC5db7H3q9b38ayZdgJbctQcppJGM6lzxTmkmY5Ii0D\/n8pAfx0NKekISJrZgSKO1i8hN+nvQwHlgkX\/KjlZVOwp3hn\/P5J2KnnEaGWIqnlFAw7WBFePsGV4pfxyVR0hRN+MWc1sq3EkIpntIuUsSf5EgctBIgxVKChAPSwlP6ELNVSRVr34oiB6WXCVsncZTotrcclPD56JToz5CB0gctKZhiXUmRYY6DfQ8UeWiZghJ7naJEKE16HA8rli2xpyh8Ssv0\/ARblqp2hD4jgKoS3rwZ5RjFPbE0VNVoik2JLVVRbDUQm29KFShVhaakILZUjXrpxFP0JMfyTcFNW1XN0oSH8cDS3G3rmNVcJCX33SW0YapWV\/A9XW8PTVsd6rBp+YUDBq1ZqrUudsIxY6LBFIMpKpbcH1AyVdUWe4oD9asdrjdFmZLDhdqSUZvY049JWuvdR5X9lvuKDteUyHfWLfFtSVHa5r3plju8109CkN54WDApKc2K8AkHw7TWnFHjizT27Tk3+UIbqqW28JRgJu+PE2tR5jRAyXe3AkHCqcJDIpMUsV\/rtB8dEeYUpLSs+ajQhBPelkg4VMzAQgyFF3UBSsu+S1+4AzNcdSLPPWaViLVYXd\/Qw1kXOb0Roa7VNzWxhTdIQNh13+BDc50P0p6PCfVuCUpKJmLAql3zY2oEC\/GoGoAIbcIEOfbHnYxw01AHEgcHTdyDFLzFVCPfMzckCSUWE3Y9QCAQTvuhQol+bR3WcIJvmvgES9bQVprPnfYdSMEP0FBal8K7qVjOqYP\/t+FOdpTS4N1KVkIIv9D1iSaPeToYF2iPveK8PxtxnRlCyTqQJ5SIMKl8VGNjcMxYYy4eAYmClSqUCI6aDdYUrn1Y2kVcjJcwlEhogDVFHoagnZlyGBI6sKQLJQU2ByA4rFoYE1b2QpBwVbIJzhU6MGFBF\/VXOEQDndJ63f3jP\/765\/SQ4\/o\/Cx\/CguMw1UebtOz24D3NzYPYr8PI+d401e86LOjC9UCE6JRo9v\/sUDpaHFbz00cJ1+DNCHMzEROq28EljUNpaW5YrUwfJebJqp1oyroV3JJyKQ0NaW5xCikpqJ0G0+D2pktp+FCamzuaQkpu2RS\/lV0L7bQQSitHdNRXv9xtbd39cpUa09LK9FFSUCcRE91oCdafT3Mrrymj6+3t\/AJR68un1y4GGi4ri3xO00fJxRRa0nmi+7gDBSWhBOP9vJ0nWmDachB4E\/6RQJTIBBaPCR0GCkoqRumaQnIpLXyZc9155TjO3aeSUgIm3AkWlFSUEoskP6bXzhR2W8jFYJpOSvGYaEE5eCQAlD45kXTz\/uvHdwwTC6Hc7Vbh+pgFlUCU2MpXNeoRmFhB2Rn4G3DvE2C0fXNvWsXi\/UeGiUL6tXByd124pZiiPHxaKfEx4bY9UFBSEUpXNJRu7lWq4lcvmHL5k1zOXeFFBdPUUiKFI8U0GDOoSTfrQi8uE0rUlRYcSKp6f0PnOaBTuPatgoWi5GKqI\/9hpl7hlOaE0jWE0kfTpeQEE8TSSeHYiyWWcouBoJpiSgo6gLCxDzsKQrQlKtI3LIBgn4bHRChRW\/pquZRUyzOm+ZNC4c7lRCkFHWqaKTmYLNs43ei02836qUEDxYh6IdeldNinVKSUVph\/E06+WFoSiBIkHR20Zdq2YZv092ZoeqPyMs6jZHX7sTSfyx0XtnL9WFoJGNR0U1JQ+9DoBwcwMtZLkUWU697vPPcu0lrgi+tHuZMT\/xbUor8imHJKCkbNTdMwLYvFlFqpcZYthBIrKr869m0V\/WUlMSV3ohNrjnNEPLtZP1jrwsA3EXcFDFUlW510bRpJRVp9t25ZJXB8XHCqyqgV7\/RTUuAtHYTptlPM6RtQ+idbodx0TVN1Sm\/mRb9eFwpbt\/yFnBCUqGBPKeY1U0Lp9n5hYLG7sHDFprjcbwXHnyJ3M8WhRPcnB19K6etp7uhfr7r5fJDTJ3f3\/zf\/BCcyJTim5L\/+Tij9WzUP89t+Sp8AAdvXjj1iEYgSrpvBV1QDIpReqeqrpc\/b7m5la8vZ+l5a8a9NRKfUNmKM6WlunlD6\/fXc1eeTPCH15c5\/PLC0uLjEP19ZOhKHEhgT\/7agRwl0lf4AxVmtCETJJpQSY2lYLU3jqWWMEmIpRyipcpyAx4j5UkzG\/U7cm3\/mxtO8YJQ6tmrGzHG5\/xBK\/50fTcJQgncDbG4LCkLpD5Jyf+RG1FiH8oCCG\/ExCzldrxpwzU4fTWMcyIOqZEQcnfiFVYJRmOGOJrCl+OYKNCVluQXGESQc35ZAMAlKcqOQK9gSsOMDBS5eynE7lSdIp6S2Aaie\/BmxpdspmizBBWB7PM\/zKAWvUFiJbzjDfqbU\/g2zfGJXM8n9m5YBh8nDx9S\/ZQ0mOnulaJAntX\/DpZP4utsVPUKQNOXgYCCdK8OLqRJ00IlUNfaQyS84Qhh8MVUS4UrqoUs8y+EhbjHrwQth8oh6d5o7cyBqTNJd5lVYwqWuqOHOs5T2TUvFtM1MoH9a\/AaLoIJNyhR1NxM9J5dwKUdtKfWNeGkpxZ4whT4tK6Whxi2rLw1HCRrGyjjHDRlLa0NMiAJpOF+CLp\/plnxiCVpTp94zwtUh6nShNMzAMTHvIQJPJA3RkxJJu6Ub\/3JuQDTh5NyrhEkuZfENfawl3YRjbSlTf1LKfROFpVwqS4ZtE1O2fnquWMvP5DeT6Ofk9G4QbECmaJQHncBk7KfniP0TDM2E8dN+epaEqxNXtPugHdGj0f+Zii38v5CWIEgmS43DRNsPJLdKE1o05wgmHgSM4Va9uSZzJClOOyHL5ngTqnahpXOqTpdCy2k2tK6HOSGd9h3IICm0ERqgsDdqgc4nGNUqtGeFcSB5ujHhtmrS5hSbnRqmrU\/If9X6GmVkRbeskFBYWaedKizbUE8PKpX1g0PboH09LGOTa+zyCbXXnI4elmW5HStU0zhtZ4x8wqi97sSPA8s01EoVZZYUFEZKs7Km2gbI7G7WM0TRItatlGrtdrWmg4FP+nEetTI8mTJlypQpk+jSdU0vBfRNSgW\/VYIfNP3Xw3W9j+AvDy8P5LSQK40FSwK0R3\/wklEaQpqXcePh4qacNumB\/3lp+ojeHfZvXdMUAYhkypQpU6ZME5eWKVnKk0zJ+h\/PKHB+hxxUOAAAAABJRU5ErkJggg==\"><\/center>","83bc2959":"<a id=\"t1.\"><\/a>\n# 1. Import data and python packages","4c9a09cd":"<a id=\"t2.\"><\/a>\n# 2. Data visualization","1df4642a":"**Context** \n\nMachine Learning with R by Brett Lantz is a book that provides an introduction to machine learning using R. As far as I can tell, Packt Publishing does not make its datasets available online unless you buy the book and create a user account which can be a problem if you are checking the book out from the library or borrowing the book from a friend. All of these datasets are in the public domain but simply needed some cleaning up and recoding to match the format in the book.\n\n**Content** \n\n*Columns* \n\n* age: age of primary beneficiary\n\n* sex: insurance contractor gender, female, male\n\n* bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height, objective index of body weight (kg \/ m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9\n\n* children: Number of children covered by health insurance \/ Number of dependents\n\n* smoker: Smoking\n\n* region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.\n\n* charges: Individual medical costs billed by health insurance\n\n**Acknowledgements**\n\nThe dataset is available on GitHub here.\n\n**Inspiration**\n\nCan you accurately predict insurance costs?\n\n## Contents\n\n1. [Import data and python packages](#t1.)\n\n2. [Data visualization](#t2.)\n\n3. [Regression](#t3.)\n"}}