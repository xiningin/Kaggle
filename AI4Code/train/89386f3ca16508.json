{"cell_type":{"f303a809":"code","fbed5e35":"code","6df33e75":"code","d0080711":"code","e021f785":"code","e9dc56c3":"code","2f8c3703":"code","52458061":"code","ad991cf2":"code","07d187f1":"code","6f37cc0f":"code","cb6b5c11":"code","8cd01fd7":"code","bf7629eb":"code","d9916637":"code","dbb067d0":"code","c026792c":"code","25bdf13c":"code","bb32b640":"code","acab22fe":"code","821c3291":"code","dfae646b":"code","a4ad9ab3":"code","acd8f1ba":"code","8207966e":"code","2e18a1f8":"code","20cd01d4":"code","27bd273b":"code","7ffdc8b5":"code","4b928e55":"code","6e9868d0":"code","22112c1b":"code","5129730c":"code","a1b29a26":"code","d3a6d655":"code","47e51d6b":"code","6e77b100":"code","01344dff":"code","05e3b31f":"code","0d6b2a37":"code","c0d91d2f":"code","1f588425":"code","9eae7bc4":"code","f5a98984":"code","1a354a56":"code","da8bf013":"code","b891cbd9":"code","d66e65d3":"code","1fadf7c4":"code","f9b3b57d":"code","9c1fd176":"code","710346d7":"code","0e167c2d":"code","6f80f071":"code","1ca7e2a9":"code","9b9cf743":"code","488f95b4":"code","316737da":"code","9818a31f":"code","843c6e3e":"code","99e4898a":"code","1a0cd352":"code","0dade6dc":"code","42eaed1f":"code","43af5776":"code","541aaf47":"code","11ea3a8d":"code","5cb753e3":"code","80f47380":"code","d26812d9":"code","6e8c6dec":"code","cc759d1c":"code","9ba5eb0b":"code","6eb49f0b":"code","1c602d05":"code","569b4549":"code","2c3ca2d8":"code","617e95c4":"code","56c91835":"code","113ccefd":"code","30e94602":"code","08f85f13":"code","74fc836b":"code","e181f070":"code","fa9e2eff":"code","f1da7184":"code","46641251":"code","29260c88":"code","ee003cbd":"code","e8f4b0b3":"code","701c2d05":"code","05594ed1":"code","d23b0081":"code","c8610bf5":"code","4fd5a493":"code","04e6a6f8":"code","fb10aa8b":"code","655c78e2":"code","7f644405":"markdown","f0c97e4d":"markdown","89ac873c":"markdown","4fb7e020":"markdown","1fcfbea6":"markdown","9af30f30":"markdown","e5caf751":"markdown","163171ff":"markdown","9c805c09":"markdown","bb4353a5":"markdown","9caae364":"markdown","57739330":"markdown","7ee78532":"markdown","5426deb6":"markdown","2ee8be6c":"markdown","0eefe9ac":"markdown","d3a63060":"markdown","cf20d5f5":"markdown","b9291bfe":"markdown","e5bc472b":"markdown","dd7bc13f":"markdown","45a4ff7c":"markdown","68b14b4e":"markdown","cd6e6529":"markdown","cfd2d3db":"markdown","e32175aa":"markdown","f8bca820":"markdown","23bc6c07":"markdown","ea3e365c":"markdown","c6844c8e":"markdown","84eeacf5":"markdown","083f235f":"markdown","c044c6b1":"markdown","6eaa0363":"markdown","4e54699e":"markdown","c008c866":"markdown","9fe89ab0":"markdown","38f182a1":"markdown","efb66254":"markdown","fd7fc27f":"markdown","0a8c0bcd":"markdown","b1ec2fa9":"markdown","4f59e5c3":"markdown","4865956d":"markdown","c8452345":"markdown","f31f8566":"markdown","eb7b85f4":"markdown","385a0f03":"markdown","49b28efc":"markdown","aa84a4ad":"markdown","0a3edf2b":"markdown","2648246f":"markdown","a9cb7395":"markdown","e05a7e32":"markdown","43018065":"markdown","f3d5fa06":"markdown","e6ca7558":"markdown","991bbf0d":"markdown","9cd42518":"markdown","c6ee9dd5":"markdown","2c6221d5":"markdown","ad0acd08":"markdown","74e7ce66":"markdown","4ee63ebd":"markdown","7ee11448":"markdown","1e54b0ab":"markdown","717a729c":"markdown","4da515b0":"markdown","ed6ca234":"markdown","17d373ac":"markdown","117f6f57":"markdown","99c4d358":"markdown","04d7426e":"markdown","de817f29":"markdown","0a7a89ec":"markdown","ed423121":"markdown","83f86193":"markdown","755e922b":"markdown","d76ec3c2":"markdown","ffe1deb9":"markdown"},"source":{"f303a809":"#![](https:\/\/images.fastcompany.net\/image\/upload\/w_1280,f_auto,q_auto,fl_lossy\/wp-cms\/uploads\/2017\/05\/p-1-5-credibility-busting-responses-you-need-to-stop-using.jpg)\nimport os\nprint(os.listdir(\"..\/input\"))","fbed5e35":"import matplotlib.pyplot as plt\nimport matplotlib\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nimport re\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.gridspec as gridspec\nfrom sklearn.preprocessing import StandardScaler\nfrom numpy import genfromtxt\nfrom scipy.stats import multivariate_normal\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score , average_precision_score\nfrom sklearn.metrics import precision_score, precision_recall_curve\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n","6df33e75":"School_df = pd.read_csv(\"..\/input\/data-science-for-good\/2016 School Explorer.csv\")","d0080711":"School_df.tail()","e021f785":"layout = go.Layout(title='Top cities with no of schools', width=1000, height=500, margin=dict(l=100), xaxis=dict(tickangle=-65))\ntrace1 = go.Bar(x=School_df['City'].value_counts().index, y=School_df['City'].value_counts().values, marker=dict(color=\"#FF7441\"))\n\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e9dc56c3":"df = pd.DataFrame(School_df['Community School?'].value_counts().values,\n                  index=School_df['Community School?'].value_counts().index, \n                  columns=[' '])\n\ndf.plot(kind='pie', subplots=True, autopct='%1.0f%%', figsize=(8, 8))\n#plt.subplots_adjust(wspace=0.5)\nplt.show()","2f8c3703":"School_df['School Income Estimate']=School_df['School Income Estimate'].replace({'\\$':'', ',':''},regex=True).astype(float)\ntrace0 = go.Scatter(\n    x=School_df[School_df['Community School?'] == 'Yes']['School Income Estimate'],\n    y=School_df[School_df['Community School?'] == 'Yes']['Economic Need Index'],\n    mode='markers',\n    name='Community School? = Yes',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='blue',\n            width=10\n        ),\n        \n    )\n)\ntrace1 = go.Scatter(\n    x=School_df[School_df['Community School?'] == 'No']['School Income Estimate'],\n    y=School_df[School_df['Community School?'] == 'No']['Economic Need Index'],\n    mode='markers',\n    name='Community School? = No',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='red',\n            width=2.5\n        ),\n        \n    )\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n      xaxis=dict(title='School Income Estimate'),\n      yaxis=dict(title='Economic Need Index'),\n      title=('Economic Need Assessment'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","52458061":"trace0 = go.Scatter3d(\n    x=School_df[School_df['Community School?'] == 'Yes']['School Income Estimate'],\n    y=School_df[School_df['Community School?'] == 'Yes']['Economic Need Index'],\n    z=School_df[School_df['Community School?'] == 'Yes']['Grade High'],\n    mode='markers',\n    name='Community School? = Yes',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='blue',\n            width=10\n        ),\n        \n    )\n)\ntrace1 = go.Scatter3d(\n    x=School_df[School_df['Community School?'] == 'No']['School Income Estimate'],\n    y=School_df[School_df['Community School?'] == 'No']['Economic Need Index'],\n    z=School_df[School_df['Community School?'] == 'No']['Grade High'],\n    mode='markers',\n    name='Community School? = No',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='red',\n            width=2.5\n        ),\n        \n    )\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n      xaxis=dict(title='School Income Estimate'),\n      yaxis=dict(title='Economic Need Index'),\n      title=('Economic Need Assessment'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ad991cf2":"School_df['Percent Black']=School_df['Percent Black'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent Black']=School_df['Percent Black']\/100\nSchool_df['Percent White']=School_df['Percent White'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent White']=School_df['Percent White']\/100\nSchool_df['Percent Asian']=School_df['Percent Asian'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent Asian']=School_df['Percent Asian']\/100\nSchool_df['Percent Hispanic']=School_df['Percent Hispanic'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent Hispanic']=School_df['Percent Hispanic']\/100\nSchool_df['Percent Black \/ Hispanic']=School_df['Percent Black \/ Hispanic'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent Black \/ Hispanic']=School_df['Percent Black \/ Hispanic']\/100","07d187f1":"no_comnt_school = School_df[School_df['Community School?'] == 'No']\ncomnt_school = School_df[School_df['Community School?'] == 'Yes']","6f37cc0f":"v_features = ['Percent Hispanic','Percent Black','Percent White','Percent Asian']\nplt.figure(figsize=(15,8))\ngs = gridspec.GridSpec(1,4)\nfor i, cn in enumerate(no_comnt_school[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.boxplot(y = cn , data = no_comnt_school)\n    ax.set_title(str(cn)[0:])\n    ax.set_ylabel(' ')","cb6b5c11":"plt.figure(figsize=(15,8))\ngs = gridspec.GridSpec(1,4)\nfor i, cn in enumerate(comnt_school[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.boxplot(y = cn , data = comnt_school)\n    ax.set_title(str(cn)[0:])\n    ax.set_ylabel(' ')","8cd01fd7":"#col = School_Reg_merged.columns\n#y = 1\n#for x in col : \n#  print (y)  \n#  print(x) \n#  y = y + 1  ","bf7629eb":"#v_features = School_df.iloc[:,27:38].columns\nv_features=['Rigorous Instruction Rating','Collaborative Teachers Rating','Supportive Environment Rating','Effective School Leadership Rating','Strong Family-Community Ties Rating','Trust Rating']\nplt.figure(figsize=(20,55))\ngs = gridspec.GridSpec(15, 2)\nfor i, cn in enumerate(School_df[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.countplot(y=str(cn), data=School_df,order=School_df[str(cn)].value_counts().index, palette=\"Set2\")\n    ax.set_title(str(cn))\n    ax.set_xlabel(' ')\n    ax.set_ylabel(' ')\n    ","d9916637":"f,ax=plt.subplots(1,2,figsize=(15,7))\nsns.barplot( y = School_df['Grade High'].dropna().value_counts().index,\n            x = School_df['Grade High'].dropna().value_counts().values,\n                palette=\"winter\",ax=ax[0])\nax[0].set_title('Grade High')\nax[0].set_yticklabels(School_df['Grade High'].dropna().value_counts().index, \n                      rotation='horizontal', fontsize='large')\nax[0].set_ylabel('')\nsns.barplot( y = School_df['Grade Low'].dropna().value_counts().index,\n            x = School_df['Grade Low'].dropna().value_counts().values,\n                palette=\"summer\",ax=ax[1])\nax[1].set_title('Grade Low')\nax[1].set_yticklabels(School_df['Grade Low'].dropna().value_counts().index, \n                      rotation='horizontal', fontsize='large')\nax[1].set_ylabel('')\nplt.subplots_adjust(wspace=0.8)\nplt.show()\n","dbb067d0":"School_df['Grade 3 ELA 4s - Black or African American'] = School_df['Grade 3 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 3 ELA - All Students Tested'])\nSchool_df['Grade 3 ELA 4s - Hispanic or Latino']  = School_df['Grade 3 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 3 ELA - All Students Tested'])\nSchool_df['Grade 3 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 3 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 3 ELA - All Students Tested'])\nSchool_df['Grade 3 ELA 4s - White'] = School_df['Grade 3 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 3 ELA - All Students Tested'])\nSchool_df['Grade 3 ELA 4s - Limited English Proficient'] = School_df['Grade 3 ELA 4s - Limited English Proficient'] \/ School_df['Grade 3 ELA - All Students Tested']\nSchool_df['Grade 3 ELA 4s - Economically Disadvantaged'] = School_df['Grade 3 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 3 ELA - All Students Tested']\nSchool_df['Grade 3 ELA 4s - All Students'] =School_df['Grade 3 ELA 4s - All Students'] \/ School_df['Grade 3 ELA - All Students Tested']\n\nSchool_df['Grade 3 Math 4s - Black or African American'] = School_df['Grade 3 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 3 Math - All Students tested'])\nSchool_df['Grade 3 Math 4s - Hispanic or Latino']  = School_df['Grade 3 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 3 Math - All Students tested'])\nSchool_df['Grade 3 Math 4s - Asian or Pacific Islander'] = School_df['Grade 3 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 3 Math - All Students tested'])\nSchool_df['Grade 3 Math 4s - White'] = School_df['Grade 3 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 3 Math - All Students tested'])\nSchool_df['Grade 3 Math 4s - Limited English Proficient'] = School_df['Grade 3 Math 4s - Limited English Proficient'] \/ School_df['Grade 3 Math - All Students tested']\nSchool_df['Grade 3 Math 4s - Economically Disadvantaged'] = School_df['Grade 3 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 3 Math - All Students tested']\nSchool_df['Grade 3 Math 4s - All Students'] =School_df['Grade 3 Math 4s - All Students'] \/ School_df['Grade 3 Math - All Students tested']\n\nSchool_df['Grade 4 ELA 4s - Black or African American'] = School_df['Grade 4 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 4 ELA - All Students Tested'])\nSchool_df['Grade 4 ELA 4s - Hispanic or Latino']  = School_df['Grade 4 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 4 ELA - All Students Tested'])\nSchool_df['Grade 4 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 4 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 4 ELA - All Students Tested'])\nSchool_df['Grade 4 ELA 4s - White'] = School_df['Grade 4 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 4 ELA - All Students Tested'])\nSchool_df['Grade 4 ELA 4s - Limited English Proficient'] = School_df['Grade 4 ELA 4s - Limited English Proficient'] \/ School_df['Grade 4 ELA - All Students Tested']\nSchool_df['Grade 4 ELA 4s - Economically Disadvantaged'] = School_df['Grade 4 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 4 ELA - All Students Tested']\nSchool_df['Grade 4 ELA 4s - All Students'] =School_df['Grade 4 ELA 4s - All Students'] \/ School_df['Grade 4 ELA - All Students Tested']\n\n\nSchool_df['Grade 4 Math 4s - Black or African American'] = School_df['Grade 4 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 4 Math - All Students Tested'])\nSchool_df['Grade 4 Math 4s - Hispanic or Latino']  = School_df['Grade 4 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 4 Math - All Students Tested'])\nSchool_df['Grade 4 Math 4s - Asian or Pacific Islander'] = School_df['Grade 4 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 4 Math - All Students Tested'])\nSchool_df['Grade 4 Math 4s - White'] = School_df['Grade 4 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 4 Math - All Students Tested'])\nSchool_df['Grade 4 Math 4s - Limited English Proficient'] = School_df['Grade 4 Math 4s - Limited English Proficient'] \/ School_df['Grade 4 Math - All Students Tested']\nSchool_df['Grade 4 Math 4s - Economically Disadvantaged'] = School_df['Grade 4 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 4 Math - All Students Tested']\nSchool_df['Grade 4 Math 4s - All Students'] =School_df['Grade 4 Math 4s - All Students'] \/ School_df['Grade 4 Math - All Students Tested']\n\nSchool_df['Grade 5 ELA 4s - Black or African American'] = School_df['Grade 5 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 5 ELA - All Students Tested'])\nSchool_df['Grade 5 ELA 4s - Hispanic or Latino']  = School_df['Grade 5 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 5 ELA - All Students Tested'])\nSchool_df['Grade 5 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 5 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 5 ELA - All Students Tested'])\nSchool_df['Grade 5 ELA 4s - White'] = School_df['Grade 5 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 5 ELA - All Students Tested'])\nSchool_df['Grade 5 ELA 4s - Limited English Proficient'] = School_df['Grade 5 ELA 4s - Limited English Proficient'] \/ School_df['Grade 5 ELA - All Students Tested']\nSchool_df['Grade 5 ELA 4s - Economically Disadvantaged'] = School_df['Grade 5 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 5 ELA - All Students Tested']\nSchool_df['Grade 5 ELA 4s - All Students'] =School_df['Grade 5 ELA 4s - All Students'] \/ School_df['Grade 5 ELA - All Students Tested']\n\n\nSchool_df['Grade 5 Math 4s - Black or African American'] = School_df['Grade 5 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 5 Math - All Students Tested'])\nSchool_df['Grade 5 Math 4s - Hispanic or Latino']  = School_df['Grade 5 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 5 Math - All Students Tested'])\nSchool_df['Grade 5 Math 4s - Asian or Pacific Islander'] = School_df['Grade 5 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 5 Math - All Students Tested'])\nSchool_df['Grade 5 Math 4s - White'] = School_df['Grade 5 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 5 Math - All Students Tested'])\nSchool_df['Grade 5 Math 4s - Limited English Proficient'] = School_df['Grade 5 Math 4s - Limited English Proficient'] \/ School_df['Grade 5 Math - All Students Tested']\nSchool_df['Grade 5 Math 4s - Economically Disadvantaged'] = School_df['Grade 5 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 5 Math - All Students Tested']\nSchool_df['Grade 5 Math 4s - All Students'] =School_df['Grade 5 Math 4s - All Students'] \/ School_df['Grade 5 Math - All Students Tested']\n\n\nSchool_df['Grade 6 ELA 4s - Black or African American'] = School_df['Grade 6 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 6 ELA - All Students Tested'])\nSchool_df['Grade 6 ELA 4s - Hispanic or Latino']  = School_df['Grade 6 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 6 ELA - All Students Tested'])\nSchool_df['Grade 6 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 6 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 6 ELA - All Students Tested'])\nSchool_df['Grade 6 ELA 4s - White'] = School_df['Grade 6 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 6 ELA - All Students Tested'])\nSchool_df['Grade 6 ELA 4s - Limited English Proficient'] = School_df['Grade 6 ELA 4s - Limited English Proficient'] \/ School_df['Grade 6 ELA - All Students Tested']\nSchool_df['Grade 6 ELA 4s - Economically Disadvantaged'] = School_df['Grade 6 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 6 ELA - All Students Tested']\nSchool_df['Grade 6 ELA 4s - All Students'] =School_df['Grade 6 ELA 4s - All Students'] \/ School_df['Grade 6 ELA - All Students Tested']\n\nSchool_df['Grade 6 Math 4s - Black or African American'] = School_df['Grade 6 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 6 Math - All Students Tested'])\nSchool_df['Grade 6 Math 4s - Hispanic or Latino']  = School_df['Grade 6 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 6 Math - All Students Tested'])\nSchool_df['Grade 6 Math 4s - Asian or Pacific Islander'] = School_df['Grade 6 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 6 Math - All Students Tested'])\nSchool_df['Grade 6 Math 4s - White'] = School_df['Grade 6 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 6 Math - All Students Tested'])\nSchool_df['Grade 6 Math 4s - Limited English Proficient'] = School_df['Grade 6 Math 4s - Limited English Proficient'] \/ School_df['Grade 6 Math - All Students Tested']\nSchool_df['Grade 6 Math 4s - Economically Disadvantaged'] = School_df['Grade 6 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 6 Math - All Students Tested']\nSchool_df['Grade 6 Math 4s - All Students'] =School_df['Grade 6 Math 4s - All Students'] \/ School_df['Grade 6 Math - All Students Tested']\n\nSchool_df['Grade 7 ELA 4s - Black or African American'] = School_df['Grade 7 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 7 ELA - All Students Tested'])\nSchool_df['Grade 7 ELA 4s - Hispanic or Latino']  = School_df['Grade 7 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 7 ELA - All Students Tested'])\nSchool_df['Grade 7 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 7 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 7 ELA - All Students Tested'])\nSchool_df['Grade 7 ELA 4s - White'] = School_df['Grade 7 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 7 ELA - All Students Tested'])\nSchool_df['Grade 7 ELA 4s - Limited English Proficient'] = School_df['Grade 7 ELA 4s - Limited English Proficient'] \/ School_df['Grade 7 ELA - All Students Tested']\nSchool_df['Grade 7 ELA 4s - Economically Disadvantaged'] = School_df['Grade 7 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 7 ELA - All Students Tested']\nSchool_df['Grade 7 ELA 4s - All Students'] =School_df['Grade 7 ELA 4s - All Students'] \/ School_df['Grade 7 ELA - All Students Tested']\n\nSchool_df['Grade 7 Math 4s - Black or African American'] = School_df['Grade 7 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 7 Math - All Students Tested'])\nSchool_df['Grade 7 Math 4s - Hispanic or Latino']  = School_df['Grade 7 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 7 Math - All Students Tested'])\nSchool_df['Grade 7 Math 4s - Asian or Pacific Islander'] = School_df['Grade 7 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 7 Math - All Students Tested'])\nSchool_df['Grade 7 Math 4s - White'] = School_df['Grade 7 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 7 Math - All Students Tested'])\nSchool_df['Grade 7 Math 4s - Limited English Proficient'] = School_df['Grade 7 Math 4s - Limited English Proficient'] \/ School_df['Grade 7 Math - All Students Tested']\nSchool_df['Grade 7 Math 4s - Economically Disadvantaged'] = School_df['Grade 7 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 7 Math - All Students Tested']\nSchool_df['Grade 7 Math 4s - All Students'] =School_df['Grade 7 Math 4s - All Students'] \/ School_df['Grade 7 Math - All Students Tested']\n\nSchool_df['Grade 8 ELA 4s - Black or African American'] = School_df['Grade 8 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 8 ELA - All Students Tested'])\nSchool_df['Grade 8 ELA 4s - Hispanic or Latino']  = School_df['Grade 8 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 8 ELA - All Students Tested'])\nSchool_df['Grade 8 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 8 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 8 ELA - All Students Tested'])\nSchool_df['Grade 8 ELA 4s - White'] = School_df['Grade 8 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 8 ELA - All Students Tested'])\nSchool_df['Grade 8 ELA 4s - Limited English Proficient'] = School_df['Grade 8 ELA 4s - Limited English Proficient'] \/ School_df['Grade 8 ELA - All Students Tested']\nSchool_df['Grade 8 ELA 4s - Economically Disadvantaged'] = School_df['Grade 8 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 8 ELA - All Students Tested']\nSchool_df['Grade 8 ELA 4s - All Students'] =School_df['Grade 8 ELA 4s - All Students'] \/ School_df['Grade 8 ELA - All Students Tested']\n\nSchool_df['Grade 8 Math 4s - Black or African American'] = School_df['Grade 8 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 8 Math - All Students Tested'])\nSchool_df['Grade 8 Math 4s - Hispanic or Latino']  = School_df['Grade 8 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 8 Math - All Students Tested'])\nSchool_df['Grade 8 Math 4s - Asian or Pacific Islander'] = School_df['Grade 8 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 8 Math - All Students Tested'])\nSchool_df['Grade 8 Math 4s - White'] = School_df['Grade 8 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 8 Math - All Students Tested'])\nSchool_df['Grade 8 Math 4s - Limited English Proficient'] = School_df['Grade 8 Math 4s - Limited English Proficient'] \/ School_df['Grade 8 Math - All Students Tested']\nSchool_df['Grade 8 Math 4s - Economically Disadvantaged'] = School_df['Grade 8 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 8 Math - All Students Tested']\nSchool_df['Grade 8 Math 4s - All Students'] =School_df['Grade 8 Math 4s - All Students'] \/ School_df['Grade 8 Math - All Students Tested']\n\nSchool_df['Grade 3 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 3 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 3 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 3 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 4 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 4 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 4 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 4 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 5 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 5 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 5 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 5 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 6 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 6 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 6 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 6 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 7 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 7 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 7 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 7 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 8 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 8 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 8 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 8 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - All Students'].fillna(0, inplace=True) \n","c026792c":"ELA = {'Race': ['Black', 'Hispanic', 'Asian','White'], \n           'G3': [School_df['Grade 3 ELA 4s - Black or African American'].mean(), School_df['Grade 3 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 3 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 3 ELA 4s - White'].mean()],\n           'G4': [School_df['Grade 4 ELA 4s - Black or African American'].mean(), School_df['Grade 4 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 4 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 4 ELA 4s - White'].mean()],\n           'G5': [School_df['Grade 5 ELA 4s - Black or African American'].mean(), School_df['Grade 5 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 5 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 5 ELA 4s - White'].mean()],\n           'G6': [School_df['Grade 6 ELA 4s - Black or African American'].mean(), School_df['Grade 6 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 6 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 6 ELA 4s - White'].mean()],\n           'G7': [School_df['Grade 7 ELA 4s - Black or African American'].mean(), School_df['Grade 7 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 7 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 7 ELA 4s - White'].mean()],\n           'G8': [School_df['Grade 8 ELA 4s - Black or African American'].mean(), School_df['Grade 8 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 8 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 8 ELA 4s - White'].mean()]}\n\nindex = [0,1,2,3]\nELA_df = pd.DataFrame(ELA, index=index)\n\nMath = {'Race': ['Black', 'Hispanic', 'Asian','White'], \n           'G3': [School_df['Grade 3 Math 4s - Black or African American'].mean(), School_df['Grade 3 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 3 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 3 Math 4s - White'].mean()],\n           'G4': [School_df['Grade 4 Math 4s - Black or African American'].mean(), School_df['Grade 4 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 4 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 4 Math 4s - White'].mean()],\n           'G5': [School_df['Grade 5 Math 4s - Black or African American'].mean(), School_df['Grade 5 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 5 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 5 Math 4s - White'].mean()],\n           'G6': [School_df['Grade 6 Math 4s - Black or African American'].mean(), School_df['Grade 6 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 6 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 6 Math 4s - White'].mean()],\n           'G7': [School_df['Grade 7 Math 4s - Black or African American'].mean(), School_df['Grade 7 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 7 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 7 Math 4s - White'].mean()],\n           'G8': [School_df['Grade 8 Math 4s - Black or African American'].mean(), School_df['Grade 8 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 8 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 8 Math 4s - White'].mean()]}\n\nindex = [0,1,2,3]\nMath_df1 = pd.DataFrame(Math, index=index)","25bdf13c":"trace0 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G3'],mode='lines',name='Grade 3 students scoring in level 4 - Math ')\ntrace1 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G4'],mode='lines',name='Grade 4 students scoring in level 4 - Math ')\ntrace2 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G5'],mode='lines',name='Grade 5 students scoring in level 4 - Math ')\ntrace3 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G6'],mode='lines',name='Grade 6 students scoring in level 4 - Math ')\ntrace4 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G7'],mode='lines',name='Grade 7 students scoring in level 4 - Math ')\ntrace5 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G8'],mode='lines',name='Grade 8 students scoring in level 4 - Math ')\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5]\n\nlayout = go.Layout(\n    xaxis=dict(title='Race'),\n    yaxis=dict(title='Percent students from each race'),\n    title=' Students performance in different grade - Math ',\n    showlegend = True)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","bb32b640":"trace0 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G3'],mode='lines',name='Grade 3 students scoring in level 4 - ELA ')\ntrace1 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G4'],mode='lines',name='Grade 4 students scoring in level 4 - ELA ')\ntrace2 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G5'],mode='lines',name='Grade 5 students scoring in level 4 - ELA ')\ntrace3 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G6'],mode='lines',name='Grade 6 students scoring in level 4 - ELA ')\ntrace4 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G7'],mode='lines',name='Grade 7 students scoring in level 4 - ELA ')\ntrace5 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G8'],mode='lines',name='Grade 8 students scoring in level 4 - ELA ')\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5]\n\nlayout = go.Layout(\n    xaxis=dict(title='Race'),\n    yaxis=dict(title='Percent students from each race'),\n    title=' Students performance in different grade - ELA ',\n    showlegend = True)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","acab22fe":"v_features = ['Grade 3 ELA - All Students Tested','Grade 3 Math - All Students tested',\n              'Grade 4 ELA - All Students Tested','Grade 4 Math - All Students Tested',\n              'Grade 5 ELA - All Students Tested','Grade 5 Math - All Students Tested',\n              'Grade 6 ELA - All Students Tested','Grade 6 Math - All Students Tested',\n              'Grade 7 ELA - All Students Tested','Grade 7 Math - All Students Tested',\n              'Grade 8 ELA - All Students Tested','Grade 8 Math - All Students Tested',]\nplt.figure(figsize=(12,8*4))\ngs = gridspec.GridSpec(7, 2)\nfor i, cn in enumerate(School_df[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.distplot(School_df[cn], bins=5)\n    ax.set_xlabel('')\n    ax.set_title('feature: ' + str(cn))\nplt.show()","821c3291":"def get_bins(no):\n    if no == 0 :\n        return 0\n    elif no > 0 and no <= 50 :\n        return 1\n    elif no > 50 and no <= 100 :\n        return 2\n    elif no > 100 and no <= 150 :\n        return 3\n    elif no > 150 and no <= 200 :\n        return 4\n    else: \n        return 5\n\nv_features = ['Grade 3 ELA - All Students Tested','Grade 3 Math - All Students tested',\n              'Grade 4 ELA - All Students Tested','Grade 4 Math - All Students Tested',\n              'Grade 5 ELA - All Students Tested','Grade 5 Math - All Students Tested',\n              'Grade 6 ELA - All Students Tested','Grade 6 Math - All Students Tested',\n              'Grade 7 ELA - All Students Tested','Grade 7 Math - All Students Tested',\n              'Grade 8 ELA - All Students Tested','Grade 8 Math - All Students Tested',]\nfor i, cn in enumerate(School_df[v_features]):\n    School_df[cn] = School_df[cn].apply(lambda x: get_bins(x))","dfae646b":"plt.figure(figsize=(12,8*4))\ngs = gridspec.GridSpec(7, 2)\nfor i, cn in enumerate(School_df[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.countplot(y=str(cn), data=School_df,order=School_df[str(cn)].value_counts().index, palette=\"Set2\")\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.set_title('feature: ' + str(cn))\nplt.show()","a4ad9ab3":"School_df['Community School?'] = School_df['Community School?'].map(lambda s: 1 if s == 'Yes' else 0)\n\nSchool_df['Percent ELL']=School_df['Percent ELL'].replace({'%':'', ',':''},regex=True).astype(float)\nfeatures = [\"Student Attendance Rate\",\"Percent of Students Chronically Absent\",\"Rigorous Instruction %\"\n,\"Collaborative Teachers %\",\"Supportive Environment %\",\"Effective School Leadership %\",\"Strong Family-Community Ties %\",\"Trust %\",]\n\nfor i, cn in enumerate(School_df[features]):\n     School_df[str(cn)]= (School_df[str(cn)].replace({'%':'', ',':''},regex=True).astype(float)\/100)","acd8f1ba":"School_df['Rigorous Instruction Rating'].fillna(0, inplace=True)\nSchool_df['Collaborative Teachers Rating'].fillna(0, inplace=True)\nSchool_df['Supportive Environment Rating'].fillna(0, inplace=True)\nSchool_df['Effective School Leadership Rating'].fillna(0, inplace=True)\nSchool_df['Strong Family-Community Ties Rating'].fillna(0, inplace=True)\nSchool_df['Trust Rating'].fillna(0, inplace=True)\nSchool_df['Student Achievement Rating'].fillna(0, inplace=True)\n\nSchool_df['Rigorous Instruction Rating'] = School_df['Rigorous Instruction Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Rigorous Instruction Rating'] = School_df['Rigorous Instruction Rating'].astype(int)\nSchool_df['Collaborative Teachers Rating'] = School_df['Collaborative Teachers Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Collaborative Teachers Rating'] = School_df['Collaborative Teachers Rating'].astype(int)\nSchool_df['Supportive Environment Rating'] = School_df['Supportive Environment Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Supportive Environment Rating'] = School_df['Supportive Environment Rating'].astype(int)\nSchool_df['Effective School Leadership Rating'] = School_df['Effective School Leadership Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Effective School Leadership Rating'] = School_df['Effective School Leadership Rating'].astype(int)\nSchool_df['Strong Family-Community Ties Rating'] = School_df['Strong Family-Community Ties Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Strong Family-Community Ties Rating'] = School_df['Strong Family-Community Ties Rating'].astype(int)\nSchool_df['Trust Rating'] = School_df['Trust Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Trust Rating'] = School_df['Trust Rating'].astype(int)\nSchool_df['Student Achievement Rating'] = School_df['Student Achievement Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Student Achievement Rating'] = School_df['Student Achievement Rating'].astype(int)","8207966e":"Registration_df = pd.read_csv(\"..\/input\/data-science-for-good\/D5 SHSAT Registrations and Testers.csv\")\nRegistration_df[\"percent1\"] = Registration_df[\"Number of students who took the SHSAT\"]\/Registration_df[\"Number of students who registered for the SHSAT\"]\nRegistration_df[\"percent2\"] = Registration_df[\"Number of students who registered for the SHSAT\"]\/Registration_df[\"Enrollment on 10\/31\"]\nRegistration_df[\"Reg_idx\"] = Registration_df[\"percent1\"]*Registration_df[\"percent2\"]\nRegistration_df = Registration_df.drop_duplicates(subset=['School name','Year of SHST'])\nRegistration_df.head()","2e18a1f8":"Registration_df1 = Registration_df.groupby(['School name','Year of SHST'])['percent2'].sum().unstack()\nRegistration_df1 = Registration_df1.sort_values([2016], ascending=False)\nRegistration_df1 = Registration_df1.fillna(0)\nf, ax = plt.subplots(figsize=(15, 10)) \ng = sns.heatmap(Registration_df1,annot=True,cmap='YlGnBu',linewidths=.5,vmin=0.01)\nplt.show()","20cd01d4":"Registration_df2 = Registration_df.groupby(['School name','Year of SHST'])['percent1'].sum().unstack()\nRegistration_df2 = Registration_df2.sort_values([2016], ascending=False)\nRegistration_df2 = Registration_df2.fillna(0)\nf, ax = plt.subplots(figsize=(15, 10)) \ng = sns.heatmap(Registration_df2,annot=True,cmap='YlGnBu',linewidths=.5,vmin=0.01)\nplt.show()","27bd273b":"Registration_df3 = Registration_df.drop_duplicates(subset=['School name','Year of SHST'])\nRegistration_df4 = Registration_df3.groupby(['School name','Year of SHST'])['Reg_idx'].sum().unstack()\nRegistration_df4 = Registration_df4.sort_values([2016], ascending=False)\nRegistration_df4 = Registration_df4.fillna(0)\nf, ax = plt.subplots(figsize=(15, 10)) \ng = sns.heatmap(Registration_df4,annot=True,cmap='YlGnBu',linewidths=.5,vmin=0.01)\nplt.show();","7ffdc8b5":"filtered_reg_df = Registration_df.drop_duplicates(subset=['School name','Year of SHST'])\nfiltered_reg_df = filtered_reg_df[filtered_reg_df['Year of SHST'] == 2016] \nfiltered_reg_df = filtered_reg_df[filtered_reg_df['Grade level'] == 8]","4b928e55":"School_Reg_merged = pd.merge(filtered_reg_df, School_df, how='left', left_on='DBN', right_on='Location Code')\nSchool_Reg_merged = School_Reg_merged[np.isfinite(School_Reg_merged['Economic Need Index'])]\nSchool_Reg_merged.head()","6e9868d0":"School_Reg_merged['Grade level'].value_counts()","22112c1b":"fig, ax = plt.subplots(figsize=(13, 13))\nax.scatter(School_Reg_merged['Economic Need Index'],School_Reg_merged['Reg_idx'],marker=\"o\", color=\"lightBlue\", s=10, linewidths=10)\nax.set_xlabel('Economic Need Index')\nax.set_ylabel('percent participation in 2016')\nax.spines['right'].set_visible(False)\nax.grid()\nplt.grid()\n\nENI = School_Reg_merged['Economic Need Index']\nENI = np.array(ENI)\nschool = School_Reg_merged['School name']\nschool = np.array(school)\npercent = School_Reg_merged['Reg_idx']\npercent = np.array(percent)\n\nfor i, txt in enumerate(school):\n      ax.annotate(txt, (ENI[i],percent[i]),fontsize=12,rotation=-15,color='Red')\n\nax.annotate('Threshold', (0.57,0.20),fontsize=14,rotation=0,color='Blue')\nax.annotate('.', xy=(0.59,0.21), xytext=(0.59, 0.25),\n            arrowprops=dict(facecolor='Red', shrink=0.06),)\nax.annotate('.', xy=(0.59,0.19), xytext=(0.59, 0.15),\n            arrowprops=dict(facecolor='Red', shrink=0.06),);\n        ","5129730c":"School_Reg_merged['Reg_idx'] = School_Reg_merged['Reg_idx'].map(lambda s: 1 if s >= 0.20 else 0)","a1b29a26":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\nSchool_Reg_merged.drop(['School Income Estimate','Adjusted Grade','New?','Other Location Code in LCGMS'], axis =1, inplace = True)","d3a6d655":"rnd_clf = RandomForestClassifier(n_estimators = 100 , criterion = 'entropy',random_state = 0)\nrnd_clf.fit(School_Reg_merged.iloc[:,22:167],School_Reg_merged.iloc[:,9]);\n#for name, importance in zip(School_Reg_merged.iloc[:,22:167].columns, rnd_clf.feature_importances_):\n#    print(name, \"=\", importance)","47e51d6b":"'''\nplt.figure(figsize=(12,8*4))\ng = sns.barplot(y=School_Reg_merged.iloc[:,22:167].columns,x = rnd_clf.feature_importances_, orient='h')\n\n'''\n\nx, y = (list(x) for x in zip(*sorted(zip(rnd_clf.feature_importances_, School_Reg_merged.iloc[:,22:167].columns), \n                                                            reverse = False)))\ntrace2 = go.Bar(\n    x=x ,\n    y=y,\n    marker=dict(\n        color=x,\n        colorscale = 'Viridis',\n        reversescale = True\n    ),\n    name='Random Forest Feature importance',\n    orientation='h',\n)\n\nlayout = dict(\n    title='Barplot of Feature importances',\n     width = 900, height = 3000,\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    margin=dict(\n    l=300,\n),\n)\n\nfig1 = go.Figure(data=[trace2], layout=layout)\niplot(fig1)\n","6e77b100":"for name, importance in zip(School_Reg_merged.iloc[:,22:167].columns, rnd_clf.feature_importances_):\n    if importance > 0.015 :\n        print('\"' + name + '\"'+',')","01344dff":"School_Reg_train = School_Reg_merged[[\"School name\",\n\"Percent Black \/ Hispanic\",\n\"Student Attendance Rate\",\n\"Percent of Students Chronically Absent\",\n\"Rigorous Instruction %\",\n\"Collaborative Teachers %\",\n\"Supportive Environment %\",\n\"Effective School Leadership %\",\n\"Strong Family-Community Ties %\",\n\"Trust %\",\n\"Student Achievement Rating\",\n\"Average ELA Proficiency\",\n\"Grade 5 ELA 4s - All Students\",\n\"Grade 5 ELA 4s - Economically Disadvantaged\",\n\"Grade 6 ELA 4s - All Students\",\n\"Grade 6 ELA 4s - Black or African American\",\n\"Grade 6 ELA 4s - Hispanic or Latino\",\n\"Grade 6 Math 4s - All Students\",\n\"Grade 6 Math 4s - Hispanic or Latino\",\n\"Grade 6 Math 4s - Economically Disadvantaged\",\n\"Grade 7 ELA 4s - All Students\",\n\"Grade 8 ELA - All Students Tested\",\n\"Grade 8 ELA 4s - All Students\",\n\"Grade 8 ELA 4s - Hispanic or Latino\",\n\"Grade 8 ELA 4s - Economically Disadvantaged\",\n\"Grade 8 Math 4s - Economically Disadvantaged\",\n\"Reg_idx\"]]","05e3b31f":"X = School_Reg_train.iloc[:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]].values \ny = School_Reg_train.iloc[:, 26].values\n\nkfold = StratifiedKFold(n_splits=9)\nrandom_state = 2\nclassifiers = []\nclassifiers.append(RandomForestClassifier(random_state=random_state))\nclassifiers.append(LogisticRegression(random_state = random_state))\n\ncv_results = []\nfor classifier in classifiers :\n    cv_results.append(cross_val_score(classifier, X, y = y, scoring = \"accuracy\", cv = kfold, n_jobs=4))\ncv_means = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n\ncv_res = pd.DataFrame({\"CrossValMeans\":cv_means,\"CrossValerrors\": cv_std,\"Algorithm\":[\"RandomForest\",\"LogisticRegression\"]})\n\ng = sns.barplot(\"CrossValMeans\",\"Algorithm\",data = cv_res, palette=\"Set3\",orient = \"h\",**{'xerr':cv_std})\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation scores\")","0d6b2a37":"RFC = RandomForestClassifier()\n## Search grid for optimal parameters\nrf_param_grid = {\"max_depth\": [None],\n              \"max_features\": [1, 3, 10],\n              \"min_samples_split\": [2, 3, 10],\n              \"min_samples_leaf\": [1, 3, 10],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[300,1000],\n              \"criterion\": [\"gini\"]}\n\ngsRFC = GridSearchCV(RFC,param_grid = rf_param_grid, cv=9, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsRFC.fit(X,y)\nRFC_best = gsRFC.best_estimator_\n# Best score\ngsRFC.best_score_","c0d91d2f":"School_Reg = School_df[['School Name',\n'Grade High','Percent White','Percent Asian','Latitude','Longitude',\n\"Percent Black \/ Hispanic\",\n\"Student Attendance Rate\",\n\"Percent of Students Chronically Absent\",\n\"Rigorous Instruction %\",\n\"Collaborative Teachers %\",\n\"Supportive Environment %\",\n\"Effective School Leadership %\",\n\"Strong Family-Community Ties %\",\n\"Trust %\",\n\"Student Achievement Rating\",\n\"Average ELA Proficiency\",\n\"Grade 5 ELA 4s - All Students\",\n\"Grade 5 ELA 4s - Economically Disadvantaged\",\n\"Grade 6 ELA 4s - All Students\",\n\"Grade 6 ELA 4s - Black or African American\",\n\"Grade 6 ELA 4s - Hispanic or Latino\",\n\"Grade 6 Math 4s - All Students\",\n\"Grade 6 Math 4s - Hispanic or Latino\",\n\"Grade 6 Math 4s - Economically Disadvantaged\",\n\"Grade 7 ELA 4s - All Students\",\n\"Grade 8 ELA - All Students Tested\",\n\"Grade 8 ELA 4s - All Students\",\n\"Grade 8 ELA 4s - Hispanic or Latino\",\n\"Grade 8 ELA 4s - Economically Disadvantaged\",\n\"Grade 8 Math 4s - Economically Disadvantaged\",                       \n]]","1f588425":"School_Reg['Grade High'].value_counts()","9eae7bc4":"School_Reg_test = School_Reg[School_Reg['Grade High'] == '08']\nSchool_Reg_test.head()","f5a98984":"School_Reg_test = School_Reg_test.dropna(axis=0)","1a354a56":"X = School_Reg_test.iloc[:, [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]].values \ny_pred = RFC_best.predict(X)\ny_pred","da8bf013":"y_pred_df = pd.DataFrame({'Need':y_pred})\nSchool_Reg_test = School_Reg_test.reset_index(drop=True)\nFinal_df =  pd.concat(objs=[School_Reg_test, y_pred_df], axis=1)\nFinal_df.head()","b891cbd9":"layout = go.Layout(title='Overall Stats of schools in need', width=500, height=500, margin=dict(l=50), xaxis=dict(tickangle=-35))\ntrace1 = go.Bar(x=Final_df['Need'].value_counts().index, y=Final_df['Need'].value_counts().values, marker=dict(color=Final_df['Need'].value_counts().values,colorscale = 'Rainbow'))\n\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d66e65d3":"import folium\nfrom folium import plugins\nfrom io import StringIO\nimport folium \n\ncolors = ['red', 'yellow']\nd = (Final_df['Need']).astype('int')\ncols = [colors[int(i\/1)] for i in d]\n\nm = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\n\nfor lat, long, col in zip(Final_df['Latitude'], Final_df['Longitude'], cols):\n    #rown = list(rown)\n    folium.CircleMarker([lat, long], color=col, fill=True, radius=2).add_to(m)\nm","1fadf7c4":"v_features = Final_df.iloc[:, [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]].columns\nplt.figure(figsize=(18,8*4))\ngs = gridspec.GridSpec(9, 3)\nfor i, cn in enumerate(Final_df[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.distplot(Final_df[cn][Final_df.Need == 1], bins=50,color='blue')\n    sns.distplot(Final_df[cn][Final_df.Need == 0], bins=50,color='red')\n    ax.set_xlabel('')\n    ax.set_title(str(cn))\nplt.show()","f9b3b57d":"Schoolarray = []\nFeature1 = []\nSchoolarray_good = []\nFeature2 = []\n#School Performance in Tests\nFinal_df[\"SPT\"] = Final_df[\"Average ELA Proficiency\"] + Final_df[\"Grade 8 ELA 4s - All Students\"] + Final_df[\"Grade 5 ELA 4s - All Students\"] + Final_df[\"Grade 6 ELA 4s - All Students\"] + Final_df[\"Grade 6 Math 4s - All Students\"] + Final_df[\"Grade 7 ELA 4s - All Students\"]\n\n#Black\/Hispanic Students in Tests\nFinal_df[\"BHST\"] = Final_df[\"Grade 8 ELA 4s - Hispanic or Latino\"] + Final_df[\"Grade 6 Math 4s - Hispanic or Latino\"] + Final_df[\"Grade 6 ELA 4s - Black or African American\"] + Final_df[\"Grade 6 ELA 4s - Hispanic or Latino\"]\n\n#Effective School Management\nFinal_df[\"ESM\"] = Final_df[\"Collaborative Teachers %\"] + Final_df[\"Supportive Environment %\"] + Final_df[\"Effective School Leadership %\"] + Final_df[\"Trust %\"]\n\n#Performance of students who are Economically Disadvantaged\nFinal_df[\"EDS\"] = Final_df[\"Grade 6 Math 4s - Economically Disadvantaged\"] + Final_df[\"Grade 5 ELA 4s - Economically Disadvantaged\"] + Final_df[\"Grade 8 ELA 4s - Economically Disadvantaged\"] + Final_df[\"Grade 8 Math 4s - Economically Disadvantaged\"]","9c1fd176":"Event_loc_df = Final_df[Final_df['Need'] == 0 ]\n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=0).fit(Event_loc_df[['SPT']].values)\nlabels = kmeans.labels_\n\npct1 = Event_loc_df['SPT']\nlabel1 = labels\nlabel1 = np.array(label1)\npct1 = np.array(pct1)\nidx = pct1.argsort()\nlabel1, pct1 = [np.take(x, idx) for x in [label1, pct1]]\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.scatter(labels,Event_loc_df['SPT'],marker=\"o\", color=\"Blue\", s=10, linewidths=10)\nax.set_xlabel('Labels')\nax.set_ylabel('Overall School Performance in Tests')\nax.grid()\nplt.grid()","710346d7":"print ('Schools with poor performance in Tests is with label \"'+ str(label1[0])  + '\" and I have used below map to show them.')\nprint ('Hover over the marked places to see the school names')","0e167c2d":"m = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\nfor (no, school, label, lat , long) in zip(Event_loc_df['SPT'], Event_loc_df['School Name'], labels ,Event_loc_df['Latitude'], Event_loc_df['Longitude']):\n    if label == label1[0]:\n       Schoolarray.append(school)\n       Feature1.append('SPT')\n       folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='Red',\n                    popup = school\n                    ).add_to(m)\n        \n    if label == label1[len(label1) - 1]:\n        Schoolarray_good.append(school)\n        Feature2.append('SPT')\nm     ","6f80f071":"Math_df = pd.read_csv(\"..\/input\/new-york-state-math-test-results\/2013-2015-new-york-state-mathematics-exam.csv\")\nMath_df.tail()","1ca7e2a9":"Math_df['Grade'].value_counts()","9b9cf743":"Math_df['Category'].value_counts()","488f95b4":"plt.figure(figsize=(30,40))\ng = sns.FacetGrid(data=Math_df,row='Category',col='Year')\ng.map(sns.boxplot,'% Level 4')\n","316737da":"Math_df_g8 = Math_df[Math_df['Grade'] == '8']\nf,ax=plt.subplots(1,4,figsize=(25,12))\nsns.boxplot(y='Category',x='% Level 1',data=Math_df_g8,ax=ax[0])\nsns.boxplot(y='Category',x='% Level 2',data=Math_df_g8,ax=ax[1])\nsns.boxplot(y='Category',x='% Level 3',data=Math_df_g8,ax=ax[2])\nsns.boxplot(y='Category',x='% Level 4',data=Math_df_g8,ax=ax[3]);\n","9818a31f":"Event_loc_df = Final_df[Final_df['Need'] == 0 ]\n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=0).fit(Event_loc_df[['Percent Black \/ Hispanic']].values)\nlabels = kmeans.labels_\n\npct1 = Event_loc_df['Percent Black \/ Hispanic']\nlabel1 = labels\nlabel1 = np.array(label1)\npct1 = np.array(pct1)\nidx = pct1.argsort()\nlabel1, pct1 = [np.take(x, idx) for x in [label1, pct1]]\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.scatter(labels,Event_loc_df['Percent Black \/ Hispanic'],marker=\"o\", color=\"Blue\", s=10, linewidths=10)\nax.set_xlabel('Labels')\nax.set_ylabel('Percent Black \/ Hispanic')\nax.grid()\nplt.grid()","843c6e3e":"print ('Schools with highest no of \"Black\/hispanic\" is with label \"'+ str(label1[len(label1) - 1])  + '\" and i have used below map to show them')\nprint ('Hover over the marked places to see the school names')\n","99e4898a":"m = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\nfor (no, school, label, lat , long) in zip(Event_loc_df['Percent Black \/ Hispanic'], Event_loc_df['School Name'], labels ,Event_loc_df['Latitude'], Event_loc_df['Longitude']):\n    if label == label1[len(label1) - 1]:\n       Schoolarray.append(school)\n       Feature1.append('PBH')\n       folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='Red',\n                    popup = school\n                    ).add_to(m)\nm     ","1a0cd352":"Event_loc_df = Final_df[Final_df['Need'] == 0 ] \n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=0).fit(Event_loc_df[['BHST']].values)\nlabels = kmeans.labels_\n\npct1 = Event_loc_df['BHST']\nlabel1 = labels\nlabel1 = np.array(label1)\npct1 = np.array(pct1)\nidx = pct1.argsort()\nlabel1, pct1 = [np.take(x, idx) for x in [label1, pct1]]\n\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.scatter(labels,Event_loc_df['BHST'],marker=\"o\", color=\"Blue\", s=10, linewidths=10)\nax.set_xlabel('Labels')\nax.set_ylabel('Performance by Black\/Hispanic students')\nax.grid()\nplt.grid()","0dade6dc":"print ('Schools with poor performing Black\/Hispanic students in tests are with label \"'+ str(label1[0])  + '\" and I have used below map to show them.')\nprint ('Hover over the marked places to see the school names')\n","42eaed1f":"m = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\nfor (no, school, label, lat , long) in zip(Event_loc_df['BHST'], Event_loc_df['School Name'], labels ,Event_loc_df['Latitude'], Event_loc_df['Longitude']):\n    if label == label1[0]:\n       Schoolarray.append(school)\n       Feature1.append('BHST')\n       folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='Red',\n                    popup = school\n                    ).add_to(m)\n        \n    if label == label1[len(label1) - 1]:\n        Schoolarray_good.append(school)\n        Feature2.append('BHST')\nm     \n","43af5776":"Event_loc_df = Final_df[Final_df['Need'] == 0 ] \n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=0).fit(Event_loc_df[['EDS']].values)\nlabels = kmeans.labels_\n\npct1 = Event_loc_df['EDS']\nlabel1 = labels\nlabel1 = np.array(label1)\npct1 = np.array(pct1)\nidx = pct1.argsort()\nlabel1, pct1 = [np.take(x, idx) for x in [label1, pct1]]\n\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.scatter(labels,Event_loc_df['EDS'],marker=\"o\", color=\"Blue\", s=10, linewidths=10)\nax.set_xlabel('Labels')\nax.set_ylabel('Poor performing students who are Economically disadvantaged')\nax.grid()\nplt.grid()","541aaf47":"print ('Schools having poor performing students who are Economically Disadvantaged are with label \"'+ str(label1[0])  + '\" and I have used below map to show them.')\nprint ('Hover over the marked places to see the school names')","11ea3a8d":"m = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\nfor (no, school, label, lat , long) in zip(Event_loc_df['EDS'], Event_loc_df['School Name'], labels ,Event_loc_df['Latitude'], Event_loc_df['Longitude']):\n    if label == label1[0]:\n       Schoolarray.append(school)\n       Feature1.append('EDS')\n       folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='Red',\n                    popup = school\n                    ).add_to(m)\n        \n    if label == label1[len(label1) - 1]:\n        Schoolarray_good.append(school)\n        Feature2.append('EDS')\nm     ","5cb753e3":"Event_loc_df = Final_df[Final_df['Need'] == 0 ] \n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=0).fit(Event_loc_df[['ESM']].values)\nlabels = kmeans.labels_\n\npct1 = Event_loc_df['ESM']\nlabel1 = labels\nlabel1 = np.array(label1)\npct1 = np.array(pct1)\nidx = pct1.argsort()\nlabel1, pct1 = [np.take(x, idx) for x in [label1, pct1]]\n\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.scatter(labels,Event_loc_df['ESM'],marker=\"o\", color=\"Blue\", s=10, linewidths=10)\nax.set_xlabel('Labels')\nax.set_ylabel('Poorly managed School')\nax.grid()\nplt.grid()","80f47380":"print ('Poorly managed schools are with label \"'+ str(label1[0])  + '\" and i have used below map to show them')\nprint ('Hover over the marked places to see the school names')\n","d26812d9":"m = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\nfor (no, school, label, lat , long) in zip(Event_loc_df['ESM'], Event_loc_df['School Name'], labels ,Event_loc_df['Latitude'], Event_loc_df['Longitude']):\n    if label == label1[0]:\n       Schoolarray.append(school)\n       Feature1.append('ESM')\n       folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='Red',\n                    popup = school\n                    ).add_to(m)\nm     ","6e8c6dec":"Lib_df = pd.read_csv(\"..\/input\/nyc-queens-library-branches\/queens-library-branches.csv\")\nLib_df.head()","cc759d1c":"Lib_df.drop('notification', axis=1, inplace=True)\nLib_df = Lib_df.dropna(axis=0)","9ba5eb0b":"m = folium.Map(location=[40.75, -74],tiles='stamentoner')\n\nfor (_, (lat, long)) in Lib_df[['Latitude', 'Longitude']].iterrows():\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='#3186cc',\n                    fill_color='#3186cc',\n                   ).add_to(m)\nm","6eb49f0b":"colors = ['red', 'yellow']\nd = (Final_df['Need']).astype('int')\ncols = [colors[int(i\/1)] for i in d]\n\nm = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\n\nfor lat, long, col in zip(Final_df['Latitude'], Final_df['Longitude'], cols):\n    #rown = list(rown)\n    folium.CircleMarker([lat, long], color=col, fill=True, radius=2).add_to(m)\n    \nfor (_, (lat, long)) in Lib_df[['Latitude', 'Longitude']].iterrows():\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='#3186cc',\n                    fill_color='#3186cc',\n                   ).add_to(m)\nm","1c602d05":"Event_loc_df = Final_df[Final_df['Need'] == 0 ]\n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=8, random_state=0).fit(Event_loc_df[['Latitude', 'Longitude']].values)\nlabels = kmeans.labels_\n\ncolors = ['#d53e4f','#f46d43','#fdae61','#fee08b','#e6f598','#abdda4','#66c2a5','#3288bd']\nm = folium.Map(location=[40.75, -74],tiles='stamentoner')\n\nfor (lat, long, label) in zip(Event_loc_df['Latitude'], Event_loc_df['Longitude'], labels):\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color=colors[label],\n                    fill_color=colors[label],\n                   ).add_to(m)\n\nEvent_label = pd.DataFrame({'labels':labels})\nEvent_loc_df = Event_loc_df.reset_index(drop=True)\nEvent_final =  pd.concat(objs=[Event_loc_df, Event_label], axis=1)\n    \nEvent_lat = Event_final.groupby(['labels'])['Latitude'].mean()\nEvent_lon = Event_final.groupby(['labels'])['Longitude'].mean()\nEvent_lat = Event_lat.reset_index() \nEvent_lon = Event_lon.reset_index() \n\nfor (lat, long) in zip(Event_lat['Latitude'], Event_lon['Longitude']):\n    folium.CircleMarker([lat, long],\n                    radius=10,\n                    color='red',\n                    fill=True,\n                   ).add_to(m)\nm","569b4549":"Event_final1 = Event_final[['School Name','labels','Latitude','Longitude']]\nEvent_final1 = Event_final1.to_dict('records')\nEvent_lat1 = Event_lat.to_dict('records')\nEvent_lon1 = Event_lon.to_dict('records')\n\nfrom math import cos, asin, sqrt\ndef distance(lat1, lon1, lat2, lon2):\n    p = 0.017453292519943295\n    a = 0.5 - cos((lat2-lat1)*p)\/2 + cos(lat1*p)*cos(lat2*p) * (1-cos((lon2-lon1)*p)) \/ 2\n    return 12742 * asin(sqrt(a))\n\ndef closest(data, v1,v2):\n    return min(data, key=lambda p: distance(v1['Latitude'],v2['Longitude'],p['Latitude'],p['Longitude']))\n\nv = {'lat': 40.7622290, 'lon': -73.77}\nfor i in range(8) :\n   print(closest(Event_final1, Event_lat1[i],Event_lon1[i]))","2c3ca2d8":"eventid = [{'School Name': 'GOLDIE MAPLE ACADEMY', 'labels': 0, 'Latitude': 40.591349, 'Longitude': -73.78618900000001},\n{'School Name': 'I.S. 313 SCHOOL OF LEADERSHIP DEVELOPMENT', 'labels': 1, 'Latitude': 40.840589, 'Longitude': -73.90454},\n{'School Name': 'P.S. 178 SAINT CLAIR MCKELWAY', 'labels': 2, 'Latitude': 40.675234, 'Longitude': -73.915306},\n{'School Name': 'P.S. 108 ASSEMBLYMAN ANGELO DEL TORO EDUCATIONAL COMPLEX', 'labels': 3, 'Latitude': 40.795035, 'Longitude': -73.947872},\n{'School Name': 'P.S. 084 JOSE DE DIEGO', 'labels': 4, 'Latitude': 40.714822, 'Longitude': -73.963516},\n{'School Name': 'P.S.\/M.S. 147 RONALD MCNAIR', 'labels': 5, 'Latitude': 40.698026, 'Longitude': -73.740151},\n{'School Name': 'ICAHN CHARTER SCHOOL 3', 'labels': 6, 'Latitude': 40.856635, 'Longitude': -73.84304200000001},\n{'School Name': 'STATEN ISLAND COMMUNITY CHARTER SCHOOL', 'labels': 7, 'Latitude': 40.630238, 'Longitude': -74.08114300000001}]","617e95c4":"m = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor (lat, long, label) in zip(Event_loc_df['Latitude'], Event_loc_df['Longitude'], labels):\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color=colors[label],\n                    fill_color=colors[label],\n                   ).add_to(m)\n\nfor i in range(8) :\n    folium.Marker([eventid[i]['Latitude'],eventid[i]['Longitude']],\n                    popup=eventid[i]['School Name'],\n                    icon=folium.Icon(color='Red')\n                    ).add_to(m)\n\nm    ","56c91835":"Event_loc_df = Final_df[Final_df['Need'] == 0 ] \n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=0).fit(Event_loc_df[['Percent of Students Chronically Absent']].values)\nlabels = kmeans.labels_\n\npct1 = Event_loc_df['Percent of Students Chronically Absent']\nlabel1 = labels\nlabel1 = np.array(label1)\npct1 = np.array(pct1)\nidx = pct1.argsort()\nlabel1, pct1 = [np.take(x, idx) for x in [label1, pct1]]\n\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.scatter(labels,Event_loc_df['Percent of Students Chronically Absent'],marker=\"o\", color=\"Blue\", s=10, linewidths=10)\nax.set_xlabel('Labels')\nax.set_ylabel('Percent of Students Chronically Absent')\nax.grid()\nplt.grid()","113ccefd":"print ('Schools with highest no of absent percentage is with label \"'+ str(label1[len(label1) - 1])  + '\" and i have used below map to show them')\nprint ('Hover over the marked places to see the school names')\n","30e94602":"m = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\nfor (no, school, label, lat , long) in zip(Event_loc_df['Percent of Students Chronically Absent'], Event_loc_df['School Name'], labels ,Event_loc_df['Latitude'], Event_loc_df['Longitude']):\n    if label == label1[len(label1) - 1]:\n       Schoolarray.append(school)\n       Feature1.append('PSCA')\n       folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='Red',\n                    popup = school\n                    ).add_to(m)\nm     \n","08f85f13":"Safety_df = pd.read_csv(\"..\/input\/ny-2010-2016-school-safety-report\/2010-2016-school-safety-report.csv\")\nSafety_df.tail()","74fc836b":"Safety_df_filter = Safety_df[['School Year','Latitude', 'Longitude','Major N','Oth N','NoCrim N','Prop N','Vio N']]\nSafety_df_filter = Safety_df_filter[Safety_df_filter['School Year'] == '2015-16']\n\nSafety_df1 = Safety_df_filter[Safety_df_filter['Major N'] > 1.0 ]\nSafety_df2 = Safety_df_filter[Safety_df_filter['Oth N'] > 1.0 ]\nSafety_df3 = Safety_df_filter[Safety_df_filter['NoCrim N'] > 1.0 ]\nSafety_df4 = Safety_df_filter[Safety_df_filter['Prop N'] > 1.0 ]\nSafety_df5 = Safety_df_filter[Safety_df_filter['Vio N'] > 1.0 ]\n\nSafety_df1 = Safety_df1.dropna(axis=0)\nSafety_df2 = Safety_df2.dropna(axis=0)\nSafety_df3 = Safety_df3.dropna(axis=0)\nSafety_df4 = Safety_df4.dropna(axis=0)\nSafety_df5 = Safety_df5.dropna(axis=0)\n\ncount1 = Safety_df1['Major N'].values\ncount2 = Safety_df2['Oth N'].values\ncount3 = Safety_df3['NoCrim N'].values\ncount4 = Safety_df4['Prop N'].values\ncount5 = Safety_df5['Vio N'].values","e181f070":"m = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor i in range(0,Safety_df1['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df1.iloc[i]['Latitude'], Safety_df1.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count1[i])*100,\n      color='crimson',\n      fill=True,\n      fill_color='crimson'\n   ).add_to(m)\n\nfor i in range(0,Safety_df2['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df2.iloc[i]['Latitude'], Safety_df2.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count2[i])*100,\n      color='yellow',\n      fill=True,\n      fill_color='yellow'\n   ).add_to(m)\n\nfor i in range(0,Safety_df3['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df3.iloc[i]['Latitude'], Safety_df3.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count3[i])*100,\n      color='purple',\n      fill=True,\n      fill_color='purple'\n   ).add_to(m)\n\nfor i in range(0,Safety_df4['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df4.iloc[i]['Latitude'], Safety_df4.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count4[i])*100,\n      color='green',\n      fill=True,\n      fill_color='green'\n   ).add_to(m)\n\nfor i in range(0,Safety_df5['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df5.iloc[i]['Latitude'], Safety_df5.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count5[i])*100,\n      color='blue',\n      fill=True,\n      fill_color='blue'\n   ).add_to(m)\n\nm","fa9e2eff":"Safety_df['Major N'].fillna(0, inplace=True)\nSafety_df['Oth N'].fillna(0, inplace=True)\nSafety_df['NoCrim N'].fillna(0, inplace=True)\nSafety_df['Prop N'].fillna(0, inplace=True)\nSafety_df['Vio N'].fillna(0, inplace=True)\n\nSafety_df['Risk_idx'] = (2*Safety_df['Major N']) + (1.5*Safety_df['Vio N']) + Safety_df['Prop N'] + (0.5*Safety_df['Oth N'])+(0.1*Safety_df['NoCrim N'])\n\nSafety_raw = Safety_df.groupby(['Location Name', 'School Year'])['Risk_idx'].sum().unstack()\nSafety_raw.columns.name = None      \nSafety_raw = Safety_raw.reset_index()  \nSafety_raw = Safety_raw[['Location Name','2013-14','2014-15','2015-16']]\nSafety_raw['2013-14'].fillna(0, inplace=True)\nSafety_raw['2014-15'].fillna(0, inplace=True)\nSafety_raw['2015-16'].fillna(0, inplace=True)\nFeature = Safety_raw['Location Name']\nY14 = Safety_raw['2013-14']\nY15 = Safety_raw['2014-15']\nY16 = Safety_raw['2015-16']\n\nFeature = np.array(Feature)\nY14 = np.array(Y14)\nY15 = np.array(Y15)\nY16 = np.array(Y16)\n\nidx = Y16.argsort()\nFeature, Y14, Y15, Y16 = [np.take(x, idx) for x in [Feature, Y14, Y15, Y16]]\n\nFeature = Feature[2260:]\nY14 = Y14[2260:]\nY15 = Y15[2260:]\nY16 = Y16[2260:]\n\ns = 1\nsize=[]\nfor i, cn in enumerate(Y16):\n     s = s + 1        \n     size.append(s)\n\nfig, ax = plt.subplots(figsize=(13, 8))\nax.scatter(Y16,size,marker=\"o\", color=\"lightBlue\", s=size, linewidths=10)\nax.set_xlabel('Risk Index')\nax.set_ylabel('')\nax.set_title('School locations with high Risk index Year 15-16')\n#ax.spines['right'].set_visible(True)\nax.grid()\nfor i, txt in enumerate(Feature):\n      ax.annotate(txt, (Y16[i],size[i]),fontsize=12,rotation=0,color='Green')\n","f1da7184":"Safety_school_merged = pd.merge(Safety_df, Safety_raw, how='left', left_on='Location Name', right_on='Location Name')\nSafety_school_merged = Safety_school_merged.drop_duplicates(subset=['Location Name'])\nRisky_areas = Safety_school_merged[Safety_school_merged['2015-16'] > 30]\n\nm = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor (lat, long, label) in zip(Event_loc_df['Latitude'], Event_loc_df['Longitude'], labels):\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color=colors[label],\n                    fill_color=colors[label],\n                   ).add_to(m)\n\nfor (lat, long,name) in zip(Risky_areas['Latitude'], Risky_areas['Longitude'],Risky_areas['Location Name']):\n    folium.Marker([lat, long],\n                   icon=folium.Icon(color='Red'),\n                   popup= name,\n                    ).add_to(m)\n\nm    ","46641251":"medicaid_df = pd.read_csv(\"..\/input\/nyc-medical-assistance-program-medicaid-offices\/medical-assistance-program-medicaid-offices.csv\")\nmedicaid_df","29260c88":"m = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor (lat, long, label) in zip(Event_loc_df['Latitude'], Event_loc_df['Longitude'], labels):\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color=colors[label],\n                    fill_color=colors[label],\n                   ).add_to(m)\n\nfor (lat, long,name) in zip(medicaid_df['Latitude'], medicaid_df['Longitude'],medicaid_df['Name of Medicaid Offices']):\n    folium.Marker([lat, long],\n                   icon=folium.Icon(color='Red'),\n                   popup= name,\n                    ).add_to(m)\n\nm    ","ee003cbd":"SchoolArray_df = pd.DataFrame({'Schools':Schoolarray,\n                              'Features':Feature1})\nSchoolArray_df1 = SchoolArray_df.groupby(['Schools','Features'])['Features'].count().unstack()\nSchoolArray_df1.columns.name = None      \nSchoolArray_df1 = SchoolArray_df1.reset_index()  \nSchoolArray_df1 = SchoolArray_df1[['Schools','BHST','EDS','SPT','ESM','PBH','PSCA']]\nSchoolArray_df1 = SchoolArray_df1.fillna(0)\nSchoolArray_df1['Occurance'] = SchoolArray_df1['BHST'] + SchoolArray_df1['EDS'] + SchoolArray_df1['ESM'] + SchoolArray_df1['PBH']+ SchoolArray_df1['PSCA'] + SchoolArray_df1['SPT']\nSchoolArray_df1 = SchoolArray_df1.sort_values(['Occurance'], ascending=False)\n#f, ax = plt.subplots(figsize=(15,50)) \n#g = sns.heatmap(SchoolArray_df1,annot=True,cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ncm = sns.light_palette(\"Yellow\", as_cmap=True)\nSchoolArray_df1.style.background_gradient(cmap=cm)","e8f4b0b3":"index = SchoolArray_df['Schools'].value_counts().index\nvalue = SchoolArray_df['Schools'].value_counts().values\nSchool_ranking = pd.DataFrame({'Schools':index,\n                          'Occurrence':value})\nSchool_ranking_loc = pd.merge(School_ranking, School_df, how='left', left_on='Schools', right_on='School Name')\nSchool_ranking[School_ranking['Occurrence']== 6]","701c2d05":"School_ranking_loc1 = School_ranking_loc[School_ranking_loc['Occurrence']>5]\nm = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor (lat, long,name) in zip(School_ranking_loc1['Latitude'], School_ranking_loc1['Longitude'],School_ranking_loc1['Schools']):\n    folium.Marker([lat, long],\n                   icon=folium.Icon(color='Red'),\n                   popup= name,\n                    ).add_to(m)\n\nm","05594ed1":"SchoolArray_good_df = pd.DataFrame({'Schools':Schoolarray_good,\n                                  'Features':Feature2})\nSchoolArray_df2 = SchoolArray_good_df.groupby(['Schools','Features'])['Features'].count().unstack()\nSchoolArray_df2.columns.name = None      \nSchoolArray_df2 = SchoolArray_df2.reset_index()  \nSchoolArray_df2 = SchoolArray_df2[['Schools','BHST','EDS','SPT']]\nSchoolArray_df2 = SchoolArray_df2.fillna(0)\nSchoolArray_df2['Occurance'] = SchoolArray_df2['BHST'] + SchoolArray_df2['EDS'] + SchoolArray_df2['SPT']\nSchoolArray_df2 = SchoolArray_df2.sort_values(['Occurance'], ascending=False)\n#f, ax = plt.subplots(figsize=(15,30)) \n#g = sns.heatmap(SchoolArray_df2,annot=True,cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ncm = sns.light_palette(\"Yellow\", as_cmap=True)\nSchoolArray_df2.style.background_gradient(cmap=cm)","d23b0081":"SchoolArray_good_df = pd.DataFrame(Schoolarray_good,columns=['schools'])\nindex = SchoolArray_good_df['schools'].value_counts().index\nvalue = SchoolArray_good_df['schools'].value_counts().values\ngood_School_ranking = pd.DataFrame({'schools':index,\n                          'occurrence':value})\ngood_School_ranking_loc = pd.merge(good_School_ranking, School_df, how='left', left_on='schools', right_on='School Name')\n\nSchool_ranking_loc2 = good_School_ranking_loc[good_School_ranking_loc['occurrence']>2]\nm = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor (lat, long,name) in zip(School_ranking_loc2['Latitude'], School_ranking_loc2['Longitude'],School_ranking_loc2['schools']):\n    folium.Marker([lat, long],\n                   icon=folium.Icon(color='Red'),\n                   popup= name,\n                    ).add_to(m)\n\nm","c8610bf5":"PoortoAverage_schools = pd.merge(SchoolArray_df1, School_df, how='left', left_on='Schools', right_on='School Name')\nGoodtoAverage_schools = pd.merge(SchoolArray_df2, School_df, how='left', left_on='Schools', right_on='School Name')","4fd5a493":"PoortoAverage_schools[(PoortoAverage_schools['PBH']== 1) & (PoortoAverage_schools['BHST']== 1)].tail(5)","04e6a6f8":"PoortoAverage_schools[(PoortoAverage_schools['SPT']== 0) & (PoortoAverage_schools['ESM']== 1)].tail(5)","fb10aa8b":"GoodtoAverage_schools[(GoodtoAverage_schools['EDS']== 1)].tail(5)","655c78e2":"PoortoAverage_schools.to_csv(\"PoortoAverage_list.csv\")\nGoodtoAverage_schools.to_csv(\"GoodtoAverage_list.csv\")","7f644405":"**Students who are Economically disadvantaged**\n---------------\n**Trace the poor perfroming students who are Economically Disadvantaged  from the needy lot.  I have used Kmeans algorithm with 3 clusters to label the schools here.**","f0c97e4d":"**Below is the Final dataframe with the schools marked as '1' and '0' ** <br><br>\n\n**'0' -> Need helping aid from PASSNYC **<br>\n**'1' -> No need of helping aid from PASSNYC **<br>","89ac873c":"**Hover over the marked places to see the labels **","4fb7e020":"What could be the real reason behind the growing percentage of Students Chronically Absent in these schools.<br>\n**Is it related to School safety and Students Health? Lets study these two factors in the next sections**\n\n**Making Schools Safer**\n----------------------\nBullying is one of the causes of violent crime in schools, and it constitutes a significant challenge for school safety and directly undermines the creation of an enabling school environment that supports personal growth and development","1fcfbea6":"We have students from different Race and different grades and data from Year 2013 to 2015 , Lets try to visualize them in one go. <br><br>\n\n**% Level 4 : percent student from different category**\n","9af30f30":"**List of schools which are comparatively doing good than the one we have listed above but failed to improve SHSAT participation **\n     --------- \n   ![](https:\/\/user-images.githubusercontent.com\/41537134\/43735523-6b6c5fe4-99d8-11e8-918b-41f36151f300.png)","e5caf751":"**Hover over the marked places to see the labels **","163171ff":"**Solution 3**\n    -----\n* Schools in the vicinity of these crime scenes can think of building their own **SWAT Team **(Teachers of School and other staff together can be part of this team)\n* PASSNYC in collaboration with Tech company can think of developing an **APP  to help Students in moment of crisis**.\n* The moment these students feels unsafe they should be able to send **SOS signals with their coordinates** to the SWAT team if they are within school premises or the Local police if out of the school\n","9c805c09":"**Rating stats of Schools**","bb4353a5":"**Selection of important features for our prediction model**","9caae364":"**This quick check hints towards use of Logistic regression for this problem**<br>\nBut in the next section **we will use grid search to tune our random forest model to improve its accuracy**. \nNote: You can add few more algorithms here for comparison and can choose any of them to train further with appropriate parameters","57739330":"**We see no of students from different grades fall in different levels ** <br>\nLets understand these different levels <br>\n\n**NYS Level 1:** Students performing at this level are well below proficient in standards for their grade. They demonstrate limited knowledge, skills, and practices embodied by the New York State P-12 Common Core Learning Standards for Mathematics that are considered insufficient for the expectations at this grade.   <br><br>\n**NYS Level 2:** Students performing at this level are partially proficient in standards for their grade. They demonstrate knowledge, skills, and practices embodied by the New York State P-12 Common Core Learning Standards for Mathematics that are considered partial but insufficient for the expectations at this grade. Students performing at Level 2 are considered on track to meet current New York high school graduation requirements but are not yet proficient on Common Core Learning Standards at this grade. <br><br>\n**NYS Level 3:** Students performing at this level are proficient in standards for their grade. They demonstrate knowledge, skills, and practices embodied by the New York State P-12 Common Core Learning Standards for Mathematics that are considered sufficient for the expectations at this grade. <br><br>\n**NYS Level 4:** Students performing at this level excel in standards for their grade. They demonstrate knowledge, skills, and practices embodied by the New York State P-12 Common Core Learning Standards for Mathematics that are considered more than sufficient for the expectations at this grade<br><br>. ","7ee78532":"**How PASSNYC can use these list of schools simply by focusing on couple of Features to quickly get the schools they need to reach out**\n -----------\n** Below are few example how it can be used**\n\n1) Schools with more no of Black\/Hispanic students and very less no of them making it to level 4 in tests (will show last 5 school just for demonstration purpose)","5426deb6":"**We see Schools in less number as SHSAT participation index increase.** <br>\n**and Our goal is to bring more schools in upper half of the bubble plot**\n----------","2ee8be6c":"**Percent students  who registered for the SHSAT from Enrolled lot** (Yearwise data)","0eefe9ac":"3) Schools with Good performance by Economically disadvataged students --- PASSNYC can quickly reach out to these schools to help\/motivate students to take SHSAT.<br>\n  **Note: in the below case Use of value \"1\" is to filter good performing schools, dataframe used is also different**","d3a63060":"<b><div  style= \"text-align:center\"> We see very few percentage of students actually make it in Level 4 when they reach Grade 8   <\/div><\/b>\n![](https:\/\/s.hswstatic.com\/gif\/countries-athletes-2.jpg)","cf20d5f5":"**Lets compare 2 popular algorithms which are used mainly to solve classification problems (Random Forest and Logistic Regression)**","b9291bfe":"**Around 250+ schools are in need and need an improvement on the features we selected in the model for prediction to come close to school with good performance** \n----------------\n**Note : We can use above classification model with different threshold value and can identify schools where you intend to increase the SHSAT participation.**\n\nLets visualize these schools on Folium map (Marked in Red)","e5bc472b":"**Around 6% schools are community schools.**","dd7bc13f":"**Black\/Hispanic Students in Tests**\n -------------\n**Trace the schools having poor performing Black\/Hispanic students in tests from the needy lot.  I have used Kmeans algorithm with 3 clusters to label the schools here.**","45a4ff7c":"**Schools showing  improvement over the years in making students take the SHSAT exam from the enrolled lot** (expressed in Percentage)","68b14b4e":"**Schools doing good in all 3 features are shown on below map**","cd6e6529":"**I have merged Poor and good performance school list again with School dataset to have the necessary information from this dataframe like Adress and Boroughs and Districts**","cfd2d3db":"**Fostering the love of reading and Learning  and data science solution : Location finder**\n-------------------------\n\nFew things are crystal clear that we have to Educate all elementary and middle schoolers well and you will naturally have higher representation from the Black and Hispanic community.\nEfforts need to be employed to improve the elementary and middle schools in more districts so that more African American and Hispanic children can succeed at the SHSAT <br>\n\n**Next public data set i have added here is 'nyc-queens-library-branches' ** <br> \nThe Queens Library (QL), formerly known as the Queens Borough Public Library, is the public library for the Borough of Queens, and one of three public library systems serving New York City. It is one of the largest library systems in the world by circulation, having loaned 13.5 million items in the 2015 fiscal year, and one of the largest in the country in terms of the size of its collection. According to its website, the library holds about 7.5 million items, of which 1.4 million are at its central library in Jamaica, Queens.[1] It was named \"2009 Library of the Year\" by Library Journal. <br><br>\n\n\nWe have visually seen that most of the needy schools are from Boroughs other than Queens. <br>\nLets analyse if this is true \n![](https:\/\/www.specialtouchhomecare.com\/wp-content\/uploads\/2017\/12\/City-Map.png)\n","e32175aa":"**I have shown all the crime related incidents with their number of occurence for Year 2015-2016**\n----------------------------------------------------------------------------------\n\n**number of major crimes => Crimson**  <br>\n**number of other crimes => Yellow** <br>\n**number of non-criminal crimes => Purple** <br>\n**number of property crimes => Green** <br>\n**number of violent crimes => Blue **","f8bca820":"**Bubble plot showing Schools with SHSAT participation**  <br>\nI have used Economic index here on X axis just for demonstration purpose","23bc6c07":"**I have explained how I am going to identify schools performing poorly in those specific area using below flow.**\n   ---------\nI have picked  ELA Proficiency feature for demonstration purpose\n![](https:\/\/user-images.githubusercontent.com\/41537134\/43354368-b55d4fea-9268-11e8-89d2-5ef1946b0004.jpg)\n\n","ea3e365c":"**Solution 4**\n    -----\n* PASSNYC with help of Teachers of these needy school to regularly councel parents to make them aware of the different state sponsered plans.\n* PASSNYC in collaboration with Tech company can think of developing an **APP  to assist parents in knowing their spending on healthcare costs**.  To **alarm **them when they are **about to run out of CHIP fund**\n* PASSNYC to help parents in acquiring Assistive technologies for differently abled students to continue their life as a normal kid \n > Speech-Recognition software <br>\n > Text-to-Speech software <br>\n > Visual Aids <br>\n > Audio Aids <br>\n > Physical Aids\n","c6844c8e":"**So we have total 21 rows to work on** ","84eeacf5":"**Questions and challenges** <br>\n1) how do we empower them with all the necessary things which they miss at the early age to prepare for ELA and Maths exam<br>\n2) Do we only have to focus when they enter 8th grade or we need to start very early to stregthen the foundation to have them well equipped with skills to compete in future. <br>\n3) Economically underpriviledged sutdents do have to face many challenges in their early age and  it does make them <br>\n> miss the school > which impacts their school attendance <br>\n> and are left with less time to study and practice > which impacts their score \n\n","083f235f":"**Hover over the marked places to see the labels **","c044c6b1":"**I have shown above Schools on Map** ","6eaa0363":"**List of schools from Poor performing to Average performing schools based on the occurance of these schools in the features i discussed so far**\n       ---------\n1. If you have schools in all 6 features then occurance column will have the value 6 .\n1. If school performance is poor in 2 features it will have the occurance value of 2 that mean it may have performed better or average in rest 4 features. \n1.  You will find these schools in descending order of Occurance column value.  \n![](https:\/\/user-images.githubusercontent.com\/41537134\/43677328-dd22a65a-981d-11e8-8033-1e48d3281894.png)\n**I have addressed 6 features so far in this kernel and below is list of features **.  <br>\n1. BHST -> Black\/Hispanic students in Tests\n1. EDS   -> Economically disadvantaged Students in Tests\n1. ESM   -> Effective School Management\n1. PBH    -> Percent Black\/Hispanic student in Schools <br>\n** (have considered Schools with higher no of Black\/Hispanic students , have added this feature for BHST feature to check the contradiction) \nFor eg. To serve Black\/hispanic students PASSNYC can consider schools listed in the features BHST and PBH . Inspite of large no of black\/hispanic students in this school if very few of them manage to get in level 4 then its a worrying factor.**\n\n1. PSCA  -> Percent students Chronically absent \n1. SPT     -> Overall School performance in Tests <br>\n\n**PASSNYC can focus on specific set of features in which schools are marked for poor performance and take appropriate actions.** <br>\n**Below is the list you can refer to identify schools doing poor to average in above features  **","4e54699e":"**Please find details of schools where we can organize these events**\n--------------------","c008c866":"**Lets keep only data from 8th Grade**","9fe89ab0":"**from Continuous to categorical**\n    ------\nwhere <br>\n1 depicts school with strength between 0 to 50 students in different grades <br>\n2 depicts school with strength between 50 to 100 students in different grades <br>\n3 depicts school with strength between 100 to 150 students in different grades <br>\n4 depicts school with strength between 150 to 200 students in different grades <br>\n5 depicts school with strength more than 200 in different grades <br>\n0 depicts school with 0 students in different grade\n","38f182a1":"**Healthcare Outreach program**\n    ---------\n   Healthcare in USA has seen various revolution in healthcare industr and one of them is Affordable care act or OBAMACARE (famously known) <br>\n   How to make sure Students who hails from a poor family background avails the benfit of CHIP (Children's Health Insurance Program) and different medicaid programs? <br>\n   What is there **for Differently abled students ?** <br> \n   Below is the **exhaustive list of Medicaid offices** around these schools. \n    ","efb66254":"**Percent students  who took SHSAT from the  registered  lot** (Yearwise data)","fd7fc27f":"**Schools performance in Tests**\n------------\n**Trace the schools with poor performance in Tests from the needy lot.  I have used Kmeans algorithm with 3 clusters to label the schools here.**","0a8c0bcd":"**Below is the  bar plot  showing the top cities with maximum no of schools **","b1ec2fa9":"2)  Average\/good performance in Tests by poorly managed Schools --- PASSNYC can quickly reach out to these schools to motivate students to take SHSAT.","4f59e5c3":"The test is given in late October (8th grade) or early November (9th grade and 8th grade with IEP's, 504 plans, and ELL). <br>\nSource : wikipedia","4865956d":"**Distribution of different Races in Community school**","c8452345":"**Identification of Risky School Areas**\n  ------------------\n  **Lets find out top 20 Risky School areas with severe, maximum no of crimes around them for Year 15-16**","f31f8566":"**Threshold value selection for SHSAT participation ** <br><br>\nLets build our model on these 21 entries we have and We will decide our threshold value for percent participation in SHSAT and number below which will qualify the schools for helping aid from PSSNYC. <br>\nlets assume 20% participation from the enrolled lot to be threshold value, will use 0 and 1 to be our target value . ","eb7b85f4":"**Schools appeared in all the 6 features **","385a0f03":"Computation skills plays pivotol role in making the student ready to take SHSAT exam and above analysis reiterates the same thing<br>\n Average ELA and Maths Proficiency is something manages to grab the eyeball . Schools in need does have to do better in ELA and Maths and Teachers need to pay attention to these areas<br>\nNo of black and hispanic students presence in Level 4 (for Maths and ELA) does make the difference.\n\n**Prepare list of poor performing schools which need urgent involvement by PASSNYC to help improve them in specific area.**\n-------------------------------\n\n**Every school has its own strengths and weaknesses**. Based on above analysis we need to figure out weak points in those schools.\n\n**For eg Schools with no effective leadership can hamper the SHSAT participation**\n     no matter how good school has performed in Maths test.\n     **If school leadership is lethargic in their approach to motivate and help kids** in enrolling in SHSAT exam **as a result we can see less SHSAT percent** inspite of students performing good in their grade level exams\n\n![](https:\/\/cdn.xl.thumbs.canstockphoto.com.sg\/leadership-bad-leadership-eps-vectors_csp23519932.jpg)","49b28efc":"**Classification Model ** <br>\n-----------------------\n_______________________","aa84a4ad":"**Feature Engineering ** <br>\n          ----------\nWe have test results data for Grade 3 to Grade 8 but the number of students taking those tests and no of students falling in level 4 in ELA and Maths in this dataset will not be useful in prediction. They should be expressed in percentage for fare comparison between the schools and will be useful Precition model <br><br>\nNote: Click on the code below to view the feature engineering part ","0a3edf2b":"**Activities I am planning to perform in this kernel **\n--------------------\n**Data Exploration , Feature engineering **\n1. Take a look at the School info data\n1. Find out what we have in school data thru EDA\n1. Take a look at the SHSAT registration data\n1. Find out which column can be used to connect both the datasets\n\n**Modeling , Solution and Identify problems or trend**\n1. Build your model on merged data from School info and Registration data\n1.  Run the model on rest of the school data to find out the schools who may need an assistance for SHSAT exam\n1. Out of the needy lot provide list of poor\/average\/good performing Schools.\n1.  identify the problem or trend and provide solution using below datasets <br>\n    **Library dataset , NYC maths test result dataset , Safety report dataset , Medicaid office dataset**\n ![](https:\/\/user-images.githubusercontent.com\/41537134\/43253095-6a223720-90c4-11e8-9c1f-d5640af382ad.jpg)\n","2648246f":"**No of schools with Highest grade and lowest grades** <br>\nStudents in grades 8 or 9 who wish to apply to New York City\u2019s Specialized High Schools must take the Specialized High School Admissions Test (SHSAT) and <br>\nrank their choices of schools in order of preference.  <br> <br>\nFrom below Bar chart we can see we have around 500 schools with Grade 8 ","a9cb7395":"**Feature Importance**\n    -------","e05a7e32":"**This time we got a score more than 0.75 which is a good number to move ahead **<br>\nLets Use above model on the full dataset of School and lets identify the schools Who need an attention from PASSNYC","43018065":"No wonder Economic need index is inversely proportional to School income for both Community school and Non Community school. You can see Community school's income do not go beyond 40k  to 50k dollar.","f3d5fa06":"**Poorly managed Schools**\n--------------\n**Trace the poorly managed Schools from the needy lot.  I have used Kmeans algorithm with 3 clusters to label the schools here.**","e6ca7558":"**PASSNYC**\n    ------\nPASSNYC is a not-for-profit organization that facilitates a collective impact that is dedicated to broadening educational opportunities for New York City's talented and underserved students. New York City is home to some of the most impressive educational institutions in the world, yet in recent years, the City\u2019s specialized high schools - institutions with historically transformative impact on student outcomes - have seen a shift toward more homogeneous student body demographics.\n\nPASSNYC uses public data to identify students within New York City\u2019s under-performing school districts and, through consulting and collaboration with partners, aims to increase the diversity of students taking the Specialized High School Admissions Test (SHSAT). By focusing efforts in under-performing areas that are historically underrepresented in SHSAT registration, we will help pave the path to specialized high schools for a more diverse group of students.\n\n**Problem Statement**\n-------\nPASSNYC and its partners provide outreach services that improve the chances of students taking the SHSAT and receiving placements in these specialized high schools. The current process of identifying schools is effective, but PASSNYC could have an even greater impact with a more informed, granular approach to quantifying the potential for outreach at a given school. Proxies that have been good indicators of these types of schools include data on English Language Learners, Students with Disabilities, Students on Free\/Reduced Lunch, and Students with Temporary Housing.\n\n**The Objective of this notebook would be to assess the needs of students by using publicly available data to quantify the challenges they face in taking the SHSAT.And I will try to provide hint or solution to tackle this problem by importing 2 or more datasets **<br><br>\n**Below are the datasets available to us and I have added couple of more datasets for additional insights **","991bbf0d":"**Economic Need Assessment** <br>\nLets compare the School income of Community school with private schools and their economic index ","9cd42518":"Lets first explore the School info dataset to know more about the schools before we link them to Specialized High School Test dataset","c6ee9dd5":"**Overall stats of schools in need **","2c6221d5":"Lets see above libraries are near to the Schools we found in Needy category thru our prediction model.","ad0acd08":"**Distribution of different Races in Non-Community school**","74e7ce66":"Lets Analyse the all the features used in Predicting the School in need thru Distplot analysis <br><br>\n**School in Need => marked in Red ** <br>\n**School not in Need => marked in Blue**","4ee63ebd":"Registration data alone is not very intuitive and we need to merge this dataset with School data to find the relation between the economic need index and the percent improvement in the SHSAT participation or if this is not enough we will keep adding other columns in our analysis. <br><br>\n**Lets first join both dataset on Location code and DBN **","7ee11448":"\n**Solution 2**\n---------\nPASSNYC can collaborate with Best tutions institutes who prepare students for SHSAT(normally the fees of these classes is very high) .\nPASSNYC can think of providing subsidy\/Scholarship program in the tution fees to prepare for SHSAT exams.","1e54b0ab":"We can drop the features which wont contribute much for the prediction.","717a729c":"  **I have imported Math test result of students from NYC dataset for additional inputs which may be useful to identify the students who are in need** ","4da515b0":"Lets map identical features to single meaningful features as follows and apply Kmeans cluster to classify the schools into 3 categories <br>\nto identify schools with lowest performance. <br>\n**I have introduced below 4 new features **\n1. School Performance in Tests\n1. Effective School Management\n1. Black\/Hispanic Students in Tests\n1. Performance of students who are Economically Disadvantaged\n","ed6ca234":"**Percent Students Chronically Absent**\n------------\n\n**Trace the schools with high no of 'Percent of Students Chronically Absent' from the needy lot.  I have used Kmeans algorithm with 3 clusters to label the schools here.**","17d373ac":"**LIbraries             => Marked in Blue  ** <br>\n**Needy schools => Marked in Red** <br> <br>\n\nWe have a very Interesting finding here. We see most of the Needy schools here are far away from these libraries. i.e. they are from  <br>\n1. Manhattan\n1. The Bronx\n1. Brooklyn\n1. Kings\n1. Staten Island\n\nDoes this warrant any action for PASSNYC to help these schools to have Libraries like the one we have in Queens ? <br>\nIs it convenient to set up new Libraries in the vicinity of the schools in need or we have to think of some different approach to attrack the crowd  ? <br>\n\nBelow are few ideas\/Solutions i have in my mind. <br> \n**Solution 1**\n---------\n**Having a Quarterly Event** <br>\nWe can think of having a quarterly event for all the needy schools at multiple location (Preferably a School) <br>\nAgenda of this event would be\n* Invite Community\/Business leaders to share\/provide ideas on finding the solutions for schools.\n* Invite alumni who has taken SHSAT exam in past and are successful. Ask them to share How they crossed all the barriers and went ahead in their life. \n* Awards and certificate for better performing schools.\n* Survey form to be filled by Parents at the end of the event  \n* Use survey form to quantify the success of this event and note down problems which are not addressed. <br>\n\n![](http:\/\/sunnibrown.com\/wp-content\/uploads\/2011\/09\/20110907-071438.jpg)\n     \n**Where to arrange these events? How to identify these multiple locations so that we can get maximum participation from all the needy schools.   **\n**Clustering of schools and finding the common locations with help of Data science.** <br>\n         -------------------------\n**Below is the location finder algorithm ** <br>\n\n**(Marked in Red is where we can organize these event and these are not the real location so we will develop one more algorithm to find the Schools which are equidistant from the schools in Clusters)**\n\n![](https:\/\/user-images.githubusercontent.com\/41537134\/43044461-e9280fbc-8dc3-11e8-9a89-bf066f77562a.png)\n","117f6f57":"**Random Forest** <br> \n     Search grid for optimal Parameters ","99c4d358":"**Percent Black \/ Hispanic**\n------------\n**Trace the schools with high no of 'Percent Black \/ Hispanic' from the needy lot.  I have used Kmeans algorithm with 3 clusters to label the schools here.**","04d7426e":"**Statistics showing overall Students taking tests in different grades**\n      -----\n **I am going to keep bin size 5 to identify the different ranges to categorize schools as small size , mid size , large size **","de817f29":"**I have considered below 3 features in which Schools are performing good but lack SHSAT participation.** <br>\n\n1. BHST -> Black\/Hispanic students in Tests\n1. EDS   -> Economically disadvantaged Students in Tests\n1. SPT     -> Overall School performance in Tests <br>\n\n**PASSNYC can target the specific audience by looking at below list which shows schools doing good in specific Features or in all features.**","0a7a89ec":"**Lets explore the SHSAT Registration datastet **\n    -----------","ed423121":"**Lets limit our analysis only for Grade 8 student with data from all levels of Maths test**","83f86193":"**To Measure the Success rate of students taking SHSAT exam I have introduced below Columns in above Dataframe and we will use Column Reg_idx_ here for our modeling** <br>\n--------------------\n**Reg_idx = Registration Index** <br>\n\nRegistration_df[\"percent1\"] = Registration_df[\"Number of students who took the SHSAT\"]\/Registration_df[\"Number of students who registered for the SHSAT\"] <br>\nRegistration_df[\"percent2\"] = Registration_df[\"Number of students who registered for the SHSAT\"]\/Registration_df[\"Enrollment on 10\/31\"] <br>\nRegistration_df[\"Reg_idx\"] = Registration_df[\"percent1\"]*Registration_df[\"percent2\"] <br>","755e922b":"**Asians and Whites are comparatively better in Maths than the rest . Using above stats we can Target specific audience for preparation SHSAT.** <br>\n**We see most of the Black and Hispanic students fall in Level 1 and Level 2 and the major task would be to increase their number in Level 3 and Level 4** <br><br>\n","d76ec3c2":"**Get the complete list of schools in Excel sheet format and apply filter to get the details of schools which you want to target as explained in above examples**\n     -----","ffe1deb9":"Need more comparison based on highest grades school has ? Lets go for 3d scatter plot"}}