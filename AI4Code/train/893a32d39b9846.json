{"cell_type":{"7f047733":"code","d2a25c1c":"code","1e629513":"code","691da267":"code","2b9d7fe6":"code","7c9a0286":"code","4edd48f9":"code","f926effb":"code","f783045b":"code","50a798f4":"code","76ef01f0":"code","f5da6946":"code","79bc9ad7":"code","0a292633":"code","f9b3518d":"code","9c540d98":"code","9dcc14f5":"code","d08faefd":"code","4662a294":"code","0c04d4e8":"code","57fe4c40":"code","d9aac2b8":"code","80e12115":"code","725cc84a":"code","73a3fb9f":"code","b46fbcac":"code","12f3dff5":"code","bff6ed99":"code","f76ed2bd":"code","903ad2bc":"code","bc9c6361":"code","2c81e0ec":"code","b76fc889":"code","de826c27":"code","80884459":"code","cf2484a9":"code","b056ccfb":"code","3a57210c":"code","d06da7ba":"code","95e13a66":"markdown","4c59ff44":"markdown","cd4566b6":"markdown","6d68714c":"markdown","cdb07f54":"markdown","28fc2413":"markdown","08ebc284":"markdown","a62e2d13":"markdown","f8c84449":"markdown","7e006f9e":"markdown","753c7eed":"markdown","a1024a3c":"markdown","cee87812":"markdown","4dfdb00b":"markdown","ee5cfc01":"markdown","2eb47078":"markdown","38529eef":"markdown","c28a421d":"markdown","e8a9a07a":"markdown","f4bfb24a":"markdown","28dbfeec":"markdown","c617a6d9":"markdown","47bcf298":"markdown","bc21806c":"markdown","32d01ec3":"markdown","3bdc9cb6":"markdown","6d86365d":"markdown","e8ae624e":"markdown","1566c4df":"markdown","0ce5e036":"markdown","723c9ec2":"markdown","06dcf9be":"markdown","c4acb978":"markdown","7b0a7f05":"markdown","114f6aec":"markdown","fbc96ee7":"markdown","66884487":"markdown","514448bc":"markdown"},"source":{"7f047733":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport datetime\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d2a25c1c":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","1e629513":"new_transactions = pd.read_csv('\/kaggle\/input\/elo-merchant-category-recommendation\/new_merchant_transactions.csv',\n                               parse_dates=['purchase_date'])\n\nhistorical_transactions = pd.read_csv('\/kaggle\/input\/elo-merchant-category-recommendation\/historical_transactions.csv',\n                                      parse_dates=['purchase_date'])\n\ndef read_data(input_file):\n    df = pd.read_csv(input_file)\n    df['first_active_month'] = pd.to_datetime(df['first_active_month'])\n    df['elapsed_time'] = (datetime.date(2018, 2, 1) - df['first_active_month'].dt.date).dt.days\n    return df\n#_________________________________________\ntrain = read_data('\/kaggle\/input\/elo-merchant-category-recommendation\/train.csv')\ntest = read_data('\/kaggle\/input\/elo-merchant-category-recommendation\/test.csv')\n\ntarget = train['target']\nprint(target.shape)\nprint(test.shape)","691da267":"# check on the top 5 from historical transactions\n\nhistorical_transactions.head()","2b9d7fe6":"historical_transactions = pd.get_dummies(historical_transactions, columns=['category_2', 'category_3'])\nnew_transactions = pd.get_dummies(new_transactions, columns=['category_2', 'category_3'])","7c9a0286":"for df in [historical_transactions, new_transactions]:\n    df['purchase_date'] = pd.to_datetime(df['purchase_date'])\n    df['year'] = df['purchase_date'].dt.year\n    df['weekofyear'] = df['purchase_date'].dt.weekofyear\n    df['month'] = df['purchase_date'].dt.month\n    df['dayofweek'] = df['purchase_date'].dt.dayofweek\n    df['weekend'] = (df.purchase_date.dt.weekday >=5).astype(int)\n    df['hour'] = df['purchase_date'].dt.hour\n    df['authorized_flag'] = df['authorized_flag'].map({'Y':1, 'N':0})\n    df['category_1'] = df['category_1'].map({'Y':1, 'N':0}) \n    #https:\/\/www.kaggle.com\/c\/elo-merchant-category-recommendation\/discussion\/73244\n    df['month_diff'] = ((datetime.datetime.today() - df['purchase_date']).dt.days)\/\/30\n    df['month_diff'] += df['month_lag']","4edd48f9":"\nhistorical_transactions = reduce_mem_usage(historical_transactions)\nnew_transactions = reduce_mem_usage(new_transactions)","f926effb":"def aggregate_transactions(history):\n    \n    history.loc[:, 'purchase_date'] = pd.DatetimeIndex(history['purchase_date']).\\\n                                      astype(np.int64) * 1e-9\n    \n    agg_func = {\n    'authorized_flag': ['mean'],\n    'category_1': ['sum', 'mean'],\n    'category_2_1.0': ['mean'],\n    'category_2_2.0': ['mean'],\n    'category_2_3.0': ['mean'],\n    'category_2_4.0': ['mean'],\n    'category_2_5.0': ['mean'],\n    'category_3_A': ['mean'],\n    'category_3_B': ['mean'],\n    'category_3_C': ['mean'],\n    'merchant_id': ['nunique'],\n    'merchant_category_id': ['nunique'],\n    'state_id': ['nunique'],\n    'city_id': ['nunique'],\n    'subsector_id': ['nunique'],\n    'purchase_amount': ['sum', 'mean', 'max', 'min', 'std'],\n    'installments': ['sum', 'mean', 'max', 'min', 'std'],\n    'purchase_date': [np.ptp, 'min', 'max'],\n    'month_lag': ['mean', 'max', 'min', 'std'],\n    'month_diff': ['mean'],\n    'month': ['nunique'],\n    'hour': ['nunique'],\n    'weekofyear': ['nunique'],\n    'dayofweek': ['nunique'],\n    'year': ['nunique'],\n    'authorized_flag': ['sum', 'mean'],\n    'weekend': ['sum', 'mean']\n    }\n    \n    agg_history = history.groupby(['card_id']).agg(agg_func)\n    agg_history.columns = ['_'.join(col).strip() for col in agg_history.columns.values]\n    agg_history.reset_index(inplace=True)\n    \n    df = (history.groupby('card_id')\n          .size()\n          .reset_index(name='transactions_count'))\n    \n    agg_history = pd.merge(df, agg_history, on='card_id', how='left')\n    \n    return agg_history","f783045b":"history = aggregate_transactions(historical_transactions)\nhistory.columns = ['hist_' + c if c != 'card_id' else c for c in history.columns]\nhistory[:5]","50a798f4":"new = aggregate_transactions(new_transactions)\nnew.columns = ['new_' + c if c != 'card_id' else c for c in new.columns]\nnew[:5]","76ef01f0":"train = pd.merge(train, history, on='card_id', how='left')\ntest = pd.merge(test, history, on='card_id', how='left')\n\ntrain = pd.merge(train, new, on='card_id', how='left')\ntest = pd.merge(test, new, on='card_id', how='left')\n\nhistory[0::5]","f5da6946":"from sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer()","79bc9ad7":"# get features and remove any that have the incorrect data type for a data frame \nfeature_cols = [col for col in train.columns if col not in ['target', 'first_active_month', 'card_id']]\nX = train[feature_cols]\n\n# impute missing values\nX = my_imputer.fit_transform(X)\n\n# get the target vector\ny = train['target']","0a292633":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05, random_state=6)","f9b3518d":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\n\nreg_predictions = []","9c540d98":"myKNeighborsReg = KNeighborsRegressor(n_neighbors = 3)\n\nmyKNeighborsReg.fit(X_train, y_train)\n\ny_predict_myKNeighborsReg = myKNeighborsReg.predict(X_test)\n\nreg_predictions.append(y_predict_myKNeighborsReg)\n\n# TODO: find and change a time stamp feature to a float","9dcc14f5":"myDecisionTreeReg = DecisionTreeRegressor(random_state = 5)\n\nmyDecisionTreeReg.fit(X_train, y_train)\n\ny_predict_myDecisionTreeReg = myDecisionTreeReg.predict(X_test)\n\nreg_predictions.append(y_predict_myDecisionTreeReg)","d08faefd":"myLinearReg = LinearRegression()\n\nmyLinearReg.fit(X_train, y_train)\n\ny_predict_myLinearReg = myLinearReg.predict(X_test)\n\nreg_predictions.append(y_predict_myLinearReg)","4662a294":"myRandomForestReg = RandomForestRegressor(n_estimators = 9, bootstrap = True, random_state = 3)\n\nmyRandomForestReg.fit(X_train, y_train)\n\ny_predict_myRandomForestReg = myRandomForestReg.predict(X_test)\n\nreg_predictions.append(y_predict_myRandomForestReg)\n\nprint(X.shape)","0c04d4e8":"from sklearn import metrics\n\nfor model, y_prediction in zip(['K Nearest Neighbor: ', 'Decision Tree: ', 'Linear Regression: ', 'Random Forest: '], reg_predictions):\n    mse = metrics.mean_squared_error(y_test, y_prediction)\n    rmse = np.sqrt(mse)\n    print(model + str(rmse))","57fe4c40":"from sklearn.decomposition import PCA\nn = 45 # (n is the number of components (new features)\n# after dimensionality reduction)\nmy_pca = PCA(n_components = n)\n# (X_Train is feature matrix of training set before DR,\n# X_Train_New is feature matrix of training set after DR):\nX_Train_new = my_pca.fit_transform(X_train)\nX_Test_new = my_pca.transform(X_test)","d9aac2b8":"reg_predictions_new = []","80e12115":"myKNeighborsReg = KNeighborsRegressor(n_neighbors = 3)\n\nmyKNeighborsReg.fit(X_Train_new, y_train)\n\ny_predict_myKNeighborsReg = myKNeighborsReg.predict(X_Test_new)\n\nreg_predictions_new.append(y_predict_myKNeighborsReg)\n","725cc84a":"myDecisionTreeReg = DecisionTreeRegressor(random_state = 5)\n\nmyDecisionTreeReg.fit(X_Train_new, y_train)\n\ny_predict_myDecisionTreeReg = myDecisionTreeReg.predict(X_Test_new)\n\nreg_predictions_new.append(y_predict_myDecisionTreeReg)","73a3fb9f":"myLinearReg = LinearRegression()\n\nmyLinearReg.fit(X_Train_new, y_train)\n\ny_predict_myLinearReg = myLinearReg.predict(X_Test_new)\n\nreg_predictions_new.append(y_predict_myLinearReg)","b46fbcac":"myRandomForestReg = RandomForestRegressor(n_estimators = 9, bootstrap = True, random_state = 3)\n\nmyRandomForestReg.fit(X_Train_new, y_train)\n\ny_predict_myRandomForestReg = myRandomForestReg.predict(X_Test_new)\n\nreg_predictions_new.append(y_predict_myRandomForestReg)\n\nprint(X.shape)","12f3dff5":"for model, y_prediction in zip(['K Nearest Neighbor: ', 'Decision Tree: ', 'Linear Regression: ', 'Random Forest: '], reg_predictions_new):\n    mse = metrics.mean_squared_error(y_test, y_prediction)\n    rmse = np.sqrt(mse)\n    print(model + str(rmse))","bff6ed99":"test_feature_cols = [col for col in test.columns if col not in ['target', 'first_active_month', 'card_id']]\nfinal_test = test[feature_cols]\nfinal_test = my_imputer.fit_transform(final_test)\n\nreg_predictions_final = {}","f76ed2bd":"myKNeighborsReg = KNeighborsRegressor(n_neighbors = 3)\n\nmyKNeighborsReg.fit(X, y)\n\ny_predict_myKNeighborsReg = myKNeighborsReg.predict(final_test)\n\nreg_predictions_final['K Nearest Neighbor: '] = y_predict_myKNeighborsReg","903ad2bc":"myDecisionTreeReg = DecisionTreeRegressor(random_state = 5)\n\nmyDecisionTreeReg.fit(X, y)\n\ny_predict_myDecisionTreeReg = myDecisionTreeReg.predict(final_test)\n\nreg_predictions_final['Decision Tree: ']= y_predict_myDecisionTreeReg","bc9c6361":"myLinearReg = LinearRegression()\n\nmyLinearReg.fit(X, y)\n\ny_predict_myLinearReg = myLinearReg.predict(final_test)\n\nreg_predictions_final['Linear Regression: '] = y_predict_myLinearReg","2c81e0ec":"myRandomForestReg = RandomForestRegressor(n_estimators = 9, bootstrap = True, random_state = 3)\n\nmyRandomForestReg.fit(X, y)\n\ny_predict_myRandomForestReg = myRandomForestReg.predict(final_test)\n\nreg_predictions_final['Random Forest: '] = y_predict_myRandomForestReg\n\nprint(X.shape)","b76fc889":"for model, y_prediction in reg_predictions_final.items():\n    mse = metrics.mean_squared_error(target.iloc[:len(y_prediction)], y_prediction)\n    rmse = np.sqrt(mse)\n    print(model + str(rmse))","de826c27":"reg_predictions_final_dr = {}\n\nn = 45\n\nmy_pca = PCA(n_components = n)\n\nX_new = my_pca.fit_transform(X)\nfinal_test_new = my_pca.transform(final_test)","80884459":"myKNeighborsReg = KNeighborsRegressor(n_neighbors = 3)\n\nmyKNeighborsReg.fit(X_new, y)\n\ny_predict_myKNeighborsReg = myKNeighborsReg.predict(final_test_new)\n\nreg_predictions_final_dr['K Nearest Neighbor: '] = y_predict_myKNeighborsReg","cf2484a9":"myDecisionTreeReg = DecisionTreeRegressor(random_state = 5)\n\nmyDecisionTreeReg.fit(X_new, y)\n\ny_predict_myDecisionTreeReg = myDecisionTreeReg.predict(final_test_new)\n\nreg_predictions_final_dr['Decision Tree: ']= y_predict_myDecisionTreeReg","b056ccfb":"myLinearReg = LinearRegression()\n\nmyLinearReg.fit(X_new, y)\n\ny_predict_myLinearReg = myLinearReg.predict(final_test_new)\n\nreg_predictions_final_dr['Linear Regression: '] = y_predict_myLinearReg","3a57210c":"myRandomForestReg = RandomForestRegressor(n_estimators = 9, bootstrap = True, random_state = 3)\n\nmyRandomForestReg.fit(X_new, y)\n\ny_predict_myRandomForestReg = myRandomForestReg.predict(final_test_new)\n\nreg_predictions_final_dr['Random Forest: '] = y_predict_myRandomForestReg\n\nprint(X.shape)","d06da7ba":"for model, y_prediction in reg_predictions_final_dr.items():\n    mse = metrics.mean_squared_error(target.iloc[:len(y_prediction)], y_prediction)\n    rmse = np.sqrt(mse)\n    print(model + str(rmse))","95e13a66":"Train using LinearRegression","4c59ff44":"Train using RandomForestRegressor","cd4566b6":"Reduce memory usage","6d68714c":"Train using RandomForestRegressor","cdb07f54":"Train using KNeighborsRegressor","28fc2413":"Date processing","08ebc284":"helper function to apply aggregations on existing features to create new features","a62e2d13":"Train using DecisionTreeRegressor","f8c84449":"# 7. Check RMSE ","7e006f9e":"Train using RandomForestRegressor","753c7eed":"join datasets on the common id, card_id for both train and test","a1024a3c":"read csv files and store them into data frames","cee87812":"Training and testing using dimensionality reduction","4dfdb00b":"# 3. Feature Engineering","ee5cfc01":"# 9. Repeat steps 6, 7, and 8 on actual test dataframe","2eb47078":"Train using DecisionTreeRegressor","38529eef":"Train using LinearRegression","c28a421d":"Train using DecisionTreeRegressor","e8a9a07a":"new stores aggregated results from new merchant transactions","f4bfb24a":"Train using RandomForestRegressor","28dbfeec":"One Hot Encoding","c617a6d9":"Train using DecisionTreeRegressor","47bcf298":"# 8. Dimensionality Reduction","bc21806c":"# 4. Combine dataframes to train and test dataframes","32d01ec3":"helper function to reduce memory usage","3bdc9cb6":"Train using LinearRegression","6d86365d":"Train using KNeighborsRegressor","e8ae624e":"Train using KNeighborsRegressor","1566c4df":"Import training models","0ce5e036":"# 2. Preprocessing","723c9ec2":"history stores aggregated results from historical transactions","06dcf9be":"Train using KNeighborsRegressor","c4acb978":"Train using LinearRegression","7b0a7f05":"Training and Testing on all new features","114f6aec":"#  6. Train on any regression models","fbc96ee7":"Impute missing values","66884487":"# **1. Load the data**","514448bc":"# 5. Split test and training set from train dataframe"}}