{"cell_type":{"4f21b879":"code","949eb543":"code","c013001e":"code","60b793fe":"code","75bae651":"code","f3a7d27b":"code","1e3adbfc":"code","1fbb6931":"code","7995e41a":"code","643abdf7":"code","226b179f":"code","3f4c6fe9":"code","2dd922d0":"code","034ee2b8":"code","ba3e1d06":"markdown","69670947":"markdown","eb937796":"markdown","8568376d":"markdown","7b61477d":"markdown","3cd60b03":"markdown","6bdffa98":"markdown","c3f6a995":"markdown"},"source":{"4f21b879":"import numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\n\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split","949eb543":"(train_input, train_target), (test_input, test_target) = \\\n    keras.datasets.fashion_mnist.load_data()\n\n","c013001e":"train_scaled = train_input.reshape(-1, 28, 28, 1) \/ 255.0","60b793fe":"train_scaled, val_scaled, train_target, val_target = train_test_split(\n    train_scaled, train_target, test_size=0.2, random_state=42)","75bae651":"def initCNN(imageSize,filterNum,filterSize,isMaxPooling2D):\n    model = keras.Sequential()\n    model.add(keras.layers.Conv2D(filterNum,kernel_size=filterSize,activation='relu',\n                                  padding='same',input_shape=(imageSize,imageSize,1)))\n    if isMaxPooling2D == True:\n        model.add(keras.layers.MaxPooling2D(2))\n        \n    return model\n        \ndef addCNN(model,filterNum,filterSize,isMaxPooling2D):\n    model.add(keras.layers.Conv2D(filterNum, kernel_size=filterSize, activation='relu',padding='same'))\n    \n    if isMaxPooling2D == True:\n        model.add(keras.layers.MaxPooling2D(2))\n        \n    return model\n    \ndef flatten(model):\n    model.add(keras.layers.Flatten())\n    \n    return model\n\ndef addDense(denseUnits):\n    model.add(keras.layers.Dense(denseUnits, activation='relu'))\n    \n    return model\n\ndef dropOut(ratio):\n    model.add(keras.layers.Dropout(ratio))\n    \n    return model\n    \ndef addSoftmaxDense(denseUnits):\n    model.add(keras.layers.Dense(denseUnits, activation='softmax'))\n    \n    return model\n\ndef trainModel(model,X,y,X_val,y_val,nEpochs):\n    display(model.summary())\n\n    display(keras.utils.plot_model(model, show_shapes=True, to_file='model001.png', dpi=100))\n\n    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', \n                  metrics='accuracy')\n\n    checkpoint_cb = keras.callbacks.ModelCheckpoint('best-cnn-model.h5', \n                                                    save_best_only=True)\n    early_stopping_cb = keras.callbacks.EarlyStopping(patience=2,\n                                                      restore_best_weights=True)\n\n    history = model.fit(X, y, epochs=nEpochs,\n                        validation_data=(X_val, y_val),\n                        callbacks=[checkpoint_cb, early_stopping_cb])\n    \n    return model","f3a7d27b":"model = initCNN(28,32,3,True)\nmodel = addCNN(model,64,3,True)\nmodel = flatten(model)\nmodel = addDense(100)\nmodel = dropOut(0.4)\nmodel = addSoftmaxDense(10)\nmodel = trainModel(model,train_scaled,train_target,val_scaled,val_target,20)","1e3adbfc":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['train', 'val'])\nplt.show()","1fbb6931":"model.evaluate(val_scaled, val_target)","7995e41a":"plt.imshow(val_scaled[0].reshape(28, 28), cmap='gray_r')\nplt.show()","643abdf7":"preds = model.predict(val_scaled[0:1])\nprint(preds)","226b179f":"plt.bar(range(1, 11), preds[0])\nplt.xlabel('class')\nplt.ylabel('prob.')\nplt.show()","3f4c6fe9":"class_labels= ['T-shirt\/top','Trouser','Pullover','Dress','Coat',\n               'Sandal','Shirt','Sneakers','Bag','Ankle boot']\n\nprint(class_labels[np.argmax(preds)])","2dd922d0":"test_scaled = test_input.reshape(-1, 28, 28, 1) \/ 255.0","034ee2b8":"model.evaluate(test_scaled, test_target)","ba3e1d06":"# load data ","69670947":"# evaluate model(with validation set)","eb937796":"# evaluate model with test data ","8568376d":"# predict test data using model","7b61477d":"# preprocess data ","3cd60b03":"# define model(CNN)","6bdffa98":"# evaluate model(with test set)","c3f6a995":"# split data "}}