{"cell_type":{"04cff280":"code","41624da9":"code","f617202e":"code","77cee034":"code","c92bf569":"code","66baa5cc":"code","fccb1868":"code","80076804":"code","7a59c4de":"code","a2c409dc":"code","0e248acf":"code","49d6e4e1":"code","72c97381":"code","f15cae9c":"code","97a0f4aa":"code","f324721a":"code","4083af24":"code","336693b4":"code","7805e4a6":"code","62f33bd3":"code","0e2c8f02":"code","63ae164e":"code","1609b924":"code","d5d2304c":"code","21a546e9":"code","7299545c":"code","1ee0e897":"code","ec036abe":"code","74057bf0":"code","1c03f57a":"code","aa9de237":"code","34c5635e":"code","9050c018":"code","802969fc":"markdown","0ac9a5cb":"markdown","c9efa466":"markdown","c4859dfd":"markdown","36a252a4":"markdown","9017ebac":"markdown"},"source":{"04cff280":"import pandas as pd","41624da9":"df=pd.read_csv('..\/input\/fake-news\/train.csv')\ndf.head()","f617202e":"###Drop Nan Values\ndf=df.dropna()","77cee034":"## Get the Independent Features\n\nX=df.drop('label',axis=1)","c92bf569":"## Get the Dependent features\ny=df['label']","66baa5cc":"y.value_counts()","fccb1868":"X.shape","80076804":"\ny.shape","7a59c4de":"import tensorflow as tf","a2c409dc":"from tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.layers import Dropout","0e248acf":"### Vocabulary size\nvoc_size=5000","49d6e4e1":"#Dataset pre-processing\nmessages=X.copy()","72c97381":"messages['title'][1]","f15cae9c":"messages.reset_index(inplace=True)","97a0f4aa":"import nltk\nimport re\nfrom nltk.corpus import stopwords","f324721a":"nltk.download('stopwords')","4083af24":"### Dataset Preprocessing\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(messages)):\n    print(i)\n    review = re.sub('[^a-zA-Z]', ' ', messages['title'][i]) #length of messages- apart from small and capital a-Z i have remove all the special character and replace it with blank.\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","336693b4":"corpus","7805e4a6":"onehot_repr=[one_hot(words,voc_size)for words in corpus] \nonehot_repr","62f33bd3":"sent_length=20 #MAximize length\nembedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)\nprint(embedded_docs)","0e2c8f02":"embedded_docs[0]","63ae164e":"## Creating model\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel.add(LSTM(100)) #can add any no of LSTM\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model.summary())","1609b924":"## Creating model\nembedding_vector_features=40\nmodel1=Sequential()\nmodel1.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel1.add(Bidirectional(LSTM(100)))\nmodel1.add(Dropout(0.3))\nmodel1.add(Dense(1,activation='sigmoid'))\nmodel1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model1.summary())\n","d5d2304c":"len(embedded_docs),y.shape","21a546e9":"import numpy as np\nX_final=np.array(embedded_docs)\ny_final=np.array(y)","7299545c":"X_final.shape,y_final.shape","1ee0e897":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33, random_state=42)","ec036abe":"### Finally Training\nmodel1.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)","74057bf0":"y_pred1=model1.predict_classes(X_test)","1c03f57a":"from sklearn.metrics import confusion_matrix","aa9de237":"\nconfusion_matrix(y_test,y_pred1)","34c5635e":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred1)","9050c018":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred1))","802969fc":"# Please upvote if like this notebook for further encouragement.","0ac9a5cb":"# Model Training","c9efa466":"# Onehot Representation","c4859dfd":"# Embedding Representation","36a252a4":"# Performance Metrics And Accuracy","9017ebac":"# Performed --> Pad seq-->Create seq layer--> For embedding have to make one hot representation-->LSTMlayer-->Use dense layer to get final output value"}}