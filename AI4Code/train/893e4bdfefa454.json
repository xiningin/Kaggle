{"cell_type":{"d1e2ba2e":"code","93a051aa":"code","f96c066a":"code","1064a813":"code","2a75cfea":"code","e50ab2b4":"code","a6477037":"code","119c7109":"code","4e17db3a":"code","fb0b8914":"code","3698e16e":"code","c21db753":"code","2032d3ae":"code","9b66301b":"code","06b9aac6":"code","4bb4403f":"code","e3d0f801":"code","9e55f46c":"code","748a21a9":"code","0dd9585c":"code","3a3d8683":"code","1b9f294e":"code","31671193":"code","7b98b59d":"code","44de8768":"code","c05a561d":"code","9be40b19":"code","adbbe5a2":"markdown","7f31dc96":"markdown"},"source":{"d1e2ba2e":"import os\nimport cv2\nimport numpy as np\nimport tensorflow as tf\nfrom keras import Sequential\nimport matplotlib.pyplot as plt\nfrom keras.utils import to_categorical\nfrom keras.optimizers import Adam, RMSprop\nfrom sklearn.metrics import confusion_matrix\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Conv2D, Dense, Flatten, MaxPooling2D,MaxPool2D, BatchNormalization, Dropout","93a051aa":"# Copy the input_folder to the output in order to be able to balance your dataset \n# easily by deleting the images. You can use any approach to balance the dataset\n!cp -r ..\/input\/chest-xray-pneumonia\/chest_xray\/ .\/","f96c066a":"# Define directories\ntrain_dir = '.\/chest_xray\/train'\nvalid_dir ='.\/chest_xray\/val'\ntest_dir ='.\/chest_xray\/test'","1064a813":"train_norm_count = [i for i in os.listdir(train_dir + '\/NORMAL')]\ntrain_pneu_count = [i for i in os.listdir(train_dir + '\/PNEUMONIA')]\n\nprint(len(train_norm_count),'normal images',',',len(train_pneu_count),'pneumonia images')","2a75cfea":"to_del = len(train_pneu_count)-len(train_norm_count)\n# Balance the classes\nfor i in range(to_del):\n    for i in os.listdir(train_dir + '\/PNEUMONIA'):\n        os.remove(train_dir + '\/PNEUMONIA\/'+i)\n        break\n        \ntrain_norm_count = [i for i in os.listdir(train_dir + '\/NORMAL')]\ntrain_pneu_count = [i for i in os.listdir(train_dir + '\/PNEUMONIA')]\n\nprint(len(train_norm_count),'normal images',',',len(train_pneu_count),'pneumonia images')","e50ab2b4":"# Validation images\nval_norm_count = [i for i in os.listdir(valid_dir + '\/NORMAL')]\nval_pneu_count = [i for i in os.listdir(valid_dir + '\/PNEUMONIA')]\n\nprint(len(val_norm_count),len(val_pneu_count))","a6477037":"# Test images\ntest_norm_count = [i for i in os.listdir(test_dir + '\/NORMAL')]\ntest_pneu_count = [i for i in os.listdir(test_dir + '\/PNEUMONIA')]\n\nprint(len(test_norm_count),len(test_pneu_count))","119c7109":"# Define image width, height and batch size\nimg_height = 150\nimg_width = 150\nbatch_size = 128","4e17db3a":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   rotation_range=10,\n                                   width_shift_range=[0.05,-0.05],\n                                   height_shift_range=[0.05,-0.05],\n                                   shear_range=0.05,\n                                  horizontal_flip=True,\n                                  validation_split = 0.20) \n\ntrain_generator = train_datagen.flow_from_directory(\n                                  train_dir,\n                                  target_size=(img_height, img_width),\n                                  batch_size=batch_size,\n                                  subset ='training',\n                                  class_mode='categorical',\n                                  seed=42\n                                  ) ","fb0b8914":"val_generator = train_datagen.flow_from_directory(\n                                  train_dir,\n                                  target_size=(img_height, img_width),\n                                  batch_size=batch_size,\n                                  subset ='validation',\n                                  class_mode='categorical',\n                                  seed=42) ","3698e16e":"test_datagen = ImageDataGenerator(rescale=1.\/255) \ntest_generator = test_datagen.flow_from_directory(\n                                  test_dir,\n                                  target_size=(img_height, img_width),\n                                  batch_size=batch_size,\n                                  class_mode='categorical',\n                                  seed=42,\n                                  shuffle=False) ","c21db753":"def build_model():\n    in_shape=(img_height, img_width, 3)\n    out_shape=2\n\n    model=Sequential()\n    model.add(Conv2D(128,(3,3),activation='relu',input_shape=in_shape)),\n    model.add(MaxPooling2D(pool_size=(2,2))),\n\n    model.add(Conv2D(256,(3,3), activation='relu')),\n    model.add(MaxPooling2D(pool_size=(2,2))),\n\n    model.add(Conv2D(512,(3,3), activation='relu')),\n    model.add(MaxPooling2D(pool_size=(2,2))),\n\n#     model.add(Conv2D(512,(3,3), activation='relu')),\n#     model.add(MaxPooling2D(pool_size=(2,2))),\n\n\n    model.add(Flatten()),\n    model.add(Dense(512, activation='relu')),\n    model.add(Dense(2, activation='softmax'))\n    \n    model.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.0001),\n              metrics=['accuracy'])\n\n    return model","2032d3ae":"model = build_model()\nmodel.summary()","9b66301b":"model.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.0001),\n              metrics=['accuracy'])","06b9aac6":"#setting up step size for training and validation image data\nstep_train_size = int(np.ceil(train_generator.samples \/ train_generator.batch_size))\nstep_val_size = int(np.ceil(val_generator.samples \/ test_generator.batch_size))","4bb4403f":"#modelcheckpoint is set to monitor the model using validation \n# val_accuracy score and save the best only\nsave_best_check_point = ModelCheckpoint(filepath = '.\/best_model.hdf5', \n                                        monitor = 'val_accuracy',\n                                        mode = 'max',\n                                        save_best_only = True,\n                                        save_weights_only = True)","e3d0f801":"history = model.fit(x = train_generator, \n           steps_per_epoch = step_train_size, \n           validation_data = val_generator, \n           validation_steps = step_val_size,epochs = 25, \n           callbacks = [save_best_check_point])","9e55f46c":"# Plot training and validation accuracy\/loss\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(25)\n\nplt.figure(figsize=(10, 10))\nplt.subplot(2, 1, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","748a21a9":"model_best = build_model()","0dd9585c":"model_best.load_weights('.\/best_model.hdf5')","3a3d8683":"import cv2\n# Preparing test data\nnormal_cases_dir = test_dir + '\/NORMAL'\npneumonia_cases_dir = test_dir +  '\/PNEUMONIA'\n","1b9f294e":"normal_cases = [i for i in os.listdir(normal_cases_dir)]\npneumonia_cases = [i for i in os.listdir(pneumonia_cases_dir)]","31671193":"test_data = []\ntest_labels = []\n\nfor img in normal_cases:\n    img = cv2.imread(f'{normal_cases_dir}\/{img}')\n    img = cv2.resize(img, (img_height,img_width))\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    else:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = to_categorical(0, num_classes=2)\n    test_data.append(img)\n    test_labels.append(label)\n                      \nfor img in pneumonia_cases:\n    img = cv2.imread(f'{pneumonia_cases_dir}\/{img}')\n    img = cv2.resize(img, (img_height,img_width))\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    else:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = to_categorical(1, num_classes=2)\n    test_data.append(img)\n    test_labels.append(label)\n    \n\ntest_data = np.array(test_data)\ntest_labels = np.array(test_labels)\n\nprint(\"Total number of test examples: \", test_data.shape)\nprint(\"Total number of labels:\", test_labels.shape)","7b98b59d":"preds = model.predict(test_data, batch_size=128)\npreds = np.argmax(preds, axis=-1)\n# Original labels\norig_test_labels = np.argmax(test_labels, axis=-1)\n# Get the confusion matrix\ncm  = confusion_matrix(orig_test_labels, preds)\nprint(cm)\n# Calculate Precision and Recall\ntn, fp, fn, tp = cm.ravel()\n\nprecision = tp\/(tp+fp)\nrecall = tp\/(tp+fn)\nprint('')\nprint(\"Recall of the model is {:.2f}\".format(recall))\nprint(\"Precision of the model is {:.2f}\".format(precision))","44de8768":"predictions = model.predict_generator(test_generator, steps=10)\npredicted_classes = np.argmax(predictions, axis=1) \n\ntrue_classes = test_generator.classes\nclass_labels = list(test_generator.class_indices.keys())  \n\nfrom sklearn.metrics import classification_report\nreport = classification_report(true_classes, predicted_classes, target_names=class_labels)\nprint(report)","c05a561d":"from keras.preprocessing import image\npath = '..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/person1946_bacteria_4874.jpeg'\nimg = image.load_img(path, target_size=(150, 150))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nx = x\/255.0\nx = np.argmax(model.predict(x), axis=-1)\n\nprint(train_generator.class_indices)\n# print(x[0])\nfor i in train_generator.class_indices.values():\n#     print(i,x)\n    if x[0]==0:\n        print('normal')\n    elif x[0]==1 :\n        print('pneumonia')\n        break\n","9be40b19":"# model.save('pneumonia.h5')","adbbe5a2":"## Get predictions with model","7f31dc96":"The above model is obviously the best for predicting pneumonia with a recall of 0.99 and \nprecision of 0.75 because we need to optimize recall over precision else there will consequences associated with a false negative i.e the model predicts that the patient doesnt have pneumonia when infact the person has pneumonia."}}