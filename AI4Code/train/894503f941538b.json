{"cell_type":{"5280f364":"code","d44f2060":"code","d417f4b7":"code","0e668786":"code","ab91762a":"code","b51bb0bd":"code","44abc6cb":"code","3fc61742":"code","17711545":"code","dcddaa40":"code","8893c437":"code","314d800d":"code","5f656cfa":"code","31361c58":"code","3db3e54f":"markdown","b407c5f9":"markdown","700a1fef":"markdown","abacd7fd":"markdown","c712b17c":"markdown","ffafaa40":"markdown","fedca47e":"markdown","d07ed638":"markdown","c713c90b":"markdown","a6bbd839":"markdown","4ac7d67a":"markdown"},"source":{"5280f364":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d44f2060":"\n# \u5982\u679c\u6709\u6587\u672c\u6570\u636eCountVectorizer()\n# column_trans=make_column_transformer((OneHotEncoder(),['city']),\n#       (CountVectorizer(),'title'),\n#        remainder=MinMaxScaler())","d417f4b7":"import numpy as np\nimport pandas as pd\nfrom IPython.display import display\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import make_column_transformer, make_column_selector\nfrom sklearn.model_selection import train_test_split\n\nfuel = pd.read_csv('..\/input\/dl-course-data\/fuel.csv',engine='python')\n\n# We'll do a \"grouped\" split to keep all of an artist's songs in one\n# split or the other. This is to help prevent signal leakage.\n# \u9632\u5173\u952e\u4fe1\u606f\uff08\u76f4\u63a5\u5f71\u54cd\u7ed3\u679c\uff09\u7279\u5f81\u66b4\u9732\uff0c\u5c06\u5176\u7edf\u4e00\u5206\u5728test\u6216train\ndef group_split(X, y, group, train_size=0.75):\n    splitter = GroupShuffleSplit(train_size=train_size)\n    train, test = next(splitter.split(X, y, groups=group))\n    return (X.iloc[train], X.iloc[test], y.iloc[train], y.iloc[test])\n\n\ntrain_data = fuel.copy()\ntrain_target = train_data.pop('FE')\nX_train,X_test,y_train,y_test = train_test_split(train_data,\n                                                 train_target,\n                                                 test_size=0.3,\n                                                 random_state=5)\n\nX_test = pd.DataFrame(X_test)# \u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48X_train\n\n# StandardScaler\u662f\u6807\u51c6\u5dee\u5f52\u4e00\u5316\uff0c\u4e5f\u53ef\u4ee5\u7528MinMaxScaler\npreprocessor = make_column_transformer(\n    (StandardScaler(),\n     make_column_selector(dtype_include=np.number)),\n    (OneHotEncoder(sparse=False),\n     make_column_selector(dtype_include=object)),\n)\n\n\nX_train = preprocessor.fit_transform(X_train)\ny_train = np.log(y_train) # log transform target instead of standardizing\n# Scale to [0, 1]\nX_test = preprocessor.fit_transform(X_test)\ny_test = np.log(y_test)\n\n#Uncomment to see original data\n# fuel.head()\n# Uncomment to see processed features\n# pd.DataFrame(X_train[:10,:]).head()\n\n# \u8f93\u5165\u7ef4\u5ea6\ninput_shape = [X_train.shape[1]]\nprint(input_shape)","0e668786":"import tensorflow as tf\n\n# detect and init the TPU\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\n\n# instantiate a distribution strategy\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","ab91762a":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\nwith tpu_strategy.scope():\n    model = keras.Sequential([\n        layers.Dense(128, activation='relu', input_shape=input_shape),\n        layers.Dense(128, activation='relu'),    \n        layers.Dense(64, activation='relu'),\n        layers.Dense(1),\n    ])\n    model.compile(\n    optimizer='adam',\n    loss='mae',\n    )\n    \n","b51bb0bd":"# from tensorflow import keras\n# from tensorflow.keras import layers\n\n# model = keras.Sequential([\n#     layers.Dense(1024, activation='relu', input_shape=input_shape),\n#     layers.Dropout(0.3),\n#     layers.BatchNormalization(),\n#     layers.Dense(1024, activation='relu'),\n#     layers.Dropout(0.3),\n#     layers.BatchNormalization(),\n#     layers.Dense(1024, activation='relu'),\n#     layers.Dropout(0.3),\n#     layers.BatchNormalization(),\n#     layers.Dense(1),\n# ])","44abc6cb":"#     model.compile(\n#         optimizer='adam',\n#         loss='mae',\n#     )","3fc61742":"from tensorflow.keras import callbacks\n\n# YOUR CODE HERE: define an early stopping callback\nearly_stopping =  callbacks.EarlyStopping(\n    min_delta=0.002, # minimium amount of change to count as an improvement\n    patience=10, # how many epochs to wait before stopping\n    restore_best_weights=True,\n)","17711545":"\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_train, y_train),\n    batch_size=50,\n    epochs=200,\n    callbacks=[early_stopping]\n    #,verbose=0  # turn off training log\n)","dcddaa40":"import pandas as pd\n\n# convert the training history to a dataframe\nhistory_df = pd.DataFrame(history.history)\n# use Pandas native plot method\nhistory_df.loc[:, ['loss', 'val_loss']].plot()\nprint(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()));","8893c437":"import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\n\nhotel = pd.read_csv('..\/input\/dl-course-data\/hotel.csv')\n\nX = hotel.copy()\ny = X.pop('is_canceled')\n\nX['arrival_date_month'] = \\\n    X['arrival_date_month'].map(\n        {'January':1, 'February': 2, 'March':3,\n         'April':4, 'May':5, 'June':6, 'July':7,\n         'August':8, 'September':9, 'October':10,\n         'November':11, 'December':12}\n    )\n\nfeatures_num = [\n    \"lead_time\", \"arrival_date_week_number\",\n    \"arrival_date_day_of_month\", \"stays_in_weekend_nights\",\n    \"stays_in_week_nights\", \"adults\", \"children\", \"babies\",\n    \"is_repeated_guest\", \"previous_cancellations\",\n    \"previous_bookings_not_canceled\", \"required_car_parking_spaces\",\n    \"total_of_special_requests\", \"adr\",\n]\nfeatures_cat = [\n    \"hotel\", \"arrival_date_month\", \"meal\",\n    \"market_segment\", \"distribution_channel\",\n    \"reserved_room_type\", \"deposit_type\", \"customer_type\",\n]\n\ntransformer_num = make_pipeline(\n    SimpleImputer(strategy=\"constant\"), # there are a few missing values\n    StandardScaler(),\n)\ntransformer_cat = make_pipeline(\n    SimpleImputer(strategy=\"constant\", fill_value=\"NA\"),\n    OneHotEncoder(handle_unknown='ignore'),\n)\n\npreprocessor = make_column_transformer(\n    (transformer_num, features_num),\n    (transformer_cat, features_cat),\n)\n\n# stratify - make sure classes are evenlly represented across splits\nX_train, X_valid, y_train, y_valid = \\\n    train_test_split(X, y, stratify=y, train_size=0.75)\n\nX_train = preprocessor.fit_transform(X_train)\nX_valid = preprocessor.transform(X_valid)\n\ninput_shape = [X_train.shape[1]]","314d800d":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# YOUR CODE HERE: define the model given in the diagram\nmodel = keras.Sequential([\n    layers.BatchNormalization(input_shape=input_shape),\n    layers.Dense(256, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.3),\n    layers.Dense(256, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.3),\n    layers.Dense(1,activation='sigmoid'),\n])","5f656cfa":"model.compile( optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['binary_accuracy'],\n)","31361c58":"early_stopping = keras.callbacks.EarlyStopping(\n    patience=5,\n    min_delta=0.001,\n    restore_best_weights=True,\n)\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    batch_size=512,\n    epochs=200,\n    callbacks=[early_stopping],\n)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"Cross-entropy\")\nhistory_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot(title=\"Accuracy\")","3db3e54f":"### Dropout and Batch Normalization\nThe first of these is the \"dropout layer\", which can help correct overfitting.Whan adding dropout, you may need to increase the number of units in your Dense layers.\n\nThe next special layer we'll look at performs \"batch normalization\" (or \"batchnorm\"), which can help correct training that is slow or unstable.","b407c5f9":"### \u9632\u8fc7\/\u6b20\u62df\u5408\uff1a\u8bbe\u7f6eearly\u2014\u2014stopping\n\u8fd9\u4e9b\u53c2\u6570\u8868\u793a\uff1a\u201c\u5982\u679c\u5728\u8fc7\u53bb\u768420\u4e2a\u65f6\u671f\u5185\uff0c\u9a8c\u8bc1\u635f\u5931\u81f3\u5c11\u6ca1\u6709\u63d0\u9ad80.001\uff0c\u90a3\u4e48\u5c31\u505c\u6b62\u8bad\u7ec3\u5e76\u4fdd\u6301\u627e\u5230\u7684\u6700\u4f73\u6a21\u578b\u3002\u201d","700a1fef":"### \u5f00\u59cb\u8bad\u7ec3","abacd7fd":"### \u5f02\u6784\u6570\u636e\u5904\u7406\n","c712b17c":"\u8bb8\u591a\u6570\u636e\u96c6\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u7684\u7279\u6027\uff0c\u6bd4\u5982\u6587\u672c\u3001\u6d6e\u70b9\u6570\u548c\u65e5\u671f\uff0c\u6bcf\u79cd\u7c7b\u578b\u7684\u7279\u5f81\u90fd\u9700\u8981\u5355\u72ec\u7684\u9884\u5904\u7406\u6216\u7279\u5f81\u63d0\u53d6\u6b65\u9aa4\u3002","ffafaa40":"### \u6307\u5b9aoptimizer\u548closs function","fedca47e":"### \u753b\u635f\u5931\u51fd\u6570\u8d8b\u52bf\u56fe","d07ed638":"# Binary Classification","c713c90b":"## \u6570\u636e\u5212\u5206\u548c\u5f52\u4e00\u5316\uff0c\u5f02\u6784\u6570\u636e\u5904\u7406","a6bbd839":"### \u5efa\u7acb\u7f51\u7edc","4ac7d67a":"# Regression"}}