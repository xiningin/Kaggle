{"cell_type":{"e672bb89":"code","0be661a4":"code","afbe916c":"code","7c86c952":"code","f4888078":"code","3653d811":"code","6d258a8b":"code","77fd6e90":"code","aeabffc5":"code","815a72c3":"code","4361d44b":"code","c668c276":"code","e0be90b3":"code","2237edc0":"code","2a9f2ba2":"code","a82501dc":"code","1c238d8c":"code","bddb3605":"code","e966f352":"code","57d4c3f6":"code","defa317f":"code","b5aa1e81":"code","8502e954":"code","f75e1bd4":"code","e3affb99":"code","ad047137":"code","80ea4698":"code","68b6b4d1":"code","60c941ac":"code","cc7c2382":"code","071cea0d":"markdown","b7393d6e":"markdown","efd09bf1":"markdown","0ce78810":"markdown","6ed6ba17":"markdown","89e5c1aa":"markdown","5c7074e1":"markdown","72c1a7e8":"markdown","355b7849":"markdown","0d7aeb0b":"markdown","c1dfd004":"markdown","2365beaa":"markdown","4d9dbc8d":"markdown","ab78ae2b":"markdown","6cd11c77":"markdown","f4679a63":"markdown","b61d4970":"markdown","dedd2342":"markdown","9608680a":"markdown","fac7492e":"markdown","11027aca":"markdown","323bab12":"markdown","9b8284b9":"markdown","19a2326e":"markdown","97bb6388":"markdown","d87f2b41":"markdown","02188307":"markdown","13a11eec":"markdown","f2a4e8b8":"markdown","65d6fb9a":"markdown","97b44d12":"markdown","9ee87995":"markdown","40cb5bba":"markdown","59209007":"markdown"},"source":{"e672bb89":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \n\n#scikit-learn.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder ","0be661a4":"train=pd.read_csv(r'..\/input\/Iris.csv')","afbe916c":"df=train.copy()","7c86c952":"df.head(10)","f4888078":"df.shape","3653d811":"df.columns # names of all coumns.","6d258a8b":"df.drop(['Id'],axis=1,inplace=True)","77fd6e90":"df.index # indices of rows.","aeabffc5":"df.isnull().any()","815a72c3":"msno.matrix(df) # just one final time to visualize.","4361d44b":"for col in df.columns:\n    print(\"Number of values in column \" ,col,\" : \",df[col].count())","c668c276":"df.describe()","e0be90b3":"def plot(feature):\n    fig,axes=plt.subplots(1,2)\n    sns.boxplot(data=df,x=feature,ax=axes[0])\n    sns.distplot(a=df[feature],ax=axes[1],color='#ff4125')\n    fig.set_size_inches(15,5)","2237edc0":"plot('SepalLengthCm')","2a9f2ba2":"plot('SepalWidthCm')","a82501dc":"plot('PetalLengthCm')","1c238d8c":"plot('PetalWidthCm')","bddb3605":"sns.factorplot(data=df,x='Species',kind='count')","e966f352":"g = sns.PairGrid(df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm',\n       'Species']], hue = \"Species\")\ng = g.map(plt.scatter).add_legend()","57d4c3f6":"le=LabelEncoder()\ndf['Species']=le.fit_transform(df['Species'])","defa317f":"scaler=StandardScaler()\nscaled_df=scaler.fit_transform(df.drop('Species',axis=1))\nX=scaled_df\nY=df['Species'].as_matrix()","b5aa1e81":"df.head(10)","8502e954":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.20,random_state=42)","f75e1bd4":"clf_lr=LogisticRegression(C=10)\nclf_lr.fit(x_train,y_train)\npred=clf_lr.predict(x_test)\nprint(accuracy_score(pred,y_test))","e3affb99":"clf_knn=KNeighborsClassifier()\nclf_knn.fit(x_train,y_train)\npred=clf_knn.predict(x_test)\nprint(accuracy_score(pred,y_test))","ad047137":"clf_svm_lin=LinearSVC()\nclf_svm_lin.fit(x_train,y_train)\npred=clf_svm_lin.predict(x_test)\nprint(accuracy_score(pred,y_test))","80ea4698":"clf_svm=SVC()\nclf_svm.fit(x_train,y_train)\npred=clf_svm.predict(x_test)\nprint(accuracy_score(pred,y_test))","68b6b4d1":"models=[LogisticRegression(),LinearSVC(),SVC(),KNeighborsClassifier()]\nmodel_names=['LogisticRegression','LinearSVM','rbfSVM','KNearestNeighbors']\n\nacc=[]\nd={}\n\nfor model in range(len(models)):\n    clf=models[model]\n    clf.fit(x_train,y_train)\n    pred=clf.predict(x_test)\n    acc.append(accuracy_score(pred,y_test))\n     \nd={'Modelling Algo':model_names,'Accuracy':acc}","60c941ac":"acc_frame=pd.DataFrame(d)\nacc_frame","cc7c2382":"sns.factorplot(data=acc_frame,y='Modelling Algo',x='Accuracy',kind='bar',size=5,aspect=1.5)","071cea0d":"#### kNN","b7393d6e":"## The Iris Species Dataset                                                                                                                       ","efd09bf1":"<a id=\"content6\"><\/a>\n## 6 ) COMPARING DIFFERENT ALGORITHMS","0ce78810":"<a id=\"content5\"><\/a>\n## 5 ) MODELLING","6ed6ba17":"Since the data frame is already indexed we will drop the 'Id' column.","89e5c1aa":"#### SPLITTING INTO TRAINING & VALIDATION SETS.","5c7074e1":"This shows the different statistical quantities like mean, median etc.. of all the numeric columns in the data frame.","72c1a7e8":"## [ Please star\/upvote if you liked it. ]","355b7849":" [ **6 ) Comparing Different Algortihms**](#content6)","0d7aeb0b":"<a id=\"content1\"><\/a>\n## 1 ) Importing Various Modules","c1dfd004":"## [ Please star\/ upvote if you find it helpful and you like it. ]","2365beaa":"#### LOGISTIC REGRESSION","4d9dbc8d":" [ **3 )Exploring the Dataset**](#content3)","ab78ae2b":"<a id=\"content4\"><\/a>\n## 4 ) Preparing the Data","6cd11c77":"##  THE END !!!","f4679a63":"#### NORMALIZING FEATURES ","b61d4970":" [ **5 ) Modelling**](#content5)","dedd2342":"#### SVM (with 'rbf' kernel)","9608680a":"Normalizing the features give better performance. Hence I have normalized all the features by scaling them to 0 mean and a unit standard deviation.","fac7492e":"**Below I have listed the number of values in each column.**","11027aca":"**VISULAIZING THE FEATURES AGAINST EACH OTHER (by a scatter plot)'**","323bab12":" [ **2 ) Loading the Dataset**](#content2)","9b8284b9":"<a id=\"content2\"><\/a>\n## 2 ) Loading the Dataset","19a2326e":"Since the algorithms accept only numeric data  we will encode the 'Species' column using the LabelEncoder() from scikit learn.","97bb6388":"#### LABEL ENCODING THE TARGET","d87f2b41":"## CONTENTS::->","02188307":" [ **4 ) Preparing the Data**](#content4)","13a11eec":"####  VISUALIZING THE DISTRIBUTIION  AND RANGE OF FEATURES.","f2a4e8b8":"[ **1 ) Importing Various Modules**](#content1)","65d6fb9a":"#### Now we can check if any column has any null or 'Nan' values or not.","97b44d12":"This shows that there aren't any 'Nan' values in any column.","9ee87995":"#### Linear Support Vector Machine(SVM)","40cb5bba":"The dataset has 150 rows and 5 columns out of which the 'Species' is our target variable which we want to predict. ","59209007":"<a id=\"content3\"><\/a>\n## 3 ) Exploring the Dataset"}}