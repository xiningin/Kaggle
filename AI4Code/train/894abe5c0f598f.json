{"cell_type":{"f28e0839":"code","ef52991c":"code","79f69420":"code","011c9fe8":"code","82ec425a":"code","a0d3041d":"code","4568f609":"code","d503d8ce":"markdown","907d84fa":"markdown","a1e09b63":"markdown","15730f0e":"markdown","22f391e6":"markdown","5ff98ceb":"markdown"},"source":{"f28e0839":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\"\"\"\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\"\"\"\n# Any results you write to the current directory are saved as output.","ef52991c":"import numpy as np\nimport pandas as pd\nimport scipy.io \nfrom mpl_toolkits import mplot3d\nimport matplotlib.pyplot as plt","79f69420":"def dataTableOptimizer(mat_file):\n    our_data = mat_file['d_skel']\n    datas = []\n    frame_size = len(our_data[0][0])-1\n    for each in range(0,frame_size):\n        datas.append(our_data[:,:,each])\n    return datas,frame_size\n\ndef dataTableOptimizerUpdated(mat_file):\n    our_data = mat_file['d_skel']\n    datas = []\n    frame_size = len(our_data[0][0])-1\n    for each in range(0,frame_size):\n        data_flatten = our_data[:,:,each].flatten()\n        data_flatten = data_flatten[np.newaxis]\n        datas.append(data_flatten)\n    return datas,frame_size\n\ndef dataTableFirstFrame(data,joint_names,column_names):\n    data = pd.DataFrame(columns=column_names,index=joint_names,data=data[0])\n    return data","011c9fe8":"def dataLinePlotter(data):\n    points = data.loc['head',:]\n    points2 = data.loc['soulder',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['soulder',:]\n    points2 = data.loc['left_shoulder',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['soulder',:]\n    points2 = data.loc['right_shoulder',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['soulder',:]\n    points2 = data.loc['spine',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['spine',:]\n    points2 = data.loc['hip_center',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['right_hip',:]\n    points2 = data.loc['hip_center',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['left_hip',:]\n    points2 = data.loc['hip_center',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['left_hip',:]\n    points2 = data.loc['left_knee',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['right_hip',:]\n    points2 = data.loc['right_knee',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['left_ankle',:]\n    points2 = data.loc['left_knee',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['right_ankle',:]\n    points2 = data.loc['right_knee',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['left_foot',:]\n    points2 = data.loc['left_ankle',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['right_foot',:]\n    points2 = data.loc['right_ankle',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['left_shoulder',:]\n    points2 = data.loc['left_elbow',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['right_shoulder',:]\n    points2 = data.loc['right_elbow',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['right_wrist',:]\n    points2 = data.loc['right_elbow',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['left_wrist',:]\n    points2 = data.loc['left_elbow',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['right_wrist',:]\n    points2 = data.loc['right_hand',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    points = data.loc['left_wrist',:]\n    points2 = data.loc['left_hand',:]\n    ax.plot3D([points.x,points2.x],[points.y,points2.y],[points.z,points2.z])\n    for x,y,z in datas_new.values:\n        ax.scatter(x,y, z, color='red', marker='o')\n    ax.set_xlabel('X Label')\n    ax.set_ylabel('Y Label')\n    ax.set_zlabel('Z Label')\n    plt.show()\n    plt.pause(0.5)\n    ax.cla()","82ec425a":"def dataTableForCluster(data,joint_names,column_names,frame,chosen_class_number):\n    datam = pd.DataFrame(columns=column_names,index=joint_names,data=data[0])\n    for x in range(1,frame):\n        datam = pd.concat([datam,pd.DataFrame(columns=column_names,index=joint_names,data=data[x])])\n    datam['classs'] = np.full((1,len(datam)),chosen_class_number).T\n    return datam\n\ndef combineDatas(data_1,data_2):\n    data_1 = data_1.append(data_2,ignore_index=True) \n    return data_1\n\ndef combineMultipleDatas(data_names):\n   datas = data_names[0]\n   x = 0\n   for data in data_names:\n       if x == 0:\n           result = datas.append(data,ignore_index=True)\n       else:\n           result = result.append(data,ignore_index=True)\n       x = x+ 1\n   return result\n       \ndef dataTableForCluster2(data):\n    datam = pd.DataFrame(data=data.iloc[0])\n    for x in range(1,60):\n        datam = pd.concat([datam,pd.DataFrame(data=data.iloc[x])])\n    return datam","a0d3041d":"joint_names = ['head','soulder','spine','hip_center','left_shoulder','left_elbow','left_wrist','left_hand','right_shoulder','right_elbow','right_wrist','right_hand','left_hip','left_knee','left_ankle','left_foot','right_hip','right_knee','right_ankle','right_foot']\ncol_names = ['x','y','z']","4568f609":"mat = scipy.io.loadmat('\/kaggle\/input\/human-action-recognition-dataset\/a1\/a1_s1_t1_skeleton.mat')\nall_data_class_a1 ,frame_a1 = dataTableOptimizer(mat_file=mat)\ndata_zero_frame = dataTableFirstFrame(data=all_data_class_a1,joint_names=joint_names,column_names=col_names)\nfig=plt.figure(figsize=(12,6))\nax = fig.add_subplot(111,projection='3d')\n\nfor i in range(0,frame_a1):\n    datas_new = pd.DataFrame(columns=col_names,index=joint_names,data=all_data_class_a1[i])\n    dataLinePlotter(datas_new)","d503d8ce":"**First, we read .mat file.Then, we use it in dataTableOptimizer function.As output of the function we have the data and frame.Then, we visualize the data depend in time for all frames.The matplotlib 3d does not working here in Kaggle, but if you will try it in your desktop, this script play the frames in 3D space from sensor data.**","907d84fa":"**First, import necessary modules**","a1e09b63":"**Hi.In this exercise we will visualize the human actions in 3D space and we will understand the data correctly.**","15730f0e":"**dataLinePlotter function is written to draw line two corresponding joint points.**","22f391e6":"**Let's define 'joint_names' as rows and column names as 'col_names'.**","5ff98ceb":"**We will just use dataTableOptimizer function to collect data from .mat format correctly.**"}}