{"cell_type":{"ea777034":"code","9cee951b":"code","2a1ce823":"code","fcd65c14":"code","c5d1c7ca":"code","17df443e":"code","4e67bd3c":"code","fb96f45a":"code","4152b626":"code","68446d0f":"code","852187aa":"code","7b819be2":"code","d721b8f3":"code","b7cc6297":"code","7506dc0b":"code","2ce88720":"code","a642b2c5":"code","0635b04f":"code","cf9f1d80":"code","8a6f8cb5":"code","9b919d9b":"code","469e96af":"code","7246fb29":"code","7d877a67":"code","6c147549":"code","54bc0f96":"code","1be6fdc9":"code","1f52822b":"code","aa30107a":"code","ef3a12e7":"code","3cb3b8f9":"code","41765f9d":"code","1ee934da":"code","b6ec62dd":"code","95756af4":"code","6399dd01":"code","8501bd63":"code","dd914eae":"code","eac6d5e5":"code","6abdb014":"code","476ef5f4":"code","f1622865":"code","447497b7":"code","f85ecb8a":"code","baa00c1c":"code","76dd49d0":"code","743446e7":"code","4589e5ba":"code","7b58f43e":"code","3db8d834":"code","b5946ce3":"code","cd053946":"code","f97038c8":"code","99aded40":"code","24bbf49d":"code","2e24bcd2":"code","d159633f":"code","24acc53c":"code","4a8e129f":"code","c588d06d":"code","007021b2":"code","54b77858":"code","16d2ead1":"code","ddc4a87b":"code","7469e191":"code","2804014d":"code","84f12342":"code","16b60fac":"code","ab85a443":"code","4d0e35e8":"code","31e92416":"code","bdc48ec7":"code","8430b9c3":"code","b1c0a5c3":"code","aac330b7":"code","9e30e092":"code","276b61c4":"code","726bfe06":"code","55071c4b":"code","a3cc7503":"code","816509a9":"code","7cfa037e":"code","e3835ff5":"code","db1872fc":"code","37d6a769":"code","78f178de":"code","dcab2180":"code","c37c58d9":"code","15c63442":"code","d03dea4a":"code","801608e9":"code","faef0a52":"code","a00b47dc":"code","3588f455":"code","e2ad87af":"markdown"},"source":{"ea777034":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9cee951b":"X_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nX_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ncombine = [X_train,X_test]\n","2a1ce823":"X_train.shape","fcd65c14":"X_test.shape","c5d1c7ca":"X_train.dtypes","17df443e":"X_test.dtypes","4e67bd3c":"X_train.info()","fb96f45a":"X_test.info()","4152b626":"print(X_train.columns)\nprint(\"---------------\")\nprint(X_test.columns)","68446d0f":"X_train.describe().T","852187aa":"X_test.describe().T","7b819be2":"X_train.head(n = 6)","d721b8f3":"X_test.head(n = 6)","b7cc6297":"X_train.tail()","7506dc0b":"X_test.tail()","2ce88720":"X_train[['Pclass', 'Survived']].groupby(['Pclass']).mean() * 100","a642b2c5":"X_train[[\"Sex\",\"Survived\"]].groupby([\"Sex\"]).mean() * 100","0635b04f":"for dataset in combine:\n    dataset['Fare'] = dataset['Fare'].fillna(X_train['Fare'].median())\nX_train['CategoricalFare'] = pd.qcut(X_train['Fare'], 4)\nX_train[[\"CategoricalFare\",\"Survived\"]].groupby([\"CategoricalFare\"]).mean() * 100","cf9f1d80":"X_train[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"]).mean() * 100","8a6f8cb5":"X_train[[\"Parch\",\"Survived\"]].groupby([\"Parch\"]).mean() * 100","9b919d9b":"X_train[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"]).mean() * 100","469e96af":"print(\"Mean: \" + str(X_train[\"Age\"].mean()))\nprint(\"Std: \" + str(X_train[\"Age\"].std()))\nprint(\"Count: \" + str(X_train[\"Age\"].count()))\nprint(\"Min: \" + str(X_train[\"Age\"].min()))\nprint(\"Max: \" + str(X_train[\"Age\"].max()))\nprint(\"Median: \" + str(X_train[\"Age\"].median()))","7246fb29":"X_train[\"Age\"].value_counts()","7d877a67":"X_train['CategoricalAge'] = pd.cut(X_train['Age'], 4)\nX_train[[\"CategoricalAge\",\"Survived\"]].groupby([\"CategoricalAge\"]).mean() * 100","6c147549":"sns.barplot(x = \"Sex\", y = \"Survived\", data = X_train)\nprint(\"Percentage of females who survived:\", X_train[\"Survived\"][X_train[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\nprint(\"Percentage of males who survived:\", X_train[\"Survived\"][X_train[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)","54bc0f96":"sns.barplot(x = \"CategoricalFare\", y = \"Survived\", \n            data = X_train, \n            saturation=1);","1be6fdc9":"sns.barplot(x = \"SibSp\", y = \"Survived\", data = X_train, saturation = 1);","1f52822b":"sns.barplot(x = \"CategoricalAge\", y = \"Survived\", data = X_train, saturation=1);","aa30107a":"sns.catplot(x = \"Parch\", y = \"Survived\", data = X_train, height = 6, saturation = 1, kind = \"bar\");","ef3a12e7":"s = sns.FacetGrid(X_train, col = \"Survived\");\ns = s.map(sns.histplot, \"Age\")","3cb3b8f9":"sns.scatterplot(x = \"Age\", y = \"Fare\", data = X_train, hue = \"Survived\");","41765f9d":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=X_train);","1ee934da":"g = sns.FacetGrid(X_train, col = \"Survived\", row = \"Pclass\")\ng = g.map(sns.histplot,\"Age\")","b6ec62dd":"g = sns.FacetGrid(X_train,  row = \"Embarked\", col = \"Survived\")\ng.map(sns.barplot, \"Sex\",\"Fare\");","95756af4":"g = sns.FacetGrid(X_train, row = \"CategoricalAge\", col = \"Survived\",height=2.5, aspect=1.6)\ng.map(sns.barplot, \"Sex\",\"Fare\");","6399dd01":"g = sns.FacetGrid(X_train, col = \"Survived\", row = \"Pclass\",height = 3)\ng = g.map(sns.barplot,\"Sex\",\"Fare\")","8501bd63":"train_test = [X_train,X_test]\nfor dataset in train_test:\n  dataset[\"Title\"] = dataset[\"Name\"].str.extract(\"([A-Za-z]+)\\.\",expand = False)","dd914eae":"X_train[\"Title\"].value_counts()","eac6d5e5":"X_test[\"Title\"].value_counts()","6abdb014":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2,\n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3, \"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\": 3, \"Mme\": 3, \"Capt\": 3, \"Sir\":3,}\nfor dataset in train_test:\n  dataset[\"Title\"] = dataset[\"Title\"].map(title_mapping)","476ef5f4":"X_train.head()","f1622865":"X_test.head()","447497b7":"sns.barplot(x = \"Title\", y = \"Survived\", data = X_train);\nprint(\"0\",X_train[\"Survived\"][X_train[\"Title\"] == 0].value_counts(normalize = True)[1]*100)\nprint(\"1\",X_train[\"Survived\"][X_train[\"Title\"] == 1].value_counts(normalize = True)[1]*100) \nprint(\"2\",X_train[\"Survived\"][X_train[\"Title\"] == 2].value_counts(normalize = True)[1]*100) \nprint(\"3\",X_train[\"Survived\"][X_train[\"Title\"] == 3].value_counts(normalize = True)[1]*100) ","f85ecb8a":"X_train = X_train.drop([\"Name\"], axis = 1)\nX_test = X_test.drop([\"Name\"], axis = 1)","baa00c1c":"X_train = X_train.drop([\"CategoricalAge\"], axis = 1)\nX_train = X_train.drop([\"CategoricalFare\"], axis = 1)","76dd49d0":"X_train.head()","743446e7":"X_test.head()","4589e5ba":"X_train[\"Age\"].isnull().sum()","7b58f43e":"X_test[\"Age\"].isnull().sum()","3db8d834":"X_train[\"Age\"].fillna(X_train[\"Age\"].median(), inplace = True)\nX_test[\"Age\"].fillna(X_train[\"Age\"].median(), inplace = True)","b5946ce3":"X_train[\"Age\"].isnull().sum()","cd053946":"X_test[\"Age\"].isnull().sum()","f97038c8":"X_train.isnull().sum()","99aded40":"g = sns.FacetGrid(X_train,col = \"Survived\", aspect=4)\ng.map(sns.kdeplot, \"Age\",shade = True)\nplt.show()","24bbf49d":"train_test = [X_train,X_test]","2e24bcd2":"for dataset in train_test:\n  dataset.loc[dataset[\"Age\"] <= 16,\"Age\"] = 0\n  dataset.loc[(dataset[\"Age\"] > 16) & (dataset[\"Age\"] <= 26), \"Age\"] = 1\n  dataset.loc[(dataset[\"Age\"] > 26) & (dataset[\"Age\"] <= 36), \"Age\"] = 2\n  dataset.loc[(dataset[\"Age\"] > 36) & (dataset[\"Age\"] <=62), \"Age\"] = 3\n  dataset.loc[dataset[\"Age\"] > 62, \"Age\"] = 4","d159633f":"X_train.head(10)","24acc53c":"sns.barplot(x = \"Age\", y = \"Survived\", \n            data = X_train, \n            saturation=1);\nprint(\"0 =\",X_train[\"Survived\"][X_train[\"Age\"] == 0].value_counts(normalize = True)[1]*100)\nprint(\"1 =\",X_train[\"Survived\"][X_train[\"Age\"] == 1].value_counts(normalize = True)[1]*100)\nprint(\"2 =\",X_train[\"Survived\"][X_train[\"Age\"] == 2].value_counts(normalize = True)[1]*100)\nprint(\"3 =\",X_train[\"Survived\"][X_train[\"Age\"] == 3].value_counts(normalize = True)[1]*100)\nprint(\"4 =\",X_train[\"Survived\"][X_train[\"Age\"] == 4].value_counts(normalize = True)[1]*100)","4a8e129f":"sns.barplot(x = \"Age\", y = \"Survived\", \n            data = X_train, \n            saturation=1, hue = \"Title\");","c588d06d":"combine = [X_train,X_test]","007021b2":"for dataset in combine:\n  dataset[\"Embarked\"] = dataset[\"Embarked\"].fillna(\"S\")","54b77858":"for dataset in combine:\n  print(dataset.isnull().sum())","16d2ead1":"train_test = [X_train,X_test]","ddc4a87b":"for dataset in train_test:\n  dataset.loc[dataset[\"Fare\"] <= 17, \"Fare\"] = 0\n  dataset.loc[(dataset[\"Fare\"] > 17) & (dataset[\"Fare\"] <= 30), \"Fare\"] = 1\n  dataset.loc[(dataset[\"Fare\"] >30) & (dataset[\"Fare\"] <= 100), \"Fare\"] = 2\n  dataset.loc[dataset[\"Fare\"] > 100, \"Fare\"] = 3","7469e191":"X_train.head()","2804014d":"for dataset in train_test:\n  dataset[\"Cabin\"] = dataset[\"Cabin\"].str[:1]","84f12342":"Pc11 = X_train[X_train[\"Pclass\"] == 1][\"Cabin\"].value_counts()\nPcl2 = X_train[X_train[\"Pclass\"] == 2][\"Cabin\"].value_counts()\nPcl3 = X_train[X_train[\"Pclass\"] == 3][\"Cabin\"].value_counts()\ndf = pd.DataFrame([Pc11,Pcl2,Pcl3])\ndf.index = [\"1st class\",\"2nd class\",\"3th class\"]\ndf.plot(kind = \"bar\", stacked = True, figsize = (10,5));","16b60fac":"cabin_mapping1 = {\"A\": 0,\"B\": 0.4,\"C\":0.8,\"D\":1.2,\"E\":1.6,\"F\":2,\"G\":2.4,\"T\":2.8}\nfor dataset in train_test:\n  dataset[\"Cabin\"] = dataset[\"Cabin\"].map(cabin_mapping1)","ab85a443":"X_train[\"Cabin\"].fillna(X_train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace = True)\nX_test[\"Cabin\"].fillna(X_test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace = True)","4d0e35e8":"for dataset in combine:\n  print(dataset.isnull().sum())","31e92416":"X_train[\"FamilySize\"] = X_train[\"SibSp\"] + X_train[\"Parch\"] + 1\nX_test[\"FamilySize\"] = X_test[\"SibSp\"] + X_test[\"Parch\"] + 1","bdc48ec7":"sns.barplot(x = \"FamilySize\", y = \"Survived\", \n            data = X_train, \n            saturation=1);","8430b9c3":"sex_mapping = {\n    \"male\": 0,\n    \"female\": 1\n}\nfor dataset in train_test:\n  dataset[\"Sex\"] = dataset[\"Sex\"].map(sex_mapping)","b1c0a5c3":"embarked_mapping = {\n    \"S\": 0,\n    \"C\": 1,\n    \"Q\": 2\n}\nfor dataset in train_test:\n  dataset[\"Embarked\"] = dataset[\"Embarked\"].map(embarked_mapping)","aac330b7":"FeaturesDrop = [\"Ticket\",\"SibSp\",\"Parch\"]\nX_train = X_train.drop(FeaturesDrop, axis = 1)\nX_test = X_test.drop(FeaturesDrop, axis = 1)","9e30e092":"X_train.head(n = 891)","276b61c4":"X_train.shape, X_test.shape","726bfe06":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC","55071c4b":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","a3cc7503":"train_x = X_train.drop(\"Survived\", axis=1)\ntrain_y = X_train[\"Survived\"]\ntrain_x.shape, train_y.shape, X_test.shape","816509a9":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_x, train_y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","7cfa037e":"round(np.mean(score)* 100,2)","e3835ff5":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_x, train_y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","db1872fc":"round(np.mean(score) * 100,2)","37d6a769":"clf = RandomForestClassifier(n_estimators=200)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_x, train_y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","78f178de":"round(np.mean(score)*100,2)","dcab2180":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_x, train_y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","c37c58d9":"round(np.mean(score)*100,2)","15c63442":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_x, train_y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","d03dea4a":"round(np.mean(score)*100,2)","801608e9":"clf = LogisticRegression()\nscoring = \"accuracy\"\nscore = cross_val_score(clf, train_x, train_y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","faef0a52":"round(np.mean(score)*100,2)","a00b47dc":"clf = LogisticRegression()\nclf.fit(train_x, train_y)\n\ntest_data = X_test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(X_test)","3588f455":"submission = pd.DataFrame({\n        \"PassengerId\": X_test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","e2ad87af":"# **Variable Description**\n\n\n*   PassengerId: unique id number to each passenger\n*   Survived: passenger survived(1) or died(0)\n\n*   Pclass: passenger class\n*   Name: name\n\n* Sex: gender of passenger\n* Age: age of passenger\n* SibSp: number of siblings\/spouses\n* Parch: number of parents\/children\n* Ticket: ticket number\n* Fare: amount of money spend on ticket\n* Cabin: cabin category\n* Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)"}}