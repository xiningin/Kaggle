{"cell_type":{"a36d6ea9":"code","05c3e4da":"code","759ecc05":"code","1e2cd6e2":"code","360eb17a":"code","d5c392bb":"code","eeb6f72f":"code","284f0220":"code","ebb01556":"code","13221a46":"code","5d6261d7":"code","ae6041c9":"code","a3d8b04d":"code","eca873ee":"code","e8ebc353":"code","8b83cf01":"code","ccb68c3a":"code","96b09239":"code","7816999d":"code","7537ff65":"code","f78bb975":"code","0ae4dd81":"code","319b38a3":"code","7ce56c94":"code","1088f96e":"code","82326c1b":"code","5a491d28":"code","7986c271":"code","38e7d3d5":"code","c375721a":"code","db70e694":"code","957196e2":"code","112a02c4":"code","86f838cd":"code","c8cb73a4":"code","cf1a02b7":"code","f0f467e2":"code","9585234f":"code","eb825e53":"code","ac6796ad":"code","ac86257e":"code","aa3dd8a6":"code","a5e7c8af":"code","b8ebafe9":"code","55a27cbf":"code","9d59e1c5":"code","3af2c709":"code","95c6133b":"code","e692b262":"code","6365a7d0":"code","a68f3936":"code","68bcac67":"code","26c833a5":"code","0c2d7ede":"code","049ca32b":"code","19cca5e4":"code","d94bb384":"code","3bd59090":"code","8310b7c4":"code","39bf13af":"code","0e62ee46":"code","8989e98e":"code","14dbaa21":"code","68486b21":"code","522da7ff":"code","f134e2fe":"code","8542e134":"code","de11b70d":"code","9486bb6b":"code","7f3a97e7":"code","03cefd8b":"code","f21bac1b":"code","7240739f":"code","2df34d8c":"code","d3aa92cd":"markdown"},"source":{"a36d6ea9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","05c3e4da":"import seaborn as sns\nimport matplotlib.pyplot as plt\ndata = pd.read_csv('\/kaggle\/input\/world-happiness\/2019.csv')","759ecc05":"data.info()","1e2cd6e2":"data.head()","360eb17a":"data.corr()   #GDP per capita ve Generosity neredeyse ters orant\u0131","d5c392bb":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)                    #\u00d6NEMS\u0130Z\nplt.show()","eeb6f72f":"data.columns","284f0220":"data.rename(columns={'Overall rank': 'Overall_rank'}, inplace=True)\ndata.rename(columns={'Country or region': 'Country_region'}, inplace=True)\ndata.rename(columns={'GDP per capita': 'GDP'}, inplace=True)\ndata.rename(columns={'Social support': 'Social_support'}, inplace=True)\ndata.rename(columns={'Freedom to make life choices': 'Freedom'}, inplace=True)\ndata.rename(columns={'Perceptions of corruption': 'Perceptions_of_corruption'}, inplace=True)\ndata.rename(columns={'Healthy life expectancy': 'Healthy_lifeexp'}, inplace=True)\ndata.columns","ebb01556":"data.Social_support.plot(color = 'g',label = 'Social_support',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.GDP.plot(color = 'r',label = 'GDP',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     \nplt.xlabel('x axis')              \nplt.ylabel('y axis')\nplt.title('Line Plot')               #x axis index yani 156 tane.\nplt.show()","13221a46":"data.plot(kind='scatter', x='Score', y='Social_support',alpha = 0.5,color = 'red')   #alpha, saydaml\u0131k\nplt.xlabel('Score')              # label = name of label\nplt.ylabel('Social_support')\nplt.title('Score Social_support Scatter Plot')            # title = title of plot\nplt.show","5d6261d7":"data.Score.plot(kind = 'hist',bins = 50,figsize = (12,12))  \nplt.show()","ae6041c9":"data","a3d8b04d":"x= data[\"Score\"]>5\nx                    # x yazarsan sadece true false veriri data i\u00e7inde matris verir. \u00c7\u00dcNK\u00dc TYPE DATAFRAME D\u0130R. 97 TANE.\ndata[x]","eca873ee":"x=data[(data['Score']>7) & (data['Social_support']>1)]\n\nx","e8ebc353":"print(\"hello\")","8b83cf01":"list1 = [3,5,7]\ny = map(lambda x: x**2,list1)\nprint(list(y))","ccb68c3a":"list1 = [5,10,15]\nlist2 = [i**2 if i == 10 else i-5 if i<7 else i + 5 for i in list1]\nprint(list2)","96b09239":"dictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())\n\n\n\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\n\n\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\n\n\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\n\n\nprint('france' in dictionary)        # check include or not\n\n\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","7816999d":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n\n\n\n\n# what if we want to change default arguments\nprint(f(5,4,3))\n\n\n\n\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)","7537ff65":"lis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\n    \n    \n\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\n    \n    \n    \ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\n    \n    \n    \n\n\nfor index,value in data[['Score']][0:1].iterrows():\n    print(index,\" : \",value)\n    \n    \n    \n    \n    i = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","f78bb975":"x = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","0ae4dd81":"def square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())  ","319b38a3":"def f(*args):\n    for i in args:\n        print(i)\nf(1)\n\n\n\n\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\n\n\n\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))\n\n\n\nnumber_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))\n\n\n\n\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nz_list = list(z)\n\n\nprint(z_list)","7ce56c94":"num1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)\n\n\n\n\n\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)\n\n\nthreshold = sum(data.Score)\/len(data.Score)\nthreshold\ndata[\"ortalamaskordan\"] = [\"high\" if i>threshold else \"low\" for i in data.Score]\n\n\ndata.loc[:, [\"ortalamaskordan\",\"Score\"]]\ndata.loc[::-1, [\"ortalamaskordan\",\"Score\"]]\n","1088f96e":"# arada bo\u015fluk oldu\u011fu i\u00e7in kodu \u00e7a\u011f\u0131ramay\u0131z \u00d6r; Type 1 bu y\u00fczden data[\"Type 1\"] yapar\u0131z","82326c1b":"data.tail()","5a491d28":"data.shape                #156 sat\u0131r ,10 s\u00fctun(future) var","7986c271":"data.columns","38e7d3d5":"data.describe()","c375721a":"data.boxplot(column='Score')    \n# line at top is max\n# line at top is 75%\n# line is median (50%)\n# line at bottom is 25%\n# line at bottom is min","db70e694":"data_new= data.head()\ndata_new\n\nmelted_ornegi = pd.melt(frame=data_new,id_vars = 'Country_region', value_vars= ['Score','Generosity'])\nmelted_ornegi\n\n\n# melted_ornegi eski haline getirelim\n\nmelted_ornegi.pivot(index = 'Country_region', columns = 'variable',values='value')\n","957196e2":"data1 = data[0:9]\ndata2= data[0:3]\n\n\nconc_orn = pd.concat([data1,data2],axis =0,ignore_index =True)                         # axis = 0 : adds dataframes in row,yani vertical birle\u015ftirir daha mant\u0131kl\u0131\n\n\nconc_orn","112a02c4":"data1 = data['GDP'].head(8)\ndata2= data['Social_support'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","86f838cd":"int(0.8)","c8cb73a4":"data.dtypes","cf1a02b7":"data['Country_region'] = data['Country_region'].astype('category')\ndata['Score'] = data['Score'].astype('int')\n\ndata                                                               #\u00f6rne\u011fin int leri string yazm\u0131\u015flar b\u00f6ylece inte \u00e7evrriz yararl\u0131. ama \u015fimdi eski haline d\u00f6nd\u00fcremedim\n                                                                    #o y\u00fczden data setimi ba\u015ftan okutal\u0131m.","f0f467e2":"data.loc[:1,\"Score\"] = 'NAN'\ndata.loc[:1,\"Score\"]\n","9585234f":"data = pd.read_csv('\/kaggle\/input\/world-happiness\/2019.csv')\ndata.rename(columns={'Overall rank': 'Overall_rank'}, inplace=True)                              #verileri en ba\u015ftaki hale getirmek i\u00e7in.\ndata.rename(columns={'Country or region': 'Country_region'}, inplace=True)\ndata.rename(columns={'GDP per capita': 'GDP'}, inplace=True)\ndata.rename(columns={'Social support': 'Social_support'}, inplace=True)\ndata.rename(columns={'Freedom to make life choices': 'Freedom'}, inplace=True)\ndata.rename(columns={'Perceptions of corruption': 'Perceptions_of_corruption'}, inplace=True)\ndata.rename(columns={'Healthy life expectancy': 'Healthy_lifeexp'}, inplace=True)\ndata.columns\ndata","eb825e53":"data[\"Country_region\"].value_counts(dropna =False)         # dropna false bo\u015f olanlar\u0131da g\u00f6ster demek, hangi stringden ne kadar var g\u00f6sterir.","ac6796ad":"data[\"Type 2\"].value_counts(dropna =False)          #pokemon type2 de bo\u015f veriler vard\u0131\n\ndata1=data\n\ndata1[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n\nassert  data['Type 2'].notnull().all()   #bunu \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131nda hi\u00e7bir\u015fey d\u00f6nmez,\u00e7\u00fcnk\u00fc art\u0131k bo\u015f data yok,kntrol yap\u0131l\u0131r\n\n\n#yada\n\ndata[\"Type 2\"].fillna('empty',inplace = True)    # empty diye dolduruyoruz\n\nassert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values,empty yapt\u0131k\n","ac86257e":"assert data.columns[1] == 'Score'         # assert ile kontrol yap\u0131l\u0131r, bunu \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131nd ahata verir Country_region bu yazsayd\u0131 score yerine bir\u015fey d\u00f6nmezdi.","aa3dd8a6":"# data frames from dictionary from list\n\n\ncountry = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\n\nlist_label = [\"country\",\"population\"]\n\nlist_col = [country,population]\n\n\nzipped = list(zip(list_label,list_col))\nzipped #series verir burada \u00e7al\u0131\u015ft\u0131r\u0131rsan\n\ndata_dict = dict(zipped)\n\ndf = pd.DataFrame(data_dict)\n\ndf\n\n\n# Add new columns\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf\n\n# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf\n","a5e7c8af":"data.columns","b8ebafe9":"data1 = data.loc[:,[\"Score\",\"GDP\",\"Social_support\"]]\ndata1.plot()\n# it is confusing","55a27cbf":"# subplots\ndata1.plot(subplots = True)\nplt.show()","9d59e1c5":"data1.plot(kind = \"hist\",y = \"Score\",bins = 50,range= (0,250),normed = True)    #normed ve range yeni","3af2c709":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) \n\n# As you can see date is string\n# however we want it to be datetime object\n\n\ndatetime_object = pd.to_datetime(time_list)\n\nprint(type(datetime_object))\ndatetime_object\n","95c6133b":"\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\n\n\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\n\n\ndatetime_object = pd.to_datetime(date_list)\n\n\ndata2[\"date\"] = datetime_object\n\n\n# lets make date as index\ndata2= data2.set_index(\"date\")\n\n\ndata2 ","e692b262":"#index, tarih oldu, tarihe g\u00f6re yazd\u0131rabiliriz.\nprint(data2.loc[\"1993-03-16\"])\n\n\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","6365a7d0":"#Resampling: statistical method over different time intervals\n#Needs string to specify frequency like \"M\" = month or \"A\" = year\n\n\n\ndata2.resample(\"A\").mean()\ndata2.resample(\"M\").mean()","a68f3936":"data2.resample(\"M\").first().interpolate(\"linear\")           #n\u00fcmeric olanlar\u0131 lineer dolduruyor.","68bcac67":"#or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")       #meanleri bozmucak \u015fekilde doldurur.","26c833a5":"data = pd.read_csv('\/kaggle\/input\/world-happiness\/2019.csv')\ndata.rename(columns={'Overall rank': 'Overall_rank'}, inplace=True)                              #verileri en ba\u015ftaki hale getirmek i\u00e7in.\ndata.rename(columns={'Country or region': 'Country_region'}, inplace=True)\ndata.rename(columns={'GDP per capita': 'GDP'}, inplace=True)\ndata.rename(columns={'Social support': 'Social_support'}, inplace=True)\ndata.rename(columns={'Freedom to make life choices': 'Freedom'}, inplace=True)\ndata.rename(columns={'Perceptions of corruption': 'Perceptions_of_corruption'}, inplace=True)\ndata.rename(columns={'Healthy life expectancy': 'Healthy_lifeexp'}, inplace=True)\ndata.columns\ndata","0c2d7ede":"data[\"Score\"][1]\ndata.Score[1]\ndata.loc[1,[\"Score\"]]\ndata[[\"Score\",\"GDP\"]]","049ca32b":"# Difference between selecting columns: series and dataframes\n#print(type(data[\"HP\"]))     # series\n#print(type(data[[\"HP\"]]))   # data frames","19cca5e4":"#data.loc[1:10,\"HP\":\"Defense\"]   # 10 and \"Defense\" are inclusive\n#data.loc[10:1:-1,\"HP\":\"Defense\"] \n#data.loc[1:10,\"Speed\":] ","d94bb384":"boolean = data.Score > 5                 #boolean, true , false demek\ndata[boolean]","3bd59090":"first_filter = data.Score > 5\nsecond_filter = data.GDP > 1\ndata[first_filter & second_filter]","8310b7c4":"data.GDP[data.Score<7]","39bf13af":"def div(n):\n    return n\/2\ndata.Score.apply(div)\n\n\n#or\n\ndata.Score.apply(lambda n : n\/2)   #better","0e62ee46":"data[\"total_power\"] = data.Score + data.GDP\ndata.head()","8989e98e":"print(data.index.name)\ndata.index.name = \"index_name\"\ndata.head()\n\n\n#data= data.set_index(\"index_name\")         # B\u00d6YLECE \u0130NDEX LER SIFIRDAN DE\u011e\u0130L 1 DEN BA\u015eLAR\n#data.head()","14dbaa21":"data.index = range(1,157,1)\ndata.head()\n\nprint(data.index.name)\ndata.index.name = \"index_name\"\ndata.head()\n","68486b21":"data","522da7ff":"#istersek indexi bir s\u00fctunada e\u015fitleyebiliriz,mesala overall rank yapa\u0131lm\n\ndata.index = data[\"Overall_rank\"]\ndata.head()","f134e2fe":"data = pd.read_csv('\/kaggle\/input\/world-happiness\/2019.csv')\ndata.rename(columns={'Overall rank': 'Overall_rank'}, inplace=True)                              #verileri en ba\u015ftaki hale getirmek i\u00e7in.\ndata.rename(columns={'Country or region': 'Country_region'}, inplace=True)\ndata.rename(columns={'GDP per capita': 'GDP'}, inplace=True)\ndata.rename(columns={'Social support': 'Social_support'}, inplace=True)\ndata.rename(columns={'Freedom to make life choices': 'Freedom'}, inplace=True)\ndata.rename(columns={'Perceptions of corruption': 'Perceptions_of_corruption'}, inplace=True)\ndata.rename(columns={'Healthy life expectancy': 'Healthy_lifeexp'}, inplace=True)\ndata.columns\ndata","8542e134":"data[\"bolge\"] = data.Score<4\ndata.head(156)","de11b70d":"data1 = data.set_index([\"bolge\",\"Score\"]) \ndata1.head(156)","9486bb6b":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf\n\n\n\n#\u015fimdi bu iki tedavinin genderlar\u0131na g\u00f6re responselar\u0131n\u0131 g\u00f6rmek istiyorum,pivot et.\n\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\n\n\n#outer,inner s\u0131ralama\n\ndf1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n\n#indexlerin yerini de\u011fi\u015ftirmek\n\ndf2 = df1.swaplevel(0,1)\ndf2\n\n\n#melt\n\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","7f3a97e7":"\ndf.groupby(\"treatment\") .mean()\ndf.groupby(\"treatment\").age.max() ","03cefd8b":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","f21bac1b":"#markdownda renk i\u00e7in < font color = 'blue' >\n","7240739f":"# linklerde k\u00f6pr\u00fc i\u00e7in\n\n#   [Load and Check Data](#1)\n\n# ve alttakine de bunu yaz , <a id = \"1\"><\/a><br>","2df34d8c":"a = [1,2,3,4]\nplt.plot(a)\nplt.show()","d3aa92cd":"ayrk de\u011ferler olaca\u011f\u0131ndan, mean yan\u0131ltabilir, o y\u00fczden median daha mant\u0131kl\u0131 olabilir analizlerde. maa\u015f-zam \u00f6rne\u011fi."}}