{"cell_type":{"f85b5eea":"code","0e69b2fd":"code","a06e5a43":"code","1224e8f9":"code","4429a24d":"code","c58bc7b7":"code","239e169d":"code","022700b3":"code","f29f340f":"code","a77baff7":"code","5ed74e81":"code","1ae9e1c3":"code","3405b251":"code","462412ed":"code","9b2ece5d":"code","80cd0d50":"code","d1130bce":"code","d87314a1":"code","fd1d10b8":"code","24b84888":"code","810f1b0f":"code","cab84534":"code","6e05a7c9":"code","de868c26":"code","b9aa7284":"code","98057482":"code","38b83708":"code","3a1d3763":"code","b6cd4131":"code","f2d8b9bb":"code","2c9df929":"code","a37c0778":"code","6f2317af":"code","1931e984":"code","846750b8":"code","75a85fe5":"code","a75995f7":"code","13e1d49d":"code","7b085fe2":"code","e19ce8bc":"code","9daa6f82":"code","d717c5da":"code","301ae188":"code","6ce1dd36":"code","8de7b40e":"code","0294c8ae":"code","8dcdf918":"code","ae7d7899":"code","48fe225e":"code","9e25f6cb":"code","3b63b086":"code","22fcb398":"code","b7f85d1f":"code","6406414a":"code","758e8eb0":"code","557f7798":"code","9365b0c7":"code","75361c88":"markdown","cad5a079":"markdown","e621e9ed":"markdown","8e75bc5d":"markdown","e126f12b":"markdown","056dfb43":"markdown","fa997648":"markdown","050ad28e":"markdown","ea4e5b38":"markdown","c6d598e6":"markdown","4532477a":"markdown","4a31e039":"markdown","5fc156e1":"markdown","69f4cb75":"markdown","5e334da9":"markdown","c9f97fd2":"markdown","2c12a628":"markdown","708b8f19":"markdown","4ef63d22":"markdown","ff54bc0f":"markdown","6b136cd3":"markdown","8be84482":"markdown","1ae894d2":"markdown","eddae44f":"markdown","65a1a458":"markdown","473e5408":"markdown","e92ba21c":"markdown","5d270f80":"markdown","d4319e58":"markdown","6def1342":"markdown","75093f6f":"markdown","43fc3b4c":"markdown"},"source":{"f85b5eea":"!pip install pyspark","0e69b2fd":"import os\nimport pandas as pd\nimport numpy as np\n\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession, SQLContext\n\nfrom pyspark.sql.types import *\nimport pyspark.sql.functions as F\nfrom pyspark.sql.functions import udf, col\n\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.mllib.evaluation import RegressionMetrics\n\nfrom pyspark.ml.tuning import ParamGridBuilder, CrossValidator, CrossValidatorModel\nfrom pyspark.ml.feature import VectorAssembler, StandardScaler\nfrom pyspark.ml.evaluation import RegressionEvaluator","a06e5a43":"import seaborn as sns\nimport matplotlib.pyplot as plt","1224e8f9":"# Visualization\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_colwidth', 400)\n\nfrom matplotlib import rcParams\nsns.set(context='notebook', style='whitegrid', rc={'figure.figsize': (18,4)})\nrcParams['figure.figsize'] = 18,4\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'","4429a24d":"# setting random seed for notebook reproducability\nrnd_seed=23\nnp.random.seed=rnd_seed\nnp.random.set_state=rnd_seed","c58bc7b7":"spark = SparkSession.builder.master(\"local[2]\").appName(\"Linear-Regression-California-Housing\").getOrCreate()","239e169d":"spark","022700b3":"sc = spark.sparkContext\nsc","f29f340f":"sqlContext = SQLContext(spark.sparkContext)\nsqlContext","a77baff7":"HOUSING_DATA = '..\/input\/cal_housing.data'","5ed74e81":"# define the schema, corresponding to a line in the csv data file.\nschema = StructType([\n    StructField(\"long\", FloatType(), nullable=True),\n    StructField(\"lat\", FloatType(), nullable=True),\n    StructField(\"medage\", FloatType(), nullable=True),\n    StructField(\"totrooms\", FloatType(), nullable=True),\n    StructField(\"totbdrms\", FloatType(), nullable=True),\n    StructField(\"pop\", FloatType(), nullable=True),\n    StructField(\"houshlds\", FloatType(), nullable=True),\n    StructField(\"medinc\", FloatType(), nullable=True),\n    StructField(\"medhv\", FloatType(), nullable=True)]\n)","1ae9e1c3":"# Load housing data\nhousing_df = spark.read.csv(path=HOUSING_DATA, schema=schema).cache()","3405b251":"# Inspect first five rows\nhousing_df.take(5)","462412ed":"# Show first five rows\nhousing_df.show(5)","9b2ece5d":"# show the dataframe columns\nhousing_df.columns","80cd0d50":"# show the schema of the dataframe\nhousing_df.printSchema()","d1130bce":"# run a sample selection\nhousing_df.select('pop','totbdrms').show(10)","d87314a1":"# group by housingmedianage and see the distribution\nresult_df = housing_df.groupBy(\"medage\").count().sort(\"medage\", ascending=False)","fd1d10b8":"result_df.show(10)","24b84888":"result_df.toPandas().plot.bar(x='medage',figsize=(14, 6))\n","810f1b0f":"(housing_df.describe().select(\n                    \"summary\",\n                    F.round(\"medage\", 4).alias(\"medage\"),\n                    F.round(\"totrooms\", 4).alias(\"totrooms\"),\n                    F.round(\"totbdrms\", 4).alias(\"totbdrms\"),\n                    F.round(\"pop\", 4).alias(\"pop\"),\n                    F.round(\"houshlds\", 4).alias(\"houshlds\"),\n                    F.round(\"medinc\", 4).alias(\"medinc\"),\n                    F.round(\"medhv\", 4).alias(\"medhv\"))\n                    .show())","cab84534":"# Adjust the values of `medianHouseValue`\nhousing_df = housing_df.withColumn(\"medhv\", col(\"medhv\")\/100000)","6e05a7c9":"# Show the first 2 lines of `df`\nhousing_df.show(2)","de868c26":"housing_df.columns","b9aa7284":"# Add the new columns to `df`\nhousing_df = (housing_df.withColumn(\"rmsperhh\", F.round(col(\"totrooms\")\/col(\"houshlds\"), 2))\n                       .withColumn(\"popperhh\", F.round(col(\"pop\")\/col(\"houshlds\"), 2))\n                       .withColumn(\"bdrmsperrm\", F.round(col(\"totbdrms\")\/col(\"totrooms\"), 2)))","98057482":"# Inspect the result\nhousing_df.show(5)","38b83708":"# Re-order and select columns\nhousing_df = housing_df.select(\"medhv\", \n                              \"totbdrms\", \n                              \"pop\", \n                              \"houshlds\", \n                              \"medinc\", \n                              \"rmsperhh\", \n                              \"popperhh\", \n                              \"bdrmsperrm\")","3a1d3763":"featureCols = [\"totbdrms\", \"pop\", \"houshlds\", \"medinc\", \"rmsperhh\", \"popperhh\", \"bdrmsperrm\"]","b6cd4131":"# put features into a feature vector column\nassembler = VectorAssembler(inputCols=featureCols, outputCol=\"features\") ","f2d8b9bb":"assembled_df = assembler.transform(housing_df)","2c9df929":"assembled_df.show(10, truncate=False)","a37c0778":"# Initialize the `standardScaler`\nstandardScaler = StandardScaler(inputCol=\"features\", outputCol=\"features_scaled\")","6f2317af":"# Fit the DataFrame to the scaler\nscaled_df = standardScaler.fit(assembled_df).transform(assembled_df)","1931e984":"# Inspect the result\nscaled_df.select(\"features\", \"features_scaled\").show(10, truncate=False)","846750b8":"# Split the data into train and test sets\ntrain_data, test_data = scaled_df.randomSplit([.8,.2], seed=rnd_seed)","75a85fe5":"train_data.columns","a75995f7":"# Initialize `lr`\nlr = (LinearRegression(featuresCol='features_scaled', labelCol=\"medhv\", predictionCol='predmedhv', \n                               maxIter=10, regParam=0.3, elasticNetParam=0.8, standardization=False))","13e1d49d":"# Fit the data to the model\nlinearModel = lr.fit(train_data)","7b085fe2":"# Coefficients for the model\nlinearModel.coefficients","e19ce8bc":"featureCols","9daa6f82":"# Intercept for the model\nlinearModel.intercept","d717c5da":"coeff_df = pd.DataFrame({\"Feature\": [\"Intercept\"] + featureCols, \"Co-efficients\": np.insert(linearModel.coefficients.toArray(), 0, linearModel.intercept)})\ncoeff_df = coeff_df[[\"Feature\", \"Co-efficients\"]]","301ae188":"coeff_df","6ce1dd36":"# Generate predictions\npredictions = linearModel.transform(test_data)","8de7b40e":"# Extract the predictions and the \"known\" correct labels\npredandlabels = predictions.select(\"predmedhv\", \"medhv\")","0294c8ae":"predandlabels.show()","8dcdf918":"# Get the RMSE\nprint(\"RMSE: {0}\".format(linearModel.summary.rootMeanSquaredError))","ae7d7899":"print(\"MAE: {0}\".format(linearModel.summary.meanAbsoluteError))","48fe225e":"# Get the R2\nprint(\"R2: {0}\".format(linearModel.summary.r2))","9e25f6cb":"evaluator = RegressionEvaluator(predictionCol=\"predmedhv\", labelCol='medhv', metricName='rmse')\nprint(\"RMSE: {0}\".format(evaluator.evaluate(predandlabels)))","3b63b086":"evaluator = RegressionEvaluator(predictionCol=\"predmedhv\", labelCol='medhv', metricName='mae')\nprint(\"MAE: {0}\".format(evaluator.evaluate(predandlabels)))","22fcb398":"evaluator = RegressionEvaluator(predictionCol=\"predmedhv\", labelCol='medhv', metricName='r2')\nprint(\"R2: {0}\".format(evaluator.evaluate(predandlabels)))","b7f85d1f":"# mllib is old so the methods are available in rdd\nmetrics = RegressionMetrics(predandlabels.rdd)","6406414a":"print(\"RMSE: {0}\".format(metrics.rootMeanSquaredError))","758e8eb0":"print(\"MAE: {0}\".format(metrics.meanAbsoluteError))","557f7798":"print(\"R2: {0}\".format(metrics.r2))","9365b0c7":"spark.stop()","75361c88":"### 6.2 Standardization\n\nNext, we can finally scale the data using `StandardScaler`. The input columns are the `features`, and the output column with the rescaled that will be included in the scaled_df will be named `\"features_scaled\"`:","cad5a079":"### 4.2 Summary Statistics:\n\nSpark DataFrames include some built-in functions for statistical processing. The describe() function performs summary statistics calculations on all numeric columns and returns them as a DataFrame.","e621e9ed":"**Using the RegressionMetrics from pyspark.mllib package:**","8e75bc5d":"If you like it, please vote :)","e126f12b":"### 4.1 Distribution of the median age of the people living in the area:","056dfb43":"Most of the residents are either in their youth or they settle here during their senior years. Some data are showing median age < 10 which seems to be out of place.","fa997648":"**Using the RegressionEvaluator from pyspark.ml package:**","050ad28e":"## 6. Feature Engineering\nNow that we have adjusted the values in medianHouseValue, we will now add the following columns to the data set:\n\n+ Rooms per household which refers to the number of rooms in households per block group;\n+ Population per household, which basically gives us an indication of how many people live in households per block group; And\n+ Bedrooms per room which will give us an idea about how many rooms are bedrooms per block group;\n\nAs we're working with DataFrames, we can best use the `select()` method to select the columns that we're going to be working with, namely `totalRooms`, `households`, and `population`. Additionally, we have to indicate that we're working with columns by adding the `col()` function to our code. Otherwise, we won't be able to do element-wise operations like the division that we have in mind for these three variables:","ea4e5b38":"### 5.1 Preprocessing The Target Values\nFirst, let's start with the `medianHouseValue`, our dependent variable. To facilitate our working with the target values, we will express the house values in units of 100,000. That means that a target such as `452600.000000` should become `4.526`:","c6d598e6":"We pass in a list with two numbers that represent the size that we want your training and test sets to have and a seed, which is needed for reproducibility reasons.\n\n**Note** that the argument `elasticNetParam` corresponds to $\\alpha$ or the vertical intercept and that the `regParam` or the regularization paramater corresponds to $\\lambda$.","4532477a":"## 5. Data Preprocessing\n\nWith all this information that we gathered from our small exploratory data analysis, we know enough to preprocess our data to feed it to the model.\n\n+ we shouldn't care about missing values; all zero values have been excluded from the data set.\n+ We should probably standardize our data, as we have seen that the range of minimum and maximum values is quite big.\n+ There are possibly some additional attributes that we could add, such as a feature that registers the number of bedrooms per room or the rooms per household.\n+ Our dependent variable is also quite big; To make our life easier, we'll have to adjust the values slightly.","4a31e039":"**Create an ElasticNet model:**\n\nElasticNet is a linear regression model trained with L1 and L2 prior as regularizer. This combination allows for learning a sparse model where few of the weights are non-zero like Lasso, while still maintaining the regularization properties of Ridge. We control the convex combination of L1 and L2 using the l1_ratio parameter.\n\nElastic-net is useful when there are multiple features which are correlated with one another. Lasso is likely to pick one of these at random, while elastic-net is likely to pick both.\n\nA practical advantage of trading-off between Lasso and Ridge is it allows Elastic-Net to inherit some of Ridge\u2019s stability under rotation.\n\nThe objective function to minimize is in this case:\n\\begin{align}\nmin_w\\frac{1}{2n_{samples}}{\\parallel{X_w - y}\\parallel}^2_2 + \\alpha\\lambda{\\parallel{X_w - y}\\parallel}_1 + \\frac{\\alpha(1-\\lambda)}{2}{\\parallel{w}\\parallel}^2_2\n\\end{align}\n\nhttp:\/\/scikit-learn.org\/stable\/modules\/linear_model.html#elastic-net","5fc156e1":"### 8.1 Inspect the Model Co-efficients","69f4cb75":"### 6.1 Feature Extraction\n\nNow that we have re-ordered the data, we're ready to normalize the data. We will choose the features to be normalized.","5e334da9":"We can see that, for the first row, there are about 6.98 rooms per household, the households in the block group consist of about 2.5 people and the amount of bedrooms is quite low with 0.14:","c9f97fd2":"We can clearly see that the values have been adjusted correctly when we look at the result of the show() method:","2c12a628":"## 2. Creating the Spark Session","708b8f19":"## 1. Understanding the Data Set\n\nThe California Housing data set appeared in a 1997 paper titled *Sparse Spatial Autoregressions*, written by Pace, R. Kelley and Ronald Barry and published in the Statistics and Probability Letters journal. The researchers built this data set by using the 1990 California census data.\n\nThe data contains one row per census block group. A block group is the smallest geographical unit for which the U.S. Census Bureau publishes sample data (a block group typically has a population of 600 to 3,000 people). In this sample a block group on average includes 1425.5 individuals living in a geographically compact area.\n\nThese spatial data contain 20,640 observations on housing prices with 9 economic variables:\n\n<p style=\"text-align: justify;\"><\/p>\n<pre><strong>Longitude:<\/strong>refers to the angular distance of a geographic place north or south of the earth\u2019s equator for each block group\n<strong>Latitude :<\/strong>refers to the angular distance of a geographic place east or west of the earth\u2019s equator for each block group\n<strong>Housing Median Age:<\/strong>is the median age of the people that belong to a block group. Note that the median is the value that lies at the midpoint of a frequency distribution of observed values\n<strong>Total Rooms:<\/strong>is the total number of rooms in the houses per block group\n<strong>Total Bedrooms:<\/strong>is the total number of bedrooms in the houses per block group\n<strong>Population:<\/strong>is the number of inhabitants of a block group\n<strong>Households:<\/strong>refers to units of houses and their occupants per block group\n<strong>Median Income:<\/strong>is used to register the median income of people that belong to a block group\n<strong>Median House Value:<\/strong>is the dependent variable and refers to the median house value per block group\n<\/pre>\n\nWhat's more, we also learn that all the block groups have zero entries for the independent and dependent variables have been excluded from the data.\n\nThe Median house value is the dependent variable and will be assigned the role of the target variable in our ML model.\n","4ef63d22":"## 3. Load The Data From a File Into a Dataframe","ff54bc0f":"### 7. Building A Machine Learning Model With Spark ML\n\nWith all the preprocessing done, it's finally time to start building our Linear Regression model! Just like always, we first need to split the data into training and test sets. Luckily, this is no issue with the `randomSplit()` method:","6b136cd3":"### 8.2 Generating Predictions","8be84482":"## 8. Evaluating the Model\n\nWith our model in place, we can generate predictions for our test data: use the `transform()` method to predict the labels for our `test_data`. Then, we can use RDD operations to extract the predictions as well as the true labels from the DataFrame.","1ae894d2":"Look at the minimum and maximum values of all the (numerical) attributes. We see that multiple attributes have a wide range of values: we will need to normalize your dataset.","eddae44f":"### 8.3 Inspect the Metrics\n\nLooking at predicted values is one thing, but another and better thing is looking at some metrics to get a better idea of how good your model actually is.\n\n**Using the `LinearRegressionModel.summary` attribute:**\n\nNext, we can also use the `summary` attribute to pull up the `rootMeanSquaredError` and the `r2`.","65a1a458":"All the features have transformed into a Dense Vector.","473e5408":"+ The RMSE measures how much error there is between two datasets comparing a predicted value and an observed or known value. The smaller an RMSE value, the closer predicted and observed values are.\n\n+ The R2 (\"R squared\") or the coefficient of determination is a measure that shows how close the data are to the fitted regression line. This score will always be between 0 and a 100% (or 0 to 1 in this case), where 0% indicates that the model explains none of the variability of the response data around its mean, and 100% indicates the opposite: it explains all the variability. That means that, in general, the higher the R-squared, the better the model fits our data.","e92ba21c":"## 4. Data Exploration","5d270f80":"Since we don't want to necessarily standardize our target values, we'll want to make sure to isolate those in our data set. Note also that this is the time to leave out variables that we might not want to consider in our analysis. In this case, let's leave out variables such as longitude, latitude, housingMedianAge and totalRooms.\n\nIn this case, we will use the `select()` method and passing the column names in the order that is more appropriate. In this case, the target variable medianHouseValue is put first, so that it won't be affected by the standardization.","d4319e58":"Specifying the schema when loading data into a DataFrame will give better performance than schema inference.","6def1342":"# Predicting House Prices with Apache Spark\n\n## LINEAR REGRESSION\n\nIn this we'll make use of the [California Housing](http:\/\/www.dcc.fc.up.pt\/~ltorgo\/Regression\/cal_housing.html) data set. Note, of course, that this is actually 'small' data and that using Spark in this context might be overkill; This notebook is for educational purposes only and is meant to give us an idea of how we can use PySpark to build a machine learning model.","75093f6f":"There's definitely some improvements needed to our model! If we want to continue with this model, we can play around with the parameters that we passed to your model, the variables that we included in your original DataFrame.","43fc3b4c":"**Use a VectorAssembler to put features into a feature vector column:**"}}