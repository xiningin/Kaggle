{"cell_type":{"fb92ee8b":"code","783844bd":"code","708ce825":"code","e134587b":"code","50dfa494":"code","8b041737":"code","7b8bc7ce":"code","ccd037df":"code","14b775c3":"code","c3bb0d27":"code","232f1fcf":"code","9dae52a5":"code","ac2d1364":"code","64ae5399":"code","447974db":"code","0986a916":"code","29056a72":"code","153cb6b9":"code","c8f44a04":"code","5ae61b33":"code","1c0083ce":"code","ebe9c65d":"markdown","f4a8e8c9":"markdown","bb0b7b18":"markdown","4e1b3165":"markdown","6a4684b6":"markdown","66b7107e":"markdown","bef6bb15":"markdown","4d2d1157":"markdown"},"source":{"fb92ee8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","783844bd":"df = pd.read_csv(\"\/kaggle\/input\/online-food-delivery-preferencesbangalore-region\/onlinedeliverydata.csv\")\ndf","708ce825":"df.columns","e134587b":"df[\"Monthly Income\"].value_counts()","50dfa494":"df[\"Monthly Income\"].values","8b041737":"for i in range(388):\n    if df[\"Monthly Income\"].values[i] == \"No Income\":\n        df[\"Monthly Income\"].values[i] = 0\n    elif df[\"Monthly Income\"].values[i] == \"Below Rs.10000\":\n        df[\"Monthly Income\"].values[i] = 5000\n    elif df[\"Monthly Income\"].values[i] == \"10001 to 25000\":\n        df[\"Monthly Income\"].values[i] = 15000\n    elif df[\"Monthly Income\"].values[i] == \"25001 to 50000\":\n        df[\"Monthly Income\"].values[i] = 30000\n    elif df[\"Monthly Income\"].values[i] == \"More than 50000\":\n        df[\"Monthly Income\"].values[i] = 60000        \ndf.head(11)\n    ","7b8bc7ce":"df[\"Gender\"].value_counts()","ccd037df":"df[\"Marital Status\"].value_counts()","14b775c3":"df[\"Occupation\"].value_counts()","c3bb0d27":"from sklearn import preprocessing\nle_gender = preprocessing.LabelEncoder()\nle_gender.fit(['Female','Male'])\ndf.iloc[:,1] = le_gender.transform(df.iloc[:,1]) \n\n\nle_marital = preprocessing.LabelEncoder()\nle_marital.fit(['Single', 'Married','Prefer not to say'])\ndf.iloc[:,2] = le_marital.transform(df.iloc[:,2])\n\n\nle_occupation = preprocessing.LabelEncoder()\nle_occupation.fit([ 'Student', 'Employee','Self Employeed','House wife'])\ndf.iloc[:,3] = le_occupation.transform(df.iloc[:,3]) \n\ndf[0:5]","232f1fcf":"df_encoded = df\ndf_encoded.head()","9dae52a5":"df_encoded[\"Good Taste \"].value_counts()","ac2d1364":"le_goodtaste = preprocessing.LabelEncoder()\nle_goodtaste.fit(['Very Important','Important','Moderately Important','Slightly Important','Unimportant'])\ndf_encoded.iloc[:,51] = le_goodtaste.transform(df_encoded.iloc[:,51]) \ndf_encoded[0:5]","64ae5399":"X = df_encoded[['Age','Gender','Marital Status','Occupation','Monthly Income','Family size']].values\nX[0:5]","447974db":"y = df_encoded['Good Taste '].values\ny[0:5]","0986a916":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","29056a72":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","153cb6b9":"from sklearn.neighbors import KNeighborsClassifier\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport matplotlib.ticker as ticker\nfrom sklearn import metrics\n","c8f44a04":"Ks = 50\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\n\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","5ae61b33":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.fill_between(range(1,Ks),mean_acc - 3 * std_acc,mean_acc + 3 * std_acc, alpha=0.10,color=\"green\")\nplt.legend(('Accuracy ', '+\/- 1xstd','+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Neighbors (K)')\nplt.tight_layout()\nplt.show()","1c0083ce":"print( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","ebe9c65d":"*Here we see the best value of K is 1 for this K-NN model*...\n**Thanx for reading**...","f4a8e8c9":"# Preprocessing","bb0b7b18":"*Changing the income strings to integers*","4e1b3165":"# K-NN classification on 'Good Taste' review of the customers","6a4684b6":"# Encoding Labels","66b7107e":"*code saving*","bef6bb15":"*Label encoding of the column that will be predicted(Good Taste)*","4d2d1157":"# Best K value"}}