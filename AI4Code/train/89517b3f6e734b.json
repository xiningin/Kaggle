{"cell_type":{"7a4484b7":"code","8b9dc4c0":"code","81718ac6":"code","fbbfd8ba":"code","4857d0c6":"code","ba08e92e":"code","b51f545e":"code","5cb40f49":"code","f21a5a56":"code","36898b4b":"code","611891e4":"code","d52dc5f5":"code","69fdebf0":"code","be16de2c":"code","44c983e9":"code","6c4c221a":"code","f416a171":"code","8eab180e":"code","ad1789a5":"code","5c152782":"code","6216c6da":"code","16fec531":"code","e7c9f228":"code","bdb20ff9":"code","7029c8fb":"code","5b63edad":"code","544470b0":"code","cbdf57fe":"code","b94a6074":"code","47f0eaca":"code","e3adcef9":"code","81fe03e6":"markdown","15dadcb0":"markdown"},"source":{"7a4484b7":"import pandas as pd\nimport numpy as np","8b9dc4c0":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/gender_submission.csv\")","81718ac6":"print(train.shape,test.shape)","fbbfd8ba":"train.describe()\n","4857d0c6":"test.describe()","ba08e92e":"trainData = train.drop([\"PassengerId\",\"Name\",\"Age\",\"Ticket\",\"Cabin\"],axis=1,inplace = False)\ntestData = test.drop([\"PassengerId\",\"Name\",\"Age\",\"Ticket\",\"Cabin\"],axis=1,inplace = False)\n","b51f545e":"trainData.describe(), trainData.shape, testData.shape","5cb40f49":"trainData.fillna(axis=1,inplace = False,method = 'pad')\ntestData= testData.fillna(axis=1,inplace = False ,method = 'pad')","f21a5a56":"ytrain=trainData.Survived.values\nxtrain=trainData.drop('Survived', axis=1).values\nxtest = testData.values","36898b4b":"from sklearn.preprocessing import OneHotEncoder","611891e4":"xtrain.shape, ytrain.shape,xtest.shape","d52dc5f5":"xtest","69fdebf0":"for i in range(len(xtrain)):\n    if xtrain[:,1][i]=='male':\n        xtrain[:,1][i]=1\n    else:\n        xtrain[:,1][i]=0\n        \nfor i in range(len(xtest)):\n    if xtest[:,1][i]=='male':\n        xtest[:,1][i]=1\n    else:\n        xtest[:,1][i]=0\n\n","be16de2c":"xtest","44c983e9":"fare = 4\nfareMean=xtrain[:,fare].mean()\nfareStd=xtrain[:,fare].std()\n\nfor i in range(len(xtrain)):\n    xtrain[:,fare][i]= (xtrain[:,fare][i] - fareMean)\/ (fareStd*1.0)\n\n\nfare = 4\nfareMeanTest=xtest[:,fare].mean()\nfareStdTest=xtest[:,fare].std()\n\nfor i in range(len(xtest)):\n    xtest[:,fare][i]= (xtest[:,fare][i] - fareMean)\/ (fareStd*1.0) # scales it according to the train data\n\nxtrain,xtest\n      \n      ","6c4c221a":"dummies = pd.get_dummies(train.Embarked).values\ndummiesTest = pd.get_dummies(test.Embarked).values","f416a171":"dummies = dummies[:,:-1]\ndummiesTest = dummiesTest[:,:-1]","8eab180e":"dummies.shape, dummiesTest.shape","ad1789a5":"xtrain_onehot= xtrain[:,:-1]\nxtest_onehot = xtest[:,:-1]","5c152782":"xtrain_final = np.append(xtrain_onehot,dummies,axis=1)\nxtest_final = np.append(xtest_onehot, dummiesTest,axis=1)","6216c6da":"xtrain_final.shape,ytrain.shape,xtest_final.shape","16fec531":"from sklearn.svm import SVC\n","e7c9f228":"clf = SVC(kernel = \"rbf\",gamma='scale')","bdb20ff9":"from sklearn.model_selection import train_test_split","7029c8fb":"# xtrain1,xtest1,ytrain1,ytest1=train_test_split(xtrain_final,ytrain,random_state=5)\n# clf1 = SVC(kernel = \"rbf\",gamma='scale')\n# clf1.fit(xtrain1,ytrain1)\n# clf1.score(xtest1,ytest1)\n\n\n# #The above is a test script for accuracy, I got an accuracy of 82%, \n# #and test accuracy of 78%, hence it is clearly not over fitting\n","5b63edad":"clf.fit(xtrain_final,ytrain)","544470b0":"ypred = clf.predict(xtest_final)","cbdf57fe":"ypredDF = pd.DataFrame(ypred)","b94a6074":"ypredDF.to_csv(\"submission.csv\",sep=\",\",index_label=['PassengerId'],header=['Survived'],index=True)","47f0eaca":"temp = pd.read_csv('submission.csv')\ntemp.PassengerId = temp.PassengerId + 892","e3adcef9":"# submission\ntemp.to_csv(\"submission.csv\",sep=\",\",header=['PassengerId','Survived'],index=False)","81fe03e6":"# Titanic Dataset Kernel\n@ Ashish Gupta\n31st September 2018","15dadcb0":"# Insights into the data\n\nPassengerID is not useful\nName is not useful(could have told mr to miss, but that is available)\nSibSp is important but not that much\nparch is also important since kids with rich parents must have boarded first\nTickets, not so much (None)\nFares is also good indication but might be correlated to pClass\n\n\nCabin needs to be studied via frequency distribution\n\n\nEmbarked need to be one hot encoded, but first the missing values need to be replaced with most frequent category\n"}}