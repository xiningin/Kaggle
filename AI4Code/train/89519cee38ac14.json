{"cell_type":{"995e5e2a":"code","ed565ed4":"code","2191d873":"code","5924d4a7":"code","0a330b85":"code","409cfcb8":"code","f5f52921":"code","e49a1a71":"code","ab7ef0c6":"code","e1cecf96":"code","467e7b5f":"code","bea3cdb8":"code","6c6a208f":"code","09e7ccd1":"code","767d2108":"code","e12640ae":"code","c5c70c02":"code","7c4ab9e2":"code","271167b7":"code","238c9672":"code","eec9cf1b":"code","512c5e86":"code","e0d7b74e":"code","b69d26fb":"code","981e5ef6":"code","0c384d15":"code","1adfa92c":"markdown","edcc5959":"markdown","0f4dc191":"markdown","6ceab610":"markdown","29fb8e7b":"markdown","e0dea809":"markdown","2c8db8f7":"markdown","6797ba32":"markdown","9143042a":"markdown","b5a6ad25":"markdown","8bb36bbd":"markdown","8deed185":"markdown","459e7dd9":"markdown","65a7f7f9":"markdown","07169ca9":"markdown","04ea1687":"markdown","c46b423a":"markdown","c11bb213":"markdown","41be298f":"markdown","0e0af59d":"markdown","4b5600a5":"markdown","ae004b1b":"markdown","bbff6725":"markdown","bc7472d2":"markdown","1403269e":"markdown","f87cb637":"markdown","a2738f82":"markdown","4dc0a652":"markdown","3f62a98a":"markdown","d5c2ec44":"markdown","4f87b8da":"markdown","5dc5239f":"markdown","8fcda310":"markdown","6eb89ee0":"markdown","9f8d78ff":"markdown","875049e8":"markdown","220e1d45":"markdown","ecaaf032":"markdown","935b39c2":"markdown","c715f6bd":"markdown","155060ba":"markdown","3128d53f":"markdown","e26f00af":"markdown","8a8423ff":"markdown","8a96f3da":"markdown","d4d070c9":"markdown","867ef70b":"markdown","f97b7255":"markdown","327d152d":"markdown","cf0e0ccd":"markdown","e081e8ca":"markdown","e8c7b209":"markdown","14e490a2":"markdown","d81b988a":"markdown","227d5bbc":"markdown","8b62aff3":"markdown","49c443a4":"markdown","88c51c08":"markdown"},"source":{"995e5e2a":"from google.cloud import bigquery","ed565ed4":"# Create a \"Client\" object\nclient = bigquery.Client()","2191d873":"# Construct a reference to the \"hacker_news\" dataset\ndataset_ref = client.dataset(\"hacker_news\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)","5924d4a7":"# List all the tables in the \"hacker_news\" dataset\ntables = list(client.list_tables(dataset))\n\n# Print names of all tables in the dataset (there are four!)\nfor table in tables:  \n    print(table.table_id)","0a330b85":"# Construct a reference to the \"full\" table\ntable_ref = dataset_ref.table(\"full\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)","409cfcb8":"# Print information on all the columns in the \"full\" table in the \"hacker_news\" dataset\ntable.schema","f5f52921":"# Preview the first five lines of the \"full\" table\nclient.list_rows(table, max_results=5).to_dataframe()","e49a1a71":"# Preview the first five entries in the \"by\" column of the \"full\" table\nclient.list_rows(table, selected_fields=table.schema[:1], max_results=5).to_dataframe()","ab7ef0c6":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"openaq\" dataset\ndataset_ref = client.dataset(\"openaq\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# List all the tables in the \"openaq\" dataset\ntables = list(client.list_tables(dataset))\n\n# Print names of all tables in the dataset (there's only one!)\nfor table in tables:  \n    print(table.table_id)","e1cecf96":"# Construct a reference to the \"global_air_quality\" table\ntable_ref=dataset.table(\"global_air_quality\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"global_air_quality\" table\nclient.list_rows(table,max_results=5).to_dataframe()","467e7b5f":"# Query to select all the items from the \"city\" column where the \"country\" column is 'US'\n\nquery=\"\"\"SELECT city FROM `bigquery-public-data.openaq.global_air_quality`\n         WHERE COUNTRY = 'US'   \"\"\"","bea3cdb8":"# Create a \"Client\" object\nclient = bigquery.Client()\n","6c6a208f":"# Set up the query\nquery_job=client.query(query)","09e7ccd1":"# API request - run the query, and return a pandas DataFrame\nus_cities=query_job.to_dataframe()","767d2108":"# What five cities have the most measurements?\nus_cities.city.value_counts().head()","e12640ae":"# Query to get the score column from every row where the type column has value \"job\"\nquery = \"\"\"\n        SELECT score, title\n        FROM `bigquery-public-data.hacker_news.full`\n        WHERE type = \"job\" \n        \"\"\"\n\n# Create a QueryJobConfig object to estimate size of query without running it\ndry_run_config = bigquery.QueryJobConfig(dry_run=True)\n\n# API request - dry run query to estimate costs\ndry_run_query_job = client.query(query, job_config=dry_run_config)\n\nprint(\"This query will process {} bytes.\".format(dry_run_query_job.total_bytes_processed))","c5c70c02":"# Only run the query if it's less than 1 MB\nONE_MB = 1000*1000*1000\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=ONE_MB)\n\n# Set up the query (will only run if it's less than 1 MB)\nsafe_query_job = client.query(query, job_config=safe_config)\n\n# API request - try to run the query, and return a pandas DataFrame\nsafe_query_job.to_dataframe()","7c4ab9e2":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"hacker_news\" dataset\ndataset_ref = client.dataset(\"hacker_news\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# Construct a reference to the \"comments\" table\ntable_ref = dataset_ref.table(\"comments\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"comments\" table\nclient.list_rows(table, max_results=5).to_dataframe()\n","271167b7":"# Query to select comments that received more than 10 replies\nquery_popular = \"\"\"\n                SELECT parent, COUNT(id)\n                FROM `bigquery-public-data.hacker_news.comments`\n                GROUP BY parent\n                HAVING COUNT(id) > 10\n                \"\"\"","238c9672":"# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 10 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(query_popular, job_config=safe_config)\n\n# API request - run the query, and convert the results to a pandas DataFrame\npopular_comments = query_job.to_dataframe()\n\n# Print the first five rows of the DataFrame\npopular_comments.head()\n","eec9cf1b":"# Improved version of earlier query, now with aliasing & improved readability\nquery_improved = \"\"\"\n                SELECT parent, COUNT(1) AS numpost\n                FROM `bigquery-public-data.hacker_news.comments`\n                GROUP BY parent\n                HAVING COUNT(id) > 10\n                \"\"\"\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(query_improved, job_config=safe_config)\n\n# API request - run the query, and convert the results to a pandas DataFrame\nimproved_df = query_job.to_dataframe()\n\n# Print the first five rows of the DataFrame\nimproved_df.head()","512c5e86":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"nhtsa_traffic_fatalities\" dataset\ndataset_ref = client.dataset(\"nhtsa_traffic_fatalities\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# Construct a reference to the \"accident_2015\" table\ntable_ref = dataset_ref.table(\"accident_2015\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"accident_2015\" table\nclient.list_rows(table, max_results=5).to_dataframe()","e0d7b74e":"# Query to find out the number of accidents for each day of the week\nquery =\"\"\" SELECT COUNT(consecutive_number) AS num_accidents, \n          EXTRACT(DAYOFWEEK FROM timestamp_of_crash) AS day_of_week\n          FROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\n          GROUP BY day_of_week\n          ORDER BY num_accidents DESC\"\"\"","b69d26fb":"# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**9)\nquery_job = client.query(query, job_config=safe_config)\n\n# API request - run the query, and convert the results to a pandas DataFrame\naccidents_by_day = query_job.to_dataframe()\n\n# Print the DataFrame\naccidents_by_day","981e5ef6":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"crypto_bitcoin\" dataset\ndataset_ref = client.dataset(\"crypto_bitcoin\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# Construct a reference to the \"transactions\" table\ntable_ref = dataset_ref.table(\"transactions\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"transactions\" table\nclient.list_rows(table, max_results=5).to_dataframe()","0c384d15":"# Query to select the number of transactions per date, sorted by date\nquery_with_CTE = \"\"\" \n                 WITH time AS \n                 (\n                     SELECT DATE(block_timestamp) AS trans_date\n                     FROM `bigquery-public-data.crypto_bitcoin.transactions`\n                 )\n                 SELECT COUNT(1) AS transactions,\n                        trans_date\n                 FROM time\n                 GROUP BY trans_date\n                 ORDER BY trans_date\n                 \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 10 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(query_with_CTE, job_config=safe_config)\n\n# API request - run the query, and convert the results to a pandas DataFrame\ntransactions_by_date = query_job.to_dataframe()\n\n# Print the first five rows\ntransactions_by_date.head()","1adfa92c":"<p style=\"font-size:150%; font-family:cursive;\">It returns a table with three rows (one for each distinct animal). We can see that the pets table contains 1 rabbit, 1 dog, and 2 cats.\n<\/p>","edcc5959":"<center><img src=\"https:\/\/i.imgur.com\/b99zTLv.png\"><\/center>","0f4dc191":"<center><h1 style=\"font-size:280%; font-family:cursive; background:yellow; color:black; border-radius:10px 10px; padding:10px;\">Group By, Having & Count<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">Now that you can select raw data, you're ready to learn how to group your data and count things within those groups. This can help you answer questions like:\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 1) How many of each kind of fruit has our store sold?\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 2) How many species of animal has the vet office treated?\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">To do this, you'll learn about three new techniques: GROUP BY, HAVING and COUNT(). Once again, we'll use this made-up table of information on pets.\n<\/p>","6ceab610":"\n\n<p style=\"font-size:150%; font-family:cursive;\">The `list_rows()` method will also let us look at just the information in a specific column. If we want to see the first five entries in the `by` column, for example, we can do that!<p>","29fb8e7b":"<center><h1 style=\"font-size:280%; font-family:cursive; background:yellow; color:black; border-radius:10px 10px; padding:10px;\">Joining Data<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">You have the tools to obtain data from a single table in whatever format you want it. But what if the data you want is spread across multiple tables?\nThat's where JOIN comes in! JOIN is incredibly important in practical SQL workflows. So let's get started.\n<\/p>","e0dea809":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">GROUP BY... HAVING<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">HAVING is used in combination with GROUP BY to ignore groups that don't meet certain criteria.\nSo this query, for example, will only include groups that have more than one ID in them.\n<\/p>\n<center><img src=\"https:\/\/i.imgur.com\/2ImXfHQ.png\"><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">Since only one group meets the specified criterion, the query will return a table with only one row.\n<\/p>","2c8db8f7":"<p style=\"font-size:150%; font-family:cursive;\">Note that when writing an SQL query, the argument we pass to FROM is not in single or double quotation marks (' or \"). It is in backticks (`).\n<\/p>","6797ba32":"<center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">JOIN<\/h1><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">Using JOIN, we can write a query to create a table with just two columns: the name of the pet and the name of the owner.\n<\/p>\n<center><img src=\"https:\/\/i.imgur.com\/fLlng42.png\"><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">We combine information from both tables by matching rows where the ID column in the pets table matches the Pet_ID column in the owners table.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">In the query, ON determines which column in each table to use to combine the tables. Notice that since the ID column exists in both tables, we have to clarify which one to use. We use p.ID to refer to the ID column from the pets table, and o.Pet_ID refers to the Pet_ID column from the owners table.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">In general, when you're joining tables, it's a good habit to specify which table each of your columns comes from. That way, you don't have to pull up the schema every time you go back to read the query.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">The type of JOIN we're using today is called an INNER JOIN. That means that a row will only be put in the final output table if the value in the columns you're using to combine them shows up in both the tables you're joining. For example, if Tom's ID number of 4 didn't exist in the pets table, we would only get 3 rows back from this query. There are other types of JOIN, but an INNER JOIN is very widely used, so it's a good one to start with.\n<\/p>","9143042a":"<center><img src=\"https:\/\/i.imgur.com\/Eu5HkXq.png\"><\/center>","b5a6ad25":"<center><img src=\"https:\/\/i.imgur.com\/6o9LuTA.png\"><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">The ORDER BY clause also works for columns containing text, where the results show up in alphabetical order.\n\n<\/p>\n\n<center><img src=\"https:\/\/i.imgur.com\/ooxuzw3.png\"><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">You can reverse the order using the DESC argument (short for 'descending'). The next query sorts the table by the Animal column, where the values that are last in alphabetic order are returned first.\n\n\n<\/p>\n\n<center><img src=\"https:\/\/i.imgur.com\/IElLJrR.png\"><\/center>","8bb36bbd":"<center><img src=\"https:\/\/i.imgur.com\/tqE9Eh8.png\"><\/center>","8deed185":"<p style=\"font-size:150%; font-family:cursive;\">Now we've got a pandas DataFrame called us_cities, which we can use like any other DataFrame.","459e7dd9":"\n<p style=\"font-size:150%; font-family:cursive;\">Similar to how we fetched a dataset, we can fetch a table.  In the code cell below, we fetch the `full` table in the `hacker_news` dataset.\n<\/p>","65a7f7f9":"<center><img src=\"https:\/\/i.imgur.com\/MXrsiAZ.png\"><\/center>\n\n<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">AS<\/h1><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">You learned in an earlier tutorial how to use AS to rename the columns generated by your queries, which is also known as aliasing. This is similar to how Python uses as for aliasing when doing imports like import pandas as pd or import seaborn as sns.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">To use AS in SQL, insert it right after the column you select. Here's an example of a query without an AS clause:\n<\/p>\n<center><img src=\"https:\/\/i.imgur.com\/VelX9tP.png\"><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">And here's an example of the same query, but with AS.\n<\/p>\n\n<center><img src=\"https:\/\/i.imgur.com\/teF84tU.png\"><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">These queries return the same information, but in the second query the column returned by the COUNT() function will be called Number, rather than the default name of f0__.\n<\/p>","07169ca9":"<p style=\"font-size:150%; font-family:cursive;\">We'll work with a dataset of posts on Hacker News, a website focusing on computer science and cybersecurity news.\nIn BigQuery, each dataset is contained in a corresponding project. In this case, our hacker_news dataset is contained in the bigquery-public-data project. To access the dataset,\n<\/p>\n<p style=\"font-size:130%; font-family:cursive;\"> a) We begin by constructing a reference to the dataset with the dataset() method.\n<\/p>\n<p style=\"font-size:130%; font-family:cursive;\"> b) Next, we use the get_dataset() method, along with the reference we just constructed, to fetch the dataset.\n<\/p>","04ea1687":"<center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">Which day of the week has the most fatal motor accidents?<\/h1><\/center>\n\u200b\n<p style=\"font-size:150%; font-family:cursive;\">Let's use the US Traffic Fatality Records database, which contains information on traffic accidents in the US where at least one person died.\nWe'll investigate the accident_2015 table. Here is a view of the first few rows. \n<\/p>","c46b423a":"<p style=\"font-size:180%; font-family:cursive;\"> Let's use the table to determine how the number of accidents varies with the day of the week. Since:\n<p style=\"font-size:120%; font-family:cursive;\"> 1) the consecutive_number column contains a unique ID for each accident, and\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 2)the timestamp_of_crash column contains the date of the accident in DATETIME format,\n <p style=\"font-size:180%; font-family:cursive;\">we can:\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 1) EXTRACT the day of the week (as day_of_week in the query below) from the timestamp_of_crash column, and\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 2) GROUP BY the day of the week, before we COUNT the consecutive_number column to determine the number of accidents for each day of the week.\n <p style=\"font-size:180%; font-family:cursive;\">Then we sort the table with an ORDER BY clause, so the days with the most accidents are returned first.\n<\/p>","c11bb213":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">WITH ... AS<\/h1><\/center>\n<p style=\"font-size:150%; font-family:cursive;\"> On its own, AS is a convenient way to clean up the data returned by your query. It's even more powerful when combined with WITH in what's called a \"common table expression\".\nA common table expression (or CTE) is a temporary table that you return within your query. CTEs are helpful for splitting your queries into readable chunks, and you can write queries against them.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">For instance, you might want to use the pets table to ask questions about older animals in particular. So you can start by creating a CTE which only contains information about animals more than five years old like this:\n<\/p>\n<center><img src=\"https:\/\/i.imgur.com\/0Kz8q4x.png\"><\/center>\n\u200b\n<p style=\"font-size:150%; font-family:cursive;\">While this incomplete query above won't return anything, it creates a CTE that we can then refer to (as Seniors) while writing the rest of the query.\nWe can finish the query by pulling the information that we want from the CTE. The complete query below first creates the CTE, and then returns all of the IDs from it.\n<\/p>\n\u200b\n<center><img src=\"https:\/\/i.imgur.com\/3xQZM4p.png\"><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">You could do this without a CTE, but if this were the first part of a very long query, removing the CTE would make it much harder to follow.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">Also, it's important to note that CTEs only exist inside the query where you create them, and you can't reference them in later queries. So, any query that uses a CTE is always broken into two parts: (1) first, we create the CTE, and then (2) we write a query that uses the CTE.\n<\/p>","41be298f":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">Working with big datasets<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">BigQuery datasets can be huge. We allow you to do a lot of computation for free, but everyone has some limit.\nEach Kaggle user can scan 5TB every 30 days for free. Once you hit that limit, you'll have to wait for it to reset.\nThe biggest dataset currently on Kaggle is 3TB, so you can go through your 30-day limit in a couple queries if you aren't careful.\nDon't worry though: we'll teach you how to avoid scanning too much data at once, so that you don't run over your limit.\nTo begin,you can estimate the size of any query before running it. Here is an example using the (very large!) Hacker News dataset. To see how much data a query will scan, we create a QueryJobConfig object and set the dry_run parameter to True.\n<\/p>","0e0af59d":"<center><h1 style=\"font-size:280%; font-family:cursive; background:yellow; color:black; border-radius:10px 10px; padding:10px;\">As & With<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">With all that you've learned, your SQL queries are getting pretty long, which can make them hard understand (and debug).\nYou are about to learn how to use AS and WITH to tidy up your queries and make them easier to read.\nAlong the way, we'll use the familiar pets table, but now it includes the ages of the animals.\n\n\n<\/p>","4b5600a5":"<p style=\"font-size:150%; font-family:cursive;\">The dataset contains only one table, called global_air_quality. We'll fetch the table and take a peek at the first few rows to see what sort of data it contains. (Again, we have hidden the code. To take a peek, click on the \"Code\" button below.)","ae004b1b":"*The first step in the workflow is to create a [`Client`](https:\/\/google-cloud.readthedocs.io\/en\/latest\/bigquery\/generated\/google.cloud.bigquery.client.Client.html#google.cloud.bigquery.client.Client) object.  As you'll soon see, this `Client` object will play a central role in retrieving information from BigQuery datasets.*","bbff6725":"\n\n<p style=\"font-size:150%; font-family:cursive;\">Each SchemaField tells us about a specific column (which we also refer to as a field). In order, the information is:\n<\/p>\n<p style=\"font-size:130%; font-family:cursive;\">a) The name of the column <\/p>\n<p style=\"font-size:130%; font-family:cursive;\">b) The field type (or datatype) in the column <\/p>\n<p style=\"font-size:130%; font-family:cursive;\">c) The mode of the column ('NULLABLE' means that a column allows NULL values, and is the default) <\/p>\n<p style=\"font-size:130%; font-family:cursive;\">d) The mode of the column ('NULLABLE' means that a column allows NULL values, and is the default) <\/p>","bc7472d2":"\n<center><img src=\"https:\/\/i.imgur.com\/fI5Pvvp.png\"><\/center>","1403269e":"<p style=\"font-size:150%; font-family:cursive;\">COUNT() is an example of an aggregate function, which takes many values and returns one. (Other examples of aggregate functions include SUM(), AVG(), MIN(), and MAX().) As you'll notice in the picture above, aggregate functions introduce strange column names (like f0__). Later in this tutorial, you'll learn how to change the name to something more descriptive.\n<\/p>","f87cb637":"<p style=\"font-size:150%; font-family:cursive;\">Each row in the popular_comments DataFrame corresponds to a comment that received more than ten replies. For instance, the comment with ID 820079 received 148 replies.\n\n<\/p>","a2738f82":"<p style=\"font-size:150%; font-family:cursive;\">The dataset contains only one table, called global_air_quality. We'll fetch the table and take a peek at the first few rows to see what sort of data it contains. (Again, we have hidden the code. To take a peek, click on the \"Code\" button below.)","4dc0a652":"<center><img src=\"https:\/\/i.imgur.com\/fI5Pvvp.png\"><\/center>","3f62a98a":"<center><img src=\"https:\/\/i.imgur.com\/c3GxYRt.png\"><\/center>","d5c2ec44":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">COUNT()<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">COUNT(), as you may have guessed from the name, returns a count of things. If you pass it the name of a column, it will return the number of entries in that column.\nFor instance, if we SELECT the COUNT() of the ID column in the pets table, it will return 4, because there are 4 ID's in the table.\n<\/p>","4f87b8da":"<center><img src=\"https:\/\/i.imgur.com\/Rx6L4m1.png\"><\/center>\n\u200b\n<p style=\"font-size:150%; font-family:cursive;\">To get information that applies to a certain pet, we match the ID column in the pets table to the Pet_ID column in the owners table.\n<\/p>\n\u200b\n<center><img src=\"https:\/\/i.imgur.com\/eXvIORm.png\"><\/center>\n<p style=\"font-size:120%; font-family:cursive;\"> 1) the pets table shows that Dr. Harris Bonkers is the pet with ID 1.\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 2) The owners table shows that Aubrey Little is the owner of the pet with ID 1.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">Putting these two facts together, Dr. Harris Bonkers is owned by Aubrey Little.\nFortunately, we don't have to do this by hand to figure out which owner goes with which pet. In the next section, you'll learn how to use JOIN to create a new table combining information from the pets and owners tables.\n<\/p>","5dc5239f":"<p style=\"font-size:120%; font-family:cursive;\"> 1) YYYY: Four-digit year\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 2) [M]M: One or two digit month\n <p style=\"font-size:120%; font-family:cursive;\">3) [D]D: One or two digit day\n<\/p>\n<p style=\"font-size:180%; font-family:cursive;\"> So 2019-01-10 is interpreted as January 10, 2019","8fcda310":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Which Hacker News comments generated the most discussion?<\/h1><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">Ready to see an example on a real dataset? The Hacker News dataset contains information on stories and comments from the Hacker News social networking site.\nWe'll work with the comments table and begin by printing the first few rows. \n<\/p>","6eb89ee0":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Dates<\/h1><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">Next, we'll talk about dates, because they come up very frequently in real-world databases. There are two ways that dates can be stored in BigQuery: as a DATE or as a DATETIME.\nThe DATE format has the year first, then the month, and then the day. It looks like this:\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">YYYY-[M]M-[D]D\n<\/p>","9f8d78ff":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">GROUP BY<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">GROUP BY takes the name of one or more columns, and treats all rows with the same value in that column as a single group when you apply aggregate functions like COUNT().\nFor example, say we want to know how many of each type of animal we have in the pets table. We can use GROUP BY to group together rows that have the same value in the Animal column, while using COUNT() to find out how many ID's we have in each group.\n<\/p>","875049e8":"<p style=\"font-size:150%; font-family:cursive;\">In the next section, you'll explore the contents of this table in more detail. For now, take the time to use the image below to consolidate what you've learned so far.\n<\/p>\n\n![first_commands](https:\/\/i.imgur.com\/biYqbUB.png)","220e1d45":"\n\n<center><h1 style=\"font-size:280%; font-family:cursive; background:yellow; color:black; border-radius:10px 10px; padding:10px;\">Introduction<\/h1><\/center>\n\n\n<p style=\"font-size:150%; font-family:cursive;\">Structured Query Language, or SQL, is the programming language used with databases, and it is an important skill for any data scientist. In this course, you'll build your SQL skills using BigQuery, a web service that lets you apply SQL to huge datasets.\n    In this lesson, you'll learn the basics of accessing and examining BigQuery datasets. After you have a handle on these basics, we'll come back to build your SQL skills.\n<\/p>\n<h1 style=\"font-size:180%; font-family:cursive; color:red;\"><b>Your first BigQuery commands<\/b><\/h1>\n<p style=\"font-size:150%; font-family:cursive;\">To use BigQuery, we'll import the Python package below:\n<\/p>","ecaaf032":"<p style=\"font-size:150%; font-family:cursive;\">You can also specify a parameter when running the query to limit how much data you are willing to scan. Here's an example with a low limit.\n<\/p>","935b39c2":"<center><img src=\"https:\/\/i.imgur.com\/vhvHIh0.png\"><\/center>\n<p style=\"font-size:150%; font-family:cursive;\">The query below returns two columns, where column Day contains the day corresponding to each entry the Date column from the pets_with_date table:\n\n<\/p>\n\n<center><img src=\"https:\/\/i.imgur.com\/PhoWBO0.png\"><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">SQL is very smart about dates, and we can ask for information beyond just extracting part of the cell. For example, this query returns one column with just the week in the year (between 1 and 53) for each date in the Date column:\n<\/p>\n\n<center><img src=\"https:\/\/i.imgur.com\/A5hqGxY.png\"><\/center>","c715f6bd":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Aliasing and other improvements<\/h1><\/center>\n\n<p style=\"font-size:130%; font-family:cursive;\"> 1) The column resulting from COUNT(id) was called f0__. That's not a very descriptive name. You can change the name by adding AS NumPosts after you specify the aggregation. This is called aliasing, and it will be covered in more detail in an upcoming lesson.\n<\/p>\n<p style=\"font-size:130%; font-family:cursive;\">2) if you are ever unsure what to put inside the COUNT() function, you can do COUNT(1) to count the rows in each group. Most people find it especially readable, because we know it's not focusing on other columns. It also scans less data than if supplied column names (making it faster and using less of your data access quota).\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">Using these tricks, we can rewrite our query: \n<\/p>","155060ba":"<center><h1 style=\"font-size:280%; font-family:cursive; background:yellow; color:black; border-radius:10px 10px; padding:10px;\">Select, From & Where<\/h1><\/center>\n\n\n<p style=\"font-size:150%; font-family:cursive;\">Now that you know how to access and examine a dataset, you're ready to write your first SQL query! As you'll soon see, SQL queries will help you sort through a massive dataset, to retrieve only the information that you need.\nWe'll begin by using the keywords SELECT, FROM, and WHERE to get data from specific columns based on conditions you specify.\nFor clarity, we'll work with a small imaginary dataset pet_records which contains just one table, called pets.\n<\/p>","3128d53f":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">What are all the U.S. cities in the OpenAQ dataset?<\/h1><\/center>\n\u200b\n<p style=\"font-size:150%; font-family:cursive;\">Now that you've got the basics down, let's work through an example with a real dataset. We'll use an OpenAQ dataset about air quality.\nFirst, we'll set up everything we need to run queries and take a quick peek at what tables are in our database. (Since you learned how to do this in the previous tutorial, we have hidden the code. But if you'd like to take a peek, you need only click on the \"Code\" button below.)","e26f00af":"<center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">Example<\/h1><\/center>\n<p style=\"font-size:180%; font-family:cursive;\"> We'll use our imaginary pets table, which has three columns:\n<p style=\"font-size:120%; font-family:cursive;\"> 1) ID - ID number for the pet\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 2)Name - name of the pet\n<p style=\"font-size:120%; font-family:cursive;\"> 3)Animal - type of animal\n    \n <p style=\"font-size:180%; font-family:cursive;\">We'll also add another table, called owners. This table also has three columns:\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 1) ID - ID number for the owner (different from the ID number for the pet)\n<\/p>\n<p style=\"font-size:120%; font-family:cursive;\"> 2) Name - name of the owner\n    \n <p style=\"font-size:120%; font-family:cursive;\"> 3) Pet_ID - ID number for the pet that belongs to the owner (which matches the ID number for the pet in the pets table)\n<\/p>","8a8423ff":"<p style=\"font-size:150%; font-family:cursive;\">Let's use the table to see which comments generated the most replies. Since:\n<\/p>\n<p style=\"font-size:130%; font-family:cursive;\"> 1) the parent column indicates the comment that was replied to, and\n<\/p>\n<p style=\"font-size:130%; font-family:cursive;\">2) the id column has the unique ID used to identify each comment,\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">we can GROUP BY the parent column and COUNT() the id column in order to figure out the number of comments that were made as responses to a specific comment. (This might not make sense immediately -- take your time here to ensure that everything is clear!)\nFurthermore, since we're only interested in popular comments, we'll look at comments with more than ten replies. So, we'll only return groups HAVING more than ten ID's.\n<\/p>","8a96f3da":"\n<p style=\"font-size:150%; font-family:cursive;\">Every dataset is just a collection of tables.  You can think of a dataset as a spreadsheet file containing multiple tables, all composed of rows and columns.\nWe use the `list_tables()` method to list the tables in the dataset.\n<\/p>","d4d070c9":"<p style=\"font-size:150%; font-family:cursive;\">We begin by setting up the query with the query() method. We run the method with the default parameters, but this method also allows us to specify more complicated settings that you can read about in the documentation. We'll revisit this later.","867ef70b":"<center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">WHERE ..<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">BigQuery datasets are large, so you'll usually want to return only the rows meeting specific conditions. You can do this using the WHERE clause.\nThe query below returns the entries from the Name column that are in rows where the Animal column has the text 'Cat'.\n<\/p>","f97b7255":"<center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">SELECT ... FROM<\/h1><\/center>\n\n\n<p style=\"font-size:150%; font-family:cursive;\">The most basic SQL query selects a single column from a single table. To do this,\n<\/p>\n<p style=\"font-size:130%; font-family:cursive;\">1) specify the column you want after the word SELECT, and then\n<\/p>\n<p style=\"font-size:130%; font-family:cursive;\">2) specify the table after the word FROM.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">For instance, to select the Name column (from the pets table in the pet_records database in the bigquery-public-data project), our query would appear as follows:\n<\/p>","327d152d":"<p style=\"font-size:150%; font-family:cursive;\">We can use the list_rows() method to check just the first five lines of of the full table to make sure this is right. (Sometimes databases have outdated descriptions, so it's good to check.) This returns a BigQuery RowIterator object that can quickly be converted to a pandas DataFrame with the to_dataframe() method.<p>","cf0e0ccd":"<center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">How many Bitcoin transactions are made per month?<\/h1><\/center>\n\u200b\n<p style=\"font-size:150%; font-family:cursive;\">We're going to use a CTE to find out how many Bitcoin transactions were made each day for the entire timespan of a bitcoin transaction dataset.\nWe'll investigate the transactions table. Here is a view of the first few rows.\n<\/p>","e081e8ca":"<p style=\"font-size:150%; font-family:cursive;\">ORDER BY is usually the last clause in your query, and it sorts the results returned by the rest of your query.\nNotice that the rows are not ordered by the ID column. We can quickly remedy this with the query below.\n\n<\/p>","e8c7b209":"\n<center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">Table schema<\/h1><\/center>\n\n\n<p style=\"font-size:150%; font-family:cursive;\">The structure of a table is called its schema.  We need to understand a table's schema to effectively pull out the data we want.\n<\/p>\n<p style=\"font-size:150%; font-family:cursive;\">In this example, we'll investigate the `full` table that we fetched above.\n<\/p>","14e490a2":"<p style=\"font-size:150%; font-family:cursive;\">Since the block_timestamp column contains the date of each transaction in DATETIME format, we'll convert these into DATE format using the DATE() command.\nWe do that using a CTE, and then the next part of the query counts the number of transactions for each date and sorts the table so that earlier dates appear first.\n<\/p>","d81b988a":"<center><h1 style=\"font-size:200%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">Submitting the query to the dataset<\/h1><\/center>\n\u200b\n<p style=\"font-size:150%; font-family:cursive;\">We're ready to use this query to get information from the OpenAQ dataset. As in the previous tutorial, the first step is to create a Client object.","227d5bbc":"<center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\">EXTRACT<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">Often you'll want to look at part of a date, like the year or the day. You can do this with EXTRACT. We'll illustrate this with a slightly different table, called pets_with_date.\n<\/p>","8b62aff3":"<p style=\"font-size:150%; font-family:cursive;\">Next, we run the query and convert the results to a pandas DataFrame.","49c443a4":"<center><h1 style=\"font-size:280%; font-family:cursive; background:yellow; color:black; border-radius:10px 10px; padding:10px;\">Order By<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">So far, you've learned how to use several SQL clauses. For instance, you know how to use SELECT to pull specific columns from a table, along with WHERE to pull rows that meet specified criteria. You also know how to use aggregate functions like COUNT(), along with GROUP BY to treat multiple rows as a single group.\nNow you'll learn how to change the order of your results using the ORDER BY clause, and you'll explore a popular use case by applying ordering to dates. To illustrate what you'll learn in this tutorial, we'll work with a slightly modified version of our familiar pets table.\n\n\n<\/p>","88c51c08":"<center><img src=\"https:\/\/i.imgur.com\/c3GxYRt.png\"><\/center>"}}