{"cell_type":{"eaaa8ac4":"code","42bc3472":"code","9facb4ca":"code","7b58066c":"code","b57f9609":"code","f1a7baf8":"code","8fe8e254":"code","d3bc8024":"code","cc325988":"code","a485b4de":"code","af46af93":"code","a124daef":"markdown"},"source":{"eaaa8ac4":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport time\nimport random\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array","42bc3472":"paths=[]\nfor dirname, _, filenames in os.walk('..\/input\/car-number-plate-detection\/Car_Number_Plate'):\n    for filename in filenames:\n        paths+=[os.path.join(dirname, filename)]","9facb4ca":"n=len(paths)\nnum=random.sample(range(n),k=4)","7b58066c":"labels = open('..\/input\/yolo-weights-for-licence-plate-detector\/classes.names').read()\nprint(labels)","b57f9609":"weights_path = '..\/input\/yolo-weights-for-licence-plate-detector\/lapi.weights'\nconfiguration_path = '..\/input\/yolo-weights-for-licence-plate-detector\/darknet-yolov3.cfg'\n\nprobability_minimum = 0.5\nthreshold = 0.3","f1a7baf8":"network = cv2.dnn.readNetFromDarknet(configuration_path, weights_path)\nlayers_names_all = network.getLayerNames()\nlayers_names_output = [layers_names_all[i[0]-1] for i in network.getUnconnectedOutLayers()]","8fe8e254":"image_input = cv2.imread(paths[num[0]])\n\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (10.0,10.0)\nplt.imshow(cv2.cvtColor(image_input, cv2.COLOR_BGR2RGB))\nplt.show()","d3bc8024":"blob = cv2.dnn.blobFromImage(image_input, 1\/255.0, (416,416), swapRB=True, crop=False)\nblob_to_show = blob[0,:,:,:].transpose(1,2,0)\nnetwork.setInput(blob)\noutput_from_network = network.forward(layers_names_output)\nnp.random.seed(42)\ncolours = np.random.randint(0, 255, size=(len(labels), 3), dtype='uint8')","cc325988":"bounding_boxes = []\nconfidences = []\nclass_numbers = []\nh,w = image_input.shape[:2]\n\nfor result in output_from_network:\n    for detection in result:\n        scores = detection[5:]\n        class_current = np.argmax(scores)\n        confidence_current = scores[class_current]\n        if confidence_current > probability_minimum:\n            box_current = detection[0:4] * np.array([w, h, w, h])\n            x_center, y_center, box_width, box_height = box_current.astype('int')\n            x_min = int(x_center-(box_width\/2))\n            y_min = int(y_center-(box_height\/2))\n            bounding_boxes.append([x_min, y_min, int(box_width), int(box_height)])\n            confidences.append(float(confidence_current))\n            class_numbers.append(class_current)   ","a485b4de":"results = cv2.dnn.NMSBoxes(bounding_boxes, confidences, probability_minimum, threshold)\n\nif len(results) > 0:\n    for i in results.flatten():\n        x_min, y_min = bounding_boxes[i][0], bounding_boxes[i][1]\n        box_width, box_height = bounding_boxes[i][2], bounding_boxes[i][3]\n        colour_box_current = [int(j) for j in colours[class_numbers[i]]]\n        cv2.rectangle(image_input, (x_min, y_min), (x_min + box_width, y_min + box_height),\n                      colour_box_current, 5)\n        text_box_current = '{}: {:.4f}'.format(labels[int(class_numbers[i])], confidences[i])\n        cv2.putText(image_input, text_box_current, (x_min, y_min - 7), cv2.FONT_HERSHEY_SIMPLEX,\n                    1.5, colour_box_current, 5)","af46af93":"%matplotlib inline\nplt.rcParams['figure.figsize'] = (10.0,10.0)\nplt.imshow(cv2.cvtColor(image_input, cv2.COLOR_BGR2RGB))\nplt.show()","a124daef":"# Put Rectngle around the Number Plate"}}