{"cell_type":{"f56ea601":"code","7f693a1e":"code","1594584c":"code","8b327b19":"code","315e2616":"code","9d55ad6d":"code","9e578c38":"code","80c3aa79":"code","a4673a89":"code","7e569c97":"code","605924cf":"code","e8307bb1":"code","7da74d3e":"code","1bc4edee":"code","0afebe7f":"code","3618696b":"code","a9eeaffa":"code","70639fa4":"code","b9436593":"code","1ce773c5":"code","fe70a325":"code","e0f9d33c":"code","c56d5fee":"code","6b2e7c7e":"code","9eb55471":"code","01377631":"code","67480778":"code","80a53fee":"code","b1d7e513":"code","0f6ccf35":"code","8526870b":"code","07479c6c":"code","763c07b0":"code","0137c055":"code","a23b874c":"code","ea147e87":"markdown","757864a4":"markdown"},"source":{"f56ea601":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f693a1e":"# Using Decision Tree","1594584c":"#basic\nimport pandas as pd\nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\n\n#imblearn\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import RandomOverSampler\n\n#sklearn\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler,LabelEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\nfrom sklearn.model_selection import cross_val_predict\n\n#classifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#model_selection\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n#warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8b327b19":"#input data\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\",index_col = \"PassengerId\")\ntrain.head(3)","315e2616":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\",index_col = \"PassengerId\")\ntest.head(3)","9d55ad6d":"# Change Nan\nmsno.matrix(train)","9e578c38":"msno.matrix(test)","80c3aa79":"# Cabin\n# change -> nan -> 'X'\ntrain.Cabin = train.Cabin.fillna('X')\ntest.Cabin = test.Cabin.fillna('X')\n\n#Age\n# change Nan -> 0\ntrain.Age = train['Age'].fillna(0)\ntest.Age = test['Age'].fillna(0)\n","a4673a89":"#Change Cabin data.\n# if one person had more than two seats -> remove the rest except the first seat.\n# remove number ex) C201 -> C\n\ntrain['Cabin'].unique()","7e569c97":"cabin_list = []\nfor i in train.Cabin:\n        cabin_list.append(i[0])\ntrain.Cabin = cabin_list","605924cf":"cabin_list2 = []\nfor i in test.Cabin:\n        cabin_list2.append(i[0])\ntest.Cabin = cabin_list2","e8307bb1":"# Remove Name,Ticket\ntrain.drop(['Name','Ticket'],axis=1,inplace = True)\ntest.drop(['Name','Ticket'],axis=1,inplace = True)","7da74d3e":"display(train.head(3))\ndisplay(test.head(3))","1bc4edee":"train.isnull().sum()","0afebe7f":"sns.histplot(train['Embarked'])","3618696b":"# chane null about most frequent value\ntrain.Embarked = train.Embarked.fillna('S')","a9eeaffa":"test.isnull().sum()","70639fa4":"# change null of fare about mean\nfare_mean = test.Fare.mean()\ntest.Fare = test.Fare.fillna(fare_mean)","b9436593":"display(train.head(3))\ndisplay(test.head(3))","1ce773c5":"#modeling\ntarget = train.Survived\nfeatures= train.drop(['Survived'],axis=1)","fe70a325":"#Make pipleline\nohencoder = OneHotEncoder()\nsdscaler = StandardScaler()\n\nnumeric_features=['Fare']\ncategorical_features = ['Age','Pclass','Sex','SibSp','Parch','Cabin','Embarked']\n\npreprocessor = ColumnTransformer(\n    transformers = [\n        ('numeric',StandardScaler(),numeric_features),\n        ('categoric',OneHotEncoder(handle_unknown='ignore'),categorical_features)\n    ]\n)\n","e0f9d33c":"#Balancing?\nplt.hist(target)","c56d5fee":"pipeline = Pipeline([('preprocessing',preprocessor),('balancing',RandomOverSampler()),('estimator',None)])","6b2e7c7e":"# stratified_10fold\nstratified_10_fold_cv = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)","9eb55471":"#hyperparameter tuning\npipeline.steps[2]= ('estimator',DecisionTreeClassifier())\nparams = {\n    'estimator__criterion':['gini','entropy'],\n    'estimator__max_depth':[2,3,4,5,6,None],\n    'estimator__min_samples_split':[2,3,4,5,6,7,8]\n}\ngrid_search_estimator = GridSearchCV(pipeline, param_grid=params, cv=stratified_10_fold_cv, scoring ='accuracy', refit=True, n_jobs=3)\ngrid_search_estimator.fit(features,target)","01377631":"prediction = cross_val_predict(grid_search_estimator.best_estimator_, features, target, cv=stratified_10_fold_cv)","67480778":"print(grid_search_estimator.best_estimator_)","80a53fee":"accuracy_score(target,prediction)","b1d7e513":"confusion_matrix(target,prediction)","0f6ccf35":"prediction_test = grid_search_estimator.best_estimator_.predict(test)","8526870b":"prediction_test","07479c6c":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsubmission","763c07b0":"submission.Survived = prediction_test","0137c055":"submission","a23b874c":"submission.to_csv('titanic_ver1.csv',index= False)","ea147e87":"## predict test","757864a4":"### 1. import"}}