{"cell_type":{"ed064167":"code","062ddf1e":"code","aa92c527":"code","51c91869":"code","6c751a4a":"code","2341b329":"code","b01522b0":"code","7889ef7f":"code","3a698001":"code","b9aec218":"code","56ece179":"code","7d32d72c":"code","88e5f8c1":"code","3de9145b":"code","d0415ae1":"code","66b5b08b":"code","32a1cee9":"code","32d149f7":"code","e96f880d":"code","f8a6d25c":"code","4a516b0a":"code","852e9ae3":"code","9bfc91e2":"code","c9f52015":"code","c84280cb":"code","9f3017ef":"code","169d72b8":"code","2bb84cfa":"code","176280f8":"markdown","1af38a13":"markdown","eac1b80b":"markdown","8832218a":"markdown","34692af2":"markdown","882c448c":"markdown","7944e231":"markdown","44ab9fbd":"markdown"},"source":{"ed064167":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","062ddf1e":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\n# SeaBorn : librairie de graphiques avanc\u00e9s\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n","aa92c527":"# Lecture des donn\u00e9es d'apprentissage et de test\nt = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","51c91869":"t.head().T","6c751a4a":"t.columns","2341b329":"t.shape","b01522b0":"t.Outcome.value_counts()","7889ef7f":"t.describe()","3a698001":"sns.pairplot(t, hue = \"Outcome\")","b9aec218":"data_train = t.sample(frac=0.8, random_state=1)          # 80% des donn\u00e9es avec frac=0.8\ndata_test = t.drop(data_train.index)     # le reste des donn\u00e9es pour le test","56ece179":"X_train = data_train.drop(['Outcome'], axis=1)\ny_train = data_train['Outcome']\nX_test = data_test.drop(['Outcome'], axis=1)\ny_test = data_test['Outcome']","7d32d72c":"fig = sns.FacetGrid(t, hue=\"Outcome\", aspect=3) # aspect=3 permet d'allonger le graphique\nfig.map(sns.kdeplot, \"Age\", shade=True)\nfig.add_legend()","88e5f8c1":"from sklearn import tree\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n","3de9145b":"dtc = tree.DecisionTreeClassifier()\ndtc.fit(X_train,y_train)\ny_dtc = dtc.predict(X_test)\nad_score = accuracy_score(y_test, y_dtc)\nprint(ad_score)","d0415ae1":"plt.figure(figsize=(30,30))\ntree.plot_tree(dtc, feature_names=X_train.columns, class_names=['Good','Bad'], fontsize=14, filled=True) \n","66b5b08b":"dtc1 = tree.DecisionTreeClassifier(max_depth = 3, min_samples_leaf = 20)\ndtc1.fit(X_train,y_train)","32a1cee9":"plt.figure(figsize=(30,30))\ntree.plot_tree(dtc1, feature_names=X_train.columns, class_names=['Good','Bad'], fontsize=14, filled=True) ","32d149f7":"y_dtc1 = dtc1.predict(X_test)\nprint(accuracy_score(y_test, y_dtc1))","e96f880d":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","f8a6d25c":"rf_score = accuracy_score(y_test, y_rf)\nprint(rf_score)","4a516b0a":"pd.crosstab(y_test, y_rf, rownames=['Reel'], colnames=['Prediction'], margins=True)","852e9ae3":"def replace_0(df,col) :\n    df1 = df.copy()\n    n = df.shape[0]\n    m = df[col].mean()\n    s = df[col].std()\n    for i in range(len(df.index)):\n        if df.loc[i,col] == 0 :\n            df1.loc[i,col] = np.random.normal(m, s);\n    return df1","9bfc91e2":"listt = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\nfor col in listt :\n    t = replace_0(t, col)","c9f52015":"t.head()","c84280cb":"data_train = t.sample(frac = 0.8, random_state = 1) # 80% des donn\u00e9es avec frac=0.8\ndata_test = t.drop(data_train.index)                # le reste des donn\u00e9es pour le test","9f3017ef":"X_train = data_train.drop(['Outcome'], axis=1)\ny_train = data_train['Outcome']\nX_test = data_test.drop(['Outcome'], axis=1)\ny_test = data_test['Outcome']","169d72b8":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\nnew_rf_score = accuracy_score(y_test, y_rf)\nprint(new_rf_score)\nprint(rf_score)","2bb84cfa":"dtc = tree.DecisionTreeClassifier()\ndtc.fit(X_train,y_train)\ny_dtc = dtc.predict(X_test)\nnew_ad_score = accuracy_score(y_test, y_dtc)\nprint(new_ad_score)\nprint(ad_score)","176280f8":"### Random forests","1af38a13":"# fonction replace_0","eac1b80b":"# **Machine learning**","8832218a":"### Random forests","34692af2":"# **VISUALIZATION**","882c448c":"### Arbres de d\u00e9cision","7944e231":"# **Donn\u00e9es**","44ab9fbd":"### Arbres de d\u00e9cision"}}