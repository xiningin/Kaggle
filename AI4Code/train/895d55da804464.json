{"cell_type":{"299af773":"code","74eb3d79":"code","af8e1238":"code","d1f45a27":"code","11a31e87":"code","bd93e456":"code","d53883c7":"code","98779901":"code","b579bf5f":"code","9b8a918e":"code","e832f539":"code","cc69d975":"code","f7153603":"code","83b17a8e":"code","039fe5bd":"markdown","927ad806":"markdown","6b5b23f0":"markdown","ad857a2d":"markdown"},"source":{"299af773":"import numpy as np\nimport pandas as pd","74eb3d79":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","af8e1238":"train_data[:10]","d1f45a27":"train_data.describe(include='all')","11a31e87":"women = train_data[train_data['Sex'] == 'female']['Survived']\nrate_women = sum(women)\/len(women)\nprint('% of women who survived:', rate_women)","bd93e456":"men = train_data[train_data.Sex == 'male']['Survived']\nrate_men = sum(men)\/len(men)\nprint('% of men who survived:', rate_men)","d53883c7":"# alternative way of computing the above\ntrain_data[['Sex', 'Survived']].groupby(['Sex']).mean()","98779901":"train_data[['Pclass', 'Survived']].groupby(['Pclass']).mean()","b579bf5f":"# generate correlation data (larger values signify a clear positive\/negative correlation between row\/column labels)\ntrain_data.corr()","9b8a918e":"women_count = 0\nwomen_survived_count = 0\nfor idx, row in train_data.iterrows():\n    if row['Sex'] == 'female':\n        women_count += 1\n        if row['Survived'] == 1:\n            women_survived_count += 1\nwomen_survived_count \/ women_count","e832f539":"predictions = []\ncount = 0\n\nfor idx, row in test_data.iterrows():\n    # make your changes in this cell!\n    if row['Sex'] == 'female':\n        if row['Pclass'] == 1 or row['Pclass'] == 2:\n            predictions.append(1)\n        elif row['Pclass'] == 3 and row['Age'] <= 1:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    elif row['Sex'] == 'male':\n        if row['Age'] <= 18 and row['Pclass'] == 1:\n            predictions.append(1)\n        elif row['Age'] <= 16 and row['Pclass'] == 2:\n            predictions.append(1)\n        else:\n            predictions.append(0)","cc69d975":"assert len(predictions) == len(test_data), 'Number of predictions must match number of test data rows!'","f7153603":"test_data['Survived'] = predictions","83b17a8e":"test_data[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)","039fe5bd":"# Working with rows manually","927ad806":"# Loading and examining data","6b5b23f0":"# Basic analysis","ad857a2d":"# Making predictions"}}