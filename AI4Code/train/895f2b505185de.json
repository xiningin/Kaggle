{"cell_type":{"b5423a57":"code","c3423df6":"code","4e9e8c44":"code","3a212a13":"code","72201dec":"code","cc8485ee":"code","ea6c1713":"code","ef4bee1f":"code","7b23e6c4":"code","12dc865b":"code","9a91016f":"code","6f498a02":"code","6aa3f15a":"code","ae909c07":"code","2b2c3ad7":"code","a5fc61d0":"code","d3242beb":"code","28d301be":"code","802b2dcc":"code","cba276c6":"code","f70394d7":"code","f61fc730":"code","fe4e4867":"code","c6aac209":"code","80d349b0":"code","7fa48afa":"code","22edfd5a":"code","51f7b0dd":"code","a96c3803":"code","0936e999":"code","f42bc958":"code","abef88d4":"code","20e0b4e8":"code","a0b57b98":"code","121153f7":"code","b57a7526":"code","fed7362e":"code","3f68080f":"code","4846de7c":"code","b76ed056":"code","fdf8195f":"code","31d04293":"code","e9793963":"code","f3cfe3d9":"code","335f6244":"code","3151b4e2":"code","a4360354":"code","d29c5d7a":"code","1e58ea8b":"code","d4bb8863":"code","6ea70a96":"code","f78de811":"code","4b93a3f4":"code","f8dada80":"code","ee205af5":"code","ae3692d3":"code","ddfbdcdf":"code","446bad00":"code","817f0fb2":"code","d67fcfe7":"code","2c0565e2":"code","67171236":"code","74743f5c":"code","7dba9a89":"code","c98354b8":"markdown","64b35b52":"markdown","19cf4571":"markdown","1e90fa03":"markdown","70270665":"markdown","6dd45e0e":"markdown","072586f4":"markdown","c8c8f6c1":"markdown","da7f5126":"markdown","a2beee86":"markdown"},"source":{"b5423a57":"!pip install beautifulsoup4 ","c3423df6":"import os\nimport matplotlib.pyplot as plt\nimport re\nimport string\nimport json\nimport emoji\nimport numpy as np\nimport pandas as pd\nfrom sklearn import metrics\nfrom bs4 import BeautifulSoup\nimport transformers\nimport torch\nfrom torch.utils.data import Dataset, DataLoader, RandomSampler, SequentialSampler\nfrom transformers import BertTokenizer, AutoTokenizer, BertModel, BertConfig, AutoModel, AdamW\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option(\"display.max_columns\", None)","4e9e8c44":"df_train = pd.read_csv(\"..\/input\/goemotions\/data\/train.tsv\", sep='\\t', header=None, names=['Text', 'Class', 'ID'])\ndf_dev = pd.read_csv(\"..\/input\/goemotions\/data\/dev.tsv\", sep='\\t', header=None, names=['Text', 'Class', 'ID'])","3a212a13":"df_train","72201dec":"df_train['List of classes'] = df_train['Class'].apply(lambda x: x.split(','))\ndf_train['Len of classes'] = df_train['List of classes'].apply(lambda x: len(x))\ndf_dev['List of classes'] = df_dev['Class'].apply(lambda x: x.split(','))\ndf_dev['Len of classes'] = df_dev['List of classes'].apply(lambda x: len(x))","cc8485ee":"df_train","ea6c1713":"import seaborn as sns\nsns.countplot(y=df_train['Class'],data=df_train)\nplt.show()","ef4bee1f":"df_train.isnull().sum()","7b23e6c4":"df_train[\"Class\"].value_counts()","12dc865b":"with open('..\/input\/goemotions\/data\/ekman_mapping.json') as file:\n    ekman_mapping = json.load(file)","9a91016f":"emotion_file = open(\"..\/input\/goemotions\/data\/emotions.txt\", \"r\")\nemotion_list = emotion_file.read()\nemotion_list = emotion_list.split(\"\\n\")\nprint(emotion_list)","6f498a02":"def idx2class(idx_list):\n    arr = []\n    for i in idx_list:\n        arr.append(emotion_list[int(i)])\n    return arr","6aa3f15a":"df_train['Emotions'] = df_train['List of classes'].apply(idx2class)\ndf_dev['Emotions'] = df_dev['List of classes'].apply(idx2class)","ae909c07":"ekman_mapping","2b2c3ad7":"def EmotionMapping(emotion_list):\n    map_list = []\n    \n    for i in emotion_list:\n        if i in ekman_mapping['anger']:\n            map_list.append('anger')\n        if i in ekman_mapping['disgust']:\n            map_list.append('disgust')\n        if i in ekman_mapping['fear']:\n            map_list.append('fear')\n        if i in ekman_mapping['joy']:\n            map_list.append('joy')\n        if i in ekman_mapping['sadness']:\n            map_list.append('sadness')\n        if i in ekman_mapping['surprise']:\n            map_list.append('surprise')\n        if i == 'neutral':\n            map_list.append('neutral')\n            \n    return map_list","a5fc61d0":"df_train['Mapped Emotions'] = df_train['Emotions'].apply(EmotionMapping)\ndf_dev['Mapped Emotions'] = df_dev['Emotions'].apply(EmotionMapping)","d3242beb":"df_train['anger'] = np.zeros((len(df_train),1))\ndf_train['disgust'] = np.zeros((len(df_train),1))\ndf_train['fear'] = np.zeros((len(df_train),1))\ndf_train['joy'] = np.zeros((len(df_train),1))\ndf_train['sadness'] = np.zeros((len(df_train),1))\ndf_train['surprise'] = np.zeros((len(df_train),1))\ndf_train['neutral'] = np.zeros((len(df_train),1))\n\ndf_dev['anger'] = np.zeros((len(df_dev),1))\ndf_dev['disgust'] = np.zeros((len(df_dev),1))\ndf_dev['fear'] = np.zeros((len(df_dev),1))\ndf_dev['joy'] = np.zeros((len(df_dev),1))\ndf_dev['sadness'] = np.zeros((len(df_dev),1))\ndf_dev['surprise'] = np.zeros((len(df_dev),1))\ndf_dev['neutral'] = np.zeros((len(df_dev),1))","28d301be":"for i in ['anger', 'disgust', 'fear', 'joy', 'sadness', 'surprise','neutral']:\n    df_train[i] = df_train['Mapped Emotions'].apply(lambda x: 1 if i in x else 0)\n    df_dev[i] = df_dev['Mapped Emotions'].apply(lambda x: 1 if i in x else 0)","802b2dcc":"df_train.head()","cba276c6":"df_dev.head()","f70394d7":"df_train.drop(df_train[df_train['neutral'] == 1].index, inplace=True)\ndf_dev.drop(df_dev[df_dev['neutral'] == 1].index, inplace=True)\ndf_train.drop(df_train[df_train['disgust'] == 1].index, inplace=True)\ndf_dev.drop(df_dev[df_dev['disgust'] == 1].index, inplace=True)","f61fc730":"df_train.drop(['Class', 'List of classes', 'Len of classes', 'Emotions', 'Mapped Emotions', 'neutral', 'disgust'], axis=1, inplace=True)\ndf_dev.drop(['Class', 'List of classes', 'Len of classes', 'Emotions', 'Mapped Emotions', 'neutral', 'disgust'], axis=1, inplace=True)","fe4e4867":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \n                       \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \n                       \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \n                       \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\",\n                       \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \n                       \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\n                       \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\n                       \"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \n                       \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\",\n                       \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \n                       \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\",\n                       \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\",\n                       \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\",\n                       \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\",\n                       \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\",\n                       \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \n                       \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\",\n                       \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \n                       \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \n                       \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\n                       \"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\",\n                       \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'u.s':'america', 'e.g':'for example'}\n\npunct = [',', '.', '\"', ':', ')', '(', '-', '!', '?', '|', ';', \"'\", '$', '&', '\/', '[', ']', '>', '%', '=', '#', '*', '+', '\\\\', '\u2022',  '~', '@', '\u00a3', \n '\u00b7', '_', '{', '}', '\u00a9', '^', '\u00ae', '`',  '<', '\u2192', '\u00b0', '\u20ac', '\u2122', '\u203a',  '\u2665', '\u2190', '\u00d7', '\u00a7', '\u2033', '\u2032', '\u00c2', '\u2588', '\u00bd', '\u00e0', '\u2026', \n '\u201c', '\u2605', '\u201d', '\u2013', '\u25cf', '\u00e2', '\u25ba', '\u2212', '\u00a2', '\u00b2', '\u00ac', '\u2591', '\u00b6', '\u2191', '\u00b1', '\u00bf', '\u25be', '\u2550', '\u00a6', '\u2551', '\u2015', '\u00a5', '\u2593', '\u2014', '\u2039', '\u2500', \n '\u2592', '\uff1a', '\u00bc', '\u2295', '\u25bc', '\u25aa', '\u2020', '\u25a0', '\u2019', '\u2580', '\u00a8', '\u2584', '\u266b', '\u2606', '\u00e9', '\u00af', '\u2666', '\u00a4', '\u25b2', '\u00e8', '\u00b8', '\u00be', '\u00c3', '\u22c5', '\u2018', '\u221e', \n '\u2219', '\uff09', '\u2193', '\u3001', '\u2502', '\uff08', '\u00bb', '\uff0c', '\u266a', '\u2569', '\u255a', '\u00b3', '\u30fb', '\u2566', '\u2563', '\u2554', '\u2557', '\u25ac', '\u2764', '\u00ef', '\u00d8', '\u00b9', '\u2264', '\u2021', '\u221a', ]\n\npunct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\",\n                 \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', \n                 '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', '!':' '}\n\nmispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater',\n                'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ',\n                'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can',\n                'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', \n                'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', \n                'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', \n                'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization',\n                'demonetisation': 'demonetization'}","c6aac209":"def clean_text(text):\n    '''Clean emoji, Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = emoji.demojize(text)\n    text = re.sub(r'\\:(.*?)\\:','',text)\n    text = str(text).lower()    #Making Text Lowercase\n    text = re.sub('\\[.*?\\]', '', text)\n    #The next 2 lines remove html text\n    text = BeautifulSoup(text, 'lxml').get_text()\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    # replacing everything with space except (a-z, A-Z, \".\", \"?\", \"!\", \",\", \"'\")\n    text = re.sub(r\"[^a-zA-Z?.!,\u00bf']+\", \" \", text)\n    return text\n\ndef clean_contractions(text, mapping):\n    '''Clean contraction using contraction mapping'''    \n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    for word in mapping.keys():\n        if \"\"+word+\"\" in text:\n            text = text.replace(\"\"+word+\"\", \"\"+mapping[word]+\"\")\n    #Remove Punctuations\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    # creating a space between a word and the punctuation following it\n    # eg: \"he is a boy.\" => \"he is a boy .\"\n    text = re.sub(r\"([?.!,\u00bf])\", r\" \\1 \", text)\n    text = re.sub(r'[\" \"]+', \" \", text)\n    return text\n\ndef clean_special_chars(text, punct, mapping):\n    '''Cleans special characters present(if any)'''   \n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  \n    for s in specials:\n        text = text.replace(s, specials[s])\n    \n    return text\n\ndef correct_spelling(x, dic):\n    '''Corrects common spelling errors'''   \n    for word in dic.keys():\n        x = x.replace(word, dic[word])\n    return x\n\ndef remove_space(text):\n    '''Removes awkward spaces'''   \n    #Removes awkward spaces \n    text = text.strip()\n    text = text.split()\n    return \" \".join(text)\n\ndef text_preprocessing_pipeline(text):\n    '''Cleaning and parsing the text.'''\n    text = clean_text(text)\n    text = clean_contractions(text, contraction_mapping)\n    text = clean_special_chars(text, punct, punct_mapping)\n    text = correct_spelling(text, mispell_dict)\n    text = remove_space(text)\n    return text","80d349b0":"df_train['Text'] = df_train['Text'].apply(text_preprocessing_pipeline)\ndf_dev['Text'] = df_dev['Text'].apply(text_preprocessing_pipeline)","7fa48afa":"df_train.reset_index(drop=True).to_csv(\"train.csv\", index=False)\ndf_dev.reset_index(drop=True).to_csv(\"val.csv\", index=False)","22edfd5a":"df_train = df_train.reset_index(drop=True)\ndf_dev = df_dev.reset_index(drop=True)","51f7b0dd":"df_train.head()","a96c3803":"print(df_train.shape)\nprint(df_dev.shape)","0936e999":"device = 'cuda' if torch.cuda.is_available() else 'cpu'","f42bc958":"# Sections of config\n\n# Defining some key variables that will be used later on in the training\nMAX_LEN = 200\nTRAIN_BATCH_SIZE = 64\nVALID_BATCH_SIZE = 64\nEPOCHS = 3\nLEARNING_RATE = 2e-5\ntokenizer = AutoTokenizer.from_pretrained('roberta-base')","abef88d4":"target_cols = [col for col in df_train.columns if col not in ['Text', 'ID']]\ntarget_cols","20e0b4e8":"class BERTDataset(Dataset):\n    def __init__(self, df, tokenizer, max_len):\n        self.df = df\n        self.max_len = max_len\n        self.text = df.Text\n        self.tokenizer = tokenizer\n        self.targets = df[target_cols].values\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        text = self.text[index]\n        inputs = self.tokenizer.encode_plus(\n            text,\n            truncation=True,\n            add_special_tokens=True,\n            max_length=self.max_len,\n            padding='max_length',\n            return_token_type_ids=True\n        )\n        ids = inputs['input_ids']\n        mask = inputs['attention_mask']\n        token_type_ids = inputs[\"token_type_ids\"]\n        \n      \n        \n        \n        return {\n            'ids': torch.tensor(ids, dtype=torch.long),\n            'mask': torch.tensor(mask, dtype=torch.long),\n            'token_type_ids': torch.tensor(token_type_ids, dtype=torch.long),\n            'targets': torch.tensor(self.targets[index], dtype=torch.float)\n        }","a0b57b98":"train_dataset = BERTDataset(df_train, tokenizer, MAX_LEN)\nvalid_dataset = BERTDataset(df_dev, tokenizer, MAX_LEN)","121153f7":"train_loader = DataLoader(train_dataset, batch_size=TRAIN_BATCH_SIZE, \n                          num_workers=4, shuffle=True, pin_memory=True)\nvalid_loader = DataLoader(valid_dataset, batch_size=VALID_BATCH_SIZE, \n                          num_workers=4, shuffle=False, pin_memory=True)","b57a7526":"# Creating the customized model, by adding a drop out and a dense layer on top of distil bert to get the final output for the model. \n\nclass BERTClass(torch.nn.Module):\n    def __init__(self):\n        super(BERTClass, self).__init__()\n        self.roberta = AutoModel.from_pretrained('roberta-base')\n#         self.l2 = torch.nn.Dropout(0.3)\n        self.fc = torch.nn.Linear(768,5)\n    \n    def forward(self, ids, mask, token_type_ids):\n        _, features = self.roberta(ids, attention_mask = mask, token_type_ids = token_type_ids, return_dict=False)\n        print(features.shape) # output_2 = self.l2(output_1)\n        output = self.fc(features)\n       \n        return output\n\nmodel = BERTClass()\nmodel.to(device)","fed7362e":"def loss_fn(outputs, targets):\n    return torch.nn.BCEWithLogitsLoss()(outputs, targets)","3f68080f":"optimizer = AdamW(params =  model.parameters(), lr=LEARNING_RATE, weight_decay=1e-6)","4846de7c":"def train(epoch):\n    model.train()\n    for _,data in enumerate(train_loader, 0):\n        ids = data['ids'].to(device, dtype = torch.long)\n        mask = data['mask'].to(device, dtype = torch.long)\n        token_type_ids = data['token_type_ids'].to(device, dtype = torch.long)\n        targets = data['targets'].to(device, dtype = torch.float)\n\n        outputs = model(ids, mask, token_type_ids)\n\n        loss = loss_fn(outputs, targets)\n        if _%500 == 0:\n            print(f'Epoch: {epoch}, Loss:  {loss.item()}')\n        \n        loss.backward()\n        optimizer.step()\n        optimizer.zero_grad()","b76ed056":"for epoch in range(EPOCHS):\n    train(epoch)","fdf8195f":"def validation():\n    model.eval()\n    fin_targets=[]\n    fin_outputs=[]\n    with torch.no_grad():\n        for _, data in enumerate(valid_loader, 0):\n            ids = data['ids'].to(device, dtype = torch.long)\n         \n            mask = data['mask'].to(device, dtype = torch.long)\n         \n            token_type_ids = data['token_type_ids'].to(device, dtype = torch.long)\n           # print(mask.shape,ids.shape,token_type_ids.shape)\n            targets = data['targets'].to(device, dtype = torch.float)\n            outputs = model(ids, mask, token_type_ids)\n            fin_targets.extend(targets.cpu().detach().numpy().tolist())\n            fin_outputs.extend(torch.sigmoid(outputs).cpu().detach().numpy().tolist())\n    return fin_outputs, fin_targets","31d04293":"outputs, targets = validation()\noutputs = np.array(outputs) >= 0.5\naccuracy = metrics.accuracy_score(targets, outputs)\nf1_score_micro = metrics.f1_score(targets, outputs, average='micro')\nf1_score_macro = metrics.f1_score(targets, outputs, average='macro')\nprint(f\"Accuracy Score = {accuracy}\")\nprint(f\"F1 Score (Micro) = {f1_score_micro}\")\nprint(f\"F1 Score (Macro) = {f1_score_macro}\")","e9793963":"torch.save(model.state_dict(), \"state_dict_model.pt\")","f3cfe3d9":"\nimport numpy as np\nimport transformers\nimport torch\nfrom torch.utils.data import Dataset, DataLoader, RandomSampler, SequentialSampler\nfrom transformers import BertTokenizer, AutoTokenizer, BertModel, BertConfig, AutoModel, AdamW\nimport warnings\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nclass BERTClass(torch.nn.Module):\n    def __init__(self):\n        super(BERTClass, self).__init__()\n        self.roberta = AutoModel.from_pretrained('roberta-base')\n#         self.l2 = torch.nn.Dropout(0.3)\n        self.fc = torch.nn.Linear(768,5)\n    \n    def forward(self, ids, mask, token_type_ids):\n        _, features = self.roberta(ids, attention_mask = mask, token_type_ids = token_type_ids, return_dict=False)\n#         output_2 = self.l2(output_1)\n        output = self.fc(features)\n        return output\n\nmodel = BERTClass()\nmodel.to(device)","335f6244":"model.load_state_dict(torch.load('..\/input\/bert-multi-label-text-classification\/model.bin'))\nmodel.eval()","3151b4e2":"tokenizer = AutoTokenizer.from_pretrained('roberta-base')\n\ntext = 'I love you'\n\n\ninputs = tokenizer.encode_plus(\n    text,\n    truncation=True,\n    add_special_tokens=True,\n    max_length=200,\n    padding='max_length',\n    return_token_type_ids=True\n)\n\n\npred_id = inputs['input_ids']\n\npred_mask = inputs['attention_mask']\n\npred_token_type_id =inputs[\"token_type_ids\"]\n","a4360354":"pred_id= torch.tensor(pred_id, dtype=torch.long)\npred_mask= torch.tensor(pred_mask, dtype=torch.long)\npred_token_type_id= torch.tensor(pred_token_type_id, dtype=torch.long)","d29c5d7a":"print(pred_mask.shape,pred_id.shape)","1e58ea8b":"pred_mask=torch.unsqueeze(pred_mask, 0)\npred_id=torch.unsqueeze(pred_id, 0)\npred_token_type_id=torch.unsqueeze(pred_token_type_id, 0)","d4bb8863":"#device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\npred_id=pred_id.to(device, dtype = torch.long)\npred_mask=pred_mask.to(device, dtype = torch.long)\npred_token_type_id =pred_token_type_id.to(device, dtype = torch.long)","6ea70a96":"prediction = model(pred_id, pred_mask, pred_token_type_id)","f78de811":"prediction","4b93a3f4":"[-5.4617, -5.6077, -4.3905,  6.1357, -5.2573]-----sad\n[ 5.7761, -6.4536, -5.5446, -4.8113, -6.8624]-----hate\n[-7.2780, -8.0236,  7.7878, -7.0530, -6.1790]-----happy\n[-6.7689, -8.1666,  7.4316, -7.3442, -6.8740]------Love\n","f8dada80":"\nimport numpy as np\nimport transformers\nimport torch\nfrom torch.utils.data import Dataset, DataLoader, RandomSampler, SequentialSampler\nfrom transformers import BertTokenizer, AutoTokenizer, BertModel, BertConfig, AutoModel, AdamW\nimport warnings\n\n\n\nclass BERTClass(torch.nn.Module):\n\n    \n\n\n    def __init__(self):\n        super(BERTClass, self).__init__()\n        self.roberta = AutoModel.from_pretrained('roberta-base')\n    #         self.l2 = torch.nn.Dropout(0.3)\n        self.fc = torch.nn.Linear(768,5)\n\n    def forward(self, ids, mask, token_type_ids):\n        _, features = self.roberta(ids, attention_mask = mask, token_type_ids = token_type_ids, return_dict=False)\n    #         output_2 = self.l2(output_1)\n        output = self.fc(features)\n        return output\n\n","ee205af5":"\nimport numpy as np\nimport transformers\nimport torch\nfrom torch.utils.data import Dataset, DataLoader, RandomSampler, SequentialSampler\nfrom transformers import BertTokenizer, AutoTokenizer, BertModel, BertConfig, AutoModel, AdamW\nimport warnings\n\n\n\nclass BERTClass(torch.nn.Module):\n\n    \n\n\n    def __init__(self):\n        super(BERTClass, self).__init__()\n        self.roberta = AutoModel.from_pretrained('roberta-base')\n    #         self.l2 = torch.nn.Dropout(0.3)\n        self.fc = torch.nn.Linear(768,5)\n\n    def forward(self, ids, mask, token_type_ids):\n        _, features = self.roberta(ids, attention_mask = mask, token_type_ids = token_type_ids, return_dict=False)\n    #         output_2 = self.l2(output_1)\n        output = self.fc(features)\n        return output\n\n","ae3692d3":"\"\"\"def model_with_dict(state_dict):\n  model.load_state_dict(torch.load(state_dict))\n  model.eval()\n  return model\"\"\"\n\n\ndef preprocess(input,model):\n    \n  fin_target=[]\n  fin_output=[]\n  tokenizer = AutoTokenizer.from_pretrained('roberta-base')\n\n  text = input\n\n\n  inputs = tokenizer.encode_plus(\n      text,\n      truncation=True,\n      add_special_tokens=True,\n      max_length=200,\n      padding='max_length',\n      return_token_type_ids=True\n  )\n\n\n  \n\n\n  pred_id = inputs['input_ids']\n  pred_mask = inputs['attention_mask']\n  pred_token_type_id =inputs[\"token_type_ids\"]\n\n\n  pred_id= torch.tensor(pred_id, dtype=torch.long)\n  pred_mask= torch.tensor(pred_mask, dtype=torch.long)\n  pred_token_type_id= torch.tensor(pred_token_type_id, dtype=torch.long)\n\n\n\n  pred_mask=torch.unsqueeze(pred_mask, 0)\n  pred_id=torch.unsqueeze(pred_id, 0)\n  pred_token_type_id=torch.unsqueeze(pred_token_type_id, 0)\n\n  pred_id=pred_id.to(device, dtype = torch.long)\n  pred_mask=pred_mask.to(device, dtype = torch.long)\n  pred_token_type_id =pred_token_type_id.to(device, dtype = torch.long)\n    \n  prediction = model(pred_id, pred_mask, pred_token_type_id)\n  \n    \n  fin_target=(prediction.cpu().detach().numpy().tolist())\n  fin_output=(torch.sigmoid(prediction).cpu().detach().numpy().tolist())\n  \n\n  return fin_output\n\n\n","ddfbdcdf":"\"\"\"device = 'cuda' if torch.cuda.is_available() else 'cpu'\nmodel = BERTClass()\nmodel.to(device)\"\"\"","446bad00":"\"\"\"mod=model_with_dict('..\/input\/bert-multi-label-text-classification\/model.bin')\n\"\"\"","817f0fb2":"\"\"\"def prediction(bin_path,sent):\n    \n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    model = BERTClass()\n    model.to(device)\n    \n    mod=model_with_dict(bin_path)\n    \n    pred=preprocess(sent,mod)\n    p=pred[0]\n    \n    A=p[0]*1.5*-1\n    F=p[1]*0.8\n    J=p[2]*1.5\n    S=p[3]*0.6\n    Su=p[4]*0.8\n    sum=A+F+J+S+Su\n    \n    return sum\n    \n    \n    \"\"\"","d67fcfe7":"\"\"\"pred=preprocess('I love you',mod)\np=pred[0]\"\"\"","2c0565e2":"\"\"\"# anger fear joy sadness surprise \ndef score(pred):\n    A=pred[0]*1.5*-1\n    F=pred[1]*0.8\n    J=pred[2]*1.5\n    S=pred[3]*0.6\n    Su=pred[4]*0.8\n    sum=A+F+J+S+Su\n    \n    return sum\"\"\"","67171236":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\nmodel = BERTClass()\n\ndef prediction(bin_path,sent):\n    \n    \n    model.to(device)\n    \n    model.load_state_dict(torch.load(bin_path))\n    model.eval()\n \n    \n    pred=preprocess(sent,model)\n    p=pred[0]\n    \n    A=p[0]*1.5*-1\n    F=p[1]*0.8\n    J=p[2]*1.5\n    S=p[3]*0.6\n    Su=p[4]*0.8\n    sum=A+F+J+S+Su\n    \n    return sum\n    ","74743f5c":"s=prediction('..\/input\/bert-multi-label-text-classification\/model.bin','I love you')","7dba9a89":"s","c98354b8":"EXPAND DIMS TO MATCH MODEL INPUT SHAPE","64b35b52":"# Start here onwards to test.","19cf4571":"# **Prediction**\n\nNote : Always while predicting consider following things\n\n* HAVE I  LOADED MY MODEL\/MODEL WEIGHTS ?\n* IS MY MODEL IN EVAL() MODE ?\n* IS MY MODEL IN SAME DEVICE WHILE PREDICTING AS IT WAS WHILE TRAINING\/EVALUATING\n* ARE THE PRED INPUT AND TRAINING\/VALIDATION INPUT OF SAME DIMENSION ?\n* ARE ALL INPUT IN SAME DEVICE AS THEY WERE IN TRAINING\/EVALUATING ?\n","1e90fa03":"LOAD THE PYTORCH MODEL BODY","70270665":"ADD WEIGHTS TO THEM","6dd45e0e":"* DEFINE TOKENIZER\n* INPUT THE TEXT, WHAT YOU WANT TO PREDICT\n* ENCODE IT WITH BERT ENCODER\n* RETURN : input id, mask, token type id","072586f4":"* Input IDs\nThe input ids are often the only required parameters to be passed to the model as input. They are token indices, numerical representations of tokens building the sequences that will be used as input by the model\n\n\n* Attention mask\nThe attention mask is an optional argument used when batching sequences together. This argument indicates to the model which tokens should be attended to, and which should not.\n\n\n* Token Type IDs\nSome models\u2019 purpose is to do sequence classification or question answering. These require two different sequences to be joined in a single \u201cinput_ids\u201d entry, which usually is performed with the help of special tokens, such as the classifier ([CLS]) and separator ([SEP]) tokens. For example, the BERT model builds its two sequence input as such:[sep],[cls]","c8c8f6c1":"* PREDICT","da7f5126":"CONVERT INTO TENSOR DTYPE","a2beee86":"ADD INTO GPU "}}