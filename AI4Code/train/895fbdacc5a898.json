{"cell_type":{"568c8294":"code","cec108bd":"code","cb504c76":"code","19f77864":"code","16775407":"code","ad1fdbd9":"code","63ecdf3b":"code","e23836e4":"code","5462ca99":"code","8962b3fd":"code","c4aa65b8":"code","971c13b4":"code","c57ca9bb":"code","9e5675e1":"code","e4a88126":"code","adbcfa15":"code","f0845bcf":"code","0c75de6f":"code","a8248966":"code","e8389168":"code","a586f808":"code","ecf59555":"code","17a9ad8b":"code","104d84ce":"code","9887c17e":"code","c6c7f7bb":"code","bf38ba5e":"code","13059a4a":"code","bfafcc82":"code","a6fab493":"code","3d1263df":"code","2c980503":"code","2dba4855":"code","01220189":"code","f0428219":"code","ce6fe378":"code","191cc43c":"code","c71c998c":"code","3507a964":"code","bf32d567":"code","c175f2ca":"code","be3a7336":"code","05c05299":"code","e6f082a8":"code","80085361":"code","973eb37a":"code","c48058f8":"code","453db876":"code","db0b8907":"code","1ae84f0a":"code","9912c6d0":"code","d88fdefb":"code","5c363cd5":"code","da92a7c8":"code","1f2e966a":"code","461d6abb":"code","82bf4125":"code","ed889cf0":"code","87b470cf":"code","cd395489":"code","72a88d96":"code","17a70cea":"code","5d53835d":"code","be8e4367":"code","a8303984":"code","75497cab":"code","9d64d4ce":"markdown","d1b371e9":"markdown","0b548558":"markdown","92f80adf":"markdown","4c76bd2d":"markdown","bbc7174a":"markdown","00a6754f":"markdown","b1a1da42":"markdown","d6b8c829":"markdown","9f2d115e":"markdown","32df05fc":"markdown","18da5791":"markdown","a63316ff":"markdown","c1c39607":"markdown","034218ce":"markdown","10560c59":"markdown","2e07f945":"markdown","40ae85bb":"markdown","7921980e":"markdown","9b59454e":"markdown","1edd0f89":"markdown","e9ca48c3":"markdown","934a8d22":"markdown","86e60171":"markdown","a13fa395":"markdown","bc3447b6":"markdown","745b2c52":"markdown","0205b8d1":"markdown","107a9665":"markdown","77e32615":"markdown","f3ad8ec7":"markdown","e39f80c0":"markdown","0e683269":"markdown","640793f7":"markdown","2055949a":"markdown","4a22ccf6":"markdown","3e9cdd1c":"markdown","938ddbf8":"markdown","6b392d74":"markdown","3fd94de5":"markdown","32855660":"markdown","2aed69f6":"markdown"},"source":{"568c8294":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cec108bd":"import pandas as pd","cb504c76":"df = pd.read_csv('\/kaggle\/input\/titanic\/titanic.txt', sep='\\t', header = 0)\ndf\n#Data Fram","19f77864":"df.head()\ndf.tail()","16775407":"df.columns","ad1fdbd9":"df['Name']","63ecdf3b":"df.iloc[2,0:5]","e23836e4":"df.loc[2,'Passenger Class':'Age']","5462ca99":"df.dtypes","8962b3fd":"df['Age'].min()","c4aa65b8":"df[df['Age']==df['Age'].min()]","971c13b4":"df['Name'][df['Age']==df['Age'].max()]","c57ca9bb":"df.shape","9e5675e1":"df['Sex'].tolist()","e4a88126":"\ndf.values","adbcfa15":"df['Label'] = df['Age'] >= 20\ndf","f0845bcf":"df.isnull()","0c75de6f":"df.isnull().any()","a8248966":"df['Age'].isnull().sum()","e8389168":"df['Passenger Fare'].isnull().sum()","a586f808":"df['Cabin'].isnull().sum()","ecf59555":"df_clean = df\ndf_clean = df_clean.drop('Cabin',1)\ndf_clean = df_clean.drop('Ticket Number',1)\ndf_clean.columns","17a9ad8b":"df_clean = df_clean.dropna(1,'any')","104d84ce":"df_clean = df_clean.dropna(0,'any')","9887c17e":"df_clean.isnull().any()\n","c6c7f7bb":"df_clean['Sex'].unique()","bf38ba5e":"df_clean['Sex'] = df_clean['Sex'].replace('Female','F')\ndf_clean['Sex'] = df_clean['Sex'].replace('Male','M')\ndf_clean\n","13059a4a":"df_clean['Passenger Class'].unique()","bfafcc82":"p_class, levels = pd.factorize(df_clean['Passenger Class'])","a6fab493":"p_class","3d1263df":"levels","2c980503":"df_clean['Passenger Class'] = p_class\ndf_clean","2dba4855":"\ndf_clean.dtypes","01220189":"\ndf_clean['Sex'] = pd.factorize(df_clean['Sex'])[0]\ndf_clean['Survived'] = pd.factorize(df_clean['Survived'])[0]\ndf_clean.dtypes","f0428219":"df_clean = df_clean.set_index('Name')\ndf_clean","ce6fe378":"pd.crosstab(df_clean['Passenger Class'],df_clean['Survived']).plot(kind='bar')","191cc43c":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/plenoi\/Clinic\/master\/ultima_all_clean.csv', sep=',', header = 0)\ndf","c71c998c":"df_clean=df\ndf_clean = df_clean.set_index('hn')\ndf_clean","3507a964":"df_clean.isnull().any()","bf32d567":"df_clean = df_clean.drop('hiv',1)\ndf_clean = df_clean.drop('size',1)\ndf_clean = df_clean.drop('utmet',1)\ndf_clean = df_clean.drop('vgmet',1)\ndf_clean = df_clean.drop('surgery',1)\ndf_clean = df_clean.drop('pchemo',1)\ndf_clean","c175f2ca":"df_clean.isnull().any()","be3a7336":"df_clean.isnull().sum()","05c05299":"df_clean = df_clean.drop('RHlvsi',1)\ndf_clean = df_clean.drop('depth',1)\ndf_clean","e6f082a8":"df_clean.isnull().sum(axis=1)\ndf_clean\n","80085361":"df_clean.columns","973eb37a":"df_clean['age'] = df_clean['age'] <= 20\ndf_clean['age'] = df_clean['age'].replace(True,'Young')\ndf_clean['age'] = df_clean['age'].replace(False,'Old')\ndf_clean\n\n","c48058f8":"df_clean['pmmet'].unique()","453db876":"hn_pmmet, levels = pd.factorize(df_clean['pmmet'])","db0b8907":"hn_pmmet","1ae84f0a":"levels","9912c6d0":"df_clean['pmmet'] = hn_pmmet\ndf_clean","d88fdefb":"pmmet0=df_clean[(df_clean['pmmet']==0.0)]\npmmet0","5c363cd5":"pmmet1=df_clean[(df_clean['pmmet']==1.0)]\npmmet1","da92a7c8":"pmmet0ex=df_clean[(df_clean['pmmet']==0.0)].sample(10)\npmmet0ex","1f2e966a":"pmmet1ex=df_clean[(df_clean['pmmet']==1.0)].sample(10)\npmmet1ex","461d6abb":"import matplotlib.pyplot as plt\nimport numpy as np","82bf4125":"paritysort = np.sort(df_clean['parity'].unique())\nparitysort\n","ed889cf0":"fig = plt.figure(1, figsize=(15,6))\nparityamount = [sum(df_clean['parity'] == paritysort[0]),\n        sum(df_clean['parity'] == paritysort[1]),\n        sum(df_clean['parity'] == paritysort[2]),\n        sum(df_clean['parity'] == paritysort[3]),\n        sum(df_clean['parity'] == paritysort[4]),\n        sum(df_clean['parity'] == paritysort[5]),\n        sum(df_clean['parity'] == paritysort[6]),\n        sum(df_clean['parity'] == paritysort[7]),\n        sum(df_clean['parity'] == paritysort[8]),\n        sum(df_clean['parity'] == paritysort[9]),\n        sum(df_clean['parity'] == paritysort[10]),        \n        sum(df_clean['parity'] == paritysort[11])]\nplt.title('Total of parity')\nplt.bar(paritysort,parityamount)\n\n\n","87b470cf":"menopaussort = np.sort(df_clean['menopaus'].unique())\nmenopaussort","cd395489":"hnamount = df_clean.shape\nfig = plt.figure(1, figsize=(15,6))\nmenopausamount = [sum(df_clean['menopaus'] == menopaussort[0])\/hnamount[0],\n       sum(df_clean['menopaus'] == menopaussort[1])\/hnamount[0],\n       sum(df_clean['menopaus'] == menopaussort[2])\/hnamount[0]]\n\nexplode = (0, 0, 0) \nplt.subplot(1,2,1)\nplt.title('proportion of menopaus')\nplt.pie(menopausamount, labels=menopaussort,autopct='%1.2f%%', startangle=90, explode=explode)\n\nplt.show()","72a88d96":"Wardsizesort = np.sort(df_clean['Wardsize'].unique())\nWardsizesort","17a70cea":"fig = plt.figure(1, figsize=(15,6))\nWardsizeamount = [sum(df_clean['Wardsize'] == Wardsizesort[0]),\n        sum(df_clean['Wardsize'] == Wardsizesort[1]),\n        sum(df_clean['Wardsize'] == Wardsizesort[2]),\n        sum(df_clean['Wardsize'] == Wardsizesort[3]),\n        sum(df_clean['Wardsize'] == Wardsizesort[4]),\n        sum(df_clean['Wardsize'] == Wardsizesort[5]),\n        sum(df_clean['Wardsize'] == Wardsizesort[6]),\n        sum(df_clean['Wardsize'] == Wardsizesort[7]),\n        sum(df_clean['Wardsize'] == Wardsizesort[8]),\n        sum(df_clean['Wardsize'] == Wardsizesort[9]),\n        sum(df_clean['Wardsize'] == Wardsizesort[10]),\n        sum(df_clean['Wardsize'] == Wardsizesort[11]),\n        sum(df_clean['Wardsize'] == Wardsizesort[12]),\n        sum(df_clean['Wardsize'] == Wardsizesort[13]),\n        sum(df_clean['Wardsize'] == Wardsizesort[14]),\n        sum(df_clean['Wardsize'] == Wardsizesort[15]),\n        sum(df_clean['Wardsize'] == Wardsizesort[16]),\n        sum(df_clean['Wardsize'] == Wardsizesort[17]),\n        sum(df_clean['Wardsize'] == Wardsizesort[18])]\nplt.title('Total of each Wardsize')\nlabels=Wardsizesort\nplt.bar(labels,Wardsizeamount)\n","5d53835d":"diseasesort = np.sort(df_clean['disease'].unique())\ndiseasesort","be8e4367":"hnamount = df_clean.shape\nfig = plt.figure(1, figsize=(15,6))\ndiseaseamount = [sum(df_clean['disease'] == diseasesort[0])\/hnamount[0],\n       sum(df_clean['disease'] == diseasesort[1])\/hnamount[0]]\n\nexplode = (0, 0) \nlabels = 'No', 'Yes'\nplt.subplot(1,2,1)\nplt.title('proportion of disease')\nplt.pie(diseaseamount, labels=labels,autopct='%1.2f%%', startangle=90, explode=explode)\n\nplt.show()","a8303984":"OPDsizesort = np.sort(df_clean['OPDsize'].unique())\nOPDsizesort","75497cab":"hnamount = df_clean.shape\nfig = plt.figure(1, figsize=(15,6))\n\nOPDsizeamount = [sum(df_clean['OPDsize'] == OPDsizesort[0])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[1])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[2])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[3])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[4])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[5])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[6])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[7])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[8])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[9])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[10])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[11])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[12])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[13])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[14])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[15])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[16])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[17])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[18])\/hnamount[0],\n                sum(df_clean['OPDsize'] == OPDsizesort[19])\/hnamount[0]]\nplt.subplot(1,2,1)\nexplode = (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) \n\nplt.title('proportion of OPDsize')\nplt.pie(OPDsizeamount, labels=OPDsizesort,autopct='%1.2f%%', startangle=90, explode=explode)\n\nplt.show()","9d64d4ce":"# 7. Set Index","d1b371e9":"## 2.5","0b548558":"\u0e43\u0e19\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e35\u0e49\u0e21\u0e35\u0e04\u0e48\u0e32\u0e2d\u0e30\u0e44\u0e23\u0e1a\u0e49\u0e32\u0e07","92f80adf":"df=null?? \u0e2d\u0e31\u0e19\u0e44\u0e2b\u0e19\u0e2a\u0e31\u0e01\u0e2d\u0e31\u0e19\u0e21\u0e31\u0e49\u0e22\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19null\nnull=true","4c76bd2d":"## 2.4","bbc7174a":"## 2.2","00a6754f":"df_clean = df \u0e2a\u0e23\u0e32\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e43\u0e2b\u0e21\u0e48\u0e1b\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e19\u0e01\u0e32\u0e23\u0e25\u0e1a\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\ndf_clean = df_clean.drop('Cabin',1)\ndf_clean = df_clean.drop('Ticket Number',1) \u0e14\u0e23\u0e2d\u0e1b\u0e17\u0e31\u0e49\u0e07\u0e04\u0e2d\u0e25\u0e31\u0e21\n","b1a1da42":"# 6. Replace string values to unique integers","d6b8c829":"\u0e41\u0e1b\u0e25\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e01\u0e25\u0e31\u0e1a\u0e40\u0e1b\u0e47\u0e19 numpy","9f2d115e":"## 1.3","32df05fc":"=max(df['Age'])","18da5791":"# 5. Replace values","a63316ff":"## 1.6","c1c39607":"## 2. Access Data & Basic Functions","034218ce":"## 1.5","10560c59":"# 1.","2e07f945":"# 4. Remove Values","40ae85bb":"\u0e40\u0e0b\u0e15\u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e34\u0e19\u0e40\u0e14\u0e47\u0e01\u0e0b\u0e4c","7921980e":"# Assignment","9b59454e":"## 2.1","1edd0f89":"# 3. Check Missing Values","e9ca48c3":"# 1. Load Data","934a8d22":"## 1.4","86e60171":"## 2.3","a13fa395":"\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e02\u0e2d\u0e07\u0e2d\u0e32\u0e22\u0e38\u0e19\u0e49\u0e2d\u0e22\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14","bc3447b6":"\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e1b\u0e47\u0e19list","745b2c52":"\ndf['Age'].max() ","0205b8d1":"\u0e40\u0e0a\u0e47\u0e04 Type object=string","107a9665":"\u0e43\u0e0a\u0e49label+colum\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32\u0e1b\u0e47\u0e19true when age>=20","77e32615":"# 8. Cross Tab Plot","f3ad8ec7":"false=not noll\ntrue=noll","e39f80c0":"\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1c\u0e25\u0e23\u0e27\u0e21\u0e02\u0e2d\u0e07\u0e08\u0e33\u0e19\u0e27\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e2b\u0e32\u0e22\u0e44\u0e1b","0e683269":"\u0e15\u0e31\u0e27\u0e43\u0e14\u0e15\u0e31\u0e27\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e17\u0e35\u0e48\u0e27\u0e48\u0e32\u0e07 \u0e14\u0e23\u0e2d\u0e1a\u0e17\u0e31\u0e49\u0e07\u0e41\u0e16\u0e27(0)","640793f7":"## 1.1","2055949a":"\u0e15\u0e31\u0e27\u0e43\u0e14\u0e15\u0e31\u0e27\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e17\u0e35\u0e48\u0e27\u0e48\u0e32\u0e07 \u0e14\u0e23\u0e2d\u0e1a\u0e17\u0e31\u0e49\u0e07\u0e04\u0e2d\u0e25\u0e31\u0e21(1)","4a22ccf6":"pd.factorize \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\np_class, levels = 0,1","3e9cdd1c":"\u0e1e\u0e25\u0e2d\u0e15\u0e01\u0e23\u0e32\u0e1f \u0e42\u0e14\u0e22\u0e40\u0e1b\u0e23\u0e35\u0e22\u0e1a\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e08\u0e32\u0e01\u0e0a\u0e49\u0e19\u0e1c\u0e39\u0e49\u0e42\u0e14\u0e22\u0e2a\u0e32\u0e23\u0e17\u0e35\u0e48\u0e23\u0e2d\u0e14\u0e0a\u0e27\u0e34\u0e15\u0e41\u0e25\u0e30\u0e40\u0e2a\u0e35\u0e22\u0e0a\u0e35\u0e27\u0e34\u0e15","938ddbf8":"\u0e41\u0e1b\u0e25\u0e07\u0e04\u0e48\u0e32+\u0e1a\u0e2d\u0e01\u0e04\u0e48\u0e32\u0e17\u0e35\u0e48\u0e41\u0e1b\u0e25\u0e07","6b392d74":"replace('Female','F') change female=F","3fd94de5":"pd.factorize(df_clean['Sex'])[0] =sex index\u0e17\u0e35\u0e480","32855660":"### pd.+tab=\u0e02\u0e36\u0e49\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e43\u0e2b\u0e49\u0e14\u0e39","2aed69f6":"# 2"}}