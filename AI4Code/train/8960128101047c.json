{"cell_type":{"3442e06b":"code","f0be0797":"code","6eb052c0":"code","706058e3":"code","6faab418":"code","0363ed0b":"code","329035fa":"code","8cb20781":"code","dadc2a95":"code","1cafc8fe":"code","abd29bea":"code","08a85c19":"code","6979976c":"code","f45896be":"code","293543f9":"code","d392c741":"code","3d92baf7":"code","2b75f34c":"markdown","125102cb":"markdown","5be5eddf":"markdown","efbc426d":"markdown","794aa818":"markdown","d76541cb":"markdown","a903612d":"markdown","eb2169eb":"markdown","2ad84d3e":"markdown","a711085e":"markdown","6e68c957":"markdown","c0d04841":"markdown","39e43696":"markdown"},"source":{"3442e06b":"!pip install -U -t \/kaggle\/working\/ git+https:\/\/github.com\/Kaggle\/learntools.git\n!pip install git+https:\/\/github.com\/qubvel\/segmentation_models\n!pip install -q efficientnet\n\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.deep_learning.ex_tpu import *\nstep_1.check()","f0be0797":"from petal_helper import *","6eb052c0":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","706058e3":"ds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n\nprint(\"Training:\", ds_train)\nprint (\"Validation:\", ds_valid)\nprint(\"Test:\", ds_test)","6faab418":"print(\"Number of classes: {}\".format(len(CLASSES)))\n\nprint(\"First five classes, sorted alphabetically:\")\nfor name in sorted(CLASSES)[:5]:\n    print(name)\n\nprint (\"Number of training images: {}\".format(NUM_TRAINING_IMAGES))","0363ed0b":"print(\"Training data shapes:\")\nfor image, label in ds_train.take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())","329035fa":"print(\"Test data shapes:\")\nfor image, idnum in ds_test.take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U=unicode string","8cb20781":"one_batch = next(iter(ds_train.unbatch().batch(20)))\ndisplay_batch_of_images(one_batch)","dadc2a95":"from sklearn.model_selection import train_test_split\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Conv3D, Dropout\n\nimport math, re, os\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport efficientnet.tfkeras as efn\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n\n\n#with strategy.scope():\n#    pretrained_model = tf.keras.applications.VGG16(\n#        weights='imagenet',\n#        include_top=False ,\n#        input_shape=[*IMAGE_SIZE, 3]\n#    )\n#    pretrained_model.trainable = False\n    \n#    model = tf.keras.Sequential([\n        # To a base pretrained on ImageNet to extract features from images...\n#        pretrained_model,\n        # ... attach a new head to act as a classifier.\n#        tf.keras.layers.GlobalAveragePooling2D(),\n#        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#    ])\n    \nwith strategy.scope():\n    enet = efn.EfficientNetB7(\n        input_shape=(512, 512, 3),\n        weights='imagenet',\n        include_top=False\n    )\n    \n    enet.trainable = False\n    \n    model = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n    \n#model = Sequential()\n#model.add(Conv2D(20, kernel_size=(3, 3), activation='relu', input_shape=(512, 512, 3)))\n#model.add(Conv2D(10, kernel_size=(3, 3), activation='relu'))\n#model.add(Flatten())\n#model.add(Dense(200, activation='relu'))\n#model.add(Dense(104, activation='softmax'))\n    \nmodel.compile(optimizer='adam', loss = 'sparse_categorical_crossentropy', metrics=['sparse_categorical_accuracy'])\n\nmodel.summary()","1cafc8fe":"# Define the batch size. This will be 16 with TPU off and 128 with TPU on\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\n# Define training epochs for committing\/submitting. (TPU on)\nEPOCHS = 12\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\nhistory = model.fit(\n    ds_train,\n    validation_data=ds_valid,\n    epochs=EPOCHS,\n    steps_per_epoch=STEPS_PER_EPOCH,\n)","abd29bea":"display_training_curves(\n    history.history['loss'],\n    history.history['val_loss'],\n    'loss',\n    211,\n)\ndisplay_training_curves(\n    history.history['sparse_categorical_accuracy'],\n    history.history['val_sparse_categorical_accuracy'],\n    'accuracy',\n    212,\n)","08a85c19":"cmdataset = get_validation_dataset(ordered=True)\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\n\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy()\ncm_probabilities = model.predict(images_ds)\ncm_predictions = np.argmax(cm_probabilities, axis=-1)\n\nlabels = range(len(CLASSES))\ncmat = confusion_matrix(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n)\ncmat = (cmat.T \/ cmat.sum(axis=1)).T # normalize","6979976c":"score = f1_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nprecision = precision_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nrecall = recall_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\ndisplay_confusion_matrix(cmat, score, precision, recall)","f45896be":"dataset = get_validation_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)","293543f9":"images, labels = next(batch)\nprobabilities = model.predict(images)\npredictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)","d392c741":"test_ds = get_test_dataset(ordered=True)\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)","3d92baf7":"print('Generating submission.csv file...')\n\n# Get image ids from test set and convert to integers\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\n# Write the submission file\nnp.savetxt(\n    'submission.csv',\n    np.rec.fromarrays([test_ids, predictions]),\n    fmt=['%s', '%d'],\n    delimiter=',',\n    header='id,label',\n    comments='',\n)\n\n# Look at the first few predictions\n!head submission.csv","2b75f34c":"Peek at training data.","125102cb":"## Test Predictions ##\n\nCreate predictions to submit to the competition.","5be5eddf":"## Train Model ##","efbc426d":"Examine the shape of the data.","794aa818":"## Validation ##\n\nCreate a confusion matrix.","d76541cb":"## Explore the Data ##\n\nTry using some of the helper functions described in the **Getting Started** tutorial to explore the dataset.","a903612d":"# Going Further #\n\nNow that you've joined the **Petals to the Metal** competition, why not try your hand at improving the model and see if you can climb the ranks! If you're looking for ideas, the *original* flower competition, [Flower Classification with TPUs](https:\/\/www.kaggle.com\/c\/flower-classification-with-tpus), has a wealth of information in its notebooks and discussion forum. Check it out!","eb2169eb":"Examine training curves.","2ad84d3e":"## Define Model #","a711085e":"**[Deep Learning Home Page](https:\/\/www.kaggle.com\/learn\/deep-learning)**\n\n---\n","6e68c957":"Look at examples from the dataset, with true and predicted classes.","c0d04841":"---\n**[Deep Learning Home Page](https:\/\/www.kaggle.com\/learn\/deep-learning)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum) to chat with other Learners.*","39e43696":"## Loading the Competition Data ##"}}