{"cell_type":{"a14062b1":"code","5e5772ce":"code","72129aa5":"code","8d68d926":"code","81721c6f":"code","b8c744ac":"code","a9a37950":"code","3b5360cb":"code","408a83d4":"code","793287bb":"code","5c7a5b44":"code","a1dffbbf":"code","e435f6a5":"code","90ac9f76":"code","e68d1581":"code","2f5ed7a5":"code","f91846ff":"code","b1fbdde2":"code","71879259":"code","b6593138":"code","dc61fc08":"code","00969e49":"code","15915997":"code","4a5a35ff":"code","6c655dc8":"code","e3714c3b":"code","f0e442fb":"code","298eb741":"code","b3aa3383":"code","baf277a0":"code","6edda9c0":"code","fd3071e4":"code","b16d5de7":"code","3855a69f":"code","85a3eb7f":"code","7937097c":"code","ab2333e6":"markdown","7f5a4442":"markdown","ffa5d051":"markdown","c60d0e76":"markdown","e844bac1":"markdown","045b89bc":"markdown","d7857905":"markdown","0f9a6d54":"markdown","84454495":"markdown","5c6379f6":"markdown","570e85d7":"markdown","ed268aca":"markdown","60840c22":"markdown","acb2a449":"markdown","fd50c847":"markdown","66da0264":"markdown","02196a3a":"markdown","23807a1a":"markdown","1280d9af":"markdown","46a3c63a":"markdown","3dfdd4f4":"markdown","513684d0":"markdown","207b51ae":"markdown","9c901eda":"markdown","14cc3b86":"markdown","3d436e4d":"markdown","2bc90c54":"markdown","5d798a54":"markdown","22af7e8e":"markdown","11f2373c":"markdown","99e768cc":"markdown","db1e3fcc":"markdown","14e7ab37":"markdown","fcc1d3d7":"markdown","a28c1aa3":"markdown","bb8406ee":"markdown","b9fab0f3":"markdown","4f087ddc":"markdown","c88f1279":"markdown","286b8ac2":"markdown","5ad37236":"markdown","e4d7291a":"markdown","4b46473c":"markdown","baa3c0e6":"markdown","1d3d0a1a":"markdown","32f5ba67":"markdown","2e47f4b8":"markdown","f454a3d8":"markdown","34b5a665":"markdown","ce4f519f":"markdown","8fe307d5":"markdown","62f9229e":"markdown","252d551b":"markdown","63d464ac":"markdown","7ed24710":"markdown","2b587145":"markdown","fa05070a":"markdown","4fe7be4a":"markdown"},"source":{"a14062b1":"import tensorflow as tf\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.rcParams['figure.figsize'] = (8, 6)","5e5772ce":"x = tf.Variable(2.0)\ny = tf.Variable(3.0)\n\nwith tf.GradientTape() as t:\n    x_sq = x * x\n    with t.stop_recording():\n        y_sq = y * y\n    z = x_sq + y_sq\n\ngrad = t.gradient(z, {'x': x, 'y': y})\n\nprint('dz\/dx:', grad['x']) # 2*x => 4\nprint('dz\/dy:', grad['y'])","72129aa5":"x = tf.Variable(2.0)\ny = tf.Variable(3.0)\nreset = True\n\nwith tf.GradientTape() as t:\n    y_sq = y * y\n    if reset:\n        # \uc9c0\uae08\uae4c\uc9c0 \ud14c\uc774\ud504\uc5d0 \uae30\ub85d\ub41c \ubaa8\ub4e0 \uac83\uc744 \ub0a0\ub9bd\ub2c8\ub2e4\n        t.reset()\n    z = x * x + y_sq\n\ngrad = t.gradient(z, {'x': x, 'y': y})\n\nprint('dz\/dx:', grad['x']) # 2*x => 4\nprint('dz\/dy:', grad['y'])","8d68d926":"x = tf.Variable(2.0)\ny = tf.Variable(3.0)\n\nwith tf.GradientTape() as t:\n    y_sq = y**2\n    z = x**2 + tf.stop_gradient(y_sq)\n\ngrad = t.gradient(z, {'x': x, 'y': y})\n\nprint('dz\/dx:', grad['x']) # 2*x => 4\nprint('dz\/dy:', grad['y'])","81721c6f":"# \ud56d\ub4f1 \uc5f0\uc0b0\uc744 \ub9cc\ub4e4\uc9c0\ub9cc, \uae30\uc6b8\uae30 \ubc29\ud5a5 \ub3d9\uc548 \uace0\uc815\uc2dc\ud0b5\ub2c8\ub2e4\n@tf.custom_gradient\ndef clip_gradients(y):\n    def backward(dy):\n        return tf.clip_by_norm(dy, 0.5)\n    return y, backward\n\nv = tf.Variable(2.0)\nwith tf.GradientTape() as t:\n    output = clip_gradients(v * v)\nprint(t.gradient(output, v)) # 4\ub97c 2\ub85c \uace0\uc815\uc2dc\ud0a4\ub294 \"backward\"\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4","b8c744ac":"x0 = tf.constant(0.0)\nx1 = tf.constant(0.0)\n\nwith tf.GradientTape() as tape0, tf.GradientTape() as tape1:\n    tape0.watch(x0)\n    tape1.watch(x1)\n    \n    y0 = tf.math.sin(x0)\n    y1 = tf.nn.sigmoid(x1)\n    \n    y = y0 + y1\n    \n    ys = tf.reduce_sum(y)","a9a37950":"tape0.gradient(ys, x0).numpy() # cos(x) => 1.0","3b5360cb":"tape1.gradient(ys, x1).numpy() # sigmoid(x1)*(1-sigmoid(x1)) => 0.25","408a83d4":"x = tf.Variable(1.0) # 1.0\uc73c\ub85c \ucd08\uae30\ud654\ub41c TensorFlow \ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4\n\nwith tf.GradientTape() as t2:\n    with tf.GradientTape() as t1:\n        y = x * x * x\n    \n    # \uc678\ubd80\uc758 `t2` \ubb38\ub9e5 \uad00\ub9ac\uc790 \ub0b4\ubd80\uc5d0\uc11c \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4\n    # \uc774\uac83\uc740 \uae30\uc6b8\uae30 \uacc4\uc0b0 \ub610\ud55c \ubbf8\ubd84 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4.\n    dy_dx = t1.gradient(y, x)\nd2y_dx2 = t2.gradient(dy_dx, x)\n\nprint('dy_dx:', dy_dx.numpy()) # 3 * x**2 => 3.0\nprint('d2y_dx2:', d2y_dx2.numpy()) # 6 * x => 6.0","793287bb":"x = tf.random.normal([7, 5])\n\nlayer = tf.keras.layers.Dense(10, activation=tf.nn.relu)","5c7a5b44":"with tf.GradientTape() as t2:\n    # \ub0b4\ubd80 \ud14c\uc774\ud504\ub294 \ubcc0\uc218\ub97c \uc81c\uc678\ud558\uace0 \uc624\uc9c1 \uc785\ub825\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30\ub9cc\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.\n    with tf.GradientTape(watch_accessed_variables=False) as t1:\n        t1.watch(x)\n        y = layer(x)\n        out = tf.reduce_sum(layer(x)**2)\n    # 1. \uc785\ub825 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    g1 = t1.gradient(out, x)\n    # 2. \uc785\ub825 \uae30\uc6b8\uae30\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    g1_mag = tf.norm(g1)\n\n# 3. \ubaa8\ub378\uc5d0 \ub300\ud574 \ud06c\uae30\uc758 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\ndg1_mag = t2.gradient(g1_mag, layer.trainable_variables)","a1dffbbf":"[var.shape for var in dg1_mag]","e435f6a5":"x = tf.linspace(-10.0, 10.0, 200+1)\ndelta = tf.Variable(0.0)\n\nwith tf.GradientTape() as tape:\n    y = tf.nn.sigmoid(x+delta)\n\ndy_dx = tape.jacobian(y, delta)","90ac9f76":"print(y.shape)\nprint(dy_dx.shape)","e68d1581":"plt.plot(x.numpy(), y, label='y')\nplt.plot(x.numpy(), dy_dx, label='dy\/dx')\nplt.legend()\n_ = plt.xlabel('x')","2f5ed7a5":"x = tf.random.normal([7, 5])\nlayer = tf.keras.layers.Dense(10, activation=tf.nn.relu)\n\nwith tf.GradientTape(persistent=True) as tape:\n    y = layer(x)\n    \ny.shape","f91846ff":"layer.kernel.shape","b1fbdde2":"j = tape.jacobian(y, layer.kernel)\nj.shape","71879259":"g = tape.gradient(y, layer.kernel)\nprint('g.shape:', g.shape)\n\nj_sum = tf.reduce_sum(j, axis=[0, 1])\ndelta = tf.reduce_max(abs(g - j_sum)).numpy()\nassert delta < 1e-3\nprint('delta:', delta)","b6593138":"x = tf.random.normal([7, 5])\nlayer1 = tf.keras.layers.Dense(8, activation=tf.nn.relu)\nlayer2 = tf.keras.layers.Dense(6, activation=tf.nn.relu)\n\nwith tf.GradientTape() as t2:\n    with tf.GradientTape() as t1:\n        x = layer1(x)\n        x = layer2(x)\n        loss = tf.reduce_mean(x**2)\n    \n    g = t1.gradient(loss, layer1.kernel)\n\nh = t2.jacobian(g, layer1.kernel)","dc61fc08":"print(f'layer.kernel.shape: {layer1.kernel.shape}')\nprint(f'h.shape: {h.shape}')","00969e49":"n_params = tf.reduce_prod(layer1.kernel.shape)\n\ng_vec = tf.reshape(g, [n_params, 1])\nh_mat = tf.reshape(h, [n_params, n_params])","15915997":"def imshow_zero_center(image, **kwargs):\n    lim = tf.reduce_max(abs(image))\n    plt.imshow(image, vmin=-lim, vmax=lim, cmap='seismic', **kwargs)\n    plt.colorbar()","4a5a35ff":"imshow_zero_center(h_mat)","6c655dc8":"eps = 1e-3\neye_eps = tf.eye(h_mat.shape[0])*eps","e3714c3b":"# X(k+1) = X(k) - (\u2207\u00b2f(X(k)))^-1 @ \u2207f(X(k))\n# h_mat = \u2207\u00b2f(X(k))\n# g_vec = \u2207f(X(k))\nupdate = tf.linalg.solve(h_mat + eye_eps, g_vec)\n\n# update\uc758 \ubaa8\uc591\uc744 \ubc14\uafb8\uace0 \ubcc0\uc218\uc5d0 \uc801\uc6a9\ud558\uc138\uc694.\n_ = layer1.kernel.assign_sub(tf.reshape(update, layer1.kernel.shape))","f0e442fb":"x = tf.random.normal([7, 5])\n\nlayer1 = tf.keras.layers.Dense(8, activation=tf.nn.elu)\nlayer2 = tf.keras.layers.Dense(6, activation=tf.nn.elu)\n\nwith tf.GradientTape(persistent=True, watch_accessed_variables=False) as tape:\n    tape.watch(x)\n    y = layer1(x)\n    y = layer2(y)\n\ny.shape","298eb741":"j = tape.jacobian(y, x)\nj.shape","b3aa3383":"imshow_zero_center(j[:, 0, :, 0])\n_ = plt.title('A (batch, batch) slice')","baf277a0":"def plot_as_patches(j):\n    # \ub300\uac01\uc120\uc774 \uac01\uac01 \uc778\uc811\ud55c \uc870\uac01\uc744 \uc774\ub8e8\ub3c4\ub85d \ucd95\uc744 \uc62f\uae41\ub2c8\ub2e4.\n    j = tf.transpose(j, [1, 0, 3, 2])\n    # \uac01 \uc870\uac01 \uc0ac\uc774\uc5d0 \ube48\uacf5\uac04\uc744 \ub123\uc2b5\ub2c8\ub2e4.\n    lim = tf.reduce_max(abs(j))\n    j = tf.pad(j, [[0, 0], [1, 1], [0, 0], [1, 1]],\n              constant_values=-lim)\n    # \ub2e8\uc77c \uc774\ubbf8\uc9c0\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ubaa8\uc591\uc744 \ubc14\uafc9\ub2c8\ub2e4.\n    s = j.shape\n    j = tf.reshape(j, [s[0]*s[1], s[2]*s[3]])\n    imshow_zero_center(j, extent=[-0.5, s[2]-0.5, s[0]-0.5, -0.5])\n\nplot_as_patches(j)\n_ = plt.title('All (batch, batch) slices are diagonal')","6edda9c0":"j_sum = tf.reduce_sum(j, axis=2)\nprint(j_sum.shape)\nj_select = tf.einsum('bxby->bxy', j)\nprint(j_select.shape)","fd3071e4":"jb = tape.batch_jacobian(y, x)\njb.shape","b16d5de7":"error = tf.reduce_max(abs(jb - j_sum))\nassert error < 1e-3\nprint(error.numpy())","3855a69f":"x = tf.random.normal([7, 5])\n\nlayer1 = tf.keras.layers.Dense(8, activation=tf.nn.elu)\nbn = tf.keras.layers.BatchNormalization()\nlayer2 = tf.keras.layers.Dense(6, activation=tf.nn.elu)\n\nwith tf.GradientTape(persistent=True, watch_accessed_variables=False) as tape:\n    tape.watch(x)\n    y = layer1(x)\n    y = bn(y, training=True)\n    y = layer2(y)\n\nj = tape.jacobian(y, x)\nprint(f'j.shape: {j.shape}')","85a3eb7f":"plot_as_patches(j)\n\n_ = plt.title('These slices are not diagonal')\n_ = plt.xlabel(\"Don't use `batch_jacobian`\")","7937097c":"jb = tape.batch_jacobian(y, x)\nprint(f'jb.shape: {jb.shape}')","ab2333e6":"## \uae30\uc6b8\uae30 \uc911\uc9c0","7f5a4442":"\uc785\ub825\uc774 \uc2a4\uce7c\ub77c\ub4e0\uc9c0 \ud150\uc11c\uc774\ub4e0\uc9c0, [GradientTape.jacobian](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#jacobian)\uc740 \ubaa9\ud45c(\ub4e4)\uc758 \uac01 \uc6d0\uc18c\uc5d0 \ub300\ud574 \uc6d0\ucc9c\uc758 \uac01 \uc6d0\uc18c\uc758 \uae30\uc6b8\uae30\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0\ud569\ub2c8\ub2e4.","ffa5d051":"\uc544\ub798\ub294 \uc785\ub825 \uae30\uc6b8\uae30 \uc815\uaddc\ud654\uc758 \uc6d0\uc2dc\uc801\uc778 \uad6c\ud604\uc785\ub2c8\ub2e4. \uad6c\ud604\uc740:\n1. \uc785\ub825\uc5d0 \ub300\ud55c \ucd9c\ub825\uc758 \uae30\uc6b8\uae30\ub97c \ub0b4\ubd80 \ud14c\uc774\ud504\ub97c \uc0ac\uc6a9\ud574 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n2. \uc785\ub825 \uae30\uc6b8\uae30\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n3. \ubaa8\ub378\uc5d0 \ub300\ud574 \uadf8 \ud06c\uae30\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.","c60d0e76":"### \uc2a4\uce7c\ub77c \uc6d0\ucc9c","e844bac1":"> **\ucc38\uace0**: [\uc2e4\uc81c\ub85c \uc5ed\ud589\ub82c\uc744 \uacc4\uc0b0\ud558\uc9c0 \ub9c8\uc138\uc694](https:\/\/www.johndcook.com\/blog\/2010\/01\/19\/dont-invert-that-matrix\/).","045b89bc":"#### \uc608\uc81c: Hessian","d7857905":"\uba87\uac00\uc9c0 \uacbd\uc6b0\uc5d0\ub294, \uac01\uac01\uc758 \ubaa9\ud45c-\uc6d0\ucc9c \uc9dd\uc758 Jacobian\uc774 \ub3c5\ub9bd\uc778 \uacbd\uc6b0, \ubb34\ub354\uae30\uc758 \uc6d0\ucc9c\uc5d0 \ub300\ud574 \uac01\uac01\uc758 \ubb34\ub354\uae30\uc758 \ubaa9\ud45c\uc758 Jacobian\uc744 \uad6c\ud558\uace0 \uc2f6\uc2b5\ub2c8\ub2e4.","0f9a6d54":"\uc774 \uacbd\uc6b0\uc5d0\ub294 `batch_jacobian`\uc740 \uc5ec\uc804\ud788 \uc791\ub3d9\ud558\uace0 \uae30\ub300\ud588\ub358 \ubaa8\uc591\uc73c\ub85c _\ubb34\uc5c7\uc778\uac00_ \ub97c \ubc18\ud658\ud558\uc9c0\ub9cc, \uadf8 \ub0b4\uc6a9\uc740 \ubd84\uba85\ud558\uc9c0 \uc54a\uc740 \ub73b\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.","84454495":"\uadf8\ub9ac\uace0 \uc774 \uce35\uc758 \ucee4\ub110\uc758 \ubaa8\uc591\uc740 `(5, 10)`\uc785\ub2c8\ub2e4:\n","5c6379f6":"\uc911\uac04 \uae30\uc6b8\uae30\uc5d0 [tf.clip_by_norm](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/clip_by_norm)\uc744 \uc801\uc6a9\ud558\ub294 \uc608\uc2dc\uc785\ub2c8\ub2e4.","570e85d7":"\ub2e4\uc74c\uc744 \uba85\uc2ec\ud558\uc138\uc694:\n* `gradient`\uc640 \uc720\uc0ac: `sources` \uc778\uc790\ub294 \ud150\uc11c\ub098 \ud150\uc11c\ub97c \ub2f4\ub294 \ubcc0\uc218\uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* `gradient`\uc640 \ucc28\uc774: `target` \ud150\uc11c\ub294 \ub2e8\uc77c \ud150\uc11c\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4.","ed268aca":"> **\uc8fc\uc758**: [GradientTape.batch_jacobian](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#batch_jacobian)\uc740 \uc624\uc9c1 \uc6d0\ucc9c\uacfc \ubaa9\ud45c\uc5d0 \ub9de\ub294 \uccab\ubc88\uc9f8 \ucc28\uc6d0\ub9cc \ud655\uc778\ud569\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \ub3c5\ub9bd\uc801\uc778 \uae30\uc6b8\uae30\ub4e4\uc5d0 \ub300\ud574\uc11c \uac80\uc0ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud0c0\ub2f9\ud55c \uacbd\uc6b0\uc5d0\ub9cc `batch_jacobian`\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\ub294 \uac83\uc740 \uc0ac\uc6a9\uc790\uc5d0 \ub2ec\ub824 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 `batch` \ucc28\uc6d0\uc744 \ub530\ub77c \uc815\uaddc\ud654\ub97c \ud558\ub294 [layers.BatchNormalization](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/BatchNormalization)\uc744 \ucd94\uac00\ud558\ub294 \uac83\uc740 \ub3c5\ub9bd\uc131\uc744 \uae68\ub728\ub9bd\ub2c8\ub2e4:","60840c22":"\ub274\ud134 \ubc29\ubc95\uc758 \uac31\uc2e0 \ub2e8\uacc4\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.","acb2a449":"[\uc790\ub3d9 \ubbf8\ubd84 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/autodiff)\uc5d0\uc11c\ub294 \uae30\uc6b8\uae30 \uacc4\uc0b0 \uc911\uc5d0 \uc5b4\ub5a4 \ubcc0\uc218\uc640 \ud150\uc11c\ub4e4\uc774 \ud14c\uc774\ud504\uc5d0 \uc758\ud574 \ubcf4\uc5ec\uc9c8 \uc9c0 \uc81c\uc5b4\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.","fd50c847":"\uc774\uac83\uc740 \ubaa8\ub378\uc758 \uc911\uac04\uc5d0\uc11c \ubcf5\uc7a1\ud55c \uc5f0\uc0b0\uc744 \ubbf8\ubd84\ud558\uace0 \uc2f6\uc9c0 \uc54a\uc744 \ub54c \uc131\ub2a5\uc758 \ubd80\ud558\ub97c \uc904\uc774\ub294 \ub370\uc5d0 \uc720\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ud3c9\uac00 \uc9c0\ud45c\ub098 \uc911\uac04 \uacb0\uacfc\ub97c \uacc4\uc0b0\ud558\ub294 \uac83\ub4e4\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4:","66da0264":"`GradientTape` \ubb38\ub9e5 \uad00\ub9ac\uc790\uc758 \ub0b4\ubd80\uc758 \uc5f0\uc0b0\ub4e4\uc740 \uc790\ub3d9 \ubbf8\ubd84\uc744 \uc704\ud574 \uae30\ub85d\ub429\ub2c8\ub2e4. \uadf8 \ubb38\ub9e5 \uc548\uc5d0\uc11c \uae30\uc6b8\uae30\uac00 \uacc4\uc0b0\uc774 \ub418\uc5c8\ub2e4\uba74, \uae30\uc6b8\uae30 \uacc4\uc0b0 \ub610\ud55c \uae30\ub85d\ub429\ub2c8\ub2e4. \uadf8 \uacb0\uacfc\ub85c, \uc815\ud655\ud788 \uac19\uc740 API\uac00 \uace0\ucc28 \uae30\uc6b8\uae30\uc5d0\uc11c\ub3c4 \uc791\ub3d9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4:","02196a3a":"\uc608\ub97c \ub4e4\uc5b4, \uc774 \uce35\uc758 \ucd9c\ub825\uc740 `(10, 7)`\uc758 \ubaa8\uc591\uc744 \uac00\uc9d1\ub2c8\ub2e4:","23807a1a":"\ub274\ud134\uc758 \ubc29\ubc95 \ub2e8\uacc4\ub97c \uc0ac\uc6a9\ud574\uc11c Hessian\uc744 \uc0ac\uc6a9\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0\uc5d0\ub294, \ucd95\uc744 \ud589\ub82c\ub85c \ud3bc\uce58\uace0 \uae30\uc6b8\uae30\ub97c \ubca1\ud130\ub85c \ud3bc\uccd0\uc57c\ud569\ub2c8\ub2e4:","1280d9af":"\ud14c\uc774\ud504\ub294 \uae30\ub85d\uc744 \ub2e4\ub8e8\uae30 \uc704\ud55c \uba54\uc18c\ub4dc\ub4e4 \ub610\ud55c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.","46a3c63a":"Hessian \ud589\ub82c\uc740 \ub300\uce6d\uc801\uc774\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4:","3dfdd4f4":"\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 [tf.custom_gradient](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/custom_gradient) \ub370\ucf54\ub808\uc774\ud130\ub97c \ubcf4\uc138\uc694.","513684d0":"[tf.GradientTape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape)\uac00 Hessian \ud589\ub82c\uc744 \ub9cc\ub4e4\uae30 \uc704\ud55c \uba85\ubc31\ud55c \uba54\uc18c\ub4dc\ub97c \uc81c\uacf5\ud558\uc9c0 \uc54a\uc9c0\ub9cc, [GradientTape.jacobian](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#jacobian) \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub9cc\ub4dc\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.","207b51ae":"# \uc790\ub3d9 \ubbf8\ubd84 \uc2ec\ud654","9c901eda":"\uc77c\ubd80 \uacbd\uc6b0\uc5d0\ub294, \uae30\ubcf8\uc744 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0 \uae30\uc6b8\uae30\uac00 \uc5b4\ub5bb\uac8c \uacc4\uc0b0\ub418\ub294\uc9c0 \uc815\ud655\ud558\uac8c \uc81c\uc5b4\ud558\uace0 \uc2f6\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc0c1\ud669\ub4e4\uc740 \ub2e4\uc74c\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4:\n* \uc801\uace0 \uc788\ub294 \uc0c8\ub85c\uc6b4 \uc5f0\uc0b0\uc5d0 \ub300\ud55c \uc815\uc758\ub41c \uae30\uc6b8\uae30\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\n* \uae30\ubcf8\uc801\uc778 \uacc4\uc0b0\uc774 \uc218\uce58\uc801\uc73c\ub85c \ubd88\uc548\uc815\ud569\ub2c8\ub2e4.\n* \uc815\uc0c1\ud30c\uc5d0\uc11c\uc758 \uace0\ube44\uc6a9\uc758 \uacc4\uc0b0\uc744 \uce90\uc2f1\ud558\uace0 \uc2f6\uc2b5\ub2c8\ub2e4.\n* (\uc608\ub97c \ub4e4\uc5b4: [tf.clip_by_value](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/clip_by_value), [tf.math.round](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/math\/round)\ub97c \uc0ac\uc6a9\ud558\uc5ec) \uae30\uc6b8\uae30\ub97c \ubc14\uafb8\uc9c0 \uc54a\uace0 \uac12\uc744 \ubcc0\ud654\uc2dc\ud0a4\uace0 \uc2f6\uc2b5\ub2c8\ub2e4.","14cc3b86":"\uc0c8\ub85c\uc6b4 \uc5f0\uc0b0\uc744 \uc791\uc131\ud558\ub294 \uacbd\uc6b0\uc5d0\ub294, \uc9c1\uc811 \uc124\uc800\ud558\uae30 \uc704\ud574 [tf.RegisterGradient](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RegisterGradient)\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc774 \ud398\uc774\uc9c0\ub97c \ubcf4\uc138\uc694. (\uae30\uc6b8\uae30 \uc800\uc7a5\uc18c\ub294 \uc804\uc5ed\uc801\uc774\ub77c\ub294 \uac83\uc744 \uba85\uc2ec\ud558\uace0, \uadf8\ub7ec\ubbc0\ub85c \uc8fc\uc758\ub97c \uac00\uc9c0\uace0 \ubc14\uafb8\uc138\uc694.)","3d436e4d":"### \ud150\uc11c \uc6d0\ucc9c","2bc90c54":"\uc608\ub97c \ub4e4\uc5b4, \uc5ec\uae30 \uc785\ub825 `x`\ub294 `(batch, ins)`\uc758 \ubaa8\uc591\uc774\uace0 \ucd9c\ub825 `y`\ub294 `(batch, outs)`\uc758 \ubaa8\uc591\uc785\ub2c8\ub2e4.","5d798a54":"\ubaa9\ud45c\uc758 \ucc28\uc6d0\ub4e4 \uc704\uc5d0\uc11c \ub354\ud55c\ub2e4\uba74, [GradientTape.gradient](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#gradient)\uc5d0\uc11c \uacc4\uc0b0\ub418\uc5b4\uc9c8 \ud569\uc758 \uae30\uc6b8\uae30\uac00 \ub0a8\uaca8\uc9d1\ub2c8\ub2e4:","22af7e8e":"`x`\uc5d0 \ub300\ud55c `y`\uc758 \uc804\uccb4 Jacobian\uc740, `(batch, ins, outs)`\ub97c \uc6d0\ud568\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, `(batch, ins, batch, outs)`\uc758 \ubaa8\uc591\uc744 \uac00\uc9d1\ub2c8\ub2e4.","11f2373c":"\uc704\uc5d0\uc11c\uc758 \uc804\ubc18\uc801\uc778 \ud14c\uc774\ud504 \uc81c\uc5b4\uc5d0 \ub300\uc870\ub418\uac8c, [tf.stop_gradient](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/stop_gradient) \ud568\uc218\ub294 \ud6e8\uc52c \ub354 \uc815\ubc00\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \ud14c\uc774\ud504 \uc790\uccb4\uc5d0 \uc811\uadfc\ud560 \ud544\uc694 \uc5c6\uc774, \ud2b9\uc815\ud55c \uacbd\ub85c\ub97c \ub530\ub77c \ud750\ub974\ub294 \uae30\uc6b8\uae30\ub4e4\uc744 \uba48\ucd94\ub294 \ub370\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","99e768cc":"\ucc98\uc74c\uc5d0 \ucd94\uac00\uc801\uc778 \ucc28\uc6d0 \uc5c6\uc774 \uacc4\uc0b0\uc744 \ud588\ub2e4\uba74 \ud6e8\uc52c \ub354 \ud6a8\uc728\uc801\uc774\uc5c8\uc744 \uac81\ub2c8\ub2e4. [GradientTape.batch_jacobian](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#batch_jacobian) \uba54\uc18c\ub4dc\uac00 \uc815\ud655\ud788 \uadf8 \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","db1e3fcc":"\"\uc911\ucca9\ub41c [GradientTape.gradient](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#gradient) \ud638\ucd9c\"\uc740 \uae30\uc6b8\uae30\ub85c\ubd80\ud130 \uc2a4\uce7c\ub77c\ub97c \uacc4\uc0b0\ud558\ub294 \ub54c\uc5d0\ub294 \uc88b\uc740 \uc591\uc2dd\uc774\uba70, \uadf8 \uacb0\uacfc \uc2a4\uce7c\ub77c\ub294 \ub2e4\uc74c\uc758 \uc608\uc81c\uc640 \uac19\uc774 \uc774\ucc28 \uae30\uc6b8\uae30 \uacc4\uc0b0\uc5d0\uc11c\uc640 \uac19\uc774 \ud589\ub3d9\ud560 \uac83\uc785\ub2c8\ub2e4.","14e7ab37":"## \uc124\uc815","fcc1d3d7":"### \uace0\ucc28 \uae30\uc6b8\uae30","a28c1aa3":"[\uc790\ub3d9 \ubbf8\ubd84 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/autodiff)\ub294 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud558\ub294\ub370\uc5d0 \ud544\uc694\ud55c \ubaa8\ub4e0 \uac83\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \uc774 \uac00\uc774\ub4dc\ub294 [tf.GradientTape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape) api\uc758 \ub354 \uae4a\uace0 \ub35c \ud754\ud55c \uae30\ub2a5\ub4e4\uc5d0 \uc9d1\uc911\ud569\ub2c8\ub2e4.","bb8406ee":"[Jacobian \ud589\ub82c](https:\/\/en.wikipedia.org\/wiki\/Jacobian_matrix_and_determinant)\uc740 \ubca1\ud130\uac12 \ud568\uc218\uc758 \uae30\uc6b8\uae30\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uac01 \ud589\uc740 \ubca1\ud130\uc758 \uc6d0\uc18c \uc911\uc758 \ud558\ub098\uc758 \uae30\uc6b8\uae30\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4.","b9fab0f3":"## \ub2e4\uc911 \ud14c\uc774\ud504","4f087ddc":"### \ubb36\uc74c Jacobian","c88f1279":"\ub9ce\uc740 \ubaa8\ub378\ub4e4\uc740 \"\ub300\ub9bd\uc801\uc778 \uc608\uc81c\"\uc5d0 \ubbfc\uac10\ud569\ub2c8\ub2e4. \uc774 \uae30\ubc95\ub4e4\uc758 \ubaa8\uc74c\uc740 \ubaa8\ub378\uc758 \uc785\ub825\uc744 \ubaa8\ub378\uc758 \ucd9c\ub825\uacfc \ud63c\ub780\uc2a4\ub7fd\uac8c \ud558\uae30 \uc704\ud574 \uc218\uc815\ud569\ub2c8\ub2e4. [\uac00\uc7a5 \uac04\ub2e8\ud55c \uad6c\ud604](https:\/\/www.tensorflow.org\/tutorials\/generative\/adversarial_fgsm)\uc740 \uc785\ub825\uc5d0 \ub300\ud55c \ucd9c\ub825\uc758 \uae30\uc6b8\uae30\ub97c \ub530\ub77c \ud558\ub098\uc758 \uc870\uce58\ub97c \ucde8\ud569\ub2c8\ub2e4; \"\uc785\ub825 \uae30\uc6b8\uae30\"\uc785\ub2c8\ub2e4.","286b8ac2":"\uc804\uccb4\uc801\uc73c\ub85c \ub2e4\uc2dc \uc2dc\uc791\ud558\uace0 \uc2f6\ub2e4\uba74 `reset()`\uc744 \uc0ac\uc6a9\ud558\uc138\uc694. \uac04\ub2e8\ud558\uac8c \uae30\uc6b8\uae30 \ud14c\uc774\ud504 \uad6c\uc5ed\uc744 \ub098\uac00\uace0 \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \uac83\uc774 \uc8fc\ub85c \uc77d\uae30\uc5d0 \ub354 \uc27d\uc9c0\ub9cc, \ud14c\uc774\ud504 \uad6c\uc5ed\uc744 \ub098\uac00\ub294 \uac83\uc774 \uc5b4\ub835\uac70\ub098 \ubd88\uac00\ub2a5\ud55c \ub54c\uc5d0 `reset`\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","5ad37236":"## \uae30\uc6b8\uae30 \uae30\ub85d \uc81c\uc5b4","e4d7291a":"\uc774\uc804\uc758 \ubaa8\ub4e0 \uc608\uc81c\ub4e4\uc740 \uc5b4\ub5a4 \uc6d0\ucc9c \ud150\uc11c(\ub4e4)\uc5d0 \ub300\ud574 \uc2a4\uce7c\ub77c \ubaa9\ud45c\uc758 \uae30\uc6b8\uae30\ub97c \uac00\uc838\uc654\uc2b5\ub2c8\ub2e4.","4b46473c":"> **\ucc38\uace0**: Hessian \ud589\ub82c\uc740 `N**2`\uac1c\uc758 \ub9e4\uac1c \ubcc0\uc218\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4. \uc774\uac83\uacfc \ub2e4\ub978 \uc774\uc720\ub4e4 \ub54c\ubb38\uc5d0 \ub300\ubd80\ubd84\uc758 \ubaa8\ub378\uc5d0\ub294 \uc2e4\uc6a9\uc801\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \uc608\uc81c\ub294 `GradientTape.jacobian` \uba54\uc18c\ub4dc\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0\uc5d0 \ub300\ud55c \ub354 \ub9ce\uc740 \uc124\uba85\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uace0, \uc9c1\uc811\uc801\uc778 Hessian \uae30\ubc18\uc758 \ucd5c\uc801\ud654\ub294 \ubcf4\uc7a5\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Hessian\uacfc \ubca1\ud130\uc758 \uacf1\uc740 [\uc911\ucca9\ub41c \ud14c\uc774\ud504\ub97c \uc774\uc6a9\ud574 \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/python\/eager\/benchmarks\/resnet50\/hvp_test.py)\ub420 \uc218 \uc788\uace0, \uc774\uacc4\ub3c4 \ucd5c\uc801\ud654\ub85c\uc758 \uc811\uadfc\ubcf4\ub2e4 \ud6e8\uc52c \ub354 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.","baa3c0e6":"\uc6d0\ud558\ub294 \uacb0\uacfc\ub97c \uad6c\ud558\uae30 \uc704\ud574 \ub611\uac19\uc740 `batch` \ucc28\uc6d0 \uc704\uc5d0\uc11c \ub354\ud558\uac70\ub098 [tf.einsum](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/einsum)\uc744 \uc0ac\uc6a9\ud574 \ub300\uac01\uc120\uc744 \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","1d3d0a1a":"\ucee4\ub110\uc5d0 \ub300\ud55c \ucd9c\ub825\uc758 Jacobian\uc758 \ubaa8\uc591\uc740 \uc774 \ub450 \ubaa8\uc591\uc774 \ud569\uccd0\uc9c4 \uac83\uc785\ub2c8\ub2e4:","32f5ba67":"\ubb34\ub354\uae30 \uc548\uc5d0 \uc788\ub294 \uac01 \ud56d\ubaa9\uc758 \uae30\uc6b8\uae30\uac00 \ub3c5\ub9bd\uc774\ub77c\uba74, \uc774 \ud150\uc11c\uc758 \ubaa8\ub4e0 `(batch, batch)` \uc870\uac01\uc740 \ub300\uac01\ud589\ub82c\uc785\ub2c8\ub2e4:","2e47f4b8":"\ub4a4\uc758 \uc138\uac00\uc9c0 \uacbd\uc6b0\uc5d0\ub294 [tf.custom_gradient](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/custom_gradient)\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","f454a3d8":"\ub300\ub9bd\uc801\uc778 \uc608\uc81c\ub85c\uc758 \ud0c4\ud0c4\ud568\uc744 \uc99d\uac00\uc2dc\ud0a4\uae30 \uc704\ud55c \ud558\ub098\uc758 \uae30\ubc95\uc740 [\uc785\ub825 \uae30\uc6b8\uae30 \uc815\uaddc\ud654](https:\/\/arxiv.org\/abs\/1905.11468)\ub85c, \uc785\ub825 \uae30\uc6b8\uae30\uc758 \ud06c\uae30\ub97c \ucd5c\uc18c\ud654\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. \uc785\ub825 \uae30\uc6b8\uae30\uac00 \uc791\ub2e4\uba74, \ucd9c\ub825\uc5d0\uc11c\uc758 \ubcc0\ud654\ub3c4 \uc791\uc544\uc9c8 \uac83\uc785\ub2c8\ub2e4.","34b5a665":"## Jacobian","ce4f519f":"## \uac1c\uc778\ud654\ub41c \uae30\uc6b8\uae30","8fe307d5":"\uc774\uac83\uc740 _\uc2a4\uce7c\ub77c_ \ud568\uc218\uc758 \uc774\ucc28 \ub3c4\ud568\uc218\ub97c \uc8fc\uae30 \ub54c\ubb38\uc5d0, \uc774 \uc591\uc2dd\uc740 [GradientTape.gradient](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#gradient)\uac00 \uc2a4\uce7c\ub77c\uc758 \uae30\uc6b8\uae30\ub9cc \uacc4\uc0b0\ud558\uae30 \ub54c\ubb38\uc5d0 Hessian \ud589\ub82c\uc744 \ub9cc\ub4e4\uc5b4\ub0b4\uae30 \uc704\ud574 \uc77c\ubc18\ud654\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Hessian\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294, [Jacobian \uc808](https:\/\/www.tensorflow.org\/guide\/advanced_autodiff#jacobians)\uc5d0\uc11c [Hessian \uc608\uc2dc](https:\/\/www.tensorflow.org\/guide\/advanced_autodiff#hessian)\ub97c \ubcf4\uc138\uc694.","62f9229e":"\uc2a4\uce7c\ub77c\uc5d0 \ub300\ud574 Jacobian\uc744 \uad6c\ud558\uac8c \ub418\uba74 \uacb0\uacfc\ub294 **\ubaa9\ud45c**\uc758 \ubaa8\uc591\uc744 \uac00\uc9c0\uac8c \ub418\uace0, \uc6d0\ucc9c\uc5d0 \ub300\ud574 \uac01 \uc6d0\uc18c\uc758 \uae30\uc6b8\uae30\ub97c \ub118\uaca8\uc90d\ub2c8\ub2e4:","252d551b":"\uae30\uc6b8\uae30\ub97c \uae30\ub85d\ud558\ub294 \uac83\uc744 \uba48\ucd94\uace0 \uc2f6\ub2e4\uba74, \uc77c\uc2dc\uc801\uc73c\ub85c \uae30\ub85d\uc744 \uc720\uc608\ud558\uae30 \uc704\ud574\uc11c [GradientTape.stop_recording()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#stop_recording)\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","63d464ac":"[GradientTape.jacobian](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape#jacobian) \uba54\uc18c\ub4dc\ub294 Jacobian \ud589\ub82c\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4.","7ed24710":"\uc5ec\ub7ec\uac1c\uc758 \ud14c\uc774\ud504\ub294 \ub9e4\ub044\ub7fd\uac8c \uc0c1\ud638\uc791\uc6a9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5ec\uae30\uc11c \uac01 \ud14c\uc774\ud504\ub294 \ub2e4\ub978 \uc9d1\ud569\uc758 \ud150\uc11c\ub97c \ubcf4\uace0 \uc788\uc2b5\ub2c8\ub2e4:","2b587145":"\uccab \uc608\uc81c\ucc98\ub7fc, \uc2a4\uce7c\ub77c \uc6d0\ucc9c\uc5d0 \ub300\ud55c \ubca1\ud130 \ubaa9\ud45c\uc758 Jacobian\uc785\ub2c8\ub2e4.","fa05070a":"#### \uc608\uc81c: \uc785\ub825 \uae30\uc6b8\uae30 \uc815\uaddc\ud654","4fe7be4a":"\uc774\uac83\uc740 [tf.Variable](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Variable)\uc5d0 \ub300\ud574 \uc0c1\ub300\uc801\uc73c\ub85c \uac04\ub2e8\ud558\uc9c0\ub9cc, \ub2e8\uc21c\ud558\uc9c0 \uc54a\uc740 \ubaa8\ub378\uc5d0 \uc774\ub97c \uc801\uc6a9\uc2dc\ud0a4\ub294 \uac83\uc740 \uc5ec\ub7ec \ubcc0\uc218 \uc0ac\uc774\uc5d0\uc11c \uc804\uccb4 Hessian\uc744 \ub9cc\ub4e4\uc5b4\ub0b4\uae30 \uc704\ud574 \uc870\uc2ec\uc2a4\ub7ec\uc6b4 \ubd99\uc784\uacfc \uc870\uac01\ub0b4\uae30\uac00 \ud544\uc694\ud569\ub2c8\ub2e4."}}