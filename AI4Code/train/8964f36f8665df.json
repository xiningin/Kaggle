{"cell_type":{"ae5bfe82":"code","f3e4885d":"code","d24ffd72":"code","a8d93977":"code","2b247bf7":"code","783e6f05":"code","343a6d09":"code","98b17e9e":"code","5d304ad9":"code","d85e0c1f":"code","ce9b7f3b":"code","d0a62a27":"code","54f485c5":"markdown","4b9629f9":"markdown","13dd64d7":"markdown"},"source":{"ae5bfe82":"!pip install -q wandb\n!pip install -q fastparquet","f3e4885d":"!wandb --version","d24ffd72":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.utils import np_utils\nfrom keras.utils.np_utils import to_categorical\nfrom keras.datasets import cifar10\nfrom keras.datasets import mnist\nimport glob\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport imageio as im\n\n# Load MNIST\n(X_train_val, Y_train_val), (X_test, Y_test) = mnist.load_data()\n\n# Data Prep\nX_train_val = X_train_val \/ 255.0\nX_test = X_test \/ 255.0\nX_train_val = X_train_val.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)\nY_train_val = to_categorical(Y_train_val, num_classes = 10)\nannealer = keras.callbacks.LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x, verbose=0)\nstyles=[':','-.','--','-',':','-.','--','-',':','-.','--','-']\n\n# WandB\nimport wandb\nfrom wandb.keras import WandbCallback\n# You can change your project name here. For more config options, see https:\/\/docs.wandb.com\/docs\/init.html\nwandb.init(project=\"building-neural-nets\", name=\"mnist\")\nlabels=[str(i) for i in range(10)]\n\n# Go to https:\/\/app.wandb.ai\/authorize to get your WandB key","a8d93977":"# Log Images\nwandb.log({\"summary_table\": wandb.Html('<img src=\"https:\/\/lumos642.files.wordpress.com\/2019\/08\/summary_table-8.png\" width=\"100%\">')})\nwandb.log({\"activation_map\": wandb.Html('<img src=\"https:\/\/lumos642.files.wordpress.com\/2019\/08\/activation_map-4.png\" width=\"100%\">')})\nwandb.log({\"misclassified_activation_map\": wandb.Html('<img src=\"https:\/\/lumos642.files.wordpress.com\/2019\/08\/misclassified_activation_map-1.png\" width=\"100%\">')})\nwandb.log({\"feature_maps_4\": wandb.Html('<img src=\"https:\/\/lumos642.files.wordpress.com\/2019\/08\/4.png\" width=\"100%\">')})\nwandb.log({\"feature_maps_5\": wandb.Html('<img src=\"https:\/\/lumos642.files.wordpress.com\/2019\/08\/5.png\" width=\"100%\" width=\"100%\">')})\nwandb.log({\"feature_maps_8\": wandb.Html('<img src=\"https:\/\/lumos642.files.wordpress.com\/2019\/08\/8.png\" width=\"100%\">')})","2b247bf7":"nets = 1\nmodel = [0] *nets\n\n# Define model architecture\nj=0\nmodel[j] = keras.models.Sequential()\nmodel[j].add(keras.layers.Conv2D(32,kernel_size=3,activation='relu',input_shape=(28,28,1)))\nmodel[j].add(keras.layers.BatchNormalization())\nmodel[j].add(keras.layers.Conv2D(32,kernel_size=3,activation='relu'))\nmodel[j].add(keras.layers.BatchNormalization())\nmodel[j].add(keras.layers.Conv2D(32,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel[j].add(keras.layers.BatchNormalization())\nmodel[j].add(keras.layers.Dropout(0.4))\n\nmodel[j].add(keras.layers.Conv2D(64,kernel_size=3,activation='relu'))\nmodel[j].add(keras.layers.BatchNormalization())\nmodel[j].add(keras.layers.Conv2D(64,kernel_size=3,activation='relu'))\nmodel[j].add(keras.layers.BatchNormalization())\nmodel[j].add(keras.layers.Conv2D(64,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel[j].add(keras.layers.BatchNormalization())\nmodel[j].add(keras.layers.Dropout(0.4))\n\nmodel[j].add(keras.layers.Flatten())\nmodel[j].add(keras.layers.Dense(128, activation='relu'))\nmodel[j].add(keras.layers.BatchNormalization())\nmodel[j].add(keras.layers.Dropout(0.4))\nmodel[j].add(keras.layers.Dense(10, activation='softmax'))\n\nmodel[j].compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","783e6f05":"%%wandb\n# Train model\nX_train, X_val, Y_train, Y_val = train_test_split(X_train_val, Y_train_val, test_size = 0.2)\nhistory = [0] * nets\nepochs = 30\n\nj=0\nhistory[j] = model[j].fit(X_train,Y_train, batch_size=64, epochs = epochs,  \n    validation_data = (X_val,Y_val), verbose=0,\n    callbacks=[WandbCallback(validation_data=(X_val,Y_val), input_type=\"image\", output_type=\"label\",\n                             log_evaluation=True, labels=[str(i) for i in range(10)])])","343a6d09":"# Extract the outputs of the layers\nlayer_outputs = [layer.output for layer in model[j].layers]\nactivation_model = keras.models.Model(inputs=model[j].input, outputs=layer_outputs)","98b17e9e":"# Get instance to plot activations for\nimg_tensor = X_val[4:5]\nimg_tensor.shape","5d304ad9":"activations = activation_model.predict(img_tensor)","d85e0c1f":"first_layer_activation = activations[0]\nprint(first_layer_activation.shape)","ce9b7f3b":"plt.matshow(first_layer_activation[0, :, :, 4], cmap='viridis')","d0a62a27":"# Create activation maps for all layers\nclassifier = model[j]\nlayer_names = []\nfor layer in classifier.layers[:12]:\n    layer_names.append(layer.name)\n    \nimages_per_row = 16\n\nfor layer_name, layer_activation in zip(layer_names, activations):\n    n_features = layer_activation.shape[-1]\n    size = layer_activation.shape[1]\n    n_cols = n_features \/\/ images_per_row\n    display_grid = np.zeros((size * n_cols, images_per_row * size))\n    for col in range(n_cols):\n        for row in range(images_per_row):\n            channel_image = layer_activation[0,\n                                             :, :,\n                                             col * images_per_row + row]\n            channel_image -= channel_image.mean()\n            channel_image \/= channel_image.std()\n            channel_image *= 64\n            channel_image += 128\n            channel_image = np.clip(channel_image, 0, 255).astype('uint8')\n            display_grid[col * size : (col + 1) * size, # Displays the grid\n                         row * size : (row + 1) * size] = channel_image\n    scale = 1. \/ size\n    plt.figure(figsize=(scale * display_grid.shape[1],\n                        scale * display_grid.shape[0]))\n    plt.title(layer_name)\n    plt.grid(False)\n    plt.imshow(display_grid, aspect='auto', cmap='viridis')\n    plt.savefig('img.png')","54f485c5":"# Intermediate Activations","4b9629f9":"## Testing out one activation map","13dd64d7":"## Create activation maps for all layers"}}