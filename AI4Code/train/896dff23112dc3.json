{"cell_type":{"60e750b8":"code","65341817":"code","6e1dee14":"code","96479030":"code","5526576c":"code","c69ab1f5":"code","fb031051":"code","7833b7fb":"code","d2f81180":"code","ba46796a":"code","2efb6618":"code","57e72e7b":"code","df05e4fd":"code","909583e8":"code","db7fd722":"code","08872083":"code","45a75c25":"code","06563d85":"code","03666f89":"code","93091758":"code","0bc9e00d":"markdown","583bacab":"markdown","7c28a91e":"markdown","8e66971a":"markdown","d37b67d4":"markdown","2d6acaa7":"markdown","8bb947e2":"markdown","d932eae9":"markdown","1553cabb":"markdown","7e257dfd":"markdown","9c5868e0":"markdown","292ffc15":"markdown","0e783c11":"markdown","20f10196":"markdown","b086955c":"markdown","96981e23":"markdown","6f87d33b":"markdown","451f19ff":"markdown","ca668013":"markdown","564fc159":"markdown","22f8e744":"markdown","3beea30e":"markdown","b1d69ac4":"markdown","508a7ebe":"markdown","4092c501":"markdown","c3d8a3a4":"markdown","8b97d0f1":"markdown","ed96efdf":"markdown","272dfd9d":"markdown","b905fa0d":"markdown","18dd140e":"markdown"},"source":{"60e750b8":"import numpy as np\nimport pandas as pd \npd.set_option(\"display.max_columns\", 100)\n\nimport warnings\nwarnings.filterwarnings(action='ignore')\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import r2_score , classification_report# precision_score, recall_score, accuracy_score\n# , f1_score, confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier","65341817":"adult = pd.read_csv('..\/input\/adult-income-dataset\/adult.csv')\n# adult = pd.read_csv('adult.csv')\nprint(adult.shape)\nadult.head(5)","6e1dee14":"for col in adult.columns.to_list():\n    if len(adult[col].value_counts().sort_values())<20:\n        print(f'____________ {col} ____________')\n        print(adult[col].value_counts())\n        print('\\n')","96479030":"adult.info()","5526576c":"adult.describe().T","c69ab1f5":"adult.info()","fb031051":"numdf = adult.select_dtypes(include=['number'])\nnumdf","7833b7fb":"for col in numdf.columns:\n    print(\"________\",col,\"________\")\n#     sns.boxplot(data=numdf,x=col);\n#     plt.show();\n    sns.distplot(numdf[col]);\n    plt.show();\n    print('\\n')","d2f81180":"objdf = adult.select_dtypes(include=['object'])\nobjdf","ba46796a":"for col in objdf.columns:\n    print(\"________\",col,\"________\")\n#     sns.boxplot(data=numdf,x=col);\n#     plt.show();\n    plt.figure(figsize= (10,6))\n    sns.countplot(objdf[col] ,order = objdf[col].value_counts().index);\n    plt.xticks(rotation=45)\n    plt.show();\n    print('\\n')","2efb6618":"adult.drop_duplicates(inplace=True)","57e72e7b":"train, test = train_test_split(adult, test_size=0.2,random_state=9110)","df05e4fd":"train.isnull().sum()","909583e8":"covtoNA_train = train.copy()\ncovtoNA_test = test.copy()\n\ncovtoNA_train.replace('?',np.nan,inplace=True)\ncovtoNA_test.replace('?',np.nan,inplace=True)\n\ncovtoNA_train.isnull().sum()","db7fd722":"droped_train = covtoNA_train.copy()\ndroped_test = covtoNA_test.copy()\n\ndroped_train.dropna(inplace=True)\ndroped_test.dropna(inplace=True)","08872083":"replaced_test = train.copy()\nreplaced_train = test.copy()\nfor col in [ 'workclass' ,'occupation' , 'native-country']:\n    replaced_test[col].replace('?',replaced_test[col].mode()[0],inplace=True)\n    replaced_train[col].replace('?',replaced_test[col].mode()[0],inplace=True)","45a75c25":"dataFrames =[train,test]\ntrain = pd.get_dummies(pd.concat(dataFrames,axis = 0), drop_first=True)[ : dataFrames[0].shape[0]]\ntest = pd.get_dummies(pd.concat(dataFrames,axis = 0), drop_first=True)[ dataFrames[0].shape[0] : ]\n\ndataFrames =[covtoNA_train,covtoNA_test]\ncovtoNA_train = pd.get_dummies(pd.concat(dataFrames,axis = 0), drop_first=True)[ : dataFrames[0].shape[0]]\ncovtoNA_test = pd.get_dummies(pd.concat(dataFrames,axis = 0), drop_first=True)[ dataFrames[0].shape[0] : ]\n\ndataFrames =[droped_train,droped_test]\ndroped_train = pd.get_dummies(pd.concat(dataFrames,axis = 0), drop_first=True)[ : dataFrames[0].shape[0]]\ndroped_test = pd.get_dummies(pd.concat(dataFrames,axis = 0), drop_first=True)[ dataFrames[0].shape[0] : ]\n\ndataFrames =[replaced_train,replaced_test]\nreplaced_train = pd.get_dummies(pd.concat(dataFrames,axis = 0), drop_first=True)[ : dataFrames[0].shape[0]]\nreplaced_test = pd.get_dummies(pd.concat(dataFrames,axis = 0), drop_first=True)[ dataFrames[0].shape[0] : ]","06563d85":"from sklearn.model_selection import GridSearchCV\nmodel = DecisionTreeClassifier(random_state = 9110)\nparam_grid = {'max_depth': [*range(6,11)],'criterion':['gini', 'entropy']}\n\nprint(\"Classification where leave them as ?\")\nX = train.iloc[:, :-1]\ny = train.iloc[:, -1]\nGS = GridSearchCV(model,param_grid,n_jobs=-1,cv=5).fit(X, y)\nprint(GS.best_params_)\nprint(GS.best_score_)\n\nprint(\"____________________________________________________\")\nprint(\"Classification where convert ? to NA\")\nX = covtoNA_train.iloc[:, :-1].values\ny = covtoNA_train.iloc[:, -1].values\nGS = GridSearchCV(model,param_grid,n_jobs=-1,cv=5).fit(X, y)\nprint(GS.best_params_)\nprint(GS.best_score_)\n\nprint(\"____________________________________________________\")\nprint(\"Classification where drop the na values (?)\")\nX = droped_train.iloc[:, :-1]\ny = droped_train.iloc[:, -1]\nGS = GridSearchCV(model,param_grid,n_jobs=-1,cv=5).fit(X, y)\nprint(GS.best_params_)\nprint(GS.best_score_)\n\nprint(\"____________________________________________________\")\nprint(\"Classification where replace ? with mode\")\nX = replaced_train.iloc[:, :-1]\ny = replaced_train.iloc[:, -1]\nGS = GridSearchCV(model,param_grid,n_jobs=-1,cv=5).fit(X, y)\nprint(GS.best_params_)\nprint(GS.best_score_)","03666f89":"print(\"Classification where leave them as ?\")\nX = train.iloc[:, :-1].values\ny = train.iloc[:, -1].values\nGS = GridSearchCV(model,param_grid,n_jobs=-1,cv=5).fit(X, y)\nfinal_model = GS.best_estimator_\nfinal_model.fit(X,y)\ny_pred_test = final_model.predict(test.iloc[:, :-1])\nprint(classification_report( test.iloc[:, -1],y_pred_test))","93091758":"X = train.iloc[:, :-1].values\ny = train.iloc[:, -1].values\n\nmodel = GradientBoostingClassifier(max_depth=5, n_estimators=300, random_state=9110)\nmodel.fit(X, y)\n# param_grid = {'n_estimators':[300,400],'max_depth': [5,6]\n#               ,'learning_rate':[0.01,0.1]}\n\n# GS = GridSearchCV(model,param_grid,n_jobs=-1,cv=5).fit(X, y)\ny_pred_test = model.predict(test.iloc[:, :-1])\nprint('Train score: ', GS.best_score_)\nprint(classification_report( test.iloc[:, -1],y_pred_test))","0bc9e00d":"##   1.[Import and reading the Data Section](#imports)","583bacab":"best approach was to replace them with nan though the results are very very identical i dint think it matter that much \n","7c28a91e":"#### 3.4.3.[Data Scaling ](#scaling) ","8e66971a":"| column             | Vlaues                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| \u00a0\u00a0\u00a0 workclass      | \u00a0Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked.                                                                                                                                                                                                                                                                                                                          |\n| \u00a0\u00a0\u00a0 education      | \u00a0Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool.                                                                                                                                                                                                                                                                          |\n| \u00a0\u00a0\u00a0 marital-status | \u00a0Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse.                                                                                                                                                                                                                                                                                                                      |\n| \u00a0\u00a0\u00a0 occupation     | \u00a0Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces.                                                                                                                                                                                                       |\n| \u00a0\u00a0\u00a0 relationship   | \u00a0Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried.                                                                                                                                                                                                                                                                                                                                                             |\n| \u00a0\u00a0\u00a0 race           | \u00a0White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black.                                                                                                                                                                                                                                                                                                                                                                    |\n| \u00a0\u00a0\u00a0 sex            | \u00a0Female, Male.                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| \u00a0\u00a0\u00a0 native-country | \u00a0United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands. |\n| \u00a0\u00a0\u00a0 class          | \u00a0>50K, <=50K                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| \u00a0\u00a0\u00a0 age            | \u00a0continuous.                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| \u00a0\u00a0\u00a0 fnlwgt         | \u00a0continuous.  weigt of the observation                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| \u00a0\u00a0\u00a0 education-num  | \u00a0continuous.                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| \u00a0\u00a0\u00a0 capital-gain   | \u00a0continuous.                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| \u00a0\u00a0\u00a0 capital-loss   | \u00a0continuous.                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| \u00a0\u00a0\u00a0 hours-per-week | \u00a0continuous.                                                                                                                                                                                                                                                                                                                                                                                                                     |","d37b67d4":"## 4.[Modeling](#Models)","2d6acaa7":"###  3.3.[Remove Out liers and irelevent Data](#outliers)","8bb947e2":"![image.png](attachment:5db631fa-a70c-435d-ad3c-f2c095d01b52.png)","d932eae9":"### 3.6.[Feature Engineering](#Feature_Engineering)","1553cabb":"#### 3.1.1.[Numarics Na Valus](#NNA) ","7e257dfd":"# Contnet <a id='Jump'><\/a>\n##   1.[Import and reading the Data Section](#imports)\n---\n##   2.[Exploration](#EDA)<br>\n###  2.1.[Numarical EDA](#NEDA) \n###  2.2.[Categorical EDA](#QEDA) \n---\n##   3.[DataPreprocess](#preprocess)\n\n###  <br>3.1.[Clean NA values](#NA)\n#### 3.1.1.[Numarics Na Valus](#NNA) \n#### 3.1.2.[NON Numarics Na Valus](#NONNA)\n\n###  <br>3.2.[Remove Out liers and irelevent Data](#outliers)\n\n###  <br>3.3.[Clean Duplication](#Duplication)\n\n###  <br>3.4.[Convert DataTypes ](#Convert)\n\n###  <br>3.5.[Encoding And Scalling](#Encoding_Scaling)\n#### 3.4.1.[ordinal Encoding](#ordinal)\n#### 3.4.2.[One-Hot Encoding](#One_Hot)\n#### 3.4.3.[Data Scaling ](#scaling) \n\n### <br>3.6.[Feature Engineering](#Feature_Engineering)\n\n---\n## 4.[Modeling](#Models)<br>\n\n### 4.1[KNN](#KNN)\n\n---\n## 5.[Submission](#Submission)","9c5868e0":"other algorithms try out ","292ffc15":"most of the data cant be ordinal ","0e783c11":"### 3.5.[Encoding And Scalling](#Encoding_Scaling)","20f10196":"###  3.1.[Clean Duplication](#Duplication)","b086955c":"    1- convert it to NA > covtoNA \n    2- drop the na values > droped\n    3- replace with mode  > replaced\n    4- leave as it is > train test","96981e23":"### 3.2.[Clean NA values](#NA)","6f87d33b":"#### 3.1.2.[NON Numarics Na Valus](#NONNA)","451f19ff":"i will skip this now","ca668013":"No Numaric NA","564fc159":"###  2.2.[Categorical EDA](#QEDA) ","22f8e744":"Use decision tree to predict the outcome of the following dataset\n","3beea30e":"for columns workclass ,occupation , native-country i have three aproch wanna try \n    \n    1- convert it to NA > covtoNA \n    2- drop the na values > droped\n    3- replace with mode  > replaced\n    4- leave as it is > train test\n    ","b1d69ac4":"###  2.1.[Numarical EDA](#NEDA) ","508a7ebe":"##   3.[DataPreprocess](#preprocess)","4092c501":"#### 3.4.2.[One-Hot Encoding](#One_Hot)","c3d8a3a4":"#### 3.4.1.[ordinal Encoding](#ordinal)","8b97d0f1":"class sklearn.tree.DecisionTreeClassifier(*, criterion='gini', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None, ccp_alpha=0.0)","ed96efdf":"split the data","272dfd9d":"### 3.4.[Convert DataTypes ](#Convert)","b905fa0d":"##   2.[Exploration](#EDA)","18dd140e":"No Need"}}