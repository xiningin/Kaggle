{"cell_type":{"d1854e7d":"code","19c81955":"code","2d07e911":"code","6cf5c01c":"code","42e9fdff":"code","c4440e26":"code","88e82bd1":"code","8ce017fd":"code","8f170026":"code","0a2ade38":"code","de764eff":"code","bbe5912d":"code","7db5458c":"code","5468cc0f":"code","50eea954":"markdown","ce4d4ffb":"markdown","682ba29b":"markdown","14853104":"markdown","c89ba928":"markdown","4d5892f2":"markdown"},"source":{"d1854e7d":"import numpy as np \nimport pandas as pd\n\nimport utils_eda as eda\nimport utils_reg_models as reg\nimport utils_data_prepping as udp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(12,8)})\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","19c81955":"df = pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')\ndf.head()","2d07e911":"df.drop(['Serial No.'], axis=1, inplace=True)\ndf.rename(columns={\"Chance of Admit \": \"Admission\"}, inplace=True)\ndf.info()","6cf5c01c":"params =   {'University Rating': ['ordinal', [{'col':'University Rating', \n                                                 'mapping': {1:1, 2:2,3:3, 4:4, 5:5}}]],\n            'Research': ['binary']}\ndf = udp.categorical_encoding(df, params)","42e9fdff":"sns.histplot(data=df, x='Admission', kde=True)\nplt.show()","c4440e26":"eda.corr_matrix(df, cmap=\"rocket\")\nplt.show()","88e82bd1":"sns.scatterplot(data=df, x='GRE Score', y='Admission')\nplt.show()","8ce017fd":"X = df['GRE Score'].values.reshape(-1, 1)\ny = df['Admission'].values","8f170026":"def search_best_split(reg, iters):\n    sizes = [round(i, 2) for i in np.arange(0.2, 0.45, 0.05)]\n    states = list(range(0, iters+1))\n    scores = {}\n    for i in sizes:\n        for j in states:\n            reg.preprocess_split(size=i, state=j)\n            reg.fit_predict()\n            scores[(i, j)] = reg.metrics(put_dict=True)['RMSE']\n    best_split = min(scores, key=scores.get)\n    return best_split\n\nlin_model = reg.Regressor(X, y, 'lin')\ns, t = search_best_split(lin_model, 200)\nprint(s, t)\nlin_model.preprocess_split(s, t)\nlin_model.fit_predict()\nlin_model.metrics(put_dict=True)","0a2ade38":"def search_best_type(X, y, size, state):\n    scores = {}\n    for i in ['lin', 'poly', 'lasso', 'ridge', 'eln', 'svr']:\n        if i == 'poly':\n            model = reg.Regressor(X, y, i, 2)\n        else:\n            model = reg.Regressor(X, y, i)\n        model.preprocess_split(size=size, state=state)    \n        model.fit_predict()\n        mets = model.metrics(put_dict=True)\n        scores[i] = mets['RMSE']\n    best_type = min(scores, key=scores.get)\n    return best_type\n\nbest_type = search_best_type(X, y, s, t)\nbest_type","de764eff":"lin_model = reg.Regressor(X, y, best_type)\nlin_model.preprocess_split(s, t)\nlin_model.fit_predict()\nlin_model.metrics(put_dict=True)","bbe5912d":"rmse = lin_model.metrics(put_dict=True)['RMSE']\nrsq = lin_model.metrics(put_dict=True)['R_Sq']\nprint('Our best model got {} RMSE and {:.2%} R-Squared'.format(rmse, rsq))\nlin_model.equation(printing=False, visualize=True)","7db5458c":"X, y = udp.pre_processing(df, 'Admission')\nlin_model = reg.Regressor(X, y, 'lin')\nlin_model.preprocess_split(0.2, 131)\nlin_model.fit_predict()\neq = lin_model.equation()\neq","5468cc0f":"importance = eq[1:]\nfeatures = list(df.columns)[:-1]\n\nfor (i,v) in zip(features, importance):\n    print('{}: {:.2}'.format(i,v))\n\nsns.barplot(x=features, y=importance)\nplt.show()","50eea954":"# Importing Libraries","ce4d4ffb":"### 1. Distribution of the target variable","682ba29b":"# Data Loading & Formatting","14853104":"# Exploratory Data Analysis","c89ba928":"# Approach 2: Feature Importance from MLR","4d5892f2":"# Approach 1: Simple Linear Regression "}}