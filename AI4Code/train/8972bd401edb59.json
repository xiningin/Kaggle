{"cell_type":{"79a3cefe":"code","c20f732a":"code","1cfd211d":"code","5316a545":"code","90edb7ca":"code","09a1e85c":"code","ed88e759":"code","a186d1b4":"code","a56f6ee7":"code","193cd1b5":"code","eeef3d27":"code","09266c85":"code","30d0ff43":"code","5732a2e1":"code","479ba16a":"code","4db0dae8":"code","7ee4ef7d":"code","711d8da5":"code","d92cf443":"code","4eb5c280":"code","7fb5ba6f":"code","24a480dd":"code","8a56a98c":"code","5f26babe":"markdown","f7b5031e":"markdown","3ff93a37":"markdown"},"source":{"79a3cefe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c20f732a":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\nimport numpy as np","1cfd211d":"(X_train, y_train) , (X_test, y_test) = datasets.cifar10.load_data()","5316a545":"X_train.shape #50000 samples with 32*32 matrix in each row, 3 is for rgb color","90edb7ca":"X_train[0]","09a1e85c":"y_train.shape #this 1 column contain the row number from which the image is, like see the dataset y_train[0] contain all the images from airplane. ","ed88e759":"y_train[:5] #The first entry that is 6, means columns no. 6 containes images from frog, and so on. please see the datset.","a186d1b4":"y_train = y_train.reshape(-1,)\ny_train[:5] #now compare the above shape and this. ","a56f6ee7":"classes = [\"airplane\",\"automobile\",\"bird\",\"cat\",\"deer\",\"dog\",\"frog\",\"horse\",\"ship\",\"truck\"]","193cd1b5":"def plot_sample(X, y, index): #function to check the image of every class\n    plt.figure(figsize = (15,2))\n    plt.imshow(X[index])\n    plt.xlabel(classes[y[index]])","eeef3d27":"plot_sample(X_train, y_train, 0)","09266c85":"X_train = X_train\/255 #normalizing the values\nX_test = X_test\/255","30d0ff43":"#First build a artificial neural network\nann = models.Sequential([\n        layers.Flatten(input_shape=(32,32,3)),\n        layers.Dense(3000, activation='relu'),\n        layers.Dense(1000, activation='relu'),\n        layers.Dense(10, activation='softmax')    \n    ])\n\nann.compile(optimizer='SGD',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nann.fit(X_train, y_train, epochs=5)","5732a2e1":"from sklearn.metrics import confusion_matrix , classification_report\nimport numpy as np\ny_pred = ann.predict(X_test)\ny_pred_classes = [np.argmax(element) for element in y_pred]\n\nprint(\"Classification Report: \\n\", classification_report(y_test, y_pred_classes))","479ba16a":"#Now we will use CNN\ncnn = models.Sequential([\n    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)), #32 filters with 3X3 size will detect different aspects of images, \n    layers.MaxPooling2D((2, 2)),\n    \n    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    \n    layers.Flatten(),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(10, activation='softmax') #Softmax activation is used for normalizing, you will get 1 always as the probability\n])","4db0dae8":"cnn.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","7ee4ef7d":"cnn.fit(X_train, y_train, epochs=10)","711d8da5":"cnn.evaluate(X_test,y_test)  #Now we get good accuracy","d92cf443":"#Now use our model to predict this. \ny_pred = cnn.predict(X_test)\ny_pred[:5] #This are the probabilities of getting image right.","4eb5c280":"y_classes = [np.argmax(element) for element in y_pred]\ny_classes[:5]","7fb5ba6f":"y_test = y_test.reshape(-1,) #reshaping because our data was in 2D matrix\ny_test[:5] #Now compare the above y_classes and this, only 8 at the 2nd index is wrong predicted by our dataset which is pretty good accuracy. ","24a480dd":"plot_sample(X_test, y_test, 2) #first we select which image we want to predict","8a56a98c":"classes[y_classes[2]] #our model predict the right image. ","5f26babe":"You will notice that there was so much computation and time consuming using this simple neural network,and even accuracy was so low. so that's why we will use convolutional neural netowork (CNN). ","f7b5031e":"In this notebook, we will classify small images cifar10 dataset from tensorflow keras datasets. There are total 10 classes as shown below. We will use CNN for classification\". \n\nYou need to have some basic knowledge about CNN and ANN. \n\nYou can check the dataset here -> https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html","3ff93a37":"you can increase the accuracy by changing the number of epoches and using another pooling method like average pooling. \nDon't need to be upset if the model is not able to predict the correct image as the images were pretty hard to recognize. "}}