{"cell_type":{"e77d4451":"code","0817ad6c":"code","a04326d6":"code","f0a51e19":"code","e862b8c8":"code","41fc0ed6":"code","2ddaef0f":"code","f7a142fa":"code","25e060ef":"code","0b1b2b36":"code","e1ee8060":"code","d5016854":"code","d7ae57bb":"code","c8b9f0d7":"code","dc302ce4":"code","6296d7bb":"code","e8b65baa":"code","ef6c1122":"code","ec69ef78":"code","0d36590f":"code","82cc1b95":"code","38b60e90":"code","bd076202":"code","9aaf196f":"code","e4c67cc4":"code","c662393a":"code","2eccce39":"code","c1c7ba97":"markdown","3e2f486e":"markdown","f6a5f6f8":"markdown","e8c94f69":"markdown","ce78180a":"markdown","67d3acc5":"markdown","fab3ed34":"markdown","ef61ab80":"markdown","376e0172":"markdown","9f4a3367":"markdown"},"source":{"e77d4451":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","0817ad6c":"data = pd.read_csv('..\/input\/covid19-healthy-diet-dataset\/Food_Supply_Quantity_kg_Data.csv')","a04326d6":"data","f0a51e19":"data.info()","e862b8c8":"data = data.drop('Unit (all except Population)', axis=1)","41fc0ed6":"data.isna().sum()","2ddaef0f":"for column in data.columns:\n    if data.dtypes[column] != 'object' and data.isna().sum()[column] > 0:\n        data[column] = data[column].fillna(data[column].mean())","f7a142fa":"data['Undernourished'].value_counts()","25e060ef":"undernourished_numeric = data.loc[data['Undernourished'] != '<2.5', 'Undernourished'].astype(np.float)\nundernourished_numeric","0b1b2b36":"undernourished_numeric = undernourished_numeric.fillna(undernourished_numeric.mean())\nundernourished_numeric = pd.qcut(undernourished_numeric, q=3, labels=[1, 2, 3])\nundernourished_numeric","e1ee8060":"data.loc[undernourished_numeric.index, 'Undernourished'] = undernourished_numeric","d5016854":"data['Undernourished'] = data['Undernourished'].apply(lambda x: 0 if x == '<2.5' else x)","d7ae57bb":"data['Undernourished'].value_counts()","c8b9f0d7":"data","dc302ce4":"data = data.drop('Country', axis=1)\n\ndata = data.drop(['Confirmed', 'Recovered', 'Active'], axis=1)","6296d7bb":"pd.qcut(data['Deaths'], q=2, labels=[0, 1]).value_counts()","e8b65baa":"data['Deaths'] = pd.qcut(data['Deaths'], q=2, labels=[0, 1])","ef6c1122":"data","ec69ef78":"y = data['Deaths']\nX = data.drop('Deaths', axis=1)","0d36590f":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","82cc1b95":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","38b60e90":"X.shape","bd076202":"inputs = tf.keras.Input(shape=(26,))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\n\nbatch_size = 64\nepochs = 14\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    verbose=0\n)","9aaf196f":"fig = px.line(\n    history.history,\n    y=['loss', 'val_loss'],\n    labels={'index': \"Epoch\", 'value': \"Loss\"},\n    title=\"Training and Validation Loss\"\n)\n\nfig.show()","e4c67cc4":"np.argmin(history.history['val_loss'])","c662393a":"model.evaluate(X_test, y_test)","2eccce39":"len(y_test)","c1c7ba97":"# Task for Today  \n\n***\n\n## Predicting COVID-19 Mortality Based on Diet  \n\nGiven *data about various countries and their daily intakes of different food groups*, let's try to predict whether a given country will have a **high or low COVID-19 mortality rate**.\n\nWe will use a TensorFlow ANN to make our predictions.","3e2f486e":"# Getting Started","f6a5f6f8":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/LLC8rmmVOjM","e8c94f69":"### Dealing with the Undernourished column","ce78180a":"# Training","67d3acc5":"# Preprocessing","fab3ed34":"## Feature and Target Selection","ef61ab80":"## Missing Values","376e0172":"## Splitting and Scaling","9f4a3367":"# Results"}}