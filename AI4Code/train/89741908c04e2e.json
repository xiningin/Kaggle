{"cell_type":{"fba93708":"code","fda1c921":"code","8e8daae6":"code","7e462a4b":"code","f6ed891f":"code","ade1973a":"code","089e19ed":"code","2685324c":"code","52e11d22":"code","81cbecb1":"code","8c67b128":"code","5903c1af":"code","225d4caa":"code","c3693293":"code","5131205d":"code","df16da15":"code","b2bb5207":"code","8947f2f5":"code","8af2f99a":"code","0ae93169":"code","d23dd204":"code","0ca0fd1f":"code","d590c2dc":"code","ae2eb82d":"code","3f797bf9":"code","71e00b16":"code","a1a5f63c":"code","e60da7d7":"code","49582889":"code","27938cc1":"code","379baaa4":"code","a61f110e":"code","a8f6176c":"code","82388d9c":"code","8387220b":"code","f7758fb8":"code","16da5c1d":"code","11dfc355":"code","9630fa78":"code","eea5b40c":"code","9f575326":"code","e4978a95":"code","a9f7bd85":"code","51b9a995":"code","797e7adb":"code","0bf34a57":"code","7cfbd8a4":"code","c161886b":"code","0dcb4147":"code","c407a657":"markdown","518553c6":"markdown","4db93830":"markdown","9445eddd":"markdown","64ed96c5":"markdown","ee93973c":"markdown","51eeee87":"markdown","9331d2c1":"markdown","c9ee0824":"markdown","cd01183e":"markdown","e5891883":"markdown","4d96db8a":"markdown","306de6ad":"markdown","681eb90c":"markdown","7ccf7b2f":"markdown","8a261d52":"markdown","04a0c61d":"markdown","e56cccf5":"markdown","49ba1ff2":"markdown","7ddc500f":"markdown","fdcae1c4":"markdown","77bfb26b":"markdown","aead2f9a":"markdown","33f163e7":"markdown","a0b24d2e":"markdown","008af392":"markdown","99ad7a7b":"markdown","6e9e1e66":"markdown","48cee00c":"markdown","89ce2de9":"markdown","5f36231f":"markdown","b63c0e6b":"markdown","57cd836f":"markdown","0e723f1e":"markdown","63cd7460":"markdown","93061683":"markdown","b26d46c1":"markdown","0c94d992":"markdown"},"source":{"fba93708":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10, 8)});","fda1c921":"df = pd.read_csv(r'D:\\Programming\\Python\\DataSpell_Projects\\Datasets\\Adult income\\adult.csv')","8e8daae6":"df.head()","7e462a4b":"df.describe().T","f6ed891f":"# print (df.shape)\n# print (df.head(10))","ade1973a":"# df['native-country'] = df['native-country'].replace('?',np.nan)\n# df['workclass'] = df['workclass'].replace('?',np.nan)\n# df['occupation'] = df['occupation'].replace('?',np.nan)\n#\n# df.dropna(how='any',inplace=True)\n#\n# print (df.shape)\n# print (df.head(10))","089e19ed":"df['native-country'].value_counts()","2685324c":"df.loc[df['native-country'] != 'United-States', 'native-country'] = 0\ndf.loc[df['native-country'] == 'United-States', 'native-country'] = 1","52e11d22":"df['native-country'].value_counts()","81cbecb1":"new_values = {'<=50K':0, \">50K\":1} # \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c Python\ndf['dummy_income'] = df['income'].map(new_values)\ndf.head()","8c67b128":"new_values_1 = {'Male':0, \"Female\":1} # \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c Python\ndf['dummy_gender'] = df['gender'].map(new_values_1)\ndf.head()","5903c1af":"df.head()","225d4caa":"df['race'].value_counts()","c3693293":"new_race = {'White':0, 'Black':1, 'Asian-Pac-Islander':2, 'Amer-Indian-Eskimo':3, 'Other':4}\ndf['dummy_race'] = df['race'].map(new_race)\ndf.head()","5131205d":"df['workclass'].value_counts()","df16da15":"new_workclass = {'Private':0, 'Self-emp-not-inc':1, 'Local-gov':2, '?':3, 'State-gov':4, 'Self-emp-inc':5, 'Federal-gov':6, 'Without-pay':7, 'Never-worked':8}\ndf['dummy_workclass'] = df['workclass'].map(new_workclass)\ndf.head()","b2bb5207":"df['marital-status'].value_counts()","8947f2f5":"new_marital_status = {'Married-civ-spouse':0, 'Never-married':1, 'Divorced':2, 'Separated':3, 'Widowed':4, 'Married-spouse-absent':5, 'Married-AF-spouse':6}\ndf['dummy_marital_status'] = df['marital-status'].map(new_marital_status)\ndf.head()","8af2f99a":"df['occupation'].value_counts()","0ae93169":"new_occupation = {'Prof-specialty':0, 'Craft-repair':1, 'Exec-managerial':2, 'Adm-clerical':3, 'Sales':4, 'Other-service':5, 'Machine-op-inspct':6, '?':7, 'Transport-moving':8, 'Handlers-cleaners':9, 'Farming-fishing':10, 'Tech-support':11, 'Protective-serv':12, 'Priv-house-serv':13, 'Armed-Forces':14}\ndf['dummy_occupation'] = df['occupation'].map(new_occupation)\ndf.head()","d23dd204":"df['relationship'].value_counts()","0ca0fd1f":"new_relationship = {'Husband':0, 'Wife':1, 'Not-in-family':2, 'Own-child':3, 'Unmarried':4, 'Other-relative':5}\ndf['dummy_relationship'] = df['relationship'].map(new_relationship)\ndf.head()","d590c2dc":"y = df['dummy_income']\ndf1 = df.drop(['income', 'dummy_income', 'gender', 'race', 'workclass', 'marital-status', 'occupation', 'relationship'], axis=1)\ndf1.head()","ae2eb82d":"y.value_counts().plot(kind='bar');","3f797bf9":"print(y.value_counts(normalize=True))","71e00b16":"df1.head()","a1a5f63c":"df[['educational-num', 'education']].value_counts()","e60da7d7":"df1 = df1.drop(['fnlwgt', 'education'], axis=1)\ndf1.head()","49582889":"# df_2 = pd.get_dummies(df1, columns=['marital-status', 'relationship', 'race', 'native-country'])\n# df_2.head()","27938cc1":"df1.shape","379baaa4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(df1)\nprint(X[:5])","a61f110e":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=42)","a8f6176c":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)","82388d9c":"y_pred = knn.predict(X_valid)\nprint(y_pred[:5])","8387220b":"print(y_valid[:5])","f7758fb8":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_valid, y_pred))","16da5c1d":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nkf = KFold(n_splits=5, shuffle=True, random_state=42) # n_splits \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u043e\u043b\u044c K\nknn = KNeighborsClassifier()\nscores = cross_val_score(knn, X, y, cv=kf, scoring='accuracy')\nprint('\u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438:', scores)\nprint('\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:', np.mean(scores))","11dfc355":"%%time\nfrom sklearn.model_selection import GridSearchCV\n\nknn_params={'n_neighbors': np.arange(1, 51)} # \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u043a\u043b\u044e\u0447: \u043d\u0430\u0431\u043e\u0440 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439)\n\nknn_grid = GridSearchCV(knn, knn_params, cv=5, scoring='accuracy') # \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u043e 5 \u0431\u043b\u043e\u043a\u0430\u043c\nknn_grid.fit(X_train, y_train)","9630fa78":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nprint(knn_grid.best_params_)\n\n# \u041b\u0443\u0447\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\nprint(knn_grid.best_estimator_)","eea5b40c":"# \u0420\u0438\u0441\u0443\u0435\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043a\u0440\u0438\u0432\u0443\u044e\n# \u041f\u043e \u043e\u0441\u0438 \u0445 --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (param_n_neighbors)\n# \u041f\u043e \u043e\u0441\u0438 y --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438 (mean_test_score)\n\nimport matplotlib.pyplot as plt\nresults_df = pd.DataFrame(knn_grid.cv_results_)\nplt.plot(results_df['param_n_neighbors'], results_df['mean_test_score'])\n\n# \u041f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a\nplt.xlabel('n_neighbors')\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","9f575326":"%%time\nkf = KFold(n_splits=5, shuffle=True, random_state=42) # n_splits \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u043e\u043b\u044c K\nknn = KNeighborsClassifier(n_neighbors=16, weights='distance')\nscores = cross_val_score(knn, X, y, cv=kf, scoring='accuracy')\nprint('\u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438:', scores)\nprint('\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:', np.mean(scores))","e4978a95":"%%time\nfrom sklearn.model_selection import GridSearchCV\nknn_params={'p': np.linspace(1, 10, num=20)} # \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u043a\u043b\u044e\u0447: \u043d\u0430\u0431\u043e\u0440 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439)\n\nknn_grid = GridSearchCV(knn, knn_params, cv=5, scoring='accuracy') # \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u043e 5 \u0431\u043b\u043e\u043a\u0430\u043c\nknn_grid.fit(X_train, y_train)","a9f7bd85":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nprint(knn_grid.best_params_)\n\n# \u041b\u0443\u0447\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\nprint(knn_grid.best_estimator_)","51b9a995":"from sklearn.neighbors import RadiusNeighborsClassifier\nknn = RadiusNeighborsClassifier(radius=100.0)\nknn.fit(X_train, y_train)","797e7adb":"%%time\ny_pred = knn.predict(X_valid)\nprint(y_pred[:5])","0bf34a57":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_valid, y_pred))","7cfbd8a4":"from sklearn.neighbors import NearestCentroid\nclf = NearestCentroid()\nclf.fit(X_train, y_train)","c161886b":"y_pred_1 = clf.predict(X_valid)\nprint(y_pred_1[:5])","0dcb4147":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_valid, y_pred_1))","c407a657":"**==================================================================**","518553c6":"### 1. \u041f\u0435\u0440\u0435\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 p \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u043e\u0442 1 \u0434\u043e 10 \u0441 \u0442\u0430\u043a\u0438\u043c \u0448\u0430\u0433\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435\u0433\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e 200 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 (\u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e numpy.linspace ).\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 KNeighborsClassifier \u0438\u043b\u0438 KNeighborsRegressor \u0441 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c n_neighbors , \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c \u0440\u0430\u043d\u0435\u0435. \u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u043e\u043f\u0446\u0438\u044e weights='distance' \u2013\u2013 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0432 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0432\u0435\u0441\u0430, \u0437\u0430\u0432\u0438\u0441\u044f\u0449\u0438\u0435 \u043e\u0442 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043d\u043e\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 accuracy . \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0439\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u043e 5 \u0431\u043b\u043e\u043a\u0430\u043c.","4db93830":"**out:**\nGridSearchCV(cv=5, estimator=KNeighborsClassifier(),\n             param_grid={'n_neighbors': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])},\n             scoring='accuracy')","9445eddd":"**\u041f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \"?\"**","64ed96c5":"# Lab 2. Nearest neighbors methods\n# \u041c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438","ee93973c":"Target (\u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a) \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: \u0442\u0435\u0445, \u043a\u0442\u043e \u0437\u0430\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 50\u041a \u0438 \u0442\u0435\u0445, \u043a\u0442\u043e \u0437\u0430\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 50\u041a. \u0421\u0440\u0430\u0437\u0443 \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 0 \u0438 1 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u043e (\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u0432\u044b\u0448\u0435). \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e - \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.","51eeee87":"### 2. \u041e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438 \u0447\u0438\u0441\u043b\u0435 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 k \u2208 [1;50]. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 GridSearchCV .\n\u041f\u0440\u0438 \u043a\u0430\u043a\u043e\u043c k \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c? \u0427\u0435\u043c\u0443 \u0440\u0430\u0432\u043d\u0430 \u044d\u0442\u0430 \u043e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430? \u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0433\u0440\u0430\u0444\u0438\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 k\n( matplotlib.pyplot.plot() ).","9331d2c1":"out: 0.8402260257145197.\n\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c ~ 84%. \u041d\u043e \u043a\u0430\u043a \u0431\u044b\u043b\u043e \u0441\u043a\u0430\u0437\u0430\u043d\u043e \u0432\u044b\u0448\u0435 - \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0447\u0430\u0449\u0435 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u0435\u0442 0 \u0447\u0435\u043c 1, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435\u043b\u044c\u0437\u044f \u0443\u0432\u0435\u0440\u0435\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0430\u043a \u0436\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0436\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","c9ee0824":"**out:**\n\u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438: [0.84123247 0.83550005 0.83497133 0.83404996 0.83087633]\n\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438: 0.8353260292276568","cd01183e":"### 3. \u041a\u0430\u043a\u043e\u0432\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 target-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439? \u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","e5891883":"### 5. \u0420\u0430\u0437\u0431\u0435\u0439\u0442\u0435 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e (\u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e) \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 train_test_split.","4d96db8a":"**out**\n{'n_neighbors': 16}\nKNeighborsClassifier(n_neighbors=16)","306de6ad":"\u0414\u043b\u044f 16 \u0441\u043e\u0441\u0435\u0434\u0435\u0439:\n{'p': 1.4736842105263157}\nKNeighborsClassifier(n_neighbors=16, p=1.4736842105263157, weights='distance')","681eb90c":"## 3 \u0412\u044b\u0431\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN","7ccf7b2f":"**out:**\n\u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438: [0.8449176  0.83846863 0.83773546 0.83742834 0.83660934]\n\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438: 0.839031871698982\nWall time: 16 s","8a261d52":"### 4. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (preprocessing).","04a0c61d":"**=====================================**","e56cccf5":"### 2. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u043f\u0440\u0438 \u043a\u0430\u043a\u043e\u043c p \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c.\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e cross_val_score \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e \u0431\u043b\u043e\u043a\u0430\u043c; \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u044d\u0442\u0438\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439.","49ba1ff2":"\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \"United-States\" \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \"Mexico\", \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0430\u0445\u043e\u0434\u043c\u0442\u0441\u044f \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0435\u0441\u0442\u0435 (43832 \u0438 951) \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0434\u0435\u044f \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \"US\" \u0438 \"Not US\" (0 \u0438 1 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e)","7ddc500f":"**out:**\n0.7660306281221849","fdcae1c4":"{'p': 1.4736842105263157}\nKNeighborsClassifier(n_neighbors=15, p=1.4736842105263157, weights='distance')","77bfb26b":"**==========================================**","aead2f9a":"Wall time: 33min 45sGridSearchCV(cv=5,\n             estimator=KNeighborsClassifier(n_neighbors=16, weights='distance'),\n             param_grid={'p': array([ 1.        ,  1.47368421,  1.94736842,  2.42105263,  2.89473684,\n        3.36842105,  3.84210526,  4.31578947,  4.78947368,  5.26315789,\n        5.73684211,  6.21052632,  6.68421053,  7.15789474,  7.63157895,\n        8.10526316,  8.57894737,  9.05263158,  9.52631579, 10.        ])},\n             scoring='accuracy')","33f163e7":"### RadiusNeighborsClassifier","a0b24d2e":"**out:**\n0.7685693227417902","008af392":"## 1 \u041c\u0435\u0442\u043e\u0434\u044b \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439","99ad7a7b":"\u041f\u0440\u043e\u0446\u0435\u043d\u0442 0 (\u0442\u0435\u0445 \u043a\u0442\u043e \u0437\u0430\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 50\u041a) \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 1 (>50K) (76% \u0438 24% \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e). \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0442\u0441\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u0435\u0442 0.","6e9e1e66":"**====================================================**","48cee00c":"### 1. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u0441\u044c \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Kaggle:\n\u0412\u0430\u0440\u0438\u0430\u043d\u0442 2: Adult income","89ce2de9":"### 1. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u0431\u043b\u043e\u043a\u043e\u0432 ( shuffle=True ).\n\u0427\u0438\u0441\u043b\u043e \u0431\u043b\u043e\u043a\u043e\u0432 n_splits \u0440\u0430\u0432\u043d\u043e 5. \u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u0442\u0430\u043a\u0436\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 random_state \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 kNN \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u041f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435, \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u043e \u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0439 \u043c\u0435\u0440\u044b (\u043c\u0435\u0442\u0440\u0438\u043a\u0438) \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435? \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430.","5f36231f":"### 6. \u041e\u0431\u0443\u0447\u0438\u0442\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 kNeighborsClassifier \u0438\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 KNeighborsRegressor .\n\u041e\u0446\u0435\u043d\u0438\u0442\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e:\n\u2022 accuracy_score \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438;","b63c0e6b":"### NearestCentroid","57cd836f":"### 2. \u0418\u0437\u0432\u043b\u0435\u043a\u0438\u0442\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (target). \u041a\u0430\u043a\u0430\u044f \u0438\u0437 \u0437\u0430\u0434\u0430\u0447 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u2013\u2013 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f?","0e723f1e":"## 2 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN","63cd7460":"\u041f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:\n**0.8319547948570961** - \"nice\" result\n\n0.8367865039718286 - \u0431\u0435\u0437 workclass\n\n0.8375235443452624 - without workclass and occupation","93061683":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u043b\u044f 15\u0442\u0438 \u0441\u043e\u0441\u0435\u0434\u0435\u0439:\nGridSearchCV(cv=5,\n             estimator=KNeighborsClassifier(n_neighbors=15, weights='distance'),\n             param_grid={'p': array([ 1.        ,  1.47368421,  1.94736842,  2.42105263,  2.89473684,\n        3.36842105,  3.84210526,  4.31578947,  4.78947368,  5.26315789,\n        5.73684211,  6.21052632,  6.68421053,  7.15789474,  7.63157895,\n        8.10526316,  8.57894737,  9.05263158,  9.52631579, 10.        ])},\n             scoring='accuracy')","b26d46c1":"**==========================================**","0c94d992":"## 4 \u0414\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b\n\u041f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 Scikit-learn:"}}