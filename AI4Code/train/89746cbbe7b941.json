{"cell_type":{"28513ac6":"code","1c6a34e4":"code","8db1105c":"code","d6d647d7":"code","03a00af8":"code","4584b8f2":"code","1826a634":"code","6d3dc9b1":"code","cfe3d787":"code","6bca14d8":"code","2a8e89cc":"code","51613624":"code","d88f1f6c":"code","1234dfbf":"code","01e06b18":"code","7dd23922":"code","c8a7e836":"code","a8625fa3":"code","785b1343":"code","c0ed2c1f":"code","19926427":"code","c34b973c":"code","a7b3ec7f":"code","620bfc2e":"code","a77f8c60":"code","7ab8d4dd":"code","bb7e3259":"code","9cabf163":"code","cbb0bbb1":"code","a8d66067":"code","fd2b9f57":"code","8f71155e":"code","f9c2641e":"code","67abe4f1":"code","13dc8a96":"code","e7deefe7":"code","e6636fc7":"code","afd0ca71":"code","67f47bf6":"code","e385f19e":"code","344cd781":"markdown","5a7c3bc4":"markdown","82a64624":"markdown","ee8d0818":"markdown","e20cfa27":"markdown","25fb6e03":"markdown","508ccf14":"markdown","6117215f":"markdown","8c666946":"markdown","1042b32e":"markdown"},"source":{"28513ac6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c6a34e4":"# Libraries\nimport plotly.express as px","8db1105c":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.shape","d6d647d7":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.shape","03a00af8":"train_data.head()","4584b8f2":"train_data.info()","1826a634":"sur = train_data.groupby('Survived')['PassengerId'].count().reset_index(name = 'count')\nfig = px.pie(sur, values='count', names='Survived', title='Surviver Spread')\nfig.show()","6d3dc9b1":"pclass = train_data.groupby(\"Pclass\")['PassengerId'].count().reset_index(name = 'count')\nfig = px.pie(pclass, values='count', names='Pclass', title='Pclass Spread')\nfig.show()","cfe3d787":"sex = train_data.groupby(\"Sex\")['PassengerId'].count().reset_index(name = 'count')\nfig = px.pie(sex, values='count', names='Sex', title='Sex Spread')\nfig.show()","6bca14d8":"counts, bins = np.histogram(train_data.Age, bins=range(0, 80, 5))\nbins = 0.5 * (bins[:-1] + bins[1:])\nfig = px.bar(x=bins, y=counts, labels={'x':'Age', 'y':'count'})\nfig.show()","2a8e89cc":"sib = train_data.groupby(\"SibSp\")['PassengerId'].count().reset_index(name = 'count')\nfig = px.bar(sib, x='SibSp', y='count', labels={'x':'Siblings', 'y':'count'})\nfig.show()","51613624":"par = train_data.groupby(\"Parch\")['PassengerId'].count().reset_index(name = 'count')\nfig = px.bar(par, x='Parch', y='count', labels={'x':'Siblings', 'y':'count'})\nfig.show()","d88f1f6c":"train_data.Fare.value_counts()\ncounts, bins = np.histogram(train_data.Fare, bins=range(0, 600, 10))\nbins = 0.5 * (bins[:-1] + bins[1:])\nfig = px.bar(x=bins, y=counts, labels={'x':'Fare', 'y':'count'})\nfig.show()","1234dfbf":"emb = train_data.groupby(\"Embarked\")['PassengerId'].count().reset_index(name = 'count')\nfig = px.pie(emb, values='count', names='Embarked', title='Embarked Spread')\nfig.show()","01e06b18":"sex_sur = train_data.groupby(['Sex','Survived'])['Survived'].count().reset_index(name = 'count')\nsex_sur.Survived = sex_sur.Survived.map({1:'yes', 0:'no'})\nfig = px.bar(sex_sur, x=\"Survived\", y=\"count\", color=\"Sex\", title=\"Survived people by Sex\")\nfig.show()","7dd23922":"p_sur = train_data.groupby(['Pclass','Survived'])['Survived'].count().reset_index(name = 'count')\np_sur.Survived = p_sur.Survived.map({1:'yes', 0:'no'})\nfig = px.bar(p_sur, x=\"Survived\", y=\"count\", color=\"Pclass\", title=\"Survived people by Pclass\")\nfig.show()","c8a7e836":"age_sur = train_data.groupby(['Age','Survived'])['Survived'].count().reset_index(name = 'count')\nage_sur.Survived = age_sur.Survived.map({1:'yes', 0:'no'})\nfig = px.scatter(age_sur, x=\"Age\", y=\"count\", color=\"Survived\")\nfig.show()","a8625fa3":"SibSp_sur = train_data.groupby(['SibSp','Survived'])['Survived'].count().reset_index(name = 'count')\nSibSp_sur.Survived = SibSp_sur.Survived.map({1:'yes', 0:'no'})\nfig = px.bar(SibSp_sur, x=\"SibSp\", y=\"count\", color=\"Survived\", title=\"Survived people by SibSp\")\nfig.show()","785b1343":"Parch_sur = train_data.groupby(['Parch','Survived'])['Survived'].count().reset_index(name = 'count')\nParch_sur.Survived = Parch_sur.Survived.map({1:'yes', 0:'no'})\nfig = px.bar(Parch_sur, x=\"Parch\", y=\"count\", color=\"Survived\", title=\"Survived people by Parch\")\nfig.show()","c0ed2c1f":"Embarked_sur = train_data.groupby(['Embarked','Survived'])['Survived'].count().reset_index(name = 'count')\nEmbarked_sur.Survived = Embarked_sur.Survived.map({1:'yes', 0:'no'})\nfig = px.bar(Embarked_sur, x=\"Embarked\", y=\"count\", color=\"Survived\", title=\"Survived people by Embarked\")\nfig.show()","19926427":"Fare_sur = train_data.groupby(['Fare','Survived'])['Survived'].count().reset_index(name = 'count')\nFare_sur.Survived = Fare_sur.Survived.map({1:'yes', 0:'no'})\nfig = px.scatter(Fare_sur, x=\"Fare\", y=\"count\", color=\"Survived\")\nfig.show()","c34b973c":"sex_em = train_data.groupby(['Sex','Embarked'])['Embarked'].count().reset_index(name = 'count')\nfig = px.bar(sex_em, x=\"Embarked\", y=\"count\", color=\"Sex\", title=\"Embarked people by Sex\")\nfig.show()","a7b3ec7f":"age_sex = train_data.groupby(['Age','Sex'])['Sex'].count().reset_index(name = 'count')\nfig = px.scatter(age_sex, x=\"Age\", y=\"count\", color=\"Sex\")\nfig.show()","620bfc2e":"#afe = train_data['Age','Fare','Embarked']\nfig = px.scatter(train_data, x=\"Age\", y=\"Embarked\", size=\"Fare\", color = 'Fare')\nfig.show()","a77f8c60":"pe = train_data.groupby(['Pclass','Embarked'])['Embarked'].count().reset_index(name = 'count')\nfig = px.bar(pe, x=\"Embarked\", y=\"count\", color=\"Pclass\")\nfig.show()","7ab8d4dd":"train_data.columns","bb7e3259":"fig = px.scatter(train_data, x=\"Fare\", y=\"SibSp\", size=\"Fare\", color = 'Fare')\nfig.show()","9cabf163":"fig = px.scatter(train_data, x=\"Fare\", y=\"Parch\", size=\"Fare\", color = 'Parch')\nfig.show()","cbb0bbb1":"# Data Preparation\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import MinMaxScaler\ncols = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\nscaler = MinMaxScaler()\nX = train_data[cols]\ny = train_data['Survived']\nen_data = pd.get_dummies(X)\n\nmy_imputer = SimpleImputer()\nimp_data = my_imputer.fit_transform(en_data)\n\nx_train, x_test, y_train, y_test = train_test_split(imp_data, y, test_size=0.10, random_state=1)\nlogmodel = LogisticRegression()\nlogmodel.fit(x_train, y_train)\n\npredictions = logmodel.predict(x_test)\nprint(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(accuracy_score(y_test, predictions))\n","a8d66067":"# Test data Preprocessing\ntest = test_data[cols]\nen_test = pd.get_dummies(test)\nimp_test = my_imputer.fit_transform(en_test)","fd2b9f57":"pred = logmodel.predict(imp_test)\n\ndfs = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nfile = {\"PassengerId\":dfs[\"PassengerId\"],\"Survived\":pred}\nfile = pd.DataFrame(file)\n#file.to_csv(\"submission.csv\",index=False)","8f71155e":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nclf = clf.fit(x_train, y_train)\npred = clf.predict(imp_test)\n\ndfs = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nfile = {\"PassengerId\":dfs[\"PassengerId\"],\"Survived\":pred}\nfile = pd.DataFrame(file)\n#file.to_csv(\"submission.csv\",index=False)","f9c2641e":"from sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(x_train,y_train)\n\npred=clf.predict(imp_test)\n\ndfs = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nfile = {\"PassengerId\":dfs[\"PassengerId\"],\"Survived\":pred}\nfile = pd.DataFrame(file)\nfile.to_csv(\"submission.csv\",index=False)","67abe4f1":"file","13dc8a96":"import xgboost as xgb\nxgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", random_state=42)\n\nxgb_model.fit(x_train, y_train)\npred = xgb_model.predict(imp_test)\nprint(pred)\n\ndfs = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nfile = {\"PassengerId\":dfs[\"PassengerId\"],\"Survived\":pred}\nfile = pd.DataFrame(file)\nfile.to_csv(\"submission.csv\",index=False)","e7deefe7":"df_all = pd.concat([train_data, test_data])\ndf_all.shape","e6636fc7":"from sklearn.preprocessing import LabelEncoder \n  \nle = LabelEncoder() \n  \ndf_all['Sex']= le.fit_transform(df_all['Sex']) ","afd0ca71":"df_all.head()","67f47bf6":"df_all_corr = df_all.corr().abs().unstack().sort_values(kind=\"quicksort\", ascending=False).reset_index()\ndf_all_corr.rename(columns={\"level_0\": \"Feature 1\", \"level_1\": \"Feature 2\", 0: 'Correlation Coefficient'}, inplace=True)\ndf_all_corr[df_all_corr['Feature 1'] == 'Age']","e385f19e":"train_data.Name","344cd781":"61% travellers died and 38% of travellers survived in the accident.","5a7c3bc4":"## 1. Data Exploration <a id = '1'>","82a64624":"## 2.2 Decision Tree<a id ='2.2'>","ee8d0818":"## 2.1 Logistic Regression<a id = '2.1'>","e20cfa27":"<font size='5' color='#1C2833'>Contents<\/font> \n<font size='3' color='#717D7E'>\n1. [Data Exploration](#1)<br>\n2. [Machine Learning Algorithms](#2)<br>\n    2.1 [Logistic Regression](#2.1)<br>\n    2.2 [Decision Tree](#2.2)<br>\n    2.3 [Random Forest](#2.3)<br>\n","25fb6e03":"If you <font color = 'orange'>like<\/font> this kernel and want to <font color = 'orange'>fork<\/font> plz <font color = 'red'>UPVOTE.<\/font>\n\nIf you have suggestions to improve this kernel plz <font color = 'red'>COMMENT.<\/font>\n\n<font color = 'blue'>************************ Notebook is under construction ************************<\/font>","508ccf14":"## Feature Engineering","6117215f":"## 2.3 Random Forest Classifier <a id = '2.3'>","8c666946":"## 2. Machine Learning Algorithms<a id='2'>","1042b32e":"More number of Female passengers survived"}}