{"cell_type":{"e818d8be":"code","813cc4b7":"code","23f72ef2":"code","5b5ca75c":"code","52108ca2":"code","e8c34f11":"code","98742505":"code","f54143eb":"code","2c9afac7":"code","fc960228":"code","00685e38":"code","4188af51":"code","b11d934e":"code","a4c48dc4":"code","5fb78cd7":"code","f788bdee":"code","88e40fc7":"code","44d3fdde":"code","0314cc85":"code","e59da844":"code","d9a45dd9":"code","8de51422":"code","b2bdbc77":"code","e5aed215":"code","6f181b98":"code","b6087c83":"code","e2f30af5":"code","27712a5c":"code","61852c4f":"markdown","8f5a61f0":"markdown","e1707089":"markdown","b4c5c9ee":"markdown","bc419a04":"markdown","872f00dd":"markdown","3d48cfd2":"markdown","3f443341":"markdown","51552364":"markdown","f10da088":"markdown","ba082142":"markdown"},"source":{"e818d8be":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","813cc4b7":"train_dataset = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_dataset = pd.read_csv('..\/input\/titanic\/test.csv')\n","23f72ef2":"train_dataset.head()","5b5ca75c":"#Checking null columns\ntrain_dataset.isnull().sum()","52108ca2":"test_dataset.isnull().sum()","e8c34f11":"# Plotting the null column for train_data\nageStd = train_dataset['Age'].std()\nageMean = train_dataset['Age'].mean()\nsns.set_style('darkgrid')\nplt.figure(figsize = (12,6))\nsns.histplot(data=train_dataset, x='Age', bins = len(train_dataset['Age'].unique()), kde=True)\nplt.axvline(x=ageStd, c='green', label=f'Std of age = {ageStd:.2f}')\nplt.axvline(x=ageMean, c='b', label=f'Mean of age = {ageMean:.2f}')\nplt.axvline(x=ageMean - (3*ageStd), c='r', label=f'Outlier1 = {ageMean - (3*ageStd):.2f}')\nplt.axvline(x=ageMean + (3*ageStd), c='r', label=f'Outlier2 = {ageMean + (3*ageStd):.2f}')\nplt.legend(loc=0)\nplt.xticks(np.arange(int(min(train_dataset['Age'])), int(max(train_dataset['Age'])), 10))","98742505":"# Plotting the null column for train_data\\\nfareStd = test_dataset['Fare'].std()\nfareMean = test_dataset['Fare'].mean()\nsns.set_style('darkgrid')\nplt.figure(figsize = (12,6))\nsns.histplot(data=test_dataset, x='Fare', bins = len(test_dataset['Fare'].unique()), kde=True)\nplt.axvline(x=fareStd, c='green', label=f'Std of Fare = {fareStd:.2f}')\nplt.axvline(x=fareMean, c='b', label=f'Mean of Fare = {fareMean:.2f}')\nplt.axvline(x=fareMean - (3*fareStd), c='r', label=f'Outlier1 = {fareMean - (3*fareStd):.2f}')\nplt.axvline(x=fareMean + (3*fareStd), c='r', label=f'Outlier2 = {fareMean + (3*fareStd):.2f}')\nplt.legend(loc=0)\n# plt.xticks(np.arange(int(min(test_dataset['Fare'])), int(max(test_dataset['Fare'])), 10))","f54143eb":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain_dataset.groupby(['Embarked'])['PassengerId'].count()","2c9afac7":"train_dataset['Age'].fillna(train_dataset['Age'].mean(), inplace=True)\ntest_dataset['Age'].fillna(test_dataset['Age'].mean(), inplace=True)","fc960228":"train_dataset['Embarked'].fillna('S', inplace=True)","00685e38":"test_dataset['Fare'].fillna(test_dataset['Fare'].mean(), inplace=True)","4188af51":"considered_cols = ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp','Parch', 'Fare', 'Embarked']\ntrain_data = train_dataset[considered_cols]\ny = train_dataset['Survived']","b11d934e":"test_data = test_dataset[considered_cols]","a4c48dc4":"train_data['Title'] = train_data.Name.str.extract('([A-Za-z]+)\\.', expand=False)\ntest_data['Title'] = test_data.Name.str.extract('([A-Za-z]+)\\.', expand=False)","5fb78cd7":"train_data['Title'] = train_data['Title'].replace(['Col', 'Capt', 'Countess','Jonkheer', 'Don', 'Rev', 'Dr', 'Major'], 'Imp')\ntrain_data['Title'] = train_data['Title'].replace(['Mlle', 'Ms'], 'Miss')\ntrain_data['Title'] = train_data['Title'].replace(['Mme', 'Lady'], 'Mrs')\ntrain_data['Title'] = train_data['Title'].replace('Sir', 'Mr')","f788bdee":"test_data['Title'] = test_data['Title'].replace(['Col', 'Capt', 'Countess','Jonkheer', 'Don', 'Rev', 'Dr', 'Major'], 'Imp')\ntest_data['Title'] = test_data['Title'].replace(['Mlle', 'Ms'], 'Miss')\ntest_data['Title'] = test_data['Title'].replace(['Mme', 'Lady'], 'Mrs')\ntest_data['Title'] = test_data['Title'].replace('Sir', 'Mr')","88e40fc7":"plt.figure(figsize = (12,6))\nplt.title('Name count Plot', fontsize=14)\nplt.xlabel('count', fontsize=14)\nplt.ylabel('Title', fontsize=14)\nsns.countplot(data=train_data, x='Title')","44d3fdde":"# Dropping the passengerID column as it's not impacting the Output\n# Dropping the Name as we have derived a new col 'Title' off of it\nprint(train_dataset[['Survived', 'PassengerId']].corr())\n\ntrain_data.drop(['PassengerId', 'Name', 'Fare'], axis=1, inplace=True)\ntest_data.drop(['PassengerId', 'Name', 'Fare'], axis=1, inplace=True)","0314cc85":"train_data.head()","e59da844":"test_data.head()","d9a45dd9":"# Encoding the categorical data\nfrom sklearn.preprocessing import OrdinalEncoder\noe = OrdinalEncoder()\ntrain_data = oe.fit_transform(train_data)\ntrain_data.shape","8de51422":"test_data = oe.fit_transform(test_data)\ntest_data.shape","b2bdbc77":"from sklearn.linear_model import LogisticRegression\n\nlogistic_model = LogisticRegression()\nlogistic_model.fit(train_data, y)\nlogistic_acc = logistic_model.score(train_data, y)\nlogistic_acc = round(logistic_acc * 100, 2)","e5aed215":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_model = KNeighborsClassifier(n_neighbors=7)\nknn_model.fit(train_data, y)\nknn_acc = knn_model.score(train_data, y)\nknn_acc = round(knn_acc * 100, 2)","6f181b98":"from sklearn.svm import SVC\n\nsvc_model = SVC(kernel='linear')\nsvc_model.fit(train_data,y)\nsvc_score = svc_model.score(train_data, y)\nsvc_score = round(svc_score * 100, 2)","b6087c83":"modelvacc = pd.DataFrame(\n    {\n        'Model' : ['LogisticRegression', 'SupportVectorMaching', 'KNearestNeighbors'],\n        'Accuracy': [f\"{logistic_acc} %\", f\"{svc_score} %\", f\"{knn_acc} %\"]\n    }\n)\n\nmodelvacc","e2f30af5":"yhat = knn_model.predict(test_data)","27712a5c":"op_data = pd.DataFrame({\n        \"PassengerId\": test_dataset['PassengerId'],\n        \"Survived\":  yhat\n    })\n\nop_data.to_csv('knn.csv', index=False)","61852c4f":"### Logistic Regression","8f5a61f0":"## Building The ML Model","e1707089":"### Observing the data","b4c5c9ee":"## Submission","bc419a04":"### Support Vector Machine","872f00dd":"### K Nearest Neighbors","3d48cfd2":"## Data Preprocessing","3f443341":"## Importing Common Packages","51552364":"#### Going with Logistic Regression","f10da088":"## Reading the Dataset","ba082142":"## Observations\n* Alphanumeric data in Cabin and Ticket columns.\n* Catergorical data in Sex, Embarked.\n* Null values in Fare will be replaced by mean of the column as the outliers are very less.\n* Null values in Age, Embarked, Cabin.\n    * Dropping Cabin and Tickets feild.\n    * As shown in the plot above, since the outliers are very less, Missing value in 'Age' column will be replaced by Mean of \n        the column.\n    * For Embarked, Since there are only two null values, I am going to replace it with the most common value in this dataset, \n        'S'.\n* Name has to be Considered, as it can be used to get more clarity on parch column [based on Mrs prefix], and also different rankings are available, maybe they have a impact on survivors."}}