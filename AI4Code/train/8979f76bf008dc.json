{"cell_type":{"fbbc98a7":"code","39d3cbb2":"code","99c5b3a7":"code","8855bca2":"code","5e95dd3d":"code","e174a289":"code","7e4a8db7":"code","6e3ee421":"code","302526f0":"code","cbf1300e":"markdown","af5338c5":"markdown","005579c2":"markdown","58500fb7":"markdown","738fae96":"markdown","09d769d0":"markdown"},"source":{"fbbc98a7":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport os  \nimport cv2\nimport keras\nimport seaborn as sns\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom random import sample\nfrom keras.models import load_model\nfrom time import time\nfrom sklearn.metrics import classification_report\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom sklearn.model_selection import KFold","39d3cbb2":"file=os.listdir('..\/input\/chess-positions\/dataset\/train\/')\ntest=os.listdir('..\/input\/chess-positions\/dataset\/test\/')","99c5b3a7":"def tran(t):\n    T={'B':0,'b':1,'K':2,'k':3,'Q':4,'q':5,'R':6,'r':7,'P':8,'p':9,'N':10,'n':11,'F':12}\n    return T[t]\n\ndef tran_t(t):\n    T={0:'B',1:'b',2:'K',3:'k',4:'Q',5:'q',6:'R',7:'r',8:'P',9:'p',10:'N',11:'n'}\n    return T[t]","8855bca2":"def make_name(y):\n    str1=''\n    count=0\n    for n in range(64):\n        if n!=0 and n%8==0:\n            if count!=0:\n                str1+=str(count)\n            count=0\n            str1+='-'\n        if y[n]==12:\n            count+=1\n        else:\n            if count!=0:\n                str1+=str(count)\n            count=0\n            str1+=tran_t(y[n])\n        if n==63 and count!=0:\n            str1+=str(count)\n    return str1+'.jpeg'","5e95dd3d":"def read_picture(name,location='train'):\n    img = cv2.imread('..\/input\/chess-positions\/dataset\/'+location+'\/'+name,cv2.IMREAD_GRAYSCALE) \n    name_t=name.split('.')[0] #Convert FEN code to labels\n    po=name_t.split('-')\n    index=np.zeros((8,8))\n\n    for n in range(8):\n        temp=[]\n        for t in po[n]:\n            if t>='1' and t<='8':\n                for num in range(int(t)):\n                    temp.append(int(12))\n            elif t>='A' and t<='z':\n                temp.append(tran(t))\n        index[n,:]=np.intc(temp)\n\n    size=50 #Divide the picture into 64 pieces\n    index2=np.zeros((64,size**2))\n    for i in range(8):\n        for j in range(8):\n            index2[i*8+j,:]=np.array(img)[i*size:(i+1)*size,j*size:(j+1)*size].reshape(1,size**2)\n\n    y_1=np.zeros((64,13))\n    y_1[range(64),index.reshape(1,-1)[0].astype('int64')]=1\n\n    return index2,y_1","e174a289":"def cnn_build():\n    cnn = Sequential()\n    cnn.add(Conv2D(32, (3, 3), padding='same',input_shape=(50,50,1)))\n    cnn.add(Activation('relu'))\n    cnn.add(Conv2D(32, (3, 3)))\n    cnn.add(Activation('relu'))\n    cnn.add(MaxPooling2D(pool_size=(2, 2)))\n    cnn.add(Dropout(0.25))\n    cnn.add(Conv2D(64, (3, 3), padding='same'))\n    cnn.add(Activation('relu'))\n    cnn.add(Conv2D(64, (3, 3)))\n    cnn.add(Activation('relu'))\n    cnn.add(MaxPooling2D(pool_size=(2, 2)))\n    cnn.add(Dropout(0.25))\n    cnn.add(Flatten())\n    cnn.add(Dense(512))\n    cnn.add(Activation('relu'))\n    cnn.add(Dropout(0.5))\n    cnn.add(Dense(13))\n    cnn.add(Activation('softmax'))\n    rms = keras.optimizers.RMSprop(lr=0.00005, decay=1e-6)\n    cnn.compile(loss='categorical_crossentropy',optimizer=rms,metrics=['accuracy'])\n    return cnn","7e4a8db7":"#Example of reading a certain picture\nname='1b1B1b2-2pK2q1-4p1rB-7k-8-8-3B4-3rb3.jpeg'\nimg = cv2.imread('..\/input\/chess-positions\/dataset\/train\/'+name,cv2.IMREAD_GRAYSCALE) \nplt.imshow(img.reshape(400,400),cmap=plt.cm.gray)\nplt.xticks(())\nplt.yticks(())\n\nindex2,y_1=read_picture(name,location='train')\n\nplt.figure(figsize=(15, 15))\nplt.suptitle(\"1b1B1b2-2pK2q1-4p1rB-7k-8-8-3B4-3rb3\", size=16)\nfor i in range(64):\n    plt.subplot(8, 8, i+1)\n    plt.imshow(index2[i,:].reshape(50,50),cmap=plt.cm.gray)\n    plt.title(np.argmax(y_1,axis=1).reshape(1,-1)[0][i])\n    plt.xticks(())\n    plt.yticks(())\n","6e3ee421":"Time=[]\nsize=50\nloss=[]\nacc=[]\nstart=time()\n\ncnn=cnn_build()\n\nfor ep in range(6000):\n    \n    chess=np.zeros((1,size**2))\n    label=np.zeros((1,13))\n\n    for name in sample(file,1):  #Randomly select one picture\n        \n        index2,y_1=read_picture(name,location='train')\n\n        X_noempty=index2[y_1[:,12]==0] #Balance the number of empty blocks and the pieces\n        y_noempty=y_1[y_1[:,12]==0]\n        X_empty=index2[y_1[:,12]==1][0:len(y_noempty)\/\/2,:]\n        y_empty=y_1[y_1[:,12]==1][0:len(y_noempty)\/\/2,:]\n\n        chess=np.concatenate((chess,X_noempty,X_empty), axis=0)\n        chess=chess\/255 #Do the normalization\n        label=np.concatenate((label,y_noempty,y_empty))\n        \n    # Train CNN\n    train_history=cnn.fit(chess[1:,].reshape(len(chess)-1,50,50,1), label[1:,], epochs=10, batch_size=10,verbose=False)\n    #acc.append(train_history.history['acc'][-1])\n    #loss.append(train_history.history['loss'][-1])\n\n\n\n#Test on test set\ny_res=[]\ny_res_class=np.zeros((1,1))\ny_ture=np.zeros((1,1))\nfor name in test:\n\n    chess2,y_1=read_picture(name,location='test')\n    chess2=chess2\/255\n    y_pre=np.argmax(cnn.predict(chess2.reshape(len(chess2),50,50,1)),axis=1)\n    y_res.append(make_name(y_pre))\n    \n    y_res_class=np.concatenate((y_res_class,y_pre[:,np.newaxis]))\n    y_ture=np.concatenate((y_ture,np.argmax(y_1,axis=1)[:,np.newaxis]),axis=0)\n\nClassifi_R=classification_report(y_ture[1:,], y_res_class[1:,],output_dict=True)\nA=np.mean(np.array(y_res)==np.array(test))\n\n\nTime.append(time()-start)\n\nprint('Accuracy:',A)\nprint('Time used:',Time[0])","302526f0":"print(classification_report(y_ture[1:,], y_res_class[1:,],output_dict=False))","cbf1300e":"Here is a example of reading a certain picture (1b1B1b2-2pK2q1-4p1rB-7k-8-8-3B4-3rb3.jpeg)","af5338c5":"Load data","005579c2":"Our picture reading function for dividing the picture into 64 samll blocks","58500fb7":"Function for transforming between labels and numbers.\n\nFor example we use 0 to represent white bishop (B), 12 for empty block (F)","738fae96":"Our CNN model. Here use the CNN model from Keras document [CIFAR10-CNN](http:\/\/keras.io\/examples\/cifar10_cnn\/). This model is used for CIFAR10.\nEvery time we randomly select one picture from training set and divide it into 64 small blocks. To balance the number of smaple of block with pieces and empty block every time we reduce the number of empty block to the same as the number of pieces. Then use the samples for training. This procedure will repeat 6000 times.","09d769d0":"Function for generating a FEN code from predicted labels"}}