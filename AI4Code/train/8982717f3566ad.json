{"cell_type":{"df56fb78":"code","6290e000":"code","0ac72aaa":"code","4d57ee50":"code","5794ed3f":"code","20eac377":"code","be7aef9d":"code","6cb762bf":"code","252a06d1":"code","a2c235dd":"code","dfd821f8":"code","ca6f85a9":"code","48921621":"code","c47dda2f":"code","a01fafd9":"code","f12197a6":"code","577e13c3":"code","6358dc0d":"code","54ec54f0":"code","82fa64b2":"code","939610eb":"code","3ce47423":"code","8d41624b":"code","8cf73ae0":"code","1ebedbc8":"code","bca9e05a":"code","e2aa4d3a":"code","465938ee":"code","f3a934ef":"code","9b75503b":"code","08ff0c7a":"code","2edcb4e4":"code","746a54d8":"code","2fc7ad41":"code","a4d97bca":"code","07b758e1":"code","391b1307":"code","275ea483":"code","079706f8":"code","d51cf299":"code","37c35c59":"code","d9688678":"code","e808836c":"code","d322fe89":"code","4ad4aeb4":"code","cd1d9417":"code","a389d160":"code","03fec7fd":"code","541c44c6":"code","d6aa47d8":"code","3fafd713":"code","fb88ef91":"code","896cb358":"code","0dd3a53b":"code","786774b2":"code","f73d2473":"code","16411b3f":"code","a175d918":"code","8d283ea8":"code","cee1e29d":"code","932f338c":"code","183c22bf":"code","4dfec3e8":"code","94d8d85e":"code","6ceeef4f":"code","7e843057":"code","b6a0af9f":"code","e52a8a65":"code","5b043792":"code","1b4b1950":"code","e9327516":"code","dce90fcc":"code","f49bf0cd":"code","b76b931f":"code","f874bae1":"code","a494f28e":"code","c13766b9":"code","3872b66d":"code","c2ce060d":"code","88b6e6f9":"code","77f36fbb":"code","d0438a90":"code","e34536bc":"code","5df90867":"code","2e1237fe":"code","04d9fe2f":"code","5f721b71":"code","e3eaebaf":"code","cfd43494":"code","261c31e2":"code","a95eaffe":"code","0d000405":"code","416ac0fd":"code","657a7ec8":"code","0ea187e1":"code","d09446ec":"code","b577ad0f":"code","834c7576":"code","e362674b":"code","8891a864":"code","d44c1c89":"code","3b724bad":"code","33e7a32b":"code","3a16d232":"code","29652d28":"code","8c56dbdb":"code","2f985058":"code","1490592c":"code","825ee865":"code","2b5999c0":"code","be54f9ae":"code","fbe0c7b3":"code","d322dbde":"code","86ac583a":"code","fb5a503e":"code","5d07fda0":"code","3ec0ee1c":"code","d97d6502":"code","21abf91d":"code","cdfe150d":"code","3297039b":"code","8a594b74":"code","8f9bc23b":"code","cffffc7e":"markdown","dcc5f4cb":"markdown","24697b3e":"markdown","00652f33":"markdown","09e4260f":"markdown","6bac401b":"markdown","95d43826":"markdown","0f5cb9ef":"markdown","b1e059cd":"markdown","44c988df":"markdown","a99add12":"markdown","828abece":"markdown","f46dc43e":"markdown","8cb7c728":"markdown","2992ccef":"markdown","b7d470b6":"markdown","e2093697":"markdown","1ce2725e":"markdown","98ca2b92":"markdown","313fc1cb":"markdown","7615dad9":"markdown","7d11691a":"markdown","f4b427f8":"markdown","1c42d3d9":"markdown","1cafbe8a":"markdown","e4ebc902":"markdown","748d1d1c":"markdown","282e1da4":"markdown","9e518ca7":"markdown","93afbb3c":"markdown","630eb291":"markdown","4c54433f":"markdown","c7cab1e7":"markdown","c94e9f62":"markdown","c934bafb":"markdown","47c055c7":"markdown","b7c0df47":"markdown","f96a1ca0":"markdown","85d67e09":"markdown","619e2644":"markdown","389e8db8":"markdown","f00a1362":"markdown","7e50109b":"markdown","8ce57f62":"markdown","511ad116":"markdown","b30ad0f1":"markdown","03b58983":"markdown","6bf58430":"markdown","3b70c8ee":"markdown","1f74eafe":"markdown","83313996":"markdown","42d01a4b":"markdown","05520f29":"markdown","c097c805":"markdown","fd54a3a4":"markdown","501dbc75":"markdown","f9de2b54":"markdown","c54f506e":"markdown","028ad3c7":"markdown"},"source":{"df56fb78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n  #  for filename in filenames:\n   #     print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6290e000":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)import seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","0ac72aaa":"netflix_overall=pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\nnetflix_overall.head()","4d57ee50":"netflix_overall.count()","5794ed3f":"netflix_shows=netflix_overall[netflix_overall['type']=='TV Show']\n","20eac377":"netflix_movies=netflix_overall[netflix_overall['type']=='Movie']","be7aef9d":"sns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"type\", data=netflix_overall, palette=\"Set2\")","6cb762bf":"netflix_date = netflix_shows[['date_added']].dropna()\nnetflix_date['year'] = netflix_date['date_added'].apply(lambda x : x.split(', ')[-1])\nnetflix_date['month'] = netflix_date['date_added'].apply(lambda x : x.lstrip().split(' ')[0])\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][::-1]\ndf = netflix_date.groupby('year')['month'].value_counts().unstack().fillna(0)[month_order].T\nplt.figure(figsize=(10, 7), dpi=200)\nplt.pcolor(df, cmap='afmhot_r', edgecolors='white', linewidths=2) # heatmap\nplt.xticks(np.arange(0.5, len(df.columns), 1), df.columns, fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(df.index), 1), df.index, fontsize=7, fontfamily='serif')\n\nplt.title('Netflix Contents Update', fontsize=12, fontfamily='calibri', fontweight='bold', position=(0.20, 1.0+0.02))\ncbar = plt.colorbar()\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","252a06d1":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"rating\", data=netflix_movies, palette=\"Set2\", order=netflix_movies['rating'].value_counts().index[0:15])","a2c235dd":"imdb_ratings=pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb ratings.csv',usecols=['weighted_average_vote'])\nimdb_titles=pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb movies.csv', usecols=['title','year','genre'])\nratings = pd.DataFrame({'Title':imdb_titles.title,\n                    'Release Year':imdb_titles.year,\n                    'Rating': imdb_ratings.weighted_average_vote,\n                    'Genre':imdb_titles.genre})\nratings.drop_duplicates(subset=['Title','Release Year','Rating'], inplace=True)\nratings.shape","dfd821f8":"ratings.dropna()\njoint_data=ratings.merge(netflix_overall,left_on='Title',right_on='title',how='inner')\njoint_data=joint_data.sort_values(by='Rating', ascending=False)","ca6f85a9":"import plotly.express as px\ntop_rated=joint_data[0:10]\nfig =px.sunburst(\n    top_rated,\n    path=['title','country'],\n    values='Rating',\n    color='Rating')\nfig.show()","48921621":"country_count=joint_data['country'].value_counts().sort_values(ascending=False)\ncountry_count=pd.DataFrame(country_count)\ntopcountries=country_count[0:11]\ntopcountries","c47dda2f":"import plotly.express as px\ndata = dict(\n    number=[1063,619,135,60,44,41,40,40,38,35],\n    country=[\"United States\", \"India\", \"United Kingdom\", \"Canada\", \"Spain\",'Turkey','Philippines','France','South Korea','Australia'])\nfig = px.funnel(data, x='number', y='country')\nfig.show()","a01fafd9":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"release_year\", data=netflix_movies, palette=\"Set2\", order=netflix_movies['release_year'].value_counts().index[0:15])","f12197a6":"countries={}\nnetflix_movies['country']=netflix_movies['country'].fillna('Unknown')\ncou=list(netflix_movies['country'])\nfor i in cou:\n    #print(i)\n    i=list(i.split(','))\n    if len(i)==1:\n        if i in list(countries.keys()):\n            countries[i]+=1\n        else:\n            countries[i[0]]=1\n    else:\n        for j in i:\n            if j in list(countries.keys()):\n                countries[j]+=1\n            else:\n                countries[j]=1","577e13c3":"countries_fin={}\nfor country,no in countries.items():\n    country=country.replace(' ','')\n    if country in list(countries_fin.keys()):\n        countries_fin[country]+=no\n    else:\n        countries_fin[country]=no\n        \ncountries_fin={k: v for k, v in sorted(countries_fin.items(), key=lambda item: item[1], reverse= True)}\n","6358dc0d":"plt.figure(figsize=(8,8))\nax = sns.barplot(x=list(countries_fin.keys())[0:10],y=list(countries_fin.values())[0:10])\nax.set_xticklabels(list(countries_fin.keys())[0:10],rotation = 90)\n","54ec54f0":"netflix_movies['duration']=netflix_movies['duration'].str.replace(' min','')\nnetflix_movies['duration']=netflix_movies['duration'].astype(str).astype(int)\nnetflix_movies['duration']","82fa64b2":"sns.set(style=\"darkgrid\")\nsns.kdeplot(data=netflix_movies['duration'], shade=True)","939610eb":"from collections import Counter\n\ngenres=list(netflix_movies['listed_in'])\ngen=[]\n\nfor i in genres:\n    i=list(i.split(','))\n    for j in i:\n        gen.append(j.replace(' ',\"\"))\ng=Counter(gen)","3ce47423":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom PIL import Image\n\ntext = list(set(gen))\nplt.rcParams['figure.figsize'] = (13, 13)\n\n#assigning shape to the word cloud\nmask = np.array(Image.open('..\/input\/masks\/star.png'))\nwordcloud = WordCloud(max_words=1000000,background_color=\"white\",mask=mask).generate(str(text))\n\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","8d41624b":"g={k: v for k, v in sorted(g.items(), key=lambda item: item[1], reverse= True)}\n\n\nfig, ax = plt.subplots()\n\nfig = plt.figure(figsize = (10, 10))\nx=list(g.keys())\ny=list(g.values())\nax.vlines(x, ymin=0, ymax=y, color='green')\nax.plot(x,y, \"o\", color='maroon')\nax.set_xticklabels(x, rotation = 90)\nax.set_ylabel(\"Count of movies\")\n# set a title\nax.set_title(\"Genres\");","8cf73ae0":"countries1={}\nnetflix_shows['country']=netflix_shows['country'].fillna('Unknown')\ncou1=list(netflix_shows['country'])\nfor i in cou1:\n    #print(i)\n    i=list(i.split(','))\n    if len(i)==1:\n        if i in list(countries1.keys()):\n            countries1[i]+=1\n        else:\n            countries1[i[0]]=1\n    else:\n        for j in i:\n            if j in list(countries1.keys()):\n                countries1[j]+=1\n            else:\n                countries1[j]=1","1ebedbc8":"countries_fin1={}\nfor country,no in countries1.items():\n    country=country.replace(' ','')\n    if country in list(countries_fin1.keys()):\n        countries_fin1[country]+=no\n    else:\n        countries_fin1[country]=no\n        \ncountries_fin1={k: v for k, v in sorted(countries_fin1.items(), key=lambda item: item[1], reverse= True)}\n","bca9e05a":"# Set the width and height of the figure\nplt.figure(figsize=(15,15))\n\n# Add title\nplt.title(\"Content creating countries\")\n\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(y=list(countries_fin1.keys()), x=list(countries_fin1.values()))\n\n# Add label for vertical axis\nplt.ylabel(\"Arrival delay (in minutes)\")","e2aa4d3a":"features=['title','duration']\ndurations= netflix_shows[features]\n\ndurations['no_of_seasons']=durations['duration'].str.replace(' Season','')\n\n#durations['no_of_seasons']=durations['no_of_seasons'].astype(str).astype(int)\ndurations['no_of_seasons']=durations['no_of_seasons'].str.replace('s','')","465938ee":"durations['no_of_seasons']=durations['no_of_seasons'].astype(str).astype(int)\n","f3a934ef":"t=['title','no_of_seasons']\ntop=durations[t]\n\ntop=top.sort_values(by='no_of_seasons', ascending=False)","9b75503b":"top20=top[0:20]\ntop20.plot(kind='bar',x='title',y='no_of_seasons', color='red')","08ff0c7a":"bottom=top.sort_values(by='no_of_seasons')\nbottom=bottom[20:50]\n\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(header=dict(values=['Title', 'No of seasons']),\n                 cells=dict(values=[bottom['title'],bottom['no_of_seasons']],fill_color='lavender'))\n                     ])\nfig.show()","2edcb4e4":"genres=list(netflix_shows['listed_in'])\ngen=[]\n\nfor i in genres:\n    i=list(i.split(','))\n    for j in i:\n        gen.append(j.replace(' ',\"\"))\ng=Counter(gen)","746a54d8":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\ntext = list(set(gen))\n\nmask=np.array(Image.open('..\/input\/masks\/upvote.png'))\nwordcloud = WordCloud(max_words=1000000,background_color=\"black\",mask=mask).generate(str(text))\nplt.rcParams['figure.figsize'] = (13, 13)\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","2fc7ad41":"us_series_data=netflix_shows[netflix_shows['country']=='United States']","a4d97bca":"oldest_us_series=us_series_data.sort_values(by='release_year')[0:20]","07b758e1":"fig = go.Figure(data=[go.Table(header=dict(values=['Title', 'Release Year'],fill_color='paleturquoise'),\n                 cells=dict(values=[oldest_us_series['title'],oldest_us_series['release_year']],fill_color='pink'))\n                     ])\nfig.show()","391b1307":"newest_us_series=us_series_data.sort_values(by='release_year', ascending=False)[0:50]","275ea483":"fig = go.Figure(data=[go.Table(header=dict(values=['Title', 'Release Year'],fill_color='yellow'),\n                 cells=dict(values=[newest_us_series['title'],newest_us_series['release_year']],fill_color='lavender'))\n                     ])\nfig.show()","079706f8":"netflix_fr=netflix_overall[netflix_overall['country']=='France']\nnannef=netflix_fr.dropna()\nimport plotly.express as px\nfig = px.treemap(nannef, path=['country','director'],\n                  color='director', hover_data=['director','title'],color_continuous_scale='Purples')\nfig.show()\n","d51cf299":"newest_fr_series=netflix_fr.sort_values(by='release_year', ascending=False)[0:20]","37c35c59":"newest_fr_series","d9688678":"fig = go.Figure(data=[go.Table(header=dict(values=['Title', 'Release Year']),\n                 cells=dict(values=[newest_fr_series['title'],newest_fr_series['release_year']]))\n                     ])\nfig.show()","e808836c":"topdirs=pd.value_counts(netflix_overall['duration'])\nfig = go.Figure([go.Bar(x=topdirs.index, y=topdirs.values , text=topdirs.values,marker_color='indianred')])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.show()","d322fe89":"from sklearn.feature_extraction.text import TfidfVectorizer","4ad4aeb4":"#removing stopwords\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\nnetflix_overall['description'] = netflix_overall['description'].fillna('')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(netflix_overall['description'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape\n","cd1d9417":"# Import linear_kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","a389d160":"indices = pd.Series(netflix_overall.index, index=netflix_overall['title']).drop_duplicates()","03fec7fd":"def get_recommendations(title, cosine_sim=cosine_sim):\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return netflix_overall['title'].iloc[movie_indices]","541c44c6":"get_recommendations('Peaky Blinders')","d6aa47d8":"get_recommendations('Mortel')","3fafd713":"filledna=netflix_overall.fillna('')\nfilledna.head(2)","fb88ef91":"def clean_data(x):\n        return str.lower(x.replace(\" \", \"\"))","896cb358":"features=['title','director','cast','listed_in','description']\nfilledna=filledna[features]","0dd3a53b":"for feature in features:\n    filledna[feature] = filledna[feature].apply(clean_data)\n    \nfilledna.head(2)","786774b2":"def create_soup(x):\n    return x['title']+ ' ' + x['director'] + ' ' + x['cast'] + ' ' +x['listed_in']+' '+ x['description']","f73d2473":"filledna['soup'] = filledna.apply(create_soup, axis=1)\n","16411b3f":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(filledna['soup'])\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","a175d918":"filledna=filledna.reset_index()\nindices = pd.Series(filledna.index, index=filledna['title'])","8d283ea8":"def get_recommendations_new(title, cosine_sim=cosine_sim):\n    title=title.replace(' ','').lower()\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return netflix_overall['title'].iloc[movie_indices]","cee1e29d":"get_recommendations_new('PK', cosine_sim2)","932f338c":"get_recommendations_new('Peaky Blinders', cosine_sim2)","183c22bf":"get_recommendations_new('The Hook Up Plan', cosine_sim2)","4dfec3e8":"books=pd.read_csv('\/kaggle\/input\/goodbooks-10k\/books.csv')\nbooks['original_title']=books['original_title'].str.lower()\nx=netflix_overall\nx['title']=x['title'].str.lower()\nt=x.merge(books, left_on='title', right_on='original_title', how=\"inner\")","94d8d85e":"t.shape","6ceeef4f":"import plotly.graph_objects as go\n\nlabels = ['Shows from books','Shows not from books']\nvalues = [248,6234]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()","7e843057":"#https:\/\/www.kaggle.com\/niharika41298\/netflix-visualizations-recommendation-eda#data","b6a0af9f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)import seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px","e52a8a65":"netflix_overall = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\nnetflix_overall.head()","5b043792":"netflix_shows = netflix_overall[netflix_overall['type']=='TV Show']\nnetflix_movies = netflix_overall[netflix_overall['type']=='Movie']","1b4b1950":"sns.countplot(x='type',data=netflix_overall)\nplt.title('Countplot by Film Type')\nplt.figure(figsize=(20,15))\nplt.show()","e9327516":"netflix_date = netflix_shows[['date_added']].dropna()\nnetflix_date.head()","dce90fcc":"netflix_date['year'] = netflix_date['date_added'].apply(lambda x: x.split(',')[-1])","f49bf0cd":"netflix_date['month'] = netflix_date['date_added'].apply(lambda x: x.lstrip().split(' ')[0])","b76b931f":"plt.figure(figsize=(12,10))\nsns.set(style='darkgrid')\n\nax = sns.countplot(x='rating',data=netflix_movies,order=netflix_movies['rating'].value_counts().index)\nplt.title('Ratings Count')\nplt.show()","f874bae1":"pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb ratings.csv').columns","a494f28e":"pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb movies.csv').columns","c13766b9":"imdb_ratings = pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb ratings.csv',usecols=['weighted_average_vote'])\nimdb_titles = pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb movies.csv',usecols=['title','year','genre','usa_gross_income','worlwide_gross_income'])\n\nratings = pd.DataFrame({'Title':imdb_titles.title,'Release Year':imdb_titles.year,'Rating':imdb_ratings.weighted_average_vote,\n                        'Genre':imdb_titles.genre,'worldwide_gross_income':imdb_titles.worlwide_gross_income})\nratings.head()","3872b66d":"ratings.drop_duplicates(subset=['Title','Release Year','Rating'],inplace=True)","c2ce060d":"ratings.head()","88b6e6f9":"joint_data = pd.merge(right=netflix_overall,left=ratings,left_on='Title',right_on='title',how='inner')\njoint_data = joint_data.sort_values(by='Rating',ascending=False)","77f36fbb":"top_rated = joint_data[0:10]\nfig = px.sunburst(top_rated,path=['title','country'],values='Rating',color='Rating')\nfig.show()","d0438a90":"topcountries= pd.DataFrame(joint_data['country'].value_counts().sort_values(ascending=False)).head(10)\ntopcountries","e34536bc":"#yearwise analysis\nplt.figure(figsize=(12,10))\nsns.set(style='darkgrid')\nax= sns.countplot(y='release_year',data=netflix_movies,palette='Set2',order=netflix_movies['release_year'].value_counts().index[0:15])\nplt.title('Release by Year')\nplt.show()","5df90867":"joint_data.head()","2e1237fe":"joint_data['type'].unique()","04d9fe2f":"joint_data.head()","5f721b71":"joint_data['Genre'] = joint_data['Genre'].apply(lambda x: x.split(',')[0])","e3eaebaf":"plt.figure(figsize=(18,12))\nsns.distplot(joint_data['Rating'],kde=False)\nplt.title('Genre: Distribution Plot')\nplt.show()","cfd43494":"plt.figure(figsize=(18,10))\njoint_data['Genre'].value_counts().plot(kind='bar')\nplt.title('Movie Genre: Bar Chart')\nplt.show()","261c31e2":"joint_data['Genre']","a95eaffe":"sns.distplot(joint_data['Rating'])","0d000405":"joint_data['Genre'].value_counts()","416ac0fd":"px.histogram(data_frame=joint_data[joint_data['Genre']=='Drama'],x='Rating',facet_col='Genre')","657a7ec8":"px.histogram(data_frame=joint_data[joint_data['Genre']=='Comedy'],x='Rating',facet_col='Genre')","0ea187e1":"px.histogram(data_frame=joint_data[joint_data['Genre']=='Action'],x='Rating',facet_col='Genre')","d09446ec":"px.histogram(data_frame=joint_data[joint_data['Genre']=='Action'],x='Rating',facet_col='Genre')","b577ad0f":"joint_data.groupby('director').sum()","834c7576":"joint_data[['worldwide_gross_income']].dropna().head(10)","e362674b":"rev = []\nfor i in joint_data['worldwide_gross_income'].dropna():\n    a = i.split('$')[-1]\n    \n    for i in a:\n        b = a.split('INR')[-1]\n        \n        for i in b:\n            c=b.split('PKR')[-1]\n            rev.append(c)\n            \n    \n","8891a864":"pd.DataFrame(rev).astype(str)","d44c1c89":"netflix_overall['duration'].sample(20)","3b724bad":"netflix_overall_excl_season = netflix_overall.drop(netflix_overall[netflix_overall['duration'].str.contains('Season')].index,axis=0)","33e7a32b":"netflix_overall_excl_season.head()","3a16d232":"netflix_overall_excl_season['duration'] = netflix_overall_excl_season['duration'].apply(lambda x : x.split(' ')[0]).astype(float)","29652d28":"netflix_overall_excl_season.head()","8c56dbdb":"joint_data_excl_season = joint_data.drop(joint_data[joint_data['duration'].str.contains('Season')].index,axis=0)","2f985058":"joint_data_excl_season['duration'] = joint_data_excl_season['duration'].apply(lambda x : x.split(' ')[0]).astype(float)","1490592c":"joint_data_excl_season.columns","825ee865":"joint_data_excl_season['Genre'].value_counts()","2b5999c0":"joint_data_excl_season_sorted = joint_data_excl_season.query('Genre == [\"Drama\",\"Comedy\",\"Action\",\"Crime\",\"Horror\",\"Biography\",\"Adventure\",\"Animation\",\"Thriller\"]')","be54f9ae":"joint_data_excl_season_sorted.head()","fbe0c7b3":"joint_data_excl_season_sorted.columns","d322dbde":"joint_data_excl_season_sorted = joint_data_excl_season_sorted.drop(joint_data_excl_season_sorted[joint_data_excl_season_sorted['worldwide_gross_income'].isna()].index,axis=0)","86ac583a":"#$,INR,PKR","fb5a503e":"currency = []\nfor i in joint_data_excl_season_sorted['worldwide_gross_income']:\n    i = i.split('$')[-1]\n    i = i.split('INR')[-1]\n    i = i.split('PKR')[-1]\n    i = float(i)\n    currency.append(i)\n    \ncurrency = pd.DataFrame(currency,columns=['worldwide_gross_income_float'],index=joint_data_excl_season_sorted['title'])\n","5d07fda0":"joint_data_excl_season_sorted = pd.merge(left=joint_data_excl_season_sorted,right=currency,on='title')","3ec0ee1c":"joint_data_excl_season_sorted.info()","d97d6502":"plt.figure(figsize=(20,17))\nsns.scatterplot(data=joint_data_excl_season_sorted,x='Rating',y='worldwide_gross_income_float',hue='Genre')","21abf91d":"px.scatter(data_frame = joint_data_excl_season_sorted,x='Rating',y='worldwide_gross_income_float',color='Genre',hover_name='Title',title='Rating vs Worldwide Gross Income',\n          width=1800,height=900)","cdfe150d":"px.scatter(data_frame = joint_data_excl_season_sorted,x='Rating',y='worldwide_gross_income_float',color='Genre',hover_name='director')","3297039b":"px.box(data_frame=joint_data_excl_season_sorted,x='Genre',y='duration',title='Genre vs duration: Distribution Plot',width=1800,height=900)","8a594b74":"px.box(data_frame=joint_data_excl_season_sorted,x='Genre',y='Rating',width=1800,height=900,title='Genre vs Rating: BoxPlot')","8f9bc23b":"px.histogram(data_frame=joint_data_excl_season_sorted,x='duration',title='DurationLength',facet_row='Genre',height=3000,width=1500)","cffffc7e":"# Word Cloud for Genres","dcc5f4cb":"Hence, more accurate predictions are obtained.","24697b3e":"Thus, NCIS, Grey's Anatomy and Supernatural are amongst the tv series that have highest number of seasons.","00652f33":"There are about 16151 words described for the 6234 movies in this dataset.","09e4260f":"Please Upvote if you like the notebook \ud83d\ude00and share possible improvements in the comments.","6bac401b":"Content based filtering on the following factors:\n* Title\n* Cast\n* Director\n* Listed in\n* Plot","95d43826":"A word cloud is an image made of words that together resemble a cloudy shape.","0f5cb9ef":"# Content in France","b1e059cd":"# WordCloud for Genres.","44c988df":"From here on, the code is basically similar to the upper model except the fact that count vectorizer is used instead of tfidf.","a99add12":"# Content based filtering on multiple metrics","828abece":"<img src='data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAANEAAADxCAMAAABiSKLrAAAByFBMVEX\/\/\/9CQrr8\/Pz\/\/v\/\/\/\/wAAAD8\/\/7\/\/f\/\/\/\/s8JaHs6\/WCdLby8vL5+fn\/\/v39\/\/7R0dHu7u7Dw8M4NLb85+Pi4uLKysr+wL\/X8PDn+PbU8eqLi4uenp5dXV38iYeXl5eurq7+QkIAnYre3t7+8emCgoKxsbFVVVVqamrH7egAnoMXopSRkZHQ0u14eHhycnIrKyv9MRD\/3eNEr6VWVlaRlNVLS0u8v+Y\/Pz8kJCT6AAD97++Ky8Gu3NsTExNDQsD\/77L+4X39PSz99uT\/2WkbGxtDRbhEQcc4ODj\/g3\/+\/\/D\/11L\/IhsAeELi4vOtrORmZr44M75cWr+pq9tDRK40NbDDw+14d8pRTsiantIyLbFLTLKCgsFdXcFubcu+xubyiYn\/3cz5xLb\/npz\/va7+zc79rqn8OzUxKrv2koLtUEb0S17+59ctIsD74erP0+WipNT\/78v43Dn9zAD55pm9wfH8OTX1YWX9aVn\/JyggAJU3HY80h2ap3MFAL5Q2Gqp7b8DG9d0ATwAwj1l+t5kAfioAbipgoH82qWyCtZuqyroAdTRQn26bxakMilGGfLNRQpxzvI6r6MJjt7iH1NMAj4tdwbGp5txcu\/AgAAAXnUlEQVR4nO1diX\/bxpV+HECDEYPBRYHlhRI2RJCyeSixRMl2a+aoKVVry6ZkWbXsyKu0brRttqmbJt0odY6162wdO7vdbt1\/d9+AFEXqiEWKokT\/+JkmIQAE34d3zHvAzACgExD8B4TUP4O\/g0USvFr3CzY0lxq7NXbe\/mP7O6TxH0jbz7T8EIG2o\/cOpCH99vEJQIusLaK28a2\/mgQIaT0jZIdL87TsnLTWs3EMnFoOScj+xyd79yB7tjTed847gX3kbTkzx6Yh8JJORgUz6aTwF5ImENs3MslkMuOl8U01UriPb6dwVUYsWiUnzfEzmhZCpfC7Ku6cJLi+aAUHdHHPqJkCKwpiUz7pRjPJjA95J+fjL3AzAxwsA0BN5UpW72lZV3zDVc0Ry8xfITDioKw5202NuK531XV94o9EAXKG5eYc30IOmbSZn8LP8hUT\/yiaPjdHfNeHTNKMOjnB0knid+1ZKKaAu\/5sxjWSJd+N8iueV07BCDdGXIB0CryRtGFZPSekXjHFR1YcGUWYnYqCgXKZFzmYkyqu9EtZgoxQhnTwhYwL\/AruMJtGuUZsXGOONNYDlH3BCE8BeGUIVAolPHJSbFPxkEZZMCpdVQG\/PR89FjeygtPKR8S7+D37YoMRGuKkbZrgp4tukxEKkEnbGVxy80YWRS2bgpGqqoIRAT\/TYESajHKCUUo1Ob9KIJ8PGLklSLnm\/PE4Uiop5MTTjI7qTcII5FJNRlcdp4ii43KDEUfJk+XiRRQy5wEaKeRHkvjlnJOp6wjPDyp0vjxr2nVGJGCUn3eyUXK1PIk2jYwcPHEp15gS+2d4rxn5RcEFdcRRR1lkZI5ES9tWZxKOjCCdL9YZpcpZGy1IvWjykXJ5RLgVn7SC01Fn5CYDHeHXdulI7HnV9CbtOiNrCl1tFn\/GGFF7zciuH3JWSId+hNaXzhW3rU5sQkZq1qkzEsFbSO4YVokQNye+6WbUHT9C1yAwJfzIbmMktnE8SbhTwAjKJVzy0Ll6zwjSk1bUUr0Ry0tdJIIRvyis7oqwOtzC8bSDP4KM0AcCydO2e5GjnEKxrudNRjFORi3I5O1otijsLIgyglExijE6YCSWOB7SQoMjwty8ER\/8q74dPQZG2MDkiip4xVIeTVp4dtTFc4dNlJopFnNmFNsQksfTaflBo+jnSkmb4Gb0cztVQoHVIu6n4vqiFeQHKdwZzDzxi8VSClw8GRbukYKMSlT0N24L3aVRkUaxVHR77kdDDDHEEEMMMcQQQwwxxBBDDDHEEEMMMcQQQwwxxBBDDDHEEEP0FjrIsoSfGoAk4fJJy3N0aAuaxiBcKBQWCWPSSYvTAyiKHL5x81akVqss3QgzTTlpgY4OvlypzYVu3QrNzUWWCsL6Bhi6rGmFm7VQNVQRqFbnIrcZoBEOLJgiz4RWQju4NbdSYBLpiFJL\/87dXW737kgO2tgjaPBprdJCqFINzVVvdxofiGoYHJqdYVBcVwXic9hf9OOjg2C3I9VWRnNIKbS5qnZodr6Tzu707kGJZ23gzt4eTHu7S\/cUuiTDYrWyQyhYFARrN5VOtETA9SFvQdQiJGqhdiyvbALPGZbJPSAegK3ii1sGqL4Btm0cCx8ACoystvgQcsFwh\/9ClZUbTMHth4abNh3VTbl51bdKkEm5V02Actp37Cnu5QAyUSgaed+CkpHz8lPRY9IRY3Ih0mJxoWo1FFmKYNybq9wKa538qJ\/NJWE+lZ4nVmZeUCgLqzOh5CWjaavBKJ3kRjlVSqX9Y+voLcN0O6NKZFVZRVVVKpszcifBAa1uFmY9z7YyatYoBYyIYGR4pYwaMMKXPxVN2p6K9nlMhBSZL217T92NItMLTP1FBZVVu8OkDii5Lkqcdz3bz0Qnec6yrqCOZlNGToWppNieMSajhldWs57Bk8fGCOTFlaa5hapztbv3sX3S7gu9RaY7Sh08Dzwb\/LxBXCtK1JQV5UAMK4XeVDLE0AjXj5pW2gYzneKGeTx0MNGW769tqydUqd29E5YxqWNwD5U0d0\/TDk1p1yCV1iERxM3sHkVxnH042XItoBOJ1Co3l8OgYZKqMLa4UqnOTcudlBWkOf6G7IwVEZ8cm9kdqsEgl2NsXxV2Z7P6\/tL766t37i+iDcoyowSQ1WqtGrkhs84KpcaQHJ1IutY+IkciBNdCg9ExDmhBRtORdc65Drt85n6tWivIkt7NQRmV5CY0WaNMo1SmvKuDdQr5Rii0jorZ\/WOMYLt0A+SuEnCm0Lb6SlIknUmK1kFz3T0KK3Ohddhb38lsHaulRdJVnaTQ8fGxVlzGFx\/nfSmN76xUQutMY7slV+R1NLuZTtqjHdAPLr27C5f+dePSB33R0XSkUlnikrTbuhSGjWxtucPIgKCc0g+uXdpAB2qCMPrLn+s\/\/lGPZP5hTGNlVF2UYbfkWhjbp9rMPvb4CigL+geXfnVmDKQW\/dI+MppZq1SxBt9jXEzkr2uFzhkR\/cGlX9EzD4DqdBuKBP1jFF4JVSPTe42L3UFGVb7Hv16NB5d+fXn8wwfa5SbGLvdTR\/Kd2lz17q7aTmYEMPvenNGVjqM3vXbt2qVLlzb+7dIOfsNRR\/DjH\/WlPdLp8tLcyu229kgGnRU2K0szOuucEXy+Ma5eHqf0d+M7WqJa\/xgBkcNLlXVolVxWdFivosktMKnzWHdtTGE0rtEdoEPp\/WPExKWtWuR220qF3a+t3FhQFNiTS7wS9M0xQolCGaY\/sq7rQfSWaR91hOBLtVthhQVNukSwuVVk9CKluwwI3nxL11AtTel1HSjpMyO9sFldR98RFiYLtcHq5tr9bi8UI6ONa5fa8FtOf91XRhpWFLVVpgc6kbGSmN5cWUVz7E4AZMQ3xt5qxUdU6a+OGFZDK7XVoK5U2ILyxmZ1CaNcF3FOABmh0TFhbRrUW9kgZ+hb9NZ1bH00vro2d2smjC0RvxFaidzEKlbXMI9hnbMSVrfdDD2oL5xhfYx1WLsoDGMAmf73WiTy\/vrSSqSythoYoCYzDFgdH\/DNt6gy9rvfiRpCpmPic2y8nzpCoYEWlheZ9vHNtUikEopsLt3WFgozi8JoWEcX7OoQVscomh2WrpThkqhp+xnrFpfXkUW1gFGucGd1ffVOAXncjtTmbq2iFXbhSqijhtWd4Rt9tDqFiYs+7ON11Iu4+hhZlkVWqqHjMPj92lw1FKrUIquLaJHN2gk3MiZJui4+FQRhLMgNmIKtMa5CI9WEjpQxdUwkP4xdHqtnQX3I64RojK\/WmrckMAHXZGxV2QK5txbcbwlVQ5GVG4Tp2xVFvXzDXRRJIgtMDgIZrpfYexLFPEFTFFlHRhAfFzndTl433g9GkqJpi0uRUGWH0qqyoCGl8E1xHX977dpquJmXNwseDJDBsrjUE9Q\/D\/\/wztuCFW5qiXVN\/In1wY80SV68i3yasocqK0uLaDiLd+da745Va+vhbauT32vBw48evv3w4cO363jnk08++cM7f3zIqC4iwzgbF5ZZtzzG1H5kqroWfr\/tnkQoNLeko8\/QUCsh\/CNyj2oS0yWZPfwXxM9a8M42\/igYffKzPz7kTFgdFaH7sgja9UtB47p+\/BUfC64CtSojhJ7EJF1b3cUotPKpSPYk0TqJS64IPciq0fIa1qeM\/wHZaFR4lmC0celzrPuu\/YZvfP6mWPjteB9qWFYIVaqtklcrK\/eRkaLP1NoYVVF3YczGgyvIjQs8QXwLIMsi5i28957gJeJdoKMHZ8bfU9HgqDZeh9QHRnL7fbBQ5ValuogBHN1rs90Yq9XIpwsgYfYg6Q0IFpgiSTqRSMBOYooI7ZoikUBHZ6hC4KOfX25Y3Vi8D1dOwr+otDmMWL6N8ZmxTyPVdkqhyippzx20xl0YwS44PUEVJImVQax7cEZBnm+9y8fOfPjhZ5999ifeh1hXiFR2yR2q3p1B2e6EQru3VKrhDrIhYXUfEnSxBx9eptgwqWp\/2qPlSHW3Kqqb01hJr87d2k01FCl00A9A6OizjY\/eGvvRGa6gxcmoL6UPOppe2cMoFJnB9uhGbY\/yQrXbHVxvEH70Llrbh2f+Y2HjzLtnNiiWWv1gFNkjdyjyMSZChbXKHkprMx1UFW+OyaSe\/HBJLGhYr4hrqvSYI8N+jEJhTNoW1\/au74SRfu0tZTsm1pstDPki96b911FlSSdYE1X3Wl1HOrr2FpXqAGl7QdRH9Of9Z7TKRPJ982iM6Jsb43txGdujfjOqVGu\/F71u2fTRGLEz++LzX258\/kHfGd3H9UT7dK\/2OtLR2Edj++Gy8tH4sd613MfqVhZBk7E239wT1jthpClUkeq5BL7p9fcgnaW0r4yqqCQukiBNPRojXZPpHoBEdUq6uBnVEaNqtb0n59xNDHQaFut3Ky0QKVG19ql26NOL2V1zX0xgm51WMDXvOYk2zKzNtUeA6ua9ukBws7WcCEhFFru4EgmiWzxT+tYZnk2vrERasLKyuSxOp6LJ05uRdlSWmdJVpxc5fLyG1gYmLX5caMXHheB6AiNKuH1DobDIuu37fa\/QnXK7ATalrd6ugajoQJQ6e27rYbyQOr8zJpxSHX1jkPvB74IsyWxma9Qc7OEKrRA3a5a2tpZPWo7eQQNWGB0dvXuig2QUCvG4GLeDjciRg67GtHtbX4xuFZhycgNlMH+hf37ENEL1w\/dPPQg6C3\/51VdfbH0ta8qJjTiTsF3\/5j8ff4NqIkdOkwksb42OfrH11SLb042qb5AIKPDkL0+\/TehHT1mY8uUbhdE3bn85DSc4iE7SUU\/X\/\/L06ZP40Q\/mzUB49A0Iz3Q6RqbH0ODR06f\/9U3iyDoSvesEoxMfP0cVeP78+ZPeyBEwOt6xU68Gxrv4t\/D42yOHbyweZcFIh+Psrn4IEIx3aHLPv8UsXMS7rqXRNE2vMzoN0BX67WOso6G7rsRN1K3uFEDHBgn+9lh0yH9dGCmUEvjr9fhRTeYUMZJEE\/vicRxkSo9geaeGkQCVNPrsu7jEpCM406liJFHR2H6XAIWQ14MRWp3OFKSEVte1N50qRpRiY0ukR9cnJKXrARynipEARnE68d0jkAnoXempyag5JGxnvNuBz3FqHUPf63RDIgQTiOvPQOmyYdrREQHT920w1B0Shmnm9vtSfTCjUR+Pbpa6+d0DIe5pUSnx\/TMK3fXCbTLiYM+LYcpOdOekZ6PmyP5a8lxQy16waF\/s5ncPhiRRqkHiz88Esy7qixY\/SmXEu8kJkgsGzYNJzCsAqpBchWB0rFjLcR\/fUYlNxDZuCkY2b2zsEXQaf\/xXcYOhc5tuyVStWRP1UTLMcsbJpUrzNuQs9QoYU7ksV3M58SyeYqlsQT4\/a5Qnc3bWI242l0JGplNChSUdpNkbQgTDXvz5E6oQqeMjtjAi+YtJjlZnjngwm4dkHqYs1BGeeMdXRyyOIUOFaDl4NpSVAz7rGbPodOYkZKzgEVPiMUa9gU4wKsSf\/zWudB7FWxmBmStCLirMqGSBW4Ks0BFPluZd9WIQ+KK50izPp6HOyM6LhyWZk6Ts5HJXIJft2XwORHRwAvrt8zgy6jDiNRkFUdi8QpyAUS5gFOiolCJ5V50MHGXWtmdJcodRGn\/bnuRlw7bRYq2LXk9juYSUmKITvaODtkQG2yTWrNDR1W1GWfFQq3mDzAodCRVliT9PAh1NEWF1kzZRMdZl0pxjpACnx4+Do+zJ8wUJOrt5ss0I5fWnHMeDomFmg4ka\/AyUomYZPaeY8dUp4SO85ORzasrFGOeUzJwNbtlxzSlQc47j8ymn1OuR21R\/8jyudeZLTUYiFJtCaiJG\/eMLg7hYJqBiPMeYEAyzN3ELFwbITcLrXyHiTxNDhGr2PIHAzPXF40RwE\/LQ3tSaMzQfYtkmmXga265HSbbJ3XwwJoFjmTEAKRGFHD7HO3WZ6m7o8OL7hFbvtX4onHpGkiI9uz6hHf6a+KlnpMsSPLueCNqlQ1neqWcUIPH9I0Wih4t5g8EIEtcfYc1+KMsbCEYawYLpkUZfJ0YKTVx\/IQejdF6180AwChD\/\/gVgwf6DDd72\/aOgd2e\/BOsWuhIXd5h+2PKYprEg99bkPnYO6hISF5TYKxhJUsBIgqPfdz9+UEb587\/9MCN5cbHuRx+rR7xn0y\/Q58+pohxcL+nq6HJ49L\/DX78xCDoSUERZ+wPVBYPprf8ZDY1uFUAejOlmubhpxg4WljD7i69Gv9i6qWmDMcmxuN4KT67HD3QRRuDrra9Gt2aAdTnRw4ngBVI6IOZh0L69NTr6ZbjfMh0JBF58lzigpRUj4W59tTXdb5mOBB218+JpYv+uWbLow7u1tdhvoY4ETRjco6ff7Gt1IvcJb309GE1RO75BSgrd3\/m\/nhmkqNCApiSe\/q+4bbsPWEEdkNa1FYxKiaeP9k+vZbYwGI1rGxStTmnfbWLKhj7L0yPErz8BsnPVS4b27AgrC1ki7LjHgvQQEhWUdgQWo86JtANFolRnrKN5m08WFOT49092ru9iTi6xFmDThEqqd28bDChYV9DHz5uWpsQndiNGYxOHu9xySiAhi2cBI6Zg+Lvwj3OtOIv\/Ey\/P92f20Z5BaUQGJa7wC+f+HuctUGnsfGzifHyQdATi2lDgJlSiLy\/830tNbxnGx7T42YQ6aIwA6vN6osldiP\/0ZWuow0iHjOLn+zMvcc8R\/\/uFWPwnL2m8BVSKn4vFz\/dlytve4+U\/zmIk+HvsfAt+CoPM6MJPErFYTGWxFsQHnJFGdJlSrTm9tyxTiJ8dZEYyVTRJJ\/UwV\/8YaD9CRvquokinA291Ly+0Y2LAGcnaT3dh0CODDGI2LsawfsAlGV+DbnWyVre68zHl5fn6wqAzgkYFESexiX8GC4MevbGGxSRIjEEVk+ZzQgY9emvKhSD3OTsBL5tZ0EDrCCARGN0\/4wrWroHVSYPOSCEEC3XOaZzH61P\/D7zVnT2LRhfg9bA6JTYREwk4mhy+JRITg97CgiRmGKRocEzEunqmOtg60s8Lazt3NgYX6qY38FZHz\/5TRLsElRMi1CVErBtsq6PnYuIBSD+JBfP6iste+qAzOhtTFEbPT0gXzomLDudeA6uLsQVkhAlqTI3FEolBz72R0UQ8Ho6fn2A0noiL6WQHvIWV6dnA1s5N0PPn\/vEyLmZ5G3BGIC4\/qvG4clksKCJKDLYfyWImA1mqX\/iWxLClgWeki2taYqIHhOjBryj6YDPab23sXCI2sIxEE7QL53BN4uU5OoCdGxDhhGiB2oFrYnos1uWjbU4a+n5TcqI76Yo0oDrCMLdHcKrJukaVQemwOsQQQxwZZNcjozv45knPyHUAth8Q3cE3Wp+LfQpBQDWiHTys29p+UDlJHYs8vYDrpMqHnw4iYzR0w3s8PUbPQCDlQtoHw1KBWxaolgGqbXkqKsP2LG5YqEXfA9u2bICoUTTA8FUwfW\/+pEU\/EKm87ZhW0sqB41qq42dS3rzlFH2H5PKpsl+yeDFa8pIlK8tTGWvSi2aiDpStZPmkBT8QqWyxCE46NRLNoJukAWaNIrgpcMycrTpgZIxsKpdKGlCMTnEoGplkatbPA588acEPQGB1ZZL1PNvKA\/ipdkY5YmSiSdvj6D9FS0xlgHZn27gbOcVWl4K85edtg8xaUbNspNNeSTDKmg7qiBhF1TEMnolCyUimopOelbENPumlTy8jz8AQAFbeAjPt4n+MDlHwPIjyqMqjYOLmtMsNE6ImcX3xibvaacM6pQ1Sy6RSuxaDT9Jc39awkubGU4lA2m0Zg8X2BIfsvJOWCbeOYwaJIQ6Dndk\/Xh+Q18yckI3vn7QQvQUxHccw89j+EJJS1RTxsXH1Mz42UT2baKqvQINLp4hjqGWTEMfEVtbhajSp5jzH5QPpX0SkRWL2QGxGuaOqOZ4sqSmnmDVK9iDygUail1Uh5wEmQqbDwSr5Ys6snA2DqSMsgqZsv5QRk+ylS8mcnc+4ai6dVkv2ScvWHUTktrGis4Mlj6tY64GYxxJ6NUdg39FMdAQB3siKyClO4l6NOqVGftdYPM1p6RBDDDHE6cP\/AxkCNJHmvFF+AAAAAElFTkSuQmCC' >","f46dc43e":"# Lollipop plot of Genres vs their count on Netflix","8cb7c728":"# Year wise analysis","2992ccef":"# Lowest number of seasons.","b7d470b6":"# TOP 10 MOVIE CONTENT CREATING COUNTRIES","e2093697":"If the latest year 2019 is considered, January and December were the months when comparatively much less content was released.Therefore, these months may be a good choice for the success of a new release!","1ce2725e":"# My Code","98ca2b92":"Creating a \"soup\" or a \"bag of words\" for all rows.","313fc1cb":"## A little interesting history\n\nEven though it may look like Netflix is fairly new, it has been around since 1997! \n\nHere's a picture of the older Netflix website when rentals costed only 50 cents each and the website had only about 900 titles.\n\n![](https:\/\/producthabits.com\/wp-content\/uploads\/2018\/04\/Screenshot-2018-03-26-16.08.07.png)","7615dad9":"![](https:\/\/media.giphy.com\/media\/oenruB2DKC7p6\/giphy.gif)","7d11691a":"Filling null values with empty string.","f4b427f8":"Identifying features on which the model is to be filtered.","1c42d3d9":"Above table shows the oldest US tv shows on Netflix.","1cafbe8a":"Naturally, United States has the most content that is created on netflix in the tv series category.","e4ebc902":"So, 2017 was the year when most of the movies were released.","748d1d1c":"# TV shows with largest number of seasons","282e1da4":"# Most content creating countries","9e518ca7":"Countries with highest rated content.","93afbb3c":"# Loading the dataset","630eb291":"This recommendation is just based on the Plot.","4c54433f":"Here, The Cosine similarity score is used since it is independent of magnitude and is relatively easy and fast to calculate.\n\n<img src='https:\/\/i.stack.imgur.com\/36r1U.png'>","c7cab1e7":"# **Netflix is an application that keeps growing bigger and faster with its popularity, shows and content. This is an EDA or a story telling through its data along with a content-based recommendation system and a wide range of different graphs and visuals.**","c94e9f62":"![Made with \u2665](https:\/\/forthebadge.com\/images\/badges\/built-with-love.svg)\nPlease upvote if you liked the kernel! \ud83d\ude00","c934bafb":"For a detailed book recommendation system with both content and collaborative filtering click :\n    [Book Recommendation, EDA](https:\/\/www.kaggle.com\/niharika41298\/netflix-or-books-recommender-analysis-eda)","47c055c7":"# Movie ratings analysis","b7c0df47":"It is very interesting to note that the content in France is very rational. There is no director in the data who has a large number of movies. In my opinion, it shows how different directors are given a chance to showcase their talents. What do you think?","f96a1ca0":"Top rated 10 movies on Netflix are:","85d67e09":"These are some binge-worthy shows that are short and have only one season.","619e2644":"Therefore, it is clear that the dataset contains 12 columns for exploratory analysis.","389e8db8":"It can be inferred that having one season is the most preferred duration.","f00a1362":"It is seen that the model performs well, but is not very accurate.Therefore, more metrics are added to the model to improve performance.","7e50109b":"![image.png](attachment:image.png)","8ce57f62":"Therefore, it is clear that international movies, dramas and comedies are the top three genres that have the highest amount of content on Netflix.","511ad116":"Cleaning the data - making all the words lower case","b30ad0f1":"The above are latest released US television shows!","03b58983":"# Recommendation System (Content Based)","6bf58430":"# Top Duration","3b70c8ee":"The largest count of movies are made with the 'TV-MA' rating.\"TV-MA\" is a rating assigned by the TV Parental Guidelines to a television program that was designed for mature audiences only. \n\nSecond largest is the 'TV-14' stands for content that may be inappropriate for children younger than 14 years of age.\n\nThird largest is the  very popular 'R' rating.An R-rated film is a film that has been assessed as having material which may be unsuitable for children under the age of 17 by the Motion Picture Association of America; the MPAA writes \"Under 17 requires accompanying parent or adult guardian\".","1f74eafe":"# How many Netflix Shows\/ Movies are made from books as their storylines?","83313996":"The TF-IDF(Term Frequency-Inverse Document Frequency (TF-IDF) ) score is the frequency of a word occurring in a document, down-weighted by the number of documents in which it occurs. This is done to reduce the importance of words that occur frequently in plot overviews and therefore, their significance in computing the final similarity score.","42d01a4b":"So, a good amount of movies on Netflix are among the duration of 75-120 mins. It is acceptable considering the fact that a fair amount of the audience cannot watch a 3 hour movie in one sitting. Can you? :p","05520f29":"# Analysing IMDB ratings to get top rated movies on Netflix","c097c805":"# If a producer wants to release some content, which month must he do so?( Month when least amount of content is added)","fd54a3a4":"# Analysis of duration of movies","501dbc75":"# Analysis of Movies vs TV Shows.","f9de2b54":"Performing inner join on the ratings dataset and netflix dataset to get the content that has both ratings on IMDB and are available on Netflix.","c54f506e":"It is evident that there are more Movies on Netflix than TV shows.","028ad3c7":"# Analysis of TV SERIES on Netflix"}}