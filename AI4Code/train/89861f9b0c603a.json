{"cell_type":{"f91db0dd":"code","eb8cfe35":"code","e214d1dc":"code","838f98f9":"code","7f07306d":"code","b8edb369":"code","a9ce46f5":"code","e46ae5bc":"code","a1a069c5":"code","552e3503":"code","2d7b1315":"code","23c84232":"code","448e5c63":"code","5f77f675":"code","c761a8a2":"code","be2e39eb":"code","cdb7237f":"code","6b4b5a7d":"code","4ebc14f3":"code","d66480f9":"code","6bfd6db3":"code","20b9f86f":"code","b29939d1":"code","3eeadef7":"code","9243a9a3":"code","b7b84197":"markdown","ff79d839":"markdown","5557d95c":"markdown","a82d715a":"markdown","5cbe9659":"markdown","84bd51cb":"markdown","cb4babaa":"markdown","0c408e66":"markdown","ff97df37":"markdown","fa4dff69":"markdown","9be7522e":"markdown","c196cf49":"markdown","19e3a6b7":"markdown","24b9897c":"markdown","42acf43e":"markdown","25c0d3c6":"markdown","dec274d8":"markdown","997e4bfa":"markdown"},"source":{"f91db0dd":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eb8cfe35":"from csv import reader","e214d1dc":"def explore_data(dataset, start, end, rows_and_columns=False):\n    dataset_slice = dataset[start:end]    \n    for row in dataset_slice:\n        print(row)\n        print('\\n') # adds a new (empty) line after each row\n\n    if rows_and_columns:\n        print('Number of rows:', len(dataset))\n        print('Number of columns:', len(dataset[0]))","838f98f9":"appstore=\"\/kaggle\/input\/sample-app-store-for-apps-analysis\/AppleStore.csv\"\ngooglestore=\"\/kaggle\/input\/sample-google-play-for-apps-analysis\/googleplaystore.csv\"\n\napple = list(reader(open(appstore)))\nandroid = list(reader(open(googlestore)))","7f07306d":"columns_apple = explore_data(apple,0,1)\ncolumns_apple","b8edb369":"columns_android = explore_data(android,0,1)\ncolumns_android","a9ce46f5":"android[10473]","e46ae5bc":"del android[10473]","a1a069c5":"## Android DS\nduplicate_apps=[]\nunique_apps=[]\n\nfor i in android[1:]:\n    name= i[0]\n    if name in unique_apps:\n        duplicate_apps.append(name)\n    else:\n        unique_apps.append(name)\nprint(\"Google store\")\nprint(\"Duplicated apps: \", len(duplicate_apps))\nprint(\"Unique apps: \", len(unique_apps))","552e3503":"## Apple DS\nduplicate_apps=[]\nunique_apps=[]\n\nfor i in apple[1:]:\n    name= i[1]\n    if name in unique_apps:\n        duplicate_apps.append(name)\n    else:\n        unique_apps.append(name)\nprint(\"Apple store\")\nprint(\"Duplicated apps: \", len(duplicate_apps))\nprint(\"Unique apps: \", len(unique_apps))\n","2d7b1315":"reviews_max_android={}\nfor i in android[1:]:\n    name=i[0]\n    n_reviews= float(i[3])\n    if name in reviews_max_android and reviews_max_android[name] < n_reviews:\n        reviews_max_android[name]=n_reviews\n    elif name not in reviews_max_android:\n        reviews_max_android[name]=n_reviews\n        \nandroid_clean=[]\nalready_added_android=[]\n\nfor i in android[1:]:\n    name=i[0]\n    n_reviews= float(i[3])\n    if n_reviews == reviews_max_android[name] and name not in already_added_android:\n        android_clean.append(i)\n        already_added_android.append(name)\n        \nprint(\"Google store\")\nprint (\"Unique names with the highest reviews number: \",len(reviews_max_android))\nprint(\"Records in cleaned dataset for Google store: \",len(android_clean),\" (should match)\" )","23c84232":"def is_english_chars_in_string(string):\n    non_english_chars_number=0\n    for i in string:\n        if ord(i)>127:\n            non_english_chars_number+=1\n    if non_english_chars_number>3:\n        return False\n    else:\n        return True\n\nis_english_chars_in_string('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad')\nis_english_chars_in_string('Instagram')","448e5c63":"android_clean_english=[]\nfor i in android_clean:\n    name = i[0]\n    if is_english_chars_in_string(name)==True:\n        android_clean_english.append(i)\n        \nprint (\"Google Store, English apps only number: \",len(android_clean_english))","5f77f675":"apple_clean_english=[]\nfor i in apple[1:]:\n    name = i[1]\n    if is_english_chars_in_string(name)==True:\n        apple_clean_english.append(i)\n        \nprint (\"Apple Store, English apps only number: \",len(apple_clean_english))","c761a8a2":"## possible values of Price field in dataset\nunique_prices=set()\nfor i in android_clean_english:\n    price = i[6]\n    unique_prices.add(price)\nprint(unique_prices)\n\n## we need Free apps only for this research\n\nandroid_clean_english_free=[]\n\nfor i in android_clean_english:\n    price = i[7]\n    \n    if price =='0':\n        android_clean_english_free.append(i)\n    \nlen(android_clean_english_free)   ","be2e39eb":"android_final = []\nios_final = []\n\nfor i in android_clean_english:\n    price = i[7]\n    if price == '0':\n        android_final.append(i)\n        \nfor i in apple_clean_english:\n    price = i[4]\n    if price == '0.0':\n        ios_final.append(i)\n        \nprint(\"Google Store total free English apps number: \",len(android_final))\nprint(\"Apple Store total free English apps number: \",len(ios_final))","cdb7237f":"explore_data(android,0,1)","6b4b5a7d":"explore_data(apple,0,1)","4ebc14f3":"## creating a frequency table from a Dataset for a column of Index\n\ndef freq_table(dataset,index):\n    d={}\n    number_of_records=0\n    for i in dataset:\n        number_of_records+=1\n        par=i[index]\n        if par not in d:\n            d[par]=1\n        else:\n            d[par]+=1\n    for i in d:\n        d[i]=round(d[i]\/number_of_records*100,2)\n    return d\n\n## helper function to show statistics from data\ndef display_table(dataset, index):\n    table = freq_table(dataset, index)\n    table_display = []\n    for key in table:\n        key_val_as_tuple = (table[key], key)\n        table_display.append(key_val_as_tuple)\n\n    table_sorted = sorted(table_display, reverse = True)\n    for entry in table_sorted:\n        print(entry[1], ':', entry[0])","d66480f9":"## display top results, percentage\n\nprint(\"Google store. Frequency table for Category\")\nandroid_category_table = display_table(android_final,1)\nprint(\"_\"*50)\nprint(\"Google store. Frequency table for Genres\")\nandroid_genres_table = display_table(android_final,9)\nprint(\"_\"*50)\nprint(\"Apple store. Frequency table for prime_genre\")\napple_genres_table = display_table(ios_final,11) \n","6bfd6db3":"apple_freq_prime_genre = freq_table(ios_final,11) ","20b9f86f":"apple_installs_by_genre={}\nfor genre in apple_freq_prime_genre:\n    total=0\n    len_genre=0\n    for  i in ios_final:\n        genre_app=i[11]\n        if genre_app == genre:\n            num_of_ratings=float(i[5])\n            total+=num_of_ratings\n            len_genre+=1\n\n    avg_num_of_ratings=total\/len_genre\n    apple_installs_by_genre[genre]=avg_num_of_ratings\n    #print(genre,\" : \",avg_num_of_ratings)\n\n## let's sort the list:\n\nimport operator\napple_installs_by_genre_sorted = sorted(apple_installs_by_genre.items(), key=operator.itemgetter(1),reverse=True)\napple_installs_by_genre_sorted","b29939d1":"print(\"Google store. Frequency table for Category\")\nandroid_category_table = display_table(android_final,1)\nprint(\"_\"*50)\nprint(\"Google store. Frequency table for Genres\")\nandroid_genres_table = display_table(android_final,9)","3eeadef7":"android_freq_category = freq_table(android_final,1) ","9243a9a3":"android_installs_by_genre={}\nfor category in android_freq_category:\n    total=0\n    len_genre=0\n    #print(category)\n    for  i in android_final:\n        category_app=i[1]\n        if category_app == category:\n            num_of_installs=i[5]\n            num_of_installs=num_of_installs.replace(\",\",\"\")\n            num_of_installs=num_of_installs.replace(\"+\",\"\")\n            num_of_installs=float(num_of_installs)\n            total+=num_of_installs\n            len_genre+=1\n\n    avg_num_of_installs=total\/len_genre\n    #print(avg_num_of_installs)\n    android_installs_by_genre[category]=avg_num_of_installs\n    \nimport operator\nandroid_installs_by_genre_sorted = sorted(android_installs_by_genre.items(), key=operator.itemgetter(1),reverse=True)\nandroid_installs_by_genre_sorted","b7b84197":"## Removing non-English apps","ff79d839":"We should remove duplicated entries based on the biggest number of reviews (i.e. the most recent info). We use reviews_max dictionary to remove the duplicates.","5557d95c":"App Store is dominated by apps designed for fun (Games, Entertainment), while Google Play shows a more balanced landscape of both practical and fun apps","a82d715a":"## Genres most popular for each dataset","5cbe9659":"On average, communication apps have the most installs: 38,456,119","84bd51cb":"There's a wrongly formatted row in the dataset, which should be removed, per https:\/\/www.kaggle.com\/lava18\/google-play-store-apps\/discussion\/66015","cb4babaa":"# Apps revenue analysis \n#### Predicting most profitable type of apps for developers","0c408e66":"If we explore the data long enough, we'll find that both data sets have apps with names that suggest they are not directed toward an English-speaking audience.\n\nThe numbers corresponding to the characters we commonly use in an English text are all in the range 0 to 127, according to the ASCII system. We additionally check whether the string (here the app name) has no more than 3 special characters (\u2122) or emoji (\ud83d\ude1c) or anything like that not to over-clean the dataset.\n","ff97df37":"## Removing duplicates for Google store dataset","fa4dff69":"We need to explore what genres are most popular for our filtered datasets","9be7522e":"Let's explore some details on how free\/non-free apps presented in Google store DS","c196cf49":"## Finding apps that are successful on both markets ","19e3a6b7":"Successful strategy:\n\n* Build a minimal Android version of the app, and add it to Google Play.\n* If the app has a good response from users, we develop it further.\n* If the app is profitable after six months, we build an iOS version of the app and add it to the App Store.\n","24b9897c":"### Google Store detailed stat","42acf43e":"Installs stat for AppStore is missing. We'll take the total number of user ratings as a proxy, which we can find in the rating_count_tot app.\n\nBelow, we calculate the average number of user ratings per app genre on the App Store:","25c0d3c6":"### App store detailed stat, most popular apps by genre","dec274d8":"## Checking for duplicates","997e4bfa":"## Removing paid apps from datasets"}}