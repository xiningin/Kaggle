{"cell_type":{"5eb87337":"code","0ed90842":"code","7ff00431":"code","208bce48":"code","70c8823a":"code","eaf35f07":"code","1a87c2e3":"code","aeedffc0":"code","b79c9c30":"code","763d3820":"code","91a058f6":"code","60fcdf0f":"code","cf3b5e34":"code","1d784a03":"code","a59ee2da":"code","f3205ab9":"code","b78b4c34":"code","07d654c7":"code","d5ebdc97":"code","59ff5c6f":"markdown","1c77c13a":"markdown","787551e6":"markdown","dd4b1c66":"markdown","096ab954":"markdown","b4beb84c":"markdown"},"source":{"5eb87337":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ed90842":"df = pd.read_csv(\"\/kaggle\/input\/california-housing-prices\/housing.csv\")\ndf.info()","7ff00431":"display(df.isna().sum())","208bce48":"import matplotlib.pyplot as plt \ndf.hist(bins=50, figsize=(20,15)) \nplt.show()","70c8823a":"from sklearn.model_selection import train_test_split\n\ntrain_set, test_set = train_test_split(df, test_size=0.2, random_state=42)\n\nprint(\"train : \",len(train_set))\nprint(\"test : \",len(test_set))","eaf35f07":"df.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.3,    \n             s=df[\"population\"]\/100, label=\"population\", figsize=(10,7),    \n             c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), colorbar=True) \nplt.legend()","1a87c2e3":"import seaborn as sns\n\ncorrelation = train_set.corr()\n\nfig = plt.subplots(figsize=(10,10))\nsns.heatmap(correlation,vmax=1,square=True,annot=True,cmap='Blues')","aeedffc0":"from pandas.plotting import scatter_matrix\n\nfeatures = ['median_income', 'median_house_value']\n\nscatter_matrix(train_set[features], figsize=(6,6))","b79c9c30":"train_data = train_set.drop('median_house_value', axis=1)\ntrain_label = train_set['median_house_value'].copy()\n\ntest_data = test_set.drop('median_house_value', axis=1)\ntest_label = test_set['median_house_value'].copy()\n\nprint('labels created')","763d3820":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy=\"median\")\n\ntrain_data_nums = train_data.drop(\"ocean_proximity\", axis=1)","91a058f6":"from sklearn.base import BaseEstimator, TransformerMixin\n\nrooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    def fit(self, X, y=None):\n        return self  # nothing else to do\n    def transform(self, X):\n        rooms_per_household = X[:, rooms_ix] \/ X[:, households_ix]\n        population_per_household = X[:, population_ix] \/ X[:, households_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n            return np.c_[X, rooms_per_household, population_per_household,\n                         bedrooms_per_room]\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]","60fcdf0f":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nnum_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('attribs_adder', CombinedAttributesAdder()),\n    ('std_scaler', StandardScaler()),\n])","cf3b5e34":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\nnum_attribs = list(train_data_nums) \ncat_attribs = [\"ocean_proximity\"]\n\nfull_pipeline = ColumnTransformer([\n    (\"num\", num_pipeline, num_attribs),\n    (\"cat\", OneHotEncoder(), cat_attribs),\n])\n\ntrain_prepared = full_pipeline.fit_transform(train_data)\ntest_prepared = full_pipeline.fit_transform(test_data)","1d784a03":"from sklearn.linear_model import LinearRegression\n\nlinear_model = LinearRegression()\n# linear_model.fit(train_prepared, test_label)\n\n# linear_predictions = tree_reg.predict(test_prepared)","a59ee2da":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(linear_model, train_prepared, train_label, scoring=\"neg_mean_squared_error\", cv=10) \nlinear_rmse_scores = np.sqrt(-scores)\n\nprint(\"Mean:\", linear_rmse_scores.mean())\nprint(\"Standard deviation:\", linear_rmse_scores.std())","f3205ab9":"from sklearn.tree import DecisionTreeRegressor\n\ntree_model = DecisionTreeRegressor()\n# tree_model.fit(test_prepared, test_label)","b78b4c34":"from sklearn.model_selection import cross_val_score \n\nscores = cross_val_score(tree_model, train_prepared, train_label, scoring=\"neg_mean_squared_error\", cv=10) \ntree_rmse_scores = np.sqrt(-scores)\n\nprint(\"Mean:\", tree_rmse_scores.mean())\nprint(\"Standard deviation:\", tree_rmse_scores.std())","07d654c7":"from sklearn.ensemble import RandomForestRegressor\n\nforest_model = RandomForestRegressor()","d5ebdc97":"from sklearn.model_selection import cross_val_score \n\nscores = cross_val_score(forest_model, train_prepared, train_label, scoring=\"neg_mean_squared_error\", cv=10) \nforest_rmse_scores = np.sqrt(-scores)\n\nprint(\"Mean:\", forest_rmse_scores.mean())\nprint(\"Standard deviation:\", forest_rmse_scores.std())","59ff5c6f":"### Create Labels","1c77c13a":"### Transformers","787551e6":"## Random Forest","dd4b1c66":"## **Linear Regression**","096ab954":"### Pipelines","b4beb84c":"## **Decision Tree Regression**"}}