{"cell_type":{"61999bbd":"code","163f2ff8":"code","7e914607":"code","f66f7a2e":"code","20da09bb":"code","600d0fb3":"code","55eb71cf":"code","03c31b00":"code","9e7832fa":"code","ef347cc4":"code","17fc7ada":"code","a2378506":"code","d93bb886":"code","7505f3f3":"code","02a7a8d0":"code","609925fa":"code","1dfb2a44":"code","01e72db7":"code","44741621":"code","0acdb202":"code","ae43de64":"code","a1940fcf":"markdown"},"source":{"61999bbd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv1D, Conv2D, MaxPool1D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.utils.vis_utils import plot_model\n\nsns.set(style='white', context='notebook', palette='deep')","163f2ff8":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","7e914607":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\nY_train.value_counts()","f66f7a2e":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","20da09bb":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","600d0fb3":"datagen = ImageDataGenerator(featurewise_center=True, \n                               featurewise_std_normalization=True)\n\n# Calculate statistics on train dataset\ndatagen.fit(X_train)","55eb71cf":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","03c31b00":"# Set the random seed\nrandom_seed = 2","9e7832fa":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)","ef347cc4":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))  \n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))   # Change from 0.5 to 0.2\nmodel.add(Dense(10, activation = \"softmax\"))","17fc7ada":"# Set the CNN model \n# my CNN architechture is In -> [Conv2D-> relu-> Dropout -> Conv2D -> BN -> MaxPool2D -> Dropout]*3 -> Flatten -\n#                         -> Dense -> BN -> Dropout -> Dense -> BN -> Out\n\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))  \n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))  \n\nmodel.add(Flatten())\nmodel.add(Dense(500, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dense(64, activation = \"relu\"))\nmodel.add(BatchNormalization())\n# model.add(Dropout(0.2))   # Change from 0.5 to 0.2\nmodel.add(Dense(10, activation = \"softmax\"))\n\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","a2378506":"# Define the optimizer\noptimizer = RMSprop(lr=0.01, rho=0.9, epsilon=1e-08, decay=0.0)  # lr from 0.001 to 0.01","d93bb886":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","7505f3f3":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","02a7a8d0":"epochs = 60 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 1280","609925fa":"# Without data augmentation i obtained an accuracy of 0.98114\n# history = model.fit(X_train, Y_train, batch_size = batch_size, epochs = epochs, \n#                   validation_data = (X_val, Y_val), verbose = 2)","1dfb2a44":"# With data augmentation to prevent overfitting (accuracy 0.99286)\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset  ### Change from False to True\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset  ### Change from False to True\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","01e72db7":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                             epochs = epochs, validation_data = (X_val,Y_val),\n                             verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                             , callbacks=[learning_rate_reduction])","44741621":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","0acdb202":"# predict results\nresults = model.predict(test)  # results = model.predict(datagen.standardize(test))\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","ae43de64":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","a1940fcf":"Fork the kernel from [Introduction to CNN Keras - 0.997 (top 6%)](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\/output)"}}