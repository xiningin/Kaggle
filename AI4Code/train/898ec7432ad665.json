{"cell_type":{"54229cbf":"code","bf93f8bd":"code","ee690a75":"code","7e280ada":"code","7fe3ba31":"code","163cb1eb":"code","c517b13e":"code","1a16d96f":"code","2eaa9611":"code","6b873bd8":"code","57bd873e":"code","6309d364":"code","aad9542a":"code","271f7fbd":"code","67ea74f2":"code","32315750":"markdown","feed8f94":"markdown","a877a471":"markdown","366fe724":"markdown","0be1b869":"markdown","2e375bfa":"markdown"},"source":{"54229cbf":"import os\nfrom PIL import Image\nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nplt.style.use('dark_background')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder","bf93f8bd":"encoder = OneHotEncoder()\nencoder.fit([[0], [1]])","ee690a75":"data = []\npaths = []\nresult = []\n\nfor r, d, f in os.walk(r'..\/input\/brain-mri-images-for-brain-tumor-detection\/yes'):\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    img = img.resize((128,128))\n    img = np.array(img)\n    if(img.shape == (128,128,3)):\n        data.append(np.array(img))\n        result.append(encoder.transform([[0]]).toarray())\nresult[0]        ","7e280ada":"paths = []\nfor r, d, f in os.walk(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\"):\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    img = img.resize((128,128))\n    img = np.array(img)\n    if(img.shape == (128,128,3)):\n        data.append(np.array(img))\n        result.append(encoder.transform([[1]]).toarray())","7fe3ba31":"data = np.array(data)\ndata.shape","163cb1eb":"result = np.array(result)\nresult = result.reshape(208,2)\nresult.shape","c517b13e":"train_images, test_images, train_labels, test_labels = train_test_split(data, result, test_size=0.1, shuffle=True, random_state=1)","1a16d96f":"print('Train Images Shape', train_images.shape)\nprint('Train Labels Shape', train_labels.shape)\nprint('Test Images Shape', test_images.shape)\nprint('Test Labels Shape', test_labels.shape)","2eaa9611":"inputs = tf.keras.Input(shape=(128, 128, 3))\n\nconv2d_layer = tf.keras.layers.Conv2D(32, (2,2), padding='Same')(inputs)\nconv2d_layer = tf.keras.layers.Conv2D(32, (2,2), activation='relu', padding='Same')(conv2d_layer)\n\nbn_layer = tf.keras.layers.BatchNormalization()(conv2d_layer)\nmp_layer = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(bn_layer)\ndrop = tf.keras.layers.Dropout(0.25)(mp_layer)\n\nconv2d_layer = tf.keras.layers.Conv2D(64, (2,2), activation='relu', padding='Same')(drop)\nconv2d_layer = tf.keras.layers.Conv2D(64, (2,2), activation='relu', padding='Same')(conv2d_layer)\n\nbn_layer = tf.keras.layers.BatchNormalization()(conv2d_layer)\nmp_layer = tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=(2,2))(bn_layer)\ndrop = tf.keras.layers.Dropout(0.25)(mp_layer)\n\nflatten_layer = tf.keras.layers.Flatten()(drop)\n\ndense_layer = tf.keras.layers.Dense(512, activation='relu')(flatten_layer)\ndrop = tf.keras.layers.Dropout(0.5)(dense_layer)\noutputs = tf.keras.layers.Dense(2, activation='softmax')(drop)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs, name='tumor_model')\nmodel.summary()","6b873bd8":"model.compile(loss = tf.keras.losses.CategoricalCrossentropy(),\n             optimizer = tf.keras.optimizers.Adamax(),\n             metrics = ['accuracy'])","57bd873e":"history = model.fit(train_images, train_labels,\n                   epochs=40,\n                   batch_size=128,\n                   validation_data=(test_images, test_labels))","6309d364":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Test', 'Validation'], loc='upper right')\nplt.show()","aad9542a":"def names(number):\n    if number==0:\n        return 'Its a Tumor'\n    else:\n        return 'No, Its not a tumor'","271f7fbd":"from matplotlib.pyplot import imshow\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/Y1.jpg\")\nx = np.array(img.resize((128,128)))\nx = x.reshape(1,128,128,3)\nres = model.predict_on_batch(x)\nclassification = np.where(res == np.amax(res))[1][0]\nimshow(img)\nprint(str(res[0][classification]*100) + '% Confidence This Is ' + names(classification))","67ea74f2":"img = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/18 no.jpg\")\nx = np.array(img.resize((128,128)))\nx = x.reshape(1,128,128,3)\nres = model.predict_on_batch(x)\nclassification = np.where(res == np.amax(res))[1][0]\nimshow(img)\nprint(str(res[0][classification]*100) + '% Confidence This Is ' + names(classification))","32315750":"## Train and Test Data","feed8f94":"## Create Model With Functional API","a877a471":"## Preprocessing ","366fe724":"## Fit Model","0be1b869":"## OneHotEncoding","2e375bfa":"## Library"}}