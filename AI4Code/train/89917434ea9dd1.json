{"cell_type":{"c6b268ed":"code","336e6776":"code","518a62ba":"code","1b305e11":"code","8d020cc4":"code","2ddbfc0e":"code","13552fb4":"code","751aa79d":"code","54ef47be":"code","08533a2c":"code","645713b8":"code","6939c9b3":"code","b42de447":"code","7b7ec346":"code","9b493c1c":"code","433cab83":"code","d4547ef9":"code","928c5156":"code","5709ba5e":"code","692a3d1e":"code","7ceda670":"code","38cc438a":"code","dc48376c":"code","f443a562":"code","de2b1021":"code","ac4cd142":"code","3cad7cce":"code","1e8f002a":"code","afd0b73c":"code","ed0f1bb3":"code","03760ecc":"code","548c2999":"code","632dcd95":"code","dceb29e5":"code","03c63849":"code","550cea00":"code","c41722d9":"code","91acf9a7":"code","6af49c80":"code","cc168c19":"code","4b86429a":"code","17695ea0":"code","b8d7437c":"code","15d8738d":"code","74ec6fbb":"code","a4cca48b":"code","7132e843":"code","23dd51ff":"code","0ebe2ac0":"code","897bd760":"code","4febc30d":"code","3d747975":"code","964aa5b9":"code","c1d9694f":"code","6de5a2b4":"code","9ebacf96":"code","82b34e63":"code","7de153b5":"code","53f02222":"code","65eee43e":"code","79c9a134":"code","5783e964":"code","87ca6be4":"code","bc82c964":"code","2280bf82":"code","083d034f":"code","52998dea":"code","974cb2aa":"code","7895f77f":"code","09a4b140":"code","10691798":"code","2bd4c464":"code","e4fd0b1e":"code","29ebba20":"code","f0b2e589":"code","ec01d32d":"code","5f8f0b61":"code","2330c791":"code","1415964e":"code","da147fe6":"code","76735e77":"code","0bbefe5b":"code","1063c253":"code","7b4e2cc5":"code","744e8aa4":"code","21528ffd":"code","25a4d24c":"code","582a083c":"code","07c514fb":"code","69bbb782":"code","73f7cc5e":"code","469576b7":"code","07597f13":"code","f21d8426":"markdown","ed702a78":"markdown","e28c9022":"markdown","a8a9ab33":"markdown","491ac459":"markdown","90ea4a4b":"markdown","300fe186":"markdown","3114d0ab":"markdown","688b3186":"markdown","87074be0":"markdown","4b749a43":"markdown","ec2fde1f":"markdown","8b520772":"markdown","a59f67de":"markdown","b6f050b8":"markdown","7563285f":"markdown","e933ef7e":"markdown","d031b580":"markdown","1c012767":"markdown","835f0fbe":"markdown","ba6860ec":"markdown","80bc0064":"markdown","e04ffe10":"markdown","06958a46":"markdown"},"source":{"c6b268ed":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib","336e6776":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","518a62ba":"PATH='\/kaggle\/input\/fake-and-real-news-dataset'\nTRUE_FILE_PATH=os.path.join(PATH,'True.csv')\nFAKE_FILE_PATH=os.path.join(PATH,'Fake.csv')","1b305e11":"true_data_df=pd.read_csv(TRUE_FILE_PATH)\ntrue_class=['True' for index in range(true_data_df.shape[0])]\nfake_data_df=pd.read_csv(FAKE_FILE_PATH)\nfake_class=['Fake' for index in range(fake_data_df.shape[0])]","8d020cc4":"labels=['True','Fake']\nclass_wise_counts=[true_data_df.shape[0],fake_data_df.shape[0]]","2ddbfc0e":"matplotlib.rcParams['figure.figsize']=(10,10)\nplt.bar(labels,class_wise_counts,align='center', alpha=0.5,color='r')\nplt.xlabel('Classes')\nplt.ylabel('Counts')\nplt.title('Count vs Classes')\nplt.show()\nprint (\"Ratio of fake is to real news:\",(fake_data_df.shape[0]\/true_data_df.shape[0]))","13552fb4":"true_data_df['class']=true_class\nfake_data_df['class']=fake_class","751aa79d":"fake_data_df['class']=fake_class","54ef47be":"true_data_df.head()","08533a2c":"fake_data_df.head()","645713b8":"data_frame=pd.concat([true_data_df,fake_data_df],axis='rows')","6939c9b3":"data_frame.isnull().sum()","b42de447":"data_frame.head()","7b7ec346":"data_frame.date.value_counts()","9b493c1c":"data_frame.drop('date',axis='columns',inplace=True)","433cab83":"data_frame.head()","d4547ef9":"data_frame.subject.unique()","928c5156":"real_news_df=data_frame[data_frame.subject=='politicsNews']","5709ba5e":"real_news_df.shape","692a3d1e":"(fake_subject_keys,fake_counts)=np.unique(data_frame[data_frame['class']=='Fake'].subject,return_counts=True)\n(true_subject_keys,true_counts)=np.unique(data_frame[data_frame['class']=='True'].subject,return_counts=True)","7ceda670":"matplotlib.rcParams['figure.figsize']=(10,10)\nplt.bar(fake_subject_keys,fake_counts,align='center', alpha=0.5,color='g')\nplt.xlabel('Subjects')\nplt.ylabel('Counts')\nplt.title('FakeNewsCounts vs Subjects')\nplt.show()","38cc438a":"matplotlib.rcParams['figure.figsize']=(10,7)\nplt.bar(true_subject_keys,true_counts,align='center', alpha=0.5,color='b')\nplt.xlabel('Subjects')\nplt.ylabel('Counts')\nplt.title('TrueNewsCounts vs Subjects')\nplt.show()","dc48376c":"subject_dummies=pd.get_dummies(data_frame.subject)","f443a562":"data_frame2=pd.concat([data_frame,subject_dummies],axis='columns')","de2b1021":"title_column=list(data_frame2.title)\ntext_column=list(data_frame2.text)","ac4cd142":"title_column[0]","3cad7cce":"from nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport string\nimport nltk\nfrom nltk import pos_tag\nfrom nltk.stem import WordNetLemmatizer","1e8f002a":"stop_words=stopwords.words('english')\nstop_words.extend(string.punctuation)","afd0b73c":"from nltk.corpus import wordnet\n\ndef get_wordnet_pos(treebank_tag):\n\n    if treebank_tag.startswith('J'):\n        return wordnet.ADJ\n    elif treebank_tag.startswith('V'):\n        return wordnet.VERB\n    elif treebank_tag.startswith('N'):\n        return wordnet.NOUN\n    elif treebank_tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN","ed0f1bb3":"lemmatizer=WordNetLemmatizer()\n\ndef clean_data(text):\n    \n    clean_words=[]\n    words=word_tokenize(text)\n    for word in words:\n        if (word.lower() not in stop_words and word.isdigit()==False):\n            curr_word_pos_tag=pos_tag([word])\n            \n            simple_pos_tag=get_wordnet_pos(curr_word_pos_tag[0][1])\n            clean_words.append(lemmatizer.lemmatize(word,simple_pos_tag))\n    return clean_words\n\nclean_title_column=[clean_data(current_column) for current_column in title_column]\n","03760ecc":"clean_title_column[0]","548c2999":"clean_text_column=[clean_data(current_column) for current_column in text_column]","632dcd95":"clean_title_column_list=[\" \".join(list_words) for list_words in clean_title_column]\nclean_text_column_list=[\" \".join(list_words) for list_words in clean_text_column]","dceb29e5":"data_frame2['title']=clean_title_column_list\ndata_frame2['text']=clean_text_column_list","03c63849":"from sklearn.utils import shuffle\ndata_frame3 = shuffle(data_frame2)","550cea00":"data_frame3.reset_index(inplace=True, drop=True)","c41722d9":"train_dataframe=data_frame3.loc[:int(0.75*data_frame3.shape[0]),:]","91acf9a7":"test_dataframe=data_frame3.loc[int(0.75*data_frame3.shape[0]):,:]\n","6af49c80":"yTrain=list(train_dataframe['class'])\nyTest=list(test_dataframe['class'])","cc168c19":"train_dataframe.drop(['class','subject'],axis=1,inplace=True)\ntest_dataframe.drop(['class','subject'],axis=1,inplace=True)","4b86429a":"test_dataframe.reset_index(inplace=True,drop=True)\ntest_dataframe.head()","17695ea0":"from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer","b8d7437c":"train_title_column=list(train_dataframe['title'])\ntrain_text_column=list(train_dataframe['text'])\ntest_title_column=list(test_dataframe['title'])\ntest_text_column=list(test_dataframe['text'])","15d8738d":"train_dataframe.drop(['title','text'],axis=1,inplace=True)\ntest_dataframe.drop(['title','text'],axis=1,inplace=True)","74ec6fbb":"count_vec=CountVectorizer(max_features=5000,ngram_range=(1,2))","a4cca48b":"train_title_sparse_matrix=count_vec.fit_transform(train_title_column)","7132e843":"test_title_sparse_matrix=count_vec.transform(test_title_column)","23dd51ff":"test_title_sparse_matrix.shape","0ebe2ac0":"train_dataframe_title = pd.DataFrame.sparse.from_spmatrix(train_title_sparse_matrix,columns=count_vec.get_feature_names())","897bd760":"test_dataframe_title=pd.DataFrame.sparse.from_spmatrix(test_title_sparse_matrix,columns=count_vec.get_feature_names())","4febc30d":"train_dataframe_title.head()","3d747975":"test_dataframe_title.head()","964aa5b9":"train_dataframe1=pd.concat([train_dataframe,train_dataframe_title],axis='columns')","c1d9694f":"train_dataframe1.head()","6de5a2b4":"test_dataframe1=pd.concat([test_dataframe,test_dataframe_title],axis='columns')","9ebacf96":"test_dataframe1.head()","82b34e63":"count_vec_text=CountVectorizer(max_features=5000,ngram_range=(1,2))","7de153b5":"train_text_sparse_matrix=count_vec_text.fit_transform(train_text_column)","53f02222":"test_text_sparse_matrix=count_vec_text.transform(test_text_column)","65eee43e":"train_dataframe_text = pd.DataFrame.sparse.from_spmatrix(train_text_sparse_matrix,columns=count_vec_text.get_feature_names())","79c9a134":"train_dataframe_text.head()","5783e964":"test_dataframe_text=pd.DataFrame.sparse.from_spmatrix(test_text_sparse_matrix,columns=count_vec_text.get_feature_names())","87ca6be4":"test_dataframe_text.head()","bc82c964":"train_dataframe2=pd.concat([train_dataframe1,train_dataframe_text],axis='columns')","2280bf82":"test_dataframe2=pd.concat([test_dataframe1,test_dataframe_text],axis='columns')","083d034f":"train_dataframe2.head()","52998dea":"test_dataframe2.head()","974cb2aa":"train_dataframe2.isnull().sum()","7895f77f":"test_dataframe2.isnull().sum()","09a4b140":"train_dataframe2.shape","10691798":"test_dataframe2.shape","2bd4c464":"train_dataframe2.shape,test_dataframe2.shape,yTrain.shape,yTest.shape","e4fd0b1e":"xTrain=train_dataframe2.values\nxTest=test_dataframe2.values","29ebba20":"xTrain.shape,xTest.shape,yTrain.shape,yTest.shape","f0b2e589":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression(max_iter=1000)\nlr.fit(xTrain,yTrain)","ec01d32d":"yPredicted=lr.predict(xTest)","5f8f0b61":"lr.score(xTest,yTest)","2330c791":"from sklearn.metrics import confusion_matrix,classification_report","1415964e":"print (confusion_matrix(yTest,yPredicted))","da147fe6":"print (classification_report(yTest,yPredicted))","76735e77":"from sklearn.ensemble import RandomForestClassifier","0bbefe5b":"clf_rf=RandomForestClassifier()\nclf_rf.fit(xTrain,yTrain)","1063c253":"clf_rf.score(xTest,yTest)","7b4e2cc5":"yPredicted_rf=clf_rf.predict(xTest)","744e8aa4":"print (confusion_matrix(yTest,yPredicted_rf))","21528ffd":"print (classification_report(yTest,yPredicted_rf))","25a4d24c":"from sklearn.naive_bayes import MultinomialNB","582a083c":"clf_mnb=MultinomialNB()","07c514fb":"clf_mnb.fit(xTrain,yTrain)","69bbb782":"clf_mnb.score(xTest,yTest)","73f7cc5e":"yPredicted_mnb=clf_mnb.predict(xTest)","469576b7":"confusion_matrix(yTest,yPredicted_mnb)","07597f13":"print (classification_report(yTest,yPredicted_mnb))","f21d8426":"# Training model","ed702a78":"# Loading Necessary Modules","e28c9022":"## Date contains a lot of unique values so not much value can be extracted from it hence dropping it for now","a8a9ab33":"## Cleaning the title and text columns using NLTK","491ac459":"## Shuffling the dataframe so that we can split into train and test sets","90ea4a4b":"## Logisitc Regression","300fe186":"## Looking in subject feature ","3114d0ab":"## Cleaning the title and text seperatly","688b3186":"## Adding the features extracted from 'text' column to the train and test set","87074be0":"## Converting the sparse matrix to dataframe for train and test set","4b749a43":"## Vectorising them so that important words can be extracted from it for converting into features","ec2fde1f":"## So only politicalNews and worldnews are giving true news remaning all of them are giving fake news","8b520772":"## Splitting the data into 75% for training and 25% for testing","a59f67de":"## Adding the features extracted from the 'title' column as features to the train and test set","b6f050b8":"# Exploratory Data Analysis and pre processing","7563285f":"## Since the subject features 'class' and 'subject' have already been taken care of hence dropping them. ","e933ef7e":"## Converting the subject feature into one hot encoded features","d031b580":"## Vectorisation for 'text' Column","1c012767":"## Now we have a list of list where each item contains the words that are not stop words in the current text.","835f0fbe":"## Converting the sparse matrix to train and test set","ba6860ec":"# Loading Data","80bc0064":"## Random Forest","e04ffe10":"## Multinomial Naive Bayes","06958a46":"## Vectorisation for 'title' feature"}}