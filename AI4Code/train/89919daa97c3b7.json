{"cell_type":{"4ad162cb":"code","7a3495dd":"code","15b15bc4":"code","4761c96c":"code","8b947cc1":"code","752c37d0":"code","46f12841":"code","0a2c726d":"code","ec14a81f":"code","256dfebd":"markdown"},"source":{"4ad162cb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# ignore warnings\nwarnings.filterwarnings(\"ignore\")\nfrom subprocess import check_output\n#print(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\nprint(check_output([\"ls\", \"..\/input\/mri-and-alzheimers\"]).decode(\"utf8\"))","7a3495dd":"#data = pd.read_csv('..\/input\/gender-classification\/Transformed Data Set - Sheet1.csv')\ndata = pd.read_csv('..\/input\/mri-and-alzheimers\/oasis_cross-sectional.csv')\ndata.info()\ndata.head()","15b15bc4":"# we should drop some columns. because we do not need them and these columns are not important for our solution.\ndata.drop([\"ID\",\"Delay\",\"Hand\"],axis=1, inplace = True)\ndata.head()","4761c96c":"# we have NaN values. we should initialize to 0.\ndata.fillna(0,inplace=True)\ndata.head(10)","8b947cc1":"# we want to use male \/ female rate for x axis.\ndata['M\/F'] = [1 if each == \"M\" else 0 for each in data['M\/F']]\n# male   = 1\n# female = 0\n","752c37d0":"y = data['M\/F'].values\nx_data = data.drop(['M\/F'], axis = 1)","46f12841":"# now we should normalize our data.\n# (x - min(x)) \/ (max(x) - min(x))\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values \n# our dataset only has between 0 and 1 values\nprint(x)","0a2c726d":"# we separete data for test and train\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 42)","ec14a81f":"# logistic regression\nfrom sklearn.linear_model import LogisticRegression\nlogReg = LogisticRegression()\nlogReg.fit(x_train, y_train)\nprint(\"test accurency : {}\".format(logReg.score(x_test, y_test)))","256dfebd":"# Introduction\nThis kernel created for learning logistic regression. This is my first time and there are some errors, if you find any my bug please tell me and i will fix it."}}