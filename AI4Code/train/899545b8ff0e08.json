{"cell_type":{"f9f65055":"code","6664c1f3":"code","5d49a1a3":"code","0d3f7d25":"code","f51f1c98":"code","8f15f7d9":"code","26541394":"code","2126e1f8":"code","de3e8639":"code","1fabee63":"code","f99e016d":"code","6bf1a466":"code","a6a09ea8":"code","7385aa54":"code","3a02658e":"code","c7d5be4d":"markdown","1c4c7bc4":"markdown","61e319cf":"markdown","16cf6943":"markdown","b797b0b7":"markdown"},"source":{"f9f65055":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6664c1f3":"import matplotlib.pyplot as plt \nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport tensorflow as tf","5d49a1a3":"data = pd.read_csv('\/kaggle\/input\/az-handwritten-alphabets-in-csv-format\/A_Z Handwritten Data\/A_Z Handwritten Data.csv')\ndata.info()","0d3f7d25":"class_names = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\",\n               \"P\", \"Q\", \"R\", \"S\", \"T\" \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]","f51f1c98":"sample = data.iloc[10].values","8f15f7d9":"sample_label = sample[0]\nsample_letter = sample[1:].reshape(28,28)","26541394":"plt.imshow(sample_letter, cmap=\"binary\")\nplt.axis('off')\nplt.title(class_names[sample_label])","2126e1f8":"# Seperate labels \nlabels = data['0'].values.astype('uint8')\nX = data.drop('0', axis=1)\nX.shape","de3e8639":"labels","1fabee63":"# Reshape data\nX = np.array(X).reshape(372450, 28, 28, 1)\nX.shape","f99e016d":"# split between train and validation sets\nX_train, X_valid, y_train, y_valid = train_test_split(X, labels, test_size = 0.3, random_state = 42)\n\n# scale images to [0, 1] range\nX_train = X_train.astype(\"float32\") \/ 255\nX_valid = X_valid.astype(\"float32\") \/ 255\n\n# Check image shape\nprint(\"x_train shape:\", X_train.shape)\nprint(X_train.shape[0], \"train samples\")\nprint(X_valid.shape[0], \"test samples\")","6bf1a466":"# Slight image augmentation\ndata_augmentation = tf.keras.Sequential([\n  layers.experimental.preprocessing.RandomRotation(0.08),\n  layers.experimental.preprocessing.RandomContrast(0.12),\n  layers.experimental.preprocessing.RandomZoom(height_factor=(0.05,0.1))\n])","a6a09ea8":"keras.backend.clear_session()\ntf.random.set_seed(12)\nnp.random.seed(12)\n\nnum_classes = 26\nepochs = 10\n\nmodel = keras.models.Sequential([\n    data_augmentation,\n    keras.layers.Conv2D(32, kernel_size=3, padding=\"same\", activation=\"relu\"),\n    keras.layers.Conv2D(64, kernel_size=3, padding=\"same\", activation=\"relu\"),\n    keras.layers.MaxPool2D(),\n    keras.layers.Flatten(), \n    keras.layers.Dropout(0.25),\n    keras.layers.Dense(128, activation=\"relu\"),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(num_classes, activation=\"softmax\")\n])\n\nmodel.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"nadam\",\n              metrics = [\"accuracy\"])\n\nhistory = model.fit(X_train, y_train, epochs=epochs, validation_data=(X_valid, y_valid))","7385aa54":"model.evaluate(X_valid, y_valid)","3a02658e":"pd.DataFrame(history.history).plot(figsize=(8,5))\nplt.grid(True)\nplt.gca().set_ylim(0,1)\nplt.show()","c7d5be4d":"# Image Augmentation","1c4c7bc4":"# Import Data","61e319cf":"# Modeling","16cf6943":"# Preprocessing","b797b0b7":"# Setup"}}