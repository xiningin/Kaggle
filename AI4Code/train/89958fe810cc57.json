{"cell_type":{"62819421":"code","e08ea6ae":"code","3131728b":"code","99200479":"code","d1b91786":"code","90a21381":"code","3d1358f9":"code","f4adac05":"code","bbe37828":"code","6edadfd8":"code","7d5b76e3":"code","97361cdc":"code","019cb484":"code","0d05c4ab":"code","ab5fe056":"code","daa7ecdb":"code","2cd76159":"code","91e9f955":"code","6047e48f":"code","4de3a124":"code","8e35ebc5":"code","dae99ea9":"code","006f7f49":"code","3086a45c":"code","4bc5edca":"code","a481927b":"code","9fe3e3c3":"code","bc693eb1":"code","76154935":"code","5e218823":"code","76cf694d":"code","707cdecc":"code","52113c3b":"code","1f23cb89":"code","d9f43d7b":"code","35d336e4":"code","ec5c1b8c":"code","cc9a8b09":"code","4c6615fd":"code","8026b8ae":"code","ec35f25b":"markdown","62e98f79":"markdown","8c93fc1c":"markdown","ae4bcdc2":"markdown","6fcbd526":"markdown"},"source":{"62819421":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","e08ea6ae":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","3131728b":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","99200479":"train.info()","d1b91786":"test.info()","90a21381":"all = pd.concat([train, test], sort = False)\nall.info()","3d1358f9":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","f4adac05":"all.info()","bbe37828":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","6edadfd8":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","7d5b76e3":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","97361cdc":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","019cb484":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","0d05c4ab":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","ab5fe056":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","daa7ecdb":"all.info()","2cd76159":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","91e9f955":"all.info()","6047e48f":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","4de3a124":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","8e35ebc5":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","dae99ea9":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","006f7f49":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","3086a45c":"from sklearn.ensemble import RandomForestClassifier","4bc5edca":"RF_Model = RandomForestClassifier()","a481927b":"#from sklearn.model_selection import GridSearchCV","9fe3e3c3":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","bc693eb1":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","76154935":"#RF_grid_model = RF_grid.fit(X_train, y_train)","5e218823":"#RF_grid_model.best_estimator_","76cf694d":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","707cdecc":"RF_Model.fit(X_train, y_train)","52113c3b":"predictions = RF_Model.predict(X_test)\npredictions","1f23cb89":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","d9f43d7b":"all_test.head()","35d336e4":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","ec5c1b8c":"t_pred = RF_Model.predict(TestForPred).astype(int)","cc9a8b09":"PassengerId = all_test['PassengerId']","4c6615fd":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","8026b8ae":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","ec35f25b":"### Build Random Forest","62e98f79":"****Train\/Test Split","8c93fc1c":"****Final Predictions","ae4bcdc2":"****Extra Features:","6fcbd526":"****Check Accuracy"}}