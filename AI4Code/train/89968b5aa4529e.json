{"cell_type":{"84f978aa":"code","a9e88189":"code","90809a2b":"code","bff482fc":"code","545c95e2":"code","01955d37":"code","4501397f":"code","b5432779":"code","b819a0e4":"code","70ec1de0":"code","1de7f782":"code","c3b5a794":"code","47fec231":"code","06844d4b":"code","3ac32d13":"code","832b99fa":"code","83891253":"code","9949e444":"code","394110d3":"code","e3de3898":"code","94f3c941":"code","96932a68":"markdown","fdacdfac":"markdown"},"source":{"84f978aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a9e88189":"#Importing Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport folium\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\n","90809a2b":"#Setting up plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl\nimport plotly.offline as py\ninit_notebook_mode(connected=True)","bff482fc":"#importing data\nncv_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv')\nncv_deaths = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_2019_ncov_deaths.csv')\nncv_confirmed = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_2019_ncov_confirmed.csv')\nncv_recovered = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_2019_ncov_recovered.csv')\n","545c95e2":"ncv_data.head()","01955d37":"ncv_confirmed.head()","4501397f":"ncv_recovered.head()","b5432779":"ncv_confirmed_long = ncv_confirmed.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Confirmed' )\nncv_recovered_long = ncv_recovered.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Recovered')\nncv_deaths_long = ncv_deaths.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Deaths')\nfull_data = pd.concat([ncv_confirmed_long, ncv_deaths_long['Deaths'], ncv_recovered_long['Recovered']], axis=1, sort=False)","b819a0e4":"full_data.head()","70ec1de0":"#filling missing values with 0 if null values exists in columns of recovered, confirmed and deaths\nfull_data[['Confirmed', 'Deaths', 'Recovered']] = full_data[['Confirmed', 'Deaths', 'Recovered']].fillna(0)","1de7f782":"full_data.head()","c3b5a794":"China = full_data[full_data['Country\/Region'] == 'Mainland China']\nOutsidechina = full_data[full_data['Country\/Region'] != 'Mainland China']\nfull_latest = full_data[full_data['Date'] == max(full_data['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='Mainland China']\noutsidechina_latest = full_latest[full_latest['Country\/Region']!='Mainland China']\n\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\noutsidechina_latest_grouped = outsidechina_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","47fec231":"# confirmed cases country wise\nconf_ncv = full_latest_grouped[['Country\/Region', 'Confirmed']].sort_values(by = 'Confirmed', ascending=False).reset_index(drop=True)\nconf_ncv.head()","06844d4b":"#total no.of countries affected\nprint(len(conf_ncv))","3ac32d13":"# Affected Country\/Region\nprint(f\"Affected countries are : {full_data['Country\/Region'].unique()}\")\nprint(f\"Total Affected countries are : {len(full_data['Country\/Region'].unique())}\")","832b99fa":"fig = px.bar(full_data, x='Date', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Country\/Region')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed bar plot for each Country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","83891253":"#Provinces in china with most reported cases\nchina_rep = china_latest_grouped[['Province\/State', 'Confirmed']].sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nchina_rep.head()","9949e444":"fig = px.bar(full_data.loc[full_data['Country\/Region'] == 'Mainland China'], x='Date', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Province\/State')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed bar plot for Mainland China',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","394110d3":"#deaths as per country wise\ncou_dea = full_latest_grouped[['Country\/Region', 'Deaths']].sort_values(by='Deaths', ascending=False).reset_index(drop=True)\ncou_dea = cou_dea[cou_dea['Deaths']>0]\nprint(cou_dea)","e3de3898":"fig = px.bar(full_data, x='Date', y='Deaths', hover_data=['Province\/State', 'Confirmed', 'Recovered'], color='Country\/Region')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Death bar plot for each country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","94f3c941":"fig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", locationmode='country names', \n                    color=\"Confirmed\", hover_name=\"Country\/Region\", range_color=[1,50], color_continuous_scale=\"Sunsetdark\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", range_color=[1,50], color_continuous_scale=\"Peach\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","96932a68":"#EDA and Data visulisations","fdacdfac":"**Maps visualisations**"}}