{"cell_type":{"6fb22bee":"code","bfbd1cd3":"code","d912446a":"code","89ae79b3":"code","5cc3f736":"code","59fb4865":"code","cd560f24":"code","ad0e5e5c":"code","ccf534c8":"code","ca315452":"code","7fcee155":"code","85121d03":"code","d4324d5b":"code","a8c1ba80":"code","96063d7d":"code","180f0ccb":"code","dd9e161b":"code","2c385bae":"code","55e8bfd2":"code","480d6346":"code","8ed1efd1":"code","27a1d3e4":"code","4d9f5f21":"code","52100f7b":"code","dc0b93ba":"code","a6e1e5a9":"code","a593b340":"code","b37f7efa":"code","e6e5fd65":"markdown","21fd6ee3":"markdown","6c8f502d":"markdown","fce2b7b8":"markdown","5955a4df":"markdown","1cfdc692":"markdown","7f6ad3e2":"markdown","0ec854f0":"markdown","bffc3343":"markdown","ce6a420a":"markdown","dfb069d1":"markdown","4c7f1b47":"markdown"},"source":{"6fb22bee":"import time\nimport os\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom fastai import *\nfrom fastai.vision import *\nimport torch\nfrom torchvision import transforms\nfrom sklearn.metrics import classification_report","bfbd1cd3":"X_train = np.load('..\/input\/kmnist-train-imgs.npz')['arr_0']\nX_test = np.load('..\/input\/kmnist-test-imgs.npz')['arr_0']\ny_train = np.load('..\/input\/kmnist-train-labels.npz')['arr_0']\ny_test = np.load('..\/input\/kmnist-test-labels.npz')['arr_0']","d912446a":"X_train = X_train.reshape(-1, 1, 28, 28)\nX_test = X_test.reshape(-1, 1, 28, 28)","89ae79b3":"X_train = np.repeat(X_train, 3, axis=1)\nX_test = np.repeat(X_test, 3, axis=1)","5cc3f736":"mean = X_train.mean()\nstd = X_train.std()\nX_train = (X_train-mean)\/std\nX_test = (X_test-mean)\/std\n\nX_train = torch.from_numpy(np.float32(X_train))\ny_train = torch.from_numpy(y_train.astype(np.long))\nX_test = torch.from_numpy(np.float32(X_test))\ny_test = torch.from_numpy(y_test.astype(np.long))","59fb4865":"class ArrayDataset(Dataset):\n    \"Sample numpy array dataset\"\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n        self.c = len(np.unique(y))\n    \n    def __len__(self):\n        return len(self.x)\n    \n    def __getitem__(self, i):\n        return self.x[i], self.y[i]","cd560f24":"train_ds, valid_ds = ArrayDataset(X_train, y_train), ArrayDataset(X_test, y_test)\ndata = DataBunch.create(train_ds, valid_ds, bs=64)","ad0e5e5c":"learn = cnn_learner(data, models.resnet18, loss_func=CrossEntropyFlat(), metrics=accuracy)","ccf534c8":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","ca315452":"learn.fit_one_cycle(3, 1e-2)","7fcee155":"char_df = pd.read_csv('..\/input\/kmnist_classmap.csv', encoding = 'utf-8')","85121d03":"X,y = learn.get_preds()","d4324d5b":"print(f\"Accuracy of {accuracy(X,y)}\")","a8c1ba80":"X = np.argmax(X,axis=1)","96063d7d":"target_names = [\"Class {} ({}):\".format(i, char_df[char_df['index']==i]['char'].item()) for i in range(len(np.unique(y_test)))]\nprint(classification_report(y, X, target_names=target_names))","180f0ccb":"X_train = np.load('..\/input\/k49-train-imgs.npz')['arr_0']\nX_test = np.load('..\/input\/k49-test-imgs.npz')['arr_0']\ny_train = np.load('..\/input\/k49-train-labels.npz')['arr_0']\ny_test = np.load('..\/input\/k49-test-labels.npz')['arr_0']","dd9e161b":"X_train = X_train.reshape(-1, 1, 28, 28)\nX_test = X_test.reshape(-1, 1, 28, 28)","2c385bae":"X_train = np.repeat(X_train, 3, axis=1)\nX_test = np.repeat(X_test, 3, axis=1)","55e8bfd2":"mean = X_train.mean()\nstd = X_train.std()\nX_train = (X_train-mean)\/std\nX_test = (X_test-mean)\/std\n\n# Numpy to Torch Tensor\nX_train = torch.from_numpy(np.float32(X_train))\ny_train = torch.from_numpy(y_train.astype(np.long))\nX_test = torch.from_numpy(np.float32(X_test))\ny_test = torch.from_numpy(y_test.astype(np.long))","480d6346":"train_ds, valid_ds = ArrayDataset(X_train, y_train), ArrayDataset(X_test, y_test)\ndata = DataBunch.create(train_ds, valid_ds, bs=64)","8ed1efd1":"learn = cnn_learner(data, models.resnet18, loss_func=CrossEntropyFlat(), metrics=accuracy)","27a1d3e4":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","4d9f5f21":"learn.fit_one_cycle(5, 1e-2)","52100f7b":"char_df = pd.read_csv('..\/input\/k49_classmap.csv', encoding = 'utf-8')","dc0b93ba":"X,y = learn.get_preds()","a6e1e5a9":"print(f\"Accuracy of {accuracy(X,y)}\")","a593b340":"X = np.argmax(X,axis=1)","b37f7efa":"target_names = [\"Class {} ({}):\".format(i, char_df[char_df['index']==i]['char'].item()) for i in range(len(np.unique(y_test)))]\nprint(classification_report(y, X, target_names=target_names))","e6e5fd65":"### Train the model","21fd6ee3":"### Find the optimal LR","6c8f502d":"### Create a custom dataset","fce2b7b8":"## Kuzushiji-49","5955a4df":"### Train the model","1cfdc692":"### Look at the results","7f6ad3e2":"### Find the optimal LR","0ec854f0":"# Import the libraries","bffc3343":"### Prepare the data","ce6a420a":"### Look at the results","dfb069d1":"## Kuzushiji-MNIST","4c7f1b47":"### Prepare the data"}}