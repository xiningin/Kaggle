{"cell_type":{"44e1d8c7":"code","252b5dee":"code","5705814b":"code","75ade2b9":"code","d4ca5cdf":"code","218b16c6":"code","5eaa4809":"code","1f1736c0":"code","435dc949":"code","06cc53b7":"code","fdc282d5":"code","6610d5c3":"code","17d47cc7":"code","5704f61e":"code","1cefe4a0":"code","f0fe8360":"code","2601ebf5":"code","5d259ba4":"code","9ce1a362":"code","9ab79e40":"code","1d7c46a8":"code","073a58e7":"code","5035d035":"code","4a00ea24":"code","120896e1":"code","4d2e55af":"code","bbf6b9fa":"code","e5c79ca7":"markdown","b52969ac":"markdown","df91b049":"markdown","a4ca5496":"markdown","371c274d":"markdown","f304a53d":"markdown"},"source":{"44e1d8c7":"\"\"\"\nImporting all the necessary libraries\n\"\"\"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.ensemble import RandomForestRegressor","252b5dee":"\"\"\"Getting the dataset\"\"\"\ndf = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ndf.head()","5705814b":"df.shape","75ade2b9":"\"\"\"\nThe houses with exterior condition excellent have the highest sale price with brick tile foundation.\nWe mostly have data of houses which are in typical\/avergae condition and the cinder block houses in\npoor exterior condition have lowest price.\n\"\"\"\n#plt.figure(figsize=(10,20))\nsns.barplot(x=\"Foundation\", y=\"SalePrice\", hue='ExterCond', data=df)\n\nplt.show()","d4ca5cdf":"\"\"\"FV types of MSZoning have higher sale prices as they begin from 200000 than all other types. Also \nmostly we have data of normal sale condition which have almost all sale prices less than 300000. On the\nother hand partial sale condition have higher sale prices which are above 300000 in MSZoning RL type.\n\"\"\"\nsns.swarmplot(x=\"MSZoning\", y=\"SalePrice\", hue='SaleCondition', data=df)\nplt.figure(figsize=(10,15))\nplt.show()","218b16c6":"\"\"\"The sale price correlates over a number of features like garage cars and area, overquality etc,\nhowever many features are correlated amongst themselves.\n\"\"\"\ncorr = df.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr)\nplt.show()","5eaa4809":"\"\"\"The distribution of Neighbourhood variable shows that we have mostly the data of houses \nin North Ames and then in college creek\"\"\"\nplt.figure(figsize=(20,10))\nsns.countplot(df['Neighborhood'])\nplt.show()","1f1736c0":"\"\"\"\nComparing the target variable with some of the area variables. We can see that the variable  \nGRLivArea has influences the Sale Price positively while some have not a lot of relation with target variable.\n\"\"\"\nsns.pairplot(data=df,\n                  y_vars=['SalePrice'],\n                  x_vars=['GarageArea', 'MasVnrArea', 'TotalBsmtSF', \n                          'GrLivArea', 'WoodDeckSF','LotArea'])\nplt.tight_layout()\nplt.show()","435dc949":"\"\"\"Checking to see the distribution of fireplace quality\"\"\"\n\nsns.countplot(x= 'FireplaceQu', data=df)\nplt.show()","06cc53b7":"\"\"\"\nRemoving columns with almost all null values like Alley, PoolQC, Fence, MiscFeat\n\"\"\"\ncheck_na = pd.concat([df.isnull().sum()], axis=1, keys=['Train'])\ncheck_na[check_na.sum(axis=1) > 0]","fdc282d5":"df.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)\ndf.drop(['Id', 'GarageYrBlt'], axis=1,inplace=True)","6610d5c3":"df['FireplaceQu'] = df['FireplaceQu'].fillna(value='No_FP')\ndf['LotFrontage'] = df['LotFrontage'].fillna(value = df['LotFrontage'].mean())\ndf['BsmtCond'] =  df['BsmtCond'].fillna(value='No_BS')\ndf['BsmtQual'] =  df['BsmtQual'].fillna(value='No_BS')\nfor col in ('BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    df[col] = df[col].fillna('No_BS')\nfor col in ('GarageQual', 'GarageCond', 'GarageFinish','GarageType'):\n    df[col] = df[col].fillna('No_Garage')","17d47cc7":"df.dropna(axis=0, inplace=True)","5704f61e":"df_all_category = df.select_dtypes(include=['object'])","1cefe4a0":"df = df[['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n       'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',\n       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC',\n       'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageFinish',\n       'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive',\n       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition','SalePrice']]","f0fe8360":"\"\"\"Here I am doing label encoding of only categorical variables.\"\"\"\nle = preprocessing.LabelEncoder()\nfor col in df.columns.values:\n        if df[col].dtypes=='object':\n            le.fit(df[col].values)\n            df[col]=le.transform(df[col])","2601ebf5":"X = df.iloc[:,0:74]\nY = df.iloc[:,-1]","5d259ba4":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=500, random_state=2, oob_score=True)\nregressor.fit(X,Y)\nprint('Out-of-bag score estimate:', (regressor.oob_score_))\n","9ce1a362":"\"\"\"Discoving the feature importance of various variables and found out that the overall quality\nof the hourse if the most important variable.The grpah only contains 25 top variables for predicting\nthe sale price of the house.\"\"\"\ncoef = pd.Series(regressor.feature_importances_, index = X.columns).sort_values(ascending=False)\nplt.figure(figsize=(10, 5))\ncoef.head(25).plot(kind='bar')\nplt.title('Feature Significance based on Random Forest Regressor')\nplt.tight_layout()\nplt.show()","9ab79e40":"kfold = model_selection.ShuffleSplit(n_splits=5, test_size=0.3, random_state=1)\nresults = model_selection.cross_val_score(regressor, X, Y, cv=kfold)\nprint(\"Accuracy: %.3f%% (%.3f%%)\" % (results.mean()*100.0, results.std()*100.0))","1d7c46a8":"test_df.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)\ntest_df.drop(['Id', 'GarageYrBlt'], axis=1,inplace=True)","073a58e7":"test_df['FireplaceQu'] = test_df['FireplaceQu'].fillna(value='No_FP')\ntest_df['LotFrontage'] = test_df['LotFrontage'].fillna(value = df['LotFrontage'].mean())\ntest_df['BsmtCond'] =  test_df['BsmtCond'].fillna(value='No_BS')\ntest_df['BsmtQual'] =  test_df['BsmtQual'].fillna(value='No_BS')\nfor col in ('BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    test_df[col] = test_df[col].fillna('No_BS')\nfor col in ('GarageQual', 'GarageCond', 'GarageFinish','GarageType'):\n    test_df[col] = test_df[col].fillna('No_Garage')","5035d035":"test_df.dropna(axis=0, inplace=True)","4a00ea24":"for col in test_df.columns.values:\n       # Encoding only categorical variables\n        if test_df[col].dtypes=='object':\n            le.fit(test_df[col].values)\n            test_df[col]=le.transform(test_df[col])","120896e1":"y_pred = regressor.predict(test_df)","4d2e55af":"plt.hist(Y, label = 'Train Price')\nplt.hist(y_pred, label='Predicted Price')\nplt.legend(loc='upper right')\nplt.xlabel('Sale Prices')\nplt.ylabel('Number of Houses')\nplt.title('Trained and predicted prices of the houses')\n#plt.text(100000,600,'Average price of train dataset', fontsize=10)\nplt.show()","bbf6b9fa":"\"\"\" Scatter plot showing distribution of original and predicted sale prices w.r.t overall material \nand finish of the house\n\"\"\"\nplt.scatter(df['OverallQual'], Y, marker = '+')\nplt.scatter(test_df['OverallQual'], y_pred, marker= 'x')\nplt.title('Orginial and predicted sale price w.r.t OverallQual')\nplt.show()","e5c79ca7":"----------------------SOME ANALYIS ON THE DATASET----------------------------------------","b52969ac":"---------------------- MODEL PREDICTIONS------------------------------------------------------\n\nPreparing the test dataset for making predictions using the model we just created. The dataset needed\nsome cleaning and modifications before inputting it to the model.","df91b049":"Graph depicting the distribution of the actual sale prices and the predicted sale prices. As we can see that the model predicted maximum sale prices lie between 100000 to 200000 and the maximum price was around 500000.","a4ca5496":"-----------------------------MODEL BUILDING & TESTING------------------------------------------------\n\nBuilding the model using RandomForestRegressor with 500 estimators and training the same with train dataset provided. Printed the out-of-bag score of the model which came out to be around 86%.\nRandomForestRegressor also can be used to determine the most important features in the dataset.\nI then checked the same using K-Fold cross validation with 5 spilts and found out the accuracy came out to be 85%. ","371c274d":"----------------------------------DATA CLEANING------------------------------------\n\nI checked the number of null records in the data set and found out that FirePlace, BsmtExposure and BsmtCond, BsmtFintype1 have NA records which according to the data description says that there is no fireplace, no basement in the house. I also substitued the LotFrontage variable with the mean of the value. Also, for some of the other variables there were 6-7 NA records which I removed from the dataset.\n\nI also did label encoding of categorical variables before inputting the dataset to the Random Forest Regressor.","f304a53d":"---------------------------------------**-DATA ANALYSIS & RANDOM FOREST REGRESSOR**------------------------------\n                                                                       \n                                                                *     **  Created by: Bhavya Chugh*****\n\n\nPlease feel free to look at my notebook and give you suggesstions and comments."}}