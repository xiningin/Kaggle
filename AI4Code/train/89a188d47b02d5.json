{"cell_type":{"c5914173":"code","476cb216":"code","ebd219fb":"code","00ce73e9":"code","500db579":"code","1764a76b":"code","f243bb10":"code","eab97d58":"code","335a9e23":"code","d6c656b6":"code","0a595faf":"code","6fa0b402":"code","17114320":"code","1566af45":"code","02c8dac5":"code","b1647f39":"code","f5dd0fb2":"code","c8b73f49":"code","fef9b753":"code","614c74ce":"code","1e36b052":"markdown"},"source":{"c5914173":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","476cb216":"import pandas as pd\nsp = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\nsp.head()","ebd219fb":"sp.shape","00ce73e9":"sp.isnull().sum()","500db579":"sp.info()","1764a76b":"sp.duplicated().sum()","f243bb10":"categorical = sp.select_dtypes(['category', 'object']).columns\n\nfor col in categorical:\n    print('{} : {} unique value(s)'.format(col, sp[col].nunique()))\n    \nprint('\\n-------------\\n')\n\nfor col in categorical:\n    print('{} : {}'.format(col, ', '.join(sp[col].unique())))","eab97d58":"score = ((sp['math score'] + sp['reading score'] + sp['writing score']) \/ 300) * 100\nsp['percentage'] = score\nsp.head()","335a9e23":"def Grade(percentage):\n    if (percentage >= 95):return 'A'\n    if (percentage >= 80):return 'B'\n    if (percentage >= 65):return 'C'\n    if (percentage >= 50):return 'D'\n    if (percentage >= 35):return 'E'\n    else: return 'F'\n    \nsp[\"grade\"] = sp.apply(lambda x : Grade(x[\"percentage\"]), axis=1)\nsp","d6c656b6":"a = sp.groupby('race\/ethnicity') ['gender'].value_counts()\na","0a595faf":"# data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"darkgrid\")\ncolors = sns.color_palette('pastel')[0:5]\nplt.figure(figsize=(6,6))\nsns.countplot(data=sp, x='gender')\nplt.title('Students Gender Distribution', fontsize=15, fontweight='bold')\nplt.show()\n\nprint('total male students: {}'.format(len(sp[sp.gender == 'male'])))\nprint('total female students: {}'.format(len(sp[sp.gender == 'female'])))","6fa0b402":"plt.figure(figsize=(6,6))\nsns.countplot(data=sp, x='race\/ethnicity', hue='grade')\nplt.title('Students Gender Distribution', fontsize=15, fontweight='bold')\nplt.show()","17114320":"sns.boxplot(x=\"race\/ethnicity\", y=\"percentage\", data=sp, palette='rainbow', hue='lunch')","1566af45":"plt.figure(figsize=(6, 6))\nsns.kdeplot(data=sp, shade=True)\nplt.show","02c8dac5":"plt.figure(figsize=(14, 7))\nlabels=['Female', 'Male']\nplt.pie(sp['gender'].value_counts(),labels=labels,explode=[0.1,0.1],\n        autopct='%1.2f%%',colors=['#E37383','#FFC0CB'], startangle=90)\nplt.title('Gender')\nplt.axis('equal')\nplt.show()","b1647f39":"plt.figure(figsize=(10,5))\nsns.set_context(\"talk\",font_scale=1)\nsns.set_palette(\"pastel\")\nax = sns.countplot(y=\"race\/ethnicity\", hue=\"gender\", data=sp)\nax.legend(loc='upper right',frameon=True)\nplt.title('Gender vs Grades', fontsize=18, fontweight='bold')\nax.set(xlabel='COUNT',ylabel='GRADE')\nplt.show()","f5dd0fb2":"import numpy as np\nrace = ['Group A', 'Group B ', 'Group C',  \n        'Group D', 'Group E'] \n  \ndata = [89, 190, 319, 262, 140] \n  \n  \n# Creating explode data \nexplode = ( 0.1, 0,0.2, 0.1, 0) \n  \n# Creating color parameters \ncolors = (  \"#ffd11a\", \"#b463cf\", \n          \"#DC143C\", \"#6699ff\", \"#ff66b3\" ) \n  \n# Wedge properties \nwp = { 'linewidth' : 1, 'edgecolor' : \"#cccccc\" } \n  \n# Creating autocpt arguments \ndef func(pct, allvalues): \n    absolute = int(pct \/ 100.*np.sum(allvalues)) \n    return \"{:.1f}%\\n({:d} )\".format(pct, absolute) \n  \n# Creating plot \nfig, ax = plt.subplots(figsize =(10, 7)) \nwedges, texts, autotexts = ax.pie(data,  \n                                  autopct = lambda pct: func(pct, data), \n                                  explode = explode,  \n                                  labels = race, \n                                  shadow = True, \n                                  colors = colors, \n                                  startangle = 90, \n                                  wedgeprops = wp, \n                                  textprops = dict(color =\"#000000\")) \n  \n# Adding legend \nax.legend(wedges, race, \n          title =\"Race\/Ethnicity\", \n          loc =\"center left\", \n          bbox_to_anchor =(1.25, 0, 0, 1.25)) \n  \nplt.setp(autotexts, size = 8, weight =\"bold\") \nax.set_title(\"Race\/Ethnicity Distribution\", fontsize=15, fontweight='bold') \n  \n# show plot \nplt.show()","c8b73f49":"import seaborn as sns\nsns.set_theme()\n# Create a visualization\nsns.relplot(data=sp, x=\"math score\", y=\"parental level of education\", hue=\"gender\", style='gender')","fef9b753":"sns.pairplot(data=sp, hue='gender')","614c74ce":"sns.barplot(x='race\/ethnicity', y='math score', data=sp)","1e36b052":"**i will update this notebook soon... if you like this please upvote**"}}