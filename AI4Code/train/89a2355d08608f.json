{"cell_type":{"e32deaba":"code","972b6e1f":"code","9549757c":"code","642f592f":"code","b3ca9b64":"code","0ce1e592":"code","f030f80b":"code","e1c14e22":"code","85dae0b0":"code","14734af2":"code","1c11da75":"code","db5abbd4":"code","5b337fbb":"code","3968ee8f":"code","e738541d":"code","d5ecd020":"code","43278a4a":"code","5080e6c6":"code","1927b071":"code","3a4eeeea":"code","f947b5dc":"code","fbd93d16":"markdown","2d431f17":"markdown","4ead960b":"markdown","49fa6be4":"markdown","0dd9adfb":"markdown","0e21ee9c":"markdown","94a049c1":"markdown","c991cd23":"markdown","d40ea6f1":"markdown","307c1a05":"markdown","2191e580":"markdown","70401983":"markdown","60923c15":"markdown","f9876207":"markdown","024a3a42":"markdown","b8b1d509":"markdown","9e42db4c":"markdown","5bdd426d":"markdown","f5141b1f":"markdown","7b75ab6b":"markdown","212bbada":"markdown","e052d431":"markdown","f9f6f68d":"markdown","dce36965":"markdown","a95d6d75":"markdown","dba55c44":"markdown","b932cc9f":"markdown","eddcf850":"markdown","9d47ff07":"markdown","86dcc8e8":"markdown"},"source":{"e32deaba":"import numpy as np \nimport pandas as pd\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","972b6e1f":"df = pd.read_csv('\/kaggle\/input\/time-series-dataset-passengers\/AirPassengers.csv')\ndf.head()","9549757c":"df.dtypes # Check for datatype","642f592f":"# converting datatype of month into datetime\ndf['Month'] = pd.to_datetime(df['Month'], infer_datetime_format=True)\nprint(df.dtypes)\ndf.head()","b3ca9b64":"df_train = df.set_index(['Month']) #date based index\ndf_train.head()","0ce1e592":"## Plotting simple graph\nplt.plot(df_train.index,df_train.values)\nplt.xlabel('Month')\nplt.ylabel('Num of Passengers')","f030f80b":"ac_lag1 = df_train['#Passengers'].autocorr(lag=1)\nprint('1 Month Lag: ', ac_lag1)\nac_lag3 = df_train['#Passengers'].autocorr(lag=3)\nprint('2 Month Lag: ', ac_lag3)\nac_lag6 = df_train['#Passengers'].autocorr(lag=6)\nprint('6 Month Lag: ', ac_lag6)\nac_lag9 = df_train['#Passengers'].autocorr(lag=9)\nprint('9 Month Lag: ', ac_lag9)","e1c14e22":"\ndef check_rolling_stats(timeseries):\n    #determine statistics\n    df_rolling_mean = timeseries.rolling(window=12).mean()\n    df_rolling_std = timeseries.rolling(window=12).std()\n\n    #Plotting statistics\n    orig_val_plot = plt.plot(timeseries, color='green', label='Original')\n    rolling_mean_plot = plt.plot(df_rolling_mean, color='red', label='Rolling mean')\n    rolling_std_plot = plt.plot(df_rolling_std, color='blue', label='Rolling std')\n    plt.legend()\n    plt.title('Original vs Rolling mean vs std')\n    plt.show()\n    \ncheck_rolling_stats(df_train)","85dae0b0":"from statsmodels.tsa.stattools import adfuller\n\ndfuller_test = adfuller(df_train['#Passengers'], autolag='AIC')\ndfuller_test","14734af2":"dfuller_out = pd.Series(dfuller_test[0:4], index=['Test Statistics','p-value','Lags Used','Num of Observation Used'])\nfor k,v in dfuller_test[4].items():\n    dfuller_out[f'Critical value {k}'] = v\n\nprint('Dickey-Fuller test stats:')\ndfuller_out\n","1c11da75":"## Estimating trend\n\ndf_logScaled = np.log(df_train)\nplt.plot(df_logScaled)","db5abbd4":"df_moving_mean = df_logScaled.rolling(window=12).mean()\ndf_moving_std = df_logScaled.rolling(window=12).std()\n\norig_plot = plt.plot(df_logScaled, color='green', label='Log transformed')\nmean_plot = plt.plot(df_moving_mean, color='red', label='Rolling mean')\nstd_plot = plt.plot(df_moving_std, color='blue', label='Rolling std')\nplt.legend(loc='best')\nplt.title('Log transformed vs Rolling mean(Log transformed) vs st(Log transformed)')\nplt.show()","5b337fbb":"# value = logTransformed - rolling_Mean\n\ndf_subtract = df_logScaled - df_moving_mean\ndf_subtract.dropna(inplace=True)\nprint(df_logScaled.shape, df_subtract.shape,f'{df_logScaled.shape[0]-df_subtract.shape[0]} null rows deleted')\ndf_subtract.head()","3968ee8f":"## summing up all into function (to reuse this block)\ndef check_stationarity(timeseries):\n    #determine statistics\n    df_rolling_mean = timeseries.rolling(window=12).mean()\n    df_rolling_std = timeseries.rolling(window=12).std()\n\n    #Plotting statistics\n    orig_val_plot = plt.plot(timeseries, color='green', label='Original')\n    rolling_mean_plot = plt.plot(df_rolling_mean, color='red', label='Rolling mean')\n    rolling_std_plot = plt.plot(df_rolling_std, color='blue', label='Rolling std')\n    plt.legend()\n    plt.title('Original vs Rolling mean vs std')\n    plt.show()\n    \n    # Dickey-Fuller Test\n    dfuller_test = adfuller(timeseries['#Passengers'], autolag='AIC')\n    dfuller_out = pd.Series(dfuller_test[0:4], index=['Test Statistics','p-value','Lags Used','Num of Observation Used'])\n    for k,v in dfuller_test[4].items():\n        dfuller_out[f'Critical value {k}'] = v\n\n    print('Dickey-Fuller test stats:')\n    print(dfuller_out)","e738541d":"check_stationarity(df_subtract)","d5ecd020":"## Checking for exponential decay weighted average\ndf_edwa = df_logScaled.ewm(halflife=12, min_periods=0, adjust=True).mean() #parameters.... half_life for decay & adjust for viewing EWMA as a moving average\nplt.plot(df_logScaled,color='green')\nplt.plot(df_edwa, color='red')","43278a4a":"## Differences\n## value = Log_scaled - exponentialDecay_Weighted_avg\n\ndf_ls_edwa = df_logScaled - df_edwa\ncheck_stationarity(df_ls_edwa)","5080e6c6":"## shifting value in the TimeSeries so that we can use this into forecasting... As earlier we have subtracted the mean from the Time-Series data, \n## the shift() will shift all those values\ndf_ls_shift = df_logScaled - df_logScaled.shift()\nplt.plot(df_ls_shift)","1927b071":"df_ls_shift.dropna(inplace=True)\ncheck_stationarity(df_ls_shift)","3a4eeeea":"from statsmodels.tsa.seasonal import seasonal_decompose\n\nd = seasonal_decompose(df_logScaled)\n\ntrend = d.trend\nseasonal = d.seasonal\nresidual = d.resid\n\nf,ax = plt.subplots(nrows=2,ncols=2,figsize=(15,5))\nax[0][0].plot(df_logScaled, label='Original')\nax[0][0].legend()\nax[0][1].plot(trend, label='trend')\nax[0][1].legend()\nax[1][0].plot(seasonal, label='seasonal')\nax[1][0].legend()\nax[1][1].plot(residual, label='residual')\nax[1][1].legend()\nf.tight_layout()","f947b5dc":"## Saving transformed data for model building\ndf_ls_shift.to_csv('Transformed_TimeSeries.csv')","fbd93d16":"Null Hypothisis (H0): Series is Stationary\nSince p-value is greater then 0.05, so we fail to reject our null hypothysis i.e. **this TS is non-stationary series.** <br>\nAlso, *for stationary TS Test statistic should be smaller than any of the critical values*.\n","2d431f17":"## CONVERTING time-series into Stationary","4ead960b":"## How to convert non-stationary into Stationary","49fa6be4":"**Thanks for reading my work. Any suggestions\/comments will be appreciated. ANd if you like my work then Do Upvote :)**","0dd9adfb":"## 2. Differences","0e21ee9c":"## 1. Rolling Statistics","94a049c1":"# Check Autocorrelation","c991cd23":"**Data Source and Description**<br>\nThe dataset used is taken from a website ***data.world***.<br>\nYou can find data using this link[time-series-dataset-passengers](https:\/\/www.kaggle.com\/ujoshi076\/time-series-dataset-passengers)<br>\nDataset containg montly passenger traffic of an Airport.<br>\nDataset consist of 2 columns: Month & #Passengers (Number of Passengers)","d40ea6f1":"Here, the p-value is less then 0.05.. So we can reject the null hypothesis i.e. Series is Stationary.","307c1a05":"## 2. Dickey-Fuller Test","2191e580":"**again mean is not constant in this transformed data.So, this is not stationary Time Series.**","70401983":"Time series forecasting is the task of predicting future values based on historical data.<br>\nBelow are some key terms in Time Series Analysis: (**Adding some short intro to key terms, If you want you can skip directly into code**)<br>\n* **Trend**: In trend, there is no fixed interval and any divergence within the given dataset is a continuous timeline. The trend would be Negative or Positive or Null Trend\n* **Seasonality**: In seasonality, regular or fixed interval shifts within the dataset in a continuous timeline. Would be bell curve or saw tooth\n* **Cyclical**: There is no fixed interval, uncertainty in movement and its pattern\n* **Irregularity**: Unexpected situations\/events\/scenarios and spikes in a short time span","60923c15":"# Code","f9876207":"Build a model to forecast the demand in Airplanes. Here, demand specifies the passenger traffic.","024a3a42":"Below methods can be used for this conversion:\n* **Detrending:** It involves removing the trend effects from the given dataset and showing only the differences in values from the trend. \n* **Differencing:** This is a simple transformation of the series into a new time series, which we use to remove the series dependence on time and stabilize the mean of the time series, so trend and seasonality are reduced during this transformation.<br>\n```Yt= Yt \u2013 Yt-1```\n* **Transformation:** This includes three different methods they are *Power Transform, Square Root, and Log Transfer*., most commonly used one is Log Transfer.","b8b1d509":"**Now next on next step we will use ARIMA model for forecasting**\n<br> I will include that in another notebook ans update the link of that in this.\n","9e42db4c":"## 1. Log Transformation","5bdd426d":"1. **Stationary:** TS donn't have Trend, Seasonality & Cyclical. Also mean & variance should be constant wrt time-frame.\n2. **Non-Stationary:** TS have Trend, Seasonality & Cyclical & also mean & variance differ wrt time-frame.\n\n**Note**: If TS is not stationary we have to convert that into Stationary as predictions on stationary is logical.","f5141b1f":"## Types of time-series","7b75ab6b":"## Importing required libraries","212bbada":"Time-series data seems highly autocorrelated.<br> This is also an illustration of the short and long term trends in the data.","e052d431":"Checking for autocorrelation in time series data is another important part of the analytic process. This is a measure of how correlated time series data is at a given point in time with past values.\nHigh Autocorrelation implies that high passenger numbers today suggest a strong likelihood that they will be high tomorrow as well","f9f6f68d":"## How to check Stationarity","dce36965":"*This looks much better on Visual inspection*<br>\nAlso, using Dickey-Fuller test outpout, we can say that this time series is Stationary.","a95d6d75":"# Time Series Forecasting (Airport Monthly Passengers Traffic)","dba55c44":"## Checking components of time-series","b932cc9f":"## Checking Stationarity of data","eddcf850":"1. **Statistical Test:** There are two tests available :\n    * **Augmented Dickey-Fuller (ADF) Test or Unit Root Test**: The ADF test has following assumptions.<br>\n    Null Hypothesis (H0): Series is non-stationary<br>\n    Alternate Hypothesis (H1): Series is stationary\n           if p-value >0.05 Fail to reject (H0)\n           if p-value <= 0.05 Accept (H1) \n     * **Kwiatkowski\u2013Phillips\u2013Schmidt\u2013Shin (KPSS):** These tests are used for testing a NULL Hypothesis (HO), that will perceive the time-series, as stationary around a deterministic trend against the alternative of a unit root.\n     \n  \n2. **Checking via visualization (Plots)**: Although this may sound easy but relying alone on the graphical viw of time-series is not great. As, for some cases the graph will tell different story then what usually the case will be at that time frame. <br> combining both Graphical & Statistical method is always a great choice.\n\n3. **Summary Statistics:** This is often good for a quick test.Steps include,<br>\n        Splitting your time series into two (or more) partitions and <br>\n        compare the mean and variance of each group. <br>\n     If they differ and the difference is statistically significant, the time series is likely non-stationary.","9d47ff07":"## Problem Statement","86dcc8e8":"## Loading Dataset"}}