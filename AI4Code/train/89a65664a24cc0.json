{"cell_type":{"10e11342":"code","e0f98fd0":"code","5c0437a9":"code","26c60ce9":"code","db0faef3":"code","f9a76e28":"code","9e3f2dde":"code","53c35d1b":"code","d5d7ccbc":"code","44ace581":"code","ae37d545":"code","161c8a1c":"code","8d1fd117":"code","97a00c11":"code","5d1d0c1c":"code","d2e45656":"code","5fc6e10c":"code","b0924c73":"code","82ca5f1a":"code","44b48cef":"code","ea540a44":"code","fe6c37a7":"code","48cddbb6":"code","500f566e":"code","49ace7a0":"code","08d546f4":"code","6065d22f":"code","87cd3cbe":"code","6b3cb15a":"code","1bac6e6a":"code","a47f43a5":"code","ca57df23":"code","100d6172":"code","4975c528":"code","4244c701":"code","3d953994":"code","064a6123":"code","484b0622":"code","8eaafe5d":"code","5f3611de":"code","6c8ff24d":"code","f70b4c3b":"code","f490bd3c":"code","0f14b16d":"code","92175abd":"code","53881094":"code","3a8d6497":"code","178dd1e4":"code","349a9b1d":"code","830f753e":"code","e2d0f2db":"code","b9aa5b86":"code","414008b3":"code","f9a07c98":"code","ab2c5730":"code","df829439":"code","5dc62826":"code","edde2ebe":"code","96e1ef31":"code","f05dee2d":"code","1f9740a8":"code","f01c1d09":"code","8152ab26":"code","f8c91b5a":"code","4e2c9d6a":"code","b073ce5b":"code","31e22399":"code","e2b392aa":"code","fa8f5fd7":"code","2d107c6f":"code","c108ea69":"code","9e06864a":"code","2a01cd29":"code","ba62f822":"code","b4e09237":"code","d656d9b4":"code","caa156ca":"code","d13b3109":"code","f7030d29":"code","51c1c9bc":"code","65a3d1f0":"code","9556412c":"code","460576d3":"code","9bfd81be":"code","2f6ec5e9":"code","1ae777d6":"code","b28b671c":"code","834400f0":"code","ca21bc63":"code","fccb844f":"code","763f1664":"code","53ebb707":"code","aab46307":"code","a20ddad9":"code","208db575":"code","7d4801bc":"code","bb884f97":"code","9efa8160":"code","bec17df8":"code","de1fd48b":"code","f7cd3ded":"code","9944b13e":"code","c7501484":"code","f4e469ef":"code","3c57fab2":"code","16603eca":"code","aeca84fc":"code","1bc33115":"code","3ce905e1":"code","63403608":"code","3098ed18":"code","921362d6":"code","2fe6c15d":"code","9c9c0929":"code","9a476b94":"code","8e6b6424":"markdown","2cd90d3d":"markdown","533db14e":"markdown","51f43c3d":"markdown","505c955f":"markdown","87ebf0cc":"markdown","32557230":"markdown","e3ee3c8f":"markdown","0d38323b":"markdown","8b550c05":"markdown","4c0adea7":"markdown","8b341523":"markdown","d680f7db":"markdown","53e6b802":"markdown","1ef09abf":"markdown","8018ea76":"markdown","1ba7c97e":"markdown","cc166ea1":"markdown","a4eb3004":"markdown","45fc38f8":"markdown","ff84f2c2":"markdown","41386b6d":"markdown","2b82fde9":"markdown","287c849b":"markdown","6bc66c0c":"markdown","054b8130":"markdown","7a7870d6":"markdown","b130452c":"markdown","1c77991f":"markdown","d61d3e82":"markdown","d15f06cc":"markdown","54f64ea6":"markdown","badb5a1f":"markdown","401592a8":"markdown","55d79276":"markdown","a5c9342f":"markdown","5b0e6f50":"markdown","855e50d7":"markdown","ee56497b":"markdown","e562a6d6":"markdown","a994bcde":"markdown"},"source":{"10e11342":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n# to suppress warnings \nfrom warnings import filterwarnings\nfilterwarnings('ignore')\npd.set_option('display.max_rows', 1000)\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import accuracy_score","e0f98fd0":"plt.rcParams['figure.figsize'] = [15,8]","5c0437a9":"# Reading the dataset \ndf_satisfaction = pd.read_csv('..\/input\/airline-passenger-satisfaction\/train.csv',index_col='Unnamed: 0')\n\n# First 5 obersvation\ndf_satisfaction.head()","26c60ce9":"# First 5 observation\ndf_satisfaction.head()","db0faef3":"# Last 5 observation\ndf_satisfaction.tail()","f9a76e28":"# Checking for duplicates in the dataset\ndf_satisfaction[df_satisfaction.duplicated()]","9e3f2dde":"# target variable\ndf_target = df_satisfaction['satisfaction']\ndf_target.value_counts()\nsns.countplot(x = df_target,palette='husl')\nplt.text(x = 0.95, y = df_target.value_counts()[1] + 1, s = str(round((df_target.value_counts()[1])*100\/len(df_target),2)) + '%')\nplt.text(x = -0.05, y = df_target.value_counts()[0] +1, s = str(round((df_target.value_counts()[0])*100\/len(df_target),2)) + '%')\nplt.title('Count Plot for Target Variable', fontsize = 15)\nplt.xlabel('Target Variable', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)\nplt.show()","53c35d1b":"#Number of attribute and observation\nprint('Number of Observation:',df_satisfaction.shape[0])\n\nprint('Number of feature:',df_satisfaction.shape[1])","d5d7ccbc":"# Checking are datatype of the attribute\ndf_satisfaction.dtypes","44ace581":"# Describe Function \ndf_satisfaction.describe()","ae37d545":"# Finding Missing Value in the Dataset\ndf_total = df_satisfaction.isnull().sum().sort_values(ascending=False)\n\n# Percentage of missing value in the dataset\npercentage = (((df_satisfaction.isnull().sum()\/df_satisfaction.shape[0]))*100).sort_values(ascending=False)\n\n# Table\ntable = pd.concat([df_total,percentage],keys=['Total','Percentage'],axis=1)\ntable","161c8a1c":"sns.boxplot(df_satisfaction['Arrival Delay in Minutes'])","8d1fd117":"#Checking for the median\ndf_satisfaction['Arrival Delay in Minutes'].median()","97a00c11":"# Replace the missing the value with median as there are outliers\ndf_satisfaction['Arrival Delay in Minutes'].replace(np.NaN,0,inplace=True)","5d1d0c1c":"df_total = df_satisfaction.isnull().sum().sort_values(ascending=False)\n\n# Percentage of missing value in the dataset\npercentage = (((df_satisfaction.isnull().sum()\/df_satisfaction.shape[0]))*100).sort_values(ascending=False)\n\n# Table\ntable = pd.concat([df_total,percentage],keys=['Total','Percentage'],axis=1)\ntable","d2e45656":"#Making a copy of the Dataset\ndf_sat =df_satisfaction.copy()","5fc6e10c":"# Removing the id column as it irrelvant\ndf_sat.drop(['id'],axis=1,inplace=True)","b0924c73":"# Standard Deivation \ndf_sat.std()","82ca5f1a":"pd.crosstab(df_sat.Gender,df_sat.satisfaction).plot(kind=\"bar\",figsize=(15,6))\nplt.title('Satisfied Customer by Gender')\nplt.xticks(rotation=0)\nplt.legend(['neutral\/dissatisfied', 'Satisfied'])\nplt.ylabel('Frequency')\nplt.show()","44b48cef":"pd.crosstab(df_sat['Customer Type'],df_sat.satisfaction).plot(kind=\"bar\",figsize=(15,6))\nplt.title('Satisfied Customer by Customer Type')\nplt.xticks(rotation=0)\nplt.legend(['neutral\/dissatisfied', 'Satisfied'])\nplt.ylabel('Frequency')\nplt.show()","ea540a44":"g = sns.catplot(\"Age\", data=df_sat, aspect=4.0, kind='count', hue='satisfaction', order=range(5, 80))\ng.set_ylabels('Age vs Passenger Satisfaction')","fe6c37a7":"fig = plt.figure(figsize=(12,18))\ndf_num = df_sat.select_dtypes(include=np.number)\nfor i in range(len(df_num.columns)):\n    fig.add_subplot(9,4,i+1)\n    sns.boxplot(y=df_num.iloc[:,i])\n\nplt.tight_layout()\nplt.show()","48cddbb6":"df_sat.drop('satisfaction', axis = 1).hist()\nplt.tight_layout()\nplt.show()  \nprint('Skewness:')\ndf_sat.drop('satisfaction', axis = 1).skew()","500f566e":"df_sat.columns","49ace7a0":"# Encoding the Categorically variable\ndf_cat = df_sat.loc[:,['Gender' ,'Customer Type','Type of Travel' ,'Class','satisfaction']]\n\nfrom sklearn.preprocessing import LabelEncoder\nlencoders = {}\nfor col in df_cat.columns:\n    lencoders[col] = LabelEncoder()\n    df_cat[col] = lencoders[col].fit_transform(df_cat[col])\ndf_cat","08d546f4":"df3 = df_sat.loc[:,['Inflight wifi service',\n       'Departure\/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness']]\ndf3","6065d22f":"df_cat1 = pd.concat([df_cat,df3],axis=1)\ndf_cat1","87cd3cbe":"from sklearn.preprocessing import StandardScaler \nStandard_scaler = StandardScaler()\ndf1 = df_sat.loc[:,['Age','Flight Distance','Departure Delay in Minutes','Arrival Delay in Minutes']]\nStandard_scaler.fit(df1)\ndf_final = pd.DataFrame(Standard_scaler.transform(df1), columns=df1.columns)\n\n# First 5 observation\ndf_final.head()","6b3cb15a":"df_final_draft = pd.concat([df_cat1,df_final],axis=1)\ndf_final_draft","1bac6e6a":"# mutlicollinearity\ndf = df_sat.drop('satisfaction',axis=1)\nsns.heatmap(df.corr()[np.abs(df.corr()>0.6)],annot=True)","a47f43a5":"# train_test_split\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\ny =df_final_draft['satisfaction']\ndf_num_scaled = df_final_draft.drop(['satisfaction'],axis=1)\nX = sm.add_constant(df_num_scaled)\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state = 10, test_size = 0.3)\n\n# print dimension of train set\nprint('X_train', X_train.shape)\nprint('y_train', y_train.shape)\n\n# print dimension of test set\nprint('X_test', X_test.shape)\nprint('y_test', y_test.shape)","ca57df23":"log_reg_full = sm.Logit(y_train,X_train).fit()\n# summary\nprint(log_reg_full.summary())","100d6172":"y_pred_prob = log_reg_full.predict(X_test)\ny_pred_prob.head()","4975c528":"y_pred = [ 0 if x < 0.5 else 1 for x in y_pred_prob]\ny_pred[0:5]","4244c701":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","3d953994":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","064a6123":"from sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot(fpr, tpr)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.plot([0, 1], [0, 1],'r--')\nplt.title('ROC curve for Customer Satisfaction Prediction Classifier (Full Model)', fontsize = 15)\nplt.xlabel('False positive rate (1-Specificity)', fontsize = 15)\nplt.ylabel('True positive rate (Sensitivity)', fontsize = 15)\nplt.text(x = 0.02, y = 0.9, s = ('AUC Score:', round(metrics.roc_auc_score(y_test, y_pred_prob),4)))\nplt.grid(True)","484b0622":"score_card = pd.DataFrame(columns=['Model_Name','Threshold','AUC Score','Accuracy Score','Precision Score', 'Recall Score', 'Specificity','Kappa Score','FPR','f1-score'])\n","8eaafe5d":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'SimpleLogisticRegression-(FullModel)','Threshold':0.5,'AUC Score':metrics.roc_auc_score(y_test, y_pred_prob),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","5f3611de":"youdens_table = pd.DataFrame({'TPR': tpr,\n                             'FPR': fpr,\n                             'Threshold': thresholds})\nyoudens_table['Difference'] = youdens_table.TPR - youdens_table.FPR\nyoudens_table = youdens_table.sort_values('Difference', ascending = False).reset_index(drop = True)\nyoudens_table.head()","6c8ff24d":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\n# consider the independent variables (without the intercept term)\nX_train_rfe = X_train.iloc[:,1:]\nX_test_rfe = X_test.iloc[:,1:]\n\nlogreg = LogisticRegression()\n\nrfe_model = RFE(estimator = logreg, n_features_to_select = 12)\nrfe_model = rfe_model.fit(X_train_rfe, y_train)\n\nfeat_index = pd.Series(data = rfe_model.ranking_, index = X_train_rfe.columns)\n\nsigni_feat_rfe = feat_index[feat_index==1].index\n\n# print the significant features obtained from RFE\nprint(signi_feat_rfe)","f70b4c3b":"# train_test_split\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\ndf_num1 = df_final_draft.loc[:,['Customer Type', 'Type of Travel', 'Class', 'Inflight wifi service',\n       'Ease of Online booking', 'Online boarding', 'On-board service',\n       'Leg room service', 'Checkin service', 'Inflight service',\n       'Cleanliness', 'Arrival Delay in Minutes']]\nX = sm.add_constant(df_num1)\ny =df_final_draft['satisfaction']\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state = 10, test_size = 0.3)\n\n# print dimension of train set\nprint('X_train', X_train.shape)\nprint('y_train', y_train.shape)\n\n# print dimension of test set\nprint('X_test', X_test.shape)\nprint('y_test', y_test.shape)","f490bd3c":"log_reg_feature = sm.Logit(y_train,X_train).fit()\n# summary\nprint(log_reg_feature.summary())","0f14b16d":"y_pred_prob = log_reg_feature.predict(X_test)\ny_pred_prob.head()","92175abd":"y_pred = [ 0 if x < 0.5 else 1 for x in y_pred_prob]\ny_pred[0:5]","53881094":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","3a8d6497":"from sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot(fpr, tpr)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.plot([0, 1], [0, 1],'r--')\nplt.title('ROC curve for Customer Satisfaction Prediction Classifier (significant Features)', fontsize = 15)\nplt.xlabel('False positive rate (1-Specificity)', fontsize = 15)\nplt.ylabel('True positive rate (Sensitivity)', fontsize = 15)\nplt.text(x = 0.02, y = 0.9, s = ('AUC Score:', round(metrics.roc_auc_score(y_test, y_pred_prob),4)))\nplt.grid(True)","178dd1e4":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","349a9b1d":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'SimpleLogisticRegressionSelectedFeature','Threshold':0.5,'AUC Score':metrics.roc_auc_score(y_test, y_pred_prob),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","830f753e":"# train_test_split\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nX = df_final_draft.loc[:,['Customer Type', 'Type of Travel', 'Class', 'Inflight wifi service',\n       'Ease of Online booking', 'Online boarding', 'On-board service',\n       'Leg room service', 'Checkin service', 'Cleanliness',\n       'Departure Delay in Minutes', 'Arrival Delay in Minutes']]\n\ny =df_final_draft['satisfaction']\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state = 10, test_size = 0.3)\n\n# print dimension of train set\nprint('X_train', X_train.shape)\nprint('y_train', y_train.shape)\n\n# print dimension of test set\nprint('X_test', X_test.shape)\nprint('y_test', y_test.shape)","e2d0f2db":"# naive_bayes\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb_model = gnb.fit(X_train, y_train)","b9aa5b86":"y_pred = gnb_model.predict(X_test)","414008b3":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","f9a07c98":"from sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot(fpr, tpr)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.plot([0, 1], [0, 1],'r--')\nplt.title('ROC curve for Customer Satisfaction Prediction Classifier (Naive Bayes)', fontsize = 15)\nplt.xlabel('False positive rate (1-Specificity)', fontsize = 15)\nplt.ylabel('True positive rate (Sensitivity)', fontsize = 15)\nplt.text(x = 0.02, y = 0.9, s = ('AUC Score:', round(metrics.roc_auc_score(y_test, y_pred),4)))\nplt.grid(True)","ab2c5730":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","df829439":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'Navie-Bayes','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","5dc62826":"from sklearn.neighbors import KNeighborsClassifier\nknn_classification = KNeighborsClassifier(n_neighbors =3)\nknn_model = knn_classification.fit(X_train, y_train)","edde2ebe":"y_pred = knn_model.predict(X_test)","96e1ef31":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","f05dee2d":"from sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot(fpr, tpr)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.plot([0, 1], [0, 1],'r--')\nplt.title('ROC curve for Customer Satisfaction Prediction Classifier (Knn 3)', fontsize = 15)\nplt.xlabel('False positive rate (1-Specificity)', fontsize = 15)\nplt.ylabel('True positive rate (Sensitivity)', fontsize = 15)\nplt.text(x = 0.02, y = 0.9, s = ('AUC Score:', round(metrics.roc_auc_score(y_test, y_pred),4)))\nplt.grid(True)","1f9740a8":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","f01c1d09":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'KNN(N=3)','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","8152ab26":"from sklearn.model_selection import GridSearchCV\ntuned_paramaters = {'n_neighbors': np.arange(1, 25, 2),\n                   'metric': ['euclidean','hamming','manhattan','Chebyshev']}\n \nknn_classification = KNeighborsClassifier()\nknn_grid = GridSearchCV(estimator = knn_classification, \n                        param_grid = tuned_paramaters, \n                        cv = 5, \n                        scoring = 'accuracy')\n\nknn_grid.fit(X_train, y_train)\nprint('Best parameters for KNN Classifier: ', knn_grid.best_params_, '\\n')","f8c91b5a":"knn_classification = KNeighborsClassifier(n_neighbors =17,metric='hamming')\nknn_model = knn_classification.fit(X_train, y_train)","4e2c9d6a":"y_pred = knn_model.predict(X_test)","b073ce5b":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","31e22399":"from sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot(fpr, tpr)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.plot([0, 1], [0, 1],'r--')\nplt.title('ROC curve for Customer Satisfaction Prediction Classifier (knn Best params)', fontsize = 15)\nplt.xlabel('False positive rate (1-Specificity)', fontsize = 15)\nplt.ylabel('True positive rate (Sensitivity)', fontsize = 15)\nplt.text(x = 0.02, y = 0.9, s = ('AUC Score:', round(metrics.roc_auc_score(y_test, y_pred),4)))\nplt.grid(True)","e2b392aa":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","fa8f5fd7":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'KNN(N=17)','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","2d107c6f":"def get_train_report(model):\n    train_pred = model.predict(X_train)\n    return(classification_report(y_train, train_pred))","c108ea69":"def get_test_report(model):\n    test_pred = model.predict(X_test)\n    return(classification_report(y_test, test_pred))","9e06864a":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree","2a01cd29":"decision_tree_classification = DecisionTreeClassifier(criterion = 'gini', random_state = 10)\n\ndecision_tree = decision_tree_classification.fit(X_train, y_train)","ba62f822":"import pydotplus\nfrom IPython.display import Image  \nlabels = X_train.columns\ndot_data = tree.export_graphviz(decision_tree, feature_names = labels, class_names = [\"0\",\"1\"])  \ngraph = pydotplus.graph_from_dot_data(dot_data)  \n\nImage(graph.create_png())","b4e09237":"y_pred = decision_tree.predict(X_test)","d656d9b4":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","caa156ca":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","d13b3109":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'Decision-Tree','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","f7030d29":"train_report = get_train_report(decision_tree)\nprint(train_report)","51c1c9bc":"test_report = get_test_report(decision_tree)\nprint(test_report)","65a3d1f0":"# import various functions from sklearn\nfrom sklearn.metrics import classification_report\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.model_selection import GridSearchCV","9556412c":"tuned_paramaters = [{'criterion': ['entropy', 'gini'], \n                     'max_depth': range(2, 10),\n                     'min_samples_split': range(2,10),\n                     'min_samples_leaf': range(2,10),\n                     'max_leaf_nodes' : range(2,10)\n                     }]\n \ndecision_tree_classification = DecisionTreeClassifier(random_state = 10)\n\n\ntree_grid = GridSearchCV(estimator = decision_tree_classification, \n                         param_grid = tuned_paramaters, \n                         cv = 5)\n\n# fit the model on X_train and y_train using fit()\ntree_grid_model = tree_grid.fit(X_train, y_train)\n\n# get the best parameters\nprint('Best parameters for decision tree classifier: ', tree_grid_model.best_params_, '\\n')","460576d3":"dt_model = DecisionTreeClassifier(criterion ='gini',\n                                  max_depth = 5,\n                                  max_leaf_nodes = 9,\n                                  min_samples_leaf = 2,\n                                  min_samples_split = 2,\n                                  random_state = 10)\n\n# use fit() to fit the model on the train set\ndt_model = dt_model.fit(X_train, y_train)","9bfd81be":"tree.plot_tree(dt_model,filled=True)","2f6ec5e9":"train_report = get_train_report(dt_model)\nprint(train_report)","1ae777d6":"test_report = get_test_report(dt_model)\nprint(test_report)","b28b671c":"y_pred = dt_model.predict(X_test)","834400f0":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","ca21bc63":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","fccb844f":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'Decision-Tree With Best Params','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","763f1664":"rf_classification = RandomForestClassifier(n_estimators = 10, random_state = 10)\nrf_model = rf_classification.fit(X_train, y_train)","53ebb707":"train_report = get_train_report(rf_classification)\nprint(train_report)","aab46307":"test_report = get_test_report(rf_classification)\nprint(test_report)","a20ddad9":"y_pred = rf_classification.predict(X_test)","208db575":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","7d4801bc":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'RandomForest','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","bb884f97":"tuned_paramaters = [{'criterion': ['entropy', 'gini'],\n                     'n_estimators': [10, 30, 50, 70, 90],\n                     'max_depth': [10, 15, 20],\n                     'min_samples_split': [2, 5, 8, 11],\n                     }]\n \nrandom_forest_classification = RandomForestClassifier(random_state = 10)\n\n\nrf_grid = GridSearchCV(estimator = random_forest_classification, \n                       param_grid = tuned_paramaters, \n                       cv = 5)\n\nrf_grid_model = rf_grid.fit(X_train, y_train)\n\nprint('Best parameters for random forest classifier: ', rf_grid_model.best_params_, '\\n')","9efa8160":"rf_model = RandomForestClassifier(criterion = 'entropy', \n                                  n_estimators = 70,\n                                  max_depth = 20,\n                                  min_samples_split = 8,\n                                  random_state = 10)\n\n# use fit() to fit the model on the train set\nrf_model = rf_model.fit(X_train, y_train)\n\n","bec17df8":"print( get_train_report(rf_model))","de1fd48b":"print(get_test_report(rf_model))","f7cd3ded":"y_pred = rf_model.predict(X_test)","9944b13e":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","c7501484":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","f4e469ef":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'RandomForest With Best Params','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","3c57fab2":"from sklearn.ensemble import AdaBoostClassifier\nada_model = AdaBoostClassifier(n_estimators = 40, random_state = 10)\nada_model.fit(X_train, y_train)","16603eca":"y_pred = ada_model.predict(X_test)","aeca84fc":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","1bc33115":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","3ce905e1":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'AdaBoost','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","63403608":"from xgboost import XGBClassifier\ntuning_parameters = {'learning_rate': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],\n                     'max_depth': range(3,10),\n                     'gamma': [0, 1, 2, 3, 4]}\n\n\nxgb_model = XGBClassifier()\nxgb_grid = GridSearchCV(estimator = xgb_model, param_grid = tuning_parameters, cv = 3, scoring = 'roc_auc')\n\nxgb_grid.fit(X_train, y_train)\n\nprint('Best parameters for XGBoost classifier: ', xgb_grid.best_params_, '\\n')","3098ed18":"xgb_grid_model = XGBClassifier(learning_rate = xgb_grid.best_params_.get('learning_rate'),\n                               max_depth = xgb_grid.best_params_.get('max_depth'),\n                              gamma = xgb_grid.best_params_.get('gamma'))\n\n\nxgb_model = xgb_grid_model.fit(X_train, y_train)\nprint('Classification Report for test set:\\n', get_test_report(xgb_model))","921362d6":"y_pred = xgb_grid_model.predict(X_test)","2fe6c15d":"cm = confusion_matrix(y_test, y_pred)\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = 'RdBu' , cbar = False, \n            linewidths = 0.1, annot_kws = {'size':25})\nplt.xticks(fontsize = 20)\nplt.yticks(fontsize = 20)\nplt.show()","9c9c0929":"TN = cm[0,0]\nTP = cm[1,1]\nFP = cm[0,1]\nFN = cm[1,0]","9a476b94":"Precision = TP \/ (TP+FP)\nRecall = TP \/ (TP+FN)\nSpecificity = TN \/ (TN+FP)\nf1_score = 2*((Precision*Recall)\/(Precision+Recall))\nAccuracy = (TN+TP) \/ (TN+FP+FN+TP)\nFPR = 1-Specificity\nscore = pd.Series({'Model_Name':'XGBoost-TunedParams','Threshold':'-','AUC Score':metrics.roc_auc_score(y_test, y_pred),'Accuracy Score':Accuracy,'Precision Score':Precision,'Recall Score':Recall,'Specificity':Specificity,'Kappa Score':metrics.cohen_kappa_score(y_test, y_pred),'FPR':FPR,'f1-score':f1_score})\nscore_card=score_card.append(score,ignore_index=True)\nscore_card","8e6b6424":"## **Missing Value Handling**","2cd90d3d":"# **Distribution of the numerical variable**","533db14e":"## **Train-Test Split**","51f43c3d":"## **Mutlicollinearity**","505c955f":"## **KNN(k=3)-Model 5**","87ebf0cc":"![aodb-products-services_1.jpg](attachment:aodb-products-services_1.jpg)","32557230":"- **All the Datatype are corrected identified.**","e3ee3c8f":"## **DecisionTree-Model 6**\n","0d38323b":"# **Grid Search RandomSearch - Model 9**","8b550c05":"## **Encoding**\n\n\n","4c0adea7":"# **PAPER PRESENTATION**","8b341523":"**There is slight significant difference between the train and test accuracy; thus can conclude that the decision tree is less over-fitted.**","d680f7db":"## **Optimal Threshold value**","53e6b802":" - As we can see that the optimal cut-off probability is approximately **0.5**.","1ef09abf":"-  **Arival Delay in Minutes has missing of 0.3% and all the other variable doesnt have missing value.**","8018ea76":"## **Scale the data**","1ba7c97e":"# **AdaBoost Model - Model 10**","cc166ea1":"## **Removing Insigificant Variable**","a4eb3004":"# **EDA**","45fc38f8":"To understand the experience of Passengers, Service Quality and their level of satisfaction with the flight services availed by them with reference to US Flights. ","ff84f2c2":"# **XGBoost Model with tuned Params - Model 11**","41386b6d":"- **Their is Correlation between the variable.**","2b82fde9":"## **Logistic Regression (Full Model)-Model 1**","287c849b":"## **Feature Selection Using Recursive Feature Elimination(RFE) Model-2**","6bc66c0c":"- **Above plot shows a distribution of around 56%:44% between neutral\/dissatisfied passengers and satisfied passengers respectively. So the data is quite balanced and it does not require any special treatment.**","054b8130":"# **Attribute Information:**","7a7870d6":"# Problem Statement ","b130452c":"## **GridSearchCV-Model 5**","1c77991f":"- **None of the Attribute has Standard Deviation 0 we cant remove them.**","d61d3e82":"## Naive-bayes-Model 4","d15f06cc":"- **No Missing Value in the dataset**","54f64ea6":"- Five Point Summary are given here.","badb5a1f":"# **Grid Search decision tree - Model 7**","401592a8":"# **RandomForest - Model 8**","55d79276":"- **Outlier are present in Departure Delay,Arrival Delay,Chechin Service and Flight Distance.**\n\n\n\n\n","a5c9342f":"- **We see test and train data have equal accuracy.**\n","5b0e6f50":"- **No Duplicates in the dataset.**","855e50d7":"Gender: Gender of the passengers (Female, Male)\n\nCustomer Type: The customer type (Loyal customer, disloyal customer)\n\nAge: The actual age of the passengers\n\nType of Travel: Purpose of the flight of the passengers (Personal Travel, Business Travel)\n\nClass: Travel class in the plane of the passengers (Business, Eco, Eco Plus)\n\nFlight distance: The flight distance of this journey\n\nInflight wifi service: Satisfaction level of the inflight wifi service (0:Not Applicable;1-5)\n\nDeparture\/Arrival time convenient: Satisfaction level of Departure\/Arrival time convenient\n\nEase of Online booking: Satisfaction level of online booking\n\nGate location: Satisfaction level of Gate location\n\nFood and drink: Satisfaction level of Food and drink\n\nOnline boarding: Satisfaction level of online boarding\n\nSeat comfort: Satisfaction level of Seat comfort\n\nInflight entertainment: Satisfaction level of inflight entertainment\n\nOn-board service: Satisfaction level of On-board service\n\nLeg room service: Satisfaction level of Leg room service\n\nBaggage handling: Satisfaction level of baggage handling\n\nCheck-in service: Satisfaction level of Check-in service\n\nInflight service: Satisfaction level of inflight service\n\nCleanliness: Satisfaction level of Cleanliness\n\nDeparture Delay in Minutes: Minutes delayed when departure\n\nArrival Delay in Minutes: Minutes delayed when Arrival\n\nSatisfaction: Airline satisfaction level(Satisfaction, neutral\/dissatisfaction)","ee56497b":"https:\/\/www.kaggle.com\/teejmahal20\/airline-passenger-satisfaction","e562a6d6":"- **Loyal Customer are more in number even tho count of satisfied and dissatisfied customer is same in Loyal Customer.**","a994bcde":"- **Gender-wise distribution of dissatisfied and satisfied customers are quite same.In both the case male and female the dissatisfied customers are more than satisfied customer.**"}}