{"cell_type":{"425d01f2":"code","f379133f":"code","be979f6f":"code","3ef0797a":"code","ff69c2bf":"code","35b82aa5":"code","908b0ad7":"code","0feea669":"code","4c4418e6":"code","620cb5b2":"code","4be9850c":"code","0562a13f":"code","bfb05da5":"code","90a894db":"code","f6133f07":"code","39c68428":"code","cd5ec8ad":"code","bfa21757":"code","272516a8":"code","bdbbe66f":"code","254a868d":"code","bd1ba11d":"code","33b24cdd":"code","c7f89be5":"code","81b23fd5":"code","484fbbce":"code","12ef8219":"code","c6d92d55":"code","84ca14a8":"code","f7a7c473":"code","1668ba98":"code","fbd774de":"code","39f4dc51":"code","d51ad1d2":"code","de90be29":"code","28d74c4a":"code","119158ee":"code","f95739c6":"code","885347d6":"code","caf7f38c":"code","324f9fb5":"code","11f23126":"code","93ab5db3":"code","a195e8d6":"code","a954d3a7":"code","5cff09c1":"code","9280b32a":"code","f7645ad1":"code","d710c32c":"code","aa169fcb":"code","a12f61c2":"markdown","93789559":"markdown","6e2a28de":"markdown","f8473ae5":"markdown","5b8239a9":"markdown","f4ec5d9b":"markdown","778993cc":"markdown","cfb6129d":"markdown","71b46b3c":"markdown","3915f357":"markdown","81cd5fe4":"markdown","60ce3925":"markdown","c0d69a5c":"markdown","c0750c68":"markdown","0d13a37f":"markdown","8ca76142":"markdown","d60f65ee":"markdown","e138f7be":"markdown","bf1ef0a6":"markdown","7612249e":"markdown","811d5b94":"markdown","fa359c39":"markdown","40f46b00":"markdown","dd9b34cd":"markdown","72941d41":"markdown","c331d286":"markdown","28e2e6ce":"markdown","94624b8a":"markdown","d007ab06":"markdown","39e419bd":"markdown","a14ebd38":"markdown","1f5c30ac":"markdown","a0333d71":"markdown","8648822b":"markdown","296d8d6a":"markdown","a03c25c4":"markdown","626459a3":"markdown"},"source":{"425d01f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nplt.style.use('bmh')\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold,GridSearchCV, train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nimport time","f379133f":"\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nx=pd.read_csv('\/kaggle\/input\/titanic\/train.csv',index_col='PassengerId')\nx_test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv',index_col='PassengerId')\ndisplay(x.head())\ndisplay(x_test.head())","be979f6f":"display(x.describe().T)\ndisplay(x.info())","3ef0797a":"sns.catplot(x=\"Survived\", kind=\"count\", palette=\"ch:.25\", data=x)","ff69c2bf":"x[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","35b82aa5":"x[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","908b0ad7":"sns.catplot(x=\"Sex\", y=\"Survived\", kind=\"bar\", data=x)","0feea669":"sns.catplot(x=\"Sex\", kind=\"count\", palette=\"ch:.25\", data=x)","4c4418e6":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=x)","620cb5b2":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Embarked\", kind=\"bar\", data=x)","4be9850c":"sns.catplot(x=\"Embarked\", y=\"Survived\", kind=\"bar\", data=x)","0562a13f":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"SibSp\", kind=\"bar\", data=x)","bfb05da5":"sns.catplot(x=\"SibSp\", y=\"Survived\", kind=\"bar\", data=x)","90a894db":"x[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","f6133f07":"sns.catplot(x=\"SibSp\", kind=\"count\", palette=\"ch:.25\", data=x)","39c68428":"grid = sns.PairGrid(x, hue=\"Survived\")\ngrid.map_offdiag(sns.scatterplot)\ngrid.map_diag(sns.histplot)\ngrid.add_legend()","cd5ec8ad":"fig, ax = plt.subplots(figsize=(5,5))\ncorr_matrix = x.corr().abs()\nmask = np.triu(np.ones_like(corr_matrix,dtype = bool))\nsns.heatmap(corr_matrix, annot=True, mask=mask, linewidths=.5, ax=ax,center=0)","bfa21757":"x['Title'] = x.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\nx_test['Title'] = x_test.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","272516a8":"#each title mean age\nx[[\"Title\", \"Age\"]].groupby(['Title'], as_index=False).mean().sort_values(by='Age').T","bdbbe66f":"sns.catplot(x=\"Title\", kind=\"count\",height=10,aspect=2, palette=\"ch:.25\",ax=ax, data=x)","254a868d":"x[['Title', 'Survived']].groupby(['Title'], as_index=False).mean().T","bd1ba11d":"y=x.Survived\nx=x.drop(['Survived','Name'],axis=1)\nx_test=x_test.drop(['Name'],axis=1)","33b24cdd":"print(x.isnull().sum())\ntitanic_null_count=x.isnull().sum()*100\/len(x)\nmiss_titanic_plot=titanic_null_count.sort_values(ascending=False).plot(kind='barh')\nprint(titanic_null_count.sort_values(ascending=False))","c7f89be5":"x=x.drop(['Cabin'],axis=1)\nx_test=x_test.drop(['Cabin'],axis=1)","81b23fd5":"obj_cols=x.select_dtypes('object').columns\nobj_cols","484fbbce":"for col in obj_cols:\n    print('{} column has {} unique values'.format(col,x[col].nunique()))","12ef8219":"x=x.drop(['Ticket'],axis=1)\nx_test=x_test.drop(['Ticket'],axis=1)","c6d92d55":"x['Sex'] = x.Sex.map({'male':0,'female':1})\nx_test['Sex'] = x_test.Sex.map({'male':0,'female':1})","84ca14a8":"from sklearn.preprocessing import LabelEncoder\n\nenc = LabelEncoder()\nx['Title'] = enc.fit_transform(x['Title'])\nx_test['Title'] = enc.fit_transform(x_test['Title'])\nx.head()","f7a7c473":"x.dtypes","1668ba98":"x=pd.get_dummies(x)\nx_test=pd.get_dummies(x_test)","fbd774de":"x.head()","39f4dc51":"x[x.Age<1]","d51ad1d2":"x.isnull().sum()","de90be29":"x['Age'].hist()","28d74c4a":"print(x.Age.mean())\nprint(x.Age.median())","119158ee":"imputer=SimpleImputer(strategy='median')\nx_imputed = pd.DataFrame(imputer.fit_transform(x))\nx_imputed.columns = x.columns\nimputer=SimpleImputer(strategy='median')\nx_test_imputed = pd.DataFrame(imputer.fit_transform(x_test))\nx_test_imputed.columns = x_test.columns","f95739c6":"x_imputed['FamilySize'] = x_imputed['SibSp'] + x_imputed['Parch'] + 1\nx_imputed['IsAlone'] = 0\nx_imputed.loc[x_imputed['FamilySize'] == 1, 'IsAlone'] = 1\n\nx_test_imputed['FamilySize'] = x_test_imputed['SibSp'] + x_test_imputed['Parch'] + 1\nx_test_imputed['IsAlone'] = 0\nx_test_imputed.loc[x_test_imputed['FamilySize'] == 1, 'IsAlone'] = 1\n","885347d6":"x_imputed=x_imputed.drop(['SibSp','Parch'],axis=1)\nx_test_imputed=x_test_imputed.drop(['SibSp','Parch'],axis=1)","caf7f38c":"x_imputed.head()","324f9fb5":"scaler=StandardScaler()\nx_imputed_cols=x_imputed.columns\nx_test_imputed_cols=x_test_imputed.columns\nx_imputed=pd.DataFrame(scaler.fit_transform(x_imputed.astype(float)),columns=x_imputed_cols)\nx_imputed.index=x.index\n\nx_test_imputed=pd.DataFrame(scaler.fit_transform(x_test_imputed.astype(float)),columns=x_test_imputed_cols)\nx_test_imputed.index=x_test.index","11f23126":"x_imputed.head()","93ab5db3":"x_train,x_validate,y_train,y_validate=train_test_split(x_imputed,y,test_size=0.2,shuffle=True,random_state=42,stratify=y)","a195e8d6":"logreg=LogisticRegression()\ndt=DecisionTreeClassifier()\nrf=RandomForestClassifier()\nsvm=SVC()\nclass_list=[logreg, dt,rf,svm]\nfor model in class_list:\n        start = time.time()\n        grid = GridSearchCV(estimator=model, param_grid={}, scoring='accuracy', cv=5, n_jobs=-1,verbose=3)\n        grid.fit(x_train, y_train)\n        end = time.time()\n        print(model, '\\n', grid.best_score_,'\\n', round(end-start))","a954d3a7":"param_grid = {'C': [0.01,0.5,1,2,5,7,9],\n              'kernel': [ 'poly','sigmoid', 'linear','rbf'],\n             'degree':[2,3,4],\n             'gamma':['scale','auto']}\nkfold = StratifiedKFold(n_splits=3, shuffle=True, random_state=1)\n\nbest = GridSearchCV(estimator=SVC(), param_grid=param_grid, scoring='accuracy', cv=kfold, n_jobs=-1,verbose=3)\nbest.fit(x_train, y_train)\n\nprint(best.best_score_,best.best_estimator_,best.best_params_)","5cff09c1":"# model=LogisticRegression(max_iter= 50, penalty= 'l2', solver= 'newton-cg')\n# model.fit(x_train,y_train)\n# prediction=model.predict(x_validate)\n# print(accuracy_score(y_validate,prediction))","9280b32a":"model=SVC(C=1, degree=2)\nmodel.fit(x_train,y_train)\nprediction=model.predict(x_validate)\nprint(accuracy_score(y_validate,prediction))","f7645ad1":"# model=RandomForestClassifier()\n# model.fit(x_train,y_train)\n# prediction=model.predict(x_validate)\n# print(accuracy_score(y_validate,prediction))","d710c32c":"model=SVC()\nmodel.fit(x_imputed,y)\nprediction=model.predict(x_test_imputed)","aa169fcb":"submission = pd.DataFrame({\n        \"PassengerId\": x_test_imputed.index,\n        \"Survived\": prediction\n    })\nprint(submission)\nsubmission.to_csv('\/kaggle\/working\/FinalSub.csv', index=False)","a12f61c2":"**SVM got the highes accuracy so i will try to tune its parameters**","93789559":"**after Reading documentations of seaborn library i found so much intersting plots that ight help me with visualizations and understanding the data more and getting insights**","6e2a28de":"**at the same time most passengers had 0 siblings on the ship or were single**","f8473ae5":"**then i wnated to see what is the survival rate of males and females according to the port they joined he ship from**","5b8239a9":"**sibsp=number of siblings or if have wife on ship parch=number of parents or children on the ship embarked=the port he got into the ship from (C = Cherbourg; Q = Queenstown; S = Southampton)**","f4ec5d9b":"**from previous plot Survived People less than unsurvived**","778993cc":"**Dropping redundant features**","cfb6129d":"# Trying different models using gridsearchCV and chosing the top one to tune its parameters","71b46b3c":"**it is obviouse that most of the passengers survived are who joined the ship from Cherbourg Port**","3915f357":"**encoding sex feature as it seems an important feature**","81cd5fe4":"**i found a strange and an intersting thing that males pclass 1 percent according to the other pclasses are higher than that of the females however from previouse plos higher pclass means more survival an females survival ate is much more than males**","60ce3925":"**higher class means more survival persent,might be an indicator that percent of rich people is more than poor**","c0d69a5c":"**the Ticket Column had so much unique values so i decided to drop it to not increase complexity of model after encoding this column**","c0750c68":"**number of females passengers on the ship is much more than that of males**","0d13a37f":"**i wanted to see the distribution of pclass of passengers according to gender as it might give me an insight or observation that leads to a powerfull feature**","8ca76142":"# Standardization","d60f65ee":"**Cabin column had 77% of its data missing so i decided to drop it**","e138f7be":"# Splitting Data into tran and validate with ratio 80:20","bf1ef0a6":"# one hot encoding for Embarked Column","7612249e":"**See histogram of age to ceck for outliers and distribution of age**","811d5b94":"**after potting the heat map of correlation i found that the pclass is the highest correlated feature to the survival label as i thought above after the plot of survival according to the pclass it might be due to thier economical status**","fa359c39":"**i think the name column is a very valuable feature as i can get the nickname or the title of the passenger from it and see if there are more featues i can get from this column**","40f46b00":"**Female survival rate is much higher than that of male**","dd9b34cd":"**from previouse plot the rate of survived passengers wo had 1 sibling or married is higher than other passengers**","72941d41":"**plotting survival rates of males and females according to number of siblings they have on the ship or if they are married**","c331d286":"**most females have 0,1,2 siblings on the ship and survived while males most sirvived who had 1 sibling or had a wife on the ship**","28e2e6ce":"**as stated fro the previouse analysis of the data most of the females titles survived and the new insight i got is that the captain of the ship didnt survive and half the kids on the ship survived**","94624b8a":"**label encoding title column**","d007ab06":"# PreProcessing and Feature Engineering","39e419bd":"# handling Object Datatypes Columns","a14ebd38":"# splitting labels from features and dropping the nae column after getting the new feature and got good insights from it","1f5c30ac":"**Plotting Percent of missing values in columns**","a0333d71":"# EDA","8648822b":"**percent of survival passenegers according to thier gender**","296d8d6a":"**most of the passengers on the ship had the title of Mr which mean age is about 32 so most of the passengers were youth**","a03c25c4":"**survival percent of passengers according to the class they belong to**","626459a3":"**creating a new feature is FamilySize that indicate the size of the family of passenger on ship if he has and 0 if he is alone after that creating the feature is alone from it to indicat if the passenger has no siblings or children on the ship and he is single**"}}