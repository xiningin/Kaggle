{"cell_type":{"15d0ebc4":"code","df998a34":"code","b53e69c6":"code","6a760020":"code","a15a21b3":"code","816594ed":"code","d1a1c196":"code","8ae804d8":"code","07ea9de3":"code","46943191":"code","25f9b4de":"code","65a92622":"code","5c893d5c":"code","9d6ea23a":"code","b57118e7":"code","ccc8fa4e":"code","21b6b849":"code","87d11882":"markdown"},"source":{"15d0ebc4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df998a34":"!pip3 install tensorflow_decision_forests","b53e69c6":"import tensorflow_decision_forests as tfdf\nimport tensorflow as tf\nfrom tensorflow import keras","6a760020":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","a15a21b3":"# I didn't include date time column and also used 3 models for each target variable\nX_train_model_1 = train.drop(['date_time','target_benzene','target_nitrogen_oxides'],axis = 1)\nX_train_model_2 = train.drop(['date_time','target_carbon_monoxide','target_nitrogen_oxides'],axis = 1)\nX_train_model_3 = train.drop(['date_time','target_carbon_monoxide','target_benzene'],axis = 1)","816594ed":"columns = test.columns[1:]\nX_test = test[columns]\ncolumns","d1a1c196":"# better_default and benchmark_rank1 are two predefined hyperparameters settings for both RF and Gradient Boost.\ntfdf.keras.RandomForestModel.predefined_hyperparameters()","8ae804d8":"# Name of the label column.\nlabel = \"target_carbon_monoxide\"\n\ntrain_ds = tfdf.keras.pd_dataframe_to_tf_dataset(X_train_model_1, label=label, task=tfdf.keras.Task.REGRESSION)\nmodel_1 = tfdf.keras.RandomForestModel(hyperparameter_template=\"benchmark_rank1\", task=tfdf.keras.Task.REGRESSION)\nmodel_1.fit(train_ds)","07ea9de3":"# summary is very useful for feature importance and other statictics of model\n# model_1.summary()","46943191":"# converting test dataframe to keras dataset\ntest = tfdf.keras.pd_dataframe_to_tf_dataset(X_test, task=tfdf.keras.Task.REGRESSION)","25f9b4de":"submission['target_carbon_monoxide'] = model_1.predict(test)","65a92622":"# Name of the label column.\nlabel = \"target_benzene\"\n\ntrain_ds = tfdf.keras.pd_dataframe_to_tf_dataset(X_train_model_2, label=label, task=tfdf.keras.Task.REGRESSION)\nmodel_2 = tfdf.keras.RandomForestModel(hyperparameter_template=\"benchmark_rank1\", task=tfdf.keras.Task.REGRESSION)\nmodel_2.fit(train_ds)","5c893d5c":"submission['target_benzene'] = model_2.predict(test)","9d6ea23a":"# Name of the label column.\nlabel = \"target_nitrogen_oxides\"\n\ntrain_ds = tfdf.keras.pd_dataframe_to_tf_dataset(X_train_model_3, label=label, task=tfdf.keras.Task.REGRESSION)\nmodel_3 = tfdf.keras.RandomForestModel(hyperparameter_template=\"benchmark_rank1\", task=tfdf.keras.Task.REGRESSION)\nmodel_3.fit(train_ds)","b57118e7":"submission['target_nitrogen_oxides'] = model_3.predict(test)","ccc8fa4e":"submission.head()","21b6b849":"submission.to_csv('submission_rf_tf.csv', index=False)","87d11882":"Hi,\n\n* This is pretty simple solution which achieved 0.25230 on LB.\n* I used random forests but Gradientboosting can be used with little modifications.\n* There are 2 predefined hyperparameters settings which you can use for both RF and Gradient Boosting."}}