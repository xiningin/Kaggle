{"cell_type":{"7f489a18":"code","bc875640":"code","cf068b99":"code","a8f3d770":"code","8bf4be92":"code","58f19342":"code","c76e5c09":"code","805e9682":"code","65acb2e4":"code","b8934ba6":"code","ac26a3d6":"code","a06fe710":"code","a5afa447":"code","51aae572":"code","bf8b74e4":"code","83b76fe6":"code","97ca53a5":"markdown","49cf5278":"markdown","5b8d6c4a":"markdown","a050d7c4":"markdown","0c1ea315":"markdown","51d29dc2":"markdown"},"source":{"7f489a18":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.cluster import KMeans\n\nimport warnings\nwarnings.filterwarnings('ignore')","bc875640":"iris = pd.read_csv('..\/input\/iris\/Iris.csv').drop(columns='Id') # original iris\nx = iris.select_dtypes(include=np.number).values #  for Kmeans\niris_copy = iris.copy() # to use in further plots","cf068b99":"iris.head()","a8f3d770":"iris.isnull().sum()","8bf4be92":"mapping = {'Iris-setosa':1, 'Iris-versicolor':2, 'Iris-virginica':3}\n\n\niris['Species'] = iris['Species'].replace(mapping)","58f19342":"X = iris.drop(columns='SepalLengthCm') # without feature we wanna predict\ny = iris['SepalLengthCm'] #  with feature to predict","c76e5c09":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test= train_test_split(X,y)","805e9682":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import scorer, mean_absolute_error, r2_score\nfrom sklearn.linear_model import LinearRegression\n\n\npipeline = make_pipeline(StandardScaler(), LinearRegression())\n\npipeline.fit(X_train, y_train)","65acb2e4":"predicted = pipeline.predict(X_test)","b8934ba6":"np.mean(predicted)","ac26a3d6":"r2_score(y_test, predicted)","a06fe710":"from sklearn.cluster import KMeans\n\nwcss = []\n\nfor i in range(1, 11):\n    kmeans=KMeans(n_clusters=i, init='k-means++', max_iter=300,\n                 n_init=10, random_state=0)\n    \n    kmeans.fit(x)\n    \n    wcss.append(kmeans.inertia_)","a5afa447":"fig = px.line(x=np.arange(1,11), y=wcss, \n              color_discrete_sequence=['black'])\n\nfig.update_layout(xaxis=dict(title='number of clusters'),\n                 yaxis=dict(title='WCSS'),\n                 title=dict(text='Elbow method', x=.5, \n                           font=dict(size=30)),\n                 font=dict(family='Lato', size=16))\nfig.add_vline(x=3, line_width=3, line_dash='dash', line_color='green')","51aae572":"kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=300,\n               n_init=10, random_state=0)\n\ny_kmeans = kmeans.fit_predict(x)","bf8b74e4":"fig = make_subplots(rows=1, cols=2, subplot_titles=['Actual', 'Predicted'],\n                   shared_xaxes=False, shared_yaxes=False) # making suplots with 2 columns and one row\n\n# adding Iris setosa sepal-length and sepal-width to the plot\nfig.add_trace(go.Scatter(\n              x=iris_copy.loc[iris_copy.Species=='Iris-setosa','SepalLengthCm'].values,\n              y=iris_copy.loc[iris_copy.Species=='Iris-setosa', 'SepalWidthCm'].values,\n                        mode='markers',\n                        name='Iris-setosa',\n                        marker=dict(color='purple')), col=1, row=1\n             ) \n\n# adding Iris versicolor sepal-length and sepal-width to the plot\nfig.add_trace(go.Scatter(\n    \n              x=iris_copy.loc[iris_copy.Species=='Iris-versicolor','SepalLengthCm'].values,\n              y=iris_copy.loc[iris_copy.Species=='Iris-versicolor','SepalWidthCm'].values,\n                        mode='markers',\n                        name='Iris-versicolor',\n                        marker=dict(color='green')), col=1, row=1\n             )\n\n# adding Iris virginica sepal-length and sepal-width to the plot\nfig.add_trace(go.Scatter(\n              x=iris_copy.loc[iris_copy.Species=='Iris-virginica','SepalLengthCm'].values,\n              y=iris_copy.loc[iris_copy.Species=='Iris-virginica', 'SepalWidthCm'].values,\n                        mode='markers',\n                        name='Iris-virginica',\n                        marker=dict(color='blue')), col=1, row=1\n             )\n\n\n# K-means classified iris virginca as 0, that's why I'm ploting it first\nfig.add_trace(go.Scatter(\n              x=x[y_kmeans== 0,0],\n              y=x[y_kmeans== 0,1],\n                        showlegend=False,\n                        mode='markers', name='Iris-virginica',\n                        marker=dict(color='blue')),row=1, col=2)\n\n# K-means classified iris setosa as 1 that's why I'm ploting it second\nfig.add_trace(go.Scatter(\n              x=x[y_kmeans== 1,0],\n              y=x[y_kmeans== 1,1],\n                        mode='markers', name='Iris-setosa',\n                        showlegend=False,\n                        marker=dict(color='purple')),row=1, col=2)\n\n# K-means classified iris versicolor as 1 that's why I'm ploting it second\nfig.add_trace(go.Scatter(\n              x=x[y_kmeans== 2,0],\n              y=x[y_kmeans== 2,1],\n                        mode='markers', name='Iris-versicolor',\n                        showlegend=False,\n                        marker=dict(color='green')), row=1, col=2)\n\n# some styling\nfig.update_traces(marker=dict(size=12,\n                              line=dict(width=2.5,\n                                        color='black')),\n                  selector=dict(mode='markers')\n                 )\n\nfig.update_xaxes(title_text='SepalLenght')\nfig.update_yaxes(title_text='SepalWidth', title_standoff=2)\n\nfig.update_layout(title=dict(text='<b>Iris clustering<b>', x=.5, font=dict(size=24)), \n                  font=dict(family='Lato', size=14))","83b76fe6":"fig = go.Figure()\n\n# K-means classified iris virginca as 0, that's why I'm ploting it first\nfig.add_trace(go.Scatter3d(\n              x=x[y_kmeans== 0,0],\n              y=x[y_kmeans== 0,1],\n              z=x[y_kmeans==0, 2],\n                        showlegend=False,\n                        mode='markers', name='Iris-virginica',\n                        marker=dict(color='blue')))\n\n\n# K-means classified iris setosa as 1 that's why I'm ploting it second\nfig.add_trace(go.Scatter3d(\n              x=x[y_kmeans== 1,0],\n              y=x[y_kmeans== 1,1],\n              z=x[y_kmeans==0, 2],\n                        mode='markers', name='Iris-setosa',\n                        showlegend=False,\n                        marker=dict(color='purple')))\n\n# # K-means classified iris versicolor as 1 that's why I'm ploting it second\nfig.add_trace(go.Scatter3d(\n              x=x[y_kmeans== 2,0], \n              y=x[y_kmeans== 2,1],\n              z=x[y_kmeans==0, 2],\n                        mode='markers', name='Iris-versicolor',\n                        showlegend=False,\n                        marker=dict(color='green')))\n\n\nfig.update_traces(marker=dict(size=12,\n                              line=dict(width=2.5,\n                                        color='black')),\n                  selector=dict(mode='markers')\n                 )\n\nfig.update_xaxes(title_text='SepalLenght')\nfig.update_yaxes(title_text='SepalWidth', title_standoff=2)\n\nfig.update_layout(title=dict(text='<b>Iris clustering 3D<b>', x=.5, font=dict(size=24)), \n                  font=dict(family='Lato', size=14))\n\n\n","97ca53a5":"![0_oUoXifiKu3tT5REt.png](attachment:09487f43-d9aa-48e2-86fe-884f7166a31d.png)","49cf5278":"Basic info:\nThis dataset contains measuers of 3 species of irises\n\nAim: implement LinearRegression and k-means on this dataset, compare it with original data, 3d plot of clusters","5b8d6c4a":"I'm going to use [elbow method](https:\/\/www.geeksforgeeks.org\/elbow-method-for-optimal-value-of-k-in-kmeans\/) to detect how much clusters will be the best approach.","a050d7c4":"**x axis - sepal width**\n\n**y axis - sepal length**\n\n**z axis - petal length**","0c1ea315":"## implementing k-means","51d29dc2":"## 3D PLOT"}}