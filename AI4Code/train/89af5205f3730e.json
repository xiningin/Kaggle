{"cell_type":{"6a147183":"code","3928b59f":"code","3c53b6e9":"code","09dfc788":"code","a827fddb":"code","50df79f3":"code","d4031e20":"markdown","5cf6730f":"markdown","4e982e8f":"markdown","0b37689e":"markdown","47e1bc36":"markdown"},"source":{"6a147183":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings, re, string\n\nfrom sklearn.linear_model import PassiveAggressiveClassifier, LogisticRegression, SGDClassifier\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.metrics import precision_score, r2_score, recall_score\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import make_pipeline \nfrom sklearn.svm import SVC\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)","3928b59f":"df = (pd.read_csv('..\/input\/fake-news\/train.csv')\n      .fillna(' ')\n      .sample(frac = 1, random_state = 0)\n      .set_index('id'))\n\ndf.head(3)","3c53b6e9":"Params = {'Regresi\u00f3n Log\u00edstica': LogisticRegression(C = 1e5\n                                                    , random_state = 0)\n           , 'Pasive Aggressive Classifier': PassiveAggressiveClassifier(max_iter = 50\n                                                                         , random_state = 0)\n           , 'SGD': SGDClassifier(max_iter = 5\n                                  , tol = None)\n           , 'SVC': SVC(kernel = 'linear'\n                        , random_state = 0\n                        , gamma = 'scale' )}\n\nX = df.title + ' ' + df.author + ' ' + df.text\ny = df.label","09dfc788":"Result = {}\nkf = KFold(n_splits = 10)\n           \nfor i in Params:\n    Score = []\n    clf = make_pipeline(TfidfVectorizer(stop_words = 'english', max_df = 0.7)\n                         , Params[i])\n    \n    clf.fit(X, y)\n    Score.append(round(np.mean(y == clf.predict(X)) * 100, 2))\n    Score.append(cross_val_score(clf, X, y, cv = kf, scoring = 'accuracy').mean())\n    Score.append(round(precision_score(y, clf.predict(X), labels = [0, 1], pos_label = 1) * 100, 2))\n    Score.append(r2_score(y, clf.predict(X)))\n    Score.append(recall_score(y, clf.predict(X), average = None).round(2))\n    Result[i] = Score\n\nResult = (pd.DataFrame(Result, index=['Precisi\u00f3n (accuracy)'\n                                      , 'Cross Val' \n                                      , 'Score (True)'\n                                      , 'R Cuadrado'\n                                      , 'Recall'])\n          .transpose()\n          .sort_values(by = 'Cross Val'\n                       , ascending = False)\n          .reset_index()\n          .rename(columns = {'index':'Modelo'})\n         )\n\nBest = make_pipeline(TfidfVectorizer(stop_words = 'english', max_df = 0.7)\n                         , Params[Result['Modelo'][0]])\n\nBest.fit(X, y)\n\nResult","a827fddb":"df = (pd.read_csv('..\/input\/fake-news\/test.csv')\n      .fillna(' ')\n      .set_index('id'))\n\ndf['label'] = Best.predict(df.title + ' ' + df.author + ' ' + df.text)\n\ndf.head(3)","50df79f3":"df.reset_index()[['id','label']].to_csv('submit.csv', index=False)","d4031e20":"### Import librerias necesarias","5cf6730f":"### Configuramos modelos y preparamos Train y Test","4e982e8f":"* Export predicts.","0b37689e":"* Import base tests and apply the changes applied to the train model and make submisions whit the best model.","47e1bc36":"### Importaci\u00f3n de datos"}}