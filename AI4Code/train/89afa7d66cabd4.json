{"cell_type":{"a7c2192e":"code","6fe79ebf":"code","3f2522ac":"code","1f614acc":"code","5157be80":"code","48fae220":"code","fece9418":"code","6fd869ae":"code","d6322739":"code","ae1d9dda":"code","0c883e6c":"code","63b46f9a":"code","08d3fe84":"code","373d297a":"code","e3eec600":"code","dc71e278":"code","541a12f9":"code","2359a29c":"markdown","58ada319":"markdown","9cf9a13c":"markdown","efca4436":"markdown","826487df":"markdown","d12b6cf3":"markdown"},"source":{"a7c2192e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fe79ebf":"import matplotlib.pyplot as plt\nimport numpy as np \nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.naive_bayes import MultinomialNB, BernoulliNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer","3f2522ac":"train_data = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')","1f614acc":"train_data.head()","5157be80":"# Checking target column \nnp.unique(train_data.target, return_counts=True)","48fae220":"# Visualizing data distribution\ntarget_count = train_data.groupby('target').size().reset_index(name='counts')\nplt.bar(target_count.target, target_count.counts)\nplt.xticks([0,1], labels=[\"Not disaster tweets\", \"disaster tweets\"])\nplt.title(\"Target Distribution\")\nplt.show()","fece9418":"def preprocess(reviews):\n    tokenizer = RegexpTokenizer(r'\\w+')\n    review = str(reviews)\n    review = review.lower()\n    review = review.replace(\"<br \/><br \/>\", \"\")\n    tokens = tokenizer.tokenize(review)\n\n    stop_words = set(stopwords.words('english'))\n    stopwords_removed = [i for i in tokens if i not in stop_words]\n\n    ps = PorterStemmer()\n    stem_text = [ps.stem(i) for i in stopwords_removed]\n\n    cleaned_reviews = \" \".join(stem_text)\n\n    return cleaned_reviews","6fd869ae":"# CLeaning our training Data\nX = train_data.text.apply(preprocess)\ny = train_data.target","d6322739":"X_train, X_test, y_train, y_test = train_test_split(np.array(X), y, test_size=0.20, random_state=10)\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","ae1d9dda":"model1 = Pipeline([\n    ('tfidf', TfidfVectorizer()), \n    ('mnb', MultinomialNB())\n])\nmodel2 = Pipeline([\n    ('c_vec', CountVectorizer()), \n    ('mnb', MultinomialNB())\n])\nmodel3 = Pipeline([\n    ('tfidf', TfidfVectorizer()),\n    ('bern', BernoulliNB())\n])\nmodel4 = Pipeline([\n    ('c_vec', CountVectorizer()),\n    ('bern', BernoulliNB())\n])","0c883e6c":"# Fitting and training the model now\nmodel1.fit(X_train,y_train)\nmodel2.fit(X_train,y_train)\nmodel3.fit(X_train,y_train)\nmodel4.fit(X_train,y_train)","63b46f9a":"print('Model 1 Train score', model1.score(X_train,y_train))\nprint('Model 1 Test score', model1.score(X_test,y_test))\nprint()\nprint('Model 2 Train score', model2.score(X_train,y_train))\nprint('Model 2 Test score', model2.score(X_test,y_test))\nprint()\nprint('Model 3 Train score', model3.score(X_train,y_train))\nprint('Model 3 Test score', model3.score(X_test,y_test))\nprint()\nprint('Model 4 Train score', model4.score(X_train,y_train))\nprint('Model 4 Test score', model4.score(X_test,y_test))","08d3fe84":"models = {'Model 1': model1.score(X_test,y_test),\n          'Model 2': model2.score(X_test,y_test),\n          'Model 3': model3.score(X_test,y_test),\n          'Model 4': model4.score(X_test,y_test)\n         }\nkeys = [i for i in models.keys()]\n#print(keys)\nvalues = [i*100 for i in models.values()]\n#print(values)\nplt.figure(figsize=(15,5))\nplt.barh(keys, values)\n  \nfor index, value in enumerate(values):\n    plt.text(value, index,\n             str(\"%.2f\"%value))\nplt.title(\"Model Accuracy\")\nplt.show()","373d297a":"# Cleaning the test data\ntest_set = test_data.text.apply(preprocess)","e3eec600":"pred = model3.predict(test_set)","dc71e278":"# Creating a new DataFrame for submission\nsubmission_df = pd.DataFrame(list(zip(test_data.iloc[:,0],pred)), columns=['id', 'target'])","541a12f9":"submission_df.to_csv('submission.csv', index=False)","2359a29c":"# Data Cleaning and Preprocessing","58ada319":"### We can conclude that Model 3 and Model 4 are giving the best accuracy of 79.19%","9cf9a13c":"# Creating Model Pipeline","efca4436":"# Splitting the Data into Train and Test","826487df":"# Visualizing the accuracy from the models","d12b6cf3":"# Predicting on Test data"}}