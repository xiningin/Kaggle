{"cell_type":{"0bebc2e3":"code","06fa027c":"code","f99a1f22":"code","68e468bf":"code","8fa2cc9c":"code","1dd31b87":"code","7ecabb1a":"code","ab915b34":"code","51cfde53":"code","de7a8ba0":"code","9cc6dfe1":"code","e6dbddb0":"code","b34c3316":"code","f5c6eaa3":"code","026ec3a0":"code","a5874816":"code","a5e689de":"code","889361ac":"code","ec379354":"code","c889f13b":"code","d9cb5994":"code","8d6ae6b0":"code","979130c9":"code","6fdb6c86":"code","1ed3d9c8":"code","0186b5da":"code","d592bc4d":"code","70ee822d":"code","7455435b":"code","6f4d0d8e":"code","ce4ede9d":"code","b00cc6fb":"code","38f8e169":"code","ff5bb091":"code","50721aed":"code","fc03f24c":"code","3152d5d5":"code","10f828b6":"code","28f835a3":"code","de5dbf7f":"code","84832758":"code","aadf79f1":"code","6dc3624f":"code","184db944":"code","729b05ab":"code","0847608a":"code","4deb4d63":"code","82db87cd":"code","99393794":"code","93e69bd7":"code","25afc148":"code","fc0ed8dc":"code","a5be745e":"code","679ad31c":"code","a3b99a79":"code","2bc6d1f1":"code","a8af5dd1":"code","078a7b19":"code","f982ba08":"code","194bc0b7":"code","8fc188bc":"code","2b25c04e":"code","81ff0ad0":"markdown","a24c9d01":"markdown","94b20d20":"markdown","a7961aad":"markdown","40018bae":"markdown","bc64663d":"markdown","48f27058":"markdown","c3cb4727":"markdown","14804ccd":"markdown","a22be13e":"markdown","5e997823":"markdown","e896ea44":"markdown","4f454342":"markdown","efb020b4":"markdown","2919dc96":"markdown","fd4c1863":"markdown","af3595da":"markdown","f9f86bb7":"markdown","1e90a416":"markdown","8cdf8550":"markdown","25f83a51":"markdown","0a44b937":"markdown","f1db503f":"markdown","3f1d2f2c":"markdown","92c03154":"markdown","c15d0a46":"markdown","92bbbcce":"markdown","03525bbf":"markdown","589654ee":"markdown","85a7c54d":"markdown","9b581e2f":"markdown"},"source":{"0bebc2e3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels as sm\nfrom warnings import filterwarnings \nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.decomposition import FactorAnalysis, PCA\nfrom sklearn.preprocessing import RobustScaler, MinMaxScaler, LabelEncoder, StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom xgboost import plot_importance\nfrom sklearn.feature_selection import mutual_info_classif, chi2, f_classif\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom imblearn.ensemble import RUSBoostClassifier, BalancedRandomForestClassifier, BalancedBaggingClassifier, EasyEnsembleClassifier\nfrom imblearn.metrics import geometric_mean_score, classification_report_imbalanced\nfrom sklearn.metrics import plot_roc_curve, roc_auc_score, plot_confusion_matrix,plot_precision_recall_curve\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nimport shap\nfrom pdpbox import pdp, info_plots","06fa027c":"sns.set('notebook')\nplt.style.use('fivethirtyeight')\nfilterwarnings('ignore')","f99a1f22":"file = '..\/input\/heart-failure-prediction\/heart.csv'","68e468bf":"heart = pd.read_csv(file)","8fa2cc9c":"heart.tail()","1dd31b87":"heart.info()","7ecabb1a":"heart.describe()","ab915b34":"heart.corr()","51cfde53":"heart.skew()","de7a8ba0":"heart.kurtosis()","9cc6dfe1":"heart.mode()","e6dbddb0":"plt.figure(figsize=(15,5))\ng = sns.countplot(x='HeartDisease', data=heart)\nfor i, u in enumerate(heart['HeartDisease'].value_counts(ascending=True)):\n    g.text(i, u, str(u), fontsize=15, bbox=dict(facecolor='yellow', alpha=0.5))\nplt.title('Heart Failure')\nplt.show()","b34c3316":"_, ax = plt.subplots(2, 3, figsize=(15,8))\nplt.suptitle('Boxplot')\nfor i, u in enumerate(['Age','RestingBP','Cholesterol', 'MaxHR', 'Oldpeak']):\n    sns.boxplot(x=u, data=heart, ax=ax[0 if i <3 else 1, i if i < 3 else i%3])\nax[1,2].set_visible(False)\nplt.show()","f5c6eaa3":"_, ax1 = plt.subplots(2, 3, figsize=(15,8))\nplt.suptitle('Histogram by HeartDisease')\nfor i, u in enumerate(['Age','RestingBP','Cholesterol', 'MaxHR', 'Oldpeak']):\n    sns.histplot(x=u, hue='HeartDisease', data=heart, kde=True, ax=ax1[0 if i <3 else 1, i if i < 3 else i%3],\n                stat=\"probability\", cumulative=True)\nax1[1,2].set_visible(False)\nplt.show()","026ec3a0":"sns.countplot(x='FastingBS', hue='HeartDisease', data=heart)\nplt.show()","a5874816":"ob_need_cols = [u for u in heart.columns if heart[u].dtype == 'object']\nnum_need_cols = [u for u in heart.columns if heart[u].dtype != 'object' and u not in ['HeartDisease']]","a5e689de":"def studyplot(df=None, label=None):\n    fig = plt.figure(figsize=(15,10))\n    fig.subplots_adjust(wspace=0.2, hspace=0.4)\n    plt.suptitle(f'{label} heart disease.')\n    for i, u in enumerate(ob_need_cols):\n        ax = fig.add_subplot(2, 3, i+1)\n        data = df[u].value_counts()\n        g = data.plot.bar(legend=True)\n        for i, ux in enumerate(data):\n            g.text(i, ux, str(round(100*ux\/sum(data)))+'%', ha='center')\n        ax.set_title(u)\n    plt.show()","889361ac":"study_data = heart.copy()","ec379354":"encoder = LabelEncoder()","c889f13b":"study_data[ob_need_cols] = study_data[ob_need_cols].apply(encoder.fit_transform)","d9cb5994":"yt = study_data.pop('HeartDisease')","8d6ae6b0":"mutual = pd.Series(mutual_info_classif(study_data, yt, random_state=0),\n                   index=study_data.columns, name='mutual_info')","979130c9":"mutual.sort_values(ascending=False).plot.bar(figsize=(15,5))\nplt.title('Features Mutual information with HeartDisease.')\nplt.ylabel('mutual_info')\nplt.show()","6fdb6c86":"f_anova = pd.Series(f_classif(study_data, yt)[0], index=study_data.columns, name='F-ANOVA')","1ed3d9c8":"f_anova.sort_values(ascending=False).plot.bar(figsize=(15,5))\nplt.title('F-ANOVA between features and HeartDisease')\nplt.ylabel('F-ANOVA')\nplt.show()","0186b5da":"sns.catplot(x='ST_Slope', y='Oldpeak', hue='HeartDisease', data=heart, kind='point', dodge=True)\nplt.title('Informative: Oldpeak vs ST_Slope')\nplt.show()","d592bc4d":"sns.catplot(x='ExerciseAngina', y='Oldpeak', hue='HeartDisease',col='ST_Slope',dodge=True,\n            row = 'ChestPainType', data=heart, kind='point')\nplt.show()","70ee822d":"sns.catplot(x='ST_Slope', y='MaxHR', hue='HeartDisease', data=heart, kind='point', dodge=True)\nplt.title('Informative: MaxHR vs ST_Slope')\nplt.show()","7455435b":"sns.catplot(x='ExerciseAngina', y='MaxHR', hue='HeartDisease',col='ST_Slope',dodge=True,\n            row = 'ChestPainType', data=heart, kind='point')\nplt.show()","6f4d0d8e":"_, ax = plt.subplots(1,2, figsize=(15, 5))\nsns.pointplot(x='FastingBS', y='Oldpeak', hue='HeartDisease', data=heart, dodge=True, ax=ax[0])\nsns.pointplot(x='FastingBS', y='MaxHR', hue='HeartDisease', data=heart, dodge=True, ax=ax[1])\nplt.suptitle('Oldpeak and MaxHR')\nplt.show()","ce4ede9d":"def find_best_learner(x=None, y=None):\n    \"\"\"\n    This function find a best learners\n    \n    @params x: array-matrix (n-sample, n-feature)\n    @params y: array-like (n-sample, )\n    \n    returns: auc score and G-mean score\n    \"\"\"\n    \n    learners = {\"RUSBoost\":RUSBoostClassifier(random_state=0), \n                \"BalancedRandomForest\":BalancedRandomForestClassifier(random_state=0, n_jobs=-1),\n                \"BalancedBagging\":BalancedBaggingClassifier(n_jobs=-1, random_state=0), \n                \"EasyEnsemble\":EasyEnsembleClassifier(n_jobs=-1, random_state=0)}\n    result = {}\n    geo_result = {}\n    report = {}\n    \n    for name in learners.keys():\n        learner = learners[name]\n        auc = cross_val_score(learner, x, y, scoring='roc_auc', cv=10, n_jobs=-1)\n        ypred = cross_val_predict(learner, x, y, cv=10, n_jobs=-1)\n        \n        geo = geometric_mean_score(y, ypred)\n        \n        result[name] = auc\n        geo_result[name] = geo\n        report[name] = classification_report_imbalanced(y, ypred)\n        print(f'{name}: done!')\n    \n    return result, geo_result, report","b00cc6fb":"data = study_data[[ 'ST_Slope', 'ExerciseAngina', 'ChestPainType', 'Oldpeak', 'MaxHR']]","38f8e169":"xtrain, xtest, ytrain,ytest = train_test_split(study_data, yt, stratify=yt, random_state=0, test_size=0.2)","ff5bb091":"res_auc, res_geo, report_clas = find_best_learner(x=xtrain, y=ytrain)","50721aed":"for name in res_auc.keys():\n    print(f'{name}: auc = {round(np.mean(res_auc[name]),3)} +\/- {round(np.std(res_auc[name]), 3)}.')","fc03f24c":"for name in res_geo.keys():\n    print(f'{name}: G-mean = {res_geo[name]}')","3152d5d5":"for name in report_clas.keys():\n    print(name)\n    print(report_clas[name])\n    print('\\n')","10f828b6":"feature_names = xtrain.columns.tolist()","28f835a3":"model = BalancedRandomForestClassifier(n_jobs=-1, random_state=0).fit(xtrain, ytrain)","de5dbf7f":"perm = PermutationImportance(model, random_state=0, scoring='roc_auc').fit(xtest, ytest)","84832758":"eli5.show_weights(perm, feature_names=feature_names)","aadf79f1":"pdp_st_slope = pdp.pdp_isolate(model=model, dataset=xtest,\n                              model_features=feature_names, feature='ST_Slope')","6dc3624f":"pdp.pdp_plot(pdp_st_slope, 'ST_Slope')\nplt.show()","184db944":"pdp_oldpeak = pdp.pdp_isolate(model=model, dataset=xtest,\n                              model_features=feature_names, feature='Oldpeak')","729b05ab":"pdp.pdp_plot(pdp_oldpeak, 'Oldpeak')\nplt.show()","0847608a":"features_to_plot = ['ST_Slope', 'Oldpeak']\ninter1  =  pdp.pdp_interact(model=model, dataset=xtest, model_features=feature_names, \n                            features=features_to_plot)\n\npdp.pdp_interact_plot(pdp_interact_out=inter1, \n                      feature_names=features_to_plot,\n                      plot_type='contour')\nplt.show()","4deb4d63":"features_to_plot1 = ['Oldpeak', 'ChestPainType']\ninter2  =  pdp.pdp_interact(model=model, dataset=xtest, model_features=feature_names, \n                            features=features_to_plot1)\n\npdp.pdp_interact_plot(pdp_interact_out=inter2, \n                      feature_names=features_to_plot1,\n                      plot_type='contour')\nplt.show()","82db87cd":"def shap_function(my_model, data_for_prediction, label=None):\n    explainer = shap.TreeExplainer(my_model)\n    shap_values = explainer.shap_values(data_for_prediction)\n    shap.initjs()\n    if label=='force':\n        return shap.force_plot(explainer.expected_value[1],\n                           shap_values[1], data_for_prediction)\n    if label=='summary':\n        return shap.summary_plot(shap_values[1], data_for_prediction)\n    if label=='bar':\n        xd=pd.DataFrame(shap_values[1], columns=feature_names).abs().mean()\n        return shap.bar_plot(xd, feature_names=xd.index.tolist(), max_display=len(xd.index.tolist()))","99393794":"shap_function(model, xtest.iloc[:30], label='force')","93e69bd7":"shap_function(model, xtest, label='summary')","25afc148":"shap_function(model, xtest, label='bar')","fc0ed8dc":"cols_selected = list(set(feature_names) - set(['Age','RestingBP', 'RestingECG','FastingBS']))","a5be745e":"data = study_data[cols_selected]","679ad31c":"new_xtrain, new_xtest, new_ytrain, new_ytest = train_test_split(data, yt, stratify=yt, \n                                                                random_state=0, test_size=0.2)","a3b99a79":"second_model = Pipeline([('scaler', RobustScaler()), ('brfc', \n                                            BalancedRandomForestClassifier(random_state=0, n_jobs=-1))])","2bc6d1f1":"second_model.fit(new_xtrain, new_ytrain)","a8af5dd1":"print(classification_report_imbalanced(new_ytest, second_model.predict(new_xtest)))","078a7b19":"print('G-mean training:', geometric_mean_score(new_ytrain, second_model.predict(new_xtrain)))\nprint('G-mean test:', geometric_mean_score(new_ytest, second_model.predict(new_xtest)))","f982ba08":"print('AUC training:', roc_auc_score(new_ytrain, second_model.predict(new_xtrain)))\nprint('AUC test:', roc_auc_score(new_ytest, second_model.predict(new_xtest)))","194bc0b7":"_, ax1 = plt.subplots(1, 2, figsize=(15, 5))\nplot_confusion_matrix(second_model, new_xtrain, new_ytrain, ax=ax1[0])\nplot_confusion_matrix(second_model, new_xtest, new_ytest, ax=ax1[1])\nax1[0].set_title('Training')\nax1[1].set_title('Test')\nax1[0].grid(False)\nax1[1].grid(False)\nplt.show()","8fc188bc":"_, ax2 = plt.subplots(1, 2, figsize=(15, 5))\nplot_roc_curve(second_model, new_xtrain, new_ytrain, ax=ax2[0])\nplot_roc_curve(second_model, new_xtest, new_ytest, ax=ax2[1])\nax2[0].set_title('AUC Training')\nax2[1].set_title('AUC Test')\nplt.show()","2b25c04e":"_, ax3 = plt.subplots(1, 2, figsize=(15, 5))\nplot_precision_recall_curve(second_model, new_xtrain, new_ytrain, ax=ax3[0])\nplot_precision_recall_curve(second_model, new_xtest, new_ytest, ax=ax3[1])\nax3[0].set_title('Prec-Rec Training')\nax3[1].set_title('Prec-Rec Test')\nplt.show()","81ff0ad0":"## Informative attributes visualization\n\nA point plot represents an estimate of central tendency for a numeric\nvariable by the position of scatter plot points and provides some\nindication of the uncertainty around that estimate using error bars.","a24c9d01":"# Exploratory data analysis\n\nWe are making descriptive analysis and visualization  ","94b20d20":"## Build model \n\nAge, RestingBP, RestingECG is not necessary in prediction we can remove them.","a7961aad":"# Data mining\n\nThis section, we are going to build model to predict heart disease.","40018bae":"## Visualization","bc64663d":"Each curve shows that there exist oldpeak threshold. Where depending on the oldpeak value we have more dead or not.","48f27058":"# Heart Failure Prediction\n\nCardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worldwide. Four out of 5CVD deaths are due to heart attacks and strokes, and one-third of these deaths occur prematurely in people under 70 years of age. Congestive Heart Failure is a common event caused by CVDs.\n\n<center>\n    <img src=\"https:\/\/www.drugwatch.com\/wp-content\/uploads\/Normal-vs.-Congestive-Heart.jpg\">\n<\/center>\n<center> Congestive heart failure from drugwatch.com<\/center>\n\n\n**Congestive Heart Failure** occurs when the heart is unable to pump blood around the body properly causing fluid buildup around the heart, lungs and other tissues.\n\nThere exist 3 types of Heart Failure\n- **Left-sided Heart Failure**\n- **Right-sided Heart Failure**\n- **Biventricular Heart Failure**\n\nThe task in this notebook is to predict heart failure. To do so, our work is subdivided as follows:\n\n- [Exploratory data Analysis](#eda)\n- [Data Mining](#dm)\n\n**source**: drugwatch.com","c3cb4727":"The central tendency of two curves shows that exist MaxHR threshold.","14804ccd":"- The 5 important features in heart disease for mutual_info are **ST_Slope, ExerciseAngina, ChestPainType, Oldpeak, MaxHR**\n- The 5 important features in heart disease for F-ANOVA are **ST_Slope, ExerciseAngina, Oldpeak, MaxHR, ChestPainType**","a22be13e":"**Summary**\n\nShap values is the best method to see what feature our model consider important. ST_Slope and ChestPainType are best important feature.","5e997823":"We see the mode of each feature. We say:\n- Age majority = 54\n- Sex majority = Male\n- ChestPainType majority = Asymptomatic","e896ea44":"## Feature importance explainability\n\nWe have BalancedRandomForest learner to build our model to predict HeartDisease. We are going to understand what feature our learner consider important. And see what feature shows high or low prediction. ","4f454342":"Heart disease prediction seems good if ST_Slope == FLAT or 1 and bad when ST_Slope == DOWN or 2.","efb020b4":"This chart shows that if Oldpeak < 0.8 prediction is bad but if oldpeak > 0.8 the chance to predict heart disease are better.","2919dc96":"### PDP","fd4c1863":"## Which of independant features are importance  in  heart disease? ","af3595da":"## Descriptive analysis","f9f86bb7":"By seeing this chart, we can said that majorities of patient have heartdisease if their oldpeak is greater than threshold. For example, if patient have **ST_Slope == UP** and **oldpeak > 0.5** then it have heartdisease.  ","1e90a416":"### Visualization","8cdf8550":"This model overfit due to small datasets.","25f83a51":"Result chart shows that all features are good for prediction but only five first are very good. ST_Slope contributes huge weight than others; we can explain heart disease prediction with  **ST_Slope** feature. \n\n- ST_Slope is the slope of the peak exercise ST segment. \n\nNow, we know the five importance feature. We are going to do partial dependence plot (pdp). 4 of the importance feature are categorical type (sex, chestpaintype, exerciseangina and st_slope), the last is a float type. ","0a44b937":"We plot 50 samples to see how each feature increases or decreases heart disease prediction.","f1db503f":"## Find the best learner. ","3f1d2f2c":"### SHAP\n\nWe use shap value to know an impact of feature for prediction. Which feature impacts considerably heart disease prediction?","92c03154":"# UPNEXT","c15d0a46":"The best learner is **BalancedRandomForest**.","92bbbcce":"Only Age feature have intlier.","03525bbf":"This chart shows that dataset are unbalanced with ratio 4:5.","589654ee":"prediction is best if ST_Slope == 1 and Olpeak < 0 and Oldpeak > 2.","85a7c54d":"This chart explains that majority of patients with Oldpeak > 0.9 have heart disease. ","9b581e2f":"- For HeartDisease, we observe than 25% of datapoint are Normal against 50% and 75% of datapoint are heart disease. our datasets are unbalanced.\n- Age and RestingBP feature seems to be normal distribution.\n- Many datapoint have no fasting blood sugar."}}