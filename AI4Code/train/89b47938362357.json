{"cell_type":{"64d1ba48":"code","33ffac40":"code","948d9960":"code","811c9934":"code","1129acf0":"code","8f351f63":"code","90242148":"code","a4d88b9b":"code","6672183e":"code","7237ddc9":"code","d356c3a3":"code","50ee4eb1":"code","bd6d179a":"code","9ed04634":"code","bf2a80dc":"code","369b5358":"code","267d7094":"code","d4463720":"code","4f8e2eb8":"code","a0a9a05c":"code","043865e7":"code","037d7ea6":"code","6958e1d1":"code","9493e642":"code","99c41735":"code","7479f5a2":"code","c6c61d52":"code","6267bb6e":"code","6e54c77e":"code","29bde9f7":"code","a173f087":"code","03b862f4":"code","ae0ba7e9":"code","855e4079":"code","88f53a11":"code","80476586":"code","8af3db15":"code","60390ec5":"code","f94da13d":"code","357b78bb":"code","9170fe8e":"code","7e65ad5d":"code","d462e446":"code","d488579a":"code","34ddbdac":"code","d600381c":"code","9e666fe1":"code","e33484ee":"code","64594ad5":"code","1c47aa76":"code","3a618c06":"code","a3373de3":"code","bd0ebd6a":"code","b6014be5":"code","187efdf1":"code","0d906055":"code","fd10bd0d":"code","5971e9f9":"code","ced1ef2e":"code","274e43c6":"code","34a37ef6":"code","ab48d7b8":"code","06479768":"code","dd53c3d8":"code","4c720798":"code","dbeca182":"code","11756629":"code","a127abfe":"code","b4a19f96":"code","79004337":"code","eae2459e":"code","ac189b8e":"code","8e23c784":"code","d6f79889":"code","420aa8f9":"code","046f31c0":"code","1fe7b2e8":"code","3d92e877":"code","8652872a":"code","fdf4c884":"code","fb955122":"code","90b737ff":"code","81296fb5":"code","11db1f07":"code","fb0a6548":"code","50978d0b":"code","890a5a6c":"code","5507bdbc":"code","5d4390db":"code","fa481854":"code","2ae4696f":"code","287fece5":"code","0e2323e3":"code","230ee1ea":"code","ce410845":"code","e1a24da0":"code","ba14ab0a":"code","5e9e5bb6":"code","1fc58853":"code","98712bc2":"code","217d3fde":"code","8ec308d7":"code","8adcc229":"code","ff9c0213":"code","cc2733d6":"code","700f9bfc":"code","8fbb98fb":"markdown","7fb02afd":"markdown","2f0d7c50":"markdown","cae0f842":"markdown","a1cdb582":"markdown","511f939e":"markdown","ce5fc6fb":"markdown","a49764d9":"markdown","978156d6":"markdown","a22875fe":"markdown","53a5a06b":"markdown","e6a3a2f6":"markdown","8962af42":"markdown","d3b8baa7":"markdown","65816939":"markdown","d3a49127":"markdown","c6dc6ea9":"markdown","6095a48d":"markdown","7c5fbb5a":"markdown","f6dbb19d":"markdown","f7c72b72":"markdown","43a8dd7c":"markdown","64913a99":"markdown","46a578f8":"markdown","2b470145":"markdown","5d794d97":"markdown","b62863d2":"markdown","8f64eade":"markdown","a9a5ecb8":"markdown","eb3e3a18":"markdown","8447e6c0":"markdown","fcbdb5b5":"markdown","d37f5b2b":"markdown","46bbe42c":"markdown","b362b65d":"markdown","4d68e611":"markdown","9c9ddfd3":"markdown","5226aa54":"markdown","db7b25df":"markdown","ed323c5a":"markdown","a1027432":"markdown","5e6eb591":"markdown","6050b259":"markdown","685a4237":"markdown","96171698":"markdown","f4411fdb":"markdown","abd6d7ff":"markdown","661fc3f0":"markdown","35c8c70d":"markdown","7ede7bfb":"markdown","1958b84e":"markdown","112cac3c":"markdown","478d607f":"markdown","684b4a84":"markdown","38c6d5fb":"markdown","ac4f6b79":"markdown","49c9bc38":"markdown","c27909a2":"markdown","a3dfa290":"markdown","0c25b136":"markdown","fbc0acd2":"markdown","7b6fc7f5":"markdown","5955e5be":"markdown","cc6bb5f1":"markdown","0caee85a":"markdown","aa3e9a73":"markdown","772a2106":"markdown","e45a5e02":"markdown","430d07b5":"markdown","6c6c8068":"markdown","a3fbf6b1":"markdown","a62232b7":"markdown","68ce4f00":"markdown","d691dfd3":"markdown","38947a8d":"markdown","c986a639":"markdown","0d095c76":"markdown","d97cd1d6":"markdown","1d5b31e9":"markdown","1d3e36ef":"markdown","31e9524c":"markdown","9f9b79ad":"markdown","a76d51c3":"markdown","8bb45d9a":"markdown","dcc28072":"markdown","7275474b":"markdown","144d44cc":"markdown","307ecb6b":"markdown","d4a346c2":"markdown","049da14c":"markdown"},"source":{"64d1ba48":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta","33ffac40":"!git clone https:\/\/github.com\/DataGlacier\/DataSets.git","948d9960":"cab_data = pd.read_csv('.\/DataSets\/Cab_Data.csv')\ncity = pd.read_csv('.\/DataSets\/City.csv')\ncustomer_id = pd.read_csv('.\/DataSets\/Customer_ID.csv')\ntransaction_id = pd.read_csv('.\/DataSets\/Transaction_ID.csv')\nholiday_data = pd.read_csv('..\/input\/us-holiday-dates-2004-2021\/US Holiday Dates (2004-2021).csv')","811c9934":"print('raws = ',cab_data.shape[0], 'Columns = ', cab_data.shape[1])\nprint(cab_data.dtypes)\ncab_data.head()","1129acf0":"# Time Analysis - Unit Conversion\ndef to_date_format(n):\n    date_str =(datetime(1899,12,30) + timedelta(n-1)).strftime(\"%d-%m-%Y\")\n    date_date =  datetime.strptime(date_str, \"%d-%m-%Y\")\n    return date_date\n\ncab_data['Date of Travel']=cab_data['Date of Travel'].apply(lambda x:to_date_format(x))\ncab_data.head()","8f351f63":"cab_data=cab_data.sort_values(by=['Date of Travel'])\ncab_data=cab_data.reset_index(drop=True)\n\nprint('rows=',cab_data.shape[0], 'colums=', cab_data.shape[1])\ncab_data.head(10)","90242148":"round(cab_data.describe(include='all',datetime_is_numeric=True),2)","a4d88b9b":"cab_data.dtypes","6672183e":"print('raws = ',city.shape[0], 'Columns = ', city.shape[1])\ncity.head(20)","7237ddc9":"city.dtypes","d356c3a3":"city['Population'] = [x.replace(',','') for x in city['Population']]\ncity['Users'] = [x.replace(',','') for x in city['Users']]\ncity['Population'] = city['Population'].astype(float)\ncity['Users'] = city['Users'].astype(float)\ncity.dtypes","50ee4eb1":"city.head()","bd6d179a":"print('raws = ',customer_id.shape[0], 'Columns = ', customer_id.shape[1])\ncustomer_id.head()","9ed04634":"customer_id.dtypes","bf2a80dc":"print('raws = ',transaction_id.shape[0], 'Columns = ', transaction_id.shape[1])\ntransaction_id.head()","369b5358":"transaction_id.dtypes","267d7094":"print('raws = ',holiday_data.shape[0], 'Columns = ', holiday_data.shape[1])\nholiday_data.head()","d4463720":"holiday_data.dtypes","4f8e2eb8":"holiday_data['Date'] = pd.to_datetime(holiday_data['Date'])\nholiday_data.dtypes","a0a9a05c":"cab_data.head(1)","043865e7":"city.head(1)","037d7ea6":"customer_id.head(1)","6958e1d1":"transaction_id.head(1)","9493e642":"holiday_data.head(1)","99c41735":"cab_data['is_holiday'] = cab_data['Date of Travel'].isin(holiday_data['Date']).astype(bool)\ncab_data.head()","7479f5a2":"master_df = cab_data.merge(transaction_id, on= 'Transaction ID').merge(customer_id,on ='Customer ID').merge(city, on = 'City')\nprint('raws = ',master_df.shape[0], 'Columns = ', master_df.shape[1])\nmaster_df.head()","c6c61d52":"round(master_df.describe(datetime_is_numeric=True, include='all'),2)","6267bb6e":"plt.figure(figsize=(9,6))\nax=sns.histplot(data=master_df, x=\"KM Travelled\",bins=60, color= 'yellow')\nplt.title('Km Travelled Distribution', fontsize=15)\nplt.ylabel('Frequency')\nplt.xlabel('Km Travelled')","6e54c77e":"plt.figure(figsize=(9,6))\nsns.histplot(data=master_df, x=\"Price Charged\",bins=60 , color= 'lime')\nplt.title('Price Charged Distribution', fontsize=15)\nplt.ylabel('Frequency')\nplt.xlabel('Price Charged')","29bde9f7":"plt.figure(figsize=(9,6))\nsns.histplot(data= master_df,x=\"Cost of Trip\",bins=60 , color= 'red')\nplt.title('Cost of Trip Distribution', fontsize=20)\nplt.ylabel('Frequency')\nplt.xlabel('Cost of Trip')","a173f087":"plt.figure(figsize=(9,6))\nsns.countplot(data=master_df, x=\"Payment_Mode\", palette='rocket')\nplt.title(\"Payment's Countplot\", fontsize=15)\nplt.ylabel('Frequency')\nplt.xlabel('Payment Mode')","03b862f4":"plt.figure(figsize=(9,6))\nsns.countplot(data=master_df, x=\"Gender\", palette='rocket')\nplt.title('Gender', fontsize=15)\nplt.ylabel('Frequency')\nplt.xlabel('Gender')","ae0ba7e9":"plt.figure(figsize=(9,6))\nsns.histplot(data= master_df,x=\"Age\",bins=48 , color= 'blue')\nplt.title('Age', fontsize=15)\nplt.ylabel('Frequency')\nplt.xlabel('Age')","855e4079":"plt.figure(figsize=(15,6))\nsns.lineplot(data=master_df, x=\"KM Travelled\",y='Cost of Trip', color= 'green')\nplt.title('Cost of Trip Vs KM Travelled', fontsize=15)\nplt.xlabel('KM Travelled')\nplt.ylabel('Cost of Trip')\nplt.show()","88f53a11":"plt.figure(figsize=(9,6))\nsns.countplot(data=master_df, x=\"is_holiday\", palette='rocket')\nplt.title('Holiday Data', fontsize=15)\nplt.ylabel('Frequency')\nplt.xlabel('is_holiday')","80476586":"master_df.corr()","8af3db15":"master_df.dtypes","60390ec5":"master_df['Income (USD\/Month)'] = master_df['Income (USD\/Month)'].astype(float)\nmaster_df['Population'] = master_df['Population'].astype(int)\nmaster_df['Users'] = master_df['Users'].astype(int)\nmaster_df.dtypes","f94da13d":"master_df.apply(lambda x: sum(x.isnull()),axis=0)","357b78bb":"duplicated_rows = master_df[master_df.duplicated()]\nprint('The number of duplicated rows', duplicated_rows.shape[0])","9170fe8e":"plt.figure(figsize=(18,9))\n\nplt.subplot(1,2,1)\nsns.set(font_scale = 1.3)\nsns.boxplot(data = master_df, y = 'Company', x = \"Price Charged\", dodge=False)\n\n\nplt.subplot(1,2,2)\nsns.set(font_scale = 1.3)\nsns.boxplot(data = master_df, y = 'Gender', x = \"Income (USD\/Month)\", dodge=False)\n\n\nplt.tight_layout()\nplt.show()","7e65ad5d":"master_df['Year of Travel'] = master_df['Date of Travel'].dt.year\nmaster_df['Month of Travel'] = master_df['Date of Travel'].dt.month\nmaster_df['Day of Travel'] = master_df['Date of Travel'].dt.day\nmaster_df['Profit'] = master_df['Price Charged'] - master_df['Cost of Trip']\n\nmaster_st=master_df.set_index('Date of Travel')\nmaster_st.sort_values('Date of Travel').head()","d462e446":"yellow_cab_st= master_st[master_st['Company']=='Yellow Cab']\nprint(yellow_cab_st.shape)\nyellow_cab_st.head()","d488579a":"yellow_cab= master_df[master_df.Company.isin(['Yellow Cab'])]\nprint(yellow_cab.shape)\nyellow_cab.head()","34ddbdac":"pink_cab_st= master_st[master_st.Company.isin(['Pink Cab'])]\nprint(pink_cab_st.shape)\npink_cab_st.head()","d600381c":"pink_cab= master_df[master_df.Company.isin(['Pink Cab'])]\nprint(pink_cab.shape)\npink_cab.head()","9e666fe1":"p=master_df.groupby(['Company', 'Year of Travel']).Profit.sum().to_frame('Profit')\np.head(6)","e33484ee":"q=master_df.groupby(['Company', 'Year of Travel'])['Price Charged'].sum().to_frame('Price')\nq.head()","64594ad5":"q['%Profit'] =(p['Profit']*100) \/q['Price']\nq.head(6)","1c47aa76":"y=yellow_cab_st.Profit.resample('Y').sum()\nypy= pd.DataFrame(y)\n\np=pink_cab_st.Profit.resample('Y').sum()\nppy= pd.DataFrame(p)\n\nprint(ypy)\nprint(ppy)\n\ny=yellow_cab_st.Profit.resample('m').sum()\nypm= pd.DataFrame(y)\np=pink_cab_st.Profit.resample('m').sum()\nppm= pd.DataFrame(p)\n\nprint(ypm.head())\nprint(ppm.head())","3a618c06":"ypy['ProfitORides']= ypy['Profit']\/yellow_cab['Date of Travel'].value_counts().resample('Y').sum()\nppy['ProfitORides']= ppy['Profit']\/pink_cab['Date of Travel'].value_counts().resample('Y').sum()\nypm['ProfitORides']= ypm['Profit']\/yellow_cab['Date of Travel'].value_counts().resample('m').sum()\nppm['ProfitORides']= ppm['Profit']\/pink_cab['Date of Travel'].value_counts().resample('m').sum()\nypy['ProfitOKM']= ypy['Profit']\/yellow_cab_st['KM Travelled'].resample('Y').sum()\nppy['ProfitOKM']= ppy['Profit']\/pink_cab_st['KM Travelled'].resample('Y').sum()\nypm['ProfitOKM']= ypm['Profit']\/yellow_cab_st['KM Travelled'].resample('m').sum()\nppm['ProfitOKM']= ppm['Profit']\/pink_cab_st['KM Travelled'].resample('m').sum()","a3373de3":"plt.figure(figsize=(15,6))\n\nfig= yellow_cab_st.Profit.resample('Y').sum().plot.line(color = '#FFD801',label='Yellow Cab Company',linewidth=3, marker='o')\nfig=pink_cab_st.Profit.resample('Y').sum().plot.line(color = '#FF1493',label='Pink Cab Company',linewidth=3, marker='o')\nplt.ylabel('Profit [Millions]', fontsize=20)\nplt.title('Annual Profits',fontsize=25)\nplt.xlabel('Year',  fontsize=20)\nplt.xticks(rotation=0, fontsize=15)\nplt.yticks(rotation=0, fontsize=15)\nplt.legend(loc='best', shadow=True, fontsize=15)","bd0ebd6a":"total_profits_sum = round(master_df.groupby(['Company']).Profit.sum().to_frame('Total Profit'),0)\ntotal_profits_sum","b6014be5":"print(\"It seems that Yellow Cab's profits are\", round(total_profits_sum['Total Profit'][1]\/total_profits_sum['Total Profit'][0]), \"times higher than Pink Cab's Company over the last 3 years.\")","187efdf1":"plt.figure(figsize=(30,9))\n\nfig= yellow_cab_st.Profit.resample('m').sum().plot.line(color = '#FFD801',label='Yellow Cab Company',linewidth=3, marker ='o',fontsize=25)\nfig=pink_cab_st.Profit.resample('m').sum().plot.line(color = '#FF1493',label='Pink Cab Company',linewidth=3, marker='o', fontsize=25)\nplt.xticks(rotation=0, fontsize=25)\nplt.yticks(rotation=0, fontsize=25)\nplt.ylabel('Profit [Millions]',fontsize=30)\nplt.title('Monthly Profits',fontsize=40)\nplt.xlabel('Month',fontsize=30)\nplt.legend(loc='best', shadow=True, fontsize=30)","0d906055":"dpm=master_df.groupby(['Company','Month of Travel'])['Profit'].sum().to_frame('Profit')\ndpm=dpm.reset_index(level='Month of Travel')\ndpm=dpm.reset_index(level='Company')\ndpm.head()","fd10bd0d":"y=yellow_cab_st.Profit.resample('m').sum().to_frame('Profit')\np=pink_cab_st.Profit.resample('m').sum().to_frame('Profit')","5971e9f9":"print('The average monthly profit of Yellow Cab Company is ', round(y.Profit.mean(),1),\"  and it's std deviation is \",round(y.Profit.std(),2), 'so, the percentage of the deviation is', round((y.Profit.std() \/y.Profit.mean())*100,2),'%')\nprint('The average monthly profit of Pink Cab Company is ', round(p.Profit.mean(),1),\"  and it's std deviation is \",round(p.Profit.std(),2), 'so, the percentage of the deviation is', round((p.Profit.std() \/p.Profit.mean())*100,2),'%')","ced1ef2e":"plt.figure(figsize=(30,12))\n\nplt.subplot(1,2,2)\nx1= ypy.ProfitORides.resample('Y').sum()\nx2= ppy.ProfitORides.resample('Y').sum()\nplt.bar(x= x1.index.strftime('%Y'), height='ProfitORides', data = ypy,color = '#FFD801',label='Yellow Cab Company')\nplt.bar(x= x2.index.strftime('%Y'), height='ProfitORides', data = ppy, color = '#FF1493',label='Pink Cab Company')\nplt.xticks(rotation=0, fontsize=25)\nplt.yticks(rotation=0, fontsize=25)\nplt.title('Annual Profits over Rides',fontsize=40)\nplt.ylabel('Profit \/ Rides [USD]',fontsize=30)\nplt.xlabel('Year',fontsize=30)\nplt.legend(loc='upper right', shadow=True, fontsize=18)\n\nplt.subplot(1,2,1)\nx1= ypy.ProfitORides.resample('Y').sum()\nx2= ppy.ProfitORides.resample('Y').sum()\nplt.plot(x1.index.strftime('%Y'),'ProfitORides', data = ypy,color = '#FFD801',label='Yellow Cab Company',linewidth=3, marker = 'o')\nplt.plot(x2.index.strftime('%Y'),'ProfitORides', data = ppy, color = '#FF1493',label='Pink Cab Company',linewidth=3, marker='o')\nplt.xticks(rotation=0, fontsize=25)\nplt.yticks(rotation=0, fontsize=25)\nplt.title('Annual Profits over Rides',fontsize=40)\nplt.ylabel('Profit \/ Rides [USD]', fontsize=30)\nplt.xlabel('Year', fontsize=30)\nplt.legend(loc='upper right', shadow=True, fontsize=18)","274e43c6":"def add_value_labels(ax, spacing=5):\n    \"\"\"Add labels to the end of each bar in a bar chart.\n\n    Arguments:\n        ax (matplotlib.axes.Axes): The matplotlib object containing the axes\n            of the plot to annotate.\n        spacing (int): The distance between the labels and the bars.\n    \"\"\"\n\n    # For each bar: Place a label\n    for rect in ax.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n\n        # Use Y value as label and format number with one decimal place\n        label = \"${:.0f}\".format(y_value)\n\n        # Create annotation\n        ax.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va, fontsize=3)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax)","34a37ef6":"ypy_new = ypy.reset_index(level='Date of Travel')\nypy_new.head()","ab48d7b8":"g=sns.catplot(x='Date of Travel',y='ProfitORides',data=ypy_new,kind='bar')\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.125, \n            p.get_height() * 1.02, \n            \"${:.2f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='small')\na\u00f1os = ['2016','2017','2018']\nmapeado = range(len(a\u00f1os))\nplt.xticks(mapeado, a\u00f1os, rotation =0)\nplt.title('Yearly POR Yellow Cab Company',fontsize=15)\nplt.ylabel('Profit \/ Rides [USD]')\nplt.xlabel('Year')","06479768":"ppy_new = ppy.reset_index('Date of Travel')\nppy_new","dd53c3d8":"g=sns.catplot(x='Date of Travel',y='ProfitORides',data=ppy_new,kind='bar')\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.125, \n            p.get_height() * 1.02, \n            \"${:.2f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='small')\nyears = ['2016','2017','2018']\nnoy = range(len(years))\nplt.xticks(noy, years, rotation =0)\nplt.title('Yearly POR PinkCab Company',fontsize=15)\nplt.ylabel('Profit \/ Rides [USD]')\nplt.xlabel('Year')","4c720798":"plt.figure(figsize=(30,9))\n\nx1= ypm.ProfitORides.resample('m').sum()\nx2= ppm.ProfitORides.resample('m').sum()\nplt.plot(x1.index,'ProfitORides', data = ypm,color = '#FFD801', linewidth = 3,label='Yellow Cab Company', marker='o')\nplt.plot(x2.index,'ProfitORides', data = ppm, color = '#FF1493',linewidth = 3,label='Pink Cab Company', marker='o')\nplt.xticks(rotation=0,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\nplt.title('Monthly Profits over Rides',fontsize=30)\nplt.ylabel('Profit \/ Rides [USD]',fontsize=25)\nplt.xlabel('Month',fontsize=25)\nplt.legend(loc='upper right', shadow=True, fontsize=20)","dbeca182":"plt.figure(figsize=(30,9))\n\nplt.subplot(1,2,2)\nx1= ypy.ProfitOKM.resample('Y').sum()\nx2= ppy.ProfitOKM.resample('Y').sum()\nplt.bar(x= x1.index.strftime('%Y'), height='ProfitOKM', data = ypy,color = '#FFD801',label='Yellow Cab Company')\nplt.bar(x= x2.index.strftime('%Y'), height='ProfitOKM', data = ppy, color = '#FF1493',label='Pink Cab Company')\nplt.xticks(rotation=0,fontsize=20)\nplt.title('Annual Profits over KM',fontsize=30)\nplt.ylabel('Profit \/ KM [USD]',fontsize=25)\nplt.xlabel('Year',fontsize=25)\nplt.xticks(rotation=0,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\nplt.legend(loc='upper right', shadow=True,fontsize=20)\n\nplt.subplot(1,2,1)\nx1= ypy.ProfitOKM.resample('Y').sum()\nx2= ppy.ProfitOKM.resample('Y').sum()\nplt.ylabel('Profit \/ KM [USD]', fontsize=20)\nplt.plot(x1.index.strftime('%Y'),'ProfitOKM', data = ypy,color = '#FFD801',label='Yellow Cab Company',linewidth=3,marker='o')\nplt.plot(x2.index.strftime('%Y'),'ProfitOKM', data = ppy, color = '#FF1493',label='Pink Cab Company',linewidth=3,marker='o')\nplt.title('Annual Profits over KM',fontsize=30)\nplt.ylabel('Profit \/ KM [USD]',fontsize=25)\nplt.xlabel('Year',fontsize=25)\nplt.xticks(rotation=0,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\nplt.legend(loc='upper right', shadow=True,fontsize=20)","11756629":"plt.figure(figsize=(30,9))\n\nx1= ypm.ProfitOKM.resample('m').sum()\nx2= ppm.ProfitOKM.resample('m').sum()\nplt.ylabel('Profit \/ KM [USD]', fontsize=25)\nplt.plot(x1.index,'ProfitOKM', data = ypm,color = '#FFD801',label='Yellow Cab Company',linewidth=3, marker='o')\nplt.plot(x2.index,'ProfitOKM', data = ppm, color = '#FF1493',label='Pink Cab Company',linewidth=3,marker='o')\nplt.xticks(rotation=0,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\nplt.title('Monthly Profits over KM',fontsize=30)\nplt.ylabel('Profit \/ KM [USD]',fontsize=25)\nplt.xlabel('Month',fontsize=25)\nplt.legend(loc='upper right', shadow=True,fontsize=20)","a127abfe":"ppc= yellow_cab.groupby('City').Profit.sum()\nppc= pd.DataFrame(ppc)\nppc = ppc.sort_values(by='Profit', ascending= False )\nppc.head()\n\nplt.figure(figsize=(22,11))\nfig= ppc.Profit.plot.bar(color = '#FFD801',edgecolor='black',linewidth=1.5)\nplt.xticks(rotation=45,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\n\nplt.ylabel('Profits [Millions of USD]', fontsize=25)\nplt.xlabel('Cities', fontsize=25)\nplt.title('Yellow Cab Profits over City',fontsize=30)\nadd_value_labels(fig)","b4a19f96":"ppc= pink_cab.groupby('City').Profit.sum()\nppc= pd.DataFrame(ppc)\nppc = ppc.sort_values(by='Profit', ascending= False )\nppc.head()\n\nplt.figure(figsize=(22,11))\nfig= ppc.Profit.plot.bar(color = '#FF1493',edgecolor='black',linewidth=1.5)\nplt.xticks(rotation=45,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\n\nplt.ylabel('Profits [Millions of USD]', fontsize=25)\nplt.xlabel('Cities', fontsize=25)\nplt.title('Pink Cab Profits over City',fontsize=30)\nadd_value_labels(fig)","79004337":"h=master_df.groupby(['Company','City']).Profit.sum().to_frame('Profit Over City')\nh=h.reset_index(level='City', col_level=1)\nh=h.reset_index(level='Company', col_level=1)\nh = h.sort_values(by='Profit Over City', ascending= False )","eae2459e":"h=h.drop([28,9],axis=0)\nh.head()","ac189b8e":"g=sns.catplot(x='City',y='Profit Over City',data=h,kind='bar',palette = 'rocket',col='Company', height=9, aspect=1.2)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.3, \n            p.get_height(), \n            \"  {:.0f}\".format(p.get_height()), \n            color='black', rotation='vertical', size='large')\nplt.ylabel('Profits [Millions of USD]', fontsize=25)\nplt.xlabel('Cities', fontsize=25)\nplt.title('Yellow Cab Profits over City',fontsize=30)\nplt.xticks(rotation=80,fontsize=15)\nplt.yticks(rotation=0,fontsize=20)\nax = g.facet_axis(0,1)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.3, \n            p.get_height(), \n            \"  {:.0f}\".format(p.get_height()), \n            color='black', rotation='vertical', size='large')\nplt.ylabel('Profits [Millions of USD]', fontsize=25)\nplt.xlabel('Cities', fontsize=25)\nplt.title('Pink Cab Profits over City',fontsize=30)\nplt.xticks(rotation=80,fontsize=15)\nplt.yticks(rotation=0,fontsize=20)\nplt.show()\n","8e23c784":"yellow_rides = pd.DataFrame(yellow_cab['City'])\nyellow_rides['is_profitable'] = pd.DataFrame(yellow_cab['Profit']>0)\nyellow_rides = yellow_rides.groupby(['City','is_profitable']).size().to_frame()\nyellow_rides = yellow_rides.rename(columns = {0:'count'})\nyellow_rides = yellow_rides.pivot_table('count', ['City'], 'is_profitable')\n\nyellow_rides = yellow_rides.fillna(0)\n\nyellow_rides['profitability_%'] = round(((yellow_rides[True]\/(yellow_rides[True]+yellow_rides[False]))*100),2)\nyellow_rides = yellow_rides.reset_index(level='City', col_level=1)\nyellow_rides = yellow_rides.rename_axis(None, axis=1)\nyellow_rides = yellow_rides.sort_values(by='profitability_%', ascending= False)\n\n#list(yellow_rides.columns)\nyellow_rides","d6f79889":"yellow_rides_i = yellow_rides.set_index('City')\nyellow_rides_i","420aa8f9":"pink_rides = pd.DataFrame(pink_cab['City'])\npink_rides['is_profitable'] = pd.DataFrame(pink_cab['Profit']>0)\npink_rides = pink_rides.groupby(['City','is_profitable']).size().to_frame()\npink_rides = pink_rides.rename(columns = {0:'count'})\npink_rides = pink_rides.pivot_table('count', ['City'], 'is_profitable')\n\npink_rides = pink_rides.fillna(0)\npink_rides['profitability_%'] = round(((pink_rides[True]\/(pink_rides[True]+pink_rides[False]))*100),2)\npink_rides = pink_rides.reset_index(level='City', col_level=1)\npink_rides = pink_rides.rename_axis(None, axis=1)\npink_rides = pink_rides.sort_values(by='profitability_%', ascending= False )\n\n#list(yellow_rides.columns)\npink_rides","046f31c0":"pink_rides_i = pink_rides.set_index('City')\npink_rides_i","1fe7b2e8":"plt.figure(figsize=(30,9))\nplt.bar(x= yellow_rides_i.index, height='profitability_%', data = yellow_rides_i,edgecolor = 'black',color = '#FFD801',linewidth=1,label='Yellow Cab')\nplt.bar(x= pink_rides_i.index, height='profitability_%', data = pink_rides_i,edgecolor = 'black',color = '#FF1493',linewidth=1,label='Pink Cab')\nplt.xticks(rotation=45,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\nplt.ylabel('Profitable Rides  [%]', fontsize=25)\nplt.title('Citywise Profitable rides percentage ', fontsize = 30)\nplt.legend(loc='upper right', shadow=True)\nplt.xlabel('Cities', fontsize=25)","3d92e877":"g=sns.catplot(x='City',y='profitability_%',data=yellow_rides,kind='bar',palette = 'rocket', height=8.27, aspect=18\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.195, \n            p.get_height() * 1.02, \n            \"{:.0f}%\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\nplt.ylabel('Profitable [ % ]', fontsize=16)\nplt.xlabel('Cities', fontsize=16)\nplt.title('Yellow Cab Profitable Rides %',fontsize=20)\nplt.xticks(rotation=45)\n\nplt.show()","8652872a":"g=sns.catplot(x='City',y='profitability_%',data=pink_rides,kind='bar',palette = 'rocket', height=8.27, aspect=18\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.195, \n            p.get_height() * 1.02, \n            \"{:.0f}%\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\nplt.ylabel('Profitable [ % ]', fontsize=16)\nplt.xlabel('Cities', fontsize=16)\nplt.title('Pink Cab Profitable Rides %',fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","fdf4c884":"y_hc = yellow_cab.groupby(['Date of Travel','is_holiday']).is_holiday.count().to_frame('trips')\ny_hc=y_hc.reset_index(level='is_holiday', col_level=1)\ny_hc=y_hc.reset_index(level='Date of Travel', col_level=1)\ny_count =  y_hc['is_holiday'].value_counts()\n\np_hc = pink_cab.groupby(['Date of Travel','is_holiday']).is_holiday.count().to_frame('trips')\np_hc=p_hc.reset_index(level='is_holiday', col_level=1)\np_hc=p_hc.reset_index(level='Date of Travel', col_level=1)\np_count =  p_hc['is_holiday'].value_counts()\n\ny_count.to_frame()\np_count.to_frame()\ny_count=y_count.reset_index()\np_count=p_count.reset_index()","fb955122":"y_pc = yellow_cab.groupby(['Date of Travel','is_holiday']).Profit.sum().to_frame('profit')\ny_pc=y_pc.reset_index(level='is_holiday', col_level=1)\ny_pc=y_pc.reset_index(level='Date of Travel', col_level=1)\ny_profit = y_pc.groupby(['is_holiday']).profit.sum()\n\np_pc = pink_cab.groupby(['Date of Travel','is_holiday']).Profit.sum().to_frame('profit')\np_pc=p_pc.reset_index(level='is_holiday', col_level=1)\np_pc=p_pc.reset_index(level='Date of Travel', col_level=1)\np_profit = p_pc.groupby(['is_holiday']).profit.sum()\n\ny_profit.to_frame()\np_profit.to_frame()\ny_profit=y_profit.reset_index()\np_profit=p_profit.reset_index()","90b737ff":"y_profit['avg_profit_per_day']= y_profit['profit']\/y_count['is_holiday']\ny_profit.insert(0,'Company' ,\"Yellow_cab\")\ny_profit","81296fb5":"p_profit['avg_profit_per_day']= p_profit['profit']\/p_count['is_holiday']\np_profit.insert(0,'Company' ,'pink_cab')\np_profit","11db1f07":"holiday_profits = y_profit.append(p_profit, ignore_index=True)\nholiday_profits","fb0a6548":"g=sns.catplot(x='is_holiday',y='avg_profit_per_day',data=holiday_profits,kind='bar',hue='Company',palette=sns.color_palette(['#FFD801','#FF1493']), height=8.27, aspect=11.7\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='medium')\nplt.title('Average profit per day',fontsize=30)\nplt.ylabel('Average Profit',fontsize=25)\nplt.xlabel('Is Holiday?',fontsize=25)\nplt.xticks(rotation=0,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\nplt.show()","50978d0b":"plt.figure(figsize=(30,12))\n\nyellow_cab['Date of Travel'].value_counts().resample('Y').sum().plot.line(color = '#FFD801',linewidth =3,marker='o')\npink_cab['Date of Travel'].value_counts().resample('Y').sum().plot.line(color = '#FF1493',linewidth =3,marker='o')\nplt.legend(['Yellow Cab', 'Pink Cab'],fontsize=20)\nplt.title('Yearly Demand of each Company',fontsize=30)\nplt.ylabel('Demand [No. of Trips]',fontsize=25)\nplt.xlabel('Year',fontsize=25)\nplt.xticks(rotation=0,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\n\nplt.show()","890a5a6c":"plt.figure(figsize=(30,12))\n\nyellow_cab['Date of Travel'].value_counts().resample('m').sum().plot.line(color = '#FFD801',label='Yellow Cab Company',linewidth=3, marker='o')\npink_cab['Date of Travel'].value_counts().resample('m').sum().plot.line(color = '#FF1493',label='Pink Cab Company',linewidth=3,marker='o')\nplt.legend(['Yellow Cab', 'Pink Cab'],fontsize=20)\nplt.title('Monthly historical demand of each Compny',fontsize=30)\nplt.ylabel('Demand [N\u00ba of Trips]',fontsize=25)\nplt.xlabel('Month',fontsize=25)\nplt.xticks(rotation=0,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\nplt.show()","5507bdbc":"dpm=master_df.groupby(['Company','Month of Travel'])['Transaction ID'].agg(['count'])\ndpm=dpm.reset_index(level='Month of Travel', col_level=1)\ndpm=dpm.reset_index(level='Company', col_level=1)\ndpm = dpm.sort_values(by='count', ascending= False)\ndpm.head()","5d4390db":"def add_value_labels1(ax, spacing=5):\n    \"\"\"Add labels to the end of each bar in a bar chart.\n\n    Arguments:\n        ax (matplotlib.axes.Axes): The matplotlib object containing the axes\n            of the plot to annotate.\n        spacing (int): The distance between the labels and the bars.\n    \"\"\"\n\n    # For each bar: Place a label\n    for rect in ax.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va, fontsize=12)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels1(ax)","fa481854":"g=sns.catplot(x='Month of Travel',y='count',data=dpm,kind='bar',hue='Company',palette=sns.color_palette(['#FFD801', '#FF1493']), height=8.27, aspect=11.7\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='medium')\nplt.title('Monthly average demand of each Compny',fontsize=30)\nplt.ylabel('Demand [No. of Trips]',fontsize=25)\nplt.xlabel('Month',fontsize=25)\nplt.xticks(rotation=0,fontsize=20)\nplt.yticks(rotation=0,fontsize=20)\nplt.show()","2ae4696f":"a1=master_df[(master_df['Age']>18) & (master_df['Age']<25)]\na2=master_df[(master_df['Age']>26) & (master_df['Age']<40)]\na3=master_df[(master_df['Age']>41) & (master_df['Age']<60)]\na4=master_df[(master_df['Age']>60)]\n\na11= a1.groupby(['Company','Year of Travel'])['Customer ID'].agg(['count'])\na11.columns=['Total Customers']\na11=a11.reset_index(level='Year of Travel', col_level=1)\na11=a11.reset_index(level='Company', col_level=1)\na11['Class']= '18-25'\n\na22= a2.groupby(['Company','Year of Travel'])['Customer ID'].agg(['count'])\na22.columns=['Total Customers']\na22=a22.reset_index(level='Year of Travel', col_level=1)\na22=a22.reset_index(level='Company', col_level=1)\na22['Class']= '26-40'\n\na33= a3.groupby(['Company','Year of Travel'])['Customer ID'].agg(['count'])\na33.columns=['Total Customers']\na33=a33.reset_index(level='Year of Travel', col_level=1)\na33=a33.reset_index(level='Company', col_level=1)\na33['Class']= '40-60'\n\na44= a4.groupby(['Company','Year of Travel'])['Customer ID'].agg(['count'])\na44.columns=['Total Customers']\na44=a44.reset_index(level='Year of Travel', col_level=1)\na44=a44.reset_index(level='Company', col_level=1)\na44['Class']= '60+'\n\nagegroup=a11\nagegroup=pd.concat([agegroup,a22,a33,a44])\nagegroup['Total Customers']=agegroup['Total Customers'].astype(int)\nagegroup.head(5)","287fece5":"g=sns.catplot(x='Year of Travel',y='Total Customers',data=agegroup,col= 'Company',kind='bar',hue='Class',palette = 'rocket', height=9, aspect=1.2)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='medium')\nax = g.facet_axis(0,1)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='medium')\nplt.show()","0e2323e3":"years=[2016,2017,2018]\nc10r_y=[]\nc10r_p=[]\nfor year in years:\n  yellow_year=master_df[(master_df['Year of Travel']==year) & (master_df['Company']=='Yellow Cab')].groupby('Customer ID')['Company'].agg(['count'])\n  yellow_year.reset_index(inplace=True)\n  yellow_year[yellow_year['count']>=10]\n  c10r_y.append(len(yellow_year))\n  pink_year=master_df[(master_df['Year of Travel']==year) & (master_df['Company']=='Pink Cab')].groupby('Customer ID')['Company'].agg(['count'])\n  pink_year.reset_index(inplace=True)\n  pink_year[pink_year['count']>=10]\n  c10r_p.append(len(pink_year))\n\nplt.figure(figsize=(12,9))\nX = np.arange(3)\nplt.bar(X+0.00,c10r_y,color='#FFD801', label='Yellow Cab', width= 0.25,edgecolor='black')\nplt.bar(X+0.25,c10r_p,color='#FF1493',label='Pink Cab',width = 0.25,edgecolor='black')\nplt.xticks(X+0.15,['2016','2017','2018'])\nleg=plt.gca().legend(loc='center left',bbox_to_anchor = (1,0.5))\nplt.setp(leg.get_texts(), color='black')\nplt.title('Medium loyalty Customers',fontsize=30)\nplt.ylabel('No. of Clients')\nplt.xlabel('Year')\nplt.show()","230ee1ea":"months=[1,2,3,4,5,6,7,8,9,10,11,12]\nc10r_ym=[]\nc10r_pm=[]\nfor month in months:\n  yellow_year=master_df[(master_df['Month of Travel']==month) & (master_df['Company']=='Yellow Cab')].groupby('Customer ID')['Company'].agg(['count'])\n  yellow_year.reset_index(inplace=True)\n  yellow_year[yellow_year['count']>=10]\n  c10r_ym.append(len(yellow_year))\n  pink_year=master_df[(master_df['Month of Travel']==month) & (master_df['Company']=='Pink Cab')].groupby('Customer ID')['Company'].agg(['count'])\n  pink_year.reset_index(inplace=True)\n  pink_year[pink_year['count']>=10]\n  c10r_pm.append(len(pink_year))\n\nplt.figure(figsize=(12,9))\nX = np.arange(12)\nplt.bar(X+0.00,c10r_ym,color='#FFD801', label='Yellow Cab', width= 0.25,edgecolor='black')\nplt.bar(X+0.25,c10r_pm,color='#FF1493',label='Pink Cab',width = 0.25,edgecolor='black')\nplt.xticks(X+0.15,['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'])\nleg=plt.gca().legend(loc='center left',bbox_to_anchor = (1,0.5))\nplt.setp(leg.get_texts(), color='black')\nplt.title(' High loyalty Customers',fontsize=20)\nplt.ylabel('No. of Clients')\nplt.xlabel('Year')\nplt.show()","ce410845":"c10r_ym=pd.DataFrame(c10r_ym)\nc10r_pm=pd.DataFrame(c10r_pm)","e1a24da0":"c10r_pm.columns=c10r_pm.columns=['High Loyalty Clients']\nc10r_ym.columns=c10r_ym.columns=['High Loyalty Clients']","ba14ab0a":"c10r_ym['x_index'] = c10r_ym.index\nc10r_ym.head()","5e9e5bb6":"c10r_pm['x_index'] = c10r_pm.index\nc10r_pm.head()","1fc58853":"g=sns.catplot(x='x_index',y='High Loyalty Clients',data=c10r_ym,kind='bar',palette = 'rocket', height=8.27, aspect=11.7\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.115, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='small')\nplt.title(\"Yellow Cab - High Loyalty Clients\",fontsize=20)\nplt.ylabel('No. of Clients')\nplt.xlabel('Month')\nplt.xticks(X+0.15,['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'])\nplt.show()","98712bc2":"g=sns.catplot(x= 'x_index',y='High Loyalty Clients',data=c10r_pm,kind='bar',palette = 'rocket', height=8.27, aspect=11.7\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.115, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='small')\nplt.title(\"Pink Cab - High Loyalty Clients\",fontsize=20)\nplt.ylabel('No. of Clients')\nplt.xlabel('Month')\nplt.xticks(X+0.15,['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'])\nplt.show()","217d3fde":"u=master_df.groupby(['Year of Travel'])['Transaction ID'].agg(['count'])\nu.columns = ['RidesPerYear']\nu=u.reset_index(level='Year of Travel', col_level=1)\npayment=master_df.groupby(['Year of Travel','Payment_Mode'])['Transaction ID'].agg(['count'])\npayment=payment.reset_index(level='Year of Travel', col_level=1)\npayment=payment.reset_index(level='Payment_Mode', col_level=1)\npayment=payment.merge(u,on= 'Year of Travel')\npayment.head()\npayment1=payment\npayment1['per']=payment1['count']\/payment1['RidesPerYear']\npayment.head()","8ec308d7":"g=sns.catplot(x='Year of Travel',y='per',data=payment1,kind='bar',hue='Payment_Mode',palette=\"rocket\", height=8.27, aspect=11.7\/8.27)\nplt.title('Percentage of Payment Mode Yearly',fontsize=20)\nplt.xlabel('Year')\nplt.ylabel('Percentage')\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.115, \n            p.get_height() * 1.02, \n            \"{:.2f}%\".format(p.get_height()*100), \n            color='black', rotation='horizontal', size='large')\nplt.show()","8adcc229":"payment2=master_df.groupby(['Year of Travel','Payment_Mode','City'])['Transaction ID'].agg(['count'])\npayment2=payment2.reset_index(level='Year of Travel', col_level=1)\npayment2=payment2.reset_index(level='Payment_Mode', col_level=1)\npayment2=payment2.reset_index(level='City', col_level=1)\npayment2 = payment2.sort_values(by='count', ascending= False )\npayment2.head()","ff9c0213":"fig, ax = plt.subplots(figsize = (15, 10))\n\nsns.barplot(x='City',y='count',data=payment2,hue='Payment_Mode',palette=\"rocket\")\nplt.title('No. of Payments citywise',fontsize=20)\nplt.xlabel('City')\nplt.ylabel('No. of Transactions')\nplt.xticks(rotation=70)\nplt.show()","cc2733d6":"a1=master_df[(master_df['Age']>18) & (master_df['Age']<25)]\na2=master_df[(master_df['Age']>26) & (master_df['Age']<40)]\na3=master_df[(master_df['Age']>41) & (master_df['Age']<60)]\na4=master_df[(master_df['Age']>60)]\n\na11= a1.groupby(['Payment_Mode'])['Customer ID'].agg(['count'])\na11.columns=['cash\/card']\na11=a11.reset_index(level='Payment_Mode', col_level=1)\na11['Class']= '18-25'\n\n\na22= a2.groupby(['Payment_Mode'])['Customer ID'].agg(['count'])\na22.columns=['cash\/card']\na22=a22.reset_index(level='Payment_Mode', col_level=1)\na22['Class']= '26-40'\n\n\na33= a3.groupby(['Payment_Mode'])['Customer ID'].agg(['count'])\na33.columns=['cash\/card']\na33=a33.reset_index(level='Payment_Mode', col_level=1)\na33['Class']= '40-60'\n\n\na44= a4.groupby(['Payment_Mode'])['Customer ID'].agg(['count'])\na44.columns=['cash\/card']\na44=a44.reset_index(level='Payment_Mode', col_level=1)\na44['Class']= '60+'\n\npayage=a11\npayage=pd.concat([payage,a22,a33,a44])\npayage.head()\n\nx=payage.groupby('Class').sum()\nx.columns=['Total']\nx=x.reset_index(level='Class', col_level=1)\nx.head()\n\npayage=payage.merge(x,on='Class')\npayage['percentage'] = round(((payage['cash\/card']\/payage['Total'])*100),2)\npayage.head()","700f9bfc":"plt.figure(figsize=(15,9))\ng=sns.catplot(x='Payment_Mode',y='percentage',data=payage,kind='bar',hue='Class', palette='rocket', height=8.27, aspect=11.7\/8.27)\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.035, \n            p.get_height() * 1.02, \n            \"{:.2f}%\".format(p.get_height()), \n            color='black', rotation='horizontal', size='small')\nplt.title('Percentage of Payment Mode Agewise',fontsize=20)\nplt.xlabel('Year')\nplt.ylabel('Percentage')\nplt.show()","8fbb98fb":"#### CORRELATIONS","7fb02afd":"To analyze the Loyalty rates, Let's define 2 classes:\n\n**1. Medium loyalty Customers-->**   Customers who took more than 10 rides yearly.<br>\n**2. High loyalty Customers-->**     Customers who took more than 10 rides monthly","2f0d7c50":"<a id=\"4\"><\/a> <br>\n## 4. Exploratory Data Analysis","cae0f842":"#### Citywise profitable rides (percentage) ","a1cdb582":"#### Missing Values","511f939e":"#### Payment Mode","ce5fc6fb":"<a id=\"3\"><\/a> <br>\n## 3. Data Understanding and Preparation","a49764d9":"Profit per Km decreases over time in both companies.","978156d6":"#### Pink Cab","a22875fe":"#### YELLOW CAB VS PINK CAB","53a5a06b":"#### Yearly POR per Company","e6a3a2f6":"#### Annual profits over KM","8962af42":"We can conclude that the profit per ride of Yellow cab company is higher than Pink cab company over three years.","d3b8baa7":"<a id=\"6\"><\/a> <br>\n## 6. Demand Analysis","65816939":"#### OUTLIERS","d3a49127":"### Payment Mode Distribution","c6dc6ea9":"In this analysis New York city has been removed from both cab companies to get a better sight of the profits over the other cities.\n\nAnd we can conclude that Yellow Cab has greater market share in every City.\n","6095a48d":"#### CUSTOMER ID DATASET","7c5fbb5a":"Every data type is correct","f6dbb19d":"The highest demand is in December.","f7c72b72":"YellowCab Company is doing better in both classes of Loyalty Rates.","43a8dd7c":"### Average profits per City","64913a99":"#### Holiday Data","46a578f8":"#### Payment Mode Distribution Yearly","2b470145":"#### Distance Travelled (Km)","5d794d97":"#### Time Series","b62863d2":"Each year both companies have more customers in the age class of 20-40 years.","8f64eade":"#### Cloning the dataset from Github","a9a5ecb8":"Minimal deviations of the payment method are observed in each city.","eb3e3a18":"#### Monthly Average Demand","8447e6c0":"Every data type is correct","fcbdb5b5":"#### Yellow Cab","d37f5b2b":"According to the graphs, there are outliers in the `Price Charged` feature. But since we do not have enough information on the components that made the `Price Charged`, it is not appropriate to treat it as an outlier.","46bbe42c":"#### Loyalty Rates","b362b65d":"<a id=\"7\"><\/a> <br>\n## 7. Clients Analysis","4d68e611":"Creating separate datasets for each company.","9c9ddfd3":"# G2M insight for Cab Investment firm ","5226aa54":"### Average profits over Rides","db7b25df":"#### Description of the Dataset","ed323c5a":"#### MASTER DATASET","a1027432":"#### TRANSACTION ID DATASET","5e6eb591":"<a id=\"2\"><\/a> <br>\n## 2. Hypothesis\n \n1. How does the profit change over time?\n2. How does the percentage of profitable trips change by the city?\n3. How does average profit change by holidays?\n4. How does the demand of the cab industry change over time?\n5. How the demand varies according to age?\n6. Loyalty of customers\n7. Fluctuations of payment methods","6050b259":"<a id=\"8\"><\/a> <br>\n## 8. Conclusion","685a4237":"Profit per ride decreases over time in both companies. ","96171698":"#### Monthly profit over KM","f4411fdb":"Yearly demand of Yellow cab company is maintained nearly 4 times greater than the demand of Pink cab company. ","abd6d7ff":"<a id=\"1\"><\/a> <br>\n## 1. Business problem\n\nThe main purpose of this notebook is to understand the market before investing in the Cab industry according to Go-to-Market(G2M) strategy. Go-to-market strategies tend to focus on the short-term, but effective ones will also consider how any immediate success can be sustained over a longer period. ","661fc3f0":"#### Loading all the datasets","35c8c70d":"#### Yearly Demand","7ede7bfb":"#### FEATURES ANALYSIS","1958b84e":"### Demand","112cac3c":"### Demand Agewise","478d607f":"#### Annual Profits","684b4a84":"## Reference\n\nhttps:\/\/www.kaggle.com\/ignaciosolorzano\/data-analysis-for-cab-investment\/notebook<br>","38c6d5fb":"There are not missing values","ac4f6b79":"Profit per Ride is an indicator that measures how efficient the company is, in terms of operational costs.\n\n`Profit per Ride = (Total Profits over a certain Period of Time) \/ ( Number of Rides over that period of Time)`","49c9bc38":"#### Importing nescessary packages","c27909a2":"**1. How does the profit change over time?**<br>\n\n- Accoding to the analysis, Yellow Cab Company's earnings are more stable than Pink Cab Company's earnings.\n- Profit per ride of Yellow cab company is higher than Pink cab company over three years.\n- Profit per Km decreases over time in both companies.\n- Profit per Km in Yellow cab company is higher than Pink cab company for each and every month.\n\n**2. How does the percentage of profitable trips change by the city?**<br>\n\n- Profitability percentage of rides change by cities.\n- Yellow Cab has greater market share in every City.\n\n**3. How does average profit change by holidays?**<br>\n\n- In Yellow cabs, the average profit per holiday is less than the average profit per normal day. \n- Pink cab company have gained a bit of higher profit on holidays than normal days.\n\n**4. How does the demand of the cab industry change over time?**<br>\n\n- Yearly demand of Yellow cab company is about 4 times greater than yearly demand of Pink cab company. \n- There is a seasonality of demand changing throughout the year in both cab companies.\n\n**5. How the demand varies according to age?**<br>\n\n- Each year both companies have more customers in the age class of 20-40 years.\n\n**6.Loyalty of customers<br>**\n\n- YellowCab Company is doing better in both classes of Loyalty Rates.\n\n**7. Fluctuations of payment methods**<br>\n\n- Minimal deviations in the payment method are observed over time.\n- Minimal deviations of the payment method are observed in each city.\n- Minimal deviations of the payment method are observed with respect to the age of the clients.\n\n\n### According to the overall analysis Yellow cab company is better than the Pink cab company for investing.","a3dfa290":"#### CITY DATASET","0c25b136":"#### Payment Mode Distribution citywise","fbc0acd2":"#### Check Duplicates","7b6fc7f5":"Creating a new dataset same as master dataframe and setting 'Date of Travel' as index to work properly Time Series Visualizations.","5955e5be":"#### Payment Mode Distribution agewise","cc6bb5f1":"Function to target the bars in terms of just numbers (not in $ as in Profit section)","0caee85a":"There is a seasonality of demand changing throughout the year.","aa3e9a73":"Here is the function to add labels on top of each bar in a bar chart.","772a2106":"#### PROFIT SUMMARY","e45a5e02":"#### Gender","430d07b5":"#### Cost per Km","6c6c8068":"#### Monthly Profits","a3fbf6b1":"<a id=\"5\"><\/a> <br>\n## 5. Profit Analysis","a62232b7":"Now, every feature is in an appropiate data type.","68ce4f00":"#### Monthly profits over Rides","d691dfd3":"### Average profits over KM","38947a8d":"#### HOLIDAY DATASET","c986a639":"The time period of cab_data is from 31\/01\/2016 to 31\/12\/2018 and the Time period of holiday_data is from 2004 - 2021. Therefore all the necessary holiday data is existing in the holiday_data dataset.","0d095c76":"Now, we can answer the second hypothesis. For that, let's assume that if the profitability percentage of rides per city is higher than 80%, it will perform well.<br>\nThen we can say that:<br>\n<br>\nprofitability percentage of rides change by cities and Yellow Cab has a high performance acording to the analysis by mantaining a high level of profitable rides in every City.\n\n\n","d97cd1d6":"Minimal deviations of the payment method are observed with respect to the age of the clients.","1d5b31e9":"#### CAB DATASET","1d3e36ef":"#### Cost of trip","31e9524c":"In Yellow cabs, the average profit per holiday is less than the average profit per normal day. But when considering the average profit per day in pink cab company, they have gained a bit of higher profit on holidays than normal days. ","9f9b79ad":"'Profit per Km' in Yellow cab company is higher than Pink cab company for each and every month.","a76d51c3":"#### Charged price","8bb45d9a":"Minimal deviations in the payment method are observed over time.","dcc28072":"We can see that over the months, Yellow Cab Company's earnings are more stable with fluctuations of 23.08% while PinkCab Company's earnings vary with fluctuations of 61.22%.","7275474b":"## Table of Content\n1. [Business problem](#1)<br>\n2. [Hypothesis](#2)\n3. [Data Understanding and Preparation](#3)\n4. [Exploratory Data Analysis](#4)\n5. [Profit Analysis](#5)\n6. [Demand Analysis](#6)\n7. [Client Analysis](#7)\n8. [Conclusion](#8)","144d44cc":"#### Monthly Demand","307ecb6b":"#### Check Data Types","d4a346c2":"#### Profits in holiday","049da14c":"#### Age distribution"}}