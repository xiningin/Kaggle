{"cell_type":{"e0b62bbc":"code","9ae08c91":"code","2c319acd":"code","fa783b41":"code","e095faf2":"code","c873f0b4":"markdown","e832a330":"markdown"},"source":{"e0b62bbc":"\nimport pandas as pd\nimport numpy as np\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Flatten, Dropout\nfrom tensorflow.keras.layers import LeakyReLU, PReLU, ELU","9ae08c91":"\n\nroot_dir = Path('\/kaggle\/')\ndir_ = root_dir \/ 'input\/competitive-data-science-predict-future-sales'\nlist(dir_.glob('*'))\n#read files\nsales_train = pd.read_csv(dir_ \/ 'sales_train.csv')\nitems_dataFrame = pd.read_csv(dir_ \/ 'items.csv')\nitem_categories_dataFrame = pd.read_csv(dir_ \/ 'item_categories.csv')\nshop_dataFrame = pd.read_csv(dir_ \/ 'shops.csv')","2c319acd":"##################___Preprocessing Data\n\n#joining all the available csv files\ntraining_dataFRame = sales_train.join(items_dataFrame, on='item_id', how='outer', lsuffix='left_side', rsuffix='right_side')[['date', 'date_block_num', 'shop_id', 'item_id', 'item_price', 'item_cnt_day', 'item_name', 'item_category_id']]\ntraining_dataFRame = training_dataFRame.join(item_categories_dataFrame, on='item_category_id', how='outer', lsuffix='left_side', rsuffix='right_side')[['date', 'date_block_num', 'shop_id', 'item_id', 'item_price', 'item_cnt_day', 'item_name', 'item_category_id', 'item_category_name']]\ntraining_dataFRame = training_dataFRame.join(shop_dataFrame, on='shop_id', how='outer', lsuffix='left_side', rsuffix='right_side')[['date', 'date_block_num', 'shop_id', 'item_id', 'item_price', 'item_cnt_day', 'item_name', 'item_category_id', 'item_category_name', 'shop_name']]\ntraining_dataFRame.reset_index(drop=True, inplace=True)\n\n\n#Cleaning the data\ntraining_dataFRame.dropna(inplace=True)\ntraining_dataFRame.drop_duplicates(inplace=True)\n\n","fa783b41":"##################___ features are engeenered as modifying their fields and columns. \ntraining_dataFRame[['day', 'month', 'year']] = training_dataFRame.date.str.split('.', expand=True)#date columns are split into day\/month\/year.\ntraining_dataFRame.day = training_dataFRame.day.apply(lambda x: int(x))\ntraining_dataFRame.month = training_dataFRame.month.apply(lambda x: int(x))\ntraining_dataFRame.year = training_dataFRame.year.apply(lambda x: int(x))\n#statistical description o the columns\n","e095faf2":"\ntraining_dataFRame.describe()\n#groupby the dates\nyear_group_count = training_dataFRame.groupby('year').count().item_id.reset_index()\nyear_group_count.columns = ['year', 'total_bill']\nmonth_group_count = training_dataFRame.groupby('month').count().item_id.reset_index()\nmonth_group_count.columns = ['month', 'total_bill']\nday_group_and_count = training_dataFRame.groupby('day').count().item_id.reset_index()\nday_group_and_count.columns = ['day', 'total_bill']\n#Visualize the bills according to data\nfig, axes = plt.subplots(1, 3, figsize=(20, 4))\nsb.barplot(x='year', y='total_bill', data=year_group_count, ax=axes[0])\nsb.barplot(x='month', y='total_bill', data=month_group_count, ax=axes[1])\nsb.barplot(x='day', y='total_bill', data=day_group_and_count, ax=axes[2])\nplt.style.use('seaborn')\nplt.xkcd()\n\n\n\n#groupby the date block num\ndate_block_count = training_dataFRame.groupby('date_block_num').count().item_id.reset_index()\n#Visualize the blocked date and total bill\ndate_block_count.columns = ['date_block', 'total_bill']\nfig = plt.figure(figsize=(12, 4))\nax = fig.add_axes([0, 0, 1, 1])\nsb.barplot(x='date_block', y='total_bill', data=date_block_count, ax=ax)\nplt.gcf().autofmt_xdate()\nplt.legend()\nplt.xlabel('Amount of Date block')\nplt.ylabel(\"Total amount of Bill\")\nplt.title(\"Total Bill\")\n\nplt.style.use('seaborn')\nplt.xkcd()\n","c873f0b4":"#This EDA is made by exploring my Kagglemates works. In short it is a combination of my Kagglemates works.","e832a330":"# ****Exploratory data analysis | M5 Forecasting - Accuracy "}}