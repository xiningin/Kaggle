{"cell_type":{"96065540":"code","909eb6b1":"code","905e447d":"code","d4545dc7":"code","eff4f74e":"code","b39c327d":"code","1eee78e6":"code","0e683093":"code","34bb787a":"code","366e2d05":"code","e582629b":"code","a25443c2":"code","c9eb8304":"code","fe40fe87":"code","36225319":"code","b5e0b2d4":"code","f23b2a4d":"code","e90d408a":"code","ae22d7c8":"code","dfd6e3ec":"code","9726068c":"code","2e04119e":"code","b32f5846":"code","caa8d03f":"code","ed9225cc":"code","150b0eff":"code","84dd83e8":"code","43c3d090":"code","7102a53c":"code","496477a6":"code","251429e9":"code","ad3bacb6":"code","b5e824de":"code","0dd0499d":"code","0095d789":"code","e3e1b217":"code","2f468cfa":"code","fd5c31cf":"code","39114e68":"code","187274df":"code","c26b7ef7":"code","fa33afce":"code","d29112a6":"code","fde5204b":"code","e9a62163":"markdown","c92a8efa":"markdown","d5e47e9b":"markdown","d936f766":"markdown","50af50e0":"markdown","b41fd5b5":"markdown","a733558f":"markdown","6ee8fe4d":"markdown","ae20e383":"markdown","f381440f":"markdown","c911c49d":"markdown","190db103":"markdown","e6659f5d":"markdown","ec717087":"markdown","30a2e3a2":"markdown","639982ac":"markdown","0abd53ac":"markdown","205f0ba0":"markdown","a798b741":"markdown","b1013c66":"markdown","51a60291":"markdown"},"source":{"96065540":"print('hello world!')","909eb6b1":"your_variable = 1+5\nprint(your_variable)","905e447d":"# another way of doing first cell\nyour_string = \"hello world\"\nprint(your_string)","d4545dc7":"import pandas as pd","eff4f74e":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv') # Note, not needed until the very end","b39c327d":"train.head() # prints the first five rows","1eee78e6":"train.info()","0e683093":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","34bb787a":"# Histogram of survival\nsns.histplot(train, x = 'Survived')","366e2d05":"# Distribution plot of age\nsns.displot(data=train, x='Age', hue='Survived', multiple=\"stack\")","e582629b":"X = train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Embarked'],axis=1).dropna() \n# ^^ we're dropping these values because they don't provide much useful info without lots of encoding\n\ny = X['Survived']\nX = X.drop(['Survived'],axis=1) # We don't want survival to be included in X","a25443c2":"X.head()","c9eb8304":"y.head()","fe40fe87":"X['Sex'].replace({'male': 0, 'female': 1}, inplace = True)","36225319":"from sklearn.model_selection import train_test_split","b5e0b2d4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","f23b2a4d":"X_train.info()","e90d408a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","ae22d7c8":"logreg = LogisticRegression()","dfd6e3ec":"logreg.fit(X_train, y_train)","9726068c":"predictions = logreg.predict(X_test)","2e04119e":"predictions","b32f5846":"print(metrics.confusion_matrix(y_test, predictions))\nprint(metrics.classification_report(y_test, predictions))","caa8d03f":"test.head()","ed9225cc":"test_prediction_set = test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Embarked'], axis = 1)\n","150b0eff":"test_prediction_set['Sex'].replace({'male': 0, 'female': 1}, inplace = True)","84dd83e8":"test_prediction_set.head()","43c3d090":"test_prediction_set.info()","7102a53c":"test_prediction_set['Age'].fillna(test_prediction_set.groupby(['Pclass'])['Age'].transform('median'),inplace=True)\ntest_prediction_set['Fare'].fillna(test_prediction_set.groupby(['Pclass'])['Fare'].transform('median'),inplace=True)\n","496477a6":"test_prediction_set.info()","251429e9":"predict_test = logreg.predict(test_prediction_set)\ntest['Survived'] = pd.Series(predict_test)","ad3bacb6":"submission_df = test.drop(['Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis=1)","b5e824de":"submission_df","0dd0499d":"submission_df.to_csv('submissions.csv',index=False)","0095d789":"from sklearn.tree import DecisionTreeClassifier","e3e1b217":"dt = DecisionTreeClassifier()","2f468cfa":"dt.fit(X_train, y_train)","fd5c31cf":"dt_predictions = dt.predict(X_test)","39114e68":"dt_predictions","187274df":"print(metrics.confusion_matrix(y_test, dt_predictions))\nprint(metrics.classification_report(y_test, dt_predictions))","c26b7ef7":"from sklearn.ensemble import RandomForestClassifier","fa33afce":"rfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\nrfc_predictions = rfc.predict(X_test)","d29112a6":"rfc_predictions","fde5204b":"print(metrics.confusion_matrix(y_test, dt_predictions))\nprint(metrics.classification_report(y_test, dt_predictions))","e9a62163":"Now, let's move onto a more **conceptual perspective** of machine learning. A machine learning model uses data by modeling the relationship between a set of variables and a target value. (repeat that line twice). In our case, our target value is whether someone survived or not. And we'll be predicting this target value using a set of variables like someone's age, the class they were in, etc. We call the target variable \"y\" often, and we call the set of variables used to predict someone's survival \"X\" often.","c92a8efa":"Note: we can look at different data types. (object data types are strings in this case).\n\nHowever, there is some missing data, so we'll need to deal with that later on.","d5e47e9b":"# Data Preprocessing","d936f766":"Any questions?","50af50e0":"# Let's do some exploratory data analysis","b41fd5b5":"^^ Each row represents a person in the Titanic. And each column represents a value that corresponds to each person.","a733558f":"Now, we'll be covering a library called pandas. If you don't know what a library is, you can think of it as a toolkit that others develop to make our lives easier. Instead of having to code everything from scratch, we can simply reference functions already coded in a library.\n\nPandas is a library that lets us work with DataFrames, which are pretty much tables that store data. Think of an excel sheet where the columns represent different categories and the rows represent different instances. You'll see what I mean in a second.","6ee8fe4d":"We need to make the same preprocessing to the submission set in order for everything to work","ae20e383":"# Walk through Python basics","f381440f":"We need to do some basic imputation here","c911c49d":"Here's what the data actually looks like","190db103":"# Submitting","e6659f5d":"To assess our model, we'll need to split our X and y data into training and test\/validation sets (not to be confused with the given test set - which doesn't actually include y values for the sake of competition)","ec717087":"Remember the initial test dataframe? It has everything except for a \"Survived\" class","30a2e3a2":"Python also follows basic logic. For instance, you can add 1 and 5 and have it be represented by a variable. In this case, we are working with integers: 1 and 5. We can also work with floating point variables, which essentially are numbers with decimal points.","639982ac":"However, the model we're using cannot deal with strings easily, so we'll need to convert them into numbers. This is called encoding.","0abd53ac":"Try changing the variables of this cell to see if you can find important variables!","205f0ba0":"If you don't know already, we'll be working with the Titanic Kaggle Competition. (briefly explain the goals of the competition).\n\nNow, let's load the data using pandas","a798b741":"**It's time to train our model**","b1013c66":"The third important variable type for this lecture is called a string, which is often includes quotation marks when being entered. A string represents a set of characters, often forming words. Note: hello world is a string. This is important to know for future parts of the lecture.","51a60291":"# Decision Trees"}}