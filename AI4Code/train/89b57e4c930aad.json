{"cell_type":{"f2ba841d":"code","5f41d954":"code","38a5d61c":"code","1fd7842a":"code","d27ff9ec":"code","a2c9062d":"code","477fcdce":"markdown","fd730ff4":"markdown"},"source":{"f2ba841d":"!pip install segmentation-models-pytorch","5f41d954":"from pathlib import Path\nimport json\nimport numpy as np\nimport pandas as pd\n\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\nimport segmentation_models_pytorch as smp\n\nimport cv2\nimport os\nfrom matplotlib import pyplot as plt\n\npath_images = '\/kaggle\/input\/coloredgrain\/imgs\/imgs\/'\npath_model  = '\/kaggle\/input\/weight\/best_model.pth'\n\nif torch.cuda.is_available():\n    DEVICE = 'cuda'\nelse:\n    DEVICE = 'cpu'\n\nmodel = torch.load(path_model, map_location=torch.device('cpu'))\nmodel = model.to(DEVICE)\nprint(DEVICE)","38a5d61c":"class SegDataset(Dataset):\n    def __init__(self, img_names, img_folder, augs=None):\n        self.img_names  = img_names\n        self.img_folder = img_folder\n        self.augs       = augs\n    \n    def __getitem__(self, i):\n        path = self.img_folder + self.img_names[i]\n        print(path)\n        img  = cv2.imread(path)\n        img  = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        if self.augs:\n            img = self.augs(image=img, mask=img).values()\n        return path, img\n    \n    def __len__(self):\n        return len(self.img_names)","1fd7842a":"resize = 864, 1296 # origin size \/\/ 4\ncrop_size = 640, 640\n\ntest_augs = A.Compose([\n    A.Resize(*resize),\n    A.CenterCrop(*np.array(resize)\/\/32*32), # input shape for net must be divisible by 32\n    A.Normalize(),\n    ToTensorV2(transpose_mask=True),\n])\n\nimg_names = os.listdir(path_images)\nbatch_size = 4\n\n\ntest_dataset = SegDataset(\n    img_names,\n    path_images,\n    augs=test_augs\n)\n\ntest_loader = DataLoader(test_dataset, batch_size=batch_size, num_workers=2, shuffle=False)","d27ff9ec":"n = len(test_dataset)\nfor i in range(n):\n    print('{} \/ {}'.format(i,n))\n    name, image = test_dataset[i]\n    x_tensor = list(image)[0].unsqueeze(0).to(DEVICE)\n    pr_mask = model.predict(x_tensor)\n    pr_mask = (pr_mask.squeeze().cpu().numpy().round())\n    cv2.imwrite('\/kaggle\/working\/' + name.split('\/')[-1], pr_mask*255)\n","a2c9062d":"print(len(os.listdir('\/kaggle\/input\/coloredgrain\/imgs\/imgs')))\nprint(len(os.listdir('\/kaggle\/working')))","477fcdce":"### Testing model","fd730ff4":"### Make Datasets and DataLoaders"}}