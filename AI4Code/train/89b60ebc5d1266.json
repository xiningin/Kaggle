{"cell_type":{"a2765ef1":"code","887a178d":"code","044bdc1c":"code","55dfaac3":"code","77e7d0ba":"code","3fb1ea1f":"code","f6a9e0b4":"code","b28f4797":"code","2cba29f0":"code","c7af229c":"code","f08fbd11":"code","c1370723":"code","1636d1d0":"code","41bc9238":"code","067ce979":"code","6d5f731f":"code","3d912394":"code","d96341b5":"code","9f9f9b10":"code","1ce98155":"code","0054f49c":"code","d1b40a17":"code","045f147c":"code","3f6e3278":"code","efcf9b2b":"code","6d1389fc":"code","248f1303":"code","c8a1754d":"code","bb5a51c0":"code","679bc7cd":"code","1304e4ca":"code","cb8ee4e4":"code","bb4d3d46":"markdown","c05a0696":"markdown","1b129ba1":"markdown","f801611f":"markdown","940e58cc":"markdown","3d6c865f":"markdown","8f2c01e3":"markdown","0349a808":"markdown","eb3a9d7a":"markdown","61364abe":"markdown","4bbf3696":"markdown","a1a5c048":"markdown","4727b398":"markdown","ee88c35c":"markdown","aabbeca1":"markdown","4d5400bc":"markdown","7795be42":"markdown","05203a86":"markdown","6791791d":"markdown","139f8765":"markdown","d7170030":"markdown","736fd6d9":"markdown","ac119c78":"markdown"},"source":{"a2765ef1":"#lets import the required packages\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pandas as pd\n\nimport tensorflow as tf\nfrom keras import Sequential, Input, Model\nfrom keras.utils import to_categorical\nfrom keras.losses import categorical_crossentropy\nfrom keras.layers import  Dense, Dropout, Flatten, Conv2D,MaxPooling2D\nfrom sklearn.metrics import confusion_matrix\nfrom keras.optimizers import Adam, RMSprop,Adadelta, Adagrad\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.advanced_activations import Softmax,LeakyReLU,activations\nfrom sklearn.model_selection import train_test_split\n","887a178d":"#loading the datasets\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","044bdc1c":"#seperate the label into a variable y_train, and drop the column from our training set\ny_train = train['label']\nx_train = train.drop(['label'], axis =1) \nx_test = test","55dfaac3":"#Lets inspect the shape of the dataset\nprint('Train X  Dimension :',x_train.shape)\nprint('Test Dimension :',x_test.shape)","77e7d0ba":"print(x_train.isnull().any().describe())","3fb1ea1f":"print(x_test.isnull().any().describe()) ","f6a9e0b4":"#Are the categories well represented ?\nsns.set(style=\"darkgrid\")\nsns.countplot(y_train)\nplt.xlabel(' Digits')\nplt.ylabel('Count')","b28f4797":"#Check for what categories the label contains\ncategories = y_train.unique()\nprint('Output Categories: ',categories)\nprint('Total number of  Categories: ',len(categories))","2cba29f0":"#categories","c7af229c":"#x_train = (x_train.iloc[:,1:].values).astype('float32') # all pixel values\n#y_train = y_train.values.astype('int32') # only labels i.e targets digits\n#x_test = x_test.values.astype('float32')","f08fbd11":"X_train = x_train\/255.0\nX_test = x_test\/255.0","c1370723":"x_train.shape","1636d1d0":"x_train = X_train.values.reshape(-1,28,28,1)\nx_test = X_test.values.reshape(-1,28,28,1)","41bc9238":"y_train_enc = to_categorical(y = y_train, num_classes= len(categories))\n# Display the change for category label using one-hot encoding\nprint('Original label:', y_train[25])\nprint('After conversion to one-hot:', y_train_enc[25])","067ce979":"for i in range(0, 9):\n    plt.subplot(330 + (i+1))\n    plt.imshow(x_train[i][:,:,0], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i]);","6d5f731f":"seed = 30\nnp.random.seed(seed)","3d912394":"#Spliting the Data\ntrain_x, validation_x, train_y,validation_y = train_test_split(x_train,y_train_enc, test_size = 0.15, random_state = seed)","d96341b5":"import keras\nfrom keras import Sequential, Input, Model\nfrom keras.layers import  Dense, Dropout, Flatten, Conv2D,MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.advanced_activations import Softmax,LeakyReLU,activations\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam, RMSprop, SGD","9f9f9b10":"#some HyperParameters. Feel Free to tune them\nbatch_size = 128\nepochs = 20\nalpha = 0.3\nnum_classes = 10","1ce98155":"#Model Architecture in Summary is [[Conv2D -> ReLU -> MaxPool2D -> DroupOut]] *2 -> Dense -> ReLU -> Flatten -> Droupout -> Dense -> Out\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='linear', padding='same',input_shape = (28,28,1)))\nmodel.add(LeakyReLU(alpha=alpha))\nmodel.add(MaxPooling2D(pool_size=(2,2), padding='same'))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='linear', padding='same'))\nmodel.add(LeakyReLU(alpha=alpha))\nmodel.add(MaxPooling2D(pool_size=(2,2), padding='same'))\nmodel.add(Dropout(rate = 0.4))\n\nmodel.add(Dense(128, activation='relu'))\nmodel.add(LeakyReLU(alpha=alpha))\nmodel.add(Flatten())\n\nmodel.add(Dropout(rate=0.4))\nmodel.add(Dense(len(categories), activation='softmax'))\nmodel.compile(loss=categorical_crossentropy, optimizer=Adagrad(), metrics=['accuracy'])\nmodel.summary()","0054f49c":"#training the model\nmodel_train = model.fit(x = train_x, y = train_y, batch_size= batch_size, epochs = epochs, validation_data=(validation_x,validation_y))","d1b40a17":"#extracting the training history params. this will give some information if its overfitting\ntrain_acc = model_train.history['acc']\ntrain_loss = model_train.history['loss']\nval_acc = model_train.history['val_acc']\nval_loss = model_train.history['val_loss']\n\nep = range(len(train_acc))\nplt.plot(ep, train_acc,  label='Training accuracy', color ='g')\nplt.plot(ep, val_acc, 'b', label='Validation accuracy',color='r')\nplt.title('Training and validation accuracy')\nplt.legend()\n","045f147c":"#plt.figure()\nplt.plot(ep, train_loss, label='Training loss')\nplt.plot(ep, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","3f6e3278":"#Lets use our model to predict\ny_pred = model.predict(validation_x,verbose =1)\n\n#Convert predicted category to one hot vectors\ny_pred_class = np.argmax(y_pred, axis =1 )\n\nvalid_y_class = np.argmax(validation_y, axis = 1)\n#lets generate the confusion matrix so we can see how right the predictions are\nconfuse_matrix = confusion_matrix(valid_y_class,y_pred_class)\n\nplt.figure(figsize = (10,10))\nsns.heatmap(confuse_matrix, annot= True, fmt = 'd', cmap = 'YlGnBu', linewidths=.9,linecolor='black')\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","efcf9b2b":"from sklearn.metrics import classification_report\ntarget_names = [\"Class {}\".format(i) for i in range(num_classes)]\nprint(classification_report(valid_y_class, y_pred_class, target_names=target_names))","6d1389fc":"errors = (y_pred_class - valid_y_class != 0)\ny_pred_classes_errors = y_pred_class[errors]\ny_pred_errors = y_pred[errors]\ny_true_errors = valid_y_class[errors]\nx_val_errors = validation_x[errors]","248f1303":"def display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1","c8a1754d":"# Probabilities of the wrong predicted numbers\ny_pred_errors_prob = np.max(y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(y_pred_errors, y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, x_val_errors, y_pred_classes_errors, y_true_errors)","bb5a51c0":"#Lets use the model to predict the testset from Kaggle Competition\npredictions = model.predict(x_test)\npredictions = np.argmax(predictions, axis = 1)\npredictions = pd.Series(predictions, name =  'Label')","679bc7cd":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\"Label\": predictions})\nsubmissions.to_csv(\"DR.csv\", index=False, header=True)","1304e4ca":"#training the model\nmodel_train_full = model.fit(x = x_train, y = y_train_enc, batch_size= batch_size, epochs = epochs)","cb8ee4e4":"#Lets use the model to predict the testset from Kaggle Competition\npredictions_full = model.predict(x_test)\npredictions_full = np.argmax(predictions_full, axis = 1)\npredictions_full = pd.Series(predictions_full, name =  'Label')\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions_full)+1)),\"Label\": predictions})\nsubmissions.to_csv(\"Submission.csv\", index=False, header=True)","bb4d3d46":"#### if you find this note useful, some upvotes will be appreciated.. Feel free to criticize the notebook. \n\nPS: This is my first kernel here... ","c05a0696":"* ### Lets Visulaize some of the images","1b129ba1":"Our Model isnt doing bad afterall. Validation Accuracy is higher than the training accuracy alomst everytime while training. This means the model isnt oferfitting\n\n### Feel free to tune the hperparameters, modify the NN architecture or try different optimizers","f801611f":"# Training on Entire Competition Training set\nAfter you've evaluated the model, and confim its doing well, you can then proceed to use the competition's training set and predict on the test set.","940e58cc":"# Dataset Preparation\nBefore we design the  Convultion Network, its important to treat the dataset. Various steps are involved.\n* Normalization\n* Reshaping\n* Label Encoding\n* Splitting data into Training and Validation sets\n","3d6c865f":"# Model Architecture\nI'll use the [Keras](https:\/\/https:\/\/keras.io\/) Sequential API, where I'll have to create the CNN one step at a time by adding layers. \n\nThe first layer is the Convultional2D layer, which is a set of learnable filters, i want to model to learn,. The first Conv2D latyer will contain 32 filters, the next will conv layer will contain 64 filter,  wile the last Conv2D layer sill have 128 filters.\nInbetween the Conv2D layers there will be be an Activation Layer, \n\nI've chosen the Rectified Linear Unit, this activatinon function adds some non linearity to the model.\n\nAfter the activation layer is a MaxPooling2D Layer, this layer acts a as a downsampling filter, it selects the maximum pixel in a block defined by the filter parameter i specified. It looks at the two neigbhouring pixels and pick the maximum pixel. Other implementations of the of this feature include [Average Pooling](https:\/\/keras.io\/layers\/pooling\/#averagepooling2d)  and [GlobalPooling2D](https:\/\/keras.io\/layers\/pooling\/#globalmaxpooling2d). This MaxPooling reduces computational cost.\n\nAfter the Pooling Layer is the DropoutLayer, this is used for regularization. It randomly drops some nodes in the layer.\n\nThe Flatten layer converts the features into a single 1D vectors and finally the Dense Layer which is uses the softmax classifier","8f2c01e3":"# Spliting Data into Training and Validation Set\nI'll split the training data into two parts; a small percentage - 15% to contain the validation set, on which we would evaluate the model, while the data will be trainined on the remaining 85%","0349a808":"The Model is doing pretty well!","eb3a9d7a":"## Normalization\nHere we performa grayscale normalization on the data, technically we are centering the data around zero mean and unit variance, mean = 0, variance =1","61364abe":"## Label Encoding\nA one-hot vector is a vector which is 1 in an single dimension and zeros elsewhere, for instance 6 will be [0,0,0,0,0,0,1,0,0,0]\n","4bbf3696":"The displayerror() function is inspired by [Yassineghouzam](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6)","a1a5c048":"Yes, they are. The categories are well represented","4727b398":"** The erros are obvious afterall..**","ee88c35c":"# Prediction and Confusion Matrix\n\nLets Make predictions from the Model and visualize the confusion matrix","aabbeca1":"**Digits Recognizer Using keras**\n<hr\/>\nThis notebook is inspired by Andrew Ng's CNN course from the Deep Learning Specialization track on Coursera and a WiMLDS meetup\n\nI stumbled on the Kaggle Digit Recognizer [Competition](https:\/\/https:\/\/www.kaggle.com\/c\/digit-recognizer)  and decided to try it out using the MNIST dataset provided.\n\nits a digit recognizer trained on the MNIST digits dataset. I built it on the Keras API. I initially tested tried it on my CPU, but it took too long to train a single epoch. Got introduced to Google Colab Notebook... (Ended up being a life saver).\n\nIf you will run this notebook, on CPU, i'll recommend you set the epoch to 3. If you have a GPU, you are good to run the entire 20 epochs.\n\nPS: Created the notebook on Google's Colab, so you may see some google packages... You can try it out!","4d5400bc":"The validation loss is reducing after almost every epoch, this clearly indicates the model isnt doing bad","7795be42":"There are 42K  rows and 785 columns for training, while test has 28K rows and 748 columns.","05203a86":"## Why is our model classifying some values wrongly\n\nPerhaps some visual inspections  will tell us why\n\nClassification report will help us identifying the misclassified digits in more detail. We will be able to observe the model performance and  identify which classes it performed poorly","6791791d":"**Fair Enough no problems.. **Dont expect your datasets to be this neat all the  time. Time to treat the data before we can feed it into a CNN","139f8765":"**Check both datasets for null or missing values** ","d7170030":"Lets inspect the Model if its overfitting","736fd6d9":"# Dataset Inspection\nLets inspect the shape of the data","ac119c78":"## Reshaping\nHere we reshape the image into a 3 dimension matrices of  28px by 28px by 1"}}