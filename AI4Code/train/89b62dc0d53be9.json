{"cell_type":{"698f5567":"code","a7e3dad0":"code","441e701e":"code","2440aac3":"code","a914c2d4":"code","913b3d9a":"code","f5af6077":"code","43b58f39":"code","aa3c5df9":"code","bc4119e1":"code","81b186b9":"code","b8f712f8":"code","221ce142":"code","44f7ceaa":"code","02d1f256":"code","7da91f38":"code","6251448a":"code","4e6583a3":"code","e743a23f":"code","40bab17d":"code","bb8286df":"code","81276a70":"code","7aa7d62f":"code","78cb3954":"code","c0f000ba":"code","742eaa47":"code","fb1aedb4":"code","1c105211":"code","f48d7f56":"code","ab3646e1":"code","8ea7072a":"code","85f52833":"code","408bc1e5":"code","eddd330f":"code","02565b12":"markdown","271afb12":"markdown","7821ede5":"markdown","c0af7620":"markdown","9085edd9":"markdown","3ecce81e":"markdown","21d3c932":"markdown","2f37f3cd":"markdown","ee1d7784":"markdown","3c1a29ac":"markdown","953e5e02":"markdown","f103faf8":"markdown","f07a57f2":"markdown","67233cfb":"markdown","d1d40fa7":"markdown","89d21cc1":"markdown","1cd861e4":"markdown","0d01f640":"markdown","55e11671":"markdown","1d2e8e71":"markdown","0551f590":"markdown"},"source":{"698f5567":"import numpy as np \nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a7e3dad0":"# Function to decrease data usage in notebook (from Baek Kyun Shin)\ndef downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('{:.1f}% Compressed'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","441e701e":"#includes info on games\ndf_games = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/games.csv\")\ndf_games = downcast(df_games);\n\n#includes play-by-play info on specific plays\ndf_plays = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/plays.csv\")\ndf_plays = downcast(df_plays);\n\n#includes background info for players\ndf_players = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/players.csv\")\n\n#Reading tracking data (2020 only for this case)\ndf_tracking = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv\")\ndf_tracking = downcast(df_tracking);\n\n#includes scouting info on specific plays\ndf_PFFScouting = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv\")\n\n#loading data from Lee Sharpe's public GitHub repository. It includes info on field surface.\ndf_leeSharpeGames = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/nflverse\/nfldata\/master\/data\/games.csv\")","2440aac3":"df_tracking.head()","a914c2d4":"#convert to datetime\ndf_tracking['time'] = df_tracking['time'].astype('datetime64[ns]')\n\n#find the start of the game by actual time\ndf_gameStartTimes = pd.DataFrame(df_tracking.groupby(['gameId'])['time'].min())\ndf_gameStartTimes.reset_index(inplace=True)\ndf_gameStartTimes.rename(columns={'time':'gameStartTime'}, inplace=True)\n\n#add the game start time to the tracking data\ndf_tracking = pd.merge(left=df_tracking, right=df_gameStartTimes, how= 'left', on= ['gameId'])\n\n#change type to datetime\ndf_tracking['gameStartTime'] = df_tracking['gameStartTime'].astype('datetime64[ns]')\n\n#compute the elapsed actual time in minutes\ndf_tracking['elapsedTime'] = (df_tracking['time'] - df_tracking['gameStartTime']).astype('timedelta64[m]')\n\n#create a table for elapsed time for the start of each play in each game\ndf_playElapseTime = pd.DataFrame(df_tracking[['gameId','playId','elapsedTime']].groupby(['gameId','playId'], as_index=False)['elapsedTime'].min())\ndf_playStartTime = pd.DataFrame(df_tracking[['gameId','playId','time']].groupby(['gameId','playId'], as_index=False)['time'].min())\n\ndf_playElapseTime['time'] = df_playStartTime.time \n\nprint(df_playElapseTime.head())","913b3d9a":"#using df_tracking to merge to jersey numbers\n\n#selecting variables of interest & dropping duplicates - jersey # is constant throughout game\ndf_jerseyMap = df_tracking.drop_duplicates(subset = [\"gameId\", \"team\", \"jerseyNumber\", \"nflId\"])\n\n#joining to games\ndf_jerseyMap = pd.merge(df_jerseyMap, df_games, left_on=['gameId'], right_on =['gameId'])\n\n#getting name of team\nconditions = [\n    (df_jerseyMap['team'] == \"home\"),\n    (df_jerseyMap['team'] != \"home\"),\n]\n\nvalues = [df_jerseyMap['homeTeamAbbr'], df_jerseyMap['visitorTeamAbbr']]\n\n#adjusting jersey number so that it includes 0 when < 10\ndf_jerseyMap['team'] = np.select(conditions, values)\n\ndf_jerseyMap['jerseyNumber'] = df_jerseyMap['jerseyNumber'].astype(str)\n\ndf_jerseyMap.loc[df_jerseyMap['jerseyNumber'].map(len) < 4, 'jerseyNumber'] = \"0\"+df_jerseyMap.loc[df_jerseyMap['jerseyNumber'].map(len) < 4, 'jerseyNumber'].str[:2]\n\ndf_jerseyMap['jerseyNumber'] = df_jerseyMap['jerseyNumber'].str[:2]\n\n#getting team and jersey\ndf_jerseyMap['teamJersey'] = df_jerseyMap['team'] + ' ' + df_jerseyMap['jerseyNumber'].str[:2]\n\n#map to merge nflId to teamJersey\ndf_jerseyMap = df_jerseyMap[['gameId', 'nflId', 'teamJersey']]\n\ndf_jerseyMap = df_jerseyMap.sort_values(['gameId', 'nflId', 'teamJersey'])","f5af6077":"#dataframe will include gameId, playId and nflId for each special teams safety\ndf_PFF_specialTeamSafeties = df_PFFScouting.copy()\n\n#splitting into a column for each special teams safety\ndf_PFF_specialTeamSafeties[['teamJersey1', 'teamJersey2', 'teamJersey3', 'teamJersey4', 'teamJersey5', 'teamJersey6']] = df_PFF_specialTeamSafeties['specialTeamsSafeties'].str.split('; ',expand=True)\n\n#selecting jersey numbers for each team\ndf_PFF_specialTeamSafeties = df_PFF_specialTeamSafeties[['gameId', 'playId', 'teamJersey1', 'teamJersey2', 'teamJersey3', 'teamJersey4', 'teamJersey5', 'teamJersey6']]\n\n#gathering data\ndf_PFF_specialTeamSafeties = pd.melt(df_PFF_specialTeamSafeties, id_vars =['gameId', 'playId'], value_vars =['teamJersey1', 'teamJersey2', 'teamJersey3', 'teamJersey4', 'teamJersey5', 'teamJersey6'],\n               value_name = 'teamJersey')\n\n#dropping NA rows\ndf_PFF_specialTeamSafeties.dropna()\n\n#joining to jersey map\ndf_PFF_specialTeamSafeties = pd.merge(df_PFF_specialTeamSafeties, df_jerseyMap, on = ['gameId', 'teamJersey'])\n\n#selecting variables of interest\ndf_PFF_specialTeamSafeties = df_PFF_specialTeamSafeties[['gameId', 'playId', 'nflId']]\n\ndf_PFF_specialTeamSafeties = df_PFF_specialTeamSafeties.sort_values(['gameId', 'playId', 'nflId'])","43b58f39":"#creating data frame that will only include deep kickoffs\ndf_deepKickoffs = df_plays.copy()\n\n#joining the scouting data\ndf_deepKickoffs = pd.merge(df_deepKickoffs, df_PFFScouting, on = ['gameId', 'playId'])\n\n#filtering for kickoff plays only & deep kickoffs only\ndf_deepKickoffs = df_deepKickoffs[(df_deepKickoffs['specialTeamsPlayType'] == 'Kickoff') & (df_deepKickoffs['kickType'] == 'D')]\n\n#selecting variables of interest\ndf_deepKickoffs = df_deepKickoffs[['gameId', 'playId', 'kickerId', 'possessionTeam']]","aa3c5df9":"df_maxSpeeds = df_tracking.copy()\n\n#joining games\ndf_maxSpeeds = pd.merge(df_maxSpeeds, df_games, on = 'gameId')\n\n#using a join to remove special teams safeties\ndf_maxSpeeds = pd.merge(left = df_maxSpeeds, right = df_PFF_specialTeamSafeties, how='left', indicator=True, on = ['gameId', 'playId', 'nflId'])\n\ndf_maxSpeeds.loc[df_maxSpeeds._merge != 'left_only', :].head()","bc4119e1":"df_maxSpeeds = df_maxSpeeds.loc[df_maxSpeeds._merge == 'left_only', :].drop(columns = '_merge')\n\n#joining deep kickoffs\ndf_maxSpeeds = pd.merge(df_maxSpeeds, df_deepKickoffs, on = ['gameId', 'playId'])\n\n#removing the kicker from the tracking data\ndf_maxSpeeds = df_maxSpeeds[(df_maxSpeeds['kickerId'] != df_maxSpeeds['nflId']) &\n                            \n                            #player is on home team and kicking team is home\n                            ((df_maxSpeeds['team']=='home') & (df_maxSpeeds['possessionTeam'] == df_maxSpeeds['homeTeamAbbr']) |\n                             \n                             #or player is on away team and kicking team is away\n                            (df_maxSpeeds['team']=='away') & (df_maxSpeeds['possessionTeam'] == df_maxSpeeds['visitorTeamAbbr']))]\n\n#select variables of interest\ndf_maxSpeeds = df_maxSpeeds[['gameId', 'playId', 'frameId', 'nflId', 'event', 's','time']]\n\n#arranging by gameId, playId, frameId and nflId\ndf_maxSpeeds = df_maxSpeeds.sort_values(['gameId', 'playId', 'frameId'])\n\n#grouping by gameId, playId and nflId & filtering for frames after kickoff\ndf_maxSpeeds = df_maxSpeeds.loc[df_maxSpeeds.groupby(['gameId', 'playId']).event.transform(lambda z: np.cumsum(z.isin(['kickoff', 'free_kick'])) >= 1)]\n\n#grouping by gameId, playId and nflId & filtering for first 40 observations\ndf_maxSpeeds = df_maxSpeeds.groupby(['gameId', 'playId', 'nflId']).head(40).reset_index()\n\n#calculating max speed for given play \/ player\ndf_maxSpeeds = df_maxSpeeds.groupby(['gameId', 'playId', 'nflId']).s.apply(lambda z: z.max()).reset_index()\n\n#renaming speed column as maxSpeed\ndf_maxSpeeds = df_maxSpeeds.rename(columns={\"s\" : \"maxSpeed\"})","81b186b9":"#merge the  play information of interest\ndf_maxSpeedPlays = pd.merge(left = df_maxSpeeds, right = df_plays, how='left', indicator=True, on = ['gameId', 'playId'])\n\n#select variables of interest\ndf_maxSpeedPlays = df_maxSpeedPlays[['gameId', 'playId', 'nflId', 'maxSpeed', 'quarter', 'possessionTeam', 'preSnapHomeScore', 'preSnapVisitorScore','gameClock']]\n\n#compute the score differential (home - away)\ndf_maxSpeedPlays['scoreDiff'] = df_maxSpeedPlays['preSnapHomeScore'] - df_maxSpeedPlays['preSnapVisitorScore'] \n\n#merge the home team abbr and week of game\ndf_maxSpeedPlays = pd.merge(left = df_maxSpeedPlays, right = df_games[['gameId','week','homeTeamAbbr','visitorTeamAbbr']], how='left', on = ['gameId'])\n\n# Add a column whether the home team is kicking off\ndf_maxSpeedPlays['homeYes'] = df_maxSpeedPlays.possessionTeam.eq(df_maxSpeedPlays['homeTeamAbbr']).astype('int')","b8f712f8":"#will have max speeds and play\/game situation info for each player with surface info\ndf_maxSpeeds2 = df_maxSpeedPlays.copy()\n\n#merging to Lee Sharpe's data to get surface type\ndf_maxSpeeds2 = pd.merge(df_maxSpeedPlays, df_leeSharpeGames[['old_game_id', 'surface']], left_on = ['gameId'], right_on = ['old_game_id'])\ndf_maxSpeeds2 = df_maxSpeeds2.drop(columns = 'old_game_id')\n\n#striping the surface column to remove extra spaces at the end\ndf_maxSpeeds2['surface'] = df_maxSpeeds2['surface'].transform(lambda x : x.str.strip())\n\n#convert speed to mph 1 yd\/sec = 2.0454 mph\nypsToMph = 2.04545\ndf_maxSpeeds2['maxSpeedMph'] = df_maxSpeeds2['maxSpeed']*ypsToMph\n\n#add player name and position to data\ndf_maxSpeeds2 = pd.merge(df_maxSpeeds2, df_players[['nflId', 'Position', 'displayName']], how= 'left', left_on = ['nflId'], right_on = ['nflId'])\n\ndf_maxSpeeds2.head()","221ce142":"#arranging by gameId, playId, nflID\ndf_maxSpeeds2 = df_maxSpeeds2.sort_values(['gameId', 'playId', 'nflId'])\n\n# Sequence of the kick off for a player in a game\ndf_maxSpeeds2['koPlayerSeq'] = df_maxSpeeds2.groupby(['nflId','gameId']).cumcount()+1\ndf_maxSpeeds2.sort_values(['maxSpeedMph'])","44f7ceaa":"#get the elapsed time from start of the game (minutes) for each play\ndf_maxSpeeds2 = pd.merge(left=df_maxSpeeds2, right=df_playElapseTime, how= 'left', left_on = ['gameId', 'playId'], right_on = ['gameId', 'playId'])\n\n#save the data file\ndf_maxSpeeds2.to_csv('maxSpeeds2.csv')\ndf_maxSpeeds2.head()","02d1f256":"# (from Baek Kyun Shin)\ndef resumetable(df):\n    print(f'Shape : {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns=['Data Type'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns={'index': 'Feature'})\n    summary['Num of null'] = df.isnull().sum().values\n    summary['Num of unique'] = df.nunique().values\n    summary['First value'] = df.loc[0].values\n    summary['Second value'] = df.loc[1].values\n    summary['Third value'] = df.loc[2].values\n    return summary\n\nresumetable(df_maxSpeeds2)","7da91f38":"df_maxSpeeds2.describe().T","6251448a":"#import grahpics packages\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nplt.style.use('fivethirtyeight')","4e6583a3":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\ng = sns.histplot(data=df_maxSpeeds2, x='maxSpeedMph',bins=50)\n\n#clean up the chart\ng.set_title('Kickoff Coverage Player Max Speeds')\ng.set_ylabel('')\ng.set_xlabel('Player Max MPH on Kickoff Coverage');","e743a23f":"#find the total number of kickoffs in a game for each player\ndf_totalKos = pd.DataFrame(df_maxSpeeds2.groupby(['gameId','nflId'])['koPlayerSeq'].max())\ndf_totalKos.reset_index(inplace=True)\n\ndf_totalKos.rename(columns={'koPlayerSeq':'totalKos'}, inplace=True)\n\nmpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\ng = sns.histplot(data=df_totalKos, x='totalKos',discrete=True)\n\n#clean up the chart\ng.set_title('Total Kickoff Sprints per Player in a Game')\ng.set_xticks(range(1,11))\ng.set_ylabel('Number of Players')\ng.set_xlabel('Total Kickoff Coverage Player Sprints in Game');","40bab17d":"df_totalKos.totalKos.value_counts().sort_index()","bb8286df":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\ng = sns.violinplot(data=df_maxSpeeds2, y='maxSpeedMph', x='koPlayerSeq',color='#30a2da')\n\n#clean up the chart\ng.set_title('Player Max Speed on Kickoff')\ng.set_ylabel('Max Speed (mph)')\ng.set_xlabel('Cumulutive Kickoff Sprints for Player in Game');\n\nmpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nh = sns.pointplot(data=df_maxSpeeds2, y='maxSpeedMph', x='koPlayerSeq',color='#30a2da', errwidth= 1, scale= 0.5)\n\n#clean up the chart\nh.set_title('Average Player Max Speed on Kickoff')\nh.set_ylabel('Max Speed (mph)')\nh.set_xlabel('Cumulutive Kickoff Sprints for Player in Game');","81276a70":"top10pos = df_maxSpeeds2.Position.value_counts().head(10).index.tolist()\ndf_top = df_maxSpeeds2[(df_maxSpeeds2.Position.isin(top10pos)) & (df_maxSpeeds2.koPlayerSeq < 9) & (df_maxSpeeds2.quarter < 5)]\ng = sns.FacetGrid(data=df_top, col=\"Position\", col_wrap=5, height=5, ylim=(15, 22))\ng = g.map(sns.pointplot, \"koPlayerSeq\", \"maxSpeedMph\",color='#30a2da', errwidth= 1, scale= 0.5);\n\n#clean up the chart\ng.set_axis_labels('Cumulative Kickoff Sprints', 'Max Speed (mph)');","7aa7d62f":"g = sns.FacetGrid(data=df_top, col=\"Position\", col_wrap=5, height=5, ylim=(15, 22))\ng = g.map(sns.pointplot, \"quarter\", \"maxSpeedMph\",color='#30a2da', errwidth= 1, scale= 0.5);\n\n#clean up the chart\n#g.set(xticks=range(1,5))\ng.set_axis_labels('Quarter', 'Max Speed (mph)');","78cb3954":"#create 10 minute bins \ninterval_range = pd.interval_range(start=0,end=220,freq=20,closed='left')\ndf_top.loc[:,'elapsedTimeBinned'] = pd.cut(df_top['elapsedTime'], bins=interval_range)\n\ng = sns.FacetGrid(data=df_top, col=\"Position\", col_wrap=5, height=5, ylim=(15, 22))\ng = g.map(sns.pointplot, \"elapsedTimeBinned\", \"maxSpeedMph\", errwidth= 1, scale= 0.5);\n\n#clean up the chart\ng.set_xticklabels(rotation=90)\ng.set_axis_labels('Game Duration (min)', 'Max Speed (mph)');","c0f000ba":"df_top['kickTeamMargin'] = np.where(df_top['homeYes'] == 1, df_top['scoreDiff'], -df_top['scoreDiff'])\ndf_top.describe()","742eaa47":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nh = sns.scatterplot(data=df_top, y='maxSpeedMph', x='kickTeamMargin', color='#30a2da')\n\n#clean up the chart\nh.set_title('Average Player Max Speed on Kickoff')\nh.set_ylabel('Max Speed (mph)')\nh.set_xlabel('Cumulutive Kickoff Sprints for Player in Game');","fb1aedb4":"g = sns.FacetGrid(data=df_top, col=\"Position\", col_wrap=5, height=5, ylim=(10, 22))\ng = g.map(sns.lineplot, \"kickTeamMargin\", \"maxSpeedMph\");\n#g = g.map(sns.pointplot, \"kickTeamMargin\", \"maxSpeedMph\",color='#30a2da', errwidth= 1, scale= 0.5);\ng.axes[0].legend()\n#clean up the chart\ng.set_axis_labels('Kick Team Score Margin', 'Max Speed (mph)');","1c105211":"g = sns.FacetGrid(data=df_top[df_top['quarter'] == 4], col=\"Position\", col_wrap=5, height=5, ylim=(10, 22))\ng = g.map(sns.lineplot, \"kickTeamMargin\", \"maxSpeedMph\");\n#g = g.map(sns.pointplot, \"kickTeamMargin\", \"maxSpeedMph\",color='#30a2da', errwidth= 1, scale= 0.5);\ng.axes[0].legend()\n#clean up the chart\ng.set_axis_labels('Kick Team Score Margin', 'Max Speed (mph)');","f48d7f56":"#create 10 minute bins \ninterval_range = pd.interval_range(start=-35,end=50,freq=5,closed='left')\ndf_top.loc[:,'kickTeamMargin_bin'] = pd.cut(df_top['kickTeamMargin'], bins=interval_range)\n\ng = sns.FacetGrid(data=df_top[df_top['quarter'] == 4], col=\"Position\", col_wrap=5, height=5, ylim=(14, 22))\ng = g.map(sns.pointplot, \"kickTeamMargin_bin\", \"maxSpeedMph\", errwidth= 1, scale= 0.5);\n\n#clean up the chart\ng.set_xticklabels(rotation=90)\ng.set_axis_labels('Kick Team Score Margin', 'Max Speed (mph)');","ab3646e1":"df_top.head()","8ea7072a":"#sort data by time\ndf_topTimeSort = df_top.sort_values(by=['time','nflId'],ascending=True)\n\n#compute the lag of the max speed for each ko in a game\ndf_topTimeSort['lagSpeedMph'] = (df_topTimeSort.groupby((['gameId','nflId']))['maxSpeedMph'].shift(1))\ndf_topTimeSort[df_topTimeSort['nflId'] == 37211].head(20)","85f52833":"#import statsmodels\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf","408bc1e5":"#regression with all interactions\npreds = '+'.join(['C(Position)','lagSpeedMph*C(quarter)'])\nmy_formula = \"maxSpeedMph~\" + preds\nmod = smf.ols(formula=my_formula, data= df_topTimeSort).fit()\nprint(mod.summary())","eddd330f":"g = sns.FacetGrid(data=df_topTimeSort[df_topTimeSort['lagSpeedMph'] > 10].dropna(), col=\"Position\", col_wrap=5, height=5, ylim=(0, 32),xlim=(10, 25))\ng = g.map(sns.lineplot, 'lagSpeedMph',\"maxSpeedMph\", color='#30a2da');\n\n#clean up the chart\n#g.set(xticks=range(1,5))\ng.set_axis_labels('lagSpeedMph', 'Max Speed (mph)');","02565b12":"# 14. Conclusion\n\n### Just a quick EDA, but further exploration with this data would look at the potential impact of the score differential (Do players \"relax\" when the game is in hand?). I was intending to do a regression analysis with the effects:\n* Postion\n* Quarter\n* Score Differential\n* Cumulative KOs\n* Real-time since the last KO\n\n### I just don't have time and wanted to get my feet wet with the data and the Big Data Bowl process. Thanks to those that shared their starter code.","271afb12":"# 4. Kickoff Counts as potential factor in fatigue\n### A kickoff coverage player completing their 1st kickoff versus their 7th may have an impact on their max speed. Compute the sequence of kickoffs for a player in a game `koPlayerSeq`","7821ede5":"### Next, we will create a dataframe to only include deep kickoffs so that we can remove all unnecessary rows in the tracking data.","c0af7620":"# 6. EDA for max speed in different game situations\n","9085edd9":"# 7. Distribution of max speeds of deep kickoffs?\n### Given that the fastest measured speed in a human was Usain Bolt at 27.8 mph between 60 and 80 meters in his world record 100m in 2009, the players reporting max speed above that are clearly measurement errors. I'm going to leave them, but account for these outliers and those with max mph less than 10 mph when viewing the charts.","3ecce81e":"# 9. How do cumulative kickoff sprints impact player max sprint speed?\n\n### Here we look that max speed for players on their first, second, third, etc. kickoff coverage of a game. While the range decreases, likely more due to sample size, the actual distribution does not appear to be significantly different with the average only dropping by roughly 0.5 mph from the first kickoff to the eigth of the game.","21d3c932":"# 12. How much does players' kickoff sprint slow as the game progresses (by actual time)?\n\n### The effect isn't as clear here likely due to a variety of factors (limited number of kickoffs). Clearly a dropoff as the game progresses for some positions more than others.","2f37f3cd":"### Does late game paint a different picture? Just looking at the fourth quarter.","ee1d7784":"### Let's look at the positions of players for the those from the top 10 most frequent (only in regulation and less than 9 cumulative kickoffs in a game). We see some of effect we might expect to see (dropoff in the tails where motivation due to large lead or large deficit) is exhibited.","3c1a29ac":"# 3. Clean Data (from Dhriti Yandpally's [notebook](https:\/\/www.kaggle.com\/dhritiyandapally\/speed-on-kickoff-plays-across-surfaces-python))\n\n### To start the cleaning process, we must first use PFF scouting data to identify special teams safeties who are not actively advancing downfield. To be able to merge this information, we will use tracking data to get a map of a player's jersey number to their `nflId` in each game.","953e5e02":"# 11. How much does players' kickoff sprint slow as the game progresses (by quarters)?\n\n### The effect isn't as clear here likely due to a variety of factors (limited number of kickoffs).","f103faf8":"# 13. Kicking team win margin impact on sprint effort?\n\n### Perhaps the current margin of victory for the kicking team might impact motivation and players will give a lesser effort (sprint)?","f07a57f2":"### Now, we will use the data frames we created to filter the tracking data. We will use `df_PFF_specialTeamSafeties` to filter out players who were special teams safeties and use `df_deepKickoffs` to remove plays where there was not a deep kickoff. For each player on each play in the the tracking data, we will filter for the first 40 frames which approximately corresponds to the initial sprint portion of the play. Over that interval, we calculate the maximum speed reached for each player in the play.","67233cfb":"# 5. Elapsed time at the start of the kickoff\n\n## While the game clock measures the duration of the game, the real time is also a potential factor in player fatigue. Record the total elapsed time (not game clock) for each kickoff in `elapsedTime`","d1d40fa7":"# 10. Do some positions feel the cumulative effects of repeated kickoff sprints in a game more than others?\n\n### We look at the top 10 positions for players participating in kickoffs and visualize the impact of cumulative kickoffs on their average max speed. As would be expected, some positions are faster than others. The largest dropoffs in max speed appear to occur for MLB.","89d21cc1":"### Create 5 point interval margins and repeat. This is just for fourth quarter effects and some of the high\/low dropoffs are more apparent (RB and OLB).","1cd861e4":"# 8. What is the total number of kickoff coverage sprints for a player in game?\n### A deep kickoff is typically a full sprint from the 35-yd line for 40+ yards. Some players do this as many as 10 times within a game while six or less is more typical.\n### Here we see the distribution of kickoff coverage sprints in a game for each player. There are 910 players that participated in a total of 4 deep kickoffs in a game. There are 80 players who completed 8 kickoff coverage sprints in a single game.","0d01f640":"# 2. Compute the elapsed (actual) time as a potential factor in fatigue","55e11671":"<a id=\"ReadData\"><\/a>\n# 1. Read Data","1d2e8e71":"# Fatigue Factors and Sprint Speed on Deep Kickoffs (2020 Season)\n<img src=\"https:\/\/c.tenor.com\/gAIIE5tIz4MAAAAd\/superbowllii-superbowl.gif\" style=\"width:500px;\">\n\n## During each NLF kickoff (at the beginning of the half or after a score), each player on the kickoff coverage unit will sprint down the field to tackle the returner. Dhriti Yandpally's [notebook](https:\/\/www.kaggle.com\/dhritiyandapally\/speed-on-kickoff-plays-across-surfaces-python) determined each player's max speed reached during the initial sprint (before they are blocked \/ obstructed by the return team). Building off that work we perform some basic EDA on the impact of game duration and cumulative kickoffs on a players max speed on the kickoff coverage unit. We explore the difference across positions and suggest further statistical analysis that could be performed with the given data.","0551f590":"### Looking at all the positions combined, there doesn't seem to be too much dropoff based on the score. Even when the kicking team is down by 30 (-30) or up by 30."}}