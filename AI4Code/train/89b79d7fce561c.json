{"cell_type":{"509a1f60":"code","8269448a":"code","6471a6eb":"code","313ae52f":"code","8f8d8d30":"code","d09a9306":"code","996c1833":"code","f0354c72":"code","959bfa8a":"code","787f6fcd":"code","455e12ad":"code","883ce659":"code","32ca3d72":"code","fc39304d":"code","aecd657d":"code","fb8e957c":"code","15eb521f":"code","bb7c0332":"code","201a1334":"code","16ea68d4":"code","2bd89f70":"code","78a0f926":"code","a36d2158":"code","2abd52c5":"code","874cc9fd":"code","febbd421":"code","08f52a18":"code","18a1832c":"code","d9d62781":"markdown","62cfc5e1":"markdown","229dd153":"markdown","9af1b514":"markdown","722ff7a6":"markdown","6abb9d58":"markdown","bd67b4b8":"markdown","8c607253":"markdown","cfbdd5b9":"markdown","7123e942":"markdown","e435ac97":"markdown","eade03f4":"markdown","3e725ba1":"markdown","5247102e":"markdown","260313af":"markdown","ef4ade50":"markdown","5f7edffa":"markdown","620e6259":"markdown","b25d6843":"markdown","b793dc83":"markdown","36da2c78":"markdown","7f5552c8":"markdown","e2565e5d":"markdown","83f45acb":"markdown"},"source":{"509a1f60":"# Data Manipulation, Linear Algebra\nimport pandas as pd\nimport numpy as np\n\n# Plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Machine Learning\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.cluster import KMeans","8269448a":"data = pd.read_csv(\"..\/input\/autompg-dataset\/auto-mpg.csv\")\r\ndata.head()","6471a6eb":"data.info()","313ae52f":"data[['horsepower']] = data[['horsepower']].replace(\"?\", np.nan)","8f8d8d30":"data.isnull().sum()","d09a9306":"data.horsepower = pd.to_numeric(data.horsepower)\r\ndata[['horsepower']] = data[['horsepower']].replace(np.nan, data.horsepower.median())","996c1833":"data.describe()","f0354c72":"data[\"model year\"].value_counts().sort_values(ascending=False)","959bfa8a":"fig, axes = plt.subplots(figsize=(15, 5), nrows=1, ncols=2, dpi=100)\r\n\r\nsns.countplot(x=\"cylinders\", data=data, ax=axes[0])\r\naxes[0].set_title(\"Cars Count with Different Number of Cylinders\")\r\naxes[0].set_ylabel(\"Cars Count\")\r\naxes[0].set_xlabel(\"Number of Cylinders\")\r\n\r\nsns.countplot(x=\"origin\", data=data, ax=axes[1])\r\naxes[1].set_title(\"Cars Count with Different Origin\")\r\naxes[1].set_ylabel(\"Cars Count\")\r\naxes[1].set_xlabel(\"Origin\")\r\n\r\nplt.show()","787f6fcd":"fig, axes = plt.subplots(figsize=(18, 6), nrows=1, ncols=3, dpi=90)\r\n\r\nsns.boxplot(x=\"cylinders\", y=\"mpg\", data=data, ax=axes[0])\r\naxes[0].set_title(\"Cylinders vs Miles per Gallon\")\r\n\r\nsns.boxplot(x=\"cylinders\", y=\"acceleration\", data=data, ax=axes[1])\r\naxes[1].set_title(\"Cylinders vs Acceleration\")\r\n\r\nsns.boxplot(x=\"cylinders\", y=\"horsepower\", data=data, ax=axes[2])\r\naxes[2].set_title(\"Cylinders vs horsepower\")\r\n\r\nplt.show()","455e12ad":"fig, axes = plt.subplots(figsize=(18, 6), nrows=1, ncols=3, dpi=90)\r\n\r\nsns.scatterplot(x=\"weight\", y=\"mpg\", data=data, hue=\"cylinders\", ax=axes[0])\r\naxes[0].set_title(\"Weight vs Miles per Gallon\")\r\n\r\nsns.scatterplot(x=\"weight\", y=\"acceleration\", data=data, hue=\"cylinders\", ax=axes[1])\r\naxes[1].set_title(\"Weight vs Acceleration\")\r\n\r\nsns.scatterplot(x=\"weight\", y=\"horsepower\", data=data, hue=\"cylinders\", ax=axes[2])\r\naxes[2].set_title(\"Weight vs Horsepower\")\r\n\r\nplt.show()","883ce659":"plt.rcParams[\"figure.dpi\"] = 100\r\nplt.rcParams[\"figure.figsize\"] = (10, 8)\r\ndata[[\"mpg\", \"displacement\", \"horsepower\", \"weight\", \"acceleration\"]].hist()\r\nplt.show()","32ca3d72":"sns.pairplot(data)\r\nplt.show()","fc39304d":"plt.rcParams[\"figure.figsize\"] = (8, 6)\r\nsns.heatmap(data.corr(), annot=True)\r\nplt.show()","aecd657d":"car_company = []\r\nfor car_name in data[\"car name\"]:\r\n    car_name = car_name.split(\" \")\r\n    car_company.append(car_name[0])","fb8e957c":"data[\"car company\"] = car_company\r\ndata.drop(\"car name\", inplace=True, axis=1)\r\ndata.head()","15eb521f":"le = LabelEncoder()\r\ndata[\"car company\"] = le.fit_transform(data[\"car company\"])\r\ndata.head()","bb7c0332":"sc = StandardScaler()\r\nscaled_data = sc.fit_transform(data.copy())","201a1334":"# Reducing the Number of Features in the Dataset using PCA\r\npca = PCA(2)\r\npca_data = pca.fit_transform(scaled_data)","16ea68d4":"plt.rcParams[\"figure.figsize\"] = (12, 8)\r\nplt.rcParams[\"figure.dpi\"] = 80\r\nplt.scatter(x=pca_data[:,0], y=pca_data[:,1], lw=2)\r\nplt.xlabel(\"Principle Component 1\")\r\nplt.ylabel(\"Principle Component 2\")\r\nplt.title(\"Principle Components Analysis\")\r\nplt.show()","2bd89f70":"wcss = []\r\n\r\nfor i in range(1, 11):\r\n    kmeans = KMeans(\r\n        n_clusters = i,\r\n        init = 'k-means++',\r\n        random_state=42\r\n    )\r\n    kmeans.fit(data)\r\n    wcss.append([i, kmeans.inertia_]) # kmeans.inertial_ returns the calculated WCSS Values\r\n    \r\nwcss_dataframe = pd.DataFrame(wcss, columns=[\"clusters\", \"wcss value\"])\r\n\r\n# Plot for Elbow Method\r\nplt.rcParams[\"figure.figsize\"] = (12, 8)\r\nplt.rcParams[\"figure.dpi\"] = 80\r\nsns.lineplot(\r\n    x = wcss_dataframe.clusters.values,\r\n    y = wcss_dataframe[\"wcss value\"], marker=\"o\")\r\nplt.xticks(np.arange(1, 11))\r\nplt.xlabel(\"Clusters\")\r\nplt.ylabel(\"Wcss Values\")\r\nplt.title(\"Elbow Method Plot\")\r\nplt.show()","78a0f926":"kmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state = 42)\r\ny_kmeans = pd.Series(kmeans.fit_predict(scaled_data))\r\ny_kmeans","a36d2158":"y_kmeans.value_counts()","2abd52c5":"centroids = kmeans.cluster_centers_\r\ncentroids_pca = pca.transform(centroids)","874cc9fd":"pca_dataframe = pd.DataFrame(pca_data, columns=[\"PCA 1\", \"PCA 2\"])\r\npca_dataframe[\"Cluster\"] = y_kmeans\r\npca_dataframe.sample(10)","febbd421":"plt.rcParams[\"figure.figsize\"] = (12, 8)\r\nplt.rcParams[\"figure.dpi\"] = 80\r\nsns.scatterplot(x=\"PCA 1\", y=\"PCA 2\", hue=\"Cluster\", data=pca_dataframe, palette=['green','orange','brown'], s=100)\r\nplt.scatter(x=centroids_pca[:, 0], y=centroids_pca[:, 1], marker=\"+\", s=500, linewidths=3, lw=4, color=\"blue\", zorder=10)\r\nplt.title(\"Visualizing Clusters\")\r\nplt.show()","08f52a18":"data[\"Cluster\"] = y_kmeans\r\ndata.head()","18a1832c":"sns.pairplot(data, hue=\"Cluster\", palette=['green','orange','brown'])\r\nplt.show()","d9d62781":"#### Higher Weight has Lower Mileage\r\n#### Higher Weight has Slower Acceleration\r\n#### Heavier Cars have Higher Horsepower","62cfc5e1":"## Checking for null values","229dd153":"## Effect of Cylinder Count on Mileage, Acceleration, Horsepower","9af1b514":"## Effect of Weight Count on Mileage, Acceleration, Displacement","722ff7a6":"## Count of Cars of Each Year","6abb9d58":"### From Elbow Method it is Clear that we have 3 Clusters","bd67b4b8":"## Encoding Categorical Variable - Car Company","8c607253":"## Generating Our Clusters using Kmeans","cfbdd5b9":"#### Most of the Cars have 4 Cylinders\r\n#### Also Most of the Cars are from Origin 1","7123e942":"#### Cars with 4 Cylinders have highest mileage\r\n#### Cars with 5 Cylinders have highest acceleration\r\n#### 8 Cylinder cars have higher Horsepower","e435ac97":"## Centeroids","eade03f4":"## Applying Principal Compnent Analysis","3e725ba1":"# Visualizing Clusters","5247102e":"# Analysis and EDA","260313af":"# Preparing Data","ef4ade50":"# KMeans Model","5f7edffa":"## Distributon Plots for Continious Features","620e6259":"## Loading Dataset","b25d6843":"# Importing Necessaary Libraries","b793dc83":"## Count Plot for Number of Cylinders and Different Origins","36da2c78":"## Using Elbow Method to Find Appropriate number of clusters","7f5552c8":"## Feature Scaling using StandardScaler","e2565e5d":"#### We have maximum cars from 1973 followed by 1978, 1976, and so on.","83f45acb":"# Feature Engineering"}}