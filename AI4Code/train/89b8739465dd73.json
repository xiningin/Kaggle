{"cell_type":{"57b2dc5d":"code","7c59c0f7":"code","bd24b20c":"code","839c8bb3":"code","20b76054":"code","227a825f":"code","3b75c1be":"code","b18b4ed2":"code","835e5993":"code","54224e3e":"code","78307fd1":"code","11c502b9":"code","75c25143":"code","cb95ff55":"code","26101ed0":"code","65a02425":"code","3f77d802":"code","1dff6e0c":"code","06e2f0f4":"code","99c43675":"markdown","bb8afed7":"markdown"},"source":{"57b2dc5d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport sys\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom zipfile import ZipFile\nfrom PIL import Image\nfrom matplotlib.pyplot import imshow\nimport cv2\n\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\nsample_df = pd.read_csv(\"..\/input\/sample_submission.csv\")\n# print(train_df.shape)\n# print(test_df.shape)\n\n\nplate_names = [\"Plate1\", \"Plate2\", \"Plate3\", \"Plate4\"]\ntest_experiment_names = [name for name in os.listdir(\"..\/input\/test\")]\ntrain_experiment_names = [name for name in os.listdir(\"..\/input\/train\")]","7c59c0f7":"train_df.head()","bd24b20c":"ax = train_df[\"sirna\"].plot.hist(bins=max(train_df[\"sirna\"]))","839c8bb3":"test_df.head()","20b76054":"sample_df.head()","227a825f":"print(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/train\"))","3b75c1be":"file = \"..\/input\/test\/HEPG2-11\/Plate1\/G07_s2_w1.png\"\nimg = Image.open(file)\nimshow(np.asarray(img))","b18b4ed2":"# This will show 5 images for each plate from test dataset\nplate_n = 0\nfor exp in test_experiment_names:\n    for plate in plate_names:\n        path = \"..\/input\/test\/\" + exp + \"\/\" + plate + \"\/\"\n        print(exp + \"\/\" + plate)\n        plt.figure(figsize=(18, 16))\n        for image_path in os.listdir(path):\n            file = path + image_path\n            img = Image.open(file)\n            plt.subplot(1,5,plate_n+1), plt.imshow(img)\n            \n            plate_n = plate_n + 1\n            if plate_n == 5:\n                break\n        plt.show()\n        plate_n = 0","835e5993":"# This will show 5 images for each plate from train dataset\nplate_n = 0\nfor exp in train_experiment_names:\n    for plate in plate_names:\n        path = \"..\/input\/train\/\" + exp + \"\/\" + plate + \"\/\"\n        print(exp + \"\/\" + plate)\n        plt.figure(figsize=(18, 16))\n        for image_path in os.listdir(path):\n            file = path + image_path\n            img = Image.open(file)\n            plt.subplot(1,5,plate_n+1), plt.imshow(img)\n            \n            plate_n = plate_n + 1\n            if plate_n == 5:\n                break\n        plt.show()\n        plate_n = 0","54224e3e":"plate_n = 0\n# Check all sirnas groupm\nfor label in range(max(train_df[\"sirna\"])):\n    label1 = train_df[train_df[\"sirna\"] == label]\n#     print(\"Sirna == \", label)","78307fd1":"label2 = train_df[train_df[\"sirna\"] == 1]\n\nfor exp in train_experiment_names:\n    if exp not in list(label2[\"experiment\"]):\n        continue\n    \n    # Find index of exp found\n    idx = label2.index[label2['experiment'] == exp].tolist()[0]\n    \n    # Find which plate and well\n    plate = \"Plate\" + str(label2[\"plate\"][idx])\n    well = str(label2[\"well\"][idx])\n    \n    path = \"..\/input\/train\/\" + exp + \"\/\" + plate + \"\/\"\n    print(exp + \"\/\" + plate, well)\n    plt.figure(figsize=(18, 16))\n    \n    for image_path in os.listdir(path):\n        if image_path.split(well)[0] == \"\":\n            file = path + image_path\n            img = Image.open(file)\n            plt.subplot(1,5,plate_n+1), plt.imshow(np.asarray(img))\n            \n            plate_n = plate_n + 1\n            if plate_n == 5:\n                break\n                \n    plt.show()\n    plate_n = 0","11c502b9":"img = cv2.imread(file,0)\n\nhist,bins = np.histogram(img.flatten(),256,[0,256])\n\ncdf = hist.cumsum()\ncdf_normalized = cdf * hist.max()\/ cdf.max()\n\nplt.plot(cdf_normalized, color = 'b')\nplt.hist(img.flatten(),256,[0,256], color = 'r')\nplt.xlim([0,256])\nplt.legend(('cdf','histogram'), loc = 'upper left')\nplt.show()\n","75c25143":"img = cv2.imread(file,0)\nequ = cv2.equalizeHist(img)\nres = np.hstack((img, equ))\nplt.imshow(res)\nplt.show()\n","cb95ff55":"hist,bins = np.histogram(equ.flatten(),256,[0,256])\n\ncdf = hist.cumsum()\ncdf_normalized = cdf * hist.max()\/ cdf.max()\n\nplt.plot(cdf_normalized, color = 'b')\nplt.hist(img.flatten(),256,[0,256], color = 'r')\nplt.xlim([0,256])\nplt.legend(('cdf','histogram'), loc = 'upper left')\nplt.show()","26101ed0":"img.shape","65a02425":"img = cv2.imread(file)\n# img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nclahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))\n\ncl1 = clahe.apply(img_gray)\nres = np.hstack((img_gray, cl1))\nplt.imshow(cl1)\nplt.show()","3f77d802":"img = cv2.imread(file)\ngray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nret,thresh_trunc = cv2.threshold(gray_image,50,255,cv2.THRESH_TRUNC)\nret,thresh_tozero_inv = cv2.threshold(gray_image,50,255,cv2.THRESH_TOZERO_INV)\n\n#DISPLAYING THE DIFFERENT THRESHOLDING STYLES\nnames = ['Original Image','THRESH_TRUNC','THRESH_TOZERO_INV']\nimages = gray_image,thresh_trunc,thresh_tozero_inv\n\nplt.figure(figsize=(18, 16))\nfor i in range(3):\n    plt.subplot(1,3,i+1),plt.imshow(images[i],'gray')\n    plt.title(names[i])\n    plt.xticks([]),plt.yticks([])\n    \nplt.show()","1dff6e0c":"ret,thresh_global = cv2.threshold(gray_image,127,255,cv2.THRESH_BINARY)\n\nthresh_mean = cv2.adaptiveThreshold(gray_image,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,11,2)\nthresh_gaussian = cv2.adaptiveThreshold(gray_image,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)\n\nnames = ['Original Image','Global Thresholding','Adaptive Mean Threshold','Adaptive Gaussian Thresholding']\nimages = [gray_image,thresh_global,thresh_mean,thresh_gaussian]\n\nplt.figure(figsize=(18, 16))\nfor i in range(4):\n    plt.subplot(2,2,i+1),plt.imshow(images[i],'gray')\n    plt.title(names[i])\n    plt.xticks([]),plt.yticks([])\n    \nplt.show()","06e2f0f4":"#using the averaging kernel for image smoothening \naveraging_kernel = np.ones((3,3),np.float32)\/3\nfiltered_image = cv2.filter2D(img, -1, averaging_kernel)\nplt.imshow(filtered_image)","99c43675":"### Check how each sirna behaves","bb8afed7":"#### See frequency for each 'sirna' in train dataset"}}