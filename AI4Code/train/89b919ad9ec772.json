{"cell_type":{"5372150d":"code","463fa07e":"code","b20c1dcf":"code","88c164bb":"code","3f9531fd":"code","133e8a87":"code","0dd691bc":"code","3c3265c8":"markdown"},"source":{"5372150d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n\nimport os\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","463fa07e":"from tensorflow import keras\nnmodel = keras.models.load_model('..\/input\/maskdetectionmodel\/home\/mask')","b20c1dcf":"from tensorflow.python.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.python.keras.applications.resnet import preprocess_input\nimport cv2\nimport matplotlib.pyplot as plt \n%matplotlib inline","88c164bb":"def img_path(path):\n    for dirname, _, filenames in os.walk(path):\n        l = []\n        y = []\n        for filename in filenames:\n            l.append(os.path.join(dirname, filename))\n            y.append(os.path.join(dirname, filename).split(\"\/\")[-2])\n        return (l, y)\n\nimage_size = 150\ndef read_and_prep_images(img_paths, img_height=image_size, img_width=image_size):\n    imgs = [load_img(img_path, target_size=(img_height, img_width)) for img_path in img_paths]\n    img_array = np.array([img_to_array(img) for img in imgs])\n    output = preprocess_input(img_array)\n    return(output)\n\ndef disp_img_with_path(test_img_path, title = \"my picture\"):\n    image = cv2.imread(test_img_path)\n    image = image[:, :, [2, 1, 0]]\n    plt.imshow(image)\n    plt.title(title)\n    plt.show()\n    (h, w, d) = image.shape\n    print(\"width={}, height={}, depth={}\".format(w, h, d))","3f9531fd":"img_paths = ['..\/input\/prajna-bhandary-face-mask-detection-dataset\/data\/train\/with_mask\/1-with-mask.jpg', '..\/input\/prajna-bhandary-face-mask-detection-dataset\/data\/train\/without_mask\/10.jpg', '..\/input\/prajna-bhandary-face-mask-detection-dataset\/data\/train\/without_mask\/108.jpg'] \ntest_img = read_and_prep_images(img_paths)\npreds = nmodel.predict(test_img)\nprint(preds)","133e8a87":"for img_path in img_paths:\n    disp_img_with_path(test_img_path = img_path, title = \"test_img\")","0dd691bc":"labels_dict={1:'without_mask',0:'with_mask'}\nfor result in preds:\n    label=np.argmax(result)\n    print(labels_dict[label])","3c3265c8":"## Printing the images"}}