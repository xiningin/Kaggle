{"cell_type":{"d38c3c27":"code","0988e1a1":"code","e75248a7":"code","da0b57cb":"code","b6bcc692":"code","d70b79ae":"code","cc90d822":"code","68222d44":"code","63936083":"code","dfe3d8c3":"code","eee679f4":"code","f36a2f35":"code","cade8445":"code","ee873917":"code","01ec305b":"code","e7cf7bab":"code","b18b00ad":"code","5a934182":"code","281a806a":"code","b8401d12":"code","54440e80":"code","b3e26fb6":"code","1c236b5c":"code","2489d490":"code","5c6a2b0c":"code","9678f18d":"code","dcd266ff":"code","25c856e9":"code","75eff86a":"code","64300094":"code","46039af2":"code","2066ee37":"code","a0815f9c":"code","b2e515c3":"code","64d696d6":"code","583a2675":"code","32ad8ed7":"code","0258bd16":"code","49ba5bba":"code","cfb4ba8c":"code","475aa64a":"code","b13cf4a4":"code","b9047123":"code","037b606c":"code","f2f151b5":"code","190696bc":"code","65f16ec5":"code","c3b09dbc":"code","97c5c185":"code","135a0a3c":"code","f461278a":"code","19daee00":"code","3add32a9":"code","eaf3c245":"code","d702191c":"code","cce75508":"code","ad4ec5e5":"code","833f1f98":"code","105e302c":"code","f8de8a04":"code","f030327a":"code","9ed671a7":"code","df40f8c5":"code","4e536ab7":"code","cd400f24":"code","e15968d8":"code","3ec8a9e0":"code","dbeed12c":"code","b7a61452":"code","c247534d":"markdown","fc0ea560":"markdown","0862945c":"markdown","885f460b":"markdown","3837678a":"markdown","d7a61142":"markdown","1ea81487":"markdown","9876c105":"markdown","31666d14":"markdown","4a73d265":"markdown","c1b161a6":"markdown","6226d576":"markdown","54004643":"markdown","b5d8cbcb":"markdown","ff19d4ed":"markdown","83ae00e9":"markdown","e432b34c":"markdown","3edc38f1":"markdown","3546b9bb":"markdown","eae83e97":"markdown","02791fbf":"markdown","d072722d":"markdown","0eabc7a9":"markdown","11de74ae":"markdown","f3c78b6c":"markdown","ab840e17":"markdown","e181dd2a":"markdown","b9cd1432":"markdown"},"source":{"d38c3c27":"import pandas as pd\nimport numpy as np\nimport operator \nimport re\nimport gc\nimport keras\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')","0988e1a1":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ndf = pd.concat([train ,test])","e75248a7":"print(\"Number of texts: \", df.shape[0])","da0b57cb":"def load_embed(file):\n    def get_coefs(word,*arr): \n        return word, np.asarray(arr, dtype='float32')\n    \n    if file == '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec':\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file) if len(o)>100)\n    else:\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file, encoding='latin'))\n        \n    return embeddings_index","b6bcc692":"glove = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'","d70b79ae":"print(\"Extracting GloVe embedding\")\nembed_glove = load_embed(glove)","cc90d822":"def build_vocab(texts):\n    sentences = texts.apply(lambda x: x.split()).values\n    vocab = {}\n    for sentence in sentences:\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab","68222d44":"def check_coverage(vocab, embeddings_index):\n    known_words = {}\n    unknown_words = {}\n    nb_known_words = 0\n    nb_unknown_words = 0\n    for word in vocab.keys():\n        try:\n            known_words[word] = embeddings_index[word]\n            nb_known_words += vocab[word]\n        except:\n            unknown_words[word] = vocab[word]\n            nb_unknown_words += vocab[word]\n            pass\n\n    print('Found embeddings for {:.3%} of vocab'.format(len(known_words) \/ len(vocab)))\n    print('Found embeddings for  {:.3%} of all text'.format(nb_known_words \/ (nb_known_words + nb_unknown_words)))\n    unknown_words = sorted(unknown_words.items(), key=operator.itemgetter(1))[::-1]\n\n    return unknown_words","63936083":"vocab = build_vocab(df['question_text'])","dfe3d8c3":"print(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)","eee679f4":"df['lowered_question'] = df['question_text'].apply(lambda x: x.lower())","f36a2f35":"def add_lower(embedding, vocab):\n    count = 0\n    for word in vocab:\n        if word in embedding and word.lower() not in embedding:  \n            embedding[word.lower()] = embedding[word]\n            count += 1\n    print(f\"Added {count} words to embedding\")","cade8445":"print(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nadd_lower(embed_glove, vocab)\noov_glove = check_coverage(vocab, embed_glove)","ee873917":"oov_glove[:10]","01ec305b":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }","e7cf7bab":"def known_contractions(embed):\n    known = []\n    for contract in contraction_mapping:\n        if contract in embed:\n            known.append(contract)\n    return known","b18b00ad":"print(\"- Known Contractions -\")\nprint(\"   Glove :\")\nprint(known_contractions(embed_glove))","5a934182":"def clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text","281a806a":"df['treated_question'] = df['lowered_question'].apply(lambda x: clean_contractions(x, contraction_mapping))","b8401d12":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)","54440e80":"punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'","b3e26fb6":"def unknown_punct(embed, punct):\n    unknown = ''\n    for p in punct:\n        if p not in embed:\n            unknown += p\n            unknown += ' '\n    return unknown","1c236b5c":"print(\"Glove :\")\nprint(unknown_punct(embed_glove, punct))","2489d490":"punct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', }","5c6a2b0c":"def clean_special_chars(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  # Other special characters that I have to deal with in last\n    for s in specials:\n        text = text.replace(s, specials[s])\n    \n    return text","9678f18d":"df['treated_question'] = df['treated_question'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))","dcd266ff":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)","25c856e9":"oov_glove[:100]","75eff86a":"mispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', 'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', 'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization', 'pok\u00e9mon': 'pokemon'}","64300094":"def correct_spelling(x, dic):\n    for word in dic.keys():\n        x = x.replace(word, dic[word])\n    return x","46039af2":"df['treated_question'] = df['treated_question'].apply(lambda x: correct_spelling(x, mispell_dict))","2066ee37":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)","a0815f9c":"del vocab, oov_glove, df, test\ngc.collect()","b2e515c3":"# Lowering\ntrain['treated_question'] = train['question_text'].apply(lambda x: x.lower())\n# Contractions\ntrain['treated_question'] = train['treated_question'].apply(lambda x: clean_contractions(x, contraction_mapping))\n# Special characters\ntrain['treated_question'] = train['treated_question'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))\n# Spelling mistakes\ntrain['treated_question'] = train['treated_question'].apply(lambda x: correct_spelling(x, mispell_dict))","64d696d6":"len_voc = 95000\nmax_len = 60","583a2675":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences","32ad8ed7":"def make_data(X):\n    t = Tokenizer(num_words=len_voc)\n    t.fit_on_texts(X)\n    X = t.texts_to_sequences(X)\n    X = pad_sequences(X, maxlen=max_len)\n    return X, t.word_index","0258bd16":"X, word_index = make_data(train['question_text'])","49ba5bba":"def make_treated_data(X):\n    t = Tokenizer(num_words=len_voc, filters='')\n    t.fit_on_texts(X)\n    X = t.texts_to_sequences(X)\n    X = pad_sequences(X, maxlen=max_len)\n    return X, t.word_index","cfb4ba8c":"X_treated, word_index_treated = make_data(train['treated_question'])","475aa64a":"from sklearn.model_selection import train_test_split","b13cf4a4":"y = train['target'].values","b9047123":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=420)","037b606c":"X_t_train, X_t_val, _, _ = train_test_split(X_treated, y, test_size=0.1, random_state=420)","f2f151b5":"print(f\"Training on {X_train.shape[0]} texts\")","190696bc":"def make_embed_matrix(embeddings_index, word_index, len_voc):\n    all_embs = np.stack(embeddings_index.values())\n    emb_mean,emb_std = all_embs.mean(), all_embs.std()\n    embed_size = all_embs.shape[1]\n    word_index = word_index\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (len_voc, embed_size))\n    \n    for word, i in word_index.items():\n        if i >= len_voc:\n            continue\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None: \n            embedding_matrix[i] = embedding_vector\n    \n    return embedding_matrix","65f16ec5":"embedding = make_embed_matrix(embed_glove, word_index, len_voc)\n\ndel word_index\ngc.collect()","c3b09dbc":"embedding_treated = make_embed_matrix(embed_glove, word_index_treated, len_voc)\ndel word_index_treated\ngc.collect()","97c5c185":"from keras import backend as K","135a0a3c":"def f1(y_true, y_pred):\n    def recall(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\n    def precision(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n    \n    precision = precision(y_true, y_pred)\n    recall = recall(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n","f461278a":"from keras.models import Model\nfrom keras.layers import Dense, Embedding, Bidirectional, CuDNNGRU, GlobalAveragePooling1D, GlobalMaxPooling1D, concatenate, Input, Dropout\nfrom keras.optimizers import Adam","19daee00":"def make_model(embedding_matrix, embed_size=300, loss='binary_crossentropy'):\n    inp    = Input(shape=(max_len,))\n    x      = Embedding(len_voc, embed_size, weights=[embedding_matrix], trainable=False)(inp)\n    x      = Bidirectional(CuDNNGRU(128, return_sequences=True))(x)\n    x      = Bidirectional(CuDNNGRU(64, return_sequences=True))(x)\n    avg_pl = GlobalAveragePooling1D()(x)\n    max_pl = GlobalMaxPooling1D()(x)\n    concat = concatenate([avg_pl, max_pl])\n    dense  = Dense(64, activation=\"relu\")(concat)\n    drop   = Dropout(0.1)(concat)\n    output = Dense(1, activation=\"sigmoid\")(concat)\n    \n    model  = Model(inputs=inp, outputs=output)\n    model.compile(loss=loss, optimizer=Adam(lr=0.0001), metrics=['accuracy', f1])\n    return model","3add32a9":"model = make_model(embedding)","eaf3c245":"model_treated = make_model(embedding_treated)","d702191c":"model.summary()","cce75508":"from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau","ad4ec5e5":"checkpoints = ModelCheckpoint('weights.hdf5', monitor=\"val_f1\", mode=\"max\", verbose=True, save_best_only=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_f1', factor=0.1, patience=2, verbose=1, min_lr=0.000001)","833f1f98":"checkpoints_treated = ModelCheckpoint('treated_weights.hdf5', monitor=\"val_f1\", mode=\"max\", verbose=True, save_best_only=True)\nreduce_lr_treated = ReduceLROnPlateau(monitor='val_f1', factor=0.1, patience=2, verbose=1, min_lr=0.000001)","105e302c":"epochs = 8\nbatch_size = 512","f8de8a04":"history = model.fit(X_train, y_train, batch_size=batch_size, epochs=epochs, \n                    validation_data=[X_val, y_val], callbacks=[checkpoints, reduce_lr])","f030327a":"plt.figure(figsize=(12,8))\nplt.plot(history.history['acc'], label='Train Accuracy')\nplt.plot(history.history['val_acc'], label='Test Accuracy')\nplt.show()","9ed671a7":"history = model_treated.fit(X_t_train, y_train, batch_size=batch_size, epochs=epochs, \n                            validation_data=[X_t_val, y_val], callbacks=[checkpoints_treated, reduce_lr_treated])","df40f8c5":"plt.figure(figsize=(12,8))\nplt.plot(history.history['acc'], label='Train Accuracy')\nplt.plot(history.history['val_acc'], label='Test Accuracy')\nplt.show()","4e536ab7":"model.load_weights('weights.hdf5')\nmodel_treated.load_weights('treated_weights.hdf5')","cd400f24":"pred_val = model.predict(X_val, batch_size=512, verbose=1)\npred_t_val = model_treated.predict(X_t_val, batch_size=512, verbose=1)","e15968d8":"from sklearn.metrics import f1_score","3ec8a9e0":"def tweak_threshold(pred, truth):\n    thresholds = []\n    scores = []\n    for thresh in np.arange(0.1, 0.501, 0.01):\n        thresh = np.round(thresh, 2)\n        thresholds.append(thresh)\n        score = f1_score(truth, (pred>thresh).astype(int))\n        scores.append(score)\n    return np.max(scores), thresholds[np.argmax(scores)]","dbeed12c":"score_val, threshold_val = tweak_threshold(pred_val, y_val)\n\nprint(f\"Scored {round(score_val, 4)} for threshold {threshold_val} with untreated texts on validation data\")","b7a61452":"score_t_val, threshold_t_val = tweak_threshold(pred_t_val, y_val)\n\nprint(f\"Scored {round(score_t_val, 4)} for threshold {threshold_t_val} with treated texts on validation data\")","c247534d":"## Loading data","fc0ea560":"#### F1 Scores","0862945c":"#### First faults appearing are : \n- Contractions \n- Words with punctuation in them\n\n> Let us correct that.","885f460b":"## Vocabulary and Coverage functions\n> Again, check Dieter's work if you haven't, those are his.","3837678a":"### What's wrong ?","d7a61142":"## Model","1ea81487":"## Data for the network\n### Texts\n#### Parameters\nI took the same for both models. len_voc can de reduced for the treated model.","9876c105":"#### Untreated text\nWe apply a standard tokenizer and padding.","31666d14":"#### If you apply lowerization, you lost a bit of informations on other embeddings :\n> Therer are words known that are known with upper letters and unknown without. Let us fix that :\n- word.lower() takes the embedding of word if word.lower() doesn't have an embedding","4a73d265":"## Results\n### Predictions","c1b161a6":"#### Treated text\nSame thing, but with no filters.","6226d576":"## Contractions","54004643":"#### Not a lot of contractions are known. (FastText knows none)\n> We use the map to replace them","b5d8cbcb":"# Improve your Score with some Text Preprocessing\n\n\nThis kernel is an improved version of @Dieter's work.\n> https:\/\/www.kaggle.com\/christofhenkel\/how-to-preprocessing-when-using-embeddings\n\nIt is the continuation of this kernel :\n> https:\/\/www.kaggle.com\/theoviel\/improve-your-score-with-some-text-preprocessing\n\n### In this version, I check the improvement of my f1-score due to the preprocessing, with a basic model.\n\n#### Any feedback is appreciated ! ","ff19d4ed":"### Conclusion : \n\nOur preprocessing helped improve the results.\nHowever, results with CuDNN layers are not reproductible, so the gain might vary a bit.\n \n ### *Thanks for reading ! *","83ae00e9":"#### Apply lowerization (necessary if using paragram)\n> Fasttext and GloVe understand capitalization, but you still win a bit.","e432b34c":"#### Some characters are unknown.\n> We use a map to replace unknown characters with known ones.\n\n> We make sure there are spaces between words and punctuation\n","3edc38f1":"#### Splitting","3546b9bb":"## Loading embeddings\n#### In this v2, I am using GloVe only, for memory usage purposes mostly.","eae83e97":"### Embeddings\nI use GloVe here, because I got better results with it than with others. But feel free to change that.","02791fbf":"## f1 metric for Keras","d072722d":"### What's still missing ? \n- Unknown words\n- Acronyms\n- Spelling mistakes\n\n## We can correct manually most frequent mispells\n\n#### For example, here are some mistakes and their frequency\n- qoura : 85 times\n- mastrubation : 38 times\n- demonitisation : 30 times\n- \u2026","0eabc7a9":"###  Callbacks","11de74ae":"### Fitting","f3c78b6c":"# Part 2 : Checking the improvement\n\n## Applying treatment\n\nI only treat train data here, because I do not intend to submit my results.","ab840e17":"## Now, let us deal with special characters","e181dd2a":" Note that we have two embedding matrices, one for each pre-treatment.","b9cd1432":"## Starting point"}}