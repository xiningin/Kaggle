{"cell_type":{"304ed487":"code","678b2de4":"code","150499d2":"code","698aa159":"code","7b5cda55":"code","c0b0ea1c":"code","d69a5933":"code","69d3b299":"code","c17c384c":"code","33c19633":"code","9a6ec37e":"code","1e9e57d6":"code","d930ac86":"code","8e846cd5":"code","9a893ef0":"code","252f3adf":"code","939bbb3e":"code","19cfd600":"code","6747b6f0":"code","fe8fc2cb":"code","93df58bf":"code","661c060b":"code","0269d65c":"code","7d649ecf":"code","d05a01ad":"code","134bea9a":"code","e132548e":"code","0cf9f9e0":"code","2d7f1913":"markdown","0a1d38b1":"markdown","603d5de8":"markdown","983f14b2":"markdown","e32a5f2a":"markdown","05c4908d":"markdown","df1c69d4":"markdown","8b255f1d":"markdown"},"source":{"304ed487":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","678b2de4":"import matplotlib.pyplot as plt\nfrom math import *\nfrom random import *\n\nx=[]\nfor i in range(100):\n    x.append(i)\ny=[]\nseed(len(x))\nfor k in range(len(x)):\n    y.append(random())\n    \nplt.plot(x,y)\nplt.title('Test !')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()","150499d2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\nprint(football)","698aa159":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nedu = pd.read_csv('\/kaggle\/input\/gswk-marinl\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\n\n#edu.head(None)\n#edu.tail(10)\n#edu.describe()\n#edu['Value']\n#edu[10:14]\n#edu.iloc[90:94][['TIME','GEO']]\n","7b5cda55":"edu.head(None)\n","c0b0ea1c":"#edu.tail(10)\n","d69a5933":"#edu.describe()\n","69d3b299":"#edu[10:14]\nedu.iloc[90:94][['TIME','GEO']]","c17c384c":"#edu['Value']>6.5\nedu[edu['Value'] > 6.5].tail()\n#edu[edu[\"Value\"].isnull()].head()","33c19633":"edu.max(axis = 0)\nprint ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))\n\n","9a6ec37e":"s = edu[\"Value\"]\/100\ns.head()","1e9e57d6":"s = edu[edu[\"Value\"]==0.0500].apply(np.sqrt)\ns.head()","d930ac86":"\ns = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","8e846cd5":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.drop('ValueNorm', axis = 1, inplace = True)\n\nedu.tail()","9a893ef0":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","252f3adf":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","939bbb3e":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","19cfd600":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","6747b6f0":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","fe8fc2cb":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","93df58bf":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","661c060b":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head(3)","0269d65c":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head(None)","7d649ecf":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","d05a01ad":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","134bea9a":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","e132548e":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","0cf9f9e0":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","2d7f1913":"- What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\n# edu['Value'] return a bolean value if the conidition set is True or False\n# edu[edu['Value'] > 6.5].tail() returns the data that respect the condition. It is a data frame.","0a1d38b1":"- Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\n\n# edu.describe() returns the number, mean, minimum, maximum, quartiles, standard deviation of both the values and the \u2018time\u2019.","603d5de8":"\n- What happens if we give a number as argument to the method head()?\n\n\n# edu.head(n) returns the n first rows of the data.\n","983f14b2":"\n- What does the method tail()return?\n\n\n# tail.head(n) returns the n last rows of the data.\n","e32a5f2a":"\n  - What do you observe regarding the parameter ascending=False?\n \n# This parameter is useless because False is the default value for 'ascending'.","05c4908d":"# **6.9**","df1c69d4":"- What does this index return? What does the first index represent? And the second one?\n\n\n# The index edu.iloc[a:b][['x','y']] returns the data from rows a to b (b excluded) of the columns x and y.[](http:\/\/)","8b255f1d":"\n   - Which is the size of the edu DataFrame (rows x columns)?\n   \n# 384 rows x 3 colums"}}