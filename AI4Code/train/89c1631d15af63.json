{"cell_type":{"b3f0af6b":"code","642f66f2":"code","ebc548ec":"code","dd516378":"code","d93386ce":"code","66dccd6d":"code","0280e924":"code","544b7dca":"code","81c1453c":"code","38c11dae":"code","0ade99de":"code","f8ac681e":"code","d19017ab":"code","6f1e6f86":"code","eaaa2266":"code","49c38e57":"code","d311502e":"code","86152cfc":"code","4e5f72bd":"code","e813e136":"code","e3258dbc":"code","875d5a1b":"code","29b4d84e":"code","768a4029":"code","673750ec":"code","c1ecd2df":"markdown","da90d51d":"markdown","8ba3c69a":"markdown","0685b51d":"markdown","aba7a2c5":"markdown","259cb4e3":"markdown","aa2373e2":"markdown"},"source":{"b3f0af6b":" #This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","642f66f2":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport re \nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import RegexpTokenizer\nimport nltk\nfrom wordcloud import WordCloud\nfrom geopy.geocoders import Nominatim\nfrom geopy.exc import GeocoderTimedOut\nimport plotly.express as px\n\nnltk.download('stopwords')\n\n\nstop_words = set(stopwords.words(\"english\"))\ndefault_stemmer = PorterStemmer()\ndefault_stopwords = stopwords.words('english')\ndefault_tokenizer=RegexpTokenizer(r\"\\w+\")","ebc548ec":"df = pd.read_csv('..\/input\/covid19-tweets\/covid19_tweets.csv')\ndf.head()","dd516378":"df = df.sample(n=2000)\ndf.head()","d93386ce":"df.shape","66dccd6d":"df.columns","0280e924":"df_columns = df.columns.tolist()","544b7dca":"dataTypeSeries = df.dtypes\nprint('Data type of each column of Dataframe :')\nprint(dataTypeSeries)","81c1453c":"df[df_columns].isnull().sum()","38c11dae":"def do_geocode(address):\n    geopy = Nominatim(user_agent='http')\n    return geopy.geocode(address,exactly_one=True, timeout=1)\n\n\n","0ade99de":"#Creating Geocoded Location column\ndf['GeocodedLocation']=df['user_location'].apply(lambda x: do_geocode(x) if x != None else None)","f8ac681e":"#Create the Latitude Column\nlat=[]\nfor i in df['GeocodedLocation']:\n    if i== None:\n        lat.append(None)\n    else:\n        lat.append(i.latitude)\ndf['Latitude']=lat\ndf['Latitude'].astype('float')","d19017ab":"#Create the Longitude Column\nlong=[]\nfor i in df['GeocodedLocation']:\n    if i== None:\n        long.append(None)\n    else:\n        long.append(i.longitude)\ndf['Longitude']=long\ndf['Longitude'].astype('float')","6f1e6f86":"#df = df.drop([\"user_location\"],axis = 1)","eaaa2266":"df.head()","49c38e57":"df['user_created'] =  pd.to_datetime(df['user_created'], format='%Y-%m-%d %H:%M:%S')","d311502e":"df['date'] =  pd.to_datetime(df['date'], format='%Y-%m-%d %H:%M:%S')","86152cfc":"df['date'] = pd.to_datetime(df['date']).dt.date\ndf['day'] = pd.to_datetime(df['date']).dt.day\ndf = df.sort_values(by='date')\n","4e5f72bd":" def clean_text(text, ):\n        if text is not None:\n        #exclusions = '|'.join(exclusions)\n                text = re.sub(r'[0-9]+','',text)\n                text =  text.lower()\n                text = re.sub('-', '', text)\n                text = re.sub('_', '', text)\n                text = re.sub('@', '', text)\n                text = re.sub(r'^https?:\\\/\\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)\n                #text = re.sub(r'\\S*@\\S*\\s?', '', text, flags=re.MULTILINE)\n        # Remove text between square brackets\n                text =re.sub('\\[[^]]*\\]', '', text)\n        # removes punctuation\n                text = re.sub(r'[^\\w\\s]','',text)\n                text = re.sub(r'\\n',' ',text)\n                text = re.sub(r'[0-9]+','',text)\n                #text = re.sub(r'[0-9]+','',text)\n        # strip html \n                p = re.compile(r'<.*?>')\n                text = re.sub(r\"\\'ve\", \" have \", text)\n                text = re.sub(r\"can't\", \"cannot \", text)\n                text = re.sub(r\"n't\", \" not \", text)\n                text = re.sub(r\"I'm\", \"I am\", text)\n                text = re.sub(r\" m \", \" am \", text)\n                text = re.sub(r\"\\'re\", \" are \", text)\n                text = re.sub(r\"\\'d\", \" would \", text)\n                text = re.sub(r\"\\'ll\", \" will \", text)\n        \n                text = p.sub('', text)\n\n        def tokenize_text(text,tokenizer=default_tokenizer):\n            token = default_tokenizer.tokenize(text)\n            return token\n        \n        def remove_stopwords(text, stop_words=default_stopwords):\n            tokens = [w for w in tokenize_text(text) if w not in stop_words]\n            return ' '.join(tokens)\n\n        def stem_text(text, stemmer=default_stemmer):\n            tokens = tokenize_text(text)\n            return ' '.join([stemmer.stem(t) for t in tokens])\n\n        text = stem_text(text) # stemming\n        text = remove_stopwords(text) # remove stopwords\n        #text.strip(' ') # strip whitespaces again?\n\n        return text","e813e136":"df['user_name'] = df['user_name'].apply(clean_text)\n","e3258dbc":"df['user_description'] = df['user_description'].replace(np.nan, '', regex=True)\ndf['user_description'] = df['user_description'].apply(clean_text)","875d5a1b":"df['text'] = df['text'].apply(clean_text)","29b4d84e":"tweet_text_list = df.text.tolist()\ntweet_text_string = ''.join(tweet_text_list)","768a4029":"wordcloud_ip = WordCloud(\n                      background_color='black',\n                      margin=3,\n                      width=1800,\n                      height=1400,\n                      max_words=200\n                     ).generate(tweet_text_string)\n\nplt.figure( figsize=(20,10) )\nplt.imshow(wordcloud_ip)","673750ec":"fig = px.scatter_geo(df,lat = df[\"Latitude\"] ,\n                     lon = df[\"Longitude\"],\n                     animation_frame=\"day\",\n                     hover_name=\"user_name\",\n                     animation_group=\"day\",\n                     #size=\"user_followers\"\n                    \n                     )\nfig.update_geos(projection_type=\"natural earth\")\nfig.show()","c1ecd2df":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">navigation<\/h3>\n\n* [1. Library](#1)\n* [2. Data reading](#2)\n* [3. Get longitude and latitude user_location column](#3)\n* [4. Data preprocessing adn Text cleaning](#4)\n* [5. Simple sentiment analysis and Create wordcloud](#5)\n* [6. geographical distribution of tweets](#6)","da90d51d":"<a id=\"1\"><\/a>\n\n# Library","8ba3c69a":"<a id=\"3\"><\/a>\n# Get longitude and latitude user_location column","0685b51d":"<a id=\"2\"><\/a>\n# Data reading","aba7a2c5":"<a id=\"6\"><\/a>\n# Geographical distribution of tweets","259cb4e3":"<a id=\"5\"><\/a>\n# Simple sentiment analysis and create world cloud","aa2373e2":"<a id=\"4\"><\/a>\n# Data preprocessing and Text cleaning "}}