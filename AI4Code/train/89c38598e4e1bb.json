{"cell_type":{"d9274207":"code","d1034fda":"code","bf816f44":"code","cfac1f6b":"code","645993c0":"code","12f0ee19":"code","4cb8d0eb":"code","e180097c":"code","3b2fde6a":"code","8599f528":"code","2381402f":"code","e0818ccd":"code","6f60c7b4":"code","167b1992":"code","1ab4218b":"code","4846ab05":"code","aea4d673":"code","4ed2911e":"code","2f4cd65c":"code","1ad551fa":"code","3bc2f623":"code","3217fcf2":"code","fafd9a5f":"code","601d3416":"code","31e398c9":"code","f59c58ec":"code","c8bbf2bf":"code","57996233":"code","f52fcd52":"code","2e61ce87":"code","ca1e8600":"code","e93864f8":"code","e57e0d94":"code","e848b1ee":"code","8f519102":"code","3aefbcfd":"code","8def33bc":"markdown","9f78c404":"markdown"},"source":{"d9274207":"pip install xlrd","d1034fda":"pip install autoviz","bf816f44":"# Import Lab\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom scipy import optimize, stats   \nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.utils import resample\nfrom sklearn.pipeline import Pipeline\nfrom keras.utils import np_utils","cfac1f6b":"df_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ndf_shops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ndf_items = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\ndf_item_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","645993c0":"df_train.head()","12f0ee19":"df_test.head()","4cb8d0eb":"df_train.info()","e180097c":"df_train.describe()","3b2fde6a":"df_train.isnull().sum()","8599f528":"df_test.isna().sum()","2381402f":"df_train","e0818ccd":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ntarget='item_price'\ndf = AV.AutoViz(filename=\"\",sep=',', depVar=target, dfte=df_train, header=0, verbose=1, \n                 lowess=False, chart_format='svg', max_rows_analyzed=150000, max_cols_analyzed=30)","6f60c7b4":"import pandas_profiling as pp\npp.ProfileReport(df_train)","167b1992":"import pandas_profiling as pp\npp.ProfileReport(df_shops)","1ab4218b":"import pandas_profiling as pp\npp.ProfileReport(df_items)","4846ab05":"import pandas_profiling as pp\npp.ProfileReport(df_test)","aea4d673":"df_train.drop(['date_block_num','item_price'], axis=1, inplace=True)","4ed2911e":"df_train.head()","2f4cd65c":"df_train['date'] = pd.to_datetime(df_train['date'], dayfirst=True)\ndf_train['date'] = df_train['date'].apply(lambda x: x.strftime('%Y-%m'))\ndf_train.head()","1ad551fa":"df = df_train.groupby(['date','shop_id','item_id']).sum()\ndf = df.pivot_table(index=['shop_id','item_id'], columns='date', values='item_cnt_day', fill_value=0)\ndf.reset_index(inplace=True)\ndf.head().T","3bc2f623":"df_test = pd.merge(df_test, df, on=['shop_id','item_id'], how='left')\ndf_test.drop(['ID', '2013-01'], axis=1, inplace=True)\ndf_test = df_test.fillna(0)\ndf_test.head().T","3217fcf2":"# split into train and test sets\nY_train = df['2015-10'].values\nX_train = df.drop(['2015-10'], axis = 1)\nX_test = df_test\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape)","fafd9a5f":"X_train, X_test, Y_train, Y_test = train_test_split( X_train, Y_train, test_size=0.20, random_state=1)","601d3416":"print(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","31e398c9":"Y_test","f59c58ec":"%time\nETR = ExtraTreesRegressor(n_estimators=100, random_state=0)\nETR.fit(X_train,Y_train)\n\nprint('Train set mse:', mean_squared_error(Y_train, ETR.predict(X_train)))\nprint('Test set mse:', mean_squared_error(Y_test, ETR.predict(X_test)))\nprint('Test set score:', ETR.score(X_train,Y_train))","c8bbf2bf":"%time\nADB= AdaBoostRegressor(random_state=0, n_estimators=100)\nADB.fit(X_train,Y_train)\n\nprint('Train set mse:', mean_squared_error(Y_train, ADB.predict(X_train)))\nprint('Test set mse:', mean_squared_error(Y_test, ADB.predict(X_test)))\nprint('Test set score:', ADB.score(X_train,Y_train))","57996233":"%time\nBYNR = linear_model.BayesianRidge()\nBYNR.fit(X_train,Y_train)\n\nprint('Train set mse:', mean_squared_error(Y_train, BYNR.predict(X_train)))\nprint('Test set mse:', mean_squared_error(Y_test, BYNR.predict(X_test)))\nprint('Test set score:', BYNR.score(X_train,Y_train))","f52fcd52":"%time\nLR = LinearRegression()\nLR.fit(X_train,Y_train)\n\nprint('Train set mse:', mean_squared_error(Y_train, LR.predict(X_train)))\nprint('Test set mse:', mean_squared_error(Y_test, LR.predict(X_test)))\nprint('Test set score:', LR.score(X_train,Y_train))","2e61ce87":"%time\nRFR = RandomForestRegressor(n_estimators = 100)\nRFR.fit(X_train,Y_train)\n\nprint('Train set mse:', mean_squared_error(Y_train, RFR.predict(X_train)))\nprint('Test set mse:', mean_squared_error(Y_test, RFR.predict(X_test)))\nprint('Test set score:', RFR.score(X_train,Y_train))","ca1e8600":"%time\nXGB = XGBRegressor(max_depth=16,n_estimators=200,seed=1)\nXGB.fit(X_train,Y_train)\n\nprint('Train set mse:', mean_squared_error(Y_train, XGB.predict(X_train)))\nprint('Test set mse:', mean_squared_error(Y_test, XGB.predict(X_test)))\nprint('Test set score:', XGB.score(X_train,Y_train))","e93864f8":"%time\nLGBM = LGBMRegressor(max_depth=16,n_estimators=200,seed=1)\nLGBM.fit(X_train,Y_train)\n\nprint('Train set mse:', mean_squared_error(Y_train, LGBM.predict(X_train)))\nprint('Test set mse:', mean_squared_error(Y_test, LGBM.predict(X_test)))\nprint('Test set score:', LGBM.score(X_train,Y_train))","e57e0d94":"prediction = XGB.predict(X_test)","e848b1ee":"prediction[5]","8f519102":"prediction = list(map(round, prediction))","3aefbcfd":"score_1 = 0.76 \nscore_2 = 0.87\nscore_3 = 0.43\nscore_4 = 0.43\nscore_5 = 0.88\nscore_6 = 0.99\nscore_7 = 0.70 \n\nresults = pd.DataFrame([[\"ExtraTreesRegressor\",score_1],[\"AdaBoostRegressor\",score_2],[\" BayesianRidge\",score_3],\n                       [\"LinearRegression\",score_4],[\"RandomForestRegressor\",score_5],\n                       [\"XGBRegressor\",score_6],[\"RLGBMRegressor\",score_7]],\n                        columns = [\"Models\",\"Score\"]).sort_values(by='Score',ascending=False)\n\n\nresults.style.background_gradient(cmap='Blues')","8def33bc":"# 7 Algorithms Regression\n\n#### We use 7 algorithms regression\n\n* ExtraTrees Regressor\n* AdaBoost Regressor\n* Bayesian Ridge\n* Linear Regression \n* Random Forest Regressor\n* XGB Regressor\n* LGBM Regressor\n\n\n\n\n\n<img src=\"https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/bigstock-175575391.jpg\" width=\"800px\">\n\n\n\n**References Link**\n\n\n##### [Here](https:\/\/scikit-learn.org\/stable\/modules\/svm.html#regression)\n","9f78c404":"## Data Description\n\n### File descriptions\n\n* sales_train.csv - the training set. Daily historical data from January 2013 to October 2015.\n* test.csv - the test set. You need to forecast the sales for these shops and products for November 2015.\n* sample_submission.csv - a sample submission file in the correct format.\n* items.csv - supplemental information about the items\/products.\n* item_categories.csv  - supplemental information about the items categories.\n* shops.csv- supplemental information about the shops.\n\n\n\n### Data fields\n* ID - an Id that represents a (Shop, Item) tuple within the test set\n* shop_id - unique identifier of a shop\n* item_id - unique identifier of a product\n* item_category_id - unique identifier of item category\n* item_cnt_day - number of products sold. You are predicting a monthly amount of this measure\n* item_price - current price of an item\n* date - date in format dd\/mm\/yyyy\n* date_block_num - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\n* item_name - name of item\n* shop_name - name of shop\n* item_category_name - name of item category\n\n\n### Dataset Link\n\n\n\n#### [Here](https:\/\/www.kaggle.com\/c\/competitive-data-science-predict-future-sales\/data)"}}