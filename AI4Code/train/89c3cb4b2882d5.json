{"cell_type":{"771e94e5":"code","107ddc88":"code","c754eb13":"code","fc59396b":"code","0690e7b9":"code","03464787":"code","21364ba8":"code","6791366c":"code","d6438b43":"code","14f209e7":"code","69c01176":"code","c8c9ac76":"code","93125b78":"code","1146c3cd":"code","782d3cbb":"code","f774463c":"code","39231acc":"code","8a05aaaa":"code","b06a4250":"code","26ac15ed":"code","ea558961":"code","30f5f356":"code","a102c149":"code","083399b4":"code","19b03f7a":"code","6c71c06c":"code","490c7710":"code","319c008a":"code","c9385215":"code","306f3ad1":"code","92038de6":"code","0e915b2d":"code","d42705fa":"markdown","552efa32":"markdown","923acade":"markdown","77ca355d":"markdown","e0434ddb":"markdown","18872047":"markdown","3bbb8edb":"markdown","64ea7c8d":"markdown","5609df8e":"markdown","cfe73185":"markdown","8de04354":"markdown","0fce4038":"markdown","c97238ea":"markdown","3ef87318":"markdown","aa9526f3":"markdown","fc657c29":"markdown","2a2d8e31":"markdown","f1020704":"markdown","c335e359":"markdown","9fd20e51":"markdown","baebcc92":"markdown","c772245c":"markdown","3695a439":"markdown","9a6ff7ad":"markdown"},"source":{"771e94e5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport warnings\nwarnings.filterwarnings('ignore')","107ddc88":"data = pd.read_csv(\"..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv\")\ndata.head()","c754eb13":"df = data.drop('img_name', axis=1)\ndf.head()","fc59396b":"def basic_eda(df):\n    print(\"\\n Shape: \")\n    print(df.shape)\n    print(\"\\n\\n --------- \")\n    print(\"\\n Number of null values: \")\n    print(df.isnull().sum())\n    print(\"\\n\\n --------- \")\n    print(\"\\n Value count of age: \")\n    print(df['age'].value_counts())\n    print(\"\\n\\n --------- \")\n    print(\"\\n Value count of ethnicity: \")\n    print(df['ethnicity'].value_counts())\n    print(\"\\n\\n --------- \")\n    print(\"\\n Value count of gender: \")\n    print(df['gender'].value_counts())","0690e7b9":"basic_eda(df)","03464787":"# Dividing target variables\ncolumns = [\"age\", \"gender\", \"ethnicity\"]\ny = df.drop(\"pixels\", axis=1)\nX = df.drop(columns, axis=1)","21364ba8":"X.head()","6791366c":"y.head()","d6438b43":"y.nunique()","14f209e7":"for i in y.columns:\n    plt.figure(figsize=(15,7))\n    g = sns.countplot(y[i], palette=\"icefire\")\n    plt.title(\"Number of {}\".format(i))","69c01176":"y[\"age\"] = pd.cut(y[\"age\"],bins=[0,3,18,45,64,116],labels=[\"0\",\"1\",\"2\",\"3\",\"4\"])\nplt.figure(figsize=(15,7))\ng = sns.countplot(y[\"age\"], palette=\"icefire\")\nplt.title(\"Number of age\")","c8c9ac76":"num_pixels = len(X['pixels'][0].split(\" \"))\nimg_height = int(np.sqrt(len(X['pixels'][0].split(\" \"))))\nimg_width = int(np.sqrt(len(X['pixels'][0].split(\" \"))))\nprint(num_pixels, img_height, img_width)\n","93125b78":"X = pd.Series(X['pixels'])\nX = X.apply(lambda x:x.split(' '))\nX = X.apply(lambda x:np.array(list(map(lambda z:np.int(z), x))))\nX = np.array(X)\nX = np.stack(np.array(X), axis=0)\n\n# reshape data\nX = X.reshape(-1, 48, 48, 1)\nprint(\"X shape: \", X.shape)","1146c3cd":"plt.figure(figsize=(16,16))\nfor i,a in zip(np.random.randint(0, 23705, 25), range(1,26)):\n    plt.subplot(5,5,a)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X[i])\n    plt.xlabel(\n    \"Age: \"+str(y['age'].iloc[i])+\n    \" Ethnicity:\"+str(y['ethnicity'].iloc[i])+\n    \" Gender:\"+str(y['gender'].iloc[i]))\nplt.show()","782d3cbb":"from sklearn.metrics import confusion_matrix\nimport itertools\nimport tensorflow as tf\nimport plotly.express as px\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.utils import to_categorical # convert to one-hot-encoding\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, InputLayer\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom tensorflow.keras.losses import BinaryCrossentropy, SparseCategoricalCrossentropy","f774463c":"age_matrix = np.array(y['age'])\ngender_matrix = np.array(y['gender'])\nethnicity_matrix = np.array(y['ethnicity'])\nage = to_categorical(age_matrix, num_classes = 5)\ngender = to_categorical(y[\"gender\"], num_classes = 2)\nethnicity = to_categorical(ethnicity_matrix, num_classes = 5)\nprint(age, gender, ethnicity)","39231acc":"X = X \/ 255\nX = X \/ 255","8a05aaaa":"datagen = ImageDataGenerator(\n        featurewise_center = False,\n    # set input mean to 0 over the dataset\n       samplewise_center = False,\n    # set each sample mean to 0 \n       featurewise_std_normalization = False,\n    # divide inputs by std of the dataset\n       samplewise_std_normalization=False,  \n    # divide each input by its std\n       zca_whitening=False,\n    # dimesion reduction\n       rotation_range=5, \n    # randomly rotate images in the range 5 degrees\n       zoom_range = 0.1,\n    # Randomly zoom image 10%\n       width_shift_range=0.1, \n    # randomly shift images horizontally 10%\n       height_shift_range=0.1,  \n    # randomly shift images vertically 10%\n       horizontal_flip=False,  \n    # randomly flip images\n        vertical_flip=False  # randomly flip images\n)\n\ndatagen.fit(X)","b06a4250":"# Ethnicity\nfrom sklearn.model_selection import train_test_split\nX_train_ethnicity, X_test_ethnicity, y_train_ethnicity, y_test_ethnicity = train_test_split(X,ethnicity, test_size=0.3, random_state=42)\n\n# Gender\nX_train_gender, X_test_gender, y_train_gender, y_test_gender = train_test_split(X, gender, test_size=0.3, random_state=42)\n\n# Age\nX_train_age, X_test_age, y_train_age, y_test_age = train_test_split(X, age, test_size=0.3, random_state=42)","26ac15ed":"print(X_train_ethnicity.shape, X_train_gender.shape, X_train_age.shape)","ea558961":"def my_model(num_classes, activation, loss):\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', padding = \"same\", input_shape=(48,48,1)))\n    model.add(BatchNormalization())\n    model.add(MaxPool2D(pool_size=(2,2)))\n    model.add(Dropout(0.2))\n    model.add(Conv2D(64, kernel_size=(3,3),activation=\"relu\",padding=\"same\"))\n    model.add(BatchNormalization())\n    model.add(MaxPool2D(pool_size=(2,2)))\n    model.add(Dropout(0.2))\n    model.add(Conv2D(64, kernel_size=(3,3),activation=\"relu\",padding=\"same\"))\n    model.add(BatchNormalization())\n    model.add(MaxPool2D(pool_size=(2,2)))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(256,activation=\"relu\"))\n    model.add(Dense(num_classes, activation=activation))\n    \n    model.compile(optimizer='Adam',\n              loss= loss,\n              metrics=['accuracy'])\n    return model","30f5f356":"early_stopping = EarlyStopping(patience=10, \n                               min_delta=0.001,\n                               restore_best_weights=True)\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                           patience = 2,\n                                           verbose=1,\n                                           factor=0.5,\n                                           min_lr = 0.00001)","a102c149":"epochs = 500  # for better result increase the epochs\nbatch_size = 64\nmodel_ethnicity = my_model(5,\"softmax\",'categorical_crossentropy')\nhistory_ethnicity = model_ethnicity.fit(X_train_ethnicity, y_train_ethnicity, batch_size=batch_size,\n                              epochs = epochs, validation_data = (X_test_ethnicity,y_test_ethnicity), steps_per_epoch= X_train_ethnicity.shape[0] \/\/ batch_size, callbacks= [early_stopping, learning_rate_reduction])","083399b4":"import plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)","19b03f7a":"fig = px.line(\n    history_ethnicity.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}, \n    title='Training History')\nfig.show()","6c71c06c":"loss, acc = model_ethnicity.evaluate(X_test_ethnicity, y_test_ethnicity, verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","490c7710":"model_age = my_model(5,\"softmax\",'categorical_crossentropy')\nhistory_age = model_age.fit(X_train_age, y_train_age, batch_size=batch_size,\n                              epochs = epochs, validation_data = (X_test_age,y_test_age), \n                            steps_per_epoch= X_train_age.shape[0] \/\/ batch_size, \n                            callbacks= [early_stopping, \n                            learning_rate_reduction])","319c008a":"fig = px.line(\n    history_age.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}, \n    title='Training History')\nfig.show()","c9385215":"loss, acc = model_age.evaluate(X_test_age, y_test_age, verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","306f3ad1":"model_gender = my_model(2, \"sigmoid\", \"binary_crossentropy\")\nhistory_gender = model_gender.fit(X_train_gender, y_train_gender, \n                                 batch_size = batch_size,\n                                 epochs = epochs,\n                                 validation_data = (X_test_gender, y_test_gender),\n                                 steps_per_epoch = X_train_gender.shape[0] \/\/ batch_size, callbacks=[early_stopping,learning_rate_reduction])\n","92038de6":"fx = px.line(\n    history_gender.history, y=[\"loss\", \"val_loss\"],\n    labels = {'index':'epoch', 'value':'loss'},\n    title = 'Training History')\n\nfig.show()","0e915b2d":"loss, acc = model_gender.evaluate(X_test_gender, y_test_gender, verbose=0)\nprint(\"Test loss: {}\".format(loss))\nprint(\"Test Accuracy: {}\".format(acc))","d42705fa":"### Plotting model performance","552efa32":"## Analyzing and cleaning the data","923acade":"## Callbacks","77ca355d":"## Done","e0434ddb":"### Loss and Accuracy","18872047":"## Image Data Generator","3bbb8edb":"## Building Neural Networks for AGE, GENDER AND ETHNICITY","64ea7c8d":"Loading a dataset","5609df8e":"### Loss & Accuracy","cfe73185":"## Building CNN Model","8de04354":"##  Normalize the data","0fce4038":"## Categorizing target values","c97238ea":"### Plotting model performance","3ef87318":"## Data distributio with visualization","aa9526f3":"## Image shape","fc657c29":"## Importing essential libraries","2a2d8e31":"## Reshape data","f1020704":"# Face detection on the basis of age, gender and ethnicity","c335e359":"# Ethnicity Prediction","9fd20e51":"### Loss & Accuracy","baebcc92":"## Train Test Split","c772245c":"## Age Prediction","3695a439":"## Image Overview","9a6ff7ad":"# Gender Prediction"}}