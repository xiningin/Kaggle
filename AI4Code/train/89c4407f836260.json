{"cell_type":{"39d352a2":"code","1c11e844":"code","bddddde0":"code","2a7f0bc0":"code","6e63e133":"code","7995fc09":"code","8f6d9fc7":"code","244320ed":"code","852ed71c":"code","95cfcf6d":"code","4f8da672":"code","ec95e4b7":"code","e7eb581c":"markdown","1db4b512":"markdown","2b5cfcdc":"markdown","97a8c3dd":"markdown","cdfc6e80":"markdown","f5e2f5f5":"markdown"},"source":{"39d352a2":"from pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm","1c11e844":"DATA_ROOT = Path('\/kaggle\/input\/house-prices-advanced-regression-techniques\/')\nTRAIN_CSV = DATA_ROOT \/ 'train.csv'\nTEST_CSV = DATA_ROOT \/ 'test.csv'\n\nLR = 1e-2\nEPOCHS = 10000","bddddde0":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","2a7f0bc0":"data = train_df[['LotFrontage', 'SalePrice']]\ndata = data.dropna()\nX = data.iloc[:, 0].tolist()\ny = data.iloc[:, 1].tolist()","6e63e133":"fig, ax = plt.subplots(figsize=(16, 8))\n\nax.scatter(X, y)\nplt.show()","7995fc09":"min_X = min(X)\nmax_X = max(X)\n\nnumerator = [X_i - min_X for X_i in X]\ndenominator = max_X - min_X\n\nX = [item \/ denominator for item in numerator]","8f6d9fc7":"def infer(X, W):\n    y_hat = W[0] * X + W[1]\n    \n    return y_hat\n\n\ndef compute_loss(X, y, W):\n    bs = len(X)\n    E = 0\n    \n    for X_i, y_i in zip(X, y):\n        y_hat_i = infer(X_i, W)\n        \n        err = (y_hat_i - y_i) ** 2\n        E += err\n\n    L = (1 \/ (2 * bs)) * E\n\n    return L\n\n\ndef update_weights(X, y, W, lr, epochs):\n    bs = len(X)\n    L_history = []\n\n    for epoch in tqdm(range(epochs)):\n        grad_w0 = 0\n        grad_w1 = 0\n        \n        for X_i, y_i in zip(X, y):\n            y_hat_i = infer(X_i, W)\n            grad_w0_i = (y_hat_i - y_i) * X_i\n            grad_w1_i = y_hat_i - y_i\n            \n            grad_w0 += grad_w0_i\n            grad_w1 += grad_w1_i\n            \n        W[0] -= lr * (1 \/ bs) * grad_w0\n        W[1] -= lr * (1 \/ bs) * grad_w1\n        \n        L = compute_loss(X, y, W)\n        \n        L_history.append(L)\n        \n    return W, L_history","244320ed":"W = [0, 0]","852ed71c":"W, L_history = update_weights(X, y, W, LR, EPOCHS)","95cfcf6d":"print(f'New weights: {W}')","4f8da672":"fig, ax = plt.subplots(figsize=(16, 8))\n\nax.plot(L_history)\nplt.show()","ec95e4b7":"fig, ax = plt.subplots(figsize=(16, 8))\n\nax.scatter(X, y)\nax.plot(W, 'r--')\nplt.show()","e7eb581c":"# Import libraries","1db4b512":"# Define helper-functions","2b5cfcdc":"# Preprocess data","97a8c3dd":"# Initialize weights","cdfc6e80":"# Configure hyper-parameters","f5e2f5f5":"# Load data"}}