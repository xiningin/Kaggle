{"cell_type":{"42956263":"code","fca036b7":"code","533ecea1":"code","a886a152":"code","46e16bc5":"code","739ba403":"code","f3641392":"code","75764fa7":"code","e350c51e":"code","7543eb3d":"code","031b8f34":"code","cb9cdb2e":"code","bb03f111":"code","8e3677c2":"code","8a1bdc45":"code","748c66ab":"code","2a2e87fd":"code","aec28323":"code","10f3146b":"code","9164f1a4":"code","0487c2b2":"code","41ed79cc":"code","2fd6f2c6":"code","80b2f6fd":"code","b4dc673e":"code","98d002f3":"code","707168bb":"code","9ea1e644":"code","3e88f83d":"code","c880388a":"code","c5b5f614":"code","1ae8b9d1":"code","a1d65e86":"code","4d0c8561":"code","43c8b3f8":"code","d71bf4c2":"code","1dad94b5":"code","4d917676":"code","ac872f28":"code","4d49d7fe":"code","f66198b8":"code","33ab1819":"code","e3f0b1e8":"code","42054805":"code","1ab2eab5":"code","d18bc814":"code","3740b186":"code","1ea0449f":"code","659f978a":"code","d6164334":"code","931b7bef":"code","d71850fa":"code","f7f12712":"code","0ddaef75":"code","28d3a0e5":"code","3cfca8a1":"code","14e3999e":"code","c022b387":"code","b73cc0fd":"code","f0eaf86b":"code","55be33c0":"code","0583df5e":"code","1a6ccab0":"code","13fcd585":"code","abe3245b":"code","b932b229":"code","136a784c":"code","ca9493db":"code","09ecf4f3":"code","878af6af":"code","4048d8dd":"code","682b72e7":"code","f6c60235":"code","19cc3278":"code","84ba39dd":"code","82499f9a":"code","2b4e809d":"code","c1f89e04":"code","cddefb5a":"code","19caeaba":"code","6d5d6965":"code","994f41ee":"code","8ffa9594":"code","6e99d713":"code","f817d697":"code","b681e968":"code","3c06c089":"code","9d07e3cf":"code","b79fb853":"code","ecadd827":"code","87c0a6c7":"code","efd21a79":"code","efc63cac":"code","053720f0":"code","876b03dd":"code","f29bb889":"code","d77a0210":"code","2ea88b86":"code","c6d37f6c":"code","dcc90249":"code","5171a58b":"markdown","687802fa":"markdown","df028bdd":"markdown","7cf70054":"markdown","fb096f61":"markdown","6f09ba00":"markdown","5a99c89f":"markdown","ed854053":"markdown","ca620b3e":"markdown","e99404da":"markdown","0bf8f032":"markdown","5fec783c":"markdown","a72bf338":"markdown"},"source":{"42956263":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fca036b7":"df_train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\ndf_test = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","533ecea1":"df_train.shape","a886a152":"df_train.columns","46e16bc5":"df_train.describe()","739ba403":"# taken from: https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n\n#missing data\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","f3641392":"df_train.drop(columns = ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'LotFrontage'], axis = 1, inplace=True)\n\nyear_median = df_train[\"GarageYrBlt\"].median()\narea_mean = df_train[\"MasVnrArea\"].mean()\n\n\ndf_train[\"GarageYrBlt\"] = df_train[\"GarageYrBlt\"].fillna(year_median)\ndf_train[\"MasVnrArea\"] = df_train[\"MasVnrArea\"].fillna(area_mean)\ndf_train[\"MasVnrType\"] = df_train[\"MasVnrType\"].fillna(\"BrkFace\")\ndf_train[\"Electrical\"] = df_train[\"Electrical\"].fillna(\"SBrkr\")\n","75764fa7":"df_train.shape","e350c51e":"df_train[\"GarageType\"] = df_train[\"GarageType\"].astype(\"str\")\ndf_train[\"GarageCond\"] = df_train[\"GarageCond\"].astype(\"str\")\ndf_train[\"GarageFinish\"] = df_train[\"GarageFinish\"].astype(\"str\")\ndf_train[\"GarageQual\"] = df_train[\"GarageQual\"].astype(\"str\")\ndf_train[\"BsmtFinType2\"] = df_train[\"BsmtFinType2\"].astype(\"str\")\ndf_train[\"BsmtExposure\"] = df_train[\"BsmtExposure\"].astype(\"str\")\ndf_train[\"BsmtCond\"] = df_train[\"BsmtCond\"].astype(\"str\")\ndf_train[\"BsmtQual\"] = df_train[\"BsmtQual\"].astype(\"str\")\ndf_train[\"BsmtFinType1\"] = df_train[\"BsmtFinType1\"].astype(\"str\")\n","7543eb3d":"df_test[\"GarageType\"] = df_test[\"GarageType\"].astype(\"str\")\ndf_test[\"GarageCond\"] = df_test[\"GarageCond\"].astype(\"str\")\ndf_test[\"GarageFinish\"] = df_test[\"GarageFinish\"].astype(\"str\")\ndf_test[\"GarageQual\"] = df_test[\"GarageQual\"].astype(\"str\")\ndf_test[\"BsmtFinType2\"] = df_test[\"BsmtFinType2\"].astype(\"str\")\ndf_test[\"BsmtExposure\"] = df_test[\"BsmtExposure\"].astype(\"str\")\ndf_test[\"BsmtCond\"] = df_test[\"BsmtCond\"].astype(\"str\")\ndf_test[\"BsmtQual\"] = df_test[\"BsmtQual\"].astype(\"str\")\ndf_test[\"BsmtFinType1\"] = df_test[\"BsmtFinType1\"].astype(\"str\")","031b8f34":"from sklearn.preprocessing import LabelEncoder\n\nlabel = LabelEncoder()\n\ndf_train[\"GarageType\"] = label.fit_transform(df_train[\"GarageType\"])\ndict(zip(label.classes_, range(1, len(label.classes_)+1)))\ndf_test[\"GarageType\"] = label.fit_transform(df_test[\"GarageType\"])","cb9cdb2e":"mapping = {\"Ex\":6,\n           \"Gd\":5,\n           \"TA\":4,\n           \"Fa\":3,\n           \"Po\":2,\n           \"nan\":1}\n\ndf_train[\"GarageCond\"] = df_train[\"GarageCond\"].apply(lambda x : mapping[x])\ndf_test[\"GarageCond\"] = df_test[\"GarageCond\"].apply(lambda x : mapping[x])","bb03f111":"mapping = {\"Fin\":4,\n           \"RFn\":3,\n           \"Unf\":2,\n           \"nan\":1}\n           \ndf_train[\"GarageFinish\"] = df_train[\"GarageFinish\"].apply(lambda x : mapping[x])\ndf_test[\"GarageFinish\"] = df_test[\"GarageFinish\"].apply(lambda x : mapping[x])","8e3677c2":"mapping = {\"Ex\":6,\n           \"Gd\":5,\n           \"TA\":4,\n           \"Fa\":3,\n           \"Po\":2,\n           \"nan\":1}\n           \ndf_train[\"GarageQual\"] = df_train[\"GarageQual\"].apply(lambda x : mapping[x])\ndf_test[\"GarageQual\"] = df_test[\"GarageQual\"].apply(lambda x : mapping[x])","8a1bdc45":"mapping = {\"GLQ\":7,\n           \"ALQ\":6,\n           \"BLQ\":5,\n           \"Rec\":4,\n           \"LwQ\":3,\n           \"Unf\":2,\n           \"nan\":1}\n           \ndf_train[\"BsmtFinType2\"] = df_train[\"BsmtFinType2\"].apply(lambda x : mapping[x])\ndf_test[\"BsmtFinType2\"] = df_test[\"BsmtFinType2\"].apply(lambda x : mapping[x])","748c66ab":"mapping = {\"Gd\":5,\n           \"Av\":4,\n           \"Mn\":3,\n           \"No\":2,\n           \"nan\":1}\n           \ndf_train[\"BsmtExposure\"] = df_train[\"BsmtExposure\"].apply(lambda x : mapping[x])\ndf_test[\"BsmtExposure\"] = df_test[\"BsmtExposure\"].apply(lambda x : mapping[x])","2a2e87fd":"mapping = {\"GLQ\":7,\n           \"ALQ\":6,\n           \"BLQ\":5,\n           \"Rec\":4,\n           \"LwQ\":3,\n           \"Unf\":2,\n           \"nan\":1}\n           \ndf_train[\"BsmtFinType1\"] = df_train[\"BsmtFinType1\"].apply(lambda x : mapping[x])\ndf_test[\"BsmtFinType1\"] = df_test[\"BsmtFinType1\"].apply(lambda x : mapping[x])","aec28323":"mapping = {\"Ex\":6,\n           \"Gd\":5,\n           \"TA\":4,\n           \"Fa\":3,\n           \"Po\":2,\n           \"nan\":1}\n           \ndf_train[\"BsmtCond\"] = df_train[\"BsmtCond\"].apply(lambda x : mapping[x])\ndf_test[\"BsmtCond\"] = df_test[\"BsmtCond\"].apply(lambda x : mapping[x])","10f3146b":"mapping = {\"Ex\":6,\n           \"Gd\":5,\n           \"TA\":4,\n           \"Fa\":3,\n           \"Po\":2,\n           \"nan\":1}\n           \ndf_train[\"BsmtQual\"] = df_train[\"BsmtQual\"].apply(lambda x : mapping[x])\ndf_test[\"BsmtQual\"] = df_test[\"BsmtQual\"].apply(lambda x : mapping[x])","9164f1a4":"df_garage = df_train[[\"GarageType\",\"GarageCond\",\"GarageYrBlt\",\"GarageFinish\",\"GarageQual\",\"GarageCars\",\"GarageArea\"]]\n\ndf_basement = df_train[[\"BsmtFinType2\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtCond\",\"BsmtQual\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\"]]","0487c2b2":"plt.figure(figsize=(16,10))\n\ncorr = df_basement.corr()\nax = sns.heatmap(\n    corr,\n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)\n\nplt.show()","41ed79cc":"df_train.drop(columns = [\"BsmtUnfSF\", \"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtExposure\",\"BsmtQual\"], axis = 1, inplace=True)","2fd6f2c6":"plt.figure(figsize=(16,10))\n\ncorr = df_garage.corr()\nax = sns.heatmap(\n    corr,\n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)\n\nplt.show()","80b2f6fd":"df_train.drop(columns = [\"GarageQual\", \"GarageCars\",\"GarageFinish\"], axis = 1, inplace=True)","b4dc673e":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(5)","98d002f3":"df_train.columns","707168bb":"# taken from: https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n#saleprice correlation matrix\nplt.figure(figsize=(10,10))\nk = 10 #number of variables for heatmap\ncorrmat = df_train.corr()\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","9ea1e644":"df_train[\"TotalSF\"] = df_train[\"TotalBsmtSF\"] + df_train[\"1stFlrSF\"] + df_train[\"2ndFlrSF\"]\n\ndf_test[\"TotalSF\"] = df_test[\"TotalBsmtSF\"] + df_test[\"1stFlrSF\"] + df_test[\"2ndFlrSF\"]","3e88f83d":"df_train.drop(columns = [\"1stFlrSF\", \"2ndFlrSF\", \"TotalBsmtSF\"], axis = 1, inplace=True)","c880388a":"data = pd.concat([df_train['SalePrice'], df_train['GrLivArea']], axis=1)\ndata.plot.scatter(x='GrLivArea', y='SalePrice');","c5b5f614":"df_train.sort_values(by = 'GrLivArea', ascending = False)[:2] #id's are 1299 and 524\ndf_train = df_train.drop(df_train[df_train['Id'] == 1299].index)\ndf_train = df_train.drop(df_train[df_train['Id'] == 524].index)","1ae8b9d1":"data = pd.concat([df_train['SalePrice'], df_train['TotalSF']], axis=1)\ndata.plot.scatter(x='TotalSF', y='SalePrice');","a1d65e86":"#\u00a0https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","4d0c8561":"sns.displot(df_train['SalePrice'],kde=True)","43c8b3f8":"# After log transformation\ndf_train['SalePrice'] = np.log(df_train['SalePrice'])\nsns.displot(df_train['SalePrice'],kde=True)","d71bf4c2":"sns.displot(df_train['GrLivArea'],kde=True)","1dad94b5":"# After log transformation\ndf_train['GrLivArea'] = np.log(df_train['GrLivArea'])\nsns.displot(df_train['GrLivArea'],kde=True)","4d917676":"sns.displot(df_train['TotalSF'],kde=True)","ac872f28":"result = np.where( df_train['TotalSF'] > 0.0000000001, df_train['TotalSF'], -10)\n\n# After log transformation\ndf_train['TotalSF'] = np.log(result)\nsns.displot(df_train['TotalSF'],kde=True)\n","4d49d7fe":"df_train[\"MSSubClass\"].value_counts()","f66198b8":"df_train[\"MSSubClass\"] = df_train[\"MSSubClass\"].astype(\"str\")","33ab1819":"# taken from: https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew \n\nnumeric_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = df_train[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","e3f0b1e8":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))","42054805":"skewed_features = skewness.index\n\ncount = 0\nfor feature in skewed_features:\n    df_train[feature] = np.log(df_train[feature])\n    count += 1\n\nprint(\"Transfromed \", count, \" features.\")","1ab2eab5":"df_train.columns","d18bc814":"categoric_feats = df_train.dtypes[df_train.dtypes == \"object\"].index\ncategoric_feats","3740b186":"mapping = {\"Reg\":4,\"IR1\":3,\"IR2\":2,\"IR3\":1}\n          \ndf_train[\"LotShape\"] = df_train[\"LotShape\"].apply(lambda x : mapping[x])\ndf_test[\"LotShape\"] = df_test[\"LotShape\"].apply(lambda x : mapping[x])","1ea0449f":"df_test[\"Utilities\"].fillna(\"AllPub\")","659f978a":"mapping = {\"AllPub\":4,\"NoSewr\":3,\"NoSeWa\":2,\"ELO\":1,np.nan:0}\n          \ndf_train[\"Utilities\"] = df_train[\"Utilities\"].apply(lambda x : mapping[x])\ndf_test[\"Utilities\"] = df_test[\"Utilities\"].apply(lambda x : mapping[x])","d6164334":"mapping = {\"Gtl\":3,\"Mod\":2,\"Sev\":1}\n          \ndf_train[\"LandSlope\"] = df_train[\"LandSlope\"].apply(lambda x : mapping[x])\ndf_test[\"LandSlope\"] = df_test[\"LandSlope\"].apply(lambda x : mapping[x])","931b7bef":"mapping = {\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1}\n          \ndf_train[\"ExterQual\"] = df_train[\"ExterQual\"].apply(lambda x : mapping[x])\ndf_test[\"ExterQual\"] = df_test[\"ExterQual\"].apply(lambda x : mapping[x])","d71850fa":"mapping = {\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1}\n\ndf_train[\"ExterCond\"] = df_train[\"ExterCond\"].apply(lambda x : mapping[x])\ndf_test[\"ExterCond\"] = df_test[\"ExterCond\"].apply(lambda x : mapping[x])","f7f12712":"df_test[\"KitchenQual\"].fillna(\"TA\", inplace=True)","0ddaef75":"df_test[\"KitchenQual\"].isnull().sum()","28d3a0e5":"mapping = {\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1}\n\ndf_train[\"KitchenQual\"] = df_train[\"KitchenQual\"].apply(lambda x : mapping[x])\ndf_test[\"KitchenQual\"] = df_test[\"KitchenQual\"].apply(lambda x : mapping[x])","3cfca8a1":"df_test[\"Functional\"].fillna(\"Typ\", inplace=True)","14e3999e":"mapping = {\"Typ\":8,\"Min1\":7,\"Min2\":6,\"Mod\":5,\"Maj1\":4,\"Maj2\":3,\"Sev\":2,\"Sal\":1}\n          \ndf_train[\"Functional\"] = df_train[\"Functional\"].apply(lambda x : mapping[x])\ndf_test[\"Functional\"] = df_test[\"Functional\"].apply(lambda x : mapping[x])","c022b387":"mapping = {\"Y\":3,\"P\":2,\"N\":1}\n          \ndf_train[\"PavedDrive\"] = df_train[\"PavedDrive\"].apply(lambda x : mapping[x])\ndf_test[\"PavedDrive\"] = df_test[\"PavedDrive\"].apply(lambda x : mapping[x])","b73cc0fd":"df_train[\"MSSubClass\"] = label.fit_transform(df_train[\"MSSubClass\"])\ndf_train[\"MSZoning\"] = label.fit_transform(df_train[\"MSZoning\"])\ndf_train[\"Street\"] = label.fit_transform(df_train[\"Street\"])\ndf_train[\"LandContour\"] = label.fit_transform(df_train[\"LandContour\"])\ndf_train[\"LotConfig\"] = label.fit_transform(df_train[\"LotConfig\"])\ndf_train[\"Neighborhood\"] = label.fit_transform(df_train[\"Neighborhood\"])\ndf_train[\"Condition1\"] = label.fit_transform(df_train[\"Condition1\"])\ndf_train[\"Condition2\"] = label.fit_transform(df_train[\"Condition2\"])\ndf_train[\"BldgType\"] = label.fit_transform(df_train[\"BldgType\"])\ndf_train[\"HouseStyle\"] = label.fit_transform(df_train[\"HouseStyle\"])\ndf_train[\"RoofStyle\"] = label.fit_transform(df_train[\"RoofStyle\"])\ndf_train[\"RoofMatl\"] = label.fit_transform(df_train[\"RoofMatl\"])\ndf_train[\"Exterior1st\"] = label.fit_transform(df_train[\"Exterior1st\"])\ndf_train[\"Exterior2nd\"] = label.fit_transform(df_train[\"Exterior2nd\"])\ndf_train[\"MasVnrType\"] = label.fit_transform(df_train[\"MasVnrType\"])\ndf_train[\"HeatingQC\"] = label.fit_transform(df_train[\"HeatingQC\"])\ndf_train[\"Foundation\"] = label.fit_transform(df_train[\"Foundation\"])\ndf_train[\"Heating\"] = label.fit_transform(df_train[\"Heating\"])\ndf_train[\"CentralAir\"] = label.fit_transform(df_train[\"CentralAir\"])\ndf_train[\"Electrical\"] = label.fit_transform(df_train[\"Electrical\"])\ndf_train[\"SaleType\"] = label.fit_transform(df_train[\"SaleType\"])\ndf_train[\"SaleCondition\"] = label.fit_transform(df_train[\"SaleCondition\"])","f0eaf86b":"df_test[\"MSZoning\"] = df_test[\"MSZoning\"].astype(\"str\")\ndf_test[\"Exterior1st\"] = df_test[\"Exterior1st\"].astype(\"str\")\ndf_test[\"Exterior2nd\"] = df_test[\"Exterior2nd\"].astype(\"str\")\ndf_test[\"MasVnrType\"] = df_test[\"MasVnrType\"].astype(\"str\")\ndf_test[\"SaleType\"] = df_test[\"SaleType\"].astype(\"str\")","55be33c0":"df_test[\"MSSubClass\"] = label.fit_transform(df_test[\"MSSubClass\"])\ndf_test[\"MSZoning\"] = label.fit_transform(df_test[\"MSZoning\"])\ndf_test[\"Street\"] = label.fit_transform(df_test[\"Street\"])\ndf_test[\"LandContour\"] = label.fit_transform(df_test[\"LandContour\"])\ndf_test[\"LotConfig\"] = label.fit_transform(df_test[\"LotConfig\"])\ndf_test[\"Neighborhood\"] = label.fit_transform(df_test[\"Neighborhood\"])\ndf_test[\"Condition1\"] = label.fit_transform(df_test[\"Condition1\"])\ndf_test[\"Condition2\"] = label.fit_transform(df_test[\"Condition2\"])\ndf_test[\"BldgType\"] = label.fit_transform(df_test[\"BldgType\"])\ndf_test[\"HouseStyle\"] = label.fit_transform(df_test[\"HouseStyle\"])\ndf_test[\"RoofStyle\"] = label.fit_transform(df_test[\"RoofStyle\"])\ndf_test[\"RoofMatl\"] = label.fit_transform(df_test[\"RoofMatl\"])\ndf_test[\"Exterior1st\"] = label.fit_transform(df_test[\"Exterior1st\"])\ndf_test[\"Exterior2nd\"] = label.fit_transform(df_test[\"Exterior2nd\"])\ndf_test[\"MasVnrType\"] = label.fit_transform(df_test[\"MasVnrType\"])\ndf_test[\"HeatingQC\"] = label.fit_transform(df_test[\"HeatingQC\"])\ndf_test[\"Foundation\"] = label.fit_transform(df_test[\"Foundation\"])\ndf_test[\"Heating\"] = label.fit_transform(df_test[\"Heating\"])\ndf_test[\"CentralAir\"] = label.fit_transform(df_test[\"CentralAir\"])\ndf_test[\"Electrical\"] = label.fit_transform(df_test[\"Electrical\"])\ndf_test[\"SaleType\"] = label.fit_transform(df_test[\"SaleType\"])\ndf_test[\"SaleCondition\"] = label.fit_transform(df_test[\"SaleCondition\"])","0583df5e":"df_train.info()","1a6ccab0":"df_train = df_train.reset_index()","13fcd585":"df_train.shape","abe3245b":"df_train.columns","b932b229":"df_train.describe()","136a784c":"df_train.columns.to_series()[np.isinf(df_train).any()]","ca9493db":"df_train.replace([np.inf, -np.inf], np.nan, inplace=True)","09ecf4f3":"df_test.replace([np.inf, -np.inf], np.nan, inplace=True)","878af6af":"df_test.fillna(0)","4048d8dd":"df_train[\"MasVnrArea\"] = df_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].median())\ndf_train[\"LowQualFinSF\"] = df_train[\"LowQualFinSF\"].fillna(df_train[\"LowQualFinSF\"].median())\ndf_train[\"BsmtFullBath\"] = df_train[\"BsmtFullBath\"].fillna(df_train[\"BsmtFullBath\"].mean())\ndf_train[\"BsmtHalfBath\"] = df_train[\"BsmtHalfBath\"].fillna(df_train[\"BsmtHalfBath\"].mean())\ndf_train[\"FullBath\"] = df_train[\"FullBath\"].fillna(df_train[\"FullBath\"].mean())\ndf_train[\"HalfBath\"] = df_train[\"HalfBath\"].fillna(df_train[\"HalfBath\"].mean())\ndf_train[\"BedroomAbvGr\"] = df_train[\"BedroomAbvGr\"].fillna(df_train[\"BedroomAbvGr\"].median())\ndf_train[\"KitchenAbvGr\"] = df_train[\"KitchenAbvGr\"].fillna(df_train[\"KitchenAbvGr\"].mean())\ndf_train[\"Fireplaces\"] = df_train[\"Fireplaces\"].fillna(df_train[\"Fireplaces\"].mean())\ndf_train[\"GarageType\"] = df_train[\"GarageType\"].fillna(df_train[\"GarageType\"].mean())\ndf_train[\"GarageArea\"] = df_train[\"GarageArea\"].fillna(df_train[\"GarageArea\"].median())\ndf_train[\"WoodDeckSF\"] = df_train[\"WoodDeckSF\"].fillna(df_train[\"WoodDeckSF\"].median())\ndf_train[\"OpenPorchSF\"] = df_train[\"OpenPorchSF\"].fillna(df_train[\"OpenPorchSF\"].median())\ndf_train[\"EnclosedPorch\"] = df_train[\"EnclosedPorch\"].fillna(df_train[\"EnclosedPorch\"].median())\ndf_train[\"3SsnPorch\"] = df_train[\"3SsnPorch\"].fillna(df_train[\"3SsnPorch\"].median())\ndf_train[\"ScreenPorch\"] = df_train[\"ScreenPorch\"].fillna(df_train[\"ScreenPorch\"].median())\ndf_train[\"PoolArea\"] = df_train[\"PoolArea\"].fillna(df_train[\"PoolArea\"].median())\ndf_train[\"MiscVal\"] = df_train[\"MiscVal\"].fillna(df_train[\"MiscVal\"].median())","682b72e7":"df_train.columns.to_series()[np.isinf(df_train).any()]","f6c60235":"def clean_dataset(df_train):\n    assert isinstance(df_train, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n    df_train.dropna(inplace=True)\n    indices_to_keep =~df_train.isin([np.nan, np.inf, -np.inf]).any(1)\n    return df_train[indices_to_keep].astype(np.float64)\nclean_dataset(df_train)","19cc3278":"sf_median = df_test[\"TotalSF\"].median()\ndf_test[\"TotalSF\"] = df_test[\"TotalSF\"].fillna(sf_median)","84ba39dd":"df_test[\"MasVnrArea\"] = df_test[\"MasVnrArea\"].fillna(0)\ndf_test[\"BsmtFullBath\"] = df_test[\"BsmtFullBath\"].fillna(0)\ndf_test[\"BsmtHalfBath\"] = df_test[\"BsmtHalfBath\"].fillna(0)","82499f9a":"gyrmed = df_test[\"GarageYrBlt\"].median()\ndf_test[\"GarageYrBlt\"] = df_test[\"GarageYrBlt\"].fillna(gyrmed)","2b4e809d":"gareamed = df_test[\"GarageArea\"].median()\ndf_test[\"GarageArea\"] = df_test[\"GarageArea\"].fillna(gareamed)","c1f89e04":"df_train = df_train.drop([\"index\"],axis=1)\n\ny  = df_train[\"SalePrice\"]\nX = df_train.drop([\"SalePrice\"],axis=1)","cddefb5a":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True,random_state=42)","19caeaba":" test_X = df_test[['Id', 'MSSubClass', 'MSZoning', 'LotArea', 'Street', 'LotShape',\n       'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood',\n       'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl',\n       'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'ExterQual',\n       'ExterCond', 'Foundation', 'BsmtCond', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'GarageType', 'GarageYrBlt', 'GarageArea',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n       'MoSold', 'YrSold', 'SaleType', 'SaleCondition','TotalSF']]","6d5d6965":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\n  \nlinr.fit(X_train,y_train)","994f41ee":"y_preds = linr.predict(X_test)","8ffa9594":"sns.regplot(x=y_test, y=y_preds, ci=None, color=\"r\")","6e99d713":"from sklearn.metrics import mean_squared_error\n\nrmse = mean_squared_error(y_test, y_preds, squared=False)\nrmse","f817d697":"from sklearn.metrics import r2_score\nprint(r2_score(y_test, y_preds))","b681e968":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(random_state=42)\n\nrf.fit(X_train, y_train)","3c06c089":"rf_preds = rf.predict(X_test)","9d07e3cf":"rmse = mean_squared_error(y_test, rf_preds, squared=False)\nrmse","b79fb853":"print(r2_score(y_test, rf_preds))","ecadd827":"sns.regplot(x=y_test, y=rf_preds, ci=None, color=\"r\")","87c0a6c7":"from sklearn.linear_model import Ridge\n\nrr = Ridge(alpha=0.005)\n\nrr.fit(X_train, y_train)\n\nrr_preds = rr.predict(X_test)\n\nrmse = mean_squared_error(y_test, rr_preds, squared=False)\nrmse","efd21a79":"print(r2_score(y_test, rr_preds))","efc63cac":"from sklearn.linear_model import Lasso\n\nls = Lasso(alpha=0.000001)\n\nls.fit(X_train, y_train)\n\nls_preds = ls.predict(X_test)\n\nrmse = mean_squared_error(y_test, ls_preds, squared=False)\nrmse","053720f0":"print(r2_score(y_test, ls_preds))","876b03dd":"preds = linr.predict(test_X)","f29bb889":"coefficients = pd.concat([pd.DataFrame(X.columns),pd.DataFrame(np.transpose(linr.coef_))], axis = 1)\n\n\ncoefficients = coefficients.rename(columns={coefficients.columns[0]:\"Features\",\n                                            coefficients.columns[1]:\"Weight\"})\n\n","d77a0210":"coefficients[:20]","2ea88b86":"coefficients[20:40]","c6d37f6c":"coefficients[40:64]","dcc90249":"submission = pd.DataFrame({\n    'Id': np.asarray(df_test.Id), \n    'SalePrice': preds.astype(int)\n})\nsubmission.to_csv('my_submission.csv', index=False)","5171a58b":"Creating sub dataframes of variables related to the garage and the basement to analyze them in the correlation heatmap.","687802fa":"The features that have the most strong correlation with our target variable SalePrice are OverallQual and GrLivArea\n\nTotalBsmtSF is highly correlated with 1stFlrSF. We can create a new feature to represent them together and drop the existing features.","df028bdd":"We have 2 points in the bottom right that does not follow the trend and therefore could negatively effect the model. They can be dropped.","7cf70054":"# Mapping and Handling Missing Data\n\nSince 'PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'LotFrontage' has more than **15%** percent missing data they are going to be **dropped.**\n\nThere are many variables related to the Garage and the Basement. Some are numerical and some are categorical. Therefore, I will map the categorical ones to number (higher is better) to be able to represent them in the correlation heatmap. With the help of the data descriptions and the heatmap, I will look for features that can be dropped.\n\nAfter mapping, the nan values will also be mapped as a number so the missing values will be **filled**. Besides these, there are 4 features named GarageYrBlt, MasVnrArea, MasVnrType and Electrical that has small amount of missing data. \n* GarageYrBlt will be filled by it's median\n* MasVnrArea will be filled by it's mean since it's median is 0\n* MasVnrType and Electrical will be filled by it's most common value","fb096f61":"No object values =)","6f09ba00":"Decide map or label encode\n\n* MSSubClass - LE\n* MsZoning - LE\n* Street - LE\n* **LotShape - map**\n* Land Contour - LE\n* **Utilities - map**\n* Lot Config - LE\n* **Land Slope - map**\n* Neighborhood - LE\n* Condition1 - LE\n* Condition2 - LE\n* BldgType - LE\n* HouseStyle - LE\n* RoofStyle - LE\n* RoofMatl - LE\n* Exterior1st - LE\n* Exterior2nd - LE\n* MasVnrType - LE\n* **ExterQual - map**\n* **ExterCond - map**\n* Foundation - LE\n* Heating - LE\n* CentralAir - LE\n* Electrical - LE\n* **KitchenQual - map**\n* **Functional - map**\n* **PavedDrive - map**\n* SaleType - LE\n* SaleCondition - LE","5a99c89f":"# Ordinal Variable Mapping\n\nOrdinal data is a kind of categorical data with a set **order** to it. In this dataset, some column values are like Excellent, Good, Average, Fair, Poor. This is an example to ordinal variables. \n\nTo be able to work with **categorical data** in our models, we should transform it in a way that they are also represented by numbers. Encoders like LabelEncoder and OneHotEncoder maps the values in alphabetical order. and I couldn't find a way to pass our own mappings.\n\nThe value Average would have been 1. This mixed order would not be suitable for the correlation analysis as the increase in the values might not mean anything. Because of that, I have mapped the values as **highest number representing the best value** so that we can see the relationship between the variables in the **correlation heatmap**.\n\nSince GarageType variable is not a ordinal variable, meaning that it's values cannot be ranked amongst each other, it can be label encoded to be represented in the correlation heatmap.","ed854053":"Our target variable is right skewed.","ca620b3e":"BsmtUnfSF has negative correlation with BsmtFinType1, BsmtFinType2, BsmtFinSF1 and BsmtFinSF2 so it will be dropped.\n\nBsmtFinType1 has strong correlation with BsmtFinSF1 and it is the same case with the 2s.\nThis shows that a good living quarters have high finished square feet.\nI will keep the BsmtFinType1 and 2 variables as they already represent FinSF1 and 2.\n\nExposure has positive correlations with many of the variables meaning that is represented by them and can be dropped.\n\nCond has a strong correlation with Qual so I drop Qual.","e99404da":"New garages have more area.\n\nGarageQual and GarageCond are highly correlated, drop one\n\nGarageCars and GarageArea are highly correlated, drop GarageCars\n\nHigh Quality Garages are Finished, drop GarageFinish","0bf8f032":"The best value will be mapped as the highest number and the worst is vice versa.\n\nFor example:\n* Excellent = 6\n* Poor = 2\n* NA = 1","5fec783c":"   MSSubClass has integer values but it is actually a categorical variable.  \n     \n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES","a72bf338":"Just to make sure before mappings"}}