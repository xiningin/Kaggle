{"cell_type":{"2cc53d69":"code","e662c981":"code","7f88f129":"code","b022df27":"code","fbe6b5a1":"code","d54dcfcb":"code","7465f81d":"code","6c5f1477":"code","bc26423b":"code","0f897502":"code","938010ac":"code","8b82f16d":"code","56177ce2":"code","35167fc0":"code","3d0e10c4":"code","8d43f92e":"code","93fda800":"code","77d56786":"code","246997aa":"code","98491a1a":"code","8c0b2610":"code","c2b2822a":"code","0c159f59":"markdown","82bd65fd":"markdown","1b425610":"markdown","1b2d4f36":"markdown","2330ce52":"markdown","5d740b9e":"markdown","ebe05013":"markdown","cfa4540d":"markdown","4b62c3a0":"markdown","9dbf5bc1":"markdown","e173d79d":"markdown","a06d893b":"markdown","12d753e7":"markdown"},"source":{"2cc53d69":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn.datasets\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn import metrics","e662c981":"house_price_dataset = sklearn.datasets.load_boston()","7f88f129":"print(house_price_dataset)","b022df27":"house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns = house_price_dataset.feature_names) # Loading the dataset to a Pandas DataFrame","fbe6b5a1":"house_price_dataframe.head() # Print First 5 rows of our DataFrame","d54dcfcb":"house_price_dataframe['price'] = house_price_dataset.target # add the target (price) column to the DataFrame","7465f81d":"house_price_dataframe.shape # checking the number of rows and Columns in the data frame","6c5f1477":"house_price_dataframe.isnull().sum() # check for missing values","bc26423b":"house_price_dataframe.describe() # statistical measures of the dataset","0f897502":"correlation = house_price_dataframe.corr()","938010ac":"# constructing a heatmap to understand the correlation\nplt.figure(figsize=(10,10))\nsns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='GnBu')","8b82f16d":"X = house_price_dataframe.drop(['price'], axis=1)\nY = house_price_dataframe['price']","56177ce2":"print(X)\nprint(Y)","35167fc0":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)","3d0e10c4":"print(X.shape, X_train.shape, X_test.shape)","8d43f92e":"model = XGBRegressor() # loading the model","93fda800":"model.fit(X_train, Y_train) # training the model with X_train","77d56786":"training_data_prediction = model.predict(X_train) # accuracy for prediction on training data","246997aa":"# R squared error\nscore_1 = metrics.r2_score(Y_train, training_data_prediction)\n\n# Mean Absolute Error\nscore_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)\n\n# Mean Squared Error\nscore_3 = metrics.mean_squared_error(Y_train, training_data_prediction)\n\n# Root Mean squared Error\nscore_4 = np.sqrt(score_3)\n\nprint(\"R squared error : \", score_1)\nprint('Mean Absolute Error : ', score_2)\nprint(\"Mean squared error : \", score_3)\nprint('Root Mean squared error : ', score_4)","98491a1a":"plt.scatter(Y_train, training_data_prediction)\nplt.xlabel(\"Actual Prices\")\nplt.ylabel(\"Predicted Prices\")\nplt.title(\"Actual Price vs Preicted Price\")\nplt.show()","8c0b2610":"test_data_prediction = model.predict(X_test) # accuracy for prediction on test data","c2b2822a":"# R squared error\nscore_1 = metrics.r2_score(Y_test, test_data_prediction)\n\n# Mean Absolute Error\nscore_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)\n\n# Mean Squared Error\nscore_3 = metrics.mean_squared_error(Y_test, test_data_prediction)\n\n# Root Mean squared Error\nscore_4 = np.sqrt(score_3)\n\nprint(\"R squared error : \", score_1)\nprint('Mean Absolute Error : ', score_2)\nprint(\"Mean squared error : \", score_3)\nprint('Root Mean squared error : ', score_4)","0c159f59":"Understanding the correlation between various features in the dataset","82bd65fd":"Importing dependencies and libraries","1b425610":"**Evaluation**","1b2d4f36":"Visualization of Actual Prices and Predicted prices","2330ce52":"XGBoost Regressor","5d740b9e":"Code written by Dhrumil Vadodaria!!\n\nConnect with me on LinkedIn for future discussions on ML: https:\/\/www.linkedin.com\/in\/dhrumil-v-814932128\/\n\nPlease provide citation if you use the code!","ebe05013":"Importing the Boston House Price Dataset\n\nBoston House Price Dataset: https:\/\/www.kaggle.com\/vikrishnan\/boston-house-prices","cfa4540d":"Prediction on Test Data ","4b62c3a0":"Aim: To predict house prices of Boston, using various different features in our model from the provided dataset","9dbf5bc1":"Prediction on training data","e173d79d":"Splitting the data into Training data and Test data","a06d893b":"**Model** **Training**","12d753e7":"Splitting the data and Target"}}