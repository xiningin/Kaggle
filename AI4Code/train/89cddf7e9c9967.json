{"cell_type":{"0f355c4a":"code","4ae934e7":"code","e79fdaab":"code","3c43db0e":"code","12df9a2c":"code","787c8abd":"code","3205b502":"code","5ee04e7e":"code","d3a6f072":"code","e91d762c":"code","8f57d903":"code","b237bfd5":"code","4709240a":"markdown","b390009b":"markdown","cf5f2a64":"markdown","eaebee1d":"markdown","c4de9e23":"markdown","b4453a22":"markdown","a63a7f2c":"markdown","cadc6132":"markdown","2d061e89":"markdown","61e8904a":"markdown","67c13a51":"markdown","326d4709":"markdown","690f34b3":"markdown","73e9fd9a":"markdown"},"source":{"0f355c4a":"from IPython.core.display import display, HTML\n\nimport pandas as pd\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nimport gc\n\nfrom joblib import Parallel, delayed\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import r2_score\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport numpy.matlib","4ae934e7":"train=pd.read_pickle(\"..\/input\/pickled\/train.pkl\")\ntest=pd.read_pickle(\"..\/input\/pickled\/test.pkl\")","e79fdaab":"from sklearn.cluster import KMeans\n# making agg features\n                      \ntrain_p = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain_p = train_p.pivot(index='time_id', columns='stock_id', values='target')","3c43db0e":"!pip install ..\/input\/machine-learning-for-asset-managers\/ \n#Installs the library: https:\/\/github.com\/emoen\/Machine-Learning-for-Asset-Managers","12df9a2c":"from Machine_Learning_for_Asset_Managers import ch4_optimal_clustering  as oc\nimport matplotlib.pylab as plt\nimport matplotlib\n\nfrom sklearn.cluster import KMeans\n\nnCols, nBlocks = 6, 3\nnObs = 8\nsigma = 1.\ncorr0 = oc.randomBlockCorr(nCols, nBlocks)\ntestGetCovSub = oc.getCovSub(nObs, nCols, sigma, random_state=None) #6x6 matrix\n\n# recreate fig 4.1 colormap of random block correlation matrix\nnCols, nBlocks, minBlockSize = 30, 6, 2\nprint(\"minBlockSize\"+str(minBlockSize))\ncorr0 = oc.randomBlockCorr(nCols, nBlocks, minBlockSize=minBlockSize) #pandas df\n\ncorr1 = oc.clusterKMeansTop(corr0) #corr0 is ground truth, corr1 is ONC\n\n#Draw ground truth\nmatplotlib.pyplot.matshow(corr0) #invert y-axis to get origo at lower left corner\nmatplotlib.pyplot.gca().xaxis.tick_bottom()\nmatplotlib.pyplot.gca().invert_yaxis()\nmatplotlib.pyplot.colorbar()\nmatplotlib.pyplot.show()","787c8abd":"corr0 = train_p.corr()\n\ncorr1, clstrs, silh = oc.clusterKMeansTop(corr0) #corr0 is ground truth, corr1 is ONC\n\n#Draw ground truth\nmatplotlib.pyplot.matshow(corr0) #invert y-axis to get origo at lower left corner\nmatplotlib.pyplot.gca().xaxis.tick_bottom()\nmatplotlib.pyplot.gca().invert_yaxis()\nmatplotlib.pyplot.colorbar()\nmatplotlib.pyplot.show()","3205b502":"#ONC found strongest signal for 2 clusters\nprint(\"Keys:\"+str(clstrs.keys()))\nprint(\"Clusters:\")\nprint(clstrs)","5ee04e7e":"from Machine_Learning_for_Asset_Managers import ch2_marcenko_pastur_pdf as mp\n\ncorr0 = train_p.corr()\neigenVal, eigenVec = mp.getPCA(corr0)","d3a6f072":"variance = 1.0 # assume variance of correlation matrix is 1\nrelation_row_col = eigenVal.shape[0]\/float(eigenVal.shape[1])\nnumber_of_samples = eigenVal.shape[1]\npdf0 = mp.mpPDF(variance, q=relation_row_col, pts=number_of_samples)","e91d762c":"np.max(pdf0) ","8f57d903":"fig = plt.figure()\nax  = fig.add_subplot(111)\nplt.plot(pdf0.keys(), pdf0, color='r', label=\"Marcenko-Pastur pdf\")\nax.hist(np.diag(eigenVal), density = True, bins=50)","b237bfd5":"print(eigenVal.flatten().shape)\nsortedEigenV = np.sort(eigenVal.flatten())\nsortedEigenV[-9:]","4709240a":"## From chapter 4 - Optimal Clustering\n\n## of Machine Learning for Asset Managers by Marcos Lopez de Prado\n\n<b>Book<\/b>: https:\/\/www.amazon.com\/Machine-Learning-Managers-Elements-Quantitative\/dp\/1108792898 <br>\n<b>Code<\/b>: https:\/\/github.com\/emoen\/Machine-Learning-for-Asset-Managers <br>\n<b>Paper<\/b>: \"DETECTION OF FALSE INVESTMENT STRATEGIES USING UNSUPERVISED LEARNING METHODS\" - https:\/\/papers.ssrn.com\/sol3\/papers.cfm?abstract_id=3167017 <br>\n\n\nUse unsupervised learning to maximize intragroup similarities and minimize intergroup similarities. Consider matrix X of shape N x F. N objects and F features. Features are used to compute proximity(correlation, mutual information) to N objects in an NxN matrix.\n\nThere are 2 types of clustering algorithms. Partitional and hierarchical:\n1. Connectivity: hierarchical clustering\n2. Centroids: like k-means\n3. Distribution: gaussians\n4. Density: search for connected dense regions like DBSCAN, OPTICS\n5. Subspace: modeled on two dimension, feature and observation. [Example](https:\/\/quantdare.com\/biclustering-time-series\/)\n\n\nGenerating of random block correlation matrices is used to simulate instruments with correlation. The utility for doing this is in code snippet 4.3, and it uses clustering algorithms <i>optimal number of cluster<\/i> (ONC) defined in snippet 4.1 and 4.2, which does not need a predefined number of clusters (unlike k-means), but uses an 'elbow method' to stop adding clusters. The optimal number of clusters are achieved when there is high intra-cluster correlation and low inter-cluster correlation. The [silhouette score](https:\/\/en.wikipedia.org\/wiki\/Silhouette_(clustering)) is used to minimize within-group distance and maximize between-group distance. \n\nThe code-snippets: https:\/\/github.com\/emoen\/Machine-Learning-for-Asset-Managers\/blob\/master\/Machine_Learning_for_Asset_Managers\/ch4_optimal_clustering.py","b390009b":"### 2 Clusters found","cf5f2a64":"![RandomMatrixWithSignal](https:\/\/raw.githubusercontent.com\/emoen\/Machine-Learning-for-Asset-Managers\/master\/img\/fig_2_3_mp_with_signal.png)","eaebee1d":"### Generate Random Matrix with 6 clusters\nand use ONC algorith to find the clusters","c4de9e23":"## Apply ONC algorithm to Optiver dataset","b4453a22":"### Install library Machine-Learning-for-Asset-Managers","a63a7f2c":"Lets get the theoretical Marchenko pastur distribution (MP-pdf) of this matrix.","cadc6132":"Lets plot the pdf together with eigenvalues found from correlation matrix","2d061e89":"The organisers says time_id has been shuffled for each stock_id. Therefore clustering on the correlation of stock_id and time_id should contain no signal. From Random Matrix theory we know that a random matrix - which is symmetric and Hermitian matrix which is positive-definite - follows the Marchenko-Pastur distribution (https:\/\/en.wikipedia.org\/wiki\/Marchenko%E2%80%93Pastur_distribution)\n\nWe can use this to check if there is any signal in the correlation of stock_id\/time_id\n\nLets get the eigenvalues of the correlation matrix.","61e8904a":"## Read data\n\nTrain and test data is taken from \"LGBM & FFNN\" - https:\/\/www.kaggle.com\/mayangrui\/lgbm-ffnn","67c13a51":"There are 2 eigenvalues larger than the MP-pdf which is not strong support for claiming there is signal in the correlation. This might explain why ONC found only 2 clusters. \n\nBelow is an example of the MP-pdf and eigenvalues found in a matrix with signal.","326d4709":"# From Chapter 2 - Marchenko-Pastur analysis - is there signal in the correlations","690f34b3":"Lets find the max eigenvalue expected from a random matrix of this dimension. Any signal would typically have larger eigenvalue than this","73e9fd9a":"There is one large eigenvalue. That is the market. Every stock moves to the music of the market. \nLets view the largest 10 eigenvalues"}}