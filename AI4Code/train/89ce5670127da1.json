{"cell_type":{"06732ca4":"code","8c8690ee":"code","5610bf75":"code","66e9ae45":"code","043447e9":"code","0bcf131f":"code","bccc464f":"code","cf45ca99":"code","98d860ad":"code","76f202f5":"code","4c01d74d":"code","d3e4f6ba":"code","126671d6":"code","b5bb5ee6":"code","f414ad64":"code","2164f4ee":"code","80fa1653":"code","20885850":"code","373e1bac":"code","49e09415":"code","d655cb1b":"code","0e282806":"code","c95edec4":"code","1ca225a1":"code","093a605f":"code","3bb48001":"code","95e9f2c5":"code","687dc842":"code","b5635e20":"markdown","d8f7a35d":"markdown","f6f3cbef":"markdown","3da7510e":"markdown","d4919e96":"markdown","6360e917":"markdown","b0051d7d":"markdown","d9e3a543":"markdown","f1b543f4":"markdown","d30d2343":"markdown","00a31f10":"markdown","2c7648b1":"markdown","ebdbf23c":"markdown","d9300ce4":"markdown","99ba690a":"markdown","e168444b":"markdown","7aa688db":"markdown","1313d691":"markdown","51081e2b":"markdown","fb146612":"markdown","f969f459":"markdown","45488eb5":"markdown","bb36ec00":"markdown","d60ae10c":"markdown","d8fd18a7":"markdown","49e51ff1":"markdown"},"source":{"06732ca4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt;\nimport seaborn as sns;\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom sklearn.linear_model import LogisticRegression;\nfrom sklearn.preprocessing import StandardScaler;\nfrom sklearn.model_selection import train_test_split, GridSearchCV;\nfrom sklearn.metrics import accuracy_score, roc_curve;\n\nimport warnings;\nwarnings.filterwarnings(\"ignore\");","8c8690ee":"df = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\");\ndf.head()","5610bf75":"df.describe()","66e9ae45":"df.info()","043447e9":"df.isnull().sum()","0bcf131f":"for props in df.columns:\n    print(\"{} - {}\".format(props, df[props].value_counts().shape[0]))","bccc464f":"categoryList = [\"sex\", \"cp\", \"fbs\", \"restecg\", \"exng\", \"slp\", \"caa\", \"thall\", \"output\"];\ndfCategory = df.loc[:, categoryList];\nfor i in categoryList:\n    plt.figure();\n    sns.countplot(x = i, data = dfCategory, hue = \"output\");\n    plt.title(i);","cf45ca99":"numericList = [\"age\", \"trtbps\", \"chol\", \"thalachh\", \"oldpeak\", \"output\"];\ndfNumeric = df.loc[:, numericList];\nsns.pairplot(dfNumeric, hue = \"output\", diag_kind = \"kde\");\nplt.show();","98d860ad":"scaler = StandardScaler();\nscaledArray = scaler.fit_transform(df.loc[:, numericList[:-1]]);\npd.DataFrame(scaledArray).describe()","76f202f5":"scaledDF = pd.DataFrame(scaledArray, columns = numericList[:-1]);\nscaledDF = pd.concat([scaledDF, df.loc[:, \"output\"]], axis = 1);\nscaledDF.head()","4c01d74d":"dataMelt = pd.melt(scaledDF, id_vars = \"output\", var_name = \"features\", value_name = \"value\");\ndataMelt.head(20)","d3e4f6ba":"plt.figure();\nsns.boxplot(x = \"features\", y = \"value\", hue = \"output\", data = dataMelt);\nplt.show();","126671d6":"plt.figure();\nsns.swarmplot(x = \"features\", y = \"value\", hue = \"output\", data = dataMelt);\nplt.show();","b5bb5ee6":"sns.catplot(x = \"exng\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df);\nsns.catplot(x = \"thall\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df);\nsns.catplot(x = \"slp\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df);","f414ad64":"plt.figure(figsize = (14,10));\nsns.heatmap(df.corr(), annot = True, fmt = \".1f\", linewidths = .7);","2164f4ee":"# Drop features that has lower correlation between output\n\n# Categorical Features\ncorrelations = pd.DataFrame(np.abs(df.loc[:, categoryList].corr()[\"output\"]) < 0.15)\nuncorrelatedCategoricalFeatures = correlations[correlations[\"output\"] == True].index;\ndf.drop(uncorrelatedCategoricalFeatures, axis = 1, inplace = True);\n\nfor items in uncorrelatedCategoricalFeatures.values:\n    categoryList.remove(items);\n\n# Numerical Features\ncorrelations = pd.DataFrame(np.abs(df.loc[:, numericList].corr()[\"output\"]) < 0.15)\nuncorrelatedNumericFeatures = correlations[correlations[\"output\"] == True].index;\ndf.drop(uncorrelatedNumericFeatures, axis = 1, inplace = True);\n\nnumericList = [\"age\", \"trtbps\", \"chol\", \"thalachh\", \"oldpeak\"];\nfor items in uncorrelatedNumericFeatures.values:\n    numericList.remove(items);","80fa1653":"dfNumeric = df.loc[:, numericList];","20885850":"for items in numericList:\n    currentItem = dfNumeric[items];\n    q1 = np.percentile(currentItem, 25)  # Q1\n    q3 = np.percentile(currentItem, 75)  # Q3\n    iqr = q3-q1;\n    upperLimit = q3 + 2.5 * iqr;\n    lowerLimit = q1 - 2.5 * iqr;\n    \n    upperSamples = np.where(currentItem >= upperLimit);\n    lowerSamples = np.where(currentItem <= lowerLimit);\n    \n    try:\n        df.drop(upperSamples[0], inplace = True);\n    except: \n        print(\"Key Error: {} not fount in axis\".format(upperSamples[0]));\n\n    try:\n        df.drop(lowerSamples[0], inplace = True);\n    except: \n        print(\"Key Error: {} not fount in axis\".format(lowerSamples[0]));\n","373e1bac":"dfEnc = pd.get_dummies(df, columns = categoryList[:-1], drop_first = True);\nprint(\"DF Cols: \", df.columns);\nprint(\"dfEnc Cols: \", dfEnc.columns);\ndfEnc.head()","49e09415":"# Get the data\nx = dfEnc.drop([\"output\"], axis = 1);\ny = dfEnc[\"output\"];","d655cb1b":"scaler = StandardScaler();\nx[numericList[:-1]] = scaler.fit_transform(x.loc[:, numericList[:-1]]);\nx.head()","0e282806":"xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size = 0.1, random_state = 3);","c95edec4":"logReg = LogisticRegression();\nlogReg.fit(xTrain, yTrain); # Train the model\ny_pred_prob = logReg.predict_proba(xTest); # Test the model\ny_pred = np.argmax(y_pred_prob, axis = 1); # Find indices of max element in each row","1ca225a1":"testResult = pd.DataFrame(y_pred_prob);\ntestResult[\"RiskyOrNot\"] = y_pred;\ntestResult.head()","093a605f":"print(\"Test Accuracy: {}\".format(accuracy_score(y_pred, yTest)));","3bb48001":"fpr, tpr, thresholds = roc_curve(yTest, y_pred_prob[:, 1]);\nplt.plot([0, 1], [0, 1], \"k--\");\nplt.plot(fpr, tpr, label = \"Logistic Regression\");\nplt.xlabel(\"False Positive\");\nplt.ylabel(\"True Positive\");\nplt.title(\"Logistic Regression ROC Curve\");\nplt.show();","95e9f2c5":"logReg = LogisticRegression();\npenalty = [\"l1\", \"l2\"];\nparameters = {\"penalty\": penalty};\nlogRegGridSearcher = GridSearchCV(logReg, parameters);\nlogRegGridSearcher.fit(xTrain, yTrain);\nprint(\"Best Params: \", logRegGridSearcher.best_params_);","687dc842":"yPred = logRegGridSearcher.predict(xTest);\nprint(\"Test Accuracy: {}\".format(accuracy_score(yPred, yTest)));","b5635e20":"<a id = \"10\"><\/a>\n## Swarm Plot Analysis","d8f7a35d":"<a id = \"14\"><\/a>\n## Modelling","f6f3cbef":"### Scaling - Standardization","3da7510e":"<img src= \"https:\/\/www.statisticshowto.com\/wp-content\/uploads\/2012\/03\/iqr.jpg\" alt =\"Outlier Detection\" style='width: 600px;'>","d4919e96":"<a id = \"1\"><\/a>\n## Python Libraries","6360e917":"<a id = \"4\"><\/a>\n## Missing Value Analysis","b0051d7d":"<a id = \"11\"><\/a>\n## Cat Plot Analysis","d9e3a543":"## Analysis Content\n\n1. [Python Libraries](#1)\n2. [Data Content](#2)\n3. [Read and Analyse Data](#3)\n4. [Missing Value Analysis](#4)\n5. [Unique Value Analysis](#5)\n6. [Categorical Value Analysis](#6)\n7. [Numeric Value Analysis](#7)\n8. [Standardization](#8)\n9. [Box Plot Analysis](#9)\n10. [Swarm Plot Analysis](#10)\n11. [Cat Plot Analysis](#11)\n12. [Correlation Analysis](#12)\n13. [Outlier Detection](#13)\n14. [Modelling](#14)","f1b543f4":"<a id = \"12\"><\/a>\n## Correlation Analysis","d30d2343":"# Heart Attack Analysis & Prediction","00a31f10":"### Encoding Categorical Columns","2c7648b1":"### Hyperparameter Tuning","ebdbf23c":"## Introduction\n* A heart attack happens when a part of the heart muscle doesn't get enough blood.\n* The more time that passes without treatment to restore blood from, the greater the damage to the heart muscle\n* Coronery artery disease is the main cause of heart attack\n\n<img src= \"https:\/\/www.templehealth.org\/sites\/default\/files\/inline-images\/heart-attack-symptoms-men-vs-women.png\" alt =\"Heart Attack\" style='width: 600px;'>","d9300ce4":"<a id = \"6\"><\/a>\n## Categorical Value Analysis","99ba690a":"## What will you learn from this project\n* Explatory data analysis\n* Missing Value Analysis\n* Categoric and Numeric Features\n* Standardization\n* Box - Swarm - Cat - Correlation Plot Analysis\n* Outlier Detection\n* Modelling and Tuning Machine Learning Model","e168444b":"<a id = \"5\"><\/a>\n## Unique Value Analysis","7aa688db":"<a id = \"2\"><\/a>\n## Data Content\n\n* Age: Age of the patient\n* Sex: Sex of the patient\n* exng: Exercise induced angina (1 = yes, 0 = no)\n* caa: Number of major vessels (0-3)\n* cp: Chest pain type\n    * 1: Typical angina\n    * 2: Atypical angina\n    * 3: Non-anginal pain\n    * 4: Asymptomatic\n* trtbps: Resting blood pressure\n* chol: Cholesterol in mg\/dl\n* fbs: Fasting blood sugar > 120 mg\/dl (1 or 0)\n* rest_ecg: Resting electrocardiographic results\n    * 0: Normal\n    * 1: Having ST-T Wave Abnormality\n    * 2: Showing probable or definite left ventricular hypertrophy by Estes' criteria\n* thalachh: Maximum heart rate achieved\n* target: 0=less chance of herat attack 1 = More chance of heart attack ","1313d691":"### Logistic Regression","51081e2b":"<a id = \"7\"><\/a>\n## Numeric Value Analysis","fb146612":"<a id = \"13\"><\/a>\n## Outlier Detection","f969f459":"<a id = \"3\"><\/a>\n## Read and Analyse Data","45488eb5":"### Drop Uncorrelated Features","bb36ec00":"<a id = \"8\"><\/a>\n## Standardization","d60ae10c":"### ROC Curve\n<img src= \"https:\/\/hrngok.github.io\/images\/roc10.jpg\" alt =\"ROC Curve\" style='width: 600px;'>","d8fd18a7":"### Train-Test Split ","49e51ff1":"<a id = \"9\"><\/a>\n## Box Plot Analysis"}}