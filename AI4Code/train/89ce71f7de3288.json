{"cell_type":{"25558737":"code","e2fae3f4":"code","9f170c33":"code","1d35ee41":"code","4bd3bfdf":"code","ec5bf70d":"code","bcf15f46":"code","7f421860":"code","a29801bd":"code","afb43e51":"code","bc11fba7":"code","30463fdd":"code","26cbbc7a":"code","dad7073a":"code","a6eae707":"code","67546ba5":"code","d63dfa5f":"code","ac9d75a5":"code","f33d3980":"code","b344bd31":"code","a70ce9b0":"code","248a3019":"code","4fb1be10":"code","cc5aecb9":"code","568a970c":"code","d8e40571":"code","6bac7b08":"code","dfe782e4":"code","afe0ae71":"code","9aa024b3":"code","e12c8686":"code","11f9efb8":"code","620ccfe9":"code","0aedd03c":"code","13504526":"code","2acbc249":"code","30e1e7af":"code","0d8ca324":"code","80862fe8":"code","f43eee07":"code","1b3be0f3":"code","277fdef0":"code","a8f561fc":"code","c2339961":"code","5d7bbd70":"code","4f056a51":"code","c9388088":"code","bf85bb11":"code","26eead45":"code","ab801983":"code","ca68f4a7":"code","af2d347e":"code","b8a9ed07":"code","d26cbb03":"code","c883d239":"code","2fe3f5a1":"code","4c0ca68a":"code","a3d268d8":"code","062aec28":"code","2fce72bf":"code","4ba2021d":"code","011781a1":"code","300da7f8":"code","a6f60fd4":"code","75f98cfb":"code","85ef81fa":"code","cfb1c7ac":"code","731425e8":"code","0edd5b81":"code","b92121f3":"code","0d5b6279":"code","80186dca":"code","083451db":"code","f0cde925":"code","484bffae":"code","5a7430bf":"code","f2753a02":"code","975295d3":"code","1db8163a":"code","1ccb6903":"code","c7d362e3":"code","60d7883e":"code","8fca8c1f":"code","8634f936":"code","d83dd062":"code","83e4485b":"code","75b02ca7":"code","0983aabe":"code","7bf08741":"code","1bf669d8":"code","10847103":"code","a596eb0f":"code","1a4d76d6":"code","32230fba":"code","d5253bc2":"code","a997f84b":"code","fc19735c":"code","74ebd532":"code","ba5e72d7":"code","6b356c51":"code","f1460125":"code","37484280":"code","05e68f9d":"markdown","d7fb7fc1":"markdown","ae8c0d93":"markdown","866d43aa":"markdown","98960e4c":"markdown","03559d78":"markdown","5f1e3ebe":"markdown","c9dcd308":"markdown","258e3932":"markdown","613ace5d":"markdown","fcb2caa1":"markdown","ec5814ac":"markdown","9febf557":"markdown","20353fc3":"markdown","bf7a54ac":"markdown","5a9252ce":"markdown","ac02df78":"markdown","35fd0003":"markdown","e93ed30e":"markdown","07f7bef0":"markdown","d9f13a3d":"markdown","2187ca30":"markdown","ad599ad1":"markdown","de572ee0":"markdown","a3cc6791":"markdown","50142305":"markdown","35db9845":"markdown","241d4554":"markdown","b89cace5":"markdown","8f8d4c49":"markdown","27ac8d28":"markdown","889a13b3":"markdown","4b8f43eb":"markdown","5ce894e7":"markdown","386e9176":"markdown","1d0207b8":"markdown","1bb1bfd0":"markdown","b3a18dd1":"markdown","7a8b1d6d":"markdown","bec3b459":"markdown","a2b61deb":"markdown","3f37d0c9":"markdown","035203bd":"markdown","d58d954e":"markdown"},"source":{"25558737":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e2fae3f4":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","9f170c33":"df_train.head()","1d35ee41":"columns_to_drop = ['Ticket', 'Cabin']\ndf_train.drop(columns=columns_to_drop, inplace=True)\ndf_test.drop(columns=columns_to_drop, inplace=True)","4bd3bfdf":"df_train.isnull().sum()","ec5bf70d":"df_test.isnull().sum()","bcf15f46":"# Lets join test and train datasets together and calculate number of men and women with value_counts method.\ndf_joined = pd.concat([df_train, df_test], axis=0)\nax = df_joined['Sex'].value_counts().plot(kind='bar');\n\nax.tick_params(axis='x', rotation=0);\nax.set_ylabel('amount of people');\nax.set_title('Amount of mens and womens on the ship');","7f421860":"survived = df_train[df_train['Survived'] == 1]['Sex'].value_counts()\nnot_survived = df_train[df_train['Survived'] == 0]['Sex'].value_counts()\n\ndf_survivance = pd.DataFrame([survived, not_survived], index=['survived', 'not_survived'])\ndf_survivance","a29801bd":"ax = df_survivance.plot(kind='bar', stacked=True);\n\nax.tick_params(axis='x', rotation=0);\nax.set_ylabel('amount of people');\nax.set_title('Survived vs. not survived');","afb43e51":"df_survivance_rate = 100 * df_survivance\/df_survivance.sum()\ndf_survivance_rate","bc11fba7":"ax = df_survivance_rate.T.plot(kind='bar', stacked=True);\n\nax.tick_params(axis='x', rotation=0);\nax.set_ylabel('Survivance rate, %');\nax.set_title('Survived vs. not survived');","30463fdd":"df_class = df_joined['Pclass'].value_counts().sort_index()\ndf_class","26cbbc7a":"ax = df_class.plot(kind='bar');\n\nax.tick_params(axis='x', rotation=0);\nax.set_xticklabels(['1st', '2nd', '3rd']);\nax.set_xlabel('Pclass');\nax.set_ylabel('Amount of people');","dad7073a":"class_by_sex = pd.pivot_table(data=df_joined, index='Pclass', columns='Sex', values='Name', aggfunc='count')\nclass_by_sex","a6eae707":"ax = class_by_sex.plot(kind='bar', stacked=True);\n\nax.tick_params(axis='x', rotation=0);\nax.set_xticklabels(['1st', '2nd', '3rd']);\nax.set_ylabel('Amount of people');\nax.set_title('Amount of people in each class');","67546ba5":"df_class_sex_survivance = pd.pivot_table(data=df_joined, index=['Sex', 'Pclass'], columns=['Survived'], values='Name', aggfunc='count')\ndf_class_sex_survivance.columns = ['Not Survived', 'Survived']\ndf_class_sex_survivance","d63dfa5f":"ax = df_class_sex_survivance.plot(kind='bar', stacked=True);\nax.tick_params(axis='x', rotation=0)\nax.set_xticklabels(['female\\n1st class', 'female\\n2nd class', 'female\\n3rd class', 'male\\n1st class', 'male\\n2nd class', 'male\\n3rd class']);\nax.set_ylabel('Amount of people');","ac9d75a5":"df_class_sex_survivance_sum = df_class_sex_survivance.sum(axis=1).to_frame()\ndf_class_sex_survivance_sum.columns = ['Sum']\ndf_class_sex_survivance_sum","f33d3980":"df_class_sex_survivance_rate = pd.DataFrame(df_class_sex_survivance.to_numpy() \/ df_class_sex_survivance_sum.to_numpy(), index=df_class_sex_survivance.index, columns=['not_survived', 'survived'])\ndf_class_sex_survivance_rate","b344bd31":"ax = df_class_sex_survivance_rate.plot(kind='bar', stacked=True);\n\nax.legend(loc='lower right');\nax.tick_params(axis='x', rotation=0)\nax.set_xticklabels(['female\\n1st class', 'female\\n2nd class', 'female\\n3rd class', 'male\\n1st class', 'male\\n2nd class', 'male\\n3rd class']);\nax.set_ylabel('Survivance rate');\nax.set_title('Survivance rate');","a70ce9b0":"def dot_cloud(df, feature_1, feature_2, hue):\n    '''\n    df - dataframe, feature_1 - categorical feature 1, feature_2 - categorical feature_2, hue - categorical feature\n    '''\n    \n    noise_level = 0.35\n    size = len(df_train)\n\n    r = noise_level * np.sqrt(np.random.random(size=size))\n    fi = 2 * np.pi * np.random.random(size=size)\n\n    x_noise = r * np.cos(fi)\n    y_noise = r * np.sin(fi)\n\n    df_noised = pd.DataFrame()\n    df_noised[feature_1] = df[feature_1] + x_noise\n    df_noised[feature_2] = df[feature_2] + y_noise\n    df_noised[hue] = df[hue]\n\n    ax = sns.scatterplot(data=df_noised, x=feature_1, y=feature_2, hue=hue,  **{'edgecolor': 'k', 'size': 1.5});\n    return ax","248a3019":"d = {\n    'female': 0,\n    'male': 1\n}\n\ndf_train['Sex_encoded'] = df_train['Sex'].apply(lambda x : d[x])","4fb1be10":"fig = plt.figure(figsize=(7, 7));\nax = dot_cloud(df_train, 'Sex_encoded', 'Pclass', 'Survived');\n\nax.set_xticks([0, 1])\nax.set_xticklabels(['female', 'male'])\n\nax.set_yticks([1, 2, 3])\nax.set_yticklabels(['1st', '2nd', '3rd'])\nax.tick_params(axis='y', rotation=90)","cc5aecb9":"sns.histplot(data=df_train, x='Fare', bins=40);","568a970c":"# Fare: connection with survival rate\ndef calc_quantiles(df, feature, num_q):\n    # df - DataFrame, feature - explorated feature, num_q - number of quantiles\n    # return - list with quantile border values \n    q = np.linspace(0, 1, num_q + 1)[1:-1]\n    q_lst = np.quantile(df[pd.notna(df[feature])][feature], q)\n    return q_lst","d8e40571":"quartiles = calc_quantiles(df_train, 'Fare', 4)\nquartiles","6bac7b08":"def calc_surv_rate_by_quantiles(df, feature, num_q):\n    '''\n    df - DataFrame, feature - explorated feature, num_q - number of quantiles\n    return - 'quantiles': list of border values, 'rate': list of survival rates quantiles, 'labels': list of survival rate labels\n    '''\n    q_lst = calc_quantiles(df, feature, num_q)\n    surv_lst = [df[df[feature] < q_lst[0]]['Survived'].mean(), ]\n    \n    for i in range(1, len(q_lst)):\n        surv_lst.append(df[(df[feature] >= q_lst[i-1]) & (df[feature] < q_lst[i])]['Survived'].mean())\n        \n    surv_lst.append(df[df[feature] >= q_lst[-1]]['Survived'].mean())\n    \n    surv_labels = [f'<{q_lst[0]:.2f}', ]\n    for i in range(1, len(q_lst)):\n        surv_labels.append(f'{q_lst[i-1]:.2f}-{q_lst[i]:.2f}')\n    surv_labels.append(f'>{q_lst[-1]:.2f}')\n    \n    return {'quantiles': q_lst, 'rate': surv_lst, 'labels': surv_labels}","dfe782e4":"calc_surv_rate_by_quantiles(df_train, 'Fare', 4)","afe0ae71":"quartiles, surv_rate, surv_labels = calc_surv_rate_by_quantiles(df_train, 'Fare', 4).values()\nax = sns.barplot(x=list(range(4)), y=surv_rate, color='darkcyan');\n\nax.set_xticklabels(surv_labels);\nax.set_xlabel('Fare');\nax.set_ylabel('Survival rate');\nax.set_title('Survival rate among different fare groups');","9aa024b3":"fig, ax = plt.subplots(1, 3, figsize=(15, 5))\n\nquantiles_male, surv_rate_male, surv_rate_male_labels = calc_surv_rate_by_quantiles(df_train[df_train['Sex'] == 'male'], 'Fare', 10).values()\nquantiles_female, surv_rate_female, surv_rate_female_labels = calc_surv_rate_by_quantiles(df_train[df_train['Sex'] == 'female'], 'Fare', 10).values()\nquantiles, surv_rate, surv_rate_labels = calc_surv_rate_by_quantiles(df_train, 'Fare', 10).values()\n\nsns.barplot(ax=ax[0], x=list(range(10)), y=surv_rate_female, color='darkcyan');\nsns.barplot(ax=ax[1], x=list(range(10)), y=surv_rate_male, color='darkcyan');\nsns.barplot(ax=ax[2], x=list(range(10)), y=surv_rate, color='darkcyan');\n\nax[0].set_xticklabels(surv_rate_male_labels);\nax[0].tick_params(axis='x', rotation=90)\nax[0].set_xlabel('fare quantiles');\nax[0].set_ylabel('Survival rate');\nax[0].set_title('female');\n\nax[1].set_xticklabels(surv_rate_female_labels);\nax[1].tick_params(axis='x', rotation=90)\nax[1].set_xlabel('fare quantiles');\nax[1].set_ylabel('Survival rate');\nax[1].set_title('male');\n\nax[2].set_xticklabels(surv_rate_labels);\nax[2].tick_params(axis='x', rotation=90)\nax[2].set_xlabel('fare quantiles');\nax[2].set_ylabel('Survival rate');\nax[2].set_title('all');","e12c8686":"sns.histplot(data=df_train, x='Age', bins=30);","11f9efb8":"age_quantiles, age_surv_rate, age_labels = calc_surv_rate_by_quantiles(df_train[(pd.notna(df_train['Age']))], 'Age', 10).values()\nprint('quantiles:', age_quantiles)\nprint('survival rate:', age_surv_rate)\nprint('labels:', age_labels)","620ccfe9":"fig, ax = plt.subplots(1, 3, figsize=(15, 5))\n\nsns.barplot(ax=ax[0], x=list(range(10)), y=calc_surv_rate_by_quantiles(df_train[pd.notna(df_train['Age'])], 'Age', 10)['rate'], color='darkcyan');\nsns.barplot(ax=ax[1], x=list(range(10)), y=calc_surv_rate_by_quantiles(df_train[(pd.notna(df_train['Age'])) & (df_train['Sex'] == 'male')], 'Age', 10)['rate'], color='darkcyan');\nsns.barplot(ax=ax[2], x=list(range(10)), y=calc_surv_rate_by_quantiles(df_train[(pd.notna(df_train['Age'])) & (df_train['Sex'] == 'female')], 'Age', 10)['rate'], color='darkcyan');\n\nax[0].set_xticklabels(age_labels);\nax[0].tick_params(axis='x', rotation=90);\nax[0].set_xlabel('age quantiles');\nax[0].set_ylabel('Survival rate');\nax[0].set_title('All');\n\nax[1].set_xticklabels(age_labels);\nax[1].tick_params(axis='x', rotation=90);\nax[1].set_xlabel('age quantiles');\nax[1].set_ylabel('Survival rate');\nax[1].set_title('male');\n\nax[2].set_xticklabels(age_labels);\nax[2].tick_params(axis='x', rotation=90);\nax[2].set_xlabel('age quantiles');\nax[2].set_ylabel('Survival rate');\nax[2].set_title('female');","0aedd03c":"df_train_male = df_train[df_train['Sex'] == 'male']\nmax_age_among_males = max(df_train_male['Age'])\nbins=np.linspace(0, max_age_among_males, int(max_age_among_males))\n\nsns.histplot(data=df_train_male[df_train['Survived'] == 1], x='Age', bins=bins);\nsns.histplot(data=df_train_male[df_train['Survived'] == 0], x='Age', bins=bins, color='orange', alpha=0.5);","13504526":"num = 10\n\nage_quantiles = calc_quantiles(df_train[pd.notna(df_train['Age'])], 'Age', num)\nage_quantiles","2acbc249":"df_train.groupby(by='Pclass')['Fare'].describe()","30e1e7af":"df_train[df_train['Fare'] == 0]","0d8ca324":"df_train['Embarked'].isnull().sum()","80862fe8":"df_test['Embarked'].isnull().sum()","f43eee07":"df_train['Embarked'].fillna(value=df_train['Embarked'].mode().values[0], inplace=True)","1b3be0f3":"df_train['Embarked'].value_counts()","277fdef0":"embarked_count = pd.pivot_table(data=df_train, values='Survived', index='Embarked', aggfunc='count')\nembarked_count ","a8f561fc":"embarked_surv_rate = pd.pivot_table(data=df_train, values='Survived', index='Embarked', aggfunc='mean')\nembarked_surv_rate ","c2339961":"fig, ax = plt.subplots(1, 2, figsize=(10, 5))\nports = ['Cherbourg', 'Queenstown', 'Southampton']\n\nsns.barplot(ax=ax[0], x=embarked_count.index.tolist(), y=embarked_count['Survived']);\nsns.barplot(ax=ax[1], x=embarked_surv_rate.index.tolist(), y=embarked_surv_rate['Survived']);\n\nax[0].set_title('Boarded');\nax[1].set_title('Survivance rate');\n\nax[0].set_xticklabels(ports);\nax[1].set_xticklabels(ports);\n\nax[0].set_ylabel('Boarded');\nax[1].set_ylabel('Rate');","5d7bbd70":"pivot = pd.pivot_table(data=df_train, values='Survived', index='Embarked', columns='Sex', aggfunc='count')\npivot","4f056a51":"ax = pivot.plot(kind='bar', stacked=True);\n\nax.set_title('Boarded');\nax.set_ylabel('Boarded people');\nax.set_xticklabels(ports);\nax.tick_params(axis='x', rotation=0);\nax.set_xlabel('');","c9388088":"pivot = pd.pivot_table(data=df_train, values='Survived', index='Embarked', columns='Pclass', aggfunc='count')\npivot","bf85bb11":"ax = pivot.plot(kind='bar', stacked=True);\n\nax.set_title('Boarded');\nax.set_ylabel('Boarded people');\nax.set_xticklabels(ports);\nax.tick_params(axis='x', rotation=0);\nax.set_xlabel('');","26eead45":"df_train['SibSp'].value_counts()","ab801983":"df_test['SibSp'].value_counts()","ca68f4a7":"sibsp = df_train.groupby(by='SibSp')['PassengerId'].count()\nsibsp_surv_rate = df_train.groupby(by='SibSp')['Survived'].mean()\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\nsns.barplot(ax=ax[0], x=sibsp.index, y=sibsp);\nsns.barplot(ax=ax[1], x=sibsp_surv_rate.index, y=sibsp_surv_rate);\n\nax[0].set_xlabel('SibSp number');\nax[1].set_xlabel('SibSp number');\nax[0].set_ylabel('Number of People');\nax[1].set_ylabel('Survivance Rate');\nax[0].set_title('Number of People');\nax[1].set_title('Survivance Rate');","af2d347e":"df_test['Parch'].value_counts().sort_index()","b8a9ed07":"parch = df_train.groupby(by='Parch')['PassengerId'].count()\nparch_surv_rate = df_train.groupby(by='Parch')['Survived'].mean()\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\nsns.barplot(ax=ax[0], x=parch.index, y=sibsp);\nsns.barplot(ax=ax[1], x=parch_surv_rate.index, y=sibsp_surv_rate);\n\nax[0].set_xlabel('Parch number');\nax[1].set_xlabel('Parch number');\nax[0].set_ylabel('Number of People');\nax[1].set_ylabel('Survivance Rate');\nax[0].set_title('Number of People');\nax[1].set_title('Survivance Rate');","d26cbb03":"def create_titles(df):\n    names = df['Name'].values\n    titles = []\n    for name in names:\n        titles.append(name.split(',')[1][1:].split('.')[0])\n    df['Title'] = titles","c883d239":"create_titles(df_train)\ncreate_titles(df_test)","2fe3f5a1":"unique_titles = np.unique(np.array(df_train['Title'], dtype=object))\nunique_titles","4c0ca68a":"titles_value_counts = df_train['Title'].value_counts()\ntitles_value_counts","a3d268d8":"meaningfull_titles = list(titles_value_counts[titles_value_counts.values > 2].index)\nmeaningfull_titles","062aec28":"title_surv_rate = df_train.groupby(by='Title')['Survived'].mean()\ntitle_surv_rate = title_surv_rate[title_surv_rate.index.isin(meaningfull_titles)]\ntitle_surv_rate","2fce72bf":"sns.barplot(x=title_surv_rate.index, y=title_surv_rate);\nplt.xticks(rotation=90);","4ba2021d":"important_titles = ['Dr', 'Master', 'Rev']","011781a1":"df_train['Title'] = df_train['Title'].apply(lambda x : x if x in important_titles else 'other')","300da7f8":"df_test['Title'] = df_test['Title'].apply(lambda x : x if x in important_titles else 'other')","a6f60fd4":"df_train.drop(columns=['Sex_encoded'], inplace=True)","75f98cfb":"# Pclass\npclass_dict = {\n    1: 'pclass_1',\n    2: 'pclass_2',\n}","85ef81fa":"# Sex\nsex_dict = {\n    'male': 'sex_male',\n}","cfb1c7ac":"# SibSp\nsibsp_dict = {\n    0: 'sibsp_0',\n    1: 'sibsp_1',\n    2: 'sibsp_2',\n    3: 'sibsp_3',\n    4: 'sibsp_4',\n}","731425e8":"# Parch\nparch_dict = {\n    0: 'parch_0',\n    1: 'parch_1',\n    2: 'parch_2',\n    3: 'parch_3',\n    4: 'parch_4'\n}","0edd5b81":"# Embarked\nembarked_dict = {\n    'S': 'embarked_s',\n    'C': 'embarked_c'\n}","b92121f3":"# Title\ntitle_dict = {\n    'Dr': 'title_dr',\n    'Master': 'title_master',\n    'Rev': 'title_rev'\n}","0d5b6279":"cat_features_dict = [pclass_dict, sex_dict, sibsp_dict, parch_dict, embarked_dict, title_dict]\ncat_features = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked', 'Title']\ncat_features = dict(zip(cat_features, cat_features_dict))","80186dca":"cat_features","083451db":"def encode_features(df):\n    for cat in cat_features:\n        # cat_dict - dictionary for each category\n        cat_dict = cat_features[cat]\n        for key in cat_dict:\n            val = cat_dict[key]\n            df[val] = (df[cat] == key).astype(np.int)","f0cde925":"encode_features(df_train)","484bffae":"encode_features(df_test)","5a7430bf":"df_train.drop(columns=['PassengerId', 'Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Embarked', 'Title'], inplace=True)","f2753a02":"df_train.head()","975295d3":"df_test.drop(columns=['Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Embarked', 'Title'], inplace=True)","1db8163a":"# Lets fill in null values in train and test datasets\ndf_train.isnull().sum()","1ccb6903":"df_train['Age'] = df_train['Age'].fillna(value=df_train['Age'].median())","c7d362e3":"df_test.isnull().sum()","60d7883e":"df_test['Age'] = df_test['Age'].fillna(value=df_test['Age'].median())\ndf_test['Fare'] = df_test['Fare'].fillna(value=df_test['Fare'].median())","8fca8c1f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","8634f936":"X_train, X_test, y_train, y_test = train_test_split(df_train.drop(columns='Survived'), df_train['Survived'], train_size=0.8)\n\nmodel = LogisticRegression(max_iter=1000)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)","d83dd062":"from sklearn.metrics import accuracy_score","83e4485b":"ac_score = accuracy_score(y_test, y_pred)","75b02ca7":"print(f'Accuracy score: {ac_score * 100:.2f}%')","0983aabe":"# Now let's check how many of the answers we think are correct are actually correct. Actually it's called precision score.","7bf08741":"from sklearn.metrics import precision_score","1bf669d8":"prec_score = precision_score(y_test, y_pred)","10847103":"print(f'Precision score: {prec_score * 100:.2f}%')","a596eb0f":"# Now let's check what percentage of survivors we correctly identified as survivors. ","1a4d76d6":"from sklearn.metrics import recall_score","32230fba":"recall_score = recall_score(y_test, y_pred)","d5253bc2":"print(f'Recall score: {recall_score * 100:.2f}%')","a997f84b":"from sklearn.metrics import confusion_matrix","fc19735c":"cm = confusion_matrix(y_test, y_pred)\ncm","74ebd532":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\n\nsns.heatmap(ax=ax[0], data=cm, annot=True, cmap='Blues', cbar=False);\nsns.heatmap(ax=ax[1], data=cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues', cbar=False);\n\nax[0].set_ylabel('prediction');\nax[0].set_xlabel('reality');\nax[0].set_yticklabels(['not survived', 'survived']);\nax[0].set_xticklabels(['not survived', 'survived']);\nax[0].set_title('Number of people');\n\nax[1].set_ylabel('prediction');\nax[1].set_xlabel('reality');\nax[1].set_yticklabels(['not survived', 'survived']);\nax[1].set_xticklabels(['not survived', 'survived']);\nax[1].set_title('Percentage of people');","ba5e72d7":"output = pd.DataFrame(df_test['PassengerId'])","6b356c51":"output['Survived'] = model.predict(df_test.drop(columns=['PassengerId']))","f1460125":"output","37484280":"output.to_csv('submission.csv', index=False)","05e68f9d":"The 'Ticket' and 'Cabin' columns are not very informatve and could be dropped from train and test datasets","d7fb7fc1":"5. SibSp - amount of siblings and spourses travelled together with the passenger.\nLets explore how many passenger have siblings and spourses and how it affect the survival rate.","ae8c0d93":"Lets encode feature 'sex' with digits 0 and 1","866d43aa":"6. Parch survival rate\ndf_train['Parch'].value_counts().sort_index()","98960e4c":"# EDA","03559d78":"It could be seen from the figures the most people travell without siblings or spouses. Also presence of one or two siblings or spouses considerably increase survivance rate.\nConclusion: SibSp is an important but non linear feature. Here \"nonlinearity\" means that 1 is better than 0, but 2 is worse than 1 and 3 is worse than 0.","5f1e3ebe":"To estimate all the correct and wrong answers let's look at confusion matrix.","c9dcd308":"Only 19% of males survived, at the same time 74% of females survived. So the 'Sex' feature is very important for the survivance prediction.","258e3932":"Lets look at how many people boarded at a particular port.","613ace5d":"Now we divide the continuous value 'Fare' into quantiles. The function calc_quantiles divides values into num_q quantiles and returns quantiles border values.","fcb2caa1":"To better visualize amount of victims in a particular class lets create custom visualization tool - cloud of dots.","ec5814ac":"Lets see how many correct answers (in percents) were given. ","9febf557":"For women survival rate is high for all age groups. For mens survival rate is more that 50% for age group below 14 y.o. The hypothesis is as follows: the maturity age for mens was 14 y.o. \nIn other worlds until 14 male is a boy, after 14 he is a men.\nLets explore this hypothesis.","20353fc3":"Most of the people traveled by 3rd class. The number of pasengers in the first and second clases does not differ much.","bf7a54ac":"The least survival rate have people who boarded the ship at Southampton.\nLets discover does it correlate with sex and cabin class features.","5a9252ce":"The most of the people travelled without parents or children. The survivance rate is higher for people with parents and\/or children. \nAmount of passenger with Parch more than 3 drops by 10 times. Also test dataframe has records with Parch value equal to 9. \nSo if this feature will be one hot encoded, then it should be like 0, 1, 2, 3 and > 3.","ac02df78":"Let's test the function","35fd0003":"How many mens and women travelled by specfic cabin class?","e93ed30e":"Let's remove all features that are already encoded.","07f7bef0":"4. Age. How does the age affect survival rate?","d9f13a3d":"7. Names and titles. Dataframe concsist of column where from name and title of the passenger could be extracted. Let explore how title affect chances to survive.","2187ca30":"How many of them survived? (According to train dataset).","ad599ad1":"There are a group of people who didn't pay for their ride (fare is 0). But they travelled by different cabin classes.\nAll of them are male and all except one died in disaster. Are they crew?","de572ee0":"# Titanic: Exploratory data analysis and feature engineering","a3cc6791":"Fill in null values","50142305":"# Predicting survival table for test dataframe and saving it to external file.","35db9845":"Preparing dataframe to the model. Let's remove temporary feature 'Sex_encoded' used in EDA","241d4554":"The function calc_surv_rate_by_quantiles divides continuous value into quantiles and calculates survival rate for each quantile.","b89cace5":"Check out the null values in the train and test datasets. Train dataset consists nulls in 'Age' and 'Embarked' features. 'Embarked' is categorical feature and we will fill these null values during EDA.\nTest dataset consists nulls in 'Age' and 'Fare' features. We will fill in them just before applying prediction model.","8f8d4c49":"Now lets use the function to divide 'Fare' values into 4 quantiles and to calculate the survival rate.","27ac8d28":"1. How many mens and women were on the ship? We can explore how many mens and women were on the ship concatenating train and test datasets. Amount of men was almost twice more than women.","889a13b3":"3. Fare. Ticket price is expected to correlate with 'Pclass' feature but could provide additional more detailed information about passengers.\nLets look at fare distribution.","4b8f43eb":"4. Embarked feature. There were three ports, where people boarded the ship. S - Southampton, C - Cherbourg, Q - Queenstown. Lets check and fill in null values.","5ce894e7":"The correlation between sex and embarked port Southampton could be clearly observed. The correlation with cabin class is not so obvious. \nConclusion here: 'embarked' is an important feature, it provides additional innformation affecting the survival rate and should be used in prediction.","386e9176":"**PassengerId** - ID number of the passeger, the column is necessary to identifying passenger and providing solution\n\n**Survived** - passenger survived (1) or died (0)\n\n**Pclass** - class of the passenger's cabin, 1 - the most expensive class, 3 - the cheapest\n\n**Name** - name of the passenger\n\n**Sex** - male or female\n\n**Age** - age of the passenger, it's not integer value. E.g. age of 3.5 is possible\n\n**SibSp** - number of siblings and spouses with the passenger\n\n**Parch** - number of children and parents with the passenger\n\n**Ticket** - code of ticket, consist of digits and number, useless for the survival rate prediction\n\n**Fare** - how much the passenger paid for the trip, there are zero values (crew?)\n\n**Cabin** - number of the passenger's cabin\n\n**Embarked** - where the passenger boarded the ship. There were three ports: C - Cherbourg, S - Southampton, Q - Queenstown.","1d0207b8":"Lets create new feature with title of the passenger.","1bb1bfd0":"The part of men in 3rd class is higher than in other classes, so according to previous conclusion survivance in this class is expected to be low. Anyway columns 'Sex' and 'Pclass' are expected to correlate. Lets see on the survivance rate among people from different classes.","b3a18dd1":"# The Model. Fitting, testing and prediction with Logistic Regression.","7a8b1d6d":"It could be clearly seen that the hypothesis is not justified. There were very small number of boys in the age of 10-15.","bec3b459":"The most of the victims are mens from 3rd and 2nd cabin classes. Even females in 3rd class have more chances to survive than males from 1st class. It seems that both features 'Sex' and 'Pclass' have considerably affect on survival probability. Most of the victims are males from 3rd class.","a2b61deb":"This notebook shows how to perform exploratory data analysis (EDA) and create new features on Kaggle Titanic dataset","3f37d0c9":"2. How many people traveled by each class? Lets join train and test datasets to calculate total amount of people in particular cabin class.","035203bd":"Most of the survivors are women. Lets calculate the survival rate for both sex.","d58d954e":"Lets explore the survivance rate"}}