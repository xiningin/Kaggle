{"cell_type":{"f636cdd2":"code","80a3e4f4":"code","5f3c0e7c":"code","03882b9c":"code","f6818032":"code","ecbe15c5":"code","8b97fc4e":"code","e9eeaeeb":"code","74e305d2":"code","b64f8367":"code","ee69ac7e":"code","0ce5ae83":"code","1aaa44c7":"code","bb178d38":"code","df845e52":"code","675b78e2":"code","f7868e6b":"code","a34688cd":"code","a4eb267f":"code","8254634c":"code","9626c622":"code","bd759cc0":"code","9e582f77":"code","ed8b7701":"code","d059cb57":"code","431189b7":"code","bf4cdb55":"code","bd1801ad":"code","2b5c833c":"code","822d9d65":"code","c3a0df3e":"code","5c81187b":"code","d0fb3f4e":"code","ef09341f":"markdown","0269747a":"markdown","da26a251":"markdown","64235d71":"markdown","3adcfbc7":"markdown","b945fed1":"markdown","fbaa2ea0":"markdown","eb3a3949":"markdown","c349a0fa":"markdown","6fab2dcd":"markdown","06e7cd82":"markdown","8c50a0e8":"markdown"},"source":{"f636cdd2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80a3e4f4":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passenger=test_df[\"PassengerId\"]","5f3c0e7c":"train_df.columns","03882b9c":"train_df.head()","f6818032":"train_df.describe()","ecbe15c5":"train_df.info()","8b97fc4e":"#Method to make bar plot\n\ndef bar_plot(variable):\n    \n    var = train_df[variable]\n    varValue = var.value_counts()\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} : \\n {}\".format(variable,varValue))","e9eeaeeb":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1 : #All features that is in 'category1' is used defined method\n    bar_plot(c)","74e305d2":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2 :\n     print(\"{} : \\n\".format(train_df[c].value_counts()))","b64f8367":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins =50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist.\".format(variable))\n    plt.show()\n    ","ee69ac7e":"numericVar =[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar :\n    plot_hist(n)","0ce5ae83":"train_df[[\"Pclass\",\"Survived\"]]","1aaa44c7":"#Pclass - Survived\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","bb178d38":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","df845e52":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","675b78e2":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","f7868e6b":"train_df[[\"Cabin\",\"Survived\"]].groupby(\"Cabin\",as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","a34688cd":"train_df[[\"Embarked\",\"Survived\"]].groupby(\"Embarked\",as_index = False).mean().sort_values(by = \"Survived\",ascending = False)\n","a4eb267f":"train_df[[\"Embarked\",\"SibSp\"]].groupby(\"Embarked\",as_index = False).max().sort_values(by = \"SibSp\",ascending = False)\n","8254634c":"train_df[[\"Embarked\",\"Pclass\"]].groupby(\"Embarked\",as_index = False).max().sort_values(by = \"Pclass\",ascending = False)\n","9626c622":"train_df[[\"Embarked\",\"Fare\"]].groupby(\"Embarked\",as_index = False).max().sort_values(by = \"Embarked\",ascending = False)\n","bd759cc0":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features : \n        #1st quartile\n        Q1 = np.percentile(df[c],25)\n        \n                \n        #3rd quartile\n        Q3 = np.percentile(df[c],75)\n        \n        \n        #IQR\n        \n        IQR = Q3-Q1\n        \n        \n        #Outlier step\n        \n        outlier_step = IQR * 1.5\n        \n        \n        #detect outlier and their indeces\n        \n        outlier_list_col = df[(df[c]< Q1-outlier_step) | (df[c]> Q3 + outlier_step)].index\n        \n        #store indeces\n        \n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","9e582f77":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","ed8b7701":"#drop outliers\n\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","d059cb57":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","431189b7":"train_df.head()","bf4cdb55":"train_df.columns[train_df.isnull().any()]","bd1801ad":"train_df.isnull().sum()","2b5c833c":"train_df[train_df[\"Embarked\"].isnull()]","822d9d65":"train_df.boxplot(column = \"Fare\",by =\"Embarked\")\nplt.show()","c3a0df3e":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","5c81187b":"train_df[train_df[\"Fare\"].isnull()]","d0fb3f4e":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","ef09341f":"<a id = \"4\"><a><br>\n## Categorical Variable","0269747a":"<a id = \"1\"><\/a><br>\n# Load and Check Data","da26a251":"<a id = \"2\"><a><br>\n# Variable Description\n    \n   1. PassengerId : Unique id number for each passenger.\n   1. Survived : survive or die? survive(1),died (0)\n   1. Pclass : passenger class\n   1. Name : passenger's name\n   1. Sex : passenger's gender\n   1. Age : passenger's age\n   1. SibSp : number of siblings\/spouses\n   1. Parch : number of parents\/children\n   1. Ticket : ticket number\n   1.  Fare : amount of money that is spent for ticket\n   1.  Cabin : categoryof cabin\n   1.  Embarked : port wherepassenger embarked ( C = Cherbourg, Q =Qeenstown,S=Southampton)\n    \n","64235d71":"<a id = \"7\"><a><br>\n# Outlier Detection","3adcfbc7":"<a id = \"3\"><a><br>\n# Univariate Variable Analysis\n\n* Categorical Variable : Survived,Sex,Pclass,Embarked,Cabin,Name,Ticket,Sibsp,Parch\n* NumericalVariable : Fare,Age,PassengerId","b945fed1":"<a id = \"10\"><a><br>\n## Fill Missing Value","fbaa2ea0":"<a id =\"6\"><a><br>\n# Basic Data Analysis\n    \n* PClass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Cabin - Survived\n* Embarked - Survived","eb3a3949":"<a id = \"5\"><a><br>\n## NumericalVariable","c349a0fa":"* float64(2) : Age, Fare\n* int64(5) : PassengerId,Survived,Pclass,SibSp,Parch\n* object(5) : Name,Sex,Ticket,Cabin,Embarked","6fab2dcd":"# Exploring Titanic Data Set - Introduction #\n\nEverybody know the Titanic story. \nI used this data set with DataiTeam's instruction. I want to exercise my learnings about the introduction to machine learning DataiTeam classes on Udemy.\n\n<font color = 'blue'>\n      \nContent :\n\n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [NumericalVariable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7) \n1. [Missing Values](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","06e7cd82":"<a id = \"9\"><a><br>\n## Find Missing Value","8c50a0e8":"<a id = \"8\"><a><br>\n# Missing Values\n\n* Find Missing Value\n    \n* Fill Missing Value"}}