{"cell_type":{"ec4c24ec":"code","b3d61086":"code","340acaa4":"code","000b1e2b":"code","8921f4a2":"code","08d28d9a":"code","bb53d26c":"code","0cf8571f":"code","4db556f1":"code","841e99f0":"code","7a753932":"code","c3622d67":"code","5c291599":"code","60845124":"code","c67fde68":"code","22618e66":"code","70037996":"code","4a426809":"code","74df04cb":"code","4792f23e":"code","a9afb13a":"code","d77b7c2a":"code","a1148533":"code","207c6724":"code","ab3e5fb3":"code","8dd3fd99":"code","99b4bb7b":"code","af5b86c8":"markdown","2c6f4f95":"markdown","958575c4":"markdown","c8297222":"markdown","88bd092d":"markdown","1be85438":"markdown","e1066c37":"markdown"},"source":{"ec4c24ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3d61086":"df = pd.read_csv('\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv')","340acaa4":"df.set_index(['Unnamed: 0','customerID'], inplace = True)\ndf.head()","000b1e2b":"df.info()","8921f4a2":"df_object = df.select_dtypes('object')\n\nsummary = []\nfor i in range(16):\n    summary_stat = df_object.iloc[:,i].value_counts()\n    summary.append(summary_stat)\n\nsummary","08d28d9a":"#Cleaning up the data\n\ndf['MultipleLines']= df['MultipleLines'].replace(['No phone service'],'No')\ndf['OnlineSecurity']= df['OnlineSecurity'].replace(['No internet service'],'No')\ndf['OnlineBackup']= df['OnlineBackup'].replace(['No internet service'],'No')\ndf['DeviceProtection']= df['DeviceProtection'].replace(['No internet service'],'No')\ndf['TechSupport']= df['TechSupport'].replace(['No internet service'],'No')\ndf['StreamingTV']= df['StreamingTV'].replace(['No internet service'],'No')\ndf['StreamingMovies']= df['StreamingMovies'].replace(['No internet service'],'No')\ndf['InternetService']= df['InternetService'].replace(['No'],'None')\n\ndf = df.replace(['No'],0)\ndf = df.replace(['Yes'],1)\ndf = df.replace(['Male'],0)\ndf = df.replace(['Female'],1)\n\ndf['TotalCharges'] = df['TotalCharges'].replace([\" \"],np.nan)\ndf['TotalCharges'] = pd.to_numeric(df['TotalCharges'])\n\n#Filling null TotalCharges (in case of Tenure 0 ) equal to monthly charges\ndf['TotalCharges'].fillna(df.MonthlyCharges, inplace = True)","bb53d26c":"#Calculating one-time charges\/discounts\ndef cal(x,y,z):\n    x_new = z - x*y\n    \n    return x_new\n    \ndf['One_time_charges'] = df.apply(lambda row: cal(row['tenure'],row['MonthlyCharges'],row['TotalCharges']), axis = 1)\ndf","0cf8571f":"def conditions(s):\n    if (s['InternetService'] == 'Fiber optic'):\n        return 'Fiber optic'\n    elif (s['InternetService'] == 'DSL'):\n        return 'DSL'\n    else:\n        return 0\n    \ndf['InternetService_type'] = df.apply(conditions, axis = 1)\ndf['InternetService']= df['InternetService'].replace(['Fiber optic','DSL','None'],[1,1,0])","4db556f1":"import seaborn as sns\nfrom matplotlib import pyplot as plt\n\nproducts = df.iloc[:,[5,6,7,8,9,10,11,12,13,19]]\nproducts = products.groupby('Churn').sum()\nproducts.reset_index(inplace = True)\nproducts\n\nfig, axes = plt.subplots(3,3,figsize = (18,10), sharey = True)\n\nsns.barplot(ax = axes[0,0], data = products, x = 'Churn', y = 'PhoneService')\nsns.barplot(ax = axes[0,1], data = products, x = 'Churn', y = 'MultipleLines')\nsns.barplot(ax = axes[0,2], data = products, x = 'Churn', y = 'InternetService')\nsns.barplot(ax = axes[1,0], data = products, x = 'Churn', y = 'OnlineSecurity')\nsns.barplot(ax = axes[1,1], data = products, x = 'Churn', y = 'OnlineBackup')\nsns.barplot(ax = axes[1,2], data = products, x = 'Churn', y = 'DeviceProtection')\nsns.barplot(ax = axes[2,0], data = products, x = 'Churn', y = 'TechSupport')\nsns.barplot(ax = axes[2,1], data = products, x = 'Churn', y = 'StreamingTV')\nsns.barplot(ax = axes[2,2], data = products, x = 'Churn', y = 'StreamingMovies')\n","841e99f0":"from matplotlib.colors import ListedColormap\n\nproducts_percentage = (100. * products \/ products.sum()).round(0)\nproducts_percentage['Churn'] = products_percentage['Churn'].replace([100],1)\nsns.set()\nproducts_percentage.set_index('Churn').T.plot(kind='bar', stacked=True)\n\nproducts_percentage","7a753932":"# Checking Churn Rate within InternetService Type\ntmp = pd.DataFrame(df.groupby('Churn')['InternetService_type'].value_counts())\ntmp.rename(columns = {'InternetService_type':'Value'}, inplace = True)\ntmp.reset_index(inplace = True)\ntmp['Churn'] = tmp.Churn.astype(str)\ntmp = tmp[tmp['InternetService_type'] != 0]\n#tmp\nsns.set()\nsns.histplot(data = tmp, x = 'InternetService_type', hue = 'Churn', weights = 'Value')\n","c3622d67":"# Checking Churn Rate within InternetService Type\ntmp = pd.DataFrame(df.groupby('Churn')['PaymentMethod'].value_counts())\ntmp.rename(columns = {'PaymentMethod':'Value'}, inplace = True)\ntmp.reset_index(inplace = True)\ntmp['Churn'] = tmp.Churn.astype(str)\n#tmp = tmp[tmp['InternetService_type'] != 0]\n#tmp\nsns.set()\nlabels = ['Mailed check', 'Credit card (automatic)', 'Electronic check',\n       'Bank transfer (automatic)']\ng = sns.histplot(data = tmp, x = 'PaymentMethod', hue = 'Churn', weights = 'Value')\ng.set_xticklabels(labels = labels,rotation = 30)\n","5c291599":"# Checking Churn Rate within InternetService Type\ntmp = pd.DataFrame(df.groupby('Churn')['PaperlessBilling'].value_counts())\ntmp.rename(columns = {'PaperlessBilling':'Value'}, inplace = True)\ntmp.reset_index(inplace = True)\ntmp['Churn'] = tmp.Churn.astype(str)\ntmp['PaperlessBilling'] = tmp.PaperlessBilling.astype(str)\n#tmp\nsns.set()\nsns.histplot(data = tmp, x = 'PaperlessBilling', hue = 'Churn', weights = 'Value')","60845124":"df['N'] = df.reset_index().index\nsns.scatterplot(data = df, y = 'tenure', x='N', hue= 'Churn')\n\n","c67fde68":"df['Total_Products'] = df.iloc[:,[5,6,7,8,9,10,11,12,13]].sum(axis=1)\nTotal_products = pd.DataFrame(df.groupby('Churn')['Total_Products'].value_counts())\nTotal_products.rename(columns = {'Total_Products':'Value'}, inplace = True)\nTotal_products.reset_index(inplace = True)\nTotal_products = Total_products.pivot(index = 'Churn', columns = 'Total_Products', values = 'Value')\nTotal_products = (100. * Total_products \/ Total_products.sum()).round(0)\nTotal_products.reset_index(inplace = True)\nsns.set()\nTotal_products.set_index('Churn').T.plot(kind='bar', stacked=True)\n","22618e66":"df.head()","70037996":"\n\n#df_products = df.iloc[:,[5,6,7,8,9,10,11,12,13,14,19]]\n#df_2 = df.iloc[:,10:19]\ndf_3 = df.loc[:,['gender','SeniorCitizen','Partner','Dependents','PaymentMethod','InternetService_type','Churn']]\n\n#bi-variate analysis\nplt.style.use('seaborn-dark')\nsns.pairplot(df_3,hue='Churn',palette='Dark2');\nplt.tight_layout()","4a426809":"from matplotlib.pyplot import figure\n\nfig, ax = plt.subplots()\n\ncolors = {0:'grey', 1:'black'}\n\nax.scatter(df['TotalCharges'], df['tenure'], c=df['Churn'].map(colors))\n#df.plot.scatter('TotalCharges','tenure','Churn')","74df04cb":"fig, ax = plt.subplots()\n\ncolors = {0:'grey', 1:'black'}\n\nax.scatter(df['One_time_charges'], df['tenure'], c=df['Churn'].map(colors))\n#df.plot.scatter('TotalCharges','tenure','Churn')","4792f23e":"fig, ax = plt.subplots()\n\ncolors = {0:'grey', 1:'black'}\n\nax.scatter(df['MonthlyCharges'], df['tenure'], c=df['Churn'].map(colors))\n#df.plot.scatter('TotalCharges','tenure','Churn')","a9afb13a":"fig, ax = plt.subplots()\ncolors = {0:'grey', 1:'black'}\n\nax.scatter(df['Total_Products'], df['MonthlyCharges'], c=df['Churn'].map(colors))\n#df.plot.scatter('TotalCharges','tenure','Churn')","d77b7c2a":"tmp = df.iloc[:,5:14]\ns = np.where(tmp, ['{}, '.format(x) for x in tmp.columns], '')\ndf['ProductNames'] = pd.Series([''.join(x).strip(', ') for x in s], index=tmp.index)\n","a1148533":"PhoneService_avg_mch = df[(df['Total_Products'] == 1) & (df['ProductNames'] == 'PhoneService')]['MonthlyCharges'].mean()\ndf[(df['Total_Products'] == 1) & (df['ProductNames'] == 'InternetService')]['MonthlyCharges'].describe()\n\n\ndf[df['Total_Products'] == 8]['ProductNames'].value_counts()\ndf[(df['Total_Products'] == 7) & (df['Churn'] == 0)][['tenure','MonthlyCharges']].describe()\n#df[(df['Total_Products'] == 7) & (df['Churn'] == 1)][['tenure','MonthlyCharges']].describe()","207c6724":"df[(df['Total_Products'] == 2) & (df['ProductNames'] == 'PhoneService, MultipleLines')]['MonthlyCharges'].describe()\ndf[(df['Total_Products'] == 2) & (df['ProductNames'] == 'PhoneService, InternetService')]['MonthlyCharges'].describe()","ab3e5fb3":"df.iloc[:,[1,2,3,4,5,14,15,16,17]][df.Total_Products == 1][df.InternetService == 1].describe()","8dd3fd99":"df.head()","99b4bb7b":"def cal(x,y,z):\n    x_new = z - x*y\n    \n    return x_new\n    \ndf['One_time_charges'] = df.apply(lambda row: cal(row['tenure'],row['MonthlyCharges'],row['TotalCharges']), axis = 1)\ndf","af5b86c8":"The payment method 'Electronic check' seems to much higher proportion of churned customers","2c6f4f95":"Internet service, StreamingTV and StreamingMovies products seem to have a marginally higher proportion of churned customers.","958575c4":"Calculating one-off charges or discounts provided to customers by subtracting total monthly charges from total charges. The negative amount could mean:\n- Discounts\n- Increase in monthly payments over the tenure (possibly due to additional services)\n\nBoth cases signify positive attributes towards customer relationship.\n\nPositive One-off charges could mean, on the other hand, either:\n- Decrease in monthly payments over the tenure (due to discontinuation of additional services)\n- One-off payments for additional services (installation, tech support etc.)","c8297222":"One time charges\/discounts do not seem to impact the churn rate ","88bd092d":"PhoneService and InternetService seem to be more popular products. Let's compare the %churned in each category","1be85438":"Customers with high monthly charge and lower tenure tend to have higher probability of turning. Let's see how monthly charges vary per cst","e1066c37":"Clearly, we see higher Churn Rate in Fibre Optic service Type"}}