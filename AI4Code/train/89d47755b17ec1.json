{"cell_type":{"bc804519":"code","af52bb42":"code","3bf14d6d":"code","21e846dc":"code","c8314214":"code","90170ea4":"code","d64382ed":"code","007f975b":"code","0e780824":"code","eb43daf8":"code","76330a04":"code","29450857":"code","5ba98bec":"code","0af57d56":"code","128f1f66":"code","eade2664":"code","560ba0d8":"code","ec6e33de":"code","53deed43":"code","553d3ea1":"code","defb3ade":"code","555a6869":"code","ff229c23":"code","47f3c157":"code","f2503bad":"code","12bd05e4":"code","b11a1daa":"code","f0178cfd":"code","c828b11f":"code","643237a6":"code","48d3b710":"code","0477ea33":"code","64294a52":"code","583da7c0":"code","9775d4c3":"code","1590d300":"code","84efa5cc":"code","6a65ee48":"code","4dca9199":"code","caf2fe72":"code","991cbdda":"code","40b4252e":"code","52f9cd57":"code","383386b5":"code","8629baff":"code","3397a57d":"code","8f59bc53":"code","74d57ac4":"code","bfaada58":"code","21bc87df":"code","b23c45e0":"code","13250539":"code","93d54719":"code","3542dc99":"code","8e77883a":"code","3818e3b4":"code","49ddeba4":"code","bd0d1a2b":"markdown","97aee811":"markdown","5eb0cb39":"markdown","1fabeb34":"markdown","15a97ab5":"markdown","c46ccc29":"markdown","2e9906ab":"markdown","f915d982":"markdown","8a073375":"markdown","c1341b9a":"markdown","0ceaf6e5":"markdown","c92f2396":"markdown","44d8a9dd":"markdown","0d562ed7":"markdown","b07bfc67":"markdown","31d15189":"markdown","1c7f8164":"markdown","19cb442d":"markdown","2d07d9da":"markdown","c6b406bb":"markdown","ce2f7038":"markdown","c9458afc":"markdown","6920239f":"markdown","40d62e31":"markdown","7e386fdf":"markdown","8bf73cf0":"markdown","4abb5d8e":"markdown","fe10658b":"markdown","40881b16":"markdown","629ff3bf":"markdown","df63fcdd":"markdown","8ef4314c":"markdown","8cb0900a":"markdown","b296930e":"markdown","2edea471":"markdown","1471915e":"markdown","ec72d534":"markdown","33e72fd3":"markdown","ea38ddf8":"markdown","6897611e":"markdown","0d3f1ea3":"markdown","0c0f5e91":"markdown","4c99fb0e":"markdown","41be8144":"markdown","d6926939":"markdown","a772ac64":"markdown"},"source":{"bc804519":"##Importing the packages\n#Data processing packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Visualization packages\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport datetime as dt\nfrom wordcloud import WordCloud, STOPWORDS\nfrom collections import OrderedDict\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\n#Machine Learning packages\nfrom sklearn.svm import SVC,NuSVC\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB,MultinomialNB\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis, LinearDiscriminantAnalysis\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix","af52bb42":"data = pd.read_csv(\"..\/input\/train.csv\")","3bf14d6d":"#Find the size of the data Rows x Columns\ndata.shape","21e846dc":"#Display first 5 rows of Employee Attrition data\ndata.head()","c8314214":"#Find Basic Statistics like count, mean, standard deviation, min, max etc.\ndata.describe()","90170ea4":"#Find the the information about the fields, field datatypes and Null values\ndata.info()","d64382ed":"#first removing features which are irrelevant for our prediction\ndata.drop(['id', 'imdb_id', 'original_title', 'poster_path', 'title', 'Keywords'],axis=1,inplace=True)","007f975b":"data.info()","0e780824":"#Converting null values in \"homepage\" to \"0\" and others to \"1\" and insert new column \"has_homepage\"\ndata['has_homepage'] = 0\ndata.loc[data['homepage'].isnull() == False, 'has_homepage'] = 1\ndata=data.drop(['homepage'],axis =1) #Drop the original column\n\n#Homepage v\/s Revenue\nsns.catplot(x ='has_homepage', y ='revenue', data=data);\nplt.title('Revenue for film with and without homepage');","eb43daf8":"#Converting null values in \"belongs_to_collection\" to \"0\" and others to \"1\" and insert new column \"collection\"\ndata['collection'] = 0\ndata.loc[data['belongs_to_collection'].isnull() == False, 'collection'] = 1\ndata=data.drop(['belongs_to_collection'],axis =1) #Drop the original column\n\n#collections v\/s Revenue\nsns.catplot(x= 'collection', y ='revenue', data=data);\nplt.title('Revenue for film with and without collection');","76330a04":"#Mapping overview present to 1 and nulls to 0\ndata['overview']=data['overview'].apply(lambda x: 0 if pd.isnull(x) else 1)\n\n#overview v\/s Revenue\nsns.catplot(x='overview', y='revenue', data=data);\nplt.title('Revenue for film with and without overview');","29450857":"#normalizing budget\na, b = 1, 100\nm, n = data.budget.min(), data.budget.max()\ndata['budget'] = (data.budget - m) \/ (n - m) * (b - a) + a\n\n#Budget vs Revenue\nplt.figure(figsize=(24,6))\nplt.subplot(121); sns.scatterplot(x=\"budget\", y=\"revenue\", data=data)\nplt.subplot(122); sns.regplot(x=\"budget\", y=\"revenue\", data=data)","5ba98bec":"#check correlation between variables\ncol = ['revenue','budget','popularity','runtime']\nplt.subplots(figsize=(10, 8))\ncorr = data[col].corr()\nsns.heatmap(corr, xticklabels=col,yticklabels=col, linewidths=.5, cmap=\"Reds\")","0af57d56":"#Exploring Genres\n#Finding the count of name field in the dictionary of the foramt [{'id': 18, 'name': 'Drama'}]\ngenres = {}\nfor i in data['genres']:\n    if(not(pd.isnull(i))): #Do this only if value is not-null (there are 7 null values)\n        if (eval(i)[0]['name']) not in genres: #if the word(genres) is not already already in the dictionary then initialize it to 1\n            genres[eval(i)[0]['name']]=1\n        else:\n                genres[eval(i)[0]['name']]+=1 #if the word(genres) is in the dictionary then increment the count by 1\nprint(genres) #Print the Genres and their count\n\nplt.figure(figsize = (12, 8))\nwordcloud = WordCloud(background_color=\"white\",width=1000,height=1000, max_words=10,relative_scaling=0.5,normalize_plurals=False).generate_from_frequencies(genres)\nplt.imshow(wordcloud)\nplt.title('Top genres')\nplt.axis(\"off\")\nplt.show()","128f1f66":"#adding number of genres for each movie\ngenres_count=[]\nfor i in data['genres']:\n    if(not(pd.isnull(i))):\n        genres_count.append(len(eval(i)))\n    else:\n        genres_count.append(0)\ndata['num_genres'] = genres_count","eade2664":"#Genres v\/s revenue\nsns.catplot(x='num_genres', y='revenue', data=data);\nplt.title('Revenue for different number of genres in the film');","560ba0d8":"#Dropping genres\ndata.drop(['genres'],axis=1, inplace = True)","ec6e33de":"#Production companies\n#Adding production_companies count for  data\nprod_comp_count=[]\nfor i in data['production_companies']:\n    if(not(pd.isnull(i))):\n        \n        prod_comp_count.append(len(eval(i)))\n        \n    else:\n        prod_comp_count.append(0)\ndata['num_prod_companies'] = prod_comp_count","53deed43":"#number of prod companies vs revenue\nsns.catplot(x='num_prod_companies', y='revenue', data=data);\nplt.title('Revenue for different number of production companies in the film');","553d3ea1":"#Dropping production_companies\ndata.drop(['production_companies'],axis=1, inplace = True)","defb3ade":"#production_countries\n#Adding production_countries count for  data\nprod_coun_count=[]\nfor i in data['production_countries']:\n    if(not(pd.isnull(i))):\n        \n        prod_coun_count.append(len(eval(i)))\n        \n    else:\n        prod_coun_count.append(0)\ndata['num_prod_countries'] = prod_coun_count","555a6869":"#number of prod countries vs revenue\nsns.catplot(x='num_prod_countries', y='revenue', data=data);\nplt.title('Revenue for different number of production countries in the film');","ff229c23":"#Dropping production_countries\ndata.drop(['production_countries'],axis=1, inplace = True)","47f3c157":"#cast\n#Adding cast count for  data\ntotal_cast=[]\nfor i in data['cast']:\n    if(not(pd.isnull(i))):\n        \n        total_cast.append(len(eval(i)))\n        \n    else:\n        total_cast.append(0)\ndata['cast_count'] = total_cast","f2503bad":"#(No. of Cast members) vs Revenue\nplt.figure(figsize=(24,6))\nplt.subplot(121); \nsns.scatterplot(x=\"budget\", y=\"revenue\", data=data); \nplt.title('Number of cast members vs revenue');\nplt.subplot(122); \nsns.regplot(x=\"budget\", y=\"revenue\", data=data);\nplt.title('Number of cast members vs revenue');","12bd05e4":"#Dropping cast\ndata= data.drop(['cast'],axis=1)","b11a1daa":"#crew\ntotal_crew=[]\nfor i in data['crew']:\n    if(not(pd.isnull(i))):\n        \n        total_crew.append(len(eval(i)))\n        \n    else:\n        total_crew.append(0)\ndata['crew_count'] = total_crew","f0178cfd":"#(No. of Crew members) vs Revenue\nplt.figure(figsize=(24,6))\nplt.subplot(121); \nsns.scatterplot(x=\"crew_count\", y=\"revenue\", data=data); \nplt.title('Number of crew members vs revenue');\nplt.subplot(122); \nsns.regplot(x=\"crew_count\", y=\"revenue\", data=data);\nplt.title('Number of crew members vs revenue');","c828b11f":"#Dropping crew\ndata= data.drop(['crew'],axis=1)","643237a6":"plt.figure(figsize=(24,6))\nsns.barplot(x='original_language', y='revenue', data=data)\nplt.title('Revenue by language');","48d3b710":"#Taking only en and zh into consideration as they are the highest grossing\ndata['original_language'] =data['original_language'].apply(lambda x: 1 if x=='en' else(2 if x=='zh' else 0))","0477ea33":"#Check how revenue depends of day\ndata['release_date']=pd.to_datetime(data['release_date'])","64294a52":"release_day = data['release_date'].value_counts().sort_index()\nrelease_day_revenue= data.groupby(['release_date'])['revenue'].sum()\nrelease_day_revenue.index=release_day_revenue.index.dayofweek\nsns.barplot(release_day_revenue.index,release_day_revenue, data = data,ci=None)\nplt.show()","583da7c0":"#adding day feature to the data\ndata['release_day']=data['release_date'].dt.dayofweek ","9775d4c3":"data.drop(['release_date'],axis=1,inplace=True)","1590d300":"#status\nprint(data['status'].value_counts())\nsns.catplot(x=\"status\", y=\"revenue\", data=data);","84efa5cc":"#Feature is irrelevant hence dropping\ndata=data.drop(['status'],axis=1)","6a65ee48":"#tagline\ndata['isTaglineNA'] = 0\ndata.loc[data['tagline'].isnull() == False, 'isTaglineNA'] = 1\ndata.drop(['tagline'],axis=1,inplace =True)\n\n#Homepage v\/s Revenue\nsns.catplot(x='isTaglineNA', y='revenue', data=data);\nplt.title('Revenue for film with and without tagline');","4dca9199":"#runtime has 2 nulls; setting it to the mean\n#filling nulls in test\ndata['runtime']=data['runtime'].fillna(data['runtime'].mean())","caf2fe72":"sns.scatterplot(x=\"runtime\", y=\"revenue\", data=data); \nplt.title('Runtime vs revenue');","991cbdda":"#spoken languages\n#adding number of spoken languages for each movie\nspoken_count=[]\nfor i in data['spoken_languages']:\n    if(not(pd.isnull(i))):\n        \n        spoken_count.append(len(eval(i)))\n        \n    else:\n        spoken_count.append(0)\ndata['spoken_count'] = spoken_count\n\ndata.drop(['spoken_languages'],axis=1,inplace=True)#dropping spoken_languages","40b4252e":"sns.scatterplot(x=\"spoken_count\", y=\"revenue\", data=data); \nplt.title('Spoken Count vs revenue');","52f9cd57":"data.info()","383386b5":"X = data.drop(['revenue'],axis=1)\ny = data.revenue","8629baff":"X.head()","3397a57d":"#Feature scaling is a method used to standardize the range of independent variables or features of data.\n#Since the range of values of raw data varies widely, in some machine learning algorithms, objective functions will not work properly without normalization. \nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nX = scale.fit_transform(X)","8f59bc53":"# Split the data into Training set and Testing set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size =0.2,random_state=42)","74d57ac4":"#Function to Train and Test Machine Learning Model\ndef train_test_ml_model(X_train,y_train,X_test,Model):\n    model.fit(X_train,y_train) #Train the Model\n    y_pred = model.predict(X_test) #Use the Model for prediction\n\n    # Test the Model\n    from sklearn.metrics import confusion_matrix\n    cm = confusion_matrix(y_test,y_pred)\n    accuracy = round(100*np.trace(cm)\/np.sum(cm),1)\n\n    #Plot\/Display the results\n    cm_plot(cm,Model)\n    print('Accuracy of the Model' ,Model, str(accuracy)+'%')","bfaada58":"#Function to plot Confusion Matrix\ndef cm_plot(cm,Model):\n    plt.clf()\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Wistia)\n    classNames = ['Negative','Positive']\n    plt.title('Comparison of Prediction Result for '+ Model)\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    tick_marks = np.arange(len(classNames))\n    plt.xticks(tick_marks, classNames, rotation=45)\n    plt.yticks(tick_marks, classNames)\n    s = [['TN','FP'], ['FN', 'TP']]\n    for i in range(2):\n        for j in range(2):\n            plt.text(j,i, str(s[i][j])+\" = \"+str(cm[i][j]))\n    plt.show()","21bc87df":"from sklearn.svm import SVC,NuSVC  #Import packages related to Model\nModel = \"SVC\"\nmodel=SVC() #Create the Model\n\ntrain_test_ml_model(X_train,y_train,X_test,Model)","b23c45e0":"from xgboost import XGBClassifier  #Import packages related to Model\nModel = \"XGBClassifier()\"\nmodel=XGBClassifier() #Create the Model\n\ntrain_test_ml_model(X_train,y_train,X_test,Model)","13250539":"#from sklearn.linear_model import LinearRegression\n#clf = LinearRegression()\n#scores = cross_val_score(clf, X, y, scoring=\"neg_mean_squared_error\", cv=10)\n#rmse_scores = np.sqrt(-scores)\n#print(rmse_scores.mean())","93d54719":"#from sklearn.ensemble import RandomForestRegressor\n#regr = RandomForestRegressor(max_depth=2, random_state=0,n_estimators=100)\n#scores = cross_val_score(regr, X, y, scoring=\"neg_mean_squared_error\", cv=10)\n#rmse_scores = np.sqrt(-scores)\n#print(rmse_scores.mean())","3542dc99":"#data.head()","8e77883a":"#data.describe()","3818e3b4":"#regr.fit(X,y)\n#y_pred2=regr.predict(X)\n#importances = regr.feature_importances_","49ddeba4":"#importances","bd0d1a2b":"### **Study the impact of _Release date_ on _Revenue_**","97aee811":"**COMMENT:** It can be seen from the above plot that **English(en)** and **Chinese(zh)** generate more **Revenue** as compared to other languages.","5eb0cb39":"model 1 - linear Regression","1fabeb34":"**COMMENTS:** The data consists of 3000 rows and 23 columns","15a97ab5":"### **Importing the data**","c46ccc29":"**COMMENTS:**  Info fuction is used to list all the field names, their datatypes, count of elements in the field and if the field contacts Null values.","2e9906ab":"### **Study the impact of _overview_ on _revenue_**","f915d982":"### **Basic Analysis**","8a073375":"**COMMENT:** From the above output it can be seen that **Released** generates more *Revenue*.  This is **but obvious** as without releasing the movie, revenue cannot be generated.  This feature is **irrelevant**","c1341b9a":"**COMMENT:** It can be seen from the above plot that the **Revenue** is higher if the **Release date** is **WED**.  (0-MON, 1-TUE, ... 6-SUN)","0ceaf6e5":"### **Scaling the data values to standardize the range of independent variables**","c92f2396":"### **Find column names, row count of non-null values, data-type**","44d8a9dd":"### **Split the data into Training set and Testing set**","0d562ed7":"**COMMENT:** From the above output, it is clear that movies with **tagline** generates more **revenue**","b07bfc67":"**COMMENTS:**  From the above output we see that there are missing values in some fields like **belongs_to_collection, homepage** etc","31d15189":"**COMMENT:** If the number of genres are equal to \"3\" the Revenue is maximum.","1c7f8164":"**COMMENT:** The relation between **no. of Crew members** and **Revenue** are more or less Linear with some outliers","19cb442d":"### **Study the impact of _homepage_ on _revenue_**","2d07d9da":"# Exploratory Data Analysis (EDA)","c6b406bb":"### **PERFORM PREDICTIONS USING MACHINE LEARNING ALGORITHMS**","ce2f7038":"### **Function definition**","c9458afc":"### **Study the impact of _Status(Released\/Rumored)_ on _Revenue_**","6920239f":"### **Study the impact of _no. of Cast members_ on _Revenue_**","40d62e31":"### **Study the impact of _collection_ on _revenue_**","7e386fdf":"**COMMENT:** From the above output, it can be seen that maximum revenue is generated when the **runtime** is around **150mins**","8bf73cf0":"### **Study the impact of _Runtime_ on _Revenue_**","4abb5d8e":"### **Dropping un-necessary columns which does not add value**","fe10658b":"**COMMENT:** From the above output, it is seen that maximum **Revenue** is generated if the **no. of Spoken Languages** are between 1 to 2","40881b16":"### **Study the impact of _budget_ on _revenue_**","629ff3bf":"**COMMENT:** The relation between **no. of Cast members** and **Revenue** are more or less Linear with some outliers","df63fcdd":"### **Study the impact of _no. of Crew members_ on _Revenue_**","8ef4314c":"**COMMENT:** There is strong correlation between **Budget** and **Revenue** (Red color).  There is moderate correlation between **Budget** and **Popularity** (Light Red color)","8cb0900a":"### **Study the impact of _no. of Languages_ on _Revenue_**","b296930e":"### **Study the impact of _no. of Spoken Languages_ on _Revenue_**","2edea471":"Model 2 - Random forest regression","1471915e":"**COMMENT:** Top genres are Drama, Comedy, Action, Horror & Adventure","ec72d534":"### **Correlation between _revenue, budget, popularity and runtime_**","33e72fd3":"**COMMENT:** The relation between budget and revenue are more or less Linear with some outliers","ea38ddf8":"### **Study the impact of _no. of Production Companies_ on _Revenue_**","6897611e":"**COMMENT:** The **Revenue** is higher if the **no. of Production Countries** are between **1 to 3**","0d3f1ea3":"### **Importing the packages**","0c0f5e91":"**COMMENT:** The **Revenue** is higher if the **no. of Production Companies** are between **2 to 5**","4c99fb0e":"### **Study the impact of _no. of Production Countries_ on _Revenue_**","41be8144":"Traning the model\n","d6926939":"### **Study the impact of _Genre on _revenue_**","a772ac64":"### **Study the impact of _Tagline_ on _Revenue_**"}}