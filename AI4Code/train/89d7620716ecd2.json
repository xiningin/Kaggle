{"cell_type":{"e614a95a":"code","6bd13d4b":"code","dbc6be29":"code","493e8f45":"code","f4c00b23":"code","9454c74c":"code","c58b063a":"code","d2f628bd":"code","f8760acb":"code","0e979717":"code","7130f5c9":"code","e7ab9322":"code","47390ada":"code","160eaea2":"code","e9816302":"code","42f57f52":"code","d3b7902e":"code","8ec85000":"code","35693adf":"code","b2575e5e":"code","5bcc696c":"code","9c848d7d":"code","f20cd1b4":"code","770c7272":"code","f052de03":"code","4c562ebc":"code","77eb5e06":"code","75277ef4":"code","2164d537":"code","bcd08696":"code","0c1b6a06":"code","08049878":"code","aedfecb5":"code","de04f0f8":"code","199dc3b3":"code","de7a2382":"code","a15d6c62":"code","55d9ab09":"code","be307553":"code","81c59773":"code","72c08efb":"code","66d0264b":"code","4d595cf0":"code","e1705505":"code","8ad18ab4":"code","ffdb5e8e":"code","88633726":"code","10cc71c7":"code","8cf5b782":"code","8dbf7088":"code","d3fb7ab2":"code","c68361fe":"code","8c9affef":"code","a3e01f26":"code","2399d297":"code","5f2b4500":"code","855476b7":"code","32ad7810":"code","31a1c609":"code","5bc5c18f":"code","56d32885":"code","2340687d":"code","41b3c134":"code","3defb471":"code","1aa46e48":"code","c33a407c":"code","5834fc22":"code","c44482c4":"code","e991d4cd":"code","36bab7fb":"code","ef3a2013":"code","d9abce7c":"code","4696b3b8":"code","3445775b":"code","024f71ce":"code","1fc72b9f":"code","8f4dd7ce":"code","8b90d623":"code","81819005":"code","b51a8ad7":"code","54c53dc1":"code","9475ee5e":"code","05330e18":"code","28018a83":"code","b572514b":"code","a78f9a56":"markdown","04bd1422":"markdown","366678ca":"markdown","7f4af052":"markdown","a6e43661":"markdown","87d37a34":"markdown","ad5b17ed":"markdown","e9643f63":"markdown","a7314b1f":"markdown","6517481d":"markdown","06c6a8a5":"markdown","2def3edb":"markdown","f13325d2":"markdown","1ebfb9bc":"markdown","9ac72309":"markdown","9e20b24c":"markdown","4b2b332d":"markdown","a6ed1657":"markdown","6a01f2d9":"markdown","3a25533c":"markdown","621be277":"markdown","65189236":"markdown","5a750fef":"markdown","be95ed79":"markdown","d91b5f0e":"markdown","af759587":"markdown","1d6b17dd":"markdown","4d5ef492":"markdown","f84c4560":"markdown","a1b74608":"markdown","19ee1947":"markdown","288737a9":"markdown","572cfe16":"markdown","fe2420f1":"markdown","14f770dd":"markdown","6ee90952":"markdown","28df009f":"markdown","a1919aea":"markdown","16b03463":"markdown","0686726e":"markdown","7f0be509":"markdown","104f4830":"markdown","0a249c98":"markdown","3d37a4b3":"markdown","5de9c101":"markdown","2086cb2c":"markdown","8a0e231d":"markdown","5188eafc":"markdown","4107c61c":"markdown","e32193d8":"markdown","1e7adb5a":"markdown","3a2bc280":"markdown","ab45e516":"markdown","c4a42904":"markdown","b9fbe54a":"markdown","a3a4b15d":"markdown","fbbcbd14":"markdown","8f5338ae":"markdown","ebf44e98":"markdown","ea3a5bb8":"markdown","0d61c2cd":"markdown","de0d7393":"markdown","f8cc0c14":"markdown","d413f923":"markdown","55ab2677":"markdown","40e7e7d0":"markdown","d95a1c32":"markdown","82841952":"markdown","1f29cf4c":"markdown","9e76d409":"markdown","505f2c3e":"markdown"},"source":{"e614a95a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(\"List of files\",os.listdir(\"..\/input\"))\nimport torch\nimport numpy as np\nprint(\"Torch Version:\",torch.__version__)\n# Any results you write to the current directory are saved as output.","6bd13d4b":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom torch import nn, optim\nfrom torch.autograd import Variable\n\n\ndef test_network(net, trainloader):\n\n    criterion = nn.MSELoss()\n    optimizer = optim.Adam(net.parameters(), lr=0.001)\n\n    dataiter = iter(trainloader)\n    images, labels = dataiter.next()\n\n    # Create Variables for the inputs and targets\n    inputs = Variable(images)\n    targets = Variable(images)\n\n    # Clear the gradients from all Variables\n    optimizer.zero_grad()\n\n    # Forward pass, then backward pass, then update weights\n    output = net.forward(inputs)\n    loss = criterion(output, targets)\n    loss.backward()\n    optimizer.step()\n\n    return True\n\n\ndef imshow(image, ax=None, title=None, normalize=True):\n    \"\"\"Imshow for Tensor.\"\"\"\n    if ax is None:\n        fig, ax = plt.subplots()\n    image = image.numpy().transpose((1, 2, 0))\n\n    if normalize:\n        mean = np.array([0.485, 0.456, 0.406])\n        std = np.array([0.229, 0.224, 0.225])\n        image = std * image + mean\n        image = np.clip(image, 0, 1)\n\n    ax.imshow(image)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.tick_params(axis='both', length=0)\n    ax.set_xticklabels('')\n    ax.set_yticklabels('')\n\n    return ax\n\n\ndef view_recon(img, recon):\n    ''' Function for displaying an image (as a PyTorch Tensor) and its\n        reconstruction also a PyTorch Tensor\n    '''\n\n    fig, axes = plt.subplots(ncols=2, sharex=True, sharey=True)\n    axes[0].imshow(img.numpy().squeeze())\n    axes[1].imshow(recon.data.numpy().squeeze())\n    for ax in axes:\n        ax.axis('off')\n        ax.set_adjustable('box-forced')\n\ndef view_classify(img, ps, version=\"MNIST\"):\n    ''' Function for viewing an image and it's predicted classes.\n    '''\n    ps = ps.data.numpy().squeeze()\n\n    fig, (ax1, ax2) = plt.subplots(figsize=(6,9), ncols=2)\n    ax1.imshow(img.resize_(1, 28, 28).numpy().squeeze())\n    ax1.axis('off')\n    ax2.barh(np.arange(10), ps)\n    ax2.set_aspect(0.1)\n    ax2.set_yticks(np.arange(10))\n    if version == \"MNIST\":\n        ax2.set_yticklabels(np.arange(10))\n    elif version == \"Fashion\":\n        ax2.set_yticklabels(['T-shirt\/top',\n                            'Trouser',\n                            'Pullover',\n                            'Dress',\n                            'Coat',\n                            'Sandal',\n                            'Shirt',\n                            'Sneaker',\n                            'Bag',\n                            'Ankle Boot'], size='small');\n    ax2.set_title('Class Probability')\n    ax2.set_xlim(0, 1.1)\n\n    plt.tight_layout()\n","dbc6be29":"np_array=np.random.randn(5,3)\nprint(f' Numpy array:\\n {np_array}')","493e8f45":"torch_tensor=torch.from_numpy(np_array)\nprint(f'Torch tensor:\\n {torch_tensor}')","f4c00b23":"torch_tensor.numpy()","9454c74c":"# Add 2 to PyTorch Tensor, in place\ntorch_tensor.add_(2)","c58b063a":"np_array","d2f628bd":"# Set the random seed so things are predictable\ntorch.manual_seed(7) \nfeatures=torch.randn(1,3)\nprint(f'Number of Inout features:{features.shape[1]}')","f8760acb":"n_input=features.shape[1]\nn_hidden=2\nn_output=1\n#Weights for input to hidden layer\nW1=torch.randn(n_input,n_hidden)\nW2=torch.randn(n_hidden,n_output)\n#Bias term for hidden and output layer\nB1=torch.randn(n_hidden)\nB2=torch.randn(n_output)","0e979717":"#Using a Sigmoid Activation Function\ndef activation(x):\n    return(1\/1+torch.exp(-x))","7130f5c9":"h1=activation(torch.matmul(features,W1)+B1)\nprint(f'Hidden Layer activations:{h1}')\nout=activation(torch.matmul(h1,W2)+B2)\nprint(f'Output of the network:{out}')","e7ab9322":"# Import necessary packages\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport numpy as np\nimport torch\nimport helper\nimport matplotlib.pyplot as plt","47390ada":"from torchvision import datasets, transforms\n\n# Define a transform to normalize the data\ntransform = transforms.Compose([transforms.ToTensor(),\n                              transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n                              ])\n\n# Download and load the training data\ntrainset = datasets.MNIST('MNIST_data\/', download=True, train=True, transform=transform)\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)","160eaea2":"dataiter = iter(trainloader)\nimages, labels = dataiter.next()\nprint(type(images))\nprint(images.shape)\nprint(labels.shape)\n#Printing the size of one image\nprint(images[1].numpy().squeeze().shape)","e9816302":"#Look at the image\nplt.imshow(images[1].numpy().squeeze(), cmap='Greys_r');","42f57f52":"#Sigmoid Activation Function\ndef activation(x):\n    return (1\/(1+torch.exp(-x)))\n\n#Input 64x784\ninputs=images.view(images.shape[0],-1)\n#Number of input features-784\nn_input=inputs.shape[1]\n#Number of neurons in hidden layer-256\nn_hidden=256\n#Number of output neuron-10\nn_out=10\n#Weight at hidden neuron-784x256\nW1=torch.randn(n_input,n_hidden)\n#Bias at hidden neuron-256\nB1=torch.randn(n_hidden)\n#Weight at output neuron-256x10\nW2=torch.randn(n_hidden,n_out)\n#Bias at output neuron-10\nB2=torch.randn(n_out)\n","d3b7902e":"print(\"Shape of a batch of an image:\",images.shape)\nprint(\"Shape of the input to the network:\",inputs.shape)\nprint(\"Shape of the input features:\",n_input)\nprint(\"Shape of the Weight matrix of neurons in the hidden layer\",W1.shape)\nprint(\"Shape of the Bias vector of neurons in the hidden layer\",B1.shape)\nprint(\"Shape of the Weight matrix of neurons in the output layer\",W2.shape)\nprint(\"Shape of the Bias vector of neurons in the output layer\",W2.shape)\n","8ec85000":"#Hidden layer activations\nh1=activation(torch.mm(inputs,W1)+B1)\n#Output layer activations\nout=activation(torch.mm(h1,W2)+B2)","35693adf":"print(f'Shape of the Hidden activation of the network{h1.shape}')\nprint(f'Shape of the Output of the network{out.shape}')","b2575e5e":"#Let us see the network output to one of the feeded input image\nout[1]","5bcc696c":"def softmax(x):\n    return(torch.exp(x)\/torch.sum(torch.exp(x),dim=1).view(-1,1))","9c848d7d":"torch.exp(out[1:3])","f20cd1b4":"#print(torch.sum(torch.exp(out[1:3])))\n#Dim=1 says, we want to take the sum across all columns\ntorch.sum(torch.exp(out[1:3]),dim=1)","770c7272":"torch.sum(torch.exp(out[1:3]),dim=1).view(-1,1)","f052de03":"#print(torch.exp(out[1:3])\/torch.sum(torch.exp(out[1:3]),dim=1))\ntemp=torch.exp(out[1:3])\/torch.sum(torch.exp(out[1:3]),dim=1).view(-1,1)\nprint(temp)","4c562ebc":"temp.sum(dim=1)","77eb5e06":"probabilities = softmax(out)\n# Does it have the right shape? Should be (64, 10)\nprint(probabilities.shape)\n# Does it sum to 1?\n#print(probabilities.sum(dim=1))","75277ef4":"from torch import nn","2164d537":"class Network(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.hidden=nn.Linear(784,256)\n        self.output=nn.Linear(256,10)\n        self.sigmoid=nn.Sigmoid()\n        self.softmax=nn.Softmax(dim=1)\n        \n    def forward(self,x):\n        x=self.hidden(x)\n        x=self.sigmoid(x)\n        x=self.output(x)\n        x=self.softmax(x)\n        return x","bcd08696":"model=Network()\nmodel","0c1b6a06":"import torch.nn.functional as F","08049878":"import torch.nn.functional as F\n\nclass Network(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # Inputs to hidden layer linear transformation\n        self.hidden = nn.Linear(784, 128)\n        # Output layer, 10 units - one for each digit\n        self.output = nn.Linear(128, 10)\n        \n    def forward(self, x):\n        # Hidden layer with sigmoid activation\n        x = F.sigmoid(self.hidden(x))\n        # Output layer with softmax activation\n        x = F.softmax(self.output(x), dim=1)\n        \n        return x","aedfecb5":"model=Network()\nmodel","de04f0f8":"print(model.hidden.weight,model.hidden.weight.shape)\nprint(model.hidden.bias,model.hidden.bias.shape)","199dc3b3":"# Set biases to all zeros\nmodel.hidden.bias.data.fill_(0)","de7a2382":"# sample from random normal with standard dev = 0.01\nmodel.hidden.weight.data.normal_(std=0.01)","a15d6c62":"netowrk=Network()","55d9ab09":"# Grab some data \ndataiter = iter(trainloader)\nimages, labels = dataiter.next()\n\n# Resize images into a 1D vector, new shape is (batch size, color channels, image pixels) \nimages.resize_(images.shape[0], 1, 784)\n\n# Forward pass through the network\nimg_idx = 0\nps = model.forward(images[img_idx,:])\n\nimg = images[img_idx]\nview_classify(img.view(1, 28, 28), ps)","be307553":"# Hyperparameters for our network\ninput_size = 784\nhidden_sizes = [128]\noutput_size = 10\n\nmodel=nn.Sequential(nn.Linear(input_size,hidden_sizes[0]),\n                    nn.ReLU(),\n                    nn.Linear(hidden_sizes[0],output_size),\n                    nn.ReLU(),\n                    nn.Softmax(dim=1))\nprint(model)","81c59773":"# Forward pass through the network and display output\nimages, labels = next(iter(trainloader))\nimages.resize_(images.shape[0], 1, 784)\nps = model.forward(images[0,:])\nview_classify(images[0].view(1, 28, 28), ps)","72c08efb":"print(model[0])\nmodel[0].weight","66d0264b":"from collections import OrderedDict\nmodel = nn.Sequential(OrderedDict([\n                      ('hidden', nn.Linear(input_size, hidden_sizes[0])),\n                      ('relu1', nn.ReLU()),\n                      ('output', nn.Linear(hidden_sizes[0], output_size)),\n                      ('softmax', nn.Softmax(dim=1))]))\nmodel","4d595cf0":"print(model[0])\nprint(model.hidden)\nprint(model.hidden.weight)","e1705505":"import torch\nfrom torch import nn\nimport torch.nn.functional as F\nfrom torchvision import datasets,transforms","8ad18ab4":"transform=transforms.Compose([transforms.ToTensor(),\n                             transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])])\ntrainset=datasets.MNIST('~\/.pytorch\/MNIST_data\/',train=True,transform=transform,download=True)\ntestset=datasets.MNIST('~\/.pytorch\/MNIST_data\/',train=False,transform=transform,download=True)\n\ntrainloader=torch.utils.data.DataLoader(trainset,batch_size=64,shuffle=True,num_workers=0)\n#will explain later\ntestloader=torch.utils.data.DataLoader(testset,batch_size=64,shuffle=True,num_workers=0)","ffdb5e8e":"# TODO: Build a feed-forward network in one of the three ways mentioned above:\nmodel = nn.Sequential(nn.Linear(784, 128),\n                      nn.ReLU(),\n                      nn.Linear(128, 64),\n                      nn.ReLU(),\n                      nn.Linear(64, 10),\n                      nn.LogSoftmax(dim=1))\n","88633726":"# Get our data\nimages, labels = next(iter(trainloader))\n# Flatten images\nimages = images.view(images.shape[0], -1)\n\n# Forward pass, get our logits\nlogits = model(images)\nprint(logits.shape)","10cc71c7":"criterion = nn.NLLLoss()","8cf5b782":"# Calculate the loss with the logits and the labels\nloss=criterion(logits,labels)\nprint(loss)","8dbf7088":"x = torch.randn(2,2, requires_grad=True)\nprint(x)\ny = x**2\nprint(y)\n## grad_fn shows the function that generated this variable\nprint(y.grad_fn)\nz = y.mean()\nprint(z)\nprint(x.grad)\nz.backward()\nprint(x.grad)\nprint(x\/2)","d3fb7ab2":"# Build a feed-forward network\nmodel = nn.Sequential(nn.Linear(784, 128),\n                      nn.ReLU(),\n                      nn.Linear(128, 64),\n                      nn.ReLU(),\n                      nn.Linear(64, 10),\n                      nn.LogSoftmax(dim=1))\n\ncriterion = nn.NLLLoss()\nimages, labels = next(iter(trainloader))\nimages = images.view(images.shape[0], -1)\n\nlogits = model(images)\nloss = criterion(logits, labels)\n\n\nprint('Before backward pass: \\n', model[0].weight.grad)\n\nloss.backward()\n\nprint('After backward pass: \\n', model[0].weight.grad)","c68361fe":"from torch import optim\noptimizer=optim.Adam(model.parameters(),lr=0.1)","8c9affef":"epochs = 5\nfor e in range(epochs):\n    running_loss = 0\n    for images, labels in trainloader:\n        # Flatten MNIST images into a 784 long vector\n        images = images.view(images.shape[0], -1)\n        optimizer.zero_grad()\n        output=model.forward(images)\n        # TODO: Training pass\n        \n        loss = criterion(output,labels)\n        loss.backward()\n        optimizer.step()\n        \n        running_loss += loss.item()\n    else:\n        print(f\"Epoch:{e} Training loss: {running_loss\/len(trainloader)}\")","a3e01f26":"%matplotlib inline\nimport helper\n\nimages, labels = next(iter(trainloader))\n\nimg = images[0].view(1, 784)\n# Turn off gradients to speed up this part\nwith torch.no_grad():\n    logits = model.forward(img)\n\n# Output of the network are logits, need to take softmax for probabilities\nps = F.softmax(logits, dim=1)\n#helper.view_classify(img.view(1, 28, 28), ps)","2399d297":"images, labels = next(iter(testloader))\nimages.shape,labels.shape","5f2b4500":"images, labels = next(iter(testloader))\nimg = images.view(images.shape[0], 784)\n# Get the class probabilities\nps = torch.exp(model(img))\n# Make sure the shape is appropriate, we should get 10 class probabilities for 64 examples\nprint(ps.shape)","855476b7":"top_prob,top_class=ps.topk(1,dim=1)\ntop_prob.shape,top_class.shape","32ad7810":"top_class.view(64)","31a1c609":"import pandas as pd\npd.DataFrame({\"Predicted\":top_class.view(top_class.shape[0]),\"Actual\":labels})","5bc5c18f":"equals=top_class == labels.view(*top_class.shape)\naccuracy=torch.mean(equals.type(torch.FloatTensor))\naccuracy.item()","56d32885":"class Network(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(784, 256)\n        self.fc2 = nn.Linear(256, 128)\n        self.fc3 = nn.Linear(128, 64)\n        self.fc4 = nn.Linear(64, 10)\n\n        # Dropout module with 0.2 drop probability\n        self.dropout = nn.Dropout(p=0.2)\n\n    def forward(self, x):\n        # make sure input tensor is flattened\n        x = x.view(x.shape[0], -1)\n\n        # Now with dropout\n        x = self.dropout(F.relu(self.fc1(x)))\n        x = self.dropout(F.relu(self.fc2(x)))\n        x = self.dropout(F.relu(self.fc3(x)))\n\n        # output so no dropout here\n        x = F.log_softmax(self.fc4(x), dim=1)\n\n        return x\n        \nmodel=Network()\noptimizer=optim.Adam(model.parameters(),lr=0.01)\ncriterion=nn.NLLLoss()","2340687d":"epochs=5\ntrain_losses,test_losses=[],[]\nfor e in range(epochs):\n    running_loss=0\n    for images,labels in trainloader:\n        optimizer.zero_grad()\n        #images=images.view(images.shape[0],-1)\n        log_ps=model(images)\n        loss=criterion(log_ps,labels)\n        loss.backward()\n        optimizer.step()\n        running_loss+=loss.item()\n        \n    else:\n        test_loss=0\n        accuracy=0\n        \n        with torch.no_grad():\n            model.eval()\n            for images,labels in testloader:\n                log_ps=model(images)\n                test_loss+=criterion(log_ps,labels)\n                ps=torch.exp(log_ps)\n                top_p,top_class=ps.topk(1,dim=1)\n                equals=top_class==labels.view(*top_class.shape)\n                accuracy+=torch.mean(equals.type(torch.FloatTensor))\n        model.train()\n        train_losses.append(running_loss\/len(trainloader))\n        test_losses.append(test_loss\/len(testloader))\n\n        print(\"Epoch: {}\/{}.. \".format(e+1, epochs),\n              \"Training Loss: {:.3f}.. \".format(running_loss\/len(trainloader)),\n              \"Test Loss: {:.3f}.. \".format(test_loss\/len(testloader)),\n              \"Test Accuracy: {:.3f}\".format(accuracy\/len(testloader)))    ","41b3c134":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.plot(train_losses, label='Training loss')\nplt.plot(test_losses, label='Validation loss')\nplt.legend(frameon=False)","3defb471":"model.eval()\n\ndataiter = iter(testloader)\nimages, labels = dataiter.next()\nimg = images[0]\n# Convert 2D image to 1D vector\nimg = img.view(1, 784)\n\n# Calculate the class probabilities (softmax) for img\nwith torch.no_grad():\n    output = model.forward(img)\n\nps = torch.exp(output)\ntop_prob,top_class=ps.topk(1,dim=1)\ntop_class.item(),labels[0]","1aa46e48":"print(\"Model's state_dict:\")\nfor param_tensor in model.state_dict():\n    print(param_tensor, \"\\t\", model.state_dict()[param_tensor].size())","c33a407c":"# Print optimizer's state_dict\nprint(\"Optimizer's state_dict:\")\nfor var_name in optimizer.state_dict():\n    print(var_name, \"\\t\", optimizer.state_dict()[var_name])","5834fc22":"import os\nfrom pathlib import Path\nimport torch\nfrom torch.utils.data import TensorDataset ,DataLoader\nfrom torch import nn,optim\nimport torch.nn.functional as F\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nPATH=Path(\"..\/input\/digit-recognizer\")\nprint(os.listdir(\"..\/input\/digit-recognizer\"))","c44482c4":"train=pd.read_csv(PATH\/'train.csv')\ntest=pd.read_csv(PATH\/'test.csv')\ntrain.shape,test.shape","e991d4cd":"x=train.drop(\"label\",axis=1)\ny=np.array(train['label'])\nx.shape,y.shape","36bab7fb":"#x_train=x\/255","ef3a2013":"#x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.15)","d9abce7c":"'''\n# create feature and targets tensor for train set.\ntorch_X_train = torch.from_numpy(x_train.values).type(torch.FloatTensor)\ntorch_y_train = torch.from_numpy(y_train).type(torch.LongTensor)\n\n# create feature and targets tensor for test set.\ntorch_X_test = torch.from_numpy(x_test.values).type(torch.FloatTensor)\ntorch_y_test = torch.from_numpy(y_test).type(torch.LongTensor)\n\n# Pytorch train and test sets\ntrain = torch.utils.data.TensorDataset(torch_X_train,torch_y_train)\ntest = torch.utils.data.TensorDataset(torch_X_test,torch_y_test)\n'''","4696b3b8":"'''\nBATCH_SIZE=64\n# data loader\ntrain_loader = torch.utils.data.DataLoader(train, batch_size = BATCH_SIZE, shuffle = False)\ntest_loader = torch.utils.data.DataLoader(test, batch_size = BATCH_SIZE, shuffle = False)\n'''","3445775b":"torch_X_train = torch.from_numpy(x.values).type(torch.FloatTensor)\/255\ntorch_y_train = torch.from_numpy(y).type(torch.LongTensor)\nmyDataset = torch.utils.data.TensorDataset(torch_X_train,torch_y_train)\nvalid_no  = int(0.2 * len(myDataset))\n# so divide the data into trainset and testset\ntrainSet,testSet = torch.utils.data.random_split(myDataset,(len(myDataset)-valid_no,valid_no))\nprint(f\"len of trainSet {len(trainSet)} , len of testSet {len(testSet)}\")\nbatch_size=64\ntrain_loader  = DataLoader(trainSet , batch_size=batch_size ,shuffle=True) \ntest_loader  = DataLoader(testSet , batch_size=batch_size ,shuffle=True)","024f71ce":"class Network(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(784, 256)\n        self.fc2 = nn.Linear(256, 128)\n        self.fc3 = nn.Linear(128, 64)\n        self.fc4 = nn.Linear(64, 10)\n\n        # Dropout module with 0.2 drop probability\n        self.dropout = nn.Dropout(p=0.2)\n\n    def forward(self, x):\n        # make sure input tensor is flattened\n        x = x.view(x.shape[0], -1)\n\n        # Now with dropout\n        x = self.dropout(F.relu(self.fc1(x)))\n        x = self.dropout(F.relu(self.fc2(x)))\n        x = self.dropout(F.relu(self.fc3(x)))\n\n        # output so no dropout here\n        x = F.log_softmax(self.fc4(x), dim=1)\n\n        return x\n        \nmodel=Network()\noptimizer=optim.Adam(model.parameters(),lr=0.01)\ncriterion=nn.NLLLoss()","1fc72b9f":"epochs=5\ntrain_losses,test_losses=[],[]\nfor e in range(epochs):\n    running_loss=0\n    for images,labels in train_loader:\n        optimizer.zero_grad()\n        log_ps=model(images)\n        loss=criterion(log_ps,labels)\n        loss.backward()\n        optimizer.step()\n        running_loss+=loss.item()\n        \n    else:\n        test_loss=0\n        accuracy=0\n        \n        with torch.no_grad():\n            model.eval()\n            for images,labels in test_loader:\n                log_ps=model(images)\n                test_loss+=criterion(log_ps,labels)\n                ps=torch.exp(log_ps)\n                top_p,top_class=ps.topk(1,dim=1)\n                equals=top_class==labels.view(*top_class.shape)\n                accuracy+=torch.mean(equals.type(torch.FloatTensor))\n        model.train()\n        train_losses.append(running_loss\/len(train_loader))\n        test_losses.append(test_loss\/len(test_loader))\n\n        print(\"Epoch: {}\/{}.. \".format(e+1, epochs),\n              \"Training Loss: {:.3f}.. \".format(running_loss\/len(train_loader)),\n              \"Test Loss: {:.3f}.. \".format(test_loss\/len(test_loader)),\n              \"Test Accuracy: {:.3f}\".format(accuracy\/len(test_loader)))    ","8f4dd7ce":"print(\"Our model: \\n\\n\", model, '\\n')\nprint(\"The state dict keys: \\n\\n\", model.state_dict().keys())","8b90d623":"torch.save(model.state_dict(), 'checkpoint.pth')","81819005":"state_dict = torch.load('checkpoint.pth')\nprint(state_dict.keys())","b51a8ad7":"model.load_state_dict(state_dict)","54c53dc1":"checkpoint = {'input_size': 784,\n              'output_size': 10,\n              'hidden_layers': [256,128,64],\n              'state_dict': model.state_dict()}\n\ntorch.save(checkpoint, 'checkpoint.pth')","9475ee5e":"test_images = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntest_image = test_images.loc[:,test_images.columns != \"label\"].values\ntest_dataset = torch.from_numpy(test_image).type(torch.FloatTensor)\/255\nprint(test_dataset.shape)\n#test_dataset = torch.utils.data.TensorDataset(test_dataset)\nnew_test_loader = torch.utils.data.DataLoader(test_dataset, batch_size = 100, shuffle = False)","05330e18":"results = []\nwith torch.no_grad():\n    model.eval()\n    for images in new_test_loader:\n        output = model(images)\n        ps = torch.exp(output)\n        top_p, top_class = ps.topk(1, dim = 1)\n        results += top_class.numpy().tolist()","28018a83":"predictions = np.array(results).flatten()\nprint(predictions[:5])\nprint(predictions.shape)","b572514b":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"my_submissions.csv\", index=False, header=True)","a78f9a56":"## Defining the optimizer","04bd1422":"Let us understand what we are doing above by an example\n<br>\nStep 1:Calculating the numerator of the softmax function","366678ca":"## Network","7f4af052":"#### Lets run one image through the network to check our work","a6e43661":"Let's go through this bit by bit.\n\n```python\nclass Network(nn.Module):\n```\n\nHere we're inheriting from `nn.Module`. Combined with `super().__init__()` this creates a class that tracks the architecture and provides a lot of useful methods and attributes. It is mandatory to inherit from `nn.Module` when you're creating a class for your network. The name of the class itself can be anything.\n\n```python\nself.hidden = nn.Linear(784, 256)\n```\n\nThis line creates a module for a linear transformation, $x\\mathbf{W} + b$, with 784 inputs and 256 outputs and assigns it to `self.hidden`. The module automatically creates the weight and bias tensors which we'll use in the `forward` method. You can access the weight and bias tensors once the network once it's create at `net.hidden.weight` and `net.hidden.bias`.\n\n```python\nself.output = nn.Linear(256, 10)\n```\n\nSimilarly, this creates another linear transformation with 256 inputs and 10 outputs.\n\n```python\nself.sigmoid = nn.Sigmoid()\nself.softmax = nn.Softmax(dim=1)\n```\n\nHere I defined operations for the sigmoid activation and softmax output. Setting `dim=1` in `nn.Softmax(dim=1)` calculates softmax across the columns.\n\n```python\ndef forward(self, x):\n```\n\nPyTorch networks created with `nn.Module` must have a `forward` method defined. It takes in a tensor `x` and passes it through the operations you defined in the `__init__` method.\n\n```python\nx = self.hidden(x)\nx = self.sigmoid(x)\nx = self.output(x)\nx = self.softmax(x)\n```\n\nHere the input tensor `x` is passed through each operation a reassigned to `x`. We can see that the input tensor goes through the hidden layer, then a sigmoid function, then the output layer, and finally the softmax function. It doesn't matter what you name the variables here, as long as the inputs and outputs of the operations match the network architecture you want to build. The order in which you define things in the `__init__` method doesn't matter, but you'll need to sequence the operations correctly in the `forward` method.\n\nNow we can create a `Network` object.","87d37a34":"We have the training data loaded into trainloader \n\nWith dataloaded we make  an iterator with iter(trainloader). Later, we'll use this to loop through the dataset for training, like below:","ad5b17ed":"## Load our model","e9643f63":"## Train ","a7314b1f":"### Convert to torch tensor","6517481d":"## Building our Network with Pytorch\n\n![](images\/mlp_mnist.PNG)","06c6a8a5":"As you can see above, our network has basically no idea what this digit is. It's because we haven't trained it yet, , all the weights are random!","2def3edb":"### Load Dataset \nFirst up, we need to get our dataset.Right now we will be using MNIST dataset which is already in`torchvision` package. The code below will download the MNIST dataset, then create training and test datasets for us. ","f13325d2":"#### Define a loss function","1ebfb9bc":"## Save our model","9ac72309":"## Check the results","9e20b24c":"With the basics covered, it's time to explore how we can use PyTorch to build a simple neural network.","4b2b332d":" ## Simple Neural Network using Pytorch \n Let us see how we can use PyTorch to build a simple neural network.\n![](images\/simple_neuron.PNG)\n\nMathematically this looks like: \n\n$$\n\\begin{align}\ny &= f(w_1 x_1 + w_2 x_2 + b) \\\\\ny &= f\\left(\\sum_i w_i x_i +b \\right)\n\\end{align}\n$$\n\nWith vectors this is the dot\/inner product of two vectors:\n\n$$\nh = \\begin{bmatrix}\nx_1 \\, x_2 \\cdots  x_n\n\\end{bmatrix}\n\\cdot \n\\begin{bmatrix}\n           w_1 \\\\\n           w_2 \\\\\n           \\vdots \\\\\n           w_n\n\\end{bmatrix}\n$$","a6ed1657":"## Training for real","6a01f2d9":"# Kaggle- Multilayered Perceptron (MLP) implemention on MNIST dataset\nUntill now we were using the MNIST dataset that is available in torchvision.dataset.Let us now load the dataset from Kaggle repo and train our model","3a25533c":"### Initializing weights and biases\n\nThe weights and bias are automatically initialized for you, but it's possible to customize how they are initialized. The weights and biases are tensors attached to the layer you defined, you can get them with `model.fc1.weight` for instance.","621be277":"## Loss and Autograd together","65189236":"## Tensors\nIt turns out neural network computations are just a bunch of linear algebra operations on *tensors*, a generalization of matrices. A vector is a 1-dimensional tensor, a matrix is a 2-dimensional tensor, an array with three indices is a 3-dimensional tensor (RGB color images for example). The fundamental data structure for neural networks are tensors and PyTorch (as well as pretty much every other deep learning framework) is built around tensors.\n\n<img src=\"images\/tensor_examples.svg\" width=600px>\n","5a750fef":" ## Numpy to Torch and back\n\nPyTorch has a great feature for converting between Numpy arrays and Torch tensors. Let us see how easy it is to switch between the two\n\n### Ceate a tensor using numpy array","be95ed79":"Step 2:For every predicted image output, calculate the sum over the predicted values over all classes","d91b5f0e":"trainData = torch.from_numpy(x_train.values)\ntrainLabel=torch.from_numpy(y_train)\ntestData = torch.from_numpy(x_test.values)\ntestLabel = torch.from_numpy(y_test)\ntrainData, testData = trainData.type(torch.FloatTensor), testData.type(torch.LongTensor)\ntrainLabel, testLabel = trainLabel.type(torch.FloatTensor), testLabel.type(torch.LongTensor)\ntrainData.shape,testData.shape\ntrainData = trainData.unsqueeze_(dim=1)\ntestData = testData.unsqueeze_(dim=1)\ntrainData.shape,testData.shape\n#transforms =transforms.Compose(transforms.ToTensor())\ntrain_dataset = TensorDataset(trainData,trainLabel)\ntrain_loader = DataLoader(train_dataset,batch_size=64,shuffle=True)\n\ntest_dataset = TensorDataset(testData,testLabel)\ntest_loader = DataLoader(test_dataset,batch_size=64,shuffle=True)","af759587":"### Forward pass\n\nNow that we have a network, let's see what happens when we pass in an image.","1d6b17dd":"### Inference on a batch of images\nLet us try to do this for a batch of images.Before that we will make some changes in our architecture","4d5ef492":"![](images\/mlp.PNG)","f84c4560":"## Imports","a1b74608":"**Agenda:**\n<br>\nFor this tutorial in  Deep Learning(DL) with Pytorch, we are going to explore Multi Layered Perceptron architecture and learn Pytorch by implementing  algorithms under a certain usecase.We will cover the following:\n1. Deep Learning basics with Pytorch\n2. Multilayered Perceptron (MLP) implemention on  MNIST\n<br>\n\n[Kaggle Kernel to run this notebook](https:\/\/www.kaggle.com\/u6yuvi\/dl-with-pytorch-mnist-classification?scriptVersionId=9612691)\n\nLets get started !!\n","19ee1947":"Now we have 10 outputs for our network. This raw output is usually called **logits or scores**.\n<br>\nHowever,We want to pass in an image to our network and get out a probability distribution over the classes that tells us the likely class(es) the image belongs to.","288737a9":"Voila!! We got the softmax output .One last thing to do is check whether the sum across all classes sum to 1 for understanding the predicted class","572cfe16":"## Train Test in Pytorch","fe2420f1":"## Building our Network\nNow we're going to build a larger network that can solve a (formerly) difficult problem, identifying text in an image using MNIST data\nFor now our goal will be to build a neural network that can take one of these images and predict the digit in the image.First, let's try to build this network for this dataset using weight matrices and matrix multiplications. Then, we'll see how to do it using PyTorch's `nn` module which provides a much more convenient and powerful method for defining network architectures.","14f770dd":"Weights = torch.randn_like(features) creates another tensor with the same shape as features, again containing values from a normal distribution.\n\nFinally, bias = torch.randn((1, 1)) creates a single value from a normal distribution.","6ee90952":"Let's see an example to understand it better.Then again we will head back to our modelling task","28df009f":"# Reference \n\n[Introduction to Pytorch-Udacity](https:\/\/github.com\/udacity\/deep-learning-v2-pytorch\/tree\/master\/intro-to-pytorch)","a1919aea":"We can define the network somewhat more concisely and clearly using the `torch.nn.functional` module. This is the most common way you'll see networks defined as many operations are simple element-wise functions. We normally import this module as `F`, `import torch.nn.functional as F`.\n","16b03463":"## Helper Functions","0686726e":"## Train -Test Split -Pytorch","7f0be509":"## Autograd\n\nNow that we know how to calculate a loss, how do we use it to perform backpropagation? Torch provides a module, `autograd`, for automatically calculating the gradients of tensors. We can use it to calculate the gradients of all our parameters with respect to the loss. Autograd works by keeping track of operations performed on tensors, then going backwards through those operations, calculating gradients along the way.\n\nPyTorch keeps track of operations on a tensor and calculates the gradients, you need to set `requires_grad = True` on a tensor. You can do this at creation with the `requires_grad` keyword, or at any time with `x.requires_grad_(True)`.\n","104f4830":"\n### Probability Distribution using Softmax\nTo calculate this probability distribution, we often use the [softmax function](https:\/\/en.wikipedia.org\/wiki\/Softmax_function)\n$$\n\\Large \\sigma(x_i) = \\cfrac{e^{x_i}}{\\sum_k^K{e^{x_k}}}\n$$\nWhat this does is squish each input $x_i$ between 0 and 1 and normalizes the values to give you a proper probability distribution where the probabilites sum up to one.","0a249c98":"![](images\/mnist.PNG)","3d37a4b3":"### Recollect everything \nBefore we go ahead and train a neural network to accuractly predict the numbers appearing in the MNIST images,let us recollect the important modules that is necessary for any model training exercise","5de9c101":"## Load Data ","2086cb2c":"***An important thing to note here is memory is shared between the Numpy array and Torch tensor, so if you change the values in-place of one object, the other will change as well.*       \nLet see what does it mean**","8a0e231d":"PyTorch provides a module `nn` that makes building networks much simpler. Here I'll show you how to build the same one as above with 784 inputs, 256 hidden units, 10 output units and a softmax output.","5188eafc":"### Access Layers of the network\nWe can access layers  by integer ","4107c61c":"### Calculate Weight and Biases\nWe will calculate the output for this multi-layer network using the weights `W1` & `W2`, and the biases, `B1` & `B2`.","e32193d8":"## Normalization ","1e7adb5a":"#### Build a feedforward Network","3a2bc280":"For custom initialization, we can these tensors in place.","ab45e516":"## Inference and Validation\n\nThe goal of validation is to measure the model's performance on data that isn't part of the training set. Typically this is just accuracy, the percentage of classes the network predicted correctly. Other options are precision and recall and top-5 error rate. We'll focus on accuracy here. First I'll do a forward pass with one batch from the test set.","c4a42904":"### Convert back to numpy array","b9fbe54a":"### Ordered Dict- Better way to create a network\nWe can also pass in an `OrderedDict` to name the individual layers and operations, instead of using incremental integers. Note that dictionary keys must be unique, so _each operation must have a different name_.","a3a4b15d":"###  Generate some random data \n We will create a tensor with shape (1, 5), one row and five columns, that contains values randomly distributed according to the normal distribution with a mean of zero and standard deviation of one.","fbbcbd14":"Step 3:For every predicted image output, divide the predictions of each class with the sum over all classes.","8f5338ae":"###  Numpy array matches new values from Tensor","ebf44e98":"The parameters for PyTorch networks are stored in a model's state_dict\n Optimizer objects (torch.optim) also have a state_dict, which contains information about the optimizer\u2019s state, as well as the hyperparameters used.\n\nBecause state_dict objects are Python dictionaries, they can be easily saved, updated, altered, and restored, adding a great deal of modularity to PyTorch models and optimizers.","ea3a5bb8":"# **1. Deep Learning basics with Pytorch**\n<br>\nIn this part we will cover the following:\n1. Learn to play with tensors on numpy and pytorch \n2. Learn to build a simple feed forward network from scratch with random data \n3. Learn to build an end to end MLP for MNIST dataset","0d61c2cd":"## Load Test Data","de0d7393":"#### Imports","f8cc0c14":"Step3:Rearrange the sums in an order for broadcasting to work","d413f923":"#### Load Data","55ab2677":"## Train Test Split","40e7e7d0":"## Add-on-People from the keras would love this!!!\nPyTorch provides a convenient way to build networks like this where a tensor is passed sequentially through operations, `nn.Sequential`.\nLets try to build the above network using this method:","d95a1c32":"### Initialize Weights and Biases ","82841952":"## Extracting Input and Target Variable","1f29cf4c":"### Access Layers using integer or name \nNow we can access layers  either by integer or name","9e76d409":"## Submit for Scoring","505f2c3e":"## Inference time"}}