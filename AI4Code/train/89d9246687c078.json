{"cell_type":{"32c15c26":"code","796890f2":"code","85c52528":"code","c64d77d8":"code","f947fc86":"code","03d1a5ae":"code","19d6fd81":"code","ab34e6d3":"code","ebb22a92":"code","26b69171":"code","c0493578":"code","08e39185":"code","8fe903c0":"code","7dd43014":"code","7b9a4274":"code","8193f624":"code","ea6c8fdf":"code","66ddd40c":"markdown","7d38b8f4":"markdown","8b2aa3e5":"markdown","5e8dd08b":"markdown","92bf08fb":"markdown"},"source":{"32c15c26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","796890f2":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport imblearn\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score","85c52528":"df=pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndf.head()","c64d77d8":"sns.countplot(df.Class)","f947fc86":"X=df.drop('Class', axis=1)\ny=df['Class']\noversample = SMOTE()\nX, y = oversample.fit_resample(X, y)\nsns.countplot(y)","03d1a5ae":"df1=pd.concat([X,y], axis=1)\nsns.distplot(df1['Time'])","19d6fd81":"sns.distplot(df1['Amount'])","ab34e6d3":"sns.scatterplot(x='Time', y='Amount', hue='Class', data=df1)","ebb22a92":"plt.figure(figsize=(20,18))\nsns.heatmap(df1.corr(),annot=True, cmap=\"Blues\")","26b69171":"rob_scaler = RobustScaler()\ndf1['Amount'] = rob_scaler.fit_transform(df1['Amount'].values.reshape(-1, 1))\ndf1['Time'] = rob_scaler.fit_transform(df1['Time'].values.reshape(-1, 1))\n","c0493578":"df1.isnull().sum()","08e39185":"X=df1.drop('Class', axis=1)\ny=df1['Class']\nX_train,X_test, y_train, y_test= train_test_split(X,y, test_size=0.2)","8fe903c0":"def predict(model,X_train, X_test, y_train, y_test):\n    model.fit(X_train,y_train)\n    preds=model.predict(X_test)\n    print(confusion_matrix(y_test,preds))\n    print(classification_report(y_test,preds))\n    return accuracy_score(y_test,preds)","7dd43014":"models=['LR', 'XGB', 'RF']\nacc=[]","7b9a4274":"predict(LogisticRegression(), X_train, X_test, y_train, y_test)","8193f624":"predict(XGBClassifier(),X_train,X_test, y_train, y_test)","ea6c8fdf":"predict(RandomForestClassifier(),X_train,X_test, y_train, y_test)","66ddd40c":"# Data Loading","7d38b8f4":"# MSMOTE to handle imbalanced data","8b2aa3e5":"# RF","5e8dd08b":"# Logistic Regression","92bf08fb":"# Xgboost"}}