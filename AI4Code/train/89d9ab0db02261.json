{"cell_type":{"068f4b9b":"code","af9ed498":"code","32f36ee9":"code","1dbd436e":"code","9cc19aa1":"code","3af3d1b2":"code","45c4c93c":"code","7b94e130":"code","1dea0038":"code","528b9dbb":"code","45472d9d":"code","27343b0f":"code","d42d7e48":"code","1fb619fe":"code","c8bf6e4a":"code","fb8ac7de":"code","f5efdcfc":"code","8f6e89ed":"code","fc282956":"code","3b855205":"markdown","1afdefd7":"markdown","30d0cd2c":"markdown","54c09af1":"markdown","671b9b6d":"markdown","cd5ad31a":"markdown","f34c4115":"markdown","1ad2f5c4":"markdown","ca37c148":"markdown","7cfeb736":"markdown","5a321512":"markdown","10f3e451":"markdown","e7d6b1bb":"markdown","67038f48":"markdown","6746f4e4":"markdown","a358eb3a":"markdown","11ff7719":"markdown","e80a98c5":"markdown"},"source":{"068f4b9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport re\nimport sklearn\nimport ast\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords \nfrom collections import Counter \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","af9ed498":"df= pd.read_csv(\"..\/input\/zomato.csv\")\ndf = df.dropna(subset=['rate'])  # Drop Nulls \n","32f36ee9":"df.info()","1dbd436e":"df.dropna(inplace=True)","9cc19aa1":"df.rate.unique()","3af3d1b2":"df=df[df.rate.apply(lambda x: len(str(x)))>=5]  #clean the rating remove unwanted symbols\ndef ext(strings):\n    m=re.findall(r\"\\d\\.\\d\",strings)\n    m=float(m[0])\n    return m\ndf.rate=df[\"rate\"].apply(ext)\ndf.rate.unique()","45c4c93c":"df[\"approx_cost(for two people)\"].unique()","7b94e130":"def cltn(m):\n    if len(m)>100000:\n        return 0\n    else:\n        m.replace(\",\",\"\")\n        ns=''\n        for each in m:\n            if each!=\",\":\n                ns+=each\n        return(float(ns))\ndf[\"approx_cost(for two people)\"]=df[\"approx_cost(for two people)\"].apply(cltn)","1dea0038":"df[\"approx_cost(for two people)\"].unique()","528b9dbb":"plt.figure(figsize=(20,10))\ndf3=df[(df.votes>=4000)&(df.votes<12500)]\nplt.scatter(df3.rate,df3.votes,color=\"green\")\ndf2=df[(df.votes>=df.votes.mean())&(df.votes<4000)]\nplt.scatter(df2.rate,df2.votes,color=\"yellow\")\ndf1=df[df.votes<df.votes.mean()]\nplt.scatter(df1.rate,df1.votes,color=\"red\")\nplt.xlabel('Rate')\nplt.ylabel('Votes')\nplt.title('rate Vs Votes')\n","45472d9d":"N=df[df.cuisines.apply(lambda x: \"North Indian\" in str(x))]\nN=N[N.cuisines.apply(lambda x: \"South Indian\" not in str(x))]\nS=df[df.cuisines.apply(lambda x: \"South Indian\" in str(x))]\nS=S[S.cuisines.apply(lambda x: \"North Indian\" not in str(x))]\nplt.figure(figsize=(20,10))\nheight = [N.votes.mean(),S.votes.mean()]\nbars = ('North Indian', 'South Indian')\ny_pos = np.arange(len(bars))\nplt.bar(y_pos, height,color=(0.2, 0.4, 0.6, 0.6))\nplt.xticks(y_pos, bars)\nplt.ylabel(\"Votes\")\nplt.xlabel(\"Basic cuisine\")\nplt.title(\"North Vs South indian Cuisines\")\nplt.show()","27343b0f":"len(df.location.unique())","d42d7e48":"x=df.groupby(\"location\")[\"votes\"].mean()\nx=pd.DataFrame(x)\nx.reset_index(inplace=True)\nx.sort_values(by='votes', ascending=False,inplace=True)\nx.reset_index(inplace=True)\nplt.figure(figsize=(20,10))\nheight = x.votes[0:20]\nbars = x.location[0:20]\ny_pos = np.arange(len(bars))\nplt.bar(y_pos, height,color=\"red\")\nplt.xticks(y_pos, bars)\nplt.xticks(rotation=90)\nplt.ylabel(\"Popularity\")\nplt.xlabel(\"Locations\")\nplt.title(\"Top 20 highest popular locations\")\nplt.show()","1fb619fe":"fig1, ax1 = plt.subplots()\nax1.set_title('Rating')\nax1.boxplot(df.rate)","c8bf6e4a":"#Fetching Stop Words\nstop_words = set(stopwords.words('english'))\n\n#Fetching the rewiews which had higher ratings into a string\nrg3=''\nfor m in df.reviews_list:\n    m = ast.literal_eval(m)\n    for each in m:\n        if each[0] == \"Rated 4.0\" or each[0] == \"Rated 5.0\":\n            rg3+=\" \"+each[1]\n#Tokenizing the collected reviews\ntoken3=word_tokenize(rg3)\n#Removing Stopwords\nfilt3=[]\nfor r in token3: \n    if not r.lower() in stop_words: \n        filt3.append(r.lower())\n#Filtering the tokens by size\ndef by_size(words, size):\n    return [word for word in words if len(word) >= size]\nx=by_size(filt3,4)\n#Finding the most common tokens\nCounter = Counter(x)\nmost_occur = Counter.most_common(100)\n##Plotting the word cloud\nfrom wordcloud import WordCloud\ntext=''\nfor m in most_occur:\n    if m[0] != \"rated\":\n        text += \" \" + m[0]\nwordcloud = WordCloud(width=1000, height=800, margin=0).generate(text)\nplt.figure(figsize=(20,20))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0,y=0)\nplt.show()    ","fb8ac7de":"from collections import Counter\n#collecting the data into a list\nst=[]\nfor m in df.dish_liked:\n    if pd.notna(m):\n        for each in m.split(\",\"):\n            st.append(each)\n#Finding the most common dish\/beverage\nCounter1 = Counter(st)\nmost_occur1 = Counter1.most_common(20)\n#plotting the bar graph for first 20 dishes\nplt.figure(figsize=(20,10))\nheight = [m[1] for m in most_occur1]\nbars = [m[0] for m in most_occur1]\ny_pos = np.arange(len(bars))\nplt.bar(y_pos, height,color=\"Blue\")\nplt.xticks(y_pos, bars)\nplt.xticks(rotation=90)\nplt.ylabel(\"Popularity\")\nplt.xlabel(\"Food\")\nplt.title(\"Foods\/Beverages and their Popularity\")\nplt.show()","f5efdcfc":"x=df.groupby(\"online_order\")[\"votes\"].count()\nlabels = 'Yes', 'No'\nsizes = [x.Yes, x.No]\ncolors = ['gold', 'yellowgreen']\nexplode = (0.1, 0,) \nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nplt.title(\"Restaurents Providing Online Orders\")\nplt.axis('equal')\nplt.show()","8f6e89ed":"x=df.groupby(\"book_table\")[\"votes\"].count()\nlabels = 'Yes', 'No'\nsizes = [x.Yes, x.No]\ncolors = ['red', 'blue']\nexplode = (0.1, 0,) \nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nplt.title(\"Restaurents Providing Table Booking\")\nplt.axis('equal')\nplt.show()\n","fc282956":"rt=[]\nfor m in df.rest_type:\n    if pd.notna(m):\n        for each in m.split(\",\"):\n            rt.append(each)\nCounter2 = Counter(rt)\nmost_occur2 = Counter2.most_common(20)\nplt.figure(figsize=(20,10))\nheight = [m[1] for m in most_occur2]\nbars = [m[0] for m in most_occur2]\ny_pos = np.arange(len(bars))\nplt.bar(y_pos, height,color=\"orange\")\nplt.xticks(y_pos, bars)\nplt.xticks(rotation=90)\nplt.ylabel(\"Availability\")\nplt.xlabel(\"Rest_type\")\nplt.title(\"Restaurent types and their Availability\")\nplt.show()","3b855205":"Data for most liked dishes for each restaurent was provided in \"dish_liked\" column","1afdefd7":"- The above word cloud states the most commonly used words in the HIgher rated reviews.\n- These are the words people talked about more frequently.\n- Completely filtering all the unnecessary words was not possible.\n- It provides a brief\/ unstructured idea of what a restaurent should focus on for higher reviews.","30d0cd2c":"### Reading and cleaning the data","54c09af1":"#### Realizations \n>- Not concidering Ratings of the restaurents at this point.\n>- No. of votes depict the popularity of the restaurent\n>- The above graph shows the top 20 locations with most popular restaurents","671b9b6d":"### Top 20 Popular Locations","cd5ad31a":"### Restaurents and their Availability","f34c4115":"### Percentage of Restaurents Providing Online Order And Table Booking","1ad2f5c4":"- We can realise that \",\" is used to measure thousands.\n- we need to remove \",\" as machine does not understand them as numeric.","ca37c148":"#### Realisations\n- Concidering the No. of votes as popularity of the restaurent.\n- Restaurennts with lesser votes are having lower Ratings.\n- Higher the no. of votes the higher is the potential probability of a company to get higher ratings.\n- Rating may depend on many other unexplored factors.","7cfeb736":"#### The approximate cost for two people.","5a321512":"Removing Nulls","10f3e451":"### Popularity Of North Indian Cuisines Vs South Indian Cuisines","e7d6b1bb":"### Top 20 most Liked Dishes\/ Beverages","67038f48":"### What did people like in the higher rated restaurents (Word Cloud)","6746f4e4":"#### Realizations\n>- Here we are comparing two basic and distinct cuisines North and South Indian for simplicity.\n>- North Indian cuisines tend to be more popular if compared with south indian cuisines(only).\n>- Maybe because of massive influx of North Indian Students or Employees North Indian cuisines are more populer in a South Indian City.","a358eb3a":"### Understanding and Cleaning Data","11ff7719":"### Are no. of Votes and Ratings dependent ?","e80a98c5":"- We can see Unwanted strings like \"NEW\",\"-\" etc. And nulls too\n- We dont need the \"\/5\" characters for our future visualizations so removing them"}}