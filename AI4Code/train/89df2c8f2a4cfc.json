{"cell_type":{"7b65e0d7":"code","cc4f40c8":"code","e5c76fe8":"code","a86f4d9a":"code","d6bbf3b8":"code","f9ea3c8c":"code","a5124fb3":"code","c797cc06":"code","d77e0374":"code","b13a8e83":"markdown","4cdfafa6":"markdown","709e6883":"markdown","8814eda6":"markdown","1d671bc4":"markdown","08d30ebd":"markdown"},"source":{"7b65e0d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc4f40c8":"data=pd.read_csv('..\/input\/quora-question-pairs\/train.csv.zip')","e5c76fe8":"data.head()","a86f4d9a":"len(data)","d6bbf3b8":"!pip install BERTSimilarity","f9ea3c8c":"##Example Use case\nimport BERTSimilarity.BERTSimilarity as bertsimilarity\n\nif __name__=='__main__':\n    f1='The man is playing soccer.'\n    f2='The man is playing football.'\n    bertsimilarity=bertsimilarity.BERTSimilarity()\n    dist=bertsimilarity.calculate_distance(f1,f2)\n    print('The distance between sentence1: '+f1+' and sentence2: '+f2+' is '+str(dist))","a5124fb3":"%%time\n\n#Function to find similarity between the sentences\/paragraphs\ndef calculate_similarity(q1,q2,bertsimilarity):\n    dist=bertsimilarity.calculate_distance(q1,q2)\n    return dist\n\nif __name__=='__main__':\n    distances=[]\n    for i in range(len(data[:100])):\n        q1=data['question1'][i]\n        q2=data['question2'][i]\n        z=calculate_similarity(q1,q2,bertsimilarity)\n        distances.append(z)\n    print(distances)    \n\n","c797cc06":"result_dataset=pd.DataFrame(columns=['question1','question2','similarity_score'])\nresult_dataset['question1']=data['question1'][:100]\nresult_dataset['question2']=data['question2'][:100]\nresult_dataset['similarity_score']=distances","d77e0374":"result_dataset.head()","b13a8e83":"## Get an idea about the dataset\n\nFrom the similarity score we see that most semantically similar question pairs are having a score greater than 0.9 and contextually different pairs are having a score way less.We can use these scores along with some thresholds to determine which questions are similar and which are not. ","4cdfafa6":"## BERTSimilarity Library\n\nBERTSimilarity is a pytorch library built on BERT (bert-base-uncased) and Scipy for semantic similarity measurement between sentences. The actual library can be installed from [Pypi](https:\/\/pypi.org\/project\/BERTSimilarity\/).\n\nThe Github for the library can be found [here](https:\/\/github.com\/abhilash1910\/BERTSimilarity). The library uses the feed forward BERT layer (without backprop) and provides BERT embeddings for sentences. These sentence vectors are then analysed with respect to cosine distance for similarity measurement.\n\nThe BERT feed forward architecture as well as the scaled attention layer (for finetuning and pretraining) is provided.\n\n<img src='https:\/\/miro.medium.com\/max\/1115\/1*_7-cBzOXfL175oeAgYPeHA.png'>\n\n\n\nThe Google Research Github for BERT is [attached](https:\/\/github.com\/google-research\/bert\/) and the associated paper is [provided](https:\/\/arxiv.org\/abs\/1810.04805).","709e6883":"## Transformer Architecture \n\nThe Transformer architecture which forms the most significant part of BERT contains feed forward nets , multi head attentions and layer normalizations . These layers are complex encoder decoder architectures with self attention mechanisms to store and retain information for long sequences of data.\n\nThe visualization of the Transformer architecture is provided here:\n\n<img src='https:\/\/miro.medium.com\/max\/2880\/1*BHzGVskWGS_3jEcYYi6miQ.png'>\n\n\nThe details for the Transformer paper can be found [here](https:\/\/arxiv.org\/abs\/1706.03762). For an elaborate implementation including different SOTA algorithms for classification, this [Notebook](https:\/\/www.kaggle.com\/abhilash1910\/nlp-workshop-2-ml-india)   can be referred. ","8814eda6":"## Further Development\n\nThis minimalistic library can be used for more semantic analysis on the dataset and is left for interested Kagglers to try it out! It would be great if the kernel is upvoted if it was found helpful.","1d671bc4":"# BERTSimilarity Library\n\nA minimalistic [BERT embedding](https:\/\/github.com\/abhilash1910\/BERTSimilarity) library built on BERT (base uncased) model for semantic similarity measurement. ","08d30ebd":"## Testing the BERTSimilarity library on a small sample of 100 texts \n\nThis is a test to see how the performance of the BERTSimilarity model is when it comes to semantic similarity matching. For example use case, the first 100 samples are taken."}}