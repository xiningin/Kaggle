{"cell_type":{"a70f504e":"code","21c3c602":"code","0efa069c":"code","997f606d":"code","6d4604d3":"code","014483a4":"code","ab59077b":"code","ac20577d":"code","96645837":"code","02cd018a":"code","c6f9eff6":"code","7a3c42f2":"code","df7ac709":"code","850b23c8":"code","d3119467":"code","8784b980":"code","900c6b55":"code","1d048f84":"code","6ddf4505":"code","2e507147":"code","cfa18aff":"code","1daf4a38":"code","3274c13f":"markdown","5bede04e":"markdown","210bb3ae":"markdown","ae7b6055":"markdown","311bdfc2":"markdown","a2b8a974":"markdown"},"source":{"a70f504e":"# Import semua library yang dibutuhkan\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualisation (2-D)\n%matplotlib inline\nimport seaborn as sns # data visualisation (3-D)\nplt.style.use('seaborn') # set style for graph","21c3c602":"# Import file dataset\nrawdata = pd.read_csv('\/\/kaggle\/input\/winequality-white.csv')","0efa069c":"# Menampilkan data\ndisplay(rawdata.head(), rawdata.shape) ","997f606d":"# Menampilkan informasi pada dataset\n# Seperti jumlah missing value, dan type field\nrawdata.info()","6d4604d3":"# Mendapatkan deskripsi dari dataset berupa count, mean, std, min, q1, q2, q3, dan max\n# pada masing-masing field\nrawdata.describe()","014483a4":"# Mengecek nilai kolerasi antar masing-masing field, untuk melihat pesebaran datanya\nrawdata.corr()","ab59077b":"# Menampilkan hasil visualisasi data Korelasi antar masing-masing field\nplt.figure(figsize = (10, 8))\nsns.heatmap(rawdata.corr(), square = True, cmap = 'Blues')","ac20577d":"# Quality Class Values Count\ntarget_count = rawdata['quality'].value_counts()\ntarget_count.plot(kind='bar', title='Count (target)');","96645837":"# Memvisualiasikan feature quality dan citric acid\nplt.figure(figsize = (10, 6))\nsns.set_context('talk')\nsns.boxplot(rawdata['quality'], rawdata['citric acid'], data = rawdata)","02cd018a":"outliers = []  # list data untuk menampung nilai ouliers\n\n# metode yang digunakan untuk mendeteksi outliers yaitu interquartile range \ndef detect_outliers(data): \n    quantile1, quantile3 = np.percentile(data, [25, 75])  # create two quantiles for 25% and 75%\n    iqr_val = quantile3 - quantile1                       # interquantilerange value\n    lower_bound_value = quantile1 - (1.5 * iqr_val)       # lower limit of the data, anything greater are not outliers\n    upper_bound_value = quantile3 + (1.5 * iqr_val)       # upper limit of the data, anything less are not outliers\n    \n    for i in data:\n        if lower_bound_value < i < upper_bound_value:     # if data[value] is greater than lbv and less than ubv than it is not considered as an outlier\n            pass\n        else:\n            outliers.append(i)\n            \n    return lower_bound_value, upper_bound_value        # return lower bound and upper bound value for the data\n\nfeature_list = ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\n# #Delete outlier\n# for i in feature_list:\n#     mean = rawdata[i].mean()\n#     bawah, atas = detect_outliers(rawdata[i])\n#     rawdata[i] = rawdata[i].mask(rawdata[i] > atas, mean)","c6f9eff6":"detect_outliers(rawdata['fixed acidity'])","7a3c42f2":"rawdata.corr()","df7ac709":"plt.figure(figsize = (10, 8))\nsns.heatmap(rawdata.corr(), square = True, cmap = 'Blues')","850b23c8":"from scipy import stats\nk2, p = stats.normaltest(rawdata['fixed acidity'])\nalpha = 1e-3\nprint(\"p = {:g}\".format(p))\nif p < alpha:  # null hypothesis: x comes from a normal distribution\n    print(\"The null hypothesis can be rejected\")\nelse:\n    print(\"The null hypothesis cannot be rejected\")","d3119467":"# Class count\ncclass_6,cclass_5,cclass_7,cclass_8,cclass_4,cclass_3,cclass_9 = rawdata.quality.value_counts()\n\n# Divide by class\ndf_class_6 = rawdata[rawdata['quality'] == 6]\ndf_class_5 = rawdata[rawdata['quality'] == 5]\ndf_class_7 = rawdata[rawdata['quality'] == 7]\ndf_class_8 = rawdata[rawdata['quality'] == 8]\ndf_class_4 = rawdata[rawdata['quality'] == 4]\ndf_class_3 = rawdata[rawdata['quality'] == 3]\ndf_class_9 = rawdata[rawdata['quality'] == 9]","8784b980":"df_class_5_over = df_class_5.sample(cclass_6, replace=True)\ndf_test_over = pd.concat([df_class_6, df_class_5_over], axis=0)\n\ndf_class_7_over = df_class_7.sample(cclass_6, replace=True)\ndf_test_over = pd.concat([df_class_6, df_class_7_over], axis=0)\n\ndf_class_8_over = df_class_8.sample(cclass_6, replace=True)\ndf_test_over = pd.concat([df_class_6, df_class_8_over], axis=0)\n\ndf_class_4_over = df_class_4.sample(cclass_6, replace=True)\ndf_test_over = pd.concat([df_class_6, df_class_4_over], axis=0)\n\ndf_class_3_over = df_class_3.sample(cclass_6, replace=True)\ndf_test_over = pd.concat([df_class_6, df_class_3_over], axis=0)\n\ndf_class_9_over = df_class_9.sample(cclass_6, replace=True)\ndf_test_over = pd.concat([df_class_6, df_class_9_over], axis=0)\n\nprint('Random over-sampling:')\nprint(df_test_over.quality.value_counts())\n\ndf_test_over.quality.value_counts().plot(kind='bar', title='Count (target)');","900c6b55":"df_test_over.corr()","1d048f84":"rawdata['quality'].replace([3, 4, 5], 'buruk' , inplace=True)\nrawdata['quality'].replace([6], 'sedang' , inplace=True)\nrawdata['quality'].replace([7,8, 9], 'baik' , inplace=True)","6ddf4505":"rawdata.info()","2e507147":"rawdata['quality'].loc[5.87790935]","cfa18aff":"# MISSING VALUE PROCESS\n# 1. Check Missing Values field in each Column\n#    Pengecekan ini untuk mengetahui kolom mana yang perlu dilakukan aksi\ndef missing_values_table(df):\n    mis_val = df.isnull().sum()\n    mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n    mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n    mis_val_table_ren_columns = mis_val_table.rename(\n    columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n    mis_val_table_ren_columns = mis_val_table_ren_columns[\n        mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n    '% of Total Values', ascending=False).round(1)\n    print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n        \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n          \" columns that have missing values.\")\n    return mis_val_table_ren_columns\n\nmissing_values_table(rawdata)\n\n# # Untuk mengatasi missing value pada proses ini menggunakan nilai yang sering muncul\n# rawdata['total_bedrooms'].value_counts()\n# # Didapatkan 280 merupakan total kamar yang sering disebut maka nilai kosong akan diisi oleh 280\n# rawdata['total_bedrooms'].fillna(280,inplace=True)\n# rawdata.describe()","1daf4a38":"def check_outliers(column):\n    print('Outliers on column ', column)\n    data_mean, data_std = rawdata[column].mean(), rawdata[column].std()\n    print('mean : ',data_mean,', std : ',data_std)\n    # identify outliers\n    cut_off = data_std * 3\n    lower, upper = data_mean - cut_off, data_mean + cut_off\n    outliers = [x for x in rawdata[column] if x < lower or x > upper]\n    print('Identified outliers: %d' % len(outliers))\n    # remove outliers\n    outliers_removed = [x for x in rawdata[column] if x >= lower and x <= upper]\n    print('Non-outlier observations: %d' % len(outliers_removed))\n    print('')\n    return outliers_removed\n\noutliers_data = pd.DataFrame()\n","3274c13f":"### Melakukan Penghapusan Outlier","5bede04e":"## DATA EXPLORATION","210bb3ae":"## DATA PREPROCESSING","ae7b6055":"# **White Wine Quality **\nEng : Learning how to preprocessing, with data mining method.  \nInd : Belajar bagaimana untuk pra proses data dengan metode data mining.  \nData Mining Process :\n1. Replace Outliers with mean\n2. Random Oversampling","311bdfc2":"Dari visualisasi di atas terlihat bahwa nilai korelasinya sangat rendah antar feature.  \nBerikut dibawah adalah percobaan mencari tahu lebih detail dengan visualisasi","a2b8a974":"dari data terlihat nilai korelasi tidak terlalu baik, sekarang kita mencoba untuk melihat nilai quality"}}