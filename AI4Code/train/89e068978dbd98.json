{"cell_type":{"d367d8ce":"code","48436d08":"code","ce33907b":"code","0d2fee73":"code","f904cc09":"code","5cbc238d":"code","9900523f":"code","bba358a5":"code","3cc9aad4":"code","5737291f":"code","5ae26e9f":"code","cb87d0cf":"code","21bf9b14":"code","2d1e3142":"code","5b18d99b":"code","ad1ff837":"code","d7cfcd58":"code","37a704ea":"code","bf2e6210":"code","1ab4a2d0":"code","d2dfee77":"code","1d76eec4":"code","d3775f03":"code","9f3740d7":"code","6f101a90":"code","2c495d4f":"code","a4936902":"code","9701a768":"code","3a27d5cf":"code","c9fdfeb0":"code","4191c547":"code","5e0ce5be":"code","42b96bb5":"code","76c2ae7d":"code","c0b40b00":"code","1d4738a9":"code","1d10a26e":"code","72350cb4":"code","fb0b5185":"code","752bc256":"code","6b2e12c4":"code","3bfc076d":"code","c3e38f79":"code","c5d8f019":"code","184b228e":"code","e21e3c60":"code","3876acee":"code","f55d9112":"code","cb42b36e":"code","8a4f560a":"code","9c527744":"code","c3bbab0c":"code","eadcad49":"code","861b1b48":"code","87404c92":"code","02624e5b":"code","9b81480b":"code","b7605d38":"code","77cf45bd":"code","fe0f4864":"code","623fbb43":"code","ba2eb5dc":"code","205b870b":"code","d65d6ce2":"code","d5bff8eb":"code","2385e46d":"code","2281d2fb":"code","bb699926":"code","32e724ac":"markdown","0b07ea49":"markdown","727201d0":"markdown","d39aa82b":"markdown","538338bb":"markdown","44bf6d2f":"markdown","a076770e":"markdown","ab216197":"markdown","8c724901":"markdown","a68754ff":"markdown","484ba5fe":"markdown","be9b91b8":"markdown","88be7b4d":"markdown","0fa58787":"markdown","efa84964":"markdown","b3bb22c3":"markdown"},"source":{"d367d8ce":"!pip install simfin\n!pip install chart_studio\n!pip install xlrd\n!pip install seaborn\n!pip install chart_studio\n!pip install plotly\n!pip install pandas_datareader\n!pip install mpl_finance","48436d08":"import numpy as np\nimport pandas as pd\nimport xlrd\nimport matplotlib.pyplot as plt\nimport scipy as sp\nimport chart_studio\nimport simfin as sf\nimport os\nimport seaborn as sns\nimport plotly\nsns.set()\nimport time\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\n\nfrom statsmodels.graphics.tsaplots import plot_acf  \nfrom statsmodels.tsa.stattools import adfuller as ADF  \nfrom statsmodels.graphics.tsaplots import plot_pacf    \nfrom statsmodels.stats.diagnostic import acorr_ljungbox    \nfrom statsmodels.tsa.arima_model import ARIMA\n\n\nimport pandas_datareader as web\nimport datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker as mticker\nimport mpl_finance as mpl\n","ce33907b":"def DetectTheQualifiedCompanies():\n\n    FileSavePath = os.getcwd()\n    sf.set_api_key('free')\n    sf.set_data_dir(FileSavePath)\n\n    Income_Statement = sf.load_income(variant='annual')\n    Cashflow_Statement = sf.load_cashflow(variant='annual', market='us')\n    Balance_Statement = sf.load_balance(variant='annual', market='us')\n\n    Result = Cashflow_Statement.reset_index()\n    Companies_Name = Result['Ticker'].drop_duplicates()\n    Qualified_Companies = []\n    t0 = time.time()\n    for i, Ticker in enumerate(Companies_Name):\n        DataInformation_Income = Income_Statement.loc[Ticker]\n        DataInformation_Cashflow = Cashflow_Statement.loc[Ticker]\n        DataInformation_Balance = Balance_Statement.loc[Ticker]\n        DataInforamtion_Aggregation = pd.DataFrame()\n        DataInforamtion_Aggregation['Revenue Growth'] = DataInformation_Income['Revenue'] \/ DataInformation_Income[\n            'Revenue'].shift(1) - 1\n        DataInforamtion_Aggregation['Profit Growth'] = DataInformation_Income['Net Income'] \/ DataInformation_Income[\n            'Net Income'].shift(1) - 1\n        DataInforamtion_Aggregation['Positive Operation Cash Flow'] = DataInformation_Cashflow[\n            'Net Cash from Operating Activities']\n        DataInforamtion_Aggregation['Current Ratio'] = DataInformation_Balance['Total Current Assets'] \/ \\\n                                                       DataInformation_Balance['Total Current Liabilities']\n        DataInforamtion_Aggregation['Debt to Equity Ratio'] = DataInformation_Balance['Total Liabilities'] \/ \\\n                                                              DataInformation_Balance['Total Equity']\n        DataInforamtion_Aggregation['Interest Coverage Ratio'] = DataInformation_Income['Pretax Income (Loss)'] \/ abs(\n            DataInformation_Income['Interest Expense, Net'])\n        DataInforamtion_Aggregation['Net Minus Long'] = DataInformation_Income['Net Income'] - DataInformation_Balance[\n            'Long Term Debt']\n        DataInforamtion_Aggregation['Return on Equity'] = DataInformation_Income['Net Income'] \/ \\\n                                                          DataInformation_Balance['Total Equity']\n        DataInforamtion_Aggregation['Return on Asset'] = DataInformation_Income['Net Income'] \/ DataInformation_Balance[\n            'Total Assets']\n\n        Judgement_Of_Length = len(DataInforamtion_Aggregation)\n        Judgement_Of_Length = 1 if Judgement_Of_Length >= 10 else 0\n\n        Judgement_Of_RevenueGrowth = \\\n        DataInforamtion_Aggregation[DataInforamtion_Aggregation['Revenue Growth'] > 0.05].count()[0]\n        Judgement_Of_RevenueGrowth = 1 if Judgement_Of_RevenueGrowth >= 5 else 0\n\n        Judgement_Of_ProfitGRowth = \\\n        DataInforamtion_Aggregation[DataInforamtion_Aggregation['Profit Growth'] > 0.05].count()[0]\n        Judgement_Of_ProfitGRowth = 1 if Judgement_Of_ProfitGRowth >= 5 else 0\n\n        Judgement_Of_PostiveOpeartrionCF = DataInforamtion_Aggregation['Positive Operation Cash Flow'][-5:] > 0\n        Judgement_Of_PostiveOpeartrionCF = Judgement_Of_PostiveOpeartrionCF[\n            Judgement_Of_PostiveOpeartrionCF == True].count()\n        Judgement_Of_PostiveOpeartrionCF = 1 if Judgement_Of_PostiveOpeartrionCF == 5 else 0\n\n        Judgement_Of_CurrentRatio = DataInforamtion_Aggregation['Current Ratio'].mean() > 1\n        Judgement_Of_CurrentRatio = 1 if Judgement_Of_CurrentRatio else 0\n\n        Judgement_Of_DebtToEquityRatio = DataInforamtion_Aggregation['Debt to Equity Ratio'].mean() < 1.5\n        Judgement_Of_DebtToEquityRatio = 1 if Judgement_Of_DebtToEquityRatio else 0\n\n        Judgement_Of_ICR = DataInforamtion_Aggregation['Interest Coverage Ratio'].mean() > 3\n        Judgement_Of_ICR = 1 if Judgement_Of_ICR else 0\n\n        Judgement_Of_NetMinusLong = DataInforamtion_Aggregation['Net Minus Long'] > 0\n        Judgement_Of_NetMinusLong = Judgement_Of_NetMinusLong[Judgement_Of_NetMinusLong == True].count()\n        Judgement_Of_NetMinusLong = 1 if Judgement_Of_NetMinusLong >= 5 else 0\n\n        Judgement_Of_ROE = DataInforamtion_Aggregation['Return on Equity'].mean() > 0.15\n        Judgement_Of_ROE = 1 if Judgement_Of_ROE else 0\n\n        Judgement_Of_ROA = DataInforamtion_Aggregation['Return on Asset'].mean() > 0.07\n        Judgement_Of_ROA = 1 if Judgement_Of_ROA else 0\n\n        Aggregation = sum([Judgement_Of_Length, Judgement_Of_RevenueGrowth, Judgement_Of_ProfitGRowth,\n                           Judgement_Of_PostiveOpeartrionCF, Judgement_Of_CurrentRatio,\n                           Judgement_Of_DebtToEquityRatio, Judgement_Of_ICR, Judgement_Of_NetMinusLong,\n                           Judgement_Of_ROE, Judgement_Of_ROA])\n        if Aggregation == 10:\n            Qualified_Companies.append(Ticker)\n    t0 = time.time() - t0\n    print('The whole qualified companies :')\n    [print(x) for x in Qualified_Companies]\n    Qualified_Companies = pd.DataFrame(Qualified_Companies, columns=['Ticker'])\n    #SavePath = ''.join([FileSavePath,r'\\\\','Qualification Ticker.xlsx'])\n    #Qualified_Companies.to_excel(SavePath)\n    print('Spend %.2f' % t0, 'seconds')\n    return Qualified_Companies\n","0d2fee73":"Qualified_Companies = DetectTheQualifiedCompanies()","f904cc09":"def DownloadData(Ticker,FileSavePath):\n\n    sf.set_api_key('free')\n    sf.set_data_dir(FileSavePath)\n\n    Income_Statement = sf.load_income(variant = 'annual')\n    Cashflow_Statement =  sf.load_cashflow(variant='annual', market='us')\n    Balance_Statement = sf.load_balance(variant='annual', market='us')\n\n\n    DataInformation_Income = Income_Statement.loc[Ticker]\n    DataInformation_Cashflow = Cashflow_Statement.loc[Ticker]\n    DataInformation_Balance = Balance_Statement.loc[Ticker]\n\n\n    Income_SavePath = [FileSavePath,r'\\\\',r'Income.csv']\n    Cashflow_SavePath = [FileSavePath, r'\\\\', r' Cashflow.csv']\n    Balance_SavePath = [FileSavePath, r'\\\\',r' Balance.csv']\n\n    Income_SavePath = ''.join(Income_SavePath)\n    Cashflow_SavePath = ''.join(Cashflow_SavePath)\n    Balance_SavePath = ''.join(Balance_SavePath)\n\n    DataInformation_Income.to_csv(Income_SavePath)\n    DataInformation_Cashflow.to_csv(Cashflow_SavePath)\n    DataInformation_Balance.to_csv(Balance_SavePath)\n\n    print('\\n')\n    print(DataInformation_Income.head())\n    [print(x) for x in DataInformation_Income.columns]\n\n    print(DataInformation_Cashflow.head())\n    [print(x) for x in DataInformation_Cashflow.columns]\n\n    print(DataInformation_Balance.head())\n    [print(x) for x in DataInformation_Balance.columns]\n\n\n    #DataInformation_Income.index = DataInformation_Income['Fiscal Year']\n    #DataInformation_Balance.index = DataInformation_Balance['Fiscal Year']\n    #DataInformation_Cashflow.index = DataInformation_Cashflow['Fiscal Year']\n\n\n    return DataInformation_Income,DataInformation_Cashflow,DataInformation_Balance","5cbc238d":"Ticker = 'EW'\nFileSavePath = os.getcwd()\nDataInformation_Income,DataInformation_Cashflow,DataInformation_Balance = DownloadData(Ticker,FileSavePath)","9900523f":"def ReadLoadData(Ticker,FileSavePath ):\n    N = '''\n    def FindOutTheCurrentPath(Path):\n\n        Balance_Sheet_Path = ''.join([Path, r'\\\\', r'Balance.csv'])\n        CashFlow_Sheet_Path = ''.join([Path, r'\\\\', r'Cashflow.csv'])\n        Income_Sheet_Path = ''.join([Path, r'\\\\', r'Income.csv'])\n\n        return Balance_Sheet_Path, CashFlow_Sheet_Path, Income_Sheet_Path\n    '''\n\n    Balance_SavePath, Cashflow_SavePath, Income_SavePath = DownloadData(Ticker,FileSavePath)\n\n    N = '''\n    DataInformation_Income = pd.read_csv(Income_SavePath)\n    DataInformation_Cashflow = pd.read_csv(Cashflow_SavePath)\n    DataInformation_Balance = pd.read_csv(Balance_SavePath)\n    '''\n\n    \n    DataInformation_Income.index = DataInformation_Income['Fiscal Year']\n    DataInformation_Balance.index = DataInformation_Balance['Fiscal Year']\n    DataInformation_Cashflow.index = DataInformation_Cashflow['Fiscal Year']\n\n    print('Income Statement','\\n',DataInformation_Income.head())\n    print('The list of Income Statement Columns:')\n    [print(x) for x in DataInformation_Income.columns]\n\n    print('\\n','Cash flow Statement','\\n',DataInformation_Cashflow.head())\n    print('The list of Cash flow Statement Columns:')\n    [print(x) for x in DataInformation_Cashflow.columns]\n\n    print('\\n','Balance Statement','\\n',DataInformation_Balance.head())\n    print('The list of Balance Sheet Columns:')\n    [print(x) for x in DataInformation_Balance.columns]\n\n    return DataInformation_Income, DataInformation_Cashflow, DataInformation_Balance\n","bba358a5":"def excel_to_df(excel_sheet):\n    df = pd.read_excel(excel_sheet)\n    df.dropna(how='all', inplace=True)\n\n    index_PL = int(df.loc[df['Data provided by SimFin'] == 'Profit & Loss statement'].index[0])\n    index_CF = int(df.loc[df['Data provided by SimFin'] == 'Cash Flow statement'].index[0])\n    index_BS = int(df.loc[df['Data provided by SimFin'] == 'Balance Sheet'].index[0])\n\n    df_PL = df.iloc[index_PL:index_BS - 1, 1:]\n    df_PL.dropna(how='all', inplace=True)\n    df_PL.columns = df_PL.iloc[0]\n    df_PL = df_PL[1:]\n    df_PL.set_index(\"in million USD\", inplace=True)\n    (df_PL.fillna(0, inplace=True))\n\n    df_BS = df.iloc[index_BS - 1:index_CF - 2, 1:]\n    df_BS.dropna(how='all', inplace=True)\n    df_BS.columns = df_BS.iloc[0]\n    df_BS = df_BS[1:]\n    df_BS.set_index(\"in million USD\", inplace=True)\n    df_BS.fillna(0, inplace=True)\n\n    df_CF = df.iloc[index_CF - 2:, 1:]\n    df_CF.dropna(how='all', inplace=True)\n    df_CF.columns = df_CF.iloc[0]\n    df_CF = df_CF[1:]\n    df_CF.set_index(\"in million USD\", inplace=True)\n    df_CF.fillna(0, inplace=True)\n\n    df_CF = df_CF.T\n    df_BS = df_BS.T\n    df_PL = df_PL.T\n\n    return df, df_PL, df_BS, df_CF\n\n\ndef combine_regexes(regexes):\n    return \"(\" + \")|(\".join(regexes) + \")\"","3cc9aad4":"\ndef GetLinearRegression(DataInformation,k=1):\n\n    Data_X = [x+1 for x in range(len(DataInformation))]\n    Data_X = np.array(Data_X)\n    Data_Y = np.array(DataInformation['EPS'])\n    Data_Fit = np.polyfit(Data_X,Data_Y,k)\n    Data_YY = np.zeros(len(Data_X))\n    for x in range(k+1):\n        Data_YY += Data_Fit[x]*Data_X**(k-x)\n    Data_XX = np.arange(max(Data_X)+1,max(Data_X)+11,1)\n    Data_XX = np.array(Data_XX)\n    Data_ZZ = np.zeros(len(Data_XX))\n    for x in range(k+1):\n        Data_ZZ += Data_Fit[x]*Data_XX**(k-x)\n    print(Data_ZZ)\n    \n    plt.scatter(Data_X,Data_Y)\n    plt.plot(Data_X,Data_YY)\n    plt.scatter(Data_XX,Data_ZZ)\n    Title_Nmae = ''.join(['The ',str(k),'th Polynomial Curve Fitting'])\n    plt.legend([Title_Nmae,'Actual','Forecast'])\n    plt.title('EPS Forecast')\n    plt.show()","5737291f":"def DownLoadStockPrice(Ticker,FileSavePath):\n    sf.set_api_key('free')\n    sf.set_data_dir(FileSavePath)\n    Share_Pirce = sf.load_shareprices(variant='daily', market='us')\n    DataInformation_DailyPirce = Share_Pirce.loc[Ticker]\n    DailyPirce_SavePath = [FileSavePath, r'\\\\',r' StockPrice.csv']\n    DailyPirce_SavePath = ''.join(DailyPirce_SavePath)\n    DataInformation_DailyPirce.to_csv(DailyPirce_SavePath)\n    print(DataInformation_DailyPirce.tail())\n    return DataInformation_DailyPirce","5ae26e9f":"\ndef get_today():\n    today = time.localtime(time.time())\n    today_year  = today.tm_year\n    today_month = today.tm_mon\n    today_date = today.tm_mday\n    today_format = datetime.datetime(today_year, today_month, today_date)\n    today_format = today_format.strftime('%Y%m%d')\n    return today_format\n\nclass GetData(object):\n    def __init__(self,Name,Startdate,Enddate,Datasource='yahoo'):\n        self.Name = Name\n        self.Startdate = Startdate\n        self.Enddate = Enddate\n        self.Datasource  = Datasource\n        New_Startdate_format = time.strptime(self.Startdate,'%Y%m%d')\n        New_Enddate_format = time.strptime(self.Enddate,'%Y%m%d')\n        New_Startdate = datetime.datetime(New_Startdate_format.tm_year,New_Startdate_format.tm_mon,New_Startdate_format.tm_mday).strftime('%m\/%d\/%Y')\n        New_Enddate = datetime.datetime(New_Enddate_format.tm_year,New_Enddate_format.tm_mon,New_Enddate_format.tm_mday).strftime('%m\/%d\/%Y')\n        self.NewStartdate = New_Startdate\n        self.NewEnddate = New_Enddate\n    def DownloadData(self):\n        DataInformation = web.DataReader(self.Name,self.Datasource,self.NewStartdate,self.NewEnddate)\n        Trade_Date_List = []\n        for TradeDate in range(len(DataInformation.index)):\n            Trade_Date_Format = time.strptime(str(DataInformation.index[TradeDate]), '%Y-%m-%d %H:%M:%S')\n            Trade_Date = datetime.datetime(Trade_Date_Format.tm_year, Trade_Date_Format.tm_mon,\n                                           Trade_Date_Format.tm_mday).strftime('%Y%m%d')\n            Trade_Date_List.append(Trade_Date)\n        Index_Trade_Date_List = []\n        for TradeDate in range(len(DataInformation.index)):\n            Index_Trade_Date_Format = time.strptime(str(DataInformation.index[TradeDate]), '%Y-%m-%d %H:%M:%S')\n            Index_Trade_Date = datetime.datetime(Index_Trade_Date_Format.tm_year, Index_Trade_Date_Format.tm_mon,\n                                           Index_Trade_Date_Format.tm_mday).strftime('%Y-%m-%d')\n            Index_Trade_Date_List.append(Index_Trade_Date)\n        DataInformation['IndexTradeDate'] = Index_Trade_Date_List\n        DataInformation['TradeDate'] = Trade_Date_List\n        DataInformation['Name'] = self.Name\n        all_columns = DataInformation.columns.tolist()\n\n        all_columns.pop(-1)\n        all_columns.insert(0, 'Name')\n        all_columns.pop(-1)\n        all_columns.insert(1, 'TradeDate')\n        all_columns.pop(-1)\n        all_columns.insert(2, 'IndexTradeDate')\n\n        DataInformation = DataInformation.reindex(columns = all_columns)\n        CurrentFilePath = GetData.SaveData(self,DataInformation)\n        print('Data has already been downloaded from %s'%self.Datasource , '!')\n        print('Information : \\n','Name : %s'%self.Name,'\\n','Columns : ',all_columns,'\\n','Total index ',len(DataInformation.index),'\\n'\n              ,'Saved Path in csv: ',CurrentFilePath[0],'\\n','Saved Path in excel:',CurrentFilePath[1])\n        return DataInformation\n    def GetCurrentPath(self):\n        CurrentFilePath = os.getcwd()\n        return CurrentFilePath\n    def SaveData(self,DataInformation):\n        CurrentFilePath = GetData.GetCurrentPath(self)\n        N='''\n        CurrentFilePath = CurrentFilePath + str(r'\\DataBase')\n        if not os.path.exists(CurrentFilePath):\n            os.makedirs(CurrentFilePath)\n\n        CurrentFilePath_csv = CurrentFilePath + str(r'\\Csv')\n        if not os.path.exists(CurrentFilePath_csv):\n            os.makedirs(CurrentFilePath_csv)\n        CurrentFilePath_excel = CurrentFilePath + str(r'\\Xlsx')\n        if not os.path.exists(CurrentFilePath_excel):\n            os.makedirs(CurrentFilePath_excel)\n        '''\n        CurrentFilePath_csv = CurrentFilePath\n        CurrentFilePath_excel = CurrentFilePath\n        CurrentFilePath_csv = CurrentFilePath_csv + str(r'\/') + str(self.Name)\n        CurrentFilePath_csv = CurrentFilePath_csv + str(r'.csv')\n        CurrentFilePath_excel = CurrentFilePath_excel + str(r'\/')+ str(self.Name)\n        CurrentFilePath_excel = CurrentFilePath_excel + str(r'.xlsx')\n        DataInformation.to_csv(CurrentFilePath_csv,encoding='utf_8_sig')\n        DataInformation.to_excel(excel_writer=CurrentFilePath_excel, encoding='utf_8_sig')\n        #GetData.DrawPlot(self,DataInformation)\n        return CurrentFilePath_csv,CurrentFilePath_excel\n\n    def ReadDataFromCsv(self,path):\n        DataInformation = pd.read_csv(path)\n        return DataInformation\n    def ReadDataFromExcel(self,path):\n        DataInformation = pd.read_excel(path)\n        return  DataInformation\n    def __str__(self):\n        return 'Name : '+str(self.Name)+'\\n'+'Start Date : '+str(self.NewStartdate)+'\\n'+'End Date : '+str(self.NewEnddate)+'\\n'+'Data Source : '+str(self.Datasource)","cb87d0cf":"Ticker = 'EW'\nFileSavePath = os.getcwd()\n\nDataInformation_Income, DataInformation_Cashflow, DataInformation_Balance = ReadLoadData(Ticker,FileSavePath)\n#DataInformation_DailyPirce = DownLoadStockPrice(Ticker,FileSavePath)\n\nStartdate = '20180101'\nEnddate = get_today()\nEW = GetData('EW',Startdate,Enddate,'yahoo')\nDataInformation_EW = EW.DownloadData()\nprint(DataInformation_EW)\n[print(x) for x in DataInformation_EW.columns]\n\n","21bf9b14":"\nDataInformation_Income.index = DataInformation_Income['Fiscal Year']\nDataInformation_Balance.index = DataInformation_Balance['Fiscal Year']\nDataInformation_Cashflow.index = DataInformation_Cashflow['Fiscal Year']\n\nDataInformation_Balance['NAV'] = DataInformation_Balance['Total Equity'] \/ DataInformation_Balance['Shares (Basic)']\nDataInformation_Balance['Working Capital'] = DataInformation_Balance['Total Current Assets'] - \\\n                                                 DataInformation_Balance['Total Current Liabilities']\nDataInformation_Balance['Current Ratio'] = DataInformation_Balance['Total Current Assets'] \/ \\\n                                               DataInformation_Balance['Total Current Liabilities']\nDataInformation_Balance['Book Value'] = DataInformation_Balance['Total Assets'] - DataInformation_Balance[\n        'Total Liabilities']\n\nprint(DataInformation_Balance[\n              [ 'Total Equity', 'Total Current Assets', 'Total Current Liabilities', 'Total Liabilities',\n               'Total Assets', 'NAV', 'Working Capital', 'Book Value', 'Current Ratio','Shares (Diluted)']])\n\n","2d1e3142":"DataInformation_Balance[['Total Assets', 'Total Liabilities', 'Total Equity']].plot()\nplt.show()","5b18d99b":"DataInformation_Balance[['Book Value']].plot()\nplt.show()","ad1ff837":"DataInformation_Balance[['Current Ratio']].plot()\nplt.show()\n","d7cfcd58":"PE_Ratio = 62.17\nGrowth_Rate = 0.744\nPEG_Ratio = PE_Ratio \/ (Growth_Rate * 100)\n\nprint(Ticker,\"'s PEG Ratio is %.2f\" % PEG_Ratio)\n","37a704ea":"\nDataInformation_Income['EPS'] = DataInformation_Income['Net Income (Common)'] \/ DataInformation_Income[\n        'Shares (Basic)']\nDataInformation_Income['EPS CAGR'] = np.log(DataInformation_Income['EPS'] \/ DataInformation_Income['EPS'].shift(1))\n\nprint(DataInformation_Income['EPS CAGR'])\n","bf2e6210":"DataInformation_Income[['EPS CAGR']].plot()\nplt.show()","1ab4a2d0":"print(DataInformation_Income['EPS'])","d2dfee77":"plt.scatter(DataInformation_Income.index, DataInformation_Income[['EPS']])\nplt.show()","1d76eec4":"plot_acf(DataInformation_Income[['EPS']])\nplt.show()","d3775f03":"print('ADF Result', ADF(DataInformation_Income['EPS']))","9f3740d7":"Diff_EPS = DataInformation_Income['EPS'].diff().dropna()\nDiff_EPS.plot()\nplt.show()","6f101a90":"plot_acf(Diff_EPS)\nplt.show()","2c495d4f":"print('ADF Result', ADF(Diff_EPS))\nprint('DIFF White Noise', acorr_ljungbox(Diff_EPS, lags=1))","a4936902":"plot_pacf(Diff_EPS)\nplt.show()","9701a768":"model = ARIMA(DataInformation_Income['EPS'], (0, 1, 1)).fit()\nprint(model.summary2())","3a27d5cf":"Data_Forecast, Data_STD, Data_Con = model.forecast(10)\nprint(Data_Forecast)","c9fdfeb0":"Data_Index = [x + 2019 for x in range(len(Data_Forecast))]\n\nplt.scatter(DataInformation_Income.index, DataInformation_Income[['EPS']])\nplt.scatter(Data_Index, Data_Forecast)\nplt.legend(['Actual', 'Forecast'])\nplt.title('ARMA(0,1,1) Fit')\nplt.xlim(2006, 2029)\nplt.show()","4191c547":"GetLinearRegression(DataInformation_Income, k=1)","5e0ce5be":"GetLinearRegression(DataInformation_Income, k=2)","42b96bb5":"GetLinearRegression(DataInformation_Income, k=3)","76c2ae7d":"DataInformation_Balance['Debt to Equity Ratio'] = DataInformation_Balance['Total Liabilities'] \/ \\\n                                                      DataInformation_Balance['Total Equity']\nprint(DataInformation_Balance[['Debt to Equity Ratio']])","c0b40b00":"DataInformation_Income['Interest Coverage Ratio'] = DataInformation_Income['Pretax Income (Loss)'] \/ abs(\n        DataInformation_Income['Interest Expense, Net'])\nprint(DataInformation_Income[['Interest Coverage Ratio']])","1d4738a9":"DataInformation_Income.columns","1d10a26e":"DataInformation_Income['Interest Expense, Net']","72350cb4":"DataInformation_Income[['Interest Coverage Ratio']].plot()\nplt.show()","fb0b5185":"FileSavePath = r'..\/input\/SimFin-data.xlsx'\n\n_, BA_PL, BA_BS, BA_CF = excel_to_df(FileSavePath)\n\nprint(BA_BS)","752bc256":"print('The List of Balance Sheet Columns: ')\n\n[print(x) for x in BA_BS.columns]","6b2e12c4":"print('\\nThe List of Income Statement Columns:')\n[print(x) for x in BA_PL.columns]","3bfc076d":"print('\\nThe List of CashFlow Columns:')\n[print(x) for x in BA_CF.columns]","c3e38f79":"BA_BS[\"_Total Current Assets\"] = BA_BS[\"Cash, Cash Equivalents & Short Term Investments\"] + BA_BS[\n\"Accounts & Notes Receivable\"] + BA_BS[\"Inventories\"] + BA_BS[\"Other Short Term Assets\"]\nprint(BA_BS[[\"_Total Current Assets\", \"Total Current Assets\"]])","c5d8f019":"BA_BS[\"_NonCurrent Assets\"] = BA_BS[\"Property, Plant & Equipment, Net\"] + BA_BS[\n\"Long Term Investments & Receivables\"] + BA_BS[\"Other Long Term Assets\"]\n\nBA_BS[\"_Total Assets\"] = BA_BS[\"_NonCurrent Assets\"] + BA_BS[\"_Total Current Assets\"]\n\nBA_BS[\"_Total Liabilities\"] = BA_BS[\"Total Current Liabilities\"] + BA_BS[\"Total Noncurrent Liabilities\"]\n\nprint(BA_BS[[\"_Total Liabilities\", \"Total Liabilities\"]])","184b228e":"BA_BS[[\"Total Assets\", \"Total Liabilities\", \"Total Equity\"]].plot()\nplt.show()","e21e3c60":"good_stuff = '''\nCash, Cash Equivalents & Short Term Investments\nAccounts & Notes Receivable\nInventories\nOther Short Term Assets\n'''\n\nasset_columns = [x for x in good_stuff.strip().split(\"\\n\")]\nprint(asset_columns)\n\n","3876acee":"BA_BS[asset_columns].plot()\nplt.show()","f55d9112":"chart_studio.tools.set_credentials_file(username='Herry_Sun', api_key='lpsuPCTWrc2XwQw3Sy6k')\n\nassets = go.Bar(\n\nx=BA_BS.index,\ny=BA_BS[\"Total Assets\"],\nname='Assets'\n)\n\nliabilities = go.Bar(\nx=BA_BS.index,\ny=BA_BS[\"Total Liabilities\"],\nname='Liabilities'\n)\n\nshareholder_equity = go.Scatter(\nx=BA_BS.index,\ny=BA_BS[\"Total Equity\"],\nname='Equity'\n)\n\ndata = [assets, liabilities, shareholder_equity]\nlayout = go.Layout(\nbarmode='stack'\n)\n\nfig_bs = go.Figure(data=data, layout=layout)\npy.plot(fig_bs, filename='Total Assets and Liabilities for EW')\nfig_bs.show()","cb42b36e":"\nfig_bs_assets = go.Figure(data=data, layout=layout)\npy.plot(fig_bs_assets, filename='Total Assets Breakdown for EW' )\nfig_bs_assets.show()\n","8a4f560a":"fig_bs_liabilitys = go.Figure(data=liabilities, layout=layout)\npy.plot(fig_bs_liabilitys, filename='Total liabilities Breakdown for EW')\nfig_bs_liabilitys.show()","9c527744":"BA_BS[\"working capital\"] = BA_BS[\"Total Current Assets\"] - BA_BS[\"Total Current Liabilities\"]\nBA_BS[[\"working capital\"]].plot()\nplt.show()","c3bbab0c":"BA_BS[[\"Accounts & Notes Receivable\", \"Payables & Accruals\"]].plot()\nplt.show()","eadcad49":"BA_BS[\"Inventories\"].plot()\nplt.show()","861b1b48":"BA_BS[\n[\"Property, Plant & Equipment, Net\", \"Long Term Investments & Receivables\", \"Other Long Term Assets\"]].plot()\nplt.show()","87404c92":"equity_columns = '''\nShare Capital & Additional Paid-In Capital\nTreasury Stock\nRetained Earnings\nOther Equity\nEquity Before Minority Interest\n'''\n\nequity_columns = [x for x in equity_columns.strip().split(\"\\n\")]","02624e5b":"BA_BS[equity_columns].plot()\nplt.show()","9b81480b":"BA_BS[\"Book Value\"] = BA_BS[\"Total Assets\"] - BA_BS[\"Total Liabilities\"]\nBA_BS[\"Book Value\"].plot()\nplt.show()","b7605d38":"BA_BS[\"Current Ratio\"] = BA_BS[\"Total Current Assets\"] \/ BA_BS[\"Total Current Liabilities\"]\nBA_BS[\"Current Ratio\"].plot()\nplt.show()","77cf45bd":"PE_RATIO = 62.17\nGROWTH_RATE = 0.744\n\nPEG_ratio = PE_RATIO \/ (GROWTH_RATE * 100)\n\nprint(\"BA Corp's PEG Ratio is %.2f\" % PEG_ratio)","fe0f4864":"BA_PL['Spread'] = BA_PL['Gross Profit'] + BA_PL['Operating Expenses']\nBA_PL[['Gross Profit', 'Operating Expenses', 'Spread']].plot()\nplt.xlabel('Fiscal Year')\n\nplt.show()","623fbb43":"\nDataInformation_DailyPirce = DataInformation_EW\nMAList = [5,10,20,60]\nfor i in MAList:\n    MAName = ''.join(['MA', str(i)])\n    DataInformation_DailyPirce[MAName] = DataInformation_DailyPirce['Close'].rolling(i).mean()\nBollMA = 20\nWidth = 2\nDataInformation_DailyPirce['MID'] = DataInformation_DailyPirce['MA20']\nDataInformation_DailyPirce['MID Volatility'] = DataInformation_DailyPirce['Close'].rolling(BollMA).std()\nDataInformation_DailyPirce['UPPER'] = DataInformation_DailyPirce['MID'] + Width *DataInformation_DailyPirce['MID Volatility']\nDataInformation_DailyPirce['LOWER'] = DataInformation_DailyPirce['MID'] - Width *DataInformation_DailyPirce['MID Volatility']\n\nDataInformation_DailyPirce = DataInformation_DailyPirce[DataInformation_DailyPirce.index>pd.to_datetime('20190701')]\nprint(DataInformation_DailyPirce.head())\n[print(x) for x in DataInformation_DailyPirce.columns]","ba2eb5dc":"fig = plt.figure(figsize=(8, 6))\nCandleGraph = fig.add_subplot(1, 1, 1)\nmpl.candlestick2_ohlc(CandleGraph,DataInformation_DailyPirce['Open'],DataInformation_DailyPirce['High'],DataInformation_DailyPirce['Low'],DataInformation_DailyPirce['Close'],width=.6,\n                              colorup='#ff1717',colordown='#53c156')\n\nfor i in MAList:\n    MAName = ''.join(['MA', str(i)])\n    CandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce)),DataInformation_DailyPirce[MAName],label = str(MAName),lw = 1.0)\n\nCandleGraph.legend(loc = 'best')\nCandleGraph.set_title('EW Stock Price')\nCandleGraph.set_xlabel('Date')\nCandleGraph.set_ylabel('Price')\nCandleGraph.set_xlim(0,len(DataInformation_DailyPirce.index))\nCandleGraph.set_xticks(range(0,len(DataInformation_DailyPirce.index),20))\nCandleGraph.set_xticklabels([DataInformation_DailyPirce.index.strftime('%Y-%m-%d')[index] for index in CandleGraph.get_xticks()])\nfor label in CandleGraph.xaxis.get_ticklabels():\n    label.set_rotation(45)\n    label.set_fontsize(10)\nplt.show()","205b870b":"fig = plt.figure(figsize=(8, 6))\nCandleGraph = fig.add_subplot(1, 1, 1)\nmpl.candlestick2_ohlc(CandleGraph,DataInformation_DailyPirce['Open'],DataInformation_DailyPirce['High'],DataInformation_DailyPirce['Low'],DataInformation_DailyPirce['Close'],width=.6,\n                              colorup='#ff1717',colordown='#53c156')\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce)), DataInformation_DailyPirce['MID'],\n                     label='BOLL MID', lw=1.0)\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce)), DataInformation_DailyPirce['UPPER'],\n                     label='BOLL UPPER', lw=1.0)\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce)), DataInformation_DailyPirce['LOWER'],\n                     label='BOLL LOWER', lw=1.0)\nCandleGraph.legend(loc = 'best')\nCandleGraph.set_title('EW Stock Price')\nCandleGraph.set_xlabel('Date')\nCandleGraph.set_ylabel('Price')\nCandleGraph.set_xlim(0,len(DataInformation_DailyPirce.index))\nCandleGraph.set_xticks(range(0,len(DataInformation_DailyPirce.index),20))\nCandleGraph.set_xticklabels([DataInformation_DailyPirce.index.strftime('%Y-%m-%d')[index] for index in CandleGraph.get_xticks()])\nfor label in CandleGraph.xaxis.get_ticklabels():\n    label.set_rotation(45)\n    label.set_fontsize(10)\nplt.show()","d65d6ce2":"AnnualReportAnnounceDate = pd.to_datetime('20190724')\n\nprint(DataInformation_DailyPirce.loc[AnnualReportAnnounceDate])\n\nDataInformation_DailyPirce_NewPeriod = DataInformation_DailyPirce[DataInformation_DailyPirce.index>=AnnualReportAnnounceDate]\n\nTheFirstSupportingLine = DataInformation_DailyPirce.loc[AnnualReportAnnounceDate]['Close']\nTheFirstResistanceLine = DataInformation_DailyPirce['High'].max()\n\nDataInformation_DailyPirce_NewPeriod['1st Support Line'] = TheFirstSupportingLine\nDataInformation_DailyPirce_NewPeriod['1st Resistance Line'] = TheFirstResistanceLine\n\nJudgement_Of_Times_Of_Below_SupportLine = DataInformation_DailyPirce_NewPeriod[DataInformation_DailyPirce_NewPeriod['Low']<TheFirstSupportingLine].count()[0]\nprint(Judgement_Of_Times_Of_Below_SupportLine)\nJudgement_Of_Times_Of_Above_SupportLine = DataInformation_DailyPirce_NewPeriod[DataInformation_DailyPirce_NewPeriod['Low']>=TheFirstSupportingLine].count()[0]\nprint(Judgement_Of_Times_Of_Above_SupportLine)","d5bff8eb":"fig = plt.figure(figsize=(8, 6))\nCandleGraph = fig.add_subplot(1, 1, 1)\nmpl.candlestick2_ohlc(CandleGraph,DataInformation_DailyPirce_NewPeriod['Open'],DataInformation_DailyPirce_NewPeriod['High'],DataInformation_DailyPirce_NewPeriod['Low'],DataInformation_DailyPirce_NewPeriod['Close'],width=.6,\n                              colorup='#ff1717',colordown='#53c156')\n\nfor i in MAList:\n    MAName = ''.join(['MA', str(i)])\n    CandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce_NewPeriod)),DataInformation_DailyPirce_NewPeriod[MAName],label = str(MAName),lw = 1.0)\n\nCandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce_NewPeriod)),DataInformation_DailyPirce_NewPeriod['1st Support Line'],label = '1st Support Line',lw = 1.0)\nCandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce_NewPeriod)),DataInformation_DailyPirce_NewPeriod['1st Resistance Line'],label = '1st Resistance Line',lw = 1.0)\nCandleGraph.legend(loc = 'best')\nCandleGraph.set_title('EW Stock Price')\nCandleGraph.set_xlabel('Date')\nCandleGraph.set_ylabel('Price')\nCandleGraph.set_xlim(0,len(DataInformation_DailyPirce_NewPeriod.index))\nCandleGraph.set_xticks(range(0,len(DataInformation_DailyPirce_NewPeriod.index),15))\nCandleGraph.set_xticklabels([DataInformation_DailyPirce_NewPeriod.index.strftime('%Y-%m-%d')[index] for index in CandleGraph.get_xticks()])\nfor label in CandleGraph.xaxis.get_ticklabels():\n    label.set_rotation(45)\n    label.set_fontsize(10)\nplt.show()\n","2385e46d":"fig = plt.figure(figsize=(8, 6))\nCandleGraph = fig.add_subplot(1, 1, 1)\nmpl.candlestick2_ohlc(CandleGraph,DataInformation_DailyPirce_NewPeriod['Open'],DataInformation_DailyPirce_NewPeriod['High'],DataInformation_DailyPirce_NewPeriod['Low'],DataInformation_DailyPirce_NewPeriod['Close'],width=.6,\n                              colorup='#ff1717',colordown='#53c156')\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce_NewPeriod)), DataInformation_DailyPirce_NewPeriod['MID'],\n                     label='BOLL MID', lw=1.0)\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce_NewPeriod)), DataInformation_DailyPirce_NewPeriod['UPPER'],\n                     label='BOLL UPPER', lw=1.0)\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce_NewPeriod)), DataInformation_DailyPirce_NewPeriod['LOWER'],\n                     label='BOLL LOWER', lw=1.0)\nCandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce_NewPeriod)),DataInformation_DailyPirce_NewPeriod['1st Support Line'],label = '1st Support Line',lw = 1.0)\nCandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce_NewPeriod)),DataInformation_DailyPirce_NewPeriod['1st Resistance Line'],label = '1st Resistance Line',lw = 1.0)\nCandleGraph.legend(loc = 'best')\nCandleGraph.set_title('EW Stock Price')\nCandleGraph.set_xlabel('Date')\nCandleGraph.set_ylabel('Price')\nCandleGraph.set_xlim(0,len(DataInformation_DailyPirce_NewPeriod.index))\nCandleGraph.set_xticks(range(0,len(DataInformation_DailyPirce_NewPeriod.index),20))\nCandleGraph.set_xticklabels([DataInformation_DailyPirce_NewPeriod.index.strftime('%Y-%m-%d')[index] for index in CandleGraph.get_xticks()])\nfor label in CandleGraph.xaxis.get_ticklabels():\n    label.set_rotation(45)\n    label.set_fontsize(10)\nplt.show()","2281d2fb":"fig = plt.figure(figsize=(8, 6))\nCandleGraph = fig.add_subplot(1, 1, 1)\nmpl.volume_overlay(CandleGraph, DataInformation_DailyPirce_NewPeriod['Open'], DataInformation_DailyPirce_NewPeriod['Close'],\n                       DataInformation_DailyPirce_NewPeriod['Volume'],width=0.65,colorup='red',colordown='green')\nCandleGraph.set_title('EW Stock Volume')\nCandleGraph.set_xlabel('Date')\nCandleGraph.set_ylabel('Volume')\nCandleGraph.set_xlim(0, len(DataInformation_DailyPirce_NewPeriod.index))\nCandleGraph.set_xticks(range(0, len(DataInformation_DailyPirce_NewPeriod.index), 20))\nCandleGraph.set_xticklabels(\n    [DataInformation_DailyPirce.index.strftime('%Y-%m-%d')[index] for index in CandleGraph.get_xticks()])\nfor label in CandleGraph.xaxis.get_ticklabels():\n    label.set_rotation(45)\n    label.set_fontsize(10)\nplt.show()\n","bb699926":"Margin_Of_Safety = TheFirstResistanceLine*0.75\nDataInformation_DailyPirce_NewPeriod['Margin of Safety'] = Margin_Of_Safety\n\n\nfig = plt.figure(figsize=(8, 6))\nCandleGraph = fig.add_subplot(1, 1, 1)\nmpl.candlestick2_ohlc(CandleGraph,DataInformation_DailyPirce_NewPeriod['Open'],DataInformation_DailyPirce_NewPeriod['High'],DataInformation_DailyPirce_NewPeriod['Low'],DataInformation_DailyPirce_NewPeriod['Close'],width=.6,\n                              colorup='#ff1717',colordown='#53c156')\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce_NewPeriod)), DataInformation_DailyPirce_NewPeriod['MID'],\n                     label='BOLL MID', lw=1.0)\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce_NewPeriod)), DataInformation_DailyPirce_NewPeriod['UPPER'],\n                     label='BOLL UPPER', lw=1.0)\nCandleGraph.plot(np.arange(0, len(DataInformation_DailyPirce_NewPeriod)), DataInformation_DailyPirce_NewPeriod['LOWER'],\n                     label='BOLL LOWER', lw=1.0)\n\nCandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce_NewPeriod)),DataInformation_DailyPirce_NewPeriod['1st Support Line'],label = '1st Support Line',lw = 1.0)\nCandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce_NewPeriod)),DataInformation_DailyPirce_NewPeriod['1st Resistance Line'],label = '1st Resistance Line',lw = 1.0)\nCandleGraph.plot(np.arange(0,len(DataInformation_DailyPirce_NewPeriod)),DataInformation_DailyPirce_NewPeriod['Margin of Safety'],label = 'Margin of Safety',lw = 1.0,ls='--')\nCandleGraph.legend(loc = 'best')\nCandleGraph.set_title('EW Stock Price')\nCandleGraph.set_xlabel('Date')\nCandleGraph.set_ylabel('Price')\nCandleGraph.set_xlim(0,len(DataInformation_DailyPirce_NewPeriod.index))\nCandleGraph.set_xticks(range(0,len(DataInformation_DailyPirce_NewPeriod.index),20))\nCandleGraph.set_xticklabels([DataInformation_DailyPirce_NewPeriod.index.strftime('%Y-%m-%d')[index] for index in CandleGraph.get_xticks()])\nfor label in CandleGraph.xaxis.get_ticklabels():\n    label.set_rotation(45)\n    label.set_fontsize(10)\nplt.show()\nprint('I prefer to say that the best target buy price is the resistance price at $%.2f'%TheFirstResistanceLine,'. Once its stock price breaks up te resistance price for several days, \\\n      \\nit is suitable to buy EW stock.')\nprint('The margin of safety is $%.2f'%Margin_Of_Safety,'.')\n","32e724ac":"## Read the Data from file and amend these data format.","0b07ea49":"##  Additional Calculation : Debt to Equity Ratio , Interest Coverage Ratio","727201d0":"## Key Price Multiples : Price to Equity Growth (Forward)","d39aa82b":"## Linear Regression\n","538338bb":"## Student Name: Sun Haoyu\n## Student Number : 19456697","44bf6d2f":"##  Additional Calculation : Determine Current Target Buy Price , Margin of Safety (25% off the target buy price)","a076770e":"## Additional Calculation :EPS CAGR \uff0c EPS","ab216197":"## Detect the qualified companies","8c724901":"## Plot the Linear Regression ","a68754ff":"# Dowanload the data from SimFin API , And the DownloadData function set up its path.\n\n\n","484ba5fe":"**Because the stock prices downloaded from SimFin are lag behind, So I decide to download the data from  Yahoo!Finance**","be9b91b8":"## Key Price Multiples : Total Equity , Total Current Assets , Total Current Liabilities , Total Liabilities , Total Assets , NAV , Working Capital , Book Value , Current Ratio","88be7b4d":"## As we can see from the candlestick , recently the tendency of stock price is decreasing due to which the investors expected that EW's performance in 2019 was not quite good and they kept passive attitude towards its future. And that is the reason why when EW announced its annual report on 30th,Jan,2020, its stock price fluctuated dramatically at the next business day. Therefore , it is not a good time to buy this company stock right now. ","0fa58787":"## Additional Calculation : Estimate EPS 10 years from now by Time Series Analysis","efa84964":"##  Additional Calculation : Estimate EPS 10 years from now by Linear Regression","b3bb22c3":"#  Use SimFin-Data.xlsx"}}