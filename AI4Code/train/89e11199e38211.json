{"cell_type":{"51ca58ac":"code","e2216bf0":"code","ff2eee85":"code","73dee148":"code","4b93ed7d":"code","6ee8a528":"code","0c8cd437":"code","9f4d0162":"code","64187063":"markdown","764bb285":"markdown","1c035abd":"markdown","5cd72de4":"markdown","0b243027":"markdown","57e9fb96":"markdown","12e614a4":"markdown","6507aafd":"markdown","b0f062a6":"markdown","0bc26692":"markdown","a88ca7e3":"markdown"},"source":{"51ca58ac":"import functools\nimport glob\nimport itertools\nimport numpy as np\nimport pandas as pd\n\n!wget http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/LKH-3.0.7.tgz &>\/dev\/null\n!tar xvfz LKH-3.0.7.tgz &>\/dev\/null\n!cd LKH-3.0.7; make &>\/dev\/null; cp LKH ..","e2216bf0":"SIZE = 5280 # total number of permutations\nDW = 10**5 # additional weight, 3d_max - 4d_min + epsilon \nINF = 10**9 - 1 # infinite edge weight\nTIME_LIMIT = 3600 * 8 # time limit for LKH run, seconds\nSEED = 2428 # LKH seed value\n\ndef perm_dist(p, q):\n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7\n\ndef distances_matrix():\n    all_perms = list(itertools.permutations(range(7), 7))\n    mandatory_perms = all_perms[:120]\n    nodes = mandatory_perms * 2 + all_perms\n    m = np.zeros((SIZE, SIZE), dtype='int32')\n    for i, p in enumerate(nodes):\n        for j, q in enumerate(nodes):\n            m[i, j] = perm_dist(p, q)\n    m *= 10\n    m[np.where(m > 0)] += DW\n    m[np.where(m == 0)] = INF # treat equal perms in different mandatory sets\n    np.fill_diagonal(m, 0) # restore zero weights at the main diagonal\n    return m\n\ndef write_params_file(initial_tour=None):\n    with open('santa.par', 'w') as f:\n        printf = functools.partial(print, file=f)\n        printf('SPECIAL')\n        printf('PROBLEM_FILE = santa.ctsp')\n        printf('INITIAL_TOUR_ALGORITHM = CTSP')\n        printf('TOUR_FILE = best_tour_$.txt') # $ will be replaced with the tour cost\n        printf('OUTPUT_TOUR_FILE = output_tour_$.txt') # save each improvement\n        if initial_tour:\n            printf('INITIAL_TOUR_FILE = initial_tour.txt')\n        printf(f'MAX_CANDIDATES = 5281')\n        printf(f'SEED = {SEED}')\n        printf('MAX_TRIALS = 100000')\n        printf(f'TIME_LIMIT = {TIME_LIMIT}') # seconds\n        printf('TRACE_LEVEL = 2')\n        printf('PRECISION = 1')\n\ndef write_problem_file():\n    with open('santa.ctsp', 'w', buffering=-1) as f:\n        printf = functools.partial(print, file=f)\n        printf('TYPE: CTSP')\n        printf(f'DIMENSION: {SIZE * 2 + 1}')\n        printf('SALESMEN : 3')\n        printf('EDGE_WEIGHT_TYPE: EXPLICIT')\n        printf('EDGE_WEIGHT_FORMAT: FULL_MATRIX')\n        printf('EDGE_WEIGHT_SECTION')\n        # write distances matrix\n        inf_row = ' '.join(itertools.repeat(str(INF), SIZE))\n        distances = distances_matrix()\n        # top half of the distances matrix\n        for weights in distances.T: # iterate over columns\n            # infinite weights, weights column, distance to depot\n            printf(inf_row, ' '.join(map(str, weights)), 35)\n        # bottom half of the distances matrix\n        for weights in distances: # iterate over rows\n            # weights row, infinite weights, distance to depot\n            printf(' '.join(map(str, weights)), inf_row, 35)\n        printf(' '.join(itertools.repeat('35', SIZE * 2)), INF) # distances from the depot\n        # write \"private city sets\"\n        printf('CTSP_SET_SECTION')\n        for i in range(3):\n            printf(i + 1, end=' ') # set index \n            for j in range(1, 121):\n                printf(i * 120 + j, end=' ') # real node of mandatory permutations\n                printf(i * 120 + j + SIZE, end=' ') # complementary virtual node\n            printf(-1)\n        printf('DEPOT_SECTION')\n        printf(2 * SIZE + 1)\n        printf(-1)\n        printf('EOF')\n\ndef write_initial_tour_file(initial_tour=None):\n    if initial_tour:\n        with open('initial_tour.txt', 'w') as f:\n            print('TOUR_SECTION', file=f)\n            print(' '.join(str(_) for _ in initial_tour), -1, file=f)\n    \ndef solve_ctsp(initial_tour=None, verbose=False):\n    write_params_file(initial_tour)\n    write_problem_file()\n    write_initial_tour_file(initial_tour)\n    \n    # run LKH-3 to solve CTSP instance\n    if verbose:\n        !.\/LKH santa.par\n    else:\n        !touch lkh.log\n        !.\/LKH santa.par >> lkh.log","ff2eee85":"LETTERS = {\n    1: '\ud83c\udf85',  # father christmas\n    2: '\ud83e\udd36',  # mother christmas\n    3: '\ud83e\udd8c',  # reindeer\n    4: '\ud83e\udddd',  # elf\n    5: '\ud83c\udf84',  # christmas tree\n    6: '\ud83c\udf81',  # gift\n    7: '\ud83c\udf80',  # ribbon\n    8: '\ud83c\udf1f',  # star\n}\nINV_LETTERS = {v: k for k, v in LETTERS.items()}\n\nsolution = pd.read_csv('..\/input\/permutations-rebalancing\/submission_no_wildcards_2497_2492_2491.csv')\nstrings = [[INV_LETTERS[c] for c in s] for s in solution.schedule]\nstrings.sort(key=len, reverse=True)\nprint(f'Strings lengths are {[len(_) for _ in strings]}.')\n\ndef find_strings_perms(strings, verbose=False):\n    all_perms = set(itertools.permutations(range(1, 8), 7))\n    perms = []\n    for s in strings:\n        perms.append([])\n        for i in range(len(s)-6):\n            p = tuple(s[i:i+7])\n            if p in all_perms:\n                perms[-1].append(p)\n    if verbose:\n        lens = [len(_) for _ in  perms]\n        print(f'There are {lens} permutations in strings, {sum(lens)} in total.')\n        lens = [len(set(_)) for _ in  perms]\n        print(f'There are {lens} unique permutations in strings, {sum(lens)} in total.')\n    return perms\n\ndef rebalance_perms(strings_perms, verbose=False):\n    # convert to dicts for fast lookup and to keep permutations order\n    strings_perms = [dict.fromkeys(_) for _ in strings_perms] \n    for p in strings_perms[0].copy():  # iterate over the copy to allow modification during iteration\n        if p[:2] != (1, 2) and (p in strings_perms[1] or p in strings_perms[2]):\n            strings_perms[0].pop(p)\n    for p in strings_perms[1].copy():\n        if p[:2] != (1, 2) and p in strings_perms[2]:\n            strings_perms[1].pop(p)\n    if verbose:\n        lens = [len(_) for _ in  strings_perms]\n        print(f'There are {lens} permutations left in strings after rebalancing, {sum(lens)} in total.')\n    return [list(_) for _ in strings_perms]\n\nstrings_perms = find_strings_perms(strings, verbose=True)\nstrings_perms = rebalance_perms(strings_perms, verbose=True)","73dee148":"def ctsp_initial_tour(strings_perms):\n    index = {p: i for (i, p) in enumerate(itertools.permutations(range(1, 8), 7), 1)}\n    initial_tour = []\n    for i, perms in enumerate(strings_perms):\n        initial_tour.append(SIZE*2 + i + 1) # depot node for each string\n        for p in perms:\n            if p[:2] == (1, 2):\n                initial_tour.append(i*120 + index[p])\n            else:\n                initial_tour.append(240 + index[p])\n            initial_tour.append(initial_tour[-1] + SIZE) # a complementary virtual node\n    return initial_tour\n\n\ninitial_tour = ctsp_initial_tour(strings_perms)","4b93ed7d":"solve_ctsp(initial_tour)","6ee8a528":"def read_strings(file_name):\n    all_perms = list(itertools.permutations(range(1, 8), 7))\n    mandatory_perms = all_perms[:120]\n    nodes = mandatory_perms * 2 + all_perms\n    \n    with open(file_name, 'r') as f:\n        lines = [l.strip() for l in f.readlines()]\n    lines = lines[lines.index(f'{SIZE*2 + 1}'):-2]\n    tour = [int(_) - 1 for _ in lines]\n    i0, i1, i2 = sorted(tour.index(i) for i in range(SIZE*2, SIZE*2 + 3)) # depots\n    strings = [tour[i0+1:i1], tour[i1+1:i2], tour[i2+1:]]\n    for s in strings:\n        s[:] = [nodes[_] for _ in s if _ < SIZE] # leave only real nodes\n        s_forward, s_backward = [], []\n        for directed_s in (s_forward, s_backward):\n            directed_s.extend(s[0])\n            for p, q in zip(s, s[1:]):\n                d = perm_dist(p, q)\n                directed_s.extend(q[-d:])\n            s[:] = s[::-1]\n        s[:] = min(s_forward, s_backward, key=len)\n    return strings\n\ndef check_solution(strings):\n    all_perms = set(itertools.permutations(range(1, 8), 7))\n    mandatory_perms = {p for p in all_perms if p[:2] == (1, 2)}\n    strings_perms = [set(_) for _ in find_strings_perms(strings)]\n    for s in strings_perms:\n        if mandatory_perms - s:\n            print(mandatory_perms - s)\n            return False\n    if all_perms - set.union(*strings_perms):\n        return False\n    return True\n\ndef contain_wildcards(strings):\n    for s in strings:\n        if 8 in s:\n            return True\n    return False\n\ndef write_submission_csv(strings):\n    sub = pd.DataFrame()\n    sub['schedule'] = [''.join(LETTERS[x] for x in s) for s in strings]\n    if contain_wildcards(strings):\n        sub_name = f'submission_wildcards_{\"_\".join(str(len(_)) for _ in strings)}.csv'\n    else:\n        sub_name = f'submission_no_wildcards_{\"_\".join(str(len(_)) for _ in strings)}.csv'\n    sub.to_csv(sub_name, index=False)\n    return sub_name\n\ntour_files = glob.glob('output_tour_*.txt') + glob.glob('best_tour_*.txt')\nprint(\"=\" * 70)\nfor f in tour_files:\n    strings = read_strings(f)\n    strings.sort(key=len, reverse=True)\n    print(f'File {f}, strings lenghts are {[len(s) for s in strings]}.')    \n    if check_solution(strings):\n        print(f'The solution is written to {write_submission_csv(strings)}')\n    else:\n        print('The solution is invalid.')\n    print(\"=\" * 70)\n","0c8cd437":"import itertools\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn.functional as F\n\n\nperms = list(map(lambda p: \"\".join(p), itertools.permutations(\"1234567\")))\nperm2id = {p: i for i, p in enumerate(perms)}\nperms_arr = np.array([list(map(int, p)) for p in perms])\n\nperms_onehot = np.eye(7)[perms_arr-1, :].transpose(0, 2, 1)\nassert np.allclose(perms_onehot[:,0,:].astype(np.int64), (perms_arr == 1).astype(np.int64))\n\n# print(\"onehot 1234567:\")\n# print(perms_onehot[perm2id[\"1234567\"]])\n\n# print(\"onehot 5671234:\")\n# print(perms_onehot[perm2id[\"5671234\"]])\n\n# print(\"correlate between 1234567 and 5671234\")\nleft = perms_onehot[perm2id[\"1234567\"]]\nright = perms_onehot[perm2id[\"5671234\"]]\nmatches = F.conv2d(\n    F.pad(torch.Tensor(left[None, None, :, :]), (7, 7)),\n    torch.Tensor(right[None, None, :, :]),\n    padding=\"valid\"\n).numpy().reshape(-1)\n# print(matches)\nmust_match_left2right = np.array([-1, -1, -1, -1, -1, -1, -1, 7, 6, 5, 4, 3, 2, 1, 0])\nmust_match_right2left = np.array([0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1])\ncost_ifmatch = np.array([7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7])\n# print(\"cost of 1234567 -> 5671234:\", min(cost_ifmatch[np.equal(must_match_left2right, matches)]))\n# print(\"cost of 5671234 -> 1234567:\", min(cost_ifmatch[np.equal(must_match_right2left, matches)]))\n\nM = F.conv2d(\n    F.pad(torch.Tensor(perms_onehot[:, None, :, :]), (7, 7)),\n    torch.Tensor(perms_onehot[:, None, :, :]),\n    padding=\"valid\"\n).squeeze().numpy()\n\nmust_match_left2right = np.array([-1, -1, -1, -1, -1, -1, -1, 7, 6, 5, 4, 3, 2, 1, 0])\nmust_match_left2right_wild = np.array([-1, -1, -1, -1, -1, -1, -1, 6, 5, 4, 3, 2, 1, 0, 0])\n\ncost_ifmatch = np.array([7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7])\n\ncostMat = np.where(M == must_match_left2right, cost_ifmatch, np.inf).min(axis=-1).astype(np.int8)\ncostMatWild = np.minimum(costMat, np.where(M == must_match_left2right_wild, cost_ifmatch, np.inf).min(axis=-1)).astype(np.int8)\n\ndef optimize_wildcards(words):\n    found_perms = find_strings_perms(words)\n    balanced_perms = rebalance_perms(found_perms)\n    balanced_perms = [[''.join(str(_) for _ in perm) for perm in perms] for perms in balanced_perms]\n    nodes_list = []\n    table_list = []\n    for i in range(3):\n        word = words[i]\n        nodes = [perm2id[p] for p in balanced_perms[i]]\n\n        table = np.zeros((len(nodes), 10), np.int64)\n        table[0, :] = 7\n        for i in range(1, len(nodes)):\n            e = costMat[nodes[i-1], nodes[i]]\n            ew = costMatWild[nodes[i-1], nodes[i]]\n            table[i,0] = table[i-1,0] + e\n            table[i,1] = min(table[i-1,1] + e, table[i-1,0] + ew)\n            table[i,2] = min(table[i-1,2], table[i-1,1]) + e # TODO: better transition\n            table[i,3] = min(table[i-1,3], table[i-1,2]) + e\n            table[i,4] = min(table[i-1,4], table[i-1,3]) + e\n            table[i,5] = min(table[i-1,5], table[i-1,4]) + e\n            table[i,6] = min(table[i-1,6], table[i-1,5]) + e\n            table[i,7] = min(table[i-1,7], table[i-1,6]) + e\n            table[i,8] = min(table[i-1,8], table[i-1,7]) + e\n            table[i,9] = min(table[i-1,9] + e, table[i-1,8] + ew)\n#         print(table[-1].min(), table[-1])\n        nodes_list.append(nodes)\n        table_list.append(table)\n\n    # backtrack\n    new_words = []\n    wilds = []\n    for nodes, table in zip(nodes_list, table_list):\n        ns = [perms[nodes[-1]]]\n        track = np.argmin(table[-1])\n        wild = []\n        for i in range(len(nodes)-2, -1, -1):\n            e = costMat[nodes[i], nodes[i+1]]\n            ew = costMatWild[nodes[i], nodes[i+1]]\n            if track == 0:\n                ns.append(perms[nodes[i]][:e])\n            elif track == 1:\n                if table[i, 1] + e < table[i, 0] + ew:\n                    ns.append(perms[nodes[i]][:e])\n                else:\n                    left = np.array(list(map(int, perms[nodes[i]][ew:])))\n                    right = np.array(list(map(int, perms[nodes[i+1]][:-ew])))\n                    mis = np.where(left != right)[0][0]\n                    wild.append(table[i, track-1]-7+ew+mis)\n                    ns.append(perms[nodes[i]][:ew])\n                    track = track - 1\n            elif 2 <= track <= 8:\n                if table[i, track] >= table[i, track-1]:\n                    track = track - 1\n                ns.append(perms[nodes[i]][:e])\n            elif track == 9:\n                if table[i, 9] + e < table[i, 8] + ew:\n                    ns.append(perms[nodes[i]][:e])\n                else:\n                    ns.append(perms[nodes[i]][:ew])\n                    left = np.array(list(map(int, perms[nodes[i]][ew:])))\n                    right = np.array(list(map(int, perms[nodes[i+1]][:-ew])))\n                    mis = np.where(left != right)[0][0]\n                    wild.append(table[i, track-1]-7+ew+mis)\n                    track = track - 1\n            else:\n                assert False\n        assert track == 0\n        wilds.append(wild)\n        nsw = list(\"\".join(ns[::-1]))\n        for w in wild:\n            nsw[w] = \"8\"\n        new_words.append(\"\".join(nsw))\n    return new_words","9f4d0162":"tour_files = glob.glob('submission_no_wildcards_*.csv')\nprint(\"=\" * 71)\nfor f in tour_files:\n    schedule = pd.read_csv(f).schedule.tolist()\n    strings = [[INV_LETTERS[c] for c in s] for s in schedule]\n    strings.sort(key=len, reverse=True)\n    new_strings = optimize_wildcards(strings)\n    new_strings = [[int(c) for c in s] for s in new_strings]\n    new_strings.sort(key=len, reverse=True)\n    print(f'File {f}.')\n    print(f'Improved strings lengths from {[len(s) for s in strings]} to {[len(s) for s in new_strings]}.')\n    print(f'The solution is written to {write_submission_csv(new_strings)}')\n    print(\"=\" * 71)","64187063":"That's it, thank you for reading, please upvote if you find it useful.","764bb285":"Write all files and feed it to LKH.","1c035abd":"We'll provide LKH an initial tour to start optimization from. As the initial tour we'll use the one, found by [my previous notebook](https:\/\/www.kaggle.com\/kostyaatarik\/permutations-rebalancing).","5cd72de4":"# 3. Dealing with an Asymmetric CTSP\n\nNow after finding out the input and output CTSP formats for LKH we can write CTSP instance file and initial tour file for our problem and feed it to the LKH, but all we'll get is garbage because LKH expects CTSP to be symmetric, whereas our problem is asymmetric because the distance between permutations is not symmetric, i.e. there are such permutations \\\\(p\\\\) and \\\\(q\\\\) that \\\\(d(p,q) \\ne d(q, p)\\\\), where \\\\(d(p, q)\\\\) is the distance between \\\\(p\\\\) and \\\\(q\\\\).\n\nTo deal with this problem we will use the approach from the [paper](http:\/\/home.eng.iastate.edu\/~rkumar\/PUBS\/atsp.pdf) to convert an asymmetric TSP (ATSP) to a symmetric one (STSP) by doubling its size. Below is a short description of such conversion.\n\nLet \\\\(D_{n \\times n}\\\\) be an asymmetric distance matrix for a TSP of size n. Then authors define\n\\\\[d_{\\max }:=\\max _{i \\neq j} d_{i j} ; \\quad d_{\\min }:=\\min _{i \\neq j} d_{i j}\\\\]\n\nAuthors define the distance matrix \\\\(D^{\\prime}=\\left[d_{i j}^{\\prime}\\right]_{n \\times n}\\\\) as follows:\n\\\\[\\forall i, j: d_{i j}^{\\prime}:= \\begin{cases}0 & \\text { if } i=j \\\\ d_{i j} & \\text { if }\\left[4 d_{\\min }-3 d_{\\max }\\right]>0, i \\neq j \\\\ d_{i j}+\\left[3 d_{\\max }-4 d_{\\min }+\\epsilon\\right] & \\text { otherwise }\\end{cases}\\\\]\n\nUsing the asymmetric distance matrix \\\\(D^{\\prime}\\\\) authors define a symmetric distance matrix \\\\(\\bar{D}=\\left[\\bar{d}_{i j}\\right]_{2 n \\times 2 n}\\\\) which is a desired symmetric distance matrix:\n\\\\[\\bar{D}:=\\left[\\begin{array}{c|c}\n\\infty & \\left(D^{\\prime}\\right)^{\\top} \\\\\n\\hline D^{\\prime} & \\infty\n\\end{array}\\right]\\\\]\n\nFor notational simplicity, given \\\\(i \\leq n\\\\), authors use \\\\(\\left[i\\right]\\\\) to denote \\\\(i + n\\\\). Thus \\\\(\\left[1\\right] = 1 + n, \\left[n\\right] = 2n\\\\), etc. Authors call \\\\(i\\\\) and \\\\(\\left[i\\right]\\\\) to be a complementary pair of nodes. Furthermore, for each \\\\(i \\leq n\\\\), the node \\\\(i\\\\) is called a real node, whereas the node \\\\(\\left[i\\right]\\\\) is called a virtual node. Authors note that for each \\\\(i, j,\\\\)\n\\\\[\\bar{d}_{i j}=\\bar{d}_{[i][j]}=\\infty ; \\quad \\bar{d}_{[i] j}=\\bar{d}_{j[i]}=d_{i j}^{\\prime} ; \\quad \\bar{d}_{[i] i}=\\bar{d}_{i[i]}=d_{i i}^{\\prime}=0\\\\]\n\nIn other words, the distance between a pair of real or virtual nodes is infinity, whereas the distance between a real\nand virtual node is finite and symmetric, and the distance between a complementary pair of nodes is zero.\n\nThis way the tour \\\\[T=i_{1} \\rightarrow i_{2} \\rightarrow \\ldots \\rightarrow i_{n}\\\\] in initial asymmetric settings translates to the tour\n\\\\[\\bar{T}=i_{1} \\rightarrow\\left[i_{1}\\right] \\rightarrow i_{2} \\rightarrow\\left[i_{2}\\right] \\rightarrow \\ldots \\rightarrow i_{n} \\rightarrow\\left[i_{n}\\right]\\\\] in the defined symmetric settings. And the authors show that the optimal tour in the difined symmetric settings corresponds to the optimal tour in the initial asymmetric settings.","0b243027":"# What is a Colored Traveling Salesman Problem?\n\nColored Traveling Salesman Problem (CTSP) is the special case of Multiple Traveling Salesman Problem (MTSP) which in turn is an extension of the Travelling Salesman Problem (TSP).\n\nMTSP involves assigning m salesmen to n cities, and each city must be visited by a salesman while requiring a minimum total cost. ([citation](https:\/\/www.tandfonline.com\/doi\/full\/10.1080\/21642583.2019.1674220#:~:text=MTSP%20involves%20assigning%20m%20salesmen%20to%20n%20cities%2C%20and%20each%20city%20must%20be%20visited%20by%20a%20salesman%20while%20requiring%20a%20minimum%20total%20cost.))\n\nHowever, MTSP is applicable to only the cases in which multiple executing individuals (traveling salesman) share the common workspace (city set). It cannot be used to handle many multi-machine engineering systems where multiple machines' workspaces are not the same and partially overlap with each other. [This paper](https:\/\/doi.org\/10.3182\/20140824-6-ZA-1003.01403) proposed and formulated a new MTSP called colored traveling salesman problem (CTSP). Each of its salesmen is assigned a private city set and all salesmen share a public city set. Every set of cities is colored differently. ([citation](https:\/\/www.sciencedirect.com\/science\/article\/pii\/S1474667016431289?via%3Dihub#:~:text=However%2C%20it%20is,is%20colored%20differently.))\n\nCTSP looks like a good match for our problem where three sets of permutations beginning with \ud83c\udf85\ud83e\udd36 that must be found in each string will be our \"private city sets\" and all the other permutations will represent a \"public city set\". The use of wildcards is still not easily translated to these settings.\n\nLuckily our old friend the [LKH-3](http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/) supports CSTP instances. All we need to do is to solve three problems:\n1. figure out the LKH input format for CTSP instances;\n2. understand the LKH output tour format for CTSP instances;\n3. make LKH work with asymmetric CTSP instances.\n\nLet's do it step by step.","57e9fb96":"Since CTSP objective is to minimize total cost of the route, i.e. the sum of the lenghts of the solution strings, it can tend to output tours with strings' lengths being like \\\\([2400, 2400, 2700]\\\\) which is not great for our problem. So instead of examining only the best CTSP solution found by LKH we'll check all the improved tours found by LKH along the optimization.","12e614a4":"# 1. CTSP Input Format\n\nAt the [LKH-3](http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/) page we can download CTSP instances by clicking [CTSP](http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/BENCHMARKS\/CTSP.tgz) link. Let's have a look at the CTSP instance `\/CTSP\/INSTANCES\/Eil\/eil21-3.ctsp`:\n\n```\nNAME : eil21-3\nCOMMENT : 21-city problem (Christofides\/Eilon)\nTYPE : CTSP\nDIMENSION : 21\nSALESMEN : 3\nEDGE_WEIGHT_TYPE : EUC_2D\nNODE_COORD_SECTION\n1 42 41\n  *** 19 lines with nodes' coordinates are omitted ***\n21 38 35\nCTSP_SET_SECTION\n1 2 3 4 5 -1\n2 6 7 8 9 -1\n3 10 11 12 13 -1\nDEPOT_SECTION\n1\n-1\nEOF\n```\n\nAs we can see the CTSP input format is pretty straightforward, all we need to do compared to the ATSP input format is to:\n* change problem type: `TYPE : CTSP` instead of `TYPE : ATSP`;\n* specify the number of salesmen: `SALESMEN : 3`;\n* provide \"private city sets\" under the `CTSP_SET_SECTION` keyword, each set starts with its index \\\\((1, 2, 3)\\\\) followed by nodes' IDs in this set and ends with -\\\\(1\\\\);\n* specify the node all salesmen will start their routes from under the `DEPOT_SECTION` keyword.","6507aafd":"# The Merry Movie Montage as Colored Traveling Salesman Problem\n\nThis notebook is an attempt to adopt the special type of the traveling salesman problem called colored traveling salesman problem for this competition.","b0f062a6":"# 2. CTSP Output Tour Format\n\nEach CTSP instance downloaded above has corresponding output tour found by LKH. So let's examine the output tour `\/CTSP\/TOURS\/Eil\/eil21-3.157477.tour` corresponding to the CTSP instance we looked at above:\n```\nNAME : eil21-3.157477.tour\nCOMMENT : Length = 157477\nCOMMENT : Found by LKH [Keld Helsgaun] Thu Nov  8 14:34:19 2018\nTYPE : TOUR\nDIMENSION : 23\nTOUR_SECTION\n1 <--- original depot\n13\n11\n12\n10\n23 <--- not present in the problem, additional depot \n19\n20\n8\n6\n9\n7\n15\n18\n22 <--- not present in the problem, additional depot\n14\n3\n4\n5\n2\n17\n16\n21\n-1\nEOF\n```\n\nThere is only one tour, not three separate ones for each salesman as one could expect. But the dimension of the tour \\\\((23)\\\\) is not the same as of the problem \\\\((21)\\\\), there are two nodes that are not present in the problem, the first salesman starts his route from the depot node and each additional salesman starts his route from an additional node. So if the problem has \\\\(n\\\\) nodes and \\\\(m\\\\) salesmen the output tour will have \\\\(n+m-1\\\\) nodes with additional depot nodes numbered \\\\(n+1, n+2, \\ldots, n+m-1\\\\). ","0bc26692":"# Wildcards Optimization\n\nWe'll use the code from the [notebook](https:\/\/www.kaggle.com\/yosshi999\/wildcard-postprocessing-using-dynamic-programming) created by [Yosshi999](https:\/\/www.kaggle.com\/yosshi999) to improve found solutions with wildcards.","a88ca7e3":"# The Merry Movie Montage as CTSP\n\nAll is left for us to do is to implement the above ideas in code.\n\nWe have \\\\(5280\\\\) real nodes and \\\\(5280\\\\) virtual nodes, first \\\\(360\\\\) nodes will represent three sets of our mandatory permutations (private city sets), the depot node will be the last with the ID equal to \\\\(2 \\cdot 5280 + 1 = 10561\\\\).\n\nIn our case \\\\(d_{\\max } = 7\\\\) and \\\\(d_{\\min } = 1\\\\).\n\n\\\\(3 d_{\\max }-4 d_{\\min } = 21 - 4 = 17\\\\). To keep distances integer we'll use \\\\(\\epsilon = 1\\\\), so we need to add \\\\(18\\\\) to each non-zero distance in our distance matrix.\n\nBut we'll use a slightly different approach. Below we scale weights by the factor of 10, set distances from\/to the depot to 35 and set DW to 10**5. This way the last 5 digits of LKH score is the sum of resulting strings' lengths times 10."}}