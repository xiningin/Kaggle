{"cell_type":{"04ee6fa4":"code","a4e0cc52":"code","2c047817":"code","e94624ac":"code","dbab9c5c":"code","16627c9a":"code","8e61c525":"code","170ecd0d":"code","77675304":"code","f42885d8":"code","c5d848f1":"code","9fc11033":"code","a17e2b8a":"code","6086c05c":"code","5376c122":"code","60c2ecfb":"code","22c6e72e":"code","135dd6b0":"code","31776921":"code","f9523670":"code","7dbf0cba":"code","46a00a2a":"code","372097f1":"code","c31e8133":"code","0a50f2ef":"code","b6df0065":"code","22095f7a":"markdown","dfe684bd":"markdown","4fbe3e00":"markdown","be387663":"markdown","be755682":"markdown","ba064fb0":"markdown","dc95b972":"markdown","410da8c6":"markdown","43b327d1":"markdown","dc2c9854":"markdown"},"source":{"04ee6fa4":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\n# Create a list with the filepaths for training and testing\ntrain_dir = Path('..\/input\/fruit-and-vegetable-image-recognition\/train')\ntrain_filepaths = list(train_dir.glob(r'**\/*.jpg'))\n\ntest_dir = Path('..\/input\/fruit-and-vegetable-image-recognition\/test')\ntest_filepaths = list(test_dir.glob(r'**\/*.jpg'))\n\nval_dir = Path('..\/input\/fruit-and-vegetable-image-recognition\/validation')\nval_filepaths = list(test_dir.glob(r'**\/*.jpg'))\n\ndef proc_img(filepath):\n    \"\"\" Create a DataFrame with the filepath and the labels of the pictures\n    \"\"\"\n\n    labels = [str(filepath[i]).split(\"\/\")[-2] \\\n              for i in range(len(filepath))]\n\n    filepath = pd.Series(filepath, name='Filepath').astype(str)\n    labels = pd.Series(labels, name='Label')\n\n    # Concatenate filepaths and labels\n    df = pd.concat([filepath, labels], axis=1)\n\n    # Shuffle the DataFrame and reset index\n    df = df.sample(frac=1).reset_index(drop = True)\n    \n    return df\n\ntrain_df = proc_img(train_filepaths)\ntest_df = proc_img(test_filepaths)\nval_df = proc_img(val_filepaths)","a4e0cc52":"print('-- Training set --\\n')\nprint(f'Number of pictures: {train_df.shape[0]}\\n')\nprint(f'Number of different labels: {len(train_df.Label.unique())}\\n')\nprint(f'Labels: {train_df.Label.unique()}')","2c047817":"# The DataFrame with the filepaths in one column and the labels in the other one\ntrain_df.head(5)","e94624ac":"# Create a DataFrame with one Label of each category\ndf_unique = train_df.copy().drop_duplicates(subset=[\"Label\"]).reset_index()\n\n# Display some pictures of the dataset\nfig, axes = plt.subplots(nrows=6, ncols=6, figsize=(8, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(df_unique.Filepath[i]))\n    ax.set_title(df_unique.Label[i], fontsize = 12)\nplt.tight_layout(pad=0.5)\nplt.show()","dbab9c5c":"import cv2\nimport skimage.color as color\nimport skimage.io as io\nfrom skimage.color import rgb2gray","16627c9a":"# Create a DataFrame with one Label of each category\ndf_unique = train_df.copy().drop_duplicates(subset=[\"Label\"]).reset_index()\n\n# Display some pictures of the dataset\nfig, axes = plt.subplots(nrows=6, ncols=6, figsize=(8, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    image = plt.imread(df_unique.Filepath[i])\n    grayImage = color.rgb2gray(image)\n    ax.imshow(grayImage, cmap=plt.get_cmap('gray'), vmin=0, vmax=1)\n    ax.set_title(df_unique.Label[i], fontsize = 12)\nplt.tight_layout(pad=0.5)\nplt.show()\n","8e61c525":"\ndf_unique = train_df.copy().drop_duplicates(subset=[\"Label\"]).reset_index()\n\n# Display some pictures of the dataset\nfig, axes = plt.subplots(nrows=6, ncols=6, figsize=(8, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    image = plt.imread(df_unique.Filepath[i])\n    grayImage = color.rgb2gray(image)\n#     sobel_x[i] = np.array(cv2.Sobel(image,cv2.CV_8U,1,0).flatten())\n    sobel_x = cv2.Sobel(grayImage,cv2.CV_8U,1,0)\n    ax.imshow(sobel_x, cmap=plt.get_cmap('gray'), vmin=0, vmax=1)\n    ax.set_title(df_unique.Label[i], fontsize = 12)\nplt.tight_layout(pad=0.5)\nplt.show()","170ecd0d":"fig, axes = plt.subplots(nrows=6, ncols=6, figsize=(8, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    image = plt.imread(df_unique.Filepath[i])\n    grayImage = color.rgb2gray(image)\n#     sobel_y[i] = np.array(cv2.Sobel(image,cv2.CV_8U,0,1).flatten())\n    \n    sobel_y = cv2.Sobel(grayImage,cv2.CV_8U,0,1)\n    ax.imshow(sobel_y, cmap=plt.get_cmap('gray'), vmin=0, vmax=1)\n    ax.set_title(df_unique.Label[i], fontsize = 12)\nplt.tight_layout(pad=0.5)\nplt.show()","77675304":"fig, axes = plt.subplots(nrows=6, ncols=6, figsize=(8, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nkernel_x = np.array([[1,1,1],[0,0,0],[-1,-1,-1]])\nfor i, ax in enumerate(axes.flat):\n    image = plt.imread(df_unique.Filepath[i])\n    grayImage = color.rgb2gray(image)\n    prewitt_x = cv2.filter2D(grayImage,-1,kernel_x)\n    ax.imshow(prewitt_x, cmap=plt.get_cmap('gray'), vmin=0, vmax=1)\n    ax.set_title(df_unique.Label[i], fontsize = 12)\nplt.tight_layout(pad=0.5)\nplt.show()","f42885d8":"fig, axes = plt.subplots(nrows=6, ncols=6, figsize=(8, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nkernel_y = np.array([[-1,0,1],[-1,0,1],[-1,0,1]])\nfor i, ax in enumerate(axes.flat):\n    image = plt.imread(df_unique.Filepath[i])\n    grayImage = color.rgb2gray(image)\n    prewitt_y = cv2.filter2D(grayImage,-1,kernel_y)\n    ax.imshow(prewitt_y, cmap=plt.get_cmap('gray'), vmin=0, vmax=1)\n    ax.set_title(df_unique.Label[i], fontsize = 12)\nplt.tight_layout(pad=0.5)\nplt.show()","c5d848f1":"## histogram\nhistograms = []\nimages = []\nprocessed = 0\nfor folder in os.listdir('..\/input\/fruit-and-vegetable-image-recognition\/train'):\n    newdir = '..\/input\/fruit-and-vegetable-image-recognition\/train\/'+folder+'\/'\n    for image in os.listdir(newdir):\n        img = cv2.imread(newdir+image)\n        images.append(img)\n#         gray = cv2.cvtColor(np.float32(img), cv2.COLOR_RGB2GRAY)\n        histograms.append(cv2.calcHist([img], [0], None, [256], [0, 256]))\n        processed+=1\n        if processed >=5:\n            break    ","9fc11033":"print(len(histograms))","a17e2b8a":"def showImages(histograms):\n    n = len(histograms)\n    rowCol = int(n \/ 2)\n    fig,ax = plt.subplots(5, 8, figsize=(25,25))\n    k = 0\n    for i in range(len(ax)):\n        for j in range(len(ax[i])):\n            if k < len(histograms):\n                ax[i,j].plot(histograms[k])\n            else:\n                break\n            j += 1\n            k += 1\n        i += 1\n    plt.show()\n\nshowImages(histograms)","6086c05c":"from scipy.stats import kurtosis,skew,entropy\n\nvariance = np.empty((len(histograms),1),dtype=np.float32)\nmean = np.empty((len(histograms),1),dtype=np.float32)\nmedian = np.empty((len(histograms),1),dtype=np.float32)\nstd = np.empty((len(histograms),1),dtype=np.float32)\nskew = np.empty((len(histograms),1),dtype=np.float32)\nkurtosis = np.empty((len(histograms),1),dtype=np.float32)\nentropy = np.empty((len(histograms),1),dtype=np.float32)\n\ni = 0\nfor hist in histograms:\n    variance[i] = np.var(hist)\n    mean[i] = np.var(hist)\n    median[i] = np.var(hist)\n    std[i] = np.var(hist)\n    skew[i] = np.var(hist)\n    kurtosis[i] = np.var(hist)\n    entropy[i] = np.var(hist)\n    i +=1","5376c122":"print('variance:\\n',variance)\n","60c2ecfb":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)\n\ntrain_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=val_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","22c6e72e":"# Load the pretained model\npretrained_model = tf.keras.applications.MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\npretrained_model.trainable = False","135dd6b0":"inputs = pretrained_model.input\n\nx = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\n\noutputs = tf.keras.layers.Dense(36, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    batch_size = 32,\n    epochs=5,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=2,\n            restore_best_weights=True\n        )\n    ]\n)","31776921":"pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()","f9523670":"pd.DataFrame(history.history)[['loss','val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","7dbf0cba":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\ny_test = [labels[k] for k in test_images.classes]","46a00a2a":"from sklearn.metrics import accuracy_score\nacc = accuracy_score(y_test, pred)\nprint(f'Accuracy on the test set: {100*acc:.2f}%')","372097f1":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (15,10))\nsns.heatmap(cf_matrix, \n            annot=True, \n            xticklabels = sorted(set(y_test)), \n            yticklabels = sorted(set(y_test)),\n            )\nplt.title('Normalized Confusion Matrix')\nplt.show()","c31e8133":"# Display some pictures of the dataset with their labels and the predictions\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(15, 15),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(test_df.Filepath.iloc[i]))\n    ax.set_title(f\"True: {test_df.Label.iloc[i]}\\nPredicted: {pred[i]}\")\nplt.tight_layout()\nplt.show()","0a50f2ef":"import matplotlib.cm as cm\n\ndef get_img_array(img_path, size):\n    img = tf.keras.preprocessing.image.load_img(img_path, target_size=size)\n    array = tf.keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size \"size\"\n    array = np.expand_dims(array, axis=0)\n    return array\n\ndef make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer as well as the output predictions\n    grad_model = tf.keras.models.Model(\n        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n    )\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        last_conv_layer_output, preds = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        class_channel = preds[:, pred_index]\n\n    # This is the gradient of the output neuron (top predicted or chosen)\n    # with regard to the output feature map of the last conv layer\n    grads = tape.gradient(class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    # then sum all the channels to obtain the heatmap class activation\n    last_conv_layer_output = last_conv_layer_output[0]\n    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = tf.maximum(heatmap, 0) \/ tf.math.reduce_max(heatmap)\n    return heatmap.numpy()\n\ndef save_and_display_gradcam(img_path, heatmap, cam_path=\"cam.jpg\", alpha=0.4):\n    # Load the original image\n    img = tf.keras.preprocessing.image.load_img(img_path)\n    img = tf.keras.preprocessing.image.img_to_array(img)\n\n    # Rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # Use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # Use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # Create an image with RGB colorized heatmap\n    jet_heatmap = tf.keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = tf.keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * alpha + img\n    superimposed_img = tf.keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    superimposed_img.save(cam_path)\n\n    # Display Grad CAM\n#     display(Image(cam_path))\n    \n    return cam_path\n    \npreprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input\ndecode_predictions = tf.keras.applications.mobilenet_v2.decode_predictions\n\nlast_conv_layer_name = \"Conv_1\"\nimg_size = (224,224)\n\n# Remove last layer's softmax\nmodel.layers[-1].ativation = None","b6df0065":"# Display the part of the pictures used by the neural network to classify the pictures\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(15, 15),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    img_path = test_df.Filepath.iloc[i]\n    img_array = preprocess_input(get_img_array(img_path, size=img_size))\n    heatmap = make_gradcam_heatmap(img_array, model, last_conv_layer_name)\n    cam_path = save_and_display_gradcam(img_path, heatmap)\n    ax.imshow(plt.imread(cam_path))\n    ax.set_title(f\"True: {test_df.Label.iloc[i]}\\nPredicted: {pred[i]}\")\nplt.tight_layout()\nplt.show()","22095f7a":"# 1. Loading and preprocessing<a class=\"anchor\" id=\"1\"><\/a><a class=\"anchor\" id=\"1\"><\/a>","dfe684bd":"# I. sobel X","4fbe3e00":"# II. sobel Y","be387663":"# 4. Visualize the result<a class=\"anchor\" id=\"4\"><\/a>","be755682":"# IV. prewitt Y","ba064fb0":"\u0643\u062f\u0627 \u0634\u063a\u0627\u0644 \u0628\u064a\u0642\u0631\u0623","dc95b972":"## 5. Class activation heatmap for image classification<a class=\"anchor\" id=\"5\"><\/a>\n### Grad-CAM class activation visualization\n*Code adapted from keras.io*","410da8c6":"# III. prewitt X","43b327d1":"# 2. Load the Images with a generator and Data Augmentation<a class=\"anchor\" id=\"2\"><\/a>","dc2c9854":"# 3. Train the model<a class=\"anchor\" id=\"3\"><\/a>"}}