{"cell_type":{"9a25d780":"code","51324d86":"code","ba0897a7":"code","c992c502":"code","07187482":"code","9df991c1":"code","c9d14f35":"code","dd2d278a":"code","0feac792":"code","711bb41e":"code","87a10f27":"code","5ccd721f":"code","f62b8b63":"code","6f675fa4":"code","cf0c2dcf":"code","2b2e76ae":"code","37c051b1":"code","63677933":"code","ec260539":"code","3d398ebe":"code","9a14374b":"code","da2a9087":"code","734f08d7":"code","93683259":"code","a3f451d1":"code","b7ad3c43":"code","fbec6617":"code","d4e30ebb":"code","144cd51f":"code","deb519e4":"markdown","0d9658ca":"markdown","cdce46fe":"markdown","c134bbcd":"markdown","6ae46af5":"markdown","d32f97b2":"markdown","3245dbf6":"markdown","ed103cc9":"markdown","355f63b8":"markdown","c63d936e":"markdown","d45769a4":"markdown","3e73c237":"markdown"},"source":{"9a25d780":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_log_error","51324d86":"train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","ba0897a7":"train_data.info()","c992c502":"#Split the train_data as dtype : 'object'(train_data_object) and others\ndf_object = []\ndf_numberic = []\nfor i in range(len(train_data.columns)):\n    if train_data[train_data.columns[i]].dtype ==  'object':\n        df_object.append(train_data.columns[i])\n    else:\n        df_numberic.append(train_data.columns[i])\n\ntrain_data_object = train_data[df_object]\ntrain_data_numberic = train_data[df_numberic]\n\n#Fill NaN\ntrain_data_object = train_data_object.fillna('NO')\ntrain_data_numberic = train_data_numberic.fillna(0)\ntrain_data = pd.concat([train_data_object, train_data_numberic], axis = 1)","07187482":"sns.set()\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\nfig.suptitle('The SalePrice analysis')\n\nsns.distplot(train_data['SalePrice'], ax = axes[0], norm_hist = True)\naxes[0].set_title('Distribution')\naxes[0].set_xlabel('SalePrice')\naxes[0].set_ylabel('Count')\n\n\nsns.boxplot(x = train_data['SalePrice'], ax = axes[1])\naxes[1].set_title('Boxplot')\naxes[1].set_xlabel('SalePrice')\n\n\nsns.scatterplot(y = train_data['SalePrice'],x = train_data.index, ax = axes[2])\naxes[2].set_title('Scatter')\naxes[2].set_ylabel('SalePrice')","9df991c1":"train_data_numberic.head()","c9d14f35":"np.array(train_data_numberic.columns).reshape(19, 2)\nfig, axes = plt.subplots(19, 2, figsize=(15, 80))\nfig.suptitle('The numeric feature')\nfor i in range(19):\n    for j in range(2):\n        sns.regplot(x = train_data_numberic[train_data_numberic.columns[2*i + j]], y = train_data_numberic['SalePrice'], ax = axes[i, j])","dd2d278a":"train_data_numberic = train_data_numberic.drop(columns = ['Id'])\n\ntrain_data_numberic['TotalFlrSF'] = train_data_numberic['1stFlrSF'] + train_data_numberic['2ndFlrSF']","0feac792":"plt.figure(figsize = (20 , 20))\nsns.heatmap(train_data_numberic.corr()[(train_data_numberic.corr() >= 0.5) | (train_data_numberic.corr() <= - 0.5)], annot = True, center = 0)","711bb41e":"highcor_columns = []\nfor i in pd.DataFrame(train_data_numberic.corr()[train_data_numberic.corr() >= 0.5]['SalePrice']).dropna().index:\n    highcor_columns.append(i)\n        ","87a10f27":"sns.pairplot(train_data_numberic.corr()[highcor_columns])","5ccd721f":"sns.set()\nfig, axes = plt.subplots(1, 5, figsize=(25, 5))\nfig.suptitle('The highcor_columns')\nfor i in range(5):\n    sns.scatterplot(x = train_data[highcor_columns[i]], y = train_data['SalePrice'], ax = axes[i])\n    sns.regplot(x = train_data[highcor_columns[i]], y = train_data['SalePrice'], ax = axes[i], color = 'r')\n    axes[i].set_title(f'{highcor_columns[i]}')\n    axes[i].set_xlabel(f'{highcor_columns[i]}')\n    axes[i].set_ylabel('SalePrice')\nfig, axes = plt.subplots(1, 5, figsize=(25, 5))\nfig.suptitle('The highcor_columns')\nfor i in range(5):\n    sns.scatterplot(x = train_data[highcor_columns[i+5]], y = train_data['SalePrice'], ax = axes[i])\n    sns.regplot(x = train_data[highcor_columns[i+5]], y = train_data['SalePrice'], ax = axes[i], color = 'g')\n    axes[i].set_title(f'{highcor_columns[i+5]}')\n    axes[i].set_xlabel(f'{highcor_columns[i+5]}')\n    axes[i].set_ylabel('SalePrice')","f62b8b63":"train_data_object['SalePrice'] = train_data_numberic['SalePrice']\ntrain_data_object['MSSubClass'] = train_data_numberic['MSSubClass'].apply(str)\nfig, axes = plt.subplots(9, 5, figsize=(30, 80))\nfig.suptitle('The object feature')\nfor i in range(9):\n    for j in range(5):\n        sns.boxplot(x = train_data_object[train_data_object.columns[5*i + j]], y = train_data_object['SalePrice'], ax = axes[i, j])\ntrain_data_object = train_data_object.drop(columns = ['SalePrice'])","6f675fa4":"train_data_object['MSSubClass'] = train_data_numberic['MSSubClass'].apply(str)\ntrain_data_object_dum = pd.get_dummies(train_data_object)\ntrain_data = pd.concat([train_data_object_dum, train_data_numberic], axis = 1)","cf0c2dcf":"test_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","2b2e76ae":"#Split the test_data as dtype : 'object'(test_data_object) and others\ndf_object = []\ndf_numberic = []\nfor i in range(len(test_data.columns)):\n    if test_data[test_data.columns[i]].dtype ==  'object':\n        df_object.append(test_data.columns[i])\n    else:\n        df_numberic.append(test_data.columns[i])\n\ntest_data_object = test_data[df_object]\ntest_data_numberic = test_data[df_numberic]\n\n#Fill NaN\ntest_data_object = test_data_object.fillna('NO')\ntest_data_numberic = test_data_numberic.fillna(0)\ntest_data = pd.concat([test_data_object, test_data_numberic], axis = 1)\n\ntest_data_numberic = test_data_numberic.drop(columns = ['Id'])\n\ntest_data_numberic['TotalFlrSF'] = test_data_numberic['1stFlrSF'] + test_data_numberic['2ndFlrSF']","37c051b1":"test_data_object['MSSubClass'] = test_data_numberic['MSSubClass'].apply(str)\ntest_data_object_dum = pd.get_dummies(test_data_object)\ntest_data = pd.concat([test_data_object_dum, test_data_numberic], axis = 1)","63677933":"train_columns = []\nfor i in train_data.columns:\n    train_columns.append(i)\n\nfor i in test_data.columns:\n    train_columns.append(i)\ncombine_columns = set(list(train_columns))","ec260539":"df_train = pd.DataFrame(train_data, columns = combine_columns)\ndf_test = pd.DataFrame(test_data, columns = combine_columns)","3d398ebe":"df_test = df_test.fillna(0).drop(columns = ['SalePrice'])","9a14374b":"df_train = df_train.fillna(0)","da2a9087":"from sklearn.model_selection import train_test_split\n\ndata = df_train.drop(columns = 'SalePrice')\ntarget = np.log2(df_train['SalePrice'])\n\n\nx_train, x_test, y_train, y_test = train_test_split(data, target, train_size = 0.8, random_state = 5)","734f08d7":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import Normalizer\nx_train = StandardScaler().fit_transform(x_train)\nx_test = StandardScaler().fit_transform(x_test)","93683259":"from sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(learning_rate=0.015, max_depth=3, max_features = 70,\n                                min_samples_leaf=1,n_estimators=1500, random_state=2,subsample = 0.2).fit(x_train, y_train)\ny_pred_GBR = GBR.predict(x_test)\nplt.scatter(y_test, y_pred_GBR)\nplt.plot([x for x in range(10, 14)], [x for x in range(10, 14)], color = 'r')\nplt.xlabel(\"Reality Prices\")\n\nplt.ylabel(\"Predicted prices\")\nplt.title('GradientBoostingRegressor')\nplt.show()\nplt.clf()","a3f451d1":"GBR.score(x_test,y_test)","b7ad3c43":"from sklearn.svm import SVR\nsvr = SVR(kernel = 'rbf', gamma = 'auto', C = 0.7, degree=4, epsilon=0.002, coef0=20).fit(x_train, y_train)\n\ny_pred_svr = svr.predict(x_test)\nplt.scatter(y_test, y_pred_svr)\nplt.plot([x for x in range(10, 14)], [x for x in range(10, 14)], color = 'r')\nplt.xlabel(\"Reality Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title('SVM')\nplt.show()\nplt.clf()","fbec6617":"df_test = StandardScaler().fit_transform(df_test)\nprediction_price = 2**(GBR.predict(df_test))","d4e30ebb":"submi = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsubmi['SalePrice'] = prediction_price\nsubmi.to_csv('submission.csv', index=False)","144cd51f":"sns.set()\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\nfig.suptitle('The SalePrice analysis')\n\nsns.distplot(submi['SalePrice'], ax = axes[0], norm_hist = True)\naxes[0].set_title('Distribution')\naxes[0].set_xlabel('SalePrice')\naxes[0].set_ylabel('Count')\n\n\nsns.boxplot(x = submi['SalePrice'], ax = axes[1])\naxes[1].set_title('Boxplot')\naxes[1].set_xlabel('SalePrice')\n\n\nsns.scatterplot(y = submi['SalePrice'],x = submi.index, ax = axes[2])\naxes[2].set_title('Scatter')\naxes[2].set_ylabel('SalePrice')","deb519e4":"### Train_data's information","0d9658ca":"### Object feature columns analysis","cdce46fe":"### Numberic feature columns analysis","c134bbcd":"### SVR","6ae46af5":"### Fill the NaN ","d32f97b2":"### SalePrice distrubution ","3245dbf6":"## 3. EDA ( Numberic + Object)","ed103cc9":"## 4. GradientBoostRegression for Prediction","355f63b8":"## 1. Read the Train_data","c63d936e":"## 2. Data's exploration","d45769a4":"### Train_data_numberic  with SalePrice","3e73c237":"## 3. Create the Combine DataFrame for each train.csv and test.csv (important!! for same dimension)"}}