{"cell_type":{"f3ac926c":"code","58c24157":"code","f28308a2":"code","392644ec":"code","6de461b3":"markdown","6c17cd0a":"markdown"},"source":{"f3ac926c":"# import libraries\nimport numpy as np\nfrom pathlib import Path\nfrom random import randint\nimport matplotlib.pyplot as plt\nfrom typing import Tuple, List\nfrom json import loads","58c24157":"def project_point_to_screen(projection: np.array, point:np.array, resx: int= 1280, resy:int = 720) -> Tuple[int, int]:\n    #  splat x y z and w=1\n    M = np.ones((4, 4))\n    M[0, :] = point[0]\n    M[1, :] = point[1]\n    M[2, :] = point[2]\n    # Mul by view projection matrix\n    M *= projection\n    # Add them together\n    vtemp = np.sum(M, axis=0)\n\n    # Normalize to image\n    if vtemp[3] > 0:\n        invW = 1 \/ vtemp[3]\n        return int((0.5 + vtemp[0] * 0.5 * invW) * resx), int((0.5 - vtemp[1] * 0.5 * invW) * resy)\n    return 0, 0\n\ndef get_projected_points(data_file: Path) -> List[Tuple[int, int]]:\n    out: List[Tuple[int, int]] = []\n        \n    # load annotation file \n    json_data = loads(data_file.read_text())\n    \n    # projected keypoints coordinates array agnostic to keypoint\n    view_projection_mat: np.array = np.array(json_data[\"camera\"][\"projection\"])\n    for key_data in json_data[\"keypoints\"].values():\n        out.append(project_point_to_screen(view_projection_mat, key_data[\"world_location\"]))\n        \n    return out","f28308a2":"# cache available files\nimage_files = sorted(list(Path(\"..\/input\/metahuman-simulation-sample-dataset\/lit\").iterdir()))\nannotation_files = sorted(list(Path(\"..\/input\/metahuman-simulation-sample-dataset\/annotation\").iterdir()))","392644ec":"# random set\nrnd_index = randint(0, len(image_files))\nrnd_image_file = image_files[rnd_index]\nrnd_annotation_file = annotation_files[rnd_index]\n\nimg = plt.imread(rnd_image_file)\nfig, ax = plt.subplots()\n\nax.imshow(img)\n\nprojected_points = get_projected_points(rnd_annotation_file)\nfor p in projected_points:\n    # Draw red circle on projected coordinates\n    ax.add_patch(plt.Circle(p, 3, color=\"r\"))\n    \nplt.axis(False)\nplt.title(f\"Frame: {rnd_image_file.stem}\")\n\n# Show the image\nplt.show()","6de461b3":"# 3D world point to image projection","6c17cd0a":"# Display random image"}}