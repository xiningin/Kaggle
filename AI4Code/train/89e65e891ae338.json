{"cell_type":{"45c28506":"code","45450c45":"code","3bdfacc1":"code","9bf73639":"code","2086b6b1":"code","d7ac2c17":"code","87602c87":"code","cadd0c0b":"code","ae207b18":"code","c7ba41c4":"markdown","d677ff53":"markdown","200094ee":"markdown","a6992880":"markdown","2178c518":"markdown"},"source":{"45c28506":"import os\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport warnings\n\ndef build_graphs(week_num, submission_path, solution_path, test_path):\n    submission_files = os.listdir(submission_path)\n    submissions_list = []\n\n    for f in submission_files:\n        submission = pd.read_csv(os.path.join(submission_path, f))\n        submission.insert(0, \"SubmissionId\", int(f[:-4]))\n        submissions_list.append(submission)\n\n    submissions = pd.concat(submissions_list, ignore_index=True, sort=False)\n\n    # Read in solution\/test files\n    wk1_solution = pd.read_csv(solution_path)\n    wk1_test = pd.read_csv(test_path)\n    if \"Province\/State\" in wk1_test.columns:\n        wk1_test = wk1_test.rename(columns={\"Province\/State\": \"Province_State\", \"Country\/Region\": \"Country_Region\"})\n\n    # Merge submissions to solution and test files\n    wk1 = submissions.merge(wk1_test, on=\"ForecastId\", how=\"left\")\n    wk1 = wk1.merge(wk1_solution, on=\"ForecastId\", how=\"left\", suffixes=(\"\", \"Actual\"))\n\n    # Add ranks and scores to the submissions\n    # Some submission input values to logarithm were invalid\n    warnings.filterwarnings(\"ignore\", category=RuntimeWarning) \n    wk1.loc[:,\"FatalitiesSLE\"] = (np.log(1+wk1[\"Fatalities\"])-np.log(1+wk1[\"FatalitiesActual\"]))**2\n    wk1.loc[:,\"ConfirmedCasesSLE\"] = (np.log(1+wk1[\"ConfirmedCases\"])-np.log(1+wk1[\"ConfirmedCasesActual\"]))**2\n    warnings.filterwarnings(\"default\", category=RuntimeWarning) \n    wk1_scores = wk1[wk1[\"Usage\"]==\"Private\"][[\"SubmissionId\", \"FatalitiesSLE\", \"ConfirmedCasesSLE\"]].groupby(\"SubmissionId\").mean().reset_index()\n    wk1_scores.loc[:, \"FatalatiesRMSLE\"] = np.sqrt(wk1_scores[\"FatalitiesSLE\"])\n    wk1_scores.loc[:, \"ConfirmedCasesRMSLE\"] = np.sqrt(wk1_scores[\"ConfirmedCasesSLE\"])\n    wk1_scores.loc[:, \"OverallRMSLE\"] = (wk1_scores[\"FatalatiesRMSLE\"]+wk1_scores[\"ConfirmedCasesRMSLE\"])\/2.0\n    wk1_scores = wk1_scores.sort_values(by=\"OverallRMSLE\")\n    wk1 = wk1.merge(wk1_scores[[\"SubmissionId\", \"FatalatiesRMSLE\", \"ConfirmedCasesRMSLE\", \"OverallRMSLE\"]], on=\"SubmissionId\")\n    wk1_ranks = wk1[[\"SubmissionId\", \"OverallRMSLE\"]].drop_duplicates().sort_values(by=\"OverallRMSLE\")\n    wk1_ranks[\"Rank\"] = list(range(1, wk1_ranks.shape[0]+1))\n    wk1 = wk1.merge(wk1_ranks[[\"SubmissionId\", \"Rank\"]], on=\"SubmissionId\", how=\"inner\")\n    \n    states = sorted(set(wk1[wk1[\"Country_Region\"]==\"US\"][\"Province_State\"]))\n\n    # FATALITIES\n    fig_fatalities=go.Figure()\n\n    region_plot_names = []\n    updatemenu=[]\n    buttons=[]\n\n    default_state = \"California\"\n\n    for region_name in states:\n        region = wk1[(wk1[\"Province_State\"]==region_name) & (wk1[\"Usage\"]!=\"Public\") & (wk1[\"Rank\"]<=25)]\n        region_actual = region[(region[\"SubmissionId\"]==region[\"SubmissionId\"][region.index[1]]) & (region[\"Usage\"]==\"Private\")]\n\n        fig_fatalities.add_trace(go.Box(x=region[\"Date\"], y=region[\"Fatalities\"], visible=(region_name==default_state)))\n        fig_fatalities.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"FatalitiesActual\"], line={}, visible=(region_name==default_state)))\n\n        region_plot_names.extend([region_name]*2)\n\n    for region_name in states:\n        buttons.append(dict(method='update',\n                            label=region_name + (\" Fatalities, Week %d\" % week_num),\n                            args = [{'visible': [region_name==r for r in region_plot_names],\n                                     \"title\": region_name + \" Fatalities\"}]))\n\n    # add dropdown menus to the figure\n    fig_fatalities.update_layout(showlegend=False, updatemenus=[{\"buttons\": buttons, \"direction\": \"down\", \"active\": states.index(default_state), \"showactive\": True, \"x\": 0.5, \"y\": 1.15}])\n    \n    # CASES\n    fig_cases=go.Figure()\n\n    region_plot_names = []\n    updatemenu=[]\n    buttons=[]\n\n    default_state = \"California\"\n\n    for region_name in states:\n        region = wk1[(wk1[\"Province_State\"]==region_name) & (wk1[\"Usage\"]!=\"Public\") & (wk1[\"Rank\"]<=25)]\n        region_actual = region[(region[\"SubmissionId\"]==region[\"SubmissionId\"][region.index[1]]) & (region[\"Usage\"]==\"Private\")]\n\n        fig_cases.add_trace(go.Box(x=region[\"Date\"], y=region[\"ConfirmedCases\"], visible=(region_name==default_state)))\n        fig_cases.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"ConfirmedCasesActual\"], line={}, visible=(region_name==default_state)))\n\n        region_plot_names.extend([region_name]*2)\n\n    for region_name in states:\n        buttons.append(dict(method='update',\n                            label=region_name + (\" Cases, Week %d\" % week_num),\n                            args = [{'visible': [region_name==r for r in region_plot_names],\n                                     \"title\": region_name + \" Cases\"}]))\n\n    # add dropdown menus to the figure\n    fig_cases.update_layout(showlegend=False, updatemenus=[{\"buttons\": buttons, \"direction\": \"down\", \"active\": states.index(default_state), \"showactive\": True, \"x\": 0.5, \"y\": 1.15}])\n    \n    return (fig_fatalities, fig_cases)","45450c45":"(fig_wk1_fatalities, fig_wk1_cases) = build_graphs(1, \"..\/input\/covid19-global-forecasting-submissions\/week_1\", \"..\/input\/covid-19-forecasting-ongoing-data-updates\/wk1_solution.csv\", \"..\/input\/covid19-forecasting-week-one-launch-data\/test.csv\")\nfig_wk1_fatalities.show()","3bdfacc1":"fig_wk1_cases.show()","9bf73639":"(fig_wk2_fatalities, fig_wk2_cases) = build_graphs(2, \"..\/input\/covid19-global-forecasting-submissions\/week_2\", \"..\/input\/covid-19-forecasting-ongoing-data-updates\/wk2_solution.csv\", \"..\/input\/covid19-forecasting-week-two-launch-data\/test.csv\")\nfig_wk2_fatalities.show()","2086b6b1":"fig_wk2_cases.show()","d7ac2c17":"(fig_wk3_fatalities, fig_wk3_cases) = build_graphs(3, \"..\/input\/covid19-global-forecasting-submissions\/week_3\", \"..\/input\/covid-19-forecasting-ongoing-data-updates\/wk3_solution.csv\", \"..\/input\/covid19-forecasting-week-three-launch-data\/test.csv\")\nfig_wk3_fatalities.show()","87602c87":"fig_wk3_cases.show()","cadd0c0b":"(fig_wk4_fatalities, fig_wk4_cases) = build_graphs(4, \"..\/input\/covid19-global-forecasting-submissions\/week_4\", \"..\/input\/covid-19-forecasting-ongoing-data-updates\/wk4_solution.csv\", \"..\/input\/covid19-forecasting-week-four-launch-data\/test.csv\")\nfig_wk4_fatalities.show()","ae207b18":"fig_wk4_cases.show()","c7ba41c4":"# Week 4 Predictions\n\nThese forecasts came from the [COVID19 Week 4 forecasting challenge](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-4) and were submitted by Wednesday April 15.","d677ff53":"# Week 3 Predictions\n\nThese forecasts came from the [COVID19 Week 3 forecasting challenge](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-3) and were submitted by Wednesday April 8.","200094ee":"# Week 2 Predictions\n\nThese forecasts came from the [COVID19 Week 2 forecasting challenge](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-2) and were submitted by Wednesday April 1.","a6992880":"# Week 1 Predictions\n\nThese forecasts came from the [COVID19 Week 1 forecasting challenge](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-1) and were submitted by Wednesday March 25.","2178c518":"# Kaggle COVID19 Forecasting - Cumulative Cases and Fatalities\n\nThis selects the top 25 best team's selected submissions to-date in each of the four weekly COVID19 forecasting competitions, and visualizes the predictions by US state."}}