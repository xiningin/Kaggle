{"cell_type":{"fc262754":"code","d6ecdcaa":"code","c6530afd":"code","0212528f":"code","4a8bef91":"code","0112a06b":"code","1df6560f":"code","a769129a":"code","1c4d2b43":"code","dc58b443":"code","9be5947b":"code","7264d7e6":"code","467bf768":"code","8e42208c":"code","2a35c4c4":"code","07d70fd2":"code","66160fa2":"code","4a2635e6":"code","6acc82da":"code","748c1a80":"code","54e293f0":"code","47a001df":"code","278484f2":"code","e1d600e6":"markdown","eb415940":"markdown","8f572c49":"markdown","97658468":"markdown","a4d02ec1":"markdown","6c256129":"markdown","748e1ca8":"markdown","7676981e":"markdown"},"source":{"fc262754":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d6ecdcaa":"import os\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport random\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport zlib\nimport itertools\nimport sklearn\nimport itertools\nimport scipy\nimport skimage\nfrom skimage.transform import resize\nimport csv\nfrom tqdm import tqdm\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split, learning_curve,KFold,cross_val_score,StratifiedKFold\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import confusion_matrix\nimport keras\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D, Lambda, MaxPool2D, BatchNormalization\nfrom keras.utils import np_utils\nfrom keras.utils.np_utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import models, layers, optimizers\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.utils import class_weight\nfrom keras.optimizers import SGD, RMSprop, Adam, Adagrad, Adadelta, RMSprop\nfrom keras.models import Sequential, model_from_json\nfrom keras.layers import Activation,Dense, Dropout, Flatten, Conv2D, MaxPool2D,MaxPooling2D,AveragePooling2D, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nfrom keras import backend as K\nfrom keras.applications.vgg16 import VGG16\nfrom keras.models import Model\nfrom keras.applications.inception_v3 import InceptionV3\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\n#from keras.applications.mobilenet import MobileNet\n#from sklearn.metrics import roc_auc_score\n#from sklearn.metrics import roc_curve\n#from sklearn.metrics import auc\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c6530afd":"imageSize=224\n# train_dir = \"..\/input\/oct2017\/OCT2017 \/train\/\"\n# test_dir =  \"..\/input\/oct2017\/OCT2017 \/test\/\"\ntrain_dir = \"..\/input\/kermany2018\/oct2017\/OCT2017 \/train\/\"\ntest_dir =  \"..\/input\/kermany2018\/oct2017\/OCT2017 \/test\/\"\n# ['DME', 'CNV', 'NORMAL', '.DS_Store', 'DRUSEN']\nfrom tqdm import tqdm\ndef get_data(folder):\n    \"\"\"\n    Load the data and labels from the given folder.\n    \"\"\"\n    X = []\n    y = []\n    for folderName in os.listdir(folder):\n        if not folderName.startswith('.'):\n            if folderName in ['NORMAL']:\n                label = 0\n            elif folderName in ['CNV']:\n                label = 1\n            elif folderName in ['DME']:\n                label = 2\n            elif folderName in ['DRUSEN']:\n                label = 3\n            else:\n                label = 4\n            for image_filename in tqdm(os.listdir(folder + folderName)):\n                img_file = cv2.imread(folder + folderName + '\/' + image_filename)\n                if img_file is not None:\n                    img_file = skimage.transform.resize(img_file, (imageSize, imageSize, 3))\n                    img_arr = np.asarray(img_file)\n                    X.append(img_arr)\n                    y.append(label)\n    X = np.asarray(X)\n    y = np.asarray(y)\n    return X,y\n#X_train, y_train = get_data(train_dir) # Un-comment to use full dataset: Step 1 of 2\nX_test, y_test= get_data(test_dir)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_test, y_test, test_size=0.2) # Re-comment to use full dataset: Step 2 of 2\n\n# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nfrom keras.utils.np_utils import to_categorical\ny_trainHot = to_categorical(y_train, num_classes = 4)\ny_testHot = to_categorical(y_test, num_classes = 4)","0212528f":"print(len(y_trainHot))\nprint(len(y_testHot))","4a8bef91":"def plotHistogram(a):\n    \"\"\"\n    Plot histogram of RGB Pixel Intensities\n    \"\"\"\n    plt.figure(figsize=(10,5))\n    plt.subplot(1,2,1)\n    plt.imshow(a)\n    plt.axis('off')\n    histo = plt.subplot(1,2,2)\n    histo.set_ylabel('Count')\n    histo.set_xlabel('Pixel Intensity')\n    n_bins = 30\n    plt.hist(a[:,:,0].flatten(), bins= n_bins, lw = 0, color='r', alpha=0.5);\n    plt.hist(a[:,:,1].flatten(), bins= n_bins, lw = 0, color='g', alpha=0.5);\n    plt.hist(a[:,:,2].flatten(), bins= n_bins, lw = 0, color='b', alpha=0.5);\nplotHistogram(X_train[1])","0112a06b":"print(\"Normal\")\nmultipleImages = glob('..\/input\/kermany2018\/oct2017\/OCT2017 \/train\/NORMAL\/**')\ni_ = 0\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nplt.subplots_adjust(wspace=0, hspace=0)\nfor l in multipleImages[:25]:\n    im = cv2.imread(l)\n    im = cv2.resize(im, (128, 128)) \n    plt.subplot(5, 5, i_+1) #.set_title(l)\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    i_ += 1","1df6560f":"print(\"CNV\")\nmultipleImages = glob('..\/input\/kermany2018\/oct2017\/OCT2017 \/train\/CNV\/**')\ni_ = 0\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nplt.subplots_adjust(wspace=0, hspace=0)\nfor l in multipleImages[:25]:\n    im = cv2.imread(l)\n    im = cv2.resize(im, (128, 128)) \n    plt.subplot(5, 5, i_+1) #.set_title(l)\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    i_ += 1","a769129a":"print(\"DME\")\nmultipleImages = glob('..\/input\/kermany2018\/oct2017\/OCT2017 \/train\/CNV\/**')\ni_ = 0\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nplt.subplots_adjust(wspace=0, hspace=0)\nfor l in multipleImages[:25]:\n    im = cv2.imread(l)\n    im = cv2.resize(im, (128, 128)) \n    plt.subplot(5, 5, i_+1) #.set_title(l)\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    i_ += 1","1c4d2b43":"print(\"DRUSEN\")\nmultipleImages = glob('..\/input\/kermany2018\/oct2017\/OCT2017 \/train\/DRUSEN\/**')\ni_ = 0\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nplt.subplots_adjust(wspace=0, hspace=0)\nfor l in multipleImages[:25]:\n    im = cv2.imread(l)\n    im = cv2.resize(im, (128, 128)) \n    plt.subplot(5, 5, i_+1) #.set_title(l)\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    i_ += 1","dc58b443":"map_characters = {0: 'Normal', 1: 'CNV', 2: 'DME', 3: 'DRUSEN'}\ndict_characters=map_characters\nimport seaborn as sns\ndf = pd.DataFrame()\ndf[\"labels\"]=y_train\nlab = df['labels']\ndist = lab.value_counts()\nsns.countplot(lab)\nprint(dict_characters)","9be5947b":"# Helper Functions  Learning Curves and Confusion Matrix\n\nfrom keras.callbacks import Callback, EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\n\nclass MetricsCheckpoint(Callback):\n    \"\"\"Callback that saves metrics after each epoch\"\"\"\n    def __init__(self, savepath):\n        super(MetricsCheckpoint, self).__init__()\n        self.savepath = savepath\n        self.history = {}\n    def on_epoch_end(self, epoch, logs=None):\n        for k, v in logs.items():\n            self.history.setdefault(k, []).append(v)\n        np.save(self.savepath, self.history)\n\ndef plotKerasLearningCurve():\n    plt.figure(figsize=(10,5))\n    metrics = np.load('logs.npy')[()]\n    filt = ['acc'] # try to add 'loss' to see the loss learning curve\n    for k in filter(lambda x : np.any([kk in x for kk in filt]), metrics.keys()):\n        l = np.array(metrics[k])\n        plt.plot(l, c= 'r' if 'val' not in k else 'b', label='val' if 'val' in k else 'train')\n        x = np.argmin(l) if 'loss' in k else np.argmax(l)\n        y = l[x]\n        plt.scatter(x,y, lw=0, alpha=0.25, s=100, c='r' if 'val' not in k else 'b')\n        plt.text(x, y, '{} = {:.4f}'.format(x,y), size='15', color= 'r' if 'val' not in k else 'b')   \n    plt.legend(loc=4)\n    plt.axis([0, None, None, None]);\n    plt.grid()\n    plt.xlabel('Number of epochs')\n    plt.ylabel('Accuracy')\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize = (5,5))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\ndef plot_learning_curve(history):\n    plt.figure(figsize=(8,8))\n    plt.subplot(1,2,1)\n    plt.plot(history.history['acc'])\n    plt.plot(history.history['val_acc'])\n    plt.title('model accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.savefig('.\/accuracy_curve.png')\n    plt.subplot(1,2,2)\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.savefig('.\/loss_curve.png')","7264d7e6":"map_characters1 = {0: 'Normal', 1: 'CNV', 2: 'DME', 3: 'DRUSEN'}\nclass_weight1 = class_weight.compute_class_weight('balanced', np.unique(y_train), y_train) ## ? \n\n## \nweight_path1 = '..\/input\/keras-pretrained-models\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'\npretrained_model_1 = VGG16(weights = weight_path1, include_top=False, input_shape=(imageSize, imageSize, 3))","467bf768":"# Deal with imbalanced class sizes below\n# Make Data 1D for compatability upsampling methods\nX_trainShape = X_train.shape[1]*X_train.shape[2]*X_train.shape[3]\nX_testShape = X_test.shape[1]*X_test.shape[2]*X_test.shape[3]\nX_trainFlat = X_train.reshape(X_train.shape[0], X_trainShape)\nX_testFlat = X_test.reshape(X_test.shape[0], X_testShape)\nY_train = y_train\nY_test = y_test\n#ros = RandomOverSampler(ratio='auto')\nros = RandomUnderSampler(ratio='auto')\nX_trainRos, Y_trainRos = ros.fit_sample(X_trainFlat, Y_train)\nX_testRos, Y_testRos = ros.fit_sample(X_testFlat, Y_test)\n# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_trainRosHot = to_categorical(Y_trainRos, num_classes = 4)\nY_testRosHot = to_categorical(Y_testRos, num_classes = 4)\n# Make Data 2D again\nfor i in range(len(X_trainRos)):\n    height, width, channels = imageSize,imageSize,3\n    X_trainRosReshaped = X_trainRos.reshape(len(X_trainRos),height,width,channels)\nfor i in range(len(X_testRos)):\n    height, width, channels = imageSize,imageSize,3\n    X_testRosReshaped = X_testRos.reshape(len(X_testRos),height,width,channels)\n# Plot Label Distribution\ndfRos = pd.DataFrame()\ndfRos[\"labels\"]=Y_trainRos\nlabRos = dfRos['labels']\ndistRos = lab.value_counts()\nsns.countplot(labRos)\nprint(dict_characters)","8e42208c":"class_weight1 = class_weight.compute_class_weight('balanced', np.unique(Y_train), Y_train)\nprint(\"Old Class Weights: \",class_weight1)\nclass_weight2 = class_weight.compute_class_weight('balanced', np.unique(Y_trainRos), Y_trainRos)\nprint(\"New Class Weights: \",class_weight2)","2a35c4c4":"# Shuffle data to permit further subsampling\nfrom sklearn.utils import shuffle\nX_trainRosReshaped, Y_trainRosHot = shuffle(X_trainRosReshaped, Y_trainRosHot, random_state=13)\nX_testRosReshaped, Y_testRosHot = shuffle(X_testRosReshaped, Y_testRosHot, random_state=13)","07d70fd2":"def get_model(pretrainedmodel,numclasses):\n#     base_model = pretrained_model_1 # Topless\n    base_model = pretrainedmodel # Topless\n    # Add top layer\n    x = base_model.output\n    x = Conv2D(512, kernel_size = (3,3), padding = 'valid')(x)\n    x = keras.layers.GlobalAveragePooling2D()(x)\n#     x = Flatten()(x)\n#     x = Dropout(0.75)(x)\n    predictions = Dense(numclasses, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n    # Train top layer\n    for layer in base_model.layers:\n        layer.trainable = False\n    return model ","66160fa2":"model = get_model(pretrained_model_1, 4)\nmodel.summary()","4a2635e6":"optimizer1 = keras.optimizers.Adam()\noptimizer2 = keras.optimizers.RMSprop(lr=0.0001\/2.0)\n\nmodel.compile(loss='categorical_crossentropy', \n              optimizer=optimizer1, \n              metrics=['accuracy'])\ncallbacks_list = [keras.callbacks.EarlyStopping(monitor='val_acc', patience=10, verbose=1)]","6acc82da":"# Fit model\nxtrain = X_trainRosReshaped\nytrain = Y_trainRosHot\nxtest = X_testRosReshaped\nytest = Y_testRosHot\nnumepochs = 100\nclassweight = class_weight2 \nbatch_size = 128\n\n\nhistory = model.fit(xtrain,ytrain, \n                    epochs=numepochs, \n                    batch_size = batch_size,\n                    class_weight=classweight, \n                    validation_data=(xtest,ytest), \n                    verbose=1,\n                    callbacks = callbacks_list+[MetricsCheckpoint('logs')])","748c1a80":"labels = map_characters1\n\n# Evaluate model\nscore = model.evaluate(xtest,ytest, verbose=0)\nprint('\\nKeras CNN - accuracy:', score[1], '\\n')\ny_pred = model.predict(xtest)\nprint('\\n', sklearn.metrics.classification_report(np.where(ytest > 0)[1], np.argmax(y_pred, axis=1), target_names=list(labels.values())), sep='') \nY_pred_classes = np.argmax(y_pred,axis = 1) \nY_true = np.argmax(ytest,axis = 1) \nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nplotKerasLearningCurve()\nplt.show()\nplot_learning_curve(history)\nplt.show()\nplot_confusion_matrix(confusion_mtx, classes = list(labels.values()))\nplt.show()","54e293f0":"def plot_single(a):\n    \"\"\"\n    Plot histogram of RGB Pixel Intensities\n    \"\"\"\n    plt.figure(figsize=(10,5))\n    plt.subplot(1,2,1)\n    plt.imshow(a)\n","47a001df":"# normal --- dme\nfor index in range(len(Y_true)):\n    if Y_true[index] == 0 and Y_pred_classes[index] ==2:\n        plot_single(xtest[index])  ","278484f2":"# cnv - drusen\nfor index in range(len(Y_true)):\n    if Y_true[index] == 1 and Y_pred_classes[index] ==3:\n        plot_single(xtest[index])  ","e1d600e6":"## Reference from [Detect Retina Damage From OCT Images (HR)](https:\/\/www.kaggle.com\/kmader\/detect-retina-damage-from-oct-images-hr)\n\n","eb415940":"## NORMAL","8f572c49":"## DME","97658468":"## model : vgg16(changed)\nTo reduce overfitting, use the global average pooling (GAP) layer instead of the fully connected layer.\n## data\nonly use test folder data .","a4d02ec1":"## label \n![](https:\/\/i.imgur.com\/fSTeZMd.png)\n(A) (Far left) choroidal neovascularization (CNV) with neovascular membrane (white arrowheads) and associated subretinal fluid (arrows).   \n(Middle left) Diabetic macular edema (DME) with retinal-thickening-associated intraretinal fluid (arrows).  \n(Middle right) Multiple drusen (arrowheads) present in early AMD.   \n(Far right) Normal retina with preserved foveal contour and absence of any retinal fluid\/edema.  \n\n\uff08\u6700\u5de6\u4fa7\uff09\u8109\u7edc\u819c\u65b0\u751f\u8840\u7ba1\uff08CNV\uff09\uff0c\u65b0\u751f\u8840\u7ba1\u819c\uff08\u767d\u8272\u7bad\u5934\uff09\u548c\u76f8\u5173\u7684\u89c6\u7f51\u819c\u4e0b\u6db2\uff08\u7bad\u5934\uff09\u3002  \n\uff08\u5de6\u4e2d\uff09\u7cd6\u5c3f\u75c5\u6027\u9ec4\u6591\u6c34\u80bf\uff08DME\uff09\u4e0e\u89c6\u7f51\u819c\u589e\u539a\u76f8\u5173\u7684\u89c6\u7f51\u819c\u5185\u6db2\uff08\u7bad\u5934\uff09\u3002  \n\uff08\u4e2d\u53f3\uff09\u65e9\u671fAMD\u5b58\u5728\u591a\u4e2a\u73bb\u7483\u75a3\uff08\u7bad\u5934\uff09\u3002  \n\uff08\u6700\u53f3\u4fa7\uff09\u89c6\u7f51\u819c\u6b63\u5e38\uff0c\u4e2d\u592e\u51f9\u7684\u8f6e\u5ed3\uff0c\u6ca1\u6709\u4efb\u4f55\u89c6\u7f51\u819c\u6db2\/\u6c34\u80bf\u3002  ","6c256129":"## CNV\n","748e1ca8":"## drusen\n","7676981e":"## pixel histogram  ---- Histogram equalization\uff1f"}}