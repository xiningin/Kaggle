{"cell_type":{"54a38208":"code","536af9c8":"code","4a366bbf":"code","19444360":"code","e3bb4844":"code","7d0c71bf":"code","219f4bc4":"code","2fbe10b0":"code","2217465d":"code","268c0f53":"code","216bfb88":"code","b368f604":"code","a82d92ac":"code","e5fa5eb9":"code","0bd07d35":"code","a4203988":"code","afc036e5":"code","66b00794":"code","df945e85":"code","c6837f53":"code","a74c5bd7":"code","ad223337":"code","2113345b":"code","5a7c57b7":"code","280b75ee":"code","098acc39":"code","766ed884":"code","352042c0":"code","2de3fd3e":"code","fb4941b5":"code","7f50fbb1":"code","e5dd06ed":"code","937c27f1":"code","ef853502":"code","3fad6b1c":"code","3debda93":"code","b8c9bfe3":"code","d1307d7f":"code","aa0bf778":"code","e314cee3":"code","bc9185fe":"code","3f406241":"code","b924557e":"code","42a69a9d":"code","230b5c0b":"code","d8c48b31":"code","299dc942":"code","7ff8ff7c":"code","45b07f33":"markdown","5bd87910":"markdown","b0753c3a":"markdown","1a046310":"markdown","1abeb870":"markdown","c53ee9c0":"markdown","8fddf269":"markdown","710141d4":"markdown","c8b66738":"markdown","209c87b7":"markdown","12614115":"markdown","d1dc63f2":"markdown","3d08e6d2":"markdown","896d5af1":"markdown","bc7a1fd0":"markdown","193314b4":"markdown","5c848e29":"markdown","15c9121b":"markdown","89d03533":"markdown","d1551d5a":"markdown","ce0548b4":"markdown","8aa695f1":"markdown"},"source":{"54a38208":"!pip install plotly\n!pip install pywaffle\n!pip install squarify\n!pip install pycountry","536af9c8":"import pandas as pd\nimport os\nimport re\nimport matplotlib.pyplot as plt\nimport squarify\nimport plotly.express as px\nimport pycountry\nimport plotly.graph_objects as go\nfrom pywaffle import Waffle\nimport math\nfrom collections import *","4a366bbf":"from plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)","19444360":"## utils.py\n\nimport json\nimport pickle\n\ndef save_json(object, filepath):\n    with open(filepath, 'w') as fp:\n        json.dump(object, fp)\n\ndef load_json(filepath):\n    with open(filepath, 'r') as fp:\n        return json.load(fp)\n\ndef save_pickle(object, filepath):\n    with open(filepath, 'wb') as fp:\n        pickle.dump(object, fp)\n\ndef load_pickle(filepath):\n    with open(filepath, 'rb') as fp:\n        return pickle.load(fp)\n\ndef add_log(log, filepath, mode=\"a\"):\n    with open(filepath, mode) as fp:\n        fp.writelines([\n            f\"\"\"\\n{log}\\n\"\"\"\n        ])\n\nflatten = lambda lst: [item for sublist in lst for item in sublist]\n\n\n## data_utils.py\n\ndef counts_from_parts(dataframe, columns: list, to_column_names: list = ['property', 'count']):\n\n    property = flatten(dataframe[columns].values.tolist())\n    property = [p for p in property if not pd.isna(p)]\n    counts = dict(Counter(property))\n    property_counts = [{to_column_names[0]: k, to_column_names[1]: v}\n                       for k, v in counts.items()]\n\n    return property_counts, counts\n\n\ndef counts_from_multiple_parts(dataframe, columns: list, condition_column, to_column_names: list = ['property', 'count']):\n\n    unique_cols_df = dataframe[columns]\n    unq_cols_set = [v.rstrip().lstrip() for v in list(\n        set(flatten(unique_cols_df.values.tolist()))) if not pd.isna(v)]\n    condition_unique_dict = {con: {unq: 0 for unq in unq_cols_set}\n                             for con in pd.unique(dataframe[condition_column]).tolist()}\n\n    for ix, row in dataframe.iterrows():\n\n        for c in columns:\n\n            if not pd.isna(row[c]):\n                condition_unique_dict[row[condition_column]\n                                      ][row[c].rstrip().lstrip()] += 1\n\n    return condition_unique_dict\n\n\n## graph_utils.py\n\nglobal global_color_codes, global_plotly_template\n\nglobal_color_codes = [\n    \"#00FFFF\", \"#F0FFFF\", \"#89CFF0\", \"#0000FF\", \"#7393B3\", \"#088F8F\",\n    \"#0096FF\", \"#5F9EA0\", \"#0047AB\", \"#6495ED\", \"#00FFFF\", \"#00008B\",\n    \"#6F8FAF\", \"#1434A4\", \"#7DF9FF\", \"#6082B6\", \"#00A36C\", \"#3F00FF\",\n    \"#5D3FD3\", \"#ADD8E6\", \"#191970\", \"#000080\", \"#1F51FF\", \"#A7C7E7\",\n    \"#CCCCFF\", \"#B6D0E2\", \"#96DED1\", \"#4169E1\", \"#0F52BA\", \"#9FE2BF\",\n    \"#87CEEB\", \"#4682B4\", \"#008080\", \"#40E0D0\", \"#0437F2\", \"#40B5AD\", \"#0818A8\"\n]\n\nglobal_plotly_template = \"plotly_dark\"\n\n\ndef draw_plotly_bar(dataframe, x_column_name, y_column_name, title, x_axis_title, y_axis_title, show_legend=False):\n    colors = global_color_codes\n    if len(dataframe) >= len(colors):\n        diff = len(dataframe) - len(colors) + 2\n        colors = colors + colors[:diff]\n    figure = px.bar(dataframe, x=x_column_name, y=y_column_name,\n                    color=colors[-len(dataframe):], template=global_plotly_template, title=title)\n    figure.update_layout({\n        \"yaxis\": {\n            \"title\": y_axis_title\n        },\n        \"xaxis\": {\n            \"title\": x_axis_title\n        },\n        \"showlegend\": show_legend\n    })\n\n    figure.show()\n\n\ndef draw_plotly_pie(dataframe, values_column: str, names_column: str, title: str, hover_info: list, x_axis_title: str, y_axis_title: str, col2labels=None):\n    colors = global_color_codes\n    if len(dataframe) >= len(colors):\n        diff = len(dataframe) - len(colors) + 2\n        colors = colors + colors[:diff]\n    figure = px.pie(\n        dataframe, values=values_column, names=names_column, title=title, hover_data=hover_info, labels=col2labels, template=global_plotly_template\n    )\n    figure.update_traces(textposition='inside', textinfo='percent+label')\n    figure.update_layout(\n        {\"yaxis\": {\"title\": y_axis_title}, \"xaxis\": {\"title\": x_axis_title}})\n    figure.show()\n\n\ndef draw_treemap(dataframe, count_column, labels_column, label_prefix=None):\n\n    counts = dataframe[count_column].values.tolist()\n    labels = [f\"{label_prefix if label_prefix else ''} {l}\" for l in dataframe[labels_column\n                                                                               ].values.tolist()]\n    color = global_color_codes[-len(dataframe):]\n    plt.figure(figsize=(20, 10))\n    squarify.plot(sizes=counts, label=labels, color=color, alpha=.9)\n    plt.axis(\"off\")\n    plt.show()\n\n\ndef draw_waffle(data_dict, title_label, font_size, face_color, text_color, is_percent=False):\n    if not is_percent:\n        totals = sum([v for k, v in data_dict.items()])\n        data_dict = {k: round(math.ceil((v\/totals)*100))\n                     for k, v in data_dict.items()}\n    fig = plt.figure(FigureClass=Waffle, rows=5, values=data_dict, colors=global_color_codes[:len(data_dict)], title={\n        \"label\": title_label,\n        \"loc\": \"left\"\n    }, legend={\"loc\": \"upper left\", \"bbox_to_anchor\": (1, 1)}, figsize=(20, 10), starting_location=\"NW\", block_arranging_style=\"snake\")\n\n    fig.set_facecolor(face_color)\n\n    plt.rcParams['text.color'] = text_color\n    plt.rcParams['font.size'] = font_size\n\n    plt.show()\n\n\ndef draw_donut(dataframe, count_column, names_column, face_color, font_size, text_color, is_percent=False):\n\n    names = dataframe[names_column].values.tolist()\n    sizes = dataframe[count_column].values.tolist()\n    if is_percent:\n        names = [f\"{names[ix]} - {sizes[ix]}%\" for ix in range(len(names))]\n    else:\n        names = [\n            f\"{names[ix]} - {round(math.ceil((sizes[ix]\/sum(sizes)) * 100))}%\" for ix in range(len(names))]\n\n    fig = plt.figure()\n    fig.patch.set_facecolor(face_color)\n\n    plt.rcParams['text.color'] = text_color\n    plt.rcParams['font.size'] = font_size\n\n    circle = plt.Circle((0, 0), 1, color=face_color)\n\n    plt.pie(sizes, labels=names, radius=4,\n            colors=global_color_codes[len(sizes):])\n    p = plt.gcf()\n    p.gca().add_artist(circle)\n    plt.show()\n\n    \ndef draw_plotly_stack_chart(data_dict, title):\n\n    graph_df = pd.DataFrame.from_dict(data_dict)\n    graph_df[\"name\"] = graph_df.index.tolist()\n\n    figure = px.bar(graph_df, x=\"name\", y=[\n                    c for c in graph_df.columns if not c == \"name\"], template=global_plotly_template, title=title)\n    figure.show()\n\n\ndef draw_plotly_group_chart(data_dict, title):\n\n    figure = go.Figure(data=[\n        go.Bar(name=k, x=list(_v.keys()), y=list(_v.values()))\n        for k, _v in data_dict.items()\n    ])\n    figure.update_layout(\n        barmode='group', template=global_plotly_template, title=title)\n    figure.show()\n","e3bb4844":"csv_data = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")","7d0c71bf":"question2text = csv_data.iloc[0].to_dict()\ntext2question = {v:k for k,v in question2text.items()}\n\ncsv_data.drop(0, axis = 0, inplace = True)\ncsv_data.reset_index(inplace = True)","219f4bc4":"csv_data.head()","2fbe10b0":"countries_2_code = {k.name:k.alpha_3 for k in pycountry.countries}\ncountries_2_code[\"United Kingdom of Great Britain and Northern Ireland\"] = \"GBR\"\ncountries_2_code[\"South Korea\"] = \"PRK\"\ncountries_2_code[\"Taiwan\"] = \"TWN\"\ncountries_2_code[\"Iran, Islamic Republic of...\"] = \"IRN\"\ncountries_2_code[\"Hong Kong (S.A.R.)\"] = \"HKG\"\ncountries_2_code[\"Czech Republic\"] = \"CZE\"\n# len(countries_2_code)","2217465d":"age_counts, counts = counts_from_parts(csv_data, [\"Q1\"], ['age_range', 'count'])\nage_df = pd.DataFrame(age_counts, index = [i for i in range(len(age_counts))])\nage_df.sort_values(by=['count'], inplace = True, ascending=False)\ndraw_plotly_bar(dataframe=age_df,\n                x_column_name=\"age_range\",\n                y_column_name=\"count\",\n                title=\"Survey Takers Age Distribution\",\n                x_axis_title=\"Age Range\",\n                y_axis_title=\"Count\")","268c0f53":"draw_plotly_pie(dataframe=age_df,\n                values_column=\"count\",\n                names_column=\"age_range\",\n                title=\"Survey Takers Age Distribution\",\n                hover_info=['count'],\n                x_axis_title=\"Age Range\",\n                y_axis_title=\"Count\",\n                col2labels={\n                    \"count\": \"Count\",\n                    \"age_range\": \"Age Range\"\n                })","216bfb88":"draw_treemap(age_df, count_column=\"count\", labels_column=\"age_range\", label_prefix=\"Age\")","b368f604":"country_counts, counts = counts_from_parts(csv_data, columns = [\"Q3\"], to_column_names=['country', 'counts'])\ncountry_counts_df = pd.DataFrame(country_counts, index = [i for i in range(len(country_counts))])\ncountry_counts_df.sort_values(by = ['counts'], inplace = True, ascending=False)\n\ndraw_plotly_bar(country_counts_df, \"country\", \"counts\", \"Where are the Survey Takers from? \ud83d\uddfa\ufe0f\", x_axis_title=\"Country\", y_axis_title=\"Count\")","a82d92ac":"draw_plotly_pie(\n    dataframe = country_counts_df,\n    values_column=\"counts\",\n    names_column=\"country\",\n    title=\"Where are the Survey Takers from? \ud83d\uddfa\ufe0f\",\n    hover_info=['counts'],\n    x_axis_title=\"Country\",\n    y_axis_title=\"Count\",\n    col2labels={\"counts\": \"Count\"}\n)","e5fa5eb9":"draw_plotly_pie(\n    dataframe = country_counts_df.head(),\n    values_column=\"counts\",\n    names_column=\"country\",\n    title=\"Where are the Survey Takers from? \ud83d\uddfa\ufe0f\",\n    hover_info=['counts'],\n    x_axis_title=\"Country\",\n    y_axis_title=\"Count\",\n    col2labels={\"counts\": \"Count\"}\n)","0bd07d35":"country_counts_df.iloc[1].country = \"United States\"\ncountry_counts_df.at[1, 'country'] = \"United States\"\ncountry_counts_df.country[1] = \"United States\"\ncountry_counts_df.country[6] = \"Russia\"\ncountries_2_code[\"United States of America\"] = \"USA\"\ncountries_2_code[\"Russia\"] = \"RUS\"\ncountry_counts_df[\"codes\"] = [\n    countries_2_code[c]\n    if not c in [\"Other\", \"I do not wish to disclose my location\"] else None\n    for c in country_counts_df.country.values.tolist()\n]\ncountry_counts_df.dropna(inplace=True)\ncountry_counts_df.reset_index(inplace=True)\nfigure = go.Figure(data=go.Choropleth(\n    locations=country_counts_df[\"codes\"],\n    z=country_counts_df[\"counts\"],\n    text=country_counts_df[\"country\"],\n    colorscale=\"Greens\",\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color=\"darkgray\",\n    marker_line_width=0.5,\n    colorbar_title=\"Survey Taker Counts\",\n))\n\nfigure.update_layout(template=global_plotly_template,\n                     title_text=\"Where are the Survey Takers from? \ud83d\uddfa\ufe0f\",\n                     geo=dict(showframe=False,\n                              showcoastlines=False,\n                              projection_type='equirectangular'))\n\nfigure.show()","a4203988":"sex_ratio_counts, counts = counts_from_parts(csv_data, to_column_names=['gender', 'counts'], columns = ['Q2'])\nsex_ratio_df = pd.DataFrame(sex_ratio_counts, index = [i for i in range(len(sex_ratio_counts))])\nsex_ratio_df.sort_values(by=['counts'], inplace = True, ascending=False)\nsex_ratio_df.reset_index(inplace = True)\ndraw_plotly_bar(\n    dataframe=sex_ratio_df,\n    x_column_name='gender',\n    y_column_name='counts', \n    title = \"Sex Ratio of Survey Takers \ud83d\udeb9 \ud83d\udeba \ud83d\ude45\u200d\u2642\ufe0f \ud83d\ude45\u200d\u2640\ufe0f\", x_axis_title=\"Gender\", y_axis_title=\"Count\"\n)","afc036e5":"draw_waffle(\n    data_dict=counts, title_label=\"Sex Ratio of Survey Takers\", font_size = 22, face_color = \"black\",  text_color=\"white\"\n)","66b00794":"languages_used_counts, counts = counts_from_parts(csv_data, columns=[\n        \"Q7_Part_1\",\n        \"Q7_Part_2\",\n        \"Q7_Part_3\",\n        \"Q7_Part_4\",\n        \"Q7_Part_5\",\n        \"Q7_Part_6\",\n        \"Q7_Part_7\",\n        \"Q7_Part_8\",\n        \"Q7_Part_9\",\n        \"Q7_Part_10\",\n        \"Q7_Part_11\",\n        \"Q7_Part_12\",\n    ], to_column_names=[\"language\", \"counts\"])\nlanguages_counts_df = pd.DataFrame(languages_used_counts, index = [i for i in range(len(languages_used_counts))])\nlanguages_counts_df.sort_values(by=['counts'], inplace = True, ascending=False)\n\ndraw_plotly_bar(dataframe = languages_counts_df, x_column_name=\"language\", y_column_name=\"counts\", title = \"Popular Programming Languages\", x_axis_title=\"Programming Language\", y_axis_title=\"Count\"\n)","df945e85":"draw_treemap(languages_counts_df, \"counts\", \"language\")","c6837f53":"draw_plotly_pie(languages_counts_df, values_column=\"counts\", names_column=\"language\", title = \"Popular Programming Languages\", hover_info=['counts'], x_axis_title=\"Programming Language\", y_axis_title=\"Count\", col2labels={\"counts\": \"Count\"})","a74c5bd7":"ides_used_counts, counts = counts_from_parts(csv_data, [\n    \"Q9_Part_1\", \"Q9_Part_2\", \"Q9_Part_3\", \"Q9_Part_4\", \"Q9_Part_5\",\n    \"Q9_Part_6\", \"Q9_Part_7\", \"Q9_Part_8\", \"Q9_Part_9\", \"Q9_Part_10\",\n    \"Q9_Part_11\", \"Q9_Part_12\"\n], ['ide', 'counts'])\nides_counts_df = pd.DataFrame(ides_used_counts, index = [i for i in range(len(ides_used_counts))])\nides_counts_df.sort_values(by=['counts'], inplace = True, ascending=False)\n\ndraw_donut(ides_counts_df, \"counts\", \"ide\", \"black\", 22, \"white\")","ad223337":"recommended_used_languages, counts = counts_from_parts(csv_data, [\"Q8\"], ['language', 'counts'])\nrecommended_language_df = pd.DataFrame(recommended_used_languages, index = [i for i in range(len(recommended_used_languages))])\nrecommended_language_df.sort_values(by=['counts'], inplace = True, ascending=False)\ndraw_waffle(counts, title_label=\"Recommended Programming Language for Beginners\", font_size=22, face_color=\"black\", text_color=\"white\")","2113345b":"draw_plotly_pie(recommended_language_df, \"counts\", \"language\", title = \"Recommended Programming Languages for Beginners\", hover_info=['counts'], x_axis_title=\"Programming Language\", y_axis_title=\"Count\", col2labels={\"counts\": \"Count\"})","5a7c57b7":"specialized_hardware, counts = counts_from_parts(csv_data, [\n    \"Q12_Part_1\", \"Q12_Part_2\", \"Q12_Part_3\", \"Q12_Part_4\", \"Q12_Part_5\",\n    \"Q12_OTHER\"\n], [\"hardware\", 'counts'])\nspecialized_hardware_df = pd.DataFrame(\n    specialized_hardware, index=[i for i in range(len(specialized_hardware))])\nspecialized_hardware_df.sort_values(by=['counts'],\n                                    inplace=True,\n                                    ascending=False)\ndraw_plotly_bar(specialized_hardware_df, 'hardware', 'counts', \"Popular Specialized Hardware \ud83d\udcbb\", \"Hardware Name\", \"Count\")","280b75ee":"draw_treemap(specialized_hardware_df, 'counts', 'hardware')","098acc39":"hosted_notebook_counts, counts = counts_from_parts(csv_data, [\n    \"Q10_Part_1\", \"Q10_Part_2\", \"Q10_Part_3\", \"Q10_Part_4\", \"Q10_Part_5\",\n    \"Q10_Part_6\", \"Q10_Part_7\", \"Q10_Part_8\", \"Q10_Part_9\", \"Q10_Part_10\",\n    \"Q10_Part_11\", \"Q10_Part_12\", \"Q10_Part_13\", \"Q10_Part_14\", \"Q10_Part_15\",\n    \"Q10_Part_16\", \"Q10_OTHER\"\n], ['hosted_notebook', 'count'])\n\nhosted_notebook_df = pd.DataFrame(\n    hosted_notebook_counts,\n    index=[i for i in range(len(hosted_notebook_counts))])\nhosted_notebook_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_bar(hosted_notebook_df, 'count', 'hosted_notebook', 'Most Popular Hosted Notebook Platforms', 'Count', 'Hosted Platform')","766ed884":"draw_donut(hosted_notebook_df.head(10), 'count', 'hosted_notebook', font_size=12, face_color=\"black\", text_color=\"white\")","352042c0":"vis_library_data, counts = counts_from_parts(csv_data, [\n    \"Q14_Part_1\", \"Q14_Part_2\", \"Q14_Part_3\", \"Q14_Part_4\", \"Q14_Part_5\",\n    \"Q14_Part_6\", \"Q14_Part_7\", \"Q14_Part_8\", \"Q14_Part_9\", \"Q14_Part_10\",\n    \"Q14_Part_11\", \"Q14_OTHER\"\n], ['library', 'count'])\nvis_library_df = pd.DataFrame(vis_library_data,\n                              index=[i for i in range(len(vis_library_data))])\nvis_library_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_pie(vis_library_df, 'count', 'library', 'Most Popular Visualization Libraries', ['count'], 'Library', 'Count', {\"count\": \"Count\"})","2de3fd3e":"ml_framework_counts, counts = counts_from_parts(csv_data, [\n    \"Q16_Part_1\", \"Q16_Part_2\", \"Q16_Part_3\", \"Q16_Part_4\", \"Q16_Part_5\",\n    \"Q16_Part_6\", \"Q16_Part_7\", \"Q16_Part_8\", \"Q16_Part_9\", \"Q16_Part_10\",\n    \"Q16_Part_11\", \"Q16_Part_12\", \"Q16_Part_13\", \"Q16_Part_14\", \"Q16_Part_15\",\n    \"Q16_Part_16\", \"Q16_Part_17\", \"Q16_OTHER\"\n], [\"ml_framework\", 'count'])\nml_framework_df = pd.DataFrame(ml_framework_counts, index = [i for i in range(len(ml_framework_counts))])\nml_framework_df.sort_values(by=['count'], inplace = True, ascending = False)\ndraw_waffle(counts,\n            \"Popular ML Frameworks\",\n            font_size=22,\n            face_color=\"black\",\n            text_color=\"white\")","fb4941b5":"draw_plotly_pie(ml_framework_df.head(10), 'count', 'ml_framework',\n                'Top 10 most popular ML Frameworks', [\"count\"],\n                \"Framework Name\", \"Count\", {\"count\": \"Count\"})","7f50fbb1":"exp_data, counts = counts_from_parts(csv_data, [\"Q15\"], [\"exp\", \"count\"])\nexp_df = pd.DataFrame(exp_data, index=[i for i in range(len(exp_data))])\nexp_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_bar(exp_df, \"count\", \"exp\", 'Years of experiance with ML', 'Count', 'Experience')","e5dd06ed":"mla_data, counts = counts_from_parts(csv_data, [\"Q20\"], [\"mla\", \"count\"])\nmla_df = pd.DataFrame(mla_data, index=[i for i in range(len(mla_data))])\nmla_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_bar(mla_df, 'mla', 'count', \"Applicability of ML Algorithms in different Industries\", 'Industry', 'Count')","937c27f1":"draw_plotly_pie(mla_df.head(10), 'count', 'mla',\n                'Top 10 Industries leveraging ML Algorithms',\n                ['count'], 'Industry', 'Count', {\"count\": \"Count\"})","ef853502":"dst_data, counts = counts_from_parts(csv_data, ['Q21'], ['dst', 'count'])\ndst_df = pd.DataFrame(dst_data, index = [i for i in range(len(dst_data))])\ndst_df.sort_values(by=['count'], inplace = True, ascending = False)\ndraw_waffle(counts, \"Size of Data Science Teams\", font_size=22, face_color=\"black\", text_color=\"white\")","3fad6b1c":"draw_donut(dst_df, \"count\", \"dst\", font_size=22, face_color=\"black\", text_color=\"white\")","3debda93":"amt_data, counts = counts_from_parts(csv_data, ['Q26'], ['amt', 'count'])\namt_data = [{\n    \"amt\":\n    \"\".join([\n        a for a in re.sub(\"-\", \" to \", re.sub(\"$\", \" \", a['amt'])) + \" USD \"\n        if not a == \"$\"\n    ]),\n    \"count\":\n    a['count']\n} for a in amt_data]\namt_df = pd.DataFrame(amt_data, index=[i for i in range(len(amt_data))])\namt_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_bar(amt_df, \"amt\", \"count\", \"Amount Spent on ML\/Cloud Computing Services in last 5 years (\ud83d\udcb5)\", \"Amount\", \"Count\")","b8c9bfe3":"draw_waffle(counts,\n            \"Amount Spent on ML\/Cloud Computing Services in last 5 years ($)\",\n            font_size=22,\n            face_color=\"black\",\n            text_color=\"white\")","d1307d7f":"ccp_data, counts = counts_from_parts(csv_data, [\n    'Q27_A_Part_1', 'Q27_A_Part_2', 'Q27_A_Part_3', 'Q27_A_Part_4',\n    'Q27_A_Part_5', 'Q27_A_Part_6', 'Q27_A_Part_7', 'Q27_A_Part_8',\n    'Q27_A_Part_9', 'Q27_A_Part_10', 'Q27_A_Part_11', 'Q27_A_OTHER'\n], ['platforms', 'count'])\nccp_df = pd.DataFrame(ccp_data, index=[i for i in range(len(ccp_data))])\nccp_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_pie(ccp_df, 'count', 'platforms',\n                \"Popular Cloud Computing Platforms\", ['count'], \"Platforms\",\n                \"Count\", {\"count\": \"Count\"})","aa0bf778":"ccp_data, counts = counts_from_parts(csv_data, [\n    \"Q28\"\n], ['platforms', 'count'])\nccp_df = pd.DataFrame(ccp_data, index=[i for i in range(len(ccp_data))])\nccp_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_donut(ccp_df, \"count\", \"platforms\", font_size=12, face_color=\"black\", text_color=\"white\")","e314cee3":"draw_waffle(counts,\n            \"Popularity of Cloud Platform based on best Developer Experience\",\n            font_size=22,\n            face_color=\"black\",\n            text_color=\"white\")","bc9185fe":"ccp_data, counts = counts_from_parts(csv_data, [\n    \"Q29_A_Part_1\", \"Q29_A_Part_2\", \"Q29_A_Part_3\", \"Q29_A_Part_4\",\n    \"Q29_A_OTHER\"\n], ['platforms', 'count'])\nccp_df = pd.DataFrame(ccp_data, index=[i for i in range(len(ccp_data))])\nccp_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_bar(ccp_df, \"count\", \"platforms\", \"Most used Cloud Computing Products on a day-to-day basis\", \"Count\", \"Product\")","3f406241":"draw_treemap(ccp_df, \"count\", \"platforms\")","b924557e":"csp_data, counts = counts_from_parts(csv_data, [\n    \"Q30_A_Part_1\", \"Q30_A_Part_2\", \"Q30_A_Part_3\", \"Q30_A_Part_4\",\n    \"Q30_A_Part_5\", \"Q30_A_Part_6\", \"Q30_A_Part_7\", \"Q30_A_OTHER\"\n], ['storage', 'count'])\ncsp_df = pd.DataFrame(csp_data, index=[i for i in range(len(csp_data))])\ncsp_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_donut(csp_df, 'count', 'storage', font_size=22, face_color=\"black\", text_color=\"white\")","42a69a9d":"draw_waffle(counts, \"Popular Data Storage Products\", font_size=22, face_color=\"black\", text_color=\"white\")","230b5c0b":"mml_data, counts = counts_from_parts(csv_data, [\n    \"Q31_A_Part_1\", \"Q31_A_Part_2\", \"Q31_A_Part_3\", \"Q31_A_Part_4\",\n    \"Q31_A_Part_5\", \"Q31_A_Part_6\", \"Q31_A_Part_7\", \"Q31_A_Part_8\",\n    \"Q31_A_Part_9\", \"Q31_A_OTHER\"\n], ['mml', 'count'])\nmml_df = pd.DataFrame(mml_data, index=[i for i in range(len(mml_data))])\nmml_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_bar(mml_df, \"mml\", \"count\", \"Popular Managed ML Products\", \"Managed ML Product\", \"Count\")","d8c48b31":"bdp_data, counts = counts_from_parts(csv_data, [\n    \"Q32_A_Part_1\", \"Q32_A_Part_2\", \"Q32_A_Part_3\", \"Q32_A_Part_4\",\n    \"Q32_A_Part_5\", \"Q32_A_Part_6\", \"Q32_A_Part_7\", \"Q32_A_Part_8\",\n    \"Q32_A_Part_9\", \"Q32_A_Part_10\", \"Q32_A_Part_11\", \"Q32_A_Part_12\",\n    \"Q32_A_Part_13\", \"Q32_A_Part_14\", \"Q32_A_Part_15\", \"Q32_A_Part_16\",\n    \"Q32_A_Part_17\", \"Q32_A_Part_18\", \"Q32_A_Part_19\", \"Q32_A_Part_20\",\n    \"Q32_A_OTHER\"\n], ['bdp', 'count'])\nbdp_df = pd.DataFrame(bdp_data, index=[i for i in range(len(bdp_data))])\nbdp_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_bar(bdp_df, \"count\", \"bdp\", \"Popular Big Data products\", \"Count\",\n                \"Big Data Product\")","299dc942":"bit_data, counts = counts_from_parts(csv_data, [\n    \"Q34_A_Part_1\", \"Q34_A_Part_2\", \"Q34_A_Part_3\", \"Q34_A_Part_4\",\n    \"Q34_A_Part_5\", \"Q34_A_Part_6\", \"Q34_A_Part_7\", \"Q34_A_Part_8\",\n    \"Q34_A_Part_9\", \"Q34_A_Part_10\", \"Q34_A_Part_11\", \"Q34_A_Part_12\",\n    \"Q34_A_Part_13\", \"Q34_A_Part_14\", \"Q34_A_Part_15\", \"Q34_A_Part_16\",\n    \"Q34_A_OTHER\"\n], ['bit', 'count'])\nbit_df = pd.DataFrame(bit_data, index=[i for i in range(len(bit_data))])\nbit_df.sort_values(by=['count'], inplace=True, ascending=False)\ndraw_plotly_bar(bit_df, \"bit\", \"count\", \"Popular BI Tools\", \"BI Tools\",\n                \"Count\")","7ff8ff7c":"draw_plotly_pie(bit_df.head(10), \"count\", \"bit\", \"Top 10 BI Tools\", [\"count\"],\n                \"BI Tools\", \"Count\", {\"count\": \"Count\"})","45b07f33":"# 8. Popular Specialized Hardware","5bd87910":"# 21.  Popular Big Data Products (relational dbs, data warehouses, data lakes, or similar)","b0753c3a":"# 11.  Popular Machine Learning Frameworks","1a046310":"# 4. Sex Ratio of the Survey Takers \ud83d\udeb9 \ud83d\udeba \ud83d\ude45\u200d\u2642\ufe0f \ud83d\ude45\u200d\u2640\ufe0f","1abeb870":"# 13.  Machine Learning Applicability in different Industries","c53ee9c0":"#  7. Recommended Programming Languages for Beginners ","8fddf269":"# 12.  Years of experience with Machine Learning","710141d4":"# 19.  Popular Data Storage Products","c8b66738":"# 17.  Popularity of Cloud Platform based on best Developer Experience","209c87b7":"# 14.  Size of Data Science Teams","12614115":"# 10.  Most popular Visualization Libraries","d1dc63f2":"# 2. Age Distribution among Survey Takers","3d08e6d2":"# 5. Programming Language Popularity \ud83d\udcbb","896d5af1":"# 3. Where are the Survey Takers from \ud83d\uddfa\ufe0f?","bc7a1fd0":"# 16. Popular Cloud Computing Platforms","193314b4":"# 15. Money Spent on ML and\/or Cloud Computing service in $USD in the last 5 years","5c848e29":"# 6. Popular IDEs","15c9121b":"# 9. Popular Hosted Notebooks","89d03533":"# 1. Imports, utils and data","d1551d5a":"# 18.  Most used Cloud Computing Products regularly","ce0548b4":"# 20.  Popular Managed Machine Learning Products","8aa695f1":"# 22. Popular Business Intelligence Tools"}}