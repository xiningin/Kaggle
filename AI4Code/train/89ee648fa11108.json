{"cell_type":{"b0b3f531":"code","3826dbd8":"code","dc4ad964":"code","b0513672":"code","eaa40472":"code","579613e3":"code","72440881":"code","de08474a":"code","9d681781":"code","0b6bfcff":"code","8763df0d":"code","1947c510":"code","c58930c2":"code","f53075e3":"code","64484b25":"code","bba3d63e":"code","5c2a145b":"code","9db2a8c3":"code","b5629146":"code","cc940129":"code","3bee4450":"code","fd191f69":"code","47c61c96":"code","4d70362a":"code","24ff0927":"code","81bce5f3":"code","5290033f":"code","4d2ccb5e":"code","3e698cca":"code","051276cd":"code","5b05354f":"code","273e99f5":"code","fdc4203b":"code","92677454":"code","07263862":"code","32ce8377":"code","f271cd37":"code","cb136f7d":"code","baa5493c":"code","c6ab8db2":"code","5773153a":"code","6d8d7f26":"code","79d4bc2d":"code","76461670":"code","73c07fe0":"code","1a2f6744":"code","ebbdbabd":"code","1fdac335":"code","61c90468":"code","0948dfaa":"code","25d6e945":"code","a29fae83":"code","6b92e1e7":"code","833e135d":"code","7cd0dc69":"code","70110838":"code","b89e4a13":"code","9a35558f":"code","77466690":"code","b5ae4071":"code","e689f09a":"code","52c54fc5":"code","bba55a2c":"code","856caef1":"code","f69ff94f":"code","b800fc8b":"code","80ec1583":"code","4f0b6700":"code","fedad8ce":"code","ec0f2117":"code","822bfc7f":"code","be11ed2a":"code","bd3c10bb":"code","c9757c5f":"code","50b7df63":"code","52f9be94":"markdown","eb043632":"markdown","0af9ac9c":"markdown","3baf08b8":"markdown","0e625890":"markdown","dd6d9c2a":"markdown","eacf6efc":"markdown","b130fc72":"markdown"},"source":{"b0b3f531":"import pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%config IPCompleter.greedy=True\ntrain_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain_test_data = [train_data, test_data]","3826dbd8":"train_data.info()","dc4ad964":"#finding no of null values and the column name which contains null value\nprint(\"no of null values in each column of train set is\\n\",train_data.isna().sum())\nnan_val= []\nfor i in train_data.columns:\n    if(train_data[i].isna().sum() > 1000):\n        nan_val.append(i)\nprint(\"\\nno of columns with null values are\\n\",len(nan_val))      ","b0513672":"print(\"no of null values in each column of train set is\\n\",train_data.isna().sum())\nnan_val= []\nfor i in test_data.columns:\n    if(test_data[i].isna().sum() > 1000):\n        nan_val.append(i)\nprint(\"\\nno of columns with null values are\\n\",len(nan_val))   ","eaa40472":"nan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum() >1000):\n        nan_val1.append(i)\n#print(\"\\nno of columns with null values are\\n\",len(nan_val1))    \nprint(nan_val1)","579613e3":"train_data.drop(columns = ['Alley', 'PoolQC', 'Fence', 'MiscFeature'],inplace = True)\ntest_data.drop(columns = ['Alley', 'PoolQC', 'Fence', 'MiscFeature'],inplace = True)","72440881":"nan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<500 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","de08474a":"#for dataset in train_test_data:\n#print(test_data['MasVnrType'].mode(),'\\n')\n#print(train_data.groupby('MasVnrType')['MasVnrArea'].mean())\n#print(test_data.groupby('MasVnrType')['MasVnrArea'].mean())\ntrain_data['MasVnrType'].fillna(\"None\",inplace = True)\ntest_data['MasVnrType'].fillna(\"None\",inplace = True)","9d681781":"nan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","0b6bfcff":"train_data['MasVnrArea'].fillna(train_data.groupby('MasVnrType')['MasVnrArea'].transform('mean'),inplace = True)\ntest_data['MasVnrArea'].fillna(train_data.groupby('MasVnrType')['MasVnrArea'].transform('mean'),inplace = True)","8763df0d":"nan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","1947c510":"#quality = train_data[['PavedDrive','SalePrice']]\n#quality.groupby('PavedDrive').mean().plot.bar()\n#print(quality.groupby('PavedDrive').mean())","c58930c2":"re = train_data.corr()\nre['LotFrontage']","f53075e3":"A=train_data.LotFrontage\nAnan=A[~np.isnan(A)] # Remove the NaNs\n\nsns.distplot(Anan,hist=True,bins = 10)","64484b25":"train_data['LotFrontage'].fillna(train_data.LotFrontage.mean(),inplace = True)\ntest_data['LotFrontage'].fillna(train_data.LotFrontage.mean(),inplace = True)","bba3d63e":"print(train_data['LotFrontage'].isna().sum())\nprint(test_data['LotFrontage'].isna().sum())","5c2a145b":"nan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","9db2a8c3":"print(train_data['BsmtQual'].value_counts())\nprint(test_data['BsmtQual'].value_counts())\ntrain_data.BsmtQual.mode()[0]","b5629146":"train_data['BsmtQual'].fillna('None',inplace = True)\ntest_data['BsmtQual'].fillna('None',inplace = True)","cc940129":"nan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","3bee4450":"print(train_data['BsmtCond'].value_counts())\nprint(test_data['BsmtCond'].value_counts())\ntrain_data['BsmtCond'].fillna(\"None\",inplace = True)\ntest_data['BsmtCond'].fillna(\"None\",inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","fd191f69":"print(train_data['BsmtExposure'].value_counts())\nprint(test_data['BsmtExposure'].value_counts())\ntrain_data['BsmtExposure'].fillna(\"None\",inplace = True)\ntest_data['BsmtExposure'].fillna(\"None\",inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","47c61c96":"print(train_data['BsmtFinType2'].value_counts())\nprint(test_data['BsmtFinType2'].value_counts())\ntrain_data['BsmtFinType2'].fillna(\"None\",inplace = True)\ntest_data['BsmtFinType2'].fillna(\"None\",inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","4d70362a":"print(train_data['Electrical'].value_counts())\nprint(test_data['Electrical'].value_counts())\ntrain_data['Electrical'].fillna(train_data['Electrical'].mode()[0],inplace = True)\ntest_data['Electrical'].fillna(test_data['Electrical'].mode()[0],inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","24ff0927":"print(train_data['GarageType'].value_counts())\nprint(test_data['GarageType'].value_counts())\ntrain_data['GarageType'].fillna(\"None\",inplace = True)\ntest_data['GarageType'].fillna(\"None\",inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","81bce5f3":"print(train_data['GarageYrBlt'].value_counts())\nprint(test_data['GarageYrBlt'].value_counts())\ntrain_data['GarageYrBlt'].fillna(0,inplace = True)\ntest_data['GarageYrBlt'].fillna(0,inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","5290033f":"print(train_data['GarageFinish'].value_counts())\nprint(test_data['GarageFinish'].value_counts())\ntrain_data['GarageFinish'].fillna(\"None\",inplace = True)\ntest_data['GarageFinish'].fillna(\"None\",inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","4d2ccb5e":"print(train_data['GarageQual'].value_counts())\nprint(test_data['GarageQual'].value_counts())\ntrain_data['GarageQual'].fillna(\"None\",inplace = True)\ntest_data['GarageQual'].fillna(\"None\",inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","3e698cca":"print(train_data['GarageCond'].value_counts())\nprint(test_data['GarageCond'].value_counts())\ntrain_data['GarageCond'].fillna(\"None\",inplace = True)\ntest_data['GarageCond'].fillna(\"None\",inplace = True)\nnan_val1= []\nfor i in test_data.columns:\n    if(train_data[i].isna().sum()<300 and train_data[i].isna().sum()!=0 ):\n        nan_val1.append(i)\nprint(nan_val1)","051276cd":"print(train_data['BsmtFinType1'].value_counts())\nprint(test_data['BsmtFinType1'].value_counts())\ntrain_data['BsmtFinType1'].fillna(\"None\",inplace = True)\ntest_data['BsmtFinType1'].fillna(\"None\",inplace = True)\nnan_val1= []\n","5b05354f":"for i in test_data.columns:\n    if(train_data[i].isna().sum()>300):\n        nan_val1.append(i)\nprint(nan_val1)","273e99f5":"train_data['FireplaceQu'].fillna(\"None\",inplace = True)\ntest_data['FireplaceQu'].fillna(\"None\",inplace = True)","fdc4203b":"nan_val1 = []\nfor i in train_data.columns:\n    if(train_data[i].isna().sum()>50):\n        nan_val1.append(i)\nprint(nan_val1)","92677454":"import seaborn as sns","07263862":"nan_val1 = []\nfor i in test_data.columns:\n    if(test_data[i].isnull().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","32ce8377":"re['GarageCars']","f271cd37":"train_data['GarageArea'].fillna(0,inplace = True)\ntest_data['GarageArea'].fillna(0,inplace = True)","cb136f7d":"a=(test_data.groupby('GarageArea')['GarageCars'].min())\nb=(test_data.groupby('GarageArea')['GarageCars'].max())\nc=(test_data.groupby('GarageArea')['GarageCars'].mean())\nprint(a,b,c)\n#sns.distplot(test_data['GarageArea'])","baa5493c":"test_data['GarageCars'].fillna(test_data.groupby('GarageArea')['GarageCars'].transform('mean'),inplace = True)","c6ab8db2":"nan_val1 = []\nfor i in test_data.columns:\n    if(test_data[i].isna().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","5773153a":"test_data.Exterior1st.fillna(test_data.Exterior1st.mode()[0],inplace = True)\n","6d8d7f26":"test_data.Exterior2nd.fillna(test_data.Exterior2nd.mode()[0],inplace = True)\nnan_val1 = []\nfor i in test_data.columns:\n    if(test_data[i].isna().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","79d4bc2d":"(test_data.BsmtFinSF1.fillna(0,inplace = True))\n(test_data.BsmtFinSF2.fillna(0,inplace = True))","76461670":"nan_val1 = []\nfor i in test_data.columns:\n    if(test_data[i].isna().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","73c07fe0":"test_data.KitchenQual.fillna(test_data.KitchenQual.mode()[0],inplace = True)\ntest_data.KitchenQual.value_counts()","1a2f6744":"test_data.MSZoning.fillna(test_data.MSZoning.mode()[0],inplace = True)\ntest_data.MSZoning.isna().sum()","ebbdbabd":"nan_val1 = []\nfor i in test_data.columns:\n    if(test_data[i].isna().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","1fdac335":"test_data.Utilities.fillna(\"AllPub\",inplace = True)\nnan_val1 = []\nfor i in test_data.columns:\n    if(test_data[i].isna().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","61c90468":"test_data.TotalBsmtSF.fillna(test_data.TotalBsmtSF.mean(),inplace = True)\ntest_data.Functional.fillna(\"Typ\",inplace = True)\nnan_val1 = []\nfor i in test_data.columns:\n    if(test_data[i].isna().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","0948dfaa":"print(test_data.BsmtUnfSF.mean())\ntest_data.BsmtUnfSF.fillna(0,inplace= True)\nnan_val1 = []\nfor i in test_data.columns:\n    if(test_data[i].isna().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","25d6e945":"test_data.BsmtHalfBath.fillna(0.0,inplace = True)\ntest_data.BsmtFullBath.fillna(0.0,inplace=True)\ntest_data.SaleType.fillna(test_data.SaleType.mode()[0],inplace=True)","a29fae83":"nan_val1 = []\nfor i in train_data.columns:\n    if(train_data[i].isna().sum()>0):\n        nan_val1.append(i)\nprint(nan_val1)","6b92e1e7":"colsn=[]  \nfor i in test_data.columns:\n    if(test_data[i].dtype == 'object'):\n        colsn.append(i)\nlen(colsn)\n","833e135d":"test_data.shape","7cd0dc69":"train_data.shape","70110838":"from sklearn import preprocessing","b89e4a13":"train_copy = train_data.copy()\ntest_copy = test_data.copy()\nenc = pd.concat([train_copy,test_copy],sort = False)\nenc.shape","9a35558f":"\"\"\"l = ['a','b','s','a']\nle = preprocessing.LabelEncoder()\nle.fit(l)\nlist(le.transform(l))\nl = []\nfor i in test_data['SaleType']:\n    l.append(i)\ny = list(le.fit_transform(l))\"\"\"","77466690":"le = preprocessing.LabelEncoder()\nfor i in colsn:\n    v =[]\n    for j in enc[i]:\n        v.append(j)\n    \n    enc[i].replace(v,list(le.fit_transform(v)),inplace = True)","b5ae4071":"enc.dtypes","e689f09a":"train_df = enc.iloc[:1460, :]\ntest_df = enc.iloc[1460:,:]","52c54fc5":"train_df.shape","bba55a2c":"test_df.drop('SalePrice',axis = 1,inplace = True)","856caef1":"test_df.isna().sum()","f69ff94f":"from sklearn.ensemble import RandomForestRegressor\nimport xgboost\nfrom sklearn import linear_model\nxtrain = train_df.drop(['SalePrice'],axis = 1)\nytrain = train_df['SalePrice']","b800fc8b":"rfc = RandomForestRegressor(n_estimators=900)\nrfc.fit(xtrain,ytrain)\ny_pred = rfc.predict(test_df)\ny_pred","80ec1583":"import xgboost\nregressor=xgboost.XGBRegressor()\n\n\nfrom sklearn.model_selection import RandomizedSearchCV\n\n\nbooster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)\nrandom_cv.fit(xtrain,ytrain)","4f0b6700":"#from sklearn.model_selection import GridSearchCV\n#grid_cv = GridSearchCV(estimator=regressor,\n#            param_grid=hyperparameter_grid,\n#            cv=2, \n#            scoring = 'neg_mean_absolute_error',n_jobs = 100,\n#            verbose = 5, \n#            return_train_score = True,\n#            )\n#grid_cv.fit(xtrain,ytrain)","fedad8ce":"random_cv.best_estimator_","ec0f2117":"#cl = xgboost.XGBRegressor(base_score=1, booster='gbtree', colsample_bylevel=1,\n#             colsample_bynode=1, colsample_bytree=1, gamma=0,\n#             importance_type='gain', learning_rate=0.1, max_delta_step=0,\n#             max_depth=3, min_child_weight=4, missing=None, n_estimators=1100,\n#             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n#             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n#             silent=None, subsample=1, verbosity=1)\n#cl.fit(xtrain,ytrain)\n#y_pred2 = cl.predict(test_df)\n#y_pred2","822bfc7f":"#Linear Regression\nlm = linear_model.LinearRegression()\nmodel = lm.fit(xtrain,ytrain)\ny_pred3 = lm.predict(test_df)\ny_pred3+20000","be11ed2a":"#for i in colsn:\n #   print(train_df[i].value_counts())","bd3c10bb":"#subb = pd.DataFrame({\n#       \"Id\": test_df[\"Id\"],\n#       \"SalePrice\": y_pred2\n#   })\n#subb.to_csv('house_pricev1.csv', index=False)","c9757c5f":"#remove utilities ","50b7df63":"\n#sample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\n\n","52f9be94":"## Encoding","eb043632":"BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone","0af9ac9c":"### how many are nulls in train data?","3baf08b8":"<b>we have <u>19<\/u> columns with null values and their name can be found in list nan_val,out of which 4 have more than 1000 null values and it is better to drop them  \n","0e625890":"## Explore Data","dd6d9c2a":"### there are 1460 rows \n### how many are nulls in train data?","eacf6efc":"# MSSubClass: Identifies the type of dwelling involved in the sale.\t\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n\nMSZoning: Identifies the general zoning classification of the sale.\n\t\t\n       A\tAgriculture\n       C\tCommercial\n       FV\tFloating Village Residential\n       I\tIndustrial\n       RH\tResidential High Density\n       RL\tResidential Low Density\n       RP\tResidential Low Density Park \n       RM\tResidential Medium Density\n\t\nLotFrontage: Linear feet of street connected to property\n\nLotArea: Lot size in square feet\n\nStreet: Type of road access to property\n\n       Grvl\tGravel\t\n       Pave\tPaved\n       \t\nAlley: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access\n\t\t\nLotShape: General shape of property\n\n       Reg\tRegular\t\n       IR1\tSlightly irregular\n       IR2\tModerately Irregular\n       IR3\tIrregular\n       \nLandContour: Flatness of the property\n\n       Lvl\tNear Flat\/Level\t\n       Bnk\tBanked - Quick and significant rise from street grade to building\n       HLS\tHillside - Significant slope from side to side\n       Low\tDepression\n\t\t\nUtilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only\t\n\t\nLotConfig: Lot configuration\n\n       Inside\tInside lot\n       Corner\tCorner lot\n       CulDSac\tCul-de-sac\n       FR2\tFrontage on 2 sides of property\n       FR3\tFrontage on 3 sides of property\n\t\nLandSlope: Slope of property\n\t\t\n       Gtl\tGentle slope\n       Mod\tModerate Slope\t\n       Sev\tSevere Slope\n\t\nNeighborhood: Physical locations within Ames city limits\n\n       Blmngtn\tBloomington Heights\n       Blueste\tBluestem\n       BrDale\tBriardale\n       BrkSide\tBrookside\n       ClearCr\tClear Creek\n       CollgCr\tCollege Creek\n       Crawfor\tCrawford\n       Edwards\tEdwards\n       Gilbert\tGilbert\n       IDOTRR\tIowa DOT and Rail Road\n       MeadowV\tMeadow Village\n       Mitchel\tMitchell\n       Names\tNorth Ames\n       NoRidge\tNorthridge\n       NPkVill\tNorthpark Villa\n       NridgHt\tNorthridge Heights\n       NWAmes\tNorthwest Ames\n       OldTown\tOld Town\n       SWISU\tSouth & West of Iowa State University\n       Sawyer\tSawyer\n       SawyerW\tSawyer West\n       Somerst\tSomerset\n       StoneBr\tStone Brook\n       Timber\tTimberland\n       Veenker\tVeenker\n\t\t\t\nCondition1: Proximity to various conditions\n\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nCondition2: Proximity to various conditions (if more than one is present)\n\t\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nBldgType: Type of dwelling\n\t\t\n       1Fam\tSingle-family Detached\t\n       2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n       Duplx\tDuplex\n       TwnhsE\tTownhouse End Unit\n       TwnhsI\tTownhouse Inside Unit\n\t\nHouseStyle: Style of dwelling\n\t\n       1Story\tOne story\n       1.5Fin\tOne and one-half story: 2nd level finished\n       1.5Unf\tOne and one-half story: 2nd level unfinished\n       2Story\tTwo story\n       2.5Fin\tTwo and one-half story: 2nd level finished\n       2.5Unf\tTwo and one-half story: 2nd level unfinished\n       SFoyer\tSplit Foyer\n       SLvl\tSplit Level\n\t\nOverallQual: Rates the overall material and finish of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\n       5\tAverage\n       4\tBelow Average\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t\nOverallCond: Rates the overall condition of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\t\n       5\tAverage\n       4\tBelow Average\t\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t\t\nYearBuilt: Original construction date\n\nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n\nRoofStyle: Type of roof\n\n       Flat\tFlat\n       Gable\tGable\n       Gambrel\tGabrel (Barn)\n       Hip\tHip\n       Mansard\tMansard\n       Shed\tShed\n\t\t\nRoofMatl: Roof material\n\n       ClyTile\tClay or Tile\n       CompShg\tStandard (Composite) Shingle\n       Membran\tMembrane\n       Metal\tMetal\n       Roll\tRoll\n       Tar&Grv\tGravel & Tar\n       WdShake\tWood Shakes\n       WdShngl\tWood Shingles\n\t\t\nExterior1st: Exterior covering on house\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\nExterior2nd: Exterior covering on house (if more than one material)\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\nMasVnrType: Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone\n\t\nMasVnrArea: Masonry veneer area in square feet\n\nExterQual: Evaluates the quality of the material on the exterior \n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nExterCond: Evaluates the present condition of the material on the exterior\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nFoundation: Type of foundation\n\t\t\n       BrkTil\tBrick & Tile\n       CBlock\tCinder Block\n       PConc\tPoured Contrete\t\n       Slab\tSlab\n       Stone\tStone\n       Wood\tWood\n\t\t\nBsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement\n\t\t\nBsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement\n\t\nBsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\t\t\nBsmtFinSF1: Type 1 finished square feet\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\nBsmtFinSF2: Type 2 finished square feet\n\nBsmtUnfSF: Unfinished square feet of basement area\n\nTotalBsmtSF: Total square feet of basement area\n\nHeating: Type of heating\n\t\t\n       Floor\tFloor Furnace\n       GasA\tGas forced warm air furnace\n       GasW\tGas hot water or steam heat\n       Grav\tGravity furnace\t\n       OthW\tHot water or steam heat other than gas\n       Wall\tWall furnace\n\t\t\nHeatingQC: Heating quality and condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nCentralAir: Central air conditioning\n\n       N\tNo\n       Y\tYes\n\t\t\nElectrical: Electrical system\n\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed\n\t\t\n1stFlrSF: First Floor square feet\n \n2ndFlrSF: Second floor square feet\n\nLowQualFinSF: Low quality finished square feet (all floors)\n\nGrLivArea: Above grade (ground) living area square feet\n\nBsmtFullBath: Basement full bathrooms\n\nBsmtHalfBath: Basement half bathrooms\n\nFullBath: Full bathrooms above grade\n\nHalfBath: Half baths above grade\n\nBedroom: Bedrooms above grade (does NOT include basement bedrooms)\n\nKitchen: Kitchens above grade\n\nKitchenQual: Kitchen quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       \t\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n\nFunctional: Home functionality (Assume typical unless deductions are warranted)\n\n       Typ\tTypical Functionality\n       Min1\tMinor Deductions 1\n       Min2\tMinor Deductions 2\n       Mod\tModerate Deductions\n       Maj1\tMajor Deductions 1\n       Maj2\tMajor Deductions 2\n       Sev\tSeverely Damaged\n       Sal\tSalvage only\n\t\t\nFireplaces: Number of fireplaces\n\nFireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace\n\t\t\nGarageType: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage\n\t\t\nGarageYrBlt: Year garage was built\n\t\t\nGarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage\n\t\t\nGarageCars: Size of garage in car capacity\n\nGarageArea: Size of garage in square feet\n\nGarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nGarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nPavedDrive: Paved driveway\n\n       Y\tPaved \n       P\tPartial Pavement\n       N\tDirt\/Gravel\n\t\t\nWoodDeckSF: Wood deck area in square feet\n\nOpenPorchSF: Open porch area in square feet\n\nEnclosedPorch: Enclosed porch area in square feet\n\n3SsnPorch: Three season porch area in square feet\n\nScreenPorch: Screen porch area in square feet\n\nPoolArea: Pool area in square feet\n\nPoolQC: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n\t\t\nFence: Fence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence\n\t\nMiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone\n\t\t\nMiscVal: $Value of miscellaneous feature\n\nMoSold: Month Sold (MM)\n\nYrSold: Year Sold (YYYY)\n\nSaleType: Type of sale\n\t\t\n       WD \tWarranty Deed - Conventional\n       CWD\tWarranty Deed - Cash\n       VWD\tWarranty Deed - VA Loan\n       New\tHome just constructed and sold\n       COD\tCourt Officer Deed\/Estate\n       Con\tContract 15% Down payment regular terms\n       ConLw\tContract Low Down payment and low interest\n       ConLI\tContract Low Interest\n       ConLD\tContract Low Down\n       Oth\tOther\n\t\t\nSaleCondition: Condition of sale\n\n       Normal\tNormal Sale\n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n       AdjLand\tAdjoining Land Purchase\n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n       Family\tSale between family members\n       Partial\tHome was not completed when last assessed (associated with New Homes)\n","b130fc72":"<b>we have <u>33<\/u> columns with null values and their name can be found in list nan_val,out of which 4 have more than 1000 null values and it is better to drop them  \n"}}