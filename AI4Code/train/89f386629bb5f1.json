{"cell_type":{"79fe87fe":"code","d96aea1c":"code","410a0a75":"code","88f779cd":"code","b8ad46ec":"code","707dcafe":"markdown","8aae50c8":"markdown","bc010db1":"markdown","c4d721b6":"markdown"},"source":{"79fe87fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport requests\nimport random\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport urllib\nimport cv2\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d96aea1c":"import json\n\n# Read the data\ndata = pd.read_json('..\/input\/Indian_Number_plates.json', lines=True)\npd.set_option('display.max_colwidth', -1)\n\n# Delete the empty column\ndel data['extras']\n\n# Extract the points of the bounding boxes because thats what we want\ndata['points'] = data.apply(lambda row: row['annotation'][0]['points'], axis=1)\n\n# And drop the rest of the annotation info\ndel data['annotation']","410a0a75":"Images = []\nPlates = []\n\ndef downloadTraining(df):\n\n    for index, row in df.iterrows():\n\n        # Get the image from the URL\n        resp = urllib.request.urlopen(row[0])\n        im = np.array(Image.open(resp))\n\n        # We append the image to the training input array\n        Images.append(im)  \n\n        # Points of rectangle\n        x_point_top = row[1][0]['x']*im.shape[1]\n        y_point_top = row[1][0]['y']*im.shape[0]\n        x_point_bot = row[1][1]['x']*im.shape[1]\n        y_point_bot = row[1][1]['y']*im.shape[0]\n\n        # Cut the plate from the image and use it as output\n        carImage = Image.fromarray(im)\n        plateImage = carImage.crop((x_point_top, y_point_top, x_point_bot, y_point_bot))\n        Plates.append(np.array(plateImage))","88f779cd":"downloadTraining(data)","b8ad46ec":"import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Create figure and axes\nfig, ax = plt.subplots(2, 1, constrained_layout=True)\n\n# Set title\nax[0].set_title('Input Image')\nax[1].set_title('Output Image')\n\n# Display the images\nax[0].imshow(Images[0])\nax[1].imshow(Plates[0])\n\nplt.show()","707dcafe":"In next versions of this kernel I will try to use Keras with this data.","8aae50c8":"**CHECK OUR DATA**","bc010db1":"**GET COORD OF BOUNDING BOXES**","c4d721b6":"**TO GET THE IMAGES OF THE DATASET YOU MUST HAVE INTERNET CONNECTION IN YOUR KERNEL**"}}