{"cell_type":{"1d36f2fc":"code","bbe0a79d":"code","d1a3cecf":"code","7f8c17a3":"code","06565394":"code","988d6866":"code","f6d0c9be":"code","7b63a3ae":"code","7885151d":"code","a6890d87":"code","aedbece2":"code","fba3a996":"code","2c55f963":"code","00943635":"code","0b0bad53":"code","09ad5502":"code","47732c2f":"code","f28d04e6":"code","a0f94854":"code","d38b3b76":"code","472f5a58":"code","38b163ba":"markdown","2d0a0cdd":"markdown","d205c6a6":"markdown","503928dd":"markdown","4d237f22":"markdown","93028c2c":"markdown","1f0a9562":"markdown","e0e63be5":"markdown","540e50c3":"markdown","08c4390d":"markdown","d37ae53b":"markdown","41af4c7a":"markdown","4843692a":"markdown"},"source":{"1d36f2fc":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","bbe0a79d":"# \uc2dc\ud5d8\ud658\uacbd\uc5d0\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5\ub428\n# import pandas as pd\n# X_test = pd.read_csv(\"data\/X_test.csv\")\n# X_train = pd.read_csv(\"data\/X_train.csv\")\n# y_train = pd.read_csv(\"data\/y_train.csv\")","d1a3cecf":"import pandas as pd\nimport numpy as np","7f8c17a3":"X_train.head()","06565394":"y_train.head()","988d6866":"y_train['income'] = (y_train['income'] != '<=50K').astype(int)\ny_train.head()","f6d0c9be":"#\uacb0\uce21\uac12 \ube44\uc911 \ud655\uc778\n\nprint(round((X_train.isnull().sum() \/ len(X_train)),2))","7b63a3ae":"print(round((X_test.isnull().sum() \/ len(X_train)),2))","7885151d":"X_train.info()","a6890d87":"# \ubb38\uc790\ud615 \ubcc0\uc218, \uc22b\uc790\ud615 \ubcc0\uc218 \uad6c\ubd84\n\ncat_cols = ['workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race', 'sex', 'native.country']\nnum_cols = ['age', 'fnlwgt', 'education.num', 'capital.gain', 'capital.loss', 'hours.per.week']","aedbece2":"X_train[num_cols].describe()","fba3a996":"for cat_col_count in cat_cols:\n    print(cat_col_count, X_train[cat_col_count].value_counts())\n","2c55f963":"### \ub178\ud2b8\ubd81 \ucc38\uace0\n# \ucd5c\ube48\uac12\uc73c\ub85c \uc774\uc0c1\uac12 \ub300\uccb4\n\ndef data_fillna(df):\n    df['workclass'] = df['workclass'].fillna(df['workclass'].mode()[0])\n    df['occupation'] = df['occupation'].fillna(\"null\")\n    df['native.country'] = df['native.country'].fillna(df['native.country'].mode()[0])\n    return df\n\nX_train = data_fillna(X_train)\nX_test = data_fillna(X_test)\n\nX_train.isnull().sum()","00943635":"def outlier(df):\n    for num_col in num_cols:\n        Q1 = df[num_col].quantile(0.25)\n        Q3 = df[num_col].quantile(0.75)\n        IQR = Q3 - Q1\n        condition = (Q1 - 1.5 * IQR <= df[num_col]) & (df[num_col] <= Q3 + 1.5 * IQR)\n        print(num_col, \"\uc774\uc0c1\uac12 \ube44\uc911\", (len(df[~condition])\/ len(df[num_col])))\n        \nprint(outlier(X_train))","0b0bad53":"# hours.per.week\ub294 \uc774\uc0c1\uac12\uc774 \ub9ce\uc73c\ubbc0\ub85c \uc0ad\uc81c\n# X_train = X_train.drop(columns = 'hours.per.week')\n# X_test = X_test.drop(columns = 'hours.per.week')\n\nnum_cols = num_cols[: -1]\nnum_cols","09ad5502":"### \ub178\ud2b8\ubd81 \ucc38\uace0 \n# Label Encoding\n\nfrom sklearn.preprocessing import LabelEncoder\n\nlabel = LabelEncoder()\nX_train[cat_cols] = X_train[cat_cols].apply(label.fit_transform)\nX_test[cat_cols] = X_test[cat_cols].apply(label.fit_transform)\nX_train[cat_cols].describe()","47732c2f":"from sklearn.preprocessing import MinMaxScaler\nscaler  = MinMaxScaler()\nX_train[num_cols] =scaler.fit_transform(X_train[num_cols])\nX_test[num_cols] =scaler.fit_transform(X_test[num_cols])","f28d04e6":"from sklearn.model_selection import train_test_split\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['income'], test_size = 0.2, shuffle = True, random_state = 2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","a0f94854":"from sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\nmodel_RF = RandomForestClassifier()\nmodel_RF.fit(X_tr, y_tr)\nprint(model_RF.score(X_val, y_val))\n\nmodel_xgb = XGBClassifier()\nmodel_xgb.fit(X_tr, y_tr)\nprint(model_xgb.score(X_val, y_val))","d38b3b76":"model_final = XGBClassifier()\nmodel_final.fit(X_train, y_train['income'])\nprediction = model_final.predict(X_test)\n\nsubmission = pd.DataFrame({\n    'id' :  y_test['id'],\n    'income' : prediction\n})\n\n\nsubmission.head()","472f5a58":"y_test = (y_test['income'] != '<=50K').astype(int)\n\nfrom sklearn.metrics import accuracy_score\nprint('accuracy score:', (accuracy_score(y_test, prediction)))","38b163ba":"## \uac80\uc99d\uc6a9 \ub370\uc774\ud130 \ubd84\ub9ac","2d0a0cdd":"## \ucc44\uc810 (\uc218\ud5d8\uc790\ub294 \ud655\uc778 \ubd88\uac00)","d205c6a6":"## \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","503928dd":"## EDA","4d237f22":"# \uc0ac\uc6a9\uc790 \ucf54\ub529","93028c2c":"# \uc774\uc0c1\uac12 \ucc98\ub9ac","1f0a9562":"## \ubaa8\ub378 & \ud3c9\uac00","e0e63be5":"- \uacb0\uce21\uce58\ub294 \ucd5c\ube48\uac12\uacfc \ucc28\uc774\uac00 \ud06c\uba74 \ucd5c\ube48\uac12\uc73c\ub85c \uac12\uc774 \ube44\uc2b7\ud558\uba74 \ubcc4\ub3c4\uc758 \uac12\uc73c\ub85c \ub300\uccb4\ud568","540e50c3":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30(\uc0dd\ub7b5)","08c4390d":"# \uc2a4\ucf00\uc77c\ub9c1","d37ae53b":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","41af4c7a":"## \uacb0\uce21\uce58 \ucc98\ub9ac","4843692a":"# \uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21\n\n- age: \ub098\uc774\n- workclass: \uace0\uc6a9 \ud615\ud0dc\n- fnlwgt: \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58(final weight)\n- education: \uad50\uc721 \uc218\uc900\n- education.num: \uad50\uc721 \uc218\uc900 \uc218\uce58\n- marital.status: \uacb0\ud63c \uc0c1\ud0dc\n- occupation: \uc5c5\uc885\n- relationship: \uac00\uc871 \uad00\uacc4\n- race: \uc778\uc885\n- sex: \uc131\ubcc4\n- capital.gain: \uc591\ub3c4 \uc18c\ub4dd\n- capital.loss: \uc591\ub3c4 \uc190\uc2e4\n- hours.per.week: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- native.country: \uad6d\uc801\n- income: \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)"}}