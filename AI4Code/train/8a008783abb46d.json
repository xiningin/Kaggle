{"cell_type":{"7a1fdf5b":"code","b814ba1d":"code","f8ad4540":"code","da17336f":"code","a222d1a9":"code","e4150097":"code","6123eda7":"code","1c7b2226":"code","3f8bc970":"code","c86e3490":"code","06301b1d":"code","371cda72":"code","d6a4ebee":"markdown","9671ec34":"markdown"},"source":{"7a1fdf5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b814ba1d":"import h5py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom keras import layers\nfrom keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.models import Model\nfrom keras.preprocessing import image\nfrom keras.utils import layer_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.applications.imagenet_utils import preprocess_input\nimport pydot\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\n\nimport keras.backend as K\nK.set_image_data_format('channels_last')\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\n\n%matplotlib inline","f8ad4540":"#Datasets\ntest = h5py.File(\"..\/input\/happy-house-dataset\/test_happy.h5\")\ntrain = h5py.File(\"..\/input\/happy-house-dataset\/train_happy.h5\")","da17336f":"train_x_orig = np.array(train['train_set_x'][:])\ntrain_y_orig = np.array(train['train_set_y'][:])\ntest_x_orig = np.array(test['test_set_x'][:])\ntest_y_orig = np.array(test['test_set_y'][:])\n\nprint(train_x_orig.shape)\nprint(train_y_orig.shape)\nprint(test_x_orig.shape)\nprint(test_y_orig.shape)\n\n#Flatten the image\ntrain_x = train_x_orig\/255\ntest_x = test_x_orig\/255\n\n#Reshape train_y_orig and test_y_orig\ntrain_y = train_y_orig.reshape(1,train_y_orig.shape[0]).T\ntest_y = test_y_orig.reshape(1,test_y_orig.shape[0]).T\n\nprint(\"Number of training example \" +str(train_x.shape[0]))\nprint(\"Number of test example \" +str(test_x.shape[0]))\nprint(\"train_X shape \"+str(train_x.shape))\nprint(\"train_Y shape \"+str(train_y.shape))\nprint(\"test_X shape \"+str(test_x.shape))\nprint(\"test_Y shape \"+str(test_y.shape))","a222d1a9":"print(train_y)","e4150097":"plt.imshow(train_x[599])","6123eda7":"def HappyModel(input_size):\n    #Define input with shape input_size\n    input_x = Input(input_size)\n    \n    #Zero Padding\n    X = ZeroPadding2D((3,3),name='Zero_pad')(input_x)\n    \n    #Conv2D, BatchNormalization and Activation. BatchNormalizartion is a technique for training very deep NNs that standardize the inputsto a layer for each mini-batch.It increases the learning rate that increases the speed at which NNs train.Makes weights easier to initialize.\n    X = Conv2D(32,(5,5),strides=(1,1),name='conv2d')(X)\n    X = BatchNormalization(axis=3,name='BN')(X)\n    X = Activation(\"relu\")(X)\n    \n    #MaxPool\n    X = MaxPooling2D((2,2),name='max-pool')(X)\n    \n    #Flatten X +FullyConnected\n    X = Flatten()(X)\n    X = Dense(1,activation='sigmoid',name='FC')(X)\n    \n    #create Model\n    model = Model(inputs = input_x, outputs = X, name='model')\n    \n    return model\n    ","1c7b2226":"# First create a model by calling the function above.\nmodel = HappyModel(train_x.shape[1:])\n# Compile the model\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","3f8bc970":"# Fit the model into training data\nhistory = model.fit(train_x,train_y,epochs=30,batch_size=30)","c86e3490":"# Evaluate the model on Test Set\nevals = model.evaluate(test_x,test_y)","06301b1d":"print(\"Loss \"+str(evals[0]))\nprint(\"accuracy \"+str(evals[1]))","371cda72":"model.summary()","d6a4ebee":"#### We have built a function to describe the model Now to train and test the model we have to perform 4 steps.\n- Create a model by calling the function above\n- Compile the model\n- Fit the model in training data\n- Test the model Check accuracy and loss\n","9671ec34":"### A model in keras"}}