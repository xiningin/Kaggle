{"cell_type":{"55287c15":"code","79385dcd":"code","332db40a":"code","0e450424":"code","9328ea55":"code","20281bbb":"code","6529fc88":"code","bca4bc0c":"code","fdc46d53":"code","8201a784":"code","b56656de":"code","c2f64e0b":"code","e18bcd6c":"code","2eb7f82f":"code","9ada93ce":"code","a377368f":"markdown","91f7ec58":"markdown","5145b164":"markdown","d41e84da":"markdown","9047611c":"markdown","4a6e075c":"markdown","ca3e8af5":"markdown","9f687c43":"markdown","92ebe26d":"markdown","c529ea4d":"markdown","91a05333":"markdown","3ed0ce24":"markdown","9f39a220":"markdown","8adb6b06":"markdown","494bde18":"markdown","4ef2a0de":"markdown"},"source":{"55287c15":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\neq_df = pd.read_csv('\/kaggle\/input\/earthquakes-in-greece-19012018\/EarthQuakes in Greece.csv')\neq_df.head(5)","79385dcd":"eq_df.rename(columns={'Date':'Day', 'LATATITUDE (N)':'Lat', 'LONGITUDE  (E)' : 'Long', 'MAGNITUDE (Richter)' : 'Magn' }, inplace=True)\neq_df.info()\neq_df.describe()","332db40a":"eq_df.hist(column='Magn', bins=100)\neq_df[(eq_df['Magn']> 7.3) | (eq_df['Magn']==0.0)].sort_values('Magn', ascending=False)","0e450424":"eq_df = eq_df.loc[eq_df['Magn'] != 0]","9328ea55":"import json\nfrom shapely.geometry import mapping, shape\nfrom shapely.prepared import prep\nfrom shapely.geometry import Point\n\nwith open('\/kaggle\/input\/greeceborders\/Greece_AL2.GeoJson') as json_file:\n    data = json.load(json_file)\n\ncountries = {}\ngr = '' # multipolygon\nfor feature in data['features']:\n    geom = feature['geometry']\n    gr = shape(geom)\n    countries['Greece'] = prep(gr)","20281bbb":"import folium\n\nm = folium.Map([eq_df['Lat'].mean(), eq_df['Long'].mean()], #center of a map\n               zoom_start=6, min_zoom = 5, max_zoom = 7) # max zoom is 18; restrict zooms not to scroll much\n               \nfolium.GeoJson(gr).add_to(m) # add gr - multipolygon of greek boundaries\nfolium.LatLngPopup().add_to(m) # add custom popup of lat\/long of selected point\n\nfor i in range(0,25): # add markers of first 25 earthquakes of the dataset\n    folium.Marker([eq_df.iloc[i]['Lat'], eq_df.iloc[i]['Long']], \n                  popup=eq_df.iloc[i]['Year']).add_to(m) # add popup to markers as an accident year\nm","6529fc88":"def get_country(row):\n    point = Point(row['Long'], row['Lat'])\n    for country, geom in countries.items():\n        if geom.contains(point):\n            return True # country name\n    return False # unknown\n\neq_df['Country'] = eq_df.apply(get_country, axis=1)","bca4bc0c":"eq_gr = eq_df[eq_df.Country == 1]\neq_gr = eq_gr.drop(columns='Country')\neq_gr","fdc46d53":"eq_minor = eq_gr.loc[(eq_gr['Magn'] > 0) & (eq_gr['Magn'] <=3.9)]\neq_light = eq_gr.loc[(eq_gr['Magn'] > 3.9) & (eq_gr['Magn'] <=4.9)]\neq_moder = eq_gr.loc[(eq_gr['Magn'] > 4.9) & (eq_gr['Magn'] <= 5.9)]\neq_major = eq_gr.loc[(eq_gr['Magn'] > 5.9) & (eq_gr['Magn'] <=7.9)]\neq_great = eq_gr.loc[eq_gr['Magn'] > 7.9]\n\nax1 = eq_light.plot(kind='scatter', x='Year', y='Month', color='lightgreen', label='Light')\nax2 = eq_moder.plot(kind='scatter', x='Year', y='Month', color='lightblue',  label='Moder', ax=ax1)\nax3 = eq_major.plot(kind='scatter', x='Year', y='Month', color='orange', label='Major', ax=ax1)\nax4 = eq_great.plot(kind='scatter', x='Year', y='Month', color='r', label='Great',  ax=ax1)\nax1.legend(bbox_to_anchor=(1., 1.))","8201a784":"count_y = eq_gr['Year'].value_counts()\ncount_y.plot(grid=True)","b56656de":"eq_df_20y = eq_gr[eq_gr['Year']>=1998]\npd.crosstab(index=eq_df_20y['Year'], columns='count').plot(kind='bar', figsize=(5,5), grid=True)\neq_df_20y","c2f64e0b":"eq_2014 = eq_gr[eq_gr['Year']==2014]\neq_2014.info()","e18bcd6c":"from folium.plugins import FastMarkerCluster, MarkerCluster\nmc = MarkerCluster(name=\"Marker Cluster\")\n\nfolium_map = folium.Map([eq_2014['Lat'].mean(), eq_df['Long'].mean()], #center of a map\n               zoom_start=6, min_zoom = 5, tiles='Stamen Terrain') # max zoom is 18; restrict zooms not to scroll nuch\n               \nfor index, row in eq_2014[eq_2014.Magn>3.9].iterrows():\n    popup_text = \"Day: {} <br> Month: {}\".format(\n                      int(row[\"Day\"]),\n                      int(row[\"Month\"])\n                      )\n    folium.CircleMarker(location=[row[\"Lat\"],row[\"Long\"]],\n                        radius= 1.5 * row['Magn'],\n                        color=\"red\",\n                        popup=popup_text,\n                        fill=True).add_to(mc)\n\nmc.add_to(folium_map)\n\nfolium.LayerControl().add_to(folium_map)\nfolium_map","2eb7f82f":"eq_light14 = eq_light[eq_light.Year==2014]\neq_moder14 = eq_moder[eq_moder.Year==2014]\neq_major14 = eq_major[eq_major.Year==2014]","9ada93ce":"m = folium.Map([eq_2014['Lat'].mean(), eq_df['Long'].mean()], #center of a map\n               zoom_start=6, min_zoom = 5) # max zoom is 18;\n              \nfor i in range(0,len(eq_light14)): # add markers of eq with diff magn \n    folium.Circle(\n        radius=1000 * eq_light14.iloc[i]['Magn'],\n        location=[eq_light14.iloc[i]['Lat'], eq_light14.iloc[i]['Long']],\n        popup=\"D: {} <br> Mo: {}\".format(\n                      int(row[\"Day\"]),\n                      int(row[\"Month\"])),\n        color='green',\n        fill=False,\n    ).add_to(m) \n\nfor i in range(0,len(eq_moder14)): # add markers of eq with diff magn \n    folium.Circle(\n        radius=1000 * eq_moder14.iloc[i]['Magn'],\n        location=[eq_moder14.iloc[i]['Lat'], eq_moder14.iloc[i]['Long']],\n        popup=\"D: {} <br> Mo: {}\".format(\n                      int(row[\"Day\"]),\n                      int(row[\"Month\"])),\n        color='blue',\n        fill=False,\n    ).add_to(m) \n\nfor i in range(0,len(eq_major14)): # add markers of eq with diff magn \n    folium.Circle(\n        radius=1000 * eq_major14.iloc[i]['Magn'],\n        location=[eq_major14.iloc[i]['Lat'], eq_major14.iloc[i]['Long']],\n        popup=\"D: {} <br> Mo: {}\".format(\n                      int(row[\"Day\"]),\n                      int(row[\"Month\"])),\n        color='red',\n        fill=False,\n    ).add_to(m)\nm","a377368f":"Mark earthquakes epicenters with Magnitude more than 3.9 using CircleMarker:","91f7ec58":"# Plot actual Greek area on 2019\n\n### 5. Create a multipolygon of actual Greek area\n\n* Load coordinates of actual borders of Greece;\n\nFull boundaries of Greece were found at [OSM Admin Boundaries Map](https:\/\/wambachers-osm.website\/boundaries\/) and downloaded [as a geojson file](https:\/\/www.kaggle.com\/lsind18\/greeceborders). *For futher analysis of this dataset it can be extended with coordinates of boundaries of adjoining countries.*\n* Create a multipolygon geometry from geojson file.\n\nModules used:\n* json module reads json file `Greece_AL2.GeoJson`\n* [**shapely**](https:\/\/pypi.org\/project\/Shapely\/) module helps to manipulate and analyse geometric objects in the Cartesian plane. Shapely module help to populate `countries` dictionary with PreparedGeometry object which is a modern Greek area. Dictionary `countries = {}` has only one key 'Greece' and it can be extended later with the keys of other countries names.","5145b164":"# Drop the earthquakes not from Greek territory\n\n### 7. Cut adjacent areas\n\n* create a function `get_country(row)` which takes one row of dataset as a argument, extracts longitude and latitude and checks if it belongs to Greek area or not. For futher analysis of using areas of adjoing countries it can return country name. Function returns bool value showing if the point is inside Greece or outside - this value is added to `eq_df` dataset as a new column.\n* create dataframe of accidents happend in actual area of Greece.","d41e84da":">Result:\nThe most destructive earthquake was at 11 of August, 1903 with epicenter at sea south of [Kythera](https:\/\/www.kythera.gr\/en\/about_kythera\/history.php) which devastated the island. The other one took place in present [Kresna, Bulgaria on 4 of April, 1904](https:\/\/www.researchgate.net\/publication\/50301271_The_Kresna_earthquake_of_1904_in_Bulgaria). There are also rows with magnitude = 0.0 which will be excluded from small datasets.\nRows to ignore for futher analysis:\n* magnitude = 0.0 (only 2 rows);\n* earthquakes from adjacent areas.","9047611c":"> Result:\nShape(geom) type variable was created for use in the next step","4a6e075c":"> Result: \n* dataset 1998-2018 has 172 987 records that means the whole century (from 1901 to 1997) had only 24 072 records\n  * f.e. about 5000 entries were made for Magnitude less than 3. \n* According to a crosstab plot the majority of records were made in 2014 (more than it was recorded during the whole century!)\n\n### 10. Create a dataset for 2014 year\n* find descriptive info about it\n* mark epicenters on the map","ca3e8af5":"> Result: There are 197 059 entries (59 596 entries belong to other countries on 2019) in the same years 1901 - 2018 in the dataframe `eq_gr`.\n\n# Create datasets based on Richter magnitude value\n\n### 8. Create different datasets based on Richter magnitude value\n* eq_minor = (0; 3.9]; eq_light = (3.9; 4.9\\];  eq_moder = (4.9; 5.9\\];  eq_major = (5.9; 7.9\\]; eq_great > 7.9\n* create scatter plot `Year-Month` with all earthquakes excluding minor (`Magn <= 3.9`). **Orange and red dots show the destructive earthquakes, lightgreen and lightblue - light (which are most common) and moderate respectively.**","9f687c43":"> Result: the graph above shows that a lot of data started to appear since the end of the century.\n\n> Steps:\n* Create a dataframe for 1998 - 2018;\n* Create bar plot on *year-count* summarize the number of records per year.","92ebe26d":"> Result:\nMap shows earthquakes in Greece and adjacent areas - Balkans, Turkey, etc.","c529ea4d":"All these datasets can be used for futher (f.e., predictive) analysis.\n\n# Conclusion\n\n* #### All these datasets can be used for futher (f.e., predictive) analysis.\n* #### Visualization of data helps to understand more dangerous regions.\n* #### According to a crosstab plot the majority of records were made in 2014 (more than it was recorded during the whole century!)\n\nPlease upvote this kernel if you find it useful \ud83d\ude4b   \nFeel free to give any suggestions to improve my code.\n","91a05333":"> Result:\n* dataset contains 256 655 rows and 8 columns;\n* there are no `None` values in the dataset;\n* `Year, Month, Day, Hours, Minutes` are of int64 type, `Lat, Long and Magn` are of float type;\n* `Year` is in range 1901 - 2018;\n* `Magn` is in range 0.0 - 8.0, mean magnitude is 2.42.\n\n\n# Richter Magnitude Scale and outliers\n\n### 3. Understand Richter Magnitude Scale\n\nAccording to the [Richter Magnitude Scale](http:\/\/www.geo.mtu.edu\/UPSeis\/magnitude.html), there can be micro, minor, light, moderate, strong, major and epic types of earthquakes. After some cleaning we organize the types of earthquakes into smaller dataframes by the Richter Magnitude value:\n* eq_minor = (0; 3.9]\n* eq_light = (3.9; 4.9\\]\n* eq_moder = (4.9; 5.9\\]\n* eq_major = (5.9; 7.9\\]\n* eq_great > 7.9\n\n\n### 4. Find the outliers\n\nThe outliers table and full histogram of magnitudes frequencies are:","3ed0ce24":"# Analyzing earthquake dataset for Greece considering the actual territory of Greece on 2019\n**This article covers analysis of [earthquake catalogue for Greece](https:\/\/www.kaggle.com\/astefopoulos\/earthquakes-in-greece-19012018) in period 1901 - 2018 considering the actual territory of Greece on 2019 using geojson file of [Greek boundaries](https:\/\/www.kaggle.com\/lsind18\/greeceborders) .**\n\n>Short brief:\n* Understand data\n* Clean the outliers - data which do not belong to modern Greek area\n* Pick out more recent and accurate data for last years as an improvement of seismographs\n* Group recent data by Richter Magnitude value\n* Show data on real map\n\n# First steps\n### 1. Getting started\n\nImport necessary modules and load the dataframe to observe first five records.\n\n**Most used modules in the notebook:**\n- pandas - data manipulation and analysis of dataframes\n- matplotlib - visualization of data\n- json - gets actual greek borders from geojson data\n- shapely - manipulation of planar features using functions from GEOS library - we need to plot polygons as an areas\n- folium - map of the leaflet.js library. ","9f39a220":">Result: \nPlotting the types of earthquakes occured during years shows that last 40-50 years many light earthquakes were registered which connected with the abilities of modern seismographs to catch very minor earthquakes.\n\n# Analyze dataset only with modern data\n\n### 9. Create dataset only with modern data\n* understand when the records of full dataframe become more accurate","8adb6b06":"Mark light, moderate and major earthquakes (green, blue, red) of 2014 year on a map:","494bde18":"### 6. Combine area of Greece, real map and some entries from dataset\n\n* combine dictionary `countries = {}` with full dataset `eq_df` and real map using module [**folium**](https:\/\/python-visualization.github.io\/folium\/). Folium builds on the data wrangling strengths of the Python ecosystem and the mapping strengths of the leaflet.js library.\n* Markers on a map are earthquakes by longitude and latitude with popus of Year when the accident happened for first 25 rows.","4ef2a0de":"### 2. Get some statistics\n\n* rename dataframe columns `LATATITUDE (N), LONGITUDE  (E), MAGNITUDE (Richter)` into something more readable: `Lat, Long, Magn`;\n* check types and None values using *info()*;\n* find out some descriptive statistics using *describe()*:"}}