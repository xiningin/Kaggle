{"cell_type":{"5bb76be0":"code","04a13d65":"code","ce674077":"code","0a5c17a3":"code","d8b26f26":"code","841cab93":"code","1aeb30a2":"code","5eee150c":"code","4baffb69":"code","c17b1d60":"code","557aa902":"code","ebc3f64c":"code","a829c77a":"code","38649224":"code","388fe635":"code","79474060":"code","44ec7e84":"code","1b312c93":"code","1dcdfecf":"code","e83f93a2":"code","98eb963d":"code","a69c6e0b":"code","40bba683":"code","650730df":"code","3096817d":"markdown","f1bee2e9":"markdown","edaadfca":"markdown","67acd43f":"markdown","cff61496":"markdown","6144dc54":"markdown","a25b0625":"markdown","2db5fd0c":"markdown","f6973719":"markdown","8c5316aa":"markdown"},"source":{"5bb76be0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport cv2\nimport random\nfrom random import randint\nimport time\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04a13d65":"import torch\nfrom torch.utils.data import Dataset, random_split, DataLoader\nimport torch.nn.functional as F\nimport torch.nn as nn\n\nfrom PIL import Image\nfrom scipy import ndimage\n\nimport torchvision\nimport torchvision.models as models\nimport torchvision.transforms as T\nfrom torchvision.utils import make_grid\nfrom torchvision.datasets.utils import download_url\nfrom torchvision.datasets import ImageFolder\n\nfrom tqdm.notebook import tqdm\n\nfrom sklearn.metrics import f1_score","ce674077":"DATA_DIR = '..\/input\/goblin-portraits'\n\n\n#TRAIN_DIR = DATA_DIR + '\/train'                           \n#TEST_DIR = DATA_DIR + '\/test'                             \n\n#TRAIN_CSV = DATA_DIR + '\/labels.csv'                     \n#TEST_CSV = DATA_DIR + '\/submission.csv'\nTRAIN_DIR = DATA_DIR + '\/images'","0a5c17a3":"data_df = pd.read_csv('..\/input\/goblin-portraits\/artbreederGoblin.csv', encoding='utf8')\ndata_df.head()","d8b26f26":"labels_names=data_df[\"idArtBreeder\"].unique()\nlabels_sorted=labels_names.sort()\n\nlabels = dict(zip(range(len(labels_names)),labels_names))\nlabels ","841cab93":"lbl=[]\nfor i in range(len(data_df[\"idArtBreeder\"])):\n    temp=list(labels.values()).index(data_df.idArtBreeder[i])\n    lbl.append(temp)\n\n    \ndata_df['lbl'] = lbl\n#data_df['lbl'] = data_df['lbl'].astype(str)\ndata_df.head()","1aeb30a2":"path_img=[]\nfor i in range(len(data_df[\"idArtBreeder\"])):\n    temp=TRAIN_DIR + \"\/\" + str(data_df.idArtBreeder[i]) + \".jpg\"\n    path_img.append(temp)\n\ndata_df['path_img'] =path_img\ndata_df.head()","5eee150c":"num_images = len(data_df[\"idAlt\"])\nprint('Number of images in Training file:', num_images)\nno_labels=len(labels_names)\nprint('Number of Goblin breeds in Training file:', no_labels)","4baffb69":"#bar = data_df[\"idArtBreeder\"].value_counts(ascending=True).plot.barh(figsize = (30,120))\n#plt.title(\"Distribution of the Goblin Breeds\", fontsize = 20)\n#bar.tick_params(labelsize=16)\n#plt.show()","c17b1d60":"#data_df[\"idArtBreeder\"].value_counts(ascending=False)","557aa902":"fig, axes = plt.subplots(nrows=4, ncols=5, figsize=(15, 15),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(data_df.path_img[i]))\n    ax.set_title(data_df.idArtBreeder[i])\nplt.tight_layout()\nplt.show()","ebc3f64c":"#Resizing images\n\nrandom_img=randint(0,len(data_df.path_img))\nimg_path=data_df.path_img[random_img]\nimg= plt.imread(img_path)\n\nplt.imshow(img)\nplt.title(\"Original image\")\nplt.show()\n\nplt.imshow(cv2.resize(img, (150,150)))\nplt.title(\"After resizing\")\nplt.show()","a829c77a":"#Rotate image\n\nrandom_img=randint(0,len(data_df.path_img))\nimg_path=data_df.path_img[random_img]\nimg= plt.imread(img_path)\n\nplt.imshow(img)\nplt.title(\"Original image\")\nplt.show()\n\n\n#rotation angle in degree\n\nrotated1 = ndimage.rotate(img, 90)\nplt.imshow(rotated1)\nplt.title(\"Image rotated 90 degrees\")\nplt.show()","38649224":"#Resize and rotation\n\nrandom_img=randint(0,len(data_df.path_img))\nimg_path=data_df.path_img[random_img]\nimg= plt.imread(img_path)\n\nplt.imshow(img)\nplt.title(\"Original image\")\nplt.show()\n\n\nimg=cv2.resize(img, (150,150))\nturn =90\n\nfig, axes = plt.subplots(nrows=1, ncols=4, figsize=(16, 4),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(ndimage.rotate(img, i*90))\n    ax.set_title(\"After resizing rotated \"+ str(i*90) +\" degrees\")\nplt.tight_layout()\nplt.show()","388fe635":"#Image transforms using PyTorch\n\n\nimagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\ntrain_tfms = T.Compose([\n#this will resize the image \n    T.Resize(256),   \n   \n#Randomly change the brightness, contrast and saturation of an image\n#    T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),    \n\n#this will remove parts (crop) the Image at a random location.   \n#    T.RandomCrop(32, padding=4, padding_mode='reflect'),   \n\n#Horizontally flip (rotate by 180 degree) the given image randomly; default is 50% of images\n    T.RandomHorizontalFlip(), \n    \n#Rotate the image by angle -here by 10%\n    T.RandomRotation(10),\n    \n#convert it to a tensor   \n    T.ToTensor(),\n\n#Normalize a tensor image with mean and standard deviation - here with the Imagenet stats\n    T.Normalize(*imagenet_stats,inplace=True), \n    \n#Randomly selects a rectangle region in an image and erases its pixels.    \n    T.RandomErasing(inplace=True)\n])","79474060":"class GoblinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_idArtBreeder, img_label = row['idArtBreeder'], row['lbl']\n        img_fname = self.root_dir + \"\/\" + str(img_idArtBreeder) + \".jpg\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, img_label","44ec7e84":"data_ds = GoblinDataset(data_df, TRAIN_DIR, transform=train_tfms)","1b312c93":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', labels[target])","1dcdfecf":"show_sample(*data_ds[241])","e83f93a2":"show_sample(*data_ds[149])","98eb963d":"show_sample(*data_ds[244])","a69c6e0b":"show_sample(*data_ds[4])","40bba683":"show_sample(*data_ds[1])","650730df":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here again' )","3096817d":"#There are too many data therefore I commented the bar below, just to save for another time. ","f1bee2e9":"#Sample Images after Transform","edaadfca":"#Image Analysis","67acd43f":"#EDA","cff61496":"#Codes from Kamal Das https:\/\/www.kaggle.com\/kmldas\/beginner-s-guide-image-augmentation-transforms","6144dc54":"#To use numbers instead of names for labels. Lets add the numbers as labels to the dataframe","a25b0625":"##Image transforms using PyTorch","2db5fd0c":"#Add the path of each image to the file.","f6973719":"#There is No train\/test\/submission in that Dataset.","8c5316aa":"#Image Transforms using Python "}}