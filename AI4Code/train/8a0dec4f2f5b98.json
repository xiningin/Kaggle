{"cell_type":{"a383bfd1":"code","a7483860":"code","b630cd72":"code","c81c344b":"code","70c25a3e":"code","94eeaa0a":"code","4235abe9":"code","03e6fd58":"code","1fb128e6":"code","a11a9152":"code","306fa5dc":"code","a84627bf":"code","28770f52":"code","862f3ad8":"code","8d7997bc":"code","ae10d8b2":"code","9b627983":"code","c81f3763":"code","9ef8becf":"code","c7bf6c96":"code","ffcc7a8d":"code","d5cf9fdb":"code","35ffe93b":"code","2bf405d4":"code","38e720b7":"code","b01d8964":"code","f9340f92":"code","4d7f160c":"code","8dd98918":"code","7bed712a":"code","015d096a":"code","23927a7e":"code","626b9950":"code","1933f5eb":"code","676f618e":"code","a5b6ed3e":"code","9a3cfceb":"code","5bcc9dbd":"code","0c83369e":"code","87115336":"markdown"},"source":{"a383bfd1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a7483860":"from sklearn.linear_model import Ridge","b630cd72":"train = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv')","c81c344b":"train.head()","70c25a3e":"train.tail()","94eeaa0a":"train.loc[49000:50010,:]","4235abe9":"train.shape","03e6fd58":"train['open_channels'].min()","1fb128e6":"train_time = train['time'].values","a11a9152":"train_time_0 = train_time[:50000]","306fa5dc":"train_time_0 = list(train_time_0)*100","a84627bf":"len(train_time_0)","28770f52":"train['time'] = train_time_0","862f3ad8":"test = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv')","8d7997bc":"test.head()","ae10d8b2":"test.tail()","9b627983":"test.shape","c81f3763":"train_time_0 = train_time[:50000]\ntrain_time_0 = list(train_time_0)*40\ntest['time'] = train_time_0","9ef8becf":"n_groups = 100\ntrain[\"group\"] = 0\nfor i in range(n_groups):\n    ids = np.arange(i*50000, (i+1)*50000)\n    train.loc[ids,\"group\"] = i\n    \nn_groups = 40\ntest[\"group\"] = 0\nfor i in range(n_groups):\n    ids = np.arange(i*50000, (i+1)*50000)\n    test.loc[ids,\"group\"] = i\n    \ntrain['signal_2'] = 0\ntest['signal_2'] = 0\n\nn_groups = 100\nfor i in range(n_groups):\n    sub = train[train.group == i]\n    signals = sub.signal.values\n    imax, imin = math.floor(np.max(signals)), math.ceil(np.min(signals))\n    signals = (signals - np.min(signals))\/(np.max(signals) - np.min(signals))\n    signals = signals*(imax-imin)\n    train.loc[sub.index,\"signal_2\"] = [0,] +list(np.array(signals[:-1]))\n    \n    \nn_groups = 40\nfor i in range(n_groups):\n    sub = test[test.group == i]\n    signals = sub.signal.values\n    imax, imin = math.floor(np.max(signals)), math.ceil(np.min(signals))\n    signals = (signals - np.min(signals))\/(np.max(signals) - np.min(signals))\n    signals = signals*(imax-imin)\n    test.loc[sub.index,\"signal_2\"] = [0,] +list(np.array(signals[:-1]))","c7bf6c96":"X = train[['time', 'signal_2']].values\ny = train['open_channels'].values","ffcc7a8d":"model = Ridge()\nmodel.fit(X, y)\n","d5cf9fdb":"train_preds = model.predict(X)","35ffe93b":"train_preds = np.clip(train_preds, 0, 10)","2bf405d4":"train_preds.mean()","38e720b7":"train_preds = train_preds.astype(int)","b01d8964":"X_test = test[['time', 'signal_2']].values","f9340f92":"submission.head()","4d7f160c":"submission.shape","8dd98918":"X_test.shape","7bed712a":"test_preds = model.predict(X_test)\ntest_preds = np.clip(test_preds, 0, 10)\ntest_preds = test_preds.astype(int)\nsubmission['open_channels'] = test_preds\n","015d096a":"test_preds.mean()","23927a7e":"submission.head(20)","626b9950":"np.set_printoptions(precision=4)","1933f5eb":"submission.time.values[:20]","676f618e":"submission['time'] = [format(submission.time.values[x], '.4f') for x in range(2000000)]","a5b6ed3e":"submission.time.values[:20]","9a3cfceb":"submission['open_channels'].mean()","5bcc9dbd":"submission.head()","0c83369e":"submission.to_csv('submission.csv', index=False)","87115336":"train_preds"}}