{"cell_type":{"03401401":"code","a5a3e7b0":"code","12464beb":"code","460e86c5":"code","bbb9257b":"code","8889633d":"code","0dc8d247":"code","9ae8b394":"code","2f022feb":"code","6fa5d5db":"code","24ba2131":"code","4eab7536":"code","9e1f7302":"code","a7d68c2b":"code","b605625d":"code","2b878978":"code","04b57598":"code","b5fc7a6d":"code","41206e09":"code","ddae3c16":"code","675f9560":"code","54a441c9":"code","51086b00":"code","b11e5d83":"code","5ed0acc9":"code","bfead7c3":"code","c4dd81ad":"code","402db805":"code","79f60572":"code","e19a4f80":"code","37c0eac0":"code","0998c7c6":"code","28ca6066":"code","0a46f716":"markdown","7dd1e536":"markdown","5c300365":"markdown","918c7fd2":"markdown","bbf81a6c":"markdown"},"source":{"03401401":"# Pacotes\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\nimport pandas_profiling\nimport seaborn as sns\nfrom datetime import date","a5a3e7b0":"# Entrada de dados\ndf = pd.read_csv('\/kaggle\/input\/corona-virus-brazil\/brazil_covid19.csv')\ndf['date'] = pd.to_datetime(df['date'])","12464beb":"# Dados do estado de S\u00e3o Paulo\nsp = df[df['state'] == 'S\u00e3o Paulo']","460e86c5":"print(\"Informa\u00e7\u00f5es b\u00e1sicas do dataset\")\nprint(\"\u00daltima data de atualiza\u00e7\u00e3o: \",df['date'].max())\nprint(\"N\u00famero de casos confirmados: \",df['cases'].max())\nprint(\"N\u00famero de obitos: \",df['deaths'].max())","bbb9257b":"sp.describe().round(2)","8889633d":"# Entrada de dados\nsp2 = pd.read_csv('..\/input\/sp02062020\/covid19-282b9c496d354728a965294c90962764.csv')","0dc8d247":"# Analise exploratoria de dados\nsp2[['deaths_covid19','new_deaths_covid19']].describe().round(2)","9ae8b394":"# Transforma\u00e7\u00e3o das informa\u00e7\u00f5es\nsp2['date'] = pd.to_datetime(sp2['date'])\nsp2 = sp2.filter(['date','state','epidemiological_week_2020','deaths_covid19','new_deaths_covid19'])\nsp2 = sp2.sort_values(by=['date'])\nsp2.rename(columns={'state': 'uf'}, inplace=True)\nsp2 = sp2[(sp2['date'] <= date.today().strftime(\"%Y-%m-%d\"))]","2f022feb":"# Informa\u00e7\u00f5es b\u00e1sicas do dataset do registro civil\na = sp2.loc[sp2['new_deaths_covid19'] == sp2['new_deaths_covid19'].max()].filter(['date'])\n\nprint(\"Informa\u00e7\u00f5es b\u00e1sicas do dataset do registro civil\")\nprint(\"\u00daltima data de atualiza\u00e7\u00e3o: \",sp2['date'].max())\nprint(\"N\u00famero de obitos registrados: \",sp2['new_deaths_covid19'].sum())\nprint(\"N\u00famero maximo de registros de obitos: \", sp2['new_deaths_covid19'].max())\nprint(\"Data do n\u00famero maximo de registros de obitos: \", a['date'].max())\nprint(\"M\u00e9dia de obitos registrados: \",round(sp2['new_deaths_covid19'].mean(),0))","6fa5d5db":"# Informa\u00e7\u00f5es de data\nsp['month'] = sp['date'].dt.month\nsp['weekday'] = sp['date'].dt.weekday\nsp['day'] = sp['date'].dt.day\n\n# Estat\u00edstica de casos\nsp['cases_quant'] = sp['cases'].diff()\nsp['cases_mm3'] = sp['cases_quant'].rolling(3).mean()\nsp['cases_mm7'] = sp['cases_quant'].rolling(7).mean()\nsp['cases_sd3'] = sp['cases_quant'].rolling(3).std()\nsp['cases_sd7'] = sp['cases_quant'].rolling(7).std()\n\n# Estat\u00edsticas de n\u00famero de mortes\nsp['deaths_quant'] = sp['deaths'].diff()\nsp['deaths_mm3'] = sp['deaths_quant'].rolling(3).mean()\nsp['deaths_mm7'] = sp['deaths_quant'].rolling(7).mean()\nsp['deaths_sd3'] = sp['deaths_quant'].rolling(3).std()\nsp['deaths_sd7'] = sp['deaths_quant'].rolling(7).std()\n\n# Taxa de letalidade\nsp['tx_casos'] = round(sp['deaths_quant']\/sp['cases_quant'],2)\nsp['tx_casos_mm3'] = sp['tx_casos'].rolling(3).mean()\nsp['tx_casos_mm7'] = sp['tx_casos'].rolling(7).mean()\n\n# Sinaliza\u00e7\u00e3o das informa\u00e7\u00f5es das restri\u00e7\u00f5es do estado de S\u00e3o Paulo\nm = (sp['date']) >(pd.to_datetime('2020-03-24') - datetime.timedelta(1*365\/12))\nsp['flag_quarentena'] = m.astype(int)\n\nn = (sp['date']) >(pd.to_datetime('2020-05-11') - datetime.timedelta(1*365\/12))\nsp['flag_rodizio'] = n.astype(int)\n\np = (sp['date']) >(pd.to_datetime('2020-05-07') - datetime.timedelta(1*365\/12))\nsp['flag_mascara'] = p.astype(int)\n\nq = (sp['date']) >(pd.to_datetime('2020-04-27') - datetime.timedelta(1*365\/12))\nsp['flag_aux_emg'] = p.astype(int)\n\n# Estat\u00edsticas dos registros de obitos no registro civil\nsp2['new_death_mm3'] = sp2['new_deaths_covid19'].rolling(3).mean()\nsp2['new_death_mm7'] = sp2['new_deaths_covid19'].rolling(7).mean()\nsp2['new_death_sd3'] = sp2['new_deaths_covid19'].rolling(3).std()\nsp2['new_death_sd7'] = sp2['new_deaths_covid19'].rolling(7).std()","24ba2131":"# Enriquecimento da base com a base de registro civil\nbase = pd.merge(sp,sp2, on = 'date')\nbase = base.filter(['date','epidemiological_week_2020','month','weekday','day','region','state','uf','cases','cases_quant','cases_mm3',\n 'cases_mm7','cases_sd3','cases_sd7','deaths','deaths_quant','deaths_mm3','deaths_mm7','deaths_sd3','deaths_sd7','tx_casos','tx_casos_mm3',\n 'tx_casos_mm7','flag_quarentena','flag_rodizio','flag_mascara','flag_aux_emg','deaths_covid19','new_deaths_covid19','new_death_mm3',\n 'new_death_mm7','new_death_sd3','new_death_sd7'])","4eab7536":"# Correla\u00e7\u00f5es\ncorr = round((base).corr(method = 'spearman'),2)\nplt.figure(figsize=(8,6))\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns)\nplt.title(\"Correla\u00e7\u00f5es entre os casos de e a\u00e7\u00f5es de governo covid-19 no estado de S\u00e3o Paulo\")\nplt.show()","9e1f7302":"# Tratamento de nulos\nbase = base.fillna(value = 0)","a7d68c2b":"# Gr\u00e1fico acumulativo\nplt.figure(figsize=(12,6))\nplt.plot(base['date'],base['cases'])\nplt.plot(base['date'],base['deaths'])\nplt.title(\"Gr\u00e1fico de crescimento do covid-19 no estado de S\u00e3o Paulo\")\nplt.legend(['Casos', 'Mortes'])\nplt.axvline(pd.to_datetime('2020-03-24'), color='r', linestyle='--', lw=2) #\u00ednicio da quarentena\nplt.axvline(pd.to_datetime('2020-04-27'), color='g', linestyle='--', lw=2) #inicio da obriga\u00e7\u00e3o do uso de mascaras\nplt.axvline(pd.to_datetime('2020-05-07'), color='y', linestyle='--', lw=2) #inicio do pagamento do auxilio emergencial\nplt.show()","b605625d":"# Gr\u00e1fico quantitativo\nplt.figure(figsize=(12,6))\nplt.plot(base['date'],base['cases_quant'])\nplt.plot(base['date'],base['cases_mm3'])\nplt.plot(base['date'],base['cases_mm7'])\nplt.plot(base['date'],base['deaths_quant'])\nplt.title(\"Gr\u00e1fico de crescimento do covid-19 no estado de S\u00e3o Paulo\")\nplt.axvline(pd.to_datetime('2020-03-24'), color='r', linestyle='--', lw=2) #\u00ednicio da quarentena\nplt.axvline(pd.to_datetime('2020-04-27'), color='g', linestyle='--', lw=2) #inicio da obriga\u00e7\u00e3o do uso de mascaras\nplt.axvline(pd.to_datetime('2020-05-07'), color='y', linestyle='--', lw=2) #inicio do pagamento do auxilio emergencial\nplt.legend(['Casos', 'Casos MM3','Casos MM7','Mortes'])\nplt.show()","2b878978":"# Gr\u00e1fico quantitativo\nplt.figure(figsize=(12,6))\nplt.plot(base['date'],base['tx_casos'])\nplt.plot(base['date'],base['tx_casos_mm3'])\nplt.plot(base['date'],base['tx_casos_mm7'])\nplt.title(\"Gr\u00e1fico da taxa de letalidade do covid-19 no estado de S\u00e3o Paulo\")\nplt.axvline(pd.to_datetime('2020-03-24'), color='r', linestyle='--', lw=2) #\u00ednicio da quarentena\nplt.axvline(pd.to_datetime('2020-04-27'), color='g', linestyle='--', lw=2) #inicio da obriga\u00e7\u00e3o do uso de mascaras\nplt.axvline(pd.to_datetime('2020-05-07'), color='y', linestyle='--', lw=2) #inicio do pagamento do auxilio emergencial\nplt.legend(['Taxa de letalidade'])\nplt.show()","04b57598":"# Gr\u00e1fico de obitos por registro civil\nplt.figure(figsize=(12,6))\nplt.bar(base['date'],base['new_deaths_covid19'])\nplt.plot(base['date'],base['new_death_mm3'])\nplt.plot(base['date'],base['new_death_mm7'])\nplt.title(\"Gr\u00e1fico de registro de obitos no dia de covid-19 no estado de S\u00e3o Paulo\")\nplt.axvline(pd.to_datetime('2020-03-24'), color='r', linestyle='--', lw=2) #\u00ednicio da quarentena\nplt.axvline(pd.to_datetime('2020-04-27'), color='g', linestyle='--', lw=2) #inicio da obriga\u00e7\u00e3o do uso de mascaras\nplt.axvline(pd.to_datetime('2020-05-07'), color='y', linestyle='--', lw=2) #inicio do pagamento do auxilio emergencial\n#plt.legend(['N\u00ba de registro de obitos - via data de obito'])\nplt.show()","b5fc7a6d":"# Gr\u00e1fico de obitos por registro civil por semana epidemi\nplt.figure(figsize=(12,6))\nplt.bar(base['epidemiological_week_2020'],base['new_deaths_covid19'])\nplt.title(\"Gr\u00e1fico de registro de obitos por semana epidemiologicas de covid-19 no estado de S\u00e3o Paulo\")\nplt.legend(['N\u00ba de registro de obitos - via data de obito'])\nplt.show()","41206e09":"# Modelagem supervisionada - Regress\u00e3o\nfrom sklearn.feature_selection import mutual_info_regression, SelectKBest,f_regression\nfrom sklearn.model_selection import KFold, cross_val_score, GridSearchCV, train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor,GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt","ddae3c16":"# Tratamento de dados\nbase['weekday'] = pd.Series(base['weekday'], dtype=\"string\")\nweek = pd.get_dummies(base[\"weekday\"])\ndel base['weekday']\nweek.rename(columns={0:'domingo',1:'segunda',2:'terca',3:'quarta',4:'quinta',5:'sexta',6:'sabado'},inplace=True)\nbase = pd.concat([base,week],axis=1)\nbase.shape","675f9560":"# Filtro de dados \nbase = base.filter(['cases_quant','cases_mm3','cases_mm7','cases_sd3', 'cases_sd7','deaths_mm3','deaths_mm7',\n 'deaths_sd3','deaths_sd7','flag_rodizio', 'flag_mascara','flag_aux_emg','date','domingo', 'segunda', 'terca',\n 'quarta', 'quinta', 'sexta', 'sabado'])","54a441c9":"# Sele\u00e7\u00e3o de recursos via correla\u00e7\u00e3o de spearman\ncor = base.corr(method = 'spearman')\ncor_target = abs(cor['cases_quant'])\nrelevant_features = cor_target[cor_target>0.5]\ncorr2 = pd.DataFrame(relevant_features).T\nsel_corr_sper = list(corr2.columns)\nsel_corr_sper.append(\"date\")","51086b00":"# Sele\u00e7\u00e3o de recursos via correla\u00e7\u00e3o de spearman\nbase = base.filter(sel_corr_sper)\n\n# Retirando as datas sem casos\nbase = base[base['date']>\"2020-03-03\"]","b11e5d83":"# Divis\u00e3o da base de dados\ntreino1 = base[base['date'] < \"2020-05-29\"]\nteste1 = base[base['date'] >= \"2020-05-29\"]\ntreino1.shape, teste1.shape","5ed0acc9":"# Divis\u00e3o entre os regressores e a variavel target\nXtr, ytr = treino1.drop(['cases_quant','date'], axis=1), treino1['cases_quant']\nXval, yval = teste1.drop(['cases_quant','date'], axis=1), teste1['cases_quant']\nXtr.shape, Xval.shape","bfead7c3":"# Pr\u00e9-processo MinMax\nmin_max=MinMaxScaler()\nXtrm=min_max.fit_transform(Xtr)\nXvalm=min_max.fit_transform(Xval)","c4dd81ad":"# Modelos para sele\u00e7\u00e3o\nmodels = [] \nmodels.append(('ADA', AdaBoostRegressor())) \nmodels.append(('GBM', GradientBoostingRegressor())) \nmodels.append(('RFT', RandomForestRegressor())) \nmodels.append(('CART', DecisionTreeRegressor())) \n\n# Avalia os algoritmos\nresults = [] \nnames = [] \n\nfor name, model in models: \n    cv_results = cross_val_score(model, Xtrm, ytr, cv=10,scoring = 'neg_mean_squared_error') \n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std()) \n    print(msg)\n\n# Compara os algoritmos\nsns.set(rc={'figure.figsize':(8,7)})\nfig = plt.figure() \nfig.suptitle('Compara\u00e7\u00e3o de modelos') \nax = fig.add_subplot(111) \nplt.boxplot(results) \nax.set_xticklabels(names)\nplt.show()","402db805":"# Grid search: Treinamento para o melhor modelo Random Forest\nscoring = 'neg_mean_squared_error'\nkfold = KFold(n_splits=10)\nmodel = RandomForestRegressor(random_state = 7)\n\n# Grid search: par\u00e2metros\nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [10, 15],\n    'max_features': [2, 3, 4],\n    #'min_samples_leaf': [3, 4, 5],\n    #'min_samples_split': [8, 10],\n    'n_estimators': [100, 200, 300]\n}\n\n# Execu\u00e7\u00e3o do grid search\nCV_model = GridSearchCV(estimator=model, param_grid=param_grid,cv=kfold,scoring=scoring)\nCV_model_result = CV_model.fit(Xtrm, ytr)\n\n# Print resultados\nprint(\"Best: %f using %s\" % (CV_model_result.best_score_, CV_model_result.best_params_))","79f60572":"# Melhor modelo\nbaseline = RandomForestRegressor(**CV_model_result.best_params_)\nbaseline.fit(Xtrm,ytr)","e19a4f80":"# Previs\u00e3o de casos\np = baseline.predict(Xvalm)","37c0eac0":"# Metricas\nmeanSquaredError=mean_squared_error(yval, p)\nprint(\"MSE:\", round(meanSquaredError,2))\nrootMeanSquaredError = sqrt(meanSquaredError)\nprint(\"RMSE:\", round(rootMeanSquaredError,2))","0998c7c6":"# Avalia\u00e7\u00e3o da previs\u00e3o \na = pd.Series(p)\nb = pd.Series(yval)\nx = {'Previsto': a} \ny = {'Realizado': b} \nw = pd.DataFrame(x)\nz = pd.DataFrame(y)\n\ndf_teste = pd.concat([w.reset_index(drop=True), z.reset_index()], axis=1)\n\ndf_teste[[\"Previsto\",\"Realizado\"]].plot(figsize=(15, 5),\n                                        title='Gr\u00e1fico de linhas - Previsto e Realizado',\n                                        grid=True)\nplt.show()\n\ndf_teste[[\"Previsto\",\"Realizado\"]].round(0).T","28ca6066":"# Importancia das variaveis\nsns.set(rc={'figure.figsize':(8, 8)})\nfeatures = Xtr.columns\nimportances = baseline.feature_importances_\nindices = np.argsort(importances)\n\nplt.title('Importancia das vari\u00e1veis')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Importancia relativa')\nplt.show()","0a46f716":"### Previs\u00e3o do numero de casos confirmados","7dd1e536":"#### Engenharia de recursos","5c300365":"### Entrada de dados de n\u00famero de obitos por dia do obito","918c7fd2":"### Gr\u00e1ficos","bbf81a6c":"### Verifica\u00e7\u00e3o das informa\u00e7\u00f5es da COVID-19 no estado de S\u00e3o Paulo\n\nA idea deste notebook \u00e9 enriquecer a base diaria do covid-19, avaliar as a\u00e7\u00f5es governamentais para a pandemia e criar um modelo de previs\u00e3o do n\u00famero de obitos \n\n* Entrada de dados\n* Sele\u00e7\u00e3o de informa\u00e7\u00f5es do estado de S\u00e3o Paulo\n* Cria\u00e7\u00e3o de recursos\n* Analise explor\u00e1toria de dados\n* Analise de series de tempo\n* Gr\u00e1ficos\n\nFontes para enriquecimento da base:\n- Registro civil: https:\/\/brasil.io\/dataset\/covid19\/obito_cartorio\/search=&date=&state=SP&epidemiological_week_2019=&epidemiological_week_2020="}}