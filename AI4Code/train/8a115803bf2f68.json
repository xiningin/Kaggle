{"cell_type":{"69b4ed59":"code","5e1d110a":"code","09622c3b":"code","a752b8d1":"code","28a381c3":"code","988ccc17":"code","93516d33":"code","2e81a27c":"code","fbbc0032":"code","83c95c19":"code","452868a1":"code","e4f3468a":"code","78ad224f":"code","fd453ffa":"code","885f5732":"code","f74c9626":"code","93fa744c":"code","6c059e5e":"markdown","c12aa2f2":"markdown","2ac8ff18":"markdown","9249a290":"markdown"},"source":{"69b4ed59":"from fastai.vision.all import *","5e1d110a":"datapath = Path(\"\/kaggle\/input\/hubmap-kidney-segmentation\/\")","09622c3b":"sample_subdf = pd.read_csv(datapath\/\"sample_submission.csv\")\nsubdf = pd.read_csv(\"\/kaggle\/input\/hubmapsubmissions\/submission_v1.csv\")","a752b8d1":"subdf","28a381c3":"id2rle = dict(zip(subdf['id'], subdf['predicted']))","988ccc17":"def enc2mask(encs, shape):\n    \"shape : (w,h)\"\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for m,enc in enumerate(encs):\n        if isinstance(enc,np.float) and np.isnan(enc): continue\n        s = enc.split()\n        for i in range(len(s)\/\/2):\n            start = int(s[2*i]) - 1\n            length = int(s[2*i+1])\n            img[start:start+length] = 1 + m\n    return img.reshape(shape).T\n\ndef rle_encode_less_memory(img):\n    pixels = img.T.flatten()\n    pixels[0] = 0\n    pixels[-1] = 0\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 2\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","93516d33":"import rasterio, cv2, gc","2e81a27c":"def get_struct_mask(dataset, structs, names=None):\n    \"Generate mask for anatomical struct including only names\"\n    struct_mask = np.zeros(dataset.shape)\n\n    for _,row in structs.iterrows():\n        if names is None:\n            coords = array(row['geometry']['coordinates'][0])\n            struct_mask = cv2.fillPoly(struct_mask, pts =[coords], color=255);\n        \n        elif row['properties']['classification']['name'] in names:   \n            coords = array(row['geometry']['coordinates'][0])\n            struct_mask = cv2.fillPoly(struct_mask, pts =[coords], color=255);\n\n    return struct_mask.astype(np.uint8)","fbbc0032":"# def get_cortex_mask(dataset, structs):\n#     cortex_mask = np.zeros(dataset.shape)\n\n#     for _,row in structs.iterrows():\n#         if row['properties']['classification']['name'] == 'Cortex':   \n#             coords = array(row['geometry']['coordinates'][0])\n#             cortex_mask = cv2.fillPoly(cortex_mask, pts =[coords], color=255);\n\n#     return cortex_mask.astype(np.uint8)","83c95c19":"public_testids = ['afa5e8098', 'b9a3865fc', 'c68fe75ea', 'b2dc8411c', '26dc41664']","452868a1":"testid = public_testids[0]","e4f3468a":"new_id2rle = {}","78ad224f":"for testid in progress_bar(public_testids):\n\n    structs = pd.read_json(datapath\/f'test\/{testid}-anatomical-structure.json')\n\n    dataset = rasterio.open(datapath\/f'test\/{testid}.tiff') \n\n\n#     cortex_mask = get_cortex_mask(dataset, structs)\n    cortex_mask = get_struct_mask(dataset, structs)\n\n    rle_mask = enc2mask([id2rle[testid]], dataset.shape[::-1])\n\n    # set non-cortex preds to 0\n    rle_mask[cortex_mask == 0] = 0\n\n    del cortex_mask, dataset\n    gc.collect()\n\n    new_rle = rle_encode_less_memory(rle_mask)\n    \n    new_id2rle[testid] = new_rle","fd453ffa":"subdf['predicted'] = subdf['id'].map(new_id2rle)","885f5732":"sample_subdf = sample_subdf[['id']].merge(subdf, on='id', how='left')\nsample_subdf['predicted'] = sample_subdf['predicted'].fillna('1 1')","f74c9626":"sample_subdf.to_csv(\"submission.csv\",index=False)","93fa744c":"sample_subdf","6c059e5e":"### Filter out struct","c12aa2f2":"You can replace `submission_v1.csv` with your own public test preds ","2ac8ff18":"### Submit","9249a290":"### rle utils"}}