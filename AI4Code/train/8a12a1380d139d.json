{"cell_type":{"5877accf":"code","919daf08":"code","acd3f908":"code","be07ce4c":"code","eb5f7027":"code","935b351f":"code","ceea0ec8":"code","f2449544":"code","b0497d63":"code","d303f621":"code","41452b18":"code","493f9e0f":"code","ef087af8":"code","b8fb82f7":"code","07c21d0c":"code","11dee901":"code","d0ff7eb6":"code","ba94a84f":"code","a142873c":"code","5cd00511":"code","739c9def":"code","793842cd":"code","25363d9f":"code","b3e897ff":"code","ccfe5e9b":"code","c8b54ab8":"code","eb173bb5":"code","f09e88d9":"code","9bbd4fa1":"code","ab9d395f":"code","9caf9fa1":"code","05f178f7":"code","e10a14cc":"code","67f3ac10":"code","80ec48d5":"markdown","dcfadfcd":"markdown","3e1e1e6f":"markdown","5410e19a":"markdown","4d11e681":"markdown","3fb2184c":"markdown","1d4a0920":"markdown","98071f36":"markdown","8a79f321":"markdown"},"source":{"5877accf":"#import library\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\n#import xgboost as xgb\n#import lightgbm as lgb\nfrom scipy.special import boxcox1p\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nimport numpy as np\nimport pandas as pd \n%matplotlib inline\nimport matplotlib.pyplot as plt  \nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew \n\nimport pandas_profiling","919daf08":"#Charger les donn\u00e9es\ndviz = (\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndviza = (\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(dviz)\ntest = pd.read_csv(dviza)","acd3f908":"#pourcentage de donn\u00e9es vide par colonnes\na=(train.isnull().sum()\/train.count())*100\na","be07ce4c":"#Correlation entre les colonnes\nco = train.corr()\nmapp = sns.heatmap(co, vmin=-1, vmax=1 , center=0, square= True)\nmapp","eb5f7027":"f, ax = plt.subplots(figsize=(12, 9))\ncorrmat = train.corr()\nk = 11 #number of variables for heatmap\n\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\n\ncm = np.corrcoef(train[cols].values.T)\n\nsns.set(font_scale=1.25)\n\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\n\nplt.show()","935b351f":"#Trouver les colonnes avec des fortes cardinalit\u00e9s\nprofiling_train = pandas_profiling.ProfileReport(train)\nprofiling_test = pandas_profiling.ProfileReport(test)","ceea0ec8":"profiling_train\nprofiling_test","f2449544":"#trouver les colonnes avec le plus de valeurs manquantes\npourcent_null = train.isnull().sum()\/train.shape[0]*100\npourcent_null.sort_values()\n","b0497d63":"train.iloc[:,:]\ntrain.iloc[:,np.where(pourcent_null > 75)[0]]","d303f621":"#Supprimer les valeurs avec plus de 75% de donn\u00e9es manquantes\ntrain.drop(train.iloc[:,np.where(pourcent_null > 75)[0]], axis=1)","41452b18":"#Remplir les donn\u00e9es categorielles par \"None\" quand c'est vide\ntrain.select_dtypes(include=['object']).fillna(\"NONE\")","493f9e0f":"train.select_dtypes(exclude=['object']).isna().sum()","ef087af8":"#Remplir par la mediane\ntrain[\"LotFrontage\"].fillna(train[\"LotFrontage\"].median(skipna=True), inplace=True)\ntrain[\"GarageYrBlt\"].fillna(train[\"GarageYrBlt\"].median(skipna=True), inplace=True)\ntrain[\"MasVnrArea\"].fillna(train[\"MasVnrArea\"].median(skipna=True), inplace=True)","b8fb82f7":"train.select_dtypes(exclude=['object']).isna().sum()","07c21d0c":"sns.distplot(train['SalePrice'] , fit=norm);","11dee901":"sns.distplot(train['SalePrice'] , fit=norm);\n\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n# Get the fitted parameters used by the function\n\n(mu, sigma) = norm.fit(train['SalePrice'])\n\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n\n\n#Now plot the distribution\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n\n      loc='best')\n\nplt.ylabel('Frequency')\n\nplt.title('SalePrice distribution')\n\n\n\n\n#Get also the QQ-plot\n\nfig = plt.figure()\n\nres = stats.probplot(train['SalePrice'], plot=plt)\n\nplt.show()","d0ff7eb6":"num_cols = train._get_numeric_data().columns\ncols = train.columns\ncat_cols = list(set(cols) - set(num_cols))","ba94a84f":"skewed_feats = train[num_cols].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\n\nprint(\"\\nSkew in numerical features: \\n\")\n\nskewness = pd.DataFrame({'Skew' :skewed_feats})\n\nskewness.head(10)","a142873c":"skew_log = np.log1p(skewness)\nskew_log.head(10)","5cd00511":"#Les donn\u00e9es non num\u00e9riques\ntrain.select_dtypes(include=['object']).nunique()","739c9def":"train.dtypes","793842cd":"train[\"GarageFinish\"].value_counts()","25363d9f":"train[\"CentralAir\"].value_counts()","b3e897ff":"train[\"Street\"].value_counts()","ccfe5e9b":"train[\"Street\"] = train[\"Street\"].astype('category')\ntrain[\"Street\"] = train[\"Street\"].cat.codes\n\ntrain[\"CentralAir\"] = train[\"CentralAir\"].astype('category')\ntrain[\"CentralAir\"] = train[\"CentralAir\"].cat.codes\n\ntrain['GarageFinish']= train['GarageFinish'].astype('str')\ntrain['GarageFinish'] = LabelEncoder().fit_transform(train['GarageFinish'])","c8b54ab8":"#verification du label encoding\ntrain[\"CentralAir\"].value_counts()","eb173bb5":"# recupertion des colonnes a valeurs numeriques\nNum_train = train.select_dtypes(exclude=['object'])","f09e88d9":"Num_train","9bbd4fa1":"# la fonction de cross validation\nn_folds = 5\n# rmsle_crossval s'appelle avec un mod\u00e8le d\u00e9finit, le dataframe de training \"df_train\" et la target target_train ()\ndef rmsle_crossval(model,Num_train,target_train):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(Num_train.values)\n    rmse= np.sqrt(-cross_val_score(model,Num_train.values, target_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","ab9d395f":"data= Num_train.values\n#variables explicatives\nx=data[:,0:38]\n\n#varibale cible\ny=data[:,38]\n\n#subdivision des donn\u00e9es \nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size= 400,random_state=0)\nprint(x_train.shape,x_test.shape,y_train.shape,y_test.shape)","9caf9fa1":"#Choix des 3 mod\u00e8les a entrainer\nmodel1= RandomForestRegressor(n_estimators = 1200, random_state = 883, n_jobs=-1)\nmodel2= ElasticNet(random_state=0)\nmodel3=  Lasso(fit_intercept=False,normalize=False)","05f178f7":"#le scoring des mod\u00e8les\nprint(\"cross val du model1:\" +str(rmsle_crossval(model1,Num_train,y)))\nprint(\"cross val du model2:\"  +str(rmsle_crossval(model2,Num_train,y)))\nprint(\"cross val du model3:\"  +str(rmsle_crossval(model3,Num_train,y)))","e10a14cc":"target_train = train[\"CentralAir\"]","67f3ac10":"\nmodel = RandomForestRegressor(n_estimators=1200, \n                      criterion='gini',\n                      max_depth=7,\n                      min_samples_split=6, \n                      min_samples_leaf=6, \n                      min_weight_fraction_leaf=5, \n                      max_features='auto', \n                      oob_score=True, \n                      n_jobs=-1, \n                      random_state=None, \n                      verbose=1, \n                      warm_start=False)","80ec48d5":"## Choix des variables categorielles a encoder","dcfadfcd":"# Data Engineering\/Feature Engineering :\n## Gestion des donn\u00e9es manquantes et Nulles","3e1e1e6f":"## Etudes de la r\u00e9partition (skewness) des donn\u00e9es","5410e19a":"## Pour les colonnes ayant un skew important effectuer un log1p","4d11e681":"## Analyser la r\u00e9partition de SalePrice","3fb2184c":"## Label Encoding des donn\u00e9es Categorielles","1d4a0920":"## Mod\u00e8les et Scoring","98071f36":"# Exploration des Donn\u00e9es","8a79f321":"### Remplir les donn\u00e9es Num\u00e9riques par leurs m\u00e9dianes quand c'est vide"}}