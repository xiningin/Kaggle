{"cell_type":{"f92d4947":"code","19851cd9":"code","6c03d6db":"code","a07dc2e1":"code","5a63ac7e":"code","464b5977":"code","144c92a7":"code","d40562e1":"code","67214b57":"code","e10e4710":"code","eb492451":"code","527d567d":"code","49f849fc":"code","5b4a3945":"code","24d92de1":"code","5bd0ef45":"code","94a3a68d":"code","1d08f5cb":"code","2412e754":"code","8f0c2b74":"code","5e91e497":"code","53a0267b":"code","a6177c33":"code","8d66aef9":"code","a308000f":"code","0f607bdd":"code","7c773044":"markdown","3fbec5b7":"markdown","844b644a":"markdown","5d64aa35":"markdown","4104e812":"markdown","2a02c584":"markdown","27985eb8":"markdown","52e9c950":"markdown","a2dcf59d":"markdown","65a48273":"markdown","508929f5":"markdown","7ebfc47a":"markdown","f4e819ca":"markdown","907775e0":"markdown","1c6b8316":"markdown","fbfffc96":"markdown","525c94a5":"markdown","52ba9aa4":"markdown"},"source":{"f92d4947":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19851cd9":"data1=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\ndata2=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","6c03d6db":"data1.head()","a07dc2e1":"data2.head()","5a63ac7e":"data1.columns=['id','title','cast','crew']\ndata3=data2.merge(data1,on='id')","464b5977":"data3.head()","144c92a7":"# Parse the stringified features into their corresponding python objects\nfrom ast import literal_eval\nfeatures = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    data3[feature] = data3[feature].apply(literal_eval)","d40562e1":"#geting the name of the director\ndef director(n):\n    for i in n:\n        if i['job']==\"Director\":\n            return i['name']\n    return np.nan\n    ","67214b57":"#create a function to return only 3 elements\ndef get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.\n        if len(names) > 3:\n            names = names[:3]\n        return names\n\n    #Return empty list in case of missing\/malformed data\n    return []","e10e4710":"#defining new director,cast,crew,keyword features\ndata3['director']=data3['crew'].apply(director)\nfeatures = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    data3[feature] = data3[feature].apply(get_list)","eb492451":"#checking the new features\ndata3[['title_x','director','cast','crew','keywords','genres']].head()","527d567d":"# Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","49f849fc":"# Apply clean_data function to your features.\nfeatures = ['cast', 'keywords', 'director', 'genres']\n\nfor feature in features:\n    data3[feature] = data3[feature].apply(clean_data)","5b4a3945":"def meta_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])\ndata3['soup'] = data3.apply(meta_soup, axis=1)","24d92de1":"from sklearn.feature_extraction.text import CountVectorizer\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(data3['soup'])","5bd0ef45":"# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim = cosine_similarity(count_matrix, count_matrix)","94a3a68d":"data3 = data3.reset_index()\nindices = pd.Series(data3.index, index=data3['title_y'])","1d08f5cb":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return data3['title_x'].iloc[movie_indices]","2412e754":"get_recommendations(\"Spectre\")","8f0c2b74":"get_recommendations(\"Apocalypse Now\")","5e91e497":"get_recommendations(\"Before Sunrise\")","53a0267b":"from surprise import Dataset,SVD,Reader\nfrom surprise.model_selection import cross_validate\nreader = Reader()\nratings = pd.read_csv('..\/input\/the-movies-dataset\/ratings_small.csv')\nratings.head()","a6177c33":"data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)\nsvd=SVD()\ncross_validate(svd, data, measures=['RMSE', 'MAE'])","8d66aef9":"trainset = data.build_full_trainset()\nsvd.fit(trainset)","a308000f":"ratings[ratings['userId'] == 10]","0f607bdd":"svd.predict(10, 2995, 3)","7c773044":"# Loading Data","3fbec5b7":"**User Based Collaborative Filtering**\nWe have an n \u00d7 m matrix of ratings, with user u\u1d62, i = 1, ...n and item p\u2c7c, j=1, \u2026m. Now we want to predict the rating r\u1d62\u2c7c if target user i did not watch\/rate an item j. The process is to calculate the similarities between target user i and all other users, select the top X similar users, and take the weighted average of ratings from these X users with similarities as weights.\n![](https:\/\/miro.medium.com\/max\/700\/1*mM089Lta5X6zkUkULcO9aA.png)\n\nWhile different people may have different baselines when giving ratings, some people tend to give high scores generally, some are pretty strict even though they are satisfied with items. To avoid this bias, we can subtract each user\u2019s average rating of all items when computing weighted average, and add it back for target user, shown as below.\n![](https:\/\/miro.medium.com\/max\/700\/1*gLbwJts3g_v2TbPRhFoNfA.png)","844b644a":"Now we create the recommendation function","5d64aa35":"We use the **CountVectorizer()** instead of **TF-IDF**. This is because we do not want to down-weight the presence of an actor\/director if he or she has acted or directed in relatively more movies. It doesn't make much intuitive sense","4104e812":"For movie with ID 2995, we get an estimated prediction of 2.467. One startling feature of this recommender system is that it doesn't care what the movie is (or what it contains). It works purely on the basis of an assigned movie ID and tries to predict ratings based on how the other users have predicted the movie.","2a02c584":"Lets see whats in data1","27985eb8":"# Let's try Collaborative Filtering\n\nThe content based engine suffers from some severe limitations. It is only capable of suggesting movies which are close to a certain movie. That is, it is not capable of capturing tastes and providing recommendations across genres.\n\n**Content-based** approach requires a good amount of information of items\u2019 own features, rather than using users\u2019 interactions and feedbacks. For example, it can be movie attributes such as genre, year, director, actor etc., or textual content of articles that can extracted by applying Natural Language Processing. **Collaborative Filtering**, on the other hand, doesn\u2019t need anything else except users\u2019 historical preference on a set of items. Because it\u2019s based on historical data, the core assumption here is that the users who have agreed in the past tend to also agree in the future. In terms of user preference, it usually expressed by two categories. **Explicit Rating**, is a rate given by a user to an item on a sliding scale, like 5 stars for Titanic. This is the most direct feedback from users to show how much they like an item. Implicit Rating, suggests users preference indirectly, such as page views, clicks, purchase records, whether or not listen to a music track, and so on. In this article, I will take a close look at collaborative filtering that is a traditional and powerful tool for recommender systems.","52e9c950":"**Item-based Collaborative Filtering**\n\nIn Item-based CF, we say two items are similar when they received similar ratings from a same user. Then, we will make prediction for a target user on an item by calculating weighted average of ratings on most X similar items from this user. One key advantage of Item-based CF is the stability which is that the ratings on a given item will not change significantly overtime, unlike the tastes of human beings.\n                        ![](https:\/\/miro.medium.com\/max\/700\/1*dPzd5-dScFplypBGeSwgUw.png)","a2dcf59d":"Lets see what user no.10 has rated wach movie","65a48273":"To implement **Single Value Decomposition** were going to use the **surprise** library.\n","508929f5":"# First try at Movie Recommendation System.\n\nMy first try at mmakking a movie recommendation sysytem.\n\nWith the rise in Data collection the use of Recommendation System has become very frequent.\n\nRecommendation Systems are a type of **information filtering** system as they **improve** the **quality of search**.\n\nRatings are used to predict the preferences of  a viewer.\n\nAmazon uses such sysytems to recommend products to its customers.\n\nAnd the USP of both Netflix and Spotify is their recommendation engines.","7ebfc47a":"# Lets try Content Based Filtering\n\nIt\u2019s mainly classified as an outgrowth and continuation of information filtering research. In this system, the objects are mainly defined by their associated features. A content-based recommender learns a profile of the new user\u2019s interests based on the features present, in objects the user has rated. It\u2019s basically a keyword specific recommender system here keywords are used to describe the items. Thus, in a content-based recommender system the algorithms used are such that it recommends users similar items that the user has liked in the past or is examining currently.\n","f4e819ca":"**Single Value Decomposition**\n\nOne way to handle the scalability and sparsity issue created by CF is to leverage a latent factor model to capture the similarity between users and items. Essentially, we want to turn the recommendation problem into an optimization problem. We can view it as how good we are in predicting the rating for items given a user. One common metric is Root Mean Square Error (RMSE). The lower the RMSE, the better the performance.\n\nNow talking about latent factor you might be wondering what is it ?It is a broad idea which describes a property or concept that a user or an item have. For instance, for music, latent factor can refer to the genre that the music belongs to. SVD decreases the dimension of the utility matrix by extracting its latent factors. Essentially, we map each user and each item into a latent space with dimension r. Therefore, it helps us better understand the relationship between users and items as they become directly comparable. The below figure illustrates this idea.\n![](https:\/\/kevinkolcheck.com\/wp-content\/uploads\/2017\/12\/latent-factors.png)","907775e0":"# TYPES OF RECOMENDER SYSTEMS:\n* Collaborative Recommender system\n* Content-based recommender system\n* Demographic based recommender system\n* Utility based recommender system\n* Knowledge based recommender system \n* Hybrid recommender system","1c6b8316":"The way we are going to do this is by using metadata like the Actors,Director,Genre,Plot Keywords","fbfffc96":"We are now in a position to create our \"metadata soup\", which is a string that contains all the metadata that we want to feed to our vectorizer (namely actors, director and keywords).","525c94a5":"Merging the data sets.","52ba9aa4":"ANd in data2"}}