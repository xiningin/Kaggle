{"cell_type":{"061d8857":"code","bbbc9194":"code","080fdaf5":"code","f18be339":"code","18c4795c":"code","a4e340e6":"code","59eea691":"code","af24b10a":"markdown","3820d3d6":"markdown","bafea94d":"markdown","993dde4f":"markdown","0244a46e":"markdown"},"source":{"061d8857":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbbc9194":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt","080fdaf5":"image = cv2.imread('..\/input\/pothole\/pothole.jpeg')\n\nkernel_sharpening = np.array([[0, -1, 0],\n                               [-1, 5, -1],\n                               [0, -1, 0]])\n\nsharpened = cv2.filter2D(image, -1, kernel_sharpening)","f18be339":"plt.figure(figsize=(7,7))\nplt.imshow(image)\nplt.title('Original'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,7))\nplt.imshow(sharpened)\nplt.title('Sharpened'), plt.xticks([]), plt.yticks([])","18c4795c":"img = cv2.imread('..\/input\/pothole\/pothole.jpeg',0)\n\nh,w = img.shape\n\nimhist = cv2.equalizeHist(img)","a4e340e6":"plt.figure(figsize=(10,10))\nplt.imshow(sharpened)\nplt.title('Sharpened'), plt.xticks([]), plt.yticks([])\n\nf = plt.figure(figsize=(10,10))\nf.add_subplot().title.set_text('Histogram Equalized')\nplt.gray()\nplt.imshow(imhist)\nplt.show(block=True)","59eea691":"\nedges =cv2.Canny(imhist,10,100)\n\n#show image histogram\nplt.figure(figsize=(7,7))\nplt.imshow(imhist)\nplt.title('histogram'), plt.xticks([]), plt.yticks([])\n\n#show image edge\nplt.figure(figsize=(7,7))\nplt.imshow(edges)\nplt.title('edge'), plt.xticks([]), plt.yticks([])","af24b10a":"selanjutnya saya melakukan konvolusi terlebih dahulu kepada gambar yang ada, guna menambahkan dan mengalikan nilai ke keluaran dan disini saya menggunakan Sharpen agar gambar terlihat lebih mencolok","3820d3d6":"langkah pertama adalah memanggil beberapa library yang dibutuhkan ","bafea94d":"setelah melakukan perebahan dengan menggunakan histogram equalized selanjutnya saya menggunakan edge guna untuk mengambil bagian tepi dari garis lubang tersebut dengan mengubah background menjadi warna gelap","993dde4f":"namun dengan hasil sharpen gambar pada lubang jalan masih belum tampak maka saya sempurnakan gambar tersebut dengan menggunakan histogram equalized guna mendapatkan kejelasan pada gambar khususnya pada lubang jalan tersebut.","0244a46e":"dengan melakukan perubahan dan mengambil garis tepian telah terdapat sebuah lubang dibagian tengah foto walaupun hasil nya masih terlihat basic karena untuk mendapatkan hasil yang cukup bagus adalah dengan menggabungkan hasil dari beberapa langkah yang dilakukan tadi.\n\nsumber refrensi : https:\/\/medium.com\/swlh\/pothole-detection-with-opencv-b9b91f1a824a\n"}}