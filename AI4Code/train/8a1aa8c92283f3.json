{"cell_type":{"78dc92bd":"code","9f69c663":"code","2a5d5a23":"code","04943af4":"code","47d78337":"code","e106f393":"code","33df7200":"code","ec453625":"code","f61b189d":"code","f36a78b3":"code","d6b76df8":"code","5e678c05":"code","05a7e6b2":"code","db6fcab1":"code","bd5cc2f8":"code","30205a5e":"code","e5324925":"code","6a4a2f75":"code","b12cad23":"code","d06dfd1e":"code","12685ba8":"code","9ab63dc6":"code","271c6bdd":"code","bcac8604":"code","937442d3":"code","b40dbd5c":"code","838cb546":"code","e87725c3":"code","14bd0447":"code","e8b270a8":"code","c1d08d3d":"code","775e30b7":"code","3cfb8d15":"code","08cfcb07":"code","01fc35d5":"code","c4f4b26f":"markdown","5c43fcbb":"markdown","24a91380":"markdown","d66ed25f":"markdown","ff9087e5":"markdown","e0f9f06b":"markdown","e9d22024":"markdown","57ff55bd":"markdown"},"source":{"78dc92bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9f69c663":"train = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/test.csv')\nclass_map_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/class_map.csv')\nsample_sub_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/sample_submission.csv')","2a5d5a23":"train.head()","04943af4":"len(train)","47d78337":"train.tail()","e106f393":"test.head()","33df7200":"test.tail()","ec453625":"## 3 outputs or prediction from 1 image. So total 12 images in test set.\nlen(test)\/3","f61b189d":"sample_sub_df.head()","f36a78b3":"class_map_df.head()","d6b76df8":"class_map_df.component_type.unique()","5e678c05":"class_map_df.component_type.value_counts()","05a7e6b2":"class_map_df.component[class_map_df.component_type=='consonant_diacritic']","db6fcab1":"class_map_df[class_map_df.component_type=='consonant_diacritic']","bd5cc2f8":"const_diac = class_map_df.component[class_map_df.component_type=='consonant_diacritic'].values\nconst_diac","30205a5e":"for diac in const_diac:\n    for i in diac:\n        print(i,end=' ')\n    print()","e5324925":"HEIGHT = 236\nWIDTH = 236\nimport PIL.Image as Image, PIL.ImageDraw as ImageDraw, PIL.ImageFont as ImageFont\nimport matplotlib.pyplot as plt\n\ndef image_from_char(char):\n    image = Image.new('RGB', (WIDTH, HEIGHT))\n    draw = ImageDraw.Draw(image)\n    myfont = ImageFont.truetype('\/kaggle\/input\/kalpurush-fonts\/kalpurush-2.ttf', 120)\n    w, h = draw.textsize(char, font=myfont)\n    draw.text(((WIDTH - w) \/ 2,(HEIGHT - h) \/ 3), char, font=myfont)\n\n    return image","6a4a2f75":"f, ax = plt.subplots(1, 7, figsize=(16, 8))\nax = ax.flatten()\n\nfor i,diac in enumerate(const_diac):\n    ax[i].imshow(image_from_char(diac), cmap='Greys')","b12cad23":"class_map_df.head()","d06dfd1e":"train.head()","12685ba8":"const_sample = train.sort_values(['consonant_diacritic']).groupby('consonant_diacritic').head(2).reset_index()\nconst_sample","9ab63dc6":"for j,i in enumerate(range(0,len(const_sample),2)):\n    print(j,i)","271c6bdd":"f, ax = plt.subplots(2, 7, figsize=(16, 8))\nax = ax.flatten()\n\nfor i,diac in enumerate(const_diac):\n    ax[i].axis(\"off\")\n    print(diac)\n    ax[i].imshow(image_from_char(diac), cmap='Greys')\nfor j,i in enumerate(range(0,len(const_sample),2)):\n    x = const_sample.iloc[i].grapheme\n    print(x)\n    ax[j+7].axis(\"off\")\n#     ax[j+7].title.set_text(x)\n    ax[j+7].imshow(image_from_char(x), cmap='Greys')","bcac8604":"class_map_df.component[class_map_df.component_type=='vowel_diacritic']","937442d3":"len(train), len(test)","b40dbd5c":"train.head()","838cb546":"ok = pd.read_parquet(f'\/kaggle\/input\/bengaliai-cv19\/train_image_data_0.parquet')\nok.head()","e87725c3":"ok = pd.merge(ok, train, on='image_id')\nok.head()","14bd0447":"len(ok), len(train)","e8b270a8":"50210*4 # 4 parquet files","c1d08d3d":"only_imgs = ok.drop(columns=['image_id','grapheme_root','vowel_diacritic','consonant_diacritic','grapheme'])\nonly_imgs.head()","775e30b7":"len(only_imgs.columns)","3cfb8d15":"HEIGHT = 137\nWIDTH = 236\nHEIGHT*WIDTH","08cfcb07":"f, ax = plt.subplots(5, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(25):\n    ax[i].axis(\"off\")\n    ax[i].imshow(only_imgs.iloc[i].values.reshape(HEIGHT,WIDTH), cmap='Greys')","01fc35d5":"# for i in range(4):\n#     ### inner train will remove other rows\n#     train_df = pd.merge(pd.read_parquet(f'\/kaggle\/input\/bengaliai-cv19\/train_image_data_{i}.parquet'), train_df, on='image_id')#.drop(['image_id'], axis=1)","c4f4b26f":"Use a small subset for visualization","5c43fcbb":"These writings are too tiny, can't see.","24a91380":"## Explore Images","d66ed25f":"Consonant diacritic names:\n    - 0\n    - chondro-bindu\n    - ref\n    - ref + jofola\n    - jofola\n    - rofola\n    - rofola + jofola","ff9087e5":"1. Lets see them in action, maybe then I'll be clearer.","e0f9f06b":"Even I can't understand some. Wonder how machine will! Some images are cut :(\n\nTry to use: https:\/\/www.kaggle.com\/c\/bengaliai-cv19\/discussion\/122731","e9d22024":"## Consonant Diacritic","57ff55bd":"## Vowel Diacritic"}}