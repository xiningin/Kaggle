{"cell_type":{"68b4e40b":"code","8bdd4da0":"code","528187a3":"code","3246707d":"code","993ca638":"code","4d3cc931":"code","bd8439df":"code","78cfe875":"code","9d823f73":"code","cdd3a981":"code","c0889327":"code","c14a94f7":"code","463434dd":"code","2e3d93fd":"code","568f0bfd":"code","216dcb51":"code","043dece9":"code","28c04d03":"code","8c024ee2":"code","adcb6e87":"code","bdf83007":"code","9a4e80df":"code","34249104":"code","c46a4826":"code","374db1d2":"code","45d9108c":"code","0cd5bbf3":"code","6f3a3a89":"code","6e2e8c26":"code","d33ac6f0":"code","412ebc8b":"code","30824360":"code","5764062e":"code","97e72262":"code","fdbdbbc4":"code","b4430437":"code","4b1b1c42":"code","3642de7d":"code","9d3a2855":"code","f6ba6343":"code","40694efe":"code","f7d4e252":"code","a1182481":"code","3a512df7":"code","b64f5729":"code","b4dccf0b":"code","ee89fda0":"code","d890f791":"code","5c312758":"code","6d9d98f9":"code","62751cec":"code","f6a05a5f":"code","a80b1083":"code","6cbb6eb1":"code","b44784fd":"code","c18881ab":"code","97ee5493":"code","72671854":"code","cfc67174":"markdown","d866394b":"markdown","f6eded6d":"markdown","d5e079d4":"markdown","0aa5a148":"markdown","98a476d1":"markdown","f4bfdd69":"markdown","0bc1c682":"markdown","b5e2c634":"markdown","838ca6fb":"markdown","311fe1ae":"markdown","10c90034":"markdown","7db61d88":"markdown","aaf9414f":"markdown","541c2ec2":"markdown","11764982":"markdown","00e70b2e":"markdown","250b7429":"markdown","07158d94":"markdown","8041c416":"markdown","c748584b":"markdown","85b461e6":"markdown","6d9ebddf":"markdown","45060bea":"markdown","abfb3daf":"markdown","53693758":"markdown","7cb1cff9":"markdown","0e5183ff":"markdown","cde89119":"markdown","98a5c9f9":"markdown","39224db5":"markdown","eb1f4ecb":"markdown"},"source":{"68b4e40b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n!pip install openpyxl\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport missingno as msno\n%matplotlib inline\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nfrom mlxtend.frequent_patterns import apriori, association_rules\nimport re","8bdd4da0":"## Introduction","528187a3":"sale=pd.read_excel('\/kaggle\/input\/retail-analysis\/all_data_copy.xlsx')#reading excel file with help of panda","3246707d":"sale.shape # verified with given detan as same number of row and column in data","993ca638":"sale.head()#first five readings","4d3cc931":"sale.tail()#last five readings","bd8439df":"sale.dtypes#features data types","78cfe875":"sale.isnull().sum()","9d823f73":"sale['Product'].nunique()","cdd3a981":"# changing dtype\nsale['Price Each'] = pd.to_numeric(sale['Price Each'], errors='coerce')#covrting object to numeric\nsale['Quantity Ordered'] = pd.to_numeric(sale['Quantity Ordered'], errors='coerce')#covrting object to numeric\nsale['Order Date'] = pd.to_datetime(sale['Order Date'],errors ='coerce') #covrting object to datetime","c0889327":"sale.info()","c14a94f7":"sale.describe(include=\"all\",datetime_is_numeric=True).round()","463434dd":"sale1 =sale.copy(deep=True)#copy dataframe for future refrence","2e3d93fd":"sale1.dropna(inplace=True)#droping null values","568f0bfd":"sale1.info()","216dcb51":"msno.bar(sale1)","043dece9":"sale1['Month']=sale1['Order Date'].astype(str).str[5:7]#creating new month column\nsale1['Month']=sale1['Month'].astype('int32')#changing month into integer\nsale1['Hour'] = sale1['Order Date'].dt.hour#creating hour column\nsale1['Day'] =sale1['Order Date'].dt.day_name()#creating day column\nsale1[['Street', 'City', 'State']] = sale1['Purchase Address'].str.split(',', expand=True)#creating state,city,state columns\nsale1[['state','zip']]=sale1.State.str.extract('(?P<state>.+?) (?P<zip>.+?\\S+)')#seprating state state from zip\nsale1['sales']=sale1['Price Each']*sale1['Quantity Ordered']#creating sales column","28c04d03":"mkt=sale1[['Order ID','Product','Quantity Ordered','Price Each','sales','Month','Day','Hour','State','City']].copy()#improved version\nmkt.rename(columns = {'Price Each':'price','Quantity Ordered':'qty','Order ID':'id'}, inplace = True)#renaming some of columns\nmkt['City'] = mkt['City'].str.strip()#remove extra space in front of city\n#dividind day into different part of days\nbins = [-1,6,12,18,24]\nlabels=['Night','Morning','Afternoon','Evening']\nmkt['part_of_day'] = pd.cut(mkt['Hour'], bins=bins, labels=labels)# new column\n\n#Dividing dataframe based on Cities\nmkt_SF=mkt[mkt['City']=='San Francisco']\nmkt_LA=mkt[mkt['City']=='Los Angeles']\nmkt_NY=mkt[mkt['City']=='New York City']\nmkt_Bo=mkt[mkt['City']=='Boston']\nmkt_At=mkt[mkt['City']=='Atlanta']\nmkt_Da=mkt[mkt['City']=='Dallas']\nmkt_Se=mkt[mkt['City']=='Seattle']\nmkt_Po=mkt[mkt['City']=='Portland']\nmkt_Au=mkt[mkt['City']=='Austin']","8c024ee2":"mkt.describe(include='all').round()","adcb6e87":"#Peak Hour City Wise\nfig,ax =  plt.subplots( 3, 3,\n                       figsize = ( 20, 15))\n  \nsns.lineplot( x = \"Month\", y = \"sales\", \n             color = 'r',ci=None, data = mkt_SF, \n             ax = ax[0][0]).set_title('San Francisco')\n  \nax[0][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Month\", y = \"sales\", \n             color = 'g',ci=None, data = mkt_LA,\n             ax = ax[0][1]).set_title('Los Angeles')\n  \nax[0][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'b',ci=None, data = mkt_NY,\n             ax = ax[0][2]).set_title('New York City')\n  \nax[0][2].tick_params(labelrotation = 25)\n  \nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Bo, \n             ax = ax[1][0]).set_title('Boston')\n  \nax[1][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Month\", y = \"sales\", \n             color = 'r',ci=None, data = mkt_At, \n             ax = ax[2][0]).set_title('Atlanta')\n  \nax[2][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Month\", y = \"sales\", \n             color = 'g',ci=None, data = mkt_Da,\n             ax = ax[1][1]).set_title('Dallas')\n  \nax[1][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'b',ci=None, data = mkt_Se,\n             ax = ax[1][2]).set_title('Seattle')\n  \nax[1][2].tick_params(labelrotation = 25)\n  \nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Po, \n             ax = ax[2][1]).set_title('Portland')\n  \nax[2][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Au, \n             ax = ax[2][2]).set_title('Austin')\n  \nax[2][2].tick_params(labelrotation = 25)\nfig.tight_layout(pad = 1.2)","bdf83007":"sns.catplot(y='sales', x='Month', col='City',col_wrap=3 ,data=mkt, kind='bar')","9a4e80df":"s_c_gp =mkt.groupby(['City'],sort = False)\ns_c_gp['sales'].sum().nlargest().plot(kind='pie',figsize=(10, 10))","34249104":"s_m_gp =mkt.groupby(['Month'],sort = False)\ns_m_gp['sales'].sum().nlargest().plot(kind='pie',figsize=(10, 10))","c46a4826":"sns.set(rc={'figure.figsize':(30,20)})\nsns.catplot(x='qty', y='Product', col='City',col_wrap=3 ,data=mkt, kind='bar')","374db1d2":"sns.lineplot(data=mkt, x=\"Month\", y=\"sales\", hue=\"City\",ci=None,style=\"City\");","45d9108c":"#Peak Hour City Wise\nfig,ax =  plt.subplots( 3, 3,\n                       figsize = ( 20, 15))\n  \nsns.lineplot( x = \"Month\", y = \"sales\", \n             color = 'r',ci=None, data = mkt_SF, \n             ax = ax[0][0]).set_title('San Francisco')\n  \nax[0][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Month\", y = \"sales\", \n             color = 'g',ci=None, data = mkt_LA,\n             ax = ax[0][1]).set_title('Los Angeles')\n  \nax[0][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'b',ci=None, data = mkt_NY,\n             ax = ax[0][2]).set_title('New York City')\n  \nax[0][2].tick_params(labelrotation = 25)\n  \nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Bo, \n             ax = ax[1][0]).set_title('Boston')\n  \nax[1][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Month\", y = \"sales\", \n             color = 'r',ci=None, data = mkt_At, \n             ax = ax[2][0]).set_title('Atlanta')\n  \nax[2][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Month\", y = \"sales\", \n             color = 'g',ci=None, data = mkt_Da,\n             ax = ax[1][1]).set_title('Dallas')\n  \nax[1][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'b',ci=None, data = mkt_Se,\n             ax = ax[1][2]).set_title('Seattle')\n  \nax[1][2].tick_params(labelrotation = 25)\n  \nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Po, \n             ax = ax[2][1]).set_title('Portland')\n  \nax[2][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Month\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Au, \n             ax = ax[2][2]).set_title('Austin')\n  \nax[2][2].tick_params(labelrotation = 25)\nfig.tight_layout(pad = 1.2)","0cd5bbf3":"sns.relplot(data=mkt, x=\"Month\", y=\"sales\",style=\"City\",hue=\"City\",height=5,aspect=3);","6f3a3a89":"#dividind day into different part of days\nbins = [-1,6,12,18,24]\nlabels=['Night','Morning','Afternoon','Evening']\nmkt['part_of_day'] = pd.cut(mkt['Hour'], bins=bins, labels=labels)# new column","6e2e8c26":"g = sns.FacetGrid(mkt_Au,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('Austin', fontsize=16);","d33ac6f0":"g = sns.FacetGrid(mkt_Po,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('Portland', fontsize=16);","412ebc8b":"g = sns.FacetGrid(mkt_Se,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('Seattle', fontsize=16);","30824360":"g = sns.FacetGrid(mkt_Da,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('Dallas', fontsize=16);","5764062e":"g = sns.FacetGrid(mkt_At,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('Atlanta', fontsize=16);","97e72262":"g = sns.FacetGrid(mkt_Bo,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('Boston', fontsize=16);","fdbdbbc4":"g = sns.FacetGrid(mkt_NY,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('New York City', fontsize=16);","b4430437":"g = sns.FacetGrid(mkt_LA,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('Los Angeles', fontsize=16);","4b1b1c42":"g = sns.FacetGrid(mkt_SF,hue=\"part_of_day\", col=\"part_of_day\",margin_titles=True)\ng.map_dataframe(sns.histplot, x=\"sales\",binwidth=2, binrange=(0, 10))\ng.fig.subplots_adjust(top=2)\ng.fig.suptitle('San Francisco', fontsize=16);","3642de7d":"sns.relplot(data=mkt_SF, y=\"Product\", x=\"sales\",col=\"part_of_day\",col_wrap=2,hue=\"Product\")","9d3a2855":"sns.relplot(data=mkt, y=\"Product\", x=\"sales\",col=\"part_of_day\",col_wrap=2,hue=\"Product\")","f6ba6343":"sns.relplot(data=mkt, y=\"Product\", x=\"sales\",col=\"part_of_day\",col_wrap=2,hue=\"Product\")","40694efe":"s_c_gp =mkt.groupby(['part_of_day'],sort = False)\ns_c_gp['sales'].sum().plot(kind='pie',figsize=(10, 10))","f7d4e252":"#Peak Hour City Wise\nfig,ax =  plt.subplots( 3, 3,\n                       figsize = ( 20, 15))\n  \nsns.lineplot( x = \"Hour\", y = \"sales\", \n             color = 'r',ci=None, data = mkt_SF, \n             ax = ax[0][0]).set_title('San Francisco')\n  \nax[0][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Hour\", y = \"sales\", \n             color = 'g',ci=None, data = mkt_LA,\n             ax = ax[0][1]).set_title('Los Angeles')\n  \nax[0][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Hour\", y = \"sales\", \n             color = 'b',ci=None, data = mkt_NY,\n             ax = ax[0][2]).set_title('New York City')\n  \nax[0][2].tick_params(labelrotation = 25)\n  \nsns.lineplot(x = \"Hour\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Bo, \n             ax = ax[1][0]).set_title('Boston')\n  \nax[1][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Hour\", y = \"sales\", \n             color = 'r',ci=None, data = mkt_At, \n             ax = ax[2][0]).set_title('Atlanta')\n  \nax[2][0].tick_params(labelrotation = 25)\nsns.lineplot( x = \"Hour\", y = \"sales\", \n             color = 'g',ci=None, data = mkt_Da,\n             ax = ax[1][1]).set_title('Dallas')\n  \nax[1][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Hour\", y = \"sales\", \n             color = 'b',ci=None, data = mkt_Se,\n             ax = ax[1][2]).set_title('Seattle')\n  \nax[1][2].tick_params(labelrotation = 25)\n  \nsns.lineplot(x = \"Hour\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Po, \n             ax = ax[2][1]).set_title('Portland')\n  \nax[2][1].tick_params(labelrotation = 25)\nsns.lineplot(x = \"Hour\", y = \"sales\", \n             color = 'y',ci=None, data = mkt_Au, \n             ax = ax[2][2]).set_title('Austin')\n  \nax[2][2].tick_params(labelrotation = 25)\nfig.tight_layout(pad = 1.2)","a1182481":"#each city group by Product\nSF_p_gp=mkt_SF.groupby('Product')\nLA_p_gp=mkt_LA.groupby('Product')\nNY_p_gp=mkt_NY.groupby('Product')\nBo_p_gp=mkt_Bo.groupby('Product')\nAt_p_gp=mkt_At.groupby('Product')\nDa_p_gp=mkt_Da.groupby('Product')\nSe_p_gp=mkt_Se.groupby('Product')\nPo_p_gp=mkt_Po.groupby('Product')\nAu_p_gp=mkt_Au.groupby('Product')","3a512df7":"fig, axes = plt.subplots(nrows=1, ncols=3)\nfg=(0,0.1,0.2,0.2,0,0.2,0.2,-0.3,-0.3,0.3)\nSe_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[0],figsize=(20, 15),explode=fg).set_title('Seattle')\nPo_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[1],figsize=(20, 15),explode=fg).set_title('Portland')\nAu_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[2],figsize=(20, 15),explode=fg).set_title('Austin');","b64f5729":"fig, axes = plt.subplots(nrows=1, ncols=3)\nBo_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[0],figsize=(20, 15),explode=fg).set_title('Boston');\nAt_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[1],figsize=(20, 15),explode=fg).set_title('Atlanta');\nDa_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[2],figsize=(20, 15),explode=fg).set_title('Dallas');","b4dccf0b":"fig, axes = plt.subplots(nrows=1, ncols=3)\nSF_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[0],figsize=(20, 15),explode=fg).set_title('San Fransico')\nLA_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[1],figsize=(20, 15),explode=fg).set_title('Los Angeles')\nNY_p_gp['sales'].sum().nlargest(10).plot(kind='pie',ax=axes[2],figsize=(20, 15),explode=fg).set_title('New York City');","ee89fda0":"fig, axes = plt.subplots(nrows=1, ncols=3)\nfg=(0,0.1,0.2,0.2,0,0.2,0.2,-0.3,-0.3,0.3)\nSe_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[0],figsize=(20, 15),explode=fg).set_title('Seattle')\nPo_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[1],figsize=(20, 15),explode=fg).set_title('Portland')\nAu_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[2],figsize=(20, 15),explode=fg).set_title('Austin');","d890f791":"fig, axes = plt.subplots(nrows=1, ncols=3)\nBo_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[0],figsize=(20, 15),explode=fg).set_title('Boston');\nAt_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[1],figsize=(20, 15),explode=fg).set_title('Atlanta');\nDa_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[2],figsize=(20, 15),explode=fg).set_title('Dallas');","5c312758":"fig, axes = plt.subplots(nrows=1, ncols=3)\nSF_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[0],figsize=(20, 15),explode=fg).set_title('San Fransico')\nLA_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[1],figsize=(20, 15),explode=fg).set_title('Los Angeles')\nNY_p_gp['qty'].sum().nlargest(10).plot(kind='pie',ax=axes[2],figsize=(20, 15),explode=fg).set_title('New York City');","6d9d98f9":"sms=mkt.copy(deep=True)","62751cec":"df_itms_togthrs = sms.groupby(['id','Product'])['qty'].sum()\ndf_itms_togthrs.head()","f6a05a5f":"df_itms_togthrss = df_itms_togthrs.unstack().fillna(0)\ndf_itms_togthrss.head()","a80b1083":"# Encode the frequency of description to 0 or 1\nencode = lambda x : 1 if (x >= 1) else 0\ndf_itms_togthrss = df_itms_togthrss.applymap(encode)\ndf_itms_togthrss.head()","6cbb6eb1":"rep_items = apriori(df_itms_togthrss, min_support = 0.001, use_colnames = True, verbose = 1)\nrep_items.head()","b44784fd":"rules = association_rules(rep_items, metric = \"confidence\", min_threshold = 0.00000002)\nrules","c18881ab":"plt.hist(rules['confidence'])\nplt.show()","97ee5493":"# Show the rules that have confidance > 0.05\nhigh_confidance = rules[rules['confidence'] > 0.05]\nresult = high_confidance [['antecedents', 'consequents']]","72671854":"result","cfc67174":"### Which time of day has the most sales?\n\n---------------------------------------------------","d866394b":"Observation\n\n---------------------------------------------\nInstances and Farutres are matching with information we already about them.Its means file loaded properly.So,We can go ahead wiht this.","f6eded6d":"### Based on Quantity","d5e079d4":"Observation\n\n------------------------------------\n\n1.Google Phone must try to follow iphone stratgey stop providing cable and headphone with their handset.\n2.Give combo offer of discount on accessories.\n\n\n---------------------------------------------------\nOn serious side confidence is not high enough to recommend anyhthing.So,Need More data for futher analysis.","0aa5a148":" ### Identify such pairs of products and suggest what promotional offers should the retail company come up with based on your outcome.\n \n ------------------------------------------------------","98a476d1":"### Creating New Features","f4bfdd69":"## Answer the following questions using the clean dataset by plotting suitable graphs:\n\n------------------------------","0bc1c682":"## Introduction\n\n----------------------------------------------\n\nAttribute Information:\n\n    Order ID: Order identification number for each product\n    Product: Product name\n    Quantity Ordered: Amount of items\n    Price Each: Price of each product per item in dollars\n    Order Date: Date of purchase\n    Purchase Address: Address of purchase order","b5e2c634":"### Based on your analysis, suggest the best working hours and the best products for the retail stores in each city.\n\n------------------------------------------------","838ca6fb":"### Best Product based on sale for each city","311fe1ae":"Observation\n--------------------------\nAfternoon","10c90034":"## Provide a summary of the cleaned dataset along with some preliminary analysis and contrast it with the uncleaned dataset wherever modifications are made.\n\n----------------------------------------","7db61d88":"Observation\n____________________________\n\nNull values are removed.","aaf9414f":"### Best Product based on quanity for each city","541c2ec2":"Observation\n\n---------------------------------\n\n1. Number of Product Types : 20","11764982":"## Prepare the data frame for further analysis. Clean it, mould it in any manner you see fit.\n\n__________________________________________________","00e70b2e":"Results\n\n-------------------------------\n\nThe results of association analysis show which item is frequently purchased with other items. ","250b7429":"Observation\n\n-----------------------------------------\n\n1. Seattle - 05:00:00\n2. Portland - 05:30:00\n3. Austin - 03:00:00\n4. Boston  - 04:30:00\n5. Atlanta - 04:30:00\n6. Dallas - 04:00:00\n7. San Fransico - 08:00:00\n8. Los Angeles - 22:00:00\n9. New York City - 01:00:00","07158d94":"### Most bought products per city.\n\n-------------------------------------------","8041c416":"### What is the distribution of sales among different cities in different months?\n\n-------------------------------------","c748584b":"### Which City had the highest sales overall?\n\n--------------------------------------------","85b461e6":"### Based on your analysis, suggest a city for establishing a new branch for the retail store backed with proper reasoning.\n\n------------------------------------------------","6d9ebddf":"## Find out the pair of products that are most sold together. \n-----------------------------------------------------------","45060bea":"### Which Month had the highest amount of sales overall?\n\n-------------------------------------------------","abfb3daf":"Observation\n\n---------------------------------------\n\n1. Boston \n2. San Francisco , Boston , Dalla, Settle, New York","53693758":"## Load the dataset into pandas and provide a summary of columns in the loaded dataset without any modification.\n\n__________________________________________________","7cb1cff9":"Observation\n\n-------------------------------\nNull values are present in each column.\n\n","0e5183ff":"# ***Retail Store Sales Analysis***\n------------------------------------------------------------------\n\n________________________________________________________\n\n","cde89119":"### What products are mostly sold at different times of the day?\n\n------------------------------------------","98a5c9f9":"## Find out the distribution of sales over different times of the day (Morning, Afternoon, Evening, Night) and answer the following for each city:\n\n---------------------------------------------------","39224db5":"Observation\n_________________________\n\n1. Whole duration of dataser is 1 year from jan-2019 to jan-2020.\n2. Overall Top Product is -> USB-C Charging Cable\n3. Number of  unique Products -> 20\n4. Price of costliset item averall - > 1700\n5. Price of cheapest item averall - >   3.0\n6. Maxmium quantity ordered - > 9\n7. Minmium quanitiy ordered - > 1","eb1f4ecb":"Observation\n_______________________\n\nWe can see that quanity and price were read as object but its is numeric , date is datetime not object. So, we have to convert it. "}}