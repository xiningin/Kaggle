{"cell_type":{"e61211fe":"code","79a13931":"code","f2418c1e":"code","efe746c3":"code","8a963ed2":"code","6fa8cc0e":"code","3e48a418":"code","4e4feb23":"code","3889b15c":"code","a73f09f5":"code","82c7c270":"code","bf5e834b":"code","303dba90":"code","da87b0d7":"code","1d1de475":"code","7b7e6265":"code","6668b6f4":"code","4e8912cd":"code","6c147973":"code","002fe59f":"code","07048923":"code","a057f995":"code","5a87d317":"code","f4afb4d2":"code","28f51593":"code","83bd314a":"code","42f5e626":"code","fa57898f":"code","060bf6ef":"code","7a385333":"code","168ba66d":"code","f290c03d":"markdown","ac2bb4ad":"markdown"},"source":{"e61211fe":"!pip install console-progressbar","79a13931":"import numpy as np\nimport scipy.io as sio \nimport os\nimport cv2\nimport json\nimport matplotlib.pyplot as plt\nimport random\nfrom console_progressbar import ProgressBar","f2418c1e":"color_to_main = {\n    'White' : 'White',\n    'Blue' : 'Blue',\n    'Silver' : 'Silver',\n    'Black' : 'Black',\n    'Grey' : 'Silver',\n    'Sky blue' : 'Blue',\n    'Red' : 'Red',\n    'Beige' : 'Brown',\n    'Green' : 'Green',\n    'Yellow' : 'Yellow',\n    'Brown' : 'Brown',\n    'Orange' : 'Orange'\n}\nmain_colors = ['White', 'Blue', 'Silver', 'Black', 'Red', 'Brown', 'Green', 'Yellow', 'Orange']","efe746c3":"def plotting(path, x1, y1, x2, y2):\n    src_image = cv.imread(path)\n    crop_image = src_image[y1:y2, x1:x2]    \n    plt.imshow(crop_image[:,:,::-1])","8a963ed2":"def image_transform(src_path, dst_path, x1, y1, x2, y2):\n    src_image = cv2.imread(src_path)\n#     print(src_path)\n    if src_image is None:\n        return\n    crop_image = src_image[y1:y2, x1:x2]\n    dst_img = cv2.resize(src=crop_image, dsize=(224, 224))\n    cv2.imwrite(dst_path, dst_img)   ","6fa8cc0e":"def save_train_val_data(fnames, labels, bboxes):\n    src_folder = '..\/input\/vehicle-color\/color_data_all\/color_data_all\/'\n    \n    num_samples = len(fnames)\n    \n    train_split = 0.8\n    num_train = int(round(num_samples * train_split))\n    train_indexes = random.sample(range(num_samples), num_samples)\n\n    pb = ProgressBar(total=100, prefix='Save train data', suffix='', decimals=3, length=50, fill='=')\n    \n    for i, ii in enumerate(train_indexes):\n#     for i in range(num_samples):\n        fname = fnames[ii]\n        label = labels[ii]\n        (x1, y1, x2, y2) = bboxes[ii]\n\n        src_path = os.path.join(src_folder, fname)\n        \n        \n        \n        # print(\"{} -> {}\".format(fname, label))\n        pb.print_progress_bar((i + 1) * 100 \/ num_samples)\n\n        if i < num_train:\n            dst_folder = '\/kaggle\/working\/data\/train\/'\n        else:\n            dst_folder = '\/kaggle\/working\/data\/valid\/'\n\n        dst_path = os.path.join(dst_folder, label)\n        if not os.path.exists(dst_path):\n            os.makedirs(dst_path)\n        dst_path = os.path.join(dst_path, fname)\n        \n        \n        image_transform(src_path, dst_path, x1, y1, x2, y2)   ","3e48a418":"with open('..\/input\/vehicle-color\/finally_boxes.json', \"r\") as read_file:\n    boxes = json.load(read_file)","4e4feb23":"len(boxes)","3889b15c":"keys =  list(boxes.keys())\nrandom.shuffle(keys)\n\ndeleted_keys = []\n\nsilv, blue, brow = [], [], []\nfor key in keys:\n    if boxes[key][1] == 'Blue':\n        blue.append(key)\n    elif boxes[key][1] == 'Silver':\n        silv.append(key)\n    elif boxes[key][1] == 'Brown':\n        brow.append(key)\n        \nrandom.shuffle(blue)\nrandom.shuffle(silv)\nrandom.shuffle(brow)\n\ndeleted_keys += blue[: int(1*len(blue)\/3)] \ndeleted_keys += silv[: int(1*len(silv)\/3)]\ndeleted_keys += brow[: int(1*len(brow)\/3)]\n\nprint(len(deleted_keys))\n\nfor del_k in deleted_keys:\n    del boxes[del_k]\n    \nkeys = list(boxes.keys())\nrandom.shuffle(keys)","a73f09f5":"fname, labels, bbox = [], [], []\nfor key in keys:\n    name = key\n    box = boxes[name]\n    if box[1] in main_colors:\n        fname.append(name.replace('\/', '.')+'.jpg')\n        labels.append(box[1])\n        bbox.append(box[0])","82c7c270":"print(len(fname))","bf5e834b":"new_dirs = ['\/kaggle\/working\/data\/train', '\/kaggle\/working\/data\/valid', '\/kaggle\/working\/data\/test']\n\nimport os\ndef make_folder(folder):\n    if not os.path.exists(folder):\n        os.makedirs(folder)\n\nfor new_dir in new_dirs:\n    make_folder(new_dir)","303dba90":"save_train_val_data(fname, labels, bbox)","da87b0d7":"import shutil\nfor dirr in new_dirs:\n    shutil.rmtree(dirr)","1d1de475":"from __future__ import print_function, division\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport numpy as np\nimport torchvision\nfrom torchvision import datasets, models, transforms\nimport matplotlib.pyplot as plt\nimport time\nimport os\nimport copy\n\nplt.ion()   # interactive mode  ","7b7e6265":"# Data augmentation and normalization for training\n# Just normalization for validation\ndata_transforms = {\n    'train': transforms.Compose([\n        transforms.RandomResizedCrop(224),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n    'valid': transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n}\n\ndata_dir = 'data\/'\nimage_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),\n                                          data_transforms[x])\n                  for x in ['train', 'valid']}\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=8,\n                                             shuffle=True, num_workers=4)\n              for x in ['train', 'valid']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'valid']}\nclass_names = image_datasets['train'].classes\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","6668b6f4":"def imshow(inp, title=None):\n    \"\"\"Imshow for Tensor.\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    inp = std * inp + mean\n    inp = np.clip(inp, 0, 1)\n    plt.imshow(inp)\n    if title is not None:\n        plt.title(title)\n    plt.pause(0.001)  # pause a bit so that plots are updated\n\n\n# Get a batch of training data\n# inputs, classes = next(iter(dataloaders['train']))\n\n# Make a grid from batch\n# out = torchvision.utils.make_grid(inputs)\n\n# imshow(out, title=[class_names[x] for x in classes])","4e8912cd":"def train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n    since = time.time()\n\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n        print('-' * 10)\n\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'valid']:\n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1)\n                    loss = criterion(outputs, labels)\n\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        # clip\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n#             if phase == 'train':\n#                 scheduler.step()\n\n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            epoch_acc = running_corrects.double() \/ dataset_sizes[phase]\n\n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n                phase, epoch_loss, epoch_acc))\n\n            # deep copy the model\n            if phase == 'valid' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n\n#         print()\n\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 60, time_elapsed % 60))\n    print('Best val Acc: {:4f}'.format(best_acc))\n\n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    return model","6c147973":"def visualize_model(model, num_images=6):\n    was_training = model.training\n    model.eval()\n    images_so_far = 0\n    fig = plt.figure()\n\n    with torch.no_grad():\n        for i, (inputs, labels) in enumerate(dataloaders['valid']):\n            inputs = inputs.to(device)\n            labels = labels.to(device)\n\n            outputs = model(inputs)\n            _, preds = torch.max(outputs, 1)\n\n            for j in range(inputs.size()[0]):\n                images_so_far += 1\n                ax = plt.subplot(num_images\/\/2, 2, images_so_far)\n                ax.axis('off')\n                ax.set_title('predicted: {}'.format(class_names[preds[j]]))\n                imshow(inputs.cpu().data[j])\n\n                if images_so_far == num_images:\n                    model.train(mode=was_training)\n                    return\n        model.train(mode=was_training)","002fe59f":"import torch.nn.functional as F\nclass FocalLoss(nn.Module):\n    def __init__(self, alpha=1., gamma=2.):\n        super().__init__()\n        self.alpha = alpha\n        self.gamma = gamma\n\n    def forward(self, inputs, targets, **kwargs):\n        CE_loss = nn.CrossEntropyLoss(reduction='none')(inputs, targets)\n        pt = torch.exp(-CE_loss)\n        F_loss = self.alpha * ((1-pt)**self.gamma) * CE_loss\n        return F_loss.mean()","07048923":"model_conv = torchvision.models.resnext101_32x8d(pretrained=True)\nfor param in model_conv.parameters():\n    param.requires_grad = False\n\n# Parameters of newly constructed modules have requires_grad=True by default\nnum_ftrs = model_conv.fc.in_features\n# model_conv.fc = nn.Linear(num_ftrs, 9)\nmodel_conv.fc = nn.Sequential(\n                                nn.Linear(num_ftrs, 512),\n                                nn.ReLU(),\n                                nn.BatchNorm1d(512),\n                                nn.Linear(512, 9)\n                                )\nmodel_conv = model_conv.to(device)\n\n# criterion = nn.CrossEntropyLoss()\ncriterion = FocalLoss()\n\n# Observe that only parameters of final layer are being optimized as\n# opposed to before.\noptimizer_conv = optim.Adam(model_conv.fc.parameters())#, lr=0.0, lr_decay=0.96)\n\n# Decay LR by a factor of 0.1 every 7 epochs\nexp_lr_scheduler = lr_scheduler.ExponentialLR(optimizer=optimizer_conv, gamma=0.96)","a057f995":"model_conv = train_model(model_conv, criterion, optimizer_conv,\n                         exp_lr_scheduler, num_epochs=50)","5a87d317":"torch.save(model_conv, '\/kaggle\/working\/data\/modresn81')","f4afb4d2":"model = torch.load('..\/input\/color80acc\/color80acc')","28f51593":"for name, param in model.named_parameters():\n    if name in ['fc.3.weight','fc.3.bias']:\n        param.requires_grad = False\n    print(param.requires_grad)\n# Parameters of newly constructed modules have requires_grad=True by default\n# num_ftrs = model.fc.in_features\n# model.fc = nn.Linear(num_ftrs, 196)\nmodel = model.to(device)\n\ncriterion = FocalLoss()\n\n# Observe that only parameters of final layer are being optimized as\n# opposed to before.\noptimizer_conv = optim.Adam(model.fc.parameters(), lr = 1e-4, weight_decay = 1e-9)#, lr=0.0, lr_decay=0.96)\n\n# Decay LR by a factor of 0.1 every 7 epochs\n# exp_lr_scheduler = lr_scheduler.ExponentialLR(optimizer=optimizer_conv, gamma=0.96)","83bd314a":"model = train_model(model, criterion, optimizer_conv,\n                         exp_lr_scheduler, num_epochs=50)","42f5e626":"torch.save(model, '\/kaggle\/working\/data\/final_model_85')","fa57898f":"def confusion_matrix(model_ft, num_images=6):\n    nb_classes = 9\n\n    confusion_matrix = torch.zeros(nb_classes, nb_classes)\n    with torch.no_grad():\n        for i, (inputs, classes) in enumerate(dataloaders['valid']):\n            \n            inputs = inputs.to(device)\n            classes = classes.to(device)\n            outputs = model_ft(inputs)\n            _, preds = torch.max(outputs, 1)\n            for t, p in zip(classes.view(-1), preds.view(-1)):\n                    confusion_matrix[t.long(), p.long()] += 1\n        print(confusion_matrix)\n        print(confusion_matrix.diag()\/confusion_matrix.sum(1))\n        return confusion_matrix","060bf6ef":"confusion_matrix(model)\nprint(class_names)","7a385333":"headers = {\"Content-type\": \"application\/json\",\n           \"X-Access-Token\": \"VfLe1Cnpc71kImp2CbIMMRsJh2TLSGtcXjMJ\"}\n\ndef get_box(path):\n    \n    image_data = base64.b64encode(open(path, 'rb').read()).decode()\n    params = json.dumps({\"image\": image_data})\n    \n    conn = httplib.HTTPSConnection(\"dev.sighthoundapi.com\", \n        context=ssl.SSLContext(ssl.PROTOCOL_TLSv1_2))\n    \n    conn.request(\"POST\", \"\/v1\/recognition?objectType=vehicle\", params, headers)\n    response = conn.getresponse()\n    result = response.read()\n    json_obj = json.loads(result)\n\n    if 'reasonCode' in json_obj and json_obj['reasonCode'] == 50202:\n        print(json_obj)\n        return 'TL'\n    \n    if not json_obj or 'objects' not in json_obj or len(json_obj['objects']) < 1:\n        return False\n    \n    annot = json_obj['objects'][0]['vehicleAnnotation']\n    vertices = annot['bounding']['vertices']\n    xy1 = vertices[0]\n    xy3 = vertices[2]\n    return xy1['x'], xy1['y'], xy3['x'], xy3['y']\n\ndef crop_car(src_path, x1, y1, x2, y2):\n    src_image = cv2.imread(src_path)\n    if src_image is None:\n        return\n    crop_image = src_image[y1:y2, x1:x2]\n    dst_img = cv2.resize(src=crop_image, dsize=(224, 224))\n    img = Image.fromarray(dst_img)\n    image = data_transforms['valid'](img).float()\n    image = torch.Tensor(image)\n    return image.unsqueeze(0).cuda()","168ba66d":"def predict_color(src):\n    resp = get_box(src)\n    image = crop_car(src, *resp)\n    preds = model(image)\n    return preds.max(1)[1]","f290c03d":"### Preprocess for input image","ac2bb4ad":"# Test"}}