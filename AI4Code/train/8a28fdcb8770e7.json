{"cell_type":{"3303f7b6":"code","f4d1b992":"code","3e7895bc":"code","fb551b3f":"code","4cf4bc98":"code","95fb41ad":"code","85a87e12":"code","7f311110":"code","ba728b01":"code","621434ed":"code","cf54e936":"code","4a6d682a":"code","2a9f4723":"code","76be651b":"code","dd46375e":"code","5fb1a588":"code","cbead24d":"code","049f8d69":"code","e8ed6422":"code","b2401b8b":"code","a1f29063":"code","d150d41e":"code","be0461a5":"code","6dcbeb0f":"code","139371ba":"code","defd6463":"code","708a6662":"code","40daf409":"code","19772216":"code","2bd03fe8":"code","025f69f7":"code","31d36dfc":"code","99725c0d":"code","30724f05":"code","274c3b62":"markdown","92d7423e":"markdown","89df3f46":"markdown","8422409f":"markdown","365e8157":"markdown","50faf6c8":"markdown","2604cfae":"markdown","817eccf2":"markdown","4919d903":"markdown","bf3c86ed":"markdown","c38ea20c":"markdown","70bd0b63":"markdown","1b33f890":"markdown","0e4eb16a":"markdown","c475bb41":"markdown","22835817":"markdown","97b51641":"markdown","9a69fba9":"markdown","1401408e":"markdown"},"source":{"3303f7b6":"# Antes de qualquer coisa, vamos importar a biblioteca Pandas\nimport pandas as pd","f4d1b992":"# Vamos criar um DataFrame do resultado de uma vota\u00e7\u00e3o.\npd.DataFrame({'Sim':[10,15], 'Nao':[21, 4]})","3e7895bc":"# Uma Serie tem apenas uma lista. Vamos criar uma Serie:\npd.Series([10,15])","fb551b3f":"# 1.1 Crie um DataFrame que tenha 3 colunas e 2 duas linhas com o nome: vendas\nvendas = pd.DataFrame({'Produ\u00e7\u00e3o':[True, True], 'Quantidade':[200, 80], 'Pre\u00e7o':[3, .5]}, index=['Chocolate', 'Banana'])\nprint(vendas)","4cf4bc98":"# 1.2 Crie uma Serie que contenha o total dos produtos. Com os seguintes valores: 600, 40\nvendas_total = pd.Series([600, 40])\nprint(vendas_total)\n","95fb41ad":"# 2. Salve o dataframe vendas criado no exerc\u00edcio 1.1 num arquivo csv chamado `vendas`\nvendas_total.to_csv('vendas.csv', sep=';')","85a87e12":"# Importa arquivo CSV\nadmissoes = pd.read_csv('..\/input\/ipeadata\/ipea_admissoes.csv')\n\n# Visualiza as primeiras linhas do dataset \nadmissoes.head()","7f311110":"# 3. Fa\u00e7a a importa\u00e7\u00e3o do arquivo CSV de demiss\u00f5es e visualize suas primeiras linhas.\ndemissoes = pd.read_csv('..\/input\/ipeadata\/ipea_demissoes.csv')\nprint(demissoes.tail())\nprint('N\u00famero meses {}'.format(len(demissoes)))\n","ba728b01":"# Mostra (quantidade de linhas, quantidade de colunas)\nadmissoes.shape","621434ed":"# Descreve os indices\nadmissoes.index","cf54e936":"# Descreve as colunas\nadmissoes.columns","4a6d682a":"# Descreve o DataFrame\nadmissoes.info()","2a9f4723":"# Mostra a qtd de linhas\nadmissoes.count()","76be651b":"# 4. Mostre a estrutura de dados do dataset de demissoes. \ndemissoes.shape\ndemissoes.index\ndemissoes.columns\ndemissoes.info()\ndemissoes.count()\n","dd46375e":"# 5. Para o dataset de admissoes, gere seus sum\u00e1rios e responda:\n#     1. Qual a soma de valores de admissoes? \nprint('Soma admissoes no per\u00edodo {:,.0f}'.format(admissoes.sum().loc[-1, ]))\nprint('Soma demissoes no per\u00edodo {:,.0f}'.format(demissoes.sum().loc[-1, ]))\n#     2. Qual a diferen\u00e7a entre o resultado de sum() e cumsum() ?\nprint('Exemplo soma acumulada')\nprint(demissoes.cumsum().head(2))\n#     3. Qual o valor m\u00ednimo de admiss\u00f5es?\nprint('M\u00ednimo de admiss\u00f5es {:,.0f} empregados'.format(admissoes['admissoes'].min()))\n#     4. Qual a maior data?\nprint('Maximo de admiss\u00f5es {:,.0f}'.format(admissoes['admissoes'].max()))\n#     5. Qual a m\u00e9dia de admissoes?\nprint('M\u00e9dia de admiss\u00f5es {:,.0f}'.format(admissoes['admissoes'].mean()))\n#     6. Qual a mediana de admissoes?\nprint('Mediana de admiss\u00f5es {:,.0f}'.format(admissoes['admissoes'].median()))\n#     7. Qual o desvio padr\u00e3o de admissoes?\nprint('Desvio de admiss\u00f5es {:,.0f}'.format(admissoes['admissoes'].std()))","5fb1a588":"# Extra: Como desabilitar Notacao Cient\u00edfica\npd.set_option('display.float_format', '{:,.2f}'.format)\n\n# Descreve os Dados\nadmissoes.admissoes.describe()","cbead24d":"# Exemplo Simplificado: Vamos calcular o sum\u00e1rio deste dataset com 5 valores.\na = pd.DataFrame({'a':[10,15,20,30,60]})\na.head()","049f8d69":"# Diferen\u00e7a entre mediana e m\u00e9dia\na.median() # mediana (o valor central) = 20\na.sum() # 135\na.mean() # media = soma dos valores \/ quantidade = 135 \/ 5 = 27\n\n# Variancia \n# (mede o quanto cada valor est\u00e1 distante da m\u00e9dia) = abs(x1 - media)**2 + abs(x2 - media)**2 .. \/ n - 1\n# (abs(10-27)**2 + abs(15 - 27)**2 + abs(20 - 27)**2 + abs(30 - 27)**2 + abs(60 - 27)**2) \/ (5 - 1) = 395\na.var() \n\n# STD - Standard Deviation ou Desvio Padr\u00e3o\n# Mede o grau de dispers\u00e3o dos dados. Indica o quanto um conjunto de dados \u00e9 uniforme.\n# Qto mais proximo de 0, mais homogeneo. Por exemplo, o desvio padr\u00e3o de [1,1,1] = 0\nimport math\nmath.sqrt(395)\n\n# Sum\u00e1rio\na.describe()","e8ed6422":"# Boxplot: Para visualizar os quartis, a mediana e os extremos (outliers)\ndemissoes.boxplot('demissoes')\n","b2401b8b":"# EXEMPLOS\n\n# Retorna apenas a coluna data do dataset de admissoes\nadmissoes['Data']\n\n# Retorna apenas a segunda data\nadmissoes.Data[1]\nadmissoes.Data.iloc[1]\n\n# Retorna as primeiras 5 linhas\nadmissoes[:5]\n\n# Retorna apenas a ultima coluna\nadmissoes.iloc[:,-1]\n\n# Cria um dataset de exemplo apenas com as linhas 3 e 5 das colunas data e admissoes\nexemplo = admissoes.loc[[3,5],['Data','admissoes']]\nexemplo\n\n# Retorna um dataset contendo apenas admissoes a partir de 2018\nacima2018 = admissoes[admissoes.iloc[:, 0] >= 2018]\nacima2018 = acima2018.copy()\n\n# Transforma a coluna data para string\n\nacima2018.loc[:, 'Data'] = acima2018['Data'].astype(str)\nprint(acima2018.head(2))\n\n# Retorna um dataset contendo apenas admissoes do ano de 2019 com o nome de a2019\na2019 = acima2018[acima2018['Data'].str.contains('2019')]\na2019","a1f29063":"# 6.1 Crie um dataset apenas com as colunas data e admissoes das admissoes do ano de 2017, sendo o nome do dataset: a2017\na2017 = admissoes[(admissoes.Data > 2017) & (admissoes.Data < 2018)]\nprint(a2017)\n","d150d41e":"# 1. Crie uma nova coluna no dataset de admissoes para o ano\nadmissoes.loc[:, 'ano'] = admissoes['Data'].astype('int')\nprint(admissoes.head(2))\n# 2. Fa\u00e7a um agrupamento para descobrir a quantidade de admiss\u00f5es por ano\nadmissoes_ano = admissoes.groupby('ano').agg('sum')\n# 3. Crie um DataFrame com o resultado da quantidade de admissoes por ano\nprint(admissoes_ano.head(2))\n# 4. Ordene os valores e responda: Qual foi o ano que teve o maior n\u00famero de admissoes?\nprint(admissoes_ano.sort_values(by='admissoes', ascending=False).head(5))\nprint('Foi o ano de 2013')","be0461a5":"# 8. Exerc\u00edcios\n# 8.1 Importe o dataset da s\u00e9rie hist\u00f3rica do IPEA de sal\u00e1rio dos pedreiros\npedreiros = pd.read_csv('..\/input\/ipeadata\/ipea_pedreiros.csv')\n# 8.2 Gere um sum\u00e1rio dos dados. Apareceu algum NaN?\nprint(pedreiros.info())\nprint('----')\n# 8.3 Qual a quantidade de registros NaN ?\nprint('N\u00famero de missing para sal\u00e1rio pedreiros {}'.format(pedreiros.salario.isnull().sum()))\n# 8.4 Apague os registros NaN. Qual a m\u00e9dia dos sal\u00e1rios dos pedreiros? \nped_sem_missing = pedreiros.dropna()\nprint('Sal\u00e1rio m\u00e9dio {:,.2f} Really????'.format(ped_sem_missing.salario.mean()))\n# 8.5 Carregue novamente o dataset e substitua os valores NaN pela mediana. E agora, qual a m\u00e9dia dos sal\u00e1rios?\npedreiros.fillna(pedreiros.median(), inplace=True)\nprint('Sal\u00e1rio m\u00e9dio com missings imputados pela mediana {:,.2f}'.format(pedreiros.salario.mean()))","6dcbeb0f":"print(admissoes.head(2))\nprint(demissoes.head(2))\nempregos = admissoes.set_index('Data').join(demissoes.set_index('data'))\nempregos.describe()\nprint(empregos.head(2))\n","139371ba":"# 1.1 RESPOSTA\n# 1.1 Crie um DataFrame que tenha 3 colunas e 2 duas linhas com o nome: vendas\n# Colunas:             Produto | Quantidade | Pre\u00e7o\n# Na primeira linha: Chocolate |    200     | 3,00 \n# Na segunda linha:     Banana |     80     | 0,50\nvendas = pd.DataFrame({'Produto':['Chocolate', 'Banana'], 'Quantidade':[200, 80], 'Pre\u00e7o':[3.00, 0.50]})\nvendas.head()","defd6463":"# 1.2 RESPOSTA\n# Crie uma Serie que contenha o total dos produtos. Com os seguintes valores: 600, 40\npd.Series([600, 40])","708a6662":"# RESPOSTA 2. Salve o dataframe vendas criado no exerc\u00edcio 1.1 num arquivo csv chamado `vendas`. \nvendas.to_csv('vendas.csv')","40daf409":"# 3. RESPOSTA Fa\u00e7a a importa\u00e7\u00e3o do arquivo CSV de demiss\u00f5es e visualize suas primeiras linhas.\ndemissoes = pd.read_csv('..\/input\/ipeadata\/ipea_demissoes.csv')\ndemissoes.head()","19772216":"# 4. RESPOSTA  Mostre a estrutura de dados do dataset de demissoes. \ndemissoes.shape\ndemissoes.index\ndemissoes.columns\ndemissoes.info()\ndemissoes.count()","2bd03fe8":"# RESPOSTA 5.1 Para o dataset de admissoes, gere seus sum\u00e1rios.\nadmissoes.admissoes.sum()\nadmissoes.admissoes.cumsum()\nadmissoes.admissoes.min()\nadmissoes.min()\nadmissoes.Data.max()\nadmissoes.admissoes.describe()","025f69f7":"# 6. RESPOSTA\na2017 = admissoes['Data'][(admissoes['Data']>=2017) & (admissoes['Data']<2018)]\na2017\n\n# ou\na2017 = admissoes[admissoes['Data'].astype(str).str.contains('2017')]\na2017\n\n# ou\na2017 = admissoes.query('Data>=2017 and Data<2018')\na2017","31d36dfc":"# 7 RESPOSTA \n# 1. Crie uma nova coluna no dataset de admissoes para o ano\nadmissoes['ano'] = round(admissoes['Data'])\nadmissoes['ano'] =  admissoes.ano.astype(int)\nadmissoes.head(20)\n\n# 2. Fa\u00e7a um agrupamento para descobrir a quantidade de admiss\u00f5es por ano\nadmissoes.groupby('ano').admissoes.sum()  # Isto gera uma Serie\nadmissoes.groupby('ano')[['admissoes']].sum() # Isto gera um DataFrame\n\n# 3. Crie um DataFrame chamado aa com o resultado da quantidade de admissoes por ano\naa = admissoes.groupby('ano')[['admissoes']].sum() \naa\n\n# 4. Qual foi o ano que teve o maior n\u00famero de admissoes?\naa.sort_values(by='admissoes', ascending=False)\n\n# Outra resultado poss\u00edvel: retorna os TOP 3 maiores anos de admissoes (sem criar o dataframe)\nadmissoes.groupby('ano').admissoes.sum().nlargest(3)","99725c0d":"# 8. RESPOSTA\n# 8.1 Importe o dataset da s\u00e9rie hist\u00f3rica do IPEA de sal\u00e1rio dos pedreiros\npedreiros = pd.read_csv('..\/input\/ipeadata\/ipea_pedreiros.csv')\n\n# 8.2 Gere um sum\u00e1rio dos dados. Apareceu algum NaN?\npedreiros.describe()\n\n# 8.3 Qual a quantidade de registros NaN ?\npedreiros.isnull().sum()\n\n# 8.3 ou\npd.isnull(pedreiros.salario).sum()\n\n# 8.3 ou\nlen(pedreiros[pedreiros.salario.isnull()])\n\n# 8.4 Apague os registros NaN. \npedreiros.dropna(inplace=True)\n\n# 8.4 Qual a m\u00e9dia dos sal\u00e1rios dos pedreiros?\npedreiros.describe()\n\n# 8.5 Carregue novamente o dataset e substitua os valores NaN pela mediana. E agora, qual a m\u00e9dia dos sal\u00e1rios?\npedreiros = pd.read_csv('..\/input\/ipeadata\/ipea_pedreiros.csv')\npedreiros = pedreiros.fillna(pedreiros.median())\npedreiros.describe()","30724f05":"# 9. RESPOSTA\n# Fa\u00e7a a combina\u00e7\u00e3o dos datasets de admissao e demissao e salve num unico dataset chamado empregos.\nempregos = admissoes.set_index('Data').join(demissoes.set_index('data'))\nempregos.head()","274c3b62":"# 1. Como criar um dataset\nA estrutura de dados no Pandas pode ser de dois tipos: DataFrame ou Serie. Um **DataFrame** \u00e9 uma estrutura de duas dimens\u00f5es, uma tabela (com colunas e linhas), enquanto que uma **Serie** tem apenas uma dimens\u00e3o (apenas uma coluna de uma tabela, s\u00f3 que a coluna n\u00e3o tem um nome). ","92d7423e":"# 2. Como salvar um DataFrame como arquivo CSV\nPara salvar como CSV um dataframe, basta usar a sintaxe `nomedodataframe.to_csv('nomearquivo.csv')`\n\n### 2. Exerc\u00edcio\nSalve o dataframe criado no exerc\u00edcio 1.1 num arquivo csv chamado `vendas.csv`. Descubra... onde o arquivo CSV foi salvo? Voc\u00ea consegue fazer o download deste arquivo?","89df3f46":"# 4. Como visualizar a estrutura dos dados\n* df.shape: (quantidade de linhas, quantidade de colunas)\n* df.index: descreve os indices\n* df.columns: descreve as colunas\n* df.info(): descreve o dataframe\n* df.count(): conta o n\u00famero de linhas que n\u00e3o tem valores NA","8422409f":"## Material Complementar\nPara quem n\u00e3o se lembra de m\u00e9dia, mediana, variancia, e desvio padr\u00e3o...","365e8157":"***\n# 10. Exerc\u00edcios Complementares (opcional)\n1. [Exerc\u00edcios Complementares de Cria\u00e7\u00e3o e Leitura de Datasets](https:\/\/www.kaggle.com\/kernels\/fork\/587970)\n2. [Exerc\u00edcios Complementares de Sele\u00e7\u00e3o de Dados](https:\/\/www.kaggle.com\/kernels\/fork\/587910)\n3. [Exerc\u00edcios Complementares de Sumariza\u00e7\u00e3o de Dados](https:\/\/www.kaggle.com\/kernels\/fork\/595524)\n4. [Exerc\u00edcios Complementares de Agrupamento e Ordena\u00e7\u00e3o de Dados](https:\/\/www.kaggle.com\/kernels\/fork\/598715)\n5. [Exerc\u00edcios Complementares para lidar com Missing Data](https:\/\/www.kaggle.com\/kernels\/fork\/598826)\n6. [Exerc\u00edcios Complementares de Renomear e Combinar Datasets](https:\/\/www.kaggle.com\/kernels\/fork\/638064)\n***\n\n### Pr\u00f3xima Aula\n[3. Diferen\u00e7as entre Econometria e Machine Learning](https:\/\/www.kaggle.com\/debkings\/3-diferen-as-entre-econometria-e-machine-learning)","50faf6c8":"### 4. Exerc\u00edcio\nMostre a estrutura de dados do dataset de demissoes. Ou seja, mostre sua quantidade de linhas e colunas, seus \u00edndices, descreva suas colunas, descreva o dataframe e mostre a quantidade de linhas de demissoes.","2604cfae":"**[Voltar para a P\u00e1gina Inicial do Curso](https:\/\/www.kaggle.com\/c\/ml-em-python)**\n\n# **Pr\u00e9-Processamento de Dados**\nNesta aula vamos aprender a manipular e formatar os dados com Python usando o Pandas. **Pandas** \u00e9 uma biblioteca para a an\u00e1lise de dados e manipula\u00e7\u00e3o da estrutura dos dados, usado para limpar, formatar e padronizar os dados.\n\n#### Conte\u00fado:\n1. Como criar um dataset\n2. Como salvar um DataFrame como arquivo CSV\n3. Como abrir dados CSV j\u00e1 existentes\n4. Como visualizar a estrutura dos dados\n5. Como gerar o Sum\u00e1rio dos dados\n6. Como selecionar subconjuntos de dados\n7. Como agrupar e ordenar\n8. Como lidar com missing data\n9. Como renomear e combinar dados\n10. Exerc\u00edcios Complementares (opcional)\n\n#### Refer\u00eancia:\n* [Resuminho do Pandas (Cheat Sheet)](https:\/\/assets.datacamp.com\/blog_assets\/PandasPythonForDataScience.pdf)\n* [Documenta\u00e7\u00e3o do Pandas](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/index.html)\n* [NumPy CheatSheet](https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Numpy_Python_Cheat_Sheet.pdf)","817eccf2":"### 8. Exerc\u00edcios\n1. Importe o dataset da s\u00e9rie hist\u00f3rica do IPEA de sal\u00e1rio dos pedreiros\n2. Gere um sum\u00e1rio dos dados. Apareceu algum NaN?\n3. Qual a quantidade de registros NaN ?\n4. Apague os registros NaN. Qual a m\u00e9dia dos sal\u00e1rios dos pedreiros? \n5. Carregue novamente o dataset e substitua os valores NaN pela mediana. E agora, qual a m\u00e9dia dos sal\u00e1rios?","4919d903":"### 3. Exerc\u00edcio\nFa\u00e7a a importa\u00e7\u00e3o do arquivo CSV de demiss\u00f5es num novo DataFrame chamado `demissoes` e visualize suas primeiras linhas.","bf3c86ed":"### 1. Exerc\u00edcio\n1.1 Crie um DataFrame que tenha 3 colunas: Produto | Quantidade | Pre\u00e7o. Como valores, tenha duas linhas com os seguintes valores na primeira linha: Chocolate | 200 | 3,00. Na segunda linha os valores: Banana | 80 | 0,50","c38ea20c":"# 7. Como agrupar e ordenar\nO agrupamento e a ordena\u00e7\u00e3o s\u00e3o muito usado para a explora\u00e7\u00e3o de dados e para v\u00e1rios outros prop\u00f3sitos. No Pandas, o agrupamento \u00e9 feito com o `groupby` e a ordena\u00e7\u00e3o com o `sort_values`. A sintaxe \u00e9 a seguinte: \n* `df.groupby([\"coluna\"]).coluna.funcao()` : para executar uma fun\u00e7\u00e3o em uma coluna\n* `df.groupby([\"coluna1\", \"coluna2\"]).coluna.funcao()` : para executar uma fun\u00e7\u00e3o em multiplas colunas\n* `df.groupby([\"coluna\"]).coluna.agg[[funcao1, funcao2])` : para executar multiplas fun\u00e7\u00f5es em uma coluna\n* `df.sort_values(by=\"coluna\", ascending=False)`: para ordenar uma coluna do maior valor para o menor\n* `df.sort_values(by=[\"coluna1\",\"coluna2\"])`: para ordenar por mais de uma coluna\n\n### 7 Exerc\u00edcios\n1. Crie uma nova coluna no dataset de admissoes para o ano: ano\n2. Fa\u00e7a um agrupamento para descobrir a quantidade de admiss\u00f5es por ano\n3. Crie um DataFrame com o resultado da quantidade de admissoes por ano\n4. Ordene os valores do DataFrame criado e responda: Qual foi o ano que teve o maior n\u00famero de admissoes?","70bd0b63":"# 3. Como abrir dados CSV j\u00e1 existentes\nSaber como criar um dataset \u00e9 muito importante, mas na maioria das vezes usamos um dataset que j\u00e1 est\u00e1 pronto.\n\nO CSV \u00e9 um arquivo separado por v\u00edrgula. A fun\u00e7\u00e3o `read_csv` do Pandas permite ler um arquivo CSV e salvar em um DataFrame. Isto \u00e9 feito da seguinte forma: `dataframe = pd.read_csv('caminho\\arquivo.csv')`","1b33f890":"# 8. Como lidar com missing data\nMissing Data ou Missing Values s\u00e3o **valores ausentes** mostrados como `NaN` que significa \"Not a Number\" e s\u00e3o do tipo float. Ter missing values no dataset \u00e9 um problema porque eles podem influenciar nas conclus\u00f5es sobre os dados. Isto porque os missing values s\u00e3o omitidos nas estat\u00edsticas e s\u00e3o ignorados nas opera\u00e7\u00f5es de count, sum, etc. Al\u00e9m disso, os valores ausentes reduzem o poder estat\u00edstico, podem enviesar a estimativa dos par\u00e2metros, reduzir a representatividade das amostras, distorcer os resultados das an\u00e1lises e gerar conclus\u00f5es inv\u00e1lidas. \n\nA melhor forma de evitar os missing values \u00e9 selecionar os registros mais completos no dataset de origem. Por\u00e9m, nem sempre isso \u00e9 poss\u00edvel porque simplesmente as vezes a informa\u00e7\u00e3o n\u00e3o est\u00e1 dispon\u00edvel. Nestes casos, as principais t\u00e9cnicas para lidar com missing data s\u00e3o:\n1. **Inser\u00e7\u00e3o:** preencher com os valores faltantes, inserir a m\u00e9dia ou mediana ou moda dos valores (para num\u00e9ricos), usar um modelo preditivo para estimar os valores faltantes ou simplesmente informar que \u00e9 um valor `Desconhecido` (para dados categ\u00f3ricos e textuais).\n2. **Exclus\u00e3o Parcial:** excluir os registros que est\u00e3o com valores faltantes.\n\nA sintaxe Python usada:\n* Para selecionar NaN: `pd.isnull()`\n* Para substituir valores NaN: `df.fillna()`\n* Para substituir NaN pela m\u00e9dia: `df.fillna(df.mean(), inplace=True)`\n* Para substituir valores presentes por outros valores: `pd.replace(\"valor\",\"novo_valor\")\n* Para remover os registros NaN: `df.dropna(inplace=True)`","0e4eb16a":"# 9. Como renomear e combinar dados\nFrequentemente precisamos renomear os dataset e tamb\u00e9m combinar dados de diferentes datasets. A fun\u00e7\u00e3o para renomear \u00e9 a `rename`, com a sintaxe `df.rename(columns={ 'nome_antigo':'novo_nome'})` para renomear nomes de colunas pelo nome. Ou ent\u00e3o `df.rename(index={0: 'primeiraColuna', 1: 'segundaColuna'})` para renomear nomes de colunas pela sua localiza\u00e7\u00e3o. \n\nA combina\u00e7\u00e3o ou integra\u00e7\u00e3o de datasets pode ser realizada com o `join`. A sintaxe \u00e9 a seguinte: `df.set_index('colunaChave').join(df2.set_index('colunaChave'))`\n\n### 9. Exerc\u00edcio\n1. Fa\u00e7a a combina\u00e7\u00e3o dos datasets de admissao e demissao e salve num unico dataset chamado empregos.\n","c475bb41":"1.2 Crie uma Serie que contenha o total dos produtos. Com os seguintes valores\n600, 40","22835817":"### 6 Exerc\u00edcios\n1. Crie um dataset apenas com as colunas data e admissoes das admissoes do ano de 2017: a2017","97b51641":"# 5. Como gerar o Sum\u00e1rio dos dados\n* df.sum(): mostra a soma de valores\n* df.cumsum(): mostra a soma acumulada dos valores\n* df.min(): mostra o m\u00ednimo valor\n* df.max(): mostra o valor m\u00e1ximo\n* df.mean(): mostra a m\u00e9dia\n* df.median(): mostra a mediana\n* df.describe(): mostra um sum\u00e1rio estat\u00edstico com a quantidade, m\u00e9dia, desvio padr\u00e3o (std), m\u00ednimo, primeiro quartil (25%), segundo quartil (50%), terceiro quartil (75%), valor m\u00e1ximo.\n\n### 5. Exerc\u00edcio\nPara o dataset de admissoes, gere seus sum\u00e1rios e responda \u00e0s seguintes perguntas:\n1. Qual a soma de valores de admissoes? \n2. Qual a diferen\u00e7a entre o resultado de sum() e cumsum() ?\n3. Qual o valor m\u00ednimo de admiss\u00f5es?\n4. Qual a maior data?\n5. Qual a m\u00e9dia de admissoes?\n6. Qual a mediana de admissoes?\n7. Qual o desvio padr\u00e3o de admissoes?\n\n**Dica:** para gerar o sum\u00e1rio de uma coluna, utilize `dataframe.coluna.funcao()`. Exemplo: `admissoes.data.min()`","9a69fba9":"# 6. Como selecionar subconjuntos de dados\n* .loc: retorna pelo nome (textual)\n* .iloc: retorna pela posi\u00e7\u00e3o (num\u00e9rico)\n* [ ]: retorna um elemento ou o range de elementos. Sendo: [linhas\/indices, colunas]","1401408e":"***\n## RESPOSTAS DOS EXERC\u00cdCIOS"}}