{"cell_type":{"a1d898ff":"code","8db302a5":"code","05c52551":"code","94a3a7a9":"code","c47513ee":"code","6697d708":"code","fa4d35f4":"code","eb2df504":"code","d600e268":"code","6c663ffb":"code","f674fb21":"code","10db9169":"code","a370990c":"code","eb8abbcb":"code","7eb8531c":"code","e5e47bb7":"code","c0b1e7f4":"code","c4f3f132":"code","518c0cb7":"code","8ff8aa71":"code","b4ecc257":"code","68f17e96":"code","0a5ff697":"code","82c6e069":"markdown"},"source":{"a1d898ff":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n\nfrom sklearn import manifold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n%matplotlib inline","8db302a5":"df = pd.read_csv(\"..\/input\/run-or-walk\/dataset.csv\")","05c52551":"df.head(10)","94a3a7a9":"df.isnull().sum()","c47513ee":"num_walk = len(df[df[\"activity\"] == 0].index)\nnum_run  = len(df[df[\"activity\"] == 1].index)\nprint(f\"There are {num_walk} walk activities\")\nprint(f\"There are {num_run} run activities\")","6697d708":"num_left   = len(df[df[\"wrist\"] == 0].index)\nnum_right  = len(df[df[\"wrist\"] == 1].index)\nprint(f\"There are {num_left} left handed individuals\")\nprint(f\"There are {num_right} right handed individuals\")","fa4d35f4":"sns.pairplot(df[[\"acceleration_x\", \"acceleration_y\", \"acceleration_z\", \"wrist\"]].sample(frac=.1).reset_index(drop=True), hue=\"wrist\")","eb2df504":"sns.pairplot(df[[\"gyro_x\", \"gyro_y\", \"gyro_z\", \"wrist\"]].sample(frac=.1).reset_index(drop=True), hue = \"wrist\")","d600e268":"sns.pairplot(df[[\"acceleration_x\", \"acceleration_y\", \"acceleration_z\", \"activity\"]].sample(frac=.1).reset_index(drop=True), hue=\"activity\")","6c663ffb":"sns.pairplot(df[[\"gyro_x\", \"gyro_y\", \"gyro_z\", \"activity\"]].sample(frac=.1).reset_index(drop=True), hue=\"activity\")","f674fb21":"acceleration_df = df[[\"acceleration_x\", \"acceleration_y\", \"acceleration_z\", \"wrist\", \"activity\"]].sample(frac=.1).reset_index(drop=True)","10db9169":"tsne = manifold.TSNE(n_components = 2, random_state=42)\n\ntransformed_data = tsne.fit_transform(acceleration_df[[\"acceleration_x\", \"acceleration_y\", \"acceleration_z\", \"wrist\"]]) ","a370990c":"tsne_df = pd.DataFrame(\n    np.column_stack((transformed_data, acceleration_df[\"activity\"])),\n    columns=[\"x\", \"y\", \"targets\"]\n)\n    \ntsne_df.loc[:, \"targets\"] = tsne_df.targets.astype(int)","eb8abbcb":"grid = sns.FacetGrid(tsne_df, hue=\"targets\", size=8)\ngrid.map(plt.scatter, \"x\", \"y\").add_legend()","7eb8531c":"y = df[\"activity\"].to_numpy()\nx = df[[\"acceleration_x\", \"acceleration_y\", \"acceleration_z\", \"wrist\", \"gyro_x\", \"gyro_y\", \"gyro_z\"]].to_numpy()\n","e5e47bb7":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33)","c0b1e7f4":"def create_baseline():\n    model = keras.Sequential(\n    [\n        layers.Dense(14, input_shape = (None,7), activation=\"relu\"),\n        layers.Dense(20, activation=\"relu\"),\n        layers.Dense(10, activation=\"relu\"),\n        layers.Dense(5, activation=\"relu\"),\n        layers.Dense(1,  activation=\"sigmoid\"),\n    ]\n    )\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","c4f3f132":"model = create_baseline()","518c0cb7":"model.summary()","8ff8aa71":"history = model.fit(x_train, y_train, batch_size=128, epochs=15)","b4ecc257":"plt.plot(history.history['accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","68f17e96":"ynew = model.predict_classes(x_test)","0a5ff697":"estimator = KerasClassifier(build_fn=create_baseline, epochs=10, batch_size=5, verbose=1)\nkfold = StratifiedKFold(n_splits=10, shuffle=True)\nresults = cross_val_score(estimator, x, y, cv=kfold)\nprint(\"Baseline: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","82c6e069":"# Making sense of running data"}}