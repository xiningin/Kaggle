{"cell_type":{"b2971afb":"code","4d65ab64":"code","53d325f6":"code","7fd3ebba":"code","8f653859":"code","80fec412":"code","eb717f93":"code","952acda7":"code","a14e6cd7":"code","1c4d2677":"code","ce0b0386":"code","59f2d44a":"code","5d026eae":"code","40cdafba":"code","5f346a89":"code","e5a01ac8":"code","8c2259f1":"code","64bb1ab9":"code","4af466d6":"code","f46bd97f":"code","759d10f2":"code","e29f5dd6":"code","a1155032":"code","372b446a":"code","f4720737":"code","97688cce":"code","930c4edd":"code","dd38378f":"code","fdeb08ed":"code","06dc45de":"code","384d57f2":"code","095a1266":"code","d100dd53":"code","2678ca6d":"code","f3cf2ed9":"code","50ecad8c":"code","bfd84054":"code","0fb6fb1f":"code","9089e2f7":"code","40508b49":"code","9221ff45":"code","fd143ffa":"code","70eedab8":"code","feccb97e":"code","456bbf10":"code","fb8a32a3":"code","8282f155":"markdown","4b67a598":"markdown","b84c1851":"markdown"},"source":{"b2971afb":"X.head()","4d65ab64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","53d325f6":"from sklearn.ensemble import AdaBoostClassifier , BaggingClassifier , RandomForestClassifier , ExtraTreesClassifier , GradientBoostingClassifier\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score","7fd3ebba":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n#bring thte data to the dataframe\ndata = pd.read_csv('\/kaggle\/input\/learn-together\/train.csv')\n\n#describe the data\ndata.describe()","8f653859":"#as id is not a feature or something, we can drop it \ndata.drop(['Id'], axis = 1 , inplace = True)\n\ndata.describe()","80fec412":"data.columns","eb717f93":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\ny = data['Cover_Type']\nX = data.drop(['Cover_Type'] , axis = 1)\nX = X.apply(lambda x : abs(x))\n#apply SelectKBest class to extract top 16 best features\n#16 has been taken after a bit of experimentation with different values\nbestfeatures = SelectKBest(score_func=chi2, k=20)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Features','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(20,'Score'))  #print 16 best features","952acda7":"y = data['Cover_Type']\nprint(type(y))","a14e6cd7":"train = data\ntrain.describe()\ntrain = train.drop('Cover_Type' , axis = 1)","1c4d2677":"test = pd.read_csv('\/kaggle\/input\/learn-together\/test.csv')\nid_ = test['Id']\ntest = test.drop('Id' , axis = 1)\ntest.describe()","ce0b0386":"features_chi = ['Horizontal_Distance_To_Roadways' , 'Horizontal_Distance_To_Fire_Points' ,\n     'Elevation' , 'Horizontal_Distance_To_Hydrology' , 'Vertical_Distance_To_Hydrology' ,\n     'Aspect' , 'Hillshade_3pm' , 'Hillshade_9am' , 'Slope' , 'Wilderness_Area4' , 'Soil_Type3' , \n     'Soil_Type10' , 'Soil_Type38' , 'Wilderness_Area1' , 'Soil_Type39' , 'Soil_Type40' , \n    'Soil_Type30' , 'Soil_Type29' , 'Hillshade_Noon' , 'Wilderness_Area3' ]","59f2d44a":"X = data[features_chi]\nprint(X.shape)\ntemp = pd.concat([X , data['Cover_Type']] , axis = 1)\n#temp = X + data['Cover_Type']\nprint(temp.shape)","5d026eae":"sns.set(rc={'figure.figsize':(12.7,10.27)})\nsns.heatmap(temp.corr() , cmap = 'gist_ncar' , annot = True)","40cdafba":"X_train , X_test , y_train , y_test = train_test_split(X , y , stratify = y , random_state = 5)","5f346a89":"base = ExtraTreeClassifier(max_depth = 500)\n\nfor n in range(100 , 1500 ,100):\n    clf = BaggingClassifier(base_estimator = base , n_estimators=n , random_state = 0)\n    clf.fit(X_train , y_train)\n    \n    y_pred = clf.predict(X_test)\n      \n    print(\"For n_estimator =  \" + str(n) , end = ' ')\n    print(accuracy_score(y_pred , y_test))","e5a01ac8":"%%time\n#RandomForestClassifier\nfor n in range(100 , 1500 ,50):\n    clf = RandomForestClassifier(n_estimators=n , random_state = 0)\n    clf.fit(X_train , y_train)\n    \n    y_pred = clf.predict(X_test)\n      \n    print(\"For Max n_estimator =  \" + str(n) , end = ' ')\n    print(accuracy_score(y_pred , y_test))","8c2259f1":"test = test[features_chi]\nprint(test.shape)","64bb1ab9":"for i in X.columns:\n    #if i not in test.columns:\n    print(type(X[i]))","4af466d6":"sns.set(rc={'figure.figsize':(5,3.27)})\nsns.distplot(train['Elevation'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Elevation'] , hist = False , norm_hist = True , color = \"b\")","f46bd97f":"from sklearn.preprocessing import MinMaxScaler , StandardScaler\nmms = MinMaxScaler()\nssc = StandardScaler()\n\nmu1 = train[[\"Elevation\"]].values.astype('float')\nmu2 = test[[\"Elevation\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\n\nsns.distplot(mu_1 , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(mu_2 , hist = False , norm_hist = True , color = \"b\")","759d10f2":"sns.distplot(train['Slope'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Slope'] , hist = False , norm_hist = True , color = \"b\")","e29f5dd6":"sns.distplot(train['Aspect'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Aspect'] , hist = False , norm_hist = True , color = \"b\")","a1155032":"mu1 = train[[\"Slope\"]].values.astype('float')\nmu2 = test[[\"Slope\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\n\nsns.distplot(mu_1 , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(mu_2 , hist = False , norm_hist = True , color = \"b\")","372b446a":"sns.distplot(train['Horizontal_Distance_To_Roadways'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Horizontal_Distance_To_Roadways'] , hist = False , norm_hist = True , color = \"b\")","f4720737":"mu1 = train[[\"Horizontal_Distance_To_Roadways\"]].values.astype('float')\nmu2 = test[[\"Horizontal_Distance_To_Roadways\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\n\nsns.distplot(mu_1 , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(mu_2 , hist = False , norm_hist = True , color = \"b\")","97688cce":"sns.distplot(train['Horizontal_Distance_To_Fire_Points' ] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Horizontal_Distance_To_Fire_Points' ] , hist = False , norm_hist = True , color = \"b\")","930c4edd":"mu1 = train[[\"Horizontal_Distance_To_Fire_Points\"]].values.astype('float')\nmu2 = test[[\"Horizontal_Distance_To_Fire_Points\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\n\nsns.distplot(mu_1 , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(mu_2 , hist = False , norm_hist = True , color = \"b\")","dd38378f":"sns.distplot(train['Horizontal_Distance_To_Hydrology'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Horizontal_Distance_To_Hydrology'] , hist = False , norm_hist = True , color = \"b\")\n","fdeb08ed":"sns.distplot(train['Vertical_Distance_To_Hydrology'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Vertical_Distance_To_Hydrology'] , hist = False , norm_hist = True , color = \"b\")\n","06dc45de":"sns.distplot(train['Hillshade_3pm'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Hillshade_3pm'] , hist = False , norm_hist = True , color = \"b\")","384d57f2":"mu1 = train[[\"Hillshade_3pm\"]].values.astype('float')\nmu2 = test[[\"Hillshade_3pm\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\n\nsns.distplot(mu_1 , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(mu_2 , hist = False , norm_hist = True , color = \"b\")","095a1266":"sns.distplot(train['Hillshade_9am'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Hillshade_9am'] , hist = False , norm_hist = True , color = \"b\")","d100dd53":"mu1 = train[[\"Hillshade_9am\"]].values.astype('float')\nmu2 = test[[\"Hillshade_9am\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\n\nsns.distplot(mu_1 , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(mu_2 , hist = False , norm_hist = True , color = \"b\")","2678ca6d":"sns.distplot(train['Hillshade_Noon'] , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(test['Hillshade_Noon'] , hist = False , norm_hist = True , color = \"b\")","f3cf2ed9":"#for i in train.columns:\n    #print(type(train[i].iloc[0]))","50ecad8c":"mu1 = train[[\"Hillshade_Noon\"]].values.astype('float')\nmu2 = test[[\"Hillshade_Noon\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\n\nsns.distplot(mu_1 , hist = False , norm_hist = True , color = \"y\")\nsns.distplot(mu_2 , hist = False , norm_hist = True , color = \"b\")","bfd84054":"mu1 = X[[\"Hillshade_9am\"]].values.astype('float')\nmu2 = test[[\"Hillshade_9am\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\nprint(mu_1.shape)\n\nX = X.drop(['Hillshade_9am'] , axis = 1)\ntest = test.drop(['Hillshade_9am'] , axis = 1) \n\nX[['Hillshade_9am']] = pd.DataFrame(mu_1)\ntest[['Hillshade_9am']] = pd.DataFrame(mu_2)","0fb6fb1f":"mu1 = X[[\"Hillshade_Noon\"]].values.astype('float')\nmu2 = test[[\"Hillshade_Noon\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\n\nX = X.drop(['Hillshade_Noon'] , axis = 1)\ntest = test.drop(['Hillshade_Noon'] , axis = 1) \n\nX[['Hillshade_Noon']] = pd.DataFrame(mu_1)\ntest[['Hillshade_Noon']] = pd.DataFrame(mu_2)","9089e2f7":"mu1 = X[[\"Hillshade_3pm\"]].values.astype('float')\nmu2 = test[[\"Hillshade_3pm\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\nprint(mu_1.shape)\n\nX = X.drop(['Hillshade_3pm'] , axis = 1)\ntest = test.drop(['Hillshade_3pm'] , axis = 1) \n\nX[['Hillshade_3pm']] = pd.DataFrame(mu_1)\ntest[['Hillshade_3pm']] = pd.DataFrame(mu_2)","40508b49":"mu1 = X[[\"Horizontal_Distance_To_Fire_Points\"]].values.astype('float')\nmu2 = test[[\"Horizontal_Distance_To_Fire_Points\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\nprint(mu_1.shape)\n\nX = X.drop(['Horizontal_Distance_To_Fire_Points'] , axis = 1)\ntest = test.drop(['Horizontal_Distance_To_Fire_Points'] , axis = 1) \n\nX[['Horizontal_Distance_To_Fire_Points']] = pd.DataFrame(mu_1)\ntest[['Horizontal_Distance_To_Fire_Points']] = pd.DataFrame(mu_2)","9221ff45":"mu1 = X[[\"Horizontal_Distance_To_Roadways\"]].values.astype('float')\nmu2 = test[[\"Horizontal_Distance_To_Roadways\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\nprint(mu_1.shape)\n\nX = X.drop(['Horizontal_Distance_To_Roadways'] , axis = 1)\ntest = test.drop(['Horizontal_Distance_To_Roadways'] , axis = 1) \n\nX[['Horizontal_Distance_To_Roadways']] = pd.DataFrame(mu_1)\ntest[['Horizontal_Distance_To_Roadways']] = pd.DataFrame(mu_2)","fd143ffa":"mu1 = X[[\"Slope\"]].values.astype('float')\nmu2 = test[[\"Slope\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\nprint(mu_1.shape)\n\nX = X.drop(['Slope'] , axis = 1)\ntest = test.drop(['Slope'] , axis = 1) \n\nX[['Slope']] = pd.DataFrame(mu_1)\ntest[['Slope']] = pd.DataFrame(mu_2)","70eedab8":"mu1 = X[[\"Elevation\"]].values.astype('float')\nmu2 = test[[\"Elevation\"]].values.astype('float')\n\nmu_1 = ssc.fit_transform(mu1)\nmu_2 = ssc.fit_transform(mu2)\nprint(mu_1.shape)\n\nX = X.drop(['Elevation'] , axis = 1)\ntest = test.drop(['Elevation'] , axis = 1) \n\nX[['Elevation']] = pd.DataFrame(mu_1)\ntest[['Elevation']] = pd.DataFrame(mu_2)","feccb97e":"model = BaggingClassifier(base_estimator = base , n_estimators=800 , random_state = 0)\n\nprint(\"Training\")\nmodel.fit(X , y)\nprint(\"Finished!!!\")\nprint(\"Predicting\")\npred = model.predict(test)","456bbf10":"submission = pd.DataFrame({ 'Id': id_,\n                            'Cover_Type': pred })\nsubmission.to_csv(\"submission_example.csv\", index=False)","fb8a32a3":"submission['Cover_Type'].value_counts()","8282f155":"To go with this one, best combination \nn_estimator = 800\nmax_depth = 500","4b67a598":"Now we will check the distribution of train and test set.. As we can infer from the size of the datasets, that they are bound to have different distributions, so we will try to normalize both the data..","b84c1851":"In v_1, the combination of BaggingClassifier with base estimator as ExtraTreeClassifier worked the best.We will start off with that."}}