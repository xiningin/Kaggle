{"cell_type":{"059fb257":"code","e09222e7":"code","05b31fa7":"code","19d12704":"code","0d8db459":"code","0bbabdfd":"code","55ba6c6b":"code","38e7dc59":"code","587e05e9":"code","2cbfe80e":"code","8c42f95d":"code","c1902a9c":"code","58b4e02b":"code","b798bc6d":"code","d9eee11e":"code","34624411":"code","bbd1ea55":"markdown","fae73acd":"markdown","fd48a070":"markdown","fc0f8c17":"markdown","c3df5067":"markdown","9faf06c2":"markdown","30fb41c0":"markdown","f28f66ee":"markdown","dbf8c45e":"markdown","3383e078":"markdown","ad1aa2db":"markdown","f6f5c136":"markdown","934f94df":"markdown"},"source":{"059fb257":"# Importing used packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt\nimport matplotlib.pyplot as pyplt\n\n\n# Import models\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import tree\nfrom sklearn.linear_model import SGDClassifier\n\n# Import accuracy score\n# from sklearn.metrics import accuracy_score","e09222e7":"# Open our test and train data from the Titanic\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\n\n# View the first 5 elements in our train dataset\ntrain_df.head()","05b31fa7":"# View all the information of our dataset\nprint(\"Train Data\\n\")\ntrain_df.info()\nprint(\"Test Data\\n\")\ntest_df.info()","19d12704":"# View the null information of our train dataset\ntrain_df.isnull().sum()","0d8db459":"# View the null information of our test dataset\ntest_df.isnull().sum()","0bbabdfd":"#Saving passenger ID for submission\ntest_passengerId = test_df['PassengerId']\n\n# Clearing PassengerId, Name, SibSp, Parch, Ticket, Cabin, and Embarked\n# from the data because I don't think these variables would correlate to survival\ntrain_df.drop(columns=['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)\ntest_df.drop(columns= ['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace= True)\n\n# Now, let's see how our train and test datas look\nprint(\"Train Data\\n\")\ntrain_df.info()\nprint(\"Test Data\\n\")\ntest_df.info()","55ba6c6b":"# Replacing train data\ntrain_age_median = train_df['Age'].median()\ntrain_df['Age'].fillna(train_age_median, inplace=True)","38e7dc59":"# Replacing test data\ntest_age_median = test_df['Age'].median()\ntest_fare_median = test_df['Fare'].median()\ntest_df['Age'].fillna(test_age_median, inplace=True)\ntest_df['Fare'].fillna(test_age_median, inplace=True)","587e05e9":"print(\"Train Data\\n\")\ntrain_df.info()\nprint(\"Test Data\\n\")\ntest_df.info()","2cbfe80e":"# Determining the variables all our models will evaluate against\nvariables = [\"Pclass\", \"Sex\", 'Age', 'Fare']\n\n# Set up dummy variables & survival\ntrain_dummy = pd.get_dummies(train_df[variables])\ntest_dummy = pd.get_dummies(test_df[variables])\n\nsurvived = train_df['Survived']","8c42f95d":"# LRG = linear regression model\nLRG = LinearRegression()\nLRG.fit(train_dummy, survived)\nLRG_prediction = LRG.predict(test_dummy)\nLRG_score = LRG.score(train_dummy, survived)","c1902a9c":"# KNN - k nearest neighbors\nKNN = KNeighborsClassifier(n_neighbors = 3)\nKNN.fit(train_dummy, survived)\nKNN_predicition = KNN.predict(test_dummy)\nKNN_score =  KNN.score(train_dummy, survived)","58b4e02b":"# DTC - decision tree classifier\nDTC = tree.DecisionTreeClassifier(random_state=42)\nDTC.fit(train_dummy, survived)\nDTC_prediction = DTC.predict(test_dummy)\nDTC_score =  DTC.score(train_dummy, survived)","b798bc6d":"# SGD - sgdclassifier\nSDG = SGDClassifier()\nSDG.fit(train_dummy, survived)\nSDG_predicition = SDG.predict(test_dummy)\nSDG_score =  SDG.score(train_dummy, survived)","d9eee11e":"# Creating a chart to visually compare scores\ntitle =  ['LRG', 'KNN', 'DTC', 'SGD']\nresults = [LRG_score, KNN_score, DTC_score, SDG_score]\npyplt.bar(title, results)","34624411":"submit = pd.DataFrame({'PassengerId' : test_passengerId.values, 'Survived': DTC_prediction})\nsubmit.to_csv(\"submission.csv\", index = False)","bbd1ea55":"# (5) Best Model Submission ","fae73acd":"# (3 - 4) Build & Evaluate the Models","fd48a070":"Viewing our datasets again.","fc0f8c17":"We can view the null information from both our test and train data.","c3df5067":"**2. Nearest Neighbors**","9faf06c2":"DTC wins!","30fb41c0":"**3. Decision Trees**","f28f66ee":"# (1) Denote where the data being loaded","dbf8c45e":"We can clear the columns of data we don't need and use `fillna` to populate missing data.","3383e078":"**1. Linear Regression**","ad1aa2db":"Populate the missing data in train and test with median (except for `Sex` because it is an object).","f6f5c136":"# (2) Exploratory Data Analysis\nWe can see that `train_df.info()` and `test_df.info()` provides us with the different columns of information collected from the passengers on the Titanic. They have different non-null counts in each and missing data.","934f94df":"**4. SGD Classifier**"}}