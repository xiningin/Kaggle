{"cell_type":{"e3eb5f61":"code","b3bb9a08":"code","5c5666e2":"code","5129f9f1":"code","2c5869d9":"code","d6deb376":"code","931604f5":"code","45176113":"code","ea1e7f0c":"code","aa0db135":"code","edc7d6ff":"code","d098e3c7":"code","3eb9a1ce":"code","57c9cf8e":"code","f0c4afcd":"code","4410b850":"code","d180500e":"code","9bd6f40e":"code","2a419193":"code","4e6ce14a":"code","9f60d2b7":"code","9529f960":"code","dfc6123e":"code","e2b219a5":"code","80d5aec0":"code","3490bd97":"code","ed1a34b3":"code","81e9b701":"code","ca948b56":"code","00456457":"code","e2fa5088":"code","3651bda8":"code","e578b6fd":"code","dfb53326":"code","2a12f32a":"code","d8a140c7":"code","1fb7be31":"code","c65e8a1f":"code","341c062d":"code","74862098":"code","f5b3bf3d":"code","47af09c4":"code","33532dcb":"code","47d96e98":"code","7a5275c0":"code","00eead7b":"code","0cc262c1":"code","1758cf6d":"code","151cc69b":"code","797fb297":"code","6bc28084":"code","a805137c":"code","aeeb5b87":"code","b8faa04d":"code","08f37d05":"code","93d225cc":"code","f109f5ab":"code","c597d3d1":"markdown","01464a99":"markdown","98a6c2ce":"markdown","dc801750":"markdown","4ea0af22":"markdown","83b0ae4b":"markdown","6f26f243":"markdown","4fbd706c":"markdown","d63da674":"markdown"},"source":{"e3eb5f61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport gc\ngc.collect()","b3bb9a08":"# !pip install pretrainedmodels\n\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\n!pip install fastai==1.0.52\nimport fastai\n\nfrom fastai import *\nfrom fastai.vision import *\n\n# from torchvision.models import *\n# import pretrainedmodels\n\nfrom utils import *\nimport sys\n\nfrom fastai.callbacks.hooks import *\n\nfrom fastai.callbacks.tracker import EarlyStoppingCallback\nfrom fastai.callbacks.tracker import SaveModelCallback","5c5666e2":"path = Path(\"..\/input\/flowers\/flowers\/\")","5129f9f1":"tfms = get_transforms(max_rotate= 10.,max_zoom=1., max_lighting=0.20, do_flip=False,\n                      max_warp=0., xtra_tfms=[flip_lr(), brightness(change=(0.3, 0.60), p=0.7), contrast(scale=(0.5, 2), p=0.7),\n                                              crop_pad(size=600, padding_mode='border', row_pct=0.,col_pct=0.),\n                                              rand_zoom(scale=(1.,1.5)), rand_crop(),\n                                              perspective_warp(magnitude=(-0.1,0.1)),\n                                              symmetric_warp(magnitude=(-0.1,0.1)) ])\n\nsrc = (ImageList.from_folder(path)\n        .split_by_rand_pct(0.2, seed=42)\n        .label_from_folder())","2c5869d9":"data = (src.transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=128)\n        .databunch(bs=64, num_workers=0)\n        .normalize(imagenet_stats))","d6deb376":"data.show_batch()","931604f5":"print(f'Classes: \\n {data.classes}')","45176113":"learn = cnn_learner(data, models.resnet50, metrics=accuracy, model_dir=\"\/temp\/model\" ).mixup()","ea1e7f0c":"learn.freeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","aa0db135":"lr=1e-3\nlearn.fit_one_cycle(2, max_lr=slice(1e-2), wd = (1e-6, 1e-4, 1e-2), pct_start=0.5)","edc7d6ff":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","d098e3c7":"learn.fit_one_cycle(2, max_lr = slice(5e-6,lr\/5), wd=(1e-6, 1e-4, 1e-2), pct_start=0.5)","3eb9a1ce":"data_big = (src.transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=256)\n        .databunch(bs=64, num_workers=0)\n        .normalize(imagenet_stats))\n\nlearn.data = data_big","57c9cf8e":"learn.freeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","f0c4afcd":"lr = 1e-5\nlearn.fit_one_cycle(2, max_lr=slice(lr), wd=(1e-6, 1e-4, 1e-2), pct_start=0.5)","4410b850":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","d180500e":"learn.fit_one_cycle(2, max_lr=slice(1e-6, 1e-4), wd=(1e-6, 1e-4, 1e-2), pct_start=0.5)","9bd6f40e":"interp = ClassificationInterpretation.from_learner(learn)\n\nlosses,idxs = interp.top_losses()\n\nlen(data_big.valid_ds)==len(losses)==len(idxs)","2a419193":"interp.plot_top_losses(9, figsize=(15,11))","4e6ce14a":"interp.plot_confusion_matrix(figsize=(12,12), dpi=60)","9f60d2b7":"interp.most_confused(min_val=2)","9529f960":"learn.save('final_model')","dfc6123e":"learn.model","e2b219a5":"class SaveFeatures():\n    features=None\n    def __init__(self, m): \n        self.hook = m.register_forward_hook(self.hook_fn)\n        self.features = None\n    def hook_fn(self, module, input, output): \n        out = output.detach().cpu().numpy()\n        if isinstance(self.features, type(None)):\n            self.features = out\n        else:\n            self.features = np.row_stack((self.features, out))\n    def remove(self): \n        self.hook.remove()","80d5aec0":"learn.model","3490bd97":"# Second last layer of the model\nlearn.model[1][4]","ed1a34b3":"sf = SaveFeatures(learn.model[1][4])","81e9b701":"_= learn.get_preds(data_big.train_ds)\n_= learn.get_preds(DatasetType.Valid)","ca948b56":"len(sf.features)","00456457":"img_path = [str(x) for x in (list(data_big.train_ds.items) +list(data_big.valid_ds.items))]\nlabel = [data_big.classes[x] for x in (list(data_big.train_ds.y.items) +list(data_big.valid_ds.y.items))]\nlabel_id = [x for x in (list(data_big.train_ds.y.items) +list(data_big.valid_ds.y.items))]","e2fa5088":"len(img_path), len(label), len(label_id)","3651bda8":"df_new = pd.DataFrame({'img_path': img_path, 'label': label, 'label_id': label_id})\ndf_new","e578b6fd":"array = np.array(sf.features)","dfb53326":"x=array.tolist()","2a12f32a":"df_new['img_repr'] = x","d8a140c7":"df_new.head()","1fb7be31":"df_new.shape","c65e8a1f":"from annoy import AnnoyIndex","341c062d":"f = len(df_new['img_repr'][0])\nt = AnnoyIndex(f, metric='euclidean')","74862098":"f","f5b3bf3d":"t","47af09c4":"ntree = 50\n\nfor i, vector in enumerate(df_new['img_repr']):\n    t.add_item(i, vector)\n_  = t.build(ntree)","33532dcb":"import time\ndef get_similar_images_annoy(img_index):\n    start = time.time()\n    base_img_id, base_vector, base_label  = df_new.iloc[img_index, [0, 3, 1]]\n    similar_img_ids = t.get_nns_by_item(img_index, 8)\n    end = time.time()\n    print(f'{(end - start) * 1000} ms')\n    return base_img_id, base_label, df_new.iloc[similar_img_ids]","47d96e98":"base_image, base_label, similar_images_df = get_similar_images_annoy(2845)","7a5275c0":"print(base_label)\nopen_image(base_image)","00eead7b":"similar_images_df","0cc262c1":"def show_similar_images(similar_images_df):\n    images = [open_image(img_id) for img_id in similar_images_df['img_path']]\n    categories = [learn.data.train_ds.y.reconstruct(y) for y in similar_images_df['label_id']]\n    return learn.data.show_xys(images, categories)","1758cf6d":"show_similar_images(similar_images_df)","151cc69b":"from scipy.spatial.distance import cosine\n\ndef get_similar_images(img_index, n=10):\n    start = time.time()\n    base_img_id, base_vector, base_label  = df_new.iloc[img_index, [0, 3, 1]]\n    cosine_similarity = 1 - df_new['img_repr'].apply(lambda x: cosine(x, base_vector))\n    similar_img_ids = np.argsort(cosine_similarity)[-11:-1][::-1]\n    end = time.time()\n    print(f'{end - start} secs')\n    return base_img_id, base_label, df_new.iloc[similar_img_ids]","797fb297":"base_image, base_label, similar_images_df = get_similar_images(2745)","6bc28084":"print(base_label)\nprint(base_image)\nopen_image(base_image)","a805137c":"similar_images_df","aeeb5b87":"show_similar_images(similar_images_df)","b8faa04d":"from sklearn.manifold import TSNE\n\nimg_repr_matrix = [list(x) for x in df_new['img_repr'].values]\ntsne = TSNE(n_components=3, verbose=10, init='pca', perplexity=30, n_iter=500, n_iter_without_progress=100)\ntsne_results_3 = tsne.fit_transform(img_repr_matrix)","08f37d05":"df_new['tsne1'] = tsne_results_3[:,0]\ndf_new['tsne2'] = tsne_results_3[:,1]\ndf_new['tsne3'] = tsne_results_3[:,2]","93d225cc":"df_new.to_parquet('similar_images')\n","f109f5ab":"import plotly_express as px\npx.scatter_3d(df_new, x='tsne1', y='tsne2', z='tsne3', color='label')","c597d3d1":"# T-SNE","01464a99":"# Progressive Image Resizing","98a6c2ce":"# Results of the model","dc801750":"# Image similarity using Cosine Similarity","4ea0af22":"# Quick Preparation of Data","83b0ae4b":"# Loading Libraries","6f26f243":"# CNN Learner - Model - ResNet50","4fbd706c":"# Fastai Hooks","d63da674":"# Image Similarity using Annoy"}}