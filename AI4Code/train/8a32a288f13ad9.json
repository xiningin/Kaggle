{"cell_type":{"83184d6e":"code","6cd6a3f7":"code","3d8b216b":"code","f06cc87b":"code","db17847e":"code","ba8b5539":"code","dbf0955f":"code","042f94df":"code","93a1e6d1":"code","b7d41fad":"code","56011ac9":"markdown","9d72b4e2":"markdown","b7ec8d28":"markdown","23461a08":"markdown","e6bc89a7":"markdown","ec7fe76d":"markdown","96ef4885":"markdown","dcbd6728":"markdown","f61c1f31":"markdown","8e6c2074":"markdown","3dd50b7e":"markdown","264397bd":"markdown","9971810f":"markdown"},"source":{"83184d6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6cd6a3f7":"df_train=pd.read_csv('\/kaggle\/input\/random-linear-regression\/train.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/random-linear-regression\/test.csv')","3d8b216b":"df_train.head()\ndf_train.info()","f06cc87b":"# from the above code we see that y has 1 null value so we will either drop the row or replace the \n# value with mean of colum 'y'\n# Here we will drop the row since we have large dataset \n\ndf_train.dropna(inplace=True)\ndf_train.info()","db17847e":"df_test.info()","ba8b5539":"plt.scatter(df_train['x'],df_train['y'],color='g',marker='.')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()","dbf0955f":"X_train=df_train[['x']]\ny_train=df_train[['y']]\nX_test=df_test[['x']]\ny_test=df_test[['y']]","042f94df":"from sklearn.linear_model import LinearRegression\nregr=LinearRegression()\nregr.fit(X_train,y_train)","93a1e6d1":"from sklearn.metrics import r2_score\nyhat=regr.predict(X_test)\nprint(\"The score of model is :\",r2_score(yhat,y_test))","b7d41fad":"plt.figure(figsize=(10,8))\nplt.scatter(X_test,y_test,color='g',marker='.',label='Test Points')\nplt.plot(X_test,yhat,color='blue',label='Regression Line')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.legend(loc='lower right')\nplt.title('X vs Y')\nplt.show()","56011ac9":"**We find that there is linear relationship between 'x' and 'y' and that linear regression is most suitable for the data**","9d72b4e2":"We will find the accuracy of our model using r2_score","b7ec8d28":"# Data Visualization","23461a08":"In the datasets we are give two columns 'x' and 'y' and we have to predict 'y' from 'x' using most suitable model. First we will find relationship between x and y and find best suitable model for the datasets.","e6bc89a7":"***The accuracy of our model comes out to be 98.83 so we see Linear Regression is the best model for the dataset***","ec7fe76d":"<center style='color:blue'><h1>Please Don't Forget To Upvote If You Find it Helpful<\/h1><\/center>","96ef4885":"# Importing Datasets","dcbd6728":"<h3><b>Linear Regression<\/b><\/h3>","f61c1f31":"Lets find the best model by plotting graph between 'x' and 'y'","8e6c2074":"# Data Preprocessing","3dd50b7e":"**In this notebook we will use libraries like:<br><br>\n1)Pandas<br>\n2)Numpy<br>\n3)Matplotlib<br>\n4)Seaborn<br>\n5)Scipy**","264397bd":"**Let's Plot graph between test points and our prediction**","9971810f":"# Building and Training the Model"}}