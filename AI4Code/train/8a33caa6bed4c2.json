{"cell_type":{"53620976":"code","6f51f513":"code","97d6c8a6":"code","36776fac":"code","9bd984b7":"code","fd803133":"code","d4581b67":"code","911d37da":"code","7ead3726":"markdown","7085e247":"markdown","7bdcafd0":"markdown"},"source":{"53620976":"#LOAD ALL PACKAGES\n!pip install contractions\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport contractions\nimport re\nimport en_core_web_sm\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom imblearn.over_sampling import SMOTE\nfrom keras.layers import Input,Embedding, LSTM, Dense, Concatenate\nfrom keras.models import Model\nfrom keras.utils import plot_model","6f51f513":"#LOAD DATA\nj = pd.read_csv('..\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')\n\n#DROP NAN ROWS\nj = j.dropna()\n\nlist(j.columns)","97d6c8a6":"#CHECK CLASSES DISTRIBUTION\nj['fraudulent'].value_counts()\n\n#DUMMY CODING CATEGORICAL VARIABLES\nj = pd.get_dummies(j, columns=['has_company_logo',\n                               'has_questions',\n                               'employment_type',\n                               'required_experience',\n                               'required_education',\n                               ])\n\nlist(j.columns)","36776fac":"#PREPARE X AND Y\nX = j[['title',\n 'location',\n 'department',\n 'company_profile',\n 'description',\n 'requirements',\n 'benefits',\n 'industry',\n 'function',\n 'has_company_logo_0',\n 'has_company_logo_1',\n 'has_questions_0',\n 'has_questions_1',\n 'employment_type_Contract',\n 'employment_type_Full-time',\n 'employment_type_Other',\n 'employment_type_Part-time',\n 'employment_type_Temporary',\n 'required_experience_Associate',\n 'required_experience_Director',\n 'required_experience_Entry level',\n 'required_experience_Executive',\n 'required_experience_Internship',\n 'required_experience_Mid-Senior level',\n 'required_experience_Not Applicable',\n 'required_education_Associate Degree',\n \"required_education_Bachelor's Degree\",\n 'required_education_Certification',\n 'required_education_High School or equivalent',\n \"required_education_Master's Degree\",\n 'required_education_Professional',\n 'required_education_Some College Coursework Completed',\n 'required_education_Unspecified',\n 'required_education_Vocational',\n 'required_education_Vocational - HS Diploma']]\n\ny = j['fraudulent'].to_list()\n\n#CONCAT ALL TEXT COLUMNS\nX['text'] = X[['title',\n 'location',\n 'department',\n 'company_profile',\n 'description',\n 'requirements',\n 'benefits',\n 'industry',\n 'function',]].agg('-'.join, axis=1) \n\nX = X[['text',\n       'has_company_logo_0',\n 'has_company_logo_1',\n 'has_questions_0',\n 'has_questions_1',\n 'employment_type_Contract',\n 'employment_type_Full-time',\n 'employment_type_Other',\n 'employment_type_Part-time',\n 'employment_type_Temporary',\n 'required_experience_Associate',\n 'required_experience_Director',\n 'required_experience_Entry level',\n 'required_experience_Executive',\n 'required_experience_Internship',\n 'required_experience_Mid-Senior level',\n 'required_experience_Not Applicable',\n 'required_education_Associate Degree',\n \"required_education_Bachelor's Degree\",\n 'required_education_Certification',\n 'required_education_High School or equivalent',\n \"required_education_Master's Degree\",\n 'required_education_Professional',\n 'required_education_Some College Coursework Completed',\n 'required_education_Unspecified',\n 'required_education_Vocational',\n 'required_education_Vocational - HS Diploma']]\n\n#PREPARE INPUT\nX['text'] = X['text'].apply(lambda x: contractions.fix(x))\nX['text'] = X['text'].apply(lambda x: re.sub('[^a-zA-z0-9\\s]','',x))\n\ndef lowerCase(input_str):\n    input_str = input_str.lower()\n    return input_str\n\nX['text'] = X['text'].apply(lambda x: lowerCase(x))\n\ndef lemma(input_str):\n    sp = en_core_web_sm.load()\n    s = sp(input_str)\n    \n    input_list = []\n    for word in s:\n        w = word.lemma_\n        input_list.append(w)\n        \n    output = ' '.join(input_list)\n    return output\n\nX['text'] = X['text'].apply(lambda x: lemma(x))\nX['text'] = X['text'].str.replace('\\xa0', '')","9bd984b7":"#VECTORIZE\ndef wordCount(df_column):\n    #df_column in df['column_name']\n    list_text = df_column.to_list()\n    one_string = ' '.join(list_text)\n    string_list = list(one_string.split(' '))\n    list_unique = list(set(string_list))\n    wordcount = len(list_unique)\n    \n    return wordcount\n\nwordCount(X['text'])\n\ntokenizer = Tokenizer(num_words = 25000, split = ' ')\ntokenizer.fit_on_texts(X['text'].values)\n\nX_nlp = tokenizer.texts_to_sequences(X['text'].values)\nX_nlp = pad_sequences(X_nlp)\n\nX_meta = X[['has_company_logo_0',\n 'has_company_logo_1',\n 'has_questions_0',\n 'has_questions_1',\n 'employment_type_Contract',\n 'employment_type_Full-time',\n 'employment_type_Other',\n 'employment_type_Part-time',\n 'employment_type_Temporary',\n 'required_experience_Associate',\n 'required_experience_Director',\n 'required_experience_Entry level',\n 'required_experience_Executive',\n 'required_experience_Internship',\n 'required_experience_Mid-Senior level',\n 'required_experience_Not Applicable',\n 'required_education_Associate Degree',\n \"required_education_Bachelor's Degree\",\n 'required_education_Certification',\n 'required_education_High School or equivalent',\n \"required_education_Master's Degree\",\n 'required_education_Professional',\n 'required_education_Some College Coursework Completed',\n 'required_education_Unspecified',\n 'required_education_Vocational',\n 'required_education_Vocational - HS Diploma']]\n\nX_nlp_train, X_nlp_test, y_train, y_test = train_test_split(\n        X_nlp, y, test_size=0.2, random_state=42)\n\nX_meta_train, X_meta_test, y_train, y_test = train_test_split(\n        X_meta, y, test_size=0.2, random_state=42)\n\nsm = SMOTE(random_state=42)\n\nX_nlp_train, y_nlp_train = sm.fit_sample(X_nlp_train, y_train)\nX_meta_train, y_train = sm.fit_sample(X_meta_train, y_train)\n\nX_meta_train = X_meta_train[['has_company_logo_0',\n 'has_company_logo_1',\n 'has_questions_0',\n 'has_questions_1',\n 'employment_type_Contract',\n 'employment_type_Full-time',\n 'employment_type_Other',\n 'employment_type_Part-time',\n 'employment_type_Temporary',\n 'required_experience_Associate',\n 'required_experience_Director',\n 'required_experience_Entry level',\n 'required_experience_Executive',\n 'required_experience_Internship',\n 'required_experience_Mid-Senior level',\n 'required_experience_Not Applicable',\n 'required_education_Associate Degree',\n \"required_education_Bachelor's Degree\",\n 'required_education_Certification',\n 'required_education_High School or equivalent',\n \"required_education_Master's Degree\",\n 'required_education_Professional',\n 'required_education_Some College Coursework Completed',\n 'required_education_Unspecified',\n 'required_education_Vocational',\n 'required_education_Vocational - HS Diploma']].values\n                             \nX_meta_test = X_meta_test[['has_company_logo_0',\n 'has_company_logo_1',\n 'has_questions_0',\n 'has_questions_1',\n 'employment_type_Contract',\n 'employment_type_Full-time',\n 'employment_type_Other',\n 'employment_type_Part-time',\n 'employment_type_Temporary',\n 'required_experience_Associate',\n 'required_experience_Director',\n 'required_experience_Entry level',\n 'required_experience_Executive',\n 'required_experience_Internship',\n 'required_experience_Mid-Senior level',\n 'required_experience_Not Applicable',\n 'required_education_Associate Degree',\n \"required_education_Bachelor's Degree\",\n 'required_education_Certification',\n 'required_education_High School or equivalent',\n \"required_education_Master's Degree\",\n 'required_education_Professional',\n 'required_education_Some College Coursework Completed',\n 'required_education_Unspecified',\n 'required_education_Vocational',\n 'required_education_Vocational - HS Diploma']].values","fd803133":"input_1 = Input(shape=(X_nlp.shape[1],))\ninput_2 = Input(shape=(26,))\n\nembedding_layer = Embedding(25000, 128)(input_1)\nLSTM_Layer_1 = LSTM(128)(embedding_layer)\n\ndense_layer_1 = Dense(32, activation='relu')(input_2)\n#dropout_layer_1 = Dropout(0.2)(dense_layer_1)\ndense_layer_2 = Dense(32, activation='relu')(dense_layer_1)\n#dropout_layer_2 = Dropout(0.2)(dense_layer_2)\n\nconcat_layer = Concatenate()([LSTM_Layer_1, dense_layer_2])\ndense_layer_3 = Dense(16, activation='relu')(concat_layer)\n\noutput = Dense(1, activation='sigmoid')(dense_layer_3)\n\nmodel = Model(inputs=[input_1, input_2], outputs=output)\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',metrics=['accuracy'])","d4581b67":"history = model.fit(x=[X_nlp_train, X_meta_train], y=y_train, \n                    epochs = 10, batch_size = 128, verbose = 1,\n                    validation_split=0.2)\n\nscore = model.evaluate(x=[X_nlp_test, X_meta_test], y=y_test, verbose=1)\n\nprint(\"Test Score:\", score[0])","911d37da":"print(\"Test Accuracy:\", score[1])","7ead3726":"![](http:\/\/)","7085e247":"![Model](https:\/\/raw.githubusercontent.com\/xga0\/fakeJobPosting\/master\/model_plot3.png)","7bdcafd0":"# A Hybrid Nerual Network Classifier with Oversample Minority Class"}}