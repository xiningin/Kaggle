{"cell_type":{"ac12698e":"code","f3c66239":"code","017f815d":"code","a3da7e15":"code","432c4b02":"code","9b20468d":"code","f1d2f92b":"code","4699f263":"code","c9ff4be7":"code","bb3c6d89":"code","0608af3d":"code","fe9918bc":"code","be63b5bc":"code","d58649be":"code","82c865f4":"code","67b73245":"code","2ec7da59":"code","9303e187":"code","60d7c8e5":"code","07ecbcc8":"code","6d61ccc3":"code","623aea5c":"code","090cd52f":"code","2d273981":"code","4e969235":"code","dca3575a":"code","b4cac5f5":"code","3451eb6f":"code","72cce405":"code","0236fbd8":"code","6eaacecc":"code","16598047":"code","474c96fa":"code","0a7b2ca2":"code","4920bcbb":"code","81f9ec20":"code","ac161311":"code","66f91b40":"code","cfcbdb9b":"code","06cac04c":"code","7904b1af":"code","181fc161":"markdown","396880cd":"markdown","effb3162":"markdown","6308fe82":"markdown","89a57bbd":"markdown","a282af5a":"markdown","07c2f95d":"markdown","6c98729f":"markdown","30e65dbd":"markdown","76a9eba4":"markdown","1c89c975":"markdown","81156ab6":"markdown","6969aac1":"markdown","b3fdf929":"markdown","c30257b6":"markdown","c482f0a0":"markdown","2533aa26":"markdown","340072be":"markdown","03f4cec8":"markdown","c966ba8d":"markdown","916d0c1d":"markdown","78bbab2a":"markdown","79a8444d":"markdown","48d2c7e2":"markdown","38ddde4b":"markdown","7a6f025f":"markdown","317399a4":"markdown","fdfe43bb":"markdown"},"source":{"ac12698e":"import os\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","f3c66239":"data_df = pd.read_csv('..\/input\/google-playstore-apps\/Google-Playstore-Full.csv')","017f815d":"data_df.sample(10)","a3da7e15":"data_df.shape","432c4b02":"data_df.columns","9b20468d":"data_df.info()","f1d2f92b":"PMS_df = data_df.copy()","4699f263":"PMS_df.Category.value_counts().tail(20)","c9ff4be7":"# shifted\nstrange_data = [' ETEA & MDCAT', ' not notified you follow -', '6', ' Speaker Pro 2019', ' Alfabe \ufffd?ren', ' Mexpost)', ' Podcasts', ' Accounting', ' Islamic Name Boy & Girl+Meaning']\na = PMS_df.Category.isin(strange_data)\nindex = []\nfor i in range(len(a)):\n    if a[i] == True:\n        index.append(i)\nPMS_df.iloc[index]","bb3c6d89":"# replaced\nPMS_df.iloc[index[0], 1:10] = list(PMS_df.iloc[index[0], 4:13])\nPMS_df.iloc[index[0], 11:] = np.nan\nPMS_df.iloc[index[1],0:10] = list(PMS_df.iloc[index[1], 4:14])\nPMS_df.iloc[index[1], 11:] = np.nan\nPMS_df.iloc[index[2], 1:10] = list(PMS_df.iloc[index[2], 2:11])\nPMS_df.iloc[index[2], 11:] = np.nan\nPMS_df.iloc[index[3], 1:10] = list(PMS_df.iloc[index[3], 2:11])\nPMS_df.iloc[index[3], 11:] = np.nan\nPMS_df.iloc[index[4], 1:10] = list(PMS_df.iloc[index[4], 2:11])\nPMS_df.iloc[index[4], 11:] = np.nan\nPMS_df.iloc[index[5], 1:10] = list(PMS_df.iloc[index[5], 2:11])\nPMS_df.iloc[index[5], 11:] = np.nan\nPMS_df.iloc[index[6], 1:10] = list(PMS_df.iloc[index[6], 2:11])\nPMS_df.iloc[index[6], 11:] = np.nan\nPMS_df.iloc[index[7], 1:10] = list(PMS_df.iloc[index[7], 2:11])\nPMS_df.iloc[index[7], 11:] = np.nan\nPMS_df.iloc[index[8], 1:10] = list(PMS_df.iloc[index[8], 3:12])\nPMS_df.iloc[index[8], 11:] = np.nan\n\nPMS_df.iloc[index]","0608af3d":"# shifted\nstrange_data = [' Channel 2 News', 'Gate ALARM', ' T\ufffdrk Alfabesi', ' super loud speaker booster', ' Tour Guide', ' Romantic Song Music Love Songs', ' Breaking News', ')', 'TRAVEL']\na = PMS_df.Category.isin(strange_data)\nindex = []\nfor i in range(len(a)):\n    if a[i] == True:\n        index.append(i)\nPMS_df.iloc[index]","fe9918bc":"# replaced\nPMS_df.iloc[index[0],1:10] = list(PMS_df.iloc[index[0], 2:11])\nPMS_df.iloc[index[0], 11:] = np.nan\nPMS_df.iloc[index[1], 1:10] = list(PMS_df.iloc[index[1], 2:11])\nPMS_df.iloc[index[1], 11:] = np.nan\nPMS_df.iloc[index[2], 1:10] = list(PMS_df.iloc[index[2], 2:11])\nPMS_df.iloc[index[2], 11:] = np.nan\nPMS_df.iloc[index[3], 1:10] = list(PMS_df.iloc[index[3], 2:11])\nPMS_df.iloc[index[3], 11:] = np.nan\nPMS_df.iloc[index[4], 1:10] = list(PMS_df.iloc[index[4], 2:11])\nPMS_df.iloc[index[4], 11:] = np.nan\nPMS_df.iloc[index[5], 1:10] = list(PMS_df.iloc[index[5], 2:11])\nPMS_df.iloc[index[5], 11:] = np.nan\nPMS_df.iloc[index[6], 1:10] = list(PMS_df.iloc[index[6], 2:11])\nPMS_df.iloc[index[6], 11:] = np.nan\nPMS_df.iloc[index[8], 1:10] = list(PMS_df.iloc[index[8], 2:11])\nPMS_df.iloc[index[8], 11:] = np.nan\n\nPMS_df.iloc[index]","be63b5bc":"print(PMS_df['Unnamed: 11'].unique())\nprint(PMS_df['Unnamed: 12'].unique())\nprint(PMS_df['Unnamed: 13'].unique())\nprint(PMS_df['Unnamed: 14'].unique())","d58649be":"# shifted\nstrange_data = ['4.0.0.0']\na = PMS_df['Unnamed: 11'].isin(strange_data)\nindex = []\nfor i in range(len(a)):\n    if a[i] == True:\n        index.append(i)\nPMS_df.iloc[index]","82c865f4":"# replaced\nPMS_df.iloc[index[0],1:10] = list(PMS_df.iloc[index[0], 2:11])\nPMS_df.iloc[index[0], 11:] = np.nan\n\nPMS_df.iloc[index]","67b73245":"# Rating\nPMS_df.Rating.value_counts()","2ec7da59":"PMS_df['Rating'] = pd.to_numeric(PMS_df.Rating, errors='coerce')","9303e187":"# Reviews\nPMS_df.Reviews.value_counts()","60d7c8e5":"PMS_df['Reviews'] = pd.to_numeric(PMS_df.Reviews, errors='coerce')","07ecbcc8":"PMS_df.Installs.value_counts()","6d61ccc3":"PMS_df.Installs = PMS_df.Installs.str.replace('+','')\nPMS_df.Installs = PMS_df.Installs.str.replace(',','')\nPMS_df['Installs'] = pd.to_numeric(PMS_df.Installs, errors='coerce')","623aea5c":"PMS_df.Size.value_counts()","090cd52f":"PMS_df.Price.value_counts()","2d273981":"PMS_df.Price = PMS_df.Price.str.replace('$','')\nPMS_df['Price'] = pd.to_numeric(PMS_df.Price, errors='coerce')","4e969235":"distribution_model = ['Free' if i == 0 else 'Paid' for i in PMS_df['Price']]\nPMS_df['Distribution model'] = pd.Series(distribution_model, name = 'Distribution model')","dca3575a":"PMS_df['Content Rating'].value_counts()","b4cac5f5":"PMS_df = PMS_df.drop(['Last Updated', 'Minimum Version',\n       'Latest Version', 'Unnamed: 11', 'Unnamed: 12', 'Unnamed: 13',\n       'Unnamed: 14'],axis=1)","3451eb6f":"PMS_df","72cce405":"PMS_df.info()","0236fbd8":"PMS_df.describe()","6eaacecc":"plt.figure(figsize=(20,5))\nplt.title('Category distribution')\nPMS_df.Category.value_counts().plot(kind='bar',)\n","16598047":"games = PMS_df[PMS_df.Category.str.contains('GAME', regex=False)]\nother = PMS_df[~PMS_df.Category.str.contains('GAME', regex=False)]","474c96fa":"plt.figure(figsize=(20,5))\nplt.title('Games category distribution')\ngames.Category.value_counts().plot(kind='bar',)","0a7b2ca2":"plt.figure(figsize=(20,5))\nplt.title('Other apps category distribution')\nother.Category.value_counts().plot(kind='bar',)","4920bcbb":"plt.figure(figsize=(10,10))\nplt.title('Ratings distribution')\nsns.distplot(PMS_df.Rating[PMS_df.Reviews > 1000], kde=False)","81f9ec20":"plt.figure(figsize=(8,8))\nplt.title('Content Rating distribution')\nPMS_df['Content Rating'].value_counts().plot(kind='bar')","ac161311":"rev = 1000000\n\nrat1 = PMS_df.Rating[PMS_df.Reviews <= rev]\nrev1 = PMS_df.Reviews[PMS_df.Reviews <= rev]\n\nrat2 = PMS_df.Rating[PMS_df.Reviews > rev]\nrev2 = PMS_df.Reviews[PMS_df.Reviews > rev]\n\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(30,8))\nfig.suptitle('Reviews affect on the Rating')\n\nax1.scatter(rev1,rat1)\nax1.set_xlabel('Reviews')\nax1.set_ylabel('Rating')\n\nax2.scatter(rev2,rat2)\nax2.set_xlabel('Reviews')\nax2.set_ylabel('Rating')\n\nplt.show()","66f91b40":"plt.figure(figsize=(20,8))\nplt.title('Mean Rating per Category')\nplt.grid()\nplt.xlabel('Category')\nplt.xticks(rotation=90)\nplt.ylabel('Rating')\n\nd = PMS_df.groupby('Category')['Rating'].mean().reset_index()\nplt.scatter(d.Category, d.Rating)","cfcbdb9b":"Dist_method = PMS_df['Distribution model'].value_counts()\nplt.figure(figsize=(10,10))\nplt.title('Dist model')\nplt.pie(Dist_method, labels=Dist_method.index, autopct='%1.1f%%', startangle=180);","06cac04c":"plt.figure(figsize=(20,5))\nprice = PMS_df.Price[PMS_df.Price > 0].value_counts()\n(price.head(50)).plot(kind = 'bar')","7904b1af":"plt.figure(figsize=(20,5))\nsize = PMS_df.Size.value_counts(normalize = False)\n\n(size.head(100)).plot(kind = 'bar')","181fc161":"### Category distribution:","396880cd":"So, in overall number of Reviews dont affect the Rating.","effb3162":"So its 95.7% of app that free to download.","6308fe82":"So size of most apps Varies with device.","89a57bbd":"# Exploratory Analysis and Visualization","a282af5a":"### Size column looks fine, so lets it be that way.","07c2f95d":"### What the Mean Rating per Category","6c98729f":"### Rating distribution excluding apps with less then 1000 reviews.","30e65dbd":"### Next need to edit and covnert Installs column.","76a9eba4":"### There are lots of different game categories, so lets make separated plots for games and other apps.","1c89c975":"## Data Preparation and Cleaning\n\n### Importing data from file and take a sample to see how it looks:","81156ab6":"# Asking and Answering Questions\n","6969aac1":"### Looks like nothing wrong with Rating and Reviews, so lets covert them.","b3fdf929":"### Lets look at columns names and their type:","c30257b6":"### What is most common Distribution model in App Store?","c482f0a0":"### Lets see how Reviews affect the Rating. For better look lets split in for less then 1 million of Reviews and above it.","2533aa26":"### One more check for shifted data:","340072be":"### In Category we have strange values. Lets move data in correct columns and replace missing values with NaN.","03f4cec8":"### What is most common Size apps have?","c966ba8d":"## Content Rating.","916d0c1d":"\n\n### Now lets visualize this data set with plots.  ","78bbab2a":"### Content Rating looks fine.","79a8444d":"Book and Reference apps have higest mean rate and Travel apps have lowest mean rate.","48d2c7e2":"### Next editing Price column. And lets make Distribution model column, in which store 'free' if app price is zero and 'paid' in other cases.","38ddde4b":"# Google Play Market Analysis\n\nIn this work I'll make some analysis of [data set from here](https:\/\/www.kaggle.com\/gauthamp10\/google-playstore-apps?select=Google-Playstore-32K.csv). Its contain data up to April 2019. There are two sets: full version consisting of 267K app data and minimal version consisting of 32K app data. In this work I'll use fullset.\n\nThis is a course project of [Zero to Pandas course](http:\/\/zerotopandas.com).","7a6f025f":"### Looks like some data columns are shifted and almost all of them have Dtype as object. So lets make a copy of data and start make it more suitable for analisis.","317399a4":"### What is most common price of paid apps?","fdfe43bb":"### Now lets drop Last Updated, Minimum Version, Latest Version and Unnamed columns from array."}}