{"cell_type":{"483e4862":"code","c2ee6cb5":"code","c04aa330":"code","063f48fd":"code","bbb77ef8":"code","cba55833":"code","b830be69":"code","b9b6e6cb":"code","c9966631":"code","bc8acf5f":"code","34d6ed3a":"code","259d47ff":"code","85374f94":"code","66b90689":"code","2c4b8147":"code","53a30892":"code","d691c5be":"code","432ff64d":"code","67d4cdf7":"code","eb5b2cad":"code","319997ac":"code","85d025ee":"code","1fa69937":"code","f804260e":"code","10593072":"code","ddb97503":"code","910b0b36":"code","72005f52":"code","489871dc":"code","882a6a4a":"code","d35335f7":"code","91aa3d19":"code","b8dd224a":"code","cbab93f4":"code","e9d3bdbf":"code","6c6c6243":"code","5c0cff7c":"code","fae931df":"code","e6ffb231":"code","0d354c49":"code","82a7017d":"code","908b1379":"code","4ff61316":"code","844c125b":"code","184d12df":"code","4ab87607":"code","fa3aaa41":"code","1b5fbe5e":"code","c200e7ab":"code","62390781":"code","2de699fd":"code","4af584e9":"code","92db2c8f":"code","740bc6bd":"code","b5d58e03":"code","70a138d0":"code","cde47d5c":"code","d5e09580":"code","e5d496b2":"code","81c882eb":"code","11a6e5e8":"code","37f04955":"code","f982de2d":"code","45836465":"code","ae6c8656":"code","8303d79b":"code","1973a7f8":"code","8a9a887b":"code","bf22c26d":"code","8124a45e":"code","971a7250":"code","1729aa19":"code","d2c390e5":"code","fb375eb3":"code","26397488":"code","0c2755e5":"code","9a2cb808":"code","fb249811":"code","9b5b1157":"code","c9a655b7":"code","445b3fdc":"code","f1dd6070":"code","ee55aff2":"code","3d37d626":"code","844681ec":"code","a07d1a96":"code","c2381343":"code","1a5def7e":"code","7d7d9f69":"code","aa3ce127":"code","db4e8b5e":"code","367130fe":"code","1f2e5e5d":"code","44b16ed3":"code","81f53eca":"code","c451c51e":"code","9f0fd89a":"code","6518f3ae":"code","6457ebe3":"code","f3f800e6":"markdown","1044d97d":"markdown","f8a9263b":"markdown","46984894":"markdown","bc301b27":"markdown","14da426a":"markdown","6737ed2c":"markdown","3a1555cf":"markdown"},"source":{"483e4862":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2ee6cb5":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c04aa330":"train_features=pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\n","063f48fd":"train_features.head()","bbb77ef8":"print(train_features.shape)\nprint(train_features['sig_id'].nunique())","cba55833":"train_features_col=train_features.columns.difference(['sig_id'])#","b830be69":"#cp time\n\nx=train_features.cp_type.value_counts()\nx","b9b6e6cb":"plt.hist(x)","c9966631":"g_col=[col for col in train_features if col.startswith('g')]\nc_col=[col for col in train_features if col.startswith('c')]\nother=[col for col in train_features if col not in g_col and col not in c_col]\nprint('number of g featured columns is', len(g_col))\nprint('number of c featured columns is', len(c_col))\nprint('number of other columns is', len(other))\n# filter_col = [col for col in df if col.startswith('foo')]","bc8acf5f":"#plt.hist(train_features['g-0'])","34d6ed3a":"#plt.plot(train_features['g-0'])","259d47ff":"train_drug=pd.read_csv('\/kaggle\/input\/lish-moa\/train_drug.csv')","85374f94":"print(train_drug.shape)\ntrain_drug.head()","66b90689":"#.value_counts().values\ndrugs=pd.value_counts(train_drug['drug_id'].values, sort=True)\ndrugs[:15,].plot.barh()","2c4b8147":"train_drug['drug_id'].value_counts()[:25,]","53a30892":"train_targets_ns=pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv')","d691c5be":"train_targets_ns.head()","432ff64d":"train_targets_s=pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')","67d4cdf7":"# print(train_targets_s.shape)\n# train_targets_s.head()\n# target_s_col=train_targets_s.columns.difference(['sig_id'])\n# print(list(target_s_col))\n","eb5b2cad":"# df=train_targets_s.apply(pd.Series.value_counts)\n# df.drop('sig_id',axis=1)\nvalues=[]\nfor c in train_targets_s.columns.difference(['sig_id']):\n    print(\"---- %s ---\" % c)\n    print(train_targets_s[c].value_counts())\n    values.append(c)\n    #plt.hist(train_targets_s[c].value_counts())\n#     df2 = df[df.columns.difference(['B', 'D'])]\n    \n#values\n# train_targets_s[c].value_counts()","319997ac":"a=train_targets_s.value_counts()\na","85d025ee":"fig = plt.figure(figsize=(12, 60))\nx=train_targets_s.sum()\ndata1=x[1:,]\nsns.barplot(x=data1.sort_values(ascending=False),y=data1.sort_values(ascending=False).index)\nplt.tick_params(axis='x', labelsize=15)\nplt.tick_params(axis='y', labelsize=15)\nplt.xlabel('')\nplt.ylabel('')\nplt.title('Training Set Scored Targets Classification Counts', size=18, pad=18)\n\nplt.show()\n\n#sns.barplot(x=train_targets_s.sum(axis=0).sort_values(ascending=False).values,y=train_targets_s.sum(axis=0).sort_values(ascending=False).index)\n","1fa69937":"data2=x[1:,].index\ndata2.sort_values(ascending=False)","f804260e":"#train_features.merge(train_targets_s,on='sig_id',\nmerged1=pd.merge(train_features,train_targets_s,how='outer',on='sig_id')\nprint(merged1.shape)\nmerged1\n#pd.merge(left, right, how='outer', on='subject_id')","10593072":"g_col=[col for col in merged1 if col.startswith('g')]\nc_col=[col for col in merged1 if col.startswith('c')]\nother=[col for col in merged1 if col not in g_col and col not in c_col]\nprint('number of g featured columns is', len(g_col))\nprint('number of c featured columns is', len(c_col))\nprint('number of other columns is', len(other))","ddb97503":"type(merged1['cp_type'].value_counts())","910b0b36":"merged1.iloc['cp_type'=='trt_cp','cp_time']","72005f52":"# no_moa=merged1.loc[(merged1['cp_type']=='ctl_vehicle'),list(target_s_col)]\n# a=no_moa.apply(pd.Series.value_counts)\n# print((a))\n#no_moa['adenosine_receptor_antagonist  adenylyl_cyclase_activator'].value_counts() \n#print(no_moa.apply(pd.Series.value_counts))\n#data1.sort_values(ascending=False) \n#nn=[]\n# for c in no_moa.columns:\n#     #print(\"---- %s ---\" % c)\n#     tmp=no_moa[c].value_counts()\n#     print(no_moa[c].value_counts())\n#     #nn.append(tmp)\n# #nn\n# print(tmp)\n# nvc=no_moa.value_counts()\n# plt.figure()\n# sns.barplot(a.index, a.values)\n# plt.title('# of Starbucks stores by Continent')\n# plt.ylabel('Number of Occurrences', fontsize=12)\n# plt.xlabel('Continent', fontsize=12)\n# plt.show()","489871dc":"# fig = plt.figure(figsize=(12, 60))\n# x=train_targets_s.sum()\n# data1=x[1:,]\n# sns.barplot(x=nn.values,y=train_targets_s.columns.difference(['sig_id']))\n# plt.tick_params(axis='x', labelsize=15)\n# plt.tick_params(axis='y', labelsize=15)\n# plt.xlabel('')\n# plt.ylabel('')\n# plt.title('Training Set Scored Targets Classification Counts', size=18, pad=18)\n\n# plt.show()","882a6a4a":"submission=pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')","d35335f7":"submission.head()","91aa3d19":"sub_col=submission.columns","b8dd224a":"# submit_columns=submission.columns.difference(['sig_id'])\n# target_s_col=train_targets_s.columns.difference(['sig_id'])\n# #print(submit_columns==target_s_col)","cbab93f4":"test=pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')","e9d3bdbf":"test.head()","6c6c6243":"#test['drug_id']","5c0cff7c":"test_col=test.columns.difference(['sig_id'])\n#print(train_features_col==test_col)","fae931df":"train_data=train_features.drop('sig_id',axis=1)\ntrain_data","e6ffb231":"train_data.cp_dose.value_counts()","0d354c49":"train_data.cp_time.value_counts()","82a7017d":"#train_data=pd.concat([train_data.drop('cp_dose', axis=1), pd.get_dummies(train_data['cp_dose'],prefix='dose')], axis=1)","908b1379":"train_data","4ff61316":"#train_data['cp_time']=train_features['cp_time']","844c125b":"#train_data.drop(['time_576.0','time_1152.0','time_1728.0'],axis=1,inplace=True)#","184d12df":"train_data=pd.concat([train_data.drop('cp_type', axis=1), pd.get_dummies(train_data['cp_type'],prefix='')], axis=1)","4ab87607":"train_data=pd.concat([train_data.drop('cp_time', axis=1), pd.get_dummies(train_data['cp_time'],prefix='time')], axis=1)","fa3aaa41":"train_data\ntrain_data=pd.concat([train_data.drop('cp_dose', axis=1), pd.get_dummies(train_data['cp_dose'],prefix='dose')], axis=1)\ntrain_data=pd.concat([train_data.drop('cp_type', axis=1), pd.get_dummies(train_data['cp_type'],prefix='')], axis=1)\ntrain_data=pd.concat([train_data.drop('cp_time', axis=1), pd.get_dummies(train_data['cp_time'],prefix='time')], axis=1)","1b5fbe5e":"train_data","c200e7ab":"#sns.countplot(data=train_data.time_24.fillna('Missing'))","62390781":"\nprint(train_data.shape)\ntrain_data","2de699fd":"train_merged=train_data.join(train_drug)\n\ntrain_merged.drop('sig_id',inplace=True,axis=1)","4af584e9":"print(train_merged.shape)\ntrain_merged","92db2c8f":"# from sklearn.multioutput import MultiOutputClassifier\n# from xgboost import XGBClassifier","740bc6bd":"train_data","b5d58e03":"target=train_targets_s.drop('sig_id',axis=1)\ntarget","70a138d0":"# model = MultiOutputClassifier(XGBClassifier(tree_method='gpu_hist'))\n# model.fit(train_data,target)","cde47d5c":"# import pickle\n\n# pickle.dump(model, open('.\/model1.pkl','wb'))","d5e09580":"import pickle\nloaded_model = pickle.load(open('\/kaggle\/input\/multi-output-xgb\/model1.pkl', 'rb'))","e5d496b2":"#print(loaded_model)","81c882eb":"test","11a6e5e8":"x=test.drop(\"sig_id\",axis=1)\nx.head()","37f04955":"test=pd.concat([test.drop('cp_dose', axis=1), pd.get_dummies(test['cp_dose'],prefix='dose')], axis=1)\ntest=pd.concat([test.drop('cp_type', axis=1), pd.get_dummies(test['cp_type'],prefix='')], axis=1)\ntest=pd.concat([test.drop('cp_time', axis=1), pd.get_dummies(test['cp_time'],prefix='time')], axis=1)","f982de2d":"x=test.sig_id","45836465":"x","ae6c8656":"test.drop('sig_id',axis=1,inplace=True)\n","8303d79b":"test","1973a7f8":"prediction1=loaded_model.predict_proba(test)","8a9a887b":"prediction2=loaded_model.predict_proba(train_data)","bf22c26d":"prediction2","8124a45e":"pred_prob=np.array(prediction1)[:,:,1].T","971a7250":"pred_prob2=np.array(prediction2)[:,:,1].T","1729aa19":"pred_prob2=pd.DataFrame(pred_prob2)","d2c390e5":"pred_prob=pd.DataFrame(pred_prob)","fb375eb3":"pred_prob","26397488":"pred_prob=pd.concat([x,pred_prob],axis=1)","0c2755e5":"pred_prob2=pd.concat([x,pred_prob2],axis=1)","9a2cb808":"pred_prob","fb249811":"pred_prob.columns=sub_col\n#pred1=pd.concat([x,prediction1],axis=1)","9b5b1157":"pred_prob2.columns=sub_col","c9a655b7":"pred_prob2","445b3fdc":"pred_prob.to_csv(\"submission.csv\",index=False)","f1dd6070":"prediction2=loaded_model.predict_proba(test)\n","ee55aff2":"\nprediction2=np.array(prediction2)[:,:,1].T","3d37d626":"prediction2","844681ec":"pred_2=pd.DataFrame(prediction2)","a07d1a96":"pred_2=pd.concat([x,pred_2],axis=1)","c2381343":"pred_2","1a5def7e":"pred_2.columns=sub_col","7d7d9f69":"pred_2","aa3ce127":"test.loc[test._ctl_vehicle==1,'sig_id']","db4e8b5e":"test","367130fe":"pred_prob","1f2e5e5d":"loss = log_loss(np.ravel(target_s), np.ravel(pred_prob2.drop('sig_id',axis=1)))","44b16ed3":"loss = log_loss(np.ravel(train_targets_s.drop('sig_id',axis=1)), np.ravel(pred_prob2.drop('sig_id',axis=1)))\nloss","81f53eca":"def mean_columnwise_logloss(y_true, y_pred):        \n    y_pred = np.clip(y_pred, 1e-15, (1 - 1e-15))\n    score = - np.mean(np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred), axis=1))\n    return score","c451c51e":"#test","9f0fd89a":"sc1=mean_columnwise_logloss(train_targets_s.drop('sig_id',axis=1),pred_prob2.drop('sig_id',axis=1))\nsc1","6518f3ae":"from sklearn.metrics import log_loss\n\ndef kaggle_metric_np(targets, preds):\n    \"\"\"\n    Kaggle metric for MoA competition targets and preds\n    in numpy format.\n    \"\"\"\n    assert targets.shape[1] == 206\n    assert preds.shape[1] == 206\n    metrics = []\n    for t in range(206):\n        metrics.append(log_loss(targets[:, t], preds[:, t], labels=[0, 1]))\n    return np.mean(metrics)\n","6457ebe3":"zz=pred_prob2.drop('sig_id',axis=1)\nzzz=train_targets_s.drop('sig_id',axis=1)\nscore=kaggle_metric_np(zzz,zz)\nscore","f3f800e6":"# ****cp_type\ncontrol perturbations(ctl_vehicle) have no MoAs.The \"controls\" are samples with no compounds (and hence no MoAs). In real applications, they can be used as a baseline to assess the effect of a compound treatment. Here, the best you can do is to set the probability of MoA to 0\nsee this https:\/\/www.kaggle.com\/c\/lish-moa\/discussion\/180304","1044d97d":"# **train drug**","f8a9263b":"# ****submisiion file and test file review","46984894":"# **scored targets**","bc301b27":"# merge train features and train targets****","14da426a":"# **non scored targets**","6737ed2c":"# **feature engineering**","3a1555cf":"# **Model building**"}}