{"cell_type":{"9dae3c76":"code","2be144f9":"code","05462bd9":"code","e0c56acc":"code","5c5b9bac":"code","c7a48c45":"code","d957f9bf":"code","fae8881a":"code","9c33c923":"markdown","23a89584":"markdown","2a905a4f":"markdown","644425a9":"markdown","273537e9":"markdown","65cf8263":"markdown"},"source":{"9dae3c76":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\n        \ninput_path = Path('\/kaggle\/input\/tabular-playground-series-feb-2021\/')","2be144f9":"train = pd.read_csv(input_path \/ 'train.csv', index_col='id')\ndisplay(train.head())","05462bd9":"test = pd.read_csv(input_path \/ 'test.csv', index_col='id')\ndisplay(test.head())","e0c56acc":"submission = pd.read_csv(input_path \/ 'sample_submission.csv', index_col='id')\ndisplay(submission.head())","5c5b9bac":"for c in train.columns:\n    if train[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train[c].values) + list(test[c].values))\n        train[c] = lbl.transform(train[c].values)\n        test[c] = lbl.transform(test[c].values)\n        \ndisplay(train.head())","c7a48c45":"target = train.pop('target')\nX_train, X_test, y_train, y_test = train_test_split(train, target, train_size=0.60)","d957f9bf":"from xgboost import XGBRegressor\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import mean_absolute_error \nfrom sklearn.model_selection import GridSearchCV\n \nxgb_model = XGBRegressor(n_estimators=1000,learning_rate=0.05,max_depth=4)\noptimization_dict = {'min_child_weight':range(1,6,2)}\n\nmodel = GridSearchCV(xgb_model, optimization_dict, \n                     scoring='neg_mean_squared_error', verbose=1)\nmodel.fit(X_train,y_train)\nprint(model.best_score_)\nprint(model.best_params_)\n\n#'n_estimators':[250,300,350]\n#'min_child_weight':range(1,6,2)\n#'max_depth':[2,4,6]","fae8881a":"from xgboost import XGBRegressor\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import mean_absolute_error\n\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05,max_depth=4,min_child_weight=5)\nmy_model.fit(X_train, y_train, \n             early_stopping_rounds=10, \n             eval_set = [(X_test, y_test)], \n             verbose = False)\n\npredictions = my_model.predict(X_test)\nprint(\"RMSE\"+ str(mean_squared_error(predictions,y_test)))\n\nsubmission['target'] = my_model.predict(test)\nsubmission.to_csv('xgbregressor.csv')","9c33c923":"## Pull out the target, and make a validation split","23a89584":"# XGBoost model\nand optimise model using GridSearchCV","2a905a4f":"This notebook contains the final submission to my first Kaggle competition, [Tabular Playground Series - Feb 2021 competition.](http:\/\/https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021)","644425a9":"## Encode the categoricals.\n","273537e9":"Run model on the test data and save the results to a file ","65cf8263":"# Read in the data files"}}