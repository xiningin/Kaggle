{"cell_type":{"88af99dc":"code","7fcab765":"code","9b2ab44a":"code","8a0fca7b":"code","a88ea205":"code","b0545b3b":"code","47038776":"code","501bad8d":"code","3d600dfe":"code","5d82803d":"code","dd155807":"code","d6f35f46":"code","002c50d9":"code","584631fc":"code","545eee5c":"code","d47957b3":"code","868dffd4":"code","01ec2479":"code","d0cd449c":"code","0e6c2599":"code","0eeb81c2":"code","989bf0c4":"code","25f3b3f6":"code","a9f93d55":"markdown","82e555de":"markdown","959a3548":"markdown","def78b87":"markdown","b86ae8c5":"markdown","53951697":"markdown","c257d0f0":"markdown","0672857a":"markdown","8869684d":"markdown"},"source":{"88af99dc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","7fcab765":"df=pd.read_table('..\/input\/dna-sequnces\/human_data.txt')\ndf.head()","9b2ab44a":"def getkmers(sequence,size=6):\n    return [sequence[x:x+size].lower() for x in range(len(sequence)-size+1)]","8a0fca7b":"df['words']=df.apply(lambda x: getkmers(x['sequence']),axis=1)","a88ea205":"df.head()","b0545b3b":"df.drop('sequence',axis=1,inplace=True)","47038776":"df.head()","501bad8d":"texts=list(df.words)","3d600dfe":"for item in range(len(texts)):\n    texts[item]=' '.join(texts[item])","5d82803d":"y=df['class'].values","dd155807":"print(texts[0])","d6f35f46":"from sklearn.feature_extraction.text import CountVectorizer","002c50d9":"cv=CountVectorizer(ngram_range=(4,4))","584631fc":"X=cv.fit_transform(texts)","545eee5c":"df['class'].value_counts().plot.bar()","d47957b3":"X.shape","868dffd4":"from sklearn.model_selection import train_test_split","01ec2479":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=40)","d0cd449c":"from sklearn.naive_bayes import MultinomialNB","0e6c2599":"classifier=MultinomialNB(alpha=0.1)  ","0eeb81c2":"classifier.fit(X_train,y_train)","989bf0c4":"y_pred=classifier.predict(X_test)","25f3b3f6":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test,y_pred))","a9f93d55":"**Now lets apply this function to all the sequences**","82e555de":"We now have fixed vector size of each sequence and now we can apply Bag of Words technique. We have to convert list of kmers into string of sentences for each gene so that we can feed it to BOW.","959a3548":"First we have to decide the length of k-mer. We will take size=6 in this case. We will define a function to collect all possible overlapping k-mers of a particular length from sequnce and apply kmers function on it.","def78b87":"Do leave an upvote if you like it guys !!","b86ae8c5":"We have now converted the sequences into short overlapping kmers of length 6.","53951697":"**DNA or Deoxyribonucleic acid is a hereditary material in human beings and in every other living organism. The information in DNA is stored in form a code made up of four chemical bases i.e. Adenine(A), Guanine(G), Cytosine(C) and Thymine(T). The order or sequence of these bases determines the information for building and maintaining an organism.**\n\n**In this kernel, we will go through these variety of DNA sequences and determine the class (6 different classes) which it belongs to. The input will contain DNA sequences containing bases made up of A,G,C,T and output will be label\/class.**","c257d0f0":"# INTRODUCTION","0672857a":"**We can see from the dataset that sequence contains bases of A,G,C,T which is our X or independent variable and class (0-6) is our dependent variable or y. Lets see the approach.**\n\nOne general approach would be to convert the sequence into some sort of vectors using Bag of words, TF-Idf and then feed it to the model but we have to remember that the sequence does not contain fixed size vector as of now. \n\nSo we use a technique called as K-mers where we convert each DNA sequence into fixed size subsets(K-mers) of a fixed length (eg. 6) and then apply Bag of words on that. Lets see this in detail.","8869684d":"# Importing Libraries and dataset"}}