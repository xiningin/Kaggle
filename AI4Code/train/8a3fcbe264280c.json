{"cell_type":{"8a279f15":"code","b55cef38":"code","5a997213":"code","93116ce8":"code","60ccd540":"code","d1fdd0a0":"code","f8654fe2":"code","78a8ad84":"code","078c8d7b":"code","55e8a28e":"code","f763ce99":"code","4cf4f3df":"code","0f0f65fb":"code","e86912b5":"code","f188ad4b":"code","17600874":"code","c680789b":"code","5596a685":"code","fad7ec98":"code","af5dac82":"code","36511c6b":"code","b60d1491":"code","113aafb4":"code","a5ddba0a":"code","3184d193":"code","19a7deb9":"code","f56b22ba":"code","19da778c":"code","89a007ce":"code","88a14be2":"code","43e65e7d":"code","73af66b9":"code","d641b616":"code","92cf416f":"markdown","f45a5f4f":"markdown","b0a1c322":"markdown","27c8bf37":"markdown"},"source":{"8a279f15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b55cef38":"import numpy as np\nimport pandas as pd\nimport pycountry","5a997213":"#importing the covid 19 data till 9th May \n#confirmed cases,recovered cases and death cases from John Hokinson's University Dataset","93116ce8":"confirmed_links=\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\nrecovered_links=\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\ndeath_links=\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"","60ccd540":"confirmed_cases = pd.read_csv(confirmed_links)\nrecovered_cases=pd.read_csv(recovered_links)\ndeath_cases=pd.read_csv(death_links)","d1fdd0a0":"confirmed_cases.head()","f8654fe2":"confirmed_cases.drop([\"Province\/State\",\"Lat\",\"Long\"],axis=1,inplace=True) #dropping the columns which have no relation to our plots","78a8ad84":"confirmed_df=confirmed_cases.groupby(\"Country\/Region\",as_index=False).sum() \nconfirmed_df1=confirmed_df.set_index(\"Country\/Region\")\nconfirmed_df2=confirmed_df1.transpose() \nconfirmed_df2.columns.rename(\" \",inplace=True)\nconfirmed=confirmed_df2.unstack()  #converting panel data to time series data\nconfirmed.shape","078c8d7b":"confirmed.head()","55e8a28e":"confirmed_data=confirmed.to_frame()\nconfirmed_data.reset_index(inplace=True)\nconfirmed_data.columns=[\"Country\",\"Date\",\"ConfirmedCases\"]\nconfirmed_data.sort_values(by=\"Date\",inplace=True)\n","f763ce99":"confirmed_data.head()","4cf4f3df":"confirmed_data.reset_index(drop=True,inplace=True) # reset the index","0f0f65fb":"countries=confirmed_data[\"Country\"].unique().tolist() ","e86912b5":"d_country_code = {}\nfor country in countries:\n    try:\n        country_data = pycountry.countries.search_fuzzy(country)\n        # country_data is a list of objects of class pycountry.db.Country\n        # The first item  ie at index 0 of list is best fit\n        # object of class Country have an alpha_3 attribute\n        country_code = country_data[0].alpha_3\n        d_country_code.update({country: country_code})\n    except:\n        print('could not add ISO 3 code for ->', country)\n        # If could not find country, make ISO code ' '\n        d_country_code.update({country: ' '})","f188ad4b":"#Manually entering the code for which the ISO codes were not found","17600874":"d_country_code[\"Taiwan\"]=\"TWN\"\nd_country_code[\"Korea, South\"]=\"KOR\"\nd_country_code[\"Burma\"]=\"BUR\"\nd_country_code[\"Congo (Brazzaville)\"]=\"COG\"\nd_country_code[\" Congo (Kinshasa)\"]=\"COD\"\n#for the rest ISO codes were not listed","c680789b":"for k, v in d_country_code.items():\n    confirmed_data.loc[(confirmed_data.Country == k), 'iso_alpha'] = v #matching the key value pair for the countries and replacing them with ISO codes","5596a685":"import plotly.express as px","fad7ec98":"scl = [[0.0, '#ffffff'],[0.2, '#ff9999'],[0.4, '#FF7F50'], \\\n       [0.6, '#ff1a1a'],[0.8, '#cc0000'],[1.0, '#FFA500']] ","af5dac82":"fig = px.choropleth(confirmed_data, locations=\"iso_alpha\",\n                    color=\"ConfirmedCases\", \n                    hover_name=\"Country\", # column to add to hover information\n                      color_continuous_scale= scl,\n                    animation_frame= \"Date\")\nfig.show() #Day by Day the visualization of the covid cases WorldWide","36511c6b":"recovered_cases.drop([\"Province\/State\",\"Lat\",\"Long\"],axis=1,inplace=True)","b60d1491":"recovered_df1=recovered_cases.groupby(\"Country\/Region\",as_index=False).sum()\nrecovered_df2=recovered_df1.set_index(\"Country\/Region\")\nrecovered_df3=recovered_df2.transpose()\nrecovered_df3.columns.rename(\" \",inplace=True)\nrecovered=recovered_df3.unstack()\nrecovered.shape","113aafb4":"recovered_data=recovered.to_frame()\nrecovered_data.reset_index(inplace=True)\nrecovered_data.columns=[\"Country\",\"Date\",\"RecoveredCases\"]\nrecovered_data.sort_values(by=\"Date\",inplace=True)","a5ddba0a":"for k, v in d_country_code.items():\n    recovered_data.loc[(recovered_data.Country == k), 'iso_alpha'] = v","3184d193":"scl = [[0.0, '#F0FFF0'],[0.2, '#98FB98'],[0.4, '#9ACD32'], \\\n       [0.6, '#228B22'],[0.8, '#3CB371'],[1.0, '#006400']]  #color coding for Recovered map","19a7deb9":"fig = px.choropleth(recovered_data, locations=\"iso_alpha\",\n                    color=\"RecoveredCases\", \n                    hover_name=\"Country\", # column to add to hover information\n                      color_continuous_scale= scl,\n                    animation_frame= \"Date\")\nfig.show()","f56b22ba":"death_cases.drop([\"Province\/State\",\"Lat\",\"Long\"],axis=1,inplace=True)","19da778c":"death_df=death_cases.groupby(\"Country\/Region\",as_index=False).sum()\ndeath_df1=death_df.set_index(\"Country\/Region\")\ndeath_df2=death_df1.transpose()\ndeath_df2.columns.rename(\" \",inplace=True)\ndeath=death_df2.unstack()\ndeath.shape","89a007ce":"death_data=death.to_frame()\ndeath_data.reset_index(inplace=True)\ndeath_data.columns=[\"Country\",\"Date\",\"DeathCases\"]\ndeath_data.sort_values(by=\"Date\",inplace=True)","88a14be2":"death_data=death_data.reset_index(drop=True)","43e65e7d":"for k, v in d_country_code.items():\n    death_data.loc[(death_data.Country == k), 'iso_alpha'] = v\n","73af66b9":"scl = [[0.0, '#ffffff'],[0.2, '#ffe6e6'],[0.4, '#ff8080'], \\\n       [0.6, '#ff4d4d'],[0.8, '#ff3333'],[1.0, '#e60000']] ","d641b616":"fig = px.choropleth(death_data, locations=\"iso_alpha\",\n                    color=\"DeathCases\", \n                    hover_name=\"Country\", # column to add to hover information\n                      color_continuous_scale= scl,\n                    animation_frame= \"Date\")\nfig.show()","92cf416f":"# **Confirmed Cases**","f45a5f4f":" ***This File shows the visualization of Covid 19 Confirmed, Death and Recovery cases on a daily Basis using Choropleth Maps *******","b0a1c322":"# ***#Death Cases*******","27c8bf37":"# ***** Recovered Cases******"}}