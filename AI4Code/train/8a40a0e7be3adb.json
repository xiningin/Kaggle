{"cell_type":{"9cf1c6e4":"code","d7c9436d":"code","0c8a1b04":"code","3c01494f":"code","d01af628":"code","b168da2d":"code","ab1284bb":"code","df6e238a":"code","ce892f73":"code","39dcce85":"code","2630be97":"code","e6e6bb10":"code","20ea38b7":"code","35a6db96":"code","027fc50d":"code","bbc967c3":"code","d42b8148":"code","1844212e":"code","21b1d70f":"code","06d776ea":"code","d4357479":"code","d117d194":"code","31f7b89f":"code","7b0192af":"markdown","ba36e678":"markdown","2f9a7b42":"markdown","56a4c8fc":"markdown","d4af5407":"markdown","74c24638":"markdown","c9cd03e6":"markdown"},"source":{"9cf1c6e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plot\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7c9436d":"sleep = pd.read_csv(\"..\/input\/applehealth\/convertcsv.csv\") ","0c8a1b04":"sleep.head()","3c01494f":"sleep_raw = sleep[sleep['_sourceName'] == 'Sleep Cycle']\n\nsleep_cycle = sleep_raw[['_sourceName', '_creationDate', '_startDate', '_endDate','_value']]\nsleep_cycle.shape","d01af628":"sleep_cycle.head()","b168da2d":"def elapsed_time(stime,etime): # in minutes\n    t1 = pd.to_datetime(stime)\n    t2 = pd.to_datetime(etime)\n    return pd.Timedelta(t2 - t1).seconds \/ 60.0 \n    \n    # pd.Timedelta(t2 - t1).seconds \/ 3600.0 hours\ndef convert_time(time):\n    raw = time.split(\" \")[1]\n    hours,minutes,seconds = raw.split(\":\")\n    convert = {}\n    convert['20'] = 8\n    convert['21'] = 9\n    convert['22'] = 10\n    convert['23'] = 11\n    convert['00'] = 12\n    convert['01'] = 13\n    convert['02'] = 14\n    convert['03'] = 15\n    convert['04'] = 16\n    convert['05'] = 17\n    convert['06'] = 18\n    convert['07'] = 19\n    convert['08'] = 20\n    result = convert[hours] + int(minutes)\/60.0 \n    return result\n    # if you're sleeping after 4 am.... idk bro, you need help\n    \ndef convert_date(time):\n    return time.split(\" \")[0]","ab1284bb":"elapsed_time('2020-08-09 23:38:40 -0700','2020-08-10 07:10:34 -0700')","df6e238a":"convert_time('2020-08-10 22:55:35 -0700')","ce892f73":"sleep_cycle['minutes_elapsed'] = sleep_cycle.apply(lambda row: elapsed_time(row._startDate,row._endDate), axis=1)\nsleep_cycle['hours_elapsed'] = sleep_cycle.apply(lambda row: elapsed_time(row._startDate,row._endDate)\/60.0, axis=1)\nsleep_cycle['start_bed'] = sleep_cycle.apply(lambda row: convert_time(row._startDate), axis=1)\nsleep_cycle['date'] = sleep_cycle.apply(lambda row: convert_date(row._startDate), axis=1)\nsleep_cycle.head()","39dcce85":"column_1 = sleep_cycle[\"start_bed\"]\ncolumn_2 = sleep_cycle[\"hours_elapsed\"]\ncorrelation = column_1.corr(column_2)\nprint(correlation)","2630be97":"dataFrame = pd.DataFrame(data=sleep_cycle, columns=['start_bed','hours_elapsed']);\n\n# Draw a scatter plot\n\ndataFrame.plot.scatter(x='start_bed', y='hours_elapsed', title= \"start time in bed vs minutes elapsed\");\n\nplot.show(block=True);","e6e6bb10":"def percent_asleep(_valx, _valy, timex,timey): # return percentage asleep\n    if(_valx == 'HKCategoryValueSleepAnalysisAsleep' ):\n        return timex\/timey\n    else:\n        return timey\/timex\n    ","20ea38b7":"sleep_filtered = sleep_cycle[sleep_cycle['_value'] == 'HKCategoryValueSleepAnalysisInBed']\nsleep_filtered2 = sleep_cycle[sleep_cycle['_value'] == 'HKCategoryValueSleepAnalysisAsleep']\n\nsleep_final = pd.merge(sleep_filtered, sleep_filtered2, on=['date'])\nsleep_final['percent_asleep'] = sleep_final.apply(lambda row: percent_asleep(row._value_x,row._value_y,row.hours_elapsed_x, row.hours_elapsed_y), axis=1)\nsleep_final['start_bed'] = sleep_final.apply(lambda row: min(row.start_bed_x, row.start_bed_y), axis=1)\nsleep_final = sleep_final[sleep_final['percent_asleep'] < 1]\nsleep_final.head()","35a6db96":"column_1 = sleep_final[\"start_bed\"]\ncolumn_2 = sleep_final[\"percent_asleep\"]\ncorrelation = column_1.corr(column_2)\nprint(correlation)","027fc50d":"sleep_final","bbc967c3":"dataFrame = pd.DataFrame(data=sleep_final, columns=['start_bed','percent_asleep']);\n\n# Draw a scatter plot\n\ndataFrame.plot.scatter(x='start_bed', y='percent_asleep', title= \"start time in bed vs percentage asleep\");\n\nplot.show(block=True);","d42b8148":"import matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = sleep_final\n\n# gca stands for 'get current axis'\nax = plt.gca()\n\n#df.plot(kind='line',x='date',y='hours_elapsed_x',ax=ax)\n#df.plot(kind='line',x='date',y='start_bed_x', color='red', ax=ax)\n#df.plot(kind='line',x='date',y='hours_elapsed_y',ax=ax)\n#df.plot(kind='line',x='date',y='percent_asleep', color='blue', ax=ax)\n\nplt.figure(figsize=(20,12))\n\nplt.show()","1844212e":"# SES example\nfrom statsmodels.tsa.holtwinters import SimpleExpSmoothing\n# contrived dataset\ndata = list(sleep_final[\"percent_asleep\"])\n\n# fit model\nmodel = SimpleExpSmoothing(data)\nmodel_fit = model.fit()\n# make prediction\nyhat = model_fit.predict(len(data), len(data))\nprint(yhat)","21b1d70f":"import sklearn.metrics as metrics\ndef regression_results(y_true, y_pred):\n# Regression metrics\n    explained_variance=metrics.explained_variance_score(y_true, y_pred)\n    mean_absolute_error=metrics.mean_absolute_error(y_true, y_pred) \n    mse=metrics.mean_squared_error(y_true, y_pred) \n    mean_squared_log_error=metrics.mean_squared_log_error(y_true, y_pred)\n    median_absolute_error=metrics.median_absolute_error(y_true, y_pred)\n    r2=metrics.r2_score(y_true, y_pred)\n    print('explained_variance: ', round(explained_variance,4))    \n    print('mean_squared_log_error: ', round(mean_squared_log_error,4))\n    print('r2: ', round(r2,4))\n    print('MAE: ', round(mean_absolute_error,4))\n    print('MSE: ', round(mse,4))\n    print('RMSE: ', round(np.sqrt(mse),4))","06d776ea":"from sklearn.model_selection import TimeSeriesSplit\n\ntscv = TimeSeriesSplit()\nX = sleep_final[[ \"start_bed_x\",'hours_elapsed_y',\"hours_elapsed_x\"]]\ny = sleep_final['percent_asleep']\n\nfor train_index, test_index in tscv.split(X):\n    X_train, X_test = X.iloc[train_index, :], X.iloc[test_index,:]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]","d4357479":"from sklearn.linear_model import LinearRegression\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import cross_val_score\n\n# Spot Check Algorithms\nmodels = []\nmodels.append(('LR', LinearRegression()))\nmodels.append(('NN', MLPRegressor(solver = 'lbfgs')))  #neural network\nmodels.append(('KNN', KNeighborsRegressor())) \nmodels.append(('RF', RandomForestRegressor(n_estimators = 10))) # Ensemble method - collection of many decision trees\nmodels.append(('SVR', SVR(gamma='auto'))) # kernel = linear\n# Evaluate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n    # TimeSeries Cross validation\n    \n    cv_results = cross_val_score(model, X_train, y_train, cv=tscv, scoring='r2')\n    results.append(cv_results)\n    names.append(name)\n    print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))\n    \n# Compare Algorithms\nplt.boxplot(results, labels=names)\nplt.title('Algorithm Comparison')\nplt.show()","d117d194":"model = LinearRegression()\nmodel.fit(X_train,y_train)\n\n\npredicted_percent = model.predict(X_test)\nprint(predicted_percent)\n\n\n# data = [[7.683,10.83,7.38], [7.95,10.72,6.8]] \n# custom_test = pd.DataFrame(data, columns = ['hours_elapsed_x', 'start_bed_x','hours_elapsed_y']) \n\n# print(model.predict(custom_test))","31f7b89f":"import matplotlib.pyplot as plt\nimport pandas as pd\n\ntraining = X_train.join(y_train)\ntesting = X_test.join(y_test)\ndf2 = pd.concat([training,testing])\ndf2 = df2.join(sleep_final['date'])\n\ndf = sleep_final\n\n\n#gca stands for 'get current axis'\nax = plt.gca()\n\ndf.plot(kind='line',x='date',y='percent_asleep', color='blue', ax=ax) #actual\n#df2.plot(kind='line',x='date',y='percent_asleep', color='green', ax=ax) #predicted\n\nplt.figure(figsize=(20,12))\n\nplt.show()\n","7b0192af":"Read in DATA","ba36e678":"Filter out irrelevant material","2f9a7b42":"Based on this graph, there isn't much of a correlation","56a4c8fc":"# Find correlation between actual start sleep time and total time slept","d4af5407":"We can see that from the plot above that there is a highly inverse relationship for me on what time I go to bed vs the total time asleep","74c24638":"Calculate time in bed ","c9cd03e6":"# **Find correlation between start sleep time and percentage of time sleeping vs time in bed**"}}