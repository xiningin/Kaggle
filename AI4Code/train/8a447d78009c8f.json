{"cell_type":{"8c77ddec":"code","68ac8122":"code","12267bb7":"code","1b2e68c6":"code","6a88dc76":"code","60ddee5c":"code","408980dd":"code","c35a9af0":"code","c7fd0489":"code","977c04b2":"code","71fb4e97":"code","b357370e":"code","46293483":"code","79134b3f":"code","c754461b":"code","9f66ffec":"code","a694ebc5":"code","041cef25":"markdown","a30eac3b":"markdown"},"source":{"8c77ddec":"import os\nimport pandas as pd\nimport numpy as np\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Conv2D, Flatten, Activation, Dropout\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import applications, optimizers\nimport cv2\n\nimport matplotlib.pyplot as plt","68ac8122":"path = '..\/input\/severstal-steel-defect-detection\/'","12267bb7":"tr = pd.read_csv(path + 'train.csv')\nprint(tr.shape)\ntr.head()","1b2e68c6":"df = tr[tr['ImageId_ClassId'].apply(lambda x: x.split('_')[1] == '1')].reset_index(drop=True)\ndf['ImageId_ClassId'] = df['ImageId_ClassId'].apply(lambda x: x.split('_')[0])\ndf = df.drop('EncodedPixels', axis=1)\n\nprint(len(df))\ndf.head()","6a88dc76":"imgs_templ = ['000789191.jpg','00d7ae946.jpg','01d590c5f.jpg','01e501f99.jpg','023353d24.jpg',\\\n              '031614d60.jpg','03395a3da.jpg','063b5dcbe.jpg','06a86ee90.jpg','07cb85a8d.jpg','07e8fca73.jpg',\\\n              '08e21ba66.jpg','047681252.jpg','092c1f666.jpg','0a3bbea4d.jpg','0a46cc4bf.jpg','0a65bd8d4.jpg',\\\n              '0a76ac9b8.jpg','0b3a0fabe.jpg','0b50b417a.jpg','0d0c21687.jpg','0d22de6d4.jpg','0e09ff3bd.jpg',\\\n              '0e3ade070.jpg','0d0c21687.jpg','0d22de6d4.jpg','0ef4bff49.jpg','0faa71251.jpg','0fac62a3e.jpg',\\\n              '100de36e9.jpg','109fbcecf.jpg','110e63bfa.jpg']\nlen(imgs_templ)","60ddee5c":"plt.imshow(plt.imread(path + 'train_images\/'+ imgs_templ[31]))","408980dd":"df_trn = pd.concat([df[~df['ImageId_ClassId'].isin(imgs_templ)][:50], pd.DataFrame(imgs_templ, columns=['ImageId_ClassId'])], ignore_index=True)\ndf_trn['IsTemp'] = '0' \ndf_trn['IsTemp'][df_trn['ImageId_ClassId'].isin(imgs_templ)] = '1'\n\nprint(df_trn['IsTemp'].value_counts())\nprint(len(df_trn))\ndf_trn.head()","c35a9af0":"img = plt.imread(path + 'train_images\/'+ df_trn[0:1]['ImageId_ClassId'].values[0])\nplt.imshow(img)","c7fd0489":"img_size = 256\nbatch_size = 16","977c04b2":"train_datagen=ImageDataGenerator(\n    rescale=1.\/255,\n    horizontal_flip = True,\n    vertical_flip = True\n)\n\ntrain_generator=train_datagen.flow_from_dataframe(\n    dataframe=df_trn,\n    directory=path + 'train_images',\n    x_col=\"ImageId_ClassId\",\n    y_col=\"IsTemp\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"binary\",\n    target_size=(img_size,img_size)\n    )","71fb4e97":"base_model = applications.VGG16(weights=None, input_shape=(img_size, img_size, 3), include_top=False)\nbase_model.load_weights('..\/input\/vgg16\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5')\nbase_model.trainable = False","b357370e":"x = base_model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\npredictions = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(input = base_model.input, output = predictions)\n\nmodel.compile(loss='binary_crossentropy', optimizer = optimizers.adam(lr=0.0001), metrics=['accuracy'])","46293483":"%%time\nmodel.fit_generator(\n        train_generator,\n        steps_per_epoch=100,\n        epochs=2,\n        verbose=1)","79134b3f":"test_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_dataframe(  \n        dataframe=df,\n        directory = path + 'train_images',    \n        x_col=\"ImageId_ClassId\",\n        target_size = (img_size,img_size),\n        batch_size = 1,\n        shuffle = False,\n        class_mode = None\n        )","c754461b":"%%time\ntest_generator.reset()\npredict = model.predict_generator(test_generator, steps = len(test_generator.filenames))\nlen(predict)","9f66ffec":"df_p = df.copy(deep=True)\ndf_p['Pred']=predict.round()\nimg_tmpl = df_p[df_p['Pred'] == 1]['ImageId_ClassId'].values\nprint(len(img_tmpl))\nimg_tmpl","a694ebc5":"fig=plt.figure(figsize=(20, 12))\ncolumns = 4\nrows = 10\nfor i in range(1, columns*rows +1):   \n    img = cv2.imread(path + 'train_images\/'+ img_tmpl[i+100])\n    fig.add_subplot(rows, columns, i).set_title(img_tmpl[i+100])\n    plt.axis('off')\n    plt.imshow(img)\nplt.show()","041cef25":"Purpose of this kernel is automatically find steels with textures, like this one:\n![](https:\/\/github.com\/ushur\/Severstal-Steel-Defect-Detection\/blob\/master\/Texture.jpg?raw=true)","a30eac3b":"As we can see, not all detected steels have textures. This will be fixed later."}}