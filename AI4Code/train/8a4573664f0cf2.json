{"cell_type":{"168f4478":"code","83cc4bbf":"code","820e23bc":"code","c9471a21":"code","b89b7249":"code","76db1d76":"code","5270c0e5":"code","11068336":"code","1ae5d21c":"code","845479c0":"code","b9bd46e3":"code","eb0c1e55":"code","bb44bf43":"markdown"},"source":{"168f4478":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os       \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.linear_model import LinearRegression,Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nimport xgboost","83cc4bbf":"# open train Dataframe CSV file\npath = '\/kaggle\/input\/tabular-playground-series-feb-2021\/'\nX = pd.read_csv(path + '\/train.csv', index_col='id')\nX.head()","820e23bc":"# open test Dataframe CSV file\nX_test_full = pd.read_csv(path + '\/test.csv', index_col='id')\nX_test_full.head()","c9471a21":"# open submission Dataframe CSV file\nsubmission = pd.read_csv(path + '\/sample_submission.csv', index_col='id')\nsubmission.head()","b89b7249":"# Remove rows with missing target, separate target from predictors\nX = X.dropna(axis=0, subset=['target'])\ny = X.target\nX = X.drop(['target'], axis=1)\n\n# We will drop columns with missing values if founded (not in this DF)\ncols_with_missing = [col for col in X.columns if X[col].isnull().any()]\nX = X.drop(cols_with_missing, axis=1)\nX_test = X_test_full.drop(cols_with_missing, axis=1)\n\n# Break off Validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","76db1d76":"X_train_full","5270c0e5":"# Select categorical columns with relatively low cordinality\ncategorical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].nunique() < 10 and X_train_full[cname].dtype =='object']\n\n# Select numeric columns\nnumerical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['int64','float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","11068336":"X_train","1ae5d21c":"# oneHot encode the data\nX_train = pd.get_dummies(X_train)\nX_valid = pd.get_dummies(X_valid)\nX_test = pd.get_dummies(X_test)\n\nX_train, X_valid = X_train.align(X_valid, join='left', axis=1)\nX_train, X_test = X_train.align(X_test, join='left', axis=1)","845479c0":"print(X_train.shape, X_valid.shape, X_test.shape)","b9bd46e3":"# We can improve the model ==> 4th improvement(Best Model)\nmy_model = LGBMRegressor(n_estimators=980, learning_rate=0.0324, n_jobs=4)\n\n# Fit the model\nmy_model.fit(X_train, y_train) # early_stopping_rounds=3, eval_set=[(X_valid, y_valid)], verbose=False\n\n# Get Predictions\npredictions = my_model.predict(X_valid)\n\n# Calculate MAE\nmae = mean_absolute_error(predictions, y_valid)\nprint('Mean Absolute Error: ', mae)\n\n# RMSE\nrmse = np.sqrt(mean_squared_error(y_valid,predictions))\nprint('\\nRoute Mean Square Error: ', rmse)\n\n# Preprocessing of test data, fit model\npreds_test = my_model.predict(X_test)\n\n# plot: Best model\nplt.scatter(y_valid, predictions)\nplt.title('LGBMRegressor model',weight = 'bold', size = 15)\nplt.show();","eb0c1e55":"# save New DataFrame in CSV format at new created folder\noutput = pd.DataFrame({'id': X_test.index, 'target':preds_test})\noutput.to_csv('LGBMRegressor model.csv', index = False)","bb44bf43":"## (Tabular Playground Series - Feb 2021 Competition.)\n#### by (Peter Gamal Girgis)"}}