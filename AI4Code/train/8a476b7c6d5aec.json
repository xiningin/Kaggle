{"cell_type":{"17f35952":"code","e5aa4275":"code","17369928":"code","94ef8637":"code","d4695c2d":"code","f316d412":"code","e48f16ea":"code","b74164ee":"code","0f097816":"code","b25df4ce":"code","2946ed5c":"code","4a7919ee":"code","451caadf":"code","1d52810b":"code","8a7c79d8":"code","93ed43b5":"code","d95f888e":"code","e6795b8a":"markdown","f47014b9":"markdown","4564bfb6":"markdown","a4734cf3":"markdown","2376c41e":"markdown","4c9f89b0":"markdown","4b9ec323":"markdown","3f4914c8":"markdown","6c58c251":"markdown","986b0493":"markdown","64d7c85c":"markdown","7a9a9900":"markdown","a261c105":"markdown","a15f953b":"markdown","933e0cef":"markdown"},"source":{"17f35952":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","e5aa4275":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","17369928":"'''\n#work in progress...\n\nimport xml.sax\n\nxml_path = '\/kaggle\/input\/MN997409.1_4NY0T82X016-Alignment.xml'\n   \n\nclass xHandler( xml.sax.ContentHandler ):\n    def __init__(self):\n        self.CurrentData = \"\"\n\n   # Call when an element starts\n    def startElement(self, tag, attributes):\n        self.CurrentData = tag\n        if(tag == \"BlastOutput\"):\n            print(\"Blast\")\n         \n   # Call when an elements ends\n    def endElement(self, tag):\n        if self.CurrentData == \"BlastOuput_param\":\n            print(\"Params:\", self.type)\n        elif self.CurrentData == \"Parameters\":\n            print(\"Params_expect:\", self.parameters)\n        elif self.CurrentData == \"Parameter_expect\":\n            print(\"Year:\", self.Parameters_xpect)\n\n   # Call when a character is read\n    def iterations(self, content):\n        if self.CurrentData == \"Iterations\":\n            self.type = content\n        elif self.CurrentData == \"Iteration_hits\":\n            self.format = content\n        elif self.CurrentData == \"Hit\":\n            self.year = content\n        elif self.CurrentData == \"Hit_accession\":\n            self.rating = content\n    \n    if ( __name__ == \"__main__\"):\n     # create an XMLReader\n        parser = xml.sax.make_parser()\n       # turn off namepsaces\n        parser.setFeature(xml.sax.handler.feature_namespaces, 0)\n\n    # override the default ContextHandler\n        Handler = xHandler()\n        parser.setContentHandler( Handler )\n        parser.parse(xml_path)\n   '''","94ef8637":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","d4695c2d":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","f316d412":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","e48f16ea":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# MN997409.1-4NY0T82X016-Alignment-HitTable.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/MN997409.1-4NY0T82X016-Alignment-HitTable.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'MN997409.1-4NY0T82X016-Alignment-HitTable.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","b74164ee":"df1.columns = ['query acc.ver', 'subject acc.ver', '% identity', 'alignment length', 'mismatches', 'gap opens', 'q. start', 'q. end', 's. start', 's. end', 'evalue', 'bit score']\ndf1.head(5)","0f097816":"plotPerColumnDistribution(df1, 10, 5)","b25df4ce":"plotCorrelationMatrix(df1, 8)","2946ed5c":"plotScatterMatrix(df1, 20, 10)","4a7919ee":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# SARS_CORONAVIRUS_287BP_MN975263.1_accession_nucleotide.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/SARS_CORONAVIRUS_287BP_MN975263.1_accession_nucleotide.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'SARS_CORONAVIRUS_287BP_MN975263.1_accession_nucleotide.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","451caadf":"df2.head(5)","1d52810b":"plotPerColumnDistribution(df2, 10, 5)","8a7c79d8":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# SARS_CORONAVIRUS_287BP_MN975263.1_accession_protein.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/SARS_CORONAVIRUS_287BP_MN975263.1_accession_protein.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'SARS_CORONAVIRUS_287BP_MN975263.1_accession_protein.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","93ed43b5":"df3.head(5)","d95f888e":"plotPerColumnDistribution(df3, 10, 5)","e6795b8a":"Distribution graphs (histogram\/bar graph) of sampled columns:","f47014b9":"Now you're ready to read in the data and use the plotting functions to visualize the data.","4564bfb6":"Distribution graphs (histogram\/bar graph) of sampled columns:","a4734cf3":"Correlation matrix:","2376c41e":"### Let's check 2nd file: \/kaggle\/input\/SARS_CORONAVIRUS_287BP_MN975263.1_accession_nucleotide.csv","4c9f89b0":"## Exploratory Analysis\n![small_cdc_coronavirus18114.jpg](attachment:small_cdc_coronavirus18114.jpg)\n\nMutations of this COVID-19 is evidently shown how it's related or matched (hit), for example in the file:\n> MN997409.1_4NY0T82X016-Alignment.xml\n\nFor the bat version (COVID-19 virus like) genome, the taxonomy ID is typically like KY417146.1 prefixed by the \"KY\".\n\nfor example: ( a tiny snippet )\nRNA nucleotide sequence for the bat virus:\n> AAAATCAAAGCTTGTGTTGAAGAAGTTACAACAACTCTGGAAGAAACTAAGTTCCTCACAGAA\n\nalignment with human COVID-19 :\n> AAAATTAAGGCTTGCATTGATGAGGTTACCACAACACTGGAAGAAACTAAGTTTCTTACCAATA\n\nAlthough this RNA nucleotide sequence of the bat version of COVID-19 is not an exact match with the human benchmark counterpart, taxonomy ID: MN997409.1, the hit percentage ranges approximately 82%.\n","4b9ec323":"### Let's check 3rd file: \/kaggle\/input\/SARS_CORONAVIRUS_287BP_MN975263.1_accession_protein.csv","3f4914c8":"Let's take a quick look at what the data looks like:","6c58c251":"Scatter and density plots:","986b0493":"### Let's check 1st file: \/kaggle\/input\/MN997409.1-4NY0T82X016-Alignment-HitTable.csv","64d7c85c":"Distribution graphs (histogram\/bar graph) of sampled columns:","7a9a9900":"Let's take a quick look at what the data looks like:","a261c105":"## Conclusion\nSince this is just starter code with more visuals on the way, we'll kick the \"conclusion\" down the road for now.","a15f953b":"## Introduction\nResearchers have noted the similarites between the human SARS Corona virus COVID-19, and suspect its origin from the bat version of this virus. This mutation and how it spreads to humans may be better understood by building some visual and analytical tools, with data from the National Center for Biotechnology Information (NCBI) let's get started!","933e0cef":"Let's take a quick look at what the data looks like:"}}