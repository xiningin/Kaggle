{"cell_type":{"8b2c4a48":"code","89d53dd9":"code","6c3e7ef0":"code","7e60f05f":"code","8f5c223f":"code","bae0490d":"code","8bda4c40":"code","abfa7341":"code","b37b6012":"code","17208ebf":"code","1d3589ee":"code","cef99582":"code","0c4a79bd":"code","b8799320":"code","970699ca":"code","a957483a":"code","a7e7110f":"code","b6f842f4":"code","618dc1b4":"code","2b8a65cd":"code","75497490":"code","e08afd08":"code","9824eada":"code","bf8cbbd3":"code","7742a884":"code","a19d3977":"code","083265ea":"code","ca324863":"code","303a288b":"code","9a99afd5":"code","847dcd1e":"markdown","3be243a0":"markdown","a7519ea5":"markdown","e5eb93a8":"markdown","603db7dd":"markdown","325337a1":"markdown","fe83ca65":"markdown","62225264":"markdown","e46951d7":"markdown"},"source":{"8b2c4a48":"!pip install '\/kaggle\/input\/pytorch-170-cuda-toolkit-110221\/torch-1.7.0+cu110-cp37-cp37m-linux_x86_64.whl' --no-deps\n!pip install '\/kaggle\/input\/pytorch-170-cuda-toolkit-110221\/torchvision-0.8.1+cu110-cp37-cp37m-linux_x86_64.whl' --no-deps\n!pip install '\/kaggle\/input\/pytorch-170-cuda-toolkit-110221\/torchaudio-0.7.0-cp37-cp37m-linux_x86_64.whl' --no-deps","89d53dd9":"!pip install '\/kaggle\/input\/mmdetectionv2140\/addict-2.4.0-py3-none-any.whl' --no-deps\n!pip install '\/kaggle\/input\/mmdetectionv2140\/yapf-0.31.0-py2.py3-none-any.whl' --no-deps\n!pip install '\/kaggle\/input\/mmdetectionv2140\/terminal-0.4.0-py3-none-any.whl' --no-deps\n!pip install '\/kaggle\/input\/mmdetectionv2140\/terminaltables-3.1.0-py3-none-any.whl' --no-deps\n!pip install '\/kaggle\/input\/mmdetectionv2140\/mmcv_full-1_3_8-cu110-torch1_7_0\/mmcv_full-1.3.8-cp37-cp37m-manylinux1_x86_64.whl' --no-deps\n!pip install '\/kaggle\/input\/mmdetectionv2140\/pycocotools-2.0.2\/pycocotools-2.0.2' --no-deps\n!pip install '\/kaggle\/input\/mmdetectionv2140\/mmpycocotools-12.0.3\/mmpycocotools-12.0.3' --no-deps\n\n!rm -rf mmdetection\n\n!cp -r \/kaggle\/input\/mmdetectionv2140\/mmdetection-2.14.0 \/kaggle\/working\/\n!mv \/kaggle\/working\/mmdetection-2.14.0 \/kaggle\/working\/mmdetection\n%cd \/kaggle\/working\/mmdetection\n!pip install -e .","6c3e7ef0":"import torch\nimport torch.nn as nn\nimport torchvision.transforms as transforms\nimport torch.nn.functional as F\nimport sklearn\nimport torchvision\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np\nimport cupy as cp\nimport gc\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport PIL\nimport json\nfrom PIL import Image, ImageEnhance\nimport albumentations as A\nimport mmdet\nimport mmcv\nfrom albumentations.pytorch import ToTensorV2\nimport seaborn as sns\nimport glob\nfrom pathlib import Path\nimport pycocotools\nfrom pycocotools import mask\nimport numpy.random\nimport random\nimport cv2\nimport re\nimport shutil\nfrom mmdet.datasets import build_dataset\nfrom mmdet.models import build_detector\nfrom mmdet.apis import train_detector\nfrom mmdet.apis import inference_detector, init_detector, show_result_pyplot, set_random_seed","7e60f05f":"%cd ..","8f5c223f":"IMG_WIDTH = 704\nIMG_HEIGHT = 520","bae0490d":"import cupy as cp\nimport gc\n\ndef one_hot(y, num_classes, dtype=cp.uint8): # GPU\n    y = cp.array(y, dtype='int')\n    input_shape = y.shape\n    if input_shape and input_shape[-1] == 1 and len(input_shape) > 1:\n        input_shape = tuple(input_shape[:-1])\n    y = y.ravel()\n    if not num_classes:\n        num_classes = cp.max(y) + 1\n    n = y.shape[0]\n    categorical = cp.zeros((n, num_classes), dtype=dtype)\n    categorical[cp.arange(n), y] = 1\n    output_shape = input_shape + (num_classes,)\n    categorical = cp.reshape(categorical, output_shape)\n    return categorical\n\ndef fix_overlap(msk): # GPU\n    \"\"\"\n    Args:\n        mask: multi-channel mask, each channel is an instance of cell, shape:(520,704,None)\n    Returns:\n        multi-channel mask with non-overlapping values, shape:(520,704,None)\n    \"\"\"\n    msk = cp.array(msk)\n    msk = cp.pad(msk, [[0,0],[0,0],[1,0]]) # add dummy mask for background\n    ins_len = msk.shape[-1]\n    msk = cp.argmax(msk,axis=-1)# convert multi channel mask to single channel mask, argmax will remove overlap\n    msk = one_hot(msk, num_classes=ins_len) # back to multi-channel mask, some instance might get removed\n    msk = msk[...,1:] # remove background mask\n    msk = msk[...,cp.any(msk, axis=(0,1))] # remove all-zero masks\n    #assert np.prod(msk, axis=-1).sum()==0 # overlap check, will raise error if there is overlap\n    return msk\n\ndef check_overlap(msk):\n    msk = msk.astype(cp.bool).astype(cp.uint8) # binary mask\n    return cp.any(cp.sum(msk, axis=-1)>1) # only one channgel will contain value","8bda4c40":"def rle_decode(mask_rle, shape):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape)\n\ndef rle_encode(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = img.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","abfa7341":"def rle_encoding(x):\n    dots = np.where(x.flatten() == 1)[0]\n    run_lengths = []\n    prev = -2\n    for b in dots:\n        if (b>prev+1): run_lengths.extend((b + 1, 0))\n        run_lengths[-1] += 1\n        prev = b\n    return ' '.join(map(str, run_lengths))","b37b6012":"def get_mask_from_result(result):\n    d = {True : 1, False : 0}\n    u,inv = np.unique(result,return_inverse = True)\n    mk = cp.array([d[x] for x in u])[inv].reshape(result.shape)\n#     print(mk.shape)\n    return mk","17208ebf":"def does_overlap(mask, other_masks):\n    for other_mask in other_masks:\n        if np.sum(np.logical_and(mask, other_mask)) > 0:\n            #import pdb; pdb.set_trace()\n            #print(\"Found overlapping masks!\")\n            return True\n    return False\n\n\ndef remove_overlapping_pixels(mask, other_masks):\n    for other_mask in other_masks:\n        if np.sum(np.logical_and(mask, other_mask)) > 0:\n            print(\"Overlap detected\")\n            mask[np.logical_and(mask, other_mask)] = 0\n    return mask","1d3589ee":"def get_img_and_mask(img_path, annotation, width, height):\n    \"\"\" Capture the relevant image array as well as the image mask \"\"\"\n    img_mask = np.zeros((height, width), dtype=np.uint8)\n    for i, annot in enumerate(annotation): \n        img_mask = np.where(rle_decode(annot, (height, width))!=0, i, img_mask)\n    img = cv2.imread(img_path)[..., ::-1]\n    return img[..., 0], img_mask\n\ndef plot_img_and_mask(img, mask, invert_img=True, boost_contrast=True):\n    \"\"\" Function to take an image and the corresponding mask and plot\n    \n    Args:\n        img (np.arr): 1 channel np arr representing the image of cellular structures\n        mask (np.arr): 1 channel np arr representing the instance masks (incrementing by one)\n        invert_img (bool, optional): Whether or not to invert the base image\n        boost_contrast (bool, optional): Whether or not to boost contrast of the base image\n        \n    Returns:\n        None; Plots the two arrays and overlays them to create a merged image\n    \"\"\"\n    plt.figure(figsize=(20,10))\n    \n    plt.subplot(1,3,1)\n    _img = np.tile(np.expand_dims(img, axis=-1), 3)\n    \n    # Flip black-->white ... white-->black\n    if invert_img:\n        _img = _img.max()-_img\n        \n    if boost_contrast:\n        _img = np.asarray(ImageEnhance.Contrast(Image.fromarray(_img)).enhance(16))\n        \n    plt.imshow(_img)\n    plt.axis(False)\n    plt.title(\"Cell Image\", fontweight=\"bold\")\n    \n    plt.subplot(1,3,2)\n    _mask = np.zeros_like(_img)\n    _mask[..., 0] = mask\n    plt.imshow(mask, cmap='rainbow')\n    plt.axis(False)\n    plt.title(\"Instance Segmentation Mask\", fontweight=\"bold\")\n    \n    merged = cv2.addWeighted(_img, 0.75, np.clip(_mask, 0, 1)*255, 0.25, 0.0,)\n    plt.subplot(1,3,3)\n    plt.imshow(merged)\n    plt.axis(False)\n    plt.title(\"Cell Image w\/ Instance Segmentation Mask Overlay\", fontweight=\"bold\")\n    \n    plt.tight_layout()\n    plt.show()","cef99582":"from mmcv import Config\ncfg = Config.fromfile('\/kaggle\/working\/mmdetection\/configs\/cascade_rcnn\/cascade_mask_rcnn_x101_64x4d_fpn_20e_coco.py')","0c4a79bd":"cfg.dataset_type = 'CocoDataset'\ncfg.classes = '\/kaggle\/working\/labels.txt'\ncfg.data_root = '\/kaggle\/working'\n\nfor head in cfg.model.roi_head.bbox_head:\n    head.num_classes = 3\n    \n# for head in cfg.model.roi_head.mask_head:\n#     head.num_classes = 3\n    \n# cfg.model.roi_head.mask_head.semantic_head.num_classes=3\ncfg.model.roi_head.mask_head.num_classes=3\n\ncfg.data.test.type = 'CocoDataset'\ncfg.data.test.classes = 'labels.txt'\ncfg.data.test.data_root = '\/kaggle\/working'\ncfg.data.test.ann_file = '..\/input\/k\/vexxingbanana\/sartorius-coco-dataset-notebook\/val_dataset.json'\ncfg.data.test.img_prefix = ''\n\ncfg.data.train.type = 'CocoDataset'\ncfg.data.train.data_root = '\/kaggle\/working'\ncfg.data.train.ann_file = '..\/input\/k\/vexxingbanana\/sartorius-coco-dataset-notebook\/train_dataset.json'\ncfg.data.train.img_prefix = ''\ncfg.data.train.classes = 'labels.txt'\n\ncfg.data.val.type = 'CocoDataset'\ncfg.data.val.data_root = '\/kaggle\/working'\ncfg.data.val.ann_file = '..\/input\/k\/vexxingbanana\/sartorius-coco-dataset-notebook\/val_dataset.json'\ncfg.data.val.img_prefix = ''\ncfg.data.val.classes = 'labels.txt'\n\nalbu_train_transforms = [\n    dict(type='ShiftScaleRotate', shift_limit=0.0625,\n         scale_limit=0.15, rotate_limit=15, p=0.4),\n    dict(type='RandomBrightnessContrast', brightness_limit=0.2,\n         contrast_limit=0.2, p=0.5),\n#     dict(type='IAAAffine', shear=(-10.0, 10.0), p=0.4),\n#     dict(type='CLAHE', p=0.5),\n    dict(\n        type=\"OneOf\",\n        transforms=[\n            dict(type=\"GaussianBlur\", p=1.0, blur_limit=7),\n            dict(type=\"MedianBlur\", p=1.0, blur_limit=7),\n        ],\n        p=0.4,\n    ),\n]\n\ncfg.train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n#     dict(type='Resize', img_scale=[(440, 596), (480, 650), (520, 704), (580, 785), (620, 839)], multiscale_mode='value', keep_ratio=True),\n#     dict(type='Resize', img_scale=[(880, 1192), (960, 130), (1040, 1408), (1160, 1570), (1240, 1678)], multiscale_mode='value', keep_ratio=True),\n    dict(type='Resize', img_scale=(1333, 800)),\n    \n\n    dict(type='RandomFlip', flip_ratio=0.5),\n\n#     dict(\n#         type='Albu',\n#         transforms=albu_train_transforms,\n#         bbox_params=dict(\n#         type='BboxParams',\n#         format='pascal_voc',\n#         label_fields=['gt_labels'],\n#         min_visibility=0.0,\n#         filter_lost_elements=True),\n#         keymap=dict(img='image', gt_bboxes='bboxes', gt_masks='masks'),\n#         update_pad_shape=False,\n#         skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[128, 128, 128],\n        std=[11.58, 11.58, 11.58],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'), \n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_masks', 'gt_labels'])\n]\n\ncfg.val_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n#         img_scale=[(880, 1192), (960, 130), (1040, 1408), (1160, 1570), (1240, 1678)],\n        img_scale = (1333, 800),\n#         img_scale = (520, 704),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[128, 128, 128],\n                std=[11.58, 11.58, 11.58],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\n\n\ncfg.test_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n#         img_scale = (520, 704),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[128, 128, 128],\n                std=[11.58, 11.58, 11.58],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\n\ncfg.data.train.pipeline = cfg.train_pipeline\ncfg.data.val.pipeline = cfg.val_pipeline\n# cfg.data.test.pipeline = cfg.test_pipeline\n\n# cfg.load_from = '..\/input\/htc-checkpoint-resnext101\/htc_x101_64x4d_fpn_dconv_c3-c5_mstrain_400_1400_16x1_20e_coco_20200312-946fd751.pth'\ncfg.load_from = '..\/input\/cascade-mask-rcnn-mmdet\/cascade_mask_rcnn_x101_64x4d_fpn_20e_coco_20200512_161033-bdb5126a.pth'\n\ncfg.work_dir = '\/kaggle\/working\/model_output'\n\ncfg.optimizer.lr = 0.02 \/ 8\ncfg.lr_config = dict(\n    policy='CosineAnnealing', \n    by_epoch=False,\n    warmup='linear', \n    warmup_iters=125, \n    warmup_ratio=0.001,\n    min_lr=1e-07)\n\ncfg.data.samples_per_gpu = 2\ncfg.data.workers_per_gpu = 2\n\ncfg.evaluation.metric = 'segm'\ncfg.evaluation.interval = 1\n\ncfg.checkpoint_config.interval = 1\ncfg.runner.max_epochs = 12\ncfg.log_config.interval = 100\n\n# cfg.model.rpn_head.anchor_generator.base_sizes = [4, 9, 17, 31, 64]\n# cfg.model.rpn_head.anchor_generator.strides = [4, 8, 16, 32, 64]\n\n\ncfg.seed = 0\nset_random_seed(0, deterministic=False)\ncfg.gpu_ids = range(1)\ncfg.fp16 = dict(loss_scale=512.0)\nmeta = dict()\nmeta['config'] = cfg.pretty_text\n\n\n\nprint(f'Config:\\n{cfg.pretty_text}')","b8799320":"confidence_thresholds = {0: 0.25, 1: 0.55, 2: 0.35}","970699ca":"segms = []\nfiles = []","a957483a":"# model = init_detector(cfg, '..\/input\/mmdetection-neuron-training\/model_output\/epoch_5.pth')\n# for file in sorted(os.listdir('..\/input\/sartorius-cell-instance-segmentation\/test')):\n#     img = mmcv.imread('..\/input\/sartorius-cell-instance-segmentation\/test\/' + file)\n#     result = inference_detector(model, img)\n#     show_result_pyplot(model, img, result)\n#     previous_masks = []\n#     for i, bboxes in enumerate(result[0]):\n#         if bboxes.shape != (0,5):\n#             segmentations = result[1][i]\n#             for bbox, segm in zip(bboxes, segmentations):\n#                 box = bbox[:4]\n#                 confidence = bbox[-1]\n#                 if confidence > confidence_thresholds[i]:\n#                     mask = get_mask_from_result(segm)\n# #                     mask = remove_overlapping_pixels(mask, previous_masks)\n#                     previous_masks.append(cp.array(mask))\n# #     plt.imshow(previous_masks)\n#     masks = np.stack(previous_masks, axis=-1)\n#     masks = fix_overlap(masks)\n#     for mk in masks:\n#         rle_mask = rle_encoding(mk)\n#         segms.append(rle_mask)\n#         files.append(str(file.split('.')[0]))","a7e7110f":"# for i, mask in enumerate(previous_masks):\n#     temp_prev = []\n#     for j in range(len(previous_masks)):\n#         if j != i:\n#             previous_masks[j]\n#     does_overlap(mask, temp_prev)","b6f842f4":"model = init_detector(cfg, '..\/input\/sartorious-cascade-rcnn\/best_segm_mAP_epoch_6.pth')\nfor file in sorted(os.listdir('..\/input\/sartorius-cell-instance-segmentation\/test')):\n    img = mmcv.imread('..\/input\/sartorius-cell-instance-segmentation\/test\/' + file)\n    result = inference_detector(model, img)\n    show_result_pyplot(model, img, result)\n    previous_masks = []\n    for i, classe in enumerate(result[0]):\n        if classe.shape != (0, 5):\n            bbs = classe\n#             print(bbs)\n            sgs = result[1][i]\n            for bb, sg in zip(bbs,sgs):\n                box = bb[:4]\n                cnf = bb[4]\n                if cnf >= confidence_thresholds[i]:\n                    mask = get_mask_from_result(sg)\n                    mask = remove_overlapping_pixels(mask, previous_masks)\n                    previous_masks.append(mask)\n#                     previous_masks.append(cp.array(mask))\n\n#     plt.imshow(previous_masks)\n#     masks = np.stack(previous_masks, axis=-1)\n#     masks = fix_overlap(masks)        \n    for mk in previous_masks:\n            rle_mask = rle_encoding(mk)\n            segms.append(rle_mask)\n            files.append(str(file.split('.')[0]))","618dc1b4":"indexes = []\nfor i, segm in enumerate(segms):\n    if segm == '':\n        indexes.append(i)","2b8a65cd":"for element in sorted(indexes, reverse = True):\n    del segms[element]\n    del files[element]","75497490":"files = pd.Series(files, name='id')\npreds = pd.Series(segms, name='predicted')","e08afd08":"preds","9824eada":"submission_df = pd.concat([files, preds], axis=1)","bf8cbbd3":"submission_df.to_csv('submission.csv', index=False)","7742a884":"submission_df","a19d3977":"# lines = []\n# for f in submission_df.itertuples():\n#     lines.append('..\/input\/sartorius-cell-instance-segmentation\/test\/' + f[1] + '.png')\n# lins = pd.Series(lines, name='img_path')\n# check_df = pd.concat([submission_df, lins], axis=1)","083265ea":"# tmp_df = check_df.drop_duplicates(subset=[\"id\"]).reset_index(drop=True)\n# tmp_df[\"predicted\"] = check_df.groupby(\"id\")[\"predicted\"].agg(list).reset_index(drop=True)\n# check_df = tmp_df.copy()","ca324863":"# check_df","303a288b":"# for f in check_df.itertuples():\n#     im, mk = get_img_and_mask(f[3], f[2], IMG_WIDTH, IMG_HEIGHT)\n#     plot_img_and_mask(im, mk)","9a99afd5":"shutil.rmtree('\/kaggle\/working\/mmdetection')","847dcd1e":"# **References**","3be243a0":"# **Helper Functions**","a7519ea5":"# **Model**","e5eb93a8":"# **Inference**","603db7dd":"https:\/\/www.kaggle.com\/dschettler8845\/sartorius-segmentation-eda-and-baseline\n\nhttps:\/\/www.kaggle.com\/ihelon\/cell-segmentation-run-length-decoding\n\nhttps:\/\/www.kaggle.com\/stainsby\/fast-tested-rle\n\nhttps:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\n\nhttps:\/\/www.kaggle.com\/awsaf49\/sartorius-mmdetection-infer\n\nhttps:\/\/www.kaggle.com\/awsaf49\/sartorius-mmdetection-train\n\nhttps:\/\/www.kaggle.com\/evancofsky\/sartorius-torch-lightning-mask-r-cnn\/notebook","325337a1":"# **Import Libraries**","fe83ca65":"https:\/\/www.kaggle.com\/vexxingbanana\/sartorius-coco-dataset-notebook\n\nhttps:\/\/www.kaggle.com\/vexxingbanana\/sartorius-mmdetection-training","62225264":"# **Install MMDetection**","e46951d7":"# **Previous Notebooks**"}}