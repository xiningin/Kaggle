{"cell_type":{"cdb7bbd6":"code","45d26c65":"code","1711ab4f":"code","0e1b5b3d":"code","eea741b2":"code","20abc215":"code","77a7a6b1":"code","4c2bf06a":"code","28b9675a":"code","a9ed76b1":"code","4792f902":"code","605830c4":"code","463158c7":"code","3ead5755":"code","4948ab2a":"code","2b12da52":"code","3797fb6b":"code","7fd1f6bd":"code","04b89352":"code","5de524c6":"code","bb55ad30":"code","0b5c81d9":"code","9237e6da":"code","5ecab52c":"code","822e100e":"code","3089c1a9":"code","d7426c86":"code","591500e8":"code","31481c22":"code","50a0d6b6":"code","6aefc41a":"code","931ca8c9":"code","bfe5a82b":"code","2605f00e":"code","c6eb1b69":"code","ce1d3b8a":"code","d2b4a345":"code","91aecf38":"code","cfd2f417":"code","35bc5978":"code","d32c2ab6":"code","1f3cd145":"code","fd2dc387":"code","eaf67e48":"code","2bcbf169":"code","17991a88":"code","e872dc19":"code","f04a9d1c":"code","51a23638":"code","cad7a3f5":"code","4f132cb0":"code","d9665839":"code","5f0c3fae":"code","dd82a66f":"code","7ff6de07":"code","ea5ca87d":"code","e67ec322":"code","fbff26d4":"code","30b036a4":"code","de0676ee":"code","e7ee301e":"code","9ba20949":"code","0d6ee3a3":"markdown","58c1b7e3":"markdown","a048c702":"markdown","8d33d63c":"markdown","3fc338e2":"markdown","7981449f":"markdown","67ddd9c0":"markdown","6f0c3b55":"markdown","bed135bf":"markdown","d17472fd":"markdown","1f90dd45":"markdown","e607557d":"markdown","a8fae3d8":"markdown","659bde20":"markdown","bdddc0f7":"markdown","09b00e2f":"markdown","920d7fb9":"markdown","9e96b65a":"markdown","ad098810":"markdown","396c3f55":"markdown","d4ff119c":"markdown","17b7207e":"markdown","cef76826":"markdown","3e6b16d1":"markdown","65b84b11":"markdown","b55ba82a":"markdown","2e2c5d12":"markdown","bf6f4cf5":"markdown","79802f16":"markdown","203edc43":"markdown","33c2dc1b":"markdown","050ef55c":"markdown","d979ad47":"markdown","f940b984":"markdown"},"source":{"cdb7bbd6":"import datetime","45d26c65":"now = datetime.datetime.now()\n\nprint(now)\n","1711ab4f":"!python3 -m pip install folium","0e1b5b3d":"!pip install ner-d","eea741b2":"import requests\nimport pandas as pd\nimport logging\nimport datetime\nfrom  geopy.geocoders import Nominatim\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport seaborn as sns\nimport math\nimport folium\nimport numpy as np\nimport nltk\nfrom nerd import ner\nfrom nltk import ne_chunk, pos_tag, word_tokenize\nfrom nltk.tree import Tree \nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nfrom scipy import stats\nimport warnings\nimport csv\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nsns.set(font_scale=1.4)","20abc215":"def load_data():\n    df = pd.read_csv('..\/input\/covid19india\/data.csv')\n    return df","77a7a6b1":"data = load_data()","4c2bf06a":"print(\"Data Shape ~ Rows = {} | Columns = {}\".format(data.shape[0],data.shape[1]))","28b9675a":"data.columns","a9ed76b1":"data.head()","4792f902":"def get_lat_long(string):       \n    return string.replace('SRID=4326;POINT ','').strip(')(').split()\n\ndata[\"current_location_pt\"]=data['current_location_pt'].fillna(data['current_location_pt'].mode().iloc[0])\ndata['current_loc_latlong'] = data['current_location_pt'].apply(get_lat_long)\n\ndata['current_lat'] = data['current_loc_latlong'].apply(lambda x:x[0])\ndata['current_long'] = data['current_loc_latlong'].apply(lambda x:x[1])\n\ndata.current_lat = data.current_lat.astype('float64')\ndata.current_long = data.current_long.astype('float64')\n\nm_3 = folium.Map(location=[12.4996, 74.9869], tiles='cartodbpositron', zoom_start=4)\n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows():\n    if not math.isnan(row['current_long']) and not math.isnan(row['current_lat']):\n        mc.add_child(Marker([row['current_long'], row['current_lat']]))\nm_3.add_child(mc)\n\n# Display the map\nm_3","605830c4":"data.dtypes","463158c7":"data[data['id'] == data['unique_id']].shape","3ead5755":"data.drop('unique_id',axis=1,inplace=True)","4948ab2a":"data.set_index('id',inplace=True)","2b12da52":"print(\"Data Shape ~ Rows = {} | Columns = {}\".format(data.shape[0],data.shape[1]))","3797fb6b":"data.head()","7fd1f6bd":"data['government_id'].isna().sum()","04b89352":"data.drop('government_id',axis=1,inplace=True)","5de524c6":"data.dtypes","bb55ad30":"date_columns = ['diagnosed_date','status_change_date']","0b5c81d9":"for column in date_columns:\n    data[column] = pd.to_datetime(data[column])","9237e6da":"data.head()","5ecab52c":"#Checking null values\ndata.isna().sum()","822e100e":"for i in data.columns:\n    if data[i].dtype == 'object':\n        data[i] = data[i].fillna('Unknown')\n","3089c1a9":"data.dtypes","d7426c86":"data.isna().sum()","591500e8":"print(\"Number of Cities Affected from COVID19: \", data['detected_city'].nunique())\nprint(\"#----------------------------------------------------------------------------------------#\")\nprint(\"Cities Affected: \", data[data['detected_city'].isna()==False]['detected_city'].unique())","31481c22":"print(\"Number of States Affected from COVID19: \", data['detected_state'].nunique())\nprint(\"#----------------------------------------------------------------------------------------#\")\nprint(\"States Affected: \", data[data['detected_state'].isna()==False]['detected_state'].unique())","50a0d6b6":"plt.figure(figsize=(20,15))\ndata[['age']].plot(kind='hist',bins=[0,20,40,60,80,100],rwidth=1.8)\nplt.ylabel('Count of cases reported')\nplt.xlabel('Age Group')\nplt.show()","6aefc41a":"data['nationality'].value_counts()","931ca8c9":"plt.figure(figsize=(10,5))\ndf=pd.DataFrame({'nationality':data['nationality'].value_counts().index,'Count':data['nationality'].value_counts().values})\nax=sns.barplot(x=\"Count\",y=\"nationality\",data=df, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_width()+0.50, i.get_y()+0.50, \\\n            str(int(i.get_width())), fontsize=15,color='black')\nax.set_title('Count of people affected and their nationality', pad=20)\nplt.xlabel('Count of people affected', fontsize=20)\nplt.ylabel('Nationality', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=8)\nplt.show()","bfe5a82b":"plt.figure(figsize=(6,5))\nax=sns.barplot(data['gender'].value_counts().index,data['gender'].value_counts().values, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_x()+.20, i.get_height()+.9, \\\n            str(int(i.get_height())), fontsize=15,\n                color='black')\nax.set_title('Count of people affected and their Gender', pad=20)\nplt.ylabel('Count of people affected', fontsize=20)\nplt.xlabel('Gender', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=8)\nplt.show()","2605f00e":"plt.figure(figsize=(10,10))\nax=sns.barplot(data['detected_state'].value_counts().values,data['detected_state'].value_counts().index, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_width()+0.50, i.get_y()+0.50, \\\n            str(int(i.get_width())), fontsize=12,color='black')\nax.set_title('Count of detected cases in different states of India.', pad=20)\nplt.xlabel('Count of people detected', fontsize=20)\nplt.ylabel('State', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=15)\nplt.show()","c6eb1b69":"plt.figure(figsize=(8,5))\nax=sns.barplot(data['current_status'].value_counts().index,data['current_status'].value_counts().values, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_x()+.20, i.get_height()+.10, \\\n            str(int(i.get_height())), fontsize=15,\n                color='black')\nax.set_title('Status of affected people.', pad=20)\nplt.ylabel('Count of people', fontsize=20)\nplt.xlabel('Status', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=8)\nplt.show()","ce1d3b8a":"plt.figure(figsize=(25,20))\nax=sns.barplot(data['detected_district'].value_counts()[:10].values,data['detected_district'].value_counts()[:10].index, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_width()+0.50, i.get_y()+0.50, \\\n            str(int(i.get_width())), fontsize=30,color='black')\nax.set_title('Top 10 districts and their count of affected people.', pad=20,fontsize=40)\nplt.xlabel('Count of people affected', fontsize=30)\nplt.ylabel('District', fontsize=30)\n# plt.rc('xtick',labelsize=0)\n# plt.rc('ytick',labelsize=20)\nplt.show()","d2b4a345":"plt.figure(figsize=(15,10))\nax=sns.swarmplot(data['current_status'],data['age'],palette=sns.dark_palette(\"blue\", reverse=True))\nax.set_title('Graph between age and current status of affected people', pad=20,fontsize=20)\nplt.xlabel('Current Status', fontsize=20)\nplt.ylabel('Age', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=10)","91aecf38":"\ndata.head()","cfd2f417":"data['status change difference'] = pd.to_datetime(data['status_change_date'])-pd.to_datetime(data['diagnosed_date'])","35bc5978":"data['status change difference'].value_counts()","d32c2ab6":"data.head()","1f3cd145":"diagnose_data=pd.DataFrame({'Dates':pd.to_datetime(data['diagnosed_date']).value_counts().index,\n                           'Count':pd.to_datetime(data['diagnosed_date']).value_counts().values})\ndiagnose_data=diagnose_data.sort_values('Dates')\ndiagnose_data=diagnose_data.reset_index(drop=True)\ndiagnose_data=diagnose_data.set_index('Dates')","fd2dc387":"import matplotlib.dates as mdates\nfig, ax = plt.subplots(figsize=(20,10))\ngraph=ax.plot(diagnose_data.Count,marker='s')\nmyFmt = mdates.DateFormatter('%d-%m-%y')\nax.xaxis.set_major_formatter(myFmt)\nplt.rc('xtick',labelsize=8)\nplt.xticks(diagnose_data.index.values,rotation=90)\nplt.show()","eaf67e48":"diagnose_data['cumsum']=diagnose_data['Count'].cumsum()","2bcbf169":"diagnose_data['cumsum']","17991a88":"fig, ax = plt.subplots(figsize=(20,10))\ngraph=ax.plot(diagnose_data['cumsum'],marker='s')\nmyFmt = mdates.DateFormatter('%d-%m-%y')\nax.xaxis.set_major_formatter(myFmt)\nplt.rc('xtick',labelsize=8)\nplt.xticks(diagnose_data.index.values,rotation=90)\nplt.show()","e872dc19":"entities = ['schools & other educational organization shutdown','public places shutdown',\n            'work from home started for employees','country under lockdown','after lockdown']\ndates = ['2020-03-10','2020-03-13','2020-03-16','2020-03-21','2020-03-26']","f04a9d1c":"# Now getting the cases count before each entity shutdown.\ndata = data.sort_values(by=\"diagnosed_date\")","51a23638":"mask1 = (data['diagnosed_date'] > '2020-01-30') & (data['diagnosed_date'] <= '2020-03-09') # before school lockdown\nmask1 = len(data.loc[mask1])\nmask2 = (data['diagnosed_date'] > '2020-03-10') & (data['diagnosed_date'] <= '2020-03-12') #before public place shutdown\nmask2 = len(data.loc[mask2])\nmask3 = (data['diagnosed_date'] > '2020-03-13') & (data['diagnosed_date'] <= '2020-03-15') # beforw wfh\nmask3 = len(data.loc[mask3])\nmask4 = (data['diagnosed_date'] > '2020-03-16') & (data['diagnosed_date'] <= '2020-03-21') # beforw lookdown\nmask4 = len(data.loc[mask4])\nmask5 = (data['diagnosed_date'] > '2020-03-22') & (data['diagnosed_date'] <= '2020-03-28') # beforw lookdown\nmask5 = len(data.loc[mask5])","cad7a3f5":"case_counts = [mask1, mask2,mask3,mask4,mask5]","4f132cb0":"plot_data = pd.DataFrame({'dates':dates,'counts':case_counts,'entities': entities})","d9665839":"plot_data['dates'] = pd.to_datetime(plot_data['dates'])","5f0c3fae":"plot_data","dd82a66f":"fig, ax = plt.subplots(figsize=(10,8))\nplt.hlines(y=plot_data.entities, xmin=0, xmax=plot_data.counts, color='red')\nplt.plot(plot_data.counts, plot_data.entities, \"D\")\n# Add titles and axis names\nax.xaxis.label.set_color('black')\nplt.yticks(plot_data.entities)\nplt.title(\"Case Count Growth Rate After Lockdown\")\nplt.xlabel('Covid19 Case Count', fontsize=10)","7ff6de07":"def get_travel_hitsory(text):    \n    doc = ner.name(text, language='en_core_web_sm')\n    text_label = set((X.text,X.label_) for X in doc)\n    if  not text_label:\n        return \"Unknown\"\n    d = dict(list(text_label))\n    for i in d:\n        if d[i] == 'GPE':\n            return i\n        else:\n            return \"Unknown\"\n","ea5ca87d":"data['travel_from']=data['notes'].apply(get_travel_hitsory)","e67ec322":"data['detected_city_latlong'] = data['detected_city_pt'].apply(get_lat_long)\n\ndata['detected_city_lat'] = data['detected_city_latlong'].apply(lambda x:x[0])\ndata['detected_city_long'] = data['detected_city_latlong'].apply(lambda x:x[1])\n\ndata.detected_city_lat = data.detected_city_lat.astype('float64')\ndata.detected_city_long = data.detected_city_long.astype('float64')","fbff26d4":"network_data = pd.DataFrame({'travel_from':data.travel_from,'travel_to_lat':data.detected_city_lat,'travel_to_long':data.detected_city_long})","30b036a4":"network_data","de0676ee":"indexNames = network_data[network_data['travel_from'] == \"Unknown\" ].index\n# Delete these row indexes from dataFrame\nnetwork_data.drop(indexNames , inplace=True)\nindexNames = network_data[network_data['travel_from'] == \"Arrived\" ].index\n# Delete these row indexes from dataFrame\nnetwork_data.drop(indexNames , inplace=True)","e7ee301e":"network_data['travel_from'].value_counts()","9ba20949":"plt.figure(figsize=(25,20))\nax=sns.barplot(network_data['travel_from'].value_counts()[:10].values,network_data['travel_from'].value_counts()[:10].index, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_width()+0.50, i.get_y()+0.50, \\\n            str(int(i.get_width())), fontsize=30,color='black')\nax.set_title('Top 10 places from where infected people had travelled.', pad=20,fontsize=40)\nplt.xlabel('Count of people ', fontsize=30)\nplt.ylabel('Places', fontsize=30)\nplt.rc('xtick',labelsize=20)\nplt.rc('ytick',labelsize=20)\nplt.show()","0d6ee3a3":"# COVID19-India-Analysis [Kaggle Notebook](https:\/\/www.kaggle.com\/samacker77k\/covid19-india-analysis)\nA notebook dedicated to data visualization and analysis of COVID19 Pandemic in India.\n\n---\n\nThis notebook visualizes the effects of COVID19 pandemic in India to help understand the effect of the outbreak demographically.\n\nMaintained by:\n* Shivani Tyagi [LinkedIn](https:\/\/www.linkedin.com\/in\/shivani-tyagi-09\/) [Github](https:\/\/github.com\/shivitg)\n* Nitika Kamboj [LinkedIn](https:\/\/linkedin.com\/in\/nitika-kamboj) [Github](https:\/\/github.com\/nitika-kamboj)\n* Samar Srivastava [LinkedIn](https:\/\/linkedin.com\/in\/samacker77l) [Github](https:\/\/github.com\/samacker77)\n \n","58c1b7e3":"---","a048c702":"---\n#### Analysis:\n#### India is a federal union comprising 28 states and 8 union territories, for a total of 36 entities. The current affected entities are \"26\".\n---","8d33d63c":"> Graph between different states and number of detected cases.","3fc338e2":"### Graph to show relationship between status change","7981449f":"#### No. of days between change in status","67ddd9c0":"> No. of people affected district wise","6f0c3b55":"#### Let's observe the age factor for coronavirus spread\n---","bed135bf":"> Graph between gender and count of affected people.","d17472fd":"#### The graph clearly shows that Maharashtra is the most affected state followed by Kerala ","1f90dd45":"---\n#### Analysis:\n#### The most common affected people belongs to age group of 20-60.\n---","e607557d":"### Importing libraries\n---","a8fae3d8":"> Graph showing relationship between current status and age of people","659bde20":"#### This swarmplot shows that majority of the people hospitalized are in the age group of ~18 to 88","bdddc0f7":"#### Now the data is ready for analysis and preprocessing","09b00e2f":"> Graph displaying status and count of affected people.","920d7fb9":"#### Checking dtypes","9e96b65a":"### COVID19 Confirmed cases current location\n> Click on the map and counts to play with the graph.","ad098810":"---\n### Coronavirus 2019(COVID-19) \n#### COVID 19 is an infectious spreading disease,which is casued by severe acute respiratory syndrome coronavirus 2(SARS-Cov-2).This disease was first found in 2019 in Wuhan distirct of China, and is spreading tremendously across the globe,resulted in pandemic declaration by World Health Organization.\n---","396c3f55":"> Imputing missing values with 'Unknown'","d4ff119c":"> Graph between the count of affected people and Nationality.","17b7207e":"#### Now we convert date columns to datetime objects since they are in string.","cef76826":"> On first look we see that the attributes 'id' and 'unique_id' are same. So we check if they have any values that are different.","3e6b16d1":"<h4 style=\"color:green\">Last update on<\/h4>","65b84b11":"<p style=\"color:red\">Since the API that was previously being used to fetch the data has now been revoked. We will be updating the dataset every 24 hours.<\/p>","b55ba82a":"#### Days taken to change status(Hospitalized\/Death\/Recover)","2e2c5d12":"---\n### Now the data is ready for EDA\n> Understanding the involved factors in the growth of the Corona Virus via visualization\n---","bf6f4cf5":"#### Analysis: Even after lockdown more cases are being reported everyday","79802f16":"> Since government_id is of no use. We can drop it.","203edc43":"> Since we have same values in both columns. We can drop one of them and make another as the index","33c2dc1b":"Using  boolean mask to fetch case counts within dates","050ef55c":"---\n#### Now we have fetched data successfully. Now we will inspect the data. ","d979ad47":"### Data fetched from local news about the shutdown process in India.","f940b984":"---\n#### Analysis: \n#### There are total in total 4000 cities in India. Number of cities affected currently are \"155\".\n---"}}