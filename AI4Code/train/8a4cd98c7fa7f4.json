{"cell_type":{"03515248":"code","e0da2ffb":"code","7a29826e":"code","177e6798":"code","b4e25d25":"code","ccce6905":"code","70d1d0b1":"code","2647ecf0":"code","9bd1ef21":"code","5845de36":"code","ba800149":"code","e67a51ce":"code","dd241ef2":"code","8ad947f5":"markdown","90fb3faf":"markdown","eb018e7f":"markdown"},"source":{"03515248":"DATA_PATH = '..\/input\/shopee-product-matching\/'\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n\ntrain = pd.read_csv(DATA_PATH + 'train.csv')\ntrain['image'] = DATA_PATH + 'train_images\/' + train['image']\ntrain.head()","e0da2ffb":"def findByLabel(label_group_idx, showImgNumber=10, color=None):\n    train_a = train[train.label_group == label_group_idx].reset_index()\n  \n    fig, ax = plt.subplots(2, 5, figsize=(20, 10))\n    for i in range(2):\n        for j in range(5):\n            if showImgNumber == 0: break\n            ax[i, j].imshow(cv2.imread(train_a.image[showImgNumber-1], color))\n            showImgNumber-=1\n        \n    return train_a","7a29826e":"findByLabel(1163569239)\nplt.show()","177e6798":"findByLabel(1163569239, color=0)\nplt.show()","b4e25d25":"findByLabel(3627744656)\nplt.show()","ccce6905":"findByLabel(3627744656, color=0)\nplt.show()","70d1d0b1":"label_train = train[train.label_group==1163569239].reset_index()\nlabel_train","2647ecf0":"img1 = cv2.imread(label_train.image[4])\ncolor = ('r', 'g', 'b')\nfor i, color in enumerate(color):\n    hist = cv2.calcHist([img1], [i], None, [256], [0, 256])\n    plt.title('img1')\n    plt.xlabel('Bins')\n    plt.ylabel('Frequency')\n    plt.plot(hist, color=color, label=color)\nplt.legend()\nplt.show()","9bd1ef21":"colors = ('r', 'g', 'b')\nfig, ax = plt.subplots(10, 2, figsize=(8, 20))\nfor i in range(10):\n    img = cv2.imread(label_train.image[i])\n    ax[i, 0].imshow(img)\n    for k, color in enumerate(colors):\n        hist = cv2.calcHist([img], [k], None, [256], [0, 256])\n        ax[i, 1].plot(hist, color=color, label=color)\n        ax[i, 1].legend()\nplt.show()","5845de36":"train_label = train.groupby('label_group').posting_id.count().sort_values(ascending=True)\ntrain_label","ba800149":"pd.cut(train_label, bins=[0, 10, 20, 30, 40, 51]).value_counts()","e67a51ce":"def creatImages(img_path):\n    '''\n    input: img_path\n    output: list. 4 pics\n    function: 1 pic in, 4 pics out. Generate more pics in label_group\n    '''\n    img = cv2.imread(img_path)\n    row, col = int(img.shape[0]), int(img.shape[1])\n    img1 = img[0:int(2*row\/3), 0:int(2*col\/3)]\n    img2 = img[0:int(2*row\/3), int(1*col\/3):col]\n    img3 = img[int(1*row\/3):row, 0:int(2*col\/3)]\n    img4 = img[int(1*row\/3):row, int(1*col\/3):col]\n    images = [img1, img2, img3, img4]\n    return images","dd241ef2":"images = creatImages(train.image[2123])\nfor i in range(len(images)):\n    plt.subplot(2, 2, i+1)\n    plt.imshow(images[i])\nplt.show()","8ad947f5":"Here I offerred one way to generate more pics from dataset, which could be useful for the further training. Let's see.","90fb3faf":"It turns out that product within the same label group have different histogram with respect to RGB. Hist method may not be a good way to separate them out.","eb018e7f":"It turns out that setting the pic to single color channel (i.e. color=0) may not be a good option as it turns all the pics into similar color."}}