{"cell_type":{"516683f6":"code","1746348d":"code","9946a94b":"code","081f59f0":"code","eeba28af":"code","6cafbeb0":"code","0d16008f":"code","49a72b44":"code","7d3707c4":"code","829d654a":"code","3a1685dd":"code","69ce444e":"code","39d3e801":"code","f74d12ca":"code","299e343c":"code","28afbf53":"code","5decef75":"code","a825e33e":"code","e023de5c":"code","f328ba38":"code","d8d46825":"code","4624c283":"code","301b4b83":"code","83cc19d2":"code","83ff9904":"code","5f6bd5dc":"code","867325ea":"markdown","21b2bd54":"markdown","72a703b4":"markdown","c4600750":"markdown","5b0bc9fb":"markdown","3b76a26b":"markdown","6f3226a6":"markdown","9399cafd":"markdown","279eb5e3":"markdown","1374eb56":"markdown","1ca19eba":"markdown","f12edf56":"markdown","b06e7336":"markdown","eab821f3":"markdown"},"source":{"516683f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Import for Visualization\nimport folium\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1746348d":"dfCities = pd.read_csv(\"\/kaggle\/input\/world-cities\/worldcities.csv\")\ndfCountries = pd.read_csv(\"\/kaggle\/input\/world-countries-locations\/countries_locations.csv\")\n\nprint(\"Data Countries Shape: \", dfCountries.shape)\nprint(\"Data Cities Shape: \", dfCities.shape)","9946a94b":"print('Countries Columns List\\n-------------------------\\n', dfCountries.columns)\nprint('\\n\\nCities Columns List\\n-------------------------\\n', dfCities.columns)","081f59f0":"dfCountryloc = dfCountries.drop('Unnamed: 0', axis=1)\ndfCountryloc['name'] = dfCountries['name'].str.lower()\ndfCountryloc.head()","eeba28af":"print('Total Number of Countries: ', len(dfCountryloc['name'].unique()) )","6cafbeb0":"dfCities['country'] = dfCities['country'].str.lower()\ndfCities.head()","0d16008f":"dfCities['country'] = dfCities['country'].str.replace('myanmar', 'myanmar [burma]') # Execute One Time Otherwise InConsistency Occur","49a72b44":"dfCities['country'] = dfCities['country'].str.replace(r\"\\(\", \"[\", regex=True)\ndfCities['country'] = dfCities['country'].str.replace(r\"\\)\", \"]\", regex=True)\n\ndfCities['country'] = dfCities['country'].str.replace('korea, north', 'north korea')\ndfCities['country'] = dfCities['country'].str.replace('korea, south', 'south korea')\ndfCities['country'] = dfCities['country'].str.replace('virgin islands, british', 'british virgin islands')\ndfCities['country'] = dfCities['country'].str.replace('south georgia and south sandwich islands', 'south georgia and the south sandwich islands')\ndfCities['country'] = dfCities['country'].str.replace('bahamas, the', 'bahamas')\ndfCities['country'] = dfCities['country'].str.replace('kinshasa', 'drc')\ndfCities['country'] = dfCities['country'].str.replace('brazzaville', 'drc')\ndfCities['country'] = dfCities['country'].str.replace('czechia', 'czech republic')\ndfCities['country'] = dfCities['country'].str.replace('cabo verde', 'cape verde')\ndfCities['country'] = dfCities['country'].str.replace('micronesia, federated states of', 'micronesia')\ndfCities['country'] = dfCities['country'].str.replace('gambia, the', 'gambia')\ndfCities['country'] = dfCities['country'].str.replace('macedonia', 'macedonia [fyrom]')\ndfCities['country'] = dfCities['country'].str.replace('reunion', 'r\u00e9union')\ndfCities['country'] = dfCities['country'].str.replace('saint helena, ascension, and tristan da cunha', 'saint helena')\ndfCities['country'] = dfCities['country'].str.replace('sao tome and principe', 's\u00e3o tom\u00e9 and pr\u00edncipe')\ndfCities['country'] = dfCities['country'].str.replace('c\u00f4te d\u2019ivoire', 'c\u00f4te d\\'ivoire')\ndfCities.head()","7d3707c4":"# Manual Selected Country Pakistan\nprint(\"Total Cities: \", len(dfCities[dfCities['country'] == 'pakistan']['city'].unique()))\ndfCities[dfCities['country'] == 'pakistan']","829d654a":"print('Total Provinces: ', len(dfCities[dfCities['country'] == 'pakistan']['admin_name'].unique()), \n      '\\n----------------------------------------------------------------------\\n\\n',\n      'List of the Provinces Name',\n      '\\n----------------------------------------------------------------------\\n',\n      dfCities[dfCities['country'] == 'pakistan']['admin_name'].unique(), '\\n\\n')\n\ndfCities[dfCities['country'] == 'pakistan']","3a1685dd":"print(\"Total Number of Countries [in Cities Location Dataset] : \", len(dfCities['country'].unique()) )","69ce444e":"print('Total Number of Countries: ', len(dfCountryloc['name'].unique()) )\nprint(\"Total Number of Countries [in Cities Location Dataset] : \", len(dfCities['country'].unique()) )\n\nprint(\"Difference in Number of Countries : \", len(dfCountryloc['name'].unique()) - len(dfCities['country'].unique()) )","39d3e801":"xMatched = 0\nxNotMatched = 0\ncountry_notmatched = []\nfor x, xRows in dfCountryloc.iterrows():\n    if(len(dfCities[dfCities['country'] == xRows['name']]) > 0):\n        xMatched = xMatched + 1\n    else:\n        xNotMatched = xNotMatched + 1\n        country_notmatched.append(xRows['name'])\n\nprint('Total Matched: ', xMatched)\nprint('Not Matched: ', xNotMatched)\nprint(country_notmatched )","f74d12ca":"# Droped Unmatched Country Records from Dataset\ndfCountryLocatiions = dfCountryloc[~dfCountryloc['name'].isin(country_notmatched)]\ndfCountryLocatiions.head()","299e343c":"country_latitude = dfCountryloc[dfCountryloc['name'] == 'pakistan']['latitude'].values[0]\ncountry_longitude = dfCountryloc[dfCountryloc['name'] == 'pakistan']['longitude'].values[0]\nprint('Pakistan Latitude: ', country_latitude, '\\nPakistan Longitude: ',country_longitude)","28afbf53":"getdfCities = dfCities[dfCities['country'] == 'pakistan']\nprint('Length of Cities: ', len(getdfCities))","5decef75":"# Pakistan in Geolocation Map\nxgetMap = folium.Map(location = [country_latitude, country_longitude ],\n                     tiles = 'Stamen Terrain',\n                     zoom_start = 6, min_zoom = 5\n                    )\nfor city, lat, lng in zip(list(getdfCities['city']),\n                          list(getdfCities['lat']),\n                          list(getdfCities['lng'])):\n    folium.Marker([lat, lng], \n                  icon=folium.Icon(icon='circle', prefix='fa'), #color=colorlist ),\n                  tooltip = (\"<strong>City:\" + str(city) + \"<\/strong>\") ).add_to(xgetMap)\nxgetMap","a825e33e":"selectedCountry = dfCountryLocatiions.sample(n=1) # Randomly Select 01-Country\nprint(\"------ Selected Country ------\\n\",\n      \"Country: \", selectedCountry['name'].values[0], \n      \"\\nLatitude: \", selectedCountry['latitude'].values[0],\n      \"\\nLongitude: \", selectedCountry['longitude'].values[0] )\n\n# Query to get the list of Cities of above Selected Country\nstrQuery = '`country` == \"'+selectedCountry['name'].values[0]+'\"'\ndfMap = dfCities.query(strQuery)\nprint(\"\\nNumber of Cities: \", len(dfMap),\n      \"\\n\\n------ Cities List of Selected Country ------\\n\\n\")\ndfMap","e023de5c":"getMap = folium.Map(location = [selectedCountry['latitude'].values[0], selectedCountry['longitude'].values[0] ],\n#                     tiles='CartoDB positron',\n                     tiles = 'Stamen Terrain',\n#                     tiles = 'OpenStreetMap',\n                    \n                    zoom_start = 5.4, min_zoom = 3\n                   )\nfor city, lat, lng in zip(list(dfMap['city']),\n                          list(dfMap['lat']),\n                          list(dfMap['lng'])):\n    folium.Marker([lat, lng], \n                  icon=folium.Icon(icon='circle', prefix='fa'), #color=colorlist ),\n                  tooltip = (\"<strong>City:\" + str(city) + \"<\/strong>\") ).add_to(getMap)\n\ngetMap","f328ba38":"import json\ncountry_json = json.load(open(\"\/kaggle\/input\/world-countries\/world-countries.json\", \"r\") )","d8d46825":"print(country_json.keys() )\nprint(country_json['features'][0].keys() )","4624c283":"print('Number of Countries in JSON Dataset: ', len(country_json['features']) )","301b4b83":"for i in range(len(country_json['features'])):\n    if (country_json['features'][i]['properties']['name'].lower() == 'pakistan'):\n        getJson_country_df = country_json['features'][i]\n\ngetJson_country_df","83cc19d2":"pakistanMap = folium.Map(location = [country_latitude, country_longitude ],\n                         tiles='CartoDB positron',\n                         zoom_start = 5, max_zoom = 100\n                        )\n\nfolium.GeoJson(getJson_country_df, show = False).add_to(pakistanMap)\n\nfor city, lat, lng in zip(list(getdfCities['city']),\n                          list(getdfCities['lat']),\n                          list(getdfCities['lng'])):\n    folium.Marker([lat, lng], \n                  icon = folium.Icon(icon = 'circle', prefix = 'fa'), #color=colorlist ),\n                  tooltip = (\"<strong>City:\" + str(city) + \"<\/strong>\") ).add_to(pakistanMap)\n\npakistanMap","83ff9904":"for i in range(len(country_json['features'])):\n    if (country_json['features'][i]['properties']['name'].lower() == selectedCountry['name'].values[0]):\n        getJson_df = country_json['features'][i]\n\ngetJson_df","5f6bd5dc":"xMap = folium.Map(location = [ selectedCountry['latitude'].values[0], selectedCountry['longitude'].values[0] ],\n                  zoom_start = 5,\n                  tiles = \"CartoDB positron\",\n#                  tiles = 'Stamen Terrain',\n#                  tiles = 'OpenStreetMap',\n                  max_zoom = 100)\n\nfolium.GeoJson(getJson_df, show = False).add_to(xMap)\n\nfor city, lat, lng in zip(list(dfMap['city']),\n                          list(dfMap['lat']),\n                          list(dfMap['lng'])):\n    folium.Marker([lat, lng], \n                  icon = folium.Icon(icon = 'circle', prefix = 'fa'), #color=colorlist ),\n                  tooltip = (\"<strong>City:\" + str(city) + \"<\/strong>\") ).add_to(xMap)\n\nxMap","867325ea":"* Country Geolocation with name of Cities\n* Country Geolocation and respective Cities with the help of JSON Dataset \n* Applying Boundry of Selected Country","21b2bd54":"### **Manual Country Selection [ Pakistan ]**","72a703b4":"### **From Manual Country Selection**","c4600750":"### **Countries with Cities Locations**","5b0bc9fb":"### **Pakistan in Geolocation Map**","3b76a26b":"# **Visualization With JSON Dataset**","6f3226a6":"### **Geolocation Map with JSON**","9399cafd":"### **Manual Country Selection [ Pakistan ]**","279eb5e3":"### **From Random [Auto] Country Selection**","1374eb56":"# **Randomly Country Name Selection [Auto Selection]**","1ca19eba":"# **Data Loading ...**","f12edf56":"### **Countries with Locatons**","b06e7336":"## **Geolocation Map**","eab821f3":"### **Comparision of Country Names in Both Datasets**"}}