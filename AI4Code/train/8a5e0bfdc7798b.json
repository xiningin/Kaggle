{"cell_type":{"b158041e":"code","28db02fd":"code","1e3c4848":"code","f261cf3a":"code","8f89a37f":"code","52036960":"code","313d629a":"code","a40b197f":"code","728ec357":"markdown"},"source":{"b158041e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn import preprocessing\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport gc\n\npd.set_option('display.max_columns', 500)\n%matplotlib inline","28db02fd":"train = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv')\ntrain_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv')\n\nprint('train shape: {}'.format(train.shape))\nprint('train_transaction shape: {}'.format(train_transaction.shape))","1e3c4848":"def search_min_multi_vals(vals):\n    pass_vals = []\n    min_multi_vals = []\n    for val in tqdm(vals):\n        tmp_vals_1 = vals[np.where(vals%val == 0)]\n        if len(tmp_vals_1) > 2:\n            tmp_vals_2 = [val \/ tmp_val for tmp_val in val\/vals if tmp_val.is_integer()]\n            min_val = min(tmp_vals_2)\n            if min_val not in min_multi_vals:\n                min_multi_vals.append(min_val)\n        else:\n            pass_vals.append(val)\n    print('min_multi_vals: {}'.format(len(min_multi_vals)))\n    print('pass_vals: {}'.format(len(pass_vals)))\n    return min_multi_vals, pass_vals","f261cf3a":"def adjust_vals(min_multi_vals, pass_vals):\n    rm_vals = []\n    pass_array = np.array(pass_vals)\n    for val in min_multi_vals:\n        rm_vals.extend(list(pass_array[np.where(pass_array%val==0)]))\n\n    u_rm_vals = set(rm_vals)\n\n    add_multi_vals = list(set(pass_vals).difference(u_rm_vals))\n\n    assert len(set(min_multi_vals).intersection(set(add_multi_vals))) == 0, print('something error, please check process.')\n    \n    multi_vals = []\n    multi_vals.extend(min_multi_vals)\n    multi_vals.extend(add_multi_vals)\n    \n    print('multi_vals: {}'.format(len(multi_vals)))\n    \n    return multi_vals","8f89a37f":"def category_mapping(val_category_dict, raw_array):    \n    category_array = np.zeros(len(raw_array))\n    for val, category in tqdm(val_category_dict.items()):\n        category_array[np.where(raw_array%val==0)] = category\n\n    # zero\n    category_array[np.where(raw_array == 0)] = -1\n    # nan\n    category_array[np.where(np.isnan(raw_array))] = -2\n    category_array = category_array.astype('int')\n\n    assert np.all(raw_array[category_array==-1]==0), print('something error, please check zero process.')\n    assert np.all(np.isnan(raw_array[category_array==-2])), print('something error, please check nan process.')\n    return category_array","52036960":"def category_pipeline(v_feats, df):\n    v_categories = {}\n    for v_feat in v_feats:\n        print('RUN: {}'.format(v_feat))\n        v_vals = df[v_feat].unique()\n        min_multi_vals, pass_vals = search_min_multi_vals(v_vals)\n        adjusted_multi_vals = adjust_vals(min_multi_vals, pass_vals)\n\n        val_category_dict = {val: category for val, category in zip(adjusted_multi_vals, range(len(adjusted_multi_vals)))}\n\n        raw_array = df[v_feat].values\n        v_category = category_mapping(val_category_dict, raw_array)\n        v_categories[v_feat] = v_category\n    return v_categories","313d629a":"v_feats_1 = ['V202', 'V203', 'V204']\nv_categories = category_pipeline(v_feats_1, train_transaction)\nfor v_feat, v_category in v_categories.items():\n    train_transaction['{}_category'.format(v_feat)] = v_category\n    counts_dict = train_transaction[v_feat].value_counts()\n    train_transaction['{}_category_cnt'.format(v_feat)] = train_transaction[v_feat].map(counts_dict)","a40b197f":"train_transaction[['TransactionID', 'isFraud', 'TransactionDT', 'V202', 'V203', 'V204', 'V202_category', 'V203_category', 'V204_category', 'V202_category_cnt', 'V203_category_cnt', 'V204_category_cnt']].head(20)","728ec357":"# Overview\nSome V columns have a constant multiple relationship. Perhaps this relationship represents a count-up.  \nThis notebook extracts this and creates a count feature.  \nCan be used for validation or your model.  \n\nYou can check this relationship in the following notebook.  \nhttps:\/\/www.kaggle.com\/hatunina\/ieee-fraud-detection-first-puzzle  \n\nNot all are checked, but these relationships can be seen in the V column below.  \n```\n'V202','V203','V204',\n'V205','V206','V207',\n'V208','V209','V210',\n'V214','V215','V216',\n'V263','V264','V265',\n'V266','V267','V268',\n'V270','V271','V272',\n'V273','V274','V275',\n'V276','V277','V278',\n```"}}