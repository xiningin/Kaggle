{"cell_type":{"5b34bbcb":"code","13d64742":"code","58eb9664":"code","67c05878":"code","01033cbd":"code","5f7ba32e":"code","28d90bca":"code","b0f58061":"code","bd87d147":"markdown","55c7c2c7":"markdown","56cdb3ce":"markdown","257415b4":"markdown","dddced76":"markdown","838c13ac":"markdown","dfdfeb14":"markdown","6b5f1c33":"markdown","d5db4c1a":"markdown"},"source":{"5b34bbcb":"import tensorflow as tf\n\n(X_train, y_train), (X_test, y_test) = tf.keras.datasets.boston_housing.load_data(\n    path='boston_housing.npz', test_split=0.2, seed=113\n)","13d64742":"tf.random.set_seed(113)\n\n# 1. Build the model\nmodel_1 = tf.keras.Sequential([\n    tf.keras.layers.Dense(1, name=\"output_layer\")\n])\n\n# 2. Compile the model\nmodel_1.compile(loss=\"mae\",\n                optimizer=tf.keras.optimizers.SGD(),\n                metrics=[\"mae\"])\n\n# 3. Fit the model\nmodel_1.fit(X_train, y_train, epochs=100, verbose=0)","58eb9664":"model_1.evaluate(X_test, y_test)","67c05878":"# 1. Build the model\nmodel_2 = tf.keras.Sequential([\n    tf.keras.layers.Dense(1, name=\"output_layer\")\n])\n\n# 2. Compile the model\nmodel_2.compile(loss=\"mae\",\n                optimizer=tf.keras.optimizers.Adam(),\n                metrics=[\"mae\"])\n\n# 3. Fit the model\nmodel_2.fit(X_train, y_train, epochs=100, verbose=0)","01033cbd":"model_2.evaluate(X_test, y_test)","5f7ba32e":"callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=10)","28d90bca":"# 1. Build the model\nmodel_3 = tf.keras.Sequential([\n    tf.keras.layers.Dense(50),\n    tf.keras.layers.Dense(1, name=\"output_layer\")\n])\n\n# 2. Compile the model\nmodel_3.compile(loss=\"mae\",\n                optimizer=tf.keras.optimizers.Adam(),\n                metrics=[\"mae\"])\n\n# 3. Fit the model\nmodel_3.fit(X_train, y_train, epochs=500, verbose=0, callbacks=[callback])","b0f58061":"model_3.evaluate(X_test, y_test)","bd87d147":"Yes! we have decreased our loss value from about 1200 to 12. Let's see if increasing the number of layers and hidden units can make our model more accurate.","55c7c2c7":"## `model_1` (baseline)","56cdb3ce":"Awesome! We already have our (X_train, y_train), (X_test, y_test), so we can start to build our model.","257415b4":"Model_3 is our most accurate yet, we can predict house prices in a +- 4000 range. Upvote this notebook if you liked this intro to linear regression.","dddced76":"Looks like we have a fairly high mae. Let's try to change the optimizer.","838c13ac":"# Predict Boston House Price\n\nSamples contain 13 attributes of houses at different locations around the Boston suburbs in the late 1970s. Targets are the median values of the houses at a location (in k$).\n\nWe will get the houses data from [tf.keras.datasets.boston_housing.load_data](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/datasets\/boston_housing\/load_data).","dfdfeb14":"## `model_3` (increasing the complexity)\n\nThis time we will define an early stopping callback to reduce the number of epochs we train for.","6b5f1c33":"## Get the data","d5db4c1a":"## `model_2` (Adam optimizer)"}}