{"cell_type":{"c9c1ee94":"code","9bd9fdc2":"code","65fc81c1":"code","33b07462":"code","b9fd84d8":"code","fb46cf32":"markdown","ee6a0cdb":"markdown","6efff66c":"markdown","77873550":"markdown","1acadd82":"markdown","e39187b0":"markdown","e3535aaa":"markdown","024806fe":"markdown","87330ae4":"markdown","e70de278":"markdown"},"source":{"c9c1ee94":"import matplotlib.pyplot as plt\nfrom scipy.io import wavfile\nimport argparse\nimport os\nfrom glob import glob\nimport numpy as np\nimport pandas as pd\nfrom librosa.core import resample, to_mono\nfrom tqdm import tqdm\nfrom pathlib import Path\nimport librosa\nimport librosa.display\nfrom tqdm import tqdm_notebook as tqdm\nfrom IPython.display import Audio, IFrame, display\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","9bd9fdc2":"audio_path='..\/input\/birdsong-resampled-train-audio-04\/wooscj2\/XC67042.wav'\nx , sr = librosa.load(audio_path)\nlibrosa.display.waveplot(x, sr=sr)\nAudio(x, rate=sr)","65fc81c1":"def envelope(y, rate, threshold):\n    mask = []\n    y = pd.Series(y).apply(np.abs)\n    y_mean = y.rolling(window=int(rate\/20),min_periods=1,center=True).max()\n    for mean in y_mean:\n        if mean > threshold:\n            mask.append(True)\n        else:\n            mask.append(False)\n    return mask, y_mean","33b07462":"def downsample_mono(path, sr):\n    rate, wav = wavfile.read(path)\n    wav = wav.astype(np.float32, order='F')\n    try:\n        tmp = wav.shape[1]\n        wav = to_mono(wav.T)\n    except:\n        pass\n    wav = resample(wav, rate, sr)\n    wav = wav.astype(np.int16)\n    return sr, wav\n\n\ndef check_dir(path):\n    if os.path.exists(path) is False:\n        os.mkdir(path)\n\n\ndef test_threshold(args):\n    src_root = args.src_root\n    wav_paths = glob('{}\/**'.format(src_root), recursive=True)\n    wav_path = [x for x in wav_paths if args.fn in x]\n    if len(wav_path) != 1:\n        print('audio file not found for sub-string: {}'.format(args.fn))\n        return\n    rate, wav = downsample_mono(wav_path[0], args.sr)\n    mask, env = envelope(wav, rate, threshold=args.threshold)\n    fig = plt.figure(figsize=(30, 30))\n    ax1 = fig.add_subplot(211)\n    ax2 = fig.add_subplot(212)\n    \n    plt.style.use('ggplot')\n    plt.title('Signal Envelope, Threshold = {}'.format(str(args.threshold)))\n    \n    ax1.plot(wav, color='g', label='original')\n    ax1.set_title('Original Audio from Tape Recorder',fontsize=30)\n    ax2.plot(env, color='y', label='envelope')\n    ax2.plot(wav[mask], color='c', label='keep')\n    ax2.plot(wav[np.logical_not(mask)], color='r', label='remove')\n    ax2.legend(loc='best',fontsize=30)\n    ax2.set_title('Processed Audio',fontsize=30)\n    plt.show()\n    print(\"Original- Tape Recoder Audio\")\n    display(Audio(wav, rate=rate))\n    print(\"Noise(removed)- Red\")\n    display(Audio(wav[np.logical_not(mask)], rate=sr))\n    print(\"Pure Bird Call(saved)- Blue\")\n    display(Audio(wav[mask], rate=rate))","b9fd84d8":"if __name__ == '__main__':\n\n    parser = argparse.ArgumentParser(description='Cleaning audio data')\n    parser.add_argument('--src_root', type=str, default='..\/input\/birdsong-resampled-train-audio-03',\n                        help='directory of audio files in total duration')\n    parser.add_argument('--dst_root', type=str, default='clean',\n                        help='directory to put audio files split by delta_time')\n    parser.add_argument('--delta_time', '-dt', type=float, default=1.0,\n                        help='time in seconds to sample audio')\n    parser.add_argument('--sr', type=int, default=16000,\n                        help='rate to downsample audio')\n\n    parser.add_argument('--fn', type=str, default='XC124970',\n                        help='file to plot over time to check magnitude')\n    parser.add_argument('--threshold', type=str, default=200,\n                        help='threshold magnitude for np.int16 dtype')\n    args, _ = parser.parse_known_args()\n\n    test_threshold(args)\n","fb46cf32":"## If you find this knowledge useful please do upvote, it motivates me to work harder.\n\nFor further discussion and understanding check this https:\/\/www.kaggle.com\/c\/birdsong-recognition\/discussion\/169582\n\n\n\n### `This EDA is being updated. Your questions and comments are very welcome!`\n\n","ee6a0cdb":"![image.png](attachment:image.png)\n\n## <center>Sound Envelope (Red Line)<\/center>","6efff66c":"# <center> \ud83e\udd89Cornell BirdSong Recognition- Help Grandma?\ud83e\udd89<\/center>","77873550":"![](https:\/\/nas-national-prod.s3.amazonaws.com\/styles\/hero_image\/s3\/lisa-rainsong_robert-muller.jpg?itok=j_HjxO2k)","1acadd82":"# Introduction\n\n### Grandma has a hobby to record BirdCall, she travels to various places to record bird voice as they are melodious to the her ears. But when she plays her tape recorder she can hear a lot of noise sounds as well i.e. wind, people talking, silence, and other evironmental sounds\n\n### Now as you being her grandson, she wants to hear only birds melody. These Bird Calls tend to be shorter in duration and high pitch. \n\n### Can you help your Grandma \ud83d\udc75\ud83c\udffb ? \n## Hell ya!\n\n","e39187b0":"### Ahhh, a lot of pauses and dead noise in between. Let's remove it.  ","e3535aaa":"## But how we will see if that sound level is low? \n\n### - For that we will form a threshold and everything below that threshold will be considered as unwanted noise.\n\n### - A rolling window will be passed through the audio waveform and mean will be taken. \n### - If that mean is less then threshold value then remove that unwanted audio","024806fe":"## Let's Listen to her tape recorder","87330ae4":"## What is Sound Envelope?\n### The envelope of a sound displays how the level of a sound wave changes over time. If the level of sound is too low we will remove that part. ","e70de278":" ### \u2b06\ufe0f Listen to pure Bird Call voice \n## <br><br><center>\"Good Job! Grandma is proud of you.\"    \ud83e\udd70       <\/center>\n![image.png](attachment:image.png)"}}