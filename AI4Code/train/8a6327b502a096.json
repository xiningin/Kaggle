{"cell_type":{"193b1d7a":"code","05109061":"code","fe331b16":"code","b0c95603":"code","c5892dfb":"code","88c2a10b":"code","2d253678":"code","e81b012e":"code","bf50c8fd":"code","eb1c0f40":"code","f463accf":"code","dff7cbb7":"code","873d04cc":"code","5168f0b5":"code","410d74fc":"code","2b663b1d":"code","ba43306f":"code","920a36c5":"code","799ef7b2":"code","a3d94cf1":"code","e1255c12":"code","be9717ee":"code","2edd1652":"code","bdf4ef3b":"code","bdc2a5b4":"code","801d9fba":"markdown"},"source":{"193b1d7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05109061":"!pip install seaborn --upgrade","fe331b16":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","b0c95603":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf.head()","c5892dfb":"#### Removing unnecessary columns\n\ndf.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)\ndf.info()","88c2a10b":"#### Handling null values\n\ndf['Embarked'].fillna(df['Embarked'].mode()[0],inplace =True)\ndf['Age'].fillna(df['Age'].median(),inplace =True)\ndf.info()","2d253678":"#### Relation of every feature with Survived\n\nfig, a = plt.subplots(3, 2, figsize=(16, 20))\nfig.delaxes(a[2][1])\nsns.countplot(x='Pclass',data=df,hue='Survived',ax=a[0,0],palette=['darkgray','paleturquoise'])\nsns.countplot(x='Sex',data=df,hue='Survived',ax=a[0,1],palette=['darkgray','paleturquoise'])\nsns.countplot(x='SibSp',data=df,hue='Survived',ax=a[1,0],palette=['darkgray','paleturquoise'])\nsns.countplot(x='Parch',data=df,hue='Survived',ax=a[1,1],palette=['darkgray','paleturquoise'])\nsns.countplot(x='Embarked',data=df,hue='Survived',ax=a[2,0],palette=['darkgray','paleturquoise'])\nsns.displot(data=df,x='Age',hue='Survived',element=\"step\",aspect=3,palette=['darkgray','paleturquoise'])\nsns.displot(data=df,x='Fare',hue='Survived',element=\"step\",aspect=3,palette=['darkgray','paleturquoise'])","e81b012e":"X = df.iloc[:,1:]\ny = df.iloc[:,0]","bf50c8fd":"#### Catagorical Features\n\ncat_feat = X.select_dtypes(include='object').columns.tolist()\ncat_feat","eb1c0f40":"#### Numerical Feature\n\nnum_feat = list(set(X.columns.tolist()) - set(cat_feat))\nnum_feat","f463accf":"#### Encoding Catagorical Features\n\nfrom sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder(drop='if_binary',sparse=False)\ncat = ohe.fit_transform(X[cat_feat])\nohe.get_feature_names()","dff7cbb7":"df_C = pd.DataFrame(data=cat, columns=ohe.get_feature_names())\ndf_C.head()","873d04cc":"X = pd.concat([X, df_C], axis=1)\nX.drop(cat_feat, axis=1, inplace=True)\nX.head()","5168f0b5":"#### Train Test split\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","410d74fc":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","2b663b1d":"#### Converting dataframe to array \n\nX_train = X_train.values    \nX_test = X_test.values\ny_train = y_train.values\ny_test = y_test.values\n\n\n#### Converting array into tensors\n\nX_train=torch.FloatTensor(X_train)\nX_test=torch.FloatTensor(X_test)\ny_train=torch.LongTensor(y_train)\ny_test=torch.LongTensor(y_test)\n","ba43306f":"#### Creating Modelwith Pytorch\n\nclass ANN_Model(nn.Module):\n    def __init__(self,input_features=9,hidden1=30,hidden2=30,hidden3=30,out_features=2):\n        super().__init__()\n        self.f_connected1=nn.Linear(input_features,hidden1)\n        self.f_connected2=nn.Linear(hidden1,hidden2)\n        self.f_connected3=nn.Linear(hidden2,hidden3)\n        self.out=nn.Linear(hidden3,out_features)\n    def forward(self,x):\n        x=F.leaky_relu(self.f_connected1(x))\n        x=F.leaky_relu(self.f_connected2(x))\n        x=torch.sigmoid(self.f_connected3(x))\n        x=self.out(x)\n        return x","920a36c5":"#### Instantiating ANN_model\n\ntorch.manual_seed(20)\nmodel=ANN_Model()","799ef7b2":"model.parameters","a3d94cf1":"#### For Backward Propogation-- Defining the loss_function and the optimizer\n\nloss_function=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(model.parameters(),lr=0.001)","e1255c12":"#### Training the Model\n\nepochs=1000\nfinal_losses=[]\nfor i in range(epochs):\n    i=i+1\n    y_pred=model.forward(X_train)\n    loss=loss_function(y_pred,y_train)\n    final_losses.append(loss)\n    if i%10==1:\n        print(\"Epoch number: {} and the loss : {}\".format(i,loss.item()))\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","be9717ee":"#### ploting the loss function\n\nplt.figure(figsize=(20,8))\nplt.plot(range(epochs),final_losses)\nplt.ylabel('Loss')\nplt.xlabel('Epoch')","2edd1652":"#### Prediction In X_test data\n\npredictions=[]\nwith torch.no_grad():\n    for i,data in enumerate(X_test):\n        y_pred=model(data)\n        predictions.append(y_pred.argmax().item())\n        print(y_pred.argmax().item())\n        ","bdf4ef3b":"#### Confusion matrix\n\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predictions)\nplt.figure(figsize=(10,6))\nsns.heatmap(cm,annot=True)\nplt.xlabel('Actual Values')\nplt.ylabel('Predicted Values')","bdc2a5b4":"#### Accuracy Score\n\nfrom sklearn.metrics import accuracy_score\nscore=accuracy_score(y_test,predictions)\nprint('accuracy : ',score*100,'%') ","801d9fba":"# Deep Learing with Pytorch"}}