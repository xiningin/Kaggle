{"cell_type":{"86a12458":"code","59da570e":"code","cf432c8d":"code","0cedb25c":"code","ace178dc":"code","b6669b0a":"code","311f4bd6":"code","954e67eb":"code","b9342705":"code","9239afdc":"markdown"},"source":{"86a12458":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","59da570e":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.preprocessing import LabelEncoder as le","cf432c8d":"comments_df = pd.read_csv(\"\/kaggle\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")\nvalid_df = pd.read_csv(\"\/kaggle\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")\nsub_df=pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv\")\nprev_train_df = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv\")\nprev_train_df","0cedb25c":"prev_train_df[\"severe_toxic\"] = prev_train_df[\"severe_toxic\"] *3\nprev_train_df[\"threat\"] = prev_train_df[\"threat\"] *2.5\nprev_train_df[\"identity_hate\"] = prev_train_df[\"identity_hate\"]*3\n\nprev_train_df[\"total_toxic\"] = prev_train_df[[\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\",\n                                              \"identity_hate\"]].sum(axis = 1).astype(np.int64)","ace178dc":"train_df = prev_train_df[[\"comment_text\", \"total_toxic\"]]\ntrain_df","b6669b0a":"from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\ntfvec = TfidfVectorizer(analyzer = 'char_wb', ngram_range = (3,5))\ntfv = tfvec.fit_transform(train_df[\"comment_text\"])","311f4bd6":"X=tfv[1:25001]\nY=train_df.loc[1:25000,['total_toxic']]","954e67eb":"from sklearn.linear_model import LinearRegression as lr\n\nreg = lr().fit(X,Y)\ntfv_comments = tfvec.transform(comments_df[\"text\"])\npred = reg.predict(tfv_comments)\na=pred[:1000]\nreg.score(X,Y) ","b9342705":"sub = pd.DataFrame()\nsub[\"comment_id\"] = comments_df[\"comment_id\"]\nsub[\"score\"] = pred\nsub.to_csv('submission.csv',index=False)\nsub","9239afdc":"import xgboost as xg\nxgb_r = xg.XGBRegressor(objective ='reg:linear',\n                  n_estimators = 10, seed = 123)\nxgb_r=xgb_r.fit(X, Y)\ntfv_comments = tfvec.transform(comments_df[\"text\"])\n# Predict the model\npred = xgb_r.predict(tfv_comments)\na=pred[:1000]\nxgb_r.score(X,Y)\n"}}