{"cell_type":{"f0d104e1":"code","bf1127ff":"code","cf27d4f9":"code","764f4af8":"code","6761618c":"code","24982167":"code","913afea6":"code","09f5bb6d":"code","f2455384":"markdown","c1e63e0c":"markdown","69d2466f":"markdown","48a61942":"markdown","b1795598":"markdown","d7d19fda":"markdown","750bf70f":"markdown"},"source":{"f0d104e1":"pip install nba_api","bf1127ff":"import pandas as pd\nimport numpy as np\nimport time\nfrom pathlib import Path\n\nprint(\"COMPLETE: Setup complete\")","cf27d4f9":"### Configuration\n\n# Specify latest season data needed for and how many season to get in total e.g. 21 and 5 would get 2021 and the 4 previous seasons data (5 in total)\nlatest_season = 21\nnumber_of_seasons = 1\n\n# Select which new data items to obtain\nget_new_games = True\nget_new_pbp = True\nget_new_rosters = True\nget_new_shotcharts = True\nget_new_player_gamelogs = True\n\nprint(\"COMPLETE: Notebook configured\")","764f4af8":"#### Get the game data\n### The game data includes stats about completed games\n### This needs to be run for the current season at the conclusion of every set of games\n\nfrom nba_api.stats.endpoints import leaguegamefinder\nfrom nba_api.stats.library.parameters import Season\nfrom nba_api.stats.library.parameters import SeasonType\n\nif get_new_games:\n    # Initialise empty array to hold the new games\n    games = []\n    # Iterate through the seasons and save each season to a csv\n    for n in range(0, number_of_seasons):\n        season_name = f\"20{latest_season-(n+1)}-{latest_season-n}\"\n        gamefinder = leaguegamefinder.LeagueGameFinder(season_nullable=season_name, league_id_nullable='00')\n        game_df = gamefinder.get_data_frames()\n        games.append(game_df[0])\n        game_df[0].to_csv(f\"Data\/Games\/games_20{latest_season-n}.csv\")\n        print(f\"{len(game_df[0])} games loaded for season 20{latest_season-n}\")\n    print(\"COMPLETE: Games Loaded\")\nelse:\n    print(\"Games not requested (as per configuration)\")","6761618c":"#### Get the play by play data\n###  Pulls a play by play account of individual games\n### This needs to be run when new games are pulled through in above\n\nfrom nba_api.stats.endpoints import playbyplay\n\nall_pbp = pd.DataFrame()\n\nif get_new_pbp:\n    # Iterate through the seasons and save each season to a csv\n    for n in range(0, number_of_seasons):\n        # Load the csv containing the games\n        games_file = Path(f\"Data\/Games\/games_20{latest_season-n}.csv\")\n        if games_file.is_file():\n            games_df = pd.read_csv(games_file, index_col=None, header=0, low_memory=False)\n            # get the list of unique game ids for season\n            unique_game_ids = games_df['GAME_ID'].unique()\n            # initiate an empty array and dataframe\n            play_by_play = []\n            existing_pbp = pd.DataFrame()\n            # Check if a file already exists for the season(s) being searched for\n            season_file = Path(f\"Data\/PBP\/play_by_play_20{latest_season-n}.csv\")\n            if season_file.is_file():\n                existing_pbp = pd.read_csv(season_file, index_col=None, header=0, low_memory=False)\n                # Do a set difference to get a list of game ids that do not already exist\n                unique_game_ids = np.setdiff1d(unique_game_ids, existing_pbp['GAME_ID'].unique())\n            # Check if there are any new games\n            if len(unique_game_ids) > 0:\n                # Iterate through each unique game id to get the play by play data\n                for g_id in unique_game_ids:\n                    # throttles requests to prevent api from blocking them\n                    time.sleep(.600)\n                    # make the request (the request expects a string which is padded with 2 00's)\n                    game_id_padded = f\"00{g_id}\"\n                    game_df = playbyplay.PlayByPlay(game_id_padded, timeout=1000).get_data_frames()[0]\n                    play_by_play.append(game_df)\n                # Concatenate all the returned entries\n                all_pbp = pd.concat(play_by_play, axis=0, ignore_index=True)\n                # If there is an existing file, concatenate with those entries\n                if season_file.is_file():\n                    all_pbp = pd.concat([all_pbp, existing_pbp], axis=0, ignore_index=True)\n                all_pbp = all_pbp.drop(\"Unnamed: 0\", axis=1)\n                all_pbp.to_csv(f\"Data\/PBP\/play_by_play_20{latest_season-n}.csv\")\n                print(f\"{len(unique_game_ids)} games loaded for 20{latest_season-n}\")\n                print(f\"{len(all_pbp)} plays in total for 20{latest_season-n}\")\n            else:\n                print(f\"All play by plays loaded for games in 20{latest_season-n}\")\n        else:\n            print(f\"ERROR: No games found for season 20{latest_season-n}\")\n    print(\"COMPLETE: Play by play loaded\")\nelse:\n    print(\"Play by Play not requested (as per configuration)\")","24982167":"#### Get the rosters\n### Retrieves the player rosters for teams\n### Does not need to be run often\n\nfrom nba_api.stats.static import teams\nfrom nba_api.stats.endpoints import commonteamroster\n\nif get_new_rosters:\n    # Get the team ids\n    nba_teams = teams.get_teams()\n    nba_team_ids = [team['id'] for team in nba_teams]\n    # Iterate through the required seasons and teams to get the rosters, save each season to a csv\n    for n in range(0, number_of_seasons):\n        season_name = f\"20{latest_season-(n+1)}-{latest_season-n}\"\n        rosters = []\n        for team in nba_team_ids:\n            # throttles requests to prevent api from blocking them\n            time.sleep(.600)\n            roster = commonteamroster.CommonTeamRoster(team_id=team, season=season_name, timeout=1000).get_data_frames()[0]\n            rosters.append(roster)\n        # concatenate all the returned entries and save to csv\n        season_rosters = pd.concat(rosters, axis=0, ignore_index=True)\n        season_rosters.to_csv(f\"Data\/Rosters\/rosters_20{latest_season-n}.csv\")\n        print(f\"All rosters loaded for 20{latest_season-n}\")\n    print(\"COMPLETE: Rosters loaded\")\nelse:\n    print(\"Rosters not requested (as per configuration)\")","913afea6":"#### Get the shot charts\n### Retrieves shot chart based on team and player (mandatory inputs)\nfrom nba_api.stats.endpoints import shotchartdetail\n\nif get_new_shotcharts:\n    for n in range(0, number_of_seasons):\n        # Load the csv containing the rosters\n        rosters_file = Path(f\"Data\/Rosters\/rosters_20{latest_season-n}.csv\")\n        if rosters_file.is_file():\n            rosters_df = pd.read_csv(rosters_file, index_col=None, header=0, low_memory=False)\n            shotcharts = []\n            # Iterate through the players and teams to get shot charts \n            # *may end up with duplicate shot charts where a player is at the same team more than one season\n            for row in rosters_df.itertuples():\n                player_id = row.PLAYER_ID\n                team_id = row.TeamID\n                # throttles requests to prevent api from blocking them\n                time.sleep(.600)\n                # requests shotchartdetail for player and team team with context field goals attempted (FGA)\n                sc_df = shotchartdetail.ShotChartDetail(player_id=player_id, team_id=team_id, context_measure_simple='FGA').get_data_frames()[0]\n                shotcharts.append(sc_df)\n            # concatenate the results together and save to csv\n            season_shotchart = pd.concat(shotcharts, axis=0, ignore_index=True)\n            season_shotchart.to_csv(f\"Data\/ShotCharts\/shotchart_20{latest_season-n}.csv\")\n            print(f\"Shotcharts obtained for 20{latest_season-n}\")\n        else:\n            print(f\"ERROR: No roster file found for 20{latest_season-n}\")\n    print(\"COMPLETE: Shotcharts obtained\")\nelse:\n    print(\"Shotcharts not requested (as per configuration)\")          ","09f5bb6d":"#### Get player game logs\n### Retrieves details of each players statistics in each game\nfrom nba_api.stats.endpoints import playergamelogs\n\nif get_new_player_gamelogs:\n    # Iterate through the seasons and save each season to a csv\n    for n in range(0, number_of_seasons):\n        # construct the season name for the request\n        season_name = f\"20{latest_season-(n+1)}-{latest_season-n}\"\n        # request the gamelogs for the season\n        playergamefinder = playergamelogs.PlayerGameLogs(season_nullable=season_name, league_id_nullable='00')\n        player_game_df = playergamefinder.get_data_frames()\n        # save the returned results to csv\n        player_game_df[0].to_csv(f\"Data\/PlayerGameLogs\/player_gamelogs_20{latest_season-n}.csv\")\n        print(f\"Player gamelogs obtained for 20{latest_season-n}\")\n    print(\"COMPLETE: Player gamelogs obtained\")\nelse:\n    print(\"Player gamelogs not requested (as per configuration\")","f2455384":"<h2>Rosters<\/h2>","c1e63e0c":"<h2>Player Gamelogs<\/h2>","69d2466f":"<h2>Configuration<\/h2>","48a61942":"<h1>NBA Data Generator<\/h1>\n<p>\nThis notebook generates data relating to the NBA using the nba_api library (https:\/\/github.com\/swar\/nba_api)\n\nThis notebook was used to generate the NBA Data 2017-2021 dataset (https:\/\/www.kaggle.com\/lukegeorge\/nba-data-20172021)\n<\/p>","b1795598":"<h2>Games<\/h2>","d7d19fda":"<h2>Shot Charts<\/h2>","750bf70f":"<h2>Play-by-Play<\/h2>"}}