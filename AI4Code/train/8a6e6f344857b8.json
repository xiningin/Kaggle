{"cell_type":{"4cbd6822":"code","4b1d47aa":"code","29d42162":"code","6c4ed7a1":"code","9ac70b2a":"code","adc0d54c":"code","db2cd058":"code","8091cab7":"code","b0a18160":"code","728a0a7c":"code","766b11a4":"code","70143dd3":"code","53d4b86e":"code","70ae1406":"code","5929a7e0":"code","1aa83bfe":"code","051c07db":"code","ac55a783":"code","05bb5df3":"code","a97544a8":"code","e6bd268e":"code","248cc158":"code","b48b744a":"code","2cddf39d":"code","41424beb":"code","8df5a09b":"code","5091afba":"code","1621d8c2":"code","eaa0dfd6":"code","56974f0b":"markdown"},"source":{"4cbd6822":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4b1d47aa":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","29d42162":"attrition = pd.read_csv('..\/input\/WA_Fn-UseC_-HR-Employee-Attrition.csv')\nattrition.head()","6c4ed7a1":"from collections import Counter\na= Counter(attrition['Age'])\na","9ac70b2a":"age_count = attrition['Age'].value_counts()\nsns.set(style = 'darkgrid')\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.barplot(age_count.index, age_count.values, alpha=0.9)\nplt.title('Frequency Distribution of Age', fontsize = 15)\nplt.ylabel('Number of occurrence', fontsize = 15)\nplt.xlabel('Age Categories', fontsize = 15)\nplt.show()","adc0d54c":"attrition['Attrition'].value_counts()","db2cd058":"sns.countplot(attrition['Attrition'])#, attrition['Age'])\nplt.show()","8091cab7":"attrition['BusinessTravel'].value_counts()","b0a18160":"sns.countplot(attrition['BusinessTravel'])","728a0a7c":"from matplotlib import rcParams\n\n# figure size in inches\nrcParams['figure.figsize'] = 11.5,8.00\nplt.hist(attrition['DailyRate'])","766b11a4":"attrition['Department'].unique()\nsns.countplot(attrition['Department'])","70143dd3":"attrition['Education'].value_counts()","53d4b86e":"sns.countplot(attrition['Education'])","70ae1406":"sns.boxplot(attrition['Age'],attrition['Attrition'])","5929a7e0":"# Import the train_test_split method\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn import preprocessing\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nxdata=attrition.copy()\nxdata.drop(['Attrition'], axis=1)\ny=attrition[\"Attrition\"]\ny.unique()","1aa83bfe":"attrition.head()","051c07db":"xdata.drop(['Over18'], axis=1)\nxdata.columns","ac55a783":"xdata=pd.get_dummies(xdata)","05bb5df3":"yy=pd.Series(np.where(y == 'Yes', 1, 0))\nyy=yy.astype('category')\nyy.unique()","a97544a8":"# Split data into train and test sets as well as for validation and testing\ntrain, test, target_train, target_val = train_test_split(xdata, \n                                                         yy, \n                                                         train_size= 0.80,\n                                                         random_state=0);","e6bd268e":"print(train.shape, target_train.shape)\nprint(test.shape, target_val.shape)","248cc158":"lm=linear_model.LogisticRegression()","b48b744a":"model = lm.fit(train, target_train)","2cddf39d":"model.predict(test)","41424beb":"predictions = lm.predict(test)\npredictions[0:5]","8df5a09b":"print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(lm.score(test, predictions)))","5091afba":"model.score(test, target_val)","1621d8c2":"cm = confusion_matrix(target_val, predictions)\n\nfig, ax = plt.subplots(figsize=(8, 8))\nax.imshow(cm)\nax.grid(False)\nax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\nax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\nax.set_ylim(1.5, -0.5)\nfor i in range(2):\n    for j in range(2):\n        ax.text(j, i, cm[i, j], ha='center', va='center', color='red')\nplt.show()","eaa0dfd6":"print(classification_report(target_val, predictions))","56974f0b":"#Model building"}}