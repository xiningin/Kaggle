{"cell_type":{"c2b54d7b":"code","8fa94d4a":"code","f49a07e5":"code","cee93c31":"code","74660655":"code","5a941699":"code","58f7a084":"code","7d695c64":"code","0c49533b":"code","4090c9f4":"code","718a709a":"code","745a4ba1":"code","faf8b58b":"code","281b2e64":"code","3575ed64":"code","a557a071":"code","d08ca189":"code","4de93a2c":"code","38bc734c":"code","a2e3542f":"code","7162fd18":"code","df67a908":"markdown","af4f1435":"markdown","6ed85400":"markdown","b50bd370":"markdown","a0c99fa2":"markdown","01031273":"markdown","f6274eb4":"markdown","f852a4ba":"markdown","6f95cee7":"markdown","959e8498":"markdown"},"source":{"c2b54d7b":"# 1\n\nimport warnings\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier","8fa94d4a":"PATH_TO_DATA = Path('..\/input\/flight-delays-fall-2018\/')","f49a07e5":"train_df = pd.read_csv(PATH_TO_DATA \/ 'flight_delays_train.csv')","cee93c31":"train_df.head()","74660655":"test_df = pd.read_csv(PATH_TO_DATA \/ 'flight_delays_test.csv')","5a941699":"test_df.head()","58f7a084":"train_df['flight'] = train_df['Origin'] + '-->' + train_df['Dest']\ntest_df['flight'] = test_df['Origin'] + '-->' + test_df['Dest']","7d695c64":"categ_feat_idx = np.where(train_df.drop('dep_delayed_15min', axis=1).dtypes == 'object')[0]\ncateg_feat_idx\n","0c49533b":"# import OneHotEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n# instantiate OneHotEncoder\nohe = OneHotEncoder(categorical_features = categorical_feature_mask, sparse=False ) \n# categorical_features = boolean mask for categorical columns\n# sparse = False output an array not sparse matrix\n# apply OneHotEncoder on categorical feature columns\nX_ohe = ohe.fit_transform(train_df) # It returns an numpy array","4090c9f4":"X_train = train_df.drop('dep_delayed_15min', axis=1).values\n#y_train = train_df['dep_delayed_15min'].map({'Y': 1, 'N': 0}).values\ny_train = train_df['dep_delayed_15min'].values\nX_test = test_df.values","718a709a":"categorical_feature_mask = X_train.dtypes==object","745a4ba1":"# Categorical boolean mask\ncategorical_feature_mask = train_df.dtypes==object\n# filter categorical columns using mask and turn it into a list\ncategorical_cols = train_df.columns[categorical_feature_mask].tolist()\n# import labelencoder\nfrom sklearn.preprocessing import LabelEncoder\n# instantiate labelencoder object\nle = LabelEncoder()\n# apply le on categorical feature columns\ntrain_df[categorical_cols] = train_df[categorical_cols].apply(lambda col: le.fit_transform(col))\ntrain_df[categorical_cols].head(10)","faf8b58b":"X_train_part, X_valid, y_train_part, y_valid = train_test_split(X_train, y_train, \n                                                                test_size=0.3, \n                                                                random_state=17)","281b2e64":"ctb = CatBoostClassifier(random_seed=17, silent=False)","3575ed64":"%%time\nctb.fit(X_train_part, y_train_part,\n        cat_features=categ_feat_idx);","a557a071":"ctb_valid_pred = ctb.predict_proba(X_valid)[:, 1]","d08ca189":"roc_auc_score(y_valid, ctb_valid_pred)","4de93a2c":"%%time\nctb.fit(X_train, y_train,\n        cat_features=categ_feat_idx);","38bc734c":"ctb_test_pred = ctb.predict_proba(X_test)[:, 1]","a2e3542f":"with warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    \n    sample_sub = pd.read_csv(PATH_TO_DATA \/ 'sample_submission.csv', \n                             index_col='id')\n    sample_sub['dep_delayed_15min'] = ctb_test_pred\n    sample_sub.to_csv('ctb_pred.csv')","7162fd18":"!head ctb_pred.csv","df67a908":"**In this assignment, you're asked to beat a baseline in the [\"Flight delays\" competition](https:\/\/www.kaggle.com\/c\/flight-delays-fall-2018).**\n\nThis time we decided to share a pretty decent CatBoost baseline, you'll have to improve the provided solution.\n\nPrior to working on the assignment, you'd better check out the corresponding course material:\n 1. [Classification, Decision Trees and k Nearest Neighbors](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse_open\/blob\/master\/jupyter_english\/topic03_decision_trees_kNN\/topic3_decision_trees_kNN.ipynb?flush_cache=true), the same as an interactive web-based [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/topic-3-decision-trees-and-knn) \n 2. Ensembles:\n  - [Bagging](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse_open\/blob\/master\/jupyter_english\/topic05_ensembles_random_forests\/topic5_part1_bagging.ipynb?flush_cache=true), the same as a [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/topic-5-ensembles-part-1-bagging)\n  - [Random Forest](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse_open\/blob\/master\/jupyter_english\/topic05_ensembles_random_forests\/topic5_part2_random_forest.ipynb?flush_cache=true), the same as a [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/topic-5-ensembles-part-2-random-forest)\n  - [Feature Importance](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse_open\/blob\/master\/jupyter_english\/topic05_ensembles_random_forests\/topic5_part3_feature_importance.ipynb?flush_cache=true), the same as a [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/topic-5-ensembles-part-3-feature-importance)\n 3. - [Gradient boosting](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse_open\/blob\/master\/jupyter_english\/topic10_boosting\/topic10_gradient_boosting.ipynb?flush_cache=true), the same as a [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/topic-10-gradient-boosting) \n   - Logistic regression, Random Forest, and LightGBM in the \"Kaggle Forest Cover Type Prediction\" competition: [Kernel](https:\/\/www.kaggle.com\/kashnitsky\/topic-10-practice-with-logit-rf-and-lightgbm) \n 4. You can also practice with demo assignments, which are simpler and already shared with solutions:\n  - \"Decision trees with a toy task and the UCI Adult dataset\": [assignment](https:\/\/www.kaggle.com\/kashnitsky\/a3-demo-decision-trees) + [solution](https:\/\/www.kaggle.com\/kashnitsky\/a3-demo-decision-trees-solution)\n  - \"Logistic Regression and Random Forest in the credit scoring problem\": [assignment](https:\/\/www.kaggle.com\/kashnitsky\/assignment-5-logit-and-rf-for-credit-scoring) + [solution](https:\/\/www.kaggle.com\/kashnitsky\/a5-demo-logit-and-rf-for-credit-scoring-sol)\n 5. There are also 7 video lectures on trees, forests, boosting and their applications: [mlcourse.ai\/video](https:\/\/mlcourse.ai\/video) \n 6. mlcourse.ai tutorials on [categorical feature encoding](https:\/\/www.kaggle.com\/waydeherman\/tutorial-categorical-encoding) (by Wayde Herman) and [CatBoost](https:\/\/www.kaggle.com\/mitribunskiy\/tutorial-catboost-overview) (by Mikhail Tribunskiy)\n 7. Last but not the least: [Public Kernels](https:\/\/www.kaggle.com\/c\/flight-delays-fall-2018\/notebooks) in this competition\n\n### Your task is to:\n 1. beat **\"A2 baseline (10 credits)\"** on Public LB (**0.75914** LB score)\n 2. rename your [team](https:\/\/www.kaggle.com\/c\/flight-delays-fall-2018\/team) in full accordance with A1 and the [course rating](https:\/\/docs.google.com\/spreadsheets\/d\/15e1K0tg5ponA5R6YQkZfihrShTDLAKf5qeKaoVCiuhQ\/) (to appear on 16.09.2019)\n \nThis task is intended to be relatively easy. Here you are not required to upload your reproducible solution.\n \n### <center> Deadline for A2: 2019 October 6, 20:59 CET (London time)","af4f1435":"**We got some 0.756 ROC AUC on the hold-out set.**","6ed85400":"**Create only one feature - \u201cflight\u201d (this you need to improve - add more features)**","b50bd370":"**Train on the whole train set, make prediction on the test set. We got ~0.734 in the competition - \"Catboost starter\" baseline**","a0c99fa2":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\" \/>\n<\/center> \n     \n## <center>  [mlcourse.ai](https:\/\/mlcourse.ai) \u2013 Open Machine Learning Course \n\n#### <center> Author: [Yury Kashnitsky](https:\/\/yorko.github.io) (@yorko) \n\n# <center>Assignment #2. Fall 2019\n## <center> Part 2. Gradient boosting","01031273":"**Remember indexes of categorical features (to be passed to CatBoost)**","f6274eb4":"**Allocate a hold-out set (a.k.a. a validation set) to validate the model**","f852a4ba":"**Read the data**","6f95cee7":"**Train Catboost with default arguments, passing only the indexes of categorical features.**","959e8498":"Now's your turn! Go and improve the model to beat **\"A2 baseline (10 credits)\"** - **0.75914** LB score. It's crucial to come up with some good features. \n\nFor discussions, stick to the **#a2_kaggle_fall2019** thread in the **mlcourse_ai_news** [ODS Slack](http:\/\/opendatascience.slack.com) channel. Serhii Romanenko (@serhii_romanenko) will be there to help. \n\nWelcome to Kaggle!\n\n<img src='https:\/\/habrastorage.org\/webt\/fs\/42\/ms\/fs42ms0r7qsoj-da4x7yfntwrbq.jpeg' width=50%>\n*from the [\"Nerd Laughing Loud\"](https:\/\/www.kaggle.com\/general\/76963) thread.*"}}