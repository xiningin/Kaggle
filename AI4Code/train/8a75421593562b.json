{"cell_type":{"78565368":"code","51285a10":"code","aaa72f97":"code","7b168126":"code","8fbc1cad":"code","fd8559ac":"code","0f7361c5":"code","d6e63eaf":"code","9029c4d8":"code","bdd4d7f8":"code","705f5cdc":"code","85d186d3":"code","40488765":"code","0ddbe27d":"markdown","6cdfae6e":"markdown","12243b21":"markdown","3ef71121":"markdown","bc5e5625":"markdown"},"source":{"78565368":"import tensorflow as tf\nimport PIL.Image as Image\nimport tensorflow_datasets as tfds","51285a10":"Image.open('..\/input\/pictureofresnet\/Screenshot 2021-10-21 134255.png')","aaa72f97":"class IdentityBlock(tf.keras.Model):\n  def __init__(self,filters,kernel):\n    super(IdentityBlock,self).__init__(name = '')\n    self.conv1 = tf.keras.layers.Conv2D(filters,kernel,padding='same')\n    self.bn1   = tf.keras.layers.BatchNormalization()\n    self.conv2 = tf.keras.layers.Conv2D(filters,kernel,padding = 'same')\n    self.bn2   = tf.keras.layers.BatchNormalization()\n\n    self.act  = tf.keras.layers.Activation('relu')\n    self.add   = tf.keras.layers.Add()\n    \n  def call(self,input_tensor):\n    x = self.conv1(input_tensor)\n    x = self.bn1(x)\n    x = self.act(x)\n\n    x = self.conv2(x)\n    x = self.bn2(x)\n\n    x = self.add([x,input_tensor])\n    x = self.act(x)\n    return x","7b168126":"class ResNet(tf.keras.Model):\n  def __init__(self,num_classes):\n    super(ResNet,self).__init__()\n    self.conv = tf.keras.layers.Conv2D(64,7,padding = 'same')\n    self.bn  = tf.keras.layers.BatchNormalization()\n    self.act  = tf.keras.layers.Activation('relu')\n    self.max_pool   = tf.keras.layers.MaxPool2D((3,3))\n\n    self.id1a  = IdentityBlock(64,3)\n    self.id2b  = IdentityBlock(64,3)\n\n    self.global_pool   = tf.keras.layers.GlobalAveragePooling2D()\n    self.classifier = tf.keras.layers.Dense(num_classes,activation='softmax')\n\n  def call(self,inputs):\n    x = self.conv(inputs)\n    x = self.bn(x)\n    x = self.act(x)\n    x = self.max_pool(x)\n\n    x = self.id1a(x)\n    x = self.id2b(x)\n\n    x = self.global_pool(x)\n    return self.classifier(x)\n","8fbc1cad":"def preporcess(features):\n  return tf.cast(features['image'],tf.float32)\/255.,features['label']","fd8559ac":"resnet = ResNet(10)","0f7361c5":"resnet.compile(optimizer = 'adam',loss = 'sparse_categorical_crossentropy',metrics = ['accuracy'])","d6e63eaf":"dataset = tfds.load('mnist',split=tfds.Split.TRAIN,data_dir='.\/data')\ndataset = dataset.map(preporcess).batch(32)","9029c4d8":"hist = resnet.fit(dataset,epochs = 10)","bdd4d7f8":"import matplotlib.pyplot as plt","705f5cdc":"plt.plot(hist.history['loss'])","85d186d3":"plt.plot(hist.history['accuracy'])","40488765":"resnet.summary()","0ddbe27d":"# Thanks for reading this notebook. Enjoy Machine Learing \ud83d\ude00","6cdfae6e":"# Architecture of Resnet","12243b21":"## Making a resnet with skipping layers under orange block.","3ef71121":"### Lets the network on mnist dataset","bc5e5625":"# Making a custom class for Identity Resnet Block\nas per diagram(blue)"}}