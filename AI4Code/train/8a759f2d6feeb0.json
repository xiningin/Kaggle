{"cell_type":{"902818ca":"code","998708df":"code","d215562a":"code","07f4bcaa":"code","fddab926":"code","1844306b":"code","61aec107":"code","28822a4c":"code","650a7133":"code","c92b7384":"code","7640072c":"code","6ed351d8":"code","0b37eca3":"code","2954ec58":"code","8696e38f":"code","080ba290":"code","aa67044b":"code","dd967a93":"code","b9387382":"code","e746b53d":"code","c01909a4":"code","66b7b2dd":"code","b4f5e73b":"code","79d0e719":"code","bdef61e9":"code","b4ddd96b":"code","9dee99e6":"code","7da61ac1":"code","01ed3a47":"code","a00186fa":"code","da61b472":"code","182dd2b0":"code","bc6bf0eb":"code","48bfb3fc":"code","67cfcfab":"code","133a118e":"code","04f790d1":"code","a1d017ad":"code","bb1d5126":"code","0400e16d":"code","1e383943":"code","05132215":"code","012e2bfa":"code","7357d1f8":"code","7716200d":"code","1adc3fb6":"code","b4c2b572":"code","fa33a05d":"code","d6bcd2bb":"code","e722faa8":"code","dbc8ba27":"code","795b346e":"code","cf7dee64":"markdown","70223c27":"markdown","1f38434b":"markdown","c0dd3997":"markdown","34284cad":"markdown","154a24cc":"markdown","be0a86e1":"markdown","5691fcab":"markdown","3bc9065b":"markdown","8cd8042f":"markdown","dd1d3042":"markdown","89637380":"markdown","b774635a":"markdown","a4c8a2c8":"markdown","6ca8a3ef":"markdown","c9ce4e65":"markdown","eb32c76a":"markdown","b29db5b4":"markdown","237ba0a1":"markdown","e20a8583":"markdown"},"source":{"902818ca":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualizations\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"dark\")\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# pandas\nimport pandas as pd\nfrom pandas import Series,DataFrame\n","998708df":"# Storing the data in a pandas data frame.\nfile_name_train = 'https:\/\/raw.githubusercontent.com\/CharlBrill89\/TitanicDatasets\/master\/train.csv'\nfile_name_test = 'https:\/\/raw.githubusercontent.com\/CharlBrill89\/TitanicDatasets\/master\/test.csv'\n\ntrain_df = pd.read_csv(file_name_train)\ntest_df = pd.read_csv(file_name_test)\ncombine = [train_df, test_df]","d215562a":"print(\"Train shape:\",train_df.shape)\nprint(\"Test shape :\",test_df.shape)","07f4bcaa":"train_df.info()\nprint(\"-\"*40)\ntest_df.info()","fddab926":"train_df.head()\n#test_df.head()","1844306b":"train_df.describe()","61aec107":"#Explore Categorical variables\ntrain_df.describe(include=['O'])","28822a4c":"#What percentage of passengers were male vs female?\ntitanic_copy = train_df\n\nmen_df = titanic_copy[titanic_copy['Sex']=='male']\nnum_men = men_df['Sex'].count()\nwomen_df = titanic_copy[titanic_copy['Sex']=='female']\nnum_women = women_df['Sex'].count()\ntotal_passengers = num_men + num_women \n\nprint('Total men: ', num_men,\"(\", round(num_men\/total_passengers,2)*100, \"%)\")\nprint('Total women: ', num_women,\"(\", round(num_women\/total_passengers,2)*100, \"%)\")","650a7133":"#View survived mean percentage by passenger class\ntrain_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","c92b7384":"#View survived mean percentage by Gender\ntrain_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","7640072c":"#View survived mean percentage by sibling\/spouse\ntrain_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","6ed351d8":"#View survived mean percentage by Parent\/ children\ntrain_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","0b37eca3":"#Distributions\nsns.set_style(\"white\")\nsns.distplot(titanic_copy['Age'], bins=25, kde=True)\n_ = plt.ylabel('Percentage of passengers')\n_ = plt.title(\"Age distribution\")","2954ec58":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","8696e38f":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.5, aspect=1.5)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","080ba290":"grid = sns.FacetGrid(train_df, row='Embarked', height=2.5, aspect=1.5)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","aa67044b":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', height=2.5, aspect=1.5)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","dd967a93":"# Draw a nested barplot to show survival for class and sex\ng = sns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=titanic_copy,\n                height=6, kind=\"bar\", palette=\"muted\")\ng.set_ylabels(\"Survival probability\")","b9387382":"#Drop features that dont add value\nprint(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n\ntrain_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train_df, test_df]\n\n\"After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape","e746b53d":"#Explore which fields contain Nulls\ntitanic_copy.isnull().sum()","c01909a4":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train_df['Title'], train_df['Sex'])","66b7b2dd":"#Correct for some of the titles that seem misspelled\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b4f5e73b":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_df.head()","79d0e719":"train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.shape, test_df.shape","bdef61e9":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","b4ddd96b":"grid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","9dee99e6":"guess_ages = np.zeros((2,3))\nguess_ages","7da61ac1":"for dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & (dataset['Pclass'] == j+1)]['Age'].dropna()\n            #print(guess_df[i,j])\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            #print(i,j,guess_ages[i,j])\n\n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1), 'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","01ed3a47":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","a00186fa":"#Classify Ages into buckets\nfor dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()","da61b472":"train_df = train_df.drop(['AgeBand'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head()","182dd2b0":"#Create a new variable called FamilySize\n#We can create a new feature for FamilySize which combines Parch and SibSp. This will enable us to drop Parch and SibSp from our datasets.\n\nfor dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","bc6bf0eb":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","48bfb3fc":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head()","67cfcfab":"for dataset in combine:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)\n#train_df.head(10)","133a118e":"#Convert Embarked to a numeric variable \nfreq_port = train_df.Embarked.dropna().mode()[0]\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head(20)","04f790d1":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","a1d017ad":"#Create a Fare Band variable to be included in the model\n\ntrain_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","bb1d5126":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(10)","0400e16d":"test_df.head(10)","1e383943":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","05132215":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log\n","012e2bfa":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","7357d1f8":"svc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","7716200d":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","1adc3fb6":"gaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","b4c2b572":"perceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","fa33a05d":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","d6bcd2bb":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","e722faa8":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred_RandForest = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","dbc8ba27":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","795b346e":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred_RandForest\n    })\n\nsubmission.to_csv(r'submission_CB.csv', index=False, header=True)","cf7dee64":"# Linear SVC","70223c27":"## Initial investigation","1f38434b":"## Completing a numerical continuous feature (fill Age for missing values)","c0dd3997":"# K-Nearest Neighbours","34284cad":"# Gaussian Naive Bayes","154a24cc":"# Logistic Regression","be0a86e1":"# Decision Tree\n","5691fcab":"# Support Vector Machines model","3bc9065b":"# Model Evaluation","8cd8042f":"# Explore dataset (EDA)","dd1d3042":"# Perceptron","89637380":"## **Group variables**","b774635a":"# Analyse by visualising data","a4c8a2c8":"#Output submission file","6ca8a3ef":"# **Wrangle data**","c9ce4e65":"# Titanic Disaster classification model\nThis model is used to produce an output file for a Kaggle competition:\n---\nTitanic: Machine Learning from disaster: https:\/\/www.kaggle.com\/c\/titanic\/overview \nThe competition is simple: use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.","eb32c76a":"# Build the models","b29db5b4":"# Random Forest","237ba0a1":"Classification of Variables:     \n* Identifier: PassengerId\n* Categorical: Name, Ticket, Survived, Sex, Embarked, Cabin          \n* Ordinal: Pclass        \n* Continous: Age, Fare\n* Discrete: SibSp, Parch\n\n","e20a8583":"![alt text](https:\/\/cdn.britannica.com\/79\/4679-050-BC127236\/Titanic.jpg)\n"}}