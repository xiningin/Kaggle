{"cell_type":{"ab216b27":"code","3a775330":"code","500d77dc":"code","b4c574fb":"code","6a7ff2ba":"code","f58629ef":"code","c475e29e":"code","743e0a4f":"code","636e4d80":"code","f1aa10d2":"code","f343cab6":"code","bfb2fcb1":"code","1702d51c":"code","7a8acfee":"code","94994c78":"code","32f30537":"code","656b43ea":"code","a3904c0e":"code","9fb0fa12":"code","ebf54165":"code","b153da5b":"code","3002ded0":"code","8318c71e":"code","4a79464a":"code","7ca0c96a":"code","5d699875":"code","b255d67e":"code","e1c21d54":"markdown","61b07c01":"markdown","a48a3851":"markdown","cff181d3":"markdown","4b74f548":"markdown","49ba10b4":"markdown"},"source":{"ab216b27":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcR6RPARAkN9rDfhrMjLsYO3V6p2TMI6dTnNayaKCraEM8ux7Uwl&usqp=CAU',width=400,height=400)","3a775330":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","500d77dc":"df=pd.read_csv(\"..\/input\/covid19-geography\/mmsa-icu-beds.csv\")\ndf.head()","b4c574fb":"fig = px.bar(df,\n             y='MMSA',\n             x='icu_beds',\n             orientation='h',\n             color='high_risk_per_ICU_bed',\n             title='Covid-19 MMSA',\n             opacity=0.8,\n             color_discrete_sequence=px.colors.diverging.Armyrose,\n             template='plotly_dark'\n            )\nfig.update_xaxes(range=[0,35])\nfig.show()","6a7ff2ba":"corr=df[df.columns.sort_values()].corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nfig = go.Figure(data=go.Heatmap(z=corr.mask(mask),\n                                x=corr.columns.values,\n                                y=corr.columns.values,\n                                xgap=1, ygap=1,\n                                colorscale=\"Rainbow\",\n                                colorbar_thickness=20,\n                                colorbar_ticklen=3,\n                                zmid=0),\n                layout = go.Layout(title_text='Correlation Matrix', template='plotly_dark',              \n                \n                height=500,                            \n                xaxis_showgrid=False,\n                yaxis_showgrid=False,\n                yaxis_autorange='reversed'))\nfig.show()","f58629ef":"fig = px.bar_polar(df, r=\"MMSA\", theta=\"icu_beds\", color=\"high_risk_per_ICU_bed\", template=\"plotly_dark\",\n            color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.show()","c475e29e":"fig = px.bar(df, x= \"MMSA\", y= \"icu_beds\", color_discrete_sequence=['crimson'],)\nfig.show()","743e0a4f":"fig = px.line(df, x=\"MMSA\", y=\"icu_beds\", color_discrete_sequence=['green'], \n              title=\"Covid-19 MMSA\")\nfig.show()","636e4d80":"fig = px.scatter(df, x=\"MMSA\", y=\"icu_beds\", color=\"high_risk_per_ICU_bed\",\n                 color_continuous_scale=[\"red\", \"green\", \"blue\"])\n\nfig.show()","f1aa10d2":"fig = px.parallel_coordinates(df, color=\"icu_beds\",\n                             color_continuous_scale=[(0.00, \"red\"),   (0.33, \"red\"),\n                                                     (0.33, \"green\"), (0.66, \"green\"),\n                                                     (0.66, \"blue\"),  (1.00, \"blue\")])\nfig.show()","f343cab6":"fig = px.pie(df, values=df['icu_beds'], names=df['MMSA'],\n             title='Covid-19 MMSA',\n            )\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","bfb2fcb1":"import itertools\ncolumns=df.columns[:8]\nplt.subplots(figsize=(18,15))\nlength=len(columns)\nfor i,j in itertools.zip_longest(columns,range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2,hspace=0.5)\n    df[i].hist(bins=20,edgecolor='black')\n    plt.title(i)\nplt.show()","1702d51c":"import shap\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nimport random","7a8acfee":"df.isnull().sum()","94994c78":"df['MMSA'] = df['MMSA'].replace(['negative','positive'], [0,1])","32f30537":"SEED = 99\nrandom.seed(SEED)\nnp.random.seed(SEED)","656b43ea":"dfmodel = df.copy()\n\n# read the \"object\" columns and use labelEncoder to transform to numeric\nfor col in dfmodel.columns[dfmodel.dtypes == 'object']:\n    le = LabelEncoder()\n    dfmodel[col] = dfmodel[col].astype(str)\n    le.fit(dfmodel[col])\n    dfmodel[col] = le.transform(dfmodel[col])","a3904c0e":"#change columns names to alphanumeric\ndfmodel.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in dfmodel.columns]","9fb0fa12":"X = dfmodel.drop(['MMSA','icu_beds'], axis = 1)\ny = dfmodel['MMSA']","ebf54165":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.005,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':2500,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","b153da5b":"# choose the number of folds, and create a variable to store the auc values and the iteration values.\nK = 5\nfolds = KFold(K, shuffle = True, random_state = SEED)\nbest_scorecv= 0\nbest_iteration=0\n\n# Separate data in folds, create train and validation dataframes, train the model and cauculate the mean AUC.\nfor fold , (train_index,test_index) in enumerate(folds.split(X, y)):\n    print('Fold:',fold+1)\n          \n    X_traincv, X_testcv = X.iloc[train_index], X.iloc[test_index]\n    y_traincv, y_testcv = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_traincv, y_traincv)\n    val_data   = lgb.Dataset(X_testcv, y_testcv)\n    \n    LGBM = lgb.train(lgb_params, train_data, valid_sets=[train_data,val_data], verbose_eval=250)\n    best_scorecv += LGBM.best_score['valid_1']['auc']\n    best_iteration += LGBM.best_iteration\n\nbest_scorecv \/= K\nbest_iteration \/= K\nprint('\\n Mean AUC score:', best_scorecv)\nprint('\\n Mean best iteration:', best_iteration)","3002ded0":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.05,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':round(best_iteration),\n                    'seed': SEED,\n                    'early_stopping_rounds':None, \n                }\n\ntrain_data_final = lgb.Dataset(X, y)\nLGBM = lgb.train(lgb_params, train_data)","8318c71e":"print(LGBM)","4a79464a":"# telling wich model to use\nexplainer = shap.TreeExplainer(LGBM)\n# Calculating the Shap values of X features\nshap_values = explainer.shap_values(X)","7ca0c96a":"shap.summary_plot(shap_values[1], X, plot_type=\"bar\")","5d699875":"shap.summary_plot(shap_values[1], X)","b255d67e":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTzTCvvSDS4CJNkhjM5PCHwZ_U3seL7NzwWEhWlLTImqbl0b7mu&usqp=CAU',width=400,height=400)","e1c21d54":"#Metropolitan\/Micropolitan Statistical Area or Metropolitan Division Codes and Names - MMSA \n\nIn the United States, a metropolitan statistical area (MSA) is a geographical region with a relatively high population density at its core and close economic ties throughout the area. Such regions are neither legally incorporated as a city or town would be, nor are they legal administrative divisions like counties or separate entities such as states; because of this, the precise definition of any given metropolitan area can vary with the source. The statistical criteria for a standard metropolitan area were defined in 1949 and redefined as metropolitan statistical area in 1983. A typical metropolitan area is centered on a single large city that wields substantial influence over the region (e.g., New York City or Philadelphia). However, some metropolitan areas contain more than one large city with no single municipality holding a substantially dominant position (e.g., Dallas\u2013Fort Worth metroplex, Norfolk-Virginia Beach (Hampton Roads), Riverside\u2013San Bernardino (Inland Empire) or Minneapolis\u2013Saint Paul (Twin Cities)). MSAs are defined by the U.S. Office of Management and Budget (OMB) and used by the Census Bureau and other federal government agencies for statistical purposes.https:\/\/en.wikipedia.org\/wiki\/Metropolitan_statistical_area","61b07c01":"Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","a48a3851":"dilemma-x.net","cff181d3":"#Code from Manu Siddartha https:\/\/www.kaggle.com\/sid321axn\/feature-engineering-model-explanability","4b74f548":"#Code from rossinEndrew SHAP VALUES Visualization.https:\/\/www.kaggle.com\/endrewrossin\/fast-initial-lightgbm-model-to-detect-exam-result\/comments","49ba10b4":"slideplayer.com"}}