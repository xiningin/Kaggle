{"cell_type":{"80eac775":"code","6fc03c0a":"code","c6fd1b13":"code","e9a23450":"code","457ec6d7":"code","6e9c3b32":"code","59094d72":"code","ab596c27":"code","5ee182b7":"code","038f6a47":"code","9ff0418d":"code","6e035590":"code","85e4cd53":"code","7dc2c4bf":"code","5f9449f4":"code","871f540e":"code","82793ce9":"code","99109b49":"code","277fa7df":"code","65425856":"code","7aa30887":"code","d880e943":"code","e30dac26":"code","a8b59d56":"code","766ed430":"code","0d7a85af":"code","020e5d7f":"code","6d2f6218":"code","ac9b12df":"code","1b652001":"code","57dc070c":"code","3d4261e7":"code","ac618ce4":"code","23d80baf":"markdown","077aa417":"markdown","c38a83df":"markdown","55b4e958":"markdown","8baab779":"markdown","07805a54":"markdown","83b74e6b":"markdown","21e0656c":"markdown","da4bf393":"markdown","d719e673":"markdown","d25fd685":"markdown","e576d54e":"markdown","84092ea0":"markdown","9683a015":"markdown","6fc4f37f":"markdown","649dfbdc":"markdown","f0a67ad3":"markdown","f253eda3":"markdown","a1924afd":"markdown","6f934333":"markdown","79869a6b":"markdown","2dd11a0f":"markdown","9ddeab66":"markdown","c62c2567":"markdown","c39b58f2":"markdown","94f2d30d":"markdown","0cc50c78":"markdown","1a36acaa":"markdown","41e9221d":"markdown"},"source":{"80eac775":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","6fc03c0a":"df=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","c6fd1b13":"print(df.head(5))\nprint(df.columns)\nprint(df.describe(include='all'))\nprint(df.isnull().sum())","e9a23450":"survived_class = df[df['Survived']==1]['Pclass'].value_counts()\ndead_class = df[df['Survived']==0]['Pclass'].value_counts()\ndf_class=pd.DataFrame([survived_class,dead_class])\ndf_class.index=['Survived','Dead']\ndf_class.columns=['Class 1','Class 2','Class 3']\nprint(df_class)\ndf_class.plot(kind='bar')\nplt.ylabel('No. of people',size=15,color='green')\nplt.xlabel('Survival',size=20,color='blue')\nplt.show()\nClass1_survived= df_class.iloc[0,0]\/df_class.iloc[:,0].sum()*100\nClass2_survived = df_class.iloc[0,1]\/df_class.iloc[:,1].sum()*100\nClass3_survived = df_class.iloc[0,2]\/df_class.iloc[:,2].sum()*100\nprint('Percentage of Class1 passenger survived is ',round(Class1_survived),'%')\nprint('Percentage of Class2 passenger survived is ',round(Class2_survived),'%')\nprint('Percentage of Class3 passenger survived is ',round(Class3_survived),'%')","457ec6d7":"survived_gender=df[df['Survived']==1]['Sex'].value_counts()\ndead_gender=df[df['Survived']==0]['Sex'].value_counts()\ndf_gender=pd.DataFrame([survived_gender,dead_gender])\ndf_gender.columns=['Survived','Dead']\ndf_gender.index=['Female','Male']\nprint(df_gender)\ndf_gender.plot(kind='bar')\nplt.ylabel('No. of people',size=15,color='green')\nplt.xlabel('Sex',size=20,color='blue')\nplt.show()\nfemale_survived=df_gender.iloc[0,0]\/df_gender.iloc[0,:].sum()*100\nmale_survived=df_gender.iloc[1,0]\/df_gender.iloc[1,:].sum()*100\nprint('Percentage of male passengers survived is ',round(male_survived),'%')\nprint('Percentage of female passengers survived is ',round(female_survived),'%')","6e9c3b32":"bins = [ 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = [ 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ndf['AgeGroup'] = pd.cut(df[\"Age\"], bins, labels = labels)\nprint(df[['AgeGroup','Survived']].groupby(['AgeGroup'],as_index=False).mean())\nsns.barplot(x=\"AgeGroup\",y=\"Survived\",data=df)\nplt.xlabel('AgeGroup',color='blue',size=18)\nplt.ylabel('Survival Rate',color='green',size=18)\nplt.title('Age vs Survival Rate',color='Black',size=20)\nplt.show()","59094d72":"bins = [0,100,250,600]\nlabels=['Economic Class','Business Class','First Class']\ndf['Class']=pd.cut(df['Fare'],bins,labels=labels)\nprint(df[['Class','Survived']].groupby(['Class'],as_index=False).mean())\nsns.barplot(x=\"Class\",y=\"Survived\",data=df)\nplt.xlabel('Class',color='blue',size=18)\nplt.ylabel('Survival Rate',color='green',size=18)\nplt.title('First Class Passengers got the maximum survival rate',color='Black',size=20)\nplt.show()","ab596c27":"print(len(df['Cabin']))","5ee182b7":"df=df.drop(['Cabin'],axis=1)\ntest=test.drop(['Cabin'],axis=1)\ndf.columns","038f6a47":"print(\"Number of people embarking in Southampton (S):\")\nsouthampton = df[df[\"Embarked\"] == \"S\"].shape[0]\nprint(southampton)\n\nprint(\"Number of people embarking in Cherbourg (C):\")\ncherbourg = df[df[\"Embarked\"] == \"C\"].shape[0]\nprint(cherbourg)\n\nprint(\"Number of people embarking in Queenstown (Q):\")\nqueenstown = df[df[\"Embarked\"] == \"Q\"].shape[0]\nprint(queenstown)","9ff0418d":"df=df.drop(['Ticket'],axis=1)\ntest=test.drop(['Ticket'],axis=1)\ntest.columns","6e035590":"#create a combined group of both datasets\ncombine = [df, test]\n\n#extract a title for each Name in the train and test datasets\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\nprint(pd.crosstab(df['Title'], df['Sex']))","85e4cd53":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ndf[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","7dc2c4bf":"#Filling missing values\ndf['Age'] = df.groupby(['Title'])['Age'].transform(lambda x: x.fillna(x.mean()))\ntest['Age'] = test.groupby(['Title'])['Age'].transform(lambda x: x.fillna(x.mean()))\n\n#AgeCategories\ndf['Age'] = df['Age'].astype(int)\ntest['Age']    = test['Age'].astype(int)\n\ndf.loc[ df['Age'] <= 16, 'Age'] = 0\ndf.loc[(df['Age'] > 16) & (df['Age'] <= 32), 'Age'] = 1\ndf.loc[(df['Age'] > 32) & (df['Age'] <= 48), 'Age'] = 2\ndf.loc[(df['Age'] > 48) & (df['Age'] <= 64), 'Age'] = 3\ndf.loc[(df['Age'] > 64), 'Age'] = 4\n\ntest.loc[ test['Age'] <= 16, 'Age'] = 0\ntest.loc[(test['Age'] > 16) & (test['Age'] <= 32), 'Age'] = 1\ntest.loc[(test['Age'] > 32) & (test['Age'] <= 48), 'Age'] = 2\ntest.loc[(test['Age'] > 48) & (test['Age'] <= 64), 'Age'] = 3\ntest.loc[(test['Age'] > 64), 'Age'] = 4\ndf['Age'].head(5)","5f9449f4":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntest.head(5)","871f540e":"df=df.drop(['Name'],axis=1)\ntest=test.drop(['Name'],axis=1)\ndf.columns","82793ce9":"df.drop('AgeGroup',axis=1,inplace=True)","99109b49":"df = pd.concat([df.drop('Sex', axis=1), pd.get_dummies(df['Sex'])], axis=1)\ntest = pd.concat([test.drop('Sex', axis=1), pd.get_dummies(test['Sex'])], axis=1)\ntest.head(5)","277fa7df":"df.drop('Class',axis=1,inplace=True)\ndf.head()","65425856":"df['Embarked'].replace({'S':1,'C':2,'Q':3},inplace=True)\ndf['Embarked']=df['Embarked'].fillna(1)\ntest['Embarked'].replace({'S':1,'C':2,'Q':3},inplace=True)\ntest['Embarked']=test['Embarked'].fillna(1)\n\ntest.head(5)","7aa30887":"#fill in missing Fare value in test set based on mean fare for that Pclass \nfor x in range(len(test[\"Fare\"])):\n    if pd.isnull(test[\"Fare\"][x]):\n        pclass = test[\"Pclass\"][x] #Pclass = 3\n        test[\"Fare\"][x] = round(df[df[\"Pclass\"] == pclass][\"Fare\"].mean(), 4)\n        \n#map Fare values into groups of numerical values\ndf['FareBand'] = pd.qcut(df['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])\n\n#drop Fare values\ndf = df.drop(['Fare'], axis = 1)\ntest = test.drop(['Fare'], axis = 1)","d880e943":"df=df.drop(['Title'],axis=1)\ntest=test.drop(['Title'],axis=1)\ntest.columns","e30dac26":"from sklearn.model_selection import train_test_split\n\npredictors=df.drop(['Survived','PassengerId'],axis=1)\ntarget=df['Survived']\nx_train,x_cv,y_train,y_cv=train_test_split(predictors,target,test_size=0.35,random_state=0)","a8b59d56":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_cv)\nacc_knn = round(accuracy_score(y_pred,y_cv) * 100, 2)\nprint(acc_knn)","766ed430":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_cv)\nacc_logreg = round(accuracy_score(y_pred, y_cv) * 100, 2)\nprint(acc_logreg)","0d7a85af":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_cv)\nacc_randomforest = round(accuracy_score(y_pred, y_cv) * 100, 2)\nprint(acc_randomforest)","020e5d7f":"# Support Vector Machines\nfrom sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_cv)\nacc_svc = round(accuracy_score(y_pred, y_cv) * 100, 2)\nprint(acc_svc)","6d2f6218":"models = pd.DataFrame({\n    'Method': ['KNN', 'Logistic Regression', \n              'Random Forest', 'Support Vector Machine'],\n    'Score': [acc_knn, acc_logreg, \n              acc_randomforest, acc_svc]})\nmodels.sort_values(by='Score', ascending=False)","ac9b12df":"from sklearn.neural_network.multilayer_perceptron import MLPClassifier\nsvc = MLPClassifier()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_cv)\nacc_svc = round(accuracy_score(y_pred, y_cv) * 100, 2)\nprint(acc_svc)\n","1b652001":"from sklearn.neighbors import NearestCentroid\n\nsvc = NearestCentroid()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_cv)\nacc_svc = round(accuracy_score(y_pred, y_cv) * 100, 2)\nprint(acc_svc)\n","57dc070c":"svc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(test.drop('PassengerId',axis=1))\nprint(y_pred)","3d4261e7":"submission = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':y_pred})\nsubmission.head(5)","ac618ce4":"filename = 'TPredictions.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","23d80baf":"**Choosing the best learning algorithm for our model**\n\n\nWoah!!! Everything looks fine now considering the data. Time to choose the best algorithm for our model out of these four.\n\n**1.KNN**\n\n**2.Logistic Regression**\n\n**3.Random Forest Classifier**\n\n**4.SVM**\n","077aa417":"**Name Feature**\n\nIt will not be useful now as we have already extracted the information to imporvise the Age feature.","c38a83df":"Filling the missing ages value and arranging it into 5 categories.","55b4e958":"**5. DATA CLEANING**","8baab779":"**Classification on the basis of  Fare**","07805a54":"**Class Feature**\n\nNow , time to drop the class column.","83b74e6b":"**Classification on the basis of class**\n","21e0656c":"**6. BEST MODEL**\n","da4bf393":"Making it more simple by converting them into basic categories.","d719e673":"**4. DATA ANALYSIS**","d25fd685":"Further dropping the title.","e576d54e":"As 687 values are missing from toatal 891 values so it will be a difficult prediction and will not be that accurate . So ,I consider it dropping.","84092ea0":"**Classification on the basis of gender**","9683a015":"**Ticket Column**\n\nTicket serial number will not yield any information about the survival, so dropping it.","6fc4f37f":"**EMBARKED FEATURE**\n\nWe will fill out  missing values by 'S' as it is approximately 72% in all feature and will map values.","649dfbdc":"**Splitting the data**\n\nHere I'm splitting the 30% of the data for cross validation.","f0a67ad3":"**Sex Feature**\n\nGetting the dummy column for male and female.","f253eda3":"**Classification on the basis of Age**","a1924afd":"**Cabin Column**\n\nChecking the number of values in 'Cabin' since it seems a tedious column considering the large number of missing values","6f934333":"Now let's compare the score prediction by various method.","79869a6b":"**2. LOADING THE DATA **\n","2dd11a0f":"Mapping Sex to 0 and 1.","9ddeab66":"**Applying KNN**","c62c2567":"**Fare feature**\n\nFare feature should be divided into various categories to make sure it is suitable for prediction.","c39b58f2":"**1.IMPORTING IMPORTANT LIBRARIES**","94f2d30d":"**Embarked Column**\n\n Checking the distribution of embarked column.","0cc50c78":"**AgeGroup Feature**\n\nNow everything has been done from AgeGroup column ,so time to drop it.","1a36acaa":"**Age Feature**\n\nCategorising them into sub category.","41e9221d":"**SUBMISSION TIME**\n\nI'll use the KNeighborsClassifier model in submission."}}