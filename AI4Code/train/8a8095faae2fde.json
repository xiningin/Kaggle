{"cell_type":{"3482d5d9":"code","af2a5668":"code","95e08387":"code","493e9752":"code","ccb3f74d":"code","0d72ea47":"code","53bc876b":"code","30d74606":"code","ba476a3d":"code","f9860aa3":"code","1f6210f2":"code","38653c17":"code","41e4a8d2":"code","e6041d94":"code","dced8ca9":"code","f6de8533":"code","99aa49da":"code","0dacbbe0":"code","222dc56e":"code","fcceb1e3":"code","24667e6a":"code","cfb29378":"code","ae1e3efd":"code","f5a5fe7e":"code","1ccd4884":"code","a14f74a3":"code","b86c7e32":"code","0bc3f4cf":"markdown","664df341":"markdown","33db9522":"markdown","2eec56cc":"markdown","c0801a4e":"markdown"},"source":{"3482d5d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af2a5668":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n#import plotly.plotly as py\n#import plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode\ninit_notebook_mode(connected=True) \n\nimport seaborn as sns\nimport cv2\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Flatten\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D,MaxPool2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nimport random\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Dense, Input, Dropout,Flatten, Conv2D\nfrom tensorflow.keras.layers import BatchNormalization, Activation, MaxPooling2D\n\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom tensorflow.keras.utils import plot_model\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/digit-recognizer\"))\n\n# Any results you write to the current directory are saved as output.","95e08387":"df = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","493e9752":"df.head()","ccb3f74d":"df.shape","0d72ea47":"X=df.drop('label' , axis=1)\nX.head()","53bc876b":"Y = df['label']","30d74606":"print(X.describe())","ba476a3d":"print(Y.describe())","f9860aa3":"X=X\/255.0","1f6210f2":"X = np.array(X).reshape(X.shape[0],28,28)\nY = keras.utils.to_categorical(Y,num_classes = 10)","38653c17":"plt.figure(0, figsize=(12,12))\nfor i in range(1,3):\n    plt.subplot(1,3,i)\n    img = np.squeeze(X[np.random.randint(0, X.shape[0])])\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(img)","41e4a8d2":"plt.imshow(np.squeeze(X[99]), cmap=\"gray\");","e6041d94":"X = X.reshape(-1,28,28,1)","dced8ca9":"X_train, X_val, Y_train, Y_val = train_test_split(X,Y,test_size = 0.20)","f6de8533":"X_train.shape","99aa49da":"model = keras.Sequential()\n\nmodel.add(keras.layers.Conv2D(filters = 64, kernel_size = (3,3),padding = 'same',\n                              activation = 'relu',input_shape = (28,28,1)))\nmodel.add(keras.layers.Conv2D(filters = 64,kernel_size = (5,5),\n                              activation = 'relu'))\n\nmodel.add(keras.layers.MaxPooling2D((2,2),strides = (1,1),padding = 'same'))\n\nmodel.add(keras.layers.Conv2D(filters = 32,kernel_size = (3,3),\n                             activation = 'relu',padding = 'same'))\nmodel.add(keras.layers.Conv2D(filters = 32,kernel_size = (3,3),\n                             activation = 'relu'))\n\nmodel.add(keras.layers.MaxPooling2D((2,2),padding = 'same'))\n\nmodel.add(keras.layers.Dropout(0.2))\n\nmodel.add(keras.layers.Flatten())\n\nmodel.add(keras.layers.Dense(256,activation = 'relu'))\nmodel.add(keras.layers.Dropout(0.5))\n\nmodel.add(keras.layers.Dense(10,activation = 'softmax'))","0dacbbe0":"import tensorflow as tf\ninitial_learning_rate = 0.001\nlr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate,\n    decay_steps=5,\n    decay_rate=0.96,\n    staircase=True)\n\noptimizer = Adam(learning_rate=lr_schedule)","222dc56e":"model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","fcceb1e3":"history = model.fit(X_train,Y_train,epochs= 25,batch_size=64,validation_data=(X_val,Y_val)) ","24667e6a":"train_acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nplt.plot(train_acc,label = \"Training\")\nplt.plot(val_acc,label = 'Validation\/Test')\nplt.legend()\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.show()","cfb29378":"train_loss = history.history['loss']\nval_loss = history.history['val_loss']\nplt.plot(train_loss,label = 'Training')\nplt.plot(val_loss,label = 'Validation\/Test')\nplt.legend()\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.show()","ae1e3efd":"X_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nX_test = X_test\/255.0\nX_test = np.array(X_test).reshape(X_test.shape[0],28,28)\nX_test = X_test.reshape(-1,28,28,1)","f5a5fe7e":"X_test.shape","1ccd4884":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","a14f74a3":"test_predictions = model.predict_classes(X_test)\ntest_predictions = test_predictions.reshape(28000,1)\nidx = 825\nimg = X_test[idx].reshape(28,28)\nplt.imshow(img)\nprint(test_predictions[idx])","b86c7e32":"image_id = np.arange(1,28001).reshape(28000,1)\ntest_results = np.concatenate((image_id,test_predictions),axis=1)\nnp.savetxt('test_predictions.csv',test_results,fmt=\"%d\",header=\"ImageId,Label\",delimiter=\",\")","0bc3f4cf":"# **Import Libraries**","664df341":"# **Load and Preprocessing Data**","33db9522":"# **Plot Images**","2eec56cc":"# **Learning Rate Scheduling and Compile the Model**","c0801a4e":"# **Creating the CNN Model**"}}