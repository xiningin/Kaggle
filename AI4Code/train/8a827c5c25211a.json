{"cell_type":{"00f8bb07":"code","136cdc5f":"code","dcf45f5b":"code","07c0bf72":"code","de06ccfd":"code","792a59c1":"code","1e644457":"code","57dbe28f":"markdown","68f120e8":"markdown","d299d8ef":"markdown","ddf57717":"markdown","65180489":"markdown","0a6f45a1":"markdown","80bb7a30":"markdown"},"source":{"00f8bb07":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import cohen_kappa_score\nimport random\nrandom.seed(42)\nnp.random.seed(42)\n","136cdc5f":"gt = np.random.choice([0,1,2,3], 1000, p=(0.24, 0.14, 0.12, 0.50))\npred = gt.copy()\nnoise = np.random.choice([- 3,-2, -1, 0, 1, 2, 3], 1000, p=(0.05,0.1, 0.15, 0.4, 0.15, 0.1, 0.05))\npred_noisy = pred + noise\npred_noisy[pred_noisy > 3]  -=3\npred_noisy[pred_noisy < 0] += 3","dcf45f5b":"df = pd.DataFrame({'reality':pred, 'pred_noisy': pred_noisy})\ndf[['reality', 'pred_noisy']].groupby(['reality', 'pred_noisy'])['reality'].count().to_frame('count').reset_index()","07c0bf72":"cohen_kappa_score(gt, pred_noisy, weights='quadratic')","de06ccfd":"for i in range(10):\n    errs = np.where(pred_noisy != gt)[0]\n    pred_noisy[errs[:10]] = gt[errs[:10]]\n    print(cohen_kappa_score(gt, pred_noisy, weights='quadratic'))\n    ","792a59c1":"df = pd.DataFrame({'reality':pred, 'pred_noisy': pred_noisy})\ndf[['reality', 'pred_noisy']].groupby(['reality', 'pred_noisy'])['reality'].count().to_frame('count').reset_index()","1e644457":"print('The original kappa was: ' + str(cohen_kappa_score(gt, df['pred_noisy'], weights='quadratic')))\nto_fix = [0,1,2,3]\nfor h in to_fix:\n    for i in range(0,4):\n        if i != h:\n            errs = np.where((df['pred_noisy'] != df['reality']) & (df['reality'] == h) & (df['pred_noisy'] == i))[0]\n            df['new_preds'] = df['pred_noisy']\n            df['new_preds'][errs[:10]] = df['reality'][errs[:10]]\n            print('Kappa after fixing another ten ' + str(h) + ' missclassified as ' + str(i) + ': ' + str(cohen_kappa_score(gt, df['new_preds'], weights='quadratic')) + '. This is '+str(cohen_kappa_score(gt, df['new_preds'], weights='quadratic') - cohen_kappa_score(gt, df['pred_noisy'], weights='quadratic')) + ' improvement from the original')\n","57dbe28f":"## Fixing zeros","68f120e8":"# Conclusion\nAs we have seen, if we fix 10 zeros misclassified as 3 or 10 threes misclassified as 0, we can move kappa from 0.585 to over 0.61. It might be also worthwhile to analyze how big boost we get if we do not replace bad prediction by correct one, but if we replace it by a 'less wrong one'","d299d8ef":"correct 10 errors at each step and see how result improves","ddf57717":"# Extension\nIt turns out that it matters which variables we fix. Or to be precise - for each prediction it depends how much we were wrong. Predicting 0 instead of 3 is not the same as predicting 1 instead of 2. So once we already improved our kappa to 0.585, let's see what happens next based on what fix we make.","65180489":"This kernel is just a simple extension of: https:\/\/www.kaggle.com\/vzaguskin\/kappa-sensitivity-dsbowl?scriptVersionId=26918830","0a6f45a1":"initial score:","80bb7a30":"Prepare ground truth and a bad submission"}}