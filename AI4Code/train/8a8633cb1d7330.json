{"cell_type":{"754d3bf7":"code","7d17612d":"code","ad9ea7a2":"code","c5fda442":"code","14d85ec5":"code","956a90e2":"code","68c82bc3":"code","59b90c8c":"code","ba93d989":"code","d8cb6373":"code","d393143c":"code","458b94e1":"code","d26f5856":"code","6c9eb556":"code","f66ba271":"code","c01aebcf":"code","15624810":"code","34aa2381":"code","6899e4d3":"code","df44f33b":"code","dd3d6aa6":"code","4c317e9a":"code","c04b00de":"code","63ec6bbf":"code","5f1e90cf":"code","716f7114":"code","3cc0fa9f":"code","1f25e85b":"code","fef53008":"markdown","2685cb38":"markdown","8a5f7ce7":"markdown","713f9b1e":"markdown","670bfef2":"markdown","bcba1740":"markdown","fd503ef8":"markdown","fffcd47b":"markdown","cb0b4448":"markdown","d4b72daa":"markdown","7758d79f":"markdown","9cc4c0c0":"markdown"},"source":{"754d3bf7":"import os\n\n# Work in PC or Kaggle\nIN_PC = ('VSCODE_CWD' in os.environ) and (not 'AK_KAGGLE_ENV' in os.environ)\nIN_DOCKER = ('AK_KAGGLE_ENV' in os.environ)\nIN_COLAB = ('COLAB_GPU' in os.environ)\nIN_KAGGLE = ('KAGGLE_DATA_PROXY_URL' in os.environ)\n# DATA_PATH = \"..\/..\/data\" if os.path.exists(\"..\/..\/data\") and IN_PC else \"..\/..\/..\/data\" if os.path.exists(\"..\/..\/..\/data\") and IN_PC else \"\/kaggle\"\n\nif IN_PC:\n    DATA_PATH = os.path.abspath(\"..\/..\/data\") if os.path.isdir(\"..\/..\/data\") else os.path.abspath(\"..\/..\/..\/data\")\nelif(IN_COLAB):\n    DATA_PATH = \"\/content\/drive\/MyDrive\/Colab_Kaggle\/data\"\nelse: # IN_KAGGLE\n    DATA_PATH = \"\/kaggle\"","7d17612d":"# import os\n# import sys\nimport numpy as np \nimport pandas as pd\n# import time\n# import gc\nimport warnings\n\nimport holidays\nimport dateutil.easter as easter\n\n# Sklearn\n# from sklearn.model_selection import *\n# from sklearn.impute import *\nfrom sklearn.preprocessing import *\n# from sklearn.metrics import *\n# from sklearn.pipeline import *\n# from sklearn.compose import *\n# from sklearn.ensemble import *\n# from sklearn.linear_model import *\n\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('float_format', '{:,}'.format)\nwarnings.filterwarnings('ignore')","ad9ea7a2":"target_col='num_sold' # name of target column\nid_col='row_id'\ncompetition='tps0122'\nfullname_competition ='tabular-playground-series-jan-2022'\n\nWORKING_PATH = DATA_PATH + '\/working\/'+ competition + '\/'\nORGIN_CSV_PATH = DATA_PATH + '\/input\/'+ fullname_competition +'\/'\nCSV_PATH = WORKING_PATH + 'CSV\/'\n\nif not os.path.isdir(CSV_PATH):\n    os.makedirs(CSV_PATH)","c5fda442":"train = pd.read_csv(ORGIN_CSV_PATH + 'train.csv')\ntest = pd.read_csv(ORGIN_CSV_PATH + 'test.csv')\n","14d85ec5":"test.info(verbose=True, memory_usage=\"deep\")","956a90e2":"for col in ['country', 'store', 'product' ]:\n    train[col+'_label'] = LabelEncoder().fit_transform(train[col])\n    test[col+'_label'] = LabelEncoder().fit_transform(test[col])","68c82bc3":"holiday_list = list()\n\n# Finland\nfor date in holidays.Finland(years=[2015, 2016, 2017, 2018, 2019], observed=True).items():\n    holiday_list.append([date[0], date[1], \"Finland\"])\n    \n# Norway\nfor date in holidays.Norway(years=[2015, 2016, 2017, 2018, 2019], observed=True).items():\n    holiday_list.append([date[0], date[1], \"Norway\"])\n    \n# Sweden\nfor date in holidays.Sweden(years=[2015, 2016, 2017, 2018, 2019], observed=True).items():\n    if date[1]!='S\u00f6ndag':\n        holiday_list.append([date[0], date[1].replace(\", S\u00f6ndag\", \"\"), \"Sweden\"])","59b90c8c":"holidays_df = pd.DataFrame(holiday_list, columns=['date', 'holiday', 'country'])\nholidays_df['date'] = pd.to_datetime(holidays_df['date'])","ba93d989":"holidays_df.shape","d8cb6373":"holidays_df.sample(10)","d393143c":"special_dates_list = list()\n\n# Last week of the year\nfor year in [2015, 2016, 2017, 2018, 2019]:\n    for i, day in enumerate(range(24, 32)):\n        for country in ['Finland', 'Sweden', 'Norway']:\n             special_dates_list.append([pd.to_datetime(f\"{year}-{12}-{day}\").date(), \n                                  f\"Last week of the year (day {i+1})\", \n                                  country])\n# Swedish Rock Concert\nfor start, end, year in [[3,6,2015],[8,11,2016],[7,10,2017],[6,10,2018],[5,8,2019]]:\n    for i, day in enumerate(range(start, end+1)):\n        special_dates_list.append([pd.to_datetime(f\"{year}-{6}-{day}\").date(), \n                                  f\"Swedish Rock Concert (day {i+1})\", \n                                  \"Sweden\"])\n        \n# Last Wednesday of June\nfor date in ['2015-06-24', '2016-06-29', '2017-06-28', '2018-06-27', '2019-06-26']:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         special_dates_list.append([pd.to_datetime(date).date(), \n                                  f\"Last Wednesday of June\", \n                                  country])\n            \n# First Sunday of November\nfor date in ['2015-11-1', '2016-11-6', '2017-11-5', '2018-11-4', '2019-11-3']:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         special_dates_list.append([pd.to_datetime(date).date(), \n                                  f\"First Sunday of November\", \n                                  country])\n            \n# Independence Day of Finland\nfor year in [2015, 2016, 2017, 2018, 2019]:\n    special_dates_list.append([pd.to_datetime(f\"{year}-{12}-{6}\").date(), \n                                      f\"Independence Day of Finland\", \n                                      'Finland'])\n\n# Easter\neaster_date = [easter.easter(y) for y in [2015, 2016, 2017, 2018, 2019]]\nfor date in easter_date:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         special_dates_list.append([pd.to_datetime(date).date(), \n                                  f\"Easter\", \n                                  country])","458b94e1":"special_dates_df = pd.DataFrame(special_dates_list, columns=['date', 'special_dates', 'country'])\nspecial_dates_df['date'] = pd.to_datetime(special_dates_df['date'])","d26f5856":"special_dates_df.shape","6c9eb556":"special_dates_df.sample(10)","f66ba271":"holidays_official = pd.read_csv(DATA_PATH + '\/input\/' + 'public-and-unofficial-holidays-nor-fin-swe-201519\/holidays.csv')\nholidays_official = holidays_official.rename(columns={\"type\": \"event_type\"})\nholidays_official['date'] = pd.to_datetime(holidays_official['date'])","c01aebcf":"holidays_official.sample(5)","15624810":"holidays_official.country.unique()","34aa2381":"gdp_df = pd.read_csv(DATA_PATH + '\/input\/' +'gdp-20152019-finland-norway-and-sweden\/GDP_data_2015_to_2019_Finland_Norway_Sweden.csv')\ngdp_df.set_index('year', inplace=True)\ngdp_df = gdp_df.rename(columns={\"GDP_Finland\": \"Finland\", \"GDP_Norway\": \"Norway\", \"GDP_Sweden\": \"Sweden\",})","6899e4d3":"gdp_df.head()","df44f33b":"special_dates_df.head()","dd3d6aa6":"def feature_engineering(df):\n    # Calendar\n    df['date'] = pd.to_datetime(df['date'])\n    df['year'] = df['date'].dt.year\n    df['month']= df['date'].dt.month\n    df['week']= df['date'].dt.week\n    df['day'] = df['date'].dt.day\n    df['quarter'] = df['date'].dt.quarter\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['weekend'] = df['date'].dt.weekday >=5\n    df['weekday'] = df['date'].dt.weekday\n    \n    # holidays & special_dates\n    df = df.merge(holidays_df, on=['date', 'country'], how='left')\n    df = df.merge(special_dates_df, on=['date', 'country'], how='left')\n#     df = df.merge(holidays_official, on=['date', 'country'], how='left')\n\n    df['is_holiday'] = df['holiday'].apply(lambda x: True if not pd.isnull(x) else False)\n    df['is_special_dates'] = df['special_dates'].apply(lambda x: True if not pd.isnull(x) else False)\n    \n    # Public & Unofficial holidays\n#     df['event_type'] = df['event_type'].astype('str')\n#     df['event_type_label'] = LabelEncoder().fit_transform(df['event_type'])\n    \n    # GDP\n    df['gdp_year'] = df.apply(lambda x: gdp_df.loc[x.year, x.country] , axis=1)\n    \n    return df\n\ntrain = feature_engineering(train)\ntest = feature_engineering(test)\ntest.info(verbose=True, memory_usage=\"deep\")\n","4c317e9a":"train.info(verbose=True, memory_usage=\"deep\")","c04b00de":"test.info(verbose=True, memory_usage=\"deep\")","63ec6bbf":"train.sample(10)","5f1e90cf":"train_dum = pd.get_dummies(train, columns=['store', 'country', 'product'])\ntest_dum = pd.get_dummies(test, columns=['store', 'country', 'product'])","716f7114":"train_dum.info()","3cc0fa9f":"train_dum.sample(10)","1f25e85b":"train.to_csv(CSV_PATH + 'train-ak.csv', index=False, float_format='%g')\ntest.to_csv(CSV_PATH + 'test-ak.csv', index=False, float_format='%g')","fef53008":"# DATA_PATH","2685cb38":"# Imports","8a5f7ce7":"# Public & Unofficial holidays","713f9b1e":"# Encoder (Text 2 Label)","670bfef2":"# Variables","bcba1740":"# GDP","fd503ef8":"# Holiday\n* [Thanks] <https:\/\/www.kaggle.com\/lucamassaron\/festivities-in-finland-norway-sweden>","fffcd47b":"# Feature engineering","cb0b4448":"# Save CSV","d4b72daa":"# Special dates","7758d79f":"# Feature engineering","9cc4c0c0":"# Pandas dummies"}}