{"cell_type":{"3cbd1017":"code","e4da7481":"code","adb4a5d6":"code","44f86b09":"code","5127fbdd":"code","1ee08712":"code","dafe59bc":"code","c9f317b8":"code","a06317b2":"code","fe3b1ea7":"code","f507678e":"code","8e112ae9":"code","e956904b":"code","1dc79526":"code","10406142":"code","5176171e":"code","851f5414":"code","c13a7d17":"code","30375aea":"code","27202f70":"code","c812f8c3":"code","6c21b138":"code","6726f419":"code","b49838a6":"code","ef0ce075":"markdown","85bbcee2":"markdown","865e40a2":"markdown","a3886aaa":"markdown","186e9bec":"markdown","c21b4edc":"markdown","c055e3e9":"markdown","761d85ab":"markdown","ca15ad78":"markdown","fb8d0e61":"markdown","b6f7e462":"markdown","eab6ab2e":"markdown","d5ca83c7":"markdown","5a6b1c12":"markdown","82ccac95":"markdown","e807fc8f":"markdown","a2662a8d":"markdown","a2394917":"markdown","5375a60a":"markdown","b68a7118":"markdown","9b84a37d":"markdown","57723010":"markdown","63c51bc4":"markdown","66b71ec7":"markdown","c30f0a4b":"markdown","783cea29":"markdown","abba4529":"markdown"},"source":{"3cbd1017":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e4da7481":"data = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\ndata","adb4a5d6":"data.isnull().sum()","44f86b09":"data.info()","5127fbdd":"data.describe()","1ee08712":"index_to_drop = list(data.loc[(data.RestingBP == 0) | (data.Cholesterol == 0)].index)\n    \ndata.drop(index_to_drop, inplace=True)\ndata.describe()","dafe59bc":"font_dict = {\"fontsize\": 14, \"fontweight\":\"bold\"}\n\nfig = plt.figure(dpi=80, figsize=(16, 16))\ngs = GridSpec(3, 6, figure=fig)\n\nax1 = fig.add_subplot(gs[0, :2])\nsns.countplot(data=data, x=\"Sex\", hue=\"HeartDisease\", ax=ax1)\nax1.set_title(\"Sex Count Plot\", fontdict=font_dict)\n\nax2 = fig.add_subplot(gs[0, 2:4])\nsns.countplot(data=data, x=\"RestingECG\", hue=\"HeartDisease\", ax=ax2)\nax2.set_title(\"RestingECG Count Plot\", fontdict=font_dict)\n\nax3 = fig.add_subplot(gs[0, 4:6])\nsns.countplot(data=data, x=\"ExerciseAngina\", hue=\"HeartDisease\", ax=ax3)\nax3.set_title(\"ExerciseAngina Count Plot\", fontdict=font_dict)\n\nax4 = fig.add_subplot(gs[1, :3])\nsns.countplot(data=data, x=\"ChestPainType\", hue=\"HeartDisease\", ax=ax4)\nax4.set_title(\"ChestPainType Count Plot\", fontdict=font_dict)\n\nax5 = fig.add_subplot(gs[1, 3:])\nsns.countplot(data=data, x=\"ST_Slope\", hue=\"HeartDisease\", ax=ax5)\nax5.set_title(\"ST_Slope Count Plot\", fontdict=font_dict)\n\nax6 = fig.add_subplot(gs[2, :3])\nsns.countplot(data=data, x=\"FastingBS\", hue=\"HeartDisease\", ax=ax6)\nax6.set_title(\"FastingBS Count Plot\", fontdict=font_dict)\n\nax7 = fig.add_subplot(gs[2, 3:])\nsns.countplot(data=data, x=\"HeartDisease\", ax=ax7)\nax7.set_title(\"HeartDisease Count Plot\", fontdict=font_dict)\n\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.3)","c9f317b8":"fig = plt.figure(dpi=80, figsize=(16, 10))\ngs = GridSpec(2, 6, figure=fig)\n\nax1 = fig.add_subplot(gs[0, :2])\nsns.histplot(data=data, x=\"Oldpeak\", hue=\"HeartDisease\", ax=ax1)\nax1.set_title(\"Oldpeak Hist Plot\", fontdict=font_dict)\n\nax2 = fig.add_subplot(gs[0, 2:4])\nsns.histplot(data=data, x=\"MaxHR\", hue=\"HeartDisease\", ax=ax2)\nax2.set_title(\"MaxHR Hist Plot\", fontdict=font_dict)\n\nax3 = fig.add_subplot(gs[0, 4:6])\nsns.histplot(data=data, x=\"Cholesterol\", hue=\"HeartDisease\", ax=ax3)\nax3.set_title(\"Cholesterol Hist Plot\", fontdict=font_dict)\n\nax4 = fig.add_subplot(gs[1, :3])\nsns.histplot(data=data, x=\"Age\", hue=\"HeartDisease\", ax=ax4)\nax4.set_title(\"Age Hist Plot\", fontdict=font_dict)\n\nax5 = fig.add_subplot(gs[1, 3:])\nsns.histplot(data=data, x=\"RestingBP\", hue=\"HeartDisease\", ax=ax5)\nax5.set_title(\"RestingBP Hist Plot\", fontdict=font_dict)\n\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.3)","a06317b2":"plt.figure(figsize=(12, 8), dpi=80)\nsns.heatmap(data=data.corr(), annot=True)\nplt.title(\"Correlation Heatmap\", fontdict=font_dict)","fe3b1ea7":"# Machine Learning\nfrom sklearn.model_selection import StratifiedShuffleSplit, cross_val_score, cross_val_predict\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_recall_curve, roc_curve\nfrom sklearn.preprocessing import StandardScaler","f507678e":"sc = StandardScaler()\n\ncols_to_scale = [\"Age\", \"RestingBP\", \"Cholesterol\", \"MaxHR\", \"Oldpeak\"]\n\ndata[cols_to_scale] = sc.fit_transform(data[cols_to_scale])\ndata.head()","8e112ae9":"data = pd.get_dummies(data).reset_index()\ndata.head()","e956904b":"z = np.abs(stats.zscore(data))\n\nthreshold = 2.5\nprint(np.where(z > 2.5))","1dc79526":"data = data[(z < 2.5).all(axis=1)]\ndata.reset_index(inplace=True)\ndata.shape","10406142":"split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(data, data['HeartDisease']):\n    train = data.loc[train_index]\n    test = data.loc[test_index]","5176171e":"X_train = train.drop(\"HeartDisease\", axis=1)\ny_train = train[\"HeartDisease\"]\n\nX_test = test.drop(\"HeartDisease\", axis=1)\ny_test = test[\"HeartDisease\"]","851f5414":"from xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import RidgeClassifierCV\nfrom catboost import CatBoostClassifier","c13a7d17":"MLA_compare = pd.DataFrame()\n\nrow_index = 0\n\ndef MLA_testing(MLA, X_train, X_test, y_train, y_test, curves=True):  \n    global row_index\n    \n    # Training The Model\n    MLA.fit(X_train, y_train)\n\n    # KFold Accuracies on Training Data\n    kfold_accuracy = cross_val_score(estimator = MLA, X = X_train, y = y_train, cv = 10, n_jobs=-1)\n    print(\"K-Fold Accuracies:\\n\", kfold_accuracy, \"\\n\")\n    \n    # Prediction on Testing Data\n    y_pred = cross_val_predict(estimator = MLA, X = X_test, y = y_test, cv = 10, n_jobs=-1)\n    \n    # Accuracy for y_test and y_pred\n    classifier_accuracy_score = accuracy_score(y_test, y_pred)\n    print(\"Accuracy Score:\\n\", classifier_accuracy_score, \"\\n\")\n    \n    # Confusion Matrix\n    conf_mtx = confusion_matrix(y_test, y_pred)\n    print(\"Confusion Matrix:\\n\", conf_mtx, \"\\n\")\n    \n    # Classification Report\n    class_rep = classification_report(y_test, y_pred)\n    print(\"Classification Report:\\n\", class_rep, \"\\n\")\n    \n    if curves:\n        # Precision - Recall Curve\n        yhat = MLA.predict_proba(X_test)\n        no_skill = len(data.HeartDisease[data.HeartDisease==1]) \/ len(data.HeartDisease)\n        precision, recall, _ = precision_recall_curve(y_test, yhat[:, 1])\n        \n        plt.figure(dpi=100, figsize=(15, 6))\n        plt.subplot(121)\n        sns.lineplot([0, 1], [no_skill, no_skill], linestyle='--', label='No Skill')\n        sns.lineplot(recall, precision, marker='.', label=MLA.__class__.__name__)\n        plt.title(\"Recall vs Precision Curve\")\n        plt.xlabel('Recall')\n        plt.ylabel('Precision')\n        plt.legend()\n        \n        # ROC Curve - Receiver Operating Characteristic\n        plt.subplot(122)\n        sns.lineplot([0, 1], [0, 1], linestyle='--', label='No Skill')\n        fpr, tpr, _ = roc_curve(y_test, yhat[:, 1])\n        sns.lineplot(fpr, tpr, marker='.', label=MLA.__class__.__name__)\n        plt.title(\"ROC Curve\")\n        plt.xlabel('False Positive Rate')\n        plt.ylabel('True Positive Rate')\n        plt.legend()\n        plt.show()\n\n    # Saving Data in Dataframe\n    MLA_name = MLA.__class__.__name__\n    MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n    MLA_compare.loc[row_index, 'Accuracy Score'] = classifier_accuracy_score*100\n    MLA_compare.loc[row_index, 'K-Fold Accuracy'] = kfold_accuracy.mean()*100\n\n    print(MLA_name, \"Done\")\n    \n    row_index+=1","30375aea":"catboost_clf = CatBoostClassifier(silent=True)\n\nMLA_testing(catboost_clf, X_train, X_test, y_train, y_test)","27202f70":"rf_clf = RandomForestClassifier()\n\nMLA_testing(rf_clf, X_train, X_test, y_train, y_test)","c812f8c3":"gb_clf = GradientBoostingClassifier()\n\nMLA_testing(gb_clf, X_train, X_test, y_train, y_test)","6c21b138":"ridge_clf = RidgeClassifierCV()\n\nMLA_testing(ridge_clf, X_train, X_test, y_train, y_test, curves=False)","6726f419":"xgb_clf = XGBClassifier(eval_metric=\"logloss\")\n\nMLA_testing(xgb_clf, X_train, X_test, y_train, y_test)","b49838a6":"MLA_compare = MLA_compare.sort_values(by=\"K-Fold Accuracy\", ascending=False).reset_index(drop=True)\nMLA_compare","ef0ce075":"## Getting Our Data","85bbcee2":"## Distribution Plots","865e40a2":"### Function to Test Models\nThe code below trains and tests the input classification algorithm along. Also it show ROC Curve and Precision - Recall Curve for the model along with confusion matrix and classification report","a3886aaa":"## Count Plots","186e9bec":"## RandomForestClassifier","c21b4edc":"# Preprocessing, Analysis and EDA","c055e3e9":"### Imports for Machine Learning Model","761d85ab":"# Testing Multiple Models","ca15ad78":"## Imports for Data Preparation","fb8d0e61":"## RidgeClassifierCV","b6f7e462":"### Checking for Null Values","eab6ab2e":"## XGBClassifier","d5ca83c7":"We see a very good relation between Oldpeak and HeartDisease. As Oldpeak Increases the Chance of Heart Disease Increases.","5a6b1c12":"# Data Preparation and Classification Model","82ccac95":"## Scaling the Continious Variables","e807fc8f":"## CatBoostClassifier","a2662a8d":"Now we have a clean dataset","a2394917":"## Correlation Heatmap","5375a60a":"# Imports","b68a7118":"We can right away see some weird data, with RestingBP and Cholesterol have a minimum value of 0 which is not possible.","9b84a37d":"People with \n- 0 - 2 Oldpeak\n- 100 - 160 MaxHr\n- late 50's - mid 60's\nare likey to have a higher chance to have a Heart Disease","57723010":"## Filtering Our Outliers\nUsing Z-Score Method for filtering","63c51bc4":"## OneHotEncoding Categorical Variables","66b71ec7":"- In total we have <b>more males than females<\/b> and also more than half of the men in our data have Heart Disease.\n- People with normal restingECG tend to have a higher chance of having a Heart Disease.\n- People with ExerciseAnigna Y have a higher chance of having a Heart Disease.\n- People with ASY type of Chest Pain indicates that the person has Heart Disease.\n- People with Flat type of ST_Slope tend to have a Heart Disease.\n- People without FastingBS are more likey to have a Heart Disease.","c30f0a4b":"## GradientBoostingClassifier","783cea29":"## Evenly Distribution the target variable across dataset","abba4529":"### Checking for Faulty Values"}}