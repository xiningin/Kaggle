{"cell_type":{"6bf64938":"code","b62ae57a":"code","b52bc811":"code","fd59e2a3":"code","052ddbe3":"code","bf82157e":"code","3cd7987a":"code","5389579b":"code","5ada93bf":"code","2445aa44":"code","4ff05ec4":"code","02450e0c":"code","70654bd0":"code","9d345067":"code","4729f1c6":"code","42d19668":"code","399652b6":"code","9f50f140":"code","7d169d90":"code","27ffa0e9":"code","0545a6e6":"code","21b33574":"markdown","46cfa4b6":"markdown","deda3e7d":"markdown","858998b9":"markdown","4eaa48f6":"markdown","6aed5377":"markdown","7c972adb":"markdown","01156701":"markdown","ded23c8f":"markdown","db574d50":"markdown","98f34ce0":"markdown","6a7ce010":"markdown","6271a85f":"markdown","100b0725":"markdown","2ba3b454":"markdown","b3dd05da":"markdown","4448e7af":"markdown","7d957be7":"markdown","f6302a82":"markdown","3c17a12a":"markdown","dad0e65f":"markdown","dafb49c6":"markdown","b13170e8":"markdown","fe8a39fb":"markdown","e4eb77dd":"markdown","9b6a7ba9":"markdown","6a986df2":"markdown","123eb159":"markdown","a49eb947":"markdown","cdfc3b47":"markdown","6c22f5f0":"markdown","3b30e787":"markdown","225008c4":"markdown","20c66f86":"markdown","9789d444":"markdown","5529908a":"markdown","1dead747":"markdown","e63e8703":"markdown","ace7ae5f":"markdown","360ac70a":"markdown","f5e9b7cb":"markdown","6f6c9b06":"markdown","28edd988":"markdown","3f08f919":"markdown","1d9f7cd5":"markdown","c60a3132":"markdown","896d6239":"markdown","89cd6adf":"markdown","9b7dd5f7":"markdown","01ae9465":"markdown","35d6f238":"markdown","adc4204b":"markdown"},"source":{"6bf64938":"# importing the libraries\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","b62ae57a":"# reading the dataset\ndf = pd.read_csv('..\/input\/bollywood-movie-dataset\/bollywood.csv')","b52bc811":"# viewing the first few rows of the dataset\n# the head() function displays the first 5 rows of the dataframe\ndf.head()","fd59e2a3":"# 1. number of records in the dataset\ndf.shape[0]","052ddbe3":"# 2. finding the number of movies by release time sorted in the descending order\ndf.ReleaseTime.value_counts()","bf82157e":"# formatting the genre column\ndf.Genre = df.Genre.str.strip()\n\n# 3. finding the genre with the highest number of releases during the festive season\ndf[df.ReleaseTime=='FS'].Genre.value_counts()","3cd7987a":"# 4. cross tab between Genre and ReleaseTime\npd.crosstab(df.Genre, df.ReleaseTime)","5389579b":"# 5. finding the year when the maximum number of movies were released\n\n# converting Release Date into datetime data type\ndf['Release Date'] = pd.to_datetime(df['Release Date'])\n\n# generating a year column to extract the date from the column Release Date\ndf['Year'] = df['Release Date'].dt.year\n\n# finding the year when the maximum number of movies were released\ndf.Year.value_counts()","5ada93bf":"# 6. finding the month which sees maximum number of high budget movies\ndf[df.Budget>=30]['Release Date'].dt.month.value_counts()","2445aa44":"# 7. finding the top 10 flop movies with minimum ROI\n\n# creating the ROI column\ndf['ROI'] = (df.BoxOfficeCollection - df.Budget)\/df.Budget\n\n# sorting the values and displaying the top 10 flop movies\ndf.sort_values(by='ROI').MovieName[0:10]","4ff05ec4":"# 8. calculating average ROI based on ReleaseTime\ndf.groupby(by='ReleaseTime').ROI.mean()","02450e0c":"# 9. correlation between BoxOfficeCollection and YoutubeLikes\ncorr = df[['BoxOfficeCollection', 'YoutubeLikes']].corr()\ncorr","70654bd0":"# 10. comparing Youtube views of genre by plotting boxplots\nsns.boxplot(x='Genre', y='YoutubeViews', data=df)","9d345067":"# 11. correlation heatmap for variables Budget, BoxOfficeCollection, YoutubeView, YoutubeLikes, YoutubeDislikes\n\n# calculating correlation values between the variables\ncorr = df[['Budget', 'BoxOfficeCollection', 'YoutubeViews', 'YoutubeLikes', 'YoutubeDislikes']].corr()\n\n# plotting a heatmap to visualize the correlation\nsns.heatmap(corr, annot=True)","4729f1c6":"# 12. plotting a barplot to highlight the genre of movies and their box office collection\nsns.barplot(x='Year', y='BoxOfficeCollection', hue='Genre', data=df, ci=None)","42d19668":"# 13. finding number of movies released in every year\ndf.Year.value_counts()","399652b6":"# 13. plotting a countplot to visualize the number of movies released every year\nsns.countplot(x='Year', data=df)","9f50f140":"# 14. plotting a distplot to visualize the distribution of Budget Genre-wise\nsns.displot(x='Budget', data=df, kind='kde', hue='Genre')","7d169d90":"# 15. finding number of YoutubeLikes every year\ndf.groupby(by='Year').YoutubeLikes.sum()","27ffa0e9":"# 15. finding number of YoutubeDislikes every year\ndf.groupby(by='Year').YoutubeDislikes.sum()","0545a6e6":"# listing the above results\nlikes = [324180, 710142, 139431]\ndislikes = [58156, 104682, 17127]\nyear = ['2013', '2014', '2015']\n\n# converting the results into a dataframe\ncompare = pd.DataFrame({'likes':likes, 'dislikes':dislikes}, index=year)\n\n# 15. plotting the dataframe\ncompare.plot.bar()","21b33574":"As we can see, the genres Thriller and Drama had the highest number of releases during the Festive Season, having 4 released each.","46cfa4b6":"#### **Q6.** Which month of the year typically sees most releases of high budgeted movies, that is, movies with budget of 30 crore or more?","deda3e7d":"As we can see, movies which release on the long weekend and festive seasons have higher values of ROI - 1.12 and 0.97 respectively.","858998b9":"#### **Q12.** During 2013\u22122015 period, highlight the genre of movies and their box office collection? Visualize with best fit graph.","4eaa48f6":"To solve Question 14, we use the distplot() function from the Seaborn library and pass the value Budget to be plotted on the x-axis and set the parameter kind to kde and hue to Genre to compare the Genres easily.","6aed5377":"As we can see, the highest number of movies were released on a normal time, followed by the holiday season, the festive season, and then the long weekend having the lowest number of releases.","7c972adb":"#### **Q3.** Which genre had highest number of releases during the Festive Season?","01156701":"## Bollywood Movie Analysis","ded23c8f":"To solve Question 15, we first find the sum of likes year-wise by grouping the dataframe by the Year column and summing over the YoutubeLikes column using the sum() function from the Pandas library.","db574d50":"To solve Question 4, we use the crosstab() function from the Pandas library on the Genre and ReleaseTime columns of the dataframe.","98f34ce0":"Author: Khushee Kapoor\n\nLast Updated: 22\/11\/2021\n\n\n**Meta-Data** of the Bollywood Dataset:\n\n*   SINo - Identifier for the movies.\n*   Release Date - Date on which the movie was released.\n*   MovieName - Name of the movie.\n*   ReleaseTime - Mentions special time of release. LW (Long weekend), FS (Festive Season), HS (Holiday Season), N (Normal).\n*   Genre \u2013 Genre of the film such as Romance, Thriller, Action, Comedy, etc\n*   Budget \u2013 Movie creation budget\n*   BoxOfficeCollection \u2013 Box office collection\n*   YoutubeViews \u2013 Number of views of the YouTube trailers\n*   YoutubeLikes \u2013 Number of likes of the YouTube trailers\n*   YoutubeDislikes \u2013 Number of dislikes of the YouTube trailers","6a7ce010":"#### **Q1.** How many records are present in the dataset?","6271a85f":"As we can see, there are 149 records in the dataset.","100b0725":"Next, we use the countplot() function from the Seaborn library and pass the value Year to be plotted on the x-axis. The y-axis automatically plots the count of the discrete variable Year.","2ba3b454":"#### **Q2.** How many movies were released in each Release Time? Sort number of releases in Release Time in descending order.","b3dd05da":"First, we import the libraries:\n\n*   NumPy - for data manipulation.\n*   Pandas - for data manipulation.\n*   MatPlotLib - for data visualization.\n*   Seaborn - for data visualization.","4448e7af":"To solve Question 8, we group the dataframe by the Release Date column using the groupby() function from the Pandas library and then calculate mean of the groups using the mean() function from the Pandas library on the ROI column of the grouped dataset.","7d957be7":"Next, we convert the above results into a data frame using the DataFrame() function from the Pandas libray and plot it using the plot.bar() from the Pandas library.","f6302a82":"Then, we find the sum of dislikes year-wise by grouping the dataframe by the Year column and summing over the YoutubeDislikes column using the sum() function from the Pandas library.","3c17a12a":"#### **Q11.** Which of the variables among Budget, BoxOfficeCollection, YoutubeView, YoutubeLikes, YoutubeDislikes are highly correlated?","dad0e65f":"#### **Q13.** During 2013\u22122015, find the number of movies released in every year. Also, visualize with best fit graph.","dafb49c6":"To solve Question 11, we use first calculate the correlation between the specified columns using the corr() function from the Pandas library, and then we plot a heatmap of the correlation vector using the heatmap() function from the Seaborn library.","b13170e8":"As we can see, the month 2 - February typically sees most releases of high budgeted movies.","fe8a39fb":"To solve Question 13, we first find the number of movies released every year using the value_counts() function from the Pandas library on the Year column.","e4eb77dd":"As we can see, the Genre Action has the highest YouTube views.","9b6a7ba9":"To solve Question 1, we use the shape attribute of a Pandas dataframe and check the number of rows by using index 0.","6a986df2":"After reading the dataset, we view the first few rows of the dataframe using the head() function from the Pandas library.","123eb159":"#### **Q14.** Find the distribution of movie budget for every Genre.","a49eb947":"To solve Question 7, we first generate a new column in the dataframe called ROI using the formula  (BoxOfficeCollection \u2013 Budget) \/ Budget. Then we sort the dataframe in the ascending order by the column ROI and display the top 10 columns using splicing.","cdfc3b47":"To solve Question 3, we use the strip() function on the string values of the Genre column to remove the leading and trailing spaces. Then, we filter the dataframe using the condition where ReleaseTime is equal to FS and use the value_counts() method on the Genre column to get the number of movies grouped by Genre.","6c22f5f0":"#### **Q4.** How many movies in each genre got released in different release times like long weekend, festive season, etc. ","3b30e787":"To solve Question 9, we use the corr() function from the Pandas library on the BoxOfficeCollection and YoutubeLikes columns of the dataframe.","225008c4":"#### **Q5.** In which year were maximum number movie released?","20c66f86":"As we can see, the year 2014 has the maximum number of movies closely followed by 2013.","9789d444":"As we can see, the columns BoxOfficeCollection and YoutubeLikes have a moderate degree of positive linear correlation, having correlation coefficient 0.68. This means that if BoxOfficeCollection increases by 100%, the YoutubeLikes also increase by 68%.","5529908a":"As we can see, almost all the Genres have right-skewed Budget.","1dead747":"#### **Q7.** Which are the top 10 flop movies with minimum return on investment (ROI)?","e63e8703":"Next, we read the csv file into a Pandas dataframe using the function read_csv() from the Pandas library.","ace7ae5f":"#### **Q9.** Is there a correlation between box office collection and YouTube likes? Is the correlation positive or negative?\n","360ac70a":"To solve Question 5, we first convert the data type of the Release Date column to datetime using the to_datetime() function from the Pandas library. After that, we generate a new column Year by extracting the year attribute from the Release Date column. Following that, we use the value_counts() function from the Pandas library to get the number of movies released for every value of year.","f5e9b7cb":"As we can see, the movies Gangoobai, Bandook, Sona Spa, Rajdhani Express, Kya Dilli Kya Lahore, Satya 2, Purani Jeans, Samrat and Co., Heartless, and Kaanchi have the minimum ROI and are the top 10 flop movies.","6f6c9b06":"As we can see, the columns YoutubeViews, YoutubeLikes, and YoutubeDislikes are highly correlated with each other.","28edd988":"To solve Question 2, we use the function value_counts() from the Pandas library on the ReleaseTime column. The function automatically sorts the counts in descending order.","3f08f919":"#### **Q8.** Do the movies have higher ROI if they get released on festive seasons or long weekend? Calculate the average ROI for different release times.","1d9f7cd5":"As we can see, there are:\n*   3 Action, 3 Comedy, 4 Drama, 3 Romance and 4 Thriller movies released during the Festive Season.\n*   3 Action, 5 Comedy, 6 Drama, 3 Romance and 1 Thriller movies released during the Holiday Season.\n*   3 Action, 5 Comedy, 1 Drama, 4 Romance and 2 Thriller movies released during the Long Weekend.\n*   15 Action, 23 Comedy, 24 Drama, 15 Romance and 22 Thriller movies released during the Normal Period.","c60a3132":"Now, we start answering the lab questions.","896d6239":"As we can see, the maximum number of movies were released in the year 2014.","89cd6adf":"To solve Question 10, we use the boxplot() function from the Seaborn library and pass the values Genre to be plotted on the x-axis and YoutubeViews to be plotted on the y-axis.","9b7dd5f7":"#### **Q15.** During 2013\u22122015, Visualize the number of YouTube likes and YouTube dislikes every year. Also, visualize with best fit graph.","01ae9465":"To solve Question 12, we use the barplot() function from the Seaborn library and pass the values Year to be plotted on the x-axis, BoxOfficeCollection to be plotted on the y-axis, and set the hue parameter to Genre to split the bars on the basis of Genre.","35d6f238":"#### **Q10.** Which genre of movies typically sees more YouTube views? Draw boxplots for each genre of movies to compare.","adc4204b":"To solve Question 6, we filter the dataframe using the condition that the Budget is >= 30 crores and then extract the month from the Release Date column using the month attribute. After that, we use the value_counts() function from the Pandas library on the month extracted to get the number of movies released for every value of the month."}}