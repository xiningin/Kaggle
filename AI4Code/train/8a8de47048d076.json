{"cell_type":{"c5c8ed30":"code","7cff911a":"code","be4a0cfb":"code","5c5bf6ad":"code","71e82f28":"code","a5f2a217":"code","a52432fe":"code","cadc5726":"code","bcb57549":"code","b4934fa3":"code","32630f90":"code","b799abe1":"code","a00dfef3":"code","bc6e8d47":"code","c180c6ac":"code","fe0bb401":"code","a671620e":"code","2dfccfad":"code","eda80ff5":"code","89db156e":"code","405b8ca6":"code","3af1adcc":"code","d69178be":"code","203b5443":"code","4d69e335":"code","19c32f50":"code","4d28e16f":"code","606c36d8":"code","adb42844":"code","a559f79f":"code","b5b23d38":"code","8da9426d":"code","0e563832":"code","2ee6fc38":"code","8d985dbb":"code","f3ff62a9":"code","10f222cc":"code","c314d557":"code","1f4340ec":"code","e32213f5":"code","41e58b2f":"code","01fa29fa":"code","3dd85672":"code","fa928f04":"code","17d363ca":"code","ec0257df":"code","35d4f159":"code","cb719224":"code","ff259099":"code","cad51995":"code","bfe30a43":"code","1a623270":"code","224811b9":"code","a012edac":"code","66e15475":"code","ee40d0e6":"code","76a89244":"code","fc99d8d7":"code","10e08801":"code","d299a6de":"code","6c5347b5":"code","92fe1e15":"code","db23ff7c":"code","115c7055":"code","4c7a1b10":"code","3a72f03f":"code","d7e1cdbd":"code","30d46c84":"code","3843ec76":"code","24fc498e":"code","875aee6d":"code","52e94005":"code","4755886e":"code","a34af7f4":"code","80354a82":"code","a244bda1":"code","8b4e12aa":"code","150e032e":"code","f1f60292":"code","3cb74fa1":"code","6c149947":"code","0d8bc29c":"code","d68694de":"code","19bdd8b0":"code","28bb4c2e":"code","72edd125":"code","9af1a8a4":"code","cf699996":"code","7bd173d4":"code","b4d0ddb0":"code","c7921324":"code","ff9d83a6":"code","f1aa908e":"code","cd326575":"code","34ad6192":"code","01743ef3":"code","d31811fc":"code","dc4333bf":"code","73fa3e1f":"code","596e6536":"code","d8616791":"code","17b356a3":"code","3fd0c0a8":"code","2914515a":"code","bb18bf9d":"code","5f89ce8f":"code","39ba1511":"code","ba16dd2e":"code","084fc646":"code","5c0b9c21":"code","d4816d95":"markdown","274aebe2":"markdown","9f6edfc3":"markdown","45f394ae":"markdown","a8f0e19e":"markdown","d9ca3162":"markdown","7825f4fb":"markdown","a5a7c4fd":"markdown","eea0aec3":"markdown","73fbd572":"markdown","154726c7":"markdown","2fe0dd0f":"markdown","c1c0250c":"markdown","695fb196":"markdown","372bdf3e":"markdown","c520b2b3":"markdown","9151bc62":"markdown","dfeefd4f":"markdown","53ac4649":"markdown","67f68c74":"markdown","0d6fa11c":"markdown","188ebb41":"markdown","30eb2df9":"markdown","995c6897":"markdown","83af0caf":"markdown","e92bc4e4":"markdown","d63c5345":"markdown","9e201f4f":"markdown","ae2e24a3":"markdown","a2cf623f":"markdown","a075f065":"markdown","55b05fc5":"markdown","03954fed":"markdown","c679a14c":"markdown","a9364765":"markdown","9cc06824":"markdown","425a1f09":"markdown","f7412faa":"markdown","0c0d3b27":"markdown","8cd571b3":"markdown","4ce6a139":"markdown","6506641b":"markdown","f3ccca5a":"markdown","56e10e76":"markdown","1c3382aa":"markdown","46263089":"markdown","77998710":"markdown","653b5d58":"markdown","b9bb398c":"markdown","d54d8af4":"markdown","83b13a19":"markdown","d3b6e03a":"markdown","e3224162":"markdown"},"source":{"c5c8ed30":"import sys\n!curl -s https:\/\/course.fast.ai\/setup\/colab | bash\n!git clone https:\/\/github.com\/yabhi0807\/libml1.git \/kaggle\/tmp\/fastai # This is my repo with all the fastai(updated) libraries \nsys.path.append('\/kaggle\/tmp\/fastai')\n!mkdir \/kaggle\/tmp\/data\/\n!ln -s \/kaggle\/tmp\/* \/kaggle\/working\/\n# !wget -O \/kaggle\/tmp\/fastai\/weights.tgz http:\/\/files.fast.ai\/models\/weights.tgz\n# !tar xvfz \/kaggle\/tmp\/fastai\/weights.tgz -C \/kaggle\/tmp\/fastai","7cff911a":"%matplotlib inline\n%reload_ext autoreload\n%autoreload 2","be4a0cfb":"from fastai.structured import *\nfrom fastai.column_data import *\nnp.set_printoptions(threshold=50, edgeitems=20)\n\nPATH='\/kaggle\/tmp\/data\/rossmann\/'","5c5bf6ad":"!mkdir \/kaggle\/tmp\/data\/rossmann\/\n!cp -r ..\/input\/rossmansalesdata\/* \/kaggle\/tmp\/data\/rossmann\/","71e82f28":"table_names = ['train', 'store', 'store_states', 'state_names', \n               'googletrend', 'weather', 'test']","a5f2a217":"%time tables = [pd.read_csv(f'{PATH}{fname}.csv', low_memory=False) for fname in table_names]","a52432fe":"from IPython.display import HTML, display","cadc5726":"for t in tables: display(t.head())","bcb57549":"for t in tables: display(DataFrameSummary(t).summary())","b4934fa3":"train, store, store_states, state_names, googletrend, weather, test = tables","32630f90":"len(train),len(test)","b799abe1":"train.StateHoliday = train.StateHoliday!='0'\ntest.StateHoliday = test.StateHoliday!='0'","a00dfef3":"def join_df(left, right, left_on, right_on=None, suffix='_y'):\n    if right_on is None: right_on = left_on\n    return left.merge(right, how='left', left_on=left_on, right_on=right_on, suffixes=(\"\", suffix))","bc6e8d47":"weather = join_df(weather, state_names, \"file\", \"StateName\")","c180c6ac":"googletrend['Date'] = googletrend.week.str.split(' - ', expand=True)[0]\ngoogletrend['State'] = googletrend.file.str.split('_', expand=True)[2]\ngoogletrend.loc[googletrend.State=='NI', \"State\"] = 'HB,NI'","fe0bb401":"add_datepart(weather, \"Date\", drop=False)\nadd_datepart(googletrend, \"Date\", drop=False)\nadd_datepart(train, \"Date\", drop=False)\nadd_datepart(test, \"Date\", drop=False)","a671620e":"trend_de = googletrend[googletrend.file == 'Rossmann_DE']","2dfccfad":"store = join_df(store, store_states, \"Store\")\nlen(store[store.State.isnull()])","eda80ff5":"joined = join_df(train, store, \"Store\")\njoined_test = join_df(test, store, \"Store\")\nlen(joined[joined.StoreType.isnull()]),len(joined_test[joined_test.StoreType.isnull()])","89db156e":"googletrend.dtypes","405b8ca6":"joined = join_df(joined, googletrend, [\"State\",\"Year\", \"Week\"])\njoined_test = join_df(joined_test, googletrend, [\"State\",\"Year\", \"Week\"])\nlen(joined[joined.trend.isnull()]),len(joined_test[joined_test.trend.isnull()])","3af1adcc":"joined = joined.merge(trend_de, 'left', [\"Year\", \"Week\"], suffixes=('', '_DE'))\njoined_test = joined_test.merge(trend_de, 'left', [\"Year\", \"Week\"], suffixes=('', '_DE'))\nlen(joined[joined.trend_DE.isnull()]),len(joined_test[joined_test.trend_DE.isnull()])","d69178be":"joined = join_df(joined, weather, [\"State\",\"Date\"])\njoined_test = join_df(joined_test, weather, [\"State\",\"Date\"])\nlen(joined[joined.Mean_TemperatureC.isnull()]),len(joined_test[joined_test.Mean_TemperatureC.isnull()])","203b5443":"for df in (joined, joined_test):\n    for c in df.columns:\n        if c.endswith('_y'):\n            print(c)\n            if c in df.columns: df.drop(c, inplace=True, axis=1)","4d69e335":"for df in (joined,joined_test):\n    df['CompetitionOpenSinceYear'] = df.CompetitionOpenSinceYear.fillna(1900).astype(np.int32)\n    df['CompetitionOpenSinceMonth'] = df.CompetitionOpenSinceMonth.fillna(1).astype(np.int32)\n    df['Promo2SinceYear'] = df.Promo2SinceYear.fillna(1900).astype(np.int32)\n    df['Promo2SinceWeek'] = df.Promo2SinceWeek.fillna(1).astype(np.int32)","19c32f50":"for df in (joined,joined_test):\n    df[\"CompetitionOpenSince\"] = pd.to_datetime(dict(year=df.CompetitionOpenSinceYear, \n                                                     month=df.CompetitionOpenSinceMonth, day=15))\n    df[\"CompetitionDaysOpen\"] = df.Date.subtract(df.CompetitionOpenSince).dt.days","4d28e16f":"for df in (joined,joined_test):\n    df.loc[df.CompetitionDaysOpen<0, \"CompetitionDaysOpen\"] = 0\n    df.loc[df.CompetitionOpenSinceYear<1990, \"CompetitionDaysOpen\"] = 0","606c36d8":"for df in (joined,joined_test):\n    df[\"CompetitionMonthsOpen\"] = df[\"CompetitionDaysOpen\"]\/\/30\n    df.loc[df.CompetitionMonthsOpen>24, \"CompetitionMonthsOpen\"] = 24\njoined.CompetitionMonthsOpen.unique()","adb42844":"for df in (joined,joined_test):\n    df[\"Promo2Since\"] = pd.to_datetime(df.apply(lambda x: Week(x.Promo2SinceYear, x.Promo2SinceWeek).monday(), axis=1))\n    df[\"Promo2Days\"] = df.Date.subtract(df[\"Promo2Since\"]).dt.days","a559f79f":"for df in (joined,joined_test):\n    df.loc[df.Promo2Days<0, \"Promo2Days\"] = 0\n    df.loc[df.Promo2SinceYear<1990, \"Promo2Days\"] = 0\n    df[\"Promo2Weeks\"] = df[\"Promo2Days\"]\/\/7\n    df.loc[df.Promo2Weeks<0, \"Promo2Weeks\"] = 0\n    df.loc[df.Promo2Weeks>25, \"Promo2Weeks\"] = 25\n    df.Promo2Weeks.unique()","b5b23d38":"joined.to_feather(f'{PATH}joined')\njoined_test.to_feather(f'{PATH}joined_test')","8da9426d":"def get_elapsed(fld, pre):\n    day1 = np.timedelta64(1, 'D')\n    last_date = np.datetime64()\n    last_store = 0\n    res = []\n\n    for s,v,d in zip(df.Store.values,df[fld].values, df.Date.values): # .values changes the series to numpy array and its much faster(300x) than df.iterrows()\n        if s != last_store:\n            last_date = np.datetime64()\n            last_store = s\n        if v: last_date = d\n        res.append(((d-last_date).astype('timedelta64[D]') \/ day1).astype(int))\n    df[pre+fld] = res","0e563832":"columns = [\"Date\", \"Store\", \"Promo\", \"StateHoliday\", \"SchoolHoliday\"]","2ee6fc38":"#df = train[columns]\ndf = train[columns].append(test[columns]) # along axis = 1","8d985dbb":"fld = 'SchoolHoliday'\ndf = df.sort_values(['Store', 'Date'])\nget_elapsed(fld, 'After')\ndf = df.sort_values(['Store', 'Date'], ascending=[True, False])\nget_elapsed(fld, 'Before')","f3ff62a9":"fld = 'StateHoliday'\ndf = df.sort_values(['Store', 'Date'])\nget_elapsed(fld, 'After')\ndf = df.sort_values(['Store', 'Date'], ascending=[True, False])\nget_elapsed(fld, 'Before')","10f222cc":"fld = 'Promo'\ndf = df.sort_values(['Store', 'Date'])\nget_elapsed(fld, 'After')\ndf = df.sort_values(['Store', 'Date'], ascending=[True, False])\nget_elapsed(fld, 'Before')","c314d557":"df = df.set_index(\"Date\")","1f4340ec":"columns = ['SchoolHoliday', 'StateHoliday', 'Promo']","e32213f5":"for o in ['Before', 'After']:\n    for p in columns:\n        a = o+p\n        df[a] = df[a].fillna(0).astype(int)","41e58b2f":"bwd = df[['Store']+columns].sort_index(ascending=True).groupby(\"Store\").rolling(7, min_periods=1).sum() # moving average","01fa29fa":"fwd = df[['Store']+columns].sort_index(ascending=False).groupby(\"Store\").rolling(7, min_periods=1).sum()","3dd85672":"bwd","fa928f04":"bwd.drop('Store',1,inplace=True)\nbwd.reset_index(inplace=True)","17d363ca":"fwd.drop('Store',1,inplace=True)\nfwd.reset_index(inplace=True)","ec0257df":"df.reset_index(inplace=True)","35d4f159":"df = df.merge(bwd, 'left', ['Date', 'Store'], suffixes=['', '_bw'])\ndf = df.merge(fwd, 'left', ['Date', 'Store'], suffixes=['', '_fw'])","cb719224":"df.drop(columns,1,inplace=True)","ff259099":"df.head()","cad51995":"df.to_feather(f'{PATH}df')","bfe30a43":"df = pd.read_feather(f'{PATH}df')","1a623270":"df[\"Date\"] = pd.to_datetime(df.Date)","224811b9":"df.columns","a012edac":"joined = join_df(joined, df, ['Store', 'Date'])","66e15475":"joined_test = join_df(joined_test, df, ['Store', 'Date'])","ee40d0e6":"joined = joined[joined.Sales!=0]","76a89244":"joined.reset_index(inplace=True)\njoined_test.reset_index(inplace=True)","fc99d8d7":"joined.to_feather(f'{PATH}joined')\njoined_test.to_feather(f'{PATH}joined_test')","10e08801":"joined = pd.read_feather(f'{PATH}joined')\njoined_test = pd.read_feather(f'{PATH}joined_test')","d299a6de":"joined.head().T.head(40)","6c5347b5":"cat_vars = ['Store', 'DayOfWeek', 'Year', 'Month', 'Day', 'StateHoliday', 'CompetitionMonthsOpen',\n    'Promo2Weeks', 'StoreType', 'Assortment', 'PromoInterval', 'CompetitionOpenSinceYear', 'Promo2SinceYear',\n    'State', 'Week', 'Events', 'Promo_fw', 'Promo_bw', 'StateHoliday_fw', 'StateHoliday_bw',\n    'SchoolHoliday_fw', 'SchoolHoliday_bw']\n\ncontin_vars = ['CompetitionDistance', 'Max_TemperatureC', 'Mean_TemperatureC', 'Min_TemperatureC',\n   'Max_Humidity', 'Mean_Humidity', 'Min_Humidity', 'Max_Wind_SpeedKm_h', \n   'Mean_Wind_SpeedKm_h', 'CloudCover', 'trend', 'trend_DE',\n   'AfterStateHoliday', 'BeforeStateHoliday', 'Promo', 'SchoolHoliday']\n\nn = len(joined); n","92fe1e15":"dep = 'Sales'\njoined = joined[cat_vars+contin_vars+[dep, 'Date']].copy()","db23ff7c":"joined_test[dep] = 0\njoined_test = joined_test[cat_vars+contin_vars+[dep, 'Date', 'Id']].copy()","115c7055":"for v in cat_vars: joined[v] = joined[v].astype('category').cat.as_ordered()","4c7a1b10":"apply_cats(joined_test, joined)","3a72f03f":"for v in contin_vars:\n    joined[v] = joined[v].fillna(0).astype('float32')\n    joined_test[v] = joined_test[v].fillna(0).astype('float32')","d7e1cdbd":"idxs = get_cv_idxs(n, val_pct=150000\/n)\njoined_samp = joined.iloc[idxs].set_index(\"Date\")\nsamp_size = len(joined_samp); samp_size","30d46c84":"samp_size = n\njoined_samp = joined.set_index(\"Date\")","3843ec76":"joined_samp.head(2)","24fc498e":"df, y, nas, mapper = proc_df(joined_samp, 'Sales', do_scale=True)# do_scale=True regularizes the data, (input-mean) * std\nyl = np.log(y)","875aee6d":"joined_test = joined_test.set_index(\"Date\")","52e94005":"df_test, _, nas, mapper = proc_df(joined_test, 'Sales', do_scale=True, skip_flds=['Id'],\n                                  mapper=mapper, na_dict=nas)","4755886e":"df.head(2)","a34af7f4":"train_ratio = 0.75\n# train_ratio = 0.9\ntrain_size = int(samp_size * train_ratio); train_size\nval_idx = list(range(train_size, len(df)))","80354a82":"val_idx = np.flatnonzero((df.index<=datetime.datetime(2014,9,17)) & (df.index>=datetime.datetime(2014,8,1)))","a244bda1":"val_idx=[0]","8b4e12aa":"def inv_y(a, rf=False): return np.exp(a.cpu() if not rf else a)\n\ndef exp_rmspe(y_pred, targ, rf=False):\n    if not rf:\n        y_pred=y_pred.cpu()\n        targ=targ.cpu()\n    targ = inv_y(targ, rf)\n    pct_var = (targ - inv_y(y_pred, rf))\/targ\n    return math.sqrt((pct_var**2).mean())\n\nmax_log_y = np.max(yl)\ny_range = (0, max_log_y*1.2)","150e032e":"md = ColumnarModelData.from_data_frame(PATH, val_idx, df, yl.astype(np.float32), cat_flds=cat_vars, bs=128, test_df=df_test)","f1f60292":"cat_sz = [(c, len(joined_samp[c].cat.categories)+1) for c in cat_vars]","3cb74fa1":"cat_sz","6c149947":"emb_szs = [(c, min(50, (c+1)\/\/2)) for _,c in cat_sz]","0d8bc29c":"emb_szs","d68694de":"m = md.get_learner(emb_szs, len(df.columns)-len(cat_vars), 0.04, 1, [1000,500], [0.001,0.01], y_range=y_range)\nm.summary()","19bdd8b0":"lr = 1e-3\nm.lr_find()","28bb4c2e":"m.sched.plot(100)","72edd125":"m = md.get_learner(emb_szs, len(df.columns)-len(cat_vars), 0.04, 1, [1000,500], [0.001,0.01], y_range=y_range)\nlr = 1e-3","9af1a8a4":"m.fit(lr, 3, metrics=[exp_rmspe])","cf699996":"m.fit(lr, 5, metrics=[exp_rmspe], cycle_len=1)","7bd173d4":"m.fit(lr, 2, metrics=[exp_rmspe], cycle_len=4)","b4d0ddb0":"m = md.get_learner(emb_szs, len(df.columns)-len(cat_vars), 0.04, 1, [1000,500], [0.001,0.01], y_range=y_range)\nlr = 1e-3","c7921324":"m.fit(lr, 1, metrics=[exp_rmspe])","ff9d83a6":"m.fit(lr, 3, metrics=[exp_rmspe])","f1aa908e":"m.fit(lr, 3, metrics=[exp_rmspe], cycle_len=1)","cd326575":"m = md.get_learner(emb_szs, len(df.columns)-len(cat_vars), 0.04, 1, [1000,500], [0.001,0.01], y_range=y_range)\nlr = 1e-3","34ad6192":"m.fit(lr, 3, metrics=[exp_rmspe])","01743ef3":"m.fit(lr, 3, metrics=[exp_rmspe], cycle_len=1)","d31811fc":"m.save('val0')","dc4333bf":"m.load('val0')","73fa3e1f":"x,y=m.predict_with_targs()","596e6536":"exp_rmspe(x,y)","d8616791":"pred_test=m.predict(True)","17b356a3":"pred_test = np.exp(pred_test)","3fd0c0a8":"joined_test['Sales']=pred_test","2914515a":"csv_fn=f'{PATH}tmp\/sub.csv'","bb18bf9d":"joined_test[['Id','Sales']].to_csv(csv_fn, index=False)","5f89ce8f":"FileLink(csv_fn)","39ba1511":"from sklearn.ensemble import RandomForestRegressor","ba16dd2e":"((val,trn), (y_val,y_trn)) = split_by_idx(val_idx, df.values, yl)","084fc646":"m = RandomForestRegressor(n_estimators=40, max_features=0.99, min_samples_leaf=2, n_jobs=-1, oob_score=True)\nm.fit(trn, y_trn);","5c0b9c21":"preds = m.predict(val)\nm.score(trn, y_trn), m.score(val, y_val), m.oob_score_, exp_rmspe(preds, y_val, True)","d4816d95":"### Importing Libraries","274aebe2":"This is very representative of a typical industry dataset.\n\nThe following returns summarized aggregate information to each table accross each field.","9f6edfc3":"Next we'll fill in missing values to avoid complications with `NA`'s. `NA` (not available) is how Pandas indicates missing values; many models have problems when missing values are present, so it's always important to think about how to deal with them. In these cases, we are picking an arbitrary *signal value* that doesn't otherwise appear in the data.","45f394ae":"Next we'll demonstrate window functions in pandas to calculate rolling quantities.\n\nHere we're sorting by date (`sort_index()`) and counting the number of events of interest (`sum()`) defined in `columns` in the following week (`rolling()`), grouped by Store (`groupby()`). We do the same in the opposite direction.","a8f0e19e":"Now we can outer join all of our data into a single dataframe. Recall that in outer joins everytime a value in the joining field on the left table does not have a corresponding value on the right table, the corresponding row in the new table has Null values for all right table fields. One way to check that all records are consistent and complete is to check for Null values post-join, as we do here.\n\n*Aside*: Why note just do an inner join?\nIf you are assuming that all records are complete and match on the field you desire, an inner join will do the same thing as an outer join. However, in the event you are wrong or a mistake is made, an outer join followed by a null-check will catch it. (Comparing before\/after # of rows for inner join is equivalent, but requires keeping track of before\/after row #'s. Outer join is easier.)","d9ca3162":"## Data Cleaning \/ Feature Engineering","7825f4fb":"We turn state Holidays to booleans, to make them more convenient for modeling. We can do calculations on pandas fields using notation very similar (often identical) to numpy.","a5a7c4fd":"In time series data, cross-validation is not random. Instead, our holdout data is generally the most recent data, as it would be in real application. This issue is discussed in detail in [this post](http:\/\/www.fast.ai\/2017\/11\/13\/validation-sets\/) on our web site.\n\nOne approach is to take the last 25% of rows (sorted by date) as our validation set.","eea0aec3":"We can create a ModelData object directly from out data frame.","73fbd572":"We'll be using the popular data manipulation framework `pandas`. Among other things, pandas allows you to manipulate tables\/data frames in python as one would in a database.\n\nWe're going to go ahead and load all of our csv's as dataframes into the list `tables`.","154726c7":"Next we'll extract features \"CompetitionOpenSince\" and \"CompetitionDaysOpen\". Note the use of `apply()` in mapping a function across dataframe values.","2fe0dd0f":"We'll be applying this to a subset of columns:","c1c0250c":"We'll back this up as well.","695fb196":"We're going to set the active index to Date.","372bdf3e":"### Sample","c520b2b3":"We're going to run on a sample.","9151bc62":"We're ready to put together our models.\n\nRoot-mean-squared percent error is the metric Kaggle used for this competition.","dfeefd4f":"Same process for Promo dates.","53ac4649":"We can use `head()` to get a quick look at the contents of each table:\n* train: Contains store information on a daily basis, tracks things like sales, customers, whether that day was a holdiay, etc.\n* store: general info about the store including competition, etc.\n* store_states: maps store to state it is in\n* state_names: Maps state abbreviations to names\n* googletrend: trend data for particular week\/state\n* weather: weather conditions for each state\n* test: Same as training table, w\/o sales and customers\n","67f68c74":"It's usually a good idea to back up large tables of extracted \/ wrangled features before you join them onto another one, that way you can go back to it easily if you need to make changes to it.","0d6fa11c":"Next we want to drop the Store indices grouped together in the window function.\n\nOften in pandas, there is an option to do this in place. This is time and memory efficient when working with large datasets.","188ebb41":"Then set null values from elapsed field calculations to 0.","30eb2df9":"## DL","995c6897":"The authors also removed all instances where the store had zero sale \/ was closed. We speculate that this may have cost them a higher standing in the competition. One reason this may be the case is that a little exploratory data analysis reveals that there are often periods where stores are closed, typically for refurbishment. Before and after these periods, there are naturally spikes in sales that one might expect. By ommitting this data from their training, the authors gave up the ability to leverage information about these periods to predict this otherwise volatile behavior.","83af0caf":"## Durations","e92bc4e4":"## Create features","d63c5345":"## Create datasets","9e201f4f":"We now have our final set of engineered features.\n\nWhile these steps were explicitly outlined in the paper, these are all fairly typical feature engineering steps for dealing with time series data and are practical in any similar setting.","ae2e24a3":"## RF","a2cf623f":"The following extracts particular date fields from a complete datetime for the purpose of constructing categoricals.\n\nYou should *always* consider this feature extraction step when working with date-time. Without expanding your date-time into these additional fields, you can't capture any trend\/cyclical behavior as a function of time at any of these granularities. We'll add to every table with a date field.","a075f065":"This notebook contains an implementation of the third place result in the Rossman Kaggle competition as detailed in Guo\/Berkhahn's [Entity Embeddings of Categorical Variables](https:\/\/arxiv.org\/abs\/1604.06737).\n\nThe motivation behind exploring this architecture is it's relevance to real-world application. Most data used for decision making day-to-day in industry is structured and\/or time-series data. Here we explore the end-to-end process of using neural networks with practical structured data problems.","55b05fc5":"We'll replace some erroneous \/ outlying data.","03954fed":"We use the *cardinality* of each variable (that is, its number of unique values) to decide how large to make its *embeddings*. Each level will be associated with a vector with length defined as below.","c679a14c":"Feature Space:\n* train: Training set provided by competition\n* store: List of stores\n* store_states: mapping of store to the German state they are in\n* List of German state names\n* googletrend: trend of certain google keywords over time, found by users to correlate well w\/ given data\n* weather: weather\n* test: testing set","a9364765":"Now that we've engineered all our features, we need to convert to input compatible with a neural network.\n\nThis includes converting categorical variables into contiguous integers or one-hot encodings, normalizing continuous features to standard normal, etc...","9cc06824":"In addition to the provided data, we will be using external datasets put together by participants in the Kaggle competition. You can download all of them [here](http:\/\/files.fast.ai\/part2\/lesson14\/rossmann.tgz).\n\nFor completeness, the implementation used to put them together is included below.","425a1f09":"The Google trends data has a special category for the whole of Germany - we'll pull that out so we can use it explicitly.","f7412faa":"As a structured data problem, we necessarily have to go through all the cleaning and feature engineering, even though we're using a neural network.","0c0d3b27":"Some categorical variables have a lot more levels than others. Store, in particular, has over a thousand!","8cd571b3":"# Structured and time series data","4ce6a139":"Now we'll merge these values onto the df.","6506641b":"It is common when working with time series data to extract data that explains relationships across rows as opposed to columns, e.g.:\n* Running averages\n* Time until next event\n* Time since last event\n\nThis is often difficult to do with most table manipulation frameworks, since they are designed to work with relationships across columns. As such, we've created a class to handle this type of data.\n\nWe'll define a function `get_elapsed` for cumulative counting across a sorted dataframe. Given a particular field `fld` to monitor, this function will start tracking time since the last occurrence of that field. When the field is seen again, the counter is set to zero.\n\nUpon initialization, this will result in datetime na's until the field is encountered. This is reset every time a new store is seen. We'll see how to use this shortly.","f3ccca5a":"### Test","56e10e76":"In pandas you can add new columns to a dataframe by simply defining it. We'll do this for googletrends by extracting dates and state names from the given data and adding those columns.\n\nWe're also going to replace all instances of state name 'NI' to match the usage in the rest of the data: 'HB,NI'. This is a good opportunity to highlight pandas indexing. We can use `.loc[rows, cols]` to select a list of rows and a list of columns from the dataframe. In this case, we're selecting rows w\/ statename 'NI' by using a boolean list `googletrend.State=='NI'` and selecting \"State\".","1c3382aa":"We can now process our data...","46263089":"Let's walk through an example.\n\nSay we're looking at School Holiday. We'll first sort by Store, then Date, and then call `add_elapsed('SchoolHoliday', 'After')`:\nThis will apply to each row with School Holiday:\n* A applied to every row of the dataframe in order of store and date\n* Will add to the dataframe the days since seeing a School Holiday\n* If we sort in the other direction, this will count the days until another holiday.","77998710":"We'll do this for two more fields.","653b5d58":"We add \"CompetitionMonthsOpen\" field, limiting the maximum to 2 years to limit number of unique categories.","b9bb398c":"`join_df` is a function for joining tables on specific fields. By default, we'll be doing a left outer join of `right` on the `left` argument using the given fields for each table.\n\nPandas does joins using the `merge` method. The `suffixes` argument describes the naming convention for duplicate fields. We've elected to leave the duplicate field names on the left untouched, and append a \"\\_y\" to those on the right.","d54d8af4":"An even better option for picking a validation set is using the exact same length of time period as the test set uses - this is implemented here:","83b13a19":"### All","d3b6e03a":"Join weather\/state names.","e3224162":"To run on the full dataset, use this instead:"}}