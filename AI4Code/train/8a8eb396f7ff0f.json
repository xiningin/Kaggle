{"cell_type":{"f46ad884":"code","023d915c":"code","51e60671":"code","7c01ba3c":"code","2ef2592e":"code","68351f07":"code","cc3bce68":"code","873c4302":"code","99a07f19":"code","d95e504a":"code","f60f4d05":"code","12ad1016":"code","1c2b942f":"code","1526c933":"code","8be8b66b":"code","3796a595":"code","6453791b":"code","d2df66bc":"markdown","cb56b888":"markdown","390c1d46":"markdown","0272e0e1":"markdown","6235b31d":"markdown","15ef6ede":"markdown","3f0a9ce6":"markdown"},"source":{"f46ad884":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","023d915c":"# Import Packages\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np \nimport pandas as pd \nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt\n\n#importing packages for the prediction of time-series data\nfrom statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\nimport statsmodels.formula.api as smf\n\nfrom sklearn.metrics import mean_squared_error\n\n%matplotlib inline","51e60671":"df = pd.read_csv('..\/input\/bitcoin_price.csv', parse_dates=['Date'])\ndf.head(3)","7c01ba3c":"print (df.describe())\nprint (\"=============================================================\")\nprint (df.dtypes)","2ef2592e":"df1 = df[['Date','Close']]\ndf1.head(3)","68351f07":"# Setting the Date as Index\ndf_ts = df1.set_index('Date')\ndf_ts.sort_index(inplace=True)\nprint (type(df_ts))\nprint (df_ts.head(3))\nprint (\"========================\")\nprint (df_ts.tail(3))","cc3bce68":"# Basic plot \ndf_ts.plot()","873c4302":"# Dickey Fuller Test Function\ndef test_stationarity(timeseries):\n    # Perform Dickey-Fuller test:\n    from statsmodels.tsa.stattools import adfuller\n    print('Results of Dickey-Fuller Test:')\n    print (\"==============================================\")\n    \n    dftest = adfuller(timeseries, autolag='AIC')\n    \n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#lags Used', 'Number of Observations Used'])\n    \n    for key, value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    \n    print(dfoutput)\n    ","99a07f19":"# Stationarity Check - Lets do a quick check on Stationarity with Dickey Fuller Test \n# Convert the DF to series first\nts = df_ts['Close']\ntest_stationarity(ts)\n","d95e504a":"# Let's plot the 12-Month Moving Rolling Mean & Variance and find Insights\n# Rolling Statistics\nrolmean = ts.rolling(window=12).mean()\nrolvar = ts.rolling(window=12).std()\n\nplt.plot(ts, label='Original')\nplt.plot(rolmean, label='Rolling Mean')\nplt.plot(rolvar, label='Rolling Standard Variance')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","f60f4d05":"# Lets do a quick vanila decomposition to see any trend seasonality etc in the ts\ndecomposition = sm.tsa.seasonal_decompose(ts, model='multiplicative')\n\nfig = decomposition.plot()\nfig.set_figwidth(12)\nfig.set_figheight(8)\nfig.suptitle('Decomposition of multiplicative time series')\nplt.show()","12ad1016":"# Lets Resample the data by Month and analyze again\ndf_ts_m = df_ts.resample('M').mean()\nprint (type(df_ts_m))\nprint (df_ts_m.head(3))","1c2b942f":"tsm = df_ts_m['Close']\nprint (type(tsm))","1526c933":"# Stationarity Check\ntest_stationarity(tsm)","8be8b66b":"# Lets do a quick vanila decomposition to see any trend seasonality etc in the ts\ndecomposition = sm.tsa.seasonal_decompose(tsm, model='multiplicative')\n\nfig = decomposition.plot()\nfig.set_figwidth(12)\nfig.set_figheight(8)\nfig.suptitle('Decomposition of multiplicative time series')\nplt.show()","3796a595":"# lets try to make the \"tsm\" Stationary\n\ntsmlog = np.log10(tsm)\ntsmlog.dropna(inplace=True)\n\ntsmlogdiff = tsmlog.diff(periods=1)\ntsmlogdiff.dropna(inplace=True)\n# Stationarity Check\ntest_stationarity(tsmlogdiff)","6453791b":"# Let's plot ACF & PACF graphs to visualize AR & MA components\n\nfig, axes = plt.subplots(1, 2)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nsmt.graphics.plot_acf(tsmlogdiff, lags=30, ax=axes[0], alpha=0.5)\nsmt.graphics.plot_pacf(tsmlogdiff, lags=30, ax=axes[1], alpha=0.5)\nplt.tight_layout()","d2df66bc":"**References to** \n\nhttps:\/\/www.kaggle.com\/sandipdatta\/time-series-basic-analysis\n\n","cb56b888":"\u0414\u043e\u0437\u0432\u043e\u043b\u044f\u0454 \u0432\u0456\u0434\u043e\u043a\u0440\u0435\u043c\u0438\u0442\u0438 \u0446\u0456\u043d\u0438 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u0456 \u0437\u0430\u043a\u0440\u0438\u0442\u0442\u044f, \u0449\u043e\u0431 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u0457\u0445 \u043e\u043a\u0440\u0435\u043c\u043e","390c1d46":"** \u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a **\n\n\u0422\u0435\u043f\u0435\u0440 \u0422\u0435\u0441\u0442\u043e\u0432\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043c\u0435\u043d\u0448\u0430, \u043d\u0456\u0436 \u041a\u0440\u0438\u0442\u0438\u0447\u043d\u0430 \u0446\u0456\u043d\u043d\u0456\u0441\u0442\u044c - \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0442\u043e\u0433\u043e, \u0449\u043e \u0447\u0430\u0441\u043e\u0432\u0438\u0439 \u0440\u044f\u0434 \u0454 \u043d\u0435\u0440\u0443\u0445\u043e\u043c\u0438\u043c.\n\u041c\u0438 \u043c\u043e\u0436\u0435\u043c\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0439\u043e\u0433\u043e \u0437\u0430\u0440\u0430\u0437 \u0443 \u0442\u0430\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0443\u0432\u0430\u043d\u043d\u044f, \u044f\u043a ARIMA.","0272e0e1":"** \u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a **\n\n\u0421\u0435\u0437\u043e\u043d\u043d\u0438\u0439 \u0433\u0440\u0430\u0444\u0456\u043a \u0437\u0430\u043d\u0430\u0434\u0442\u043e \u0441\u043a\u043b\u0430\u0434\u0435\u043d\u0438\u0439 - \u0446\u0435 \u0437\u0430\u043b\u0438\u0448\u0430\u0454 \u043d\u0430\u0441 \u0434\u043e\u0441\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u043d\u0438\u043c\u0438, \u0449\u043e\u0431 \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u0438 \u0449\u043e\u0441\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0435. \u0426\u0435 \u0431\u0443\u043b\u043e \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0434\u043e \u0440\u0435\u0447\u0456, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u043c\u0438 \u0430\u043d\u0430\u043b\u0456\u0437\u0443\u0454\u043c\u043e \u0449\u043e\u0434\u0435\u043d\u043d\u0456 \u0434\u0430\u043d\u0456.\n\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043f\u0440\u043e\u0431\u0443\u0454\u043c\u043e \u0449\u043e\u043c\u0456\u0441\u044f\u0447\u043d\u0438\u0439 \u043f\u0456\u0434\u0445\u0456\u0434","6235b31d":"** \u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a **\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0422\u0435\u0441\u0442\u043e\u0432\u043e\u0457 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043d\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0432\u0438\u0449\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0422\u043e\u043c\u0443 \u043c\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u043c\u043e \u0432\u0456\u0434\u043a\u0438\u043d\u0443\u0442\u0438 \u043d\u0443\u043b\u044c\u043e\u0432\u0443 \u0433\u0456\u043f\u043e\u0442\u0435\u0437\u0443.\n\n\u041e\u0442\u0436\u0435, \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u043d\u043e (\u0456 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0437 \u0441\u044e\u0436\u0435\u0442\u0443) \u0447\u0430\u0441\u043e\u0432\u0438\u0439 \u0440\u044f\u0434 \u0454 \u043d\u0435\u0441\u0442\u0430\u0446\u0456\u043e\u043d\u0430\u0440\u043d\u0438\u043c\n","15ef6ede":"** \u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a **\n\n\u0426\u0435 \u043c\u0438 \u0431\u0430\u0447\u0438\u043c\u043e \u0434\u0435\u0449\u043e \u0447\u0456\u0442\u043a\u0456\u0448\u0435 \u043d\u0430 \u0433\u0440\u0430\u0444\u0456\u043a\u0443 \u00ab\u0421\u0435\u0437\u043e\u043d\u043d\u0456\u0441\u0442\u044c\u00bb","3f0a9ce6":"**Initial Inspections**"}}