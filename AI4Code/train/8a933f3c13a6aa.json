{"cell_type":{"80678440":"code","38f7a71c":"code","28a8e94d":"code","01b02609":"code","15fadfcb":"code","531a4f48":"code","ec046e09":"code","f48980c4":"code","bbd16c2a":"code","acd79218":"code","ed490058":"code","ec65af61":"code","244064be":"code","5df28609":"code","5daf61ea":"code","f71aa5c6":"code","d877d6d4":"code","bf1c67ef":"code","0a78d7ad":"code","0210cddc":"code","bdfd3650":"code","332814dc":"code","7cd52e9c":"code","daa0db95":"code","70f7eecb":"code","149e6b5c":"code","3d4ebd35":"code","4b7414b9":"code","c2312fa0":"code","d9094a49":"code","e8441acb":"code","50229dde":"code","acf76736":"code","015ff1be":"code","835b48fd":"code","5059b564":"code","51e1d52a":"code","17ca0b9f":"code","48f49e62":"code","68dcee66":"markdown","90248f96":"markdown","b05e5e39":"markdown","f5be0c06":"markdown","1226aae6":"markdown","eca88bb3":"markdown","5a51cf46":"markdown","6d8213d5":"markdown","2283d299":"markdown","f5ad691d":"markdown","c2ec1e66":"markdown","9209027e":"markdown","16a07c77":"markdown","ed5540a8":"markdown","f3aea817":"markdown"},"source":{"80678440":"%cd ..\nfrom google.colab import drive\ndrive.mount('\/content\/gdrive')","38f7a71c":"# define helper functions\ndef imShow(path):\n  import cv2\n  import matplotlib.pyplot as plt\n  %matplotlib inline\n\n  image = cv2.imread(path)\n  height, width = image.shape[:2]\n  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)\n\n  fig = plt.gcf()\n  fig.set_size_inches(18, 10)\n  plt.axis(\"off\")\n  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))\n  plt.show()\n\n# use this to upload files\ndef upload():\n  from google.colab import files\n  uploaded = files.upload() \n  for name, data in uploaded.items():\n    with open(name, 'wb') as f:\n      f.write(data)\n      print ('saved file', name)\n\n# use this to download a file  \ndef download(path):\n  from google.colab import files\n  files.download(path)","28a8e94d":"# clone darknet repository\n!git clone https:\/\/github.com\/AlexeyAB\/darknet","01b02609":"# change makefile to have GPU and OPENCV enabled\n%cd darknet\n!sed -i 's\/OPENCV=0\/OPENCV=1\/' Makefile\n!sed -i 's\/GPU=0\/GPU=1\/' Makefile\n!sed -i 's\/CUDNN=0\/CUDNN=1\/' Makefile\n!sed -i 's\/CUDNN_HALF=0\/CUDNN_HALF=1\/' Makefile","15fadfcb":"# verify CUDA\n!\/usr\/local\/cuda\/bin\/nvcc --version","531a4f48":"# make darknet (builds darknet so that you can then use the darknet executable file to run or train object detectors)\n!make","ec046e09":"!wget https:\/\/github.com\/AlexeyAB\/darknet\/releases\/download\/darknet_yolo_v3_optimal\/yolov4.weights","f48980c4":"# run darknet detection on test images\n!.\/darknet detector test cfg\/coco.data cfg\/yolov4.cfg yolov4.weights data\/person.jpg","bbd16c2a":"# show image using our helper function\nimShow('predictions.jpg')","acd79218":"# this creates a symbolic link so that now the path \/content\/gdrive\/My\\ Drive\/ is equal to \/mydrive\n!ln -s \/content\/gdrive\/My\\ Drive\/ \/mydrive\n!ls \/mydrive","ed490058":"# cd back into the darknet folder to run detections\n%cd darknet","ec65af61":"# below folder where stored all files in G-Drive\n!ls \/mydrive\/yolov4","244064be":"# copy both zip train\/test into the root directory of the Colab VM\n!cp \/mydrive\/yolov4\/obj.zip ..\/\n!cp \/mydrive\/yolov4\/test.zip ..\/","5df28609":"# unzip the datasets and their contents so they are now in \/darknet\/data\/ folder\n!unzip ..\/obj.zip -d data\/\n!unzip ..\/test.zip -d data\/","5daf61ea":"# upload the custom .cfg back to cloud VM from Google Drive\n!cp \/mydrive\/yolov4\/yolov4-obj.cfg .\/cfg","f71aa5c6":"# upload the obj.names and obj.data files to cloud VM from Google Drive\n!cp \/mydrive\/yolov4\/obj.names .\/data\n!cp \/mydrive\/yolov4\/obj.data  .\/data","d877d6d4":"# upload the generate_train.py and generate_test.py script to cloud VM from Google Drive\n!cp \/mydrive\/yolov4\/generate_train.py .\/\n!cp \/mydrive\/yolov4\/generate_test.py .\/","bf1c67ef":"!python generate_train.py\n!python generate_test.py","0a78d7ad":"# verify that the newly generated train.txt and test.txt can be seen in our darknet\/data folder\n!ls data\/","0210cddc":"!wget https:\/\/github.com\/AlexeyAB\/darknet\/releases\/download\/darknet_yolo_v3_optimal\/yolov4.conv.137","bdfd3650":"# train your custom detector! (uncomment %%capture below if you run into memory issues or your Colab is crashing)\n#%%capture\n#!.\/darknet detector train data\/obj.data cfg\/yolov4-obj.cfg yolov4.conv.137 -dont_show -map","332814dc":"# show chart.png of how custom object detector did with training\n#imShow('chart.png')","7cd52e9c":"# kick off training from where it last saved\n!.\/darknet detector train data\/obj.data cfg\/yolov4-obj.cfg \/mydrive\/yolov4\/backup\/yolov4-obj_last.weights -dont_show","daa0db95":"imShow('chart.png')","70f7eecb":"!.\/darknet detector map data\/obj.data cfg\/yolov4-obj.cfg \/mydrive\/yolov4\/backup\/yolov4-obj_1000.weights","149e6b5c":"# need to set our custom cfg to test mode \n%cd cfg\n!sed -i 's\/batch=64\/batch=1\/' yolov4-obj.cfg\n!sed -i 's\/subdivisions=16\/subdivisions=1\/' yolov4-obj.cfg\n%cd ..","3d4ebd35":"# run our custom detector with this command (upload an image to your google drive to test, thresh flag sets accuracy that detection must be in order to show it)\n!.\/darknet detector test data\/obj.data cfg\/yolov4-obj.cfg \/mydrive\/yolov4\/backup\/yolov4-obj_last.weights \/mydrive\/cars\/pg.jpg -thresh 0.3\nimShow('predictions.jpg')","4b7414b9":"### Mount Google drive\n%cd ..\nfrom google.colab import drive\ndrive.mount('\/content\/gdrive')","c2312fa0":"# define helper functions\ndef imShow(path):\n  import cv2\n  import matplotlib.pyplot as plt\n  %matplotlib inline\n\n  image = cv2.imread(path)\n  height, width = image.shape[:2]\n  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)\n\n  fig = plt.gcf()\n  fig.set_size_inches(18, 10)\n  plt.axis(\"off\")\n  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))\n  plt.show()\n\n# use this to upload files\ndef upload():\n  from google.colab import files\n  uploaded = files.upload() \n  for name, data in uploaded.items():\n    with open(name, 'wb') as f:\n      f.write(data)\n      print ('saved file', name)\n\n# use this to download a file  \ndef download(path):\n  from google.colab import files\n  files.download(path)","d9094a49":"# clone darknet repository\n!git clone https:\/\/github.com\/AlexeyAB\/darknet","e8441acb":"# change makefile to have GPU and OPENCV enabled\n%cd darknet\n!sed -i 's\/OPENCV=0\/OPENCV=1\/' Makefile\n!sed -i 's\/GPU=0\/GPU=1\/' Makefile\n!sed -i 's\/CUDNN=0\/CUDNN=1\/' Makefile\n!sed -i 's\/CUDNN_HALF=0\/CUDNN_HALF=1\/' Makefile","50229dde":"# verify CUDA\n!\/usr\/local\/cuda\/bin\/nvcc --version","acf76736":"# make darknet (builds darknet so that you can then use the darknet executable file to run or train object detectors)\n!make","015ff1be":"# cd back into the darknet folder to run detections\n%cd darknet","835b48fd":"# upload the custom .cfg back to cloud VM from Google Drive\n!cp \/mydrive\/yolov4\/yolov4-obj.cfg .\/cfg","5059b564":"#copy obj names and data filt to VM colab\n!cp \/mydrive\/yolov4\/obj.names .\/data\n!cp \/mydrive\/yolov4\/obj.data  .\/data","51e1d52a":"# down load weights for the custom form the pretrained models, its saved on backup folder , the same folder contain another file 'best weights' , whcih also we can use instead of 1000_weights\n!.\/darknet detector map data\/obj.data cfg\/yolov4-obj.cfg \/mydrive\/yolov4\/backup\/yolov4-obj_1000.weights","17ca0b9f":"# to set our custom cfg to test mode \n%cd cfg\n!sed -i 's\/batch=64\/batch=1\/' yolov4-obj.cfg\n!sed -i 's\/subdivisions=16\/subdivisions=1\/' yolov4-obj.cfg\n%cd ..","48f49e62":"# run our custom detector with this command (upload an image to your google drive to test, thresh flag sets accuracy that detection must be in order to show it)\n!.\/darknet detector test data\/obj.data cfg\/yolov4-obj.cfg \/mydrive\/yolov4\/backup\/yolov4-obj_last.weights \/mydrive\/cars\/pg.jpg -thresh 0.3\nimShow('predictions.jpg')","68dcee66":"# Step 5: Run a default Detections with Darknet and YOLOv4!\n","90248f96":"\n\nTo kick off training from our last saved weights file so that we don't have to restart! WOOHOO! Just run the following command but with your backup location.\n```\n!.\/darknet detector train data\/obj.data cfg\/yolov4-obj.cfg \/mydrive\/yolov4\/backup\/yolov4-obj_last.weights -dont_show\n```","b05e5e39":"#Train YOLOv4 for Custom Object Detection\n","f5be0c06":"# Step 1: Cloning & Building Darknet from Alexey's Yolo repository","1226aae6":"#  Configuring Files\n\n","eca88bb3":"## 2) obj.names and obj.data \n","5a51cf46":"#  Run Your Custom Object Detector!!!\n\n","6d8213d5":"# Step 0: Define Helper Functions for visulalization","2283d299":"#  Download pre-trained weights for the convolutional layers.\n","f5ad691d":"# Step 2: Download pre-trained YOLOv4 weights","c2ec1e66":"## 1) Cfg File\n","9209027e":"# Run Your Custom Object Detector after restarting","16a07c77":"## Generating train.txt and test.txt\n","ed5540a8":"# Checking the Mean Average Precision (mAP) of Your Model\n","f3aea817":"#  Train Your Custom Object Detector!\n\n```\nfunction ClickConnect(){\nconsole.log(\"Working\"); \ndocument\n  .querySelector('#top-toolbar > colab-connect-button')\n  .shadowRoot.querySelector('#connect')\n  .click() \n}\nsetInterval(ClickConnect,60000)\n```\n"}}