{"cell_type":{"edd70c1a":"code","5978d020":"code","8dc7a8ab":"code","02bbd21a":"code","bc3180a7":"code","0b8e98d3":"code","e913f987":"code","08c08ba5":"code","01d26f73":"code","f8931d4f":"code","8a0c3521":"code","58d6f622":"code","861b55f6":"code","032b1dcf":"code","aa59eb72":"code","22611a65":"code","c56707ee":"code","d81e9216":"code","fa54b560":"code","eec418e2":"code","d435214e":"code","77b9d930":"code","00db15ee":"code","4715cdb4":"code","1262859e":"code","d539752c":"code","7b40d0f7":"code","88b3aa87":"code","7de54cf8":"code","b409ff90":"code","49b45cb4":"code","721a0ee6":"code","42d1ee3b":"markdown","e06eba8c":"markdown","131e2879":"markdown","7637bc06":"markdown"},"source":{"edd70c1a":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","5978d020":"data0 = pd.read_csv(\"..\/input\/hepatitis-c-dataset\/HepatitisCdata.csv\")\ndata0[0:5].T","8dc7a8ab":"data0.info()","02bbd21a":"data0=data0.drop('Unnamed: 0',axis=1)\ndata0['Sex']=data0['Sex'].map({'m':1,'f':0})","bc3180a7":"Name=data0['Category'].unique()\nprint(Name)","0b8e98d3":"data0['Category'].value_counts()","e913f987":"N=[]\nfor i in range(5):\n    N+=[i]\n    \nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","08c08ba5":"print(data0.columns.to_list())","01d26f73":"target=['Category']\ndata0['Category']=data0['Category'].map(normal_mapping)\ndatay=data0['Category']\ndatax=data0.drop('Category',axis=1)","f8931d4f":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","8a0c3521":"n=len(data0)\nM=[]\nfor i in range(n):\n    M+=[i]\nrandom.shuffle(M)","58d6f622":"trainX=datax.loc[M[0:(n\/\/4)*3]]\ntrainY=datay.loc[M[0:(n\/\/4)*3]]\ntestX=datax.loc[M[(n\/\/4)*3:]]\ntestY=datay.loc[M[(n\/\/4)*3:]]","861b55f6":"print(trainX.shape)\nprint(testX.shape)","032b1dcf":"df_columns = list(datax.columns)\nprint(df_columns)","aa59eb72":"train_df=trainX\ntest_df=testX","22611a65":"train_df.columns=df_columns\ntest_df.columns=df_columns","c56707ee":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","d81e9216":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","fa54b560":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","eec418e2":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","d435214e":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","77b9d930":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","00db15ee":"y = trainY\nprint(y.shape)\nydf=pd.DataFrame(y)\nydf","4715cdb4":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+target[i],fontsize=12)\n    ax.set_ylabel('train_y '+target[i],fontsize=12)\n    ax.scatter(oof,y)","1262859e":"print(target)","d539752c":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","7b40d0f7":"pred1=[]\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","88b3aa87":"data0['Category']=data0['Category'].map(reverse_mapping)\ndata0[['AST','Category']].groupby('Category').agg(['mean','max','min'])","7de54cf8":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1=np.mean(pred0,axis=0)\npred2=pd.Series(pred1).apply(lambda x:round(x))","b409ff90":"PRED=list(pred2)\nANS=list(testY)\nprint(PRED[0:20])\nprint(ANS[0:20])","49b45cb4":"accuracy = accuracy_score(ANS,PRED)\nprint(accuracy)","721a0ee6":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(pred1, label='Test Predict', ax=ax, color='black')\nsns.histplot(oof, label='Train Predict', ax=ax, color='C1')\nax.legend()\nax.grid()","42d1ee3b":"# Visualize Importance and Predict","e06eba8c":"# Model","131e2879":"# Target setting","7637bc06":"# Data preparation"}}