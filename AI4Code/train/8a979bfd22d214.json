{"cell_type":{"dee18db7":"code","93028cab":"code","b65649ff":"code","c8208424":"code","58a27c4f":"code","29bd878c":"code","aff1e232":"code","756f1bfc":"code","caa40845":"code","5b4e1436":"code","6e9bbcc3":"code","793910d7":"code","dda729ae":"code","0d12185c":"code","03da07f8":"code","f36ce910":"code","0ac3f777":"code","8bd67f2d":"code","3ccf8f8c":"code","f81d85e1":"code","76b6e259":"code","31431441":"code","7c6eb391":"code","72f60a6a":"code","1c5be9ca":"code","302dacd8":"code","d0f8d5d4":"code","00ad4264":"code","4ad18574":"code","e046cd1d":"code","6f7c8d2c":"code","5d9db4bf":"code","1830396d":"code","b1b1f9c9":"code","559af580":"code","413667fb":"code","55685782":"code","2697d284":"code","070a6b68":"code","0cf4b3b1":"code","1d3a7e1e":"code","3778463f":"code","2e33f7c2":"code","68841b7a":"code","2ee93586":"code","6f450ad6":"code","be573671":"code","4c889976":"code","74866de1":"code","38a73280":"code","676db6c4":"code","7bca626c":"code","49a10f53":"code","e2bda240":"code","2e6bb88c":"code","072b292b":"code","fc7279a2":"code","f3cab67a":"code","bfece13f":"code","dbeef206":"code","3b74fecb":"code","d92954ea":"code","5b6bf6f5":"code","a78fd30a":"code","245a1ffe":"code","7bf6fcf7":"code","526c77db":"code","58dc9b65":"code","6dfbd180":"code","44850179":"code","2e13d654":"markdown","f12c9be5":"markdown","170782f6":"markdown","62bdeb83":"markdown","f663bade":"markdown","336428e7":"markdown","5fa9c5a1":"markdown","770ba3ec":"markdown","097a67fa":"markdown","13f2aec0":"markdown","fcf33aa9":"markdown"},"source":{"dee18db7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sn\nfrom sklearn.preprocessing import LabelEncoder\nimport statsmodels.api as sm\nfrom scipy.stats.stats import pearsonr\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport tensorflow\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Activation,BatchNormalization","93028cab":"Train_Data = pd.read_csv ('..\/input\/train-test-data-abc-private-limited\/train.csv')\nTrain_Data.head()","b65649ff":"Train_Data.shape","c8208424":"Train_Data.info()","58a27c4f":"Train_Data.isnull().sum()","29bd878c":"Train_Data.describe()","aff1e232":"Train_Data[['Product_Category_2','Product_Category_3']].isnull().mean()","756f1bfc":"Train_Data['Product_Category_2']=Train_Data['Product_Category_2'].fillna(Train_Data['Product_Category_2'].value_counts().index[0])\nTrain_Data['Product_Category_3']=Train_Data['Product_Category_3'].fillna(Train_Data['Product_Category_3']).value_counts().index[0]","caa40845":"Train_Data.isnull().sum()","5b4e1436":"Train_Data.drop('User_ID',axis=1,inplace=True)\nTrain_Data.head()","6e9bbcc3":"Train_Data.describe()","793910d7":"pd.crosstab(index=[Train_Data['Age'],Train_Data['Gender'],Train_Data['City_Category']],columns=[Train_Data['Purchase'].max()])","dda729ae":"Train_Data.columns","0d12185c":"dscr_columns=[u'Gender',u'Age',u'City_Category',u'Stay_In_Current_City_Years']","03da07f8":"fig, ax=plt.subplots(1,4,figsize=(21,7))\nfor variable,subplot in zip(dscr_columns,ax.flatten()):\n    sn.countplot(Train_Data[variable],ax=subplot)\n    for label in subplot.get_xticklabels():\n        label.set_rotation(90)","f36ce910":"fig, ax= plt.subplots(1, 4, figsize=(24, 7))\nfor var, subplot in zip(dscr_columns, ax.flatten()):\n    sn.boxplot(x=var, y='Purchase', data=Train_Data, ax=subplot)","0ac3f777":"cont_col=[u'Occupation',u'Product_Category_1',u'Product_Category_2',u'Product_Category_3']","8bd67f2d":"fig, ax=plt.subplots(1,4,figsize=(21,4))\nfor variable,subplot in zip(cont_col,ax.flatten()):\n    sn.distplot(Train_Data[variable],ax=subplot,kde=False)\n    for label in subplot.get_xticklabels():\n        label.set_rotation(90)","3ccf8f8c":"fig, ax= plt.subplots(1, 4, figsize=(21, 4))\nfor var, subplot in zip(cont_col, ax.flatten()):\n    sn.boxplot(Train_Data[var], ax=subplot)","f81d85e1":"plt.figure(figsize=(17,5))\nsn.set_style(style='whitegrid')\nplt.subplot(1,2,1)\nsn.barplot(x=Train_Data['Age'],y=Train_Data['Purchase'],hue=Train_Data['Gender'])\nplt.legend(loc='upper right')\nplt.subplot(1,2,2)\nsn.barplot(x=Train_Data['City_Category'],y=Train_Data['Purchase'],hue=Train_Data['Marital_Status'])\nplt.legend(loc='upper right')","76b6e259":"label=LabelEncoder()\ndef encoder(df,variable):\n  df[variable]=label.fit_transform(df[variable])","31431441":"encoder(Train_Data,'Product_ID')\nencoder(Train_Data,'Gender')\nencoder(Train_Data,'Age')\nencoder(Train_Data,'City_Category')\nencoder(Train_Data,'Stay_In_Current_City_Years')","7c6eb391":"Train_Data.head()","72f60a6a":"all_col=list(Train_Data.columns)\nall_col","1c5be9ca":"plt.figure(figsize=(18,15))\nfor i in enumerate(all_col):\n  plt.subplot(4,3,i[0]+1)\n  sn.histplot(Train_Data[i[1]],kde=True)","302dacd8":"X=Train_Data.drop(['Purchase'],axis=1)\nX.head()","d0f8d5d4":"y=Train_Data['Purchase']\ny.head()","00ad4264":"x=sm.add_constant(X)","4ad18574":"m1=sm.OLS(y,x)\nm1=m1.fit()\nm1.summary()","e046cd1d":"X1=x.drop(['Stay_In_Current_City_Years'],axis=1)\nx1=sm.add_constant(X1)","6f7c8d2c":"m2=sm.OLS(y,x1)\nm2=m2.fit()\nm2.summary()","5d9db4bf":"fitted_vals = m2.predict()\nresids = m2.resid\n\nsn.regplot(x=fitted_vals, y=resids,line_kws={'color':'red'})\nplt.title('Residuals vs. Predicted Value')","1830396d":"sn.distplot(m2.resid)","b1b1f9c9":"stats.probplot(resids, plot=sn.mpl.pyplot)","559af580":"resids_standardized = m1.get_influence().resid_studentized_internal","413667fb":"sn.regplot(x=fitted_vals, y=np.sqrt(np.abs(resids_standardized)),line_kws={'color':'orange'})","55685782":"for column in x1.columns:\n    corr_test = pearsonr(x1[column], m1.resid)\n    print(f'Variable: {column} --- correlation: {corr_test[0]:.4f}, p-value: {corr_test[1]:.4f}')","2697d284":"vif1= [variance_inflation_factor(x1.values, i) for i in range(x1.shape[1])]\npd.DataFrame(vif1[1:],index=x1.columns[1:])","070a6b68":"X=x1.iloc[:,1:]\nX.head()","0cf4b3b1":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)","1d3a7e1e":"lr=LinearRegression(normalize=True)","3778463f":"lr.fit(x_train,y_train)","2e33f7c2":"lr.score(x_train,y_train)","68841b7a":"lr.coef_","2ee93586":"lr.intercept_","6f450ad6":"y_train","be573671":"y_pred=lr.predict(x_test)\ny_pred","4c889976":"lr.score(x_test,y_test)*100","74866de1":"r2_score(y_test,y_pred)","38a73280":"lr.score(x_test,y_test)","676db6c4":"R=pd.DataFrame({'Actual':y_test,'Predicted':y_pred})\nR","7bca626c":"dtr=DecisionTreeRegressor(random_state=0)","49a10f53":"dtr.fit(x_train,y_train)","e2bda240":"y_pred=dtr.predict(x_test)","2e6bb88c":"r2_score(y_test,y_pred)*100","072b292b":"dtr.score(x_train,y_train)*100","fc7279a2":"model=Sequential()\nmodel.add(tensorflow.keras.layers.InputLayer(input_shape=(10,)))\nmodel.add(BatchNormalization())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(BatchNormalization())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(BatchNormalization())\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dense(1,activation='linear'))\n\nmodel.summary()","f3cab67a":"model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])","bfece13f":"history2=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=20)","dbeef206":"plt.plot(history2.history['accuracy'])\nplt.plot(history2.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","3b74fecb":"plt.plot(history2.history['loss']) \nplt.plot(history2.history['val_loss']) \nplt.title('Model loss') \nplt.ylabel('Loss') \nplt.xlabel('Epoch') \nplt.legend(['Train', 'Test'], loc='upper left') \nplt.show()","d92954ea":"Test_Data=pd.read_csv('..\/input\/train-test-data-abc-private-limited\/test.csv')\nTest_Data.head()","5b6bf6f5":"Test_Data.shape","a78fd30a":"Test_Data.isnull().sum()","245a1ffe":"Test_Data.dropna(inplace=True,axis=0)\nTest_Data.drop(labels='User_ID',axis=1,inplace=True)\nTest_Data.reset_index(drop=True,inplace=True)","7bf6fcf7":"Test_Data.shape","526c77db":"encoder(Test_Data,'Product_ID')\nencoder(Test_Data,'Gender')\nencoder(Test_Data,'Age')\nencoder(Test_Data,'City_Category')\nencoder(Test_Data,'Stay_In_Current_City_Years')","58dc9b65":"Test_Data.head()","6dfbd180":"test_pred=dtr.predict(Test_Data)","44850179":"dtr.score(Test_Data,test_pred)","2e13d654":"# **Prediction With DecisionTreeRegressor**","f12c9be5":"# **Import Libraries**","170782f6":"# **Data Cleaning**","62bdeb83":"Check High P>|t| Value And Drop That Column","f663bade":"# **ANN**","336428e7":"# **Data Cleaning**","5fa9c5a1":"# **Prediction With DecisionTreeRegressor**","770ba3ec":"# **Prediction With LinearRegression**","097a67fa":"# **Data Visualization**","13f2aec0":"# **Test Data**","fcf33aa9":"# **Train Data**"}}