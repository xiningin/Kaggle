{"cell_type":{"df0ef8c1":"code","138f43d3":"code","646de971":"code","eb5643a9":"code","20615cc9":"code","54b42788":"code","d0a303f3":"code","081df21c":"code","1b326f3f":"code","9bc4b267":"code","546e45a2":"code","55936408":"code","c8082810":"code","21c3c184":"code","071170c8":"code","a790efed":"code","a068a1dc":"code","6c2db005":"code","229b954a":"code","7003fde4":"code","d2f03ee4":"code","7b319815":"code","d8431c9f":"code","e276aafe":"code","3466f200":"code","619f7dbd":"code","451862ff":"code","759c436e":"code","f8c065e8":"code","1e1af583":"code","e8f6f6f3":"code","29367924":"code","3171c920":"code","54142d4f":"code","06aa499b":"code","6c5e7e39":"code","31df24e0":"code","54b2950a":"code","9e3cb952":"code","92e3abc0":"code","1a241f84":"code","cf1f7ef9":"code","6999797b":"code","59ee1fd2":"code","ecd71ae8":"code","ece70f0e":"code","7fb75468":"code","23ca072e":"code","dafb528f":"code","0eb89c7a":"code","a12d1e73":"code","8ebe08f0":"code","c6d774f4":"code","6dc3c2c2":"code","cd8968e1":"code","7c7c46df":"code","2568231d":"code","cd501d22":"code","5d5a6291":"code","4be8273a":"code","aa0451e3":"code","0c5ff1ba":"code","2014e756":"code","23ba0b4a":"code","37dc69e6":"code","1dfc95d6":"code","19cf5649":"code","e490f5f8":"code","99dff463":"code","6014cbd4":"code","d3307c2c":"code","181a2d82":"code","80d0ed4f":"code","014b383a":"code","57c8fa41":"code","9ebee5f3":"code","cde4e81a":"code","df13fe98":"code","3c8c6bf5":"code","62960a6a":"code","b018dcad":"code","6330d8c1":"code","3b6341e8":"code","57236faf":"code","bb634dd9":"code","8ee9b8ad":"code","464452e4":"code","c49eb711":"code","ecb16f65":"code","6c232e0f":"code","eb8d8de0":"code","e772a83b":"code","e61c7097":"code","4945fcac":"code","5f606bf5":"code","32fbf566":"code","f48b7b6a":"code","46fdd368":"code","46a7c589":"code","e7f44a4f":"code","65af0abb":"code","981ad8f9":"code","d925c2de":"code","7ea35626":"markdown","c34c626e":"markdown","12b2d678":"markdown","603acc11":"markdown","70029b10":"markdown","2be87bb7":"markdown","4c006745":"markdown","52f09207":"markdown","a95fbfe9":"markdown","cfd5c036":"markdown","6de15c0a":"markdown","37441e29":"markdown","a9449a1f":"markdown","c2714a5f":"markdown","4e51a564":"markdown","276baad8":"markdown","921b3430":"markdown","cd219f1c":"markdown","e5caee3e":"markdown","8719e64c":"markdown","95f3bb26":"markdown","d23ff622":"markdown","3fca7442":"markdown","01fe5c34":"markdown","d4b9d3c9":"markdown","24c1b7e6":"markdown","5c3374e4":"markdown","83c9a434":"markdown","a3cd6e07":"markdown","5e77ab43":"markdown","72ca8139":"markdown","4d7fb811":"markdown","2bfe646a":"markdown","6cf218de":"markdown","79e80926":"markdown","ee08c3b1":"markdown","f2b27e5a":"markdown","99e600d8":"markdown","0c33419b":"markdown","b86700fc":"markdown","b215a911":"markdown","7806d1b8":"markdown","5313cbab":"markdown","b65c17ab":"markdown","5efcda1f":"markdown","1e88f107":"markdown","fac68034":"markdown","6289c57c":"markdown","d4f9fdf8":"markdown","5c39e9b2":"markdown","bd155313":"markdown","a5e6b587":"markdown","2e7b10fc":"markdown","c33daedb":"markdown","c6cfd761":"markdown","e0a98e01":"markdown","0a77cbaa":"markdown","b3a2e06b":"markdown","7483a3e7":"markdown","270de9d6":"markdown","1886bc7b":"markdown","bd240f25":"markdown","b887c69e":"markdown","5ccaa881":"markdown","1f1a5909":"markdown","20e21187":"markdown","a492ff99":"markdown"},"source":{"df0ef8c1":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\nfrom plotly import plotly\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode()\nfrom collections import Counter","138f43d3":"# from google.colab import drive\n# drive.mount('\/content\/drive')\n","646de971":"train_data='..\/input\/train_data.csv'\nresources_data='..\/input\/resources.csv'\nglove_vectors='..\/input\/glove_vectors'","eb5643a9":"\nproject_data = pd.read_csv(train_data,nrows=50000)\nresource_data = pd.read_csv(resources_data)","20615cc9":"print(\"Number of data points in train data\", project_data.shape)\nprint('-'*50)\nprint(\"The attributes of data :\", project_data.columns.values)","54b42788":"# how to replace elements in list python: https:\/\/stackoverflow.com\/a\/2582163\/4084039\ncols = ['Date' if x=='project_submitted_datetime' else x for x in list(project_data.columns)]\n\n\n#sort dataframe based on time pandas python: https:\/\/stackoverflow.com\/a\/49702492\/4084039\nproject_data['Date'] = pd.to_datetime(project_data['project_submitted_datetime'])\nproject_data.drop('project_submitted_datetime', axis=1, inplace=True)\nproject_data.sort_values(by=['Date'], inplace=True)\n\n\n# how to reorder columns pandas python: https:\/\/stackoverflow.com\/a\/13148611\/4084039\nproject_data = project_data[cols]\n\n\nproject_data.head(2)","d0a303f3":"print(\"Number of data points in train data\", resource_data.shape)\nprint(resource_data.columns.values)\nresource_data.head(2)","081df21c":"catogories = list(project_data['project_subject_categories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\ncat_list = []\nfor i in catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_') # we are replacing the & value into \n    cat_list.append(temp.strip())\n    \nproject_data['clean_categories'] = cat_list\nproject_data.drop(['project_subject_categories'], axis=1, inplace=True)\n\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_categories'].values:\n    my_counter.update(word.split())\n\ncat_dict = dict(my_counter)\nsorted_cat_dict = dict(sorted(cat_dict.items(), key=lambda kv: kv[1]))\n","1b326f3f":"sub_catogories = list(project_data['project_subject_subcategories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\n\nsub_cat_list = []\nfor i in sub_catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_')\n    sub_cat_list.append(temp.strip())\n\nproject_data['clean_subcategories'] = sub_cat_list\nproject_data.drop(['project_subject_subcategories'], axis=1, inplace=True)\n\n# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nmy_counter = Counter()\nfor word in project_data['clean_subcategories'].values:\n    my_counter.update(word.split())\n    \nsub_cat_dict = dict(my_counter)\nsorted_sub_cat_dict = dict(sorted(sub_cat_dict.items(), key=lambda kv: kv[1]))","9bc4b267":"# merge two column text dataframe: \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n                        project_data[\"project_essay_2\"].map(str) + \\\n                        project_data[\"project_essay_3\"].map(str) + \\\n                        project_data[\"project_essay_4\"].map(str)","546e45a2":"project_data.head(2)","55936408":"#### 1.4.2.3 Using Pretrained Models: TFIDF weighted W2V","c8082810":"# printing some random reviews\nprint(project_data['essay'].values[0])\nprint(\"=\"*50)\nprint(project_data['essay'].values[150])\nprint(\"=\"*50)","21c3c184":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","071170c8":"sent = decontracted(project_data['essay'].values[20000])","a790efed":"# \\r \\n \\t remove from string python: http:\/\/texthandler.com\/info\/remove-line-breaks-python\/\nsent = sent.replace('\\\\r', ' ')\nsent = sent.replace('\\\\\"', ' ')\nsent = sent.replace('\\\\n', ' ')","a068a1dc":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent = re.sub('[^A-Za-z0-9]+', ' ', sent)","6c2db005":"# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"]","229b954a":"# Combining all the above stundents \nfrom tqdm import tqdm\npreprocessed_essays = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['essay'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n    preprocessed_essays.append(sent.lower().strip())\nproject_data['preprocessed_essays'] = preprocessed_essays","7003fde4":"# after preprocesing\nproject_data.head(3)","d2f03ee4":"# printing some random essays.\nprint(project_data['project_title'].values[0])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[150])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[1000])","7b319815":"# Combining all the above statemennts \nfrom tqdm import tqdm\npreprocessed_titles = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['project_title'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_titles.append(sent.lower().strip())\nproject_data['preprocessed_titles'] = preprocessed_titles","d8431c9f":"project_data.head(3)","e276aafe":"project_data['project_grade_category'][:4]","3466f200":"project_data['project_grade_category'] = project_data['project_grade_category'].str.replace(\" \", \"_\")\nproject_data['project_grade_category'].value_counts()","619f7dbd":"project_data['teacher_prefix'][:4]","451862ff":"project_data['teacher_prefix'] = project_data['teacher_prefix'].str.replace(\".\",\"\")\nproject_data['teacher_prefix'].value_counts()","759c436e":"project_data.columns","f8c065e8":"Y = project_data['project_is_approved'].values\nproject_data.drop(['project_is_approved'], axis=1, inplace=True)","1e1af583":"X = project_data\nX.head(1)","e8f6f6f3":"# train test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, stratify=Y)\nX_train, X_cv, Y_train, Y_cv = train_test_split(X_train, Y_train, test_size=0.33, stratify=Y_train)","29367924":"# we use count vectorizer to convert the values into one hot encoded features\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(vocabulary=list(sorted_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(X_train['clean_categories'].values)\n\n\ncategories_one_hot_train = vectorizer.transform(X_train['clean_categories'].values)\ncategories_one_hot_test = vectorizer.transform(X_test['clean_categories'].values)\ncategories_one_hot_cv = vectorizer.transform(X_cv['clean_categories'].values)\n\n\nprint(\"Shape of Train data - one hot encoding \",categories_one_hot_train.shape)\nprint(\"Shape of Test data - one hot encoding \",categories_one_hot_test.shape)\nprint(\"Shape of CV data - one hot encoding \",categories_one_hot_cv.shape)\nprint(vectorizer.get_feature_names())","3171c920":"# we use count vectorizer to convert the values into one \n\nvectorizer = CountVectorizer(vocabulary=list(sorted_sub_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(X_train['clean_subcategories'].values)\n\nsub_cat_one_hot_train = vectorizer.transform(X_train['clean_subcategories'].values)\nsub_cat_one_hot_test = vectorizer.transform(X_test['clean_subcategories'].values)\nsub_cat_one_hot_cv = vectorizer.transform(X_cv['clean_subcategories'].values)\n\n\nprint(\"Shape of Train data - one hot encoding \",sub_cat_one_hot_train.shape)\nprint(\"Shape of Test data - one hot encoding\",sub_cat_one_hot_test.shape)\nprint(\"Shape of CV data - one hot encoding\",sub_cat_one_hot_cv.shape)\nprint(vectorizer.get_feature_names())","54142d4f":"my_counter = Counter()\nfor state in project_data['school_state'].values:\n    my_counter.update(state.split())","06aa499b":"school_state_cat_dict = dict(my_counter)\nsorted_school_state_cat_dict = dict(sorted(school_state_cat_dict.items(), key=lambda kv: kv[1]))","6c5e7e39":"## we use count vectorizer to convert the values into one hot encoded features\n\nvectorizer = CountVectorizer(vocabulary=list(sorted_school_state_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(X_train['school_state'].values)\n\nschool_state_one_hot_train = vectorizer.transform(X_train['school_state'].values)\nschool_state_one_hot_test = vectorizer.transform(X_test['school_state'].values)\nschool_state_one_hot_cv = vectorizer.transform(X_cv['school_state'].values)\n\nprint(\"Shape of Train data - one hot encoding\",school_state_one_hot_train.shape)\nprint(\"Shape of Test data - one hot encoding\",school_state_one_hot_test.shape)\nprint(\"Shape of CV data - one hot encoding\",school_state_one_hot_cv.shape)\nprint(vectorizer.get_feature_names())","31df24e0":"my_counter = Counter()\nfor project_grade in project_data['project_grade_category'].values:\n    my_counter.update(project_grade.split())","54b2950a":"project_grade_cat_dict = dict(my_counter)\nsorted_project_grade_cat_dict = dict(sorted(project_grade_cat_dict.items(), key=lambda kv: kv[1]))","9e3cb952":"## we use count vectorizer to convert the values into one hot encoded features\n\nvectorizer = CountVectorizer(vocabulary=list(sorted_project_grade_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(X_train['project_grade_category'].values)\n\nproject_grade_cat_one_hot_train = vectorizer.transform(X_train['project_grade_category'].values)\nproject_grade_cat_one_hot_test = vectorizer.transform(X_test['project_grade_category'].values)\nproject_grade_cat_one_hot_cv = vectorizer.transform(X_cv['project_grade_category'].values)\n\n\nprint(\"Shape of Train data - one hot encoding\",project_grade_cat_one_hot_train.shape)\nprint(\"Shape of Test data - one hot encoding\",project_grade_cat_one_hot_test.shape)\nprint(\"Shape of CV data - one hot encoding\",project_grade_cat_one_hot_cv.shape)\nprint(vectorizer.get_feature_names())","92e3abc0":"my_counter = Counter()\nfor teacher_prefix in project_data['teacher_prefix'].values:\n    teacher_prefix = str(teacher_prefix)\n    my_counter.update(teacher_prefix.split())","1a241f84":"teacher_prefix_cat_dict = dict(my_counter)\nsorted_teacher_prefix_cat_dict = dict(sorted(teacher_prefix_cat_dict.items(), key=lambda kv: kv[1]))","cf1f7ef9":"vectorizer = CountVectorizer(vocabulary=list(sorted_teacher_prefix_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(X_train['teacher_prefix'].values.astype(\"U\"))\n\nteacher_prefix_cat_one_hot_train = vectorizer.transform(X_train['teacher_prefix'].values.astype(\"U\"))\nteacher_prefix_cat_one_hot_test = vectorizer.transform(X_test['teacher_prefix'].values.astype(\"U\"))\nteacher_prefix_cat_one_hot_cv = vectorizer.transform(X_cv['teacher_prefix'].values.astype(\"U\"))\n\nprint(\"Shape of Train data - one hot encoding\",teacher_prefix_cat_one_hot_train.shape)\nprint(\"Shape of Test data - one hot encoding \",teacher_prefix_cat_one_hot_test.shape)\nprint(\"Shape of CV data - one hot encoding \",teacher_prefix_cat_one_hot_cv.shape)\n\nprint(vectorizer.get_feature_names())","6999797b":"vectorizer = CountVectorizer(min_df=10)\nvectorizer.fit(X_train['preprocessed_essays'])\n\n# BOW for essays Train Data\nessay_bow_train = vectorizer.transform(X_train['preprocessed_essays'])\nprint(essay_bow_train.shape)\n\n# BOW for essays Test Data\nessay_bow_test = vectorizer.transform(X_test['preprocessed_essays'])\nprint(essay_bow_test.shape)\n\n# BOW for essays CV Data\nessay_bow_cv = vectorizer.transform(X_cv['preprocessed_essays'])\nprint(essay_bow_cv.shape)","59ee1fd2":"vectorizer = CountVectorizer(min_df=10)\nvectorizer.fit(X_train['preprocessed_titles'])\n\n# BOW for title Train Data\ntitle_bow_train = vectorizer.transform(X_train['preprocessed_titles'])\nprint(title_bow_train.shape)\n\n# BOW for title Test Data\ntitle_bow_test = vectorizer.transform(X_test['preprocessed_titles'])\nprint(title_bow_test.shape)\n\n# BOW for title CV Data\ntitle_bow_cv = vectorizer.transform(X_cv['preprocessed_titles'])\nprint(title_bow_cv.shape)","ecd71ae8":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(min_df=10)\nvectorizer.fit(X_train['preprocessed_essays'])\n\n#tidf Train Data\nessay_tfidf_train = vectorizer.transform(X_train['preprocessed_essays'])\nprint(essay_tfidf_train.shape)\n\n#tidf Test Data\nessay_tfidf_test = vectorizer.transform(X_test['preprocessed_essays'])\nprint(essay_tfidf_test.shape)\n\n#tidf CV Data\nessay_tfidf_cv = vectorizer.transform(X_cv['preprocessed_essays'])\nprint(essay_tfidf_cv.shape)","ece70f0e":"vectorizer = TfidfVectorizer(min_df=10)\nvectorizer.fit(X_train['preprocessed_titles'])\n\n#tidf Train Data\ntitle_tfidf_train = vectorizer.transform(X_train['preprocessed_titles'])\nprint(title_tfidf_train.shape)\n\n#tidf Test Data\ntitle_tfidf_test = vectorizer.transform(X_test['preprocessed_titles'])\nprint(title_tfidf_test.shape)\n\n#tidf CV Data\ntitle_tfidf_cv = vectorizer.transform(X_cv['preprocessed_titles'])\nprint(title_tfidf_cv.shape)","7fb75468":"# stronging variables into pickle files python: http:\/\/www.jessicayung.com\/how-to-use-pickle-to-save-and-load-variables-in-python\/\n# make sure you have the glove_vectors file\nwith open(glove_vectors, 'rb') as f:\n    model = pickle.load(f)\n    glove_words =  set(model.keys())","23ca072e":"# average Word2Vec Function\n# computing average word2vec for each review.\n# the avg-w2v for each sentence\/review is stored in this list\ndef avg_w2v_vectors_func(sentance):\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    return vector","dafb528f":"essay_avg_w2v_train = []\nessay_avg_w2v_test  = []\nessay_avg_w2v_cv    = []\n# Avg-w2v for Train data\nfor sentence in tqdm(X_train['preprocessed_essays']):\n    essay_avg_w2v_train.append(avg_w2v_vectors_func(sentance)) \n    \n# Avg-w2v for Train data    \nprint(\"len(essay_avg_w2v_train):\",len(essay_avg_w2v_train))\nprint(\"len(essay_avg_w2v_train[0])\",len(essay_avg_w2v_train[0]))\n# Avg-w2v for Test data\nfor sentence in tqdm(X_test['preprocessed_essays']):\n    essay_avg_w2v_test.append(avg_w2v_vectors_func(sentance)) \n\n\nprint(\"len(essay_avg_w2v_test):\",len(essay_avg_w2v_test))\nprint(\"len(essay_avg_w2v_test[0])\",len(essay_avg_w2v_test[0]))\n\n# Avg-w2v for CV data\nfor sentence in tqdm(X_cv['preprocessed_essays']):    \n    essay_avg_w2v_cv.append(avg_w2v_vectors_func(sentance)) \n\n# Avg-w2v for CV data\nprint(\"len(essay_avg_w2v_cv):\",len(essay_avg_w2v_cv))\nprint(\"len(essay_avg_w2v_cv[0])\",len(essay_avg_w2v_cv[0]))","0eb89c7a":"tfidf_model = TfidfVectorizer()\ntfidf_model.fit(X_train['preprocessed_essays'])\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\ntfidf_words = set(tfidf_model.get_feature_names())","a12d1e73":"# Compute  TFIDF weighted W2V for each sentence of the review.\n\ndef tf_idf_weight_func(sentence): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if (word in glove_words) and (word in tfidf_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_weight += tf_idf\n    if tf_idf_weight != 0:\n        vector \/= tf_idf_weight\n    return vector","8ebe08f0":"essay_tfidf_w2v_train = []\nessay_tfidf_w2v_test  = []\nessay_tfidf_w2v_cv    = []\n#  TFIDF weighted W2V for Train data\nfor sentence in tqdm(X_train['preprocessed_essays']):\n    essay_tfidf_w2v_train.append(tf_idf_weight_func(sentance)) \nprint(\"len(essay_tfidf_w2v_train)\",len(essay_tfidf_w2v_train))\nprint(\"len(essay_tfidf_w2v_train[0])\",len(essay_tfidf_w2v_train[0]))\n\n#  TFIDF weighted W2V for Test data\nfor sentence in tqdm(X_test['preprocessed_essays']):\n    essay_tfidf_w2v_test.append(tf_idf_weight_func(sentance)) \nprint(\"len(essay_tfidf_w2v_test)\",len(essay_tfidf_w2v_test))\nprint(\"len(essay_tfidf_w2v_test[0])\",len(essay_tfidf_w2v_test[0]))\n\n#  TFIDF weighted W2V for CV data\nfor sentence in tqdm(X_cv['preprocessed_essays']):\n    essay_tfidf_w2v_cv.append(tf_idf_weight_func(sentance)) \nprint(\"len(essay_tfidf_w2v_cv)\",len(essay_tfidf_w2v_cv))\nprint(\"len(essay_tfidf_w2v_cv[0])\",len(essay_tfidf_w2v_cv[0]))","c6d774f4":"title_avg_w2v_train = []\ntitle_avg_w2v_test  = []\ntitle_avg_w2v_cv    = []\n\nfor sentence in tqdm(X_train['preprocessed_titles']):\n    title_avg_w2v_train.append(avg_w2v_vectors_func(sentance)) # Avg-w2v for Train data\n    \n# Avg-w2v for Train data    \nprint(\"len(title_avg_w2v_train):\",len(title_avg_w2v_train))\nprint(\"len(title_avg_w2v_train[0])\",len(title_avg_w2v_train[0]))\n\nfor sentence in tqdm(X_test['preprocessed_titles']):\n    title_avg_w2v_test.append(avg_w2v_vectors_func(sentance)) # Avg-w2v for Test data\n\n# Avg-w2v for Test data\nprint(\"len(title_avg_w2v_test):\",len(title_avg_w2v_test))\nprint(\"len(title_avg_w2v_test[0])\",len(title_avg_w2v_test[0]))\n\n\nfor sentence in tqdm(X_cv['preprocessed_titles']):    \n    title_avg_w2v_cv.append(avg_w2v_vectors_func(sentance)) # Avg-w2v for CV data\n\n# Avg-w2v for CV data\nprint(\"len(title_avg_w2v_cv):\",len(title_avg_w2v_cv))\nprint(\"len(title_avg_w2v_cv[0])\",len(title_avg_w2v_cv[0]))","6dc3c2c2":"title_tfidf_w2v_train  = []\ntitle_tfidf_w2v_test  = []\ntitle_tfidf_w2v_cv    = []\n\nfor sentence in tqdm(X_train['preprocessed_titles']):\n    title_tfidf_w2v_train.append(tf_idf_weight_func(sentance)) #  TFIDF weighted W2V for Train data\nprint(\"len(title_tfidf_w2v_train)\",len(title_tfidf_w2v_train))\nprint(\"len(title_tfidf_w2v_train[0])\",len(title_tfidf_w2v_train[0]))\n\nfor sentence in tqdm(X_test['preprocessed_titles']):\n    title_tfidf_w2v_test.append(tf_idf_weight_func(sentance)) #  TFIDF weighted W2V for Test data\nprint(\"len(title_tfidf_w2v_test)\",len(title_tfidf_w2v_test))\nprint(\"len(title_tfidf_w2v_test[0])\",len(title_tfidf_w2v_test[0]))\n\nfor sentence in tqdm(X_cv['preprocessed_titles']):\n    title_tfidf_w2v_cv.append(tf_idf_weight_func(sentance)) #  TFIDF weighted W2V for CV data\nprint(\"len(title_tfidf_w2v_cv)\",len(title_tfidf_w2v_cv))\nprint(\"len(title_tfidf_w2v_cv[0])\",len(title_tfidf_w2v_cv[0]))","cd8968e1":"price_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\nprice_data.head(3)","7c7c46df":"X_train = pd.merge(X_train, price_data, on='id', how='left')\nX_test = pd.merge(X_test, price_data, on='id', how='left')\nX_cv = pd.merge(X_cv, price_data, on='id', how='left')","2568231d":"from sklearn.preprocessing import Normalizer\n\nnormalizer = Normalizer()\n\n# normalizer.fit(X_train['price'].values)\n# this will rise an error Expected 2D array, got 1D array instead: \n# array=[105.22 215.96  96.01 ... 368.98  80.53 709.67].\n# Reshape your data either using \n# array.reshape(-1, 1) if your data has a single feature \n# array.reshape(1, -1)  if it contains a single sample.\n\nnormalizer.fit(X_train['price'].values.reshape(-1,1))\n\nprice_data_train = normalizer.transform(X_train['price'].values.reshape(-1,1))\n\nprice_data_test = normalizer.transform(X_test['price'].values.reshape(-1,1))\n\nprice_data_cv = normalizer.transform(X_cv['price'].values.reshape(-1,1))\n\nprint(\"After vectorizations\")\nprint(\"=\"*100)\nprint(price_data_train.shape, Y_train.shape)\nprint(price_data_test.shape, Y_test.shape)\nprint(price_data_cv.shape, Y_cv.shape)\nprint(\"=\"*100)","cd501d22":"normalizer = Normalizer()\n\n# normalizer.fit(X_train['price'].values)\n# this will rise an error Expected 2D array, got 1D array instead: \n# array=[105.22 215.96  96.01 ... 368.98  80.53 709.67].\n# Reshape your data either using \n# array.reshape(-1, 1) if your data has a single feature \n# array.reshape(1, -1)  if it contains a single sample.\n\nnormalizer.fit(X_train['quantity'].values.reshape(-1,1))\n\nquant_train = normalizer.transform(X_train['quantity'].values.reshape(-1,1))\nquant_cv = normalizer.transform(X_cv['quantity'].values.reshape(-1,1))\nquant_test = normalizer.transform(X_test['quantity'].values.reshape(-1,1))\n\nprint(\"=\"*100)\nprint(\"After vectorizations\")\nprint(quant_train.shape, Y_train.shape)\nprint(quant_cv.shape, Y_cv.shape)\nprint(quant_test.shape, Y_test.shape)\nprint(\"=\"*100)","5d5a6291":"normalizer = Normalizer()\n\n# normalizer.fit(X_train['price'].values)\n# this will rise an error Expected 2D array, got 1D array instead: \n# array=[105.22 215.96  96.01 ... 368.98  80.53 709.67].\n# Reshape your data either using \n# array.reshape(-1, 1) if your data has a single feature \n# array.reshape(1, -1)  if it contains a single sample.\n\nnormalizer.fit(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n\nprev_no_projects_train = normalizer.transform(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\nprev_no_projects_cv = normalizer.transform(X_cv['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\nprev_no_projects_test = normalizer.transform(X_test['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n\nprint(\"=\"*100)\nprint(\"After vectorizations\")\nprint(prev_no_projects_train.shape, Y_train.shape)\nprint(prev_no_projects_cv.shape, Y_cv.shape)\nprint(prev_no_projects_test.shape, Y_test.shape)\nprint(\"=\"*100)","4be8273a":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n\nX_train_merge = hstack((categories_one_hot_train, sub_cat_one_hot_train, school_state_one_hot_train, project_grade_cat_one_hot_train, teacher_prefix_cat_one_hot_train, price_data_train, quant_train, prev_no_projects_train,title_bow_train, essay_bow_train)).tocsr()\nX_test_merge = hstack((categories_one_hot_test, sub_cat_one_hot_test, school_state_one_hot_test, project_grade_cat_one_hot_test, teacher_prefix_cat_one_hot_test, price_data_test, quant_test, prev_no_projects_test,title_bow_test, essay_bow_test)).tocsr()\nX_cv_merge = hstack((categories_one_hot_cv, sub_cat_one_hot_cv, school_state_one_hot_cv,project_grade_cat_one_hot_cv, teacher_prefix_cat_one_hot_cv, price_data_cv, quant_cv, prev_no_projects_cv,title_bow_cv, essay_bow_cv)).tocsr()\n\nprint(\"Final Data matrix\")\nprint(\"=\"*100)\nprint(X_train_merge.shape, Y_train.shape)\nprint(X_cv_merge.shape, Y_test.shape)\nprint(X_test_merge.shape, Y_cv.shape)\nprint(\"=\"*100)","aa0451e3":"def batch_predict(clf, data):\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n\n    y_data_pred = []\n    tr_loop = data.shape[0] - data.shape[0]%1000\n    # consider you X_tr shape is 49041, then your cr_loop will be 49041 - 49041%1000 = 49000\n    # in this for loop we will iterate unti the last 1000 multiplier\n    for i in range(0, tr_loop, 1000):\n        y_data_pred.extend(clf.predict_proba(data[i:i+1000])[:,1])\n    # we will be predicting for the last data points\n    y_data_pred.extend(clf.predict_proba(data[tr_loop:])[:,1])\n    \n    return y_data_pred","0c5ff1ba":"\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\n\nK = [1, 5,  15, 31, 41,  65, 71]\n\nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i)\n    neigh.fit(X_train_merge, Y_train)\n\n    y_train_pred = batch_predict(neigh, X_train_merge)    \n    y_cv_pred = batch_predict(neigh, X_cv_merge)\n          \n    train_auc.append(roc_auc_score(Y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.grid()\nplt.show()","2014e756":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.GridSearchCV.html\nfrom sklearn.model_selection import GridSearchCV\n\n\nneigh = KNeighborsClassifier()\n\nparameters = {'n_neighbors':[1, 5,  15, 31, 41,  65, 71]}\n\nclf = GridSearchCV(neigh, parameters, cv= 5, scoring='roc_auc',return_train_score=True)\n","23ba0b4a":"print (\"-----\")","37dc69e6":"clf.fit(X_train_merge, Y_train)\n","1dfc95d6":"train_auc= clf.cv_results_['mean_train_score']","19cf5649":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.GridSearchCV.html\n\ntrain_auc_std= clf.cv_results_['std_train_score']\ncv_auc = clf.cv_results_['mean_test_score'] \ncv_auc_std= clf.cv_results_['std_test_score']\n\nplt.plot(parameters['n_neighbors'], train_auc, label='Train AUC')\n# this code is copied from here: https:\/\/stackoverflow.com\/a\/48803361\/4084039\nplt.gca().fill_between(parameters['n_neighbors'],train_auc - train_auc_std,train_auc + train_auc_std,alpha=0.3,color='darkblue')\n\nplt.plot(parameters['n_neighbors'], cv_auc, label='CV AUC')\n# this code is copied from here: https:\/\/stackoverflow.com\/a\/48803361\/4084039\nplt.gca().fill_between(parameters['n_neighbors'],cv_auc - cv_auc_std,cv_auc + cv_auc_std,alpha=0.3,color='darkorange')\n\nplt.scatter(parameters['n_neighbors'], train_auc, label='Train AUC points')\nplt.scatter(parameters['n_neighbors'], cv_auc, label='CV AUC points')\n\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.grid()\nplt.show()","e490f5f8":"score_t_cv = [x for x in cv_auc]\nopt_t_cv = K[score_t_cv.index(max(score_t_cv))]\nprint(\"Maximum AUC score of cv is:\" + ' ' + str(max(score_t_cv)))\nprint(\"Corresponding k value of cv is:\",opt_t_cv, '\\n')\nbest_k=opt_t_cv\nprint(best_k)","99dff463":"\n# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n\nneigh = KNeighborsClassifier(n_neighbors=best_k)\nneigh.fit(X_train_merge, Y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, X_train_merge)    \ny_test_pred = batch_predict(neigh, X_test_merge)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(Y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(Y_test, y_test_pred)\n\nplt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"True Positive Rate(TPR)\")\nplt.ylabel(\"False Positive Rate(FPR)\")\nplt.title(\"AUC\")\nplt.grid()\nplt.show()","6014cbd4":"# we will pick a threshold that will give the least fpr\ndef predict(proba, threshould, fpr, tpr):\n    \n    t = threshould[np.argmax(tpr*(1-fpr))]\n    \n    # (tpr*(1-fpr)) will be maximum if your fpr is very low and tpr is very high\n    \n    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n    predictions = []\n    for i in proba:\n        if i>=t:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions","d3307c2c":"print(\"=\"*100)\nfrom sklearn.metrics import confusion_matrix\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))\nprint(\"=\"*100)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))\nprint(\"=\"*100)","181a2d82":"conf_mat_BOW_train = pd.DataFrame(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)), range(2),range(2))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_mat_BOW_train, annot=True,annot_kws={\"size\": 16}, fmt='g')","80d0ed4f":"conf_mat_BOW_test= pd.DataFrame(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_mat_BOW_test, annot=True,annot_kws={\"size\": 16}, fmt='g')","014b383a":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n\nX_train_merge = hstack((categories_one_hot_train, sub_cat_one_hot_train, school_state_one_hot_train, project_grade_cat_one_hot_train, teacher_prefix_cat_one_hot_train, price_data_train, quant_train, prev_no_projects_train,title_tfidf_train, essay_tfidf_train)).tocsr()\nX_test_merge = hstack((categories_one_hot_test, sub_cat_one_hot_test, school_state_one_hot_test, project_grade_cat_one_hot_test, teacher_prefix_cat_one_hot_test, price_data_test, quant_test, prev_no_projects_test,title_tfidf_test, essay_tfidf_test)).tocsr()\nX_cv_merge = hstack((categories_one_hot_cv, sub_cat_one_hot_cv, school_state_one_hot_cv,project_grade_cat_one_hot_cv, teacher_prefix_cat_one_hot_cv, price_data_cv, quant_cv, prev_no_projects_cv,title_tfidf_cv, essay_tfidf_cv)).tocsr()\n\nprint(\"Final Data matrix\")\nprint(\"=\"*100)\nprint(X_train_merge.shape, Y_train.shape)\nprint(X_cv_merge.shape, Y_test.shape)\nprint(X_test_merge.shape, Y_cv.shape)\nprint(\"=\"*100)","57c8fa41":"\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\n\nK = [1, 5,  15,  31, 41, 51, 65, 71]\n\nfor i in tqdm(K):\n    \n    neigh = KNeighborsClassifier(n_neighbors=i)\n    neigh.fit(X_train_merge, Y_train)\n\n    y_train_pred = batch_predict(neigh, X_train_merge)    \n    y_cv_pred = batch_predict(neigh, X_cv_merge)\n          \n    train_auc.append(roc_auc_score(Y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.grid(True)\nplt.show()","9ebee5f3":"scor = [x for x in cv_auc]\nopt_t_cv_2 = K[scor.index(max(scor))]\nprint(\"Maximum AUC score of cv is:\" + ' ' + str(max(scor)))\nprint(\"Corresponding k value of cv is:\",opt_t_cv_2, '\\n')\n\n","cde4e81a":"best_k=opt_t_cv_2","df13fe98":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n\nneigh = KNeighborsClassifier(n_neighbors=best_k)\nneigh.fit(X_train_merge, Y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, X_train_merge)    \ny_test_pred = batch_predict(neigh, X_test_merge)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(Y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(Y_test, y_test_pred)\n\nplt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"True Positive Rate(TPR)\")\nplt.ylabel(\"False Positive Rate(FPR)\")\nplt.title(\"AUC\")\nplt.grid(True)\nplt.show()","3c8c6bf5":"print(\"=\"*100)\nfrom sklearn.metrics import confusion_matrix\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))\nprint(\"=\"*100)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))\nprint(\"=\"*100)","62960a6a":"conf_matr_df_tfidf_train = pd.DataFrame(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)), range(2),range(2))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matr_df_tfidf_train, annot=True,annot_kws={\"size\": 16}, fmt='g')","b018dcad":"conf_matr_df_tfidf_test = pd.DataFrame(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matr_df_tfidf_test, annot=True,annot_kws={\"size\": 16}, fmt='g')","6330d8c1":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n\nX_train_merge = hstack((categories_one_hot_train, sub_cat_one_hot_train, school_state_one_hot_train, project_grade_cat_one_hot_train, teacher_prefix_cat_one_hot_train, price_data_train, quant_train, prev_no_projects_train,title_avg_w2v_train, essay_avg_w2v_train)).tocsr()\nX_test_merge = hstack((categories_one_hot_test, sub_cat_one_hot_test, school_state_one_hot_test, project_grade_cat_one_hot_test, teacher_prefix_cat_one_hot_test, price_data_test, quant_test, prev_no_projects_test,title_avg_w2v_test, essay_avg_w2v_test)).tocsr()\nX_cv_merge = hstack((categories_one_hot_cv, sub_cat_one_hot_cv, school_state_one_hot_cv,project_grade_cat_one_hot_cv, teacher_prefix_cat_one_hot_cv, price_data_cv, quant_cv, prev_no_projects_cv,title_avg_w2v_cv, essay_avg_w2v_cv)).tocsr()\n\nprint(\"Final Data matrix\")\nprint(\"=\"*100)\nprint(X_train_merge.shape, Y_train.shape)\nprint(X_cv_merge.shape, Y_test.shape)\nprint(X_test_merge.shape, Y_cv.shape)\nprint(\"=\"*100)","3b6341e8":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\ncnt=0\nK = [1, 5, 21, 41, 51,61]\n\nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i)\n    print (\"1\")\n    neigh.fit(X_train_merge, Y_train)\n    print (\"2\")\n\n    y_train_pred = batch_predict(neigh, X_train_merge) \n    print(\"3\")\n    y_cv_pred = batch_predict(neigh, X_cv_merge)\n          \n    train_auc.append(roc_auc_score(Y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, y_cv_pred))\n    cnt=cnt+1\n    print (\"Loop\",cnt)\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.grid()\nplt.show()","57236faf":"scor = [x for x in cv_auc]\nopt_t_cv_3 = K[scor.index(max(scor))]\nprint(\"Maximum AUC score of cv is:\" + ' ' + str(max(scor)))\nprint(\"Corresponding k value of cv is:\",opt_t_cv_3, '\\n')\n\nbest_k=opt_t_cv_3\n\n","bb634dd9":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n\nneigh = KNeighborsClassifier(n_neighbors=best_k)\nneigh.fit(X_train_merge, Y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, X_train_merge)    \ny_test_pred = batch_predict(neigh, X_test_merge)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(Y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(Y_test, y_test_pred)\n\nplt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"True Positive Rate(TPR)\")\nplt.ylabel(\"False Positive Rate(FPR)\")\nplt.title(\"AUC\")\nplt.grid(True)\nplt.show()","8ee9b8ad":"print(\"=\"*100)\nfrom sklearn.metrics import confusion_matrix\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))\nprint(\"=\"*100)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))\nprint(\"=\"*100)","464452e4":"conf_matr_df_avgw2v_train = pd.DataFrame(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)), range(2),range(2))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matr_df_avgw2v_train, annot=True,annot_kws={\"size\": 16}, fmt='g')","c49eb711":"conf_matr_df_avgw2v_test = pd.DataFrame(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matr_df_avgw2v_test, annot=True,annot_kws={\"size\": 16}, fmt='g')","ecb16f65":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n\nX_train_merge = hstack((categories_one_hot_train, sub_cat_one_hot_train, school_state_one_hot_train, project_grade_cat_one_hot_train, teacher_prefix_cat_one_hot_train, price_data_train, quant_train, prev_no_projects_train,title_tfidf_w2v_train, essay_tfidf_w2v_train)).tocsr()\nX_test_merge = hstack((categories_one_hot_test, sub_cat_one_hot_test, school_state_one_hot_test, project_grade_cat_one_hot_test, teacher_prefix_cat_one_hot_test, price_data_test, quant_test, prev_no_projects_test,title_tfidf_w2v_test, essay_tfidf_w2v_test)).tocsr()\nX_cv_merge = hstack((categories_one_hot_cv, sub_cat_one_hot_cv, school_state_one_hot_cv,project_grade_cat_one_hot_cv, teacher_prefix_cat_one_hot_cv, price_data_cv, quant_cv, prev_no_projects_cv,title_tfidf_w2v_cv, essay_tfidf_w2v_cv)).tocsr()\n\nprint(\"Final Data matrix\")\nprint(\"=\"*100)\nprint(X_train_merge.shape, Y_train.shape)\nprint(X_cv_merge.shape, Y_test.shape)\nprint(X_test_merge.shape, Y_cv.shape)\nprint(\"=\"*100)","6c232e0f":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n# I am running on fewer k only as looping is taking atleast 4 hours for me\ntrain_auc = []\ncv_auc = []\n\nK = [1,5,21, 31, 41, 51, 71]\n\nfor i in K:\n    neigh = KNeighborsClassifier(n_neighbors=i)\n    neigh.fit(X_train_merge, Y_train)\n\n    y_train_pred = batch_predict(neigh, X_train_merge)    \n    y_cv_pred = batch_predict(neigh, X_cv_merge)\n          \n    train_auc.append(roc_auc_score(Y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.grid()\nplt.show()","eb8d8de0":"scor = [x for x in cv_auc]\nopt_t_cv_3 = K[scor.index(max(scor))]\nprint(\"Maximum AUC score of cv is:\" + ' ' + str(max(scor)))\nprint(\"Corresponding k value of cv is:\",opt_t_cv_3, '\\n')\nbest_k=opt_t_cv_3\n","e772a83b":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n\nneigh = KNeighborsClassifier(n_neighbors=best_k)\nneigh.fit(X_train_merge, Y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, X_train_merge)    \ny_test_pred = batch_predict(neigh, X_test_merge)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(Y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(Y_test, y_test_pred)\n\nplt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"True Positive Rate(TPR)\")\nplt.ylabel(\"False Positive Rate(FPR)\")\nplt.title(\"AUC\")\nplt.grid()\nplt.show()","e61c7097":"print(\"=\"*100)\nfrom sklearn.metrics import confusion_matrix\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))\nprint(\"=\"*100)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))\nprint(\"=\"*100)","4945fcac":"confusion_matr_tfidf_w2v_train = pd.DataFrame(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)), range(2),range(2))\n\nsns.set(font_scale=1.4)\nsns.heatmap(confusion_matr_tfidf_w2v_train, annot=True,annot_kws={\"size\": 16}, fmt='g')","5f606bf5":"confusion_matr_tfidf_w2v_test = pd.DataFrame(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))\n\nsns.set(font_scale=1.4)\nsns.heatmap(confusion_matr_tfidf_w2v_test, annot=True,annot_kws={\"size\": 16}, fmt='g')","32fbf566":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding\n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\n\n# Merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\n\nfrom scipy.sparse import hstack\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\nX_train_merge = hstack((categories_one_hot_train, sub_cat_one_hot_train, school_state_one_hot_train, project_grade_cat_one_hot_train, teacher_prefix_cat_one_hot_train, price_data_train, quant_train, prev_no_projects_train,title_tfidf_train, essay_tfidf_train)).tocsr()\nX_test_merge = hstack((categories_one_hot_test, sub_cat_one_hot_test, school_state_one_hot_test, project_grade_cat_one_hot_test, teacher_prefix_cat_one_hot_test, price_data_test, quant_test, prev_no_projects_test,title_tfidf_test, essay_tfidf_test)).tocsr()\nX_cv_merge = hstack((categories_one_hot_cv, sub_cat_one_hot_cv, school_state_one_hot_cv,project_grade_cat_one_hot_cv, teacher_prefix_cat_one_hot_cv, price_data_cv, quant_cv, prev_no_projects_cv,title_tfidf_cv, essay_tfidf_cv)).tocsr()\n\n##Select top 2000 features from feature Set 2 using `SelectKBest` and then apply KNN on top of these features\n\nselect_func = SelectKBest(chi2, k=2000).fit(X_train_merge, Y_train)\n\n\nX_train_2000 = select_func.transform(X_train_merge)\nX_test_2000 = select_func.transform(X_test_merge)\nX_cv_2000 = select_func.transform(X_cv_merge)\n\n\nprint(\"Final Data matrix\")\nprint(\"=\"*100)\nprint(X_train_2000.shape, Y_train.shape)\nprint(X_cv_2000.shape, Y_test.shape)\nprint(X_test_2000.shape, Y_cv.shape)\nprint(\"=\"*100)","f48b7b6a":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\n\nK = [1, 5, 15,  31, 41, 51, 65, 71]\n\nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i)\n    neigh.fit(X_train_2000, Y_train)\n\n    y_train_pred = batch_predict(neigh, X_train_2000)    \n    y_cv_pred = batch_predict(neigh, X_cv_2000)\n          \n    train_auc.append(roc_auc_score(Y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.grid(True)\nplt.show()","46fdd368":"scor = [x for x in cv_auc]\nopt_t_cv_4 = K[scor.index(max(scor))]\nprint(\"Maximum AUC score of cv is:\" + ' ' + str(max(scor)))\nprint(\"Corresponding k value of cv is:\",opt_t_cv_4, '\\n')\n\nbest_k=opt_t_cv_4","46a7c589":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n\nneigh = KNeighborsClassifier(n_neighbors=best_k)\nneigh.fit(X_train_2000, Y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, X_train_2000)    \ny_test_pred = batch_predict(neigh, X_test_2000)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(Y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(Y_test, y_test_pred)\n\nplt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"True Positive Rate(TPR)\")\nplt.ylabel(\"False Positive Rate(FPR)\")\nplt.title(\"AUC\")\nplt.grid(True)\nplt.show()","e7f44a4f":"print(\"=\"*100)\nfrom sklearn.metrics import confusion_matrix\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))\nprint(\"=\"*100)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))\nprint(\"=\"*100)","65af0abb":"confusion_mat_2000_train = pd.DataFrame(confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)), range(2),range(2))\nsns.set(font_scale=1.4)\nsns.heatmap(confusion_mat_2000_train, annot=True,annot_kws={\"size\": 16}, fmt='g')","981ad8f9":"confusion_mat_2000_test = pd.DataFrame(confusion_matrix(Y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))\nsns.set(font_scale=1.4)\nsns.heatmap(confusion_mat_2000_test, annot=True,annot_kws={\"size\": 16}, fmt='g')","d925c2de":"# Compare all your models using Prettytable library\n#http:\/\/zetcode.com\/python\/prettytable\/\n\nfrom prettytable import PrettyTable\n\nx_pretty_table = PrettyTable()\nx_pretty_table.field_names = [\"Model Type\",\"Vectorizer\", \"Hyper Parameter - K\",\"Train-AUC\",\"Test-AUC\"]\n\nx_pretty_table.add_row([\"KNN-Brute\",\"BOW\",65,0.67,0.62])\nx_pretty_table.add_row([ \"KNN-Brute\", \"TFIDF\",41,0.66, 0.56])\nx_pretty_table.add_row([ \"KNN-Brute\",\"AVG W2V\", 60,0.66, 0.59])\nx_pretty_table.add_row([ \"KNN-Brute\", \"TFIDF W2V\",71,0.61,0.55])\nx_pretty_table.add_row([ \"Top 2000 Features\",\"TFIDF\",71,0.67,0.55])\n\nprint(x_pretty_table)","7ea35626":"#### Train\/Test\/CV Data - TFIDF weighted W2V for essay","c34c626e":"## 1.1 Reading Data","12b2d678":"### One Hot Encode - Teacher_Prefix","603acc11":"#### 1.5.2.2 TFIDF vectorizer for essay","70029b10":"<h2>2.5 Feature selection with `SelectKBest` <\/h2>","2be87bb7":"<p>\nDonorsChoose.org receives hundreds of thousands of project proposals each year for classroom projects in need of funding. Right now, a large number of volunteers is needed to manually screen each submission before it's approved to be posted on the DonorsChoose.org website.\n<\/p>\n<p>\n    Next year, DonorsChoose.org expects to receive close to 500,000 project proposals. As a result, there are three main problems they need to solve:\n<ul>\n<li>\n    How to scale current manual processes and resources to screen 500,000 projects so that they can be posted as quickly and as efficiently as possible<\/li>\n    <li>How to increase the consistency of project vetting across different volunteers to improve the experience for teachers<\/li>\n    <li>How to focus volunteer time on the applications that need the most assistance<\/li>\n    <\/ul>\n<\/p>    \n<p>\nThe goal of the competition is to predict whether or not a DonorsChoose.org project proposal submitted by a teacher will be approved, using the text of project descriptions as well as additional metadata about the project, teacher, and school. DonorsChoose.org can then use this information to identify projects most likely to need further review before approval.\n<\/p>","4c006745":"#####  YOU SHOULD NOT DO LIKE THIS \nTaken from the sample solution notebook provided by the Applied AI Team \n\n1.  THE VOCABULARY SHOULD BUILT ONLY WITH THE WORDS OF TRAIN DATA\n    vectorizer = CountVectorizer()\n    x_train_bow = vectorizer.fit_transform(X_train)\n    x_cv_bow = vectorizer.fit_transform(X_cv)\n    x_test_bow = vectorizer.fit_transform(X_test)\n\n2.  DATA LEAKAGE PROBLEM: IF WE DO LIKE THIS WE ARE LOOKING AT THE TEST DATA BEFORE MODELING\n    vectorizer = CountVectorizer()\n    X_bow = vectorizer.fit_transfomr(X)\n    X_train, X_test, y_train, y_test = train_test_split(X_bow, Y, test_size=0.33)\n\n3. YOU SHOULD PASS THE PROBABILITY SCORES NOT THE PREDICTED VALUES\n    y_pred =  neigh.predict(X)\n    roc_auc_score(y_ture,y_pred)","52f09207":"#### Confusion matrix Heat Map - TEST","a95fbfe9":"### One Hot Encode - Project_Grade_Category","cfd5c036":"## 1.4.1 Project_grade preprocessing","6de15c0a":"### 1.5.2 Vectorizing Text data","37441e29":"#### Confusion Matrix heatmap - Train","a9449a1f":"# Confusion Matrix -Heat map - Train","c2714a5f":"## 1.3 preprocessing of `project_subject_subcategories`","4e51a564":"#### Confusion Matrix","276baad8":"# Confusion matrix -heat map - train","921b3430":"## About the DonorsChoose Data Set\n\nThe `train.csv` data set provided by DonorsChoose contains the following features:\n\nFeature | Description \n----------|---------------\n**`project_id`** | A unique identifier for the proposed project. **Example:** `p036502`   \n**`project_title`**    | Title of the project. **Examples:**<br><ul><li><code>Art Will Make You Happy!<\/code><\/li><li><code>First Grade Fun<\/code><\/li><\/ul> \n**`project_grade_category`** | Grade level of students for which the project is targeted. One of the following enumerated values: <br\/><ul><li><code>Grades PreK-2<\/code><\/li><li><code>Grades 3-5<\/code><\/li><li><code>Grades 6-8<\/code><\/li><li><code>Grades 9-12<\/code><\/li><\/ul>  \n **`project_subject_categories`** | One or more (comma-separated) subject categories for the project from the following enumerated list of values:  <br\/><ul><li><code>Applied Learning<\/code><\/li><li><code>Care &amp; Hunger<\/code><\/li><li><code>Health &amp; Sports<\/code><\/li><li><code>History &amp; Civics<\/code><\/li><li><code>Literacy &amp; Language<\/code><\/li><li><code>Math &amp; Science<\/code><\/li><li><code>Music &amp; The Arts<\/code><\/li><li><code>Special Needs<\/code><\/li><li><code>Warmth<\/code><\/li><\/ul><br\/> **Examples:** <br\/><ul><li><code>Music &amp; The Arts<\/code><\/li><li><code>Literacy &amp; Language, Math &amp; Science<\/code><\/li>  \n  **`school_state`** | State where school is located ([Two-letter U.S. postal code](https:\/\/en.wikipedia.org\/wiki\/List_of_U.S._state_abbreviations#Postal_codes)). **Example:** `WY`\n**`project_subject_subcategories`** | One or more (comma-separated) subject subcategories for the project. **Examples:** <br\/><ul><li><code>Literacy<\/code><\/li><li><code>Literature &amp; Writing, Social Sciences<\/code><\/li><\/ul> \n**`project_resource_summary`** | An explanation of the resources needed for the project. **Example:** <br\/><ul><li><code>My students need hands on literacy materials to manage sensory needs!<\/code<\/li><\/ul> \n**`project_essay_1`**    | First application essay<sup>*<\/sup>  \n**`project_essay_2`**    | Second application essay<sup>*<\/sup> \n**`project_essay_3`**    | Third application essay<sup>*<\/sup> \n**`project_essay_4`**    | Fourth application essay<sup>*<\/sup> \n**`project_submitted_datetime`** | Datetime when project application was submitted. **Example:** `2016-04-28 12:43:56.245`   \n**`teacher_id`** | A unique identifier for the teacher of the proposed project. **Example:** `bdf8baa8fedef6bfeec7ae4ff1c15c56`  \n**`teacher_prefix`** | Teacher's title. One of the following enumerated values: <br\/><ul><li><code>nan<\/code><\/li><li><code>Dr.<\/code><\/li><li><code>Mr.<\/code><\/li><li><code>Mrs.<\/code><\/li><li><code>Ms.<\/code><\/li><li><code>Teacher.<\/code><\/li><\/ul>  \n**`teacher_number_of_previously_posted_projects`** | Number of project applications previously submitted by the same teacher. **Example:** `2` \n\n<sup>*<\/sup> See the section <b>Notes on the Essay Data<\/b> for more details about these features.\n\nAdditionally, the `resources.csv` data set provides more data about the resources required for each project. Each line in this file represents a resource required by a project:\n\nFeature | Description \n----------|---------------\n**`id`** | A `project_id` value from the `train.csv` file.  **Example:** `p036502`   \n**`description`** | Desciption of the resource. **Example:** `Tenor Saxophone Reeds, Box of 25`   \n**`quantity`** | Quantity of the resource required. **Example:** `3`   \n**`price`** | Price of the resource required. **Example:** `9.95`   \n\n**Note:** Many projects require multiple resources. The `id` value corresponds to a `project_id` in train.csv, so you use it as a key to retrieve all resources needed for a project:\n\nThe data set contains the following label (the value you will attempt to predict):\n\nLabel | Description\n----------|---------------\n`project_is_approved` | A binary flag indicating whether DonorsChoose approved the project. A value of `0` indicates the project was not approved, and a value of `1` indicates the project was approved.","cd219f1c":"#### Confusion Matrix","e5caee3e":"#### Best hyper prameter using the ROC\/AUC higest value and K-fold cross validation.","8719e64c":"* fit () - lears the dictionary internally\n* transform() - It applies the learned vocalbulary to give the output , (BOW in this case) or document-term\n* fit_term () - combination of fit and transform() in one go\n","95f3bb26":"#### BOW of Project Titles - Train\/Test\/CV Data\u00b6","d23ff622":"#### Confusion Matrix","3fca7442":"#### 1.5.2.1 Bag of words","01fe5c34":"#### TFIDF vectorizer for Title","d4b9d3c9":"<h1>3. Conclusions<\/h1>","24c1b7e6":"<h2><font color='red'> 1.4 Preprocessing of `project_title`<\/font><\/h2>","5c3374e4":"\n#### Best Hyper paramter using the grid search.","83c9a434":"# DonorsChoose","a3cd6e07":"- https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/handling-categorical-and-numerical-features\/","5e77ab43":"### Split data into train,test and Cross validate","72ca8139":"## 1.5 Preparing data for models","4d7fb811":"####  Vectorizing teacher_number_of_previously_posted_projects ","2bfe646a":"## 1.3 Text preprocessing","6cf218de":"### 2.4.3 Applying KNN brute force on AVG W2V,<font color='red'> SET 3<\/font>","79e80926":"### 2.4.2 Applying KNN brute force on TFIDF,<font color='red'> SET 2<\/font>","ee08c3b1":"#### Train Model using the best value of K","f2b27e5a":"#### Vectorizing Quantity Feature","99e600d8":"### 2.4.1 Applying KNN brute force on BOW,<font color='red'> SET 1<\/font>","0c33419b":"<h1>2. K Nearest Neighbor<\/h1>","b86700fc":"#### Train\/Test\/CV Data - Avg-W2V for essay","b215a911":"### 1.5.1 Vectorizing Categorical data","7806d1b8":"# Assignment 3: Apply KNN","5313cbab":"### Confusion Matrix - heat map - Test","b65c17ab":"### BOW of eassys - FOr Train\/Test\/CV Datasets","5efcda1f":"### Preprocessing teacher_prefix","1e88f107":"#### Train\/Test\/CV Data - TFIDF weighted W2V for Project Titles","fac68034":"we are going to consider\n\n       \n       - clean_categories : categorical data\n       - clean_subcategories : categorical data\n       - school_state : categorical data\n       - project_grade_category : categorical data\n       - teacher_prefix : categorical data\n       \n       - preprocessed_titles: text data\n       - preprocessed_essays : text data\n\n       \n       - quantity : numerical (optinal)\n       - teacher_number_of_previously_posted_projects : numerical\n       - price : numerical","6289c57c":"#### Confusion Matrix","d4f9fdf8":"#### 1.5.2.3 Using Pretrained Models: Avg W2V","5c39e9b2":"### Confusion Matrix - Heat map -train.","bd155313":"#### 1.5.2.3 Using Pretrained Models: TFIDF weighted W2V","a5e6b587":"# Confusion matrix -heat map - test","2e7b10fc":"<h4><font color='red'>Note: Data Leakage<\/font><\/h4>\n\n1. There will be an issue of data-leakage if you vectorize the entire data and then split it into train\/cv\/test.\n2. To avoid the issue of data-leakag, make sure to split your data first and then vectorize it. \n3. While vectorizing your data, apply the method fit_transform() on you train data, and apply the method transform() on cv\/test data.\n4. For more details please go through this <a href='https:\/\/soundcloud.com\/applied-ai-course\/leakage-bow-and-tfidf'>link.<\/a>","c33daedb":"### 1.5.3 Vectorizing Numerical features","c6cfd761":"### As asked to defferentiate betwenn fit (), fit_transform()  and transform () in previous suggestion .","e0a98e01":"<ol>\n    <li><strong>[Task-1] Apply KNN(brute force version) on these feature sets<\/strong>\n        <ul>\n            <li><font color='red'>Set 1<\/font>: categorical, numerical features + project_title(BOW) + preprocessed_essay (BOW)<\/li>\n            <li><font color='red'>Set 2<\/font>: categorical, numerical features + project_title(TFIDF)+  preprocessed_essay (TFIDF)<\/li>\n            <li><font color='red'>Set 3<\/font>: categorical, numerical features + project_title(AVG W2V)+  preprocessed_essay (AVG W2V)<\/li>\n            <li><font color='red'>Set 4<\/font>: categorical, numerical features + project_title(TFIDF W2V)+  preprocessed_essay (TFIDF W2V)<\/li>\n        <\/ul>\n    <\/li>\n    <br>\n    <li><strong>Hyper paramter tuning to find best K<\/strong>\n        <ul>\n    <li>Find the best hyper parameter which results in the maximum <a href='https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/receiver-operating-characteristic-curve-roc-curve-and-auc-1\/'>AUC<\/a> value<\/li>\n    <li>Find the best hyper paramter using k-fold cross validation (or) simple cross validation data<\/li>\n    <li>Use gridsearch-cv or randomsearch-cv or  write your own for loops to do this task<\/li>\n        <\/ul>\n    <\/li>\n    <br>\n    <li>\n    <strong>Representation of results<\/strong>\n        <ul>\n    <li>You need to plot the performance of model both on train data and cross validation data for each hyper parameter, as shown in the figure\n    <img src='train_cv_auc.JPG' width=300px><\/li>\n    <li>Once you find the best hyper parameter, you need to train your model-M using the best hyper-param. Now, find the AUC on test data and plot the ROC curve on both train and test using model-M.\n    <img src='train_test_auc.JPG' width=300px><\/li>\n    <li>Along with plotting ROC curve, you need to print the <a href='https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/confusion-matrix-tpr-fpr-fnr-tnr-1\/'>confusion matrix<\/a> with predicted and original labels of test data points\n    <img src='confusion_matrix.png' width=300px><\/li>\n        <\/ul>\n    <\/li>\n    <li><strong> [Task-2] <\/strong>\n        <ul>\n            <li>Select top 2000 features from feature <font color='red'>Set 2<\/font> using <a href='https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_selection.SelectKBest.html'>`SelectKBest`<\/a>\nand then apply KNN on top of these features<\/li>\n            <li>\n                <pre>\n                from sklearn.datasets import load_digits\n                from sklearn.feature_selection import SelectKBest, chi2\n                X, y = load_digits(return_X_y=True)\n                X.shape\n                X_new = SelectKBest(chi2, k=20).fit_transform(X, y)\n                X_new.shape\n                ========\n                output:\n                (1797, 64)\n                (1797, 20)\n                <\/pre>\n            <\/li>\n            <li>Repeat the steps 2 and 3 on the data matrix after feature selection<\/li>\n        <\/ul>\n    <\/li>\n    <br>\n    <li><strong>Conclusion<\/strong>\n        <ul>\n    <li>You need to summarize the results at the end of the notebook, summarize it in the table format. To print out a table please refer to this prettytable library<a href='http:\/\/zetcode.com\/python\/prettytable\/'> link<\/a> \n        <img src='summary.JPG' width=400px>\n    <\/li>\n        <\/ul>\n<\/ol>","0a77cbaa":"# Confusion Matrix -Heat map - test","b3a2e06b":"## 1.2 preprocessing of `project_subject_categories`","7483a3e7":"### Notes on the Essay Data\n\n<ul>\nPrior to May 17, 2016, the prompts for the essays were as follows:\n<li>__project_essay_1:__ \"Introduce us to your classroom\"<\/li>\n<li>__project_essay_2:__ \"Tell us more about your students\"<\/li>\n<li>__project_essay_3:__ \"Describe how your students will use the materials you're requesting\"<\/li>\n<li>__project_essay_3:__ \"Close by sharing why your project will make a difference\"<\/li>\n<\/ul>\n\n\n<ul>\nStarting on May 17, 2016, the number of essays was reduced from 4 to 2, and the prompts for the first 2 essays were changed to the following:<br>\n<li>__project_essay_1:__ \"Describe your students: What makes your students special? Specific details about their background, your neighborhood, and your school are all helpful.\"<\/li>\n<li>__project_essay_2:__ \"About your project: How will these materials make a difference in your students' learning and improve their school lives?\"<\/li>\n<br>For all projects with project_submitted_datetime of 2016-05-17 and later, the values of project_essay_3 and project_essay_4 will be NaN.\n<\/ul>\n","270de9d6":"#### Train\/Test\/CV  Data - Avg-W2V for essay","1886bc7b":"#### Confusion Matrix - Heat map - TEST data.","bd240f25":"### One Hot Encode - Clean_Categories","b887c69e":"### Confusion Matrix - heat map - Train","5ccaa881":"#### Confusion Matrix","1f1a5909":"### One Hot Encode - School_States","20e21187":"### One Hot Encode - Clean_Sub-Categories","a492ff99":"### 2.4.4 Applying KNN brute force on TFIDF W2V,<font color='red'> SET 4<\/font>"}}