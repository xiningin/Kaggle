{"cell_type":{"80f0fded":"code","dbd46162":"code","fbe89d52":"code","82a0c54a":"code","123f026c":"code","f293e632":"code","9a932e3e":"code","5069a4b9":"code","a4f0884b":"code","1a4eb523":"code","7a3cc7fc":"code","730035fb":"code","842cae12":"code","6ad1ff6c":"code","2eec1d0c":"code","5df68ad8":"code","4bc4658d":"code","42450377":"code","d2f05b86":"code","2f8223ef":"markdown","3504c048":"markdown","b282b35e":"markdown"},"source":{"80f0fded":"# 22p22c0589_Naratip_W2H3_27092020","dbd46162":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbe89d52":"df = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf","82a0c54a":"df.info()","123f026c":"# \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e21\u0e35\u0e1b\u0e23\u0e34\u0e21\u0e32\u0e13\u0e40\u0e22\u0e2d\u0e30\u0e41\u0e25\u0e30\u0e31\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e44\u0e21\u0e48\u0e1c\u0e48\u0e32\u0e19\u0e08\u0e36\u0e07 \u0e17\u0e33\u0e01\u0e32\u0e23 scope data \u0e25\u0e07\u0e21\u0e32\n# \u0e43\u0e0a\u0e49 data \u0e02\u0e2d\u0e07\u0e04\u0e37\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e48\u0e33 < 7\u0e27\u0e31\u0e19(\u0e04\u0e34\u0e14\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e23\u0e30\u0e22\u0e30\u0e40\u0e27\u0e25\u0e32\u0e04\u0e37\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e48\u0e33\u0e17\u0e35\u0e48\u0e1e\u0e2d\u0e23\u0e31\u0e1a\u0e44\u0e14\u0e49\u0e21\u0e32\u0e01\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14 \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e1e\u0e31\u0e01)\n# \u0e41\u0e25\u0e30\u0e21\u0e35\u0e2b\u0e49\u0e2d\u0e07\u0e27\u0e48\u0e32\u0e07 \u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 2 \u0e27\u0e31\u0e19\u0e43\u0e19\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e1b\u0e35 \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e49\u0e2d\u0e22(\u0e04\u0e34\u0e14\u0e27\u0e48\u0e32 \u0e16\u0e49\u0e32\u0e15\u0e48\u0e33\u0e01\u0e27\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19\u0e2b\u0e49\u0e2d\u0e07\u0e1e\u0e31\u0e01\u0e17\u0e35\u0e48\u0e19\u0e48\u0e32\u0e08\u0e30\u0e44\u0e21\u0e48\u0e23\u0e31\u0e1a\u0e19\u0e31\u0e01\u0e17\u0e48\u0e2d\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e27\u0e41\u0e25\u0e49\u0e27\u0e41\u0e15\u0e48\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e22\u0e31\u0e07\u0e04\u0e49\u0e32\u0e07\u0e43\u0e19\u0e23\u0e30\u0e1a\u0e1a)\ndf = df[df['minimum_nights'] <= 7]\ndf = df[df['availability_365'] >= 2]","f293e632":"# drop \u0e41\u0e16\u0e27\u0e02\u0e2d\u0e07 data \u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e04\u0e48\u0e32 \u0e43\u0e19\u0e04\u0e2d\u0e25\u0e31\u0e49\u0e21\u0e17\u0e35\u0e48 fill \u0e04\u0e48\u0e32\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e22\u0e32\u0e01\ndf = df.dropna(subset=['name'])\ndf = df.dropna(subset=['neighbourhood_group'])\n# dataframe2 = dataframe.dropna(axis=0)","9a932e3e":"#check unique of neighbourhood_group\ndf['neighbourhood_group'].unique()","5069a4b9":"\ndf.drop(['id', 'host_id', 'host_name','last_review','reviews_per_month','calculated_host_listings_count','availability_365','neighbourhood'], 1, inplace=True)\ndf = df.reset_index(drop=True)\ndf","a4f0884b":"#One hot encoding\ndf_cal = pd.get_dummies(df, columns=['room_type','neighbourhood_group'],drop_first = False)","1a4eb523":"df_cal.columns","7a3cc7fc":"# splite binary data to other dataframe\ndf_bi = df_cal[['room_type_Entire home\/apt',\n       'room_type_Private room', 'room_type_Shared room',\n       'neighbourhood_group_Bronx', 'neighbourhood_group_Brooklyn',\n       'neighbourhood_group_Manhattan', 'neighbourhood_group_Queens',\n       'neighbourhood_group_Staten Island']]","730035fb":"from sklearn import preprocessing\nfrom sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as sch # draw dendrogram\nimport matplotlib.pyplot as plt\nimport seaborn as sns","842cae12":"# Standardization in some coulumn\ncols = ['price','minimum_nights','number_of_reviews']\npt = preprocessing.PowerTransformer(method='yeo-johnson', standardize=True) # support only positive value\nmat = pt.fit_transform(df_cal[cols])\n\n# comnine data that do Standardization with data that do one hot encode\nX = pd.DataFrame(mat, columns=cols)\nX = pd.concat([X, df_bi], axis=1)\nX","6ad1ff6c":"# hierarchical clustering\nhc = AgglomerativeClustering(n_clusters=6, linkage='ward')\nhc.fit(X)\nhc.labels_","2eec1d0c":"df['cluster'] = hc.labels_","5df68ad8":"df.groupby('cluster').head(3).sort_values('cluster')","4bc4658d":"# heatmap by cluster\nX['cluster']=hc.labels_\nfig, ax = plt.subplots(figsize=(20, 4))\n\nsns.heatmap(X.groupby('cluster').median(), cmap=\"Blues\", linewidths=1, \n            square=True, annot=True, fmt='.2f', ax=ax ,vmin=0, vmax=1);","42450377":"# Dendrogram\nfig, ax=plt.subplots(figsize=(60, 40))\ndg=sch.dendrogram(sch.linkage(X[:3000], method='ward'), ax=ax, labels=df['name'].values)","d2f05b86":"# Earth map\nimport folium\nfrom folium.plugins import MarkerCluster\n\ndata = df[:1000]\ndetails_col = 'name'.split()\nx = 'latitude'\ny = 'longitude'\n\nworld_map_final = folium.Map(location=[40.7128,-74.0060 ],tiles='cartodbpositron',zoom_start=11) \n# world_map= folium.Map(tiles=\"OpenStreetMap\")\n\nfor i in range(len(data)):\n    lat = data.iloc[i][x]\n    long = data.iloc[i][y]\n    radius = 4\n    popup_text = \"\"\"{}<br>\"\"\"\n    popup_text = popup_text.format(df[details_col].iloc[i])\n\n    if df['cluster'][i] == 0:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='blue').add_to(world_map_final)\n    elif df['cluster'][i] == 1:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='lightblue').add_to(world_map_final)\n    elif df['cluster'][i] == 5:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='darkblue').add_to(world_map_final)\n    elif df['cluster'][i] == 2:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='green').add_to(world_map_final)\n    elif df['cluster'][i] == 3:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='lightgreen').add_to(world_map_final)\n    elif df['cluster'][i] == 4:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='yellow').add_to(world_map_final)\n\nworld_map_final","2f8223ef":"# Preprocessing","3504c048":"# Model clustering","b282b35e":"# Visualization"}}