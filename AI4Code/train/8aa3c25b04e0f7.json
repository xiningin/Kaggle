{"cell_type":{"18d00cdb":"code","d2248cb8":"code","7deea683":"code","680d05b7":"code","fdf555fb":"code","ebaf83a3":"code","bad0b56e":"code","a1c4147c":"code","4e03bfa1":"code","843e813b":"code","236853b0":"code","bd6b2adb":"code","291a3b96":"code","b6ef04df":"code","f5e034d2":"code","95fe8872":"code","3ab00488":"code","5892a42b":"code","39c854c6":"code","00ac9b97":"code","decb8096":"code","3fd95706":"code","1907246a":"code","4b158fa5":"code","2826f7ac":"code","3657e286":"code","94c1deed":"code","e861d7cf":"code","134189d6":"code","fea871ac":"code","63b9f8fc":"code","8b4266d4":"code","a4f0a277":"code","324e1ed5":"code","afef4dbd":"code","0bc07ae0":"code","3a15ddae":"code","fc13e728":"code","8c409d01":"code","121312cc":"code","225dc2f2":"code","1a89342b":"code","ccdc6d5a":"code","56ead5f8":"code","b5193878":"code","bf5b899e":"code","6d760b84":"code","84ce2b71":"markdown","1e3559e3":"markdown","7d464517":"markdown","f438ba4d":"markdown","243f8510":"markdown","70264474":"markdown","10cc2910":"markdown","658d9e22":"markdown","bec3363f":"markdown","7af360d2":"markdown","341ce244":"markdown","f6137db0":"markdown","5df65909":"markdown"},"source":{"18d00cdb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d2248cb8":"# data analysis\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier","7deea683":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ncombine = [train_df, test_df]","680d05b7":"train_df.columns","fdf555fb":"test_df.columns","ebaf83a3":"train_df.head(5)","bad0b56e":"test_df.head(5)","a1c4147c":"train_df.info()","4e03bfa1":"test_df.info()","843e813b":"train_df.describe().T","236853b0":"test_df.describe().T","bd6b2adb":"train_df.shape","291a3b96":"test_df.shape","b6ef04df":"train_df.isna().sum()","f5e034d2":"test_df.isna().sum()","95fe8872":"train_df.head(2)","3ab00488":"plt.figure(figsize=(15,5))\nsns.barplot(x=\"Parch\", y=\"Survived\", hue=\"Sex\", data=train_df)\nplt.show()","5892a42b":"plt.figure(figsize=(15,5))\nsns.barplot(x=\"Embarked\", y=\"Survived\", hue=\"Sex\", data=train_df)\nplt.show()","39c854c6":"plt.figure(figsize=(15,5))\nsns.barplot(x=\"SibSp\", y=\"Survived\", hue=\"Sex\", data=train_df)\nplt.show()","00ac9b97":"train_df[\"SibSp\"].value_counts()","decb8096":"f,ax = plt.subplots(3,4,figsize=(20,16))\nsns.countplot('Pclass',data=train_df,ax=ax[0,0])\nsns.countplot('Sex',data=train_df,ax=ax[0,1])\nsns.boxplot(x='Pclass',y='Age',data=train_df,ax=ax[0,2])\nsns.countplot('SibSp',hue='Survived',data=train_df,ax=ax[0,3],palette='husl')\nsns.distplot(train_df['Fare'].dropna(),ax=ax[2,0],kde=False,color='b')\nsns.countplot('Embarked',data=train_df,ax=ax[2,2])\n\nsns.countplot('Pclass',hue='Survived',data=train_df,ax=ax[1,0],palette='husl')\nsns.countplot('Sex',hue='Survived',data=train_df,ax=ax[1,1],palette='husl')\nsns.distplot(train_df[train_df['Survived']==0]['Age'].dropna(),ax=ax[1,2],kde=False,color='r',bins=5)\nsns.distplot(train_df[train_df['Survived']==1]['Age'].dropna(),ax=ax[1,2],kde=False,color='g',bins=5)\nsns.countplot('Parch',hue='Survived',data=train_df,ax=ax[1,3],palette='husl')\nsns.swarmplot(x='Pclass',y='Fare',hue='Survived',data=train_df,palette='husl',ax=ax[2,1])\nsns.countplot('Embarked',hue='Survived',data=train_df,ax=ax[2,3],palette='husl')\n\nax[0,0].set_title('Total Passengers by Class')\nax[0,1].set_title('Total Passengers by Gender')\nax[0,2].set_title('Age Box Plot By Class')\nax[0,3].set_title('Survival Rate by SibSp')\nax[1,0].set_title('Survival Rate by Class')\nax[1,1].set_title('Survival Rate by Gender')\nax[1,2].set_title('Survival Rate by Age')\nax[1,3].set_title('Survival Rate by Parch')\nax[2,0].set_title('Fare Distribution')\nax[2,1].set_title('Survival Rate by Fare and Pclass')\nax[2,2].set_title('Total Passengers by Embarked')\nax[2,3].set_title('Survival Rate by Embarked')","3fd95706":"train_df","1907246a":"train_df = train_df.drop(['PassengerId'], axis=1)","4b158fa5":"# we can now drop the cabin feature\ntrain_df = train_df.drop(['Cabin'], axis=1)\ntest_df = test_df.drop(['Cabin'], axis=1)","2826f7ac":"train_df[\"Age\"].isna().sum()","3657e286":"train_df.Age = train_df.Age.fillna(train_df.Age.mean())\ntrain_df","94c1deed":"train_df['Embarked'].describe()","e861d7cf":"common_value = 'S'\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(common_value)","134189d6":"train_df.info()","fea871ac":"data = [train_df, test_df]\nfor dataset in data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset[\"Fare\"].astype(int)","63b9f8fc":"train_df = train_df.drop(['Name'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)","8b4266d4":"genders = {\"male\":0, \"female\":1}\ndata = [train_df, test_df]\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genders)","a4f0a277":"train_df.head(2)","324e1ed5":"train_df['Ticket'].describe()","afef4dbd":"train_df = train_df.drop(['Ticket'], axis=1)\ntest_df = test_df.drop(['Ticket'], axis=1)","0bc07ae0":"train_df[\"Embarked\"].value_counts()","3a15ddae":"port = {\"S\":0, \"C\":1, \"Q\":2}\ndata = [train_df, test_df]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(port)","fc13e728":"test_df.fillna(test_df.mean(), inplace=True)","8c409d01":"test_df.isna().sum()","121312cc":"data = [train_df, test_df]\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].astype(int)\n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6\n    dataset.loc[ dataset['Age'] > 66, 'Age'] = 6","225dc2f2":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()","1a89342b":"# Logistic Regression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nprint(round(acc_log,2,), \"%\")","ccdc6d5a":"# Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","56ead5f8":"# Gaussian Naive Bayes\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\n\nY_pred = gaussian.predict(X_test)\n\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nprint(round(acc_gaussian,2,), \"%\")","b5193878":"# Decision Tree\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\n\nY_pred = decision_tree.predict(X_test)\n\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nprint(round(acc_decision_tree,2,), \"%\")","bf5b899e":"results = pd.DataFrame({\n    'Model': ['Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Decision Tree'],\n    'Score': [acc_log, acc_random_forest, acc_gaussian,\n              acc_decision_tree]})\nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df.head(9)","6d760b84":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_prediction\n    })\nsubmission.to_csv('submission.csv', index=False)","84ce2b71":"**Since the Ticket attribute has 681 unique tickets, it will be a bit tricky to convert them into useful categories. So we will drop it from the dataset.**","1e3559e3":"**Problem Statement:** Knowing from a training set of samples listing passengers who survived or did not survive the Titanic disaster. Can our model determine based on a given test dataset not containing the survival information, if these passengers in the test dataset survived or not.","7d464517":"**Convert \"Embarked\" feature into numeric**","f438ba4d":"Creating Categories:\nWe will now create categories.\n\nAge: First we will convert it from float into integer.\nwe will create the new 'AgeGroup\" variable, by categorizing every age into a group.","243f8510":"pclass: A proxy for socio-economic status (SES)\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.","70264474":"**Categorical**: Survived, Sex, and Embarked\n\n**Ordinal**: Pclass\n\n**Continous**: Age, Fare\n\n**Discrete**: SibSp, Parch","10cc2910":"**Analysis goal**\n\nThe Survived variable is the outcome or dependent variable. It is a binary nominal datatype of 1 for \"survived\" and 0 for \"did not survive\". All other variables are potential predictor or independent variables. The goal is to predict this dependent variable only using the available independent variables. A test dataset has been created to test our algorithm.\n","658d9e22":"\n**Some Predictions:**\n\n    Sex: Females are more likely to survive.\n    SibSp\/Parch: People traveling alone are more likely to survive.\n    Age: Young children are more likely to survive.\n    Pclass: People of higher socioeconomic class are more likely to survive.\n\n","bec3363f":"**Observations**:\n\n*     There are a total of 891 passengers in our training set.\n*     The Age feature is missing approximately 19.87 % of its values. I guess that the Age feature is pretty important to survival, so we should probably attempt to fill these gaps.\n*     The Cabin feature is missing approximately 77.1% of its values. Since so much of the feature is missing, it would be hard to fill in the missing values. We'll probably drop these values from our dataset.\n*     The Embarked feature is missing 0.22% of its values, which should be relatively harmless.","7af360d2":"**Above you can see that 'Fare' is a float and we have to deal with 4 categorical features: Name, Sex, Ticket and Embarked. Lets investigate and transform one after another.**","341ce244":"**MIXED data types**  - Numerical, ALPHANumeric data within same columns or Features. \n\nTicket Column is a MIX of numeric and alphanumeric data types. Cabin Column is ALPHANumeric.\n","f6137db0":"\n**Acquire data**\n\nThe Python Pandas packages helps us work with our datasets. We start by acquiring the training and testing datasets into Pandas DataFrames. We also combine these datasets to run certain operations on both datasets together.\n","5df65909":"**Data Visualization**"}}