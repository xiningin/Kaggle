{"cell_type":{"37b379ea":"code","8f3e0d5a":"code","574c7829":"code","de8c4940":"code","56658d87":"code","ef614081":"code","196f763a":"code","34ccbbe4":"code","31942aba":"code","3975c3ab":"code","d03f05fa":"code","8e6ded09":"code","43112517":"code","f7cf0c7d":"code","454e6c7a":"code","1eefbf60":"code","f238fbb2":"markdown","d8cfeb61":"markdown","2de48bc0":"markdown","d45e1792":"markdown","42e54bff":"markdown","1676f1b2":"markdown","6e395478":"markdown","8ef1ddd9":"markdown","9273d3a2":"markdown","f80e3f89":"markdown","6050b397":"markdown"},"source":{"37b379ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #Plotting\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f3e0d5a":"df1 = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_deaths.csv')\ndisplay('Deaths DF - Data SnapShot',df1.tail(3))","574c7829":"#Get Total Deaths for Each Country\ndf1a = df1.sum(axis = 0).reset_index()\n#Remove Row which isn't a date\ndf1a = df1a.iloc[1: , :]\n#Rename Column \ndf1a = df1a.rename(columns = {0:\"Deaths\", 'index' : 'Country'})\n\n#New DF for Deaths Sum\ndf1_final = pd.DataFrame()\n\nfor a,b in df1a.iterrows():\n    try:\n        if b['Deaths'] % 1 == 0:\n            df1_final = df1_final.append(b)\n    except:\n        pass\ndf1_final = df1_final.sort_values('Deaths',ascending = False)","de8c4940":"df1_final.set_index('Country').head(10)","56658d87":"df1_final.set_index('Country').\\\n    plot(kind = 'pie',y ='Deaths', \\\n         legend = False,ylabel = '',\\\n         title = 'Deaths By Country',\\\n         fontsize = 10,\\\n         figsize = (10,10))","ef614081":"df2 = pd.read_csv('..\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_confirmed_cases.csv')\ndisplay('Cases DF - Data SnapShot',df1.tail(2))","196f763a":"#Get Total Deaths for Each Country\ndf2a = df2.sum(axis = 0).reset_index()\n#Remove Row which isn't a date\ndf2a = df2a.iloc[1: , :]\n#Rename Column \ndf2a = df2a.rename(columns = {0:\"Cases\",'index':'Country'})\n#New DF for Global Sums\ndf2a_final = pd.DataFrame()\n\nfor a,b in df2a.iterrows():\n    try:\n        if b['Cases'] % 1 == 0:\n            df2a_final = df2a_final.append(b)\n    except:\n        pass\n#Sort Death Count Descending\ndf2a_final = df2a_final.sort_values('Cases',ascending = False)","34ccbbe4":"df2a_final.set_index('Country').head(10)","31942aba":"df2a_final.set_index('Country').\\\n    plot(kind = 'pie',y ='Cases', \\\n         legend = False,ylabel = '',\\\n         title = 'Cases By Country',\\\n         fontsize = 10,\\\n         figsize = (10,10))","3975c3ab":"df1 = df1.iloc[1: , :]\ndf2 = df2.iloc[1: , :]","d03f05fa":"countries = df1.columns[1:]","8e6ded09":"deaths_df_window = pd.DataFrame() \ncases_df_window = pd.DataFrame()\nfor a in countries:\n    try:\n        aa = df1[['Country\/Region',a]].rolling(window=7).sum()[-30:]\n        deaths_df_window = pd.concat([deaths_df_window,aa],axis = 1)\n        \n        b = df2[['Country\/Region',a]].rolling(window=7).sum()[-30:]\n        cases_df_window = pd.concat([cases_df_window,b],axis = 1)\n    except:\n        pass\n\ndeaths_df_window.tail()","43112517":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize = (15,15))\nfig_df1 = deaths_df_window.iloc[-1].sort_values(ascending = False)[:25].reset_index()\nfig_df1 = fig_df1.rename(columns = {fig_df1.columns[0]:'Country',fig_df1.columns[1]:'values'})\n\nfig_df2 = cases_df_window.iloc[-1].sort_values(ascending = False)[:25].reset_index()\nfig_df2 = fig_df2.rename(columns = {fig_df2 .columns[0]:'Country',fig_df2 .columns[1]:'values'})\n\ndisplay(fig_df1.head())\ndisplay(fig_df2.head())\n\naxes[0].barh(fig_df1['Country'],fig_df1['values'])\naxes[0].set_title(\"Top 25 Countries with Most Deaths in the Past 7 Days\")\naxes[0].set_xlabel(\"Deaths\")\naxes[0].set_ylabel(\"Countries\")\n\naxes[1].barh(fig_df2['Country'],fig_df2['values'])\naxes[1].set_xlabel(\"Cases\")\naxes[1].set_title(\"Top 25 Countries with Most Cases in Past 7 Days\")\naxes[1].set_ylabel(\"Countries\")","f7cf0c7d":"cases_df_window[-20:].mean().sort_values(ascending = False)[:25].plot(kind = 'barh',figsize = (10,5),title = 'Top 25 countries with highest mean Cases of last 20 rolling windows')\nplt.show()\ndeaths_df_window[-20:].mean().sort_values(ascending = False)[:25].plot(kind = 'barh',figsize = (10,5),title = 'Top 25 countries with highest mean Deaths of last 20 rolling windows')\nplt.show()","454e6c7a":"deaths_df_window_3 = pd.DataFrame() \ncases_df_window_3 = pd.DataFrame()\nfor a in countries:\n    try:\n        aa = df1[['Country\/Region',a]].rolling(window=3).sum()[-30:]\n        deaths_df_window_3 = pd.concat([deaths_df_window_3,aa],axis = 1)\n        \n        b = df2[['Country\/Region',a]].rolling(window=3).sum()[-30:]\n        cases_df_window_3 = pd.concat([cases_df_window_3,b],axis = 1)\n    except:\n        pass\ndeaths_df_window_3.head()","1eefbf60":"cases_df_window_3[-20:].mean().sort_values(ascending = False)[:25].plot(kind = 'barh',figsize = (10,5),title = 'Top 25 countries with highest mean Cases of last 20 rolling windows')\nplt.show()\ndeaths_df_window_3[-20:].mean().sort_values(ascending = False)[:25].plot(kind = 'barh',figsize = (10,5),title = 'Top 25 countries with highest mean Deaths of last 20 rolling windows')\nplt.show()\n\ncases_df_window_3[-10:].mean().sort_values(ascending = False)[:25].plot(kind = 'barh',figsize = (10,5),title = 'Top 25 countries with highest mean Cases of last 10 rolling windows')\nplt.show()\ndeaths_df_window_3[-10:].mean().sort_values(ascending = False)[:25].plot(kind = 'barh',figsize = (10,5),title = 'Top 25 countries with highest mean Deaths of last 10 rolling windows')\nplt.show()","f238fbb2":"# Global Cases Data","d8cfeb61":"# Rolling Sums","2de48bc0":"## Death Plot","d45e1792":"### 7 Day window","42e54bff":"## Case Plot","1676f1b2":"## Load Death Data","6e395478":"## Top 10 Countries with highest case count ","8ef1ddd9":"## PreProcessing","9273d3a2":"# Global Death Data","f80e3f89":"### 3 Day window","6050b397":"## Top 10 Countries with highest death counts"}}