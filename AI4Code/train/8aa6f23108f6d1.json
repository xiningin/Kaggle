{"cell_type":{"21e54012":"code","4e8d3e49":"code","1d439906":"code","d67a3726":"code","33215f16":"code","abe32218":"code","aee55d1e":"code","12ee56a6":"code","621bf576":"code","cfe14ef6":"code","89d56577":"code","cbbf411d":"code","6c328b36":"code","0f4c5a14":"code","9f0d45e5":"code","845d0b7f":"code","d372d7cc":"code","00161b8d":"code","c55fd395":"code","3147962f":"code","0c9dee12":"code","feef3bcc":"code","7faa989b":"code","3f81760f":"code","e034e3be":"code","38e537f0":"code","0e415c41":"code","2c18c9db":"code","83cb73a3":"code","17492f3a":"code","fb9a3964":"code","aacacd91":"code","d7adcfd3":"code","8780f12e":"code","fea33c89":"code","99d0c7be":"markdown","612a2eb1":"markdown"},"source":{"21e54012":"#Import these packages \nimport pandas as pd \n\n#Import packages to visualize the data set\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n\n#normalization and standarization\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.preprocessing import StandardScaler","4e8d3e49":"#assaign the train and test datasets to different variables\n\ntrain_dataset = \"..\/input\/titanic\/train.csv\"\ntest_dataset_x = \"..\/input\/titanic\/test.csv\"\ntest_dataset_y = \"..\/input\/titanic\/gender_submission.csv\"","1d439906":"#read the csv files and print the sample rows from top, bottom and middle of the dataframe\n\ndf_train = pd.read_csv(train_dataset,delimiter= ',') \ndf_test_x = pd.read_csv(test_dataset_x, delimiter = ',')\ndf_test_y = pd.read_csv(test_dataset_y, delimiter = ',')\n\ndf_train.head()","d67a3726":"df_train.sample()","33215f16":"df_test_x.head()","abe32218":"df_test_x.sample()","aee55d1e":"df_train.info()","12ee56a6":"df_test_x.info()\ndf_test_y.info()","621bf576":"df_train.describe()","cfe14ef6":"#Dropping redundat columns\n\nto_drop = ['Name', 'SibSp', 'Parch','Ticket', 'Cabin']\n\ndf_train.drop(to_drop, inplace=True, axis=1)\ndf_test_x.drop(to_drop, inplace=True, axis=1)","89d56577":"df_train.head()","cbbf411d":"df_test_x.head()","6c328b36":"#Check if passengerId is a unique value\ndf_train['PassengerId'].is_unique","0f4c5a14":"#Set passenger ID to be the index of the data \ndf_train = df_train.set_index('PassengerId')\ndf_test_x = df_test_x.set_index('PassengerId')\ndf_test_y = df_test_y.set_index('PassengerId')","9f0d45e5":"df_test_x.head()\ndf_test_y.head()","845d0b7f":"#Visualizing the correlation between the training dataset \n\ncorrMatrix = df_train.corr()\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","d372d7cc":"missing_val_count_by_column_train = (df_train.isnull().sum())","00161b8d":"print(missing_val_count_by_column_train)\n","c55fd395":"clean_train = df_train.dropna(axis = 0, how ='any')  ","3147962f":"missing_val_count_by_column_train = (clean_train.isnull().sum())\nprint(missing_val_count_by_column_train)","0c9dee12":"clean_train.info()","feef3bcc":"# my_inds = [2,3,5]\n# somdata = clean_train.drop(my_inds)","7faa989b":"index_age = df_test_x['Age'].index[df_test_x['Age'].apply(np.isnan)]\nindex_fare = df_test_x['Fare'].index[df_test_x['Fare'].apply(np.isnan)]","3f81760f":"lst_index_age = index_age.tolist()\nlst_index_fare = index_fare.tolist()\nprint(index_age,lst_index_fare)\nprint(type(lst_index_age))\nprint(type(lst_index_fare))","e034e3be":"df_test_x = df_test_x.drop(lst_index_age)\ndf_test_x = df_test_x.drop(lst_index_fare)\n\ndf_test_y = df_test_y.drop(lst_index_age)\ndf_test_y = df_test_y.drop(lst_index_fare)\n\nprint(df_test_x.info())\nprint(df_test_y.info())","38e537f0":"missing_val_count_by_column_train = (clean_train.isnull().sum())\nprint(missing_val_count_by_column_train)","0e415c41":"# fare_train = clean_train['Fare']\n# age_train = clean_train['Age']\n\n# fare_train = clean_train.to_numpy()\n# age_train = clean_train.to_numpy()\n\n\n# fare_test = df_test_x['Fare']\n# age_test = df_test_x['Age']\n\n# fare_test = fare_test.to_numpy()\n# age_test = age_test.to_numpy()","2c18c9db":"print(type(clean_train['Fare']))","83cb73a3":"clean_train.head()","17492f3a":"cols_to_norm_train = clean_train.iloc[:, 3:5]\n\ncols_to_norm_train = cols_to_norm_train.apply(lambda x: (x - x.min()) \/ (x.max() - x.min()))","fb9a3964":"df_test_x.iloc[:, 2:4] = df_test_x.iloc[:, 2:4].apply(lambda x: (x - x.min()) \/ (x.max() - x.min()))","aacacd91":"clean_train.head()","d7adcfd3":"df_test_x.head()","8780f12e":"from sklearn.neighbors import KNeighborsClassifier\n\n\n\n# Create KNN classifier\n\n# knn = KNeighborsClassifier(n_neighbors = 3)\n\nx_train = clean_train.iloc[:, 1:6]\ny_train = clean_train.iloc[:, 0:1]\n\nprint(type(y_train))\n","fea33c89":"\nfrom sklearn.linear_model import LogisticRegression\n\nlogReg = LogisticRegression()\nlogReg.fit(x_train,y_train)\nacc = logReg.score(x_train,y_train)\nacc","99d0c7be":"# **In This notebook, I will be exploring the Titanic dataset**","612a2eb1":"After inspecting the dataset,redundant columns will be dropped and the passengerid will be changed to be the index of the dataframe"}}