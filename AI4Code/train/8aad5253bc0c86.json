{"cell_type":{"52147ec7":"code","a42dbe72":"code","c6c33c45":"code","5167a800":"code","55e854e5":"code","cb1efe6c":"code","28e2e2e6":"code","b6664ba3":"code","f2a58cdb":"code","491bf478":"code","548a65be":"code","20d03255":"code","f97e1f3b":"code","daa8d909":"code","7ad9681f":"code","662de45a":"code","a8894df9":"code","e3718c04":"code","b8d4a4ef":"code","de5d6079":"code","3bfb02ac":"code","e1711ca2":"code","e89692a9":"code","999f951c":"code","11a71bf4":"code","1e140eaf":"code","d95605b9":"code","a5480f7c":"code","e150938f":"code","dc0a4d71":"code","3aee77c3":"code","77878006":"code","5539d3a0":"code","fffa3be8":"code","da8540a6":"code","2e8d85f2":"code","dcc44358":"code","d18845cf":"code","ca279904":"code","ced33123":"code","f0887cf2":"code","7c39baa8":"code","0a7c7ac3":"code","9d7dce90":"code","000ab36b":"code","14f7eef4":"markdown","4cf39850":"markdown","9f237d88":"markdown","499c8838":"markdown","550a7f91":"markdown","0ea871fa":"markdown","7b4e5328":"markdown","d19da7eb":"markdown"},"source":{"52147ec7":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler","a42dbe72":"X_train=pd.read_csv('..\/input\/data_set_ALL_AML_train.csv')\nX_train.shape","c6c33c45":"y=pd.read_csv('..\/input\/actual.csv')\ny.shape","5167a800":"X_test=pd.read_csv('..\/input\/data_set_ALL_AML_independent.csv')\nX_test.shape","55e854e5":"X_test.head()","cb1efe6c":"# 1)  Remove \"call\" columns from training a test\ntrain_keepers = [col for col in X_train.columns if \"call\" not in col]\ntest_keepers = [col for col in X_test.columns if \"call\" not in col]\nX_train = X_train[train_keepers]\nX_test = X_test[test_keepers]","28e2e2e6":"X_train.shape,X_test.shape","b6664ba3":"X_train.head()","f2a58cdb":"X_train.head()","491bf478":"X_test.head()","548a65be":"# 2) Transpose\nX_train = X_train.T\nX_test = X_test.T\nX_train.head()","20d03255":"X_train.shape","f97e1f3b":"# 3) Clean up the column names for training data\nX_train.columns = X_train.iloc[1]\nX_train = X_train.drop([\"Gene Description\", \"Gene Accession Number\"]).apply(pd.to_numeric)\n\n# Clean up the column names for Testing data\nX_test.columns = X_test.iloc[1]\nX_test = X_test.drop([\"Gene Description\", \"Gene Accession Number\"]).apply(pd.to_numeric)\n\nX_train.head()","daa8d909":"X_train.shape,X_test.shape","7ad9681f":"# 4) Split into train and test \nX_train = X_train.reset_index(drop=True)\nprint(X_train.shape)\ny_train = y[y.patient <= 38].reset_index(drop=True)\n# Subet the rest for testing\nX_test = X_test.reset_index(drop=True)\ny_test = y[y.patient > 38].reset_index(drop=True)","662de45a":"scaler = StandardScaler()\nX_train_scl = scaler.fit_transform(X_train)\nX_test_scl = scaler.fit_transform(X_test)\nX_train.head()","a8894df9":"pca=PCA()\npca.fit_transform(X_train_scl)","e3718c04":"total=sum(pca.explained_variance_)\nk=0\ncurrent_variance=0\nwhile current_variance\/total < 0.90:\n    current_variance += pca.explained_variance_[k]\n    k=k+1\nk","b8d4a4ef":"pca = PCA(n_components=k)","de5d6079":"X_train_pca=pca.fit_transform(X_train_scl)\nX_test_pca=pca.transform(X_test_scl)","3bfb02ac":"import matplotlib.pyplot as plt\ncum_sum = pca.explained_variance_ratio_.cumsum()\ncum_sum = cum_sum*100\nplt.bar(range(k), cum_sum)\nplt.title(\"Around 90% of variance is explained by the 28 features\");","e1711ca2":"X_train_pca.shape, X_test_pca.shape","e89692a9":"y_train = y_train.replace({'ALL':0,'AML':1})","999f951c":"from sklearn import svm\nfrom sklearn.metrics import accuracy_score, confusion_matrix","11a71bf4":"from sklearn.model_selection import GridSearchCV","1e140eaf":"# Grid Search\n# Parameter Grid\nparam_grid = {'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001, 0.00001, 10]} \n# Make grid search classifier\nclf_grid = GridSearchCV(svm.SVC(), param_grid, verbose=1)\n\n# Train the classifier\nclf_grid.fit(X_train_pca, y_train.iloc[:,1])\n\n# clf = grid.best_estimator_()\nprint(\"Best Parameters:\\n\", clf_grid.best_params_)\nprint(\"Best Estimators:\\n\", clf_grid.best_estimator_)","d95605b9":"model = svm.SVC(kernel='rbf', C = 10.0, gamma=1e-05)","a5480f7c":"model.fit(X_train_pca,y_train.iloc[:,1])","e150938f":"pred=model.predict(X_test_pca)","dc0a4d71":"pred","3aee77c3":"y_test = y_test.replace({'ALL':0,'AML':1})","77878006":"pred=pred.tolist()","5539d3a0":"print('Accuracy: ', accuracy_score(y_test.iloc[:,1], pred))","fffa3be8":"import sklearn\nsklearn.metrics.confusion_matrix(y_test.iloc[:,1], pred)","da8540a6":"from sklearn.ensemble import GradientBoostingClassifier as XGB","2e8d85f2":"model= XGB(max_depth=5, loss='exponential', n_estimators=50, learning_rate=0.8, random_state=2018)","dcc44358":"model.fit(X_train_pca, y_train.iloc[:,1])","d18845cf":"pred = model.predict(X_test_pca)\nprint('Accuracy: ', accuracy_score(y_test.iloc[:,1], pred))","ca279904":"sklearn.metrics.confusion_matrix(y_test.iloc[:,1], pred)","ced33123":"import xgboost","f0887cf2":"model=xgboost.XGBClassifier()","7c39baa8":"model.fit(X_train_pca, y_train.iloc[:,1])","0a7c7ac3":"pred = model.predict(X_test_pca)","9d7dce90":"print('Accuracy: ', accuracy_score(y_test.iloc[:,1], pred))","000ab36b":"sklearn.metrics.confusion_matrix(y_test.iloc[:,1], pred)","14f7eef4":"# Support Vector Classification\u00b6","4cf39850":"# I use cross validation evaluation technique to optimize the model performance.","9f237d88":"# XGboost","499c8838":"# GradientBoostingClassifier","550a7f91":"#PCA\n#SVM\n# GridSearchCV\n#GradientBoostingClassifier\n#XGB","0ea871fa":"## Scale data","7b4e5328":"## Data Preprocessing (Standardization) and Dimensionality Reduction (PCA)","d19da7eb":"# Around 90% of variance is explained by 28 features"}}