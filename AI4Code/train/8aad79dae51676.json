{"cell_type":{"28f3df87":"code","affd81b8":"code","a0cb8558":"code","0d0261df":"code","d407760b":"code","4a950424":"code","3e1011f1":"code","829c1c0d":"code","fbe43c18":"code","2ddedcf3":"code","6221fa82":"code","c024fff0":"code","fc805799":"code","ebfd6e4d":"code","80dff8dc":"code","a6cc797f":"code","8689ce59":"code","dbaf768f":"code","58096799":"code","effe4e8d":"code","734b3aa9":"code","6f1933ae":"code","6e19d290":"code","ae2c57a2":"code","f592e543":"code","0bb1b0b9":"code","d62e1a9e":"code","4eaa125d":"code","b5ae71c8":"code","ef7f659d":"code","3e53452c":"code","09bec2c2":"markdown","185cb489":"markdown","68c5de24":"markdown","a36bfa1e":"markdown","403e5659":"markdown","b4e3956b":"markdown","8bfb3c39":"markdown","2d5f1cac":"markdown","e01e0444":"markdown","88f47bc5":"markdown","6e66f8e5":"markdown","ce489e22":"markdown","061c2b71":"markdown","04da1fa9":"markdown","feaa3287":"markdown","376069de":"markdown","785830e8":"markdown","a7c10d40":"markdown","912e7c1a":"markdown","bfd9ed8d":"markdown","004d6d79":"markdown","c76c60c4":"markdown","92233092":"markdown","386620d2":"markdown","e8a35c3a":"markdown"},"source":{"28f3df87":"# Temel\n\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\n\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\n\n# G\u00f6rselle\u015ftirme\n\nimport seaborn as sns\nimport plotly.express as px\nimport missingno as msno\n\n# Veri \u00d6n \u0130\u015fleme\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\n# Modelleme\n\nfrom sklearn.svm import SVC, NuSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\nfrom sklearn.neighbors import KNeighborsClassifier, NearestCentroid\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier, Perceptron, RidgeClassifier, PassiveAggressiveClassifier\n\n# De\u011ferlendirme & CV\n\nfrom sklearn.metrics import precision_score, accuracy_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold, RandomizedSearchCV","affd81b8":"colors_blue = [\"#132C33\",\"#264D58\",\"#17869E\",\"#51C4D3\",\"#B4DBE9\"]\ncolors_dark = [\"#1F1F1F\",\"#313131\",\"#636363\",\"#AEAEAE\",\"#DADADA\"]\ncolors_green = [\"#01411C\",\"#4B6F44\",\"#4F7942\",\"#74C365\",\"#D0F0C0\"]\n\nsns.palplot(colors_blue)\nsns.palplot(colors_green)\nsns.palplot(colors_dark)","a0cb8558":"df = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\ndf.head()","0d0261df":"df.info()","d407760b":"d = pd.DataFrame(df[\"Potability\"].value_counts())\n\nfig = px.pie(d, hole=0.4, opacity=0.6,\n             color_discrete_sequence=[colors_green[3],colors_blue[3]],\n             values=\"Potability\",\n             names=[\"\u0130\u00e7ilemez\",\"\u0130\u00e7ilebilir\"],\n             labels={\"Label\":\"Potability\", \"Potability\":\"miktar\"})\n\nfig.add_annotation(x=1.2, y=0.9, showarrow=False, font_size=12, opacity=0.7, font_family=\"monospace\",\n                   text=\"Dengeli bir veri k\u00fcmesi elde etmek i\u00e7in<br> verileri yeniden \u00f6rnekleyebiliriz\")\n\nfig.add_annotation(x=0.5, y=0.5, showarrow=False, font_size=14, opacity=0.7,\n                   font_family=\"monospace\", text=\"\u0130\u00e7ilebilirlik\")\n\nfig.update_layout(font_family=\"monospace\",\n    title=dict(text=\"\u0130\u00e7ilebilir su numunesi ka\u00e7 tanedir?\",\n               x=0.47, y=0.98, font = dict(color=colors_dark[2], size=20)),\n    legend=dict(x=0.37, y=-0.05, orientation=\"h\", traceorder=\"reversed\"),\n    hoverlabel=dict(bgcolor=\"white\"))\n\nfig.update_traces(textposition=\"outside\", textinfo=\"percent+label\")\n\nfig.show()","4a950424":"fig = px.histogram(df, x=\"Hardness\", y=Counter(df[\"Hardness\"]), \n                   color=\"Potability\", template=\"plotly_white\", marginal=\"box\",\n                   barmode=\"group\", histfunc=\"count\", opacity=0.7, nbins=100, \n                   color_discrete_sequence = [colors_green[3], colors_blue[3]])\n\nfig.add_vline(x=151, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\nfig.add_vline(x=301, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\nfig.add_vline(x=76, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\n\nfig.add_annotation(text=\"<76 mg\/L<br> yumu\u015fak kabul edilir\", x=40, y=130, showarrow=False, font_size=9)\nfig.add_annotation(text=\"76 ile 150 aras\u0131 (mg\/L)<br> orta derecede sert\", x=113, y=130, showarrow=False, font_size=9)\nfig.add_annotation(text=\"151 ile 300 (mg\/L)<br> aras\u0131 sert kabul edilir\", x=250, y=130, showarrow=False, font_size=9)\nfig.add_annotation(text=\">300 mg\/L<br> \u00e7ok sert kabul edilir\", x=340, y=130, showarrow=False, font_size=9)\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"Sertlik Da\u011f\u0131l\u0131m\u0131\", x=0.53, y=0.95, font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"Sertlik (mg\/L)\",\n                  yaxis_title_text=\"Miktar\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","3e1011f1":"fig = px.histogram(df, x=\"ph\", y=Counter(df[\"ph\"]), color=\"Potability\", template=\"plotly_white\",\n                   marginal=\"box\", barmode=\"group\", histfunc=\"count\", opacity=0.7, nbins=100, \n                   color_discrete_sequence=[colors_green[3],colors_blue[3]])\n\nfig.add_vline(x=7, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\n\nfig.add_annotation(text=\"<7 is Asidik\", x=4, y=70, showarrow=False, font_size=10)\nfig.add_annotation(text=\">7 is Bazik\", x=10, y=70, showarrow=False, font_size=10)\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"pH Seviyesi Da\u011f\u0131l\u0131m\u0131\", x=0.5, y=0.95, font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"pH Seviyesi\",\n                  yaxis_title_text=\"Miktar\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","829c1c0d":"fig = px.histogram(df, x=\"Solids\", y=Counter(df[\"Solids\"]), color=\"Potability\", template=\"plotly_white\",\n                   marginal=\"box\", barmode=\"group\",histfunc=\"count\", opacity=0.7, nbins=100, \n                   color_discrete_sequence=[colors_green[3],colors_blue[3]])\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"Toplam \u00c7\u00f6z\u00fcnm\u00fc\u015f Kat\u0131lar\u0131n Da\u011f\u0131l\u0131m\u0131\", x=0.5, y=0.95, \n                             font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"\u00c7\u00f6z\u00fcnm\u00fc\u015f Kat\u0131lar (ppm)\",\n                  yaxis_title_text=\"Miktar\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","fbe43c18":"fig = px.histogram(df, x=\"Chloramines\", y=Counter(df[\"Chloramines\"]), color=\"Potability\", template=\"plotly_white\",\n                   marginal=\"box\", barmode=\"group\",histfunc=\"count\", opacity=0.7, nbins=100, \n                   color_discrete_sequence=[colors_green[3],colors_blue[3]])\n\nfig.add_vline(x=4, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\n\nfig.add_annotation(text=\"<4 ppm i\u00e7mek<br> g\u00fcvenli kabul edilir\", x=1.8, y=90, showarrow=False)\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"Kloramin Da\u011f\u0131l\u0131m\u0131\", x=0.53, y=0.95, font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"Kloraminler (ppm)\",\n                  yaxis_title_text=\"Miktar\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","2ddedcf3":"fig = px.histogram(df, x=\"Sulfate\", y=Counter(df[\"Sulfate\"]), color=\"Potability\", template=\"plotly_white\",\n                   marginal=\"box\", barmode=\"group\", histfunc=\"count\", opacity=0.7, nbins=100,\n                   color_discrete_sequence=[colors_green[3],colors_blue[3]])\n\nfig.add_vline(x=250, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\n\nfig.add_annotation(text=\"<250 mg\/L i\u00e7mek<br> g\u00fcvenli kabul edilir\", x=175, y=90, showarrow=False)\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"S\u00fclfat Da\u011f\u0131l\u0131m\u0131\", x=0.53, y=0.95, font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"S\u00fclfat (mg\/L)\",\n                  yaxis_title_text=\"Count\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","6221fa82":"fig = px.histogram(df, x=\"Conductivity\", y=Counter(df[\"Conductivity\"]), color=\"Potability\", template=\"plotly_white\",\n                   marginal=\"box\", barmode=\"group\", histfunc=\"count\",\n                   opacity=0.7, nbins=100, color_discrete_sequence=[colors_green[3],colors_blue[3]])\n\nfig.add_annotation(text=\"\u0130letkenlik aral\u0131\u011f\u0131 hem (200-800)<br> hem de i\u00e7ilebilir ve i\u00e7ilebilir olmayan<br> sular i\u00e7in g\u00fcvenlidir.\",\n                   x=600, y=90, showarrow=False)\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"Conductivity Distribution\", x=0.5, y=0.95, font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"Conductivity (\u03bcS\/cm)\",\n                  yaxis_title_text=\"Count\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","c024fff0":"fig = px.histogram(df, x=\"Organic_carbon\", y=Counter(df[\"Organic_carbon\"]), color=\"Potability\", template=\"plotly_white\",\n                   marginal=\"box\", barmode=\"group\", histfunc=\"count\", opacity=0.7, nbins=100,\n                   color_discrete_sequence=[colors_green[3],colors_blue[3]])\n\nfig.add_vline(x=10, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\n\nfig.add_annotation(text=\"Tipik Organik Karbon seviyesi<br> 10 ppm'ye kadar\", x=5.3, y=110, showarrow=False)\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"Organik Karbon Da\u011f\u0131l\u0131m\u0131\", x=0.5, y=0.95, font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"Organik Karbon (ppm)\",\n                  yaxis_title_text=\"Miktar\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","fc805799":"fig = px.histogram(df, x=\"Trihalomethanes\", y=Counter(df[\"Trihalomethanes\"]), color=\"Potability\", \n                   template=\"plotly_white\", marginal=\"box\", barmode=\"group\", histfunc=\"count\",\n                   opacity=0.7, nbins=100, color_discrete_sequence=[colors_green[3],colors_blue[3]])\n\nfig.add_vline(x=80, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\n\nfig.add_annotation(text=\"Trihalometan seviyesinin \u00fcst s\u0131n\u0131r\u0131 80 \u03bcg\/L'dir.\", x=115, y=90, showarrow=False)\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"Trihalometan Da\u011f\u0131l\u0131m\u0131\", x=0.5, y=0.95, font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"Trihalometanlar (\u03bcg\/L)\",\n                  yaxis_title_text=\"Miktar\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","ebfd6e4d":"fig = px.histogram(df, x=\"Turbidity\", y=Counter(df[\"Turbidity\"]), color=\"Potability\", template=\"plotly_white\",\n                   marginal=\"box\", barmode=\"group\", histfunc=\"count\", opacity=0.7, nbins=100, \n                   color_discrete_sequence=[colors_green[3],colors_blue[3]])\n\nfig.add_vline(x=5, line_width=1, line_color=colors_dark[1], line_dash=\"dot\", opacity=0.7)\n\nfig.add_annotation(text=\"<5 NTU bulan\u0131kl\u0131k g\u00fcvenli kabul edilir\", x=6, y=90, showarrow=False)\n\nfig.update_layout(font_family=\"monospace\",\n                  title=dict(text=\"Bulan\u0131kl\u0131k Da\u011f\u0131l\u0131m\u0131\", x=0.5, y=0.95, font=dict(color=colors_dark[2], size=20)),\n                  xaxis_title_text=\"Bulan\u0131kl\u0131k (NTU)\",\n                  yaxis_title_text=\"Miktar\",\n                  legend=dict(x=1, y=0.96, bordercolor=colors_dark[4], borderwidth=0, tracegroupgap=5),\n                  bargap=0.3)\nfig.show()","80dff8dc":"fig = px.scatter_matrix(df, df.drop(\"Potability\", axis=1), height=1250, width=1250, template=\"plotly_white\", \n                        opacity=0.7, color_discrete_sequence=[colors_blue[3],colors_green[3]], color=\"Potability\",\n                        symbol=\"Potability\", color_continuous_scale=[colors_green[3],colors_blue[3]])\n\nfig.update_layout(font_family=\"monospace\", font_size=10, coloraxis_showscale=False,\n                  legend=dict(x=0.02, y=1.07, bgcolor=colors_dark[4]),\n                  title=dict(text=\"Scatter Plot Matrix b\/w Features\", x=0.5, y=0.97, \n                             font=dict(color=colors_dark[2], size=24)))\nfig.show()","a6cc797f":"cor = df.drop(\"Potability\", axis=1).corr()\ncor","8689ce59":"fig = px.imshow(cor, height=800, width=800, color_continuous_scale=colors_blue, template=\"plotly_white\")\n\nfig.update_layout(font_family=\"monospace\", \n                  title=dict(text=\"Correlation Heatmap\", x=0.5, y=0.93, font=dict(color=colors_dark[2], size=24)),\n                  coloraxis_colorbar=dict(len=0.85, x=1.1))\nfig.show()","dbaf768f":"fig = msno.matrix(df, color=(0,0.5,0.5))","58096799":"df.isnull().sum()","effe4e8d":"df[df[\"Potability\"]==0].describe()","734b3aa9":"df[df[\"Potability\"]==1].describe()","6f1933ae":"df[df[\"Potability\"]==0][[\"ph\",\"Sulfate\",\"Trihalomethanes\"]].median()","6e19d290":"df[df[\"Potability\"]==1][[\"ph\",\"Sulfate\",\"Trihalomethanes\"]].median()","ae2c57a2":"df[\"ph\"].fillna(value=df[\"ph\"].median(), inplace=True)\ndf[\"Sulfate\"].fillna(value=df[\"Sulfate\"].median(), inplace=True)\ndf[\"Trihalomethanes\"].fillna(value=df[\"Trihalomethanes\"].median(), inplace=True)\ndf.isnull().sum()","f592e543":"X = df.drop(\"Potability\", axis=1).values\ny = df[\"Potability\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","0bb1b0b9":"models =[\n    (\"SVC\", SVC()),\n    (\"LR\", LogisticRegression(max_iter=1000)), \n    (\"KNN\", KNeighborsClassifier(n_neighbors=10)),\n    (\"DTC\", DecisionTreeClassifier()),\n    (\"GNB\", GaussianNB()),\n    (\"SGDC\", SGDClassifier()),\n    (\"Perc\", Perceptron()),\n    (\"NC\", NearestCentroid()),\n    (\"Ridge\", RidgeClassifier()),\n    (\"NuSVC\", NuSVC()),\n    (\"BNB\", BernoulliNB()),\n    (\"RF\", RandomForestClassifier()),\n    (\"ADA\", AdaBoostClassifier()),\n    (\"XGB\", GradientBoostingClassifier()),\n    (\"PAC\", PassiveAggressiveClassifier()),\n]\n\nresults = []\nnames = []\nfinalResults = []\n\nfor name,model in models:\n    model.fit(X_train, y_train)\n    model_results = model.predict(X_test)\n    score = precision_score(y_test, model_results, average=\"macro\")\n    results.append(score)\n    names.append(name)\n    finalResults.append((name,score))\n    \nfinalResults.sort(key=lambda k:k[1], reverse=True)\nfinalResults","d62e1a9e":"model_params = {\n    \"RF\":{\n        \"model\":RandomForestClassifier(),\n        \"params\":{\n            \"n_estimators\":[10,50,100,200],\n            \"max_features\":[\"auto\",\"sqrt\",\"log2\"],\n            \"max_depth\":list(range(1,11)),\n        }\n    }\n}\n\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=2)\n\nscores = []\n\nfor model_name,params in model_params.items():\n    rs = RandomizedSearchCV(params[\"model\"], params[\"params\"], cv=cv, n_iter=20)\n    rs.fit(X,y)\n    scores.append([model_name, dict(rs.best_params_), rs.best_score_])\n\ndata = pd.DataFrame(scores, columns=[\"Model\",\"Parameters\",\"Score\"])\ndata","4eaa125d":"param = data[\"Parameters\"]\n\nmodel = VotingClassifier(estimators = [\n    (\"RF\", RandomForestClassifier(**param[0])),\n], voting=\"hard\")\n\naccuracy=[]\nscaler = StandardScaler()\nskf = RepeatedStratifiedKFold(n_splits=5, n_repeats=2)\nskf.get_n_splits(X,y)\n\nfor train_index, test_index in skf.split(X,y):\n    \n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    scaler.fit(X_train)\n    X_train = scaler.transform(X_train)\n    X_test = scaler.transform(X_test)\n    \n    model.fit(X_train,y_train)\n    predictions = model.predict(X_test)\n    score = accuracy_score(y_test,predictions)\n    accuracy.append(score)\n    \nnp.mean(accuracy)","b5ae71c8":"tuned_parameters = {\n    \"n_estimators\": [100,200,500,1000], \n    \"max_features\": [3, 5, 7, 8],\n    \"min_samples_split\": [2, 5, 10, 20],\n}\nmodel = RandomForestClassifier()\nmodel_cv = GridSearchCV(model, tuned_parameters, cv=10, n_jobs=-1, verbose=2).fit(X_train, y_train)","ef7f659d":"model_cv.best_params_","3e53452c":"model_tuned = RandomForestClassifier(max_features=5, min_samples_split=10, n_estimators=200).fit(X_train, y_train)\ny_pred = model_tuned.predict(X_test)\naccuracy_score(y_test, y_pred)","09bec2c2":"Korelasyonu g\u00f6rselle\u015ftirmek i\u00e7in bir Is\u0131 Haritas\u0131 yapal\u0131m.","185cb489":"## Veri \u00d6n \u0130\u015fleme\n\n### 1. Eksik De\u011ferler","68c5de24":"Son birle\u015ftirilmi\u015f model i\u00e7in en iyi parametrelere sahibiz.","a36bfa1e":"## Modelleme\n\n### 1. Spot Checking\n\nNokta denetimi, verilerimiz i\u00e7in temel modelleri bulmak i\u00e7in harika bir y\u00f6ntemdir. Olduk\u00e7a kolay ve ger\u00e7ekten daha az zaman al\u0131yor.","403e5659":"* **\u0130letkenlik:** \u0130letkenlik, suyun bir elektrik ak\u0131m\u0131n\u0131 ge\u00e7irme yetene\u011finin bir \u00f6l\u00e7\u00fcs\u00fcd\u00fcr. \u00c7\u00f6z\u00fcnm\u00fc\u015f tuzlar ve di\u011fer inorganik kimyasallar elektrik ak\u0131m\u0131n\u0131 iletti\u011finden, tuzluluk artt\u0131k\u00e7a iletkenlik artar. Ya\u011f gibi organik bile\u015fikler elektrik ak\u0131m\u0131n\u0131 \u00e7ok iyi iletmezler ve bu nedenle suda d\u00fc\u015f\u00fck iletkenli\u011fe sahiptirler. \u0130letkenlik s\u0131cakl\u0131ktan da etkilenir: su ne kadar s\u0131caksa iletkenlik o kadar y\u00fcksek olur.","b4e3956b":"* **Organik Karbon:** Organik kirleticiler (do\u011fal organik maddeler, b\u00f6cek \u00f6ld\u00fcr\u00fcc\u00fcler, herbisitler ve di\u011fer tar\u0131msal kimyasallar) ya\u011f\u0131\u015f ak\u0131\u015f\u0131nda su yollar\u0131na girer. Evsel ve end\u00fcstriyel at\u0131k sular da \u00e7e\u015fitli miktarlarda organik kirleticilere katk\u0131da bulunur. Kazara d\u00f6k\u00fclmeler veya s\u0131z\u0131nt\u0131lar sonucunda end\u00fcstriyel organik at\u0131klar nehirlere girebilir. Kirleticilerin baz\u0131lar\u0131 ar\u0131tma i\u015flemleriyle tamamen ortadan kald\u0131r\u0131lamayabilir; bu nedenle i\u00e7me suyu kaynaklar\u0131 i\u00e7in bir sorun haline gelebilirler. Bir su yolundaki organik i\u00e7eri\u011fi bilmek \u00f6nemlidir.","8bfb3c39":"## **Veriyi \u0130\u00e7e Aktarmak**","2d5f1cac":"* **pH Seviyesi:** Suyun pH'\u0131, asit-baz dengesinin bir \u00f6l\u00e7\u00fcs\u00fcd\u00fcr ve \u00e7o\u011fu do\u011fal suda karbon dioksit-bikarbonat-karbonat denge sistemi taraf\u0131ndan kontrol edilir. Artan bir karbondioksit konsantrasyonu bu nedenle pH'\u0131 d\u00fc\u015f\u00fcr\u00fcrken, bir azalma ise y\u00fckselmesine neden olur. S\u0131cakl\u0131k ayr\u0131ca dengeyi ve pH'\u0131 da etkileyecektir. Saf suda, s\u0131cakl\u0131k 25 \u00b0C art\u0131r\u0131ld\u0131\u011f\u0131nda pH'da yakla\u015f\u0131k 0,45'lik bir d\u00fc\u015f\u00fc\u015f meydana gelir. Bikarbonat, karbonat ve hidroksil iyonlar\u0131 taraf\u0131ndan verilen tamponlama kapasitesine sahip suda, bu s\u0131cakl\u0131k etkisi de\u011fi\u015ftirilir (APHA, 1989). \u00c7o\u011fu i\u00e7me suyunun pH'\u0131 6.5-8.5 aral\u0131\u011f\u0131ndad\u0131r. Do\u011fal sular, \u00f6rne\u011fin asit ya\u011fmuru veya kire\u00e7ta\u015f\u0131 alanlar\u0131nda daha y\u00fcksek pH'\u0131n bir sonucu olarak daha d\u00fc\u015f\u00fck pH'a sahip olabilir.","e01e0444":"### 2. Standartla\u015ft\u0131rma","88f47bc5":"\u0130\u00e7ilebilir ve i\u00e7ilebilir olmayan sular\u0131n ortalama ve medyan de\u011ferleri aras\u0131ndaki fark\u0131n minimum oldu\u011funu g\u00f6rebiliriz. Bu nedenle, de\u011ferleri uygulamak i\u00e7in \u00f6zelli\u011fin genel medyan\u0131n\u0131 kullan\u0131r\u0131z.","6e66f8e5":"* **S\u00fclfat:** S\u00fclfat (SO4) hemen hemen t\u00fcm do\u011fal sularda bulunur. \u00c7o\u011fu s\u00fclfat bile\u015fi\u011finin kayna\u011f\u0131, s\u00fclfit cevherlerinin oksidasyonu, \u015feyllerin varl\u0131\u011f\u0131 veya end\u00fcstriyel at\u0131klard\u0131r. S\u00fclfat, ya\u011fmurun ana \u00e7\u00f6z\u00fcnm\u00fc\u015f bile\u015fenlerinden biridir. \u0130\u00e7ti\u011fimiz sudaki y\u00fcksek konsantrasyonlarda s\u00fclfat, sertli\u011fin en yayg\u0131n iki bile\u015feni olan kalsiyum ve magnezyum ile birle\u015fti\u011finde m\u00fcshil etkisi olabilir. ","ce489e22":"## **K\u00fct\u00fcphaneler**","061c2b71":"* **Kloraminler:** Kloraminler (ikincil dezenfeksiyon olarak da bilinir), i\u00e7me suyunu ar\u0131tmak i\u00e7in kullan\u0131lan dezenfektanlard\u0131r ve bunlar:\n\n    * En yayg\u0131n olarak, i\u00e7me suyunu ar\u0131tmak i\u00e7in klora amonyak eklendi\u011finde olu\u015fur.\n    * Su borulardan t\u00fcketicilere ge\u00e7erken daha uzun s\u00fcreli dezenfeksiyon sa\u011flar.\n    \nKloraminler 1930'lardan beri su hizmetleri taraf\u0131ndan kullan\u0131lmaktad\u0131r.","04da1fa9":"\u00d6zelliklerin da\u011f\u0131l\u0131m\u0131n\u0131 kontrol edelim.\n\n* **Su Sertli\u011fi (Hardenss of water):** Su sertli\u011finin basit tan\u0131m\u0131, suda \u00e7\u00f6z\u00fcnm\u00fc\u015f kalsiyum ve magnezyum miktar\u0131d\u0131r. Sert su, \u00e7\u00f6z\u00fcnm\u00fc\u015f minerallerde, b\u00fcy\u00fck \u00f6l\u00e7\u00fcde kalsiyum ve magnezyumda y\u00fcksektir. Sert suyun etkilerini, kelimenin tam anlam\u0131yla, ellerinizi en son y\u0131kad\u0131\u011f\u0131n\u0131zda hissetmi\u015f olabilirsiniz. Suyunuzun sertli\u011fine ba\u011fl\u0131 olarak, y\u0131kamak i\u00e7in sabun kulland\u0131ktan sonra ellerinizde bir kal\u0131nt\u0131 tabakas\u0131 kalm\u0131\u015f gibi hissedebilirsiniz. Sert suda sabun, kalsiyumla (sert suda nispeten y\u00fcksek olan) reaksiyona girerek \"sabun k\u00f6p\u00fc\u011f\u00fc\" olu\u015fturur. Sert su kullan\u0131rken, elleriniz, sa\u00e7lar\u0131n\u0131z veya \u00e7ama\u015f\u0131rlar\u0131n\u0131z olsun, her \u015feyi temizlemek i\u00e7in daha fazla sabun veya deterjan gerekir. ","feaa3287":"## **Renkler**","376069de":"* **Bulan\u0131kl\u0131k:** Bulan\u0131kl\u0131k, bir s\u0131v\u0131n\u0131n g\u00f6reli berrakl\u0131\u011f\u0131n\u0131n \u00f6l\u00e7\u00fcs\u00fcd\u00fcr. Suyun optik bir \u00f6zelli\u011fidir ve su numunesinden bir \u0131\u015f\u0131k parlat\u0131ld\u0131\u011f\u0131nda sudaki malzeme taraf\u0131ndan sa\u00e7\u0131lan \u0131\u015f\u0131k miktar\u0131n\u0131n bir \u00f6l\u00e7\u00fcs\u00fcd\u00fcr. Sa\u00e7\u0131lan \u0131\u015f\u0131\u011f\u0131n yo\u011funlu\u011fu ne kadar y\u00fcksek olursa, bulan\u0131kl\u0131k da o kadar y\u00fcksek olur. Suyun bulan\u0131k olmas\u0131na neden olan malzemeler aras\u0131nda kil, silt, \u00e7ok k\u00fc\u00e7\u00fck inorganik ve organik maddeler, algler, \u00e7\u00f6z\u00fcnm\u00fc\u015f renkli organik bile\u015fikler ve plankton ve di\u011fer mikroskobik organizmalar bulunur.","785830e8":"# **Su Kalitesi**\n\n[Kaynak](https:\/\/www.kaggle.com\/jaykumar1607\/water-quality-analysis-plotly-and-modelling)\n\n1. **ph**: Suyun pH'\u0131 (0 ile 14).\n\n2. **Hardness (Sertlik)**: Suyun sabunu \u00e7\u00f6keltme kapasitesi mg\/L olarak. \n\n3. **Solids (Kat\u0131lar)**: ppm cinsinden toplam \u00e7\u00f6z\u00fcnm\u00fc\u015f kat\u0131lar.\n\n4. **Chloramines (Kloraminler)**: Kloraminlerin ppm cinsinden miktar\u0131.\n\n5. **Sulfate (S\u00fclfat)**: mg\/L cinsinden \u00e7\u00f6z\u00fcnen S\u00fclfat miktar\u0131. \n\n6. **Conductivity (\u0130letkenlik)**: \u03bcS\/cm cinsinden suyun elektriksel iletkenli\u011fi. \n\n7. **Organic_carbon (Organik Karbon)**: ppm cinsinden organik karbon miktar\u0131. \n\n8. **Trihalomethanes (Trihalometanlar)**: \u03bcg\/L cinsinden Trihalometan miktar\u0131. \n\n9. **Turbidity (Bulan\u0131kl\u0131k)**: NTU'da suyun \u0131\u015f\u0131k yayma \u00f6zelli\u011finin \u00f6l\u00e7\u00fcs\u00fc.\n\n10. **Potability (\u0130\u00e7ilebilirlik)**: Suyun insan t\u00fcketimi i\u00e7in g\u00fcvenli olup olmad\u0131\u011f\u0131n\u0131 g\u00f6sterir. \u0130\u00e7ilebilir : 1 \/ \u0130\u00e7ilebilir de\u011fil : 0 ","a7c10d40":"G\u00f6rd\u00fc\u011f\u00fcm\u00fcz gibi, t\u00fcm \u00f6zellikler aras\u0131nda \u00e7ok daha az korelasyon var gibi g\u00f6r\u00fcn\u00fcyor.","912e7c1a":"* **Trihalometanlar:** Trihalometanlar (THM'ler), musluk suyunu dezenfekte etmek i\u00e7in kullan\u0131lan klor ile sudaki do\u011fal organik madde aras\u0131ndaki reaksiyonun sonucudur. Y\u00fcksek seviyelerde, THM'ler kanser ve olumsuz \u00fcreme sonu\u00e7lar\u0131 gibi olumsuz sa\u011fl\u0131k etkileri ile ili\u015fkilendirilmi\u015ftir.","bfd9ed8d":"* **TDS:** TDS, suda \u00e7\u00f6z\u00fcnm\u00fc\u015f par\u00e7ac\u0131klar\u0131n veya kat\u0131lar\u0131n konsantrasyonu anlam\u0131na gelir. TDS, kalsiyum, magnezyum, klor\u00fcrler, s\u00fclfatlar, bikarbonatlar vb. gibi inorganik tuzlar\u0131n yan\u0131 s\u0131ra suda kolayca \u00e7\u00f6z\u00fcnen daha bir\u00e7ok inorganik bile\u015fikten olu\u015fur. ","004d6d79":"Veri setinde bir\u00e7ok eksik de\u011fer oldu\u011funu g\u00f6rebiliyoruz.","c76c60c4":"## 2. Final Model\n\nModelleri daha iyi sonu\u00e7lar i\u00e7in birle\u015ftirmek i\u00e7in VotingClassfier'\u0131 kullan\u0131yoruz.","92233092":"## **G\u00f6rselle\u015ftirmeler**","386620d2":"En iyi 5 temel modeli se\u00e7tik ve hiperparametre ayarlamas\u0131 yapt\u0131k.","e8a35c3a":"Scatter Plot Matrisi, t\u00fcm \u00f6zellikler aras\u0131ndaki korelasyonu bulmaya yard\u0131mc\u0131 olur."}}