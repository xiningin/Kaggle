{"cell_type":{"57c6257a":"code","aae692cd":"code","467b4fd2":"code","76c891d8":"code","66dc8754":"code","e9df4e64":"code","cbac3be9":"code","38493b89":"code","a6821702":"code","d5f6afb4":"code","e965a7da":"code","e0d15257":"code","e48937f6":"code","0b33bca1":"markdown","48c535f8":"markdown","0b512f17":"markdown","3c5c38e4":"markdown","bbca1864":"markdown"},"source":{"57c6257a":"# do this to make sure no error creeps in\n! [ -e \/content ] && pip install -Uqq fastai ","aae692cd":"# basic fastai import \nfrom fastai.basics import *\nfrom fastai.vision.all import *\nfrom fastai.callback.all import *","467b4fd2":"# making a path\npath = Path('\/kaggle\/input\/face-mask-dataset\/data')\npath.ls()","76c891d8":"# defining a label function \n# for getting labels form file name\ndef label_func(fname):\n    label = str(fname).split('_')[0].split('\/')[-1]\n    \n    if label == 'without':\n        return 'without_Mask'\n    else:\n        return 'with_Mask'\n\n\n# getting image file names\nfnames = get_image_files(path)\n\n# defining our data block\n# this takes care of loading data \n# for us\nblock = DataBlock(blocks    = (ImageBlock, CategoryBlock),\n                   get_items = get_image_files,\n                   get_y     = label_func,\n                   splitter  = RandomSplitter(),\n                   item_tfms = Resize(224))","66dc8754":"# now loading data\ndls = block.dataloaders(path, bs = 32, item_tfms = RandomResizedCrop(460),\n                       batch_tfms = [*aug_transforms(size = 224, max_warp =0), Normalize.from_stats(*imagenet_stats)])\ndls.show_batch()","e9df4e64":"# lets check vocab\ndls.vocab","cbac3be9":"# lets now train a very simple model\n# lets make a learner first\nlearn = cnn_learner(dls, models.resnet34, pretrained = True, metrics = [error_rate, accuracy])","38493b89":"# lets train our leaner for 5 cycles\nlearn.fit_one_cycle(5)","a6821702":"'''\nperformance display function \ncopied from\nhttps:\/\/forums.fast.ai\/t\/plotting-metrics-after-learning\/69937\/3\n'''\n\nfrom fastai.imports import *\nfrom fastai.torch_core import *\nfrom fastai.learner import *\n    \n@patch\n@delegates(subplots)\ndef plot_metrics(self: Recorder, nrows=None, ncols=None, figsize=None, **kwargs):\n    metrics = np.stack(self.values)\n    names = self.metric_names[1:-1]\n    n = len(names) - 1\n    if nrows is None and ncols is None:\n        nrows = int(math.sqrt(n))\n        ncols = int(np.ceil(n \/ nrows))\n    elif nrows is None: nrows = int(np.ceil(n \/ ncols))\n    elif ncols is None: ncols = int(np.ceil(n \/ nrows))\n    figsize = figsize or (ncols * 6, nrows * 4)\n    fig, axs = subplots(nrows, ncols, figsize=figsize, **kwargs)\n    axs = [ax if i < n else ax.set_axis_off() for i, ax in enumerate(axs.flatten())][:n]\n    for i, (name, ax) in enumerate(zip(names, [axs[0]] + axs)):\n        ax.plot(metrics[:, i], color='#1f77b4' if i == 0 else '#ff7f0e', label='valid' if i > 0 else 'train')\n        ax.set_title(name if i > 1 else 'losses')\n        ax.legend(loc='best')\n    plt.show()\n    \n","d5f6afb4":"# Plotting matrics \nlearn.recorder.plot_metrics()","e965a7da":"# plotting top losses\ninterperter = ClassificationInterpretation.from_learner(learn)\ninterperter.plot_top_losses(9, figsize = (20, 10))","e0d15257":"learn.save('maskDetector')\n#help(learn.save)","e48937f6":"learn.show_results(figsize = (17, 10))","0b33bca1":"# Training Model","48c535f8":"# Introduction\nI have started learning Fastai, earlier I was working with tensorflow, so in this and the following notebooks will try to move all my previous codes to fastai and try to draw a contrast between the two frameworks","0b512f17":"# Loading data from Folder in fastai","3c5c38e4":"And we have loaded our data easy peazy","bbca1864":"# Model Evaluation"}}