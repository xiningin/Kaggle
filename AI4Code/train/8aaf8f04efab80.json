{"cell_type":{"460cede5":"code","bd911739":"code","a50ba935":"code","6dd7288c":"code","2d452960":"code","0f7e3463":"code","c6c5089a":"code","d0cbb127":"code","53500857":"code","4945f329":"markdown","cfa0b1f1":"markdown","8d42fdb1":"markdown","1aeb35c6":"markdown","fafe6fb4":"markdown","8848e8b6":"markdown"},"source":{"460cede5":"#importing necessary libraries\nimport numpy as np\nimport pandas as pd \nimport torch\nfrom torch import optim\nimport torch.nn as nn\nfrom PIL import Image","bd911739":"df = pd.read_csv('..\/input\/chinese-mnist\/chinese_mnist.csv',sep=',')\n","a50ba935":"character_dictionary = {'\u96f6':int(0),'\u4e00':int(1),'\u4e8c':int(2),'\u4e09':int(3),'\u56db':int(4),'\u4e94':int(5),'\u516d':int(6),'\u4e03':int(7),'\u516b':int(8),'\u4e5d':int(9),'\u5341':int(10),'\u767e':int(11),'\u5343':int(12),'\u4e07':int(13),'\u4ebf':int(14)}\ninv_character_dictionary = {v: k for k, v in character_dictionary.items()}\n\nclass_ids = []\nfor index, row in df.iterrows():\n    class_ids.append(character_dictionary[row['character']])\ndf[\"class_id\"] = class_ids","6dd7288c":"from torch.utils.data import Dataset\n\nclass CustomDataset(Dataset):\n  def __init__(self, X, y, BatchSize, transform):\n    super().__init__()\n    self.BatchSize = BatchSize\n    self.y = y\n    self.X = X\n    self.transform = transform\n    \n  def num_of_batches(self):\n    \"\"\"\n    Detect the total number of batches\n    \"\"\"\n    return math.floor(len(self.list_IDs) \/ self.BatchSize)\n\n  def __getitem__(self,idx):\n    class_id = self.y[idx]\n    img = Image.open(f\"..\/input\/chinese-mnist\/data\/data\/input_{self.X.iloc[idx, 0]}_{self.X.iloc[idx, 1]}_{self.X.iloc[idx, 2]}.jpg\")\n    img = self.transform(img)\n    return img, np.array(class_id)\n\n  def __len__(self):\n    return len(self.X)","2d452960":"from sklearn.model_selection import train_test_split\nfrom torch.utils.data import DataLoader\nfrom torchvision import transforms\n\n# Shuffle dataframe\ndf = df.sample(frac=1)\n\nX = df.iloc[:,:-3]\ny = df.iloc[:,-1]\n\ntransform = transforms.Compose([\n                transforms.RandomRotation(4, fill=256),\n                transforms.ColorJitter(brightness=0.05, contrast=0.05, saturation=0.05),\n                transforms.ToTensor(),\n                transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),\n                transforms.Normalize([0.5], [0.5])\n            ])\n\ntest_transform = transforms.Compose([transforms.ToTensor(),\n                              transforms.Normalize((0.5,), (0.5,)),\n                              ])\n\ntrain_ratio = 0.90\nvalidation_ratio = 0.05\ntest_ratio = 0.05\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1 - train_ratio)\nX_val, X_test, y_val, y_test = train_test_split(X_test, y_test, test_size=test_ratio\/(test_ratio + validation_ratio))\n\ndataset_stages = ['train', 'val', 'test']\n\nbatch_size = 32\nimage_datasets = {'train' : CustomDataset(X_train, y_train.values, batch_size, transform), 'val' : CustomDataset(X_val, y_val.values, batch_size, test_transform), 'test' : CustomDataset(X_test, y_test.values, batch_size, test_transform)}\ndataloaders = {x: DataLoader(image_datasets[x], batch_size=image_datasets[x].BatchSize,\n                                            shuffle=True, num_workers=0)\n            for x in dataset_stages}\n\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val', 'test']}","0f7e3463":"import time\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\ndef train_model(model, criterion, optimizer, scheduler, num_epochs=10):\n    since = time.time()\n    best_acc = 0.0\n\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n        print('-' * 10)\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'val']:\n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n            num_batches = 0\n            outputs = None\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                # Loading Bar\n                if (phase == 'train'):\n                    num_batches += 1\n                    percentage_complete = ((num_batches * batch_size) \/ (dataset_sizes[phase])) * 100\n                    percentage_complete = np.clip(percentage_complete, 0, 100)\n                    print(\"{:0.2f}\".format(percentage_complete), \"% complete\", end=\"\\r\")\n\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    loss = criterion(outputs.float(), labels)\n\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        # Not in original design\n                        # TODO: try removal\n                        torch.nn.utils.clip_grad_norm_(model.parameters(), 1)\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                \n                predicted = torch.max(outputs.data, 1)[1] \n                running_correct = (predicted == labels).sum()\n                running_corrects += running_correct\n            if phase == 'train':\n                scheduler.step()\n\n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            \n            epoch_acc = running_corrects \/ dataset_sizes[phase]\n            #epoch_acc = sum(epoch_acc) \/ len(epoch_acc)\n\n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n                phase, epoch_loss, epoch_acc.item()))\n\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 60, time_elapsed % 60))\n    return model","c6c5089a":"from torchvision import models\nfrom torch.optim import lr_scheduler\n\nmodel_ft = models.densenet121(pretrained=False)\nmodel_ft.features[0] = nn.Conv2d(1, 64, kernel_size=7, stride=2,\n                            padding=3, bias=False)\nmodel_ft.features[1] = nn.BatchNorm2d(64)\nmodel_ft.classifier = model_classifier = nn.Sequential(\n                        nn.Linear(model_ft.classifier.in_features,720),\n                        #nn.Dropout(0.5, inplace=True),\n                        nn.Linear(720,15)\n                    )  \n","d0cbb127":"criterion = nn.CrossEntropyLoss()\n\noptimizer_ft = optim.Adam(model_ft.parameters(), lr=0.01)\n\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)\n\nmodel_ft = train_model(model_ft.to(device), criterion, optimizer_ft, exp_lr_scheduler)","53500857":"from sklearn.metrics import accuracy_score \n\naccuracy_scores = []\n\nrunning_corrects = 0\noutputs = None\nfor inputs, labels in dataloaders['test']:\n    model_ft.eval()\n    \n    inputs = inputs.to(device)\n    labels = labels.to(device)\n\n    outputs = model_ft(inputs)\n    \n    predicted = torch.max(outputs.data, 1)[1] \n    running_correct = (predicted == labels).sum()\n    running_corrects += running_correct\n\naccuracy = running_corrects \/ dataset_sizes['test']\nprint(\"Accuracy: \" + str(accuracy.item()))","4945f329":"# Establish Class Dictionary","cfa0b1f1":"# Load Data ","8d42fdb1":"# Train Model","1aeb35c6":"# Instantiate the Datasets\n\nWe will form them into torch dataloaders to make the data easier to work with. We are also going to put in a minor amount of image augmentation in the train dataset.","fafe6fb4":"# Create a Training Function","8848e8b6":"# Create the Custom Dataset Class\n\nWe need this to be able to load the image and label into the model we will create. So we will create a custom dataset to handle this"}}