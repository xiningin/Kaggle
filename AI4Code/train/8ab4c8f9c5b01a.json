{"cell_type":{"1b6e460b":"code","d56a87d8":"code","7be6b7d2":"code","1dd253f1":"code","8e9ac5d3":"code","b3898ed9":"code","37045c59":"code","05987dc3":"code","bcf3266d":"code","bb4d3c36":"code","f6e4a36b":"code","5dc2e73f":"code","bd8a60d1":"code","5f465836":"code","44b38c3b":"code","4464a8f8":"code","8665814f":"code","9f176339":"code","e3389ddd":"code","0f7c3700":"code","aa8ee28f":"code","a8fddb18":"code","81dc2811":"markdown","2146a6b3":"markdown","31909eda":"markdown","c3eea6a4":"markdown","25701e49":"markdown","7a6ea4ff":"markdown","ee0d5af1":"markdown"},"source":{"1b6e460b":"from os import *\nimport json\nimport requests\nfrom lxml import html\nimport pandas as pd\nfrom itertools import cycle\n","d56a87d8":"Links = []\nGenres= []\nnames = []\nfor k in range(1, 30): #taking 30 pages data 0f 580 songs  \n    bu = \"https:\/\/freemusicarchive.org\/music\/charts\/all?page=\" #base url\n    key = k #page number\n    print (key)    \n    final_link = bu + str(key)\n    print(final_link)\n    page = requests.get(final_link)\n    pData = html.fromstring(page.content)\n    headers = {'User-Agent': 'Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/50.0.2661.102 Safari\/537.36'}\n    newP = requests.get(final_link,headers=headers)\n    ntree = html.fromstring(newP.content)\n    for j in range (1, 21):\n      pL = ntree.xpath('\/\/*[@id=\"content\"]\/div[2]\/div[1]\/div[4]\/div[{}]\/div[1]\/span\/a\/@href'.format(j))\n      if len(pL)!=0:\n        Links.append(pL[0])\n        system(\"wget {}\".format(pL[0]))\n        songLink = pL[0]\n        arr = songLink.split(\"\/\")\n        songName = arr[-1:][0]\n        names.append(songName)\n      gnrs = []\n      o = 5\n      while o>=0:\n        add = ntree.xpath('\/\/*[@id=\"content\"]\/div[2]\/div[1]\/div[4]\/div[{}]\/span[6]\/a[{}]\/@href'.format(j,o))\n        if len(add)!=0:\n          gnrs.append(add[0])\n        o-=1\n      Genres.append(gnrs)\nprint(len(Links))\nprint(len(Genres))","7be6b7d2":"for item in Genres:\n    for i in range(0, len(item)):\n        item[i] = item[i].replace(\"\/genre\/\",\"\")\n        item[i] = item[i].replace(\"\/\",\"\")","1dd253f1":"scraped = pd.DataFrame()\n!mkdir music_data\n","8e9ac5d3":"!mv *.mp3 music_data","b3898ed9":"scraped[\"Links\"] = Links\nscraped[\"Genres\"] = Genres\nscraped[\"Names\"] = names \n\nscraped.head(20)\n","37045c59":"TopSongsDict = {\"ThinkingOutLoud\":\"http:\/\/fr05.mp3pro.xyz\/0376382c5a58a77c720b4\/Ed%20Sheeran%20-%20Thinking%20Out%20Loud.mp3\",\"CountingStars\":\"http:\/\/fr04.mp3pro.xyz\/6e887cf45a58a6ea9c195\/OneRepublic%20-%20Counting%20Stars%20%28Official%20Music%20Video%29.mp3\",\"Roar\":\"http:\/\/fr04.mp3pro.xyz\/169ba93e5a58a4694ce2d\/Katy%20Perry%20-%20Roar%20%28Official%29.mp3\",\"Sugar\":\"http:\/\/fr04.mp3pro.xyz\/90005d075a58a413ff5d3\/Maroon%205%20-%20Sugar%20%28Official%20Music%20Video%29.mp3\",\"GangnamStyle\":\"http:\/\/fr03.mp3pro.xyz\/7dab23295a58a3a11c501\/PSY%20-%20GANGNAM%20STYLE%28%EA%B0%95%EB%82%A8%EC%8A%A4%ED%83%80%EC%9D%BC%29%20M%20V.mp3\",\"sorry\":\"http:\/\/nl05.mp3pro.xyz\/d0179ece5a58a2d56d391\/Justin%20Bieber%20-%20Sorry%20%28Official%29.mp3\",\"UptownFunk\" : \"http:\/\/fr05.mp3pro.xyz\/4ee3ce9a5a58a28f64640\/Mark%20Ronson%20-%20Uptown%20Funk%20%28Official%20Video%29%20ft.%20Bruno%20Mars.mp3\",\"SeeyouAgain\":\"http:\/\/nl02.mp3pro.xyz\/c1909ddb5a58a25ddb893\/Wiz%20Khalifa%20-%20See%20You%20Again%20ft.%20Charlie%20Puth%20%5BOfficial%20Video%5D%20Furious%207%20Soundtrack.mp3\",\"shapeOfYou\":\"http:\/\/fr04.mp3pro.xyz\/c17042ff5a58a202cffb4\/Ed%20Sheeran%20-%20Shape%20of%20You%20%5BOfficial%20Video%5D.mp3\",\"despacito\":\"http:\/\/nl05.mp3pro.xyz\/6c2c61695a58a192ef564\/Justin%20Bieber%20-%20Despacito%20%28%20Letra%29%20ft.%20Luis%20Fonsi%20%26%20Daddy%20Yankee.mp3\"}","05987dc3":"TopSongsDict","bcf3266d":"TopChart = pd.DataFrame()","bb4d3c36":"Links = list(TopSongsDict.values())\nNames = list(TopSongsDict.keys())\nGenres = [\"Pop\",\"Pop, Dance Pop\", \"Pop\",\"Hip-Hop,Rap\",\"pop\",\"Singer-Songwriter,Blues\",\"Pop,Boogie\",\"Latin-pop,Pop\",\"Pop\",\"Pop\"]","f6e4a36b":"TopChart[\"Links\"] = Links\nTopChart[\"Genres\"] = Genres\nTopChart[\"Names\"] = Names","5dc2e73f":"TopChart","bd8a60d1":"!mkdir TopSongs\nfor item in Links:\n  system(\"wget -x --load-cookies cookies.txt -nH {}\".format(item))","5f465836":"!mv *.mp3 TopSongs","44b38c3b":"!pip install librosa\nimport librosa\n!pip install ffmpeg\nimport ffmpeg\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport librosa.display","4464a8f8":"audio_data = 'TopSongs\/Ed Sheeran - Thinking Out Loud.mp3'\nx , sr = librosa.load(audio_data)\nprint(type(x), type(sr)) # here The sample rate(sr) is the number of samples of audio carried per second, measured in Hz or kHz.\n\n#Top Play song in Notebook\nimport IPython.display as ipd\nipd.Audio(audio_data)","8665814f":"plt.figure(figsize=(19, 5))\nlibrosa.display.waveplot(x, sr=sr)","9f176339":"#spectrogram\nX = librosa.stft(x)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(19, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')\nplt.colorbar()","e3389ddd":"librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='log')\nplt.colorbar()","0f7c3700":"#Plot the signal:\nplt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)\n# Zooming in\nn0 = 9000\nn1 = 9100\nplt.figure(figsize=(14, 5))\nplt.plot(x[n0:n1])\nplt.grid()","aa8ee28f":"'''#A chroma feature or vector is typically a 12-element feature vector indicating how much energy of each pitch class,\n{C, C#, D, D#, E, \u2026, B}, is present in the signal.\nIn short, It provides a robust way to describe a similarity measure between music pieces.'''\n\nchromagram = librosa.feature.chroma_stft(x, sr=sr, hop_length=256)\nplt.figure(figsize=(19, 5))\nlibrosa.display.specshow(chromagram, x_axis='time', y_axis='chroma', hop_length=256, cmap='coolwarm')\n","a8fddb18":"import sklearn\nspectral_centroids = librosa.feature.spectral_centroid(x, sr=sr)[0]\nspectral_centroids.shape\n(775,)\n# Computing the time variable for visualization\nplt.figure(figsize=(12, 4))\nframes = range(len(spectral_centroids))\nt = librosa.frames_to_time(frames)\n# Normalising the spectral centroid for visualisation\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\n#Plotting the Spectral Centroid along the waveform\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_centroids), color='b')\n\nspectral_bandwidth_2 = librosa.feature.spectral_bandwidth(x+0.01, sr=sr)[0]\nspectral_bandwidth_3 = librosa.feature.spectral_bandwidth(x+0.01, sr=sr, p=3)[0]\nspectral_bandwidth_4 = librosa.feature.spectral_bandwidth(x+0.01, sr=sr, p=4)[0]\nplt.figure(figsize=(15, 9))\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_bandwidth_2), color='r')\nplt.plot(t, normalize(spectral_bandwidth_3), color='g')\nplt.plot(t, normalize(spectral_bandwidth_4), color='y')\nplt.legend(('p = 2', 'p = 3', 'p = 4'))","81dc2811":"# problem statement \n\n## **Finding forgotten hits by using current hit songs' patterns **\n\n#### I am a music lover, I found top 10 songs on youtube and listed them together, I found something interesting there, in top 10, most of them are falling into genre \"pop\", okay let it be, my idea is by taking reference of these super hit most played song's patterns can we be able to pick similar kind of songs which were forgotten by the world. \n#### If we failed to find\/listen to them over internet, the problems could be a lot, but now we have machines to help us in finding similar missing top hits\n\n# Can you tell these machines to find those missing talents?","2146a6b3":"### Core Scraping code\n###### Here I am downloading songs and creating a table with Genres and Songs links\n\n1.   Creating a dataframe\n2.   Downloading Songs while scraping the links and genres\n\n\n","31909eda":"## Similiarity checking between patterns","c3eea6a4":"# Will add PART-2 very soon....I hope it taught you something new, you can explore more on this one now.......","25701e49":"## Working with Audio files","7a6ea4ff":"### Gathering most played songs on Youtube (Each song has more than 2.5Billion views ) \n","ee0d5af1":"### Importing Libraries"}}