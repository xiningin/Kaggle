{"cell_type":{"6101e6c7":"code","08b924da":"code","6fc42365":"code","5238cc03":"code","e2c64c24":"code","82fba7ff":"code","27cbfc56":"code","4d441590":"code","7372a359":"code","91fe5490":"code","afd97af1":"code","f5ac380e":"code","1873dd1b":"code","35ebdbd9":"code","8137c2fa":"code","facaebd3":"code","24a4bc7a":"code","925e9319":"code","a0f78dee":"code","8000687c":"code","891bd0c8":"code","c0005311":"code","a2cf8c05":"code","115f52c7":"code","f174e3a0":"code","ad499794":"code","cc1dbb45":"code","364d90b0":"code","cbd368a2":"code","a21d29a5":"code","5166cd0e":"code","a77ab4c0":"code","56e0f121":"code","87a4d600":"code","c80c7795":"code","b8415968":"code","8cdc4970":"code","d361e592":"code","6b51f1d3":"code","978a8fd5":"code","12bb53d2":"code","6db85a33":"code","3699b4f2":"code","1264265a":"code","431b0e56":"code","5333e2f5":"code","d08c2683":"code","ebeb6aba":"code","d10edf0d":"code","aeb013ec":"code","2b7c6e26":"code","5e3e9cd3":"code","67888506":"code","77bd8706":"code","e64f23a4":"code","7a19aaee":"code","17c5922e":"code","84bc8e01":"code","6a9b5ddb":"code","33408b58":"code","5479eb0c":"code","93b1beb2":"code","4409009e":"code","cfab2040":"code","1d6107f6":"code","824d6ca0":"code","4fa0a3ad":"code","395dd2c9":"code","da2836fe":"code","1b35cbac":"code","62c29c41":"code","d97a8540":"code","aa96c3c0":"code","ec8419f5":"code","725942d6":"code","d5d24132":"code","ae6362a4":"code","e789999a":"code","f72d0d91":"code","f65de73b":"code","569528d3":"code","6b807bd6":"code","a198210b":"code","c34e48a4":"code","b293f613":"code","a8d561d6":"code","799bd8e0":"code","85c5b3ee":"code","0014b262":"code","00543f69":"code","f6ea1d7a":"code","6d5cd945":"code","1334b044":"code","9e194a4b":"code","21d2e17c":"code","daf5fc9e":"code","c6d756fe":"code","b21af31d":"code","92dd52d8":"code","5e51d128":"code","0949cc27":"code","60725945":"code","0f82e53a":"code","777e9efb":"code","735d79b0":"code","7ced59c0":"code","fbe570ee":"code","a1e49044":"code","5f723c5e":"code","247314b4":"code","ff181128":"code","47a64393":"code","16a5530e":"code","cb7a185c":"code","f5cdd593":"code","2549793c":"code","dd306dcc":"code","3cfd5c34":"code","5f5cf63d":"code","e4e32a6e":"code","5cc4c7a5":"code","fd9e665e":"code","daa1ecaa":"code","ce1e2cff":"code","f4ccdfef":"code","f6bee8b7":"code","919134f2":"code","d730a30a":"markdown","3f051477":"markdown","e038facf":"markdown","31a8f2f5":"markdown","fab64481":"markdown","74441b15":"markdown","7794780a":"markdown","20c1b870":"markdown","bc399097":"markdown","3dbfd826":"markdown","2ce3b625":"markdown","8d25c1d3":"markdown","39628112":"markdown","b767ef6e":"markdown","a34fb2d1":"markdown","ab0b9462":"markdown","f1be9184":"markdown","3f783b36":"markdown","26a24669":"markdown","cfc45a25":"markdown","ab89fbd6":"markdown","07489783":"markdown","f90d9c19":"markdown","6f8bcdae":"markdown","f25ac7ca":"markdown","3a21ccb6":"markdown","6a1d9ea9":"markdown","a331b658":"markdown"},"source":{"6101e6c7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","08b924da":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport cufflinks as cf\nimport matplotlib.pyplot as plt\n%matplotlib inline","6fc42365":"data=pd.read_csv(\"..\/input\/flight-prices-india\/Data_Train.csv\")","5238cc03":"data.head()","e2c64c24":"data.describe()","82fba7ff":"data.dtypes","27cbfc56":"sns.heatmap(data.isnull())","4d441590":"null_perc=lambda i:dict(i.isnull().sum()*100\/len(i))\nperc=null_perc(data)\nperc","7372a359":"data.isnull().sum()[data.isnull().sum()>0]","91fe5490":"data.dropna(axis=0,inplace=True)","afd97af1":"data.isnull().sum()[data.isnull().sum()>0]","f5ac380e":"data.shape","1873dd1b":"#checking elemnts and pattern of stops.\ndata['Total_Stops'].value_counts()","35ebdbd9":"# function to apply on stops column\nimport re\ndef stops(x):\n    if bool(re.search(r'^(\\d)',x)):\n            return int(x[0])\n    else:\n            return 0","8137c2fa":"data['Duration'].head()","facaebd3":"# function to apply on duration column\nimport re\ndef dura(k):\n    m=re.findall(r'^(?<!h\\s)([0-9]?[0-9]?)[mh]$',k)\n    j=re.findall(r'(?P<h>[0-9]?[0-9]?)(?:h\\s)?(?P<m>[0-9][0-9]?)m',k)\n    \n    if len(m)==0:\n        a,b=j[0]\n        return int(a)+(int(b)\/60)\n    else:\n        return int(m[0])\/60   ","24a4bc7a":"#############\n####   CREATING NEW COLUMNS\n#############\n\nimport re\nfrom datetime import datetime\ndata['Date_of_Journey']=pd.to_datetime(data['Date_of_Journey'],format='%d\/%m\/%Y')\ndata['day']=data['Date_of_Journey'].apply(lambda x:x.strftime('%d'))\ndata['day']=data['day'].apply(int)\ndata['weekday']=data['Date_of_Journey'].apply(lambda x:x.weekday())\ndata['weekdayname']=data['Date_of_Journey'].apply(lambda x:x.strftime('%A'))\ndata['weekofyear']=data['Date_of_Journey'].apply(lambda x:x.strftime('%W'))\n##\ndata['month']=data['Date_of_Journey'].apply(lambda x:x.strftime('%m'))\ndata['monthyname']=data['Date_of_Journey'].apply(lambda x:x.strftime('%B'))\n##\ndata['duration']=data['Duration'].apply(dura)\ndata['Stops']=data['Total_Stops'].apply(stops)","925e9319":"## Since hours is a cyclic data i.e., 23rd hour and 1st hour are close to each other, we use sin and cos \n## to represent and capture this meaning\n\nimport datetime\nimport time\npt = data['Dep_Time'].apply(lambda x: datetime.datetime.strptime(x,'%H:%M'))\ndata['dep_total'] = pt.apply(lambda x : x.hour+(x.minute\/60))\ndata['Dep_Hours_sin']=np.sin(data['dep_total']*np.pi*2\/24)\ndata['Dep_Hours_cos']=np.cos(data['dep_total']*np.pi*2\/24)","a0f78dee":"k=data['Arrival_Time'].str.split().str[0]\ntt = k.apply(lambda x: datetime.datetime.strptime(x,'%H:%M'))\ndata['arriv_tot'] = tt.apply(lambda x : x.hour+(x.minute\/60))\ndata['Arrival_Hours_sin']=np.sin(data['arriv_tot']*np.pi*2\/24)\ndata['Arrival_Hours_cos']=np.cos(data['arriv_tot']*np.pi*2\/24)","8000687c":"## Converting days in a week to cyclic data\ndata['dayw_sin']=np.sin(data['weekday']*np.pi*2\/7)\ndata['dayw_cos']=np.cos(data['weekday']*np.pi*2\/7)","891bd0c8":"## Converting days in a month to cyclic data\ndata['day_sin']=np.sin(data['day']*np.pi*2\/31)\ndata['day_cos']=np.cos(data['day']*np.pi*2\/31)","c0005311":"data['Route'].head()","a2cf8c05":"def make_Elements(m):\n    k=m.split(' ? ')\n    kd=k.copy()\n    i=1\n    while len(k)!=0:\n        k.pop()\n        i=i+1\n    for j in range(0,6):\n        k.append(None)\n    k[-1]=kd.pop()\n    kd.reverse()\n    k[0]=kd.pop()\n    l=1\n    while len(kd)!=0:\n        k[l]=kd.pop()\n        l=l+1\n    return k\n\n\nRRoute=data['Route'].apply(make_Elements)\ndata['Route']=RRoute\ndata_R = pd.DataFrame(RRoute.values.tolist(), columns=['s_1','r_2','r_3','r_4','r_5','d_6'] ,index= data.index)\ndata=pd.concat([data,data_R],axis=1)\n\n## Since we already have source and destination columns\ndata.drop(['s_1','d_6'],axis=1,inplace=True)\n    ","115f52c7":"data.columns","f174e3a0":"data.dtypes","ad499794":"k=pd.crosstab(columns=data['Source'],index=data['Airline'])","cc1dbb45":"## Finding Perentages of Airline choices with respect to the 'Source'\na,b=k.shape\nf,ax=plt.subplots(5,1,figsize=(25,30))\nfor i in range(b):\n    k.plot.pie(ax=ax[i],y=list(k.columns)[i],autopct='%1.1f%%',fontsize=10).legend(loc=0,bbox_to_anchor=(2.0,1.0))","364d90b0":"a=k.plot.bar(stacked=True,figsize=(10,8));\na.legend(loc=0,bbox_to_anchor=(1.0,1.0))\n#for i in ax.patches:\n    #ax.text(x=i.get_x()+0.2,y=i.get_y()+0.2,s=str(round(i.get_height(),2)),fontsize=22)\n    #print(i.get_xy(),i.get_y(),i.get_width(),i.get_height(),sep='\\t')","cbd368a2":"sns.distplot(data['dep_total'],bins=12,color='blue',hist_kws={'edgecolor':'black'});\n#,y='Price');","a21d29a5":"fig,axes=plt.subplots(3,2,figsize=(25,8))\nsns.kdeplot(ax=axes[0,0],data=data[data['Source']=='Chennai']['dep_total'],label='Chennai');\nsns.kdeplot(ax=axes[1,0],data=data[data['Source']=='Kolkata']['dep_total'],label='Kolkata');\nsns.kdeplot(ax=axes[2,0],data=data[data['Source']=='Banglore']['dep_total'],label='Banglore');\nsns.kdeplot(ax=axes[1,1],data=data[data['Source']=='Mumbai']['dep_total'],label='Mumbai');\nsns.kdeplot(ax=axes[0,1],data=data[data['Source']=='Delhi']['dep_total'],label='Delhi');\naxes[0,0].xaxis.set_major_locator(plt.MaxNLocator(24))\naxes[0,1].xaxis.set_major_locator(plt.MaxNLocator(24))\naxes[1,0].xaxis.set_major_locator(plt.MaxNLocator(24))\naxes[1,1].xaxis.set_major_locator(plt.MaxNLocator(24))\naxes[2,0].xaxis.set_major_locator(plt.MaxNLocator(24))\naxes[0,0].xaxis.set_major_locator(plt.MaxNLocator(24))","5166cd0e":"def cv(l):\n    return np.std(l)*100\/np.mean(l)","a77ab4c0":"sns.barplot(y=data['Price'],x=data['day']);","56e0f121":"plt.figure(figsize=(25,8))\nplt.subplot(1,2,1)\nsns.barplot(y=data['Price'],x=data['day'],hue=data['monthyname']);\nplt.subplot(1,2,2)\nsns.lineplot(x='day',y='Price',hue='monthyname',data=data);","87a4d600":"sns.countplot(x=data['monthyname'],hue=data['weekdayname']).legend(loc=0,bbox_to_anchor=(1.0,1.0))","c80c7795":"plt.subplots(figsize=(25,15))\nsns.violinplot(data=data,x='weekofyear',y='Price');","b8415968":"f,axs=plt.subplots(1,2,figsize=(25,10))\nsns.violinplot(ax=axs[0],data=data,y='Price',x='Source');\nsns.barplot(ax=axs[1],data=data,y='Price',x='Source');","8cdc4970":"fig, ax=plt.subplots(figsize=(30,8))\n#sns.barplot(data=data,x='Airline',y='Price')\nax.barh(data['Airline'],data['duration'])\n#plt.xticks(rotation=90)\nplt.rc('xtick', labelsize=20)\nplt.rc('ytick', labelsize=20)\nax.xaxis.set_major_locator(plt.MaxNLocator(24))","d361e592":"plt.figure(figsize=(30,10))\nsns.barplot(data=data,x='Airline',y='duration',estimator=cv);\nplt.rc('xtick', labelsize=20)\nplt.xticks(rotation=90)","6b51f1d3":"plt.figure(figsize=(30,10))\nsns.violinplot(data=data,x='Airline',y='duration');\nplt.rc('xtick', labelsize=20)\nplt.xticks(rotation=90)\nax.yaxis.set_major_locator(plt.MaxNLocator(24))","978a8fd5":"plt.figure(figsize=(30,10))\nsns.boxplot(data=data,x='Airline',y='duration');\nplt.rc('xtick', labelsize=20)\nplt.xticks(rotation=90)","12bb53d2":"databd=data[((data['Source']==\"Banglore\") & (data['Destination']==\"Chennai\"))]\n#| ((data['Source']==\"Chennai\") & (data['Destination']==\"Banglore\"))]","6db85a33":"fig,ax=plt.subplots(figsize=(25,8))\nsns.violinplot(x=data['Airline'],y=data['Price'],gridsize=200)\nplt.rc('xtick', labelsize=10)\nplt.rc('ytick', labelsize=12)\nax.yaxis.set_major_locator(plt.MaxNLocator(18))\nplt.ylim(0,50000)","3699b4f2":"#Which day do people from bangalore travel\nplt.figure(figsize=(25,25))\nplt.subplot(2,2,1)\nsns.countplot(data=data,x='weekdayname')\nplt.subplot(2,2,2)\nsns.countplot(data=data,x='Source',hue='weekdayname')\nplt.subplot(2,2,3)\nsns.countplot(data=data,x='weekdayname',hue='Source')\nplt.subplot(2,2,4)\nsns.countplot(data=data,x='Source')","1264265a":"plt.figure(figsize=(25,25))\nplt.subplot(2,2,1)\nsns.barplot(data=data,x='weekdayname',y='Price')\nplt.subplot(2,2,2)\nsns.barplot(data=data,x='Source',hue='weekdayname',y='Price')\nplt.subplot(2,2,3)\nsns.barplot(data=data,x='weekdayname',y='Price',hue='Source')\nplt.subplot(2,2,4)\nsns.barplot(data=data,x='Source',y='Price')","431b0e56":"sns.jointplot(data=data,x='duration',y='Price',kind='kde');","5333e2f5":"data.columns","d08c2683":"gdata=data.copy()\ndata.drop(['Date_of_Journey','Route','Dep_Time','Arrival_Time','Duration','Total_Stops','weekdayname','monthyname','weekofyear'],inplace=True,axis=1)","ebeb6aba":"data.drop(['day','weekday','dep_total','arriv_tot'],axis=1,inplace=True)\n#data.drop(['day_sin','day_cos','dayw_sin','dayw_cos','Dep_Hour_sin','Dep_Hours_cos','Arrival_Hours_sin','Arrival_Hours_cos'],axis=1,inplace=True)","d10edf0d":"#Set DataTypes\ndata.dtypes","aeb013ec":"plt.figure(figsize=(25,8))\nsns.heatmap(data.corr(),cmap='coolwarm',annot=True);","2b7c6e26":"s_1=pd.get_dummies(data['Source'])\nr_2=pd.get_dummies(data['r_2'])\nr_3=pd.get_dummies(data['r_3'])\nr_4=pd.get_dummies(data['r_4'])\nr_5=pd.get_dummies(data['r_5'])\nd_6=pd.get_dummies(data['Destination'])\n\ndata.drop(['Source','r_2','r_3','r_4','r_5','Destination'],inplace=True,axis=1)\n\ndr1=list(s_1.columns)\ndr2=list(r_2.columns)\ndr3=list(r_3.columns)\ndr4=list(r_4.columns)\ndr5=list(r_5.columns)\ndr6=list(d_6.columns)","5e3e9cd3":"len(dr1),len(dr2),len(dr3),len(dr4),len(dr5),len(dr6)","67888506":"## To avoid multicollinearity we remove one column while getting dummy columns.\ns_1.drop(dr1[0],axis=1,inplace=True)\nr_2.drop(dr2[0],axis=1,inplace=True)\nr_3.drop(dr3[0],axis=1,inplace=True)\nr_4.drop(dr4[0],axis=1,inplace=True)\n#r_5.drop(dr5[0],axis=1,inplace=True) as only one element\nd_6.drop(dr6[0],axis=1,inplace=True)\n\ns_1=s_1.add_prefix('Source_')\nr_2=r_2.add_prefix('r_2_')\nr_3=r_3.add_prefix('r_3_')\nr_4=r_4.add_prefix('r_4_')\nr_5=r_5.add_prefix('r_5_')\nd_6=d_6.add_prefix('Destination_')\n\nEntire_Route=pd.concat([s_1,r_2,r_3,r_4,r_5,d_6],axis=1)","77bd8706":"AirLine=pd.get_dummies(data['Airline'])\nAirLine=AirLine.drop('IndiGo',axis=1)\n\ndata.drop(['Airline'],inplace=True,axis=1)","e64f23a4":"A=pd.get_dummies(data['Additional_Info'])\nA=A.drop('No info',axis=1)\n\ndata.drop(['Additional_Info'],axis=True,inplace=True)","7a19aaee":"mont=pd.get_dummies(data['month'])\nmont=mont.drop(['03'],axis=1)\n\ndata.drop(['month'],axis=1,inplace=True)","17c5922e":"data.dtypes","84bc8e01":"data.columns","6a9b5ddb":"data.describe()","33408b58":"X=pd.concat([data,mont,A,AirLine,Entire_Route],axis=1)","5479eb0c":"X.dtypes","93b1beb2":"list(X.columns)","4409009e":"#We need to check outliers for the columns 'duration', 'Stops',\n# for other float columns such as  'Dep_Hours_sin', 'Dep_Hours_cos', 'Arrival_Hours_sin', 'Arrival_Hours_cos',\n# 'dayw_sin', 'dayw_cos', 'day_sin', 'day_cos'\n#As they will only lie in range(-1,1) with no outliers","cfab2040":"X[['duration']].boxplot()","1d6107f6":"q1, q3= np.percentile(X['duration'],[25,75])\n\n\n(X['duration'][X['duration']>q3+(1.5*(q3-q1))].count()+X['duration'][X['duration']<q1-(1.5*(q3-q1))].count())*100\/X['Price'].count()","824d6ca0":"sns.scatterplot(x=data['duration'],y=data['Price'])","4fa0a3ad":"## Capping Outliers.\n\nq1, q3= np.percentile(X['duration'],[25,75])\n\nX['duration'][X['duration']>q3+(1.5*(q3-q1))]=q3+(1.5*(q3-q1))","395dd2c9":"X[['duration']].boxplot()","da2836fe":"X[['Stops']].boxplot()","1b35cbac":"q1, q3= np.percentile(X['Stops'],[25,75])\n\n\n(X['Stops'][X['Stops']>q3+(1.5*(q3-q1))].count()+X['duration'][X['duration']<q1-(1.5*(q3-q1))].count())*100\/X['Price'].count()","62c29c41":"# Very few outliers and Discrete data, Hence we do not cap.","d97a8540":"X.head()","aa96c3c0":"X_data=X.drop(['Price'],axis=1)\ny=X['Price']","ec8419f5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_data,y, test_size=0.33, random_state=102)\n\n\n\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nsc.fit(X_train)\nX_trainp=sc.transform(X_train)\nX_testp= sc.transform(X_test)\n","725942d6":"from sklearn import metrics\nfrom sklearn.neighbors import KNeighborsRegressor\n\nerror_rate=[]\nfor i in range(1,40):\n    knn=KNeighborsRegressor(n_neighbors=i)\n    knn.fit(X_trainp,y_train)\n    y_pred=knn.predict(X_testp)\n    error_rate.append(np.sqrt(metrics.mean_squared_error(y_test,y_pred)))","d5d24132":"sns.jointplot(range(1,40),error_rate)","ae6362a4":"error_rate.index(min(error_rate))","e789999a":"#n=3 at index 2\nknn=KNeighborsRegressor(n_neighbors=3)\nknn.fit(X_trainp,y_train)\ny_pred=knn.predict(X_testp)","f72d0d91":"sns.scatterplot(y_test,y_pred)","f65de73b":"from sklearn import metrics\nnp.sqrt(metrics.mean_squared_error(y_test,y_pred))","569528d3":"import sklearn.metrics as mm\nmm.explained_variance_score(y_test,y_pred)","6b807bd6":"rsmle=mm.mean_squared_log_error((y_test+1),(y_pred+1))","a198210b":"knn=1-rsmle","c34e48a4":"from sklearn.linear_model import LinearRegression\nlm=LinearRegression()\nlm.fit(X_train,y_train)\n\ny_pred=lm.predict(X_test)","b293f613":"sns.scatterplot(y_test,y_pred)","a8d561d6":"from sklearn import metrics\nnp.sqrt(metrics.mean_squared_error(y_test,y_pred))","799bd8e0":"import sklearn.metrics as mm\nmm.explained_variance_score(y_test,y_pred)","85c5b3ee":"rsmle=mm.mean_squared_log_error((y_test+1),(y_pred+1))","0014b262":"lin_reg=1-rsmle","00543f69":"for i,v in zip(lm.coef_,X.columns):\n    print('Feature:',v,'Score:',i)","f6ea1d7a":"import statsmodels.api as sm\nX2 = sm.add_constant(X_train)\nlop=sm.OLS(y_train,X2.astype(float))\np=lop.fit()\np.summary()","6d5cd945":"import statsmodels.api as sm\nX3 = sm.add_constant(X_test)\nlo=sm.OLS(y_test,X3.astype(float))\npp=lo.fit()\npp.summary()","1334b044":"from sklearn.linear_model import Ridge\nlm=Ridge(alpha=0.9)\nlm.fit(X_train,y_train)\n\ny_pred=lm.predict(X_test)","9e194a4b":"sns.scatterplot(y_test,y_pred)","21d2e17c":"from sklearn import metrics\nnp.sqrt(metrics.mean_squared_error(y_test,y_pred))","daf5fc9e":"import sklearn.metrics as mm\nmm.explained_variance_score(y_test,y_pred)","c6d756fe":"rsmle=mm.mean_squared_log_error((y_test+1),(y_pred+1))","b21af31d":"ridge_reg=1-rsmle","92dd52d8":"from sklearn.linear_model import Lasso\nlm=Lasso(alpha=0.8)\nlm.fit(X_train,y_train)\n\ny_pred=lm.predict(X_test)","5e51d128":"sns.scatterplot(y_test,y_pred)","0949cc27":"from sklearn import metrics\nnp.sqrt(metrics.mean_squared_error(y_test,y_pred))","60725945":"import sklearn.metrics as mm\nmm.explained_variance_score(y_test,y_pred)","0f82e53a":"rsmle=mm.mean_squared_log_error((y_test+1),(y_pred+1))","777e9efb":"lasso_reg=1-rsmle","735d79b0":"from sklearn.svm import SVR\nmodel = SVR(kernel='linear',C=0.1,gamma=0.01)\nmodel.fit(X_trainp,y_train)\ny_pred=model.predict(X_testp)","7ced59c0":"sns.scatterplot(y_test,y_pred)","fbe570ee":"from sklearn import metrics\nnp.sqrt(metrics.mean_squared_error(y_test,y_pred))","a1e49044":"import sklearn.metrics as mm\nmm.explained_variance_score(y_test,y_pred)","5f723c5e":"rsmle=mm.mean_squared_log_error((y_test+1),(y_pred+1))","247314b4":"svm=1-rsmle","ff181128":"from sklearn.tree import DecisionTreeRegressor\nd=DecisionTreeRegressor()\nd.fit(X_trainp,y_train)\ny_pred=d.predict(X_testp)","47a64393":"sns.scatterplot(y_test,y_pred)","16a5530e":"from sklearn import metrics\nnp.sqrt(metrics.mean_squared_error(y_test,y_pred))","cb7a185c":"import sklearn.metrics as mm\nmm.explained_variance_score(y_test,y_pred)","f5cdd593":"rsmle=mm.mean_squared_log_error((y_test+1),(y_pred+1))","2549793c":"dtree=1-rsmle","dd306dcc":"importance = d.feature_importances_\n# summarize feature importance\nfor i,v in zip(importance,list(X.columns)):\n    print('Feature:',v,i)\n#plt.bar([x for x in range(len(importance))], importance)\n#plt.show()","3cfd5c34":"from sklearn.ensemble import RandomForestRegressor\nr=RandomForestRegressor()\nr.fit(X_trainp,y_train)\ny_pred=r.predict(X_testp)","5f5cf63d":"sns.scatterplot(y_test,y_pred)","e4e32a6e":"from sklearn import metrics\nnp.sqrt(metrics.mean_squared_error(y_test,y_pred))","5cc4c7a5":"import sklearn.metrics as mm\nmm.explained_variance_score(y_test,y_pred)","fd9e665e":"rsmle=mm.mean_squared_log_error((y_test+1),(y_pred+1))","daa1ecaa":"rf=1-rsmle","ce1e2cff":"importance = r.feature_importances_\n# summarize feature importance\nfor i,v in zip(importance,list(X.columns)):\n    print('Feature:',v,i)\n#plt.bar([x for x in range(len(importance))], importance)\n#plt.show()","f4ccdfef":"k=[(a,b) for b,a in zip(importance,list(X.columns))]\nM=sorted(k,key=lambda x:x[1],reverse=True)","f6bee8b7":"#In order of importance\nM","919134f2":"print('RandomForest_Score =',rf)\nprint('DecisionTree_Score =',dtree)\nprint('KNN_Score =',knn)\nprint('Linear_Regression_Score =',lin_reg)\nprint('Ridge_regression_Score =',ridge_reg)\nprint('Lasso_regression_Score =',lasso_reg)\nprint('Support_Vector_Score =',svm)","d730a30a":"Here 15th and 16th week have lower prices and a small range of prices and high concentration around median.","3f051477":"## Outliers","e038facf":"## Random Forest","31a8f2f5":"On the whole, Prices are just a bit more on friday and a bit less on Monday but not a lot of difference all through.\n\n##\nThe price is much higher on a friday compared to other days, for people of bangalore\nThough people of mumbai travel pretty much the same on everyday, they have higher avg price on wednesday which is not the case for other states which have lower or normal prices on wednesday due to the increased travel on that day.\n##\n\nThe mean price is more for people in Delhi, though they travel more(no drop due to high supply). Here people can be called demand , as demand incresing price increasing","fab64481":"Here we dont see a lot of difference between the prices between different days of the month.\nBut let's categorize according to months.","74441b15":"## Linear Regression","7794780a":"#based on violin,box and bar-std plots.\n>Almost all of them have high coefficient of variation except Trujet and vistara premium economy.Hence mean can be considered as a good representative for only Trujet and vistara premium economy.For others median or mode shud be considered.\n\n>On an avg \"Trujet\" and \"Vistara Premium economy\",\"Vistara\" have been chosen lower duration travels like lower than 4 Hours.\n\n>\"AirAsia\", \"GoAir\", \"SpiceJet\", \"Indigo\" belong to same category of choices based on medians.\n\n>Multiple carriers, Multiple carriers premium economy chosen for duration such as 10Hours\n\n>\"Jet Airways business\" for 4-10hours.\n\n>\"Air India\" , \"Jet Airways\" are chosen for greater than 10 hours.","20c1b870":"## We see that we get Highest Score from Tree Models and then by KNN!!!!\n## Score=1-Root-Mean-Squared-Log-Error (RMSLE) error","bc399097":"## Drop and ConCatenate","3dbfd826":"## SVM","2ce3b625":"Here we see that March month has higher price than other months during the first 15 days. Especially on the first 1 or 2 days March month has much higher price than other months.\nWe see a big drop in prices in June around 20th day of the month.","8d25c1d3":"On an avg \"Trujet\" and \"Vistara Premium economy\" have been chosen lower duration travels like lower than 4 Hours.\n\"Jet Airway Business\", \"GoAir\" ,\"SpiceJet\" chosen for mid-range duration like 8-10 Hours.\n","39628112":"Inclining towards the common understanding, we see that Price,Duration and Stops have good bivariate correlation among themselves.","b767ef6e":"Although Delhi has higher mean for prices, Bangalore reaches the highest in terms of prices.\n\n## People from bangalore have bought tickets for higher prices than anyone like 81000,but these people make up a small percentage of the bangalore population,because a large part of them almost 50% buy the tickets of in a short range of 6400 and lower with most of them buying at 4800. Excluding the Outliers Bangalore's Price distribution is approximately Normal with mean prices having more frequency\n\nPeople from Kolkata and delhi buy tickets in a normal range of  upto 20000rs with tickets of all prices have been bought almost equal number of times.\n\nPeople from Chennai buy tickets with 75% of them in the shortest range of all from 2400 to 5600 and with most of the buying at  around 3200.","a34fb2d1":"## Ridge","ab0b9462":"## Modelling","f1be9184":"## KNN","3f783b36":"## Lasso","26a24669":"Here we observe that most number of journeys start on wednesday followed by monday and a very low number occur on friday or tuesday almost half the number on wednesday.\n\n\n##\n\n\nPeople from chennai travel same on everyday of week\nOnly in Bangalore,People travel more on friday\n\n##\n\non Sunday and friday ,People from Delhi travel lesser than other states.\nOn Saturday and Thursday, There's a decrease in travel of other states, but there's an increase in Delhi People travelling.\n\n##\n\nPeople from Delhi travel the most and people from Chennai and Mumbai travelling the least.","cfc45a25":"## Missing Values","ab89fbd6":"## Features Preprocessing","07489783":"From the above graphs we see that distributions of travellers from Chennai and Delhi are somewhat similar and right skewed\nwith large number of them starting their travel betwen 7:30 to 10:30am and the traffic keeps gradually decreasing thereafter \nbut has a slight increase at 5:30 to 6:30 pm but not as much as the morning traffic\n\nBut when it comes to Kolkata and mumbai, the distibutions are approximately Bi-modal,i.e., there are large nuber of people departing at both 7:30 to 10:30 in the morning and in the evening.\n","f90d9c19":"## Dropping columns which would'nt be used in model fitting","6f8bcdae":"## Data Visualization","f25ac7ca":"Here we see that outliers in duration are valid and cannot be dropped.","3a21ccb6":"from sklearn.model_selection import GridSearchCV\nparam_grid={'C':[0.1,1],'gamma':[1,0.1,0.01],'kernel':['linear', 'poly', 'sigmoid']}\ngrid=GridSearchCV(SVR(),param_grid,verbose=3)\ngrid.fit(X_trainp,y_train)\n","6a1d9ea9":"Though the Duration of travel is much lower for 'Multiple Carriers' compared to Air India and Jet Airways.Its Price Range is approximately the same as Air India and Jet Airways which have higher duration of travel","a331b658":"## DecisionTree"}}