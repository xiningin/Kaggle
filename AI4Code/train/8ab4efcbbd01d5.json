{"cell_type":{"77c56d87":"code","5699aa94":"code","e7474c95":"code","8154fcc7":"code","8f9da016":"code","36577be1":"code","64c9c795":"code","fc7523d7":"code","f75960fa":"code","3a286f3d":"code","f1d3aae6":"code","80ff46ed":"code","7aade80e":"code","cac5265e":"markdown","9dc91601":"markdown","11f7af20":"markdown","6231328c":"markdown","5761155a":"markdown"},"source":{"77c56d87":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport cv2 as cv\nimport numpy as np","5699aa94":"train_path = \"..\/input\/handwrittenmathsymbols\/extracted_images\"\n\ntrain_datagen = ImageDataGenerator(\n    rescale = 1.\/255, \n    shear_range = 0.2, \n    zoom_range = 0.2,\n    validation_split = 0.25\n)\ntrain_set = train_datagen.flow_from_directory(\n    train_path, \n    target_size = (45, 45), \n    color_mode = 'grayscale',\n    batch_size = 32,\n    class_mode = 'categorical',\n    classes = ['!', '+', '0', ')', '(', ',', '-'],\n    shuffle = True,\n    subset='training',\n    seed = 123\n)\n\ntest_set = train_datagen.flow_from_directory(\n    train_path, \n    target_size = (45, 45), \n    color_mode = 'grayscale',\n    batch_size = 32,\n    class_mode = 'categorical',\n    classes = ['!', '+', '0', ')', '(', ',', '-'],\n    shuffle = True,\n    subset='validation',\n    seed = 123\n)","e7474c95":"def symbol(ind):\n    symbols = ['!', '+', '0', ')', '(', ',', '-']\n    symb = symbols[ind.argmax()]\n    return symb","8154fcc7":"imgs, labels = next(train_set)\n\ndef plotImages(images_arr):\n    fig, axes = plt.subplots(1, 10, figsize = (20,20))\n    axes = axes.flatten()\n    for img, ax in zip(images_arr, axes):\n        ax.imshow(cv.cvtColor(img, cv.COLOR_RGB2BGR))\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()\n    \nplotImages(imgs)\nfor i in range(10):\n    print(symbol(labels[i]))","8f9da016":"model = tf.keras.models.Sequential()\n\n# First Convolutional Block\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(5,5), padding='same', activation='relu', input_shape=(45, 45, 1)))\nmodel.add(tf.keras.layers.MaxPool2D(strides=2))\n\n# Second Convolutional Block\nmodel.add(tf.keras.layers.Conv2D(filters=48, kernel_size=(5,5), padding='valid', activation='relu'))\nmodel.add(tf.keras.layers.MaxPool2D(strides=2))\n\n# Classifier Head\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dense(84, activation='relu'))\nmodel.add(tf.keras.layers.Dense(7, activation='softmax'))","36577be1":"model.summary()","64c9c795":"adam = tf.keras.optimizers.Adam(lr = 5e-4)\nmodel.compile(optimizer = adam, loss = 'categorical_crossentropy', metrics = ['accuracy'])","fc7523d7":"model.fit(train_set, validation_data = test_set, epochs = 20)","f75960fa":"val_loss, val_accuracy = model.evaluate(test_set)\nprint(val_loss,val_accuracy)","3a286f3d":"def prediction(image_path):\n    img = cv.imread(image_path, cv.IMREAD_GRAYSCALE)\n    plt.imshow(img, cmap = 'gray')\n    img = cv.resize(img,(45, 45))\n    norm_image = cv.normalize(img, None, alpha = 0, beta = 1, norm_type = cv.NORM_MINMAX, dtype = cv.CV_32F)\n    norm_image = norm_image.reshape((norm_image.shape[0], norm_image.shape[1], 1))\n    case = np.asarray([norm_image])\n    pred = model.predict([case])\n    \n    return 'Prediction: ' + symbol(pred)","f1d3aae6":"image1_path = '..\/input\/hand-written-math-symbols-exemples\/Hand written math symbols exemples\/0.png'\np1 = prediction(image1_path)\nprint(p1)","80ff46ed":"image2_path = '..\/input\/hand-written-math-symbols-exemples\/Hand written math symbols exemples\/.png'\np2 = prediction(image2_path)\nprint(p2)","7aade80e":"image3_path = '..\/input\/math-symbols-exemples\/.png'\np3 = prediction(image3_path)\nprint(p3)","cac5265e":"# We are using the LeNet-5 with some changes:","9dc91601":"Here is a function to just match the indices to the respective symbols.","11f7af20":"# Preprocessing the training set and the testing set","6231328c":"# some example of the data we are using:","5761155a":"# Lets see if the model can predict symbols outside of what was used"}}