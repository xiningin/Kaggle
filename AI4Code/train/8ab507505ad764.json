{"cell_type":{"6f009223":"code","a8358a67":"code","af48e39a":"code","3796101e":"code","35f70c39":"code","397ed8a0":"code","e350e69a":"code","61cd7f10":"code","151aa633":"code","94da2df9":"code","20e165e3":"code","ca49d1fd":"markdown","b4da5f28":"markdown","f7766e49":"markdown","25b1874b":"markdown","6677482c":"markdown","9158aa02":"markdown","8fbee3da":"markdown","2b318ad7":"markdown","c90a0ac3":"markdown","d8a21492":"markdown"},"source":{"6f009223":"%matplotlib inline\nfrom time import time\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_digits\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale\n\nnp.random.seed(5)","a8358a67":"def load_data(path):\n    with np.load(path) as f:\n        x_train, y_train = f['x_train'], f['y_train']\n        x_test, y_test = f['x_test'], f['y_test']\n        return (x_train, y_train), (x_test, y_test)\n\n(X_train, y_train), (X_test, y_test) = load_data('..\/input\/mnistnpz\/mnist.npz')","af48e39a":"import matplotlib.image as mpimg\nimport matplotlib.cm as cm\n\nfig, ax = plt.subplots(ncols=10, nrows=1, figsize=(10, 5))\namostra = np.random.choice(len(X_train), 10) #escolhe 10 imagens dentre as 60000\n\nfor i in range(len(amostra)):\n    imagem = np.array(X_train[amostra[i]])\n    ax[i].imshow(imagem, cmap = cm.Greys_r)\n    ax[i].get_xaxis().set_ticks([])\n    ax[i].get_yaxis().set_ticks([])\n    ax[i].set_title(y_train[amostra[i]]) # Coloca o label como t\u00edtulo da figura.\nplt.show()","3796101e":"print(X_train.shape)\nX_train = X_train.astype('float32').reshape(X_train.shape[0], X_train.shape[1]* X_train.shape[2])\nX_train = X_train\/255. #escala o dado entre 0 e 1\nprint(X_train.shape)","35f70c39":"amostra = np.random.choice(X_train.shape[0], 10000)\nX_train = X_train[amostra]\ny_train = y_train[amostra]","397ed8a0":"%%time\nkmeans = KMeans(init='random', n_clusters=10, n_init=50).fit(X_train)","e350e69a":"c0 = np.where(kmeans.labels_==0)[0]\nprint(y_train[c0[:30]])","61cd7f10":"pd.crosstab(kmeans.labels_, y_train,rownames=['cluster'], colnames=['n\u00famero'])","151aa633":"def imprime_dez_exemplos_cluster(cluster):\n    fig, ax = plt.subplots(ncols=10, nrows=1, figsize=(10, 5))\n    amostra = np.random.choice(len(cluster), 10) #escolhe 10 imagens dentre as 60000\n\n    for i in range(len(amostra)):\n        imagem = np.array(X_train[cluster[amostra[i]]]).reshape(28,28)\n        ax[i].imshow(imagem, cmap = cm.Greys_r)\n        ax[i].get_xaxis().set_ticks([])\n        ax[i].get_yaxis().set_ticks([])\n        ax[i].set_title(y_train[cluster[amostra[i]]]) # Coloca o label como t\u00edtulo da figura.\n    plt.show()","94da2df9":"imprime_dez_exemplos_cluster(c0)","20e165e3":"for i in range(10):\n    c = np.where(kmeans.labels_==i)[0]\n    print('Cluster ', i)\n    imprime_dez_exemplos_cluster(c)","ca49d1fd":"A fun\u00e7\u00e3o abaixo recebe o n\u00famero de um cluster (n\u00e3o necessariamente o d\u00edgito que ele mais agrupou) e imprime aleatoriamente 10 exemplos que est\u00e3o nesse grupo","b4da5f28":"Aqui vamos fazer uma subamostragem dos dados para 10000 imagens em vez de 60000.","f7766e49":"Aqui imprimimos 10 exemplos para cada cluster.","25b1874b":"Aqui importamos o conjunto de dados do *dataset* p\u00fablico no Kaggle.","6677482c":"Aqui reformatamos os dados que est\u00e3o no formato 28x28 para um \u00fanico vetor de tamanho 784 e ajustamos os dados utilizando logaritmo.","9158aa02":"Nesse c\u00f3digo abaixo, escolhemos o primeiro centr\u00f3ide (0), que n\u00e3o quer dizer que agrupou os d\u00edgitos 0, e mostramos os primeiros 30 n\u00fameros que ele agrupou.","8fbee3da":"# Laborat\u00f3rio 7 - Modelos de Agrupamento\n\nNesse laborat\u00f3rio vamos tentar usar o K-means, para agrupar imagens de digitos do MNIST. Cada dado \u00e9 uma imagem de um d\u00edgito 28x28 pixels representando um n\u00famero entre 0 e 9. Com o algoritmo vamos ver se ele agrupa os d\u00edgitos corretamente.","2b318ad7":"Aqui executamos o Kmeans nos dados, definindo que s\u00e3o 10 centr\u00f3ides, j\u00e1 que temos apenas 10 d\u00edgitos diferentes.","c90a0ac3":"Agora, para ter uma vis\u00e3o melhor do desempenho do nosso algoritmo, utilizamos a fun\u00e7\u00e3o crosstab do pandas para ver como foram agrupados os n\u00fameros em cada um dos centr\u00f3ides. Novamente veja que o n\u00famero do centroide n\u00e3o tem a ver com o d\u00edgito que ele supostamente agrupou. O ideal \u00e9 que para cada linha, haja uma concentra\u00e7\u00e3o em uma \u00fanica coluna, independente de qual.","d8a21492":"Aqui imprimimos aleatoriamente 10 imagens do nosso conjunto e coloca o label correto de cada um deles."}}