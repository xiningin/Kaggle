{"cell_type":{"acf7f63f":"code","c0cf1645":"code","738d4e97":"code","fd1aec0b":"code","a38b3867":"code","4d5333c8":"code","e45a993e":"code","7b062261":"code","99fd06ec":"code","1c1bdc79":"code","3e7a84fd":"code","b183a285":"code","3d30ef31":"code","efabacb9":"code","bd599b39":"code","959e5983":"code","4e3b0ef6":"code","2550c6f1":"code","010a64d7":"code","e3ba7404":"code","4271c0f6":"code","d449c565":"code","061b9819":"code","ad315543":"code","ca713479":"code","a4b5b8dc":"code","8e529b68":"code","7f5dcb83":"code","843a540d":"markdown","db466451":"markdown","7b51cf2c":"markdown","e99d91f5":"markdown","2bdb8520":"markdown","a4f7d07c":"markdown","2753f567":"markdown","7297d932":"markdown","e99dccbf":"markdown","79732c7e":"markdown","900665a8":"markdown","01fbd6f5":"markdown","8d85d4bd":"markdown","ce2d0546":"markdown"},"source":{"acf7f63f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0cf1645":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nsns.set(style=\"darkgrid\")","738d4e97":"df1 = pd.read_csv('..\/input\/diabetes-dataset\/diabetes2.csv')\ndf1.shape","fd1aec0b":"df1.info()","a38b3867":"df1.describe()","4d5333c8":"\nprint(\"Proportion of missing values\")\nmissing_percentage = (df1==0).sum()*100\/df1.shape[0]\nmissing_percentage","e45a993e":"bp_df = df1.loc[df1['SkinThickness']==0]\nprint(\"Count of zeros in blood_pressure:\", (bp_df['BloodPressure']==0).sum())\nprint(\"Count of zeros in skinfold_thickness:\", (bp_df['SkinThickness']==0).sum())\nprint(\"Count of zeros in insulin:\", (bp_df['Insulin']==0).sum())","7b062261":"bp_df = df1.loc[df1['Insulin']==0]\nprint(\"Count of zeros in blood_pressure:\", (bp_df['BloodPressure']==0).sum())\nprint(\"Count of zeros in skinfold_thickness:\", (bp_df['SkinThickness']==0).sum())\nprint(\"Count of zeros in insulin:\", (bp_df['Insulin']==0).sum())","99fd06ec":"m_col = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']\ncolnum=1\nfor col in m_col:\n    df1[col]=df1[col].replace(0,np.nan)\n    colnum+=1\ndf1.isnull().sum()\/df1.shape[0]","1c1bdc79":"import sklearn\nfrom sklearn.impute import KNNImputer,SimpleImputer","3e7a84fd":"imputer = KNNImputer(n_neighbors=14)\nk_df1=imputer.fit_transform(df1)\ndf=pd.DataFrame(k_df1,columns=df1.columns)\ndf.shape","b183a285":"df.isnull().sum()","3d30ef31":"df['Outcome'].value_counts().plot.pie()\ndf['Outcome'].value_counts(normalize=True)","efabacb9":"\nN_col = ['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']\nplt.figure(figsize=(20,60), facecolor='white')\nplotnum=1\nfor col in N_col:\n    ax=plt.subplot(9,3,plotnum)\n    sns.boxplot(y=df[col],x=df['Outcome'])\n    plt.title(col)\n    plotnum+=1\nplt.show()","bd599b39":"plt.figure(figsize=(20,60), facecolor='white')\nplotnum=1\nfor col in N_col:\n    ax=plt.subplot(9,3,plotnum)\n    sns.distplot(df[col], bins=20)\n    plt.title(col)\n    plotnum+=1\nplt.show()","959e5983":"plt.figure(figsize=(10,7))\nsns.heatmap(df.corr(),annot=True, cmap='Reds',center = 0.4)\nplt.title('Correlation of Different columns in dataframe')\nplt.show()","4e3b0ef6":"X=df.drop(['Outcome'],axis=1)\ny=df.Outcome\n","2550c6f1":"\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30)","010a64d7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_score, \\\n    recall_score, confusion_matrix, classification_report, \\\n    accuracy_score, f1_score, roc_curve,auc, plot_confusion_matrix","e3ba7404":"\nlog_model = LogisticRegression(solver='liblinear')\nlog_model.fit(X_train,y_train)\ny_pred = log_model.predict(X_test)","4271c0f6":"res= confusion_matrix(y_test, y_pred)\nsns.heatmap(res\/np.sum(res), annot=True, fmt='.2%')\nplt.xlabel('Actual label')\nplt.ylabel('Predicted label')\nplt.show()","d449c565":"def Model_Performance(test,pred):\n    precision = precision_score(test,pred)\n    recall = recall_score(test,pred)\n    f1 = f1_score(test,pred)\n    print('1. Confusion Matrix:\\n',confusion_matrix(test, pred))\n    print(\"\\n2. Accuracy Score:\", round(accuracy_score(test, pred)*100,2),\"%\")\n    print(\"3. Precision:\", round(precision*100,2),\"%\")\n    print(\"4. Recall:\",round(recall*100,2),\"%\" )\n    print(\"5. F1 Score:\",round(f1*100,2),\"%\" )\n    print(\"6. clasification report:\\n\",classification_report(test, pred))","061b9819":"Model_Performance(y_test, y_pred)","ad315543":"fpr,tpr,_=roc_curve(y_test,y_pred)\nroc_auc=auc(fpr,tpr)\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","ca713479":"from sklearn.metrics import roc_auc_score\nprint( 'AUC Score of Model:',round(roc_auc_score(y_test,y_pred)*100,2),\"%\")","a4b5b8dc":"model_f=pd.DataFrame()\nmodel_f['Features'] = list(X_train.columns)\nmodel_f['importance'] = list(log_model.coef_[0])","8e529b68":"imp_check=pd.DataFrame(model_f.sort_values(by='importance'))\nimp_check.plot.barh(x='Features',y='importance',title='Features by Importance')\nplt.show()\n","7f5dcb83":"print(imp_check)","843a540d":"#### Many column seems to have min value zero let us observe the Proportion ok zero's in each column\n","db466451":"## Missing Value :\nA important point hear, zeros in Pragnancy column indicates a feature which could not considered as Missing Value rather zeros present in rest of the columns are to considered as a missing value and hence we will go ahead replacing zeros to Nan.*\nCount of zeros in \"blood_pressure\" column is 35 which is seems to have dependency on other column like Insulin. Reason could be a User had not attended the Test post 2 hour of lunch and hence we are observing Missing at random data in the perticular column along with other column - skinfold_thickness & insulin.\nAgain from the above result we can observe that, missing values in \"skinfold_thickness\" is correlated\/dependent on \"insulin\" column as missing records of 227 and it is same.\nTreatment to the Missing values are either ::\nDrop the records\nMean\/ Median\/ Mode Imputation\nUsing model to predict missing values.","7b51cf2c":"\n* ##### Missing records in insulin, skinfthickness are almost 50%, 30% respectively we can not dorp the the column.\n* ##### Now that we have Null values in the columns- we can now impute the missing values using KNN Imputer. ","e99d91f5":"#### let us observe if their is any dependency of missing values in skinfold_thickness and other columns\n","2bdb8520":"#### let us use Logistic Regression with Liblinear Solver","a4f7d07c":"###  Load KNNImputer","2753f567":"# Let's create a Data Model","7297d932":"### Now that we have missing values replaced using model we can go ahead analyse different columns and their patterns ","e99dccbf":"#### Feataures by Importance in our model","79732c7e":"#### Splitting DataSet into Train and Test:","900665a8":"#### Around 65% of users are healthy ( non-Diabetic)","01fbd6f5":"* We have total 767 rows and 9 columnes and looking at the Dataframe info it seems their is no NA, NAN records present in dataframe\n* if we look at the snapshot of the dataframe above we observe zero's (0) value oresent in some of the columns","8d85d4bd":"#### let us observe if their is any dependency of missing values in insulin and other columns\n","ce2d0546":"### glucose and BMI and Age shows stronger relationship with Outcome."}}