{"cell_type":{"5c9c918c":"code","db8b4522":"code","cdc775fe":"code","e27c6682":"code","4200880f":"code","9d294312":"code","da3b973f":"code","6a9bdf2f":"code","e17e4b40":"code","e45049b1":"code","666f542d":"code","fd71b4a5":"code","ac8498d4":"code","6673ea65":"code","9e85c993":"markdown","5463c0bd":"markdown","de54523e":"markdown","b2016419":"markdown","4b56ac33":"markdown","6c065c48":"markdown"},"source":{"5c9c918c":"import pandas as pd\nimport numpy as np\n\nimport xgboost as xgb\nimport lightgbm as lgb\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","db8b4522":"train = pd.read_csv('..\/input\/healthcare-analytics-2\/train (2).csv')\ntest = pd.read_csv('..\/input\/healthcare-analytics-2\/test (2).csv')","cdc775fe":"#Check for the Nan values in the dataset\ntrain.isna().sum(),test.isna().sum()","e27c6682":"#Remove Nan values and labelencode the target variable\ntrain.fillna(999,inplace=True),test.fillna(999,inplace=True)\nle = LabelEncoder()\ntrain['Stay']=le.fit_transform(train['Stay'].astype(str))","4200880f":"#Merge the test and train columns to get a combined dataset\ndf = pd.concat([train,test])\ndf.head()","9d294312":"#Count the number of unique values in the dataset\ndf.nunique()","da3b973f":"#GROUPS ON DURATION OF STAY\n#Groups on Stay on the basis of hospital type\ngroup = df.groupby(['Hospital_code','Hospital_type_code','City_Code_Hospital','Hospital_region_code']).agg(hospital_stay_cnt = ('Stay','count'))\ndf = pd.merge(df,group,on=['Hospital_code','Hospital_type_code','City_Code_Hospital','Hospital_region_code'],how='left')\n\n#Groups on Stay on the basis of the ward conditions\ngroup = df.groupby(['Available Extra Rooms in Hospital','Ward_Type','Ward_Facility_Code','Bed Grade']).agg(ward_stay_cnt=('Stay','count'))\ndf = pd.merge(df,group,on=['Available Extra Rooms in Hospital','Ward_Type','Ward_Facility_Code','Bed Grade'],how='left')\n\n#Groups on Stay on the basis of type of illness of the patient\ngroup = df.groupby(['Type of Admission','Severity of Illness','Department','Age']).agg(illness_stay_cnt = ('Stay','count'))\ndf = pd.merge(df,group,on=['Type of Admission','Severity of Illness','Department','Age'],how='left')","6a9bdf2f":"#GROUPS ON NUMBER OF VISITORS WITH PATIENT\n#Groups on the number of visitors with patient on the basis of ward conditions\ngroup = df.groupby(['Ward_Type','Ward_Facility_Code','Bed Grade']).agg(visitor_ward=('Visitors with Patient','count'))\ndf = pd.merge(df,group,on=['Ward_Type','Ward_Facility_Code','Bed Grade'],how='left')\n\n#Counting the min,max and avergae number of visitors with each patient\ngroup = df.groupby(['patientid'])['Visitors with Patient'].agg(['mean','min','max'])\ngroup.columns = [x + '_visitor_patient' for x in group.columns.ravel()]\ndf = pd.merge(df,group,on='patientid',how='left')\n\n#Counting the min,max and average number of visitors with patients on the basis of available rooms\ngroup = df.groupby(['Available Extra Rooms in Hospital'])['Visitors with Patient'].agg(['mean','min','max'])\ngroup.columns = [x + '_visitor_rooms' for x in group.columns.ravel()]\ndf = pd.merge(df,group,on='Available Extra Rooms in Hospital',how='left')\n\n#Counting the min,max and average number of visitors with patients on the basis of the city codes of the patient\ngroup = df.groupby(['City_Code_Patient'])['Visitors with Patient'].agg(['mean','min','max'])\ngroup.columns = [x + '_visitor_citypat' for x in group.columns.ravel()]\ndf = pd.merge(df,group,on='City_Code_Patient',how='left')","e17e4b40":"#GROUPS ON ADMISSION DEPOSIT\n#Average,min,max and standard deviation of admission deposit by each patient\ngroup = df.groupby(['patientid'])['Admission_Deposit'].agg(['mean','min','max','std'])\ngroup.columns = [x + '_deposit_pat' for x in group.columns.ravel()]\ndf = pd.merge(df,group,on='patientid',how='left')\n\n#Average,min,max and standard deviation of admission deposit by visitors with each patient\ngroup = df.groupby(['Visitors with Patient'])['Admission_Deposit'].agg(['mean','min','max','std'])\ngroup.columns = [x + '_deposit_visitor' for x in group.columns.ravel()]\ndf = pd.merge(df,group,on='Visitors with Patient',how='left')\n\n#Average,min,max and standard deviation of admission deposit by patient city code\ngroup = df.groupby(['City_Code_Patient'])['Admission_Deposit'].agg(['mean','min','max','std'])\ngroup.columns = [x + '_deposit_citypat' for x in group.columns.ravel()]\ndf = pd.merge(df,group,on='City_Code_Patient',how='left')\n\n#Average,min,max and standard deviation of admission deposit by illness type\ngroups = df.groupby(['Department','Type of Admission','Severity of Illness'])['Admission_Deposit'].agg(['mean','min','max','std'])\ngroups.columns = [x + '_deposit_illness' for x in groups.columns.ravel()]\ndf = pd.merge(df,groups,on=['Department','Type of Admission','Severity of Illness'],how='left')\n\n#Average,min,max and standard deviation of admission deposit by hospital type\ngroups = df.groupby(['Hospital_code','Hospital_type_code','City_Code_Hospital','Hospital_region_code'])['Admission_Deposit'].agg(['mean','min','max','std'])\ngroups.columns = [x + '_deposit_hospital' for x in groups.columns.ravel()]\ndf = pd.merge(df,groups,on=['Hospital_code','Hospital_type_code','City_Code_Hospital','Hospital_region_code'],how='left')\n\n#Average,min,max and standard deviation of admission deposit by hospital code\ngroups = df.groupby(['Hospital_type_code','Hospital_code'])['Admission_Deposit'].agg(['mean','min','max','std'])\ngroups.columns = [x + '_deposit_hosp_code' for x in groups.columns.ravel()]\ndf = pd.merge(df,groups,on=['Hospital_type_code','Hospital_code'],how='left')\n\n#Average,min,max and standard deviation of admission deposit by hospital region\ngroup = df.groupby(['Hospital_region_code','City_Code_Hospital'])['Admission_Deposit'].agg(['mean','min','max','std'])\ngroup.columns = [x + '_deposit_place_type' for x in group.columns.ravel()]\ndf = pd.merge(df,group,on=['Hospital_region_code','City_Code_Hospital'],how='left')\n\n#Average,min,max and standard deviation of admission deposit by age of patient\ngroup = df.groupby(['Age'])['Admission_Deposit'].agg(['mean','min','max','std'])\ngroup.columns = [x + '_deposit_age' for x in group.columns.ravel()]\ndf = pd.merge(df,group,on=['Age'],how='left')","e45049b1":"#GROUPS ON PATIENT ID\n#Number of patient ids in city code patient\ngroup = df.groupby('City_Code_Patient').agg(citypat_cnt=('patientid','count'))\ndf = pd.merge(df,group,on=['City_Code_Patient'],how='left')\n\n#Number of unique patients per city code patient\ngroup = df.groupby('City_Code_Patient').agg(citypat_cnt_unique=('patientid','nunique'))\ndf = pd.merge(df,group,on=['City_Code_Patient'],how='left')\n\n#Number of patient ids per severity per admission type\ngroup = df.groupby(['Type of Admission','Severity of Illness']).agg(illnes_pat_cnt=('patientid','count'))\ndf = pd.merge(df,group,on=['Type of Admission','Severity of Illness'],how='left')\n\n#Number of unique patients per severity per admission type\ngroup = df.groupby(['Type of Admission','Severity of Illness']).agg(illnes_pat_cnt_unique=('patientid','nunique'))\ndf = pd.merge(df,group,on=['Type of Admission','Severity of Illness'],how='left')\n\n#Number of departments, hospitals by code, hospitals and age by the patient\nfor i in ['Department','Hospital_code','Hospital_type_code','Age']:\n  group = df.groupby(['patientid']).agg(**{f'{i}_pat_cnt_unique':pd.NamedAgg(column=i,aggfunc='nunique')})\n  df = pd.merge(df,group,on=['patientid'],how='left')","666f542d":"#These features decreased the model accuracy score initially but seem to be increasing the score in private leaderboard for the other model\n'''\ndf['ratio_deposit_visitors'] = df['Admission_Deposit']\/df['Visitors with Patient']\ndf['ratio_deposit_rooms'] = df['Admission_Deposit']\/df['Available Extra Rooms in Hospital']\ndf['ratio_rooms_visitors'] = df['Available Extra Rooms in Hospital']\/df['Visitors with Patient']\n'''","fd71b4a5":"#Labelencoding the categorical variables\nle_var = LabelEncoder()\ncol = ['Hospital_type_code','Hospital_region_code','Department','Ward_Type','Ward_Facility_Code','Type of Admission','Severity of Illness','Age']\nfor i in col:\n  df[i] = le_var.fit_transform(df[i])","ac8498d4":"X = df[df['Stay'].notnull()]\nX_valid = df[df['Stay'].isnull()]","6673ea65":"#Using the XGBoost Model for training\nxgbc2 = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.8, gamma=0,\n              learning_rate=0.1, max_delta_step=0, max_depth=5,\n              min_child_weight=1, missing=None, n_estimators=563, n_jobs=-1,\n              nthread=4, num_class=11, objective='multi:softprob',\n              random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n              seed=27, silent=None, subsample=0.8, verbosity=1)\n\nxgbc2.fit(X.drop(columns=['case_id','Stay']),X['Stay'])\n\ny_pred_xgbc2 = xgbc2.predict(X_valid.drop(columns=['case_id','Stay']))\n\ntest_res = test[['case_id']]\ntest_res_xgbc2 = pd.concat([test_res,pd.DataFrame(y_pred_xgbc2,columns=['Stay'],dtype=np.int64)],axis=1)\ntest_res_xgbc2['Stay'] = le.inverse_transform(test_res_xgbc2['Stay'])\ntest_res_xgbc2.set_index(['case_id'],inplace=True)\ntest_res_xgbc2.to_csv('sub_xgbc5.csv')","9e85c993":"This model gave a public score of 42.8897 and a private score of 42.7239.","5463c0bd":"Due to a large number of categorical variables, we had to create lot of groups to extract information from the columns.","de54523e":"## Feature Engineering","b2016419":"For deciding the variables to create the groups on, we first threw the original dataset for the prediction and then chose the most important columns using feature importance plot.","4b56ac33":"This notebook is about the Jantahack Healthcare Analytics 2 hackathon organised by Analytics Vidhya. The link can be foun here. <br><br>The hackathon had the objective of determining the Length Of Stay of a patient in a hospital which would help the management provide better facilities to them accordingly. The dataset consisted of a lot of categorical variables describing the hospital condition, ward condition and illness type of the patient.<br><br>We made use of the groupby function to extract useful information from the dataset and used the XGBoost model to train our data and predict results.","6c065c48":"## Model Training"}}