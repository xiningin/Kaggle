{"cell_type":{"6c4c8be0":"code","6f57555a":"code","6d9a1385":"code","19a272d6":"code","da902757":"code","e395bc67":"code","9b98505d":"code","16b25739":"code","14bb5dc3":"code","96e13fa4":"code","33a83235":"code","f24cb367":"code","949987c1":"code","19d17e43":"code","6ba07136":"code","051f1876":"code","53790ee3":"code","a1c51e2b":"code","fbf75c30":"code","39c441f4":"code","8e8c7f46":"code","2e00219b":"code","e3ed65a1":"code","8b5fc7aa":"code","36b40e05":"code","aa09470d":"code","5ebc530e":"code","1aa146c3":"code","90c9fe7a":"code","4286cb8e":"code","8c98c5c4":"code","8b893c75":"code","54abf97a":"markdown","eb0e3c1b":"markdown","783b788e":"markdown","cd96a9ea":"markdown","90e36c43":"markdown","dbdcab1e":"markdown","467c0cea":"markdown","f7475f04":"markdown","9fe1752c":"markdown","c402c7b0":"markdown","e2c538a4":"markdown","b6abd05e":"markdown","69b0403b":"markdown","5158ad90":"markdown","f331548b":"markdown","7ebe244b":"markdown","54087103":"markdown","1f498483":"markdown","88fe3b01":"markdown","bc291b60":"markdown","a4696379":"markdown","4dca669c":"markdown","ab72845f":"markdown","25f223a5":"markdown","bd759f0c":"markdown","dfcb6a87":"markdown","e74c4455":"markdown","85885c2c":"markdown","7efb11fe":"markdown"},"source":{"6c4c8be0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport geopandas as gpd","6f57555a":"df = pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\ndf.info()","6d9a1385":"df.duplicated().sum()","19a272d6":"df.rename(\n    columns = {\n        'suicides\/100k pop' : 'suicide_density',\n        'country-year' : 'country_year',\n        'HDI for year' : 'year_HDI',\n        ' gdp_for_year ($) ': 'gdp_year',\n        'gdp_per_capita ($)' : 'gdp_capita'},\n    inplace = True)","da902757":"df.isna().sum()","e395bc67":"df['year_HDI'] = df['year_HDI'].fillna(0)\n\nhdi_year_all = {}\nfor country in df.country.unique():\n    hdi_year_all[country] = {}\n    for year in sorted(df.year.unique()):\n        val = df[(df['country'] == country) & (df.year == year)]['year_HDI'].unique()\n        hdi_year_all[country][year] = val[0] if len(val) else 0\n        \ndef hdi_fill(contries = [], years = [], hdi_year_all = {}):\n    for contry in contries:\n        hdis = [hdi_year_all[contry][year] for year in years]\n        \n        # Find first non 0 value\n        current_hdi = 0\n        for h in hdis:\n            if h > 0:\n                current_hdi = h\n                break\n            else:\n                pass\n            \n        for i, year in enumerate(years):\n            if hdis[i] < current_hdi:\n                hdi_year_all[contry][year] = current_hdi\n            else:\n                current_hdi = hdi_year_all[contry][year] = hdis[i]\n            \nhdi_fill(df.country.unique(), sorted(df.year.unique()), hdi_year_all)\n\nfor country in df.country.unique():\n    for year in sorted(df.year.unique()):\n        df.loc[(df['country'] == country) & (df['year'] == year), 'year_HDI'] = hdi_year_all[country][year]","9b98505d":"df['year_HDI'].describe()","16b25739":"df.select_dtypes(include=['object']).columns","14bb5dc3":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))","96e13fa4":"for c in df.country.unique():\n    if not c in world.name.tolist():\n        print(c)","33a83235":"df.loc[df.country == 'United States', 'country'] = 'United States of America'\ndf.loc[df.country == 'Russian Federation', 'country'] = 'Russia'\ndf.loc[df.country == 'Republic of Korea', 'country'] = 'South Korea'\ndf.loc[df.country == 'Czech Republic', 'country'] = 'Czechia'","f24cb367":"for country in world.name:\n    val = df[df['country'] == country]['suicides_no'].sum()\n    world.loc[world.name == country, 'Total occurances'] = val if val else None\n    \n# An oneliner alternative\n# world.loc[world.name == name, 'suicides'] = df.groupby(by='country')['suicides_no'].sum()[name] if name in df.country.unique() else None\nfig, ax = plt.subplots(1, figsize=(15,8))\n\ncmap = 'YlOrRd'\n\nax.axis('off')\nsm = plt.cm.ScalarMappable(cmap=cmap,\n                           norm=plt.Normalize(vmin=float(world['Total occurances'].min()),\n                                              vmax=float(world['Total occurances'].max())))\nsm._A = []\ncbar = fig.colorbar(sm,fraction=0.02, pad=0.02)\n\nworld.plot(column = 'Total occurances',\n           ax = ax,\n           cmap = 'YlOrRd',\n           linewidth = 0.6,\n           edgecolor = 'gray',\n           #missing_kwds={\n               #\"color\": \"lightgrey\",\n               #\"hatch\": \"\/\/\/\",\n               #\"label\": \"Missing values\"\n           #},\n          )\nax.set_title('Total Number of Suicides', fontsize = 20)\nplt.show()","949987c1":"for country in world.name:\n    val = df[df['country'] == country]['suicide_density'].mean()\n    world.loc[world.name == country, 'suicide_density'] = val if val else None\n    \n# An oneliner alternative\n# world.loc[world.name == name, 'suicides'] = df.groupby(by='country')['suicides_no'].sum()[name] if name in df.country.unique() else None\nfig, ax = plt.subplots(1, figsize=(15,8))\n\ncmap = 'bone_r'\n\nax.axis('off')\nsm = plt.cm.ScalarMappable(cmap=cmap,\n                           norm=plt.Normalize(vmin=float(world['suicide_density'].min()),\n                                              vmax=float(world['suicide_density'].max())))\nsm._A = []\ncbar = fig.colorbar(sm,fraction=0.02, pad=0.02)\n\nworld.plot(column = 'suicide_density',\n           ax = ax,\n           cmap = cmap,\n           linewidth = 0.6,\n           edgecolor = 'gray',\n           #missing_kwds={\n               #\"color\": \"lightgrey\",\n               #\"hatch\": \"\/\/\/\",\n               #\"label\": \"Missing values\"\n           #},\n          )\nax.set_title('Suicides per 100k population', fontsize = 20)\nplt.show()","19d17e43":"df.groupby(by='sex')['suicides_no'].sum()","6ba07136":"country_sex = df.groupby(by=['country', 'sex'])['suicides_no'].sum().reset_index()\n\nfor name in world.name:\n    try: \n        x = country_sex[(country_sex['sex'] == 'male') & (country_sex.country == name)].suicides_no.values[0] \/ country_sex[(country_sex.country == name)].sum().suicides_no\n    except IndexError:\n        x = None\n    finally:\n        world.loc[world.name == name, 'male_suicides'] = x\n        \nfig, ax = plt.subplots(1, figsize=(15,8))\n\ncmap = 'Blues'\n\nax.axis('off')\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=float(world.male_suicides.min()), vmax=float(world.male_suicides.max())))\nsm._A = []\ncbar = fig.colorbar(sm,fraction=0.02, pad=0.02)\n\nworld.plot(column = 'male_suicides',\n           ax = ax,\n           cmap = cmap,\n           linewidth = 0.6,\n           edgecolor = 'gray',\n          )\nax.set_title('Percentage of suicides commited by males')\nplt.show()","051f1876":"age_df = df.groupby(by=['country', 'age'])['suicides_no'].sum().reset_index()\nage_group = {\n    \"5-14 years\" : 1,\n    \"15-24 years\" : 2,\n    \"25-34 years\" : 3,\n    \"35-54 years\" : 4,\n    \"55-74 years\" : 5,\n    \"75+ years\" : 6 }\n\nfor name in world.name:\n    if name in age_df.country.unique():\n        world.loc[world['name'] == name, 'major_age_group'] = age_group[ age_df[age_df.country == name].sort_values(by = 'suicides_no', ascending = False).age.values[0] ]\n    else:\n        world.loc[world['name'] == name, 'major_age_group'] =  None","53790ee3":"world['major_age_group'].value_counts()","a1c51e2b":"fig, ax = plt.subplots(1, figsize=(15,12))\n\n\nminimum = min(age_group.values())\nmaximum = max(age_group.values()) + 1\n\ncmap = plt.get_cmap('RdBu', maximum - minimum)\nax.axis('off')\n\nworld.plot(column = 'major_age_group',\n           ax = ax,\n           cmap = cmap,\n           linewidth = 0.6,\n           edgecolor = '#132E32'\n          )\n\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin = minimum, vmax = maximum))\ncax = fig.colorbar(sm, cmap=cmap, ticks=np.arange(minimum- 0.5, maximum),fraction=0.02, pad=0.02)\ncax.ax.set_yticklabels([None] + list(age_group.keys()))\n\nplt.show()","fbf75c30":"g = sns.countplot(x = 'generation', data = df, order = df['generation'].value_counts().index)\ng.set_ylabel('Suicides')\ng.set_xticklabels(g.get_xticklabels(), rotation = 45)\n\nplt.show()","39c441f4":"df.drop(['country_year'], axis = 1, inplace = True)","8e8c7f46":"df['gdp_year'] = df['gdp_year'].str.replace(',','').astype(int)","2e00219b":"df.select_dtypes(exclude = ['object']).describe().T","e3ed65a1":"fig, ax = plt.subplots(1, 2, figsize = (15,6))\nax[0].plot(df.groupby(by='year')['suicides_no'].sum(),\n        marker = 'o')\nax[0].set_title('Total Suicides per Year')\nax[0].set_ylabel('Total Suicides')\nax[0].set_xlabel('Year')\n\nax[1].plot(df.groupby(by='year')['suicide_density'].mean(),\n        marker = 'o')\nax[1].set_title('Mean of suicides per 100k pops per Year')\nax[1].set_ylabel('Suicides per 100k pop')\nax[1].set_xlabel('Year')","8b5fc7aa":"country_suicides = df.groupby(by='country')['suicides_no'].sum().reset_index()\nmost_suicides_country = country_suicides.sort_values('suicides_no', ascending = False).head(5).country.tolist()\n\nyear_df = df.groupby(by=['country', 'year']).suicides_no.sum().reset_index()\n\nmarkers = (m for m in ['o', 'D', 'x', '^', '*'])\n\nfig, ax = plt.subplots(1, figsize = (12,8))\nfor country in most_suicides_country:\n    plt.plot(year_df[year_df.country == country].year,\n             year_df[year_df.country == country].suicides_no,\n             label = country,\n             marker = next(markers)\n            )\nax.legend(loc = 1)\nplt.show()","36b40e05":"country_suicides = df.groupby(by='country')['suicides_no'].sum().reset_index()\nmost_suicides_country = country_suicides.sort_values('suicides_no', ascending = False).head(5).country.tolist()\n\nyear_df = df.groupby(by=['country', 'year']).suicide_density.mean().reset_index()\n\nmarkers = (m for m in ['o', 'D', 'x', '^', '*'])\n\nfig, ax = plt.subplots(1, figsize = (12,8))\nfor country in most_suicides_country:\n    plt.plot(year_df[year_df.country == country].year,\n             year_df[year_df.country == country].suicide_density,\n             label = country,\n             marker = next(markers)\n            )\nax.legend(loc = 1)\nplt.show()","aa09470d":"N = 15\n\nmost_suicides_country = country_suicides.sort_values('suicides_no', ascending = False).head(N).country.tolist()\ngdp_suicide = df.groupby(by=['country', 'year']).mean().reset_index()\n\nX = gdp_suicide[(gdp_suicide.country.isin(most_suicides_country)) & (gdp_suicide.year == 2000)].suicide_density.tolist()\nY = gdp_suicide[(gdp_suicide.country.isin(most_suicides_country)) & (gdp_suicide.year == 2012)].suicide_density.tolist()\ncountry_names = gdp_suicide[(gdp_suicide.country.isin(most_suicides_country)) & (gdp_suicide.year == 2012)].country.tolist()\nsizes = gdp_suicide[(gdp_suicide.country.isin(most_suicides_country)) & (gdp_suicide.year == 2012)].suicides_no.tolist()\noffsets = {\n    \"Brazil\" : (-0.5, 1.5),\n    \"Canada\" : (0.5, -1),\n    \"France\" : (0.8, 0.8),\n    \"Germany\" : (1.0, -1.5),\n    \"Italy\" : (0.2, 1.0),\n    \"Japan\" : (0.5, 2.0),\n    \"Kazakhstan\" : (0.5, 0.5),\n    \"Mexico\" : (0.0, -1.5),\n    \"Poland\" : (0.5, 0.5),\n    \"Russia\" : (0.5, 0.5),\n    \"South Korea\" : (0.5, 0.5),\n    \"Thailand\" : (0.5, 0.5),\n    \"Ukraine\" : (0.5, 0.5),\n    \"United Kingdom\" : (0.5, -0.9),\n    \"United States of America\" : (0.5, 0.5),\n}\n\nfig, ax = plt.subplots(1,figsize=(15,10))\n\nfor x, y, size, name in list(zip(X, Y, sizes, country_names)):\n    if name == 'Thailand':\n        continue\n    ax.scatter(x, y, s=size, alpha = 0.5)\n    ax.plot([5,45],[5,45], ls ='-', color = 'gray')\n    ax.annotate(name, (x + offsets[name][0], y + offsets[name][1]), size=13)\n\nax.set_xlabel('Suicides per 100k in 2000', fontsize = 20)\nax.set_ylabel('Suicides per 100k in 2012', fontsize = 20)\n    \nplt.show()","5ebc530e":"Poins below the gray line represent a relative decrease in suicides per 100k pops.\n\nTurning our attention now to gdp, we can take a look into its correlation with the number of suicides.","1aa146c3":"sns.heatmap(df.groupby(by=['country', 'year']).mean().corr(), annot = True)\nplt.show()","90c9fe7a":"df.describe().T","4286cb8e":"from scipy.optimize import curve_fit\ndef func(x, a, b):\n    return a * x + b\n\ncountry_year = df.groupby(by=['country', 'year']).mean().reset_index()\ndef determineBehavior(recent_behavior = {}, start_year = 2000, verbose = True):\n    for country in df.country.unique():\n        recent_behavior[country] = {}\n        total_suicides = []\n        years = []\n\n        for year in range(start_year, 2015):\n            suicides = country_year[(country_year.country == country) & (country_year.year == year)].suicide_density\n            if len(suicides) > 0:\n                if suicides.values[0] > 0:\n                    total_suicides.append(suicides.values[0])\n                    years.append(year)\n\n        if len(total_suicides) < 2:\n            if verbose:\n                print(f\"{country} without data about suicides_no\")\n            recent_behavior.pop(country, None)\n        else:\n            try:\n                popt, pcov = curve_fit(func, years, total_suicides)\n                recent_behavior[country]['slope'] = popt[0]\n                recent_behavior[country]['historic'] = total_suicides\n                recent_behavior[country]['years'] = years\n            except:\n                print(f'could not make reg for {country}')","8c98c5c4":"# adapted from :http:\/\/chris35wills.github.io\/matplotlib_diverging_colorbar\/\n\nimport matplotlib.colors as colors\nclass MidpointNormalize(colors.Normalize):\n    \"\"\"\n    Normalise the colorbar so that diverging bars work there way either side from a prescribed midpoint value)\n\n    e.g. im=ax1.imshow(array, norm=MidpointNormalize(midpoint=0.,vmin=-100, vmax=100))\n    \"\"\"\n    def __init__(self, vmin=None, vmax=None, midpoint=None, clip=False):\n        self.midpoint = midpoint\n        colors.Normalize.__init__(self, vmin, vmax, clip)\n\n    def __call__(self, value, clip=None):\n        # I'm ignoring masked values and all kinds of edge cases to make a\n        # simple example...\n        x, y = [self.vmin, self.midpoint, self.vmax], [0, 0.5, 1]\n        return np.ma.masked_array(np.interp(value, x, y), np.isnan(value))\n","8b893c75":"recent_behavior = {}\ndetermineBehavior(recent_behavior, 2005, verbose = False)\n\nfor name in world.name:\n    if name in recent_behavior.keys():\n        world.loc[world.name == name, 'recent_tendency'] = recent_behavior[name]['slope']\n    else:\n        world.loc[world.name == name, 'recent_tendency'] = None\n\nfig, ax = plt.subplots(1, figsize=(15,8))\n\ncmap = 'coolwarm'\nax.axis('off')\nelev_min=float(world.recent_tendency.min())\nelev_max=float(world.recent_tendency.max())\nmid_val=0\n\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=MidpointNormalize(midpoint=mid_val,vmin=elev_min, vmax=elev_max))\nsm._A = []\ncbar = fig.colorbar(sm,fraction=0.02, pad=0.02)\n\nworld.plot(column = 'recent_tendency',\n           ax = ax,\n           cmap = cmap,\n           norm=MidpointNormalize(midpoint=mid_val,vmin=elev_min, vmax=elev_max),\n           linewidth = 0.6,\n           edgecolor = 'gray'\n          )\n\n\nplt.show()","54abf97a":"The number of male suicides far outweights the females. Lets see how this data is distributed in the world","eb0e3c1b":"### Duplicates","783b788e":"## Gender disparity\nLets see how gender influence the reported number of suicides","cd96a9ea":"# Imports","90e36c43":"This shows a worying small but steady increase over the past 10 years in the average number of suicides per 100k pops. In the USA. Russia in the other hand shows a impressive decrese.","dbdcab1e":"# Exploratory Data Analysis\nThis analysis will be focused on the geographical visualization of the data to help us understand where actions are most needed and how the available data relates to the overall number of suicides.\n","467c0cea":"To visualize how more countries have evolved this kind of plot becomes very unwieldy, as all curves would be on top of each other. A common way to plot the relative evolution of many countries is by making a scatter plot where one axis is the situation now and the other represents a past date. With this method each country would be represented by a point, not a line.","f7475f04":"### Nans","9fe1752c":"## Numerical features\n'gdp_year' is currently categorical, we must convert it before starting analysing numerical features","c402c7b0":"The feature 'country_year' is just a combination of two other available columns and does not add any new information","e2c538a4":"# Closing notes\n\nRemember that suicide and depression are real, serious problems that should be delt with by trained professionals. If you know someone that is in need of help please inform yourself about how can you can make a educated action and possibly help to save a life.\n\nThanks for reading it all! If you like this analysis (or not), let me know as it really does help to improve. \n<hr>\n","b6abd05e":"## Age group\nLets see how the total number is distributed by age group","69b0403b":"### Cuntry with most cases analysis\nLets take a closer look into the countries with most gross suicides\n","5158ad90":"Many countries only calculate de HDI every now and then (most of then in a 5 year basis), so there is a lot of missing values. Usualy all analysis use the last available number, so all NaNs will be filled with the last available value for the HDI. The code is relatively big and is not really important, so feel free to skip it.","f331548b":"I'll will fix some imporntant countries by hand, leaving out the smaller ones that can berely be seen in the map","7ebe244b":"# Cleaning\nAll datasets must be cleaned, this one is no exception.","54087103":"### ill named columns","1f498483":"There is a country in the middle east (Oman) that has 100% of *reported* suicides commited by males. Other than that we see that in **all** countries males commit more suicides.","88fe3b01":"A few interesting things stand out. The negative correlation between HID and total number of suicides is to be expected, as an increce in human conditions sould equate to a reduction in suicides, but a interesting thing that the same rationale cannot be applied to the gdp. The data don't support the affirmation that an increace in per capita gdp decreases the chance of suicide!\n\nSuch analysis should be taken with a grain of salt (acctually with a lot more than just a grain), beacause we are mixing many countries with fundamental social economical differences that could not be analysied toghether. This is but a quick and severely incomplete 'global tendency' analysis.","bc291b60":"The drop of numbers is 2016 is due to a lack of data, making this years data unfit for any meaningfull analysis. The good news is that the mean number of suicides per 100k pops is in a steady decline globally.","a4696379":"# Simple model analysis\nI will not make any fancy analysis for each country this time. Lets just make a linear regression on the past few years in each country to see if the situation is getting better or worst recently. A full time analysis could be done, but the information it provides is dubious, as many radically different hitorical moments would be encompassed by the same analysis.","4dca669c":"Most countries have experienced a recent decline in total numbers, with the exception of the USA, that is in a steady increase. Lets see if this is due to a increase in population or if the situation is indeed becoming worse.","ab72845f":"### Time series of global suicides","25f223a5":"#### Total number of suicides","bd759f0c":"The fact that in some countries the majority of suicides is commited by persons with 5-14 years is very distressing, some articles relate this to extreme chronic violence (https:\/\/theconversation.com\/rising-suicides-in-mexico-expose-the-mental-health-toll-of-living-with-extreme-chronic-violence-99131) and is a problem that must be fought urgently.","dfcb6a87":"# Geographical Visualization of Suicides with Python\n\n![image.png](attachment:image.png)\n\nIn this notebook we will look into the suicides dataset. Hopefully it can provide us insights in how to take actions based on data and where these actions are most needed.\n\nThis data is very sensitive, as these numbers are far more than mere statistics and represent lives that have come to an end. Please be aware of [possible warnings](http:\/\/https:\/\/www.helpguide.org\/articles\/suicide-prevention\/suicide-prevention.htm) and help those in their time of need.\n","e74c4455":"### Categorical features","85885c2c":"Suicides per 100k citizens of suicides","7efb11fe":"Preliminary analysis raised the problem that some country names don't match between goapandas and our dataset:"}}