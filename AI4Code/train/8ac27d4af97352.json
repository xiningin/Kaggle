{"cell_type":{"595d480f":"code","43f209da":"code","f57dc3e1":"code","e3fc8ace":"code","fc3f8ce4":"code","23b31738":"code","ce9149e9":"code","63fa0de3":"code","f572b2ef":"code","39ada825":"code","18f38121":"code","fa20a98a":"code","26eef7fb":"code","7ab58836":"code","bd3b07fc":"code","15d26f58":"code","0f48b611":"code","fca31722":"code","2513d2f1":"code","b3fce2ad":"code","cbeb004b":"code","ea1f368b":"code","520d15a8":"code","7d27cda8":"code","597ffb05":"code","1ef569bd":"code","6ab493ba":"code","38760db1":"code","21da1bbb":"code","a61f89d9":"code","99352ff3":"code","9cbc86e2":"code","b4b8b88c":"code","e8f72f6b":"code","fb3af3a4":"code","a0828bda":"code","49752075":"code","a17ddb28":"code","1eec087b":"code","abe98879":"code","3d9e43ac":"code","97616179":"code","29bc90e8":"code","37655ca0":"code","69acb728":"code","1862b0bb":"code","e08a38ef":"code","112cb990":"code","dfc7d5a4":"code","ba762f7a":"code","df77faf7":"code","65a07cfe":"code","a770f77c":"code","a195ff63":"code","ba50dcb8":"code","2f2f225f":"code","b8b990eb":"code","cd7d3617":"code","98c6ef9c":"code","1c731d3d":"code","6789aea4":"code","10059f02":"code","a051edc3":"code","0efc11ed":"code","1b808890":"code","3c501ddc":"code","e4dc0252":"code","9ea3e34c":"code","3f0962de":"code","22a5492e":"code","1b8db53a":"code","01ca6837":"code","86742bda":"code","4da10750":"code","f3f84cb6":"code","710742e5":"markdown","6b05d0b1":"markdown","104b2f67":"markdown","317e5d64":"markdown","29c777ff":"markdown","8a2f66fb":"markdown","82654d71":"markdown","8aaf56d2":"markdown","714a42ba":"markdown","c6f06aaf":"markdown","851459ab":"markdown","c9d2208c":"markdown","c9a6c0af":"markdown","f745d19d":"markdown","cafa641e":"markdown"},"source":{"595d480f":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","43f209da":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f57dc3e1":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","e3fc8ace":"train.head()","fc3f8ce4":"test.head()","23b31738":"def missing_values(df):\n    return df.isnull().values.sum()","ce9149e9":"missing_values(train)","63fa0de3":"missing_values(test)","f572b2ef":"train.info()","39ada825":"test.info()","18f38121":"train.describe().T","fa20a98a":"train.corr()['SalePrice'].sort_values()","26eef7fb":"train['OverallQual'].value_counts().sort_index()","7ab58836":"sns.scatterplot(data=train,x='OverallQual',y='SalePrice')\nplt.axhline(y=650000,c='r')\nplt.axhline(y=200000,c='r')","bd3b07fc":"train[(train['OverallQual'] > 8) & (train['SalePrice'] < 200000)][['OverallQual','SalePrice']]","15d26f58":"train[(train['OverallQual'] > 8) & (train['SalePrice'] > 650000)][['OverallQual','SalePrice']]","0f48b611":"sns.scatterplot(data=train,x='GrLivArea',y='SalePrice')\nplt.axhline(y=650000,c='r')\nplt.axhline(y=200000,c='r')\nplt.axvline(x=4000,c='r')","fca31722":"train[(train['GrLivArea'] > 4000) & (train['SalePrice'] > 650000)][['GrLivArea','SalePrice']]","2513d2f1":"train[(train['GrLivArea'] > 4000) & (train['SalePrice'] < 200000)][['GrLivArea','SalePrice']]","b3fce2ad":"sns.scatterplot(data=train,x='GarageCars',y='SalePrice')\nplt.axhline(y=650000,c='r')","cbeb004b":"train[train['SalePrice'] > 650000][['GarageCars','SalePrice']]","ea1f368b":"drop0 = train[train['SalePrice'] > 650000].index\ndrop1 = train[(train['OverallQual'] > 8) & (train['SalePrice'] < 200000)].index\n\ntrain = train.drop(drop0,axis=0)\ntrain = train.drop(drop1,axis=0)","520d15a8":"100 * (train.isnull().sum() \/ len(train)).sort_values()","7d27cda8":"def missing_value_percent(df):\n    nan_percent = 100 * (df.isnull().sum() \/ len(df))\n    nan_percent = nan_percent[nan_percent > 0 ].sort_values()\n    return nan_percent","597ffb05":"def fig_check(x):\n    nan_percent = missing_value_percent(x)\n    plt.figure(figsize=(10,6))\n    sns.barplot(x=nan_percent.index,y=nan_percent)\n    plt.xticks(rotation=90)","1ef569bd":"fig_check(train)","6ab493ba":"fig_check(test)","38760db1":"train = train.dropna(axis=0,subset=['Electrical'])","21da1bbb":"cols = ['KitchenQual', 'GarageArea', 'GarageCars', 'TotalBsmtSF', 'BsmtUnfSF','BsmtFinSF2', 'SaleType', 'Exterior2nd', \n        'Exterior1st', 'BsmtFinSF1','Utilities', 'BsmtFullBath', 'BsmtHalfBath','Functional','MSZoning']\ntest = test.dropna(axis=0,subset=cols)","a61f89d9":"def Mas(df):\n    df['MasVnrType']= df['MasVnrType'].fillna('None')\n    df['MasVnrArea']= df['MasVnrArea'].fillna(0)","99352ff3":"Mas(train)\nMas(test)","9cbc86e2":"bsm=['BsmtQual','BsmtCond','BsmtFinType1','BsmtExposure','BsmtFinType2']\nfor x in bsm:\n    print(type(x))","b4b8b88c":"train[bsm] = train[bsm].fillna('None')\ntest[bsm] = test[bsm].fillna('None')","e8f72f6b":"fig_check(train)","fb3af3a4":"garage = ['GarageType','GarageFinish','GarageQual','GarageCond']\ntrain[garage] = train[garage].fillna('None')\ntest[garage] = test[garage].fillna('None')","a0828bda":"train['GarageYrBlt'] = train['GarageYrBlt'].fillna(train['GarageYrBlt'].mean())\ntest['GarageYrBlt'] = test['GarageYrBlt'].fillna(test['GarageYrBlt'].mean())","49752075":"fig_check(train)","a17ddb28":"fig_check(test)","1eec087b":"plt.figure(figsize=(10,10))\nsns.barplot(data=train,x='LotFrontage',y='Neighborhood',ci=None)","abe98879":"train.groupby('Neighborhood')['LotFrontage'].mean()","3d9e43ac":"train['LotFrontage'] = train.groupby('Neighborhood')['LotFrontage'].apply(lambda x : x.fillna(x.mean()))\ntest['LotFrontage'] = test.groupby('Neighborhood')['LotFrontage'].apply(lambda x : x.fillna(x.mean()))","97616179":"fig_check(train)","29bc90e8":"train['FireplaceQu'] = train['FireplaceQu'].fillna('None')\ntest['FireplaceQu'] = test['FireplaceQu'].fillna('None')","37655ca0":"train = train.drop(labels=['Id','Fence','Alley','MiscFeature','PoolQC'],axis=1)\ntest = test.drop(labels=['Fence','Alley','MiscFeature','PoolQC'],axis=1)","69acb728":"nan_percent = missing_value_percent(train)\nnan_percent","1862b0bb":"nan_percent = missing_value_percent(test)\nnan_percent","e08a38ef":"train.head()","112cb990":"test.head()","dfc7d5a4":"train.info()","ba762f7a":"train['MSSubClass'] = train['MSSubClass'].astype(str)\ntest['MSSubClass'] = test['MSSubClass'].astype(str)","df77faf7":"train_num = train.select_dtypes(exclude=object)\ntrain_obj = train.select_dtypes(include=object)","65a07cfe":"train_num.info()","a770f77c":"train_obj.info()","a195ff63":"train_obj.shape","ba50dcb8":"test_num = test.select_dtypes(exclude=object)\ntest_obj = test.select_dtypes(include=object)","2f2f225f":"test_num.info()","b8b990eb":"test_obj.info()","cd7d3617":"test_obj.shape","98c6ef9c":"train_obj = pd.get_dummies(train_obj,drop_first=True)","1c731d3d":"test_obj = pd.get_dummies(test_obj,drop_first=True)","6789aea4":"train_obj.shape","10059f02":"test_obj.shape","a051edc3":"final0 = pd.concat([train_num,train_obj],axis=1)\nfinal0.head()","0efc11ed":"final1 = pd.concat([test_num,test_obj],axis=1)\nfinal1.head()","1b808890":"print('The Final shape of Training Set :',final0.shape)\nprint('The Final shape of Testing Set :',final1.shape)","3c501ddc":"\n#Split the data to feature and target\nX = final0.drop('SalePrice',axis=1)\ny = final0['SalePrice']\n","e4dc0252":"from sklearn.model_selection import train_test_split\nX_train , X_test , y_train , y_test = train_test_split(X,y,test_size=.2,random_state=42)","9ea3e34c":"from sklearn.linear_model import LinearRegression\nimport xgboost as xgb\n\nlin  = LinearRegression()\nXGB  = xgb.XGBRegressor(use_label_encoder = False,eval_metric = 'rmse',n_estimators = 5000,reg_alpha = 0.1,reg_lambda = 0.005,learning_rate = 0.0125,\n                        max_depth = 13,min_child_weight = 4,gamma = 0.04,subsample = 0.7,colsample_bytree = 0.6)\n\nlin.fit(X_train,y_train)\nXGB.fit(X_train,y_train)\n\nprint('Linear Regression Score for training',lin.score(X_train,y_train))\nprint('XGBoost Score for training ',XGB.score(X_train,y_train))","3f0962de":"y_pred0 = lin.predict(X_test)\ny_pred1 = XGB.predict(X_test)","22a5492e":"from sklearn.metrics import mean_squared_error\nprint(mean_squared_error(y_pred0,y_test))\nprint(mean_squared_error(y_pred1,y_test))","1b8db53a":"ids = final1['Id']\nfinal1 = final1.drop(['Id'],axis=1)","01ca6837":"rest = set(X.columns.values) - set(list(final1.columns.values))\nfor feature in list(rest):\n    final1[feature] = 0","86742bda":"final1 = final1[X.columns]","4da10750":"\nprediction = XGB.predict(final1.values)\n","f3f84cb6":"submission = pd.DataFrame({\"Id\":ids,\"SalePrice\":prediction})\nsubmission.to_csv('submission.csv', index=False)","710742e5":"# Handle the Missing Values","6b05d0b1":"### So the best Model is XGBRegressor","104b2f67":"### Train the Model","317e5d64":"# Import DataSet and Overview","29c777ff":"### Remove the Outliers  ","8a2f66fb":"### Linear feet of street connected to propert neigbhours","82654d71":"# Handel the Outliers","8aaf56d2":"### Spliting data into Numerical and Categorical","714a42ba":"# Modeling","c6f06aaf":"### Predicted test data","851459ab":"# Submission","c9d2208c":"# Handle the Categorical Data","c9a6c0af":"### Merge data","f745d19d":"# Data Preparation","cafa641e":"# Import Libraries"}}