{"cell_type":{"f5216728":"code","738df096":"code","2ad3742f":"code","989538a1":"code","5563d70a":"code","a75a1629":"code","2c86448b":"code","ce8c19c2":"code","4ace81f7":"code","d3550a3e":"code","c9859d43":"code","4b3161ea":"code","cd1562bc":"code","7edc3900":"code","6cba6337":"code","65c094dd":"code","4ca03906":"code","228c9454":"code","e9c2100c":"markdown","7682a05a":"markdown","1501f1bd":"markdown","b8784806":"markdown","6ad3900a":"markdown","0c479d4f":"markdown","d8162f5f":"markdown","d9fea0d1":"markdown"},"source":{"f5216728":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","738df096":"#Assignment 1 for Ethan Bailey","2ad3742f":"train_data = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv')","989538a1":"train_data.info()","5563d70a":"train_data.head()","a75a1629":"from scipy import stats\n\ntrain_data['Start Date'] = pd.to_datetime(train_data['Start Date'])\ntrain_data['End Date'] = pd.to_datetime(train_data['End Date'])\ntrain_data['Start'] = train_data['Start Date'].apply(lambda row: row.toordinal())\ntrain_data['End'] = train_data['End Date'].apply(lambda row: row.toordinal())\n\nfeatures = ['Start', 'End', 'MMWR Week', 'Race and Hispanic Origin Group', 'Age Group', 'COVID-19 Deaths']\ntrain_data = train_data[features][(train_data['HHS Region'] == 'United States') & (train_data['Group'] == 'By Week')]\ntrain_data = train_data[(np.abs(stats.zscore(train_data['COVID-19 Deaths'])) < 3.5)]\ntrain_data.head()","2c86448b":"train_data.isnull().sum()","ce8c19c2":"train_data['COVID-19 Deaths'].describe()","4ace81f7":"import matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_axes([0, 0, 1, 1])\nax.bar(train_data['Age Group'], train_data['COVID-19 Deaths'])\nplt.xticks(rotation=90)\nplt.show()","d3550a3e":"import matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_axes([0, 0, 1, 1])\nax.bar(train_data['Race and Hispanic Origin Group'], train_data['COVID-19 Deaths'])\nplt.xticks(rotation=90)\nplt.show()","c9859d43":"import matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_axes([0, 0, 1, 1])\nax.bar(train_data['MMWR Week'], train_data['COVID-19 Deaths'])\nplt.show()","4b3161ea":"from sklearn.model_selection import train_test_split\n\nfeatures = ['MMWR Week', 'Race and Hispanic Origin Group', 'Age Group']\nX = pd.get_dummies(train_data[features])\ny = train_data['COVID-19 Deaths']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n\nlr = LinearRegression()\nrdg = Ridge()\nlss = Lasso()\nen = ElasticNet()","cd1562bc":"from sklearn.model_selection import cross_val_score as cvs\n\nlr_cross = cvs(lr, X_train, y_train, cv=3)\nlr_cross = pd.DataFrame(lr_cross)\nlr_cross.describe()","7edc3900":"rdg_cross = cvs(rdg, X_train, y_train, cv=3)\nrdg_cross = pd.DataFrame(rdg_cross)\nrdg_cross.describe()","6cba6337":"lss_cross = cvs(lss, X_train, y_train, cv=3)\nlss_cross = pd.DataFrame(lss_cross)\nlss_cross.describe()","65c094dd":"en_cross = cvs(en, X_train, y_train, cv=3)\nen_cross = pd.DataFrame(en_cross)\nen_cross.describe()","4ca03906":"from sklearn.metrics import mean_squared_error as MSE\n\nlr.fit(X_train, y_train)\nrdg.fit(X_train, y_train)\nlss.fit(X_train, y_train)\nen.fit(X_train, y_train)\n\nlr_pred = lr.predict(X_test)\nrdg_pred = rdg.predict(X_test)\nlss_pred = lss.predict(X_test)\nen_pred = en.predict(X_test)\n\nlr_pred[lr_pred<0] = 0\nrdg_pred[rdg_pred<0] = 0\nlss_pred[lss_pred<0] = 0\nen_pred[en_pred<0] = 0\n\nprint('RMSE for Linear Regression: ', MSE(lr_pred, y_test)**(1\/2))\nprint('RMSE for Ridge: ', MSE(rdg_pred, y_test)**(1\/2))\nprint('RMSE for Lasso: ', MSE(lss_pred, y_test)**(1\/2))\nprint('RMSE for Elastic Net: ', MSE(en_pred, y_test)**(1\/2))","228c9454":"test_data['Start Date'] = pd.to_datetime(test_data['Start Date'])\ntest_data['End Date'] = pd.to_datetime(test_data['End Date'])\ntest_data['Start'] = test_data['Start Date'].apply(lambda row: row.toordinal())\ntest_data['End'] = test_data['End Date'].apply(lambda row: row.toordinal())\n\nX_final = pd.get_dummies(train_data[features])\nX_test_final = pd.get_dummies(test_data[features])\n\nmodel = Ridge()\nmodel.fit(X_final, y)\npredictions = model.predict(X_test_final)\n\noutput = pd.DataFrame({'id':test_data['id'], 'COVID-19 Deaths':predictions})\noutput.to_csv('submission.csv', index=False)","e9c2100c":"Loading in the data","7682a05a":"Building the model while one-hot encoding the classification features","1501f1bd":"Checking the train data for missing values","b8784806":"Submission run using the best model","6ad3900a":"Fitting and training the models","0c479d4f":"Finding the cross validation scores for each model and using .describe() on the distributions","d8162f5f":"Subsetting the data to remove unnecessary data, turning dates into ordinal numbers","d9fea0d1":"Starting Exploratory Data Analysis"}}