{"cell_type":{"da863ee7":"code","a7ca8411":"code","8ecf9ee2":"code","9dac31a7":"code","eca36f68":"code","cd9d9d2e":"code","1b5ec6be":"code","c71db404":"code","685e7955":"code","60f1e99d":"markdown","a4f68739":"markdown","40f56ece":"markdown","2c3dc8a7":"markdown","65e05290":"markdown","3a8e1ccd":"markdown","e9145431":"markdown","f39bc8e6":"markdown","736204c9":"markdown"},"source":{"da863ee7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7ca8411":"#This will help us keep track of the submissions\nsub_name_list = ['dummy', 'shortlikeafox']\nscore_list = [] #We can keep the scores here\n\n#Put the submissions in dataframe form and add to a list.\nsub_list = []\ntemp_df = pd.read_csv(\"\/kaggle\/input\/ufc-fight-night-figueiredo-vs-benavidez-dummy-sub\/task-dummy.csv\")\nsub_list.append(temp_df)\ntemp_df = pd.read_csv(\"\/kaggle\/input\/ufc-fight-night-figueiredo-vs-benavidez-bet-sub\/ufc-fight-night-figueiredo-vs-benavidez-submission.csv\")\nsub_list.append(temp_df)","8ecf9ee2":"results_df = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/most-recent-event.csv\")\n\n#We only need the fighter names, odds, and winner\n\nresults_df = results_df[['R_fighter', 'B_fighter', 'R_ev', 'B_ev', 'Winner']]\ndisplay(results_df)","9dac31a7":"#Returns a specific bet EV based on winning_ev and probability.\ndef get_bet_ev(ev, prob):\n    \n    return(ev*prob - (1-prob)*100)","eca36f68":"#Used to determine the bet of each fight.  We will use probabilities and the ev to \n#determine profitable bets\ndef get_bet(R_prob, B_prob, R_ev, B_ev):\n    red_ev = get_bet_ev(R_ev, R_prob)\n    blue_ev = get_bet_ev(B_ev, B_prob)\n    if red_ev > 0:\n        return('Red')\n    if blue_ev > 0:\n        return('Blue')\n    \n    return 'None'","cd9d9d2e":"def get_profit(winner, bet, R_ev, B_ev):\n    if bet == 'None':\n        return 0\n    if (bet == 'Blue' and winner == 'Blue'):\n        return B_ev\n    if (bet == 'Red' and winner == 'Red'):\n        return R_ev\n    else:\n        return (-100)","1b5ec6be":"#Let's make a helper function to make this easier\n\ndef get_score(sub, results):\n#    display(sub)\n#    display(results)\n    #Let's merge the two dataframes\n    merge_df = pd.merge(sub, results)\n    #display(merge_df)\n    #We can get the proper bet by using a lambda function\n    merge_df['Bet'] = merge_df.apply(lambda x: get_bet(x['R_prob'],x['B_prob'],x['R_ev'],x['B_ev']), axis=1)\n    merge_df['Profit'] = merge_df.apply(lambda x: get_profit(x['Winner'], x['Bet'], x['R_ev'], x['B_ev']), axis=1)\n    display(merge_df)\n    return(sum(merge_df['Profit']))","c71db404":"z = 0\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","685e7955":"z = 1\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","60f1e99d":"# Submissions\n\nThere are 2 submissions.\n\n1. The dummy file (gives each fighter a .5 probability of winning. Therefore will bet every underdog with greater than +100 odds.)\n\n2. shortlikeafox's (my!) submission. A Gradient Boosting Classifier using the following features: ['Bcurrentwinstreak', 'RwinbySubmission', 'BwinbyDecisionUnanimous', 'RwinbyDecisionUnanimous', 'Rcurrentlosestreak', 'BwinbyTKODoctorStoppage', 'windif', 'BwinbyDecisionSplit', 'Bwins', 'RStance', 'Bage', 'BWeightlbs', 'Rev', 'Btotalroundsfought', 'location', 'Rodds', 'RReachcms', 'RWeightlbs', 'Rcurrentwinstreak', 'Rage', 'emptyarena', 'RwinbyDecisionSplit', 'Rdraw', 'losestreakdif', 'Bdraw']","a4f68739":"# Open All Submissions and add to a list","40f56ece":"# Final Results\n\n* dummy: +120 units\n* shortlikeafox: +143.73 units\n\nThe winner is shortlikeafox!","2c3dc8a7":"# Submission #1: Dummy Submission\n\nThese are the results of the dummy submission.","65e05290":"Dummy is only ever going to bet fighters who have odds greater than +100. Here he won 4 fights and lost 6 for a total profit of 120 units.","3a8e1ccd":"shortlikeafox won 6 bets and lost 5 for a total profit of 143.73 units.  shortlikeafox used a Gradient Boosting Classifier which seems to be less extreme in it probabilities than the GaussianNB shortlike a fox had used for the last couple of contests.","e9145431":"# Submission #2: shortlikeafox's Submission","f39bc8e6":"# Iterate the submissions and see how everyone did!","736204c9":"# Purpose\n\nI am going to go through the task submissions for [UFC Fight Night: Figueiredo vs. Benavidez](https:\/\/www.kaggle.com\/mdabbert\/ultimate-ufc-dataset\/tasks?taskId=1386)  and see what set of predictions was the most profitable (if any!)"}}