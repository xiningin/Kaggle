{"cell_type":{"16fe6d13":"code","9ba4e1d2":"code","ae3b0f02":"code","fcd5d359":"code","79c518bd":"code","cd38b46a":"code","f7091a50":"code","fcf80067":"code","3ae6c924":"code","a46d122e":"code","b9eaec39":"code","37f049cf":"code","6290795b":"code","8b864cf4":"code","47e4fdd1":"code","a344bedc":"code","bd988d6a":"code","3232f992":"code","3d2fae58":"code","d1bdcebd":"code","d0d0d8f9":"code","ff41f668":"code","d68bf4fc":"code","c472f289":"code","7d9a9773":"code","aff91819":"code","11667a18":"code","9932fe5c":"code","025f032a":"code","4bd8a062":"code","da8259ae":"code","d0e9a28b":"code","9fad7f03":"code","37b45d03":"code","ed6148e9":"code","a6532798":"code","03fdf257":"code","9ab033e5":"code","3fcebb5e":"code","6193e2e2":"code","0fd9a685":"code","dceb5683":"code","c9e7645e":"code","cc9293be":"code","4631619d":"code","c29e1688":"code","6e8f38d0":"code","e79a10a0":"code","dac3e3d3":"code","df599cc1":"code","626dbab2":"code","f216b226":"code","1f7041d3":"code","494d59a6":"code","130b9e18":"code","2bb62939":"code","b22cb9e7":"code","60c8160a":"code","07d4d56a":"code","0395f525":"code","d2243cd2":"code","ad94a4da":"code","1214efde":"code","2c99d9cc":"code","458ff916":"code","cf1ebdb2":"code","cb207980":"code","1f03b3c1":"code","b914ba85":"code","1fa0f4fc":"code","5b7f30c9":"code","710abcb3":"code","4d62f139":"code","446aa399":"code","a7950a9c":"code","68d1b46c":"code","afd679d9":"code","d3a2a469":"code","c809398d":"code","68b5b5cd":"code","07db2bcc":"code","28204916":"code","017526a8":"markdown","b3b5ca31":"markdown","01b36794":"markdown","6b1fd862":"markdown","abb89f0e":"markdown","389c9673":"markdown","5e31df90":"markdown","6d693b10":"markdown","5db93925":"markdown","6b80ad04":"markdown","16c0578b":"markdown","dac9e054":"markdown","23a85f74":"markdown","e50f423a":"markdown","5be5db01":"markdown","a45f5b2f":"markdown","b508f3ee":"markdown","66ae3a5e":"markdown","72271e06":"markdown"},"source":{"16fe6d13":"# packages\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport time\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\n\nimport shap\n\nimport xgboost as xgb","9ba4e1d2":"df = pd.read_csv('..\/input\/insurance-charges\/insurance.csv')","ae3b0f02":"df.head()","fcd5d359":"df.shape","79c518bd":"# target\ndf.charges.plot(kind='hist', bins=20)\nplt.title('Target = charges')\nplt.grid()\nplt.show()","cd38b46a":"# target is skewed => add log transformed target\ndf['log_charges'] = np.log10(df.charges)","f7091a50":"# plot log target\ndf.log_charges.plot(kind='hist', bins=20)\nplt.title('log10(Target)')\nplt.grid()\nplt.show()","fcf80067":"df.age.plot(kind='hist', bins=20)\nplt.title('Age')\nplt.grid()\nplt.show()","3ae6c924":"df.bmi.plot(kind='hist', bins=20)\nplt.title('BMI')\nplt.grid()\nplt.show()","a46d122e":"df.sex.value_counts()","b9eaec39":"df.sex.value_counts().plot(kind='bar')\nplt.title('Sex')\nplt.grid()\nplt.show()","37f049cf":"df.children.value_counts()","6290795b":"df.children.value_counts().plot(kind='bar')\nplt.title('Children')\nplt.grid()\nplt.show()","8b864cf4":"# add also numeric version\ndf['children_num'] = pd.to_numeric(df.children)\ndf.children_num.describe()","47e4fdd1":"df.smoker.value_counts()","a344bedc":"df.smoker.value_counts().plot(kind='bar')\nplt.title('Smoker')\nplt.grid()\nplt.show()","bd988d6a":"df.region.value_counts()","3232f992":"df.region.value_counts().plot(kind='bar')\nplt.title('Region')\nplt.grid()\nplt.show()","3d2fae58":"df[['age', 'bmi','children_num']].corr()","d1bdcebd":"sns.pairplot(df[['age', 'bmi','children_num']], \n             kind='reg', \n             plot_kws={'line_kws':{'color':'magenta'}, 'scatter_kws': {'alpha': 0.1}})\nplt.show()","d0d0d8f9":"df.columns","ff41f668":"# define categorical and numeric features\nfeatures_cat = ['sex', 'children', 'smoker', 'region']\nfeatures_num = ['age', 'bmi']","d68bf4fc":"for f in features_cat:\n    plt.figure(figsize=(6,4))\n    sns.violinplot(x=f, y='log_charges', data=df)\n    my_title = 'Target vs ' + f\n    plt.title(my_title)\n    plt.grid()","c472f289":"# scatter plot\nfor f in features_num:    \n    plt.scatter(df[f], df.log_charges, alpha=0.25)\n    my_title = 'Target vs ' + f\n    plt.title(my_title)\n    plt.xlabel(f)\n    plt.ylabel('log_charges')\n    plt.grid()\n    plt.show()","7d9a9773":"# smoothed visualization\nfor f in features_num:\n    my_title = 'Target vs ' + f\n    sns.jointplot(data=df, x=f, y='log_charges', kind='kde')\n    plt.title(my_title)\n    plt.show()","aff91819":"# The target vs age plot looks nice, there seem to be separate regions.\n# Let's have a closer look:\nfig = px.scatter(df, x='age', y='log_charges',\n                    color='smoker',\n                    opacity=0.5)\nfig.update_layout(title='Target vs Age \/ Smoker')\nfig.show()","11667a18":"# same for BMI instead of Age\nfig = px.scatter(df, x='bmi', y='log_charges',\n                    color='smoker',\n                    opacity=0.5)\nfig.update_layout(title='Target vs BMI \/ Smoker')\nfig.show()","9932fe5c":"# interactive 3D plot\nfig = px.scatter_3d(df, x='age', y='bmi', z='log_charges',\n                    color='smoker',\n                    opacity=0.5)\nfig.update_layout(title='Target vs Age and BMI (smoker via color)')\nfig.show()\n","025f032a":"# select features\nfeatures = features_num + features_cat\nfeatures","4bd8a062":"X = df[features]\ny = df.log_charges # let's use the log transformed target!","da8259ae":"# dummy encoding\nX = pd.get_dummies(X)","d0e9a28b":"X.head()","9fad7f03":"# train \/ test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=180)","37b45d03":"X_train.shape","ed6148e9":"X_test.shape","a6532798":"# define random forest model (regression)\nregRF = RandomForestRegressor(n_estimators=500, max_features=6, random_state=1234)","03fdf257":"# fit model\nt1 = time.time()\nregRF.fit(X_train, y_train)\nt2 = time.time()\nprint('Elapsed time [sec]:', round(t2-t1,3))","9ab033e5":"# feature importance\nfeature_imp = pd.Series(regRF.feature_importances_, index=X.columns).sort_values(ascending=False)\nfeature_imp","3fcebb5e":"# and plot\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.title('Variable Importance - RF')\nplt.grid()\nplt.show()","6193e2e2":"# predict values on test set\nyhat_test = regRF.predict(X_test)","0fd9a685":"# metrics (on log transformed data)\nprint('RMSE Test (log trafo) :', round(np.sqrt(metrics.mean_squared_error(yhat_test, y_test)),6))\nprint('MAE Test  (log trafo) :', round(metrics.mean_absolute_error(yhat_test, y_test),6))\nprint('R^2       (log trafo) :', round(metrics.r2_score(yhat_test, y_test),6))","dceb5683":"plt.scatter(y_test, yhat_test, alpha=0.5)\nplt.title('RF Prediction vs Actual [Test] - log transformed data')\nplt.grid()\nplt.show()","c9e7645e":"# transform back to original \"coordinates\"\nyhat_test_orig = 10**yhat_test\ny_test_orig = 10**y_test","cc9293be":"plt.scatter(y_test_orig, yhat_test_orig, alpha=0.5)\nplt.title('RF Prediction vs Actual [Test] - Original Coordinates')\nplt.grid()\nplt.show()","4631619d":"# metrics in original coordinates\nrmse_test_RF = round(np.sqrt(metrics.mean_squared_error(yhat_test_orig, y_test_orig)),6)\nmae_test_RF = round(metrics.mean_absolute_error(yhat_test_orig, y_test_orig),6)\nR2_test_RF = round(metrics.r2_score(yhat_test_orig, y_test_orig),6)\nprint('RMSE Test :', rmse_test_RF)\nprint('MAE Test  :', mae_test_RF)\nprint('R^2       :', R2_test_RF)","c29e1688":"# check calibration\nprint('Mean actual [test] =        ', y_test_orig.mean())\nprint('Mean prediction RF [test] = ', yhat_test_orig.mean())\nprint('Ratio pred\/act [test] =     ', yhat_test_orig.mean()\/y_test_orig.mean())","6e8f38d0":"# check calibration on training\nyhat_train = regRF.predict(X_train)\nyhat_train_orig = 10**yhat_train\ny_train_orig = 10**y_train\n\nprint('Mean actual [train] =        ', y_train_orig.mean())\nprint('Mean prediction RF [train] = ', yhat_train_orig.mean())\nprint('Ratio pred\/act [train] =     ', yhat_train_orig.mean()\/y_train_orig.mean())","e79a10a0":"# scatter plot on training data\nplt.scatter(y_train_orig, yhat_train_orig, alpha=0.5)\nplt.title('RF Prediction vs Actual [Train] - Original Coordinates')\nplt.grid()\nplt.show()","dac3e3d3":"regXGB = xgb.XGBRegressor(             \n                    scale_pos_weight=1,\n                    learning_rate=0.05,\n                    colsample_bytree=0.7,\n                    subsample=1,\n                    n_estimators=100,\n                    reg_alpha=0,\n                    max_depth=4,\n                    gamma=0,\n                    random_state=1234)","df599cc1":"n_estimators = [50,100,200,300,400,500]\nmax_depth = [4,6]\nmin_child_weight = [1,5,10]\ncolsample_bytree = [0.5,0.7]\n\nparameter_grid = {'n_estimators': n_estimators,\n                  'max_depth': max_depth,\n                  'min_child_weight': min_child_weight,\n                  'colsample_bytree': colsample_bytree}\n\nprint(parameter_grid)","626dbab2":"# grid search\ngrid_cv = GridSearchCV(estimator = regXGB,\n                       param_grid = parameter_grid,\n                       cv=5,\n                       n_jobs=-1,\n                       verbose=1)\n\nt1 = time.time()\ngrid_cv.fit(X_train,y_train)\nt2 = time.time()","f216b226":"print('Elapsed time [sec]:', round(t2-t1,3))","1f7041d3":"# best parameters from grid search\ngrid_cv.best_params_","494d59a6":"regXGB = grid_cv.best_estimator_","130b9e18":"feature_impX = pd.Series(regXGB.feature_importances_, index=X.columns).sort_values(ascending=False)\nfeature_impX","2bb62939":"# and plot\nsns.barplot(x=feature_impX, y=feature_impX.index)\nplt.title('Variable Importance - XGB')\nplt.grid()\nplt.show()","b22cb9e7":"# predict values on test set\nyhat_testX = regXGB.predict(X_test)","60c8160a":"# metrics (on log transformed data)\nprint('RMSE Test (log trafo) :', round(np.sqrt(metrics.mean_squared_error(yhat_testX, y_test)),6))\nprint('MAE Test  (log trafo) :', round(metrics.mean_absolute_error(yhat_testX, y_test),6))\nprint('R^2       (log trafo) :', round(metrics.r2_score(yhat_testX, y_test),6))","07d4d56a":"plt.scatter(y_test, yhat_testX, alpha=0.5)\nplt.title('XGB Prediction vs Actual [Test] - log transformed data')\nplt.grid()\nplt.show()","0395f525":"# transform back to original \"coordinates\"\nyhat_testX_orig = 10**yhat_testX","d2243cd2":"plt.scatter(y_test_orig, yhat_testX_orig, alpha=0.5)\nplt.title('XGB Prediction vs Actual [Test] - Original Coordinates')\nplt.grid()\nplt.show()","ad94a4da":"rmse_test_XGB = round(np.sqrt(metrics.mean_squared_error(yhat_testX_orig, y_test_orig)),6)\nmae_test_XGB = round(metrics.mean_absolute_error(yhat_testX_orig, y_test_orig),6)\nR2_test_XGB = round(metrics.r2_score(yhat_testX_orig, y_test_orig),6)\nprint('RMSE Test :', rmse_test_XGB)\nprint('MAE Test  :', mae_test_XGB)\nprint('R^2       :', R2_test_XGB)","1214efde":"# check calibration\nprint('Mean actual [test] =         ', y_test_orig.mean())\nprint('Mean prediction XGB [test] = ', yhat_testX_orig.mean())\nprint('Ratio pred\/act [test] =      ', yhat_testX_orig.mean()\/y_test_orig.mean())","2c99d9cc":"# check calibration on training\nyhat_trainX = regXGB.predict(X_train)\nyhat_trainX_orig = 10**yhat_trainX\ny_train_orig = 10**y_train\n\nprint('Mean actual [train] =         ', y_train_orig.mean())\nprint('Mean prediction XGB [train] = ', yhat_trainX_orig.mean())\nprint('Ratio pred\/act [train] =      ', yhat_trainX_orig.mean()\/y_train_orig.mean())","458ff916":"# scatter plot on training data\nplt.scatter(y_train_orig, yhat_trainX_orig, alpha=0.5)\nplt.title('XGB Prediction vs Actual [Train] - Original Coordinates')\nplt.grid()\nplt.show()","cf1ebdb2":"# init java script visualization\nshap.initjs()\n# create explainer object\nexplainer = shap.TreeExplainer(regXGB) \n# calc shap values\nshap_values = explainer.shap_values(X)","cb207980":"# explain an individual observation\nmy_observation_index = 1\nprint(X.iloc[my_observation_index])\nshap.force_plot(explainer.expected_value, shap_values[my_observation_index,:], X.iloc[my_observation_index,:])","1f03b3c1":"# show all individual effects in one plot\nshap.summary_plot(shap_values, X)","b914ba85":"# calc \"feature importance\" using SHAP values\nshap.summary_plot(shap_values, X, plot_type=\"bar\")","1fa0f4fc":"# SHAP dependece plot\nshap.dependence_plot(\"age\", shap_values, X)","5b7f30c9":"weight_RF = 0.8\nweight_XGB = 1-weight_RF\n# blend predictions on retransformed values\nyhat_blend_test_orig = weight_RF*yhat_test_orig + weight_XGB*yhat_testX_orig","710abcb3":"plt.scatter(y_test_orig, yhat_blend_test_orig, alpha=0.5)\nplt.title('Blended Prediction vs Actual - Original Coordinates')\nplt.grid()\nplt.show()","4d62f139":"rmse_test_blend = round(np.sqrt(metrics.mean_squared_error(yhat_blend_test_orig, y_test_orig)),6)\nmae_test_blend = round(metrics.mean_absolute_error(yhat_blend_test_orig, y_test_orig),6)\nR2_test_blend = round(metrics.r2_score(yhat_blend_test_orig, y_test_orig),6)\nprint('RMSE Test :', rmse_test_blend)\nprint('MAE Test  :', mae_test_blend)\nprint('R^2       :', R2_test_blend)","446aa399":"# compare RMSE\nprint('RMSE Test RF    :', rmse_test_RF)\nprint('RMSE Test XGB   :', rmse_test_XGB)\nprint('RMSE Test Blend :', rmse_test_blend)","a7950a9c":"# compare MAE\nprint('MAE Test RF    :', mae_test_RF)\nprint('MAE Test XGB   :', mae_test_XGB)\nprint('MAE Test Blend :', mae_test_blend)","68d1b46c":"# compare R^2\nprint('R^2 Test RF    :', R2_test_RF)\nprint('R^2 Test XGB   :', R2_test_XGB)\nprint('R^2 Test Blend :', R2_test_blend)","afd679d9":"# check calibration\nprint('Mean actual [test] =         ', y_test_orig.mean())\nprint('Mean prediction XGB [test] = ', yhat_blend_test_orig.mean())\nprint('Ratio pred\/act [test] =      ', yhat_blend_test_orig.mean()\/y_test_orig.mean())","d3a2a469":"df_train_export = X_train.copy()\ndf_train_export['actual'] = y_train_orig\ndf_train_export['pred_RF'] = yhat_train_orig\ndf_train_export['pred_XGB'] = yhat_trainX_orig\ndf_train_export.head()","c809398d":"df_test_export = X_test.copy()\ndf_test_export['actual'] = y_test_orig\ndf_test_export['pred_RF'] = yhat_test_orig\ndf_test_export['pred_XGB'] = yhat_testX_orig\ndf_test_export.head()","68b5b5cd":"# export\ndf_train_export.to_csv('export_train.csv')\ndf_test_export.to_csv('export_test.csv')","07db2bcc":"# check RF performance for non-smokers vs smokers\ntrain_A = df_train_export[df_train_export.smoker_no==1]\ntrain_B = df_train_export[df_train_export.smoker_no==0]\nplt.scatter(train_A.actual, train_A.pred_RF, alpha=0.5, c='blue')\nplt.scatter(train_B.actual, train_B.pred_RF, alpha=0.5, c='red')\nplt.grid()\nplt.show()","28204916":"# check XGB performance for non-smokers vs smokers\ntrain_A = df_train_export[df_train_export.smoker_no==1]\ntrain_B = df_train_export[df_train_export.smoker_no==0]\nplt.scatter(train_A.actual, train_A.pred_XGB, alpha=0.5, c='blue')\nplt.scatter(train_B.actual, train_B.pred_XGB, alpha=0.5, c='red')\nplt.grid()\nplt.show()","017526a8":"### Correlations","b3b5ca31":"### Categorical features","01b36794":"# Import and first glance","6b1fd862":"# Predict insurance premium based on age, gender, smoker,...\n* Comprehensive EDA\n* Fit Random Forest and XGBoost model\n* SHAP explanations for XGBoost model\n* Blending\n* Analyze shortcomings of the model predictions","abb89f0e":"### Target","389c9673":"# Target vs Feature","5e31df90":"#### Similar situation...","6d693b10":"# Modeling","5db93925":"# EDA","6b80ad04":"# Outlier analysis","16c0578b":"### Evaluate performance on test set","dac9e054":"# > Blend models","23a85f74":"# > Random Forest model","e50f423a":"# > XGBoost model","5be5db01":"#### Interesting: The RF model seems to have an issue with the non-smokers...? What about the XGB model?","a45f5b2f":"# Collect and export results","b508f3ee":"### Numeric features","66ae3a5e":"#### This plots shows the impact of different values of age on the prediction. It furthermore visualizes also the variable with the strongest interaction with age, in this case smoker. One can see that there is actually an interaction effect between age and smoker as the blue and the red curves are behaving differently.","72271e06":"# > SHAP explanations for XGBoost model"}}