{"cell_type":{"8132ff5a":"code","9e4b3168":"code","9b879709":"code","b6abcc0e":"code","d975b719":"code","39014be1":"code","839776d7":"code","97570cf7":"code","f1d07d5f":"code","ddcb24a9":"code","44770065":"code","676a0942":"code","7bad14b2":"code","11afc3a5":"code","4ecef753":"code","dc96dc88":"code","97d8aeb4":"code","0bf6ba6e":"code","a46ab82d":"code","7ea1a888":"markdown","ca6feaf6":"markdown","4eab070a":"markdown","d7066690":"markdown","d615baad":"markdown","5188cf6e":"markdown","1500b124":"markdown","09f14147":"markdown","5c80d491":"markdown","0a01c435":"markdown","46297483":"markdown","38bf84e5":"markdown"},"source":{"8132ff5a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport locale\n\nplt.style.use('seaborn')\n\n# Force deterministic behavior\nnp.random.seed(0)","9e4b3168":"X_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nX_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\nX_train.drop(columns = ['Name', 'Ticket', 'Cabin'], inplace = True)\nX_test.drop(columns = ['Name', 'Ticket', 'Cabin'], inplace = True)\n\n# Only 'Male' or 'Female'\nX_train['Sex'] = X_train['Sex'].astype('category')\nX_train['Sex'] = X_train['Sex'].cat.rename_categories(lambda x: x.capitalize())\n\nX_test['Sex'] = X_test['Sex'].astype('category')\nX_test['Sex'] = X_test['Sex'].cat.rename_categories(lambda x: x.capitalize())\n\n# Only 3 embark options: C = Cherbourg, Q = Queenstown or S = Southampton\nX_train['Embarked'] = X_train['Embarked'].astype('category')\nX_train['Embarked'].cat.rename_categories({'C': 'Cherbourg', 'Q': 'Queenstown', 'S': 'Southampton'}, inplace = True)\n\nX_test['Embarked'] = X_test['Embarked'].astype('category')\nX_test['Embarked'].cat.rename_categories({'C': 'Cherbourg', 'Q': 'Queenstown', 'S': 'Southampton'}, inplace = True)\n\n# Only 3 ticket classes avaliable: 1st, 2nd and 3rd\nX_train['Pclass'] = X_train['Pclass'].astype('category')\nX_test['Pclass'] = X_test['Pclass'].astype('category')\n\nX_train","9b879709":"X_train.isna().sum()","b6abcc0e":"X_train['Age'] = X_train['Age'].apply(\n    lambda x: np.random.randint(1, X_train['Age'].max() + 1) if np.isnan(x) else x\n)\n\nX_train['Embarked'].fillna(X_train['Embarked'].mode()[0], inplace = True)","d975b719":"X_train.isna().sum()","39014be1":"X_test.isna().sum()","839776d7":"X_test['Age'] = X_test['Age'].apply(\n    lambda x: np.random.randint(1, X_test['Age'].max() + 1) if np.isnan(x) else x\n)\n\nX_test['Fare'].fillna(X_test['Fare'].mean(), inplace = True)","97570cf7":"X_test.isna().sum()","f1d07d5f":"pd.crosstab([X_train['Embarked'], X_train['Sex']], X_train['Pclass'])","ddcb24a9":"fig, axes = plt.subplots(ncols = 3, figsize = (12, 5))\n\nfig.suptitle('Categorical data distribution', fontsize = 20, fontweight = 'bold')\n\nautopct = lambda x: locale.format_string('%.2f', x) + '%\\n({:n})'.format((x\/100) * len(X_train))\n\nX_train['Embarked'].value_counts(normalize = True).plot(\n    kind = 'pie',\n    title = X_train['Embarked'].name,\n    ax = axes[0],\n    autopct = autopct,\n    colors = ['lightcoral', 'lightgreen', 'plum'],\n    shadow = True\n)\n\nX_train['Pclass'].value_counts(normalize = True).plot(\n    kind = 'pie',\n    title = X_train['Pclass'].name,\n    ax = axes[1],\n    autopct = autopct,\n    colors = ['navajowhite', 'palevioletred', 'lightseagreen'],\n    shadow = True\n)\n\nX_train['Sex'].value_counts(normalize = True).plot(\n    kind = 'pie',\n    title = X_train['Sex'].name,\n    ax = axes[2],\n    autopct = autopct,\n    colors = ['lightblue', 'lightpink'],\n    shadow = True\n)\n\nfor ax in axes:\n    ax.set_ylabel('')\n    \nplt.show()","44770065":"plt.figure(figsize = (8, 6))\n\nnum_alone = len(X_train.query('SibSp + Parch == 0'))\nnum_not_alone = len(X_train) - num_alone\n\nplt.title('Alone or not alone?', fontsize = 15, fontweight = 'bold')\n\nplt.pie(\n    [num_alone, num_not_alone], \n    labels = ['Alone', 'Not alone'],\n    autopct = autopct,\n    colors = ['navajowhite', 'palevioletred']\n)\n\nplt.show()","676a0942":"plt.figure(figsize = (12, 8))\n\nplt.title('Passengers by relatives aboard', fontsize = 15, fontweight = 'bold')\n\nplt.xlabel('# Relatives')\nplt.ylabel('# Passengers')\n\nxticks = np.arange(max(X_train['SibSp'].max(), X_train['Parch'].max(), (X_train['SibSp'] + X_train['Parch']).max()) + 2)\n\nplt.hist(\n    [X_train['SibSp'], X_train['Parch'], X_train['SibSp'] + X_train['Parch']], \n    label = ['Siblings\/spouses', 'Parents\/children', 'Siblings\/spouses\/parents\/children'], \n    rwidth = 0.75, \n    bins = xticks - 0.5\n)\n\nplt.legend()\nplt.xticks(xticks)\nplt.show()","7bad14b2":"survivors = X_train.query('Survived == True')\ndeads = X_train.query('Survived == False')\n\nnum_passengers = len(X_train)\nnum_survivors = len(survivors)\nnum_deads = len(deads)\n\nsurvival_rate = num_survivors \/ num_passengers\ndeath_rate = num_deads \/ num_passengers\n\nprint(f'Number of survivors = {num_survivors} ({survival_rate * 100.0:.2f}%)')\nprint(f'Number of deads     = {num_deads} ({death_rate * 100.0:.2f}%)')","11afc3a5":"fig, axes = plt.subplots(ncols = 3, figsize = (12, 9), sharex = True, sharey = True)\n\nfig.suptitle('Survival rate by category', fontsize = 15, fontweight = 'bold')\n\naxes[0].set_ylabel('Count')\n\nX_train.groupby('Survived')['Sex'].value_counts().unstack().plot(\n    kind = 'bar', \n    stacked = True,    \n    ax = axes[0],\n    rot = True,\n    color = ['lightpink', 'lightblue']\n)\n\nX_train.groupby('Survived')['Pclass'].value_counts().unstack().plot(\n    kind = 'bar', \n    stacked = True,    \n    ax = axes[1],\n    rot = True,\n)\n\nX_train.groupby('Survived')['Embarked'].value_counts().unstack().plot(\n    kind = 'bar', \n    stacked = True,    \n    ax = axes[2],\n    rot = True\n)\n\nfor ax in axes:\n    ax.set_xticklabels(['No', 'Yes'])\n    \n    # Annotate bars\n    for i, p in enumerate(ax.patches):\n        total_bar_height = 0\n        \n        # The height of a bar is retrivied by the sum of odd or even indexed patches   \n        j = 0 if i % 2 == 0 else 1\n\n        while j < len(ax.patches):\n            total_bar_height += ax.patches[j].get_height()\n            j += 2\n        \n        if p.get_height() > 0:\n            w, h = p.get_width(), p.get_height()\n            x, y = p.get_xy() \n            ax.text(x + w\/2, y + h\/2, '{:.2f}%'.format(h\/total_bar_height * 100.0), ha = 'center', va = 'center')\n\nplt.show()","4ecef753":"n_companions = sorted((X_train['SibSp'] + X_train['Parch']).unique())\nsurvival_rates = []\n\nfor n in n_companions:\n    cat = X_train.query('SibSp + Parch == @n')\n    survival_rates.append(len(cat.query('Survived == True'))\/len(cat) * 100.0)\n\nplt.figure(figsize = (12, 8))\n\nplt.suptitle('Survival rate by number of companions', fontsize = 15, fontweight = 'bold')\nplt.title('The annotation at each vertex of the graph gives the total number of passengers for the x-axis', fontsize = 12, y = 1.03)\n\nplt.ylabel('Survival rate (%)')\nplt.xlabel('Number of companions')\nplt.xticks(n_companions)\n\nplt.plot(n_companions, survival_rates)\n\n# Annotate vertices\nplt.text(n_companions[0], survival_rates[0] - 2,   len(X_train.query('SibSp + Parch == @n_companions[0]')))\nplt.text(n_companions[1], survival_rates[1] - 2,   len(X_train.query('SibSp + Parch == @n_companions[1]')))\nplt.text(n_companions[2], survival_rates[2] - 2,   len(X_train.query('SibSp + Parch == @n_companions[2]')))\nplt.text(n_companions[3], survival_rates[3] + 0.5, len(X_train.query('SibSp + Parch == @n_companions[3]')))\nplt.text(n_companions[4], survival_rates[4] + 1,   len(X_train.query('SibSp + Parch == @n_companions[4]')))\nplt.text(n_companions[5], survival_rates[5] - 2,   len(X_train.query('SibSp + Parch == @n_companions[5]')))\nplt.text(n_companions[6], survival_rates[6] + 0.5, len(X_train.query('SibSp + Parch == @n_companions[6]')))\nplt.text(n_companions[7], survival_rates[7] + 1,   len(X_train.query('SibSp + Parch == @n_companions[7]')))\nplt.text(n_companions[8], survival_rates[8] + 1,   len(X_train.query('SibSp + Parch == @n_companions[8]')))\n\nplt.show()","dc96dc88":"plt.figure(figsize = (12, 8))\n\nplt.suptitle('Fare distribution and survivability', fontsize = 15, fontweight = 'bold')\nplt.title('The percentage at the right side gives the survival rate for that fare interval', fontsize = 12, y = 1.03)\n\n# Mark everyone as dead\nplt.scatter(X_train['PassengerId'], X_train['Fare'], c = 'r', label = 'Died')\n\n# Paint survivors as blue \nplt.scatter(survivors['PassengerId'], survivors['Fare'], c = 'b', label = 'Survived')\n\nplt.xlabel('PassengerId')\nplt.ylabel('Fare')\n\nyticks = range(0, 550, 50)\n\nplt.yticks(yticks)\n\n_, x_max, _, _ = plt.axis()\n\n# Annotate\nfor i in yticks:\n    interval_df = X_train.query('(Fare >= @i & Fare < @i + 100)')\n    \n    if (len(interval_df) > 0):\n        survival_rate = len(interval_df.query('Survived == True')) \/ len(interval_df)\n    else:\n        survival_rate = 0\n    \n    plt.text(x_max + 5, i + 25, locale.format_string('%.2f', survival_rate * 100.0) + '%')\n\nplt.legend(frameon = True, framealpha = 1.0)\nplt.ylim([-10, 550])\nplt.show()","97d8aeb4":"from sklearn.preprocessing import MinMaxScaler\n\nX_train = pd.get_dummies(X_train, columns = ['Sex', 'Embarked', 'Pclass'])\nX_test = pd.get_dummies(X_test, columns = ['Sex', 'Embarked', 'Pclass'])\n\nX_train[['Age', 'SibSp', 'Parch', 'Fare']] = MinMaxScaler().fit_transform(X_train[['Age', 'SibSp', 'Parch', 'Fare']])\nX_test[['Age', 'SibSp', 'Parch', 'Fare']] = MinMaxScaler().fit_transform(X_test[['Age', 'SibSp', 'Parch', 'Fare']])\n\nX_train","0bf6ba6e":"from sklearn.ensemble import RandomForestClassifier\n\ny_train = X_train.pop('Survived')\n\nmodel = RandomForestClassifier(n_estimators = 1000, max_depth = 3, random_state = 1)\nmodel.fit(X_train, y_train)","a46ab82d":"predictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': X_test['PassengerId'], 'Survived': predictions})\noutput.to_csv('submission.csv', index = False)","7ea1a888":"# Data overview\n\nSome columns on our dataset are useless for Exploratory Data Analysis (EDA) and the predictive model, namely: **Name**, **Ticket** and **Cabin**. The latter could actually be useful, but the majority of instances do not contain such field, and it does not really seem to follow a pattern. Thus, we will drop those columns.","ca6feaf6":"## Preprocessing\n\nBefore we build our model, we will transform categorical data types into numeric data types. Also, we will normalize the attributes in order to improve our model. ","4eab070a":"# Filling missing data\n\nOnly `Age` and `Embarked` needs to be filled in the train dataset. The strategy for filling missing `Age` values consists of picking a random integer between the mininum and maximum values of that field in the dataset. On the other hand, missing values of the categorical attribute `Embarked` will be filled with the mode.","d7066690":"# Relationship analysis\n\n**60.27%** of passengers were travelling alone, i.e, no siblings\/spouses\/parents\/children aboard.","d615baad":"On the other hand, in the test dataset, we also have one row that does not contain `Fare` value. We will simply fill it with the mean.","5188cf6e":"# Categorical data distribution\n\nThe majority of passengers (265 out of 891) are men from Southampton carrying a third-class ticket.","1500b124":"In the graph above, we can clearly see that the vast majority of passengers were travelling alone. The maximum number of relatives aboard for a single passenger was 10.   ","09f14147":"# Conclusion\n\nOur main objective was to classify new *Titanic* passenger records as either survivor (1) or non-survivor (0).\n\nBefore jumping into the predictive model, an exploratory data analysis was conducted in order to get some insights. Many instances had missing data, which were properly filled out.\n\nThe analysis made it possible to conclude that the majority of passengers were men from Southampton carrying a third class ticket. However, despite the majority (64.76%) of passengers being male, only 31.87% of all survivors were men, while representing 85.25% of all dead. Thus, women are more likely to survive.\n\nFurthermore, carrying a first class ticket and paying a higher fare (e.g., above 50.0) proved to be an important factor in increasing the chances of surviving. Also, people traveling with 1 to 3 companions had over 50% chances of surviving, in contrast to less than 34% for values other than that.\n\nFinally, we built a Random Forest model that obtained an estimated accuracy of 0.77511 for the test records.","5c80d491":"# Building a Random Forest model","0a01c435":"Now we are able to train the model, using a thousand trees.","46297483":"# Survival rate\n\nBetter chances of surviving were observed in cases where the person either **(i)** is a woman, **(ii)** have a first-class ticket or **(iii)** embarked on Southampton. However, item number **(iii)** is not reliable, since most deaths were also from passengers who embarked on Southampton, due to the fact that 72.50% of all passengers embarked on that place. \n\nPeople with 1 to 3 companions had over 50% chances of surviving, in contrast to less than 34% for values other than that.\n\nFurthermore, higher chances of surviving were observed in passengers with a higher `Fare` attribute (especially $\\geq 50.0$). ","38bf84e5":"Finally, make the predictions and save the output to csv file to submission."}}