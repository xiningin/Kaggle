{"cell_type":{"fae22add":"code","6285fdcf":"code","91a45b70":"code","51125eb5":"code","bee4df95":"code","262df4ed":"code","59abffa7":"code","681666a2":"code","80cb355c":"code","97cc80a9":"code","8cd5f9a2":"code","ebc3d43c":"code","765ab673":"code","d899201f":"code","bceeaaca":"code","add4ccde":"code","816e28f7":"code","4189af0d":"code","00f30e58":"code","a1e196fc":"code","a42459e6":"code","eb2b0ed4":"code","34f20cf1":"code","ef4ef6c6":"code","9df85450":"markdown","e46394b5":"markdown","b2bd3af8":"markdown","1770c49e":"markdown","9cb525ac":"markdown","e0fe7e68":"markdown","2c6084ca":"markdown","60d8009b":"markdown","f50e64cc":"markdown","d50de8ae":"markdown","2aba9434":"markdown","c843b955":"markdown","43a87a6a":"markdown","d4c7f19b":"markdown","4fc23b17":"markdown","6a1297e8":"markdown","e928b931":"markdown","0e3e37a1":"markdown","9c048b31":"markdown","9e5cd1a6":"markdown"},"source":{"fae22add":"#Create 3 pairs of incomes versus numbers for male, female and total people\ndef Return_pairs():\n\n    #Define the path of data files\n    DATA_A = '..\/input\/2016-aus-census\/2016Census_G17A_AUS.csv'\n    DATA_B = '..\/input\/2016-aus-census\/2016Census_G17B_AUS.csv'\n    DATA_C = '..\/input\/2016-aus-census\/2016Census_G17C_AUS.csv'\n\n    #Read the files and concate the data into 2 lists\n    headers = []\n    nums = []\n    for i in [DATA_A,DATA_B,DATA_C]:\n        with open(i,'r') as file:\n            contents = file.read()\n        lines = contents.splitlines()\n        headers = headers + lines[0].split(',')[1:]\n        nums = nums + lines[1].split(',')[1:]\n    nums = [int(num) for num in nums]\n\n    #Lists for creating pairs of data by separated as gender and age\n    M_cats = []\n    M_nums = []\n    F_cats = []\n    F_nums = []\n    P_cats = []\n    P_nums = []\n\n    #Not include income not stated people\n    for i in range(len(headers)):\n        if '_NS' not in headers[i]:\n            if 'M_' in headers[i]:\n                M_cats.append(headers[i])\n                M_nums.append(nums[i])\n            elif 'F_' in headers[i]:\n                F_cats.append(headers[i])\n                F_nums.append(nums[i])\n            elif 'P_' in headers[i]:\n                P_cats.append(headers[i])\n                P_nums.append(nums[i])\n            else:\n                pass\n        else:\n            pass\n\n    #Not include total number of male, female and people\n    M_pairs = list(zip(M_cats,M_nums))[:-1]\n    F_pairs = list(zip(F_cats,F_nums))[:-1]\n    P_pairs = list(zip(P_cats,P_nums))[:-1]\n\n    return M_pairs, F_pairs, P_pairs","6285fdcf":"#Get the 3 pairs\nM_pairs, F_pairs, P_pairs = Return_pairs()","91a45b70":"#Check the first 10 rows of these 3 pairs\nprint(M_pairs[:10])\nprint('-------------------')\nprint(P_pairs[:10])\nprint('-------------------')\nprint(F_pairs[:10])","51125eb5":"#Define a function for creating different sorted pairs by selected different categories.\ndef Sorted_pairs(pairs, mode ,a_or_i_range = 0):\n    \"\"\"\n        Return sorted categrory list, sorted number list and indexs for plots by different modes.\n\n        :pairs: data pairs to be sorted.\n        :mode: sort by 'income' or 'age'. \n        :a_or_i_range: age or income range represented by numbers. (if mode is 'age'--\n            0(default): 15~19 years,\n            1: 20~24,\n            2: 25~34,\n            3: 35~44,\n            4: 45~54,\n            5: 55~64,\n            6: 65~74,\n            7: 75~84,\n            8: 85~,\n            9: Total people by different age range\n\n            if mode is 'income'--\n            0(default): Negative income,\n            1: 1~149,\n            2: 150~299,\n            3: 300~399,\n            4: 400~499,\n            5: 500~649,\n            6: 650~799,\n            7: 800~999,\n            8: 1000~1249,\n            9: 1250~1499,\n            10: 1500~1749,\n            11: 1750~1999,\n            12: 2000~2999,\n            13: 3000~,\n            14: Total people by different income range\n        )\n\n    \"\"\"\n    #Get what type of the pairs\n    p_type = pairs[0][0][:2]\n    sorted_cats = []\n    sorted_nums = []\n\n    #Check if mode is right\n    if(mode != 'income' and mode != 'age'):\n        raise ValueError(\"mode should be either 'income' or 'age'.\")\n\n    #sorted by income\n    if(mode == 'income'):\n        #check a_or_i_range\n        if(type(a_or_i_range) != int or a_or_i_range < 0 or a_or_i_range > 14):\n            raise ValueError(\"a_or_i_range should be the integers between 0 and 14, see function description\")\n\n        #create different sorted pairs by selected range\n        if a_or_i_range < 14:\n            start = a_or_i_range * 10\n            stop = start + 9\n            origin_pairs = pairs[start:stop]\n            sorted_pairs = sorted(origin_pairs,key = lambda item: item[1],reverse = True)\n\n        if a_or_i_range == 14:\n            origin_pairs = pairs[slice(9,len(pairs),10)]\n            sorted_pairs = sorted(origin_pairs,key = lambda item: item[1],reverse = True)\n\n    #sorted by age\n    if(mode == 'age'):\n        if(type(a_or_i_range) != int or a_or_i_range < 0 or a_or_i_range > 9):#check a_range\n            raise ValueError(\"a_or_i_range should be the integers between 0 and 9, see function description\")\n        if a_or_i_range != 9:\n            origin_pairs = pairs[slice(a_or_i_range,len(pairs),10)][:-1]\n            sorted_pairs = sorted(origin_pairs,key = lambda item: item[1],reverse = True)\n        if a_or_i_range == 9:\n            origin_pairs = pairs[-9:]\n            sorted_pairs = sorted(origin_pairs,key = lambda item: item[1],reverse = True)\n\n    #strip patterns\n    if a_or_i_range == 14:\n        for i in sorted_pairs:\n            sorted_cats.append(i[0].split(\"_Tot\")[0].split(p_type)[1])\n            sorted_nums.append(i[1])\n    if a_or_i_range == 9 and mode == 'age':\n            for i in sorted_pairs:\n                if(len(i[0].split(\"_\")) > 3):\n                    sorted_cats.append(i[0].split(\"_\")[2] + '_' + i[0].split('_')[3])\n                    sorted_nums.append(i[1])\n                if(len(i[0].split(\"_\")) == 3):\n                    sorted_cats.append(i[0].split(\"_\")[-1])\n                    sorted_nums.append(i[1])\n    if mode == 'income' and a_or_i_range != 14:\n        for i in sorted_pairs:\n            if(len(i[0].split('_')) > 4):\n                sorted_cats.append(i[0].split('_')[-3] + '_' + i[0].split('_')[-2])\n                sorted_nums.append(i[1])\n            if(len(i[0].split('_')) == 4):\n                sorted_cats.append('85_over')\n                sorted_nums.append(i[1])\n    if mode == 'age' and a_or_i_range != 9:\n        for i in sorted_pairs:\n            sorted_cats.append(i[0].split('_')[1] + '_' + i[0].split('_')[2])\n            sorted_nums.append(i[1])\n    return sorted_cats, sorted_nums, p_type, origin_pairs","bee4df95":"#try sorted_pairs\nSorted_pairs(M_pairs,'income',0)","262df4ed":"#try sorted_pairs\nSorted_pairs(F_pairs,'age',2)","59abffa7":"import os\nimport matplotlib.pyplot as plt\n\n#Function for ploting bar plots by selecting different modes\ndef plot_bar(pairs, mode, a_or_i_range = 0, save_image = False):\n    \"\"\"\n        Create bar plot by selected different categories;\n\n        :pairs: inputed data pairs\n        :mode: plot by 'income' or 'age'\n        :a_or_i_range: range of age or income. Details see Sorted_pairs().\n        :save_image: Save the image to local files. Default is False.\n    \"\"\"\n\n    #Get the sorted categories, numbers, p_type for plotting\n    sorted_cats, sorted_nums, p_type,origin_pairs = Sorted_pairs(pairs, mode, a_or_i_range)\n\n    #Redefine p_type for plot title\n    if p_type == 'M_':\n        p_type = 'Male'\n    if p_type == 'F_':\n        p_type = 'Female'\n    if p_type == 'P_':\n        p_type = 'People'\n\n    #Start plotting\n    fig = plt.figure(figsize = (9,4))\n    plt.bar(sorted_cats,sorted_nums)\n    plt.grid(axis = \"both\",which = \"both\",alpha = 0.6)\n    plt.tick_params(axis = 'x', labelrotation=90)\n    plt.ylabel(\"Number of people\")\n\n    #Define subnames lists for plotting\n    age_name = ['15~19 years','20~24 years','25~34 years','35~44 years','45~54 years','55~64 years','65~74 years','75~84 years','85 more years','total age']\n    income_name = ['Negative income','1~149$','150~299$','300~399$','400~499$','500~649$','650~799$','800~999$','1000~1249$','1250~1499$',\n            '1500~1749$','1750~1999$','2000~2999$','3000$ more','total income']\n    \n    #Create folders\n    if save_image == True:\n        if not os.path.exists('.\/Plots'):\n            os.mkdir('.\/Plots')\n            os.mkdir('.\/Plots\/Age')\n            os.mkdir('.\/Plots\/Income')\n    \n    #Define different plot title and labels by different themes.\n    if mode == 'income':\n        subname = income_name[a_or_i_range]\n        if a_or_i_range != 14:\n            plt.xlabel(\"Range of age\")\n            plt.title(\"Number of \" + p_type +\" in \" + subname + \" weekly by age, 2016 AUS Census\")\n        if a_or_i_range == 14:\n            plt.xlabel(\"Range of income\")\n            plt.title(\"Total number of \" + p_type + \" by weekly \" + subname + \",2016 AUS Census\")\n        if save_image:\n            plt.savefig(\".\/Plots\/Income\/Number_of_\" + p_type + \"_in_weekly_\" + subname + \"_by_age_Bar_Plot.png\", bbox_inches = 'tight')\n\n    if mode == 'age':\n        subname = age_name[a_or_i_range]\n        if a_or_i_range != 9:\n            plt.xlabel(\"Range of income\")\n            plt.title(\"Number of \" + p_type +\" in \" + subname + \" by weekly income, 2016 AUS Census\")\n        if a_or_i_range == 9:\n            plt.xlabel(\"Range of age\")\n            plt.title(\"Total number of \" + p_type +\" by age, 2016 AUS Census\")\n        if save_image:\n            plt.savefig(\".\/Plots\/Age\/Number_of_\" + p_type + \"_in_\" + subname + \"_by_weekly_income_Bar_Plot.png\", bbox_inches = 'tight')\n\n    #Only show image when saving is disable\n    if save_image == False:\n        plt.show()\n    if save_image == True:\n        plt.close(fig)","681666a2":"#Plot different line in two modes\n\ndef plot_line(mode,save_image = False):\n    \"\"\"\n        Plot different lines by different modes.\n\n        :mode: 'sex' and 'age'.\n        :save_image: save the image or not.\n    \"\"\"\n\n    fig = plt.figure(figsize = (9,5))\n\n    #Check if mode is right\n    if(mode != 'sex' and mode != 'age'):\n        raise ValueError(\"mode should be either 'sex' or 'age'.\")\n\n    #Different modes\n    if mode == 'sex':\n        pairs_list = [M_pairs,F_pairs,P_pairs]\n        pairs_name = ['Male','Female','People']\n        for i in range(len(pairs_list)):\n            income_cats = []\n            income_nums = []\n            for j in pairs_list[i][slice(9,len(pairs_list[i]),10)]:\n                income_cats.append(j[0].split('_')[1] + '_' + j[0].split('_')[2])\n                income_nums.append(j[1])\n            plt.plot(income_nums,label = pairs_name[i],marker = 'o')\n    if mode == 'age':\n        age_name = ['15~19 years','20~24 years','25~34 years','35~44 years','45~54 years','55~64 years','65~74 years','75~84 years','85 more years']\n        for i in range(9):\n            sorted_cats, sorted_nums, p_type, origin_pairs = Sorted_pairs(P_pairs, 'age',i)\n            income_nums = []\n            income_cats = []\n            for j in origin_pairs:\n                income_cats.append(j[0].split('_')[1] + '_' + j[0].split('_')[2])\n                income_nums.append(j[1])\n            plt.plot(income_nums,label = age_name[i],marker = 'o')\n\n    #start plotting\n    plt.xticks(ticks = range(len(income_cats)), labels = income_cats)\n    plt.tick_params(axis = 'x',labelrotation=90)\n    plt.xlabel('Income range')\n    plt.ylabel('Number of people')\n    plt.title(\"Number of people in different weekly income ranges by \"+ mode +\", 2016 AUS Census\")\n    plt.legend()\n\n    #Only show plot when not saving\n    if save_image == False:\n        plt.show()\n    if save_image == True:\n        \n        #Create folders\n        if not os.path.exists('.\/Plots'):\n            os.mkdir('.\/Plots')\n            os.mkdir('.\/Plots\/Age')\n            os.mkdir('.\/Plots\/Income')\n        \n        plt.savefig(\".\/Plots\/Number_of_people_vs_weekly_income_by_\" + mode + \"_Line_Plot.png\", bbox_inches = 'tight')\n        plt.close(fig)","80cb355c":"#Create all plots of the pairs by selected age or income\ndef Save_all_img(plt_type,mode):\n    \"\"\"\n        Generate line or bar plots and save the plots of data pairs based on the mode.\n\n        :plt_type: 'line' or 'bar'\n        :mode : bar plot has 'income' and 'age' options;\n                line plot has 'sex' and 'age' options\n    \"\"\"\n    print('Creating and saving the images...')\n    #check if it is line or bar plot\n    if(plt_type != 'line' and plt_type != 'bar'):\n        raise ValueError(\"plot types should either be 'line' or 'bar'.\")\n\n    #plot in bar\n    if plt_type == 'bar':\n        #Go throuth all the pairs\n        if(mode != 'income' and mode != 'age'):\n            raise ValueError(\"mode should be either 'income' or 'age' in bar plot.\")\n        for i in [M_pairs,F_pairs,P_pairs]:\n            if mode == 'income':\n                for j in range(15):\n                    plot_bar(i, mode, j ,True)\n            if mode == 'age':\n                for j in range(10):\n                    plot_bar(i, mode, j, True)\n\n    #plot in line\n    if plt_type == 'line':\n        if(mode != 'sex' and mode != 'age'):\n            raise ValueError(\"mode should be either 'sex' or 'age' in line plot.\")\n        plot_line(mode,save_image = True)\n    print('Done.')","97cc80a9":"#Create and save the plots\n#Save_all_img('bar','income')\n#Save_all_img('bar','age')\n#Save_all_img('line','sex')\n#Save_all_img('line','age')","8cd5f9a2":"#Bar plot for total number of people by age.\nplot_bar(P_pairs,'age',9)","ebc3d43c":"#Bar plot for total numer of male by age.\nplot_bar(M_pairs,'age',9)","765ab673":"#Bar plot for total number of female by age.\nplot_bar(F_pairs,'age',9)","d899201f":"#Bar plot of total people by weekly income\nplot_bar(P_pairs, 'income',14)","bceeaaca":"#Bar plot of Male by weekly income\nplot_bar(M_pairs, 'income',14)","add4ccde":"#Bar plot of Female by weekly income\nplot_bar(F_pairs, 'income',14)","816e28f7":"#Number of People in weekly Negative income\nplot_bar(P_pairs, 'income',0)","4189af0d":"#Number of people in 3000$ and more\nplot_bar(P_pairs, 'income',13)","00f30e58":"#Number of people in 20~24 years by weekly income\nplot_bar(P_pairs, 'age',1)","a1e196fc":"#Number of people in 2000~2999 in weekly income by age\nplot_bar(P_pairs,'income',12)","a42459e6":"#Number of male in 35~44 years by income\nplot_bar(M_pairs, 'age',3)","eb2b0ed4":"#Number of female in 35~44 years by income.\nplot_bar(F_pairs, 'age',3)","34f20cf1":"#Line plot of the number of people in weekly income by sex\nplot_line('sex')","ef4ef6c6":"#Line plot of the number of people in weekly income by age\nplot_line('age')","9df85450":"The following codes are for actually creating and storing plots. Since there would be many plots, we just commented the codes and you can comment out the code of the corresponding plots you would like to create.","e46394b5":"Finally, it is time to create the plots and find out any interesting patterns.","b2bd3af8":"## Data Acquisition\n\nIn this assignment, we just need 3 datasets (*G17A, G17B and G17C*) which contain the data of the total personal income weekly by *Age* by *Sex* from the 2016 Census *General Community Profile* datapack on the [ABS official website](https:\/\/datapacks.censusdata.abs.gov.au\/datapacks\/). The datasets are already downloaded in the folder called `Datasets` and would be used to do the further analysis.","1770c49e":"## Exploring the weekly income data by Age and Sex in 2016 Australia Census datasets.\n\nIn the latest statement from ABS, the average weekly ordinary time earnings for full-time adults in Australia was $1,714, up 3.3 per cent from November 2019. It is interesting and meaningful to try to find out how do some underlying factors (*eg. Sex, Age*) affect the number of people in different income range.\n\n###### In this assignment, we would like to investigate the relationship between weekly income with age and gender as well as discussing the change of income comparing with latest data, based on the weekly income data collected by ABS in 2016 Australia census.","9cb525ac":"In these 3 income bar plots above, we can see that negative income dominated in the total population, following by earning `$300~$399` and `$1000~$1249` weekly and with least people have `$3000 and more`. In male, the largest number of people are in `$1000~$1249` while in female is the `negative income`, which may indicate that female would tend to have lower weekly income than male.\n\nSince the total bar plots only show the overall trend of the data, we would like to plot more bar plots in specific groups respectively.","e0fe7e68":"The above code is to pass the male data pairs `M_pairs` to the function and we would like to get the number of negative income males in different age groups. In the first list, which is the `sorted_cats` of the function, we can see a sets of age ranges which also only extracted useful text from the original patterns. The second list is the number which is also the return of `sorted_nums` and sorted from large to small. Next short string 'M_' is indicated the type of the group is male and the last return is the original patterns before sorted. The reason we get this pair is for plotting in the order of names rather than the sorting number.\n\nLet's see one more example for `age`.","2c6084ca":"Let's have a look in these pairs","60d8009b":"To see how the `Sorted_pairs` function works, we can pass different pairs to have a try.","f50e64cc":"Comparing with single variable bar plot, it is more clearer that multi-lines plots are easier to find the interesting patterns. The x axis of both line plots are ordered by the income range.\n\nFor the first plot, we can see that the largest number of people is in `negative income` while most people's weekly salary is between `$300` to `$1300`, which is consistent with the relevant bar plot. Overall population distribution by income is skewed to right which may indicate unbalance in the social structure of fortune. For male and female, it is also clear that for the lower income range represented from `negative income` till `$999`, the number of female is always greater than male, while from `$1000` to `$3000 and more` the situation is reversed. Meanwhile, the number of female is decreasing as the income range increasing which is same as total population while the overall trend in male is increasing in x axis direction. From the previous bar plots, we can see the population distribution in gender is almost even so there is no quantity bias in above analysis.\n\nFor the second plot, first catches our eyes is the blue line in `negative income` and `$1~$149`. In these two income ranges, most of the people are in `15~19 years` which is consistent with previous bar plots. This is probably due to the age range of these teenagers should study in school full time rather than making money. Furthermore, most of the old people in `65 years above` have weekly income between `$300` to `$499` while most of the young and middle-age people are between `$650` to `$1749`. For middle range income groups between `$800` to `$1499`, young people in `25~34 years` are dominated as well as with decreasing number of people in increasing ages. For high income range from `$2000` per week, people with age above `35 years` till `64 years` are majority while there is a certain number of young people also in this range.","d50de8ae":"In the above three bar plots, we can see that young people is dominated the population, following by middle-age groups and most of the age landed between `25 years` to `64 years`. For male and female, the total population has not much different. Furthermore, the age structure in male is mainly the same as female's in 2016 in Australia, which are consistent with the total population.","2aba9434":"## Plotting and analysis\n\nFirst we can have a see in the distributions of total number people by two different groups `age` and `sex` in bar plots.","c843b955":"## Task\n\nInvestigate a question of your choosing about a population from the 2016 Census data provided by the Australian Bureau of Statistics (ABS), and present your findings, as discussed in the accompanying assignment sheet.\n\n---**","43a87a6a":"## Data Visualization\n\nIn this assignment, the meaning of the numbers are the population in different categories. So we would like to use `bar plots` and `line plots` to compare different groups to find the relationship of `sex` and `age` with the number of people in different income range.\n\nThe following functions `plot_bar` and `plot_line` are for plotting bar plots and line plots for different pairs and mode. In `plot_bar`, it embedded with the predefined function `Sorted_pairs` and using the output `sorted_cats` and `sorted_nums` as the `x axis` and `y axis` for plotting. Therefore, `plot_bar` has similar input with `Sorted_pairs` with an addition argument `save_image` for whether saving the image or not. The `p_type` in `Sorted_pairs` is for clarifying the type of group and title the plot. There are two name lists `age_name` and `income_name` are also for creating meaningful titles.","d4c7f19b":"## Further Data cleaning and sorting\n\nIn above, we can see the function has successfully separated the datasets and stored them into different pairs. The names remain long text which need to have further extracting meaningful contents. The numbers are already transformed into integer type by using `int` method in the above function.\n\nFor a better data comprehension and visualization, it is a good method to sort the original pairs as new pairs by numbers. The following function `Sorted_pairs` is for sorting the existing pairs to return the new pair and several useful indexes which will use in later plotting.\n\nIn each pair, we can treat our data into two different main groups: sorting as `income` and sorting as `age`. This feature will achieve by the `mode` in the function. Meanwhile, there are lots of 'little groups' in each mode. In the beginning of exploring data, we knew that the `age` is from 15 and goes into over 85 years and represented as a range in `4 years different`, also similar as the `income`. So we decided to follow the original separating methods and using an argument `a_or_i_range` to indicate which specific range do we want to get and sort. The way that the data stored in original pairs is sorted by income, corresponding with different ages and inserted with different `Total number`. Therefore, we need to use different indexes range and slicing methods to get the patterns we want. In the below sorting function we can see using list slicing by defining `start` indesuch as `[0:9],[10:19]..` and `slice()` function to get the desired patterns.\n\nLet's see the codes of the `Sorted_pairs` function","4fc23b17":"In the first three bar plots, we can see most `Negative income` people are the teenagers between `15~19 years` while the `$3000 and more` are the people between `45~54 years`. This may indicate that in a certain age range, income increases when the age increases. It is also surprising that most young people between `20 years` to `24 years` are in `Negative incomes`.\n\nFor the rest of the bar plots, it is clear that the major age group in income range `$2000~$2999` is `35 years` to `44 years`. However, in the later bar plots about income ranges grouped by `35 years~44 years` of male and female, most of the middle-age males have weekly income between `$1000 to $3000` while most of the females are in the range of `$650` to `$1249`. This may indicate that males are tend to have higher weekly income than females in 2016.\n\nNext, in order to have a better compare in different groups, we would like to use the `plot_line` function to produce line plots for the number of people in different income ranges by `sex` and `age`.","6a1297e8":"## Conclusion","e928b931":"For `plot_line`, it is used for plotting 2 different line plots, based on the groups of `sex` and `age`. The codes are similar with `plot_bar` and the `origin_pairs` which created in `Sorted_pairs` is used here for ordering the x axis with default order rather than the numbers.","0e3e37a1":"From the above plots and analysis, we have the following conclusions for answering the  of the relationship of `weekly income` with different `age_range` and `sex`:\n  * ###### Overall, the weekly income of most people is between `$300` to `$1250` with an extremely large number in `Negative income` and small number in `$3000 and more`. Comparing with the 2020 statistic, it indicates that personal weekly income has increased during last 4 years in Australia. Though most `Negative income` people is the teenagers between `15 years` to `19 years`, the population of these people is not dominated and there is a considerable amount of young people between `20~24 years` are also in `No income`. This may indicate the existence of unbalance fortune structure in society.\n\n  * ###### For income difference in gender, though there is not a clear population advantages between sex, males are tend to have higher weekly income than females, which concluded by the number of males in higher income areas in greater than females while this situation reversed in lower income areas. This conclusion is also based on the even population distribution between genders.\n\n  * ###### For income different in age, the overall trend is the income increasing as the age increasing, till the old stage the income became lower. Teenagers below `19 years` dominated the `no or negative income` may explained by the phase of education, while most people `above $1000` are the age between `25~64 years` with most `$1000~$1249` are the young people in `25~34 years` while most `$2000 above` are the middle-age people in `35~54 years`.","9c048b31":"If we want to plot every patterns of these 3 pairs sorted by `age` or `sex`, we can write a function to achieve it. The function `Save_all_img` is for creating and saving all the possible combinations plots to the exiting folder `Plots` by selected desired type of plots (`bar` or `line`). The codes are showed below.","9e5cd1a6":"## Data Cleaning\n\nFor the convenience of quickly running assembled chunk of codes and not to execute similar codes repeatedly, we would like to achieve different purposes as writing into different `functions` which is a better method for increasing readability. The following function `Return_pairs` is for cleaning and storing the raw data into the patterns we would like to use for analysis and visualization.\n\nIn the `Return_pairs`, we first define 3 variables to store the path of the datasets, then using a `for` loop to read through the datasets. Since each dataset is comma separated and both header and numbers are splitted by a empty line, we will use list concatenation to store all the headers and numbers into two individual list `headers` and `nums`.\n\nThe original datasets contain three different main parts (`male, female and people`), containing the number and total number of people in corresponding age and income range respectively. The range of age is from `15 years` to `over 85 years` and each single range has `4 years` different (`15~19`,`20~24`...). The range of weekly income is from `Negative income` to `$3000 or more` and some people  choose `not stated`(not included in further analysis). Therefore, we return the 3 pairs of data which represented by the 3 different groups above and each pair contains the names and paired data which are used for further analysis.\n\nThe codes below is the detail of `Return_pairs` function.\n"}}