{"cell_type":{"e34fb808":"code","720e39b5":"code","7f55be29":"code","70fb699b":"code","8dc81ba8":"code","3cd2e5b2":"code","f05240bf":"code","3a8720f2":"code","d0791331":"code","d887eae2":"code","cefb302e":"code","806604f8":"code","1b8ad072":"code","14390656":"code","77193039":"code","d831e694":"code","21fd21ee":"code","2bee044f":"code","e4c78d79":"code","61064165":"code","f078eb5c":"code","fee26dac":"code","f918949c":"code","4763cd6a":"code","4e2267ab":"code","9f5ff8f1":"code","bc7baf94":"code","59446c0a":"code","8db39bbf":"code","f7c4ee40":"code","15a9e5ab":"code","16149de1":"code","78e14e89":"code","f74884d8":"code","75136c7c":"code","37f62333":"code","a8c750f4":"markdown","b25f8790":"markdown","b4c200bf":"markdown","3e0c8c43":"markdown","52e328f1":"markdown","74775851":"markdown","d23b87e9":"markdown"},"source":{"e34fb808":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","720e39b5":"#importing data from local\ndata=pd.read_csv('\/kaggle\/input\/iba-ml1-mid-project\/train.csv')\ndata.head()","7f55be29":"#First column is useless. Let's drop it.\ndata.drop(['Id'], axis=1, inplace=True)","70fb699b":"data['credit_line_utilization']=data['credit_line_utilization'].str.replace(',','.')\ndata['credit_line_utilization']=data['credit_line_utilization'].astype(float)","8dc81ba8":"from sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import RobustScaler","3cd2e5b2":"data['defaulted_on_loan'].value_counts()","f05240bf":"numeric = Pipeline(steps=[    \n    ('impute', SimpleImputer(strategy='mean')),\n   ('scaler', StandardScaler()),\n   ('polynomial_features', PolynomialFeatures(include_bias=False, degree=3))\n      #('pca', PCA(n_components=2)),\n      #('LDA', LinearDiscriminantAnalysis() )\n                                                ])\n\nnumeric_transform = ColumnTransformer(transformers=[\n    ('numeric', numeric, ['age', \n            'number_dependent_family_members', \n            'monthly_income',\n           'number_of_credit_lines', \n            'real_estate_loans',\n           'ratio_debt_payment_to_income', \n            'credit_line_utilization',\n           'number_of_previous_late_payments_up_to_59_days',\n           'number_of_previous_late_payments_up_to_89_days',\n           'number_of_previous_late_payments_90_days_or_more'])])","3a8720f2":"#Firstly we should define independet and dependet variables.\nX=data.iloc[:,:-1]   #independent columns\ny=data['defaulted_on_loan']  #target","d0791331":"X_train, X_test, y_train, y_test = train_test_split(X,y)","d887eae2":"KNN = Pipeline(steps=[ ('preprocessing', numeric_transform),\n                    ('Classifier', KNeighborsClassifier())])","cefb302e":"#Checking accuracy score of model on training and test data without using hyperparameter tuning\n#KNN.fit(X_train, y_train)\n#print('accuracy_train=', accuracy_score(y_train, KNN.predict(X_train)))\n#print('accuracy_test=',accuracy_score(y_test, KNN.predict(X_test)))\n\n#print('roc_auc_train=',roc_auc_score(y_train, KNN.predict(X_train)))\n#print('roc_auc_test=',roc_auc_score(y_test, KNN.predict(X_test)))","806604f8":"import xgboost as xgb\nfrom xgboost import XGBClassifier","1b8ad072":"xgb = Pipeline(steps=[ ('preprocessing', numeric_transform),\n                      ('Classifier', XGBClassifier(max_depth=None,eta=0.3, n_estimators=400))])","14390656":"xgb.fit(X_train, y_train)\nprint('accuracy_train=', accuracy_score(y_train, xgb.predict(X_train)))\nprint('accuracy_test=',accuracy_score(y_test, xgb.predict(X_test)))\n\nprint('roc_auc_train=',roc_auc_score(y_train, xgb.predict(X_train)))\nprint('roc_auc_test=',roc_auc_score(y_test, xgb.predict(X_test)))","77193039":"from sklearn.ensemble import GradientBoostingClassifier","d831e694":"GB = Pipeline(steps=[ ('preprocessing', numeric_transform),\n                        ('dt', GradientBoostingClassifier(n_estimators=700, learning_rate=.08, min_samples_leaf=4,\n                                                          max_leaf_nodes=None,max_depth = 6 ##,subsample = 0.5,\n                                                         ))])","21fd21ee":"#GB.fit(X_train, y_train)\n#print('accuracy_train=', accuracy_score(y_train, GB.predict(X_train)))\n#print('accuracy_test=',accuracy_score(y_test,GB.predict(X_test)))\n\n#print('roc_auc_train=',roc_auc_score(y_train, GB.predict(X_train)))\n#print('roc_auc_test=',roc_auc_score(y_test, GB.predict(X_test)))","2bee044f":"from catboost import CatBoostClassifier","e4c78d79":"catb = Pipeline(steps=[ ('preprocessing', numeric_transform),\n                        ('dt', CatBoostClassifier(verbose=False, iterations=1000))])","61064165":"#catb.fit(X_train, y_train)\n#print('accuracy_train=', accuracy_score(y_train, catb.predict(X_train)))\n#print('accuracy_test=',accuracy_score(y_test,catb.predict(X_test)))\n\n#print('roc_auc_train=',roc_auc_score(y_train, catb.predict(X_train)))\n#print('roc_auc_test=',roc_auc_score(y_test, catb.predict(X_test)))","f078eb5c":"from sklearn.metrics import precision_recall_curve","fee26dac":"precisions, recalls, thresholds = precision_recall_curve(y_test, xgb.predict_proba(X_test)[:, 1])","f918949c":"import matplotlib.pyplot as plt\nplt.plot(precisions, recalls)\nplt.xlabel('Precision')\nplt.ylabel('Recall')\nplt.show()","4763cd6a":"X_test1=pd.read_csv('\/kaggle\/input\/iba-ml1-mid-project\/test.csv')\nX_test1=X_test1.drop(['Id'], axis=1)","4e2267ab":"X_test1['credit_line_utilization']=X_test1['credit_line_utilization'].str.replace(',','.')\nX_test1['credit_line_utilization']=X_test1['credit_line_utilization'].astype(float)","9f5ff8f1":"X_test1.isnull().sum()","bc7baf94":"s=xgb.predict_proba(X_test1)[:,1]\ns=pd.DataFrame(s)\nsub_df=pd.read_csv('\/kaggle\/input\/iba-ml1-mid-project\/sample_submission.csv')","59446c0a":"datas=pd.concat([sub_df['Id'], s],axis=1)\ndatas.columns=('Id', 'Predicted')\ndatas.to_csv('final_predict.csv', index=False)","8db39bbf":"#Let's check available hyperparameters for tuning\n#for param in xgb.get_params().keys():\n   # print(param)","f7c4ee40":"param_space = {\n    'Classifier__max_depth':[2,10,20]\n   'Classifier__eta':[0.1,0.3,0.01]\n}","15a9e5ab":"#gridsearch = GridSearchCV(xgb, param_space, cv=5)\n#gridsearch.fit(X_train, y_train)\n#print(roc_auc_score(y_train, gridsearch.best_estimator_.predict(X_train)))\n#print(roc_auc_score(y_test, gridsearch.best_estimator_.predict(X_test)))","16149de1":"#gridsearch.best_params_","78e14e89":"from eli5.sklearn import PermutationImportance\nfrom eli5 import show_weights","f74884d8":"perm = PermutationImportance(xgb).fit(X_test, y_test)","75136c7c":"show_weights(perm, feature_names=X.columns.tolist())","37f62333":"perm.feature_importances_","a8c750f4":"### CatBoostClassifier","b25f8790":"### Xgboost classifier","b4c200bf":"### K nearest neighbors","3e0c8c43":"### GridsearchCV","52e328f1":"### Gradient Boosting","74775851":"### Sample submission format","d23b87e9":"### Feature importance"}}