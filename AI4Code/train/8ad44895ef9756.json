{"cell_type":{"4fbca36b":"code","d3f49989":"code","8b7ab87c":"code","46697452":"code","aa9909e4":"code","f22f17fd":"code","412389f4":"code","ce1caadc":"code","b87cb69d":"code","e99bc85c":"code","3e7680ac":"code","bd94d1ab":"code","b43adc7a":"code","bcbbe38b":"code","9456821b":"code","b1391ec4":"code","d5e99ae4":"code","58707818":"code","ba9f3f15":"code","5119aa6e":"code","35d34769":"code","fbaaa461":"code","ce0a8400":"code","409e6f8f":"code","bfc8a62c":"code","abfed495":"code","98169f86":"code","ae4a1578":"code","c7461b72":"code","39bb2e13":"code","f1b4caf2":"code","a23f4181":"code","fa414c16":"code","f5878395":"code","a003bb03":"code","72179cbd":"code","d1661c2d":"code","96e34b66":"code","8403042c":"code","b06e0253":"code","2510f320":"code","44c8d283":"code","a65061cd":"code","c22d1587":"markdown","e31986c0":"markdown","e16b5883":"markdown","408e7449":"markdown","2716ba13":"markdown","31d4bee6":"markdown","2fcc2b95":"markdown","da841517":"markdown","e01c9349":"markdown","e459f50d":"markdown","3fe681be":"markdown","f494f3a0":"markdown","be98165a":"markdown","75c0f17e":"markdown","c826585d":"markdown","caef2826":"markdown","37cbb9e8":"markdown","998ef3ee":"markdown","85ea6c01":"markdown","795c8ff7":"markdown","844e050d":"markdown","29fe9529":"markdown","95479e7b":"markdown","91f4484b":"markdown","af3afe94":"markdown","66e68f40":"markdown","5a961a2b":"markdown","ffc14c45":"markdown","070e8464":"markdown","6c57af23":"markdown","d8124311":"markdown","32e53121":"markdown","a095ef9c":"markdown","abdae795":"markdown","4704f4a3":"markdown","36736d5a":"markdown","c421cab1":"markdown","81d6524e":"markdown","b16fc317":"markdown","22d43485":"markdown","7313e79b":"markdown","7e7143a7":"markdown","7085676a":"markdown"},"source":{"4fbca36b":"from keras.models import Model, Sequential\nfrom keras.layers import Activation, Dense, BatchNormalization, concatenate, Dropout, Conv2D, Conv2DTranspose, MaxPooling2D, UpSampling2D, Input, Reshape\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers.core import SpatialDropout2D\nfrom keras import backend as K\nfrom keras.optimizers import Adam\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport glob\nimport PIL\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport cv2\n%matplotlib inline\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom warnings import filterwarnings\n\nfilterwarnings('ignore')\nnp.random.seed(101)","d3f49989":"import re\nnumbers = re.compile(r'(\\d+)')\ndef numericalSort(value):\n    parts = numbers.split(value)\n    parts[1::2] = map(int, parts[1::2])\n    return parts","8b7ab87c":"filelist_trainx = sorted(glob.glob('..\/input\/*\/trainx\/*.tif'), key=numericalSort)\nX_train = np.array([np.array(Image.open(fname)) for fname in filelist_trainx])\n\nfilelist_trainy = sorted(glob.glob('..\/input\/*\/trainy\/*.tif'), key=numericalSort)\nY_train = np.array([np.array(Image.open(fname)) for fname in filelist_trainy])","46697452":"Y_train.shape","aa9909e4":"x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size = 0.20, random_state = 101)","f22f17fd":"plt.figure(figsize=(20,9))\nplt.subplot(2,4,1)\nplt.imshow(X_train[0])\nplt.subplot(2,4,2)\nplt.imshow(X_train[3])\nplt.subplot(2,4,3)\nplt.imshow(X_train[54])\nplt.subplot(2,4,4)\nplt.imshow(X_train[77])\nplt.subplot(2,4,5)\nplt.imshow(X_train[100])\nplt.subplot(2,4,6)\nplt.imshow(X_train[125])\nplt.subplot(2,4,7)\nplt.imshow(X_train[130])\nplt.subplot(2,4,8)\nplt.imshow(X_train[149])\nplt.show()","412389f4":"plt.figure(figsize=(20,9))\nplt.subplot(2,4,1)\nplt.imshow(Y_train[0], cmap = plt.cm.binary_r)\nplt.subplot(2,4,2)\nplt.imshow(Y_train[3], cmap = plt.cm.binary_r)\nplt.subplot(2,4,3)\nplt.imshow(Y_train[54], cmap = plt.cm.binary_r)\nplt.subplot(2,4,4)\nplt.imshow(Y_train[77], cmap = plt.cm.binary_r)\nplt.subplot(2,4,5)\nplt.imshow(Y_train[100], cmap = plt.cm.binary_r)\nplt.subplot(2,4,6)\nplt.imshow(Y_train[125], cmap = plt.cm.binary_r)\nplt.subplot(2,4,7)\nplt.imshow(Y_train[130], cmap = plt.cm.binary_r)\nplt.subplot(2,4,8)\nplt.imshow(Y_train[149], cmap = plt.cm.binary_r)\nplt.show()","ce1caadc":"def jaccard_distance(y_true, y_pred, smooth=100):\n    intersection = K.sum(K.abs(y_true * y_pred), axis=-1)\n    sum_ = K.sum(K.square(y_true), axis = -1) + K.sum(K.square(y_pred), axis=-1)\n    jac = (intersection + smooth) \/ (sum_ - intersection + smooth)\n    return (1 - jac)","b87cb69d":"def iou(y_true, y_pred, smooth = 100):\n    intersection = K.sum(K.abs(y_true * y_pred), axis=-1)\n    sum_ = K.sum(K.square(y_true), axis = -1) + K.sum(K.square(y_pred), axis=-1)\n    jac = (intersection + smooth) \/ (sum_ - intersection + smooth)\n    return jac","e99bc85c":"def dice_coe(y_true, y_pred, smooth = 100):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    score = (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n    score = 1 - K.sum(score) \/ 32\n    return score","3e7680ac":"def precision(y_true, y_pred):\n    '''Calculates the precision, a metric for multi-label classification of\n    how many selected items are relevant.\n    '''\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision","bd94d1ab":"def recall(y_true, y_pred):\n    '''Calculates the recall, a metric for multi-label classification of\n    how many relevant items are selected.\n    '''\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall","b43adc7a":"def accuracy(y_true, y_pred):\n    '''Calculates the mean accuracy rate across all predictions for binary\n    classification problems.\n    '''\n    return K.mean(K.equal(y_true, K.round(y_pred)))","bcbbe38b":"\ndef random_rotation(x_image, y_image):\n    rows_x,cols_x, chl_x = x_image.shape\n    rows_y,cols_y = y_image.shape\n    rand_num = np.random.randint(-40,40)\n    M1 = cv2.getRotationMatrix2D((cols_x\/2,rows_x\/2),rand_num,1)\n    M2 = cv2.getRotationMatrix2D((cols_y\/2,rows_y\/2),rand_num,1)\n    x_image = cv2.warpAffine(x_image,M1,(cols_x,rows_x))\n    y_image = cv2.warpAffine(y_image.astype('float32'),M2,(cols_y,rows_y))\n    return x_image, y_image.astype('int')\n\ndef horizontal_flip(x_image, y_image):\n    x_image = cv2.flip(x_image, 1)\n    y_image = cv2.flip(y_image.astype('float32'), 1)\n    return x_image, y_image.astype('int')\n\ndef vertical_flip(x_image, y_image):\n    x_image = cv2.flip(x_image, 1)\n    y_image = cv2.flip(y_image.astype('float32'), 1)\n    return x_image, y_image.astype('int')","9456821b":"def img_augmentation(x_train, y_train):\n    x_rotat = []\n    y_rotat = []\n    x_flip = []\n    y_flip = []\n    x_nois = []\n    x_flipv = []\n    y_flipv = []\n    for idx in range(len(x_train)):\n        x,y = random_rotation(x_train[idx], y_train[idx])\n        x_rotat.append(x)\n        y_rotat.append(y)\n        \n        x,y = horizontal_flip(x_train[idx], y_train[idx])\n        x_flip.append(x)\n        y_flip.append(y)\n        \n        x,y = horizontal_flip(x_train[idx], y_train[idx])\n        x_flipv.append(x)\n        y_flipv.append(y)\n        return np.array(x_rotat), np.array(y_rotat), np.array(x_flip), np.array(y_flip), np.array(x_flipv), np.array(y_flipv)","b1391ec4":"def img_augmentation(x_test, y_test):\n    x_rotat = []\n    y_rotat = []\n    x_flip = []\n    y_flip = []\n    x_nois = []\n    x_flipv = []\n    y_flipv = []\n    for idx in range(len(x_test)):\n        x,y = random_rotation(x_test[idx], y_test[idx])\n        x_rotat.append(x)\n        y_rotat.append(y)\n        \n        x,y = horizontal_flip(x_test[idx], y_test[idx])\n        x_flip.append(x)\n        y_flip.append(y)\n        \n        x,y = horizontal_flip(x_test[idx], y_test[idx])\n        x_flipv.append(x)\n        y_flipv.append(y)\n\n    return np.array(x_rotat), np.array(y_rotat), np.array(x_flip), np.array(y_flip), np.array(x_flipv), np.array(y_flipv)","d5e99ae4":"x_rotated, y_rotated, x_flipped, y_flipped, x_flippedv, y_flippedv = img_augmentation(x_train, y_train)\nx_rotated_t, y_rotated_t, x_flipped_t, y_flipped_t, x_flipped_tv, y_flipped_tv = img_augmentation(x_test, y_test)","58707818":"img_num = 7\nplt.figure(figsize=(12,12))\nplt.subplot(3,2,1)\nplt.imshow(x_train[img_num])\nplt.title('Original Image')\nplt.subplot(3,2,2)\nplt.imshow(y_train[img_num], plt.cm.binary_r)\nplt.title('Original Mask')\nplt.subplot(3,2,3)\nplt.imshow(x_rotated[img_num])\nplt.title('Rotated Image')\nplt.subplot(3,2,4)\nplt.imshow(y_rotated[img_num], plt.cm.binary_r)\nplt.title('Rotated Mask')\nplt.subplot(3,2,5)\nplt.imshow(x_flipped[img_num])\nplt.title('Flipped Image')\nplt.subplot(3,2,6)\nplt.imshow(y_flipped[img_num], plt.cm.binary_r)\nplt.title('Flipped Mask')\nplt.show()","ba9f3f15":"x_train_full = np.concatenate([x_train, x_rotated, x_flipped, x_flippedv])\ny_train_full = np.concatenate([y_train, y_rotated, y_flipped, y_flippedv])\nx_test = np.concatenate([x_test,x_rotated_t,x_flipped_t,x_flipped_tv])\ny_test = np.concatenate([y_test,y_rotated_t,y_flipped_t,y_flipped_tv])","5119aa6e":"len(x_train_full)","35d34769":"\nx_train, x_val, y_train, y_val = train_test_split(x_train_full, y_train_full, test_size = 0.10, random_state = 101)","fbaaa461":"print(\"Length of the Training Set   : {}\".format(len(x_train)))\nprint(\"Length of the Test Set       : {}\".format(len(x_test)))\nprint(\"Length of the Validation Set : {}\".format(len(x_val)))","ce0a8400":"len(x_train)","409e6f8f":"# Number of image channels (for example 3 in case of RGB, or 1 for grayscale images)\nINPUT_CHANNELS = 3\n# Number of output masks (1 in case you predict only one type of objects)\nOUTPUT_MASK_CHANNELS = 1\n# Pretrained weights\n","bfc8a62c":"def double_conv_layer(x, size, dropout=0.40, batch_norm=True):\n    if K.image_data_format() == 'th':\n        axis = 1\n    else:\n        axis = 3\n    conv = Conv2D(size, (3, 3), padding='same')(x)\n    if batch_norm is True:\n        conv = BatchNormalization(axis=axis)(conv)\n    conv = Activation('relu')(conv)\n    conv = Conv2D(size, (3, 3), padding='same')(conv)\n    if batch_norm is True:\n        conv = BatchNormalization(axis=axis)(conv)\n    conv = Activation('relu')(conv)\n    if dropout > 0:\n        conv = SpatialDropout2D(dropout)(conv)\n    return conv\n\n\ndef UNET_224(epochs_num, savename):\n    dropout_val=0.50\n    if K.image_data_format() == 'th':\n        inputs = Input((INPUT_CHANNELS, 256,256))\n        axis = 1\n    else:\n        inputs = Input((256,256, INPUT_CHANNELS))\n        axis = 3\n    filters = 32\n\n    conv_224 = double_conv_layer(inputs, filters)\n    pool_112 = MaxPooling2D(pool_size=(2, 2))(conv_224)\n\n    conv_112 = double_conv_layer(pool_112, 2*filters)\n    pool_56 = MaxPooling2D(pool_size=(2, 2))(conv_112)\n\n    conv_56 = double_conv_layer(pool_56, 4*filters)\n    pool_28 = MaxPooling2D(pool_size=(2, 2))(conv_56)\n\n    conv_28 = double_conv_layer(pool_28, 8*filters)\n    pool_14 = MaxPooling2D(pool_size=(2, 2))(conv_28)\n\n    conv_14 = double_conv_layer(pool_14, 16*filters)\n    pool_7 = MaxPooling2D(pool_size=(2, 2))(conv_14)\n\n    conv_7 = double_conv_layer(pool_7, 32*filters)\n\n    up_14 = concatenate([UpSampling2D(size=(2, 2))(conv_7), conv_14], axis=axis)\n    up_conv_14 = double_conv_layer(up_14, 16*filters)\n\n    up_28 = concatenate([UpSampling2D(size=(2, 2))(up_conv_14), conv_28], axis=axis)\n    up_conv_28 = double_conv_layer(up_28, 8*filters)\n\n    up_56 = concatenate([UpSampling2D(size=(2, 2))(up_conv_28), conv_56], axis=axis)\n    up_conv_56 = double_conv_layer(up_56, 4*filters)\n\n    up_112 = concatenate([UpSampling2D(size=(2, 2))(up_conv_56), conv_112], axis=axis)\n    up_conv_112 = double_conv_layer(up_112, 2*filters)\n\n    up_224 = concatenate([UpSampling2D(size=(2, 2))(up_conv_112), conv_224], axis=axis)\n    up_conv_224 = double_conv_layer(up_224, filters, dropout_val)\n\n    conv_final = Conv2D(OUTPUT_MASK_CHANNELS, (1, 1))(up_conv_224)\n    conv_final = Activation('sigmoid')(conv_final)\n    pred = Reshape((256,256))(conv_final)\n    model = Model(inputs, pred, name=\"UNET_224\")\n    model.compile(optimizer= Adam(lr = 0.0003), loss= 'binary_crossentropy'\n                  , metrics=[iou, dice_coe, precision, recall, accuracy])\n    model.summary()\n    hist = model.fit(x_train, y_train, epochs= epochs_num, batch_size= 32,validation_data=(x_val, y_val), verbose=1)\n    model.save(savename)\n    return model, hist","abfed495":"model, hist = UNET_224(500, 'unet_2_epoch.h5')","98169f86":"dropout_val=0.50\nif K.image_data_format() == 'th':\n    inputs = Input((INPUT_CHANNELS, 256,256))\n    axis = 1\nelse:\n    inputs = Input((256,256, INPUT_CHANNELS))\n    axis = 3\nfilters = 32\n\nconv_224 = double_conv_layer(inputs, filters)\npool_112 = MaxPooling2D(pool_size\n                        =(2, 2))(conv_224)\n\nconv_112 = double_conv_layer(pool_112, 2*filters)\npool_56 = MaxPooling2D(pool_size=(2, 2))(conv_112)\n\nconv_56 = double_conv_layer(pool_56, 4*filters)\npool_28 = MaxPooling2D(pool_size=(2, 2))(conv_56)\n\nconv_28 = double_conv_layer(pool_28, 8*filters)\npool_14 = MaxPooling2D(pool_size=(2, 2))(conv_28)\n\nconv_14 = double_conv_layer(pool_14, 16*filters)\npool_7 = MaxPooling2D(pool_size=(2, 2))(conv_14)\n\nconv_7 = double_conv_layer(pool_7, 32*filters)\n\nup_14 = concatenate([UpSampling2D(size=(2, 2))(conv_7), conv_14], axis=axis)\nup_conv_14 = double_conv_layer(up_14, 16*filters)\n\nup_28 = concatenate([UpSampling2D(size=(2, 2))(up_conv_14), conv_28], axis=axis)\nup_conv_28 = double_conv_layer(up_28, 8*filters)\n\nup_56 = concatenate([UpSampling2D(size=(2, 2))(up_conv_28), conv_56], axis=axis)\nup_conv_56 = double_conv_layer(up_56, 4*filters)\n\nup_112 = concatenate([UpSampling2D(size=(2, 2))(up_conv_56), conv_112], axis=axis)\nup_conv_112 = double_conv_layer(up_112, 2*filters)\n\nup_224 = concatenate([UpSampling2D(size=(2, 2))(up_conv_112), conv_224], axis=axis)\nup_conv_224 = double_conv_layer(up_224, filters, dropout_val)\n\nconv_final = Conv2D(OUTPUT_MASK_CHANNELS, (1, 1))(up_conv_224)\nconv_final = Activation('sigmoid')(conv_final)\npred = Reshape((256,256))(conv_final)\n","ae4a1578":"model_0 = Model(inputs, pred, name=\"UNET_224\")\nmodel_0.compile(optimizer= Adam(lr = 0.0003), loss='binary_crossentropy'\n                  , metrics=[iou, dice_coe, precision, recall, accuracy])\n","c7461b72":"model.load_weights('unet_2_epoch.h5')","39bb2e13":"\nprint('\\n~~~~~~~~~~~~~~~Stats after 1 epoch~~~~~~~~~~~~~~~~~~~')\nprint('\\n-------------On Train Set--------------------------\\n')\nres = model.evaluate(x_train, y_train, batch_size= 32)\nprint('________________________')\nprint('IOU:       |   {:.2f}  |'.format(res[1]*100))\nprint('Dice Coef: |   {:.2f}  |'.format(res[2]*100))\nprint('Precision: |   {:.2f}  |'.format(res[3]*100))\nprint('Recall:    |   {:.2f}  |'.format(res[4]*100))\nprint('Accuracy:  |   {:.2f}  |'.format(res[5]*100))\nprint(\"Loss:      |   {:.2f}  |\".format(res[0]*100))\nprint('________________________')\nprint('\\n-------------On Test  Set--------------------------\\n')\nres = model.evaluate(x_test, y_test, batch_size= 32)\nprint('________________________')\nprint('IOU:       |   {:.2f}  |'.format(res[1]*100))\nprint('Dice Coef: |   {:.2f}  |'.format(res[2]*100))\nprint('Precision: |   {:.2f}  |'.format(res[3]*100))\nprint('Recall:    |   {:.2f}  |'.format(res[4]*100))\nprint('Accuracy:  |   {:.2f}  |'.format(res[5]*100))\nprint(\"Loss:      |   {:.2f}  |\".format(res[0]*100))\nprint('________________________')\nprint('\\n-------------On validation Set---------------------\\n')\nres = model.evaluate(x_val, y_val, batch_size= 32)\nprint('________________________')\nprint('IOU:       |   {:.2f}  |'.format(res[1]*100))\nprint('Dice Coef: |   {:.2f}  |'.format(res[2]*100))\nprint('Precision: |   {:.2f}  |'.format(res[3]*100))\nprint('Recall:    |   {:.2f}  |'.format(res[4]*100))\nprint('Accuracy:  |   {:.2f}  |'.format(res[5]*100))\nprint(\"Loss:      |   {:.2f}  |\".format(res[0]*100))\nprint('________________________')","f1b4caf2":"model, hist = UNET_224(epochs_num= 1, savename= 'unet_100_epoch.h5')","a23f4181":"model_1 = Model(inputs, pred, name=\"UNET_224\")\nmodel_1.compile(optimizer= Adam(lr = 0.003), loss= [jaccard_distance]\n                  , metrics=[iou, dice_coe, precision, recall, accuracy])\n","fa414c16":"model_1.load_weights('unet_100_epoch.h5')","f5878395":"\nprint('\\n~~~~~~~~~~~~~~~Stats after 100 epoch~~~~~~~~~~~~~~~~~~~')\nprint('\\n-------------On Train Set--------------------------\\n')\nres = model_1.evaluate(x_train, y_train, batch_size= 18)\nprint('________________________')\nprint('IOU:       |   {:.2f}  |'.format(res[1]*100))\nprint('Dice Coef: |   {:.2f}  |'.format(res[2]*100))\nprint('Precision: |   {:.2f}  |'.format(res[3]*100))\nprint('Recall:    |   {:.2f}  |'.format(res[4]*100))\nprint('Accuracy:  |   {:.2f}  |'.format(res[5]*100))\nprint(\"Loss:      |   {:.2f}  |\".format(res[0]*100))\nprint('________________________')\nprint('\\n-------------On Test  Set--------------------------\\n')\nres = model_1.evaluate(x_test, y_test, batch_size= 18)\nprint('________________________')\nprint('IOU:       |   {:.2f}  |'.format(res[1]*100))\nprint('Dice Coef: |   {:.2f}  |'.format(res[2]*100))\nprint('Precision: |   {:.2f}  |'.format(res[3]*100))\nprint('Recall:    |   {:.2f}  |'.format(res[4]*100))\nprint('Accuracy:  |   {:.2f}  |'.format(res[5]*100))\nprint(\"Loss:      |   {:.2f}  |\".format(res[0]*100))\nprint('________________________')\nprint('\\n-------------On validation Set---------------------\\n')\nres = model_1.evaluate(x_val, y_val, batch_size= 18)\nprint('________________________')\nprint('IOU:       |   {:.2f}  |'.format(res[1]*100))\nprint('Dice Coef: |   {:.2f}  |'.format(res[2]*100))\nprint('Precision: |   {:.2f}  |'.format(res[3]*100))\nprint('Recall:    |   {:.2f}  |'.format(res[4]*100))\nprint('Accuracy:  |   {:.2f}  |'.format(res[5]*100))\nprint(\"Loss:      |   {:.2f}  |\".format(res[0]*100))\nprint('________________________')","a003bb03":"plt.figure(figsize=(20, 14))\nplt.suptitle('Training Statistics on Train Set')\nplt.subplot(2,2,1)\nplt.plot(hist.history['loss'], 'red')\nplt.title('Loss')\nplt.subplot(2,2,2)\nplt.plot(hist.history['accuracy'], 'green')\nplt.title('Accuracy')\nplt.subplot(2,2,3)\nplt.plot(hist.history['val_loss'], 'red')\nplt.yticks(list(np.arange(0.0, 1.0, 0.10)))\nplt.title('Valdiation Loss')\nplt.subplot(2,2,4)\nplt.plot(hist.history['val_accuracy'], 'green')\nplt.yticks(list(np.arange(0.0, 1.0, 0.10)))\nplt.title('Validation Accuracy')\nplt.show()","72179cbd":"img_num = 49\nimg_pred = model.predict(x_test[img_num].reshape(1,256,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(x_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted Output')\nplt.show()","d1661c2d":"img_num = 10\nimg_pred = model_0.predict(x_test[img_num].reshape(1,256,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(x_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted Output')\nplt.show()","96e34b66":"img_num = 36\nimg_pred = model_0.predict(x_test[img_num].reshape(1,256,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(x_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted Output')\nplt.show()","8403042c":"img_num = 32\nimg_pred = model_1.predict(x_test[img_num].reshape(1,256,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(x_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted Output')\nplt.show()","b06e0253":"img_num = 29\nimg_pred = model_1.predict(x_test[img_num].reshape(1,256,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(x_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted Output')\nplt.show()","2510f320":"img_num = 21\nimg_pred = model_1.predict(x_test[img_num].reshape(1,256,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(x_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted Output')\nplt.show()","44c8d283":"def enhance(img):\n    sub = (model.predict(img.reshape(1,256,256,3))).flatten()\n\n    for i in range(len(sub)):\n        if sub[i] > 0.5:\n            sub[i] = 1\n        else:\n            sub[i] = 0\n    return sub\n\n","a65061cd":"plt.figure(figsize=(12,12))\nplt.suptitle('Comparing the Prediction after enhancement')\nplt.subplot(3,2,1)\nplt.imshow(y_test[13],plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(3,2,2)\nplt.imshow(enhance(x_test[13]).reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted')\nplt.subplot(3,2,3)\nplt.imshow(y_test[9],plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(3,2,4)\nplt.imshow(enhance(x_test[9]).reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted')\nplt.subplot(3,2,5)\nplt.imshow(y_test[14],plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(3,2,6)\nplt.imshow(enhance(x_test[14]).reshape(256,256), plt.cm.binary_r)\nplt.title('Predicted')\nplt.show()","c22d1587":"![](http:\/\/)Testing the statistics after 100 epochs","e31986c0":"Defining the model in a function which takes two arguments when called\n* **epoch_num**: number of epochs to run  \n* **savename**: the name of the model for saving after training","e16b5883":"Here we can load a pretrained model","408e7449":"#### Precision    \nPrecision is a good measure to determine, when the costs of False Positive is high.","2716ba13":"#### Jaccard Distance  \nThe Jaccard distance, which measures dissimilarity between sample sets, is complementary to the Jaccard coefficient and is obtained by subtracting the Jaccard coefficient from 1, or, equivalently, by dividing the difference of the sizes of the union and the intersection of two sets by the size of the union:","31d4bee6":"## Defining Evaluation Metrics","2fcc2b95":"![precsion](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/26106935459abe7c266f7b1ebfa2a824b334c807)","da841517":"* So we can observe that our results are very good on the Test dataset which suggests that the model is quite robust and well performing too.","e01c9349":"### For 1 epoch","e459f50d":"## Importing the Libraries","3fe681be":"![jd](https:\/\/www.geeksforgeeks.org\/wp-content\/ql-cache\/quicklatex.com-44046533fcd54e98cb53619b3390e083_l3.svg)","f494f3a0":"### Model Function","be98165a":"#### After 100 epochs","75c0f17e":"![dc](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*Z1hkDvyhFBogT9EkzVkX2A.png)","c826585d":"### **de nada!**","caef2826":"![iou](https:\/\/www.d2l.ai\/_images\/iou.svg)","37cbb9e8":"<font color='red'>**Problems In Guided Dropout Implementation**     \n            \n- The entire network architecture is implemented using Keras.  \n- Now to implement the Guided Dropout Layer using Keras we have to know the detailed backend of the Keras Library because:  \n- We should know in what form the inputs will be coming to our layer so we could manipulate them.  \n- We should also know in what form the output should be given to the next layer.  \n- If we implement Guided Dropout from scratch then we will have to implement entire architecture from scratch which will be neither efficient nor easily feasible.<\/font>","998ef3ee":"## The Model","85ea6c01":"#### Optimizer and Learning Rate  \n* We adopt adam optimization algorithm or adaptive moments, to adjust the learning rate.   \n* It is well known that learning rate is one of the critical hyperparameters that have a signi\ufb01cant impact on classi\ufb01cation performance.     \n* Advantages of Adam optimizer are:\n    - Relatively low memory requirements (though higher than gradient descent and gradient descent with momentum).\n    - Usually works well even with a little tuning of hyperparameter\n* Adam is fairly robust to the choice of hyperparameters, and set the learning rate **\u03b1** as 0.003 to speed up the training procedure in this study as advised in the paper [here](https:\/\/arxiv.org\/pdf\/1703.05165v2.pdf)","795c8ff7":"#### Making a Validation Set  \nWe will split our full training set into train and validation set.\nValidation dataset is used to validate the performance after each epoch.","844e050d":"We have trained the model on the **training set**.  \nWe will make predictions on the unseen **test set**","29fe9529":"* Currently the predicted outputs are blurry because the predicted pixel values are in the range 0 - 1.  \n* To make clear edge preditions we can enhance our image by rounding up the pixel values to 1 which are > 0.5  .\n* While rounding down the pixel values to 0 which are < 0.5.\n* We can enhance the image to look for absolute shape predicted by ceiling and flooring the predicted values.","95479e7b":"#### Intersection over Union  \nThe Jaccard index, also known as Intersection over Union and the Jaccard similarity coefficient is a statistic used for gauging the similarity and diversity of sample sets. The Jaccard coefficient measures similarity between finite sample sets, and is defined as the size of the intersection divided by the size of the union of the sample sets:","91f4484b":"Let's plot an image to see how the original images look.","af3afe94":"#### Dice coefficient\nThe Dice score is not only a measure of how many positives you find, but it also penalizes for the false positives that the method finds, similar to precision. so it is more similar to precision than accuracy.","66e68f40":"Now we join all the augmentations image arrays to the original training arrays.","5a961a2b":"![recall](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/4c233366865312bc99c832d1475e152c5074891b)","ffc14c45":"## Image Augmentation  \nTo build a powerful image classifier using very little training data, image augmentation is usually required to boost the performance of deep networks. Image augmentation artificially creates training images through different ways of processing or combination of multiple processing, such as random rotation, shifts, shear and flips, etc.","070e8464":"## Defining the Loss Function","6c57af23":"#### Accuracy","d8124311":"> ![arch](https:\/\/raw.githubusercontent.com\/hashbanger\/Skin_Lesion_Segmentation\/master\/graphics\/unet_arch.png)","32e53121":"Let us have a look at our transformations.","a095ef9c":"Defining a function to load the data in sorted order","abdae795":"## Final Enhance","4704f4a3":"#### Recall  \nRecall actually calculates how many of the Actual Positives our model capture through labeling it as Positive (True Positive). Applying the same understanding, we know that Recall shall be the model metric we use to select our best model when there is a high cost associated with False Negative.\n","36736d5a":"### Plotting Training Stats","c421cab1":"We are going to define to methods for augmentation, one for **random rotation** and one for **horizontal flipping**","81d6524e":"## Visualising Predicted Lesions","b16fc317":"calling the functions for the training data.","22d43485":"## Loading the Model","7313e79b":"Splitting the dataset into training set and test set to verify our model performance without any bias.","7e7143a7":"## Loading the Data","7085676a":"Now let's see their corresponding masks."}}