{"cell_type":{"65efef7a":"code","5615067a":"code","4f29fca7":"code","14d49b59":"code","15c92664":"code","77267dc1":"code","cbab9018":"code","dd00fa11":"code","4bda1eb1":"code","26681a6e":"code","ba9bd03e":"code","c33dd15f":"code","7f0ab93d":"code","eb161820":"code","1df20fa1":"code","41a7c80d":"code","ce165b8d":"code","554c3a9e":"code","c01e59b3":"code","89fe4310":"code","5ce1c828":"code","7606fcb3":"code","91dff7b1":"code","c9e9766c":"code","4fa785a9":"code","73fb2a3a":"code","52f767b3":"code","8556f5c2":"code","d9581b5a":"code","8c849de6":"code","bb145745":"code","2cfdd8ce":"code","a6b88903":"code","2fddcc6f":"code","e58f314e":"code","56606445":"code","68a92044":"code","d6d584c2":"code","4656fd70":"code","7c773a5f":"code","2fe83855":"code","9e826ed0":"code","132d6932":"code","18edfbc4":"code","d11e6329":"code","7dc70fa1":"code","14fee822":"code","130c4d9d":"code","2bb85593":"code","6033065b":"code","b503f98d":"code","d130db4e":"code","2976a5f3":"code","0bab0e3c":"code","8ed3d749":"code","1cb03f53":"code","250286f5":"markdown","d6e00912":"markdown","005fb365":"markdown","c0295fc0":"markdown","08da6694":"markdown","3fbc1fbd":"markdown"},"source":{"65efef7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5615067a":"data=pd.read_csv('\/kaggle\/input\/fraudulent-claim-on-cars-physical-damage\/training data\/training data.csv')\ndata","4f29fca7":"data.isnull().sum()","14d49b59":"data.claim_est_payout=data.claim_est_payout.fillna(0)\ndata.witness_present_ind=data.witness_present_ind.fillna(0)\ndata.age_of_vehicle=data.age_of_vehicle.fillna(0)\ndata.marital_status=data.marital_status.fillna(0)","15c92664":"data.isnull().sum()","77267dc1":"data[['claim_day_of_week','accident_site']]","cbab9018":"data.dtypes","dd00fa11":"import pandas as pd","4bda1eb1":"data.columns","26681a6e":"x = data.drop(columns = ['policy_report_filed_ind'])","ba9bd03e":"x.claim_date=pd.to_datetime(x.claim_date,dayfirst=False)","c33dd15f":"x[['month']] = pd.DataFrame(x.claim_date.dt.month)\nx[['day']] = pd.DataFrame(x.claim_date.dt.day)\nx[['year']] = pd.DataFrame(x.claim_date.dt.year)","7f0ab93d":"x.head()","eb161820":"x = data.drop(columns = ['claim_date'])\n\nx.head()","1df20fa1":"y = data[['policy_report_filed_ind']]\n\ny.head()","41a7c80d":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3)","ce165b8d":"x.head()","554c3a9e":"x = data.drop(columns = ['claim_date'])\n\nx.head()","c01e59b3":"y = data[['policy_report_filed_ind']]\n\ny.head()","89fe4310":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3)","5ce1c828":"x.head()","7606fcb3":"nom_cols =[2,8,10,11,15,21]\nord_cols = [19]\nnum_cols=[0,3,4,5,6,7,9,12,13,14,16,17,18,20,22]\n#Kbin_cols=[0,1,4]\nbinarizer_cols=[1]","91dff7b1":"from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder,KBinsDiscretizer,Binarizer\nfrom sklearn.compose import make_column_transformer\nfrom sklearn import set_config\nfrom sklearn.preprocessing import StandardScaler\n\ntrans = make_column_transformer((OneHotEncoder(sparse=False),nom_cols),\n                                 (OrdinalEncoder(), ord_cols),(StandardScaler(),num_cols)\n                                 ,(Binarizer(threshold=55),binarizer_cols),remainder= 'passthrough')\nset_config(display= 'diagram')\ntrans","c9e9766c":"from sklearn.neighbors import KNeighborsClassifier\nalgorithm7 = KNeighborsClassifier(5) #\nalgorithm7","4fa785a9":"from sklearn.pipeline import make_pipeline\npipe= make_pipeline(trans,algorithm7)\npipe","73fb2a3a":"pipe.fit(x_train,y_train)","52f767b3":"pred = pipe.predict(x_test)\npred","8556f5c2":"from sklearn.metrics import accuracy_score\naccuracy_score(pred,y_test)*100","d9581b5a":"from sklearn.svm import SVC\nmodel1=SVC(kernel='linear')\npipe_1 = make_pipeline(trans,algorithm7)\npipe_1\npipe_1.fit(x_train,y_train)\npred_1=pipe.predict(x_test)\naccuracy_score(pred_1,y_test)*100","8c849de6":"from imblearn.over_sampling import RandomOverSampler\nover= RandomOverSampler()\no_x , o_y = over.fit_resample(x,y)\no_y.value_counts()","bb145745":"from imblearn.over_sampling import SMOTE\nover= RandomOverSampler()\no_x , o_y = over.fit_resample(x,y)\no_y.value_counts()","2cfdd8ce":"from imblearn.pipeline import make_pipeline\ns = SMOTE()\nn_pipe = make_pipeline(trans,s,algorithm7)\nn_pipe","a6b88903":"accuracy_score(pred,y_test)*100","2fddcc6f":"from sklearn.linear_model import LogisticRegression as lr\nalgorithm_2 = lr(solver='liblinear')\npipe_2 = make_pipeline(trans,algorithm_2)\npipe_2","e58f314e":"pipe_2.fit(x_train,y_train)","56606445":"pred_2 = pipe_2.predict(x_test)\npred_2","68a92044":"accuracy_score(pred_1,y_test)*100","d6d584c2":"x.head()","4656fd70":"from sklearn.preprocessing import StandardScaler                   #For one column only \nimport seaborn as sns\ns=StandardScaler()\nx.vehicle_price=pd.DataFrame(s.fit_transform(x[['vehicle_price']]))\nsns.distplot(x.vehicle_price)","7c773a5f":"data.annual_income.min()","2fe83855":"data.annual_income.max()","9e826ed0":"from sklearn.preprocessing import MinMaxScaler\nm= MinMaxScaler()\ndata['annual_income']=m.fit_transform(data[['annual_income']])","132d6932":"data.annual_income.min()","18edfbc4":"data.annual_income.max()","d11e6329":"x.head()","7dc70fa1":"x[(x.gender=='M')&(x.channel=='Online')&(x.living_status=='Rent')].count()[1]","14fee822":"x[(x.gender=='M')&(x.channel=='Online')&(x.living_status=='Rent')].count()","130c4d9d":"x[(x.fraud==1)].mean()[4]","2bb85593":"x[(x.gender=='F')&(x.fraud==1)].count()","6033065b":"data[(data.fraud==1)].groupby('gender').count().iloc[:,0]","b503f98d":"data[(data.fraud==1)].groupby('marital_status').count()","d130db4e":"x.head(2)","2976a5f3":"data[data.channel==\"Broker\"].groupby('vehicle_category').mean()[[\"claim_est_payout\"]]>4999","0bab0e3c":"data[data.fraud==1].gender.value_counts(normalize=True)[0]","8ed3d749":"data.head(2)","1cb03f53":"data[data.fraud==1].groupby('gender').count().iloc[:1,0]","250286f5":"**2.What is the average annual income of fraudsters?**","d6e00912":"**How many males who ordered online live on rent?**","005fb365":"**3.which gender has done most fraud?**","c0295fc0":"**Married or unmarried fraud more ?**","08da6694":"**What percentage of men and women are fraud?**","3fbc1fbd":"**Which vehicle category taken from broker have average claim estimate payout more than 7000?**"}}