{"cell_type":{"fa693b9d":"code","2f8c6ba3":"code","564ddcb8":"code","3e1c6669":"code","dde79191":"code","b9f5fd5f":"code","ddbbe4b3":"code","ae496411":"code","35a97932":"code","f2c1c8e9":"code","dd01a821":"code","77837900":"code","6fbaca32":"code","2ae107e0":"code","0d9b78bf":"code","c4d21e7c":"code","1beb0361":"code","7c413ce8":"code","d1c87ef4":"markdown","543dc6cd":"markdown","5cfcf6ec":"markdown","6f6bb298":"markdown","ab643d8d":"markdown","78ec49b7":"markdown","676323e7":"markdown","4cb11371":"markdown","c66242c0":"markdown","458e9eb3":"markdown","5172d58b":"markdown","30557718":"markdown","abf1ab01":"markdown","54e42ffb":"markdown"},"source":{"fa693b9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f8c6ba3":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","564ddcb8":"df = pd.read_csv(\"..\/input\/retailtransactiondata\/Retail_Data_Transactions.csv\")\ndf","3e1c6669":"data_missing_value = df.isnull().sum().reset_index()\ndata_missing_value","dde79191":"df.duplicated().sum()","b9f5fd5f":"df=df.drop_duplicates()","ddbbe4b3":"df.duplicated().sum()","ae496411":"df['trans_date']=pd.to_datetime(df['trans_date'])","35a97932":"last_date=df['trans_date'].max()\nlast_date","f2c1c8e9":"recency=df.groupby('customer_id').agg({'trans_date': 'max'}).reset_index()\nrecency.columns=['customer_id','last_trans']\nrecency['recency']=last_date-recency['last_trans']\nrecency=recency.drop(['last_trans'],axis=1)\n\nrecency['recency'] = pd.DataFrame(recency['recency'].astype('timedelta64[D]'))\n\nrecency","dd01a821":"frequency=df.groupby('customer_id').agg({'tran_amount':'count'}).reset_index()\nfrequency.columns=['customer_id','frequency']\nfrequency","77837900":"monetary=df.groupby('customer_id').agg({'tran_amount': 'sum'}).reset_index()\nmonetary.columns=['customer_id','monetary']\nmonetary","6fbaca32":"RFM=recency.merge(frequency,\n                 on='customer_id')\nRFM=RFM.merge(monetary,\n             on='customer_id')\nRFM","2ae107e0":"X=RFM[['recency','frequency','monetary']]\n\nfrom sklearn.preprocessing import StandardScaler\n\nX_std = StandardScaler().fit_transform(X)\nRFM_std = pd.DataFrame(data = X_std, columns = ['recency','frequency','monetary'])\nRFM_std.describe()","0d9b78bf":"from sklearn.cluster import KMeans\ninertia = []\n\nfor i in range(1, 11):\n  kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)\n  kmeans.fit(RFM_std.values)\n  inertia.append(kmeans.inertia_)\n\nplt.figure(figsize=(12, 8))\nplt.plot(inertia)","c4d21e7c":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=4, init='k-means++', max_iter=300, n_init=10, random_state=0)\nkmeans.fit(RFM_std.values)","1beb0361":"RFM_std['cluster']= kmeans.labels_","7c413ce8":"melted_RFM=pd.melt(RFM_std.reset_index(),\n                  id_vars=['cluster'],\n                   value_vars=['recency','monetary','frequency'],\n                   var_name='Features',\n                   value_name='Value'\n                  )\n\nsns.lineplot('Features','Value',hue='cluster',data=melted_RFM)\nplt.legend()","d1c87ef4":"Note : Nothing Duplicated Data Anymore","543dc6cd":"First Cluster (Label \"2\"): Visitors who have shopped but did not come back next time <br>\n**Loyalty: NO** <br>\nHighest Recency: the type of customer who has not visited for a long time <br>\nMonetary Low: Spend money is low <br>\nLow Frequency: Rarely shop at the marketplace<br>\n\nSecond Cluster (Label \"0\"): Type of low-class visitor, if the visitor does not come back, it will **potentially become the first cluster** <br>\n**Loyalty: LOW** <br>\nRecency (time of last visit) is relatively the same as the third & fourth types <br>\nLow monetary: low spend money <br>\nLow frequency: rarely shop at the marketplace <br>\n\nThird Cluster (Label \"3\"): Types of visitors to the middle class <br>\n**Loyalty: MEDIUM** <br>\nRecency (time of last visit) is relatively the same as the third & fourth types <br>\nMedium monetary: intermediate spend money <br>\nMedium frequency: shopping regularly at the marketplace <br>\n\nFourth Cluster (Label \"1\"): Types of high-class visitors <br>\n**Loyalty: HIGHT** <br>\nRecency (time of last visit) is relatively the same as the third & fourth types <br>\nHigh monetary: the highest \/ highest spend money <br>\nHigh frequency: shopping very regularly in the marketplace ","5cfcf6ec":"# Recency","6f6bb298":"# Load Data","ab643d8d":"Note :there is 4 cluster because formed 3 corner","78ec49b7":"# Check Missing & Null Data","676323e7":"Note : Nothing Missing Data ","4cb11371":"# Clustering Analysis","c66242c0":"# K Means","458e9eb3":"# Monetary","5172d58b":"# Standarization","30557718":"Note : 6 Data Duplicated","abf1ab01":"# RFM","54e42ffb":"# Frequency"}}