{"cell_type":{"4f83fb54":"code","284c7db2":"code","5d6a53d5":"code","254dc731":"code","f0ffbdd4":"code","e2907236":"code","0e5cbc56":"code","aa6d3909":"code","fd7daf35":"code","cc1b8800":"code","31afaff9":"code","47096ade":"code","e289f781":"code","97aecd5b":"code","5242b9ad":"code","3b850e2a":"code","a633688f":"code","3b6d3e0a":"code","e2c58054":"code","22228d23":"code","3b1840a3":"code","47733505":"code","d47c0d5a":"code","bc0b91ef":"code","ab089e60":"code","ddf53cc4":"code","9a28bcaf":"code","2016b791":"code","682bc468":"code","a0769fdc":"code","c7117aaa":"code","48746236":"code","ef93cb0d":"code","9f1d6ada":"code","82cf256b":"code","2b885d81":"code","d1245428":"code","4d93f6b6":"code","0d1e233f":"code","df3c6aab":"code","1867390c":"code","13d5e5b1":"code","80ce2d6e":"code","03b10e02":"code","166cb220":"code","ea8974ee":"code","dc91f2c4":"code","114abc2a":"code","ab8679cf":"code","c4a2b9cb":"code","dfa3948f":"code","3e471f4f":"code","6583c423":"code","989c16d3":"markdown","3a0db6c7":"markdown"},"source":{"4f83fb54":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings \nwarnings.filterwarnings(\"ignore\")\nimport os\nprint(os.listdir(\"..\/input\"))","284c7db2":"train_data = pd.read_csv(\"..\/input\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/test.csv\")\ngen_sub = pd.read_csv(\"..\/input\/gender_submission.csv\")","5d6a53d5":"train_data.shape , test_data.shape , gen_sub.shape\n","254dc731":"train = pd.concat([train_data,test_data],axis = 0).reset_index(drop = True)","f0ffbdd4":"train.head()","e2907236":"train.sample(frac = 0.01)","0e5cbc56":"fig,ax = plt.subplots(figsize = (6,4))\nsns.barplot(x = train['Sex'].value_counts(normalize = True).index , y = train['Sex'].value_counts(normalize  = True).values)\nplt.title(\"Distribution of Sex\")\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Counts\")\nprint(train['Sex'].value_counts(normalize = True))","aa6d3909":"print(train['Pclass'].value_counts(normalize = True))\nfig,ax = plt.subplots(figsize = (6,4))\nsns.barplot(x =train['Pclass'].value_counts(normalize = True).index , y = train['Pclass'].value_counts(normalize = True).values)\nplt.title(\"Distribution of Class in Ship\")\nplt.xlabel(\"Classes\")\nplt.ylabel(\"Counts\")\nsns.despine()","fd7daf35":"def missing_values(df):\n    columns = list(df.columns)\n    count = []\n    percent = []\n    column = []\n    for col in columns:\n        count.append(df[col].isnull().sum())\n        percent.append((df[col].isnull().sum())\/ df[col].isnull().count())\n        column.append(col)\n    data = pd.DataFrame(data = {'Columns':column,'missing_value':count,'percentage':percent})\n    return(data)\n        ","cc1b8800":"df = missing_values(train) \ndf","31afaff9":"fig,ax = plt.subplots(figsize = (6,4))\nsns.barplot(x = train['Survived'].value_counts().index , y = train['Survived'].value_counts().values)\nplt.title(\"Survived or not\")\n#plt.legend()\nprint(train['Survived'].value_counts(normalize = True))\nplt.show()","47096ade":"g = sns.factorplot(x = 'SibSp',y = 'Survived',hue = 'Pclass',data = train ,kind = 'bar')\ng.set_ylabels(\"Survival Probability\")\n","e289f781":"sns.heatmap(train[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(),annot=True, fmt = \".2f\", cmap = \"YlGnBu\")","97aecd5b":"ax = sns.kdeplot(train['Age'][(train['Survived']==0)&(train['Age'].notnull())] , color = 'r',shade = True,label = 'Not Survived')\nax = sns.kdeplot(train['Age'][(train['Survived']==1)&(train['Age'].notnull())] , color = 'b',shade = True,label = 'Survived')\nplt.title(\"Age vs Survival\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Survival Probability\")\nsns.despine()","5242b9ad":"sns.barplot(x = 'Sex' , y = 'Survived',data = train) # it discernible that being male reduces our chances of survival than female","3b850e2a":"sns.barplot(x = 'Pclass' , y = 'Survived' ,hue = 'Sex' ,  data = train,palette = 'Set1')","a633688f":"train.head()","3b6d3e0a":"sns.barplot(train['Parch'].value_counts().index , train['Parch'].value_counts(normalize = True).values)\nplt.xlabel(\"Parch\")\nplt.ylabel(\"counts\")\nsns.despine()","e2c58054":"sns.barplot(x = \"Parch\" , y = \"Survived\",data = train , palette = 'Set1')","22228d23":"sns.factorplot(\"Pclass\", col=\"Embarked\",  data=train,size=6, kind=\"count\", palette=\"muted\")\nsns.despine()","3b1840a3":"sns.barplot(x = train['Embarked'].value_counts(normalize = True).index , y = train['Embarked'].value_counts(normalize = True).values)\nplt.title(\"Embarked distribution\")\nplt.xlabel(\"Embarked\")\nplt.ylabel(\"Frequency\")\nsns.despine()","47733505":"sns.factorplot(x = \"Embarked\" , y = \"Survived\" ,data = train ,kind = 'bar', palette = 'Set1')\nsns.despine()","d47c0d5a":"train.head(2)","bc0b91ef":"age_nan_index = list(train['Age'][train['Age'].isnull()].index)\nfor i in age_nan_index:\n    age_med = train['Age'].median()\n    age_pred = train['Age'][((train['SibSp']==train.iloc[i]['SibSp'])&(train['Pclass']==train.iloc[i]['Pclass']) \n                             & (train['Parch']==train.iloc[i]['Parch']))].median()\n    if not np.isnan(age_pred):\n        train['Age'].iloc[i] = age_pred\n    else:\n        train['Age'].iloc[i] = age_med","ab089e60":"sns.factorplot(x = 'Survived',y = 'Age',data = train , kind = 'box',palette = 'BuGn')\nsns.factorplot(x = 'Survived',y = 'Age',data = train , kind = 'violin',palette = 'Set1')","ddf53cc4":"train.head(5)","9a28bcaf":"train['Name'].sample(5)","2016b791":"train['Name'][0].split(',')[1].split('.')[0] # to check ","682bc468":"train['Title'] = [i.split(',')[1].split('.')[0].strip() for i in train['Name']]","a0769fdc":"sns.barplot(x = train['Title'].value_counts().index , y = train['Title'].value_counts(normalize = False).values)\nplt.xticks(rotation = 45)\nsns.despine()\nprint(train['Title'].value_counts())","c7117aaa":"train['Title'].unique()","48746236":"train['Title'] = train['Title'].replace(['Lady', 'the Countess','Countess','Capt', \n                                         'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\n                                        'Rare')\ntrain['Title'].unique()","ef93cb0d":"train['Title'] = train['Title'].map({'Master':0,'Miss':1,'Mrs':1,'Mme':1,'Ms':1,'Mlle':1,'Mr':2,'Rare':3,})\ntrain['Title'].unique()","9f1d6ada":"train['Title'] = train['Title'].astype(int)\nax = sns.countplot(train['Title'])\nax.set_xticklabels([\"Master\",\"Miss\/Ms\/Mme\/Mlle\/Mrs\",\"Mr\",\"Rare\"],rotation = 45)\nsns.despine()","82cf256b":"train.head()","2b885d81":"train['Family_Size'] = train['SibSp'] + train['Parch'] + 1\nsns.countplot(train['Family_Size'])","d1245428":"train['Single'] = train['Family_Size'].map(lambda i:1 if i==1 else 0)\ntrain['SmallF'] = train['Family_Size'].map(lambda i:1 if i==2 else 0)\ntrain['MediumF'] = train['Family_Size'].map(lambda i:1 if 3<=i<=4 else 0)\ntrain['LargeF'] = train['Family_Size'].map(lambda i:1 if i>=5 else 0)","4d93f6b6":"# cabin \ntrain['Cabin'].isnull().sum() # 687 null values we can asssume that nan values mean they didn't get the cabin","0d1e233f":"train['Cabin']= pd.Series([i[0] if not pd.isnull(i) else 'X' for i in train['Cabin'] ])\nsns.countplot(train['Cabin'])\nsns.factorplot(x = 'Cabin' , y = 'Survived',data = train,kind = 'bar')","df3c6aab":"train['Ticket'] = pd.Series([i.replace('.',' ').replace('\/',' ').split(' ')[0] if not i.isdigit() else 'X' for i in train['Ticket']])","1867390c":"train.head()","13d5e5b1":"train = pd.get_dummies(train , columns = ['Cabin'],prefix = \"Cab\")","80ce2d6e":"train = pd.get_dummies(train , columns = [\"Ticket\"],prefix = \"T\")\ntrain = pd.get_dummies(train , columns = [\"Embarked\"],prefix = \"Emb\")\ntrain = pd.get_dummies(train , columns = [\"Title\"])","03b10e02":"train = pd.get_dummies(train,columns =[\"Parch\"],prefix = \"P\")","166cb220":"# modelling \ntrain.drop(labels = ['PassengerId'],axis = 1,inplace = True)\ntrain_df = train[:len(train_data)]\ntest_df = train[len(train_data):]","ea8974ee":"test_df.drop(labels = ['Survived'],axis = 1,inplace = True)","dc91f2c4":"y_train = train_df['Survived']\nx_train = train_df.drop(labels = ['Survived'],axis = 1)","114abc2a":"import lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.metrics import roc_auc_score,accuracy_score\nfrom sklearn.model_selection import StratifiedKFold,GridSearchCV,cross_val_score,learning_curve\nfrom sklearn.ensemble import GradientBoostingClassifier , ExtraTreesClassifier, AdaBoostClassifier,VotingClassifier","ab8679cf":"'''model_lg = lgb.LGBMClassifier(silent = False)\nparam_dist = {\"max_depth\":[15,25,35,45,50],\n              \"learning_rate\":[0.01,0.05,0.1,0.2,0.5,0.4],\n             \"num_leaves\":[100,200,300,500],\n             \"n_estimators\":[50,100,150]}\ngrid_search = GridSearchCV(model_lg,param_grid = param_dist,cv = 3,scoring=\"roc_auc\"\n                          ,verbose = 5)\ngrid_search.fit(x_train,y_train)\ngrid_search.best_estimator_'''\n","c4a2b9cb":"model_xg = xgb.XGBClassifier()\nparam_dist = {\"max_depth\":[5,10,15,20,30],\n             \"min_child_weight\":[1,2,3,4,6],\n             \"n_estimators\":[50,100,150,200],\n             \"learning_rate\":[0.01,0.05,0.1,0.16,0.2]}\ngrid_search = GridSearchCV(model_xg,param_grid=param_dist,cv = 3,verbose = 10,n_jobs=-1)\ngrid_search.fit(x_train.drop(labels=['Name','Sex'],axis=1),y_train)\nprint(grid_search.best_estimator_)","dfa3948f":"model = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n       max_depth=15, min_child_weight=3, missing=None, n_estimators=50,\n       n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,\n       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n       silent=True, subsample=1)\nmodel.fit(x_train.drop(labels=['Name','Sex'],axis=1),y_train)\ny_pred = model.predict(test_df.drop(labels=['Name','Sex'],axis=1))\n\n","3e471f4f":"test_Survived = pd.Series(y_pred,name = \"Survived\")\nresults = pd.concat([gen_sub['PassengerId'],test_Survived],axis=1,ignore_index = False)\n\n","6583c423":"results = results.astype('int')\nresults.to_csv(\"submission.csv\",index=False,encoding = \"utf-8\")","989c16d3":"> **Filling the Missing Values **","3a0db6c7":"****Feature Engineering****"}}