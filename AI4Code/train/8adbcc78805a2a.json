{"cell_type":{"d83e41a6":"code","c8bf4f44":"code","2e79325c":"code","6c74594a":"code","1d076bc1":"code","d29a18e2":"code","1d6dce84":"code","b2f04603":"code","d64b214b":"code","3057ec1b":"code","43415a92":"code","fefc25df":"code","3415e1cd":"code","be48ef6b":"code","bbcafc8e":"code","eab98801":"code","67de5b5f":"code","69ed8a0c":"code","05bd61d5":"code","a5709dca":"code","e058018d":"code","6021854c":"code","c6463aa4":"code","fa3fb911":"code","f68cf2b3":"code","330fb55f":"code","7cff4af1":"code","e83e404a":"code","ad250a16":"code","9efedc73":"code","d32fe89a":"code","46f03323":"code","384d8076":"code","81d0bef2":"code","2885852c":"code","5ea512f7":"code","f22d1565":"code","96b61778":"code","4db7b873":"code","fc919e7a":"code","c3b2b47b":"code","12cd647e":"code","c4759abd":"code","c1f42905":"code","9c261656":"code","413f198d":"code","64ade986":"code","859d2a9f":"code","385e0686":"code","6c4aebf4":"code","4c60ffdf":"code","c652d6cb":"code","c3808c9c":"code","b5b052f7":"code","95c9c0c1":"code","a0727a10":"code","7a58cd43":"code","47db79b8":"code","b266b472":"code","74f5ce03":"code","b823d80e":"code","e0434566":"code","4c413d67":"code","6c84f8a0":"code","0f736d63":"code","b82427eb":"code","ecb529dd":"code","b50137ec":"code","257578da":"code","600906c4":"code","3fe6ab4f":"code","17d29f23":"code","348de92e":"code","1cb9a618":"code","d11d7f5d":"code","b100b7ec":"code","752e7519":"code","5a991b94":"markdown","f25d6fa4":"markdown","b330bd11":"markdown","86990ba3":"markdown","4b693678":"markdown","840ad47a":"markdown","ba048225":"markdown","6320ca9a":"markdown","5295f5d2":"markdown","17ab7a3a":"markdown","038cd37b":"markdown","aec7a437":"markdown","72cf77f7":"markdown","f91d5a49":"markdown","dd855df7":"markdown","bdcc2b0e":"markdown","450bc4f4":"markdown","f82bf22d":"markdown","06c2ca08":"markdown","8c55eb06":"markdown","049c36a5":"markdown","2c4fe709":"markdown","ad0b2186":"markdown","fcc58c55":"markdown","c46df9f1":"markdown","c4e038b7":"markdown","26af8860":"markdown","ba011f3d":"markdown","7fa5bd59":"markdown","0f8f56e9":"markdown","6f2be25c":"markdown","5a7a56de":"markdown","507ac8e6":"markdown","262332d0":"markdown","7a6c9928":"markdown","bf3add77":"markdown"},"source":{"d83e41a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c8bf4f44":"data = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')\nprint(data.columns)\ndata = data.rename(columns = {\"race\/ethnicity\" : \"race\", \"parental level of education\" : \"parent_education\", \"test preparation course\" : \"preparation\", \"math score\" : \"math\",\n            \"reading score\" : \"reading\", \"writing score\" : \"writing\"})","2e79325c":"data.head(10)","6c74594a":"data.describe()","1d076bc1":"data[\"total_score\"]  = data[\"math\"] + data[\"reading\"] + data[\"writing\"]","d29a18e2":"data.gender.unique()","1d6dce84":"data.gender = [1 if each == \"female\" else 0 for each in data.gender]","b2f04603":"data[\"race\"].unique()","d64b214b":"data.lunch.unique()","3057ec1b":"data.preparation.unique()","43415a92":"data.parent_education.unique()","fefc25df":"data[[\"race\", \"math\"]].groupby(\"race\", as_index = False).mean().sort_values(by = \"math\", ascending = True)","3415e1cd":"data[[\"race\", \"reading\"]].groupby(\"race\", as_index = False).mean().sort_values(by = \"reading\", ascending = True)","be48ef6b":"data[[\"race\", \"writing\"]].groupby(\"race\", as_index = False).mean().sort_values(by = \"writing\", ascending = True)","bbcafc8e":"data[[\"race\", \"writing\", \"reading\" , \"math\"]].groupby(\"race\", as_index = False).mean().sort_values(by = \"writing\", ascending = True)","eab98801":"data[[\"parent_education\", \"writing\", \"reading\" , \"math\"]].groupby(\"parent_education\", as_index = False).mean().sort_values(by = \"writing\", ascending = True)","67de5b5f":"data[[\"parent_education\", \"preparation\", \"writing\", \"reading\" , \"math\"]].groupby([\"parent_education\", \"preparation\"], as_index = False).mean().sort_values(by = \"parent_education\", ascending = True)","69ed8a0c":"data[[\"parent_education\", \"lunch\", \"writing\", \"reading\" , \"math\"]].groupby([\"parent_education\", \"lunch\"], as_index = False).mean().sort_values(by = \"parent_education\", ascending = True)","05bd61d5":"data[[\"parent_education\", \"lunch\", \"total_score\"]].groupby([\"parent_education\", \"lunch\"], as_index = False).mean().sort_values(by = \"total_score\", ascending = True)","a5709dca":"data[[\"parent_education\",\"writing\", \"reading\" , \"math\", \"total_score\"]].groupby([\"parent_education\"], as_index = False).mean().sort_values(by = \"total_score\", ascending = True)","e058018d":"data[[\"parent_education\", \"preparation\", \"total_score\"]].groupby([\"parent_education\", \"preparation\"], as_index = False).mean().sort_values(by = \"total_score\", ascending = True)","6021854c":"data[[\"parent_education\", \"race\", \"total_score\"]].groupby([\"parent_education\", \"race\"], as_index = False).mean().sort_values(by = \"total_score\", ascending = True)","c6463aa4":"sns.heatmap(data.corr(), annot = True, linewidth = 0.5,linecolor = \"cyan\")\nplt.plot()","fa3fb911":"sns.countplot(x = \"gender\", data = data)\nplt.show()","f68cf2b3":"sns.countplot(x = \"lunch\", data = data)\nplt.show()","330fb55f":"sns.countplot(x = \"race\", data = data)\nplt.show()","7cff4af1":"sns.countplot(x = \"parent_education\", data = data, palette = sns.cubehelix_palette(len(data[:])))\nplt.xticks(rotation = 90)\nplt.xlabel(\"Parent Education Status\")\nplt.ylabel(\"Count\")\nplt.title(\"Parent Education - Count\")\nplt.show()","e83e404a":"g = sns.factorplot(x = \"preparation\" , y = \"total_score\", data = data, kind = \"bar\")\ng.set_ylabels(\"Total Score\")\nplt.show()","ad250a16":"g = sns.factorplot(x = \"parent_education\" , y = \"total_score\", data = data, kind = \"bar\")\ng.set_ylabels(\"Total Score\")\nplt.xticks(rotation = 90)\nplt.show()","9efedc73":"data.head()","d32fe89a":"trace1 = go.Bar(\n    x = data.race,\n    y = data.total_score,\n    name = \"Race\",\n    marker = dict(color = 'rgba(255, 174, 255, 0.5)',line=dict(color='rgb(0,0,0)',width=1.5)),\n    text = data.race\n)\n\ntrace2 = go.Bar(\n    x = data.parent_education,\n    y = data.total_score,\n    name = \"Parents Education Level\",\n    marker = dict(color = 'rgba(255, 255, 128, 0.5)',line=dict(color='rgb(0,0,0)',width=1.5)),\n    text = data.parent_education\n)\ndatas = [trace1, trace2]\nlayout =  go.Layout(barmode = 'relative')\nfig = go.Figure(data = datas, layout = layout)\niplot(fig)","46f03323":"group_a = data.parent_education[data.race == \"group A\"].value_counts()\ngroup_b = data.parent_education[data.race == \"group B\"].value_counts()\ngroup_c = data.parent_education[data.race == \"group C\"].value_counts()\ngroup_d = data.parent_education[data.race == \"group D\"].value_counts()\ngroup_e = data.parent_education[data.race == \"group E\"].value_counts()\ngroups = [group_a, group_b, group_c, group_d, group_e]","384d8076":"def plott(groups):\n    for group in groups:\n        plt.plot(group.index, group.values, color = \"cyan\")\n        plt.xlabel(\"Education Level \")\n        plt.ylabel(\"Counts\")\n        plt.xticks(rotation = 90)\n        plt.show()","81d0bef2":"plott(groups)","2885852c":"data.head(10)","5ea512f7":"data.race = [1 if each == \"group A\" else 2 if each == \"group B\" else 3 if each == \"group C\" else 4 if each == \"group D\" else 5 for each in data.race]","f22d1565":"data.head(10)","96b61778":"data.parent_education.unique()","4db7b873":"data.parent_education = [\"high school\" if each == \"some high school\" else \"associate's degree\" if each == \"some college\" else each for each in data.parent_education]","fc919e7a":"data.parent_education = [1 if each == \"high school\" else 2 if each == \"associate's degree\" else 3 if each == \"bachelor's degree\" else 4 for each in data.parent_education]","c3b2b47b":"data.lunch.unique()","12cd647e":"data.lunch = [1 if each == \"standard\" else 0 for each in data.lunch]","c4759abd":"data.preparation.unique()","c1f42905":"data.preparation = [0 if each == \"none\" else 1 for each in data.preparation]","9c261656":"data.head()","413f198d":"plt.plot(data.gender, data.parent_education)\nplt.show()","64ade986":"x = data.iloc[:,0:8]\ny = data.iloc[:, 8].values.reshape(-1,1)","859d2a9f":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)","385e0686":"plt.scatter(data.reading, data.total_score)\nplt.show()","6c4aebf4":"xt_linear = x[\"reading\"].values.reshape(-1,1)","4c60ffdf":"from sklearn.linear_model import LinearRegression\nlinear = LinearRegression()\nlinear.fit(xt_linear, y)","c652d6cb":"print(\"b0\" , linear.intercept_)\nprint(\"Slope : \" ,linear.coef_)\n","c3808c9c":"x_test_n = np.arange(min(xt_linear), max(xt_linear), 0.1).reshape(-1,1)\ny_head = linear.predict(x_test_n)","b5b052f7":"plt.scatter(data.reading, data.total_score)\nplt.plot(x_test_n, y_head, color = \"red\")\nplt.show()","95c9c0c1":"x_l = data.drop(\"gender\", axis = 1).values\ny_l = data.loc[:, \"gender\"].values","a0727a10":"from sklearn.model_selection import train_test_split\nx_tl, x_tel, y_tl, y_tel = train_test_split(x_l, y_l, test_size = 0.3, random_state = 42)","7a58cd43":"from sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression(random_state = 42, max_iter= 300)\nlogistic.fit(x_tl, y_tl)","47db79b8":"print(\"Score : \", logistic.score(x_tel, y_tel))","b266b472":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor()\ndtr.fit(x_train, y_train)","74f5ce03":"print(\"Score : \", dtr.score(x_test, y_test))","b823d80e":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier(random_state = 42)\ndtc.fit(x_tl, y_tl)","e0434566":"print(\"Score : \", dtc.score(x_tel, y_tel))","4c413d67":"y_true = y_tel\ny_head = dtc.predict(x_tel)\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_head)","6c84f8a0":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True, linewidths = 0.5, linecolor = \"red\", fmt = \".0f\", ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","0f736d63":"y_train_r = y_train.ravel()\nfrom sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators = 100, random_state = 42)\nrfr.fit(x_train, y_train_r)","b82427eb":"print(\"Score : \", rfr.score(x_test, y_test))","ecb529dd":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 100, random_state = 42)\nrfc.fit(x_tl, y_tl)","b50137ec":"print(\"Score : \", rfc.score(x_tel, y_tel))","257578da":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True, linewidths = 0.5, linecolor = \"red\", fmt = \".0f\", ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","600906c4":"from sklearn.svm import SVC\nsvm = SVC(random_state = 42)\nsvm.fit(x_tl, y_tl)","3fe6ab4f":"print(\"Score : \", svm.score(x_tel, y_tel))","17d29f23":"y_true = y_tel\ny_head = svm.predict(x_tel)\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_head)","348de92e":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True, linewidths = 0.5, linecolor = \"red\", fmt = \".0f\", ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","1cb9a618":"y_tl_nb = y_tl.ravel()\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_tl, y_tl_nb)","d11d7f5d":"print(\"Score : \", nb.score(x_tel, y_tel))","b100b7ec":"y_true = y_tel\ny_head = nb.predict(x_tel)\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_head)","752e7519":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True, linewidths = 0.5, linecolor = \"red\", fmt = \".0f\", ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","5a991b94":"For the classification part, we try to predict students gender.","f25d6fa4":"Including preparation column to the filter does not change anything. Both completed and none type of students gets more points when their parents education level is higher. But in same level students, preparation is important.","b330bd11":"### Lunch\n* standard -- 1\n* free\/reduced -- 0","86990ba3":"<a id = \"4\"><\/a>\n## Machine Learning Methods","4b693678":"### Preparation\n* none -- 0\n* completed -- 1","840ad47a":"<a id = \"1\"><\/a>\n## Load and Understand Data","ba048225":"In the code below, we can see the races and their mean scores on the math and also other tests.","6320ca9a":"Lunch type gives us same effect like preparation.","5295f5d2":"### SVM\nSVM used for make binary classification. There is a decision boundary. Decision boundary: anything that falls to one side of it we will classify as blue, and anything that falls to the other as red. \nIn this part, we try to predict student's gender according the other attributes.","17ab7a3a":"There are 5 different type of race.","038cd37b":"As I aspect, the math, writing, reading and total score have strong relationship between them.","aec7a437":"In the plot above, we can see the relationship between the reading points and total score. ","72cf77f7":"For the classification part, we try to predict students gender.","f91d5a49":"We can see the parent's which have more education level, their childrens get more points both three type of tests.","dd855df7":"Data is balanced according to genders.","bdcc2b0e":"<a id = \"2\"><\/a>\n## Visualization","450bc4f4":"### Parent Education","f82bf22d":"In first part of the kernel, I modified the gender column. For females I wrote 1 and 0 for man.","06c2ca08":"    I changed the gender values, if gender is \"female\" the new value of row is 1, otherwise 0.","8c55eb06":"# INTRODUCTION \nIn this kernel, we understand the influence of the parents background, test preparation etc on students performance.\nThere are 8 attributes. \n* gender\n* race\/ethnicity\n* parental level of education\n* lunch\n* test preparation course\n* math score\n* reading score\n* writing score\n\n\n1. [Load and Understand Data](#1)\n1. [Visualization](#2)\n1. [Feature Engineering](#3)\n1. [Machine Learning Methods](#4)\n","049c36a5":"### Race","2c4fe709":"### Linear Regression\nIn this dataset, we can see the strong relationship between math, reading, writing and the total score columns.","ad0b2186":"We can calculate the confusion matrix for classificaiton part.","fcc58c55":"Our goal is to see the effect of the parent's education levels on the students test score. Then,","c46df9f1":"For three types of test, we can see that the which students are in \"group E\", they have much higher mean score than others.","c4e038b7":"Students which parents education level is bachelor or master takes more points total in tests.","26af8860":"I add a new feature named \"total score\" which stores the total score taken from tests.","ba011f3d":"<a id = \"3\"><\/a>\n## Feature Engineering\nIn this part, I will modify the feature indexes for machine learning.","7fa5bd59":"### Decision Tree Regression - Classification\nRegression can predict the taken total number from the tests. Classification is to classify data, so we can use same data as logistic regression.","0f8f56e9":"### Train - Test Data Preparation","6f2be25c":"The students have not been prepared to test takes at most 200 points, but the students have been prepared to test takes more than 200 point.","5a7a56de":"For parent education type, there are 6 different values.\n* bachelor's degree -- 3\n* some college -- 2\n* master's degree -- 4\n* associate's degree -- 2\n* high school -- 1\n* some high school -- 1\n\nI concatinate the some high school and high school values. Also I concatinate the some college and associate's degree. Because according the previous inspections on data shows that the there is no big change on the mean's of these values.","507ac8e6":"### Random Forest Regression - Classification","262332d0":"### Logistic Regression\nLogistic regression can make binary regression, so in this dataset we can try to predict the gender of students.","7a6c9928":"### Naive Bayes\nA Naive Bayes classifier is a probabilistic machine learning model that\u2019s used for classification task. The crux of the classifier is based on the Bayes theorem.\n![image.png](attachment:image.png)\nUsing Bayes theorem, we can find the probability of A happening, given that B has occurred. Here, B is the evidence and A is the hypothesis. The assumption made here is that the predictors\/features are independent. That is presence of one particular feature does not affect the other. Hence it is called naive.\n\n* Gaussian Naive Bayes: When the predictors take up a continuous value and are not discrete, we assume that these values are sampled from a gaussian distribution.","bf3add77":"The parents have master degree is more less than the other education types."}}