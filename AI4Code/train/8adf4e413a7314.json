{"cell_type":{"3ed293f5":"code","80ef4d27":"code","0ca72832":"code","d238be52":"code","3c41a4a8":"code","a03db7a0":"code","b5dfba84":"code","1b73b9c3":"code","8a08dd34":"code","969e6458":"code","1404143e":"code","1bf06430":"code","e0558197":"code","e52e92f2":"code","b851312c":"code","ff356837":"code","290e991a":"code","441c1e8c":"code","463514cb":"code","2e47466b":"code","7dbeaf0b":"code","21355842":"code","95d06285":"code","66ead75e":"code","7fccb7ce":"code","862b8960":"code","4e86197a":"code","ccadc558":"code","e2d29034":"code","e5e327a1":"code","c9b3a57c":"code","78c7f6bb":"code","4bd60f97":"code","64594e9c":"code","ec2a9ff5":"code","84ab5a5a":"code","7367d7df":"code","4954cc2b":"code","e30338e2":"code","3a5a6dbc":"code","98004dc4":"code","d3551147":"code","766dc42e":"markdown","0e128542":"markdown","4fef0a35":"markdown"},"source":{"3ed293f5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport bq_helper\nfrom bq_helper import BigQueryHelper\nfrom google.cloud import bigquery\nimport datetime as dt\nimport re","80ef4d27":"chicago_crime = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"chicago_crime\")","0ca72832":"bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"chicago_crime\")\nbq_assistant.list_tables()","d238be52":"bq_assistant.head(\"crime\", num_rows=2)","3c41a4a8":"bq_assistant.table_schema(\"crime\")","a03db7a0":"feature_query = \"\"\"\n                SELECT date,primary_type,location_description, year, community_area\n                FROM  `bigquery-public-data.chicago_crime.crime`\n                WHERE year>2010\n                \"\"\"\nsize = bq_assistant.estimate_query_size(feature_query)\nprint(\"Query size: \" + str(size))\ndataset = chicago_crime.query_to_pandas_safe(feature_query)\ndataset.head(3)","b5dfba84":"dateobject = pd.to_datetime(dataset['date']) #Timestamp to date\ndataset['date'] = dateobject.dt.date #Returns the date without timezone information\ndataset['date'] = dateobject.dt.strftime('%Y-%m-%d') #Format","1b73b9c3":"print(len(dataset[dataset[\"location_description\"] == \"OTHER\"]))\nprint(len(dataset))\n","8a08dd34":"#Dataset to analyze for trends the past two years\ncrimes_2019 = pd.DataFrame(dataset[(dataset[\"date\"] >= '2019-01-01') & (dataset[\"date\"] <= '2019-11-01')])\ncrimes_2020 = pd.DataFrame(dataset[(dataset[\"date\"] >= '2020-01-01') & (dataset[\"date\"] <= '2020-11-01')])\ndataset_lately = pd.concat([crimes_2019,crimes_2020 ]).reset_index()\nprint(\"Size of dataset from 2019 and 2020: \" + str(len(dataset_lately)))","969e6458":"print(len(dataset_lately[dataset_lately[\"location_description\"] == \"OTHER\"]))\nprint(len(dataset_lately))","1404143e":"top10_crimes=  \"\"\"SELECT COUNT(unique_key), primary_type\n              FROM  `bigquery-public-data.chicago_crime.crime`\n            GROUP BY primary_type\n            ORDER BY COUNT(unique_key) DESC;\n\n        \"\"\"\nsize = bq_assistant.estimate_query_size(top10_crimes)\nprint(\"Query size: \" + str(size))\nall_data = chicago_crime.query_to_pandas_safe(top10_crimes)\nall_data.head(5)","1bf06430":"#Enter which crimetypes to analyze with regards to community areas: \ntop_10_crimes = [\"THEFT\",\"BATTERY\",\"CRIMINAL DAMAGE\",\"NARCOTICS\" , \"ASSAULT\", \"OTHER OFFENSE\", \"BURGLARY\", \"MOTOR VEHICLE THEFT\", \"DECEPTIVE PRACTICE\", \"ROBBERY\"]\ntop_10_dataset = dataset[dataset.primary_type.isin(top_10_crimes)]","e0558197":"#Sort dataset based on crime type and count per area. \ntop_10_dataset['crime_count'] =1 \ngrouped_data = top_10_dataset.groupby(['primary_type','community_area'])['crime_count'].sum().reset_index()\ncrimetypes_sorted_by_areas = grouped_data.sort_values(by=[\"primary_type\",\"crime_count\"], ascending=[ True,False])  \n#print(crimetypes_sorted_by_areas)\n\n#Select top 5 areas within the selected crimetypes. \ntopX=5\ntopX_areas_per_crime = crimetypes_sorted_by_areas.groupby(['primary_type']).apply(lambda x: x.nlargest(topX,['crime_count'])).reset_index(drop=True)\n#print(topX_areas_per_crime.head(6))","e52e92f2":"#Create dictionary of crimes with topX community_areas\ntype_areas_dictionary= dict()\nfor crimetype in top_10_crimes: \n    type_areas_dictionary.setdefault(crimetype, [])\n\nfor i in range(len(topX_areas_per_crime)): \n    for crimetype in top_10_crimes: \n        if topX_areas_per_crime[\"primary_type\"][i] == crimetype:\n            if crimetype in type_areas_dictionary:\n                type_areas_dictionary[crimetype].append(topX_areas_per_crime[\"community_area\"][i])\nprint(\"Top ten crimes with top 5 community areas: \")                           \nfor types, places in type_areas_dictionary.items():\n    print('{} : {}'.format(types, places))","b851312c":"#Dataset to analyze for trends the past two years\ncrimes_2019 = pd.DataFrame(dataset[(dataset[\"date\"] >= '2019-01-01') & (dataset[\"date\"] <= '2019-11-01')])\ncrimes_2020 = pd.DataFrame(dataset[(dataset[\"date\"] >= '2020-01-01') & (dataset[\"date\"] <= '2020-11-01')])\ndataset_lately = pd.concat([crimes_2019,crimes_2020 ]).reset_index()\nprint(\"Size of dataset from 2019 and 2020: \" + str(len(dataset_lately)))","ff356837":"import re\ndef to_words(text):\n    allwords= re.findall(r'\\w+', text)\n    if \"SCHOOL\" in allwords: \n        return \"SCHOOL\"\n    return allwords\n\n#Create list of all words present in location description\nall_words = []\ndescription_words = dataset['location_description'].apply(lambda x: all_words.extend(to_words(str(x).upper())))\nwordList = list(set(all_words))\nprint(\"Total number of description words found: \"+ str(len(wordList)))","290e991a":"#Clean the data: remove single letter words,\"bindeord\" sort dictionary and extract top 10\n#sorted_description_list = description_dictionary\n\/*def cleanWordCountDict(dictionary):\n    sorted_description_list = dictionary.items() \n    sorted_description_list_stripped=[]\n    not_relevant = [\"NON\", \"OTHER\", \"LOT\", \"SMALL\"] #Lot is present in parking lot and a few other descriptions\n    for item in sorted_description_list: \n        if item[0] == \"RESID\": \n            item = ('RESIDENCE', item[1])\n        if item[0] == \"PARKING\" or item[0] == \"CHA\": \n            item = ('PARKING LOT', item[1])\n        if item[0] in [\"RETAIL\",\"GROCERY\",\"CONVENIENCE\"] : \n            item = ('STORE', item[1])\n        if item[0] == \"PUBLIC\": \n            item = ('PUBLIC AREA', item[1])\n        if item[0] == \"NURSING\":   \n            item = ('NURSING HOME', item[1])\n        if item[0] == \"COMMERCIAL\":   \n            item = ('COMMERCIAL BUSINESS OFFICE', item[1])\n        if item[0] == \"DEPARTMENT\":   \n            item = ('DEPARTMENT STORE', item[1])\n        if item[0] == \"RESIDENTIAL\":   \n            item = ('RESIDENTIAL YARD', item[1])\n        if item[0] == \"GAS\":   \n            item = ('GAS STATION', item[1])\n        if item[0] == \"VACANT\":   \n            item = ('VACANT LOT\/LAND', item[1])\n        if item[0] == \"CTA\":   \n            item = ('CTA TRAIN\/PLATFORM', item[1]) \n        if item[0] == \"CURRENCY\":   \n            item = ('CURRENCY EXCHANGE', item[1]) \n        if item[0] == \"SIDEWALK\":   \n            item = ('STREET', item[1]) \n        if len(item[0])>2 and (item[0] not in not_relevant):\n            sorted_description_list_stripped.append(item)\n\n    sorted_description_dict_stripped = dict(sorted_description_list_stripped)\n    sorted_description_list_2 = sorted(sorted_description_dict_stripped.items(), key=lambda x: x[1], reverse=True)  \n    return dict(sorted_description_list_2[0:10])*\/","441c1e8c":"#Clean the data: remove single letter words,\"bindeord\" sort dictionary and extract top 10\n#sorted_description_list = description_dictionary\ndef cleanWordCountDict(descriptionWord):\n    not_relevant = [\"NON\", \"OTHER\", \"LOT\", \"SMALL\"] #Lot is present in parking lot and a few other descriptions\n    if len(descriptionWord)>2 and (descriptionWord not in not_relevant):\n        if descriptionWord == \"RESID\": \n            descriptionWord = 'RESIDENCE'\n        if descriptionWord == \"PARKING\" or descriptionWord == \"CHA\": \n            descriptionWord = 'PARKING LOT'\n        if descriptionWord in [\"RETAIL\",\"GROCERY\",\"CONVENIENCE\"] : \n            descriptionWord = 'STORE'\n        if descriptionWord == \"PUBLIC\": \n            descriptionWord ='PUBLIC AREA'\n        if descriptionWord == \"NURSING\":   \n            descriptionWord = 'NURSING HOME'\n        if descriptionWord == \"COMMERCIAL\":   \n            descriptionWord = 'COMMERCIAL BUSINESS OFFICE'\n        if descriptionWord == \"DEPARTMENT\":   \n            descriptionWord = 'DEPARTMENT STORE'\n        if descriptionWord == \"RESIDENTIAL\":   \n            descriptionWord = 'RESIDENTIAL YARD'\n        if descriptionWord == \"GAS\":   \n            descriptionWord = 'GAS STATION'\n        if descriptionWord == \"VACANT\":   \n            descriptionWord = 'VACANT LOT\/LAND'\n        if descriptionWord == \"CTA\":   \n            descriptionWord = 'CTA TRAIN\/PLATFORM'\n        if descriptionWord == \"CURRENCY\":   \n            descriptionWord = 'CURRENCY EXCHANGE'\n        if descriptionWord == \"SIDEWALK\":   \n            descriptionWord = 'STREET'\n        if descriptionWord == \"POLICE\":\n            descriptionWord = \"POLICE FACILITY\"\n        return descriptionWord","463514cb":"#Clean the data: remove single letter words,\"bindeord\" sort dictionary and extract top 10\n#sorted_description_list = description_dictionary\ndef sortWordCountDict(sorted_description_list_stripped):\n    sorted_description_dict_stripped = dict(sorted_description_list_stripped)\n    sorted_description_list_2 = sorted(sorted_description_dict_stripped.items(), key=lambda x: x[1], reverse=True)  \n    return dict(sorted_description_list_2[0:10])","2e47466b":"#def createWordCountDict(data_set):\n #   listofzeros = [0] * len(wordList)\n  #  description_dictionary= dict(zip(wordList,listofzeros))\n   # for i in range(len(data_set)): \n    #    descriptionWord = to_words(str(dataset['location_description'][i]).upper())[0]\n     #   word = cleanWordCountDict(descriptionWord)\n      #  if word in description_dictionary:\n       #     description_dictionary[word] = description_dictionary[word]+1\n  #  sorted_description_list = sortWordCountDict(description_dictionary)\n    #return sorted_description_list","7dbeaf0b":"\n#def createWordCountDict(data_set):\n #   listofzeros = [0] * len(wordList)\n  #  description_dictionary= dict(zip(wordList,listofzeros))\n   # for i in range(len(data_set)): \n    #    for word in wordList: \n     #       if word in [to_words(str(data_set['location_description'][i]).upper())[0]]:\n      #          if word in description_dictionary:\n       #               description_dictionary[word] = description_dictionary[word]+1\n    #sorted_description_list = cleanWordCountDict(description_dictionary)\n    #return sorted_description_list\n","21355842":"#DENNE GJELDER: \ndef createWordCountDict(data_set):\n    description_dictionary= {\"key\":0}\n    for i in range(len(data_set)): \n        description = to_words(str(data_set['location_description'][i]).upper())\n        if 'SIDEWALK' in description:\n            description = ['STREET']\n        if 'OTHER' and 'SPECIFY' in description:\n            description = ['OTHER']\n        if str(description) in description_dictionary:\n            description_dictionary[str(description)] = description_dictionary[str(description)]+1\n        else: \n            description_dictionary[str(description)] = 1\n    sorted_description_list = sortWordCountDict(description_dictionary)\n    return sorted_description_list","95d06285":"import matplotlib.pylab as plt\nimport numpy as np\n\ndef plotTopTen(description_list, col, title):\n    area_description_dict_formatted = dict()\n    for (key,value) in area_description_list.items():\n        list_of_words = to_words(key)\n        label = ' '.join(list_of_words)\n        if 'HOTEL' and 'MOTEL' in list_of_words:\n            label = \"HOTEL\/MOTEL\"\n        if 'LAKEFRONT' and 'WATERFRONT' in list_of_words:\n            label = \"LAKEFRONT\/WATERFRONT\/RIVERSIDE\"\n        if 'VEHICLE' and'RIDE'and'SHARE'and'SERVICE' in list_of_words:\n            label = \"VEHICLE\/SHARE RIDE SERCIVE UBER etc\"\n        area_description_dict_formatted[label] = value\n        \n    x, y = zip(*area_description_dict_formatted.items()) # unpack a list of pairs into two tuples\n    y_pos = np.arange(len(x))\n    plt.bar(y_pos, y, color=col)\n    plt.xticks(y_pos, x, rotation='vertical')\n    plt.title(title)\n    plt.show()\n\n","66ead75e":"sorted_description_list = createWordCountDict(dataset_lately)\nplotTopTen(sorted_description_list,'c', 'Amount of total crimes at specific locations the past two years')","7fccb7ce":"#Dataframe containing crimes occuring in specific areas the past two years\nareaList = [8]\nfor area in areaList: \n    dataset_lately['in_area'] = dataset_lately['community_area'].apply(lambda x: x==area)\n    area_crimes = dataset_lately[dataset_lately['in_area']].reset_index()\n    area_description_list = createWordCountDict(area_crimes)\n\n    title ='Location distribution of all crimes in area '+ str(area) + 'the past two years'\n    plotTopTen(area_description_list,'b', title,)\n","862b8960":"#Explore patterns: \nresearch_tuples = [\n    (8,\"BURGLARY\"),\n    (8,\"WEAPONS VIOLATION\"),\n    (8,\"MOTOR VEHICLE THEFT\"),\n    (8,\"CRIMINAL SEXUAL ASSAULT\"),\n    (8,\"PUBLIC PEACE VIOLATION\")\n    ]\nfor (area, crimetype) in research_tuples: \n    area_dataset = dataset_lately[dataset_lately['community_area']==area]\n    area_and_type = area_dataset[area_dataset['primary_type']==crimetype].reset_index()\n    area_description_list = createWordCountDict(area_and_type)\n    title = crimetype +' crime location distribution in area '+ str(area) + ' the past two years'\n    plotTopTen(area_description_list,'b', title)\n    plt.show()","4e86197a":"feature_query = \"\"\"\n                SELECT date,primary_type,location_description, year, community_area, description\n                FROM  `bigquery-public-data.chicago_crime.crime`\n                WHERE year>2018\n                \"\"\"\ndataset_2 = chicago_crime.query_to_pandas_safe(feature_query)","ccadc558":"#Dataset to analyze for trends the past two years\ncrimes_2019 = pd.DataFrame(dataset_2[(dataset_2[\"date\"] >= '2019-01-01') & (dataset_2[\"date\"] <= '2019-11-01')])\ncrimes_2020 = pd.DataFrame(dataset_2[(dataset_2[\"date\"] >= '2020-01-01') & (dataset_2[\"date\"] <= '2020-11-01')])\ndataset_lately2 = pd.concat([crimes_2019,crimes_2020 ]).reset_index()\nprint(\"Size of dataset from 2019 and 2020: \" + str(len(dataset_lately2)))\ndataset_lately2.head(40)","e2d29034":"dataset_lately.head(20)","e5e327a1":"\ndef createDescriptionCountDict(data_set):\n    description_dictionary= {\"key\":0}\n    for i in range(len(data_set)): \n        description = to_words(str(data_set['description'][i]).upper())\n        if 'POSS' in description:\n            new_strings = []\n            for string in description:\n               # print(string)\n                new_string = string.replace(\"POSS\", \"POSSESSION\")\n                new_strings.append(new_string)\n            description = new_strings\n        if 'POSS' and \"OF\" and \"HANDGUN\" in description:\n            description = \"UNLAWFUL\u00a0POSSESSION\u00a0HANDGUN\"\n        if str(description) in description_dictionary:\n            description_dictionary[str(description)] = description_dictionary[str(description)]+1\n        else: \n            description_dictionary[str(description)] = 1\n            result = description_dictionary.pop(\"key\", None)\n    sorted_description_list = sortWordCountDict(description_dictionary)\n    return sorted_description_list\n","c9b3a57c":"research_tuples = [\n    (8,\"BURGLARY\"),\n    (8,\"WEAPONS VIOLATION\"),\n    (8,\"MOTOR VEHICLE THEFT\"),\n    (8,\"CRIMINAL SEXUAL ASSAULT\"),\n    (8,\"PUBLIC PEACE VIOLATION\")\n    ]\n\nfor (area, crimetype) in research_tuples: \n    area_dataset = dataset_2[dataset_2['community_area']==area]\n    area_and_type = dataset_2[dataset_2['primary_type']==crimetype].reset_index()\n    area_description_list = createDescriptionCountDict(area_and_type)\n    title = crimetype +' crime description distribution in area '+ str(area) + ' the past two years'\n    plotTopTen(area_description_list,'b', title)","78c7f6bb":"def cleanWordCountDictAll(dictionary):\n    sorted_description_list = dictionary.items() \n    sorted_description_list_stripped=[]\n    not_relevant = [\"NON\", \"OTHER\", \"LOT\", \"SMALL\"] #Lot is present in parking lot and a few other descriptions\n    for item in sorted_description_list: \n        if item[0] == \"RESID\": \n            item = ('RESIDENCE', item[1])\n        if item[0] == \"PARKING\" or item[0] == \"CHA\": \n            item = ('PARKING LOT', item[1])\n        if item[0] in [\"RETAIL\",\"GROCERY\",\"CONVENIENCE\"] : \n            item = ('STORE', item[1])\n        if item[0] == \"PUBLIC\": \n            item = ('PUBLIC AREA', item[1])\n        if item[0] == \"NURSING\":   \n            item = ('NURSING HOME', item[1])\n        if item[0] == \"COMMERCIAL\":   \n            item = ('COMMERCIAL BUSINESS OFFICE', item[1])\n        if item[0] == \"DEPARTMENT\":   \n            item = ('DEPARTMENT STORE', item[1])\n        if item[0] == \"RESIDENTIAL\":   \n            item = ('RESIDENTIAL YARD', item[1])\n        if item[0] == \"GAS\":   \n            item = ('GAS STATION', item[1])\n        if item[0] == \"VACANT\":   \n            item = ('VACANT LOT\/LAND', item[1])\n        if item[0] == \"CTA\":   \n            item = ('CTA TRAIN\/PLATFORM', item[1]) \n        if item[0] == \"CURRENCY\":   \n            item = ('CURRENCY EXCHANGE', item[1]) \n        if len(item[0])>2 and (item[0] not in not_relevant):\n            sorted_description_list_stripped.append(item)\n\n    sorted_description_dict_stripped = dict(sorted_description_list_stripped)\n    sorted_description_list_2 = sorted(sorted_description_dict_stripped.items(), key=lambda x: x[1], reverse=True)  \n    return dict(sorted_description_list_2)","4bd60f97":"import matplotlib.pyplot as plt\n\nareaList = [8, 25, 26, 44, 49, 53, 67,68, 69]\ncrimetypes = [\"WEAPONS VIOLATION\", \"BURGLARY\", \"MOTOR VEHICLE THEFT\"]\ntype_list = []\ntotal_crimes_list =[]\nindices = np.arange(len(areaList))\nwidth = 0.8\n\nfor t in crimetypes:\n    type_list.append([])\nfor area in areaList: \n    dataset_lately['in_area'] = dataset_lately['community_area'].apply(lambda x: x==area)\n    area_crimes = dataset_lately[dataset_lately['in_area']].reset_index()\n    total_crimes_list.append(len(area_crimes))\n    for i in range(len(crimetypes)): \n        crimes = area_crimes[area_crimes['primary_type']==crimetypes[i]]\n        type_list[i].append(len(crimes))\n\nplt.bar(indices, total_crimes_list, width=width*0.5, color='c', label='TotalCrimes')\nplt.bar([i+0.3*width for i in indices],type_list[0],width=width*0.35, color='r', alpha=0.6, label='Weapon violations')\nplt.bar([i-0.3*width for i in indices],type_list[1],width=width*0.35, color='b', alpha=0.6, label='Burglary')\nplt.bar([i+0.01*width for i in indices],type_list[2],width=width*0.35, color='g', alpha=0.8, label='Motor vehicle theft')\nplt.xticks(indices+width\/2.,areaList )\nplt.xticks(indices, areaList)\nplt.xlabel(\"Community area\")\nplt.ylabel(\"Number of crimes\")\nplt.tight_layout()\nplt.title(\"Crimes per area\")\nplt.legend()\nplt.show()\n","64594e9c":"#Total number of crimes per year\ntotal_crimes_per_year= dataset.groupby('year')['year'].count()\ntotal_crimes_per_year.plot(kind='bar', title='Number of crimes per year', color='c')","ec2a9ff5":"#Dataframe containing crimes occuring close to schools\ndataset['school_crime'] = dataset['location_description'].apply(lambda x: \"SCHOOL\" in str(x).upper())\nschool_crimes = dataset[dataset['school_crime']]\nschool_crimes.head()","84ab5a5a":"schoolcrimes_per_year = school_crimes.groupby('year')['year'].count()\nschoolcrimes_per_year.plot(kind='bar', color='r', alpha=0.5, title= \"Crimes in school areas\")","7367d7df":"import matplotlib.pyplot as plt\n\nyears = total_crimes_per_year.index.tolist()\nindices = np.arange(len(years))\nwidth = 0.8\n\nplt.bar(indices, total_crimes_per_year, width=width*0.5, color='c', label='TotalCrimes')\nplt.bar([i+0.25*width for i in indices],schoolcrimes_per_year,width=width*0.8, color='r', alpha=0.5, label='SchoolCrimes')\nplt.xticks(indices+width\/2.,years )\nplt.xticks(indices, years)\nplt.tight_layout()\nplt.title(\"Crimes per year\")\nplt.legend()\nplt.show()","4954cc2b":"school_crimes['not_2020'] = school_crimes['year'].apply(lambda x: x < 2020)\nschool_crimes_prophet = school_crimes[school_crimes['not_2020']]\nprint(\"Nr of total schoolcrimes: \" + str(len(school_crimes)))\nprint(\"Nr of schoolcrimes before 2020: \" + str(len(school_crimes_prophet)))\nschool_crimes_prophet.head()","e30338e2":"from datetime import datetime\nschoolcrimes_per_date = school_crimes_prophet.groupby('date')['date'].count()\nprophet_df = pd.DataFrame([schoolcrimes_per_date.index, schoolcrimes_per_date.values]).transpose()\nprophet_df.rename(columns={0:'ds', 1:'y'}, inplace=True)\nprophet_df.head(3)","3a5a6dbc":"from fbprophet import Prophet\n\nm = Prophet()\nm.fit(prophet_df)\nfuture = m.make_future_dataframe(periods=365)\nforecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","98004dc4":"forecast_figure = m.plot(forecast)","d3551147":"\ncomponent_figure = m.plot_components(forecast)\ncomponent_figure.suptitle('School crime trends', fontsize=16)\n\n","766dc42e":"# **School crime analyzis from total crimes **","0e128542":"# **Top areas per top crimes**","4fef0a35":"# **Location Description Analysis**"}}