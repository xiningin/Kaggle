{"cell_type":{"c68c8432":"code","ecea8ad6":"code","5567893e":"code","2159e073":"code","4b05843c":"code","6fd3abe8":"code","28938c31":"code","9971a918":"code","34b4e7e9":"code","c2fc7e64":"code","a568650b":"code","810ce73a":"code","c897fd1c":"code","82f39b5b":"code","41632eb6":"code","99606cb6":"code","06b34a56":"code","c55ef95b":"code","24f7130b":"code","dd85b9d1":"code","243a6ca7":"code","6f006c30":"code","42e975b8":"markdown","d55d54d5":"markdown","fa105eaa":"markdown","27f1bdf8":"markdown","9bcb8cbf":"markdown","de759e53":"markdown","ceeaeae3":"markdown","f0b6bec8":"markdown","2fb068ac":"markdown","e8d11a51":"markdown","87955e67":"markdown","ec3f99d2":"markdown","1fb6e4dd":"markdown","d9f3226a":"markdown","27301842":"markdown","260b1f56":"markdown","1d6dc7bf":"markdown","45fc6ec2":"markdown","780c2d6a":"markdown","4edb90a2":"markdown","48eaf9f5":"markdown"},"source":{"c68c8432":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV,RidgeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV,train_test_split\nfrom sklearn.metrics import accuracy_score \nimport matplotlib.pyplot as plt","ecea8ad6":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","5567893e":"train.head(7)","2159e073":"plt.figure(figsize=(12, 7));\nplt.subplot(2, 2, 1)\nsns.countplot(x='Survived', hue='Pclass', data=train, palette=\"husl\");\nplt.subplot(2, 2, 2)\nsns.countplot(x='Survived', hue='Sex', data=train, palette=\"husl\");\nplt.subplot(2, 2, 3)\nsns.countplot(x='Survived', hue='Embarked', data=train, palette=\"husl\"); \nplt.subplot(2, 2, 4)\nsns.countplot(x='Survived', hue='Parch', data=train, palette=\"husl\");","4b05843c":"train.isna().sum()","6fd3abe8":"Titanic = train.copy()\nSurvived = Titanic.pop('Survived')","28938c31":"Titanic.Cabin = Titanic.Cabin.fillna('None')\nTitanic.Embarked = Titanic.Embarked.fillna(str(Titanic.Embarked.mode()))","9971a918":"Mrs = []\nMiss = []\nMaster = []\nfor i in range(0,len(train.Name)):\n    if train.Name[i].find('Mrs. ') != -1:\n        Mrs.append(i)\n    elif train.Name[i].find('Miss') != -1:\n        Miss.append(i)\n    elif train.Name[i].find('Master') != -1:\n        Master.append(i)","34b4e7e9":"Titanic_test = test.copy()\n\nMrs_test = []\nMiss_test = []\nMaster_test = []\nfor i in range(0,len(test.Name)):\n    if test.Name[i].find('Mrs. ') != -1:\n        Mrs_test.append(i)\n    elif (test.Name[i].find('Miss') != -1) | (test.Name[i].find('Ms') != -1):\n        Miss_test.append(i)\n    elif test.Name[i].find('Master') != -1:\n        Master_test.append(i)","c2fc7e64":"print('train dataset shape is {}'.format(train.shape))\nprint('test dataset shape is {}'.format(test.shape))","a568650b":"Mrs1_mid = Titanic[(Titanic.index.isin(Mrs))&(Titanic.Pclass==1)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Mrs_test))&(Titanic_test.Pclass==1)].Age.mean()*418\/1309\n\nMrs2_mid = Titanic[(Titanic.index.isin(Mrs))&(Titanic.Pclass==2)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Mrs_test))&(Titanic_test.Pclass==2)].Age.mean()*418\/1309\n\nMrs3_mid = Titanic[(Titanic.index.isin(Mrs))&(Titanic.Pclass==3)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Mrs_test))&(Titanic_test.Pclass==3)].Age.mean()*418\/1309\n\nMis1_mid = Titanic[(Titanic.index.isin(Miss))&(Titanic.Pclass==1)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Miss_test))&(Titanic_test.Pclass==1)].Age.mean()*418\/1309\n\nMis2_mid = Titanic[(Titanic.index.isin(Miss))&(Titanic.Pclass==2)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Miss_test))&(Titanic_test.Pclass==2)].Age.mean()*418\/1309\n\nMis3_mid = Titanic[(Titanic.index.isin(Miss))&(Titanic.Pclass==3)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Miss_test))&(Titanic_test.Pclass==3)].Age.mean()*418\/1309\n\nMas1_mid = Titanic[(Titanic.index.isin(Master))&(Titanic.Pclass==1)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Master_test))&(Titanic_test.Pclass==1)].Age.mean()*418\/1309\n\nMas2_mid = Titanic[(Titanic.index.isin(Master))&(Titanic.Pclass==2)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Master_test))&(Titanic_test.Pclass==2)].Age.mean()*418\/1309\n\nMas3_mid = Titanic[(Titanic.index.isin(Master))&(Titanic.Pclass==3)].Age.mean()*891\/1309 + Titanic_test[(Titanic_test.index.isin(Master_test))&(Titanic_test.Pclass==3)].Age.mean()*418\/1309","810ce73a":"pd.options.mode.chained_assignment = None\nfor i in Mrs:\n    if Titanic.Age[i] != Titanic.Age[i]:\n        if Titanic.Pclass[i]==1:\n            Titanic.Age.loc[i] = Mrs1_mid\n        elif Titanic.Pclass[i]==2:\n            Titanic.Age.loc[i] = Mrs2_mid\n        elif Titanic.Pclass[i]==3:\n            Titanic.Age.loc[i] = Mrs3_mid\n\nfor i in Miss:\n    if Titanic.Age[i] != Titanic.Age[i]:\n        if Titanic.Pclass[i]==1:\n            Titanic.Age.loc[i] = Mis1_mid\n        elif Titanic.Pclass[i]==2:\n            Titanic.Age.loc[i] = Mis2_mid\n        elif Titanic.Pclass[i]==3:\n            Titanic.Age.loc[i] = Mis3_mid\n\nfor i in Master:\n    if Titanic.Age[i] != Titanic.Age[i]:\n        if Titanic.Pclass[i]==1:\n            Titanic.Age.loc[i] = Mas1_mid\n        elif Titanic.Pclass[i]==2:\n            Titanic.Age.loc[i] = Mas2_mid\n        elif Titanic.Pclass[i]==3:\n            Titanic.Age.loc[i] = Mas3_mid","c897fd1c":"TitanicMale = Titanic[(Titanic.Sex=='male')].drop([x for x in Master],axis=0)\nTitanicMaleTest = Titanic_test[(Titanic_test.Sex=='male')].drop([x for x in Master_test],axis=0)\n\nMr1_mid = TitanicMale[(TitanicMale.Pclass==1)].Age.mean()*891\/1309 + TitanicMaleTest[(TitanicMaleTest.Pclass==1)].Age.mean()*418\/1309\nMr2_mid = TitanicMale[(TitanicMale.Pclass==2)].Age.mean()*891\/1309 + TitanicMaleTest[(TitanicMaleTest.Pclass==2)].Age.mean()*418\/1309\nMr3_mid = TitanicMale[(TitanicMale.Pclass==3)].Age.mean()*891\/1309 + TitanicMaleTest[(TitanicMaleTest.Pclass==3)].Age.mean()*418\/1309\n\nfor i in TitanicMale.index:\n    if Titanic.Age[i] != Titanic.Age[i]:\n        if Titanic.Pclass[i]==1:\n            Titanic.Age.loc[i] = Mr1_mid\n        elif Titanic.Pclass[i]==2:\n            Titanic.Age.loc[i] = Mr2_mid\n        elif Titanic.Pclass[i]==3:\n            Titanic.Age.loc[i] = Mr3_mid","82f39b5b":"Titanic.isna().sum()","41632eb6":"Titanic = Titanic.drop(['Name','Ticket'],axis=1)\nfor column in Titanic.select_dtypes(\"object\"):\n    Titanic[column],_ = Titanic[column].factorize()","99606cb6":"Score = pd.read_csv('..\/input\/d\/anastasiyaefimova\/titanic\/Score.csv')\nScore","06b34a56":"x_train, x_test, y_train, y_test = train_test_split(Titanic, Survived,\n                                                    test_size=0.3, random_state=42)\nLRi = RidgeClassifier(alpha=47,max_iter=10000,random_state=42)\nparams={'fit_intercept':[True, False]}\ngrid = GridSearchCV(LRi, params)\ngrid.fit(x_train,y_train)\ny_pred = grid.predict(x_test)\nprint(grid.score(x_train,y_train))\nprint(accuracy_score(y_test, y_pred))","c55ef95b":"TitSex = pd.get_dummies(train.Sex, prefix=\"Sex\")\nTitanic1 = Titanic.drop(['Sex'],axis=1).merge(TitSex,left_index=True, right_index=True)\nTitanic1 = Titanic1.merge(pd.Series(Titanic1.Sex_female\/Titanic1.Pclass,name='MulFemale'),left_index=True, right_index=True)\nTitanic1 = Titanic1.merge(pd.Series(Titanic1.Sex_male\/Titanic1.Pclass,name='MulMale'),left_index=True, right_index=True)","24f7130b":"Score1 = pd.read_csv('..\/input\/d\/anastasiyaefimova\/titanic\/Score1.csv')\nScore1","dd85b9d1":"x_train, x_test, y_train, y_test = train_test_split(Titanic1, Survived,\n                                                    test_size=0.3, random_state=42)\nLR = LogisticRegression(C=20,max_iter=10000,random_state=42)\nparams={'fit_intercept':[True, False]}\ngrid = GridSearchCV(LR, params)\ngrid.fit(x_train,y_train)\ny_pred = grid.predict(x_test)\nprint(grid.score(x_train,y_train))\nprint(accuracy_score(y_test, y_pred))","243a6ca7":"Titanic_test.Cabin = Titanic_test.Cabin.fillna('None')\nTitanic_test.Fare = Titanic_test.Fare.fillna(7.75)\n\nfor i in Mrs_test:\n    if Titanic_test.Age[i] != Titanic_test.Age[i]:\n        if Titanic_test.Pclass[i]==1:\n            Titanic_test.Age.loc[i] = Mrs1_mid\n        elif Titanic_test.Pclass[i]==2:\n            Titanic_test.Age.loc[i] = Mrs2_mid\n        elif Titanic_test.Pclass[i]==3:\n            Titanic_test.Age.loc[i] = Mrs3_mid\n\nfor i in Miss_test:\n    if Titanic_test.Age[i] != Titanic_test.Age[i]:\n        if Titanic_test.Pclass[i]==1:\n            Titanic_test.Age.loc[i] = Mis1_mid\n        elif Titanic_test.Pclass[i]==2:\n            Titanic_test.Age.loc[i] = Mis2_mid\n        elif Titanic_test.Pclass[i]==3:\n            Titanic_test.Age.loc[i] = Mis3_mid\n\nfor i in Master_test:\n    if Titanic_test.Age[i] != Titanic.Age[i]:\n        if Titanic_test.Pclass[i]==1:\n            Titanic_test.Age.loc[i] = Mas1_mid\n        elif Titanic_test.Pclass[i]==2:\n            Titanic_test.Age.loc[i] = Mas2_mid\n        elif Titanic_test.Pclass[i]==3:\n            Titanic_test.Age.loc[i] = Mas3_mid\n            \nfor i in TitanicMaleTest.index:\n    if Titanic_test.Age[i] != Titanic_test.Age[i]:\n        if Titanic_test.Pclass[i]==1:\n            Titanic_test.Age.loc[i] = Mr1_mid\n        elif Titanic_test.Pclass[i]==2:\n            Titanic_test.Age.loc[i] = Mr2_mid\n        elif Titanic_test.Pclass[i]==3:\n            Titanic_test.Age.loc[i] = Mr3_mid\n            \nTitanic_test = Titanic_test.drop(['Name','Ticket'],axis=1)\n\nfor column in Titanic_test.select_dtypes(\"object\"):\n    Titanic_test[column],_ = Titanic_test[column].factorize()\n    \nTitSexTest = pd.get_dummies(test.Sex, prefix=\"Sex\")\nTitanic_test = Titanic_test.drop(['Sex'],axis=1).merge(TitSexTest,left_index=True, right_index=True)\nTitanic_test = Titanic_test.merge(pd.Series(Titanic_test.Sex_female\/Titanic_test.Pclass,name='MulFemale'),left_index=True, right_index=True)\nTitanic_test = Titanic_test.merge(pd.Series(Titanic_test.Sex_male\/Titanic_test.Pclass,name='MulMale'),left_index=True, right_index=True)","6f006c30":"Prediction = grid.predict(Titanic_test)\nPrediction = pd.DataFrame(Prediction,index=Titanic_test.PassengerId,columns=['Survived'])\nPrediction.to_csv('submission.csv')","42e975b8":"# Data preparation\nI have not seen any way to fill NaNs in Cabin on condition there are so much of them. So I have used fillna method and replaced NaNs with 'None'. I have filled Embarked with mode value. I have filled Age depending on passenger's Pclass and 'title'.","d55d54d5":"We can see that we have NaNs in this dataset. Check how much and what features.","fa105eaa":"We can make sure that train and test sets have various number of samples, so we need to multiply mean Age of each dataset by appropriate coefficients. ","27f1bdf8":"After that I have decided to do more data preparation and use get_dummies to make two columns from Sex feature. Besides I have divided each of the obtained columns to Pclass feature since these ones are the most important as we concluded from plots above. I have tried another ways of interactions of these two features (multiply, sum, Pclass get_dummies), but only division makes improvement.","9bcb8cbf":"Time to replace Nans with calculated values.","de759e53":"As we can see in Name feature of our dataset there are different 'titles' for women - 'Mrs' and 'Miss'. Likely If we divide women in two such groups we will get different mean age, as 'Mrs' means married so such female must be older. Also there are a few of males who have 'Master' in their 'titles'. Master is an English honorific for boys and young men, therefore such males must be younger too.\nLet's save indexes of samples with 'Mrs', 'Miss', 'Master' in their Name feature in three different lists.","ceeaeae3":"Now we don't have a need in Name and Ticket features of Titanic dataset, so I drop these. And make hot coding for 'object' type columns.","f0b6bec8":"Our train dataset has 12 feaches.","2fb068ac":"# **Introduction**\nThis solution was done without reading any other peoples' notebooks. It is very easy and need only the elementary knowledges of ML and most common Python libraries for such ML tasks. I have been learning Data Science for just half a year and I have done this solution in only two days, so anybody is able to understand it. But of course there are ways to improve this solution.","e8d11a51":"I have used 4 diffrent algorithms for this analysis:\n* LogisticRegression;\n* Ridge;\n* RandomForest;\n* GradientBoosting.\n\nThe method of measuring accuracy was chosen to be accuracy_score, as described within the competition.\n","87955e67":"I have done some subplots to understand the Survived feature distribution in dependency of other features.\n\nAccording to received plots I understand that Pclass and Sex have strong influence on Survived feature (target). As we see most of the women have survived and passengers from first and second class had much more chances than passengers from third class.","ec3f99d2":"I calculate mean age for each Pclass depending on passenger's 'title'.","1fb6e4dd":"Besides, I have decided to add entries from test dataset to make my mean Age using information from more passengers.","d9f3226a":"I do all the same with other passengers which are males but not 'Master'.","27301842":"# Conclusion\nHere is the end of my solution. Thank you for reading. As you can see my solution has only 4 steps of data preparation and requires elementary knowledges and some help about Python syntax on Internet. I was so suprised to get Top 7% after just two days of working on this task, on condition I have only little practice. That's make me realize how great and amazing Machine Learning and Data Science is.\nWish you good luck in this and other Kaggle competitions.\n","260b1f56":"# Import packages & load data\nThe first step is to import needable libraries and instruments. The second - to load our data.","1d6dc7bf":"The accuracy was improved, so we leave this changes. And do the same data preparation for test dataset. ","45fc6ec2":"Lets check if we do not have any Nans anymore.","780c2d6a":"# Modeling","4edb90a2":"Everything is ready to make prediction.","48eaf9f5":"Modeling with modified dataset."}}