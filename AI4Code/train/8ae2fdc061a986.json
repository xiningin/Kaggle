{"cell_type":{"0b3606e4":"code","6a024154":"code","3c579411":"code","5fafa992":"code","40586811":"code","55bbc3df":"code","8bb82bbd":"code","89c06954":"code","41c463a6":"code","2aa48ed1":"code","af245086":"code","b09f530d":"code","16a40222":"code","c1903594":"code","e722442c":"code","4c465ef9":"code","6c09aa30":"code","83832ddf":"code","8c38b04b":"code","ecd81afd":"code","34fd7794":"code","51af6004":"code","4f233439":"code","b6fed126":"code","a4caec50":"code","b137a3ee":"code","6c366778":"code","345f0111":"code","836a767c":"code","be1805f1":"code","f092fb1e":"code","fbe234be":"code","40915162":"code","83a7a0be":"code","f8466ffd":"code","aca32298":"code","1682e767":"markdown","378bea31":"markdown","7e45bc26":"markdown","8621a9a2":"markdown","5696fdec":"markdown","3e8d2f0e":"markdown","e4ad0f2d":"markdown","a7c7cb98":"markdown","50d80f1d":"markdown","c728689d":"markdown","5a7d33b2":"markdown","e5a41b8e":"markdown","87c4ee15":"markdown","54bf604d":"markdown","3d73d96a":"markdown"},"source":{"0b3606e4":"from time import time\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom scipy.stats import chi2_contingency\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","6a024154":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3c579411":"train_df = pd.read_csv(r'\/kaggle\/input\/network-intrusion-detection\/Train_data.csv')\ntest_df = pd.read_csv(r'\/kaggle\/input\/network-intrusion-detection\/Test_data.csv')","5fafa992":"print(\"Train dataset shape - \",train_df.shape)\nprint(\"Test dataset shape - \",test_df.shape)","40586811":"pd.set_option('display.max_columns', None)\ntrain_df.head()","55bbc3df":"test_df.head()","8bb82bbd":"train_df.info()","89c06954":"t0 = time()\nprint(train_df.groupby('protocol_type')['protocol_type'].count())\ntime() - t0","41c463a6":"t0 = time()\npd.set_option('display.max_row', None)\nprint(train_df.groupby('class')['class'].count())\ntime() - t0","2aa48ed1":"t0 = time()\nprint(train_df.groupby('flag')['flag'].count())\ntime() - t0","af245086":"col_names = train_df.columns","b09f530d":"type(col_names)","16a40222":"num_cols = col_names.drop(['protocol_type', 'flag', 'service'])","c1903594":"corr_df = train_df[num_cols].corr()\nsns.heatmap(corr_df)","e722442c":"train_df['num_outbound_cmds'].unique()","4c465ef9":"train_df.drop('num_outbound_cmds', axis = 1, inplace = True)","6c09aa30":"highly_correlated_df = (corr_df.abs() > 0.9) & (corr_df.abs() < 1.0) ","83832ddf":"corr_var_index = (highly_correlated_df == True).any()\ncorr_var_names = corr_var_index[corr_var_index == True].index\n\nde_duplicate = []\ncorr_pairs = []\n\nfor i in corr_var_index.index:\n    row = highly_correlated_df[i]\n    de_duplicate.append(i)\n    for j in corr_var_names:\n        if j not in de_duplicate and row[j] == True:\n            print(i,j,\": \", corr_df.loc[i,j])\n            corr_pairs.append((i,j))\n\n","8c38b04b":"train_df.drop(['num_root', 'srv_serror_rate', 'dst_host_serror_rate', 'dst_host_srv_serror_rate',\n              'dst_host_rerror_rate', 'dst_host_srv_rerror_rate'], axis = 1, inplace = True)","ecd81afd":"train_df.info()","34fd7794":"categorical_columns = ['protocol_type', 'service', 'flag']","51af6004":"train_df[categorical_columns].head()","4f233439":"label_encoder = preprocessing.LabelEncoder()\ntrain_df['protocol_type'] = label_encoder.fit_transform(train_df['protocol_type'])\ntrain_df['service'] = label_encoder.fit_transform(train_df['service'])\ntrain_df['flag'] = label_encoder.fit_transform(train_df['flag'])\ntrain_df['class'] = label_encoder.fit_transform(train_df['class'])","b6fed126":"train_df[categorical_columns].head()","a4caec50":"#p value is 0.0 which is less than significant value. Hence service and class are not independent\nchi2_contingency(pd.crosstab(train_df['service'], train_df['class']))","b137a3ee":"#P value is 0.0 which is less than significant value. Hence flag and class are not independent\nchi2_contingency(pd.crosstab(train_df['flag'], train_df['class']))","6c366778":"#p value is 0.0 which is less than significant value. Hence service and class features are not independent.\nchi2_contingency(pd.crosstab(train_df['service'], train_df['class']))","345f0111":"Y = train_df['class']\ntrain_df.drop('class', axis=1, inplace = True)","836a767c":"\nX_train, X_valid, Y_train, Y_valid = model_selection.train_test_split(train_df, Y, test_size = 0.3)","be1805f1":"model = LogisticRegression()\nmodel = model.fit(X_train, Y_train)","f092fb1e":"pred = model.predict(X_valid)","fbe234be":"metrics.confusion_matrix(Y_valid, pred)","40915162":"metrics.f1_score(Y_valid, pred)","83a7a0be":"test_df.drop('num_outbound_cmds', axis = 1, inplace = True)\ntest_df.drop(['num_root', 'srv_serror_rate', 'dst_host_serror_rate', 'dst_host_srv_serror_rate',\n              'dst_host_rerror_rate', 'dst_host_srv_rerror_rate'], axis = 1, inplace = True)\ntest_df['protocol_type'] = label_encoder.fit_transform(test_df['protocol_type'])\ntest_df['service'] = label_encoder.fit_transform(test_df['service'])\ntest_df['flag'] = label_encoder.fit_transform(test_df['flag'])\n\n","f8466ffd":"test_df.head()","aca32298":"model.predict(test_df)","1682e767":"Split the data into 70:30.","378bea31":"Test data should pass through the same preprocessing steps as training data before prediction","7e45bc26":"Perform Chi-Square test to check whether categorical features depend on the output value or not. Before that we need to encode the categorical features","8621a9a2":"# Training the model","5696fdec":"# Predicting for test data","3e8d2f0e":"Exploratory analysis","e4ad0f2d":"Find the feature that are highly correlated and drop one feature from highly correlated feature","a7c7cb98":"# Statistical based feature selection","50d80f1d":"From the heatmap, we can notice that correlation for num_outbounds_cmds with other features is constant","c728689d":"# Split data for training and validation of model","5a7d33b2":"We reached to the end by predicting the network intrusion type for the test data","e5a41b8e":"Notice that only protocol_type, service, flag and class are object type and the rest columns are numerical type","87c4ee15":"To calculate chi square test we need to contigency table. At first we consider protocol_type and class. Let's take the significant value be 0.05","54bf604d":"num_outbound_cmds coulmn has 0 values for all records, so we can drop this column","3d73d96a":"Notice that we dont have class column in test dataset, because we need to predict for the test dataset"}}