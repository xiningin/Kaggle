{"cell_type":{"ad2828ef":"code","5d0bf946":"code","de93a0f1":"code","25588871":"code","36966ef8":"code","cd5dc5c3":"code","7dd87b59":"code","960a6a80":"code","3b9c89d6":"code","7dc7e10b":"code","2ba5e8a4":"code","6f09b06f":"code","7ed807f0":"code","bc341648":"code","a179ef2c":"code","49cff92b":"code","d8c156ec":"code","086cf770":"code","9c9d5bd4":"code","1dbd6847":"code","e5511b0a":"code","5f5b2834":"code","0c82f547":"code","1359e56c":"code","c3931b16":"code","df56b113":"code","f9f722ba":"code","ae3e45f9":"code","d77118e0":"code","dad46954":"code","ec617ae9":"code","70ecb257":"code","ea5eaee5":"code","5f6a186b":"code","69ca68ce":"code","e917e1d0":"code","3668611d":"code","8b6d371e":"code","82f4dafc":"code","7801d82b":"code","ee76b854":"code","b3dddf83":"code","e85ee58a":"code","8e35b18e":"code","ce730e3c":"code","674b1a2b":"code","10bcaebb":"code","86babb30":"code","dd5fad77":"code","6134fcfa":"code","b3eec221":"code","66500405":"code","285304f5":"code","ad7bc856":"code","1ccecf61":"code","8f4538ca":"code","b334f4a2":"code","fd936a95":"code","fcf018cf":"code","c8e47196":"code","2636320f":"code","eb33e7a3":"code","a0350feb":"code","e62bbcaa":"code","80ac0cfb":"code","f2ab2b14":"code","59720743":"code","7314c801":"code","b4cb5718":"code","c74c9a1a":"code","2b880069":"code","43fca145":"code","2733ff34":"code","00e57023":"code","8a0a04e6":"code","7a950d53":"code","daa14428":"code","264e495e":"code","a8c37712":"code","286ea29f":"code","c610e601":"code","0fccf8dc":"code","55cdb4ef":"code","0402218b":"code","3a8af831":"markdown","da54ca2f":"markdown","a90cf49e":"markdown","a2317618":"markdown","e0b997cd":"markdown","b8994946":"markdown","522caaa0":"markdown","e4638e4f":"markdown","0a1dcf2d":"markdown"},"source":{"ad2828ef":"from fastai.vision import *","5d0bf946":"from fastai.callbacks import *","de93a0f1":"path = Path('.')\ndatapath=path\/'..\/input\/digit-recognizer'\ntrain_csv = datapath\/'train.csv'\ntest_csv = datapath\/'test.csv'","25588871":"data = pd.read_csv(train_csv)","36966ef8":"y = data.label.values\nX = torch.tensor(data.drop('label', axis = 1).values)","cd5dc5c3":"rand_idx = torch.randperm(X.shape[0])\nsplit_ratio = 0.8\nsplit = int(X.shape[0] * split_ratio)\ntrain_idxs = rand_idx[:split]\ntest_idxs  = rand_idx[split:]\n\nX_train = X[train_idxs]\nX_valid = X[test_idxs]\ny_train = y[train_idxs]\ny_valid = y[test_idxs]\nX_train.shape, X_valid.shape","7dd87b59":"def tensor2Images(x,channels=3):\n    assert channels == 3 or channels == 1, \"Channels: 1 - mono, or 3 - RGB\"\n    return [Image(x[i].reshape(-1,28,28).repeat(channels, 1, 1)\/255.) for i in range(x.shape[0])]","960a6a80":"class MNISTImageList(ImageList):\n    \"`ImageList` of Images stored as in `items` as tensor.\"\n\n    def open(self, fn):\n        \"No file associated to open\"\n        pass\n\n    def get(self, i):\n        res = self.items[i]\n        self.sizes[i] = sys.getsizeof(res)\n        return res","3b9c89d6":"til = MNISTImageList(tensor2Images(X_train,3))","7dc7e10b":"til[0]","2ba5e8a4":"train_ll = LabelList(MNISTImageList(tensor2Images(X_train,3)),CategoryList(y_train, ['0','1','2','3','4','5','6','7','8','9']))\nvalid_ll = LabelList(MNISTImageList(tensor2Images(X_valid,3)),CategoryList(y_valid, ['0','1','2','3','4','5','6','7','8','9']))","6f09b06f":"ll = LabelLists(path,train_ll,valid_ll)\nll","7ed807f0":"data = pd.read_csv(test_csv)\nXtest = torch.tensor(data.values)\ntest_il = ItemList(tensor2Images(Xtest))","bc341648":"ll.add_test(test_il)","a179ef2c":"assert len(ll.train.x)==len(ll.train.y)\nassert len(ll.valid.x)==len(ll.valid.y)","49cff92b":"tfms = get_transforms(do_flip=False)","d8c156ec":"dbch = ImageDataBunch.create_from_ll(ll, bs=128, val_bs=256, ds_tfms=tfms)","086cf770":"dbch.sanity_check()","9c9d5bd4":"dbch.show_batch(rows=3, figsize=(4,4))","1dbd6847":"learn = cnn_learner(dbch,models.resnet50,metrics=accuracy,callback_fns=[CSVLogger,ShowGraph,SaveModelCallback])","e5511b0a":"learn.lr_find()\nlearn.recorder.plot()","5f5b2834":"learn.fit_one_cycle(10,max_lr=1e-2)","0c82f547":"learn.save('stage1')","1359e56c":"learn.unfreeze()","c3931b16":"learn.lr_find(start_lr=1e-9)\nlearn.recorder.plot()","df56b113":"learn.fit_one_cycle(10,max_lr=slice(1e-6,1e-5))","f9f722ba":"learn.load('bestmodel');","ae3e45f9":"learn.lr_find(start_lr=1e-9)\nlearn.recorder.plot()","d77118e0":"learn.fit_one_cycle(10,max_lr=slice(8e-6,3e-5))","dad46954":"learn.load('bestmodel');","ec617ae9":"learn.recorder.plot_metrics()","70ecb257":"learn.lr_find(start_lr=1e-10)\nlearn.recorder.plot()","ea5eaee5":"learn.fit_one_cycle(10,max_lr=slice(1e-8,2e-8))","5f6a186b":"learn.load('bestmodel');","69ca68ce":"learn.lr_find(start_lr=1e-10)\nlearn.recorder.plot()","e917e1d0":"learn.fit_one_cycle(10,max_lr=slice(1e-6,1e-5))","3668611d":"learn.load('bestmodel');","8b6d371e":"learn.show_results(ds_type=DatasetType.Train, rows=4, figsize=(6,8))","82f4dafc":"learn.summary()","7801d82b":"learn.export()","ee76b854":"learn.get_preds","b3dddf83":"# model = nn.Sequential(\n#         nn.Conv2d(784, 64, kernel_size=(3,3)),\n#         nn.ReLU(),\n#         nn.MaxPool2d((2,2)),\n#         nn.Dropout(0.5),\n#         nn.Conv2d(64, 32, kernel_size=(3,3)),\n#         nn.ReLU(),\n#         nn.MaxPool2d((2,2)),\n#         nn.Dropout(0.25),\n#         nn.Flatten(),\n#         nn.Linear(128,64),\n#         nn.Dropout(0.5),\n#         nn.Linear(64,10),\n#         nn.Softmax()    \n#     )","e85ee58a":"class Mish(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n    def forward(self, x):\n        return x *(torch.tanh(F.softplus(x)))","8e35b18e":"model = nn.Sequential(\n        nn.Flatten(),\n        nn.Linear(784, 128),\n        Mish(),\n        nn.BatchNorm1d(128),\n        nn.Dropout(0.25),\n        nn.Linear(128,64),\n        Mish(),\n        nn.BatchNorm1d(64),\n        nn.Dropout(0.25),\n        nn.Linear(64,32),\n        Mish(),\n        nn.BatchNorm1d(32),\n        nn.Dropout(0.25),\n        nn.Linear(32,10),\n        nn.Softmax(dim=1)    \n    )","ce730e3c":"model","674b1a2b":"opt_func = functools.partial(torch.optim.AdamW, betas=(0.9, 0.99))","10bcaebb":"learn = Learner(dbch, model, opt_func=opt_func, metrics=accuracy)","86babb30":"learn.summary()","dd5fad77":"learn.lr_find(start_lr=1e-8)\nlearn.recorder.plot()","6134fcfa":"learn.fit_one_cycle(10,max_lr=5e-2)","b3eec221":"learn.recorder.plot_losses()","66500405":"learn.lr_find(start_lr=1e-8)\nlearn.recorder.plot()","285304f5":"learn.fit_one_cycle(10,max_lr=1e-2)","ad7bc856":"learn.recorder.plot_metrics()","1ccecf61":"learn.lr_find()#start_lr=1e-8)\nlearn.recorder.plot()","8f4538ca":"learn.fit_one_cycle(10,max_lr=1e-3)","b334f4a2":"learn.recorder.plot_metrics()","fd936a95":"learn.recorder.plot_losses()","fcf018cf":"learn.lr_find()\nlearn.recorder.plot()","c8e47196":"learn.fit_one_cycle(20,max_lr=1e-3)","2636320f":"learn.recorder.plot_losses()","eb33e7a3":"learn.lr_find(start_lr=1e-9)\nlearn.recorder.plot()","a0350feb":"learn.fit_one_cycle(10,max_lr=1e-5)","e62bbcaa":"learn.recorder.plot_losses()","80ac0cfb":"learn.lr_find(start_lr=1e-9)\nlearn.recorder.plot()","f2ab2b14":"learn.fit_one_cycle(10,max_lr=1e-5)","59720743":"learn.recorder.plot_losses()","7314c801":"learn.fit_one_cycle(10,max_lr=1e-3)","b4cb5718":"learn.recorder.plot_metrics()228","c74c9a1a":"data = pd.read_csv(test_csv)\nXtest = torch.tensor(data.values)\ntest_il = ItemList(tensor2Images(Xtest))","2b880069":"test_il","43fca145":"test_il[0]","2733ff34":"learn = load_learner(path,test=test_il)","00e57023":"learn","8a0a04e6":"preds,y = learn.get_preds(ds_type=DatasetType.Test)","7a950d53":"y = preds.argmax(dim=1)","daa14428":"assert len(y)==len(test_il)","264e495e":"res = pd.DataFrame(y,columns=['Label'],index=range(1, 28001))","a8c37712":"res.index.name = 'ImageId'","286ea29f":"res.head()","c610e601":"import datetime\ntoday = datetime.datetime.today()","0fccf8dc":"t = today.strftime(\"%Y-%m-%d-%H.%M.%S\")","55cdb4ef":"res.to_csv(f'submission-{t}')","0402218b":"!ls","3a8af831":"## ResNet34","da54ca2f":"# My Digit Recognizer Kaggle competition\n### with Fastai v1","a90cf49e":"## Custom Model","a2317618":"#### Get LabelLists","e0b997cd":"#### Get ImageDataBunch from LabelLists","b8994946":"### Randomly Split onto Training and Validation sets","522caaa0":"# Inference","e4638e4f":"# Training","0a1dcf2d":"# Getting the Data from CSV into DataBunch"}}