{"cell_type":{"4e187a68":"code","b5bc6ea1":"code","d682685d":"code","a773b55c":"code","0562e128":"code","d7529bf0":"code","4c1d0a46":"code","4ade5fd8":"code","66c5c97d":"code","02e666a6":"code","9af91030":"code","b0306674":"code","0650ab32":"code","92020bd2":"code","c298798a":"markdown","ba2e75d6":"markdown","3faefde0":"markdown","acbb7614":"markdown","ede2a625":"markdown","183e556a":"markdown","b3ce895c":"markdown","022fe283":"markdown","54170aa4":"markdown","59ab4f28":"markdown","4a23d375":"markdown","e34458fb":"markdown","e8a3025e":"markdown","581a98fa":"markdown","cca46835":"markdown","0de29e1d":"markdown","fc2cfadb":"markdown","7ab2390f":"markdown","09422fc0":"markdown","caeaa78d":"markdown","bbcd902e":"markdown","921dade6":"markdown"},"source":{"4e187a68":"import sys\nimport requests\n# Trying to import BeautifulSoup\ntry:\n    from bs4 import BeautifulSoup\nexcept ImportError as e:\n    !{sys.executable} -m pip install beautifulsoup4\n    from bs4 import BeautifulSoup\nimport re\nimport unicodedata\nimport pandas as pd","b5bc6ea1":"def date_time(table_cells):\n    \"\"\"\n    This function returns the data and time from the HTML  table cell\n    Input: the  element of a table data cell extracts extra row\n    \"\"\"\n    return [data_time.strip() for data_time in list(table_cells.strings)][0:2]\n\ndef booster_version(table_cells):\n    \"\"\"\n    This function returns the booster version from the HTML  table cell \n    Input: the  element of a table data cell extracts extra row\n    \"\"\"\n    out=''.join([booster_version for i,booster_version in enumerate( table_cells.strings) if i%2==0][0:-1])\n    return out\n\ndef landing_status(table_cells):\n    \"\"\"\n    This function returns the landing status from the HTML table cell \n    Input: the  element of a table data cell extracts extra row\n    \"\"\"\n    out=[i for i in table_cells.strings][0]\n    return out\n\n\ndef get_mass(table_cells):\n    mass=unicodedata.normalize(\"NFKD\", table_cells.text).strip()\n    if mass:\n        mass.find(\"kg\")\n        new_mass=mass[0:mass.find(\"kg\")+2]\n    else:\n        new_mass=0\n    return new_mass\n\n\ndef extract_column_from_header(row):\n    \"\"\"\n    This function returns the landing status from the HTML table cell \n    Input: the  element of a table data cell extracts extra row\n    \"\"\"\n    if (row.br):\n        row.br.extract()\n    if row.a:\n        row.a.extract()\n    if row.sup:\n        row.sup.extract()\n        \n    colunm_name = ' '.join(row.contents)\n    \n    # Filter the digit and empty names\n    if not(colunm_name.strip().isdigit()):\n        colunm_name = colunm_name.strip()\n        return colunm_name    \n","d682685d":"static_url = \"https:\/\/en.wikipedia.org\/w\/index.php?title=List_of_Falcon_9_and_Falcon_Heavy_launches&oldid=1027686922\"","a773b55c":"# use requests.get() method with the provided static_url\n# assign the response to a object\npage = requests.get(static_url)\npage.status_code","0562e128":"# Use BeautifulSoup() to create a BeautifulSoup object from a response text content\nsoup = BeautifulSoup(page.text, 'html.parser')","d7529bf0":"# Use soup.title attribute\nsoup.title","4c1d0a46":"# Use the find_all function in the BeautifulSoup object, with element type `table`\n# Assign the result to a list called `html_tables`\nhtml_tables = soup.find_all('table')","4ade5fd8":"# Let's print the third table and check its content\nfirst_launch_table = html_tables[2]\nprint(first_launch_table)","66c5c97d":"column_names = []\ntemp = soup.find_all('th')\nfor x in range(len(temp)):\n    try:\n     name = extract_column_from_header(temp[x])\n     if (name is not None and len(name) > 0):\n        column_names.append(name) \n    except:\n     pass","02e666a6":"print(column_names)","9af91030":"launch_dict= dict.fromkeys(column_names)\n\n# Remove an irrelvant column\ndel launch_dict['Date and time ( )']\n\n\nlaunch_dict['Flight No.'] = []\nlaunch_dict['Launch site'] = []\nlaunch_dict['Payload'] = []\nlaunch_dict['Payload mass'] = []\nlaunch_dict['Orbit'] = []\nlaunch_dict['Customer'] = []\nlaunch_dict['Launch outcome'] = []\nlaunch_dict['Version Booster']=[]\nlaunch_dict['Booster landing']=[]\nlaunch_dict['Date']=[]\nlaunch_dict['Time']=[]","b0306674":"extracted_row = 0\n#Extract each table \nfor table_number,table in enumerate(soup.find_all('table',\"wikitable plainrowheaders collapsible\")):\n   # get table row \n    for rows in table.find_all(\"tr\"):\n        #check to see if first table heading is as number corresponding to launch a number \n        if rows.th:\n            if rows.th.string:\n                flight_number=rows.th.string.strip()\n                flag=flight_number.isdigit()\n        else:\n            flag=False\n        #get table element \n        row=rows.find_all('td')\n        #if it is number save cells in a dictonary \n        if flag:\n            extracted_row += 1\n            # Flight Number value\n      \n            launch_dict[\"Flight No.\"].append(flight_number)\n\n            datatimelist=date_time(row[0])\n            # Date value\n        \n            date = datatimelist[0].strip(',')\n            launch_dict[\"Date\"].append(date)\n    \n            \n            # Time value\n        \n            time = datatimelist[1]\n            launch_dict[\"Time\"].append(time)\n\n              \n            # Booster version\n\n            bv=booster_version(row[1])\n            if not(bv):\n                bv=row[1].a.string\n            launch_dict[\"Version Booster\"].append(bv)\n \n            \n            # Launch Site\n       \n            launch_site = row[2].a.string\n            launch_dict[\"Launch site\"].append(launch_site)\n\n            \n            # Payload\n  \n            payload = row[3].a.string\n            launch_dict[\"Payload\"].append(payload)\n\n            \n            # Payload Mass\n         \n            payload_mass = get_mass(row[4])\n            launch_dict[\"Payload mass\"].append(payload_mass)\n  \n            \n            # Orbit\n\n            orbit = row[5].a.string\n            launch_dict[\"Orbit\"].append(orbit)\n            \n            # Customer\n       \n            customer = row[6].a.string\n            launch_dict[\"Customer\"].append(customer)\n\n            # Launch outcome\n       \n            launch_outcome = list(row[7].strings)[0]\n            launch_dict[\"Launch outcome\"].append(launch_outcome)\n\n            \n            # Booster landing\n        \n            booster_landing = landing_status(row[8])\n            launch_dict[\"Booster landing\"].append(booster_landing)\n","0650ab32":"headings = []\nfor key,values in dict(launch_dict).items():\n    if key not in headings:\n        headings.append(key)\n    if values is None:\n        del launch_dict[key]\n\ndef pad_dict_list(dict_list, padel):\n    lmax = 0\n    for lname in dict_list.keys():\n        lmax = max(lmax, len(dict_list[lname]))\n    for lname in dict_list.keys():\n        ll = len(dict_list[lname])\n        if  ll < lmax:\n            dict_list[lname] += [padel] * (lmax - ll)\n    return dict_list\n\npad_dict_list(launch_dict,0)\n\ndf = pd.DataFrame.from_dict(launch_dict)\ndf.head()","92020bd2":"df.to_csv('spacex_web_scraped.csv', index=False)","c298798a":"Next, we just need to fill up the `launch_dict` with launch records extracted from table rows.\n","ba2e75d6":"## TASK 3: Create a data frame by parsing the launch HTML tables\n","3faefde0":"Next, we just need to iterate through the `<th>` elements and apply the provided `extract_column_from_header()` to extract column name one by one\n","acbb7614":"Next, we want to collect all relevant column names from the HTML table header\n","ede2a625":"```\n<tr>\n<th scope=\"col\">Flight No.\n<\/th>\n<th scope=\"col\">Date and<br\/>time (<a href=\"\/wiki\/Coordinated_Universal_Time\" title=\"Coordinated Universal Time\">UTC<\/a>)\n<\/th>\n<th scope=\"col\"><a href=\"\/wiki\/List_of_Falcon_9_first-stage_boosters\" title=\"List of Falcon 9 first-stage boosters\">Version,<br\/>Booster<\/a> <sup class=\"reference\" id=\"cite_ref-booster_11-0\"><a href=\"#cite_note-booster-11\">[b]<\/a><\/sup>\n<\/th>\n<th scope=\"col\">Launch site\n<\/th>\n<th scope=\"col\">Payload<sup class=\"reference\" id=\"cite_ref-Dragon_12-0\"><a href=\"#cite_note-Dragon-12\">[c]<\/a><\/sup>\n<\/th>\n<th scope=\"col\">Payload mass\n<\/th>\n<th scope=\"col\">Orbit\n<\/th>\n<th scope=\"col\">Customer\n<\/th>\n<th scope=\"col\">Launch<br\/>outcome\n<\/th>\n<th scope=\"col\"><a href=\"\/wiki\/Falcon_9_first-stage_landing_tests\" title=\"Falcon 9 first-stage landing tests\">Booster<br\/>landing<\/a>\n<\/th><\/tr>\n```\n","183e556a":"# **Space X  Falcon 9 First Stage Landing Prediction**\n","b3ce895c":"Starting from the third table is our target table contains the actual launch records.\n","022fe283":"Print the page title to verify if the `BeautifulSoup` object was created properly\n","54170aa4":"Check the extracted column names\n","59ab4f28":"Next, request the HTML page from the above URL and get a `response` object\n","4a23d375":"#### Author : Ashlin Darius Govindasamy","e34458fb":"First, let's perform an HTTP GET method to request the Falcon9 Launch HTML page, as an HTTP response.\n","e8a3025e":"Usually, HTML tables in Wiki pages are likely to contain unexpected annotations and other types of noises, such as reference links `B0004.1[8]`, missing values `N\/A [e]`, inconsistent formatting, etc.\n","581a98fa":"Create a `BeautifulSoup` object from the HTML `response`\n","cca46835":"We will create an empty dictionary with keys from the extracted column names in the previous task. Later, this dictionary will be converted into a Pandas dataframe\n","0de29e1d":"You should able to see the columns names embedded in the table header elements `<th>` as follows:\n","fc2cfadb":"### TASK 1: Request the Falcon9 Launch Wiki page from its URL\n","7ab2390f":"Let's try to find all tables on the wiki page first. If you need to refresh your memory about `BeautifulSoup`, please check the external reference link towards the end of this lab\n","09422fc0":"we will performing web scraping to collect Falcon 9 historical launch records from a Wikipedia page titled `List of Falcon 9 and Falcon Heavy launches`\n\nhttps:\/\/en.wikipedia.org\/wiki\/List_of_Falcon\\_9\\_and_Falcon_Heavy_launches\n","caeaa78d":"## Web scraping Falcon 9 and Falcon Heavy Launches Records from Wikipedia\n","bbcd902e":"### TASK 2: Extract all column\/variable names from the HTML table header\n","921dade6":"## Objectives\n\nWeb scrap Falcon 9 launch records with `BeautifulSoup`:\n\n*   Extract a Falcon 9 launch records HTML table from Wikipedia\n*   Parse the table and convert it into a Pandas data frame\n"}}