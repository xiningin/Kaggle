{"cell_type":{"5292750a":"code","ca3a30c0":"code","9a63ddf3":"code","74093564":"code","541571e2":"code","8d186913":"code","90c908b8":"code","052f73be":"code","38509faa":"code","ebe37e04":"code","8d748b13":"code","0cb7d3f2":"code","1ce931e7":"code","9d6b9838":"markdown","58669387":"markdown","49c9e885":"markdown","8b529c45":"markdown","9002c37d":"markdown","0e74a528":"markdown","84e42da7":"markdown","f4816009":"markdown","80b741cd":"markdown","4fbbd45c":"markdown","856b1b4a":"markdown","ba9be8c3":"markdown","f3a30b17":"markdown"},"source":{"5292750a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca3a30c0":"import os \n\n\n# Class stack\nclass Stack:\n    def __init__(self):\n        self.items = []\n       \n    # Memeriksa apakah stack kosong\n    def isEmpty(self):\n        return self.items == []\n    # Menambah objek\/data ke dalam stack\n    def push(self, item):\n        self.items.append(item)\n    # Mengeluarkan data dari stack\n    def pop(self):\n        return self.items.pop()\n    # Menampilkan objek terakhir dari stack\n    def peek(self):\n        return self.items[len(self.items)-1]\n    # Mehitung panjang stack\n    def size(self):\n        return len(self.items)\n   \n    # Menu dari aplikasi\n    def mainmenu(self):\n        pilih = \"y\"\n        while (pilih == \"y\"):\n            os.system(\"clear\")\n            print(\"=========================\")\n            print(\"|  Menu aplikasi Musik  |\")\n            print(\"=========================\")\n            print(\"1. Menambah Lagu\")\n            print(\"2. Menghapus Lagu\")\n            print(\"3. Melihat daftar Lagu\")\n            print(\"4. Tampil Lagu Terakhir\")\n            print(\"5. Panjang Waktu Lagu\")\n            print(\"=========================\")\n            pilihan=str(input((\"Silakan masukan pilihan anda: \")))\n            if(pilihan==\"1\"):\n                os.system(\"clear\")\n                obj = str(input(\"Masukan Lagu Yang Di Tambahkan: \"))\n                self.push(obj)\n                print(\"Lagu \"+obj+\" telah ditambahkan\")\n                \n            elif(pilihan==\"2\"):\n                os.system(\"clear\")\n                print(\"Lagu \"+self.pop()+\" dihapus\")\n                \n            elif(pilihan==\"3\"):\n                os.system(\"clear\")\n                print(self.isEmpty())\n                \n            elif(pilihan==\"4\"):\n                os.system(\"clear\")\n                print(\"Lagu terakhir: \"+self.peek())\n                \n            elif(pilihan==\"5\"):\n                os.system(\"clear\")\n                print(\"Panjang dari stack adalah: \"+str(self.size()))\n                \n            else:\n                pilih=\"n\"  \n \nif __name__ == \"__main__\":\n    s=Stack()\n    s.mainmenu()\n    ","9a63ddf3":"# Memeriksa apakah stack kosong\ndef isEmpty(self):\n    return self.items == []\n# Menambah objek\/data ke dalam stack\ndef push(self, item):\n    self.items.append(item)\n# Mengeluarkan data dari stack\ndef pop(self):\n    return self.items.pop()\n# Menampilkan objek terakhir dari stack\ndef peek(self):\n    return self.items[len(self.items)-1]\n# Mehitung panjang stack\ndef size(self):\n    return len(self.items)","74093564":"import os\n \n# Class stack\nclass Stack:\n    def __init__(self):\n        self.items = []\n       \n    # Memeriksa apakah stack kosong\n    def isEmpty(self):\n        return self.items == []\n    # Menambah objek\/data ke dalam stack\n    def push(self, item):\n        self.items.append(item)\n    # Mengeluarkan data dari stack\n    def pop(self):\n        return self.items.pop()\n    # Menampilkan objek terakhir dari stack\n    def peek(self):\n        return self.items[len(self.items)-1]\n    # Mehitung panjang stack\n    def size(self):\n        return len(self.items)\n   \n    # Menu dari aplikasi\n    def mainmenu(self):\n        pilih = \"y\"\n        while (pilih == \"y\"):\n            os.system(\"clear\")\n            print(\"=========================\")\n            print(\"|  Menu aplikasi Buku  |\")\n            print(\"=========================\")\n            print(\"1. Menambah Buku\")\n            print(\"2. Menghapus Buku\")\n            print(\"3. Melihat kosong buku\")\n            print(\"4. Tampil Buku Terakhir\")\n            print(\"5. Panjang Nilai Buku\")\n            print(\"=========================\")\n            pilihan=str(input((\"Silakan masukan pilihan anda: \")))\n            if(pilihan==\"1\"):\n                os.system(\"clear\")\n                obj = str(input(\"Masukan Buku Yang Di Tambahkan: \"))\n                self.push(obj)\n                print(\"Buku \"+obj+\" telah ditambahkan\")\n                \n            elif(pilihan==\"2\"):\n                os.system(\"clear\")\n                print(\"Buku \"+self.pop()+\" dihapus\")\n                \n            elif(pilihan==\"3\"):\n                os.system(\"clear\")\n                print(self.isEmpty())\n                \n            elif(pilihan==\"4\"):\n                os.system(\"clear\")\n                print(\"Buku terakhir: \"+self.peek())\n                \n            elif(pilihan==\"5\"):\n                os.system(\"clear\")\n                print(\"Panjang dari stack adalah: \"+str(self.size()))\n                \n            else:\n                pilih=\"n\"  \n \nif __name__ == \"__main__\":\n    s=Stack()\n    s.mainmenu()","541571e2":"# Memeriksa apakah stack kosong\ndef isEmpty(self):\n    return self.items == []\n# Menambah objek\/data ke dalam stack\ndef push(self, item):\n    self.items.append(item)\n# Mengeluarkan data dari stack\ndef pop(self):\n    return self.items.pop()\n# Menampilkan objek terakhir dari stack\ndef peek(self):\n    return self.items[len(self.items)-1]\n# Mehitung panjang stack\ndef size(self):\n    return len(self.items)","8d186913":"import os\n \n# Class stack\nclass Stack:\n    def __init__(self):\n        self.items = []\n       \n    # Memeriksa apakah stack kosong\n    def isEmpty(self):\n        return self.items == []\n    # Menambah objek\/data ke dalam stack\n    def push(self, item):\n        self.items.append(item)\n    # Mengeluarkan data dari stack\n    def pop(self):\n        return self.items.pop()\n    # Menampilkan objek terakhir dari stack\n    def peek(self):\n        return self.items[len(self.items)-1]\n    # Mehitung panjang stack\n    def size(self):\n        return len(self.items)\n   \n    # Menu dari aplikasi\n    def mainmenu(self):\n        pilih = \"y\"\n        while (pilih == \"y\"):\n            os.system(\"clear\")\n            print(\"=========================\")\n            print(\"|  Menu aplikasi GOJEK  |\")\n            print(\"=========================\")\n            print(\"1. Menambah Pesanan\")\n            print(\"2. Menghapus Pesanan\")\n            print(\"3. Melihat kosong Pesanan\")\n            print(\"4. Tampil Pesanan Terakhir\")\n            print(\"5. Harga Nilai Pesanan\")\n            print(\"=========================\")\n            pilihan=str(input((\"Silakan masukan pilihan anda: \")))\n            if(pilihan==\"1\"):\n                os.system(\"clear\")\n                obj = str(input(\"Masukan Pesanan Yang Di Tambahkan: \"))\n                self.push(obj)\n                print(\"Pesanan \"+obj+\" telah ditambahkan\")\n                \n            elif(pilihan==\"2\"):\n                os.system(\"clear\")\n                print(\"Pesanan \"+self.pop()+\" dihapus\")\n                \n            elif(pilihan==\"3\"):\n                os.system(\"clear\")\n                print(self.isEmpty())\n                \n            elif(pilihan==\"4\"):\n                os.system(\"clear\")\n                print(\"Pesanan terakhir: \"+self.peek())\n                \n            elif(pilihan==\"5\"):\n                os.system(\"clear\")\n                print(\"Panjang dari stack adalah: \"+str(self.size()))\n                \n            else:\n                pilih=\"n\"  \n \nif __name__ == \"__main__\":\n    s=Stack()\n    s.mainmenu()","90c908b8":"# Memeriksa apakah stack kosong\ndef isEmpty(self):\n    return self.items == []\n# Menambah objek\/data ke dalam stack\ndef push(self, item):\n    self.items.append(item)\n# Mengeluarkan data dari stack\ndef pop(self):\n    return self.items.pop()\n# Menampilkan objek terakhir dari stack\ndef peek(self):\n    return self.items[len(self.items)-1]\n# Mehitung panjang stack\ndef size(self):\n    return len(self.items)","052f73be":"import os\nimport queue\n \nclass myQueue:\n    def __init__(self):\n        self.items = queue.Queue()\n   \n    # Memeriksa apakah queue dalam keadaan kosong\n    def isEmpty(self):\n        return self.items.empty()\n    # Menambah data ke queue\n    def qPut(self, item):\n        self.items.put(item)\n    # Mengeluarkan data dari queue\n    def qGet(self):\n        if not self.items.empty():\n            return self.items.get()\n        else:\n            return \"empty\" \n    # Menghitung panjang queue\n    def size(self):\n        return self.items.qsize()\n   \n    # Main menu aplikasi\n    def mainmenu(self):\n        pilih = \"y\"\n        while (pilih == \"y\"):\n            os.system(\"cls\")\n            print(\"=========================\")\n            print(\"|  Menu aplikasi Musik  |\")\n            print(\"=========================\")\n            print(\"1. Menambah Lagu\")\n            print(\"2. Menghapus Lagu\")\n            print(\"3. Melihat Daftar Lagu\")\n            print(\"4. Tampil Lagu Terakhir\")\n            print(\"5. Panjang Waktu Buku\")\n            print(\"=========================\")\n            pilihan=str(input((\"Silakan masukan pilihan anda: \")))\n            if(pilihan==\"1\"):\n                os.system(\"cls\")\n                obj = str(input(\"Masukan Lagu yang ingin anda tambahkan: \"))\n                self.qPut(obj)\n                print(\"Lagu \"+obj+\" telah ditambahkan\")\n            elif(pilihan==\"2\"):\n                os.system(\"cls\")\n                temp = self.qGet()\n                if temp != \"empty\":\n                    print(\"Lagu \"+temp+\" dihapus\")\n                else:\n                    print(\"Lagu kosong\")\n            elif(pilihan==\"3\"):\n                os.system(\"cls\")\n                print(self.isEmpty())\n            elif(pilihan==\"4\"):\n                os.system(\"cls\")\n                print(\"Lagu dari queue adalah: \"+str(self.size()))\n            else:\n                pilih=\"n\"  \n \nif __name__ == \"__main__\":\n    q=myQueue()\n    q.mainmenu()","38509faa":"# Memeriksa apakah queue dalam keadaan kosong\ndef isEmpty(self):\n    return self.items.empty()\n# Menambah data ke queue\ndef qPut(self, item):\n    self.items.put(item)\n# Mengeluarkan data dari queue\ndef qGet(self):\n    if not self.items.empty():\n        return self.items.get()\n    else:\n        return \"empty\" \n# Menghitung panjang queue\ndef size(self):\n    return self.items.qsize()\n","ebe37e04":"import os\nimport queue\n \nclass myQueue:\n    def __init__(self):\n        self.items = queue.Queue()\n   \n    # Memeriksa apakah queue dalam keadaan kosong\n    def isEmpty(self):\n        return self.items.empty()\n    # Menambah data ke queue\n    def qPut(self, item):\n        self.items.put(item)\n    # Mengeluarkan data dari queue\n    def qGet(self):\n        if not self.items.empty():\n            return self.items.get()\n        else:\n            return \"empty\" \n    # Menghitung panjang queue\n    def size(self):\n        return self.items.qsize()\n   \n    # Main menu aplikasi\n    def mainmenu(self):\n        pilih = \"y\"\n        while (pilih == \"y\"):\n            os.system(\"cls\")\n            print(\"=========================\")\n            print(\"|  Menu aplikasi Buku  |\")\n            print(\"=========================\")\n            print(\"1. Menambah Buku\")\n            print(\"2. Menghapus Buku\")\n            print(\"3. Melihat kosong buku\")\n            print(\"4. Tampil Buku Terakhir\")\n            print(\"5. Panjang Nilai Buku\")\n            print(\"=========================\")\n            pilihan=str(input((\"Silakan masukan pilihan anda: \")))\n            if(pilihan==\"1\"):\n                os.system(\"cls\")\n                obj = str(input(\"Masukan Buku yang ingin anda tambahkan: \"))\n                self.qPut(obj)\n                print(\"Buku \"+obj+\" telah ditambahkan\")\n            elif(pilihan==\"2\"):\n                os.system(\"cls\")\n                temp = self.qGet()\n                if temp != \"empty\":\n                    print(\"Buku \"+temp+\" dihapus\")\n                else:\n                    print(\"Buku kosong\")\n            elif(pilihan==\"3\"):\n                os.system(\"cls\")\n                print(self.isEmpty())\n            elif(pilihan==\"4\"):\n                os.system(\"cls\")\n                print(\"Buku dari queue adalah: \"+str(self.size()))\n            else:\n                pilih=\"n\"  \n \nif __name__ == \"__main__\":\n    q=myQueue()\n    q.mainmenu()","8d748b13":"# Memeriksa apakah queue dalam keadaan kosong\ndef isEmpty(self):\n    return self.items.empty()\n# Menambah data ke queue\ndef qPut(self, item):\n    self.items.put(item)\n# Mengeluarkan data dari queue\ndef qGet(self):\n    if not self.items.empty():\n        return self.items.get()\n    else:\n        return \"empty\" \n# Menghitung panjang queue\ndef size(self):\n    return self.items.qsize()","0cb7d3f2":"import os\nimport queue\n \nclass myQueue:\n    def __init__(self):\n        self.items = queue.Queue()\n   \n    # Memeriksa apakah queue dalam keadaan kosong\n    def isEmpty(self):\n        return self.items.empty()\n    # Menambah data ke queue\n    def qPut(self, item):\n        self.items.put(item)\n    # Mengeluarkan data dari queue\n    def qGet(self):\n        if not self.items.empty():\n            return self.items.get()\n        else:\n            return \"empty\" \n    # Menghitung panjang queue\n    def size(self):\n        return self.items.qsize()\n   \n    # Main menu aplikasi\n    def mainmenu(self):\n        pilih = \"y\"\n        while (pilih == \"y\"):\n            os.system(\"cls\")\n            print(\"=========================\")\n            print(\"|  Menu aplikasi GOJEK  |\")\n            print(\"=========================\")\n            print(\"1. Menambah Pesanan\")\n            print(\"2. Menghapus Pesanan\")\n            print(\"3. Melihat kosong Pesanan\")\n            print(\"4. Tampil Pesanan Terakhir\")\n            print(\"5. Harga Nilai Pesanan\")\n            print(\"=========================\")\n            pilihan=str(input((\"Silakan masukan pilihan anda: \")))\n            if(pilihan==\"1\"):\n                os.system(\"cls\")\n                obj = str(input(\"Masukan Pesanan yang ingin anda tambahkan: \"))\n                self.qPut(obj)\n                print(\"Pesanan \"+obj+\" telah ditambahkan\")\n            elif(pilihan==\"2\"):\n                os.system(\"cls\")\n                temp = self.qGet()\n                if temp != \"empty\":\n                    print(\"Pesanan \"+temp+\" dihapus\")\n                else:\n                    print(\"Pesanan kosong\")\n            elif(pilihan==\"3\"):\n                os.system(\"cls\")\n                print(self.isEmpty())\n            elif(pilihan==\"4\"):\n                os.system(\"cls\")\n                print(\"Pesanan dari queue adalah: \"+str(self.size()))\n            else:\n                pilih=\"n\"  \n \nif __name__ == \"__main__\":\n    q=myQueue()\n    q.mainmenu()","1ce931e7":"# Memeriksa apakah queue dalam keadaan kosong\ndef isEmpty(self):\n    return self.items.empty()\n# Menambah data ke queue\ndef qPut(self, item):\n    self.items.put(item)\n# Mengeluarkan data dari queue\ndef qGet(self):\n    if not self.items.empty():\n        return self.items.get()\n    else:\n        return \"empty\" \n# Menghitung panjang queue\ndef size(self):\n    return self.items.qsize()","9d6b9838":"Setelah itu kita buat menu aplikasi nya | Menu aplikasi GOJEK |\n\n1. Menambah Pesanan\n2. Menghapus Pesanan\n3. Melihat kosong Pesanan\n4. Tampil Pesanan Terakhir\n5. Harga Nilai Pesanan lalu setelah itu jika memilih no 1 dia akan menambahkan object pada elemen jika milih no2 dia akan menghapus objek elemen yang terakhir jika memilih no 3 dia akan memeriksa elemen tersebut kosong atau tidak jika memili no 4 dia akan menampilkan objek pada elemen terakhir jika memilih no 5 dia akan menampilkan panjang objek pada elemen","58669387":"Penjelasan Program queue di atas : Pertama buat import untuk stack lalu kita buat lah class pada queue lalu didalam class queue pertama kita buat operasi\" stack def init(self): self.items = queue.Queue()","49c9e885":"Setelah itu kita buat menu aplikasi nya | Menu aplikasi GOJEK |\n\n1. Menambah Pesanan\n2. Menghapus Pesanan\n3. Melihat kosong Pesanan\n4. Tampil Pesanan Terakhir\n5. Harga Nilai Pesanan\nlalu setelah itu jika memilih no 1 dia akan menambahkan object pada elemen jika milih no2 dia akan menghapus objek elemen yang terakhir jika memilih no 3 dia akan memeriksa elemen tersebut kosong atau tidak jika memili no 4 dia akan menampilkan objek pada elemen terakhir jika memilih no 5 dia akan menampilkan panjang objek pada elemen","8b529c45":"Penjelasan Program queue di atas : Pertama buat import untuk stack lalu kita buat lah class pada queue lalu didalam class queue pertama kita buat operasi\" stack def init(self): self.items = queue.Queue()","9002c37d":"Setelah itu kita buat menu aplikasi nya | Menu aplikasi Musik |\n\n1. Menambah Lagu\n2. Menghapus Lagu\n3. Melihat daftar Lagu\n4. Tampil Lagu Terakhir\n5. Panjang Waktu Lagu lalu setelah itu jika memilih no 1 dia akan menambahkan object pada elemen jika milih no2 dia akan menghapus objek elemen yang terakhir jika memilih no 3 dia akan memeriksa elemen tersebut kosong atau tidak jika memili no 4 dia akan menampilkan objek pada elemen terakhir jika memilih no 5 dia akan menampilkan panjang objek pada elemen","0e74a528":"Penjelasan Program stack di atas : Pertama buat import untuk stack lalu kita buat lah class pada stack lalu didalam class stack pertama kita buat operasi\" stack def init(self): self.items = []","84e42da7":"Penjelasan Program stack di atas : Pertama buat import untuk stack lalu kita buat lah class pada stack lalu didalam class stack pertama kita buat operasi\" stack def init(self): self.items = []","f4816009":"Setelah itu kita buat menu aplikasi nya | Menu aplikasi Buku |\n\n1. Menambah Buku\n2. Menghapus Buku\n3. Melihat kosong buku\n4. Tampil Buku Terakhir\n5. Panjang Nilai Buku\n lalu setelah itu jika memilih no 1 dia akan menambahkan object pada elemen jika milih no2 dia akan menghapus objek elemen yang terakhir jika memilih no 3 dia akan memeriksa elemen tersebut kosong atau tidak jika memili no 4 dia akan menampilkan objek pada elemen terakhir jika memilih no 5 dia akan menampilkan panjang objek pada elemen","80b741cd":"Penjelasan Program queue di atas : Pertama buat import untuk stack lalu kita buat lah class pada queue lalu didalam class queue pertama kita buat operasi\" stack def init(self): self.items = queue.Queue()","4fbbd45c":"Setelah itu kita buat menu aplikasi nya | Menu aplikasi Musik |\n\n1. Menambah Lagu\n2. Menghapus Lagu\n3. Melihat Daftar Lagu\n4. Tampil Lagu Terakhir\n5. Panjang Waktu Buku lalu setelah itu jika memilih no 1 dia akan menambahkan object pada elemen jika milih no2 dia akan menghapus objek elemen yang terakhir jika memilih no 3 dia akan memeriksa elemen tersebut kosong atau tidak jika memili no 4 dia akan menampilkan objek pada elemen terakhir jika memilih no 5 dia akan menampilkan panjang objek pada elemen","856b1b4a":"# Tugas Kelompok Oleh : FARHAN ZULKARNAEN HARAHAP , ADILLA MUSTIKA JANNAH , EMIL FARHAN NASUTION","ba9be8c3":"Penjelasan Program stack di atas : Pertama buat import untuk stack lalu kita buat lah class pada stack lalu didalam class stack pertama kita buat operasi\" stack def init(self): self.items = []","f3a30b17":"Setelah itu kita buat menu aplikasi nya | Menu aplikasi Buku |\n\n1. Menambah Buku\n2. Menghapus Buku\n3. Melihat kosong buku\n4. Tampil Buku Terakhir\n5. Panjang Nilai Buku lalu setelah itu jika memilih no 1 dia akan menambahkan object pada elemen jika milih no2 dia akan menghapus objek elemen yang terakhir jika memilih no 3 dia akan memeriksa elemen tersebut kosong atau tidak jika memili no 4 dia akan menampilkan objek pada elemen terakhir jika memilih no 5 dia akan menampilkan panjang objek pada elemen"}}