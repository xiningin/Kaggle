{"cell_type":{"b161969d":"code","8c5e9b66":"code","f2038fa7":"code","18e42fe9":"code","058b33c8":"code","f8c1804e":"code","ce5b3ef1":"code","7c4fba3f":"code","ffc7f479":"code","2be07266":"code","a96bdd38":"code","e6c4dcd7":"code","e5928a42":"code","742f872b":"code","d59a22ce":"code","219e8e23":"code","4a5b80d3":"code","7ce323f3":"code","e1b90af4":"code","0235d002":"code","af5b5706":"code","2d61e5e8":"code","779f7931":"code","3d97f036":"code","d623c92b":"code","36e936c7":"code","04d592d8":"code","dbd413f0":"code","294a52bc":"code","b666bd46":"code","08839aef":"code","62d9f4f9":"code","eb476690":"code","4f2df433":"code","1f31d2bf":"code","6cab584f":"markdown","f77e1b35":"markdown","5a94b8f5":"markdown","7da76406":"markdown","5991a490":"markdown","4da845a5":"markdown","833975cb":"markdown","29b425d3":"markdown"},"source":{"b161969d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nfrom numpy.random import seed\nfrom numpy.random import randn\nfrom numpy import mean\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statistics\nimport seaborn as sns\nimport scipy\nfrom math import sqrt\nfrom scipy.stats import pearsonr\nfrom scipy.stats import t\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy.stats import shapiro\nsns.set(style='white', font_scale=1.1)\n\n\ndata = pd.read_csv(\"..\/input\/melbourne-housing-market\/Melbourne_housing_FULL.csv\")\n\n# Any results you write to the current directory are saved as output.","8c5e9b66":"dataclean = data.dropna()","f2038fa7":"dataclean.head(100)","18e42fe9":"price_mean = dataclean['Price'].mean()\ndistance_mean = dataclean['Distance'].mean()\nland_mean = dataclean['Landsize'].mean()\nbuild_mean = dataclean['BuildingArea'].mean()\n\nprint ('Mean for Price : ' + str(price_mean))\nprint ('Mean for Distance : ' + str(distance_mean))\nprint ('Mean for Land Size : ' + str(land_mean))\nprint ('Mean for Building Area : ' + str(build_mean))","058b33c8":"price_std = dataclean['Price'].std()\ndistance_std = dataclean['Distance'].std()\nland_std = dataclean['Landsize'].std()\nbuild_std = dataclean['BuildingArea'].std()\n\nprint ('Standard Deviation for Price : ' + str(price_std))\nprint ('Standard Deviation for Distance : ' + str(distance_std))\nprint ('Standard Deviation for Land Size : ' + str(land_std))\nprint ('Standard Deviation for Building Area : ' + str(build_std))","f8c1804e":"price_max = dataclean['Price'].max()\ndistance_max = dataclean['Distance'].max()\nland_max = dataclean['Landsize'].max()\nbuild_max = dataclean['BuildingArea'].max()\n\nprint ('Max Value for Price : ' + str(price_max))\nprint ('Max Value for Distance : ' + str(distance_max))\nprint ('Max Value for Land Size : ' + str(land_max))\nprint ('Max Value for Building Area : ' + str(build_max))","ce5b3ef1":"price_min = dataclean['Price'].min()\ndistance_min = dataclean['Distance'].min()\nland_min = dataclean['Landsize'].min()\nbuild_min = dataclean['BuildingArea'].min()\n\nprint ('Min Value for Price : ' + str(price_min))\nprint ('Min Value for Distance : ' + str(distance_min))\nprint ('Min Value for Land Size : ' + str(land_min))\nprint ('Min Value for Building Area : ' + str(build_min))","7c4fba3f":"price_q1 = np.quantile(dataclean['Price'], .25)\ndistance_q1 = np.quantile(dataclean['Distance'], .25)\nland_q1 = np.quantile(dataclean['Landsize'], .25)\nbuild_q1 = np.quantile(dataclean['BuildingArea'], .25)\n\n\nprint ('Q1 Value for Price : ' + str(price_q1))\nprint ('Q1 Value for Distance : ' + str(distance_q1))\nprint ('Q1 Value for Land Area : ' + str(land_q1))\nprint ('Q1 Value for Building Area : ' + str(build_q1))","ffc7f479":"price_q2 = np.quantile(dataclean['Price'], .50)\ndistance_q2 = np.quantile(dataclean['Distance'], .50)\nland_q2 = np.quantile(dataclean['Landsize'], .50)\nbuild_q2 = np.quantile(dataclean['BuildingArea'], .50)\n\n\nprint ('Median Value for Price : ' + str(price_q2))\nprint ('Median Value for Distance : ' + str(distance_q2))\nprint ('Median Value for Land Area : ' + str(land_q2))\nprint ('Median Value for Building Area : ' + str(build_q2))","2be07266":"price_q3 = np.quantile(dataclean['Price'], .75)\ndistance_q3 = np.quantile(dataclean['Distance'], .75)\nland_q3 = np.quantile(dataclean['Landsize'], .75)\nbuild_q3 = np.quantile(dataclean['BuildingArea'], .75)\n\n\nprint ('Q3 Value for Price : ' + str(price_q3))\nprint ('Q3 Value for Distance : ' + str(distance_q3))\nprint ('Q3 Value for Land Area : ' + str(land_q3))\nprint ('Q3 Value for Building Area : ' + str(build_q3))","a96bdd38":"tipe_h = dataclean.loc[dataclean['Type'] == 'h']\ntipe_u = dataclean.loc[dataclean['Type'] == 'u']\ntipe_t = dataclean.loc[dataclean['Type'] == 't']","e6c4dcd7":"plt.boxplot(tipe_h.Price, showmeans=True)\nplt.ylim(0, 4000000)\nprint ('Q1 : ' + str(np.quantile(tipe_h['Price'], .25)))\nprint ('Q2 : ' + str(np.quantile(tipe_h['Price'], .50)))\nprint ('Q3 : ' + str(np.quantile(tipe_h['Price'], .75)))\nprint ('Mean : ' + str(tipe_h['Price'].mean()))\n","e5928a42":"plt.boxplot(tipe_h.BuildingArea, vert=False)\nplt.xlim(0, 500)\nprint ('Q1 : ' + str(np.quantile(tipe_h['BuildingArea'], .25)))\nprint ('Q2 : ' + str(np.quantile(tipe_h['BuildingArea'], .50)))\nprint ('Q3 : ' + str(np.quantile(tipe_h['BuildingArea'], .75)))\nprint ('Mean : ' + str(tipe_h['BuildingArea'].mean()))","742f872b":"plt.boxplot(tipe_u.Price)\nplt.ylim(0, 1500000)\nprint ('Q1 : ' + str(np.quantile(tipe_u['Price'], .25)))\nprint ('Q2 : ' + str(np.quantile(tipe_u['Price'], .50)))\nprint ('Q3 : ' + str(np.quantile(tipe_u['Price'], .75)))\nprint ('Mean : ' + str(tipe_u['Price'].mean()))","d59a22ce":"plt.boxplot(tipe_u.BuildingArea, vert=False)\nplt.xlim(0, 250)\nprint ('Q1 : ' + str(np.quantile(tipe_u['BuildingArea'], .25)))\nprint ('Q2 : ' + str(np.quantile(tipe_u['BuildingArea'], .50)))\nprint ('Q3 : ' + str(np.quantile(tipe_u['BuildingArea'], .75)))\nprint ('Mean : ' + str(tipe_u['BuildingArea'].mean()))","219e8e23":"plt.boxplot(tipe_t.Price)\nplt.ylim(0, 3000000)\nprint ('Q1 : ' + str(np.quantile(tipe_t['Price'], .25)))\nprint ('Q2 : ' + str(np.quantile(tipe_t['Price'], .50)))\nprint ('Q3 : ' + str(np.quantile(tipe_t['Price'], .75)))\nprint ('Mean : ' + str(tipe_t['Price'].mean()))","4a5b80d3":"plt.boxplot(tipe_t.BuildingArea, vert=False)\nprint ('Q1 : ' + str(np.quantile(tipe_t['BuildingArea'], .25)))\nprint ('Q2 : ' + str(np.quantile(tipe_t['BuildingArea'], .50)))\nprint ('Q3 : ' + str(np.quantile(tipe_t['BuildingArea'], .75)))\nprint ('Mean : ' + str(tipe_t['BuildingArea'].mean()))","7ce323f3":"region_WM = dataclean.loc[dataclean['Regionname'] == 'Western Metropolitan']\nregion_EM = dataclean.loc[dataclean['Regionname'] == 'Eastern Metropolitan']\nregion_NM = dataclean.loc[dataclean['Regionname'] == 'Northern Metropolitan']\nregion_SM = dataclean.loc[dataclean['Regionname'] == 'Southern Metropolitan']\n##Digunakan untuk membuat method yang dapat dipanggil","e1b90af4":"plt.boxplot(region_WM['Price']) ## Price Western Metro","0235d002":"plt.boxplot(region_WM['BuildingArea']) ##Building Area Western Metro","af5b5706":"plt.boxplot(region_EM['Price']) ## Price Eastern Metro","2d61e5e8":"plt.boxplot(region_EM['BuildingArea'])##Building Area Eastern Metro","779f7931":"plt.boxplot(region_NM['Price']) ## Price Northern Metro","3d97f036":"plt.boxplot(region_NM['BuildingArea'])##Building Area Northern Metro","d623c92b":"plt.boxplot(region_SM['Price']) ## Price Southern Metro","36e936c7":"plt.boxplot(region_SM['BuildingArea']) ## Building Area Southern Metro","04d592d8":"price = dataclean['Price']\ndist = dataclean['Distance']\n\nplt.scatter(price, dist, edgecolors = 'r')\nplt.xlabel('Price')\nplt.ylabel('Distance')\nplt.title('Correlation between Price and Distance')\nplt.show()\n## Price VS Distance\n","dbd413f0":"buildarea = dataclean['BuildingArea']\ndist = dataclean['Distance']\n\nplt.scatter(buildarea, dist, edgecolors = 'y')\nplt.xlim(0,1000)\nplt.xlabel('BuildingArea')\nplt.ylabel('Distance')\nplt.title('Correlation between BuildingAreaand Distance')\nplt.show()","294a52bc":"## Menghitung harga rata-rata tiap penjual\nnels = dataclean.loc[dataclean['SellerG'] == 'Nelson']\nnels_mean = nels['Price'].mean()\nprint ('Nelson Mean : ' + str(nels_mean))\n\nbarry = dataclean.loc[dataclean['SellerG'] == 'Barry']\nbarry_mean = barry['Price'].mean()\nprint ('Barry Mean : ' + str(barry_mean))\n\nhock = dataclean.loc[dataclean['SellerG'] == 'hockingstuart']\nhock_mean = hock['Price'].mean()\nprint ('hockingstuart Mean : ' + str(hock_mean))\n\nray = dataclean.loc[dataclean['SellerG'] == 'Ray']\nray_mean = ray['Price'].mean()\nprint ('Ray Mean : ' + str(ray_mean))","b666bd46":"\n\n    nels_price = nels['Price']\n    barry_price = barry['Price']\n    hock_price = hock['Price']\n    ray_price = ray['Price']\n\n\n    length_nels = len(nels['Price'])\n    length_barry = len(barry['Price'])\n    length_hock = len(hock['Price'])\n    length_ray = len(ray['Price'])\n\n    std_nels = nels_price.std()\n    std_barry = barry_price.std()\n    std_hock = hock_price.std()\n    std_ray = ray_price.std()\n\n\n    se_nels = std_nels\/sqrt(length_nels)\n    se_barry = std_barry\/sqrt(length_barry)\n    se_hock = std_hock\/sqrt(length_hock)\n    se_ray = std_ray\/sqrt(length_ray)\n\n","08839aef":"print ('N : ' + str(length_nels), \n       str(length_barry), str(length_hock), str(length_ray))","62d9f4f9":"print ('Ray Std. Dev : ' + str(std_ray))\nprint ('Nelson Std. Dev : ' + str(std_nels))\nprint ('Barry Std. Dev : ' + str(std_barry))\nprint ('Hockingstuart Std. Dev : ' + str(std_hock))","eb476690":"print ('Ray Std. Error : ' + str(se_ray))\nprint ('Nelson Std. Error : ' + str(se_nels))\nprint ('Barry Std. Error : ' + str(se_barry))\nprint ('Hockingstuart Std. Error : ' + str(se_hock))","4f2df433":"stat, p = shapiro(nels['Price'])\nprint ('Statistics=%.3f, p=%.3f' % (stat, p))\n\nalpha = 0.05\nif p > alpha:\n        print('Sample looks Gaussian (fail to reject H0)')\nelse:\n        print('Sample does not look Gaussian (reject H0)')","1f31d2bf":"from scipy.stats import chi2\n\ndata2 = dataclean[dataclean.SellerG.str.contains(\"Nelson|Barry|hocking|Ray\")]\ndata2 = data2[~dataclean.SellerG.str.contains(\"\/\")]\ndata2 = data2[dataclean.Regionname.str.contains(\"Western Metropolitan|Eastern Metropolitan|Northern Metropolitan|Southern Metropolitan\")]\ndata2 = data2[~dataclean.Regionname.str.contains(\"\/|South-Eastern Metropolitan\")]\ndata2 = data2[['Regionname', 'SellerG']]\n\ncontingency_table=pd.crosstab(data2[\"Regionname\"],data2[\"SellerG\"])\nprint('contingency_table :-\\n',contingency_table)\n\nObserved_Values = contingency_table.values \nprint(\"Observed Values :-\\n\",Observed_Values)\n\nimport scipy.stats\nb=scipy.stats.chi2_contingency(contingency_table)\nExpected_Values = b[3]\nprint(\"Expected Values :-\\n\",Expected_Values)\n\nno_of_rows=len(contingency_table.iloc[0:2,0])\nno_of_columns=len(contingency_table.iloc[0,0:2])\ndf=(no_of_rows-1)*(no_of_columns-1)\nprint(\"Degree of Freedom:\",df)\n\nalpha=0.05\n\nchi_square=sum([(o-e)**2.\/e for o,e in zip(Observed_Values,Expected_Values)])\nchi_square_statistic=chi_square[0]+chi_square[1]\nprint(\"chi-square statistic:\",chi_square_statistic)\n\ncritical_value=chi2.ppf(q=1-alpha,df=df)\nprint('critical_value:',critical_value)\n\np_value=1-chi2.cdf(x=chi_square_statistic,df=df)\nprint('p-value:',p_value)\n\nprint('Significance level: ',alpha)\n\nif chi_square_statistic>=critical_value:\n    print(\"There is a relationship between 2 categorical variables\")\nelse:\n    print(\"There is no relationship between 2 categorical variables\")\n    \nif p_value<=alpha:\n    print(\"There is a relationship between 2 categorical variables\")\nelse:\n    print(\"There is no relationship between 2 categorical variables\")\n\n\n\n","6cab584f":"## Nomer 2 di bawah ini","f77e1b35":"### Di bawah ini mulai nomor 1","5a94b8f5":"## Mulai dari sini pengerjaan soal nomor 6","7da76406":"        **Nomor 3 sebagai berikut******","5991a490":"## Mulai dari sini pengerjaan soal nomor 5","4da845a5":"## data.dropna() digunakan untk menghapus row yang memiliki missing value dari objek data dan menyimpannya pada objek (dataclean).","833975cb":"## Mulai dari sini pengerjaan soal nomor 4\n","29b425d3":"di atas adalah deklarasi untuk tipe rumah."}}