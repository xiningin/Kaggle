{"cell_type":{"591de87c":"code","a0071158":"code","5442b127":"code","a67fd705":"code","a12dea4e":"code","1ca62751":"code","8b379b2a":"code","0d5ad620":"code","bebe28cb":"code","27f614e7":"code","0fd0b001":"code","a2b3f0d7":"code","c69b9119":"code","0ce42b78":"code","f71fd86d":"code","50924c06":"code","0371b012":"code","0867b3e1":"code","480f2e01":"code","7ec3a198":"markdown","a30ad604":"markdown","85f30a1f":"markdown","55353320":"markdown","5ca9e7c5":"markdown","0cc291e1":"markdown","6b6bf8c0":"markdown","5a553d10":"markdown","45e32253":"markdown","b2263b76":"markdown","648e3ef5":"markdown","3391c9b4":"markdown","fac074aa":"markdown","7441fc4a":"markdown","62c27fcc":"markdown","ce7f0d82":"markdown"},"source":{"591de87c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nfrom wordcloud import WordCloud,STOPWORDS\nimport spacy as sp\nimport string\nimport nltk\nimport re\nimport plotly.express as ex\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nfrom plotly.subplots import make_subplots\npyo.init_notebook_mode()\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer as SIA\nnlps = sp.load('en')\n\nplt.rc('figure',figsize=(20,11))","a0071158":"first_moive,second_movie,third_movie = None,None,None\nwith open('\/kaggle\/input\/the-terminator-franchise-movie-scripts\/Terminator.txt') as f:\n    first_moive = f.read()\nwith open('\/kaggle\/input\/the-terminator-franchise-movie-scripts\/TERMINATOR 2 JUDGEMENT DAY.txt') as f:\n    second_movie = f.read()\nwith open('\/kaggle\/input\/the-terminator-franchise-movie-scripts\/Terminator Salvation.txt') as f:\n    third_movie = f.read()\n","5442b127":"def is_tag_line(text):\n    has_number = False\n    All_caps = True\n    for char in text:\n        if char.isnumeric():\n            has_number = True\n        if char.islower():\n            All_caps = False\n    if All_caps and has_number:\n        return True\n    else:\n        return False\n \ndef is_tag_line_TM(text):\n    for i in ['INT','EXT']:\n        All_caps = True\n        if text.find(i) != -1:\n            for word in text:\n                if word.islower():\n                    All_caps = False\n            if All_caps == True:\n                return True\n    return False\n\ndef divide_scenarios_and_script(movie_script):\n    movie_splited = movie_script.split('\\n\\n')\n    movie_scenarios = []\n    movie_script    = []\n    aux             = []\n    \n    for sample in movie_splited:\n        if is_tag_line(sample):\n            movie_scenarios.append(sample)\n            movie_script.append('\\n\\n'.join(aux))\n            aux = []\n        else:\n            aux.append(sample)\n            \n#     movie_scenarios = [word for word in movie_splited if is_tag_line(word)]\n#     movie_script = [word for word in movie_splited if not is_tag_line(word)]\n    movie_script = movie_script[1:]\n    return movie_scenarios,movie_script\n\ndef divide_scenarios_and_script_TM(movie_script):\n    movie_splited = movie_script.split('\\n')\n    movie_scenarios = []\n    movie_script    = []\n    aux             = []\n    \n    for sample in movie_splited:\n        if is_tag_line_TM(sample):\n            movie_scenarios.append(sample)\n            movie_script.append('\\n\\n'.join(aux))\n            aux = []\n        else:\n            aux.append(sample)\n            \n#     movie_scenarios = [word for word in movie_splited if is_tag_line(word)]\n#     movie_script = [word for word in movie_splited if not is_tag_line(word)]\n    movie_script = movie_script[1:]\n    return movie_scenarios,movie_script","a67fd705":"first_movie_scenarios, first_movie_script = divide_scenarios_and_script(first_moive)\nsecond_movie_scenarios, second_movie_script = divide_scenarios_and_script(second_movie)\nthird_movie_scenarios, third_movie_script = divide_scenarios_and_script_TM(third_movie)","a12dea4e":"first_movie_df = pd.DataFrame({'scene':first_movie_scenarios[:-1],'script':first_movie_script,'movie_number':[1]*len(first_movie_script)})\nsecond_movie_df = pd.DataFrame({'scene':second_movie_scenarios[:-1],'script':second_movie_script,'movie_number':[2]*len(second_movie_script)})\nthird_movie_df = pd.DataFrame({'scene':third_movie_scenarios[:-1],'script':third_movie_script,'movie_number':[3]*len(third_movie_script)})\n\nfirst_movie_df.scene  = first_movie_df.scene.apply(lambda x: x.replace('EXT',''))\nfirst_movie_df.scene  = first_movie_df.scene.apply(lambda x: x.replace('INT',''))\nsecond_movie_df.scene = second_movie_df.scene.apply(lambda x: x.replace('EXT',''))\nsecond_movie_df.scene = second_movie_df.scene.apply(lambda x: x.replace('INT',''))\nthird_movie_df.scene  = third_movie_df.scene.apply(lambda x: x.replace('EXT',''))\nthird_movie_df.scene  = third_movie_df.scene.apply(lambda x: x.replace('INT',''))\n\nts_df = pd.concat([first_movie_df,second_movie_df,third_movie_df])","1ca62751":"for i in range(1,4):\n    plt.subplot(1,3,i)\n    plt.title('Scene Wordcloud fot the {} Terminator Movie'.format(i),fontsize=12,fontweight='bold')\n    Wcloud = WordCloud(width=400,height=400,collocations = False).generate(' '.join(ts_df.query('movie_number == {}'.format(i)).scene))\n    plt.imshow(Wcloud)\n    plt.axis('off')\n    plt.tight_layout()\n","8b379b2a":"times_of_day = ['DAWN','DAY','NIGHT']\ndef get_time_of_day(sir):\n    splited = re.findall(r'\\w+',sir)\n    for word in splited:\n        if word in times_of_day:\n            return word\n    return 'NaN'\n        \nts_df['scene_time'] = ts_df.scene.apply(get_time_of_day)","0d5ad620":"sid = SIA()\nts_df['sentiments']           = ts_df['script'].apply(lambda x: sid.polarity_scores(' '.join(re.findall(r'\\w+',x.lower()))))\nts_df['Positive Sentiment']   = ts_df['sentiments'].apply(lambda x: x['pos']) \nts_df['Neutral Sentiment']    = ts_df['sentiments'].apply(lambda x: x['neu'])\nts_df['Negative Sentiment']   = ts_df['sentiments'].apply(lambda x: x['neg'])\n\nts_df.drop(columns=['sentiments'],inplace=True)","bebe28cb":"ts_df['# Of Words']                 = ts_df['script'].apply(lambda x: len(x.split(' ')))\nts_df['# Of StopWords']             = ts_df['script'].apply(lambda x: len([word for word in x.split(' ') if word in list(STOPWORDS)]))\nts_df['# Of Sentences']             = ts_df['script'].apply(lambda x: len(re.findall('\\.',x)))\nts_df['Average Word Length']        = ts_df['script'].apply(lambda x: np.mean(np.array([len(va) for va in x.split(' ') if va not in list(STOPWORDS)])))\nts_df['Average Sentence Length']    = ts_df['script'].apply(lambda x: np.mean(np.array([len(va) for va in x.split('.')])))\n\nts_df['script'] = ts_df['script'].apply(lambda x: re.sub(r\"[,.;@#?!&$]+\", ' ', x))","27f614e7":"ts_df['# Of People Mentioned']     = ts_df['script'].apply(lambda x: len([tok for tok in nlps(x).ents if tok.label_ == 'PERSON' ]))\nts_df['# Of Objects Mentioned']     = ts_df['script'].apply(lambda x: len([tok for tok in nlps(x).ents if tok.label_ == 'PRODUCT' ]))\nts_df['# Of Events Mentioned']     = ts_df['script'].apply(lambda x: len([tok for tok in nlps(x).ents if tok.label_ == 'EVENT' ]))\nts_df['# Of Facilities Mentioned']     = ts_df['script'].apply(lambda x: len([tok for tok in nlps(x).ents if tok.label_ == 'FAC' ]))","0fd0b001":"ts_df.head(5)","a2b3f0d7":"for i in range(1,4):\n    plt.subplot(1,3,i)\n    plt.title('Script Wordcloud fot the {} Terminator Movie'.format(i),fontsize=12,fontweight='bold')\n    Wcloud = WordCloud(width=400,height=400,collocations = False).generate(' '.join(ts_df.query('movie_number == {}'.format(i)).script.str.lower()))\n    plt.imshow(Wcloud)\n    plt.axis('off')\n    plt.tight_layout()","c69b9119":"ex.pie(ts_df,names='scene_time',title='Proportion Of Scenes in Different Day Times')","0ce42b78":"for i in range(1,4):\n    plt.subplot(3,1,i)\n    plt.title('Distribution Of Different Sentiments in the {} Movie'.format(i),fontsize=17)\n    sns.kdeplot(ts_df.query('movie_number == {}'.format(i))['Positive Sentiment'])\n    sns.kdeplot(ts_df.query('movie_number == {}'.format(i))['Negative Sentiment'])\n    sns.kdeplot(ts_df.query('movie_number == {}'.format(i))['Neutral Sentiment'])\n    plt.tight_layout()","f71fd86d":"colors=['red','green','teal']\nfor i in range(1,4):\n    plt.subplot(3,1,i)\n    plt.title('Distribution Of Number of Words In A Scene Script {} Movie'.format(i),fontsize=17)\n    sns.kdeplot(ts_df.query('movie_number == {}'.format(i))['# Of Words'],color=colors[i-1])\n    plt.tight_layout()\n","50924c06":"for i in range(1,4):\n    plt.subplot(3,1,i)\n    plt.title('Distribution Of Number of Stopwords In A Scene Script {} Movie'.format(i),fontsize=17)\n    sns.kdeplot(ts_df.query('movie_number == {}'.format(i))['# Of StopWords'],color=colors[i-1])\n    plt.tight_layout()\n","0371b012":"gb_sum= ts_df.groupby(by='movie_number').sum()\ngb_sum = gb_sum.reset_index()\n\nfig = make_subplots(rows=2, cols=1,shared_xaxes=True,subplot_titles=('Number Of Events Mentioned In Each Movie',  'Number Of Objects Mentioned In Each Movie'))\n\nfig.add_trace(\n    go.Bar(x=[1, 2, 3], y=gb_sum[\"# Of Events Mentioned\"],name='Events'),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(x=[1, 2, 3], y=gb_sum['# Of Objects Mentioned'],name='Objects'),\n    row=2, col=1\n)\n\nfig['layout']['xaxis2']['title'] = 'Movie Number'\nfig.update_layout(height=700, width=900, title_text=\"Side By Side Subplots\")\nfig.show()","0867b3e1":"fig = make_subplots(rows=2, cols=1,shared_xaxes=True,subplot_titles=('Number Of Facilities Mentioned In Each Movie',  'Number Of People Mentioned In Each Movie'))\n\nfig.add_trace(\n    go.Bar(x=[1, 2, 3], y=gb_sum[\"# Of Facilities Mentioned\"],name='Facilities'),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(x=[1, 2, 3], y=gb_sum['# Of People Mentioned'],name='People'),\n    row=2, col=1\n)\n\nfig['layout']['xaxis2']['title'] = 'Movie Number'\nfig.update_layout(height=700, width=900, title_text=\"Side By Side Subplots\")\nfig.show()","480f2e01":"ex.imshow(ts_df.corr('spearman'),height=900,title='Spearman Correlation Between Different Numeric Feautes')","7ec3a198":"<a id=\"1.1\"><\/a>\n\n<h3 style=\"background-color:skyblue;font-family:newtimeroman;font-size:200%;text-align:center\">Data Loading And Assessments<\/h3>\n","a30ad604":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>In the following section, we will preprocess our raw text files into workable data-frames.<\/span><\/p>\n<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>The dataframes we will create will be divided into 2 columns, the scene title which describes where the scene is filmed what day time, etc, and a column for all the script that is said in that particular scene.<\/span><\/p>\n<p><br><\/p>","85f30a1f":"<p style=\"text-align: center;\"><span style='font-size: 24px; font-family: \"Times New Roman\", Times, serif;'>In the above code cell, we derive basic features regarding the text formation.<br><\/span><\/p>\n<p><br><\/p>","55353320":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>In the above code cell, we extract the negative, positive, and neutral sentiment for each scene&apos;s script.<br><\/span><\/p>\n<p><br><\/p>","5ca9e7c5":"<a id=\"1.1\"><\/a>\n\n<h3 style=\"background-color:skyblue;font-family:newtimeroman;font-size:200%;text-align:center\">Feature Engineering<\/h3>\n","0cc291e1":"<a id=\"1.1\"><\/a>\n\n<h3 style=\"background-color:skyblue;font-family:newtimeroman;font-size:200%;text-align:center\">Exploratory Data Analysis<\/h3>\n","6b6bf8c0":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>We can clearly see in the word clouds above that in each movie the most common words are the names of the main protagonists which is less surprising.<\/span><\/p>\n<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>What is really interesting are the words that seem random to plain sight but appear a significant amount of times throughout the different movies &quot;eye&quot; or &quot;cut&quot;.<\/span><\/p>\n<p><br><\/p>","5a553d10":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>We can see that most of the scenes in the Terminator franchise have a dominance of neutral sentiment and on average more negative sentiment than positive.<br><\/span><\/p>\n<p><br><\/p>","45e32253":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>In the above code cell, we use the spacy token entity recognition to count for each script the amount of different key ideas are involved.<\/span><\/p>\n<p style=\"text-align: center;\"><span style=\"font-size: 24px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Key ideas such as the number of people names mentioned in a scene or the number of events mentioned.<\/span><\/span><\/p>\n<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'><br><\/span><\/p>\n<p><br><\/p>","b2263b76":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>Above we can observe in the word clouds that the time of day in which the scene is occurring appears in most scene samples.&nbsp;<\/span><\/p>\n<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>We will create a separate feature which will state one of 3 times of day: Day, Dawn, Night.<\/span><\/p>\n<p><br><\/p>","648e3ef5":"<a id=\"1.1\"><\/a>\n<h3 style=\"background-color:skyblue;font-family:newtimeroman;font-size:200%;text-align:center\">Libraries And Utilities<\/h3>\n","3391c9b4":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>Most of the scenes in the Terminator franchise are filmed at night time.<br><\/span><\/p>\n<p><br><\/p>","fac074aa":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>Now that we have our preprocessed dataframe with all the scenes and script we will want to derive features from the text data.<\/span><\/p>\n<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'><br><\/span><\/p>\n<p><br><\/p>","7441fc4a":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>Interesting! as the terminator franchise progress the distribution of words keeps widening which points to the appearance of much longer scenes<br><\/span><\/p>\n<p><br><\/p>","62c27fcc":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>As the terminator franchise progress the distribution of stopwords keeps widening which points to the appearance of much longer scenes<br><\/span><\/p>\n<p><br><\/p>","ce7f0d82":"<a id=\"1.1\"><\/a>\n\n<h3 style=\"background-color:skyblue;font-family:newtimeroman;font-size:200%;text-align:center\">Data Preprocessing<\/h3>\n"}}