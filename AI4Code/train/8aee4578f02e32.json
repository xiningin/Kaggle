{"cell_type":{"bb65aed5":"code","45064412":"code","d6c519a9":"code","8eaadcb6":"code","cdacb480":"code","b40991ba":"code","02515be3":"code","149e1b1c":"code","752fb612":"markdown","fb7bc8fd":"markdown","4ef77552":"markdown","69897a83":"markdown","e7d453b2":"markdown","198a4219":"markdown","c81feae8":"markdown","17228616":"markdown","5771c3f7":"markdown","b1115532":"markdown","fdad0bbd":"markdown"},"source":{"bb65aed5":"# NumPy is a Python library for adding support for large, multi-dimensional arrays\nimport numpy as np\n\n# pyplot is a collection of command style functions that make matplotlib work like MATLAB\nimport matplotlib.pyplot as plt\n\n# I\/o data and work with dataset\nimport pandas as pd","45064412":"# Read data from the csv file with pandas \ndataset = pd.read_csv('..\/input\/dataset\/Position_Salaries.csv')\n\n# Get all the rows and start getting columns from 1 except the last column (all independent variables)\n# We ignore first column because the second column is representing the first column by number,\n# if first column was just a categorical variable like the name of cities or status or some thing like that we needed to use encodings like OneHotEncoding to turn them into numbers\nX = dataset.iloc[:, 1:-1].values\n\n# Get all the rows and get only the last column which is the dependent variable\ny = dataset.iloc[:, -1].values","d6c519a9":"from sklearn.linear_model import LinearRegression\n\n# Create linear regression object to implement on dataset\nlin_reg = LinearRegression()\n\n# Train the model on dataset \nlin_reg.fit(X,y)","8eaadcb6":"from sklearn.preprocessing import PolynomialFeatures\n\n# Create polynomial regression object to implement on dataset and enter the degree, the higher degree leads to higher Accuracy but need more recourse\npol_reg = PolynomialFeatures(degree = 2)\n\n# Apply model to matrix of feature X to create new matrix up to power 2 (the degree we set in the previous line y = b + bx + bx^2)\nX_poly = pol_reg.fit_transform(X)\n\n# Create linear regression object for the new implementation \nlin_reg_2 = LinearRegression()\n\n# Implementing the linear regression with the new matrix of features X generated by the polynominal model \nlin_reg_2.fit(X_poly,y)","cdacb480":"# Draw scatter with the real data with red color dots \nplt.scatter(X,y,color = 'red')\n\n# Draw the line for the linear regression with blue color line\nplt.plot(X,lin_reg.predict(X),color = 'blue')\n\n# Set the plot title\nplt.title('Linear Regression')\n\n# Set the x axis name \nplt.xlabel('Position Level')\n\n# Set the y axis name \nplt.ylabel('Salary')\n\n#draw the plot\nplt.show()\n","b40991ba":"# Draw scatter with the real data with red color dots \nplt.scatter(X,y,color = 'red')\n\n# Draw the line for the polyominal linear regression with blue color line (just two simple change with linear first the model and seceond the matrix of feature X)\nplt.plot(X,lin_reg_2.predict(X_poly),color = 'blue')\n\n# Set the plot title\nplt.title(' Polynominal Linear Regression')\n\n# Set the x axis name \nplt.xlabel('Position Level')\n\n# Set the y axis name \nplt.ylabel('Salary')\n\n#draw the plot\nplt.show()","02515be3":"# Evaluate the Linear Model \nlin_reg.predict([[6.5]])\n\n# You should consider that the given number to predict method must be two dimentional array (2D array) and you will get error if you try lin_reg.predict(6.5)\n# 6.5 scalar \n# [6.5] one dimentional array (1D array)\n# [[6.5]] two dimentional array (2D array)\n\n","149e1b1c":"# Evaluate the Polynominal Linear Model (this is the better result for sure)\nlin_reg_2.predict(pol_reg.fit_transform([[6.5]]))","752fb612":"## Visualising the Polynomial Regression results","fb7bc8fd":"## Visualising the Linear Regression results","4ef77552":"**Explaining the project**\nwe have dataset which is representing job levels with the respective salaries, we want to create a model to predict the salary by giving the job level, and we are going to compare the linear regression model with the polynominal regression model and see which one is more accurate.\nwhich one do you think will perform better?\nI can not wait anymore too.\nlets see together :) .","69897a83":"## Importing the dataset","e7d453b2":"## Training the Linear Regression model on the whole dataset","198a4219":"## Predicting a new result with Linear Regression","c81feae8":"## Training the Polynomial Regression model on the whole dataset","17228616":"# Compare Polynomial Linear Regression With Linear Regression ","5771c3f7":"## Predicting a new result with Polynomial Regression","b1115532":"# Please change the degree to higher numbers to get more accurate results\n\nchange the degree and train the model again and check the predict method and comment your result and compare it with the previous one is it better ?\nthanks so much for your attention.","fdad0bbd":"## Importing the libraries"}}