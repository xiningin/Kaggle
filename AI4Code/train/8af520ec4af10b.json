{"cell_type":{"11383195":"code","2251e436":"code","83e81975":"code","2f667e6d":"code","a57f852a":"code","e18fa5a6":"code","47cff93c":"code","73b1f49b":"code","78522de1":"code","70d00195":"code","3c80fa83":"code","d0fe4007":"code","d95af282":"code","008e5da6":"code","ff4ce8a4":"code","3895a684":"code","af53e0e7":"code","65526af2":"code","21160934":"code","447ca04e":"code","0c8e1815":"code","d37aec87":"code","982a2d72":"markdown","3fd5e9f1":"markdown","58131633":"markdown","c5c95afe":"markdown","805a3741":"markdown","11791daa":"markdown","ef055b48":"markdown","b3331eb4":"markdown"},"source":{"11383195":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","2251e436":"hd = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","83e81975":"hd.head()","2f667e6d":"hd.shape","a57f852a":"hd.info()","e18fa5a6":"hd.describe()","47cff93c":"# Checking for null values\nhd.isnull()","73b1f49b":"hd.isna().sum()","78522de1":"# Count of number of patients with heart disease and without\nhd['target'].value_counts()","70d00195":"sns.set_style(\"darkgrid\")\nsns.countplot(x='target',data=hd)","3c80fa83":"plt.figure(figsize=(14,10))\nsns.countplot(x='age', hue='target', data = hd, palette = 'colorblind',edgecolor = sns.color_palette('dark',n_colors = 1))","d0fe4007":"# Correlation\nhd.corr()","d95af282":"plt.figure(figsize=(14,10))\nsns.heatmap(hd.corr(), annot= True)","008e5da6":"X = hd.iloc[:, :-1].values\nY = hd.iloc[:, -1].values","ff4ce8a4":"# Train-test split 30-70\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.30, \n                                                    random_state=101)","3895a684":"#Scaling the data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","af53e0e7":"def models(X_train,y_train):\n    \n    #Logistic Regression\n    from sklearn.linear_model import LogisticRegression\n    log = LogisticRegression(random_state=0)\n    log.fit(X_train, y_train)\n    \n    #Decision Tree\n    from sklearn.tree import DecisionTreeClassifier\n    decision_tree = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\n    decision_tree.fit(X_train, y_train)\n    \n    #Random Forest\n    from sklearn.ensemble import RandomForestClassifier\n    random_forest = RandomForestClassifier(n_estimators=10,criterion = 'entropy', random_state=0)\n    random_forest.fit(X_train, y_train)\n    \n    #Model Accuracy on Training Data\n    print('[0]Logistic Regression Training Acc:', log.score(X_train,y_train))\n    print('[1]Decision Tree Training Acc:', decision_tree.score(X_train,y_train))\n    print('[2]Random Forest Training Acc:', random_forest.score(X_train,y_train))\n    \n    return log, decision_tree, random_forest","65526af2":"model = models(X_train,y_train)","21160934":"# Acc on Testing Data\nfrom sklearn.metrics import confusion_matrix\n\nfor i in range(len(model)):\n    print('Model ', i)\n    cm = confusion_matrix(y_test, model[i].predict(X_test))\n\n    tp = cm[0][0]\n    tn = cm[1][1]\n    fp = cm[1][0]\n    fn = cm[0][1]\n\n    print(cm)\n    print('Testing Acc = ', (tp + tn)\/(tp +tn +fn + fp))\n    print()","447ca04e":"# Logistic Regression\npred = model[0].predict(X_test)\nprint(pred)\nprint()\nprint(y_test)","0c8e1815":"# Decision Tree\npred = model[1].predict(X_test)\nprint(pred)\nprint()\nprint(y_test)","d37aec87":"# Random Forest\npred = model[1].predict(X_test)\nprint(pred)\nprint()\nprint(y_test)","982a2d72":"No missing values!","3fd5e9f1":"<font size=\"4\"> <b> Splitting and Scaling the Data <\/font> <b>","58131633":"<font size=\"4\"> <b> Models and Accuracy <\/font> <b>","c5c95afe":"<b> Importing Libraries <b>","805a3741":"<font size=\"4\"> <b> Predictions <\/font> <b>","11791daa":"In this project, we will be prediciting whether a person has heart disease or not based on the attributes given","ef055b48":"# Heart Disease Prediction","b3331eb4":"<font size=\"4\"> <b> Exploratory Data Analysis <\/font> <b>"}}