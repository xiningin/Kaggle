{"cell_type":{"0d7314cb":"code","67dc0a9a":"code","83507c3f":"code","fab27111":"code","48a402e7":"code","2288d67e":"code","a36a7ac1":"code","3334e667":"code","1e3a722e":"code","14f9eb60":"code","fe0db6f7":"code","26829346":"code","f43605f3":"code","a36059f2":"code","584502ae":"code","f749c81d":"code","f83dc52b":"code","71377eb0":"code","d4e89310":"code","a056d53f":"code","2a7fd531":"code","c8eda921":"code","e77d3de3":"code","baf7861b":"code","7198cdc5":"code","c837214d":"markdown"},"source":{"0d7314cb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import norm, skew","67dc0a9a":"def one_hot_encode(df, label):\n    onehot = pd.get_dummies(df[label],prefix=label)\n    df.drop(label, axis=1,inplace = True)\n    return df.join(onehot)","83507c3f":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntest_id = test['Id']\ntrain_len = len(train)\n\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\ny_train = train.SalePrice.values\nall_df = pd.concat([train, test], keys=['train', 'test'])","fab27111":"all_df = all_df.drop(['Id','PoolQC'], axis=1)","48a402e7":"all_df['Alley'] = all_df['Alley'].fillna('None')\nall_df['MasVnrType'] = all_df['MasVnrType'].fillna('None')\nall_df['BsmtQual'] = all_df['BsmtQual'].fillna(all_df['BsmtQual'].mode()[0])\nall_df['BsmtCond'] = all_df['BsmtCond'].fillna(all_df['BsmtCond'].mode()[0])\nall_df['FireplaceQu'] = all_df['FireplaceQu'].fillna('missing')\nall_df['GarageType'] = all_df['GarageType'].fillna('missing')\nall_df['GarageFinish'] = all_df['GarageFinish'].fillna('missing')\nall_df['GarageQual'] = all_df['GarageQual'].fillna('missing')\nall_df['GarageCond'] = all_df['GarageCond'].fillna('missing')\nall_df['Fence'] = all_df['Fence'].fillna('missing')\nall_df['Street'] = all_df['Street'].fillna('missing')\nall_df['LotShape'] = all_df['LotShape'].fillna('missing')\nall_df['LandContour'] = all_df['LandContour'].fillna('missing')\nall_df['BsmtExposure'] = all_df['BsmtExposure'].fillna(all_df['BsmtExposure'].mode()[0])\nall_df['BsmtFinType1'] = all_df['BsmtFinType1'].fillna('missing')\nall_df['BsmtFinType2'] = all_df['BsmtFinType2'].fillna('missing')\nall_df['CentralAir'] = all_df['CentralAir'].fillna('missing')\nall_df['Electrical'] = all_df['Electrical'].fillna(all_df['Electrical'].mode()[0])\nall_df['MiscFeature'] = all_df['MiscFeature'].fillna('missing')\nall_df['MSZoning'] = all_df['MSZoning'].fillna(all_df['MSZoning'].mode()[0])    \nall_df['Utilities'] = all_df['Utilities'].fillna('missing')\nall_df['Exterior1st'] = all_df['Exterior1st'].fillna(all_df['Exterior1st'].mode()[0])\nall_df['Exterior2nd'] = all_df['Exterior2nd'].fillna(all_df['Exterior2nd'].mode()[0])    \nall_df['KitchenQual'] = all_df['KitchenQual'].fillna(all_df['KitchenQual'].mode()[0])\nall_df[\"Functional\"] = all_df[\"Functional\"].fillna(\"Typ\")\nall_df['SaleType'] = all_df['SaleType'].fillna(all_df['SaleType'].mode()[0])\nall_df['SaleCondition'] = all_df['SaleCondition'].fillna('missing')\n\nflist = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF',\n                 'TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea',\n                 'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                 'TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF',\n                 'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal', 'GarageYrBlt']\nfor fl in flist:\n    all_df[fl] = all_df[fl].fillna(0)","2288d67e":"all_df = all_df.drop(['GarageCars'], axis=1)","a36a7ac1":"def OrdinalQ(x):\n    if(x=='Ex'):\n        val = 0\n    elif(x=='Gd'):\n        val = 1\n    elif(x=='TA'):\n        val = 2\n    elif(x=='Fa'):\n        val = 3\n    elif(x=='missing'):\n        val = 4\n    else:\n        val = 5\n    return val\n\nall_df['ExterQual'] = all_df['ExterQual'].apply(OrdinalQ)\nall_df['ExterCond'] = all_df['ExterCond'].apply(OrdinalQ)\nall_df['KitchenQual'] = all_df['KitchenQual'].apply(OrdinalQ)\nall_df['HeatingQC'] = all_df['HeatingQC'].apply(OrdinalQ)\nall_df['BsmtQual'] = all_df['BsmtQual'].apply(OrdinalQ)\nall_df['BsmtCond'] = all_df['BsmtCond'].apply(OrdinalQ)\nall_df['FireplaceQu'] = all_df['FireplaceQu'].apply(OrdinalQ)\nall_df['GarageQual'] = all_df['GarageQual'].apply(OrdinalQ)","3334e667":"def OrdinalSlope(x):\n    if(x=='Gtl'):\n        val = 0\n    elif(x=='Mod'):\n        val = 1\n    elif(x=='Sev'):\n        val = 2\n    else:\n        val = 3\n    return val\n\nall_df['LandSlope'] = all_df['LandSlope'].apply(OrdinalSlope)","1e3a722e":"def OrdinalGarageF(x):\n    if(x=='Fin'):\n        val = 0\n    elif(x=='RFn'):\n        val = 1\n    elif(x=='Unf'):\n        val = 2\n    else:\n        val = 3\n    return val\n\nall_df['GarageFinish'] = all_df['GarageFinish'].apply(OrdinalGarageF)","14f9eb60":"def OrdinalBsmtExp(x):\n    if(x=='Gd'):\n        val = 0\n    elif(x=='Av'):\n        val = 1\n    elif(x=='Mn'):\n        val = 2\n    elif(x=='No'):\n        val = 3\n    else:\n        val = 4\n    return val\n\nall_df['BsmtExposure'] = all_df['BsmtExposure'].apply(OrdinalBsmtExp)","fe0db6f7":"def OrdinalFunc(x):\n    if(x=='Typ'):\n        val = 0\n    elif(x=='Min1' or x=='Min2'):\n        val = 1\n    elif(x=='Mod'):\n        val = 2\n    elif(x=='Maj1' or x=='Maj2'):\n        val = 3\n    elif(x=='Sev'):\n        val = 4\n    else:\n        val = 5\n    return val\n\nall_df['Functional'] = all_df['Functional'].apply(OrdinalFunc)","26829346":"def OrdinalBsmtType(x):\n    if(x=='GLQ'):\n        val = 6\n    elif(x=='ALQ'):\n        val = 5\n    elif(x=='BLQ'):\n        val = 4\n    elif(x=='Rec'):\n        val = 3   \n    elif(x=='LwQ'):\n        val = 2\n    elif(x=='Unf'):\n        val = 1        \n    else:\n        val = 0\n    return val\n\nall_df['BsmtFinType1'] = all_df['BsmtFinType1'].apply(OrdinalBsmtType)\nall_df['BsmtFinType2'] = all_df['BsmtFinType2'].apply(OrdinalBsmtType)","f43605f3":"def OrdinalFence(x):\n    if(x=='GdPrv'):\n        val = 0\n    elif(x=='MnPrv'):\n        val = 1\n    elif(x=='GdWo'):\n        val = 2\n    elif(x=='MnWw'):\n        val = 3\n    else:\n        val = 4\n    return val\n\nall_df['Fence'] = all_df['Fence'].apply(OrdinalFence)","a36059f2":"def OrdinalSaleCond(x):\n    if(x=='Normal'):\n        val = 0\n    elif(x=='Abnorml'):\n        val = 1\n    elif(x=='AdjLand'):\n        val = 2\n    elif(x=='Alloca'):\n        val = 3\n    elif(x=='Family'):\n        val = 4\n    else:\n        val = 5\n    return val\n\nall_df['SaleCondition'] = all_df['SaleCondition'].apply(OrdinalSaleCond)","584502ae":"def OrdinalLotShape(x):\n    if(x=='Reg'):\n        val = 0\n    elif(x=='IR1'):\n        val = 1\n    elif(x=='IR2'):\n        val = 2\n    else:\n        val = 3\n    return val\n\nall_df['LotShape'] = all_df['LotShape'].apply(OrdinalLotShape)","f749c81d":"def OrdinalUtil(x):\n    if(x=='AllPub'):\n        val = 0\n    elif(x=='NoSewr'):\n        val = 1\n    elif(x=='NoSeWa'):\n        val = 2\n    else:\n        val = 3\n    return val\n\nall_df['Utilities'] = all_df['Utilities'].apply(OrdinalUtil)","f83dc52b":"all_df['CentralAir'] = all_df['CentralAir'].apply( lambda x: 0 if x == 'N' else 1) \nall_df['PavedDrive'] = all_df['PavedDrive'].apply( lambda x: 0 if x == 'Y' else 1)\nall_df['Street'] = all_df['Street'].apply( lambda x: 0 if x == 'Pave' else 1) ","71377eb0":"all_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Alley\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"BldgType\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Condition1\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Condition2\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Electrical\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Exterior1st\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Exterior2nd\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Foundation\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"GarageCond\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"GarageType\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Heating\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"HouseStyle\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"LandContour\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"LotConfig\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"MSZoning\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"MasVnrType\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"MiscFeature\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"Neighborhood\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"RoofMatl\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"RoofStyle\").join(all_df[\"SalePrice\"])\nall_df = one_hot_encode(all_df.drop(\"SalePrice\", axis=1), \"SaleType\").join(all_df[\"SalePrice\"])","d4e89310":"all_df.drop(['SalePrice'], axis=1, inplace=True)","a056d53f":"from sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb","2a7fd531":"train = all_df[:train_len]\ntest = all_df[train_len:]","c8eda921":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","e77d3de3":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","baf7861b":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","7198cdc5":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = xgb_pred\nsub.to_csv('submission.csv',index=False)","c837214d":"# Simple Imputation and Encoding"}}