{"cell_type":{"d23c6725":"code","6018e934":"code","89fb9c78":"code","52c0edfa":"code","31ed353b":"code","e2aaeacf":"code","ed9cf402":"code","14eb0267":"code","1bb6a1db":"code","0031d8c7":"code","c9661776":"code","f0a02066":"code","d8030443":"code","cd4158bd":"code","67e2b557":"code","2bcf8000":"code","0d966277":"markdown","4012f9f9":"markdown","b5e406dd":"markdown","b9ef90ad":"markdown","d8c1ce09":"markdown","6c8dedb2":"markdown","69c97339":"markdown","0183d96e":"markdown","a4e4a45c":"markdown","ba6bc6fc":"markdown","b476b889":"markdown"},"source":{"d23c6725":"# import modules\nimport os\nimport numpy as np        # linear algebra\nimport pandas as pd       # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas as gpd   # geopandas\nimport geoplot\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n\nimport glob               # Used to get a file list","6018e934":"# clone\n!git clone --depth=1 https:\/\/github.com\/CSSEGISandData\/2019-nCoV.git\n\n# daily_case_updates data \n%ls 2019-nCoV\/csse_covid_19_data\/csse_covid_19_daily_reports\/","89fb9c78":"# read csv files\nCSV_FILES = glob.glob('.\/2019-nCoV\/csse_covid_19_data\/csse_covid_19_daily_reports\/*.csv')\n\n# join\ndf_list = []\nfor file in CSV_FILES:\n    read_df = pd.read_csv(file)\n    # Add Date series\n    read_df[\"Date\"] = os.path.basename(file.rstrip(\".csv\"))\n    read_df[\"Date\"] = pd.to_datetime(read_df[\"Date\"], format='%m-%d-%Y')\n    # Adopt format from 03-23-2020\n    if 'Province_State' not in read_df.columns:\n        read_df = read_df.rename(columns={\n            'Province\/State': 'Province_State',\n            'Country\/Region': 'Country_Region',\n            'Last Update': 'Last_Update'})\n    df_list.append(read_df)\n\ndf = pd.concat(df_list, sort=False)\n\n# data cleaning\ndf = df.loc[:,[\"Province_State\", \"Country_Region\", \"Date\", \"Last_Update\", \"Confirmed\", \"Deaths\", \"Recovered\"]]\n\nTYPOS={\n    \" Azerbaijan\": \"Azerbaijan\"\n}\ndf.replace(TYPOS, inplace=True)\n\n# Save\ndf.to_csv('INPUT.csv', encoding='utf_8', index=False)\ndf.info()","52c0edfa":"df = pd.read_csv(\".\/INPUT.csv\")\ndf.info()","31ed353b":"# fill NaN\ndf = df.fillna({\"Province_State\": 'None'})\n\n# Change astype\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"])\ndf[\"Last_Update\"] = pd.to_datetime(df[\"Last_Update\"])\ndf[\"Confirmed\"] = df[\"Confirmed\"].fillna(0).astype('int')\ndf[\"Deaths\"] = df[\"Deaths\"].fillna(0).astype('int')\ndf[\"Recovered\"] =df[\"Recovered\"].fillna(0).astype('int')\ndf.info()","e2aaeacf":"REPLACE_LIST={\n    \"Mainland China\": \"China\",\n    \"Hong Kong\": \"China\",\n    \"Macau\": \"China\",\n    \"United States\": \"United States of America\",\n    \"US\": \"United States of America\",\n    \"UK\": \"United Kingdom\",\n    \"Singapore\": \"Malaysia\",\n    \"Ivory Coast\": \"C\u00f4te d'Ivoire\",\n    \"Bahrain\": \"Qatar\",\n    \"North Macedonia\": \"Macedonia\",\n    \"San Marino\": \"Italy\",\n    \"North Ireland\": \"United Kingdom\",\n    \"Monaco\": \"France\",\n    \"Dominican Republic\": \"Dominican Rep.\",\n    \"Czech Republic\": \"Czechia\",\n    \"Faroe Islands\": \"Denmark\",\n    \"Gibraltar\": \"United Kingdom\",\n    \"Saint Barthelemy\": \"France\",\n    \"Vatican City\": \"Italy\",\n    \"Bosnia and Herzegovina\":\"Bosnia and Herz.\",\n    \"Malta\": \"Italy\",\n    \"Martinique\":\"France\",\n    \"Republic of Ireland\": \"Ireland\",\n    \"Iran (Islamic Republic of)\": \"Iran\",\n    \"Republic of Korea\": \"South Korea\",\n    \"Hong Kong SAR\": \"China\",\n    \"Macao SAR\": \"China\",\n    \"Viet Nam\": \"Vietnam\",\n    \"Taipei and environs\": \"Taiwan\",\n    \"occupied Palestinian territory\": \"Palestine\",\n    \"Russian Federation\": \"Russia\",\n    \"Holy See\": \"Italy\",\n    \"Channel Islands\": \"United Kingdom\",\n    \"Republic of Moldova\": \"Moldova\",\n    \"Cote d'Ivoire\": \"C\u00f4te d'Ivoire\",\n    \"Congo (Kinshasa)\": \"Dem. Rep. Congo\",\n    \"Korea, South\": \"South Korea\",\n    \"Taiwan*\": \"Taiwan\",\n    \"Reunion\": \"France\",\n    \"Guadeloupe\": \"France\",\n    \"Cayman Islands\": \"United Kingdom\", \n    \"Aruba\": \"Netherlands\",\n    \"Curacao\": \"Netherlands\",\n    \"Eswatini\":\"eSwatini\",\n    \"Saint Vincent\": \"Italy\",\n    \"Equatorial Guinea\": \"Eq. Guinea\",\n    \"Central African Republic\": \"Central African Rep.\",\n    \"Congo (Brazzaville)\" : \"Congo\",\n    \"Republic of the Congo\": \"Congo\",\n    \"Mayotte\": \"France\",\n    \"Guam\": \"United States of America\",\n    \"The Bahamas\": \"Bahamas\",\n    \"Others\": \"Diamond Princess\",\n    \"Cruise Ship\": \"Diamond Princess\",\n    \"The Gambia\": \"Gambia\",\n    \"Gambia, The\": \"Gambia\",\n    \"Bahamas, The\": \"Bahamas\",\n    \"Cabo Verde\": \"Cape Verde\",\n    \"East Timor\": \"Timor-Leste\",\n    \"West Bank and Gaza\": \"Palestine\",\n    \"Burma\": \"Myanmar\",\n    \"South Sudan\": \"S. Sudan\",\n    \"Western Sahara\": \"W. Sahara\"\n}\n\n# As Singapore is not on the geopanda world map,\n# the solution is to transfer Singapore to a nearby country.\ndf[\"Country_Region\"] = df[\"Country_Region\"].replace(REPLACE_LIST)","ed9cf402":"# Use Date as Last Update.\nLAST_UPDATE = df[\"Date\"].max()\n\n# datetime string\nLAST_UPDATE_STRING = pd.to_datetime(LAST_UPDATE).strftime('%Y-%m-%d(EST)')\n\nprint(f\"LAST_UPDATE is {LAST_UPDATE_STRING}\")\n\n# Sort\ndf = df.sort_values([\"Date\"])\n\n# Select last dataframe\nlast = df[df.Date == LAST_UPDATE]\n\nlast.sort_values([\"Confirmed\", 'Country_Region'], ascending=False)","14eb0267":"# Geopandas world map\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n# Remove Antarctica\nworld = world[(world.pop_est>0) & (world.name!=\"Antarctica\")]\n\n\n# Split French Guiana from France.\nshape = world[world['name'] == 'France']['geometry'].all()\n\n# shape[0] is French Guiana in South America\ngu_df = gpd.GeoDataFrame({\"name\": [\"French Guiana\"],\n                          \"pop_est\":[250109],\n                          \"continent\":[\"South America\"],\n                          \"gdp_md_est\":[52000.0],\n                          \"iso_a3\": -99},\n                         geometry=[shape[0]])\n\nworld = world.append(gu_df, sort=False, ignore_index=True)\n\n# shape[1,2] is France in Europa\nfr_df = gpd.GeoDataFrame(pd.Series(['France', 'France'], name='country'),\n                         geometry=[shape[1], shape[2]])\nfr_geometry = fr_df.dissolve(by='country')['geometry'].values\n\nworld.at[world['name'] == 'France', 'geometry'] = fr_geometry","1bb6a1db":"# For simplicity\nHIDDEN = [\n    \"Diamond Princess\", \"Antigua and Barbuda\", \"Saint Lucia\", \"Jersey\",\n    \"Liechtenstein\", \"Saint Vincent and the Grenadines\", \"Guernsey\",\n    \"Maldives\", \"Andorra\", \"Seychelles\", \"Saint Martin\", \"Barbados\",\n    \"Mauritius\", \"Cape Verde\", \"Dominica\", \"Grenada\", \"Saint Kitts and Nevis\",\n    \"MS Zaandam\", \"Sao Tome and Principe\", \"Comoros\"]\n\n# Country check\nfor c in last[\"Country_Region\"].unique():\n    if not c in world[\"name\"].values and not c in HIDDEN:\n        print(f\"Error {c} is not found.\"\n              f\" Please edit REPLACE_LIST.\")\nprint(\"The rest of the country names that have not yet matched:\\n\",\n      set(world.name.unique()) - set(last[\"Country_Region\"].unique()))\n\nworld.name.unique()","0031d8c7":"last_c = last.groupby(['Country_Region']).sum()\nlast_c.sort_values([\"Confirmed\", 'Country_Region'], ascending=False)\n\n# Guyana in France uses the same values as in the home country,\n# because the latest format has been integrated into France.\nlast_c = last_c.append(last_c.loc[\"France\"].rename(\"French Guiana\"))\nlast_c","c9661776":"world_corona = pd.merge(world, last_c, left_on='name', right_on='Country_Region', how='left')\nworld_corona","f0a02066":"# Fiji islands\nworld_corona = world_corona.set_index(\"name\")\nworld_corona.at['Fiji', \"continent\"] = \"World\"\n# Russia\nworld_corona.at[\"Russia\", \"continent\"] = \"World\"","d8030443":"def plot(hue, maxval, title, area=world_corona, cmap='OrRd'):\n    if maxval == 0:\n        maxval = 1\n    \n    geoplot.choropleth(\n        area, hue=hue,\n        cmap=cmap, figsize=(16, 9), legend=True,\n        norm=colors.LogNorm(vmin=1, vmax=maxval)\n    )\n\n    plt.title(title)\n\n# log scale max\nmaxval = world_corona['Confirmed'].max()\n\n# world plot\nplot(world_corona[\"Confirmed\"], maxval,\n     f\"Novel Coronavirus (COVID-19) Cases as of {LAST_UPDATE_STRING}\",\n     world_corona)\nplt.savefig(\"Map_World.png\", bbox_inches='tight',\n                pad_inches=0.1, transparent=False, facecolor=\"white\")\n","cd4158bd":"# option area plot\nfor continent in world['continent'].unique():\n    if continent != 'Seven seas (open ocean)':\n        area = world_corona[world_corona[\"continent\"] == continent]\n        plot(area[\"Confirmed\"], maxval,\n             f\"Novel Coronavirus (2019-nCoV) Cases in {continent} as of {LAST_UPDATE_STRING}\",\n             area)\n        plt.savefig(f\"Map_{continent}.png\", bbox_inches='tight',\n                pad_inches=0.1, transparent=False, facecolor=\"white\")\n","67e2b557":"NDAY = -7\nunique_date = np.sort(df[\"Date\"].unique())\n\n# select one week ago\nn_days_ago = df[df[\"Date\"] == unique_date[NDAY]].groupby([\"Country_Region\"]).sum()\n\n# diff\nlast_c_week = last_c.sub(n_days_ago, fill_value=0).sort_values([\"Confirmed\", 'Country_Region'], ascending=False)\nlast_c_week","2bcf8000":"# merge map\nworld_corona_week = pd.merge(world, last_c_week, left_on='name', right_on='Country_Region', how='left')\n\ngeoplot.choropleth(\n    world_corona_week, hue=world_corona_week['Confirmed'],\n    cmap='coolwarm', figsize=(16, 9), legend=False,\n    norm=colors.LogNorm(vmin=1, vmax=world_corona_week['Confirmed'].max())\n)\n\nplt.title(f\"Countries with the high number of new cases of COVID-19 in the past week {LAST_UPDATE_STRING}\")\n\nplt.savefig(\"Map_Past_Weeks_World.png\", bbox_inches='tight',\n                pad_inches=0.1, transparent=False, facecolor=\"white\")\n","0d966277":"# Sum\n\nThis sum is for plotting on the map. Replaced country name.","4012f9f9":"# Prepare data","b5e406dd":"**Ignore Diamond Princess(Cruise Ship) because they cannot be represented on the map.**\n\n**Andorra was between France and Spain and was not included in either.**\n\n**Ignore Saint Martin because it has both French and Dutch territories.**\n\n**Liechtenstein was between Switzerland and Austria and was not included in either.**\n\n**Ignore Maldives because they cannot be represented on the map.**\n\n**Ignore Antigua and Barbuda because they cannot be represented on the map.**\n\n**Ignore Guernsey because they cannot be represented on the map.**\n\n**Ignore Saint Lucia because they cannot be represented on the map.**\n\n**Ignore Jersey because they cannot be represented on the map.**\n\n**Ignore Seychelles because they cannot be represented on the map.**\n\n**Ignore Saint Vincent and the Grenadines because they cannot be represented on the map.**\n\n**Ignore Barbados because they cannot be represented on the map.**\n\n**Ignore Mauritius because they cannot be represented on the map.**\n\n**Ignore Cape Verde because they cannot be represented on the map.**\n\n**Ignore Dominica because they cannot be represented on the map.**\n\n**Ignore MS Zaandam(Cruise Ship) because they cannot be represented on the map.**\n\n**Ignore Sao Tome and Principe because they cannot be represented on the map.**\n\n**Ignore Comoros because they cannot be represented on the map.**\n","b9ef90ad":"# Plot\nIt is known that the increase in the number of infected people follows a logistic function under natural conditions. The number of infected people is expected to increase exponentially to the turning point of the trend. (See [the past example of Ebola in 2014](https:\/\/www.kaggle.com\/hotstaff\/fitting-to-logistic-function-and-graph-drawing).)\nFor this reason, we have determined that it is best to use logarithmic color coding to indicate the degree of risk.","d8c1ce09":"# Merge dataset\nAdd the summary result to the geopanda's dataframe.","6c8dedb2":"# Clone Dataset and build\n\n## git:\nhttps:\/\/github.com\/CSSEGISandData\/2019-nCoV.git\n","69c97339":"# Load world map\n\n## Split French Guiana from France\nSeparate French Guyana from France and move to South America.","0183d96e":"# Applications\n\n## Countries with the high number of new cases in the past week\n\nThe movement of the trendy center can be visualized on the map.","a4e4a45c":"## Migration and Rename countries\n\nSince the dataset has country names that are not included in the geopandas world, migrate them to existing names.\n\n**[Note] If a country name not found by the check, it is necessary to replace it manually.**","ba6bc6fc":"### Introduction\nThis is a preliminary version of the Coronavirus epidemic map.\nCurrently, datasets are changing in real time and may not be rendered.\n\n**Since the update of the dataset has stopped, switch to the method of obtaining data from official github.**\n\n**Last Update: 2020-08-22(EST)**\n","b476b889":"## Some Fix\n\n### Fiji islands\nI don't know the cause, but I excluded the Fiji Islands because the size of the graph was abnormal.\n\n### Russia\nRussia is Europe, but the map is easier to read if it is included in World because it is too large."}}