{"cell_type":{"adfebff8":"code","bfc74d14":"code","494ccdf5":"code","ad4c7580":"code","2b1a1c69":"code","3aa8fd48":"code","63cb626d":"code","4123fae7":"code","20859e92":"code","ec1a9303":"code","94816079":"code","c2b1d883":"code","0ac5ad33":"code","b83ba8dc":"code","01b2a1d0":"markdown"},"source":{"adfebff8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bfc74d14":"# \ub370\uc774\ud130 \ub85c\ub4dc\ntrain = pd.read_csv('\/kaggle\/input\/2021-ai-quiz1-p2\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/2021-ai-quiz1-p2\/test.csv')\nsubmit = pd.read_csv('\/kaggle\/input\/2021-ai-quiz1-p2\/submit_sample.csv')","494ccdf5":"# \ubd88\ud544\uc694\ud55c \uc5f4 \uc81c\uac70 \ubc0f \ub77c\ubca8 \ubd84\ub9ac\nlabel = train['8']\ntrain = train.drop(['Unnamed: 0','8'],axis=1)\ntest = test.drop(['Unnamed: 0','8'],axis=1)","ad4c7580":"print(train.shape, test.shape, label.shape)","2b1a1c69":"# standard scaler \ub97c \uc774\uc6a9\ud55c \uc804\ucc98\ub9ac\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\ntrain_std = scaler.fit_transform(train)\ntest_std = scaler.transform(test)","3aa8fd48":"# \ub79c\ub364 \uc2dc\ub4dc \uace0\uc815 \ubc0f gpu \uc124\uc815\nimport torch\nimport random\nimport torch.nn as nn\nimport torch.optim as optim\n\ntorch.manual_seed(1)\nrandom.seed(1)\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nprint(device)","63cb626d":"# \ud150\uc11c\ub85c \ubcc0\ud658\nX = torch.FloatTensor(train_std).to(device)\nY = torch.FloatTensor(label).to(device)","4123fae7":"print(X.shape, Y.shape)","20859e92":"# \ubaa8\ub378 \uc124\uc815 \ubc0f \ud65c\uc131\ud654 \ud568\uc218 \uc124\uc815\nlinear1 = nn.Linear(8,1,bias=True)\nsigmoid = nn.Sigmoid()\n\nmodel = nn.Sequential(linear1, sigmoid).to(device)","ec1a9303":"# \uc635\ud2f0\ub9c8\uc774\uc800 \ubc0f \uc190\uc2e4\ud568\uc218 \uc124\uc815\noptimizer = optim.SGD(model.parameters(), lr=0.01)\nloss_fn = nn.BCELoss().to(device)","94816079":"# \ubaa8\ub378 \ud559\uc2b5\nmodel.train()\nepochs = 1000\n\nfor epoch in range(epochs + 1):\n    optimizer.zero_grad()\n    output = model(X)\n    loss = loss_fn(output, Y.unsqueeze(1))\n    loss.backward()\n    optimizer.step()\n    \n    if epoch % 100 == 0:\n        print(\"Epoch: {:4d}, Cost: {:6f}\".format(epoch, loss.item()))","c2b1d883":"# \ud150\uc11c\ub85c \ubcc0\ud658\nX_test = torch.FloatTensor(test_std).to(device)\n# \ubaa8\ub378 \ud3c9\uac00\nmodel.eval()\nwith torch.no_grad():\n    predict = model(X_test)","0ac5ad33":"# \uc774\uc9c4 \ubd84\ub958\ub97c \uc704\ud574 0,1 \uac12\uc73c\ub85c \ubcc0\ud658\npred = (predict.cpu() >= torch.FloatTensor([0.5])).to(int)","b83ba8dc":"# \uc81c\ucd9c\nsubmit['Label'] = pred.detach().numpy()\nsubmit.to_csv(\"submit-2.csv\",index=False)","01b2a1d0":"## \ubd84\uc11d \uacb0\uacfc\nstandard scaler\ub97c \uc774\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uc804\ucc98\ub9ac\ud558\uc600\uc744 \ub54c \ub354 \ub192\uc740 \uc131\ub2a5\uc744 \ubcfc \uc218 \uc788\uc5c8\ub2e4. \ub610\ud55c learning rate\uac00 \ub108\ubb34 \uc791\uc73c\uba74 \ud559\uc2b5\uc774 \uc798 \uc548\ub418\uc5c8\ub2e4. epoch\ub97c \ud06c\uac8c \ud0a4\uc6cc\ub3c4 \ud070 \uc131\ub2a5 \ucc28\uc774\ub294 \uc5c6\uc5c8\uace0 \ube44\uc2b7\ud55c cost \uc218\uc900\uc5d0\uc11c \uacc4\uc18d \uc218\ub834\ud558\ub294 \ub4ef \ud588\ub2e4. \uc624\ud788\ub824 learning rate\ub97c \uc870\uc791\ud558\uc600\uc744 \ub54c \uc131\ub2a5 \ucc28\uc774\ub97c \ubcfc \uc218 \uc788\uc5c8\ub2e4. \uadf8\ub9ac\uace0 \ub808\uc774\uc5b4\ub97c \uc313\uc744 \uc218\ub85d \uc131\ub2a5\uc774 \uc548\uc88b\uc544\uc84c\ub2e4. \ud55c\uac1c\uc758 \ub808\uc774\uc5b4\ub9cc \uc788\uc744 \ub54c \uac00\uc7a5 \ub192\uc740 \uc131\ub2a5\uc774 \ub098\uc654\uace0 \uadf8\ub807\uc9c0 \uc54a\uc744 \ub54c\uc5d0\ub294 \uc624\ud788\ub824 \uacfc\uc801\ud569 \ubb38\uc81c\uac00 \uc788\uc5c8\ub358\uac83 \uac19\uc558\ub2e4. \uadf8\ub9ac\uace0 \uccab\ubc88\uc9f8 \uc544\uc774\ub514 \uc5f4\uc744 \uc81c\uac70\ud588\uc744 \ub54c \ub354 \ub192\uc740 \uc131\ub2a5\uc774 \ub098\uc654\ub2e4. \ubd88\ud544\uc694\ud55c \ub370\uc774\ud130\ub97c \uc81c\uac70\ud574\uc57c\ud55c\ub2e4."}}