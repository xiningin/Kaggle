{"cell_type":{"050937a1":"code","4db51a6a":"code","ddab7bf4":"code","75c252dc":"code","2b6d73ac":"code","3f48b4a3":"code","21403940":"code","2ebdd171":"markdown","dc5d8fcc":"markdown","20dbf797":"markdown","d82b363f":"markdown","2d5f27b6":"markdown","e1755591":"markdown","e304b5b5":"markdown","e44a0d01":"markdown","235e19b8":"markdown","42b2731e":"markdown","b2ec1957":"markdown","68946d1f":"markdown","208c892f":"markdown","cbfab1cd":"markdown","30584582":"markdown","426e9b44":"markdown","eb5a96ec":"markdown","9d43b3e2":"markdown","e4f4f0e7":"markdown"},"source":{"050937a1":"!ls  ..\/input","4db51a6a":"# load data\nfilename = '..\/input\/metamorphosis_clean.txt'\nfile = open(filename, 'rt')\ntext = file.read()\nfile.close()\n# split into words\nfrom nltk.tokenize import word_tokenize\ntokens = word_tokenize(text)\nprint(tokens[:100])","ddab7bf4":"from nltk import sent_tokenize\nsentences = sent_tokenize(text)","75c252dc":"# load data\nfile = open(filename, 'rt')\ntext = file.read()\nfile.close()\n# split into words\nfrom nltk.tokenize import word_tokenize\ntokens = word_tokenize(text)\n# remove all tokens that are not alphabetic\nwords = [word for word in tokens if word.isalpha()]\nprint(words[:100])","2b6d73ac":"from nltk.corpus import stopwords\nstop_words = stopwords.words('english')\nprint(stop_words)","3f48b4a3":"# load data\nfile = open(filename, 'rt')\ntext = file.read()\nfile.close()\n# split into words\nfrom nltk.tokenize import word_tokenize\ntokens = word_tokenize(text)\n# convert to lower case\ntokens = [w.lower() for w in tokens]\n# remove punctuation from each word\nimport string\ntable = str.maketrans('', '', string.punctuation)\nstripped = [w.translate(table) for w in tokens]\n# remove remaining tokens that are not alphabetic\nwords = [word for word in stripped if word.isalpha()]\n# filter out stop words\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\nwords = [w for w in words if not w in stop_words]\nprint(words[:100])","21403940":"# load data\nfile = open(filename, 'rt')\ntext = file.read()\nfile.close()\n# split into words\nfrom nltk.tokenize import word_tokenize\ntokens = word_tokenize(text)\n# stemming of words\nfrom nltk.stem.porter import PorterStemmer\nporter = PorterStemmer()\nstemmed = [porter.stem(word) for word in tokens]\nprint(stemmed[:100])","2ebdd171":"\nCleaning Text Data\nIn this blog, I mainly cited\nJason Brownlee's post (How to Clean Text for Machine Learning with Python)\nKendall Fortney's post (Pre-Processing in Natural Language Machine Learning)\nMaria Dobko's post (Text Data Cleaning and Preprocessing)","dc5d8fcc":"## 2. Tokenization\n### Split into Words","20dbf797":"* We can easily get result<br>\n<font color=\"red\">['dreams', 'found', 'transformed', 'bed', 'horrible']<\/font> from <font color=\"red\">['dreams', 'he', 'found', 'himself', 'transformed']<\/font> using **<font color=\"red\">set(stopwords.words('english'))<\/font>**.","d82b363f":"<font color=\"red\">tokens = word_tokenize(text)<\/font>\n\n<font color=\"black\">It does the same thing as split() we saw above.<\/font>\nWe can see  <font color=\"red\">'looked', '.', '``', 'What', \"'s\"<\/font> in this result.\n\nYou may not feel a big difference just by looking at this, but you can easily handle the split by sentences using NLTK. Let\u2019s replace **word_tokenizer** with **sent_tokenizer**","2d5f27b6":"# <font color=\"red\">Cleaning Text Data<\/font>\nIn this notebook, I mainly cited\n\n[Jason Brownlee's post (How to Clean Text for Machine Learning with Python)](https:\/\/machinelearningmastery.com\/clean-text-machine-learning-python\/)\n\n[Kendall Fortney's post (Pre-Processing in Natural Language Machine Learning)](https:\/\/towardsdatascience.com\/pre-processing-in-natural-language-machine-learning-898a84b8bd47)\n\n[Maria Dobko's post (Text Data Cleaning and Preprocessing)](https:\/\/medium.com\/@dobko_m\/nlp-text-data-cleaning-and-preprocessing-ea3ffe0406c1)","e1755591":"### 1. Install NLTK\n\n```python\npip install -U nltk\npython -m nltk.downloader all\n```\n* Usage\n```python\nimport nltk\n```","e304b5b5":"## <font color=\"navy\">NLTK <\/font>\n### <font color=\"forestGreen\">The Natural Language Toolkit, or NLTK for short, is a Python library written for working and modeling text.<\/font>\n### <font color=\"forestGreen\">It provides a high-level api to flexibly implement a variety of cleaning methods.<\/font>","e44a0d01":"## Step 4. Other tools\n### 1. Lemmatization\nLemmatization is also an alternative to removing inflection. By determining the part of text and utilizing WordNet\u2019s lexical database of English, it can get better results.\n\nIt is a more accurate but slower. Stemming may be more useful in queries for databases whereas Lemmatization may work much better when trying to determine text sentiment.\n\n### 2. Word Embedding\/Text Vectors\nWord embedding is the modern way of representing words as vectors. The aim of word embeddings is to find a series of high dimensionality vectors (one for each word) that represent the relation of words in such a way that semantically related words are \u2018close together\u2019 in that high dimensional space. Word2Vec and GloVe are the most common models for converting text to vectors. Often, T-SNE (as well as PCA) is used to reduce the dimensionality enough to display as a 2 or 3 dimensional graph. Check out this example of T-SNE applied to word embeddings.","235e19b8":"After stemming, <font color=\"red\">['morning', 'troubled']<\/font> converted to <font color=\"red\">['morn','troubl'] <\/font>by **<font color=\"red\">PorterStemmer<\/font>**.\n\nYou can also see that the tokens converted to lowercase.\n\nFinally, we have cleaned text data reducing words to their root by stemming.","42b2731e":"## Introduction\n\nTeaching a computer accurately understand word-context has been an unsolved problem for a long time. Words with the same meaning can exist in a variety of expressions, and there are even new words born every day.\n\nTo solve this problem, a variety of research directions are under way which require huge text datasets for their respective purpose.\n\nCleaning text-data is a typical pre-processing task for data science and machine learning.\n\nIt consists of getting rid of the less useful parts of text through stopword removal, dealing with capitalization, special characters and other details.\n\nToday we\u2019re going to do cleaning text  from Kafka\u2019s famous book Metamorphosis, as described in [Jason Brownlee\u2019s post](https:\/\/machinelearningmastery.com\/clean-text-machine-learning-python\/).\n\n[Download]()\n\n[Metamorphosis by Franz Kafka Plain Text UTF-8](http:\/\/www.gutenberg.org\/ebooks\/5200?msg=welcome_stranger).\n\nOpen the file and delete the header and footer information and save the file as \u201cmetamorphosis_clean.txt\u201c.\n\nWe are using python3 for the example.\n\n ","b2ec1957":"## Step 1. Sneak peek into the data","68946d1f":"## Step 2. Whitespace\/Punctuation\/Normalize Case","208c892f":"Cleaning text is used for a variety of purposes and the flexibility of NTLK allows you to focus on the core rather than on implementation itself.","cbfab1cd":"### 2. Stemming\nStemming is a process where words are reduced to a root by removing inflection through dropping unnecessary characters, usually a suffix. There are several stemming models, including Porter and Snowball. But there is a danger of \u201cover-stemming\u201d were words like \u201cuniverse\u201d and \u201cuniversity\u201d are reduced to the same root of \u201cunivers\u201d.","30584582":"### 1. Filter out Stopwords and Pipelines\nA majority of the words in a given text are connecting parts of a sentence rather than showing subjects, objects or intent. Word like \u201cthe\u201d or \u201cand\u201d can be removed by comparing text to a list of stopwords.","426e9b44":"## Step 3. Stopwords\/Stemming","eb5a96ec":"## Further Reading\n[Shubham Jain\u2019s post(Ultimate guide to deal with Text Data]\n\nIn that article you can learn different feature extraction methods, starting with some basic techniques which will lead into advanced Natural Language Processing techniques including <code>N-grams, Term Frequency, Inverse Document Frequency, Term Frequency-Inverse Document Frequency (TF-IDF),  Bag of Words and Sentiment Analysis<\/code>\n\nIn addition, if you want to dive deeper, visit video course on NLP (using Python).\n\n \n## Summary\nIn this notebook, you saw what cleaning text is and looked into it in Python codes.\n\nSpecifically, you learned it by 4 steps\n\nSneak peek into the data\nWhitespace\/Punctuation\/Normalize Case\nStopwords\/Stemming\nOther tools\nAlso, I think you have understood the pros of using NLTK compared to manually implementing it.\n\nCleaning text can be performed variously depending on the what the purpose is. It would be nice to study the methods that I haven\u2019t introduced today at Futher Reading.","9d43b3e2":"## 3. Filter Out Punctuation","e4f4f0e7":"Take a look at the data: explore its main characteristics like size and structure to see how sentences, paragraphs, text are built.\n\n* Understand how much of this data is useful for your needs.\n* Review the text to see what exactly might help.\n\nIn the case of Metamorphosis:\n\n* There are no obvious typos or spelling mistakes.\n* There\u2019s punctuation like commas, apostrophes, quotes, question marks, and more.\n* Overall it is simple"}}