{"cell_type":{"96b6ee92":"code","d301f087":"code","d329ec3c":"code","0bde9df0":"code","ac28f519":"code","d53c61b2":"code","b903bcad":"code","7d9f2f1b":"code","09958a9d":"code","6844fcfc":"markdown","20ba61a5":"markdown","2457496f":"markdown","fd2ebc12":"markdown","9a11f7eb":"markdown"},"source":{"96b6ee92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d301f087":"data = pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')\ndata.head(10)","d329ec3c":"data.info()","0bde9df0":"data.columns\n","ac28f519":"f,ax=plt.subplots(figsize=(12,12))\nsns.heatmap(data.corr(),annot=True,linecolor=\"pink\",vmin=-1.0,vmax=1.0,linewidths=.5,ax=ax,cmap=\"coolwarm\",fmt=\".1f\")","d53c61b2":"plt.scatter(data.Year,data.NA_Sales,color = \"red\",alpha = 0.3,label = \"nasales\")\nplt.legend()\nplt.xlabel(\"year\")\nplt.ylabel(\"sales\")\nplt.title(\"SALES IN NA\") \nplt.show()\nplt.scatter(data.Year,data.EU_Sales,color = \"green\",alpha = 0.2,label = \"eusales\")\nplt.legend()\nplt.xlabel(\"year\")\nplt.ylabel(\"sales\")\nplt.title(\"SALES IN EU\") \nplt.show()\nplt.scatter(data.Year,data.JP_Sales,color = \"blue\",alpha = 0.1,label = \"jpsales\")\nplt.legend()\nplt.xlabel(\"year\")\nplt.ylabel(\"sales\")\nplt.title(\"SALES IN JP\") \nplt.show()\nplt.scatter(data.Year,data.Global_Sales,color = \"yellow\",alpha = 0.1,label = \"GlobalSales\")\nplt.legend()\nplt.xlabel(\"year\")\nplt.ylabel(\"sales\")\nplt.title(\"SALES IN GLOBAL\") \nplt.show()\n","b903bcad":"data[data[\"Global_Sales\"]>30]\n\n","7d9f2f1b":"data.Year = data.Year\ndata.head()","09958a9d":"a = data.groupby(\"Platform\")\na[\"Global_Sales\"].sum()","6844fcfc":"# we can see best sellers here by years","20ba61a5":"# we can see all platform sales","2457496f":"Rank - Ranking of overall sales, integer\n\nName - The games name, object\n\nPlatform - Platform of the games release (i.e. PC,PS4, etc.), object\n\nYear - Year of the game's release, float\n\nGenre - Genre of the game ,object\n\nPublisher - Publisher of the game\n\nNA_Sales - Sales in North America \n\nEU_Sales - Sales in Europe \n\nJP_Sales - Sales in Japan \n\nOther_Sales - Sales in the rest of the world \n\nGlobal_Sales - Total worldwide sales.","fd2ebc12":"#  we can see all sales here","9a11f7eb":"# we can see best sellers here"}}