{"cell_type":{"605483a8":"code","5ff747ef":"code","40ebaddd":"code","b7ea3499":"code","f31b9007":"code","09cc4403":"code","fe03b962":"code","c2be3c1d":"code","0f452c62":"code","babab509":"code","4fe96db9":"code","9b1e8cb4":"code","8307a4c9":"code","d70c395c":"code","59e140ae":"code","881e8a64":"code","b511554a":"code","7d4bdfa4":"code","5f9de159":"code","2bfed3a1":"code","958b0b61":"code","775771be":"code","1e4132cb":"code","a2a2b1cd":"code","56683653":"code","c8cec78d":"code","30345790":"code","9e6c6f07":"code","3148c816":"code","e39d35e6":"code","d560b243":"code","e26a76a8":"code","a7d9d996":"code","fe956ef8":"code","d4621cef":"code","2711681e":"code","bc7f9028":"code","9bb398cb":"code","72e7c214":"code","53decc9f":"code","a82ccb54":"code","94bf3be4":"code","95870249":"code","94ae9017":"code","627041d5":"code","c27182f7":"code","908a8846":"code","8a5e8b88":"code","573e6e1b":"code","ab75d84e":"code","92ac24e7":"code","f271bc72":"code","a69b2cdb":"code","58eec331":"code","92acfc53":"code","23403bd2":"code","81a6103d":"code","40de68a4":"code","e63ac4cc":"code","c599fc02":"code","f1ba83e8":"code","66d6c7e0":"code","460a3f6a":"code","cc65df9c":"code","ce220b77":"code","ba26a0db":"code","ef518237":"code","ef4ff245":"code","46cbbc39":"code","6906b838":"code","30f8c10e":"code","54c6826e":"code","f460c511":"code","6ea76653":"code","179757f0":"code","c60a571d":"code","8426aa28":"code","cb57c2bb":"code","4dba8a18":"code","c57bd3bc":"code","83ea4f21":"code","d5d3a73e":"code","87952159":"code","8878de3d":"code","50bca272":"code","3d2b2731":"code","6cd957e6":"code","cd7948a5":"code","eec4349c":"markdown","c6df1a3b":"markdown","d58be53b":"markdown","8f01ded3":"markdown","646a0b85":"markdown","3ab49103":"markdown","4c6fbf5d":"markdown","d547d092":"markdown","4e0598bf":"markdown","eecdecf3":"markdown","7ab9be75":"markdown","8a243018":"markdown","0f9799ae":"markdown","5aa65dd1":"markdown","71a44541":"markdown","38219eb5":"markdown","06f0ffd9":"markdown","a229d250":"markdown","c10c03d9":"markdown","fa4e7fbb":"markdown","176b653e":"markdown","cb0f6eb0":"markdown","a082d1d0":"markdown","fbb7a64c":"markdown","c500790d":"markdown","717da1d9":"markdown","993a5af2":"markdown","43b60741":"markdown","452aeab8":"markdown","be664e6a":"markdown","413d29fc":"markdown","19a6ba0a":"markdown","f0bddd08":"markdown","5c7fe891":"markdown","9f2cc390":"markdown","19a608b4":"markdown","6d8a3c10":"markdown","988783ad":"markdown","a2c89756":"markdown","761a555e":"markdown","9aea2581":"markdown","8fb7a1f9":"markdown","3ae025cd":"markdown","d91c8603":"markdown","05404e67":"markdown","9e12114a":"markdown","0b1839d9":"markdown"},"source":{"605483a8":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n#plt.style.use('ggplot')\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5ff747ef":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","40ebaddd":"train_df.columns.values.reshape(-1,1)","b7ea3499":"train_df.head()","f31b9007":"train_df.describe().T","09cc4403":"train_df.info()","fe03b962":"def bar_plot(variable):\n    \"\"\"\n        input : variable ex: 'Sex'\n        output: bar plot & value count \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n{}\".format(variable,varValue))","c2be3c1d":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","0f452c62":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","babab509":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","4fe96db9":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","9b1e8cb4":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","8307a4c9":"# Survived vs Sex\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","d70c395c":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","59e140ae":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","881e8a64":"# Embarked vs Survived\ntrain_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","b511554a":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        #store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","7d4bdfa4":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","5f9de159":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop = True)\ntrain_df","2bfed3a1":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","958b0b61":"train_df.head()","775771be":"train_df.columns[train_df.isnull().any()]","1e4132cb":"train_df.isnull().sum()","a2a2b1cd":"# Embarked\ntrain_df[train_df[\"Embarked\"].isnull()]","56683653":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","c8cec78d":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","30345790":"# Fare\ntrain_df[train_df[\"Fare\"].isnull()]  ","9e6c6f07":"train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean()","3148c816":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean())\ntrain_df[train_df[\"Fare\"].isnull()] ","e39d35e6":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nplt.figure(figsize=(9,6))\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","d560b243":"g = sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probablility\")\nplt.show()","e26a76a8":"g = sns.factorplot(x=\"Parch\",y=\"Survived\",kind=\"bar\",data=train_df,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","a7d9d996":"g = sns.factorplot(x=\"Pclass\",y=\"Survived\",kind=\"bar\",data=train_df,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","fe956ef8":"g = sns.FacetGrid(train_df,col=\"Survived\",size=6)\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","d4621cef":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","2711681e":"g = sns.FacetGrid(train_df,row=\"Embarked\",size=2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","bc7f9028":"g = sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=2)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","9bb398cb":"train_df[train_df[\"Age\"].isnull()]","72e7c214":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","53decc9f":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","a82ccb54":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","94bf3be4":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","95870249":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","94ae9017":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","627041d5":"train_df[train_df[\"Age\"].isnull()]","c27182f7":"train_df[\"Name\"].head(10)","908a8846":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","8a5e8b88":"train_df[\"Title\"].head(10)","573e6e1b":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","ab75d84e":"# Convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","92ac24e7":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","f271bc72":"g = sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","a69b2cdb":"train_df.drop(labels=[\"Name\"],axis=1,inplace=True)","58eec331":"train_df.head()","92acfc53":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","23403bd2":"train_df.head()","81a6103d":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","40de68a4":"train_df.head()","e63ac4cc":"g = sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","c599fc02":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","f1ba83e8":"train_df.head(10)","66d6c7e0":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","460a3f6a":"g = sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","cc65df9c":"train_df = pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","ce220b77":"train_df[\"Embarked\"].head()","ba26a0db":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","ef518237":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","ef4ff245":"train_df[\"Ticket\"].head(10)","46cbbc39":"tickets = []\nfor i in list(train_df[\"Ticket\"]):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","6906b838":"train_df.head(10)","30f8c10e":"train_df = pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head(10)","54c6826e":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","f460c511":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df.head()","6ea76653":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df.head(10)","179757f0":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","c60a571d":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","8426aa28":"train_df.columns","cb57c2bb":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","4dba8a18":"train_df_len","c57bd3bc":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","83ea4f21":"test.head()","d5d3a73e":"train = train_df[:train_df_len]\nX_train = train.drop(labels=\"Survived\",axis=1)\ny_train = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(X_train,y_train,test_size=0.33,random_state=42)\nprint(\"x_train: \", len(x_train))\nprint(\"X_test: \", len(x_test))\nprint(\"y_train: \", len(y_train))\nprint(\"y_test: \", len(y_test))\nprint(\"test: \", len(test))","87952159":"logreg = LogisticRegression()\nlogreg.fit(x_train,y_train)\nacc_log_train = round(logreg.score(x_train,y_train)*100,2)\nacc_log_test = round(logreg.score(x_test,y_test)*100,2)\nprint(\"Training Accuracy: %{}\".format(acc_log_train))\nprint(\"Testing Accuracy: %{}\".format(acc_log_test))","8878de3d":"random_state = 42\nclassifier = [\n    DecisionTreeClassifier(random_state = random_state),\n    SVC(random_state = random_state),\n    RandomForestClassifier(random_state = random_state),\n    LogisticRegression(random_state = random_state),\n    KNeighborsClassifier()\n             ]\n\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","50bca272":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","3d2b2731":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \n                           \"ML Models\":[\n                               \"DecisionTreeClassifier\", \n                               \"SVM\",\n                               \"RandomForestClassifier\",\n                               \"LogisticRegression\",\n                               \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","6cd957e6":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test)*100)","cd7948a5":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","eec4349c":"* Passangers whoe pay higher fare have better survival.","c6df1a3b":"* Pclass is important feature for model traning.","d58be53b":"## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived <a id=\"12\"><\/a>","8f01ded3":"## Find Missing Value <a id=\"9\"><\/a>","646a0b85":"* Having a lot of SibSp have less chance to survive.\n* If SibSp == 0 or 1 or 2, passanger has more change to survive.\n* We can consider a new feature describing these.","3ab49103":"## Drop Passanger ID and Cabin <a id=\"28\"><\/a>","4c6fbf5d":"> Fare feature seems to have correlation with survived feature (0.26)","d547d092":"## Numerical Variable <a id=\"5\"><\/a>","4e0598bf":"## Prediction And Submission <a id=\"34\"><\/a>","eecdecf3":"## Fill Missing: Age Feature <a id=\"20\"><\/a>","7ab9be75":"# Univariate Variable Analysis <a id=\"3\"><\/a>\n* **Categorical Variable:** Survived, Sex, Pclass, Embarked, Name, Ticket, Sibsp and Parch\n* **Numerical Variable: ** Fare, age and passangerId","8a243018":"# Load and Check Data <a id=\"1\"><\/a>","0f9799ae":"# Feature Engineering <a id=\"21\"><\/a>","5aa65dd1":"## Name -- Title <a id=\"22\"><\/a>","71a44541":"## Embarked -- Sex -- Fare -- Survived <a id=\"19\"><\/a>","38219eb5":"## Parch -- Survived <a id=\"14\"><\/a>","06f0ffd9":"## Categorical Variable <a id=\"4\"><\/a>","a229d250":"## Sex <a id=\"27\"><\/a>","c10c03d9":"# Modelling <a id=\"29\"><\/a>","fa4e7fbb":"## Hyperparameter Tuning -- Grid Search -- Cross Validation <a id=\"32\"><\/a>\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","176b653e":"## Family Size <a id=\"23\"><\/a>","cb0f6eb0":"## Ticket <a id=\"25\"><\/a>","a082d1d0":"## Pclass <a id=\"26\"><\/a>","fbb7a64c":"## Pclass -- Survived <a id=\"15\"><\/a>","c500790d":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","717da1d9":"Small families have more chance to survive than large families.","993a5af2":"## Simple Logistic Regression <a id=\"31\"><\/a>","43b60741":"# Veriable Description <a id=\"2\"><\/a>\n1. **PassengerId:** Unique id number to each passanger\n1. **Survived:** Passanger survived(1) or died(0) \n1. **Pclass:** Passange class\n1. **Name:** Name\n1. **Sex:** Gender of passanger\n1. **Age:** Age of passanger\n1. **SibSp:** Number of siblings\/spouses\n1. **Parch:** Number of parents\/children\n1. **Ticket:** Ticket number\n1. **Fare:** Amount of monet spent on ticket\n1. **Cabin:** Cabin category\n1. **Embarked:** Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","452aeab8":"## Age -- Survived <a id=\"16\"><\/a>","be664e6a":"Sex is not informative for age prediction, age distribution seems to be same.","413d29fc":"# Visualization <a id=\"11\"><\/a>","19a6ba0a":"# Outlier Detection <a id=\"7\"><\/a>","f0bddd08":"## Train - Test Split <a id=\"30\"><\/a>","5c7fe891":"# Missing Value <a id=\"8\"><\/a>\n* Find Missing Value\n* Fill Missing Value","9f2cc390":"* float64(2): Fare and Age\n* int64(5): Pclass sibsp, parch, passangerId and survived\n* object(5): Cabin, embarked, ticket, name, sex","19a608b4":"1st class passangers are older than 2nd, and 2nd is older than 3rd class.","6d8a3c10":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in pclass 3 in C.\n* embarked and sex will be use in training.","988783ad":"## Pclass -- Age -- Survived <a id=\"17\"><\/a>","a2c89756":"# Basic Data Analysis <a id=\"6\"><\/a>\n- Pclass - Survived\n- Sex - Survived\n- SibSp - Survived\n- Parch - Survived\n- Embarked vs Survived","761a555e":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color='#008ABC'>\nContent:\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Age -- Survived](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    - [Drop Passanger ID and Cabin(#28)\n8. [Modelling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction And Submission](#34)","9aea2581":"* SibSp and parch can be used for new feature extraction with th = 3\n* Small families have more chance to survive.\n* There is a std in survival of passanger with parch = 3","8fb7a1f9":"* age <= 10 has a high survival rate,\n* oldest passangers (80) survived,\n* large number of 20 years old did not survive,\n* most passangers are in 15-35 age range,\n* use age feature in training,\n* use age distributation for missing value of age.","3ae025cd":"## SibSp -- Survived <a id=\"13\"><\/a>","d91c8603":"## Ensemble Modeling <a id=\"33\"><\/a>","05404e67":"## Embarked <a id=\"24\"><\/a>","9e12114a":"## Embarked -- Sex -- Pclass -- Survived <a id=\"18\"><\/a>","0b1839d9":"## Fill Missing Value <a id=\"10\"><\/a>\n* Embarked has 2 missing value\n* Fare has only 1"}}