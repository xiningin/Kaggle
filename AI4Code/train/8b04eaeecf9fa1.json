{"cell_type":{"b9a0e5b4":"code","fc909e12":"code","f31a601c":"code","51c2182d":"code","3c153ae4":"code","a54ab20f":"code","ff35338a":"code","7f4f4b39":"code","22f4a76d":"code","b43aa2ec":"code","a7db1f1c":"code","17d1a851":"code","185f4db1":"code","7d99893e":"code","29cf2b52":"code","0ff7911b":"code","6c56cd78":"code","3ee11e65":"code","56584079":"code","c70a8706":"code","5b0879f1":"code","c0b49d31":"code","a4b56a91":"code","620ce233":"code","54ca362c":"code","3492e6b0":"code","1e4ce1ac":"code","0c882b5f":"code","3024f424":"code","660a5312":"code","adba86bc":"code","16b3f8df":"code","05692d3d":"code","8173cd8a":"code","55ce0fc2":"code","eea99c68":"code","625571ac":"code","3aa5256a":"code","e45dac3e":"code","35070ed7":"code","a4e50806":"code","ebbd7bff":"markdown","cf944a33":"markdown","94988824":"markdown","9529ac46":"markdown","2bb16c95":"markdown","00590c5b":"markdown","05a369bf":"markdown","69b25296":"markdown","17139b98":"markdown","206c3818":"markdown","ec114e74":"markdown","82029eb7":"markdown","ea0406c2":"markdown","8c1d2b28":"markdown","7fec4bc4":"markdown","c6f90c91":"markdown","3baaec96":"markdown","7f82e460":"markdown","93540674":"markdown","c10dff3e":"markdown","044ab214":"markdown","d65eb7dd":"markdown","42750ff8":"markdown","3b1f0cb5":"markdown","ada25a78":"markdown","c8cc6e7d":"markdown","b6f3ec01":"markdown","414bb209":"markdown","2402ef1d":"markdown","87770565":"markdown","37a94069":"markdown","d5361424":"markdown","e9f63465":"markdown","b72fd847":"markdown","964a1b50":"markdown","a26a5b36":"markdown","27ea728c":"markdown","697d84ae":"markdown","b5be5adf":"markdown","175f1bf7":"markdown","fd922f2a":"markdown"},"source":{"b9a0e5b4":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\nfrom keras.callbacks import ReduceLROnPlateau\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image\n\n#TL pecific modules\nfrom keras.applications.vgg16 import VGG16","fc909e12":"import os\nprint(os.listdir('..\/input\/flowers-recognition\/flowers\/flowers'))","f31a601c":"X=[]\nZ=[]\nIMG_SIZE=150\nFLOWER_DAISY_DIR='..\/input\/flowers-recognition\/flowers\/flowers\/daisy'\nFLOWER_SUNFLOWER_DIR='..\/input\/flowers-recognition\/flowers\/flowers\/sunflower'\nFLOWER_TULIP_DIR='..\/input\/flowers-recognition\/flowers\/flowers\/tulip'\nFLOWER_DANDI_DIR='..\/input\/flowers-recognition\/flowers\/flowers\/dandelion'\nFLOWER_ROSE_DIR='..\/input\/flowers-recognition\/flowers\/flowers\/rose'\nweights_path='..\/input\/trans-learn-weights\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'\n","51c2182d":"def assign_label(img,flower_type):\n    return flower_type\n    ","3c153ae4":"def make_train_data(flower_type,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        label=assign_label(img,flower_type)\n        path = os.path.join(DIR,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n        \n        X.append(np.array(img))\n        Z.append(str(label))\n        \n        \n        ","a54ab20f":"make_train_data('Daisy',FLOWER_DAISY_DIR)\nprint(len(X))","ff35338a":"make_train_data('Sunflower',FLOWER_SUNFLOWER_DIR)\nprint(len(X))","7f4f4b39":"make_train_data('Tulip',FLOWER_TULIP_DIR)\nprint(len(X))","22f4a76d":"make_train_data('Dandelion',FLOWER_DANDI_DIR)\nprint(len(X))","b43aa2ec":"make_train_data('Rose',FLOWER_ROSE_DIR)\nprint(len(X))","a7db1f1c":"fig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range(5):\n    for j in range (2):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l])\n        ax[i,j].set_title('Flower: '+Z[l])\n        \nplt.tight_layout()\n        ","17d1a851":"le=LabelEncoder()\nY=le.fit_transform(Z)\nY=to_categorical(Y,5)\nX=np.array(X)\nX=X\/255","185f4db1":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=42)\n","7d99893e":"np.random.seed(42)\nrn.seed(42)\ntf.set_random_seed(42)","29cf2b52":"base_model=VGG16(include_top=False, weights=None,input_shape=(150,150,3), pooling='avg')\n ","0ff7911b":"base_model.load_weights(weights_path)","6c56cd78":"base_model.summary()","3ee11e65":"model=Sequential()\nmodel.add(base_model)\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dense(5,activation='softmax'))\n\n\n","56584079":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","c70a8706":"epochs=50\nbatch_size=128\nred_lr=ReduceLROnPlateau(monitor='val_acc', factor=0.1, epsilon=0.0001, patience=2, verbose=1)","5b0879f1":"model.summary()","c0b49d31":"base_model.trainable=False # setting the VGG model to be untrainable.","a4b56a91":"model.compile(optimizer=Adam(lr=1e-4),loss='categorical_crossentropy',metrics=['accuracy'])\n\n","620ce233":"History = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = 50, validation_data = (x_test,y_test),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size)","54ca362c":"for i in range (len(base_model.layers)):\n    print (i,base_model.layers[i])\n  \nfor layer in base_model.layers[15:]:\n    layer.trainable=True\nfor layer in base_model.layers[0:15]:\n    layer.trainable=False\n  ","3492e6b0":"model.compile(optimizer=Adam(lr=1e-4),loss='categorical_crossentropy',metrics=['accuracy'])\n\n","1e4ce1ac":"History = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = 50, validation_data = (x_test,y_test),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size)","0c882b5f":"plt.plot(History.history['acc'])\nplt.plot(History.history['val_acc'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","3024f424":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","660a5312":"for i in range (len(base_model.layers)):\n    print (i,base_model.layers[i])\n  \nfor layer in base_model.layers[11:]:\n    layer.trainable=True\nfor layer in base_model.layers[0:11]:\n    layer.trainable=False\n  ","adba86bc":"model.compile(optimizer=Adam(lr=1e-4),loss='categorical_crossentropy',metrics=['accuracy'])\n\n","16b3f8df":"History = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = 50, validation_data = (x_test,y_test),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size)","05692d3d":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","8173cd8a":"plt.plot(History.history['acc'])\nplt.plot(History.history['val_acc'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","55ce0fc2":"model=Sequential()\nmodel.add(base_model)\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(5,activation='softmax'))\n\n\nfor layer in base_model.layers:\n    layer.trainable=True\n\nmodel.compile(optimizer=Adam(lr=1e-4),loss='categorical_crossentropy',metrics=['accuracy'])\n\n","eea99c68":"History = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = 50, validation_data = (x_test,y_test),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size)","625571ac":"plt.plot(History.history['acc'])\nplt.plot(History.history['val_acc'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","3aa5256a":"# getting predictions on val set.\npred=model.predict(x_test)\npred_digits=np.argmax(pred,axis=1)","e45dac3e":"# now storing some properly as well as misclassified indexes'.\ni=0\nprop_class=[]\nmis_class=[]\n\nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])==pred_digits[i]):\n        prop_class.append(i)\n    if(len(prop_class)==8):\n        break\n\ni=0\nfor i in range(len(y_test)):\n    if(not np.argmax(y_test[i])==pred_digits[i]):\n        mis_class.append(i)\n    if(len(mis_class)==8):\n        break","35070ed7":"warnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(15,15)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n        ax[i,j].set_title(\"Predicted Flower : \"+str(le.inverse_transform([pred_digits[prop_class[count]]]))+\"\\n\"+\"Actual Flower : \"+str(le.inverse_transform(np.argmax([y_test[prop_class[count]]]))))\n        plt.tight_layout()\n        count+=1","a4e50806":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(15,15)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[mis_class[count]])\n        ax[i,j].set_title(\"Predicted Flower : \"+str(le.inverse_transform([pred_digits[mis_class[count]]]))+\"\\n\"+\"Actual Flower : \"+str(le.inverse_transform(np.argmax([y_test[mis_class[count]]]))))\n        plt.tight_layout()\n        count+=1","ebbd7bff":"#### MISCLASSIFIED IMAGES OF FLOWERS","cf944a33":"## 3.4 ) Using a Learning Rate Annealer & the Summary","94988824":"Now we need to add at the top of the base model some fully connected layers. Alsowe can use the BatchNormalization and the Dropout layers as usual in case we want to.\n\nFor this I have used a Keras sequential model and build our entire model on top of it; comprising of the VGG model as the base model + our own fully connected layers.","9529ac46":"Transfer learning refers to using a pretrained model on some other task for your own task. Hence we need to specify the particular model which we are deploying in our task and thus needs to specify the base model.\n\nIn our case we are using the VGG16 model from the Keras.Applications library as the base model.","2bb16c95":"<a id=\"content2\"><\/a>\n## 2 ) Preparing the Data","00590c5b":"## 3.2 ) Adding our Own Fully Connected Layers","05a369bf":"## 3.1 ) Specifying the Base Model","69b25296":"## 2.4 ) Splitting into Training and Validation Sets","17139b98":"#### 3.5.1 ) USING BASE MODEL AS A FEATURE EXTRACTOR.","206c3818":"## 2.2 ) Visualizing some Random Images","ec114e74":"[ **4 ) Visualizing Predictons on the Validation Set**](#content4)","82029eb7":"<a id=\"content3\"><\/a>\n## 3 ) Modelling","ea0406c2":"While using transfer learning in ConvNet; we have basically have 3 main approaches-->\n\n1) To use the pretrained model as a feature extractor and just train your classifier on top of it. In this method we do not tune any weights of the model.\n\n2) Fine Tuning- In this approach we tune the weights of the pretrained model. This can be done by unfreezing the layers that we want to train.In that case these layers will be initialised with their trained weights on imagenet.\n\n3) Lasty we can use a pretrained model.\n\nNote that in this section I have used the first approach ie I have just use the conv layers and added my own fully connected layers on top of VGG model. Thus I have trained a classifier on top of the CNN codes.","8c1d2b28":"## 3.5 ) Compiling & Training the Model","7fec4bc4":"#### 3.5.2 ) FINE TUNING BY UNFREEZING THE LAST BLOCK OF VGG16","c6f90c91":"#### Note that the validation accuracy on fine tuning by unfreezing the last block of the VGG16 model has increased to about 81% ; almost by 3% as compared to the case when we run a classifier on the top of the CNN codes in previous section.","3baaec96":"[ **3 ) Modelling**](#content3)","7f82e460":"#### Note that there is still an increse in validation accuracy of about 1.5% and the same has now reached to about 81.5%.","93540674":"## 2.3 ) Label Encoding the Y array (i.e. Daisy->0, Rose->1 etc...) & then One Hot Encoding ","c10dff3e":"<a id=\"content4\"><\/a>\n## 4 ) Visualizing Predictons on the Validation Set","044ab214":"## [ Please star \/ upvote if you like the kernel. ]","d65eb7dd":"[ **2 ) Preparing the Data**](#content2)","42750ff8":"Note that this is NOT the summary of our model and this is the summary or the ARCHITECTURE of the VGG16 model that we are deploying as the base model.","3b1f0cb5":"#### 3.5.3) UNFREEZING THE LAST 2 BLOCKS","ada25a78":"## 2.1) Making the functions to get the training and validation set from the Images","c8cc6e7d":"Finally I have tried to train the model from scratch. Note this is not reasonable though as our data is also not much similar with the imagenet data plus we are quite short of data as we only have around 4200 images.\n\nHence this model is quite prone to overfitting and I have done this just to check that the results validate with the though-process.","b6f3ec01":"#### BREAKING IT DOWN--\n\n1) Firstly we import the VGG16 module from the Keras library.\n\n2) Next we need to specify if we want  to use the fully connected layers of the VGG16 module or own layers. Since our task is different and we have only 5 target classes we need to have our own layers and I have specified the 'include_top' arguement as 'False'.\n\n3) Next we need to specify the weights to be used by the model. Since I want it to use the weights it was trained on in ImageNet competition, I have loaded the weights from the corressponding file. You can directly specify the weights arguement as 'imagenet' in VGG16( )  but it didn't work in my case so I have to explicitily load the weghts from a file.\n \n4) Lastly we just need to specify the shape of the imput that our model need to expect and also specify the 'pooling' type.","414bb209":"## 2.5 ) Setting the Random Seeds","2402ef1d":"## A Comprehensive Guide to Transfer Learning \n\nIn this kernel I have demonstrated the general techniques that can be used with Transfer Learning. \n\nFor this kernel I have used the **Flower Recognition** dataset but the basic TL principles remains the same.\n\n**Basically , you need to watch two things**\n\n**1) The simalarity of your dataset with that of the pre-trained model and **\n\n**2) The amount of the data that you have.**\n\nDepending on these two conditions you can choose to either fine tune the weights or just train a classifier on top of the pre-trained model.","87770565":"## [ Please star\/upvote if u like it. ]","37a94069":"This is now the complete summary of our model that we shall use to classify the images.","d5361424":"#### CORRECTLY CLASSIFIED FLOWER IMAGES","e9f63465":"## THE END.","b72fd847":"[ **1 ) Importing Various Modules**](#content1)","964a1b50":"## 3.3 ) Data Augmentation to prevent Overfitting","a26a5b36":"#### 3.5.4 ) TRAINING THE ENTIRE MODEL FROM SCRATCH","27ea728c":"Similarly unffreezing the last 2 blocks of the VGG16model.","697d84ae":"<a id=\"content1\"><\/a>\n## 1 ) Importing Various Modules.","b5be5adf":"In this section I have done fine tuning. To see the effect of the fine tuning I have first unfreezed the last block of the VGG16 model and have set it to trainable.","175f1bf7":"#### Note that the graphs as well as the results clearly show that there is significant overfitting. Also note that despite the overfitting the overall validartion accuracy has though increased from previous best of about 0.815 to a whopping 0.93.","fd922f2a":"## CONTENTS ::->\u00b6"}}