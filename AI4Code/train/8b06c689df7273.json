{"cell_type":{"72bd2c60":"code","b3453c9a":"code","3d6ce01e":"code","0c01c847":"code","441af612":"code","4ccd9c81":"code","df317b4f":"code","b883f51a":"code","8a959c3e":"code","16fb8efa":"code","887555ae":"code","43c2b599":"code","85af093f":"code","9b7cfcca":"code","8593e933":"code","e44d546c":"code","a57f3610":"code","b96592d7":"code","e2ae6dd6":"code","5bd60ecd":"code","b4f35ec4":"code","4c4e7400":"code","2016f801":"code","84cd2074":"code","bf101797":"code","4e9daf4e":"code","9fb6587c":"code","608f8d18":"code","1c9c6c54":"code","40a929ba":"code","acd090cf":"code","3d1d5810":"code","3ee62a9b":"code","d2a90118":"code","ec6b1217":"code","ff220344":"code","1601b22e":"code","2b5db443":"code","7f8df886":"markdown","69592396":"markdown"},"source":{"72bd2c60":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom itertools import combinations\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import KNNImputer","b3453c9a":"## df pipeline\ndef pipeline_df(df,df_holidays,df_weather):\n    df['timestamp']=pd.to_datetime(df['timestamp'], format=\"%Y-%m-%d %H:%M:%S\")\n    df['date']=pd.to_datetime(df['timestamp']).dt.date\n    df['new_date']=df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    df['new_date']=df['new_date']+pd.to_datetime(df['timestamp']).dt.hour.apply(lambda x: \" \"+str(x)+\":00:00\")\n    df['new_date']=pd.to_datetime(df['new_date'])\n    df=pd.merge(df,df_holidays,on='date',how='left')\n    df['holiday']=df['holiday'].apply(lambda x: 0 if (x!=1)else 1)\n    df['Crossing']=df['Crossing'].apply(lambda x: 1 if (x)else 0)\n    df['Give_Way']=df['Give_Way'].apply(lambda x: 1 if (x)else 0)\n    df['Junction']=df['Junction'].apply(lambda x: 1 if (x)else 0)\n    df['Railway']=df['Railway'].apply(lambda x: 1 if (x)else 0)\n    df['Stop']=df['Stop'].apply(lambda x: 1 if (x)else 0)\n    df['Amenity']=df['Amenity'].apply(lambda x: 1 if (x)else 0)\n    df['Side']=df['Side'].apply(lambda x: 1 if (x=='R')else 0)\n    df['Roundabout']=df['Roundabout'].apply(lambda x: 1 if (x)else 0)\n    df['Bump']=df['Bump'].apply(lambda x: 1 if (x)else 0)\n    df['No_Exit']=df['No_Exit'].apply(lambda x: 1 if (x)else 0)\n    df=pd.merge(df,df_weather,on='new_date',how='left')\n    \n    return df","3d6ce01e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c01c847":"dataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n\ndf.head()","441af612":"df.info()","4ccd9c81":"import xml.etree.ElementTree as Xet\n\ncols = [\"date\", \"description\"]\nrows = []\n  \nxmlparse = Xet.parse(os.path.join(dataset_path,'holidays.xml'))\nroot = xmlparse.getroot()\nfor i in root:\n    date = i.find(\"date\").text\n    description = i.find(\"description\").text\n  \n    rows.append({\"date\": date,\n                 \"description\": description})\n\ndf_holidays = pd.DataFrame(rows, columns=cols)\n  \ndf_holidays.to_csv('holidays.csv')\ndf_holidays['date']=pd.to_datetime(df_holidays['date'], format=\"%Y-%m-%d %H:%M:%S\").dt.date\ndf_holidays.reset_index(drop=True)\ndf_holidays['holiday']=1\ndf_holidays.head()","df317b4f":"df_weather = pd.read_csv(os.path.join(dataset_path,\"weather-sfcsv.csv\"))\nprint(df_weather.shape)\ndf_weather.head()","b883f51a":"df_weather[\"Selected\"] = df_weather[\"Selected\"].apply(lambda x : 1 if (x==\"Yes\")else 0)","8a959c3e":"unique_wether_condition = list(df_weather[\"Weather_Condition\"].unique())\ndf_weather[\"Weather_Condition\"] = df_weather[\"Weather_Condition\"].apply(lambda x : unique_wether_condition.index(x))","16fb8efa":"df_weather.head()","887555ae":"df_weather.info()","43c2b599":"imputer = KNNImputer(n_neighbors=3,weights='uniform', metric='nan_euclidean')\narr=imputer.fit_transform(df_weather)\ndf_weather=pd.DataFrame(arr,columns=list(df_weather.columns))","85af093f":"df_weather.head()","9b7cfcca":"df_weather.info()","8593e933":"df_weather[\"new_date\"] = df_weather[\"Year\"].apply(lambda x : str(int(x))+\"-\")+df_weather[\"Month\"].apply(lambda x : str(int(x))+\"-\")+df_weather[\"Day\"].apply(lambda x : str(int(x))+\" \")+df_weather[\"Hour\"].apply(lambda x : str(int(x))+\":00:00\")\ndf_weather[\"new_date\"] = pd.to_datetime(df_weather[\"new_date\"],format=\"%Y-%m-%d %H:%M:%S\")\ndf_weather.head()","e44d546c":"df=pipeline_df(df,df_holidays,df_weather)","a57f3610":"df.head(10)","b96592d7":"df.info()","e2ae6dd6":"df_Train=df[[\"ID\",\"Severity\",\"Lat\",\"Lng\",\"Distance(mi)\",\"Crossing\",\"Give_Way\",\"Junction\",\"Railway\",\"Stop\",\"Amenity\",\"Side\",\"Weather_Condition\",\"Precipitation(in)\",\"Wind_Chill(F)\",\"Selected\",\"holiday\",\"Visibility(mi)\",\"Wind_Speed(mph)\",\"Humidity(%)\",\"Temperature(F)\",\"No_Exit\",\"Bump\",\"Roundabout\"]]","5bd60ecd":"df_Train.info()","b4f35ec4":"df_Train=df_Train.groupby(\"ID\").mean()","4c4e7400":"df_Train.info()","2016f801":"df_Train.head()","84cd2074":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df_Train, test_size=0.2, random_state=42) # Try adding `stratify` here\n\nX_train = train_df.drop(columns=['Severity'])\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=[ 'Severity'])\ny_val = val_df['Severity']","bf101797":"cols=[\"Lat\",\"Lng\",\"Stop\",'Weather_Condition',\"Wind_Chill(F)\",\"Junction\",\"Crossing\",\"holiday\",  'Visibility(mi)']","4e9daf4e":"#\"Lat\",\"Lng\",\"Distance(mi)\",\"Crossing\",\"Junction\",\"Railway\",\"Stop\",\"Amenity\", 'Side', 'Weather_Condition',    'holiday',\"Precipitation(in)\",\"Wind_Chill(F)\",  'Visibility(mi)'","9fb6587c":"# This cell is used to select the numerical features. IT SHOULD BE REMOVED AS YOU DO YOUR WORK.\n# 'Lat', 'Lng', 'Distance(mi)','Crossing', 'Side', 'Weather_Condition_num',  'Selected',  'val',  'Visibility(mi)'\nX_train = X_train[cols]\nX_val = X_val[cols]\n","608f8d18":"def normalize(df,cols):\n    for col in cols:\n        maxi=max(df[col])\n        mini=min(df[col])\n        df[col]=(df[col]-mini)\/(maxi-mini)\n    return df ","1c9c6c54":"def stand(df,cols):\n    for col in cols:\n        mean=df[col].mean()\n        std=df[col].std()\n        df[col]=(df[col]-mean)\/std\n    return df","40a929ba":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","acd090cf":"print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))","3d1d5810":"test_df = pd.read_csv( os.path.join(dataset_path,'test.csv'))\ntest_df.head()","3ee62a9b":"test_df=pipeline_df(test_df,df_holidays,df_weather)\ndf=df[[\"ID\",\"Lat\",\"Lng\",\"Distance(mi)\",\"Crossing\",\"Give_Way\",\"Junction\",\"Railway\",\"Stop\",\"Amenity\",\"Side\",\"Weather_Condition\",\"Precipitation(in)\",\"Wind_Chill(F)\",\"Selected\",\"holiday\",\"Visibility(mi)\",\"Wind_Speed(mph)\",\"Humidity(%)\",\"Temperature(F)\",\"No_Exit\",\"Bump\",\"Roundabout\"]]\ntest_df.info()","d2a90118":"test_df.head()","ec6b1217":"test_df[\"ID2\"]=test_df[\"ID\"]\ntest_df=test_df.groupby(\"ID\").mean()\ntest_df[\"ID\"]=test_df[\"ID2\"]\ntest_df=test_df.drop(columns=[\"ID2\"])\ntest_df.info()","ff220344":"X_test = test_df.drop(columns=['ID'])\n\n# You should update\/remove the next line once you change the features used for training\nX_test = X_test[cols]\n\ny_test_predicted = classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","1601b22e":"test_df.info()","2b5db443":"test_df[['ID', 'Severity']].to_csv('submission.csv', index=False)","7f8df886":"### Weather\n","69592396":"###  Holidays"}}