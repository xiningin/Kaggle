{"cell_type":{"13d69247":"code","ea56fc75":"code","b98507ae":"code","d122c11e":"code","7725f25f":"code","2de87faa":"code","714be97e":"code","a983f7bd":"code","50b2521b":"code","e810f20c":"code","08235af5":"code","d035de89":"code","b01da9d6":"code","45ec76fa":"code","1447615d":"code","b49ae57e":"code","94487485":"code","5438302c":"code","6d0b25d2":"code","0e48a71c":"code","ebeb5536":"code","26067198":"code","2e67b527":"code","cd8180e1":"code","9ef5982d":"code","d7c1f767":"code","40b12821":"code","341dba00":"code","00871621":"markdown","617830d7":"markdown","27e752b1":"markdown","7dc31fca":"markdown","6978ed5c":"markdown","8a78cd07":"markdown","b7d5f4fc":"markdown","770a3097":"markdown","c0ebcef8":"markdown","46a3d438":"markdown","531bf54d":"markdown","129ccd06":"markdown","a5ab641c":"markdown","060acdf3":"markdown","19a6cbf3":"markdown","b0546b85":"markdown","6ab41fef":"markdown","ace9277f":"markdown"},"source":{"13d69247":"\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy.spatial import distance\nimport math\nimport statistics\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea56fc75":"def get_data(nRowsRead=None):\n    \n    \n\n    df = pd.read_csv('\/kaggle\/input\/ocean-five-factor-personality-test-responses\/data.csv', delimiter='\\\\t', nrows = nRowsRead)\n\n    reverse_values_dict = { 5:1 , 4:2 ,3:3 , 2:4, 1:5}\n    # Some answers has reverse values\n    for answer_num in ['E2','E4','E6','E8','E10',\n                            'N2','N4',\n                            'A1','A3','A5','A7',\n                            'C2','C4','C6','C8','C10',\n                            'O2','O4','E6'\n                            ]:\n        df[answer_num]=df.replace({answer_num: reverse_values_dict})\n        \n    \"\"\"Load and format data, returning a df\"\"\"\n    df.dataframeName = '\"Big Five\" personality traits scores'\n    df['score_O'] =  (df['O1'] + df['O2'] + df['O3'] + df['O4'] + df['O5'] + df['O6'] + df['O7'] + df['O8' ] + df['O9'] + df['O10']) \/ 10\n    df['score_C'] =  (df['C1'] + df['C2'] + df['C3'] + df['C4'] + df['C5'] + df['C6'] + df['C7'] + df['C8' ] + df['C9'] + df['C10']) \/ 10    \n    df['score_E'] =  (df['E1'] + df['E2'] + df['E3'] + df['E4'] + df['E5'] + df['E6'] + df['E7'] + df['E8' ] + df['E9'] + df['E10']) \/ 10\n    df['score_A'] =  (df['A1'] + df['A2'] + df['A3'] + df['A4'] + df['A5'] + df['A6'] + df['A7'] + df['A8' ] + df['A9'] + df['A10']) \/ 10\n    df['score_N'] =  (df['N1'] + df['N2'] + df['N3'] + df['N4'] + df['N5'] + df['N6'] + df['N7'] + df['N8' ] + df['N9'] + df['N10']) \/ 10           \n    df = df[['race', 'age', 'engnat', 'gender', 'hand', 'source', 'country', 'score_O','score_C', 'score_E' ,'score_A' ,'score_N',  ]]\n    return df\n\ndf = df1 = get_data()\n\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns, {df.columns}')\n\ndf\n","b98507ae":"\"\"\"\ndf=pd.read_csv('\/kaggle\/input\/ocean-five-factor-personality-test-responses\/data.csv', delimiter='\\\\t', nrows = 100)\ndf['score_O'] =  (df['O1'] + df['O2'] + df['O3'] + df['O4'] + df['O5'] + df['O6'] + df['O7'] + df['O8' ] + df['O9'] + df['O10']) \/ 10\ndf['score_C'] =  (df['C1'] + df['C2'] + df['C3'] + df['C4'] + df['C5'] + df['C6'] + df['C7'] + df['C8' ] + df['C9'] + df['C10']) \/ 10    \ndf['score_E'] =  (df['E1'] + df['E2'] + df['E3'] + df['E4'] + df['E5'] + df['E6'] + df['E7'] + df['E8' ] + df['E9'] + df['E10']) \/ 10\ndf['score_A'] =  (df['A1'] + df['A2'] + df['A3'] + df['A4'] + df['A5'] + df['A6'] + df['A7'] + df['A8' ] + df['A9'] + df['A10']) \/ 10\ndf['score_N'] =  (df['N1'] + df['N2'] + df['N3'] + df['N4'] + df['N5'] + df['N6'] + df['N7'] + df['N8' ] + df['N9'] + df['N10']) \/ 10           \ndf = df[['race', 'age', 'engnat', 'gender', 'hand', 'source', 'country', 'score_O','score_C', 'score_E' ,'score_A' ,'score_N',  ]]\ndf\n\"\"\"","d122c11e":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n    \n# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n    \n","7725f25f":"plotPerColumnDistribution(df, 12, 4)","2de87faa":"df.dataframeName = '\"Big Five\" personality traits scores'\n\nplotCorrelationMatrix(df, 10)","714be97e":"df = get_data()\ndf['vector'] = df.apply(lambda x:  [x.score_O,x.score_C,x.score_E,x.score_A,x.score_N], axis=1)\n","a983f7bd":"import pandas as pd\nimport matplotlib.pyplot as plt # plotting\n\n\n# Display options\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\npd.set_option('display.precision', 3)\npd.set_option('display.max_rows', 500)\npd.set_option('display.expand_frame_repr', True)\npd.set_option('display.max_columns', None)  \npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', -1)\n\ndef get_intent_centroid(array):\n    centroid = np.zeros(len(array[0]))\n    for vector in array:\n        centroid = centroid + vector\n    return centroid\/len(array)\n\n\ndef enrich_vector_values(df):\n    for i,letter in enumerate(\"OCEAN\"):\n        df[letter] =  float(df.vector.values[i])\n    return df \n\ndef group_vectors_by_criteria(df,criteria):\n    centroids = df.groupby(criteria)['vector'].apply(lambda x: get_intent_centroid(x.tolist()))\n    return pd.DataFrame(centroids.reset_index( ))\n\n\ndef highlight_max(data, color='lightblue'):\n    '''\n    highlight the maximum in a Series or DataFrame\n    '''\n    attr = 'background-color: {}'.format(color)\n    #remove % and cast to float\n    data = data.replace('%','', regex=True).astype(float)\n    if data.ndim == 1:  # Series from .apply(axis=0) or axis=1\n        is_max = data == data.max()\n        return [attr if v else '' for v in is_max]\n    else:  # from .apply(axis=None)\n        is_max = data == data.max().max()\n        return pd.DataFrame(np.where(is_max, attr, ''),\n                            index=data.index, columns=data.columns)\n\n    \n\n\n\ndef calculate_distances(df,criteria,compare1,compare2,df_criteria):\n    \"\"\" Calculate intra group and inter group distances\"\"\"\n    results = pd.DataFrame(columns=[\"Group\",'Distance type',\"Description\",\"Value\"])\n    array_1 = df_criteria[compare1:compare1].vector.values[0]\n    array_2 = df_criteria[compare2:compare2].vector.values[0]\n    d = distance.euclidean(array_1, array_2)\n    for compare_iter,group_distance in zip( [compare1,compare2], [array_1,array_2])  :\n        list_index    = df_criteria.index.values\n        compare_index = np.where(list_index == compare_iter)[0][0]\n        array_distances = []\n        # We build the filter string for this category, depending the type of the category.\n        cadena_busqueda = f\"\"\" {criteria} == {compare_index} \"\"\" if \"int64\" in str(df[criteria].dtypes) else f\"\"\" {criteria} == '{compare_iter}' \"\"\"\n        for vector_item in df.query(cadena_busqueda).vector.values:\n            dst = distance.euclidean(vector_item,group_distance)\n            array_distances.append(dst )\n        results = results.append({\"Group\" : compare_iter ,\n                                  'Distance type' : \"Intra group distance\",\n                                  \"Description\" : \"Average distance between each member of the gruop and the centroid of its group\",\n                                  \"Value\" : statistics.mean(array_distances) },ignore_index=True)\n    results = results.append({\"Group\" : compare1 + \" - \"+ compare2  ,\n                              'Distance type' : \"Inter groups distance\",\n                              \"Description\" : \"Distance between centroid of each groups\",\n                              \"Value\" : d },ignore_index=True)\n    \n    return results\n\ndef debug_calculate_distances():\n    \"\"\" Just to debug the function\"\"\"\n    df = get_data()\n    df['vector'] = df.apply(lambda x:  [x.score_O,x.score_C,x.score_E,x.score_A,x.score_N], axis=1)\n    criteria =\"gender\"\n    compare1='Male'\n    compare2='Female'\n    df_criteria = group_vectors_by_criteria(df,criteria)\n    df_criteria.index = ['missed', 'Male' , 'Female' ,'Other']\n\n    #criteria          = 'country'\n    #compare1          = 'US'\n    #compare2          = 'IN'\n    #df_criteria       = group_vectors_by_criteria(df,criteria)\n    #df_criteria.index = df_criteria[criteria]\n    #df_criteria\n\n    return calculate_distances(df,criteria,compare1,compare2,df_criteria)\n\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\ndef compare_two_criteria(    df,compare1,compare2,criteria,color1,color2):\n    \"\"\"Return a df comparing two posible criterrias of a given group\"\"\"\n    \n    def draw_chart( compare1,compare2,criteria,color1,color2,list_index):\n        df = get_data()\n        df['vector'] = df.apply(lambda x:  [x.score_O,x.score_C,x.score_E,x.score_A,x.score_N], axis=1)\n\n        df_criteria       = group_vectors_by_criteria(df,criteria)\n        if criteria == 'country' : \n            df_criteria       = df_criteria[(df_criteria['country'] ==  compare1 ) | (df_criteria['country'] == compare2)]\n            df_criteria.index = list_index\n        elif criteria == 'age' :\n            bins = [0, 24, 39, 56, 74, np.inf]\n            names = ['<24 y.o.', 'millenials (born 1981-1996)', '39-56 y.o.', 'baby boomers (born 1946 1964)', '74+ y.o.']\n            df['age'] = pd.cut(df['age'], bins, labels=names)\n            df_criteria.index = df_criteria[criteria]\n        else: \n            df_criteria.index = list_index\n\n            \n        #df_criteria.index = ['missed', 'Male' , 'Female' ,'Other']\n        #color1=\"tab:blue\"\n        #color2=\"tab:pink\"\n\n        list_index      = df_criteria.index.values\n        if criteria != 'age' :\n            compare_index1 = np.where(list_index == compare1)[0][0]\n            compare_index2 = np.where(list_index == compare2)[0][0]\n\n        cadena_busqueda = f\"\"\" {criteria} == {compare_index1} or {criteria} == {compare_index2} \"\"\" if \"int64\" in str(df[criteria].dtypes) else f\"\"\"  {criteria} == '{compare1}' or {criteria} == '{compare2}'  \"\"\"\n        cadena_busqueda \n        df = df.query(cadena_busqueda)\n        \n        if criteria != 'age' :\n            df.loc[df[criteria] == compare_index1,criteria] = compare1\n            df.loc[df[criteria] == compare_index2,criteria] = compare2\n\n\n        dict_column_names = { \"score_O\" : \"openness to experience (inventive\/curious vs. consistent\/cautious)\",\n                          \"score_C\" :  \"conscientiousness (efficient\/organized vs. extravagant\/careless)\" ,\n                          \"score_E\" :  \"extraversion (outgoing\/energetic vs. solitary\/reserved)\" ,\n                          \"score_A\" :  \"agreeableness (friendly\/compassionate vs. challenging\/callous)\" ,\n                          \"score_N\" : \"neuroticism (sensitive\/nervous vs. resilient\/confident)\" }\n\n        df_char = pd.DataFrame(columns = [\"trait\" ,\"value\", \"criteria\"])\n        arr_char = []\n        for temp_dict in  df[[c for c in df.columns if 'score' in c ]+[criteria]].to_dict(\"records\"): \n            for k,v in temp_dict.items():\n                if 'score' in k   :\n                    arr_char.append({'trait': dict_column_names[k] , 'value' : v, 'criteria' : temp_dict[criteria] })\n        df_char = pd.DataFrame(arr_char)\n        fig = ax = None\n        from matplotlib import pyplot\n\n        try:\n            sns.set_style(\"darkgrid\")\n            pal = {compare1 : color1, compare2: color2}\n            a4_dims = (12, 6)\n            fig, ax = pyplot.subplots(figsize=a4_dims)\n            sns.boxplot(ax=ax,y=\"trait\", x=\"value\", hue=\"criteria\", data=df_char,showfliers  = False,  palette=pal)\n            ax.set_title(f\"Personality traits for {compare1} vs. {compare2}\")\n            ax.legend(loc=\"upper left\" )\n        except Exception as e :\n            print(\"error: \" + str(e))\n        return fig,ax\n\n    array_1 = df[compare1:compare1].vector.values[0]\n    array_2 = df[compare2:compare2].vector.values[0] \n    listOfStr = [\"openness to experience (inventive\/curious vs. consistent\/cautious)\",\n                 \"conscientiousness (efficient\/organized vs. extravagant\/careless)\" ,\n                 \"extraversion (outgoing\/energetic vs. solitary\/reserved)\" ,\n                 \"agreeableness (friendly\/compassionate vs. challenging\/callous)\" ,\n                 \"neuroticism (sensitive\/nervous vs. resilient\/confident)\" ]\n    dictOfWords_1 = { j : array_1[i] for i,j in enumerate(listOfStr) }\n    dictOfWords_2 = { j : array_2[i] for i,j in enumerate(listOfStr) }\n    df_compare = pd.DataFrame([dictOfWords_1,dictOfWords_2], index = [compare1,compare2])    \n    \n    df_compare.loc['Difference'] = df_compare.loc[compare1] - df_compare.loc[compare2]\n    fig, ax = draw_chart(    compare1,compare2,criteria,color1,color2,df.index)\n    return df_compare\n\ndef debug_compare_two_criteria():\n    criteria          = 'gender'\n    compare1          = 'Male'\n    compare2          = 'Female'\n    df_criteria       = group_vectors_by_criteria(df,criteria)\n    #df_criteria.index = ['missed', 'Male' , 'Female' ,'Other']\n    color1=\"tab:blue\"\n    color2=\"tab:pink\"\n    compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2)\n    compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2)\n    plt.show()\n    \n#debug_calculate_distances()\n#debug_compare_two_criteria()\n\n\n\n","50b2521b":"\ndf = get_data()\ndf['vector'] = df.apply(lambda x:  [x.score_O,x.score_C,x.score_E,x.score_A,x.score_N], axis=1)\n\ncriteria          = 'gender'\ncompare1          = 'Male'\ncompare2          = 'Female'\ndf_criteria       = group_vectors_by_criteria(df,criteria)\ndf_criteria.index = ['missed', 'Male' , 'Female' ,'Other']\ncolor1=\"tab:blue\"\ncolor2=\"tab:pink\"\n\ncalculate_distances(df,criteria,compare1,compare2,df_criteria)","e810f20c":"compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2).style.apply(highlight_max,axis=0)\n","08235af5":"criteria          = 'gender'\ncompare1          = 'Male'\ncompare2          = 'Other'\ndf_criteria       = group_vectors_by_criteria(df,criteria)\ndf_criteria.index = ['missed', 'Male' , 'Female' ,'Other']\ncolor1=\"tab:blue\"\ncolor2=\"tab:orange\"\n\ncalculate_distances(df,criteria,compare1,compare2,df_criteria)","d035de89":"compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2).style.apply(highlight_max,axis=0)\n","b01da9d6":"criteria          = 'gender'\ncompare1          = 'Female'\ncompare2          = 'Other'\ndf_criteria       = group_vectors_by_criteria(df,criteria)\ndf_criteria.index = ['missed', 'Male' , 'Female' ,'Other']\ncolor1=\"tab:pink\"\ncolor2=\"tab:orange\"\n\ncalculate_distances(df,criteria,compare1,compare2,df_criteria)","45ec76fa":"compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2).style.apply(highlight_max,axis=0)","1447615d":"criteria          = 'hand'\ncompare1          = 'Right handed'\ncompare2          = 'Left handed'\ndf_criteria       = group_vectors_by_criteria(df,criteria)\ndf_criteria.index = ['missed', 'Right handed' , 'Left handed' ,'Both']\n\ncolor1=\"tab:blue\"\ncolor2=\"tab:red\"\ncalculate_distances(df,criteria,compare1,compare2,df_criteria)","b49ae57e":"compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2).style.apply(highlight_max,axis=0)","94487485":"\"\"\"\n1=Mixed Race, 2=Arctic (Siberian, Eskimo), 3=Caucasian (European), 4=Caucasian (Indian), 5=Caucasian (Middle East), 6=Caucasian (North African, Other), 7=Indigenous Australian,\n8=Native American, 9=North East Asian (Mongol, Tibetan, Korean Japanese, etc), 10=Pacific (Polynesian, Micronesian, etc), 11=South East Asian (Chinese, Thai, Malay, Filipino, etc), 12=West African, Bushmen, Ethiopian, 13=Other (0=missed)\n\"\"\"\ncriteria          = 'race'\ncompare1          = 'Caucasian (European)'\ncompare2          = 'Caucasian (North African, Other)'\ndf_criteria       = group_vectors_by_criteria(df,criteria)\ndf_criteria.index = ['missed', \n                 'Mixed Race' ,\n                 'Arctic (Siberian, Eskimo)' ,\n                 'Caucasian (European)',\n                 'Caucasian (Indian)',\n                 'Caucasian (Middle East)',\n                 'Caucasian (North African, Other)',\n                 'Indigenous Australian',\n                 'Native American',\n                 'North East Asian (Mongol, Tibetan, Korean Japanese, etc)',\n                 'Pacific (Polynesian, Micronesian, etc)',\n                 'South East Asian (Chinese, Thai, Malay, Filipino, etc)',\n                 'West African, Bushmen, Ethiopian',\n                 'Other'\n                ]\ncolor1=\"#003399\"\ncolor2=\"tab:orange\"\n\ncalculate_distances(df,criteria,compare1,compare2,df_criteria)","5438302c":"compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2).style.apply(highlight_max,axis=0)","6d0b25d2":"# Debug, we calculate distance for all countries, to know which countries has more differences.\n\ndef get_countries_distance():\n    df_country = group_vectors_by_criteria(df,'country')\n    df_country.index = df_country.country\n    array_country = []\n    for country1 in df_country.country.values :\n        for country2 in df_country.country.values : \n            if country1 == country2 : continue\n            array_1 = df_country[country1:country1].vector.values[0]\n            array_2 = df_country[country2:country2].vector.values[0]\n            d = distance.euclidean(array_1, array_2) \n            full_description = country1 + \" - \" + country2\n            array_country.append({ \"complete_name\" : full_description , \"distance\" : d , \"country1\" : country1 , \"country2\" : country2})\n\n    df_country_distance = pd.DataFrame(array_country )\n    df_country_distance\n\n    df_country_distance.sort_values('distance', ascending=False).head(50)\n    df_country_distance[(df_country_distance['country1'] == 'US')].sort_values('distance', ascending=False).head(20)\n\n#get_countries_distance()","0e48a71c":"criteria          = 'country'\ncompare1          = 'US'\ncompare2          = 'IN'\ndf_criteria       = group_vectors_by_criteria(df,criteria)\ndf_criteria       = df_criteria[(df_criteria['country'] ==  compare1 ) | (df_criteria['country'] == compare2)]\ndf_criteria.index = df_criteria[criteria]\ndf_criteria\n\ncolor1=\"#BF0A30\"\ncolor2=\"#FF8F1C\"\n\ncalculate_distances(df,criteria,compare1,compare2,df_criteria)\n\n","ebeb5536":"compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2).style.apply(highlight_max,axis=0)","26067198":"# Categorize age\ndf = get_data()\ndf['vector'] = df.apply(lambda x:  [x.score_O,x.score_C,x.score_E,x.score_A,x.score_N], axis=1)\nbins = [0, 24, 39, 56, 74, np.inf]\nnames = ['<24 y.o.', 'millenials (born 1981-1996)', '39-56 y.o.', 'baby boomers (born 1946 1964)', '74+ y.o.']\ndf['age'] = pd.cut(df['age'], bins, labels=names)\n\n# Create comparison\ncompare1         = 'millenials (born 1981-1996)'\ncompare2         = 'baby boomers (born 1946 1964)'\ncriteria         = 'age'\ndf_criteria       = group_vectors_by_criteria(df,criteria)\ndf_criteria.index = df_criteria[criteria]\ndf_criteria\n\ncolor1=\"tab:brown\"\ncolor2=\"tab:gray\"\n\n\n\ncalculate_distances(df,criteria,compare1,compare2,df_criteria)","2e67b527":"compare_two_criteria(df_criteria,compare1,compare2,criteria,color1,color2).style.apply(highlight_max,axis=0)","cd8180e1":"def extract_age_summary(df,gender):\n    \n    \"\"\"return a dataframe with the age, given a gender value as a parameter\"\"\"\n    listOfStr = [\"openness to experience (inventive\/curious vs. consistent\/cautious)\",\n                 \"conscientiousness (efficient\/organized vs. extravagant\/careless)\" ,\n                 \"extraversion (outgoing\/energetic vs. solitary\/reserved)\" ,\n                 \"agreeableness (friendly\/compassionate vs. challenging\/callous)\" ,\n                 \"neuroticism (sensitive\/nervous vs. resilient\/confident)\" ]\n    names = ['<13 y.o.', '13-22 y.o.', '22-40 y.o.', '40-60 y.o.', '60+ y.o.']\n\n    array_dictOfWords = []\n    df_gender = df.loc[df['gender'] == gender]\n    df_age = group_vectors_by_criteria(df_gender,'age')\n    df_age.index = names \n    df_age\n\n    for row in df_age.iterrows():\n        # Convert to df of aggregate data\n        array = row[1][1]  # extract vector\n        dictOfWords = { j : array[i] for i,j in enumerate(listOfStr) }\n        dictOfWords['age'] = row[0] # extract age interval \n        array_dictOfWords.append(dictOfWords)\n    df_age_summary = pd.DataFrame(array_dictOfWords) \n    return df_age_summary.set_index('age')\n\ndict_ages = { 'Male' : 1 , \"Female\" : 2  }\n\n\ndef Draw_Age_Charts():\n    param_array=[\n                 {\"df_gender\" : 1, \"gender\" : \"Male:\\n\"   , \"color\" :'tab:blue' },\n                 {\"df_gender\" : 2, \"gender\" : \"Female:\\n\" , \"color\" :'tab:pink' },\n                ]   \n    df = get_data()\n    df['vector'] = df.apply(lambda x:  [x.score_O,x.score_C,x.score_E,x.score_A,x.score_N], axis=1)\n    # Categorize age\n    bins = [0, 13, 22, 40, 60, np.inf]\n    names = ['<13 y.o.', '13-22 y.o.', '22-40 y.o.', '40-60 y.o.', '60+ y.o.']\n    df['age'] = pd.cut(df['age'], bins, labels=names)\n    for gender_dict in param_array :\n        df_gender = extract_age_summary(df,gender_dict['df_gender']) \n        gender    = gender_dict['gender'] \n        color     = gender_dict['color'] \n        f, axes = plt.subplots(1 , 5 ,figsize=(18, 3), sharex=True)\n        for i,ca in enumerate(df_gender.columns):\n            ax = axes[i]\n            plt.axes(ax)\n            plt.ylim(2,5)\n            plt.plot(df_gender[ca],color=color)\n            ax.set_title(gender+ ca.replace(\"(\",\"\\n(\").replace(\"vs.\",\"\\nvs.\"))\n            plt.xticks(rotation=45)\n","9ef5982d":"# data for Females\ndf_ages = extract_age_summary(df,dict_ages[\"Female\"])\ndf_ages.columns = [ \"Female: \" + c for c in df_ages.columns ]\ndf_ages.style.apply(highlight_max,axis=0)    ","d7c1f767":"# data for Males\ndf_ages = extract_age_summary(df,dict_ages[\"Male\"])\ndf_ages.columns = [ \"Male: \" + c for c in df_ages.columns ]\ndf_ages.style.apply(highlight_max,axis=0)    ","40b12821":"Draw_Age_Charts()","341dba00":"# How do we age ? - Remarks\n\n- The \"conscientiousness\" trait decreases in each life phase, probably related to the physical status decay. \n\n- I really expected that the \"friendly\/compassionate\" dimension, would shown an increase in the old age.  I suppose that means that the archetypal \"lovely grandma\" woman only is reached if you were equally friendly before aging\n\n- Men and women tend to grow older in a similar manner, altough it is remarkable that the main difference between traits for men and women - neuroticism - disappears as age increments.","00871621":"# Compare age: Millenials vs Boomers\n\n<img src=\"https:\/\/kaysharbor.com\/wp-content\/uploads\/2015\/09\/millennials_featured-776x415.png\" width=\"750px\">\n","617830d7":"# Compare countries: United States vs India. Remarks\n\n* As in the previous comparison, one of the groups scores higher en every measure.\n\n* I found this a very interesting comparision. I wish I could have more data to draw futher insights. The variability in the intra-group distance for India group would need more investigation.","27e752b1":"# Compare gender: Male vs Female. Remarks\n\n* Regarding distances, we confirm that intra-groups distances are higher than inter-group distance.\n\n* \"Male\" group has less inter-group distance than Female group. It is interesting that this distribution does not follow the [Male variability hypothesis](https:\/\/en.wikipedia.org\/wiki\/Variability_hypothesis) that happens in many species, not only humans.\n\n* Women score higher in the agreeableness and neuroticism. Also, in organization.\n* Men score higher in inventive.\n\n","7dc31fca":"# Compare race: European vs North African\n\n<img src=\"https:\/\/www.debatingeurope.eu\/wp-content\/uploads\/2013\/06\/africa-eu.png\" width=\"750px\">\n\n","6978ed5c":"# Bonus : How do we age ?\n\n<img src=\"https:\/\/c4.wallpaperflare.com\/wallpaper\/506\/550\/531\/cartoon-up-cartoon-boy-wallpaper-preview.jpg\" width=\"750px\">\n\n\nWe explore how the median value for each traits changes, in each age interval.\n\nAlso, we split data for each genre, to find out if men and women are affected by aging in a similar manner.\n\n\n\n","8a78cd07":"# Compare countries: United States vs India\n\n<img src=\"https:\/\/tp.taxsutra.com\/sites\/tp.taxsutra.com\/files\/\/iStock-530159353.jpg\" width=\"750px\">\n\n","b7d5f4fc":"# Compare gender: Female vs Other\n\n<img src=\"https:\/\/ih1.redbubble.net\/image.220089765.1599\/sn,x1000-pad,1000x1000,f8f8f8.u1.jpg\" width=\"750px\">\n\n\n","770a3097":"# Compare gender: Male vs Female\n\n<img src=\"https:\/\/images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com\/f\/93b32a4b-14fb-4c68-ab02-f49c62021f38\/d59565x-24e6e3d9-d660-45a2-a01d-c9278b7dda7d.jpg\/v1\/fill\/w_1000,h_600,q_75,strp\/male_n_female_symbol_by_devrez_d59565x-fullview.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3siaGVpZ2h0IjoiPD02MDAiLCJwYXRoIjoiXC9mXC85M2IzMmE0Yi0xNGZiLTRjNjgtYWIwMi1mNDljNjIwMjFmMzhcL2Q1OTU2NXgtMjRlNmUzZDktZDY2MC00NWEyLWEwMWQtYzkyNzhiN2RkYTdkLmpwZyIsIndpZHRoIjoiPD0xMDAwIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmltYWdlLm9wZXJhdGlvbnMiXX0.4_MNzLsbjcMVMOd3bKmnctYs6MyRD_2NTLo9wHDlur4\" width=\"750px\">\n\n","c0ebcef8":"# Exploratory analysis","46a3d438":"# Compare gender: Male vs Other\n\n<img src=\"https:\/\/ih1.redbubble.net\/image.220105526.2106\/sn,x1000-pad,1000x1000,f8f8f8.u3.jpg\" width=\"750px\">\n\n\nIn the questionnaire source of this dataset, in the \"Genre\" section,  one of the possible answers was \"Other\".\nWe do not know exactly what does it mean, other than \"Other\" is not \"Male\" neither \"Female\" groups, but we will compare it.\n\n","531bf54d":"# Compare gender: Female vs Others. Remarks\n\n* As in the previous comparision, I cannot correlate the responses marked as genre : \"Other\" to a particular group.\n\n* It is even more interesting, that this \"Other\" group, is not close to the \"Female\" group neither Male group. It seems a category on its own.\n\n* The \"Other\" group has a high score neuroticism, the emotional stability trait. Also it has a great intra-group distance, that corresponds with a higher variability. \n","129ccd06":"# Compare hand: Left handed vs Right handed. Remarks\n\n* The inter group distance is low (0.061) that suggest that there is no really a big difference between left and right handed groups","a5ab641c":"As a reminder, the [Big Five personality traits model](https:\/\/en.wikipedia.org\/wiki\/Big_Five_personality_traits) identifies five factors:\n\n1. openness to experience (inventive\/curious vs. consistent\/cautious)\n2. conscientiousness      (efficient\/organized vs. extravagant\/careless)\n3. extraversion           (outgoing\/energetic vs. solitary\/reserved)\n4. agreeableness          (friendly\/compassionate vs. challenging\/callous)\n5. neuroticism            (sensitive\/nervous vs. resilient\/confident)\n","060acdf3":"# Compare hand: Left handed vs Right handed\n\n<img src=\"https:\/\/www.frontiersin.org\/files\/Articles\/124457\/frym-2014-00013-HTML-r3\/image_m\/main.jpg\" width=\"750px\">\n","19a6cbf3":"# Compare gender: Male vs Others. Remarks\n\n\n* Regarding intra groups distance, the \"Others\" groups has a high variability in the response. It is hard to explain it, as I cannot correlate the responses marked as genre : \"Other\", to an specific group.\n\n* It is interesting, that due to the categories \"solitary\/reserved\" and \"sensitive\/nervous\", there is a great distance (0.399) from this Other group to the Male group.\n","b0546b85":"# Differences between personality traits in groups\n\n<img src=\"https:\/\/cdn.mos.cms.futurecdn.net\/DFJEngWvSkQKpQMVF5Nw5R-650-80.jpg\" width=\"1000px\">\n\n## Abstract \n\nIn this notebook, I will try to confirm a known statement in psychology: That there is more variability between members of a given group, than between the median case of each different group.\n\n## Why ?\n\nThis has some deep implications, like the fundamental description of a society is not a competition for power, between homogeneous groups where every member of a group shares the same personlity traits. \n\nRather than that, the society would be a cooperation between people, that happens to share enough common characteristics in specific dimensions, to call such a set of common features, a group.\n\n## How\n\n* First, I will do some exploratory analysis, and a list of pair groups to be compared. \n* For each pair of groups, I will calculate its average personality traits, the intra-group distance.\n* Also, I'll calculate the distance between the centroids of each group, the inter-group distance.\n* Finally, I will analyze the personality traits differences for each group.\n\n\n\n## Groups to be compared: \n\n* Female vs Male\n* Male vs Other\n* Female vs Other\n* European vs North African\n* United States vs India\n* Left handed vs Right handed\n* Millenials vs. Boomers\n\n## Bonus: How do we age ?\n \n We will explore how the personality traits changes over time.\n ","6ab41fef":"# Compare age: Millenials vs Boomers. Remarks\n\n\n* It is hard to tell wether the differences observed are consequence of the many changes happened in the world during the last decades, or it is just a matter of age. Probably, both.","ace9277f":"# Compare race: European vs North African. Remarks\n\n* There is really a big inter groups distance, where north africaners have higher scores on every dimension."}}