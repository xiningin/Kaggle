{"cell_type":{"d819dacc":"code","9dad9527":"code","a25e5f12":"code","2690d01b":"code","256af7b2":"code","5f30c7f9":"code","743d398d":"code","71574283":"code","751feefc":"code","e96f6f43":"code","b0e7b94c":"code","a857e39c":"code","4804a233":"code","6c62df19":"code","d547dbd7":"code","15481833":"code","adbce641":"code","018c2289":"code","8765eaba":"code","7f82c5ff":"code","8d3a3751":"code","6b8bd1ff":"code","3cb0a735":"code","f2327ee7":"code","114b59a8":"code","b2340d63":"code","b040b365":"code","b08564f9":"code","51b0cb8f":"code","5cce23d0":"code","dc70f120":"code","cd790039":"code","0adcda8e":"code","a361de54":"code","11bf7660":"code","5277e847":"code","8516b5db":"code","6cd58bba":"code","12442770":"code","44ce2318":"code","a46b36ef":"markdown"},"source":{"d819dacc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom fbprophet.plot import plot_plotly\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import *\nfrom fbprophet import Prophet\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\ndef mean_absolute_percentage_error(y_true, y_pred): \n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9dad9527":"train=pd.read_csv('..\/input\/demand-forecasting-kernels-only\/train.csv')\ntest=pd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/test.csv\")\nsample=pd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/sample_submission.csv\")","a25e5f12":"train[\"year\"] = pd.to_datetime(train[\"date\"]).dt.year\ntrain[\"month\"] = pd.to_datetime(train[\"date\"]).dt.month\ntrain[\"day\"] = pd.to_datetime(train[\"date\"]).dt.day\ntrain['dayOfWeek'] =  pd.to_datetime(train[\"date\"]).dt.dayofweek","2690d01b":"test[\"year\"] = pd.to_datetime(test[\"date\"]).dt.year\ntest[\"month\"] = pd.to_datetime(test[\"date\"]).dt.month\ntest[\"day\"] = pd.to_datetime(test[\"date\"]).dt.day\ntest['dayOfWeek'] =  pd.to_datetime(test[\"date\"]).dt.dayofweek","256af7b2":"train.head()","5f30c7f9":"test.head()","743d398d":"sample.head()","71574283":"df=train[train['store']==1][train['item']==1]","751feefc":"df.shape","e96f6f43":"df[\"sales\"] = np.log1p(df[\"sales\"])","b0e7b94c":"df = df[[\"date\", \"sales\"]]","a857e39c":"df=df.rename(columns={\"date\":\"ds\",\"sales\":\"y\"})","4804a233":"df.ds=pd.to_datetime(df.ds,format='%Y-%m')","6c62df19":"m = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=365)\nfuture.tail()","d547dbd7":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","15481833":"preds= forecast['yhat'][:-365]","adbce641":"plt.figure(figsize=(15,6))\nplt.plot(df.ds,preds,color='red',label=' Predictions')\nplt.plot(df.ds,df.y,color='blue',label='Actual')\nplt.legend()\nplt.show()","018c2289":"r2 = round(r2_score(df[\"y\"], preds), 3)\nmse = round(mean_squared_error(df[\"y\"], preds), 3)\nmae = round(mean_absolute_error(df[\"y\"], preds), 3)\nprint(\"R2: \", r2)\nprint(\"MSE: \", mse)\nprint(\"MAE: \", mae)","8765eaba":"fig1 = m.plot(forecast)\nfig1.set_size_inches(15,6)","7f82c5ff":"fig2 = m.plot_components(forecast)\nplt.show()","8d3a3751":"playoffs = ['2013-07-12', '2014-07-12', '2014-07-19',\n                 '2014-07-02', '2015-07-11', '2016-07-17',\n                 '2016-07-24', '2016-07-07','2016-07-24']\nsuperbowl = ['2013-01-01', '2013-12-25', '2014-01-01', '2014-12-25','2015-01-01', '2015-12-25','2016-01-01', '2016-12-25',\n                '2017-01-01', '2017-12-25']\n\nplayoffs = pd.DataFrame({\n  'holiday': 'playoff',\n  'ds': pd.to_datetime(playoffs),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nsuperbowls = pd.DataFrame({\n  'holiday': 'superbowl',\n  'ds': pd.to_datetime(superbowl),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nholidays = pd.concat((playoffs, superbowls))","6b8bd1ff":"df[\"dow\"] = pd.to_datetime(train[\"date\"]).dt.day_name() # day of week\ndf.head()","3cb0a735":"def nfl_sunday(ds):\n    date = pd.to_datetime(ds)\n    if date.weekday() == 6 and (date.month > 8 or date.month < 2):\n        return 1\n    else:\n        return 0","f2327ee7":"df =df[[\"ds\", 'y']]\ndf.head()","114b59a8":"df[\"nfl_sunday\"] = df['ds'].apply(nfl_sunday)\ndf","b2340d63":"m = Prophet(holidays=holidays, holidays_prior_scale=0.5,\n            yearly_seasonality=4,  interval_width=0.95,\n            changepoint_prior_scale=0.006, daily_seasonality=True)\nm.add_regressor('nfl_sunday')\nm.add_seasonality(name='daily', period=60, fourier_order=5)\nm.fit(df)","b040b365":"future = m.make_future_dataframe(periods=90, freq=\"D\") # Daily frequency\nfuture['nfl_sunday'] = future['ds'].apply(nfl_sunday)\nfuture.head()","b08564f9":"forecast=m.predict(future)","51b0cb8f":"preds= forecast['yhat'][:-90]","5cce23d0":"plt.figure(figsize=(15,6))\nplt.plot(df.ds,preds,color='red',label=' Predictions')\nplt.plot(df.ds,df.y,color='blue',label='Actual')\nplt.legend()\nplt.show()","dc70f120":"r2 = round(r2_score(df[\"y\"], preds), 3)\nmse = round(mean_squared_error(df[\"y\"], preds), 3)\nmae = round(mean_absolute_error(df[\"y\"], preds), 3)\nprint(\"R2: \", r2)\nprint(\"MSE: \", mse)\nprint(\"MAE: \", mae)","cd790039":"fig1 = m.plot(forecast)","0adcda8e":"fig2 = m.plot_components(forecast)\nplt.show()","a361de54":"future.tail()","11bf7660":"ps1i1 = forecast[[\"ds\"]]\nps1i1[\"forecast\"] = np.expm1(forecast[\"yhat\"])\nps1i1[\"yearmonth\"] = pd.to_datetime(ps1i1[\"ds\"]).dt.to_period(\"M\")\nps1i1.head()","5277e847":"def smape(outsample, forecast):\n    num = np.abs(outsample-forecast)\n    denom = np.abs(outsample) + np.abs(forecast)\n    return (num\/denom)\/2\n\ndf[\"ds\"] = pd.to_datetime(df[\"ds\"])","8516b5db":"ps1i1[\"ds\"] = pd.to_datetime(ps1i1[\"ds\"])","6cd58bba":"train_predict = df.merge(ps1i1)","12442770":"smape_err = smape(train_predict[\"y\"], train_predict[\"forecast\"])\nsmape_err = smape_err[~np.isnan(smape_err)]\nnp.mean(smape_err)","44ce2318":"def make_prediction(df):\n    \n    playoffs = ['2013-07-12', '2014-07-12', '2014-07-19',\n                 '2014-07-02', '2015-07-11', '2016-07-17',\n                 '2016-07-24', '2016-07-07','2016-07-24']\n    superbowl = ['2013-01-01', '2013-12-25', '2014-01-01', '2014-12-25','2015-01-01', '2015-12-25','2016-01-01', '2016-12-25',\n                    '2017-01-01', '2017-12-25']\n\n    playoffs = pd.DataFrame({\n      'holiday': 'playoff',\n      'ds': pd.to_datetime(playoffs),\n      'lower_window': 0,\n      'upper_window': 1,\n    })\n    superbowls = pd.DataFrame({\n      'holiday': 'superbowl',\n      'ds': pd.to_datetime(superbowl),\n      'lower_window': 0,\n      'upper_window': 1,\n    })\n    holidays = pd.concat((playoffs, superbowls))\n    \n    m = Prophet(holidays=holidays, holidays_prior_scale=0.5,\n            yearly_seasonality=4,  interval_width=0.95,\n            changepoint_prior_scale=0.006, daily_seasonality=True)\n    m.add_seasonality(name='daily', period=60, fourier_order=5)\n    m.fit(df)\n    future = m.make_future_dataframe(periods=90)\n    forecast = m.predict(future)\n    return forecast","a46b36ef":"**My analysis: We see sales drop from Sunday to Monday so there must be a holiday effect in the sales data. There's a peak in July so this may be due to seasonal sales or summer festivities.**\n\n**Next step, try excluding change points and include holiday effects. Let's count NFL playoffs as a holiday. And add an extra regressor for NFL sundays.**"}}