{"cell_type":{"7fa0a886":"code","1b6586d2":"code","3d60d39d":"code","48b3a519":"code","e070060f":"code","16fed184":"code","ea6a4807":"code","af99d0fa":"code","cd6b1f77":"code","562e5062":"code","3c134687":"code","9d72f21b":"code","93d01787":"code","128dded9":"code","1435d086":"code","deadb335":"code","af417186":"code","a937bb98":"code","67d3d732":"code","ea8383c1":"code","8e4780d8":"code","b293250d":"code","62deed73":"code","30dffe16":"code","e7d3da87":"code","3470eebf":"code","de5b004d":"code","d2ca2ad0":"code","8c93505d":"code","582b5bc0":"code","94d6bc54":"code","14bc9f7d":"code","4d314fb4":"code","de5e682d":"code","c6436c3b":"code","d75659da":"code","6f56e4bd":"code","160bbd13":"code","16b7a29e":"code","507e9d40":"code","7fe7e243":"code","6b3dc2e7":"markdown","bedd8437":"markdown","e7c3fbdf":"markdown","0fc03340":"markdown","7053496b":"markdown","914b9383":"markdown"},"source":{"7fa0a886":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nfrom nltk.corpus import stopwords\nfrom gensim.models import KeyedVectors\nfrom sklearn.model_selection import train_test_split\nimport datetime\nfrom time import time\nimport itertools\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Model\nfrom keras.layers import Input, Embedding,LSTM,Lambda\nimport keras.backend as K\nfrom keras.optimizers import Adadelta\nfrom keras.callbacks import ModelCheckpoint\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1b6586d2":"## Loading the data set \ntrain=pd.read_csv('\/kaggle\/input\/question-pairs-dataset\/questions.csv')## quora question pair\ntest= pd.read_csv(\"\/kaggle\/input\/textsimsdata\/textsimdata.csv\")#assignment data\nEmbedding_vectors='\/kaggle\/input\/googlenewsvectorsnegative300\/GoogleNews-vectors-negative300.bin'### pre-train word embedding","3d60d39d":"train.head()","48b3a519":"train.drop(['qid1','qid2'],axis=1,inplace=True)","e070060f":"train.rename(columns={'id':'Unique_Id','question1':'text1','question2':'text2','is_duplicate':'similarity'},inplace=True)","16fed184":"train.head()","ea6a4807":"train.shape","af99d0fa":"test.head()","cd6b1f77":"test.shape","562e5062":"train=train[:5000]","3c134687":"train.shape","9d72f21b":"Embedding_vectors","93d01787":"## Data Preprocessing\nstops = set(stopwords.words('english'))\ndef text_to_word_list(text):\n    ''' Pre \\process and convert texts to a list of words '''\n    text = str(text)\n    text = text.lower()\n    # Clean the text\n    text = re.sub(r\"[^A-Za-z0-9^,!.\\\/'+-=]\", \" \", text)\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"\\'s\", \" \", text)\n    text = re.sub(r\"\\'ve\", \" have \", text)\n    text = re.sub(r\"can't\", \"cannot \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"\\'re\", \" are \", text)\n    text = re.sub(r\"\\'d\", \" would \", text)\n    text = re.sub(r\"\\'ll\", \" will \", text)\n    text = re.sub(r\",\", \" \", text)\n    text = re.sub(r\"\\.\", \" \", text)\n    text = re.sub(r\"!\", \" ! \", text)\n    text = re.sub(r\"\\\/\", \" \", text)\n    text = re.sub(r\"\\^\", \" ^ \", text)\n    text = re.sub(r\"\\+\", \" + \", text)\n    text = re.sub(r\"\\-\", \" - \", text)\n    text = re.sub(r\"\\=\", \" = \", text)\n    text = re.sub(r\"'\", \" \", text)\n    text = re.sub(r\"(\\d+)(k)\", r\"\\g<1>000\", text)\n    text = re.sub(r\":\", \" : \", text)\n    text = re.sub(r\" e g \", \" eg \", text)\n    text = re.sub(r\" b g \", \" bg \", text)\n    text = re.sub(r\" u s \", \" american \", text)\n    text = re.sub(r\"\\0s\", \"0\", text)\n    text = re.sub(r\" 9 11 \", \"911\", text)\n    text = re.sub(r\"e - mail\", \"email\", text)\n    text = re.sub(r\"j k\", \"jk\", text)\n    text = re.sub(r\"\\s{2,}\", \" \", text)\n    text = text.split()\n    return text\n","128dded9":"# Prepare embedding\nvocabulary = dict()\ninverse_vocabulary = ['<unk>']  # '<unk>'  is only a placeholder for the [0, 0, ....0] embedding\n#KeyedVectors and is essentially a mapping between entities and vectors\nword2vec = KeyedVectors.load_word2vec_format(Embedding_vectors, binary=True)##loading Embedding\n","1435d086":"##preparing both train and test data for tranining by creating embedding of each words in the text1 and text2\nquestions_cols = ['text1', 'text2']\n# Iterate over the questions only of both training and test datasets\nfor dataset in [train, test]:\n    for index, row in dataset.iterrows():\n\n        # Iterate through the text of both questions of the row\n        for question in questions_cols:\n\n            q2n = []  # q2n -> question numbers representation\n            for word in text_to_word_list(row[question]):\n                # Check for unwanted words\n                if word in stops and word not in word2vec.vocab:\n                    continue\n                if word not in vocabulary:\n                    vocabulary[word] = len(inverse_vocabulary)\n                    q2n.append(len(inverse_vocabulary))\n                    inverse_vocabulary.append(word)\n                else:\n                    q2n.append(vocabulary[word])\n            # Replace questions as word to question as number representation\n            dataset.set_value(index, question, q2n)","deadb335":"# creating embeding with 300 dimensions    \nembedding_dim = 300\nembeddings = 1 * np.random.randn(len(vocabulary) + 1, embedding_dim)  # This will be the embedding matrix\nembeddings[0] = 0  # So that the padding will be ignored\n# Build the embedding matrix\nfor word, index in vocabulary.items():\n    if word in word2vec.vocab:\n        embeddings[index] = word2vec.word_vec(word)\n\ndel word2vec#free space by deleting variable","af417186":"train.head()","a937bb98":"test.head()","67d3d732":"## findinf max length of text1 and text2 in both train an text for padding to make the both sentences length equal.\nmax_seq_length = max(train.text1.map(lambda x: len(x)).max(),\n                     train.text2.map(lambda x: len(x)).max(),\n                     test.text1.map(lambda x: len(x)).max(),\n                     test.text2.map(lambda x: len(x)).max())\n\n# Split to train validation\nvalidation_size = 1000\ntraining_size = len(train) - validation_size\n\nX = train[questions_cols]\nY = train['similarity']\n\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, test_size=validation_size)\n\n# Split to dicts\nX_train = {'left': X_train.text1, 'right': X_train.text2}\nX_validation = {'left': X_validation.text1, 'right': X_validation.text2}\nX_test = {'left': test.text1, 'right': test.text2}\n\n# Convert labels to their numpy representations\nY_train = Y_train.values\nY_validation = Y_validation.values\n\n# Zero padding\nfor dataset, side in itertools.product([X_train, X_validation], ['left', 'right']):\n    dataset[side] = pad_sequences(dataset[side], maxlen=max_seq_length)\n\n\"\"\" assert help to check if the program is running smoothly if returns nothing \nif it is true but raises and error if it is false and stops further execution\"\"\"\nassert X_train['left'].shape == X_train['right'].shape\nassert len(X_train['left']) == len(Y_train)","ea8383c1":"\n# Model variables\nn_hidden = 50\ngradient_clipping_norm = 1.25\nbatch_size = 70\nn_epoch = 10\n\ndef exponent_neg_manhattan_distance(left, right):\n    ''' Helper function for the similarity estimate of the LSTMs outputs'''\n    return K.exp(-K.sum(K.abs(left-right), axis=1, keepdims=True))\n\n# The visible layer\nleft_input = Input(shape=(max_seq_length,), dtype='int32')\nright_input = Input(shape=(max_seq_length,), dtype='int32')\n\nembedding_layer = Embedding(len(embeddings), embedding_dim, weights=[embeddings], input_length=max_seq_length, trainable=False)\n\n# Embedded version of the inputs\nencoded_left = embedding_layer(left_input)\nencoded_right = embedding_layer(right_input)\n\n# Since this is a siamese network, both sides share the same LSTM\nshared_lstm = LSTM(n_hidden)\nleft_output = shared_lstm(encoded_left)\nright_output = shared_lstm(encoded_right)\n\n# Calculates the distance as defined by the MaLSTM model\nmalstm_distance = Lambda(function=lambda x: exponent_neg_manhattan_distance(x[0], x[1]),output_shape=lambda x: (x[0][0], 1))([left_output, right_output])\n\n# Pack it all up into a model\nmalstm = Model([left_input, right_input], [malstm_distance])\n\n# Adadelta optimizer, with gradient clipping by norm\noptimizer = Adadelta(clipnorm=gradient_clipping_norm)\n\nmalstm.compile(loss='mean_squared_error', optimizer=optimizer, metrics=['accuracy'])","8e4780d8":"#encoded_left","b293250d":"# Start training\ntraining_start_time = time()\n\nmalstm_trained = malstm.fit([X_train['left'], X_train['right']], Y_train, batch_size=batch_size, nb_epoch=n_epoch,\n                            validation_data=([X_validation['left'], X_validation['right']], Y_validation))\n\nprint(\"Training time finished.\\n{} epochs in {}\".format(n_epoch, datetime.timedelta(seconds=time()-training_start_time)))","62deed73":"# preparing the text data for prediction","30dffe16":"# Split to dicts\nX_test = {'left': test.text1, 'right': test.text2}\n# Zero padding\nfor dataset, side in itertools.product([X_test], ['left', 'right']):\n    dataset[side] = pad_sequences(dataset[side], maxlen=max_seq_length)\n\nassert X_test['left'].shape == X_test['right'].shape\n","e7d3da87":"result=malstm.predict([X_test['left'], X_test['right']])","3470eebf":"result","de5b004d":"prediction=result ## copying the variable so that we can reuse if any thing goes wrong","d2ca2ad0":"prediction","8c93505d":"prediction=prediction.tolist()### ndarry to list","582b5bc0":"prediction","94d6bc54":"#Here we flatten the list of list to a single list\nflatten = itertools.chain.from_iterable\nprediction=list(flatten(prediction))\n","14bc9f7d":"pred = [round(num) for num in prediction]#Here we round the manhattan distance of the prediction which is between 0 and 1","4d314fb4":"pred","de5e682d":"final= pd.DataFrame(pred, columns =['similarity'])","c6436c3b":"from sklearn.metrics.pairwise import cosine_similarity\ndef get_cosine_similarity(f1,f2):\n    return cosine_similarity(np.array(f1).reshape(1,4077),np.array(f2).reshape(1,4077))","d75659da":"X_test['left'][0].shape","6f56e4bd":"X_test['right'][0].shape","160bbd13":"for i in range (4023):\n    print(get_cosine_similarity(X_test['left'][i], X_test['right'][i ])[0][0])","16b7a29e":"submission=result = pd.concat([test['Unique_ID'], final['similarity']], axis=1, sort=False)","507e9d40":"submission.to_csv('submision.csv')## prediction to csv ","7fe7e243":"### pickling the model for future use\nfrom sklearn.externals import joblib  \njoblib.dump(malstm, 'model.pkl')","6b3dc2e7":"data analysis","bedd8437":"# Prepare training and validation data","e7c3fbdf":"used two dataset and one pretrained google word embedding","0fc03340":"# Training","7053496b":"# Creating matrix of wordEmbedding","914b9383":"# Building model using MaLSTM(MA:Manhattan distance)"}}