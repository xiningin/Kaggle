{"cell_type":{"fa8dee4f":"code","1fbcf40c":"code","bd09c6f0":"code","79f9742c":"code","e982e44e":"code","755461a2":"code","025e9d91":"code","e4d2aa64":"markdown","0ee5defc":"markdown","27c80584":"markdown","d2871036":"markdown","1feefe87":"markdown","72864879":"markdown","e06a0bcf":"markdown"},"source":{"fa8dee4f":"import pandas as pd   \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True) \n\nplt.style.use('bmh')\n%matplotlib inline\nplt.rcParams['figure.dpi'] = 100","1fbcf40c":"pokedata = pd.read_csv(\"..\/input\/pokemon-all-cleaned\/pokemon_cleaned.csv\")","bd09c6f0":"pokedata.head()","79f9742c":"x = pokedata[pokedata[\"Name\"] == \"Charizard\"]\ndata = [go.Scatterpolar(\n  r = [x['HP'].values[0],x['Attack'].values[0],x['Defense'].values[0],x['Sp. Atk'].values[0],x['Sp. Def'].values[0],x['Speed'].values[0],x[\"HP\"].values[0]],\n  theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n  fill = 'toself',\n     line =  dict(\n            color = 'orange'\n        )\n)]\n\nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 200]\n    )\n  ),\n  showlegend = False,\n  title = \"{} stats distribution\".format(x.Name.values[0])\n)\nfig = go.Figure(data=data, layout=layout)\nfig.layout.images = [dict(\n        source=\"https:\/\/rawgit.com\/guramera\/images\/master\/Charizard.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.95, y=0.3,\n        sizex=0.6, sizey=0.6,\n        xanchor=\"center\", yanchor=\"bottom\"\n      )]\n\niplot(fig, filename = \"Single Pokemon stats\")","e982e44e":"pokedata.loc[[pokedata['Speed'].idxmax()]]","755461a2":"x = pokedata.loc[[pokedata['Speed'].idxmax()]]\ndata = [go.Scatterpolar(\n  r = [x['HP'].values[0],x['Attack'].values[0],x['Defense'].values[0],x['Sp. Atk'].values[0],x['Sp. Def'].values[0],x['Speed'].values[0],x[\"HP\"].values[0]],\n  theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n  fill = 'toself',\n     line =  dict(\n            color = 'darkkhaki'\n        )\n)]\n\nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 200]\n    )\n  ),\n  showlegend = False,\n  title = \"{} stats distribution\".format(x.Name.values[0])\n)\nfig = go.Figure(data=data, layout=layout)\nfig.layout.images = [dict(\n        source=\"https:\/\/rawgit.com\/guramera\/images\/master\/Ninjask.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.95, y=0.3,\n        sizex=0.6, sizey=0.6,\n        xanchor=\"center\", yanchor=\"bottom\"\n      )]\n\niplot(fig, filename = \"Single Pokemon stats\")","025e9d91":"from plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True) \n\na = pokedata[pokedata[\"Name\"] == \"Blastoise\"]\nb = pokedata[pokedata[\"Name\"] == \"Charizard\"]\n\ndata = [\n    go.Scatterpolar(\n        name = a.Name.values[0],\n        r = [a['HP'].values[0],a['Attack'].values[0],a['Defense'].values[0],a['Sp. Atk'].values[0],a['Sp. Def'].values[0],a['Speed'].values[0],a[\"HP\"].values[0]],\n        theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n        fill = 'toself',\n        line =  dict(\n                color = 'cyan'\n            )\n        ),\n    go.Scatterpolar(\n            name = b.Name.values[0],\n            r = [b['HP'].values[0],b['Attack'].values[0],b['Defense'].values[0],b['Sp. Atk'].values[0],b['Sp. Def'].values[0],b['Speed'].values[0],b[\"HP\"].values[0]],\n            theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n            fill = 'toself',\n            line =  dict(\n                color = 'orange'\n            )\n        )]\n\nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 200]\n    )\n  ),\n  showlegend = True,\n  title = \"{} vs {} Stats Comparison\".format(a.Name.values[0], b.Name.values[0])\n)\n\nfig = go.Figure(data=data, layout=layout)\n\nfig.layout.images = [dict(\n        source=\"https:\/\/rawgit.com\/guramera\/images\/master\/blastoise.jpg\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.05, y=-0.15,\n        sizex=0.6, sizey=0.6,\n        xanchor=\"center\", yanchor=\"bottom\"\n      ),\n        dict(\n        source=\"https:\/\/rawgit.com\/guramera\/images\/master\/Charizard.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=1, y=-0.15,\n        sizex=0.6, sizey=0.6,\n        xanchor=\"center\", yanchor=\"bottom\"\n      ) ]\n\n\niplot(fig, filename = \"Pokemon stats comparison\")","e4d2aa64":"<a id='polar'><\/a>\n## Plotly polar chart \n\n\nPolar charts or radar charts are a way of comparing multiple quantitative variables. This makes them useful for seeing which variables have similar values or if there are any outliers amongst each variable. Polar charts are also useful for seeing which variables are scoring high or low within a dataset, making them ideal for displaying performance.\n\nNow let's use plotly to draw a polar chart showing Charizard stats \n","0ee5defc":"Now it's clearer how polar chart are especially good for visualizing comparisons of quality data. We can clearly see how **Ninjask** has extremely high **speed**, but is very lacking in other stats, especially **defense, sp. attack, and sp. def**","27c80584":"<a id='compare'><\/a>\n##  Using polar chart to compare Pokemon\n\nPolar charts maybe are the most effective to compare two or more products to see the quality difference between them. It will be interesting if we're able to compare more than one Pokemon in the polar chart to see how they compare. Let's see if we can do that by adding another Pokemon data to the code","d2871036":"By looking at the above chart, we can understand whether certain Pokemon have any particular stats that they excel or lack at using polar chart, . We can also add more Pokemon to the chart, but we must be mindful of the chart readability if we put too many variables.","1feefe87":"**That's it for this post, thank you so much for reading it, special thanks to Chinmay Upadhye for providing the original Kernel and also Alberto Barradas and Rounak Banik for providing excellent datasets.**\n","72864879":"## In this tutorial, we'll try to do data visualization using Plotly. Plotly, just like Seaborn and Matplotlib is another Python library to make graphs or charts, it can make interactive, publication-quality graphs online. We are using the [Pokemon dataset](https:\/\/www.kaggle.com\/gurarako\/pokemon-all-cleaned) that have been cleaned beforehand.\n\n## Table of Content\n* [Plotly polar chart](#polar)\n* [Using polar chart to compare Pokemon](#compare)\n\nAs usual, we'll start by importing all the packages and take a peek at the first 5 rows of the dataframe","e06a0bcf":"According to the above chart, there doesn't seem to be any particular stats that Charizard truly excels or lacks at. Charizard seems to have mostly above average stats. \n\nMaybe now we'll try some Pokemon that has extreme difference in their stats, let's find which Pokemon has the highest speed stat first and then use  that Pokemon data in the polar chart."}}