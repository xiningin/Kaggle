{"cell_type":{"830e6a05":"code","d42b06d7":"code","1f0957b9":"code","7ef275a0":"code","a1f4832d":"code","5a5c1fbe":"code","e6e61c1f":"code","56b2366c":"code","89cbbe77":"code","e99cf346":"code","41979519":"code","0f9e4514":"code","c615dfcb":"code","ce2cb010":"code","fe131505":"code","5147118b":"code","afd65c66":"code","0a5de160":"code","7aeda65c":"code","ef064137":"code","32bb53a3":"code","3b0a7eb3":"code","6944b773":"code","65aff0e7":"code","12946ba5":"code","71417e2e":"code","f8b4f187":"code","2406b556":"code","5ea7ca5b":"code","8471f353":"code","754edaa8":"code","c9bae228":"code","5f4fefef":"code","96cf3c00":"code","ed421c33":"code","edc383c6":"code","3cf0824b":"code","59bd6768":"code","c4566334":"code","d23b4ad4":"code","23b0d613":"code","9dd19134":"code","72192c11":"code","ef0432ab":"code","27590a38":"code","7ed7c4de":"code","cb9f900a":"code","be17331e":"code","e02b61d0":"code","6e0adeba":"code","10295b6a":"code","8020e017":"code","9a618553":"code","4db55c67":"markdown","38063300":"markdown","6356e35e":"markdown","ca99b6f3":"markdown","9c5d84f5":"markdown","47204e39":"markdown","264dcc1e":"markdown","c9347912":"markdown","1ec79850":"markdown","dcab031b":"markdown","b9630df6":"markdown","d00c03ae":"markdown","0c0c2369":"markdown","0099f1aa":"markdown","6e1592a3":"markdown","2e3c59e9":"markdown","3c366193":"markdown","b66ff17a":"markdown","9cf1d05a":"markdown","5bb59362":"markdown","686743f7":"markdown","12034583":"markdown","1955cfe4":"markdown","659d45d4":"markdown","a9314263":"markdown"},"source":{"830e6a05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d42b06d7":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","1f0957b9":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","7ef275a0":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","a1f4832d":"train_data.info()","5a5c1fbe":"train_data.describe()","e6e61c1f":"train_data.isnull().sum()","56b2366c":"train_data['Age'] = train_data['Age'].fillna(train_data['Age'].mean())\ntrain_data['Embarked'] = train_data['Embarked'].fillna('S')\ntrain_data['Cabin'] = train_data['Cabin'].fillna('Missing')","89cbbe77":"train_data.isnull().sum()","e99cf346":"train_data.head(10)","41979519":"# Gender Counting\ntrain_data.Sex.value_counts()","0f9e4514":"def visual_majority_count(data):\n    plt.figure(figsize=(12,6))\n    g = sns.countplot(data.Sex)\n    plt.title('MAJORITY PASSENGER COUNTS', weight='bold')\n    plt.grid(linestyle = '--', axis='y')\n\n    for i in ['top','left','right']:\n        g.spines[i].set_visible(False)\n    plt.tight_layout()\n    \nvisual_majority_count(train_data)","c615dfcb":"# Men survival rate\nmen = train_data[train_data.Sex=='male']['Survived']\nmen_rate = sum(men)\/len(men)\nprint('The survival rate of male candidates in titanic was: {}%'.format(round(men_rate*100,2)))\n","ce2cb010":"# Women survival rate\nwomen = train_data[train_data.Sex == 'female']['Survived']\nwomen_rate = sum(women)\/len(women)\nprint('The survival rate of female candidates in titanic was: {}%'.format(round(women_rate * 100,2)))","fe131505":"def find_survival_rate(data):\n    for val in ['Pclass','SibSp','Parch','Sex']:\n        plt.figure(figsize=(16,6))\n        g = sns.countplot(data[val], hue = data.Survived)\n        plt.title(val)\n        plt.grid(linestyle = '--', axis='y')\n\n        for i in ['top','left','right']:\n            g.spines[i].set_visible(False)\n        plt.show()\n        \nfind_survival_rate(train_data)","5147118b":"train_data.head()","afd65c66":"train_data.Age = train_data.Age.astype(int)","0a5de160":"def find_survival_for_age(data):\n    plt.figure(figsize=(20,6))\n    sns.countplot(data.Age, hue=train_data.Survived)\n    plt.title('Age', weight='bold')\n    plt.xticks(rotation = 60)\n    plt.tight_layout()\nfind_survival_for_age(train_data)","7aeda65c":"# finding the correlated attributes\ndef find_correlational_map(data):\n    plt.figure(figsize=(16,8))\n    sns.heatmap(data.corr(), annot=True)\n    plt.title('Correlational-Map', weight='bold')\n    plt.tight_layout()\n    \nfind_correlational_map(train_data)","ef064137":"train_data.head()","32bb53a3":"train_data.Cabin = train_data.Cabin.apply(lambda x: x[0])\ntrain_data.head()\n","3b0a7eb3":"train_data.Sex = train_data.Sex.apply(lambda x: 1 if x == 'male' else 0)\ntrain_data.head()","6944b773":"train_data = pd.get_dummies(train_data, columns=['Embarked','Cabin'])\ntrain_data.head()","65aff0e7":"train_data.drop(['Name','Fare','Ticket'], axis=1, inplace=True)\ntrain_data.head()","12946ba5":"train_data.drop('PassengerId', axis=1, inplace=True)","71417e2e":"y = train_data.pop('Survived')","f8b4f187":"X = train_data","2406b556":"y.head()","5ea7ca5b":"X.head()","8471f353":"X_train = X.copy()","754edaa8":"test_data.head()","c9bae228":"test_data.isnull().sum()","5f4fefef":"X_train.shape","96cf3c00":"test_data.Age = test_data.Age.fillna(test_data.Age.mean())\ntest_data.Cabin = test_data.Cabin.fillna('Missing')\ntest_data.isnull().sum()","ed421c33":"test_data.Cabin = test_data.Cabin.apply(lambda x: x[0])\ntest_data.head()","edc383c6":"test_data.drop(['Name','Ticket','Fare'], axis=1, inplace=True)\ntest_data.head()","3cf0824b":"test_data.Sex = test_data.Sex.apply(lambda x: 1 if x == 'male' else 0)\ntest_data = pd.get_dummies(test_data, columns=['Embarked','Cabin'])\ntest_data.head()","59bd6768":"test_data.shape","c4566334":"test_data.head(2)","d23b4ad4":"X.head(2)","23b0d613":"X.drop('Cabin_T', axis=1, inplace=True)\nX.shape","9dd19134":"test_data.shape","72192c11":"X_train = X.copy()\nX_train.shape","ef0432ab":"test_data.columns","27590a38":"test_data.head()\ntest_data_2 = test_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Embarked_C',\n       'Embarked_Q', 'Embarked_S', 'Cabin_A', 'Cabin_B', 'Cabin_C', 'Cabin_D',\n       'Cabin_E', 'Cabin_F', 'Cabin_G', 'Cabin_M']] ","7ed7c4de":"X_test = test_data_2.copy()\nX_test.shape","cb9f900a":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, plot_confusion_matrix, plot_roc_curve\ny_train, y_test = train_test_split(y, test_size = 0.2, random_state = 365)","be17331e":"n_estimators = [int(x) for x in np.linspace(start=100, stop=2000, num = 12)]\nmax_features = [\"auto\", \"sqrt\", \"log2\"]\nmax_depth = [int(x) for x in np.linspace(10,100, num=10)]\nmin_samples_split = [2, 4, 6, 10]\nmin_samples_leaf = [1,2,3,4,5]\nbootstrap = [True, False]\n\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)\n\n","e02b61d0":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nmodel = RandomForestClassifier(random_state=1, n_estimators=100, max_depth=5)\nmodel.fit(X, y)\npredictions = model.predict(X_test)","6e0adeba":"test_data.head()","10295b6a":"output = pd.DataFrame({'PassengerId':test_data.PassengerId, 'Survived':predictions})","8020e017":"output","9a618553":"output.to_csv('my_submission.csv', index=False)\nprint('Successfully created')","4db55c67":"This is our final cleaned data for our model training","38063300":"As we can see female candidates shows splendid survival rate of 74 percent. The gender attributes shows the major impact here.","6356e35e":".","ca99b6f3":"Drop name, fare, and ticket column, passenger id","9c5d84f5":"Let's grab all the first element from the cabin column","47204e39":".","264dcc1e":"Let's one hot encode for sex column, cabin, and embarked","c9347912":"Grab only the first letter for cabin","1ec79850":"Survived column is the dependent variable","dcab031b":"OneHotencoding for both cabin and embarked.\n* Here, I'm using get dummies to create a numerical value for both cabin and embarked.","b9630df6":"Age, cabin, and embarked column contains missing values","d00c03ae":"It can be inferred from the above that,\n* The passengers who belong to the class 'P1 & P2' has the maximum survival rate.\n* All the candidates who falls under '1' 'sibsp' has survived.\n* Women shows the majority of survival rate.\n","0c0c2369":"# **Data Preparation for Model Building**","0099f1aa":"# **HANDLING MISSING VALUES**","6e1592a3":"Let's drop fare, ticket, and name column from the dataset as it doesn't make sense for ML model","2e3c59e9":"Now, there is no missing values in the train data.","3c366193":"# **Random Forest Model**","b66ff17a":"In the titanic, the majority of the passengers were male candidates.","9cf1d05a":"# **EDA (Exploratory Data Analysis)**","5bb59362":"Here,\nAge is continuous, so, we can replace missing values with the mean values of age.\nThe majority of Embarked is belong to S category, so, we can replace the missing values with S.\nThe cabin shows highest missing values. We can replace the missing values with 'Missing'.\n","686743f7":"# **Correlational Map**","12034583":"Converting Sex column (categorical to numerical),\n* This can be performed either by OneHotencoding or by normal method.\n* Here, I'm using the normal method.","1955cfe4":"Let's deal with the missing values","659d45d4":"# **Data Splitting into X and y**","a9314263":"Convert age to int dtype to check the over-all survival rate for the age"}}