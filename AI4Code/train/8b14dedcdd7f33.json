{"cell_type":{"2219b84b":"code","0ed92e58":"code","70f742aa":"code","6aa9ee98":"code","fdfe7be2":"code","5b261932":"code","3b059ee9":"code","f23a1c0f":"code","c30bde01":"code","8816192d":"code","0a62576e":"code","0bef01ce":"code","56a176ae":"code","ad196637":"code","a1ebfbef":"code","a8a06473":"code","832a17bb":"code","19032e52":"code","20debd53":"code","48961552":"code","0d65e888":"code","9a603dc3":"code","c28091ec":"code","009c7de8":"code","58a510c8":"code","05a01bed":"code","f4bd6af6":"code","0a19d6ac":"code","0399bcf3":"code","3d309cb3":"code","9db1a7ca":"code","9848266c":"code","b623f4b3":"code","5ee635b4":"code","70f6cf76":"code","3e96e0dd":"code","2800053b":"code","769089a7":"code","bffeac10":"code","8acc281c":"code","ed2f99e4":"code","3df54310":"markdown","7623b626":"markdown","7529e6ba":"markdown","603867fc":"markdown","b3f62ad1":"markdown","a45f9d83":"markdown","69f399d7":"markdown","d8f29bf1":"markdown","04df3974":"markdown","b7ae42cf":"markdown","2d3be70e":"markdown","5fd49512":"markdown","259c391f":"markdown"},"source":{"2219b84b":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')","0ed92e58":"data = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","70f742aa":"data.head(10)","6aa9ee98":"# Removing irrelevant features\ndata = data.drop(['App','Last Updated','Current Ver','Android Ver'],axis='columns')","fdfe7be2":"data.head(10)","5b261932":"# checking for null values\ndata.isna().sum()","3b059ee9":"# drop the entire record if null value is present in 'any' of the feature\ndata.dropna(how='any',inplace=True)","f23a1c0f":"data.shape","c30bde01":"data.isna().sum()","8816192d":"data.dtypes","0a62576e":"# changing the datatype of Review column from integer from object\ndata = data.astype({'Reviews':'int'})","0bef01ce":"data.Size.value_counts().head()","56a176ae":"data.Size.value_counts().tail()","ad196637":"# Replacing 'Varies with device' value with Nan values\ndata['Size'].replace('Varies with device', np.nan, inplace = True ) ","a1ebfbef":"# Removing the suffixes (k and M) and representing all the data as bytes \n# (i.e)for k, value is multiplied by 100 and for M, the value is multiplied by 1000000 \ndata.Size = (data.Size.replace(r'[kM]+$', '', regex=True).astype(float) * \\\n             data.Size.str.extract(r'[\\d\\.]+([KM]+)', expand=False).fillna(1)\n            .replace(['k','M'], [10**3, 10**6]).astype(int))","a8a06473":"# filling \"Varies with device\" with mean of size in each category\ndata['Size'].fillna(data.groupby('Category')['Size'].transform('mean'),inplace = True)","832a17bb":"# Removing comma(,) and plus(+) signs\ndata.Installs = data.Installs.apply(lambda x: x.replace(',',''))\ndata.Installs = data.Installs.apply(lambda x: x.replace('+',''))","19032e52":"# changing the datatype from object to integer\ndata = data.astype({'Installs':'int'})","20debd53":"data.Price.value_counts()","48961552":"# Removing dollar($) sign and changing the type to float\ndata.Price = data.Price.apply(lambda x: x.replace('$',''))\ndata['Price'] = data['Price'].apply(lambda x: float(x))","0d65e888":"data.Genres.value_counts().tail()","9a603dc3":"data['Genres'] = data.Genres.str.split(';').str[0]","c28091ec":"data.Genres.value_counts()","009c7de8":"# Group Music & Audio as Music\ndata['Genres'].replace('Music & Audio', 'Music',inplace = True)","58a510c8":"data['Content Rating'].value_counts()","05a01bed":"# Removing the entire row from the data where content rating is unrated as there is only one row\ndata = data[data['Content Rating'] != 'Unrated']","f4bd6af6":"data.dtypes","0a19d6ac":"from sklearn.preprocessing import OneHotEncoder,LabelEncoder\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import StandardScaler\ncolumn_trans = make_column_transformer(\n                (OneHotEncoder(),['Category','Installs','Type','Content Rating','Genres']),\n                (StandardScaler(),['Reviews','Size','Price']),\n                remainder = 'passthrough')","0399bcf3":"# Choosing X and y value\nX = data.drop('Rating',axis='columns')\ny = data.Rating","3d309cb3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 0)","9db1a7ca":"column_trans.fit_transform(X_train)","9848266c":"from sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\nlinreg = LinearRegression()\npipe = make_pipeline(column_trans,linreg)","b623f4b3":"from sklearn.model_selection import cross_validate\nlinreg_score = cross_validate(pipe, X_train, y_train, cv=10, scoring=['neg_mean_squared_error','neg_mean_absolute_error'],return_train_score=False)\nprint('Mean Absolute Error: {}'.format(linreg_score['test_neg_mean_absolute_error'].mean()))\nprint('Mean Squared Error: {}'.format(linreg_score['test_neg_mean_squared_error'].mean()))\nprint('Root Mean Squared Error: {}'.format(np.sqrt(-linreg_score['test_neg_mean_squared_error'].mean())))","5ee635b4":"from sklearn.svm import SVR\nsvr = SVR()\npipe = make_pipeline(column_trans,svr)\nsvr_score = cross_validate(pipe, X_train, y_train, cv=10, scoring=['neg_mean_squared_error','neg_mean_absolute_error'],return_train_score=False)\nprint('Mean Absolute Error: {}'.format(svr_score['test_neg_mean_absolute_error'].mean()))\nprint('Mean Squared Error: {}'.format(svr_score['test_neg_mean_squared_error'].mean()))\nprint('Root Mean Squared Error: {}'.format(np.sqrt(-svr_score['test_neg_mean_squared_error'].mean())))","70f6cf76":"from sklearn.ensemble import RandomForestRegressor\nforest_model = RandomForestRegressor(n_estimators=100, max_features=3, min_samples_leaf=10)\npipe = make_pipeline(column_trans,forest_model)\nrfr_score = cross_validate(pipe, X_train, y_train, cv=10, scoring=['neg_mean_squared_error','neg_mean_absolute_error'],return_train_score=False)\nprint('Mean Absolute Error: {}'.format(rfr_score['test_neg_mean_absolute_error'].mean()))\nprint('Mean Squared Error: {}'.format(rfr_score['test_neg_mean_squared_error'].mean()))\nprint('Root Mean Squared Error: {}'.format(np.sqrt(-rfr_score['test_neg_mean_squared_error'].mean())))","3e96e0dd":"pipe = make_pipeline(column_trans,linreg)\npipe.fit(X_train, y_train)\ny_pred = pipe.predict(X_test)","2800053b":"from sklearn.metrics import mean_squared_error,mean_absolute_error\nprint('Mean Absolute Error: {}'.format(mean_absolute_error(y_pred,y_test)))\nprint('Mean Squared Error: {}'.format(mean_squared_error(y_pred,y_test)))\nprint('Root Mean Squared Error: {}'.format(np.sqrt(mean_absolute_error(y_pred,y_test))))","769089a7":"pipe = make_pipeline(column_trans,svr)\npipe.fit(X_train, y_train)\ny_pred = pipe.predict(X_test)","bffeac10":"print('Mean Absolute Error: {}'.format(mean_absolute_error(y_pred,y_test)))\nprint('Mean Squared Error: {}'.format(mean_squared_error(y_pred,y_test)))\nprint('Root Mean Squared Error: {}'.format(np.sqrt(mean_absolute_error(y_pred,y_test))))","8acc281c":"pipe = make_pipeline(column_trans,forest_model)\npipe.fit(X_train, y_train)\ny_pred = pipe.predict(X_test)","ed2f99e4":"print('Mean Absolute Error: {}'.format(mean_absolute_error(y_pred,y_test)))\nprint('Mean Squared Error: {}'.format(mean_squared_error(y_pred,y_test)))\nprint('Root Mean Squared Error: {}'.format(np.sqrt(mean_absolute_error(y_pred,y_test))))","3df54310":"## Testing on Test Set","7623b626":"### 3. Random Forest Regressor","7529e6ba":"### 3. Random Forest Regressor","603867fc":"## Train Test Split","b3f62ad1":"### 1. Linear Regression","a45f9d83":"## Data Cleaning","69f399d7":"## Regression Models","d8f29bf1":"## Data Preprocessing","04df3974":"### 2. Support Vector Regressor (SVR)","b7ae42cf":"Many genre contain only few record, it may make a bias.\nThen, I decide to group it to bigger genre by ignore sub-genre (after \" ; \" sign)","2d3be70e":"### 1. Linear Regression","5fd49512":"### 2. Support Vector Regressor","259c391f":"## Importing Libraries"}}