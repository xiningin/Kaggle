{"cell_type":{"2eca60bc":"code","f9455224":"code","9be8726d":"code","cd241d55":"code","6ae41809":"code","42dcd688":"code","d346888b":"code","a46ba5ff":"code","6e3f19be":"code","481058d6":"code","5e715632":"code","720f8338":"code","c689c79e":"code","98a3d9af":"code","413bdbd0":"code","805972d1":"code","3aaac4f3":"code","91c99a87":"code","c14f6583":"code","41f9c8f1":"code","9a5e6b40":"code","6b39f00d":"code","ab3c3ebf":"code","7896722e":"code","1cc0dd15":"code","7999aa4f":"code","2453d2a9":"code","ed82d880":"code","cf3446bc":"code","d07fca64":"code","cfd2538d":"code","f1c1a6a7":"code","8c331a1f":"code","fa20a4d2":"code","41eca802":"code","ba872c19":"code","d60c729c":"code","ba470b7e":"code","c23accc7":"code","80ce337f":"code","0fa6b8b5":"code","b60f64cb":"code","d84bcd48":"code","3d968e23":"code","2b05ff92":"code","cdb48771":"code","c90dfbb5":"code","dbdad534":"code","a12f43fa":"code","414d08c4":"code","b09c727c":"code","1d50b85f":"code","5561fbe1":"code","9daecd72":"code","d91838c2":"code","2d69226f":"code","04929fea":"code","1d3977be":"code","9e99bfa5":"code","1b4bae60":"code","bfd3c7d4":"code","0a231c1c":"code","9b944016":"code","97b8d2d8":"code","a03695fc":"code","db568d9b":"markdown","8e72a88a":"markdown","87693f70":"markdown"},"source":{"2eca60bc":"import numpy as np\nimport pandas as pd\n\n#Visualiza\u00e7\u00e3o gr\u00e1fica\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Definindo os par\u00e2metros dos gr\u00e1ficos\n%matplotlib inline\nplt.style.use('fivethirtyeight')\nplt.rcParams['font.size'] = 18\nplt.rcParams['patch.edgecolor'] = 'k'\nplt.rcParams['font.sans-serif']=['SimHei']\nplt.rcParams['axes.unicode_minus'] = False\n\n#importando base do kaggle\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f9455224":"# mostrando o m\u00e1ximo de colunas\npd.options.display.max_columns = 150\n\n#Lendo os dados\ntrain = pd.read_csv('\/kaggle\/input\/costa-rican-household-poverty-prediction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/costa-rican-household-poverty-prediction\/test.csv')\n","9be8726d":"##Importanto bibliotecas para gerar rel\u00e1torio da an\u00e1lise explorat\u00f3ria \nfrom pandas_profiling import ProfileReport\nimport requests\nimport pandas_profiling\nimport matplotlib.pyplot as plt","cd241d55":"## Instalando biblioteca\n!pip install -U pandas_profiling","6ae41809":"#Gerando relat\u00f3rio da an\u00e1lise explorat\u00f3ria\n\nprofile = ProfileReport(train, title='Explorat\u00f3ria Pobreza da Costa Rica',html={'style':{'full_width':True}})","42dcd688":"##Gerando visualiza\u00e7\u00e3o do relat\u00f3rio da an\u00e1lise explorat\u00f3ria        \nprofile.to_notebook_iframe()","d346888b":"#vis\u00e3o geral do dataframe de treino e teste\ntrain.shape, test.shape","a46ba5ff":"# Adicionando uma coluna target vazia ao conjunto de teste \ntest['Target'] = np.nan\ntest","6e3f19be":"#obtendo informa\u00e7\u00f5es do dataframe de treino\ntrain.info()\n","481058d6":"# Quais colunas do dataframe de treino s\u00e3o do tipo object\ntrain.select_dtypes('object').head()\n","5e715632":"# Quais colunas do dataframe de treino s\u00e3o do tipo inteiro\ntrain.select_dtypes('int64').head()\n","720f8338":"# Quais colunas do dataframe de treino s\u00e3o do tipo float\ntrain.select_dtypes('float').head()","c689c79e":"#agregando os valores inteiros do dataframe de treino\ntrain.select_dtypes(include=['int64']).nunique().value_counts().sort_index().plot.bar(color = 'blue', figsize = (8, 6),edgecolor = 'k', linewidth = 2)\nplt.xlabel('Distribui\u00e7\u00e3o de valores individuais')\nplt.ylabel('Quantidade')\nplt.title('O n\u00famero de valores \u00fanicos na coluna inteira')","98a3d9af":"from collections import OrderedDict\n\nplt.figure(figsize = (20, 16))\nplt.style.use('fivethirtyeight')\n\n# Dicion\u00e1rio de cores\n\ncolors = OrderedDict({1: 'red', 2: 'orange', 3: 'blue', 4: 'green'})\npoverty_mapping = OrderedDict({1: 'Pobreza extrema', 2: 'Pobreza moderada', 3: 'Fam\u00edlias vuner\u00e1veis', 4: 'Fam\u00edlias n\u00e3o vuner\u00e1veis'})\n\n# Iterar sobre n\u00fameros de ponto flutuante\nfor i, col in enumerate(train.select_dtypes(include=['floating'])):\n    ax = plt.subplot(4, 2, i + 1)\n    # N\u00edveis de pobreza transversais\n    for poverty_level, color in colors.items():\n        # Desenhando uma linha para cada n\u00edvel de pobreza\n        sns.kdeplot(train.loc[train['Target'] == poverty_level, col].dropna(),ax = ax, color = color, label = poverty_mapping[poverty_level])\n        \n    plt.title(f'{col.capitalize()} - Distribui\u00e7\u00e3o'); plt.xlabel(f'{col}'); plt.ylabel('Densidade')\n\nplt.subplots_adjust(top = 2)","413bdbd0":"#juntando os dataframes\ndata = train.append(test, ignore_index = True)\ndata.shape","805972d1":"# Olhando a coluna dependency\ndata['dependency'].value_counts()","3aaac4f3":"# Analisando os dados da coluna edjefa\ndata['edjefa'].value_counts()","91c99a87":"# Analisando os dados da coluna edjefe\ndata['edjefe'].value_counts()","c14f6583":"#Verificando a coluna dependency com valor 'yes'.\n(data['dependency'] == 'yes').value_counts()\n","41f9c8f1":"#Verificando a coluna dependency com valor 'no'\n(data['dependency'] == 'no').value_counts()","9a5e6b40":"#Verificando a coluna edjefa com valor 'yes'\n(data['edjefa'] == 'yes').value_counts()","6b39f00d":"#Verificando a coluna edjefa com valor 'no'\n(data['edjefa'] == 'no').value_counts()","ab3c3ebf":"#Verificando a coluna edjefe com valor 'yes'\n(data['edjefe'] == 'yes').value_counts()","7896722e":"#Verificando a coluna edjefe com valor 'no'\n(data['edjefe'] == 'no').value_counts()","1cc0dd15":"#Mapeando onde tem 'yes' e substituindo por 1 e 'no' por 0.\ndata[\"edjefe\"] = data[\"edjefe\"].apply(lambda x: 1 if x == \"yes\" else x).apply(lambda x: 0 if x == \"no\" else x)\n\ndata[\"edjefa\"] = data[\"edjefa\"].apply(lambda x: 1 if x == \"yes\" else x).apply(lambda x: 0 if x == \"no\" else x)\n\ndata[\"dependency\"] = data[\"dependency\"].apply(lambda x: 1 if x == \"yes\" else x).apply(lambda x: 0 if x == \"no\" else x)\n\ndata[\"edjefe\"] = pd.to_numeric(data[\"edjefe\"])\n\ndata[\"edjefa\"] = pd.to_numeric(data[\"edjefa\"])\n\ndata[\"dependency\"] = pd.to_numeric(data[\"dependency\"])\n\ndata[['dependency', 'edjefa', 'edjefe']].describe()","7999aa4f":"plt.figure(figsize = (16, 12))\n\n# Iterar sobre n\u00fameros de ponto flutuante\nfor i, col in enumerate(['dependency', 'edjefa', 'edjefe']):\n    ax = plt.subplot(3, 1, i + 1)\n    # N\u00edveis de pobreza transversais\n    for poverty_level, color in colors.items():\n        # Desenhando uma linha para cada n\u00edvel de pobreza\n        sns.kdeplot(data.loc[data['Target'] == poverty_level, col].dropna(),ax = ax, color = color, label = poverty_mapping[poverty_level])\n      \n    plt.title(f'{col.capitalize()} - Distribui\u00e7\u00e3o'); \n    plt.xlabel(f'{col}'); \n    plt.ylabel('Densidade')\n\nplt.subplots_adjust(top = 2)","2453d2a9":"data.info()","ed82d880":"# Verificando a composi\u00e7\u00e3o do n\u00edvel de pobreza das fam\u00edlias\n\nheads = data.loc[data['parentesco1'] == 1].copy()\n\n# tags em treinamento\ntrain_labels = data.loc[(data['Target'].notnull()) & (data['parentesco1'] == 1), ['Target', 'idhogar']]\n\n# Valores da v\u00e1riavel Target\nlabel_counts = train_labels['Target'].value_counts().sort_index()\n\n# Gr\u00e1fico de barras que aparece para cada tag\nlabel_counts.plot.bar(figsize = (8, 6), color = colors.values(),edgecolor = 'k', linewidth = 2)\n\n# formato\nplt.xlabel('N\u00edvel de pobreza'); plt.ylabel('Quantidade'); \nplt.xticks([x - 1 for x in poverty_mapping.keys()], \n           list(poverty_mapping.values()), rotation = 60)\nplt.title('Composi\u00e7\u00e3o do n\u00edvel de pobreza');\n\nlabel_counts","cf3446bc":"#Agrupando os membros da fam\u00edlia pelo n\u00edvel de pobreza e para identificar se coincide a target para todos\nall_igual = train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\n\n# Fam\u00edlias com niveis de pobrezas diferentes\nnot_igual = all_igual[all_igual != True]\nprint('Existem {} membros da fam\u00edlia que t\u00eam diferentes valores de n\u00edveis de pobreza'.format(len(not_igual)))","d07fca64":"#Exemplo de uma fam\u00edlia com n\u00edveis de pobreza diferentes\ndata[data['idhogar'] == not_igual.index[0]][['idhogar', 'parentesco1', 'Target']]","cfd2538d":"#identificando a quantidade de chefe de familia na base de treinamento\nchefe_familia = data.groupby('idhogar')['parentesco1'].sum()\nchefe_familia.sum()","f1c1a6a7":"chefe_familia = data.groupby('idhogar')['parentesco1'].sum()\n\n# Encontrando fam\u00edlias sem chefe\nfamilia_sem_chefe = data.loc[data['idhogar'].isin(chefe_familia[chefe_familia == 0].index), :]\n\nprint('Existem {} fam\u00edlias sem chefe'.format(familia_sem_chefe['idhogar'].nunique()))","8c331a1f":"# Localizando fam\u00edlias sem chefe com niveis de pobrezas diferente\nfamilia_sem_chefe_iguais = familia_sem_chefe.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\nprint('Exite {} fam\u00edlias sem chefe com niveis de pobrezas diferente'.format(sum(familia_sem_chefe_iguais == False)))","fa20a4d2":"# Percorrendo por todas as fam\u00edlias\nfor familia in not_igual.index:\n    # Encontrando a target correta para o chefe da fam\u00edlia\n    true_target = int(data[(data['idhogar'] == familia) & (data['parentesco1'] == 1.0)]['Target'])\n    \n    # Definindo r\u00f3tulos corretos para todos os membros da fam\u00edlia\n    data.loc[data['idhogar'] == familia, 'Target'] = true_target\n    \n    \n# Agrupando por fam\u00edlia e encontrando o n\u00famero de valores \u00fanicos\nall_igual = train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\n\n# Fam\u00edlias com niveis de pobrezas diferentes\nnot_igual = all_igual[all_igual != True]\nprint('Existem {} fam\u00edlias no total, e nem todos os membros da fam\u00edlia t\u00eam os mesmos n\u00edveis de pobreza.'.format(len(not_igual)))","41eca802":"# selecionando apenas a linha do chefe da fam\u00edlia.\ndef plot_value_counts(df, col, apenas_chefe = False):\n    # Selecionando o chefe da fam\u00edlia\n    if apenas_chefe:\n        df = df.loc[df['parentesco1'] == 1].copy()\n        \n    plt.figure(figsize = (8, 6))\n    df[col].value_counts().sort_index().plot.bar(color = 'red',\n                                                 edgecolor = 'k',\n                                                 linewidth = 2)\n    plt.xlabel(f'{col}')\n    plt.title(f'{col}- Contagens de valor')\n    plt.ylabel('Contagem')\n    plt.show()","ba872c19":"#Plotando por chefe da familia que possui tablet\nplot_value_counts(heads, 'v18q1')","d60c729c":"heads.groupby('v18q')['v18q1'].apply(lambda x: x.isnull().sum())","ba470b7e":"#preenchendo com zero os valores nulos para a coluna v18q1\ndata['v18q1'] = data['v18q1'].fillna(0)","c23accc7":"# Defina as vari\u00e1veis de propriedade da casa\nprop_var = [x for x in data if x.startswith('tipo')]\n\n# Gr\u00e1fico para mostrar os alugu\u00e9is n\u00e3o pagos na casa\ndata.loc[data['v2a1'].isnull(), prop_var].sum().plot.bar(figsize = (10, 8),color = 'green',edgecolor = 'k', linewidth = 2)\nplt.xticks([0, 1, 2, 3, 4],['comprado e pago', 'Propriedade e pagando', 'Alugado', 'Inst\u00e1vel', 'outro (atribu\u00eddo, emprestado)'],rotation = 60)\nplt.title('Status de propriedade de casa para fam\u00edlias que faltam pagamentos de aluguel', size = 18)","80ce337f":"# Preenchendo as fam\u00edlias que possuem a casa com zero pagamento de aluguel\ndata.loc[(data['tipovivi1'] == 1), 'v2a1'] = 0\n\n","0fa6b8b5":"#encontrando a idade m\u00e1xima para pessoas que est\u00e3o na escola\ndata.loc[data['rez_esc'].notnull()]['age'].describe()","b60f64cb":"#Encontrando a idade de pessoas que n\u00e3o est\u00e3o na escola\ndata.loc[data['rez_esc'].isnull()]['age'].describe()\n","d84bcd48":"# Definindo como zero, se o indiv\u00edduo tiver mais de 19 anos ou menos de 7 anos e estiver faltando anos atr\u00e1s\ndata.loc[((data['age'] > 19) | (data['age'] < 7)) & (data['rez_esc'].isnull()), 'rez_esc'] = 0\n\n\n","3d968e23":"# Numeros de valores faltantes de cada coluna\nval_ausentes = pd.DataFrame(data.isnull().sum()).rename(columns = {0: 'total'})\n\n# Percentual de valores faltantes em cada coluna\nval_ausentes['Percentual'] = val_ausentes['total'] \/ len(data)\n\nval_ausentes.sort_values('Percentual', ascending = False).head(10).drop('Target')","2b05ff92":"#localizando valores maiores que 5 na coluna 'rez_esc'e substituindo por 5, pois valores maiores que isso, s\u00e3o considerados outliers\ndata.loc[data['rez_esc'] > 5, 'rez_esc'] = 5","cdb48771":"#Visualizando que a coluna n\u00e3o valores maiores que cinco.\n(train['rez_esc'] > 5).value_counts()","c90dfbb5":"# Verificando os valores nulos\ndata.isnull().sum()","dbdad534":" # Verificando os valores de aluguel (v2a1) para os chefes\/as de familia (parentesco1 = 1)\ndata[data['parentesco1'] == 1]['v2a1'].isnull().sum()","a12f43fa":"# Qual a cara dos dados de v18q\ndata['v18q'].value_counts()","414d08c4":"# Prenchendo com -1 os valores nulos de v2a1 para n\u00e3o serem utilizados no modelo\ndata['v2a1'].fillna(-1, inplace=True)","b09c727c":"# Prenchendo com 0 os valores nulos de v18q1\ndata['v18q1'].fillna(0, inplace=True)","1d50b85f":"# Verificando os valores nulos\ndata.isnull().sum().sort_values()","5561fbe1":"# Prenchendo com -1 os valores nulos de SQBmeaned, meaneduc e rez_esc para n\u00e3o serem utilizados no modelo\ndata['SQBmeaned'].fillna(-1, inplace=True)\ndata['meaneduc'].fillna(-1, inplace=True)\ndata['rez_esc'].fillna(-1, inplace=True)","9daecd72":"# Separando as colunas para treinamento\nfeats = [c for c in data.columns if c not in ['Id', 'idhogar', 'Target']]","d91838c2":"# Separar os dataframes\ntrain, test = data[~data['Target'].isnull()], data[data['Target'].isnull()]\n\ntrain.shape, test.shape","2d69226f":"data['Target'].value_counts().sort_values()","04929fea":"# Instanciando o random forest classifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_jobs=-1, n_estimators=200, random_state=42)\n\n\n","1d3977be":"# Treinando o modelo\nrf.fit(train[feats], train['Target'])","9e99bfa5":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = rf.predict(test[feats]).astype(int)\n\n","1b4bae60":"#Verificando as previs\u00f5es\ntest['Target'].value_counts(normalize = True)","bfd3c7d4":"# Vamos verificar as previs\u00f5es nos \u00faltimos registros\ntest[['Target', 'Id']].tail()","0a231c1c":"# melhorando o modelo com AdaBoost e verificando a acur\u00e1cia \nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import accuracy_score\nabc = AdaBoostClassifier(n_estimators=200, learning_rate=1.0, random_state=42)\nabc.fit(train[feats], train['Target'])\naccuracy_score(test['Target'], abc.predict(test[feats]))","9b944016":"# verificando a acur\u00e1cia com o modelo Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier(n_estimators=200, learning_rate=1.0, max_depth=1, random_state=42)\ngbc.fit(train[feats], train['Target'])\naccuracy_score(test['Target'], gbc.predict(test[feats]))","97b8d2d8":"# Criando o arquivo para submiss\u00e3o\ntest[['Id', 'Target']].to_csv('submission.csv', index=False)","a03695fc":"import matplotlib.pyplot as plt\n\nfig=plt.figure(figsize=(15, 20))\n\n# Avaliando a importancia de cada coluna (cada vari\u00e1vel de entrada)\npd.Series(rf.feature_importances_, index=feats).sort_values().plot.barh()","db568d9b":"# An\u00e1lise Explorat\u00f3ria\n ","8e72a88a":"#  Importando bibliotecas ","87693f70":"## 1931133118"}}