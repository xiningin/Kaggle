{"cell_type":{"6b008cf0":"code","d50e8315":"code","3f8c28bf":"code","fa466348":"code","0aa6b266":"code","f98d843c":"code","4b992b47":"code","e8a86bf8":"code","850fced2":"code","098b4156":"code","b3a35e46":"code","b102c61d":"markdown","07fc9662":"markdown","a5095f22":"markdown","d1a00eed":"markdown","224a90c1":"markdown","1972de89":"markdown"},"source":{"6b008cf0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/cityofla\/CityofLA\"))\n\ndef get_second_part(kw):\n    sp = kw.split(':')\n    if len(sp) > 1:\n        return sp[1].replace(' ','')\n    else:\n        return 0\n\n# Any results you write to the current directory are saved as output.\n\nbulletins_prefix = '..\/input\/cityofla\/CityofLA\/Job Bulletins\/'\n\nall_bulletins = os.listdir(bulletins_prefix)\n\ndf_array = []\n# construct the data frame\nnext_keyword = ''\nkeywords = ['ANNUAL SALARY', \n            'NOTE', \n            'DUTIES',\n            'PROCESS NOTES',\n            'REQUIREMENT',\n            'REQUIREMENTS1',\n            'REQUIREMENT\/MINIMUM QUALIFICATION',\n            'PROCESS NOTES',\n            'WHERE TO APPLY',\n            'APPLICATION DEADLINE',\n            'SELECTION PROCESS',\n            'NOTICE']\nfor bulletin in all_bulletins:\n    full_path = os.path.join(bulletins_prefix, bulletin)\n    f = open(full_path, encoding = \"ISO-8859-1\")\n    # FILE_NAME,\n    new_item = { 'FILE_NAME': bulletin }\n    for kw in keywords:\n        new_item[kw] = ''\n    for i, line in enumerate(f.readlines()):\n        if i == 0:\n            # JOB_CLASS_TITLE\n            new_item['JOB_CLASS_TITLE'] = line\n            continue\n        if 'Class Code' in line:\n            # JOB_CLASS_NO\n            new_item['JOB_CLASS_NO'] = get_second_part(line)\n            continue\n        if 'Open Date' in line:\n            new_item['OPEN_DATE'] = get_second_part(line)\n            next_keyword = 'REQUIREMENTS' # the req line seems to come immediatly after to OPEN DATE Line\n            continue\n        # REQUIREMENT_SET_ID,REQUIREMENT_SUBSET_ID,JOB_DUTIES,EDUCATION_YEARS,SCHOOL_TYPE,EDUCATION_MAJOR,EXPERIENCE_LENGTH,FULL_TIME_PART_TIME,EXP_JOB_CLASS_TITLE,EXP_JOB_CLASS_ALT_RESP,EXP_JOB_CLASS_FUNCTION,COURSE_COUNT,COURSE_LENGTH,COURSE_SUBJECT,MISC_COURSE_DETAILS,DRIVERS_LICENSE_REQ,DRIV_LIC_TYPE,ADDTL_LIC,EXAM_TYPE,ENTRY_SALARY_GEN,ENTRY_SALARY_DWP,OPEN_DATE\n        if next_keyword == 'REQUIREMENTS':\n            new_item['REQUIREMENTS'] = line\n            next_keyword = ''\n            continue\n        new_keyword = False\n        for kw in keywords:\n            if kw in line:\n                next_keyword = kw\n                new_keyword = True\n                break\n        if new_keyword:\n            continue\n        if next_keyword == '':\n            continue\n        new_item[next_keyword] += line\n    df_array.append(new_item)\n                \ndf = pd.DataFrame(df_array)\ndf.head()","d50e8315":"# lets do some cleaning, to replace newlines and all that\n\ndef clean_line(row):\n    for col in df.columns:\n        row[col] = str(row[col]).replace('\\n','').replace('\\n52','')\n    return row\n\ndf = df.apply(clean_line, axis=1)\ndf.head()","3f8c28bf":"import textblob\n\nblob_columns = ['DUTIES', 'NOTE', 'SELECTION PROCESS']\n\n# whole_text = dict()\npositive_jobs = dict()\nnegative_jobs = dict()\n\ndef get_blob_sentiment(row):\n    row['polarity'] = 0\n    row['subjectivity'] = 0\n    for col in blob_columns:\n        row[col] = row[col].replace('.','. ').replace('\/',' \/ ') # in some occasions there is not space after .\n        polarity_col = col + '_Polarity'\n        subjectivity_col = col + '_Subjectivity'\n        blob = textblob.TextBlob(row[col])\n        # vader_sentiment = sid.polarity_scores(row[col])['compound']\n        row[polarity_col] = blob.sentiment.polarity\n        row[subjectivity_col] = blob.sentiment.subjectivity\n        row['polarity'] = row['polarity'] + blob.sentiment.polarity\n        # row['polarity'] = row['polarity'] + vader_sentiment \n        row['subjectivity'] = row['subjectivity'] + blob.sentiment.subjectivity\n    if row['polarity'] > 0:\n        if row['JOB_CLASS_TITLE'] in positive_jobs.keys():\n            positive_jobs[row['JOB_CLASS_TITLE']].append(row['polarity'])\n        else:\n            positive_jobs[row['JOB_CLASS_TITLE']] = [ row['polarity'] ]\n    else:\n        if row['JOB_CLASS_TITLE'] in negative_jobs.keys():\n            negative_jobs[row['JOB_CLASS_TITLE']].append(-row['polarity'])\n        else:\n            negative_jobs[row['JOB_CLASS_TITLE']] = [ -row['polarity'] ]\n        # for tag in blob.tags:\n        #     if tag[1] in ('JJ',\n        #                   'JJR',\n        #                   'JJS',\n        #                   'RB',\n        #                   'RBR',\n        #                   'RBS',\n        #                   'VB',\n        #                   'VBD',\n        #                   'VBG',\n        #                   'VBN',\n        #                   'VBP',\n        #                   'VBZ'):\n        #         if tag[0] in whole_text.keys():\n        #             whole_text[tag[0]].append(blob.sentiment.polarity)\n        #         else:\n        #             whole_text[tag[0]] = [ blob.sentiment.polarity ]\n    return row\n\n\ndf = df.apply(get_blob_sentiment, axis=1)\n\n            \nfor key in positive_jobs.keys():\n    positive_jobs[key] = np.mean(positive_jobs[key]) * 1000\n    \n\nfor key in negative_jobs.keys():\n    negative_jobs[key] = np.mean(negative_jobs[key]) * 1000\n\ndf.head()","fa466348":"# lets see the histograms for a starter\n%matplotlib notebook\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.axis(\"on\")\nfrom scipy import stats\n\nsns.set(color_codes=True)\n# plt.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9, wspace=0.4, hspace=0.5)\nfig, ax = plt.subplots(nrows=1, ncols=2)\n\nsns.distplot(df['polarity'], ax=ax[0])\nsns.distplot(df['subjectivity'], ax=ax[1])","0aa6b266":"plt.figure()\n\ng = sns.jointplot(df['polarity'], df['subjectivity'], kind=\"scatter\", height=7, space=0)","f98d843c":"def display_file(filename, from_tag=None):\n    f = open(filename)\n    if from_tag:\n        write = False\n    else:\n        write = True\n    print(filename)\n    for line in f.readlines():\n        if write == True:\n            for col in df.columns:\n                if col in line:\n                    write = False\n        if from_tag:\n            if from_tag in line:\n                write = True\n        if write:\n            print(line)\n\n# for i, row in df[(df['subjectivity']>1.4) & (df['polarity']<-0.6)].iterrows():\n#    fname = os.path.join(bulletins_prefix, row['FILE_NAME'])\n#     display_file(fname, from_tag='DUTIES')\nprint('Most negative')\nprint('---------------------------------------------------------------')\nprint(df[df['polarity'] == df['polarity'].min()]['DUTIES'].iloc[0])\nprint('---------------------------------------------------------------')\nprint('Most positive')\nprint('---------------------------------------------------------------')\nprint(df[df['polarity'] == df['polarity'].max()]['DUTIES'].iloc[0])","4b992b47":"from wordcloud import WordCloud\n\nwc = WordCloud(relative_scaling=1, background_color='white',\n        max_words=250,\n        max_font_size=40, \n        scale=3)\n\nwordcloud = wc.generate_from_frequencies(positive_jobs)\n# fig = plt.figure(1, figsize=(12, 12))\nplt.figure()\nplt.axis('off')\nfig.suptitle('Most negative Jobs', fontsize=20)\nfig.subplots_adjust(top=2.3)\nplt.imshow(wordcloud)\nplt.show()\nwordcloud = wc.generate_from_frequencies(negative_jobs)\n# fig = plt.figure(1, figsize=(12, 12))\nplt.figure()\nplt.axis('off')\nfig.suptitle('Most negative Jobs', fontsize=20)\nfig.subplots_adjust(top=2.3)\nplt.imshow(wordcloud)\nplt.show()","e8a86bf8":"# the annual salaray column is a bit messy, so some more cleaning is required here. \n# We will use everything that can be parsed to a number and take the median\n\ndef take_messy_median(row):\n    spl = row['ANNUAL SALARY'].replace('.',' ').replace(';',' ').replace('(',' ').split(' ')\n    nums = []\n    for sp in spl:\n        number = sp.replace('$','').replace(',','')\n        try:\n            number = float(number)\n            nums.append(number)\n        except:\n            pass # we dont care right now about the exceptions\n    if len(nums) == 0:\n        print(row['ANNUAL SALARY']) # this line should be never printed. If it happens it must be fixed\n        row['ANNUAL SALARY'] = None\n    row['ANNUAL SALARY'] = np.median(nums)\n    return row\n\ndf = df.apply(take_messy_median, axis=1)\n\n# df['ANNUAL SALARY']","850fced2":"mean_salary = df[df['ANNUAL SALARY'].notnull()]['ANNUAL SALARY'].mean()\n\nprint('Mean Salary: ' + str(mean_salary))\n\ndf = df[df['ANNUAL SALARY'].notnull()]","098b4156":"# df['ANNUAL SALARY']\n\nplt.figure()\n\ng = sns.jointplot(df['polarity'], df['ANNUAL SALARY'], kind=\"scatter\", height=7, space=0)","b3a35e46":"duties = df[df['ANNUAL SALARY']>250000]['DUTIES'].iloc[0]\nprint(duties)\npolarity = df[df['ANNUAL SALARY']>250000]['polarity'].iloc[0]\nprint('Polarity: ' + str(polarity))","b102c61d":"The extremes make somehow sense. The Animal control officer gets the perspective of handling vicious animals on a graveyard alone and at night. It takes some very special character traits to thrive in this kind of environments.\nOn the other hand the Office Trainee becomes acquainted with career opportunities.","07fc9662":"These words are in general associated with higher positivity of the resulting job bulletin. Some words seem somewhat airport service related to me. As the airport jobs seemed to be assiciated with higer salary we will have a look on incomes and job sectors in relation with bulletin tone.","a5095f22":"There are two samples with extreme values for polarity","d1a00eed":"The NOTE columns seems somewhat boring. Sentiment and polarity are centered around normal levels. However DUTIES and SELECTION PROCESS do have some far out values.","224a90c1":"After we have put the text in a table lets make a simple textblob sentiment analysis of it. This is a easy to use simple word by word evaluation of the text.\nEvery word has an assigned polarity and subjectivity given here: https:\/\/github.com\/sloria\/TextBlob\/blob\/eb08c120d364e908646731d60b4e4c6c1712ff63\/textblob\/en\/en-sentiment.xml\nAfter taking into account modifier words (e.g. not very ...) the mean across the text passage is returned. See more detail here:\nhttps:\/\/planspace.org\/20150607-textblob_sentiment\/","1972de89":"Some jobs bulletins do not have a salary statement. We replace it with the mean "}}