{"cell_type":{"9fbe0a4a":"code","3e3f842a":"code","1ab6d1ef":"code","b03244ac":"code","c4d905a1":"code","4cf385d0":"code","11abd3c7":"code","db61d353":"code","1b48e33b":"code","598fc40d":"code","907dc87a":"code","9d76f199":"code","8a549e20":"code","6ea90c8c":"code","1f4dec05":"code","8e87fb2d":"code","d046d385":"code","21cdf5f3":"code","167564d2":"code","466c9634":"code","faf7026d":"code","ca29c495":"code","0ce5760c":"code","64ba47c0":"code","c97857f4":"code","bbede25f":"code","c72d6523":"code","af6041a4":"code","e60852e2":"code","c5356263":"code","39d5f805":"code","c75a9cf3":"code","8ece7c60":"code","1f483148":"code","883072cd":"code","456c314e":"code","64c55040":"code","c8058c59":"code","d6a056f0":"code","9cd42d0e":"code","704fd510":"code","2d5cb9f3":"code","c8ba3f78":"code","c33ff54c":"code","9403ccec":"code","135958dc":"code","2037c3e3":"code","959ddf53":"code","4f3b0207":"code","6242e970":"code","0515f4f1":"code","02ffec72":"code","da8af96f":"code","565fcb3b":"code","2e996da7":"code","f9e6b30d":"code","631aaa38":"code","ff456632":"code","2ea49ff3":"code","7c26a540":"code","a00057a9":"code","91e6be1b":"code","fc952dc7":"code","b305f62d":"code","ec5fe40e":"code","551a0182":"code","1a508ac9":"code","6df2956a":"code","ba8fad37":"code","3581d142":"code","64373b4a":"code","3905c4bf":"code","2bce37e8":"code","88650ec5":"code","0e8f89a7":"code","9fe5158c":"code","6f7559fd":"code","ee8fab5a":"code","22f0370e":"code","4ee13eae":"code","7d877cc5":"code","04582bdb":"code","287ad344":"code","e6674f8c":"code","47cdaec7":"code","3f50bd92":"code","f1e8196d":"code","c1bb9896":"code","1e27c8ab":"code","527e79c1":"code","f5ceead3":"code","69ca3bab":"code","7786083c":"code","b13065ab":"code","8b57ce72":"code","c1064710":"code","98f686f6":"code","b2ff7fa7":"code","4b85b60c":"code","cb69c4fe":"code","8a06aacb":"code","6f9cf5e8":"code","853a989a":"code","c06d31ce":"code","8f9e0144":"code","fac22228":"code","3c5d19b6":"code","1654e384":"code","95789193":"code","1948c285":"code","301bd657":"code","27e2a7ad":"code","267da11f":"code","73d616fb":"code","9ac37e97":"code","3ea9238e":"code","1b070390":"code","2d01016a":"code","ff0bcaf9":"code","4026cb4a":"code","b2d8207a":"code","d4aa61a7":"code","3405db18":"code","d284b231":"code","478b333a":"code","4a1662ec":"code","742596ac":"code","d4c7ab3a":"code","69123513":"code","a20fb2bb":"code","2ed08ea0":"code","f82b239e":"code","bb6f830e":"code","856f65c0":"code","a27c1f76":"code","2e72b67d":"code","455c37e3":"code","08ee8d70":"code","ce1eee83":"code","c849bc00":"code","230799e1":"code","a9441580":"code","02b78df2":"code","565cb257":"code","03e6ea4a":"code","df5f1af8":"code","684923f0":"code","46af47c0":"code","fc085663":"code","5cd320e8":"code","706deff5":"code","b2689337":"code","6e1ee002":"code","a62e7dee":"code","09bc57de":"code","f1d0069e":"code","e1141b11":"code","00979fbe":"code","9e9dcbb2":"code","15abd10b":"code","744cfd8e":"code","3b7a6702":"code","ea38ea3a":"code","118f234c":"code","184e99d3":"code","04dcaf10":"code","356d010f":"code","e71098da":"code","0a2b6e5c":"code","5be580f5":"code","b28244e6":"code","70f4f272":"code","d8d7c6d5":"code","25dfb796":"code","aa98a546":"code","873345eb":"code","915e298c":"code","d15330dc":"code","7758e350":"code","14c6e057":"code","07d75b48":"code","42192bfa":"code","3145684f":"code","4d4b3449":"code","ee7f3f95":"code","c2d7969f":"code","dceff270":"code","f4d31a5e":"code","fbb800dc":"code","8a00f07c":"code","f607c9f2":"code","74ad15e0":"code","82928035":"code","18300c90":"code","e7c9cd75":"code","393467cf":"code","f68fe30f":"code","70db6373":"code","698f38a6":"code","a224f3a4":"code","da867b02":"code","3df06655":"code","bf574eba":"code","a7886144":"code","62ce4ef4":"code","1a99b58b":"code","c918aebf":"code","b591ad84":"code","68539214":"code","99c1e9e8":"code","0ed2617f":"code","2d878707":"code","7f355ad9":"code","d043d110":"code","0ccf160d":"code","31ad349a":"code","66d1f969":"code","58c0d1f9":"code","93da9631":"code","534a8595":"code","793f7138":"code","cbc20629":"code","fc23c7c0":"code","14fe1a2a":"code","ae5124ab":"code","3035dbdd":"code","e02b8c21":"code","c6360c7a":"code","93b71903":"code","6d04ae11":"code","c7a43f9c":"code","526b24c0":"code","705d20e0":"code","dcb94fae":"code","34e0c192":"code","c5653baa":"code","7cbb802a":"code","22f7505c":"markdown","bc7c1502":"markdown","88075cc0":"markdown","28d87478":"markdown","72ac6e9f":"markdown","a8c2ba16":"markdown","945e9512":"markdown","48c7bfd0":"markdown","4033d8fd":"markdown","69bb62d4":"markdown","cb5b721f":"markdown","b24858b7":"markdown","75c368aa":"markdown","7729deb4":"markdown","563b80c1":"markdown","b3e61915":"markdown","843114f2":"markdown","b4afac61":"markdown","9fac5fa1":"markdown","9bb291e1":"markdown","6c787985":"markdown","dcb70da3":"markdown","6050180c":"markdown","9bea5b25":"markdown","08b4ba63":"markdown","69738ae4":"markdown","147b9d68":"markdown","2d5543b2":"markdown"},"source":{"9fbe0a4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e3f842a":"import seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing\nscaler = StandardScaler()\nnormalizer = preprocessing.Normalizer()\n\n#Veri setini okuma\nhitters_data = pd.read_csv(\"\/kaggle\/input\/hitters\/Hitters.csv\")\ndf = hitters_data.copy()\ndf.head()","1ab6d1ef":"#K\u0131sa bilgiler\ndf.describe().T","b03244ac":"#Veri boyutu\ndf.shape","c4d905a1":"#Ka\u00e7 eksik de\u011fer var?\ndf.isnull().sum()","4cf385d0":"#Eksik verilere bak\u0131\u015f\ndf[df[\"Salary\"].isnull()].head()","11abd3c7":"#Eksik verileri siliyoruz.\ndf.dropna(inplace = True)\ndf.shape","db61d353":"#Veri setinde sadece CHits de\u011fi\u015fkenini kullanmak i\u00e7in se\u00e7iyoruz.\nX = df[[\"CHits\"]]\ny = df[[\"Salary\"]]\nX = scaler.fit_transform(X)\nreg_model = LinearRegression()\nreg_model.fit(X, y)","1b48e33b":"print(\"Formula: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","598fc40d":"y_pred = reg_model.predict(X)","907dc87a":"from sklearn.metrics import mean_squared_error\nsonuc_tum_veri_slr = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_slr","9d76f199":"sonuc_tum_veri_cv_slr = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_slr","8a549e20":"X = df[[\"CHits\"]]\ny = df[[\"Salary\"]]\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","6ea90c8c":"reg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","1f4dec05":"print(\"Formula: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","8e87fb2d":"y_pred = reg_model.predict(X_train)","d046d385":"sonuc_train_veri_slr = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_slr","21cdf5f3":"y_pred = reg_model.predict(X_test)","167564d2":"sonuc_test_veri_slr = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_slr","466c9634":"sonuc_tt_veri_cv_slr = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_slr","faf7026d":"#Kategorik de\u011fi\u015fkenleri 1-0 \u015feklinde ifade ederiz\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)","ca29c495":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)","0ce5760c":"reg_model = LinearRegression()\nreg_model.fit(X, y)","64ba47c0":"print(reg_model.intercept_)","c97857f4":"print(reg_model.coef_)","bbede25f":"y_pred = reg_model.predict(X)","c72d6523":"sonuc_tum_veri_clr = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_clr","af6041a4":"sonuc_tum_veri_cv_clr = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_clr","e60852e2":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","c5356263":"reg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","39d5f805":"print(reg_model.intercept_)","c75a9cf3":"print(reg_model.coef_)","8ece7c60":"y_pred = reg_model.predict(X_train)","1f483148":"sonuc_train_veri_clr = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_clr","883072cd":"y_pred = reg_model.predict(X_test)","456c314e":"sonuc_test_veri_clr = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_clr","64c55040":"sonuc_tt_veri_cv_clr = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_clr","c8058c59":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)","d6a056f0":"reg_model = Ridge()\nreg_model.fit(X, y)","9cd42d0e":"print(reg_model.intercept_)","704fd510":"print(reg_model.coef_)","2d5cb9f3":"y_pred = reg_model.predict(X)","c8ba3f78":"sonuc_tum_veri_ridge = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_ridge","c33ff54c":"sonuc_tum_veri_cv_ridge = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_ridge","9403ccec":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","135958dc":"reg_model = Ridge()\nreg_model.fit(X_train, y_train)","2037c3e3":"print(reg_model.intercept_)","959ddf53":"print(reg_model.coef_)","4f3b0207":"y_pred = reg_model.predict(X_train)","6242e970":"sonuc_train_veri_ridge = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_ridge","0515f4f1":"y_pred = reg_model.predict(X_test)","02ffec72":"sonuc_test_veri_ridge = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_ridge","da8af96f":"sonuc_tt_veri_cv_ridge = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_ridge","565fcb3b":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)","2e996da7":"reg_model =Lasso()\nreg_model.fit(X, y)","f9e6b30d":"print(reg_model.intercept_)","631aaa38":"print(reg_model.coef_)","ff456632":"y_pred = reg_model.predict(X)","2ea49ff3":"sonuc_tum_veri_lasso = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_lasso","7c26a540":"sonuc_tum_veri_cv_lasso = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_lasso","a00057a9":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","91e6be1b":"reg_model =Lasso()\nreg_model.fit(X_train, y_train)","fc952dc7":"print(reg_model.intercept_)","b305f62d":"print(reg_model.coef_)","ec5fe40e":"y_pred = reg_model.predict(X_train)","551a0182":"sonuc_train_veri_lasso = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_lasso","1a508ac9":"y_pred = reg_model.predict(X_test)","6df2956a":"sonuc_test_veri_lasso = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_lasso","ba8fad37":"sonuc_tt_veri_cv_lasso = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_lasso","3581d142":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)","64373b4a":"reg_model =ElasticNet()\nreg_model.fit(X, y)","3905c4bf":"print(reg_model.intercept_)","2bce37e8":"print(reg_model.coef_)","88650ec5":"y_pred = reg_model.predict(X)","0e8f89a7":"sonuc_tum_veri_enet = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_enet","9fe5158c":"sonuc_tum_veri_cv_enet = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_enet","6f7559fd":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)\nfor i in range(len(X)):\n    if X[i][13]<0:\n        X[i][13]=0\n    else:\n        X[i][13]>0\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","ee8fab5a":"reg_model =ElasticNet()\nreg_model.fit(X_train, y_train)","22f0370e":"print(reg_model.intercept_)","4ee13eae":"print(reg_model.coef_)","7d877cc5":"y_pred = reg_model.predict(X_train)","04582bdb":"sonuc_train_veri_enet = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_enet","287ad344":"y_pred = reg_model.predict(X_test)","e6674f8c":"sonuc_test_veri_enet = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_enet","47cdaec7":"sonuc_tt_veri_cv_enet = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_enet","3f50bd92":"#\u0130lk sonu\u00e7lar\u0131n \u00e7\u0131kt\u0131s\u0131\nbasicsonuc_df = pd.DataFrame({\"All Data Error\":[sonuc_tum_veri_slr,sonuc_tum_veri_clr,sonuc_tum_veri_ridge,sonuc_tum_veri_lasso,sonuc_tum_veri_enet],\n                              \"All Data cvScore(K-Fold)\":[sonuc_tum_veri_cv_slr,sonuc_tum_veri_cv_clr,sonuc_tum_veri_cv_ridge,sonuc_tum_veri_cv_lasso,sonuc_tum_veri_cv_enet],\n                              \"Train Error\":[sonuc_train_veri_slr,sonuc_train_veri_clr,sonuc_train_veri_ridge,sonuc_train_veri_lasso,sonuc_train_veri_enet],\n                              \"Test Error\":[sonuc_test_veri_slr,sonuc_test_veri_clr,sonuc_test_veri_ridge,sonuc_test_veri_lasso,sonuc_test_veri_enet],                \n                              \"Train cvScore(K-Fold)\":[sonuc_tt_veri_cv_slr,sonuc_tt_veri_cv_clr,sonuc_tt_veri_cv_ridge,sonuc_tt_veri_cv_lasso,sonuc_tt_veri_cv_enet]})\nbasicsonuc_df.index= [\"SLR\", \"CLR\",\"RID\",\"LAS\",\"ENE\"]\nbasicsonuc_df","f1e8196d":"df = hitters_data.copy()\ndf.head()","c1bb9896":"#Yeni de\u011fi\u015fkenler olu\u015fturuyoruz\ncatbat=df[\"CAtBat\"]\/df[\"Years\"]\nchits=df[\"CHits\"]\/df[\"Years\"]\nchmrun=df[\"CHmRun\"]\/df[\"Years\"]\ncruns=df[\"CRuns\"]\/df[\"Years\"]\ncrbi=df[\"CRBI\"]\/df[\"Years\"]\ncwalks=df[\"CWalks\"]\/df[\"Years\"]\ndf_seckin = pd.DataFrame({\"ortAtBat\":catbat,\"ortHits\":chits,\"ortHmRun\":chmrun,\"ortRuns\":cruns,\"ortRBI\":crbi,\"ortWalks\":cwalks})\ndf = pd.concat([df, df_seckin], axis=1)\ndf.head()","1e27c8ab":"df.corr()","527e79c1":"df = df.drop(['AtBat','Hits','HmRun','Runs','RBI','Walks','Assists','Errors',\"PutOuts\",'League','NewLeague'],axis=1)","f5ceead3":"df = pd.get_dummies(df, columns =[\"Division\"], drop_first = True)","69ca3bab":"df.head()","7786083c":"df.isnull().sum()","b13065ab":"from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors = 5)\ndf_filled = imputer.fit_transform(df)","8b57ce72":"df = pd.DataFrame(df_filled,columns = df.columns)","c1064710":"Q1 = df.Salary.quantile(0.25)\nQ3 = df.Salary.quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\ndf.loc[df[\"Salary\"] > upper,\"Salary\"] = upper","98f686f6":"from sklearn.neighbors import LocalOutlierFactor\nlof =LocalOutlierFactor(n_neighbors= 20)\nlof.fit_predict(df)","b2ff7fa7":"df_scores = lof.negative_outlier_factor_","4b85b60c":"np.sort(df_scores)[0:30]","cb69c4fe":"th = np.sort(df_scores)[9]\nth","8a06aacb":"outlier = df_scores > th","6f9cf5e8":"df = df[df_scores > th]","853a989a":"df.shape","c06d31ce":"from sklearn.linear_model import LinearRegression\nX = df[[\"ortHits\"]]\ny = df[[\"Salary\"]]\nX = scaler.fit_transform(X)\nreg_model = LinearRegression()\nreg_model.fit(X, y)","8f9e0144":"print(\"Formula: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","fac22228":"y_pred = reg_model.predict(X)","3c5d19b6":"from sklearn.metrics import mean_squared_error\nsonuc_tum_veri_detay_slr = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_slr","1654e384":"sonuc_tum_veri_cv_detay_slr = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_slr","95789193":"X = df[[\"ortHits\"]]\ny = df[[\"Salary\"]]\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","1948c285":"reg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","301bd657":"print(\"Formula: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","27e2a7ad":"y_pred = reg_model.predict(X_train)","267da11f":"sonuc_train_veri_detay_slr = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_slr","73d616fb":"y_pred = reg_model.predict(X_test)","9ac37e97":"sonuc_test_veri_detay_slr = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_slr","3ea9238e":"sonuc_tt_veri_cv_detay_slr = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_slr","1b070390":"#Geri kalan t\u00fcm modellemelerde bu X, y, X_train ve y_train i  kullanaca\u011f\u0131z.\ny = df[\"Salary\"]\nX = df.drop(\"Salary\",axis=1)\nX = scaler.fit_transform(X)\nfor i in range(len(X)):\n    if X[i][13]<0:\n        X[i][13]=0\n    else:\n        X[i][13]=1  \nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","2d01016a":"reg_model = LinearRegression()\nreg_model.fit(X, y)","ff0bcaf9":"reg_model.intercept_","4026cb4a":"reg_model.coef_","b2d8207a":"y_pred = reg_model.predict(X)","d4aa61a7":"sonuc_tum_veri_detay_clr = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_clr","3405db18":"sonuc_tum_veri_cv_detay_clr = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_clr","d284b231":"reg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","478b333a":"reg_model.intercept_","4a1662ec":"reg_model.coef_","742596ac":"y_pred = reg_model.predict(X_train)","d4c7ab3a":"sonuc_train_veri_detay_clr = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_clr","69123513":"y_pred = reg_model.predict(X_test)","a20fb2bb":"sonuc_test_veri_detay_clr = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_clr","2ed08ea0":"sonuc_tt_veri_cv_detay_clr = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_clr","f82b239e":"reg_model = Ridge()\nreg_model.fit(X, y)","bb6f830e":"reg_model.intercept_","856f65c0":"reg_model.coef_","a27c1f76":"y_pred = reg_model.predict(X)","2e72b67d":"sonuc_tum_veri_detay_ridge = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_ridge","455c37e3":"sonuc_tum_veri_cv_detay_ridge = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_ridge","08ee8d70":"reg_model = Ridge()\nreg_model.fit(X_train, y_train)","ce1eee83":"reg_model.intercept_","c849bc00":"reg_model.coef_","230799e1":"y_pred = reg_model.predict(X_train)","a9441580":"sonuc_train_veri_detay_ridge = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_ridge","02b78df2":"y_pred = reg_model.predict(X_test)","565cb257":"sonuc_test_veri_detay_ridge = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_ridge","03e6ea4a":"sonuc_tt_veri_cv_detay_ridge = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_ridge","df5f1af8":"reg_model = Lasso()\nreg_model.fit(X, y)","684923f0":"reg_model.intercept_","46af47c0":"reg_model.coef_","fc085663":"y_pred = reg_model.predict(X)","5cd320e8":"sonuc_tum_veri_detay_lasso = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_lasso","706deff5":"sonuc_tum_veri_cv_detay_lasso = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_lasso","b2689337":"reg_model = Lasso()\nreg_model.fit(X_train, y_train)","6e1ee002":"reg_model.intercept_","a62e7dee":"reg_model.coef_","09bc57de":"y_pred = reg_model.predict(X_train)","f1d0069e":"sonuc_train_veri_detay_lasso = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_lasso","e1141b11":"y_pred = reg_model.predict(X_test)","00979fbe":"sonuc_test_veri_detay_lasso = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_lasso","9e9dcbb2":"sonuc_tt_veri_cv_detay_lasso = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_lasso","15abd10b":"reg_model = ElasticNet()\nreg_model.fit(X, y)","744cfd8e":"reg_model.intercept_","3b7a6702":"reg_model.coef_","ea38ea3a":"y_pred = reg_model.predict(X)","118f234c":"sonuc_tum_veri_detay_enet = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_enet","184e99d3":"sonuc_tum_veri_cv_detay_enet = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_enet","04dcaf10":"reg_model = ElasticNet()\nreg_model.fit(X_train, y_train)","356d010f":"reg_model.intercept_","e71098da":"reg_model.coef_","0a2b6e5c":"y_pred = reg_model.predict(X_train)","5be580f5":"sonuc_train_veri_detay_enet = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_enet","b28244e6":"y_pred = reg_model.predict(X_test)","70f4f272":"sonuc_test_veri_detay_enet = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_enet","d8d7c6d5":"sonuc_tt_veri_cv_detay_enet = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_enet","25dfb796":"#Detayl\u0131 sonu\u00e7lar\u0131n \u00e7\u0131kt\u0131s\u0131\ndetaysonuc_df = pd.DataFrame({\"T\u00fcm Veri Score\":[sonuc_tum_veri_detay_slr,sonuc_tum_veri_detay_clr,sonuc_tum_veri_detay_ridge,sonuc_tum_veri_detay_lasso,sonuc_tum_veri_detay_enet],\n                              \"T\u00fcm Veri CVScore\":[sonuc_tum_veri_cv_detay_slr,sonuc_tum_veri_cv_detay_clr,sonuc_tum_veri_cv_detay_ridge,sonuc_tum_veri_cv_detay_lasso,sonuc_tum_veri_cv_detay_enet],\n                              \"Train Veri Sonuc\":[sonuc_train_veri_detay_slr,sonuc_train_veri_detay_clr,sonuc_train_veri_detay_ridge,sonuc_train_veri_detay_lasso,sonuc_train_veri_detay_enet],\n                              \"Test Veri Sonuc\":[sonuc_test_veri_detay_slr,sonuc_test_veri_detay_clr,sonuc_test_veri_detay_ridge,sonuc_test_veri_detay_lasso,sonuc_test_veri_detay_enet],                              \n                              \"TrainTest CVScore\":[sonuc_tt_veri_cv_detay_slr,sonuc_tt_veri_cv_detay_clr,sonuc_tt_veri_cv_detay_ridge,sonuc_tt_veri_cv_detay_lasso,sonuc_tt_veri_cv_detay_enet]})\ndetaysonuc_df.index= [\"SLR_DETAY\", \"CLR_DETAY\",\"RID_DETAY\",\"LAS_DETAY\",\"ENE_DETAY\"]\ndetaysonuc_df","aa98a546":"from sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNetCV","873345eb":"alphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)","915e298c":"ridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)","d15330dc":"ridge_cv.fit(X, y)","7758e350":"tum_alpha_ridge1 = ridge_cv.alpha_\ntum_alpha_ridge1","14c6e057":"ridge_cv.fit(X_train, y_train)","07d75b48":"tt_alpha_ridge1 = ridge_cv.alpha_\ntt_alpha_ridge1 ","42192bfa":"ridge_tuned = Ridge(alpha = tum_alpha_ridge1).fit(X, y)\ny_pred = ridge_tuned.predict(X)\ntum_tuned_ridge1 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_ridge1","3145684f":"ridge_tuned = Ridge(alpha = tt_alpha_ridge1 ).fit(X_train, y_train)\ny_pred = ridge_tuned.predict(X_test)\ntt_tuned_ridge1 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_ridge1","4d4b3449":"ridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)","ee7f3f95":"ridge_cv.fit(X, y)","c2d7969f":"tum_alpha_ridge2 = ridge_cv.alpha_\ntum_alpha_ridge2","dceff270":"ridge_cv.fit(X_train, y_train)","f4d31a5e":"tt_alpha_ridge2 = ridge_cv.alpha_\ntt_alpha_ridge2","fbb800dc":"ridge_tuned = Ridge(alpha = tum_alpha_ridge2).fit(X, y)\ny_pred = ridge_tuned.predict(X)\ntum_tuned_ridge2 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_ridge2","8a00f07c":"ridge_tuned = Ridge(alpha = tt_alpha_ridge2).fit(X_train, y_train)\ny_pred = ridge_tuned.predict(X_test)\ntt_tuned_ridge2 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_ridge2","f607c9f2":"ridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)","74ad15e0":"ridge_cv.fit(X, y)","82928035":"tum_alpha_ridge3 = ridge_cv.alpha_\ntum_alpha_ridge3","18300c90":"ridge_cv.fit(X_train, y_train)","e7c9cd75":"tt_alpha_ridge3 = ridge_cv.alpha_\ntt_alpha_ridge3","393467cf":"ridge_tuned = Ridge(alpha = tum_alpha_ridge3).fit(X, y)\ny_pred = ridge_tuned.predict(X)\ntum_tuned_ridge3 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_ridge3","f68fe30f":"ridge_tuned = Ridge(alpha = tt_alpha_ridge3).fit(X_train, y_train)\ny_pred = ridge_tuned.predict(X_test)\ntt_tuned_ridge3 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_ridge3","70db6373":"if (tum_tuned_ridge1 < tum_tuned_ridge2) & (tum_tuned_ridge1 < tum_tuned_ridge3):\n    tum_tuned_ridge = tum_tuned_ridge1\n    tum_alpha_ridge = tum_alpha_ridge1\nelif tum_tuned_ridge2 < tum_tuned_ridge3:\n    tum_tuned_ridge = tum_tuned_ridge2\n    tum_alpha_ridge = tum_alpha_ridge2\nelse:\n    tum_tuned_ridge = tum_tuned_ridge3\n    tum_alpha_ridge = tum_alpha_ridge3\nprint(\"RMSE:\"+str(tum_tuned_ridge)+\"  Alpha:\"+str(tum_alpha_ridge))","698f38a6":"if (tt_tuned_ridge1 < tt_tuned_ridge2) & (tt_tuned_ridge1 < tt_tuned_ridge3):\n    tt_tuned_ridge = tt_tuned_ridge1\n    tt_alpha_ridge = tt_alpha_ridge1\nelif tum_tuned_ridge2 < tum_tuned_ridge3:\n    tt_tuned_ridge = tt_tuned_ridge2\n    tt_alpha_ridge = tt_alpha_ridge2\nelse:\n    tt_tuned_ridge = tt_tuned_ridge3\n    tt_alpha_ridge = tt_alpha_ridge3\nprint(\"RMSE:\"+str(tt_tuned_ridge)+\"  Alpha:\"+str(tt_alpha_ridge))","a224f3a4":"alphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)","da867b02":"lasso_cv = LassoCV(alphas = alphas1, cv = 10)","3df06655":"lasso_cv.fit(X, y)","bf574eba":"tum_alpha_lasso1 = lasso_cv.alpha_\ntum_alpha_lasso1","a7886144":"lasso_cv.fit(X_train, y_train)","62ce4ef4":"tt_alpha_lasso1 = lasso_cv.alpha_\ntt_alpha_lasso1","1a99b58b":"lasso_tuned = Lasso(alpha = tum_alpha_lasso1).fit(X, y)\ny_pred = lasso_tuned.predict(X)\ntum_tuned_lasso1 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_lasso1","c918aebf":"lasso_tuned = Lasso(alpha = tt_alpha_lasso1).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\ntt_tuned_lasso1 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_lasso1","b591ad84":"lasso_cv = LassoCV(alphas = alphas2, cv = 10)","68539214":"lasso_cv.fit(X, y)","99c1e9e8":"tum_alpha_lasso2 = lasso_cv.alpha_\ntum_alpha_lasso2","0ed2617f":"lasso_cv.fit(X_train, y_train)","2d878707":"tt_alpha_lasso2 = lasso_cv.alpha_\ntt_alpha_lasso2","7f355ad9":"lasso_tuned = Lasso(alpha = tum_alpha_lasso2).fit(X, y)\ny_pred = lasso_tuned.predict(X)\ntum_tuned_lasso2 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_lasso2","d043d110":"lasso_tuned = Lasso(alpha = tt_alpha_lasso2).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\ntt_tuned_lasso2 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_lasso2","0ccf160d":"lasso_cv = LassoCV(alphas = alphas3, cv = 10)","31ad349a":"lasso_cv.fit(X, y)","66d1f969":"tum_alpha_lasso3 = lasso_cv.alpha_\ntum_alpha_lasso3","58c0d1f9":"lasso_cv.fit(X_train, y_train)","93da9631":"tt_alpha_lasso3 = lasso_cv.alpha_\ntt_alpha_lasso3","534a8595":"lasso_tuned = Lasso(alpha = tt_alpha_lasso3).fit(X, y)\ny_pred = lasso_tuned.predict(X)\ntum_tuned_lasso3 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_lasso3","793f7138":"lasso_tuned = Lasso(alpha = tt_alpha_lasso3).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\ntt_tuned_lasso3 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_lasso3","cbc20629":"if (tum_tuned_lasso1 < tum_tuned_lasso2) & (tum_tuned_lasso1 < tum_tuned_lasso3):\n    tum_tuned_lasso = tum_tuned_lasso1\n    tum_alpha_lasso = tum_alpha_lasso1\nelif tum_tuned_lasso2 < tum_tuned_lasso3:\n    tum_tuned_lasso = tum_tuned_lasso2\n    tum_alpha_lasso = tum_alpha_lasso2\nelse:\n    tum_tuned_lasso = tum_tuned_lasso3\n    tum_alpha_lasso = tum_alpha_lasso3\nprint(\"RMSE:\"+str(tum_tuned_lasso)+\"  Alpha:\"+str(tum_alpha_lasso))","fc23c7c0":"if (tt_tuned_lasso1 < tt_tuned_lasso2) & (tt_tuned_lasso1 < tt_tuned_lasso3):\n    tt_tuned_lasso = tt_tuned_lasso1\n    tt_alpha_lasso = tt_alpha_lasso1\nelif tt_tuned_lasso2 < tt_tuned_lasso3:\n    tt_tuned_lasso = tt_tuned_lasso2\n    tt_alpha_lasso = tt_alpha_lasso2\nelse:\n    tt_tuned_lasso = tt_tuned_lasso3\n    tt_alpha_lasso = tt_alpha_lasso3\nprint(\"RMSE:\"+str(tt_tuned_lasso)+\"  Alpha:\"+str(tt_alpha_lasso))","14fe1a2a":"from sklearn.model_selection import GridSearchCV\nenet_params = {\"l1_ratio\": [0.1,0.2,0.4,0.5,0.6,0.8,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]}\nenet_model = ElasticNet()","ae5124ab":"gs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)","3035dbdd":"gs_cv_enet.best_params_","e02b8c21":"tum_tuned_enet_a = gs_cv_enet.best_params_[\"alpha\"]\ntum_tuned_enet_a","c6360c7a":"tum_tuned_enet_l = gs_cv_enet.best_params_[\"l1_ratio\"]\ntum_tuned_enet_l","93b71903":"enet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X, y)\ny_pred = enet_tuned.predict(X)\ntum_tuned_enet = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_enet ","6d04ae11":"gs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X_train, y_train)","c7a43f9c":"gs_cv_enet.best_params_","526b24c0":"tt_tuned_enet_a = gs_cv_enet.best_params_[\"alpha\"]\ntt_tuned_enet_a","705d20e0":"tt_tuned_enet_l = gs_cv_enet.best_params_[\"l1_ratio\"]\ntt_tuned_enet_l","dcb94fae":"enet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\ntt_tuned_enet = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_enet ","34e0c192":"#Detayl\u0131 sonu\u00e7lar\u0131n \u00e7\u0131kt\u0131s\u0131\ndetaysonuc_df = pd.DataFrame({\"All Data Error\":[sonuc_tum_veri_detay_slr,sonuc_tum_veri_detay_clr,sonuc_tum_veri_detay_ridge,sonuc_tum_veri_detay_lasso,sonuc_tum_veri_detay_enet],\n                              \"All Data cvScore(K-Fold)\":[sonuc_tum_veri_cv_detay_slr,sonuc_tum_veri_cv_detay_clr,sonuc_tum_veri_cv_detay_ridge,sonuc_tum_veri_cv_detay_lasso,sonuc_tum_veri_cv_detay_enet],\n                              \"All Data Tuned Error\":[np.nan,np.nan,tum_tuned_ridge,tum_tuned_lasso,tum_tuned_enet],\n                              \"Train Error\":[sonuc_train_veri_detay_slr,sonuc_train_veri_detay_clr,sonuc_train_veri_detay_ridge,sonuc_train_veri_detay_lasso,sonuc_train_veri_detay_enet],\n                              \"Test Error\":[sonuc_test_veri_detay_slr,sonuc_test_veri_detay_clr,sonuc_test_veri_detay_ridge,sonuc_test_veri_detay_lasso,sonuc_test_veri_detay_enet],                              \n                              \"Train cvScore(K-Fold)\":[sonuc_tt_veri_cv_detay_slr,sonuc_tt_veri_cv_detay_clr,sonuc_tt_veri_cv_detay_ridge,sonuc_tt_veri_cv_detay_lasso,sonuc_tt_veri_cv_detay_enet],\n                              \"Test Tuned Error\":[np.nan,np.nan,tt_tuned_ridge,tt_tuned_lasso,tt_tuned_enet],\n                              \"Alphas\":[np.nan,np.nan,tt_alpha_ridge,tt_alpha_lasso,tt_tuned_enet_a]})\ndetaysonuc_df.index= [\"SLR_DETAY\", \"CLR_DETAY\",\"RID_DETAY\",\"LAS_DETAY\",\"ENE_DETAY\"]","c5653baa":"detaysonuc_df","7cbb802a":"basicsonuc_df","22f7505c":"## 2.4.1 T\u00fcm veri seti ile Lasso Regresyon","bc7c1502":"## 4.3.2 Train ve test ay\u0131rarak Ridge Regresyon","88075cc0":"# 2.2.1 T\u00fcm veri seti ile \u00e7oklu do\u011frusal regresyon","28d87478":"## 4.2.2 Train ve test ay\u0131rarak \u00e7oklu do\u011frusal regresyon","72ac6e9f":"## 2.2.2 Train ve test olarak ayr\u0131lan coklu dogrusal regresyon","a8c2ba16":"## 4.5.2 Train ve test ay\u0131rarak ElasticNet Regresyon","945e9512":"## 2.5.1 T\u00fcm veri seti ile ElasticNet Regresyon","48c7bfd0":"## 4.4.2 Train ve test ay\u0131rarak Lasso Regresyon","4033d8fd":"# 5.3 EnetCV","69bb62d4":"## 5. CV i\u015flemleri Ridge, Lasso, Enet","cb5b721f":"## 4.5.1 T\u00fcm veri ile ElasticNet Regresyon","b24858b7":"## 4.4.1 T\u00fcm veri ile Lasso Regresyon","75c368aa":"## 4.1.1 T\u00fcm veri ile basit do\u011frusal regresyon","7729deb4":"## 4.1.2 Train ve test ay\u0131rarak basit do\u011frusal regresyon","563b80c1":"# 5.2 LassoCv","b3e61915":"## 2.1.2 Train ve test olarak ay\u0131rarak al\u0131nan basit do\u011frusal regresyon","843114f2":"## 2.1.1 T\u00fcm veri seti ile basit do\u011frusal regresyon","b4afac61":"# 3. Veri \u00d6n i\u015fleme ad\u0131mlar\u0131(Eksik veri, ayk\u0131r\u0131 veri analizleri)","9fac5fa1":"## 4.3.1 T\u00fcm veri ile Ridge Regresyon","9bb291e1":"## 2.5.2 Train ve test ay\u0131rarak ElasticNet Regresyon","6c787985":"# 4. Veri \u00f6n i\u015fleme yap\u0131ld\u0131ktan sonra al\u0131nan sonu\u00e7lar","dcb70da3":"## 2.3.2 Train ve test ay\u0131rarak Ridge Regresyon","6050180c":"# 5.1 RidgeCV","9bea5b25":"# 1. Gerekli k\u00fct\u00fcphanelerin kurulumu ve Veri setini anlama","08b4ba63":"## 2.3.1 T\u00fcm veri ile Ridge Regresyon","69738ae4":"## 4.2.1 T\u00fcm veri ile \u00e7oklu do\u011frusal regresyon","147b9d68":"# 2. Eksik verileri silerek ve herhangi ba\u015fka bir analiz yapmadan al\u0131nacak sonu\u00e7lar","2d5543b2":"## 2.4.2 Train ve test ay\u0131rarak Lasso Regresyon"}}