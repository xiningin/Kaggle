{"cell_type":{"88898579":"code","ba3896d1":"code","ee434438":"code","7ba5abe2":"code","f6401c6f":"code","e7ec7ad1":"code","41d0d791":"code","85c81671":"code","e2d004a7":"code","bdb9ad02":"code","5dd92a8e":"code","dc66bf94":"code","af11df35":"code","7466eb37":"code","397d31bc":"code","6ec41c6a":"code","06f1dd0b":"code","97ece7be":"code","6a66604b":"code","a29ae7a8":"code","3194a0db":"code","09b4945b":"code","6daeec2e":"code","f24c0122":"code","d9941b9a":"code","7d6f5620":"code","21177090":"markdown","f2b0852d":"markdown","9b63d213":"markdown","57a71ce1":"markdown","038b6034":"markdown","193d6fd5":"markdown","a96dd78a":"markdown","ae4a28b0":"markdown","ecf2533b":"markdown","04daeb9c":"markdown","93e48417":"markdown","c11c937b":"markdown","ef84ada2":"markdown","87c3b865":"markdown","d739d7a6":"markdown","61357bcb":"markdown","c2c5633b":"markdown","18486ea4":"markdown","9011a1ae":"markdown","564c8f1a":"markdown","9ececbbb":"markdown","f2a18445":"markdown","83d68d25":"markdown","93e0c47d":"markdown","230f7425":"markdown","c0b763a7":"markdown","e4260ecf":"markdown"},"source":{"88898579":"from scipy.io import loadmat\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","ba3896d1":"from scipy.io import loadmat\nX = loadmat('..\/input\/kutahyasentineltr\/Ktahya-Sentinel.mat')\nS=X['S']\nX=S\nX.shape","ee434438":"from scipy.io import loadmat\nt = loadmat('..\/input\/kutahyasentineltr\/Ktahya-ENVI SVM Classification Image.mat')\ny=t['A']\ny.shape","7ba5abe2":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom termcolor import colored\nimage = mpimg.imread(\"..\/input\/kutahyasentineltr\/Ktahya-Sentinel RGB.jpg\")\nplt.imshow(image)\nprint(colored('True Color Sentinel Image', attrs=['bold']))\n","f6401c6f":"fig = plt.figure(figsize = (12, 6))\n\nfor i in range(1, 1+3):\n    fig.add_subplot(2,3, i)\n    q = np.random.randint(X.shape[2])\n    plt.imshow(X[:,:,q], cmap='nipy_spectral')\n    plt.axis('off')\n    plt.title(f'Band - {q}')","e7ec7ad1":"plt.imshow(y,origin=\"lower\", cmap='RdPu', interpolation='nearest')\nprint(colored('Assumed Ground Truth Map', attrs=['bold']))\nplt.xticks([])\nplt.yticks([])\n","41d0d791":"import plotly.express as px\n\ncls = px.imshow(y, color_continuous_scale='jet')\n\ncls.update_layout(title='Ground Truth', coloraxis_showscale=True)\ncls.update_xaxes(showticklabels=False)\ncls.update_yaxes(showticklabels=False)\ncls.show()\nprint('1: Mine, 2: Rock, 3: Forest, 4: Agriculture')","85c81671":"fig, axs = plt.subplots(1,2)\nprint(colored('True Color Sentinel Image     Ground Truth Map', 'green', attrs=['bold']))\naxs[0].imshow(image)\naxs[1].imshow(y)\nplt.show()","e2d004a7":"def extract_pixels(X, y):\n  q = X.reshape(-1, X.shape[2])\n  df = pd.DataFrame(data = q)\n  df = pd.concat([df, pd.DataFrame(data = y.ravel())], axis=1)\n  df.columns= [f'band{i}' for i in range(1, 1+X.shape[2])]+['class']\n  return df\n  \ndf = extract_pixels(X, y)\n","bdb9ad02":"df.describe().round(2)","5dd92a8e":"df.info()","dc66bf94":"df.iloc[:, :-1].describe().round(2)","af11df35":"from sklearn.decomposition import PCA\n\npca = PCA(n_components = 4)\n\ndt = pca.fit_transform(df.iloc[:, :-1].values)\nq = pd.concat([pd.DataFrame(data = dt), pd.DataFrame(data = y.ravel())], axis = 1)\nq.columns = [f'PC-{i}' for i in range(1,5)]+['class']\nev=pca.explained_variance_ratio_\n\nplt.figure(figsize=(8, 4))\nplt.plot(np.cumsum(ev))\nplt.xlabel('Number of components')\nplt.ylabel('Cumulative explained variance')\n\n\nplt.show()\n","7466eb37":"q.head()","397d31bc":"fig = plt.figure(figsize = (20, 10))\n\nfor i in range(1, 1+4):\n    fig.add_subplot(2,4, i)\n    plt.imshow(q.loc[:, f'PC-{i}'].values.reshape(X.shape[0], X.shape[1]), cmap='nipy_spectral')\n    plt.axis('off')\n    plt.title(f'Band - {i}')","6ec41c6a":"from sklearn.model_selection import train_test_split\n\nx = q[q['class'] != 0]\nX = x.iloc[:, :-1].values\ny = x.loc[:, 'class'].values \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=11, stratify=y)\n","06f1dd0b":"from sklearn.svm import SVC\nsvm =  SVC(C = 100, kernel = 'rbf', cache_size = 10*1024)\nsvm.fit(X_train, y_train)","97ece7be":"ypred = svm.predict(X_test)","6a66604b":"print(ypred)","a29ae7a8":"from sklearn.metrics import confusion_matrix\nimport seaborn as sn\nnames = ['Mine',\t'Rock', 'Forest',\t'Agriculture']\n\ndata = confusion_matrix(y_test, ypred)\ndf_cm = pd.DataFrame(data, columns=np.unique(names), index = np.unique(names))\ndf_cm.index.name = 'Actual'\ndf_cm.columns.name = 'Predicted'\nplt.figure(figsize = (6,4))\nsn.set(font_scale=1.4)\nsn.heatmap(df_cm, cmap=\"Reds\", annot=True,annot_kws={\"size\": 10}, fmt='d')\n","3194a0db":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, ypred, target_names = names))","09b4945b":"Sentinel_SVC = svm.predict(X)","6daeec2e":"a,b=t['A'].shape[0], t['A'].shape[1]","f24c0122":"SL=Sentinel_SVC.reshape(a,b).astype('float')\nSLclmap = np.array(SL).reshape(a,b).astype('float')\n","d9941b9a":"fig, axs = plt.subplots(1,2)\naxs[0].imshow(SLclmap)\naxs[0].grid(False)\naxs[0].set_xticklabels([])\naxs[0].set_yticklabels([])\n\naxs[1].imshow(t['A'][:,:])\naxs[1].grid(False)\naxs[1].set_xticklabels([])\naxs[1].set_yticklabels([])\n\nplt.show()\n","7d6f5620":"\ndf = pd.DataFrame(SLclmap)\ndf.to_csv('SVM Python Predicted Classification.csv')    ","21177090":"The dataset which will use here are saved in matlab file as 'S' (Sentinel) and 'A' (ENVI SVM Classification Image)\n\nIn this code i will use a clasification map generated in ENVI with SVM method as Ground Truth map (just assumed that is true) but field sampling dataset or more detailed geological maps could be utilized for more realistic results!","f2b0852d":"#  **Machine Learning for Remote Sensing Image Classification (SVM)**","9b63d213":"And a view of the assumed ground truth map is below. Based on my personal investigations,I define 4 classes on my sentinel image in the region as:\n\n* Mine\n* Rock\n* Forest\n* Agriculture","57a71ce1":"Another presentaion of the GT in more detail:","038b6034":"Display the PCA images","193d6fd5":"Display Sentinel True Color Image and Ground truth map side by side","a96dd78a":"to evaluate the classification performans, apply the model on test data which is not seen by the model!","ae4a28b0":"And now, it's time to apply SVM","ecf2533b":"Some of the Sentinel bands displaed here by random","04daeb9c":"Dimensionaly reduction of dataset from 10 bands to 4 main components by PCA","93e48417":"investigate PCA results for first 5 rows of dataset and their defined class IDs","c11c937b":"Define dataset in a pandas daaframe","ef84ada2":"Prepare to display results as a classification map\nextract image pixel size and reshape 1D estimated class predictions to 2D classification image","87c3b865":"Evaluate the model performance through the confusion_matrix","d739d7a6":"And here is the data information and their types in dataframe","61357bcb":"Perhaps, you nead to save the results to display in another platform","c2c5633b":"The statistics for just sentinel bands (see: how to extract desired columns or features from  pandas dataframes)","18486ea4":"Firstly, visualise the true color image of the study area","9011a1ae":"Finally, i apply model on whole sentinel image (on dimensionally reduced image by PCA)","564c8f1a":"Here is the classification performance report","9ececbbb":"Review the Dataset statistics","f2a18445":"Now ready to apply SVM from sklearn packages on our dimencionally reduced satellite image\n\n\nFirst split dataset to train and test dataset by 80\/20 rate","83d68d25":"In last compare prediction results with GT image","93e0c47d":"A review of the preiction results is below","230f7425":"There are various ways to import dataset but the simples is used here:","c0b763a7":"Firstly, import necessary libraries as follow:","e4260ecf":"**The purpose of current implementation is to generate a prospecting map around a mining destrict in K\u00fctahya - Turkey**\n\nHere i aimed to define possible new orebodies based on machine learning and classification of satellite imagery (Sentinel)\n\nHere, the **Support Vector Machine** Approach is examined"}}