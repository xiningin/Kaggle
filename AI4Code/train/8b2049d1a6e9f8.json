{"cell_type":{"ffdffe56":"code","99af87e7":"code","40e9dad7":"code","55248089":"code","0ccd396f":"code","1c21b0ad":"code","7fe67a9c":"code","02aaab82":"code","cb83ddce":"code","2d26060f":"code","cd386b74":"code","bccc9bd6":"code","2c528c39":"code","c237eb4a":"code","467b54c7":"code","4fe830e1":"code","4558c376":"code","2f09e460":"code","37285007":"code","f681d4a6":"code","a0279f6f":"code","25448277":"code","9b852a3d":"code","3e71277b":"code","7b8bff9f":"code","cf406d7c":"code","b018392e":"code","35b307f4":"code","034d8f4b":"code","c9b68290":"code","42b7dc5c":"code","6e5afcb8":"code","2c39c5b6":"code","80d93864":"code","84a5a5bf":"code","085c58de":"code","8f047ad0":"code","3a1bca86":"code","0701e293":"code","5992c0f4":"code","877cc9ef":"code","cda042e7":"code","54076dc4":"code","c0a6acee":"code","45fba105":"code","4971ba2b":"code","cd2c8cdd":"code","fd2e6939":"markdown","0daf54d3":"markdown","8ed906ad":"markdown","b6077519":"markdown","8000ff9f":"markdown","5fb25ac1":"markdown","53314332":"markdown","94473586":"markdown","6aeaaacc":"markdown","8ae323f0":"markdown","7816eacc":"markdown","3782c4f5":"markdown","fab19487":"markdown","7e2971f4":"markdown","4d907df3":"markdown","ed3abf15":"markdown","75816e2a":"markdown","262e4458":"markdown","15f138ee":"markdown","2ba183e0":"markdown","9a9dbbe7":"markdown","b656331a":"markdown","c3b0a710":"markdown","d394b83e":"markdown","51dc1526":"markdown","cf4f30ef":"markdown","8a6474ea":"markdown","ea161d1f":"markdown","aff8a5c8":"markdown","fd9ae56b":"markdown","e04c4c0e":"markdown","b4131bb9":"markdown","f709e76f":"markdown","4c101a40":"markdown","d5850c38":"markdown","fada2348":"markdown"},"source":{"ffdffe56":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","99af87e7":"df = pd.read_csv('..\/input\/flavors_of_cacao.csv')","40e9dad7":"df.head()","55248089":"df.info()","0ccd396f":"df.describe()","1c21b0ad":"df.isnull()\n","7fe67a9c":"sns.heatmap(df.isnull(), cbar = False, cmap='coolwarm')","02aaab82":"df.columns","cb83ddce":"df['Bean\\nType'].value_counts()","2d26060f":"df['Bean\\nType'].nunique()","cd386b74":"sns.heatmap(df.corr())","bccc9bd6":"df.columns","2c528c39":"print('Unique Values:')\nprint('Company (Maker-if known): ',df['Company\\xa0\\n(Maker-if known)'].nunique())\nprint('Specific Bean Origin or Bar Name: ', df['Specific Bean Origin\\nor Bar Name'].nunique())\nprint('Company Location: ',df['Company\\nLocation'].nunique())\nprint('Bean Type: ', df['Bean\\nType'].nunique())\nprint('Broad Bean Origin', df['Broad Bean\\nOrigin'].nunique())\nprint('Review Date: ', df['Review\\nDate'].nunique())\nprint('Cocoa Percent: ', df['Cocoa\\nPercent'].nunique())","c237eb4a":"sns.countplot(x = df['Rating'])","467b54c7":"sns.countplot(x = df['Review\\nDate'])","4fe830e1":"sns.jointplot(x = 'Rating', y= 'Review\\nDate', data = df, kind='kde', color = 'brown')","4558c376":"df['Cocoa\\nPercent'] = df['Cocoa\\nPercent'].str.replace('%', '')\ndf['Cocoa\\nPercent'] = df['Cocoa\\nPercent'].str.replace('.', '')\ndf['Cocoa\\nPercent'] = df['Cocoa\\nPercent'].astype(int)","2f09e460":"plt.figure(figsize=(15,7))\nsns.countplot(x= 'Cocoa\\nPercent', data = df, color = 'brown')","37285007":"def normalizeIt(percent):\n    if percent > 100:\n        percent = int(str(percent)[:2])\n    return percent","f681d4a6":"df['Cocoa\\nPercent'] = df['Cocoa\\nPercent'].apply(normalizeIt)","a0279f6f":"plt.figure(figsize=(15,7))\nsns.countplot(x= 'Cocoa\\nPercent', data = df, color = 'brown')","25448277":"df['Rating'] = (df['Rating']* 100).astype(int)\ndf['Rating'].head(5)","9b852a3d":"df.columns","3e71277b":"company = pd.get_dummies(df['Company\\xa0\\n(Maker-if known)'],drop_first=True)\nsbOrigin = pd.get_dummies(df['Specific Bean Origin\\nor Bar Name'],drop_first=True)\ncompanyLocation = pd.get_dummies(df['Company\\nLocation'],drop_first=True)\nbType = pd.get_dummies(df['Bean\\nType'],drop_first=True)\nbbOrigin = pd.get_dummies(df['Broad Bean\\nOrigin'],drop_first=True)","7b8bff9f":"df = pd.concat([df, company, sbOrigin, companyLocation, bType, bbOrigin], axis = 1)","cf406d7c":"df.drop(['Company\\xa0\\n(Maker-if known)', 'Specific Bean Origin\\nor Bar Name','Company\\nLocation', 'Bean\\nType', \n         'Broad Bean\\nOrigin'], axis = 1, inplace = True )","b018392e":"df = df.loc[:,~df.columns.duplicated()]\n","35b307f4":"from sklearn.model_selection import train_test_split","034d8f4b":"X = df.drop('Rating', axis = 1) #Features\ny = df['Rating']   # Target Variables\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=7)","c9b68290":"from sklearn.ensemble import RandomForestClassifier","42b7dc5c":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train, y_train)","6e5afcb8":"df.columns","2c39c5b6":"df['Venezuela'].head(5)","80d93864":"rfc_pred = rfc.predict(X_test)","84a5a5bf":"from sklearn.metrics import classification_report, accuracy_score","085c58de":"print(classification_report(y_test,rfc_pred))","8f047ad0":"print(accuracy_score(y_test,rfc_pred)*100)","3a1bca86":"sns.countplot(x = 'Rating', data=df)","0701e293":"def rating_to_stars(rating):\n    \n    rating = int(rating)\n    \n    if (rating == 0.0 ):\n        return 0.0\n    elif (rating > 0 ) and (rating <= 199 ):\n        return 1.0\n    elif (rating >= 200 ) and (rating <= 299 ):\n        return 2.0\n    elif (rating >= 300 ) and (rating <= 399 ):\n        return 3.0\n    else:\n        return 4.0","5992c0f4":"df['Rating'] = df['Rating'].apply(rating_to_stars)","877cc9ef":"sns.countplot(x = 'Rating', data=df)","cda042e7":"X = df.drop('Rating', axis = 1)\ny = df['Rating']","54076dc4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=7)","c0a6acee":"rfc = RandomForestClassifier(n_estimators=5000, min_weight_fraction_leaf= 0)\nrfc.fit(X_train, y_train)","45fba105":"rfc_pred = rfc.predict(X_test)","4971ba2b":"print(classification_report(y_test,rfc_pred))","cd2c8cdd":"print(accuracy_score(y_test,rfc_pred)*100)","fd2e6939":"#### Different Bean type and their counts","0daf54d3":"#### Rating Distribution","8ed906ad":"#### So most ratings are between to 3.0 to 3.5","b6077519":"#### Data Metrics","8000ff9f":"It worked!!","5fb25ac1":"* Most ratings are in 3\n* Makes sense as many of them were between 3 to 3.5","53314332":"#### Checking for correlation","94473586":"#### Converting String into Integers for better classification","6aeaaacc":"#### To fix the above error","8ae323f0":"#### Corrections: Cocoa Percent cannot be above 100 %\n* 75.5% --->   75.5\n* 75.5 --->   755","7816eacc":"#### Reading Data for a csv file","3782c4f5":"#### Heat Map for better Visualization","fab19487":"#### Total number of Beans ","7e2971f4":"#### Let's Group them as if they were stars\n*You can use a much more complex logic for this.*","4d907df3":"Hmm, Let's try something else ","ed3abf15":"#### Let's Plot it again","75816e2a":"#### Did it Work ?","262e4458":"#### Let's Compare how the model performed","15f138ee":"#### Splitting Into Training and Testing data sets","2ba183e0":"#### Rating and Review Date Concentrations","9a9dbbe7":"#### Importing Libraries","b656331a":"#### Let's apply it","c3b0a710":"#### Getting Unique Values for every text related column ","d394b83e":"#### Converting Rating","51dc1526":"#### Importing Random Forest Classifier","cf4f30ef":"#### Dropping Columns which have been Featurized","8a6474ea":"#### Checking for NaN Attributes","ea161d1f":"#### Featurizing Text","aff8a5c8":"#### Data Exploration","fd9ae56b":"#### Year-wise distribution","e04c4c0e":"About 370 ratings below to 3.5 followed by 3.0 ","b4131bb9":"#### Splitting Again","f709e76f":"#### Checking different column names","4c101a40":"#### Data Visualization\n","d5850c38":"#### Checking for Duplicate Columns ","fada2348":"#### Removing Duplicate Column \nAdded due to featurization.\n\n[StackOverFlow link](https:\/\/stackoverflow.com\/questions\/14984119\/python-pandas-remove-duplicate-columns)"}}