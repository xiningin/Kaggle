{"cell_type":{"cb311b5e":"code","551d8523":"code","42e75b6b":"code","c7041e33":"code","68e40e4e":"code","1f5633a8":"code","6386fb16":"code","381da6ca":"code","6078553b":"code","f67d7713":"code","ab8f9a37":"code","c65eaad3":"code","31e9dd77":"code","4ffaab99":"code","2802095f":"code","d4129af7":"code","dfc0c806":"code","0757c23b":"code","11209ffe":"code","53802955":"code","16da4889":"code","8e594e96":"code","10f47bee":"code","69a035ed":"code","69c77c64":"code","d4952d53":"code","caf9f089":"code","50302ac4":"code","919a7f87":"code","495b78c8":"markdown","95d03dbd":"markdown","cd832aeb":"markdown","96fc877a":"markdown","b765d260":"markdown","cbf86a93":"markdown","12e1a091":"markdown","535d26eb":"markdown"},"source":{"cb311b5e":"import torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\n\nimport torchvision.transforms as T\nimport torchvision.models as models\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid\nfrom torch.utils.data import random_split\n\nimport cv2\nimport PIL\nfrom PIL import Image\n\n\nimport functools","551d8523":"## initialization\nIMG_SHAPE = (256,256)\nVAL_DATASET_SIZE = 0.1 \nBATCH_SIZE = 32\nDATASET_SIZE = 0.1","42e75b6b":"DATA_DIR = \"..\/input\/food41\/images\"\n\ntransform_ds = T.Compose([\n    T.Resize(IMG_SHAPE),\n    T.RandomHorizontalFlip(),\n    T.ColorJitter(hue=.05, saturation=.05),\n    T.RandomRotation(20, resample=PIL.Image.BILINEAR),\n    T.ToTensor()\n])\n\nds = torchvision.datasets.ImageFolder(\n    root=DATA_DIR,\n    transform=transform_ds\n\n)\n\nprint(\"total images = \", len(ds))","c7041e33":"ds.classes","68e40e4e":"val_ds_size = int(len(ds) * VAL_DATASET_SIZE)\ntrain_ds_size = len(ds) - val_ds_size\n\ntrain_ds, val_ds = random_split(ds, [train_ds_size, val_ds_size])","1f5633a8":"train_dl = DataLoader(train_ds, BATCH_SIZE, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, BATCH_SIZE, num_workers=4, pin_memory=True)","6386fb16":"def show_images(train_dl):\n    for images, labels in train_dl:\n        fig, ax = plt.subplots(figsize=(12, 12))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:32], nrow=8).permute(1,2,0))\n        break","381da6ca":"show_images(train_dl)","6078553b":"def get_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\n@functools.lru_cache(maxsize=128)\nclass DeviceDataLoader():\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n    \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n            \n    def __len__(self):\n        return len(self.dl)","f67d7713":"device = get_device()\ndevice","ab8f9a37":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","c65eaad3":"def accuracy(out, labels):\n    _, preds = torch.max(out, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","31e9dd77":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        acc = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_acc\": acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_loss = [x[\"val_loss\"] for x in outputs]\n        epoch_loss = torch.stack(batch_loss).mean()\n        batch_acc = [x[\"val_acc\"] for x in outputs]\n        epoch_acc = torch.stack(batch_acc).mean()\n        return {\"val_loss\": epoch_loss.item(), \"val_acc\": epoch_acc.item()}\n    \n    def epoch_end(self, epoch, epochs, result):\n        print(\"Epoch: [{}\/{}], last_lr: {:.6f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n        epoch, epochs, result[\"lrs\"][-1], result[\"train_loss\"], result[\"val_loss\"], result[\"val_acc\"]))","4ffaab99":"network = models.wide_resnet101_2(pretrained=True)\nnetwork.fc","2802095f":"network","d4129af7":"class Classifier(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = models.wide_resnet101_2(pretrained=True)\n        number_of_features =  self.network.fc.in_features\n        self.network.fc = nn.Linear(number_of_features, 101)\n        \n    def forward(self, xb):\n        return self.network(xb)\n        \n    def freeze(self):\n        for param in self.network.parameters():\n            param.requires_grad=False\n        for param in self.network.fc.parameters():\n            param.requires_grad=True\n        \n    def unfreeze(self):\n        for param in self.network.parameters():\n            param.requires_grad=True","dfc0c806":"model = to_device(Classifier(), device)","0757c23b":"@torch.no_grad()\ndef evaluate(model, val_dl):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_dl]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group[\"lr\"]\n    \ndef fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=0, grad_clip=None,\n                 opt_func=torch.optim.Adam):\n    \n    torch.cuda.empty_cache()\n    \n    history = []\n    opt = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    sched = torch.optim.lr_scheduler.OneCycleLR(opt, max_lr, epochs=epochs,\n                                                   steps_per_epoch=len(train_dl))\n    \n    for epoch in range(epochs):\n        model.train()\n        train_loss = []\n        lrs = []\n        for batch in tqdm(train_dl):\n            loss = model.training_step(batch)\n            train_loss.append(loss)\n            loss.backward()\n            \n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            opt.step()\n            opt.zero_grad()\n            \n            lrs.append(get_lr(opt))\n            sched.step()\n            \n        result = evaluate(model, val_dl)\n        result[\"train_loss\"] = torch.stack(train_loss).mean().item()\n        result[\"lrs\"] = lrs\n        model.epoch_end(epoch, epochs, result)\n        history.append(result)\n    return history\n    ","11209ffe":"history = [evaluate(model, val_dl)]\nhistory","53802955":"model.freeze()","16da4889":"epochs = 7\nmax_lr = 10e-5\ngrad_clip = 0.1\nweight_decay = 10e-4\nopt_func=torch.optim.Adam","8e594e96":"%%time\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=weight_decay,\n                        grad_clip=grad_clip, opt_func=opt_func)","10f47bee":"model.unfreeze()","69a035ed":"%%time\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=weight_decay,\n                        grad_clip=grad_clip, opt_func=opt_func)","69c77c64":"accuracy = [x[\"val_acc\"] for x in history]\nplt.plot(accuracy, \"-rx\")\nplt.title(\"Accuracy vs number of epochs\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")","d4952d53":"val_loss = [x[\"val_loss\"] for x in history]\ntrain_loss = [x.get(\"train_loss\") for x in history]\nplt.plot(val_loss, \"-bx\")\nplt.plot(train_loss, \"-gx\")\nplt.title(\"Losses vs number of epochs\")\nplt.legend([\"Validation loss\", \"Train loss\"])\nplt.xlabel(\"Epochs\")","caf9f089":"torch.save(model, \"\/kaggle\/working\/mod.pth\")\nmodel = torch.load('mod.pth', map_location=torch.device('cuda') )\n\nfor parameter in model.parameters():\n    parameter.requires_grad = False\n\nmodel.eval()","50302ac4":"test_transforms = T.Compose([T.Resize(256),\n                                      T.ToTensor(),\n                                      ])\n\ndef predict_image(image):\n    image_tensor = test_transforms(image).float()\n    image_tensor = image_tensor.unsqueeze_(0)\n#     input = Variable(image_tensor)\n    input = image_tensor.to(device)\n    output = model(input)\n    index = output.data.cpu().numpy().argmax()\n    return index\n\nimg = Image.open('..\/input\/food41\/images\/club_sandwich\/1017761.jpg')\n# to_pil = transforms.ToPILImage()\n\n# image = to_pil(img)\nindex = predict_image(img)\nprint(index)\nprint(ds.classes[index])","919a7f87":"# checkpoint = {\n#               'model': Classifier(),\n#               'state_dict': model.state_dict(),\n#               'optimizer':opt_func.state_dict(),\n#              }\n# torch.save(checkpoint, \"\/kaggle\/working\/model_state_dict.pth\")\n","495b78c8":"## Defining the Model","95d03dbd":"## Save & Load ","cd832aeb":"## Training","96fc877a":"## Moving the data to the GPU","b765d260":"## Preparing the data","cbf86a93":"## Performance","12e1a091":"## Evaluation","535d26eb":"## Importing the modules"}}