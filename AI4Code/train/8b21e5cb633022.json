{"cell_type":{"bad355c3":"code","cfc9c24d":"code","d47d3d5a":"code","b81a22bd":"code","7eb5d47b":"code","01ae4a8b":"code","db636707":"code","6b621e11":"code","8859e91b":"code","9960c090":"code","e3f05e33":"code","df81d712":"code","c2e0bc8e":"code","a9375640":"code","7e110e2e":"code","ea3f1e18":"code","73bef170":"code","9a9cbde4":"code","79f1bb32":"code","cfd3141a":"code","b34aa08c":"code","b4064eb1":"code","9c0af0a8":"code","8e615e99":"code","eed8bd27":"code","0cc6680b":"code","19d006b8":"code","940393a6":"code","dafd260c":"code","26174a39":"code","3030b7f4":"code","fc889d14":"code","90e7e386":"code","27739b40":"code","635d617d":"code","86b9574b":"code","5efd4cd0":"code","78b04af8":"code","c6506139":"code","6fd126f2":"code","93a2f65e":"code","5115e13e":"code","613c7e3c":"code","500fb9c0":"code","b8b86a1c":"code","6cd24d7a":"code","bed10d68":"code","c0715319":"code","6e6ebee7":"code","ccdc0f65":"code","e6919f8c":"code","3e5d8e49":"code","bec6676c":"code","9f732d83":"code","1354bd8a":"code","8ee6b585":"code","659c5bbd":"code","47436443":"code","4f0b8dad":"code","466c3bc2":"code","34dd87de":"code","c9acf293":"code","401f512c":"code","5599e027":"code","4638d0af":"code","a5e73722":"code","1616a2eb":"code","c3db3c74":"code","4c4c4a0a":"code","be914a9d":"code","56b20690":"code","ccc51606":"code","b9131ab2":"code","4fef110c":"code","cc4b0f22":"code","0366a1c0":"code","0eb682fb":"code","b41dca00":"code","294a2630":"code","7e15f71e":"code","c5768884":"code","5a524507":"code","605b51e8":"code","402ae8b7":"code","5a48d02a":"code","5c351e1f":"code","ead07c8b":"code","f13a977b":"code","3f2660fe":"code","520997c5":"code","2d5fb2e6":"code","b92ed4b0":"code","8996c498":"code","0138a217":"code","e64f1efe":"code","f2a89da2":"code","5a8043fa":"code","480ec70d":"code","2283c27f":"code","5c97b59d":"code","c3a2bdb1":"code","134a7527":"code","fc953e2f":"code","01e1a77d":"code","80b04aae":"code","4494d633":"code","230886f6":"code","3e5c1b9a":"code","9cffeeab":"code","c4eed86b":"code","23a373a4":"code","f126dc3b":"code","9df81ae4":"code","80ca8831":"code","eaed88ae":"code","fe68794f":"code","29ea83c6":"code","b70efe25":"code","5f836819":"code","b2fadac7":"code","49577d33":"code","9ed1a440":"code","09c0dce6":"code","9eeb1c94":"code","c0295082":"code","629bd88f":"code","ef6cbd5a":"code","26c98052":"code","f1fa2af3":"code","aa847d66":"code","cf519ae4":"code","c751b26e":"code","26698d9b":"code","5a28cf68":"code","6752d1d7":"code","e9f01135":"code","c2a1df33":"code","350c2e26":"code","e14aa6a8":"code","b6bf09da":"code","e6466881":"code","49fc67c2":"code","09615767":"code","495c18df":"code","f255f256":"code","b8362246":"code","c49057bd":"code","fc5b8b1c":"code","bf2b9f7f":"code","92ddbf47":"code","170cec0e":"code","c12bca10":"code","b01bfcb6":"code","ded3f83c":"code","3be7596c":"code","f8ecbadc":"code","bcc383a1":"code","b5785356":"code","731c03e6":"code","35179a0f":"code","49cf852f":"code","ba9a49be":"code","b829c17d":"code","a6bb166f":"code","61e146bc":"code","5ee8ba20":"code","1a8f18fe":"code","52843f5f":"code","084a2e20":"code","beff43a2":"code","4364e5ec":"code","0c011b3c":"code","c5024fb0":"code","eb56980b":"code","24219e6e":"code","d5f3e1cd":"code","e83ff9c8":"code","f07a77df":"code","f2e22708":"code","6a2baebc":"code","3dbdca48":"code","06d27e30":"code","5a9f9bcf":"code","f676bc66":"code","22d56869":"code","9ca58fb7":"code","fbc4a823":"code","053def09":"code","a77ab652":"code","5145f552":"code","d4ed6549":"code","e0946e27":"code","4e79dd39":"code","fe328d93":"code","5f1fb343":"code","707ceb80":"code","169cd2ac":"code","28a61f4e":"code","8879d0f3":"code","4f01e94c":"code","39bfb590":"code","1f6ec090":"code","54c2d316":"code","08c6c1db":"code","c369554b":"code","de245ec9":"code","7d5daee0":"code","a8d72e5b":"code","99310ce0":"code","78ac95e0":"code","70c35852":"code","2439a2f5":"code","d06c93a5":"code","95908612":"code","02bba4c1":"code","46a5026d":"code","b812f29d":"code","c827129e":"code","0d958fb8":"code","59b2306b":"code","8f6bf381":"code","4b8f01ee":"code","c7bd21f1":"code","c83bb3a5":"code","26e12519":"code","0d3247b7":"code","1bed0134":"code","30ae3acb":"code","6056e179":"code","9e84ab2a":"code","11bff7ff":"code","f3d7370e":"code","28e11235":"code","3c6a2d8c":"code","dd9de9ba":"code","e7dee035":"code","bdcf96c3":"code","80685118":"code","c09a20ff":"code","4ca7f56e":"code","a245e257":"code","a0e8d961":"code","eb17922a":"code","7c0ac317":"code","0b613c2c":"code","29126f60":"code","2816cc99":"code","5e12820d":"code","439a9eb4":"code","560dee32":"code","a46cab6a":"code","ee5df981":"code","0899be19":"code","a677087e":"code","8f21dd7c":"code","08f314b9":"code","188157a5":"code","f8d7aeac":"code","29643d27":"code","5c3ec1e0":"code","001c12c9":"code","e332c6e3":"code","864c0e0d":"code","d4c87510":"code","344c191c":"code","4a5d1a7b":"code","8669fdcf":"code","19d8ee88":"code","2b8e15ec":"code","db9b546a":"code","31bf5b76":"code","2ab94e40":"code","218432e4":"code","6ed79f55":"code","f293dde8":"code","35d7cb96":"code","33480fb6":"code","750590b3":"code","420b93d7":"code","63306eb1":"code","3c4f2871":"code","53e3805e":"code","105733e1":"code","5638083f":"code","f6bc090c":"code","8cac0a8d":"code","2607d583":"code","dd04e647":"code","43669452":"code","476dc8f6":"code","aa1b24e7":"code","fc2fc1bf":"code","dd54120d":"code","f8d86f64":"code","65ccb679":"code","acb36ffe":"code","7b124831":"code","b854c157":"code","c4184c61":"code","7a0adaee":"code","b339611d":"code","adb637b9":"code","08621582":"code","16ebbf3e":"code","8b26a756":"code","61ee667f":"code","278c7023":"code","28eb9e30":"code","0d7fb0ae":"code","ba1a950f":"code","100f2b34":"code","8d268ced":"code","c4bb7cf6":"code","fd21ec7c":"code","f697b46b":"code","e7989193":"code","f11ed71f":"code","b7a58b1d":"code","ac0ae78a":"code","bb39b091":"code","6944d9d9":"code","e67975c1":"code","a3f1543d":"code","80c277dd":"code","9aef5b74":"code","1289a355":"code","9d7ae24e":"code","940e8f41":"code","ea185f35":"code","ade81008":"code","2b66d772":"code","9297bbc5":"code","64c7c5b9":"code","94a14e30":"code","8f2de46c":"code","72e65452":"code","11c7a935":"code","32d42ab3":"code","025ae475":"code","06e1b889":"code","3a7d99c2":"code","c22dea12":"code","73347984":"code","0d6f5112":"code","65f6b752":"code","80fef76f":"code","a73dd3b4":"code","f2d92190":"code","e68e6cbd":"code","29bd828a":"code","5de095e3":"code","c4c4cff7":"code","2d17ba2b":"code","006aab41":"code","bbef1d4b":"code","53b5b237":"code","92ae3f8a":"code","b61c4839":"code","2a6bfba6":"code","51ea8eb2":"code","c3d3f81f":"code","28d966a8":"code","9ff9469a":"code","09fe43a1":"code","d7c3e029":"code","3c85bc5b":"code","28e37ac3":"code","6fe9a4c6":"markdown","d3d11329":"markdown","09dde25c":"markdown","ec385fb8":"markdown","ad2f715a":"markdown","87468bc1":"markdown","7d2a34fd":"markdown","059a75b0":"markdown","51211777":"markdown","2184c546":"markdown","816d3dd2":"markdown","8b110570":"markdown","87a6d940":"markdown","53fc0661":"markdown","35278636":"markdown","c80711f0":"markdown","e4e6b815":"markdown","5dabdb59":"markdown","c68435ec":"markdown","ee5c0939":"markdown","8ba57545":"markdown","9340fd20":"markdown","4633c9f9":"markdown","6d08b11b":"markdown","1c906616":"markdown","de3120b1":"markdown","dd70f563":"markdown","4d1673b1":"markdown","6a96261a":"markdown","e0faea23":"markdown","b8d92501":"markdown","1d975f65":"markdown","1ef5d0f6":"markdown","65965ce5":"markdown","54f7ed39":"markdown","3a689934":"markdown","24b21b4b":"markdown","244c380a":"markdown","a23c6d97":"markdown","23625b01":"markdown","8ce0752d":"markdown","673f8a3f":"markdown","a20062b0":"markdown","e8611c7c":"markdown","4ae8c046":"markdown","ca15716a":"markdown","9d6153d4":"markdown","66fab2f6":"markdown","4b330cf1":"markdown","0aa9d5ec":"markdown","edb9b88d":"markdown","1eeaab4e":"markdown","2f9721e6":"markdown","2ba0391e":"markdown","c7f3705c":"markdown","2cf1c5fb":"markdown","c5cd624a":"markdown","a88d511c":"markdown","7e26dfaa":"markdown","7e192c03":"markdown","743ee224":"markdown","a7e4e053":"markdown","ba23b6cf":"markdown","0c7d01bf":"markdown","82e738fb":"markdown","2c3c207d":"markdown","7770f1b1":"markdown","6b9b9471":"markdown","b7f2c0d2":"markdown","e5518cb4":"markdown","6303fb6d":"markdown","66b6190e":"markdown","f633e7ba":"markdown","36efe5d0":"markdown","bc7a17df":"markdown","f6733e85":"markdown","6b581eb0":"markdown","0896d36b":"markdown","eed0a7ea":"markdown","2ed0402e":"markdown","3d661658":"markdown","0b29c9f1":"markdown","1620ba68":"markdown","a972d276":"markdown","79e38056":"markdown","099b4e46":"markdown","f79fccd8":"markdown","fd02555a":"markdown","3853206b":"markdown","08d4cf68":"markdown","81297548":"markdown","8fddccf0":"markdown","2d05e83e":"markdown","83a02a29":"markdown","2d548129":"markdown","787323ae":"markdown","de741896":"markdown","6bd17957":"markdown","d747db8e":"markdown","8cc37af2":"markdown","7f860b42":"markdown","f77ce044":"markdown","412ee30e":"markdown","899998fa":"markdown","e6ecbf02":"markdown","9eef55df":"markdown","034e989a":"markdown","5ccdec1b":"markdown","b22cf21e":"markdown","e66ca20f":"markdown","7feb6fc4":"markdown","83337421":"markdown","a6db6371":"markdown","7415026d":"markdown","5d07b032":"markdown","3496625f":"markdown","2c1cfc3d":"markdown","39e49bc1":"markdown","ea8d9fce":"markdown","cb9bcc29":"markdown","72d76867":"markdown","3cb71b55":"markdown","33717dd0":"markdown","c958c226":"markdown","c6e800fd":"markdown","d7c62398":"markdown","faf65252":"markdown","382ac669":"markdown","e30e3d36":"markdown","3729045b":"markdown","2b55cea7":"markdown","5757e787":"markdown","75cd72fa":"markdown","d6648911":"markdown","73eb2f88":"markdown","ca47aafe":"markdown","cd90b8af":"markdown"},"source":{"bad355c3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression,Lasso,LassoCV,Ridge,RidgeCV,ElasticNet,ElasticNetCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score,cross_val_predict\nsns.set(rc={'figure.figsize':(15,8)},style='whitegrid')\n","cfc9c24d":"# settings\n\n# pd.set_option('display.max_rows', 1500)\n# pd.set_option('display.max_columns', 1000)\n# pd.reset_option('all')","d47d3d5a":"# loading train and test data \nhousing_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nhousing_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n\n# combine the two datasets\nhousing = housing_train.append(housing_test,sort=False,ignore_index=True)\n\n#storing the test ids\ntest_ids = housing_test.Id.values\n\n# dropping the id from the housing dataset\nhousing.drop('Id',axis=1,inplace=True)\n","b81a22bd":"# for reading the data description\ndef read_desc():\n    with open('\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt') as description:\n        r = description.readlines()\n        for l in r:\n            print(l)\n            \n# for searching the data description\ndef search_desc(searchphrase):\n    '''\n    searchphrase : search by column name\n    '''\n    print('There are {0} missing values in {1}\\n'.format(housing[searchphrase].isna().sum(),searchphrase))\n    with open(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt\") as search_desc:\n        searchlines = search_desc.readlines()\n        matches = [num for num,line in enumerate(searchlines) if searchphrase in line]\n        ind = matches[0]\n        for i,l in enumerate(searchlines[ind:ind+40]):\n            if not l.strip():\n                continue\n            if i > 0 and ':' in l:\n                break\n            else:\n                print(l)","7eb5d47b":"print('first 5 rows\\n------------------------------')\nhousing.head()","01ae4a8b":"print('last 5 rows\\n------------------------------')\nhousing.tail()","db636707":"print('random 5 rows\\n------------------------------')\nhousing.sample(5)","6b621e11":"rows,cols = housing.shape\nprint('------------------------------')\nprint(f'There are {rows} rows in the dataset')\nprint('------------------------------')\nprint(f'There are {cols} columns in the dataset')\nprint('------------------------------')","8859e91b":"print('------------------------------\\nint Data type\\n------------------------------')\nhousing.dtypes[housing.dtypes == int]","9960c090":"print('------------------------------\\nfloat Data type\\n------------------------------')\nhousing.dtypes[housing.dtypes == float]","e3f05e33":"print('------------------------------\\nobject Data type\\n------------------------------')\nhousing.dtypes[housing.dtypes == object]","df81d712":"missing_values_perc = (housing.isna().sum() \/ (housing.shape[0] ) * 100).sort_values(ascending=False)\nprint('------------------------------\\nMissing Values Percentage\\n------------------------------')\nmissing_values_perc[missing_values_perc != 0]","c2e0bc8e":"sns.distplot(housing.SalePrice.dropna(),kde=False)","a9375640":"housing.SalePrice.describe()","7e110e2e":"all_numVar = housing.select_dtypes(['int','float']).copy()\nprint(f'There are {len(all_numVar.columns)} numeric variables')","ea3f1e18":"cor_all_numVar = all_numVar.corr().abs()","73bef170":"high_corr_index = cor_all_numVar.sort_values(by='SalePrice',ascending=False)[:11].index","9a9cbde4":"high_corr = cor_all_numVar.loc[high_corr_index,high_corr_index]","79f1bb32":"high_corr","cfd3141a":"plt.figure(figsize=(15,8))\nmask = np.triu(np.ones(high_corr.shape))\nsns.heatmap(high_corr,annot=True,mask=mask)","b34aa08c":"sns.boxplot(x='OverallQual',y='SalePrice',data=housing)","b4064eb1":"search_desc('GrLivArea')","9c0af0a8":"def outliers_index(data,series):\n    q1 = data[series].quantile(.25)\n    q3 = data[series].quantile(.75)\n    iqr = q3 - q1\n    lower_Range = q1 -(1.5 * iqr)\n    upper_Range = q3 + (1.5 * iqr)\n    outlier = [x for x in data[series] if x < lower_Range or x > upper_Range]\n    indexes = data.index[data[series].isin(outlier)].tolist()\n    return indexes\n\n\nglaSalePrice = housing[['GrLivArea','SalePrice']].dropna()\ng = sns.regplot(x='GrLivArea',y='SalePrice',data=glaSalePrice)\nindexes = outliers_index(glaSalePrice,'GrLivArea')\npos = range(len(indexes))\n\nfor index in indexes:\n     g.text(glaSalePrice.GrLivArea[index], glaSalePrice.SalePrice[index], index,\n             horizontalalignment='left', size='small', color='black', weight='semibold')\nprint('\\n\\nNumbers on plot indicate GrLivArea outlier indexes in housing dataframe')","8e615e99":"housing.loc[[523, 1298]][['SalePrice', 'GrLivArea', 'OverallQual']]","eed8bd27":"read_desc() # reading data description","0cc6680b":"# PoolQC\nsearch_desc('PoolQC')","19d006b8":"housing.PoolQC.fillna('None',inplace=True)","940393a6":"qualities = {'None' :0, 'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5}","dafd260c":"housing['PoolQC'] = housing['PoolQC'].map(qualities)","26174a39":"housing['PoolQC'].value_counts()","3030b7f4":"housing['PoolQC'].dtype","fc889d14":"housing[(housing['PoolQC']==0) & (housing['PoolArea']>0)][['PoolQC','PoolArea']]","90e7e386":"housing[(housing['PoolQC']>0) & (housing['PoolArea']==0)][['PoolQC','PoolArea']]","27739b40":"housing[housing.PoolArea != 0][['PoolQC','PoolArea']]","635d617d":"housing[(housing['PoolQC']==0) & (housing['PoolArea']>0)][['PoolQC','PoolArea','OverallQual']]","86b9574b":"housing.loc[2420,'PoolQC'] = 2\nhousing.loc[2503,'PoolQC'] = 3\nhousing.loc[2599,'PoolQC'] = 2","5efd4cd0":"sns.barplot(x='PoolQC',y='SalePrice',data=housing,color='blue',ci=None);","78b04af8":"search_desc('MiscFeature')","c6506139":"housing.MiscFeature.fillna('None',inplace=True)","6fd126f2":"housing['MiscFeature'] = housing['MiscFeature'].astype('category')","93a2f65e":"sns.barplot(x='MiscFeature',y='SalePrice',data=housing,color='blue',ci=None);","5115e13e":"search_desc('Alley')","613c7e3c":"housing.Alley.fillna('None',inplace=True)","500fb9c0":"housing['Alley'] = housing['Alley'].astype('category')","b8b86a1c":"sns.barplot(x='Alley',y='SalePrice',data=housing,color='blue',ci=None);","6cd24d7a":"search_desc('Fence')","bed10d68":"housing.Fence.fillna('None',inplace=True)","c0715319":"housing['Fence'] = housing['Fence'].astype('category')","6e6ebee7":"sns.barplot(x='Fence',y='SalePrice',data=housing,color='blue',ci=None);","ccdc0f65":"search_desc('FireplaceQu')","e6919f8c":"housing.FireplaceQu.fillna('None',inplace=True)","3e5d8e49":"housing['FireplaceQu'] = housing['FireplaceQu'].map(qualities)","bec6676c":"housing['FireplaceQu'].value_counts()","9f732d83":"housing['FireplaceQu'].dtype","1354bd8a":"sns.barplot(x='FireplaceQu',y='SalePrice',data=housing,color='blue',ci=None);","8ee6b585":"search_desc('Fireplaces')","659c5bbd":"housing['Fireplaces'].value_counts().sum() == housing['FireplaceQu'].value_counts().sum()","47436443":"housing[ (housing['FireplaceQu'] ==0) & (housing['Fireplaces'] > 0)][['Fireplaces','FireplaceQu']]","4f0b8dad":"search_desc('LotFrontage')","466c3bc2":"g = sns.barplot(x='Neighborhood',y='LotFrontage',data=housing,color='Blue',ci=None)\nloc, labels = plt.xticks()\ng.set_xticklabels(labels, rotation=45);","34dd87de":"# pd.DataFrame(housing.groupby(['Neighborhood'])['LotFrontage'].median())","c9acf293":"housing['LotFrontage'] = housing.groupby(['Neighborhood'])['LotFrontage'].apply(lambda x: x.fillna(x.median()))","401f512c":"housing['LotFrontage'].isna().sum()","5599e027":"housing['LotFrontage'].dtype","4638d0af":"g = sns.regplot(x='LotFrontage',y='SalePrice',data=housing,ci=None)","a5e73722":"search_desc('LotShape')","1616a2eb":"reg = {'IR3':0, 'IR2':1, 'IR1':2, 'Reg':3}\nhousing['LotShape'] = housing['LotShape'].map(reg)\nhousing.LotShape.value_counts()","c3db3c74":"housing.LotShape.dtype","4c4c4a0a":"g = sns.barplot(x='LotShape',y='SalePrice',data=housing,color='Blue',ci=None)","be914a9d":"search_desc('LotConfig')","56b20690":"housing['LotConfig'] = housing['LotConfig'].astype('category')","ccc51606":"housing['LotConfig'].value_counts()","b9131ab2":"housing['LotConfig'].dtype","4fef110c":"g = sns.barplot(x='LotConfig',y='SalePrice',data=housing,color='Blue',ci=None)","cc4b0f22":"search_desc('GarageYrBlt')","0366a1c0":"search_desc('GarageType')","0eb682fb":"search_desc('GarageFinish')","b41dca00":"search_desc('GarageCond')","294a2630":"search_desc('GarageQual')","7e15f71e":"search_desc('GarageCars')","c5768884":"search_desc('GarageArea')","5a524507":"housing['GarageYrBlt'] = np.where(housing['GarageYrBlt'].isnull(),\n                                  housing['YearBuilt'], housing['GarageYrBlt']).astype(int)\n","605b51e8":"housing['GarageYrBlt'].isna().sum()","402ae8b7":"housing[(housing.GarageType.notna()) & \n        (housing.GarageFinish.isna())]\\\n[['GarageCars', 'GarageArea', 'GarageType', 'GarageCond', 'GarageQual', 'GarageFinish']]\n","5a48d02a":"housing.loc[2126,'GarageCond'] = housing.GarageCond.mode()[0]\nhousing.loc[2126,'GarageQual'] = housing.GarageQual.mode()[0]\nhousing.loc[2126,'GarageFinish'] = housing.GarageFinish.mode()[0]","5c351e1f":"housing[(housing.GarageType.notna()) & \n        (housing.GarageFinish.isna())][['GarageCars', 'GarageArea', 'GarageType', 'GarageCond', 'GarageQual', 'GarageFinish']]\n","ead07c8b":"housing.loc[2576,'GarageCars'] = 0\nhousing.loc[2576,'GarageArea'] = 0\nhousing.loc[2576,'GarageType'] = np.nan","f13a977b":"housing[(housing.GarageType.notna()) & \n        (housing.GarageFinish.isna())][['GarageCars', 'GarageArea', 'GarageType', 'GarageCond', 'GarageQual', 'GarageFinish']]\n","3f2660fe":"len(housing[(housing.GarageType.isna()) &\n            (housing.GarageFinish.isna()) &\n            (housing.GarageCond.isna()) &\n            (housing.GarageQual.isna())])","520997c5":"housing['GarageType'].fillna('No Garage',inplace=True)","2d5fb2e6":"housing['GarageType'] = housing['GarageType'].astype('category')","b92ed4b0":"housing['GarageType'].value_counts()","8996c498":"housing['GarageType'].isna().sum()","0138a217":"housing['GarageType'].dtype","e64f1efe":"g = sns.barplot(x='GarageType',y='SalePrice',data=housing,color='Blue',ci=None)","f2a89da2":"housing['GarageFinish'].fillna('None',inplace=True)","5a8043fa":"garagef = {'None':0, 'Unf':1, 'RFn':2, 'Fin':3}\nhousing['GarageFinish'] = housing['GarageFinish'].map(garagef)","480ec70d":"housing['GarageFinish'].value_counts()","2283c27f":"housing['GarageFinish'].isna().sum()","5c97b59d":"housing['GarageFinish'].dtype","c3a2bdb1":"g = sns.barplot(x='GarageFinish',y='SalePrice',data=housing,color='Blue',ci=None)","134a7527":"housing['GarageQual'].fillna('None',inplace=True)","fc953e2f":"housing['GarageQual'] = housing['GarageQual'].map(qualities)","01e1a77d":"housing['GarageQual'].value_counts()","80b04aae":"housing['GarageQual'].isna().sum()","4494d633":"housing['GarageQual'].dtype","230886f6":"g = sns.barplot(x='GarageQual',y='SalePrice',data=housing,color='Blue',ci=None)","3e5c1b9a":"housing['GarageCond'].fillna('None',inplace=True)\nhousing['GarageCond'] = housing['GarageCond'].map(qualities)","9cffeeab":"housing['GarageCond'].value_counts()","c4eed86b":"housing['GarageCond'].isna().sum()","23a373a4":"housing['GarageCond'].dtype","f126dc3b":"g = sns.barplot(x='GarageCond',y='SalePrice',data=housing,color='Blue',ci=None)","9df81ae4":"search_desc('BsmtQual')","80ca8831":"search_desc('BsmtCond')","eaed88ae":"search_desc('BsmtExposure')","fe68794f":"search_desc('BsmtFinType1')","29ea83c6":"search_desc('BsmtFinType2')","b70efe25":"len( housing[(housing.BsmtQual.isna()) & (housing.BsmtCond.isna()) \n             & (housing.BsmtExposure.isna()) & (housing.BsmtFinType1.isna()) & \n            (housing.BsmtFinType2.isna()) ])","5f836819":"housing[ housing.BsmtFinType1.notna() &\n        (housing.BsmtCond.isna() |\n         housing.BsmtExposure.isna() | \n         housing.BsmtFinType2.isna() | \n         housing.BsmtQual.isna())][['BsmtFinType1','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType2']]\\\n.style.highlight_null('yellow')","b2fadac7":"housing.loc[332,'BsmtFinType2'] = housing.BsmtFinType2.mode()[0]\nhousing.loc[[948,1487,2348],'BsmtExposure'] = housing.BsmtExposure.mode()[0]\nhousing.loc[[2040,2185,2524],'BsmtCond'] = housing.BsmtCond.mode()[0]\nhousing.loc[[2217,2218],'BsmtQual'] = housing.BsmtQual.mode()[0]","49577d33":"housing.loc[[332,948,1487,2040,2185,2217,2218,2348,2524],\\\n            ['BsmtFinType1','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType2']]","9ed1a440":"housing.BsmtQual.fillna('None',inplace=True)","09c0dce6":"housing['BsmtQual'] = housing['BsmtQual'].map(qualities)","9eeb1c94":"housing['BsmtQual'].value_counts()","c0295082":"housing['BsmtQual'].isna().sum()","629bd88f":"housing['BsmtQual'].dtype","ef6cbd5a":"g = sns.barplot(x='BsmtQual',y='SalePrice',data=housing,color='Blue',ci=None)","26c98052":"housing.BsmtCond.fillna('None',inplace=True)","f1fa2af3":"housing['BsmtCond'] = housing['BsmtCond'].map(qualities)","aa847d66":"housing['BsmtCond'].value_counts()","cf519ae4":"housing['BsmtCond'].isna().sum()","c751b26e":"housing['BsmtCond'].dtype","26698d9b":"g = sns.barplot(x='BsmtCond',y='SalePrice',data=housing,color='Blue',ci=None)","5a28cf68":"housing.BsmtExposure.fillna('None',inplace=True)","6752d1d7":"exposure = {'None':0, 'No':1, 'Mn':2, 'Av':3, 'Gd':4}","e9f01135":"housing['BsmtExposure'] = housing['BsmtExposure'].map(exposure)","c2a1df33":"housing['BsmtExposure'].value_counts()","350c2e26":"housing['BsmtExposure'].isna().sum()","e14aa6a8":"housing['BsmtExposure'].dtype","b6bf09da":"g = sns.barplot(x='BsmtExposure',y='SalePrice',data=housing,color='Blue',ci=None)","e6466881":"housing.BsmtFinType1.fillna('None',inplace=True)","49fc67c2":"Basementfintype = {'None':0, 'Unf':1, 'LwQ':2, 'Rec':3, 'BLQ':4, 'ALQ':5, 'GLQ':6}","09615767":"housing['BsmtFinType1'] = housing['BsmtFinType1'].map(Basementfintype)","495c18df":"housing['BsmtFinType1'].value_counts()","f255f256":"housing['BsmtFinType1'].isna().sum()","b8362246":"housing['BsmtFinType1'].dtype","c49057bd":"g = sns.barplot(x='BsmtFinType1',y='SalePrice',data=housing,color='Blue',ci=None)","fc5b8b1c":"housing.BsmtFinType2.fillna('None',inplace=True)","bf2b9f7f":"housing['BsmtFinType2'] = housing['BsmtFinType2'].map(Basementfintype)","92ddbf47":"housing['BsmtFinType2'].value_counts()","170cec0e":"housing['BsmtFinType2'].isna().sum()","c12bca10":"housing['BsmtFinType2'].dtype","b01bfcb6":"g = sns.barplot(x='BsmtFinType2',y='SalePrice',data=housing,color='Blue',ci=None)","ded3f83c":"search_desc('BsmtFullBath')","3be7596c":"search_desc('BsmtHalfBath')","f8ecbadc":"search_desc('BsmtFinSF1')","bcc383a1":"search_desc('BsmtFinSF2')","b5785356":"search_desc('BsmtUnfSF')","731c03e6":"search_desc('TotalBsmtSF')","35179a0f":"housing[housing.BsmtFullBath.isna() |\n       housing.BsmtHalfBath.isna() |\n       housing.BsmtFinSF1.isna() |\n       housing.BsmtFinSF2.isna() |\n       housing.BsmtUnfSF.isna() |\n       housing.TotalBsmtSF.isna() ]\\\n[['BsmtQual', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']]","49cf852f":"housing.BsmtFullBath.fillna(0,inplace=True)\nhousing.BsmtHalfBath.fillna(0,inplace=True)\nhousing.BsmtFinSF1.fillna(0,inplace=True)\nhousing.BsmtFinSF2.fillna(0,inplace=True)\nhousing.BsmtUnfSF.fillna(0,inplace=True)\nhousing.TotalBsmtSF.fillna(0,inplace=True)","ba9a49be":"housing.BsmtFullBath.isna().sum()","b829c17d":"housing.BsmtFullBath.dtype","a6bb166f":"housing.BsmtHalfBath.isna().sum()","61e146bc":"housing.BsmtHalfBath.dtype","5ee8ba20":"housing.BsmtFinSF1.isna().sum()","1a8f18fe":"housing.BsmtFinSF1.dtype","52843f5f":"housing.BsmtFinSF2.isna().sum()","084a2e20":"housing.BsmtFinSF2.dtype","beff43a2":"housing.BsmtUnfSF.isna().sum()","4364e5ec":"housing.BsmtUnfSF.dtype","0c011b3c":"housing.TotalBsmtSF.isna().sum()","c5024fb0":"housing.TotalBsmtSF.dtype","eb56980b":"search_desc('MasVnrType')","24219e6e":"search_desc('MasVnrArea')","d5f3e1cd":"len(housing[housing.MasVnrType.isna() & housing.MasVnrArea.isna()])","e83ff9c8":"housing[housing.MasVnrType.isna() & housing.MasVnrArea.notna()][['MasVnrType','MasVnrArea']]","f07a77df":"#fix this veneer type by filling the mode. taking the 2nd value as the 1st is 'none'\nhousing.MasVnrType.value_counts()","f2e22708":"housing.loc[2610,'MasVnrType'] = 'BrkFace'","6a2baebc":"housing.MasVnrType.fillna('None',inplace=True)","3dbdca48":"# we will make the ordinality accordingly.\nmasonrydict = {'None':0, 'BrkCmn':0, 'BrkFace':1, 'Stone':2}","06d27e30":"housing['MasVnrType'] = housing['MasVnrType'].map(masonrydict)","5a9f9bcf":"housing['MasVnrType'].value_counts()","f676bc66":"housing['MasVnrType'].isna().sum()","22d56869":"housing['MasVnrType'].dtype","9ca58fb7":"g = sns.barplot(x='MasVnrType',y='SalePrice',data=housing,color='Blue',ci=None)","fbc4a823":"housing.MasVnrArea.fillna(0,inplace=True)","053def09":"housing.MasVnrArea.dtype","a77ab652":"g = sns.regplot(x='MasVnrArea',y='SalePrice',data=housing,ci=None)","5145f552":"search_desc('MSZoning')","d4ed6549":"housing.MSZoning.fillna(housing.MSZoning.mode()[0],inplace=True)","e0946e27":"housing['MSZoning'] = housing['MSZoning'].astype('category')","4e79dd39":"housing.MSZoning.value_counts()","fe328d93":"housing.MSZoning.isna().sum()","5f1fb343":"housing.MSZoning.dtype","707ceb80":"g = sns.barplot(x='MSZoning',y='SalePrice',data=housing,color='Blue',ci=None)","169cd2ac":"search_desc('KitchenQual')","28a61f4e":"housing.KitchenQual.fillna(housing.KitchenQual.mode()[0],inplace=True)","8879d0f3":"housing['KitchenQual'] = housing['KitchenQual'].map(qualities)","4f01e94c":"housing['KitchenQual'].value_counts()","39bfb590":"housing['KitchenQual'].isna().sum()","1f6ec090":"housing['KitchenQual'].dtype","54c2d316":"g = sns.barplot(x='KitchenQual',y='SalePrice',data=housing,color='Blue',ci=None)","08c6c1db":"search_desc('Utilities')","c369554b":"housing.Utilities.value_counts()","de245ec9":"housing.drop('Utilities',axis=1,inplace=True)","7d5daee0":"search_desc('Functional')","a8d72e5b":"housing.Functional.value_counts()","99310ce0":"housing.Functional.fillna('Typ',inplace=True)","78ac95e0":"functionaldict = {'Sal':0, 'Sev':1, 'Maj2':2, 'Maj1':3, 'Mod':4, 'Min2':5, 'Min1':6, 'Typ':7}","70c35852":"housing['Functional'] = housing['Functional'].map(functionaldict)","2439a2f5":"housing.Functional.value_counts()","d06c93a5":"housing.Functional.isna().sum()","95908612":"housing.Functional.dtype","02bba4c1":"g = sns.barplot(x='Functional',y='SalePrice',data=housing,color='Blue',ci=None)","46a5026d":"search_desc('Exterior1st')","b812f29d":"housing.Exterior1st.value_counts()","c827129e":"housing.Exterior1st.fillna('VinylSd',inplace=True)","0d958fb8":"housing['Exterior1st'] = housing['Exterior1st'].astype('category')","59b2306b":"housing['Exterior1st'].isna().sum()","8f6bf381":"housing['Exterior1st'].dtype","4b8f01ee":"g = sns.barplot(x='Exterior1st',y='SalePrice',data=housing,color='Blue',ci=None)","c7bd21f1":"search_desc('Exterior2nd')","c83bb3a5":"housing.Exterior2nd.value_counts()","26e12519":"housing.Exterior2nd.fillna('VinylSd',inplace=True)","0d3247b7":"housing['Exterior2nd'] = housing['Exterior2nd'].astype('category')","1bed0134":"housing['Exterior2nd'].isna().sum()","30ae3acb":"housing['Exterior2nd'].dtype","6056e179":"g = sns.barplot(x='Exterior2nd',y='SalePrice',data=housing,color='Blue',ci=None)","9e84ab2a":"search_desc('ExterQual')","11bff7ff":"housing['ExterQual'] = housing['ExterQual'].map(qualities)","f3d7370e":"housing['ExterQual'].value_counts()","28e11235":"housing['ExterQual'].dtype","3c6a2d8c":"g = sns.barplot(x='ExterQual',y='SalePrice',data=housing,color='Blue',ci=None)","dd9de9ba":"search_desc('ExterCond')","e7dee035":"housing['ExterCond'] = housing['ExterCond'].map(qualities)","bdcf96c3":"housing['ExterCond'].value_counts()","80685118":"housing['ExterCond'].dtype","c09a20ff":"g = sns.barplot(x='ExterCond',y='SalePrice',data=housing,color='Blue',ci=None)","4ca7f56e":"search_desc('Electrical')","a245e257":"housing['Electrical'].value_counts()","a0e8d961":"housing['Electrical'].fillna('SBrkr',inplace=True)","eb17922a":"housing['Electrical'] = housing['Electrical'].astype('category')","7c0ac317":"housing['Electrical'].dtype","0b613c2c":"housing['Electrical'].isna().sum()","29126f60":"g = sns.barplot(x='Electrical',y='SalePrice',data=housing,color='Blue',ci=None)","2816cc99":"search_desc('SaleType')","5e12820d":"housing['SaleType'].value_counts()","439a9eb4":"housing['SaleType'].fillna('WD',inplace=True)","560dee32":"housing['SaleType'] = housing['SaleType'].astype('category')","a46cab6a":"housing['SaleType'].isna().sum()","ee5df981":"housing['SaleType'].dtype","0899be19":"g = sns.barplot(x='SaleType',y='SalePrice',data=housing,color='Blue',ci=None)","a677087e":"search_desc('SaleCondition')","8f21dd7c":"housing['SaleCondition'] = housing['SaleCondition'].astype('category')","08f314b9":"housing['SaleCondition'].value_counts()","188157a5":"housing['SaleCondition'].dtype","f8d7aeac":"g = sns.barplot(x='SaleCondition',y='SalePrice',data=housing,color='Blue',ci=None)","29643d27":"housing.select_dtypes(include=['object']).columns.tolist()","5c3ec1e0":"search_desc('Street')","001c12c9":"housing['Street'] = housing['Street'].map({'Grvl':0,'Pave':1})","e332c6e3":"housing['Street'].value_counts()","864c0e0d":"search_desc('LandContour')","d4c87510":"housing['LandContour'] = housing['LandContour'].astype('category')","344c191c":"housing['LandContour'].value_counts()","4a5d1a7b":"search_desc('LandSlope')","8669fdcf":"housing['LandSlope'] = housing['LandSlope'].map({'Sev':0, 'Mod':1, 'Gtl':2})","19d8ee88":"housing['LandSlope'].value_counts()","2b8e15ec":"search_desc('Neighborhood')","db9b546a":"housing['Neighborhood'] = housing['Neighborhood'].astype('category')","31bf5b76":"search_desc('Condition1')","2ab94e40":"housing['Condition1'] = housing['Condition1'].astype('category')","218432e4":"search_desc('Condition2')","6ed79f55":"housing['Condition2'] = housing['Condition2'].astype('category')","f293dde8":"search_desc('BldgType')","35d7cb96":"housing['BldgType'] = housing['BldgType'].astype('category')","33480fb6":"search_desc('HouseStyle')","750590b3":"housing['HouseStyle'] = housing['HouseStyle'].astype('category')","420b93d7":"search_desc('RoofStyle')","63306eb1":"housing['RoofStyle'] = housing['RoofStyle'].astype('category')","3c4f2871":"search_desc('RoofMatl')","53e3805e":"housing['RoofMatl'] = housing['RoofMatl'].astype('category')","105733e1":"search_desc('Foundation')","5638083f":"housing['Foundation'] = housing['Foundation'].astype('category')","f6bc090c":"search_desc('Heating')","8cac0a8d":"housing['Heating'] = housing['Heating'].astype('category')","2607d583":"search_desc('HeatingQC')","dd04e647":"housing['HeatingQC'] = housing['HeatingQC'].map(qualities)","43669452":"housing['HeatingQC'].value_counts()","476dc8f6":"search_desc('CentralAir')","aa1b24e7":"housing['CentralAir'] = housing['CentralAir'].map({'N':0,'Y':1})","fc2fc1bf":"housing['CentralAir'].value_counts()","dd54120d":"search_desc('PavedDrive')","f8d86f64":"housing['PavedDrive'] = housing['PavedDrive'].map({'N':0, 'P':1, 'Y':2})","65ccb679":"housing['PavedDrive'].value_counts()","acb36ffe":"housing.isna().sum().sum() - housing.SalePrice.isna().sum()","7b124831":"housing['MoSold'] = housing['MoSold'].astype('category')","b854c157":"search_desc('MSSubClass')","c4184c61":"MSSubClassdict = {20:'1 story 1946+', 30:'1 story 1945-',\n 40:'1 story unf attic', 45:'1,5 story unf',\n 50:'1,5 story fin', 60:'2 story 1946+',\n 70:'2 story 1945-', 75:'2,5 story all ages',\n 80:'split\/multi level', 85:'split foyer',\n 90:'duplex all style\/age', 120:'1 story PUD 1946+',\n 150:'1,5 story PUD all', 160:'2 story PUD 1946+',\n 180:'PUD multilevel', 190:'2 family conversion'}\n\nhousing['MSSubClass'] = housing['MSSubClass'].map(MSSubClassdict).astype('category')","7a0adaee":"housing['MSSubClass'].dtype","b339611d":"housing.shape[1]","adb637b9":"housing.select_dtypes(include=['int','float']).shape[1]","08621582":"housing.select_dtypes(include=['category']).shape[1]","16ebbf3e":"all_numVar1 = housing.select_dtypes(['int','float']).copy()\ncor_all_numVar1 = all_numVar1.corr().abs()\nhigh_corr_index1 = cor_all_numVar1.sort_values(by='SalePrice',ascending=False)[:17].index","8b26a756":"high_corr1 = cor_all_numVar1.loc[high_corr_index,high_corr_index]\nmask = np.triu(np.ones(high_corr1.shape))\nsns.heatmap(high_corr,annot=True,mask=mask)","61ee667f":"housing['TotBathrooms'] = housing.FullBath + (housing.HalfBath*0.5) + housing.BsmtFullBath + (housing.BsmtHalfBath*0.5)","278c7023":"housing['SalePrice'].corr(housing['TotBathrooms'])","28eb9e30":"sns.regplot(x='TotBathrooms',y='SalePrice',data=housing,ci=None)","0d7fb0ae":"housing['Remodeled'] = housing.YearBuilt==housing.YearRemodAdd\nhousing['Remodeled'] = housing['Remodeled'].map({True:0,False:1})","ba1a950f":"housing['Age'] = housing.YrSold - housing.YearRemodAdd","100f2b34":"sns.regplot(x='Age',y='SalePrice',data=housing,ci=None)","8d268ced":"housing['SalePrice'].corr(housing['Age'])","c4bb7cf6":"sns.barplot(x='Remodeled',y='SalePrice',data=housing,color='blue',ci=None);","fd21ec7c":"housing['SalePrice'].corr(housing['Remodeled'])","f697b46b":"housing['Isnew'] = housing.YearBuilt==housing.YrSold\nhousing['Isnew'] = housing['Isnew'].map({True:1,False:0})","e7989193":"housing['Isnew'].value_counts()","f11ed71f":"sns.barplot(x='Isnew',y='SalePrice',data=housing,color='blue',ci=None);","b7a58b1d":"g = sns.barplot(x='Neighborhood',y='SalePrice',data=housing,ci=None,color='blue')\ng.axhline(housing.SalePrice.mean(), ls='--',color='red')\nloc, labels = plt.xticks()\ng.text(2,250000, \"red dash line = mean of SalePrice\",color='red')\ng.set_xticklabels(labels, rotation=45);","ac0ae78a":"g = sns.barplot(x='Neighborhood',y='SalePrice',data=housing,ci=None,color='blue')\ng.axhline(housing.SalePrice.median(), ls='--',color='red')\nloc, labels = plt.xticks()\ng.text(2,250000, \"red dash line = median of SalePrice\",color='red')\ng.set_xticklabels(labels, rotation=45);","bb39b091":"def newVar(ele):\n    if ele == 'StoneBr' or ele == 'NridgHt' or ele == 'NoRidge':\n        return 2\n    elif ele == 'MeadowV' or ele == 'IDOTRR' or ele =='BrDale':\n        return 0\n    else:\n        return 1","6944d9d9":"housing['NeighRich'] = housing['Neighborhood'].apply(newVar)","e67975c1":"housing['NeighRich'].value_counts()","a3f1543d":"housing['SalePrice'].corr(housing['NeighRich'])","80c277dd":"housing['TotalSqFeet'] = housing.GrLivArea + housing.TotalBsmtSF","9aef5b74":"housing['SalePrice'].corr(housing['TotalSqFeet'])","1289a355":"TosqSalePrice = housing[['TotalSqFeet','SalePrice']].dropna()\ng = sns.regplot(x='TotalSqFeet',y='SalePrice',data=TosqSalePrice,ci=None)\nindexes = outliers_index(TosqSalePrice,'TotalSqFeet')\n\nfor index in indexes:\n     g.text(TosqSalePrice.TotalSqFeet[index], TosqSalePrice.SalePrice[index], index,\n             horizontalalignment='left', size='small', color='black', weight='semibold')\nprint('\\n\\nNumbers on plot indicate GrLivArea outlier indexes in housing dataframe')","9d7ae24e":"housing[(housing.index != 523) & (housing.index != 1298)][['SalePrice','TotalSqFeet']].corr()","940e8f41":"dropVars = ['YearRemodAdd', 'GarageYrBlt','GarageArea', 'GarageCond', 'TotalBsmtSF','TotRmsAbvGrd', 'BsmtFinSF1']","ea185f35":"housing.drop(dropVars,axis=1,inplace=True)","ade81008":"housing.drop(index=[1298,523],inplace=True)","2b66d772":"dummy_housing = pd.get_dummies(housing,drop_first=True)","9297bbc5":"train = dummy_housing.iloc[:1458,:]","64c7c5b9":"test = dummy_housing.iloc[1458:,:]","94a14e30":"X = train.drop('SalePrice',axis=1)","8f2de46c":"y = train['SalePrice']","72e65452":"X_t = test.drop('SalePrice',axis=1)","11c7a935":"scaler = StandardScaler()\n_x = scaler.fit(X)","32d42ab3":"X_scaled = pd.DataFrame(_x.transform(X),columns=X.columns)","025ae475":"X_train,X_test,y_train,y_test = train_test_split(X_scaled,y,test_size=0.3,random_state=98)","06e1b889":"lascv = LassoCV(cv=5)","3a7d99c2":"lascv.fit(X_train,y_train)","c22dea12":"lascv.alpha_","73347984":"lascv.score(X_train,y_train)","0d6f5112":"lascv.score(X_test,y_test)","65f6b752":"lasso = Lasso(alpha=503)\nscore = cross_val_score(lasso,X_train,y_train,cv=14).mean()","80fef76f":"score","a73dd3b4":"score = cross_val_score(lasso,X_test,y_test,cv=14).mean()","f2d92190":"score","e68e6cbd":"lasso.fit(X_train,y_train)","29bd828a":"lasso.score(X_train,y_train)","5de095e3":"lasso.score(X_test,y_test)","c4c4cff7":"scaled_instances = _x.transform(X_t)","2d17ba2b":"pred = lasso.predict(scaled_instances)","006aab41":"pred","bbef1d4b":"test_ids","53b5b237":"submission = pd.DataFrame({'Id':test_ids, 'SalePrice':pred})","92ae3f8a":"submission.head()","b61c4839":"submission.shape","2a6bfba6":"submission.to_csv('submission.csv',index=False)","51ea8eb2":"\n\npred_vars = [v for v in X_train if v != 'SalePrice']\ntarget_var = 'SalePrice'\n\n# X = X_train\n# y = y_train\n\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=101,max_features=6)\nmodel.fit(X_train, y_train)","c3d3f81f":"model.score(X_train,y_train)","28d966a8":"model.score(X_test,y_test)","9ff9469a":"scaled_instances1 = _x.transform(X_t)","09fe43a1":"y_pred = model.predict(scaled_instances1)","d7c3e029":"submx = pd.DataFrame({'Id':test_ids, 'SalePrice':y_pred})","3c85bc5b":"submx.head()","28e37ac3":"submx.to_csv('submx.csv',index=False)","6fe9a4c6":"we will replace NAs with None. Also the values are ordinal, so we can use the Qualities dict that we have already created for the Pool Quality.","d3d11329":"BsmtExposure: A variable than can be made ordinal.","09dde25c":"looks PoolArea has no affect on PoolQC","ec385fb8":"It is also clear that we can label encode this variable as the values are ordinal.<br>As there a multiple variables that use the same quality levels, we're going to create a dictionary that we can reuse later.","ad2f715a":"GarageQual:The values are ordinal and we can use our quality dict","87468bc1":"###### Foundation","7d2a34fd":"Can't be None. find the second mode","059a75b0":"Checking the related variable if there is bad data","51211777":"Checking the related variable if there is bad data","2184c546":"The positive correlation is certainly there indeed, and seems to be a slightly upward curve. Regarding outliers, We do not see any extreme values. If there is a candidate to take out as an outlier later on, it seems to be the expensive house with grade 4.","816d3dd2":"###### RoofMatl","8b110570":"<hr>\n6th variables<br>","87a6d940":"Adding `House Age`, `Remodeled (Yes\/No)`, and `IsNew` variables","53fc0661":"###### Total number of Bathrooms","35278636":"GarageType :  The values do not seem ordinal, so I will convert into a category.","c80711f0":"<hr>\n2nd variable","e4e6b815":"<hr>\n<hr>\n<hr>","5dabdb59":"<hr>\n16th varible <br>\nSaleType","c68435ec":"First of all, we're dropping a variable if two variables are highly correlated. To find these correlated pairs. For instance: GarageCars and GarageArea have a correlation of 0.89. Of those two, we're dropping the variable with the lowest correlation with SalePrice (which is GarageArea with a SalePrice correlation of 0.62. GarageCars has a SalePrice correlation of 0.64).","ee5c0939":"GarageCond: The values are ordinal and we can use our quality dict","8ba57545":"###### BldgType","9340fd20":"#### Binning Neighborhood","4633c9f9":"###### Overall Quality","6d08b11b":"Now the 5 variables have 79 houses with `no basement`,we are going to fill the missing values and catogory\/hot encode them below.","1c906616":"No NAs. Can be made ordinal using the qualities dict.","de3120b1":"###### As expected, the graph shows a negative correlation with Age (old house are worth less).","dd70f563":"###### Neighborhood","4d1673b1":"making the variable ordinal using the qualities dict","6a96261a":"###### Removing outliers","e0faea23":"<hr>","b8d92501":"fill 2 NAs with the mode ","1d975f65":"we will fill MasVnrArea missing values with 0s","1ef5d0f6":"## Preparing data for modeling","65965ce5":"we will replace the NAs in GarageYrBlt with house built year","54f7ed39":"The 157 NAs within GarageType all turn out to be NA in GarageCondition, GarageQuality, and GarageFinish as well. The differences are found in houses 2126 and 2576. As you can see, house 2126 actually does seem to have a Garage and house 2576 does not. Therefore, there should be 158 houses without a Garage. To fix house 2126, I will imputate the most common values (modes) for GarageCond, GarageQual, and GarageFinish.","3a689934":"going to replace 0s in PoolQC based on OverallQual","24b21b4b":"###### Street","244c380a":"We will fill NAs with None. Also as the values are not ordinal, we will convert Fence into a categorical type","a23c6d97":"We are going to take the median LotFrontage per neigborhood and fill the NAs with it.","23625b01":"find the one that should have a MasVnrType","8ce0752d":"<hr>\n7th variables<br>\nGarage related variables","673f8a3f":"<hr>\nLotConfig","a20062b0":"<hr>\n<hr>\n<hr>","e8611c7c":"1 NA will replace by the mode. convert the type to category.","4ae8c046":"1 Na. Values are categorical.<br>\nwill fill the one Na with mode and convert the type to category","ca15716a":"here we will fill with mode and convert the type to cateogry","9d6153d4":"<hr>\n13th varible <br>\nFunctional","66fab2f6":"###### Condition2","4b330cf1":"IsNew","0aa9d5ec":"<hr>\n10th varible <br>\nMSZoning","edb9b88d":"Now, we will fix the missing values","1eeaab4e":"2 NAs . Can be made ordinal ","2f9721e6":"Find the additional NAs; BsmtFinType1 is the one with 79 NAs","2ba0391e":"<hr>\n12th varible <br>\nUtilities","c7f3705c":"###### Year and Month Sold","2cf1c5fb":"###### Label encoding\/categorization the remaining object variables","c5cd624a":"looks  good","a88d511c":"GarageFinish:The values are ordinal.","7e26dfaa":"it should be obvious that those remaining NAs all refer to \u2018not present\u2019. Below, we're fixing those remaining variables.","7e192c03":"<hr>\n3rd variable","743ee224":"<hr>\n14th varibles <br>\nexterior variables","a7e4e053":"No NAs. Can be made ordinal using the qualities dict.","ba23b6cf":"# Problem Statement ","0c7d01bf":"dealing with other basement variables that have 1 or 2 NAs.","82e738fb":"from sklearn.linear_model import LinearRegression,Lasso,LassoCV,Ridge,RidgeCV,ElasticNet,ElasticNetCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\nsns.set(rc={'figure.figsize':(15,8)},style='whitegrid')","2c3c207d":"there are 24 types missing while 23 area are not recoreded. If a house has a veneer area, it should also have a masonry veneer type. Let\u2019s fix this.","7770f1b1":"###### The most important numeric predictors","6b9b9471":"###### HouseStyle","b7f2c0d2":"###### Above Grade (Ground) Living Area (square feet)","e5518cb4":"<hr>","6303fb6d":"<hr>\n15th varible <br>\nElectrical","66b6190e":"Now, the 4 variables related to garage all have the same set of 158 NAs, which correspond to `No Garage`.","f633e7ba":"###### CentralAir","36efe5d0":"convert it to category type","bc7a17df":"BsmtFinType1: A variable than can be made ordinal.","f6733e85":"The real outliers are the one with big living areas and low SalePrices which located at `523` & `1298` index","6b581eb0":"###### Dropping highly correlated variables","0896d36b":" <hr>","eed0a7ea":"When looking at the frequencies, the variable seems irrelevant to me. Having a shed probably means \u2018no Garage\u2019, which would explain the lower sales price for Shed. Also, while it makes a lot of sense that a house with a Tennis court is expensive, there is only one house with a tennis court in the training set.","2ed0402e":"now only 23 houses that have no masonry.<br>\nWill check the ordinality below in MasVnrType. and fill missing values with none\n\n","3d661658":"<hr>\nGarageType has less missing values!<br>\nFind the 2 additional NAs in other variables","0b29c9f1":"Below we're checking the correlations again. As you can see, the number of variables with a correlation of at least 0.5 with the SalePrice has increased from 10 to 16.","1620ba68":"BsmtCond: : A variable than can be made ordinal with the qualities dict.","a972d276":"So, it is obvious that I need to just assign \u2018No Pool\u2019 to the NAs. Also, the high number of NAs makes sense as normally only a a few houses have a pool.<br>","79e38056":"our goal was to pridect the prices for House Prices dataset and we tryed to use diffrent models to see which model can preduce a better prediction, and we found that random forest model will give us a score of 0.162, which is the best score we got.","099b4e46":"As expected, the correlation with SalePrice is very strong.","f79fccd8":"###### create dummy variables and scale","fd02555a":"<hr>\n5th variable","3853206b":"###### At this point, all variables are complete (No NAs), and all object variables are converted into either numeric labels or into category<br>\nHowever, there are 3 variables that are recorded numeric but should actually be categorical.<br>\n- YrSold\n- MoSold\n- MSSubClass","08d4cf68":"check what if they dont present","81297548":"###### Heating","8fddccf0":"The numeric variable with the second highest correlation with SalesPrice is the Above Grade Living Area. This make a lot of sense; big houses are generally more expensive.","2d05e83e":"going to impute the modes to fix those 9 houses.","83a02a29":"we will not take them out yet, as taking outliers can be dangerous. For instance, a low score on the Overall Quality could explain a low price. However, as you can see above, these two houses actually also score maximum points on Overall Quality. Therefore, we will keep houses 1298 and 523 in mind as prime candidates to take out as outliers.","2d548129":"The two potential outliers seem to \u2018outlie\u2019 even more than before. By taking out these two outliers, the correlation increases to 0.829 .","787323ae":"The data given is about `House Prices` and the mission is, to predict the prices \n\nIn this project we want to have a better understanding for the housing features.\n\nWe have two datasets, which are train dataset and test dataset.\n\nData Sources:\n[Train & Test](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data)","de741896":"###### MSSubClass","6bd17957":"###### HeatingQC","d747db8e":"here we will fill with mode. Can be made ordinal with the qualities dict.","8cc37af2":"1 NA will replace by the mode. convert the type to category.","7f860b42":"<hr>","f77ce044":"#### Correlations again","412ee30e":"###### RoofStyle","899998fa":"###  Feature engineering\n","e6ecbf02":"Values look ordinal","9eef55df":"### Team Members \n\n1. Abdullah Alhawkash \n2. Nawaf Alowaydan \n3. Omar Alharbi\n\n","034e989a":"<hr>","5ccdec1b":"Overall Quality has the highest correlation with SalePrice among the numeric variables (0.79). It rates the overall material and finish of the house on a scale from 1 (very poor) to 10 (very excellent).","b22cf21e":"1 Na. Values are categorical.<br>\nwill fill the one Na with mode and convert the type to category","e66ca20f":"<hr>\n4th variable","7feb6fc4":"LotShape","83337421":"###### PavedDrive","a6db6371":"As you can see, the sale prices are right skewed. This was expected as few people can afford very expensive houses.","7415026d":"\n###### Missing data, label encoding, and categorization variables","5d07b032":"###### Total Square Feet","3496625f":"LotFrontage","2c1cfc3d":"since there is only one value with `NoSeWa` in the dataset and the others are `AllPub`. and if we fill the NAs with mode(AllPub). it wont make differences in the model later on. So we will drop this column.","39e49bc1":"###### Condition1","ea8d9fce":"There are 4 bathroom variables. Individually, these variables are not very important. However, we assume that if we add them up into one predictor, this predictor is likely to become a strong one.","cb9bcc29":"We will fill NAs with None. Also as the values are not ordinal, we will convert Alley into a categorical type","72d76867":"Both the median and mean Saleprices agree on 3 neighborhoods with substantially higher saleprices. The separation of the 3 relatively poor neighborhoods is less clear, but at least both graphs agree on the same 3 poor neighborhoods. Since I do not want to \u2018overbin\u2019, I am only creating categories for those \u2018extremes\u2019.","3cb71b55":"While oridinality within YearBuilt (or remodeled) makes sense (old houses are worth less), we are talking about only 5 years of sales. These years also include an economic crisis. For instance: Sale Prices in 2009 (after the collapse) are very likely to be much lower than in 2007. I wil convert YrSold into a cateogry before modeling, but as I need the numeric version of YrSold to create an Age variable, I am not doing that yet.\n\nMonth Sold is also an Integer variable. However, December is not \u201cbetter\u201d than January. Therefore, I will convert MoSold values back into factors.","33717dd0":"<hr>\n9th varibles<br>\nmasonry","c958c226":"As the total living space generally is very important when people buy houses, I am adding a predictors that adds up the living space above and below ground.","c6e800fd":"We will fill NAs with None. Also as the values are not ordinal, we will convert MiscFeature into a categorical type","d7c62398":"###### LandSlope","faf65252":"\n**After scanning the description we can tell most of the missing data are not actually missing, NULL values in the dataset mean `item not existed` example : no garage**\n- so we're going to check every variable that has missing values and try fix them.Also we will try to convert object variables into ordinal integers if there is clear ordinality, or into category if levels are categories without ordinality. we will convert these categories into numeric later on by using one-hot encoding.<br>\n<hr>\nwe will start from a variable that has the highest missing values\n\n1st variable\n \n","382ac669":"<hr>\n11th varible <br>\nKitchenQual","e30e3d36":"BsmtFinType2:  A variable than can be made ordinal with Basementfintype dict ","3729045b":"We have now finally reached the point where all object variables have been converted into categorical or have been label encoded into numbers. In addition, 2 numeric variables have been converted into categorical, and we deleted one variable (Utilities). As you can see , the number of numerical variables is now 56 (including the target variable), and the remaining 23 variables are categorical.","2b55cea7":"houses that are remodeled are worth less.","5757e787":"check if all 79 NAs are the same observations among the variables with 80+ NAs","75cd72fa":"<hr><br>\n8th variables<br>\nBasement related variables","d6648911":"<hr>","73eb2f88":"###### LandContour","ca47aafe":"# Conclusion","cd90b8af":"BsmtQual : A variable than can be made ordinal with the qualities dict."}}