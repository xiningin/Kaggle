{"cell_type":{"062da254":"code","d08c3452":"code","d25b3177":"code","0696e94b":"code","53e31e28":"code","cf0be538":"code","74646286":"code","1d2f4fd4":"code","02cdcae2":"code","e00e3d6e":"code","620174be":"code","209002fd":"code","35421845":"markdown","4c73ca7f":"markdown"},"source":{"062da254":"import pandas as pd\nimport numpy as np\nimport math","d08c3452":"transaction_df = pd.read_csv('..\/input\/supermarket\/GroceryStoreDataSet.csv')\ntransaction_df","d25b3177":"transaction_df.index.rename('TID', inplace=True)\ntransaction_df.rename(columns={'MILK,BREAD,BISCUIT' : 'item_list'}, inplace=True)","0696e94b":"trans_df = transaction_df.item_list.str.split(',')\ntrans_df","53e31e28":"def prune(data,supp):\n    \n    df = data[data.supp_count >= supp] \n    return df\n    \ndef count_itemset(transaction_df, itemsets):\n    \n    count_item = {}\n    for item_set in itemsets:\n        set_A = set(item_set)\n        for row in trans_df:\n            set_B = set(row)\n        \n            if set_B.intersection(set_A) == set_A: \n                if item_set in count_item.keys():\n                    count_item[item_set] += 1\n                \n                else:\n                    count_item[item_set] = 1\n                \n    data = pd.DataFrame()\n    data['item_sets'] = count_item.keys()\n    data['supp_count'] = count_item.values()\n    \n    return data\n\ndef count_item(trans_items):\n    \n    count_ind_item = {}\n    for row in trans_items:\n        for i in range(len(row)):\n            if row[i] in count_ind_item.keys():\n                count_ind_item[row[i]] += 1\n            else:\n                count_ind_item[row[i]] = 1\n    \n    data = pd.DataFrame()\n    data['item_sets'] = count_ind_item.keys()\n    data['supp_count'] = count_ind_item.values()\n    data = data.sort_values('item_sets')\n    return data\n\n\ndef join(list_of_items):\n    itemsets = []\n    i = 1\n    for entry in list_of_items:\n        proceding_items = list_of_items[i:]\n        for item in proceding_items:\n            if(type(item) is str):\n                if entry != item:\n                    tuples = (entry, item)\n                    itemsets.append(tuples)\n            else:\n                if entry[0:-1] == item[0:-1]:\n                    tuples = entry+item[1:]\n                    itemsets.append(tuples)\n        i = i+1\n    if(len(itemsets) == 0):\n        return None\n    return itemsets\n","cf0be538":"\ndef apriori(trans_data,supp=3, con=0.5):\n    freq = pd.DataFrame()\n    \n    df = count_item(trans_data)\n   \n    while(len(df) != 0):\n        \n        df = prune(df, supp)\n    \n        if len(df) > 1 or (len(df) == 1 and int(df.supp_count >= supp)):\n            freq = df\n        \n        itemsets = join(df.item_sets)\n    \n        if(itemsets is None):\n            return freq\n    \n        df = count_itemset(trans_data, itemsets)\n    return df","74646286":"freq_item_sets = apriori(trans_df, 4)\nfreq_item_sets","1d2f4fd4":"def calculate_conf(value1, value2):\n    return round(int(value1)\/int(value2) * 100, 2)","02cdcae2":"def strong_rules(freq_item_sets, threshold):\n\n    confidences = {}\n    for row in freq_item_sets.item_sets:\n        for i in range(len(row)):\n            for j in range(len(row)):\n                 if i != j:\n                    tuples = (row[i], row[j])\n                    conf = calculate_conf(freq_item_sets[freq_item_sets.item_sets == row].supp_count, count_item(trans_df)[count_item(trans_df).item_sets == row[i]].supp_count)\n                    confidences[tuples] = conf\n\n        \n    conf_df = pd.DataFrame()\n    conf_df['item_set'] = confidences.keys()\n    conf_df['confidence'] = confidences.values()\n\n    return conf_df[conf_df.confidence >= threshold]\n\n    ","e00e3d6e":"strong_rules(freq_item_sets, 50.0)","620174be":"from functools import reduce # Valid in Python 2.6+, required in Python 3\nimport operator\n\ndef interesting_rules(freq_item_sets):\n    \n    lifts = {}\n    prob_of_items = []\n  \n    for row in freq_item_sets.item_sets:\n        num_of_items = len(row)\n        \n        prob_all = freq_item_sets[freq_item_sets.item_sets == row].supp_count \/ 18\n        for i in range(num_of_items):\n            prob_of_items.append(count_item(trans_df)[count_item(trans_df).item_sets == row[i]].supp_count \/ 18)\n        \n        lifts[row] = round(float(prob_all \/ reduce(operator.mul, (np.array(prob_of_items)), 1)), 2)\n        \n        prob_of_items = []\n        \n    \n    lifts_df = pd.DataFrame()\n    lifts_df['Rules'] = lifts.keys()\n    lifts_df['lift'] = lifts.values()\n    \n    return lifts_df\n    ","209002fd":"int_rules = interesting_rules(freq_item_sets)\nint_rules","35421845":"##### Rules with confidence level >= 50.0%","4c73ca7f":"##### (BREAD, TEA) is the most selling combination of items where if a person buys TEA then he\/she will most likely to buy BREAD with it"}}