{"cell_type":{"51929093":"code","136352eb":"code","e46eb4f7":"code","4c99709a":"code","7bec05c9":"code","bffc07dd":"code","f48bccca":"code","e6b959ac":"code","16b1c46a":"code","8f8809c5":"code","9834f6e2":"code","f0864157":"code","0210e4be":"code","3545f83d":"code","bb916ace":"markdown","431dc847":"markdown","3c12f0c8":"markdown","d7317d75":"markdown","cb838497":"markdown"},"source":{"51929093":"# Let's download the necessary libraries and read our data.\nimport pandas as pd\nimport math\nimport scipy.stats as st\nfrom sklearn.preprocessing import MinMaxScaler\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.width', 500)\npd.set_option('display.expand_frame_repr', False)\npd.set_option('display.float_format', lambda x: '%.5f' % x)\ndf=pd.read_csv('..\/input\/amazon-review\/amazon_review.csv')\ndf.head()","136352eb":"###################################################\n# MISSION 1: Calculate Average rating based on current reviews and compare with \n# existing average rating..\n###################################################\n\n# In the shared data set, users gave points and comments to a product.\n# Our aim in this mission is to evaluate the given points by weighting them by date.\n# It is necessary to compare the first average score with the weighted score according to the date to be obtained.","e46eb4f7":"# We calculate the product rating numbers.\ndf[\"overall\"].value_counts()","4c99709a":"# We take the average of the product ratings.\ndf[\"overall\"].mean()","7bec05c9":"# We will now calculate the weighted average score by date. In other words, the most recent \n# comments will have a higher impact on the rating, and the last comments will have less impact.","bffc07dd":"# Getting the quarter values of the day_diff variable:\na = df[\"day_diff\"].quantile(0.25)\na","f48bccca":"b = df[\"day_diff\"].quantile(0.50)\nb","e6b959ac":"c = df[\"day_diff\"].quantile(0.75)\nc","16b1c46a":"df[\"day_diff\"].describe().T","8f8809c5":"# Calculating the weighted score based on a,b,c values:\ndf.loc[df[\"day_diff\"] <= a, \"overall\"].mean() * 30 \/ 100 + \\\ndf.loc[(df[\"day_diff\"] > a) & (df[\"day_diff\"] <= b), \"overall\"].mean() * 26 \/ 100 + \\\ndf.loc[(df[\"day_diff\"] > b) & (df[\"day_diff\"] <= c), \"overall\"].mean() * 24 \/ 100 + \\\ndf.loc[(df[\"day_diff\"] > c), \"overall\"].mean() * 20 \/ 100\n","9834f6e2":"#################################################################################\n# MISSION 2: Specify 20 useful reviews for the product to be \n# displayed on the product detail page.\n#################################################################################\n# For this, we use the wilson lower bound method.\n# What are the required up and down values?\n\n# . Helpful_yes: toplam like (up)\n# . total_vote: like+dislike. \n# . helpful_no: total vote - helpful_yes(down) \n\n\ndef wilson_lower_bound(up, down, confidence=0.95):\n    \"\"\"\n    Calculate Wilson Lower Bound Score\n\n   - The lower limit of the confidence interval to be calculated for the Bernoulli parameter\n   p is accepted as the WLB score.\n     - The score to be calculated is used for product ranking.\n\n    Parameters\n    ----------\n    up: int\n        up count\n    down: int\n        down count\n    confidence: float\n        confidence\n\n    Returns\n    -------\n    wilson score: float\n\n    \"\"\"\n    n = up + down\n    if n == 0:\n        return 0\n    z = st.norm.ppf(1 - (1 - confidence) \/ 2)\n    phat = 1.0 * up \/ n\n    return (phat + z * z \/ (2 * n) - z * math.sqrt((phat * (1 - phat) + z * z \/ (4 * n)) \/ n)) \/ (1 + z * z \/ n)\n\n\n\n\n","f0864157":" df[\"wilson_lower_bound\"] = df.apply(lambda x: wilson_lower_bound(x[\"helpful_yes\"], x[\"total_vote\"]-x['helpful_yes']),axis=1)","0210e4be":"df.head()","3545f83d":"# Now let's sort the wilson lower bound results from largest to smallest \n# to bring you the 20 most helpful comments. \ndf=df.sort_values('wilson_lower_bound', ascending=False)\ndf['reviewText'].head(20)","bb916ace":"#  *Variables:*\n  **reviewerID** - User ID Ex: A2SUAM1J3GNN3B\n \n**asin** - Product ID: 0000013714\n\n  **reviewerName** - Username\n \n  **helpful** - number of likes \/ dislikes for comments\n \n  **reviewText** - Comment\n \n  **overall** - product rating\n \n  **summary** - review summary\n \n  **unixReviewTime** - evaluation time (Unix time)\n \n  **reviewTime** - review time (raw)\n \n  **day_diff:** Number of days since evaluation\n \n  **helpful_yes** \u2013 number of likes on comments\n \n  **total_vote** \u2013 number of likes + number of dislikes for comments\n ","431dc847":"# BUSINESS PROBLEM\n\n**Trying to calculate product ratings more accurately and ordering product reviews more accurately.**","3c12f0c8":"# COMMENT\n***The average of overall was 4.58. We calculated the overall according to the current comments. As a result, our overall value increased and became 4.60. so we can say that the customers who bought this product recently are more satisfied with the product.***","d7317d75":"# ***Rating Product & Sorting Reviews in Amazon***\n\n![](https:\/\/www.jumpfly.com\/wp-content\/uploads\/2019\/12\/20200108-Feedback-vs-Reviews-400-1.jpg)\n","cb838497":"# **Dataset Story:**\n\n**Containing the data of the most commented product in the Amazon Electronics category, this dataset includes product categories and various metadata.**\n"}}