{"cell_type":{"e717d136":"code","538ea58c":"code","1b155dcf":"code","336d00f7":"code","304c66f4":"code","7e5db96a":"code","9a436150":"code","1cb1bec4":"code","fb109134":"code","b4b65c27":"code","dca837f5":"code","43500548":"code","6623a5cf":"code","07090e1d":"code","987c9525":"code","48821106":"code","8895a1f8":"code","b964f793":"markdown","7adc3b3e":"markdown","bac0d3d2":"markdown","a4029654":"markdown","cd689274":"markdown"},"source":{"e717d136":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","538ea58c":"#Defining data frame\ncdf = pd.read_csv('\/kaggle\/input\/corona-virus-test-numbers-in-turkey\/turkey_covid19_all.csv')\ncdf.head(20) #Giving us first twenty values in data frame","1b155dcf":"cdf.info() #Informations about data frame\n","336d00f7":"cdf.columns # Columns Objects","304c66f4":"f,ax = plt.subplots(figsize=(13,13)) #Maps size\nsns.heatmap(cdf.corr(),annot=True, linewidths=.5 , fmt='.1f',ax=ax) #Correlation map \n\n\n#annot true -> Shows numbers in each box\n#linewidth -> Line widths\n#fmt -> How many value will show after zero","7e5db96a":"#Line\ncdf.Deaths.plot(kind = 'line' ,color = 'purple', label = 'Deaths', linewidth = 1 ,alpha = .5 ,  grid = False , linestyle = '-')\nplt.title('Coronavirus Deaths in Turkey')\nplt.xlabel('Days')\nplt.ylabel('Numbers of Deaths')","9a436150":"#Scatter \nscatter = cdf.plot(kind='scatter' , x = 'Deaths' , y = 'Tests' , alpha = .5 , color = 'brown')\nplt.xlabel('Deaths')\nplt.ylabel('Tests')\nplt.title('Relations Between Deaths and Tests')","1cb1bec4":"#Histogram\n#bins -> number of bars\ncdf.Recovered.plot(kind='hist',bins = 10, figsize = (10,10))\nplt.title('Histogram of Recovered People')\nplt.show()","fb109134":"dic = {'Science Fiction':'Interstellar', 'Comedy': 'Hangover',\n       'Horror':'The Conjuring','Drama':'The Pianist',\n       'Action':'The Fast and Furios','Animation':'Cars'}\nprint(dic.keys())\nprint(dic.values())\n","b4b65c27":"dic['Drama']='The Green Mile' #Changing drama's value\n\ndic['Western']='The Revenant' #Adding a new key and value\n\ndel dic['Comedy'] #Deleting Comedy in dictionary\nprint(dic)\nprint('Horror' in dic) #Checking wheather horror in dictionary or not\ndic.clear() #Clear everything in the dictionary\nprint(dic)","dca837f5":"#Comparison Operators\nprint(10 < 5)\nprint(1==1)\nprint(5 != 2)\nprint( 0> 1)\n# Boolean operators\nprint(False & True)\nprint(True or False)","43500548":"cdf = pd.read_csv('\/kaggle\/input\/corona-virus-test-numbers-in-turkey\/turkey_covid19_all.csv')","6623a5cf":"#Filtering Pandas Data Frame\nfilter_cdf = cdf['Deaths'] > 100\nprint(filter_cdf)\ncdf[filter_cdf]","07090e1d":"#Using logical_and for cdf(Coronavirus Data Frame)\ncdf[np.logical_and(cdf['Deaths']>100, cdf['Recovered']<100)]","987c9525":"#Alternative way for filtering data frame\ncdf[(cdf['Deaths']>100) & (cdf['Recovered']<100)]\n","48821106":"#Counting the numbers between -5 and 10 (-5 and 10 included)\n\na = -5\nwhile a <= 10:\n    print('a is:',a)\n    a +=1","8895a1f8":"list= [4,5,3,2,1,5,6,9]\nfor b in list:\n    print('b is:',b)\nprint('')\n\n#Enumerate index and value of list\n#index : value = 0:4 , 1:5 , 2:3 , 3:2 , 4:1 , 5:5 , 6:6 , 7:9\nfor index, value in enumerate(list):\n    print(index,':',value)\nprint('')\n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndic = {'Science Fiction':'Interstellar', 'Comedy': 'Hangover',\n       'Horror':'The Conjuring','Drama':'The Pianist',\n       'Action':'The Fast and Furios','Animation':'Cars'}\nfor key,value in dic.items():\n    print(key,':',value)\nprint('')\n\n    ","b964f793":"**D\u0130CT\u0130ONARY**","7adc3b3e":"As we can see in the correlation map;\n* Between 'Deaths' and 'Confirmed Cases' Perfect Positive Linear Correlation (1.0)\n* Between 'Tests' and 'Recovered Cases' High Positive Linear Correlation (0.9)\n* Between 'Confirmed' and 'Recovered Cases' Perfect Positive Linear Correlation (1.0)\n* Between 'Latitude' and 'Longitude' Perfect Positive Linear Correlation (1.0)\n* Between 'Confirmed'and 'Tests' High Positive Linear Correlation (0.9)\n* Between 'Deaths'and 'Recovered Cases' Perfect Positive Linear Correlation (1.0)\n* Between 'Deaths' and 'Tests' High Positive Linear Correlation (0.9)\n\nNo Correlation;\n* 'Latitude'-'Tests'\n* 'Latitude' - 'Deaths'\n* 'Latitude' - 'Recovered'\n* 'Latitude' - 'Confirmed'\n\n* 'Longitude'-'Tests'\n* 'Longitude - 'Deaths'\n* 'Longitude - 'Recovered'\n* 'Longitude - 'Confirmed'\n\n","bac0d3d2":"# For Loop","a4029654":"# While Loop","cd689274":"# PANDAS"}}