{"cell_type":{"b2b4db91":"code","2c8e6eb0":"code","131be35e":"code","950ae262":"code","f891a295":"code","83a97e84":"code","ed6583ef":"code","2161566c":"code","49fdb5e3":"code","a09abd6c":"code","2ba9f6b2":"code","2044da5e":"code","4ef53503":"code","c92e47cf":"code","31c05fa5":"code","6e4a638e":"markdown","b55956a5":"markdown","48b14fa0":"markdown","1772c451":"markdown","48be72ff":"markdown","222a577f":"markdown","c86dcfff":"markdown"},"source":{"b2b4db91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c8e6eb0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\naudi = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\naudi.head()","131be35e":"audi.info()","950ae262":"audi.describe()","f891a295":"fig = plt.figure(figsize=(20,20))\nsns.violinplot(x='model',y='price',data=audi,scale='width')","83a97e84":"audi_one = pd.get_dummies(audi,columns=['model', 'transmission','fuelType'])","ed6583ef":"audi_one.head()","2161566c":"audi_one.corrwith(audi_one['price'])","49fdb5e3":"audi_nofueltype = audi_one.drop(['fuelType_Diesel','fuelType_Hybrid','fuelType_Petrol'], axis=1)","a09abd6c":"from sklearn.model_selection import train_test_split\nX = audi_nofueltype.drop(['price'],axis=1)\ny = audi_nofueltype['price']\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=2)","2ba9f6b2":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)\nlr.score(X_test,y_test)","2044da5e":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor(max_depth=2,criterion='mse')\ngbr.fit(X_train,y_train)\ngbr.score(X_test,y_test)","4ef53503":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor()\ndtr.fit(X_train,y_train)\ndtr.score(X_test,y_test)","c92e47cf":"results = X_test.copy()\nresults['predicted_lr'] = lr.predict(X_test)\nresults['predicted_gbr'] = gbr.predict(X_test)\nresults['predicted_dtr'] = dtr.predict(X_test)\nresults['Real']= y_test\nresults = results[['predicted_lr', 'predicted_gbr', 'predicted_dtr', 'Real']]\nresults","31c05fa5":"sns.pairplot(results,x_vars=['predicted_lr', 'predicted_gbr','predicted_dtr'],y_vars=['Real'],kind='reg',height=7,aspect=1)","6e4a638e":"Seems like the best model for this set DecisionTreeRegressor. The graph above shows that Tree model fits the best with the actual price of Audi cars.","b55956a5":"Finding correlation between features and the target column.","48b14fa0":"# Predicting prices on Audi cars","1772c451":"Getting categories for object columns.","48be72ff":"# Predictions","222a577f":"# Visualizing some metrics","c86dcfff":"Looking for the best regression model to find the best score in order to predict prices."}}