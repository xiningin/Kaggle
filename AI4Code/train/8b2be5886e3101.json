{"cell_type":{"1b8275aa":"code","c4a3fc35":"code","2c46b5dc":"code","0d9999ed":"code","25caee9f":"code","d7df5ef2":"code","3b30d7a9":"code","38889218":"code","f2dcea33":"code","137c929c":"code","6d529458":"code","20c7d6b2":"code","f0a3de5a":"code","1bd71801":"code","938080ee":"code","a2daf9b8":"code","5cbee043":"code","461a7ff0":"code","16a83c42":"code","d769477d":"code","30927284":"code","cb939600":"code","eb15c797":"code","0ad16364":"code","5acae7bd":"code","215cd2b5":"code","5edbb898":"code","7254f6e5":"code","713c760e":"code","a3528a6c":"code","3e4095b2":"code","759dcf01":"code","25ca4af1":"code","a273fc0b":"code","ab591d76":"code","74b87724":"code","1ab97f13":"code","2cc6dc28":"code","1b548453":"code","2f6b7fcc":"code","28feb8db":"code","bf4e256c":"code","c6be0f84":"code","2e3f5d85":"code","04b6801f":"code","a4459d4c":"code","108cd396":"code","f8042840":"code","d0919ac7":"code","0695db86":"code","ea3a70e3":"code","9b824448":"code","6135a331":"code","81c9d742":"code","7fa641f3":"code","26d85729":"code","f464501b":"code","53aee832":"markdown","f6a8716d":"markdown","955ceb31":"markdown","4b8ab54f":"markdown","ba4980e1":"markdown","682c1949":"markdown","c84d3e98":"markdown","4bdf6806":"markdown","355da348":"markdown"},"source":{"1b8275aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #for visualizations\nimport seaborn as sns #for interactive visualizations\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c4a3fc35":"#importing datasets\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest  = pd.read_csv(\"..\/input\/test.csv\")\ntotaldata = [train, test]","2c46b5dc":"#check both train and test datasets\ntrain.head()\n","0d9999ed":"test.head()","25caee9f":"train.tail()","d7df5ef2":"test.tail()","3b30d7a9":"#finding columns in train data set\ntrain.columns","38889218":"#the above code gives you in Index form\n#this gives you in an array form\ntrain.columns.values","f2dcea33":"train.columns[0]","137c929c":"train.columns.values[0]","6d529458":"#finding the shape(no.of.rows, no.of.columns) in train\ntrain.shape","20c7d6b2":"#finding the shape(no.of.rows, no.of. columns) in test\ntest.shape","f0a3de5a":"train.info()","1bd71801":"test.info()","938080ee":"train.describe()","a2daf9b8":"#again checking missing values using isna() or isnull() method which most of the people do\ntrain.isna().sum\n#using this code snippet it only shows boolean values. if the column contains missing values then \n#it shows True, else it shows False.","5cbee043":"train.isna().sum()\n","461a7ff0":"#same code as above but using isnull() method\ntrain.isnull().sum()","16a83c42":"#from the above code snippet, its clear that we had missing values in Age, Cabin, Embarked columns.\n#Cabin has 687 missing values, Age has 177 missing values, Embarked has 2 missing values.\n#now try to fill those missing vlues.\n","d769477d":"test.isnull().sum()","30927284":"#lets replace missing values of Embarked column in trian data set\n#trying to find out what and how many are the values present in Embarked column\ntrain.Embarked.value_counts()","cb939600":"#mostly missing values are replaced with Either of Mean,Median,Mode\n#so totally we have 'S' repeated more times which is Mode case.\n#so fill the missing 2 values with most repeated value i.e \"S\"\ntrain[\"Embarked\"]  = train[\"Embarked\"].fillna(\"S\")","eb15c797":"#after filling missing values in Embarked column, verifyinig still we have missing values in \n#Embarked column or not.\ntrain.isna().sum()","0ad16364":"#so now we do not have any missing values in Embarked columns. \n#fill missing value of Age with Median.in both test and train.\ntrain['Age'] = train['Age'].fillna(train['Age'].median())\ntest['Age'] = test['Age'].fillna(test['Age'].median())","5acae7bd":"train.info()","215cd2b5":"test.info()","5edbb898":"#lets fill the 1 missing value in Fare column of test data set\ntest['Fare'] = test[\"Fare\"].fillna(\"0\")","7254f6e5":"test.info()","713c760e":"#As Cabin Column has most data missing ,\n#there wont be any use filling missing values as it would be hard to fill those missing values using\n#using any of the techniques like Mean, Medain and  Mode.we have to delete it. \ntrain = train.drop(\"Cabin\",axis = 1)\ntest = test.drop(\"Cabin\", axis = 1)\ntrain.info()","a3528a6c":"test.info()","3e4095b2":"#now we had another problem, i.e after filling all the missing values, now we have to convert text \n#data to numerical data, because that is what a machine understands at the end of the day.\n#for that we have to use label encoder\n#but before that lets find can we convert all the text values to numerical ones.\ntrain.Ticket.value_counts()","759dcf01":"train['Ticket'].describe()","25ca4af1":"#its clear that we had 681 unique values, so its impossible to encode it. so delete Ticket column\ntrain = train.drop(['Ticket'],axis = 1)\ntrain.info()","a273fc0b":"test['Ticket'].describe()","ab591d76":"test = test.drop(['Ticket'],axis = 1)\ntest.info()","74b87724":"#also there is no use with name, so lets delete it\ntrain = train.drop([\"Name\"], axis = 1)\ntest = test.drop(['Name'], axis =1)\ntrain.info()","1ab97f13":"test.info()","2cc6dc28":"#lets encode remaning 2 text columns to numerical ones\n#lets write function for label encoder\nfrom sklearn.preprocessing import LabelEncoder","1b548453":"def encode_features(dataset,featurenames):\n    for featurename in featurenames:\n        LE = LabelEncoder()\n        LE.fit(dataset[featurename])\n        dataset[featurename] = LE.transform(dataset[featurename])\n    return dataset    \n","2f6b7fcc":"\ntrain = encode_features(train, ['Sex','Embarked'])\ntest = encode_features(test, ['Sex','Embarked'])\n","28feb8db":"train.info()","bf4e256c":"test.info()","c6be0f84":"#lets convert Fare from float to int\ntrain['Fare'] = train['Fare'].astype(int)\ntest[\"Fare\"] = test['Fare'].astype(int)\ntrain.info()","2e3f5d85":"test.info()","04b6801f":"test.head()","a4459d4c":"train = train.drop(['PassengerId'], axis=1)\ntrain.head()","108cd396":"X_train = train.drop(['Survived'], axis = 1)\nY_train = train[\"Survived\"]\nX_test  = test.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","f8042840":"X_train.head()","d0919ac7":"Y_train.head()","0695db86":"X_test.head()","ea3a70e3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier","9b824448":"#Logistic regression\nLR = LogisticRegression()\nLR.fit(X_train, Y_train)\ny_pred_LR = LR.predict(X_test)\nLR.score(X_train,Y_train)*100\n","6135a331":"#Support vector machine \nsvm = SVC()\nsvm.fit(X_train, Y_train)\ny_pred_svm = svm.predict(X_test)\nsvm.score(X_train,Y_train)*100","81c9d742":"#RandomForestClassirier\nrfc = RandomForestClassifier()\nrfc.fit(X_train, Y_train)\ny_pred_rfc = rfc.predict(X_test)\nrfc.score(X_train,Y_train)*100","7fa641f3":"#KNeighborsClassifier\nknc = KNeighborsClassifier()\nknc.fit(X_train, Y_train)\ny_pred_knc = knc.predict(X_test)\nknc.score(X_train,Y_train)*100","26d85729":"#KNeighborsClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, Y_train)\ny_pred_dtc = dtc.predict(X_test)\ndtc.score(X_train,Y_train)*100","f464501b":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred_dtc\n    })\nsubmission.to_csv('submission.csv', index=False)","53aee832":"**ML models**","f6a8716d":"**If you find any mistakes or if you have any suggestions, please comment down. I would like to learn from my mistakes.**","955ceb31":"handling missing values.\n\nfrom the train.info( ) we can say that we had missing values in Age, Cabin , Embarked columns as they have less rows out of 891.\n","4b8ab54f":"As our ML models fastens the processing if our data is in  0,1,2....., in simplie numeric form. so lets change Fare and Age to such format.\nnow we will find the correlation between Age and survival and between Fare and survival.","ba4980e1":"Cabin and age has missing values, out of 12 coulmns 5 are object(text), 5 are int64(numbers) and 2 are float(in decimal points)\nName, Sex, Ticket, Cabin, Embarked are text data type.\nremaining are numericals.\nAge,Cabin  and Embarked has missing values.","682c1949":"**Data preprocessing **","c84d3e98":"**Data visualization**","4bdf6806":"We had 86 misssing values in Age, 327 missing values in Cabin, 1 in Fare","355da348":"so we had missing values in Age,1 value in Fare and some values in Cabin"}}