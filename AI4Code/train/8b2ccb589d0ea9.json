{"cell_type":{"7190bd7c":"code","047ed7ca":"code","c7d10f1d":"code","59a4739f":"code","b6611c56":"code","511793c1":"code","a0d266f0":"code","84a70865":"code","0b85471d":"code","f24d2d43":"markdown","741bd318":"markdown","c66d52f7":"markdown","436aea5e":"markdown","34f76b7c":"markdown","8af7d48d":"markdown","fde669b0":"markdown","1b282c10":"markdown","fc0af3c8":"markdown","ef30950c":"markdown"},"source":{"7190bd7c":"import numpy as np \nimport pandas as pd \npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfig_dims = (20,10)\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adadelta\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom keras.wrappers.scikit_learn import KerasRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","047ed7ca":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ntrain.head(5)","c7d10f1d":"cols = train.columns\ncols = cols.delete([0,80])\nfor i in cols:\n    if np.issubdtype(train[i].dtype,np.number) == True:\n        mean = train[i].mean()\n        std = train[i].std()\n        train[i] = (train[i]-mean)\/std\n        #train[i] = preprocessing.scale(train[i])\ncols2 = test.columns\ncols2 = cols2.delete([0])\nfor i in cols2:\n    if np.issubdtype(test[i].dtype,np.number) == True:\n        mean = test[i].mean()\n        std = test[i].std()\n        test[i] = (test[i]-mean)\/std\n        #test[i] = preprocessing.scale(test[i])\ntrain.head(5)","59a4739f":"#MSZoning\n#sns.barplot(x=train.index,y=train['MSZoning'])\ntrain['MSZoning'] = train[\"MSZoning\"].map({'RL':1,'RM':2,'FV':3,'RH':4,'C (all)':0})\ntest['MSZoning'] = test[\"MSZoning\"].map({'RL':1,'RM':2,'FV':3,'RH':4,'C (all)':0})\n\n#Street\n#sns.barplot(x=train.index,y=train['Street'])\ntrain['Street'] = train[\"Street\"].map({'Pave':1,'Grvl':1})\ntest['Street'] = test[\"Street\"].map({'Pave':1,'Grvl':1})\n\n#Alley\n#sns.barplot(x=train.index,y=train[\"Alley\"])\ntrain['Alley'] = train['Alley'].fillna(0)\ntest['Alley'] = test['Alley'].fillna(0)\ntrain['Alley'] = train['Alley'].map({'Pave':0,'Grvl':1,0:2})\ntest['Alley'] = test['Alley'].map({'Pave':0,'Grvl':1,0:2})\n\n#LotShape\n#sns.barplot(x=train.index,y=train[\"LotShape\"])\ntrain[\"LotShape\"] = train[\"LotShape\"].map({'Reg':0,'IR1':1,'IR2':2,'IR3':3})\ntest[\"LotShape\"] = test[\"LotShape\"].map({'Reg':0,'IR1':1,'IR2':2,'IR3':3})\n\n#LandContour\n#sns.barplot(x=train.index,y=train[\"LandContour\"])\ntrain[\"LandContour\"] = train[\"LandContour\"].map({'Lvl':0,'Bnk':1,'Low':2,'HLS':3})\ntest[\"LandContour\"] = test[\"LandContour\"].map({'Lvl':0,'Bnk':1,'Low':2,'HLS':3})\n\n#Utilities\n#sns.barplot(x=train.index,y=train[\"Utilities\"])\ntrain[\"Utilities\"] = train[\"Utilities\"].map({'AllPub':0,'NoSeWa':1})\ntest[\"Utilities\"] = test[\"Utilities\"].map({'AllPub':0,'NoSeWa':1})\n\n#LotConfig\n#sns.barplot(x=train.index,y=train[\"LotConfig\"])\ntrain['LotConfig'] = train['LotConfig'].map({'Inside':0,'FR2':1,'Corner':2,'CulDSac':3,'FR3':4})\ntest['LotConfig'] = test['LotConfig'].map({'Inside':0,'FR2':1,'Corner':2,'CulDSac':3,'FR3':4})\n\n#LandSlope\n#sns.barplot(x=train.index,y=train['LandSlope'])\ntrain['LandSlope'] = train['LandSlope'].map({'Gtl':0,'Mod':1,'Sev':2})\ntest['LandSlope'] = test['LandSlope'].map({'Gtl':0,'Mod':1,'Sev':2})\n\n#Neighborhood\nuniques = train['Neighborhood'].unique()\ni=0\nfor neigh in uniques:\n    train['Neighborhood'] = train['Neighborhood'].replace({neigh:i})\n    test['Neighborhood'] = test['Neighborhood'].replace({neigh:i})\n    i+=1\n\n#Condition1\/Condition2\n#sns.barplot(x=train.index,y=train['Condition1'])\n#sns.barplot(x=train.index,y=train['Condition2'])\ntrain['Condition1'] = train['Condition1'].map({'Norm':0,'Feedr':1,'PosN':2,'Artery':3,'RRAe':4,'RRNn':5,'RRAn':6,'PosA':7,'RRNe':8})\ntest['Condition1'] = test['Condition1'].map({'Norm':0,'Feedr':1,'PosN':2,'Artery':3,'RRAe':4,'RRNn':5,'RRAn':6,'PosA':7,'RRNe':8})\ntrain['Condition2'] = train['Condition2'].map({'Norm':0,'Feedr':1,'PosN':2,'Artery':3,'RRAe':4,'RRNn':5,'RRAn':6,'PosA':7})\ntest['Condition2'] = test['Condition2'].map({'Norm':0,'Feedr':1,'PosN':2,'Artery':3,'RRAe':4,'RRNn':5,'RRAn':6,'PosA':7})\n\n#BldgType\n#sns.barplot(x=train.index,y=train['BldgType'])\ntrain['BldgType'] = train['BldgType'].map({'1Fam':0,'2fmCon':1,'Duplex':2,'TwnhsE':3,'Twnhs':4})\ntest['BldgType'] = test['BldgType'].map({'1Fam':0,'2fmCon':1,'Duplex':2,'TwnhsE':3,'Twnhs':4})\n\n#HouseStyle\n#sns.barplot(x=train.index,y=train['HouseStyle'])\ntrain['HouseStyle'].unique()\ntrain['HouseStyle'] = train['HouseStyle'].map({'2Story':0,'1Story':1,'1.5Fin':2,'1.5Unf':3,'SFoyer':4,'SLvl':5,'2.5Unf':6,'2.5Fin':7})\ntest['HouseStyle'] = test['HouseStyle'].map({'2Story':0,'1Story':1,'1.5Fin':2,'1.5Unf':3,'SFoyer':4,'SLvl':5,'2.5Unf':6,'2.5Fin':7})\n\n#RoofStyle\ntrain['RoofStyle'].unique()\ntrain['RoofStyle'] = train['RoofStyle'].map({'Gable':0,'Hip':1,'Gambrel':2,'Mansard':3,'Flat':4,'Shed':5})\ntest['RoofStyle'] = test['RoofStyle'].map({'Gable':0,'Hip':1,'Gambrel':2,'Mansard':3,'Flat':4,'Shed':5})\n\n#RoofMatl\ntrain['RoofMatl'].unique()\ntrain['RoofMatl'] = train['RoofMatl'].map({'CompShg':0,'WdShngl':1,'Metal':2,'WdShake':3,'Membran':4,'Tar&Grv':5,'Roll':6,'ClyTile':7})\ntest['RoofMatl'] = test['RoofMatl'].map({'CompShg':0,'WdShngl':1,'Metal':2,'WdShake':3,'Membran':4,'Tar&Grv':5,'Roll':6,'ClyTile':7})\n\n#Exterior1st\ntrain['Exterior1st'].unique()\ntrain['Exterior1st'] = train['Exterior1st'].map({'VinylSd':0, 'MetalSd':1, 'Wd Sdng':2, 'HdBoard':3, 'BrkFace':4, 'WdShing':5,\n       'CemntBd':6, 'Plywood':7, 'AsbShng':8, 'Stucco':9, 'BrkComm':10, 'AsphShn':11,\n       'Stone':12, 'ImStucc':13, 'CBlock':14})\ntest['Exterior1st'] = test['Exterior1st'].map({'VinylSd':0, 'MetalSd':1, 'Wd Sdng':2, 'HdBoard':3, 'BrkFace':4, 'WdShing':5,\n       'CemntBd':6, 'Plywood':7, 'AsbShng':8, 'Stucco':9, 'BrkComm':10, 'AsphShn':11,\n       'Stone':12, 'ImStucc':13, 'CBlock':14})\n\n#Exterior2nd\ntrain['Exterior2nd'].unique()\ntrain['Exterior2nd'] = train['Exterior2nd'].map({'VinylSd':0, 'MetalSd':1, 'Wd Shng':2, 'HdBoard':3, 'Plywood':4, 'Wd Sdng':5,\n       'CmentBd':6, 'BrkFace':7, 'Stucco':8, 'AsbShng':9, 'Brk Cmn':10, 'ImStucc':11,\n       'AsphShn':12, 'Stone':13, 'Other':14, 'CBlock':15})\ntest['Exterior2nd'] = test['Exterior2nd'].map({'VinylSd':0, 'MetalSd':1, 'Wd Shng':2, 'HdBoard':3, 'Plywood':4, 'Wd Sdng':5,\n       'CmentBd':6, 'BrkFace':7, 'Stucco':8, 'AsbShng':9, 'Brk Cmn':10, 'ImStucc':11,\n       'AsphShn':12, 'Stone':13, 'Other':14, 'CBlock':15})\n\n#MasVnrType\ntrain['MasVnrType'].unique()\ntrain['MasVnrType'] = train['MasVnrType'].fillna(0)\ntest['MasVnrType'] = test['MasVnrType'].fillna(0)\ntrain['MasVnrType'] = train['MasVnrType'].map({'BrkFace':1, 'None':0, 'Stone':2, 'BrkCmn':3,0:0})\ntest['MasVnrType'] = test['MasVnrType'].map({'BrkFace':1, 'None':0, 'Stone':2, 'BrkCmn':3,0:0})\n\n#ExterQual\ntrain['ExterQual'].unique()\ntrain['ExterQual'] = train['ExterQual'].map({'Gd':0, 'TA':1, 'Ex':2, 'Fa':3})\ntest['ExterQual'] = test['ExterQual'].map({'Gd':0, 'TA':1, 'Ex':2, 'Fa':3})\n\n#ExterCond\ntrain['ExterCond'].unique()\ntrain['ExterCond'] = train['ExterCond'].map({'TA':0, 'Gd':1, 'Fa':2, 'Po':3, 'Ex':4})\ntest['ExterCond'] = test['ExterCond'].map({'TA':0, 'Gd':1, 'Fa':2, 'Po':3, 'Ex':4})\n\n#Foundation\ntrain['Foundation'].unique()\ntrain['Foundation'] = train['Foundation'].map({'PConc':0, 'CBlock':1, 'BrkTil':2, 'Wood':3, 'Slab':4, 'Stone':5})\ntest['Foundation'] = test['Foundation'].map({'PConc':0, 'CBlock':1, 'BrkTil':2, 'Wood':3, 'Slab':4, 'Stone':5})\n\n#BsmtQual\ntrain['BsmtQual'].unique()\ntrain['BsmtQual'] = train['BsmtQual'].fillna(0)\ntest['BsmtQual'] = test['BsmtQual'].fillna(0)\ntrain['BsmtQual'] = train['BsmtQual'].map({'Gd':1, 'TA':2, 'Ex':3, 0:0, 'Fa':4})\ntest['BsmtQual'] = test['BsmtQual'].map({'Gd':1, 'TA':2, 'Ex':3, 0:0, 'Fa':4})\n\n#BsmtCond\ntrain['BsmtCond'].unique()\ntrain['BsmtCond'] = train['BsmtCond'].fillna(0)\ntest['BsmtCond'] = test['BsmtCond'].fillna(0)\ntrain['BsmtCond'] = train['BsmtCond'].map({'Gd':1, 'TA':2, 'Po':3, 0:0, 'Fa':4})\ntest['BsmtCond'] = test['BsmtCond'].map({'Gd':1, 'TA':2, 'Po':3, 0:0, 'Fa':4})\n\n#BsmtExposure\ntrain['BsmtExposure'].unique()\ntrain['BsmtExposure'] = train['BsmtExposure'].fillna(0)\ntest['BsmtExposure'] = test['BsmtExposure'].fillna(0)\ntrain['BsmtExposure'] = train['BsmtExposure'].map({'Gd':1, 'No':2, 'Mn':3, 0:0, 'Av':4})\ntest['BsmtExposure'] = test['BsmtExposure'].map({'Gd':1, 'No':2, 'Mn':3, 0:0, 'Av':4})\n\n#BsmtFinType1\/2\ntrain['BsmtFinType1'].unique()\ntrain['BsmtFinType1'] = train['BsmtFinType1'].fillna(0)\ntest['BsmtFinType1'] = test['BsmtFinType1'].fillna(0)\ntrain['BsmtFinType1'] = train['BsmtFinType1'].map({'GLQ':0, 'ALQ':1, 'Unf':2, 'Rec':3, 'BLQ':4, 0:0, 'LwQ':5})\ntest['BsmtFinType1'] = test['BsmtFinType1'].map({'GLQ':0, 'ALQ':1, 'Unf':2, 'Rec':3, 'BLQ':4, 0:0, 'LwQ':5})\ntrain['BsmtFinType2'] = train['BsmtFinType2'].fillna(0)\ntrain['BsmtFinType2'] = train['BsmtFinType2'].map({'GLQ':0, 'ALQ':1, 'Unf':2, 'Rec':3, 'BLQ':4, 0:0, 'LwQ':5})\ntest['BsmtFinType2'] = test['BsmtFinType2'].map({'GLQ':0, 'ALQ':1, 'Unf':2, 'Rec':3, 'BLQ':4, 0:0, 'LwQ':5})\n\n#Heating\ntrain['Heating'].unique()\ntrain['Heating'] = train['Heating'].map({'GasA':0, 'GasW':1, 'Grav':2, 'Wall':3, 'OthW':4, 'Floor':5})\ntest['Heating'] = test['Heating'].map({'GasA':0, 'GasW':1, 'Grav':2, 'Wall':3, 'OthW':4, 'Floor':5})\n\n#HeatingQC\ntrain['HeatingQC'].unique()\ntrain['HeatingQC'] = train['HeatingQC'].map({'Ex':0, 'Gd':1, 'TA':2, 'Fa':3, 'Po':4})\ntest['HeatingQC'] = test['HeatingQC'].map({'Ex':0, 'Gd':1, 'TA':2, 'Fa':3, 'Po':4})\n\n#CentralAir\ntrain['CentralAir'].unique()\ntrain['CentralAir'] = train['CentralAir'].map({'Y':1,'N':0})\ntest['CentralAir'] = test['CentralAir'].map({'Y':1,'N':0})\n\n#Electrical\ntrain['Electrical'].unique()\ntrain['Electrical'] = train['Electrical'].fillna(0)\ntest['Electrical'] = test['Electrical'].fillna(0)\ntrain['Electrical'] = train['Electrical'].map({'SBrkr':0, 'FuseF':1, 'FuseA':2, 'FuseP':3, 'Mix':4, 0:0})\ntest['Electrical'] = test['Electrical'].map({'SBrkr':0, 'FuseF':1, 'FuseA':2, 'FuseP':3, 'Mix':4, 0:0})\n\n#KitchenQual\ntrain['KitchenQual'].unique()\ntrain['KitchenQual'] = train['KitchenQual'].map({'Gd':0, 'TA':1, 'Ex':2, 'Fa':3})\ntest['KitchenQual'] = test['KitchenQual'].map({'Gd':0, 'TA':1, 'Ex':2, 'Fa':3})\n\n#Functional\ntrain['Functional'].unique()\ntrain['Functional'] = train['Functional'].map({'Typ':0, 'Min1':1, 'Maj1':2, 'Min2':3, 'Mod':4, 'Maj2':5, 'Sev':6})\ntest['Functional'] = test['Functional'].map({'Typ':0, 'Min1':1, 'Maj1':2, 'Min2':3, 'Mod':4, 'Maj2':5, 'Sev':6})\n\n#FireplaceQu\ntrain['FireplaceQu'].unique()\ntrain['FireplaceQu'] = train['FireplaceQu'].fillna(0)\ntest['FireplaceQu'] = test['FireplaceQu'].fillna(0)\ntrain['FireplaceQu'] = train['FireplaceQu'].map({0:0, 'TA':1, 'Gd':2, 'Fa':3, 'Ex':4, 'Po':5})\ntest['FireplaceQu'] = test['FireplaceQu'].map({0:0, 'TA':1, 'Gd':2, 'Fa':3, 'Ex':4, 'Po':5})\n\n#GarageType\ntrain['GarageType'].unique()\ntrain['GarageType'] = train['GarageType'].fillna(0)\ntest['GarageType'] = test['GarageType'].fillna(0)\ntrain['GarageType'] = train['GarageType'].map({'Attchd':1, 'Detchd':2, 'BuiltIn':3, 'CarPort':4, 0:0, 'Basment':5, '2Types':6})\ntest['GarageType'] = test['GarageType'].map({'Attchd':1, 'Detchd':2, 'BuiltIn':3, 'CarPort':4, 0:0, 'Basment':5, '2Types':6})\n\n#GarageFinish\ntrain['GarageFinish'].unique()\ntrain['GarageFinish'] = train['GarageFinish'].fillna(0)\ntest['GarageFinish'] = test['GarageFinish'].fillna(0)\ntrain['GarageFinish'] = train['GarageFinish'].map({'RFn':1, 'Unf':2, 'Fin':3, 0:0})\ntest['GarageFinish'] = test['GarageFinish'].map({'RFn':1, 'Unf':2, 'Fin':3, 0:0})\n\n#GarageQual\ntrain['GarageQual'].unique()\ntrain['GarageQual'] = train['GarageQual'].fillna(0)\ntest['GarageQual'] = test['GarageQual'].fillna(0)\ntrain['GarageQual'] = train['GarageQual'].map({0:0, 'TA':1, 'Gd':2, 'Fa':3, 'Ex':4, 'Po':5})\ntest['GarageQual'] = test['GarageQual'].map({0:0, 'TA':1, 'Gd':2, 'Fa':3, 'Ex':4, 'Po':5})\n\n#GarageCond\ntrain['GarageCond'].unique()\ntrain['GarageCond'] = train['GarageCond'].fillna(0)\ntest['GarageCond'] = test['GarageCond'].fillna(0)\ntrain['GarageCond'] = train['GarageCond'].map({0:0, 'TA':1, 'Gd':2, 'Fa':3, 'Ex':4, 'Po':5})\ntest['GarageCond'] = test['GarageCond'].map({0:0, 'TA':1, 'Gd':2, 'Fa':3, 'Ex':4, 'Po':5})\n\n#PavedDrive\ntrain['PavedDrive'].unique()\ntrain['PavedDrive'] = train['PavedDrive'].map({'Y':1,'N':0,'P':2})\ntest['PavedDrive'] = test['PavedDrive'].map({'Y':1,'N':0,'P':2})\n\n#PoolQC\ntrain['PoolQC'].unique()\ntrain['PoolQC'] = train['PoolQC'].fillna(0)\ntest['PoolQC'] = test['PoolQC'].fillna(0)\ntrain['PoolQC'] = train['PoolQC'].map({0:0, 'Ex':1,'Fa':2,'Gd':3})\ntest['PoolQC'] = test['PoolQC'].map({0:0, 'Ex':1,'Fa':2,'Gd':3})\n\n#Fence\ntrain['Fence'].unique()\ntrain['Fence'] = train['Fence'].fillna(0)\ntest['Fence'] = test['Fence'].fillna(0)\ntrain['Fence'] = train['Fence'].map({0:0,'MnPrv':1, 'GdWo':2, 'GdPrv':3, 'MnWw':4})\ntest['Fence'] = test['Fence'].map({0:0,'MnPrv':1, 'GdWo':2, 'GdPrv':3, 'MnWw':4})\n\n#MiscFeature\ntrain['MiscFeature'].unique()\ntrain['MiscFeature'] = train['MiscFeature'].fillna(0)\ntest['MiscFeature'] = test['MiscFeature'].fillna(0)\ntrain['MiscFeature'] = train['MiscFeature'].map({0:0,'Shed':1, 'Gar2':2, 'Othr':3, 'TenC':4})\ntest['MiscFeature'] = test['MiscFeature'].map({0:0,'Shed':1, 'Gar2':2, 'Othr':3, 'TenC':4})\n\n#SaleType\ntrain['SaleType'].unique()\ntrain['SaleType'] = train['SaleType'].map({'WD':0, 'New':1, 'COD':2, 'ConLD':3, 'ConLI':4, 'CWD':5, 'ConLw':6, 'Con':7, 'Oth':8})\ntest['SaleType'] = test['SaleType'].map({'WD':0, 'New':1, 'COD':2, 'ConLD':3, 'ConLI':4, 'CWD':5, 'ConLw':6, 'Con':7, 'Oth':8})\n\n#SaleCondition\ntrain['SaleCondition'].unique()\ntrain['SaleCondition'] = train['SaleCondition'].map({'Normal':0, 'Abnorml':1, 'Partial':2, 'AdjLand':3, 'Alloca':4, 'Family':5})\ntest['SaleCondition'] = test['SaleCondition'].map({'Normal':0, 'Abnorml':1, 'Partial':2, 'AdjLand':3, 'Alloca':4, 'Family':5})\n\ntrain.head(5)","b6611c56":"print(len(test.select_dtypes(include=['float64','int64']).columns))","511793c1":"for col in train.columns:\n    if train[col].isnull().values.any() == True:\n        mean = round(train[col].mean(),0)\n        train[col] = train[col].fillna(mean)\nfor col in test.columns:\n    if test[col].isnull().values.any() == True:\n        mean = round(test[col].mean(),0)\n        test[col] = test[col].fillna(mean)","a0d266f0":"train_copy = train.copy()\nx = train_copy.drop(columns=[\"SalePrice\",'Id'])\ny = train[\"SalePrice\"]\ntrain_x,val_x,train_y,val_y = train_test_split(x,y,random_state=42)","84a70865":"def model():\n    model = Sequential()\n    model.add(Dense(25,input_dim=79,kernel_initializer='normal',activation='relu'))\n    model.add(Dense(50,kernel_initializer='normal',activation='relu'))\n    model.add(Dense(50,kernel_initializer='normal',activation='relu'))\n    model.add(Dense(1, kernel_initializer='normal'))\n    model.compile(loss='mean_absolute_error',optimizer='adam')\n    return model\nkeras = model()\nkeras.fit(train_x,train_y,epochs=500,batch_size=50)\nkeras_preds = keras.predict(val_x)\nkeras_error = r2_score(val_y,keras_preds)\nprint(keras_error)","0b85471d":"data = test.drop(columns=['Id'])\npredictions = keras.predict(data)\nsubmission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsubmission.iloc[:,1] = predictions\nsubmission.to_csv('submission.csv',index=False)","f24d2d43":"First, for the numerical columns, let's normalize the data. I will do this by subtracting each value by the mean of the column and dividing by the standard deviation. ","741bd318":"And just in case, let's fill in all missing values with the mean of the columns.","c66d52f7":"Let's split our data in training and testing data.","436aea5e":"First, let's load in the data.","34f76b7c":"# **House Price Prediction Calculator**","8af7d48d":"Our final R2 Score is 0.89, which although could be improved further, is pretty good for me.\n\nHere I will finalize my submission for scoring.","fde669b0":"And now I will begin training my model. I will be building a Keras Sequential Neural Network, using an activation function of relu and a kernel initializer normel, and optimizer adam. Much of the epochs and neural network structure was done through trial and error, and this is the model I decided to use. I defenitely could have done hyperparameter tuning much more effectively here.","1b282c10":"Let's make sure real quick that all of the columns have numerical values.","fc0af3c8":"In this project, I will be predicting prices of houses.","ef30950c":"Next, for all the non-numerical data, let's go through and assign them numerical values. If there are missing values, I will give them there own identifier and declare them to 0."}}