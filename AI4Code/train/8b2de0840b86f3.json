{"cell_type":{"02a729d5":"code","b2c82fd2":"code","74c9f055":"code","628412c2":"code","6533d863":"code","0a07ab40":"code","dd3ef9b7":"code","74c1fd1c":"code","57b161d8":"code","c7fff170":"code","997e8b2b":"code","8249e9b6":"code","77a8041b":"code","1837a330":"code","92641781":"code","f8907394":"code","316c859e":"code","57398a74":"code","c8d470c5":"code","2cf2cd12":"code","01517084":"code","cfe47c68":"code","482d2a53":"code","b948cee5":"code","94245b8b":"code","2b34b2bf":"code","73707067":"code","719e78c4":"code","f887009c":"code","71917e8c":"code","a435fe1b":"code","c5424d4c":"code","44faca86":"code","fa48dfbc":"code","4b65df06":"code","276f90ae":"code","9b87b3aa":"code","0a034def":"code","c57bbc4b":"code","917d0134":"code","c44efe56":"code","d7650dca":"code","ea72450d":"code","d5257bcf":"code","776c9dc9":"code","62169c85":"code","7a04870f":"code","9afe71da":"code","15e24018":"code","b97ef9a9":"markdown","a548d186":"markdown","c5486f3d":"markdown","e89e8895":"markdown","da1d9751":"markdown","0a8de532":"markdown","4266a636":"markdown","937ebd72":"markdown","a2926a10":"markdown","39aac46d":"markdown","ffa7965c":"markdown","48f6c5c4":"markdown","3af9a5a8":"markdown","1bb71ebe":"markdown","95b988d0":"markdown","d398d42c":"markdown","d174b411":"markdown","9e6c3668":"markdown","138eddf6":"markdown","f58199e5":"markdown","c9e0ae76":"markdown","9c82db33":"markdown","b783572c":"markdown","9a97045b":"markdown","3fbea8bd":"markdown","1ae2a522":"markdown","41634b16":"markdown"},"source":{"02a729d5":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns","b2c82fd2":"df_rating=pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ndf_gscores=pd.read_csv('..\/input\/movielens-20m-dataset\/genome_scores.csv')\ndf_gtag=pd.read_csv('..\/input\/movielens-20m-dataset\/genome_tags.csv')\ndf_link=pd.read_csv('..\/input\/movielens-20m-dataset\/link.csv')\ndf_movie=pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\ndf_tag=pd.read_csv('..\/input\/movielens-20m-dataset\/tag.csv')","74c9f055":"df_movie.head()","628412c2":"df_movie.isnull().any()","6533d863":"print('The total number of movies in the dataset : {}'.format(len(df_movie['movieId'].unique())))","0a07ab40":"print('The total number of unique movies(title) in the dataset : {}'.format(len(df_movie['title'].unique())))","dd3ef9b7":"print('The total number of dublicate movies( Two movieIds with same title 16*2=32) in the dataset : {}'.format(len(df_movie[df_movie.duplicated(subset = 'title', keep = 'first')])))\ndf_tmp=df_movie[df_movie.duplicated(subset = 'title', keep = False)]\ndf_tmp","74c1fd1c":"#  Loop to find dublicate movies with same and different genres list.\nlis1=[]\nlis2=[]\nfor j in range(32):\n    x=0\n    for i in range(31):\n        if df_tmp.iloc[j,1]== df_tmp.iloc[i+1,1]:\n            if df_tmp.iloc[j,2]== df_tmp.iloc[i+1,2]:\n                x+=1\n                if x>1:\n#                 print(j, i)\n                    lis1.append(df_tmp.iloc[j,1])\n                else:\n                    lis2.append(df_tmp.iloc[j,1])\n                    \nprint('List of dublicate movies with same genres {}'.format(list(set(lis1))))\nprint('')\nprint('List of dublicate movies with different genres {}'.format(list(set(lis2)-set(lis1))))\n\n            ","57b161d8":"# Here we have selected the first occurence of movie, as it has almost all the genres of the second title. \ndf_movie.drop_duplicates(subset='title', inplace = True, keep= 'first')","c7fff170":"df_movie[df_movie.duplicated(subset = 'title', keep = False)]\n","997e8b2b":"df_rating","8249e9b6":"plt.hist(df_rating['rating'])","77a8041b":"print('The number of movies which are rated by users : {}'.format(len(df_rating['movieId'].unique())))","1837a330":"d=df_rating.groupby('movieId').mean()['rating']\ndf=pd.DataFrame(d, columns=['rating']).reset_index()\ndf.head()","92641781":"sns.boxplot(df['rating'], orient='v')","f8907394":"print('Max rating : {}  Min rating : {}'.format(df['rating'].max(), df['rating'].min()))","316c859e":"df2=pd.merge(df_movie, df, on='movieId', how='left' )\ndf2['Year']=df2['title'].str.extract('.*\\((.*)\\).*')\n","57398a74":"df2['Year'].replace(['Das Millionenspiel','Bicicleta, cullera, poma','2007-','2009\u2013 ', '1975-1979', '1983)'], value=[np.nan, np.nan, '2007', '2009', '1975', '1983' ], inplace=True)","c8d470c5":"sns.boxplot(df2['Year'].dropna().astype('int64'), orient='v')","2cf2cd12":"sns.distplot(df2['Year'].dropna().astype('int64'))","01517084":"year=df2['Year'].dropna().astype('int64', copy= True).sort_values().unique().tolist()\nyear=list(map(str, year))","cfe47c68":"df7=df2[['Year', 'movieId']].groupby('Year').count()\ndf7.rename(mapper={'movieId': 'movies\/year'}, inplace= True, axis=1)\ndf7.head()","482d2a53":"df7.plot.bar(figsize=(20,15))\nplt.ylabel('# movies', fontsize=12)\nplt.title('Number of movies released in a particular year', fontsize=16)\nplt.legend('')\n","b948cee5":"plt.figure(figsize=(20,10))\nplt.ylabel('Avg. Rating')\nplt.xticks(rotation='vertical')\nsns.lineplot(year, list(df2.groupby('Year')['rating'].mean().to_numpy()))\nplt.title('Relation between Avg. rating and Year', fontsize=16)","94245b8b":"# Loop to find Percentage of movies which are highly rated(>=4) for all years.\n\nrating_lis=[]\nfor i in range(len(year)):\n#     print(year[i])\n    le=len(df2[(df2['rating']>=4) & (df2['Year']== year[i])])\n    if le>0:\n#         print(le\/(df7.loc[year[i]])\n        rating_lis.append((le\/(df7.loc[year[i]]['movies\/year']))*100)\n    else:\n        rating_lis.append(0) \n        \nrating_lis[:5]","2b34b2bf":"plt.figure(figsize=(20,10))\nplt.plot(year,rating_lis)\nplt.xticks(rotation='vertical')\nplt.ylabel(\"Percentage of movies which are highly rated(>=4)\", fontsize=12)\nplt.title('Percentage of movies which are highly rated(>=4) W.R.T Year', fontsize=16)","73707067":"df2[df2['Year']=='1901']","719e78c4":"print('# Movies for which rating is not available:{}'.format(df2['rating'].isnull().sum()))","f887009c":"df2[df2['rating'].isnull()]['title'].head()","71917e8c":"df_gscores.head()","a435fe1b":"# Code to extract higly relevant tagId \ndf3=df_gscores[df_gscores.groupby('movieId')['relevance'].transform(max)==df_gscores['relevance']]\ndf3","c5424d4c":"df3[df3.duplicated(subset='movieId', keep= 'first' )]","44faca86":"df3=df3.drop_duplicates(subset='movieId')","fa48dfbc":"df4=pd.merge(df3, df_gtag, how='left', on='tagId')\ndf4","4b65df06":"df5=pd.merge(df2, df4, how='left', on='movieId')\ndf5.rename(mapper={'tag':'High_relevance_tag', 'tagId':'High_relevance_tagId'}, axis=1, inplace=True)\ndf5","276f90ae":"print('# movies for which High_relevance_tag is not available:{}'.format(df5['High_relevance_tag'].isnull().sum()))","9b87b3aa":"('max number of genres for a single movie {}'.format(max(df5['genres'].str.split('|').apply(len))))","0a034def":"# #Loop to find each genre used in the dataset.\n# genres_lis=set({})\n# for i in range(len(df2)):\n#     for j in range(len(df2['genres'].str.split('|')[i])):\n# #         print(i,j)\n#         genres_lis.add(df2['genres'].str.split('|')[i][j])\n        \n# genres_lis=list(genres_lis)\n# print('Genres:{}'.format(genres_lis))\n","c57bbc4b":"genres_lis=['Romance', 'Fantasy', 'Animation', 'Action', 'Film-Noir', 'Adventure', 'Horror', 'IMAX', 'Musical', 'War', 'Drama', 'Comedy', 'Crime', 'Mystery', '(no genres listed)', 'Documentary', 'Western', 'Thriller', 'Children', 'Sci-Fi']","917d0134":"print('Number of different genres present in the dataset are {}'.format(len(genres_lis)))","c44efe56":"# Loop to creat columns for each genre\n\nfor i in range(len(genres_lis)):\n    df5[genres_lis[i]]=df5['genres'].str.contains(genres_lis[i])\n    ","d7650dca":"df5.head()","ea72450d":"for genre in genres_lis:\n    df5.groupby(genre)['rating'].mean().plot.bar()\n    plt.ylabel('Avg. Rating')\n    plt.show()\n#  Figures show Avg rating for different genres.","d5257bcf":"# Loop to find avg rating on the basis of each genre.\navg_rating=[]\nfor genre in genres_lis:\n    avg_rating.append(df2[df2['genres'].str.contains(genre)]['rating'].mean())\n# avg_rating\n","776c9dc9":"plt.figure(figsize=(8,5))\nsns.barplot(genres_lis, avg_rating,palette='Set1')\nplt.xticks(rotation='vertical')\nplt.ylabel('Avg. Rating')\nplt.xlabel('Genres')\nplt.title('Avg. Rating W.R.T Genres', fontsize=16)","62169c85":"for genre in genres_lis:\n#     print(genre)\n    df2[df2['genres'].str.contains(genre)][['Year','movieId']].groupby('Year').count().reset_index().sort_values(by='Year').plot('Year', 'movieId')\n    plt.legend('')\n    plt.ylabel('# of movies\/year in {} genre'.format(genre))\n#     plt.xticks()\n    plt.show()","7a04870f":"dfx=df5.dropna()\ndfx['Year']=dfx['Year'].astype('int64')\nplt.figure(figsize = (10,8))\nsns.heatmap(dfx[['rating', 'Year', 'High_relevance_tagId','Romance', 'Romance', 'Fantasy', 'Animation',\n       'Action', 'Film-Noir', 'Adventure', 'Horror', 'IMAX', 'Musical', 'War',\n       'Drama', 'Comedy', 'Crime', 'Mystery', '(no genres listed)',\n       'Documentary', 'Western', 'Thriller', 'Children', 'Sci-Fi']].corr(), annot=False)","9afe71da":"dfx[['rating', 'Year', 'High_relevance_tagId','Romance', 'Romance', 'Fantasy', 'Animation',\n       'Action', 'Film-Noir', 'Adventure', 'Horror', 'IMAX', 'Musical', 'War',\n       'Drama', 'Comedy', 'Crime', 'Mystery', '(no genres listed)',\n       'Documentary', 'Western', 'Thriller', 'Children', 'Sci-Fi']].corr()['rating'].sort_values(ascending=False)","15e24018":"# Let's suppose on a weekend you are with your girlfriend, and your girl likes to watch new romantic movies, but you like comedy and obviously both \n#  would like to see some high rated movies.\nis_romantic=df5['genres'].str.contains('Romance')\nis_comedy=df5['genres'].str.contains('Comedy')\nis_highly_rated=df5['rating']>4\nis_new=df5['Year'].dropna().astype('int64')>1990\ndf5[is_romantic & is_comedy & is_highly_rated & is_new][['movieId','title','genres','rating','Year','High_relevance_tag']]","b97ef9a9":"I was shocked by seeing 100% movies of 1901 have rating >=4, but let's investigate this awkward spike.","a548d186":"#### Now, let's explore df_rating dataframe.","c5486f3d":"## Now, let's do some feature engineering!","e89e8895":"These are some junks in the year column.","da1d9751":"In the first figure, we can see that # movies\/year in Romance genre is increasing since 1972, before decreasing after 2011.  ","0a8de532":"75% of the movies are older than 2008.","4266a636":"No more dublicate movies title.","937ebd72":"### Finding the relation between diffrent genres and their avg. rating. ","a2926a10":"### **Please give your valuable feedback, and if you like my work, vote me up!**","39aac46d":"#### I have commented out the upper loop, as it takes around 20 minutes to get the the list of all the genres. If anyone has any diiferent logic which is faster than this, please comment below.","ffa7965c":"## Finally, we are here at the story part.","48f6c5c4":"Here, we can see that 16 movies are repeated twice, but with genres.","3af9a5a8":"Oh, so there is only movie with 5 rating.","1bb71ebe":"Different users have given different ratings to the movies, so we try to find average rating here.","95b988d0":"### Now we will extract tagId based on the relevance column from df_gscores. We will only extract those tagId which has higher relevance than others. ","d398d42c":"From figure, we can say that it is left skewed(Negative skewness) normal distribution.","d174b411":"### In this kernel, we will analyse movie dataset and try to find some important patterns by doing below given points:\n1. Find the dublicates in the dataset.\n2. Find the average rating for each movie from rating.csv file.\n3. Then, we will merge rating with dataframe from movie.csv file.\n4. Try to find relation between genres and rating, year of released and rating.\n5. In the last, we will try to build a filter based on you and your girlfriend choice:)","9e6c3668":"75% movies have rating less than around 3.25","138eddf6":"## Finding the corelation between rating and other variables.","f58199e5":"Wow, there is no null value!","c9e0ae76":"# **Hi, Welcome to my notebook!**","9c82db33":"### If you have any doubt please comment below, and if you like my work, please vote.","b783572c":"### Let's explore the relation between year and rating.","9a97045b":"#### Now, let's extract the year from title and make it as a new variable","3fbea8bd":"Let's Start!!!","1ae2a522":"We will use this list of years in the further analysis.","41634b16":"Mostly users have given the 4 as a rating"}}