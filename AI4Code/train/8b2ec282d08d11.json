{"cell_type":{"9df7d989":"code","8226edea":"code","8b6d646b":"code","ee7e50cf":"code","af4c2cb7":"code","7079fe51":"code","352546a7":"code","b87db0e0":"code","05a0670f":"code","a7187e45":"code","b6c8a1c8":"code","f123def9":"code","62767ecc":"code","78cb33f3":"code","a84f1dd8":"code","fa2f3839":"code","48f52213":"code","24497778":"code","fea6e73e":"code","0ba627a1":"code","4a56f585":"code","c3657162":"code","e3d1792d":"code","e2703de8":"code","c739b00f":"code","a2750abf":"code","0f6c80dc":"code","c22f86a6":"code","1627667d":"code","63206468":"code","533cc59d":"code","6d694474":"code","8e431416":"markdown","766c256e":"markdown","7999e7e1":"markdown","36912ea3":"markdown","bc18121d":"markdown","9bd19354":"markdown","9929fa5f":"markdown"},"source":{"9df7d989":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8226edea":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')","8b6d646b":"df.head()","ee7e50cf":"df.shape","af4c2cb7":"df.dtypes","7079fe51":"df['region'].value_counts()","352546a7":"df.isnull().sum()","b87db0e0":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndf['sex'] = le.fit_transform(df['sex'])\ndf['smoker'] = le.fit_transform(df['smoker'])\ndf['region'] = le.fit_transform(df['region'])","05a0670f":"X = df.drop('charges',axis=1)\ny = df['charges']","a7187e45":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)","b6c8a1c8":"import seaborn as sns \nimport matplotlib.pyplot as plt \nfig = plt.figure(figsize = (20,15))\nax = fig.gca()\ndf.hist(ax=ax)\nplt.show()","f123def9":"plt.figure(figsize=(12,10))\nax = sns.heatmap(df.corr())","62767ecc":"from yellowbrick.target import FeatureCorrelation\n\nfeature_names = list(X.columns)","78cb33f3":"visualizer = FeatureCorrelation(labels = feature_names)\n\nvisualizer.fit(X, y)\n\nvisualizer.poof()","a84f1dd8":"boxplot = X.boxplot(figsize=(15, 12))","fa2f3839":"df.loc[df['bmi'] > 45]                                         ","48f52213":"mean_bmi = X['bmi'].mean()\nmean_bmi","24497778":"for index, row in X.iterrows():\n    \n    if row['bmi']  >46:\n        X.at[index, 'bmi'] = mean_bmi","fea6e73e":"# X[X['bmi'] > 45].bmi = mean_bmi","0ba627a1":"boxplot = X.boxplot(figsize=(15, 12))","4a56f585":"from sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nmodel_1 = make_pipeline(StandardScaler(), LinearRegression())","c3657162":"model_1.fit(X_train,y_train)","e3d1792d":"model_1.score(X_test,y_test)","e2703de8":"from sklearn.metrics import mean_absolute_error\ny_pred = model_1.predict(X_test)\nmean_absolute_error(y_test, y_pred)","c739b00f":"from sklearn.linear_model import Lasso\nmodel_2 = make_pipeline(StandardScaler(), Lasso())","a2750abf":"model_2.fit(X_train,y_train)","0f6c80dc":"model_2.score(X_test,y_test)","c22f86a6":"y_pred = model_2.predict(X_test)\nmean_absolute_error(y_test, y_pred)","1627667d":"from sklearn.ensemble import RandomForestRegressor\nmodel_3 =make_pipeline(StandardScaler(), RandomForestRegressor()) ","63206468":"model_3.fit(X_train,y_train)","533cc59d":"model_3.score(X_test,y_test)","6d694474":"y_pred = model_3.predict(X_test)\nmean_absolute_error(y_test, y_pred)","8e431416":"## Exploring Data\n ","766c256e":"## Split Data","7999e7e1":"# Model 2 -> Lasso","36912ea3":"# Model 1 -> LinearRegression","bc18121d":"#  Model 3 -> RandomForestRegressor","9bd19354":"## Loading Data\n ","9929fa5f":"### Show Outlier Data "}}