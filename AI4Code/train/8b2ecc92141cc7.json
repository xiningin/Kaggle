{"cell_type":{"d20e675e":"code","c822bd22":"code","55e48277":"code","50125b19":"code","1b1334ea":"code","f797cd0c":"code","6ccb3888":"code","5b6738f6":"code","924ad9d7":"code","08692baf":"code","b692e33c":"code","9ce1dca6":"code","0b1595bf":"code","f527497e":"code","eed46211":"code","bd12b28a":"code","fa2857ec":"code","751ca8f6":"code","04731c5c":"markdown","a14a43a8":"markdown","02460920":"markdown","77f296cb":"markdown","840cd090":"markdown","9727b905":"markdown","48bbed27":"markdown","d90dca34":"markdown","c17f3117":"markdown","057946c4":"markdown","cabe8c39":"markdown","c706088c":"markdown","a98924ff":"markdown","4e664b8f":"markdown","e46548e8":"markdown","d85f9d7d":"markdown","9a810105":"markdown","ad361ddc":"markdown","015efcca":"markdown","8b8a31a8":"markdown"},"source":{"d20e675e":"import pandas as pd\n\ndf = pd.read_csv(\"..\/input\/diabetes-dataset\/diabetes2.csv\")\ndf.head()","c822bd22":"df.info()","55e48277":"import seaborn as sns\nimport matplotlib.pyplot as plt","50125b19":"sns.distplot(df.Age)","1b1334ea":"sns.jointplot(df.Age, df['Glucose'], kind = 'kde')","f797cd0c":"sns.pairplot(df, hue = 'Outcome')","6ccb3888":"from sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import precision_score, recall_score, f1_score\n\ndef evaluate(true, pred):\n    precision = precision_score(y_test, y_pred)\n    recall = recall_score(y_test, y_pred)\n    f1 = f1_score(y_test, y_pred)\n    \n    print(\"Confusion Matrix:\\n\", confusion_matrix(true, pred))\n    cm = pd.crosstab(true, pred)\n    sns.heatmap(cm, annot=True)\n    print(\"Accuracy Score:\", accuracy_score(true, pred))\n    print(\"Precision:\", precision)\n    print(\"Recall:\", recall)\n    print(\"F1 Score:\", f1)","5b6738f6":"X = df.drop(['Outcome'], axis = 1)\ny = df['Outcome']","924ad9d7":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 7)","08692baf":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(solver = 'liblinear')\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)","b692e33c":"evaluate(y_test, y_pred)","9ce1dca6":"from sklearn.metrics import precision_recall_curve\nprecisions, recalls, thresholds = precision_recall_curve(y_test, y_pred)","0b1595bf":"plt.figure(figsize=(12, 8))\nplt.plot(precisions, recalls)\nplt.xlabel(\"Precision\")\nplt.ylabel(\"Recall\")\nplt.title(\"PR Curve: precisions\/recalls tradeoff\");","f527497e":"from sklearn.metrics import roc_curve\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)","eed46211":"plt.figure(figsize=(12, 8))\nplt.plot(fpr, tpr, linewidth=2)\n\nplt.plot([0, 1], [0, 1], \"k--\")\nplt.axis([0, 1, 0, 1])\n\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')","bd12b28a":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, y_pred)","fa2857ec":"from sklearn.model_selection import GridSearchCV\n\npenalty = ['l1', 'l2']\nC = [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000]\nclass_weight = [{1:0.5, 0:0.5}, {1:0.4, 0:0.6}, {1:0.6, 0:0.4}, {1:0.7, 0:0.3}]\nsolver = ['liblinear', 'saga']\n\nparam_grid = dict(penalty=penalty, C=C, class_weight=class_weight, solver=solver)\n\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring='roc_auc',\n                    verbose=1, n_jobs=-1, cv=10, iid=True)\ngrid_result = grid.fit(X_train, y_train)","751ca8f6":"y_pred = grid_result.predict(X_test)\n\nevaluate(y_test, y_pred)","04731c5c":"## Plot relation of blood sugar levels and age\n\nThe distribution clearly shows that most patients lie in the range of 20-30 years with blood sugar levels being approximately equal to 100 mg\/dL.\n\n**Note:** Normal sugar levels lie in the range of 60 - 90 mg\/dL. For more info, check out the [link.](https:\/\/www.webmd.com\/diabetes\/how-sugar-affects-diabetes)","a14a43a8":"Now, let us prepare the data by dropping the target variable, `Outcome`, and setting it as the target variable.","02460920":"Let us now split our data into training and test data sets. We use the training set in order to fit the model and the test set to evaluate our model's predictions.","77f296cb":"## Pair plot\n\nLet us plot pairwise relationships in a dataset using `seaborn`'s `pairplot` function.","840cd090":"# Hyperparameter Tuning\n\nHyperparamter tuning is choosing the set of optimal hyperparameters for our models. The tuning works by changing several parameters like loss function, etc.","9727b905":"# Summary:\n\nIn this notebook, you got to learn about:\n\n- Inspecting Data\n- Visualizing Data\n- Splitting Data into Training and Test Sets\n- Logistic Regression\n- Measuring Performance\n- PR, ROC Curve\n- Hyperparameter Tuning","48bbed27":"# Logistic Regression\n\nLogistic regression is a **classification algorithm** used to assign observations to a discrete set of classes. Unlike linear regression which outputs continuous number values, logistic regression transforms its output using the logistic sigmoid function to return a probability value which can then be mapped to two or more discrete classes.\n\nIt is used when the target variable is binary categorical (0 or 1).\n\n![Linear vs Logisitc Regression](https:\/\/www.machinelearningplus.com\/wp-content\/uploads\/2017\/09\/linear_vs_logistic_regression.jpg)\n\n### Sigmoid Function:\n\nThe sigmoid function is represented by:\n\n$\\large S(z) = \\frac{1} {1 + e^{-z}}$\n\nwhere, \n$\\large S(z)$ = output between 0 and 1 (probability estimate),\n\n$\\large z$ = input to the function (your algorithm\u2019s prediction e.g. mx + b),\n\n$\\large e$ = base of natural log","d90dca34":"# Inspecting Data\n\nLet us load the dataset and save it in a DataFrame:","c17f3117":"We'll create a logistic regression model using scikit-learn's `LogisticRegression`:","057946c4":"Let us create a helper function to evaluate predictions and calculate accuracy.","cabe8c39":"Here, we can see that most patients have the age of 20 - 30 years. \n\nHence, we can say that adults having age in the range of 20-30 years are more prone to diabetes due to lack of exercise, unhealthy diet, etc.","c706088c":"## PR Curve\n\nA PR curve is simply a graph with Precision values on the y-axis and Recall values on the x-axis. \n\nIt is desired that the algorithm should have both high precision, and high recall. However, most machine learning algorithms often involve a trade-off between the two. **A good PR curve has greater AUC (area under curve). **","a98924ff":"Fortunately, we do not have any missing values in our dataset. We can now proceed with visualizations and making predictions.","4e664b8f":"# Visualizing Data\n\nLet us visualize the dataset using various plots.","e46548e8":"Let us see our dataframe contains the count of values and their datatypes using `.info()`.","d85f9d7d":"## Distribution of Ages\n\nLet us plot the **distribution of ages** of the patients.","9a810105":"## ROC Curve\n\nROC curve plots the true positive rate (another name for recall) against the false positive rate. The false positive rate (FPR) is the ratio of negative instances that are incorrectly classified as positive. It is equal to one minus the true negative rate, which is the ratio of negative instances that are correctly classified as negative.","ad361ddc":"# Measuring Performance\n\n### 1. Confusion Matrix\n\nThis is what a confusion matrix looks like:\n![Confusion Matrix](https:\/\/miro.medium.com\/max\/712\/1*Z54JgbS4DUwWSknhDCvNTQ.png)\n\nNow, let us understand what TP, TN, FP, FN denote in this matrix:\n\n\n- **True Positives (TP):** These are cases in which we predicted yes (they have the disease), and they do have the disease.\n- **True Negatives (TN):** We predicted no, and they don't have the disease.\n- **False Positives (FP):** We predicted yes, but they don't actually have the disease. (Also known as a \"Type I error.\")\n- **False Negatives (FN):** We predicted no, but they actually do have the disease. (Also known as a \"Type II error.\")\n\n\n### 2. Precision\n\nPrecision is defined as the number of true positives (TP) over the number of true positives plus the number of false positives (FP).\n\n![Precision](https:\/\/miro.medium.com\/max\/948\/1*HGd3_eAJ3-PlDQvn-xDRdg.png)\n\n### 3. Recall\n\nRecall is defined as the number of true positives (TP) over the number of true positives plus the number of false negatives (FN).\n\n![Recall](https:\/\/miro.medium.com\/max\/836\/1*dXkDleGhA-jjZmZ1BlYKXg.png)\n\n### 4. F1-Score\n\nF1-score is the harmonic mean of precision and recall.\n\n![F1_Score](https:\/\/miro.medium.com\/max\/564\/1*T6kVUKxG_Z4V5Fm1UXhEIw.png)","015efcca":"# Link to Part 1: [Regression with Scikit-Learn: Practical ML #1](https:\/\/www.kaggle.com\/aadhavvignesh\/regression-with-scikit-learn-practical-ml-1)\n\n## Part 3 coming soon!","8b8a31a8":"# Logistic Regression with Scikit-Learn: Practical ML #2\n\nIn this notebook, we will cover logistic regression using Scikit-Learn. The dataset being used is [Diabetes Dataset](https:\/\/www.kaggle.com\/kandij\/diabetes-dataset), where we will predict a person will have diabetes based on their blood pressure, BMI, Glucose using **Logistic Regression**.\n\n\n**Link to Part 1:** [Regression with Scikit-Learn: Practical ML #1](https:\/\/www.kaggle.com\/aadhavvignesh\/regression-with-scikit-learn-practical-ml-1)"}}