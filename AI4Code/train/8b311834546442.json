{"cell_type":{"be87b43c":"code","74ec615d":"code","b533658d":"code","2915c90a":"code","a14917a8":"code","e6915d8c":"code","0f62add8":"markdown","fb077fd4":"markdown","90c659a4":"markdown","ce62caa6":"markdown","9317135c":"markdown"},"source":{"be87b43c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74ec615d":"import datatable as dt\nX = dt.fread('\/kaggle\/input\/jane-street-market-prediction\/train.csv').to_pandas()","b533658d":"X = X[X.date > 85]\ny = np.where((X.resp > 0), 1, 0)\nX.drop(['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp', 'ts_id'], axis=1, inplace=True)","2915c90a":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nclf = HistGradientBoostingClassifier(random_state=42).fit(X, y)","a14917a8":"import janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set","e6915d8c":"from tqdm import tqdm\nfor (test_df, sample_prediction_df) in tqdm(iter_test):\n  if test_df.weight.item() > 0:\n    sample_prediction_df.action = clf.predict(test_df)\n  else:\n    sample_prediction_df.action = 0\n  env.predict(sample_prediction_df)","0f62add8":"# test only\ntest_df_all = pd.DataFrame()\nfor (test_df, sample_prediction_df) in iter_test:\n  if test_df.weight.item() > 0:\n    test_rec = test_df.drop(['date'], axis=1)\n    sample_prediction_df.action = gbc.predict(test_rec)    \n  else:\n    sample_prediction_df.action = 0\n  env.predict(sample_prediction_df)\n  test_df['action'] = sample_prediction_df.action\n  test_df_all = test_df_all.append(test_df)","fb077fd4":"# test only (without tqdm)\nfor (test_df, sample_prediction_df) in iter_test:\n  if test_df.weight.item() > 0:\n    sample_prediction_df.action = gbc.predict(test_df)    \n  else:\n    sample_prediction_df.action = 0\n  env.predict(sample_prediction_df)","90c659a4":"# test only\ndel X, y","ce62caa6":"# test only\ntest_df_all[test_df_all.action == 1]","9317135c":"# test only\ntest_df_all = pd.DataFrame()\nfor (test_df, sample_prediction_df) in iter_test:\n  if test_df.weight.item() > 0:\n    test_rec = test_df.drop(['date'], axis=1)\n    sample_prediction_df.action = gbc.predict(test_rec)    \n  else:\n    sample_prediction_df.action = 0\n  env.predict(sample_prediction_df)\n  test_df['action'] = sample_prediction_df.action\n  test_df_all = test_df_all.append(test_df)"}}