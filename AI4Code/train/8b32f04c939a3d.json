{"cell_type":{"6ed2e612":"code","70ab4d4d":"code","3b9c0c8f":"code","98f1f6ec":"code","b6b5e994":"code","0a47dc7a":"code","f86e190f":"code","dc7c9655":"code","085e1b5f":"code","5d7c0cb3":"code","6ebd438e":"code","fa499916":"code","b5c71fd5":"code","773310ec":"code","d7dddc7e":"code","141ccbc4":"code","498d6243":"code","04931142":"code","191d80ad":"markdown","6f199400":"markdown","7e0da24d":"markdown","8e437683":"markdown","4e8d9d90":"markdown","ab8dc939":"markdown","ca16af57":"markdown","a8723679":"markdown"},"source":{"6ed2e612":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('dark_background')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70ab4d4d":"stocks=pd.read_csv('\/kaggle\/input\/goldman-sachs-stock-data-updated-till-1jul2021\/GS.csv',header=0, index_col='Date', parse_dates=True)","3b9c0c8f":"st=stocks.head()\nst.style.set_properties(**{'background-color': 'black','color': 'green'})","98f1f6ec":"st1=stocks.tail()\nst1.style.set_properties(**{'background-color': 'black','color': 'green'})","b6b5e994":"st2=stocks.describe()\ncm = sns.light_palette(\"green\", as_cmap=True)\nst2.style.background_gradient(cmap=cm)","0a47dc7a":"stocks.info()","f86e190f":"stocks.shape","dc7c9655":"import matplotlib.dates as mdates\n","085e1b5f":"plt.figure(figsize=(14,5))\nplt.plot(stocks.index, stocks['Adj Close'],color='aqua')\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nplt.gca().xaxis.set_major_locator(mdates.YearLocator())\nplt.grid(True)\nplt.xticks(rotation=90)\nplt.show()","5d7c0cb3":"f, ax = plt.subplots(2, 2, figsize=(15,10), sharex=True)\nf.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nf.gca().xaxis.set_major_locator(mdates.YearLocator())\n\nax[0,0].plot(stocks.index, stocks['Open'], color='r')\nax[0,0].grid(True)\nax[0,0].tick_params(labelrotation=90)\nax[0,0].set_title('Open Price');\n\nax[0,1].plot(stocks.index, stocks['Close'], color='g')\nax[0,1].grid(True)\nax[0,1].tick_params(labelrotation=90)\nax[0,1].set_title('Close Price');\n\nax[1,0].plot(stocks.index, stocks['High'], color='b')\nax[1,0].grid(True)\nax[1,0].tick_params(labelrotation=90)\nax[1,0].set_title('Highest Price');\n\nax[1,1].plot(stocks.index, stocks['Low'], color='y')\nax[1,1].grid(True)\nax[1,1].tick_params(labelrotation=90)\nax[1,1].set_title('Lowest Price');","6ebd438e":"plt.figure(figsize=(14,5))\nplt.plot(stocks.index, stocks['Volume'],color='purple')\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nplt.gca().xaxis.set_major_locator(mdates.YearLocator())\nplt.xticks(rotation=90)\nplt.title('Number of units traded in a day')\nplt.show()","fa499916":"plt.figure(figsize=(14,5))\ndf = stocks.loc[pd.Timestamp('2008-01-01'):pd.Timestamp('2008-12-31')]\nplt.scatter(df.index, df['Volume'],color='red')\nplt.grid(True)\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\nplt.gca().xaxis.set_major_locator(mdates.MonthLocator())\nplt.xticks(rotation=90)\nplt.show()","b5c71fd5":"plt.figure(figsize=(14,5))\ndf = stocks.loc[pd.Timestamp('2008-09-01'):pd.Timestamp('2008-09-30')]\nplt.plot(df.index, df['Volume'],color='green')\nplt.grid(True)\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\nplt.gca().xaxis.set_major_locator(mdates.DayLocator())\nplt.xticks(rotation=90)\nplt.fill_between(df.index, df['Volume'],color='green')\nplt.show()","773310ec":"stock21 = stocks.loc[pd.Timestamp('2021-01-01'):pd.Timestamp('2021-07-22')]","d7dddc7e":"weekly_stock = stock21.resample('W').mean() # resampling weekly\nw1=weekly_stock.head()\nw1.style.background_gradient()","141ccbc4":"plt.figure(figsize=(12,5))\nplt.plot(weekly_stock.index, weekly_stock['Adj Close'], '-*',color='yellow')\nplt.grid(True)\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\nplt.gca().xaxis.set_major_locator(mdates.MonthLocator())\nplt.xticks(rotation=45)\nplt.show()","498d6243":"stocks['diff'] = stocks['Open'] - stocks['Close']\nstocks_diff = stocks.resample('W').mean() # resampling weekly\nsd=stocks_diff.tail(10)\n# sd.style.background_gradient().highlight_min(axis=0, color='red').highlight_max(axis=0, color='green')\ndef color_positive_green(val):\n    if val > 0:\n        color = 'green'\n    else:\n        color = 'red'\n    return 'color: %s' % color\n \nsd.style.applymap(color_positive_green)","04931142":"plt.figure(figsize=(12,5))\nsns.heatmap(stocks.corr(),annot=True)","191d80ad":"### > September month of year 2008 had most number of units traded. ","6f199400":"## **Analysing difference between open and close prices**","7e0da24d":"### > On 18 September 2008, highest number of units were traded.  ","8e437683":"## **Which day was it?**","4e8d9d90":"### > 2008 had highest number of units traded in a day. ","ab8dc939":"## **Adjusted Close price for the year 2021**","ca16af57":"## **Which month of year 2008 had most number of units traded?**","a8723679":"### > 2021 has highest adjusted close price and year 2008 had the lowest adjusted close price. "}}