{"cell_type":{"9655fab1":"code","6e3e5c9d":"code","ba9f2859":"code","46abf757":"code","47d2c10f":"code","f33d821c":"code","37fdb8d7":"code","8c6a7686":"code","2dae2811":"code","e6ba8d92":"code","8a890922":"code","f8cd2815":"markdown","b5c9e8d2":"markdown","524da168":"markdown","a6e3ccc3":"markdown","111a61ec":"markdown"},"source":{"9655fab1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport os\nimport numpy as np \nimport pandas as pd\n# filepath: list, include the path of the csv datafile\nfilepath = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        filepath.append(os.path.join(dirname, filename))\nfilepath","6e3e5c9d":"# read the city_attributes file\nfor _ in filepath:\n    if 'city_attributes' in _:\n        city_attributes = pd.read_csv(_)\ncity_attributes.head(2)","ba9f2859":"# drop latitude and longitude and rename city_attributes file as city_country\nto_drop = ['Latitude','Longitude']\ncity_country = city_attributes.drop(to_drop, axis=1)","46abf757":"# to_drop: list, contains cities not in US\nNonUS_cities = city_country[city_country['Country'].str.contains('United')==False] #False if excluding US cities\nNonUS_cities.shape  # 9 cities\nto_drop = NonUS_cities.City.tolist()","47d2c10f":"# load all the weather data with only US cities only \n# unit for all the files:\n# Humidity (%),Pressure (hPa), Temperature (K), Wind Direction (meteorological degrees), Wind Speed (m\/s).\nfor _ in filepath:\n    if 'temperature' in _:\n        temperature = pd.read_csv(_)\n        US_temperature = temperature.drop(to_drop,axis=1)\n        temperature.head()\n    elif 'humidity' in _:\n        humidity = pd.read_csv(_)\n        US_humidity = humidity.drop(to_drop,axis=1)\n    elif 'pressure' in _:\n        pressure = pd.read_csv(_)\n        US_pressure = pressure.drop(to_drop,axis=1)\n    elif 'weather_description' in _:\n        weather = pd.read_csv(_)\n        US_weather = weather.drop(to_drop,axis=1)\n    elif 'wind_speed' in _:\n        wind_speed = pd.read_csv(_)\n        US_wind_speed = wind_speed.drop(to_drop,axis=1)\n    elif 'wind_direction' in _:\n        wind_direction = pd.read_csv(_)\n        US_wind_direction = wind_direction.drop(to_drop,axis=1)","f33d821c":"# data_w_numbers: files that the contain numbers as input\n# data_w_texts: files that contain text\/string as input\ndata_w_numbers = [US_humidity,US_temperature,US_pressure,US_wind_speed,US_wind_direction]\ndata_w_texts = [US_weather]\n# fill NaN with mean\nfor data in data_w_numbers:\n    data.fillna(data.mean(),inplace = True)","37fdb8d7":"# convert unit for some weather files:\n# original unit:\n# Humidity (%),Pressure (hPa), Temperature (K), Wind Direction (meteorological degrees), Wind Speed (m\/s).\n# convert units to conventional units:\n# Humidity (%),Pressure (atm), Temperature (oC), Wind Direction (meteorological degrees), Wind Speed (mph).\nUS_temperature.iloc[:,1:] =  US_temperature.iloc[:,1:].apply(lambda x:x-273.15) # celcius degree\nUS_pressure.iloc[:,1:] = US_pressure.iloc[:,1:].apply(lambda x:x\/1013.25) # atm\nUS_wind_speed.iloc[:,1:] = US_wind_speed.iloc[:,1:].apply(lambda x:x*2.24) # mph","8c6a7686":"# drop nan values\nUS_weather2 = US_weather.dropna()\ncities = US_weather2.columns.tolist()[1:]\n\n# check all the weather conditions\n# leave only one word for description -rain,smoke,clear,etc\nfrom collections import Counter\nw_uniq = [] # all the unqiue weather conditions\nfor col in US_weather2.columns[1:]:\n    w_uniq.extend(list(set(US_weather2[col])))\nw_uniq = list(set(w_uniq))\nfor col in US_weather2.columns[1:]:\n    US_weather2[col] =  US_weather2[col].apply(lambda x:x.split()[-1])","2dae2811":"# take an initial glance at the data\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport itertools\nm,n = 2,3\nfig, ax = plt.subplots(m,n,figsize=(20, 10),sharey=True)\nplt.suptitle('Weather condition in 27 US cities',fontsize = 24,fontweight='bold')\npalette = itertools.cycle(sns.color_palette(\"Greens\", 10))\nlabels = ['humidity','temperature','pressure','wind speed','wind direction']\n\nfor i,data in enumerate(data_w_numbers):\n    x = data.columns[1:]\n    y = data.mean()\n    sns.barplot(y,x,label=labels[i],color= next(palette),orient='h',ax = ax[i\/\/n,i%n])\n    ax[i\/\/n,i%n].set_title(labels[i])\n    count = i+1\nwhile count<m*n:\n    ax[count\/\/n,count%n].set_axis_off()\n    count+=1","e6ba8d92":"# We found that the pressure are pretty similiar \n# so we are only interested in humidity, temperature and wind_speed\ndata_w_numbers2 = [US_humidity,US_temperature,US_wind_speed]\nlabels = ['humidity','temperature','wind speed']\nrotation = 90\n\npalette = itertools.cycle(sns.color_palette(\"Greens\", 10))\nm,n = 1,3\nfig, ax = plt.subplots(m,n,figsize=(20, 6))\nplt.suptitle('Selected weather condition in 27 US cities',fontsize = 20,fontweight='bold')\nfor i,data in enumerate(data_w_numbers2):\n    x = data.columns[1:]\n    y = data.mean()\n    sns.barplot(x,y,label=labels[i],color= next(palette),order = x[y.argsort()],ax = ax[i%n])\n    ax[i%n].set_title(labels[i])\n    ax[i%n].set_xticklabels(x[y.argsort()], rotation = rotation)","8a890922":"from collections import Counter\nm,n = 6,5\nfig, ax = plt.subplots(m,n,figsize=(20, 15))\nplt.suptitle('Weather description in 27 US cities',fontsize = 24,fontweight='bold')\nthres = 10\ncount = 0\npalette = {\"clear\":\"lemonchiffon\",\"clouds\":\"lightcyan\",\"mist\":\"whitesmoke\",\"others\":\"lightgrey\",\"rain\":\"cornflowerblue\"}\n# if the chance of the weather is less than thres, then we will category it into others\n# this is the new dic\nfor col in US_weather2.columns[1:]:\n    dic = dict(Counter(US_weather2[col]))\n    total = sum(list(dic.values()))\n    new_dic = {}\n    for i in dic.keys():\n        if dic[i]\/total*100 < thres:\n            new_dic['others'] = new_dic.get('others',0) + dic[i]\n        else:\n            new_dic[i] = dic[i]\n    weather = list(sorted([k for k in list(new_dic.keys()) if k!='others']))+['others']\n    chance = [new_dic[w] for w in weather]\n    temp_ax = ax[count\/\/n,count%n] \n    colors = [palette[w] for w in weather ]\n    wedges,texts,autotexts = temp_ax.pie(chance,colors=colors,startangle=90,counterclock=False,autopct='%1.0f%%')\n    temp_ax.set_title(cities[count])\n    temp_ax.legend(wedges,weather,title=\"weather\",loc=\"center left\",bbox_to_anchor=(1,0,0.5,1))\n    count+=1\n\nwhile count<m*n:\n    ax[count\/\/n,count%n].set_axis_off()\n    count+=1\n    \nplt.show()","f8cd2815":"###  Part IV: Visualize Text Data","b5c9e8d2":"# Weather Condition in 27 US Cities","524da168":"###  Part III: Visualize Numerical Data","a6e3ccc3":"### Part I: Import Data","111a61ec":"### Part II: Preprocessing Data"}}