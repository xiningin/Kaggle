{"cell_type":{"3d03c825":"code","01abe4a2":"code","784b0291":"code","659f026f":"code","694d9df3":"code","bb251403":"code","8e329d85":"code","fb95476d":"code","5e07f7e2":"code","8102bc7d":"code","4429bc8a":"code","82d07d8c":"code","d6099677":"code","9fab870a":"code","a4dd214c":"code","be7fad4d":"code","cbc73490":"code","d41e923a":"code","bf27f412":"code","8c53dcb6":"code","feaa52cd":"code","38bb6570":"code","bad2f281":"code","83785c0e":"code","3ae62700":"code","12ee6e3a":"code","bbb69807":"code","4eab5ce0":"code","e1dafebe":"code","92278f29":"code","c1c1bc4e":"code","10eb6f7c":"code","4230ddde":"code","f86f96a6":"markdown","93340c36":"markdown","a3dc2e42":"markdown","943507ef":"markdown","f6e12bf3":"markdown","b62ee9f5":"markdown","f1a4e997":"markdown","d8b6c519":"markdown"},"source":{"3d03c825":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01abe4a2":"data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndata.head()","784b0291":"data.drop(columns = ['PassengerId','Ticket'], inplace=True)\n\ndata.head()","659f026f":"data.shape","694d9df3":"data.isna().sum()","bb251403":"data[['Embarked']].dropna(axis=0,inplace=True)","8e329d85":"data.isnull().sum()","fb95476d":"data.Embarked.unique()","5e07f7e2":"# data = data[data.Embarked.notna()]  Another method to keep data without NaN values.","8102bc7d":"data.shape","4429bc8a":"data.Age.isna().sum()","82d07d8c":"data.Age = data.Age.fillna(data.Age.mean())","d6099677":"data.isnull().sum()","9fab870a":"data.Cabin.unique()","a4dd214c":"data.Cabin.isna().sum()","be7fad4d":"data.Cabin = data.Cabin.fillna('No Cabin')\ndata.Cabin.isna().sum()","cbc73490":"data.Cabin.unique()","d41e923a":"data.isnull().sum()","bf27f412":"data.Embarked.value_counts(normalize=True)","8c53dcb6":"data.Embarked.value_counts(normalize=True).plot.barh()","feaa52cd":"data.head()","38bb6570":"data[['Sex','Cabin']].value_counts(normalize=True)","bad2f281":"data.describe()","83785c0e":"data.Sex.value_counts(normalize=True)","3ae62700":"details = data[(data.Age >= 60) | (data.Age <= 20)]\ndetails.head()","12ee6e3a":"details.shape","bbb69807":"details.Sex.value_counts()","4eab5ce0":"survived = data[data.Survived == 1]\nsurvived.head()","e1dafebe":"survived.Sex.value_counts(normalize=True)","92278f29":"data.groupby(\"Embarked\").sum()['Fare'].sort_values(ascending = False)","c1c1bc4e":"data.groupby(\"Embarked\").max()['Fare']","10eb6f7c":"only_f = data[data.Sex == \"female\"]\nonly_f.groupby('Embarked').mean()['Fare']","4230ddde":"data[data.Sex == \"female\"].groupby('Embarked').mean()['Fare'].sort_values(ascending=False)","f86f96a6":"#Group the data w.r.t Embarked and get the total fare collected\n\nWhich city collected the highest total fare?","93340c36":"Sorted averages in descending","a3dc2e42":"Which gender had more chances of survival? How much?","943507ef":"Get details of people aged above 60 or below 20?","f6e12bf3":"What is the average fare taken from females from each embarked city?","b62ee9f5":"Checking NaN ","f1a4e997":"Which city collected the highest fare on a single ticket?","d8b6c519":"What % of passengers were female?"}}