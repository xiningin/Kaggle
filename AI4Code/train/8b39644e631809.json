{"cell_type":{"db5b1b55":"code","49cd0edb":"code","03910c28":"code","fd15dba8":"code","2e71eb52":"code","8dcb8dc3":"code","607b0fb9":"code","bf070afc":"code","f7c39e45":"code","0b5a990a":"code","bbc7ace4":"code","fb79cee4":"code","e79f4903":"code","02da1053":"code","0029701c":"code","46c7fe72":"code","4b4a1ae1":"code","1ded0cb7":"code","b7c3795f":"code","efed3ae7":"code","c28ea5be":"code","db966691":"code","1b84fe2c":"code","8c427ec6":"code","6644cbe7":"code","b41d5d5b":"code","a9e03ea8":"code","4a68edd1":"code","59e84497":"markdown","3ff5f10c":"markdown","72dea69a":"markdown","25d16b1a":"markdown"},"source":{"db5b1b55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49cd0edb":"# Required Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","03910c28":"# Load Data\ndf = pd.read_csv('\/kaggle\/input\/perrin-freres-monthly-champagne-sales\/Perrin Freres monthly champagne sales millions.csv')\n# Print Head of data\ndf.head()","fd15dba8":"# Print Tail of data\ndf.tail()","2e71eb52":"# Changing the column name\ndf.columns = ['Months','Sales']\ndf.head()","8dcb8dc3":"# Dropping last 2 rows\ndf.drop([105,106],inplace=True)","607b0fb9":"df.tail()","bf070afc":"# Converting Month to datetime datatype\ndf['Months'] = pd.to_datetime(df['Months'])","f7c39e45":"# Desription\ndf.info()","0b5a990a":"# Setting Month as Index\ndf.set_index('Months',inplace=True)","bbc7ace4":"df.head()","fb79cee4":"# Visualizing the data\ndf.plot()","e79f4903":"# Testing for stationarity\nfrom statsmodels.tsa.stattools import adfuller\n","02da1053":"# Ho : Data is not Stationary\n# H1 : Data is Stationary\ndef adfuller_test(sales):\n  result = adfuller(sales)\n  labels = ['ADF Statistics','p-value','No of lags','No of Observations']\n  for value,label in zip(result,labels):\n    print('{} : {}'.format(label,value))\n  if result[1]<0.05:\n    print('Reject Null Hypothesis, Data is Stationary')\n  else:\n    print('Reject Alternate Hypothesis, Data is non Stationary') ","0029701c":"adfuller_test(df['Sales'])","46c7fe72":"# Seasonal Differencing\ndf['Season Differencing'] = df['Sales'] - df['Sales'].shift(12) ","4b4a1ae1":"df.head(14)","1ded0cb7":"# Dickey Fuller test on Seasonal Differencing\nadfuller_test(df['Season Differencing'].dropna())","b7c3795f":"# Plot the Seasonal Differencing\ndf['Season Differencing'].plot()","efed3ae7":"import statsmodels.api as sm\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf","c28ea5be":"fig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(df['Season Differencing'].dropna(),lags=40,ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(df['Season Differencing'].dropna(),lags=40,ax=ax2)\n\n","db966691":"model = sm.tsa.statespace.SARIMAX(df['Sales'],order=[1,1,1],seasonal_order=(1,1,1,12))\nresults = model.fit()","1b84fe2c":"# Predictions\ndf['Forecast'] = results.predict(start=90,end=103,dynamic=True)","8c427ec6":"# Plotting \ndf[['Sales','Forecast']].plot(figsize=(12,8))","6644cbe7":"# Creating additional data\nfrom pandas.tseries.offsets import DateOffset\nfuture_dates=[df.index[-1]+ DateOffset(months=x)for x in range(0,24)]\nfuture_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)","b41d5d5b":"# Concatinating\nfuture_df=pd.concat([df,future_datest_df])","a9e03ea8":"# Predictions \nfuture_df['forecast'] = results.predict(start = 104, end = 120, dynamic= True) ","4a68edd1":"# Plotting\nfuture_df[['Sales', 'forecast']].plot(figsize=(12, 8))","59e84497":"## Differencing","3ff5f10c":"## SARIMAX","72dea69a":"## Auto Regressive Model","25d16b1a":"## Dickey Fuller test"}}