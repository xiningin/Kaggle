{"cell_type":{"664d1557":"code","632824d5":"code","ab02cd34":"code","0f340657":"code","6da6c3c9":"code","d8f9166d":"code","2c617043":"code","ab6d7325":"code","c672c6c3":"code","0d2e0e69":"code","e9388f2d":"code","578a88be":"code","c7524ca3":"code","0f631405":"code","b3524322":"code","42c3b96c":"code","f6da711c":"code","5e70c96b":"code","a5ea90d5":"code","0af730f9":"code","ace4a9e4":"code","cdee0a6b":"code","1d09bcf9":"code","e17db4c6":"code","4e7d5abf":"code","79060599":"code","f902e7e7":"code","e150d862":"code","f7b74497":"code","77b8942c":"code","abcb3eea":"code","3171f33f":"code","35e89dd3":"code","f095df8a":"code","ac31f94c":"code","d7359c01":"code","72b8ef43":"code","678e782e":"code","5d6d53b2":"code","aa8ac175":"code","0d070232":"markdown"},"source":{"664d1557":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","632824d5":"df=pd.read_csv('..\/input\/craigslist-carstrucks-data\/vehicles.csv')\n","ab02cd34":"pd.set_option('max_columns',100)","0f340657":"df.head()","6da6c3c9":"dr=['url','region_url','region','description','image_url','lat','long','vin','id','county','title_status',\n    'model','state']\ndf_1=df.drop(dr,axis=1)","d8f9166d":"df_1.shape","2c617043":"df_1.describe()","ab6d7325":"df_1.info()","c672c6c3":"df_1=df_1.dropna()","0d2e0e69":"df_1.head()","e9388f2d":"cat_df=df_1.select_dtypes(include='object')\ncat_df.columns","578a88be":"cat_df.head()","c7524ca3":"import seaborn as sns\nimport matplotlib.pyplot as plt \nplt.figure(figsize=(10,6))\nsns.heatmap(df_1.corr(),annot=True)","0f631405":"num_df=df_1.select_dtypes(exclude='object')","b3524322":"num_df.head()","42c3b96c":"plt.figure(figsize=(10,6))\nplt.scatter('year','price',data=df_1,alpha=0.5)\n","f6da711c":"plt.figure(figsize=(10,6))\nplt.scatter(df_1.odometer,df_1.price)","5e70c96b":"plt.figure(figsize=(10,6))\ncat_df.manufacturer.value_counts().plot(kind='bar')","a5ea90d5":"plt.figure(figsize=(20,12))\ndf_1.year.value_counts().plot(kind='bar')\n","0af730f9":"df_1.condition.value_counts().plot(kind='bar')","ace4a9e4":"df_1.paint_color.value_counts().plot(kind='bar')","cdee0a6b":"df_1.groupby('paint_color')['price'].median().plot(kind='bar')","1d09bcf9":"from sklearn.preprocessing import LabelEncoder\nlabel=LabelEncoder()\nfor col in cat_df.columns:\n    cat_df[col]=label.fit_transform(cat_df[col].astype('str'))","e17db4c6":"cat_df.head()","4e7d5abf":"cat_df.shape","79060599":"df_1.head()","f902e7e7":"df_1.groupby('transmission')['price'].median().plot()","e150d862":"plt.figure(figsize=(10,6))\ndf_1.groupby('cylinders')['price'].median().plot()","f7b74497":"df_1.transmission.value_counts().plot(kind='bar')","77b8942c":"final = cat_df.merge(num_df,on=cat_df.index)","abcb3eea":"from sklearn.model_selection import train_test_split\ny=final['price']\nx=final.drop('price',axis=1)\ntrain_x,valid_x,train_y,valid_y=train_test_split(x,y,test_size=0.2,random_state=1)","3171f33f":"train_x.shape","35e89dd3":"from sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor(n_estimators=100)\nrfr.fit(train_x,train_y)\nrfr.score(valid_x,valid_y)\npredict_1=rfr.predict(valid_x)","f095df8a":"predict_1=rfr.predict(valid_x)","ac31f94c":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(valid_y,predict_1)\n","d7359c01":"from sklearn.tree import DecisionTreeRegressor\ndtr=DecisionTreeRegressor(random_state=0)\ndtr.fit(train_x,train_y)\npredict_2=dtr.predict(valid_x)","72b8ef43":"mean_absolute_error(valid_y,predict_2)","678e782e":"from sklearn.linear_model import Ridge\nr=Ridge(alpha=1)\nr.fit(train_x,train_y)\npre=r.predict(valid_x)","5d6d53b2":"mean_absolute_error(valid_y,pre)","aa8ac175":"import tensorflow as tf\nmodel_1=tf.keras.Sequential([tf.keras.layers.Dense(12,input_dim=12,activation='relu'),\n                          tf.keras.layers.Dense(256,activation='relu'),\n                          tf.keras.layers.Dense(256,activation='relu'),\n                          tf.keras.layers.Dense(1,activation='linear')])\nmodel_1.compile(loss='mae',optimizer='adam',metrics=['accuracy'])\nmodel_1.fit(train_x,train_y,epochs=200)","0d070232":"**Baseline Model**\n"}}