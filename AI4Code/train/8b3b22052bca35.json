{"cell_type":{"4cdb2d06":"code","d9dd0f82":"code","5350c5e7":"code","ccc29a6a":"code","b986097b":"code","16fbf9b5":"code","bcd0cf7a":"code","28b418e7":"code","4c0f4e57":"code","d9f6813d":"code","e368d867":"code","b94e49f0":"code","0d5d904d":"code","a825ddec":"code","cdb5aee5":"code","4396809e":"code","8d28871a":"code","4522732c":"code","7ae2fd10":"code","777894fd":"code","f5b2838f":"code","52b7f163":"code","8119a870":"code","ec1055b0":"code","3716b659":"code","46466d58":"code","4077db4b":"code","15c76f5d":"code","00ace52b":"markdown","469cb697":"markdown","a4f2cee6":"markdown","2baebaf2":"markdown","4a6ec9e1":"markdown","27d162c3":"markdown","58216efe":"markdown","ac4f021a":"markdown","a6cf79c3":"markdown","40d4dfdd":"markdown","868680c3":"markdown","0a5eb86a":"markdown","18e65bbb":"markdown","3b884098":"markdown","34b0ce9d":"markdown","96f82aec":"markdown","8cf7c29d":"markdown","f556d5a4":"markdown","b24ec827":"markdown","e107b71d":"markdown","8ecbefad":"markdown","2403b70a":"markdown","33dae634":"markdown","c9050224":"markdown"},"source":{"4cdb2d06":"from datetime import datetime\nimport numpy as np             #for numerical computations like log,exp,sqrt etc\nimport pandas as pd            #for reading & storing data, pre-processing\nimport matplotlib.pylab as plt #for visualization\n#for making sure matplotlib plots are generated in Jupyter notebook itself\n%matplotlib inline             \nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10, 6","d9dd0f82":"#path = \"input\/AirPassengers.csv\" #For local\npath = \"..\/input\/AirPassengers.csv\" #For Kaggle\ndataset = pd.read_csv(path)\n#Parse strings to datetime type\ndataset['Month'] = pd.to_datetime(dataset['Month'],infer_datetime_format=True) #convert from string to datetime\nindexedDataset = dataset.set_index(['Month'])\nindexedDataset.head(5)","5350c5e7":"## plot graph\nplt.xlabel('Date')\nplt.ylabel('Number of air passengers')\nplt.plot(indexedDataset)","ccc29a6a":"#Determine rolling statistics\nrolmean = indexedDataset.rolling(window=12).mean() #window size 12 denotes 12 months, giving rolling mean at yearly level\nrolstd = indexedDataset.rolling(window=12).std()\nprint(rolmean,rolstd)","b986097b":"#Plot rolling statistics\norig = plt.plot(indexedDataset, color='blue', label='Original')\nmean = plt.plot(rolmean, color='red', label='Rolling Mean')\nstd = plt.plot(rolstd, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","16fbf9b5":"#Perform Augmented Dickey\u2013Fuller test:\nprint('Results of Dickey Fuller Test:')\ndftest = adfuller(indexedDataset['#Passengers'], autolag='AIC')\n\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n    \nprint(dfoutput)","bcd0cf7a":"#Estimating trend\nindexedDataset_logScale = np.log(indexedDataset)\nplt.plot(indexedDataset_logScale)","28b418e7":"#The below transformation is required to make series stationary\nmovingAverage = indexedDataset_logScale.rolling(window=12).mean()\nmovingSTD = indexedDataset_logScale.rolling(window=12).std()\nplt.plot(indexedDataset_logScale)\nplt.plot(movingAverage, color='red')","4c0f4e57":"datasetLogScaleMinusMovingAverage = indexedDataset_logScale - movingAverage\ndatasetLogScaleMinusMovingAverage.head(12)\n\n#Remove NAN values\ndatasetLogScaleMinusMovingAverage.dropna(inplace=True)\ndatasetLogScaleMinusMovingAverage.head(10)","d9f6813d":"def test_stationarity(timeseries):\n    \n    #Determine rolling statistics\n    movingAverage = timeseries.rolling(window=12).mean()\n    movingSTD = timeseries.rolling(window=12).std()\n    \n    #Plot rolling statistics\n    orig = plt.plot(timeseries, color='blue', label='Original')\n    mean = plt.plot(movingAverage, color='red', label='Rolling Mean')\n    std = plt.plot(movingSTD, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey\u2013Fuller test:\n    print('Results of Dickey Fuller Test:')\n    dftest = adfuller(timeseries['#Passengers'], autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)\n    ","e368d867":"test_stationarity(datasetLogScaleMinusMovingAverage)","b94e49f0":"exponentialDecayWeightedAverage = indexedDataset_logScale.ewm(halflife=12, min_periods=0, adjust=True).mean()\nplt.plot(indexedDataset_logScale)\nplt.plot(exponentialDecayWeightedAverage, color='red')","0d5d904d":"datasetLogScaleMinusExponentialMovingAverage = indexedDataset_logScale - exponentialDecayWeightedAverage\ntest_stationarity(datasetLogScaleMinusExponentialMovingAverage)","a825ddec":"datasetLogDiffShifting = indexedDataset_logScale - indexedDataset_logScale.shift()\nplt.plot(datasetLogDiffShifting)","cdb5aee5":"datasetLogDiffShifting.dropna(inplace=True)\ntest_stationarity(datasetLogDiffShifting)","4396809e":"decomposition = seasonal_decompose(indexedDataset_logScale) \n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.subplot(411)\nplt.plot(indexedDataset_logScale, label='Original')\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\n\nplt.subplot(411)\nplt.plot(seasonal, label='Seasonality')\nplt.legend(loc='best')\n\nplt.subplot(411)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\n\nplt.tight_layout()\n\n#there can be cases where an observation simply consisted of trend & seasonality. In that case, there won't be \n#any residual component & that would be a null or NaN. Hence, we also remove such cases.\ndecomposedLogData = residual\ndecomposedLogData.dropna(inplace=True)\ntest_stationarity(decomposedLogData)","8d28871a":"decomposedLogData = residual\ndecomposedLogData.dropna(inplace=True)\ntest_stationarity(decomposedLogData)","4522732c":"#ACF & PACF plots\n\nlag_acf = acf(datasetLogDiffShifting, nlags=20)\nlag_pacf = pacf(datasetLogDiffShifting, nlags=20, method='ols')\n\n#Plot ACF:\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(datasetLogDiffShifting)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(datasetLogDiffShifting)), linestyle='--', color='gray')\nplt.title('Autocorrelation Function')            \n\n#Plot PACF\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(datasetLogDiffShifting)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(datasetLogDiffShifting)), linestyle='--', color='gray')\nplt.title('Partial Autocorrelation Function')\n            \nplt.tight_layout()            ","7ae2fd10":"#AR Model\n#making order=(2,1,0) gives RSS=1.5023\nmodel = ARIMA(indexedDataset_logScale, order=(2,1,0))\nresults_AR = model.fit(disp=-1)\nplt.plot(datasetLogDiffShifting)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_AR.fittedvalues - datasetLogDiffShifting['#Passengers'])**2))\nprint('Plotting AR model')","777894fd":"#MA Model\nmodel = ARIMA(indexedDataset_logScale, order=(0,1,2))\nresults_MA = model.fit(disp=-1)\nplt.plot(datasetLogDiffShifting)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_MA.fittedvalues - datasetLogDiffShifting['#Passengers'])**2))\nprint('Plotting MA model')","f5b2838f":"# AR+I+MA = ARIMA model\nmodel = ARIMA(indexedDataset_logScale, order=(2,1,2))\nresults_ARIMA = model.fit(disp=-1)\nplt.plot(datasetLogDiffShifting)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_ARIMA.fittedvalues - datasetLogDiffShifting['#Passengers'])**2))\nprint('Plotting ARIMA model')","52b7f163":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\nprint(predictions_ARIMA_diff.head())","8119a870":"#Convert to cumulative sum\npredictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\nprint(predictions_ARIMA_diff_cumsum)","ec1055b0":"predictions_ARIMA_log = pd.Series(indexedDataset_logScale['#Passengers'].iloc[0], index=indexedDataset_logScale.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)\npredictions_ARIMA_log.head()","3716b659":"# Inverse of log is exp.\npredictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(indexedDataset)\nplt.plot(predictions_ARIMA)","46466d58":"indexedDataset_logScale","4077db4b":"#We have 144(existing data of 12 yrs in months) data points. \n#And we want to forecast for additional 120 data points or 10 yrs.\nresults_ARIMA.plot_predict(1,264) \n#x=results_ARIMA.forecast(steps=120)","15c76f5d":"#print(x[1])\n#print(len(x[1]))\n#print(np.exp(x[1]))","00ace52b":"# Time Series For beginners with ARIMA\n\n**Author:** Arindam Chatterjee  \n**Start Date:** 10th July, 2018\n\n**Purpose:** The objective of this notebook is to have a simplified template to understand Time series forecasting with ARIMA model in python, acting more as a tutorial.\n\n**Objective:** Build a model to forecast the demand(passenger traffic) in Airplanes. The data is classified in date\/time and the passengers travelling per month","469cb697":"We observe that the Time Series is stationary & also the series for moving avg & std. dev. is almost parallel to x-axis thus they also have no trend.  \nAlso,     \n1. p-value has decreased from 0.022 to 0.005.  \n2. Test Statistic value is very much closer to the Critical values.  \nBoth the points say that our current transformation is better than the previous logarithmic transformation. Even though, we couldn't observe any differences by visually looking at the graphs, the tests confirmed decay to be much better.\n\nBut lets try one more time & find if an even better solution exists. We will try out the simple time shift technique, which is simply:  \n\nGiven a set of observation on the time series:  \n$ x0, x1, x2, x3, .... xn $  \n\nThe shifted values will be:    \n$ null, x0, x1, x2,.... xn $                             <---- basically all xi's shifted by 1 pos to right  \n\nThus, the time series with time shifted values are:   \n$ null, (x1-x0), (x2-x1), (x3-x2), (x4-x3),.... (xn-x_{n-1}) $   ","a4f2cee6":"## The End","2baebaf2":"From above graph, it seems that exponential decay is not holding any advantage over log scale as both the corresponding curves are similar. But, in statistics, inferences cannot be drawn simply by looking at the curves. Hence, we perform the ADCF test again on the decay series below.","4a6ec9e1":"## QnA <a name=\"QnA\"><\/a>\n\n**1. What is Time series analysis?**  \nA. Time Series is a series of observations taken at specified time intervals usually equal intervals. Analysis of the series helps us to predict future values based on previous observed values. In Time series, we have only 2 variables, time & the variable we want to forecast.  \n\n  \n**2. Why & where Time Series is used?**  \nA. Time series data can be analysed in order to extract meaningful statistics and other charecteristsics. It's used in atleast the 4 scenarios:  \n    a) Business Forecasting  \n    b) Understand past behavior  \n    c) Plan the future  \n    d) Evaluate current accomplishment  \n  \n**3. When shouldn't we use Time Series Analysis?**  \nA. We don't need to apply Time series in atleast the following 2 cases:  \n    a) The dependant variable(y) (that is supposed to vary with time) is constant. Eq: y=f(x)=4, a line parallel to x-axis(time) will always remain the same.  \n    b) The dependant variable(y) represent values that can be denoted as a mathematical function. Eq: sin(x), log(x), Polynomials etc. Thus, we can directly get value at some time using the function itself. No need of forecasting.  \n  \n**4. What are the components of Time Series?**  \nA. There are 4 components:  \n    a) Trend - Upward & downward movement of the data with time over a large period of time. Eq: Appreciation of Dollar vs rupee.  \n    b) Seasonality - seasonal variances. Eq: Ice cream sales increases in Summer only  \n    c) Noise or Irregularity - Spikes & troughs at random intervals  \n    d) Cyclicity - behavior that repeats itself after large interval of time, like months, years etc.  \n    \n**5. What is Stationarity?**    \nA. Before applying any statistical model on a Time Series, the series has to be staionary, which means that, over different time  periods,  \n    a) It should have constant mean.  \n    b) It should have constant variance or standard deviation.  \n    c) Auto-covariance should not depend on time.  \n\nTrend & Seasonality are two reasons why a Time Series is not stationaru & hence need to be corrected.\n    \n**6. Why does Time Series(TS) need to be stationary?**  \nA. It is because of the following reasons:  \n    a) If a TS has a particular behavior over a time interval, then there's a high probability that over a different interval, it will have same behavior, provided TS is stationary. This helps in forecasting accurately.  \n    b) Theories & Mathematical formulas ae more mature & easier to apply for as TS which is stationary.  \n\n**7. Tests to check if a series is stationary or not**  \nA. There are 2 ways to check for Stationarity of a TS:  \n    a) Rolling Statistics - Plot the moving avg or moving standard deviation to see if it varies with time. Its a visual technique.  \n    b) ADCF Test - Augmented Dickey\u2013Fuller test is used to gives us various values that can help in identifying stationarity. The Null hypothesis says that a TS is non-stationary. It comprises of a **Test Statistics** & some **critical values** for some confidence levels. If the Test statistics is less than the critical values, we can reject the null hypothesis & say that the series is stationary. THE ADCF test also gives us a **p-value**. Acc to the null hypothesis, lower values of p is better.\n    \n**8. What is ARIMA model?**      \nA. ARIMA(Auto Regressive Integrated Moving Average) is a combination of 2 models AR(Auto Regressive) & MA(Moving Average). It has 3 hyperparameters - P(auto regressive lags),d(order of differentiation),Q(moving avg.) which respectively comes from the AR, I & MA components. The AR part is correlation between prev & current time periods. To smooth out the noise, the MA part is used. The I part binds together the AR & MA parts. \n\n**9. How to find value of P & Q for ARIMA ?**  \nA. We need to take help of ACF(Auto Correlation Function) & PACF(Partial Auto Correlation Function) plots.\nACF & PACF graphs are used to find value of P & Q for ARIMA. We need to check, for which value in x-axis, graph line drops to 0 in y-axis for 1st time.  \nFrom PACF(at y=0), get P  \nFrom ACF(at y=0), get Q  \n\n**10. What Is ADCF test?**  \nA. In statistics and econometrics, an augmented Dickey\u2013Fuller test (ADF) tests the null hypothesis that a unit root is present in a time series sample. The alternative hypothesis is different depending on which version of the test is used, but is usually stationarity or trend-stationarity. It is an augmented version of the Dickey\u2013Fuller test for a larger and more complicated set of time series models.\n\nThe augmented Dickey\u2013Fuller (ADF) statistic, used in the test, is a negative number. The more negative it is, the stronger the rejection of the hypothesis that there is a unit root at some level of confidence.\n\np value(0<=p<=1) should be as low as possible. Critical values at different confidence intervals should be close to the Test statistics value.\n\n**11. What is Exponential Smoothing?**  \nA. *Exponential smoothing* is a rule of thumb technique for smoothing time series data using the exponential window function. Whereas in the simple moving average the past observations are weighted equally, exponential functions are used to assign exponentially decreasing weights over time. It is an easily learned and easily applied procedure for making some determination based on prior assumptions by the user, such as seasonality. Exponential smoothing is often used for analysis of time-series data.\n\nThe raw data sequence is often represented by ${x_{t}}$ beginning at time $t=0$, and the output of the exponential smoothing algorithm is commonly written as ${s_{t}}$, which may be regarded as a best estimate of what the next value of $x$ will be. When the sequence of observations begins at time $t=0$, the simplest form of exponential smoothing is given by the formulas:  \n\n$s_{0} = x_{0}$  \n$s_{t} = \u03b1*x_{t} + (1-\u03b1)*s_{t-1}$  , $t>0$  \n\nwhere $\u03b1$ is the smoothing factor, and $0<\u03b1<1$.\n\n**12. What is Exponential decay?**  \nA. A quantity is subject to exponential decay if it decreases at a rate proportional to its current value. Symbolically, this process can be expressed by the following differential equation, where N is the quantity and \u03bb (lambda) is a positive rate called the exponential decay constant:\n\n$dN\/dt = -\u03bbN$\n\nThe solution to this equation (see derivation below) is:  \n$N(t) = N_{0}*e^{-\u03bbt}$  \n\nwhere N(t) is the quantity at time t, and N0 = N(0) is the initial quantity, i.e. the quantity at time t = 0.  \n\n**Half Life** is the time required for the decaying quantity to fall to one half of its initial value. It is denoted by $t_{1\/2}$. The half-life can be written in terms of the decay constant as:  \n\n$t_{1\/2} = ln(2)\/\u03bb$  \n","27d162c3":"## Table of contents\n1. [QnA](#QnA)\n2. [Import Libraries](#Import-Libraries)\n3. [Read Data](#read-data)\n4. [Data Transformation to achieve Stationarity](#data-transform)\n    1. [Log Scale Transformation](#log)\n    2. [Exponential Decay Transformation](#exp)\n    3. [Time Shift Transformation](#shift)    \n5. [Plotting ACF & PACF](#acf-pacf)\n6. [Building Models](#model)\n7. [Prediction & Reverse transformations](#prediction)\n","58216efe":"### Log Scale Transformation  <a name=\"log\"><\/a>","ac4f021a":"By combining AR & MA into ARIMA, we see that RSS value has decreased from either case to 1.0292, indicating ARIMA to be better than its individual component models.   \n\nWith the ARIMA model built, we will now generate predictions. But, before we do any plots for predictions ,we need to reconvert the predictions back to original form. This is because, our model was built on log transformed data.","a6cf79c3":"From above graph, we see that even though rolling mean is not stationary, it is still better than the previous case, where no transfromation were applied to series. So we can atleast say that we are heading in the right direction.\n\nWe know from above graph that both the Time series with log scale as well as its moving average have a trend component. Thus we can apply a elementary intuition: subtraction one from the other should remove the trend component of both. Its like:  \n\n$log scale L = stationary part(L1) + trend(LT)$   \n$moving avg of log scale A = stationary part(A1) + trend(AT)$   \n$result series R = L - A = (L1+LT) - (A1+AT) = (L1-A1) + (LT-AT)$\n\nSince, L & A are series & it moving avg, their trend will be more or less same, Hence  \nLT-AT nearly equals to 0  \n\nThus trend component will be almost removed. And we have,  \n  \n$R = L1 - A1$, our final non-trend curve","40d4dfdd":"From the ACF graph, we see that curve touches y=0.0 line at x=2. Thus, from theory, Q = 2\nFrom the PACF graph, we see that curve touches y=0.0 line at x=2. Thus, from theory, P = 2\n\nARIMA is AR + I + MA. Before, we see an ARIMA model, let us check the results of the individual AR & MA model. Note that, these models will give a value of RSS. Lower RSS values indicate a better model.","868680c3":"For a Time series to be stationary, its ADCF test should have:\n1. p-value to be low (according to the null hypothesis)\n2. The critical values at 1%,5%,10% confidence intervals should be as close as possible to the Test Statistics\n\nFrom the above ADCF test result, we see that p-value(at max can be 1.0) is very large. Also critical values are no where close to the Test Statistics. Hence, we can safely say that **our Time Series at the moment is not stationary**","0a5eb86a":"## Prediction & Reverse transformations <a name=\"prediction\"><\/a>","18e65bbb":"## Read Data  <a name=\"read-data\"><\/a>\nTime series deals with 2 columns, one is temporal ie: month in this case & another is the value to be forecasted ie: airplane passengers. To make plotting graphs easier, we set the index of pandas dataframe to the Month. During plots, the index will act by default as the x-axis & since it has only 1 more column, that will be automatically taken as the y-axis","3b884098":"## Import Libraries <a name=\"Import-Libraries\"><\/a>","34b0ce9d":"### Exponential Decay Transformation   <a name=\"exp\"><\/a>","96f82aec":"## Data Transformation to achieve Stationarity <a name=\"data-transform\"><\/a>\n\nThere are a couple of ways to achieve stationarity through data transformation like taking $log_{10}$,$log_{e}$, square, square root, cube, cube root, exponential decay, time shift and so on ...\n\nIn our notebook, lets start of with log transformations. Our objective is to remove the trend component. Hence,  flatter curves( ie: paralle to x-axis) for time series and rolling mean after taking log would say that our data transformation did a good job.","8cf7c29d":"We see that our predicted forecasts are very close to the real time series values indicating a fairly accurate model.","f556d5a4":"From the plot below, we can see that there is a Trend compoenent in th series. Hence, we now check for stationarity of the data","b24ec827":"### Time Shift Transformation  <a name=\"shift\"><\/a>","e107b71d":"From above graph, we observe that our intuition that *\"subtracting two related series having similar trend components will make the result stationary\"* is true. We find that:  \n\n1. p-value has reduced from 0.99 to 0.022.  \n2. The critical values at 1%,5%,10% confidence intervals are pretty close to the Test Statistic.\nThus, from above 2 points, we can say that our given series is stationary.  \n\nBut, in the spirit of getting higher accuracy, let us explore & try to find a better scale than our current log.\n\nLet us try out Exponential decay.  \nFor further info, refer to my answer 12 at the top of the notebook on it.","8ecbefad":"From above 2 graphs, we can see that, visually this is the best result as our series along with rolling statistic values of moving avg & moving std. dev. is very much flat & stationary. But, the ADCF test shows us that:\n1. p-value of 0.07 is not as good as 0.005 of exponential decay.  \n2. Test Statistic value not as close to the critical values as that for exponential decay.  \n  \nWe have thus tried out 3 different transformation: log, exp decay & time shift. For simplicity, we will go with the log scale. The reason for doing this is that we can revert back to the original scale during forecasting.\n\nLet us now break down the 3 components of the log scale series using a system libary function. Once, we separate our the components, we can simply ignore trend & seasonality and check on the nature of the residual part.","2403b70a":"From the above graph, we see that rolling mean itself has a trend component even though rolling standard deviation is fairly constant with time. For our time series to be stationary, we need to ensure that both the rolling statistics ie: mean & std. dev. remain time invariant or constant with time. Thus the curves for both of them have to be parallel to the x-axis, which in our case is not so. \n\nTo further augment our hypothesis that the time series is not stationary, let us perform the ADCF test.","33dae634":"## Building Models <a name=\"model\"><\/a>","c9050224":"## Plotting ACF & PACF <a name=\"acf-pacf\"><\/a>"}}