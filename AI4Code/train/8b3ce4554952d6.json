{"cell_type":{"48919eea":"code","38f9fb9a":"code","9782d580":"code","b23a5585":"code","b7a2643d":"code","21638155":"code","f8418485":"code","4e2628c3":"code","b3fdd41c":"code","0d7b6eec":"code","0303c9aa":"code","6c0bf5cd":"code","758cf182":"code","749e7410":"code","45f1dacd":"code","9abb81aa":"code","af8f945a":"code","19f258d5":"code","ed317375":"code","01cf177e":"code","799fbc7f":"code","472f32d8":"code","afdf228a":"code","39f0db95":"code","033b59ef":"code","655b4e07":"code","fb04209c":"code","83ef2c0a":"markdown","c8305484":"markdown","f4150fb0":"markdown","974cf10d":"markdown","0df234ae":"markdown","dd649e30":"markdown","3fab0c9a":"markdown","9a067f2d":"markdown","5fcea16d":"markdown","d94ccdf0":"markdown","20830b7e":"markdown","294e4a36":"markdown","4ce206d1":"markdown","bd1226b4":"markdown","eed5edaa":"markdown","b3a01d81":"markdown","40ad3f1b":"markdown","31fb1af4":"markdown"},"source":{"48919eea":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential,Model\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.layers import Dense,Flatten,Dropout\nfrom tensorflow.keras.layers import Activation\nfrom tensorflow.keras.layers import Conv2D,MaxPooling2D,Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import categorical_crossentropy\nfrom tensorflow.keras.utils import to_categorical,plot_model\n\nfrom IPython.display import Image\n\nimport time\nimport sys\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","38f9fb9a":"df_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ndf_submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","9782d580":"df_submission","b23a5585":"print(\"Train File\")\ndf_train.head()","b7a2643d":"print(\"Test File\")\ndf_test.head()","21638155":"print(\"Train File\", df_train.shape)\nprint(\"Test File\", df_test.shape)","f8418485":"print(\"Train File\", df_train.isnull().any().sum())\nprint(\"Test File\", df_test.isnull().any().sum())","4e2628c3":"print(\"Train File\")\ndf_train.describe()","b3fdd41c":"print(\"Test File\")\ndf_test.describe()","0d7b6eec":"sns.countplot(df_train['label'])\nplt.show()","0303c9aa":"y_train = df_train['label'].astype('float32')\nX_train = df_train.drop(['label'], axis=1).astype('int32')\nX_test = df_test.astype('float32')\nX_train.shape, y_train.shape, X_test.shape","6c0bf5cd":"X = np.array(X_train).reshape(df_train.shape[0],28,28,1)\nY = np.array(y_train).reshape(df_train.shape[0],1)\nf, axes = plt.subplots(2, 10, sharey=True,figsize=(20,20))\nfor i,ax in enumerate(axes.flat):\n    ax.axis('off')\n    ax.imshow(X[i,:,:,0],cmap=\"gray\")","758cf182":"X_train = X_train\/255\nX_test = X_test\/255","749e7410":"X_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nX_train.shape , X_test.shape","45f1dacd":"y_train = to_categorical(y_train, num_classes = 10)\ny_train.shape","9abb81aa":"x = tf.Variable(5.0)\n\nwith tf.GradientTape() as tape:\n    y = x**3","af8f945a":"# dy = 3x * dx\ndy_dx = tape.gradient(y, x)\ndy_dx.numpy()","19f258d5":"# tf.GradientTape works on any tensor:\n\nw = tf.Variable(tf.random.normal((3, 2)), name='w')\nb = tf.Variable(tf.zeros(2, dtype=tf.float32), name='b')\nx = [[1., 2., 3.]]\n\nwith tf.GradientTape(persistent=True) as tape:\n    y = x @ w + b\n    loss = tf.reduce_mean(y**2)\n","ed317375":"[dl_dw, dl_db] = tape.gradient(loss, [w, b])","01cf177e":"print(w.shape)\nprint(dl_dw.shape)","799fbc7f":"x = tf.constant(3.0)\nwith tf.GradientTape() as g:\n    g.watch(x)\n    with tf.GradientTape() as gg:\n        gg.watch(x)\n        y = x * x\n        dy_dx = gg.gradient(y, x)\n        print(dy_dx.numpy())\n    d2y_dx2 = g.gradient(dy_dx, x)\n    print(d2y_dx2.numpy())","472f32d8":"def build_model(width, height, depth, classes):\n    # initialize the input shape and channels dimension to be\n    # \"channels last\" ordering\n    inputShape = (height, width, depth)\n    chanDim = -1\n    \n    # build the model using Keras' Sequential API\n    model = Sequential([\n        # CONV => RELU => BN => POOL layer set\n        Conv2D(16, (3, 3), padding=\"same\", input_shape=inputShape),\n        Activation(\"relu\"),\n        BatchNormalization(axis=chanDim),\n        MaxPooling2D(pool_size=(2, 2)),\n        \n        # (CONV => RELU => BN) * 2 => POOL layer set\n        Conv2D(32, (3, 3), padding=\"same\"),\n        Activation(\"relu\"),\n        BatchNormalization(axis=chanDim),\n        Conv2D(32, (3, 3), padding=\"same\"),\n        Activation(\"relu\"),\n        BatchNormalization(axis=chanDim),\n        MaxPooling2D(pool_size=(2, 2)),\n        \n        # (CONV => RELU => BN) * 3 => POOL layer set\n        Conv2D(64, (3, 3), padding=\"same\"),\n        Activation(\"relu\"),\n        BatchNormalization(axis=chanDim),\n        Conv2D(64, (3, 3), padding=\"same\"),\n        Activation(\"relu\"),\n        BatchNormalization(axis=chanDim),\n        Conv2D(64, (3, 3), padding=\"same\"),\n        Activation(\"relu\"),\n        BatchNormalization(axis=chanDim),\n        MaxPooling2D(pool_size=(2, 2)),\n        \n        # first (and only) set of FC => RELU layers\n        Flatten(),\n        Dense(256),\n        Activation(\"relu\"),\n        BatchNormalization(),\n        Dropout(0.5),\n        # softmax classifier\n        Dense(classes),\n        Activation(\"softmax\")\n    ])\n\n    # return the built model to the calling function\n    return model","afdf228a":"def step(X, y):\n    # keep track of our gradients\n    with tf.GradientTape() as tape:\n        # make a prediction using the model and then calculate the loss\n        pred = model(X)\n        loss = categorical_crossentropy(y, pred)\n    \n    # calculate the gradients using our tape and then update the model weights\n    grads = tape.gradient(loss, model.trainable_variables)\n    opt.apply_gradients(zip(grads, model.trainable_variables))","39f0db95":"# initialize the number of epochs to train for, batch size, and initial learning rate\nEPOCHS = 50\nBS = 32\nINIT_LR = 1e-3\n\n\nmodel = build_model(28, 28, 1, 10)\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\n\n# compute the number of batch updates per epoch\nnumUpdates = int(X_train.shape[0] \/ BS)\n\n# loop over the number of epochs\nfor epoch in range(0, EPOCHS):\n    # show the current epoch number\n    print(\"[INFO] starting epoch {}\/{}...\".format(epoch + 1, EPOCHS), end=\"\")\n    sys.stdout.flush()\n    epochStart = time.time()\n\n    # loop over the data in batch size increments\n    for i in range(0, numUpdates):\n        # determine starting and ending slice indexes for the current batch\n        start = i * BS\n        end = start + BS\n\n        # take a step\n        step(X_train[start:end], y_train[start:end])\n\n    # show timing information for the epoch\n    epochEnd = time.time()\n    elapsed = (epochEnd - epochStart) \/ 60.0\n    print(\"took {:.4} minutes\".format(elapsed))","033b59ef":"plot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\nImage(\"model.png\")","655b4e07":"# in order to calculate accuracy using Keras' functions we first need to compile the model\nmodel.compile(optimizer=opt, loss=categorical_crossentropy,metrics=[\"acc\"])\n\n# now that the model is compiled we can compute the accuracy\n# (loss, acc) = model.evaluate(X_test, y_test)\n# print(\"[INFO] test accuracy: {:.4f}\".format(acc))","fb04209c":"y_pred = model.predict(X_test)\ny_pred = np.argmax(y_pred,axis=1)\nmy_submission = pd.DataFrame({'ImageId': list(range(1, len(y_pred)+1)), 'Label': y_pred})\nmy_submission.to_csv('submission.csv', index=False)","83ef2c0a":"## Automatic Differentiation and Gradients\n\nAutomatic differentiation is useful for implementing machine learning algorithms such as backpropagation for training neural networks.","c8305484":"> ## GadientTape function to create custom training loops to train Keras models.","f4150fb0":"GradientTapes can be nested to compute higher-order derivatives","974cf10d":"### Label plot","0df234ae":"### Checking for `NULL` values","dd649e30":"### Reshaping data","3fab0c9a":"## Preprocessing","9a067f2d":"## EDA\n### Looking into data","5fcea16d":"## Predicting labels and saving in csv file","d94ccdf0":"Let\u2019s have a look at a few of our training images:","20830b7e":"### Shape of files","294e4a36":"### Normalizing Data","4ce206d1":"## Importing Libraries","bd1226b4":"## Loading Data","eed5edaa":"## Introduction\n\nMNIST (\"Modified National Institute of Standards and Technology\") is the de facto \u201cHello World\u201d dataset of computer vision. Since its release in 1999, this classic dataset of handwritten images has served as the basis for benchmarking classification algorithms. As new machine learning techniques emerge, MNIST remains a reliable resource for researchers and learners alike.\n","b3a01d81":"## Gradient tapes\n\nTensorFlow provides the `tf.GradientTape` API for automatic differentiation; that is, computing the gradient of a computation with respect to some inputs.","40ad3f1b":"### Data description","31fb1af4":"### One Hot Encoding"}}