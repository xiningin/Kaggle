{"cell_type":{"43b48e8d":"code","9e6a2c17":"code","95066eaf":"code","88bed000":"code","f25223a1":"code","4b465317":"code","5e469490":"code","bda4aac7":"code","9ad65f76":"code","93ede0e6":"code","94aed996":"code","99913002":"code","29bd2348":"code","d103d8b1":"code","58679ee2":"code","f83f6855":"code","739fdf63":"code","ebf2eba3":"code","72ea0b66":"code","57fef381":"code","6ad3428f":"code","d2b82c87":"code","06e190f4":"code","0db133dc":"code","0bf054b7":"code","07764e57":"markdown","37d9adec":"markdown","86aff280":"markdown","fd246dea":"markdown","01e3c131":"markdown","17df1864":"markdown","728f3cad":"markdown","5f3cc4fa":"markdown"},"source":{"43b48e8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e6a2c17":"import numpy as np\nimport pandas as pd\nimport os \nimport matplotlib.pyplot as plt \nimport tensorflow as tf\nfrom tqdm import tqdm # to see process\n# Audio Signal Processing Libarary\nimport IPython.display as ipd\nimport librosa\nimport librosa.display\n\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Dense, Activation, Conv2D, MaxPool2D, Flatten, Dropout, BatchNormalization\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report,confusion_matrix","95066eaf":"# Getting Information of data (Data Structure)\n# using os to check the audio file in each folder\npath = [\"\/kaggle\/input\/urbansound8k\/fold1\",\"\/kaggle\/input\/urbansound8k\/fold2\",\"\/kaggle\/input\/urbansound8k\/fold3\",\"\/kaggle\/input\/urbansound8k\/fold4\",\"\/kaggle\/input\/urbansound8k\/fold5\",\n        \"\/kaggle\/input\/urbansound8k\/fold6\",\"\/kaggle\/input\/urbansound8k\/fold7\",\"\/kaggle\/input\/urbansound8k\/fold8\",\"\/kaggle\/input\/urbansound8k\/fold9\",\"\/kaggle\/input\/urbansound8k\/fold10\"]\nfor i in range(10):\n  for dirpath, dirname,filename in os.walk(path[i]):\n    print(f\"this is {i+1}st folder having {len(filename)} sound file in '{dirpath}'.\")","88bed000":"filename = \"\/kaggle\/input\/urbansound8k\/fold1\/102842-3-0-1.wav\"\n\nplt.figure(figsize = (14,5))\n\n## Librosa normalize the sound give it in in one single sample_rate by deafult this is 22050 or 22KHz\n#---> and this normalize signal data in 0 to 1 and this change signal into one mono channel.\n#---> Librosa converts the signal to mono, meaning the channel will alays be 1\n\nsound_data, sample_rate = librosa.load(filename) # Load file to find data and sr(how many times per sec sound sample)\nprint(\"sample_rate : \",sample_rate)\nprint(\"data : \",sound_data)\n# data come in 1-dimensional beacuse librosa change 2 channel into 1 mono channel\nlibrosa.display.waveplot(sound_data, sr = sample_rate) # Plotting audio file\nplt.title(\"SINGLE Channel audio signal using LIBROSA\")\nipd.Audio(filename) # play the audio\n\n#This is Dog noisy Sound","f25223a1":"data = pd.read_csv(\"\/kaggle\/input\/urbansound8k\/UrbanSound8K.csv\")\ndata.head()","4b465317":"data.shape","5e469490":"#Check whether the dataset is imbalanced by seeing target value_count(give unique value)\ndata['class'].value_counts()\n#By sseing we saw that mostly class have same data so there is little chnace of imbalanced so just ignore this","bda4aac7":"def features_extract(file_name):\n    audio, sample_rate = librosa.load(file_name, res_type = 'kaiser_fast') \n    mfccs_features = librosa.feature.mfcc(y = audio, sr = sample_rate, n_mfcc = 40)\n    mfccs_scaled_features = np.mean(mfccs_features.T,axis = 0)\n    \n    return mfccs_scaled_features","9ad65f76":"# Now we iterate through every audio file and extract features \n# using Mel-Frequency Cepstral Coefficients (MFCC)\naudio_dataset_path = '\/kaggle\/input\/urbansound8k\/'\nextracted_features = []\nfor index_num,row in tqdm(data.iterrows()):\n    file_name = os.path.join(os.path.abspath(audio_dataset_path),'fold'+str(row[\"fold\"])+'\/',str(row[\"slice_file_name\"]))\n    final_class_labels = row[\"class\"]\n    data = features_extract(file_name)\n    extracted_features.append([data,final_class_labels])","93ede0e6":"# converting extracted_features to Pandas dataframe\nfeatures_df=pd.DataFrame(extracted_features,columns=['feature','class'])\nfeatures_df.head()","94aed996":"# Split the dataset into independent and dependent dataset\nX = np.array(features_df['feature'].tolist())\ny = np.array(features_df['class'].tolist())","99913002":"X.shape, y.shape","29bd2348":"#class label\ny","d103d8b1":"# Label Encoding \n# using label encoder to get back the class name using inverse label encoder \nlabelencoder = LabelEncoder()\ny = to_categorical(labelencoder.fit_transform(y)) # tranform class label \ny","58679ee2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\nprint(f'X_train shape is {X_train.shape}')\nprint(f'X_test shape is {X_test.shape}')\nprint(f'y_train shape is {y_train.shape}')\nprint(f'y_test shape is {y_test.shape}')","f83f6855":"labels = y.shape[1] # total target variable or class variable\ninput_size = X.shape[1] # total feature value like here n_mfcc value \nprint(f\"number of total class label '{labels}'\")\nprint(f\"number of features used '{input_size}' \")","739fdf63":"# network in sequential nature i.e. output of previous layer is input of the next layer\nmodel = Sequential()\n\n#first layer\nmodel.add(Dense(units = 1024, input_shape = (input_size,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\n#second layer\nmodel.add(Dense(units = 512))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\n#third layer\nmodel.add(Dense(units = 256))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\n#final layer\n# add neural network so flatten the output comming from last layer of cnn model \nmodel.add(Flatten()) \nmodel.add(Dense(units = labels, activation=\"softmax\"))","ebf2eba3":"model.summary()","72ea0b66":"model.compile(loss = 'categorical_crossentropy', \n              metrics = ['accuracy'],\n              optimizer = 'adam')","57fef381":"num_epochs = 100\nnum_batch_size = 32\nmodel.fit(X_train, y_train,\n          batch_size = num_batch_size, \n          epochs = num_epochs,\n          validation_data = (X_test, y_test),\n          verbose = 1)","6ad3428f":"#saving the model history\nloss = pd.DataFrame(model.history.history)\n\n#plotting the loss and accuracy \nplt.figure(figsize=(10,10))\n\nplt.subplot(2,2,1)\nplt.plot(loss[\"loss\"], label =\"Loss\")\nplt.plot(loss[\"val_loss\"], label = \"Validation_loss\")\nplt.legend()\nplt.title(\"Training and Validation Loss\")\n\nplt.subplot(2,2,2)\nplt.plot(loss['accuracy'],label = \"Training Accuracy\")\nplt.plot(loss['val_accuracy'], label =\"Validation_ Accuracy \")\nplt.legend()\nplt.title(\"Training-Validation Accuracy\")","d2b82c87":"prediction = model.predict(X_test)\n\n# finding class with larget predicted probability using argmax of numpy \ny_pred = np.argmax(prediction, axis = 1)  # prediction using model \ny_test_orig = np.argmax(y_test, axis = 1) # original y_test\nprint(y_pred)","06e190f4":"#Getting Class Label Name\nclass_label_lst = np.array(features_df['class'].unique().tolist())\nprint(class_label_lst)","0db133dc":"class_name = ['dog_bark','children_playing','car_horn','air_conditioner','street_music',\n              'gun_shot','siren','engine_idling','jackhammer','drilling']\nprint(classification_report(y_test_orig, y_pred, target_names = class_name))","0bf054b7":"confusion_df = pd.DataFrame(confusion_matrix(y_test_orig, y_pred), columns = class_name, index = class_name)\nprint(\"\\n\")\nprint(\"**************************** CONFUSION METRIX *********************************\")\nprint(\"\\n\")\nconfusion_df","07764e57":"## Data PreProcessing\n\n**Feature Extraction**\n\ntaking audio signal and create independent vector which will represent audio data into vector form.\n\n**Feature Extraction Method : MFCC**\n\nWe use Mel-Frequency Cepstral Coefficients(MFCC) from the audio samples. The MFCC summarises the frequency distribution across the window size, so it is possible to analyse both the frequency and time characteristics of the sound. These audio representations will allow us to identify features for classification.","37d9adec":"## Model Architecture","86aff280":"## Train the Model\n","fd246dea":"## Result Visualization","01e3c131":"## Prediction","17df1864":"## Analysis One Particular Audio File","728f3cad":"## Split the DataSet","5f3cc4fa":"## The DataSet"}}