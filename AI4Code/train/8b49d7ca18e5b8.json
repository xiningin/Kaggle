{"cell_type":{"d8cb7944":"code","ff0b982d":"code","382a2368":"code","b256f67f":"code","c82e2d78":"code","0ea111b5":"code","e699c6a4":"code","9a68f253":"code","ed111817":"code","5c4b2b4e":"code","6d2ad3c9":"code","086332d7":"markdown","fc6ff5fd":"markdown","42590b93":"markdown","102e1534":"markdown","3594a698":"markdown","2e1a3bdc":"markdown"},"source":{"d8cb7944":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Sklearn package\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.pipeline import Pipeline,make_pipeline\nfrom sklearn.linear_model import LogisticRegressionCV, LogisticRegression\nfrom sklearn.svm import SVC\n\nfrom sklearn import metrics","ff0b982d":"# class labels\nclass_labels = ['alt.atheism', 'soc.religion.christian', 'comp.graphics', 'sci.med']\n\n# Training set data\nnews_train = fetch_20newsgroups(subset='train', \n                               categories=class_labels,\n                               shuffle=True,\n                               random_state=42)\n# Test set\nnews_test = fetch_20newsgroups(subset='test',\n                              categories=class_labels,\n                              shuffle=True,\n                              random_state=42)\n","382a2368":"news_train.keys()","b256f67f":"def display_report(pipe):\n    y_test = news_test.target\n    # Perform scoring on the test data\n    y_pred = pipe.predict(news_test.data)\n    \n    report = metrics.classification_report(y_test, y_pred, target_names=news_test.target_names)\n    \n    print(report)\n    \n    print(\"Overall accuracy {:0.3f}\".format(metrics.accuracy_score(y_test, y_pred)))","c82e2d78":"\ntfidf_vec = TfidfVectorizer(min_df=3, stop_words='english',\n                      ngram_range=(1, 2))\n\nsvd = TruncatedSVD(n_components=100, n_iter=7, random_state=42)\n\nnormalizer = Normalizer()\n\nlsa = make_pipeline(tfidf_vec, svd, normalizer)\n\n# clf = SVC(kernel='linear', C=150, gamma=2e-2, probability=True)\nclf = LogisticRegressionCV()\n\npipe = make_pipeline(lsa, clf)\npipe.fit(news_train.data, news_train.target)\n\n# Display the score\ndisplay_report(pipe)\n","0ea111b5":"# !pip install eli5","e699c6a4":"import eli5 as mldebug","9a68f253":"mldebug.show_weights(clf, top=10)","ed111817":"# Show weights with feature names\nmldebug.show_weights(clf, vec=tfidf_vec, top=10,\n                    target_names=news_test.target_names)","5c4b2b4e":"# Lets try with the 1st position test data\nnews_test.data[0]","6d2ad3c9":"mldebug.show_prediction(clf, \n                        news_test.data[0], \n                        top=10,\n                        vec=lsa,\n                        target_names=news_test.target_names)","086332d7":"The fetch method returns the dictionary object with data and target. ","fc6ff5fd":"## Debugging using ELI5","42590b93":"## Checking on predictions","102e1534":"## Load Dataset","3594a698":"## Baseline Model\n\nWe will create a baseline model to classify the text and then we will do debugging of the model. ","2e1a3bdc":"# Debugging Text Classification "}}