{"cell_type":{"fb843228":"code","0a5d3236":"code","1151bfc3":"code","109ebe82":"code","5d49fc50":"code","cc4a3229":"code","6cc00efb":"code","7312d996":"code","eec3d036":"code","bf111177":"code","57d77b2b":"code","5687841c":"code","867e1313":"code","5b45fda2":"code","4d655df9":"code","668d83bb":"code","c516bf97":"code","8d488799":"code","9839f26b":"code","726010d1":"code","5a4fd4b3":"code","c031693a":"code","a1f397e7":"code","0a7382f1":"code","ceef2153":"markdown","f7b89465":"markdown","406734e3":"markdown"},"source":{"fb843228":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a5d3236":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntrain_final = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_final = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","1151bfc3":"train","109ebe82":"test","5d49fc50":"train = train.drop(columns= ['Name','Ticket','Cabin'])\ntest = test.drop(columns= ['Name','Ticket','Cabin'])","cc4a3229":"train['Embarked_S'] = (train['Embarked'] == 'S').astype(int)\ntrain['Embarked_C'] = (train['Embarked'] == 'C').astype(int)\ntrain['Embarked_Q'] = (train['Embarked'] == 'Q').astype(int)\ntrain['Gender'] = (train['Sex'] == 'male').astype(int)","6cc00efb":"test['Embarked_S'] = (test['Embarked'] == 'S').astype(int)\ntest['Embarked_C'] = (test['Embarked'] == 'C').astype(int)\ntest['Embarked_Q'] = (test['Embarked'] == 'Q').astype(int)\ntest['Gender'] = (test['Sex'] == 'male').astype(int)","7312d996":"train = train.drop(columns = ['Sex'])\ntest = test.drop(columns = ['Sex'])","eec3d036":"train = train.drop(columns = ['Embarked'])\ntest = test.drop(columns = ['Embarked'])","bf111177":"train.isnull().sum()","57d77b2b":"train.fillna(0,inplace=True)\ntest.fillna(0,inplace=True)","5687841c":"X = train.drop(columns = ['Survived'])\ny = train['Survived']","867e1313":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaled_X = scaler.fit_transform(X)","5b45fda2":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.svm import SVC","4d655df9":"scores = []\nbest_svc = SVC(kernel='rbf')\ncv = StratifiedKFold(n_splits =10, random_state=42, shuffle=True)\n\nfor train_index, test_index in cv.split(scaled_X, y):\n    print(\"Train Index: \",train_index)\n    print(\"Test Index: \",test_index)\n    X_train, X_test, y_train, y_test = scaled_X[train_index], scaled_X[test_index], y[train_index], y[test_index]\n    best_svc.fit(X_train, y_train)\n    scores.append(best_svc.score(X_test, y_test))","668d83bb":"print(\"Overall Score: \",np.mean(scores))","c516bf97":"from sklearn.model_selection import cross_val_score\n\nscores_alt = cross_val_score(best_svc, scaled_X, y, cv=10)\n\nprint(\"Overall Score: \",np.mean(scores_alt))","8d488799":"from sklearn.ensemble import RandomForestClassifier \nfrom catboost import CatBoostClassifier, cv, Pool\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nclf = RandomForestClassifier(n_estimators=1000)\ncbc = CatBoostClassifier(eval_metric = 'Accuracy', random_seed = 42, learning_rate=0.01)\nxgb = XGBClassifier(n_estimators=1000, learning_rate=0.01, max_depth=3)\nlgbm = LGBMClassifier(n_estimators=1000, learning_rate=0.01)\n\nclf_scores = cross_val_score(clf, scaled_X, y, cv=10)\ncbc_scores = cross_val_score(cbc, scaled_X, y, cv=10)\nxgb_scores = cross_val_score(xgb, scaled_X, y, cv=10)\nlgbm_scores = cross_val_score(lgbm, scaled_X, y, cv=10)","9839f26b":"print(\"Random Forest: \",np.mean(clf_scores))\nprint(\"CatBoost: \",np.mean(cbc_scores))\nprint(\"XGBoost: \",np.mean(xgb_scores))\nprint(\"LightGBM: \",np.mean(lgbm_scores))","726010d1":"train_final.fillna(-999,inplace=True)\n\nX = train_final.drop(columns = ['Survived'])\ny = train_final['Survived']\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.85, random_state=1234)\n\nfeatures = np.where(X.dtypes!=float)[0]\n\ncbc = CatBoostClassifier(eval_metric = 'Accuracy', random_seed = 42, use_best_model=True)\ncbc.fit(X_train, y_train, cat_features=features, eval_set= (X_test, y_test), early_stopping_rounds=100)","5a4fd4b3":"from sklearn.metrics import accuracy_score\n\npred = cbc.predict(X_test)\n\naccuracy_score(y_test, pred)","c031693a":"test_final.fillna(-999,inplace=True)\n\npredictions = cbc.predict(test_final)\n\npredictions","a1f397e7":"result = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predictions})","0a7382f1":"result.to_csv(\"submission.csv\", index=False)","ceef2153":"# Using the best model to get our predictions:","f7b89465":"# Alternative method for cross validation:","406734e3":"# Using cross-validation for various models, to see which is best:"}}