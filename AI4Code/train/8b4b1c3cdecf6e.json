{"cell_type":{"d40e56b9":"code","92d971f6":"code","bbb079bb":"code","ffeb4faf":"code","37ab9b70":"code","81d26ff6":"code","7472259a":"code","db25ab9c":"code","3daf25f2":"code","b72f68d9":"code","a65e1e5e":"code","5883fb9e":"code","780ae7b4":"code","46752838":"code","4894f9b6":"code","10f22e28":"code","75377bdb":"code","b6b1d7ca":"code","d903f189":"code","ce701991":"code","2a49b097":"code","9b531c42":"code","c98a3020":"code","3af1a9e9":"code","e26f55d2":"code","a04d6bbd":"code","52fddef9":"code","52c06600":"code","133820a0":"code","bfd7fe1f":"code","d1c3cfdd":"code","0fe2b9d3":"code","7604bedf":"code","53ea9a59":"markdown","2e74fbf3":"markdown","15442b0e":"markdown","70564f9e":"markdown","a743ff77":"markdown","96bbe6f7":"markdown","ecdbea97":"markdown","427de41f":"markdown"},"source":{"d40e56b9":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\n# statistics tools\nimport scipy.stats as stats\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n# machine learning tools\nimport h2o\nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator","92d971f6":"# load data \/ preview\ndf = pd.read_csv('..\/input\/body-fat-prediction-dataset\/bodyfat.csv')\ndf.head()","bbb079bb":"# data overview\ndf.info()","ffeb4faf":"# basic stats\ndf.describe()","37ab9b70":"# plot target\ndf.BodyFat.plot(kind='hist', bins=25)\nplt.title('Body Fat - Distribution')\nplt.grid()\nplt.show()","81d26ff6":"# body fat vs density\nplt.scatter(df.Density, df.BodyFat)\nplt.title('Body Fat vs Density')\nplt.grid()\nplt.show()","7472259a":"# correlation between Density and BodyFat\nprint('Correlation Pearson:', stats.pearsonr(df.Density, df.BodyFat))","db25ab9c":"# define features\nfeatures = ['Density',\n            'Age', 'Weight', 'Height', 'Neck', \n            'Chest', 'Abdomen', 'Hip', 'Thigh', 'Knee',\n            'Ankle', 'Biceps', 'Forearm', 'Wrist']","3daf25f2":"# boxplot of features\nfor f in features:\n    plt.figure(figsize=(12,2))\n    plt.boxplot(df[f], vert=False)\n    plt.title(f)\n    plt.grid()\n    plt.show()","b72f68d9":"df[df.Height <= 30]","a65e1e5e":"df = df[df.Height>30]","5883fb9e":"# pairwise scatter plots\nsns.pairplot(df[features], \n             kind='reg', \n             plot_kws={'line_kws':{'color':'magenta'}, 'scatter_kws': {'alpha': 0.25}})\nplt.show()","780ae7b4":"# correlations\ncorr_pearson = df[features].corr(method='pearson')\ncorr_spearman = df[features].corr(method='spearman')\n\nplt.figure(figsize=(12,14))\nax1 = plt.subplot(2,1,1)\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\n\nax2 = plt.subplot(2,1,2, sharex=ax1)\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","46752838":"# add height and weight in metric units\ndf['Height_m'] = df.Height*2.54\/100\ndf['Weight_m'] = df.Weight*0.454\n\n# add BMI as feature\ndf['BMI'] = df.Weight_m \/ (df.Height_m**2)\nfeatures = features + ['BMI']","4894f9b6":"df","10f22e28":"for f in features:\n    c = df[f].corr(df.BodyFat, method='pearson')\n    c = np.round(c,4)\n    plt.figure(figsize=(5,5))\n    plt.scatter(df[f], df.BodyFat, alpha=0.5)\n    plt.title('Body Fat vs ' + f + ' \/ corr = ' + str(c))\n    plt.xlabel(f)\n    plt.ylabel('Body Fat')\n    plt.grid()\n    plt.show()","75377bdb":"# used features\nprint(features)","b6b1d7ca":"# define target\ntarget='BodyFat'","d903f189":"# start H2O\nh2o.init(max_mem_size='12G', nthreads=4) # Use maximum of 12 GB RAM and 4 cores","ce701991":"# upload data frame in H2O environment\ndf_hex = h2o.H2OFrame(df)\n\n# train \/ test split\ntrain_perc = 0.7\ntrain_hex, test_hex = df_hex.split_frame(ratios=[train_perc], seed=999)","2a49b097":"# define GLM\nglm_model = H2OGeneralizedLinearEstimator(family = 'gaussian',\n                                          nfolds = 5,\n                                          alpha = 0.75, # 0:Ridge (L2), 1:LASSO (L1)\n                                          lambda_search = True,\n                                          score_each_iteration = True,                                          \n                                          seed=12345)","9b531c42":"# train model\nglm_model.train(features, target, training_frame = train_hex)","c98a3020":"# show model details\nglm_model","3af1a9e9":"# variable importance\nglm_model.varimp_plot()","e26f55d2":"# show coefficients\nglm_model.coef()","a04d6bbd":"# predict on training data\npred_train = glm_model.predict(train_hex)\ny_train_act = train_hex.as_data_frame()[target].values # actuals\ny_train_pred = pred_train.as_data_frame().predict.values # predictions","52fddef9":"# plot predictions vs actual\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot(111)\nax.scatter(x=y_train_act,y=y_train_pred)\nax.plot([0,50],[0,50], color='green')\nax.set_aspect(1)\nplt.grid()\nplt.title('Prediction vs Actual - Training Data')\nplt.xlabel('Actual')\nplt.ylabel('Prediction')\nplt.show()","52c06600":"# correlations\nprint('Correlations - Training Data')\nprint('Correlation Pearson:', stats.pearsonr(y_train_act, y_train_pred))\nprint('Correlation Spearman:', stats.spearmanr(y_train_act, y_train_pred))","133820a0":"# metrics on training data\nprint('MAE (train): ', np.round(mean_absolute_error(y_train_act, y_train_pred),2))\nprint('RMSE(train): ', np.round(np.sqrt(mean_squared_error(y_train_act, y_train_pred)),2))","bfd7fe1f":"# predict on test data\npred_test = glm_model.predict(test_hex)\ny_test_act = test_hex.as_data_frame()[target].values # actual values\ny_test_pred = pred_test.as_data_frame().predict.values # predictions","d1c3cfdd":"# plot predictions vs actuals\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot(111)\nax.scatter(x=y_test_act,y=y_test_pred)\nax.plot([0,50],[0,50], color='green')\nax.set_aspect(1)\nplt.grid()\nplt.title('Prediction vs Actual - Test Data')\nplt.xlabel('Actual')\nplt.ylabel('Prediction')\nplt.show()","0fe2b9d3":"# correlations\nprint('Correlations - Test Set')\nprint('Correlation Pearson:', stats.pearsonr(y_test_act, y_test_pred))\nprint('Correlation Spearman:', stats.spearmanr(y_test_act, y_test_pred))","7604bedf":"# metrics on test data\nprint('MAE (test): ', np.round(mean_absolute_error(y_test_act, y_test_pred),2))\nprint('RMSE(test): ', np.round(np.sqrt(mean_squared_error(y_test_act, y_test_pred)),2))","53ea9a59":"#### Height at ca. 30 inch is a significant outlier, so let's remove this row.","2e74fbf3":"<a id='3'><\/a>\n# Fit Linear Model","15442b0e":"# Table of Contents\n* [EDA](#1)\n* [Target vs Features](#2)\n* [Fit Linear Model](#3)","70564f9e":"#### No missing values.","a743ff77":"<a id='1'><\/a>\n# EDA","96bbe6f7":"### Very strong dependency between Body Fat and Density! ","ecdbea97":"<a id='2'><\/a>\n# Target vs Features","427de41f":"### For a model w\/o using Density see the following notebook:\n#### https:\/\/www.kaggle.com\/docxian\/body-fat-prediction-glm-w-o-density"}}