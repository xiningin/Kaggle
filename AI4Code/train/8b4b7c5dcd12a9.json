{"cell_type":{"7f2f96e5":"code","2c1f9a76":"code","fda8ca12":"code","fe0b0746":"code","3cb7050b":"code","394b8651":"code","2458b35f":"code","a8ddc1aa":"code","b7779988":"code","804ff635":"code","a64dc15c":"code","5fb8bb57":"code","da4a77ca":"code","87fd246b":"code","af5d2cd6":"code","388e55ca":"code","ae41aea6":"code","e9ab559d":"code","e2922bc3":"code","1eb1e782":"code","286a0bc1":"code","eda368bd":"code","894484f8":"code","406e73b3":"code","c9161fa3":"code","4cecc4c2":"code","3015b08d":"code","ebc4a0c1":"code","33478d26":"code","08c47592":"code","8ad3f724":"code","3e439233":"code","a8454612":"code","c08c7587":"code","818e512e":"code","95d5390a":"code","5a867bea":"code","b4e6e761":"code","aae6d295":"markdown","b1d76f31":"markdown"},"source":{"7f2f96e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c1f9a76":"#load the train dataset\ntrain = pd.read_csv('..\/input\/loanprediction\/train_ctrUa4K.csv')\n# display first few rows\ndisplay(train.head())","fda8ca12":"# import and display test dataset\ntest = pd.read_csv('..\/input\/loanprediction\/test_lAUu6dG.csv')\ndisplay(test.head())","fe0b0746":"print(train.shape,test.shape)","3cb7050b":"# check data type,null values\nprint(train.info())","394b8651":"# from above info we able to know our dataset having null values\n# Also having categorical data\n# checking occurance of that data\ntrain.describe(include=['O'])","2458b35f":"# importing necessary package\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import Image, display\n%matplotlib inline\n\n# Analyzed features Using histogram for it\napplicant_income = sns.FacetGrid(train, col='Loan_Status')\napplicant_income.map(plt.hist, 'Gender', bins=5)","a8ddc1aa":"married = sns.FacetGrid(train, col='Loan_Status')\nmarried.map(plt.hist, 'Married', bins=5)","b7779988":"married = sns.FacetGrid(train, col='Loan_Status')\nmarried.map(plt.hist, 'Self_Employed')","804ff635":"credit_history = sns.FacetGrid(train, col='Loan_Status')\ncredit_history.map(plt.hist, 'Credit_History')","a64dc15c":"property_area = sns.FacetGrid(train, col='Loan_Status')\nproperty_area.map(plt.hist, 'Property_Area')","5fb8bb57":"loan_amt = sns.FacetGrid(train, col='Loan_Status')\nloan_amt.map(plt.hist, 'Property_Area')","da4a77ca":"# Make copy of dataset\n# we are dropping Loan_ID from our dataset\ntrain_m = train.drop(['Loan_ID'], axis=1)\ntest_m = test.drop(['Loan_ID'], axis=1)\n# print new shape\ntrain_m.shape, test_m.shape","87fd246b":"# Now fill null values \n# get the values and features having null values\nprint(train_m.isnull().sum())\nprint(test_m.isnull().sum())","af5d2cd6":"# replace null value in gender with most frequent value i.e 'male'\ntrain_m['Gender'] = train_m['Gender'].fillna(train_m['Gender'].dropna().mode().values[0] )\ntest_m['Gender'] = test_m['Gender'].fillna(test_m['Gender'].dropna().mode().values[0] )\n\n","388e55ca":"# replace null value in Married with most frequent value i.e 'yes'\ntrain_m['Married'] = train_m['Married'].fillna(train_m['Married'].dropna().mode().values[0] )\n\n# doing same for dependent and self_employed\ntrain_m['Dependents'] = train_m['Dependents'].fillna(train_m['Dependents'].dropna().mode().values[0])\ntest_m['Dependents'] = test_m['Dependents'].fillna(test_m['Dependents'].dropna().mode().values[0])\n\ntrain_m['Self_Employed'] = train_m['Self_Employed'].fillna(train_m['Self_Employed'].dropna().mode().values[0])\ntest_m['Self_Employed'] = test_m['Self_Employed'].fillna(test_m['Self_Employed'].dropna().mode().values[0])","ae41aea6":"# Replacing Loan_Amount_Term and Credit_History by mode too\n\ntrain_m['Loan_Amount_Term'] = train_m['Loan_Amount_Term'].fillna(train_m['Loan_Amount_Term'].dropna().mode().values[0])\ntest_m['Loan_Amount_Term'] = test_m['Loan_Amount_Term'].fillna(test_m['Loan_Amount_Term'].dropna().mode().values[0])\n\ntrain_m['Credit_History'] = train_m['Credit_History'].fillna(train_m['Credit_History'].dropna().mode().values[0])\ntest_m['Credit_History'] = test_m['Credit_History'].fillna(test_m['Credit_History'].dropna().mode().values[0])","e9ab559d":"# replacing by median\ntrain_m['LoanAmount'] = train_m['LoanAmount'].fillna(train_m['LoanAmount'].dropna().median())\ntest_m['LoanAmount'] = test_m['LoanAmount'].fillna(test_m['LoanAmount'].dropna().median())","e2922bc3":"# Again check for null values\nprint(train_m.info())","1eb1e782":"# now need to convert object data type into numerical category\nfrom sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\ntrain_m['Gender'] = lb_make.fit_transform(train_m['Gender'])\ntest_m['Gender'] = lb_make.fit_transform(test_m['Gender'])\n\n\ntrain_m.head()\n","286a0bc1":"test_m.head()","eda368bd":"train_m['Married'] = lb_make.fit_transform(train_m['Married'])\ntest_m['Married'] = lb_make.fit_transform(test_m['Married'])","894484f8":"train_m['Education'] = lb_make.fit_transform(train_m['Education'])\ntest_m['Education'] = lb_make.fit_transform(test_m['Education'])","406e73b3":"train_m['Self_Employed'] = lb_make.fit_transform(train_m['Self_Employed'])\ntest_m['Self_Employed'] = lb_make.fit_transform(test_m['Self_Employed'])","c9161fa3":"train_m['Property_Area'] = lb_make.fit_transform(train_m['Property_Area'])\ntest_m['Property_Area'] = lb_make.fit_transform(test_m['Property_Area'])","4cecc4c2":"train_m['Dependents'].value_counts()","3015b08d":"train_m.info()\ntrain_m['Dependents'] = train_m['Dependents'].replace('3+','3')\ntest_m['Dependents'] = test_m['Dependents'].replace('3+','3')","ebc4a0c1":"train_m['Dependents'].value_counts()\n# train_m.info()","33478d26":"train_m['Dependents'] = pd.to_numeric(train_m['Dependents'])\ntest_m['Dependents'] = pd.to_numeric(test_m['Dependents'])","08c47592":"train_m.info()","8ad3f724":"test_m.info()","3e439233":"train_m['Loan_Status'] = lb_make.fit_transform(train_m['Loan_Status'])","a8454612":"# Heatmap: Showing the correlations of features with the target. No correlations are extremely high.\n# The correlations between LoanAmount and ApplicantIncome can be explained.\nsns.heatmap(train_m.corr())","c08c7587":"# Separating dependent variable and feature variable list\ny = train_m['Loan_Status']\nx = train_m.drop('Loan_Status', axis = 1)","818e512e":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\n","95d5390a":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=0)","5a867bea":"model = LogisticRegression()\nmodel.fit(x_train, y_train)\nypred = model.predict(x_test)\nevaluation = f1_score(y_test, ypred)\nevaluation","b4e6e761":"ypred_test = model.predict(test_m)\nprint(ypred_test)","aae6d295":"Assumption:\n\n1.based on data we get to know most customers who take loans is less of self-employed people. That\u2019s those are not self-employed probably salalary earners obtain more loan.<br>\n2.More males are on loan than females<br>\n3.Married people collect more loan than unmarried<br>\n4.According to creadit history high people get back there loan<br>\n5.semiurban people got more loan rather than 2 others\n","b1d76f31":"Analysis:\n\nwe drop loan id its not having significant dependencies with our loan_status\n\ngender having 2 categories, Also having null values \n\nMarried having 2 categories with No & 64% yes. (top=yes, freq=398\/count=614). so fill null values with most frequent data.\n\nApplicantIncome and CoapplicantIncome are continuous features\n"}}