{"cell_type":{"f0c23d7e":"code","5874af3c":"code","0ef917b2":"code","5b717f5d":"code","e0555d25":"code","571bfaad":"code","58237b9a":"code","c219e341":"code","bdf91d77":"code","22c8742d":"code","c4788b35":"code","6d70dad3":"code","822183c7":"code","faf9cdbc":"code","27a64208":"code","a4d97530":"code","2cee1c01":"code","1e74d51f":"code","5e077fd6":"code","4195fb29":"code","1a3d01c1":"code","4c4cba39":"code","5a1a554c":"code","8f2533aa":"code","7b43e25c":"code","8ab9bb76":"code","20c6b098":"code","1c585b06":"code","6cce889f":"code","0b02c36a":"code","2922f36e":"code","ddb57fad":"code","9fbd7bd2":"code","f7bc848e":"code","a68d20cc":"code","88149d98":"code","27b9d710":"code","56f2bda7":"code","9a3fb0d7":"code","b9dd93e6":"code","3f492cdc":"code","da1679cf":"code","b3f45db4":"code","5d5d433b":"code","a532abb0":"code","76d22dd0":"code","f27bc1da":"code","868c9fa0":"code","c3bc3af1":"code","6fe6775e":"code","a9f6d15b":"code","38467156":"code","d541e4af":"code","0a8cda8d":"code","318916dd":"code","081225bd":"code","459794e2":"code","d550bca5":"code","262692a9":"code","1f821970":"code","87a2c213":"code","738050c1":"code","0c42817e":"code","b60a8d41":"code","a9e6da1b":"code","072bba18":"code","44719438":"code","950696a3":"code","0d0fda80":"code","619a4c5c":"code","f1b21010":"code","bc4c732c":"code","7bbcd726":"code","1622eafe":"code","f3578a7c":"code","6bf09bdf":"code","56ac2b72":"code","e17717a5":"markdown","482d6915":"markdown","6386bee6":"markdown","e796af28":"markdown","a1aed840":"markdown","3a61f202":"markdown","cbaa46b4":"markdown","906dc804":"markdown","e5af8501":"markdown","2a63d786":"markdown","b4ebc852":"markdown","dc5205fb":"markdown","37782cdb":"markdown","55f0987a":"markdown","47f19807":"markdown","d1f5c3f4":"markdown","5bfbdc3a":"markdown"},"source":{"f0c23d7e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns \nimport missingno as msn\nimport tqdm\nimport time\n\nfrom wordcloud import WordCloud\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.datasets import dump_svmlight_file\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD, NMF\nfrom sklearn.metrics import cohen_kappa_score, make_scorer\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold, train_test_split\n\n\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.svm import LinearSVC #(setting multi_class=\u201dcrammer_singer\u201d)\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier #(LogReg: setting multi_class = \"multinomial\")\nfrom sklearn.ensemble import RandomForestClassifier\n\n%pylab inline","5874af3c":"train = pd.read_csv(\"..\/input\/train\/train.csv\", index_col=\"PetID\")\ntest = pd.read_csv(\"..\/input\/test\/test.csv\", index_col=\"PetID\")","0ef917b2":"display(train.columns)\ndisplay(test.columns)","5b717f5d":"train[\"IsTraining\"] = 1\ntest[\"IsTraining\"]  = 0\n\nmerged = pd.concat([train,test])\n\ncat = [\"Type\", \"Breed1\", \"Breed2\", \"Gender\", \"Color1\", \"Color2\", \"Color3\", \"MaturitySize\",\n      \"FurLength\", \"Vaccinated\", \"Dewormed\", \"Sterilized\"]\n\nfor c in cat:\n    merged[c] = merged[c].astype(\"category\")","e0555d25":"merged.dtypes","571bfaad":"merged.describe(include='all')","58237b9a":"merged.sample(5)","c219e341":"msn.matrix(merged, sort='ascending')","bdf91d77":"def percConvert(ser):\n    return ser\/float(ser[-1])","22c8742d":"train.dtypes","c4788b35":"type_ct = pd.crosstab(train[\"Type\"],train[\"AdoptionSpeed\"],margins=True).apply(percConvert, axis=1)\ndisplay(type_ct)","6d70dad3":"fig, ax = plt.subplots(ncols=2, nrows=1, figsize=(15,5))\nsns.countplot(\"Type\", data=train, ax=ax[0])\nax[0].set_xticklabels([\"Dog\", \"Cat\"])\nax[0].set_title(\"Dogs Vs Cats\")\nax[0].spines[\"top\"].set_visible(False)\nax[0].spines[\"right\"].set_visible(False)\n\nsns.countplot(\"Type\", hue=\"AdoptionSpeed\", data=train, ax=ax[1])\nax[1].set_title(\"AdoptionSpeed by Type\")\nax[1].set_xticklabels([\"Dog\", \"Cat\"])\nax[1].spines[\"top\"].set_visible(False)\nax[1].spines[\"right\"].set_visible(False)","822183c7":"main_count = train[\"AdoptionSpeed\"].value_counts(normalize=True).sort_index()\n\ndef prepare_plot_dict(df, col, main_count):\n    main_count = dict(main_count)\n    plot_dict = {}\n    for i in df[col].unique():\n        val_count = dict(df.loc[df[col] == i, 'AdoptionSpeed'].value_counts().sort_index())\n\n        for k, v in main_count.items():\n            if k in val_count:\n                plot_dict[val_count[k]] = ((val_count[k] \/ sum(i for i in val_count.values())) \/ \n                                           main_count[k]) * 100 - 100\n                \n            else:\n                plot_dict[0] = 0\n                \n    return plot_dict\n                \ndef make_count_plot(df, x, hue='AdoptionSpeed', title='', main_count=main_count, super_ax=0):\n    if super_ax != 0:\n        g = sns.countplot(x=x, data=df, hue=hue, ax=super_ax);\n        super_ax.set_title(title);\n    else:\n        g = sns.countplot(x=x, data=df, hue=hue)\n        plt.title(\"AdoptionSpeed {}\".format(title));\n    ax = g.axes\n    \n    plot_dict = prepare_plot_dict(df, x, main_count)\n    \n    for p in ax.patches:\n        h = p.get_height() if str(p.get_height()) != 'nan' else 0 \n        text = f\"{plot_dict[h]:.0f}%\" if plot_dict[h] < 0 else f\"+{plot_dict[h]:.0f}%\"\n        ax.annotate(text, (p.get_x()+p.get_width()\/2., h), ha='center', va='center', \n                    fontsize=11, color=\"green\" if plot_dict[h] > 0 else \"red\", \n                    rotation=0, xytext=(0,10), textcoords=\"offset points\")","faf9cdbc":"plt.figure(figsize=(18,8))\nmake_count_plot(df=train, x='Type', title='by pet Type')","27a64208":"dict(train.loc[train['Type']== 1, 'AdoptionSpeed'].value_counts().sort_index())","a4d97530":"plt.figure()\nax = plt.subplot()\nplt.bar(range(5),type_ct.iloc[0,:-1],alpha=.5,color=\"green\",label=\"Dog\")\nplt.bar(range(5),type_ct.iloc[1,:-1],alpha=.5,color=\"purple\",label=\"Cat\")\nfor idx,i in enumerate(type_ct.iloc[2,:-1]):\n    if idx==0:\n        plt.hlines(y=i,xmin=idx-.5, xmax=idx+.5, color=\"red\", linestyle=\"dashed\", label=\"MeanPerc\")\n    else:\n        plt.hlines(y=i,xmin=idx-.5, xmax=idx+.5, color=\"red\", linestyle=\"dashed\")\n        \nplt.legend()\nplt.title(\"% AdoptionSpeed by Type\")\nplt.ylabel(\"[%]\")\nplt.xlabel(\"AdoptionSpeed\")\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)","2cee1c01":"print(\"Age feature has {} unique values.\".format(len(train[\"Age\"].value_counts())))\nprint('-'*35)\nprint(\"Most common Ages:\")\nprint(train[\"Age\"].value_counts()[:5])\nprint('-'*35)\nprint(\"Least common Ages:\")\nprint(train[\"Age\"].value_counts()[-5:])\n\nplt.figure()\nax=plt.subplot()\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nprint('-'*35)\n\nplt.title(\"Histogram of Age feature\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"# Animal\")\nplt.hist(train[\"Age\"].value_counts(), bins=30);","1e74d51f":"train[\"AgeBinned\"] = pd.qcut(train[\"Age\"],7)","5e077fd6":"age_ct = pd.crosstab(train[\"AgeBinned\"],train[\"AdoptionSpeed\"],margins=True).apply(percConvert, axis=1)\nage_ct_dog = pd.crosstab(train[\"AgeBinned\"][train[\"Type\"]==1],train[\"AdoptionSpeed\"][train[\"Type\"]==1],margins=True).apply(percConvert, axis=1)\nage_ct_cat = pd.crosstab(train[\"AgeBinned\"][train[\"Type\"]==2],train[\"AdoptionSpeed\"][train[\"Type\"]==2],margins=True).apply(percConvert, axis=1)\nprint(\"Influence of Age on AdoptionSpeed\")\ndisplay(age_ct)\nprint('-'*50)\nprint(\"Influence of Age on AdoptionSpeed for dogs\")\ndisplay(age_ct_dog)\nprint('-'*50)\nprint(\"Influence of Age on AdoptionSpeed for cats\")\ndisplay(age_ct_cat)","4195fb29":"plt.figure()\nsns.catplot(\"AgeBinned\",col=\"Type\", hue=\"AdoptionSpeed\" ,kind=\"count\" ,data=train)\n","1a3d01c1":"plt.figure(figsize=(36, 5))\nax = plt.subplot()\n\nax.plot(range(5), age_ct.iloc[0,:-1], c='#ffffb2',label=\"AgeGroup1\")\nax.plot(range(5), age_ct.iloc[1,:-1], c='#fed976', label=\"AgeGroup2\")\nax.plot(range(5), age_ct.iloc[2,:-1], c='#feb24c',label=\"AgeGroup3\")\nax.plot(range(5), age_ct.iloc[3,:-1], c='#fd8d3c',label=\"AgeGroup4\")\nax.plot(range(5), age_ct.iloc[4,:-1], c='#fc4e2a',label=\"AgeGroup5\")\nax.plot(range(5), age_ct.iloc[5,:-1], c='#e31a1c',label=\"AgeGroup6\")\nax.plot(range(5), age_ct.iloc[6,:-1], c='#b10026',label=\"AgeGroup7\")\nax.legend(fontsize=18)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.set_xticklabels([\"\",\"0\",\"\",\"1\",\"\",\"2\",\"\",\"3\",\"\",\"4\"]);\n\n\nfig, ax = plt.subplots(ncols=2, nrows=1, figsize=(18,5), sharey=True)\n\nax[0].plot(range(5), age_ct_dog.iloc[0,:-1], c='#f2f0f7',label=\"AgeGroup1\")\nax[0].plot(range(5), age_ct_dog.iloc[1,:-1], c='#dadaeb', label=\"AgeGroup2\")\nax[0].plot(range(5), age_ct_dog.iloc[2,:-1], c='#bcbddc',label=\"AgeGroup3\")\nax[0].plot(range(5), age_ct_dog.iloc[3,:-1], c='#9e9ac8',label=\"AgeGroup4\")\nax[0].plot(range(5), age_ct_dog.iloc[4,:-1], c='#807dba',label=\"AgeGroup5\")\nax[0].plot(range(5), age_ct_dog.iloc[5,:-1], c='#6a51a3',label=\"AgeGroup6\")\nax[0].plot(range(5), age_ct_dog.iloc[6,:-1], c='#4a1486',label=\"AgeGroup7\")\nax[0].legend()\nax[0].spines[\"top\"].set_visible(False)\nax[0].spines[\"right\"].set_visible(False)\nax[0].set_xticklabels([\"\",\"0\",\"\",\"1\",\"\",\"2\",\"\",\"3\",\"\",\"4\"]);\n\nax[1].plot(range(5), age_ct_cat.iloc[0,:-1], c='#edf8e9',label=\"AgeGroup1\")\nax[1].plot(range(5), age_ct_cat.iloc[1,:-1], c='#c7e9c0', label=\"AgeGroup2\")\nax[1].plot(range(5), age_ct_cat.iloc[2,:-1], c='#a1d99b',label=\"AgeGroup3\")\nax[1].plot(range(5), age_ct_cat.iloc[3,:-1], c='#74c476',label=\"AgeGroup4\")\nax[1].plot(range(5), age_ct_cat.iloc[4,:-1], c='#41ab5d',label=\"AgeGroup5\")\nax[1].plot(range(5), age_ct_cat.iloc[5,:-1], c='#238b45',label=\"AgeGroup6\")\nax[1].plot(range(5), age_ct_cat.iloc[6,:-1], c='#005a32',label=\"AgeGroup7\")\nax[1].legend()\nax[1].spines[\"top\"].set_visible(False)\nax[1].spines[\"right\"].set_visible(False)\nax[1].set_xticklabels([\"\",\"0\",\"\",\"1\",\"\",\"2\",\"\",\"3\",\"\",\"4\"]);","4c4cba39":"print(\"There are {} unique breeds in the dataset.\".format(len(train[\"Breed1\"].value_counts())))\nprint(\"-\"*35)\nprint(train[\"Breed1\"].value_counts()[:10])\nprint(\"-\"*35)\nprint(train[[\"Breed1\", \"Breed2\"]].sample(5))\nprint(\"-\"*35)\nprint(\"{} % of the dogs are purebred\".format(train[\"Breed2\"][train[\"Breed2\"] == 0].shape[0]\/train.shape[0]*100))","5a1a554c":"train[\"PureBred\"] = 0\ntrain[\"PureBred\"][(train[\"Breed2\"] == train[\"Breed1\"]) | \n                 (train[\"Breed2\"] == 0)] = 1","8f2533aa":"breed_ct = pd.crosstab(train[\"PureBred\"],train[\"AdoptionSpeed\"],margins=True).apply(percConvert, axis=1)\nprint(breed_ct)","7b43e25c":"#sns.countplot(train[\"PureBred\"])\nsns.countplot(\"AdoptionSpeed\", hue=\"PureBred\", data=train)","8ab9bb76":"train[\"Breed1\"].value_counts()\n\nbreeds = pd.read_csv(\"..\/input\/breed_labels.csv\")\n\nbreeds.columns = [\"Breed1\", \"Type\", \"BreedName1\"]\nbreeds.drop(\"Type\", 1, inplace=True)\n\nx=dict(zip(breeds[\"Breed1\"], breeds[\"BreedName1\"]))","20c6b098":"plt.figure(figsize=(10,10))\nax = plt.subplot(121)\ncatBreeds = (\" \").join([str(i).replace(\" \", \"\") for i in train.loc[train[\"Type\"]==2, \"Breed1\"].map(x).values])\nwordcloud = WordCloud(max_font_size=None, background_color=\"black\", width=1200, height=1000).generate(catBreeds)\nplt.imshow(wordcloud)\nplt.title(\"Top cat breeds\")\nplt.axis('off')\n\nax = plt.subplot(122)\ndogBreeds = (\" \").join([str(i).replace(\" \", \"\") for i in train.loc[train[\"Type\"]==1, \"Breed1\"].map(x).values])\nwordcloud = WordCloud(max_font_size=None, background_color=\"black\", width=1200, height=1000).generate(dogBreeds)\nplt.imshow(wordcloud)\nplt.title(\"Top cat breeds\")\nplt.axis('off')\n","1c585b06":"train.loc[train[\"Type\"]==1, \"Breed1\"].map(x).values","6cce889f":"mixed = []\n\nmixed.append(breeds[\"Breed1\"][(breeds[\"BreedName1\"].str.contains(\"Hair\")) & ((breeds[\"BreedName1\"].str.contains(\"Long\")) |\n      (breeds[\"BreedName1\"].str.contains(\"Medium\")) | (breeds[\"BreedName1\"].str.contains(\"Short\")))].values)\n\nmixed.append(breeds[\"Breed1\"][breeds[\"BreedName1\"].str.contains(\"Breed\")].values)\n\nmixed = [i for i in flatten(mixed)]","0b02c36a":"train[\"PureBred\"] = 1\ntrain[\"PureBred\"][train[\"Breed2\"] != 0] = 0\ntrain[\"PureBred\"][train[\"Breed1\"].isin(mixed)] = 0","2922f36e":"print(\"Purebred Dogs\")\nprint(train.loc[train[\"Type\"]==1, \"PureBred\"].value_counts())\nprint(train.loc[train[\"Type\"]==1].shape[0]\/838)\n\ntrain.loc[train[\"Type\"]==2, \"PureBred\"].value_counts()","ddb57fad":"breed_ct = pd.crosstab(train[\"PureBred\"],train[\"AdoptionSpeed\"],margins=True).apply(percConvert, axis=1)\nprint(breed_ct)","9fbd7bd2":"fig, ax = plt.subplots(nrows=1, ncols=3,figsize=(17,10))\n\nmake_count_plot(train,\"PureBred\", \"AdoptionSpeed\", \n                title=\"AdoptionSpeed by Breed\",super_ax=ax[0])\n\nmake_count_plot(train.loc[train[\"Type\"]==1],\"PureBred\", \"AdoptionSpeed\", \n                title=\"AdoptionSpeed for Dogs by Breed\",super_ax=ax[1])\n\nmake_count_plot(train.loc[train[\"Type\"]==2],\"PureBred\", \"AdoptionSpeed\", \n                title=\"AdoptionSpeed for Cats by Breed\",super_ax=ax[2])\n\n","f7bc848e":"plt.figure(figsize=(10,10))\nax = plt.subplot(121)\ncatNames = (\" \").join(train.loc[train[\"Type\"]==2, \"Name\"].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color=\"black\", width=1200, height=1000).generate(catNames)\nplt.imshow(wordcloud)\nplt.title(\"Top cat names\")\nplt.axis('off')\n\nax2 = plt.subplot(122)\ndogNames = (\" \").join(train.loc[train[\"Type\"]==1, \"Name\"].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color=\"black\", width=1200, height=1000).generate(dogNames)\nplt.imshow(wordcloud)\nplt.title(\"Top dog names\")\nplt.axis('off')","a68d20cc":"print(train[[\"AdoptionSpeed\"]][(train[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"pup\")) | +\n                        (train[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"kit\")) ].mean())\nprint(train[[\"AdoptionSpeed\"]][(~train[\"Name\"].apply(lambda x: str(x).lower()).str.contains(r'\\d')) &\n                                (~train[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"pup\")) & +\n                                (~train[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"kit\"))].mean())\nprint(train[[\"AdoptionSpeed\"]][(train[\"Name\"].apply(lambda x: str(x).lower()).str.contains(r'\\d')) &\n                              (~train[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"pup\")) & +\n                              (~train[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"kit\"))].mean())","88149d98":"\"\"\"\nNew features:\nBaby = name contains pup or kit\nNormal = name does not contain pup or kit\nStrange = name contains numbers\n\"\"\"\nmerged[\"BabyName\"] = 0\nmerged[\"NormalName\"] = 0\nmerged[\"StrangeName\"] = 0\n\nmerged[\"BabyName\"][(merged[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"pup\")) | +\n                        (merged[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"kit\"))] = 1\n\nmerged[\"NormalName\"][(~merged[\"Name\"].apply(lambda x: str(x).lower()).str.contains(r'\\d')) &\n                                (~merged[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"pup\")) & +\n                                (~merged[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"kit\"))] = 1\n\nmerged[\"StrangeName\"][(merged[\"Name\"].apply(lambda x: str(x).lower()).str.contains(r'\\d')) &\n                              (~merged[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"pup\")) & +\n                              (~merged[\"Name\"].apply(lambda x: str(x).lower()).str.contains(\"kit\"))] = 1","27b9d710":"merged[[\"Name\", \"BabyName\", \"NormalName\", \"StrangeName\"]].describe(include='all')","56f2bda7":"train.columns","9a3fb0d7":"train[\"Color1\"].value_counts()","b9dd93e6":"fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(15,5))\nmake_count_plot(train, \"Color1\", super_ax=ax[0])\nmake_count_plot(train, \"Color2\", super_ax=ax[1])\nmake_count_plot(train, \"Color3\", super_ax=ax[2])","3f492cdc":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15,5))\nmake_count_plot(train[train[\"Type\"]==1], \"FurLength\",title=\"Dogs\", super_ax=ax[0])\nmake_count_plot(train[train[\"Type\"]==2], \"FurLength\", title=\"Cats\",super_ax=ax[1])","da1679cf":"fig, ax = plt.subplots(nrows=3, ncols=2, figsize=(15,15))\nmake_count_plot(train[train[\"Type\"]==1], \"Vaccinated\",title=\"Dogs\", super_ax=ax[0][0])\nmake_count_plot(train[train[\"Type\"]==2], \"Vaccinated\", title=\"Cats\",super_ax=ax[0][1])\n\nmake_count_plot(train[train[\"Type\"]==1], \"Dewormed\",title=\"Dogs\", super_ax=ax[1][0])\nmake_count_plot(train[train[\"Type\"]==2], \"Dewormed\", title=\"Cats\",super_ax=ax[1][1])\n\nmake_count_plot(train[train[\"Type\"]==1], \"Sterilized\",title=\"Dogs\", super_ax=ax[2][0])\nmake_count_plot(train[train[\"Type\"]==2], \"Sterilized\", title=\"Cats\",super_ax=ax[2][1])","b3f45db4":"\nprint(\"The mean age of vaccinated animals is {}\".format(round(train[\"Age\"][train[\"Vaccinated\"]==3].mean()),2))\nprint(\"The mean age of not vaccinated animals is {}\".format(round(train[\"Age\"][train[\"Vaccinated\"]==2].mean()),2))\nprint(\"The mean age of animals with unknown vaccination is {}\".format(round(train[\"Age\"][train[\"Vaccinated\"]==1].mean()),2))\nprint('-'*45)\nprint(\"The mean age of dewormed animals is {}\".format(round(train[\"Age\"][train[\"Dewormed\"]==3].mean()),2))\nprint(\"The mean age of not dewormed animals is {}\".format(round(train[\"Age\"][train[\"Dewormed\"]==2].mean()),2))\nprint(\"The mean age of animals with unknown dewormed is {}\".format(round(train[\"Age\"][train[\"Dewormed\"]==1].mean()),2))\nprint('-'*45)\nprint(\"The mean age of sterilized animals is {}\".format(round(train[\"Age\"][train[\"Sterilized\"]==3].mean()),2))\nprint(\"The mean age of not sterilized animals is {}\".format(round(train[\"Age\"][train[\"Sterilized\"]==2].mean()),2))\nprint(\"The mean age of animals with unknown sterilization is {}\".format(round(train[\"Age\"][train[\"Sterilized\"]==1].mean()),2))","5d5d433b":"breed_ct = pd.crosstab(train[\"Quantity\"],train[\"AdoptionSpeed\"],margins=True).apply(percConvert, axis=1)\nprint(breed_ct)","a532abb0":"train[\"MoreThanOne\"] = 1\ntrain[\"MoreThanOne\"][train[\"Quantity\"]==1]=0","76d22dd0":"train[\"Fee\"].value_counts()[:10]","f27bc1da":"print(\"Average AdoptionSpeed for animals w\/o fee {}\".format(round(train[\"AdoptionSpeed\"][train[\"Fee\"]==0].mean(),2)))\nprint(\"Average AdoptionSpeed for animals w\/ fee {}\".format(round(train[\"AdoptionSpeed\"][train[\"Fee\"]!=0].mean(),2)))","868c9fa0":"train[\"VideoAmt\"].value_counts()\n\nvideo_ct = pd.crosstab(train[\"VideoAmt\"], train[\"AdoptionSpeed\"], margins=True).apply(percConvert, axis=1)\nprint(video_ct)","c3bc3af1":"train[\"Video\"] = 0\ntrain[\"Video\"][train[\"VideoAmt\"]>0]=1","6fe6775e":"make_count_plot(train, \"Video\")","a9f6d15b":"train[\"PhotoAmt\"].value_counts()\n\nvideo_ct = pd.crosstab(train[\"PhotoAmt\"], train[\"AdoptionSpeed\"], margins=True).apply(percConvert, axis=1)\nprint(video_ct)","38467156":"temp = train.copy(deep=True)\ntemp[\"PhotoCut\"] = pd.cut(temp[\"PhotoAmt\"], 10)\nplt.figure(figsize=(15,5))\nmake_count_plot(temp, \"PhotoCut\")","d541e4af":"merged_backup = merged.copy(deep=True)","0a8cda8d":"merged = merged_backup.copy(deep=True)","318916dd":"merged.shape","081225bd":"n_components = 5\ntext_feature = []\n\nprint('generating features from \"Description\".')\n\nsvd_ = TruncatedSVD(n_components = n_components, random_state=1337)\n\nnmf_ = NMF(n_components=n_components, random_state=1337)\n\ntfidf_col = TfidfVectorizer(ngram_range=(1, 2),stop_words='english').fit_transform(merged[\"Description\"].fillna('NaN').values)\n\nsvd_col = svd_.fit_transform(tfidf_col)\nsvd_col = pd.DataFrame(svd_col)\nsvd_col = svd_col.add_prefix('SVD_Description')\n\nnmf_col = nmf_.fit_transform(tfidf_col)\nnmf_col = pd.DataFrame(nmf_col)\nnmf_col = nmf_col.add_prefix('NMF_Description')\n\ntext_feature.append(svd_col)\ntext_feature.append(nmf_col)\ntext_feature = pd.concat(text_feature, axis=1)\ntext_feature.set_index(merged.index, inplace=True)\n\nmerged =  merged.merge(text_feature, left_index=True, right_index=True, how='outer')","459794e2":"msn.matrix(merged, sort='ascending')","d550bca5":"toEncode = ['Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n       'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n       'Sterilized', 'Health', 'State']\n\nohe = OneHotEncoder()\n\ntemp = ohe.fit_transform(merged[toEncode])\ntemp = pd.DataFrame(temp.toarray(), index=merged.index)\nmerged = merged.merge(temp, left_index=True, right_index=True, how='outer')","262692a9":"train = merged[merged[\"IsTraining\"] == 1]\ntest = merged[merged[\"IsTraining\"] == 0]","1f821970":"X = train.drop(['SVD_Description0', 'SVD_Description1',\n'SVD_Description2', 'SVD_Description3', 'SVD_Description4',\n'RescuerID','Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n'Sterilized', 'Health', 'State',\"Name\", \"Description\",\"AdoptionSpeed\", \"IsTraining\"],axis=1).values\ny = train[\"AdoptionSpeed\"].values\n\nprint(X.shape)\nprint(y.shape)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1337)\n\nprint(\"Training features size: {}\".format(X_train.shape))#\nprint(\"Training label size: {}\".format(y_train.shape))\nprint(\"Testing features size: {}\".format(X_test.shape))\nprint(\"Testing label size: {}\".format(y_test.shape))","87a2c213":"X.sample()","738050c1":"Classifier","0c42817e":"sns.barplot(Classifier[\"Classifier\"], Classifier[\"Cohen_Kappa\"])\nplt.xticks(rotation=90)","b60a8d41":"plt.bar(x=range(5),height=Classifier[[\"0_pred\", \"1_pred\",\"2_pred\", \"3_pred\",\"4_pred\"]].mean(),alpha=.5,color=\"red\")\nplt.bar(x=range(5), height=X_temp[\"AdoptionSpeed\"].value_counts(normalize=True).sort_values(),alpha=.5,color=\"blue\")","a9e6da1b":"clf.best_params_","072bba18":"clf.best_score_","44719438":"params = {'colsample_bytree': [0.75],\n'learning_rate': [0.1],\n 'max_depth': [10],\n 'n_estimators': [100],\n 'num_leaves': [33],\n 'objective': ['multiclass'],\n 'random_seed': [1337],\n 'reg_alpha': [0.25],\n 'reg_lambda': [0,0],\n 'silent': [True],\n 'subsample': [0.8]}","950696a3":"LGB = lgb.LGBMClassifier()\nclf = GridSearchCV(LGB, params, cv=5)\nclf.fit(X_train,y_train)","0d0fda80":"clf.best_params_","619a4c5c":"params = clf.best_params_\n\nprint(X.shape)\nprint(test.shape)","f1b21010":"LGB.fit(X,y)\nLGB.predict(test)","bc4c732c":"test.drop(['SVD_Description0', 'SVD_Description1',\n'SVD_Description2', 'SVD_Description3', 'SVD_Description4',\n'RescuerID','Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n'Sterilized', 'Health', 'State',\"Name\", \"Description\",\"AdoptionSpeed\", \"IsTraining\"],axis=1, inplace=True)","7bbcd726":"preds = clf.predict(test)","1622eafe":"submission = pd.DataFrame([int(i) for i in preds], index=test.index)\nsubmission.columns = [\"AdoptionSpeed\"]","f3578a7c":"submission","6bf09bdf":"submission.to_csv(\"submission.csv\")","56ac2b72":"import gc\ngc.collect()","e17717a5":"params = {\n          \"num_leaves\":[31], \n          \"max_depth\":[5,10,-1], \n          \"learning_rate\":[0.001, 0.01, 0.1], \n          \"n_estimators\":[100],  \n          \"objective\":[\"multiclass\"], \n          \"subsample\":[0.8,1.0], \n          \"colsample_bytree\":[0.8,1.0], \n          \"reg_alpha\":[0.0, 0.25], \n          \"reg_lambda\":[0.0, 0.25], \n          \"random_seed\":[1337], \n          \"silent\":[True]}","482d6915":"### Looking at the pure bred graph it seems strange that there are so many pure bred animals in the dataset. Also that people are rather adopting non-pure bred vs pure bred animals seems strange. Lets take a closer look at what the breeds actually are.","6386bee6":"# Type\n### This shows wether the animal is a dog (1) or a cat (2) ","e796af28":"### Data looks very complete. Some animals do not have a name and the description is not available in one case. ","a1aed840":"### Data import ","3a61f202":"# Breed\n\n### There are two breed features **Breed1** & **Breed2**. In **Breed1** there are 176 unique breeds listed, while on the breed reference sheet are 307. For purebred dogs there is a - 0 - as value for the **Breed2** feature.","cbaa46b4":"### Data inspection","906dc804":"LGB = lgb.LGBMClassifier()\nclf = GridSearchCV(LGB, params, cv=5)\nclf.fit(X_train,y_train)","e5af8501":"# EDA","2a63d786":"### The following function for the generation of count plots is derived from this very nice kernel <hl>https:\/\/www.kaggle.com\/artgor\/exploration-of-data-step-by-step<\/hl>","b4ebc852":"### ok so now the picture is in accordance with the initial intuition that pure bred animals should be adopted quicker than mixed breeds. Esecially by dogs a pure breed is very advantagous for a swift adoption.","dc5205fb":"LGB = lgb.LGBMClassifier()\nclf = GridSearchCV(LGB, params, cv=5)\nclf.fit(X,y)","37782cdb":"## Data Fields - from the competitions description\n<ul><li><p>PetID - Unique hash ID of pet profile<\/p><\/li>\n    <li><p>AdoptionSpeed - Categorical speed of adoption. Lower is faster. This is the value to predict. See below section for more info.<\/p><\/li>\n    <li><p>Type - Type of animal (1 = Dog, 2 = Cat)<\/p><\/li>\n    <li><p>Name - Name of pet (Empty if not named)<\/p><\/li>\n    <li><p>Age - Age of pet when listed, in months<\/p><\/li>\n    <li><p>Breed1 - Primary breed of pet (Refer to BreedLabels dictionary)<\/p><\/li>\n    <li><p>Breed2 - Secondary breed of pet, if pet is of mixed breed (Refer to BreedLabels dictionary)<\/p><\/li>\n    <li><p>Gender - Gender of pet (1 = Male, 2 = Female, 3 = Mixed, if profile represents group of pets)<\/p><\/li>\n    <li><p>Color1 - Color 1 of pet (Refer to ColorLabels dictionary)<\/p><\/li>\n    <li><p>Color2 - Color 2 of pet (Refer to ColorLabels dictionary)<\/p><\/li>\n    <li><p>Color3 - Color 3 of pet (Refer to ColorLabels dictionary)<\/p><\/li>\n    <li><p>MaturitySize - Size at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)<\/p><\/li>\n    <li><p>FurLength - Fur length (1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)<\/p><\/li>\n    <li><p>Vaccinated - Pet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)<\/p><\/li>\n    <li><p>Dewormed - Pet has been dewormed (1 = Yes, 2 = No, 3 = Not Sure)<\/p><\/li>\n    <li><p>Sterilized - Pet has been spayed \/ neutered (1 = Yes, 2 = No, 3 = Not Sure)<\/p><\/li>\n    <li><p>Health - Health Condition (1 = Healthy, 2 = Minor Injury, 3 = Serious Injury, 0 = Not Specified)<\/p><\/li>\n    <li><p>Quantity - Number of pets represented in profile<\/p><\/li>\n    <li><p>Fee - Adoption fee (0 = Free)<\/p><\/li>\n    <li><p>State - State location in Malaysia (Refer to StateLabels dictionary)<\/p><\/li>\n    <li><p>RescuerID - Unique hash ID of rescuer<\/p><\/li>\n    <li><p>VideoAmt - Total uploaded videos for this pet<\/p><\/li>\n    <li><p>PhotoAmt - Total uploaded photos for this pet<\/p><\/li>\n    <li><p>Description - Profile write-up for this pet. The primary language used is English, with some in Malay or Chinese.<\/p><\/li><\/ul>\n   \n \n## Adoption speed\n### Contestants are required to predict this value. The value is determined by how quickly, if at all, a pet is adopted. The values are determined in the following way:   \n   <li><p>0 - Pet was adopted on the same day as it was listed.<\/p><\/li>\n    <li><p>1 - Pet was adopted between 1 and 7 days (1st week) after being listed.<\/p><\/li>\n    <li><p>2 - Pet was adopted between 8 and 30 days (1st month) after being listed.<\/p><\/li>\n    <li><p>3 - Pet was adopted between 31 and 90 days (2nd & 3rd month) after being listed.<\/p><\/li>\n    <li><p>4 - No adoption after 100 days of being listed. (There are no pets in this dataset that waited between 90 and 100 days). <\/p><\/li>\n    \n     \n    \n\n\n\n\n\n\n","55f0987a":"def run_skfold(clf):\n    skf = StratifiedKFold(n_splits=10, random_state=1337)\n    outcomes = []\n    preds = []\n    fold = 0\n    for train_index, test_index in skf.split(X,y):\n        fold += 1\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        clf.fit(X_train, y_train)\n        predictions = clf.predict(X_test)\n        cks = cohen_kappa_score(y_test, predictions)\n        outcomes.append(cks)\n        preds.append(predictions)\n        print(\"Fold {0} cks: {1}\".format(fold, cks))     \n    mean_outcome = np.mean(outcomes)\n    preds = mean_preds(preds)\n    print(\"Mean cks: {0}\".format(mean_outcome)) \n    return mean_outcome, preds\n\ndef mean_preds(preds, label_count=5):\n    labels = [[],[],[],[],[]]\n    norm_counts = [pd.value_counts(i, normalize=True) for i in preds]\n    for i in range(len(norm_counts)):\n        for j in range(label_count):\n            if norm_counts[i][norm_counts[i].index==j].values:\n                labels[j].append(norm_counts[i][norm_counts[i].index==j].values)\n            else: labels[j].append(0)\n            \n    mean_preds = [float(mean(i)) for i in labels]\n    print(mean_preds)\n    return mean_preds\n\nClassifier = pd.DataFrame()\n\nclfs = [DecisionTreeClassifier(),ExtraTreeClassifier(),ExtraTreesClassifier(),\n       GaussianNB(),KNeighborsClassifier(),LinearDiscriminantAnalysis(),QuadraticDiscriminantAnalysis(),\n      LogisticRegression(solver='lbfgs', multi_class = \"multinomial\"),\n        RidgeClassifier(),RandomForestClassifier(), xgb.XGBClassifier(), lgb.LGBMClassifier()]\n\nfor clf in clfs:\n    print(\"Fitting model using {}\".format(clf))\n    start = time.time()\n    Classifier_Classifier = str(clf).split('(')[0]\n    \n    Classifier_Score, Classifier_Preds = run_skfold(clf)\n\n        \n    Classifier_Time = time.time()-start    \n    Classifier_Values = pd.Series([Classifier_Classifier, Classifier_Score, *Classifier_Preds, Classifier_Time])\n    Classifier = Classifier.append(Classifier_Values, ignore_index=True)\n    \nClassifier.columns=[\"Classifier\", \"Cohen_Kappa\", \"0_pred\", \"1_pred\",\"2_pred\", \"3_pred\",\"4_pred\", \"Time\"]","47f19807":"### Examining the influence of **Type** on the **AdoptionSpeed** we can observe that cats have a more likely to be adopted. \n\n# Age\n\n### The **Age** feature is given in month. A quick glance at the data shows that there are over 100 unique values. Some ages are very rare while other are more common. Plotting a histogram of the **Age** feature shows a skewed distribution of the data. Looking at the data it seems that there must clearly be some errors. Binning the data might give better insights. We will introduce a age threshold and maybe further group the animals. ","d1f5c3f4":"### Names: Maybe we can create a feature based on the names where Baby, Puppies Kitten are grouped, normal names are grouped and some strange names, like Mix White or names with numbers, are grouped.","5bfbdc3a":"params = {'colsample_bytree': [0.75,0.8,0.95],\n'learning_rate': [0.1,0.05,0.15],\n 'max_depth': [10,5,15],\n 'n_estimators': [100],\n 'num_leaves': [28,31,33],\n 'objective': ['multiclass'],\n 'random_seed': [1337],\n 'reg_alpha': [0.15,0.25,0.35],\n 'reg_lambda': [0,0.05,0.1],\n 'silent': [True],\n 'subsample': [0.75,0.8,0.85]}"}}