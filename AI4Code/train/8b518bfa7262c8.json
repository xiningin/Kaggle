{"cell_type":{"4b9959f5":"code","9ba8ee56":"code","f45e6bfb":"code","4bb5f6cc":"code","de90669a":"code","1ba43dae":"code","fcba1b5d":"code","d20072d7":"code","bd892654":"code","f5b50f65":"code","af21a672":"code","d1515f48":"code","3bd857a9":"code","83515fac":"code","461328dd":"code","765478dc":"code","a1f7c6c5":"code","42578500":"code","258d2458":"code","96370eba":"code","512a1278":"code","ba9fea75":"code","f04ada5d":"code","2d633d3c":"code","950068aa":"code","2916dc98":"code","75c5ef7c":"code","8c8e2bea":"code","e24e7cad":"code","413afcdc":"code","5438c66a":"code","9ac50122":"code","bc13047f":"code","dab97f04":"markdown","61026c9e":"markdown","7bf1272b":"markdown","7b6050d1":"markdown","6f2fe1e4":"markdown","42c5dee3":"markdown","b6ef2fcf":"markdown","2ad517c9":"markdown"},"source":{"4b9959f5":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\n# statistics tools\nimport scipy.stats as stats\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n# machine learning tools\nimport h2o\nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator","9ba8ee56":"# load data \/ preview\ndf = pd.read_csv('..\/input\/body-fat-prediction-dataset\/bodyfat.csv')\ndf.head()","f45e6bfb":"# data overview\ndf.info()","4bb5f6cc":"# basic stats\ndf.describe()","de90669a":"# plot target\ndf.BodyFat.plot(kind='hist', bins=25)\nplt.title('Body Fat - Distribution')\nplt.grid()\nplt.show()","1ba43dae":"# body fat vs density\nplt.scatter(df.Density, df.BodyFat)\nplt.title('Body Fat vs Density')\nplt.grid()\nplt.show()","fcba1b5d":"# correlation between Density and BodyFat\nprint('Correlation Pearson:', stats.pearsonr(df.Density, df.BodyFat))","d20072d7":"# define features\nfeatures = ['Age', 'Weight', 'Height', 'Neck', \n            'Chest', 'Abdomen', 'Hip', 'Thigh', 'Knee',\n            'Ankle', 'Biceps', 'Forearm', 'Wrist']","bd892654":"# boxplot of features\nfor f in features:\n    plt.figure(figsize=(12,2))\n    plt.boxplot(df[f], vert=False)\n    plt.title(f)\n    plt.grid()\n    plt.show()","f5b50f65":"df[df.Height <= 30]","af21a672":"df = df[df.Height>30]","d1515f48":"# pairwise scatter plots\nsns.pairplot(df[features], \n             kind='reg', \n             plot_kws={'line_kws':{'color':'magenta'}, 'scatter_kws': {'alpha': 0.25}})\nplt.show()","3bd857a9":"# correlations\ncorr_pearson = df[features].corr(method='pearson')\ncorr_spearman = df[features].corr(method='spearman')\n\nplt.figure(figsize=(12,14))\nax1 = plt.subplot(2,1,1)\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\n\nax2 = plt.subplot(2,1,2, sharex=ax1)\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","83515fac":"# add height and weight in metric units\ndf['Height_m'] = df.Height*2.54\/100\ndf['Weight_m'] = df.Weight*0.454\n\n# add BMI as feature\ndf['BMI'] = df.Weight_m \/ (df.Height_m**2)\nfeatures = features + ['BMI']","461328dd":"df","765478dc":"for f in features:\n    c = df[f].corr(df.BodyFat, method='pearson')\n    c = np.round(c,4)\n    plt.figure(figsize=(5,5))\n    plt.scatter(df[f], df.BodyFat, alpha=0.5)\n    plt.title('Body Fat vs ' + f + ' \/ corr = ' + str(c))\n    plt.xlabel(f)\n    plt.ylabel('Body Fat')\n    plt.grid()\n    plt.show()","a1f7c6c5":"# used features\nprint(features)","42578500":"# define target\ntarget='BodyFat'","258d2458":"# start H2O\nh2o.init(max_mem_size='12G', nthreads=4) # Use maximum of 12 GB RAM and 4 cores","96370eba":"# upload data frame in H2O environment\ndf_hex = h2o.H2OFrame(df)\n\n# train \/ test split\ntrain_perc = 0.7\ntrain_hex, test_hex = df_hex.split_frame(ratios=[train_perc], seed=999)","512a1278":"# define GLM\nglm_model = H2OGeneralizedLinearEstimator(family = 'gaussian',\n                                          nfolds = 5,\n                                          alpha = 0.75, # 0:Ridge (L2), 1:LASSO (L1)\n                                          lambda_search = True,\n                                          score_each_iteration = True,                                          \n                                          seed=12345)","ba9fea75":"# train model\nglm_model.train(features, target, training_frame = train_hex)","f04ada5d":"# show model details\nglm_model","2d633d3c":"# variable importance\nglm_model.varimp_plot()","950068aa":"# show coefficients\nglm_model.coef()","2916dc98":"# predict on training data\npred_train = glm_model.predict(train_hex)\ny_train_act = train_hex.as_data_frame()[target].values # actuals\ny_train_pred = pred_train.as_data_frame().predict.values # predictions","75c5ef7c":"# plot predictions vs actual\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot(111)\nax.scatter(x=y_train_act,y=y_train_pred)\nax.plot([0,50],[0,50], color='green')\nax.set_aspect(1)\nplt.grid()\nplt.title('Prediction vs Actual - Training Data')\nplt.xlabel('Actual')\nplt.ylabel('Prediction')\nplt.show()","8c8e2bea":"# correlations\nprint('Correlations - Training Data')\nprint('Correlation Pearson:', stats.pearsonr(y_train_act, y_train_pred))\nprint('Correlation Spearman:', stats.spearmanr(y_train_act, y_train_pred))","e24e7cad":"# metrics on training data\nprint('MAE (train): ', np.round(mean_absolute_error(y_train_act, y_train_pred),2))\nprint('RMSE(train): ', np.round(np.sqrt(mean_squared_error(y_train_act, y_train_pred)),2))","413afcdc":"# predict on test data\npred_test = glm_model.predict(test_hex)\ny_test_act = test_hex.as_data_frame()[target].values # actual values\ny_test_pred = pred_test.as_data_frame().predict.values # predictions","5438c66a":"# plot predictions vs actuals\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot(111)\nax.scatter(x=y_test_act,y=y_test_pred)\nax.plot([0,50],[0,50], color='green')\nax.set_aspect(1)\nplt.grid()\nplt.title('Prediction vs Actual - Test Data')\nplt.xlabel('Actual')\nplt.ylabel('Prediction')\nplt.show()","9ac50122":"# correlations\nprint('Correlations - Test Set')\nprint('Correlation Pearson:', stats.pearsonr(y_test_act, y_test_pred))\nprint('Correlation Spearman:', stats.spearmanr(y_test_act, y_test_pred))","bc13047f":"# metrics on test data\nprint('MAE (test): ', np.round(mean_absolute_error(y_test_act, y_test_pred),2))\nprint('RMSE(test): ', np.round(np.sqrt(mean_squared_error(y_test_act, y_test_pred)),2))","dab97f04":"### For a model using Density as feature as well see the following notebook:\n#### https:\/\/www.kaggle.com\/docxian\/body-fat-prediction-glm\/","61026c9e":"#### Height at ca. 30 inch is a significant outlier, so let's remove this row.","7bf1272b":"<a id='1'><\/a>\n# EDA","7b6050d1":"<a id='3'><\/a>\n# Fit Linear Model","6f2fe1e4":"<a id='2'><\/a>\n# Target vs Features","42c5dee3":"#### No missing values.","b6ef2fcf":"# Table of Contents\n* [EDA](#1)\n* [Target vs Features](#2)\n* [Fit Linear Model](#3)","2ad517c9":"### Very strong dependency between Body Fat and Density. We will try to build a model w\/o using the Density feature."}}