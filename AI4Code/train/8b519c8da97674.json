{"cell_type":{"a961bd38":"code","49d0046d":"code","6b6c8440":"code","cf67849d":"code","9d34b2c6":"code","4dac8d4c":"code","5ad4bc96":"code","f3f3c496":"code","d82bbbb9":"code","49d9f396":"code","b8138383":"code","fb2c6b41":"code","4008f4ec":"code","01c12423":"code","fe984848":"code","88c5e2ff":"code","46655100":"code","df465ae9":"code","43e2c196":"code","3cee357d":"code","3c64e208":"code","e5fe6a50":"code","8d1f5b4e":"code","d493deeb":"code","ea10ffd5":"code","b3e20fd6":"code","3eda5ea6":"code","1bcd5996":"code","5759678a":"code","0d90934f":"markdown"},"source":{"a961bd38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","49d0046d":"ls","6b6c8440":"cd ..","cf67849d":"ls","9d34b2c6":"cd input","4dac8d4c":"ls","5ad4bc96":"cd cat-and-dog","f3f3c496":"ls","d82bbbb9":"training_path = \"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\"\ntesting_path = \"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\"","49d9f396":"categories = [\"cats\",\"dogs\"]","b8138383":"import cv2","fb2c6b41":"trainingdata = []\ndef create_training_data():\n  for category in categories:\n    class_num = categories.index(category)\n    path = os.path.join(training_path,category)\n    for img in os.listdir(path):\n      try:\n        img_array = cv2.imread(os.path.join(path,img))\n        resized_array = cv2.resize(img_array,(224,224))\n        trainingdata.append([resized_array,class_num])\n      except Exception as e:\n        pass","4008f4ec":"testingdata = []\ndef create_testing_data():\n  for category in categories:\n    class_num = categories.index(category)\n    path = os.path.join(testing_path,category)\n    for img in os.listdir(path):\n      try:\n        img_array = cv2.imread(os.path.join(path,img))\n        resized_array = cv2.resize(img_array,(224,224))\n        testingdata.append([resized_array,class_num])\n      except Exception as e:\n        pass","01c12423":"create_training_data()","fe984848":"create_testing_data()","88c5e2ff":"import random\nrandom.shuffle(trainingdata)\nrandom.shuffle(testingdata)","46655100":"x = []\ny = []\na = []\nb = []\nfor features,labels in trainingdata:\n  x.append(features)\n  y.append(labels)\n\nfor features,labels in testingdata:\n  a.append(features)\n  b.append(labels)","df465ae9":"print(len(y))\nprint(len(b))","43e2c196":"import numpy as np\nX = np.array(x).reshape(-1,224,224,3)\nA = np.array(a).reshape(-1,224,224,3)","3cee357d":"print(X.shape)\nprint(A.shape)","3c64e208":"from keras.layers import Input, Lambda, Dense, Flatten\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt","e5fe6a50":"# add preprocessing layer to the front of VGG\nvgg = VGG16(input_shape=(224,224,3), weights='imagenet', include_top=False)","8d1f5b4e":"# don't train existing weights\nfor layer in vgg.layers:\n  layer.trainable = False","d493deeb":"\n# our layers - you can add more if you want\nx = Flatten()(vgg.output)\n# x = Dense(1000, activation='relu')(x)\nprediction = Dense(1, activation='sigmoid')(x)","ea10ffd5":"# # create a model object\n# model = Model(inputs=vgg.input, outputs=prediction)","b3e20fd6":"\n# # view the structure of the model\n# model.summary()","3eda5ea6":"import tensorflow as tf\n# detect and init the TPU\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\n\n# instantiate a distribution strategy\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n# instantiating the model in the strategy scope creates the model on the TPU\nwith tpu_strategy.scope():\n    model = Model(inputs=vgg.input, outputs=prediction)  # define your model normally\n    # tell the model what cost and optimization method to use\n    model.compile(\n  loss='binary_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy'])\n    model.fit(X,y,batch_size=64,epochs=5,validation_split=0.2)","1bcd5996":"model.evaluate(A,b,verbose=2)","5759678a":"model.save('\/kaggle\/output\/saved_model.h5')","0d90934f":"# **** Implementing Transfer Learning Using VGG-16"}}