{"cell_type":{"0b28398e":"code","a145cebb":"code","d17449c0":"code","f857b042":"code","8523a20c":"code","46491706":"code","be10eaee":"code","a695f55b":"code","6b662291":"code","0ebaaca0":"code","5e767123":"code","24ed7c06":"code","60f2d747":"code","3dad6ed6":"code","1243a2f1":"code","aab639cf":"code","27873161":"code","cc771b2e":"markdown","0fca311b":"markdown","b9484b89":"markdown","f92aa7ce":"markdown","5179a81e":"markdown","5f2c4d39":"markdown","8cffef42":"markdown","8cb73107":"markdown","53951226":"markdown","1c5cee46":"markdown","240651cd":"markdown","51284fa1":"markdown","ed31dc5e":"markdown","39ea3191":"markdown"},"source":{"0b28398e":"from tensorflow.python.client import device_lib\ndevice_lib.list_local_devices()","a145cebb":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns","d17449c0":"titanic = pd.read_csv('..\/input\/train.csv')\nnominal_cols = ['Embarked','Pclass','Age', 'Survived', 'Sex']\ncat_cols = ['Embarked','Pclass','Age', 'Survived', 'Title']\ntitanic['Title'] = titanic.Name.str.extract('\\, ([A-Z][^ ]*\\.)',expand=False)\ntitanic['Title'].fillna('Title_UK', inplace=True)\ntitanic['Embarked'].fillna('Unknown',inplace=True)\ntitanic['Age'].fillna(0, inplace=True)\n# Replacing Binary with String\nrep = {0: \"Dead\", 1: \"Survived\"}\ntitanic.replace({'Survived' : rep}, inplace=True)","f857b042":"def binning(col, cut_points, labels=None):\n  minval = col.min()\n  maxval = col.max()\n  break_points = [minval] + cut_points + [maxval]\n  if not labels:\n    labels = range(len(cut_points)+1)\n  colBin = pd.cut(col,bins=break_points,labels=labels,include_lowest=True)\n  return colBin\n\ncut_points = [1, 10, 20, 50 ]\nlabels = [\"Unknown\", \"Child\", \"Teen\", \"Adult\", \"Old\"]\ntitanic['Age'] = binning(titanic['Age'], cut_points, labels)\nin_titanic = titanic[nominal_cols]\ncat_titanic = titanic[cat_cols]","8523a20c":"in_titanic.head()","46491706":"cat_titanic.head()","be10eaee":"for x in ['Embarked', 'Pclass','Age', 'Sex', 'Title']:\n    sns.set(style=\"whitegrid\")\n    ax = sns.countplot(y=x, hue=\"Survived\", data=titanic)\n    plt.ylabel(x)\n    plt.title('Survival Plot')\n    plt.show()","a695f55b":"dataset = []\nfor i in range(0, in_titanic.shape[0]-1):\n    dataset.append([str(in_titanic.values[i,j]) for j in range(0, in_titanic.shape[1])])\n# dataset = in_titanic.to_xarray()\n\noht = TransactionEncoder()\noht_ary = oht.fit(dataset).transform(dataset)\ndf = pd.DataFrame(oht_ary, columns=oht.columns_)\ndf.head()","6b662291":"oht.columns_","0ebaaca0":"output = apriori(df, min_support=0.2, use_colnames=oht.columns_)\noutput.head()","5e767123":"config = [\n    ('antecedent support', 0.7),\n    ('support', 0.5),\n    ('confidence', 0.8),\n    ('conviction', 3)\n]\n\nfor metric_type, th in config:\n    rules = association_rules(output, metric=metric_type, min_threshold=th)\n    if rules.empty:\n        print ('Empty Data Frame For Metric Type : ',metric_type,' on Threshold : ',th)\n        continue\n    print (rules.columns.values)\n    print ('-------------------------------------')\n    print ('Configuration : ', metric_type, ' : ', th)\n    print ('-------------------------------------')\n    print (rules)\n\n    support=rules.as_matrix(columns=['support'])\n    confidence=rules.as_matrix(columns=['confidence'])\n\n    plt.scatter(support, confidence, edgecolors='red')\n    plt.xlabel('support')\n    plt.ylabel('confidence')\n    plt.title(metric_type+' : '+str(th))\n    plt.show()","24ed7c06":"dataset = []\nin_titanic=cat_titanic\nfor i in range(0, in_titanic.shape[0]-1):\n    dataset.append([str(in_titanic.values[i,j]) for j in range(0, in_titanic.shape[1])])\n# dataset = in_titanic.to_xarray()\n\noht = TransactionEncoder()\noht_ary = oht.fit(dataset).transform(dataset)\ndf = pd.DataFrame(oht_ary, columns=oht.columns_)\ndf.head()","60f2d747":"output = apriori(df, min_support=0.2, use_colnames=oht.columns_)\nconfig = [\n    ('antecedent support', 0.7),\n    ('confidence', 0.8),\n    ('conviction', 3)\n]\n\nfor metric_type, th in config:\n    rules = association_rules(output, metric=metric_type, min_threshold=th)\n    if rules.empty:\n        print ('Empty Data Frame For Metric Type : ',metric_type,' on Threshold : ',th)\n        continue\n    print (rules.columns.values)\n    print ('-------------------------------------')\n    print ('Configuration : ', metric_type, ' : ', th)\n    print ('-------------------------------------')\n    print (rules)\n\n    support=rules.as_matrix(columns=['support'])\n    confidence=rules.as_matrix(columns=['confidence'])\n\n    plt.scatter(support, confidence, edgecolors='red')\n    plt.xlabel('support')\n    plt.ylabel('confidence')\n    plt.title(metric_type+' : '+str(th))\n    plt.show()","3dad6ed6":"rules[rules['confidence']==rules['confidence'].min()]","1243a2f1":"rules[rules['confidence']==rules['confidence'].max()]","aab639cf":"rules = association_rules (output, metric='support', min_threshold=0.1)\nrules[rules['confidence'] == rules['confidence'].min()]","27873161":"rules[rules['confidence'] == rules['confidence'].max()]","cc771b2e":"## Apriori output","0fca311b":"## Title Result\n---\n\n## Interesting Information - Title Analysis:\n\n- Persons Who are Title : Mr.  With  Class : 3 and Embarked : S, have 88.9796 %  Confidence  Survived : Dead\n\n---\n\n## How to filter ? - A simple Demo\n---","b9484b89":"## Nominal Data fields","f92aa7ce":"### Data Visualization with Plots\n---","5179a81e":"## Gender Result\n---\n\n## Interesting Information: Gender Analysis\n---\n\n- Persons Who are Sex: female       With  PcClass: 1, have 96.80 % Confidence Survived : True\n- Persons Who are PcClass: 2        With  Survived: False, have 93.81% Confidence Sex: Male\n\n## Common Information:\n---\n\n- Persons Who are Survived : False  With  Age : UnKnown , have 81.88 %  Confidence  PcClass : 3\n- Persons Who are Age : Adult       With  PcClass : 2   , have 90.2 %   Confidence Embarked : S\n- Persons Who are Survived: False   With  Age : Adult and PcClass : 3, have 86.36% Confidence Embarked: S\n\n---\n\n### Title Analysis\n---","5f2c4d39":"## Analysis - Methodology\n---\n\n1. Gender Wise\n1. Title Wise\n\nBecause title is also a keyword which shows the **Gender type** of a person. Analysing these both fields\ntogether will cause for the results with **100%** association with both fields. \n\n#### Example:\n---\n- (Mr.) always associated with Male.\n- (Mrs.) always associated with Female.\n\nPutting these two fields together does not make any sense. So that the analysis split into two types.\n\n---\n\n### Gender Analysis\n---","8cffef42":"### Binning Age Column\n---","8cb73107":"### Title Data\n---","53951226":"### Import Packages\n---","1c5cee46":"# Data Mining in Titanic Data\n1. [Introduction](#introduction)\n1. [Association Rule Mining](#association-rule-mining)\n1. [Association Rule Mining on Titanic Data](#association-rule-mining-on-titanic-data)\n    - [Ready Up](#ready-up)\n    - [Data Visualization with Plots](#data-visualization-with-plots)\n    - [Analysis - Methodology](#analysis---methodology)\n    - [Gender Analysis](#gender-analysis)\n    - [Gender Result](#gender-result)\n    - [Title Analysis](#title-analysis)\n    - [Title Result](#title-result)\n1. [Algorithm Evaluation](#algorithm-evaluation)        \n1. [References](#references)\n\n\n## Introduction\n---\n\nIn real world, We deal with various types of data for example <mark>date<\/mark>, <mark>currency<\/mark>, <mark>stock rate<\/mark>, \n<mark>categories<\/mark> and <mark>rank<\/mark>. These are all not same data types and also not easy to associate these all in single \nline information. There are lot of methods in **Data Mining** to extract the association or information from the complex data. Some methods are,\n\n- Classification \n- Estimation \n- Prediction \n- Affinity Grouping or Association Rules \n- Clustering \n- Anomaly Detection\n\nIn this post, I tried to explain the data mining process on **Nominal Data Set**.  \nThe technique to extract the interesting information from Nominal data or Categorical data\nis **Association Rule Mining**.\n\n# Association Rules Mining\n\n### Algorithms:\n---\n\n- Apriori\n- FP Growth\n\n---\n\n### Parameters:\n---\n\n1. **Support**\n    - Ratio of the particular Object observation count to the total count.\n    - In another words, the percentage of a object strength in total strength.   \n    - Range \\[0 - 1]\n \n    $$  \n        Support(B) = {Observations containing (B) \\over Total Observations }\n    $$\n    \n1. **Confidence**\n    - How much confident association has with its pair.\n    - Range \\[0 - 1] \n\n    $$\n        Confidence(A\u2192B) = { Observations containing both (A and B)) \\over (Observations containing A)}\n    $$\n    \n1. **Lift**\n    - How much likely associated than individually occurred.\n    - Range \\[0 - inf]\n    - if <mark>lift > 1<\/mark> means, It is an **interesting scenario** to consider.\n\n    $$\n    Lift(A\u2192B) = {Confidence (A\u2192B) \\over Support (B)}\n    $$\n        \n1. **Leverage**\n    - Range  \\[-1, 1]\n    - If <mark>leverage =0 <\/mark> means, Both are independent.\n    \n    $$\n    L (A \u2192 B) =  {S (A\u2192B) \\over S (A) * S (B)}\n    $$\n        \n1. **Conviction**\n    - It is the metric to find the dependency on **premise** by the **consequent**.    \n    - Range \\[0 - inf]\n    - If <mark>conviction = 1<\/mark>, items are independent.\n    - High Confident with Lower support. That means it is mostly **depends** on the another product.\n    \n    $$\n    C (A -> B) = {1 - S (B) \\over 1 - Confidence (A \u2192 B)}\n    $$   \n\n---\n\n### Checking up the environment\n---","240651cd":"### Running rule mining with Configuration :\n---","51284fa1":"### Loading Data-set\n---","ed31dc5e":"## Conclusion\n\n- A sample data mining procedure has been carried out for beginners who are looking for **Association Rule Mining**. titanic data (A well known data) has been took for this scenario and all the elements are converted in to nominal data for our requirement.\n\nI hope this helped a bit. Also view my blog [bhanuchander210.github.io](https:\/\/bhanuchander210.github.io) for more posts.\n\n### Happy learning ...!","39ea3191":"### Gender Data\n---"}}