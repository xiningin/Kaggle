{"cell_type":{"486ba8e0":"code","9531a893":"code","79b19c8d":"code","638ee6ef":"code","fa838775":"code","f523be07":"code","c286df89":"code","bd846330":"code","a1163556":"code","f166c5be":"code","d4d4c196":"code","c2161a32":"code","26332ce5":"code","c94efbda":"code","29784950":"code","6b312858":"code","162d91a3":"code","149b29e6":"code","e0b3148d":"code","56555a63":"code","7fa88323":"code","82e12caa":"code","a9415d54":"code","cceb295f":"code","4476c9d5":"code","c5caee56":"code","02d3a42b":"markdown","6b40f4d6":"markdown","c3a3ee01":"markdown","778a1494":"markdown"},"source":{"486ba8e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9531a893":"def precision_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        if (TP[i]==0 or FP[i]==0):\n            TP[i]=0.00000001\n            FP[i]=0.00000001\n        sonuc+=(TP[i]\/(TP[i]+FP[i]))\n        \n    sonuc=sonuc\/len(class_id)\n    return sonuc\n\ndef recall_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        if (TP[i]==0 or FN[i]==0):\n            TP[i]=0.00000001\n            FN[i]=0.00000001\n        sonuc+=(TP[i]\/(TP[i]+FN[i]))\n       \n    sonuc=sonuc\/len(class_id)\n    return sonuc\ndef accuracy_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        sonuc+=((TP[i]+TN[i])\/(TP[i]+FP[i]+TN[i]+FN[i]))\n        \n    sonuc=sonuc\/len(class_id)\n    return sonuc\ndef specificity_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        if (TN[i]==0 or FP[i]==0):\n            TN[i]=0.00000001\n            FP[i]=0.00000001\n        sonuc+=(TN[i]\/(FP[i]+TN[i]))\n        \n    sonuc=sonuc\/len(class_id)\n    return sonuc\ndef NPV_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        if (TN[i]==0 or FN[i]==0):\n            TN[i]=0.00000001\n            FN[i]=0.00000001\n        sonuc+=(TN[i]\/(TN[i]+FN[i]))\n        \n    sonuc=sonuc\/len(class_id)\n    return sonuc\ndef perf_measure(y_actual, y_pred):\n    class_id = set(y_actual).union(set(y_pred))\n    TP = []\n    FP = []\n    TN = []\n    FN = []\n\n    for index ,_id in enumerate(class_id):\n        TP.append(0)\n        FP.append(0)\n        TN.append(0)\n        FN.append(0)\n        for i in range(len(y_pred)):\n            if y_actual[i] == y_pred[i] == _id:\n                TP[index] += 1\n            if y_pred[i] == _id and y_actual[i] != y_pred[i]:\n                FP[index] += 1\n            if y_actual[i] == y_pred[i] != _id:\n                TN[index] += 1\n            if y_pred[i] != _id and y_actual[i] != y_pred[i]:\n                FN[index] += 1\n\n\n    return class_id,TP, FP, TN, FN","79b19c8d":"df = pd.read_csv(\"..\/input\/portuguese-bank-marketing-data-set\/bank_cleaned.csv\")","638ee6ef":"df.head()","fa838775":"df.info()","f523be07":"df = df.drop(['Unnamed: 0'], axis=1)","c286df89":"df.head()","bd846330":"df.drop(['marital'],axis=1, inplace=True)\ndf1 = df.iloc[:, 0:7]","a1163556":"df2 = pd.get_dummies(df1, columns = ['job'])\ndf2 = pd.get_dummies(df2, columns = ['education'])\ndf2['housing'] = df2['housing'].map({'yes': 1, 'no': 0})\ndf2['default'] = df2['default'].map({'yes': 1, 'no': 0})\ndf2['loan'] = df2['loan'].map({'yes': 1, 'no': 0})\ndf_response = pd.DataFrame(df['response_binary'])\ndf2 = pd.merge(df2, df_response, left_index = True, right_index = True)","f166c5be":"array = df2.values\n\n# Features: first 20 columns\nx = array[:,0:-1]\n\n# Target variable: 'response_binary'\ny = array[:,-1]","d4d4c196":"x","c2161a32":"y","26332ce5":"from sklearn.metrics import classification_report,precision_score,recall_score,f1_score,roc_auc_score,accuracy_score\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)\nscore_liste=[]\nauc_scor=[]\nprecision_scor=[]\nrecall_scor=[]\nf1_scor=[]\nLR_plus=[]\nLR_eksi=[]\nodd_scor=[]\nNPV_scor=[]\nyouden_scor=[]\nspecificity_scor=[]\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_curve\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier","c94efbda":"k=8\nknn = KNeighborsClassifier(n_neighbors = k)\nknn.fit(x_train,y_train)\ny_head=knn.predict(x_test)\nprint(\"KNN Algoritmas\u0131 ba\u015far\u0131m sonucu: \",knn.score(x_test,y_test))\n\nfrom sklearn.metrics import confusion_matrix\ncmknn = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmknn,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"KNN Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nknn_fpr,knn_tpr,knn_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\n\nLR_plus.append((recall_hesapla(classid,tn,fp,fn,tp)\/(1-specificity_hesapla(classid,tn,fp,fn,tp))))\nLR_eksi.append(((1-recall_hesapla(classid,tn,fp,fn,tp))\/specificity_hesapla(classid,tn,fp,fn,tp)))\nodd_scor.append(((recall_hesapla(classid,tn,fp,fn,tp)\/(1-specificity_hesapla(classid,tn,fp,fn,tp))))\/(((1-recall_hesapla(classid,tn,fp,fn,tp))\/specificity_hesapla(classid,tn,fp,fn,tp))))\nyouden_scor.append((recall_hesapla(classid,tn,fp,fn,tp)+specificity_hesapla(classid,tn,fp,fn,tp)-1))\nprint(\"KNN algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))","29784950":"from sklearn.tree import DecisionTreeClassifier\ndtc=DecisionTreeClassifier()\ndtc.fit(x_train,y_train)\ny_head=dtc.predict(x_test)\nprint(\"Karar A\u011fa\u00e7lar\u0131 Algoritmas\u0131 i\u00e7in ba\u015far\u0131m sonucu: \",dtc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\ndtc_fpr,dtc_tpr,dtc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\n\nprint(\"DTC algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmdtc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmdtc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahminde edilen de\u011fer\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Karar A\u011fa\u00e7lar\u0131 Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","6b312858":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier(n_estimators=225,random_state=1)\nrfc.fit(x_train,y_train)\ny_head=rfc.predict(x_test)\nprint(\"Rastgele Orman Algoritmas\u0131 ba\u015far\u0131m sonucu: \",rfc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nrfc_fpr,rfc_tpr,rfc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Rastgele Orman algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmrfc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmrfc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Rastgele Orman Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","162d91a3":"from sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\nnb.fit(x_train,y_train)\ny_head=nb.predict(x_test)\nprint(\"Naive Bayes Algoritmas\u0131 ba\u015far\u0131m sonucu: \",nb.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nnb_fpr,nb_tpr,nb_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Naive Bayes algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmnb = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmnb,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Naive Bayes Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","149b29e6":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train,y_train)\ny_head=lr.predict(x_test)\nprint(\"Logistic Regresyon Algoritmas\u0131 ba\u015far\u0131m sonucu: \",lr.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nlrc_fpr,lrc_tpr,lrc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Lojistik Regresyon algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmlr = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmlr,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Lojistik Regresyon Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","e0b3148d":"from sklearn.svm import SVC\nsvc=SVC(random_state=1)\nsvc.fit(x_train,y_train)\ny_head=svc.predict(x_test)\nprint(\"Destek Vekt\u00f6r Makineleri Algoritmas\u0131 ba\u015far\u0131m sonucu: \",svc.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nsvc_fpr,svc_tpr,svc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Destek Vekt\u00f6r Makineleri algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmsvc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmsvc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Destek Vekt\u00f6r Makineleri Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","56555a63":"gfc=GradientBoostingClassifier(n_estimators= 1000, max_leaf_nodes= 4, max_depth=None,random_state= 2,min_samples_split= 5)\ngfc.fit(x_train,y_train)\ny_head=gfc.predict(x_test)\nprint(\"Gradient Boosting Classifier Algoritmas\u0131 ba\u015far\u0131m sonucu: \",gfc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\ngfc_fpr,gfc_tpr,gfc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Gradient Boosting Classifier algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmgfc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmgfc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Gradient Boosting Classifier Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","7fa88323":"abc=AdaBoostClassifier(n_estimators=100, random_state=0)\nabc.fit(x_train,y_train)\ny_head=abc.predict(x_test)\nprint(\"AdaBoosting Classifier Algoritmas\u0131 ba\u015far\u0131m sonucu: \",abc.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nabc_fpr,abc_tpr,abc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"AdaBoosting Classifier algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmabc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmabc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"AdaBoosting Classifier Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","82e12caa":"ysa=MLPClassifier(alpha=1, max_iter=1000)\nysa.fit(x_train,y_train)\ny_head=ysa.predict(x_test)\nprint(\"Yapay Sinir A\u011flar\u0131 Algoritmas\u0131 ba\u015far\u0131m sonucu: \",ysa.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nysa_fpr,ysa_tpr,ysa_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Yapay Sinir A\u011flar\u0131 algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmysa = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmysa,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Yapay Sinir A\u011flar\u0131 Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","a9415d54":"algo_liste=[\"KNN\",\"Decision Tree\",\"Random Forest\",\"Naive Bayes\",\"Linear Regression\",\"Support Vector Machine\",\"Gradient Boosting Classifier\",\"AdaBoosting Classifier\",\"Neural Network\"]\nscore={\"algo_list\":algo_liste,\"score_liste\":score_liste,\"precision\":precision_scor,\"recall\":recall_scor,\"f1_score\":f1_scor,\"AUC\":auc_scor,\"LR+\":LR_plus,\"LR-\":LR_eksi,\"ODD\":odd_scor,\"YOUDEN\":youden_scor,\"Specificity\":specificity_scor}","cceb295f":"df=pd.DataFrame(score)\ndf","4476c9d5":"f,ax1 = plt.subplots(figsize =(15,15))\nsns.pointplot(x=df['algo_list'], y=df['score_liste'],data=df,color='lime',alpha=0.8,label=\"score_liste\")\nsns.pointplot(x=df['algo_list'], y=df['precision'],data=df,color='red',alpha=0.8,label=\"precision\")\nsns.pointplot(x=df['algo_list'], y=df['recall'],data=df,color='black',alpha=0.8,label=\"recall\")\nsns.pointplot(x=df['algo_list'], y=df['f1_score'],data=df,color='blue',alpha=0.8,label=\"f1_score\")\nsns.pointplot(x=df['algo_list'], y=df['AUC'],data=df,color='yellow',alpha=0.8,label=\"AUC\")\n\nsns.pointplot(x=df['algo_list'], y=df['LR-'],data=df,color='orange',alpha=0.8,label=\"YOUDEN\")\n\nsns.pointplot(x=df['algo_list'], y=df['YOUDEN'],data=df,color='brown',alpha=0.8,label=\"LR-\")\nsns.pointplot(x=df['algo_list'], y=df['Specificity'],data=df,color='purple',alpha=0.8,label=\"Specificity\")\nplt.xlabel('Algoritma ismi',fontsize = 15,color='blue')\nplt.ylabel('Score',fontsize = 15,color='blue')\nplt.xticks(rotation= 45)\nplt.title('Parkinson Disease (PD) Veriseti ile S\u0131n\u0131fland\u0131rma',fontsize = 20,color='blue')\nplt.grid()\nplt.legend()\nplt.show()","c5caee56":"def graph_roc_curve_multiple(log_fpr, log_tpr, knear_fpr, knear_tpr, svc_fpr, svc_tpr, tree_fpr, tree_tpr,rfc_fpr,rfc_tpr,nb_fpr,nb_tpr,gbc_fpr,gbc_tpr,abc_fpr,abc_tpr,ysa_fpr,ysa_tpr):\n    plt.figure(figsize=(16,8))\n    plt.title('ROC Curve \\n Top 9 Classifiers', fontsize=18)\n    plt.plot(log_fpr, log_tpr, label='Logistic Regression Classifier Score: {:.4f}'.format(roc_auc_score(y_test, lr.predict(x_test))))\n    plt.plot(knear_fpr, knear_tpr, label='KNears Neighbors Classifier Score: {:.4f}'.format(roc_auc_score(y_test, knn.predict(x_test))))\n    plt.plot(svc_fpr, svc_tpr, label='Support Vector Classifier Score: {:.4f}'.format(roc_auc_score(y_test, svc.predict(x_test))))\n    plt.plot(tree_fpr, tree_tpr, label='Decision Tree Classifier Score: {:.4f}'.format(roc_auc_score(y_test, dtc.predict(x_test))))\n    plt.plot(rfc_fpr, rfc_tpr, label='Random Forest Classifier Score: {:.4f}'.format(roc_auc_score(y_test, rfc.predict(x_test))))\n    plt.plot(nb_fpr, nb_tpr, label='Naive Bayes Classifier Score: {:.4f}'.format(roc_auc_score(y_test, nb.predict(x_test))))\n    plt.plot(gbc_fpr, gbc_tpr, label='Gradient Boosting Classifier Score: {:.4f}'.format(roc_auc_score(y_test, gfc.predict(x_test))))\n    plt.plot(abc_fpr, abc_tpr, label='AdaBoosting Classifier Score: {:.4f}'.format(roc_auc_score(y_test, abc.predict(x_test))))\n    plt.plot(ysa_fpr, ysa_tpr, label='Neural Network Score: {:.4f}'.format(roc_auc_score(y_test, ysa.predict(x_test))))\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([-0.01, 1, 0, 1])\n    plt.xlabel('False Positive Rate', fontsize=16)\n    plt.ylabel('True Positive Rate', fontsize=16)\n    plt.annotate('Minimum ROC Score of 50% \\n (This is the minimum score to get)', xy=(0.5, 0.5), xytext=(0.6, 0.3),\n                arrowprops=dict(facecolor='#6E726D', shrink=0.05),\n                )\n    plt.legend()\n    \ngraph_roc_curve_multiple(lrc_fpr, lrc_tpr, knn_fpr, knn_tpr, svc_fpr, svc_tpr, dtc_fpr, dtc_tpr,rfc_fpr,rfc_tpr,nb_fpr,nb_tpr,gfc_fpr,gfc_tpr,abc_fpr,abc_tpr,ysa_fpr,ysa_tpr)\nplt.show()","02d3a42b":"Bu veri setinde 40.841 g\u00f6zlem bulunmaktad\u0131r. Bu projenin temel amac\u0131, pazarlama kampanyas\u0131ndan \u00f6nceki en duyarl\u0131 m\u00fc\u015fterileri belirlemek, b\u00f6ylece bankan\u0131n kendilerine verimli bir \u015fekilde ula\u015fabilmesi, zamandan ve pazarlama kaynaklar\u0131ndan tasarruf etmesini sa\u011flamak. Bu amaca ula\u015fmak i\u00e7in s\u0131n\u0131fland\u0131rma algoritmalar\u0131 kullan\u0131lacakt\u0131r. M\u00fc\u015fteri istatistiklerini analiz ederek, t\u00fcm m\u00fc\u015fterileri iki gruba ay\u0131rmak i\u00e7in bir s\u0131n\u0131fland\u0131rma modeli olu\u015fturulacakt\u0131r: \u201cmevduat\u201d i\u00e7in \u201cevet\u201d ve \u201cmevduat\u201d i\u00e7in \u201chay\u0131r\u201d. \n\n","6b40f4d6":"Kategorik verileri yapay de\u011fi\u015fkenlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcn. Makine \u00f6\u011frenmesi algoritmalar\u0131 sadece say\u0131sal de\u011ferler ald\u0131\u011f\u0131ndan, be\u015f kategorik de\u011fi\u015fkenin t\u00fcm\u00fc (i\u015f, e\u011fitim, temerr\u00fct, konut ve bor\u00e7) kukla de\u011fi\u015fkenlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcr. Bu tamsay\u0131lar yerine kukla de\u011fi\u015fkenler kullan\u0131ld\u0131, \u00e7\u00fcnk\u00fc bu kategorik de\u011fi\u015fkenler s\u0131ral\u0131 de\u011fil. Basit\u00e7e seviyeler yerine farkl\u0131 t\u00fcrleri temsil ederler, bu y\u00fczden yapay de\u011fi\u015fkenler farkl\u0131 kategorilerin etkisini ay\u0131rt etmek i\u00e7in idealdir.","c3a3ee01":"G\u00fcn\u00fcm\u00fczde, bankac\u0131l\u0131k sekt\u00f6r\u00fcnde pazarlama harcamalar\u0131 b\u00fcy\u00fckt\u00fcr, bu da bankalar\u0131n pazarlama stratejilerini optimize etmeleri ve etkinli\u011fi artt\u0131rmalar\u0131 i\u00e7in gerekli oldu\u011fu anlam\u0131na gelir. M\u00fc\u015fterilerin ihtiyac\u0131n\u0131 anlamak daha etkili pazarlama planlar\u0131, daha ak\u0131ll\u0131 \u00fcr\u00fcn tasar\u0131mlar\u0131 ve daha fazla m\u00fc\u015fteri memnuniyeti sa\u011flar.\nAna Ama\u00e7: bankan\u0131n telefonla pazarlama kampanyas\u0131n\u0131n etkinli\u011fini art\u0131rmak\nBu proje, bankan\u0131n m\u00fc\u015fteri taban\u0131 hakk\u0131nda daha ayr\u0131nt\u0131l\u0131 bir anlay\u0131\u015f geli\u015ftirmesini, m\u00fc\u015fterilerin telefonla pazarlama kampanyas\u0131na yan\u0131t\u0131n\u0131 tahmin etmesini ve gelecekteki pazarlama planlar\u0131 i\u00e7in hedef m\u00fc\u015fteri profili olu\u015fturmas\u0131n\u0131 sa\u011flayacakt\u0131r.\nBanka, demografik \u00f6zellikler ve i\u015flem ge\u00e7mi\u015fi gibi m\u00fc\u015fteri \u00f6zelliklerini analiz ederek, m\u00fc\u015fteri tasarruf davran\u0131\u015flar\u0131n\u0131 tahmin edebilecek ve hangi t\u00fcr m\u00fc\u015fterilerin vadeli mevduat yat\u0131rma ihtimalinin daha y\u00fcksek oldu\u011funu belirleyebilecektir. Banka daha sonra pazarlama \u00e7abalar\u0131n\u0131 bu m\u00fc\u015fterilere odaklayabilir. Bu, bankan\u0131n sadece mevduatlar\u0131 daha etkin bir \u015fekilde g\u00fcvence alt\u0131na almas\u0131na izin vermeyecek, ayn\u0131 zamanda belirli m\u00fc\u015fteriler i\u00e7in istenmeyen reklamlar\u0131 azaltarak m\u00fc\u015fteri memnuniyetini art\u0131racakt\u0131r.\n\nVER\u0130 TEM\u0130ZLEME\n\nBu veri seti, May\u0131s 2008'den Kas\u0131m 2010'a kadar bir Portekizli bankac\u0131l\u0131k kurumu taraf\u0131ndan mevcut m\u00fc\u015fteriler aras\u0131nda vadeli mevduat\u0131 te\u015fvik etmeyi ama\u00e7layan do\u011frudan telefon g\u00f6r\u00fc\u015fmesi pazarlama kampanyalar\u0131yla ilgilidir.\n","778a1494":"S\u0131\u0131fland\u0131rm \u0130\u015flemi i\u00e7in veriyi haz\u0131rlayaca\u011f\u0131z.\n\n\u0130\u015f unvan\u0131, e\u011fitim, ya\u015f, denge, temerr\u00fct kayd\u0131, konut kayd\u0131 ve kredi kayd\u0131n\u0131 i\u00e7eren yaln\u0131zca en alakal\u0131 m\u00fc\u015fteri bilgileri g\u00f6z \u00f6n\u00fcnde bulundurulur. 'Bu kampanyadan \u00f6nce ger\u00e7ekle\u015ftirilen irtibatlar\u0131n say\u0131s\u0131' gibi di\u011fer bilgiler, m\u00fc\u015fterilerin kendileriyle do\u011frudan ilgili olmad\u0131\u011f\u0131 i\u00e7in atland\u0131. "}}