{"cell_type":{"af66bb2c":"code","4095044a":"code","bf4373a2":"code","d75d4a8a":"code","fbfee3ad":"code","33ce164b":"code","0c82b528":"code","7b24f4e9":"code","ab07d473":"code","a7d1b1aa":"code","77410317":"code","bfbfb4f9":"code","3d6e9166":"code","3ce16472":"code","6c787d31":"code","12b4df5e":"code","64203423":"code","ba3469ef":"code","832188b7":"code","0346fc7b":"code","aff9a5c7":"code","610e9bba":"code","2e0d4937":"code","337c8098":"code","2b974a4d":"code","30cbb35b":"code","0f5c9487":"code","7206250a":"code","1d9d6713":"code","8e151c46":"code","379a5361":"code","566c8b21":"code","d9b37a7d":"code","2792864c":"code","3680ce97":"code","6a138c04":"code","e79fff8c":"code","4012f223":"code","5a6015f7":"code","982ac1a3":"code","ada9a4fe":"code","3fc76efc":"code","e354e9f1":"code","d10efe36":"code","0cc907be":"code","b499a7ba":"code","65af2a27":"code","fafde8ce":"markdown","37ece033":"markdown","ea206ae6":"markdown","a27a206b":"markdown","b56fc31b":"markdown"},"source":{"af66bb2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4095044a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","bf4373a2":"dataset = pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\ndataset.shape","d75d4a8a":"dataset.head()","fbfee3ad":"dataset.info()","33ce164b":"#so we have 3 categorical variables are 'sex,smoker,region' which we will have to encode\n\ndataset.describe()","0c82b528":"dataset.corr()","7b24f4e9":"dataset.cov()","ab07d473":"import seaborn as sns\nsns.set(style = 'whitegrid')\nplt.figure(figsize = (6,6))\nplt.title(\"Age Distribution\")\nsns.distplot(dataset['age'])\n\n#get the counts as well\n\n#print(dataset['age'].value_counts())","a7d1b1aa":"\n\nplt.figure(figsize = (6,6))\nplt.title(\"sex column Distribution\")\n\n#since sex is categorical variable we have to use counter plot\n\nsns.countplot(dataset['sex'])\n\n#get the counts as well\n\nprint(dataset['sex'].value_counts())","77410317":"\nplt.figure(figsize = (6,6))\nplt.title(\"bmi column Distribution\")\n\n\nsns.distplot(dataset['bmi'])\n\n#get the counts as well\n\nprint(dataset['bmi'].value_counts())\n","bfbfb4f9":"dataset['bmi'].describe()","3d6e9166":"\nplt.figure(figsize = (6,6))\nplt.title(\"children column Distribution\")\n\n\nsns.countplot(dataset['children'])\n\n#get the counts as well\n\nprint(dataset['children'].value_counts())","3ce16472":"\nplt.figure(figsize = (6,6))\nplt.title(\"smoker column Distribution\")\n\n\nsns.countplot(dataset['smoker'])\n\n#get the counts as well\n\nprint(dataset['smoker'].value_counts())","6c787d31":"\nplt.figure(figsize = (6,6))\nplt.title(\"region column Distribution\")\n\n\nsns.countplot(dataset['region'])\n\n#get the counts as well\n\nprint(dataset['region'].value_counts())","12b4df5e":"# convert the categorical values to int\n\n#convert sex column to male=0,female=1\n\ndataset.replace({'sex':{'male':0, 'female':1}},inplace=True)\n\n","64203423":"dataset.replace({'smoker':{'yes':0, 'no':1}},inplace=True)\ndataset.replace({'region':{'southwest':0, 'southeast':1,'northwest':2,'northeast':3}},inplace=True)","ba3469ef":"dataset.head()","832188b7":"18,0,33.770,1,1,1","0346fc7b":"dataset.info()","aff9a5c7":"dataset.describe()","610e9bba":"#remove the charges column as Target column Y and dependent columns as X\n\nX = dataset.drop(columns = 'charges')\nY = dataset['charges']","2e0d4937":"Y.head()","337c8098":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y,test_size = 0.2, random_state = 3)","2b974a4d":"X_train.head()","30cbb35b":"Y_train.head()","0f5c9487":"Y_train.loc[502]","7206250a":"from sklearn.linear_model import LinearRegression","1d9d6713":"model = LinearRegression()","8e151c46":"model.fit(X_train,Y_train)","379a5361":"#train data prediction\n\nprediction = model.predict(X_train)","566c8b21":"from sklearn.metrics import r2_score\n\noptimization = r2_score(Y_train, prediction)","d9b37a7d":"optimization","2792864c":"#test data prediction\npredict_test = model.predict(X_test)","3680ce97":"X_test.shape","6a138c04":"opti_test = r2_score(Y_test, predict_test)\nprint(opti_test)","e79fff8c":"18,0,33.770,1,1,1","4012f223":"test_random_data = np.asarray((18,0,33.77,1,1,1))\n\ntest = test_random_data.reshape(1,-1)\n\ntest.shape","5a6015f7":"X_train.shape","982ac1a3":"#test_value = X_train.loc [502]\n#test_value_1 = np.array(test_value, dtype=np.float32)","ada9a4fe":"#test_value_1.reshape(1,-1)","3fc76efc":"#arr_2d = np.reshape(test_value_1, (1, 6))","e354e9f1":"#arr_2d.shape","d10efe36":"predicted_charge_for_test_value = model.predict(test)\n","0cc907be":"predicted_charge_for_test_value.shape","b499a7ba":"#opti_test = r2_score(predicted_charge_for_test_value, predict_test)\n#print(opti_test)","65af2a27":"print(predicted_charge_for_test_value)","fafde8ce":"# train the model","37ece033":"# **data preprocessing**","ea206ae6":"# model evaluation","a27a206b":"we are analysing the dataset with each column vs****","b56fc31b":"# bulding predict system"}}