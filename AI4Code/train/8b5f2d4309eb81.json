{"cell_type":{"09a4e510":"code","445afffc":"code","2e8d95c1":"code","72e77283":"code","3116981c":"code","45a8d4ba":"code","4083f9b9":"code","016048e3":"code","710ec1d9":"code","df8a4155":"code","113364d4":"code","ca71839f":"code","36a54b96":"code","a18df070":"code","d46d4bdc":"code","08a462ee":"code","5c800032":"code","5b98df77":"code","58d71509":"code","1f4f8286":"code","d62a911c":"code","aa953106":"code","d992196c":"code","023b16fc":"code","d1cc833f":"code","d356008a":"code","950ab5a2":"code","2f825e6c":"code","48e2f22f":"code","7e57f36d":"code","81fc2077":"markdown","64d9913c":"markdown","324016f5":"markdown","33996eab":"markdown","5614400b":"markdown","10cff2fe":"markdown","1d745d1c":"markdown","9b65007e":"markdown","24973d81":"markdown"},"source":{"09a4e510":"import pandas as pd\n\ndf = pd.read_csv(\"..\/input\/cars-csv\/cars.csv\")","445afffc":"df.info()","2e8d95c1":"df.shape","72e77283":"df.head()","3116981c":"import numpy as np\n\nnp.unique(df.target)","45a8d4ba":"df['target'].value_counts()","4083f9b9":"y_labels = list(df['target'])\nX = df.drop(['target','Car','Model'], axis = 1)","016048e3":"X","710ec1d9":"y_labels","df8a4155":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ny = le.fit_transform(y_labels)\n\ny","113364d4":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state = 123)\n\nprint(f'Training set size is {len(X_train)} rows')\nprint(f'Test set size is {len(X_test)} rows')\nprint(f'Train + test set size is {len(X_train) + len(X_test)} rows')","ca71839f":"from sklearn.naive_bayes import GaussianNB\n\nnb = GaussianNB()\nnb.fit(X_train, y_train)","36a54b96":"y_pred = nb.predict(X_test)","a18df070":"y_pred","d46d4bdc":"from sklearn.metrics import accuracy_score, confusion_matrix,classification_report\n\nprint('Train Accuracy: ', accuracy_score(y_train, nb.predict(X_train)))\nprint()","08a462ee":"print('Test Accuracy: ', accuracy_score(y_test, y_pred))\nprint()","5c800032":"conf_mtrx = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix')\nprint(conf_mtrx)\n\nprint('Classification Report')\nprint(classification_report(y_test, y_pred))","5b98df77":"from matplotlib import pyplot as plt\n\ndef plot_confusion_matrix(conf_mtrx, classes, cmap=plt.cm.Blues):\n    num_class = conf_mtrx.shape[0]\n    \n    fig, ax = plt.subplots()\n    im = ax.imshow(conf_mtrx, interpolation='nearest', cmap=cmap)\n    ax.figure.colorbar(im, ax=ax)\n    ax.set(xticks=np.arange(num_class), yticks=np.arange(num_class),\n           xticklabels=classes, yticklabels=classes, \n           ylabel='True label', xlabel='Predicted label')\n\n    middle_threshold = conf_mtrx.max() \/ 2.\n    for row in range(num_class):\n        for col in range(num_class):\n            ax.text(col, row, format(conf_mtrx[row, col], '.0f'), ha=\"center\", va=\"center\",\n                    color=\"white\" if conf_mtrx[row, col] > middle_threshold else \"black\")\n    fig.tight_layout()\n    plt.show()","58d71509":"plot_confusion_matrix(conf_mtrx, np.unique(df.target), cmap=plt.cm.Blues)","1f4f8286":"y_test_score = nb.predict_proba(X_test)\n\ny_test_score_proba = y_test_score[:,1]","d62a911c":"y_test_score_proba.shape","aa953106":"y_test","d992196c":"from sklearn import metrics\n\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_test_score_proba)\nauc = metrics.roc_auc_score(y_test, y_test_score_proba)\nprint('AUC = ', auc)","023b16fc":"plt.figure(figsize=(12,8))\nplt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r', label='Random guess')\nplt.plot(fpr,tpr,label='US \/ Europe')\nplt.xlabel(\"False Positive Rate (FPR)\")\nplt.ylabel(\"True Positive Rate (TPR)\")\nplt.legend(loc=4)\nplt.grid(True)\nplt.show()","d1cc833f":"fpr","d356008a":"tpr","950ab5a2":"operatingPointIndex = 9\n\nprint('FPR = ', fpr[operatingPointIndex])\nprint('TPR = ', tpr[operatingPointIndex])\n\ndecisionThreshold = thresholds[operatingPointIndex]\nprint('Decision Threshold', decisionThreshold)","2f825e6c":"y_test_bool = (y_test == 1)\n\nprint('True Labels')\nprint('-----------')\nprint(y_test_bool)","48e2f22f":"y_test_predicted_bool = (y_test_score_proba >= decisionThreshold)\n\nprint('Predicted Labels')\nprint('----------------')\nprint(y_test_predicted_bool)","7e57f36d":"conf_mtrx = confusion_matrix(y_test_bool, y_test_predicted_bool)\nplot_confusion_matrix(conf_mtrx, np.unique(df.target), cmap=plt.cm.Blues)\n\nTN = conf_mtrx[0, 0]\nFN = conf_mtrx[1, 0]\nTP = conf_mtrx[1, 1]\nFP = conf_mtrx[0, 1]\n\n# Sensitivity, hit rate, recall, or true positive rate\nTPR = TP\/(TP+FN)\n# Specificity or true negative rate\nTNR = TN\/(TN+FP) \n# Precision or positive predictive value\nPPV = TP\/(TP+FP)\n# Negative predictive value\nNPV = TN\/(TN+FN)\n# Fall out or false positive rate\nFPR = FP\/(FP+TN)\n# False negative rate\nFNR = FN\/(TP+FN)\n# False discovery rate\nFDR = FP\/(TP+FP)\n\n# Overall accuracy\nACC = (TP+TN)\/(TP+FP+FN+TN)\n\nprint('FPR = ', FPR)\nprint('TPR = ', TPR)\nprint('Accuracy = ', ACC)","81fc2077":"Use Naive Bayes to fit on train data","64d9913c":"As you can see we have target (or y) as spam\/ham and we have rawText which contains the raw text message","324016f5":"Plot Confusion Matrix","33996eab":"Convert US and Europe labels to numeric values as 1 and 0","5614400b":"Show classification performance","10cff2fe":"Do prediction on test data","1d745d1c":"Get input and output data from data frame","9b65007e":"**Naive Bayes Classifier**\n\nDivide your data as train and test data using train-test-split (50% train, 50% test)","24973d81":"ROC curve"}}