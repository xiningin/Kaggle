{"cell_type":{"2256f845":"code","ac7e084b":"code","9fe42990":"code","46268ed6":"code","06998ff2":"code","164121ac":"code","dc23494c":"code","a4bb9025":"code","7c2fbf24":"code","ad598c29":"code","2cf29603":"code","241e2d68":"code","77026774":"code","d9528d2e":"code","c71e5909":"code","e81580ca":"code","16beb63f":"code","72c79302":"code","4c89bc26":"code","8cf61e31":"code","2f034902":"code","42c77854":"code","603cb234":"code","e717b3ef":"code","dc3a83f2":"code","89577b8d":"code","104b94ae":"code","c6f0655f":"code","4a55cc97":"code","f1e87bb1":"code","518214d5":"markdown","6ae8ce4e":"markdown","98e52673":"markdown"},"source":{"2256f845":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac7e084b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split","9fe42990":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nfrom keras.models import Sequential\nfrom keras.utils.np_utils import to_categorical \nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","46268ed6":"# Load data\ndata = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","06998ff2":"submission =  pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","164121ac":"data.head()","dc23494c":"# View data dimensions\ndata.shape","a4bb9025":"# build up \"labels\"\nlabels = data['label']\nlabels = np.array(labels)\nlabels","7c2fbf24":"# Delete label in the data\ndel data['label']\ndata.shape","ad598c29":"# Split data for train and prediction datasets\ndata = data \/ 255\ntest = test \/ 255","2cf29603":"# Data shape\nprint(data.shape)\nprint(labels.shape)\nprint(test.shape)","241e2d68":"# Reshape the data\ndata = np.array(data).reshape(-1, 28, 28)\ndata.shape","77026774":"# Add dimension\ndata = np.expand_dims(data,axis=-1)\nlabels = np.expand_dims(labels,axis=-1)","d9528d2e":"data.shape","c71e5909":"labels.shape","e81580ca":"# labels category\nlabels = to_categorical(labels, num_classes = 10)","16beb63f":"# Check the shape\nprint(data.shape)\nprint(labels.shape)","72c79302":"# Convert test data\ntest = test.to_numpy().reshape(-1,28,28)\ntest = np.expand_dims(test,axis=-1)\n\ntest.shape","4c89bc26":"# Split data and labels for train and test datasets\nX_train, X_test, y_train, y_test = train_test_split(data, labels, test_size = 0.2)","8cf61e31":"# Check the shape for train data\nprint(X_train.shape)\nprint(y_train.shape)","2f034902":"# Check the shape for test data\nprint(X_test.shape)\nprint(y_test.shape)","42c77854":"# Build up model - Sequential (Convolutional Model)\nmodel = tf.keras.Sequential([])\nmodel.add(tf.keras.layers.Conv2D(32, (3, 3), padding = 'same', activation='relu', input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(2, 2)),\nmodel.add(tf.keras.layers.Conv2D(64, (3, 3), padding = 'same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2, 2)),\nmodel.add(tf.keras.layers.Conv2D(128, (3, 3), padding = 'same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2, 2)),\nmodel.add(tf.keras.layers.Conv2D(128, (3, 3), padding = 'same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2, 2)),\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))","603cb234":"model.summary()","e717b3ef":"# Compile model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","dc3a83f2":"#Add ImageDataGenerator\ndatagen = ImageDataGenerator(rotation_range=20, zoom_range=0.2)\ndatagen.fit(X_train)","89577b8d":"# Fit model\n#model.fit(X_train, y_train, validation_data = (X_test,y_test), epochs=10)\nmodel.fit_generator(datagen.flow(X_train, y_train, batch_size=32),\n                    steps_per_epoch=len(X_train)\/32, epochs=10)","104b94ae":"# Evaluation\nmodel.evaluate(X_test,y_test)","c6f0655f":"# Predict data\npredictions = model.predict(test)\ny_pred = np.argmax(predictions, axis=1)","4a55cc97":"# Show some prediction\nplt.figure(figsize=(5,5))\n\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(test[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(y_pred[i])","f1e87bb1":"# Save data\nsubmission['Label'] = pd.DataFrame(y_pred)\nsubmission.to_csv('.\/DRSubmissions.csv', index = False)","518214d5":"## Model","6ae8ce4e":"## Data Preprocessing","98e52673":"## Load Data"}}