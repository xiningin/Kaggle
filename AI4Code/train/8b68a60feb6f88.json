{"cell_type":{"fc0bd7ba":"code","159ac0fb":"code","ab000c01":"code","ab904192":"code","293ee812":"code","30937e76":"code","13e0f868":"code","cd2f961b":"code","5c7b0a92":"code","6d7dcb01":"code","7d98e8b3":"code","1528a841":"code","8dbfcaa3":"code","1c040b41":"code","9ca5a592":"code","dc809769":"code","b909905c":"code","411d4337":"code","c564033a":"code","1ddc7835":"code","d3060224":"code","d81ef6a5":"code","c9f26f8a":"code","826b1304":"code","fef409bd":"code","76a75ee4":"code","7d3f0627":"code","198320c3":"code","c45de395":"code","b013076c":"code","18d0cc52":"code","d83b5a39":"code","e592f3d1":"code","6fd86360":"code","e5947224":"code","fd3b48a0":"code","b08414ec":"code","b7fde94d":"code","1a8b15ea":"code","af7c9d9c":"code","53e18d3f":"code","57addb76":"code","35ffb64a":"code","4836c4b9":"code","e27c52ab":"code","3ec3e417":"code","c499fc32":"code","ca753b47":"code","f6492ab6":"code","ced06ff1":"code","4fe0724b":"code","af61b5cf":"code","ff7edae3":"code","9f760a6e":"code","c0b7b801":"code","99f265c4":"code","6a0240e0":"code","777300c3":"code","309212fc":"code","94e02468":"code","087422e0":"markdown","eab0b748":"markdown","063492a2":"markdown","fa0ed005":"markdown","07706b0c":"markdown","2ccfa003":"markdown","961e525f":"markdown","4ca8944c":"markdown","0f9ca963":"markdown","1b4142d8":"markdown","af827f8a":"markdown","ef4f3ef7":"markdown","485f6168":"markdown","ca70e883":"markdown","4bea4f50":"markdown","013bf082":"markdown","635cb407":"markdown","0caa21fe":"markdown","1a86b679":"markdown","f21afce6":"markdown","b72f42f8":"markdown","bba8a117":"markdown","daec91d0":"markdown","c9ea2e63":"markdown","8ba3e089":"markdown","9c508515":"markdown","88f3296f":"markdown","40a317a2":"markdown","c4b8681f":"markdown","54954714":"markdown","e6879410":"markdown","7a1a845c":"markdown","b0143607":"markdown","207df3cc":"markdown","8739df03":"markdown","6eab1f06":"markdown","e8d0c5d3":"markdown","ad2562c8":"markdown","09796632":"markdown","d49ad063":"markdown","d30c1f32":"markdown","5c747b92":"markdown","82a4cfc9":"markdown","804a01f6":"markdown","bd75fc81":"markdown","8490c7a1":"markdown"},"source":{"fc0bd7ba":"#importing useful libararies\nimport pandas as pd\nimport numpy as np\nimport seaborn as sea\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nimport scipy.stats as stats\nfrom sklearn.preprocessing import StandardScaler, normalize, MinMaxScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics.pairwise import cosine_similarity","159ac0fb":"df = pd.read_csv(r'..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","ab000c01":"df.head()","ab904192":"df.isna().sum()\ndf.columns\ndf.isnull().sum()\ndf.shape","293ee812":"df.drop(['customerID'],axis=1,inplace=True)","30937e76":"df.nunique()","13e0f868":"for i in df.columns:\n    print(df[i].value_counts())","cd2f961b":"df.isin([\" \"]).sum()","5c7b0a92":"df['TotalCharges'] = df['TotalCharges'].replace([\" \"], np.nan)","6d7dcb01":"df.isna().sum().sum()","7d98e8b3":"df.dropna(inplace = True)","1528a841":"df['TotalCharges']= df['TotalCharges'].astype(float)","8dbfcaa3":"df['SeniorCitizen'] = df['SeniorCitizen'].astype(object)","1c040b41":"df['SeniorCitizen'] = df['SeniorCitizen'].replace({1:'Yes', 0:'No'})","9ca5a592":"cat = [i for i in df.columns if df[i].dtypes == 'O']\nnum = [i for i in df.columns if df[i].dtypes != 'O']","dc809769":"df.replace(['No phone service'], ['No'], inplace = True)","b909905c":"df.replace({'No internet service':'No'}, inplace = True)","411d4337":"df[cat].nunique().plot(kind='barh')","c564033a":"fig, ax =plt.subplots(1,2, figsize=(15,5))\nplt.figure(figsize=(5,5))\nsea.countplot(x ='StreamingTV', hue = 'Churn' ,data =df, ax= ax[0])\nsea.countplot(x ='PaymentMethod', hue = 'Churn' ,data =df, ax= ax[1])\nfig.show()","1ddc7835":"fig, ax =plt.subplots(1,2, figsize=(15,5))\nplt.figure(figsize=(5,5))\nsea.countplot(x ='PaperlessBilling', hue = 'Churn' ,data =df, ax= ax[0])\nsea.countplot(x ='Contract', hue = 'Churn' ,data =df ,ax = ax[1])\nfig.show()","d3060224":"fig, ax =plt.subplots(1,2, figsize=(15,5))\nplt.figure(figsize=(5,5))\nsea.countplot(x ='InternetService', hue = 'Churn' ,data =df, ax= ax[0])\nsea.countplot(x ='gender', hue = 'Churn' ,data =df, ax = ax[1])\nfig.show()","d81ef6a5":"plt.figure(figsize=(10,5))\nax = sea.countplot(x=\"Churn\", hue=\"Contract\", data=df);\nax.set_title('Contract Type vs Churn')","c9f26f8a":"df[num].head()","826b1304":"plt.figure(figsize=(8,5))\nplt.title(\"Monthly C,harges VS Total Charges\")\nplt.scatter(x = df.MonthlyCharges, y = df.TotalCharges)\nplt.xlabel('Monthly Charges')\nplt.ylabel('Total Charges')\nplt.show()","fef409bd":"plt.figure(figsize=(5,5))\ndf[['MonthlyCharges','tenure']].head(35).plot(kind='line')\nplt.title(\"Monthly Charges VS Tenure\")\nplt.xlabel('Monthly Charges')\nplt.ylabel('Tenure')\nplt.show()","76a75ee4":"sea.countplot(x= 'Churn' ,data=df, hue='SeniorCitizen')","7d3f0627":"df.Contract.value_counts().plot(kind='pie', legend= True)","198320c3":"sea.distplot(df[\"tenure\"], color=\"b\")","c45de395":"sea.distplot(df[\"MonthlyCharges\"], color=\"r\")","b013076c":"sea.distplot(df[\"TotalCharges\"], color=\"g\")","18d0cc52":"df['Count_OnlineServices'] = (df[['OnlineSecurity', 'DeviceProtection', 'StreamingMovies', 'TechSupport','StreamingTV', 'OnlineBackup']] == 'Yes').sum(axis=1)\nplt.figure(figsize=(10,5))\nsea.countplot(x= 'Count_OnlineServices', hue= 'Churn', data =df)","d83b5a39":"ax = sea.boxplot(x='Churn', y = 'tenure', data=df)\nax.set_title('Churn vs Tenure', fontsize=20)","e592f3d1":"sea.violinplot(x=\"MultipleLines\", y=\"tenure\", hue=\"Churn\", kind=\"violin\",\n                 split=True, palette=\"pastel\", data=df)","6fd86360":"cols = [\"OnlineSecurity\", \"OnlineBackup\", \"DeviceProtection\", \"TechSupport\", \"StreamingTV\", \"StreamingMovies\"]\ndf1 = pd.melt(df[df[\"InternetService\"] != \"No\"][cols]).rename({'value': 'Has service'}, axis=1)\nplt.figure(figsize=(10, 5))\nax = sea.countplot(data=df1, x='variable', hue='Has service')\nax.set(xlabel='Additional service', ylabel='Num of customers')\nplt.show()","e5947224":"plt.figure(figsize = (12,5))\nsea.countplot(x= 'Churn' ,data=df, hue='PaymentMethod')","fd3b48a0":"plt.figure(figsize = (12,5))\nsea.boxplot(x=\"Contract\", y=\"MonthlyCharges\", hue=\"Churn\", data=df)","b08414ec":"y = df.Churn","b7fde94d":"df.drop('Churn', axis =1, inplace= True)","1a8b15ea":"y = pd.DataFrame(y)\ny['Churn'].replace(to_replace='Yes', value=1, inplace=True)\ny['Churn'].replace(to_replace='No',  value=0, inplace=True)","af7c9d9c":"df_temp =df","53e18d3f":"df = pd.get_dummies(df)","57addb76":"df.shape","35ffb64a":"scaler = MinMaxScaler()\ndf[num] = scaler.fit_transform(df[num])","4836c4b9":"df.head()","e27c52ab":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.25, random_state=0)","3ec3e417":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import plot_confusion_matrix, plot_roc_curve\nmodel_lr = LogisticRegression()\nresult = model_lr.fit(X_train, y_train)\nprediction_test = model_lr.predict(X_test)\nmetrics.accuracy_score(y_test, prediction_test)","c499fc32":"disp = plot_roc_curve(model_lr, X_test, y_test)","ca753b47":"from sklearn.ensemble import RandomForestClassifier\nmodel_rf = RandomForestClassifier(n_estimators=1000)\nmodel_rf.fit(X_train, y_train)\nprediction_test = model_rf.predict(X_test)\nmetrics.accuracy_score(y_test, prediction_test)\n","f6492ab6":"disp = plot_roc_curve(model_rf, X_test, y_test)","ced06ff1":"importances = model_rf.feature_importances_\nweights = pd.Series(importances,\n                 index=df.columns.values)\nweights.sort_values()[-20:].plot(kind = 'barh')","4fe0724b":"from sklearn.svm import SVC\nmodel_svm = SVC(kernel='linear') \nmodel_svm.fit(X_train,y_train)\npreds = model_svm.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","af61b5cf":"disp = plot_roc_curve(model_svm, X_test, y_test)","ff7edae3":"import xgboost as xgb\nmodel_gb=xgb.XGBClassifier(learning_rate=0.25,max_depth=4)\nmodel_gb.fit(X_train, y_train)\nmodel_gb.score(X_test,y_test)","9f760a6e":"params={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],   \n}","c0b7b801":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nrandom_search=RandomizedSearchCV(model_gb,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)\nrandom_search.fit(X_train, y_train)","99f265c4":"random_search.best_params_","6a0240e0":"import xgboost as xgb\nmodel_gb=xgb.XGBClassifier(learning_rate=0.05,max_depth=3)\nmodel_gb.fit(X_train, y_train)\nmodel_gb.score(X_test,y_test)","777300c3":"from sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import StackingClassifier","309212fc":"level0 = list()\nlevel0.append(('lr', LogisticRegression()))\nlevel0.append(('knn', KNeighborsClassifier()))\nlevel0.append(('cart', DecisionTreeClassifier()))\nlevel0.append(('svm', SVC()))\nlevel0.append(('bayes', GaussianNB()))\n# define meta learner model\nlevel1 = LogisticRegression()\n# define the stacking ensemble\nmodelx = StackingClassifier(estimators=level0, final_estimator=level1, cv=5)\nmodelx.fit(X_test, y_test)","94e02468":"preds = modelx.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","087422e0":"Shape of our prepared data frame.","eab0b748":"### **Observation:**\n- The Most used service is Streaming Movies and Streaming TV.\n- the OnlineSecurity and Techsupport serices are less acquired by customers.","063492a2":"* Easily see the number of categories each varible has.","fa0ed005":"### Seprating the categorical and Numerical variables.","07706b0c":"* Dropping unnecessary column.","2ccfa003":"### **Observation:**\n- The tenure of maximum customer are belong to 0-20.","961e525f":"### **Observation:**\n- The less the tenure more likely to churn.","4ca8944c":"* seprate the target column","0f9ca963":"### **Observation:**\n- Those customer who have subscribe **Streaming TV** service are less likey to churn as compared to those have subscribed it.\n- Those customer who are using **Electronic check** payment method are more likey to churn.","1b4142d8":"## Some Analysis on Contineous varibles.","af827f8a":"Read the Data","ef4f3ef7":"* drop that target column from the dataframe","485f6168":"### **Observation:**\n- The maxmimum total charges is vary between 0 to 2000.","ca70e883":"### **Observation:**\n* there are some \" \"(Blank Space) in Total  Charges Column. \n* So, we need to replace that values with null values.","4bea4f50":"## Data Preprocessing for Machine Learning Equations","013bf082":"### **Observation:**\n- The paymentMethod, Contract and Internet Service has 3 or more categories.\n- Most of the variables has only 2 categories.","635cb407":"## Extream Boost Classifier with Learning rate is 0.25","0caa21fe":"### **Observation:**\n- The Month-to-Month Contract customers are more in numbers.","1a86b679":"### **Observation:**\n- ","f21afce6":"## Support vector Machine Algorithm.","b72f42f8":"Have a look the data, how its looks like.","bba8a117":"### **Observation:**\n- Senior Citizen cutomers are less and they are very less likely to churn.","daec91d0":"* Replace the null values with Nan values.**","c9ea2e63":"## Random Forest Classifier with 1000 Decision Tress.","8ba3e089":"### **Observation:**\n- Fiber Optic Internet service users are more churning.","9c508515":"** Dropped NA Values.**[](http:\/\/)","88f3296f":"* replace their values from Yes to 1 and No to 0. ","40a317a2":"have a look at numerical varible","c4b8681f":"# **If you like this Notebook, Do Upvote this**\n# Thanks","54954714":"* Doing Min MAx scalling for numerical varibles. As they are high in values so, we need to take them at same page. ","e6879410":"### **Observation:**\n- The relationship Between the MontyCharges and TotalCharges is postive. ","7a1a845c":"### **Observation:**\n- Those customers who use paperless billing are more likely to churn.\n- Those cusotmers who are using Month- to Month Contract are more churning. ","b0143607":"### This dataset contains no 'null' or 'na' values.\n### Shape is (7043, 21).\n### Have 21 different columns.\n### Have 3 Contineous varibales and 18 categorical variables.\n### Our Target varible is Churn, also a categorical variable.","207df3cc":"### **Observation:**\n- The variation between the MontlyCharges.","8739df03":"## LOgistic Regression Model","6eab1f06":"### **Observation:**\n- Those who are not using Multiple lines Service tend to churn in first of their months.","e8d0c5d3":"## RandomizedSearch for tuning and finding the best parameters for Extream boosting algorithm.","ad2562c8":"**You can see the Important features for model prediction according to Random Forest algorithm. **","09796632":"* Creating Dummy variables for out all categorical columns and drop all other columns","d49ad063":"### **Observation:**\n- Those cutomers, who is subscribing various  services are less likely to churn.","d30c1f32":"**We found out the best paramerter impleting again in Extream boosting. **","5c747b92":"### Setting the correct data Types of colums, then its easy to manipulate.","82a4cfc9":"## Building ensemble learning model with Stacking Classifier\n* For stage one, I choose Logistic Regression, KNearestNeigbour, DecisionTreeCassifier, and NaiveBayes.\n* For stage two, default model is Logistic Regression.","804a01f6":"Replacing 'No Phone Service' or 'No Internet Service' with 'No'.\n*Because it does not make any sense out of it. Still we will do some EDA on this.","bd75fc81":"you can the count of nan values.","8490c7a1":"* Dividing the data into Training and Testing."}}