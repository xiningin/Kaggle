{"cell_type":{"9617aea1":"code","128ea3e7":"code","0e79f5cd":"code","cb23dbbf":"code","a6de7a5c":"code","b2888861":"code","cd608da6":"code","a08f7499":"code","e9bb8976":"code","62626c56":"code","b0e884f4":"code","dc7f6155":"code","644da147":"code","d3e5859a":"code","3257e918":"code","3810c310":"code","cc2dbea7":"code","d4d2e37e":"code","d6584d98":"code","50b1143a":"code","e79fcfb9":"code","b905ec6a":"code","63a6d305":"code","3fe46225":"code","1908cbf7":"code","0f960f31":"code","b4695e51":"code","2c8e1880":"code","52befd5b":"code","ae09c804":"code","b07e09a3":"code","e944778a":"code","a4865175":"code","21fad371":"code","0b627d8f":"code","d5222d3a":"code","b994fb1e":"code","49c78bb4":"code","2355a3ee":"code","8f9a1327":"code","06ea1f5e":"code","396bac93":"code","3ff8d914":"code","31ca2273":"code","635726e4":"code","d2edcfdc":"code","6db7ab3b":"code","9c4da6e6":"code","9295a6c9":"code","487a2609":"code","810dee6b":"code","aeb6ed05":"code","bffca841":"code","cbf1f371":"code","1b8a2f0c":"code","48d16f09":"code","4bb2908f":"code","0acf8470":"code","dabb350e":"code","684c15a3":"code","d2befd09":"code","797ab0c4":"code","ff42961c":"code","31ca8a5d":"code","7bf259a5":"code","960939bb":"code","8a54f21a":"code","b3c90852":"code","a0fb743e":"code","65b0758b":"code","56dcab8e":"code","3547bce0":"code","eb9832b0":"code","fc50fc87":"code","b23ef339":"code","ef51fe1a":"code","5291fdc5":"code","0d76e3e4":"code","a3fdfc17":"code","2e721a4d":"code","bf1b39ce":"code","f54aa12c":"code","0771da8b":"code","99e804ea":"code","7dc2ef2e":"code","aa470fcd":"code","3aee1b95":"code","c189d242":"code","32aad142":"code","922fc91b":"code","fed8cb8e":"code","8b275c68":"code","b1b87c28":"code","31000c3e":"code","ed34bf8d":"code","36ba1f7d":"code","4c6ddd28":"code","c0300fcf":"code","30bbf4a6":"code","7a27cfd2":"code","69234b71":"code","5bf5d22c":"code","64b9943a":"code","a6c20294":"code","20458a50":"code","51362a56":"code","480f49bd":"code","197dd95d":"code","4c4384c8":"code","bff6a902":"code","aa2daa76":"code","c14e7e08":"code","1d9cbcdc":"code","eb13ffaa":"code","be073970":"markdown","c4028965":"markdown","e98ac094":"markdown","752aa6a6":"markdown","126f1458":"markdown","6904bb6c":"markdown","f76ff2c3":"markdown","4e2de7e2":"markdown","f82364a1":"markdown","64a21f26":"markdown","73ea8162":"markdown","e62e830c":"markdown","853b619e":"markdown","06d1e343":"markdown","a12fb4da":"markdown","733783d2":"markdown","0896fd72":"markdown","98c9dc6f":"markdown","323730d3":"markdown","28e75e1d":"markdown","1242926d":"markdown","2d536227":"markdown","47c1018e":"markdown","bd73d38e":"markdown","e5c5b981":"markdown","a06ec522":"markdown","e29ed550":"markdown","13f38e5d":"markdown","37951d4c":"markdown","b5ae086a":"markdown","9f4301b2":"markdown","c9c83e4e":"markdown","e8be01ac":"markdown","7f661bac":"markdown"},"source":{"9617aea1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport re\nimport string\nimport math\n\nimport seaborn as sns\nimport matplotlib\nfrom matplotlib import cm as cm\n\nimport matplotlib.pyplot as plt\n%pylab inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# Suppress Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","128ea3e7":"pd.set_option('max_rows',500)\npd.set_option('max_columns',800)","0e79f5cd":"dirname = '..\/input\/kaggle-survey-2019'\nsurvey = pd.read_csv(dirname +'\/multiple_choice_responses.csv')\n#text = pd.read_csv(dirname+'\/other_text_responses.csv')\nquestions = pd.read_csv(dirname+'\/questions_only.csv')\n#survey = pd.read_csv(dirname+'\/survey_schema.csv')","cb23dbbf":"survey= survey.drop([0], errors='ignore')","a6de7a5c":"survey.head(1)","b2888861":"survey.columns = ['Duration','Age','Gender','Gender_Text','Country','Education','Role','Role_Text',\n                  'Company_Size','DS_Team_Size','ML_in_Business',\n                  'Role_Analyze_Data','Role_Build_Data_Infra','Role_Build_Prototype','Role_ML_Service',\n                  'Role_ML_Experimentation','Role_ML_Research','Role_ML_None','Role_ML_Other','Role_Text',\n                  'Salary','ML_Spend',\n                  'Media_Twitter','Media_HackerNews','Media_Reddit','Media_Kaggle','Media_CourseForums','Media_YouTube',\n                  'Media_Podcasts','Media_Blogs','Media_Journal','Media_Slack','Media_None','Media_Other','Media_Text',\n                  'Course_Udacity','Course_Coursera','Course_edX','Course_DataCamp','Course_DataQuest','Course_Kaggle',\n                  'Course_Fastai','Course_Udemy','Course_Linkedin','Course_University','Course_None','Course_Other','Course_Text',\n                  'Data_Analysis_Response','Data_Analysis_Basic','Data_Analysis_Advanced','Data_Analysis_BI',\n                  'Data_Analysis_Local','Data_Analysis_Cloud','Data_Analysis_Other',\n                  'Writing_Code',\n                  'IDE_Jupyter','IDE_RStudio','IDE_PyCharm','IDE_Atom','IDE_MATLAB','IDE_VS','IDE_Spyder',\n                  'IDE_Vim','IDE_Notepad++','IDE_Sublime','IDE_None','IDE_Other','IDE_Text',\n                  'Notebook_Kaggle','Notebook_Google_Colab','Notebook_MS_Azure','Notebook_Google_Cloud',\n                  'Notebook_Paperspace','Notebook_FloydHub','Notebook_Binder','Notebook_IBM_Watson',\n                  'Notebook_Code_Ocean','Notebook_AWS','Notebook_None','Notebook_Other','Notebook_Text',\n                  'Language_Python','Language_R','Language_SQL','Language_C','Language_C++','Language_Java','Language_Javascript',\n                  'Language_TypeScript','Language_Bash','Language_MATLAB','Language_None','Language_Other','Language_Text',\n                  'Recommended_Language','Recommended_Language_Other',\n                  'Vis_Ggplot','Vis_Matplotlib','Vis_Altair','Vis_Shiny','Vis_D3','Vis_Plotly','Vis_Bokeh','Vis_Seaborn',\n                  'Vis_Geoplotlib','Vis_Leaflet','Vis_None','Vis_Other','Vis_Text',\n                  'CPU','GPU','TPU','Hardware_None','Hardware_Other','Hardware_Text','TPU_Usage','ML_Since',\n                  'Algorithm_Regression','Algorithm_Tree','Algorithm_GBM','Algorithm_Bayesian',\n                  'Algorithm_Evolutionary','Algorithm_DNN','Algorithm_CNN','Algorithm_GAN','Algorithm_RNN','Algorithm_Transformer',\n                  'Algorithm_None','Algorithm_Other','Algorithm_Text',\n                  'Auto_Augmentation','Auto_Feature_Engineering','Auto_Model_Selection','Auto_Model_Architecture',\n                  'Auto_Hyperparameter_Tuning','Auto_Pipeline','Auto_None','Auto_Other','Auto_Text',\n                  'CV_General','CV_Image_Segmentation','CV_Object_Detection','CV_Image_Classification',\n                  'CV_GAN','CV_None','CV_Other','CV_Text',\n                  'NLP_Embeddings','NLP_Encoder','NLP_Contextualized_Embeddings','NLP_Transformer',\n                  'NLP_None','NLP_Other','NLP_Text',\n                  'ML_Scikit-learn','ML_Tensorflow','ML_Keras','ML_RandomForest','ML_Xgboost','ML_PyTorch',\n                  'ML_Caret','ML_LightGBM','ML_SparkMLib','ML_Fastai','ML_None','ML_Other','ML_Text',\n                  'Cloud_Platform_GCP','Cloud_Platform_AWS','Cloud_Platform_Azure','Cloud_Platform_IBM','Cloud_Platform_Alibaba',\n                  'Cloud_Platform_Salesforce','Cloud_Platform_Oracle','Cloud_Platform_SAP','Cloud_Platform_VMware',\n                  'Cloud_Platform_RedHat','Cloud_Platform_None','Cloud_Platform_Other','Cloud_Platform_Text',\n                  'Cloud_Product_AWS_EC2','Cloud_Product_Google_ComputeEngine','Cloud_Product_AWS_Lambda',\n                  'Cloud_Product_Azure_VM','Cloud_Product_Google_AppEngine','Cloud_Product_Google_CloudFunctions',\n                  'Cloud_Product_AWS_EBS','Cloud_Product_Google_Kubernetes','Cloud_Product_AWS_Batch',\n                  'Cloud_Product_Azure_Container','Cloud_Product_None','Cloud_Product_Other','Cloud_Product_Text',\n                  'BigData_Google_BigQuery','BigData_AWS_Redshift','BigData_Google_Databricks','BigData_AWS_EMR',\n                  'BigData_Teradata','BigData_MSAS','BigData_Google_CloudDataflow','BigData_AWS_Athena',\n                  'BigData_AWS_Kinesis','BigData_Google_CloudPub','BigData_None','BigData_Other','BigData_Text',\n                  'ML_Product_SAS','ML_Product_Cloudera','ML_Product_Azure_Studio','ML_Product_Google_Cloud_MLEngine',\n                  'ML_Product_Google_Cloud_Vision','ML_Product_Google_SpeechtoText','ML_Product_Google_Cloud_NaturalLanguage',\n                  'ML_Product_Rapidminer','ML_Product_Google_Cloud_Translation','ML_Product_AWS_Sagemaker',\n                  'ML_Product_None','ML_Product_Other','ML_Product_Text',\n                  'AutoML_Google','AutoML_H2O','AutoML_Databricks','AutoML_DataRobot','AutoML_Tpot',\n                  'AutoML_Auto-Keras','AutoML_Auto-Sklearn','AutoML_Auto_ml','AutoML_Xcessiv','AutoML_MLbox',\n                  'AutoML_None','AutoML_Other','AutoML_Text',\n                  'RDB_MySQL','RDB_PostgresSQL','RDB_SQLite','RDB_MS_SQLServer','RDB_Oracle','RDB_MS_Access','RDB_AWS_RDS',\n                  'RDB_AWS_DynamoDB','RDB_Azure_SQL','RDB_Google_CloudSQL','RDB_None','RDB_Other','RDB_Text']","cd608da6":"dfcols = ['Duration','Age','Gender','Country','Education','Role',\n                  'Company_Size','DS_Team_Size','ML_in_Business',\n                  'Role_Analyze_Data','Role_Build_Data_Infra','Role_Build_Prototype','Role_ML_Service',\n                  'Role_ML_Experimentation','Role_ML_Research','Role_ML_None','Role_ML_Other',\n                  'Salary','ML_Spend',\n                  'Media_Twitter','Media_HackerNews','Media_Reddit','Media_Kaggle','Media_CourseForums','Media_YouTube',\n                  'Media_Podcasts','Media_Blogs','Media_Journal','Media_Slack','Media_None','Media_Other',\n                  'Course_Udacity','Course_Coursera','Course_edX','Course_DataCamp','Course_DataQuest','Course_Kaggle',\n                  'Course_Fastai','Course_Udemy','Course_Linkedin','Course_University','Course_None','Course_Other',\n                  'Data_Analysis_Response','Data_Analysis_Basic','Data_Analysis_Advanced','Data_Analysis_BI',\n                  'Data_Analysis_Local','Data_Analysis_Cloud','Data_Analysis_Other',\n                  'Writing_Code',\n                  'IDE_Jupyter','IDE_RStudio','IDE_PyCharm','IDE_Atom','IDE_MATLAB','IDE_VS','IDE_Spyder',\n                  'IDE_Vim','IDE_Notepad++','IDE_Sublime','IDE_None','IDE_Other',\n                  'Notebook_Kaggle','Notebook_Google_Colab','Notebook_MS_Azure','Notebook_Google_Cloud',\n                  'Notebook_Paperspace','Notebook_FloydHub','Notebook_Binder','Notebook_IBM_Watson',\n                  'Notebook_Code_Ocean','Notebook_AWS','Notebook_None','Notebook_Other',\n                  'Language_Python','Language_R','Language_SQL','Language_C','Language_C++','Language_Java','Language_Javascript',\n                  'Language_TypeScript','Language_Bash','Language_MATLAB','Language_None','Language_Other',\n                  'Recommended_Language','Recommended_Language_Other',\n                  'Vis_Ggplot','Vis_Matplotlib','Vis_Altair','Vis_Shiny','Vis_D3','Vis_Plotly','Vis_Bokeh','Vis_Seaborn',\n                  'Vis_Geoplotlib','Vis_Leaflet','Vis_None','Vis_Other',\n                  'CPU','GPU','TPU','Hardware_None','Hardware_Other','TPU_Usage','ML_Since',\n                  'Algorithm_Regression','Algorithm_Tree','Algorithm_GBM','Algorithm_Bayesian',\n                  'Algorithm_Evolutionary','Algorithm_DNN','Algorithm_CNN','Algorithm_GAN','Algorithm_RNN','Algorithm_Transformer',\n                  'Algorithm_None','Algorithm_Other',\n                  'Auto_Augmentation','Auto_Feature_Engineering','Auto_Model_Selection','Auto_Model_Architecture',\n                  'Auto_Hyperparameter_Tuning','Auto_Pipeline','Auto_None','Auto_Other',\n                  'CV_General','CV_Image_Segmentation','CV_Object_Detection','CV_Image_Classification',\n                  'CV_GAN','CV_None','CV_Other',\n                  'NLP_Embeddings','NLP_Encoder','NLP_Contextualized_Embeddings','NLP_Transformer',\n                  'NLP_None','NLP_Other',\n                  'ML_Scikit-learn','ML_Tensorflow','ML_Keras','ML_RandomForest','ML_Xgboost','ML_PyTorch',\n                  'ML_Caret','ML_LightGBM','ML_SparkMLib','ML_Fastai','ML_None','ML_Other',\n                  'Cloud_Platform_GCP','Cloud_Platform_AWS','Cloud_Platform_Azure','Cloud_Platform_IBM','Cloud_Platform_Alibaba',\n                  'Cloud_Platform_Salesforce','Cloud_Platform_Oracle','Cloud_Platform_SAP','Cloud_Platform_VMware',\n                  'Cloud_Platform_RedHat','Cloud_Platform_None','Cloud_Platform_Other',\n                  'Cloud_Product_AWS_EC2','Cloud_Product_Google_ComputeEngine','Cloud_Product_AWS_Lambda',\n                  'Cloud_Product_Azure_VM','Cloud_Product_Google_AppEngine','Cloud_Product_Google_CloudFunctions',\n                  'Cloud_Product_AWS_EBS','Cloud_Product_Google_Kubernetes','Cloud_Product_AWS_Batch',\n                  'Cloud_Product_Azure_Container','Cloud_Product_None','Cloud_Product_Other',\n                  'BigData_Google_BigQuery','BigData_AWS_Redshift','BigData_Google_Databricks','BigData_AWS_EMR',\n                  'BigData_Teradata','BigData_MSAS','BigData_Google_CloudDataflow','BigData_AWS_Athena',\n                  'BigData_AWS_Kinesis','BigData_Google_CloudPub','BigData_None','BigData_Other',\n                  'ML_Product_SAS','ML_Product_Cloudera','ML_Product_Azure_Studio','ML_Product_Google_Cloud_MLEngine',\n                  'ML_Product_Google_Cloud_Vision','ML_Product_Google_SpeechtoText','ML_Product_Google_Cloud_NaturalLanguage',\n                  'ML_Product_Rapidminer','ML_Product_Google_Cloud_Translation','ML_Product_AWS_Sagemaker',\n                  'ML_Product_None','ML_Product_Other',\n                  'AutoML_Google','AutoML_H2O','AutoML_Databricks','AutoML_DataRobot','AutoML_Tpot',\n                  'AutoML_Auto-Keras','AutoML_Auto-Sklearn','AutoML_Auto_ml','AutoML_Xcessiv','AutoML_MLbox',\n                  'AutoML_None','AutoML_Other',\n                  'RDB_MySQL','RDB_PostgresSQL','RDB_SQLite','RDB_MS_SQLServer','RDB_Oracle','RDB_MS_Access','RDB_AWS_RDS',\n                  'RDB_AWS_DynamoDB','RDB_Azure_SQL','RDB_Google_CloudSQL','RDB_None','RDB_Other']","a08f7499":"df = survey[dfcols].copy()","e9bb8976":"def binary_encoding(bin_var):\n    \"\"\" Function to encode binary valued variables \"\"\"\n    lb = LabelEncoder()\n    bin_var = bin_var.fillna('')\n    bin_var = lb.fit_transform(bin_var)\n    #print('Max Value ',bin_var.max())\n    return bin_var","62626c56":"df['Role_Analyze_Data'] = binary_encoding(df['Role_Analyze_Data'])\ndf['Role_Build_Data_Infra'] = binary_encoding(df['Role_Build_Data_Infra'])\ndf['Role_Build_Prototype'] = binary_encoding(df['Role_Build_Prototype'])\ndf['Role_ML_Service'] = binary_encoding(df['Role_ML_Service'])\ndf['Role_ML_Experimentation'] = binary_encoding(df['Role_ML_Experimentation'])\ndf['Role_ML_Research'] = binary_encoding(df['Role_ML_Research'])\ndf['Media_Twitter'] = binary_encoding(df['Media_Twitter'])\ndf['Media_HackerNews'] = binary_encoding(df['Media_HackerNews'])\ndf['Media_Reddit'] = binary_encoding(df['Media_Reddit'])\ndf['Media_Kaggle'] = binary_encoding(df['Media_Kaggle'])\ndf['Media_CourseForums'] = binary_encoding(df['Media_CourseForums'])\ndf['Media_YouTube'] = binary_encoding(df['Media_YouTube'])\ndf['Media_Podcasts'] = binary_encoding(df['Media_Podcasts'])\ndf['Media_Blogs'] = binary_encoding(df['Media_Blogs'])\ndf['Media_Journal'] = binary_encoding(df['Media_Journal'])\ndf['Media_Slack'] = binary_encoding(df['Media_Slack'])\ndf['Course_Udacity'] = binary_encoding(df['Course_Udacity'])\ndf['Course_Coursera'] = binary_encoding(df['Course_Coursera'])\ndf['Course_edX'] = binary_encoding(df['Course_edX'])\ndf['Course_DataCamp'] = binary_encoding(df['Course_DataCamp'])\ndf['Course_DataQuest'] = binary_encoding(df['Course_DataQuest'])\ndf['Course_Kaggle'] = binary_encoding(df['Course_Kaggle'])\ndf['Course_Fastai'] = binary_encoding(df['Course_Fastai'])\ndf['Course_Udemy'] = binary_encoding(df['Course_Udemy'])\ndf['Course_Linkedin'] = binary_encoding(df['Course_Linkedin'])\ndf['Course_University'] = binary_encoding(df['Course_University'])\ndf['Algorithm_Regression'] = binary_encoding(df['Algorithm_Regression'])\ndf['Algorithm_Tree'] = binary_encoding(df['Algorithm_Tree'])\ndf['Algorithm_GBM'] = binary_encoding(df['Algorithm_GBM'])\ndf['Algorithm_Bayesian'] = binary_encoding(df['Algorithm_Bayesian'])\ndf['Algorithm_Evolutionary'] = binary_encoding(df['Algorithm_Evolutionary'])\ndf['Algorithm_DNN'] = binary_encoding(df['Algorithm_DNN'])\ndf['Algorithm_CNN'] = binary_encoding(df['Algorithm_CNN'])\ndf['Algorithm_GAN'] = binary_encoding(df['Algorithm_GAN'])\ndf['Algorithm_RNN'] = binary_encoding(df['Algorithm_RNN'])\ndf['Algorithm_Transformer'] = binary_encoding(df['Algorithm_Transformer'])\ndf['CV_General'] = binary_encoding(df['CV_General'])\ndf['CV_Image_Segmentation'] = binary_encoding(df['CV_Image_Segmentation'])\ndf['CV_Object_Detection'] = binary_encoding(df['CV_Object_Detection'])\ndf['CV_Image_Classification'] = binary_encoding(df['CV_Image_Classification'])\ndf['CV_GAN'] = binary_encoding(df['CV_GAN'])\ndf['NLP_Embeddings'] = binary_encoding(df['NLP_Embeddings'])\ndf['NLP_Encoder'] = binary_encoding(df['NLP_Encoder'])\ndf['NLP_Contextualized_Embeddings'] = binary_encoding(df['NLP_Contextualized_Embeddings'])\ndf['NLP_Transformer'] = binary_encoding(df['NLP_Transformer'])\ndf['ML_Scikit-learn'] = binary_encoding(df['ML_Tensorflow'])\ndf['ML_Keras'] = binary_encoding(df['ML_Keras'])\ndf['ML_RandomForest'] = binary_encoding(df['ML_RandomForest'])\ndf['ML_Xgboost'] = binary_encoding(df['ML_Xgboost'])\ndf['ML_PyTorch'] = binary_encoding(df['ML_PyTorch'])\ndf['ML_Caret'] = binary_encoding(df['ML_Caret'])\ndf['ML_LightGBM'] = binary_encoding(df['ML_LightGBM'])\ndf['ML_SparkMLib'] = binary_encoding(df['ML_SparkMLib'])\ndf['ML_Fastai'] = binary_encoding(df['ML_Fastai'])\ndf['CPU'] = binary_encoding(df['CPU'])\ndf['GPU'] = binary_encoding(df['GPU'])\ndf['IDE_Jupyter'] = binary_encoding(df['IDE_Jupyter'])\ndf['IDE_RStudio'] = binary_encoding(df['IDE_RStudio'])\ndf['IDE_PyCharm'] = binary_encoding(df['IDE_PyCharm'])\ndf['IDE_Atom'] = binary_encoding(df['IDE_Atom'])\ndf['IDE_MATLAB'] = binary_encoding(df['IDE_MATLAB'])\ndf['IDE_VS'] = binary_encoding(df['IDE_VS'])\ndf['IDE_Spyder'] = binary_encoding(df['IDE_Spyder'])\ndf['IDE_Vim'] = binary_encoding(df['IDE_Vim'])\ndf['IDE_Notepad++'] = binary_encoding(df['IDE_Notepad++'])\ndf['IDE_Sublime'] = binary_encoding(df['IDE_Sublime'])\ndf['Notebook_Kaggle'] = binary_encoding(df['Notebook_Kaggle'])\ndf['Notebook_Google_Colab'] = binary_encoding(df['Notebook_Google_Colab'])\ndf['Notebook_MS_Azure'] = binary_encoding(df['Notebook_MS_Azure'])\ndf['Notebook_Google_Cloud'] = binary_encoding(df['Notebook_Google_Cloud'])\ndf['Notebook_Paperspace'] = binary_encoding(df['Notebook_Paperspace'])\ndf['Notebook_FloydHub'] = binary_encoding(df['Notebook_FloydHub'])\ndf['Notebook_Binder'] = binary_encoding(df['Notebook_Binder'])\ndf['Notebook_IBM_Watson'] = binary_encoding(df['Notebook_IBM_Watson'])\ndf['Notebook_Code_Ocean'] = binary_encoding(df['Notebook_Code_Ocean'])\ndf['Notebook_AWS'] = binary_encoding(df['Notebook_AWS'])\ndf['Language_Python'] = binary_encoding(df['Language_Python'])\ndf['Language_R'] = binary_encoding(df['Language_R'])\ndf['Language_SQL'] = binary_encoding(df['Language_SQL'])\ndf['Language_C'] = binary_encoding(df['Language_C'])\ndf['Language_C++'] = binary_encoding(df['Language_C++'])\ndf['Language_Java'] = binary_encoding(df['Language_Java'])\ndf['Language_Javascript'] = binary_encoding(df['Language_Javascript'])\ndf['Language_TypeScript'] = binary_encoding(df['Language_TypeScript'])\ndf['Language_Bash'] = binary_encoding(df['Language_Bash'])\ndf['Language_MATLAB'] = binary_encoding(df['Language_MATLAB'])\ndf['Vis_Ggplot'] = binary_encoding(df['Vis_Ggplot'])\ndf['Vis_Matplotlib'] = binary_encoding(df['Vis_Matplotlib'])\ndf['Vis_Altair'] = binary_encoding(df['Vis_Altair'])\ndf['Vis_Shiny'] = binary_encoding(df['Vis_Shiny'])\ndf['Vis_D3'] = binary_encoding(df['Vis_D3'])\ndf['Vis_Plotly'] = binary_encoding(df['Vis_Plotly'])\ndf['Vis_Bokeh'] = binary_encoding(df['Vis_Bokeh'])\ndf['Vis_Seaborn'] = binary_encoding(df['Vis_Seaborn'])\ndf['Vis_Geoplotlib'] = binary_encoding(df['Vis_Geoplotlib'])\ndf['Vis_Leaflet'] = binary_encoding(df['Vis_Leaflet'])\ndf['Auto_Augmentation'] = binary_encoding(df['Auto_Augmentation'])\ndf['Auto_Feature_Engineering'] = binary_encoding(df['Auto_Feature_Engineering'])\ndf['Auto_Model_Selection'] = binary_encoding(df['Auto_Model_Selection'])\ndf['Auto_Model_Architecture'] = binary_encoding(df['Auto_Model_Architecture'])\ndf['Auto_Hyperparameter_Tuning'] = binary_encoding(df['Auto_Hyperparameter_Tuning'])\ndf['Auto_Pipeline'] = binary_encoding(df['Auto_Pipeline'])\ndf['Cloud_Platform_GCP'] = binary_encoding(df['Cloud_Platform_GCP'])\ndf['Cloud_Platform_AWS'] = binary_encoding(df['Cloud_Platform_AWS'])\ndf['Cloud_Platform_Azure'] = binary_encoding(df['Cloud_Platform_Azure'])\ndf['Cloud_Platform_IBM'] = binary_encoding(df['Cloud_Platform_IBM'])\ndf['Cloud_Platform_Alibaba'] = binary_encoding(df['Cloud_Platform_Alibaba'])\ndf['Cloud_Platform_Salesforce'] = binary_encoding(df['Cloud_Platform_Salesforce'])\ndf['Cloud_Platform_Oracle'] = binary_encoding(df['Cloud_Platform_Oracle'])\ndf['Cloud_Platform_SAP'] = binary_encoding(df['Cloud_Platform_SAP'])\ndf['Cloud_Platform_VMware'] = binary_encoding(df['Cloud_Platform_VMware'])\ndf['Cloud_Platform_RedHat'] = binary_encoding(df['Cloud_Platform_RedHat'])\ndf['Cloud_Product_AWS_EC2'] = binary_encoding(df['Cloud_Product_AWS_EC2'])\ndf['Cloud_Product_Google_ComputeEngine'] = binary_encoding(df['Cloud_Product_Google_ComputeEngine'])\ndf['Cloud_Product_AWS_Lambda'] = binary_encoding(df['Cloud_Product_AWS_Lambda'])\ndf['Cloud_Product_Azure_VM'] = binary_encoding(df['Cloud_Product_Azure_VM'])\ndf['Cloud_Product_Google_AppEngine'] = binary_encoding(df['Cloud_Product_Google_AppEngine'])\ndf['Cloud_Product_Google_CloudFunctions'] = binary_encoding(df['Cloud_Product_Google_CloudFunctions'])\ndf['Cloud_Product_AWS_EBS'] = binary_encoding(df['Cloud_Product_AWS_EBS'])\ndf['Cloud_Product_Google_Kubernetes'] = binary_encoding(df['Cloud_Product_Google_Kubernetes'])\ndf['Cloud_Product_AWS_Batch'] = binary_encoding(df['Cloud_Product_AWS_Batch'])\ndf['Cloud_Product_Azure_Container'] = binary_encoding(df['Cloud_Product_Azure_Container'])\ndf['BigData_Google_BigQuery'] = binary_encoding(df['BigData_Google_BigQuery'])\ndf['BigData_AWS_Redshift'] = binary_encoding(df['BigData_AWS_Redshift'])\ndf['BigData_Google_Databricks'] = binary_encoding(df['BigData_Google_Databricks'])\ndf['BigData_AWS_EMR'] = binary_encoding(df['BigData_AWS_EMR'])\ndf['BigData_Teradata'] = binary_encoding(df['BigData_Teradata'])\ndf['BigData_MSAS'] = binary_encoding(df['BigData_MSAS'])\ndf['BigData_Google_CloudDataflow'] = binary_encoding(df['BigData_Google_CloudDataflow'])\ndf['BigData_AWS_Athena'] = binary_encoding(df['BigData_AWS_Athena'])\ndf['BigData_AWS_Kinesis'] = binary_encoding(df['BigData_AWS_Kinesis'])\ndf['BigData_Google_CluodPub'] = binary_encoding(df['BigData_Google_CloudPub'])\ndf['ML_Product_SAS'] = binary_encoding(df['ML_Product_SAS'])\ndf['ML_Product_Cloudera'] = binary_encoding(df['ML_Product_Cloudera'])\ndf['ML_Product_Azure_Studio'] = binary_encoding(df['ML_Product_Azure_Studio'])\ndf['ML_Product_Google_Cloud_MLEngine'] = binary_encoding(df['ML_Product_Google_Cloud_MLEngine'])\ndf['ML_Product_Google_Cloud_Vision'] = binary_encoding(df['ML_Product_Google_Cloud_Vision'])\ndf['ML_Product_Google_SpeechtoText'] = binary_encoding(df['ML_Product_Google_SpeechtoText'])\ndf['ML_Product_Google_Cloud_NaturalLanguage'] = binary_encoding(df['ML_Product_Google_Cloud_NaturalLanguage'])\ndf['ML_Product_Rapidminer'] = binary_encoding(df['ML_Product_Rapidminer'])\ndf['ML_Product_Google_Cloud_Translation'] = binary_encoding(df['ML_Product_Google_Cloud_Translation'])\ndf['ML_Product_AWS_Sagemaker'] = binary_encoding(df['ML_Product_AWS_Sagemaker'])\ndf['AutoML_Google'] = binary_encoding(df['AutoML_Google'])\ndf['AutoML_H2O'] = binary_encoding(df['AutoML_H2O'])\ndf['AutoML_Databricks'] = binary_encoding(df['AutoML_Databricks'])\ndf['AutoML_DataRobot'] = binary_encoding(df['AutoML_DataRobot'])\ndf['AutoML_Tpot'] = binary_encoding(df['AutoML_Tpot'])\ndf['AutoML_Auto-Keras'] = binary_encoding(df['AutoML_Auto-Keras'])\ndf['AutoML_Auto-Sklearn'] = binary_encoding(df['AutoML_Auto-Sklearn'])\ndf['AutoML_Auto_ml'] = binary_encoding(df['AutoML_Auto_ml'])\ndf['AutoML_Xcessiv'] = binary_encoding(df['AutoML_Xcessiv'])\ndf['AutoML_MLbox'] = binary_encoding(df['AutoML_MLbox'])\ndf['RDB_MySQL'] = binary_encoding(df['RDB_MySQL'])\ndf['RDB_PostgresSQL'] = binary_encoding(df['RDB_PostgresSQL'])\ndf['RDB_SQLite'] = binary_encoding(df['RDB_SQLite'])\ndf['RDB_MS_SQLServer'] = binary_encoding(df['RDB_MS_SQLServer'])\ndf['RDB_Oracle'] = binary_encoding(df['RDB_Oracle'])\ndf['RDB_MS_Access'] = binary_encoding(df['RDB_MS_Access'])\ndf['RDB_AWS_RDS'] = binary_encoding(df['RDB_AWS_RDS'])\ndf['RDB_AWS_DynamoDB'] = binary_encoding(df['RDB_AWS_DynamoDB'])\ndf['RDB_Azure_SQL'] = binary_encoding(df['RDB_Azure_SQL'])\ndf['RDB_Google_CloudSQL'] = binary_encoding(df['RDB_Google_CloudSQL'])","b0e884f4":"def multi_encoding(df,mul_var_name):\n    \"\"\" Function to encode multi class variables \"\"\"\n    df[mul_var_name] = df[mul_var_name].fillna('')\n    df[mul_var_name] = df[mul_var_name].astype('category')\n    #print(('Before Encoding: '+ str(mul_var_name)),df[mul_var_name].unique())\n    bn = LabelBinarizer()\n    mul_var_BN = bn.fit_transform(df[mul_var_name])\n    l = ['' for i in range(len(bn.classes_))]\n    for i in range(len(bn.classes_)):\n        l[i] = (str(mul_var_name)+(':')+str(bn.classes_[i]))\n    df = pd.concat([df, pd.DataFrame(mul_var_BN, columns=l)], axis=1)\n    #print('Columns Added : ', l)\n    #del df[mul_var_name]\n    del mul_var_BN\n    return df","dc7f6155":"df['TPU_Usage'] = df['TPU_Usage'].astype('str')\ndf = multi_encoding(df,'TPU_Usage')","644da147":"df['TPU_Usage'].unique()","d3e5859a":"df['Count'] = 1","3257e918":"#pd.crosstab(df['Count'],df['Gender']).apply(lambda r: round(r\/r.sum()*100,1), axis=1).plot(kind='bar')","3810c310":"#pd.crosstab(df['Count'],df['Education']).apply(lambda r: round(r\/r.sum()*100,1), axis=1).plot(kind='bar')","cc2dbea7":"#pd.crosstab(df['Count'],df['Role']).apply(lambda r: round(r\/r.sum()*100,1), axis=1).plot(kind='bar')","d4d2e37e":"df['Hardware'] = 'No GPU\/TPU'\n\ndf['Hardware'] =np.where((df['GPU']> 0), 'GPU', df['Hardware'])\ndf['Hardware'] =np.where(np.logical_or(df['TPU_Usage'] == '6-24 times', df['TPU_Usage'] == '> 25 times'), 'TPU Multiple Times', df['Hardware'])\ndf['Hardware'] =np.where(np.logical_or(df['TPU_Usage'] == 'Once', df['TPU_Usage'] == '2-5 times'), 'TPU Few Times', df['Hardware'])\ndf['Hardware'] =np.where(np.logical_and(df['GPU']> 0, df['Hardware'] == 'TPU Multiple Times'), 'GPU, TPU Multiple Times', df['Hardware'])\ndf['Hardware'] =np.where(np.logical_and(df['GPU']> 0, df['Hardware'] == 'TPU Few Times'), 'GPU, TPU Few Times', df['Hardware'])","d6584d98":"df['Hardware'].unique()","50b1143a":"!pip install pywaffle","e79fcfb9":"from pywaffle import Waffle","b905ec6a":"pivot0 = df.groupby(['Gender','Role'])['Count'].agg(['sum'])\n#pivot0","63a6d305":"data = {'Data Scientist M': 18, 'Data Scientist F': 3,\n        'Student M': 16, 'Student F': 4,\n        'Software Engineer M': 12, 'Software Engineer F': 2,\n        'Data Analyst M': 6, 'Data Analyst F': 2,\n        'Research Scientist M': 6, 'Research Scientist F': 1,\n        'Other Roles M': 25, 'Other Roles F':5}\n\nfig = plt.figure(\n    FigureClass=Waffle, \n    rows=5, \n    values=data, \n    colors=('#729ECE','#729ECE','#FF9E4A','#FF9E4A','#67BF5C','#67BF5C','#ED665D','#ED665D','#AD8BC9','#AD8BC9','#BBBBBB','#BBBBBB'),\n    icons=['male','female','male','female','male','female','male','female','male','female','male','female'],\n    icon_size=40,\n    #font_size=12,\n    title={'label': 'Survey Participants by Role and Gender\\n', 'loc': 'center','fontsize':24,'color':'#666666'},\n    labels=[\"{0} ({1}%)\".format(k, v) for k, v in data.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': 6, 'framealpha': 0.4},\n    #plot_direction='NE',\n    tight=False,\n    figsize=(18, 12)\n)\nfig.set_facecolor('#EEEEEE')\nplt.show()\n","3fe46225":"df1 = df[(df['Gender']=='Male') | (df['Gender']=='Female')]","1908cbf7":"pivot11 = df1.groupby(['Gender','Age'])['Count','Media_Twitter','Media_HackerNews','Media_Reddit','Media_Kaggle',\n                                        'Media_CourseForums','Media_YouTube','Media_Podcasts','Media_Blogs','Media_Journal','Media_Slack'].agg(['sum'])\n#pivot11.index","0f960f31":"pivot12 = pivot11.values","b4695e51":"#pivot12 = pivot11.values\n\n# pass in array and columns\npivot13 = pd.DataFrame(pivot12,index=['Female \\n18-21',\n            'Female \\n22-24',\n            'Female \\n25-29',\n            'Female \\n30-34',\n            'Female \\n35-39',\n            'Female \\n40-44',\n            'Female \\n45-49',\n            'Female \\n50-54',\n            'Female \\n55-59',\n            'Female \\n60-69',\n            'Female \\n70+',\n            'Male \\n18-21',\n            'Male \\n22-24',\n            'Male \\n25-29',\n            'Male \\n30-34',\n            'Male \\n35-39',\n            'Male \\n40-44',\n            'Male \\n45-49',\n            'Male \\n50-54',\n            'Male \\n55-59',\n            'Male \\n60-69',\n            'Male \\n70+'],\n                       columns=['Survey_Participants','Twitter','HackerNews','Reddit','Kaggle','Course Forums',\n                                'YouTube','Podcasts','Blogs','Journal','Slack'])\n\npivot14 = pivot13.copy()\npivot13 = pivot13.rename(columns={'Survey_Participants':'Survey Participants'})\n\npivot14 = pivot13[['Twitter','HackerNews','Reddit','Kaggle','Course Forums','YouTube','Podcasts','Blogs','Journal','Slack']].div(pivot14.Survey_Participants, axis=0) * 100","2c8e1880":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot14[0:11].plot(figsize=(18, 6),kind='line',alpha=0.40,linewidth=3,marker='o',markersize=10,color=['#1da1f2','#ff9999','#ff4500','#00c0ff',\n                                                                'yellow','#f80000','lightgreen','brown','grey','#2db67e'])\nplt.title(\"Favorite Data Science Media\\n\", loc=\"center\",size=36,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=2)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=14,color='#008abc')\nplt.yticks(size=12,color='#939497')\nplt.ylim(0,100)\nplt.legend(fontsize=14,ncol=4,loc='topright')\nplt.text(0.5,82, 'Female', fontsize=36,weight='bold',alpha=0.25,color='#eb49a6')\nplt.text(0.5,75, '% of Participants Used', fontsize=18,alpha=0.25,color='#999999')\n#plt.show()\nax = pivot14[11:22].plot(figsize=(18, 6),kind='line',alpha=0.40,linewidth=3,marker='o',markersize=10,color=['#1da1f2','#ff9999','#ff4500','#00c0ff',\n                                                                'yellow','#f80000','lightgreen','brown','grey','#2db67e'])\nplt.title(\"\", loc=\"center\",size=36,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=2)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=14,color='#008abc')\nplt.yticks(size=12,color='#939497')\nplt.ylim(0,100)\nplt.legend(fontsize=14,ncol=4,loc='topright')\nplt.text(0.5, 82, 'Male', fontsize=36,weight='bold',alpha=0.25,color='#02a3fe')\nplt.text(0.5,75, '% of Participants Used', fontsize=18,alpha=0.25,color='#999999')\nplt.show()","52befd5b":"df2 = df[(df['Role']=='Software Engineer') | (df['Role']=='Data Scientist') | (df['Role']=='Statistician')\n        | (df['Role']=='Product\/Project Manager') | (df['Role']=='Data Analyst') | (df['Role']=='Research Scientist')\n        | (df['Role']=='Business Analyst') | (df['Role']=='Data Engineer') | (df['Role']=='DBA\/Database Engineer')].copy()","ae09c804":"pivot21 = df2.groupby(['Role'])['Count','Role_Analyze_Data','Role_Build_Data_Infra','Role_Build_Prototype','Role_ML_Service',\n                              'Role_ML_Experimentation','Role_ML_Research'].agg(['sum'])\n#pivot21.index","b07e09a3":"pivot21 = df2.groupby(['Role'])['Count','Role_Analyze_Data','Role_Build_Data_Infra','Role_Build_Prototype','Role_ML_Service',\n                              'Role_ML_Experimentation','Role_ML_Research'].agg(['sum'])\n\n\npivot22 = pivot21.values\n\n# pass in array and columns\npivot23 = pd.DataFrame(pivot22,index=['Business\\nAnalyst', 'DBA\/\\nDatabase \\nEngineer', 'Data\\nAnalyst',\n                                    'Data\\nEngineer', 'Data\\nScientist', 'Product\/Project\\nManager',\n                                    'Research\\nScientist','Software\\nEngineer', 'Statistician'],\n                       columns=['Survey_Participants','Analyze Data','Build Data Infrastructure',\n                      'Build Prototype','ML Service','ML Experimentation','ML Research'])\n\npivot24 = pivot23.copy()\npivot23 = pivot23.rename(columns={'Survey_Participants':'Survey Participants'})\npivot24 = pivot24[['Analyze Data','Build Data Infrastructure',\n                      'Build Prototype','ML Service','ML Experimentation',\n        'ML Research']].div(pivot24.Survey_Participants, axis=0) * 100\n\npivot23['order'] = [4,8,2,6,0,5,3,1,7]\npivot24['order'] =  [4,8,2,6,0,5,3,1,7]\npivot23 = pivot23.sort_values(by=['order'])\npivot24 = pivot24.sort_values(by=['order'])\ndel pivot23['order']\ndel pivot24['order']","e944778a":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot23.plot(figsize=(18, 8),title='Role',kind='bar',color=['#00c0ff','#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E'])\nplt.title(\"Job Role and Data Science Activity Performed\\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=15,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 3600, 'What Survey Participants Do at Work', fontsize=20,alpha=0.2)\nplt.legend(fontsize=14,loc='topleft',ncol=2)\nplt.show()","a4865175":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot24.plot(figsize=(18, 8),title='Role',kind='bar',color=['#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E'])\nplt.title(\"Job Role and Data Science Activity Performed\\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\n# #729ECE #FF9E4A #67BF5C #ED665D #AD8BC9 #A8786E #ED97CA #A2A2A2 #CDCC5D #6DCCDA\n\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=15,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 56, '% Participants Do at Work', fontsize=22,alpha=0.2)\nplt.legend(fontsize=14,ncol=2)\nplt.show()","21fad371":"df3 = df.copy()","0b627d8f":"pivot31 = df3.groupby(['Role'])['Count','Course_Udacity','Course_Coursera','Course_edX','Course_DataCamp','Course_DataQuest','Course_Kaggle',\n                  'Course_Fastai','Course_Udemy','Course_Linkedin','Course_University'].agg(['sum'])\n#pivot31.index","d5222d3a":"pivot32 = pivot31.values\n\n# pass in array and columns\npivot33 = pd.DataFrame(pivot32,index=['Business\\nAnalyst', 'DBA\/\\nDatabase \\nEngineer', 'Data\\nAnalyst',\n                                    'Data\\nEngineer', 'Data\\nScientist', 'Not\\nEmployed','Other','Product\/Project\\nManager',\n                                    'Research\\nScientist','Software\\nEngineer', 'Statistician','Student'],\n                       columns=['Survey_Participants','Udacity','Coursera','edX','DataCamp','DataQuest','Kaggle',\n                                'Fastai','Udemy','Linkedin','University'])\n\npivot34 = pivot33.copy()\npivot33 = pivot33.rename(columns={'Survey_Participants':'Survey Participants'})\npivot34 = pivot34[['Udacity','Coursera','edX','DataCamp','DataQuest','Kaggle',\n                                'Fastai','Udemy','Linkedin','University']].div(pivot34.Survey_Participants, axis=0) * 100\n\n\n\npivot33['order'] = [7,11,4,9,0,6,3,8,5,2,10,1]\npivot34['order'] =  [7,11,4,9,0,6,3,8,5,2,10,1]\npivot33 = pivot33.sort_values(by=['order'])\npivot34 = pivot34.sort_values(by=['order'])\ndel pivot33['order']\ndel pivot34['order']","b994fb1e":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot33.plot(figsize=(24, 8),title='Role',kind='bar',color=['#00c0ff','#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Job Role and Preferred Course Medium\\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 3100, 'How Survey Participants Learn', fontsize=20,alpha=0.2)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","49c78bb4":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot34.plot(figsize=(24, 8),title='Role',kind='bar',color=['#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Job Role and Preferred Course Medium  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\n# #729ECE #FF9E4A #67BF5C #ED665D #AD8BC9 #A8786E #ED97CA #A2A2A2 #CDCC5D #6DCCDA\n\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 56, '% Participants Learn', fontsize=22,alpha=0.2)\nplt.ylim(0,60)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","2355a3ee":"df4 = df.copy()","8f9a1327":"pivot41 = df4.groupby(['Education'])['Count','Course_Udacity','Course_Coursera','Course_edX','Course_DataCamp','Course_DataQuest','Course_Kaggle',\n                  'Course_Fastai','Course_Udemy','Course_Linkedin','Course_University'].agg(['sum'])\n#pivot41.index","06ea1f5e":"pivot42 = pivot41.values\n\n# pass in array and columns\npivot43 = pd.DataFrame(pivot42,index=['Bachelor''s degree','Doctoral degree','I prefer not to answer','Master''s degree',\n                                      'High School','Professional degree','Some college\/university'],\n                       columns=['Survey_Participants','Udacity','Coursera','edX','DataCamp','DataQuest','Kaggle',\n                                'Fastai','Udemy','Linkedin','University'])\n\npivot44 = pivot43.copy()\npivot43 = pivot43.rename(columns={'Survey_Participants':'Survey Participants'})\npivot44 = pivot44[['Udacity','Coursera','edX','DataCamp','DataQuest','Kaggle',\n                                'Fastai','Udemy','Linkedin','University']].div(pivot44.Survey_Participants, axis=0) * 100\n\npivot43['order'] = [2,0,6,1,5,3,4]\npivot44['order'] = [2,0,6,1,5,3,4]\npivot43 = pivot43.sort_values(by=['order'])\npivot44 = pivot44.sort_values(by=['order'])\ndel pivot43['order']\ndel pivot44['order']","396bac93":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot43.plot(figsize=(24, 8),title='Role',kind='bar',color=['#00c0ff','#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Education and Preferred Course Medium\\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 8100, 'How Survey Participants Learn', fontsize=20,alpha=0.2)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","3ff8d914":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot44.plot(figsize=(24, 8),title='Role',kind='bar',color=['#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Education and Preferred Course Medium  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\n# #729ECE #FF9E4A #67BF5C #ED665D #AD8BC9 #A8786E #ED97CA #A2A2A2 #CDCC5D #6DCCDA\n\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 56, '% Participants Learn', fontsize=22,alpha=0.2)\nplt.ylim(0,60)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","31ca2273":"df5 = df.copy()","635726e4":"pivot51 = df5.groupby(['ML_Since'])['Count','Algorithm_Regression','Algorithm_Tree','Algorithm_GBM',\n                       'Algorithm_Bayesian','Algorithm_Evolutionary','Algorithm_DNN','Algorithm_CNN',\n                       'Algorithm_GAN','Algorithm_RNN','Algorithm_Transformer'].agg(['sum'])\n#pivot51.index","d2edcfdc":"pivot52 = pivot51.values\n\n# pass in array and columns\npivot53 = pd.DataFrame(pivot52,index=['1-2 years', '10-15 years', '2-3 years', '20+ years', '3-4 years',\n       '4-5 years', '5-10 years', '< 1 years'],\n                       columns=['Survey_Participants','Regression','Tree Based','GBM','Bayesian','Evolutionary',\n                                'DNN','CNN','GAN','RNN','Transformer'])\n\npivot54 = pivot53.copy()\npivot53 = pivot53.rename(columns={'Survey_Participants':'Survey Participants'})\npivot54 = pivot54[['Regression','Tree Based','GBM','Bayesian','Evolutionary',\n                                'DNN','CNN','GAN','RNN','Transformer']].div(pivot54.Survey_Participants, axis=0) * 100\n\npivot53['order'] = [6,1,5,0,4,3,2,7]\npivot54['order'] = [6,1,5,0,4,3,2,7]\npivot53 = pivot53.sort_values(by=['order'])\npivot54 = pivot54.sort_values(by=['order'])\ndel pivot53['order']\ndel pivot54['order']","6db7ab3b":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot53.plot(figsize=(24, 8),title='Role',kind='bar',color=['#00c0ff','#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Machine Learning Experience and Algorithms Used\\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 4200, 'What Algorithms Survey Participants Use', fontsize=20,alpha=0.2)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","9c4da6e6":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot54.plot(figsize=(24, 8),title='Role',kind='bar',color=['#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Machine Learning Experience and Algorithms Used  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\n# #729ECE #FF9E4A #67BF5C #ED665D #AD8BC9 #A8786E #ED97CA #A2A2A2 #CDCC5D #6DCCDA\n\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 92, '% Participants Use these Algoritms', fontsize=22,alpha=0.2)\nplt.ylim(0,100)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","9295a6c9":"df6 = df.copy()","487a2609":"pivot61 = df6.groupby(['Hardware'])['Count','Algorithm_Regression','Algorithm_Tree','Algorithm_GBM',\n                       'Algorithm_Bayesian','Algorithm_Evolutionary','Algorithm_DNN','Algorithm_CNN',\n                       'Algorithm_GAN','Algorithm_RNN','Algorithm_Transformer'].agg(['sum'])\n#pivot61.index","810dee6b":"pivot62 = pivot61.values\n\n# pass in array and columns\npivot63 = pd.DataFrame(pivot62,index=['GPU', 'GPU, TPU Few Times', 'GPU, TPU Multiple Times', 'No GPU\/TPU',\n       'TPU Few Times', 'TPU Multiple Times'],\n                       columns=['Survey_Participants','Regression','Tree Based','GBM','Bayesian','Evolutionary',\n                                'DNN','CNN','GAN','RNN','Transformer'])\n\npivot64 = pivot63.copy()\npivot63 = pivot63.rename(columns={'Survey_Participants':'Survey Participants'})\npivot64 = pivot64[['Regression','Tree Based','GBM','Bayesian','Evolutionary',\n                                'DNN','CNN','GAN','RNN','Transformer']].div(pivot64.Survey_Participants, axis=0) * 100\n    \n    \npivot63['order'] = [4,1,0,5,3,2]\npivot64['order'] = [4,1,0,5,3,2]\npivot63 = pivot63.sort_values(by=['order'])\npivot64 = pivot64.sort_values(by=['order'])\ndel pivot63['order']\ndel pivot64['order']","aeb6ed05":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot63.plot(figsize=(24, 8),title='Role',kind='bar',color=['#00c0ff','#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Hardware and Algorithms Used \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 9200, 'What Algorithms Survey Participants Use', fontsize=20,alpha=0.2)\nplt.legend(fontsize=16,ncol=6,loc='topright')\nplt.show()","bffca841":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot64.plot(figsize=(24, 8),title='Role',kind='bar',color=['#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Hardware and Algorithms Used  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\n# #729ECE #FF9E4A #67BF5C #ED665D #AD8BC9 #A8786E #ED97CA #A2A2A2 #CDCC5D #6DCCDA\n\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 92, '% Participants Use these Algoritms', fontsize=22,alpha=0.2)\nplt.ylim(0,100)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","cbf1f371":"df7 = df.copy()","1b8a2f0c":"pivot71 = df7.groupby(['Recommended_Language'])['Count','Language_Python','Language_R','Language_SQL','Language_C','Language_C++',\n             'Language_Java','Language_Javascript','Language_TypeScript','Language_Bash','Language_MATLAB'].agg(['sum'])\n#pivot71.index","48d16f09":"pivot72 = pivot71.values\n\npivot73 = pd.DataFrame(pivot72,index=['Bash', 'C', 'C++', 'Java', 'Javascript', 'MATLAB', 'None', 'Other',\n       'Python', 'R', 'SQL', 'TypeScript'],\n                       columns=['Survey_Participants','Language_Python','Language_R','Language_SQL',\n                                        'Language_C','Language_C++',\n             'Language_Java','Language_Javascript','Language_TypeScript','Language_Bash','Language_MATLAB'])\npivot74 = pivot73.copy()\npivot73 = pivot73.rename(columns={'Survey_Participants':'Survey Participants'})\n\npivot74 = pivot73[['Language_Python','Language_R','Language_SQL','Language_C','Language_C++',\n             'Language_Java','Language_Javascript','Language_TypeScript','Language_Bash','Language_MATLAB']].div(pivot74.Survey_Participants, axis=0) * 100","4bb2908f":"pivot74=pivot74.rename(columns={'Language_Python':'Python User','Language_R':'R User','Language_SQL':'SQL User',\n                                'Language_C':'C User','Language_C++':'C++ User',\n             'Language_Java':'Java User','Language_Javascript':'Javascript User',\n                                'Language_TypeScript':'Typescript User',\n                                'Language_Bash':'Bash User',\n                                'Language_MATLAB':'MATLAB User'})","0acf8470":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot74.transpose().plot(figsize=(18, 6),kind='line',alpha=0.50,linewidth=2,marker='o',\n                              markersize=10,linestyle='dashed',\n                 color=['#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Recommended Language\\n\", loc=\"center\",size=36,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=2)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=14,color='#008abc')\nplt.yticks(size=12,color='#ffffff')\nplt.ylim(0,100)\nplt.legend(fontsize=14,ncol=6,loc='topright')","dabb350e":"pivot81 = df7.groupby(['Age'])['Count','Language_Python','Language_R','Language_SQL','Language_C','Language_C++',\n             'Language_Java','Language_Javascript','Language_TypeScript','Language_Bash','Language_MATLAB'].agg(['sum'])\n#pivot81.index","684c15a3":"pivot82 = pivot81.values\n\npivot83 = pd.DataFrame(pivot82,index=['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54',\n       '55-59', '60-69', '70+'],\n                       columns=['Survey_Participants','Language_Python','Language_R','Language_SQL',\n                                        'Language_C','Language_C++',\n             'Language_Java','Language_Javascript','Language_TypeScript','Language_Bash','Language_MATLAB'])\npivot84 = pivot83.copy()\npivot83 = pivot83.rename(columns={'Survey_Participants':'Survey Participants'})\n\npivot84 = pivot83[['Language_Python','Language_R','Language_SQL','Language_C','Language_C++',\n             'Language_Java','Language_Javascript','Language_TypeScript','Language_Bash','Language_MATLAB']].div(pivot84.Survey_Participants, axis=0) * 100","d2befd09":"pivot84=pivot84.rename(columns={'Language_Python':'Python User','Language_R':'R User','Language_SQL':'SQL User',\n                                'Language_C':'C User','Language_C++':'C++ User',\n             'Language_Java':'Java User','Language_Javascript':'Javascript User',\n                                'Language_TypeScript':'Typescript User',\n                                'Language_Bash':'Bash User',\n                                'Language_MATLAB':'MATLAB User'})","797ab0c4":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot84.plot(figsize=(18, 6),kind='line',alpha=0.50,linewidth=2,marker='o',\n                              markersize=10,linestyle='dashed',\n                 color=['#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Language Used\\n\", loc=\"center\",size=36,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('Age',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=14,color='#008abc')\nplt.yticks(size=12,color='#ffffff')\nplt.ylim(0,100)\nplt.legend(fontsize=14,ncol=6,loc='topright')","ff42961c":"df9 = df.copy()","31ca8a5d":"pivot91 = df.groupby(['Role'])['Count','Vis_Ggplot','Vis_Matplotlib','Vis_Altair','Vis_Shiny',\n                               'Vis_D3','Vis_Plotly','Vis_Bokeh','Vis_Seaborn','Vis_Geoplotlib',\n                               'Vis_Leaflet'].agg(['sum'])\n#pivot91.index","7bf259a5":"pivot92 = pivot91.values\n\n# pass in array and columns\npivot93 = pd.DataFrame(pivot92,index=['Business\\nAnalyst', 'DBA\/\\nDatabase \\nEngineer', 'Data\\nAnalyst',\n                                    'Data\\nEngineer', 'Data\\nScientist', 'Not\\nEmployed','Other',\n                                      'Product\/Project\\nManager',\n                                    'Research\\nScientist','Software\\nEngineer', 'Statistician','Student'],\n                       columns=['Survey_Participants','Ggplot','Matplotlib','Altair','Shiny',\n                               'D3','Plotly','Bokeh','Seaborn','Geoplotlib',\n                               'Leaflet'])\n\npivot94 = pivot93.copy()\npivot93 = pivot93.rename(columns={'Survey_Participants':'Survey Participants'})\npivot94 = pivot94[['Ggplot','Matplotlib','Altair','Shiny','D3','Plotly','Bokeh','Seaborn','Geoplotlib','Leaflet']].div(pivot94.Survey_Participants, axis=0) * 100\n\n\n\npivot93['order'] = [7,11,4,9,0,6,3,8,5,2,10,1]\npivot94['order'] =  [7,11,4,9,0,6,3,8,5,2,10,1]\npivot93 = pivot93.sort_values(by=['order'])\npivot94 = pivot94.sort_values(by=['order'])\ndel pivot93['order']\ndel pivot94['order']","960939bb":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot93.plot(figsize=(24, 8),title='Role',kind='bar',color=['#00c0ff','#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Job Role and Preferred Data Visualization Tool\\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 3100, 'What Survey Participants Use', fontsize=20,alpha=0.2)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","8a54f21a":"plt.clf()\nsns.set_style(\"whitegrid\")\nax = pivot94.plot(figsize=(24, 8),title='Role',kind='bar',color=['#729ECE','#FF9E4A','#67BF5C','#ED665D','#AD8BC9','#A8786E',\n                                                                '#ED97CA', '#A2A2A2', '#CDCC5D', '#6DCCDA'])\nplt.title(\"Job Role and Preferred Data Visualization Tool  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\n# #535979, #5175a8, #59a9ae, #9aa16f, #f88b7e, #e1adbc, #fce133, #b3e4e5\n# #729ECE #FF9E4A #67BF5C #ED665D #AD8BC9 #A8786E #ED97CA #A2A2A2 #CDCC5D #6DCCDA\n\nplt.xlabel('',color='#34495E',fontsize=20)\nplt.ylabel('',color='#34499E',fontsize=2)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=12,color='#939497')\nplt.text(0, 66, '% Participants Use', fontsize=22,alpha=0.2)\nplt.ylim(0,80)\nplt.legend(fontsize=16,ncol=5,loc='topright')\nplt.show()","b3c90852":"df = multi_encoding(df,'Data_Analysis_Response')\ndf = multi_encoding(df,'Age')\ndf = multi_encoding(df,'Country')\ndf = multi_encoding(df,'Education')\ndf = multi_encoding(df,'Role')\ndf = multi_encoding(df,'Company_Size')\ndf = multi_encoding(df,'DS_Team_Size')\ndf = multi_encoding(df,'ML_in_Business')\ndf = multi_encoding(df,'Salary')\ndf = multi_encoding(df,'ML_Spend')\ndf = multi_encoding(df,'Writing_Code')\ndf = multi_encoding(df,'Recommended_Language')\ndf = multi_encoding(df,'ML_Since')","a0fb743e":"dfcorr = df[['Role:Data Scientist','Role:Student','Role:Software Engineer','Role:Data Analyst','Role:Research Scientist',\n              'Education:Doctoral degree','Education:Master\u2019s degree','Education:Bachelor\u2019s degree',\n              'ML_Since:20+ years','ML_Since:10-15 years','ML_Since:5-10 years','ML_Since:4-5 years','ML_Since:3-4 years',\n              'ML_Since:2-3 years','ML_Since:1-2 years','ML_Since:< 1 years', \n              'Language_Python','Language_R','Language_SQL','Language_C','Language_C++',\n             'Language_Java','Language_MATLAB']].copy()\n             \n\ndfcorr = dfcorr.rename(columns={'Role:Data Scientist':'Data Scientist','Role:Student':'Student',\n                                'Role:Software Engineer':'Software Engineer','Role:Data Analyst':'Data Analyst',\n                                'Role:Research Scientist':'Research Scientist','Education:Doctoral degree':'Doctoral Degree',\n                                'Education:Master\u2019s degree':'Master\u2019s degree','Education:Bachelor\u2019s degree':'Bachelor\u2019s degree',\n                                'ML_Since:20+ years':'20+ Years in ML','ML_Since:10-15 years':'10-15 Years in ML',\n                                'ML_Since:5-10 years':'5-10 Years in ML','ML_Since:4-5 years':'4-5 Years in ML',\n                                'ML_Since:3-4 years':'3-4 Years in ML','ML_Since:2-3 years':'2-3 Years in ML',\n                                'ML_Since:1-2 years':'1-2 Years in ML','ML_Since:< 1 years':'< 1 Year in ML', \n                                'Language_Python':'Language: Python','Language_R':'Language: R',\n                                'Language_SQL':'Language: SQL','Language_C':'Language C','Language_C++':'Language: C++',\n                                'Language_Java':'Language: Java','Language_MATLAB':'Language: MATLAB'})\n\ndfcorr1 = dfcorr.corr()","65b0758b":"# Correlation Plot 1\n\nimport matplotlib as mpl\nfrom matplotlib import cm as cm\n\nlabel_size = 20\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\n\nsns.set_style(\"whitegrid\")\nmask = np.zeros_like(dfcorr1, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nplt.figure(figsize = (22,18))\n\ncmap = sns.diverging_palette(10,220, as_cmap = True)  #10,133\n\n#Draw\nsns.heatmap(dfcorr1, mask = mask, vmax = .5, vmin = -.5, center = 0,cmap=cmap,\n           annot = True, square = True,linewidth = .5, cbar_kws = {'shrink':.5}, fmt= '.2f')\nplt.text(8, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html', fontsize=16,alpha=0.2)\nplt.title(\"Role, Education, Experience & Language Used\", loc = 'center', size = 32, color = '#34495E')\n#plt.savefig('Survey Data Correlation Matrix 1'+'.png', bbox_inches = 'tight')","56dcab8e":"dfcorr = df[['Language_Python','Language_R','Language_SQL','Language_C','Language_C++','Language_Java',\n             'Language_MATLAB','Recommended_Language:Python','Recommended_Language:R',\n             'Recommended_Language:SQL','Recommended_Language:C',\n             'Recommended_Language:C++','Recommended_Language:Java',\n             'Recommended_Language:MATLAB']].copy()\n             \n\ndfcorr = dfcorr.rename(columns={'Language_Python': 'Used:Python','Language_R':'Used:R',\n             'Language_SQL': 'Used:SQL','Language_C':'Used:C',\n             'Language_C++':'Used:C++','Language_Java':'Used:Java',\n             'Language_MATLAB':'Used:MATLAB','Recommended_Language:Python': 'Recommended:Python',\n             'Recommended_Language:R':'Recommended:R',\n             'Recommended_Language:SQL':'Recommended:SQL','Recommended_Language:C':'Recommended:C',\n             'Recommended_Language:C++':'Recommended:C++','Recommended_Language:Java':'Recommended:Java',\n             'Recommended_Language:MATLAB':'Recommended:MATLAB'})\n\ndfcorr5 = dfcorr.corr()","3547bce0":"label_size = 20\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\n\nsns.set_style(\"whitegrid\")\nmask = np.zeros_like(dfcorr5, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nplt.figure(figsize = (18,14))\n\ncmap = sns.diverging_palette(10,220, as_cmap = True)  #10,133\n\n#Draw\nsns.heatmap(dfcorr5, mask = mask, vmax = .7, vmin = -.5, center = 0,cmap=cmap,\n           annot = True, square = True,linewidth = .5, cbar_kws = {'shrink':.5}, fmt= '.2f')\nplt.text(8, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html', fontsize=16,alpha=0.2)\nplt.title(\"Language Used vs Recommended Language\", loc = 'center', size = 32, color = '#34495E')\n#plt.savefig('Survey Data Correlation Matrix 1'+'.png', bbox_inches = 'tight')","eb9832b0":"dfcorr = df[['ML_Spend:> $100,000 ($USD)','ML_Spend:$10,000-$99,999','ML_Spend:$1000-$9,999',\n              'ML_Spend:$100-$999','ML_Spend:$1-$99',\n              'Cloud_Platform_GCP','Cloud_Platform_AWS','Cloud_Platform_Azure','Cloud_Platform_IBM',\n              'Cloud_Platform_Alibaba','Cloud_Platform_Salesforce','Cloud_Platform_Oracle','Cloud_Platform_SAP',\n              'Cloud_Platform_VMware','Cloud_Platform_RedHat',\n              'Cloud_Product_AWS_EC2','Cloud_Product_Google_ComputeEngine','Cloud_Product_AWS_Lambda',\n              'Cloud_Product_Azure_VM','Cloud_Product_Google_AppEngine','Cloud_Product_Google_CloudFunctions',\n              'Cloud_Product_AWS_EBS','Cloud_Product_Google_Kubernetes','Cloud_Product_AWS_Batch','Cloud_Product_Azure_Container']].copy()\n            \n             \ndfcorr = dfcorr.rename(columns={'ML_Spend:> $100,000 ($USD)':'Money:> 100,000 USD',\n                                'ML_Spend:$10,000-$99,999': 'Money: 10,000-99,999 USD',\n                                'ML_Spend:$1000-$9,999':'Money: 1000-9,999 USD',\n                                'ML_Spend:$100-$999':'Money: 100-999 USD',\n                                'ML_Spend:$1-$99':'Money: 1-99 USD',\n                                'Cloud_Platform_GCP':'Cloud Platform: GCP','Cloud_Platform_AWS':'Cloud Platform: AWS',\n                                'Cloud_Platform_Azure':'Cloud Platform: Azure','Cloud_Platform_IBM':'Cloud Platform: IBM',\n                                'Cloud_Platform_Alibaba':'Cloud Platform: Alibaba',\n                                'Cloud_Platform_Salesforce':'Cloud Platform: Salesforce',\n                                'Cloud_Platform_Oracle':'Cloud Platform: Oracle','Cloud_Platform_SAP':'Cloud Platform: SAP',\n                                'Cloud_Platform_VMware':'Cloud Platform: VMware','Cloud_Platform_RedHat':'Cloud Platform: RedHat',\n                                'Cloud_Product_AWS_EC2':'AWS EC2',\n                                'Cloud_Product_Google_ComputeEngine':'Google ComputeEngine',\n                                'Cloud_Product_AWS_Lambda':'AWS Lambda','Cloud_Product_Azure_VM':'Azure VM',\n                                'Cloud_Product_Google_AppEngine':'Google AppEngine',\n                                'Cloud_Product_Google_CloudFunctions':'Google CloudFunctions',\n                                'Cloud_Product_AWS_EBS':'AWS EBS',\n                                'Cloud_Product_Google_Kubernetes':'Google Kubernetes',\n                                'Cloud_Product_AWS_Batch':'AWS Batch',\n                                'Cloud_Product_Azure_Container':'Azure Container'})\n\ndfcorr2 = dfcorr.corr()","fc50fc87":"# Correlation Plot 2\n\nlabel_size = 20\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\n\nsns.set_style(\"whitegrid\")\nmask = np.zeros_like(dfcorr2, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nplt.figure(figsize = (22,18))\n\ncmap = sns.diverging_palette(10,220, as_cmap = True)  #10,133\n\n#Draw\nsns.heatmap(dfcorr2, mask = mask, vmax = .6, vmin = -.1, center = 0,cmap=cmap,\n           annot = True, square = True, linewidth = .5, cbar_kws = {'shrink':.5}, fmt= '.2f')\nplt.text(8, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html', fontsize=16,alpha=0.2)\nplt.title(\"ML Spend vs Cloud Platform, Product\", loc = 'center', size = 32, color = '#34495E')\n#plt.savefig('Survey Data Correlation Matrix 2'+'.png', bbox_inches = 'tight')\n","b23ef339":"dfcorr = df[[ 'Cloud_Platform_GCP','Cloud_Platform_AWS','Cloud_Platform_Azure','Cloud_Platform_IBM',\n              'Cloud_Platform_Alibaba','Cloud_Platform_Salesforce','Cloud_Platform_Oracle','Cloud_Platform_SAP',\n              'Cloud_Platform_VMware','Cloud_Platform_RedHat',\n              'BigData_Google_BigQuery','BigData_AWS_Redshift','BigData_Google_Databricks','BigData_AWS_EMR',\n              'BigData_Teradata','BigData_MSAS','BigData_Google_CloudDataflow','BigData_AWS_Athena',\n              'BigData_AWS_Kinesis','BigData_Google_CloudPub',\n              'RDB_MySQL','RDB_PostgresSQL','RDB_SQLite','RDB_MS_SQLServer','RDB_Oracle','RDB_MS_Access','RDB_AWS_RDS',\n              'RDB_AWS_DynamoDB','RDB_Azure_SQL','RDB_Google_CloudSQL']].copy()\n             \ndfcorr = dfcorr.rename(columns={'Cloud_Platform_GCP':'Cloud Platform: GCP','Cloud_Platform_AWS':'Cloud Platform: AWS',\n                                'Cloud_Platform_Azure':'Cloud Platform: Azure','Cloud_Platform_IBM':'Cloud Platform: IBM',\n                                'Cloud_Platform_Alibaba':'Cloud Platform: Alibaba',\n                                'Cloud_Platform_Salesforce':'Cloud Platform: Salesforce',\n                                'Cloud_Platform_Oracle':'Cloud Platform: Oracle','Cloud_Platform_SAP':'Cloud Platform: SAP',\n                                'Cloud_Platform_VMware':'Cloud Platform: VMware','Cloud_Platform_RedHat':'Cloud Platform: RedHat',\n                                'BigData_Google_BigQuery':'BigData: Google BigQuery',\n                                'BigData_AWS_Redshift': 'BigData: AWS Redshift',\n                                'BigData_Google_Databricks':'BigData: G Databricks',\n                                'BigData_AWS_EMR':'BigData: AWS EMR',\n                                'BigData_Teradata':'BigData: Teradata','BigData_MSAS':'BigData: MSAS',\n                                'BigData_Google_CloudDataflow':'BigData: G CloudDataflow',\n                                'BigData_AWS_Athena':'BigData: AWS Athena',\n                                'BigData_AWS_Kinesis':'BigData: AWS Kinesis',\n                                'BigData_Google_CloudPub':'BigData: G CloudPub',\n                                'RDB_MySQL':'RDB MySQL','RDB_PostgresSQL':'RDB PostgresSQL','RDB_SQLite':'RDB SQLite',\n                                'RDB_MS_SQLServer':'RDB MS SQLServer','RDB_Oracle':'RDB Oracle',\n                                'RDB_MS_Access':'RDB MS Access','RDB_AWS_RDS':'RDB AWS RDS',\n                                'RDB_AWS_DynamoDB':'RDB AWS DynamoDB','RDB_Azure_SQL':'RDB Azure SQL',\n                                'RDB_Google_CloudSQL':'RDB Google CloudSQL'})\n\ndfcorr3 = dfcorr.corr()","ef51fe1a":"# Correlation Plot 3\n\nlabel_size = 18\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\n\nsns.set_style(\"whitegrid\")\nmask = np.zeros_like(dfcorr3, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nplt.figure(figsize = (22,18))\n\ncmap = sns.diverging_palette(10,220, as_cmap = True)  #10,133\n\n#Draw\nsns.heatmap(dfcorr3, mask = mask, vmax = .5, vmin = -.1, center = 0,cmap=cmap,\n           annot = True, square = True, linewidth = .5, cbar_kws = {'shrink':.5}, fmt= '.2f')\nplt.text(8, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html', fontsize=16,alpha=0.2)\nplt.title(\"Cloud Platform vs Data Products\", loc = 'center', size = 32, color = '#34495E')\n#plt.savefig('Survey Data Correlation Matrix 3'+'.png', bbox_inches = 'tight')\n","5291fdc5":"dfcorr = df[[ 'Cloud_Platform_GCP','Cloud_Platform_AWS','Cloud_Platform_Azure','Cloud_Platform_IBM',\n              'Cloud_Platform_Alibaba','Cloud_Platform_Salesforce','Cloud_Platform_Oracle','Cloud_Platform_SAP',\n              'Cloud_Platform_VMware','Cloud_Platform_RedHat',\n              'ML_Product_SAS','ML_Product_Cloudera','ML_Product_Azure_Studio',\n              'ML_Product_Google_Cloud_MLEngine','ML_Product_Google_Cloud_Vision','ML_Product_Google_SpeechtoText',\n              'ML_Product_Google_Cloud_NaturalLanguage','ML_Product_Rapidminer','ML_Product_Google_Cloud_Translation',\n              'ML_Product_AWS_Sagemaker',\n              'AutoML_Google','AutoML_H2O','AutoML_Databricks','AutoML_DataRobot',\n              'AutoML_Tpot','AutoML_Auto-Keras','AutoML_Auto-Sklearn','AutoML_Auto_ml','AutoML_Xcessiv','AutoML_MLbox'\n]].copy()\n             \ndfcorr = dfcorr.rename(columns={'Cloud_Platform_GCP':'Cloud Platform: GCP','Cloud_Platform_AWS':'Cloud Platform: AWS',\n                                'Cloud_Platform_Azure':'Cloud Platform: Azure','Cloud_Platform_IBM':'Cloud Platform: IBM',\n                                'Cloud_Platform_Alibaba':'Cloud Platform: Alibaba',\n                                'Cloud_Platform_Salesforce':'Cloud Platform: Salesforce',\n                                'Cloud_Platform_Oracle':'Cloud Platform: Oracle','Cloud_Platform_SAP':'Cloud Platform: SAP',\n                                'Cloud_Platform_VMware':'Cloud Platform: VMware','Cloud_Platform_RedHat':'Cloud Platform: RedHat',\n                                'ML_Product_SAS':'ML SAS','ML_Product_Cloudera':'ML Cloudera',\n                                'ML_Product_Azure_Studio':'ML Azure Studio',\n                                'ML_Product_Google_Cloud_MLEngine':'ML G MLEngine',\n                                'ML_Product_Google_Cloud_Vision':'ML G Cloud Vision',\n                                'ML_Product_Google_SpeechtoText':'ML G SpeechtoText',\n                                'ML_Product_Google_Cloud_NaturalLanguage':'ML G NaturalLanguage',\n                                'ML_Product_Rapidminer':'ML Rapidminer',\n                                'ML_Product_Google_Cloud_Translation':'ML G Cloud Tranlation',\n                                'ML_Product_AWS_Sagemaker':'ML AWS Sagemaker',\n                                'AutoML_Google':'AutoML Google','AutoML_H2O':'AutoML H2O',\n                                'AutoML_Databricks':'AutoML Databricks','AutoML_DataRobot':'AutoML DataRobot',\n                                'AutoML_Tpot':'AutoML Tpot','AutoML_Auto-Keras':'AutoML Auto-Keras',\n                                'AutoML_Auto-Sklearn':'AutoML Auto-Sklearn','AutoML_Auto_ml':'AutoML Auto_ml',\n                                'AutoML_Xcessiv':'AutoML Xcessiv','AutoML_MLbox':'AutoML MLbox'})\n\ndfcorr4 = dfcorr.corr()","0d76e3e4":"# Correlation Plot 4\n\nlabel_size = 18\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\n\nsns.set_style(\"whitegrid\")\nmask = np.zeros_like(dfcorr4, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nplt.figure(figsize = (22,18))\n\ncmap = sns.diverging_palette(10,220, as_cmap = True)  #10,133\n\n#Draw\nsns.heatmap(dfcorr4, mask = mask, vmax = .5, vmin = -.1, center = 0,cmap=cmap,\n           annot = True, square = True, linewidth = .5, cbar_kws = {'shrink':.5}, fmt= '.2f')\nplt.text(8, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html', fontsize=16,alpha=0.2)\nplt.title(\"Cloud Platform vs Machine Learning Products\", loc = 'center', size = 32, color = '#34495E')\n#plt.savefig('Survey Data Correlation Matrix 4'+'.png', bbox_inches = 'tight')\n","a3fdfc17":"from IPython.display import Image\nimport os\n!ls ..\/input\/","2e721a4d":"Image(\"..\/input\/kaggle2019surveysalaryusandindia\/Course Preference.png\")","bf1b39ce":"Image(\"..\/input\/kaggle2019surveysalaryusandindia\/ML Algorithms and Techniques used.png\")","f54aa12c":"#us_salary_summary = pd.read_csv('..\/input\/kaggle2019surveysalaryusandindia\/us_salary_summary.csv')\nImage(\"..\/input\/kaggle2019surveysalaryusandindia\/US Salary.png\")","0771da8b":"Image(\"..\/input\/kaggle2019surveysalaryusandindia\/Salary_us.png\")","99e804ea":"Image(\"..\/input\/kaggle2019surveysalaryusandindia\/Salary_us2.png\")","7dc2ef2e":"#india_salary_summary = pd.read_csv('..\/input\/kaggle2019surveysalaryusandindia\/india_salary_summary.csv')\nImage(\"..\/input\/kaggle2019surveysalaryusandindia\/India Salary.png\")","aa470fcd":"Image(\"..\/input\/kaggle2019surveysalaryusandindia\/Salary_india.png\")","3aee1b95":"Image(\"..\/input\/kaggle2019surveysalaryusandindia\/Salary_india2.png\")","c189d242":"salary = pd.read_csv('..\/input\/kaggle2019surveysalaryusandindia\/encoded_salary_data.csv')\nprint('Shape :', salary.shape)\nsalary.head(2)","32aad142":"sns.set_style(\"whitegrid\")\n\nlabel_size = 12\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\nmpl.rcParams['axes.labelsize'] = 14\n\n#plt.figure(figsize=(8,8))\ncolumns = ['Compensatio','Company Size','ML Maturity','DS Team','ML Money Spent','Used ML','Coding Experience','Job Title']\nsns.pairplot(salary[columns],size = 2,diag_kind='kde',markers=\"+\",hue='Job Title',palette=\"tab10\",\n            plot_kws = {'alpha': 0.6,'s': 36,'edgecolor': 'k'})\n#plt.legend(fontsize=14,title_fontsize=18)\n#plt.suptitle('Salary Correlation with Company and Experience \\n\\n',size = 28,color='#34495E',alpha=0.8)\n#plt.title(\"Salary Correlation with Company and Experience\", loc=\"center\",size=18,color='#34495E',alpha=0.6)\nplt.show()","922fc91b":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n\nax = sns.boxplot(x=\"Company Size\", y=\"Compensatio\", data=salary, hue='ML Maturity',color='#eeeeee', palette=\"Blues\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \nax = sns.stripplot(x='Company Size', y='Compensatio', data=salary, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n\nplt.title(\"Compensation by Company Size, ML Maturity Level  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\nplt.xlabel('Company Size',color='#34495E',fontsize=20) \nplt.ylabel('Compensation',color='#34495E',fontsize=20)\nplt.xticks(size=15,color='#008abc',rotation='horizontal', wrap=True)  \nplt.yticks(size=15,color='#006600')\nplt.text(2.5, 530000, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\n#plt.ylim(0,200)\nplt.legend(loc=\"upper right\",fontsize=14,ncol=5,title='ML Maturity Level of Company',title_fontsize=22,framealpha=0.99)\nplt.show()","fed8cb8e":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n\nax = sns.boxplot(x=\"Company Size\", y=\"Compensatio\", data=salary, hue='DS Team',color='#eeeeee', palette=\"Wistia\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \nax = sns.stripplot(x='Company Size', y='Compensatio', data=salary, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n\nplt.title(\"Compensation by Company Size, DS Team Size  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\nplt.xlabel('Company Size',color='#34495E',fontsize=20) \nplt.ylabel('Compensation',color='#34495E',fontsize=20)\nplt.xticks(size=15,color='#008abc',rotation='horizontal', wrap=True)  \nplt.yticks(size=15,color='#006600')\n#plt.ylim(0,200)\nplt.text(2.5, 530000, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\nplt.legend(loc=\"upper right\",fontsize=14,ncol=7,title='DS Team Size',title_fontsize=22,framealpha=0.99)\nplt.show()","8b275c68":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n\nax = sns.boxplot(x=\"Used ML\", y=\"Compensatio\", data=salary, hue='ML Money Spent',color='#666666', palette=\"Greens\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \nax = sns.stripplot(x='Used ML', y='Compensatio', data=salary, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n\nplt.title(\"Compensation by Years of ML Use and Money Spent  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\nplt.xlabel('ML Experience in Years',color='#34495E',fontsize=20) \nplt.ylabel('Compensation',color='#34495E',fontsize=20)\nplt.xticks(size=15,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=15,color='#006600')\n#plt.ylim(0,200)\nplt.text(4.5, 530000, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\nplt.legend(loc=\"upper right\",fontsize=14,ncol=7,title='ML Money Spent',title_fontsize=22,framealpha=0.99)\nplt.show()","b1b87c28":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n\nax = sns.boxplot(x=\"Coding Experience\", y=\"Compensatio\", data=salary, hue='ML Money Spent',color='#666666', palette=\"Greens\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \nax = sns.stripplot(x='Coding Experience', y='Compensatio', data=salary, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n\nplt.title(\"Compensation by Coding Experience and Money Spent on ML  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\nplt.xlabel('Coding Experience in Years',color='#34495E',fontsize=20) \nplt.ylabel('Compensation',color='#34495E',fontsize=20)\nplt.xticks(size=15,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=15,color='#006600')\n#plt.ylim(0,200)\nplt.text(3.5, 530000, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\nplt.legend(loc=\"upper right\",fontsize=14,ncol=7,title='ML Money Spent',title_fontsize=22,framealpha=0.99)\nplt.show()","31000c3e":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n\nax = sns.boxplot(x=\"Job Title\", y=\"Compensatio\",data=salary,color='#666666', palette=\"tab10\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \nax = sns.stripplot(x='Job Title', y='Compensatio', data=salary, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n\nplt.title(\"Compensation by Job Title  \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\nplt.xlabel('',color='#34495E',fontsize=20) \nplt.ylabel('Compensation',color='#34495E',fontsize=20)\nplt.xticks(size=14,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=15,color='#006600')\n#plt.ylim(0,200)\nplt.text(5.5, 480000, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\n#plt.legend(loc=\"upper right\",fontsize=14,ncol=3,title='Job Title',title_fontsize=22,framealpha=0.99)\nplt.show()","ed34bf8d":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n\nax = sns.boxplot(x=\"Job Title\", y=\"Compensatio\", data=salary,hue=\"Education\",color='#666666', palette=\"plasma\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \nax = sns.stripplot(x='Job Title', y='Compensatio', data=salary, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n\nplt.title(\"Compensation by Job Title and Education \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\nplt.xlabel('',color='#34495E',fontsize=20) \nplt.ylabel('Compensation',color='#34495E',fontsize=20)\nplt.xticks(size=14,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=15,color='#006600')\n#plt.ylim(0,200)\nplt.text(5.5, 510000, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\nplt.legend(loc=\"upper right\",fontsize=14,ncol=4,title='Education',title_fontsize=22,framealpha=0.99)\nplt.show()","36ba1f7d":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n\nax = sns.boxplot(x=\"Job Title\", y=\"Compensatio\", data=salary,hue=\"Data Analysis Tool\",color='#666666', palette=\"tab10\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \nax = sns.stripplot(x='Job Title', y='Compensatio', data=salary, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n\nplt.title(\"Compensation by Job Title and Primary Data Analysis Tool \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\nplt.xlabel('',color='#34495E',fontsize=20) \nplt.ylabel('Compensation',color='#34495E',fontsize=20)\nplt.xticks(size=14,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=15,color='#006600')\n#plt.ylim(0,500000)\nplt.text(5.5, 510000, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\nplt.legend(loc=\"upper right\",fontsize=14,ncol=4,title='Primary Data Analysis Tool',title_fontsize=22,framealpha=0.99)\nplt.show()","4c6ddd28":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n\nax = sns.boxplot(x=\"Used ML\", y=\"Compensatio\", data=salary,hue=\"Coding Experience\",color='#666666', palette=\"Blues\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \nax = sns.stripplot(x='Used ML', y='Compensatio', data=salary, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n\nplt.title(\"Compensation by ML Experience and Coding Experience \\n\", loc=\"center\",size=32,color='#34495E',alpha=0.6)\nplt.xlabel('ML Experience',color='#34495E',fontsize=20) \nplt.ylabel('Compensation',color='#34495E',fontsize=20)\nplt.xticks(size=14,color='#008abc',rotation='horizontal', wrap=True)\nplt.yticks(size=15,color='#006600')\n#plt.ylim(0,500000)\nplt.text(5.5, 510000, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\nplt.legend(loc=\"upper right\",fontsize=14,ncol=4,title='Coding Experience',title_fontsize=22,framealpha=0.99)\nplt.show()","c0300fcf":"sns.set_style(\"whitegrid\")\n\nlabel_size = 12\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\nmpl.rcParams['axes.labelsize'] = 14\n\nplt.figure(figsize=(16,16))\ncolumns = ['Job Title','Compensatio','ML Money Spent','Used ML','Coding Experience']\nsns.pairplot(salary[columns],size = 2,diag_kind='kde',markers=\"o\",hue='Job Title',palette=\"tab10\",\n            plot_kws = {'alpha': 0.4,'s': 26,'edgecolor': '#999999'})\n#plt.legend(fontsize=14,title_fontsize=18)\n#plt.suptitle('Salary Correlation with Company and Experience \\n\\n',size = 28,color='#34495E',alpha=0.8)\n#plt.title(\"Salary Correlation with Coding Experience and ML Experience\", size=18,color='#34495E',alpha=0.9)\nplt.show()","30bbf4a6":"f, axes = plt.subplots(1, 1, figsize=(10, 8), sharex=True, sharey=True)\n\ns = np.linspace(0, 3, 10)\n\n#cmap = sns.cubehelix_palette(start=0, light=1, as_cmap=True)\ncmap = 'plasma' \nsns.kdeplot(salary['Coding Experience'], salary['Compensatio'], cmap=cmap, shade=True)\naxes.set(xlim=(0, 23), ylim=(0, 120000),title = 'Compensation by Coding Experience')\nf.tight_layout()\n\nf, axes = plt.subplots(1, 1, figsize=(10, 8), sharex=True, sharey=True)\n#cmap = sns.cubehelix_palette(start=.5, light=1, as_cmap=True)\ncmap = 'plasma' \nsns.kdeplot(salary['Used ML'], salary['Compensatio'], cmap=cmap, shade=True)\naxes.set(xlim=(0, 23), ylim=(0, 120000),title = 'Compensation by ML Experience')\nf.tight_layout()\n\nf, axes = plt.subplots(1, 1, figsize=(10, 8), sharex=True, sharey=True)\n#cmap = sns.cubehelix_palette(start=1, light=1, as_cmap=True)\ncmap = 'plasma'\nsns.kdeplot(salary['ML Money Spent'], salary['Compensatio'], cmap=cmap, shade=True)\naxes.set(xlim=(0, 10000), ylim=(0, 120000),title = 'Compensation by ML Money Spent')\nf.tight_layout()\n\nf, axes = plt.subplots(1, 1, figsize=(10, 8), sharex=True, sharey=True)\n#cmap = sns.cubehelix_palette(start=1.5, light=1, as_cmap=True)\ncmap = 'plasma'\nsns.kdeplot(salary['Company Size'], salary['Compensatio'], cmap=cmap, shade=True)\naxes.set(xlim=(0, 21000), ylim=(0, 120000),title = 'Compensation by Company Size')\nf.tight_layout()\n","7a27cfd2":"import plotly.express as px\nfig = px.scatter(salary, x=\"Used ML\",y='Compensatio', \n                        color=\"Job Title\",\n                 size='ML Money Spent', hover_name=\"Compensatio\",trendline=\"ols\",\n                 template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","69234b71":"def num_scaling(num_var):\n    \"\"\" Function to scale numeric variables \"\"\"\n    scaler = MinMaxScaler()\n    num_var = num_var.fillna(0)\n    num_var = scaler.fit_transform(num_var)\n    #print(num_var.max())\n    return num_var\n\n#for i in range(len( salary.columns)):\nfor i in range(46):        \n    var = salary.columns[i]\n    #print(var)\n    salary[[var]]   = num_scaling(salary[[var]])  \n    \nsalary_corr1 = salary[salary.columns[0:24]].corr()\nsalary_corr2 = salary[['Compensatio','Advanced statistical software','Cloud-based Data Analysis','Basic statistical software',\n                       'Business intelligence software','Local Data Analysis','Other Data Analysis','Role Data Analysis',\n                       'Role Build Data Infra','Role_BuildPrototype','Role Build ML','Role Experiment ML',\n                       'Role Research ML','Python','R','SQL','C','C++','Java','Javascript',\n                       'TypeScript','Bash','MATLAB']] .corr()","5bf5d22c":"# Correlation Plot 5\n\nlabel_size = 18\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\n\nsns.set_style(\"whitegrid\")\nmask = np.zeros_like(salary_corr1, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nplt.figure(figsize = (22,18))\n\ncmap = sns.diverging_palette(10,220, as_cmap = True)  #10,133\n\n#Draw\nsns.heatmap(salary_corr1, mask = mask, vmax = .4, vmin = -.5, center = 0,cmap=cmap,\n           annot = True, square = True, linewidth = .5, cbar_kws = {'shrink':.5}, fmt= '.2f')\nplt.text(8, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html', fontsize=16,alpha=0.2)\nplt.title(\"Compensation and your Profile\", loc = 'center', size = 32, color = '#34495E')\n#plt.savefig('Survey Data Correlation Matrix 5'+'.png', bbox_inches = 'tight')","64b9943a":"# Correlation Plot 6\n\nlabel_size = 18\nmpl.rcParams['xtick.labelsize'] = label_size\nmpl.rcParams['ytick.labelsize'] = label_size\n\nsns.set_style(\"whitegrid\")\nmask = np.zeros_like(salary_corr2, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nplt.figure(figsize = (22,18))\n\ncmap = sns.diverging_palette(10,220, as_cmap = True)  #10,133\n\n#Draw\nsns.heatmap(salary_corr2, mask = mask, vmax = .5, vmin = -.4, center = 0,cmap=cmap,\n           annot = True, square = True, linewidth = .5, cbar_kws = {'shrink':.5}, fmt= '.2f')\nplt.text(8, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html', fontsize=16,alpha=0.2)\nplt.title(\"Compensation and your Work\", loc = 'center', size = 32, color = '#34495E')\n#plt.savefig('Survey Data Correlation Matrix 6'+'.png', bbox_inches = 'tight')","a6c20294":"dfclus = df.copy()","20458a50":"def multi_encoding2(df,mul_var_name):\n    \"\"\" Function to encode multi class variables \"\"\"\n    df[mul_var_name] = df[mul_var_name].fillna('')\n    df[mul_var_name] = df[mul_var_name].astype('category')\n    print(('Before Encoding: '+ str(mul_var_name)),df[mul_var_name].unique())\n    bn = LabelBinarizer()\n    mul_var_BN = bn.fit_transform(df[mul_var_name])\n    l = ['' for i in range(len(bn.classes_))]\n    for i in range(len(bn.classes_)):\n        l[i] = (str(mul_var_name)+(':')+str(bn.classes_[i]))\n    df = pd.concat([df, pd.DataFrame(mul_var_BN, columns=l)], axis=1)\n    print('Columns Added : ', l)\n    del df[mul_var_name]\n    del mul_var_BN\n    return df","51362a56":"dfclus = multi_encoding2(dfclus,'Gender')\ndfclus = multi_encoding2(dfclus,'Country')\ndfclus = multi_encoding2(dfclus,'Education')\ndfclus = multi_encoding2(dfclus,'Role')\ndfclus = multi_encoding2(dfclus,'ML_in_Business')","480f49bd":"dfclus.head(2)","197dd95d":"#Feature Encoding, Normalization","4c4384c8":"#Test Train Split","bff6a902":"#Random Forest Regressor Model","aa2daa76":"questions","c14e7e08":"answer_1     =  ''\nanswer_2     =  ''\nanswer_3     =  ''\nanswer_4     =  ''\nanswer_5     =  ''\nanswer_6     =  ''\nanswer_7     =  ''\nanswer_8     =  ''\nanswer_9     =  ''\nanswer_10    =  ''\n\n#### Etc.","1d9cbcdc":"#Prediction","eb13ffaa":"#Likely_Salary_Range =","be073970":"# <a>1.9 What is the relationship of Age and Programming Language Used?<\/a>","c4028965":"# <a>1.5 What is the Relationship with Choice of Course and Education Level?<\/a>","e98ac094":"## <a>2.1.2 India Salary Summary<\/a>","752aa6a6":"Factors that influence more compensation are:<font color=\"#67BF5C\"><b>\n* Usage of Cloud based Data Analysis\n* More involvement in Data Analysis, Engineering and ML work\n* Usage of BI Software (people at executive level)<\/b><\/font>\n\nAnd<font color=\"#67BF5C\"><b>\n* Compensation's negative correlation with Pyton<\/b><\/font>\ncan simply mean more yongsters are taking up Python and Python is not causing less compensation.","126f1458":"# <a><font color=\"#eeaa00\">1. The State of ML and DS in 2019<\/font><\/a>","6904bb6c":"## <a>1.16.1 Course Preference Summary<\/a>","f76ff2c3":"> ","4e2de7e2":"# <a>2.1 US and India Salary Summary<\/a>","f82364a1":"# <a><font color=\"#eeaa00\">2. Salary in 2019<\/font><\/a>","64a21f26":"# <a>1.1 High Level Summary of Survey Participants.<\/a>","73ea8162":"# <a>1.15 What are the relationships between prefered Cloud Platforms and ML Products?<\/a>","e62e830c":"# Analysis of Machine Learning and Data Science State in 2019\n### Based on Kaggle 2019 Survey Data\n\n\n## <a>Objective<\/a>\n> ### *1. Analysis of the 2019 Kaggle DS & ML Survey Data*\n> ### *2. Salary in 2019*\n> ### *3. Next Step: Salary Prediction Model*","853b619e":"# <a>3.1 Salary Prediction Model<\/a>","06d1e343":"# <a>1.11 What are the relationships of preferred Languages with Role and Education?<\/a>","a12fb4da":"#### <a>US and India Salary Summary Data is uploaded in <\/a>\nhttps:\/\/www.kaggle.com\/kathakaliseth\/kaggle2019surveysalaryusandindia\n\n1. Plot Courtesy: http:\/\/corybrunson.github.io\/ggalluvial\/","733783d2":"## <a>2.1.1 US Salary Summary<\/a>","0896fd72":"# <a>1.7 What is the relationship with Hardware used and preferred ML Algorithms?<\/a>","98c9dc6f":"# <a>1.3 Who performs what DS\/ML activity?<\/a>\nSo what are preferred Data Science and Machine Learning media. What youngstr's prefer. Is there any difference what Female Data Scientists prefer vs. Male Data Scientists.","323730d3":"# <a><font color=\"#eeaa00\">3. Next Step: Salary Predictor<\/font><\/a>","28e75e1d":"## <font color='#aaffaa'>Pleae Upvote if you like this Kernel<\/font>","1242926d":"# <a>1.6 What are preferred ML Algorithms for participants at various experience level?<\/a>","2d536227":"# <a>1.12 What are the relationships of Launguage Used vs Recommended Language?<\/a>","47c1018e":"## <a>1.16.2 ML Algorithms and Techniques Summary<\/a>","bd73d38e":"# <a>1.16 Analysis of Prefered Courses and ML<\/a>\n#### <a>Summary Graphics is uploaded in <\/a>\nhttps:\/\/www.kaggle.com\/kathakaliseth\/kaggle2019surveysalaryusandindia\n\n<i>Summary is created with Pivot Table<\/i>","e5c5b981":"# <a>1.13 What are the relationships of Money Spent on ML vs Choice of Cloud Platform and Product?<\/a>","a06ec522":"# <a>1.4 Where are preferred DS Courses?<\/a>","e29ed550":"# <a>2.2. Aspiring Data Scientists - see how the salary varies?<\/a>\n\nThere are various factors that influence salary, but some of them are rather fixed OR we might not want to change them, like:<font color=\"#eeaa00\">\n* Gender\n* Country\n* Age etc.<\/font>\n\nBut we can choose or change others, like:<font color=\"#eeaa00\">\n* Company\n* How much we spend to acquire ML skill\n* ML Maturity level at the company you choose\n* Choice of Data Analytics tool<\/font>\n\nLet's explore and concentrate on these factors that are actionable as we can choose or change them.","13f38e5d":"## <a>Insights<\/a>\n\nYou cannot change much on coding experience or how long you are using ML, but definitely can look at these:<font color=\"#67BF5C\"><b>\n* Size of the Company you work\n* Size of DS Team\n* ML Maturity Level at your company<\/b><\/font>\n\nAnd<font color=\"#67BF5C\"><b>\n* Money Spent on ML<\/b><\/font>\nBut this could be a correlation (not causation) that participants at higher income level have spent more on ML.\n\nAlso these people earn more:<font color=\"#67BF5C\"><b>\n* With Doctoral Degree\n* Data Scientist\n* Product Manager\n* Other Managerial\/Executive Roles\n* With Longer Years of ML and Coding Experience<\/b><\/font>\n","37951d4c":"# <a>2.3. Salary Corelation with Actionable Factors<\/a>","b5ae086a":"# <a>1.2 What are Favorite Data Science Media?<\/a>\n\nSo what are preferred Data Science and Machine Learning media. What youngstr's prefer. Is there any difference what Female Data Scientists prefer vs. Male Data Scientists.","9f4301b2":"# <a>1.14 What is the Relationships between preferred Cloud Platform and Data Product?<\/a>","c9c83e4e":"# <a>1.8 What is the relationship of Recommended Language and Language Used?<\/a>","e8be01ac":"# <a>1.10 What are Favorite Data Visualization Tools?<\/a>","7f661bac":"#### <a>Reading Encoded Salary Data from<\/a>\n\nThis is salary data and influencing factors with label encoding. Numeric ranges are replaced with mean values. Some ordinal values are converted to ordered numeric values.\n\nhttps:\/\/www.kaggle.com\/kathakaliseth\/kaggle2019surveysalaryusandindia"}}