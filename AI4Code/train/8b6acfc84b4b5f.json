{"cell_type":{"5d42e221":"code","b7c3b327":"code","86d2c310":"code","1876190e":"code","6832bfcc":"code","6211ae47":"code","eccb43ca":"code","59d43c99":"code","4ffa5fc6":"code","cdf1320d":"code","64e671b8":"code","0d0b4944":"code","696aa33d":"markdown","b06b2ba0":"markdown","5420774a":"markdown","b0cb27b1":"markdown","e39499b0":"markdown","5bd9ff0e":"markdown","47a9f4b2":"markdown","be835afa":"markdown","759429bc":"markdown","cb32c8f1":"markdown","d3af6cc9":"markdown","20ad68ed":"markdown","707a703c":"markdown","ea5a7287":"markdown","da07f80f":"markdown","a18f5abd":"markdown"},"source":{"5d42e221":"from pandas import read_csv, Grouper, DataFrame, concat\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.stattools import adfuller\nimport statsmodels.tsa.api as smt\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\nfrom datetime import datetime\nimport pandas as pd\nfrom pandas_profiling import ProfileReport\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.preprocessing import sequence \nfrom keras.models import Sequential \nfrom keras.layers import Dense, Embedding ,Dropout\nfrom keras.layers import LSTM \nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)","b7c3b327":"df=pd.read_csv(\"..\/input\/ethereum-historical-data\/Ethereum Historical Data.csv\")","86d2c310":"df[\"Vol.\"]=df[\"Vol.\"].str.replace(\"-\",\"0\")\ndf[\"Vol.\"] = (df[\"Vol.\"].replace(r'[KMB]+$', '', regex=True).astype(float) * df[\"Vol.\"].str.extract(r'[\\d\\.]+([KMB]+)', expand=False).fillna(1).replace(['K','M', 'B'], [10**3, 10**6, 10**9]).astype(int))\ndf[\"Price\"]=df[\"Price\"].str.replace(\",\",\"\")\ndf[\"Price\"]=df[\"Price\"].astype(\"float\")\ndf[\"Open\"]=df[\"Open\"].str.replace(\",\",\"\")\ndf[\"Open\"]=df[\"Open\"].astype(\"float\")\ndf[\"High\"]=df[\"High\"].str.replace(\",\",\"\")\ndf[\"High\"]=df[\"High\"].astype(\"float\")\ndf[\"Low\"]=df[\"Low\"].str.replace(\",\",\"\")\ndf[\"Low\"]=df[\"Low\"].astype(\"float\")\ndf[\"Change %\"]=df[\"Change %\"].str.replace(\"%\",\"\")\ndf[\"Change %\"]=df[\"Change %\"].astype(\"float\")","1876190e":"df['Date']= pd.to_datetime(df['Date'], format=\"%b %d, %Y\")\ndf = df.sort_values(by='Date', ascending=True)\ndf.index = df.Date\ndel df[\"Date\"]\nsns.set(rc={'figure.figsize':(7,5)})\nsns.barplot(x=df.index.year, y=df[\"Price\"], data=df)\nplt.xlabel(\"Year\", labelpad=17)\nplt.ylabel(\"Price\", labelpad=14)\n\nplt.title(\"Price by year \", y=1.01);","6832bfcc":"cols_plot = [\"Price\",\"Open\",\"High\",\"Low\"]\naxes = df[cols_plot].plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 9), subplots=True)\nfor ax in axes:\n    ax.set_ylabel('Monthly Totals')","6211ae47":"sns.boxplot(data=df, x=df.index.year, y=df[\"Change %\"])\nplt.title(\"Year wise report on Change %\")","eccb43ca":"sns.set(rc={'figure.figsize':(15,5)})\nstart, end = '2016', '2020'\nplt.plot(df.loc[start:end, 'Vol.'],\nmarker='.', linestyle='-', linewidth=0.5, label='Daily')\nplt.title(\"Volume by year \", y=1.01);","59d43c99":"data=df[\"Price\"]\n\nfeature_ts_train_diff = data.diff(periods=1)\nfeature_ts_train_diff.dropna(inplace=True)\n\nfeature_ts_train_diff\n\nfig, axes = plt.subplots(1, 2)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nplt.xticks(range(0,30,1), rotation = 90)\nsmt.graphics.plot_acf(feature_ts_train_diff, lags=30, ax=axes[0])\nsmt.graphics.plot_pacf(feature_ts_train_diff, lags=30, ax=axes[1])\nplt.tight_layout()","4ffa5fc6":"dftest = adfuller(data)\nprint(\"Statistics\",dftest[0])\nfig = go.Figure(go.Indicator(\n    mode = \"gauge+number\",\n    value = dftest[1],\n    title = {'text': \"P value\"},\n    domain = {'x': [0, 1], 'y': [0, 1]}\n))\n\n\nfig.show()","cdf1320d":"ethe_train = data.iloc[0:1260].values\nethe_test = data.iloc[1260:].values\n\nethe_train=ethe_train.reshape(-1, 1)\nscaler = MinMaxScaler(feature_range = (0, 1))\n\nethe_training_scaled = scaler.fit_transform(ethe_train)\n\nethe_training_scaled\n\nfeatures_set = []\nlabels = []\nfor i in range(60, 1260):\n    features_set.append(ethe_training_scaled[i-60:i, 0])\n    labels.append(ethe_training_scaled[i, 0])\n\nfeatures_set, labels = np.array(features_set), np.array(labels)\n\n\nfeatures_set = np.reshape(features_set, (features_set.shape[0], features_set.shape[1], 1))","64e671b8":"model = Sequential()\n\n\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(features_set.shape[1], 1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 1))\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')\nmodel.fit(features_set, labels, epochs = 50, batch_size = 32)\n","0d0b4944":"test_inputs = data[len(data) - len(ethe_test) - 60:].values\n\n\ntest_inputs = test_inputs.reshape(-1,1)\ntest_inputs = scaler.transform(test_inputs)\n\ntest_features = []\nfor i in range(60, 400):\n    test_features.append(test_inputs[i-60:i, 0])\n\ntest_features = np.array(test_features)\ntest_features = np.reshape(test_features, (test_features.shape[0], test_features.shape[1], 1))\n\npredictions = model.predict(test_features)\npredictions = scaler.inverse_transform(predictions)\n\n\nplt.figure(figsize=(10,6))\nplt.plot(ethe_test, color='blue', label='Actual Ethereum Stock Price')\nplt.plot(predictions , color='red', label='Predicted Ethereum Stock Price')\nplt.title('Ethereum Stock Price Prediction')\nplt.xlabel('Date')\nplt.ylabel('Ethereum Stock Price')\nplt.ylim(0,500)\nplt.legend()\nplt.show()","696aa33d":"# Ethereum Historical Data\n#### Ethereum data at 1-Day intervals from select exchanges, Mar 2016 to Aug 02, 2020 \n<img src=\"https:\/\/seeklogo.com\/images\/E\/ethereum-logo-1C9A722BB1-seeklogo.com.png\" width=\"500\" height=\"500\" align=\"center\">\n<br>\n<br>\n\n> Ethereum is the second-largest cryptocurrency platform by market capitalization, behind Bitcoin. It is a decentralized open-source blockchain featuring smart contract functionality. Ether is the cryptocurrency generated by Ethereum miners as a reward for computations performed to secure the blockchain.\n<br><br>\n\n# Upvote my kernel if you like my work.\n\n## Table of contents\n* Preprocessing the data\n* Ethereum Price by year wise\n* Monthly total for stock values\n* Year wise report on Change %\n* Volume flow by year wise \n* Auto-correlation and Partial-correlation\n* Statistic and P-value\n* Preprocessing the data for Recurrent Neural Network\n* Building and fitting the LSTM model to the train dataset\n* Comparing the model with actual value and predicted value\n","b06b2ba0":"# 2. Ethereum Price by year wise","5420774a":"# 10. Comparing the model with actual value and predicted value","b0cb27b1":"# 8. Preprocessing the data for Recurrent Neural Network","e39499b0":"# 7. Statistic and P-value","5bd9ff0e":"# 4. Year wise report on Change %","47a9f4b2":"### we can see the negative correlation with partial and autocorrelation.","be835afa":"# 6. Auto-correlation and Partial-correlation","759429bc":"# 1. Preprocessing the data","cb32c8f1":"### p-value > 0.05: Does not Rejects the null hypothesis (H0), the data have a unit root and is stationary.","d3af6cc9":"# Importing dataset","20ad68ed":"# 9. Building and fitting the LSTM model to the train dataset","707a703c":"## Here , Actual and Predicted Ethereum price are being plotted, we can clearly see that RNN(LSTM) Model worked Good in this dataset.","ea5a7287":"# 5. Volume flow by year wise ","da07f80f":"# 3. Monthly total for stock values","a18f5abd":"# Importing Modules"}}