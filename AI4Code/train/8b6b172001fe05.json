{"cell_type":{"88fed196":"code","bc83274e":"code","218678b8":"code","7f8fd97c":"code","9e0a9b20":"code","7cb435ed":"code","e25eef62":"code","a744a1ff":"code","269f52a5":"code","6e74d470":"code","fbd01c9a":"code","baf1978b":"code","656e07fd":"code","406bd1d4":"code","9b50643c":"markdown","429924be":"markdown","cbe49602":"markdown","ea643e51":"markdown","d383889b":"markdown","19212259":"markdown","e87345b7":"markdown","44f262bc":"markdown","7e4b0959":"markdown","699f5a99":"markdown"},"source":{"88fed196":"#importing libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","bc83274e":"#importing dataset\nds = pd.read_csv('..\/input\/social-network-ads\/Social_Network_Ads.csv')\nds.head()","218678b8":"#checking for null values\nds.isnull().any()","7f8fd97c":"#assigning independent and dependent variables\nx = ds.iloc[:,2:-1].values\ny = ds.iloc[:,-1].values","9e0a9b20":"#splitting data in testing and training set\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2, random_state = 0)","7cb435ed":"#applying feature scaling\n#note that feature scaling is not necessary  but applying it may increase accuracy\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)\n","e25eef62":"#training model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = lr.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nlra = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',lra)","a744a1ff":"#training model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski',p = 2)\nknn.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = knn.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nknna = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","269f52a5":"#training model\nfrom sklearn.svm import SVC\nsvc = SVC(kernel = 'linear')\nsvc.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = svc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nsva =accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","6e74d470":"#training model\nfrom sklearn.svm import SVC\nsvc = SVC(kernel = 'rbf')\nsvc.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = svc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nsva2 = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","fbd01c9a":"#training model\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = nb.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nnba = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","baf1978b":"#training model\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy')\ndt.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = dt.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\ndta = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","656e07fd":"#training model\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy')\nrf.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = rf.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nrfa = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","406bd1d4":"#comparing accuracies\nplt.figure(figsize= (5,6))\nac = [lra,knna,sva,sva2,nba,dta,rfa]\nname = ['LogReg','knn','svm','KSvm','NBayes','DTree', 'RForest']\nplt.bar(name,ac)","9b50643c":"**KNN AND KERNEL SVM DID BEST WITH AN ACCURACY OF 95 %**","429924be":"**USING VARIOUS CLASSIFICATION MODELS TO CLASSIFY WHETHER A CUSTOMER WILL BUY A PRODUCT OR NOT, DEPENEDING UPON THEIR SALARY**","cbe49602":"**RANDOM FOREST CLASSIFIER**","ea643e51":"# **APPLYING MODELS**","d383889b":"**LOGISTIC REGRESSION**","19212259":"**KNN**","e87345b7":"**NAIVE BAYES**","44f262bc":"**DECISION TREE CLASSIFIER**","7e4b0959":"**KERNEL SUPPORT VECTOR MACHINE** ","699f5a99":"**SUPPORT VECTOR MACHINE**"}}