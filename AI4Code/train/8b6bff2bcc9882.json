{"cell_type":{"80e5f4ee":"code","16180357":"code","dfe964d5":"code","5d3bfacb":"code","967a630c":"code","9d38c8dc":"code","fa5c1f4b":"code","1bf5c421":"code","0a41cbae":"code","bb2aaab1":"code","6deed9c9":"code","c024c935":"code","70caec46":"code","1130f060":"code","e099397a":"code","2bedcbf9":"code","58558714":"code","eb0da600":"code","ed8c4af2":"markdown","911b7677":"markdown","f16d59dc":"markdown","a83f2669":"markdown","99e29a65":"markdown","d080019f":"markdown","8c053a31":"markdown","1d729b15":"markdown","2a3c2c55":"markdown","ebdf3798":"markdown","c7508993":"markdown"},"source":{"80e5f4ee":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","16180357":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndata=pd.read_csv('\/kaggle\/input\/social-network-ads\/Social_Network_Ads.csv')\ndata.head(5)\n","dfe964d5":"data=data.iloc[:,2:]\n\nx=data.iloc[:,:-1].values\ny=data.iloc[:,-1].values\n ","5d3bfacb":" from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.25, random_state=0)","967a630c":"x_train","9d38c8dc":"x_test","fa5c1f4b":"y_train","1bf5c421":"y_test","0a41cbae":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()\nx_train=ss.fit_transform(x_train)\nx_test=ss.transform(x_test)","bb2aaab1":"x_train","6deed9c9":"x_test","c024c935":"from sklearn.tree import DecisionTreeClassifier\nclassifier=DecisionTreeClassifier(criterion=\"entropy\", random_state=0)\nclassifier.fit(x_train, y_train)","70caec46":"classifier.predict(ss.transform([[30,87000]]))","1130f060":"y_pred=classifier.predict(x_test)\nnp.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)","e099397a":"from sklearn.metrics import confusion_matrix, accuracy_score\nconfusion_matrix(y_test, y_pred)\n","2bedcbf9":"accuracy_score(y_test,y_pred)","58558714":"from matplotlib.colors import ListedColormap\nX_set, y_set = ss.inverse_transform(x_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(ss.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Decision Tree Classification (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","eb0da600":"from matplotlib.colors import ListedColormap\nX_set, y_set = ss.inverse_transform(x_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(ss.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Decision Tree Classification (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","ed8c4af2":"## Making the Confusion Matrix","911b7677":"## Importing the dataset","f16d59dc":"## Splitting the dataset into the Training set and Test set","a83f2669":"## Predicting a new result","99e29a65":"## Visualising the Test set results","d080019f":"## Predicting the Test set results","8c053a31":"## Visualising the Training set results","1d729b15":"## Importing the libraries","2a3c2c55":"# Decision Tree Classification","ebdf3798":"## Feature Scaling","c7508993":"## Training the Decision Tree Classification model on the Training set"}}