{"cell_type":{"6780642f":"code","e534ed92":"code","10487f63":"code","bfdc712d":"code","1e23355d":"code","57dea943":"code","773e592d":"code","0ecc8ab7":"code","422667ba":"code","f6288d54":"code","72104db1":"code","8a8d2add":"code","860cde78":"code","2354ea97":"code","cc784872":"code","09e2c277":"code","a898e412":"code","ef31785a":"code","47ab42da":"code","abac5749":"code","6b70c775":"code","fabc19d1":"code","d07134b9":"code","d82aee6e":"code","b48d20c0":"code","e02c5c69":"code","eb6813e6":"code","d21d5283":"code","d3844a4d":"code","3c545648":"code","50e91999":"code","bf39bc89":"code","73cdf532":"code","97d2f66f":"code","e13f159c":"code","fa45df26":"code","d886264c":"code","caaf114b":"code","f8a443ed":"code","d154e2ca":"code","d88e74a0":"code","3d32acbd":"code","b3e1add0":"markdown","a4c2b258":"markdown","5593f9cb":"markdown","fd20eeec":"markdown"},"source":{"6780642f":"!pip install lyft_dataset_sdk","e534ed92":"# Make Paths Compatible\nimport os\nos.system('rm -f data && ln -s \/kaggle\/input\/3d-object-detection-for-autonomous-vehicles\/train_data data')\nos.system('rm  -f images && ln -s \/kaggle\/input\/3d-object-detection-for-autonomous-vehicles\/train_images images')\nos.system('rm  -f maps && ln -s \/kaggle\/input\/3d-object-detection-for-autonomous-vehicles\/train_maps maps')\nos.system('rm  -f lidar && ln -s \/kaggle\/input\/3d-object-detection-for-autonomous-vehicles\/train_lidar lidar')","10487f63":"# Load the SDK\n%matplotlib inline\nfrom lyft_dataset_sdk.lyftdataset import LyftDataset\n\nlevel5data = LyftDataset(data_path = '.\/', json_path = '.\/data', verbose = True)","bfdc712d":"level5data.list_scenes()","1e23355d":"example_scene = level5data.scene[0]\nexample_scene","57dea943":"sample_token = example_scene[\"first_sample_token\"]\nlevel5data.render_sample(sample_token)","773e592d":"sample = level5data.get('sample', sample_token)\nsample","0ecc8ab7":"level5data.list_sample(sample[\"token\"])","422667ba":"level5data.render_pointcloud_in_image(sample_token = sample[\"token\"],\n                                      dot_size = 1,\n                                      camera_channel = 'CAM_BACK')","f6288d54":"sample[\"data\"]","72104db1":"sensor_channel = 'LIDAR_TOP'\nsample_data = level5data.get('sample_data', sample['data'][sensor_channel])\nsample_data","8a8d2add":"level5data.render_sample_data(sample_data['token'])","860cde78":"sensor_channel = 'CAM_BACK'\nsample_data = level5data.get('sample_data', sample['data'][sensor_channel])\nsample_data","2354ea97":"level5data.render_sample_data(sample_data['token'])","cc784872":"annotation_token = sample['anns'][4]\nannotation = sample_data.get('sample_annotation', annotation_token)\nannotation","09e2c277":"level5data.render_annotation(annotation_token)","a898e412":"instance = level5data.instance[0]\ninstance","ef31785a":"instance_token = instance['token']\nlevel5data.render_instance(instance_token)","47ab42da":"print(\"First annotated sample of this instance:\")\nlevel5data.render_annotation(instance['first_annotation_token'])","abac5749":"print(\"Last annotated sample of this instance:\")\nlevel5data.render_annotation(instance[\"last_annotation_token\"])","6b70c775":"level5data.list_categories()","fabc19d1":"level5data.category[0]","d07134b9":"level5data.list_attributes()","d82aee6e":"for instance in level5data.instance:\n    first_token = instance['first_annotation_token']\n    last_token = instance['last_annotation_token']\n    nbr_samples = instance['nbr_annotations']\n    current_token = first_token\n    \n    i = 0\n    found_change = False\n    while current_token != last_token:\n        current_ann = level5data.get('sample_annotation', current_token)\n        current_attr = level5data.get('attribute', current_ann['attribute_tokens'][0])['name']\n        \n        if i == 0:\n            pass\n        elif current_attr != last_attr:\n            print(f\"Changed from {last_attr} to {current_attr} at timestamp {i} out of {nbr_samples}\")\n            found_change = True\n            \n        next_token = current_ann[\"next\"]\n        current_token = next_token\n        last_attr = current_attr\n        i += 1","b48d20c0":"level5data.sensor","e02c5c69":"level5data.sample_data[10]","eb6813e6":"level5data.calibrated_sensor[10]","d21d5283":"level5data.ego_pose[10]","d3844a4d":"print(f\"Number of logs loaded in database: {len(level5data.log)}\")","3c545648":"level5data.log[0]","50e91999":"print(f\"There are {len(level5data.map)} maps masks in the loaded dataset\")","bf39bc89":"level5data.map[0]","73cdf532":"sensor_channel = 'LIDAR_TOP'\nsample_data = level5data.get('sample_data', sample['data'][sensor_channel])\nlevel5data.render_sample_data(sample_data['token'])","97d2f66f":"sensor_channel = 'CAM_FRONT'\nsample_data = level5data.get('sample_data', sample['data'][sensor_channel])\nlevel5data.render_sample_data(sample_data['token'])","e13f159c":"level5data.render_sample_data(sample['data']['LIDAR_TOP'], nsweeps=5)","fa45df26":"from matplotlib import animation, rc\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import HTML","d886264c":"cams = [\"CAM_FRONT\", \"CAM_FRONT_RIGHT\", \"CAM_FRONT_LEFT\",\n        \"CAM_BACK\", \"CAM_BACK_RIGHT\", \"CAM_BACK_LEFT\"]\n\ndef generate_next_token(scene):\n    scene = level5data.scene[scene]\n    sample_token = scene['first_sample_token']\n    sample_record = level5data.get('sample', sample_token)\n    \n    while sample_record[\"next\"]:\n        sample_token = sample_record[\"next\"]\n        sample_record = level5data.get(\"sample\", sample_token)\n        \n        yield sample_token\n        \ndef animate_images(scene, frames, pointsensor_channel = \"LIDAR_TOP\", interval = 1):\n    generator = generate_next_token(scene)\n\n    fig, axs = plt.subplots(\n        2, len(cams), figsize=(3*len(cams), 6), \n        sharex=True, sharey=True, gridspec_kw = {'wspace': 0, 'hspace': 0.1}\n    )\n    \n    plt.close(fig)\n\n    def animate_fn(i):\n        for _ in range(interval):\n            sample_token = next(generator)\n            \n        for c, camera_channel in enumerate(cams):    \n            sample_record = level5data.get(\"sample\", sample_token)\n\n            pointsensor_token = sample_record[\"data\"][pointsensor_channel]\n            camera_token = sample_record[\"data\"][camera_channel]\n            \n            axs[0, c].clear()\n            axs[1, c].clear()\n            \n            level5data.render_sample_data(camera_token, with_anns=False, ax=axs[0, c])\n            level5data.render_sample_data(camera_token, with_anns=True, ax=axs[1, c])\n            \n            axs[0, c].set_title(\"\")\n            axs[1, c].set_title(\"\")\n\n    anim = animation.FuncAnimation(fig, animate_fn, frames=frames, interval=interval)\n    return anim","caaf114b":"anim = animate_images(scene=3, frames=100, interval=1)\nHTML(anim.to_jshtml(fps=8))","f8a443ed":"anim = animate_images(scene=4, frames=100, interval=1)\nHTML(anim.to_jshtml(fps=8))","d154e2ca":"def animate_lidar(scene, frames, pointsensor_channel = \"LIDAR_TOP\", interval = 1):\n    generator = generate_next_token(scene)\n    \n    fig, axs = plt.subplots(2, 1, figsize = (16, 8))\n    plt.close(fig)\n    \n    def animate_function(i):\n        for _ in range(interval):\n            sample_token = next(generator)\n            \n        axs[0].clear()\n        axs[1].clear()\n        \n        sample_record = level5data.get(\"sample\", sample_token)\n        pointsensor_token = sample_record[\"data\"][pointsensor_channel]\n        \n        level5data.render_sample_data(pointsensor_token, with_anns=False, ax=axs[0])\n        level5data.render_sample_data(pointsensor_token, with_anns=True, ax=axs[1])\n        \n    anim = animation.FuncAnimation(fig, animate_function, frames=frames, interval=interval)\n    return anim","d88e74a0":"anim = animate_lidar(scene=5, frames=100, interval=1)\nHTML(anim.to_jshtml(fps=8))","3d32acbd":"anim = animate_lidar(scene=10, frames=100, interval=1)\nHTML(anim.to_jshtml(fps=8))","b3e1add0":"# Videos","a4c2b258":"# Exploratory Data Analysis\n\nLyft 3D Object Detection Dataset","5593f9cb":"# SDK Functions for Data Exploration","fd20eeec":"# Install Lyft Dataset SDK"}}