{"cell_type":{"b9e68a75":"code","1b5c3840":"code","b3388664":"code","9cdd2d58":"code","59e1eaad":"code","3d15d780":"code","7d07d71b":"code","1688801f":"code","97562ef1":"code","9d0752b3":"code","a9b89061":"code","c6914e9c":"code","4035ca2d":"code","74760176":"code","d6f4650b":"code","08605d14":"code","624ec9f2":"code","315fecf8":"code","8a956779":"code","ec291e13":"code","f4353a4e":"code","a2892691":"code","861bd549":"code","a53291f0":"code","88499c36":"code","c1695bf9":"code","784603dc":"code","c632ac6c":"code","7e59d80e":"code","623cf488":"code","863f4746":"code","1878d5d7":"markdown","a7620776":"markdown"},"source":{"b9e68a75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b5c3840":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndiabetes = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")\nprint(diabetes.columns)","b3388664":"diabetes.head(5)","9cdd2d58":"print({\"dimension of diabetes data: {}\".format(diabetes.shape)})","59e1eaad":"print(diabetes.groupby('Outcome').size())","3d15d780":"import seaborn as sns\n\nsns.countplot(diabetes['Outcome'], label='Count');","7d07d71b":"diabetes.info()","1688801f":"from sklearn.model_selection import train_test_split\n\nX = diabetes.loc[:, diabetes.columns != 'Outcome']\ny = diabetes['Outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=diabetes['Outcome'], random_state=66)\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\ntraining_accuracy = []\ntest_accuracy = []\n\n# try neighbors from 1 to 11 (similar to GridSearch)\nneighbors_settings = range(1, 11)\n\nfor n_neighbors in neighbors_settings:\n    # instantiate the model with the right hyperparamenter\n    knn = KNeighborsClassifier(n_neighbors=n_neighbors)\n    \n    # fit model against the data\n    knn.fit(X_train, y_train)\n    \n    # append accuracy\n    training_accuracy.append(knn.score(X_train, y_train))\n    \n    # record test accuracy\n    test_accuracy.append(knn.score(X_test, y_test))\n    \nplt.plot(neighbors_settings, training_accuracy, label=\"trraining accuracy\")\nplt.plot(neighbors_settings, test_accuracy, label=\"test accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"n_neighbors\")\nplt.legend();\n","97562ef1":"# plot suggest a n_neighbors around 9 would be the best\n\nknn = KNeighborsClassifier(n_neighbors=9)\nknn.fit(X_train, y_train)\n\nprint('Accuracy of the K-NN classifier on training set: {:.2f}'.format(knn.score(X_train, y_train)))\nprint('Accuracy of the K-NN classifier on test set: {:.2f}'.format(knn.score(X_test, y_test)))","9d0752b3":"# Lets try logistic regression\nfrom sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression().fit(X_train, y_train)\nprint(\"Training set score: {:.3f}\".format(logreg.score(X_train, y_train)))\nprint(\"Tets set  score: {:.3f}\".format(logreg.score(X_test, y_test)))","a9b89061":"# try a C different to the default one, 1\nlogreg001 = LogisticRegression(C=0.01).fit(X_train,y_train)\n\nprint(\"Training set accuracy: {:.3f}\".format(logreg.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.3f}\".format(logreg.score(X_test, y_test)))\n\n# !!!Note!!! - Try to scale data as suggested in the warnings","c6914e9c":"# try a C  different to the default one, 1\nlogreg100 = LogisticRegression(C=100).fit(X_train,y_train)\n\nprint(\"Training set accuracy: {:.3f}\".format(logreg.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.3f}\".format(logreg.score(X_test, y_test)))\n\n# !!!Note!!! - Try to scale data as suggested in the warnings","4035ca2d":"diabetes_features = [x for i, x in enumerate(diabetes.columns) if i!=len(diabetes)] # create array with features\n\nplt.figure(figsize=(8,6))\nplt.plot(logreg.coef_.T, 'o', label=\"C=1\")\nplt.plot(logreg100.coef_.T, 'o', label=\"C=100\")\nplt.plot(logreg001.coef_.T, 'o', label=\"C=0.01\")\nplt.xticks(range(diabetes.shape[1]), diabetes_features, rotation=90)\nplt.hlines(0,0, diabetes.shape[1])\nplt.ylim(-5, 5)\nplt.xlabel(\"Feature\")\nplt.ylabel(\"Coefficient magnitude\")\nplt.legend();","74760176":"# lets try with a DecisionTreeClassifier now\nfrom sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier(random_state=0)\ntree.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(tree.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(tree.score(X_test, y_test)))","d6f4650b":"# Accuracy on training set means Overfitting, lets try to decrease the depth\ntree3 = DecisionTreeClassifier(max_depth=3, random_state=0)\ntree3.fit(X_train, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(tree3.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(tree3.score(X_test, y_test)))","08605d14":"# Lets have a look at feature importance\nprint(\"Feature importances:\\n{}\".format(tree3.feature_importances_))\n","624ec9f2":"def plot_feature_importances_diabetes(model):\n    plt.figure(figsize=(8,6))\n    n_features = 8\n    plt.barh(range(n_features), model.feature_importances_, align='center')\n    plt.yticks(np.arange(n_features), diabetes_features)\n    plt.xlabel(\"Feature importance\")\n    plt.ylabel(\"Feature\")\n    plt.ylim(-1, n_features)\n    \nplot_feature_importances_diabetes(tree3)\n","315fecf8":"# lets give it a shot with a random forest as well\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=100, random_state=0)\nrf.fit(X_train, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(rf.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(rf.score(X_test, y_test)))","8a956779":"# feature importance in random forests\nplot_feature_importances_diabetes(rf)","ec291e13":"# lets try the gradine boosting now\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier(random_state=0)\ngb.fit(X_train, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(gb.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(gb.score(X_test, y_test)))","f4353a4e":"# 0.917 feels like overfitting,we should apply pre.prunning by limiting rhe maximum depth or lower the learning rate\ngb1 = GradientBoostingClassifier(random_state=0, max_depth=1)\ngb1.fit(X_train, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(gb1.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(gb1.score(X_test, y_test)))","a2892691":"# lets tune a bit more\ngb2 = GradientBoostingClassifier(random_state=0,  learning_rate=0.01)\ngb2.fit(X_train, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(gb2.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(gb2.score(X_test, y_test)))","861bd549":"# acc is decreasing, we will settle for gb1, lets see feature importance\nplot_feature_importances_diabetes(gb1)\n","a53291f0":"# lets try support vector machines now\nfrom sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(X_train, y_train)\n\nprint(\"Accuracy on training set: {:.2f}\".format(svc.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.2f}\".format(svc.score(X_test, y_test)))","88499c36":"# lets try a scaller\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)\n\nsvc = SVC()\nsvc.fit(X_train_scaled, y_train)\n\nprint(\"Accuracy on training set: {:.2f}\".format(svc.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.2f}\".format(svc.score(X_test_scaled, y_test)))","c1695bf9":"# scaling yields better results\n# let's try some hyperparameter tuning tweaking C or gamma\n\nsvc = SVC(C=1000)\nsvc.fit(X_train_scaled, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(\n    svc.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(svc.score(X_test_scaled, y_test)))","784603dc":"from sklearn.neural_network import MLPClassifier # Multilayer perceptrons (MLP)\n\nmlp = MLPClassifier(random_state=42)\nmlp.fit(X_train, y_train)\n\nprint(\"Accuracy on training set: {:.2f}\".format(mlp.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.2f}\".format(mlp.score(X_test, y_test)))","c632ac6c":"# deep learning algorithms also expect all input features to vary in a similar way, and ideally to have a mean of 0, and a variance of 1. lets rescale\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)\n\nmlp = MLPClassifier(random_state=0)\nmlp.fit(X_train_scaled, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(mlp.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(mlp.score(X_test_scaled, y_test)))","7e59d80e":"# not converged, increase number of iterations\nmlp1000 = MLPClassifier(max_iter=1000, random_state=0)\nmlp1000.fit(X_train_scaled, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(mlp1000.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(mlp1000.score(X_test_scaled, y_test)))","623cf488":"# test set performance decreased, most likely we are overfitting\n\n# try increase the alpha parameter and add stronger regularization to the weights\nmlp2 = MLPClassifier(max_iter=1000, alpha=1, random_state=0)\nmlp2.fit(X_train_scaled, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(mlp2.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(mlp2.score(X_test_scaled, y_test)))\n","863f4746":"# model is good but is not an increase in performance\n# lets try to see feature importance, plot a heat map of the first layer weights in a nural network\n\nplt.figure(figsize=(20, 5))\nplt.imshow(mlp.coefs_[0], interpolation=\"none\", cmap='viridis')\nplt.yticks(range(8), diabetes_features)\nplt.xlabel(\"Columns in weight matrix\")\nplt.ylabel(\"Input feature\")\nplt.colorbar();","1878d5d7":"### Feels like overfitting, the best result was without tweaking the C","a7620776":"# Deep Learning"}}