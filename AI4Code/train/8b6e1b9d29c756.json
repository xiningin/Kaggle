{"cell_type":{"30341260":"code","9f4bf148":"code","65a566cf":"code","ef29662b":"code","18e465d8":"code","1ae52a70":"code","6232bf53":"code","38aef8a9":"code","337dd143":"code","644e346f":"code","327027f8":"code","72a5d864":"code","92aeb428":"code","6092553a":"code","f66d62b9":"code","6ff448bd":"code","cbcd5d95":"code","1d8d4969":"code","a52c3851":"code","60a62c3f":"markdown","cd221182":"markdown","82a6d9fc":"markdown"},"source":{"30341260":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f4bf148":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv\")\ntrain.head()","65a566cf":"train.shape # data dimension","ef29662b":"train['target'].value_counts() #target variable","18e465d8":"train.isna().sum()# check if there are gaps in the data","1ae52a70":"train.dtypes","6232bf53":"# Get train data without the target and ids\nX = train.iloc[:, 1:-1].copy()\n# Get the target\ny = train.target.copy()\n\n# Create test X, drop ids.\ntest_X = test.iloc[:, 1:].copy()","38aef8a9":"import gc \nimport matplotlib.image as img\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error as mse, r2_score as r2\nfrom lightgbm import LGBMRegressor","337dd143":"# Plot\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Scaler\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n# Cross-Validation\nfrom sklearn.model_selection import StratifiedKFold","644e346f":"# Apply a scaler\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\ntest_X = scaler.transform(test_X)","327027f8":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold, cross_val_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","72a5d864":"from keras import models\nfrom keras import layers\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV","92aeb428":"network = models.Sequential()\nnetwork.add(layers.Dense(units=16, activation=\"relu\", input_shape=(100,)))\nnetwork.add(layers.Dense(units=16, activation=\"relu\"))\nnetwork.add(layers.Dense(units=1, activation=\"sigmoid\"))","6092553a":"network.compile(\n    loss=\"binary_crossentropy\",\n    optimizer=\"rmsprop\",\n    metrics=[\"accuracy\"]\n)","f66d62b9":"history = network.fit(\n    X_train,\n    y_train,\n    epochs=11,\n    verbose=1,\n    batch_size=100,\n    validation_data=(X_test, y_test))","6ff448bd":"history = network.fit(\n    X,\n    y,\n    epochs=11,\n    verbose=1,\n    batch_size=100,)","cbcd5d95":"y_pred = network.predict(test_X)","1d8d4969":"y_pred_df = pd.DataFrame(y_pred, columns=['target'])\nd = {0: '0.1', 1: '1'}\ny_pred_df['target'] = y_pred_df['target'].map(d).fillna(y_pred_df['target'])\ny_pred_df = pd.Series(y_pred_df['target'])\ny_pred_df = y_pred_df.reset_index()\ny_pred_df['index']=y_pred_df['index']+600000\ny_pred_df=y_pred_df.rename(columns={'index': 'id'})\ny_pred_df","a52c3851":"y_pred_df.to_csv('submission.csv', index=False)","60a62c3f":"# **Data research**","cd221182":"# **Building a model**","82a6d9fc":"# **Data preparation**"}}