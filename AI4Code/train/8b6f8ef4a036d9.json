{"cell_type":{"fea31b9a":"code","9d1b9837":"code","11eb4283":"code","fc78c667":"code","87d590fb":"code","e01b9c59":"code","632cad07":"code","6bc0730a":"code","8e9c3ae2":"code","70f6d40d":"code","2204c2a6":"code","9484156c":"code","517d9b42":"code","69ada83c":"code","2eb0108c":"code","bf987f2b":"code","d24c84eb":"code","f8c6f6f8":"code","56a0082a":"code","fdad0b8b":"code","a2dff32a":"code","3df5771c":"code","8ac42825":"code","a885152e":"code","4bc1350c":"markdown"},"source":{"fea31b9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d1b9837":"import pandas as pd \nimport numpy as  np \n\nurl1='\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv'\nurl2='\/kaggle\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv'\ndftrain=pd.read_csv(url1)\ndftest=pd.read_csv(url2)","11eb4283":"dftrain.head()","fc78c667":"dftest.head()","87d590fb":"dftrain.isnull().sum()","e01b9c59":"dftest.isnull().sum()","632cad07":"#train\ndftrain['Gender']=dftrain['Gender'].fillna(dftrain['Gender'].mode())\ndftrain['Married']=dftrain['Married'].fillna(dftrain['Married'].mode())\ndftrain['Self_Employed']=dftrain['Self_Employed'].fillna(dftrain['Self_Employed'].mode())","6bc0730a":"dftrain['LoanAmount'] = dftrain['LoanAmount'].fillna(dftrain['LoanAmount'].mean())\ndftrain['Credit_History'] = dftrain['Credit_History'].fillna(dftrain['Credit_History'].median())","8e9c3ae2":"\n\ndftrain.dropna(inplace=True)\n\n","70f6d40d":"#testing \n\ndftest.dropna(inplace=True)","2204c2a6":"\n\ndftrain.drop('Loan_ID', inplace=True, axis = 1)\n\n\n","9484156c":"dftest.drop('Loan_ID', inplace=True, axis = 1)","517d9b42":"dftrain.isnull().sum()","69ada83c":"dftest.isnull().sum()","2eb0108c":"dftrain.Gender = dftrain.Gender.map({'Male':1, 'Female':0})\ndftrain.Married = dftrain.Married.map({'Yes':1, 'No':0})\ndftrain.Education = dftrain.Education.map({'Graduate':1, 'Not Graduate':0})\ndftrain.Self_Employed = dftrain.Self_Employed.map({'Yes':1, 'No':0})\ndftrain.Dependents = dftrain.Dependents.map({'0':0, '1':1, '2':2, '3+':3})\ndftrain.Property_Area = dftrain.Property_Area.map({'Urban':1, 'Rural':0, 'Semiurban':2})\ndftrain.Loan_Status = dftrain.Loan_Status.map({'Y':1, 'N':0})","bf987f2b":"\n\ndftest.Gender = dftest.Gender.map({'Male':1, 'Female':0})\ndftest.Married = dftest.Married.map({'Yes':1, 'No':0})\ndftest.Education = dftest.Education.map({'Graduate':1, 'Not Graduate':0})\ndftest.Self_Employed = dftest.Self_Employed.map({'Yes':1, 'No':0})\ndftest.Dependents = dftest.Dependents.map({'0':0, '1':1, '2':2, '3+':3})\ndftest.Property_Area = dftest.Property_Area.map({'Urban':1, 'Rural':0, 'Semiurban':2})\n\n","d24c84eb":"import matplotlib.pyplot as plt \nimport seaborn as sns ","f8c6f6f8":"fig, axes = plt.subplots(2, 3, figsize=(20,10))\n\nfig.suptitle('Each Column Value Counts')\n\nsns.countplot(dftrain['Gender'], hue = dftrain['Loan_Status'], ax=axes[0, 0], palette='rainbow')\nsns.countplot(dftrain['Married'], hue = dftrain['Loan_Status'], ax=axes[0, 1], palette='rainbow')\nsns.countplot(dftrain['Education'], hue = dftrain['Loan_Status'], ax=axes[0, 2], palette='rainbow')\nsns.countplot(dftrain['Self_Employed'], hue = dftrain['Loan_Status'], ax=axes[1, 0], palette='rainbow')\nsns.countplot(dftrain['Dependents'], hue = dftrain['Loan_Status'], ax=axes[1, 1], palette='rainbow')\nsns.countplot(dftrain['Property_Area'], hue = dftrain['Loan_Status'], ax=axes[1, 2], palette='rainbow')","56a0082a":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score","fdad0b8b":"\n\ntarget= dftrain.drop('Loan_Status', axis = 1)\ndata= dftrain['Loan_Status']\n\nx_train, x_test, y_train, y_test = train_test_split(target, data, test_size = 0.3, random_state = 0)\n\n","a2dff32a":"RF = RandomForestClassifier()\nRF.fit(x_train, y_train)\n\ny_predict = RF.predict(x_test)\n\n\n#Classification Report\nprint(classification_report(y_test, y_predict))\n\n# Accuracy score\nRF_score = accuracy_score(y_predict,y_test)\nprint(f\"Accurate {round(RF_score*100,2)}%\")","3df5771c":"\n\nLoan_Status_Validation=pd.DataFrame({'y_test':y_test,'prediction':y_predict})\nLoan_Status_Validation\n\n","8ac42825":"\n\ny_test_predict = RF.predict(dftest)\n\n","a885152e":"\n\nLoan_Status_Prediction=pd.DataFrame({'y_test_predict':y_test_predict})\nLoan_Status_Prediction\n\n","4bc1350c":"Completed "}}