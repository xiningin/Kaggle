{"cell_type":{"2c243401":"code","a0599904":"code","40b2fb4e":"code","5bda16eb":"code","d6709100":"code","36fe3904":"code","d5bc2e81":"code","6bb482b7":"code","21bab7f0":"code","fb30ee50":"code","f06754f8":"code","0bbadfc9":"code","d266b0b9":"code","61c272b0":"code","36b2db4f":"code","4f4bdcd9":"code","1542eaaa":"code","1ac17cc4":"code","3abdad89":"code","b78b9bdf":"code","efb4267e":"code","83687c19":"code","66b80b29":"code","8dcc6653":"code","c20ecdc6":"code","2a1ba004":"code","cbfbeaa0":"code","75e32ad5":"code","8e324406":"code","8f14006f":"code","74766b95":"code","4c1c24a0":"code","2f8e248a":"code","dc932cf0":"code","321353ed":"code","ab680fab":"code","92d1fe4d":"code","0a96be93":"code","7059a7df":"code","d26499b4":"code","ac3d1528":"code","1f0909db":"code","3288f3c7":"markdown","71ed445f":"markdown","e9668f68":"markdown","15a84877":"markdown","b8a47c37":"markdown","e698fa9c":"markdown","c1434b74":"markdown","5a9e3566":"markdown","6fd6c093":"markdown","89d4fa5a":"markdown","b75f9055":"markdown","c6dba781":"markdown","b256ace3":"markdown","db9a1cdd":"markdown","9662eb9d":"markdown","aafbbd3d":"markdown","bad360b8":"markdown","f4cf7462":"markdown"},"source":{"2c243401":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0599904":"import warnings\nwarnings.filterwarnings('ignore')","40b2fb4e":"df = pd.read_csv('\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv', index_col='date', parse_dates=True)\ndf.head()","5bda16eb":"#Review Datetime Index Frequency\ndf.index","d6709100":"df= df.asfreq('D')\ndf.index","36fe3904":"#Summary of Dataset\ndf.info()","d5bc2e81":"df.isnull().sum()","6bb482b7":"df.plot(subplots=True, figsize=(14,6))\nplt.show()","21bab7f0":"df.hist(figsize=(14,6))\nplt.show()","fb30ee50":"df_monthly = df['meantemp'].resample('MS').mean()\ndf_monthly.head()","f06754f8":"df_monthly.plot(figsize=(14,6))\nplt.show()","0bbadfc9":"# Import seasonal decompose\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Perform additive decomposition\ndecomp = seasonal_decompose(df_monthly, freq=12)\ndecomp.plot()\nplt.show()","d266b0b9":"#extract Trend Pattern\ntrend= decomp.trend\ntrend.plot(figsize=(10,6))\nplt.show()","61c272b0":"#extract Trend Pattern\nseasonal= decomp.seasonal\nseasonal.plot(figsize=(10,6))\nplt.show()","36b2db4f":"#ACF plot will be also helpful to test our date for seasonality.","4f4bdcd9":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nfig, ax = plt.subplots(figsize=(12,8))\nplot_acf(df_monthly, lags=25, zero=False, ax=ax)\nplt.show()","1542eaaa":"meantemp_1= df_monthly - df_monthly.rolling(15).mean()\nmeantemp_1= meantemp_1.dropna()\nmeantemp_1.head()","1ac17cc4":"fig, ax1 = plt.subplots(figsize=(12,8))\nplot_acf(meantemp_1, lags=25, zero=False, ax=ax1)\nplt.show()","3abdad89":"#Choosing SARIMA order:\n# Create the figure \nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(8,6))\n\n# Plot the ACF on ax1\nplot_acf(meantemp_1, lags=11, zero=False, ax=ax1)\n\n# Plot the PACF on ax2\nplot_pacf(meantemp_1, lags=11, zero=False, ax=ax2)\nplt.show()\n","b78b9bdf":"df_monthly_diff =df_monthly.diff(1).diff(12).dropna()\ndf_monthly_diff.head()","efb4267e":"lags= [11, 22, 33]\nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(8,6))\nplot_acf(df_monthly_diff, lags=lags, zero=False, ax=ax1)\nplot_pacf(df_monthly_diff, lags=lags, zero=False, ax=ax2)\nplt.show()","83687c19":"pip install pmdarima","66b80b29":"#Choosing Model Orders\nfrom pmdarima.arima import auto_arima\n\nmodel1 = auto_arima(df_monthly,\n                      seasonal=True, m=12,\n                      d=0, D=1, \n                 \t  max_p=2, max_q=2,\n                      trace=True,\n                      error_action='ignore',\n                      suppress_warnings=True)\n\nprint(model1.summary())\n","8dcc6653":"#Split train set and test set from Train Dataset and fit our model\ntrain= df_monthly[:-13]\ntest= df_monthly[-13:]\n\nprint(train.shape, test)","c20ecdc6":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n#Fit Sarimax model to Train set\nmodel= SARIMAX(train, order=(2,0,2), seasonal_order=(2,1,0,12))\nresults=model.fit()\nprint(results.summary())","2a1ba004":"# Create the 4 diagostics plots\nresults.plot_diagnostics(figsize=(14,6))\nplt.show()","cbfbeaa0":"start= len(train)\nend= len(train)+len(test)-1\npredictions= results.predict(start=start, end=end)\npredictions","75e32ad5":"test.plot(legend=True,figsize=(12,6))\npredictions.plot(label='SARIMAX',legend=True)\nplt.show()","8e324406":"from sklearn.metrics import mean_squared_error\n\nmse = mean_squared_error(test, predictions)\nprint('Mean Squared Error ',mse)","8f14006f":"from statsmodels.tools.eval_measures import rmse\n\nrmse = rmse(test, predictions)\nprint('Root Mean Squared Error ',rmse)","74766b95":"test = pd.read_csv('\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTest.csv', index_col='date', parse_dates=True)\nprint(test.shape)\ntest.head()","4c1c24a0":"test_monthly = df['meantemp'].resample('MS').mean().dropna()\nprint(test_monthly.shape)\ntest_monthly.head()","2f8e248a":"#Fit SARIMAX(2, 0, 2)x(2, 1, 0, 12) to Training Dataset\n\nmodel_1= SARIMAX(df_monthly, order=(2,0,2), seasonal_order=(2,1,0,12))\nresults_1=model_1.fit()\nprint(results_1.summary())","dc932cf0":"results_1.plot_diagnostics(figsize=(14,6))\nplt.show()","321353ed":"test_monthly.tail()","ab680fab":"test_monthly.index[0]","92d1fe4d":"start=test_monthly.index[0]\nend= test_monthly.index[-1]\npredictions_1= results_1.predict(start=start, end=end)\npredictions_1","0a96be93":"test_monthly.plot(legend=True,figsize=(12,6))\npredictions_1.plot(label='SARIMAX',legend=True)\nplt.show()\n","7059a7df":"mse_final = mean_squared_error(test_monthly, predictions_1)\nprint('Mean Squared Error ',mse_final)","d26499b4":"rmse_final = np.sqrt(mse_final)\nprint('Root Mean Squared Error ',rmse_final)","ac3d1528":"# Create SARIMA mean forecast\nsarima_forecast = results_1.get_forecast(steps=20).predicted_mean\nsarima_forecast","1f0909db":"sarima_forecast.plot(label='SARIMAX',figsize=(12,6), legend=True)\ntest_monthly.plot(figsize=(12,6), legend=True)\nplt.show()","3288f3c7":"### SARIMAX(2, 0, 2)x(2, 1, 0, 12) performs better than other model of orders and has low AIC value","71ed445f":"Missing Values","e9668f68":"We have extracted the seasonal cycle and now you can see the trend much more clearly.","15a84877":"The ACF shows that there is an seasonal component and so including it will make your predictions better.\nSo, we can fit our timeseries to Seasonal ARIMA model","b8a47c37":"ACF cuts off at lag 1. so, we have to use MA model.","e698fa9c":"#### import the dataset with Datetime column as Index","c1434b74":"Our model follows standardized behaviour","5a9e3566":"### Forecast the values","6fd6c093":"Inorder to detrend the timeseries you need to subtract it from rolling mean of period of \nmore than seasonality period.","89d4fa5a":"##### Looks like humidity, meantemp have seasonality.\n##### meantemp goes down at end of every year and reaches high at mid of the year. this follows repeated pattern for entire timeseries\n##### Wind_speed timeseries seems to have stationarity pattern.\n##### meanpressure looks like whitenoise. No pattern and most of the time it is time invariant..","b75f9055":"The non-seasonal ACF doesn't show any of the usual patterns of MA, AR or ARMA models so we choose none of these. The Seaosnal ACF and PACF look like an MA(1) model. We select the model that combines both of these.","c6dba781":"#### Exploratory Data Analysis","b256ace3":"## Predict the Values for Test set","db9a1cdd":"#### Index Frequency is None. Make the  Datetime frequency as 'D' since the observations are recorded daily","9662eb9d":"Prob(Q) is >0.05, so we failed to reject Null Hypothesis that the residuals are uncorrelated. Prob(JB) >0.05, so we failed to reject the Null hypothesis that residuals are not normally distributed\n\nSo, based on given summary, Residuals are uncorrelated and Normally distributed","aafbbd3d":"Standardized residul plot tells there is no obvious patterns in the residuals\nKDE curve is very similar to normal distribution. \nMost of the Datapoints lie on the straight line.\nAlso, 95% correlations for lag greater than one are not significant\n\n#### Our model follows standardized behaviour. if not, we have to improve our model","bad360b8":"Timeseries doesnt have any missing values","f4cf7462":"is the timeseries Stationary?"}}