{"cell_type":{"4a40ddca":"code","140b73ea":"code","2da58db1":"code","54a98c3d":"code","4a80603b":"code","b5f0fe85":"code","60d1d35b":"code","47545a67":"code","5dea3788":"code","4731db15":"code","d0723722":"code","8e34c4bb":"code","3812768e":"code","40fdf787":"code","1cdca784":"code","25406b8e":"code","4c44f61a":"code","30c0fa77":"code","3caa9fe0":"code","c2615ce2":"code","92dba01c":"markdown","b8d6b94f":"markdown","a40cfe3b":"markdown","465ef5a4":"markdown","b764746f":"markdown"},"source":{"4a40ddca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","140b73ea":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsgermancsv\/german.csv', delimiter=';', encoding = \"ISO-8859-2\", nrows = nRowsRead)\ndf.dataframeName = 'german.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","2da58db1":"data = df.copy(deep=True)\ndata = data.dropna(how='any')","54a98c3d":"smalldata = data[['Age_years', 'Account_Balance', 'Duration_of_Credit_monthly']]\nsmalldata.head()","4a80603b":"from mpl_toolkits.mplot3d import Axes3D\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nfig = plt.figure()\nax = Axes3D(fig)\n\n# data for 3d plot\nax.scatter(smalldata['Age_years'], smalldata['Account_Balance'], smalldata['Duration_of_Credit_monthly'])","b5f0fe85":"#Standardizing data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nstd_data = scaler.fit_transform(smalldata)\nstd_data","60d1d35b":"mean_vec = np.mean(std_data,axis=0)\ncov_mat = (std_data - mean_vec).T.dot((std_data - mean_vec)) \/ (std_data.shape[0]-1)\n\n#or we can directly use numpy library method\nnp.cov(std_data.T)","47545a67":"#eigen decompostion of the covariance matrix\neig_vals, eig_vectors = np.linalg.eig(cov_mat)\n\nprint(\"Eigen values:\", eig_vals)\nprint(\"Eigen vectors:\", eig_vectors)","5dea3788":" # correlation matrix\n# in most datasets especially financial datasets eigendecomposition on covariance matrix and\n# correlation matrix yields the same results since correlation matrix can be\n# understood as the normalized covariance matrix\n# so here is the eigendecompostion on correlation matrix\ncorr_mat = np.corrcoef(std_data.T)\neig_vals, eig_vectors = np.linalg.eig(corr_mat)\nprint(\"Eigen Values:\", eig_vals)\nprint(\"Eigen vectors:\", eig_vectors)","4731db15":"# eigendecomposition of raw data based on correlation matri\ncorr_mat_raw = np.corrcoef(std_data.T)\neig_vals, eig_vecs = np.linalg.eig(corr_mat_raw)\nprint('Eigenvals are:', eig_vals)\nprint('eigenvectors are:', eig_vecs)","d0723722":"# while eigendecompostion of covariance matrix is more intutive, most implementations use singular value decompostion to increase computational efficiency\nu,s,v = np.linalg.svd(std_data.T)\nu","8e34c4bb":"# make a list of (eigenvalue, eigenvectors) tuples\neig_pairs = [(eig_vals[i], eig_vecs[i]) for i in range(len(eig_vals))]\n# eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:i]) for i in range(len(eig_vals))]\n\n# print(\"Eig pairs are\\n\",eig_pairs )\n# sort the eigenvalue, eigenvector tuples from high to low\neig_pairs.sort()\neig_pairs.reverse()\n\nfor i in eig_pairs:\n    print(i[0])","3812768e":"#Estimating the importance of each feature vector using explined variance\n\nimport matplotlib.pyplot as plt\ntot = sum(eig_vals)\nvar_exp = [(i\/tot)*100 for i in sorted(eig_vals, reverse=True)]\ncum_var_exp = np.cumsum(var_exp)\n\nx_coordinates = ('PC1', 'PC2', 'PC3')\ny_pos = np.arange(len(x_coordinates))\n\nplt.bar(y_pos, var_exp, align='center')\nplt.ylabel('Explained var in %')\nplt.xticks(y_pos, x_coordinates)\nplt.plot(cum_var_exp, 'r')\nplt.show()","40fdf787":"eig_pairs","1cdca784":"# making the new projection matrix \npro_mat = np.hstack((eig_pairs[0][1].reshape(3,1),\n                   eig_pairs[1][1].reshape(3,1)))\n\nprint('Projection Matrix :\\n', pro_mat)","25406b8e":"pro_mat.shape","4c44f61a":"std_data","30c0fa77":"new_mat = std_data.dot(pro_mat)\nnew_mat","3caa9fe0":"X = [new_mat[i][0] for i in range(len(new_mat))]\ny = [new_mat[i][1] for i in range(len(new_mat))]\nplt.xlabel(\"Feature 1\")\nplt.ylabel(\"Feature 2\")\nplt.scatter(X, y)","c2615ce2":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thanks to Abhishek Singhal for all the code' )","92dba01c":"#Selecting Principal Components","b8d6b94f":"#Code by  Abhishek Singhal  https:\/\/www.kaggle.com\/abhhii\/pcaimplement\/notebook","a40cfe3b":"![](https:\/\/miro.medium.com\/max\/1079\/1*G1-n0R-c0IQ4GMrAzDNySw.png)medium.com ","465ef5a4":"This plot shows that around 58% variance can be explained by first component and around 30% variance is explained by second component. Thus they both cover around 88% of the variance and third component can be dropped without losing too much information.","b764746f":"#A small dataset where each rocord is a 3 dimensional vector"}}