{"cell_type":{"e952c687":"code","28ef5bcc":"code","48ce11a7":"code","2484835f":"code","84aefe80":"code","5a5f903d":"code","f37a8555":"code","e0cc0495":"code","f46b4790":"code","0a8af398":"code","768af13a":"code","2d8301d5":"code","a49ebc70":"code","29d8d095":"code","09a8ec05":"code","ce0d6e46":"code","31b2d49f":"code","44c9eb07":"code","81df5db8":"code","a9173306":"code","4de8c6d9":"code","4ce73b36":"code","1e6875e8":"code","1315d9c0":"code","6ba23022":"code","d533a4d2":"code","f5d85b97":"code","ff91c01a":"code","c87468bb":"code","4a23c8cc":"code","239927e9":"code","32858946":"code","84a30208":"code","c03c6c99":"code","98251ee8":"code","5bafd9d2":"markdown","362fce14":"markdown","f6575945":"markdown","fd402cba":"markdown","c59115a9":"markdown","3f6cf2db":"markdown","da96c5f7":"markdown","c02a56ec":"markdown","3d30ffa0":"markdown","d38aa636":"markdown","cca6c259":"markdown"},"source":{"e952c687":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28ef5bcc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA, KernelPCA\nfrom sklearn.decomposition import FastICA\nfrom sklearn.manifold import Isomap\nimport umap\nfrom sklearn.manifold import TSNE\nfrom matplotlib import pyplot as plt\nfrom sklearn import metrics\n%matplotlib inline","48ce11a7":"df = pd.read_csv(r'\/kaggle\/input\/heart-failure-prediction\/heart.csv')","2484835f":"df.head()","84aefe80":"df.info()","5a5f903d":"df.describe()","f37a8555":"df.shape","e0cc0495":"print(df['Sex'].unique())\nprint(df['ChestPainType'].unique())\nprint(df['RestingECG'].unique())\nprint(df['ExerciseAngina'].unique())\nprint(df['ST_Slope'].unique())","f46b4790":"df['Sex'].value_counts()\nsns.countplot(data=df, x='Sex')","0a8af398":"df['ChestPainType'].value_counts()\nsns.countplot(data=df, x='ChestPainType')","768af13a":"df['RestingECG'].value_counts()\nsns.countplot(data=df, x='RestingECG')","2d8301d5":"df['ExerciseAngina'].value_counts()\nsns.countplot(data=df, x='ExerciseAngina')","a49ebc70":"df['ST_Slope'].value_counts()\nsns.countplot(data=df, x='ST_Slope')","29d8d095":"df.isnull().sum()","09a8ec05":"df = pd.get_dummies(df, columns = ['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope'])\nprint(df)","ce0d6e46":"df.corr()['HeartDisease'].sort_values()","31b2d49f":"plt.figure(figsize=(16,9))\nsns.heatmap(df.corr(), annot=True,cmap=\"coolwarm\")","44c9eb07":"#checking for outliers\nplt.figure(figsize=(20,15))\n\nfor i in range(6):\n  plt.subplot(2,3, i+1)\n  sns.boxplot(data=df, x='HeartDisease', y=df[df.columns[i]])","81df5db8":"X = df.drop('HeartDisease', axis = 1)\ny = df['HeartDisease']","a9173306":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=101)","4de8c6d9":"scaler=StandardScaler()\nscaler.fit(X_train)","4ce73b36":"X_train=scaler.transform(X_train)\nX_test=scaler.transform(X_test)","1e6875e8":"plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train)","1315d9c0":"pca = PCA(n_components=1, random_state=123)\npca.fit(X_train)\npca_result = pca.transform(X_train)\npca_result","6ba23022":"plt.scatter(pca_result[:, 0], range(0, len(pca_result)), c=y_train)","d533a4d2":"kpca = KernelPCA(n_components=1, kernel='poly', gamma=10, random_state=123)\nkpca.fit(X)\nkpca_result = kpca.transform(X)\nkpca_result","f5d85b97":"plt.scatter(pca_result[:, 0], range(0, len(pca_result)), c=y_train)","ff91c01a":"ica = FastICA(n_components=1, random_state=123)\nica.fit(X_train)\nica_result = ica.transform(X_train)\nica_result","c87468bb":"plt.scatter(ica_result[:, 0], range(0, len(ica_result)), c=y_train)","4a23c8cc":"isomap = Isomap(n_components=1)\nisomap.fit(X_train)\nisomap_result = isomap.transform(X_train)\nisomap_result","239927e9":"plt.scatter(isomap_result[:, 0], range(0, len(isomap_result)), c=y_train)","32858946":"tsne = TSNE(n_components=1, perplexity=50 ,random_state=123)\ntsne_result = tsne.fit_transform(X_train)\ntsne_result","84a30208":"plt.scatter(tsne_result[:, 0], range(0, len(tsne_result)), c=y_train)","c03c6c99":"u = umap.UMAP(n_components=1)\nu.fit(X_train)\nu_result = u.transform(X_train)\nu_result","98251ee8":"plt.scatter(u_result[:, 0], range(0, len(u_result)), c=y_train)","5bafd9d2":"# Missing Values","362fce14":"# Exploratory Data Analysis","f6575945":"# One-Hot Encoding","fd402cba":"# Split Data into train,test","c59115a9":"# Isomap","3f6cf2db":"# Normalization Data\u00b6","da96c5f7":"# FastICA","c02a56ec":"# TSNE","3d30ffa0":"# umap","d38aa636":"# PCA","cca6c259":"# Import and print the dataset"}}