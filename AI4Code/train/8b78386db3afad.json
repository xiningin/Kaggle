{"cell_type":{"4e495950":"code","1e296dc9":"code","7ad69d49":"code","669b2abc":"code","e72f1b10":"code","a15a922b":"code","838fd463":"code","c1321e9d":"code","21f4477d":"code","a9fd30c7":"code","fe0b8ad9":"code","0561bfe4":"code","a10b9295":"code","7331ee0b":"code","bf7b92f6":"code","ae3bf37b":"code","0f7c7aa6":"code","6c562149":"code","8f73b83c":"code","fd58cf68":"code","044d790a":"code","d19947ae":"code","8aeabf88":"code","be917c4b":"code","f42da0b3":"code","6562e19e":"code","187e7830":"code","5d3eb608":"code","ce159e64":"code","50530d76":"code","bbc88221":"code","0f68c1a8":"code","d8d66849":"code","53bb7db5":"code","86a80d58":"code","aa4d1a40":"code","a4f16526":"code","491185a5":"code","bcf54bdb":"code","79d062d8":"code","cdabd845":"code","2e89badf":"code","645b6b1b":"code","ce9a8e4e":"code","63a168cc":"code","7188e03e":"code","ce0f16b8":"code","460a49c2":"code","7aa66229":"code","aab56689":"code","5ada2644":"code","7bf7fed0":"markdown","fffd20c2":"markdown","55a48e9b":"markdown","49325cd3":"markdown","17803157":"markdown","9674f9f1":"markdown","cc75c8bb":"markdown","897bed77":"markdown","efa12070":"markdown","9c00fe52":"markdown","c93bc259":"markdown","cbdbd043":"markdown","73918e23":"markdown","4452b17b":"markdown","0518ddd7":"markdown","bb7c4236":"markdown","604a423e":"markdown","43c12cad":"markdown","2594d8e5":"markdown","265ae017":"markdown"},"source":{"4e495950":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"seaborn-whitegrid\")","1e296dc9":"# Importing our Dataset\n\ncancer_patient = pd.read_csv(\"..\/input\/cancer-patientscsv\/cancer_patient.csv\")\ncancer_patient.head()","7ad69d49":"len(cancer_patient)","669b2abc":"cancer_patient.info();","e72f1b10":"cancer_patient.describe().T","a15a922b":"fig = plt.figure(figsize = (13,8))\nsns.heatmap(cancer_patient.corr(),cmap='coolwarm',annot=True);","838fd463":"fig, ax = plt.subplots()\nhist = ax.hist(x = cancer_patient[\"Age\"]);","c1321e9d":"#Required outside of function. This needs to be activated first when plotting in every code block\nfig, ax = plt.subplots()\n\n#Count plot\nplot = sns.countplot(data = cancer_patient, x='Level', hue='Gender', palette=['darkblue','darkred'])","21f4477d":"cancer_patient.columns","a9fd30c7":"cancer_over50 = cancer_patient[cancer_patient[\"Age\"] > 50]\ncancer_over50.head()","fe0b8ad9":"# Making Subplots\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows = 2, ncols= 2, figsize=(10, 10))\n\n# Adding Data to the plot\nscatter = ax1.scatter(x = cancer_over50[\"Age\"], y = cancer_over50[\"Alcohol use\"], cmap = \"winter\")\n\n# For Plot ax1\nax1.set(title = \"Age with respect to Alcohol Use\", \n        xlabel = \"Age\", \n        ylabel = \"Alcohol Use\")\nax1.axhline(cancer_over50[\"Alcohol use\"].mean(),\n           linestyle = \"--\");\nax1.set_xlim([50, 80])\nax1.set_ylim([0, 8.5])\n\n# For Plot ax2\nscatter = ax2.scatter(x = cancer_over50[\"Age\"], y = cancer_over50[\"Genetic Risk\"])\nax2.set(title = \"Age with respect to Genetic Risk\", xlabel = \"Age\", ylabel = \"Genetic Risk\")\nax2.axhline(cancer_over50[\"Genetic Risk\"].mean(),\n           linestyle = \"--\");\nax2.set_xlim([50, 80])\nax2.set_ylim([0, 7.5])\n\n# For Plot ax3\nscatter = ax3.scatter(x = cancer_over50[\"Age\"], y = cancer_over50[\"Smoking\"])\nax3.set(title = \"Age with respect to Smoking\", xlabel = \"Age\", ylabel = \"Smoking\")\nax3.axhline(cancer_over50[\"Smoking\"].mean(),\n           linestyle = \"--\");\nax3.set_xlim([50, 80])\nax3.set_ylim([0, 8.5])\n\n# For Plot ax4\nscatter = ax4.scatter(x = cancer_over50[\"Gender\"], y = cancer_over50[\"Alcohol use\"])\nax4.set(title = \"Age with respect to Alcohol Use\", xlabel = \"Gender\", ylabel = \"Alcohol Use\")\nax4.axhline(cancer_over50[\"Alcohol use\"].mean(),\n           linestyle = \"--\");","0561bfe4":"cancer_over50.head()","a10b9295":"len(cancer_patient), len(cancer_over50)","7331ee0b":"cancer_patient.columns","bf7b92f6":"fig, ax = plt.subplots()\n\nhistt = ax.hist(x = cancer_patient[\"Level\"], bins = 10, color ='darkred')\n\nax.set(xlabel = \"Level\", ylabel = \"Count\");","ae3bf37b":"cancer_patient.info()","0f7c7aa6":"cancer_patient[\"Level\"].replace([\"Low\", \"Medium\", \"High\"], [\"0\", \"1\", \"2\"], inplace=True)","6c562149":"cancer_patient[\"Level\"] = cancer_patient[\"Level\"].astype(int)","8f73b83c":"cancer_patient.head().info()","fd58cf68":"fig, ax = plt.subplots(figsize = (10, 6));\n\nscatter = ax.scatter(x = cancer_patient[\"Age\"], \n                     y = cancer_patient[\"Genetic Risk\"],\n                     c = cancer_patient[\"Level\"],\n                     cmap = \"winter\")\n\nax.set(xlabel = \"Age\", \n       ylabel = \"Genetic Risk\");\n\nax.legend(*scatter.legend_elements(), title = \"Level\");\n\nax.axhline(cancer_patient[\"Level\"].mean(),\n           linestyle = \"--\");","044d790a":"cancer_patient.plot.kde(figsize = (20,8));","d19947ae":"np.array([cancer_patient[\"Gender\"][:10]])","8aeabf88":"male = 0\nfemale = 0\nfor i in cancer_patient[\"Gender\"]:\n    if i == 1:\n        male += 1\n    elif i == 2:\n        female += 1\nf\"Number of Male: {male}, Number of females: {female}\"","be917c4b":"# Make a histogram here\ncancer_patient_male = cancer_patient[cancer_patient[\"Gender\"] == 1]\ncancer_patient_male.head()","f42da0b3":"cancer_patient_female = cancer_patient[cancer_patient[\"Gender\"] == 2]\ncancer_patient_female.head()","6562e19e":"plt.hist(cancer_patient_male);","187e7830":"plt.hist(cancer_patient_female);","5d3eb608":"cancer_patient_male.plot.hist(figsize = (15, 50), subplots = True);","ce159e64":"cancer_patient_female.plot.hist(figsize = (15, 50), subplots = True);","50530d76":"fig, ax = plt.subplots()\nscatter = ax.scatter(x = cancer_patient_male[\"Alcohol use\"], y = cancer_patient_male[\"Smoking\"])\n# cancer_patient_male.plot(x = cancer_patient_male[\"Alcohol use\"], y = cancer_patient_male[\"Age\"], kind = \"scatter\");","bbc88221":"fig, ax = plt.subplots()\nscatter = ax.scatter(x = cancer_patient_female[\"Alcohol use\"], y = cancer_patient_female[\"Smoking\"]);","0f68c1a8":"fig, ax = plt.subplots()\ncancer_patient_male.plot(kind = \"bar\", x = \"Genetic Risk\", y = \"Smoking\", ax = ax);","d8d66849":"len(cancer_patient_male), len(cancer_patient_female)","53bb7db5":"cancer_patient.head()","86a80d58":"fig, ax = plt.subplots()\ncancer_patient.plot(kind = \"bar\", x = \"Gender\", y = \"Age\", ax = ax);","aa4d1a40":"fig, ax = plt.subplots(figsize = (10, 6))\nscatter = ax.scatter(x = cancer_patient[\"Age\"], \n                     y = cancer_patient[\"Alcohol use\"], \n                     c = cancer_patient[\"Level\"], \n                     cmap = \"winter\")\n\nax.set(xlabel = \"Age\", \n       ylabel = \"Alcohol use\");\n\nax.legend(*scatter.legend_elements(), title = \"Level\");\n\nax.axhline(cancer_patient[\"Level\"].mean(),\n           linestyle = \"--\");","a4f16526":"fig, ax=plt.subplots()#Required outside of function. This needs to be activated first when plotting in every code block\nplot=sns.scatterplot(data=cancer_patient, \n                     x='Alcohol use',\n                     y='Fatigue', \n                     hue='Level', \n                     palette=['darkblue','darkred','darkgreen'], \n                     s=50, \n                     marker='o')#Count plot","491185a5":"fig, ax=plt.subplots()#Required outside of function. This needs to be activated first when plotting in every code block\nplot=sns.scatterplot(data=cancer_patient, \n                     x='Genetic Risk',\n                     y='Smoking', \n                     hue='Level', \n                     palette=['darkblue','darkred','darkgreen'], \n                     s=50, \n                     marker='o')#Count plot","bcf54bdb":"cancer_patient.head()","79d062d8":"cancer_patient.drop([\"Patient Id\"], axis = 1, inplace= True)","cdabd845":"cancer_patient.head()","2e89badf":"from sklearn import svm\nfrom sklearn.model_selection import train_test_split\n\nX = cancer_patient.drop([\"Level\"], axis = 1)\ny = cancer_patient[\"Level\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nsv = svm.SVC()\nsv.fit(X_train, y_train)\nsv.score(X_test, y_test)","645b6b1b":"y_preds = sv.predict(X_test)\ny_preds[:10]","ce9a8e4e":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nprint(classification_report(y_test, y_preds))","63a168cc":"confusion_matrix(y_test, y_preds)","7188e03e":"accuracy_score(y_test, y_preds)","ce0f16b8":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n\nX = cancer_patient.drop([\"Level\"], axis = 1)\ny = cancer_patient[\"Level\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\nknn.score(X_test, y_test)","460a49c2":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\nX = cancer_patient.drop([\"Level\"], axis = 1)\ny = cancer_patient[\"Level\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nrfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)\nrfr.score(X_test, y_test)","7aa66229":"from sklearn.model_selection import cross_val_score\n\ncrossVal_sv = cross_val_score(sv, X, y)\ncrossVal_knn = cross_val_score(knn, X, y)\ncrossVal_rfr = cross_val_score(rfr, X, y)\n\nprint(f\"For SupportVectorMachine: {crossVal_sv}, \\nFor KNeighborClassifier: {crossVal_knn}, \\nFor RandomForestRegressor: {crossVal_rfr}\")","aab56689":"# For SupportVectorMachine\n\nnp.random.seed(42)\n\nsv_single_score = sv.score(X_test, y_test)\n\nsv_cross_val_score = np.mean(cross_val_score(sv, X, y))\n\nsv_single_score, sv_cross_val_score","5ada2644":"# For KNeighborClassifier\n\nnp.random.seed(42)\n\nknn_single_score = knn.score(X_test, y_test)\n\nknn_cross_val_score = np.mean(cross_val_score(knn, X, y))\n\nknn_single_score, knn_cross_val_score","7bf7fed0":"### As we can see `Level` dtype is not int so first we replace it with numbers then into type int","fffd20c2":"**Cross val for all the above algorithms to make sure for scores accuracy**","55a48e9b":"**So the result from KNeighborClassifier has increaed and we can clearly see the change**","49325cd3":"## Our data is analyzed and ready for Model Training and Machine Learning","17803157":"**Cancer found in people age over 50**","9674f9f1":"**Plotting with respect to `Age` and `Genetic Risk`**","cc75c8bb":"**There are only 134 patients who are Over 50 so we analyse the entire data irresespective of age to achieve fruitfull results later.**","897bed77":"* **There is also imbalance in data, so let's see how we train and predict with this dataset.**","efa12070":"### Data is already clean, no null values so let's analyse further","9c00fe52":"##### KNeighborClassifier almost giving 100% results","c93bc259":"#### Lastly we use RandomForestClassifier","cbdbd043":"**Comparing `Score` results with `Cross Value Score`**","73918e23":"#### Above entire data is in `int`","4452b17b":"#### First we use Support Vector Machine Estimator","0518ddd7":"**Number of `Male` & `Females`**","bb7c4236":"## The problem statement is that we need to predict those people who are prone to have Cancer Disease with respect to different parameters such as their `Age`, `Gender`, `Alcohol Use`, `Genetic Risk` and `Smoking`.","604a423e":"### Fitting the model\/algorithm and use it to make predictions on our data.","43c12cad":"### Checking accuracy with other model","2594d8e5":"## Importing useful Libraries","265ae017":"<h1><center>Cancer Disease Prediction System Using Machine Learning<\/center><\/h1>"}}