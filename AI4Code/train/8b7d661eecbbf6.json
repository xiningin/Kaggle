{"cell_type":{"cfa8bf83":"code","6172c8b8":"code","6cdc7d2a":"code","49bb5b17":"code","c24765d0":"code","b0dd9c4d":"code","d6e4f4a1":"code","79da3def":"code","e5f5554e":"code","a4156385":"code","2d1d473a":"code","755ff797":"code","bfcf676f":"code","86c95f51":"code","4c3617d6":"code","6c45c80b":"code","fe4ea83f":"code","17ae5054":"code","19058103":"code","3ab460d3":"code","6d0fba39":"code","75c65a7f":"code","250841fb":"code","abfee3e8":"code","d0984189":"code","6e4686be":"code","ba146bd6":"code","5986b058":"code","998c0012":"code","a56deb27":"code","ed3a82bb":"code","3ce8de57":"code","c1da2ac6":"code","64ebddf6":"code","44e9a976":"code","21e4005e":"code","fbbca75a":"code","f681abb3":"code","fdb03f5c":"code","8200e0b3":"code","ca0960db":"code","a27e91fb":"code","6854e8f6":"code","0eb78cc7":"code","da06232f":"code","ab6f08d8":"code","c3bb4d70":"code","dd84e68c":"code","07496a6b":"markdown","ad642465":"markdown","e411c20b":"markdown","6b11c1f3":"markdown","1637421d":"markdown","33f6e3e4":"markdown","9b7f5c8d":"markdown","113cef73":"markdown","8cb141a0":"markdown","5ea98238":"markdown","caa8af20":"markdown","c0287066":"markdown","5b1da5b2":"markdown","11da06e9":"markdown","192d0f17":"markdown","898111a5":"markdown","a8c132e0":"markdown","5312b9ca":"markdown","26f78ed0":"markdown","e71d2d0d":"markdown","7b23ce4a":"markdown","c53daa8f":"markdown","15752e25":"markdown","03061f98":"markdown"},"source":{"cfa8bf83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6172c8b8":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","6cdc7d2a":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","49bb5b17":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","c24765d0":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","b0dd9c4d":"col = ['Restaurant_id', 'City', 'Cuisine_Style', 'Ranking', 'Price_Range', 'Number_of_Reviews', 'Reviews', 'URL_TA', 'ID_TA','sample','Rating']\ndata.columns = col","d6e4f4a1":"data.info(100000)","79da3def":"data","e5f5554e":"data.Restaurant_id.value_counts()\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442, \u0432\u0441\u0435 \u043e\u043a\n\nprint(data.Restaurant_id.describe())\n# \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e - \u0432 \u043e\u0434\u043d\u043e\u043c\u0443 id  \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438,\n# \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n\ndata.Restaurant_id = [i[3:] for i in data.Restaurant_id]\ndata.Restaurant_id = [int(i) for i in data.Restaurant_id]\n\nprint(' ')\nprint(len(data.Restaurant_id))\nprint(type(data.Restaurant_id[1]))\n\n# \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043b\u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435","a4156385":"a=data.Restaurant_id.value_counts()\na=dict(a)\na=pd.DataFrame({'count':a}, columns=['count'])\n\nA=a.index\nB=a.values\n\ndata['chain']= data['Restaurant_id'].replace(A, B)","2d1d473a":"data.City.value_counts()\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442, \u0433\u043e\u0440\u043e\u0434\u0430 \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f, \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u0440\u0430\u043a\u043b\u0430\u0434\u043a\u043e\u0439 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043c \u043d\u0435\u0442, \u0432\u0441\u0435 \u043e\u043a\n\nprint(data.City.describe())\n\nA = list(data.City.value_counts().keys())\nB = range(0, len(A))\ndict_city = dict(zip(A, B))\n# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n\ndata['City_ind'] = data['City'].replace(A, B)\n\nprint(' ')\nprint(len(data.City_ind))\nprint(type(data.City_ind[1]))\n\n# \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439 \u043d\u0435\u0442 + \u043c\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u0433\u043e\u0440\u043e\u0434\u0430 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438\u043d\u0434\u0435\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b","755ff797":"A = list(data.City.value_counts().keys())\ndata1=pd.DataFrame()\ndata1['City'] = data['City']\ndata1['Ranking']=data['Ranking']\ndata1=pd.DataFrame(data1.groupby(['City']).max())\ndata2=data1['Ranking']\nA=list(data2.keys())\nB=list(data2)\n\ndata['Len_rest_in_city'] = data['City'].replace(A, B)\n\ndata['Std_ranking']=data['Ranking']\/data['Len_rest_in_city']\n\ndata.Std_ranking.describe()","bfcf676f":"B = [8961989, 2148271, 3266126, 1636762, 3769495, 1397852, 4110000, 1324277, 506654, 1888776, 860124,\n     179277, 1899160, 1471508, 481181, 975904, 1752286, 1790658, 1173179, 794128, 664046, 513210, 424008,\n     237591, 201818, 779115, 693491, 643272, 432862, 626108, 295504]\ndict_res = dict(zip(A, B))\n# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e \u043a\u043e\u043b-\u0432\u043e\u043c \u0436\u0438\u0442\u0435\u043b\u0435\u0439\n\ndata['Residents'] = data['City'].replace(A, B)\n\nprint(len(data.Residents))\nprint(type(data.Residents[1]))","86c95f51":"data['Country'] = data.City\ndata['Country'] = data['Country'].replace('London', 'GreatBritain')\ndata['Country'] = data['Country'].replace('Paris', 'France')\ndata['Country'] = data['Country'].replace('Madrid', 'Spain')\ndata['Country'] = data['Country'].replace('Barcelona', 'Spain')\ndata['Country'] = data['Country'].replace('Berlin', 'Germany')\ndata['Country'] = data['Country'].replace('Milan', 'Italy')\ndata['Country'] = data['Country'].replace('Rome', 'Italy')\ndata['Country'] = data['Country'].replace('Prague', 'CzechRepublic')\ndata['Country'] = data['Country'].replace('Lisbon', 'Portugal')\ndata['Country'] = data['Country'].replace('Vienna', 'Austria')\ndata['Country'] = data['Country'].replace('Amsterdam', 'Netherlands')\ndata['Country'] = data['Country'].replace('Brussels', 'Belgium')\ndata['Country'] = data['Country'].replace('Hamburg', 'Germany')\ndata['Country'] = data['Country'].replace('Munich', 'Germany')\ndata['Country'] = data['Country'].replace('Lyon', 'France')\ndata['Country'] = data['Country'].replace('Stockholm', 'Sweden')\ndata['Country'] = data['Country'].replace('Budapest', 'Hungary')\ndata['Country'] = data['Country'].replace('Warsaw', 'Poland')\ndata['Country'] = data['Country'].replace('Dublin', 'Irland')\ndata['Country'] = data['Country'].replace('Copenhagen', 'Denmark')\ndata['Country'] = data['Country'].replace('Athens', 'Greece')\ndata['Country'] = data['Country'].replace('Edinburgh', 'Scotland')\ndata['Country'] = data['Country'].replace('Zurich', 'Switzeland')\ndata['Country'] = data['Country'].replace('Oporto', 'Portugal')\ndata['Country'] = data['Country'].replace('Geneva', 'Switzeland')\ndata['Country'] = data['Country'].replace('Krakow', 'Poland')\ndata['Country'] = data['Country'].replace('Oslo', 'Norway')\ndata['Country'] = data['Country'].replace('Helsinki', 'Finland')\ndata['Country'] = data['Country'].replace('Bratislava', 'Slovakia')\ndata['Country'] = data['Country'].replace('Luxembourg', 'Luxembourg')\ndata['Country'] = data['Country'].replace('Ljubljana', 'Slovenia')\n\nA = list(data.Country.value_counts().keys())\nB = range(0, len(A))\ndict_country = dict(zip(A, B))\n# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0441\u0442\u0440\u0430\u043d\n\n\ndata['Country_ind'] = data['Country'].replace(A, B)\n\nprint(len(data.Country_ind))\nprint(type(data.Country_ind[1]))","4c3617d6":"data['Rew_of'] = data['Number_of_Reviews']\/data['Residents']\ndata['Rew_of'] = data['Rew_of'].fillna(0)\n\n\n\nprint(len(data.Rew_of))\nprint(type(data.Rew_of[1]))","6c45c80b":"data['Cuisine_Style'] = data['Cuisine_Style'].fillna('\"\"No_info\"')\n# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n\nnew = pd.DataFrame(data.Cuisine_Style.dropna())\na = list(new.Cuisine_Style)\nb = list()\n\ndef l(x):\n    i = 0\n    for g in x:\n        f = x[i].split(',')\n        v = 0\n        for g in f:\n            h = f[v][2:-1].replace(\"'\", '')\n            v = +1\n            b.append(h)\n        i += 1\n        \nl(a)\n\nfrom collections import Counter\n\ncoun=Counter(b)\ncoun=dict(coun)\ncoun=pd.DataFrame({'count':coun}, columns=['count'])\na=coun['count'].mean()\n\nb=list(coun.query('count > @a').index)\nb\n\n#\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438\n\ndef find_item(cell):\n    if item in cell:\n        return 1\n    return 0\n\n\nfor item in b:\n    data[item] = data['Cuisine_Style'].apply(find_item)\n\ndata['Cuisine_Style'] = data['Cuisine_Style'].apply(lambda x: len(x))\n\nlen(data['Cuisine_Style'])\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b, \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u044b","fe4ea83f":"print(data.Price_Range.describe())\n\ndata['Price_Range'] = data['Price_Range'].replace('$', 1)\ndata['Price_Range'] = data['Price_Range'].replace('$$ - $$$', 2)\ndata['Price_Range'] = data['Price_Range'].replace('$$$$', 3)\n\na = data['Price_Range'].mean()\na = int(a)\ndata['Price_Range'] = data['Price_Range'].fillna(a)\n\nprint('')\nprint(len(data.Price_Range))\nprint(type(data.Price_Range[1]))\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u0431\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043d\u0430 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435","17ae5054":"print(data.Reviews.describe())\n\nfrom datetime import datetime, date, time\ndata['Reviews'] = data.Reviews.replace(\"[[], []]\", 'No_info')\n# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n\ndata['Last_rew'] = data['Reviews']\n\ndata['Last_rew']=data['Last_rew'].str[-27:-17]\n\nnow = datetime.now()\n\n#base['Last_rew'][base.Last_rew.str.contains(\"]\")]=now\ndata['Last_rew'][data.Last_rew.str.contains(\"]\")==True] = now\ndata['Last_rew'] = data['Last_rew'].fillna(now)\n\n# \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0435\u0437 \u0434\u0430\u0442\u044b \u043a \u0441\u0435\u0433\u043e\u0434\u043d\u044f\n\ndata['Last_rew'] = [pd.to_datetime(i) for i in data.Last_rew]\n\n# \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0448\u043b\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n\ndata['Last_rew_data'] = data['Last_rew']-now\ndata['Last_rew_data'] = [i.total_seconds() for i in data.Last_rew_data]\ndata['Last_rew_data'] = data['Last_rew_data']\ndata['Last_rew_data'] = data['Last_rew_data'].fillna(0)\n\n\n\nprint('')\nprint(len(data.Last_rew_data))\nprint(type(data.Last_rew_data[1]))","19058103":"from datetime import datetime, date, time\n\nm=data['Number_of_Reviews'].mean()\n\nprint(data['Number_of_Reviews'].describe())\n# \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u0442\n\ndata['Number_of_Reviews'].value_counts()\n# \u043d\u043e \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 - \u0442\u0430\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n\ndata['Number_of_Reviews'] = data['Number_of_Reviews'].fillna('No_info')\n# \u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 Not_info\n\na = data.query('Reviews == \"No_info\" & Number_of_Reviews == \"No_info\"')\nb = list(a.index)\ndata['Number_of_Reviews'][b] = 0\n# \u0433\u0434\u0435 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043f\u0440\u0435\u0432\u044c\u044e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 - \u0441\u0442\u0430\u0432\u0438\u043c 0\n\nlen(data['Number_of_Reviews'])\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043c\u043e\u0433\u043b\u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0421 2,5+ \u0442\u044b\u0441\u044f\u0447 \u0441\u043d\u0438\u0437\u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0434\u043e 900+\n\ndata['Number_of_Reviews'] = data['Price_Range'].replace('No_info', m)\n\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043c\u043e\u0433\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\n\n#data.Number_of_Reviews = [float(i) for i in data.Number_of_Reviews]\n\nprint('')\nprint(len(data.Number_of_Reviews))\nprint(type(data.Number_of_Reviews[1]))","3ab460d3":"A = list(data.City.value_counts().keys())\ndata1=pd.DataFrame()\ndata1['City'] = data['City']\ndata1['Number_of_Reviews']=data['Number_of_Reviews']\n\ndata1=pd.DataFrame(data1.groupby(['City']).sum())\ndata2=data1['Number_of_Reviews']\nA=list(data2.keys())\nB=list(data2)\n\n\n\ndata['Len_rew'] = data['City'].replace(A, B)\n\ndata['Std_num_rew']=data['Number_of_Reviews']\/data['Len_rew']","6d0fba39":"print(data['ID_TA'].describe())\n\ndata['ID_TA']=data['ID_TA'].str[1:]\ndata.ID_TA = [float(i) for i in data.ID_TA]\n\nprint('')\nprint(len(data.ID_TA))\nprint(type(data.ID_TA[1]))","75c65a7f":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Ranking'].hist(bins=100)","250841fb":"df_train['City'].value_counts(ascending=True).plot(kind='barh')","abfee3e8":"df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)","d0984189":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","6e4686be":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","ba146bd6":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","5986b058":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","998c0012":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data[col].drop(['sample'], axis=1).corr(),)","a56deb27":"data = data.drop('URL_TA', axis=1)\ndata = data.drop('Reviews', axis=1)\ndata = data.drop('Last_rew', axis=1)\ndata = data.drop('City', axis=1)\ndata = data.drop('Country', axis=1)\ndata = data.drop('Restaurant_id', axis=1)","ed3a82bb":"#data = data.drop('Len_rest_in_city', axis=1)","3ce8de57":"data = data.drop('chain', axis=1)","c1da2ac6":"data = data.drop('Cuisine_Style', axis=1)","64ebddf6":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data.drop(['sample'], axis=1).corr(),)","44e9a976":"pd.options.display.max_info_columns \ndata.info(verbose=True, max_cols=False, null_counts=True)","21e4005e":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = data.query('sample == 1').drop(['sample'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","fbbca75a":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","f681abb3":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","fdb03f5c":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","8200e0b3":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","ca0960db":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","a27e91fb":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","6854e8f6":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","0eb78cc7":"test_data.sample(10)\ntest_data = test_data.drop(['Rating'], axis=1)","da06232f":"len(test_data)","ab6f08d8":"len(sample_submission)","c3bb4d70":"predict_submission = model.predict(test_data)\n\nlen(predict_submission)","dd84e68c":"def round_nearest(x, a):\n    return round(x \/ a) * a\n\nsample_submission['Rating'] = predict_submission.round(1)\nsample_submission['Rating'] = round_nearest(sample_submission['Rating'], 0.5)\n\n\nsample_submission.head(10)\n\nsample_submission.to_csv('submission.csv', index=False)","07496a6b":"# Cleaning and Prepping Data","ad642465":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","e411c20b":"**\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 ID_TA (\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 TripAdvisor)**","6b11c1f3":"# Data Preprocessing","1637421d":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 City (\u0433\u043e\u0440\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d)**","33f6e3e4":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Number_of_Reviews (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435)**","9b7f5c8d":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Restaurant_id (\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \/ \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432)**","113cef73":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Cuisine_Style (\u043a\u0443\u0445\u043d\u044f \u0438\u043b\u0438 \u043a\u0443\u0445\u043d\u0438, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u0431\u043b\u044e\u0434\u0430, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0435 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435)**","8cb141a0":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","5ea98238":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","caa8af20":"# DATA","c0287066":"**\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0438\u043a \u0441 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e (\u043a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u043f\u0438\u0448\u0443\u0442 \u0438\u0445)**","5b1da5b2":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Reviews (\u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0434\u0432\u0443\u0445 \u043e\u0442\u0437\u044b\u0432\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430)**","11da06e9":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Price_Range (\u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435)**","192d0f17":"**\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Country (\u0441\u0442\u0440\u0430\u043d\u0430)**","898111a5":"**\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Residents (\u043a\u043e\u043b-\u0432\u043e \u0436\u0438\u0442\u0435\u043b\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435)**","a8c132e0":"# import","5312b9ca":"**\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0438\u043a \u0441 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043b-\u0432\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443**","26f78ed0":"**\u0423\u0434\u0430\u043b\u0438\u043c \u0432\u0441\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0438\u043b\u0438 \u043d\u0435\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0438\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0440\u0442\u044f\u0442 \u043d\u0430\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442**","e71d2d0d":"# Model \n\u0421\u0430\u043c ML","7b23ce4a":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \"\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c","c53daa8f":"**\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432**","15752e25":"**\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430**","03061f98":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b"}}