{"cell_type":{"ad6352a6":"code","1e8ccaba":"code","d5d9c6a0":"code","5b7aeb15":"code","2df490aa":"markdown","515d074e":"markdown"},"source":{"ad6352a6":"import os\ndirectory = '..\/input\/hourly-weather-surface-brazil-southeast-region\/'\nos.chdir(directory)\nimport make_dataset as mk","1e8ccaba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nrenamed_columns = ['data','hora','precipitacao total,horario (mm)','pressao atmosferica ao nivel da estacao (mb)','pressao atmosferica max. na hora ant. (aut) (mb)','pressao atmosferica min. na hora ant. (aut) (mb)','radiation (kj\/m2)','temperatura do ar - bulbo seco (\u00b0c)','temperatura do ponto de orvalho (\u00b0c)','temperatura maxima na hora ant. (aut) (\u00b0c)','temperatura minima na hora ant. (aut) (\u00b0c)','temperatura orvalho max. na hora ant. (aut) (\u00b0c)','temperatura orvalho min. na hora ant. (aut) (\u00b0c)','umidade rel. max. na hora ant. (aut) (%)','umidade rel. min. na hora ant. (aut) (%)','umidade relativa do ar, horaria (%)','vento direcao horaria (gr) (\u00b0 (gr))','vento rajada maxima (m\/s)','vento velocidade horaria (m\/s)','region','state','station','station_code','latitude','longitude','height']\nrenamed_columns_en = ['date','hour','total precipitation (mm)','pressao atmosferica ao nivel da estacao (mb)','atmospheric pressure max. in the previous hour (mb)','atmospheric pressure min. in the previous hour (mb)','radiation (kj\/m2)','air temperature - dry bulb (\u00b0c)','dew point temperature (\u00b0c)','max. temperature in the previous hour (\u00b0c)','min. temperature in the previous hour (\u00b0c)','dew temperature max. in the previous hour (\u00b0c)','dew temperature min. in the previous hour (\u00b0c)','relative humidity max. in the previous hour (%)','relative humidity min. in the previous hour (%)','air relative humidity (%)','wind direction (\u00b0 (gr))','wind rajada maxima (m\/s)','wind speed (m\/s)','region','state','station','station_code','latitude','longitude','height']\nabbreviation = ['date','hour','prcp', 'stp', 'smax', 'smin','gbrd','temp','dewp','tmax','tmin','dmax','dmin','hmax','hmin','hmdy','wdct', 'gust', 'wdsp', 'regi','prov','wsnm','inme','lat','lon','elvt']\n\ndef process_raw(df, pt_br = False):\n    \"\"\"\n    ! drop index\n    ! rename the columns\n    ! combine hour and date columns -> transform to date_time\n    ! append columns data from all stations to keep the data granularity\n    ! remove not useful columns\n    ! return table \n    \"\"\"\n    df.drop(['index'],inplace=True, axis=1)\n    df.columns = abbreviation\n    df['date_time'] = pd.to_datetime(df['date'] + ' ' +  df['hour'])\n    columns_to_drop = ['date','hour','regi', 'prov', 'wsnm', 'lat', 'lon', 'elvt', 'gbrd']\n    df.drop(columns_to_drop, inplace=True, axis=1)\n\n    station_codes = list(df.inme.unique())\n    df_models = by_code(df,station_codes[0])\n    if len(station_codes)>1:\n        for i in station_codes[1:]:\n            df_temp = by_code(df,i)\n            df_models = pd.concat([df_models,df_temp],axis=1)\n    return df_models\n\ndef by_code(df, station_code):\n    \"\"\"\n    ! function that filters the dataframe by station_code and rename the columns by the status code\n    \"\"\"\n    df_station = None\n    df_station = df[df['inme'] == station_code]\n    df_station.index = df_station.iloc[:,-1]\n    df_station.drop(['inme','date_time'],axis=1,inplace=True)\n    df_station.columns = list(map(lambda x: station_code+'_'+x, df_station.columns))\n    return df_station\n\ndef clean_na(df, na_value = -9999):\n    \"\"\" \n    ! replace Na from dataset\n    \"\"\"\n    df = df.replace(to_replace=na_value,value=np.NaN)\n    df = df[df.iloc[:,1].first_valid_index():]\n    df = df.fillna(method='ffill')\n    return df\n\ndef make_dataset(stations, start_date, df):\n    \"\"\"\n    ! filter raw data from date and stations code\n    ! process data\n    ! clean na\n    \"\"\"\n    df = df[df['Data'] >= start_date]\n    df = df[df['station_code'].apply(lambda x: x in stations)]\n    df = process_raw(df)\n    df = clean_na(df)\n    return df.reset_index()","d5d9c6a0":"stations = ['A612']\nstart_date = '2006-11-01'\ndf2 = make_dataset(stations, start_date, pd.read_csv('southeast.csv'))\n# df1 = mk.make_dataset(stations, start_date, pd.read_csv('southeast.csv'))\n# df1=df2\ndf_raw = None","5b7aeb15":"df2","2df490aa":"## Make dataset Function","515d074e":"# Easily use dataset\n\nThere is a make_dataset.py file with our data. This module is to be easier to create a time_series dataframe to be used to create models.  \nThis function take the rawdata and make all and organize in the same date_time index."}}