{"cell_type":{"cf4189be":"code","f62eef81":"code","969e5eed":"code","d37dc322":"code","87410154":"code","7f435464":"code","ceb07882":"code","7b7f5b57":"code","e15aea05":"code","3830d059":"code","7666324e":"code","e508b92f":"code","def4ed1c":"code","99a7c023":"code","ce979386":"code","7559f803":"code","c9dd8736":"code","c6b1c602":"code","de66d24b":"code","8ec19062":"code","578e951c":"code","89fd8269":"code","404f7e54":"markdown","ec9b2a35":"markdown","7ef67158":"markdown","d8b4bb6e":"markdown","8ac661a4":"markdown","ee634d34":"markdown","ed457f3a":"markdown","4bdc6cbc":"markdown","d5749824":"markdown","2be9e08e":"markdown","32e2fb9d":"markdown","46e4c8a3":"markdown","a84f61ae":"markdown"},"source":{"cf4189be":"!pip install -q nnAudio\n!pip install -q --upgrade wandb\n!pip install -q grad-cam\n!pip install -q ttach\n!pip install  timm","f62eef81":"import os\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","969e5eed":"train = pd.read_csv(\"..\/input\/ptbxl-ecg-100hz\/ptbxl_ecg_train.csv\")\n\n\ndef get_file_paths(filename):\n    filename_lr = filename.split('\/')[-1].split('_')[0]\n    return f\"..\/input\/ptbxl-ecg-100hz\/ptbxl_data_signals100\/{filename_lr}.npy\"\n    \nclean_tags = lambda x: [e.replace(\"'\", \"\")  for e in x[1:-1].split(', ')]\n    \ntrain[\"file_paths\"] = train[\"filename_lr\"].apply(get_file_paths)\ntrain[\"superdiagnostic\"] = train[\"superdiagnostic\"].apply(clean_tags)","d37dc322":"train[\"file_paths\"][0]","87410154":"train.head()","7f435464":"import torch\nfrom nnAudio.Spectrogram import CQT1992v2\n\ndef apply_qtransform(waves, transform=CQT1992v2(sr=3048, fmin=20, fmax=1024, hop_length=64)):\n    waves = np.hstack(waves)\n    waves = waves \/ np.max(waves)\n    waves = torch.from_numpy(waves).float()\n    image = transform(waves)\n    return image\n\nfor i in range(5):\n    waves = np.load(train.loc[i, 'file_paths'])\n    image = apply_qtransform(waves)\n    target = train.loc[i, 'superdiagnostic']\n    plt.imshow(image[0])\n    plt.title(f\"target: {target}\")\n    plt.show()","ceb07882":"# ====================================================\n# Directory settings\n# ====================================================\nimport os\n\nOUTPUT_DIR = '.\/'\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)","7b7f5b57":"from sklearn.preprocessing import MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\nmlb.fit(train[\"superdiagnostic\"].values)\nmlb.classes_.tolist()","e15aea05":"train_labels = mlb.transform(train[\"superdiagnostic\"].tolist())\ntrain[mlb.classes_.tolist()] = train_labels","3830d059":"train.head()","7666324e":"class CFG:\n    apex=False\n    debug=False\n    print_freq=100\n    image_size=224\n    num_workers=8\n    scheduler='CosineAnnealingLR' # ['ReduceLROnPlateau', 'CosineAnnealingLR', 'CosineAnnealingWarmRestarts','OneCycleLR']\n    epochs=20\n    # CosineAnnealingLR params\n    cosanneal_params={\n        'T_max':3,\n        'eta_min':1e-5,\n        'last_epoch':-1\n    }\n    #ReduceLROnPlateau params\n    reduce_params={\n        'mode':'min',\n        'factor':0.2,\n        'patience':4,\n        'eps':1e-6,\n        'verbose':True\n    }\n    # CosineAnnealingWarmRestarts params\n    cosanneal_res_params={\n        'T_0':3,\n        'eta_min':1e-6,\n        'T_mult':1,\n        'last_epoch':-1\n    }\n    onecycle_params={\n        'pct_start':0.1,\n        'div_factor':1e2,\n        'max_lr':1e-3\n    }\n    batch_size=32\n    lr=1e-4\n    weight_decay=1e-5\n    gradient_accumulation_steps=1\n    max_grad_norm=1000\n    target_size=5\n    nfolds=9\n    qtransform_params={\"sr\": 2048, \"fmin\": 20, \"fmax\": 1024, \"hop_length\": 32, \"bins_per_octave\": 8}\n    trn_fold=[1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target_col=['CD', 'HYP', 'MI', 'NORM', 'STTC']\n    preds_col=['pred_CD', 'pred_HYP', 'pred_MI', 'pred_NORM', 'pred_STTC']\n    model_name='tf_efficientnetv2_b0'    #'vit_base_patch32_224_in21k' 'resnext50_32x4d' 'tf_efficientnet_b3' 'resnetv2_50x1_bitm_in21k' 'inception_v4' 'tf_efficientnetv2_s_in21k'\n    train=True\n    grad_cam=False    \n    early_stop=True\n    fc_dim=512\n    margin=0.5\n    scale=30\n    early_stopping_steps=5\n    seed=42\n    \nif CFG.debug:\n    CFG.epochs=1\n    folds=train.sample(n=1000, random_state=CFG.seed).reset_index(drop=True)","e508b92f":"# ====================================================\n# Library\n# ====================================================\nimport sys\n\nimport os\nimport math\nimport time\nimport random\nimport shutil\nfrom pathlib import Path\nfrom contextlib import contextmanager\nfrom collections import defaultdict, Counter\n\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold\n\nfrom tqdm.auto import tqdm\nfrom functools import partial\n\nimport cv2\nfrom PIL import Image\nfrom PIL import ImageFile\n# sometimes, you will have images without an ending bit\n# this takes care of those kind of (corrupt) images\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.optim import Adam, SGD, Adamax\nfrom torch.optim.optimizer import Optimizer\nimport torchvision.models as models\nfrom torch.nn.parameter import Parameter\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, CosineAnnealingLR, ReduceLROnPlateau\n\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\nfrom albumentations import ImageOnlyTransform\n\nfrom pytorch_grad_cam.utils.image import show_cam_on_image\nfrom pytorch_grad_cam import GradCAM, ScoreCAM, GradCAMPlusPlus, AblationCAM, XGradCAM, EigenCAM\n\nimport timm\n\nfrom torch.cuda.amp import autocast, GradScaler\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","def4ed1c":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nwandb_api = user_secrets.get_secret(\"wandb_key\")\n\nimport wandb\nwandb.login(key=wandb_api)\n\ndef class2dict(f):\n    return dict((name, getattr(f, name)) for name in dir(f) if not name.startswith('__'))\n\nrun = wandb.init(project=\"PTBXL_ECG PFE\", \n                 name=\"exp2 cqt spectogram\",\n                 config=class2dict(CFG),\n                 group=CFG.model_name,\n                 job_type=\"train\")","99a7c023":"# ====================================================\n# Utils\n# ====================================================\ndef get_score(y_true, y_pred):\n    score = roc_auc_score(y_true, y_pred, average=\"macro\")\n    return score\n\n\ndef init_logger(log_file=OUTPUT_DIR+'train.log'):\n    from logging import getLogger, INFO, FileHandler,  Formatter,  StreamHandler\n    logger = getLogger(__name__)\n    logger.setLevel(INFO)\n    handler1 = StreamHandler()\n    handler1.setFormatter(Formatter(\"%(message)s\"))\n    handler2 = FileHandler(filename=log_file)\n    handler2.setFormatter(Formatter(\"%(message)s\"))\n    logger.addHandler(handler1)\n    logger.addHandler(handler2)\n    return logger\n\nLOGGER = init_logger()\n\n\ndef seed_torch(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_torch(seed=CFG.seed)","ce979386":"# ====================================================\n# Dataset\n# ====================================================\nclass TrainDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.file_names = df['file_paths'].values\n        self.labels = df[CFG.target_col].values\n        self.wave_transform = CQT1992v2(**CFG.qtransform_params)\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def apply_qtransform(self, waves, transform):\n        waves = np.hstack(waves)\n        waves = waves \/ np.max(waves)\n        waves = torch.from_numpy(waves).float()\n        image = transform(waves)\n        return image\n\n    def __getitem__(self, idx):\n        file_path = self.file_names[idx]\n        waves = np.load(file_path)\n        image = self.apply_qtransform(waves, self.wave_transform)\n        image = image.squeeze().numpy()\n        if self.transform:\n            image = self.transform(image=image)['image']\n        label = torch.tensor(self.labels[idx]).float()\n        return image, label\n    \nclass GradCAMDataset(Dataset):\n    def __init__(self, df):\n        self.df = df\n        self.image_ids = df['id'].values\n        self.file_names = df['file_path'].values\n        self.labels = df[CFG.target_col].values\n        self.wave_transform = CQT1992v2(**CFG.qtransform_params)\n        self.transform = get_transforms(data='valid')\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def apply_qtransform(self, waves, transform):\n        waves = np.hstack(waves)\n        waves = waves \/ np.max(waves)\n        waves = torch.from_numpy(waves).float()\n        image = transform(waves)\n        return image\n\n    def __getitem__(self, idx):\n        image_id = self.image_ids[idx]\n        file_path = self.file_names[idx]\n        waves = np.load(file_path)\n        image = self.apply_qtransform(waves, self.wave_transform)\n        image = image.squeeze().numpy()\n        vis_image = image.copy()\n        if self.transform:\n            image = self.transform(image=image)['image']\n        label = torch.tensor(self.labels[idx]).float()\n        return image_id, image, vis_image, label","7559f803":"def get_transforms(*, data='train'):\n    '''\n    Return Augmented Image tensor for training dataset\n    '''\n    \n    if data == 'train':\n        return A.Compose(\n            [\n                #A.Resize(CFG.image_size,CFG.image_size),\n                #A.HorizontalFlip(p=0.3),\n                #A.VerticalFlip(p=0.3),\n                #A.Rotate(limit=180, p=0.3),\n                #A.RandomBrightness(limit=0.6, p=0.5),\n                #A.Cutout(\n                    #num_holes=10, max_h_size=12, max_w_size=12,\n                    #fill_value=0, always_apply=False, p=0.5\n                #),\n                #A.ShiftScaleRotate(\n                #    shift_limit=0.25, scale_limit=0.1, rotate_limit=0\n                #),\n                ToTensorV2(p=1.0),\n            ]\n        )\n    \n    elif data == 'valid':\n        return A.Compose([\n            ToTensorV2(),\n        ])","c9dd8736":"train_dataset = TrainDataset(train, transform=get_transforms(data='train'))\n\nfor i in range(5):\n    plt.figure(figsize=(16,12))\n    image, label = train_dataset[i]\n    plt.imshow(image[0])\n    plt.title(f'label: {label}')\n    plt.show()","c6b1c602":"# ====================================================\n# MODEL\n# ====================================================\nclass CustomModel(nn.Module):\n    def __init__(self, cfg, pretrained=False):\n        super().__init__()\n        self.cfg = cfg\n        self.model = timm.create_model(self.cfg.model_name, pretrained=pretrained, in_chans=1)\n        \n        if cfg.model_name == 'tf_efficientnetv2_s':\n            self.in_features = self.model.classifier.in_features\n            self.model.classifier = nn.Linear(self.in_features, self.cfg.target_size)\n        \n        if cfg.model_name == 'resnetv2_50d':\n            self.in_features = model.last_linear.in_features\n            self.model.last_linear = nn.Linear(self.in_features, self.cfg.target_size)\n        \n        if cfg.model_name == 'resnext50_32x4d':\n            self.in_features = self.model.fc.in_features\n            self.model.fc = nn.Linear(self.in_features, self.cfg.target_size)\n            \n        elif 'nfnet' in cfg.model_name:\n            self.in_features = self.backbone.head.fc.in_features\n            self.model.head.fc = nn.Linear(self.in_features, self.cfg.target_size)\n        \n        elif cfg.model_name.split('_')[1] == \"efficientnet\":\n            self.in_features = self.model.classifier.in_features\n            self.model.classifier = nn.Linear(self.in_features, self.cfg.target_size)\n            \n        elif cfg.model_name.split('_')[0] == 'vit':\n            n_features = self.model.head.in_features\n            self.model.head = nn.Linear(n_features, cfg.target_size, bias=True)\n\n    def forward(self, x):\n        output = self.model(x)\n        return output","de66d24b":"# ====================================================\n# Helper functions\n# ====================================================\nclass AverageMeter(object):\n    \"\"\"Computes and stores the average and current value\"\"\"\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum \/ self.count\n\n\ndef asMinutes(s):\n    m = math.floor(s \/ 60)\n    s -= m * 60\n    return '%dm %ds' % (m, s)\n\n\ndef timeSince(since, percent):\n    now = time.time()\n    s = now - since\n    es = s \/ (percent)\n    rs = es - s\n    return '%s (remain %s)' % (asMinutes(s), asMinutes(rs))\n\n\ndef train_fn(fold, train_loader, model, criterion, optimizer, epoch, scheduler, device):\n    if CFG.apex:\n        scaler = GradScaler()\n    batch_time = AverageMeter()\n    data_time = AverageMeter()\n    losses = AverageMeter()\n    scores = AverageMeter()\n    # switch to train mode\n    model.train()\n    start = end = time.time()\n    global_step = 0\n    for step, (images, labels) in enumerate(train_loader):\n        # measure data loading time\n        data_time.update(time.time() - end)\n        images = images.to(device)\n        labels = labels.to(device)\n        batch_size = labels.size(0)\n        if CFG.apex:\n            with autocast():\n                y_preds = model(images)\n                loss = criterion(y_preds, labels)\n        else:\n            y_preds = model(images)\n            loss = criterion(y_preds, labels)\n        # record loss\n        losses.update(loss.item(), batch_size)\n        if CFG.gradient_accumulation_steps > 1:\n            loss = loss \/ CFG.gradient_accumulation_steps\n        if CFG.apex:\n            scaler.scale(loss).backward()\n        else:\n            loss.backward()\n        grad_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), CFG.max_grad_norm)\n        if (step + 1) % CFG.gradient_accumulation_steps == 0:\n            if CFG.apex:\n                scaler.step(optimizer)\n                scaler.update()\n            else:\n                optimizer.step()\n            optimizer.zero_grad()\n            global_step += 1\n        # measure elapsed time\n        batch_time.update(time.time() - end)\n        end = time.time()\n        if step % CFG.print_freq == 0 or step == (len(train_loader)-1):\n            print('Epoch: [{0}][{1}\/{2}] '\n                  'Elapsed {remain:s} '\n                  'Loss: {loss.val:.4f}({loss.avg:.4f}) '\n                  'Grad: {grad_norm:.4f}  '\n                  'LR: {lr:.6f}  '\n                  .format(epoch+1, step, len(train_loader), \n                          remain=timeSince(start, float(step+1)\/len(train_loader)),\n                          loss=losses,\n                          grad_norm=grad_norm,\n                          lr=scheduler.get_lr()[0]))\n        wandb.log({f\"[fold{fold}] loss\": losses.val,\n                   f\"[fold{fold}] lr\": scheduler.get_lr()[0]})\n    return losses.avg\n\n\ndef valid_fn(valid_loader, model, criterion, device):\n    batch_time = AverageMeter()\n    data_time = AverageMeter()\n    losses = AverageMeter()\n    scores = AverageMeter()\n    # switch to evaluation mode\n    model.eval()\n    preds = []\n    start = end = time.time()\n    for step, (images, labels) in enumerate(valid_loader):\n        # measure data loading time\n        data_time.update(time.time() - end)\n        images = images.to(device)\n        labels = labels.to(device)\n        batch_size = labels.size(0)\n        # compute loss\n        with torch.no_grad():\n            y_preds = model(images)\n        loss = criterion(y_preds, labels)\n        losses.update(loss.item(), batch_size)\n        # record accuracy\n        preds.append(y_preds.sigmoid().to('cpu').numpy())\n        if CFG.gradient_accumulation_steps > 1:\n            loss = loss \/ CFG.gradient_accumulation_steps\n        # measure elapsed time\n        batch_time.update(time.time() - end)\n        end = time.time()\n        if step % CFG.print_freq == 0 or step == (len(valid_loader)-1):\n            print('EVAL: [{0}\/{1}] '\n                  'Elapsed {remain:s} '\n                  'Loss: {loss.val:.4f}({loss.avg:.4f}) '\n                  .format(step, len(valid_loader),\n                          loss=losses,\n                          remain=timeSince(start, float(step+1)\/len(valid_loader))))\n    predictions = np.concatenate(preds)\n    return losses.avg, predictions","8ec19062":"# ====================================================\n# Train loop\n# ====================================================\ndef train_loop(folds, fold):\n    \n    LOGGER.info(f\"========== fold: {fold} training ==========\")\n\n    # ====================================================\n    # loader\n    # ====================================================\n    trn_idx = folds[folds['strat_fold'] != fold].index\n    val_idx = folds[folds['strat_fold'] == fold].index\n\n    train_folds = folds.loc[trn_idx].reset_index(drop=True)\n    valid_folds = folds.loc[val_idx].reset_index(drop=True)\n    valid_labels = valid_folds[CFG.target_col].values\n\n    train_dataset = TrainDataset(train_folds, transform=get_transforms(data='train'))\n    valid_dataset = TrainDataset(valid_folds, transform=get_transforms(data='valid'))\n\n    train_loader = DataLoader(train_dataset,\n                              batch_size=CFG.batch_size, \n                              shuffle=True, \n                              num_workers=CFG.num_workers, pin_memory=True, drop_last=True)\n    valid_loader = DataLoader(valid_dataset, \n                              batch_size=CFG.batch_size * 2, \n                              shuffle=False, \n                              num_workers=CFG.num_workers, pin_memory=True, drop_last=False)\n    \n\n    # ====================================================\n    # scheduler \n    # ====================================================\n    def get_scheduler(optimizer):\n        if CFG.scheduler=='ReduceLROnPlateau':\n            scheduler = ReduceLROnPlateau(optimizer, **CFG.reduce_params)\n        elif CFG.scheduler=='CosineAnnealingLR':\n            scheduler = CosineAnnealingLR(optimizer, T_max=3, eta_min=1e-5, last_epoch=-1)\n        elif CFG.scheduler=='CosineAnnealingWarmRestarts':\n            scheduler = CosineAnnealingWarmRestarts(optimizer, **CFG.reduce_params)\n        return scheduler\n\n    # ====================================================\n    # model & optimizer\n    # ====================================================\n    model = CustomModel(CFG, pretrained=False)\n    model.to(device)\n\n    optimizer = Adam(model.parameters(), lr=CFG.lr, weight_decay=CFG.weight_decay)\n    scheduler = get_scheduler(optimizer)\n\n    # ====================================================\n    # loop\n    # ====================================================\n    criterion = nn.BCEWithLogitsLoss()\n\n    best_score = 0.\n    best_loss = np.inf\n    \n    for epoch in range(CFG.epochs):\n        \n        start_time = time.time()\n        \n        # train\n        avg_loss = train_fn(fold, train_loader, model, criterion, optimizer, epoch, scheduler, device)\n\n        # eval\n        avg_val_loss, preds = valid_fn(valid_loader, model, criterion, device)\n        \n        if isinstance(scheduler, ReduceLROnPlateau):\n            scheduler.step(avg_val_loss)\n        elif isinstance(scheduler, CosineAnnealingLR):\n            scheduler.step()\n        elif isinstance(scheduler, CosineAnnealingWarmRestarts):\n            scheduler.step()\n\n        # scoring\n        score = get_score(valid_labels, preds)\n\n        elapsed = time.time() - start_time\n\n        LOGGER.info(f'Epoch {epoch+1} - avg_train_loss: {avg_loss:.4f}  avg_val_loss: {avg_val_loss:.4f}  time: {elapsed:.0f}s')\n        LOGGER.info(f'Epoch {epoch+1} - Score: {score:.4f}')\n        wandb.log({f\"[fold{fold}] epoch\": epoch+1, \n                   f\"[fold{fold}] avg_train_loss\": avg_loss, \n                   f\"[fold{fold}] avg_val_loss\": avg_val_loss,\n                   f\"[fold{fold}] score\": score})\n\n        if score > best_score:\n            best_score = score\n            LOGGER.info(f'Epoch {epoch+1} - Save Best Score: {best_score:.4f} Model')\n            torch.save({'model': model.state_dict(), \n                        'preds': preds},\n                        OUTPUT_DIR+f'{CFG.model_name}_fold{fold}_best_score.pth')\n        \n        if avg_val_loss < best_loss:\n            best_loss = avg_val_loss\n            LOGGER.info(f'Epoch {epoch+1} - Save Best Loss: {best_loss:.4f} Model')\n            torch.save({'model': model.state_dict(), \n                        'preds': preds},\n                        OUTPUT_DIR+f'{CFG.model_name}_fold{fold}_best_loss.pth')\n    \n    valid_folds[CFG.preds_col] = torch.load(OUTPUT_DIR+f'{CFG.model_name}_fold{fold}_best_score.pth', \n                                      map_location=torch.device('cpu'))['preds']\n\n    return valid_folds","578e951c":"# ====================================================\n# main\n# ====================================================\ndef main():\n\n    \"\"\"\n    Prepare: 1.train \n    \"\"\"\n\n    def get_result(result_df):\n        preds = result_df[CFG.preds_col].values\n        labels = result_df[CFG.target_col].values\n        score = get_score(labels, preds)\n        LOGGER.info(f'Score: {score:<.4f}')\n    \n    if CFG.train:\n        # train \n        oof_df = pd.DataFrame()\n        for fold in range(CFG.nfolds+1):\n            if fold in CFG.trn_fold:\n                _oof_df = train_loop(train, fold)\n                oof_df = pd.concat([oof_df, _oof_df])\n                LOGGER.info(f\"========== fold: {fold} result ==========\")\n                get_result(_oof_df)\n        # CV result\n        LOGGER.info(f\"========== CV ==========\")\n        get_result(oof_df)\n        # save result\n        oof_df.to_csv(OUTPUT_DIR+'oof_df.csv', index=False)\n    \n    if CFG.grad_cam:\n        N = 5\n        wandb_table = wandb.Table(columns=[\"id\", \"target\", \"prob\", \"image\", \"grad_cam_image\"])\n        for fold in range(CFG.n_fold):\n            if fold in CFG.trn_fold:\n                # load model\n                model = CustomModel(CFG, pretrained=False)\n                state = torch.load(OUTPUT_DIR+f'{CFG.model_name}_fold{fold}_best_loss.pth', \n                                   map_location=torch.device('cpu'))['model']\n                model.load_state_dict(state)\n                model.to(device)\n                model.eval()\n                # load oof\n                oof = pd.read_csv(OUTPUT_DIR+'oof_df.csv')\n                oof = oof[oof['fold'] == fold].reset_index(drop=True)\n                # grad-cam (oof ascending=False)\n                count = 0\n                oof = oof.sort_values('preds', ascending=False)\n                valid_dataset = GradCAMDataset(oof)\n                for i in range(len(valid_dataset)):\n                    image_id, x_tensor, img, label = valid_dataset[i]\n                    result = get_grad_cam(model, device, x_tensor, img, label, plot=True)\n                    if result[\"vis\"] is not None:\n                        count += 1\n                        wandb_table.add_data(image_id, \n                                             result[\"label\"], \n                                             result[\"prob\"], \n                                             wandb.Image(result[\"img\"]), \n                                             wandb.Image(result[\"vis\"]))\n                    if count >= N:\n                        break\n                # grad-cam (oof ascending=True)\n                count = 0\n                oof = oof.sort_values('preds', ascending=True)\n                valid_dataset = GradCAMDataset(oof)\n                for i in range(len(valid_dataset)):\n                    image_id, x_tensor, img, label = valid_dataset[i]\n                    result = get_grad_cam(model, device, x_tensor, img, label, plot=True)\n                    if result[\"vis\"] is not None:\n                        count += 1\n                        wandb_table.add_data(image_id, \n                                             result[\"label\"], \n                                             result[\"prob\"], \n                                             wandb.Image(result[\"img\"]), \n                                             wandb.Image(result[\"vis\"]))\n                    if count >= N:\n                        break\n        wandb.log({'grad_cam': wandb_table})\n    \n    wandb.finish()","89fd8269":"if __name__ == '__main__':\n    main()","404f7e54":"# Data Loading","ec9b2a35":"# Helper Functions","7ef67158":"# Train loop","d8b4bb6e":"# Configuration","8ac661a4":"# Directory settings","ee634d34":"# Model","ed457f3a":"# Transforms","4bdc6cbc":"# Utils","d5749824":"# Wandb Configuration","2be9e08e":"# Dataset","32e2fb9d":"# Library","46e4c8a3":"# Data preparation","a84f61ae":"# Quick EDA"}}