{"cell_type":{"ca8f9f5b":"code","fef16b84":"code","324546f4":"code","0f3d5c0a":"code","f0f922c6":"code","43dc1f0c":"code","179374ad":"code","6902c40c":"code","b3e56ff9":"code","3e7d864c":"code","e7217059":"code","a765eaba":"code","d5b8b46c":"markdown","89ab8603":"markdown","a6f6a1d8":"markdown","15d0f271":"markdown","4c4a05dc":"markdown","db4a54a6":"markdown"},"source":{"ca8f9f5b":"import numpy as np\nimport pandas as pd\nfrom catboost import CatBoostRegressor\nfrom sklearn import model_selection","fef16b84":"train = pd.read_csv(\"..\/input\/widsdatathon2022\/train.csv\")\ntrain.head()","324546f4":"test = pd.read_csv(\"..\/input\/widsdatathon2022\/test.csv\")\ntest.head()","0f3d5c0a":"submission = pd.read_csv(\"..\/input\/widsdatathon2022\/sample_solution.csv\")\nsubmission.head()","f0f922c6":"train.info()","43dc1f0c":"train.describe()","179374ad":"train.pop(\"id\")\ntest.pop(\"id\")\ny = train.pop(\"site_eui\")","6902c40c":"data = pd.concat([train, test])\ndata = pd.get_dummies(data)\ntrain_df = data.iloc[:len(train)]\ntest_df = data.iloc[len(train):]","b3e56ff9":"psudo_labels = pd.read_csv(\"..\/input\/wids-datathon-2022-with-catboost-output\/submission.csv\")\npsudo_labels.head()","3e7d864c":"def get_model():\n    cat_params = {\n        'iterations': 35000,\n        'learning_rate': 0.025,\n        'od_wait': 1000,\n        'depth': 8,\n        'task_type' : 'GPU',\n        'devices' : '0',\n        'verbose' : 1000,\n        \"objective\": \"RMSE\",\n        \"loss_function\": \"RMSE\"\n    }\n    model =  CatBoostRegressor(**cat_params)\n    return model","e7217059":"kfold = model_selection.KFold(7, shuffle=True, random_state=2022)\nmodels = []\ntrain_with_k_fold = False\napply_psudo_labeling = False\nif train_with_k_fold:\n    for train_indices, val_indices in kfold.split(train_df):\n        X_train = train_df.iloc[train_indices]\n        y_train = y.iloc[train_indices]\n       \n        if apply_psudo_labeling:\n            X_train = X_train.append(test_df)\n            y_train = y_train.append(psudo_labels[\"site_eui\"])\n        X_val = train_df.iloc[val_indices]\n        y_val = y.iloc[val_indices]\n        model = get_model()\n        model.fit(X_train, y_train, eval_set=(X_val, y_val))\n        models.append(model)\nelse:\n    model = get_model()\n    if apply_psudo_labeling:\n        train_df = train_df.append(test_df)\n        y = y.append(psudo_labels[\"site_eui\"])\n    model.fit(train_df, y)\n    models.append(model)","a765eaba":"result = np.mean([model.predict(test_df) for model in models], axis=0)\nsubmission[\"site_eui\"] = result\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","d5b8b46c":"## Modeling","89ab8603":"## Pseudo Labelling ","a6f6a1d8":"## Submission","15d0f271":"## EDA & Preprocessing","4c4a05dc":"## Import datasets","db4a54a6":"# WiDS Datathon 2022 with Catboost\nIn this notebook. I will build a Model for WiDS Datathon 2022 competion using Catboost. I also use K-fold Cross-Validation and Psudo-Labeling to train the Model. "}}