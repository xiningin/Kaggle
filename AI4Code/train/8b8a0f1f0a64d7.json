{"cell_type":{"76d9b892":"code","809528f1":"code","3043d4f2":"code","0dcbf349":"code","a8cb711b":"code","fb9e2dad":"code","f282e6fd":"code","11762fd3":"code","249155d1":"code","2e9fd521":"code","dc369bcb":"code","fe5a8cf6":"code","9fa8cb34":"code","df13ce3d":"code","31e62688":"code","ad8cbd5c":"code","740675fd":"code","58fb401a":"code","c6c442d5":"code","afec59d4":"code","ff03a1f5":"code","0df9954d":"code","58fe7967":"code","cc36b6df":"code","40a5211c":"code","c3302d51":"code","2a66ac08":"code","c96d0f42":"code","60d833f0":"code","2060cbd8":"code","41041f3e":"code","6757b271":"code","89ef2eef":"code","21b4c5ff":"code","6fea7abd":"code","d176a806":"code","40fc730b":"code","da71f0bc":"code","00aec450":"code","4d072226":"code","d6eecc9b":"code","a2d984f9":"code","14b063c5":"code","9c1dc460":"code","77a80fdf":"code","110d51a3":"code","5b34aebe":"code","186d49e5":"code","0c8accaa":"code","3224cb91":"code","7ac1694a":"code","25059b3b":"code","aac1f889":"code","d7f6041d":"code","37e9a673":"code","7f17a8fa":"code","2ac5b22f":"code","e6adf210":"code","f14681cf":"code","023f3bb4":"code","22116a42":"code","fab1bcf3":"code","ec73710e":"code","d68fb121":"code","7a7b079a":"code","c865d940":"code","3c8ce17e":"code","31431494":"code","9df595d4":"code","83bd46ec":"code","bd1b26da":"code","262dc35a":"code","483f7e74":"code","27161eec":"code","950cc789":"code","dcee84c2":"code","1abcd86e":"code","7d88cee7":"code","e7b20920":"code","82707a2f":"code","5005cc14":"code","3ee1ecd6":"code","629de668":"code","1fae7432":"code","4c82eb86":"code","c6c83b59":"code","b4545495":"code","81a9ac2a":"code","319c91a1":"code","6e760782":"code","0c0ba9fa":"code","bb159730":"code","26393a54":"code","532c8d95":"code","aa06e954":"code","551fb887":"code","77f95198":"code","f4ce7a71":"code","ecef2b6e":"code","b56d2fc6":"code","4840b514":"code","a36c0075":"code","d0ba0f3b":"code","a9bcde37":"code","e0bb48db":"code","dc50e8d9":"code","9da3ef1b":"code","a756cbfa":"code","af322fcc":"code","c48fcd10":"code","90e580a3":"code","c05c1153":"code","dede15e9":"code","38ee3c5e":"code","660c0017":"code","271b44ac":"code","d72b37df":"code","10116ed9":"code","df27c666":"code","b035febb":"code","7ecf0aac":"code","16f443b7":"code","ba437856":"code","40a0612a":"code","c5474edb":"code","0917ed40":"code","248a5f83":"code","ba088a21":"code","e3fceb92":"code","40921e76":"code","5bbbcd26":"code","76095be0":"code","eca76ae3":"code","657315f4":"code","ab34fa0c":"code","8110815f":"code","b0f36f93":"code","d11a98f7":"code","0e05e47d":"code","391e2f5f":"code","b302f4eb":"code","43b7ff31":"code","414d9120":"code","99036726":"code","29a2463a":"code","55de7c6d":"code","e4b4c801":"code","fbe4f41e":"code","b0b16a3c":"code","824dd0f6":"code","c9456fae":"code","54f11082":"code","39a7b8f2":"code","e3e3b1b6":"code","9aed0642":"code","2bc2b5eb":"code","81140dc4":"code","7b8c1fb3":"code","6ea36343":"code","c85253d8":"code","e019723c":"code","e87531fc":"code","1b114fb5":"code","ddf56a84":"code","7f23ca15":"code","e28bd81f":"code","90458404":"code","12693fab":"code","f0a3795f":"code","9a2eb5a5":"code","1e9f714e":"code","e13904db":"code","ed03e7aa":"code","fbe423fa":"code","46bdf899":"code","9faa7f5a":"code","ab584d37":"code","0477b45e":"code","b9a08136":"markdown","196a87ef":"markdown","6147753c":"markdown","16a13bb0":"markdown","ba557b0e":"markdown","6fb38a82":"markdown","4ad59959":"markdown","810f88ea":"markdown","15a30e3f":"markdown","9958ae41":"markdown","520e2ac0":"markdown","1819985a":"markdown","b2244195":"markdown","54102f6d":"markdown","ac802930":"markdown","2eb626ec":"markdown","bc872c12":"markdown","8dc13f01":"markdown","b9daba5e":"markdown","1977e68f":"markdown","fb5cb08b":"markdown","38f00ca8":"markdown","da081958":"markdown","db348976":"markdown","b68fa61f":"markdown","228a2196":"markdown","682c38c5":"markdown","d345dd01":"markdown","8e24cb01":"markdown","b9862d0a":"markdown","f8613956":"markdown","57b8c16b":"markdown","8dcb12f1":"markdown","8a97e245":"markdown","9d761f29":"markdown","2db66ba4":"markdown","63039f7f":"markdown","e24d2e32":"markdown","0219fc4b":"markdown","2d8f0201":"markdown","34f49d33":"markdown","9ef993f2":"markdown","991541cd":"markdown","30a3a2ce":"markdown","96920f10":"markdown","8c54dacd":"markdown","037caf05":"markdown","a046c3fb":"markdown","beffccab":"markdown","f1d0a41c":"markdown","219d1b65":"markdown","5e83a547":"markdown","6df5f3f7":"markdown","82f9496a":"markdown","a8f525b4":"markdown","f6aa49c1":"markdown","b4be7450":"markdown","4b9a7c46":"markdown","bb1d76f2":"markdown","d054aaae":"markdown","057d2c7c":"markdown","1457acf6":"markdown","6e7bcbeb":"markdown","98ebd144":"markdown","5ed51a85":"markdown","c945451c":"markdown","053a7eab":"markdown","cfcebb8e":"markdown","f3824999":"markdown","c16b673e":"markdown","89a6a71b":"markdown","c0921d4b":"markdown","3f794fda":"markdown","7704678a":"markdown","aca642a7":"markdown","31e5532d":"markdown","7ed37794":"markdown","4a4605cf":"markdown","8620a98b":"markdown","e4c59cd5":"markdown","033a1ea3":"markdown","600963f5":"markdown","7110b561":"markdown","f8aab03c":"markdown","fc939137":"markdown","ab251012":"markdown","1c94223d":"markdown","adf0f4f2":"markdown","fce2851d":"markdown","98d3ac2b":"markdown","657e0188":"markdown","105732de":"markdown","7a5d7d5c":"markdown","9e00b3fd":"markdown","7523fb06":"markdown","cdd58668":"markdown","f9de4c72":"markdown","4cfbdb73":"markdown"},"source":{"76d9b892":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt","809528f1":"df= pd.read_csv('..\/input\/credit-card-fraud-detection-data\/creditcard.csv')","3043d4f2":"df.head()","0dcbf349":"df.tail()","a8cb711b":"df.info()","fb9e2dad":"df.duplicated().sum()\n","f282e6fd":"df=df.drop_duplicates()","11762fd3":"df.shape","249155d1":"df.isnull().sum()","2e9fd521":"df=df[df['Amount']>0]","dc369bcb":"df['Class'].value_counts(normalize=True)","fe5a8cf6":"def bar_graph(data,predictor):\n    grouped=data.groupby(predictor)\n    chart=grouped.size().plot.bar(rot=0, title='Bar Chart showing the size of different '+str(predictor))\n    chart.set_xlabel(predictor)","9fa8cb34":"bar_graph(data=df,predictor='Class')","df13ce3d":"df.describe().T","31e62688":"df.nunique()","ad8cbd5c":"df['Hour']=df['Time']\/3600\ndf","740675fd":"%matplotlib inline\ndf.hist(['V1','V2','V3','V4','V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28'],figsize=(25,20))","58fb401a":"def anova_test(data,target,predictor):\n    data1=data.groupby(predictor)[target].apply(list)\n    from scipy.stats import f_oneway\n    AnovaResults = f_oneway(*data1)\n    print('P-Value for Anova is: ', AnovaResults[1])\n","c6c442d5":"anova_test(data=df,target='Amount',predictor='Class')","afec59d4":"anova_test(data=df,target='Hour',predictor='Class')","ff03a1f5":"anova_test(data=df,target='V1',predictor='Class')","0df9954d":"anova_test(data=df,target='V2',predictor='Class')","58fe7967":"anova_test(data=df,target='V3',predictor='Class')","cc36b6df":"anova_test(data=df,target='V5',predictor='Class')","40a5211c":"anova_test(data=df,target='V7',predictor='Class')","c3302d51":"anova_test(data=df,target='V8',predictor='Class')","2a66ac08":"anova_test(data=df,target='V9',predictor='Class')","c96d0f42":"anova_test(data=df,target='V10',predictor='Class')","60d833f0":"anova_test(data=df,target='V11',predictor='Class')","2060cbd8":"anova_test(data=df,target='V12',predictor='Class')","41041f3e":"anova_test(data=df,target='V13',predictor='Class')","6757b271":"anova_test(data=df,target='V14',predictor='Class')","89ef2eef":"anova_test(data=df,target='V15',predictor='Class')","21b4c5ff":"anova_test(data=df,target='V16',predictor='Class')","6fea7abd":"anova_test(data=df,target='V17',predictor='Class')","d176a806":"anova_test(data=df,target='V18',predictor='Class')","40fc730b":"anova_test(data=df,target='V19',predictor='Class')","da71f0bc":"anova_test(data=df,target='V20',predictor='Class')","00aec450":"anova_test(data=df,target='V21',predictor='Class')","4d072226":"anova_test(data=df,target='V22',predictor='Class')","d6eecc9b":"anova_test(data=df,target='V23',predictor='Class')","a2d984f9":"anova_test(data=df,target='V24',predictor='Class')","14b063c5":"anova_test(data=df,target='V25',predictor='Class')","9c1dc460":"anova_test(data=df,target='V26',predictor='Class')","77a80fdf":"anova_test(data=df,target='V27',predictor='Class')","110d51a3":"anova_test(data=df,target='V28',predictor='Class')","5b34aebe":"df.drop(columns=['V13', 'V15', 'V25','Time'],inplace=True)","186d49e5":"df_corr=df.corr()\ndf_corr","0c8accaa":"df_corr['V28'][abs(df_corr['V28']) > 0.5 ]","3224cb91":"df.boxplot(by='Class', column='Amount')","7ac1694a":"df= df[df['Amount']<15000]","25059b3b":"df['Amount'].sort_values(ascending=False).head(10)","aac1f889":"df['Amount'][df['Amount']>12000]=11898.09","d7f6041d":"df.boxplot(by='Class', column='Amount')","37e9a673":"y=df['Class'].values\nx=df[['Hour', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V14', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22',\n       'V23', 'V24', 'V26', 'V27', 'V28', 'Amount']].values","7f17a8fa":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","2ac5b22f":"np.unique(y_train, return_counts=True)","e6adf210":"from collections import Counter\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score,classification_report,roc_auc_score\nfrom sklearn.metrics import roc_curve","f14681cf":"from imblearn.over_sampling import SMOTE\nsmk=SMOTE(random_state=42)\nx_smote,y_smote=smk.fit_sample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_smote))","023f3bb4":"from imblearn.over_sampling import RandomOverSampler\nros= RandomOverSampler(random_state=42)\nx_over,y_over= ros.fit_resample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_over))","22116a42":"from imblearn.under_sampling import RandomUnderSampler\nrus= RandomUnderSampler(random_state=42)\nx_under,y_under= rus.fit_resample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_under))","fab1bcf3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","ec73710e":"from sklearn.model_selection import GridSearchCV","d68fb121":"log_reg_params = {\"penalty\": ['l1', 'l2'], 'C': [0.01, 1, 10]}\ngrid_log_reg = GridSearchCV(LogisticRegression(), log_reg_params)\ngrid_log_reg.fit(x_train, y_train)\nlog_reg = grid_log_reg.best_estimator_\nprint(log_reg)","7a7b079a":"knears_params = {\"n_neighbors\": list(range(2,5,1))}\n\ngrid_knears = GridSearchCV(KNeighborsClassifier(), knears_params)\ngrid_knears.fit(x_train, y_train)\n# KNears best estimator\nknears_neighbors = grid_knears.best_estimator_\n\nprint(knears_neighbors)","c865d940":"tree_params = {\"criterion\": [\"gini\", \"entropy\"], \"max_depth\": list(range(2,4,1))}\ngrid_tree = GridSearchCV(DecisionTreeClassifier(), tree_params)\ngrid_tree.fit(x_train, y_train)\n\n# tree best estimator\ntree_clf = grid_tree.best_estimator_","3c8ce17e":"print(tree_clf)","31431494":"forest_params = {\"criterion\": [\"gini\", \"entropy\"], \"max_depth\": list(range(2,4,1)), \"n_estimators\":list(range(200,1000,100))}\ngrid_tree = GridSearchCV(RandomForestClassifier(), tree_params)\ngrid_tree.fit(x_train, y_train)\n\n# tree best estimator\ntree_clf = grid_tree.best_estimator_\nprint(forest_params)","9df595d4":"lr = LogisticRegression(C=1)\nlr.fit( x_train, y_train )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","83bd46ec":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","bd1b26da":"lr = LogisticRegression(C=1)\nlr.fit( x_smote, y_smote )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","262dc35a":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","483f7e74":"lr = LogisticRegression(C=1)\nlr.fit( x_over, y_over )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","27161eec":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","950cc789":"lr = LogisticRegression(C=1)\nlr.fit( x_under, y_under )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","dcee84c2":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","1abcd86e":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_train, y_train )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","7d88cee7":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","e7b20920":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_smote, y_smote )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","82707a2f":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","5005cc14":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_over, y_over )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","3ee1ecd6":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","629de668":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_under, y_under )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","1fae7432":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","4c82eb86":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_train, y_train )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","c6c83b59":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","b4545495":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_smote, y_smote )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","81a9ac2a":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","319c91a1":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_over, y_over )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","6e760782":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","0c0ba9fa":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_under, y_under )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","bb159730":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","26393a54":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_train, y_train )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","532c8d95":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","aa06e954":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_smote, y_smote )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","551fb887":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","77f95198":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_over, y_over )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","f4ce7a71":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","ecef2b6e":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_under, y_under )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","b56d2fc6":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","4840b514":"import copy\ndf2=copy.deepcopy(df)\ndf2.drop(columns='Class',inplace=True)","a36c0075":"from sklearn import preprocessing\nstd_scaler = preprocessing.StandardScaler()\nstd_scale_fit=std_scaler.fit(df2)\nStandardizedFullData = std_scale_fit.transform(df2)\ndf2_sd=pd.DataFrame(StandardizedFullData,columns=df2.columns)","d0ba0f3b":"y=df['Class'].values\nx=df2_sd[['Hour', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V14', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22',\n       'V23', 'V24', 'V26', 'V27', 'V28', 'Amount']].values","a9bcde37":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)\n","e0bb48db":"from imblearn.over_sampling import SMOTE\nsmk=SMOTE(random_state=42)\nx_smote,y_smote=smk.fit_sample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_smote))","dc50e8d9":"from imblearn.over_sampling import RandomOverSampler\nros= RandomOverSampler(random_state=42)\nx_over,y_over= ros.fit_resample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_over))","9da3ef1b":"from imblearn.under_sampling import RandomUnderSampler\nrus= RandomUnderSampler(random_state=42)\nx_under,y_under= rus.fit_resample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_under))","a756cbfa":"lr = LogisticRegression(C=1)\nlr.fit( x_train, y_train )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","af322fcc":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","c48fcd10":"lr = LogisticRegression(C=1)\nlr.fit( x_smote, y_smote )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","90e580a3":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","c05c1153":"lr = LogisticRegression(C=1)\nlr.fit( x_over, y_over )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","dede15e9":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","38ee3c5e":"lr = LogisticRegression(C=1)\nlr.fit( x_under, y_under )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","660c0017":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","271b44ac":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_train, y_train )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","d72b37df":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","10116ed9":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_smote, y_smote )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","df27c666":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","b035febb":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_over, y_over )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","7ecf0aac":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","16f443b7":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_under, y_under )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","ba437856":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","40a0612a":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_train, y_train )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","c5474edb":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","0917ed40":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_smote, y_smote )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","248a5f83":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","ba088a21":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_over, y_over )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","e3fceb92":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","40921e76":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_under, y_under )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","5bbbcd26":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","76095be0":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_train, y_train )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","eca76ae3":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","657315f4":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_smote, y_smote )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","ab34fa0c":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","8110815f":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_over, y_over )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","b0f36f93":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","d11a98f7":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_under, y_under )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","0e05e47d":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","391e2f5f":"import copy\ndf3=copy.deepcopy(df)\ndf3.drop(columns='Class')","b302f4eb":"from sklearn import preprocessing\nminmax_scaler = preprocessing.MinMaxScaler()\nminmax_scaler_fit=minmax_scaler.fit(df3)\nNormalized= minmax_scaler_fit.transform(df3)\ndf3_normal=pd.DataFrame(Normalized,columns=df3.columns)","43b7ff31":"y=df['Class'].values\nx=df3_normal[['Hour', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V14', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22',\n       'V23', 'V24', 'V26', 'V27', 'V28', 'Amount']].values","414d9120":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)\n","99036726":"from imblearn.over_sampling import SMOTE\nsmk=SMOTE(random_state=42)\nx_smote,y_smote=smk.fit_sample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_smote))","29a2463a":"from imblearn.over_sampling import RandomOverSampler\nros= RandomOverSampler(random_state=42)\nx_over,y_over= ros.fit_resample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_over))","55de7c6d":"from imblearn.under_sampling import RandomUnderSampler\nrus= RandomUnderSampler(random_state=42)\nx_under,y_under= rus.fit_resample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_under))","e4b4c801":"lr = LogisticRegression(C=1)\nlr.fit( x_train, y_train )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","fbe4f41e":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","b0b16a3c":"lr = LogisticRegression(C=1)\nlr.fit( x_smote, y_smote )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","824dd0f6":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","c9456fae":"lr = LogisticRegression(C=1)\nlr.fit( x_over, y_over )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","54f11082":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","39a7b8f2":"lr = LogisticRegression(C=1)\nlr.fit( x_under, y_under )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","e3e3b1b6":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","9aed0642":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_train, y_train )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","2bc2b5eb":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","81140dc4":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_smote, y_smote )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","7b8c1fb3":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","6ea36343":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_over, y_over)\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","c85253d8":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","e019723c":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_under, y_under )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","e87531fc":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","1b114fb5":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_train, y_train )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","ddf56a84":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","7f23ca15":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_smote, y_smote )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","e28bd81f":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","90458404":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_over, y_over )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","12693fab":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","f0a3795f":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_under, y_under )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","9a2eb5a5":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","1e9f714e":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_train, y_train )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","e13904db":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","ed03e7aa":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_smote, y_smote)\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","fbe423fa":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","46bdf899":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_over, y_over )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","9faa7f5a":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","ab584d37":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_under, y_under )\n\ny_pred = rfc.predict(x_test)\n\nprint(accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","0477b45e":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","b9a08136":"#### BASE LINE MODEL","196a87ef":"#### FOR LOGISTIC REGRESSION","6147753c":"#### RANDOM FOREST CLASSIFIER (UNDER SAMPLING)","16a13bb0":"__V1 to V28 are the columns which have been obtained from dimension reduction technique, PCA. The 'time' column represents seconds elapsed from the first transaction. The 'amount' column represents the target variable.__","ba557b0e":"### RANDOM FOREST (Standardized data)","6fb38a82":"### OUTLIER TREATMENT","4ad59959":"#### DECISION TREE (UNDERSAMPLING)","810f88ea":"### KNN","15a30e3f":"#### BASE LINE MODEL","9958ae41":"#### RANDOM FOREST (UNDERSAMPLING) (Normalized Data)","520e2ac0":"#### KNN (SMOTE)","1819985a":"__Only class column is categorical because number of unique values is less than 20.__","b2244195":"#### LOGISTIC REGRESSION (OVERSAMPLING) (Standardized data)","54102f6d":"### CHANGING THE DATA TYPE OF TIME COLUMN","ac802930":"### SOME STATISTICAL INSIGHTS","2eb626ec":"### KNN","bc872c12":"#### DECISION TREE (UNDERSAMPLING) (Normalized Data)","8dc13f01":"#### BASE LINE MODEL","b9daba5e":"#### KNN (UNDERSAMPLING) (Normalized Data)","1977e68f":"#### RANDOM FOREST (OVERSAMPLING) (Standardized data)","fb5cb08b":"#### FOR DECISION TREE","38f00ca8":"#### BASELINE MODEL","da081958":"#### KNN (OVERSAMPLING) (Standardized data)","db348976":"__We took only those rows for our analysis where the Amount is greater than 0.__","b68fa61f":"__There are 284807 rows. Now we will check whether there are any duplicate rows or not. If yes, we will remove them.__","228a2196":"#### LOGISTIC REGRESSION (SMOTE) (Standardized data)","682c38c5":"__Number of rows have reduced from 284807 to 283726.__","d345dd01":"#### BASELINE MODEL","8e24cb01":"__This is a highly unbalanced data set because most of the transactions are genuine while fraud transactions account for only 0.001 % approximately.__","b9862d0a":"### SPECIFYING DATA INTO X AND Y VARIABLE","f8613956":"### DECISION TREE (Normalized Data)","57b8c16b":"pd.set_option('display.max_rows',1000)\ndf.head(1000)","8dcb12f1":"#### LOGISTIC REGRESSION (OVERSAMPLING) (Normalised data)","8a97e245":"### DECISION TREE (Standardized data)","9d761f29":"### The best model is KNN (baseline)(Normalized data).\n#### Error percentage: 0.0413%\n#### Accuracy: 0.9995\n#### AUC: 0.9023","2db66ba4":"### LOGISTIC REGRESSION","63039f7f":"#### LOGISTIC REGRESSION (UNDERSAMPLING) (Normalised data)","e24d2e32":"### __READING THE DATA__","0219fc4b":"### RANDOM FOREST ","2d8f0201":"### CHECKING THE PROPORTION OF CLASSES","34f49d33":"__We drop  V13, V15, V25 from our analysis because the p value is more than 0.05. This means null hypothesis is not rejected which indicates that the variables do not have any relation with the Class column.__","9ef993f2":"### __IMPORTING LIBRARIES__","991541cd":"#### SMOTE DATA","30a3a2ce":"#### LOGISTIC REGRESSION (SMOTE) (Standardized Data)","96920f10":"#### BASELINE MODEL","8c54dacd":"__There are no missing values in any of the variables of NaN type. However there can be missing value if the amount column has 0. Transaction can never be of 0 amount__","037caf05":"### DEALING WITH DUPLICATE ROWS","a046c3fb":"#### DECISION TREE (OVERSAMPLING) (Standardized data)","beffccab":"### SPLITTING TRAINING DATA SET INTO FRAUD AND GENUINE TRANSACTION DATA SET","f1d0a41c":"### CHECKING FOR MISSING VALUES","219d1b65":"over,under,smote\n### SAMPLING ","5e83a547":"#### KNN (UNDERSAMPLING)","6df5f3f7":"### KNN (Standardized data)","82f9496a":"#### BASELINE","a8f525b4":"#### LOGISTIC REGRESSION (SMOTE)","f6aa49c1":"#### BASELINE MODEL (Normalized Data)","b4be7450":"### PARAMETER TUNING","4b9a7c46":"### ANOVA TEST FOR STATISTICAL FEATURE SELECTION","bb1d76f2":"#### BASELINE MODEL (Normalized data)","d054aaae":"#### RANDOM FOREST (OVERSAMPLING) (Normalized Data)","057d2c7c":"#### RANDOM FOREST (SMOTE) (Standardized data)","1457acf6":"#### RANDOM FOREST (UNDERSAMPLING)(Standardized data)","6e7bcbeb":"### NORMALIZING THE DATA","98ebd144":"__We have duplicate 1081 duplicate rows. So we will now remove them.__","5ed51a85":"#### DECISION TREE (OVER) (Normalized data)","c945451c":"#### KNN (OVERSAMPLING) (Normalized Data)","053a7eab":"#### OVERSAMPLED DATA","cfcebb8e":"#### FOR KNN","f3824999":"#### RANDOM FOREST CLASSIFIER (OVER SAMPLING)","c16b673e":"#### LOGISTIC REGRESSION (UNDERSAMPLING) (Standardized data)","89a6a71b":"### GETTING TRAINING AND TESTING DATA SET ","c0921d4b":"#### FOR RANDOM FOREST","3f794fda":"### RANDOM FOREST CLASSIFIER","7704678a":"__There are 197015 genuine transactions and 325 fraud ones.__","aca642a7":"#### RANDOM FOREST (SMOTE) (Normalized Data)","31e5532d":"### CHECKING DATA TYPE OF COLUMNS","7ed37794":"#### UNDERSAMPLED DATA","4a4605cf":"### DECISION TREE CLASSIFIER ","8620a98b":"#### LOGISTIC REGRESSION (OVER SAMPLING)","e4c59cd5":"#### BASELINE MODEL (Normalized data)","033a1ea3":"#### DECISION TREE (SMOTE) (Stanadardized data)","600963f5":"#### RANDOM FOREST CLASSIFIER (SMOTE)","7110b561":"### LOGISTIC REGRESSION (Normalized data)","f8aab03c":"#### DECISION TREE (UNDERSAMPLING) (Standarized data)","fc939137":"#### DECISION TREE (OVERSAMPLING)","ab251012":"### STANDARDIZING THE DATA","1c94223d":"### DETERMINING THE VARIABLE TYPES","adf0f4f2":"#### KNN (UNDERSAMPLING) (Standardized data)","fce2851d":"#### KNN (OVERSAMPLING)","98d3ac2b":"#### DECISION TREE (SMOTE) (Normalized data)","657e0188":"### LOGISTIC REGRESSION (Standardized data)","105732de":"#### DECISION TREE (SMOTE)","7a5d7d5c":"### APPLYING DIFFERENT ALGORITHMS","9e00b3fd":"#### BASELINE MODEL (Normalized data)","7523fb06":"#### BASELINE MODEL (Standardized data)","cdd58668":"#### LOGISTIC REGRESSION (UNDER SAMPLING)","f9de4c72":"#### KNN (SMOTE) (Normalized Data)","4cfbdb73":"#### KNN (SMOTE) (Standarized data)"}}