{"cell_type":{"af8d9c59":"code","141209f5":"code","9422a4c9":"code","66658633":"code","08612d4c":"code","643ff7f6":"code","4b9cf2bb":"code","0d5ecc0a":"code","70407f14":"code","774c0bfb":"code","bcea505a":"code","925fbfab":"code","9b8ad570":"code","b0e50955":"code","0895b009":"code","37ae59dc":"code","c0c7296d":"code","77edcaef":"code","8de5fff0":"code","ef036449":"code","b7527d6e":"code","f9e1e8d2":"code","f61da03a":"code","dd6e9dfd":"markdown","ff8178d8":"markdown","e8ace9c8":"markdown","7f878441":"markdown","c7460b3b":"markdown","72b5198f":"markdown","841ff8ce":"markdown","1ed91d91":"markdown","1e6d4118":"markdown"},"source":{"af8d9c59":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#classifier libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.metrics import f1_score,log_loss,roc_auc_score, roc_curve,recall_score,confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, MinMaxScaler\nfrom sklearn.metrics import roc_curve, auc","141209f5":"df = pd.read_csv(\"..\/input\/mushrooms.csv\")\nprint(df.shape)\ndf.head()","9422a4c9":"# check for missing value\ndf.isnull().sum()","66658633":"# check data types\ndf.dtypes","08612d4c":"# check for distinct type of value in each columns\ndf.nunique()","643ff7f6":"# veil type has only one entry , we can delete this column\ndf = df.drop('veil-type',1)","4b9cf2bb":"# lets check the each entry in the column\nfor i in df.columns:\n    print(\"distribution of column:\",i)\n    print(df[i].value_counts())","0d5ecc0a":"# stalk root has missing value,lets impute it with new category (n)\ndf.loc[df['stalk-root']=='?','stalk-root'] = 'n'","70407f14":"# encoding labels \nlabelencoder=LabelEncoder()\nfor col in df.columns:\n    df[col] = labelencoder.fit_transform(df[col])\n\ndf.head()","774c0bfb":"#train test split\nX = df.drop('class',1)\ny = df['class']\n\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n","bcea505a":"# K -fold cross validation\n\nn_folds = 5\n\ndef accuracy_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=0).get_n_splits(X.values)\n    accuracy= cross_val_score(model, X.values, y.values, scoring=\"accuracy\", cv = kf)\n    return(accuracy)","925fbfab":"logreg = LogisticRegression(C =1000, max_iter= 100000)\nscore = accuracy_cv(logreg)\nprint(\"1st Fold Score:\",score[0])\nprint(\"2nd Fold Score:\",score[1])\nprint(\"3rd Fold Score:\",score[2])\nprint(\"4th Fold Score:\",score[3])\nprint(\"5th Fold Score:\",score[4])\nprint(\"\\nLogistic regression score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","9b8ad570":"knn = KNeighborsClassifier(n_neighbors=1)\nscore = accuracy_cv(knn)\nprint(\"1st Fold Score:\",score[0])\nprint(\"2nd Fold Score:\",score[1])\nprint(\"3rd Fold Score:\",score[2])\nprint(\"4th Fold Score:\",score[3])\nprint(\"5th Fold Score:\",score[4])\nprint(\"\\nKNN score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","b0e50955":"tree = DecisionTreeClassifier(criterion='entropy', max_depth= 12, random_state= 0)\nscore = accuracy_cv(tree)\nprint(\"1st Fold Score:\",score[0])\nprint(\"2nd Fold Score:\",score[1])\nprint(\"3rd Fold Score:\",score[2])\nprint(\"4th Fold Score:\",score[3])\nprint(\"5th Fold Score:\",score[4])\nprint(\"\\nDecision Tree score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","0895b009":"rf = RandomForestClassifier(n_estimators= 12, random_state=0, criterion='entropy')\nscore = accuracy_cv(rf)\nprint(\"1st Fold Score:\",score[0])\nprint(\"2nd Fold Score:\",score[1])\nprint(\"3rd Fold Score:\",score[2])\nprint(\"4th Fold Score:\",score[3])\nprint(\"5th Fold Score:\",score[4])\nprint(\"\\nDecision Tree score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","37ae59dc":"ada = AdaBoostClassifier(n_estimators= 50, learning_rate=1, random_state=0)\nscore = accuracy_cv(ada)\nprint(\"1st Fold Score:\",score[0])\nprint(\"2nd Fold Score:\",score[1])\nprint(\"3rd Fold Score:\",score[2])\nprint(\"4th Fold Score:\",score[3])\nprint(\"5th Fold Score:\",score[4])\nprint(\"\\nDecision Tree score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","c0c7296d":"xgb = XGBClassifier(max_depth=3,learning_rate=1,n_estimators=20, random_state=0)\nscore = accuracy_cv(xgb)\nprint(\"1st Fold Score:\",score[0])\nprint(\"2nd Fold Score:\",score[1])\nprint(\"3rd Fold Score:\",score[2])\nprint(\"4th Fold Score:\",score[3])\nprint(\"5th Fold Score:\",score[4])\nprint(\"\\nDecision Tree score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","77edcaef":"# Random Forest\nrf.fit(X_train,y_train)\nprint(rf.score(X_test,y_test))\nconfusion_matrix(y_test,rf.predict(X_test))","8de5fff0":"false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, rf.predict(X_test))\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","ef036449":"plt.figure(figsize=(10,10))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate,true_positive_rate, color='red',label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],linestyle='--')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","b7527d6e":"## Feature importance \na = list(rf.feature_importances_)\nscore = pd.DataFrame({'value':a,'columns':X.columns})\nscore = score.sort_values('value', ascending= False)","f9e1e8d2":"score","f61da03a":"plt.figure(figsize= (25,12))\nsns.barplot(score['columns'], score['value'])\nplt.show()","dd6e9dfd":"As expected odor of the mushroom is the most important feature","ff8178d8":"**K Nearest Neighbour**","e8ace9c8":"**Logistic Regression**","7f878441":"**Adaboost Classifier**","c7460b3b":"There is no missing value","72b5198f":"**Random Forest Classifier**","841ff8ce":"**XG Boost Classifier**","1ed91d91":"Till Now **random forest** gives best result, lets check the accuracy and confusion matrix","1e6d4118":"**Decision Tree Classifier**"}}