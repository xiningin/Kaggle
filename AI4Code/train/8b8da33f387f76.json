{"cell_type":{"0443963e":"code","573fbda5":"code","a6190304":"code","df44a42d":"code","685c6e89":"code","da94efa7":"code","ed6259ce":"code","40c90f26":"code","ec0d790d":"code","6b4f4919":"code","3afbcf88":"code","a5c5397c":"code","f6e8e759":"code","ea9e2376":"code","e56b41d6":"markdown","17744613":"markdown","a9e3dc71":"markdown","0e9223b0":"markdown","3d47d12f":"markdown","359bbbde":"markdown","74e2f6a9":"markdown","3d14670c":"markdown","c1fca2b2":"markdown","4c17eac5":"markdown","a27593d3":"markdown","e7c69194":"markdown","a4a421b8":"markdown"},"source":{"0443963e":"from learntools.core import binder\nbinder.bind(globals())\nfrom learntools.data_cleaning.ex2 import *\n#mute warnings\nimport warnings \nwarnings.filterwarnings('ignore')\nprint(\"Setup Complete\")","573fbda5":"# modules we'll use\nimport pandas as pd\nimport numpy as np\n\n# for Box-Cox Transformation\nfrom scipy import stats\n\n# for min_max scaling\nfrom mlxtend.preprocessing import minmax_scaling\n\n# plotting modules\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# read in all our data\nkickstarters_2017 = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\n\n# set seed for reproducibility\nnp.random.seed(0)","a6190304":"kickstarters_2017.describe().transpose()","df44a42d":"# select the usd_goal_real column\noriginal_data = pd.DataFrame(kickstarters_2017.usd_goal_real)\n\n# scale the goals from 0 to 1\nscaled_data = minmax_scaling(original_data, columns=['usd_goal_real'])\n\n# plot the original & scaled data together to compare\nfig, ax=plt.subplots(1,2,figsize=(15,3))\nsns.distplot(kickstarters_2017.usd_goal_real, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(scaled_data, ax=ax[1])\nax[1].set_title(\"Scaled data\")","685c6e89":"print('Original data\\nPreview:\\n', original_data.head())\nprint('Minimum value:', float(original_data.min()),\n      '\\nMaximum value:', float(original_data.max()))\nprint('_'*30)\n\nprint('\\nScaled data\\nPreview:\\n', scaled_data.head())\nprint('Minimum value:', float(scaled_data.min()),\n      '\\nMaximum value:', float(scaled_data.max()))","da94efa7":"# select the usd_goal_real column\noriginal_goal_data = pd.DataFrame(kickstarters_2017.goal)","ed6259ce":"# TODO: Your code here\nscaled_goal_data = minmax_scaling(original_goal_data, columns = ['goal'])\n\nfig, ax = plt.subplots(1, 2, figsize = (15, 7))\nsns.distplot(kickstarters_2017.goal, ax = ax[0])\nax[0].set_title('Original Data')\nsns.distplot(scaled_goal_data, ax = ax[1])\nax[1].set_title('Scaled Data')\nplt.show()\n# Check your answer\nq1.check()","40c90f26":"# Lines below will give you a hint or solution code\n#q1.hint()\n#q1.solution()","ec0d790d":"# get the index of all positive pledges (Box-Cox only takes positive values)\nindex_of_positive_pledges = kickstarters_2017.usd_pledged_real > 0\n\n# get only positive pledges (using their indexes)\npositive_pledges = kickstarters_2017.usd_pledged_real.loc[index_of_positive_pledges]\n\n# normalize the pledges (w\/ Box-Cox)\nnormalized_pledges = pd.Series(stats.boxcox(positive_pledges)[0], \n                               name='usd_pledged_real', index=positive_pledges.index)\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2,figsize=(15,3))\nsns.distplot(positive_pledges, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(normalized_pledges, ax=ax[1])\nax[1].set_title(\"Normalized data\")","6b4f4919":"print('Original data\\nPreview:\\n', positive_pledges.head())\nprint('Minimum value:', float(positive_pledges.min()),\n      '\\nMaximum value:', float(positive_pledges.max()))\nprint('_'*30)\n\nprint('\\nNormalized data\\nPreview:\\n', normalized_pledges.head())\nprint('Minimum value:', float(normalized_pledges.min()),\n      '\\nMaximum value:', float(normalized_pledges.max()))","3afbcf88":"# TODO: Your code here;\npositives_pledged_index = kickstarters_2017.pledged > 0\npositives_pledged = kickstarters_2017.pledged.loc[positives_pledged_index]\n\nnormalized_pledged = pd.Series(stats.boxcox(positives_pledged)[0], name = 'pledged', index = positives_pledged.index)\n\nfig, ax = plt.subplots(1, 2, figsize = (15, 7))\nsns.distplot(positives_pledged, ax = ax[0])\nax[0].set_title('Original Data')\nsns.distplot(normalized_pledged, ax = ax[1])\nax[1].set_title('Normalized Data')","a5c5397c":"print('Original data\\nPreview:\\n', positives_pledged.head())\nprint('Minimum value:', float(positives_pledged.min()),\n      '\\nMaximum value:', float(positives_pledged.max()))\nprint('_'*30)\n\nprint('\\nNormalized data\\nPreview:\\n', normalized_pledged.head())\nprint('Minimum value:', float(normalized_pledged.min()),\n      '\\nMaximum value:', float(normalized_pledged.max()))","f6e8e759":"# Check your answer (Run this code cell to receive credit!)\nq2.check()","ea9e2376":"# Line below will give you a hint\n#q2.hint()","e56b41d6":"In this exercise, you'll apply what you learned in the **Scaling and normalization** tutorial.\n\n# Setup\n\nThe questions below will give you feedback on your work. Run the following cell to set up the feedback system.","17744613":"# (Optional) More practice\n\nTry finding a new dataset and pretend you're preparing to perform a [regression analysis](https:\/\/www.kaggle.com\/rtatman\/the-5-day-regression-challenge). \n\n[These datasets are a good start!](https:\/\/www.kaggle.com\/rtatman\/datasets-for-regression-analysis)\n\nPick three or four variables and decide if you need to normalize or scale any of them and, if you think you should, practice applying the correct technique.\n\n# Keep going\n\nIn the next lesson, learn how to [**parse dates**](https:\/\/www.kaggle.com\/alexisbcook\/parsing-dates) in a dataset.","a9e3dc71":"We used the \"usd_pledged_real\" column. Follow the same process to normalize the \"pledged\" column. ","0e9223b0":"Use `original_goal_data` to create a new DataFrame `scaled_goal_data` with values scaled between 0 and 1. You must use the `minmax_scaling()` function.","3d47d12f":"After scaling, all values lie between 0 and 1 (you can read this in the horizontal axis of the second plot above, and we verify in the code cell below).","359bbbde":"It's not perfect (it looks like a lot pledges got very few pledges) but it is much closer to a normal distribution!","74e2f6a9":"# 2) Practice normalization\n\nNow you'll practice normalization. We begin by normalizing the amount of money pledged to each campaign.","3d14670c":"# Get our environment set up\n\nTo practice scaling and normalization, we're going to use a [dataset of Kickstarter campaigns](https:\/\/www.kaggle.com\/kemical\/kickstarter-projects). (Kickstarter is a website where people can ask people to invest in various projects and concept products.)\n\nThe next code cell loads in the libraries and dataset we'll be using. ","c1fca2b2":"**This notebook is an exercise in the [Data Cleaning](https:\/\/www.kaggle.com\/learn\/data-cleaning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/alexisbcook\/scaling-and-normalization).**\n\n---\n","4c17eac5":"# 1) Practice scaling\n\nWe just scaled the \"usd_goal_real\" column. What about the \"goal\" column?\n\nBegin by running the code cell below to create a DataFrame `original_goal_data` containing the \"goal\" column.","a27593d3":"How does the normalized \"usd_pledged_real\" column look different from when we normalized the \"pledged\" column?  Or, do they look mostly the same?\n\nOnce you have an answer, run the code cell below.","e7c69194":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https:\/\/www.kaggle.com\/learn\/data-cleaning\/discussion) to chat with other learners.*","a4a421b8":"Let's start by scaling the goals of each campaign, which is how much money they were asking for.  The plots show a histogram of the values in the \"usd_goal_real\" column, both before and after scaling.  "}}