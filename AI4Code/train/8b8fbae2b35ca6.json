{"cell_type":{"87406105":"code","f5b322cb":"code","0ca0c18d":"code","4459a381":"code","9d7ee539":"code","b3bcee41":"code","07c20059":"code","f59a8a28":"code","1265a8c7":"code","a051e083":"code","a80d036c":"code","d8e07ef4":"code","76ef122f":"code","de2eb1b4":"code","59c906d0":"code","3af925c7":"code","bc5bc9ce":"code","15a2d406":"code","7c7ff649":"code","40db3d14":"code","e5d84c08":"code","262fce81":"code","389d0596":"code","1e341793":"code","aae4af27":"code","582f52fa":"code","4e0e5869":"code","4a922197":"code","0531be2f":"code","d1ee59f8":"code","ac90666d":"code","94ebfba1":"code","1ddb26e3":"code","61e6acee":"code","317dfac1":"code","770b12c9":"code","fb06e34c":"code","407a085f":"code","76fa1575":"code","4e933f1b":"code","03e8cf90":"code","51892c64":"code","66b1b2fd":"code","201090af":"code","26082c9d":"code","4ae79000":"code","7ef91948":"code","149e6611":"code","82c5c0f0":"code","e81dfb9b":"code","e3209260":"code","615d52d8":"code","fddc0de2":"code","044e5af5":"code","c1a7be3e":"code","0d921962":"code","c69d5af7":"code","56d6d879":"code","ab81ca21":"code","06440608":"code","25141cb5":"code","11e6bacd":"code","e195e6a5":"markdown","7fc97f5a":"markdown","ca49770a":"markdown","c75b68fa":"markdown","2b225fed":"markdown","06af6df1":"markdown","c25fdd1f":"markdown","3dcea411":"markdown","5781069c":"markdown","976ef9dc":"markdown","81d13a90":"markdown","1c07442d":"markdown"},"source":{"87406105":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns","f5b322cb":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest_x=pd.read_csv('..\/input\/titanic\/test.csv')\ntest_y=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","0ca0c18d":"train.shape","4459a381":"train.columns","9d7ee539":"train.head(10)","b3bcee41":"train.dtypes","07c20059":"# Removing Unncessary Columns to Avoid Memeory Consumptiosn to Process \ntrain.drop(columns=['Name','Ticket','PassengerId'], axis=1,inplace=True)","f59a8a28":"train.head(5)","1265a8c7":"# Missing Value Computations \ndef missingValue(dataset):\n    print(\"Total Dataset Length : \",len(dataset))\n    for column_name in dataset.columns :\n        if dataset[column_name].isnull().values.sum() != 0:\n            print('-------------------------')\n            print(\"Missing Value Percentage in column {0} is {1}\".format(column_name,round(dataset[column_name].isnull().values.sum()\/len(dataset[column_name]),3)))\n    print('-----------------------')\n    print('$End$')","a051e083":"missingValue(train)","a80d036c":"train.drop(columns=['Cabin'], axis=1,inplace=True)","d8e07ef4":"# Treating Missing Values  : Numerical\nmean_age=np.mean(train['Age'])\ntrain['Age'].fillna(mean_age,inplace=True)","76ef122f":"# Treating Missing Values  : Categorical\nmode_Embarked=train['Embarked'].mode()[0]\ntrain['Embarked'].fillna(mode_Embarked,inplace=True)","de2eb1b4":"missingValue(train)","59c906d0":"sns.pairplot(train)","3af925c7":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(14,6))\n\nsns.countplot(x = 'Survived', hue='Sex', data=train, ax =  axis1)\naxis2.set_title('Number of passenger Survived By Gender')\n\nsns.countplot(x='Sex',data=train,hue='Sex', ax = axis2)\naxis1.set_title('Number of passenger did\/didnt Survived By Gender')","bc5bc9ce":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(14,6))\n\nsns.countplot(x = 'Survived', hue='Embarked', data=train, ax =  axis1)\naxis2.set_title('Number of passenger Survived Based on Embarked Port')\n\nsns.countplot(x='Embarked',data=train,hue='Embarked', ax = axis2)\naxis1.set_title('Number of passenger did\/didnt Survived Based on Embarked Port')","15a2d406":"fig= plt.figure(figsize=(20,6))\nsns.distplot(train['Age'],kde=True)\nplt.title('Distribution of Age of Passengers')\nplt.xlabel(\"Age\")\nplt.ylabel(\"Distribution\")\nplt.show()","7c7ff649":"fig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(18,6))\n\nsns.countplot(x = 'Pclass', hue='Pclass', data=train, ax =  axis1)\naxis1.set_title('Number of passenger in Pclass')\n\nsns.countplot(x='Pclass',data=train,hue='Survived', ax = axis2)\naxis2.set_title('Number of passenger did\/didnt Survived Based on Pclass')\n\nsns.countplot(x='Pclass',data=train,hue='Sex', ax = axis3)\naxis3.set_title('Number of Male\/Female passenger Based on Pclass')","40db3d14":"#Creating a Dummy Column just for the sake of creating a Family size\ntrain['Nanny_Parch']=np.where(train['Parch']==0,1,0)","e5d84c08":"train['Pfamily']=train['Parch']+train['SibSp']+train['Nanny_Parch']","262fce81":"plt.figure(figsize = (10, 6))\nsns.heatmap(train.corr(), annot=True)\nplt.title('Corelation Matrix')","389d0596":"#dropping the Temporary and Unnesscary Column\ntrain.drop(columns=['Nanny_Parch','Parch','SibSp'],inplace=True)","1e341793":"# Function to know if a Variable has Binary Value\ndef binary_column(dataset):\n    for column_name in dataset.columns:\n        if len(set(train[column_name])) == 2:\n            print('{0} is binary value column.'.format(column_name))\n            \nbinary_column(train)","aae4af27":"train['Sex'].replace({'male':0,'female':1},inplace=True)","582f52fa":"set(train['Embarked'])","4e0e5869":"train['Embarked'].replace({'C':1,'Q':2,'S':3},inplace=True)","4a922197":"plt.figure(figsize = (10, 6))\nsns.heatmap(train.corr(), annot=True)\nplt.title('Corelation Matrix')","0531be2f":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import RFE\nLR = LogisticRegression()","d1ee59f8":"X=train.drop('Survived',axis=1)\ny=train['Survived']","ac90666d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","94ebfba1":"rfe=RFE(LR,n_features_to_select=4)\nrfe=rfe.fit(X_train,y_train)","1ddb26e3":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","61e6acee":"col=X_train.columns[rfe.support_]\ncol","317dfac1":"import statsmodels.api as sm","770b12c9":"X_train_sm=sm.add_constant(X_train[col])\nsm_model=sm.GLM(y_train,X_train_sm,family=sm.families.Binomial())\nresult=sm_model.fit()\nresult.summary()","fb06e34c":"# Getting The Prediction \ny_train_pred=result.predict(X_train_sm)\ny_train_pred[:10]","407a085f":"y_train_pred=y_train_pred.values.reshape(-1)\ny_train_pred[:10]","76fa1575":"outcome=pd.DataFrame({\"Actual\":y_train.values,\"Predicted\":y_train_pred})","4e933f1b":"outcome['Predicted']=round(outcome['Predicted'],0)\noutcome['Predicted']=outcome['Predicted'].astype('int')\noutcome","03e8cf90":"from sklearn import metrics\nconfusion_matrix=metrics.confusion_matrix(outcome.Actual,outcome.Predicted)\nconfusion_matrix","51892c64":"print('Traning Accuracy: ',metrics.accuracy_score(outcome.Actual,outcome.Predicted))","66b1b2fd":"print(metrics.classification_report(outcome.Actual,outcome.Predicted))","201090af":"#Validation Set Outcome\nX_test_sm=sm.add_constant(X_test[col])\ny_test_pred=result.predict(X_test_sm)","26082c9d":"outcome=pd.DataFrame({\"Test_Actual\":y_test.values,\"Test_Predicted\":y_test_pred})\noutcome['Test_Predicted']=round(outcome['Test_Predicted'],0)\noutcome['Test_Predicted']=outcome['Test_Predicted'].astype('int')","4ae79000":"print('Validation Accuracy: ',metrics.accuracy_score(outcome.Test_Actual,outcome.Test_Predicted))","7ef91948":"col","149e6611":"# Test Accuracy\n\ntest_x['Nanny_Parch']=np.where(test_x['Parch']==0,1,0)\ntest_x['Pfamily']=test_x['Parch']+test_x['SibSp']+test_x['Nanny_Parch']\n\n# Selecting & Preprocessing Variables \ntest_x_sm=test_x[col]\ntest_x_sm['Sex'].replace({'male':0,'female':1},inplace=True)\ntest_x_sm['Embarked'].replace({'C':1,'Q':2,'S':3},inplace=True)","82c5c0f0":"# Validation Set Outcome\ntest_sm=sm.add_constant(test_x_sm[col])\ntest_sm_pred=result.predict(test_sm)","e81dfb9b":"test_outcome=pd.DataFrame({\"Test_Actual\":test_y['Survived'].values,\"Test_Predicted\":test_sm_pred})\ntest_outcome['Test_Predicted']=round(test_outcome['Test_Predicted'],0)\ntest_outcome['Test_Predicted']=test_outcome['Test_Predicted'].astype('int')","e3209260":"LR = LogisticRegression(solver='lbfgs',fit_intercept=False,warm_start=True)\nLR.fit(X_train[col],y_train)","615d52d8":"# Getting The Prediction \ny_train_pred=LR.predict(X_train[col])\ny_train_pred[:10]","fddc0de2":"outcome=pd.DataFrame({\"Actual\":y_train.values,\"Predicted\":y_train_pred})","044e5af5":"outcome['Predicted']=round(outcome['Predicted'],0)\noutcome['Predicted']=outcome['Predicted'].astype('int')\noutcome","c1a7be3e":"print('Traning Accuracy: ',metrics.accuracy_score(outcome.Actual,outcome.Predicted))","0d921962":"y_test_pred=LR.predict(X_test[col])","c69d5af7":"outcome=pd.DataFrame({\"Test_Actual\":y_test.values,\"Test_Predicted\":y_test_pred})\noutcome['Test_Predicted']=round(outcome['Test_Predicted'],0)\noutcome['Test_Predicted']=outcome['Test_Predicted'].astype('int')","56d6d879":"print('Validation Accuracy: ',metrics.accuracy_score(outcome.Test_Actual,outcome.Test_Predicted))","ab81ca21":"test_LR=test_x_sm[col]\ntest_LR_pred=LR.predict(test_LR)","06440608":"test_outcome=pd.DataFrame({\"Test_Actual\":test_y['Survived'].values,\"Test_Predicted\":test_LR_pred})\ntest_outcome['Test_Predicted']=round(test_outcome['Test_Predicted'],0)\ntest_outcome['Test_Predicted']=test_outcome['Test_Predicted'].astype('int')","25141cb5":"submission_df=test_y.copy()\nsubmission_df['Survived']=test_outcome.Test_Predicted","11e6bacd":"submission_df.to_csv('gender_submission.csv',index=False)","e195e6a5":"#### Variable Notes\n\n    pclass: A proxy for socio-economic status (SES)\n    1st = Upper\n    2nd = Middle\n    3rd = Lower\n\n    age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n    sibsp: The dataset defines family relations in this way...\n    Sibling = brother, sister, stepbrother, stepsister\n    Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n    parch: The dataset defines family relations in this way...\n    Parent = mother, father\n    Child = daughter, son, stepdaughter, stepson\n    Some children travelled only with a nanny, therefore parch=0 for them.","7fc97f5a":"Creating a New Feature called Pfamily, which is a combination of sibsp and parch\n\n    sibsp: The dataset defines family relations in this way...\n    Sibling = brother, sister, stepbrother, stepsister\n    Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n    parch: The dataset defines family relations in this way...\n    Parent = mother, father\n    Child = daughter, son, stepdaughter, stepson\n    Some children travelled only with a nanny, therefore parch=0 for them.","ca49770a":"Insights  : As the Cabin Column has almost 77% values missing so Dropping the Columns for Deriving Insights to classifiy the Passengers Surviability.","c75b68fa":"### Assesing our outcome using StatsModel","2b225fed":"#### Saving Results","06af6df1":"#### Using Recursive Feature Elimination","c25fdd1f":"#### Applying Model on Test\/Unseen Data ","3dcea411":"### Problem Statement : Titanic - Machine Learning from Disaster\n\n    Author : Srikant Sahoo \n    Problem Type : Classification with EDA\n    \n    Goal\n    \n    It is your job to predict if a passenger survived the sinking of the Titanic or not.\n    For each in the test set, you must predict a 0 or 1 value for the variable.\n\n    Metric\n    \n    Your score is the percentage of passengers you correctly predict. This is known as accuracy.","5781069c":"### Assesing our outcome using Logistic Regression Model","976ef9dc":"#### Ploting the Variables","81d13a90":"#### Applying Model on Test\/Unseen Data ","1c07442d":"Creating Dummy Features and Encoding Binary and Less No of Categorical Values "}}