{"cell_type":{"c038dd9e":"code","ddbf0e69":"code","745b2c8d":"code","60053dcf":"code","17f0c7d7":"code","1fae4464":"code","dda14a24":"code","c1110fab":"code","c0ef93c3":"code","77eea534":"code","69e7aa4a":"code","d77900b7":"code","d195f852":"code","d80d6de8":"code","3fd171e7":"code","dbcd79f5":"code","27e26e08":"code","491827bb":"code","f30b045a":"code","e622d5b1":"code","522a22a5":"code","f31e9034":"code","72e262e2":"markdown"},"source":{"c038dd9e":"import numpy as np\nimport pandas as pd \nimport os","ddbf0e69":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2","745b2c8d":"base_dir = \"\/kaggle\/input\/image-super-resolution\/dataset\/\"","60053dcf":"def load_data(path):\n    high_res_images = []\n    low_res_images = []\n    for dirname, _, filenames in os.walk(path+'low_res'):\n        for filename in filenames:\n            img = cv2.imread(os.path.join(dirname, filename))\n            img = process_image(img)\n            low_res_images.append(img)\n        \n    for dirname, _, filenames in os.walk(path+'high_res'):\n        for filename in filenames:\n            img = cv2.imread(os.path.join(dirname, filename))\n            img = process_image(img)\n            high_res_images.append(img)\n    \n    return np.array(low_res_images), np.array(high_res_images)","17f0c7d7":"def process_image(image):\n    return image\/255","1fae4464":"train_x, train_y =  load_data(base_dir+'train\/')\nval_x, val_y = load_data(base_dir+'val\/')","dda14a24":"import tensorflow as tf\nfrom keras import backend as K\nfrom keras.models import Model\nfrom keras.layers import Input, Conv2D, MaxPooling2D,concatenate,ZeroPadding2D,UpSampling2D\nfrom keras.optimizers import Adam,SGD","c1110fab":"train_x.shape","c0ef93c3":"def res(prev_layer):\n    l1=Conv2D(64,(3,3),activation='relu')(prev_layer)\n    l2=Conv2D(64,(3,3),activation='relu',padding='same')(l1)\n    l3=Conv2D(64,(3,3),activation='relu',padding='same')(l2)\n    l4=concatenate([l1,l3])\n    l4=ZeroPadding2D(padding=(1, 1))(l4)\n    l5=Conv2D(64,(3,3),activation='relu',padding='same')(l4)\n    l6=concatenate([prev_layer,l5])\n    return l6","77eea534":"inp=Input(shape=(256,256,3))\nl1=Conv2D(64,(3,3),activation='relu',padding='same')(inp)\nl2=res(l1)\nl2=UpSampling2D()(l2)\nl2=MaxPooling2D()(l2)\n\n\nl3=res(l2)\nl3=UpSampling2D()(l3)\nl3=MaxPooling2D()(l3)\n\n\nl8=res(l3)\nl8=UpSampling2D()(l8)\nl8=MaxPooling2D()(l8)\n\n\nl9=res(l8)\nl9=UpSampling2D()(l9)\nl9=MaxPooling2D()(l9)\n\n\nl10=res(l9)\nl10=UpSampling2D()(l10)\nl10=MaxPooling2D()(l10)\n\n\nl11=res(l10)\nl11=UpSampling2D()(l11)\nl11=MaxPooling2D()(l11)\n\n\nl11=concatenate([l10,l11])\n\n\nl12=res(l11)\nl12=UpSampling2D()(l12)\nl12=MaxPooling2D()(l12)\n\n\n\n\n\nl13=res(l12)\nl13=UpSampling2D()(l13)\nl13=MaxPooling2D()(l13)\n\nl13=concatenate([l8,l13])\n\n\n\nl14=res(l13)\nl14=UpSampling2D()(l14)\nl14=MaxPooling2D()(l14)\n\n\n\n\n\nl15=res(l14)\nl15=UpSampling2D()(l15)\nl15=MaxPooling2D()(l15)\n\nl15=concatenate([l2,l15])\n\nout1=Conv2D(3,(3,3),activation='relu')(l15)\nout=ZeroPadding2D(padding=(1, 1))(out1)\n\nmodel=Model(inputs=[inp],outputs=out)\nmodel.summary()\n","69e7aa4a":"def compute_psnr(original_image, generated_image):\n    \n    original_image = tf.convert_to_tensor(original_image, dtype = tf.float32)\n    generated_image = tf.convert_to_tensor(generated_image, dtype = tf.float32)\n    \n    psnr = tf.image.psnr(original_image, generated_image, max_val = 1.0)\n    \n    return tf.math.reduce_mean(psnr, axis = None, keepdims = False, name = None)","d77900b7":"def compute_ssim(original_image, generated_image):\n    \n    original_image = tf.convert_to_tensor(original_image, dtype = tf.float32)\n    generated_image = tf.convert_to_tensor(generated_image, dtype = tf.float32)\n    \n    ssim = tf.image.ssim(original_image, generated_image, max_val = 1.0, filter_size = 11, filter_sigma = 1.5, k1 = 0.01, )\n    \n    return tf.math.reduce_mean(ssim, axis = None, keepdims = False, name = None)","d195f852":"import math\nfrom keras import backend as K\n\n\ndef PSNR(y_true, y_pred):\n    max_pixel = 1.0\n    return (10.0 * K.log((max_pixel ** 2) \/ (K.mean(K.square(y_pred - y_true), axis=-1)))) \/ 2.303\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=[PSNR,compute_ssim])","d80d6de8":"hist=model.fit(train_x, train_y, epochs=3,batch_size=1)","3fd171e7":"y_pred=model.predict(val_x[0:1])","dbcd79f5":"plt.imshow(y_pred[0])","27e26e08":"plt.imshow(val_x[0])","491827bb":"plt.imshow(val_y[0])","f30b045a":"compute_ssim(val_y[0], y_pred[0])","e622d5b1":"model.save('super_res1.h5')","522a22a5":"print(tf.__version__)","f31e9034":"import keras\nprint(keras.__version__)","72e262e2":"# Super Resolution\n### In this Notebook I'm attempting to convert Low resolution images into High resolution Images. I'm employing 2 level Deep Residual network for this task, it differ from from residual networks such as resnet as in it has 2 level of residual layers in a single block as compared to one in normal residual networks"}}