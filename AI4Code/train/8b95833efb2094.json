{"cell_type":{"ae06e591":"code","e3acba7c":"code","3f5db0d0":"code","86838df3":"code","a9bd0526":"code","90ba88a1":"code","e5dd2c06":"code","a924347b":"code","42a0cd0c":"code","d0520639":"code","867534de":"code","3cb42ee5":"code","44a6a617":"code","70f9c2f3":"code","25102f3c":"code","864ff586":"code","40d33606":"code","6ee2fce5":"code","d1771f2e":"code","04d150a6":"code","dfee2974":"code","fd6f1152":"markdown","af713d06":"markdown","9c2703f4":"markdown","2068f4b9":"markdown","b3b6cb6f":"markdown"},"source":{"ae06e591":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e3acba7c":"#set directories\ntrain_zip_path = \"..\/input\/facial-keypoints-detection\/training.zip\"\ntest_zip_path = \"..\/input\/facial-keypoints-detection\/test.zip\"\nid_lookup_table = \"..\/input\/facial-keypoints-detection\/IdLookupTable.csv\"\nsample_Submission = \"..\/input\/facial-keypoints-detection\/SampleSubmission.csv\"","3f5db0d0":"# unzipping\nimport zipfile\nwith zipfile.ZipFile(train_zip_path,'r') as zip_ref:\n    zip_ref.extractall('')\nwith zipfile.ZipFile(test_zip_path,'r') as zip_ref:\n    zip_ref.extractall('')\n","86838df3":"#load datasets\ntrain_df = pd.read_csv('training.csv')\ntest_df = pd.read_csv('test.csv')\nidLookupTable = pd.read_csv(id_lookup_table)\nsampleSumission = pd.read_csv(sample_Submission)","a9bd0526":"train_df.info()","90ba88a1":"#fill the nan values\ntrain_df.fillna(method='ffill',inplace=True)","e5dd2c06":"# Separate and reshape input values(x_train)\nimage_df = train_df['Image']\nimageArr = []\nfor i in range(0,len(image_df)):\n    img = image_df[i].split()\n    img = ['0' if x == '' else x for x in img]\n    imageArr.append(img)\n\nx_train = np.array(imageArr,dtype='float')\nx_train = x_train.reshape(-1,96,96,1)\nprint(x_train.shape)","a924347b":"#separate target values (y_train)\nkeypoints_df = train_df.drop('Image',axis = 1)\ny_train = np.array(keypoints_df,dtype='float')\nprint(y_train.shape)","42a0cd0c":"def visualizeWithNoKeypoints(index):\n    plt.imshow(x_train[index].reshape(96,96),cmap='gray')\n\ndef visualizeWithKeypoints(index):\n    plt.imshow(x_train[index].reshape(96,96),cmap='gray')\n    for i in range(1,31,2):\n        plt.plot(y_train[0][i-1],y_train[0][i],'ro')\n    ","d0520639":"#visualizing images with keypoints\n\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8,4))\nfig.subplots_adjust(left=0,right=1,bottom=0,top=1,hspace=0.05,wspace=0.05)\n\nplt.subplot(1,2,1)\nvisualizeWithNoKeypoints(1)\nplt.subplot(1,2,2)\nvisualizeWithKeypoints(1)","867534de":"#import all necessary libraries\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Activation, Convolution2D,MaxPooling2D,BatchNormalization, Flatten, Dense, Dropout\nfrom keras.layers.advanced_activations import LeakyReLU","3cb42ee5":"model = Sequential()\nmodel.add(Convolution2D(32,(3,3),padding='same',use_bias=False, input_shape=(96,96,1)))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(32,(3,3),padding='same',use_bias = False))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Convolution2D(64,(3,3),padding='same',use_bias = False))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(64, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(96, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(96, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(128, (3,3),padding='same', use_bias=False))\n# model.add(BatchNormalization())\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(128, (3,3),padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(256, (3,3),padding='same',use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(256, (3,3),padding='same',use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(512, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(512, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(30))\n\nmodel.summary()","44a6a617":"model.compile(optimizer='adam',loss='mean_squared_error',metrics=['mae','acc'])","70f9c2f3":"model.fit(x_train,y_train,batch_size=256,epochs=50,validation_split=2.0)","25102f3c":"test_df.isnull().any()","864ff586":"image_df = test_df['Image']\nkeypoints_df = test_df.drop('Image',axis = 1)\nimageArr = []\n\nfor i in range(0,len(image_df)):\n    img = image_df[i].split()\n    img = ['0' if x=='' else x for x in img]\n    imageArr.append(img)\n","40d33606":"x_test = np.array(imageArr,dtype='float')\nx_test = x_test.reshape(-1,96,96,1)\nprint(x_test.shape)","6ee2fce5":"y_test = np.array(keypoints_df,dtype='float')\nprint(y_test.shape)","d1771f2e":"#predict our results\npred = model.predict(x_test)","04d150a6":"idLookupTable.head()","dfee2974":"feature_names = list(idLookupTable['FeatureName'])\nimage_ids = list(idLookupTable['ImageId']-1)\nrow_ids = list(idLookupTable['RowId'])\n\nfeature_list = []\nfor feature in feature_names:\n    feature_list.append(feature_names.index(feature))\n    \npredictions = []\nfor x,y in zip(image_ids, feature_list):\n    predictions.append(pred[x][y])\n    \nrow_ids = pd.Series(row_ids, name = 'RowId')\nlocations = pd.Series(predictions, name = 'Location')\nlocations = locations.clip(0.0,96.0)\nsubmission_result = pd.concat([row_ids,locations],axis = 1)\nsubmission_result.to_csv('Submission.csv',index = False)","fd6f1152":"Now we need to evaluate the model with our test set. First we have to prepare out test set","af713d06":"Data Preprocessing steps\n1. Fill nan values.\n2. Separate input values(image) and targets(keypoints)\n3. Visualize some samples from train dataset\n","9c2703f4":"Alright, Data preprocessing is done. Now lets design training model. We are going to use **keras** framework to design our **CNN** model.","2068f4b9":"We designed our model, Now its time to configure the model","b3b6cb6f":"Lets upzip the zip files using **zipfile** and then load the datasets"}}