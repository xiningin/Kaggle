{"cell_type":{"e1498fbb":"code","eb70ddd3":"code","c6cd59ea":"code","35524605":"code","89ace4f4":"code","1f05e061":"code","dde4dc24":"code","bd11ae46":"code","6d094f9e":"code","f370652e":"code","151be1a9":"code","8a144b5c":"code","ec2c696b":"code","cb3cc133":"code","d60d2f84":"code","7a7abde2":"code","25fff3be":"code","4db23676":"code","6e6e1dfd":"code","dca638db":"code","953ba0a7":"code","d206d55e":"code","c9232a0e":"code","fe5e1b7b":"code","54630989":"code","1b05772b":"code","c6addacf":"code","c9dcc080":"code","827a76da":"code","8bfca645":"code","294438cb":"code","ef0ae756":"code","ce58d3fe":"code","7ab92499":"code","a21dde75":"code","be61ce9c":"code","ed89f511":"code","51429ef8":"code","3382cda7":"code","82b47997":"code","9340d2b1":"code","6ce5db48":"code","4a78d130":"code","04e9db52":"code","244d0f1c":"code","7b9131af":"code","afe48cd7":"code","878e0122":"code","adc4b289":"code","89c13939":"code","11ca1511":"code","b0540503":"code","03237731":"code","ebaafe42":"code","92f0ef22":"code","e3012efd":"code","f4ec5994":"code","2bae8186":"code","5683d93d":"code","f46741c6":"markdown","45e8f0d7":"markdown","3bf74948":"markdown","79cc1773":"markdown","4473f241":"markdown","2f90ffa1":"markdown","f0d1ca0b":"markdown","94cff2ea":"markdown","c67484df":"markdown","4bf6291e":"markdown","6dad271a":"markdown","b147f607":"markdown","59b7e7cb":"markdown","76383ac4":"markdown","555faf3d":"markdown","7e78a2fe":"markdown","6ee768c4":"markdown","e8f5d195":"markdown","29b8a347":"markdown","f6c07b8f":"markdown","97094650":"markdown","3aa5051b":"markdown","70baec78":"markdown","178dfa71":"markdown","bdab3e70":"markdown","af768d79":"markdown","7404e9ba":"markdown","1d7a9605":"markdown","3558845c":"markdown"},"source":{"e1498fbb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualization tool 1\nimport seaborn as sns  # visualization tool 2\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.aa","eb70ddd3":"df = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")\n","c6cd59ea":"df.info()\ndf.shape","35524605":"df.describe()","89ace4f4":"df.head(2)","1f05e061":"df.tail(2)","dde4dc24":"df.dtypes","bd11ae46":"df.Speed.plot(kind=\"line\",label=\"Speed\",grid=True,linestyle = ':',alpha=0.6,color=\"green\")\ndf.Defense.plot(kind=\"line\",label=\"Defense\",grid=True,alpha=0.4,linestyle=\"-.\",color=\"red\")\nplt.title(\"Speed vs Defence\")\nplt.legend()\nplt.xlabel=('Speed')\nplt.ylabel=('Defense')\nplt.show()","6d094f9e":"df.plot(kind=\"scatter\",x=\"Speed\",y=\"Defense\",color=\"brown\",alpha=0.5)\nplt.title('Attack Defense Scatter Plot')\nplt.show()","f370652e":"df.plot(kind=\"line\",x=\"Generation\",y=\"Attack\")","151be1a9":"df.Speed.plot(kind=\"hist\",bins=50,figsize=(12,12))\nplt.title(\"Speed Histograms\")\nplt.show()","8a144b5c":"df.Speed.plot(kind=\"hist\",bins=50,figsize=(12,12))\nplt.title(\"Speed Histograms\")\nplt.clf()\nplt.show()","ec2c696b":"series = df[\"Defense\"]\nprint(type(series))\ndataFrame = df[[\"Defense\"]]\nprint(type(dataFrame))","cb3cc133":"power_filter = df[\"Sp. Atk\"]>150\nprint(df[power_filter])","d60d2f84":"#Double conditions\ndf[np.logical_and(df[\"Defense\"]>200,df[\"Attack\"]>100)]\n","7a7abde2":"df[(df[\"Defense\"]>150) & (df[\"Attack\"]>50) & (df[\"Sp. Atk\"]>50)]","25fff3be":"mean = np.sum(df.Speed)\/len(df.Speed)\n\ndf[\"Speed_Status\"] = [\"High\" if each > mean else \"Normal\" for each in df.Speed]\nprint(\"The mean speed value is: \",mean)\ndf.loc[20:25,[\"Speed_Status\",\"Speed\"]]\n# print(repr(df.Speed_Status))","4db23676":"print(df[\"Type 1\"].value_counts(dropna=False))\nprint(df[\"Type 2\"].value_counts(dropna=False))","6e6e1dfd":"df.boxplot(column=\"Sp. Atk\",by=\"Speed_Status\")\nplt.show()","dca638db":"will_be_melt = df.head(30)\nmelted_data = pd.melt(frame=will_be_melt,id_vars = [\"Name\",\"Speed_Status\",\"Speed\"],value_vars = [\"Attack\",\"Defense\"])\nmelted_data","953ba0a7":"melted_data.pivot (index =  \"Name\",columns=\"variable\",values=\"value\")","d206d55e":"df1 = df.head(25)\ndf2 = df.tail(25)\n\ncancat_data = pd.concat([df1,df2],axis=0,ignore_index=True)\ncancat_data","c9232a0e":"df[\"Type 2\"].dropna(inplace = True)","fe5e1b7b":"assert df[\"Type 2\"].notnull().all() # we can check it is true \/ false. e.g. assert df[1] == \"Name\"","54630989":"df[\"Type 2\"].fillna(\"BlankArea\",inplace = True)","1b05772b":"properties1 = df[\"Name\"].head(10)\nproperties2 = df[\"Attack\"].head(10)\nlabels = [\"Name\",\"Attack\"]\nzipped_data = list(zip(labels,[properties1,properties2]))\ndata_dict = dict(zipped_data)\ndata_frame = pd.DataFrame(data_dict)\ndata_frame","c6addacf":"data_frame[\"Defense\"] = df[\"Defense\"].head(10)\ndata_frame[\"Owner\"]=0\ndata_frame","c9dcc080":"data_frame.loc[:,[\"Attack\",\"Defense\",\"Owner\"]]\ndata_frame.plot()\nplt.show()","827a76da":"data_frame.plot(subplots=True)\nplt.show()","8bfca645":"data_frame.plot(kind=\"scatter\",x=\"Attack\",y=\"Defense\")\nplt.show()","294438cb":"data_frame.plot(kind=\"hist\",y=\"Attack\",bins=50,range = (0,150), normed=True)\nplt.show()","ef0ae756":"data_frame.plot(kind=\"hist\",y=\"Attack\",bins=50,range = (0,150), normed=True,cumulative=True)\nplt.show()","ce58d3fe":"the_times = [\"1998-08-25\",\"2017-06-25\"]\nprint(type(the_times))\nthe_timeSeries_object = pd.to_datetime(the_times)\nprint(type(the_timeSeries_object))","7ab92499":"the_times = [\"1998-8-25\",\"1998-8-26\",\"1998-8-27\",\"1998-8-28\",\"1998-8-29\",\"1998-8-30\",\"1998-8-31\",\"1998-8-24\",\"1998-8-23\",\"1998-8-22\",]\nthe_times = pd.to_datetime(the_times)\ndata_frame[\"DATE\"] = the_times\ndata_frame = data_frame.set_index(\"DATE\")\ndata_frame","a21dde75":"print(data_frame.loc[\"1998-08-25\":\"1998-08-30\"])","be61ce9c":"data_frame.resample(\"A\").mean() ","ed89f511":"data_frame.resample(\"A\").first().interpolate(\"linear\")","51429ef8":"Basic selections","3382cda7":"copy_df = df.copy()\ncopy_df.HP[0]","82b47997":"copy_df[\"HP\"][0]","9340d2b1":"copy_df.loc[0,\"HP\"]","6ce5db48":"copy_df[[\"Speed_Status\",\"Attack\"]]","4a78d130":"copy_df.loc[0:25,\"Attack\":\"Speed_Status\"]","04e9db52":"#Revers\ncopy_df.loc[25:0:-1,\"Attack\":\"Speed_Status\"]","244d0f1c":"speed_status_filter = copy_df[\"Speed_Status\"] == \"High\"\ncopy_df[speed_status_filter]","7b9131af":"speed_status_filter = copy_df[\"Speed_Status\"] == \"High\"\nspeed_filter = copy_df[\"Speed\"] > 150\ncopy_df[speed_status_filter & speed_filter]","afe48cd7":"copy_df.Speed[copy_df.HP > 130]","878e0122":"def midLevel(pokeAttack):\n    return pokeAttack*2.5\/1.8\ncopy_df.Attack.apply(midLevel)","adc4b289":"copy_df.Defense.apply(lambda dfns: dfns * 2.5\/0.8)","89c13939":"copy_df.set_index('#')","11ca1511":"print(copy_df.index.name)\ncopy_df.index.name = \"INDEX\"\ncopy_df.head()","b0540503":"copy_df.index = range(25,825,1)\ncopy_df","03237731":"second_copy = df.copy()\nsecond_copy = second_copy.set_index([\"Type 1\",\"Type 2\"])\nsecond_copy","ebaafe42":"newDatas = {\"Treatment\":[\"A\",\"B\",\"A\",\"B\"],\"Gender\":[\"F\",\"F\",\"M\",\"M\"],\"Response\":[23,76,25,94]}\nnewDataFrame = pd.DataFrame(newDatas)\nnewDataFrame","92f0ef22":"newDataFrame.pivot(index=\"Treatment\",columns=\"Gender\",values=\"Response\")","e3012efd":"multiIndex = newDataFrame.set_index([\"Treatment\",\"Gender\"])\nmultiIndex","f4ec5994":"multiIndex2 = multiIndex.copy()\nmultiIndex2.unstack(level=1)\nmultiIndex2","2bae8186":"pd.melt(newDataFrame,id_vars=\"Treatment\",value_vars=[\"Gender\",\"Response\"])\n","5683d93d":"newDataFrame.groupby(\"Treatment\").mean()","f46741c6":"Dropna, notnull and fillna functions.","45e8f0d7":"Index objects and labeled data","3bf74948":"Diffrent plot style (**scatter**) for Speed vs Defense. ","79cc1773":"Linear Interpolate","4473f241":"**Line** Plot:  Speed and Defense of Dataframe. (Defense is more distributed than Speed****.)","2f90ffa1":"Transforming Data","f0d1ca0b":"## Melting","94cff2ea":"Reading file from kaggle location.","c67484df":"Pivoting","4bf6291e":"Data Count for getting dataFrame infos.","6dad271a":"#### Time Series","b147f607":"Visualize basic datas with box plots.","59b7e7cb":"Describe method has statistical information about the dataFrame. (Only numeric datas)","76383ac4":"## Pivoting","555faf3d":"Creating a new DataFrame.","7e78a2fe":"**Pokemon Basic Kernel**\n![Pokemon_Image](https:\/\/zaytung.com\/fotos\/pokemon_burclar_zaytung_blog.jpg)\n","6ee768c4":"#### Adding the datetime index on the data_frame \/\/ Time Series Data","e8f5d195":"We're getting basic properties basically.","29b8a347":"Ploting the new data","f6c07b8f":"What is inside and their types. (And shapes)","97094650":"Adding a new column.","3aa5051b":"Concatenating","70baec78":"Adding a new feature and properties on the .cvs file.","178dfa71":"Resampling\n","bdab3e70":"Printing elements with datetime index.","af768d79":"Which pokemons have more power than 150.","7404e9ba":"Grouping & Categorizied","1d7a9605":"Melting","3558845c":"Different double condition query."}}