{"cell_type":{"7149d2c1":"code","3f585e04":"code","de2e2f6d":"code","7265db8a":"code","efa777bf":"code","97748a35":"code","d5696e41":"code","6bb9783c":"code","4c9e044e":"code","576b3fca":"code","21db3e0d":"code","d6a80842":"code","fb513b20":"code","44268cb9":"code","1e180b04":"code","59f5f29b":"code","4b09c865":"code","0ca03496":"code","cfa22220":"code","a3e79be6":"code","8660773e":"code","c63881b4":"code","ed5cc68c":"code","4579e3b5":"markdown","d93d91bf":"markdown"},"source":{"7149d2c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n   \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f585e04":"import os\nlabels = []\nfor i in os.listdir('..\/input\/fer2013\/train\/angry'):\n    labels.append(0)\nfor i in os.listdir('..\/input\/fer2013\/train\/disgust'):\n    labels.append(1)\nfor i in os.listdir('..\/input\/fer2013\/train\/fear'):\n    labels.append(2)\nfor i in os.listdir('..\/input\/fer2013\/train\/happy'):\n    labels.append(3)\nfor i in os.listdir('..\/input\/fer2013\/train\/neutral'):\n    labels.append(4)\nfor i in os.listdir('..\/input\/fer2013\/train\/sad'):\n    labels.append(5)\nfor i in os.listdir('..\/input\/fer2013\/train\/surprise'):\n    labels.append(6)","de2e2f6d":"import cv2\nloc1 = '..\/input\/fer2013\/train\/angry'\nloc2 = '..\/input\/fer2013\/train\/disgust'\nloc3 = '..\/input\/fer2013\/train\/fear'\nloc4 = '..\/input\/fer2013\/train\/happy'\nloc5 = '..\/input\/fer2013\/train\/neutral'\nloc6 = '..\/input\/fer2013\/train\/sad'\nloc7 = '..\/input\/fer2013\/train\/surprise'\nfeatures = []\nfrom tqdm import tqdm\nfor i in tqdm(os.listdir(loc1)):\n    f1 = cv2.imread(os.path.join(loc1,i))\n    f1 = cv2.resize(f1,(100,100))\n    features.append(f1)\n    \nfor i in tqdm(os.listdir(loc2)):\n    f2 = cv2.imread(os.path.join(loc2,i))\n    f2 = cv2.resize(f2,(100,100))\n    features.append(f2)\n\nfor i in tqdm(os.listdir(loc3)):\n    f3 = cv2.imread(os.path.join(loc3,i))\n    f3 = cv2.resize(f3,(100,100))\n    features.append(f3)\n\nfor i in tqdm(os.listdir(loc4)):\n    f4 = cv2.imread(os.path.join(loc4,i))\n    f4 = cv2.resize(f4,(100,100))\n    features.append(f4)\n    \nfor i in tqdm(os.listdir(loc5)):\n    f5 = cv2.imread(os.path.join(loc5,i))\n    f5 = cv2.resize(f5,(100,100))\n    features.append(f5)\n    \nfor i in tqdm(os.listdir(loc6)):\n    f6 = cv2.imread(os.path.join(loc6,i))\n    f6 = cv2.resize(f6,(100,100))\n    features.append(f6)\n    \nfor i in tqdm(os.listdir(loc7)):\n    f7 = cv2.imread(os.path.join(loc7,i))\n    f7 = cv2.resize(f7,(100,100))\n    features.append(f7)\n    \n","7265db8a":"import numpy as np\nimport matplotlib.pyplot as plt\n\nimport os\n\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Input, Dropout,Flatten, Conv2D\nfrom tensorflow.keras.layers import BatchNormalization, Activation, MaxPooling2D\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom tensorflow.keras.utils import plot_model\n\nfrom IPython.display import SVG, Image\n\nimport tensorflow as tf\n","efa777bf":"img_size = 100\nbatch_size = 64\n\n\ndatagen_train = ImageDataGenerator(rescale=1.\/255) \ndatagen_validation = ImageDataGenerator(rescale=1.\/255)\n\ndatagen_train = ImageDataGenerator(horizontal_flip=True)\n\ntrain_generator = datagen_train.flow_from_directory(\"..\/input\/fer2013\/train\/\",\n                                                    target_size=(img_size,img_size),\n                                                    batch_size=batch_size,\n                                                    class_mode='categorical',\n                                                    shuffle=True)\n\ndatagen_validation = ImageDataGenerator(horizontal_flip=True)\nvalidation_generator = datagen_validation.flow_from_directory(\"..\/input\/fer2013\/test\/\",\n                                                    target_size=(img_size,img_size),\n                                                    batch_size=batch_size,\n                                                    class_mode='categorical',\n                                                    shuffle=False)","97748a35":"# Initialising the CNN\nmodel = Sequential()\n\n# 1 - Convolution\nmodel.add(Conv2D(64,(3,3), padding='same', input_shape=(100, 100,3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# 2nd Convolution layer\nmodel.add(Conv2D(128,(5,5), padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# 3rd Convolution layer\nmodel.add(Conv2D(512,(3,3), padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# 4th Convolution layer\nmodel.add(Conv2D(512,(3,3), padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# Flattening\nmodel.add(Flatten())\n\n# Fully connected layer 1st layer\nmodel.add(Dense(256))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\n\n# Fully connected layer 2nd layer\nmodel.add(Dense(512))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(7, activation='softmax'))\n\nopt = Adam(lr=0.0005)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","d5696e41":"%%time\n\nepochs = 20\nsteps_per_epoch = train_generator.n\/\/train_generator.batch_size\nvalidation_steps = validation_generator.n\/\/validation_generator.batch_size\n\n\nhistory = model.fit(\n    x=train_generator,\n    steps_per_epoch=steps_per_epoch,\n    epochs=epochs,\n    validation_data = validation_generator,\n    validation_steps = validation_steps,\n    #callbacks=callbacks\n)","6bb9783c":"import matplotlib.pyplot as plt\n\ndef plot_accuracy_and_loss(history):\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n\n    epochs = range(1, len(acc) + 1)\n\n    plt.plot(epochs, acc, 'b', label='Training acc',color='green')\n    plt.plot(epochs, val_acc, 'b', label='Validation acc')\n    plt.title('Training and validation accuracy')\n    plt.legend()\n    plt.show()\n\n    plt.plot(epochs, loss, 'b', label='Training loss',color='green')\n    plt.plot(epochs, val_loss, 'b', label='Validation loss')\n    plt.title('Training and validation loss')\n    plt.legend()\n    plt.show()\n","4c9e044e":"plot_accuracy_and_loss(history)","576b3fca":"test_generator = datagen_validation.flow_from_directory(\"..\/input\/fer2013\/test\/\",\n                                                    target_size=(img_size,img_size),\n                                                    \n                                                    batch_size=batch_size,\n                                                    class_mode='categorical',\n                                                    shuffle=False)\n\ntest_loss, test_acc = model.evaluate_generator(test_generator, steps=validation_steps)\nprint('test acc:', test_acc)","21db3e0d":"from keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.models import load_model\nimport matplotlib.pyplot as plt\n\n#filename=\"..\/input\/dogss-test\/images.jpg\"\ndef predict_images(filename):\n    img = load_img(filename, target_size=(100, 100))\n    plt.imshow(img)\n    plt.show()\n    img = img_to_array(img)\n\n    img = img.reshape(1, 100, 100, 3)\n\n    img = img.astype('float32')\n    img = img - [123.68, 116.779, 103.939]\n\n    result = model.predict(img)\n    return result\n","d6a80842":"#filename=\"..\/input\/fer2013\/test\/happy\/PrivateTest_10513598.jpg\"\ndef answer(filename):\n    result=predict_images(filename)\n    if(np.argmax(result)==0):\n        print(\"angry\")\n    elif(np.argmax(result)==1):\n        print(\"disgust\")\n    elif(np.argmax(result)==2):\n         print(\"fear\")\n    elif(np.argmax(result)==3):\n         print(\"happy\")\n    elif(np.argmax(result)==4):\n         print(\"neutral\")\n    elif(np.argmax(result)==5):\n         print(\"sad\")\n    elif(np.argmax(result)==6):\n         print(\"surprise\")\n\n    print(np.argmax(result))","fb513b20":"model.save('facemodel.h5')","44268cb9":"from keras.models import load_model\nmodel = load_model('.\/facemodel.h5')","1e180b04":"p1=\"..\/input\/fer2013\/test\/neutral\/PrivateTest_12091739.jpg\"\nanswer(p1)\np2=\"..\/input\/fer2013\/test\/surprise\/PrivateTest_12400594.jpg\"\nanswer(p2)\np3=\"..\/input\/fer2013\/test\/angry\/PrivateTest_12000629.jpg\"\nanswer(p3)\np4=\"..\/input\/fer2013\/test\/disgust\/PrivateTest_29901781.jpg\"\nanswer(p4)\n","59f5f29b":"p5=\"..\/input\/fer2013\/test\/fear\/PrivateTest_134207.jpg\"\nanswer(p5)\np6=\"..\/input\/fer2013\/test\/happy\/PrivateTest_13248909.jpg\"\nanswer(p6)\np7=\"..\/input\/fer2013\/test\/sad\/PrivateTest_13202678.jpg\"\nanswer(p7)","4b09c865":"import numpy as np\nY = np.array(labels)\nX = np.array(features)\nfrom keras.utils import np_utils\nXt = (X - X.mean())\/X.std()        #Normalised the data\nYt = np_utils.to_categorical(Y)    #Categorical representation\nXt = Xt.reshape(8000,30000)","0ca03496":"from keras.utils import np_utils\nXt = (X - X.mean())\/X.std()        #Normalised the data\nYt = np_utils.to_categorical(Y)    #Categorical representation\nXt = Xt.reshape(8000,30000)","cfa22220":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(Xt,Yt, test_size = 0.2, random_state = 6)","a3e79be6":"from sklearn.ensemble import RandomForestClassifier\nrmodel = RandomForestClassifier()","8660773e":"rmodel.fit(x_train,y_train)","c63881b4":"print(rmodel.score(x_train,y_train))\nprint(rmodel.score(x_test,y_test))","ed5cc68c":"import matplotlib.pyplot as plt\nplt.imshow(x_test[70].reshape(100,100,3))\nplt.show()\nresult = rmodel.predict(x_test[70].reshape(1,30000))\nif(np.argmax(result)==0):\n    print(\"angry\")\nelif(np.argmax(result)==1):\n    print(\"disgust\")\nelif(np.argmax(result)==2):\n    print(\"fear\")\nelif(np.argmax(result)==3):\n    print(\"happy\")\nelif(np.argmax(result)==4):\n    print(\"neutral\")\nelif(np.argmax(result)==5):\n    print(\"sad\")\nelif(np.argmax(result)==6):\n    print(\"surprise\")","4579e3b5":"RANDOM FOREST CLASSIFIER","d93d91bf":"CNN "}}