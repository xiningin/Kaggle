{"cell_type":{"6c4c7c6a":"code","1c9c213b":"code","4bd42ab2":"code","babbf939":"code","eac21e38":"code","9b80e6f5":"code","ee50e4c1":"code","252c55be":"code","3e4f0b85":"code","a7741742":"code","0ec4c78c":"code","1291ce22":"code","5d1139e1":"code","2f1c11a6":"code","3474e168":"code","01e78cab":"code","5ffb25dd":"code","43c95755":"code","f6cc38b0":"code","3bca2b80":"code","0125857c":"code","cf0094d3":"code","2556e21d":"code","991c477c":"code","8d990d1d":"code","13c68684":"code","480a677b":"code","63e4e15e":"code","4827db1b":"code","07e8ad99":"code","b842a739":"code","aaf16fb4":"code","274de7ea":"code","02c00d7f":"code","92ac8193":"code","e28ee524":"code","b24875af":"code","d8d2b1f7":"code","4add3a26":"code","f0b96ad1":"code","8630c7b6":"code","ae932da8":"code","ef971400":"code","677b304b":"code","ad3e51e6":"code","5fe5adb9":"code","d3e95701":"code","d0782a15":"code","a29d505a":"code","f5638ffd":"code","c9224612":"code","3b6d6dc0":"code","5ff00b8c":"code","ab264ada":"code","1f7a9c1c":"code","d51a186e":"code","ec7045cd":"code","a337150d":"code","93baf4d1":"code","7781c802":"code","b1d15156":"code","87642a64":"code","a561622a":"code","09fd8174":"code","ee9651fe":"code","1da59111":"code","caad1b28":"code","a2447ea8":"code","6db39b40":"code","f78fc2a2":"code","b83d9dfb":"code","a7f5c30c":"code","e25a0fe5":"code","3ebcd25c":"code","4c4c3909":"code","d5af4fb6":"code","19b246a4":"code","1d04bba2":"code","055faa36":"code","e4b96aad":"code","0896f78a":"code","6f0e53e9":"code","11bd891a":"code","518e12c0":"code","a1e59026":"code","e44dbc6f":"code","154fff72":"markdown","c4834f8a":"markdown","fdde988a":"markdown","50735acc":"markdown","7b49ff3b":"markdown","c4499428":"markdown","7d7f4b93":"markdown","0c634cec":"markdown","839daafd":"markdown","6462f9cd":"markdown","1433e62c":"markdown","dac12c95":"markdown","c90d8e99":"markdown","0486c324":"markdown","b569d0c8":"markdown","c4f307a6":"markdown","cbb85e11":"markdown","25e34f96":"markdown","8a877712":"markdown","4a18c208":"markdown"},"source":{"6c4c7c6a":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1c9c213b":"sns.set_style(style='white') \nsns.set(rc={\n    'figure.figsize':(10,6), \n    'axes.facecolor': 'white',\n    'axes.grid': True, 'grid.color': '.9',\n    'axes.linewidth': 1.0,\n    'grid.linestyle': u'-'},font_scale=1.5)\n","4bd42ab2":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\n#train_data = pd.read_csv(\"..\/data\/train.csv\")","babbf939":"train_data.head()","eac21e38":"train_data.describe()","9b80e6f5":"train_data.nunique()","ee50e4c1":"print(*train_data.columns)","252c55be":"train_data['Pclass'].describe()","3e4f0b85":"fig_pclass = train_data['Pclass'].value_counts()\nfig_pclass.plot.pie().legend(labels=[\"Class 3\", \"Class 1\", \"Class 2\"],\n                            loc='center right', \n                            bbox_to_anchor=(2.25, 0.5)\n                            ).set_title(\"\u041a\u043b\u0430\u0441\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\")","a7741742":"pclass_1_surv = round((train_data[train_data['Pclass'] == 1].Survived == 1).value_counts()[1]\/\n                      len(train_data[train_data['Pclass'] == 1]) * 100, 2)\n\npclass_2_surv = round((train_data[train_data['Pclass'] == 2].Survived == 1).value_counts()[1]\/\n                      len(train_data[train_data['Pclass'] == 2]) * 100, 2)\n\npclass_3_surv = round((train_data[train_data['Pclass'] == 3].Survived == 1).value_counts()[1]\/\n                      len(train_data[train_data['Pclass'] == 3]) * 100, 2)\n\n\npclass_plot_df = pd.DataFrame({\"\u0412\u044b\u0436\u0438\u0432\u0448\u0438\u0435 (%)\":{\"Class 1\": pclass_1_surv,\n                                               \"Class 2\": pclass_2_surv,\n                                               \"Class 3\": pclass_3_surv\n                                              },\n                               \"\u041d\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0435 (%)\":{\"Class 1\": 100-pclass_1_surv,\n                                                  \"Class 2\": 100-pclass_2_surv, \n                                                  \"Class 3\": 100-pclass_3_surv\n                                                 }\n                              })\n\npclass_plot_df.plot.bar().set_title(\"\u041f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0432\u044b\u0436\u0438\u0432\u043d\u0438\u0445 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445\")","0ec4c78c":"fig_sex = (train_data['Sex'].value_counts(normalize = True) * 100).plot.bar()","1291ce22":"print(train_data.pivot_table('PassengerId',\n                             'Sex',\n                             'Survived',\n                             'count').plot(kind='bar', stacked=True))","5d1139e1":"train_data['Age'].value_counts()","2f1c11a6":"train_data['Age'].describe()","3474e168":"train_data['Age_group_ST'] = pd.cut(train_data['Age'], [0, 10, 20, 30, 40, 50, 60, 70, 80])","01e78cab":"sns_age = sns.countplot(x = \"Age_group_ST\", hue = \"Survived\", data = train_data, palette=[\"C1\", \"C0\"])\nsns_age.legend(labels = [\"\u0423\u043c\u0435\u0440\", \"\u0412\u044b\u0436\u0438\u043b\"])","5ffb25dd":"sns.distplot(train_data['Age'].dropna(),bins=30)","43c95755":"train_data['name_prefx_ST'] = train_data['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())\n","f6cc38b0":"train_data['name_prefx_ST'].value_counts()","3bca2b80":"td_group_sp = train_data.groupby(['Sex', 'Pclass'])","0125857c":"td_group_sp['Age'].apply(lambda x: x.fillna(x.median()))\n","cf0094d3":"train_data['Age'].fillna(train_data['Age'].median, inplace = True)","2556e21d":"train_data.SibSp.describe()","991c477c":"train_data['SibSp_group_ST'] = pd.cut(train_data['SibSp'], [0, 1, 2, 3, 4, 5, 6, 7, 8], include_lowest = True)","8d990d1d":"sns_sibsp = sns.countplot(x = \"SibSp_group_ST\", \n                          hue = \"Survived\", \n                          data = train_data, \n                          palette=[\"C1\", \"C0\"]).legend(labels = [\"\u0423\u043c\u0435\u0440\", \"\u0412\u044b\u0436\u0438\u043b\"])\nsns_sibsp.set_title(\"\u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0441 \u0431\u043b\u0438\u0437\u043a\u0438\u043c\u0438 \u0440\u043e\u0434\u0441\u0442\u0432\")","13c68684":"train_data['Parch'].describe()","480a677b":"train_data['parents_children_ST'] = pd.cut(train_data['Parch'], [0, 1, 2, 3, 4, 5, 6], include_lowest = True)\n","63e4e15e":"sns_parents = sns.countplot(x = \"parents_children_ST\",\n                            hue = \"Survived\",\n                            data = train_data,\n                            palette=[\"C1\", \"C0\"]).legend(labels = [\"\u0423\u043c\u0435\u0440\", \"\u0412\u044b\u0436\u0438\u043b\"])\nsns_parents.set_title(\"\u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0441 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\u043c\u0438\/\u0434\u0435\u0442\u044c\u043c\u0438\")","4827db1b":"train_data['Family_ST'] = train_data['Parch'] + train_data['SibSp']\n\n#train_data['Solo_ST'] = train_data['Family_ST'] == 0\ntrain_data['Solo_ST'] = train_data['Family_ST'].map(lambda x: 0 if x else 1).astype('category')","07e8ad99":"train_data['Solo_ST'].head()","b842a739":"train_data.Fare.describe()","aaf16fb4":"train_data['Fare_category_ST'] = pd.cut(train_data['Fare'],\n                                        bins=[0, 7.90, 14.45, 31.28, 120], \n                                        labels=['Low', 'Low_Mid', 'High_Mid', 'High'])","274de7ea":"x = sns.countplot(data = train_data,\n                  x = \"Fare_category_ST\",\n                  hue = \"Survived\",\n                  palette=[\"C1\", \"C0\"]).legend(labels = [\"\u0423\u043c\u0435\u0440\", \"\u0412\u044b\u0436\u0438\u043b\"])\nx.set_title(\"\u0412\u044b\u0436\u0438\u0432\u0448\u0438\u0435 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0430\u0440\u0438\u0444\u0430\")","02c00d7f":"train_data['Cabin'] = train_data['Cabin'].fillna('n0n')","92ac8193":"train_data['Embarked'].describe()","e28ee524":"train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace = True)","b24875af":"train_data['Sex'].head()","d8d2b1f7":"train_data['Sex'] = train_data['Sex'].map(lambda x: 1 if x == 'male' else 0)\ntrain_data['Sex'] = train_data['Sex'].astype('category')","4add3a26":"#train_EMB = pd.get_dummies(train_data['Embarked'], prefix=\"Emb_ST\", drop_first = True)\n#train_EMB.head()","f0b96ad1":"train_data.columns","8630c7b6":"print(train_data.info())","ae932da8":"train_data.head()","ef971400":"train_data = pd.concat([train_data,\n                pd.get_dummies(train_data['Cabin'], prefix=\"Cabin\"),\n                pd.get_dummies(train_data['Age_group_ST'], prefix=\"Age_group_ST\"),\n                pd.get_dummies(train_data['name_prefx_ST'], prefix=\"name_pref_ST\", drop_first = True),\n                pd.get_dummies(train_data['Fare_category_ST'], prefix=\"Fare_ST\", drop_first = True),\n                pd.get_dummies(train_data['Pclass'], prefix=\"Class\", drop_first = True),\n                pd.get_dummies(train_data['Embarked'], prefix=\"Emb_ST\", drop_first = True)\n               ],axis=1)\n\n#td['Sex'] = LabelEncoder().fit_transform(td['Sex'])\n#td['Is_Alone'] = LabelEncoder().fit_transform(td['Is_Alone'])","677b304b":"print(train_data.info())","ad3e51e6":"train_data.head()","5fe5adb9":"train_data.drop(['Cabin', 'Age_group_ST', 'name_prefx_ST',\n                 'SibSp_group_ST', 'parents_children_ST',\n                 'Fare_category_ST', 'Pclass', 'Embarked', \n                 'Name', 'Ticket', 'SibSp', \n                 'Parch', 'Fare', 'Age'\n                ], axis=1, inplace=True)\n\n\n","d3e95701":"train_data.shape","d0782a15":"train_data.columns","a29d505a":"train_data.head()","f5638ffd":"train_data['Sex'] = train_data['Sex'].astype('uint8')\ntrain_data['Solo_ST'] = train_data['Solo_ST'].astype('uint8')","c9224612":"col = list(train_data.columns)","3b6d6dc0":"import re\n\nregex = re.compile(r\"\\[|\\]|<\", re.IGNORECASE)\n\ntrain_data.columns = [regex.sub(\"_\", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in train_data.columns.values]\n","5ff00b8c":"\n# \u0438\u043c\u043f\u043e\u0440\u0442 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n\n\nfrom sklearn.preprocessing import scale\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, auc\nfrom sklearn.metrics import mean_squared_error, confusion_matrix\n\n#\u0433\u0440\u0430\u0444\u0438\u043a\u0438\nimport pylab as pl\nimport matplotlib.pyplot as plt\n","ab264ada":"itog_val = {}\nkfold = 5\nrandom_state = 777","1f7a9c1c":"X = train_data.drop('Survived', axis=1)\ny = train_data['Survived']\n\nprint(X.shape, y.shape)","d51a186e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=random_state)\n\nprint(X_train.shape, y_train.shape)","ec7045cd":"# \u041c\u043e\u0434\u0435\u043b\u044c RandomForestClassifier\nmodel_rfc = RandomForestClassifier(random_state=random_state,\n                                   max_depth=9, \n                                   min_samples_leaf=1,\n                                   min_samples_split=4,\n                                   n_estimators=180)","a337150d":"# \u041c\u043e\u0434\u0435\u043b\u044c KNeighborsClassifier\nmodel_knc = KNeighborsClassifier(n_neighbors=13)","93baf4d1":"# \u041c\u043e\u0434\u0435\u043b\u044c LogisticRegression\nmodel_lr = LogisticRegression(penalty='l2',  tol=0.0001, random_state=random_state) ","7781c802":"# \u041c\u043e\u0434\u0435\u043b\u044c  GradientBoostingClassifier\nmodel_gbt = GradientBoostingClassifier(learning_rate=0.1,\n                                       max_features=17,\n                                       min_samples_leaf=6,\n                                       min_samples_split=2,\n                                       n_estimators=200,\n                                       random_state=random_state)","b1d15156":"# \u041c\u043e\u0434\u0435\u043b\u044c  XGBClassifier\nmodel_xgbc = xgb.XGBClassifier(max_depth=10, \n                               min_child_weight=1,\n                               n_estimators=400, \n                               n_jobs=-1,\n                               verbose=1, \n                               learning_rate=0.15,\n                               seed=42, \n                               random_state=random_state)","87642a64":"scores = cross_val_score(model_rfc, X, y, cv = kfold)\nitog_val['RandomForestClassifier'] = scores.mean()","a561622a":"scores = cross_val_score(model_knc, X, y, cv = kfold)\nitog_val['KNeighborsClassifier'] = scores.mean()","09fd8174":"scores = cross_val_score(model_lr, X, y, cv = kfold)\nitog_val['LogisticRegression'] = scores.mean()","ee9651fe":"scores = cross_val_score(model_gbt, X, y, cv = kfold)\nitog_val['GradientBoostingClassifier'] = scores.mean()","1da59111":"scores = cross_val_score(model_xgbc, X, y, cv = kfold)\nitog_val['XGBClassifier'] = scores.mean()","caad1b28":"train_data.from_dict(data = itog_val, orient='index').plot(kind='bar', legend=False)","a2447ea8":"# \u043f\u0440\u043e\u0440\u0438\u0441\u043e\u0432\u043a\u0430 \u0433\u0440\u0430\u0444\u0444\u0438\u043a\u043e\u0432 roc_auc, \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u044f\u043c\npl.clf()\nplt.figure(figsize=(8,6))\n\n\n#RandomForestClassifier\nprobas = model_rfc.fit(X_train, y_train).predict_proba(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('RandonForest',roc_auc))\n\n#KNeighborsClassifier\nprobas = model_knc.fit(X_train, y_train).predict_proba(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('KNeighborsClassifier',roc_auc))\n\n#LogisticRegression\nprobas = model_lr.fit(X_train, y_train).predict_proba(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('LogisticRegression',roc_auc))\n\n#GradientBoostingClassifier\nprobas = model_gbt.fit(X_train, y_train).predict_proba(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('GradientBoostingClassifier',roc_auc))\n\n# \u041c\u043e\u0434\u0435\u043b\u044c  XGBClassifier \nprobas = model_xgbc.fit(X_train, y_train).predict_proba(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('XGBClassifier',roc_auc))\n\n\n\npl.plot([0, 1], [0, 1], 'k--')\npl.xlim([0.0, 1.0])\npl.ylim([0.0, 1.0])\n\npl.xlabel('False Positive Rate')\npl.ylabel('True Positive Rate')\npl.legend(loc=0, fontsize='small')\n\npl.show()","6db39b40":"def f_err_predict_test_train(model, X_train, X_test, y_train, y_test):\n    # \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u043a \u043c\u043e\u0434\u0435\u043b\u044c\u044e\n    \n    err_train = np.mean(y_train != model.predict(X_train))\n    err_test  = np.mean(y_test  != model.predict(X_test))\n    \n    print(\"\u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439: {0:.2f}%\".format(err_train*100))\n    print(\"\u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439: {0:.2f}%\".format(err_test*100))\n    ","f78fc2a2":"# \u043c\u043e\u0434\u0435\u043b\u044c GradientBoostingClassifier\npredict = model_gbt.fit(X_train, y_train).predict(X_test)\nf_err_predict_test_train(model_gbt, X_train, X_test, y_train, y_test)\n\nprint(accuracy_score(y_test, predict)) # 0.8101694915254237","b83d9dfb":"# \u043c\u043e\u0434\u0435\u043b\u044c LogisticRegression\npredict = model_lr.fit(X_train, y_train).predict(X_test)\nf_err_predict_test_train(model_lr, X_train, X_test, y_train, y_test)\n\nprint(accuracy_score(y_test, predict))  # 0.8169491525423729","a7f5c30c":"#model RandomForestClassifier\nmodel_rfc = RandomForestClassifier(random_state=random_state,\n                                   max_depth=9, \n                                   min_samples_leaf=1,\n                                   min_samples_split=4,\n                                   n_estimators=180)\n\npredict = model_rfc.fit(X_train, y_train).predict(X_test)\nf_err_predict_test_train(model_rfc, X_train, X_test, y_train, y_test)\n\nprint(accuracy_score(y_test, predict))   # 0.8203389830508474","e25a0fe5":"test_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\n#test_data = pd.read_csv(\"..\/data\/test.csv\")\n","3ebcd25c":"test_data['Age_group_ST'] = pd.cut(test_data['Age'], [0, 10, 20, 30, 40, 50, 60, 70, 80])\ntest_data['name_prefx_ST'] = test_data['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())\n\ntstd_group_sp = test_data.groupby(['Sex', 'Pclass'])\ntstd_group_sp['Age'].apply(lambda x: x.fillna(x.median()))\ntest_data['Age'].fillna(test_data['Age'].median, inplace = True)\n\n\ntest_data['SibSp_group_ST'] = pd.cut(test_data['SibSp'], [0, 1, 2, 3, 4, 5, 6, 7, 8], include_lowest = True)\n\ntest_data['parents_children_ST'] = pd.cut(test_data['Parch'], [0, 1, 2, 3, 4, 5, 6], include_lowest = True)\n\ntest_data['Family_ST'] = test_data['Parch'] + test_data['SibSp']\ntest_data['Solo_ST'] = test_data['Family_ST'].map(lambda x: 0 if x else 1).astype('category')\n\n\ntest_data['Fare_category_ST'] = pd.cut(test_data['Fare'],\n                                        bins=[0, 7.90, 14.45, 31.28, 120], \n                                        labels=['Low', 'Low_Mid', 'High_Mid', 'High'])\n\n\ntest_data['Cabin'] = test_data['Cabin'].fillna('n0n')\n\n\ntest_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace = True)\n\n\ntest_data['Sex'] = test_data['Sex'].map(lambda x: 1 if x == 'male' else 0)\ntest_data['Sex'] = test_data['Sex'].astype('category')\n\n\ntest_data['Sex'] = test_data['Sex'].astype('uint8')\ntest_data['Solo_ST'] = test_data['Solo_ST'].astype('uint8')","4c4c3909":"test_data = pd.concat([test_data,\n                pd.get_dummies(test_data['Cabin'], prefix=\"Cabin\"),\n                pd.get_dummies(test_data['Age_group_ST'], prefix=\"Age_group_ST\"),\n                pd.get_dummies(test_data['name_prefx_ST'], prefix=\"name_pref_ST\", drop_first = True),\n                pd.get_dummies(test_data['Fare_category_ST'], prefix=\"Fare_ST\", drop_first = True),\n                pd.get_dummies(test_data['Pclass'], prefix=\"Class\", drop_first = True),\n                pd.get_dummies(test_data['Embarked'], prefix=\"Emb_ST\", drop_first = True)\n               ],axis=1)\n\n","d5af4fb6":"test_data.drop(['Cabin', 'Age_group_ST', 'name_prefx_ST',\n                 'SibSp_group_ST', 'parents_children_ST',\n                 'Fare_category_ST', 'Pclass', 'Embarked', \n                 'Name', 'Ticket', 'SibSp', \n                 'Parch', 'Fare', 'Age'], axis=1, inplace=True)","19b246a4":"\ntest_data.columns = [regex.sub(\"_\", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in test_data.columns.values]\n","1d04bba2":"test_data.info()","055faa36":"train_data.shape","e4b96aad":"common_features = list(set(train_data.columns).intersection(set(test_data.columns)))\n","0896f78a":"y_train=train_data['Survived']\nX_train=train_data[common_features]\nX_test=test_data[common_features]","6f0e53e9":"%%time\n#model RandomForestClassifier\n\npredict = model_rfc.fit(X_train, y_train).predict(X_test)","11bd891a":"%%time\n# \u043c\u043e\u0434\u0435\u043b\u044c GradientBoostingClassifier\n\npredict1 = model_gbt.fit(X_train, y_train).predict(X_test)","518e12c0":"from datetime import datetime\nimport os\ndate_current = datetime.today().strftime('%d_%m')\n'''\nif not os.path.exists('..\/data_out'):\n    os.makedirs('..\/data_out')\n'''","a1e59026":"\nresult = pd.DataFrame({'PassengerId':X_test['PassengerId'],'Survived':predict1})\nresult['Survived'] = result['Survived'].astype(int)\n\nfilename = f'..\/input\/gender_submission.csv'\n#filename = f'..\/data_out\/titanic_predict_model_gbt_{date_current}.csv'\nresult.to_csv(filename,index=False)\n\n\nprint('Saved file:' + filename)","e44dbc6f":"# 0.79425 with model GradientBoostingClassifier\n","154fff72":"# Encoding categorial & dropping columns","c4834f8a":"# import and validation of models on training data","fdde988a":"# SibSp ","50735acc":"# Parch ","7b49ff3b":"# Cleaning Test Data","c4499428":"# Ticket ","7d7f4b93":"# Cabin","0c634cec":"# Pclass","839daafd":"# Name","6462f9cd":"Embarked","1433e62c":"# Sex ","dac12c95":"# PassengerId","c90d8e99":"# Survived","0486c324":"# Fare ","b569d0c8":"# Predict ","c4f307a6":"# Save result","cbb85e11":"sex","25e34f96":"\u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0435\u043c\u044c\u044f 'Family' \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u0441\u0435\u043c\u044c\u0438 \u0442\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u043e\u0434\u0438\u043d\u043e\u043a\u0438\u0445 'Solo'","8a877712":"# Age ","4a18c208":"# Embarked"}}