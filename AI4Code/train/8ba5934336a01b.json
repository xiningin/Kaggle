{"cell_type":{"9937de7f":"code","d27c2f31":"code","696efff6":"code","ff213315":"code","a62ede56":"code","ed62df61":"code","285bfec9":"code","5f14f280":"code","d22d1f64":"code","c761bab6":"code","97b028f0":"code","4446097a":"code","c2584368":"code","309be09c":"code","732d87ce":"code","3e0d99f7":"code","4b5f7fd3":"code","412d2732":"code","daa85e11":"code","120ed60b":"code","7c3cf33b":"code","64ac3b14":"code","a32ebb6e":"code","e8a5dd3b":"code","745b9917":"code","e7c27db9":"code","16a5eb1c":"code","76ed9637":"code","5134d17c":"code","6194e9a0":"code","bcaee802":"code","e9c13b8a":"code","e4440e3a":"code","1fde6b2d":"code","9ab37860":"code","1bb634be":"code","55ce62e6":"code","9b27e7d0":"code","c831e997":"code","b0a4d611":"code","d7926c61":"code","13453e80":"code","10efb16a":"code","e1196d3b":"code","8fe8f763":"code","222cad97":"code","17ef6899":"code","85e9fb8b":"code","29273195":"code","de842b4c":"code","7fbf9e6a":"code","8c381caa":"code","d2857431":"code","7ae14a4c":"code","0b69f6fa":"markdown","c37b7d7b":"markdown","20e1cda6":"markdown","fb3c7584":"markdown","4b93fab6":"markdown","5fdbd6be":"markdown","e721e571":"markdown","4f78371a":"markdown","3c277ba4":"markdown","8c4aee96":"markdown","773018e7":"markdown","baee9153":"markdown","b4777864":"markdown","9d9c29e3":"markdown","2993b640":"markdown","47394f83":"markdown","38dfd607":"markdown","b54a9c73":"markdown","e5471915":"markdown","bb18fa1c":"markdown","ad64ef1a":"markdown","39df0600":"markdown"},"source":{"9937de7f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d27c2f31":"df = pd.read_csv('..\/input\/all-pokemon-dataset\/All_Pokemon.csv')\ndf.head()","696efff6":"df.columns","ff213315":"cols = [col for col in df.columns if 'Against' in col or 'Form' in col or 'Experience' in col]","a62ede56":"cols","ed62df61":"df = df.drop(cols, axis=1)","285bfec9":"for col in df.columns:\n    print()\n    print()\n    print(col)\n    print()\n    print(df[col].head())\n    print('---------------------------------------------')","5f14f280":"df.shape","d22d1f64":"df.nunique()","c761bab6":"df = df.drop('Name', axis=1)","97b028f0":"df.isnull().sum()","4446097a":"def fill_nan(x):\n    if x == 'nan' or x == 'None' or x == None:\n        return ''\n    else:\n        return x\n    \ndf['Type 2'] = df['Type 2'].fillna('')\ndf['Type 1'] = df['Type 1'].apply(lambda x: fill_nan(x))\ndf['Type 2'] = df['Type 2'].apply(lambda x: fill_nan(x))","c2584368":"df.dtypes","309be09c":"cols = [col for col in df.columns if df[col].dtype == 'O']\ncols","732d87ce":"for col in cols:\n    print()\n    print('-------------------')\n    print(col)\n    print('-------------------')\n    print(df[col].head())","3e0d99f7":"print(df['Abilities'].iloc[1], type(df['Abilities'].iloc[1]))","4b5f7fd3":"def info(x):\n    if type(x) != str:\n        print(x)\n    return x\n    \ndf['Abilities'].apply(lambda x: info(x))\nprint('end')","412d2732":"def str_to_list(x):\n    for c in [\"'\", \"[\", \"]\", \" \", '\"']:\n        x = x.replace(c, '')\n    x = x.split(',')\n    return x\n\ndf['Abilities'] = df['Abilities'].apply(lambda x: str_to_list(x))\ndf['Abilities'].head()","daa85e11":"def info(x):\n    if type(x) != list:\n        print(x)\n    return x\n    \ndf['Abilities'].apply(lambda x: info(x))\nprint('end')","120ed60b":"labeling = {col: [] for col in cols}\nlabeling","7c3cf33b":"for col in labeling:\n    if col != 'Abilities':\n        labeling[col] = df[col].unique()        \n\nlabeling","64ac3b14":"types = [labeling['Type 1'], labeling['Type 2']]\nnew = []\n\nfor group in types:\n    for item in group:\n        new.append(item)\n        \ntypes = np.array(new)\n\ndel labeling['Type 1']\ndel labeling['Type 2']\n\nlabeling['Type'] = types\nlabeling","a32ebb6e":"abilities = [x for x in df['Abilities'].values if len(x)]\nnew = []\nfor val in abilities:\n    for item in val:\n        new.append(item)\nabilities = new","e8a5dd3b":"labeling['Abilities'] = np.array(list(set(abilities)))","745b9917":"labeling","e7c27db9":"for col in labeling:\n    labeling[col] = {item: number for number, item in enumerate(labeling[col])}","16a5eb1c":"# very many rows\n# labeling","76ed9637":"df.head()","5134d17c":"def get_max_length():\n    max_length = 0\n    \n    for item in df['Abilities'].values:\n        if len(item) > max_length:\n            max_length = len(item)\n    \n    return max_length\n\ncount_abilities = get_max_length()\nprint('Max count abilities:', count_abilities)","6194e9a0":"count_abilities = 4","bcaee802":"columns_names = [f'Abilities {number + 1}' for number in range(count_abilities)]\ncolumns_names","e9c13b8a":"for col_name in columns_names:\n    df[col_name] = ''\n    \nfor index, row in enumerate(df['Abilities'].values):\n    for i in range(len(row)):\n        df[f'Abilities {i+1}'][index] = row[i]","e4440e3a":"df = df.drop('Abilities', axis=1)\ndf.head()","1fde6b2d":"def labeling_process(item, label_group):\n    return labeling[label_group][item]\n\n# df['Name'] = df['Name'].apply(lambda item: labeling_process(item, 'Name'))\ndf['Type 1'] = df['Type 1'].apply(lambda item: labeling_process(item, 'Type'))\ndf['Type 2'] = df['Type 2'].apply(lambda item: labeling_process(item, 'Type'))\ndf['Abilities 1'] = df['Abilities 1'].apply(lambda item: labeling_process(item, 'Abilities'))\ndf['Abilities 2'] = df['Abilities 2'].apply(lambda item: labeling_process(item, 'Abilities'))\ndf['Abilities 3'] = df['Abilities 3'].apply(lambda item: labeling_process(item, 'Abilities'))\ndf['Abilities 4'] = df['Abilities 4'].apply(lambda item: labeling_process(item, 'Abilities'))","9ab37860":"df.head()","1bb634be":"df.columns","55ce62e6":"df.dtypes","9b27e7d0":"from sklearn import metrics\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\n\nimport matplotlib.ticker as ticker","c831e997":"X = df\nX_std = preprocessing.StandardScaler().fit_transform(X)","b0a4d611":"sizes = range(2, 18)\nfigsize = (28, 15)","d7926c61":"sils = []\nchs = []\ndbs = []\n\nfor k in sizes:\n    model = KMeans(random_state=0, n_clusters=k)\n    model.fit(X_std)\n    \n    predict = model.labels_\n    \n    sils.append(\n        metrics.silhouette_score(X, predict)\n    )\n    chs.append(\n        metrics.calinski_harabasz_score(X, predict)\n    )\n    dbs.append(\n        metrics.davies_bouldin_score(X, predict)\n    )\n\nfig, ax = plt.subplots(figsize=figsize)\npd.DataFrame(\n    {\n        \"silhouette\": sils,\n        \"calinski\": chs,\n        \"davis\": dbs,\n        \"k\": sizes,\n    }\n).set_index('k').plot(ax=ax, subplots=True, layout=(4, 1))","13453e80":"sils = []\nchs = []\ndbs = []\n\nfor k in sizes:\n    model = GaussianMixture(n_components=k, random_state=0)\n    model.fit(X_std)\n    \n    predict = model.predict(X_std)\n    \n    sils.append(\n        metrics.silhouette_score(X, predict)\n    )\n    chs.append(\n        metrics.calinski_harabasz_score(X, predict)\n    )\n    dbs.append(\n        metrics.davies_bouldin_score(X, predict)\n    )\n\nfig, ax = plt.subplots(figsize=figsize)\npd.DataFrame(\n    {\n        \"silhouette\": sils,\n        \"calinski\": chs,\n        \"davis\": dbs,\n        \"k\": sizes,\n    }\n).set_index('k').plot(ax=ax, subplots=True, layout=(2, 2))","10efb16a":"k2 = KMeans(random_state=0, n_clusters=6).fit(X_std)\ngm = GaussianMixture(random_state=0, n_components=7).fit(X_std)","e1196d3b":"m1_predict = k2.labels_\nm2_predict = gm.predict(X_std)","8fe8f763":"sils = {\n    \"k2\": [metrics.silhouette_score(X, m1_predict)],\n    \"gm\": [metrics.silhouette_score(X, m2_predict)]\n}\nchs = {\n    \"k2\": [metrics.calinski_harabasz_score(X, m1_predict)],\n    \"gm\": [metrics.calinski_harabasz_score(X, m2_predict)]\n}\ndbs = {\n    \"k2\": [metrics.davies_bouldin_score(X, m1_predict)],\n    \"gm\": [metrics.davies_bouldin_score(X, m2_predict)]\n}","222cad97":"sns.barplot(data=pd.DataFrame(sils))","17ef6899":"sns.barplot(data=pd.DataFrame(chs))","85e9fb8b":"sns.barplot(data=pd.DataFrame(dbs))","29273195":"from collections import Counter","de842b4c":"from sortedcontainers import SortedDict","7fbf9e6a":"counts = {}\n\ncounts['k2'] = dict(Counter(m1_predict))\ncounts['gm'] = dict(Counter(m2_predict))","8c381caa":"for counter in counts:\n    for cluster in counts[counter]:\n        counts[counter][cluster] = [counts[counter][cluster]]","d2857431":"sns.barplot(data=pd.DataFrame(SortedDict(counts['k2'])))","7ae14a4c":"sns.barplot(data=pd.DataFrame(SortedDict(counts['gm'])))","0b69f6fa":"\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 (np.nan - NaN)","c37b7d7b":"\u0430\u0442\u0440\u0438\u0431\u0443\u0442 'Abilities' \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0439 \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0430\u0434\u043e \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u0441\u043a\u0438\u043b\u043b\u044b \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u044f\u0447\u0435\u0439\u043a\u0443 \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0442\u0430\u043a \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u044d\u0442\u043e\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u043d\u0430 4 \u0441\u0442\u043e\u0431\u0446\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c","20e1cda6":"\u0412\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0440\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438\u043c\u0435\u0435\u044e\u0442 \u0442\u0438\u043f object: Type 1, Type 2, Abilities\n\n\u0418\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043d\u0438\u0445 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d\u0438 \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441 \u044d\u0442\u0438\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c","fb3c7584":"\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0432\u043e \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","4b93fab6":"\u0432 \u0438\u0442\u043e\u0433\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","5fdbd6be":"\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043d\u0435 \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 (\"\") \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0442\u043e\u0440\u043e\u0439 \u0442\u0438\u043f \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0438 \u044d\u0442\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u043d\u043e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430\u0434\u043e","e721e571":"\u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","4f78371a":"\u043f\u043e\u0445\u043e\u0436\u0435 \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u043d\u0441\u0442\u0432\u043e \u044d\u0442\u0438\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 KMeans \u0441\u043e\u0433\u043b\u0430\u0441\u0443\u044e\u0442\u0441\u044f \u043d\u0430 <b>6<\/b> \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430\u0445","3c277ba4":"# Clustering","8c4aee96":"\u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \"Name\" \u0442\u0430\u043a \u043a\u0430\u043a \u0435\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 100%","773018e7":"\u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b","baee9153":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043e\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","b4777864":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","9d9c29e3":"<h2>from sklearn import metrics<\/h2>\n\n<br><\/br>\n\n* <h3><b>silhouette_score<\/b><\/h3>\n\n<br><\/br>\n![image.png](attachment:7948dfbd-fdf4-442f-8880-69b3678be2dc.png)\n<br><\/br>\n<br><\/br>\n\n* <h3><b>calinski_harabasz_score<\/b><\/h3>\n\n<br><\/br>\n![image.png](attachment:cb039566-9f3c-4c22-9ee2-833392bd4a98.png)\n<br><\/br>\n<br><\/br>\n\n* <h3><b>davies_bouldin_score<\/b><\/h3>\n\n<br><\/br>\n![image.png](attachment:cde69574-adec-49a8-ab42-75e543d9f473.png)","2993b640":"\u043f\u043e\u0445\u043e\u0436\u0435 \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u043d\u0441\u0442\u0432\u043e \u044d\u0442\u0438\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 GaussianMixture \u0441\u043e\u0433\u043b\u0430\u0441\u0443\u044e\u0442\u0441\u044f \u043d\u0430 <b>7<\/b> \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430\u0445","47394f83":"KMeans the best","38dfd607":"\u043d\u043e \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0438\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c 4","b54a9c73":"\u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0440\u0435\u0445 \u043c\u0435\u0442\u0440\u0438\u043a","e5471915":"\u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0440\u0435\u0448\u0430\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0442\u0438\u043f\u0430 object \u0442\u0430\u043a \u0442\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0441\u0435 \u0447\u0442\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u0445\u0430\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u0430 \u0438 \u0432\u044b\u0434\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","bb18fa1c":"\u043d\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u0447\u0438\u0441\u043b\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043c\u044b \u0437\u0430\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0430\u043d\u0430\u043b\u043e\u0433 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c","ad64ef1a":"\u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0432\u043e\u0432\u0441\u0435 \u043c\u0435\u0448\u0430\u044e\u0442","39df0600":"\u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043a\u0430\u0433\u043b\u0435"}}