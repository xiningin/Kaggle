{"cell_type":{"d1381e28":"code","58ddbb8a":"code","7271bdf9":"code","17d676ca":"code","2aec7a99":"code","0ab61fc5":"code","48e847a3":"code","a330baf2":"code","41b59724":"code","e7bfa57b":"code","a58e6620":"code","455a8b79":"code","8caed5d1":"code","c6da9f69":"code","ce0bd35e":"code","96ef145b":"code","5d8f8f8f":"code","17e0d48f":"code","18658178":"code","354cdfe7":"code","519c6baa":"code","53d72fbf":"code","7ca3afaf":"code","e2f51414":"code","ed259e1b":"code","d649eb0d":"code","e6512379":"code","7bfbc894":"code","8df9fc72":"code","7f10993b":"code","6864cc33":"code","31ab6b63":"code","e208ce6e":"code","ec0ac69f":"code","f70bd24f":"code","d975e332":"code","40ba1858":"code","2a176880":"code","5ae5a4d6":"code","b431486a":"code","ca8956fa":"code","bebeba87":"code","331a5ea2":"code","843fa8a8":"code","ffc81acc":"code","eb5a3215":"code","7b6c04d4":"code","3c2e9361":"code","1a94d04a":"code","f9b2de6b":"code","7be8247a":"code","3378e447":"code","4b9bacc3":"code","e36d0360":"code","840400c4":"code","c12f282f":"code","11c2c101":"code","e415d676":"code","953117c3":"code","ae7d71ae":"code","e27d2afa":"code","a34360bb":"code","f62eccf5":"code","5f7e6a2b":"code","70e422cd":"code","0d8c2c8c":"code","17a8fd04":"code","c2b609da":"code","0490cd8b":"code","b225f139":"code","eb9ae9c2":"code","183a4659":"code","bb0502b8":"code","afb07248":"code","5acf9786":"code","6b07423b":"code","0c15535e":"code","a8058bfe":"code","65af310d":"code","7781512c":"code","bcf74e19":"code","1c86d497":"code","39056d2a":"code","432a91d4":"code","4705b23d":"code","6b68c1f8":"code","1e27ad25":"code","189fc28f":"code","1e1f9ea3":"code","7a30b44c":"code","45d2961f":"code","cb76884c":"code","6136efa1":"code","29cb85dc":"code","c9d23908":"code","af76b498":"code","f690d1de":"code","21a93f50":"code","d363527c":"code","1005c112":"code","a9ab4558":"code","9e127617":"code","515d352c":"code","0c544dee":"code","c1fe32e9":"code","76f73c9e":"code","174c550a":"code","14e6b4fc":"code","766e41cc":"code","827ada75":"code","0774b4db":"code","38f60f3f":"code","f42a27b7":"code","0c1eb3b5":"code","8b2b196b":"code","ac3095fc":"code","9127032a":"code","170502d0":"code","955b14cc":"markdown","9032f890":"markdown","50dec373":"markdown","06d67889":"markdown","7c9a0452":"markdown","bc2c2283":"markdown","4a24a250":"markdown","4da4e737":"markdown","8462a5ce":"markdown","00bbe99f":"markdown","8d9b5914":"markdown","02a846e2":"markdown","a22a0e24":"markdown","eeafb7ad":"markdown","de938bdc":"markdown","5abe940a":"markdown","5ddb3ea1":"markdown","0c8993e2":"markdown","fb38540c":"markdown","e8166704":"markdown","2593ff85":"markdown","211516a1":"markdown","cb9e0721":"markdown","34378fcc":"markdown","abf5e5d9":"markdown","d68d9152":"markdown","c77e314c":"markdown","6fb981ea":"markdown","026d0e29":"markdown","9f728b13":"markdown","13532b4d":"markdown","9907c0a5":"markdown","3a1cc7a5":"markdown","2b378841":"markdown","3e7d080c":"markdown","f967e34b":"markdown","79905095":"markdown","9b821c96":"markdown","5ff2d602":"markdown","4c59b1ee":"markdown","74a7179e":"markdown","1048b312":"markdown","f78fef46":"markdown","cdc4d511":"markdown","ea0e5014":"markdown","4f12a22e":"markdown","64438ffe":"markdown","4806ff21":"markdown","58523c0c":"markdown","834db8cb":"markdown","d4722d11":"markdown","9fb48b71":"markdown","00a0f67a":"markdown","1e9b64a4":"markdown","d658de99":"markdown","cb819093":"markdown","d22b1249":"markdown","7bfdb6b6":"markdown","74a7b250":"markdown","616d2e4a":"markdown","0bdca7dd":"markdown","ac4beeb3":"markdown","e01aa925":"markdown","03c9a1ba":"markdown","79e42e5a":"markdown","bccbc34d":"markdown","8439a3ed":"markdown","6198cb3f":"markdown","ebfd57d4":"markdown","c20fac58":"markdown","67cfb470":"markdown","d6c62abc":"markdown","b7419a26":"markdown","989f7f5a":"markdown","7b5627b3":"markdown","aec382cb":"markdown","02009bff":"markdown","231df8f7":"markdown","cb8c4f65":"markdown","d23dc2c2":"markdown","f726f359":"markdown","627d1e20":"markdown","7af5ba97":"markdown","1455865d":"markdown","1aa17af5":"markdown","d69fcb01":"markdown","196b845f":"markdown","9f6f4a60":"markdown","6bfc701a":"markdown","f73d2c4b":"markdown","8e3ca991":"markdown","822e11c4":"markdown","8a74928a":"markdown","7790df02":"markdown","0bf8b88b":"markdown","f8369b9e":"markdown","ce3ebfa8":"markdown"},"source":{"d1381e28":"# Import pandas library as an alias name (nickname) pd\n\nimport pandas as pd","58ddbb8a":"# the file is uploaded on Jupyter Notebook\n\nbrics = pd.read_csv(\"..\/input\/simple-data-manipulation-and-visualization\/brics.csv\") # importing brics.csv dataset and converting the table into a dataframe (pandas table).\n\nprint(brics) #print() dataframe using print()\n\nbrics  # Printing dataset without print() Funtion.","7271bdf9":"# Data type of any variable can be seen using the function type()\n\nprint(type(5))\nprint(type('a text'))\nprint(type(True))\nprint(type(brics))         # datatype of the dataframe created above","17d676ca":"brics.info()  # Object dtype can store variables with any or mixed data types","2aec7a99":"brics.value_counts()","0ab61fc5":"# When the dataset is large and we want to sort the data by ascending or descending order to look at largest or smallest values.\n\n# Ascending order by column code.\nbrics.sort_values(by=['code'])   # Ascending by default.\n# or\nbrics.sort_values(by=['code'], ascending = True)  # No need to mention\n","48e847a3":"# Sorting in descending order.\nbrics.sort_values(by=['code'], ascending = False)  ","a330baf2":"print(brics) # printing the dataframe to observe output","41b59724":"brics.sort_values(by= 'population', ascending= False)","e7bfa57b":"brics.sort_values(by = 'area')","a58e6620":"# Sorting and printing just one column.\nbrics.country.sort_values(ascending=False)  ","455a8b79":"brics.area.sort_values(ascending=False)","8caed5d1":"# To fetch data from the 2nd row, we can use index 1 (one)\nbrics.country[1]","c6da9f69":"# Getting single column from a dataframe\n\nprint(brics[\"country\"])","ce0bd35e":"# Print area column from brics dataframe\n\nprint(brics[\"area\"])","96ef145b":"# Other way to get a single column from a dataframe - use dot\n\nbrics.country","5d8f8f8f":"# Print code column from the dataframe using dot\n\nbrics.code","17e0d48f":"# Pritning multiple columns\n\nbrics[['country', 'capital']]","18658178":"# Print country, capital and population\n\nbrics[['country','capital','population']]","354cdfe7":"# use col 0 as index. \n\nbrics = pd.read_csv(\"..\/input\/simple-data-manipulation-and-visualization\/brics.csv\",index_col=0)\nbrics","519c6baa":"#Adding a new column to the existing Data Frame\n\nbrics[\"on_earth\"] = [True, True, True, True, True]    \nbrics","53d72fbf":"# adding a calculated column\n\nbrics[\"density\"] = brics[\"population\"] \/ brics[\"area\"] * 1000000   # per km sq.\nbrics","7ca3afaf":"brics.style.set_precision(2)  # Upto 2 decimal points for all float columns in the dataframe. ","e2f51414":"brics[\"density\"].round(2) # Rounding of individual column to fixed decimal points.","ed259e1b":"brics","d649eb0d":"brics.loc[\"SA\"]   # .loc is used with actual value of the index. ","e6512379":"brics.iloc[4]  # .loc is used when we are giving the index reference as number, not the actual value of the index.","7bfbc894":"brics.loc['IN']","8df9fc72":"brics.iloc[2]","7f10993b":"#adding a new ROW using append\nnewrow = {'code':'WK', 'country':'Wakanda', 'population':5,'area':1000000,'capital':'Wakanda City','on_earth':False,'density':5}\n\n\nbrics1 = brics.append(newrow,ignore_index= True)   # Ignoring the existing index.\n# Ignoring the existing index will result into new dataframe index 0,1,2,....\n\n\nbrics1   # append will not result into changing the actual dataframe. brics will still be the same.","6864cc33":"#Adding a new row using .loc\n\nbrics.loc['WK'] = ['Wakanda', 5, 1000000, 'Wakanda City', False, 5]   \n# Sequence is very important. Data types may get changed due to wrong sequence.\n\nbrics","31ab6b63":"brics.loc['GD'] = ['Gondor', 3, 1855000 ,'Minas Tirith',False,2.214022]","e208ce6e":"# Fetching the value in 2-D way. In Excel, we have cells for that, Ex- A2 means column A and row 2.\n# All of the below codes will give the same output.","ec0ac69f":"brics.loc[\"IN\",\"capital\"]","f70bd24f":"brics[\"capital\"].loc[\"IN\"]","d975e332":"brics.loc[\"IN\"]['capital']","40ba1858":"# create a new dataframe so that brics is not affected.\n\nbrics1 = brics\nbrics1","2a176880":"brics1.drop(['area'], axis=1)  # axis = 0 by default for rows. Axis = 1 for column.\n\n# For multiple columns, mention the columns separated by comma. Ex. df.drop(['name','max'], axis=1)","5ae5a4d6":"brics1 = brics\n\nbrics1.drop(['area','density'], axis = 1)","b431486a":"brics1.drop(['WK'], axis = 0)","ca8956fa":"brics1 = brics\n\n# Another way to drop columns\nbrics1.drop(columns=['area', 'density']) ","bebeba87":"brics1 = brics\n\n# Drop rows by index\n\nbrics1.drop(['IN', 'CH'])","331a5ea2":"for index in range(brics.shape[0]):    \n    countryName = brics.iloc[index,0]  # row - index, column - 0\n    cityName = brics.iloc[index, 3]  # row - index, column - 3\n    print('The Capital City of', countryName, 'is', cityName)","843fa8a8":"#Another solution\nfor index in range(brics.shape[0]):\n    print('The Capital City of', brics.iloc[index, 0], 'is', brics.iloc[index, 3])","ffc81acc":"#Another solution\n# iterrows() is a generator that iterates over the rows of the dataframe and returns the index of each row, \n# in addition to an object containing the row itself.\n\nfor index, row in brics.iterrows():\n    print(\"The Capital City of\",row['country'],\"is\", row['capital'])","eb5a3215":"# Loading the dataset\nmarks = pd.read_csv(\"..\/input\/simple-data-manipulation-and-visualization\/marks.csv\") ","7b6c04d4":"# TO DO: Show the shape of the dataframe\n\nmarks.shape","3c2e9361":"# Get the information and structure of the data with non-null value counts\n\nmarks.info()","1a94d04a":"# Print datatypes of the each column\n\nmarks.dtypes","f9b2de6b":"print(type(marks))\nprint(type(marks.English))  # Column's dtype is Series, the dtype of the values is Object.\nprint(type(5))\nprint(type(5.5))\nprint(type(\"Python\"))\nprint(type(True))","7be8247a":"# Using display() \ndisplay(marks) ","3378e447":"num = 5 # Assignment. No output of assignment operator. \nnum\n\nnum == 6 # Comparison\/equality. Output is either True or False","4b9bacc3":"display(marks.loc[(marks.Student_Name == 'Ria')])  # in case the index is not known for large datasets","e36d0360":"display(marks.loc[(marks.Student_Name == 'David')])","840400c4":"display(marks.loc[(marks.Student_Name == 'Ria') | (marks.Student_Name == 'David')])   ","c12f282f":"display(marks.loc[(marks.Student_ID == 'S05')| (marks.Student_ID == 'S10')])","11c2c101":" display(marks.loc[(marks.English > 70) | (marks.Maths > 70)])","e415d676":"# Using AND operator to combine two conditions. \n\ndisplay(marks.loc[(marks.English > 70) & (marks.Maths > 70)])","953117c3":"# Using NOT function \n \ndisplay(marks.loc[(marks.Student_Name != 'Ria')])","ae7d71ae":"# Index column can be changed by giving the name of the column - unique and case-sensitive\n\nmarks = pd.read_csv('..\/input\/simple-data-manipulation-and-visualization\/marks.csv', index_col = 0)  # could have given the index no. of the columns (0,1..) as well.\n\ndisplay(marks)","e27d2afa":"display(marks.loc['S01':'S10']) # Range of values. Includes all values\/labels.","a34360bb":"display(marks.iloc[0:10]) # IMPORTANT - Out of 11 indices, the last one will be excluded.","f62eccf5":"display(marks.iloc[[3]])    \n\n#display(marks.iloc[['S04']]) will result in 'Type Error' iloc will not work if the index is not integer.","5f7e6a2b":"# Correct the issue of the previous code cell and write the correct syntax here.\n\ndisplay(marks.iloc[[3]])","70e422cd":"# Data of multiple and non-consecuitive indices\n# Selecting details of the 1st and 5th row\n\ndisplay(marks.iloc[[0, 4]])","0d8c2c8c":"display(marks.iloc[[0,5,8,4,11,16]])","17a8fd04":"# .loc can be used to fetch details from a range of index values in a sequence.\n\ndisplay(marks.loc['S01':'S05'])   # Continuous series of the indices based on label.","c2b609da":"display(marks.iloc[2:5]) # Prints all values from all columns for indices 2 ,3 & 4.","0490cd8b":"display(marks.iloc[:5]) # Prints all values from all columns for indices 0 to 5.","b225f139":"display(marks.iloc[15:]) # Prints all values from all columns for indices 15 till last.","eb9ae9c2":"display(marks.iloc[15:100])  # Prints all values from all columns for indices 15 till last.","183a4659":"display(marks.iloc[:]) # Prints all values from all columns for all indices.","bb0502b8":"temps = pd.DataFrame({\"sequence\":[1,2,3,4,5],\n          \"measurement_type\":['actual','actual','actual',None,'estimated'],  # With strings, it will become 'None'\n          \"temperature_f\":[67.24,84.56,91.61,None,49.64]   #With numbers, it will become 'NaN'\n         })\ntemps","afb07248":"# To identify the null value. Return true if the value is null otherwise false\ntemps.isna()            ","5acf9786":"# Return the count of missing value from each column     \ntemps.isna().sum()      ","6b07423b":"# Total count of null from all columns\ntemps.isna().sum().sum() ","0c15535e":"# Drop\/delete the row containing missing values\n\nclean_temps = temps.dropna(how='any')  # how: {'any', 'all'}. Default 'any'\ndisplay (clean_temps)\n\n# \u2018any\u2019 : If any NA values are present, drop that row or column.\n# \u2018all\u2019 : If all values are NA, drop that row or column.\n\n\n# in the output, index 3 is not there.","a8058bfe":"clean_temps = temps.dropna(how='all')  # how: {'any', 'all'}. Default 'any'\ndisplay (clean_temps)","65af310d":"# Drop the ROWS where at least one element is missing.\ntemps.dropna()","7781512c":"# Drop COLUMNS where there are missing values.\n\n# Drop the columns where at least one element is missing.\ntemps.dropna(axis = 'columns') # Without the 'axis' argument, rows will be dropped by default as you did in the previous code.","bcf74e19":"temps['temperature_f'].cumsum()   # Returns the commulative sum. \n\n# It will skip null values. skipna = TRUE by default\n\n# array containing numbers whose commulative sum is desired","1c86d497":"temps['temperature_f'].cumsum(skipna=False)  ","39056d2a":"# fill missing value with zero\ntemps.fillna(value=0, inplace = True)  ","432a91d4":"# Print the dataframe\n\ntemps","4705b23d":"# fill missing value with previous value\ntemps = pd.DataFrame({\"sequence\":[1,2,3,4,5],\n          \"measurement_type\":['actual','actual','actual',None,'estimated'],\n          \"temperature_f\":[67.24,84.56,91.61,None,49.64]\n         })\ntemps.fillna(method='pad' , inplace=True)  # 'pad' means padding. Take value from previous row\ntemps","6b68c1f8":"# fill missing value with next value\ntemps1 = pd.DataFrame({\"sequence\":[1,2,3,4,5],\n          \"measurement_type\":['actual','actual','actual',None,'estimated'],\n          \"temperature_f\":[67.24,84.56,91.61,None,49.64]\n         })\ntemps1.fillna(method='bfill' , inplace=True)  # bfill takes next value to replace\ntemps1","1e27ad25":"# fill missing value with mean\ntemps = pd.DataFrame({\"sequence\":[1,2,3,4,5],\n          \"measurement_type\":['actual','actual','actual',None,'estimated'],\n          \"temperature_f\":[67.24,84.56,91.61,None,49.64]\n         })\ntemps['temperature_f'].fillna(temps['temperature_f'].mean(), inplace=True)  # Mean will not work on strings\ntemps","189fc28f":"def cube(y):\n    return y*y*y  # return is a keyword. Python stops when the code reaches to return statement. Print is a function.\n    \n\n# using the normally defined function\n    print(cube(5))\n\n# Using the lambda function\nlambda_cube = lambda y: y*y*y\nprint(lambda_cube(5))","1e1f9ea3":"teams = pd.DataFrame({\"Region\":['North','West','East','South'],\n          \"Team\":['One','Two','One','Two'],\n          \"Squad\":['A','B','C','D'],\n          \"Revenue\":[7500,5500,2750,6400],\n            \"Cost\":[5200,5100,4400,5300]})\n\ndisplay (teams)","7a30b44c":"# apply() to alter values along an axis in dataframe or in a series\/column \n\n# Categorise based on the revenue and cost\nteams['Profit'] = teams.apply(lambda x: 'Profit' if x['Revenue']>x['Cost'] else 'Loss',axis=1)\nteams\n","45d2961f":"# Use map() to substitute each value in a series\n\nteam_map = {\"One\":\"Red\",\"Two\":\"Blue\"}      # new variable - dictionary (key-value pair)\nteams['Team Color'] = teams['Team'].map(team_map) # A new column with mapped values\nteams","cb76884c":"# applymap() method do elementwise operation on the entire dataframe.\n# This method applies a function that accepts and returns a scalar to every element of a DataFrame.\n\nteams.applymap(lambda x: len(str(x)))  # int(x) won't work because data has strings which can not be convereted to int.","6136efa1":"# Grouping on different region. \nteams.groupby(['Profit','Region']).max()","29cb85dc":" teams.groupby(['Cost']).min()","c9d23908":"teams.groupby(['Revenue']).mean()","af76b498":"teams.groupby(['Team']).agg({'Revenue':['mean','min','max']})","f690d1de":"# Redefining teams dataframe, and display it\n\nteams = pd.DataFrame({\"Region\":['North','West','East','South'],\n          \"Team\":['One','Two','One','Two'],\n          \"Squad\":['A','B','C','D'],\n          \"Revenue\":[7500,5500,2750,6400],\n            \"Cost\":[5200,5100,4400,5300]})\n\ndisplay (teams)","21a93f50":"# Setting two columns as index when a single column has not unique values.\n\nteams_reindex = teams.set_index(['Region','Team'])  # 2 indices. useful when values are not unique\ndisplay(teams)\n\nprint()    # TO print blank\/new line.\n\n\ndisplay(teams_reindex)","d363527c":"# Restructuring the dataframe based the multiple indices.\n\nstacked = pd.DataFrame(teams_reindex.stack())\nstacked","1005c112":"group1 = pd.DataFrame({'name': ['Alice', 'Bob', 'Charlie', 'David'],\n                    'number': [1, 2, 3, 4]})\ngroup2 = pd.DataFrame({'name': ['Charlie', 'David', 'Edward', 'Ford'],\n                    'number': [3, 4, 5, 6]})","a9ab4558":"group1.merge(group2,how='left', on='number')   # Left - all from 1st table and only common from 2nd table.","9e127617":"group1.merge(group2)   # Shows only the common records.","515d352c":"group1.merge(group2,how='inner',left_on='number',right_on='number')  # Inner - Shows only the common records","0c544dee":"group1.merge(group2,how='right',left_on='number',right_on='number')  # Right - All from 2nd table, common from 1st table.","c1fe32e9":"cars = pd.read_csv('..\/input\/simple-data-manipulation-and-visualization\/mtcars.csv', index_col= 'car_names') # index is set at col 'car_names'\n\ncars","76f73c9e":"# Import the required package \nimport matplotlib.pyplot as plt\n\n# This is a magic command for IPython that allows you to add plots to the browser interface.\n%matplotlib inline ","174c550a":"cars.plot.scatter(x = \"mpg\", y = \"hp\",linewidths = 10,figsize = (10,7)) # x array represents 'mpg' of the car\n                                                                        # y represents 'hp' of the car                                                                       \n\nplt.xlabel('MPG', fontsize = 15) \nplt.ylabel('Hp', fontsize = 15)\n\nplt.title('MPG Vs Hp', fontsize = 25)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.show()","14e6b4fc":"cars.plot.scatter(x = \"mpg\", y = \"drat\",c = 'r', linewidths = 10,figsize = (10,7))\n\nplt.xlabel('MPG', fontsize = 15)\nplt.ylabel('Drat', fontsize = 15)\n\nplt.title('MPG Vs Drat', fontsize = 25)\n\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.grid(False)\nplt.show()","766e41cc":"pd.crosstab(index = cars['cyl'], columns = 'cyl')","827ada75":"# Other way to create the crosstab\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nct = pd.crosstab(cars.cyl, cars.cyl)\n\nct.plot.bar(stacked=True, figsize = (10,7))    # Try staked=False and then by removing stakced part\nplt.legend(title='mark', fontsize = 15)  \n\nplt.xlabel('cyl', fontsize = 15)\nplt.ylabel('cyl', fontsize = 15)\n\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.show()","0774b4db":"# Other way to create the crosstab\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\n\nct_1 = pd.crosstab(cars.cyl, cars.gear)\n\nct_1.plot.bar(stacked=True, figsize = (10,7))    # Try staked=False and then by removing stakced part\nplt.legend(title='mark', fontsize = 15)  \n\nplt.xlabel('cyl', fontsize = 15)\nplt.ylabel('gear', fontsize = 15)\n\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.show()","38f60f3f":"# By trying stacked = False\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nct_1 = pd.crosstab(cars.cyl, cars.gear)\n\nct_1.plot.bar(stacked=False, figsize = (10,7))    # Try staked=False \nplt.legend(title='mark', fontsize = 15)  \n\nplt.xlabel('cyl', fontsize = 15)\nplt.ylabel('gear', fontsize = 15)\n\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.show()","f42a27b7":"# By removing stacked part\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\nct_2 = pd.crosstab(cars.cyl, cars.carb)\n\nct_2.plot.bar(figsize = (10,7))    # By removing stacked part\nplt.legend(title='mark', fontsize = 15)  \n\nplt.xlabel('cyl', fontsize = 15)\nplt.ylabel('carb', fontsize = 15)\n\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.show()","0c1eb3b5":"ct2 = pd.crosstab(cars.cyl, cars.am)\n\nct2 = pd.crosstab(cars.cyl, cars.am)\n\nct2.plot.bar(figsize = (10,7))\n\nplt.xlabel('cyl', fontsize = 15)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.legend(title='am', fontsize = 15)\nplt.title('cyl vs am', fontsize = 25)\n\nplt.show()","8b2b196b":"group = cars.groupby(by = 'cyl')[['mpg','hp']].nunique()\n\ngroup.plot.bar(figsize = (10,7))\nplt.title('visualize mpg and hp by cyl', fontsize = 25)\n\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.legend(fontsize = 15)\nplt.xlabel('cyl', fontsize = 15)\n\nplt.show()","ac3095fc":"cyl_count = cars.cyl.value_counts()\n\ncyl_count.plot(kind = 'pie', autopct='%1.1f%%',figsize = (10,7),startangle = 180)\n\n\nplt.legend(title = 'cyl',fontsize = 15)\nplt.title('Distribution of Car cyl', fontsize =25)\n\nplt.show()","9127032a":"cars['mpg'].plot.hist(bins = 8, figsize = (10,7))\n\nplt.xlabel(\"Car's MPG\", fontsize = 15)\nplt.ylabel('frequency', fontsize = 15)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.grid(False)\n\nplt.show()","170502d0":"# setting the dimensions of the plot\nfig, ax = plt.subplots(figsize=(10, 7))\n\nsns.distplot(cars['mpg'], bins = 8, kde = True) \nplt.xlabel(\"Car's MPG\", fontsize = 15)\nplt.ylabel('frequency', fontsize = 15)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.grid(True)","955b14cc":"* **Seaborn** which is another extremely useful library for data visualization in Python. \n* The Seaborn library is built on top of Matplotlib and offers many advanced data visualization capabilities.","9032f890":"##### Group the records on Revenue column with mean values.","50dec373":"## Matplotlib in Python\n\n* Matplotlib is a **plotting library** in Python. It is used for creating static, animated, and interactive visualizations in Python.\n* In this project, I will use some modules of matplotlib library to create line, bar, column and pie charts with customized formatting to visualize certain data.","06d67889":"* A histogram is **right skewed** if the peak of the histogram veers to the left. \n* With right-skewed distribution (also known as \"positively skewed\" distribution), most data falls to the right, or positive side, of the graph's peak. \n* kde represents the probability distribution of the data values as the area under the plotted curve.","7c9a0452":"* A **histogram** is an accurate representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable. It is a kind of bar graph.\n\n* To construct a histogram, we have to follow these steps \u2212\n\n 1. Bin the range of values.\n 2. Divide the entire range of values into a series of intervals.\n 3. Count how many values fall into each interval.\n\n* The bins are usually specified as consecutive, non-overlapping intervals of a variable.\n\n* The matplotlib.pyplot.hist() function plots a histogram. It computes and draws the histogram of x.","bc2c2283":"## 1. Dataset is Used: brics.csv ","4a24a250":"### If using Google Colab and data is on local disk\n\nIn this case, we need to first upload the file in file and use read_csv or read_excel functions to read the file as a dataframe.","4da4e737":"* A **scatter plot** is a diagram where each value in the data set is represented by a dot.\n* The Matplotlib module has a method for drawing scatter plots, it needs two arrays of the same length, one for the values of the x-axis, and one for the values of the y-axis.","8462a5ce":"##### Create crosstab for cyl(cylinder) and columns as count","00bbe99f":"### Fetching data using indices and location functions (.loc and .iloc)\n\nTo Note:\n1. **.loc** is used with the actual value\/label of the index\n2. **.iloc** is used with the index position\/reference - which are numbers (0, 1, 2, 3, 4......)","8d9b5914":"##### Create crosstab for cyl(cylinder) and am as 'ct2' and create a bar plot.","02a846e2":"* Col 0 as index will remove the 1st column containing the indes or sl.no. from the above output.\n* And make the 1st column from actual daata as the index.","a22a0e24":"* The project is focused around the use of **Pandas** and **Matplotlib** libraries of **Python** for data manipulation and visualization.","eeafb7ad":"* The value mentioned in the argument must be there in the dataframe's index list.","de938bdc":"* If we select more than one column, Pandas creates, by default, an unstacked bar chart with each column forming one set of columns, and the DataFrame index as the x-axis.","5abe940a":"##### Group the records on Cost with minimum values.","5ddb3ea1":"**Ans** : Inner join is the most common type of join. It returns a dataframe with only those rows that have common characteristics.Thats's why there are no null values in the output.","0c8993e2":"* The output is for the values in the column, not for the column iteself. A column of a dataframe is called a SERIES. The type of a series is Series.","fb38540c":"## Pandas in Python\n\n* Pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series. \n\n* When the values are in a table, the table in Python programming is called a **dataframe**. Basically, dataframes are nothing but variables with values in structured data format.\n\n* Pandas library is used to view, manipulate (modify) and analyse dataframes which are 2-D or 3-D in nature.","e8166704":"* There is **NaN** for code in other rows, Because the previous 'code' was not a part of data table. It was an index.\n\n* With 'code' in 'newrow', we are adding a new column called 'code'.\n \n* ignore_index=False will result into error because 'newrow' is a dictionary and appending a dictionary into a dataframe will not work if we do not ignore the index.","2593ff85":"## 3. Dataset is Used: mtcars.csv","211516a1":"* Pie charts are great for visualizing the distribution of counts among different values of a categorical field.\n* autopct parameter shows the percentage distribution of each portion.","cb9e0721":"##### Sort the data to see which Country has Largest Population (Population is in millions.)","34378fcc":"## Pandas Advanced and Matplotlib\n\n## 2. Dataset is Used: marks.csv ","abf5e5d9":"* Notice that the indices are BR, RU, IN, CH and SA. However, their position(numerical index) are 0,1,2,3, and 4","d68d9152":"##### Add a new row in the dataframe using .loc any other country with some values in all columns.","c77e314c":"### Using different logical operator to explore or fetch certain details from a large dataset.","6fb981ea":"##### Deleting area and density columns from brics1 dataframe.","026d0e29":"* Stacked bars are a great alternative in those cases, allowing us to compare and analyze those groups' composition.\n* In a stacked barplot, subgroups are displayed on top of each other.","9f728b13":"##### Q. Sort & print area column on from largest to smallest.","13532b4d":"### Importing pandas library\n\nThere are different pandas functions used to import different file types. To use any of those functions, the first thing we need to do is to import pandas library. ","9907c0a5":"* ##### It is not advisable to use dot everywhere to print column.\n* ##### Using square brackets to print one column is also correct way.","3a1cc7a5":"##### Print all records for 'David'.","2b378841":"## display() Vs print()\n\n*  display() is similar to print() with some difference. \n\n*  Useful in advanced Python when we can 'display' images, but not 'print' them.\n\n*  When working on a dataframe, prefer to use display()","3e7d080c":"##### Grouping on the basis of aggregates.","f967e34b":"### If the data is uploaded on Jupyter Notebook and is saved in the same location where this Python Notebook is\n\n* If the data and the Notebook are in the same location\/folder in Jupyter Notebook, we can just 'read' the data without mentioning any directory\/source path.  \n\n","79905095":"**Import first Pandas library and run this code first to upload the file.**\n\n* from google.colab import files\n* uploaded = files.upload()\n\n**The io module provides Python's main facilities for dealing with various types of I\/O.There are three main types of I\/O: text I\/O, binary I\/O and raw I\/O.**\n\n* import io\n* data = pd.read_csv(io.BytesIO(uploaded['data.csv'])) \n\nDataset is now stored in a Pandas Dataframe.","9b821c96":"##### Creating new dataframe to understand Data Cleaning","5ff2d602":"##### Create a pie chart for cyl count.","4c59b1ee":"Reset Index, Set Index and ReIndexing","74a7179e":"* .loc is different than .iloc\n* .iloc is label-based. We need to SPECIFY the VALUE of the index. The values must be there in the index column.\n* iloc is integer index-based. So here, we have to specify rows and columns by their integer index.\n* iloc will not work if the indices are not integers.","1048b312":"##### Fetch all details for all students except for Ria or the all students who are not Ria.","f78fef46":"* This will not change the original dataframe i.e. the original dataframe will still have multiple digits after decimals.","cdc4d511":"##### Use .loc to print the values from all columns for IN.","ea0e5014":"* There is a difference between = and == .","4f12a22e":"##### Create groupby (cyl) to visualize mpg and hp in a bar chart.","64438ffe":"**So Here, I will be using Python Jupyter Notebook.**","4806ff21":"## Lambda Function","58523c0c":"* stacked = False will unstack the bar","834db8cb":"* The **shape function()** helps us to find the shape or size of an array or matrix. In Excel - A1:D10.  \n* shape[0] means we are working along the first dimension of an array.\n* If Y has n rows and m columns, then Y.shape is (n,m). So Y.shape[0] is n.","d4722d11":"#### Why there are no null values now in the output? ","9fb48b71":"* NaN belongs to the class float\n\n* None belongs to the class NoneType","00a0f67a":"## Adding rows in the dataframe\n\n**append()** is used to add records in a dataframe or even in lists.","1e9b64a4":"#####  Create a Histogram for MPG column.","d658de99":"## Indexing in dataframes\n\nWhen we print a dataframe, a column with numbers 0, 1, 2... shows up at the left side. This column is called Index column. An index column indicates the position\/row of records.\n\n\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAVQAAACZCAYAAABwk8JrAAAgAElEQVR4Ae1dP4gcx9K\/UNFnZ3YmbWRFRpFxZBQZJQYnBifWeQODAwcOHBgcPNhjuUCBwInAPHhgDpmzAvEi4+jhQCxGHHqPF9i8L3gCfSCjROHK+tcfVdXVXdXd83dn9mZPtXDsXE9Pd9WvfvXrmpnd2T1nL0PAEDAEDIFBENgbZBQbxBAwBAwBQ8CZoBoJDAFDwBAYCAET1IGAtGEMAUPAEOgvqOu1c3\/7m3Mff+zc5cv09\/nn1Ab7tvQ6OZy52eHJlmab2DR3l242W7qz5f2JW85mbgZ\/82P3qCXklTxAjGZufqvtSC0ntG6niIDnSMqPTvnQj2dNTvcT1N9+c+7iRef29sp\/b77p3NdfO\/ff\/zbNv\/H+ykTaeOQdGKATgXbAH2Hio1vzYQRVjGmbZxyBHvnQlWdNCHYTVKg8Dw+dO3euLKQlgX39deegcq2tWsVqMZu744fe7IfHbs7ViqzEVLusUB+547mvbuQ4TSiMtB\/F3tsfKiRlO1eXZDf3iUGm9uWtiMPyLhgr\/Uz9BSzn7vgWVK+wj\/BEW8SKnv7fDoLcHrbZuXIM0ZfD4xgXtkGRn44l38iSiEG0TOIZKnOFp65scQyPvxwbRpRjsQ+ZrRM+85G+cYzBrzof5DHss46bzKWI+1BbJcxlW4ip57fkfbBXxjvEpykfOEdy\/xAT5uQAjrYXVDi9h8qzJJpt2q5cce7x44LJHowADnehJGMgEXh0vNDuj4U+3H9ooNiqtu9EXhZMPqpgO\/pEGOS2M1FonMwnJUp6Dj5dRtwAH9U3FzA+uv5d2xPH1DGUvtP2zJGgiXkb7Ml8VYZpvGBX8FP1wz14CUEKqrTP+QSF\/cpWbBeLezbudBqk75U+AN4sHFW+VbUP4KrCvDiejGkVz+KB0ufQqjgVWuNGwT+0i3GJPXtvtRPUL7\/sL6RSbKGy\/fRT5x5yCeocEbpAXARHtDNYCSgRWA6CWI1kVdsboj4HSnKI46t88itylaDm7X5MxkRMwRWHFBDaXSVm6uCGfxK\/OBb\/ogo6zMntD71IBcKK45XtwjZvQZHoeIyIr1iEIw9SF9KxPU\/CsdEmNafwIR1xEv+jfQILj7HyQRiK7eFsj47jeCF2Yh+3i8M33IwYZwMVY5r0L8SiGG\/FqThTnX9VeMWju201C2qTmP7lL3HGH35w7t13m8X3woUoqgWwcEAEp4ugpokTzdr+VkIINqDKp60IaqziimRkG2vfE784dlsRVIovLy6pD+n\/0Y2UF+RDvJEZfVLJxb6JtT+Oedpb2gdpt9yWVlbioziZYiVH2GQ7YqxHqYpp0r8Qi6I\/JUFt8K8KL21n+\/\/qBRXEUlaYchvu7K9W5ZngZtT1685dulR9PHw6AF8EaiQ4D1kFtgy6PhZBDtUQj3M672hLViFX+RTFjitMOj3TxMqCr8jCfkp8uM2\/IzGhOhELVdKl\/l9tT8Sb2jmG0k65TZcI\/NwiSbDPjC8LkAXqOGwSfrEfocr0+BVjL47zztF8\/nJMagePIdrrMTmNvTIO5B+fzue4efuKXHHqUlApDkN5V5cPWBGrmEr\/yrHF8UT80c6Sj9gmLpk18mwzj6sF9d69shjCaTtUom1ecM30ww+rx+FTfwYzvYGAYPBpTbweyYEHYVgezsXHpjy5+PQlBbyNzYP18SKT2lLhE4mNPxU75Otdmlh5ssg5WCRzAYku+f4sGnFHyy05H9gaY8LXIuWNMBg0xsr7hjfVcI+4UbV0y7kXVIUPHaOqUsRz6Y7hUwAyvpJD3j9KYhqD7GJ7tR88vsJ30oIqcfU3IL3PyockqhoPxkLkjL95OPwpfxJviKGPXbRJxlTHR\/GswI9orzxO5wPGX\/pXGId5kMDW6d9qQYUKUlaksA137EFou77+8Y9ytQo3uuy1RQTqxLaNGUTYLsSrS\/A2M1qfVxGB7jybCkplQYWPOJU+Z9pHTNlTENVUoOGygb22ggBXAl3EMDesO9FNUHMUraUJge48axpxW\/vLggofcUrFD\/7f5AUiXfr86hY+\/L+J2XasIWAIGAJtEchVEm4mlcQUbjBt+ip9YgDms5chYAgYAmcAAS2oUEXWfXgfvk66yQs+FZCKdbjbv8nAdqwhYAgYAqePgBbUGzdywZMCCJ8f3fSVnvbDtVp7GQKGgCFwBhDQglq6sy8FFa6tbvoqfTa1+JXUTSey4w0BQ8AQ2C4CWlDrPsgPlSR\/bnQTG0vXUdt+rnWTee1YQ8AQMARGRkALaumjTSCAQ75u384vK8CH\/+1lCBgChsCOI6AFtVSh3r7t\/vOf\/wz297\/\/\/rd78T\/\/k4nq\/\/31r4PNMaS9NtZwsTcsDctd5UBbndeCWvr86ePHbr1eD\/r3\/LPPMkGFz6g+uX9\/0HmGttvGG5YHhqfhuSsc6Ceo6Uem4KumDp4NPWzgQThfvvZaJqrPrl0bfK6hbbfxhuWC4Wl47gIHugsq3GmXd\/RhGx7FN4KgAoBPv\/sum+\/5Bx+YoA68eO0CWc1GE9Wpc6C7oNbckBrL2fSrqC\/eftsE1QTVOGAcmBwHugsq\/FZUWqH6p0GNJaggoHJOuAww1lw2rlVBxgHjQF8OdBfU0of6\/YNL+hrRdNzzTz5Rggri+uevv5qoWoViHDAOTIoD3QUVHqWXVqh+lCZh7Lv\/6bffZnM+OziYFJB9fbPjrBoyDpwdDnQX1PT5p+J7+9XEWLkFP5F+tnCrjqsqVKOpiL94771cUO8fuf0wj38C+9Uj98DPtzqQT2XP91fbP8WAP3BHV1N\/9t3R\/SFshXjRWA9u7rvZwSrHumMMp4wt+hh4I\/kpMZbtayePWdwZAnM5hswXGVNpD8Re27Re035pj+a8H6uUJ2IseQyPJdvoVw1mbv\/mg63xojQ\/27YZtwRmdxZuhnoh2jryvLuggoDKClU8tKTKMQRDGNonQV+eP6\/nPXfOrdPPviJRcgIy8GiHEgciLu+vsn+a7RR0SeoxxG+MMSeFJ3ImClPkqhdNzxdoD1jLY0ISSkHcbFvyFPEPRUFc6HIMowhHPrcTBpiPj1HxBj\/D3MKnqvaO4pP7IOZIxpKY4HEj4L4eYMzugpo+BUo8Tb8MEAWayYgBE6th+Zgc2OJ11F9+0SskEr2LoK6dSpQkiG1tO51+9YJKibHAMwPEHrGJFS3HA4kaqrOZX6Fj4qoE2yl8cg61ilNIqgTf0O6FNghNxKrV+C0wlJjL7TXGMIp\/nA9shXbKNRbHNf4v86GAifCLKtyG\/oUqONpRGL+Fv22OrxVU9GHhFnDGhgsgxY4raao6wTbCh9sJJ+qL2wEL0bYmjeBj8rMC7XN3QZXVKWyLJ0uVgSEnOIGRID0EtfR51OwD\/oloAAg8L9iWBSUjoAan7M9U+iSkAVEMSc6npDH5HtxZhUsfVSsx4EMkiyKhEnqg5JgyroABcUYnFWLmeasxSUVsGH5QnrAtNCa3cXJLbhOmiS0gEHKxVGdnMCb4KAWU\/l8c7Ifjojh7v2DMbJxhfK7jBeau9EVqCPop\/Li\/cqtw6auCyyXxLLWtV24VLukknCjkQzdBhadIpYL66adhjDIgFGQOPpEiJnr5mDxApeuozz\/6qFWFynPnQeEVLZ+vrV2n14+Cy76BHYitF1W5HWyUC44QX9gfxRSwqCBhgUBh7DOwDzELYpEkDyYt8Vb3S0RsYxx0XItxxDlK85bamNt6XIwb8EHxgI4PnBI+c5w1T3js8d8xd0Ns1k4ucGo74E\/+0oLixVbwPy4UIs5FQSXfpHbEY3O\/gxg2bNB3+eHjUamgiqdMMej6XQcJCSJXlwBAbpweZ519DRWuq6o+CJhYqVhkfCB0UOrI12yLmreDD8MdV5EgsooSyUKE8AtZIA75CTEJSRSSlXDU4rELuPSzEfDRGCT4Csy0yAGPNOc2i3EyXoHTNH5iX4gbn2XkOGj+0wJc8jkIRjY32Na9GNoMD\/IjtV0u+pmg4kLAOCR4Ak5+P52+NwiqF2HCSfStyPkGHQ27SVBLP00CT57yryrgEAxMbjKo7ykD3NlPBf3JH39EUc0IoEmXBSXrn5OwyqfTb9e+gT0y0eU27APfOXliPEpJBRhEEr4Kggp4BBERiSJ9l\/ipa5lCaIfhRBJXTP5YGXMMyYZUyCFuwhc4NlR1yb7sdJ+4L30uClUYb7u5gpyVcwtcinZyMYH9YnGg8QNcCW+MP\/QVOoVtqBF+EfHiWuIKx561sOmdBLX0tdMWgqovBvdf4Z599VUmqH\/KG1PeYXXdiIEtXkP1IjRohbEtohERlK\/Cj1RQ46o8c4ub8PEyiAMlmR6D2yMJY1Juy7ctzoMJF2\/WIRaBMwLj0Ea2Ib54TS8VtSFsl3GR4wt7kvsDlNCpaCY3VKQgYexLuSjnkHNXLb5D+Ns8BgqquoaaLByqchb4HRzhxwtJBKVvfDy1VQqqF1zmxZEoTFhE5XuTkPL+DQW1GTBpVNV26QP+T7\/\/PlaoorqoGsPah4mF4Wg4GgdyDrBgNr1PQlD\/\/PvfswrVvjGVB9WIbpgYB06HA01CyvsnIahP\/vnPTFDhIdRGntMhj+FuuBsHNAdYMJveJyGo8M2o9KbUi\/ffN0G1Sx3GAePAJDjQJKS8fxqCul67l2+8oUT15VtvTQJIW6n1Sm14GB6vIgdYMJveqwX1xo1w7DYAfPHOO1pQ33jDBNWqE+OAcWASHAhi2LBRLaj+4dJw\/FYEtfBZ1G3Ma3NYxWUcMA40caBBR8PuyQhq6SEp2VOnbLXeyuLWRC7bbwL0qnEgKGbDxnQEtfDT0k9+\/90ExBYR44Bx4NQ50KCjYXcrQQ29x9yAb2alzxO4d2\/MGW1sQ8AQMAQGRWA6glr6kUD4Sqy9DAFDwBDYEQSmI6hwEyytUG\/f3hEYzUxDwBAwBJwjQS2JmbjLvxWgpmDDVhy1SQwBQ+CsIlAtqD\/9tF2fTVC3i7fNZggYAoMjQII6heuXJqiDB9cGNAQMge0iQII6hTvspWeybvuyw3axt9kMAUPgjCFAgvr55\/kNIfhZlG2+TFC3ibbNZQgYAiMgQIIKP8iX3mGHH+5r+To5nLnZ\/Ng9atm\/2K1GUHH85Knecj7cf3iihoW2+a2NLFLjDf7Pw2M3T32azdzy7pAzPXLH86HHHNK+7Yz16NbczRJ+0MwnblmBeYlTXa3V89Jc+lcU5u7Ypxn29XyQHJDcl3yW\/aVvqn22dDorwIPUZ22XnKOrv839ea7ELs6FYoyaR51SDxLUDz\/MBbWllSHgYwuqAluTokR+aBuXHC0BquqGJIoJBd0wGTbFsWq+V7Q98FPxh8DgfVLAcM\/dJf3ccuGYtjDy2FLs5LEQ68BP5IIXGZibOYB2sPiIxVFxR+SCHAeks1DosF3sM\/yv7RhzAQZb526eLPJhEdgAb4ntaW6ToF6+rAX13LlWNlFwCKBAglZHFjo1VagJ2JIIaEfN\/sJsp9+kksKbIxOiKpk4Ubi6DX7z6k+\/o0QJI5IwPa5YvZw+LENaAIkKOJT44QDfw+NCBQ84Lt1xZVXbbGHtvHC4jHO2kJLoQOWKQhPiS36Q+MU+VHHqhTlYKMUZGit95iM0X7h1uHdv961lFHEHc87d8lCeRZAdVM0L3xA3\/p0w0Y654tsFXuhvkicKU4lPEpO+PpOgXrqkBfXChVbjnRySU0hYXlVbHVno1ElQITBxJS0lDLSFlbcw3ak3YQAFKdLEQpJUVSfcHhOrTBSZICfuJFxOkO2njsToBuT8ANwAwxwH6AsirPDsaWE+Lw3Ec\/Cwei7B7QIHYsVL\/WY1CyPME3Og2me2IxX60D7YBtgwd8d3j92c9QLyYH7sTsQCpnATGEh\/ImYCLxlPlV8UZ8RCCOejW0u3PFzSZRcprhv4S4IKAiqvoV682GlIBIAB6nSk6NwkqLzS8LtYiVQA\/JASfDHLdDYxsLza8rsQWEEkJ4nit3H1FhhQMtA4fDqnjyPXESuPYew3HVjGsCTlB\/xPvieCCph7TGPC9rconddHwIt5HFfPJQXCV9cYL1HFKW7o\/jyqHpPGKfrMB+C1VcG\/0D7khhfUh4A7zQV2gtBFe5OYSLvQb+C4sFMIpLIU+gpNiuNLG5bu5O4yLKBx8VEjdfqHBPX117WgwiWADi8kjjC+w6Gxa5OgBvHICRTBisOBTUMAFEcceEutoIXrpyppUpKBLYQDCKsSxkC6pALzAk6YlMYb2L8JDaeFLeImbxABhtiPF2x+D7zr7pCe1x8P8UnGRP6G\/OGEz+djTqd8T+fhfnGEap+xT5UoxQEG2oq+gQ\/zWydKWAmXlJvxGDYC\/Yf4AGZVtlcKKi8uJ24JcYDj8dKPEGmeqMc7CaqsTmH7ypVOQ2FAAyE6HRo7txZUvgYlAFDiw\/sToYkzTWMLiSB84GucnGxyP257f2A7YB3JRwT1n2rA\/iVB9ZcK5HjTQGNUK1LBiZNF\/GIbbaWile5v839pXmhTCyAMFOLlr3NyfKUoYB\/PF8V38oGLh+L4ytjEZxiX51P9xvhHiCPOO3dzf8lC4q1wE74q3wI2tFjI6huxkHj5szrGCHNlzjcFH7njw2jHpl7vucIP5Dn4GFWHFwKwaVC6CCpfbxSlPwaEq4rZxKtTwFYFnMEmcsiVGquo+dItxZ1R5SsLsLwUEKpWmTy0TeMdu+OpV\/AMyQDvKkHVeBIftUOcgur2Lv\/l88J8ehHl8WJM9X4cw\/NaCnHsP4sVL4oPXz7y71leSp8FJ0TuyHnYvmHehaAyXz1\/0Z8ilyUePj\/QVtGOuVTwV+IRxubciwtbHqf+3u45+AB\/WqHCB\/23\/bKvnm4bcZvPEDAEBkZgz8FDnFNBha+ibvtVElR7fN+2o2DzGQKGwAYI7LnSqfZpCOr167mwg232MgQMAUNgRxDYc1AFphXqaTyUpPSAFhPUHaGRmWkIGAKAwJ4rnWpPRVB\/+82iZAgYAobAziCw56Zyqj2FJ17tTNjMUEPAEJgiAntuKqfaGz7xaorgmk2GgCHwaiGw577+Or+Guu1noQLm8GWC9FruqxUL89YQMAR2HIFyhZoI6nq9dmP\/vXjnHSWoL197bfQ5x\/bJxh+fN4axYbwNDrTV+ckI6svz57Wgnj9vgrqFhWwbZLQ5TPR2nQM7J6gOnsEqTvlfvPeeCaoJqnHAODAJDuyeoAoxBWF98f77kwBy11dWs9+qQ+PA5hzYKUF98vvvqjoFQX3+yScmqFadGAeMA5PgwE4J6p+\/\/JIJ6rOvvpoEkLa6b766G4aG4a5zYKcE9en33+eCeu2aCapVJ8YB48AkOLBTgvrs2rVMUJ\/++OMkgNz1ldXst+rQOLA5B7YjqPeP3H54MO2+O7rfz\/BnX3yRCSpcBqgjwupg5mYHK+yD27OFW4nVHNr2bz6oHaNu\/MnsQ4y7Yfvg5r7H5oE7ujpzizv94jIZDERcq23KfUUcAj8FPxRvI4\/W65VbhP4j8EfNK+ypmVf54Pmu2thev299Z0E\/ge3bQw5Uzr12crx+XCHsZ1eP3IMQqzwe1bFryc\/EN3xYOvsd5i2MBcehbWRTwEQcgxjUjLUFQdUglkStLYDPP\/ooE9Qn9+\/XimEuqDoBTFBpsWkbg93uF4UwCAIKSBQt5AsnfEgwnXyKM16Awngi+fphpQUm5W9IcjkvbvNiSj7m9kB79LMsDImQSP8lTrK9k79eC2Zy8db+9sNMx4cWi+jreu3nrRFCnDf4leDQwcctCKp2llY56azeXwfoi7ffzgS1rj\/sSwk5OzhyR1eZfLQ\/kLQDcE3zbn2\/TCokxsItrvqfe2CBAP9gH1Yl+25xUK5QETOuaEQSbt2nQeMBSQK8qxIcz8OQVL4ia0pCn6y5gLXndR2uSrwVHlKIwCfmtNyONqTjpP+TDcmxQkQxbwOPkn7Krjhn7hcL1ZEQd+nH2q1xTv55Fq8TIia0n\/Wjwg7kOPfx9ghfwC7J8ZD\/YR5v58EinFlzfMsLUfR5u4LKYIXARENy8PN96Yf6X771Vm11GoDzSYEgwjYAJ9oCoK2JkdvWxv5R+yC2PqmQUDLBuCIAAvI2kYZwkKReuVU49ZftE\/S5V7wkBrlPUWg8PmFhYTyTY5JEHSzGnCtVC1o2L\/k1K\/WHvirnuG8iXH5xCPkgeKSFpB7DagwIUxgfxqN5JMdg3IhznFO031m4xcGCLk9lGPjYoN2JoOJCSmPHcaG\/Hlue8vOlCezv8dPHJlxYr9vqqRvgq6cUBKiOWO2rgc8N\/fPXX7Pq9PkHH\/QTVFyhCNyYQPmcXew79b5ILk9GRShBWNUuKzDRx4uUXMH7xOvU8agUW+JhyafaZEmwI\/9EMlbOtyGv2syr+uT+gV9BJAt2SsFQFSIIlxc4jU0+R7t4R0Gl03AQPcE95DCLPL\/rPquDfXd058gt4L4H+F06g1B4MP4xVpLbdLbmLwPCcSic0k5\/VjctQaUAgPF1ga0LSvEjU99801tQkThXj9zRWbwppQglCKvaKwTVkzqvHpiYu\/5eFoPGhVUuWCBK+H9aBY2ATYt5tdjpy1wkXLHqK+ZYwovQR\/ioRFdWdQWBDsdn+wpChZfgfJEl5kvHgPn3b67c0QHc0Fq5hc\/d0sKYX0PV8aqM9akL6mqlStwUBP6fV4S+YgrjwAf45Xf4YbvNR6ZwbnF6L1c0JMkGIs\/+TeJdJp5KECGomAh8hkDt2Sm\/JDVuc\/8RxCJLuG3MkQsqcCRPTMAnCpESFMBFnUIPaXePeQvxDrlWtBUwiItBzBHJlUSYJS+C8HT1m8YPtolrmYQ\/xYb3K8xxzn23H3J53+2L+KgcVHiAjTQv5z7lPfsv+BD8SuwM7bIIKfuuBLHmnz13eJgJGv5wnzhIORWShQzm0pre2ZmyUaVx4CEoqaA++eOP\/hUq2qcDWJp3Z9qQ8A2n\/OAzkg1Op6puSnnywbXDs1TBJ3wMAhrw4FNM8hs\/1oOYcjuLq8AnXF8tCXJ7bmccU\/NyrtTPy8UB5pc8DQb\/5P+Mg\/Kb5+BKzvucLBpxDsaiq4+JUIEt3tcQj6LvMI\/OVSW27BO\/K9+8LwkGXOSps2Y4bmun\/KXflEp+HC8jBju46fvjxy67IWWP7WtcTEaLx6bxtOMtdmeUA6K+rN1s9SN9YyVw6Tv89lCUrtWB9R+LnzaucYs5UKuiYuee++mn7JQbfwlVdOJBh34vfuX0229tlT+jq\/zQ\/LHxTPC2xQEhh7Wbe3i9NHkWKf4SqjhsLKOff\/ZZJuZNXzkdyxYb15LTOGAcqOKAkMPazbKgwi+hilfVJJu2l74h1eaG1Kbz2vGWOMYB40AXDgg5rN3cc\/CDfGmFuiVBzW5ItfiGVBcQrK8ljXHAODAEB2pVVOwsC+rnn4subpRrmn2\/ITUEODaGJZlxwDjQhQNKEGv+2XMPH+YV6qefqkO6TNy277ODg2xeuEnV9njrZwlhHDAObIsDShBr\/tnDfekp\/8cf1xwy0K5LlzJBdffuDTS4DWMIGAKGwPYRKAvq5cvjWnL7di6mFy6MO6eNbggYAobAyAiQoL75pha4sQW1VJ1evz6yqza8IWAIGALjIkCCCtWhPO0HwRvrVfqqKwh6h2cOjmWajWsIGAKGwCYIlAV1zNNvq043iZcdawgYAhNGgAQVTvFlhfr66+OYDDed5DywDeJt1ek4eNuohoAhsFUESFA\/\/DAXujHMgC8MpIKafIlgjGltTEPAEDAEtoEACSp87jQVOvh86tCvknD\/9tvQs9h4hoAhYAicCgIkqF9\/nQtqG6F7eOzm4WG8S3fS5MLFi3qec+eajoj71VwzN7\/1KOw7OZy52aGeHdpkn9B5BzbQnxKud5duNivhfOKWs7k7HmEN3AG4vImP3PF85pZ3hcWIl38Q8fzYBcYkXGLuaNzpuEE5pOaVcSTb48Pa4z5pk7JFjiV9q\/LZOSfHUjghZBPgkLSd+Z\/ktYiu34x2P7o1dzPEIrbl\/cdtIUFt8dT+3AxPAnTAbzc53\/fTBAi0FAyajwmGREnmhjben9s+1ZYCjui7TzC5PVUXTsUuSCASwCgUMqk0XxzgKEWoZDMIVlOf0nGVbXU2SFvFACredDz5p\/sD12M7bzuHAuPzQm671LcgzjLHhB3b2lT+wqTaz22Zsck8JKiljzLBh+9bv8DxvErMDk8FteXnXYvi+PCRO3lINceZEVQkdqxOGL9HD0\/cI6g+PeGWUJED3iHhI\/EocZZBYLj6grEQJ175i5Uuz7hL7yA0gBlxMAqq9EGKkRYa2Stu6\/6xfZOtGCMcRcZabosplAj6+GGRADxICohsTGiAfqHgqRLLE7eEPmhDVR9h1JibTYKKNnruB\/5GXBEv9DdpO2zIh\/nSLdOzm55+kqCWvrkEItvqReQrBjg9vpeg1iUKTaCFggHfvQo1EiIFzv+PhOMKROKSEIjJppLkxJ2E0+ExBKPC5q01SzzEpB6zuPh4voaFpSAicExJsMSw3Tdp3nDWhHbR3Bj3YI\/gLfbhBVbkGdonREItrMwPv3AgF+DYuVsezmkhnsU+wQ\/FldC63Q30N+YvFA1xgYwcB6PiYhPbY\/4kbaV8kNh6oY5z9XebBBV+Qyq9KdXx7juJGge\/wqBegkpEqnP2zFSoEOSQHAUMJQmcxCUhUBgjtvNocvGpw5T77847+CoTUFsek023c9Uvr8ADRqNgIyssrJoKYp5U2jFeXhAPT0hMWCQ8D7RQkyjND5dujv0IG90nydXJCKq0S8RUYhcWH+gbOR5jXGqDuMd2rRkylxJ+dPyXBLX0TFS4UdXhhc403RjpJah0qhrIwDYhwAS+Boc6QFt2DB871XfhkzQx+LKJoHpCEibDEUjaebrbIvlKhijsRAfERQobjCOTWvQdcrMi1i4VSDGn4kFYNP2lnFJFHRboJN6Zz87hddWm\/BW2jLJZiFHwuRKvKJLTEdQWj\/DLASQC8yA15KgAAAp3SURBVKkROF5bXcEA6TMD3n03H7bUgkBL0hNBWDBx7oRQIRCl8SbbRn4xpmimJJnc7lqhSkLi9khV2KlhmwqqFsbIEcA4cikmoTccME64NIxLWtSiPXT6ylxWwga2sHAqEYwiogW4ql2eIsdr8bIqV\/MO43D3URS\/4XAZU9pmnGLcos\/1bTyej72ca8B8oAoV5kpP+a9caQbEG0If92ixqqcfm4KKte0LAYjXVxhYOFySk4fbTUEF672oqtMa75UkQVdBlePOj93xLlbwHNziu0w+iZfnDAsT7FK8jeIKuyApJbeKU\/VtlPNKe2RsZvrMCrntuaAuQ8h8kAtAVbuaQ\/uM7qBthfa+vvY5TtrO\/Je+SfzCWURPQWXdgHkGvykFzqfVY8s78J1w29ZXXDsZZZ0NAUPgLCCAFaoU4LZODbiYxAo1vb7ZpXpsazg8uDqthNsea\/0MAUPAEKhAAMW05qZkdlhSDQ91VhIFdRvVY+krrnBDzF6GgCFgCJwBBKoFFSrJoV8mqEMjauMZAobAhBCIqlkSu6Efq1eawyrUCdHBTDEEDIFNEKgX1KHFriSojx9vYr8dawgYAobAZBCIglp64tQ2BHUyUJghhoAhYAhshkAU1NLDn+ErqUO+Ss9DHXJ8G8sQMAQMgVNEIArqjRv5R5qGFlT4ZpT82NRYP7VyioDa1IaAIfDqIhAFtfQIvx9+QGTW67Ub4u\/l+fNKUF++9dYg4w5hm40xTIwNR8PxLHKg7RJRL6j+EX5DAaSq07099+K990xQB1qshoqRjWOCaBzIOTA5QX1y\/76qTkFcn3\/yiQmqCapxwDgweQ5MTlD\/\/PXXTFCfffXV5IG01TpfrQ0Tw+RV48D0BPXnn3NB\/eYbE1SrTowDxoHJc2AnBPXpt99OHshXbSU2f636NA7kHJicoD798cesQn363XcmqFadGAeMA5PnQHdB\/emnTPBc27v8dxb441+LO7my82oH4pne5e8qqA9u7ocfGYOHWu\/ffJAE4oE7ujpzs4NV0l5tF9sn35vn6TDe\/SO3P1u4FSQN4uS3G5JodTBzs6tH7kHSD9vhobipjzB2ob\/0y7Z93DAm8WHlEUvPH364MccticHGOGaxWrlFmFPyOrEnjfma9uu8E2NJPiifIwcDn4rzd+B5F4yULRyHaFNbfDFPM0zqbC7hVdc\/7usuqKUf6mslqDGAOrDRGACoJKh\/\/vxze+HDIOy7o\/t+XB8UNSe0XV24xdXuwQlBbDNPF\/JIEZXbtWMApgu3OBD+Yn9oT9s0zsGP2vFf8WMyQWM8xsc3LNZC7EDUQnEgeK0Fg\/Is9FvT\/1BYyByIY0nxkNtrhyJaEiLMn3wRH5xTaY6ta2yq4XGlHzXH9PVlGEG9fh3HqTMCnbq67\/aTwKbHPLt2LatQOwlqCzECAgLh+D21odX\/jfNEIs9CBUOEDWQPCSv6AoH92AuoPqEiEEmlbIN+3D8Qn+agn5uBBQPG3kfRRTvCnGu39kmZzoGxCpXIBovOCIRV\/o88vhYqFlPGbURc7iwCPytjX6w6yUaIH3EMuMAckIJKfGOBrfIzjiN8r5l38NgUBBVzA\/PBi\/8BnPX64kHymXMOc4nyiPyV+RGLDsJggWcA+zf\/hWewjE+XfBhGUP1PSVcC6gVi5R1mQ0v9n33zzWaCyquYF4R8LiaZT4wqsWqRrBJoPQ8FjYUTgyVIwO2RHMlpvicBjanJLzFbhcoU+sgEJxGlKp2Oz+fUNsbkWblVuCRDfbRvMrnO8jb5TgsTJGSSfGHBYfEaHovIm8LYmEsy5txHxl62pYKa+CPzIAhTYXzgZli8efyR3tGOaCdwH3MO5\/fxCbZov+UiEY+Rx+ucw\/4hhyTvu+VDd0FdrTLBc7WCSgmNSbklQQ2iE4ghggJtIQgAnNjXQkTD2LJvNo8OLlWCQE4KVC5uOrhcoeL11MqKYOUWIgmANFH45PwCf7AZEgKPk33yhEASVi5Kef8iLhKjXd\/moiDzI8E3298fq2pBrYqdFAI5b2qjPr5ynoLPmmdyjhG2Q17x9VN4Z5FPcqmmbxTUFJ+Ig8Yg7eeFuEU+dBdUeFSffHAJbNcJKgZFAkLbMfl1IIoV6i+\/tL+GWiA0AMoiJoWCqw\/et6koxHlioHBMDPawgkoraoJrWCjk\/LAtxLZJUD0xCZOcWJtitLPHIy6lxTdJ7AL\/+vqsk9znSeCSzpu1v7QT7h0oOxIO+OuqnIM4T+COGDfzGcZhQRP91FwDtmfzy7ET3CtxkVVpyueYJxpr0Q\/HZf0Q7RU+DyOo8IxU55pFzxvHgSwRrSSoT37\/vXls7yAJjQ46CB3NGQEMc9cEIvQpgFc\/jw62DBYKuicvbnOVKasBuV2sUEuBlb6l2+y\/rFC1jcEuiUeLeNVhtNv7AJ8ooDKGsB0WYcQo9hvSZzknjgtzMV8UJyHemvPaDtgvOOBPnfNFs9pnHA94WRJeZYsUvQ23a7HV\/KUFhYVvjfdH+Ppz4La6ZKDPCjXWNDZqBtrgscVtjaPGed1WT118OMrDh3mFCk\/Yn4iggoMIYOkaV6jOZKAFeB2JUTkPjkMkjjeH\/Jwolr5KhwvqnCA+WOEmU0iQgn0yyMJmsIeSpI2ggj0lG2k+vlF1FMaUmL0i2xwT5JIUTYFR8WN5w+BTSnI+q+J3SPqUh7AvCL7goi5kROylSCqftUirhUTwLhWVwf5HWyTuEleKgfKzwnbEMSwoMnZx7BLWhJfof\/XINeVDW0WNggpHpKf88EDoNoLaIgjPvvgiG79LhTpYMFvYanNJgtu28cE40E9Q4YHPUlThp6UHElR4spQae2\/PmaAaUU2sjAO7wIF+gnrhghY9+H9MQb1\/v\/U11F0A3Ww0cTAOnE0O9BPU9CdK3nxzVEE18p1N8llcLa5njQP9BPXKFV2hwun\/QNccn3\/wQTb2WQPd\/DEhMQ6cTQ70E9Qvv8xEz92+PchpOfzcSXoN1ch3NslncbW4njUO9BPU27cz0XOXL48jqOfODTLuWQuc+WNiZByYHgf6CSp8FvXcuUxU4edLNg1yWqHCL6BuOqYdPz3iWUwsJmeRA\/0EFY4qnPbD9c9NQcp+QtoEdWNMN42JHW\/iZxxox4H+glr6xhRUrev2X7\/KJi+N6T\/jmvW1BkPAEDAEdhQB\/U0pdgK+ISU\/4A\/bcH217wueq5qOB5WwvQwBQ8AQOEMIlAX1hx9yAfRfQ+3le\/qFARBX+IUAexkChoAhcIYQKAsqnN6nX0MFEYRH\/HV5wTjwgJW0Or14scso1tcQMAQMgZ1AoCyoYHrh5pS7caO9U\/B7VKXKFMTV\/7RK+8GspyFgCBgC00egWlBLv4IKYnjpknMff0wPn4YHUMu\/zz+n\/WlFKv+H6nSTG1zTx9QsNAQMgVcUgWpBffy4+JnU7PRdimXTNjwboOtlg1c0MOa2IWAI7B4C1YIKvkDF2SSSbfeDmN67t3sImcWGgCFgCLREoF5QoUpNn0DVVkC5H9zcOjy00\/yWAbFuhoAhsLsI1Asq+wWVJdykguunLJR17yDCUN3CjSkQZXsZAoaAIfAKIPD\/FSWFS2CjZMcAAAAASUVORK5CYII=)\n\n* If our data contains a column with unique values such as StudentID, EmployeeID, OrderID etc., we can make that specific column (with unique values) as our index column.\n\n* In this case, we can make code column or even country column as index column.","cb819093":"### Defining two new dataframes","d22b1249":"**Key Features of Pandas**\n* Fast and efficient DataFrame object with default and customized indexing.\n* Tools for loading data into in-memory data objects from different file formats.\n* Data alignment and integrated handling of missing data.\n* Reshaping and pivoting of date sets.\n* Label-based slicing, indexing and subsetting of large data sets.\n* Columns from a data structure can be deleted or inserted.\n* Group by data for aggregation and transformations.\n* High performance merging and joining of data.","7bfdb6b6":"##### Print the details from 0th, 5th and 8th rows, along with the details of indices 4th, 11th and 16th.","74a7b250":"* Matplotlib consists of several plots like line, bar, scatter, histogram etc. \n* Ticks are the values used to show specific points on the coordinate axis. It can be a number or a string. \n* Whenever we plot a graph, the axes adjust and take the default ticks.","616d2e4a":"##### Handling missing data by replacing values\n\n* Not every time we should delete the missing values, especially when the dataset is smaller or when missing values are very significant. In such as case, additional data-preparation is performed.\n\n* Depending on the dataset, it's structure and the research questions, we should decide which data preparation technique should be applied on what column or missing values.","0bdca7dd":"#####  Why 0 in last column is 0.00 while only 0 in measurement_type?\n\n **Ans.** Because last column data type is float so 0 represents as 0.00 and 2nd column data type is integer.","ac4beeb3":"Displaying range of indices using .loc and .iloc\n\nNote:\n1. In .loc, all value are included\n2. In .iloc, the upper range is excluded\n\nExecute the next codes to understand it better.","e01aa925":"##### Use .iloc to print the values from all columns from 3rd row (index number will be 1 less than the row number).","03c9a1ba":"##### selecting marks for 'Ria'.","79e42e5a":"**There are lots of more essential and handy tools are available in pandas library that we still need to explore!**","bccbc34d":"##### Fetch all details where marks in English > 70 or marks in Maths.","8439a3ed":"##### Sort the data to see which country is smallest in size.","6198cb3f":"### Using range and multiple values in .loc and .iloc\n","ebfd57d4":"##### Create a scatter plot with mpg and hp by providing xlabel and ylabel","c20fac58":"# Matplotlib library in Python\n\n* Matplotlib is a plotting library for the Python programming language. Matplotlib in Python is used as it is a robust, free and easy library for data visualization.\n\n\n* Another important library - seaborn - is use for statistical data visualization.\n","67cfb470":"##### Deleting rows and columns from a dataframe using drop() function.","d6c62abc":"**Result** : China has largest population.","b7419a26":"* A cross-tabulation (or crosstab) is a two- (or more) dimensional table that records the number (frequency) of respondents that have the specific characteristics described in the cells of the table.","989f7f5a":"* **value_counts() function** returns object containing counts of unique values. \n* The resulting object will be in descending order so that the first element is the most frequently-occurring element. \n* Excludes NA values by default.","7b5627b3":"## Mergining dataframes\n\n* How to merge multiple dataframes based on left, right and inner join.","aec382cb":"### Explore the dataframe\n\nIntial exploration should be done on any dataset to understand the variables\/columns, values, data types and the structure of the data.","02009bff":"##### Using OR operator to print details if the name is either 'Ria' OR 'David'.","231df8f7":"* Indices can be used to fetch data from a particular row.","cb8c4f65":"* We can see that the dots are concentrated around the value between 15 to 20 on the x-axis, and between 100 to 250 on the y-axis.\n\n* We can also see that the spread is wider.","d23dc2c2":"### Getting data imported to Python\n\n* Pandas library supporting loading data from various online and offline sources to Python. It can fetch data from CSV, EXCEL, TEXT or from any website (URL) or servers as well. \n\n* **pd** is an alias name for pandas.\n\n","f726f359":"### Creating new dataframe to explore the use of Lambda and changing indices.","627d1e20":"* The **info() function** is used to print a concise summary of a DataFrame. \n* This method prints information about a DataFrame including the index dtype and column dtypes,non-null values and memory usage.","7af5ba97":"## Data cleaning : Empty value treatment in dataframes","1455865d":"* Returns output of the indices without matching the value of incides entered and the value in the column.","1aa17af5":"* Here, we can not see clearly the stacked bar plot because we have selected same columns.","d69fcb01":"*  There is a difference between print() dataframe using print() and without print().\n*  Without print() function is just displayed the dataset.","196b845f":"##### Delete the record for Wakanda by using its index WK.","9f6f4a60":"# Data Manipulation & Visualization","6bfc701a":"* lambda is used to define a temporary expression without any return statement. It always contains an expression.\n* that is returned. There is no need to assign a variable with lambda.","f73d2c4b":"##### Print all records is the Student IS is either S05 or S10.","8e3ca991":"Removing the additional decimal points or setting the precision can be done on the entire dataframe.","822e11c4":"# Creating Visuals & Charts using Python","8a74928a":"### If data is in local system\/disk.\n\nIf data is on local system and we want to import it in Jupyter Notebook, then we have to use read_csv and the full-path of the file address.\n\n**Getting data from local location in a system.**\n* brics = pd.read_csv(\"D:\/P6\/brics.csv\")  \n\nThe folder names are seperated by either a forward slash (\/)or two backward slashes (\\\\) in the above code.","7790df02":"* The sorting the data does not change the data in original dataframe.\n* Order of the data has been changed with respect to the variable.\n* It is sorted by the Code which is in alphabetical order.","0bf8b88b":"##### Fetch all details where marks in English > 70 AND marks in Maths > 70.","f8369b9e":"## Transforming the dataframe","ce3ebfa8":"**Result:** South Africa is smallest country in size."}}