{"cell_type":{"10b4ce22":"code","7bba42c0":"code","a0f4afd3":"code","8c0f8b3c":"code","81dfcbbf":"code","c9bd2e77":"code","6aabb38f":"code","95b5b71d":"code","1bc03c6d":"code","13dcf13b":"code","4db9cb29":"code","1b17e093":"code","2f108593":"code","21c9aaae":"code","6b2bcf44":"code","5cb35c78":"code","2d6b169a":"code","6a134e68":"code","4a7ce3ed":"markdown","b6d4e5a5":"markdown","2bc756ed":"markdown","09ba7858":"markdown"},"source":{"10b4ce22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7bba42c0":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntrain.head()","a0f4afd3":"test.head()","8c0f8b3c":"train.info()","81dfcbbf":"train.describe()","c9bd2e77":"cols = list(train)\n\nfor i in cols:\n    print(i, ' '*(20-len(i)), train[i].isnull().sum())","6aabb38f":"train['Ticket'].head()","95b5b71d":"print(train.shape)\ncol_to_drop = ['Ticket', 'Cabin', 'Name', 'PassengerId']\ntrain = train.drop(col_to_drop, axis=1)\ntrain.shape","1bc03c6d":"train['Embarked'] = train['Embarked'].fillna('C')\ntrain['Sex'] = train['Sex'].apply(lambda x: 1 if x == 'female' else 0)\ntrain['Embarked'] = train['Embarked'].map( {'S': 0, 'Q': 1, 'C': 2}).astype(int)","13dcf13b":"def fill_ages(df):\n    null_count = df['Age'].isnull().sum()\n    avg = df['Age'].mean()\n    std = df['Age'].std()\n    random_ages = np.random.randint(avg - std, avg + std, null_count)\n    df['Age'][np.isnan(df['Age'])] = random_ages\n    df['Age'] = df['Age'].astype(int)\n    return df\n\ndef group_ages(df):\n    df.loc[df['Age'] <= 18, 'Age'] = 0\n    df.loc[(df['Age'] > 18) & (df['Age'] <= 36), 'Age'] = 1\n    df.loc[(df['Age'] > 36) & (df['Age'] <= 54), 'Age'] = 2\n    df.loc[(df['Age'] > 54) & (df['Age'] <= 72), 'Age'] = 3\n    df.loc[df['Age'] > 72, 'Age'] = 4\n    return df\n\ndef group_fares(df):\n    df.loc[df['Fare'] <= 7.91, 'Fare'] = 0\n    df.loc[(df['Fare'] > 7.91) & (df['Fare'] <= 14.454), 'Fare'] = 1\n    df.loc[(df['Fare'] > 14.454) & (df['Fare'] <= 31), 'Fare'] = 2\n    df.loc[df['Fare'] > 31, 'Fare'] = 3\n    return df\n\ntrain = group_ages(fill_ages(train))\n# train = group_fare(group_age(fill_ages(train)))","4db9cb29":"train.head()","1b17e093":"plt.figure(figsize=(14, 12))\nplt.title('Correlation of features')\ncolormap = plt.cm.RdBu_r\nsns.heatmap(train.astype(float).corr(), annot=True, cmap=colormap)","2f108593":"train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","21c9aaae":"train[['Age', 'Survived']].groupby(['Age'], as_index=False).mean().sort_values(by='Survived', ascending=False).head(10)","6b2bcf44":"train.head()","5cb35c78":"y = train['Survived']\nx = train.drop('Survived', axis=1)\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)\nprint(x_train.head())\ny_train.head()","2d6b169a":"lr = LogisticRegression(solver='lbfgs')\nlr.fit(x_train, y_train)\n\nscore = round(lr.score(x_test, y_test) * 100, 2)\nprint(score)\n\ny_pred = lr.predict(x_test)\ny_pred","6a134e68":"svc = SVC(gamma='auto')\nsvc.fit(x_train, y_train)\n\nscore = round(svc.score(x_train, y_train) * 100, 2)\nprint(score)\n\ny_pred = svc.predict(x_test)\ny_pred","4a7ce3ed":"**Talk about the columns**\n\n\n**Talk about age**","b6d4e5a5":"** Explain axis=1 **","2bc756ed":"** Talk about traning data and test data.**\n** Talk about markdowns **","09ba7858":"** ?: number of age**"}}