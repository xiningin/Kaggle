{"cell_type":{"6db6d516":"code","2a952263":"code","a35b5e3a":"code","2076ba5e":"code","47ea1fbb":"markdown"},"source":{"6db6d516":"import pandas as pd\nimport numpy as np\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntrain.rename(columns={'Country_Region':'Country','Province_State':'State','ConfirmedCases':'Confirmed'}, inplace=True)\n\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\ntest.rename(columns={'Country_Region':'Country','Province_State':'State','ConfirmedCases':'Confirmed', 'ForecastId':'Id'},inplace=True)\ntrain['Type']='train'\ntest['Type']='test'\n\ntest['Confirmed']=0\ntest['Fatalities']=0\n\nprint(train['Date'].min(),train['Date'].max())\nprint(test['Date'].min(),test['Date'].max())","2a952263":"import pandas as pd\nimport numpy as np\nimport os, gc\n\ntrain['id_x']=train['Date'].astype(str).values+'_'+train['State'].astype(str).values+'_'+train['Country'].astype(str).values+'_'+train['Type'].astype(str).values\ntest['id_x']=test['Date'].astype(str).values+'_'+test['State'].astype(str).values+'_'+test['Country'].astype(str).values+'_'+test['Type'].astype(str).values\n\nraw = pd.concat([train,test], axis=0, sort=False)\nraw['Date'] = pd.to_datetime(raw[\"Date\"])\nraw.sort_values('Date',inplace=True)\n\nraw.fillna(0, inplace=True)\nCountry_State = raw.Country+'_'+raw.State.astype(str)\nraw['Country_State_id'] = Country_State.astype('category').cat.codes\nraw['Day']=raw['Date'].astype('category').cat.codes+1\nraw.set_index('Country_State_id', inplace=True)\nraw.Day=raw.Day.astype(np.int32)\nraw.reset_index(inplace=True)\nfeatures = ['id_x','Day','Id','Country_State_id']\n\ntrain = train.merge(raw[features], on=['id_x'], how='left')\ntest = test.merge(raw[features], on=['id_x'],  how='left')\n\nprint(train.shape, test.shape)","a35b5e3a":"# import itertools\n# x = np.array([list(itertools.chain.from_iterable([y_target_c[0][i+x] \n#             for i in range(0,len(y_target_c[0])-x)])) for x in range(0,7)])\n\n# pd.DataFrame([list(itertools.chain.from_iterable([y_target_c[0][i+x] \n#             for i in range(0,len(y_target_c[0])-x)])) for x in range(0,7)]).T","2076ba5e":"import os, gc\nfrom multiprocessing.pool import ThreadPool\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\n\nos.environ['OMP_NUM_THREADS'] = '1'  \ngc.enable()\n\nfeatures = ['id_x','Day']\n\nX_train = [np.array(train[train.Country_State_id== x][features]) for x in list(train.Country_State_id.unique())]\n\nX_test = [np.array(test[test.Country_State_id== x][features]) for x in list(train.Country_State_id.unique())]\n\ny_target_c = [np.array(train[train.Country_State_id == x][['Confirmed']]) for x in list(train.Country_State_id.unique())]\n\ny_target_f = [np.array(train[train.Country_State_id == x][['Fatalities']]) for x in list(train.Country_State_id.unique())]\n\npoly = PolynomialFeatures(5)\nscale = StandardScaler()\n\nout_ = pd.DataFrame({'id_x': [], 'Confirmed': [], 'Fatalities': []})\nfrom pyearth import Earth\n\ndef fit_model(xtrain, xtest, ytrain, ytrain1, idx) -> np.array:\n        \n    X = xtrain[idx][:,1]\n    x_test = xtest[idx][:,1]\n    \n    Y = ytrain[idx]\n    Y = np.diff(Y,0)\n    \n    Y1 = ytrain1[idx]\n\n    X_transf=poly.fit_transform(X.reshape(-1,1))\n    x_test_transf=poly.transform(x_test.reshape(-1,1))\n    \n    model = Earth(smooth=True, allow_linear=False)\n    \n    model.fit(np.array(X_transf),Y)\n    conf_p = model.predict(x_test_transf)\n    conf_p = np.cumsum(conf_p,0)\n    \n    model.fit(X_transf,Y1)\n    conf_f = model.predict(x_test_transf)\n\n    res = pd.DataFrame({'id_x':xtest[idx][:,0] , 'Confirmed': conf_p, 'Fatalities': conf_f})    \n    return res\n\nwith ThreadPool(processes=4) as pool:\n    args = [(X_train, X_test, y_target_c, y_target_f, idx) for idx in test.Country_State_id.unique()]\n    out_ = pd.concat(pool.starmap(fit_model, args))\n    out_ = test[['id_x']].merge(out_, on='id_x', how='left')\n    pool.close()\n\nsub = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/submission.csv\")\nsub_new = sub[[\"ForecastId\"]]\nresult = pd.concat([out_.reset_index().Confirmed,out_.reset_index().Fatalities,sub_new],axis=1)\nresult.columns = ['ConfirmedCases', 'Fatalities', 'ForecastId']\nresult = result[['ForecastId','ConfirmedCases', 'Fatalities']]\nresult.to_csv(\"submission.csv\",index=False)\nresult.head()","47ea1fbb":"# Multivariate Adaptive Regression Splines\n"}}