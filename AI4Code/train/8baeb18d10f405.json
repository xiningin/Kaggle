{"cell_type":{"35e49a92":"code","e1354835":"code","92063920":"code","21dbaba8":"code","b887dff0":"code","be029fa5":"code","9c00ce73":"code","601b652a":"code","bdafb5f5":"code","f9b62a78":"code","215c897c":"code","212487cc":"code","5096f9c3":"code","4da78562":"code","ec68936e":"code","55906556":"code","b2a14a39":"code","b8e0aef5":"code","e77e70b3":"code","e2d833bb":"code","84a2ad49":"code","f6ae195c":"code","983ac5ab":"code","97362e2e":"code","7588ea39":"code","b9059a8b":"code","6749108c":"code","0446e6c6":"code","a8e6d4af":"code","6a489273":"code","bf199cb4":"code","33cf7f32":"code","13f8307e":"code","7a16c7c0":"code","2a7fd441":"code","29722ed5":"code","f3f8d2e8":"code","c2a240f3":"code","3146e9d7":"code","13a15005":"code","1d912ba0":"code","b2b8b1f8":"code","6ed53557":"code","d997655f":"code","45adbbf7":"code","c795de9c":"code","aeb2552e":"code","5e866bae":"code","fea3829d":"code","3c9fc20b":"code","b5c40e79":"code","b2aae78e":"code","4e33e412":"code","5aea713b":"code","ea40cd83":"code","22b52124":"code","ba2c1e5a":"code","5864ff07":"code","0e785503":"code","ffe5db3e":"code","8331d2e5":"code","b89225cc":"code","2e96ff82":"code","948fcaa8":"code","5b0ccb59":"code","8ad19561":"code","096e81eb":"code","e0cc5452":"code","44f29f5a":"markdown","abdec3d5":"markdown","f89a5c37":"markdown","5787b380":"markdown","7013aecd":"markdown","1d143cff":"markdown","f07dccc1":"markdown","21b2ec61":"markdown","b3f6c05c":"markdown","caf10b0b":"markdown","baa7d3e2":"markdown","fddd5922":"markdown","cbd69b23":"markdown","1201527f":"markdown","6bcad97b":"markdown","f3950d2a":"markdown","0674e0b6":"markdown","9af042ba":"markdown","580aae0a":"markdown","e0c63f02":"markdown","ec06d59e":"markdown","09cc9068":"markdown"},"source":{"35e49a92":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter('ignore')\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e1354835":"df = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","92063920":"df.shape","21dbaba8":"df.head()","b887dff0":"df.dtypes","be029fa5":"pd.to_numeric(df['TotalCharges'])","9c00ce73":"df.iloc[488]","601b652a":"df = df.replace('^\\s*$',np.nan, regex = True)","bdafb5f5":"df.isnull().sum()","f9b62a78":"df.shape","215c897c":"df.dropna(axis = 0 ,inplace = True)\ndf.shape #11 missing observations are removed","212487cc":"df.isnull().sum()","5096f9c3":"df['TotalCharges'] = pd.to_numeric(df['TotalCharges'])","4da78562":"df['Churn'].value_counts()","ec68936e":"df.head()","55906556":"col = ['Partner','Dependents','PhoneService','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']","b2a14a39":"col_2 = ['Partner','Dependents','PhoneService','PaperlessBilling','Churn']","b8e0aef5":"df['Partner'].value_counts()","e77e70b3":"col_3 = ['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']","e2d833bb":"df['StreamingMovies'].value_counts()","84a2ad49":"df['gender'].replace(('Male','Female'),(1,0),inplace = True)","f6ae195c":"df_2 = df[col_2]","983ac5ab":"df_2.head()","97362e2e":"for i,j in enumerate(df_2.columns):\n    df[j] = df[j].replace(('Yes','No'),(1,0))","7588ea39":"df.head()","b9059a8b":"df_3 = df[col_3]","6749108c":"for i,j in enumerate(df_3.columns):\n    df[j] = df[j].replace(('No internet service','No','Yes'),(0,1,2))","0446e6c6":"df['MultipleLines'].value_counts()","a8e6d4af":"df['MultipleLines'].replace(('No phone service','No','Yes'),(0,1,2),inplace = True)","6a489273":"df['InternetService'].value_counts()","bf199cb4":"df['InternetService'].replace(('No','DSL','Fiber optic'),(0,1,2),inplace = True)","33cf7f32":"df['Contract'].value_counts()","13f8307e":"df['Contract'].replace(('Month-to-month','One year','Two year'),(1,2,3),inplace = True)","7a16c7c0":"df['PaymentMethod'].value_counts()","2a7fd441":"del df['customerID']","29722ed5":"df.isnull().sum()","f3f8d2e8":"df.head()","c2a240f3":"df.dtypes","3146e9d7":"df_final = pd.get_dummies(df)","13a15005":"df_final.shape","1d912ba0":"df_final.columns","b2b8b1f8":"y = df_final['Churn']\nX = df_final.drop('Churn', axis = 1)","6ed53557":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_score, recall_score,f1_score,confusion_matrix","d997655f":"X_train,X_test,y_train,y_test = train_test_split(X,y, test_size =0.2, shuffle = True)","45adbbf7":"print(X_train.shape)\nprint(y_train.shape)","c795de9c":"lr = LogisticRegression().fit(X_train,y_train)\nlr_pred = lr.predict(X_test)","aeb2552e":"lr_precision = precision_score(y_test,lr_pred)\nlr_recall = recall_score(y_test,lr_pred)\nlr_f1 = f1_score(y_test,lr_pred)","5e866bae":"print('LR Precision',lr_precision)\nprint('LR recall', lr_recall)\nprint('LR F1 score',lr_f1)","fea3829d":"rf = RandomForestClassifier(random_state =42).fit(X_train,y_train)\nrf_pred = rf.predict(X_test)","3c9fc20b":"rf_precision = precision_score(y_test,rf_pred)\nrf_recall = recall_score(y_test,rf_pred)\nrf_f1 = f1_score(y_test,rf_pred)","b5c40e79":"print('RF Precision',rf_precision)\nprint('RF recall', rf_recall)\nprint('RF F1 score',rf_f1)","b2aae78e":"from sklearn.model_selection import GridSearchCV","4e33e412":"rf = RandomForestClassifier(random_state =42)","5aea713b":"rf_params = {\n    'min_samples_split':[2,3,4],\n    'min_samples_leaf':[1,2],\n    'n_estimators' : [100,150,200]\n}","ea40cd83":"GridSearchCV(rf, param_grid = rf_params,verbose = True).fit(X,y).best_params_","22b52124":"rf = RandomForestClassifier(min_samples_leaf= 2, min_samples_split=2,n_estimators=150).fit(X_train,y_train)","ba2c1e5a":"rf_pred = rf.predict(X_test)","5864ff07":"rf_precision = precision_score(y_test,rf_pred)\nrf_recall = recall_score(y_test,rf_pred)\nrf_f1 = f1_score(y_test,rf_pred)","0e785503":"print('RF Precision',rf_precision)\nprint('RF recall', rf_recall)\nprint('RF F1 score',rf_f1)","ffe5db3e":"val = rf.feature_importances_","8331d2e5":"val","b89225cc":"imp_var = []\nimp_var_val = []\nfor i,j in zip(X.columns,rf.feature_importances_):\n    if j > 0.02:\n        imp_var.append(j)\n        imp_var_val.append(i)    ","2e96ff82":"col_name = X.columns\nplt.barh(col_name,val)\nplt.xlabel('RF feature importance')\nplt.show()","948fcaa8":"y = df['Churn']\nX_new = df_final[['tenure','TotalCharges','MonthlyCharges', 'Contract']]","5b0ccb59":"X_train,X_test,y_train,y_test = train_test_split(X_new,y, test_size =0.2, shuffle = True)","8ad19561":"lr = LogisticRegression().fit(X_train,y_train)\nlr_pred = lr.predict(X_test)","096e81eb":"lr_precision = precision_score(y_test,lr_pred)\nlr_recall = recall_score(y_test,lr_pred)\nlr_f1 = f1_score(y_test,lr_pred)","e0cc5452":"print('LR Precision',lr_precision)\nprint('LR recall', lr_recall)\nprint('LR F1 score',lr_f1)","44f29f5a":"The error is because of whitespace in the 'TotalCharges' column. If there is a missing observation pandas would have filled with NaN but since there is a whitespace character the entire feature is converted to string data type.","abdec3d5":"There are no null values in the data now.","f89a5c37":"We need to do One Hot Encoding for the 'PaymentMethod' for which we will use pd.get_dummies. 'CustomerID' is not useful in predicting the target so we can remove it from the list of independent variables.","5787b380":"using the best hyperparameters for the model results in better model F1-Score","7013aecd":"ValueError: Unable to parse string \" \" at position 488. ","1d143cff":"TotalCharges is of 'Object' datatype. Looking at the data set it should be of 'float' data type","f07dccc1":"RandomForestClassifier","21b2ec61":"for all the variables in col_3 the three categories remain same 'Yes','No','No internet service'","b3f6c05c":"col_2 indicate variables with two categories and col_3 indicate variables with 3 categories","caf10b0b":"Now we are able to see 11 observations as NaN","baa7d3e2":"Using .value_counts() we can find the number of categories inside a categorical variable.","fddd5922":"This graph clearly indicates that the most important variables are\n\n1. tenure\n\n2. TotalCharges\n\n3. MonthlyCharges\n\n4. Contract\n","cbd69b23":"Replace the whitespace with 'NaN'","1201527f":"import libraries for machine learning","6bcad97b":"This shows that there is slight imbalance in the dataset but it is not very big. So moving forward with this.","f3950d2a":"GridSearchCV to find the best hyperparameters of the model","0674e0b6":"Feature selection using RandomForest","9af042ba":"Convert 'TotalCharges' to numeric data type","580aae0a":"Fiber optic networks can deliver speeds up to 1 Gpbs (1000 Mbps), whereas DSL speeds typically top out around 6 Mbps. Some domain understanding will help in encoding.","e0c63f02":"logistic regression","ec06d59e":"Since most of the observations are categorical with only two categories 'Yes', 'No'. we use a mapping function to convert them to discrete rather than using df['Colname'].replace() everytime.","09cc9068":"Using only the most important variables"}}