{"cell_type":{"970af626":"code","db0bc19a":"code","2ebdbed3":"code","6064b8fa":"code","fe593ebd":"code","31e773cc":"code","fbc84861":"markdown","1c1d26a8":"markdown","199ed278":"markdown","0e7bbf15":"markdown"},"source":{"970af626":"!pip install pyomo","db0bc19a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom pyomo.environ import * \nfrom pyomo.opt import SolverFactory, SolverStatus\nfrom pyomo.core import * \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\ndata = pd.read_csv('\/kaggle\/input\/\/santa-workshop-tour-2019\/family_data.csv', index_col='family_id')\n\n# Any results you write to the current directory are saved as output.","2ebdbed3":"#Functions for preparation of cost function. \n\ndef _build_choice_array(data, n_days):\n    choice_matrix = data.loc[:, 'choice_0': 'choice_9'].values\n    choice_array_num = np.full((data.shape[0], n_days + 1), -1)\n\n    for i, choice in enumerate(choice_matrix):\n        for d, day in enumerate(choice):\n            choice_array_num[i, day] = d\n    \n    return choice_array_num\n\ndef _precompute_penalties(choice_array_num, family_size):\n    penalties_array = np.array([\n        [\n            0,\n            50,\n            50 + 9 * n,\n            100 + 9 * n,\n            200 + 9 * n,\n            200 + 18 * n,\n            300 + 18 * n,\n            300 + 36 * n,\n            400 + 36 * n,\n            500 + 36 * n + 199 * n,\n            500 + 36 * n + 398 * n\n        ]\n        for n in range(family_size.max() + 1)\n    ])\n    \n    penalty_matrix = np.zeros(choice_array_num.shape)\n    N = family_size.shape[0]\n    for i in range(N):\n        choice = choice_array_num[i]\n        n = family_size[i]\n        \n        for j in range(penalty_matrix.shape[1]):\n            penalty_matrix[i, j] = penalties_array[n, choice[j]]\n    \n    return penalty_matrix\n\ndef _precompute_accounting(max_day_count, max_diff):\n    accounting_matrix = np.zeros((max_day_count+1, max_diff+1))\n    # Start day count at 1 in order to avoid division by 0\n    for today_count in range(1, max_day_count+1):\n        for diff in range(max_diff+1):\n            accounting_cost = (today_count - 125.0) \/ 400.0 * today_count**(0.5 + diff \/ 50.0)\n            accounting_matrix[today_count, diff] = max(0, accounting_cost)\n    \n    return accounting_matrix\n","6064b8fa":"#Model Section\n\nN_DAYS = 100\nN_OPT = 10\nN_FAMILY = 5000\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n\nchoice_matrix = data.loc[:, 'choice_0': 'choice_9'].values\nfamily_size = data.n_people.values\nchoice_array_num = _build_choice_array(data, N_DAYS)\n\nmodel = ConcreteModel(\"Santa\")\n\ndays = range(N_DAYS)\nassigned_to = range(N_OPT) \nfamily = range(N_FAMILY)\noccupancy_days = range(MIN_OCCUPANCY,MAX_OCCUPANCY+1)\n\nmodel.fx = Var(family, assigned_to, within=Binary) \nmodel.day_size = Var(days, within=NonNegativeReals, bounds=(125,300))\nmodel.day_size_var = Var(days, occupancy_days, within=Binary)\n\ndef assign_con_rule(model, i):\n    return quicksum(model.fx[i,s] for s in assigned_to) == 1.0\nmodel.assign_con = Constraint(family, rule=assign_con_rule)\n\ndef daily_loads_rule(model, j):\n    return quicksum(family_size[i]*model.fx[i,s] for i in family for s in assigned_to if j == (choice_matrix[i,s]-1)) \\\n            == model.day_size[j]\nmodel.daily_loads = Constraint(days, rule=daily_loads_rule)\n\ndef load_determine_rule(model, j):\n    return quicksum(k*model.day_size_var[j,k] for k in occupancy_days) == model.day_size[j]\nmodel.load_determine = Constraint(days, rule=load_determine_rule)\n\npenalty_matrix = _precompute_penalties(choice_array_num, family_size)\naccounting_matrix = _precompute_accounting(max_day_count=MAX_OCCUPANCY, max_diff=175)\n\ndef objective_rule(model):\n    penalty_cost = quicksum(penalty_matrix[i,choice_matrix[i][s]]*model.fx[i,s] for i in family for s in assigned_to)\n    accounting_cost = quicksum(accounting_matrix[k_1,abs(k_2-k_1)]*model.day_size_var[i,k_1]*model.day_size_var[i+1,k_2]\\\n                              for i in range(N_DAYS-1) for k_1 in occupancy_days for k_2 in occupancy_days)\n    last_day_acc_cost = quicksum(accounting_matrix[k_1,0]*model.day_size_var[99,k_1] for k_1 in occupancy_days)\n    return penalty_cost + accounting_cost + last_day_acc_cost\n#\nmodel.object = Objective(rule=objective_rule, sense=minimize)\n","fe593ebd":"#For chekinn model, it is written to lp file.\n#model.write(filename=\"santa_model.lp\",io_options={\"symbolic_solver_labels\":True})\n\n#This section will be open based on selected solver.\n#opt = SolverFactory('Solver_Name', executable=\"Executable_Path\")\n#opt_success = opt.solve(model, tee=True)\n#print(\"time\", opt_success.Solver[0])\n#fx_value = {}\n#for ib in family:\n#    for j in assigned_to:\n#        fx_value[(i,j)] = model.fx[i,j].value","31e773cc":"model = ConcreteModel(\"Santa\")\n\ndays = range(N_DAYS)\nassigned_to = range(N_OPT) \nfamily = range(N_FAMILY)\noccupancy_days = range(MIN_OCCUPANCY,MAX_OCCUPANCY+1)\n\nmodel.fx = Var(family, assigned_to, within=Binary) \nmodel.day_size = Var(days, within=NonNegativeReals, bounds=(125,300))\nmodel.day_size_diff = Var(days, within=NonNegativeReals)\nmodel.day_size_devp = Var(days, within=NonNegativeReals)\nmodel.day_size_devn = Var(days, within=NonNegativeReals)\n\ndef assign_con_rule(model, i):\n    return quicksum(model.fx[i,s] for s in assigned_to) == 1.0\nmodel.assign_con = Constraint(family, rule=assign_con_rule)\n\ndef daily_loads_rule(model, j):\n    return quicksum(family_size[i]*model.fx[i,s] for i in family for s in assigned_to if j == (choice_matrix[i,s]-1)) \\\n            == model.day_size[j]\nmodel.daily_loads = Constraint(days, rule=daily_loads_rule)\n\n#The first approach constraints\ndef load_determine_1_rule(model, j):\n    return model.day_size[j] - model.day_size[j+1] <= model.day_size_diff[j]\nmodel.load_determine_1 = Constraint(range(N_DAYS-1), rule=load_determine_1_rule)\n\ndef load_determine_2_rule(model, j):\n    return model.day_size[j+1] - model.day_size[j] <= model.day_size_diff[j]\nmodel.load_determine_2 = Constraint(range(N_DAYS-1), rule=load_determine_2_rule)\n\n#The second approach constraints\ndef load_determine_3_rule(model, j):\n    return model.day_size[j] - model.day_size_devn[j] + model.day_size_devp[j] == 210\nmodel.load_determine_3 = Constraint(days, rule=load_determine_3_rule)\n\n\npenalty_matrix = _precompute_penalties(choice_array_num, family_size)\naccounting_matrix = _precompute_accounting(max_day_count=MAX_OCCUPANCY, max_diff=175)\n\ndef objective_rule(model):\n    penalty_cost = quicksum(penalty_matrix[i,choice_matrix[i][s]]*model.fx[i,s] for i in family for s in assigned_to)\n    day_diff_ = quicksum(100*model.day_size_diff[j] for j in range(N_DAYS-1)) #Objective function part for the first approach\n    #day_diff_ = quicksum(100*model.day_size_devn[j] for j in days) + quicksum(100*model.day_size_devp[j] for j in days) #Objective function part for the second approach\n    return penalty_cost + day_diff_\n#\nmodel.object = Objective(rule=objective_rule, sense=minimize)","fbc84861":"# MINLP Model for Santa\n\n### Resources:\n1. Santa's 2019: Faster Cost Function (24\u00b5s)[https:\/\/www.kaggle.com\/xhlulu\/santa-s-2019-faster-cost-function-24-s]\n2. Santa's 2019 Starter Notebook [https:\/\/www.kaggle.com\/inversion\/santa-s-2019-starter-notebook]\n\n### Mathematical Model\n#### Mathematical model index sets: \n* i = Family (1,5000)\n* j = Days (1,100)\n* s = Choice (1,10)\n* k = Occupancy (125,300)\n\n#### Mathematical model variables: \n* $fx_{is}$: If family i is assigned to choice s, 1; ow., 0\n* $daysize_{j}$: Total number of assigned family member for day j, LB =125, UB=300  \n* $daysizevar_{jk}$: If day j occupancy is k, 1; ow., 0\n\n#### Mathematical model includes 3 constraint sets:\n1. Assignment Constraint: All families must be assigned to one of 100 days. $ \\sum_{s=1}^{10}fx_{is} = 1$   $\\forall i$\n2. Daily loads constraint(1): This constraint determines assigned number of family members to day. $ \\sum_{i,s|choice[i,s]=j} n_i*fx_{is} = daysize_j$  $\\forall j$\n3. Daily loads constraint(2): This constraint ensures that based on day occupancy, related binary variables takes 1. $ \\sum_{k=125}^{300} k*daysizevar_{jk} = daysize_j$  $\\forall j$\n\n\n\n","1c1d26a8":"We know from accounting cost function that if difference of occupation of two successor days increases, cost increases. Therefore we need balanced ocupation distribution on days. On the first approach, two successor day differences minimized; the second approach minimize deviation from 210, which is found by total family size (21003)\/ days(100). But this time we have two different cost type and model will be bi-objective.  For example if I take this weights 100 for the first approach, cost of optimal solution for this approximation is \n","199ed278":"### Model is written on Pyomo, cost functions is taken from resource 2 kernel.","0e7bbf15":"#### It is expected that model performance will not be good. It needs commercial NLP solver, powerfull server and long run time. I coudn't reach any solution with free solvers, home PC in one hour. Therefore I made some approximations. Main problem is nonlinear part of model which is accounting_cost part of cost function. I changed this part and added new variable and constraints for two approximation approach.\n\n### New model section"}}