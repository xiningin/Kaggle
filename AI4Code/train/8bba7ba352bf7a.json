{"cell_type":{"3d04b952":"code","114a7982":"code","cec3658a":"code","9be03a0c":"code","2030da41":"code","bf0c22e8":"code","9704245b":"code","04644f4e":"code","c37e5ba5":"code","aa825345":"code","222e5c0d":"code","d2acb728":"code","a19f04be":"code","ccd968e2":"markdown","49aa3ef3":"markdown","660f55d6":"markdown","923c3d19":"markdown","504ce20c":"markdown","561b3787":"markdown","8a906c57":"markdown","5101d071":"markdown","146b6c2f":"markdown","37a412fe":"markdown"},"source":{"3d04b952":"import numpy as np\nimport os\nimport cv2\nfrom PIL import Image\nimport tensorflow.keras as keras\nfrom tensorflow.keras.layers import Flatten, Conv2D, Dropout, BatchNormalization, MaxPooling2D, Dense","114a7982":"img_dir = \"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\"\nuninfected = \"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\"\nparasitized = \"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\"\nclasses = os.listdir(img_dir)\nprint(classes)","cec3658a":"SIZE = 64\nBATCH_SIZE = 32\ntrain_ds = keras.preprocessing.image_dataset_from_directory(img_dir,\n                                                #label_mode=\"binary\",\n                                                seed=42,\n                                                validation_split=0.2,\n                                                subset=\"training\",\n                                                image_size=(SIZE, SIZE),\n                                                batch_size=BATCH_SIZE)\n\nval_ds = keras.preprocessing.image_dataset_from_directory(img_dir,\n                                                #label_mode=\"binary\",\n                                                seed=42,\n                                                validation_split=0.2,\n                                                subset=\"validation\",\n                                                image_size=(SIZE, SIZE),\n                                                batch_size=BATCH_SIZE)","9be03a0c":"import random\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\ndef view_random_image(target_dir, target_class):\n    target_folder = target_dir + target_class\n\n    random_image = random.sample(os.listdir(target_folder), 1)\n\n    img = mpimg.imread(target_folder + '\/' + random_image[0])\n    plt.imshow(img)\n    plt.title(target_class)\n  \n    print(f\"Image shape: {img.shape}\")\n    return img\nuninfected_images = view_random_image(target_dir=\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/\",\n                 target_class='Uninfected')","2030da41":"parasitized_images = view_random_image(target_dir=\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/\",\n                 target_class='Parasitized')","bf0c22e8":"def plot_loss_curve(history):\n\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n\n    accuracy = history.history['accuracy']\n    val_accuracy = history.history['val_accuracy']\n\n    epochs = range(len(history.history['loss']))\n\n    # plot loss\n    plt.plot(epochs, loss, label='Training Loss')\n    plt.plot(epochs, val_loss, label='Validation Loss')\n    plt.xlabel('Epochs')\n    plt.title('Loss')\n    plt.legend()\n\n    plt.figure()\n    plt.plot(epochs, accuracy, label='Training Accuracy')\n    plt.plot(epochs, val_accuracy, label='Validation Accuracy')\n    plt.xlabel('Epochs')\n    plt.title('Accuracy')\n    plt.legend()","9704245b":"INPUT_SHAPE = (SIZE, SIZE, 3)\ninp = keras.layers.Input(shape=INPUT_SHAPE)\ndata_aug = keras.layers.experimental.preprocessing.Rescaling(1.\/255)(inp)\nconv1 = Conv2D(32, kernel_size=3, activation=\"relu\",\n              padding=\"same\")(data_aug)\npool1 = MaxPooling2D(2)(conv1)\nnorm1 = BatchNormalization(axis= -1)(pool1)\ndrop1 = Dropout(0.2)(norm1)\n\nconv2 = Conv2D(32, kernel_size=3, activation=\"relu\",\n              padding=\"same\")(drop1)\npool2 = MaxPooling2D(2)(conv2)\nnorm2 = BatchNormalization(axis= -1)(pool2)\ndrop2 = Dropout(0.2)(norm2)\n\nflat = Flatten()(drop2)\n\nhidden1 = Dense(512, activation=\"relu\")(flat)\nnorm3 = BatchNormalization(axis= -1)(hidden1)\ndrop3 = Dropout(0.2)(norm3)\n\nhidden2 = Dense(512, activation=\"relu\")(drop3)\nnorm4 = BatchNormalization(axis= -1)(hidden2)\ndrop4 = Dropout(0.2)(norm4)\n\nout = Dense(2, activation=\"sigmoid\")(drop4)\n\nmodel1 = keras.Model(inputs=inp, outputs=out)\nmodel1.compile(optimizer=\"adam\",\n             loss=\"sparse_categorical_crossentropy\",\n             metrics=[\"accuracy\"])\nprint(model1.summary())","04644f4e":"history1 = model1.fit(train_ds,\n                   epochs=10,\n                   steps_per_epoch=len(train_ds),\n                   validation_data=val_ds,\n                   validation_steps=len(val_ds))","c37e5ba5":"plot_loss_curve(history1)","aa825345":"result = model1.evaluate(val_ds)","222e5c0d":"model1.save('malaria.h5')","d2acb728":"test_image = r\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_144104_cell_163.png\"","a19f04be":"from keras.preprocessing import image\ndef load(filename):\n    img = cv2.imread(filename)\n    plt.imshow(img)\n    img = image.load_img(test_image, target_size = (SIZE, SIZE))\n    img = image.img_to_array(img)\n    img = np.expand_dims(img, axis = 0)\n    index = model1.predict(img)\n    index = index.argmax().item()\n    if index == 0:\n        return \"Parasitic\"\n    elif img == 1:\n        return \"Non-Parasitic\"\n    else :\n        return\n    \nimage = load(test_image)\nprint('The given blood cell is ',image)\n","ccd968e2":"# Malaria Blood Cell Detection","49aa3ef3":"# Saving the model","660f55d6":"**Demo picture of Parasitized**","923c3d19":"# Building CNN model","504ce20c":"# Using selected image to check the model","561b3787":"**Importing the libraries**","8a906c57":"# Accuracy of model","5101d071":"# Training model","146b6c2f":"# Plotting loss training & validation curve","37a412fe":"**Demo picture of Uninfected**"}}