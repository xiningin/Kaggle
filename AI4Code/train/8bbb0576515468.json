{"cell_type":{"a92dec1a":"code","01e0a9ca":"code","375b0e26":"code","99fc8368":"code","7b8926c8":"code","ee03e265":"code","6eab12db":"code","706d4b9b":"code","58b49e18":"code","000017b5":"code","4345c542":"code","5221a183":"code","611a6422":"code","633f40ad":"code","f6edc1ff":"code","32b925c3":"code","b758ee38":"code","df7e5a93":"code","0c85b128":"code","0d31b3cd":"code","0ea3396f":"code","03519093":"code","a85d1746":"code","436e111f":"code","f76631e1":"markdown","1dfbda05":"markdown","2a805edd":"markdown","2a1612c4":"markdown","47145db2":"markdown","24a53a67":"markdown","da7ad998":"markdown","cac6bd72":"markdown","11af2db0":"markdown","73007c15":"markdown","dc9d5537":"markdown","6514fe79":"markdown","926e9ad2":"markdown","59eaa1b1":"markdown","c2c6b4cf":"markdown","2e57dd6b":"markdown","fc386e75":"markdown","a1aa48ba":"markdown","cf4b4b85":"markdown","ebbdd607":"markdown","ee542ce0":"markdown","1a865624":"markdown","1f10d5f0":"markdown","793a30ef":"markdown","ed1373c6":"markdown","797828f4":"markdown","ce59b223":"markdown","306a19cc":"markdown","57fc1a7a":"markdown","2248df1c":"markdown","076d9967":"markdown","3e4ea0aa":"markdown","ad028e13":"markdown","d257c737":"markdown","7e7cca69":"markdown","6bb3c14b":"markdown","c33d01cb":"markdown","8f4dbf72":"markdown","724628da":"markdown","112681ee":"markdown","a465fe89":"markdown","10f78254":"markdown"},"source":{"a92dec1a":"pip install fbprophet","01e0a9ca":"from fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()","375b0e26":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('fivethirtyeight')","99fc8368":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7b8926c8":"file = '\/kaggle\/input\/air-passengers\/AirPassengers.csv'\n\ndf = pd.read_csv(file)","ee03e265":"df.head()","6eab12db":"df.rename(columns = {'#Passengers':'AirPassengers'}, inplace = True)","706d4b9b":"df.info()","58b49e18":"df['Month'] = pd.DatetimeIndex(df['Month'])\ndf.dtypes","000017b5":"df = df.rename(columns={'Month': 'ds',\n                        'AirPassengers': 'y'})\n\ndf.head()","4345c542":"ax = df.set_index('ds').plot(figsize=(12, 8))\nax.set_ylabel('Monthly Number of Airline Passengers')\nax.set_xlabel('Date')\n\nplt.show()","5221a183":"# set the uncertainty interval to 95% (the Prophet default is 80%)\nmy_model = Prophet(interval_width=0.95)","611a6422":"my_model.fit(df)","633f40ad":"future_dates = my_model.make_future_dataframe(periods=36, freq='MS')\nfuture_dates.head()","f6edc1ff":"forecast = my_model.predict(future_dates)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","32b925c3":"my_model.plot(forecast, uncertainty=True)","b758ee38":"my_model.plot_components(forecast)","df7e5a93":"fig1 = my_model.plot_components(forecast)","0c85b128":"from fbprophet.plot import add_changepoints_to_plot\nfig = my_model.plot(forecast)\na = add_changepoints_to_plot(fig.gca(), my_model, forecast)","0d31b3cd":"my_model.changepoints","0ea3396f":"pro_change= Prophet(changepoint_range=0.9)\nforecast = pro_change.fit(df).predict(future_dates)\nfig= pro_change.plot(forecast);\na = add_changepoints_to_plot(fig.gca(), pro_change, forecast)","03519093":"pro_change= Prophet(n_changepoints=20, yearly_seasonality=True)\nforecast = pro_change.fit(df).predict(future_dates)\nfig= pro_change.plot(forecast);\na = add_changepoints_to_plot(fig.gca(), pro_change, forecast)","a85d1746":"pro_change= Prophet(n_changepoints=20, yearly_seasonality=True, changepoint_prior_scale=0.08)\nforecast = pro_change.fit(df).predict(future_dates)\nfig= pro_change.plot(forecast);\na = add_changepoints_to_plot(fig.gca(), pro_change, forecast)","436e111f":"pro_change= Prophet(n_changepoints=20, yearly_seasonality=True, changepoint_prior_scale=0.001)\nforecast = pro_change.fit(df).predict(future_dates)\nfig= pro_change.plot(forecast);\na = add_changepoints_to_plot(fig.gca(), pro_change, forecast)","f76631e1":"# **8. Adding ChangePoints to Prophet** <a class=\"anchor\" id=\"8\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\n- Changepoints are the datetime points where the time series have abrupt changes in the trajectory.\n\n- By default, Prophet adds 25 changepoints to the initial 80% of the data-set.\n\n- Let\u2019s plot the vertical lines where the potential changepoints occurred.","1dfbda05":"### **Summary of dataset**\n\n\n\nNow, we will print the information about the dataset that will tell us about the columns, data type of the columns and whether the column is null or not null.","2a805edd":"# **4. Python API** <a class=\"anchor\" id=\"4\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\n- [Prophet](https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html#python-api) follows the sklearn model API. \n\n- First up, we create an instance of the Prophet class and then call its fit and predict methods.\n\n- **The input to Prophet is always a dataframe with two columns** - **ds** and **y**. \n\n- The **ds (datestamp)** column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. \n\n- The **y** column must be numeric, and represents the measurement we wish to forecast.","2a1612c4":"[Go to Top](#0)","47145db2":"### **Import data**","24a53a67":"We can see that the column names are renamed accordingly.","da7ad998":"# **10. Conclusion** <a class=\"anchor\" id=\"10\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\n- In this tutorial, we described how to use the Prophet library to perform time series forecasting in Python. \n\n- We have been using out-of-the box parameters, but Prophet enables us to specify many more arguments. \n\n- In particular, Prophet provides the functionality to bring your own knowledge about time series to the table.","cac6bd72":"# **9. Adjusting Trend** <a class=\"anchor\" id=\"9\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\n- Prophet allows us to adjust the trend in case there is an overfit or underfit. \n\n- *changepoint_prior_scale* helps adjust the strength of the trend.\n\n- Default value for *changepoint_prior_scale* is 0.05. \n\n- Decrease the value to make the trend less flexible. \n\n- Increase the value of changepoint_prior_scale to make the trend more flexible.\n\n- Increasing the *changepoint_prior_scale* to 0.08 to make the trend flexible.\n","11af2db0":"We can now see that our `Month` column is of the correct datetime type.","73007c15":"# **11. References** <a class=\"anchor\" id=\"11\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\nThe concepts and ideas in this notebook are tgaken from the following websites-\n\n- 1. https:\/\/facebook.github.io\/prophet\/\n\n- 2. https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html\n\n- 3. https:\/\/peerj.com\/preprints\/3190.pdf\n\n- 4. https:\/\/www.digitalocean.com\/community\/tutorials\/a-guide-to-time-series-forecasting-with-prophet-in-python-3\n","dc9d5537":"# **1. Introduction to Prophet** <a class=\"anchor\" id=\"1\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nThe official [Prophet](https:\/\/facebook.github.io\/prophet\/) homepage states that-\n\n   *Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.*\n\n   *Prophet is open source software released by Facebook\u2019s Core Data Science team. It is available for download on CRAN and PyPI.*\n\n\n- So, [Prophet](https:\/\/facebook.github.io\/prophet\/) is the facebooks\u2019 open source tool for making time series predictions.\n\n- [Prophet](https:\/\/facebook.github.io\/prophet\/) decomposes time series data into trend, seasonality and holiday effect.\n\n- **Trend** models non periodic changes in the time series data.\n\n- **Seasonality** is caused due to the periodic changes like daily, weekly, or yearly seasonality.\n\n- **Holiday effect** which occur on irregular schedules over a day or a period of days.\n\n- **Error terms** is what is not explained by the model.\n\n","6514fe79":"The number of changepoints can be set by using the *n_changepoints* parameter when initializing prophet.","926e9ad2":"- Decreasing the *changepoint_prior_scale* to 0.001 to make the trend less flexible.","59eaa1b1":"# **2. Advantages of Prophet** <a class=\"anchor\" id=\"2\"><\/a>\n\n[Table of Contents](#0.1) \n\n\n\n[Prophet](https:\/\/facebook.github.io\/prophet\/) has several advantages associated with it. These are given below:-\n\n- **1. Accurate and fast** - Prophet is accurate and fast. It is used in many applications across Facebook for producing reliable forecasts for planning and goal setting. \n\n\n- **2. Fully automatic** - Prophet is fully automatic. We will get a reasonable forecast on messy data with no manual effort. \n\n\n- **3. Tunable forecasts** - Prophet produces adjustable forecasts. It includes many possibilities for users to tweak and adjust forecasts. We can use human-interpretable parameters to improve the forecast by adding our domain knowledge.\n\n\n- **4. Available in R or Python** - We can implement the Prophet procedure in R or Python. \n\n\n\n- **5. Handles seasonal variations well** - Prophet accommodates seasonality with multiple periods.\n\n\n\n- **6. Robust to outliers** - It is robust to outliers. It handles outliers by removing them.\n\n\n\n- **7. Robust to missing data** - Prophet is resilient to missing data.","c2c6b4cf":"We should rename the column name `#Passenegrs` as `AirPassengers`","2e57dd6b":"- [Prophet](https:\/\/facebook.github.io\/prophet\/) also imposes the strict condition that the input columns must be named as **ds (the time column)** and **y (the metric column)**. \n\n- So, we must rename the columns in our dataframe.","fc386e75":"- A variation in values from the output presented is to be expected as Prophet relies on **Markov chain Monte Carlo (MCMC)** methods to generate its forecasts. \n\n- MCMC is a stochastic process, so values will be slightly different each time.","a1aa48ba":"Now, our dataset is prepared and we are ready to use the Prophet library to produce forecasts of our time series.","cf4b4b85":"# **7. Plotting the forecasted components** <a class=\"anchor\" id=\"7\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\n\n- We can plot the trend and seasonality, components of the forecast as follows:","ebbdd607":"So, now we will come to the end of this notebook.\n\nI hope you find this kernel useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\nThank you\n","ee542ce0":"- Prophet also provides a convenient function to quickly plot the results of our forecasts as follows:","1a865624":"- The above plot provides interesting insights. \n\n- The first plot shows that the monthly volume of airline passengers has been linearly increasing over time. \n\n- The second plot highlights the fact that the weekly count of passengers peaks towards the end of the week and on Saturday. \n\n- The third plot shows that the most traffic occurs during the holiday months of July and August.","1f10d5f0":"- Now that our Prophet model has been initialized, we can call its `fit` method with our DataFrame as input. ","793a30ef":"### **Preview dataset**","ed1373c6":"- We can change the inferred changepoint range by setting the *changepoint_range*","797828f4":"We can view the dates where the chagepoints occurred.","ce59b223":"<a class=\"anchor\" id=\"0\"><\/a>\n# **Tutorial : Time Series Forecasting with Prophet**\n\n\n\nHello friends,\n\n\nIn the previous notebooks, we have discussed [Time Series Analysis with Python](https:\/\/www.kaggle.com\/prashant111\/complete-guide-on-time-series-analysis-in-python) and [ARIMA Model for Time Series Forecasting](https:\/\/www.kaggle.com\/prashant111\/arima-model-for-time-series-forecasting). In this notebook, we will make a time series forecast using Facebook\u2019s time series model [Prophet](https:\/\/facebook.github.io\/prophet\/). First up, we will discuss [Prophet](https:\/\/facebook.github.io\/prophet\/),  its advantages and make a time series forecast with [Prophet](https:\/\/facebook.github.io\/prophet\/).\n\n\nSo, let's get started.","306a19cc":"# **5. Basic Setup** <a class=\"anchor\" id=\"5\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\n- Now wel will dive right in and see how to make time series predictions using Prophet.\n\n- We will explore the change points, how to include holidays and then add multiple regressors.\n\n- First up, we will import the required libraries and the data.","57fc1a7a":"- The DataFrame of future dates is then used as input to the predict method of our fitted model.","2248df1c":"- When working with Prophet, it is important to consider the frequency of our time series. \n\n- Because we are working with monthly data, we clearly specified the desired frequency of the timestamps (in this case, `MS` is the start of the month). \n\n- Therefore, the `make_future_dataframe` generated 36 monthly timestamps for us. \n\n- In other words, we are looking to predict future values of our time series 3 years into the future.","076d9967":"Prophet returns a large DataFrame with many interesting columns, but we subset our output to the columns most relevant to forecasting. These are:\n\n  - **ds**: the datestamp of the forecasted value\n  - **yhat**: the forecasted value of our metric (in Statistics, yhat is a notation traditionally used to represent the predicted values of a value y)\n  - **yhat_lower**: the lower bound of our forecasts\n  - **yhat_upper**: the upper bound of our forecasts","3e4ea0aa":"- We can see that the dataset contains a `Month` and `AirPassengers` column. \n\n- Their data types are `object` and `int64` respectively.\n\n- The [Prophet](https:\/\/facebook.github.io\/prophet\/) library expects as input a dataframe with one column containing the time information, and another column containing the metric that we wish to forecast. \n\n- The important thing to note is that, the `Month` column must be of the datetime type. But, we can see that it is of `object` data type. Now, because the `Month` column is not of the datetime type. So, we\u2019ll need to convert it into datetime type.","ad028e13":"### **Import libraries**","d257c737":"- In order to obtain forecasts of our time series, we must provide Prophet with a new DataFrame containing a `ds` column that holds the dates for which we want predictions. \n\n- Conveniently, we do not have to concern ourselves with manually creating this DataFrame, as Prophet provides the `make_future_dataframe` helper function.","7e7cca69":"- One other particularly strong feature of Prophet is its ability to return the components of our forecasts. \n\n- This can help reveal how daily, weekly and yearly patterns of the time series contribute to the overall forecasted values.","6bb3c14b":"<a class=\"anchor\" id=\"0.1\"><\/a>\n# **Table of Contents**\n\n\n1.\t[Introduction to Prophet](#1)\n2.\t[Advantages of Prophet](#2)\n3.\t[Installation of Prophet](#3)\n4.\t[Python API](#4)\n5.\t[Basic Setup](#5)\n6.\t[Time Series Forecasting with Prophet](#6)\n7.\t[Plotted the forecasted components](#7)\n8.\t[Adding ChangePoints to Prophet](#8)\n9.\t[Adjusting Trend](#9)\n10.\t[Conclusion](#10)\n11.\t [References](#11)\n\n","c33d01cb":"### **I hope you find this notebook useful and your <font color=\"red\"><b>UPVOTES<\/b><\/font> keep me motivated.**\n\n","8f4dbf72":"- In the code snippet above, we instructed Prophet to generate 36 datestamps in the future.","724628da":"# **3. Installation of Prophet** <a class=\"anchor\" id=\"3\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\n\n- We can install Prophet using either command prompt or Anaconda prompt using pip as follows-","112681ee":"# **6. Time Series Forecasting with Prophet** <a class=\"anchor\" id=\"6\"><\/a>\n\n\n[Table of Contents](#0.1) \n\n\n- Now, we will describe how to use the [Prophet](https:\/\/facebook.github.io\/prophet\/) library to predict future values of our time series data. \n\n- The developers of [Prophet](https:\/\/facebook.github.io\/prophet\/) have made it more intuitive for analysts and developers alike to work with time series data.\n\n- To begin, we must instantiate a new Prophet object. Prophet enables us to specify a number of arguments. For example, we can specify the desired range of our uncertainty interval by setting the `interval_width parameter`.\n","a465fe89":"- Prophet plots the observed values of our time series (the black dots), the forecasted values (blue line) and the uncertainty intervals of our forecasts (the blue shaded regions).","10f78254":"### **Visualize the data**\n\n\nNow, it is considered a good practice to visualize the data at hand. So let\u2019s plot our time series data:"}}