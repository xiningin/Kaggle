{"cell_type":{"df3d785e":"code","6ac6cf3b":"code","65472c98":"code","663d4484":"code","759b05d8":"code","a35309d2":"code","93fab57a":"code","25e690e6":"code","4152b83c":"code","81ada628":"code","f7886c1c":"code","f7777bd6":"code","04aaeedc":"code","3d781901":"code","8b9cd486":"code","ef0bfded":"code","c2ef9dbb":"code","b7dede67":"code","e07ddee9":"code","53a7661b":"code","4a0c2f9f":"code","a762f759":"code","9fd24fe0":"code","cc3ff047":"code","e08813e6":"code","e66a0eba":"code","6e075843":"code","4d8198db":"code","b797ca0e":"code","065d524c":"code","c161ba76":"code","99dc06c7":"code","ad0a4034":"code","b4c22b5e":"code","7e43626b":"code","c335a8e3":"code","993af706":"code","b6c00125":"code","d9b8ec93":"code","3f894cdb":"code","e2481117":"code","34f60ef8":"code","05a379c1":"code","b830281c":"code","9b3bfaf5":"code","06792a33":"code","2c35a043":"code","bc228507":"code","a3696a93":"code","de3a6cdf":"code","2f588a29":"code","d2361979":"code","0897a7e3":"code","e96974f0":"code","92d85f42":"code","7da92f31":"code","085d2eba":"code","a8c18e6f":"code","6e8e49df":"code","8c0c5134":"code","0dc5f5fa":"code","7c40befe":"code","938c08c9":"code","bd2625d5":"code","68b3bc49":"code","49686f1e":"code","7dcbd9d2":"code","c1a3a809":"code","feb313f5":"code","83d2fe4d":"code","dd3fcc8b":"code","ee4002d4":"code","e7062bdb":"code","8c6c8398":"code","e701e8a0":"code","05743af6":"code","56c2146a":"code","3a822787":"code","6dbfba9d":"code","a3308e06":"code","a336b3f8":"code","87c2ae5c":"code","97384855":"code","243c7639":"code","55d24b4f":"code","bb9752f7":"code","f49a452c":"code","898a1ad9":"code","05a465b3":"code","2d3472e9":"code","08c4b585":"code","b03b1d37":"code","e984088e":"code","3c9b4ee3":"code","b439965e":"code","e98f3658":"code","bb9f2f51":"code","07906475":"code","23e4fc93":"code","32f01c65":"code","740f9257":"code","dc200644":"code","e20042e8":"code","d2c3325d":"code","cbf71c05":"code","82645eef":"code","e837b1bf":"code","d31f1e23":"code","6ae16137":"markdown","58f7d07d":"markdown","5ca124e4":"markdown","5c0f04be":"markdown"},"source":{"df3d785e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ac6cf3b":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/co2-emission-by-vehicles\/CO2 Emissions_Canada.csv')\n#print(data.info)\nprint(df.shape)\nprint(df.columns)","65472c98":"df.isnull().sum()","663d4484":"import matplotlib.pyplot as plt\n\nplt.subplot(341)\nplt.scatter(df['CO2 Emissions(g\/km)'],df['Engine Size(L)'])\nplt.subplot(342)\nplt.scatter(df['CO2 Emissions(g\/km)'],df['Cylinders'])\n\nplt.subplot(344)\nplt.scatter(df['CO2 Emissions(g\/km)'],df['Fuel Type'])\nplt.subplot(345)\nplt.scatter(df['CO2 Emissions(g\/km)'],df['Fuel Consumption City (L\/100 km)'])\nplt.subplot(346)\nplt.scatter(df['CO2 Emissions(g\/km)'],df['Fuel Consumption Hwy (L\/100 km)'])\n\nplt.subplot(347)\nplt.scatter(df['CO2 Emissions(g\/km)'],df['Fuel Consumption Comb (L\/100 km)'])\nplt.subplot(348)\nplt.scatter(df['CO2 Emissions(g\/km)'],df['Fuel Consumption Comb (mpg)'])","759b05d8":"plt.scatter(df['Engine Size(L)'],df['CO2 Emissions(g\/km)'])","a35309d2":"df.describe()[['Engine Size(L)','CO2 Emissions(g\/km)']]","93fab57a":"df.isnull().sum()","25e690e6":"import matplotlib.pyplot as plt\nplt.boxplot(df['Engine Size(L)'])","4152b83c":"plt.boxplot(df['CO2 Emissions(g\/km)'])","81ada628":"df.corr()[['Engine Size(L)','CO2 Emissions(g\/km)']]","f7886c1c":"data1=df[df['Engine Size(L)']<df['Engine Size(L)'].quantile(0.975)]\ndata1=data1[data1['CO2 Emissions(g\/km)']<data1['CO2 Emissions(g\/km)'].quantile(0.98)]","f7777bd6":"plt.boxplot(data1['Engine Size(L)'])","04aaeedc":"plt.scatter(data1['Engine Size(L)'],data1['CO2 Emissions(g\/km)'])","3d781901":"plt.boxplot(data1['CO2 Emissions(g\/km)'])","8b9cd486":"\nX=data1['Engine Size(L)']\nY=data1['CO2 Emissions(g\/km)']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.8)\n#spliting data into 80% train,20% test,0% validation","ef0bfded":"from sklearn.linear_model import LinearRegression#importing LinearRegression class\n\nEngine_S = LinearRegression()#object creation\nX_train = np.array(X_train).reshape(-1,1)\nX_test = np.array(X_test).reshape(-1,1)\nEngine_S.fit(X_train, y_train)","c2ef9dbb":"E=Engine_S.coef_[0]\nE1=Engine_S.intercept_\nprint(\"E = \",E,'\\nE1 = ',E1)","b7dede67":"y_pred=(X)*E+E1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.title('Co2 Emission\/Engine Size')\nplt.scatter(X,Y)\nplt.scatter(X,y_pred,marker='s')\nplt.xlabel('Engine Size(L)')\nplt.ylabel('CO2 Emissions(g\/km)')","e07ddee9":"y_pred=(X_test)*E+E1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred,color='black')","53a7661b":"y_pred=Engine_S.predict(X_test)\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred)#for test values","4a0c2f9f":"from sklearn.metrics import mean_squared_error, mean_absolute_error\nprint('Mean absolute error :',mean_absolute_error(y_test,y_pred))#mean absolute error for orginal test data and predicted test data\nprint('Mean squared error :',np.sqrt(mean_squared_error(y_test,y_pred)))#mean squared error for orginal test data and predicted test data","a762f759":"df.columns","9fd24fe0":"plt.scatter(df['Fuel Consumption City (L\/100 km)'],df['CO2 Emissions(g\/km)'])","cc3ff047":"df.describe()[['Fuel Consumption City (L\/100 km)','CO2 Emissions(g\/km)']]","e08813e6":"import matplotlib.pyplot as plt\nplt.boxplot(df['Fuel Consumption City (L\/100 km)'])","e66a0eba":"plt.boxplot(df['CO2 Emissions(g\/km)'])","6e075843":"df.corr()[['Fuel Consumption City (L\/100 km)','CO2 Emissions(g\/km)']]","4d8198db":"data2=df[df['Fuel Consumption City (L\/100 km)']<df['Fuel Consumption City (L\/100 km)'].quantile(0.96)]\ndata2=data2[data2['CO2 Emissions(g\/km)']<data2['CO2 Emissions(g\/km)'].quantile(0.98)]","b797ca0e":"plt.boxplot(data2['Fuel Consumption City (L\/100 km)'])","065d524c":"plt.boxplot(data2['CO2 Emissions(g\/km)'])","c161ba76":"data2.shape","99dc06c7":"plt.scatter(data2['Fuel Consumption City (L\/100 km)'],data2['CO2 Emissions(g\/km)'])","ad0a4034":"X=data2['Fuel Consumption City (L\/100 km)']\nY=data2['CO2 Emissions(g\/km)']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.8)","b4c22b5e":"from sklearn.linear_model import LinearRegression#importing LinearRegression class\n\nFuel_c_City = LinearRegression()#object creation\nX_train = np.array(X_train).reshape(-1,1)\nX_test = np.array(X_test).reshape(-1,1)\nFuel_c_City.fit(X_train, y_train)#feeding inputs to carbon model","7e43626b":"F_cc=Fuel_c_City.coef_[0]\nF_cc1=Fuel_c_City.intercept_\nprint(\"Fcc = \",F_cc,'\\nFcc1 = ',F_cc1)","c335a8e3":"y_pred=(X)*F_cc+F_cc1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.title('Carbon emissions \/Fuel Consumption City (L\/100 km)')\nplt.scatter(X,Y)\nplt.scatter(X,y_pred,marker='*')\nplt.xlabel('Fuel Consumption City (L\/100 km)')\nplt.ylabel('CO2 Emissions(g\/km)')","993af706":"y_pred=(X_test)*F_cc+F_cc1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred,color='black')","b6c00125":"y_pred=Fuel_c_City.predict(X_test)\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred)","d9b8ec93":"print('Mean absolute error :',mean_absolute_error(y_test,y_pred))#mean absolute error for orginal test data and predicted test data\nprint('Mean squared error :',np.sqrt(mean_squared_error(y_test,y_pred)))#mean squared error for orginal test data and predicted test data","3f894cdb":"df.columns","e2481117":"plt.scatter(df['Fuel Consumption Hwy (L\/100 km)'],df['CO2 Emissions(g\/km)'])","34f60ef8":"df.describe()[['Fuel Consumption Hwy (L\/100 km)','CO2 Emissions(g\/km)']]","05a379c1":"import matplotlib.pyplot as plt\nplt.boxplot(df['Fuel Consumption Hwy (L\/100 km)'])","b830281c":"plt.boxplot(df['CO2 Emissions(g\/km)'])","9b3bfaf5":"df.corr()[['Fuel Consumption Hwy (L\/100 km)','CO2 Emissions(g\/km)']]","06792a33":"data3=df[df['Fuel Consumption Hwy (L\/100 km)']<df['Fuel Consumption Hwy (L\/100 km)'].quantile(0.955)]\ndata3=data3[data3['CO2 Emissions(g\/km)']<data3['CO2 Emissions(g\/km)'].quantile(0.985)]\ndata3.shape","2c35a043":"plt.boxplot(data3['Fuel Consumption Hwy (L\/100 km)'])","bc228507":"plt.boxplot(data3['CO2 Emissions(g\/km)'])","a3696a93":"data3.shape","de3a6cdf":"plt.scatter(data3['Fuel Consumption Hwy (L\/100 km)'],data3['CO2 Emissions(g\/km)'])","2f588a29":"X=data3['Fuel Consumption Hwy (L\/100 km)']\nY=data3['CO2 Emissions(g\/km)']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.8)","d2361979":"from sklearn.linear_model import LinearRegression#importing LinearRegression class\n\nFuel_c_Hwy = LinearRegression()#object creation\nX_train = np.array(X_train).reshape(-1,1)\nX_test = np.array(X_test).reshape(-1,1)\nFuel_c_Hwy.fit(X_train, y_train)#feeding inputs to Fuel_c_Hwy","0897a7e3":"F_ch=Fuel_c_Hwy.coef_[0]\nF_ch1=Fuel_c_Hwy.intercept_\nprint(\"Fch = \",F_ch,'\\nFch1 = ',F_ch1)","e96974f0":"y_pred=(X)*F_ch+F_ch1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.title('Carbon emissions \/Fuel Consumption Hwy (L\/100 km)')\nplt.scatter(X,Y)\nplt.scatter(X,y_pred,marker='*')\nplt.xlabel('Fuel Consumption Hwy (L\/100 km)')\nplt.ylabel('CO2 Emissions(g\/km)')","92d85f42":"y_pred=(X_test)*F_ch+F_ch1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred,color='black')","7da92f31":"y_pred=Fuel_c_Hwy.predict(X_test)\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred)","085d2eba":"print('Mean absolute error :',mean_absolute_error(y_test,y_pred))#mean absolute error for orginal test data and predicted test data\nprint('Mean squared error :',np.sqrt(mean_squared_error(y_test,y_pred)))#mean squared error for orginal test data and predicted test data","a8c18e6f":"df.columns","6e8e49df":"plt.scatter(df['Fuel Consumption Comb (L\/100 km)'],df['CO2 Emissions(g\/km)'])","8c0c5134":"df.describe()[['Fuel Consumption Comb (L\/100 km)','CO2 Emissions(g\/km)']]","0dc5f5fa":"\nplt.boxplot(df['Fuel Consumption Comb (L\/100 km)'])","7c40befe":"plt.boxplot(df['CO2 Emissions(g\/km)'])","938c08c9":"df.corr()[['Fuel Consumption Comb (L\/100 km)','CO2 Emissions(g\/km)']]","bd2625d5":"data4=df[df['Fuel Consumption Comb (L\/100 km)']<df['Fuel Consumption Comb (L\/100 km)'].quantile(0.96)]\n\ndata4.shape","68b3bc49":"plt.boxplot(data4['Fuel Consumption Comb (L\/100 km)'])","49686f1e":"plt.boxplot(data4['CO2 Emissions(g\/km)'])","7dcbd9d2":"plt.scatter(data4['Fuel Consumption Comb (L\/100 km)'],data4['CO2 Emissions(g\/km)'])","c1a3a809":"X=data4['Fuel Consumption Comb (L\/100 km)']\nY=data4['CO2 Emissions(g\/km)']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.8)","feb313f5":"from sklearn.linear_model import LinearRegression#importing LinearRegression class\n\nFuel_c_Comb = LinearRegression()#object creation\nX_train = np.array(X_train).reshape(-1,1)\nX_test = np.array(X_test).reshape(-1,1)\nFuel_c_Comb.fit(X_train, y_train)#feeding inputs to Fuel_c_Comb","83d2fe4d":"F_co=Fuel_c_Comb.coef_[0]\nF_co1=Fuel_c_Comb.intercept_\nprint(\"Fco = \",F_co,'\\nFco1 = ',F_co1)","dd3fcc8b":"y_pred=(X)*F_co+F_co1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.title('Carbon emissions \/Fuel Consumption Comb (L\/100 km)')\nplt.scatter(X,Y)\nplt.scatter(X,y_pred,marker='*')\nplt.xlabel('Fuel Consumption Comb (L\/100 km)')\nplt.ylabel('CO2 Emissions(g\/km)')","ee4002d4":"y_pred=(X_test)*F_co+F_co1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred,color='black')","e7062bdb":"y_pred=Fuel_c_Comb.predict(X_test)\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred)","8c6c8398":"print('Mean absolute error :',mean_absolute_error(y_test,y_pred))#mean absolute error for orginal test data and predicted test data\nprint('Mean squared error :',np.sqrt(mean_squared_error(y_test,y_pred)))#mean squared error for orginal test data and predicted test data","e701e8a0":"df.columns","05743af6":"plt.scatter(df['Fuel Consumption Comb (mpg)'],df['CO2 Emissions(g\/km)'])","56c2146a":"df.describe()[['Fuel Consumption Comb (mpg)','CO2 Emissions(g\/km)']]","3a822787":"plt.boxplot(df['Fuel Consumption Comb (mpg)'])","6dbfba9d":"plt.boxplot(df['CO2 Emissions(g\/km)'])","a3308e06":"df.corr()[['Fuel Consumption Comb (mpg)','CO2 Emissions(g\/km)']]","a336b3f8":"data5=df[df['Fuel Consumption Comb (mpg)']<df['Fuel Consumption Comb (mpg)'].quantile(0.97)]\ndata5=data5[data5['CO2 Emissions(g\/km)']<data5['CO2 Emissions(g\/km)'].quantile(0.985)]\ndata5.shape","87c2ae5c":"plt.boxplot(data5['Fuel Consumption Comb (mpg)'])","97384855":"plt.boxplot(data5['CO2 Emissions(g\/km)'])","243c7639":"plt.scatter(data5['Fuel Consumption Comb (mpg)'],data5['CO2 Emissions(g\/km)'])","55d24b4f":"X=data5['Fuel Consumption Comb (mpg)']\nY=data5['CO2 Emissions(g\/km)']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.8)","bb9752f7":"from sklearn.linear_model import LinearRegression#importing LinearRegression class\n\nFuel_c_CombM = LinearRegression()#object creation\nX_train = np.array(X_train).reshape(-1,1)\nX_test = np.array(X_test).reshape(-1,1)\nFuel_c_CombM.fit(X_train, y_train)#feeding inputs to Fuel_c_CombM","f49a452c":"F_coM=Fuel_c_CombM.coef_[0]\nF_coM1=Fuel_c_CombM.intercept_\nprint(\"Fco = \",F_co,'\\nFco1 = ',F_co1)","898a1ad9":"y_pred=(X)*F_coM+F_coM1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.title('Carbon emissions \/Fuel Consumption Comb (L\/100 km)')\nplt.scatter(X,Y)\nplt.scatter(X,y_pred,marker='*')\nplt.xlabel('Fuel Consumption Comb (L\/100 km)')\nplt.ylabel('CO2 Emissions(g\/km)')","05a465b3":"y_pred=Fuel_c_CombM.predict(X_test)\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred)","2d3472e9":"y_pred=(X_test)*F_coM+F_coM1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred,color='black')","08c4b585":"print('Mean absolute error :',mean_absolute_error(y_test,y_pred))#mean absolute error for orginal test data and predicted test data\nprint('Mean squared error :',np.sqrt(mean_squared_error(y_test,y_pred)))#mean squared error for orginal test data and predicted test data","b03b1d37":"df.columns","e984088e":"plt.scatter(df['Cylinders'],df['CO2 Emissions(g\/km)'])","3c9b4ee3":"df.describe()[['Cylinders','CO2 Emissions(g\/km)']]","b439965e":"plt.boxplot(df['Cylinders'])","e98f3658":"plt.boxplot(df['CO2 Emissions(g\/km)'])","bb9f2f51":"df.corr()[['Cylinders','CO2 Emissions(g\/km)']]","07906475":"data6=df[df['Cylinders']<df['Cylinders'].quantile(0.95)]\ndata6=data6[data6['CO2 Emissions(g\/km)']<data6['CO2 Emissions(g\/km)'].quantile(0.98)]\ndata6.shape","23e4fc93":"plt.boxplot(data6['Cylinders'])","32f01c65":"plt.boxplot(data6['CO2 Emissions(g\/km)'])","740f9257":"plt.scatter(data6['Cylinders'],data6['CO2 Emissions(g\/km)'])","dc200644":"X=data6['Cylinders']\nY=data6['CO2 Emissions(g\/km)']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.8)","e20042e8":"from sklearn.linear_model import LinearRegression#importing LinearRegression class\n\nFuel_c = LinearRegression()#object creation\nX_train = np.array(X_train).reshape(-1,1)\nX_test = np.array(X_test).reshape(-1,1)\nFuel_c.fit(X_train, y_train)#feeding inputs to Fuel_c","d2c3325d":"F_c=Fuel_c.coef_[0]\nF_c1=Fuel_c.intercept_\nprint(\"Fco = \",F_co,'\\nFco1 = ',F_co1)","cbf71c05":"y_pred=(X)*F_c+F_c1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.title('Carbon emissions \/Cylinder')\nplt.scatter(X,Y)\nplt.scatter(X,y_pred,marker='*')\nplt.xlabel('Cylinder')\nplt.ylabel('CO2 Emissions(g\/km)')","82645eef":"y_pred=Fuel_c.predict(X_test)\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred)","e837b1bf":"y_pred=(X_test)*F_c+F_c1#using values of slope and intercept\n#print(y_pred.head(5))\nplt.scatter(X,Y)\nplt.scatter(X_test,y_pred,color='black')","d31f1e23":"print('Mean absolute error :',mean_absolute_error(y_test,y_pred))#mean absolute error for orginal test data and predicted test data\nprint('Mean squared error :',np.sqrt(mean_squared_error(y_test,y_pred)))#mean squared error for orginal test data and predicted test data","6ae16137":"****Variable as Fuel Consumption Comb (L\/100 km)","58f7d07d":"****Variable as Fuel Consumption City","5ca124e4":"****Variable as Fuel Consumption Hwy (L\/100 km)","5c0f04be":"****Variable as Cylinder\n"}}