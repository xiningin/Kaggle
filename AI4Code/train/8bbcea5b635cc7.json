{"cell_type":{"cac1be9e":"code","e27a8804":"code","f7a71949":"code","85d0bd67":"code","69ea2923":"code","481cf4dc":"code","c0d54f86":"code","5eee24b4":"code","c31d721a":"code","ae23a39f":"code","0d9dbb93":"code","b3fcb4ca":"code","fdae58e8":"code","58abad86":"code","99893fc2":"code","07ce18cf":"code","e0d844bd":"code","d82c4119":"code","c2736db2":"code","6c37dd44":"code","13de89ab":"code","ff55c511":"markdown","384702c0":"markdown","984f27fe":"markdown","ca5f8691":"markdown","f1528bad":"markdown","ba9f620e":"markdown","745764d3":"markdown","131896bb":"markdown","8419d2c4":"markdown","41dde748":"markdown","357a3636":"markdown","1b514711":"markdown","b6fcd5e5":"markdown","1d985905":"markdown"},"source":{"cac1be9e":"import os\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom PIL import Image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator \nfrom tensorflow.keras.utils import to_categorical, plot_model\nfrom tensorflow.keras import models, layers, regularizers\nimport cv2\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nfrom collections import Counter","e27a8804":"train_path='..\/input\/chest-xray-pneumonia\/chest_xray\/train' \ntest_path='..\/input\/chest-xray-pneumonia\/chest_xray\/test'\nval_path='..\/input\/chest-xray-pneumonia\/chest_xray\/val' ","f7a71949":"def plot_images(img_dir, top=10):\n    all_img_dirs = os.listdir(img_dir)\n    img_files = [os.path.join(img_dir, file) for file in all_img_dirs][:5]\n    plt.figure(figsize=(10, 10))  \n    for idx, img_path in enumerate(img_files):\n        plt.subplot(5, 5, idx+1)\n        img = plt.imread(img_path)\n        plt.tight_layout()        \n        plt.axis('off')\n        plt.imshow(img, cmap='gray') ","85d0bd67":"def plot_images(img_dir, top=10):\n    all_img_dirs = os.listdir(img_dir)\n    img_files = [os.path.join(img_dir, file) for file in all_img_dirs][:5]\n    plt.figure(figsize=(10, 10))  \n    for idx, img_path in enumerate(img_files):\n        plt.subplot(5, 5, idx+1)\n        img = plt.imread(img_path)\n        plt.tight_layout()        \n        plt.axis('off')\n        plt.imshow(img, cmap='gray') ","69ea2923":"plot_images(train_path+'\/NORMAL')","481cf4dc":"plot_images(train_path+'\/PNEUMONIA')","c0d54f86":"def plot_bar_chart_diagram(path_data):\n  dic={}\n  for emotion in  os.listdir(path_data):\n    dem=0\n    for x in os.listdir(path_data+\"\/\"+emotion):\n      dem+=1\n    dic[emotion]=dem\n  print(dic)\n  barlist=plt.bar(range(len(dic)), list(dic.values()),tick_label=list(dic.keys()))\n#set color\n  plt.show()","5eee24b4":"plot_bar_chart_diagram(train_path)","c31d721a":"plot_bar_chart_diagram(test_path)","ae23a39f":"batch_size = 32\ntarget_size = (116,82)\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255.0,\n                                   validation_split=0.3,\n                                   zoom_range=0.8,\n                                  horizontal_flip=True,\n                \n                                  )\ntest_datagen=ImageDataGenerator(rescale = 1.\/255.0)\n\ntrain_generator = train_datagen.flow_from_directory(\n        train_path,\n        target_size=target_size,\n        batch_size=batch_size,\n        subset=\"training\",\n        class_mode='binary')\n\nval_generator = train_datagen.flow_from_directory(\n        train_path,\n        target_size=target_size,\n        batch_size=batch_size,\n        subset=\"validation\",\n        class_mode='binary')\ntest_generator=test_datagen.flow_from_directory(\n        test_path,\n        target_size=target_size,\n        class_mode='binary',\n        batch_size=batch_size,\n        shuffle=False)","0d9dbb93":"input_shape = (116,82,3) # img_rows, img_colums, color_channels","b3fcb4ca":"# Build Model\nmodel = models.Sequential()\n\nmodel.add(layers.Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape))\nmodel.add(layers.Conv2D(64, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\nmodel.add(layers.Dropout(0.25))\n\nmodel.add(layers.Conv2D(128, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(layers.Conv2D(128, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\nmodel.add(layers.Dropout(0.25))\n\nmodel.add(layers.Conv2D(256, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(layers.Conv2D(256, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\nmodel.add(layers.Dropout(0.25))\n\nmodel.add(layers.Conv2D(512, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(layers.Conv2D(512, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\nmodel.add(layers.Dropout(0.25))\n\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(1024, activation='relu'))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.summary()","fdae58e8":"# Compile Model\nplot_model(model, to_file='model_1.png', show_shapes=True, show_layer_names=True)","58abad86":"# Compile Model\nmodel.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam( learning_rate=0.0001), metrics=['accuracy'],) ","99893fc2":"earlystop =tf.keras.callbacks.EarlyStopping(monitor='val_loss', \n                          min_delta=0, \n                          patience=15, \n                          verbose=1, \n                          restore_best_weights=True)\n                        \nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', \n                              factor=0.5, \n                              patience=6, \n                              verbose=1, \n                              min_delta=0.0001)\n# checkpoint=tf.keras.callbacks.ModelCheckpoint(\n#      checkpoint_path, verbose=1, save_weights_only=True,\n#     period=5\n# )\nweight_for_0 = (1.0 \/ 1341)*(5216\/2.0)\nweight_for_1 = (1.0 \/ 3875)*(5216\/2.0)\nprint(weight_for_0,weight_for_1)\nclass_weight = {0: weight_for_0, 1: weight_for_1}\ncallback=[earlystop,reduce_lr]\nhistory = model.fit(train_generator, epochs=100 ,verbose=1, validation_data=val_generator,callbacks=callback,class_weight=class_weight,)","07ce18cf":"models.save_model(model ,'.\/Diagnose_Pneumoinia.h5') ","e0d844bd":"score = model.evaluate(val_generator) \nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","d82c4119":"score = model.evaluate(train_generator) \nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","c2736db2":"score = model.evaluate(test_generator) \nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","6c37dd44":"# Show Train History\nkeys=history.history.keys()\nprint(keys)\n\ndef show_train_history(hisData,train,test): \n    plt.plot(hisData.history[train])\n    plt.plot(hisData.history[test])\n    plt.title('Training History')\n    plt.ylabel(train)\n    plt.xlabel('Epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()\n\nshow_train_history(history, 'loss', 'val_loss')\nshow_train_history(history, 'accuracy', 'val_accuracy')","13de89ab":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score,ConfusionMatrixDisplay\ny_pred = np.round(model.predict(test_generator))\ny_true = test_generator.classes\ny_labels = list(test_generator.class_indices.keys())\ndisplay(ConfusionMatrixDisplay(confusion_matrix(y_true, y_pred), display_labels=['Normal', 'Pneumonia']).plot())\nprint(classification_report(y_true, y_pred, target_names=y_labels))","ff55c511":"## Normal Label ","384702c0":"## Function Plot Image","984f27fe":"\n<p style=\"background-color:#252629;font-family:avenir next;color:#F1F3F4;font-size:200%;text-align:center;border-radius:25px 25px;\">Plot Model<\/p>","ca5f8691":"### Data Training Diagram","f1528bad":"## Training Model ","ba9f620e":"### Data Testing Diagram ","745764d3":"## Evaluate Model ","131896bb":"## PLot Bar chart Diagram \"Counter Label Data\"","8419d2c4":"## Build Model CNN","41dde748":"# Data Generator","357a3636":"## Pneumonia Lable","1b514711":"# PLOT DATA","b6fcd5e5":"## Compile Model","1d985905":"# Training Model By CNN"}}