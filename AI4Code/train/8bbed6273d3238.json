{"cell_type":{"ee1a11f1":"code","42b7b0c9":"code","a2e1eb40":"code","2877420c":"code","84744644":"code","d388af05":"code","8dcc07bb":"code","d164a8b2":"code","3891d406":"code","642bf60d":"code","85e1e600":"code","5997a128":"code","fdba8d27":"code","237df5c2":"code","bf371ece":"code","9c81af0f":"code","87cc8cab":"code","d52b3a29":"code","40267007":"code","65faf30e":"code","ef3bb916":"code","44ff7775":"code","f54475d1":"code","8cc87a88":"code","6466f0e9":"code","15ef7d5c":"code","28e37d1f":"code","3a1b09df":"markdown","3fd49380":"markdown","85760d6a":"markdown","2b8edc72":"markdown","3b16eb83":"markdown","31451a55":"markdown","f5228cad":"markdown","4f02bfa1":"markdown","06401be5":"markdown","13597213":"markdown","b5b95270":"markdown","40b38650":"markdown","b0227a02":"markdown","06a06f32":"markdown","93c28c69":"markdown"},"source":{"ee1a11f1":"DATASET_DIR = '..\/input\/severstal-steel-defect-detection\/'\nTEST_SIZE = 0.3\nRANDOM_STATE = 123\n\nNUM_TRAIN_SAMPLES = 20 # The number of train samples used for visualization\nNUM_VAL_SAMPLES = 20 # The number of val samples used for visualization\nCOLORS = ['b', 'g', 'r', 'm'] # Color of each class","42b7b0c9":"import pandas as pd\nimport os\nimport cv2\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\n\nfrom shutil import copyfile\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm_notebook","a2e1eb40":"df = pd.read_csv(os.path.join(DATASET_DIR, 'train.csv'))","2877420c":"df.head()","84744644":"legacy_df = pd.DataFrame(columns=['ImageId_ClassId', 'EncodedPixels'])\n\nfor img_id, img_df in tqdm_notebook(df.groupby('ImageId')):\n    for i in range(1, 5):\n        avail_classes = list(img_df.ClassId)\n\n        row = dict()\n        row['ImageId_ClassId'] = img_id + '_' + str(i)\n\n        if i in avail_classes:\n            row['EncodedPixels'] = img_df.loc[img_df.ClassId == i].EncodedPixels.iloc[0]\n        else:\n            row['EncodedPixels'] = np.nan\n        \n        legacy_df = legacy_df.append(row, ignore_index=True)","d388af05":"legacy_df.head()","8dcc07bb":"df = legacy_df","d164a8b2":"df['Image'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[0])\ndf['HavingDefection'] = df['EncodedPixels'].map(lambda x: 0 if x is np.nan else 1)","3891d406":"image_col = np.array(df['Image'])\nimage_files = image_col[::4]\nall_labels = np.array(df['HavingDefection']).reshape(-1, 4)\n\nnum_img_class_1 = np.sum(all_labels[:, 0])\nnum_img_class_2 = np.sum(all_labels[:, 1])\nnum_img_class_3 = np.sum(all_labels[:, 2])\nnum_img_class_4 = np.sum(all_labels[:, 3])\nprint('Class 1: {} images'.format(num_img_class_1))\nprint('Class 2: {} images'.format(num_img_class_2))\nprint('Class 3: {} images'.format(num_img_class_3))\nprint('Class 4: {} images'.format(num_img_class_4))","642bf60d":"def plot_figures(\n    sizes,\n    pie_title,\n    start_angle,\n    bar_title,\n    bar_ylabel,\n    labels=('Class 1', 'Class 2', 'Class 3', 'Class 4'),\n    colors=None,\n    explode=(0, 0, 0, 0.1),\n):\n    fig, axes = plt.subplots(1, 2, figsize=(18, 6))\n\n    y_pos = np.arange(len(labels))\n    barlist = axes[0].bar(y_pos, sizes, align='center')\n    axes[0].set_xticks(y_pos, labels)\n    axes[0].set_ylabel(bar_ylabel)\n    axes[0].set_title(bar_title)\n    if colors is not None:\n        for idx, item in enumerate(barlist):\n            item.set_color(colors[idx])\n\n    def autolabel(rects):\n        \"\"\"\n        Attach a text label above each bar displaying its height\n        \"\"\"\n        for rect in rects:\n            height = rect.get_height()\n            axes[0].text(\n                rect.get_x() + rect.get_width()\/2., height,\n                '%d' % int(height),\n                ha='center', va='bottom', fontweight='bold'\n            )\n\n    autolabel(barlist)\n    \n    pielist = axes[1].pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=start_angle, counterclock=False)\n    axes[1].axis('equal')\n    axes[1].set_title(pie_title)\n    if colors is not None:\n        for idx, item in enumerate(pielist[0]):\n            item.set_color(colors[idx])\n\n    plt.show()","85e1e600":"print('[THE WHOLE DATASET]')\n\nsum_each_class = np.sum(all_labels, axis=0)\nplot_figures(\n    sum_each_class,\n    pie_title='The percentage of each class',\n    start_angle=90,\n    bar_title='The number of images for each class',\n    bar_ylabel='Images',\n    colors=COLORS,\n    explode=(0, 0, 0, 0.1)\n)\n\nsum_each_sample = np.sum(all_labels, axis=1)\nunique, counts = np.unique(sum_each_sample, return_counts=True)\n\nplot_figures(\n    counts,\n    pie_title='The percentage of the number of classes appears in an image',\n    start_angle=120,\n    bar_title='The number of classes appears in an image',\n    bar_ylabel='Images',\n    labels=list(unique),\n    explode=np.zeros(len(unique))\n)","5997a128":"annotations = np.array(df['EncodedPixels']).reshape(-1, 4)","fdba8d27":"X_train, X_val, y_train, y_val = train_test_split(image_files, annotations, test_size=TEST_SIZE, random_state=RANDOM_STATE)","237df5c2":"print('X_train:', X_train.shape)\nprint('y_train:', y_train.shape)\nprint('X_val:', X_val.shape)\nprint('y_val', y_val.shape)","bf371ece":"print('[TRAINING SET]')\n\ntmp = y_train.reshape(-1)\ntmp = list(map(lambda x: 0 if x is np.nan else 1, tmp))\ntrain_labels = np.array(tmp).reshape(-1, 4)\n\nsum_each_class = np.sum(train_labels, axis=0)\nplot_figures(\n    sum_each_class,\n    pie_title='The percentage of each class',\n    start_angle=90,\n    bar_title='The number of images for each class',\n    bar_ylabel='Images',\n    colors=COLORS,\n    explode=(0, 0, 0, 0.1)\n)\n\n\nsum_each_sample = np.sum(train_labels, axis=1)\nunique, counts = np.unique(sum_each_sample, return_counts=True)\n\nplot_figures(\n    counts,\n    pie_title='The percentage of the number of classes appears in an image',\n    start_angle=120,\n    bar_title='The number of classes appears in an image',\n    bar_ylabel='Images',\n    labels=list(unique),\n    explode=np.zeros(len(unique))\n)","9c81af0f":"print('[VALIDATION SET]')\n\ntmp = y_val.reshape(-1)\ntmp = list(map(lambda x: 0 if x is np.nan else 1, tmp))\nval_labels = np.array(tmp).reshape(-1, 4)\n\nsum_each_class = np.sum(val_labels, axis=0)\nplot_figures(\n    sum_each_class,\n    pie_title='The percentage of each class',\n    start_angle=90,\n    bar_title='The number of images for each class',\n    bar_ylabel='Images',\n    colors=COLORS,\n    explode=(0, 0, 0, 0.1)\n)\n\n\nsum_each_sample = np.sum(val_labels, axis=1)\nunique, counts = np.unique(sum_each_sample, return_counts=True)\n\nplot_figures(\n    counts,\n    pie_title='The percentage of the number of classes appears in an image',\n    start_angle=120,\n    bar_title='The number of classes appears in an image',\n    bar_ylabel='Images',\n    labels=list(unique),\n    explode=np.zeros(len(unique))\n)","87cc8cab":"def rle2mask(mask_rle, shape=(1600,256)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T","d52b3a29":"def show_samples(samples):\n    for sample in samples:\n        fig, ax = plt.subplots(figsize=(16, 10))\n        img_path = os.path.join(DATASET_DIR, 'train_images', sample[0])\n        img = cv2.imread(img_path)\n\n        patches = []\n        for idx, rle in enumerate(sample[1]):\n            if rle is not np.nan:\n                mask = rle2mask(rle)\n                contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n                for contour in contours:\n                    poly_patch = Polygon(contour.reshape(-1, 2), closed=True, linewidth=1, edgecolor=COLORS[idx], facecolor=COLORS[idx], fill=True)\n                    patches.append(poly_patch)\n        p = PatchCollection(patches, match_original=True, cmap=matplotlib.cm.jet, alpha=0.3)\n\n        ax.imshow(img\/255)\n        ax.set_title(sample[0])\n        ax.add_collection(p)\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        plt.show()","40267007":"train_pairs = np.array(list(zip(X_train, y_train)))\ntrain_samples = train_pairs[np.random.choice(train_pairs.shape[0], NUM_TRAIN_SAMPLES, replace=False), :]\n\nshow_samples(train_samples)","65faf30e":"val_pairs = np.array(list(zip(X_val, y_val)))\nval_samples = val_pairs[np.random.choice(val_pairs.shape[0], NUM_VAL_SAMPLES, replace=False), :]\n\nshow_samples(val_samples)","ef3bb916":"!mkdir train_images\n!mkdir val_images","44ff7775":"for image_file in tqdm_notebook(X_train):\n    src = os.path.join(DATASET_DIR, 'train_images', image_file)\n    dst = os.path.join('.\/train_images', image_file)\n    copyfile(src, dst)\n\nfor image_file in tqdm_notebook(X_val):\n    src = os.path.join(DATASET_DIR, 'train_images', image_file)\n    dst = os.path.join('.\/val_images', image_file)\n    copyfile(src, dst)","f54475d1":"!apt install zip","8cc87a88":"!zip -r -m -1 -q train_images.zip .\/train_images\n!zip -r -m -1 -q val_images.zip .\/val_images","6466f0e9":"y_train = y_train.reshape(-1)\ny_val = y_val.reshape(-1)","15ef7d5c":"X_train = np.repeat(X_train, 4)\nX_val = np.repeat(X_val, 4)\n\nX_train = X_train.reshape(-1, 4)\nX_val = X_val.reshape(-1, 4)\n\nindices = np.array(['_1', '_2', '_3', '_4'])\n\nX_train += indices\nX_val += indices\n\nX_train = X_train.reshape(-1)\nX_val = X_val.reshape(-1)","28e37d1f":"train_set = {\n    'ImageId_ClassId': X_train,\n    'EncodedPixels': y_train\n}\n\nval_set = {\n    'ImageId_ClassId': X_val,\n    'EncodedPixels': y_val\n}\n\ntrain_df = pd.DataFrame(train_set)\nval_df = pd.DataFrame(val_set)\n\ntrain_df.to_csv('.\/train.csv', index=False)\nval_df.to_csv('.\/val.csv', index=False)","3a1b09df":"<a id=\"visualize_some_images_and_corresponding_labels\"><\/a>\n# Visualize some images and corresponding labels\n[Back to Table of Contents](#toc)","3fd49380":"<a id=\"save_annotations\"><\/a>\n# Save annotations\n[Back to Table of Contents](#toc)","85760d6a":"##### Convert training data-frame to the legacy version","2b8edc72":"<a id=\"split_dataset_into_training_and_validation_sets\"><\/a>\n# Split dataset into training and validation sets\n[Back to Table of Contents](#toc)","3b16eb83":"<a id=\"configure_parameters\"><\/a>\n# Configure parameters\n[Back to Table of Contents](#toc)","31451a55":"<a id=\"copy_images_into_right_folders\"><\/a>\n# Copy images into right folders\n[Back to Table of Contents](#toc)","f5228cad":"<a id=\"zip_training_and_validation_sets\"><\/a>\n# Zip training and validation sets\n[Back to Table of Contents](#toc)","4f02bfa1":"<a id=\"get_encoded_pixels_of_each_class_for_each_image\"><\/a>\n# Get encoded pixels of each class for each image\n[Back to Table of Contents](#toc)","06401be5":"<a id=\"import_modules\"><\/a>\n# Import modules\n[Back to Table of Contents](#toc)","13597213":"##### Continue the preprocessing process","b5b95270":"<a id=\"toc\"><\/a>\n# Table of Contents\n1. [Configure parameters](#configure_parameters)\n1. [Import modules](#import_modules)\n1. [Get annotations](#get_annotations)\n1. [Draw some charts for input dataset](#draw_some_charts_for_input_dataset)\n1. [Get encoded pixels of each class for each image](#get_encoded_pixels_of_each_class_for_each_image)\n1. [Split dataset into training and validation sets](#split_dataset_into_training_and_validation_sets)\n1. [Draw some charts for training and validation sets](#draw_some_charts_for_training_and_validation_sets)\n1. [Visualize some images and corresponding labels](#visualize_some_images_and_corresponding_labels)\n1. [Copy images into right folders](#copy_images_into_right_folders)\n1. [Zip training and validation sets](#zip_training_and_validation_sets)\n1. [Post process annotations](#post_process_annotations)\n1. [Save annotations](#save_annotations)","40b38650":"<a id=\"post_process_annotations\"><\/a>\n# Post process annotations\n[Back to Table of Contents](#toc)","b0227a02":"<a id=\"get_annotations\"><\/a>\n# Get annotations\n[Back to Table of Contents](#toc)","06a06f32":"<a id=\"draw_some_charts_for_training_and_validation_sets\"><\/a>\n# Draw some charts for training and validation sets\n[Back to Table of Contents](#toc)","93c28c69":"<a id=\"draw_some_charts_for_input_dataset\"><\/a>\n# Draw some charts for input dataset\n[Back to Table of Contents](#toc)"}}