{"cell_type":{"5c5c5fc1":"code","752af5f6":"code","f306535f":"code","338255ad":"code","11a1ab8d":"code","b4097448":"code","8e2cb8a9":"code","732c38c8":"code","3ff93a04":"code","0fa121d1":"code","e05a3dfa":"code","598e4b61":"code","9a81febb":"code","94e503e4":"code","7d6db570":"markdown"},"source":{"5c5c5fc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","752af5f6":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","f306535f":"print(os.listdir('..\/input'))\n","338255ad":"df = pd.read_csv(\"..\/input\/stock-symbol\/stock_symbol.csv\")","11a1ab8d":"!pip install yfinance","b4097448":"df","8e2cb8a9":"import yfinance as yf\n","732c38c8":"msft.info","3ff93a04":"all_stocks_past_1_mon = {}","0fa121d1":"for index, row in df.iterrows():\n    print(row['stock symbol'])\n    cur_stock_ticker = yf.Ticker(row['stock symbol'])\n    hist = cur_stock_ticker.history(period=\"1mo\")\n    all_stocks_past_1_mon[row['stock symbol']] = hist","e05a3dfa":"WKHS = all_stocks_past_1_mon['WKHS']","598e4b61":"WKHS","9a81febb":"plt.figure(figsize=(10,10))\nlegs = []\nfor cur_stock_symbol in all_stocks_past_1_mon:\n    cur_stock = all_stocks_past_1_mon[cur_stock_symbol]\n#     cur_stock['perc'] = cur_stock['Close']\n    is_first = True\n    prev_row = None\n    cur_perc = []\n    \n    for index, row in cur_stock.iterrows():\n        if is_first:\n            is_first = False\n            row['perc'] = 0\n            cur_perc.append(0)\n            print(row['Close'])\n            prev_row = row\n        else:\n            cur_perc.append(row['Close'] \/ prev_row['Close'] - 1)\n            prev_row = row\n#         print(index)\n#     plt.plot(cur_stock.index, cur_stock['perc'])\n#     legs.append(cur_stock_symbol)\n    line_up = plt.plot(cur_stock.index, cur_perc, label=cur_stock_symbol)\n    legs.append(line_up)\n# plt.legend(handles=legs)\n    \n#     break\n","94e503e4":"WKHS.index['2020-10-21']","7d6db570":"![](http:\/\/)msft = yf.Ticker(\"MSFT\")\n"}}