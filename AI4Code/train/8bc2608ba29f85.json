{"cell_type":{"a1f454d8":"code","17ee729f":"code","768cd843":"code","bc988814":"code","03f77bb8":"code","5421cfe8":"code","1bfe994a":"code","319beb89":"code","6b9e4e2f":"code","39ff46bb":"code","21b23d28":"code","a0286d5f":"markdown","e1200fdf":"markdown","b0b645f9":"markdown","4aeb9a21":"markdown","6f1d09c6":"markdown"},"source":{"a1f454d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","17ee729f":"N = 100 # timeline start at N confirmed cases\ncountries = ['Israel', 'Czech Republic']\n# countries = ['Israel', 'France', 'Italy', 'Germany', 'Czech Republic', 'Norway', 'Iceland', 'Sweden', 'Taiwan','Singapore', 'Hong Kong', 'Spain', 'Russia', 'United Kingdom', 'UK', 'South Korea' ] ## Countries in the analysis\n# countries = ['Israel', 'France', 'Italy', 'Germany', 'Czech Republic',  'Spain', 'United Kingdom', 'UK' ] ## Countries in the analysis\n# countries = ['Israel', 'France', 'Italy', 'Germany', 'Spain', 'Czech Republic'] ## Countries in the analysis","768cd843":"df = pd.read_csv(r'\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', header=0, names=['SNo', 'Date', 'Province', 'Country', 'Update', 'Confirmed', 'Deaths', 'Recovered'])\ndf = df.loc[df['Country'].isin(countries)]\ndf = df.groupby(['Country', 'Date']).sum()\ndf.head(10)","bc988814":"dfm = df\ndfm['New'] = dfm.groupby(level='Country').diff()['Confirmed']\ndfm = dfm.reset_index()\ndfm['Date'] = dfm['Date'].apply(pd.Timestamp)\ndfm = dfm.loc[dfm['Date'] >= pd.Timestamp('03\/09\/2020')]\ndfm['Ratio'] = dfm['New'] \/ dfm['Confirmed'].shift(1)\ndfm = dfm.loc[dfm['Date'] >= pd.Timestamp('03\/10\/2020')]\n\ndfm","03f77bb8":"fig = px.bar(dfm, x='Date', y='Ratio', color='Country', barmode='group', title='New cases ratio by date')\nfig.show()","5421cfe8":"dfd = df.loc[df['Confirmed'] >= N].reset_index('Date', drop=True)\ndfd = dfd.set_index(dfd.groupby(level=0).cumcount().rename('Day'), append=True)#.reset_index() # date_of_N_cases\n# dfd['New'] = dfd.groupby(level='Country').diff()['Confirmed']\ndfd = dfd.reset_index()\ndfd['Ratio'] = dfd['New'] \/ dfd['Confirmed'].shift(1)\ndfd['Ratio_ma'] = dfd.groupby('Country').apply(lambda x: x.rolling(window=7).mean())['Ratio']\ndfd['Ratio_ma_diff'] = dfd['Ratio_ma'].diff()\ndfd","1bfe994a":"fig = px.line(dfd, x='Day', y='Ratio_ma', color='Country', title='New cases ratio by day since %d cases'%N)\nfig.show()","319beb89":"dfn = df.loc[df['Confirmed'] >= N].reset_index('Date', drop=True)\ndfn = dfn.set_index(dfn.groupby(level=0).cumcount().rename('Day'), append=True)#.reset_index() # date_of_N_cases\npd.set_option('display.max_rows', dfn.shape[0]+1)\ndfn.head()","6b9e4e2f":"dfn['Confirmed_m'] = dfn.groupby(level='Country').apply(lambda x: x.rolling(window=4).mean())['Confirmed']\ndfn['New'] = dfn.groupby(level='Country').diff()['Confirmed']\ndfn['New_m'] = dfn.groupby(level='Country').apply(lambda x: x.rolling(window=4).mean())['New']\ndfn.head(10)","39ff46bb":"fig = go.Figure()\nfor country in countries:\n    x = dfn.reset_index().loc[dfn.reset_index()['Country'] == country]['Confirmed_m']\n    y = dfn.reset_index().loc[dfn.reset_index()['Country'] == country]['New_m']\n    fig.add_trace(go.Scatter(x=x, y=y, name=country))\n    fig.update_layout(xaxis_type=\"log\", yaxis_type=\"log\")\nfig.update_layout(\n    title=\"New cases vs. Total cases\",\n    xaxis_title=\"Total cases\",\n    yaxis_title=\"New cases\")\nfig.show()","21b23d28":"fig = go.Figure()\nfor country in countries:\n    x = dfn.reset_index().loc[dfn.reset_index()['Country'] == country]['Day']\n    y = dfn.reset_index().loc[dfn.reset_index()['Country'] == country]['New_m']\n    fig.add_trace(go.Scatter(x=x, y=y, name=country))\n    fig.update_layout(yaxis_type=\"log\")\nfig.update_layout(\n    title=\"New cases vs. Days\",\n    xaxis_title=\"Days since %d cases\"%N,\n    yaxis_title=\"New cases\")\nfig.show()","a0286d5f":"# Reading data","e1200fdf":"countries in the analysis","b0b645f9":"Moving average of new cases, in order to smooth the bias of the data due to change in the daily amount of tests","4aeb9a21":"# Plots","6f1d09c6":"Confirmed, deaths and recovered by country \ndf contains calender timeline\ndfn contains numerical timeline - 0 equals the day of the country passed N positive cases"}}