{"cell_type":{"fc42c466":"code","958623f9":"code","249f2230":"code","8805cd4f":"code","0c75d86c":"code","68fa32f8":"code","292b3ff9":"code","ca86d22d":"code","58563f2d":"code","fa8a0035":"code","59114887":"code","8f7c244d":"code","b43b2ad6":"code","b99d06ae":"code","58c59081":"code","ebceecb6":"code","30f55398":"code","dc0978dc":"code","14b17def":"code","ba001860":"code","e3ab9833":"code","692d56fe":"code","700b59d4":"code","12e132f2":"code","8b57d6cf":"code","a868696a":"code","5832dd93":"code","4815b5a2":"code","1ee0cd4a":"code","1bbf2712":"code","59a6e69a":"code","7467cf7b":"code","9c958069":"code","3c76fc96":"code","586a5242":"code","c2f5fdf7":"code","7fdec8d5":"code","cae4d2f0":"code","77dd0648":"code","462ebd99":"code","8ecc40b8":"code","a9429ad6":"code","b4e38e55":"markdown","43c730d5":"markdown","13885be6":"markdown","6ff45a39":"markdown","3fe68f31":"markdown"},"source":{"fc42c466":"# importing libraries\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom collections import Counter\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom feature_engine.encoding import OrdinalEncoder\n\nfrom catboost import CatBoostClassifier\n\npd.set_option('display.max_columns', 500)","958623f9":"# reading training data and creating a copy of training data\n\ntrain = pd.read_csv('Train.csv')\ntrain_copy = train.copy()","249f2230":"# reading test data and creating a copy of test data\n\ntest = pd.read_csv('Test.csv')\ntest_copy = test.copy()","8805cd4f":"train.info()","0c75d86c":"test.info()","68fa32f8":"train.describe()","292b3ff9":"# checking for null values\n\ntrain.isnull().sum()","ca86d22d":"test.isnull().sum()","58563f2d":"train['RainTomorrow'].value_counts()","fa8a0035":"# dropping target variable from training\n\ny = train['RainTomorrow'].values\ntrain = train.drop(columns=['RainTomorrow'], axis=1)","59114887":"# creating plots to compare distribution of data in train & test\n\ndef diagnostic_plots(data, variable):\n    plt.figure(figsize=(20,8))\n    plt.subplot(1,3,1)\n    data[variable].hist(bins=30)\n    plt.title('PDF of {}'.format(variable))\n    \n    plt.subplot(1,3,2)\n    stats.probplot(data[variable], dist='norm', plot=plt)\n    plt.title('Q-Q Plot of {}'.format(variable))\n    \n    plt.subplot(1,3,3)\n    sns.boxplot(y=data[variable])\n    \n    plt.show()","8f7c244d":"var = list(train.columns)\nvar.remove('Id')\nvar.remove('Date')\nvar.remove('Location')\nvar.remove('WindGustDir')\nvar.remove('WindDir9am')\nvar.remove('WindDir3pm')\nvar.remove('RainToday')","b43b2ad6":"for col in var:\n    diagnostic_plots(train, col)","b99d06ae":"for col in var:\n    diagnostic_plots(test, col)","58c59081":"# Observation from above plots, Distribution of data seems to match between both Train and test set\n\n# With the help of above plots i got to know that variables 'Cloud9am' & 'Cloud3pm'\n# can also be treated as categorical variable","ebceecb6":"train['Cloud9am'].unique()","30f55398":"train['Cloud3pm'].unique()","dc0978dc":"test['Cloud9am'].unique()","14b17def":"test['Cloud3pm'].unique()","ba001860":"test['Cloud3pm'].value_counts()","e3ab9833":"# 'Cloud3pm' contains 1 row with value of 9 which is only present in test data\n# there is no row in training data with value of 9 for 'Cloud3pm'\n# hence we need to take this into account while processing 'Cloud3pm' data for test set","692d56fe":"train['Location'].unique()","700b59d4":"test['Location'].unique()","12e132f2":"train['Date'] = pd.to_datetime(train['Date'])","8b57d6cf":"# creating few features\n# Extracting day, month, year and dayofweek from date\n\ntrain['day'] = train['Date'].dt.day\ntrain['month'] = train['Date'].dt.month\ntrain['year'] = train['Date'].dt.year\ntrain['dayofweek'] = train['Date'].dt.dayofweek","a868696a":"# creating variables with difference between temperature, pressure, humidity, windspeed \n\ntrain['temp_dif'] = train['Temp3pm'] - train['Temp9am']\ntrain['pres_dif'] = train['Pressure3pm'] - train['Pressure9am']\ntrain['hum_dif'] = train['Humidity3pm'] - train['Humidity9am']\ntrain['wind_dif'] = train['WindSpeed3pm'] - train['WindSpeed9am']","5832dd93":"train.head(1)","4815b5a2":"# droping column 'Id' & 'Date' from the data\n\ntrain.drop(columns=['Id', 'Date'], axis=1, inplace=True)","1ee0cd4a":"variables=['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'Cloud9am', 'Cloud3pm', 'RainToday', 'day', 'month', 'year', 'dayofweek']","1bbf2712":"# converting variable into 'object' datatype so as to use them in OrdinalEncoder Transformer\n\nfor var in variables:\n    train[var] = train[var].astype('object')","59a6e69a":"# encoding categorical variables with the help of Target Guided Encodings\n\nme = OrdinalEncoder(encoding_method='ordered', variables=['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'Cloud9am', 'Cloud3pm', 'RainToday', 'day', 'month', 'year', 'dayofweek'])\nme.fit(train, train_copy['RainTomorrow'] )\ntrain = me.transform(train)","7467cf7b":"train.head(5)","9c958069":"# creating an array of categorical features indices to use as a parameter in catboost\n\ncat_feat = np.array([0,6,8,9,16,17,20,21,22,23,24])","3c76fc96":"train.shape","586a5242":"# Doing 5-Fold Cross validation to get an idea of log loss for validation purpose\n\n# CatBoostClassifier parameters:\n# 'cat_features' is used to specify categorical variables in the data set\n# 'border_count' is number of splits for numerical feature\n# 'iterations' in number of trees\n\n# you can specify number of cores to use by using 'n_jobs'\n\n# this cell will take approximately 40 mins to run\n\nctb = CatBoostClassifier(cat_features=cat_feat, border_count=1024, iterations=5000)\nscores = cross_val_score(ctb, train, y, cv=5, scoring='neg_log_loss', n_jobs=-1)\nprint(np.mean(scores))","c2f5fdf7":"test['Date'] = pd.to_datetime(test['Date'])\ntest['day'] = test['Date'].dt.day\ntest['month'] = test['Date'].dt.month\ntest['year'] = test['Date'].dt.year\ntest['dayofweek'] = test['Date'].dt.dayofweek\n\ntest['temp_dif'] = test['Temp3pm'] - test['Temp9am']\ntest['pres_dif'] = test['Pressure3pm'] - test['Pressure9am']\ntest['hum_dif'] = test['Humidity3pm'] - test['Humidity9am']\ntest['wind_dif'] = test['WindSpeed3pm'] - test['WindSpeed9am']\n\ntest.drop(columns=['Id', 'Date'], axis=1, inplace=True)\n\nvariables=['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'Cloud9am', 'Cloud3pm', 'RainToday', 'day', 'month', 'year', 'dayofweek']\n\nfor var in variables:\n    test[var] = test[var].astype('object')\n    \ntest = me.transform(test)\n\ntest['Cloud3pm'] = test['Cloud3pm'].fillna(value=7)\ntest['Cloud3pm'] = test['Cloud3pm'].astype('int64')","7fdec8d5":"test.shape","cae4d2f0":"# creating model\n\nctb = CatBoostClassifier(cat_features=cat_feat, border_count=2048, iterations=15000)\nctb.fit(train,y)","77dd0648":"# predictions\n\npred = ctb.predict_proba(test)","462ebd99":"pred = pred[:,1]\npred","8ecc40b8":"sample = pd.read_csv('Sample.csv')\ndf = pd.DataFrame()\ndf['Id'] = sample['Id']\ndf['RainTomorrow'] = pred","a9429ad6":"# creating submission file\n\ndf.to_csv('prediction1.csv', index = False)","b4e38e55":"# Data Preprocessing","43c730d5":"# EDA","13885be6":"# Preprocessing Test data","6ff45a39":"# Cross Validation","3fe68f31":"# Modelling & Creating submission file"}}