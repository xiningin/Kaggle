{"cell_type":{"8f628212":"code","15394e4f":"code","f2c55488":"code","2967ac08":"code","34edaeab":"code","a50ee635":"code","71b73413":"code","e23e0994":"code","8612ac7a":"code","e2a138c5":"code","24fce878":"code","2d304474":"code","f3ea5c21":"code","be7417dc":"code","90ff69f6":"code","98d274da":"markdown","7fc336ca":"markdown","e5665fdc":"markdown"},"source":{"8f628212":"import re\nimport cv2\nimport pickle\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport albumentations as Album\nfrom PIL import Image","15394e4f":"%pip install youtube_dl\n!pip install ffmpeg-python","f2c55488":"import youtube_dl\nimport ffmpeg\nfrom glob import glob","2967ac08":"meta_file = '..\/input\/youtube-video-trailer\/movie_metadata_dict.pickle'\nwith open(meta_file, 'rb') as file:  \n    movie_metadata_dict = pickle.load(file)","34edaeab":"def video_to_numpy(file='3LPANjHlPxo.mp4'):\n    try:\n        probe = ffmpeg.probe(file)\n        video_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'video'), None)\n        disposition = pd.DataFrame(video_stream.get('disposition'), index=[file])\n        video_stream.pop('disposition')\n        tags = pd.DataFrame(video_stream.get('tags'), index=[file])\n        video_stream.pop('tags')\n        width = int(video_stream['width'])\n        height = int(video_stream['height'])\n\n        metadata = pd.DataFrame(video_stream, index=[file]).join(disposition).join(tags)\n\n        out, _ = (\n            ffmpeg\n                .input(file)\n                .output('pipe:', format='rawvideo', pix_fmt='rgb24')\n                .run(capture_stdout=True)\n        )\n\n        video = (\n            np\n                .frombuffer(out, np.uint8)\n                .reshape([-1, height, width, 3])\n        )\n\n        video = video[np.random.choice(video.shape[0], int(np.log(video.shape[0])*24), replace=False), ...]\n\n        return video, metadata\n    except:\n        return None, None","a50ee635":"def augment_and_show_one(aug, video_np):\n    aug_img_list = []\n    num_images = video_np.shape[0]\n    for idx in range(num_images):\n        image = aug(image=video_np[idx])['image']\n        aug_img_list.append(image)\n    plt.figure(figsize=(10, 10))\n    plt.imshow(image)\n    return aug_img_list\n\ndef augment_video(aug, video_np):\n    aug_img_list = []\n    num_images = video_np.shape[0]\n    for idx in range(num_images):\n        image = aug(image=video_np[idx])['image']\n        aug_img_list.append(image)\n    return aug_img_list","71b73413":"# Our metadata dict\n# format: movie_metadata_dict[id] = {'id', 'title', 'height', 'width', 'quality', 'duration', 'average_rating', 'age_limit', ['categories'], 'description'}\nmovie_metadata_dict","e23e0994":"file_list = glob('..\/input\/youtube-video-trailer\/*')\nmax_size = 224\n\nfor file_name in file_list:\n    tmp_img_dict = dict()\n    tmp_img_dict['img_screenshots'] = []\n    video_np, metadata = video_to_numpy(file_name)\n    if video_np is None:\n        continue\n    aug_img_list = augment_video(Album.SmallestMaxSize(max_size=max_size), video_np=video_np)\n\n    #get the file key\n    file_key_res = re.search('\/([\\w_-]+).mp4', file_name)\n    \n    if file_key_res:\n        file_key = file_key_res.group(1)\n\n    # write to metadata_dict_out np screens    \n    if file_key in movie_metadata_dict:\n        tmp_img_dict['img_screenshots'].append(aug_img_list)\n        movie_metadata_dict[file_key].append(tmp_img_dict)\n","8612ac7a":"\naug = Album.SmallestMaxSize(max_size=max_size)\n\naug_img_list = augment_and_show_one(aug, video_np=video_np)\nplt.imshow(aug_img_list[-1])","e2a138c5":"file_list = glob('..\/input\/youtube-video-trailer\/*')","24fce878":"def audio_to_numpy(file='3LPANjHlPxo.mp4'):\n    try:\n        out, _ = (ffmpeg\n                  .input(file)\n                  .output('-', format='wav')\n                  .overwrite_output()\n                  .run(capture_stdout=True)\n                  )\n\n        return np.frombuffer(out, np.int16)\n    except:\n        return None\n","2d304474":"for file_name in file_list:\n    audio_np = audio_to_numpy(file_name)\n\n    if audio_np is None:\n        continue\n\n    tmp_audio_dict = dict()\n    tmp_audio_dict['audio_np'] = []\n\n    #get the file key\n    file_key_res = re.search('\/([\\w_-]+).mp4', file_name)\n    \n    if file_key_res:\n        file_key = file_key_res.group(1)\n\n    # write to metadata_dict_out np screens    \n    if file_key in movie_metadata_dict:\n        tmp_audio_dict['audio_np'].append(audio_np)\n        movie_metadata_dict[file_key].append(tmp_audio_dict)","f3ea5c21":"list(movie_metadata_dict.keys())\n","be7417dc":"# IMAGE NUMPAY ARRAY\nimage_screenshots = np.array((movie_metadata_dict['3AaSdZvetuY'][-2]['img_screenshots'][0]))\nimage_screenshots.shape","90ff69f6":"# AUDIO NUMPAY ARRAY\naudio_np = np.array((movie_metadata_dict['3AaSdZvetuY'][-1]['audio_np'][0]))\naudio_np.shape","98d274da":"## Our dict with metadata + img numpay + audio numpay","7fc336ca":"# Convert audio to numpy","e5665fdc":"# Convert video to  np arrays and save the data to metadata dict"}}