{"cell_type":{"abfb0625":"code","e6af9bda":"code","e44c4c89":"code","e2418517":"code","6089d6a1":"code","17080a46":"code","41aeec4a":"code","0c91b19a":"code","9d792578":"code","c6d25550":"code","54bea17b":"code","2d946407":"markdown","32c10f27":"markdown","56f49948":"markdown","8d899448":"markdown","d4db2093":"markdown","845d03b1":"markdown"},"source":{"abfb0625":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport tensorflow.keras.layers as layers","e6af9bda":"labels=pd.read_csv('..\/input\/10-monkey-species\/monkey_labels.txt')","e44c4c89":"labels","e2418517":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('..\/input\/10-monkey-species\/training\/training\/',\n                                                 target_size = (128,128),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","6089d6a1":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = train_datagen.flow_from_directory('..\/input\/10-monkey-species\/validation\/validation\/',\n                                                 target_size = (128,128),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","17080a46":"import IPython.display as ipd\n\nipd.Image('..\/input\/10-monkey-species\/training\/training\/n5\/n5021.jpg')","41aeec4a":"from tensorflow.keras.applications.inception_v3 import InceptionV3\nbase_model = InceptionV3(input_shape = (128, 128, 3), include_top = False, weights = 'imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False","0c91b19a":"x=base_model.output\nx = layers.GlobalAveragePooling2D(name='avg_pool')(x)\nx = layers.Dense(1024, activation='relu')(x)\nx = layers.Dense(10, activation='sigmoid')(x)\n\ninception = tf.keras.models.Model(base_model.input, x)\ninception.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","9d792578":"inception.summary()","c6d25550":"Inception_hist=inception.fit(training_set, validation_data=test_set, epochs=20)","54bea17b":"# summarize history for accuracy\nplt.plot(Inception_hist.history['accuracy'])\nplt.plot(Inception_hist.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# summarize history for loss\nplt.plot(Inception_hist.history['loss'])\nplt.plot(Inception_hist.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","2d946407":"## Step 1: Pre-process and create train set","32c10f27":"## Step 3: Import the pre- trained model ","56f49948":"## Step 2: pre-process and create test set","8d899448":"## Step 5: Train the model","d4db2093":"## Step 4: Add Flattening, hidden and output layers","845d03b1":"## Step 6: Train and Test accuracy, loss plots"}}