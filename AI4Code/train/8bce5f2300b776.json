{"cell_type":{"ca97c146":"code","0bc62501":"code","0b366a6f":"code","01b6940d":"code","c020e11e":"code","36f7ec7d":"code","456d640d":"code","f5056483":"code","537c8a86":"code","0767d21b":"code","bf0b17ab":"code","ac459732":"code","54e3520f":"code","c81b9f30":"code","97206825":"code","b003afd0":"code","8758172d":"code","f97b7fb8":"code","dff5d28c":"code","085dda3d":"code","d0c6c755":"code","82cb8264":"code","b7af8dda":"code","385464de":"code","493de0db":"code","e1230cfc":"code","1efa4e18":"code","7ad05f17":"code","474e7c92":"code","a9e06639":"code","80c0fc94":"code","d9d49441":"code","e3b41945":"code","55b13f29":"code","5b082a71":"code","8aeb82dc":"code","d2e2934a":"code","5a2df39d":"code","365ba1c4":"code","3ab01040":"code","cd168a9e":"code","202f9406":"code","ed67a36b":"code","88d1d7b4":"code","d26f2924":"code","d08d444a":"code","68c0500d":"code","a029b6f5":"code","43b9af1e":"markdown","04dbc15e":"markdown","87525788":"markdown","ad646e32":"markdown","f91ccf51":"markdown","3f606f1f":"markdown","214343aa":"markdown","88984d79":"markdown","11563923":"markdown","4f537f53":"markdown","24f73818":"markdown","f0966a58":"markdown","4c9091f4":"markdown","52b6c7be":"markdown","8b793c35":"markdown"},"source":{"ca97c146":"## define configuration\nPATH_TRAIN = '..\/input\/tabular-playground-series-dec-2021\/train.csv'\nPATH_TEST = '..\/input\/tabular-playground-series-dec-2021\/test.csv'\n\nPATH_AUTOGLUON_SUBMISSION = 'submission_autogluon.csv'\nPATH_EVALML_SUBMISSION = 'submission_evalml.csv'\nPATH_FLAML_SUBMISSION = 'submission_flaml.csv'\nPATH_H2OAML_SUBMISSION = 'submission_h2oaml.csv'\nPATH_LAML_SUBMISSION = 'submission_laml.csv'\nPATH_MLJAR_SUBMISSION = 'submission_mljar.csv'\n\nMAX_MODEL_RUNTIME_MINS = 5\nMAX_MODEL_RUNTIME_SECS = MAX_MODEL_RUNTIME_MINS * 60","0bc62501":"## prepare data\nimport gc\nimport os\nimport shutil\n\nimport datatable as dt\nimport numpy as np\nfrom pathlib import Path\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\ntrain = dt.fread(PATH_TRAIN)[:100000, :]\ntest = dt.fread(PATH_TEST)\n\ntarget = train['Cover_Type'].to_numpy().ravel().astype(object)\ntest_ids = test['Id']\n\ndel train[:, ['Id', 'Cover_Type']]\ntest = test[:, train.names]","0b366a6f":"## install packages\n!python3 -m pip install -q \"mxnet<2.0.0\"\n!python3 -m pip install -q autogluon\n!python3 -m pip install -q -U graphviz\n!python3 -m pip install -q -U scikit-learn","01b6940d":"## import packages\nfrom autogluon.tabular import TabularPredictor","c020e11e":"## run model\ntrain['target'] = dt.Frame(target)\n\nmodel_autogluon = TabularPredictor(label='target')\nmodel_autogluon.fit(train_data=train.to_pandas(), excluded_model_types=['KNN'], time_limit=MAX_MODEL_RUNTIME_SECS)\n\ndel train['target']","36f7ec7d":"## check leaderboard\nmodel_autogluon.leaderboard()","456d640d":"## generate predictions\npreds_autogluon = model_autogluon.predict(test.to_pandas())","f5056483":"## create submission\nsubmission = dt.Frame(Id=test_ids, Cover_Type=dt.Frame(preds_autogluon))\nsubmission.head()","537c8a86":"## save submission\nsubmission.to_csv(PATH_AUTOGLUON_SUBMISSION)","0767d21b":"## clear memory\nshutil.rmtree('AutogluonModels')\ndel model_autogluon\n\ngc.collect()","bf0b17ab":"## install packages\n!python3 -m pip install -q evalml==0.28.0","ac459732":"## import packages\nfrom evalml.automl import AutoMLSearch","54e3520f":"## run model\nmodel_evalml = AutoMLSearch(X_train=train.to_pandas(), y_train=target, problem_type='multiclass', objective='accuracy multiclass', max_time=MAX_MODEL_RUNTIME_SECS)\nmodel_evalml.search()","c81b9f30":"## check leaderboard\nmodel_evalml.rankings","97206825":"## generate predictions\npreds_evalml = model_evalml.best_pipeline.predict(test.to_pandas())","b003afd0":"## create submission\nsubmission = dt.Frame(Id=test_ids, Cover_Type=dt.Frame(preds_evalml))\nsubmission.head()","8758172d":"## save submission\nsubmission.to_csv(PATH_EVALML_SUBMISSION)","f97b7fb8":"## clear memory\nos.remove('evalml_debug.log')\ndel model_evalml\n\ngc.collect()","dff5d28c":"## install packages\n!python3 -m pip install -q flaml\n!python3 -m pip install -q -U graphviz\n!python3 -m pip install -q -U scikit-learn","085dda3d":"## import packages\nfrom flaml import AutoML","d0c6c755":"## run model\nmodel_flaml = AutoML()\nmodel_flaml.fit(X_train=train.to_pandas(), y_train=target, time_budget=MAX_MODEL_RUNTIME_SECS)","82cb8264":"## generate predictions\npreds_flaml = model_flaml.predict(test.to_pandas())","b7af8dda":"## create submission\nsubmission = dt.Frame(Id=test_ids, Cover_Type=preds_flaml.astype(int))\nsubmission.head()","385464de":"## save submission\nsubmission.to_csv(PATH_FLAML_SUBMISSION)","493de0db":"## clear memory\ndel model_flaml\n\ngc.collect()","e1230cfc":"## import packages\nimport h2o\nfrom h2o.automl import H2OAutoML","1efa4e18":"## prepare data\nh2o.init()\n\nh2o_train = h2o.H2OFrame(train.to_pandas())\nh2o_test = h2o.H2OFrame(test.to_pandas())\n\nh2o_train['target'] = h2o.H2OFrame(target).asfactor()","7ad05f17":"## run model\nfeatures = [x for x in h2o_train.columns if x != 'target']\n\nmodel_h2o = H2OAutoML(stopping_metric='misclassification', max_runtime_secs=MAX_MODEL_RUNTIME_SECS)\nmodel_h2o.train(x=features, y='target', training_frame=h2o_train)","474e7c92":"## check leaderboard\nmodel_h2o.leaderboard","a9e06639":"## generate predictions\npreds_h2o = model_h2o.leader.predict(h2o_test).as_data_frame()['predict']","80c0fc94":"## create submission\nsubmission = dt.Frame(Id=test_ids, Cover_Type=dt.Frame(preds_h2o))\nsubmission.head()","d9d49441":"## save submission\nsubmission.to_csv(PATH_H2OAML_SUBMISSION)","e3b41945":"## clear memory\nh2o.cluster().shutdown()\ndel model_h2o\n\ngc.collect()","55b13f29":"## install packages\n!python3 -m pip install -q lightautoml\n!python3 -m pip install -q -U torch\n!python3 -m pip install -q -U torchvision","5b082a71":"## import packages\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML\nfrom lightautoml.tasks import Task","8aeb82dc":"## run model\ntrain['target'] = dt.Frame(target)\n\nmodel_laml = TabularAutoML(task = Task('multiclass'), timeout = MAX_MODEL_RUNTIME_SECS)\nmodel_laml.fit_predict(train_data=train.to_pandas(), roles={'target': 'target'})\n\ndel train['target']","d2e2934a":"## generate predictions\npreds_laml = np.vectorize({v: k for k, v in model_laml.reader.class_mapping.items()}.get)(np.argmax(model_laml.predict(test.to_pandas()).data, axis=1))","5a2df39d":"## create submission\nsubmission = dt.Frame(Id=test_ids, Cover_Type=dt.Frame(preds_laml))\nsubmission.head()","365ba1c4":"## save submission\nsubmission.to_csv(PATH_LAML_SUBMISSION)","3ab01040":"## clear memory\ndel model_laml\n\ngc.collect()","cd168a9e":"## install packages\n!pip install -U --ignore-installed mljar-supervised\n!python3 -m pip install -q -U graphviz","202f9406":"## import packages\nfrom supervised import AutoML","ed67a36b":"## run model\nmodel_mljar = AutoML(eval_metric='accuracy', total_time_limit=MAX_MODEL_RUNTIME_SECS, results_path='.\/model_mljar')\nmodel_mljar.fit(X=train.to_pandas(), y=target)","88d1d7b4":"## check leaderboard\nmodel_mljar.get_leaderboard()","d26f2924":"## generate predictions\npreds_mljar = model_mljar.predict(test.to_pandas())","d08d444a":"## create submission\nsubmission = dt.Frame(Id=test_ids, Cover_Type=dt.Frame(preds_mljar))\nsubmission.head()","68c0500d":"## save submission\nsubmission.to_csv(PATH_MLJAR_SUBMISSION)","a029b6f5":"## clear memory\nshutil.rmtree('model_mljar')\n\ndel model_mljar\n\ngc.collect()","43b9af1e":"## FLAML\n<img src='https:\/\/github.com\/microsoft\/FLAML\/raw\/main\/docs\/images\/FLAML.png' width='150px'>\n\n[FLAML](https:\/\/microsoft.github.io\/FLAML) is a fast and light automl library open sourced by [Microsoft](https:\/\/opensource.microsoft.com)","04dbc15e":"## AutoGluon\n<img src='https:\/\/user-images.githubusercontent.com\/16392542\/77208906-224aa500-6aba-11ea-96bd-e81806074030.png' width='250px'>\n\n[AutoGluon](https:\/\/auto.gluon.ai\/stable\/index.html) is an automl library open sourced by [Amazon](http:\/\/amazon.com\/aws)","87525788":"## LightAutoML\n<img src='https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/blob\/master\/imgs\/LightAutoML_logo_small.png?raw=true' width='150px'>\n\n[LightAutoML](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML) is a framework for automatic classification and regression model creation open sourced by [Sberbank](https:\/\/www.sberbank.com) AI Lab.","ad646e32":"**Auto**mated **M**achine **L**earning (**AutoML**) has become widely adopted for building, experimenting and productionizing various types of machine learning models across business use-cases.\n\nThere are different open source solutions available and this notebook explores a simple baseline solution for some of them on the [Kaggle TPS (December 2021) competition](https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021).\n\n* [AutoGluon](#AutoGluon)\n* [EvalML](#EvalML)\n* [FLAML](#FLAML)\n* [H2O AutoML](#H2O-AutoML)\n* [LightAutoML](#LightAutoML)\n* [MLJAR](#MLJAR)","f91ccf51":"Read more in [Documentation of LightAutoML](https:\/\/lightautoml.readthedocs.io\/en\/latest\/index.html)","3f606f1f":"## MLJAR\n<img src='https:\/\/mljar.com\/images\/logo\/mljar_circle3.svg' width='150px'>\n\n[MLJAR](https:\/\/mljar.com) is an automated machine learning tool for tabular data","214343aa":"## H2O AutoML\n<img src='https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/_images\/h2o-automl-logo.jpg' width='150px'>\n\n[H2O AutoML](https:\/\/www.h2o.ai\/products\/h2o-automl) is an automated machine learning library open sourced by [H2O.ai](https:\/\/h2o.ai)","88984d79":"<div align='center'>\n    <h1>AutoML Tutorial<\/h1>\n    <img src='https:\/\/github.com\/vopani\/fortyone\/blob\/main\/images\/automl_banner_530_x_455.png?raw=true'>\n<\/div>","11563923":"Read more in [Documentation of AutoGluon](https:\/\/auto.gluon.ai\/stable\/index.html)","4f537f53":"Read more in [Documentation of MLJAR](https:\/\/supervised.mljar.com)","24f73818":"## EvalML\n<img src='https:\/\/evalml.alteryx.com\/en\/stable\/_images\/evalml_horizontal.svg' width='250px'>\n\n[EvalML](https:\/\/evalml.alteryx.com\/en\/stable) is an automl library open sourced by [Alteryx](http:\/\/www.alteryx.com)","f0966a58":"## Similar Tutorials\nSimilar tutorials on other Kaggle TPS competitions are published here:\n\n* [AutoML Tutorial: TPS (January 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-january-2021)\n* [AutoML Tutorial: TPS (February 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-february-2021)\n* [AutoML Tutorial: TPS (March 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-march-2021)\n* [AutoML Tutorial: TPS (April 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-april-2021)\n* [AutoML Tutorial: TPS (May 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-may-2021)\n* [AutoML Tutorial: TPS (June 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-june-2021)\n* [AutoML Tutorial: TPS (July 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-july-2021)\n* [AutoML Tutorial: TPS (August 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-august-2021)\n* [AutoML Tutorial: TPS (September 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-september-2021)\n* [AutoML Tutorial: TPS (October 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-october-2021)\n* [AutoML Tutorial: TPS (November 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-november-2021)","4c9091f4":"Read more in [Documentation of H2O AutoML](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/automl.html)","52b6c7be":"Read more in [Documentation of EvalML](https:\/\/evalml.alteryx.com)","8b793c35":"Read more in [Documentation of FLAML](https:\/\/microsoft.github.io\/FLAML)"}}