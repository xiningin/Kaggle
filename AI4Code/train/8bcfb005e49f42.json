{"cell_type":{"df1e72d3":"code","942c0cd4":"code","4c3291df":"code","3bb86486":"code","16c6bd9f":"code","a4a2e164":"code","251bdb8e":"code","2d2d5fae":"code","71fa21b1":"code","13ef35b5":"code","139f6f56":"code","fd9b72bc":"code","a4aa0d2f":"code","5cedfe52":"code","41266542":"code","b707c072":"code","fca310a3":"code","cbd2d8c3":"code","d2aaf3d8":"code","d11f4ca9":"code","d07b1d68":"code","786e0f6b":"code","a7ebec2f":"code","88353457":"markdown","c3f092fa":"markdown","747a27de":"markdown","defa6de8":"markdown","58a318e2":"markdown","cb210da1":"markdown","0cbca465":"markdown","0ea435cb":"markdown","41397a5a":"markdown","c6adea41":"markdown","277c87a1":"markdown","46006b04":"markdown","8bf70b0e":"markdown","cff16626":"markdown","adff8a85":"markdown","9ccfee48":"markdown","24ab2eec":"markdown","a4242041":"markdown"},"source":{"df1e72d3":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom mpl_toolkits.basemap import Basemap\n\n%matplotlib inline","942c0cd4":"print(os.listdir(\"..\/input\"))\ndf = pd.read_csv(\"..\/input\/911.csv\")","4c3291df":"df.info()","3bb86486":"df.head()","16c6bd9f":"df['zip'].value_counts().head(5)","a4a2e164":"df['twp'].value_counts().head(5)","251bdb8e":"df['title'].nunique()","2d2d5fae":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])\ndf['Sub_Reason'] = df['title'].apply(lambda title: title.split(':')[1])","71fa21b1":"df['Reason'].value_counts()","13ef35b5":"sns.countplot(x = df['Reason'])","139f6f56":"sns.countplot(x = df['Sub_Reason'])","fd9b72bc":"df.info()","a4aa0d2f":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])\ntype(df['timeStamp'].iloc[0])","5cedfe52":"df['timeStamp'].dt.hour\ndf['hour'] = df['timeStamp'].apply(lambda timeStamp:timeStamp.hour)\ndf['month'] = df['timeStamp'].apply(lambda timeStamp:timeStamp.month)\ndf['day_of_week'] = df['timeStamp'].apply(lambda timeStamp:timeStamp.weekday())","41266542":"df[['timeStamp','hour','month' ,'day_of_week']].head()","b707c072":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","fca310a3":"df['week_day']= df['day_of_week'].map(dmap)\n","cbd2d8c3":"        sns.countplot(df['week_day'],palette='viridis')","d2aaf3d8":"sns.countplot(df['week_day'], hue = df['Reason'],palette='viridis')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2)","d11f4ca9":"sns.countplot(df['month'], hue = df['Reason'],palette='viridis')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2)","d07b1d68":"byMonth = df.groupby(by='month').count()\n#byMonth is a dataframe\nbyMonth","786e0f6b":"byMonth['lat'].plot()","a7ebec2f":"sns.lmplot(data = byMonth.reset_index(), x = 'month', y='lat', size=4, aspect = 2)\nplot = plt.gca()\nplot.set_title(\"calls per month\")\nplt.ylabel('count')","88353457":"** What is the most common Reason for a 911 call based off of this new column? **","c3f092fa":"** Now we can create a countplot of 911 calls by Reason. \nWe can see there was significantly less Fire related calls than EMS anf Traffic.**","747a27de":"** In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. I will cretae a custom new column called \"Reason\" that contains this value.** ","defa6de8":"** The day of week filed is an integer data type. I will use the map() function together with the following  dictionary to map the actual string names to the day of the week: **\n\n    dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","58a318e2":"** The same for Month:**","cb210da1":"** Now we can plot the 911 calls based on the day during the week the call was placed  - there seems to be less 911 calls on Sunday**","0cbca465":"**Did you notice something strange about the Plot?**\n\n_____\n\n** You should have noticed it was missing some Months, let's see if we can maybe fill in this information by plotting the information in another way, possibly a simple line plot that fills in the missing months, in order to do this, we'll need to do some work with pandas... **","0ea435cb":"** Now create a simple plot off of the dataframe indicating the count of calls per month. **","41397a5a":"** How many unique title codes are there? **","c6adea41":"\n** I will change the data type to datetime**","277c87a1":"** Now see if you can use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column. **","46006b04":"** Some initial analysis of the dataset **","8bf70b0e":"** What are the top 5 townships (twp) for 911 calls? **","cff16626":"** Now create a gropuby object called byMonth, where you group the DataFrame by the month column and use the count() method for aggregation. Use the head() method on this returned DataFrame. **","adff8a85":"**What are the top 5 zipcodes for 911 calls?**","9ccfee48":"** Now i can use DateTime attributes and methods. I will create 3 new columns called Hour, Month, and Day of Week based off of the timeStamp column.**","24ab2eec":"** Now the same plot, with the call \"Reason\" added **","a4242041":"**The data type of the objects in the timeStamp column is a string rather than a date data type **"}}