{"cell_type":{"90f5b321":"code","89e17585":"code","5481d98e":"code","fed5c39f":"code","c4569c71":"code","12d22671":"code","b569d771":"code","66e71c1e":"code","86165bf4":"code","adb03c1c":"code","1f63c6cd":"code","1d909ef5":"code","9601a866":"code","aa9b2515":"code","37107c52":"code","9f1c03f6":"code","2a24a6d2":"code","bff5ba67":"code","de2d65c0":"code","c94fad03":"code","7e678adc":"code","ccac5482":"code","f692e914":"code","4802c262":"code","b153f629":"code","c3d4333e":"code","454074f6":"code","fb0eff71":"code","e911c053":"code","42cc5514":"code","a645e665":"code","ca16897b":"code","e8326fb9":"code","d4eeb11b":"code","6dd2c5dd":"code","174a040e":"code","9ea74817":"code","fdb60b23":"markdown","4756b066":"markdown","53810c12":"markdown","602f5bb9":"markdown","1f2c5691":"markdown","88a2822c":"markdown","50242067":"markdown","1b56e7f2":"markdown","c4827093":"markdown"},"source":{"90f5b321":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89e17585":"import matplotlib.pyplot as plt","5481d98e":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\n","fed5c39f":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","c4569c71":"football","12d22671":"edu = pd.read_csv('\/kaggle\/input\/ense3-ict-lession\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","b569d771":"edu.head()","66e71c1e":"edu.tail()","86165bf4":"edu[10:15]","adb03c1c":"edu.describe()","1f63c6cd":"edu['Value']","1d909ef5":"edu['GEO']","9601a866":"edu.iloc[90:94][['TIME','GEO']]","aa9b2515":"edu[edu['Value'] > 6.5].tail()","37107c52":"edu[edu[\"Value\"].isnull()].head()","9f1c03f6":"edu.max(axis = 0)","2a24a6d2":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","bff5ba67":"s = edu[\"Value\"]\/100\ns.head()","de2d65c0":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","c94fad03":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","7e678adc":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","ccac5482":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","f692e914":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","4802c262":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","b153f629":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","c3d4333e":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","454074f6":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","fb0eff71":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","e911c053":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","42cc5514":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","a645e665":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","ca16897b":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","e8326fb9":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","d4eeb11b":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","6dd2c5dd":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","174a040e":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")\n","9ea74817":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","fdb60b23":"axis=0 : delete row; \naxis=1: delete column.\nThe original 'data' object is changed when inplace=True","4756b066":"**4. Which measures does the result show? It seems that it shows some default values, can you guess which ones?**\nIt counts the numbers, the standard deviation, the mean, minimum and maximum values, etc.","53810c12":"**6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?**\nTo filtre the value that greater than 6,5 in the colume 'Value'.","602f5bb9":"**5. What does this index return? What does the first index represent? And the second one?**\nThis index returns the values referring to index 1 & 2. The first index represents from row 90 to 94, the second index represents the colume 'TIME' and 'GEO'.","1f2c5691":"\"ascending=False\" here   means ranking the index in descending order (by alphabet from A to Z).","88a2822c":"**2. What happens if we give a number as argument to the method head()?**\nThe first five rows of the dataframe appeared.","50242067":"**3. What does the method tail()return?**\nThe last five rows of the dataframe appeared.","1b56e7f2":"**1. Which is the size of the edu DataFrame (rows x columns)?******\n- 384 rows \u00d7 3 columns","c4827093":"**7. What do you observe regarding the parameter ascending=False?**\n\"ascending=False\" means ranking the values in descending order. Here we calculated the sum of resulting values from the last 6 years, then rank them from the top to bottom. We can see that Denmark won the first place. "}}