{"cell_type":{"d236c295":"code","87515cae":"code","04c25a81":"code","00e63af3":"code","075b59c1":"code","19efd73f":"code","d3692067":"code","4cc2a9d7":"code","6a72c153":"code","8b97d61a":"code","f948a047":"code","a079b570":"code","f781317b":"code","318cc0f7":"code","13ebe9a4":"code","de6de789":"code","155f03b0":"code","bdfbeada":"code","e34b4620":"code","47113f38":"code","c94a35a0":"code","0cf1338e":"code","c7fd0965":"code","fb3b0cbb":"code","ea42a087":"code","71191c9b":"code","2953cf9c":"code","9d16d3b3":"markdown","1bd86412":"markdown","520e98fa":"markdown"},"source":{"d236c295":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87515cae":"import numpy as np # linear algebra\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","04c25a81":"df = pd.read_csv('..\/input\/perrin-freres-monthly-champagne-sales\/Perrin Freres monthly champagne sales millions.csv')\ndf","00e63af3":"df.columns = [\"Month\",\"Sales\"]\ndf","075b59c1":"df.drop(106,axis=0,inplace=True)#Dropping 106th row since it has Nan value\ndf.drop(105,axis=0,inplace=True)","19efd73f":"df.dtypes","d3692067":"df['Month']=pd.to_datetime(df['Month'])\ndf.head()","4cc2a9d7":"df.set_index('Month',inplace=True)#???\ndf.head()","6a72c153":"df.describe()","8b97d61a":"df.plot()# It is showing seasonal format since some particular time it is high and other time it is low.","f948a047":"# Testing for Stationarity\nfrom statsmodels.tsa.stattools import adfuller\ntest_result = adfuller(df['Sales'])\n#H0 : It is non stationary\n#H1: It is Stationary\ndef adfuller_test(sales):\n    result=adfuller(sales)\n    labels=['ADF Test Statistic','p-value','Lags used','Number of Observation used']\n    for value,label in zip(result,labels):\n        print(label+' : '+str(value))\n    if result[1] <= 0.05:\n        print('Strong evidence against Null hypothesis(H0), reject null hypothesis, Data is stationary')\n    else:\n        print('Weak evidence against Null hypothesis(H1), timeseries has unit root indicating non stationarity')","a079b570":"adfuller_test(df['Sales'])","f781317b":"df['Sales First difference']= df['Sales']-df['Sales'].shift(1)\ndf['Sales'].shift(1)","318cc0f7":"# But one problem here arises is the data comtains seasonality which repeats every 12 months. So to remove the seasonality we shift by 12 months.\ndf['Seasonal First difference']= df['Sales']-df['Sales'].shift(12)\ndf['Seasonal First difference']","13ebe9a4":"adfuller_test(df['Sales First difference'].dropna())","de6de789":"adfuller_test(df['Seasonal First difference'].dropna())","155f03b0":"df['Seasonal First difference'].plot()","bdfbeada":"### Entering into Auto Regressive Modelling","e34b4620":"\nfrom pandas.plotting import autocorrelation_plot\nautocorrelation_plot(df['Sales'])\nplt.show()","47113f38":"import statsmodels as sm\n\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf","c94a35a0":"fig= plt.figure(figsize=(12,8))\nax1=fig.add_subplot(211)\nfig = sm.graphics.tsaplots.plot_acf(df['Seasonal First difference'].iloc[13:],lags=40,ax=ax1)\nax2=fig.add_subplot(212)\nfig = sm.graphics.tsaplots.plot_pacf(df['Seasonal First difference'].iloc[13:],lags=40,ax=ax2)\n","0cf1338e":"from statsmodels.tsa.arima_model import ARIMA\nmodel=ARIMA(df['Sales'],order=(1,1,1))\nmodel_fit=model.fit()\nmodel_fit.summary()\n#But since data is seasonal it will not work well","c7fd0965":"import statsmodels.api as sm\nmodelsnsnl = sm.tsa.statespace.SARIMAX(df['Sales'],order=(1,1,1),seasonal_order=(1,1,1,12))\nresult=modelsnsnl.fit()","fb3b0cbb":"df['forecast']=result.predict(start=90,end=103,dynamic=True)\ndf[['Sales','forecast']].plot(figsize=(12,8))","ea42a087":"\nfrom pandas.tseries.offsets import DateOffset\nfuture_dates=[df.index[-1]+ DateOffset(months=x)for x in range(0,24)]\nfuture_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)\n\nfuture_datest_df","71191c9b":"future_df=pd.concat([df,future_datest_df])\n\nfuture_df['forecast'] = result.predict(start = 104, end = 120, dynamic= True)  \nfuture_df[['Sales', 'forecast']].plot(figsize=(12, 8))","2953cf9c":"# So this is the Sales Forecast","9d16d3b3":"So THe data becomes Stationary","1bd86412":"Differencing to remove nonstationarity","520e98fa":"**##2. Visualize the Data**"}}