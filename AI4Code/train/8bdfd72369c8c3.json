{"cell_type":{"9637bccd":"code","d32c6f8f":"code","c539fd8d":"code","a1ff1785":"code","29b43b99":"code","65badee0":"code","9b8defac":"code","9afada3c":"code","ccc463a5":"code","98553a52":"code","19e1bd3e":"code","b6f7ee3a":"code","4f2b5e46":"code","aa1b64aa":"code","a8f98428":"code","da4c5675":"code","fee55f11":"code","3cefdbf9":"code","11ced37e":"code","1d464b3e":"code","e92a8781":"code","686a8ca5":"code","cacccb57":"code","f5fe77e9":"code","0168c035":"code","51fa22bc":"code","1e90ae32":"code","c6554ae2":"code","54f26993":"code","1c4c8413":"code","8b0f2b0f":"code","e57046f9":"code","7cfa02c1":"code","9a262c43":"code","551e1266":"code","0449ebd3":"code","7c35c907":"markdown","36d51fd3":"markdown","104df595":"markdown","f8a60b83":"markdown","838d3859":"markdown","497cea97":"markdown","d4c72a18":"markdown","65908518":"markdown","a59f6ebc":"markdown","4d40e3fd":"markdown","56e94c51":"markdown","94b8af50":"markdown","5faee28b":"markdown","9ec0be30":"markdown","5ec60958":"markdown","86c12ed5":"markdown"},"source":{"9637bccd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm \nimport pylab as py \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d32c6f8f":"train = pd.read_csv('\/kaggle\/input\/walmart-recruiting-store-sales-forecasting\/train.csv.zip')\ntest = pd.read_csv('\/kaggle\/input\/walmart-recruiting-store-sales-forecasting\/test.csv.zip')\nstores = pd.read_csv('\/kaggle\/input\/walmart-recruiting-store-sales-forecasting\/stores.csv')\nfeature = pd.read_csv('\/kaggle\/input\/walmart-recruiting-store-sales-forecasting\/features.csv.zip')","c539fd8d":"train.head()","a1ff1785":"test.head()","29b43b99":"train.info()","65badee0":"train.describe()","9b8defac":"# Checking for null values\ntrain.isnull().sum()","9afada3c":"test.isnull().sum()","ccc463a5":"train['year'] = pd.DatetimeIndex(train['Date']).year\ntrain['month'] = pd.DatetimeIndex(train['Date']).month\ntrain['day'] = pd.DatetimeIndex(train['Date']).day","98553a52":"train.drop(['Date'], axis=1,inplace=True)","19e1bd3e":"train.head()","b6f7ee3a":"sns.distplot(train['Weekly_Sales'])","4f2b5e46":"train.Weekly_Sales=np.where(train.Weekly_Sales>100000, 100000,train.Weekly_Sales)","aa1b64aa":"train.Weekly_Sales.plot.hist(bins=25)","a8f98428":"train.IsHoliday.value_counts()","da4c5675":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ntrain['IsHoliday'] = le.fit_transform(train['IsHoliday'])","fee55f11":"train.head()","3cefdbf9":"train.hist(edgecolor='black', linewidth=1.2, figsize=(20, 20));","11ced37e":"train.head()","1d464b3e":"plt.figure(figsize=(10,7))\nsns.barplot(x='day', y='Weekly_Sales', data=train)","e92a8781":"plt.figure(figsize=(10,7))\nsns.barplot(x='month', y='Weekly_Sales', data=train)","686a8ca5":"plt.figure(figsize=(10,7))\nsns.barplot(x='year', y='Weekly_Sales', data=train)","cacccb57":"# 1 : Sales during Holidays\n# 0 : Sales during Non-Holidays\n\nplt.figure(figsize=(10,7))\ntrain.groupby('IsHoliday')['Weekly_Sales'].mean().plot(kind = 'barh')\nplt.title('Sales During Holidays and Non-Holidays')\nplt.xlabel('Sales')","f5fe77e9":"weekly_sales_mean = train['Weekly_Sales'].groupby(train['day']).mean()\nweekly_sales_median = train['Weekly_Sales'].groupby(train['day']).median()\nplt.figure(figsize=(20,8))\nsns.lineplot(weekly_sales_mean.index, weekly_sales_mean.values)\nsns.lineplot(weekly_sales_median.index, weekly_sales_median.values)\nplt.grid()\nplt.legend(['Mean', 'Median'], loc='best', fontsize=16)\nplt.title('Weekly Sales - Mean and Median', fontsize=18)\nplt.ylabel('Sales', fontsize=16)\nplt.xlabel('Date', fontsize=16)\nplt.show()","0168c035":"weekly_sales = train['Weekly_Sales'].groupby(train['Store']).mean()\nplt.figure(figsize=(20,8))\nsns.barplot(weekly_sales.index, weekly_sales.values, palette='dark')\nplt.grid()\nplt.title('Average Sales - per Store', fontsize=18)\nplt.ylabel('Sales', fontsize=16)\nplt.xlabel('Store', fontsize=16)\nplt.show()","51fa22bc":"plt.figure(figsize=(10, 10))\nsns.heatmap(train.corr(), annot=True, cmap=\"RdYlGn\", annot_kws={\"size\":15})","1e90ae32":"# Formatting the Date cloumn\n\ntest['year'] = pd.DatetimeIndex(test['Date']).year\ntest['month'] = pd.DatetimeIndex(test['Date']).month\ntest['day'] = pd.DatetimeIndex(test['Date']).day\n\n# Dropping the Date column\ntest.drop(['Date'], axis=1,inplace=True)\n\n# Label Encoding the IsHoliday column\n\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ntest['IsHoliday'] = le.fit_transform(test['IsHoliday'])","c6554ae2":"test.head()","54f26993":"x = train.drop(['Weekly_Sales'],axis=1)\ny = train['Weekly_Sales']\nx_test = test","1c4c8413":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error","8b0f2b0f":"x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.30, random_state=42)","e57046f9":"from sklearn.ensemble import RandomForestRegressor\nclf_rf = RandomForestRegressor(n_estimators=150)\nclf_rf.fit(x_train, y_train)\ny_pred_rf=clf_rf.predict(x_val)\nacc_rf= round(clf_rf.score(x_train, y_train) * 100, 2)\nprint (\"Accuracy: %i %% \\n\"%acc_rf)","7cfa02c1":"rmse = np.sqrt(mean_squared_error(y_pred_rf, y_val))\nrmse","9a262c43":"y_pred = clf_rf.predict(x_test)\ny_pred","551e1266":"pred = pd.DataFrame(y_pred)\n\nsub = pd.read_csv('..\/input\/walmart-recruiting-store-sales-forecasting\/sampleSubmission.csv.zip')\n\nsub['Weekly_Sales'] = pred\nsub.to_csv('submission.csv', index=False)","0449ebd3":"a=pd.read_csv('submission.csv')\na.head()","7c35c907":"### Formatting the Date column","36d51fd3":"### Plotting the target column","104df595":"### Checking the Daily Sales","f8a60b83":"### Checking for Yearly Sales","838d3859":"### Dividing the data into training and validation set","497cea97":"### Data Description","d4c72a18":"### Applying Random Forest Algorithm","65908518":"### Visulazing the distibution of the data for every feature","a59f6ebc":"### Average Sales per Stores","4d40e3fd":"**Store** - the store number\n\n**Dept** - the department number\n\n**Date** - the week\n\n**Weekly_Sales** -  sales for the given department in the given store\n\n**IsHoliday** - whether the week is a special holiday week","56e94c51":"### Checking for Sales during holidays","94b8af50":"### Performing the same steps with the test dataset","5faee28b":"* we can see that the feature is right skewed so we need to convert it into Gaussian Distribution or normal distributin","9ec0be30":"### Outlier treatment","5ec60958":"### Checking for monthly sales","86c12ed5":"![](https:\/\/wpcdn.us-east-1.vip.tn-cloud.net\/www.klkntv.com\/content\/uploads\/2020\/04\/walmart-logo.png)"}}