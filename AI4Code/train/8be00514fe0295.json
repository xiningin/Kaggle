{"cell_type":{"364157bc":"code","926ab641":"code","6d971e2a":"code","57b907c5":"code","cc7b58c2":"code","30b921ef":"code","def62be3":"code","4c27b1c2":"code","67dd6464":"code","b1b6143c":"code","ed0ce3dc":"code","a2c34481":"code","bf85d2fb":"code","4ecf7c43":"code","7468d060":"markdown","fb39e2ac":"markdown","73a39bae":"markdown","c03ac9e8":"markdown","a0c133e4":"markdown","e720e869":"markdown","64680f64":"markdown","5a967730":"markdown"},"source":{"364157bc":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport plotly.express as px\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom pandas.plotting import parallel_coordinates\nimport matplotlib as mpl\nimport plotly.graph_objects as go\nsns.set_style(\"whitegrid\")\n#sns.set()\n\n#Bokeh Libraries\nfrom bokeh.io import output_notebook\nfrom bokeh.plotting import figure, show\nfrom bokeh.plotting import reset_output \nfrom bokeh.models import ColumnDataSource\nfrom datetime import datetime as dt\nimport warnings \nwarnings.filterwarnings('ignore')\ndf = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\",parse_dates=['Date'])\ndf_World = pd.read_csv(\"..\/input\/latitude-and-longitude-for-every-country-and-state\/world_country_and_usa_states_latitude_and_longitude_values.csv\")\ndf_Countries = pd.read_csv(\"..\/input\/countries-lat-long\/Countries_lat_long.csv\")\ndf_fdate = pd.read_csv(\"..\/input\/covid19geographicdisbtributionworldwide\/COVID-19-geographic-disbtribution-worldwide.csv\",parse_dates=['dateRep'])\ndf_zonal = pd.read_csv(\"..\/input\/feb-zonal-means\/zonalmean.csv\")\ndf_us = pd.read_csv(\"..\/input\/us-states-covid19\/us_states.csv\", parse_dates=['date'])\ndf.rename(columns=({'Country\/Region':'Country'}),inplace=True)\ndf['Country'].replace(['US'], 'United States',inplace=True)\ndf['Country'].replace(['Korea, South'], 'South Korea',inplace=True)\nmaxdate = (pd.to_datetime(df['Date'].max()).date()).strftime(\"%b %d %Y\")\nmusdate = (pd.to_datetime(df_us['date'].max()).date()).strftime(\"%b %d %Y\")\nfdate = (pd.to_datetime(df_fdate['dateRep'].max()).date()).strftime(\"%b %d %Y\")\ndf_mdate = df[df['Date'] == np.max(df['Date'])].loc[:,['Country','Confirmed','Deaths','Recovered']]\ndf_mdate = df_mdate.groupby(['Country'],as_index=False)['Confirmed','Deaths','Recovered'].sum().sort_values('Confirmed',ascending=False).head(15)\ndf_mdate['Mortality'] = np.round((df_mdate['Deaths']\/df_mdate['Confirmed'])*100,2)\ndf_mdate = df_mdate.merge(df_Countries,left_on='Country', right_on='name')\ndfw =df_fdate.groupby(['countriesAndTerritories','countryterritoryCode'], as_index=False)['cases','deaths'].sum()","926ab641":"fig = go.Figure(data=go.Choropleth(\n    locations = dfw['countryterritoryCode'],\n    z = dfw[\"cases\"],\n    text = dfw[\"countriesAndTerritories\"],\n    colorscale = 'Reds',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    #colorbar_tickprefix = '$',\n    colorbar_title = 'Confirmed Cases',\n))\nfig.update_layout(\n    title_text='Geographical Spread of COVID-19 as of ' + fdate,\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        #showocean=True, oceancolor=\"LightBlue\",\n        showlakes=True, lakecolor=\"Blue\",\n        #showrivers=True, rivercolor=\"Blue\",\n        #lakecolor='rgb(255, 255, 255)',\n        projection_type='equirectangular'\n    )\n)\nfig.show()","6d971e2a":"lat = df_mdate['latitude'].values\nlon = df_mdate['longitude'].values\nconf = df_mdate['Confirmed'].values\ndeaths = df_mdate['Deaths'].values\ncoun = df_mdate['Country'].values\ndict1={}\nlist1=[]\nlist2=[]\nlist3=[]\nn=0\n#storing each value in different lists\nfor z in lat:\n    list1.append(z)\nfor u in lon:\n    list2.append(u)\nfor c in coun:\n    list3.append(c)\n#storing the values of lat long in a dictionary with lat as keys and long as values    \nwhile(n<len(list1)):\n    dict1[list1[n]]=list2[n]\n    n+=1\nfig = plt.figure(figsize=(12,9))#edgecolor='w'\nm = Basemap(projection='mill', \n           llcrnrlat = -70,\n           urcrnrlat=90,\n           llcrnrlon=-180,\n           urcrnrlon=180,\n           resolution='l')\nm.drawcoastlines()\nm.drawcountries(color='black')\nm.drawmapboundary(fill_color='#dff7f0')\nm.fillcontinents(color='lightgreen', lake_color='aqua',zorder=1)\nm.drawparallels(np.arange(-90,90,10), labels=[True,True,False,False])\ni=0\nfor z,c in dict1.items():\n    x,y = m(c, z)\n    plt.plot(x, y, 'ro', markersize=10)\n    plt.text(x, y,list3[i], fontsize=8, weight='bold')\n    i+=1\nplt.title(\" Top 15 Countries-Confirmed Cases as of  \" +maxdate,fontsize=20)\nplt.show()","57b907c5":"fig = plt.figure(figsize=(14,12))\nm= Basemap(projection='mill',resolution='l',\n          llcrnrlat = 20,\n          urcrnrlat=70,\n          llcrnrlon=-160,\n          urcrnrlon=160)\nm.drawmapboundary(color='black', linewidth = 2,fill_color='#ebf0f7')\nm.fillcontinents(color='#dbc59e', lake_color='aqua',zorder=1)\nm.drawcoastlines()\nm.drawcountries(color='#0c2240')\nm.drawparallels(np.arange(20,72,10),labels=[1,1,0,0])\nm.scatter(lon, lat, latlon=True,\n          s=deaths\/10, c='Red',\n          alpha=1, zorder=2)\nplt.title(\"Top 15 Countries - Deaths as of \"+maxdate,fontsize=20)\nplt.show()","cc7b58c2":"idx = df_fdate[df_fdate['cases']>0].groupby(['countriesAndTerritories'])['dateRep'].idxmin()\ndf_fd = df_fdate.loc[idx].sort_values('dateRep').head(15)\ndf_fd['countriesAndTerritories'].replace(['United_States_of_America'],'United States',inplace=True)\ndf_fd['countriesAndTerritories'].replace(['South_Korea'],'South Korea',inplace=True)\ndf_fd['countriesAndTerritories'].replace(['United_Arab_Emirates'],'United Arab Emirates',inplace=True)\ndf_fd = df_fd.merge(df_Countries, left_on = 'countriesAndTerritories', right_on= 'name')\ndf_fdll = df_fd[['dateRep','cases','deaths','name','latitude','longitude']].head(10)\nslat = df_fdll['latitude'].values\nslon = df_fdll['longitude'].values\nlatl=[]\nlonl=[]\nfor lt in slat:\n    latl.append(lt)\nfor ln in slon:\n    lonl.append(ln)","30b921ef":"fig = plt.figure(figsize=(10,10))\nwidth = 28000000; lon_0 = -104; lat_0 = 40\nm = Basemap(width=width,height=width,projection='aeqd',\n             lat_0=lat_0,lon_0=lon_0)\nm.drawmapboundary(fill_color='gray')\nm.fillcontinents(color='black', alpha=1, lake_color='aqua')\nm.drawcoastlines(linewidth=0.1, color=\"white\")\n# 20 degree graticule.\nm.drawparallels(np.arange(-80,81,20))\nm.drawmeridians(np.arange(-180,180,20))\n# draw a black dot at the center.\nxpt, ypt = m(104.19,35.86)\nm.plot(xpt,ypt,'ro',color='red',markersize=12)\nm.scatter(slon, slat, latlon=True,\n          s=14, c='red',\n          alpha=1, zorder=2)\nfor i in range(len(latl)-1):\n    startlat = latl[i]\n    startlon = lonl[i]\n    arrlat = latl[i+1]\n    arrlon = lonl[i+1]\n    m.drawgreatcircle(startlon,startlat,arrlon,arrlat, linewidth=2, color='orange')\n#draw the title.\nplt.title('Covid19 Spread starting from China')\nplt.show()","def62be3":"df1 = df_mdate.head(10)\ndf1['latitude'] = df1['latitude'].astype(int)\ndf1 = df1[['latitude','Confirmed','Deaths','Recovered']]\nplt.style.use('dark_background')\nplt.rcParams[\"figure.figsize\"] = [12.0, 6.0]\nmpl.rc('lines', linewidth=2, linestyle='-')\nparallel_coordinates(df1, 'latitude', colormap=plt.get_cmap(\"Dark2\"))\nplt.xlabel(\"Cases\")\nplt.ylabel(\"Counts\")\nplt.title(\"Counts based on Latitudes\")\nplt.show()","4c27b1c2":"source = ColumnDataSource(df_mdate)\n#ymin, ymax = min(df_20f.Confirmed), max(df_20f.Confirmed)\noutput_notebook()\n\nfig = figure(plot_height=300, plot_width=600,\n             title='Confirmed Cases Count based on Latitudes',\n             x_axis_label='Latitude', y_axis_label='Count',\n             toolbar_location=None, tools=\"hover\", tooltips=[('Country', '@Country')])\n# Render the race as step lines\nfig.vbar(x='latitude',top='Confirmed',width =0.9,\n         color='#CE1141',  \n         source=source)\nshow(fig)","67dd6464":"df_us = df_us[df_us['date']==df_us['date'].max()]\ndf_usll = df_us.merge(df_World,left_on = 'state', right_on = 'usa_state')\ndf_usll = df_usll[['state','cases','deaths','usa_state_code','usa_state_latitude','usa_state_longitude']]\ndf_usf=df_usll.rename(columns=({'usa_state_code':'code','usa_state_latitude':'lat','usa_state_longitude':'lon'}))\ndf_usf['lat'] = df_usf['lat'].astype(int)\ndf_usf = df_usf.sort_values('cases',ascending=False).head(12)\ndf_usf['mortality'] = np.round((df_usf['deaths']\/df_usf['cases'])*100,2)","b1b6143c":"fig = px.choropleth(df_usf, \n                    locations=\"code\", \n                    color=\"cases\", \n                    locationmode = 'USA-states', \n                    hover_name=\"state\",\n                    range_color=[0,50],scope=\"usa\",\n                    title='US COVID-19 cases as of ' +musdate)\n\nfig.show()\n\nfig = px.choropleth(df_usf, \n                    locations=\"code\", \n                    color=\"mortality\", \n                    locationmode = 'USA-states', \n                    hover_name=\"state\",\n                    range_color=[0,50],scope=\"usa\",\n                    title='US Mortality Rate  as of '+musdate)\nfig.show()","ed0ce3dc":"source = ColumnDataSource(df_usf)\n#ymin, ymax = min(df_20f.Confirmed), max(df_20f.Confirmed)\n\noutput_notebook()\n\nfig = figure(plot_height=300, plot_width=600,\n             title='Confirmed Cases Count based on Latitudes',\n             x_axis_label='Latitude', y_axis_label='Count',\n             toolbar_location=None, tools=\"hover\", tooltips=[('State', '@state')])\n# Render the race as step lines\nfig.vbar(x='lat',top='cases',width =0.9,\n         color='#CE1141', alpha=0.5,\n         source=source)\nshow(fig)\n#legend='Confirmed',\n#fig.vbar(x='Country',top='Confirmed', width=0.9, color='color',source=source)\n\n# Move the legend to the upper left corner\n#fig.legend.location = 'top_right'\n\n# Show the plot\nfig = figure(plot_height=300, plot_width=600,\n             title='Mortality Rate based on Latitudes',\n             x_axis_label='Latitude', y_axis_label='Count',\n             toolbar_location=None, tools=\"hover\", tooltips=[('State', '@state')])\n# Render the race as step lines\nfig.vbar(x='lat',top='mortality',width =0.9,\n         color='#CE1141', alpha=0.5,\n         source=source)\nshow(fig)","a2c34481":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_zonal['lat'], y=df_zonal['temp_anom'],\n                    mode='lines+markers',\n                    name='lines+markers',\n                    line_color = 'black',\n                    marker_color='rgba(152, 0, 0, .8)'))\n\n# Edit the layout\nfig.update_layout(title='Zonal February Temp Change 2019-2020',\n                   xaxis_title='Latitude',\n                   yaxis_title='Zonal Mean(C)')\nfig.show()","bf85d2fb":"df_tp = pd.read_csv(\"..\/input\/cities-temp-prec\/city_temp_prec.csv\", encoding='latin-1')\nnew_cols = [col.strip() for col in df_tp.columns]#\"\\xa0\"some headers which end with no break space hex code\ndf_tp.columns = new_cols\n#Temperature dataframe\ndf_temp = df_tp[~df_tp['Elev'].isna()]\ndf_temp1 = df_temp[(df_temp['City'] == 'New York') | (df_temp['City'] == 'Rome') | (df_temp['City'] == 'Madrid') |\n        (df_temp['City'] =='Berlin') | (df_temp['City'] =='Paris') | (df_temp['City'] =='Wuhan') |\n        (df_temp['City'] =='Tehran') | (df_temp['City'] =='London')]\ndf_tmp = df_temp1.T\ndf_tmp.columns = df_tmp.loc['City'] #Assign row as column headers.\ndf_tmp = df_tmp. drop(['City','ANNUAL','Elev']) #Drop header row.\ndf_tmp.columns.name=None\ncols = df_tmp.columns.to_list()\ncolors = ['firebrick','royalblue','purple','brown','yellow','orange','green','black']\nx = df_tmp.index.values\nfig = go.Figure()\nfor i,col in enumerate(cols):\n    fig.add_trace(go.Scatter(x=x, y=df_tmp[col].values, name = col,\n                         line=dict(color=colors[i-1], width=2)))\nfig.update_layout(title='Monthly  Average Temperatures of 8 affected cities ',\n                    xaxis_title='Month',\n                    yaxis_title='Temperature (degrees F)')      \nfig.show()\ndf_prec = df_tp[df_tp['Elev'].isna()]\ndf_prec = df_prec.drop(['Elev','ANNUAL'],axis =1)\ndf_prec1 = df_prec[(df_prec['City'] == 'New York') | (df_prec['City'] == 'Rome') | (df_prec['City'] == 'Madrid') |\n          (df_prec['City'] =='Berlin') | (df_prec['City'] =='Paris') | (df_prec['City'] =='Wuhan') |\n          (df_prec['City'] =='Tehran') | (df_prec['City'] =='London')]\ndf_prc = df_prec1.T\ndf_prc.columns = df_prc.loc['City'] #Assign row as column headers.\ndf_prc = df_prc. drop('City') #Drop header row.\ndf_prc.columns.name=None\nx = df_prc.index.values\nfig = go.Figure()\nfor i,col in enumerate(cols):\n    fig.add_trace(go.Scatter(x=x, y=df_prc[col].values, name = col,\n                         line=dict(color=colors[i-1], width=2)))\nfig.update_layout(title='Monthly Average Precipitaions of 8 affected cities ',\n                    xaxis_title='Month',\n                    yaxis_title='Precipitaion (in)')  \nfig.show()","4ecf7c43":"dfai = df[df['Date'] == np.max(df['Date'])].loc[:,['Country','Confirmed','Deaths','Recovered']]\ndff = dfai.groupby(['Country'], as_index=False)['Confirmed','Deaths','Recovered'].sum().sort_values('Confirmed',ascending=False)\ndff = dff.merge(df_Countries,left_on='Country', right_on='name')\ndfwtp = pd.read_csv(\"..\/input\/world-temp-prec\/tpw.csv\")\ndfwtpt = dfwtp[dfwtp['units'] == 'F'].loc[:,['Country','JAN','FEB','MAR','APR','MAY','Corona']]\ndfwtpt['Corona'] = dfwtpt['Corona'].astype(int)\ndff = dff[['Country','Confirmed','latitude']]\ndffa = dfwtpt.merge(dff, right_on='Country', left_on='Country')\nX = dffa[['JAN','FEB','MAR','APR','MAY','Confirmed','latitude']]\ny = dffa['Corona']\ndf_us = df_us[df_us['date']==df_us['date'].max()]\ndf_usll = df_us.merge(df_World,left_on = 'state', right_on = 'usa_state')\ndf_uslla = df_usll[['state','cases','usa_state_latitude']]\ndf_tpa = pd.read_csv(\"..\/input\/state-temp-prec\/tps.csv\")\ndf_tpa = df_tpa[df_tpa['unit'] =='F'].loc[:,['state','Jan','Feb','Mar','Apr','May']]\ndf_tpa = df_tpa.merge(df_uslla, right_on='state', left_on = 'state')\nX_test = df_tpa.drop(['state'],axis=1)\n# import the class\nfrom sklearn.linear_model import LogisticRegression\n# instantiate the model (using the default parameters)\nlogreg = LogisticRegression()\n# fit the model with data\nlogreg.fit(X,y)\ny_pred=logreg.predict(X_test)\nX_test['cor'] =pd.Series(y_pred)\nX_test['state'] = df_tpa['state']\ndf_final = X_test[X_test['cor'] == 1]\nfig = px.bar(df_final, x=\"cases\", y=\"state\", orientation='h')\nfig.update_layout(title='States in US prdeicted to get Corona ')   \nfig.show()","7468d060":"### Number of Confirmed cases of Covid-19\nSouthern Hemisphere\nThe Southern Hemisphere is relatively not that affected. None of the top 15 countries are in SH.\n\nNorthern Hemisphere\nAll the top 15 Countries are in Northern Hemisphere. \nAll of them are between 30N and 60N latitudes. \nAnd most of them lie between -30 degree and +30 degree Longtitudes\n\n#### Zooming to 30N to 60N Latitudes","fb39e2ac":"### Conclusion\n\nThe equator always faces the sun directly. The Equator is the line of 0 degrees latitude. As latitude increases, the sun shines more obliquely and provides less warming energy. Latitudes seem to affect the spread of COVID-19. Countries most affected by this virus lie between Tropic of Cancer 23.5N and 60N Latitudes.\nIn turn latitude - affects a) the annual mean temperature, b) the annual range, c) the annual total rainfall (which is least around the Tropics and near the poles), d) the prevailing wind direction and strength.\nFrom graphs above the cities most affected follow the same average mean temperatures patterns throughout the year. In Jan, Feb they are between 30F and 47F.\nAverage precipitaions for the cities are all different.\nFrom the data we can argue that coastal places are more prone to this virus.\nUsing mean temperatures, number of cases, latitudes as features, predicted the cities that are prone to get this virus in US. Will have to see if Elevation, population also effect the geographical spread of this virus.\n\n","73a39bae":"From the Graphs we can see most of the Confirmed case are Latitude 37N -which is the US and the range is between 30N to 60N. and deaths are more along latitude 41N.\n\n### US COVID-19 analysis","c03ac9e8":"### Emergence of COVID-19\nIn December 2019, a new virus (initially called \u2018Novel Coronavirus 2019-nCoV\u2019 and later renamed to SARS-CoV-2) causing severe acute respiratory syndrome (coronavirus disease COVID-19) emerged in **Wuhan, Hubei Province, China**, and rapidly spread to other parts of China and other countries around the world, despite China\u2019s massive efforts to contain the disease within Hubei.\n\n![image.png](attachment:image.png)\n\n#### Countries with highest number of cases","a0c133e4":"Coastal states with more populations seem to be  more affected. The whole of US falls within the 30N to 60N except Alaska. Confirmed Cases at 43N are the most.","e720e869":"First started in Wuhan, Hubei Province, China and mostly spread westward to other countries that lie between 30N and 60N Latitudes.","64680f64":"#### Deaths due to COVID-19\n\n* Most of the deaths are concentrated between -30 degrees and +30 degrees Longitudes.\n* Most of them are also between 30N and 60N Latitudes\nGeographically Longtitude and specifically Latitude does seem effect the spread of COVID-19.\n\n##### Lets analyze and see where it started and how it spread across the World.\n","5a967730":"### Geography and climate\nIn the sixth century BC, the Greek philosopher Pythagoras recognised the sphericity of the Earth and the dominance of latitude in explaining climate variation (Sanderson 1999). Two centuries later Aristotle expanded on Pythagoras's foundation and introduced five climate zones, ranging from tropical to northern frigid.\n\n**hemisphere** - which leads to warmer conditions, or, in the Tropics (23.5\ufffd S-23.5\ufffd N), to wetter conditions, in either January (south) or July (north);\n**latitude** - which affects a) the annual mean temperature, b) the annual range, c) the annual total rainfall (which is least around the Tropics and near the poles), d) the prevailing wind direction and strength;\n**elevation** - which affects a) the annual mean temperature, b) precipitation, and c) the daily range of temperature;\n**distance inland** - the annual temperature range increases with the distance downwind of the coast, and at all latitudes but the equatorial belt (5\ufffd S-5\ufffd N) the climate is drier and more rain falls in summer;\n**sea surface temperature upwind** - anomalously high SSTs (for a given latitude) means warmth and rain onshore - conversely, upwelling or cold water advection stabilises the atmosphere and inhibits rainfall;\n**upwind topography** - an upwind mountain chain implies drier conditions, but also colder winters, because of easy advection of polar airmasses along the mountain chain;\nlocal topography - e.g. low daily minima in broad valleys, but higher ones in urban canyons; or reduced daily maxima near large bodies of water on account of a lake breeze.\n\n#### Zonal Mean Temperatues Trend in February\n"}}