{"cell_type":{"d78fe3c9":"code","4a1dea58":"code","3d8c164a":"code","1214fdb6":"code","48ca1213":"code","458c60eb":"code","d4d6b1bd":"code","c1c94a5b":"code","e9fed0f4":"code","68e55a03":"code","9a1a9d5d":"code","50a4a9d9":"code","6c9d168d":"code","f9f491fd":"code","4aee9d85":"code","3a361812":"code","a86e291d":"code","925522b3":"code","9da87106":"code","11e44221":"code","1daf92ac":"code","f7df9bd9":"code","ae835290":"code","052df051":"code","c71065cc":"code","b550a57a":"code","d0e22299":"code","04f69e36":"code","cbc7a892":"code","e4152482":"code","7b29bfcf":"code","6178a3b0":"code","4ceacfbe":"code","87304aad":"code","b1b358ca":"code","b18ee0d9":"code","8b62aa6b":"code","efbdcf64":"code","2eb5fddc":"code","e8693f72":"code","6696ac55":"code","9cd5a390":"code","1dbd8507":"code","e12f867c":"code","f2b411d8":"code","281a11d8":"code","5b09aecb":"markdown","8b281023":"markdown","0af989bd":"markdown","4496b39d":"markdown","43becd3a":"markdown","1955d1e0":"markdown","3c561f1f":"markdown","7bf2ccb2":"markdown","7e8cc20f":"markdown","778dba99":"markdown","a19a6971":"markdown","904cd45d":"markdown","b800761a":"markdown","eecfec74":"markdown","778b2ea0":"markdown","be201858":"markdown","76f0155a":"markdown","5dbfe5a4":"markdown","f2192a2e":"markdown","fab41374":"markdown","f4490c03":"markdown","7df8e0b3":"markdown"},"source":{"d78fe3c9":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt","4a1dea58":"\nnetflix_df = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")","3d8c164a":"def missing_value_table(df):\n    missing_value = df.isna().sum().sort_values(ascending=False)\n    missing_value_percent = 100 * df.isna().sum()\/\/len(df)\n    missing_value_table = pd.concat([missing_value, missing_value_percent], axis=1)\n    missing_value_table_return = missing_value_table.rename(columns = {0 : 'Missing Values', 1 : '% Value'})\n    cm = sns.light_palette(\"green\", as_cmap=True)\n    missing_value_table_return = missing_value_table_return.style.background_gradient(cmap=cm)\n    return missing_value_table_return\n  \nmissing_value_table(netflix_df)","1214fdb6":"netflix_df['rating'] = netflix_df['rating'].fillna(netflix_df['rating'].mode()[0])\nnetflix_df['country'] = netflix_df['country'].fillna(netflix_df['country'].mode()[0])\nnetflix_df[['rating','country']].isna().sum()","48ca1213":"netflix_df.nunique()","458c60eb":"netflix_df","d4d6b1bd":"netflix_df.info()","c1c94a5b":"netflix_df.describe()","e9fed0f4":"netflix_df.shape","68e55a03":"netflix_df.isnull()","9a1a9d5d":"netflix_df.tail()","50a4a9d9":"netflix_df.columns","6c9d168d":"netflix_df.loc[10:190]","f9f491fd":"netflix_shows=netflix_df[netflix_df['type']=='TV Show']","4aee9d85":"netflix_shows","3a361812":"netflix_movies=netflix_df[netflix_df['type']=='Movie']","a86e291d":"\nnetflix_df.nunique()","925522b3":"sns.heatmap(netflix_df.isnull(),cmap = 'Reds')\nplt.title('Null Values Heatmap')\nplt.show()","9da87106":"import missingno as msno\nmsno.bar(netflix_df,color = 'indianred')\nplt.show()","11e44221":"\nnetflix_df.drop('show_id',axis=1, inplace = True)","1daf92ac":"\nnetflix_df['date_added']=netflix_df['date_added'].fillna('January 1, {}'.format(str(netflix_df['release_year'].mode()[0])))","f7df9bd9":"netflix_df[\"release_month\"] = netflix_df['date_added'].apply(lambda x: x.lstrip().split(\" \")[0])\nnetflix_df.head()","ae835290":"netflix_df['rating'].value_counts()","052df051":"\nnetflix_df['rating'].replace(np.nan, 'TV-MA',inplace  = True)","c71065cc":"netflix_df['country'].value_counts()","b550a57a":"print(netflix_df.type.value_counts())\nsns.countplot(netflix_df.type,palette=\"pastel\")\nplt.show()","d0e22299":"rating_counts = netflix_df.rating.value_counts()\nprint(rating_counts)\nplt.figure(figsize = (12,8))\nsns.countplot(netflix_df.rating, order = rating_counts.index[0:15],palette=\"pastel\")\nplt.title(\"Ratings for Movies And Shows\")\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Total Count\")\nplt.show()","04f69e36":"explode = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nsizes = rating_counts.values\n\n# visual\nplt.figure(figsize = (10,10))\nplt.pie(sizes, explode=explode, labels=rating_counts.index, autopct='%1.1f%%')\nplt.title('Ratings for Movies And Shows',fontsize = 15)\nplt.show()","cbc7a892":"plt.figure(figsize = (12,8))\nsns.countplot(x='rating',data = netflix_df,hue='type',palette=\"pastel\")\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Total Count\")\nplt.show()","e4152482":"release_year_counts = netflix_df.release_year.value_counts()\nprint(release_year_counts)\nplt.figure(figsize = (35,8))\nsns.countplot(netflix_df.release_year, order = release_year_counts.index[0:94],palette=\"pastel\")\nplt.show()","7b29bfcf":"plt.figure(figsize=(20,6))\nsns.countplot(x=\"release_month\",data= netflix_df,order = netflix_df['release_month'].value_counts().index[0:12],palette=\"pastel\")\nplt.xticks(rotation=45)\nplt.show()","6178a3b0":"print(netflix_df[\"country\"].value_counts().head())\nplt.figure(figsize=(20,6))\nsns.countplot(x=\"country\",data= netflix_df,hue= \"type\",order = netflix_df['country'].value_counts().index[0:15],palette=\"pastel\")\nplt.xticks(rotation=45)\nplt.show()","4ceacfbe":"print(netflix_movies[\"listed_in\"].value_counts()[:10])\nplt.figure(figsize=(12,6))\nsns.countplot(y='listed_in',data = netflix_movies,order =netflix_movies[\"listed_in\"].value_counts().index[0:10],palette=\"pastel\")\nplt.title(\"Top 10 Genres of Movies\",size=18)\nplt.show()","87304aad":"netflix_movies.duration = netflix_movies.duration.str.replace(' min','').astype(int)\nnetflix_shows.rename(columns={'duration':'seasons'}, inplace=True)\nnetflix_shows.replace({'seasons':{'1 Season':'1 Seasons'}}, inplace=True)\nnetflix_shows.seasons = netflix_shows.seasons.str.replace(' Seasons','').astype(int)","b1b358ca":"fig, ax = plt.subplots(1,2, figsize=(19, 5))\ng1 = sns.distplot(netflix_movies.duration,ax=ax[0]);\ng1.set_xticks(np.arange(0,360,30))\ng1.set_title(\"Duration Distribution for Netflix Movies\")\ng1.set_ylabel(\"% of All Netflix Movies\")\ng1.set_xlabel(\"Duration (minutes)\")\ng2 = sns.countplot(netflix_shows.seasons,ax=ax[1],palette=\"pastel\");\ng2.set_title(\"Netflix TV Shows Seasons\")\ng2.set_ylabel(\"Count\")\ng2.set_xlabel(\"Season(s)\")\nfig.show()","b18ee0d9":"oldest = netflix_df.sort_values(\"release_year\", ascending = True) \noldest[['title', \"release_year\"]][:10]","8b62aa6b":"standup=netflix_df[netflix_df[\"listed_in\"] == \"Stand-Up Comedy\"]\nstandup[[\"title\",\"country\",\"release_year\"]].head(10)","efbdcf64":"kids=netflix_df[netflix_df[\"listed_in\"] == \"Kids' TV\"]\nkids[[\"title\",\"country\",\"release_year\"]].head(10)","2eb5fddc":"movie_duration = netflix_df.loc[netflix_df['type']=='Movie']\n\nplt.figure(figsize=(12,10))\n\nax = sns.histplot(data = movie_duration,x = 'duration',bins = 50,kde = True,color = 'red')\nplt.title('Movie Duration',fontsize = 15)\nplt.xlabel('Total Duration(In Mins)',fontsize = 15)\nplt.ylabel('Total Movie Count',fontsize = 15)","e8693f72":"movie = netflix_df.loc[netflix_df['type']=='Movie']\nmovie_trends = movie[movie['release_year']>=2016]\ndf = movie_trends.groupby(['release_year','rating']).size().reset_index(name = 'Total')\ndf1 = df[df['Total'] >= 10]\n\nplt.figure(figsize = (10,8))\nsns.set_style('darkgrid')\nsns.barplot(data = df1,x = 'release_year', y = 'Total',hue = 'rating',palette = 'Set1')\nplt.title('Movies released by rating since 2016 and beyond(more than 10 releases per year)')\nplt.xlabel('Year')\nplt.ylabel('Total Count')","6696ac55":"df = netflix_df[(netflix_df['type'] == 'TV Show') & (netflix_df['country'] == 'India') ]\ntv_show_India = df.groupby(['release_year','rating']).size().reset_index(name = 'Total')\n\nplt.figure(figsize = (12,10))\nsns.set_style('darkgrid')\nsns.barplot(data = tv_show_India,x = 'release_year', y = 'Total',hue = 'rating',palette = 'Set1')\nplt.title('TV shows released by India by ratings',fontsize = 15)\nplt.xlabel('Year',fontsize = 15)\nplt.ylabel('No.of Shows',fontsize = 15)","9cd5a390":"tv_show_USA= netflix_df[(netflix_df['type'] == 'TV Show') & (netflix_df['country'] == 'United States') ]\n\ntv_show_USA = tv_show_USA[tv_show_USA['release_year']>=2010]\n\ndf = tv_show_USA.groupby(['release_year','rating']).size().reset_index(name = 'Total')\n\nplt.figure(figsize = (12,10))\nsns.set_style('darkgrid')\nsns.barplot(data = df,x = 'release_year', y = 'Total',hue = 'rating',palette = 'Set1')\nplt.title('TV shows released by United States by ratings')","1dbd8507":"movie_genre = netflix_df.loc[netflix_df['type'] == 'Movie']\nplt.figure(figsize=(12,6))\nax = sns.countplot(y='listed_in',data = movie_genre,order = movie_genre[\"listed_in\"].value_counts().index[0:10],palette=\"Set2\")\nplt.title('Top Ten Movie Genre',fontsize = 15)\nplt.xlabel('Total Count',fontsize = 15)\nplt.ylabel('Genre',fontsize = 15)\n","e12f867c":"Tv_Show_genre = netflix_df.loc[netflix_df['type'] == 'TV Show']\nplt.figure(figsize=(12,6))\nax = sns.countplot(y='listed_in',data = Tv_Show_genre,order = Tv_Show_genre[\"listed_in\"].value_counts().index[0:10],palette=\"Set2\")\nplt.title('Top Ten Tv Show Genre',fontsize = 15)\nplt.xlabel('Total Count',fontsize = 15)\nplt.ylabel('Genre',fontsize = 15)","f2b411d8":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","281a11d8":"stopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color='black',\n                          stopwords=stopwords,\n                          max_words=200,\n                          max_font_size=200, \n                          random_state=200\n                         ).generate(str(netflix_df['listed_in']))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","5b09aecb":"# drop id column","8b281023":"# View a description of that data","0af989bd":"# Call some simple libraries","4496b39d":"# Examine the data whether it contains empty columns or cells or not","43becd3a":"# Display the last data in the table","1955d1e0":"# Show some information on this data","3c561f1f":"# Make a  Analysis ","7bf2ccb2":"<h1 style=\"color:red\"><center>Hello, this notebook is for doing analysis and classification of some Netflix movies<\/center><\/h1>","7e8cc20f":"# plot the few columns to show some detils and data.","778dba99":"# Check for Missing Values","a19a6971":"# view shape of data","904cd45d":"#  Replace nan values in rating with TV-MA","b800761a":"# showing some data","eecfec74":"# Rading the columns of data","778b2ea0":"# read data ","be201858":"make a show data foem 10 to 190","76f0155a":"# # Replace nan values in data_added with January 1,{release_year}","5dbfe5a4":"# cheacking data if is inqueu","f2192a2e":"# Using matplotlib and seaborn to show data and understand","fab41374":"# Type - rating \n","f4490c03":"![i8mage](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAASwAAACoCAMAAABt9SM9AAAAilBMVEUAAADlCRTsCRVyBQrrCRXoCRTvCRWJBQwlAwSzBxDHCBFBAwY7AgXdCRTSCBLhCRRoBAleBAgWAQLBCBGoBw+YBg3NCBK7CBB3BQodAQOTBg1kBAlUBAhYBAj1ChVtBQo2AwWABQtLAwfWCBMjAgOjBw4qAgQwAgVFBAfWJiyDBQspAwUaAQOlBg7vh4njAAAG4UlEQVR4nO2caVviPBSG29CmwiiIssmmiAuvOv\/\/7720NMnJ0lqazjjheu5vhpimN0l7shFFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ1wt+iVrLV0kdpbPMi0Va+a8SnLuiZLXtgp18OiJsvhlOdRJjxVVv4gy9mIpF+q6I2W9019sGgr63PLSkZaeiqStweZNuOsCj44ZZlUZykKK+9oW52FZ6c8I\/k\/j5WVz8TV+FwkvauiUy2vqpnKfC5XPC7hzzR9JJN\/ybRBGleR3pdVqs5SFHbKdc2rsySlrBuRwG6rZSXi8n1HJZlmOZFX0G+0nax0chGyHplZp1NWlTxr64rIirVmG6ysiFztSqXK4mLW60KWVqtwZb3KDseWMnFFrtjalday6IMvXFmk8BtH1YlBH1niVgKXFc1kHXgZ0ES\/SP9p70qTxXYXIWunnuUiWVVLy+kjKx00lpUaJEJWIpOoSoEtyywoZd6ySJQgmpHUR2\/HT1bMPxvK2s8MhmXcMR3KJFWsyr03ZaVmQbPhwluWakdlM11KfbQ9eMpK1MOvVlby0aDkocjN1uZHpGVV\/ruHrLX6Lvb6zRiB6rlossqytfKdsrIGJStZY\/OjPywr2qtHfB6tqziVvB\/boMkiI4GgZWWq2+WPh5nZLduiy1JDnqBlkQd6EkUHTv\/y4cp4i4v0sGXNVQy6iPoqbpi4y2mKIYutyvSwZY3J6zZSF+NPDepdgyFLDnnClkXff6Rh3TtLaY7ZDUWvDlyWiqxiFR1zqyJnYspiZUwYuKxPx4CKBEYtMWWJEDdwWdG9PUilQ992mLJi\/lKkhy6LBKKyHTSodD2WrHK+J3RZZMJUVPq1QaXrsWSZw6kOxoY\/IktNmIobeWlQ6XosWTEv1r5qZaWT2172IcienCU3kpWOKPQJ7CvryXwYt14AU9iyTs21foomZSyRbN1v5GYtS7sfOsz1lUVGhKf7sOY+zseWdeoaZ8yU2jIKzpcVdyproT3i02FTIzU4ZBU3F76sSKutf9wQ6as79MoXIEtfD2gqpA6yIv2ffNlFFyHrmVwlmTYVUoeSlSzEpfMhzwXIUjU4FnLXVEgdZGOI7OT5kOcSZJEFsA7ihkiXJScz+MNFyCJhqecUaQmVtRIvW5Z9F2eVq4X+cRan0Kewv6yMyGKtN7BRiKw7OZ46DnnqI\/jBpGBZML12lvzDwx26ccZrnxFBkyU7OX8LfmyobZw53ob7Gz0PTdZG\/JEsZV1DnXUwnrAdzDkYslTnU004VFnWS6RBlb9Dl2XNa4Qry9zP47HhT6LLOtjv9FBlmTOl3ks7kSmL7BIIXNbS6iNki1BbDFlT+xphylILh4IOhoeGrHd74jRIWT17vSIeOcs4B0MWHXyGLGvmGJl5r7FasjJrnj9EWeRFRbZ2eo+mTVkP1jpiiLLoxhlyK77zNKYsa2ohRFl3ZKD+ogIu5reVzSFrZzwaf15W9aOmSpZ6px+jK9UlvTc7WLIiox82kvVwbY9Tu5KVDvv9yXS6261WB+MqVbJI7cf0neW7HGbLMrZUuGSxXfS+vu1ly9\/9+XAYp5xze8t0V7JiMXPGWDHnFQ\/ltSpkqUWwoi19qHbmc2IgcskyQhTn5N+x2vkxx0SeDnAMJjqTZZLKgKlClmpKrJhLUjfkcxYlcsmK9ODhvOMorip3LUvNPrtlqW3w5Wyyejd6rh46ZPU1J+HJUrtvy0kscojAb8LUIWul9cPgZJFlY3E60zk71wKHrCjslqXm5GTIvlRP\/N\/n6dFxydLmzYKTRTbcikjhq+Js87m4ZG1oqOUhS5ybs2SpnyqoXs8bVV+sVtZOjxtOkEMEPiedXLK0LYbNZCUOWaPhcHg\/n8\/7B\/Mj8iMYlRUbjIoIhRdBSh5mqUOMtbL2rlffrTLoc4bOKYtOxVfIKiJFluS\/KcFZcrP3ehbU8H59WI17u4\/ptN8fDPY3+fVk35W\/P6BkjUmvIMWouUD+1r4yTll0\/wmVleShdKHnGEbPJ6\/Z7nHz\/PLgKvfP8fIuj65ladHwjnWSstT4Q5sZVV+\/z4SpUxZ9uhJZ80H\/93J3u35qf7nOuXsaP+6WEzFYvd7KA8fsi2Qjhwg8JkzdsqYsFo0o7WIp96+xmU7mw1He3Lg+DiRDtVXF\/36PW9b19mbQf\/14fPZfEfkR3te9TA8\/1YjXY8JUyErTbSf7vf5Z8lF\/2Sq+vs\/t5oqneW9L9veeBxf\/dTbLyeCGHd\/cCW\/9myGf+\/l0sbn6PuNl8Dbevc69fq4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJT\/AXHmeW4t6wuWAAAAAElFTkSuQmCC)\n\n![image2](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBw4NDQ0NDQ0NDQ0NDQ0NDQ0ODg8NDQ0NFREWFxURFRUYHSggGBolGxUVITEhJSkrLi4uFx8zODMsNygtLisBCgoKDg0OFxAQFy8dHR0tLS4tKy0rKy0tKy0rLS0rLS0tLS0tLS0tLS0rLS0rLS0tLSstLSstLS0rLS0rLSsrLf\/AABEIALcBEwMBEQACEQEDEQH\/xAAaAAEBAQEBAQEAAAAAAAAAAAAAAQIDBAUH\/8QAQBAAAgECAwQFCgIIBwEAAAAAAAECAxEEElEFITGSExRBYZEVFiIyUnGBobHRQsEkU2Jjk7Lh8CM0cnOCovEG\/8QAGgEBAQEBAQEBAAAAAAAAAAAAAAECAwQFBv\/EADoRAQABAwIDBQQIBgEFAAAAAAABAgMRBBITMVEFIUFhkRQVIqEWMkJxksHR4QZSYoGx8CUjJDRTcv\/aAAwDAQACEQMRAD8A\/DQAFAAUjUAAKoAAACqAAAAoAAAAAAAAAAAAQAAQAwk8mSsAACAAKBAKAApGwABQAAKoAAACgAAAAEAoAAAAAAABAABGEnkyVgAgAABQAAABURuACgAAVQAAKAAAAAQAoAABAAAAFAAAABEYSWSsgAIAQCgAAADSI3AAABVAAAoAAAABACgAAACAAAAAFAAAAjDMslZAAQAgFAAAAFI2BAqSBACAAAAAAAAAAAABQAAAAAAAAGiOqMJLJWAAEAIBQAAABSNhUGEkCAACAAAAoEAoEAAAApQAACAAAAANEdUYSWSsgQCAAAAAAAKiNwBBlSQIAAIAAFAAAAAAAAgpQAEAAAAAANEdUYSWSsgQCAAAAAAAKRsCDKkoEUAUQAAAAAoQAAAChAAAAAAAAABtmXaWWVmWSsgSQIAAAAAAA0iNwgQZUlAgAKAAAAIoAAAAAACgAgAAAAAADZl2RlSeTBWAJIEAAEAAUABpEbhADKkoGQoAAAAD07NpqdelGSvGU4prVHO5MxTMw9vZ9qm7qrVFcZiaoy+ri9mwprGvIrRjSnRd36Kk3f6HCm7M7O\/rl9zV9mWrEaudv1Ypmjn3Zmc\/4wm1KVKlG0cI3ekn0yc8sZPd7tPEW5qqn639k7Ss6fT0badNnNMfHmcRM\/L5pN4bqyrdWV5TdNLPLc7P0ixv37dyVzoo0MaiNP3zO3609Of7Li6NKlRptYRzzUIylVTmlGTXF9neKaqqqp+LHfyXVWdPp9PRMabduoiZqzOImY8ecebxbYoQpyoqEVHNQpzla++TbuzpaqmYnPV8ztbT27NdqLcYzRTM\/fOe96+goQq4SMqayVqEM++Xry4S46nPdVNNWJ5S+h7Ppbeo0tNdHw3KKc8+c+PPq5bXwlPDwp0klKs3Kcp3d8l2oq398DVqua5mfBw7V0dnRWqLMRm5MzMz5ZnEf70fKO74QEAAAAAA2ZdkZUnkwVgCSBAABAKAAAaRG4AIwlSFZCgAAEAD2bI\/zND\/AHInO79SX0eyv\/Ns\/wD1D7uNxCnhsWm1nhUqU3q0ql4\/JnmopxXT\/vg\/UavU03dFqomfipqqp\/tFeY+UuG1\/Tg7YqmoKlH\/BzJuclv4eBq13T9Xv6vL2t\/1bfw6mmKYpj4M98zHf+j5060Oowp5lnVdycb77We86xTPFmfJ8iu\/bnsym1u+LfnHjjEuu1cdeFGnTq3h0EI1Ixe7MuxktUYmZmPF27T181W7Vu1c+HZEVRHLPm67SpUq0YVFiKSdPDxjkb9JtJu3zM26qqZmNvOXftC1Y1NFF2m\/TE024jbnvmYzP54dOjhWq4JOUcsMNTlU9Jbsv4X8bEzNNNfnLrw7epv6SJqjbTbpmrvjw8PVy29lqxpYqHqzvTl3STdvzNWM0zNEuPbmzU0W9bb5VZpn74zj5ZfFPQ\/OKEAAAAFGBsy7IyszyYKwBJAgAAAAAADSI3ABJBKkKyFAAAAAVO29bnqiLEzE5gAgAAAAAau7Wu7adgXM4wgQABAKAAAGzLsjKzPJgrAEkCAAAAAAANIjpABJBmpCsgAoACAUUKhAAAAKAAAAAAAAAAAroZdmWVieTBWAJIEAIBQAAABuK+hHWmFsFwzNCGa4xhkrmACgQAqlAgAAAAAAAAAAAAAAAAru4Mxl6ptyxNbiw51xiHI04gSQIAAAAAAA6w7fcZl3ojmqa7g1Ex1StwXxEJe5Q5GnnABQAEVQAAAAAAAAAAUABBAgACgH06uVdqXxRyh9q5NEd0zDy1rWdrM1Dw3cTTOHmNvIBJAgAAAAAADrT7fczMvRb8fucjTzu1VejT9z\/ACMxzl6LsYoocTTzgUAAUAAAAAAAAAAAAAACAAAAD0Y+Nqsv+P0Rmnk9WtjF+r+3+HOHqy+BZ5uVH1KmCuaBJAgAAAAAADtTfH3GZem3MRnPRrT3oN55fe9SoxnbN2aOxjMw9sWKLuN3g5bQw0Kag433uV7u+hqmqZcNdprdqmmaPHL6mH2dhOihUqvLmjFtubV212HCq5c3TFL7ljs3s6NPRdvTjMRPN4cU8L6tClOTe5TlKS390eLOlO\/nVL5eqnQT8OmtzM9ZmflHOf74a2fgabqqnXTTlFOCzWb393B8dwrrnbmlvQaCzVfi1qImJqjujPn5f45vu+b+G9mfOzzcet+p+jeh\/ln1lPN7DezPnZePWn0b0PSfWV83sN7M+djj1n0b0PSfU83sN7M+djj1n0c0PSfVPN7DezPnY49Z9G9D0n1ePEbCw1PLnrVI55ZY3cFv8DpF6ueUPnajsDQ2NvEvVRunEcv0+bGI2VgoRUusStuTtUpyblfjwLF25P2XC72R2Zap3VaiZ7\/CaZ\/J6cNsHCyTkqkqq1U42XgYqv1x4Ye\/Tfw9oLkTVTXNceUx+Tt5vYbSfOzPHren6NaHpPqeb2G0nzse0Vp9GtD0n1Tzdw2k+cntFZ9GtF0n1PN3DaT5x7RWfRrQ+fq8eO2XhKcM15pb\/SzNpvRO1mdaLlczh8zW9ldnWLe+JnHXM4+6JxiXx3hXSyyq0pOElezeW\/xXB+87bs90S\/PTparG2u9bnbPnj5xnE+U+j6WDo7Pq2T6SlLSc7L4S4HKqq7T5vs6Sx2PfxFW6irpM93ry\/wAPoS\/+fw\/Yp85y9orfXq\/hzRYzGfV5a2xKC4Z+Y6U3apeG92FpaeWfV5calnprvl\/KzpTyl4dZERdtx9\/+HjxfB\/D6mqXz9V9WXiOj5qBJAgAAAAAAChVuRpuLI6UylSV7FhLlWcQ3ThffJ\/8AhJl0t0Z76pKlVxlaG5buH3ERnmXLk0VYonEN0ajk4tvenckw6WblVdVM1Tyl9NYh6s54fajUT1XrD1fiMNe0z1XrL1fiMHtNXU6y9X4jC+01dTrL1fixtPaaur5WKlKpVeeT42Te9KJ0jujufC1FVV2\/O+f2g6tD9Z8hunovs1v\/ANnyZw1ScJxcJNXavZ2utGWYiY73LT3Llu5E0TjP+976\/WZavxZy2v0PtVXVHiXq\/EbYZnU1dWesPV+LGGZ1NXVHXer8Rhmb8z4vNiptpb3ud13GoePU1zNMd\/J1jiLrfoTDvTqN1Pe4VacJdz7vsaiZea5at19\/Jwyyhwd1\/fYa5vJNNVv6s9zSndJ7\/FkbiuZpzLlN7yuFczllydrdhWZqqxhgrmgQCAAAAAAVILEFgYlYxbJlaaZq5Oiw8n2rxJuh2jT1y3HBTfbHxG6HWnQ3auWPV0jsyq\/Z5ib4do7L1E8serotj1n7HN\/QzxaXWOxdTPT1bWxK+sOb+hONS6R2Fq\/DHqvkXEaw52ONQ17i1vWPxOMtnVlVjRus8o5l6btbf2\/A1xKdu55quzdTGojTzMbpjPPu8f0XDbMr1c+Vr0Jum7za9JcSVXKaebWn7L1V+KpomPhmYnv8YdvImJ1j\/EM8ah6PcWu8vxHkTE6x\/iDjUHuLXeX4k8h4j9jnHHoZ9wazy9U8h4j9jnLxqT3DrPL1PIdf9jnHGpT3DrOkeq+RcTrHnY41DXuPW+X4jyLiNY87HGoT3HrfL8Tx9XqdF01\/Qvl9Z3vfQ3ujO18\/2a9wPaM\/DnHPvetbGxD7Y87McWl747F1kxnMfiHsXEaw5xxqSew9Z1j1PItfWHOXi0p7j1fl6svY9fWHMxxaWZ7G1UdPVh7Kq6w5i8SHOeydRHPHqxLZ9RdseYu+HOezr0eMerlPCyXFrxLuhwr0tymMy5KL4leeKZmMiixlYplkrAAAAAAADSI3TyGBqm+Ilq3PN2jO3Ezh6ouRDUcY1+H52G1Y1s0\/ZdobUt+D\/t\/QnDemjtbb9j5\/s7R20l+B8y+xmbXm9NPbmPsT6\/s2tur9W+ZfYnB83SP4g\/o+f7PRhdrdJLLka478119DNVrD1aXtib1e3Zjzz+zFSr+m03+6a\/mLEfBMOVy7\/wAlRV\/T+reyatlW769R\/Qlynl9zr2Xe2xd865\/J7niLGNr6k6nEM9bXeNjHtsL1xd42L7bB1td44a+2wjxa7xsZnWwLFrvGwjWRKSxPeXYzVqvN8Nz\/AEJR\/efmztj48vzM1\/8AGRT\/AFfm+2sRuXuOO1+ljUd0I6\/eXazOoZdfvG1idR5ucq\/eXDnVqJcZ12aw81d+XnqVS4eS5el5K09z9xqIeG7XmJeWL3G3hpn4RMET3sFcgAAAAAAFRGoAc2ooN0wk3vEM1T3slZAAAD34B74\/H8znU+poZxNP93ab\/SIf6PuT7L0Vz\/3lM+X6u2FWXNv9abl4kl6NNTs3ec5ZxeKULJ3d9+4RTlnU6uLUxE573DyhHSXy+5rZLy+8aOk\/L9TyjHSXy+42SvvKjpPy\/VfKMdJfL7jYe8qOk\/L9U8ox0l8vuNie8qOk\/IW0Y6S+Q2EdpUx4S9VRXW9u2nY\/eYh7rkRXHfPd0eHERy0FHsz\/AHNxzfMv07NNFPm+gpGH1t04Gwky4YmuoK7u2+CNRGXm1F+LVOZ8Xkp4ipbdFtb9+9mpiHz6NRex3U5hjrM16ye9337i7YYjU3KZ+OHVVMyujOMO\/EiuMw5VGWHCuXHgaebGIS4TLJWAAAAAAAALC3C5VSIsVMsrMgAAAA9OFqKLV3a1zNUPXprlNExMy6yrx6WMsyso2v37yY7neq\/ROoivPdj9XaGJgvxIztl6KdVbj7Tz46pGaVmm19DVMYeXW3bdyImmcy8Zt88AAAAH1HiYW9ZHLbL7U6q3j6zzYmqnCyae9GqY73k1N6mq3iJ8Xp61D2kZ2y9ntdv+Y6zD2l8xtk9rt\/zPPjKsZJJNOzuapjDx6u9RciIicvPGrJKyk0veaw8tN2umMRKTm5cXcRDNddVfOctU5pKxJh0t3IppwSmtS4SquJYuGMoVlAyAAAAAAABQAAAAWwAAkFw6RpLVky7RajqmRZrb+Ayzw43YIU078dzsMrRbictdEtWTLXBjqdEtWMnBp6nRLVjJwY6nRLVjJwY6nRLVjJwY6nRLVjJwo6p0S1ZcpwoYy7r94ctvw5b6NasZdOHB0a7xk4cJ0a7xlOHCZF3jJsgyIZTZBlCbYRoqTSlgygMAAAACP\/\/Z)","7df8e0b3":"# Using Visualization to define data and show many "}}