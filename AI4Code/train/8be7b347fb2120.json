{"cell_type":{"8a6c4337":"code","bfb21a55":"code","1938b5a6":"code","93658029":"code","f14e38b9":"code","635dc1cd":"code","a08c46dd":"code","c17de970":"code","59caaf4a":"code","0a83c03b":"code","bd8bc572":"code","66d7bd8b":"code","f6b7ae04":"code","0d05dc7d":"code","a7c8b786":"code","ab18f87d":"code","4c9b287d":"code","9f50c0da":"code","e1363f17":"code","5d0a1221":"code","e972123f":"code","a075d89a":"code","59e97d89":"code","4e6f6019":"code","df18bbbb":"code","fb256efe":"code","7f489edd":"code","5a537e55":"code","57f4e94e":"code","3882c7d9":"code","0af11905":"code","f639fa43":"code","56798b2c":"code","22988a7f":"code","3b242bb4":"code","2759ae49":"code","74df54fc":"code","3bef412d":"code","0f05095d":"code","bd74ed46":"code","fab4286b":"code","5fa83526":"code","03d48baf":"code","c311cf38":"code","09409c03":"code","06885783":"code","071f685d":"code","fc1dfb6a":"code","36c7945a":"code","836417f1":"code","6cf93fdb":"code","eb176f42":"code","0da91952":"code","918ae576":"code","ee631df4":"code","b2372e64":"code","6e5d56bb":"code","4c2ef7f1":"markdown","8e4a92a6":"markdown","25dff3fb":"markdown","407548c6":"markdown","564bf6ec":"markdown","4cdec52f":"markdown","ceb1cbb2":"markdown","80fa2930":"markdown","c31356a8":"markdown","b6686ab2":"markdown","0f765d5f":"markdown","1b24e46a":"markdown","75cf2f22":"markdown","fbd4b883":"markdown","b36fd90c":"markdown","6a7dda44":"markdown","da6a11f6":"markdown","87acbb7a":"markdown","38a5eb1a":"markdown","60c2ca0a":"markdown","7dba5f72":"markdown","d2de8c10":"markdown","ba864fe9":"markdown","770546ec":"markdown","b2bfa01d":"markdown","f5ea5247":"markdown","07d391ab":"markdown","5cd1defb":"markdown","eb45b0d0":"markdown","a9cd5cf1":"markdown","79863a59":"markdown","90f976d0":"markdown","47d0b439":"markdown","a40e9a22":"markdown","7308a7a1":"markdown","58c615d9":"markdown","86e942fe":"markdown","a967d0c4":"markdown","8bacd8fa":"markdown","8e8dd611":"markdown","ddd78e18":"markdown","c962c847":"markdown","f5f714b2":"markdown","63de4c47":"markdown","723d839d":"markdown"},"source":{"8a6c4337":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n!pip install varname\nfrom varname import nameof\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bfb21a55":"# For sentiment analysis, we use VADER library\nimport nltk\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsid = SentimentIntensityAnalyzer()\n\n# Sentiment Analysis function\ndef sentiment_analysis(tweet):\n    score = sid.polarity_scores(tweet)[\"compound\"]\n    if score > 0:\n        return \"positive\"\n    elif score < 0:\n        return \"negative\"\n    else:\n        return \"neutral\"","1938b5a6":"# changing the directory to read the database\n\n# reading the database\nraw_company_db = pd.read_csv(\"\/kaggle\/input\/tweets-about-the-top-companies-from-2015-to-2020\/Company.csv\")\nraw_company_tweet_db = pd.read_csv(\"\/kaggle\/input\/tweets-about-the-top-companies-from-2015-to-2020\/Company_Tweet.csv\")\nraw_tweet_db = pd.read_csv(\"\/kaggle\/input\/tweets-about-the-top-companies-from-2015-to-2020\/Tweet.csv\")\nraw_companyvalue_db = pd.read_csv(\"\/kaggle\/input\/companyvaluescsv\/CompanyValues.csv\")","93658029":"raw_company_db.head(2)","f14e38b9":"raw_company_tweet_db.head(2)","635dc1cd":"raw_tweet_db.head(2)","a08c46dd":"raw_companyvalue_db.head(2)","c17de970":"# Part1: Merge raw_company_tweet_db, raw_company_db\nraw_company_tweet_db = pd.merge(raw_company_tweet_db, raw_company_db,on='ticker_symbol')\n\n# Part2: Merge raw_company_tweet_db, raw_company_db\nraw_tweet_db = pd.merge(raw_tweet_db, raw_company_tweet_db, on=\"tweet_id\")","59caaf4a":"# Veiwing the marged Dataframe \nraw_tweet_db.head(2)","0a83c03b":"# Saving the names of dataframes so we can use it if required in future\nraw_tweet_db.name = nameof(raw_tweet_db)\nraw_companyvalue_db.name = nameof(raw_companyvalue_db)","bd8bc572":"list_df = [raw_tweet_db, raw_companyvalue_db]","66d7bd8b":"# Let us check the number of rows and columns in the dataframes\n[print(f\"For Dataframe {df.name}\\nNumber of Rows are {df.shape[0]}\\nNumber of Columns are {df.shape[1]}\\n\\n\") for df in list_df]","f6b7ae04":"[print(f\"For DataFrame {df.name}, we have missing values check as\\n{df.isna().sum()}\\n\\n\") for df in list_df]","0d05dc7d":"# From the above, we see that dataframe raw_tweet_db has 55919 missing values in column 'writer'.\n# So we will replace it with the name 'anonymous'","a7c8b786":"raw_tweet_db.writer = raw_tweet_db.writer.fillna('anonymous')","ab18f87d":"# let us check if all null values are replaced\nraw_tweet_db.isna().sum()","4c9b287d":"# So all missing vlaues are replaced by 'anonymous'","9f50c0da":"[print(f\"for DataFrame {df.name}\\n{df.info()}\\n\") for df in list_df]","e1363f17":"raw_tweet_db.post_date = pd.to_datetime(raw_tweet_db.post_date, unit=\"s\")\nraw_companyvalue_db.day_date = pd.to_datetime(raw_companyvalue_db.day_date)","5d0a1221":"raw_companyvalue_db.head(2)","e972123f":"# for checking the chronologically first tweet in the dataframe, we sort the dataframe by date column\nraw_tweet_db.sort_values(by=\"post_date\", inplace=True)\nraw_companyvalue_db.sort_values(by=\"day_date\", inplace=True)","a075d89a":"# Let us view the head and tail of the dataframe to see the start and end dates","59e97d89":"raw_tweet_db.head(3)","4e6f6019":"raw_tweet_db.tail(3)","df18bbbb":"raw_companyvalue_db.head(3)","fb256efe":"raw_companyvalue_db.tail(3)","7f489edd":"raw_companyvalue_db = raw_companyvalue_db[raw_companyvalue_db.day_date < \"2020-01-01\"]","5a537e55":"raw_companyvalue_db.tail()","57f4e94e":"# Let us add column to the stock price dataframe which shows the max stock price fluctuation\nraw_companyvalue_db['fluctuation'] = raw_companyvalue_db.high_value - raw_companyvalue_db.low_value\n\n# Let us add column to the stock price dataframe which shows the net rise in stock price\nraw_companyvalue_db['price_gain'] = raw_companyvalue_db.close_value - raw_companyvalue_db.open_value\n\n# Let us add column to the stock price dataframe which shows the total valuation at the end of the day\nraw_companyvalue_db['total_valuation_EOD'] = raw_companyvalue_db.volume * raw_companyvalue_db.close_value","3882c7d9":"raw_companyvalue_db.head(3)","0af11905":"raw_tweet_db.head(3)","f639fa43":"raw_tweet_db['sentiment'] = raw_tweet_db['body'].apply(lambda x : sentiment_analysis(x))","56798b2c":"raw_tweet_db.head(2)","22988a7f":"# Considering there is a 'comment,  retweet & like' column, we can consider those tweets having the same sentiments\n# So for counting the total number of tweets, we add a count column telling the trending score of the tweet which will be addition of all these 3 columns\n# Adding 1 to trend score as tweet itself is one of the contributors to itself\n\nraw_tweet_db.insert(7, \"trend_score\", raw_tweet_db.comment_num + raw_tweet_db.retweet_num + raw_tweet_db.like_num + 1)","3b242bb4":"raw_tweet_db.head(2)","2759ae49":"# Creating Anchor Column for raw_tweet_db\nraw_tweet_db.insert(3, \"date_str\", raw_tweet_db.post_date.astype(\"str\").str.split(\" \"))\nraw_tweet_db.date_str = [element[0] for element in raw_tweet_db.date_str]\nraw_tweet_db.insert(0, \"anchor\", raw_tweet_db.date_str + raw_tweet_db.ticker_symbol)\n\n# Creating Anchor Column for raw_companyvalue_db\nraw_companyvalue_db.insert(\n    2, \"date_str\", raw_companyvalue_db.day_date.astype(\"str\").str.split(\" \")\n)\nraw_companyvalue_db.date_str = [element[0] for element in raw_companyvalue_db.date_str]\nraw_companyvalue_db.insert(\n    0, \"anchor\", raw_companyvalue_db.date_str + raw_companyvalue_db.ticker_symbol\n)","74df54fc":"# Merging the two dataframe\nprocessed_db = pd.merge(raw_tweet_db, raw_companyvalue_db, on=\"anchor\")","3bef412d":"# Let us convert he string date column \"date_str_x\" to datetime\nprocessed_db.date_str_x = pd.to_datetime(processed_db.date_str_x)","0f05095d":"# Since we are aiming to see the impact of tweets on stock value (i.e. rise and fall), we can drop \"neutral\" sentiments\nprocessed_db = processed_db[processed_db.sentiment != \"neutral\"]","bd74ed46":"# Let us make a clean dataset with only the desired values\nclean_db = processed_db[\n    [\n        \"post_date\",\n        \"date_str_x\",\n        \"body\",\n        \"trend_score\",\n        \"ticker_symbol_x\",\n        \"company_name\",\n        \"sentiment\",\n        \"close_value\",\n        \"volume\",\n        \"open_value\",\n        \"high_value\",\n        \"low_value\",\n        \"fluctuation\",\n        \"price_gain\",\n        \"total_valuation_EOD\"\n    ]\n]","fab4286b":"# Let us check how many companies do we have in our dataset\n\nprint(\n    f\"In our dataset, we have total {len(clean_db.company_name.value_counts())} companies, namely\\n{clean_db.company_name.value_counts()}\"\n)","5fa83526":"# Let us check by ticker symbol\nclean_db.ticker_symbol_x.value_counts()","03d48baf":"# after checking the ticker symbol, we see that Google Inc has 2 ticker symbols: GOOG and GOOGL\n# Let us change that so all Google Inc tickers have the same symbol as GOOG\nclean_db.ticker_symbol_x.replace(\"GOOGL\", \"GOOG\", inplace=True)","c311cf38":"# Let us make datasets for these 5 companies\napple_df = clean_db[clean_db.ticker_symbol_x == \"AAPL\"]\ntesla_df = clean_db[clean_db.ticker_symbol_x == \"TSLA\"]\namazon_df = clean_db[clean_db.ticker_symbol_x == \"AMZN\"]\ngoogle_df = clean_db[clean_db.ticker_symbol_x == \"GOOG\"]\nmicrosoft_df = clean_db[clean_db.ticker_symbol_x == \"MSFT\"]","09409c03":"# For simplicity, we will further form 2 sub dataframes per company based on the sentiments: positive and negative\n\npos_apple_df = apple_df[apple_df.sentiment == \"positive\"]\npos_tesla_df = tesla_df[tesla_df.sentiment == \"positive\"]\npos_amazon_df = amazon_df[amazon_df.sentiment == \"positive\"]\npos_google_df = google_df[google_df.sentiment == \"positive\"]\npos_microsoft_df = microsoft_df[microsoft_df.sentiment == \"positive\"]\nneg_apple_df = apple_df[apple_df.sentiment == \"negative\"]\nneg_tesla_df = tesla_df[tesla_df.sentiment == \"negative\"]\nneg_amazon_df = amazon_df[amazon_df.sentiment == \"negative\"]\nneg_google_df = google_df[google_df.sentiment == \"negative\"]\nneg_microsoft_df = microsoft_df[microsoft_df.sentiment == \"negative\"]","06885783":"# Let us create dataset with limited values that give us a brief info about rise and fall in total valuation of the company over time\n\novr_pos_apple_df = pos_apple_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\novr_pos_tesla_df = pos_tesla_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\novr_pos_amazon_df = pos_amazon_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\novr_pos_google_df = pos_google_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\novr_pos_microsoft_df = pos_microsoft_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\n\novr_neg_apple_df = neg_apple_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\novr_neg_tesla_df = neg_tesla_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\novr_neg_amazon_df = neg_amazon_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\novr_neg_google_df = neg_google_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})\novr_neg_microsoft_df = neg_microsoft_df.groupby(by=[\"date_str_x\",\"fluctuation\", \"price_gain\", \"total_valuation_EOD\",\"sentiment\"], as_index=False).agg({\"trend_score\":pd.Series.sum})","071f685d":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Tesla: Effect of Positive Tweets on Valuation\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_pos_tesla_df.date_str_x,\n    ovr_pos_tesla_df.total_valuation_EOD,\n    color=\"y\",\n    label=\"Valuation\",\n)\nax2.plot(\n    ovr_pos_tesla_df.date_str_x,\n    ovr_pos_tesla_df.trend_score,\n    color=\"b\",\n    label=\"Positive Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Valuation\")\nax2.set_ylabel(\"Positive Tweets\")\n\nplt.legend()\nplt.show()","fc1dfb6a":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Tesla: Effect of Negative Tweets on Value Gain\/Loss\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_neg_tesla_df.date_str_x,\n    ovr_neg_tesla_df.price_gain,\n    color=\"y\",\n    label=\"Value\",\n)\nax2.plot(\n    ovr_neg_tesla_df.date_str_x,\n    ovr_neg_tesla_df.trend_score,\n    color=\"r\",\n    label=\"Negative Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Value Gain\/Loss\")\nax2.set_ylabel(\"Negative Tweets\")\n\nplt.legend()\nplt.show()","36c7945a":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Tesla: Effect of Negative Tweets on Value Gain\/Loss\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_neg_tesla_df.date_str_x,\n    np.log(ovr_neg_tesla_df.price_gain),\n    color=\"y\",\n    label=\"Value\",\n)\nax2.plot(\n    ovr_neg_tesla_df.date_str_x,\n    ovr_neg_tesla_df.trend_score,\n    color=\"r\",\n    label=\"Negative Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Value Gain\/Loss\")\nax2.set_ylabel(\"Negative Tweets\")\n\nplt.legend()\nplt.show()","836417f1":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Apple: Effect of Positive Tweets on Valuation\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_pos_apple_df.date_str_x,\n    ovr_pos_apple_df.total_valuation_EOD,\n    color=\"y\",\n    label=\"Valuation\",\n)\nax2.plot(\n    ovr_pos_apple_df.date_str_x,\n    ovr_pos_apple_df.trend_score,\n    color=\"b\",\n    label=\"Positive Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Valuation\")\nax2.set_ylabel(\"Positive Tweets\")\n\nplt.legend()\nplt.show()","6cf93fdb":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Apple: Effect of Negative Tweets on Value Gain\/Loss\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_neg_apple_df.date_str_x,\n    np.log(ovr_neg_apple_df.price_gain),\n    color=\"y\",\n    label=\"Value\",\n)\nax2.plot(\n    ovr_neg_apple_df.date_str_x,\n    ovr_neg_apple_df.trend_score,\n    color=\"r\",\n    label=\"Negative Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Value Gain\/Loss\")\nax2.set_ylabel(\"Negative Tweets\")\n\nplt.legend()\nplt.show()","eb176f42":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Amazon: Effect of Positove Tweets on Valuation\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_pos_amazon_df.date_str_x,\n    ovr_pos_amazon_df.total_valuation_EOD,\n    color=\"y\",\n    label=\"Valuation\",\n)\nax2.plot(\n    ovr_pos_amazon_df.date_str_x,\n    ovr_pos_amazon_df.trend_score,\n    color=\"b\",\n    label=\"Positive Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Valuation\")\nax2.set_ylabel(\"Positive Tweets\")\n\nplt.legend()\nplt.show()","0da91952":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Amazon: Effect of Negative Tweets on Value Gain\/Loss\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_neg_amazon_df.date_str_x,\n    np.log(ovr_neg_amazon_df.price_gain),\n    color=\"y\",\n    label=\"Value\",\n)\nax2.plot(\n    ovr_neg_amazon_df.date_str_x,\n    ovr_neg_amazon_df.trend_score,\n    color=\"r\",\n    label=\"Negative Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Valuation\")\nax2.set_ylabel(\"Negative Tweets\")\n\nplt.legend()\nplt.show()","918ae576":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Google: Effect of Positove Tweets on Valuation\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_pos_google_df.date_str_x,\n    ovr_pos_google_df.total_valuation_EOD,\n    color=\"y\",\n    label=\"Valuation\",\n)\nax2.plot(\n    ovr_pos_google_df.date_str_x,\n    ovr_pos_google_df.trend_score,\n    color=\"b\",\n    label=\"Positive Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Valuation\")\nax2.set_ylabel(\"Positive Tweets\")\n\nplt.legend()\nplt.show()","ee631df4":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Google: Effect of Negative Tweets on Value Gain\/Loss\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_neg_google_df.date_str_x,\n    np.log(ovr_neg_google_df.price_gain),\n    color=\"y\",\n    label=\"Value\",\n)\nax2.plot(\n    ovr_neg_google_df.date_str_x,\n    ovr_neg_google_df.trend_score,\n    color=\"r\",\n    label=\"Negative Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Valuation\")\nax2.set_ylabel(\"Negative Tweets\")\n\nplt.legend()\nplt.show()","b2372e64":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Microsoft: Effect of Positove Tweets on Valuation\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_pos_microsoft_df.date_str_x,\n    ovr_pos_microsoft_df.total_valuation_EOD,\n    color=\"y\",\n    label=\"Valuation\",\n)\nax2.plot(\n    ovr_pos_microsoft_df.date_str_x,\n    ovr_pos_microsoft_df.trend_score,\n    color=\"b\",\n    label=\"Positive Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Valuation\")\nax2.set_ylabel(\"Positive Tweets\")\n\nplt.legend()\nplt.show()","6e5d56bb":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nplt.figure(figsize=(15, 6))\nplt.title(\"Microsoft: Effect of Negative Tweets on Value Gain\/Loss\")\n# since we are plotting 2 line graphs with same X-axis\nax1 = plt.gca()\nax2 = plt.twinx()\n\n\nax1.plot(\n    ovr_neg_microsoft_df.date_str_x,\n    np.log(ovr_neg_microsoft_df.price_gain),\n    color=\"y\",\n    label=\"Value\",\n)\nax2.plot(\n    ovr_neg_microsoft_df.date_str_x,\n    ovr_neg_microsoft_df.trend_score,\n    color=\"r\",\n    label=\"Negative Tweets\",\n)\n\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Valuation\")\nax2.set_ylabel(\"Negative Tweets\")\n\nplt.legend()\nplt.show()","4c2ef7f1":"## Making a clean database","8e4a92a6":"### We will convert:<br>'post_date' column in raw_tweet_db & <br>'day_date' column in raw_companyvalue_db to<br>to datetime for further processing","25dff3fb":"### From the above graph we see that generally where there is a spike in Negative Tweets, \n### the price gain is negative i.e. there is drop in valuation\n\n### We can conclude that Microsoft's valuation is affected by Tweets","407548c6":"### Let us work on merging the 2 dataframes. For that, we need an anchor column to merge on","564bf6ec":"# 3. Data Engineering","4cdec52f":"## Tesla","ceb1cbb2":"### We notice that where there is a spike in Positive Tweets, there is spike in the valuation\n\n### Let us plot line graph to analyse effect of Negative Tweets & its effect on net gain\/loss in valuation","80fa2930":"## Google","c31356a8":"## Apple","b6686ab2":"### Let us analyse for Amazon\n\n### We will analyse effect of Positive Tweets on Valuation","0f765d5f":"### From the above graph we see that generally where there is a spike in Negative Tweets, \n### the price gain is negative i.e. there is drop in valuation\n\n### We can conclude that Google's valuation is affected by Tweets","1b24e46a":"### We notice that where there is a spike in Positive Tweets, there is spike in the valuation\n\n### Let us plot line graph to analyse effect of Negative Tweets & its effect on net gain\/loss in valuation","75cf2f22":"### Applying sentiment analysis to the tweets:","fbd4b883":"# 4. Data Analysis","b36fd90c":"# Starter Kit:\n* Loading Libraries\n* Creating Sentiment Analysis Function\n* Loading DataFrames","6a7dda44":"## Amazon","da6a11f6":"## Viweing the dates at the head and tail end of the dataframe, we see that:\n#### a. starting date to considered as 1 Jan 2015\n#### b. last tweet in raw_tweet_db dataframe was tweeted on 31 Dec 2019 \n#### c. but the stock values are given till 29 May 2020.\n\n#### So we will drop the values for the year 2020.","87acbb7a":"#### Loading DataFrames","38a5eb1a":"### Let us analyse for Apple\n\n### We will analyse effect of Positive Tweets on Valuation","60c2ca0a":"#### let us check the data types of columns","7dba5f72":"# Conclusion\n\n## From analysing the given data, we conclude that:\n* Positive Tweet Spikes (high trending) coincide with rise in stock value\n* Negative Tweet Spikes (high trending) overall coincide with drop in stock value, however it is not as obvious as Positive Tweets\n* (Naturally) there are also other factors contributing to rise\/fall of stock values as we see no relation to rise\/fall of stock value with low-medium trending tweets.","d2de8c10":"### Let us analyse for Microsoft\n\n### We will analyse effect of Positive Tweets on Valuation","ba864fe9":"### Let us analyse for Tesla\n### We will analyse effect of Positive Tweets on Valuation","770546ec":"##### Notebook by = Shounak Deshpande (shounak.python@gmail.com)\n* LinkedIn: https:\/\/www.linkedin.com\/in\/shounak-deshpande-ab80b0105\/\n* GitHub: https:\/\/github.com\/shounak8\n* Website: https:\/\/indomitable-tech.herokuapp.com\/\n##### Please leave a critical feedback so I can improve \ud83d\ude01","b2bfa01d":"#### Missing values check: Let us check if there are any missing values","f5ea5247":"### From the above graph we see that there is no proper correlation between negative tweets and drop in Apple share value\n### We can conclude that Apple's valuation is affected only by Positive Tweets","07d391ab":"### We notice that where there is a spike in Positive Tweets, there is spike in the valuation\n\n### Let us plot line graph to analyse effect of Negative Tweets & its effect on net gain\/loss in valuation","5cd1defb":"### From the above graph we see that where there is a spike in Negative Tweets,\n### the price gain is negative i.e. there is drop in valuation\n\n### We can conclude that Amazon's valuation is affected by Tweets","eb45b0d0":"# 2. Data Cleaning","a9cd5cf1":"### Let us analyse for Google\n\n### We will analyse effect of Positive Tweets on Valuation","79863a59":"### We see that it becomes difficult to understand the effect of negative tweets on stock price. Hence, let us plot by taking the log values of \"price_gain\"","90f976d0":"# What this Notebook Contains ?\n### This notebook contains the analysis of tweets and their effects on Stock Values of companies.<br><br>The companies in consideration are Amazon, Apple, Tesla, Google and Microsoft","47d0b439":"### We notice that where there is a spike in Positive Tweets, there is spike in the valuation\n\n### Let us plot line graph to analyse effect of Negative Tweets & its effect on net gain\/loss in valuation","a40e9a22":"### From the above graph we see that where there is a spike in Negative Tweets, \n### the price gain is negative i.e. there is drop in valuation\n\n### We can conclude that Tesla's valuation is affected by Tweets","7308a7a1":"#### Taking logs seems to provide better viewing of the graph. Hence, we will take log values of 'price_gain' column while plotting","58c615d9":"### Adding a column specifying the trending score of every tweet considering the retweet count, likes and comments for that tweet","86e942fe":"#### Creating Sentiment Analysis","a967d0c4":"# 1. Preliminary Introspection of the data","8bacd8fa":"### We will add additional columns to raw_companyvalue_db which we will need in future for checking the stock value performance","8e8dd611":"#### Loading Libraries","ddd78e18":"#### Merging the DataFrames to form one single DataFrame","c962c847":"# Microsoft","f5f714b2":"### We notice that where there is a spike in Positive Tweets, there is spike in the valuation\n\n### Let us plot line graph to analyse effect of Negative Tweets & its effect on net gain\/loss in valuation","63de4c47":"## Viweing the Raw DataFrames","723d839d":"# Procedure:\n#### 1. Preliminary Introspection of the data <br><br>2. Data Cleaning<br><br>3. Data Engineering<br><br>4. Data Analysis"}}