{"cell_type":{"ae7482ba":"code","412e58e4":"code","a6c78671":"code","4c96d84d":"code","e6dad9bd":"code","b50461af":"code","b4004522":"code","8e821ef8":"code","9491cd37":"code","a6bd9629":"code","7db0ed73":"code","94851314":"code","2577f7ab":"code","e6d5f73b":"code","4ab90fd7":"code","2bb883bb":"code","11d45fc5":"code","a0fed1ad":"code","f79a0658":"code","17dc8315":"code","b2860d2d":"code","d6254c02":"code","40f7a8ed":"code","6b131024":"code","4e7b3974":"code","efa9d274":"code","01427fad":"code","90443089":"code","3edc262b":"code","87b273fe":"code","b431bda9":"code","0f4136b4":"code","d7766b1a":"code","749ad2c2":"code","8d0802a6":"markdown","7d52c286":"markdown","09432185":"markdown","15a01db4":"markdown","0faa90ac":"markdown","a956a1f3":"markdown","ea609842":"markdown","d77d4c1e":"markdown","1a85e29a":"markdown","ed87da98":"markdown","76221beb":"markdown","e4f2cdb4":"markdown","5028e8d8":"markdown","5fec8934":"markdown","84ccbe9b":"markdown","d055dc7d":"markdown","0d06ea07":"markdown","9d21b800":"markdown","e8fb032b":"markdown","a69eb7f9":"markdown","55bc99fd":"markdown","ffdc3708":"markdown"},"source":{"ae7482ba":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split\nimport spacy\nfrom spacy import displacy\nfrom gensim.similarities.annoy import AnnoyIndexer\nimport gensim.downloader as api\nfrom gensim.models.word2vec import Word2Vec\nimport nltk\nfrom sklearn.datasets import fetch_20newsgroups\nfrom wordcloud import WordCloud\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.gridspec as gridspec\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\nfrom sklearn.preprocessing import OneHotEncoder","412e58e4":"df = pd.read_csv('..\/input\/iba-ml1-final-project\/train.csv')\ndf.head()","a6c78671":"df.info()","4c96d84d":"df.describe()","e6dad9bd":"df.isna().sum()","b50461af":"sns.countplot(x=df[~df['Review'].isna()]['Rating'])\nplt.show()\nprint('Average rating of people who wrote Review was', np.mean(df[~df['Review'].isna()]['Rating']))\nsns.countplot(x=df[df['Review'].isna()]['Rating'])\nplt.show()\nprint('Average rating of people who did not wrote Review was', np.mean(df[df['Review'].isna()]['Rating']))","b4004522":"sns.countplot(x=df[~df['Review_Title'].isna()]['Rating'])\nplt.show()\nprint('Average rating of people who wrote Review_Title was', np.mean(df[~df['Review'].isna()]['Rating']))\n\nsns.countplot(x=df[df['Review_Title'].isna()]['Rating'])\nplt.show()\nprint('Average rating of people who did not wrote Review_Title was', np.mean(df[df['Review'].isna()]['Rating']))","8e821ef8":"sns.countplot(x=df[~df['Review'].isna()]['Recommended'])\nprint('Average Recommended score of people who wrote Review was', np.mean(df[~df['Review'].isna()]['Recommended']))\nplt.show()\nsns.countplot(x=df[df['Review'].isna()]['Recommended'])\nprint('Average Recommended score of people who wrote Review was', np.mean(df[df['Review'].isna()]['Recommended']))\nplt.show()","9491cd37":"sns.countplot(x=df[~df['Review_Title'].isna()]['Recommended'])\nprint('Average Recommended score of people who wrote Review_Title was', \n      np.mean(df[~df['Review_Title'].isna()]['Recommended']))\nplt.show()\n\nsns.countplot(x=df[df['Review_Title'].isna()]['Recommended'])\nprint('Average Recommended score of people who did not wrote Review_Title was', \n      np.mean(df[df['Review_Title'].isna()]['Recommended']))\nplt.show()\n","a6bd9629":"sns.boxplot(x=\"Rating\", y=\"Age\", data=df)","7db0ed73":"sns.countplot(x='Recommended', data=df)","94851314":"sns.boxplot(x=\"Recommended\", y=\"Age\", data=df)","2577f7ab":"df['Division'].value_counts()","e6d5f73b":"df['Division'].isna().sum()","4ab90fd7":"sns.countplot(x='Recommended', data=df, hue='Division')","2bb883bb":"df['Department'].value_counts()","11d45fc5":"sns.countplot(x='Recommended', data=df, hue='Department')","a0fed1ad":"df['Product_Category'].value_counts()","f79a0658":"df['Product_Category'] = df['Product_Category'].fillna(value=df['Product_Category'].mode()[0])\ndf['Department'] = df['Department'].fillna(value=df['Department'].mode()[0])\ndf['Division'] = df['Division'].fillna(value=df['Division'].mode()[0])","17dc8315":"df['Review'] = df['Review'].fillna(value='nan')\ndf['Review_Title'] = df['Review_Title'].fillna(value='nan')","b2860d2d":"df.isna().sum()","d6254c02":"df.info()","40f7a8ed":"df['Rating'] = df['Rating'].apply(lambda s: str(s))\ndf['Recommended'] = df['Recommended'].apply(lambda s: str(s))","6b131024":"df.info()","4e7b3974":"wordcloud = WordCloud(\n    background_color='white',\n    max_words=300,\n    max_font_size=200, \n    width=1000, height=800,\n    random_state=42,\n).generate(\" \".join(df['Review'].astype(str)))","efa9d274":"print(wordcloud)\nfig = plt.figure(figsize = (12,14))\nplt.imshow(wordcloud)\nplt.title(\"WORD CLOUD - DESCRIPTION\",fontsize=25)\nplt.axis('off')\nplt.show()","01427fad":"wordcloud_title = WordCloud(\n    background_color='white',\n    max_words=300,\n    max_font_size=200, \n    width=1000, height=800,\n    random_state=42,\n).generate(\" \".join(df['Review_Title'].astype(str)))","90443089":"print(wordcloud_title)\nfig = plt.figure(figsize = (12,14))\nplt.imshow(wordcloud_title)\nplt.title(\"WORD CLOUD - DESCRIPTION\",fontsize=25)\nplt.axis('off')\nplt.show()","3edc262b":"msk = np.random.rand(len(df)) < 0.8\ntrain_df = df[msk]\ntest_df = df[~msk]","87b273fe":"count_vectorizer = feature_extraction.text.CountVectorizer()\n\n## let's get counts for the first 2 reviews in the data\nexample_train_vectors = count_vectorizer.fit_transform(train_df[\"Review\"][0:3])\n\nprint(example_train_vectors[0].todense().shape)\nprint(example_train_vectors[0].todense())","b431bda9":"train_vectors = count_vectorizer.fit_transform(train_df[\"Review\"])\ntest_vectors = count_vectorizer.transform(test_df[\"Review\"])","0f4136b4":"clf = linear_model.RidgeClassifier()","d7766b1a":"scores = model_selection.cross_val_score(clf, train_vectors, train_df[\"Recommended\"], cv=3)\nprint(\"Accuracy for Recommended variable\",np.mean(scores))","749ad2c2":"scores = model_selection.cross_val_score(clf, train_vectors, train_df[\"Rating\"], cv=3)\nprint(\"Accuracy for Recommended variable\",np.mean(scores))","8d0802a6":"### The dataset is imbalanced we will undersample it in the Model notebook before running the model","7d52c286":"### Count Vecotrizer","09432185":"# Now we will analyze Review and Review_Title","15a01db4":"A lot of review titles are missing\n\nAnd 501 reviews are  missing ","0faa90ac":"### The results are not bad but not perfect either. For more accurate models please follow model notebook ","a956a1f3":"### Wordcloud of Review_Title","ea609842":"## Product_Category, Department and Division has missing values and we will fill them with most frequent","d77d4c1e":"## We got rid off missing columns, but we will try different techniques with different models in the future","1a85e29a":"### The conclusion is people who did not wrote reviews were more likely to give higher rating","ed87da98":"The result above tells us there are 64 different tokens in first 3 reviews","76221beb":"## Now lets check if data is imbalanced","e4f2cdb4":"I will try to visualize how people who did not wrote review are rating and recommending","5028e8d8":"### Wordcloud of reviews","5fec8934":"## There is no notable pattern between the ages and the rating","84ccbe9b":"We have three types of division","d055dc7d":"### I will convert Rating and Recommended columns string to because our problem is classification","0d06ea07":"# Thanks","9d21b800":"### There is not much that we can figure out from this graph but it seems 'Intimate' department is fluctuating \n### Perhaps this can be useful for our algorithm ","e8fb032b":"### This is how people who writes review ratings look like","a69eb7f9":"## Let's see how likely people who did not write review or review title are recommending","55bc99fd":"### There are a lot more missing columns in Review title column","ffdc3708":"## There is no notable pattern between the ages and the rating or reccomendation"}}