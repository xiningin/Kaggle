{"cell_type":{"fe63c5a2":"code","168b63f7":"code","031a7460":"code","57c308af":"code","f874dece":"code","97c02807":"code","909cd9f5":"code","f788c134":"code","f8e04f3a":"code","ca196a4b":"code","2a2283b7":"code","8b0de531":"code","825e6dcf":"code","c61b3439":"code","4fe9e5bd":"code","6a9aef23":"code","80abaa31":"code","73205f7b":"code","c0de08c9":"code","7fd5d257":"code","ec72d1e7":"code","c9f19a27":"code","9306a4cb":"code","8ce2b475":"code","20efabaa":"code","7dbb58be":"code","3c85fe2b":"code","d8563d1f":"code","e9ce0b4b":"code","1670f6e8":"code","8449956d":"code","9c725d2b":"code","96c7c329":"code","3eb55497":"code","b581e6a8":"code","da285c04":"code","29f52b1d":"code","14659889":"code","d9e81f04":"code","d6adf4a1":"code","5190ad3f":"code","e8f3e6c0":"code","788490dc":"code","7fbf5958":"code","285750e4":"code","7eb93620":"code","82704429":"code","ec74e9c8":"code","08b4b9b4":"code","4573e095":"code","605cc404":"code","8b58a3f7":"code","4355f112":"code","5bc8d6f4":"code","50024281":"markdown"},"source":{"fe63c5a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","168b63f7":"building_df = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/building_metadata.csv\")\nweather_train = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_train.csv\")\ntrain = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/train.csv\")","031a7460":"building_df","57c308af":"weather_train","f874dece":"train","97c02807":"train = train.merge(building_df, left_on = \"building_id\", right_on = \"building_id\", how = \"left\")","909cd9f5":"weather_train","f788c134":"train = train.merge(weather_train, left_on = [\"site_id\", \"timestamp\"], right_on = [\"site_id\", \"timestamp\"], how = \"left\")","f8e04f3a":"del weather_train","ca196a4b":"train[\"timestamp\"] = pd.to_datetime(train[\"timestamp\"])\ntrain[\"hour\"] = train[\"timestamp\"].dt.hour\ntrain[\"day\"] = train[\"timestamp\"].dt.day\ntrain[\"weekend\"] = train[\"timestamp\"].dt.weekday\ntrain[\"month\"] = train[\"timestamp\"].dt.month","2a2283b7":"#looks like there may be some errors with some of the readings\ntrain[train[\"site_id\"] == 0].plot(\"timestamp\", \"meter_reading\")","8b0de531":"train[train[\"site_id\"] == 2].plot(\"timestamp\", \"meter_reading\")","825e6dcf":"train[[\"hour\", \"day\", \"weekend\", \"month\"]]","c61b3439":"train = train.drop(\"timestamp\", axis = 1)","4fe9e5bd":"from sklearn.preprocessing import LabelEncoder","6a9aef23":"le = LabelEncoder()\ntrain[\"primary_use\"] = le.fit_transform(train[\"primary_use\"])","80abaa31":"categoricals = [\"building_id\", \"primary_use\", \"hour\", \"day\", \"weekend\", \"month\", \"meter\"]","73205f7b":"train","c0de08c9":"drop_cols = [\"precip_depth_1_hr\", \"sea_level_pressure\", \"wind_direction\", \"wind_speed\"]","7fd5d257":"numericals = [\"square_feet\", \"year_built\", \"air_temperature\", \"cloud_coverage\",\n              \"dew_temperature\"]","ec72d1e7":"train[categoricals + numericals]","c9f19a27":"feat_cols = categoricals + numericals","9306a4cb":"train[\"meter_reading\"].value_counts()","8ce2b475":"#maybe remove some of the high outliers because of sensor error\n# train[\"meter_reading\"] = train[\"meter_reading\"].clip(upper = train[\"meter_reading\"].quantile(.999))","20efabaa":"#uncomment to plot 100 highest consuming buildings\n# import matplotlib.pyplot as plt\n# top_buildings = train.groupby(\"building_id\")[\"meter_reading\"].mean().sort_values(ascending = False).iloc[:100]\n# for value in top_buildings.index:\n#     train[train[\"building_id\"] == value][\"meter_reading\"].rolling(window = 24).mean().plot()\n#     plt.show()","7dbb58be":"target = np.log1p(train[\"meter_reading\"])","3c85fe2b":"del train[\"meter_reading\"]","d8563d1f":"train = train.drop(drop_cols + [\"site_id\", \"floor_count\"], axis = 1)","e9ce0b4b":"train","1670f6e8":"#Based on this great kernel https:\/\/www.kaggle.com\/arjanso\/reducing-dataframe-memory-size-by-65\ndef reduce_mem_usage(df):\n    start_mem_usg = df.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage of properties dataframe is :\",start_mem_usg,\" MB\")\n    NAlist = [] # Keeps track of columns that have missing values filled in. \n    for col in df.columns:\n        if df[col].dtype != object:  # Exclude strings            \n            # Print current column type\n            print(\"******************************\")\n            print(\"Column: \",col)\n            print(\"dtype before: \",df[col].dtype)            \n            # make variables for Int, max and min\n            IsInt = False\n            mx = df[col].max()\n            mn = df[col].min()\n            print(\"min for this col: \",mn)\n            print(\"max for this col: \",mx)\n            # Integer does not support NA, therefore, NA needs to be filled\n            if not np.isfinite(df[col]).all(): \n                NAlist.append(col)\n                df[col].fillna(mn-1,inplace=True)  \n                   \n            # test if column can be converted to an integer\n            asint = df[col].fillna(0).astype(np.int64)\n            result = (df[col] - asint)\n            result = result.sum()\n            if result > -0.01 and result < 0.01:\n                IsInt = True            \n            # Make Integer\/unsigned Integer datatypes\n            if IsInt:\n                if mn >= 0:\n                    if mx < 255:\n                        df[col] = df[col].astype(np.uint8)\n                    elif mx < 65535:\n                        df[col] = df[col].astype(np.uint16)\n                    elif mx < 4294967295:\n                        df[col] = df[col].astype(np.uint32)\n                    else:\n                        df[col] = df[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)    \n            # Make float datatypes 32 bit\n            else:\n                df[col] = df[col].astype(np.float32)\n            \n            # Print new column type\n            print(\"dtype after: \",df[col].dtype)\n            print(\"******************************\")\n    # Print final result\n    print(\"___MEMORY USAGE AFTER COMPLETION:___\")\n    mem_usg = df.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage is: \",mem_usg,\" MB\")\n    print(\"This is \",100*mem_usg\/start_mem_usg,\"% of the initial size\")\n    return df, NAlist","8449956d":"train, NAlist = reduce_mem_usage(train)","9c725d2b":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb\nnum_folds = 5\nkf = KFold(n_splits = num_folds, shuffle = False, random_state = 42)\nerror = 0\nmodels = []\nfor i, (train_index, val_index) in enumerate(kf.split(train)):\n    if i + 1 < num_folds:\n        continue\n    print(train_index.max(), val_index.min())\n    train_X = train[feat_cols].iloc[train_index]\n    val_X = train[feat_cols].iloc[val_index]\n    train_y = target.iloc[train_index]\n    val_y = target.iloc[val_index]\n    lgb_train = lgb.Dataset(train_X, train_y > 0)\n    lgb_eval = lgb.Dataset(val_X, val_y > 0)\n    params = {\n            'boosting_type': 'gbdt',\n            'objective': 'binary',\n            'metric': {'binary_logloss'},\n            'learning_rate': 0.1,\n            'feature_fraction': 0.8,\n            'bagging_fraction': 0.8,\n            'bagging_freq' : 5\n            }\n    gbm_class = lgb.train(params,\n                lgb_train,\n                num_boost_round=2000,\n                valid_sets=(lgb_train, lgb_eval),\n               early_stopping_rounds=20,\n               verbose_eval = 20)\n    \n    lgb_train = lgb.Dataset(train_X[train_y > 0], train_y[train_y > 0])\n    lgb_eval = lgb.Dataset(val_X[val_y > 0] , val_y[val_y > 0])\n    params = {\n            'boosting_type': 'gbdt',\n            'objective': 'regression',\n            'metric': {'rmse'},\n            'learning_rate': 0.5,\n            'feature_fraction': 0.8,\n            'bagging_fraction': 0.8,\n            'bagging_freq' : 5\n            }\n    gbm_regress = lgb.train(params,\n                lgb_train,\n                num_boost_round=2000,\n                valid_sets=(lgb_train, lgb_eval),\n               early_stopping_rounds=20,\n               verbose_eval = 20)\n#     models.append(gbm)\n\n    y_pred = (gbm_class.predict(val_X, num_iteration=gbm_class.best_iteration) > .5) *\\\n    (gbm_regress.predict(val_X, num_iteration=gbm_regress.best_iteration))\n    error += np.sqrt(mean_squared_error(y_pred, (val_y)))\/num_folds\n    print(np.sqrt(mean_squared_error(y_pred, (val_y))))\n    break\nprint(error)","96c7c329":"sorted(zip(gbm_regress.feature_importance(), gbm_regress.feature_name()),reverse = True)","3eb55497":"import gc\ndel train","b581e6a8":"del train_X, val_X, lgb_train, lgb_eval, train_y, val_y, y_pred, target","da285c04":"gc.collect()","29f52b1d":"#preparing test data\ntest = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/test.csv\")\n# test, NAlist = reduce_mem_usage(test)\ntest = test.merge(building_df, left_on = \"building_id\", right_on = \"building_id\", how = \"left\")\ndel building_df\ngc.collect()","14659889":"test","d9e81f04":"test[\"primary_use\"] = le.transform(test[\"primary_use\"])","d6adf4a1":"test, NAlist = reduce_mem_usage(test)","5190ad3f":"test","e8f3e6c0":"gc.collect()","788490dc":"weather_test = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_test.csv\")\nweather_test = weather_test.drop(drop_cols, axis = 1)","7fbf5958":"weather_test","285750e4":"test = test.merge(weather_test, left_on = [\"site_id\", \"timestamp\"], right_on = [\"site_id\", \"timestamp\"], how = \"left\")\ndel weather_test","7eb93620":"test[\"timestamp\"] = pd.to_datetime(test[\"timestamp\"])\ntest[\"hour\"] = test[\"timestamp\"].dt.hour.astype(np.uint8)\ntest[\"day\"] = test[\"timestamp\"].dt.day.astype(np.uint8)\ntest[\"weekend\"] = test[\"timestamp\"].dt.weekday.astype(np.uint8)\ntest[\"month\"] = test[\"timestamp\"].dt.month.astype(np.uint8)\ntest = test[feat_cols]","82704429":"from tqdm import tqdm\ni=0\nres=[]\nstep_size = 50000\nfor j in tqdm(range(int(np.ceil(test.shape[0]\/50000)))):\n    \n    res.append(np.expm1((gbm_class.predict(test.iloc[i:i+step_size], num_iteration=gbm_class.best_iteration) > .5) *\\\n    (gbm_regress.predict(test.iloc[i:i+step_size], num_iteration=gbm_regress.best_iteration))))\n    i+=step_size","ec74e9c8":"del test","08b4b9b4":"res = np.concatenate(res)","4573e095":"pd.DataFrame(res).describe()","605cc404":"res.shape","8b58a3f7":"sub = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/sample_submission.csv\")","4355f112":"sub[\"meter_reading\"] = res","5bc8d6f4":"sub.to_csv(\"submission.csv\", index = False)","50024281":"Features that are likely predictive:\n\n**Buildings**\n* primary_use\n* square_feet\n* year_built\n* floor_count (may be too sparse to use)\n\n**Weather**\n* time of day\n* holiday\n* weekend\n* cloud_coverage + lags\n* dew_temperature + lags\n* precip_depth + lags\n* sea_level_pressure + lags\n* wind_direction + lags\n* wind_speed + lags\n\n**Train**\n* max, mean, min, std of the specific building historically\n* number of meters\n* number of buildings at a siteid"}}