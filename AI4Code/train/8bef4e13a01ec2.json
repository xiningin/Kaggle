{"cell_type":{"6004b476":"code","f37110e5":"code","d0bc3790":"code","ce7f24ae":"code","8dba1744":"code","d5e80a37":"code","114dad85":"code","1fce63db":"markdown","38394764":"markdown","d4d7a01f":"markdown","0597fd16":"markdown"},"source":{"6004b476":"import numpy as np\nimport cv2 as cv\nfrom matplotlib import pyplot as plt","f37110e5":"img1 = cv.resize(cv.imread('..\/input\/monalisa\/mona.jpg',cv.IMREAD_GRAYSCALE), (0,0), fx=0.5, fy=0.5)\nimg2 = cv.resize(cv.imread('..\/input\/monalisa\/3.jpg',cv.IMREAD_GRAYSCALE), (0,0), fx=0.5, fy=0.5)","d0bc3790":"# Initiate AKAZE detector\ndetector = cv.AKAZE_create()","ce7f24ae":"# find the keypoints and descriptors with AKAZE\nkp1, des1 = detector.detectAndCompute(img1,None)\nkp2, des2 = detector.detectAndCompute(img2,None)\n# ([], [])","8dba1744":"imgL = cv.drawKeypoints(img1, kp1, None, color=(0,0,255), flags=0)\nimgR = cv.drawKeypoints(img2, kp2, None, color=(0,0,255), flags=0)","d5e80a37":"# BFMatcher with default params\nbf = cv.BFMatcher()\nmatches = bf.knnMatch(des1,des2,k=2)\n# Apply ratio test\ngood = []\nfor m,n in matches:\n    if m.distance < 0.75*n.distance:\n        good.append([m])\n# cv.drawMatchesKnn expects list of lists as matches.\nimg3 = cv.drawMatchesKnn(img1,kp1,img2,kp2,good,None,flags=cv.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)\nplt.figure(figsize=(16, 16))\nplt.title('AKAZE Interest Points')\nplt.imshow(img3)\nplt.show()","114dad85":"MIN_MATCH_COUNT = 10\n# store all the good matches as per Lowe's ratio test.\ngood = []\nfor m,n in matches:\n    if m.distance < 0.7*n.distance:\n        good.append(m)\n\nif len(good)>MIN_MATCH_COUNT:\n    src_pts = np.float32([ kp1[m.queryIdx].pt for m in good ]).reshape(-1,1,2)\n    dst_pts = np.float32([ kp2[m.trainIdx].pt for m in good ]).reshape(-1,1,2)\n    M, mask = cv.findHomography(src_pts, dst_pts, cv.RANSAC,5.0)\n    matchesMask = mask.ravel().tolist()\n    h, w  = img1.shape\n    d  = img1.shape\n    pts = np.float32([ [0,0],[0,h-1],[w-1,h-1],[w-1,0] ]).reshape(-1,1,2)\n    dst = cv.perspectiveTransform(pts,M)\n    img2 = cv.polylines(img2,[np.int32(dst)],True,255,3, cv.LINE_AA)\nelse:\n    print( \"Jumlah Key Point : {}\/{}\".format(len(good), MIN_MATCH_COUNT) )\n    matchesMask = None\n\ndraw_params = dict(matchColor = (0,255,0), # draw matches in green color\n                   singlePointColor = None,\n                   matchesMask = matchesMask, # draw only inliers\n                   flags = 2)\nimg3 = cv.drawMatches(img1,kp1,img2,kp2,good,None,**draw_params)\nplt.figure(figsize=(20, 20))\nplt.title('Feature Matching + Homography to find Objects with AKAZE Algorithm')\nplt.imshow(img3, 'gray'),plt.show()","1fce63db":"# Basics of Brute-Force Matcher","38394764":"Now, we will mix up the feature matching and findHomography from calib3d module to find known objects in a complex image","d4d7a01f":"Brute-Force Matching with KAZE Descriptors and Ratio Test\n\nThis time, we will use BFMatcher.knnMatch() to get k best matches. In this example, we will take k=2 so that we can apply ratio test explained by D.Lowe in his paper","0597fd16":"# Feature Matching + Homography to find Objects"}}