{"cell_type":{"aec5bb21":"code","8ed99ac8":"code","f9dbcd16":"code","38f51de4":"code","d25259e6":"code","dae8fafd":"code","b14c1c07":"code","92eee54b":"code","a36f23dd":"code","706969a1":"code","459044f4":"code","f9250db9":"code","cf4b5d23":"code","f4979a87":"code","cf6e480e":"code","78974dab":"code","223369e9":"code","31bcca32":"code","f44d6fbc":"code","3e7a51bf":"code","4863af6a":"code","279ec38b":"code","cc5111cb":"code","1528a685":"markdown","c0ba0cc2":"markdown","2ab24e26":"markdown","b9b7180c":"markdown","900de51a":"markdown","c7790358":"markdown","1fd30f81":"markdown","79b5e394":"markdown","e4063201":"markdown","70b3e87c":"markdown","16c3e9d7":"markdown","3394c467":"markdown","6021663b":"markdown","4ea91ec7":"markdown","79f81b5c":"markdown","447f65bf":"markdown","d9e959d2":"markdown","39423f4b":"markdown","78b64b1d":"markdown","08c3a45a":"markdown","cb6026ea":"markdown","4c828f94":"markdown","ea147b46":"markdown","2d668866":"markdown","8c5dd1a0":"markdown","2d8640d3":"markdown","d3cfa541":"markdown","84e9be17":"markdown","40c11406":"markdown"},"source":{"aec5bb21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ed99ac8":"df = pd.read_csv('\/kaggle\/input\/amazon-fine-food-reviews\/Reviews.csv')\ndf.head()","f9dbcd16":"#Imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.express as px","38f51de4":"# Product Scores\nfig = px.histogram(df, x=\"Score\")\nfig.update_traces(marker_color=\"turquoise\",marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_text='Product Score')\nfig.show()","d25259e6":"import nltk\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\n\n#Creating Stopwords list\n\nstopwords = set(stopwords.words('english'))\nstopwords.update([\"br\",\"href\"])\ntextt = \" \".join(review for review in df.Text)\nwordcloud = WordCloud(stopwords=stopwords).generate(textt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","dae8fafd":"# assign reviews with score > 3 as positive sentiment\n# score < 3 negative sentiment\n# remove score = 3\ndf = df[df['Score'] != 3]\ndf['sentiment'] = df['Score'].apply(lambda rating : +1 if rating > 3 else -1)\n","b14c1c07":"df.head()","92eee54b":"# split df - positive and negative sentiment:\npositive = df[df['sentiment'] == 1]\nnegative = df[df['sentiment'] == -1]\n","a36f23dd":"positive = positive.dropna()\nnegative = negative.dropna()","706969a1":"import nltk\nfrom nltk.corpus import stopwords\n\nstopwords = set(stopwords.words('english'))\nstopwords.update([\"br\", \"stuff\", \"href\",\"good\",\"great\", \"taste\", \"product\", \"flavour\",\"like\", \"coffee\", \"dog\",\"flavor\",\"buy\"]) \n## good and great removed because they were included in negative sentiment\npos = \" \".join(review for review in positive.Summary)\nwordcloud = WordCloud(stopwords=stopwords).generate(pos)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","459044f4":"import nltk\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\nstopwords = set(stopwords.words('english'))\nstopwords.update([\"br\", \"tastes\", \"href\",\"good\",\"great\", \"taste\", \"product\", \"flavour\",\"like\", \"coffee\", \"dog\",\"flavor\",\"buy\"]) \n\nnegreviews = \" \".join(review for review in negative.Summary)\nwordcloud = WordCloud(stopwords=stopwords).generate(negreviews)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","f9250db9":"df['sentimentt'] = df['sentiment'].replace({-1 : 'negative'})\ndf['sentimentt'] = df['sentimentt'].replace({1 : 'positive'})\nfig = px.histogram(df, x=\"sentimentt\")\nfig.update_traces(marker_color=\"indianred\",marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_text='Product Sentiment')\nfig.show()","cf4b5d23":"def remove_punctuation(text):\n    final = \"\".join(u for u in text if u not in (\"?\", \".\", \";\", \":\",  \"!\",'\"'))\n    return final\ndf['Text'] = df['Text'].apply(remove_punctuation)\ndf = df.dropna(subset=['Summary'])\ndf['Summary'] = df['Summary'].apply(remove_punctuation)","f4979a87":"dfNew = df[['Summary','sentiment']]\ndfNew.head()","cf6e480e":"# random split train and test data\nindex = df.index\ndf['random_number'] = np.random.randn(len(index))\ntrain = df[df['random_number'] <= 0.8]\ntest = df[df['random_number'] > 0.8]","78974dab":"# count vectorizer:\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(token_pattern=r'\\b\\w+\\b')\ntrain_matrix = vectorizer.fit_transform(train['Summary'])\ntest_matrix = vectorizer.transform(test['Summary'])","223369e9":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(solver='lbfgs', max_iter=6000)","31bcca32":"X_train = train_matrix\nX_test = test_matrix\ny_train = train['sentiment']\ny_test = test['sentiment']","f44d6fbc":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler(with_mean=False)\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","3e7a51bf":"lr.fit(X_train,y_train)","4863af6a":"predictions = lr.predict(X_test)\nprint(predictions)","279ec38b":"# find accuracy, precision, recall:\n\nfrom sklearn.metrics import confusion_matrix,classification_report\nnew = np.asarray(y_test)\nconfusion_matrix(predictions,y_test)","cc5111cb":"print(classification_report(predictions,y_test))","1528a685":"# Step 2: Data Analysis\n\n**Now, we will take a look at the variable \u201c Score \u201d to see if majority of the customer ratings are positive or negative.\n**\n**To do this, we will have to install the Plotly library first.**","c0ba0cc2":"# Step 1: Read the Dataframe","2ab24e26":"* **Creating Bag of Words**\n> Next, we will use a count vectorizer from the Scikit-learn library.\n> \n> This will transform the text in our data frame into a bag of words model, which will contain a sparse matrix of integers. The number of occurrences of each word will be counted and printed.\n> \n> We will need to convert the text into a bag-of-words model since the logistic regression algorithm cannot understand text.","b9b7180c":"> **Taking a look at the head of the new data frame, this is the data it will now contain**","900de51a":"* **Split target and independent variables**","c7790358":"# Finaly, we can take a look at the distribution of reviews with sentiment across the dataset:","1fd30f81":"As seen above, the positive sentiment word cloud was full of positive words, such as **love, best, and delicious.****\n\nThe negative sentiment word cloud was filled with mostly negative words, such as **dissapointed, yuck, terrible, horrible and awful.****\n\nThe words **\"good\", \"great\", \"taste\", \"product\", \"flavour\", \"like\", \"coffee\", \"dog\", \"flavor\" and \"buy\"** initially appeared in the negative sentiment word cloud, despite being positive words. This is probably because they were used in a negative context, such as \u201c not good .\u201d \n\nDue to this, I removed those words from the word cloud.","79b5e394":"> Finally, we can build the sentiment analysis model!\n> \n> This model will take reviews in as input. It will then come up with a prediction on whether the review is positive or negative.\n> \n> This is a classification task, so we will train a simple logistic regression model to do it.","e4063201":"# From here, we can see that most of the customer rating is positive. This leads me to believe that most reviews will be pretty positive too, which will be analyzed in a while.\n\nNow, we can create some **wordclouds** to see the most frequently used words in the reviews.","70b3e87c":"> Now that we have classified tweets into positive and negative, let\u2019s build wordclouds for each!\n> \n> First, we will create two data frames \u2014 one with all the positive reviews, and another with all the negative reviews.","16c3e9d7":"# Wordcloud - Negative Sentiment","3394c467":"* **Make Predictions**","6021663b":"# We will now split the data frame into train and test sets. 80% of the data will be used for training, and 20% will be used for testing.","4ea91ec7":"# And\u2026 That\u2019s it!\n\n> ***The overall accuracy of the model on the test data is around 93%, which is pretty good considering we didn\u2019t do any feature extraction or much preprocessing.***","79f81b5c":"# Wordcloud \u2014 Positive Sentiment","447f65bf":"# The Classification Report:","d9e959d2":"* **Import Logitic Regression**","39423f4b":"> **We can see that the dataframe contains some product, user and review information\n> The data that we will be using most for this analysis is \u201c Summary\u201d, \u201c Text\u201d, and \u201c Score.\u201d**\n> \n> **Text** \u2014 This variable contains the complete product review information.\n> \n> **Summary** \u2014 This is a summary of the entire review.\n> \n> **Score** \u2014 The product rating provided by the customer.","78b64b1d":"> We have successfully built a simple logistic regression model, and trained the data on it. We also made predictions using the model.","08c3a45a":"# Some popular words that can be observed here include \n# \u201ctaste\u201d, \u201cproduct\u201d and \u201clove\u201d.\n# \nThese words are mostly **positive**, also indicating that most reviews in the dataset **express a positive sentiment**.","cb6026ea":"# Step 5: Building the Model","4c828f94":"# Step 6 : Testing\n> Let's test the accuracy of the Model!!","ea147b46":"**There are a few steps we need to take:**\n* **Data Cleaning**\n> We will be using the summary data to come up with predictions. First, we need to remove all punctuation from the data.","2d668866":"# Step 3: Classifying Tweets","8c5dd1a0":"> In this step, we will classify reviews into \u201cpositive\u201d and \u201cnegative,\u201d so we can use this as training data for our sentiment classification model.\n> \n> Positive reviews will be classified as +1, and negative reviews will be classified as -1.\n> \n> We will classify all reviews with \u2018Score\u2019 > 3 as +1, indicating that they are positive.\n> \n> All reviews with \u2018Score\u2019 < 3 will be classified as -1. Reviews with \u2018Score\u2019 = 3 will be dropped, because they are neutral. Our model will only classify positive and negative reviews.","2d8640d3":"* **Spliting Dataframe**\nThe new data frame should only have two columns \u2014 \n*\u201c Summary \u201d (the review text data), and \u201c sentiment \u201d (the target variable).*","d3cfa541":"> Looking at the head of the data frame now, we can see a new column called \u2018sentiment:\u2019","84e9be17":"* **Fitting Model on Data**","40c11406":"# Step 4: More Data Analysis"}}