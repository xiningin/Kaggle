{"cell_type":{"2abc4fdd":"code","c88ce95c":"code","640dd7ac":"code","51217ecc":"code","0f1dbbac":"code","d6bcf023":"code","8177e65c":"code","0a75fe1b":"code","9560f7f7":"code","4258201e":"code","659d3c8a":"code","b5e71417":"code","bf8a75a9":"code","1997d9ec":"code","6bca7018":"code","0e91ba44":"code","7357e907":"code","98eed468":"code","a683b088":"code","51e1925d":"code","acf848e4":"code","7ed90a98":"code","300c9abb":"code","0f82af7d":"code","4866a275":"code","56411ec6":"code","351cf573":"code","89e6d07e":"markdown","992e297a":"markdown","98c33630":"markdown","b30b0663":"markdown","b1dfbf8a":"markdown","9d8c0c91":"markdown","856c2cad":"markdown","a60903f3":"markdown","b75a3393":"markdown","78067310":"markdown","69f01aeb":"markdown","24dc1613":"markdown","89e1bf90":"markdown","c279f5f4":"markdown","b60c269e":"markdown","9745ccc9":"markdown"},"source":{"2abc4fdd":"import numpy as np\nimport time\nimport gc\nimport json\nimport os\nfrom datetime import datetime\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import Imputer, LabelEncoder\nfrom sklearn.metrics import accuracy_score, f1_score, mean_absolute_error\nsns.set_style(\"dark\")","c88ce95c":"def load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     parse_dates=['date'],\n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\ntrain_df = load_df()\ntest_df = load_df(\"..\/input\/test.csv\")","640dd7ac":"train_df.columns","51217ecc":"train_df['train_or_test'] = 'train'\ntest_df['train_or_test'] = 'test'\ntest_df['totals.transactionRevenue'] = np.nan\ndf = pd.concat([train_df, test_df], sort=False, ignore_index=True)\ndel train_df\ndel test_df\ngc.collect()","0f1dbbac":"df.shape","d6bcf023":"df.head(10)","8177e65c":"df['year'] = df.date.dt.year\ndf['month'] = df.date.dt.month\ndf['dayofmonth'] = df.date.dt.day\ndf['dayofweek'] = df.date.dt.dayofweek\ndf['dayofyear'] = df.date.dt.dayofyear\ndf['weekofyear'] = df.date.dt.weekofyear\ndf['is_month_start'] = (df.date.dt.is_month_start).astype(int)\ndf['is_month_end'] = (df.date.dt.is_month_end).astype(int)\ndf['quarter'] = df.date.dt.quarter\ndf['week_block_num'] = [int(x) for x in np.floor((df.date - pd.to_datetime('2012-12-31')).dt.days\/7) + 1]\ndf['quarter_block_num'] = (df['year'] - 2013) * 4 + df['quarter']","0a75fe1b":"df.describe(include=\"all\")","9560f7f7":"dropcols = [c for c in df.columns if df[c].nunique(dropna=True)==1]\ndropcols.remove('totals.bounces')\ndropcols.remove('totals.newVisits')\nprint(dropcols)\ndf.drop(dropcols,axis=1,inplace=True,errors='ignore')","4258201e":"df['totals.bounces'].fillna(0,inplace=True)\ndf['totals.hits'].fillna(0,inplace=True)\ndf['totals.pageviews'].fillna(0,inplace=True)\ndf['totals.newVisits'].fillna(0,inplace=True)\ndf[['totals.bounces','totals.hits','totals.pageviews','totals.newVisits']] = df[['totals.bounces','totals.hits','totals.pageviews','totals.newVisits']].astype(np.int)","659d3c8a":"null_df = df.isnull().sum().reset_index()\nnull_df[0] = null_df[0] \/ df.shape[0]\nnull_df[null_df[0] > 0]","b5e71417":"cols = ['trafficSource.adwordsClickInfo.adNetworkType','trafficSource.adwordsClickInfo.gclId','trafficSource.adwordsClickInfo.slot','trafficSource.adContent']\ndf[cols] = df[cols].fillna(\"No_Ad\")\ndf['trafficSource.adwordsClickInfo.page'].fillna(0,inplace=True)\ndf['trafficSource.referralPath'].fillna(\"No_Path\",inplace=True)\ndf['trafficSource.adContent'].fillna(\"No_Ad\",inplace=True)","bf8a75a9":"df.describe(include=[\"O\"]).T","1997d9ec":"cat_many_label_cols = [\"channelGrouping\", \"device.browser\", \"device.operatingSystem\", \n            \"geoNetwork.city\", \"geoNetwork.continent\", \n            \"geoNetwork.country\", \"geoNetwork.metro\",\n            \"geoNetwork.networkDomain\", \"geoNetwork.region\", \n            \"geoNetwork.subContinent\", \"trafficSource.adContent\", \n            \"trafficSource.adwordsClickInfo.gclId\", \n            \"trafficSource.adwordsClickInfo.page\", \n            \"trafficSource.campaign\",\n            \"trafficSource.keyword\", \"trafficSource.medium\", \n            \"trafficSource.referralPath\", \"trafficSource.source\"]\n\ncat_few_label_cols = [\"device.deviceCategory\",\"trafficSource.adwordsClickInfo.adNetworkType\",\n                     \"trafficSource.adwordsClickInfo.slot\"]","6bca7018":"for col in cat_many_label_cols:\n    print(col)\n    lbl = LabelEncoder()\n    lbl.fit(list(df[col].values.astype('str')))\n    df[col] = lbl.transform(list(df[col].values.astype('str')))\n    \ndf = pd.get_dummies(df,columns=cat_few_label_cols)","0e91ba44":"df.shape","7357e907":"df[\"totals.transactionRevenue\"].fillna(0,inplace=True)\ndf[\"totals.transactionRevenue\"] = df[\"totals.transactionRevenue\"].astype(np.float)","98eed468":"train_df = df[df.train_or_test=='train']\ntest_df = df[df.train_or_test=='test'].drop('totals.transactionRevenue',axis=1)\nval_df = train_df[train_df['date']>datetime(2017,5,31)]\nprint(train_df.shape)\nprint(val_df.shape)\nprint(test_df.shape)","a683b088":"dropcols = ['fullVisitorId','sessionId','visitId']\ntrain_x = train_df.drop(dropcols,axis=1)\ntest_x = test_df.drop(dropcols,axis=1)","51e1925d":"dev_x = train_x[train_x['date']<=datetime(2017,5,31)]\nval_x = train_x[train_x['date']>datetime(2017,5,31)]\ndev_y = np.log1p(dev_x[\"totals.transactionRevenue\"].values)\nval_y = np.log1p(val_x[\"totals.transactionRevenue\"].values)\ndev_x.drop([\"totals.transactionRevenue\",\"date\",\"train_or_test\"],axis=1,inplace=True)\nval_x.drop([\"totals.transactionRevenue\",\"date\",\"train_or_test\"],axis=1,inplace=True)\ntest_x.drop([\"date\",\"train_or_test\"],axis=1,inplace=True)","acf848e4":"lgb_params = {\n        \"objective\" : \"regression\",\n        \"metric\" : \"rmse\", \n        \"num_leaves\" : 1024,\n        'max_depth': 16,  \n        'max_bin': 255,\n        \"min_child_samples\" : 100,\n        \"learning_rate\" : 0.005,\n        'verbose': 0,\n        \"bagging_fraction\" : 0.7,\n        \"feature_fraction\" : 0.7,\n        \"bagging_frequency\" : 5,\n        \"bagging_seed\" : 2018\n    }","7ed90a98":"dtrain = lgb.Dataset(dev_x, label=dev_y)\ndvalid = lgb.Dataset(val_x, label=val_y)","300c9abb":"evals_results = {}\nprint(\"Training the model...\")\n\nstart = datetime.now()\nlgb_model = lgb.train(lgb_params, \n                 dtrain, \n                 valid_sets=[dtrain, dvalid], \n                 valid_names=['train','valid'], \n                 evals_result=evals_results, \n                 num_boost_round=1000,\n                 early_stopping_rounds=70,\n                 verbose_eval=50, \n                 feval=None)\nprint(\"Total time taken : \", datetime.now()-start)","0f82af7d":"pred_test_lgb = lgb_model.predict(test_x, num_iteration=lgb_model.best_iteration)\npred_val_lgb = lgb_model.predict(val_x, num_iteration=lgb_model.best_iteration)","4866a275":"from sklearn import metrics\npred_val_lgb[pred_val_lgb<0] = 0\nval_pred_df = pd.DataFrame({\"fullVisitorId\":val_df[\"fullVisitorId\"].values})\nval_pred_df[\"transactionRevenue\"] = val_df[\"totals.transactionRevenue\"].values\nval_pred_df[\"PredictedRevenue\"] = np.expm1(pred_val_lgb)\nval_pred_df = val_pred_df.groupby(\"fullVisitorId\")[\"transactionRevenue\", \"PredictedRevenue\"].sum().reset_index()\nprint(np.sqrt(metrics.mean_squared_error(np.log1p(val_pred_df[\"transactionRevenue\"].values), np.log1p(val_pred_df[\"PredictedRevenue\"].values))))","56411ec6":"fold_importance_df = pd.DataFrame()\nfold_importance_df[\"feature\"] = val_x.columns\nfold_importance_df[\"importance\"] = lgb_model.feature_importance()\nplt.figure(figsize=(18,20))\nsns.barplot(x='importance',y='feature',data=fold_importance_df.sort_values(by=\"importance\", ascending=False))","351cf573":"train_id = train_df[\"fullVisitorId\"].values\ntest_id = test_df[\"fullVisitorId\"].values\nsub_df = pd.DataFrame({\"fullVisitorId\":test_id})\npred_test_lgb[pred_test_lgb<0] = 0\nsub_df[\"PredictedLogRevenue\"] = np.expm1(pred_test_lgb)\nsub_df = sub_df.groupby(\"fullVisitorId\")[\"PredictedLogRevenue\"].sum().reset_index()\nsub_df.columns = [\"fullVisitorId\", \"PredictedLogRevenue\"]\nsub_df[\"PredictedLogRevenue\"] = np.log1p(sub_df[\"PredictedLogRevenue\"])\nsub_df.to_csv(\"baseline_lgb.csv\", index=False)","89e6d07e":"Now the target variable also has many missing value in the training dataset. The reason is those instances did not generate any revenues. Thus setting all the missing values to zero is the only option.","992e297a":"Now applying the model on the test dataset and trying to generate submission files.","98c33630":"Many of the columns contain constant values for all the training and test examples. Removing them is wise to make predictions faster.","b30b0663":"Based on the time-series nature of the data, I have created some new features which might be helpful to get new insights in the future.","b1dfbf8a":"Performing Label Encoding and One Hot Encoding of the vabove grouped features.","9d8c0c91":"Trying to find out the reason behind all the other missing values in the dataset.","856c2cad":"These following 4 features seem to have integer format and there missing values cell should most probably be 0.","a60903f3":"These features has similar reason for missing values. I am trying to put appropriate fill for the missing cells for these columns.","b75a3393":"Now I think most of the data cleaning and feature engineering is over. I will get back the original train and test DataFrame from the merged DataFrame and then extract a validation dataset from the last part of the time sequence.","78067310":"I am categorizing the object features in two different groups. The group having many categorical values will be used for Label Encoding and the other having only a few categorical values will be used for One Hot Encoding.","69f01aeb":"Will now test the accuracy on the validation dataset. ","24dc1613":"**Preprocessing**\n\nFirst we will merge the train and test dataset to make the basic operations on the whole dataset easier.","89e1bf90":"**About the competition**\n\nIn this competition, we\u2019re challenged to analyze a Google Merchandise Store (also known as GStore, where Google swag is sold) customer dataset to predict revenue per customer. Hopefully, the outcome will be more actionable operational changes and a better use of marketing budgets for those companies who choose to use data analysis on top of GA data.\n\n**Objectives of the Notebook**\n\nIn this notebook we will go through the features of the dataset. We will try to clean the data by preprocessing with Pandas and try to make it model ready for Baseline LightGBM model. Then Finally we will apply LightGBM model to predict the outcome.\n\n> This is my first notebook where I have tried to present what I have done in a documented manner. Please point out any noticeable mistake that I have done. Thank you. :)\n\n**Inspirations of the Notebook**\n\nSome parts of the notebook is inspired by the following notebooks.\n* [Simple Exploration+Baseline - GA Customer Revenue](https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-baseline-ga-customer-revenue) by [SRK](https:\/\/www.kaggle.com\/sudalairajkumar)\n*  [2 - Quick study: LGBM, XGB and Catboost [LB: 1.66]](https:\/\/www.kaggle.com\/julian3833\/2-quick-study-lgbm-xgb-and-catboost-lb-1-66) by [Julian](https:\/\/www.kaggle.com\/julian3833)\n","c279f5f4":"**About the Features**\n\n* fullVisitorId- A unique identifier for each user of the Google Merchandise Store.\n* channelGrouping - The channel via which the user came to the Store.\n* date - The date on which the user visited the Store.\n* device - The specifications for the device used to access the Store.\n* geoNetwork - This section contains information about the geography of the user.\n* sessionId - A unique identifier for this visit to the store.\n* socialEngagementType - Engagement type, either \"Socially Engaged\" or \"Not Socially Engaged\".\n* totals - This section contains aggregate values across the session.\n* trafficSource - This section contains information about the Traffic Source from which the session originated.\n* visitId - An identifier for this session. This is part of the value usually stored as the _utmb cookie. This is only unique to the user. For a completely unique ID, you should use a combination of fullVisitorId and visitId.\n* visitNumber - The session number for this user. If this is the first session, then this is set to 1.\n* visitStartTime - The timestamp (expressed as POSIX time).","b60c269e":"**Modeling**\n\nNow we are ready to apply machine learning models on the dataset. I will use gradient boosting framework LightGBM as it is fast and very accurate in modeling big datasets.","9745ccc9":"Now plotting the feature importance graph as calculated by the above LightGBM model."}}