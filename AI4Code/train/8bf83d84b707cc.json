{"cell_type":{"f9f8975d":"code","5f35b2c2":"code","3e26c3e2":"code","443a89fc":"code","71be6b16":"code","116120e0":"code","ad19ba10":"code","c2ba9fc0":"code","1bf254e1":"code","6eda6068":"code","4ce7dcca":"code","cc932407":"code","5bc0cb4c":"code","ebb8f6e3":"code","524c50fb":"markdown","3f7dec1f":"markdown","5bcf10ec":"markdown","ba9d12b1":"markdown","6e9382db":"markdown","ac681f39":"markdown","be94c105":"markdown","a849c5aa":"markdown","902d1ed0":"markdown","411a036b":"markdown","ba6d9bb3":"markdown","fe05ddb4":"markdown","a896d6ff":"markdown","9ef70305":"markdown","8b5c8dc4":"markdown","c4db062f":"markdown","84e2c270":"markdown","f83b7d2a":"markdown","97196757":"markdown","c4a41dc7":"markdown","b487c667":"markdown"},"source":{"f9f8975d":"import pandas as pd\nimport pandas_profiling\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nimport keras_tuner as kt\nfrom tensorflow.keras import layers","5f35b2c2":"# setting up dataframes\ndata = pd.read_csv('..\/input\/cap-4611-2021-fall-assignment-3\/train.csv')\nval = pd.read_csv('..\/input\/cap-4611-2021-fall-assignment-3\/eval.csv')\n\ndisplay(data.describe())","3e26c3e2":"print(data.isnull().sum())\n\nprint('\\n')\n\nprint(data.isna().sum())","443a89fc":"# pandas_profiling.ProfileReport(data)","71be6b16":"X_train, X_test, y_train, y_test = train_test_split(data.drop(['id', 'pubchem_id','Eat'], axis=1),data['Eat'], test_size=0.2, random_state=420)","116120e0":"mse = tf.keras.losses.MeanSquaredError()\nrmse = tf.keras.metrics.RootMeanSquaredError()","ad19ba10":"model = Sequential()\n\nmodel.add(Dense(X_train.shape[1],\n                input_dim = X_train.shape[1],\n                activation = 'sigmoid'))\nmodel.add(Dense(400,\n                activation = 'sigmoid'))\nmodel.add(Dense(100,\n                activation = 'sigmoid'))\nmodel.add(Dense(1))\n\nopt = tf.keras.optimizers.Adam(learning_rate = 0.0001)\n\nmodel.compile(loss = mse, optimizer = opt, metrics = [rmse])\nmodel.summary()\n\ngraph = model.fit(X_train, y_train, epochs = 690, batch_size = 420, validation_split = 0.13)\npd.DataFrame(graph.history)[['root_mean_squared_error','val_root_mean_squared_error']].plot()","c2ba9fc0":"model.evaluate(X_test, y_test, batch_size = 128, return_dict = True)","1bf254e1":"model = Sequential()\n\nmodel.add(Dense(X_train.shape[1],\n                input_dim = X_train.shape[1],\n                activation = 'sigmoid'))\nmodel.add(Dense(400,\n                activation = 'sigmoid'))\nmodel.add(Dense(200,\n                activation = 'sigmoid'))\nmodel.add(Dense(1))\n\nopt = tf.keras.optimizers.Adam(learning_rate = 0.00001)\n\nmodel.compile(loss = mse, optimizer = opt, metrics = [rmse])\nmodel.summary()\n\ngraph = model.fit(X_train, y_train, epochs = 690, batch_size = 420, validation_split = 0.13)\npd.DataFrame(graph.history)[['root_mean_squared_error','val_root_mean_squared_error']].plot()","6eda6068":"model.evaluate(X_test, y_test, batch_size = 128, return_dict = True)","4ce7dcca":"model = Sequential()\n\nmodel.add(Dense(X_train.shape[1],\n                input_dim = X_train.shape[1],\n                activation = 'sigmoid'))\nmodel.add(Dense(600,\n                activation = 'sigmoid'))\nmodel.add(Dense(900,\n                activation = 'sigmoid'))\nmodel.add(Dense(1))\n\nopt = tf.keras.optimizers.Adam(learning_rate = 0.00001)\n\nmodel.compile(loss = mse, optimizer = opt, metrics = [rmse])\nmodel.summary()\n\ngraph = model.fit(X_train, y_train, epochs = 690, batch_size = 420, validation_split = 0.13)\npd.DataFrame(graph.history)[['root_mean_squared_error','val_root_mean_squared_error']].plot()","cc932407":"model.evaluate(X_test, y_test, batch_size = 128, return_dict = True)","5bc0cb4c":"answers = np.array(model(val.drop(['id', 'pubchem_id'], axis = 1).to_numpy())).flatten()\nsubmission = pd.DataFrame({'id':val['id'], 'Eat':answers})\ndisplay(submission)\nsubmission.to_csv('.\/submission.csv', index = False)","ebb8f6e3":"# empty cell to ensure submission file was created\n# this is just for my sanity okay thank you","524c50fb":"# Missing Data","3f7dec1f":"# Preparing Data","5bcf10ec":"**5. You must build and train a Neural Network on the training data and evaluate its performance on a set of validation data**\n* **You must generate a distribution of validation scores, as well as summary statistics for this distribution (using the pandas describe() method)**","ba9d12b1":"## Evaluate Mode 1","6e9382db":"## Evaluate Mode 3","ac681f39":"# Submission","be94c105":"# Imports","a849c5aa":"**1. You must load the data from the provided CSV files.**","902d1ed0":"## Model 3","411a036b":"## Evaluate Mode 2","ba6d9bb3":"**4. You must describe any data transformations or feature engineering that are required and provide an explanation as to \"why\" each is being done.**","fe05ddb4":"# Exploratory Data Analysis","a896d6ff":"**0. You must load the import statements required for the code.**","9ef70305":"## Model 2","8b5c8dc4":"## Model 1","c4db062f":"# Models","84e2c270":"**2. You must check for missing values within the training data and, if required, describe and implement an approach to handle those missing values.**","f83b7d2a":"# Loss Functions","97196757":"**3. You must check for outliers within the training data and, if required, describe and implement an approach to handle those outliers.**","c4a41dc7":"# Loading Data","b487c667":"Created a network of 1000 nodes with 1 output and activation function as sigmoid."}}