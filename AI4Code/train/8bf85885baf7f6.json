{"cell_type":{"ac962e96":"code","fe4c972f":"code","90c6e39c":"code","1e2718b0":"code","ca49dc2c":"code","025f9f1d":"code","1427365e":"code","00554083":"code","0060307f":"code","12b1556c":"code","7b48f647":"code","691418ad":"code","0f60b5e9":"code","df17f175":"code","de884724":"code","c7e5319d":"code","c8ba4bc0":"code","69e5095c":"code","127799f1":"markdown","932996cb":"markdown","2c206930":"markdown","a9bd8a88":"markdown","e2ea93d2":"markdown","7edf08c6":"markdown","5a406d10":"markdown","d49d0689":"markdown","e814141c":"markdown","a1d6002b":"markdown","e318504e":"markdown","9c686a74":"markdown","1d81b2e2":"markdown","e513f9d0":"markdown"},"source":{"ac962e96":"print(\"You've successfully run some Python code\")\nprint(\"Congratulations!\")","fe4c972f":"print('Hello Saddam')","90c6e39c":"from learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex1 import *\nprint(\"Setup complete! You're ready to start question 0.\")","1e2718b0":"# create a variable called color with an appropriate value on the line below\n# (Remember, strings in Python must be enclosed in 'single' or \"double\" quotes)\ncolor='White'\nq0.check()","ca49dc2c":"q0.hint()\nq0.solution()","025f9f1d":"pi = 3.14159 # approximate\ndiameter = 3\n\n# Create a variable called 'radius' equal to half the diameter\nradius=diameter\/2\n\n# Create a variable called 'area', using the formula for the area of a circle: pi times the radius squared\narea=pi*(radius)**2\n\nq1.check()","1427365e":"# Uncomment and run the lines below if you need help.\n#q1.hint()\n#\nq1.solution()","00554083":"########### Setup code - don't touch this part ######################\n# If you're curious, these are examples of lists. We'll talk about \n# them in depth a few lessons from now. For now, just know that they're\n# yet another type of Python object, like int or float.\na = [1, 2, 3]\nb = [3, 2, 1]\nq2.store_original_ids()\n######################################################################\n\n# Your code goes here. Swap the values to which a and b refer.\n# If you get stuck, you can always uncomment one or both of the lines in\n# the next cell for a hint, or to peek at the solution.\n\ntemp=a\na=b\nb=temp\n\n\n######################################################################\nq2.check()","0060307f":"q2.hint()","12b1556c":"q2.solution()","7b48f647":"(5 - 3) \/\/ 2","691418ad":"#q3.a.hint()","0f60b5e9":"q3.a.solution()","df17f175":"8 - (3 * 2) - (1 + 1)","de884724":"#q3.b.hint()","c7e5319d":"q3.b.solution()","c8ba4bc0":"# Variables representing the number of candies collected by alice, bob, and carol\nalice_candies = 121\nbob_candies = 77\ncarol_candies = 109\n\n# Your code goes here! Replace the right-hand side of this assignment with an expression\n# involving alice_candies, bob_candies, and carol_candies\nto_smash = (alice_candies+bob_candies+carol_candies)%3\n\nq4.check()","69e5095c":"#q4.hint()\nq4.solution()","127799f1":"<small>Questions, like this one, marked a spicy pepper are a bit harder. Don't feel bad if you can't get these.<\/small>\n\nb) <span title=\"A bit spicy\" style=\"color: darkgreen \">\ud83c\udf36\ufe0f<\/span> Add parentheses to the following expression so that it evaluates to 0\n","932996cb":"Welcome to your first set of Python coding problems! \n\nIf this is your first time using Kaggle Kernels, welcome! For a very quick introduction to the coding environment, [check out this video](https:\/\/youtu.be\/4C2qMnaIKL4).\n\nKernels (also known as notebooks) are composed of blocks (called \"cells\") of text and code. Each of these is editable, though you'll mainly be editing the code cells to answer some questions.\n\nTo get started, try running the code cell below (by pressing the \u25ba button, or clicking on the cell and pressing ctrl+enter on your keyboard).","2c206930":"# Keep Going\n\nYou are ready for **[functions and getting help](https:\/\/www.kaggle.com\/colinmorris\/functions-and-getting-help).**\n","a9bd8a88":"<hr\/>\n## 3.\n\n<!-- TODO: Or maybe this SHOULD just have a check method for consistency.-->\n\n<small>*Note: some questions, such as this one, don't have a .check() function. But it should be easy to tell if you've succeeded.*<\/small>\n\na) Add parentheses to the following expression so that it evaluates to 1.","e2ea93d2":"<hr\/>\n## 2.\n\nAdd code to the following cell to swap variables `a` and `b` (so that `a` refers to the object previously referred to by `b` and vice versa).","7edf08c6":"---\n**[Python Course Home Page](https:\/\/www.kaggle.com\/learn\/python)**\n\n","5a406d10":"Didn't get the right answer? How do you not even know your own favorite color?!\n\nDelete the `#` in the line below to make one of the lines run. You can choose between getting a hint or the full answer by choosing which line to remove the `#` from. \n\nRemoving the `#` is called uncommenting, because it changes that line from a \"comment\" which Python doesn't run to code, which Python does run.","d49d0689":"The upcoming questions work the same way. The only thing that will change are the questions numbers. For the next question, you'll call `q1.check()`, `q1.hint()`, `q1.solution()`, for question 5, you'll call `q5.check()`, and so on.","e814141c":"Try adding another line of code in the cell above and re-running it. \n\nNow let's get a little fancier:  Add a new code cell by clicking on an existing code cell, hitting the escape key, and then hitting the `a` or `b` key.  The `a` key will add a cell above the current cell, and `b` adds a cell below.\n\nGreat! Now you know how to use Kernels.\n\nEach hands-on exercise starts by setting up our feedback and code checking mechanism. Run the code cell below to do that. Then you'll be ready to move on to question 0.","a1d6002b":"<hr\/>\n## 4. \nAlice, Bob and Carol have agreed to pool their Halloween candy and split it evenly among themselves.\nFor the sake of their friendship, any candies left over will be smashed. For example, if they collectively\nbring home 91 candies, they'll take 30 each and smash 1.\n\nWrite an arithmetic expression below to calculate how many candies they must smash for a given haul.","e318504e":"## 0.\n\n*This is a silly question intended as an introduction to the format we use for hands-on exercises throughout all Kaggle courses.*\n\n**What is your favorite color? **\n\nTo complete this question, create a variable called `color` in the cell below with an appropriate value. The function call `q0.check()` (which we've already provided in the cell below) will check your answer.","9c686a74":"# Exercises","1d81b2e2":"<hr\/>\n\n## 1.\n\nComplete the code below. In case it's helpful, here is the table of available arithmatic operations:\n\n\n\n| Operator     | Name           | Description                                            |\n|--------------|----------------|--------------------------------------------------------|\n| ``a + b``    | Addition       | Sum of ``a`` and ``b``                                 |\n| ``a - b``    | Subtraction    | Difference of ``a`` and ``b``                          |\n| ``a * b``    | Multiplication | Product of ``a`` and ``b``                             |\n| ``a \/ b``    | True division  | Quotient of ``a`` and ``b``                            |\n| ``a \/\/ b``   | Floor division | Quotient of ``a`` and ``b``, removing fractional parts |\n| ``a % b``    | Modulus        | Integer remainder after division of ``a`` by ``b``     |\n| ``a ** b``   | Exponentiation | ``a`` raised to the power of ``b``                     |\n| ``-a``       | Negation       | The negative of ``a``                                  |\n\n<span style=\"display:none\"><\/span>\n","e513f9d0":"**[Python Course Home Page](https:\/\/www.kaggle.com\/learn\/python)**\n\n---\n"}}