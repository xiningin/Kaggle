{"cell_type":{"5081bb2d":"code","960ec4d8":"code","af7a55b8":"code","a45ab284":"code","a8e57bcf":"code","b9d57872":"code","db57b0c7":"code","65961421":"code","4228b437":"code","41dc1328":"code","547fc9cd":"code","34cce2b6":"markdown","af8add38":"markdown","761013dd":"markdown","9d7fb7be":"markdown","b2eaa41b":"markdown","0953068d":"markdown","4d4fe6e1":"markdown","73e5bedf":"markdown"},"source":{"5081bb2d":"!pip install fastai --upgrade","960ec4d8":"from fastai import *\nfrom fastai.tabular import *","af7a55b8":"input_path = '\/kaggle\/input\/'\ntrain_df = pd.read_csv(f'{input_path}train.csv')\ntest_df = pd.read_csv(f'{input_path}test.csv')","a45ab284":"for df in [train_df, test_df]:\n    df['Title'] = df['Name'].str.split(',').str[1].str.split(' ').str[1]\n    df['Deck'] = df['Cabin'].str[0]\n\n# find mean age for each Title across train and test data sets\nall_df = pd.concat([train_df, test_df], sort=False)\nmean_age_by_title = all_df.groupby('Title').mean()['Age']\n# update missing ages\nfor df in [train_df, test_df]:\n    for title, age in mean_age_by_title.iteritems():\n        df.loc[df['Age'].isnull() & (df['Title'] == title), 'Age'] = age","a8e57bcf":"dep_var = 'Survived'\ncat_names = ['Pclass', 'Sex', 'Embarked', 'Title', 'Deck']\ncont_names = ['Age', 'Fare', 'SibSp', 'Parch']\nprocs = [FillMissing, Categorify, Normalize]\n\ntest = TabularList.from_df(test_df, cat_names=cat_names, cont_names=cont_names, procs=procs)\ndata = (TabularList.from_df(train_df, path='.', cat_names=cat_names, cont_names=cont_names, procs=procs)\n                           .split_by_idx(list(range(0,200)))\n                           .label_from_df(cols=dep_var)\n                           .add_test(test, label=0)\n                           .databunch())","b9d57872":"np.random.seed(101)\nlearn = tabular_learner(data, layers=[60, 20], metrics=accuracy)\nlearn.fit(5)","db57b0c7":"predictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)","65961421":"sub_df = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Survived': labels})\nsub_df.to_csv('submission.csv', index=False)","4228b437":"sub_df.tail()","41dc1328":"create_download_link(sub_df)","547fc9cd":"from IPython.display import HTML\nimport base64\n\ndef create_download_link( df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = f'<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    return HTML(html)","34cce2b6":"## Training","af8add38":"Need at least v1.0.25 of `fastai` so update default Kaggle version.","761013dd":"## Feature engineering\n- Extract *Title* from the name colum. \n- Extract *Deck* from the first character of the cabin number.\n- Fill in missing *Age* values with the mean age for passengers with the same title.","9d7fb7be":"## Inference\nPredictions come as an array of probabilities of death or survival  for each passenger in the test set. Use `argmax` to convert each to`1` or `0` then construct the submission dataframe and save to CSV.","b2eaa41b":"\n## Fastai setup","0953068d":"## Load data","4d4fe6e1":"Check that what we are submitting looks sensible.","73e5bedf":"# Predicting survival of Titanic passengers"}}