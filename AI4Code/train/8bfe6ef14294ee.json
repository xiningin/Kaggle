{"cell_type":{"c775a37f":"code","8d2bf91c":"code","47a3cabf":"code","8f100e2e":"code","7e1b5086":"code","6931cd39":"code","e346c193":"code","6f93e720":"code","fb6d3486":"code","527de1b7":"code","60ba71a3":"code","2039b8c5":"code","9a1b3d3c":"code","efba0b48":"code","3ce585cf":"code","f20ee01a":"code","6f93cbae":"code","64dbb15f":"code","43fc94fa":"code","3f82cb7e":"code","6b1ab1d9":"code","d70c28a4":"code","4c26579f":"code","f6d487c4":"code","3d100bfa":"code","3bdc0644":"code","1dd446f5":"code","bea21f98":"code","f368e6f2":"code","a8a9ddc8":"code","3e109263":"code","d0f312b6":"code","e1a9e9ff":"code","2263b312":"code","f80ad8d7":"code","5e25745d":"markdown","6d0e3c30":"markdown","76de91a4":"markdown","ea0ed35a":"markdown","af7d4741":"markdown","44f498d9":"markdown","3f751798":"markdown","522138cd":"markdown","0870160a":"markdown","ec1d0909":"markdown","cdc20645":"markdown","a3a2e4fc":"markdown","8cc2c915":"markdown","1f6bd369":"markdown","b058e0fb":"markdown","d72b7e4e":"markdown","46b35732":"markdown","6399ebae":"markdown","76cff0a4":"markdown"},"source":{"c775a37f":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss, confusion_matrix\nfrom lightgbm import LGBMClassifier\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nimport time\nimport random\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.decomposition import PCA\nfrom sklearn.neighbors import LocalOutlierFactor\n\n# Pandas setting to display more dataset rows and columns\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', None)\npd.set_option('display.float_format', lambda x: '%.5f' % x)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d2bf91c":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv\", low_memory=False)#, nrows=10000)\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv\", low_memory=False)\ntrain.info(memory_usage=\"deep\")","47a3cabf":"test.info(memory_usage=\"deep\")","8f100e2e":"# Colors to be used for plots\ncolors = [\"lightcoral\", \"sandybrown\", \"darkorange\", \"mediumseagreen\",\n          \"lightseagreen\", \"cornflowerblue\", \"mediumpurple\", \"palevioletred\",\n          \"lightskyblue\", \"sandybrown\", \"yellowgreen\", \"indianred\",\n          \"lightsteelblue\", \"mediumorchid\", \"deepskyblue\"]","7e1b5086":"fig, axs = plt.subplots(ncols=2, nrows=1, figsize=(18, 8), gridspec_kw={'width_ratios': [2, 1]})\n\nbars = axs[0].bar(train[\"target\"].value_counts().sort_index().index,\n                  train[\"target\"].value_counts().sort_index().values,\n                  color=colors,\n                  edgecolor=\"black\")\naxs[0].set_title(\"Target distribution\", fontsize=20, pad=15)\naxs[0].set_ylabel(\"Count\", fontsize=14, labelpad=15)\naxs[0].set_xlabel(\"Target label\", fontsize=14, labelpad=10)\naxs[0].bar_label(bars, train[\"target\"].value_counts().sort_index().values,\n                 padding=3, fontsize=12)\naxs[0].bar_label(bars, [f\"{x:2.1f}%\" for x in train[\"target\"].value_counts().sort_index().values\/2000],\n                 padding=-20, fontsize=12)\naxs[0].margins(0.025, 0.06)\naxs[0].grid(axis=\"y\")\n\npie = axs[1].pie(train[\"target\"].value_counts(sort=False).sort_index().values,\n                 labels=train[\"target\"].value_counts(sort=False).sort_index().index,\n                 colors=colors,\n                 rotatelabels=True,\n                 textprops={\"fontsize\": 14})\naxs[1].axis(\"equal\")\nplt.show();","6931cd39":"df = pd.DataFrame()\ndf[\"id\"] = train[\"id\"]\ndf[\"target\"] = train[\"target\"]\ndf[\"id\"] = pd.cut(df[\"id\"], np.arange(0, 201000, 1000), right=False)\nvalues = df.groupby(\"id\")[\"target\"].value_counts(sort=False).values\nclasses = [\"Class_\" + str(x) for x in np.arange(9)]\n\ncols = 3\nrows = 3\nfig, axs = plt.subplots(ncols=cols, nrows=rows, figsize=(16,rows*4), sharey=False)\n\nplt.subplots_adjust(hspace = 0.35)\n\ni=0\nfor r in np.arange(0, rows, 1):\n    for c in np.arange(0, cols, 1):\n        axs[r, c].plot(np.arange(0, 200, 1),\n                       [values[x] for x in np.arange(i, 1800, 9)],\n                       color=colors[i])\n        axs[r, c].set_title(classes[i], fontsize=12, pad=5)\n        axs[r, c].set_xticks(np.arange(0, 250, 50))\n        axs[r, c].set_xticklabels([str(int(x))+\"k\" for x in axs[r, c].get_xticks()])\n        axs[r, c].set_xlabel(\"Dataframe id\")\n        axs[r, c].set_ylabel(\"Class labels qty per 1k rows\")\n        axs[r, c].set_ylim(0, 320)\n        i+=1\nfig.suptitle(\"Class labels distribution in the train dataset\", fontsize=20)\nplt.show();","e346c193":"def make_data_plots(df, i=0):\n    \"\"\"\n    Makes value distribution histogram plots for a given dataframe features\n    \"\"\"\n    columns = df.drop([\"target\", \"id\"], axis=1).columns.values\n\n    cols = 3\n    rows = (len(columns) - i) \/\/ cols + 1\n\n    fig, axs = plt.subplots(ncols=cols, nrows=rows, figsize=(16,rows*4), sharey=True)\n    plt.subplots_adjust(hspace = 0.2)\n    for r in np.arange(0, rows, 1):\n        for c in np.arange(0, cols, 1):\n            if i >= len(columns):\n                axs[r, c].set_visible(False)\n            else:\n                axs[r, c].hist(df[columns[i]].values, bins = 30,\n                               color=random.choice(colors),\n                               edgecolor=\"black\")\n                axs[r, c].set_title(columns[i], fontsize=12, pad=5)\n            i+=1","6f93e720":"make_data_plots(train)","fb6d3486":"def make_nonzero_data_plots(df, i=0):\n    \"\"\"\n    Makes nonzero value distribution histogram plots for a given dataframe features\n    \"\"\"    \n    \n    columns = df.drop([\"target\", \"id\"], axis=1).columns.values\n\n    cols = 3\n    rows = (len(columns) - i) \/\/ cols + 1\n\n    fig, axs = plt.subplots(ncols=cols, nrows=rows, figsize=(16,rows*4), sharey=False)\n    plt.subplots_adjust(hspace = 0.2)\n    for r in np.arange(0, rows, 1):\n        for c in np.arange(0, cols, 1):\n            if i >= len(columns):\n                axs[r, c].set_visible(False)\n            else:\n                axs[r, c].hist(df[df[columns[i]] > 0][columns[i]].values, bins = 30,\n                               color=random.choice(colors),\n                               edgecolor=\"black\")\n                axs[r, c].set_title(columns[i], fontsize=12, pad=5)\n            i+=1","527de1b7":"make_nonzero_data_plots(train)","60ba71a3":"x = -1*np.arange(len(test.drop([\"id\"], axis=1).columns))\n\nfig, ax = plt.subplots(figsize=(16, 30))\nbars = ax.barh(x+0.2, train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).values \/ train.shape[0],\n               height=0.4, color=\"cornflowerblue\", label=\"Train dataset\", edgecolor=\"black\")\nbars2 = ax.barh(x-0.2, test.drop([\"id\"], axis=1).astype(bool).sum(axis=0).values \/ test.shape[0],\n                height=0.4, color=\"palevioletred\", label=\"Test dataset\", edgecolor=\"black\")\nax.set_title(\"Fraction of nonzero values in the both datasets\", fontsize=30, pad=15)\nax.set_ylabel(\"Feature names\", fontsize=20, labelpad=15)\nax.set_xlabel(\"Fraction of nonzero values\", fontsize=20, labelpad=15)\nax.set_xticks(np.arange(0, 0.8, 0.05))\nax.set_yticks(x)\nax.set_yticklabels(list(test.drop([\"id\"], axis=1).columns.values))\nax.tick_params(axis=\"x\", labelsize=15)\nax.tick_params(axis=\"y\", labelsize=14)\nax.grid(axis=\"x\")\nax.legend(fontsize=15)\nax2 = ax.secondary_xaxis('top')\nax2.set_xticks(np.arange(0, 0.8, 0.05))\nax2.set_xlabel(\"Fraction of nonzero values\", fontsize=20, labelpad=15)\nax2.tick_params(axis=\"x\", labelsize=15)\nplt.margins(0.05, 0.01)","2039b8c5":"pca = PCA(n_components=2)\nX_reduced = pd.DataFrame(pca.fit_transform(train.drop([\"id\", \"target\"], axis=1)))\n\nfig, ax = plt.subplots(figsize=(16, 9))\nax.scatter(X_reduced[0], X_reduced[1], c=LabelEncoder().fit_transform(train[\"target\"]), cmap=\"tab10\")\nax.set_title(\"Scatter plot of the original train set reduced to 2 dimensions\", fontsize=20, pad=15)\nplt.show();","9a1b3d3c":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(train.drop([\"id\", \"target\"], axis=1))\n\npca = PCA(n_components=2)\nX_reduced = pd.DataFrame(pca.fit_transform(X_scaled))\n\nfig, ax = plt.subplots(figsize=(16, 9))\nax.scatter(X_reduced[0], X_reduced[1], c=LabelEncoder().fit_transform(train[\"target\"]), cmap=\"tab10\")\nax.set_title(\"Scatter plot of the scaled train set reduced to 2 dimensions\", fontsize=20, pad=15)\nplt.show();","efba0b48":"# iso_forest = IsolationForest(n_jobs=-1, random_state=42, n_estimators=3000)\n# iso_forest.fit(train.drop([\"id\", \"target\"], axis=1))\n# scores = iso_forest.decision_function(train.drop([\"id\", \"target\"], axis=1))\n# print(f\"Anomalies found in the train dataset: {(scores < 0).sum()}\")","3ce585cf":"# # Target distribution in detected anomalies\n# train.loc[(scores < 0), \"target\"].value_counts()","f20ee01a":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(train.drop([\"id\", \"target\"], axis=1))\nlof = LocalOutlierFactor(n_jobs=-1)\nlof.fit(X_scaled)\nscores = lof.negative_outlier_factor_\nscore_threshold = -1.94\nto_drop = train.loc[scores < score_threshold].index\nprint(f\"Anomalies found in the train dataset: {(scores < score_threshold).sum()}\")","6f93cbae":"# Target distribution in detected anomalies\ntrain.loc[(scores < score_threshold), \"target\"].value_counts()","64dbb15f":"# Dropping anomaly rows detected with Isolation Forest\ntrain.drop(axis=0, index=set(to_drop), inplace=True)\ntrain.shape","43fc94fa":"train.drop([\"id\", \"target\"], axis=1).duplicated(keep=False).sum()","3f82cb7e":"def delete_duplicates(df):\n    \"\"\"\n    Finds duplicates in a given DataFrame and deletes rows with identical features values but different target. \n    \"\"\"\n    \n    # Copying duplicate rows in a new dataset and getting their indices\n    idx = df.drop([\"id\", \"target\"], axis=1).duplicated(keep=False)\n    duplicates = df.loc[idx == True].copy()\n    features = [x for x in duplicates.columns if \"feature\" in x]\n    idx = duplicates[\"id\"]\n    \n    # Checking if which rows with equal feature values have different target\n    indx_to_drop = []\n    for index in idx:\n        for row in idx:\n            if (row != index) and (row not in indx_to_drop):\n                if duplicates.loc[index, features].equals(duplicates.loc[row, features]):\n                    if duplicates.loc[index, \"target\"] != duplicates.loc[row, \"target\"]:\n    #                     print(f\"Found duplicates with different targets: {index} - {duplicates.loc[index, 'target']} and {row} - {duplicates.loc[row, 'target']}\")\n                        indx_to_drop.append(index)\n                        indx_to_drop.append(row)\n    #                 else:\n    #                     print(f\"Found duplicates with the same target: {index} and {row}\")\n    \n    # Reporting results\n    print(f\"There are {len(duplicates['id'])} duplicated rows in the dataset.\")\n    print(f\"{len(set(indx_to_drop))} of them have different target. They will be deleted from the dataset.\")\n    print(f\"The datatframe has {len(df['id'])} rows.\")\n    df.drop(axis=0, index=set(indx_to_drop), inplace=True)\n    print(f\"After duplicated deletion there are {len(df['id'])} rows.\")\n    \n    return df","6b1ab1d9":"train = delete_duplicates(train)","d70c28a4":"# Target feature encoding\nencoder = LabelEncoder()\ntrain[\"target\"] = encoder.fit_transform(train[\"target\"])\ntrain[\"target\"].value_counts(sort=False)","4c26579f":"def transform_dataset(data):\n    \"\"\"\n    Adds new custom features and transforms original features into custom categories\n    \"\"\"\n    \n    # Copying features in a temporary dataset which will be transformed with MinMaxScaler\n    df = data[[x for x in data.columns if \"feature_\" in x]].copy()\n    \n    # Adding custom features\n    data[\"feature_75\"] = df.max(axis=1)\n    data[\"feature_76\"] = df.mean(axis=1)\n    data[\"feature_77\"] = df.median(axis=1)\n    data[\"feature_78\"] = df.nunique(axis=1)\n    data[\"feature_79\"] = (df == 0).astype(int).sum(axis=1)\n    data[\"feature_80\"] = (df != 0).sum(axis=1)\n    data[\"feature_81\"] = (df == 0).astype(int).sum(axis=1) \/ 75\n    data[\"feature_82\"] = (df != 0).sum(axis=1) \/ 75\n    \n    \n    # Scaling original features and adding new features basing on them\n    scaled_df = pd.DataFrame(index = data.index.values, columns = df.columns.values)\n    for col in df.columns.values:\n        scaler = MinMaxScaler()\n        scaled_df[col] = scaler.fit_transform(np.array(df[col]).reshape(-1, 1))\n    data[\"feature_83\"] = scaled_df.mean(axis=1)\n    data[\"feature_84\"] = (scaled_df == 1).sum(axis=1)\n    \n    # Cutting original features into custom intevals [0, 1), [1, 15), [15, 30) ...\n    intervals = np.insert(np.arange(15, 370, 15), 0, [0, 1])\n    intervals_text = pd.cut(train[\"feature_0\"], intervals, right=False).value_counts().sort_index().index.astype(\"string\")\n    map_dict = dict(zip(intervals_text, list(np.arange(len(intervals_text)))))\n    for i, column in enumerate(data.drop([\"id\"], axis=1).columns):\n        if ((i < 75) and (column!=\"target\")):\n            data[column] = pd.cut(data[column], intervals, right=False).astype(\"string\")\n            data[column].replace(map_dict, inplace=True)\n    \n    return data","f6d487c4":"# Transforming the train dataset and making value distribution plots for new custom features\nX_train = transform_dataset(train.copy())\nmake_data_plots(X_train, i=75)","3d100bfa":"# def train_optuna(trial, X=X_train, y=y_train):\n    \n#     preds = 0\n#     split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n#     for train_idx, valid_idx in split.split(X, y):\n#         X_train, X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n#         y_train, y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n\n#         # A list of hyperparameters to optimize\n#         lgbm_params = {\n#             'objective': 'multiclass',\n#             'reg_alpha': trial.suggest_float('reg_alpha', 1.0, 20.0),\n#             'reg_lambda': trial.suggest_float('reg_lambda', 0.00001, 0.1),\n#             'subsample': trial.suggest_float('subsample', 0.1, 1.0),\n#             'num_leaves': trial.suggest_int('num_leaves', 2, 20),\n#             'min_child_samples': trial.suggest_int('min_child_samples', 5, 40),\n#             'subsample_freq': trial.suggest_int('subsample_freq', 1, 5),\n#             'max_depth': trial.suggest_int('max_depth', 1, 30),\n#             'learning_rate': trial.suggest_float('learning_rate', 0.0001, 0.1),\n#             'colsample_bytree': trial.suggest_float('colsample_bytree', 0.1, 0.8),\n#             'n_estimators': 20000,\n#             'random_state': 42,\n#             'boosting_type': 'gbdt',\n#             'metric': 'multi_logloss',\n#             'num_class': 9,\n#         }\n        \n#         model = LGBMClassifier(**lgbm_params)\n#         model.fit(\n#                     X_train, y_train,\n#                     eval_set=(X_valid, y_valid),\n#                     eval_metric='multi_logloss',\n#                     early_stopping_rounds=500,\n#                     verbose=False,\n# #                     categorical_feature=cat_features\n#                 )\n\n#         oof = model.predict_proba(X_valid)\n    \n#     return log_loss(y_valid, oof)","3bdc0644":"# %%time\n# Defining and running Optuna using the function above\n# study = optuna.create_study(direction='minimize')\n# study.optimize(train_optuna, n_trials = 60)\n\n# Showing optimization results\n# print('Number of finished trials:', len(study.trials))\n# print('Best trial:', study.best_trial.params)\n# print('Best value:', study.best_value)","1dd446f5":"def train_with_folds(X, y, X_test, models, splits=10):\n    \"\"\"\n    Splits a train dataset into folds to train a given model and make test data predictions \n    \"\"\"\n    skf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n    oof_preds = np.zeros((train.shape[0], y.nunique()))\n    conf_mx_preds = np.zeros(train.shape[0])\n    preds = 0\n    feature_importances = 0\n    for model in models:\n        for num, (train_idx, valid_idx) in enumerate(skf.split(X, y)):\n            X_train, X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n            y_train, y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n\n            model.fit(X_train, y_train,\n                      eval_set=(X_valid, y_valid),\n                      eval_metric='multi_logloss',\n                      early_stopping_rounds=500,\n                      verbose=False)\n            oof_preds[valid_idx] = model.predict_proba(X_valid)\n            conf_mx_preds[valid_idx] = model.predict(X_valid)\n            preds += model.predict_proba(X_test) \/ (splits * len(models))\n            print(f\"\\nFold {num} logloss: {log_loss(y_valid, oof_preds[valid_idx])}\")\n            feature_importances += model.feature_importances_ \/ (splits * len(models))\n    print(f\"Overall logloss: {log_loss(y, oof_preds)}\")\n    conf_mx = confusion_matrix(y, np.array([np.argmax(x) for x in oof_preds]).reshape(-1,1))\n    \n    return preds, feature_importances, conf_mx","bea21f98":"X_train.drop([\"id\", \"target\"], axis=1, inplace=True)\ny_train = train[\"target\"]\nX_test = transform_dataset(test).drop(\"id\", axis=1)","f368e6f2":"%%time\n\n# The hyperparameters below are result of using Optuna\nmodels = [\n#             LGBMClassifier(\n# #                        objective=\"multiclassova\",\n#                        objective=\"multiclass\",\n#                        n_estimators=10000,\n#                        boosting_type=\"gbdt\",\n#                        random_state=42,\n#                        learning_rate=0.0022514234099919664,\n#                        max_depth=25,\n#                        num_leaves=15,\n#                        subsample=0.3080203520849589,\n#                        subsample_freq=2,\n#                        colsample_bytree=0.26692367921833543,\n#                        reg_alpha=16.005201138106333,\n#                        reg_lambda=0.033557902264358674,\n#                        min_child_samples=36,\n#                        class_weight=\"balanced\",\n#                        n_jobs=-1,\n# #                        device=\"GPU\"\n#                         ),\n         LGBMClassifier(\n#                        objective=\"multiclassova\",\n                       objective=\"multiclass\",\n                       n_estimators=10000,\n                       boosting_type=\"gbdt\",\n                       random_state=42,\n                       learning_rate=0.0022514234099919664,\n                       max_depth=25,\n                       num_leaves=15,\n                       subsample=0.3080203520849589,\n                       subsample_freq=2,\n                       colsample_bytree=0.26692367921833543,\n                       reg_alpha=16.005201138106333,\n                       reg_lambda=0.033557902264358674,\n                       min_child_samples=36,\n                       n_jobs=-1,\n#                        device=\"GPU\"\n                         )]\n\npreds, feature_importances, conf_mx = train_with_folds(X_train, y_train, X_test, models)","a8a9ddc8":"conf_mx","3e109263":"fig, ax = plt.subplots(figsize=(10, 10))\nax.matshow(conf_mx, cmap=plt.cm.get_cmap(\"viridis\"))","d0f312b6":"df = pd.DataFrame(columns=[\"Feature\", \"Importance\"])\ndf[\"Feature\"] = X_test.columns\ndf[\"Importance\"] = feature_importances\/feature_importances.sum()\ndf.loc[:74, \"Color\"] = \"cornflowerblue\"\ndf.loc[75:, \"Color\"] = \"palevioletred\"\ndf.sort_values(\"Importance\", axis=0, ascending=False, inplace=True)\n\nlegend_lines = [Line2D([0], [0], color=\"cornflowerblue\", lw=10),\n                Line2D([0], [0], color=\"palevioletred\", lw=10)]\n\nx = np.arange(0, len(df[\"Feature\"]))\nheight = 0.4\n\nfig, ax = plt.subplots(figsize=(16, 30))\nbars1 = ax.barh(x, df[\"Importance\"], height=height,\n                color=df[\"Color\"], edgecolor=\"black\")\nax.set_title(\"Feature importances\", fontsize=30, pad=15)\nax.set_ylabel(\"Feature names\", fontsize=20, labelpad=15)\nax.set_xlabel(\"Feature importance\", fontsize=20, labelpad=15)\nax.set_yticks(x)\nax.set_yticklabels(df[\"Feature\"], fontsize=15)\n# ax.set_xlim(0, 6)\n# ax.set_xticks(np.arange(0, 6, 0.5))\nax.tick_params(axis=\"x\", labelsize=15)\nax.grid(axis=\"x\")\nax2 = ax.secondary_xaxis('top')\nax2.set_xlabel(\"Feature importance\", fontsize=20, labelpad=15)\n# ax2.set_xlim(0, 6)\n# ax2.set_xticks(np.arange(0, 6, 0.5))\nax2.tick_params(axis=\"x\", labelsize=15)\nax.legend(legend_lines, [\"Original features\", \"Custom features\"], fontsize=15, loc=1, bbox_to_anchor=(0, 0, 1, 0.97))\nplt.margins(0.04, 0.01)\nplt.gca().invert_yaxis()","e1a9e9ff":"df = pd.DataFrame(columns=[\"Feature\", \"Importance\"])\ndf[\"Feature\"] = X_test.columns[:75]\ndf[\"Importance\"] = feature_importances[:75]\/feature_importances.sum()\ndf.sort_values(\"Importance\", axis=0, ascending=True, inplace=True)\n\n\nheight = 0.7\n\nfig, axs = plt.subplots(ncols=2, nrows=1, figsize=(16,8))\n\nbars1 = axs[0].barh(df[\"Feature\"].iloc[-15:], df[\"Importance\"].iloc[-15:],\n                    height=height,\n                    color=\"mediumorchid\",\n                    edgecolor=\"black\")\naxs[0].set_title(\"Top 15 most important original features\", fontsize=15)\naxs[0].set_xlabel(\"Feature importance\", fontsize=15, labelpad=10)\n\nbars2 = axs[1].barh(train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).sort_values(ascending=True).index[-15:],\n                    train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).sort_values(ascending=True).values[-15:] \/ train.shape[0],\n                    height=height,\n                    color=\"mediumseagreen\",\n                    edgecolor=\"black\")\naxs[1].set_title(\"Top 15 original features with the most nonzero values\", fontsize=15)\naxs[1].set_xlabel(\"Fraction of nonzero values\", fontsize=15, labelpad=10)\naxs[1].bar_label(bars2, \n                 [\"Top 15 important feature\" if x in list(df[\"Feature\"].iloc[-15:]) else \"\" for x in train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).sort_values(ascending=True).index[-15:]],\n                 padding=-175, fontsize=12, color=\"white\", weight=\"bold\")\n\nfig.suptitle(\"Top 15 original features with the most importance and nonzero values\", fontsize=20)\nplt.show();","2263b312":"df = pd.DataFrame(columns=[\"Feature\", \"Importance\"])\ndf[\"Feature\"] = X_test.columns[:75]\ndf[\"Importance\"] = feature_importances[:75]\/feature_importances.sum()\ndf.sort_values(\"Importance\", axis=0, ascending=False, inplace=True)\n\ncolors = [\"mediumorchid\" if x in df[\"Feature\"].iloc[-15:] else \"mediumseagreen\" for x in train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).sort_values(ascending=True).index[-15:]]\n\nheight = 0.7\n\nfig, axs = plt.subplots(ncols=2, nrows=1, figsize=(16,8))\n\nbars1 = axs[0].barh(df[\"Feature\"].iloc[-15:], df[\"Importance\"].iloc[-15:],\n                    height=height,\n                    color=\"mediumorchid\",\n                    edgecolor=\"black\")\naxs[0].set_title(\"Top 15 least important original features\", fontsize=15)\naxs[0].set_xlabel(\"Feature importance\", fontsize=15, labelpad=10)\n\nbars2 = axs[1].barh(train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).sort_values(ascending=False).index[-15:],\n                    train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).sort_values(ascending=False).values[-15:] \/ train.shape[0],\n                    height=height,\n                    color=\"lightcoral\",\n                    edgecolor=\"black\")\naxs[1].set_title(\"Top 15 original features with the least nonzero values\", fontsize=15)\naxs[1].set_xlabel(\"Fraction of nonzero values\", fontsize=15, labelpad=10)\naxs[1].bar_label(bars2, [\"Top 15 least important feature\" if x in list(df[\"Feature\"].iloc[-15:]) else \"\" for x in train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).sort_values(ascending=False).index[-15:]],\n                 padding=-215, fontsize=12, color=\"white\", weight=\"bold\")\n\nfig.suptitle(\"Top 15 original features with the least importance and nonzero values\", fontsize=20)                \nplt.show();","f80ad8d7":"predictions = pd.DataFrame()\npredictions[\"id\"] = test[\"id\"]\npredictions = pd.concat([predictions, pd.DataFrame(preds, columns=[\"Class_\" + str(x) for x in np.arange(1, 10, 1)])], axis=1)\npredictions.to_csv('submission.csv', index=False, header=predictions.columns)\npredictions.head()","5e25745d":"# **Data analysis**","6d0e3c30":"# **Confusion matrix**","76de91a4":"# **Predictions submission**","ea0ed35a":"As you can see, the data does not have distinct clusters after reducing dimensions.","af7d4741":"## Original features value distribution in the train dataset","44f498d9":"So it looks like class labels are distributed pretty evenly across the dataset.","3f751798":"There are some duplicates in the dataset. If they have identical feature but different target values it may decrease machine learning performance.","522138cd":"## Fraction of nonzero values in the both datasets","0870160a":"# **Feature importances**","ec1d0909":"## PCA","cdc20645":"Let's check if these classes are evenly distributed in the dataset.","a3a2e4fc":"## Detecting anomalies with LocalOutlierFactor","8cc2c915":"# **Data import**","1f6bd369":"# **Data preparation**","b058e0fb":"## Original features nonzero value distribution in the train dataset","d72b7e4e":"## Target distribution","46b35732":"I used Optuna to optimize estimator's hyperparameters. The code of the two cells below is commented because it takes a lot of time run.","6399ebae":"## Detecting anomalies with IsolationForest","76cff0a4":"# **Machine Learning**"}}