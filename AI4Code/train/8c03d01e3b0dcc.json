{"cell_type":{"2fb5db30":"code","83d1009c":"code","8095eb15":"code","18416942":"code","baf20265":"code","c3f22b82":"code","26174fb5":"code","0b6905b1":"code","5ed8f7c1":"code","c2ebb3da":"code","069cc108":"code","914c43ab":"code","b960bccb":"code","e4dbf9d0":"code","80dcbfc9":"code","11add48c":"code","194d376d":"code","5ab7ccdd":"code","9e06b51c":"code","ba32246b":"code","5e021d55":"code","bb8dc316":"code","17204a45":"code","7f82a415":"code","364e4173":"code","eecd7fd4":"code","b3f3cec9":"code","f45315e9":"code","3d6aedfa":"code","6a4179a8":"code","1ac03524":"code","9546fa1e":"code","d08fc955":"code","ef82a460":"code","025967f8":"code","d8ada757":"markdown","7e70ae38":"markdown","61be3510":"markdown","e36bc04e":"markdown","39a4e367":"markdown","a6d4c0ad":"markdown","a99fb3d8":"markdown","d831b432":"markdown","cdd5cc35":"markdown","b9243eac":"markdown"},"source":{"2fb5db30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83d1009c":"import math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import skew, norm\nfrom scipy.special import boxcox1p\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.kernel_ridge import KernelRidge\nimport xgboost as xgb\nimport lightgbm as lgb\nimport warnings\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\npd.set_option('display.max_columns', None)","8095eb15":"df_train = pd.read_csv('..\/input\/forest-cover-type-prediction\/train.csv')\ndf_test = pd.read_csv('..\/input\/forest-cover-type-prediction\/test.csv')\ndf_train.drop(['Id'], axis=1, inplace=True)\ny = df_train.iloc[:, -1]\ndf_train = df_train.iloc[:, :-1]\ntest_Id = df_test.iloc[:, 0]\ndf_test.drop(['Id'], axis=1, inplace=True)","18416942":"ntrain = df_train.shape[0]\nntest = df_test.shape[0]\nall_data = pd.concat([df_train, df_test], axis=0, sort=False)\nprint(ntrain, ntest)\nprint(all_data.shape)\nall_data.head()","baf20265":"df_train.head()","c3f22b82":"df_train.describe().T","26174fb5":"df_train.drop(['Soil_Type7', 'Soil_Type15'], axis=1, inplace=True)","0b6905b1":"sns.boxplot('Horizontal_Distance_To_Hydrology', data=all_data)","5ed8f7c1":"# Checking correlatinos","c2ebb3da":"corrmat = all_data.iloc[:, :10].corr()\nplt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat)","069cc108":"plt.subplots(figsize=(12, 8))\nplt.subplot(1, 2, 1)\nsns.scatterplot(x='Horizontal_Distance_To_Hydrology', y='Vertical_Distance_To_Hydrology', data=all_data)\nplt.subplot(1, 2, 2)\nsns.scatterplot(x='Hillshade_3pm', y='Aspect', data=all_data)","914c43ab":"a = all_data['Horizontal_Distance_To_Hydrology']\nb = all_data['Vertical_Distance_To_Hydrology']\nall_data['Distance_To_Hydrology'] = np.sqrt(np.power(a, 2) + np.power(b, 2))","b960bccb":"all_data['Horizontal_distance'] = (all_data['Horizontal_Distance_To_Hydrology'] + \n                                   all_data['Horizontal_Distance_To_Roadways']  + \n                                   all_data['Horizontal_Distance_To_Fire_Points']) \/3","e4dbf9d0":"all_data['average_hillshade'] = (all_data['Hillshade_3pm'] + \n                                 all_data['Hillshade_Noon'] + \n                                 all_data['Hillshade_9am'])\/3","80dcbfc9":"# high negative correlation, therefore making new feature\nall_data['Aspect_hillshade'] = (all_data['Aspect'] * all_data['Hillshade_9am'])\/255\nall_data['slope_hillshade'] = (all_data['Slope'] * all_data['Hillshade_Noon'])\/255\nall_data['Elevation'] = [math.floor(v\/50.0) for v in all_data['Elevation']]","11add48c":"all_data['EHDtH'] = all_data['Elevation'] - all_data['Horizontal_Distance_To_Hydrology'] * 0.2","194d376d":"all_data['Distanse_to_Hydrolody'] = (all_data['Horizontal_Distance_To_Hydrology'] ** 2 + \n                                     all_data['Vertical_Distance_To_Hydrology'] ** 2) ** 0.5","5ab7ccdd":"all_data['Hydro_Fire_1'] = (all_data['Horizontal_Distance_To_Hydrology'] + \n                            all_data['Horizontal_Distance_To_Fire_Points'])","9e06b51c":"all_data['Hydro_Fire_2'] = abs(all_data['Horizontal_Distance_To_Hydrology'] - \n                               all_data['Horizontal_Distance_To_Fire_Points'])","ba32246b":"all_data['Hydro_Road_1'] = abs(all_data['Horizontal_Distance_To_Hydrology'] + \n                               all_data['Horizontal_Distance_To_Roadways'])","5e021d55":"all_data['Hydro_Road_2'] = abs(all_data['Horizontal_Distance_To_Hydrology'] - \n                               all_data['Horizontal_Distance_To_Roadways'])","bb8dc316":"all_data['Fire_Road_1'] = abs(all_data['Horizontal_Distance_To_Fire_Points'] + \n                              all_data['Horizontal_Distance_To_Roadways'])","17204a45":"all_data['Fire_Road_2'] = abs(all_data['Horizontal_Distance_To_Fire_Points'] - \n                              all_data['Horizontal_Distance_To_Roadways'])","7f82a415":"all_data.head()","364e4173":"num_labels = [i for i in all_data.columns[0:10]]\nb = ['distance_to_hydrology','Horizontal_distance',\n     'average_hillshade','Aspect_hillshade','slope_hillshade','EVDtH',\n      'EHDtH','Distanse_to_Hydrolody', 'Hydro_Fire_1','Hydro_Fire_2','Hydro_Road_1', \n     'Hydro_Road_2','Fire_Road_1','Fire_Road_2']\nnum_labels.extend(b)","eecd7fd4":"train_data = all_data.iloc[:df_train.shape[0],:]\n\ntest_data = all_data.iloc[df_train.shape[0]:,:]","b3f3cec9":"# Outlier treatment for only continuous variables\n'''\nfor col in num_labels:\n    percentiles = train_data[col].quantile([0.01,0.99]).values\n    train_data[col][train_data[col] <= percentiles[0]] = percentiles[0]\n    train_data[col][train_data[col] >= percentiles[1]] = percentiles[1]\n    test_data[col][test_data[col] <= percentiles[0]] = percentiles[0]\n    test_data[col][test_data[col] >= percentiles[1]] = percentiles[1]\n'''","f45315e9":"rs = RobustScaler()\nrs.fit(train_data)\ntrain_data = rs.transform(train_data)\ntest_data = rs.transform(test_data)\ntrain_data = pd.DataFrame(train_data, columns = all_data.columns)\ntest_data = pd.DataFrame(test_data, columns = all_data.columns)","3d6aedfa":"train_data.head()","6a4179a8":"test_data.head()","1ac03524":"X_train, X_test, y_train, y_test = train_test_split(train_data, y, test_size = 0.1, shuffle= True)","9546fa1e":"etc = ExtraTreesClassifier(n_estimators=400)\netc.fit(X_train, y_train)","d08fc955":"u = etc.predict(X_test)\nprint(accuracy_score(u, y_test))\nprint(cross_val_score(etc, X_test, y_test, cv=5).mean())","ef82a460":"etc.fit(train_data, y)\ntest_predictions = etc.predict(test_data)","025967f8":"solutions = pd.DataFrame({'Id': test_Id, 'Cover_Type': test_predictions})\nsolutions.to_csv('finsubmission.csv',index=False)","d8ada757":"# Adding New Features","7e70ae38":"##### We now create a new feature distance to hydrology = sqrt((Horizontal_Distance_To_Hydrology)^2 + (Vertical_Distance_To_Hydrology)^2). We will multiply with sign of vertical distance since it represents whether it is above or below. We also create few other variables.","61be3510":"From the above corr graph we see that:\n\n1- Hilshade at 3pm and aspect ratio are correlated\n\n2- Horizontal_Distance_To_Hydrology and Vertical_Distance_To_Hydrology are correlated","e36bc04e":"# Modelling","39a4e367":"## Drop useless columns","a6d4c0ad":"# Handling Skewness doesn't give any performance improvement","a99fb3d8":"# Handling Outliers doesn't give any performance improvement","d831b432":"# Take a look at the data","cdd5cc35":"# Scaling","b9243eac":"# Read Data"}}