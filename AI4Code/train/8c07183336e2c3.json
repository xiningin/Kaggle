{"cell_type":{"4df5f872":"code","ec34e993":"code","e7f23f81":"code","753fbae2":"code","d3a8d36b":"code","3002a768":"code","caefab95":"code","27b26905":"code","4f4ec30a":"code","a02be95a":"code","fc60b6ae":"code","8acd815e":"code","fa7add60":"code","4f1e7446":"markdown"},"source":{"4df5f872":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import minmax_scale\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\nX_train = pd.read_csv('..\/input\/churn-model-data-set-competition-form\/X_train.csv')\nX_test = pd.read_csv('..\/input\/churn-model-data-set-competition-form\/X_test.csv')\ny_train = pd.read_csv('..\/input\/churn-model-data-set-competition-form\/y_train.csv')\ny_test = pd.read_csv('..\/input\/churn-model-data-set-competition-form\/test_label\/y_test.csv')\n","ec34e993":"# \uc2dc\ud5d8\ud658\uacbd\uc744 \uc704\ud574 print\ub97c \uc37c\uc2b5\ub2c8\ub2e4.\nprint(X_train.head())\nprint(y_train.head())\nprint(X_test.head())","e7f23f81":"# \uacb0\uce21\uce58 \ud655\uc778\nprint(X_train.isnull().sum())\nprint(X_test.isnull().sum())","753fbae2":"# y\uac12 \ud655\uc778\nprint(y_train)\n\n# \uba85\ubaa9\ud615 \ubcc0\uc218 \uc911\ubcf5\uac12 \ud655\uc778\nprint(X_train['Gender'].unique())\nprint(X_train['Geography'].unique())","d3a8d36b":"# \uc131\ubcc4\uc5d0 \ub300\ud574\uc11c \ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \ud480\uae30\ndef gender(x):\n    if x =='female' : return 'Female'\n    elif x == ' male' : return 'Male'\n    else: return x\n\nX_train['Gender'] = X_train['Gender'].apply(gender)\nX_test['Gender'] = X_test['Gender'].apply(gender)\n\nprint(X_train['Gender'].unique())","3002a768":"# \ubd88\ud544\uc694 \uceec\ub7fc \uc0ad\uc81c\nX_train = X_train.drop(['CustomerId', 'Surname'], axis = 1)\nX_test = X_test.drop(['CustomerId', 'Surname'], axis = 1)","caefab95":"# LabelEncoder\ncols = ['Geography', 'Gender']\nfor col in cols:\n    le = LabelEncoder()\n    le.fit(X_train[col])\n    X_train[col] = le.transform(X_train[col])\n    X_test[col] = le.transform(X_test[col])\nprint(X_train.head())\n","27b26905":"# modeling\n\nmodel = RandomForestClassifier()\n\n# hyper parameter tuning \nparams = { 'n_estimators' : [10, 100],\n           'max_depth' : [6, 8, 10, 12],\n           'min_samples_leaf' : [8, 12, 18],\n           'min_samples_split' : [8, 16, 20]\n            }\n\n# GridSearchCV \uc218\ud589\n\ngrid_cv = GridSearchCV(model, param_grid = params, cv = 3, n_jobs = -1)\ngrid_cv.fit(X_train, y_train['Exited'])\n\nprint('\ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130: ', grid_cv.best_params_)\nprint('\ucd5c\uace0 \uc608\uce21 \uc815\ud655\ub3c4: {:.4f}'.format(grid_cv.best_score_))\n","4f4ec30a":"model = RandomForestClassifier(n_estimators = 100,\n                              max_depth = 12,\n                              min_samples_leaf = 8,\n                              min_samples_split = 8)\nmodel.fit(X_train, y_train['Exited'])\n\nprint(model.score(X_train, y_train['Exited']))","a02be95a":"# \ud14c\uc2a4\ud2b8 \uc801\uc6a9\nprediction = model.predict_proba(X_test)\nprediction","fc60b6ae":"# \uc0b0\ucd9c\npd.DataFrame({'CustomerId': y_test.CustomerId, 'Exited': prediction[:, 1] }).to_csv('3333333.csv', index=False)\n# print(output.head())","8acd815e":"df = pd.read_csv('3333333.csv')\ndf.head()","fa7add60":"# auc test\nfrom sklearn.metrics import roc_auc_score\nprint(\"AUROC: \", round(roc_auc_score(y_test[['Exited']], prediction[0:, 1]),4))","4f1e7446":"# \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 \ubca0\uc774\uc2a4\ub77c\uc778\n\n## \ub370\uc774\ud130 \ubd84\uc11d \ucd08\ubcf4\uc774\uace0 \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\ub85c\ub9cc \uac04\ub2e8\ud558\uac8c \ubaa8\ub378\ub9c1 \ud588\uc2b5\ub2c8\ub2e4."}}