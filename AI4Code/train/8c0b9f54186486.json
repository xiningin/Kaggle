{"cell_type":{"500647a1":"code","406cbcd7":"code","e4c1382c":"code","275a718c":"code","aeffa186":"code","be79381e":"code","8a98a6cf":"code","5333e903":"code","9b6d2904":"code","b24f3767":"markdown","49be8027":"markdown","553c9e7f":"markdown"},"source":{"500647a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import InputLayer\nfrom tensorflow.python.keras.layers import  MaxPooling2D\nfrom tensorflow.python.keras.layers import Conv2D, Dense, Flatten\nfrom tensorflow.python.keras.optimizers import Adam\nfrom tensorflow.python.keras.layers import Dropout\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","406cbcd7":"x_l = np.load('..\/input\/Sign-language-digits-dataset\/X.npy')\nY_l = np.load('..\/input\/Sign-language-digits-dataset\/Y.npy')\nX = np.concatenate((x_l[204:409], x_l[822:1027] ), axis=0) # from 0 to 204 is zero sign and from 205 to 410 is one sign \nz = np.zeros(205)\no = np.ones(205)\nY = np.concatenate((z, o), axis=0)\nY = Y.reshape(X.shape[0],1)\nfrom sklearn.model_selection import train_test_split\nX, _, Y, _ = train_test_split(X, Y, test_size=0.95, random_state=0, stratify=Y)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=0, stratify=Y)\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]\nX_train_flatten = X_train.reshape(number_of_train,X_train.shape[1]*X_train.shape[2])#(348, 64x64)\nX_test_flatten = X_test .reshape(number_of_test,X_test.shape[1]*X_test.shape[2])\nx_train = X_train_flatten\nx_test = X_test_flatten\ny_train = Y_train\ny_test = Y_test\nfrom sklearn.preprocessing import OneHotEncoder\nsicak=OneHotEncoder(categories='auto')\ny_train=sicak.fit_transform(y_train).toarray()\nsicak2=OneHotEncoder(categories='auto')\ny_test=sicak2.fit_transform(y_test).toarray()\nlen(y_train)","e4c1382c":"model = Sequential()\n\nmodel.add(Dense(2048,activation=\"softmax\",input_dim=4096))#L1\n\nmodel.add(Dense(2,activation=\"softmax\"))\noptimizer = Adam(lr=1e-3)#0.001\nmodel.compile(optimizer=optimizer, loss='binary_crossentropy',metrics=['accuracy'])\ntarih=model.fit(x_train,y_train,epochs=200)","275a718c":"plt.plot(tarih.history['acc'])\nplt.plot(tarih.history['loss'])","aeffa186":"result = model.evaluate(x=x_test, y=y_test)\nresult#loss,accuracy","be79381e":"model.predict(x_test)","8a98a6cf":"y_test","5333e903":"model = Sequential()\n\nmodel.add(Dense(2048,activation=\"softmax\",input_dim=4096))#L1\nmodel.add(Dense(1024,activation=\"softmax\"))#L2\nmodel.add(Dense(512,activation=\"softmax\"))#L2\n\nmodel.add(Dense(2,activation=\"softmax\"))\noptimizer = Adam(lr=1e-3)#0.001\nmodel.compile(optimizer=optimizer, loss='binary_crossentropy',metrics=['accuracy'])\ntarih=model.fit(x_train,y_train,epochs=200)\nplt.plot(tarih.history['acc'])\nplt.plot(tarih.history['loss'])","9b6d2904":"plt.plot(tarih.history['acc'])\nplt.plot(tarih.history['loss'])","b24f3767":"When i try to built an ann with 4096-2048-2 layers there is no problem","49be8027":"But if i try to add extra hidden layers, ann cannot solve the problem.","553c9e7f":"Now i have a train set with 14 rows and testset 6 rows."}}