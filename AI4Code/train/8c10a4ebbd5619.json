{"cell_type":{"94424dec":"code","6480d83e":"code","73edba19":"code","96416fd4":"code","1e44bd0a":"code","54f407bf":"code","95efef14":"code","bbc57e13":"code","1ded7b9b":"code","2834fefd":"code","5a438661":"code","e6c92d3b":"code","a0cc0cf3":"code","964cd958":"code","efc4b769":"code","27ff7f5c":"code","f35961c3":"code","5804317b":"code","39c0eab2":"code","b235cc9e":"code","665c2f7d":"code","3e0cf4f7":"code","5cc2bc9c":"code","4aa59bc2":"code","bed9f103":"code","43016508":"code","af55b7ff":"code","2ed3df89":"code","ea204c44":"code","40145787":"markdown","496ae81c":"markdown","9993a878":"markdown","9b45c82e":"markdown","d7157412":"markdown","1bb0577b":"markdown","556e543a":"markdown","e06e5742":"markdown","e4083a5c":"markdown"},"source":{"94424dec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n#worldcloud library\nfrom wordcloud import WordCloud\n\n#matplotlib\nimport matplotlib.pyplot as plt\n\n#seaborn\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6480d83e":"df2015=pd.read_csv(\"..\/input\/2015.csv\")\ndf2016=pd.read_csv(\"..\/input\/2016.csv\")\ndf2017=pd.read_csv(\"..\/input\/2017.csv\")","73edba19":"df2015.head()","96416fd4":"df2015.info()","1e44bd0a":"f,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(df2015.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","54f407bf":"# Happiness Score and Freedom vs Happiness Rank in 2015\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015[\"Happiness Score\"],\n                    mode = \"lines\",\n                    name = \"happiness score\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df2015.Country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015.Freedom,\n                    mode = \"lines+markers\",\n                    name = \"freedom\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df2015.Country)\ndata = [trace1, trace2]\nlayout = dict(title = 'Happiness Score and Freedom vs Happiness Rank in 2015',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","95efef14":"# Happiness Score and Economy (GDP per Capita) vs Happiness Rank in 2015\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015[\"Happiness Score\"],\n                    mode = \"lines\",\n                    name = \"happiness score\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df2015.Country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015[\"Economy (GDP per Capita)\"],\n                    mode = \"lines+markers\",\n                    name = \"economy (GDP per capita)\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df2015.Country)\ndata = [trace1, trace2]\nlayout = dict(title = 'Happiness Score and Economy (GDP per Capita) vs Happiness Rank in 2015',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","bbc57e13":"# Happiness Score and Trust (Government Corruption) vs Happiness Rank in 2015\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015[\"Happiness Score\"],\n                    mode = \"lines\",\n                    name = \"happiness score\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df2015.Country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015[\"Trust (Government Corruption)\"],\n                    mode = \"lines+markers\",\n                    name = \"trust (government corruption)\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df2015.Country)\ndata = [trace1, trace2]\nlayout = dict(title = 'Happiness Score and Trust (Government Corruption) vs Happiness Rank in 2015',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","1ded7b9b":"#Scatter Example: Happiness Score vs Happiness Rank of Countries with 2015, 2016 and 2017 years\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015[\"Happiness Score\"],\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2015.Country)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2016[\"Happiness Rank\"],\n                    y = df2016[\"Happiness Score\"],\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2016.Country)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2017[\"Happiness.Rank\"],\n                    y = df2017[\"Happiness.Score\"],\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2017.Country)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Happiness Score vs Happiness Rank of Countries with 2015, 2016 and 2017 years',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Happiness Score',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","2834fefd":"#Scatter Example: Freedom vs Happiness Rank of Countries with 2015, 2016 and 2017 years\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015[\"Freedom\"],\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2015.Country)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2016[\"Happiness Rank\"],\n                    y = df2016[\"Freedom\"],\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2016.Country)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2017[\"Happiness.Rank\"],\n                    y = df2017[\"Freedom\"],\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2017.Country)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Freedom vs Happiness Rank of Countries with 2015, 2016 and 2017 years',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Freedom',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","5a438661":"#Scatter Example: Family vs Happiness Rank of Countries with 2015, 2016 and 2017 years\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2015[\"Happiness Rank\"],\n                    y = df2015[\"Family\"],\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2015.Country)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2016[\"Happiness Rank\"],\n                    y = df2016[\"Family\"],\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2016.Country)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2017[\"Happiness.Rank\"],\n                    y = df2017[\"Family\"],\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2017.Country)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Family vs Happiness Rank of Countries with 2015, 2016 and 2017 years',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Family',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","e6c92d3b":"df2015.Region.value_counts().unique","a0cc0cf3":"# Compare Happiness Score average vs Health (Life Expectancy) average of each region in 2015\n\n#preparing data\nlist_of_region=list(df2015.Region.unique())\nregion_avg=[]\nhealth_avg=[]\nfor i in list_of_region:\n    x=df2015[df2015.Region==i]\n    avg=sum(x[\"Happiness Score\"])\/len(x)\n    health_av=sum(x[\"Health (Life Expectancy)\"])\/len(x)\n    region_avg.append(avg)\n    health_avg.append(health_av)\ndata=pd.DataFrame({\"Region\":list_of_region,\"Happiness Average\":region_avg,\"Health (Life Expectancy) Average\":health_avg})\nnew_index=(data[\"Happiness Average\"].sort_values(ascending=False)).index.values\nsorted_data=data.reindex(new_index)\n\n# create trace1 \ntrace1 = go.Bar(\n                x = sorted_data.Region,\n                y = sorted_data[\"Happiness Average\"],\n                name = \"happiness\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = sorted_data.Region)\n# create trace2 \ntrace2 = go.Bar(\n                x = sorted_data.Region,\n                y = sorted_data[\"Health (Life Expectancy) Average\"],\n                name = \"health (life expectancy) average\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = sorted_data.Region)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\",title= 'Happiness and Health (Life Expectancy) Average of Regions in 2015')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","964cd958":"# Compare Happiness Score average vs Health (Life Expectancy) average of top 4 region in 2015\n\ndata1=sorted_data.iloc[:4,:]\n# create trace1 \ntrace1 = go.Bar(\n                x = data1.Region,\n                y = data1[\"Happiness Average\"],\n                name = \"happiness\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data1.Region)\n# create trace2 \ntrace2 = go.Bar(\n                x = data1.Region,\n                y = data1[\"Health (Life Expectancy) Average\"],\n                name = \"health (life expectancy) average\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data1.Region)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\",title= 'Happiness and Health (Life Expectancy) Average of top 4 Regions in 2015')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","efc4b769":"#another bar example\n\nx=data1.Region\n\ntrace1 = {\n  'x': x,\n  'y': data1[\"Happiness Average\"],\n  'name': 'happiness',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': data1[\"Health (Life Expectancy) Average\"],\n  'name': 'health (life expectancy) average',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 4 Regions'},\n  'barmode': 'relative',\n  'title': 'Happiness and Health (Life Expectancy) Average of top 4 Regions in 2015'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","27ff7f5c":"df2015.head()","f35961c3":"#Economy of happiest 7 countires in 2015\n# data preparation\ndata2 = df2015.head(7)\npie1 = data2[\"Economy (GDP per Capita)\"]\nlabels = data2.Country\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Economy Rate\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Economy Rate of the 7 Happiest Countries in 2015\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Economy (GDP per Capita)\",\n                \"x\": 0.32,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","5804317b":"df2016.head()","39c0eab2":"#happiness rank of top 50 countries vs generosity with Lower Confidence Interval (size) and Upper Confidence Interval (color) in 2016\n\ndata3=df2016.head(50)\ndata = [\n    {\n        'y': data3.Generosity,\n        'x': data3[\"Happiness Score\"],\n        'mode': 'markers',\n        'marker': {\n            'color': data3[\"Upper Confidence Interval\"],\n            'size': data3[\"Lower Confidence Interval\"],\n            'showscale': True\n        },\n        \"text\" :  data3.Country    \n    }\n]\niplot(data)","b235cc9e":"# Lets look at the generosity of the countries in 2015 and 2016\n\n# prepare data\nx2015 = df2015.Generosity\nx2016 = df2016.Generosity\n\ntrace1 = go.Histogram(\n    x=x2015,\n    opacity=0.75,\n    name = \"2015\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2016,\n    opacity=0.75,\n    name = \"2016\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay', #overlay=i\u00e7 ice gecir.\n                   title=' generosity of the countries in 2015 and 2016',\n                   xaxis=dict(title='generosity'),\n                   yaxis=dict( title='count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","665c2f7d":"# Lets look at the freedom of the countries in 2015 and 2016\n\n# prepare data\nx2015 = df2015.Freedom\nx2016 = df2016.Freedom\n\ntrace1 = go.Histogram(\n    x=x2015,\n    opacity=0.75,\n    name = \"2015\",\n    marker=dict(color='rgba(100, 200, 80, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2016,\n    opacity=0.75,\n    name = \"2016\",\n    marker=dict(color='rgba(50, 14, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay', #overlay=i\u00e7 ice gecir.\n                   title=' Freedom of the countries in 2015 and 2016',\n                   xaxis=dict(title='freedom'),\n                   yaxis=dict( title='count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3e0cf4f7":"# Lets look at the freedom of the countries in 2015,2016 and 2017\n\n# prepare data\nx2015 = df2015.Freedom\nx2016 = df2016.Freedom\nx2017 = df2017.Freedom\n\ntrace1 = go.Histogram(\n    x=x2015,\n    opacity=0.75,\n    name = \"2015\",\n    marker=dict(color='rgba(100, 200, 80, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2016,\n    opacity=0.75,\n    name = \"2016\",\n    marker=dict(color='rgba(50, 14, 196, 0.6)'))\n\ntrace3 = go.Histogram(\n    x=x2017,\n    opacity=0.75,\n    name = \"2017\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(barmode='overlay', #overlay=i\u00e7 ice gecir.\n                   title=' Freedom of the countries in 2015, 2016 and 2017',\n                   xaxis=dict(title='freedom'),\n                   yaxis=dict( title='count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5cc2bc9c":"#word cloud of the regions in 2015\nregions=df2015.Region\n\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(regions))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","4aa59bc2":"#word cloud of the regions in 2015 and 2016\ndf1=df2015.Region\ndf2=df2016.Region\ndf=pd.concat([df1,df2])\n\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='yellow',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(df))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","bed9f103":"trace0 = go.Box(\n    y=df2015[\"Happiness Score\"],\n    name = 'happiness score of countries in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=df2015.Family,\n    name = 'family in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","43016508":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndata2015=df2015.loc[:,[\"Happiness Score\",\"Family\",\"Economy (GDP per Capita)\"]]\n\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","af55b7ff":"# first line plot\ntrace1 = go.Scatter(\n    x=df2015[\"Happiness Rank\"],\n    y=df2015[\"Economy (GDP per Capita)\"],\n    name = \"economy\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=df2015[\"Happiness Rank\"],\n    y=df2015[\"Trust (Government Corruption)\"],\n    xaxis='x2',\n    yaxis='y2',\n    name = \"trust\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Trust (Government Corruption) and Economy (GDP per Capita) vs Happiness Rank of Countries in 2015'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","2ed3df89":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=df2015[\"Happiness Rank\"],\n    y=df2015.Family,\n    z=df2015.Freedom,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(16, 112, 2)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ea204c44":"trace1 = go.Scatter(\n    x=df2015[\"Happiness Rank\"],\n    y=df2015.Freedom,\n    name = \"freedom\"\n)\ntrace2 = go.Scatter(\n    x=df2015[\"Happiness Rank\"],\n    y=df2015[\"Trust (Government Corruption)\"],\n    xaxis='x2',\n    yaxis='y2',\n    name = \"trust\"\n)\ntrace3 = go.Scatter(\n    x=df2015[\"Happiness Rank\"],\n    y=df2015.Family,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"family\"\n)\ntrace4 = go.Scatter(\n    x=df2015[\"Happiness Rank\"],\n    y=df2015[\"Health (Life Expectancy)\"],\n    xaxis='x4',\n    yaxis='y4',\n    name = \"health\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Freedom, trust, family and health vs Happiness Rank of Countries in 2015'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","40145787":"<a id=\"1\"><\/a> <br>\n# Pie Charts","496ae81c":"<a ><\/a> <br>\n# World Happiness Report (Data Visualization Homework 1)\n\n[Pie Charts](#1)\n<br>\n[Bubble Chart](#2)\n<br>\n[Word Cloud](#3)\n<br>\n[Box Plot](#4)\n<br>\n[Scatter Matrix Plot](#5)\n<br>\n[Inset Plots](#6)\n<br>\n[3D Scatter Plot with Colorscaling](#7)\n<br>\n[Multiple Subplots](#8)","9993a878":"<a id=\"4\"><\/a> <br>\n# Box Plot","9b45c82e":"<a id=\"2\"><\/a> <br>\n# Bubble Chart ","d7157412":"<a id=\"5\"><\/a> <br>\n# Scatter Matrix Plot","1bb0577b":"<a id=\"8\"><\/a> <br>\n# Multiple Subplots","556e543a":"<a id=\"6\"><\/a> <br>\n# Inset Plots\n\nInset Matrix = 2 plots are in one frame","e06e5742":"<a id=\"7\"><\/a> <br>\n# 3D Scatter Plot with Colorscaling","e4083a5c":"<a id=\"3\"><\/a> <br>\n# Word Cloud"}}