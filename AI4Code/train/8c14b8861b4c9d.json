{"cell_type":{"5c717d98":"code","065a4b02":"code","2226e8cb":"code","67d05e7f":"code","1ba385fa":"markdown","7a5dbb92":"markdown","c14c114b":"markdown","ece02f56":"markdown"},"source":{"5c717d98":"import pandas as pd\nimport numpy as np\n\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout\nfrom keras.optimizers import Adam, SGD","065a4b02":"class survivor_finder():\n    def __init__(self):\n        self.model = Sequential()\n        self.model.add(Dense(32,activation='relu',input_shape=(5,)))\n        self.model.add(Dropout(0.2))\n        self.model.add(Dense(64,activation='relu'))\n        self.model.add(Dropout(0.2))\n        self.model.add(Dense(32,activation='relu'))\n        self.model.add(Dropout(0.2))\n        self.model.add(Dense(1,activation='sigmoid'))\n        \n    def pretreatment(self,data):\n        # \uc774\uc6a9\ud558\uc9c0 \uc54a\ub294 column \uc81c\uac70\n        pop_col = ['PassengerId','Name','Ticket','Cabin','Embarked','Fare']\n        for col in pop_col:\n            data.pop(str(col))\n        \n        # Training Data \uc640 Test Data\ub97c \uad6c\ubd84\ud558\uc5ec \uc804\ucc98\ub9ac \uc9c4\ud589\n        if 'Survived' in data.keys():\n            survived = data.pop('Survived')\n            survived = survived.astype(np.float32)\n        else:\n            survived = None\n        \n        # \uc131\ubcc4\uc744 0\uacfc 1\ub85c Mapping\n        data['Sex'] = data['Sex'].map({'male':0,'female':1})\n        # Age column\uc758 NaN \uce78\uc744 Median\uc73c\ub85c \ucc44\uc6c0\n        data['Age'].fillna(data['Age'].median(),inplace=True)\n\n        # input = data \/ ouput = survived\n        return data, survived\n    \n    def training(self,x,y):\n        Loss = 'binary_crossentropy'\n        self.model.compile(loss=Loss,optimizer=Adam(),metrics=['accuracy'])\n        self.history = self.model.fit(x,y,batch_size=64,epochs=1000,verbose=1)\n    \n    def predict(self,data):\n        prediction = np.array(self.model.predict(data,batch_size=16,verbose=0))\n        \n        # \uc6b0\ubcc0\uc758 \uae30\uc900\uac12\uc744 \uc870\uc815\ud558\uc5ec \uc608\uce21\ud560 \uc0dd\uc874\uc790 \uc218\ub97c \uc870\uc815\n        prediction = prediction > 0.6\n        \n        # Prediction\uc5d0 True\/False value\ub97c 1\/0\uc73c\ub85c \ubcc0\ud658\n        prediction = prediction.astype(np.int)\n\n        return prediction.T[0]","2226e8cb":"if __name__ == \"__main__\":\n    #### file \uacbd\ub85c \uc124\uc815 ####\n    import os\n    dir_name = \"..\/input\"\n    [train_file, __, test_file] = os.listdir(dir_name)\n    train_file = os.path.join(dir_name,train_file)\n    test_file = os.path.join(dir_name,test_file)\n    \n    #### Classifier Instance \uc0dd\uc131 ####\n    survivor_finder = survivor_finder()\n\n    #### Training ####\n    train_data = pd.read_csv(train_file)\n    train_x, train_y = survivor_finder.pretreatment(train_data)\n    survivor_finder.training(train_x,train_y)\n\n    #### Test ####\n    test_data = pd.read_csv(test_file)\n    id = test_data[\"PassengerId\"]\n    test_x, __ = survivor_finder.pretreatment(test_data)\n    prediction = survivor_finder.predict(test_x)","67d05e7f":"from keras.utils import normalize\n\ndata['Age'] = pd.Series(normalize(data['Age'].values)[0])","1ba385fa":"**----------------------------------------------------------------------------------**\n\n**[ \uc2e4\ud589 Code ]**","7a5dbb92":"**[ \uae30\ud0c0 \uc0ac\ud56d ]**\n* Prediction function\uc758 \uc0dd\uc874 \uc5ed\uce58(\uc704 \ucf54\ub4dc\uc5d0\uc11c 0.6)\uc744 \uc870\uc815\ud558\uc5ec Test 0.818\uae4c\uc9c0 \ub2ec\uc131 \uac00\ub2a5\ud588\uc2b5\ub2c8\ub2e4.\n* Column Normalize\ub97c \uc9c4\ud589\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0\uc5d0\ub294 Keras util\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \ud639\uc2dc \ub354 \uc88b\uc740 \ubc29\ubc95\uc774 \uc788\ub2e4\uba74 \uc54c\ub824\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.","c14c114b":"**<< Keras\ub97c \uc774\uc6a9\ud55c Classifier >>**\n\n*Cf ) Keras\ub97c \uc774\uc6a9\ud574 \uac04\ub2e8\ud788 \uad6c\ud604\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. Feature Engineering \ub300\ud55c \uc815\ubcf4\ub97c \uc5bb\uace0\uc790 \ud558\ub294 \ubd84\uaed8\ub294 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.*\n\n**[ Code \ud750\ub984 ]**\n\n1. Model Instance \uc0dd\uc131\n    * **Model \uc0dd\uc131\uacfc \ub3d9\uc2dc\uc5d0 NN \uad6c\uc131**\n2. \uc804\ucc98\ub9ac > Training\n    * **Model\uc5d0 \uc815\uc758\ud560 \ud568\uc218 \u3131 : pretreatment**\n    * **Model\uc5d0 \uc815\uc758\ud560 \ud568\uc218 \u3134 : training**\n3. Test\n    * **Model\uc5d0 \uc815\uc758\ud560 \ud568\uc218 \u3137 : predict**\n\n**----------------------------------------------------------------------------------**\n\n\n**[ Model Code ]**\n\nModel\uc744 \uc815\uc758\ud558\ub294 Class\ub97c \ub9cc\ub4e4\uace0, pretreatment \/ training \/ predict \ud568\uc218\ub97c \ub0b4\ubd80\uc5d0 \uc815\uc758\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","ece02f56":"**Pretreatment Function**\n* \uccab\ubc88\uc9f8 layer\uc758 input\uc740 \uc804\ucc98\ub9ac \ud6c4 input\uc73c\ub85c \ud65c\uc6a9\ud560 \uc694\uc18c\uc758 \uc218\uc5d0 \ub530\ub77c \uc870\uc815\ud569\ub2c8\ub2e4.\n* Pandas\uc758 Series\ub294 numpy array \uc640 \ube44\uc2b7\ud569\ub2c8\ub2e4.\n\n=== Pandas Document \uc911 ===\n\n*Series acts very similarly to a ndarray, and is a valid argument to most NumPy functions. However, operations such as slicing will also slice the index.*\n\n**Training Function**\n* keras model\uc5d0 fit \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 Epoch\uc5d0 \ub530\ub978 Accuracy \/ Loss \ub97c \uc790\ub3d9\uc73c\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc608\ub97c \ub4e4\uc5b4 \uc704\uc758 history\ub97c \uc774\uc6a9\ud558\uc5ec plotting \ud6c4 \ubd84\uc11d \uac00\ub2a5\ud569\ub2c8\ub2e4."}}