{"cell_type":{"a4e4b5be":"code","775216ed":"code","c917858b":"code","d3987d9c":"code","c495038b":"code","d2c2eb64":"code","f9a0fa8f":"code","055133c1":"code","687fbfba":"code","a6324fde":"code","ef589954":"code","25b79819":"code","9cb2a367":"code","2edfbb9f":"code","2637f416":"code","490bc9c6":"code","eaecc4c6":"markdown","fa48c32f":"markdown","2cdce0eb":"markdown","310156db":"markdown","7f88619b":"markdown","14a570b9":"markdown","1432cfa9":"markdown","7794bbe0":"markdown","1d8e5e1a":"markdown","af7d5580":"markdown","f3c9e934":"markdown"},"source":{"a4e4b5be":"from google.cloud import bigquery as bq\n\n## Client\nclient = bq.Client()\n\n# Create a reference to the dataset\ndata_ref = client.dataset('openaq', project = 'bigquery-public-data')\n# API request - \ndataset = client.get_dataset(data_ref)","775216ed":"# List all the tables in the dataset\ntables = list(client.list_tables(dataset))\n\n# Print the tables\n[table.table_id for table in tables]","c917858b":"# Construct a reference to the \"global_air_quality\" table\ntable_ref = data_ref.table('global_air_quality')\n# API request - fetch the table\nglobal_air_quality = client.get_table(table_ref)\n## To dataframe\ndf_air_quality = client.list_rows(global_air_quality, max_results = 5).to_dataframe()","d3987d9c":"# Preview\ndf_air_quality","c495038b":"## Example query\nquery = \"\"\"SELECT city\n            from `bigquery-public-data.openaq.global_air_quality`\n            WHERE country = 'US' \"\"\"","d2c2eb64":"## Create client\nclient_q = bq.Client()\n## Query\nQ1 = client_q.query(query)\n## API request - run the query and return a pandas DF\nQ1.to_dataframe()","f9a0fa8f":"query2 = \"\"\"SELECT city, pollutant, value, unit, latitude, longitude\n            FROM `bigquery-public-data.openaq.global_air_quality`\n            WHERE country = 'CO' \"\"\"","055133c1":"## Q2\nQ2 = client.query(query2)\ndf_map = Q2.to_dataframe()","687fbfba":"df_map","a6324fde":"query3 = \"\"\"SELECT COUNT(city)\n            FROM `bigquery-public-data.openaq.global_air_quality`\n            WHERE country = 'CO'\n            \"\"\"\nQ3 = client.query(query3).to_dataframe()\nprint(Q3)\nl = Q3.f0_[0]","ef589954":"import folium","25b79819":"## Central point\nstart_point = [df_map.latitude[33], df_map.longitude[33]]\n## Map\npollutant_map = folium.Map(location=start_point, width = '90%', height = '70%', zoom_strt=11, tiles = 'Stamen Toner', position='absolute')\n## Mount atributes on the map \nfor i in range(l):\n    ## Location\n    loc = [df_map.latitude[i], df_map.longitude[i]]\n    ## Get info popup label    \n    label = f\"\"\"pollutant: {df_map.pollutant[i]} \n                value: {df_map.value[i]} {df_map.unit[i]} \n                {loc}\"\"\"\n    ## Use the location popup to make the maker and add to the map\n    folium.CircleMarker(location=loc, popup=label, radius=8, fill=False, color='red').add_to(pollutant_map)\n\n##pollutant_map\npollutant_map","9cb2a367":"query4 = \"\"\"SELECT city, COUNT(unit), AVG(value), MAX(value), MIN(value)\n            FROM `bigquery-public-data.openaq.global_air_quality`\n            WHERE country = 'CO'\n            GROUP BY city\n\"\"\"\n\nQ4 = client.query(query4)\nQ4.to_dataframe()","2edfbb9f":"query5 = \"\"\"SELECT city, COUNT(value), AVG(value), MAX(value), MIN(value)\n            FROM `bigquery-public-data.openaq.global_air_quality`\n            WHERE country = 'CO'\n            GROUP BY city\n            HAVING MIN(value) >= 0\n            \"\"\"\n\nQ5 = client.query(query5)\nQ5.to_dataframe()","2637f416":"query5 = \"\"\"SELECT city, COUNT(value), AVG(value), MAX(value), MIN(value)\n            FROM `bigquery-public-data.openaq.global_air_quality`\n            WHERE country = 'CO'\n            AND value >= 0\n            GROUP BY city            \n\"\"\"\nQ5 = client.query(query5)\nQ5.to_dataframe()","490bc9c6":"query5 = \"\"\"SELECT city, COUNT(value) AS n_entries, AVG(value) AS average, MAX(value) AS max, MIN(value) AS min\n            FROM `bigquery-public-data.openaq.global_air_quality`\n            WHERE country = 'CO'\n            AND value >= 0\n            GROUP BY city            \n\"\"\"\nQ5 = client.query(query5)\nQ5.to_dataframe()","eaecc4c6":"## Queries:\n\n### Q1 - Cities from US","fa48c32f":"### An other improvement\nReplace the `f0_, f1_, ...fn_` name of the columns using the `AS <NameColumn>` after each aggregation.","2cdce0eb":"### Q2 - Pollutant in Colombia \"CO\"","310156db":"### Q4 - Count and Group By","7f88619b":"# :)","14a570b9":"## Get a table","1432cfa9":"## Plot the map","7794bbe0":"## List the tables","1d8e5e1a":"### Q5 - Group By ... Having\nWe'll improve the Q4 query","af7d5580":"### Q3 - Length:\nGet the length of the Q2 result, using SQL","f3c9e934":"In this case the expression `HAVING` not return a good result (Lost 25 entries from Medell\u00edn city). So i'll use the logic expression `AND`."}}