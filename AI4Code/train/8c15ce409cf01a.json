{"cell_type":{"b7fa7afd":"code","ce6eb7f7":"code","75f59bb4":"code","30567ce5":"code","5f4bd2d9":"code","a089b891":"code","e9d941a3":"code","50eca795":"code","34c2c591":"code","0c9ff28b":"code","be0ab022":"code","a70eb338":"code","9998b901":"code","6dd3a1c2":"code","4c958865":"code","bd6cb867":"code","c62b19c0":"code","5a45814b":"code","e5f6d239":"code","c6c64d05":"code","28ec7aa2":"code","3c11024e":"code","2731b008":"code","4921f767":"markdown","c46c4a67":"markdown","10cc3c12":"markdown","78ccf5b9":"markdown","b215e9a7":"markdown","d880ffee":"markdown","718d8793":"markdown","28cc3b8d":"markdown","065845fb":"markdown","4abbe190":"markdown","159ab52c":"markdown","25e86f21":"markdown","a1fe59dd":"markdown","2406910a":"markdown","834cb5c5":"markdown","647e637b":"markdown","3e80df82":"markdown","146f12be":"markdown","6a162ea0":"markdown","460427b9":"markdown","acca42d1":"markdown","81c73fce":"markdown","a87a0174":"markdown","aae24aaa":"markdown","e0013207":"markdown","22693084":"markdown","3d66cdf7":"markdown","811f3e5b":"markdown","6d12fef7":"markdown","66174059":"markdown"},"source":{"b7fa7afd":"import numpy as np\nimport pandas as pd\nimport warnings\n\n# \u8b66\u544a\u8868\u793a\u306e\u5236\u5fa1\nwarnings.simplefilter('ignore', FutureWarning)\n# dataframe\u306e\u5168\u3066\u306e\u5217\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\npd.set_option('display.max_rows', None)\n# \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\ncorona_df = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\n# \u65e5\u4ed8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u7d71\u4e00\ncorona_df[\"Date\"] = list(map(lambda x: pd.datetime.strptime(x, '%m\/%d\/%y'),corona_df[\"Date\"]))\n# \u30ab\u30e9\u30e0\u540d\u306e\u5909\u66f4\ncorona_df[\"Country\"] = corona_df[\"Country\/Region\"]\n# \u6700\u65b0\u306e\u65e5\u4ed8\u306e\u53d6\u5f97\nlatest_date = corona_df[\"Date\"].max().strftime(\"%Y\/%m\/%d\")\n\n# \u56fd\u3068\u65e5\u4ed8\u3054\u3068\u306b\u30b0\u30eb\u30fc\u30d7\u5316\ngrouped_corona_df = corona_df.groupby([\"Date\", \"Country\"], as_index=False)\n# \u5730\u57df\u3068\u5dde\u306e\u6570\u3092\u56fd\u3068\u65e5\u4ed8\u6bce\u306b\u6570\u3048\u307e\u3059\nprov_counted_df = grouped_corona_df[\"Province\/State\"].count()\n# \u5730\u57df\u3068\u5dde\u306e\u6570\u304c2\u3064\u4ee5\u4e0a\u306e\u56fd\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\ncountries_with_prov = prov_counted_df[prov_counted_df[\"Province\/State\"]>1][\"Country\"].unique()\n# \u5730\u57df\u3068\u5dde\u306e\u6570\u304c2\u3064\u4ee5\u4e0a\u306e\u56fd\u3092\u8868\u793a\u3057\u307e\u3059\ndisplay(countries_with_prov)","ce6eb7f7":"# \u6700\u65b0\u306e\u65e5\u4ed8\u3067\u3001\u5730\u57df\u3068\u5dde\u306e\u6570\u304c2\u3064\u4ee5\u4e0a\u306e\u56fd\u306e\u60c5\u5831\u306e\u307f\u3092\u307f\u3066\u307f\u307e\u3059\ncorona_prov_df = corona_df[(corona_df[\"Date\"] == latest_date) & (corona_df[\"Country\"].isin(countries_with_prov))]\n# \u5185\u5bb9\u3092\u8868\u793a\u3057\u307e\u3059\ndisplay(corona_prov_df.head(25))","75f59bb4":"# \u5168\u3066\u306e\u56fd\u3054\u3068\u306b\u7d2f\u8a08\u7f79\u60a3\u8005\u6570\u304c\u6700\u5927\u306e\u884c\u3092\u53d6\u308a\u51fa\u3057\u3001\u9996\u90fd\u306e\u7def\u5ea6\u3068\u7d4c\u5ea6\u3092\u898b\u3064\u3051\u307e\u3059\ncapital_df = corona_df.loc[corona_df[corona_df[\"Date\"] == latest_date].groupby([\"Country\"], as_index=False)[\"Confirmed\"].idxmax(),:][[\"Country\", \"Lat\", \"Long\"]]\n\n# \u5185\u5bb9\u3092\u8868\u793a\u3057\u307e\u3059\ndisplay(capital_df.head(25))","30567ce5":"# \u30b0\u30eb\u30fc\u30d7\u5316\u3057\u305f\u3082\u306e\u306e\u3046\u3061\u300c\u7d2f\u8a08\u7f79\u60a3\u8005\u6570\u300d\u300c\u6b7b\u8005\u6570\u300d\u300c\u56de\u5fa9\u8005\u6570\u300d\u306f\u5408\u8a08\u3092\u53d6\u308a\u65b0\u305f\u306acorona_df\u3068\u3057\u3066\u7f6e\u304d\u63db\u3048\ncorona_df = grouped_corona_df[[\"Confirmed\", \"Deaths\", \"Recovered\"]].sum()\n\n# \u300c\u7def\u5ea6\u300d\u300c\u7d4c\u5ea6\u300d\u306b\u3064\u3044\u3066\u306f\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fcapital_df\u304b\u3089\u56fd\u3054\u3068\u306b\u8ffd\u52a0\ncorona_df = pd.merge(corona_df, capital_df, on=\"Country\", how=\"left\")\n\n# \u30c7\u30fc\u30bf\u306e\u3042\u308b\u56fd\u540d\u3092\u30ea\u30b9\u30c8\u3067\u53d6\u5f97\ncountries = corona_df[\"Country\"].unique()\n\n# \u30c7\u30fc\u30bf\u306b\u3042\u308b\u56fd\u306e\u6570\nnum_countries = len(countries)\n\n# \u65e5\u4ed8\u3001\u7d2f\u8a08\u7f79\u60a3\u8005\u6570\u3001\u56fd\u3068\u5730\u57df\u3067\u30bd\u30fc\u30c8\u3057\u307e\u3059\ncorona_df = corona_df.sort_values(by=[\"Date\", \"Confirmed\", \"Country\"])\n\n# \u5185\u5bb9\u306e\u8868\u793a\ndisplay(corona_df[[\"Country\", \"Confirmed\", \"Deaths\", \"Recovered\", \"Lat\", \"Long\"]].tail(25)[::-1].style.background_gradient(cmap='Reds'))","5f4bd2d9":"# \u73fe\u5728\u306e\u7f79\u60a3\u8005\u6570\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\ncorona_df[\"Infected\"] = corona_df[\"Confirmed\"] - corona_df[\"Recovered\"] - corona_df[\"Deaths\"]\n\n# \u30c7\u30fc\u30bf\u306e\u60c5\u5831\u3092\u8868\u793a\uff08\u56fd\u306e\u6570\u3068\u30c7\u30fc\u30bf\u306e\u671f\u9593\uff09\ndisplay(\"Number of COVID19 confirmed\/deaths\/recovered in total of \" + str(num_countries) + \" countries through \" +\n        corona_df[\"Date\"].min().strftime(\"%Y\/%m\/%d\") + \" to \" + latest_date)\n\n# \u30c7\u30fc\u30bf\u306e\u60c5\u5831\u3092\u8868\u793a\uff08\u7f79\u60a3\u8005\u6570\u3001\u65b0\u898f\u7f79\u60a3\u8005\u6570\u3001\u6b7b\u4ea1\u8005\u6570\u3001\u81f4\u6b7b\u7387\uff09\ndisplay(\"Cumulated infected number = \" + \"{:,}\".format(corona_df[\"Confirmed\"].sum()) +  \", Current infected number = \" + \"{:,}\".format(corona_df[\"Infected\"].sum()) +\n        \", total deaths = \" + \"{:,}\".format(corona_df[\"Deaths\"].sum()))\n\n# \u524d\u65e5\u6bd4\u3068\u5dee\u5206\u3092\u8ffd\u52a0\ncorona_df = corona_df.sort_values(by=[\"Country\", \"Date\"])\ncorona_df[\"New_Confirmed\"] = corona_df.groupby([\"Country\"])[\"Confirmed\"].diff().fillna(0)\ncorona_df[\"New_Deaths\"] = corona_df.groupby([\"Country\"])[\"Deaths\"].diff().fillna(0)\ncorona_df[\"Fatality_Rate\"] = corona_df[\"Deaths\"]*100\/corona_df[\"Confirmed\"]\npd.set_option(\"display.max_rows\", len(countries))\n\n# \u65e5\u4ed8\u3001\u7f79\u60a3\u8005\u6570\u3001\u56fd\u3068\u5730\u57df\u3067\u30bd\u30fc\u30c8\u3057\u307e\u3059\ncorona_df = corona_df.sort_values(by=[\"Date\", \"Confirmed\", \"Country\"])\n\n# \u7f79\u60a3\u8005\u6570\u304c\u591a\u3044\u9806\u306b\u4e0a\u4f4d50\u30f5\u56fd\u306e\u6700\u65b0\u306e\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\ndisplay(corona_df[[\"Country\", \"Confirmed\", \"Infected\", \"New_Confirmed\", \"New_Deaths\", \"Fatality_Rate\"]].tail(50)[::-1].style.background_gradient(cmap='Reds'))\ncountries50 = corona_df.tail(50)[::-1][\"Country\"].values","a089b891":"import folium\nmap_object = folium.Map(location=[0, 10], min_zoom=2, max_zoom=10, zoom_start=2)\n\nfor_map = corona_df.tail(num_countries)\nfor_map = for_map.dropna(subset=[\"Deaths\"]).reset_index(drop=True)\n\nfor i in range(0, len(for_map)):\n    folium.Circle(location=[for_map.iloc[i][\"Lat\"], for_map.iloc[i][\"Long\"]], color='crimson', fill=True,\n        tooltip =   '<li><bold>Country : '+str(for_map.iloc[i][\"Country\"])+\n                    '<li><bold>Deaths : '+str(for_map.iloc[i][\"Deaths\"]),\n        radius=int(for_map.iloc[i][\"Deaths\"])*20).add_to(map_object)\nmap_object","e9d941a3":"# \u4e0d\u8981\u306a\u8981\u7d20\uff08\u7def\u5ea6\u30fb\u7d4c\u5ea6\uff09\u3092\u524a\u9664\ncorona_df = corona_df.drop(columns=[\"Lat\", \"Long\"])\n\ncountry_df = corona_df[corona_df[\"Country\"]==\"Japan\"].copy()\ndisplay(country_df.tail(30))","50eca795":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport math\n%matplotlib inline\n\nfig_rows = math.ceil((len(corona_df.columns) - 2)\/2)\nfig = plt.figure(figsize=(40,60),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\n\nfor i, col in enumerate(corona_df.columns):\n  temp_df = country_df.copy()\n  if col == \"Date\" or col ==\"Country\":\n    continue\n  plt.subplot(fig_rows,2,i-1)\n  plt.title(col)\n  plt.plot(temp_df[\"Date\"], temp_df[col], label=\"Japan\")\n  plt.yscale(\"linear\")\n  if col == \"Fatality_Rate\":\n    plt.ylim([0, 5])\n  plt.grid(True)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5,-0.05),ncol=6)\nplt.show()","34c2c591":"fig_rows = math.ceil((len(corona_df.columns) - 2)\/2)\nfig = plt.figure(figsize=(40,60),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\n\nfor i, col in enumerate(corona_df.columns):\n  temp_df = country_df.copy()\n  if col == \"Date\" or col ==\"Country\":\n    continue\n  plt.subplot(fig_rows,2,i-1)\n  plt.title(col)\n  plt.plot(temp_df[\"Date\"], temp_df[col], label=\"Japan\")\n  plt.yscale(\"log\")\n  if col == \"Fatality_Rate\":\n    plt.yscale(\"linear\")\n    plt.ylim([0, 5])\n  plt.grid(True)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5,-0.05),ncol=6)\nplt.show()","0c9ff28b":"fig_rows = math.ceil((len(corona_df.columns) - 2)\/2)\nfig = plt.figure(figsize=(40,60),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\nfor i, col in enumerate(corona_df.columns):\n  temp_df = country_df.copy()\n  if col == \"Date\" or col ==\"Country\":\n    continue\n  plt.subplot(fig_rows,2,i-1)\n  plt.title(col)\n  plt.plot(temp_df[\"Date\"], temp_df[col], label=\"Raw\")\n  plt.plot(temp_df[\"Date\"], temp_df[col].rolling(3).mean().shift(-1), label=\"MA3\")\n  plt.plot(temp_df[\"Date\"], temp_df[col].rolling(5).mean().shift(-3), label=\"MA5\")\n  plt.yscale(\"log\")\n  if col == \"Fatality_Rate\":\n    plt.yscale(\"linear\")\n    plt.ylim([0, 5])\n  plt.grid(True)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5,-0.05),ncol=6)\nplt.show()","be0ab022":"fig_rows = math.ceil((len(corona_df.columns) - 2)\/2)\nfig = plt.figure(figsize=(40,60),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\nfor i, col in enumerate(corona_df.columns):\n  if col == \"Date\" or col ==\"Country\":\n    continue\n  plt.subplot(fig_rows,2,i-1)\n  plt.title(col + \"_MA5-3\")\n  for country in corona_df[\"Country\"].unique():\n    country_df = corona_df[corona_df[\"Country\"]==country].copy()\n    plt.plot(country_df[\"Date\"], country_df[col].rolling(5).mean().shift(-3), label=country)\n    plt.yscale(\"log\")\n  if col == \"Fatality_Rate\":\n    plt.yscale(\"linear\")\n    plt.ylim([0, 20])\n  plt.grid(True)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5,-0.05),ncol=6)\nplt.show()","a70eb338":"day_one = corona_df[(corona_df[\"Confirmed\"]>1) & (corona_df[\"Country\"].isin(countries50))].groupby([\"Country\"])[\"Date\"].min()\ndisplay(day_one.sort_values().head(20))","9998b901":"day_one_shift = day_one - day_one[\"Japan\"]\ndisplay(day_one_shift.sort_values().head(20))","6dd3a1c2":"from datetime import timedelta\n\nfig_rows = math.ceil((len(corona_df.columns) - 2)\/2)\nfig = plt.figure(figsize=(40,60),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\n\nfor i, col in enumerate(corona_df.columns):\n  if col == \"Date\" or col ==\"Country\":\n    continue\n  plt.subplot(fig_rows,2,i-1)\n  plt.title(col + \"_MA5-3\")\n  for country in countries50:\n    country_df = corona_df[corona_df[\"Country\"]==country].copy()\n    if country in day_one_shift.index:\n      plt.plot(country_df[\"Date\"] - timedelta(days=day_one_shift[country].days), country_df[col].rolling(5).mean().shift(-3), label=country)    \n    plt.yscale(\"log\")\n  if col == \"Fatality_Rate\":\n    plt.yscale(\"linear\")\n    plt.ylim([0, 20])\n  plt.grid(True)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5,-0.05),ncol=6)\nplt.show()","4c958865":"day_one = corona_df[(corona_df[\"Deaths\"]>2) & (corona_df[\"Country\"].isin(countries50))].groupby([\"Country\"])[\"Date\"].min()\nday_one_shift = day_one - day_one[\"Japan\"]\nfig_rows = math.ceil((len(corona_df.columns) - 2)\/2)\nfig = plt.figure(figsize=(40,60),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\n\nfor i, col in enumerate(corona_df.columns):\n  if col == \"Date\" or col ==\"Country\":\n    continue\n  plt.subplot(fig_rows,2,i-1)\n  plt.title(col + \"_MA5-3\")\n  for country in countries50:\n    country_df = corona_df[corona_df[\"Country\"]==country].copy()\n    if country in day_one_shift.index:\n      plt.plot(country_df[\"Date\"] - timedelta(days=day_one_shift[country].days), country_df[col].rolling(5).mean().shift(-3), label=country)  \n    plt.yscale(\"log\")\n  if col == \"Fatality_Rate\":\n    plt.yscale(\"linear\")\n    plt.ylim([0, 20])\n  plt.grid(True)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5,-0.05),ncol=6)\nplt.show()","bd6cb867":"df_pop = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\nN = df_pop[df_pop[\"Country (or dependency)\"] == \"Japan\"][\"Population (2020)\"].values[0]\ndisplay(N)","c62b19c0":"from scipy.integrate import odeint\nfrom matplotlib.ticker import ScalarFormatter\n\ndef logistic_R_0(t, R_0_start, k, x0, R_0_end):\n    return (R_0_start-R_0_end) \/ (1 + np.exp(-k*(-t+x0))) + R_0_end\n\ndef func_SIR(initial, t, N, R_0_start, k, x0, R_0_end, gamma):\n    S, I, R = initial\n    beta = logistic_R_0(t, R_0_start, k, x0, R_0_end) * gamma\n    dSdt = -beta * S * I\/ N\n    dIdt = beta * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\nfull_days = 250\nD = 13.5\ngamma = 1.0 \/ D\nt = np.linspace(0, full_days-1, full_days)\ninitial = N-1.0, 1.0, 0.0\n\ndef Model(days, N, R_0_start, k, x0, R_0_end):\n    t = np.linspace(0, days-1, days)\n    ret = odeint(func_SIR, initial, t, args=(N, R_0_start, k, x0, R_0_end, gamma))\n    S, I, R = ret.T\n    R_0_over_time = [logistic_R_0(i, R_0_start, k, x0, R_0_end) for i in range(len(t))]\n    return t, S, I, R, R_0_over_time\n\noutbreak_shift = 30\nfatal_rate = corona_df[corona_df[\"Country\"] == \"Japan\"][\"Fatality_Rate\"].values[[-1]]\/100\nprint(fatal_rate)\n\n# plt.gcf().subplots_adjust(bottom=0.15)\n\ndef plotter(t, S, I, R, R_0, x_ticks=None):\n    f, ax = plt.subplots(1,1,figsize=(20,4))\n    if x_ticks is None:\n        ax.plot(t, I, 'r', alpha=0.7, linewidth=2, label='Infected')\n        ax.plot(t, R*fatal_rate, 'b', alpha=0.7, linewidth=2, label='Fatalities')\n    else:\n        ax.plot(x_ticks, I, 'r', alpha=0.7, linewidth=2, label='Infected')\n        ax.plot(x_ticks, R*fatal_rate, 'g', alpha=0.7, linewidth=2, label='Fatalities')\n\n        ax.xaxis.set_major_locator(mdates.MonthLocator())\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\n        f.autofmt_xdate()\n\n    ax.title.set_text('SIR-Model')\n\n    ax.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n\n    plt.show();\n    \n    f = plt.figure(figsize=(20,4))\n\n    ax1 = f.add_subplot(131)\n    if x_ticks is None:\n        ax1.plot(t, R_0, 'b--', alpha=0.7, linewidth=2, label='R_0')\n    else:\n        ax1.plot(x_ticks, R_0, 'b--', alpha=0.7, linewidth=2, label='R_0')\n        ax1.xaxis.set_major_locator(mdates.MonthLocator())\n        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\n        f.autofmt_xdate()\n\n \n    ax1.title.set_text('R_0 over time')\n    ax1.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax1.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n\n    plt.show();\n    \nfirst_date = np.datetime64(corona_df[\"Date\"].min()) - np.timedelta64(outbreak_shift,'D')\nx_ticks = pd.date_range(start=first_date, periods=full_days, freq=\"D\")\n    \nplotter(*Model(full_days, N, 5.0, 1.0, 60, 1.0), x_ticks=x_ticks)\n\ndisplay(day_one[\"Japan\"])\n# def end99(t, day1, I, R):\n\n# display(t[I<R.max()*0.01])\n# display(\"Final R = \" + \"{:,}\".format(int(R.max())))","5a45814b":"# \u30ab\u30fc\u30d6\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n!pip install lmfit","e5f6d239":"import lmfit\n\ndata = corona_df[corona_df[\"Country\"] == \"Japan\"][\"Infected\"].values\ndays = outbreak_shift + len(data)\nif outbreak_shift >= 0:\n    y_data = np.concatenate((np.zeros(outbreak_shift), data))\nelse:\n    y_data = y_data[-outbreak_shift:]\n\nx_data = np.linspace(0, days - 1, days, dtype=int)  # x_data is just [0, 1, ..., max_days] array\n\ndef fitter(x, R_0_start, k, x0, R_0_end):\n    ret = Model(days, N, R_0_start, k, x0, R_0_end)\n    return ret[3][x]\n\nmod = lmfit.Model(fitter)\n\nparams_init_min_max = {\"R_0_start\": (5.0, 2.0, 5.8), \"k\": (2.5, 0.01, 5.0), \"x0\": (90, 0, 120), \"R_0_end\": (0.9, 0.3, 3.5)}\n# form: {parameter: (initial guess, minimum value, max value)}\n\nfor kwarg, (init, mini, maxi) in params_init_min_max.items():\n    mod.set_param_hint(str(kwarg), value=init, min=mini, max=maxi, vary=True)\n\nparams = mod.make_params()\nfit_method = \"leastsq\"\n\nresult = mod.fit(y_data, params, method=\"least_squares\", x=x_data)\nresult.plot_fit(datafmt=\"-\")\n\nplotter(*Model(full_days, N, **result.best_values), x_ticks=x_ticks)\n\nresult.best_values","c6c64d05":"#7\u65e5\u5206\u306e\u50be\u304d\u304b\u3089\u7f79\u60a3\u8005\u6570\u306e\u5bfe\u6570\u6210\u9577\u901f\u5ea6\u3092\u7b97\u51fa\u3001\n\nconfirm_delay = 10\ndiff_days =7\nsma = 3\nadjust = math.floor(sma\/2)\n# sma\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u6709\u308a\nlogged_inf_delayed_sma = corona_df['Infected'].shift(-confirm_delay).rolling(sma).mean().shift(-adjust).apply(np.log10).copy()\n# sma\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u7121\u3057\n# logged_inf_delayed = corona_df['Infected'].shift(-confirm_delay).apply(np.log10).copy()\n                    \ncorona_df[\"K_t\"] = (logged_inf_delayed_sma-logged_inf_delayed_sma.shift(diff_days))\/diff_days\n\n#\u3000$L=5.5$\u3001$D=13.5$\u3068\u3057\u3066$R(t)$\u3092\u7b97\u51fa\nL = 5.5\nD = 13.5\ncorona_df[\"R_t\"] = corona_df[\"K_t\"].apply(lambda x: np.power(x, 2)*L*D + x*(L+D) + 1)\n\nfig = plt.figure(figsize=(40,30),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\n\ncountry_df = corona_df[corona_df[\"Country\"]==\"Japan\"].copy()\n\ncountry_df[\"R_t\"] = country_df[\"R_t\"].replace([np.inf, -np.inf], np.nan)\ncountry_df = country_df.dropna(subset=[\"R_t\"])\ndisplay(country_df[[\"Date\", \"R_t\"]].tail(70).style.background_gradient(cmap='Reds'))\n\nplt.subplot(2,2,1)\nplt.title(\"K(t)\")\nplt.plot(country_df[\"Date\"], country_df[\"K_t\"])\nplt.ylim([0,0.2])\nplt.grid(True)\nplt.subplot(2,2,2)\nplt.title(\"R(t)\")\nplt.plot(country_df[\"Date\"], country_df[\"R_t\"])\nplt.ylim([0,6])\nplt.grid(True)\nplt.show()","28ec7aa2":"country_df = corona_df[corona_df[\"Country\"]==\"Japan\"].copy()\n\nfig = plt.figure(figsize=(17,10),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\nplt.title(\"R(t)\")\nplt.ylim([0,6])\nplt.plot(country_df[\"Date\"], country_df[\"R_t\"].rolling(3).mean().shift(-1))\nplt.grid(True)\nplt.show()","3c11024e":"#7\u65e5\u5206\u306e\u50be\u304d\u304b\u3089\u7f79\u60a3\u8005\u6570\u306e\u5bfe\u6570\u6210\u9577\u901f\u5ea6\u3092\u7b97\u51fa\u3001\n\ndiff_days =7\nsma = 3\nadjust = math.floor(sma\/2)\n# sma\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u6709\u308a\nlogged_new_conf_sma3 = corona_df['Infected'].rolling(sma).mean().shift(-adjust).apply(np.log10).copy()\n                    \ncorona_df[\"K_t\"] = (logged_new_conf_sma3-logged_new_conf_sma3.shift(diff_days))\/diff_days\n\n#\u3000$L=5.5$\u3001$D=13.5$\u3068\u3057\u3066$R(t)$\u3092\u7b97\u51fa\nL = 5.5\nD = 13.5\ncorona_df[\"R_t\"] = corona_df[\"K_t\"].apply(lambda x: np.power(x, 2)*L*D + x*(L+D) + 1)\n\nfig = plt.figure(figsize=(17,10),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\n\ncountry_df = corona_df[corona_df[\"Country\"]==\"Japan\"].copy()\n\ncountry_df[\"R_t\"] = country_df[\"R_t\"].replace([np.inf, -np.inf], np.nan)\ncountry_df = country_df.dropna(subset=[\"R_t\"])\ndisplay(country_df[[\"Date\", \"R_t\"]].style.background_gradient(cmap='Reds'))\n\nplt.title(\"R(t)\")\nplt.plot(country_df[\"Date\"], country_df[\"R_t\"])\nplt.ylim([0,6])\nplt.grid(True)\nplt.show()","2731b008":"country_df = corona_df[corona_df[\"Country\"]==\"Japan\"].copy()\n\nfig = plt.figure(figsize=(17,10),facecolor='white')\nplt.rcParams[\"font.size\"] = 18\nplt.title(\"R(t)\")\nplt.ylim([0,6])\n# plt.plot(country_df[\"Date\"], country_df[\"R_t\"])\nplt.plot(country_df[\"Date\"], country_df[\"R_t\"].rolling(5).mean().shift(-3))\nplt.grid(True)\nplt.show()","4921f767":"$R(t)$ \u306e\u307f5\u65e5\u5e73\u5747\u3067\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0","c46c4a67":"\u5404\u56fd\u306e\u4eba\u53e3\u30c7\u30fc\u30bf\u304b\u3089\u65e5\u672c\u306e\u4eba\u53e3\u3092\u53d6\u5f97","10cc3c12":"\u5b9f\u52b9\u518d\u751f\u7523\u6570$R(t)$\u306f\u3069\u306e\u69d8\u306b\u7b97\u51fa\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002  \n\u539a\u52b4\u7701\u306e\u8cc7\u6599\u306b\u306f\u8aac\u660e\u304c\u306a\u3044\u306e\u3067\u63a8\u6e2c\u3057\u307e\u3059\u3002  \n\u56f3\uff11\u3092\u898b\u308b\u3068\u767a\u75c7\u65e5\u3068\u78ba\u5b9a\u65e5\u306e\u4e8c\u3064\u306e\u30b0\u30e9\u30d5\u304c\u3042\u308a\u307e\u3059\u3002\n\u30d4\u30fc\u30af\u306b\u7740\u76ee\u3059\u308b\u3068\u3001\u78ba\u5b9a\u65e5\u306e\u30d4\u30fc\u30af\u306f4\u670811\u65e5\u3001\u767a\u75c7\u65e5\u306e\u30d4\u30fc\u30af\u306f4\u67081\u65e5\u3068\u306a\u308a\u307e\u3059\u3002  \n\u4e00\u65b9\u3067\u56f33\u304b\u3089$R(t)$\u304c1\u4ee5\u4e0b\u3068\u306a\u308b\uff08=\u611f\u67d3\u7e2e\u5c0f\u306b\u8ee2\u3059\u308b\uff09\u76f4\u8fd1\u306e\u65e5\u3092\u898b\u3066\u307f\u308b\u30684\u67081\u65e5\u3067\u3059\u306e\u3067\u3001\u3053\u306e10\u65e5\u9593\u3092\u767a\u75c7\u304b\u3089PCR\u691c\u67fb\u7d50\u679c\u304c\u51fa\u308b\u307e\u3067\u306e\u6642\u9593\u9045\u5ef6\u3068\u3057\u3066\u8003\u3048\u3001\u767a\u75c7\u65e5\u30d9\u30fc\u30b9\u3067$R(t)$\u3092\u7b97\u51fa\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002  \n\n$R(t)$\u306e\u7b97\u51fa\u65b9\u6cd5\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u8ad6\u6587\u306b\u8a18\u8f09\u304c\u3042\u308a\u307e\u3059\u3002  \n[https:\/\/www.medrxiv.org\/content\/10.1101\/2020.01.27.20018952v1.full.pdf](https:\/\/www.medrxiv.org\/content\/10.1101\/2020.01.27.20018952v1.full.pdf)\n\n$R(t)=K(t)^2\u30fbL\u30fbD+ K(t)(L+D) + 1$\n\n$L$=\u5e73\u5747\u6f5c\u4f0f\u671f\u9593,\n$D$=\u5e73\u5747\u611f\u67d3\u671f\u9593,\n$K(t)$=\u5bfe\u6570\u6210\u9577\u901f\u5ea6,\n\nCOVID-19\u306e\u5e73\u5747\u6f5c\u4f0f\u671f\u9593\u306f5~6\u65e5\u3068\u3055\u308c\u3066\u3044\u308b\uff08WHO 5~6\u65e5\u3001\u4e2d\u56fd 6.2\u3001\u798f\u4e95 4.76\uff09\u306e\u3067\u30015.5\u65e5\u3068\u3057\u3066\u8a08\u7b97\u3002\n\u5e73\u5747\u611f\u67d3\u671f\u9593\u3092\u5165\u9662\u671f\u9593\u3068\u8003\u3048\u308b\u306811~16\u65e5\u3068\u306e\u5831\u544a\u304c\u3042\u308b\u306e\u3067\u300113.5\u65e5\u3068\u3057\u3066\u8a08\u7b97\n\u5bfe\u6570\u6210\u9577\u901f\u5ea6$K(t)$\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7b97\u51fa\u3057\u3001\u65e5\u672c\u306e\u611f\u67d3\u8005\u6570\u63a8\u79fb\u304b\u3089R(t)\u306e\u5f0f\u3092\u5272\u308a\u51fa\u3057\u307e\u3059\u3002\n","78ccf5b9":"# SIR\u30e2\u30c7\u30eb\n4\u67087\u65e5\u306b\u653f\u5e9c\u304c\u7dca\u6025\u4e8b\u614b\u5ba3\u8a00\u3092\u767a\u51fa\n\u305d\u306e\u4e2d\u3067\u4eba\u3068\u306e\u63a5\u89e6\u30928\u5272\u524a\u6e1b\u3059\u308b\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u3001\u539a\u52b4\u7701\u65b0\u578b\u30b3\u30ed\u30ca\u30a6\u30a4\u30eb\u30b9\u5bfe\u7b56\u672c\u90e8\u30af\u30e9\u30b9\u30bf\u30fc\u5bfe\u7b56\u73ed\u30e1\u30f3\u30d0\u30fc\u3067\u3001\u611f\u67d3\u75c7\u306b\u8a73\u3057\u3044\u5317\u6d77\u9053\u5927\u5b66\u306e\u897f\u6d66\u6559\u6388\u306e\u63d0\u6848\u3092\u63a1\u7528\u3057\u305f\u8a00\u308f\u308c\u3066\u3044\u308b\n\u897f\u6d66\u6559\u6388\u306e\u63d0\u6848\u6839\u62e0\u306f\u611f\u67d3\u75c7\u6d41\u884c\u306e\u6570\u7406\u30e2\u30c7\u30eb\u306e\u4e00\u3064\u3067\u3042\u308bSIR\u30e2\u30c7\u30eb\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\n\nSIR\u30e2\u30c7\u30eb\u306b\u304a\u3044\u3066\u3001\u5168\u4eba\u53e3\u306f3\u3064\u3078\u5206\u5272\u3055\u308c\u308b\n\n1. \u7f79\u60a3\u3057\u3046\u308b\u4eba\uff08Susceptible\uff09\n2. \u7f79\u60a3\u8005\uff08Infected\uff09\n3. \u7f79\u60a3\u3057\u306a\u3044\u4eba\uff08Removed\uff1a\u56de\u5fa9\u8005\u3068\u6b7b\u4ea1\u8005\uff09\n\n\u4ee5\u4e0b\u306bSIR\u30e2\u30c7\u30eb\u306e\u5fae\u5206\u65b9\u7a0b\u5f0f\u3068\u305d\u306e\u89e3\u8aac\u3092\u8a18\u8f09  \n\n\u2460\u7f79\u60a3\u3057\u3046\u308b\u4eba\u306e\u6570$S(t)$\u306f\u3001\u3042\u308b\u65e5$t$\u306b\u65b0\u898f\u7f79\u60a3\u8005\u6570\u3060\u3051\u6e1b\u5c11\u3059\u308b\uff08\u5358\u8abf\u6e1b\u5c11\uff09  \n*\u203bSIR\u30e2\u30c7\u30eb\u3067\u306f\u518d\u7f79\u60a3\u3057\u306a\u3044\u3082\u306e\u3068\u8003\u3048\u308b*   \n*\u203b$\\beta$\u306f\u300c\u4e00\u4eba\u306e\u7f79\u60a3\u8005\u304c1\u65e5\u306b\u63a5\u89e6\u3059\u308b\u5e73\u5747\u4eba\u6570\u300d\u00d7\u300c\u611f\u67d3\u7387\u300d\u3001$N$\u306f\u7dcf\u4eba\u53e3*  \n*\u203b\u7f79\u60a3\u8005\u3068\u306e\u63a5\u89e6\u8005\u306e\u5185\u3001\u7f79\u60a3\u3057\u3046\u308b\u4eba\u306e\u5272\u5408\u306f\u3001\u300c\u7f79\u60a3\u3057\u3046\u308b\u4eba\u306e\u6570\u300d\u00f7\u300c\u7dcf\u4eba\u53e3\u300d\u3068\u8003\u3048\u308b*\n$$\\frac {dS(t)}{dt} = -\\beta I(t)\\frac {S(t)}{N}$$  \n  \n\u2461\u7f79\u60a3\u3057\u306a\u3044\u4eba\u306e\u6570$R(t)$\u306f\u3001\u3042\u308b\u65e5$t$\u306b\u7f79\u60a3\u8005\u6570$I(t)$\u306e\u4e00\u5b9a\u5272\u5408$\\gamma$\u3060\u3051\u56de\u5fa9\u307e\u305f\u306f\u6b7b\u4ea1\u3057\u305d\u306e\u5206\u5897\u52a0\u3059\u308b\uff08\u5358\u8abf\u5897\u52a0\uff09    \n*\u203b$\\gamma$\u306f\u56de\u5fa9\u30fb\u6b7b\u4ea1\u7387*  \n$$\\frac {dR(t)}{dt}=\\gamma I(t)$$  \n  \n\u2462\u7f79\u60a3\u8005\u6570$I(t)$\u306f\u3001\u3042\u308b\u65e5$t$\u306b\u65b0\u898f\u7f79\u60a3\u8005\u6570\u3060\u3051\u5897\u52a0\u3057\u3001\u56de\u5fa9\u8005\u6570\u3060\u3051\u6e1b\u5c11\u3059\u308b\n$$\\frac {dI(t)}{dt} = \\beta I(t)\\frac {S(t)}{N}-\\gamma I(t)$$  \n\n\u57fa\u672c\u518d\u751f\u7523\u6570$R_0$\u306f\u3001\u4f55\u3082\u3057\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u7f79\u60a3\u8005\u4e00\u4eba\u304c\u56de\u5fa9\u3059\u308b\u307e\u3067\u306b\u4f55\u4eba\u306b\u611f\u67d3\u3055\u305b\u308b\u304b\u3092\u610f\u5473\u3059\u308b  \n\n**\u4f8b\u3048\u3070\u3001**  \n\u30fb\u4e00\u4eba\u306e\u7f79\u60a3\u8005\u304c1\u65e5\u306b\u63a5\u89e6\u3059\u308b\u5e73\u5747\u4eba\u6570\u309220\u4eba  \n\u30fb\u611f\u67d3\u7387\u30921.25%  \n\u30fb\u7f79\u60a3\u8005\u304c\u611f\u67d3\u529b\u3092\u6301\u3064\u5e73\u5747\u65e5\u6570$1\/\\gamma$\u309210\u65e5  \n\u3068\u7f6e\u304d\u3001  \n\u7f79\u60a3\u8005\u6570\u306f\u7dcf\u4eba\u53e3\u306b\u5bfe\u3057\u3066\u307e\u3060\u5341\u5206\u5c11\u306a\u3044\u306e\u3067\u3001\u63a5\u89e6\u8005\u306f\u5168\u3066\u7f79\u60a3\u3057\u3046\u308b\u4eba\u3068\u8003\u3048\u308c\u3070\n\n$$R_0 = \\beta \/ \\gamma = 20 * 0.0125 * 10 = 2.5$$\n\n\u73fe\u5b9f\u7684\u306b\u306f\u3001\u7f79\u60a3\u8005\u306e\u5e73\u5747\u63a5\u89e6\u4eba\u6570\u3084\u611f\u67d3\u7387\u3092\u77e5\u308b\u4e8b\u306f\u56f0\u96e3\u3067\u3042\u308b  \n\u305d\u3053\u3067\u3001\u5165\u9662\u65e5\u6570\u3092\u611f\u67d3\u529b\u3092\u6301\u3064\u5e73\u5747\u65e5\u6570\u3068\u3057\u3066\u4ee3\u7528\u3057\u305f\u308a\u3001\u7f79\u60a3\u8005\u6570\u306b\u5bfe\u3059\u308b\u65b0\u898f\u7f79\u60a3\u8005\u6570\u306e\u5272\u5408\u3092$R_0$\u3068\u3057\u3066\u4ee3\u7528\u3057\u3001$\\beta$\u6570\u5024\u3092\u63a8\u5b9a\u3059\u308b\u3053\u3068\u304c\u591a\u3044  \n\n\u307e\u305f\u3001\u611f\u67d3\u8005\u306e\u9694\u96e2\u63aa\u7f6e\u3001\u793e\u4f1a\u7684\u8ddd\u96e2\u306e\u78ba\u4fdd\u3001\u30de\u30b9\u30af\u306e\u7740\u7528\u3001\u30ef\u30af\u30c1\u30f3\u306e\u63a5\u7a2e\u7b49\u306b\u3088\u308a\u3001\u3053\u306e$R_0$\u306f\u6642\u9593\u3068\u5171\u306b\u5909\u5316\u3059\u308b  \n\u305d\u306e\u6642\u70b9\u3067\u306e\u518d\u751f\u7523\u6570\u3092\u5b9f\u52b9\u518d\u751f\u7523\u6570$R_0(t)$\u3068\u3059\u308c\u3070\u3001\u611f\u67d3\u62e1\u5927\u3092\u9632\u3050\u305f\u3081\u306b\u306f  \n\n$$R_0(t) < 1$$\n\n\u3092\u7dad\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n","b215e9a7":"\u56fd\u5225\u306b\u7d2f\u8a08\u7f79\u60a3\u8005\u6570\u304c1\u4eba\u3092\u8d85\u3048\u305f\u65e5\u3092Day1\u3068\u3057\u3001\u65e5\u672c\u306b\u5408\u308f\u305b\u3066\u65e5\u4ed8\u3092\u30b7\u30d5\u30c8\u3055\u305b\u307e\u3059","d880ffee":"# \u8003\u5bdf\u3000 \n   [\u8003\u5bdf1]  \n   SIR\u30e2\u30c7\u30eb\u306f1\u5ea6\u611f\u67d3\u3057\u305f\u4eba\u306f2\u5ea6\u611f\u67d3\u3057\u306a\u3044\u3068\u3044\u3046\u524d\u63d0\u3060\u304c\u3001\n   COVID19\u3067\u306f2\u5ea6\u611f\u67d3\u3059\u308b\u4e8b\u4f8b\u591a\u6570\u3042\u308b\u3001\u6297\u4f53\u304c\u4f5c\u3089\u308c\u306a\u3044\u78ba\u7387\u3082\u8003\u616e\u3059\u308b\u30e2\u30c7\u30eb\u304c\u5fc5\u8981  \n   [\u8003\u5bdf2]  \n   \u975e\u5e38\u4e8b\u614b\u5ba3\u8a00\u5f8c\u306e\u50be\u5411\u3001\u90fd\u5fc3\u306e\u4eba\u624b\u306f\u76ee\u6a19\u306e70%\u6e1b\u3092\u8d85\u3048\u3066\u3044\u308b  \n   \u5927\u962a \u6885\u7530\u5468\u8fba: 86.9\uff05\u3001\u6771\u4eac \u65b0\u5bbf\u5468\u8fba: 79.9\uff05\u3001\u798f\u5ca1 \u5929\u795e\u5468\u8fba: 77.7\uff05\u3001\u6a2a\u6d5c\u99c5\u5468\u8fba: 77\uff05  \n   \u5927\u5bae\u99c5\u5468\u8fba: 72.8\uff05\u3001\u5175\u5eab\u770c\u306e\u4e09\u30ce\u5bae\u99c5\u5468\u8fba: 71.7\uff05\u3001\u5343\u8449\u99c5\u5468\u8fba: 71.5\uff05  \n   *NTT\u30c9\u30b3\u30e2\u306e\u643a\u5e2f\u96fb\u8a71\u57fa\u5730\u5c40\u306e\u60c5\u5831\u304b\u3089\u63a8\u8a08\n   \n[\u6771\u4eac\u90fd\u306e\u30da\u30fc\u30b8\u3088\u308a](https:\/\/corona.go.jp\/toppage\/pdf\/area-transition\/20200503_agoop.pdf)\n\n   [\u8003\u5bdf3]  \n   \u611f\u67d3\u8005\u306e\u3046\u3061\u4e00\u5b9a\u5272\u5408\u304c\u91cd\u75c7\u5316\u3059\u308b\u3068\u8003\u3048\u3001\u91cd\u75c7\u60a3\u8005\u304c\u5fc5\u8981\u3068\u3059\u308bICU\u306e\u6570\u3068\u6b7b\u4ea1\u7387\u3082\u542b\u3081\u3066\u691c\u8a0e\u3059\u308b\u4f59\u5730\u3042\u308a  \n   \n   [\u8003\u5bdf4]  \n   \u611f\u67d3\u8005\u306e\u3046\u3061\u9694\u96e2\u3055\u308c\u3066\u3044\u308b\u4eba\u3001\u81ea\u5b85\u5f85\u6a5f\u3057\u3066\u3044\u308b\u4eba\u3001\u81ea\u7531\u306b\u52d5\u3044\u3066\u3044\u308b\u4eba\u3067\u5206\u985e\u3059\u308b\u3053\u3068\u3082\u691c\u8a0e\u306e\u4f59\u5730\u3042\u308a","718d8793":"5\u67081\u65e5\u767a\u8868\u306e\u653f\u5e9c\u898b\u89e3\uff08\u65b0\u578b\u30b3\u30ed\u30ca\u30a6\u30a4\u30eb\u30b9\u611f\u67d3\u75c7\u5bfe\u7b56\u306e\u72b6\u6cc1\u5206\u6790\u30fb\u63d0\u8a00\u3001\u539a\u751f\u52b4\u50cd\u7701\u30b5\u30a4\u30c8\uff09  \n[https:\/\/www.mhlw.go.jp\/content\/10900000\/000627254.pdf](https:\/\/www.mhlw.go.jp\/content\/10900000\/000627254.pdf)  \n\n![image.png](attachment:image.png)\n\n1\u65e5\u306b\u653f\u5e9c\u306e\u5c02\u9580\u5bb6\u4f1a\u8b70\u304c\u307e\u3068\u3081\u305f\u63d0\u8a00\u306f\u65b0\u578b\u30b3\u30ed\u30ca\u30a6\u30a4\u30eb\u30b9\u306e\u65b0\u305f\u306a\u611f\u67d3\u8005\u306f\u6e1b\u3063\u3066\u3044\u308b\u3068\u3057\u3064\u3064\u3082\u3001\u6e1b\u308a\u5177\u5408\u304c\u76ee\u6307\u3057\u305f\u307b\u3069\u3067\u306f\u306a\u304f\u3001\u533b\u7642\u4f53\u5236\u3082\u903c\u8feb\uff08\u3072\u3063\u3071\u304f\uff09\u3057\u3066\u3044\u308b\u3068\u6307\u6458\u3057\u305f\u3002\n\n\u611f\u67d3\u304c\u62e1\u5927\u3057\u3066\u3044\u308b\u304b\u3092\u307f\u308b\u91cd\u8981\u306a\u6307\u6a19\u306e\u4e00\u3064\u304c\u300c\u5b9f\u52b9\u518d\u751f\u7523\u6570\u300d\u3060\u3002\u611f\u67d3\u80051\u4eba\u304c\u4f55\u4eba\u306b\u611f\u67d3\u3055\u305b\u308b\u304b\u3092\u793a\u3059\u5024\u3067\u30011\u3088\u308a\u5927\u304d\u3051\u308c\u3070\u6d41\u884c\u306f\u62e1\u5927\u3057\u3001\u5c0f\u3055\u3044\u3068\u53ce\u675f\u3057\u3066\u3044\u304f\u3002\u5168\u56fd\u30672\u30fb0\uff083\u670825\u65e5\u6642\u70b9\uff09\u3001\u6771\u4eac\u30672\u30fb6\uff083\u670814\u65e5\u6642\u70b9\uff09\u3060\u3063\u305f\u304c\u30014\u670810\u65e5\u6642\u70b9\u3067\u306f\u5168\u56fd\u30670\u30fb7\u3001\u6771\u4eac\u30670\u30fb5\u307e\u3067\u4e0b\u304c\u3063\u305f\u3002\n\n\u3000\u539a\u751f\u52b4\u50cd\u7701\u30af\u30e9\u30b9\u30bf\u30fc\u5bfe\u7b56\u73ed\u306b\u53c2\u52a0\u3059\u308b\u897f\u6d66\u535a\u30fb\u5317\u6d77\u9053\u5927\u6559\u6388\uff08\u7406\u8ad6\u75ab\u5b66\uff09\u306f\u30011\u3092\u4e0b\u56de\u3063\u305f\u306e\u306f\u5168\u56fd\u3082\u6771\u4eac\u3082\u7dca\u6025\u4e8b\u614b\u5ba3\u8a00\u304c\u51fa\u308b\u524d\u306e4\u67081\u65e5\u3054\u308d\u3060\u3063\u305f\u3068\u8aac\u660e\u3002\u305d\u306e\u3046\u3048\u3067\u3001\u300c1\u3092\u5272\u308b\u3060\u3051\u3067\u306f\u611f\u67d3\u8005\u6570\u3092\u5341\u5206\u306b\u6e1b\u3089\u3059\u3053\u3068\u306b\u306f\u8db3\u3089\u306a\u3044\u3002\u5168\u56fd\u7684\u306b\u307f\u308b\u3068\u30018\u5272\u306e\u63a5\u89e6\u6a5f\u4f1a\u306e\u524a\u6e1b\u3067\u6c42\u3081\u3066\u3044\u305f\u6c34\u6e96\u306b\u306f\u9054\u3057\u3066\u3044\u306a\u3044\u300d\u3068\u6307\u6458\u3002\u76ee\u6a19\u3068\u3059\u308b0\u30fb5\u4ee5\u4e0b\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308b\u3068\u3057\u305f\u3002","28cc3b8d":"\u5bfe\u6570\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3057\u307e\u3059","065845fb":"\u56fd\u5225\u306b\u7d2f\u8a08\u7f79\u60a3\u8005\u6570\u304c1\u4eba\u3092\u8d85\u3048\u305f\u65e5\uff08Day1\uff09\u3092\u8868\u793a","4abbe190":"\u6b7b\u8005\u6570\u3092\u5730\u56f3\u4e0a\u306b\u8868\u793a\u3057\u3066\u307f\u307e\u3059\n\u4e0a\u4f4d5\u30f5\u56fd\uff08\u30a2\u30e1\u30ea\u30ab\u3001\u30a4\u30bf\u30ea\u30a2\u3001\u30b9\u30da\u30a4\u30f3\u3001\u30d5\u30e9\u30f3\u30b9\u3001\u30a4\u30ae\u30ea\u30b9\uff09\u304c\u5927\u534a\u3092\u5360\u3081\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059","159ab52c":"\u30ab\u30fc\u30d6\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u304b\u3089$R_0$\u3092\u7b97\u51fa\u3057\u305f\u6642\u3068\u540c\u69d8\u306b\u30011\u3092\u4e0b\u56de\u308b\u3053\u3068\u306f\u4e00\u5ea6\u3082\u3042\u308a\u307e\u305b\u3093\u3002","25e86f21":"\u56fd\u5225\u306b\u7d2f\u8a08\u7f79\u60a3\u8005\u6570\u304c1\u4eba\u3092\u8d85\u3048\u305f\u65e5\u3092\u65e5\u672c\u3092\u57fa\u6e96\u306b\u65e5\u4ed8\u3092\u30b7\u30d5\u30c8","a1fe59dd":"\u65e5\u672c\u306e\u7f79\u60a3\u72b6\u6cc1\u3092\u8868\u793a\u3057\u307e\u3059\uff08\u4eba\u6570\u306f\u5bfe\u6570\u8868\u793a\uff09","2406910a":"\u3067\u306f\u3001\u3055\u3063\u305d\u304fSIR\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b  \n[Reference:Infectious Disease Modelling: Fit Your Model to Coronavirus Data by Henri Froese](https:\/\/towardsdatascience.com\/infectious-disease-modelling-fit-your-model-to-coronavirus-data-2568e672dbc7)\n\n\u5148\u307b\u3069\u53d6\u5f97\u3057\u305f\u65e5\u672c\u306e\u4eba\u53e3\u3092\u4f7f\u3044\u3001\u521d\u671f$R_0$\u30925.0\u3001\u53ce\u675f\u5024\u30921.0\u3068\u3057\u3066\u7f79\u60a3\u8005\u6570\u3001\u6b7b\u4ea1\u8005\u6570\u306e\u63a8\u79fb\u3092\u4e88\u6e2c\u3057\u307e\u3059","834cb5c5":"\u4ee5\u4e0b\u306f\u767a\u75c7\u65e5\u57fa\u6e96\u3067\u306f\u306a\u304f\u611f\u67d3\u78ba\u5b9a\u65e5\u57fa\u6e96\u306e\u5834\u5408  \n3\u65e5\u79fb\u52d5\u5e73\u5747\u3067\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0","647e637b":"\u5730\u57df\u3068\u5dde\u306e\u6570\u304c2\u3064\u4ee5\u4e0a\u306e\u56fd\u306e\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\uff08\u6700\u65b0\u306e\u65e5\u4ed8\u306e\u307f\uff09  \n\u4e16\u754c\u306e\u69d8\u3005\u306a\u5834\u6240\u306b\u9818\u571f\u306e\u3042\u308b\u56fd\u3082\u3042\u308a\u3001\u540c\u4e00\u56fd\u5185\u3067\u3082\u7def\u5ea6\u30fb\u7d4c\u5ea6\u304c\u5927\u304d\u304f\u96e2\u308c\u3066\u3044\u308b\uff08\u4f8b\uff1a\u30d5\u30e9\u30f3\u30b9\u306eNaN=\u672c\u571f\u3068New Caledonia\uff09\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059","3e80df82":"\u30ed\u30c3\u30af\u30c0\u30a6\u30f3\u306b\u3088\u308b$R_0$\u306e\u5909\u5316\u3092\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3067\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u30014\u6708\u306e\u7b2c\u4e00\u9031\u4ee5\u964d\u6025\u6fc0\u306b$R_0$\u304c\u4f4e\u4e0b\u3057\u30010.3\u307e\u3067\u843d\u3061\u3066\u3044\u307e\u3059","146f12be":"$R(t)$\u306e\u307f3\u65e5\u5e73\u5747\u3067\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0","6a162ea0":"\u5b9f\u969b\u306e\u7f79\u60a3\u8005\u6570\u3092\u7528\u3044\u3066SIR\u30e2\u30c7\u30eb\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u3066\u307f\u307e\u3059","460427b9":"****\u4e16\u754c\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u307e\u3059\uff08\u4eba\u6570\u306f\u5bfe\u6570\u8868\u793a\uff09****  \n\u3053\u3053\u304b\u3089\u306f5\u65e5\u79fb\u52d5\u5e73\u5747\u7dda\u306e3\u65e5\u30b7\u30d5\u30c8\u306e\u307f\u3092\u8868\u793a\u3057\u307e\u3059\u3002","acca42d1":"\u30c7\u30fc\u30bf\u306b\u300c\u73fe\u5728\u306e\u7f79\u60a3\u8005\u6570\u300d\u300c\u65b0\u898f\u7f79\u60a3\u8005\u6570\u300d\u300c\u65b0\u898f\u6b7b\u8005\u6570\u300d\u300c\u7f79\u60a3\u8005\u5897\u6e1b\u6570\u300d\u300c\u81f4\u6b7b\u7387\u300d\u300c\u73fe\u5728\u306e\u7f79\u60a3\u6570\u306b\u5bfe\u3059\u308b\u65b0\u898f\u7f79\u60a3\u8005\u6570\u6bd4\u7387\u300d\u306a\u3069\u306e\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u307e\u3059","81c73fce":"\u30ab\u30fc\u30d6\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0","a87a0174":"\u65b0\u898f\u7f79\u60a3\u8005\u6570\u3084\u6b7b\u8005\u6570\u3001\u5897\u6e1b\u306a\u3069\u306f\u6240\u3005\u30bc\u30ed\u3084\u30de\u30a4\u30ca\u30b9\u304c\u3042\u308a\u3001\u306a\u3081\u3089\u304b\u3067\u306f\u306a\u3044\u305f\u3081\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u51e6\u7406\u3092\u65bd\u3057\u305f\u30b0\u30e9\u30d5\u3082\u8ffd\u52a0\u3057\u307e\u3059  \n\u751f\u30c7\u30fc\u30bf\u30013\u65e5\u9593\u306e\u79fb\u52d5\u5e73\u5747\u30015\u65e5\u9593\u306e\u79fb\u52d5\u5e73\u5747\u3092\u91cd\u306d\u3066\u8868\u793a\u3057\u3066\u3044\u307e\u3059  \n\u79fb\u52d5\u5e73\u5747\u306f\u9045\u52b9\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u5e73\u5747\u65e5\u6570\u306e\u4e2d\u592e\u306b\u306a\u308b\u3088\u3046\u65e5\u4ed8\u3092\u30b7\u30d5\u30c8\u3057\u3066\u3044\u307e\u3059  ","aae24aaa":"\u540c\u69d8\u306b\u6b7b\u8005\u6570\u304c2\u4eba\u3092\u8d85\u3048\u305f\u65e5\u3092Day1\u3068\u3057\u3066\u65e5\u4ed8\u3092\u305a\u3089\u3057\u305f\u5834\u5408\n\u3053\u3061\u3089\u306e\u65b9\u304c\u898b\u305f\u76ee\u30d5\u30a3\u30c3\u30c8\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059","e0013207":"\u524d\u65e5\u6bd4\u7387\u3084\u5dee\u5206\u306e\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u3001\u4ee5\u4e0b\u306e\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\n* \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6982\u8981\n* \u30c7\u30fc\u30bf\u671f\u9593\u30fb\u56fd\u6570\n* \u4e16\u754c\u306e\u7d2f\u7a4d\u7f79\u60a3\u8005\u6570\u3001\u73fe\u5728\u306e\u7f79\u60a3\u8005\u6570\u3001\u7d2f\u8a08\u6b7b\u8005\u6570\n* \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6700\u65b0\u306e\u60c5\u5831","22693084":"\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3001\u56fd\u3054\u3068\u306e\u30b0\u30eb\u30fc\u30d7\u5316\u3001\u5730\u57df\u3068\u5dde\u306e\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3059\u308b\u56fd\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7","3d66cdf7":"# Japan specific COVID-19 Analysis for newbie <br>\nFollowing dataset is used for this COVID-19 research   \n[Kaggle COVID-19 Complete Dataset (Updated every 24hrs)](https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report\/data)\n\n","811f3e5b":"\u300c\u7d2f\u8a08\u7f79\u60a3\u8005\u6570\u300d\u300c\u6b7b\u8005\u6570\u300d\u300c\u56de\u5fa9\u8005\u6570\u300d\u306f\u5408\u8a08\u3057\u3001\u300c\u7def\u5ea6\u300d\u300c\u7d4c\u5ea6\u300d\u306f\u76f4\u524d\u306b\u4f5c\u6210\u3057\u305fcapital_df\u3067\u7f6e\u304d\u63db\u3048\u308b","6d12fef7":"\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3057\u307e\u3059","66174059":"\u5730\u56f3\u4e0a\u306b\u8868\u793a\u3059\u308b\u305f\u3081\u306b\u306f\u7def\u5ea6\u30fb\u7d4c\u5ea6\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059  \n\u56fd\u3054\u3068\u306b**\u6700\u3082\u611f\u67d3\u8005\u6570\u306e\u591a\u3044\u5834\u6240**\u306e\u7def\u5ea6\u30fb\u7d4c\u5ea6\u3092\u62bd\u51fa\u3057\u3066\u304a\u304d\u307e\u3059"}}