{"cell_type":{"0885c7e0":"code","34475034":"code","89c23df0":"code","329242fa":"code","addd30fe":"code","0d694a62":"code","0c24c64e":"code","1e5c861f":"code","4afe8e9a":"code","ce2802bf":"code","a349e8d5":"code","0b808762":"code","ee9857aa":"code","05e296a0":"code","dd0d1c1c":"code","48ec877b":"code","7ae1f790":"code","eff7ae8e":"code","bb4c7d92":"code","b37d85c5":"code","ad86f04d":"code","f38b3f39":"code","830fc3b9":"code","91201f1e":"code","65483d86":"code","669a0d3a":"code","9b67d067":"code","9d5bcf2c":"code","541145e7":"code","2a864126":"code","24df3eb6":"code","09837610":"code","d4d69353":"markdown","712d90a5":"markdown","1a1fd674":"markdown","5ef3906a":"markdown","21262227":"markdown","5f2f4589":"markdown","4f7b52ca":"markdown","b8519e01":"markdown","f77eee90":"markdown","95fb9c6c":"markdown","4b366684":"markdown","7686d156":"markdown","27cb6b89":"markdown","246c7210":"markdown"},"source":{"0885c7e0":"import sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport warnings\nimport seaborn as sns\nfrom matplotlib import rc\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")  \n    \nrc('figure', **{'dpi': 150})","34475034":"X_dtype = {\n    'ID'                   : int,\n    'YEAR'                 : int,  \n    'MONTH'                : int,  \n    'DAY'                  : int,  \n    'DAY_OF_WEEK'          : int,  \n    'AIRLINE'              : str, \n    'FLIGHT_NUMBER'        : str,  \n    'TAIL_NUMBER'          : str, \n    'ORIGIN_AIRPORT'       : str, \n    'DESTINATION_AIRPORT'  : str, \n    'SCHEDULED_DEPARTURE'  : str,  \n    'DEPARTURE_TIME'       : str, \n    'DEPARTURE_DELAY'      : float,\n    'TAXI_OUT'             : str, \n    'WHEELS_OFF'           : str,\n    'SCHEDULED_TIME'       : float,\n    'AIR_TIME'             : float,\n    'DISTANCE'             : int,\n    'SCHEDULED_ARRIVAL'    : str,\n    'DIVERTED'             : int,  \n    'CANCELLED'            : int,  \n    'CANCELLATION_REASON'  : str\n}\n\ny_dtype = {\n    'ID'                   : int,\n    \"ARRIVAL_DELAY\"        : float\n}\n\nX_train_df = pd.read_csv(\"\/kaggle\/input\/eurecom-aml-2021-challenge-1\/data\/train_features.csv\", dtype=X_dtype)\ny_train_df = pd.read_csv(\"\/kaggle\/input\/eurecom-aml-2021-challenge-1\/data\/train_targets.csv\", dtype=y_dtype)","89c23df0":"X_test_df = pd.read_csv(\"\/kaggle\/input\/eurecom-aml-2021-challenge-1\/data\/test_features.csv\", dtype=X_dtype)\nX_test_df.head()","329242fa":"def parse_hhmm(s):\n    try:\n        return pd.datetime.strptime(s, \"%H%M\")\n    except:\n        return pd.NaT\n\nX_train_df.DEPARTURE_TIME = X_train_df.DEPARTURE_TIME.apply(parse_hhmm)\nX_train_df.SCHEDULED_ARRIVAL = X_train_df.SCHEDULED_ARRIVAL.apply(parse_hhmm)  \nX_train_df.WHEELS_OFF = X_train_df.WHEELS_OFF.apply(parse_hhmm)\nX_train_df.SCHEDULED_DEPARTURE = X_train_df.SCHEDULED_DEPARTURE.apply(parse_hhmm)","addd30fe":"X_test_df.DEPARTURE_TIME = X_test_df.DEPARTURE_TIME.apply(parse_hhmm)\nX_test_df.SCHEDULED_ARRIVAL = X_test_df.SCHEDULED_ARRIVAL.apply(parse_hhmm)  \nX_test_df.WHEELS_OFF = X_test_df.WHEELS_OFF.apply(parse_hhmm)\nX_test_df.SCHEDULED_DEPARTURE = X_test_df.SCHEDULED_DEPARTURE.apply(parse_hhmm)","0d694a62":"def minutes_since_midnight(dt):\n    return dt.hour * 60 + dt.minute\n\nX_train_df.SCHEDULED_ARRIVAL = X_train_df.SCHEDULED_ARRIVAL.apply(minutes_since_midnight)\nX_train_df.DEPARTURE_TIME = X_train_df.DEPARTURE_TIME.apply(minutes_since_midnight)\nX_train_df.SCHEDULED_DEPARTURE = X_train_df.SCHEDULED_DEPARTURE.apply(minutes_since_midnight)\nX_train_df.WHEELS_OFF = X_train_df.WHEELS_OFF.apply(minutes_since_midnight)\n\nX_test_df.SCHEDULED_ARRIVAL = X_test_df.SCHEDULED_ARRIVAL.apply(minutes_since_midnight)\nX_test_df.DEPARTURE_TIME = X_test_df.DEPARTURE_TIME.apply(minutes_since_midnight)\nX_test_df.SCHEDULED_DEPARTURE = X_test_df.SCHEDULED_DEPARTURE.apply(minutes_since_midnight)\nX_test_df.WHEELS_OFF = X_test_df.WHEELS_OFF.apply(minutes_since_midnight)","0c24c64e":"X_train = X_train_df.drop(columns=['YEAR', 'DIVERTED', 'CANCELLED', 'CANCELLATION_REASON'])\nX_test = X_test_df.drop(columns=['YEAR', 'DIVERTED', 'CANCELLED', 'CANCELLATION_REASON'])","1e5c861f":"X_train.TAXI_OUT = X_train.TAXI_OUT.astype(int)\nX_train.FLIGHT_NUMBER = X_train.FLIGHT_NUMBER.astype(int)\n\nX_test.TAXI_OUT = X_test.TAXI_OUT.astype(int)\nX_test.FLIGHT_NUMBER = X_test.FLIGHT_NUMBER.astype(int)","4afe8e9a":"X_test.dtypes","ce2802bf":"print(\"Number of different airlines : \" + str(X_train.AIRLINE.nunique()))\nprint(\"Number of different origin airports : \" + str(X_train.ORIGIN_AIRPORT.nunique()))\nprint(\"Number of different destination airports : \" + str(X_train.DESTINATION_AIRPORT.nunique()))\nprint(\"Number of different planes : \" + str(X_train.TAIL_NUMBER.nunique()))","a349e8d5":"print(X_train['TAIL_NUMBER'].nunique())\nprint(X_train.size)","0b808762":"print(X_test['TAIL_NUMBER'].nunique())\nprint(X_test.size)","ee9857aa":"df = pd.merge(X_train_df, y_train_df, on='ID')\ndf[\"DELAYED\"] = (df.ARRIVAL_DELAY > 0)\ndf[\"DATE\"] = pd.to_datetime(df[[\"YEAR\", \"MONTH\", \"DAY\"]])\ndf.head()","05e296a0":"# This function returns the list of airports sorted by their average percentage of delays when  \n# they are either origin or destination airports (the by parameter controls that)\ndef sort_airports(df, by='ORIGIN_AIRPORT'):\n    df_late = df[df.DELAYED == True].groupby(by=by).agg({\"ID\": 'count'}).rename(columns={\"ID\": \"COUNT\"})\n    df_ontime = df[df.DELAYED == False].groupby(by=by).agg({\"ID\": 'count'}).rename(columns={\"ID\": \"COUNT\"})\n    df_late_perc = (df_late *100 \/ (df_late + df_ontime)).rename(columns={'COUNT': \"DELAYED_PERCENTAGE\"})\n    df_late_perc = df_late_perc.sort_values(by=\"DELAYED_PERCENTAGE\", ascending=False)\n    \n    # If there are aiports that are only late or only on time, there percentage value will be nan so we should replace it by 0\n    return df_late_perc.fillna(0)","dd0d1c1c":"sorted_airports_by_origin = sort_airports(df,by=\"ORIGIN_AIRPORT\")\nsorted_airports_by_destination = sort_airports(df, by=\"DESTINATION_AIRPORT\")\nsorted_airports_by_destination.tail(10)","48ec877b":"# This function is there to add a new column to our training data which will contain the category \n# of the origin or destination airport based on N the number of categories\n\ndef categorize_data(training_df, std_airport_df, how='ORIGIN_AIRPORT', N=100):\n    # PARAMS\n    #   training_df : the dataframe on which we want a new column\n    #   std_airport_df : the dataframe of sorted airports by their delays\n    #   how : a string that tells if we categorize the origin or destination airports\n    #.  N : number of categories\n    cat_airports = np.floor((std_airport_df*N)\/100).astype('int')\n    \n    if (how + \"_CATEGORY\" in training_df):\n        return training_df.drop(columns=[how + \"_CATEGORY\"]).join(cat_airports,on=how).rename(columns={\"DELAYED_PERCENTAGE\": how + \"_CATEGORY\"})\n    \n    return training_df.join(cat_airports,on=how).rename(columns={\"DELAYED_PERCENTAGE\": how + \"_CATEGORY\"})","7ae1f790":"# We replace the airports columns by the score of the origin and destination airports (between 0 and 99) :\nX_test = categorize_data(X_test, sorted_airports_by_origin)\nX_train = categorize_data(X_train, sorted_airports_by_origin)\n\nX_test = categorize_data(X_test, sorted_airports_by_destination, how=\"DESTINATION_AIRPORT\")\nX_train = categorize_data(X_train, sorted_airports_by_destination, how=\"DESTINATION_AIRPORT\")\n\nX_test = X_test.drop(columns=['ORIGIN_AIRPORT', 'DESTINATION_AIRPORT'])\nX_train = X_train.drop(columns=['ORIGIN_AIRPORT', 'DESTINATION_AIRPORT'])","eff7ae8e":"X_test.head()","bb4c7d92":"from sklearn.preprocessing import LabelEncoder\n\n# Make copy to avoid changing original data \nlabel_X_train = X_train.copy()\nlabel_X_test = X_test.copy()\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nlabel_X_train['TAIL_NUMBER'] = label_encoder.fit_transform(X_train['TAIL_NUMBER'])\nlabel_X_test['TAIL_NUMBER'] = label_encoder.transform(X_test['TAIL_NUMBER'])","b37d85c5":"label_encoder2 = LabelEncoder()\nlabel_X_train['AIRLINE'] = label_encoder2.fit_transform(X_train['AIRLINE'])\nlabel_X_test['AIRLINE'] = label_encoder2.transform(X_test['AIRLINE'])","ad86f04d":"X_train = label_X_train\nX_test = label_X_test","f38b3f39":"from sklearn.impute import SimpleImputer\n\n# Get names of columns with missing values\ncols_with_missing = [col for col in X_train.columns if X_train[col].isnull().any()]\nprint(cols_with_missing)\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))\n\n\n# Imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns","830fc3b9":"# Get names of columns with missing values\ncols_with_missing = [col for col in X_test.columns if X_test[col].isnull().any()]\nprint(cols_with_missing)\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_test = pd.DataFrame(my_imputer.fit_transform(X_test))\n\n\n# Imputation removed column names; put them back\nimputed_X_test.columns = X_test.columns","91201f1e":"X_train = imputed_X_train.astype(int)\nX_test = imputed_X_test.astype(int)","65483d86":"X = X_train.drop(columns=['ID'])\ny = y_train_df.drop(columns=['ID'])","669a0d3a":"from sklearn.ensemble import RandomForestRegressor\n\nforest_model = RandomForestRegressor(n_estimators = 24, verbose=True)\nforest_model.fit(X, y)","9b67d067":"test_X = X_test.drop(columns=['ID'])\ny_test_pred = forest_model.predict(test_X)","9d5bcf2c":"# Create a dataframe containing the predictions\nsubmission_df = pd.DataFrame(data={'ID': X_test_df.ID.values,\n                                   'ARRIVAL_DELAY': y_test_pred.squeeze()})\n\n# Save the predictions into a csv file\nsubmission_df.to_csv(\"\/kaggle\/working\/submission_forest.csv\", index=False)","541145e7":"#from sklearn.model_selection import train_test_split\n\n#train_X, val_X, train_y, val_y = train_test_split(X, y, test_size = 0.05)","2a864126":"#from xgboost import XGBRegressor\n#from sklearn.metrics import mean_absolute_error\n\n#my_model = XGBRegressor(n_estimators=800, learning_rate=0.05, n_jobs=4)\n#my_model.fit(train_X, train_y, \n#             early_stopping_rounds=5, \n#             eval_set=[(val_X, val_y)],\n#             verbose=True)","24df3eb6":"#test_X = X_test.drop(columns=['ID'])\n#y_test_pred = my_model.predict(test_X)","09837610":"## Create a dataframe containing the predictions\n#submission_df = pd.DataFrame(data={'ID': X_test_df.ID.values,\n#                                   'ARRIVAL_DELAY': y_test_pred.squeeze()})\n\n## Save the predictions into a csv file\n#submission_df.to_csv(\"\/kaggle\/working\/submission.csv\", index=False)","d4d69353":"## Table of content\n<ul>\n    <li><a href=\"#data\">Data Preparation<\/a>\n    <ul>\n        <li><a href=\"#departure_time\">Delays and departure time<\/a><\/li>\n        <li><a href=\"#airports\">Delays and airports<\/a><\/li>\n        <li><a href=\"#airline\">Delays and airlines<\/a><\/li>\n        <li><a href=\"#tailnb\">Delays and tail number<\/a><\/li>\n    <\/ul>\n    <\/li>\n    <li><a href=\"#devmod\">Developping a model<\/a><\/li>\n    \n<\/ul>","712d90a5":"Uncomment all cells below to use XGBoost :","1a1fd674":"We clearly cannot apply one hot encoding to the airports, planes and flight columns so for now we can use label encoding.\n\nHowever, a better way to work is to create different categories with groups of airports, based on the percentage of flights lates (maybe 100 categories : 0-1%; ... ; 99-100%)","5ef3906a":"We have four feautures corresponding to a time, we convert these features to integers using the functions parse_hhmm and minutes_since_midnight :","21262227":"We have four object type columns left, let's check the number of distinct values to see if we can apply label encoding or one hot encoding.","5f2f4589":"We use label encoder for the remaining features :","4f7b52ca":"We convert all columns to type integer to save some memory space, and we drop the ID columns before training :","b8519e01":"We drop the unuseful columns in the data :","f77eee90":"`FLIGHT_NUMBER` and `TAXI_OUT` are numerical features, stored as strings, we convert them to integers :","95fb9c6c":"Before applying a model to the data, we need to make sure that no value is missing in the train and test sets, we use SimpleImputer :","4b366684":"# Random Forest :","7686d156":"<a id=\"data\"><\/a>\n## Data Preparation \nFirst, we load the data :","27cb6b89":"# XGBoost :","246c7210":"# Challenge 1: Air travel delay forecasting\n"}}