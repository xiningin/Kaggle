{"cell_type":{"d127473c":"code","27202154":"code","c0822f68":"code","d0c1bde5":"code","b6930259":"code","a158a290":"code","ad04d870":"code","1dfc5a6e":"code","80800b5b":"code","6410bc1e":"code","d11734a2":"code","aeaf547d":"code","c2735750":"code","5e3c01a9":"code","91ffe2cd":"code","13d26711":"code","b8b5f250":"markdown","3f67f5e5":"markdown","8454055d":"markdown","075c7bf6":"markdown","6160d072":"markdown","7fd4a440":"markdown","7d232586":"markdown"},"source":{"d127473c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","27202154":"import warnings\nimport PIL\n\nwarnings.filterwarnings('ignore')","c0822f68":"from keras import layers, models, optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import *\nfrom keras.models import model_from_json","d0c1bde5":"from keras import backend as K\nK.image_data_format()","b6930259":"TRAIN_CROPPED_PATH = '..\/input\/car-image-cropping-dataset-size-299\/train_crop'\nTEST_CROPPED_PATH = '..\/input\/car-image-cropping-dataset-size-299\/test_crop'\n\ndf_train = pd.read_csv('..\/input\/2019-3rd-ml-month-with-kakr\/train.csv')\ndf_test = pd.read_csv('..\/input\/2019-3rd-ml-month-with-kakr\/test.csv')","a158a290":"df_train['class'] = df_train['class'].astype('str')\ndf_train = df_train[['img_file', 'class']]\ndf_test = df_test[['img_file']]","ad04d870":"train_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","1dfc5a6e":"train_generator = train_datagen.flow_from_dataframe(dataframe = df_train, directory = TRAIN_CROPPED_PATH, x_col='img_file', y_col = 'class')","80800b5b":"def predict_model(model_name, IMAGE_SIZE, BATCH_SIZE):\n    test_generator = test_datagen.flow_from_dataframe(dataframe = df_test, directory = TEST_CROPPED_PATH, x_col = 'img_file', y_col = None,\n                                                  target_size = (IMAGE_SIZE, IMAGE_SIZE), color_mode ='rgb', class_mode = None,\n                                                  batch_size = BATCH_SIZE, shuffle = False)\n    \n    model_path = \"..\/input\/pretrained-models\/\" + model_name\n    \n    json_file = open(model_path + '\/' + model_name + '.json', \"r\")         \n    model_json = json_file.read()\n\n    prediction = []\n\n    for i in os.listdir(model_path):\n        if i[-4:] == 'json':\n            continue\n\n        model = model_from_json(model_json)\n        print('loaded model json')\n\n        model.load_weights(model_path + '\/' + i)\n        print('loaded model weight:' + i)\n        preds = []\n        for j in range(5):\n            test_generator.reset()\n            pred = model.predict_generator(generator = test_generator, steps = len(df_test) \/ BATCH_SIZE, verbose = 1)\n            preds.append(pred)\n        pred_tta = np.mean(preds, axis = 0)\n        prediction.append(pred_tta)\n    json_file.close()\n    y_pred = np.mean(prediction, axis = 0)\n    \n    return y_pred","6410bc1e":"densenet201_pred = predict_model(model_name = 'densenet201', IMAGE_SIZE = 224, BATCH_SIZE = 32)","d11734a2":"inception_pred = predict_model(model_name = 'inception_v3', IMAGE_SIZE = 299, BATCH_SIZE = 32)","aeaf547d":"xception_pred = predict_model(model_name = 'xception', IMAGE_SIZE = 299, BATCH_SIZE = 32)","c2735750":"ensemble_pred = (densenet201_pred + xception_pred + inception_pred) \/ 3","5e3c01a9":"labels = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\nfinal_pred = [labels[k] for k in np.argmax(ensemble_pred, axis = 1)]","91ffe2cd":"submission = pd.read_csv('..\/input\/2019-3rd-ml-month-with-kakr\/sample_submission.csv')\nsubmission[\"class\"] = final_pred\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","13d26711":"from IPython.display import FileLink\nFileLink('submission.csv')","b8b5f250":"## \uc608\uce21","3f67f5e5":"### densenet201","8454055d":"## \ud568\uc218 \uc815\uc758","075c7bf6":"### inception_v3","6160d072":"## Generator","7fd4a440":"### xception","7d232586":"## \uc559\uc0c1\ube14"}}