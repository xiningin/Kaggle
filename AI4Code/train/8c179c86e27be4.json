{"cell_type":{"5f44d243":"code","cf1fa7ba":"code","dcbdeff3":"code","4126b54c":"code","77f1d285":"code","e05b6854":"code","ae0ff6eb":"code","dc58e490":"code","4f47bc3d":"code","ff0bd711":"code","474f1eca":"code","f2dc4c73":"code","5bf908fd":"code","48e81f71":"code","c8ba77f7":"code","1d533360":"code","56ed5048":"code","a68833bc":"code","e9ed0518":"markdown","df76fba0":"markdown"},"source":{"5f44d243":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\ndf = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\ndf","cf1fa7ba":"df.shape","dcbdeff3":"df.isnull().sum()","4126b54c":"from sklearn.preprocessing import LabelEncoder\ndef label_encoded(x):\n    le = LabelEncoder()\n    le.fit(x)\n    print(x.name, le.classes_)\n    return le.transform(x)","77f1d285":"for col in df.columns:\n    df[str(col)] = label_encoded(df[str(col)])","e05b6854":"df.head(10)","ae0ff6eb":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,10))\nax = sns.heatmap(df.corr())","dc58e490":"fig = plt.figure(figsize=(20,15))\nax = fig.gca()\ndf.hist(ax=ax)\nplt.show()","4f47bc3d":"train = df.drop(['class'], axis=1)\ntest = df['class']","ff0bd711":"from sklearn.model_selection import train_test_split\ntrain_x, test_x, train_y, test_y = train_test_split(train, test, test_size=0.33, random_state=0)","474f1eca":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel_1 = RandomForestClassifier(max_depth=10, random_state=0)","f2dc4c73":"model_1.fit(train_x, train_y)","5bf908fd":"yhat = model_1.predict(test_x)","48e81f71":"accuracy_score(test_y, yhat)","c8ba77f7":"data = df.values\nx = data[:, 1:-1].astype(str)\ny = data[:, 0].astype(str)","1d533360":"from sklearn.model_selection import train_test_split\ntrain_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.33, random_state=0)","56ed5048":"from sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()\nordinal_encoder.fit(train_x)\ntrain_x = ordinal_encoder.transform(train_x)\ntest_x = ordinal_encoder.transform(test_x)\n# ordinal encode target variable\nlabel_encoder = LabelEncoder()\nlabel_encoder.fit(train_y)\ntrain_y = label_encoder.transform(train_y)\ntest_y = label_encoder.transform(test_y)","a68833bc":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression(solver='liblinear')\nLR.fit(train_x, train_y)\ny_pred = LR.predict(test_x)\naccuracy_score(test_y, y_pred)","e9ed0518":"# Training data using Random Forest Classifier","df76fba0":"# Training data using Logistic Regression"}}