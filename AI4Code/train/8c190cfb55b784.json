{"cell_type":{"4d813691":"code","655ce9cf":"code","c991f5fd":"code","4ebd0c4e":"code","111ee9e0":"code","e9e76d79":"code","9375b920":"code","cabae288":"code","2d2b1aa1":"code","406e5396":"code","0752bdec":"code","e589440c":"code","9f79537a":"code","8120cd65":"code","624a5421":"code","a1c7dfd4":"code","6d7ea438":"code","4100b1c3":"code","e1c77cc5":"code","b98bbaa6":"code","f69c0efd":"code","0ee37f47":"code","0239d254":"code","b0f7794c":"code","2becad3e":"code","3d1a871c":"code","88cc39f3":"markdown","b718df93":"markdown","3a124346":"markdown","d6c29749":"markdown","89a7e574":"markdown","cba1ea06":"markdown","ff60794e":"markdown","48770959":"markdown","c7dfe3d0":"markdown","ef46ac20":"markdown","8b8a34fe":"markdown","72728b68":"markdown","eb425c31":"markdown","60a2d394":"markdown","1ac7ab0d":"markdown","e2e427bb":"markdown","b7a0641d":"markdown","dc2a6ee9":"markdown","bd087d2b":"markdown","4e7e7ec3":"markdown","a107fceb":"markdown","90538bc3":"markdown","87134705":"markdown","26ee8a3c":"markdown"},"source":{"4d813691":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","655ce9cf":"matches=pd.read_csv('..\/input\/ipl-data-set\/matches.csv')\nplayers=pd.read_excel('..\/input\/ipl-data-set\/Players.xlsx')\nteam=pd.read_csv('..\/input\/ipl-data-set\/most_runs_average_strikerate.csv')","c991f5fd":"players.replace('Right_hand','Right_Hand',inplace=True)\nmatches.replace('Rising Pune Supergiant','Rising Pune Supergiants',inplace=True)\nmatches.replace('Delhi Daredevils','Delhi Capitals',inplace=True)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(players['Batting_Hand'])","4ebd0c4e":"plt.xticks(rotation=90)\nsns.countplot(players['Country'])","111ee9e0":"matches.isnull().any()\nmatches.drop(['umpire1','umpire2','umpire3'],axis=1,inplace=True)\nI=matches[matches['winner'].isnull()==True].index\nmatches.drop(I,inplace=True)\nI2=matches[matches['city'].isnull()==True].index\nmatches.drop(I2,inplace=True)","e9e76d79":"matches['Season'].unique()","9375b920":"S_2008=matches[matches['Season']=='IPL-2008']\nS_2009=matches[matches['Season']=='IPL-2009']\nS_2010=matches[matches['Season']=='IPL-2010']\nS_2011=matches[matches['Season']=='IPL-2011']\nS_2012=matches[matches['Season']=='IPL-2012']\nS_2013=matches[matches['Season']=='IPL-2013']\nS_2014=matches[matches['Season']=='IPL-2014']\nS_2015=matches[matches['Season']=='IPL-2015']\nS_2016=matches[matches['Season']=='IPL-2016']\nS_2017=matches[matches['Season']=='IPL-2017']\nS_2018=matches[matches['Season']=='IPL-2018']\nS_2019=matches[matches['Season']=='IPL-2019']","cabae288":"Finals=pd.concat([S_2008.loc[S_2008['id']==S_2008['id'].max()],S_2009.loc[S_2009['id']==S_2009['id'].max()],S_2010.loc[S_2010['id']==S_2010['id'].max()],S_2011.loc[S_2011['id']==S_2011['id'].max()],\nS_2012.loc[S_2012['id']==S_2012['id'].max()],\nS_2013.loc[S_2013['id']==S_2013['id'].max()],S_2014.loc[S_2014['id']==S_2014['id'].max()],S_2015.loc[S_2015['id']==S_2015['id'].max()],\nS_2016.loc[S_2016['id']==S_2016['id'].max()],S_2017.loc[S_2017['id']==S_2017['id'].max()],S_2018.loc[S_2018['id']==S_2018['id'].max()],\nS_2019.loc[S_2019['id']==S_2019['id'].max()]])\nFinals","2d2b1aa1":"len(matches[matches['toss_winner']==matches['winner']])\/len(matches) * 100","406e5396":"temp1=matches[matches['toss_winner']==matches['winner']]\ntemp2=matches.groupby('toss_winner')['winner'].count()\ntemp1=temp1.groupby('toss_winner')['winner'].count()\ntemp=temp1\/temp2*100\nplt.xticks(rotation=90)\nplt.plot(temp)\ntemp","0752bdec":"len(Finals[Finals['toss_winner']==Finals['winner']])\/len(Finals) * 100","e589440c":"Del=pd.read_csv('..\/input\/ipl-data-set\/deliveries.csv')\nDel","9f79537a":"Stat=Del.groupby('batting_team')['total_runs'].sum()","8120cd65":"print(len(matches[matches['team1']=='Chennai Super Kings']) + len(matches[matches['team2']=='Chennai Super Kings']))\nprint(len(matches[matches['team1']=='Mumbai Indians']) + len(matches[matches['team2']=='Mumbai Indians']))\nprint(len(matches[matches['team1']=='Kolkata Knight Riders']) + len(matches[matches['team2']=='Kolkata Knight Riders']))\nprint(len(matches[matches['team1']=='Rajasthan Royals']) + len(matches[matches['team2']=='Rajasthan Royals']))\nprint(len(matches[matches['team1']=='Royal Challengers Bangalore']) + len(matches[matches['team2']=='Royal Challengers Bangalore']))\nprint(len(matches[matches['team1']=='Kings XI Punjab']) + len(matches[matches['team2']=='Kings XI Punjab']))\nprint(len(matches[matches['team1']=='Sunrisers Hyderabad']) + len(matches[matches['team2']=='Sunrisers Hyderabad']))\nprint(len(matches[matches['team1']=='Delhi Capitals']) + len(matches[matches['team2']=='Delhi Capitals']))","624a5421":"print('chennai average score :',  Stat['Chennai Super Kings']\/162)\nprint('Mumbai average score :',  Stat['Mumbai Indians']\/184)\nprint('Kolkata average score :',  Stat['Kolkata Knight Riders']\/177)\nprint('Rajasthan average score :',  Stat['Rajasthan Royals']\/144)\nprint('Banglore average score :',  Stat['Royal Challengers Bangalore']\/175)\nprint('punjab average score :',  Stat['Kings XI Punjab']\/175)\nprint('Hyderabad average score :',  Stat['Sunrisers Hyderabad']\/106)\nprint('Delhi average score :',  Stat['Delhi Daredevils']\/157)","a1c7dfd4":"a=matches.groupby('player_of_match')['player_of_match'].count()\nA=pd.DataFrame(a)\nA.rename(columns={'player_of_match':'Number of MOM'},inplace=True)\nA.sort_values(\"Number of MOM\",inplace=True,ascending=False)\nA=A.reset_index()\nA=A.iloc[:5,:]\nsns.barplot(A['player_of_match'],A['Number of MOM'])","6d7ea438":"plt.figure(figsize=[10,10])\nplt.xticks(rotation=90)\nsns.countplot('venue',data=matches)\nplt.show()","4100b1c3":"Per=matches.pivot_table(index=['winner','Season'],aggfunc='size')\nPer=pd.DataFrame(Per)\nPer.rename(columns={0:'wins'},inplace=True)\nPer.reset_index(inplace=True)\nC=Per[Per['winner']=='Chennai Super Kings']\nplt.xticks(rotation=90)\nplt.title('Chennai Super Kings')\nplt.scatter('Season','wins',data=C)\nplt.plot('Season','wins',data=C)","e1c77cc5":"R=Per[Per['winner']=='Royal Challengers Bangalore']\nplt.xticks(rotation=90)\nplt.title('Royal Challengers Bangalore')\nplt.scatter('Season','wins',data=R)\nplt.plot('Season','wins',data=R)","b98bbaa6":"M=Per[Per['winner']=='Mumbai Indians']\nplt.xticks(rotation=90)\nplt.title('Mumbai Indians')\nplt.scatter('Season','wins',data=M)\nplt.plot('Season','wins',data=M)","f69c0efd":"K=Per[Per['winner']=='Kolkata Knight Riders']\nplt.xticks(rotation=90)\nplt.title('Kolkata Knight Riders')\nplt.scatter('Season','wins',data=K)\nplt.plot('Season','wins',data=K)","0ee37f47":"Kl=Per[Per['winner']=='Kings XI Punjab']\nplt.xticks(rotation=90)\nplt.title('Kings XI Punjab')\nplt.scatter('Season','wins',data=Kl)\nplt.plot('Season','wins',data=Kl)\n","0239d254":"R=Per[Per['winner']=='Rajasthan Royals']\nplt.xticks(rotation=90)\nplt.title('Rajasthan Royals')\nplt.scatter('Season','wins',data=R)\nplt.plot('Season','wins',data=R)\n\n","b0f7794c":"MS_Stat=Del[Del['batsman']=='MS Dhoni']\nMS_Strike=pd.DataFrame(MS_Stat.groupby('over')['total_runs'].mean()).reset_index()\nMS_Strike['total_runs']=MS_Strike['total_runs']*100\nsns.scatterplot(MS_Strike['over'],MS_Strike['total_runs'])\nplt.title('MS DHONI')\nplt.ylabel('Strike Rate')","2becad3e":"V_Stat=Del[Del['batsman']=='V Kohli']\nV_Strike=pd.DataFrame(V_Stat.groupby('over')['total_runs'].mean()).reset_index()\nV_Strike['total_runs']=V_Strike['total_runs']*100\nsns.scatterplot(V_Strike['over'],V_Strike['total_runs'])\nplt.ylabel('Strike Rate')\nplt.title('VIRAT KOHLI')","3d1a871c":"R_Stat=Del[Del['batsman']=='SK Raina']\nR_Strike=pd.DataFrame(R_Stat.groupby('over')['total_runs'].mean()).reset_index()\nR_Strike['total_runs']=R_Strike['total_runs']*100\nsns.scatterplot(R_Strike['over'],R_Strike['total_runs'])\nplt.ylabel('Strike Rate')\nplt.title('SURESH RAINA')","88cc39f3":"Chennai Super Kings is having an average score of 163.07 followed by mumbai Indians 162.00..\nHmm..now we know why Chennai vs MI games are the tight ones.","b718df93":"# Number of players from each Country","3a124346":"*With respect to foreign players,Australian are the ones with highest number of players.*","d6c29749":"**Gayle has the highest number of man of the match award followed by AB**","89a7e574":"# Most popular Venue","cba1ea06":"# Do Toss winner has higher chance of winning the game?","ff60794e":"# Popular batsmen Strike Rates in different stages of the game","48770959":"# Do Toss is a deciding Factor in Finals?","c7dfe3d0":"*Seems like Chennai Super Kings and Gujarat Lions have higher probability of winning the match if they win the toss while Pune Warriors is most likely to loss a match if they win the toss*","ef46ac20":"*Well..it seems like there is about 50-50 chance for both the teams to win the game.*","8b8a34fe":"**ALL the Finals From 2008-2019**","72728b68":"We have seen 12 Finals so far and 9 out 12 have won by the team winning the toss which gives a percentage of 75..Well by seeing this it seems toss winning becomes crucial in Finals.\n\nPS:Though 12 matches is quiet less to predict this but 75 percentage gives us a hint that toss has something to do in Finals..What's your say on this please let me know..","eb425c31":"So,it is the end of this EDA,hope it helped you.If you have some other interesting questions regarding this dataset,do let me know will try to answer your questions by performing more analysis on this dataset. ","60a2d394":"# Players with most number player of the match awards","1ac7ab0d":"*So finally IPL season has come and being a cricket fan I am very excited to have a deeper look on this IPL dataset 2008-2019.We will explore every details which has occurred in past and let see if we can predict something by having a deeper look.\nHere we go.*","e2e427bb":"**Maximum number of games are played on Eden Gardens followed by Wankhede Stadium **","b7a0641d":"# How many batsmen are right or left handed?","dc2a6ee9":"**Lets just make seperate Dataframes for the different IPL season**","bd087d2b":"*Hmm..there are very small number of left-handed batsmen as compare to right-handed.*","4e7e7ec3":"# Which Team is having the highest average batting Score","a107fceb":"# Let us see how a particular team gets effected with a toss win","90538bc3":"Scatterplots are the proof how dangerous these players can be in the last overs","87134705":"From the above plots it gets clear that Rajasthan Royals apart from 2008 and 2013 season have not played good Cricket.","26ee8a3c":"# Performance(no. of wins) of each team throughout different seasons(2008-2019)"}}