{"cell_type":{"40ebf530":"code","c4950308":"code","5e137aa4":"code","c8fe7631":"code","eed5ec6b":"code","1651f263":"code","00633a31":"code","466e5967":"code","2d103e6c":"code","895861b2":"code","34a7ab5f":"code","9f55a07f":"code","92d088d5":"code","e688fbea":"code","0ea8db30":"code","242007c2":"code","98c22274":"code","e07e07be":"code","f815544c":"code","cdddb124":"code","9adf8980":"code","4fe0b165":"code","1aa4c9ef":"code","86e13d05":"code","28b9ca47":"markdown","80cfa820":"markdown","aa014467":"markdown","3e5a5645":"markdown","b0a522dc":"markdown","e9d57760":"markdown","389f8bcc":"markdown","28cac069":"markdown","b29102e0":"markdown","71674af0":"markdown","3f2357e3":"markdown","c1f4e300":"markdown","ce0b66d0":"markdown","1af69084":"markdown","6deac445":"markdown","243a420d":"markdown","4fc3d956":"markdown","9795025c":"markdown"},"source":{"40ebf530":"import gc\n\nimport pandas as pd\npd.set_option('display.max_columns', None)\nimport numpy as np\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\n\nimport optuna\nimport lightgbm as lgb\n\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.filterwarnings('ignore')","c4950308":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","5e137aa4":"def replace_inf2nan(df):\n    df = df.replace(np.inf, np.nan)\n    df = df.replace(-np.inf, np.nan)\n    return df","c8fe7631":"sales_train_validation = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv'))\nsell_prices            = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv'))\ncalendar               = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv'))\nsample_submission      = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/sample_submission.csv'))","eed5ec6b":"idsList = ['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id']\n\nsales_train_validation = sales_train_validation.melt(id_vars=idsList, var_name='d', value_name='target')\n\ntest1_rows = [row for row in sample_submission['id'] if 'validation' in row]\ntest2_rows = [row for row in sample_submission['id'] if 'evaluation' in row]\ntest1 = sample_submission[sample_submission['id'].isin(test1_rows)]\ntest2 = sample_submission[sample_submission['id'].isin(test2_rows)]\n\ntest1.columns = ['id', 'd_1914', 'd_1915', 'd_1916', 'd_1917', 'd_1918', 'd_1919', 'd_1920', 'd_1921', 'd_1922', 'd_1923',\n                 'd_1924', 'd_1925', 'd_1926', 'd_1927', 'd_1928', 'd_1929', 'd_1930', 'd_1931', 'd_1932', 'd_1933', 'd_1934', \n                 'd_1935', 'd_1936', 'd_1937', 'd_1938', 'd_1939', 'd_1940', 'd_1941']\ntest2.columns = ['id', 'd_1942', 'd_1943', 'd_1944', 'd_1945', 'd_1946', 'd_1947', 'd_1948', 'd_1949', 'd_1950', 'd_1951', \n                 'd_1952', 'd_1953', 'd_1954', 'd_1955', 'd_1956', 'd_1957', 'd_1958', 'd_1959', 'd_1960', 'd_1961', 'd_1962', \n                 'd_1963', 'd_1964', 'd_1965', 'd_1966', 'd_1967', 'd_1968', 'd_1969']\n\nproduct = sales_train_validation[idsList].drop_duplicates()\n\ntest1 = test1.merge(product, how='left', on='id')\n\ntest2['id'] = test2['id'].str.replace('_evaluation', '_validation')\ntest2 = test2.merge(product, how='left', on='id')\ntest2['id'] = test2['id'].str.replace('_validation', '_evaluation')\n\ntest1 = pd.melt(test1, id_vars=idsList, var_name='d', value_name='target')\ntest2 = pd.melt(test2, id_vars=idsList, var_name='d', value_name='target')\n\nsales_train_validation['part'] = 0\ntest1['part'] = 1\ntest2['part'] = 2\n\ntrain = pd.concat([sales_train_validation, test1, test2], axis=0)\n\nsubmission = train.loc[train['part'].isin([1, 2]), ['id', 'd', 'target']]\n\ntrain['id_'] = train['id'].str.replace('_validation', '')\ntrain['id_'] = train['id_'].str.replace('_evaluation', '')\n\ndel idsList, sales_train_validation, test1_rows, test2_rows, test1, test2, product\ngc.collect()","1651f263":"calendar['day'] = calendar['date'].str[8:10]\ncalendar['month_day'] = calendar['month'].astype(str) + calendar['day'].astype(str)\n\ncalendar['Christmas'] = (calendar['date'].str[5:]=='12-25').astype(int)\ncalendar['BlackFriday'] = (calendar['date'].str[5:].isin(['2011-11-25', '2012-11-23', '2013-11-29', '2014-11-28', '2015-11-27'])).astype(int)\n\ncalendar.loc[calendar['BlackFriday']==1, 'event_name_1'] = 'BlackFriday'\ncalendar.loc[calendar['BlackFriday']==1, 'event_type_1'] = 'other'\n\ncalendar.fillna('NoEvent', inplace=True)\n\ncalendar['yesterday_event'] = calendar['event_name_1'].shift(1)\ncalendar['tommorrow_event'] = calendar['event_name_1'].shift(-1)\n\ncalendar['month_day'] = calendar['month'].astype(str) + calendar['day'].astype(str)\n\ncalendar['weekend'] = (calendar['weekday'].isin(['Saturday', 'Sunday'])).astype(int)\ncalendar.loc[calendar['event_type_1']=='National', 'weekend'] = 1","00633a31":"price_mode = pd.DataFrame(sell_prices.groupby(['item_id'])['sell_price'].apply(lambda x: x.mode()))\nprice_mode = price_mode.reset_index()[['item_id', 'sell_price']]\nprice_mode = price_mode.rename(columns={'sell_price':'standard_price'})\n\nsell_prices = sell_prices.merge(price_mode, on='item_id', how='left')\nsell_prices['discount_rate'] = sell_prices['sell_price'] \/ sell_prices['standard_price']\n\nprice_mean = sell_prices[['item_id', 'sell_price']].groupby('item_id').mean().rename(columns={'sell_price':'sell_price_mean'})\nprice_mean = pd.DataFrame(price_mean).reset_index()\nprice_std = sell_prices[['item_id', 'sell_price']].groupby('item_id').std().rename(columns={'sell_price':'sell_price_std'})\nprice_std = pd.DataFrame(price_std).reset_index()\nprice_max = sell_prices[['item_id', 'sell_price']].groupby('item_id').max().rename(columns={'sell_price':'sell_price_max'})\nprice_max = pd.DataFrame(price_max).reset_index()\nprice_min = sell_prices[['item_id', 'sell_price']].groupby('item_id').min().rename(columns={'sell_price':'sell_price_min'})\nprice_min = pd.DataFrame(price_min).reset_index()\nprice_skew = sell_prices[['item_id', 'sell_price']].groupby('item_id').skew().rename(columns={'sell_price':'sell_price_skew'})\nprice_skew = pd.DataFrame(price_skew).reset_index()\n\nprice_info = pd.DataFrame(columns=['item_id'])\nprice_info = price_info.merge(price_mean, on='item_id', how='outer')\nprice_info = price_info.merge(price_std, on='item_id', how='inner')\nprice_info = price_info.merge(price_max, on='item_id', how='inner')\nprice_info = price_info.merge(price_min, on='item_id', how='inner')\nprice_info = price_info.merge(price_skew, on='item_id', how='inner')\n\nsell_prices = sell_prices.merge(price_info, on='item_id', how='left')\n\ndel price_mean, price_std, price_max, price_min, price_skew, price_info\ngc.collect()","466e5967":"train = train.merge(calendar, on='d', how='left')\ntrain = train.merge(sell_prices, on=['store_id', 'item_id', 'wm_yr_wk'], how='left')\n\ndel calendar, sell_prices\ntrain = reduce_mem_usage(train)\ngc.collect()","2d103e6c":"tmp = pd.DataFrame(train.groupby(['item_id'])[['sell_price', 'standard_price', 'discount_rate']].apply(lambda x: x.mode()))\ntmp = tmp.reset_index()[['item_id', 'sell_price', 'standard_price', 'discount_rate']]\ntmp = tmp.rename(columns={'sell_price':'tmp1', 'standard_price':'tmp2', 'discount_rate':'tmp3'})\n\ntrain = train.merge(tmp, on='item_id', how='left')\ntrain.loc[train['sell_price'].isnull(), 'sell_price']         = train['tmp1']\ntrain.loc[train['standard_price'].isnull(), 'standard_price'] = train['tmp2']\ntrain.loc[train['discount_rate'].isnull(), 'discount_rate']   = train['tmp3']\ntrain.drop(['tmp1', 'tmp2', 'tmp3'], axis=1, inplace=True)\n\ndel tmp\ntrain = reduce_mem_usage(train)\ngc.collect()","895861b2":"train['snap'] = 0\ntrain.loc[(train['state_id']=='CA')&(train['snap_CA']==1), 'snap'] = 1\ntrain.loc[(train['state_id']=='TX')&(train['snap_TX']==1), 'snap'] = 1\ntrain.loc[(train['state_id']=='WI')&(train['snap_WI']==1), 'snap'] = 1\ntrain['snap'] = LabelEncoder().fit_transform(list(train['snap'].astype(str).values))\ntrain.drop(['snap_CA', 'snap_TX', 'snap_WI'], axis=1, inplace=True)\n\ntrain = reduce_mem_usage(train)\ngc.collect()","34a7ab5f":"train['store_rank'] = 1\ntrain.loc[train['store_id'].isin(['CA_4', 'WI_1']), 'store_rank'] = 0\ntrain.loc[train['store_id'].isin(['CA_1', 'CA_3']), 'store_rank'] = 2\n\ntrain = reduce_mem_usage(train)\ngc.collect()","9f55a07f":"tmp = train[['id_', 'event_name_1', 'target']].groupby(['id_', 'event_name_1'], as_index=False).mean()\n\ntmp1 = tmp.loc[tmp['event_name_1']=='NoEvent', ['id_', 'target']]\ntmp1.columns = ['id_', 'target_no_event']\n\ntmp2 = tmp[tmp['event_name_1']!='NoEvent']\ntmp2.columns = ['id_', 'event', 'target_event']\n\ntmp3 = tmp2.merge(tmp1, on='id_', how='left')\n\ntmp3['event_up_lift'] = tmp3['target_event'] \/ tmp3['target_no_event']\n\ntrain = train.merge(tmp3[['id_', 'event', 'event_up_lift']], left_on=['id_', 'event_name_1'], right_on=['id_', 'event'], how='left')\n\ntrain.drop(['event'], axis=1, inplace=True)\ntrain['event_up_lift'].fillna(1, inplace=True)\n\ndel tmp, tmp1, tmp2, tmp3\ntrain = reduce_mem_usage(train)\ngc.collect()","92d088d5":"def ref_past(df, col, base, nlist):\n    for i in nlist:\n        df[f'{col}_{i}'] = df.groupby([base])[col].apply(lambda x:x.shift(i))\n        df = reduce_mem_usage(df)\n        gc.collect()\n    return df\n\ndef agg_past(df, col, base, nlist, windowlist):\n    for n in nlist:\n        for w in windowlist:\n            df[f'{col}_{n}_rolling_{w}_mean'] = df.groupby([base])[f'{col}_{n}'].apply(lambda x: x.rolling(w, 1).mean())\n            df[f'{col}_{n}_rolling_{w}_std'] = df.groupby([base])[f'{col}_{n}'].apply(lambda x: x.rolling(w, 1).std())\n            df[f'{col}_{n}_rolling_{w}_max'] = df.groupby([base])[f'{col}_{n}'].apply(lambda x: x.rolling(w, 1).max())\n            df[f'{col}_{n}_rolling_{w}_min'] = df.groupby([base])[f'{col}_{n}'].apply(lambda x: x.rolling(w, 1).min())\n            df[f'{col}_{n}_rolling_{w}_skew'] = df.groupby([base])[f'{col}_{n}'].apply(lambda x: x.rolling(w, 1).skew())\n            df[f'{col}_{n}_rolling_{w}_kurt'] = df.groupby([base])[f'{col}_{n}'].apply(lambda x: x.rolling(w, 1).kurt())\n            \n            df[f'{col}_{n}_ewm_{w}_mean'] = df.groupby([base])[f'{col}_{n}'].apply(lambda x: x.ewm(span=w).mean())\n        df = reduce_mem_usage(df)\n        gc.collect()\n    return df\n\ntrain = ref_past(train, 'target', 'id_', [28, 29, 30, 56, 180, 365])\ntrain = agg_past(train, 'target', 'id_', [28, 29, 56], [7, 28, 90])\n\n\ntrain['target_rolling_28_56_7_mean'] = train['target_28_rolling_7_mean'] \/ train['target_56_rolling_7_mean']\ntrain['target_rolling_29_56_7_mean'] = train['target_29_rolling_7_mean'] \/ train['target_56_rolling_7_mean']\n\ntrain['target_rolling_28_56_28_mean'] = train['target_28_rolling_28_mean'] \/ train['target_56_rolling_28_mean']\ntrain['target_rolling_29_56_28_mean'] = train['target_29_rolling_28_mean'] \/ train['target_56_rolling_28_mean']\n\ntrain['target_rolling_28_56_90_mean'] = train['target_28_rolling_90_mean'] \/ train['target_56_rolling_90_mean']\ntrain['target_rolling_29_56_90_mean'] = train['target_29_rolling_90_mean'] \/ train['target_56_rolling_90_mean']\n\n\ntrain['target_ewm_28_56_7_mean'] = train['target_28_ewm_7_mean'] \/ train['target_56_ewm_7_mean']\ntrain['target_ewm_29_56_7_mean'] = train['target_29_ewm_7_mean'] \/ train['target_56_ewm_7_mean']\n\ntrain['target_ewm_28_56_28_mean'] = train['target_28_ewm_28_mean'] \/ train['target_56_ewm_28_mean']\ntrain['target_ewm_29_56_28_mean'] = train['target_29_ewm_28_mean'] \/ train['target_56_ewm_28_mean']\n\ntrain['target_ewm_28_56_90_mean'] = train['target_28_ewm_90_mean'] \/ train['target_56_ewm_90_mean']\ntrain['target_ewm_29_56_90_mean'] = train['target_29_ewm_90_mean'] \/ train['target_56_ewm_90_mean']\n\n\ntrain = reduce_mem_usage(train)\ngc.collect()","e688fbea":"for w in [7, 28]:\n    train[f'sell_price_rolling_{w}_mean'] = train.groupby(['id_'])['sell_price'].apply(lambda x: x.rolling(w, 1).mean())\n    train[f'sell_price_rolling_{w}_std'] = train.groupby(['id_'])['sell_price'].apply(lambda x: x.rolling(w, 1).std())\n    train[f'sell_price_rolling_{w}_max'] = train.groupby(['id_'])['sell_price'].apply(lambda x: x.rolling(w, 1).max())\n    train[f'sell_price_rolling_{w}_min'] = train.groupby(['id_'])['sell_price'].apply(lambda x: x.rolling(w, 1).min())\n    train[f'sell_price_rolling_{w}_skew'] = train.groupby(['id_'])['sell_price'].apply(lambda x: x.rolling(w, 1).skew())\n    train[f'sell_price_rolling_{w}_kurt'] = train.groupby(['id_'])['sell_price'].apply(lambda x: x.rolling(w, 1).kurt())\n\n    train[f'sell_price_ewm_{w}_mean'] = train.groupby(['id_'])['sell_price'].apply(lambda x: x.ewm(span=w).mean())\n    \n    train = reduce_mem_usage(train)","0ea8db30":"for col in train.select_dtypes(include='category').columns.tolist() + train.select_dtypes(include='object').columns.tolist():\n    train[col] = LabelEncoder().fit_transform(list(train[col].astype(str).values))\n    \ntrain = reduce_mem_usage(train)\ngc.collect()","242007c2":"train['state_event_name'] = train['state_id'].astype(str) + '__' + train['event_name_1'].astype(str)\ntrain['state_event_name'] = LabelEncoder().fit_transform(list(train['state_event_name'].astype(str).values))\n\ntrain['state_event_type'] = train['state_id'].astype(str) + '__' + train['event_type_1'].astype(str)\ntrain['state_event_type'] = LabelEncoder().fit_transform(list(train['state_event_type'].astype(str).values))\n\ntrain['cat_state']        = train['cat_id'].astype(str) + '__' + train['state_id'].astype(str)\ntrain['cat_state']        = LabelEncoder().fit_transform(list(train['cat_state'].astype(str).values))\n\ntrain['month_item_id']    = train['month'].astype(str) + '__' + train['item_id'].astype(str)\ntrain['month_item_id']    = LabelEncoder().fit_transform(list(train['month_item_id'].astype(str).values))\n\ntrain['item_event_name']  = train['item_id'].astype(str) + '__' + train['event_name_1'].astype(str)\ntrain['item_event_name']  = LabelEncoder().fit_transform(list(train['item_event_name'].astype(str).values))\n\ntrain['item_event_type']  = train['item_id'].astype(str) + '__' + train['event_type_1'].astype(str)\ntrain['item_event_type']  = LabelEncoder().fit_transform(list(train['item_event_type'].astype(str).values))\n\ntrain = reduce_mem_usage(train)\ngc.collect()","98c22274":"train = train[~train['target_365'].isnull()]\n\ntrain.drop(['id', 'date', 'wm_yr_wk'], axis=1, inplace=True)","e07e07be":"for col in train.columns:\n    train[col] = replace_inf2nan(train[col])","f815544c":"train = reduce_mem_usage(train)\ngc.collect()","cdddb124":"# hyper parameter\n\n# train = train[train['part']==0].drop(['part'], axis=1)\n\n# val_d = pd.unique(train['d'])[-28:]\n\n# val = train[train['d'].isin(val_d)]\n# train = train[~train['d'].isin(val_d)]\n\n# val.drop(['d'], axis=1, inplace=True)\n# train.drop(['d'], axis=1, inplace=True)\n\n# X_val = val.drop(['target'], axis=1)\n# y_val = val['target']\n# X_train = train.drop(['target'], axis=1)\n# y_train = train['target']\n\n# X_val = reduce_mem_usage(X_val)\n# X_train = reduce_mem_usage(X_train)\n\n# del train, val\n# gc.collect()","9adf8980":"test = train[train['part'].isin([1, 2])].drop(['part'], axis=1)\ntrain = train[train['part']==0].drop(['part'], axis=1)\n\ntest.drop(['d'], axis=1, inplace=True)\ntrain.drop(['d'], axis=1, inplace=True)\n\nX_test = test.drop(['target', 'd'], axis=1)\n\nX_train = train.drop(['target', 'd'], axis=1)\ny_train = train['target']\n\ndel train, test\ngc.collect()","4fe0b165":"# def objective(trial):\n#     num_leaves = trial.suggest_loguniform('num_leaves', 31, 100)\n#     learning_rate = trial.suggest_loguniform('learning_rate', 0.01, 1)\n#     n_estimators = trial.suggest_loguniform('n_estimators', 1000, 10000)\n#     reg_alpha = trial.suggest_loguniform('reg_alpha', 0.01, 1.0)\n#     reg_lambda = trial.suggest_loguniform('reg_lambda', 0.01, 1.0)\n\n#     tu_params = {\n#         'num_leaves': int(num_leaves),\n#         'learning_rate': learning_rate,\n#         'n_estimators': int(n_estimators),\n#         'reg_alpha': reg_alpha,\n#         'reg_lambda': reg_lambda,\n#         # constant\n#         'max_depth': -1,\n#         'objective': 'regression',\n#         'random_state': 42,\n#         'n_jobs' : -1\n#     }\n    \n#     lgb_reg = lgb.LGBMRegressor(**tu_params)\n#     lgb_reg.fit(X_fit.values, y_fit.values)\n\n#     pred = lgb_reg.predict(X_val.values)\n\n#     return np.sqrt(mean_squared_error(y_val, pred))\n\n# study = optuna.create_study()\n# study.optimize(objective, n_trials=10000)","1aa4c9ef":"lgb_params = {\n        'num_leaves': 56,\n        'learning_rate': 0.040440091240782024,\n        'n_estimators': 5993,\n        'reg_alpha': 0.1906787862387116,\n        'reg_lambda': 0.23603397158316272,\n        # constant\n        'max_depth': -1,\n        'objective': 'regression',\n        'random_state': 42,\n        'n_jobs' : -1\n    }\n\nlgb_reg = lgb.LGBMRegressor(**lgb_params)\nlgb_reg.fit(train.drop(['target'], axis=1).values, train['target'].values)","86e13d05":"submission['target'] = lgb_reg.predict(test.drop(['target'], axis=1).values)\nsubmission = submission.pivot(index='id', columns='d', values='target').reset_index()\n\nsample_submission = reduce_mem_usage(pd.read_csv('..\/input\/sample_submission.csv'))\nvalidation_rows = [row for row in sample_submission['id'] if 'validation' in row] \nvalidation = submission[submission['id'].isin(validation_rows)].dropna(axis=1)\nevaluation = submission[~submission['id'].isin(validation_rows)].dropna(axis=1)\n\nsubmission_columns = sample_submission.columns\nvalidation.columns = submission_columns\nevaluation.columns = submission_columns\n\nfinal = pd.concat([validation, evaluation])\nfinal = sample_submission[['id']].merge(final, on='id', how='left')\nfinal.to_csv('..\/submission\/submission.csv', index=False)","28b9ca47":"# Merge Datas","80cfa820":"## Lag Feature","aa014467":"At work, I deal with retail pos data similar to the data in this competition.\n\nI tried feature EDA and FE but my pc (64GB) was too small to run this notebook. So, I'll share my ideas and features.","3e5a5645":"# Make Calendar Data","b0a522dc":"# Please up vote ^^","e9d57760":"## Prices","389f8bcc":"## Snap","28cac069":"# Make Prices Data","b29102e0":"## Trim Datasets","71674af0":"# FE","3f2357e3":"## Store","c1f4e300":"# Make Base Dataset","ce0b66d0":"## Event","1af69084":"## Category","6deac445":"# Submission","243a420d":"# Modeling","4fc3d956":"## Fill Missing Values","9795025c":"# Make Validation Datasets"}}