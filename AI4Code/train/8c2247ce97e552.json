{"cell_type":{"f55e17a2":"code","6dca985d":"code","eb6ec03d":"code","bf2c9fb8":"code","24b52aac":"code","56e6caad":"code","dcfd628a":"code","b87163fd":"code","7b9a6e81":"code","63c85764":"code","bce48076":"code","3153395c":"code","35ad48f9":"code","eacd853c":"code","041b4273":"code","57e1ccc8":"code","8b54c8eb":"code","503a291b":"code","a499ec51":"code","3b9dfc2a":"code","4418d6cf":"code","22da8f29":"code","66583ad0":"code","a8171c37":"code","650c8b69":"code","f988ef7a":"code","dcabd072":"code","a61c0067":"code","5a4dc2a3":"code","4f26bc1a":"code","442c4233":"code","2bcf6677":"code","c7de8110":"code","4e2872b9":"code","47308ab2":"code","94fd2d50":"code","eaa30b7d":"code","d5225d3a":"code","b61e5d39":"code","084e62bc":"code","2e91ab94":"code","7d35f5b8":"code","b115867d":"code","b52aa13a":"code","1af35c14":"code","8acd4903":"code","56b89e7a":"code","b4f397a0":"code","e1f9ced6":"code","14f60e4e":"code","78770fc9":"code","d74db769":"code","1bb31d32":"code","f0b54a43":"code","13209c63":"code","1cce4009":"code","f8ca0034":"code","1c79394d":"code","7f3321aa":"markdown","3df33762":"markdown","23a60dfd":"markdown","2d623e87":"markdown","6959b0f1":"markdown","c43f25c9":"markdown","f23c3dd1":"markdown","7d775ce5":"markdown","dee91d7c":"markdown","2bf3f5a4":"markdown","3da295d4":"markdown","9617ba65":"markdown","076ce570":"markdown","ba804211":"markdown","a538963d":"markdown","064260ad":"markdown","059b0b58":"markdown","9a4f9f31":"markdown","88a1bf5a":"markdown","bf31715d":"markdown","ffbff5b4":"markdown","023e8cf0":"markdown"},"source":{"f55e17a2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","6dca985d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eb6ec03d":"dataset = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndataset","bf2c9fb8":"dataset.describe(include='all')","24b52aac":"dataset.isna().sum()","56e6caad":"dataset.dtypes","dcfd628a":"dataset[dataset['status'] == 'Not Placed'].describe()","b87163fd":"dataset[dataset['status'] == 'Placed'].describe()","7b9a6e81":"data = dataset.iloc[:,1:]\ndata.head()","63c85764":"sns.histplot(data['salary'])","bce48076":"#NaN in salary is someone with 'Not Placed' status. 'Not Placed' status is unemployee, so the salary is 0\ndata['salary'] = data['salary'].fillna(value=0)\ndata['salary'].isna().sum()","3153395c":"sns.histplot(data['salary'])","35ad48f9":"#Removing Outliers\nq3 = data['salary'].quantile(0.99)\ndata = data[data['salary'] < q3].reset_index(drop=True)\ndata","eacd853c":"#Histplot salary again after removing outliers\nsns.distplot(data['salary'])","041b4273":"#Get Numeric dan Object colums\nnumeric_cols = [i for i in data.columns if data[i].dtypes != 'object'] \nobject_cols = [i for i in data.columns if data[i].dtypes == 'object']\n\nprint(numeric_cols, 'len :', len(numeric_cols))\nprint(object_cols, 'len :', len(object_cols))","57e1ccc8":"for x in object_cols:\n    print(data[x].unique(), 'len :', len(data[x].unique()))","8b54c8eb":"#Labeling for object columns\ndata['gender'] = data['gender'].map({'M':0, 'F':1})\ndata['ssc_b'] = data['ssc_b'].map({'Central':0, 'Others':1})\ndata['hsc_b'] = data['hsc_b'].map({'Central':0, 'Others':1})\ndata['hsc_s'] = data['hsc_s'].map({'Commerce':0, 'Science':1, 'Arts':2})\ndata['degree_t'] = data['degree_t'].map({'Sci&Tech':0, 'Comm&Mgmt':1, 'Others':2})\ndata['workex'] = data['workex'].map({'No':0, 'Yes':1})\ndata['specialisation'] = data['specialisation'].map({'Mkt&HR':0, 'Mkt&Fin':1})\ndata['status'] = data['status'].map({'Not Placed':0, 'Placed':1})\ndata.head()","503a291b":"#plot numeric columns\nax_num = []\nf, (ax_num) = plt.subplots(5, 1, figsize=(10,30))\n\nj = 0\nfor x in numeric_cols[0:-1]:\n    sns.scatterplot(data=data, x=x, y='salary', ax=ax_num[j])\n    ax_num[j].set_title(x)\n    j += 1\n\nplt.show()","a499ec51":"#plot numeric columns\nax_obj = []\nf, (ax_obj) = plt.subplots(2, 4, figsize=(30,15))\n\ni, j = 0, 0\nfor x in object_cols:\n    sns.scatterplot(data=data, x=x, y='salary', ax=ax_obj[i,j])\n    ax_obj[i,j].set_title(x)\n    i += 1\n    if i == 2:\n        i = 0\n        j += 1\n        if j == 4:\n            break\n\nplt.show()","3b9dfc2a":"import statsmodels.api as sm","4418d6cf":"data_status_placed = data[data['status'] == 1]\ndata_status_not_placed = data[data['status'] == 0]","22da8f29":"data_status_placed.describe()","66583ad0":"data_status_not_placed.describe()","a8171c37":"x_status = data[['ssc_p', 'hsc_p', 'degree_p', 'degree_t', 'workex', 'etest_p', 'mba_p']]\ny_status = data['status']","650c8b69":"x_status_const = sm.add_constant(x_status)\nreg_status = sm.Logit(y_status, x_status_const) #Logistic Regression for categorical data 0:Not Placed and 1:Placed\nresult_status = reg_status.fit()\n\nresult_status.summary()","f988ef7a":"table_pred_status = pd.DataFrame()\ntable_pred_status['actual'] = y_status\ntable_pred_status['predict'] = np.round(result_status.predict(x_status_const))\ntable_pred_status","dcabd072":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","a61c0067":"cm_status = confusion_matrix(table_pred_status['actual'], table_pred_status['predict'])\nacc_status = accuracy_score(table_pred_status['actual'], table_pred_status['predict'])\n\nprint(cm_status)\nprint(np.round(acc_status,2))","5a4dc2a3":"data_status_placed","4f26bc1a":"sns.barplot(x=data_status_placed['specialisation'].value_counts().index.map({0:'Mkt&HR', 1:'Mkt&Fin'}), y=data_status_placed['specialisation'].value_counts())","442c4233":"data_status_placed.reset_index(drop=True)","2bcf6677":"data_status_placed.describe()","c7de8110":"from sklearn.linear_model import LinearRegression, HuberRegressor, TweedieRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error","4e2872b9":"X = data_status_placed.drop(['salary'], axis=1)\ny = data_status_placed['salary']","47308ab2":"sns.distplot(y)","94fd2d50":"x_train, x_test, y_train, y_test = train_test_split(X, np.log(y), test_size=0.2, random_state=0)","eaa30b7d":"linear_reg = LinearRegression().fit(x_train, y_train)\nlinear_reg.score(x_train, y_train)","d5225d3a":"table_score = pd.DataFrame()\ntable_score['model'] = ['Linear Regression']\ntable_score['score_train'] = linear_reg.score(x_train, y_train)\ntable_score['score_test'] = linear_reg.score(x_test, y_test)\ntable_score['mae_train'] = mean_absolute_error(np.exp(y_train), np.exp(linear_reg.predict(x_train)))\ntable_score['mse_train'] = mean_squared_error(np.exp(y_train), np.exp(linear_reg.predict(x_train)))\ntable_score['mae_test'] = mean_absolute_error(np.exp(y_test), np.exp(linear_reg.predict(x_test)))\ntable_score['mse_test'] = mean_squared_error(np.exp(y_test), np.exp(linear_reg.predict(x_test)))\ntable_score","b61e5d39":"def add_table_score(nama_model, model):\n    temp_table = pd.DataFrame()\n    temp_table['model'] = [nama_model]\n    temp_table['score_train'] = model.score(x_train, y_train)\n    temp_table['score_test'] = model.score(x_test, y_test)\n    temp_table['mae_train'] = mean_absolute_error(np.exp(y_train), np.exp(model.predict(x_train)))\n    temp_table['mse_train'] = mean_squared_error(np.exp(y_train), np.exp(model.predict(x_train)))\n    temp_table['mae_test'] = mean_absolute_error(np.exp(y_test), np.exp(model.predict(x_test)))\n    temp_table['mse_test'] = mean_squared_error(np.exp(y_test), np.exp(model.predict(x_test)))\n    return temp_table","084e62bc":"huber_reg = HuberRegressor(max_iter=1000).fit(x_train, y_train)\nhuber_reg.score(x_train, y_train)","2e91ab94":"table_score = table_score.append(add_table_score('Huber Regression', huber_reg), ignore_index=True)\ntable_score","7d35f5b8":"random_forest_reg = RandomForestRegressor(random_state=0).fit(x_train, y_train)\nrandom_forest_reg.score(x_train, y_train)","b115867d":"table_score = table_score.append(add_table_score('RandomForestRegressor', random_forest_reg), ignore_index=True)\ntable_score","b52aa13a":"gradient_boost_reg = GradientBoostingRegressor(random_state=0).fit(x_train, y_train)\ngradient_boost_reg.score(x_train, y_train)","1af35c14":"table_score = table_score.append(add_table_score('GradientBoostingRegressor', gradient_boost_reg), ignore_index=True)\ntable_score","8acd4903":"reg1 = GradientBoostingRegressor(random_state=1)\nreg2 = RandomForestRegressor(random_state=1)\nreg3 = LinearRegression()\nvote_reg = VotingRegressor(estimators=[('gb', reg1), ('rf', reg2), ('lr', reg3)]).fit(x_train, y_train)\nvote_reg.score(x_train, y_train)","56b89e7a":"table_score = table_score.append(add_table_score('VotingRegressor', vote_reg), ignore_index=True)\ntable_score","b4f397a0":"!pip install sklearn --upgrade","e1f9ced6":"twee_reg = TweedieRegressor().fit(X=x_train, y=y_train) #default power=0 is Using Normal Distribution\ntwee_reg.score(x_train, y_train)","14f60e4e":"table_score = table_score.append(add_table_score('TweedieRegressor', twee_reg), ignore_index=True)\ntable_score","78770fc9":"twee_poisson_reg = TweedieRegressor(power=1).fit(x_train, y_train) #power=1 is Using Poisson Distribution\ntwee_poisson_reg.score(x_train, y_train)","d74db769":"table_score = table_score.append(add_table_score('TweedieRegressorPoisson', twee_poisson_reg), ignore_index=True)\ntable_score","1bb31d32":"from sklearn.svm import SVR","f0b54a43":"svr_poly = SVR(kernel='linear').fit(x_train, y_train)\nsvr_poly.score(x_train, y_train)","13209c63":"table_score = table_score.append(add_table_score('SVR', svr_poly), ignore_index=True)\ntable_score","1cce4009":"def pred(x, y, ttl):\n    table_pred_salary = pd.DataFrame()\n    table_pred_salary['actual'] = np.exp(y)\n    table_pred_salary['predict'] = np.round(np.exp(twee_reg.predict(x)) \/ 1000) * 1000\n\n    print('mean_squared_error  : {}'.format(mean_squared_error(table_pred_salary['actual'], table_pred_salary['predict'])))\n    print('mean_error          : {}'.format(mean_squared_error(table_pred_salary['actual'], table_pred_salary['predict'], squared=False)))\n    print('mean_absolute_error : {}'.format(mean_absolute_error(table_pred_salary['actual'], table_pred_salary['predict'])))\n\n    xline = max(max(table_pred_salary['actual']), max(table_pred_salary['predict']))\n    yline = min(min(table_pred_salary['actual']), min(table_pred_salary['predict']))\n\n    plt.figure(figsize=(15,5))\n    sns.scatterplot(table_pred_salary['predict'], table_pred_salary['actual'])\n    plt.plot([xline, yline], [xline, yline], c='r')\n    plt.xlim(min(table_pred_salary['predict']) - 10000, min(table_pred_salary['predict']) + 75000)\n    plt.title('{} Prediction'.format(ttl), size=18)","f8ca0034":"#TRAIN \npred(x_train, y_train, 'Train')","1c79394d":"#TEST\npred(x_test, y_test, 'Test')","7f3321aa":"# 4. Play with the data conducting all statistical tests.","3df33762":"1. **Which factor influenced a candidate in getting placed?** ssc_p, hsc_p, degree_p, degree_t, workex, etest_p, mba_p (90%)\n2. **Does percentage matters for one to get placed?** Yes, when specifying independent variables, all percentage columns are used to determine a person's status as 'Placed' or 'Not Placed'.\n3. **Which degree specialization is much demanded by corporate?** *Marketing and Finance*\n4. **Salary pridict** using TweedieRegressor.","23a60dfd":"Let us make a Salary Prediction for someone's 'Placed' status because the 'Not Placed' status is 0.","2d623e87":"- LinearRegression","6959b0f1":"**Data Selection**","c43f25c9":"- GradientBoostingRegressor","f23c3dd1":"**TweedieRegressor** has good score, mae, and mse","7d775ce5":"# 3. Which degree specialization is much demanded by corporate?","dee91d7c":"- Generalized Linear Regression","2bf3f5a4":"# 1. Which factor influenced a candidate in getting placed?","3da295d4":"- VotingRegressor","9617ba65":"# 2. Does percentage matters for one to get placed?","076ce570":"# Campus Recruitment\n*Academic and Employability Factors influencing placement*\n\n**Questions**\n1. Which factor influenced a candidate in getting placed?\n2. Does percentage matters for one to get placed?\n3. Which degree specialization is much demanded by corporate?\n4. Play with the data conducting all statistical tests.","ba804211":"So, NaN in salary is someone with 'Not Placed' status. 'Not Placed' status is unemployee, so the salary is 0","a538963d":"Yes, when specifying independent variables, all percentage columns are used to determine a person's status as 'Placed' or 'Not Placed'.","064260ad":"1. *ssc_p, hsc_p, degree_p, workex, and specialisation* has a reasonably clear difference for the status of 'Not Placed' and 'Placed' (88%)\n2. *gender, ssc_p, hsc_p, degree_p, workex, and specialisation* (87%)\n3. *ssc_p, hsc_p, degree_p, degree_t, workex, etest_p, mba_p* (90%)\n4. *ssc_p, hsc_p, degree_p, etest_p, specialisation, mba_p* (87%)\n5. *ssc_p, hsc_p, degree_p, etest_p, specialisation* (83%)\n6. *all* (89%)","059b0b58":"**1. Which factor influenced a candidate in getting placed?** ssc_p, hsc_p, degree_p, degree_t, workex, etest_p, mba_p (90%)","9a4f9f31":"3. Which degree specialization is much demanded by corporate? *Marketing and Finance*","88a1bf5a":"1. sl_no : Serial Number\n2. ssc_p : Secondary Education percentage- 10th Grade\n3. ssc_b : Board of Education- Central\/ Others\n4. hsc_p : Higher Secondary Education percentage- 12th Grade\n5. hsc_b : Board of Education- Central\/ Others\n6. hsc_s : Specialization in Higher Secondary Education\n7. degree_p : Degree Percentage\n8. degree_t : Under Graduation(Degree type)- Field of degree education\n9. workex : Work Experience\n10. etest_p : Employability test percentage ( conducted by college)\n11. specialisation : Post Graduation(MBA)- Specialization\n12. mba_p : MBA percentage\n13. status : Status of placement- Placed\/Not placed","bf31715d":"- HuberRegressor","ffbff5b4":"- RandomForestRegressor","023e8cf0":"# Conclusion"}}