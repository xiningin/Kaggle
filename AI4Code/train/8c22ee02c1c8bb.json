{"cell_type":{"6a1b6606":"code","85f66380":"code","0d73a4a2":"code","a88a6282":"code","cf675bc6":"code","3e4c3286":"code","75f8b520":"code","7e7a6823":"code","2c9e3fbf":"code","c9ce42d8":"code","a0fe50fe":"code","863f00e2":"code","454b6e49":"code","85253095":"code","86d35676":"code","97dab2f9":"code","930a8f61":"code","7d1e0b25":"code","4f7a2cbb":"markdown","880b61a0":"markdown","fad67b47":"markdown","1c9a9223":"markdown","83d7f796":"markdown","e29d0edb":"markdown","ee308447":"markdown","3a849e4b":"markdown","b9578ddd":"markdown","32db46ef":"markdown","7cf9f042":"markdown","77fd3fd0":"markdown","fbdba9b0":"markdown"},"source":{"6a1b6606":"import pandas as pd\nimport numpy as np\nimport multiprocessing as mp\nimport geopy.distance\nimport csv\nfrom datetime import datetime, timezone\nfrom tqdm import tqdm\n\ntqdm.pandas()\n# %load_ext nb_black","85f66380":"taxi = pd.read_csv(\n    \"..\/input\/train.csv\",\n    sep=\",\",\n    low_memory=True,\n#             skiprows=lambda i: i % 10 != 0,  # Use only 1 of each n\n)","0d73a4a2":"taxi[\"YEAR\"] = taxi.TIMESTAMP.apply(lambda x: datetime.fromtimestamp(x).year)\ntaxi[\"MONTH\"] = taxi.TIMESTAMP.apply(lambda x: datetime.fromtimestamp(x).month)\ntaxi[\"DAY\"] = taxi.TIMESTAMP.apply(lambda x: datetime.fromtimestamp(x).day)\ntaxi[\"HOUR\"] = taxi.TIMESTAMP.apply(lambda x: datetime.fromtimestamp(x).hour)\ntaxi[\"WEEKDAY\"] = taxi.TIMESTAMP.apply(\n    lambda x: datetime.fromtimestamp(x).weekday()\n)","a88a6282":"taxi.TRIP_ID.count()","cf675bc6":"taxi = taxi.drop_duplicates()","3e4c3286":"taxi.TRIP_ID.count()","75f8b520":"taxi = taxi[taxi.MISSING_DATA == False]","7e7a6823":"taxi.TRIP_ID.count()","2c9e3fbf":"taxi = taxi[taxi.POLYLINE != \"[]\"]","c9ce42d8":"taxi.TRIP_ID.count()","a0fe50fe":"taxi.reset_index(drop=True, inplace=True)","863f00e2":"def map_trip_start(df_in):\n    df_out = pd.DataFrame()\n    df_out[\"TRIP_START\"] = df_in[\"POLYLINE\"].progress_map(lambda x: repr(eval(x)[0]))\n    return df_out","454b6e49":"p = mp.Pool(processes=mp.cpu_count())\npool_results = p.map(map_trip_start, np.array_split(taxi, mp.cpu_count()))\np.close()\np.join()\n\n# merging parts processed by different processes\nnew_columns = pd.concat(pool_results, axis=0, ignore_index=True)\n\n# merging newly calculated columns to taxi\ntaxi = pd.concat([taxi, new_columns], axis=1)","85253095":"def process_polyline(p):\n    p = eval(p)\n    if len(p) > 1:\n        trip_distance = 0\n        top_speed = 0\n        for i in range(len(p) - 1):\n            distance = geopy.distance.distance(p[i], p[i + 1]).km\n            trip_distance += distance\n            speed = distance \/ 15 * 3600\n            if speed > top_speed:\n                top_speed = speed\n        trip_time = (len(p) - 1) * 15 \/ 60\n        avg_speed = trip_distance \/ trip_time * 60\n        return trip_distance, trip_time, avg_speed, top_speed\n    else:\n        return np.NaN, np.NaN, np.NaN, np.NaN","86d35676":"print(\n    \"Trip distance: {:>5.1f} km\\n\"\n    \"Trip time:     {:>5.1f} min\\n\"\n    \"Average speed: {:>5.1f} km\/h\\n\"\n    \"Top speed:     {:>5.1f} km\/h\".format(*process_polyline(taxi.POLYLINE[0]))\n)","97dab2f9":"def map_polyline(df_in):\n    df_out = pd.DataFrame()\n    df_out[\"TRIP_DISTANCE\"], df_out[\"TRIP_TIME\"], df_out[\n        \"AVERAGE_SPEED\"\n    ], df_out[\"TOP_SPEED\"] = zip(\n        *df_in[\"POLYLINE\"].progress_map(process_polyline)\n    )\n    return df_out","930a8f61":"p = mp.Pool(processes=mp.cpu_count())\npool_results = p.map(map_polyline, np.array_split(taxi, mp.cpu_count()))\np.close()\np.join()\n\n# merging parts processed by different processes\nnew_columns = pd.concat(pool_results, axis=0, ignore_index=True)\n\n# merging newly calculated columns to taxi\ntaxi = pd.concat([taxi, new_columns], axis=1)","7d1e0b25":"taxi.to_csv(\"train_extended.csv.zip\", index=None, compression=\"zip\")","4f7a2cbb":"# Import libraries","880b61a0":"# Cleaning","fad67b47":"## Deleting duplicates","1c9a9223":"# Extract date components from timestamp","83d7f796":"Save results as processing polylines are very time consuming","e29d0edb":"# Extract trip start\n\nExtract the first pair of coordinates as [longitude, latitude]","ee308447":"## Deleting missing data","3a849e4b":"# Calculate trip distance, trip time, average speed and top speed per trip\n\nThe trip distance is the sum of all the distances between each two correlative pairs of coordinates in kilometers.\n\nEach pair of coordinates are separate 15 seconds in time. Then, the trip time in minutes will be: (number of pair of coordinates -1) x 15 seconds x 1 minute \/ 60 seconds.\n\nThe average speed is simply the trip distance divided by the trip time in hours. The result is in km\/h.\n\nThe top speed is the greatest speed of all the sections of the trip. The speed of one section is calculated as the distance of the section divided by 15 seconds and converted to km\/h.","b9578ddd":"Testing on one specific trip:","32db46ef":"# Load data","7cf9f042":"# Introduction\n\nThis kernel analyses and processes Taxi Trajectory Data and add the following fields:\n\n    TRIP_DISTANCE: (float): It contains the total geodesic distance calculated from all consecutive pairs of coordinates.\n\n    TRIP_TIME: (float): It contains the total time calculated from the number of pairs of coordinates, knowing that there is 15 seconds of difference between each pair of coordinates.\n\n    TRIP_START: (string): It contains the first pair of coordinates of POLYLINE.\n\n    AVERAGE_SPEED: (float): It contains the average speed calculated from trip distance and trip time.\n\n    TOP_SPEED: (float): It contains the top speed calculated from distances and time of all pairs of coordinates.\n\n    YEAR: (integer): It contains the year of the timestamp.\n\n    MONTH: (integer): It contains the month of the timestamp.\n\n    DAY: (integer): It contains the day of the timestamp.\n\n    HOUR: (integer): It contains the hour of the timestamp.\n\n    WEEKDAY: (integer): It contains the day of the week of the timestamp.","77fd3fd0":"## Deleting void polylines","fbdba9b0":"## Reseting index"}}