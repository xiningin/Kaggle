{"cell_type":{"603c369d":"code","f0d2aac7":"code","8f595548":"code","62bf8792":"code","7298e625":"code","9e54aba3":"code","500607d1":"code","6b923079":"code","882be93a":"code","44602f58":"code","012b4b38":"code","3b39e36f":"code","1b50805e":"code","1aaffdd4":"code","b4f947f4":"code","ce5de3b9":"code","42f3f3ac":"code","f83b9826":"code","48d76fe9":"code","6469f30a":"code","359cf1e9":"code","59584473":"code","b2672b9d":"code","f7546f04":"code","0dba7f47":"code","6e93d13c":"code","cff795f8":"code","493be9fc":"code","22f36b63":"code","dd014f1f":"code","d93364d9":"code","8a04565d":"code","0575891e":"code","db9d058b":"code","d5efc4e4":"code","4849491e":"code","1a674d79":"code","2b8e1888":"code","79804c9b":"code","4fe7d3d6":"code","50c9bfad":"code","62530d17":"code","caaf5098":"code","ba0aa8eb":"code","b8407f55":"code","92c45c11":"code","4bf6cdc6":"code","eabc6ac2":"code","c584e66d":"code","408844b1":"code","db8c2b36":"code","159ac7f9":"markdown","aa636c2a":"markdown"},"source":{"603c369d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))","f0d2aac7":"#dataset read operation\n#read_csv function is required to read the data.\nfile=pd.read_csv('..\/input\/winequality-red.csv')\nfile.head()","8f595548":"#count of columns\nlen(file.columns)","62bf8792":"# columns names\nfile.columns","7298e625":"#count value of gender column\nfile['quality'].value_counts()","9e54aba3":"#to know the na values in each column\nfile.isna().sum() #no na values","500607d1":"#information about file\nfile.info()","6b923079":"#median\nfile.median()","882be93a":"file.var()","44602f58":"file.std()","012b4b38":"file.skew()","3b39e36f":"file.kurtosis()","1b50805e":"file.hist()","1aaffdd4":"file.boxplot()","b4f947f4":"#scatter plot\nimport seaborn as sns\nsns.pairplot(file)","ce5de3b9":"# Correlation matrix \nfile.corr()","42f3f3ac":"bins = (2,6.5,8)\ngroup_names=['bad','good']\nfile['quality']=pd.cut(file['quality'],bins=bins,labels=group_names)","f83b9826":"file.head()","48d76fe9":"#Correlation matrix \nfile.corr()","6469f30a":"# Consider the inpur varabile as X and Output variable as Y \nX = file[['fixed acidity','citric acid','residual sugar','sulphates','alcohol']]\nY = file[['quality']]\nprint(X.shape)\nprint(Y.shape)\nprint(X)\nprint(Y)","359cf1e9":"norm=(X-X.min())\/(X.max()-X.min())\nnorm","59584473":"#KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors=5)  \nclassifier.fit(norm,Y)","b2672b9d":"#prediction\nknnpred= classifier.predict(norm)\nknnpred","f7546f04":"#confusion matrix\nfrom sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(Y, knnpred))","0dba7f47":"#accuracy\nfrom sklearn.metrics import accuracy_score \nAccuracy_Score = accuracy_score(Y, knnpred)\nAccuracy_Score","6e93d13c":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nmodel= GaussianNB()\nmodel.fit(norm,Y)","cff795f8":"# Predicting the Model\nnbpred = model.predict(norm)\nnbpred","493be9fc":"##Evaluating the Algorithm (confusion matrix)\nfrom sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(Y, nbpred))","22f36b63":"#accuracy\nfrom sklearn.metrics import accuracy_score \nAccuracy_Score = accuracy_score(Y, nbpred)\nAccuracy_Score","dd014f1f":"#decision tree\n# Fitting Decision Tree Classification to the Training set\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(norm, Y)","d93364d9":"dtpred=classifier.predict(norm)\ndtpred","8a04565d":"#confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(Y,dtpred)\ncm","0575891e":"#accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(Y,dtpred)\naccuracy","db9d058b":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(norm,Y)","d5efc4e4":"#prediction\nrfpred=classifier.predict(norm)\nrfpred","4849491e":"#confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(Y,rfpred)\ncm","1a674d79":"#accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(Y,rfpred)\naccuracy","2b8e1888":"#SVM model\nfrom sklearn.svm import SVC\ncls=SVC(kernel='linear',random_state=0)\ncls.fit(norm,Y)","79804c9b":"#prediction\nsvmpred=cls.predict(norm)\nsvmpred","4fe7d3d6":"#confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(Y,svmpred)\ncm","50c9bfad":"#accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(Y,svmpred)\naccuracy","62530d17":"#SVM non-linear kernel method\nfrom sklearn.svm import SVC\ncls=SVC(kernel='sigmoid',random_state=0)\ncls.fit(norm,Y)","caaf5098":"#predict\nsvmpred1=cls.predict(norm)\nsvmpred1","ba0aa8eb":"#confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(Y,svmpred1)\ncm","b8407f55":"#accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(Y,svmpred1)\naccuracy","92c45c11":"#to build the logistic regression model on train dataset\nfrom sklearn.linear_model import LogisticRegression  \nregressor = LogisticRegression()  \nlogit=regressor.fit(norm, Y)","4bf6cdc6":"print(logit.intercept_,logit.coef_) ","eabc6ac2":"np.exp(logit.intercept_,logit.coef_)","c584e66d":"#prediction\nlnpred = logit.predict(norm)\nlnpred ","408844b1":"#package to build confusion matrix\nfrom sklearn import metrics\ncm = metrics.confusion_matrix(Y , lnpred)\nprint(cm)","db8c2b36":"#accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(Y,lnpred)\naccuracy","159ac7f9":"                                         wine quality division as good and bad","aa636c2a":"**conclusion: accuracy of desition tree: 100%, accuracy of Random Forest: 99.31%, accuracy of SVM of linear kernel: 86.42%,  accuracy of SVM of non-linear kernel: 86.42% , accuracy of KNN: 91.24% , accuracy of NB: 87.05% ,accuracy of logistic regression: 86.42%"}}