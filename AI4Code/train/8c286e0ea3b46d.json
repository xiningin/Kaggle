{"cell_type":{"0f858a32":"code","01569a92":"code","a53109b3":"code","eaf38498":"code","4e1a3bd4":"code","bef5d678":"code","f40d46bc":"code","9b863f20":"code","51444a3d":"code","837946e0":"code","ea9f75ea":"code","b5e42247":"code","d8fc91f5":"code","42aa4d45":"code","f4fffbe5":"code","cd1c7cae":"code","595e26b5":"code","68e73beb":"code","77a3d20c":"code","a6cafcfd":"code","de8686cf":"code","5190a261":"code","39e6248d":"code","b017abe4":"markdown","70bd9b47":"markdown","86f60674":"markdown","fcba967c":"markdown","101d3010":"markdown","1af4ea85":"markdown","ec89e2c9":"markdown","62e94599":"markdown","0d55edad":"markdown","ec28f93f":"markdown","ac3e9412":"markdown","4c7215a0":"markdown"},"source":{"0f858a32":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","01569a92":"import json\nimport math\nimport cv2\nimport PIL\nfrom PIL import Image\nimport numpy as np\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.applications import DenseNet121\nfrom tensorflow.keras.callbacks import Callback, ModelCheckpoint\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nimport tensorflow as tf\nfrom tqdm import tqdm\n%matplotlib inline","a53109b3":"import os\n# There are two ways to load the data from the PANDA dataset:\n# Option 1: Load images using openslide\nimport openslide\n# Option 2: Load images using skimage (requires that tifffile is installed)\nimport skimage.io\n# General packages\nfrom IPython.display import display\n# Plotly for the interactive viewer (see last section)\nimport plotly.graph_objs as go\n# read images\nimport rasterio","eaf38498":"import gc\nfrom random import randint","4e1a3bd4":"# from kaggle_datasets import KaggleDatasets","bef5d678":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","f40d46bc":"AUTO = tf.data.experimental.AUTOTUNE\nBATCH_SIZE = 36 * strategy.num_replicas_in_sync\nEPOCHS = 20\n# Data access\n# GCS_DS_PATH = KaggleDatasets().get_gcs_path()","9b863f20":"train_df = pd.read_csv('..\/input\/prostate-cancer-grade-assessment\/train.csv')\ntest_df = pd.read_csv('..\/input\/prostate-cancer-grade-assessment\/test.csv')\nprint(train_df.shape)\nprint(test_df.shape)\ntrain_df.head()","51444a3d":"test_df.head()","837946e0":"gc.collect()","ea9f75ea":"def preprocess_image(image_path, desired_size=224):\n    biopsy = openslide.OpenSlide(image_path)\n    im = np.array(biopsy.get_thumbnail(size=(desired_size,desired_size)))\n    im = Image.fromarray(im)\n    im = im.resize((desired_size,desired_size)) \n    im = np.array(im) \/ 255\n    return im","b5e42247":"%%time\n\n# get the number of training images from the target\\id dataset\n# N = train_df.shape[0] # run on all data\nN = 5650 # run on sample\n# create an empty matrix for storing the images\nx_train = np.empty((N, 224, 224, 3), dtype=np.float32)\n# loop through the images from the images ids from the target\\id dataset\n# then grab the cooresponding image from disk, pre-process, and store in matrix in memory\nfor i, image_id in enumerate(tqdm(train_df['image_id'])):\n    x_train[i, :, :, :] = preprocess_image(\n        f'..\/input\/prostate-cancer-grade-assessment\/train_images\/{image_id}.tiff'\n    )\n    # if sampling\n    if i >= N-1:\n        break","d8fc91f5":"if os.path.exists(f'..\/input\/prostate-cancer-grade-assessment\/test_images'):\n    # do the same thing as the last cell but on the test\\holdout set\n    N = test_df.shape[0]\n    x_test = np.empty((N, 224, 224, 3), dtype=np.float32)\n    for i, image_id in enumerate(tqdm(test_df['image_id'])):\n        x_test[i, :, :, :] = preprocess_image(\n            f'..\/input\/prostate-cancer-grade-assessment\/test_images\/{image_id}.tiff'\n        )","42aa4d45":"# pre-processing the target (i.e. one-hot encoding the target)\ny_train = pd.get_dummies(train_df['isup_grade']).values.astype(np.int32)[0:N]\n\nprint(x_train.shape)\nprint(y_train.shape)\nif os.path.exists('..\/input\/prostate-cancer-grade-assessment\/test_images'):\n    print(x_test.shape)","f4fffbe5":"%%time\n\n# Further target pre-processing\n\n# Instead of predicting a single label, we will change our target to be a multilabel problem; \n# i.e., if the target is a certain class, then it encompasses all the classes before it. \n# E.g. encoding a class 4 retinopathy would usually be [0, 0, 0, 1], \n# but in our case we will predict [1, 1, 1, 1]. For more details, \n# please check out Lex's kernel.\n\ny_train_multi = np.empty(y_train.shape, dtype=y_train.dtype)\ny_train_multi[:, 5] = y_train[:, 5]\n\nfor i in range(4, -1, -1):\n    y_train_multi[:, i] = np.logical_or(y_train[:, i], y_train_multi[:, i+1])\n\nprint(\"Original y_train:\", y_train.sum(axis=0))\nprint(\"Multilabel version:\", y_train_multi.sum(axis=0))","cd1c7cae":"x_train, x_val, y_train, y_val = train_test_split(\n    x_train, y_train_multi, \n    test_size=0.40, \n    random_state=2020\n)","595e26b5":"def convert(image, label):\n    image = tf.image.convert_image_dtype(image, tf.float32) # Cast and normalize the image to [0,1]\n    return image, label\n\ndef flip_aug(image,label):\n    image,label = convert(image, label)\n    image = tf.image.convert_image_dtype(image, tf.float32) # Cast and normalize the image to [0,1]\n    image = tf.image.flip_left_right(image)\n    return image,label\n\ndef rotate_aug(image,label):\n    image,label = convert(image, label)\n    image = tf.image.convert_image_dtype(image, tf.float32) # Cast and normalize the image to [0,1]\n    image = tf.image.rot90(image)\n    return image,label\n\ndef crop_aug(image,label):\n    image,label = convert(image, label)\n    image = tf.image.convert_image_dtype(image, tf.float32) # Cast and normalize the image to [0,1]\n    image = tf.image.central_crop(image, central_fraction=0.8)\n    return image,label\n\n\ndef pad_light_aug(image,label):\n    image,label = convert(image, label)\n    image = tf.image.convert_image_dtype(image, tf.float32) # Cast and normalize the image to [0,1]\n    image = tf.image.resize_with_crop_or_pad(image, 230, 230) # Add 6 pixels of padding\n    image = tf.image.random_crop(image, size=[224, 224, 3]) # Random crop back to 224x224x3\n    image = tf.image.random_brightness(image, max_delta=0.5) # Random brightness\n    return image,label","68e73beb":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_train, y_train))\n    .repeat()\n    .map(flip_aug, num_parallel_calls=AUTO)\n    .map(rotate_aug, num_parallel_calls=AUTO)\n    .map(crop_aug, num_parallel_calls=AUTO)\n    .map(pad_light_aug, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_val, y_val))\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\nif os.path.exists('..\/input\/prostate-cancer-grade-assessment\/test_images'):\n    test_dataset = (\n        tf.data.Dataset\n        .from_tensor_slices(x_test)\n        .batch(BATCH_SIZE)\n    )","77a3d20c":"def build_model():\n    densenet = DenseNet121(\n    weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5',\n    include_top=False,\n    input_shape=(224,224,3)\n    )\n    model = Sequential()\n    model.add(densenet)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.80))\n    model.add(layers.Dense(6, activation='sigmoid'))\n    return model","a6cafcfd":"with strategy.scope():\n    model = build_model()\n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(lr=0.00010509613402110064),\n        metrics=['accuracy']\n    )\n\nmodel.summary()","de8686cf":"n_steps = x_train.shape[0] \/\/ BATCH_SIZE\n\ntrain_history = model.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=EPOCHS\n)","5190a261":"history_df = pd.DataFrame(train_history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['accuracy', 'val_accuracy']].plot()","39e6248d":"if os.path.exists('..\/input\/prostate-cancer-grade-assessment\/test_images'):\n    y_test = model.predict(test_dataset)\n    y_test = y_test > 0.37757874193797547\n    y_test = y_test.astype(int).sum(axis=1) - 1\n    test_df['isup_grade'] = y_test\n    test_df.to_csv('submission.csv',index=False)\nelse: # if test is not available, just submit some random values\n    rand_preds = []\n    for i in range(len(test_df)):\n        rand_preds.append(randint(0,5))\n    test_df['isup_grade'] = rand_preds\n    test_df = test_df[[\"image_id\",\"isup_grade\"]]\n    test_df.to_csv('submission.csv',index=False)","b017abe4":"# Resources: \n\nhttps:\/\/www.kaggle.com\/xhlulu\/aptos-2019-densenet-keras-starter\n\nhttps:\/\/www.kaggle.com\/wouterbulten\/getting-started-with-the-panda-dataset\n\nhttps:\/\/www.kaggle.com\/yeayates21\/densenet-keras-starter-fork-v2\n\nhttps:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-xlm-roberta\n\nhttps:\/\/www.tensorflow.org\/tutorials\/images\/data_augmentation\n\nhttps:\/\/github.com\/tensorflow\/tensorflow\/pull\/20753\n\nhttps:\/\/stackoverflow.com\/questions\/57329274\/variable-was-not-created-in-the-distribution-strategy-scope-with-costum-layer","70bd9b47":"# Imports","86f60674":"# Variable Constants","fcba967c":"# Train Model","101d3010":"# Training Plots","1af4ea85":"# Create Model","ec89e2c9":"# Submission","62e94599":"# Image Loading & Pre-processing","0d55edad":"# Create Image Augmentation Generator","ec28f93f":"# Train & Validation Split","ac3e9412":"# Config Settings","4c7215a0":"# Target & ID Loading"}}