{"cell_type":{"4a5fd7af":"code","d1ad75c0":"code","afd64d12":"code","df190567":"code","e83ebe21":"code","eab2abdb":"code","e8b27c7a":"code","6c685ad9":"code","2e033985":"code","bab5222e":"code","23b234a8":"code","a4644158":"code","3ce4fb78":"code","590c8f15":"code","6bf684fe":"code","da082311":"code","a2d865bc":"code","a71e9d79":"code","3b5c2158":"code","8805694b":"code","c8db7c6c":"code","3a1c7b77":"code","760de68b":"code","963f08ad":"code","9fa64ab6":"code","2323e082":"code","5127b834":"code","3bbc7916":"code","ffa96678":"markdown","71d6dc3b":"markdown","9581b2f7":"markdown","c3bc5f1d":"markdown","34080c16":"markdown","6a0acaad":"markdown","f19b7298":"markdown","246c4165":"markdown"},"source":{"4a5fd7af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.datasets import fashion_mnist\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential, load_model, Model\nfrom keras.layers import Dense, Dropout, Flatten, Input\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D, UpSampling2D\nfrom keras.utils.np_utils import to_categorical\nfrom scipy import spatial\nfrom operator import itemgetter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1ad75c0":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","afd64d12":"(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data();\nX_train = X_train.reshape(-1, 28, 28, 1)\nX_test = X_test.reshape(-1, 28, 28, 1)\nX_train = X_train \/ 255\nX_test = X_test \/ 255","df190567":"categories = [\"T-shirt\/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\", \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]\nnb_cat = 10","e83ebe21":"y_train_cat = to_categorical(y_train, nb_cat)\ny_test_cat = to_categorical(y_test, nb_cat)","eab2abdb":"plt.figure(figsize=(20,20))\nfor i in range(0,50) :\n    plt.subplot(10,10,i+1)\n    plt.axis('off')\n    plt.imshow(X_train[i], cmap=\"gray_r\")\n    plt.title(categories[y_train[i]])","e8b27c7a":"model = Sequential()\nmodel.add(Conv2D(64, 3, input_shape=(28, 28, 1), activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(32, 3, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(16, 3, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(nb_cat, activation='softmax'))\nmodel.summary()","6c685ad9":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","2e033985":"train = model.fit(X_train, y_train_cat, validation_data=(X_test, y_test_cat), epochs=50, batch_size=256, verbose=1)","bab5222e":"plot_scores(train)","23b234a8":"model.evaluate(X_test, y_test_cat)","a4644158":"predict_res = model.predict(X_test) \nclasses_res = np.argmax(predict_res,axis=1)","3ce4fb78":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (classes_res[j] != y_test[j]) & (i<20):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (categories[classes_res[j]], categories[y_test[j]]))\n        i+=1","590c8f15":"input_img = Input(shape=(28,28,1))\nencoded = Conv2D(64, (3,3), input_shape=(28, 28, 1), activation='relu', padding='same', name=\"e1\")(input_img)\nencoded = Dropout(0.2, name=\"e2\")(encoded)\nencoded = MaxPooling2D(pool_size=(2, 2), name=\"e3\")(encoded)\nencoded = Conv2D(32, (3,3), activation='relu', padding='same', name=\"e4\")(encoded)\nencoded = Dropout(0.2, name=\"e5\")(encoded)\nencoded = MaxPooling2D(pool_size=(2, 2), name=\"e6\")(encoded)\nencoded = Conv2D(16, (3,3), activation='relu', padding='same', name=\"e7\")(encoded)\n\ndecoded = Conv2D(32, (3,3), activation='relu', padding='same', name=\"d1\")(encoded)\ndecoded = UpSampling2D(name=\"d2\")(decoded)\ndecoded = Conv2D(64, (3,3), activation='relu', padding='same', name=\"d3\")(decoded)\ndecoded = UpSampling2D(name=\"d4\")(decoded)\ndecoded = Conv2D(1, (3,3), activation='relu', padding='same', name=\"d5\")(decoded)\n\nautoencoder = Model(input_img, decoded)\nautoencoder.summary()","6bf684fe":"encoder = Model(input_img, encoded)\nencoder.summary()","da082311":"encoded_input = Input(shape=(7, 7, 16))\ndecoder_layer = autoencoder.get_layer('d1')(encoded_input)\ndecoder_layer = autoencoder.get_layer('d2')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d3')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d4')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d5')(decoder_layer)\n\ndecoder = Model(encoded_input, decoder_layer)\ndecoder.summary()","a2d865bc":"autoencoder.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","a71e9d79":"autoencoder.fit(X_train, X_train,\n                epochs=20,\n                batch_size=256,\n                shuffle=True,\n                validation_data=(X_test, X_test))\nencoded_imgs = encoder.predict(X_test)\ndecoded_imgs = decoder.predict(encoded_imgs)","3b5c2158":"fig, ax = plt.subplots(nrows=2, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    for indice2, col in enumerate(row):\n        if indice == 0:\n            col.imshow(X_test[indice2].reshape(28,28,1))\n        else:\n            col.imshow(decoded_imgs[indice2].reshape(28,28,1))\n\nplt.show()","8805694b":"plt.imshow(X_test[0].reshape(28,28,1))\nplt.gray()\nplt.show()","c8db7c6c":"encoded_imgs = encoded_imgs.reshape(encoded_imgs.shape[0], -1)\nimg_to_find = encoded_imgs[10]","3a1c7b77":"def custom_cosine_sim(a,b):\n    return np.dot(a, b) \/ ( np.linalg.norm(a) * np.linalg.norm(b))","760de68b":"from scipy import spatial\ncosine_list = []\nfor index_image,xt in enumerate(encoded_imgs):\n    result = 1 - spatial.distance.cosine(img_to_find, xt)\n    cosine_list.append(dict({'res':result, 'i':index_image}))","963f08ad":"from operator import itemgetter\ncosine_list.sort(key=itemgetter('res'), reverse=True)","9fa64ab6":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    row.imshow(X_test[cosine_list[indice]['i']].reshape(28,28,1))\n\nplt.show()","2323e082":"from scipy import spatial\ncosine_list = []\nfor index_image,xt in enumerate(encoded_imgs):\n    result = 1 - spatial.distance.cosine(img_to_find, xt)\n    cosine_list.append(dict({'res':result, 'i':index_image}))","5127b834":"from operator import itemgetter\ncosine_list.sort(key=itemgetter('res'), reverse=False)","3bbc7916":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    row.imshow(X_test[cosine_list[indice]['i']].reshape(28,28,1))\n\nplt.show()","ffa96678":"# Autoencoder","71d6dc3b":"Recherche du moins ressemblant","9581b2f7":"## D\u00e9finition de fonctions utiles","c3bc5f1d":"Visualisation des donn\u00e9es  : ","34080c16":"visualisation des erreurs","6a0acaad":"Recherche du plus resssemblant","f19b7298":"Formalisation des donn\u00e9es du dataset","246c4165":"# Cat\u00e9gorisation"}}