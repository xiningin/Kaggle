{"cell_type":{"cf0348bd":"code","976566cb":"code","beed68e5":"code","403f8228":"code","13f06ad5":"code","37f217bd":"code","7f8a9261":"code","b3128f7c":"code","eb5bd1d6":"code","a1c6a991":"code","91f4370e":"code","317262e0":"code","c04c6837":"code","ad21170b":"code","9802e87e":"code","49553838":"code","5569efa8":"code","f54cc78c":"code","7bb7a7d0":"code","b8e58960":"code","65c26f0d":"code","5ef388cd":"code","ee8b9fd8":"code","136c0423":"code","21326d2c":"code","22ebc131":"code","46710a89":"code","c972b62a":"code","4f945f05":"code","e8b00904":"code","51f5c419":"code","2c9b0ef4":"code","ba2a9950":"code","c3aa0418":"code","5d79e67d":"code","1c9614ff":"code","705acce4":"code","5a28997c":"code","10f17fb4":"code","800b2eef":"code","cad2c507":"code","35803fe4":"code","0d6e2bf9":"code","396e90a9":"code","a26a15b2":"code","e762d2ce":"code","cb7888bf":"code","fcd981a5":"code","90cde565":"code","71dfa2ba":"code","977257fa":"code","469672d1":"code","732f6ade":"code","203d9e5f":"code","325e309a":"code","6cf0192b":"code","8aa31aed":"code","837ad717":"code","16f67472":"code","176cc4f2":"code","1c0af572":"code","7331e5cc":"code","9a146468":"code","f8d715b6":"code","0b9dc1cf":"code","be3ccd2b":"code","5825e0d1":"code","9e72ebaa":"code","82bbddc2":"code","8c79a05f":"code","a8796b92":"code","3fb6148e":"code","2a39beff":"code","4005ab73":"code","a4eff71d":"code","f5ba0217":"code","edfd9c4b":"code","fa311f43":"code","85a09623":"code","d4f3f325":"code","fb83afe9":"code","1934cb9e":"markdown","341a7f1a":"markdown","11228fec":"markdown","7a758263":"markdown","d5743be8":"markdown","7f3983f3":"markdown","e2c1d041":"markdown","a7081a16":"markdown","f3af6aec":"markdown","fcd2d3ad":"markdown","d35451bb":"markdown","e3c61aaf":"markdown","6788332d":"markdown","f8117eed":"markdown","cebbb6d9":"markdown","e1afc01c":"markdown","bf9e765f":"markdown","0f0dd6fc":"markdown","4b891d0d":"markdown","c7952623":"markdown","2965940e":"markdown","fb5dc43f":"markdown","9113408e":"markdown","e58c2921":"markdown","0cb4d32e":"markdown","73b4d479":"markdown","5354ec05":"markdown","aa3cbbe3":"markdown","caf15c8c":"markdown","35bb78e3":"markdown","6498420b":"markdown","ad1736e0":"markdown","2efcc6b6":"markdown","3e0f5b37":"markdown","46426f29":"markdown","b7b9131c":"markdown","da597817":"markdown","b1e42778":"markdown","27686008":"markdown","75f7cf2e":"markdown","676e257f":"markdown","88a09804":"markdown","54e14de6":"markdown","96c8d4a8":"markdown","cbc72455":"markdown","70a0bc91":"markdown","236f3f68":"markdown","8551741a":"markdown","2d7fee15":"markdown","37aaaf7a":"markdown"},"source":{"cf0348bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import train_test_split,GridSearchCV, StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","976566cb":"dftrain=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndftest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = dftest[\"PassengerId\"]\ndf_train = dftrain.copy()\ndf_test=dftest.copy()","beed68e5":"df_train.columns","403f8228":"df_train.head()","13f06ad5":"df_train.describe().T","37f217bd":"df_train.info()","7f8a9261":"def bar_plot(variable):\n    var=df_train[variable]\n    var_value=var.value_counts()\n    plt.figure(figsize=(9,3))\n    plt.bar(var_value.index,var_value)\n    plt.xticks(var_value.index,var_value.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n{}:\".format(variable,var_value))","b3128f7c":"category1= [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"Name\", \"Ticket\", \"SibSp\", \"Parch\"]\nfor i in category1:\n    bar_plot(i)","eb5bd1d6":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor i in category2:\n    print(\"{} \\n \".format(df_train[i].value_counts()))","a1c6a991":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(df_train[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","91f4370e":"numericvar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor i in numericvar:\n    plot_hist(i)","317262e0":"# Pclass - Survived\ndf_train[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","c04c6837":"# Sex - Survived\ndf_train[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","ad21170b":"# Sibsp - Survived\ndf_train[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","9802e87e":"# Parch - Survived\ndf_train[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","49553838":"def detect_outliers(df,features):\n    outlier_indeces=[]\n    \n    for c in features:\n        #Q1\n        Q1=np.percentile(df[c],25)\n    \n        #Q3\n        Q3=np.percentile(df[c],75)\n    \n        #IQR\n        IQR=Q3-Q1\n    \n        #Outlier step\n        outlier_step=IQR*1.5\n    \n        #Detect outlier and their indices\n        outlier_list_col=df[(df[c]<Q1-outlier_step) | (df[c]> Q3 +outlier_step)].index\n                                                   \n        #store indeces                                               \n        outlier_indeces.extend(outlier_list_col)\n    outlier_indeces= Counter(outlier_indeces)\n    multiple_outliers = list(i for i, v in outlier_indeces.items() if v>2)\n\n    return multiple_outliers\n","5569efa8":"df_train.loc[detect_outliers(df_train,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","f54cc78c":"# drop outliers\ndf_train=df_train.drop(detect_outliers(df_train,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","7bb7a7d0":"df_train_len= len(df_train)\ndf_train= pd.concat([df_train,df_test],axis=0).reset_index(drop=True)","b8e58960":"df_train.head()","65c26f0d":"df_train.isnull().sum()","5ef388cd":"df_train[df_train[\"Embarked\"].isnull()]","ee8b9fd8":"df_train.boxplot(column=\"Fare\",by=\"Embarked\");","136c0423":"df_train[\"Embarked\"]=df_train[\"Embarked\"].fillna(\"C\")","21326d2c":"df_train[df_train[\"Fare\"].isnull()]","22ebc131":"df_train[\"Fare\"][df_train[\"Pclass\"]==3].mean()","46710a89":"df_train.Fare=df_train.Fare.fillna(df_train[\"Fare\"][df_train[\"Pclass\"]==3].mean())\n","c972b62a":"df_train[df_train[\"Fare\"].isnull()]","4f945f05":"corrlist=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(df_train[corrlist].corr(),annot=True,fmt=\".2f\");","e8b00904":"g= sns.factorplot(data=df_train, x=\"SibSp\",y=\"Survived\",kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\");","51f5c419":"g = sns.factorplot(data = df_train, x = \"Parch\", y = \"Survived\", kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\");","2c9b0ef4":"g = sns.factorplot(data=df_train, x=\"Pclass\",y= \"Survived\",kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\");","ba2a9950":"g = sns.FacetGrid(data=df_train,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins =25);","c3aa0418":"g=sns.FacetGrid(data=df_train,col=\"Survived\",row=\"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend();","5d79e67d":"g= sns.FacetGrid(data=df_train,row=\"Embarked\",size=2.5)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend();","1c9614ff":"g=sns.FacetGrid(data=df_train,row=\"Embarked\",col=\"Survived\",size=2.5)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend();","705acce4":"df_train[df_train[\"Age\"].isnull()]","5a28997c":"sns.factorplot(x=\"Sex\",y=\"Age\",data=df_train,kind=\"box\", size=5);","10f17fb4":"sns.factorplot(data=df_train,x=\"Sex\",y=\"Age\",hue=\"Pclass\",kind=\"box\",size=5);","800b2eef":"sns.factorplot(data=df_train,x=\"Parch\",y=\"Age\",kind=\"box\",size=6);","cad2c507":"sns.factorplot(data=df_train,x=\"SibSp\",y=\"Age\",kind=\"box\",size=6);","35803fe4":"df_train[\"Sex\"]=df_train[\"Sex\"].replace({\"male\":1,\"female\":0})","0d6e2bf9":"sns.heatmap(df_train[[\"Age\",\"Sex\",\"Pclass\",\"Parch\",\"SibSp\"]].corr(),annot=True);","396e90a9":"index_nan_age = list(df_train[\"Age\"][df_train[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = df_train[\"Age\"][((df_train[\"SibSp\"] == df_train.iloc[i][\"SibSp\"])& \n                                (df_train[\"Parch\"] == df_train.iloc[i][\"Parch\"])& \n                                (df_train[\"Pclass\"] == df_train.iloc[i][\"Pclass\"]))].median()\n    age_med = df_train[\"Age\"].median()\n    if not np.isnan(age_pred):\n        df_train[\"Age\"].iloc[i] = age_pred\n    else:\n        df_train[\"Age\"].iloc[i] = age_med","a26a15b2":"df_train[df_train[\"Age\"].isnull()]","e762d2ce":"df_train[\"Name\"].head()","cb7888bf":"name=df_train[\"Name\"]\ndf_train[\"title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\ndf_train[\"title\"].head(10)","fcd981a5":"plt.figure(figsize=(10,5))\nsns.countplot(x=\"title\",data=df_train)\nplt.xticks(rotation=90);","90cde565":"# convert titles to categorical\ndf_train[\"title\"] = df_train[\"title\"].replace([\"Don\",\"the Countess\",\"Dr\",\"Col\",\"Lady\",\"Capt\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ndf_train[\"title\"]=[0 if i==\"Master\" else 1 if i==\"Miss\" or i==\"Ms\" or i==\"Mlle\" or i==\"Mrs\" else 2 if i ==\"Mr\" else 3 for i in df_train[\"title\"]]\ndf_train.title.head(15)","71dfa2ba":"plt.figure(figsize=(9,5))\nsns.countplot(x=\"title\",data=df_train)\nplt.xticks(rotation=90);","977257fa":"g= sns.factorplot(x=\"title\",y=\"Survived\",data=df_train, kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\");","469672d1":"df_train.drop(\"Name\",axis=1,inplace=True)\ndf_train.head()","732f6ade":"df_train= pd.get_dummies(df_train,columns=[\"title\"])\ndf_train.head()","203d9e5f":"df_train[\"Family_Size\"]= df_train[\"SibSp\"] + df_train[\"Parch\"] + 1","325e309a":"df_train.head()","6cf0192b":"g=sns.factorplot(x=\"Family_Size\",y=\"Survived\",data=df_train,kind=\"bar\")\ng.set_ylabels(\"Survival Probability\");","8aa31aed":"df_train[\"Family_Size\"]=[1 if i<4.5 else 0 for i in df_train[\"Family_Size\"]]","837ad717":"df_train.head()","16f67472":"sns.countplot(x=\"Family_Size\",data=df_train);","176cc4f2":"g=sns.factorplot(x=\"Family_Size\",y=\"Survived\",data=df_train,kind=\"bar\")\ng.set_ylabels(\"Survival\");","1c0af572":"df_train=pd.get_dummies(df_train,columns=[\"Family_Size\"])\ndf_train.head()","7331e5cc":"sns.countplot(\"Embarked\",data=df_train)","9a146468":"g=sns.factorplot(x=\"Embarked\",y=\"Survived\",data=df_train,kind=\"bar\")\ng.set_ylabels(\"Survival\");","f8d715b6":"df_train=pd.get_dummies(df_train,columns=[\"Embarked\"])\ndf_train.head()","0b9dc1cf":"df_train[\"Ticket\"].head(15)","be3ccd2b":"a=\"STON\/O2. 3101282\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","5825e0d1":"ticket=[]\nfor i in df_train[\"Ticket\"]:\n    if not i.isdigit():\n        ticket.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        ticket.append(\"x\")\ndf_train[\"Ticket\"]=ticket","9e72ebaa":"df_train=pd.get_dummies(df_train,columns=[\"Ticket\"],prefix=\"T\")\ndf_train.head()","82bbddc2":"sns.countplot(x=\"Pclass\",data=df_train);","8c79a05f":"df_train=pd.get_dummies(df_train,columns=[\"Pclass\"])\ndf_train.head()","a8796b92":"df_train=pd.get_dummies(df_train,columns=[\"Sex\"])\ndf_train.head()","3fb6148e":"df_train.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)\ndf_train.head()","2a39beff":"df_train_len","4005ab73":"test= df_train[df_train_len:]\ntest.drop(\"Survived\",axis=1,inplace=True)\ntest.head()","a4eff71d":"train = df_train[:df_train_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","f5ba0217":"logregmodel = LogisticRegression().fit(X_train,y_train)\nacc_log_train= logregmodel.score(X_train,y_train)\nacc_log_test=logregmodel.score(X_test,y_test)\nprint(\"Train acc. :\",logregmodel.score(X_train,y_train))\nprint(\"Test acc. :\",logregmodel.score(X_test,y_test))","edfd9c4b":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","fa311f43":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],param_grid=classifier_param[i],cv=StratifiedKFold(n_splits=10),scoring=\"accuracy\",n_jobs=-1,verbose=1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","85a09623":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\");","d4f3f325":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","fb83afe9":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","1934cb9e":"<a id = \"24\"><\/a><br>\n## Embarked","341a7f1a":"<a id = \"16\"><\/a><br>\n## Age -- Survived","11228fec":"<a id = \"22\"><\/a><br>\n## Name -- Title","7a758263":"<a id = \"12\"><\/a><br>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","d5743be8":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","7f3983f3":"<a id = \"1\"><\/a><br>\n## Read and Check the data","e2c1d041":"<a id = \"20\"><\/a><br>\n## Fill Missing Age Feature","a7081a16":"* It seems first class passengers older than second class, and second class older than first class.","f3af6aec":"<a id = \"32\"><\/a><br>\n## HyperParameter Tuning","fcd2d3ad":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","d35451bb":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in pclass 3 in C.\n* Embarked and sex will be used in training.","e3c61aaf":"<a id = \"7\"><\/a><br>\n# Outlier Detection","6788332d":"<a id = \"5\"><\/a><br>\n## Numerical Variable","f8117eed":" <a id = \"3\"><\/a><br>\n # Univariate Variable Analysis\n * Categorical Variable: Survived, Sex, Pclass, Embarked, Name, Ticket, Sibsp and Parch\n * Numerical Variable: Fare, Age, Passengerid","cebbb6d9":"<a id = \"25\"><\/a><br>\n## Ticket","e1afc01c":"<a id = \"11\"><\/a><br>\n# Visualization","bf9e765f":"# Introduction\n\nTitanic is one of the major ship wreck of the 20th century.\n\n<font color=\"blue\">\nContent:\n\n1. [Read and Check the data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger Id And Cabin](#28)\n8. [Modeling](#29)\n    * [Train-test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [HyperParameter Tuning](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction](#34)","0f0dd6fc":"<a id = \"29\"><\/a><br>\n# Modeling","4b891d0d":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","c7952623":"<a id = \"9\"><\/a><br>\n## Find Missing Value","2965940e":"<a id = \"8\"><\/a><br>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value","fb5dc43f":"<a id = \"28\"><\/a><br>\n## Drop Passenger Id And Cabin","9113408e":"* 0 = Master\n* 1=Miss, Mlle, Mrs, Ms\n* 2=Mr\n* 3=Other","e58c2921":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","0cb4d32e":"* pclass is an important feature to model training.","73b4d479":"<a id = \"27\"><\/a><br>\n## Sex","5354ec05":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","aa3cbbe3":"* Sibsp and parch can be used for new feature extraction with th = 3\n* Small familes have more chance to survive.\n* There is a std. in survival of passenger with parch = 3","caf15c8c":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","35bb78e3":"* No Money No Honey....","6498420b":"* Lets try 5 different classifier model and find the best one for our data.","ad1736e0":"* Sex is not usefull to predict age feature.","2efcc6b6":"<a id = \"34\"><\/a><br>\n## Prediction","3e0f5b37":"<a id = \"30\"><\/a><br>\n## Train-Test Split","46426f29":"<a id = \"2\"><\/a><br>\n## Variable Description\n1. PassengerId: Unique id number to each passenger.\n1. Survived: Passenger survive(1) or died(0).\n1. Pclass: Passenger class.\n1. Name: Name of passenger.\n1. Sex: Sex of passenger.\n1. Age: Age of passenger.\n1. SibSp: Number of siblings and spouses.\n1. Parch: Number of parents\/childrens.\n1. Ticket: Ticket number.\n1. Fare: amount of money spent on ticket\n1. Cabin: Cabin category\n1. Embarked: port where passenger embarked(S=Southampton,C=Cherbourg,Q=Queenstown)","b7b9131c":"Fare have correlation with survived (Weak positive, 0.26)","da597817":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","b1e42778":"<a id = \"23\"><\/a><br>\n## Family Size","27686008":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","75f7cf2e":"<a id = \"10\"><\/a><br>\n## Fill Missing Value  ","676e257f":"<a id = \"21\"><\/a><br>\n# Feature Engineering\n    ","88a09804":"<a id = \"26\"><\/a><br>\n## Pclass","54e14de6":"* Small families have more chance to survive than bigger families.","96c8d4a8":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","cbc72455":"* As I told before age is not correlated with sex.\n* Age is correlated with Pclass,Parch,SibSp","70a0bc91":"<a id = \"4\"><\/a><br>\n## Categorical Variable","236f3f68":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","8551741a":"* Passsengers who pay higher fare have better survival rate. Fare can be used as categorical for training.\n","2d7fee15":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","37aaaf7a":"* float64(2): Fare, Age\n* int64(5): PassengerId, Survived, Pclass,SibSp, Parch\n* object(5): Name, Sex, Ticket, Cabin, Embarked"}}