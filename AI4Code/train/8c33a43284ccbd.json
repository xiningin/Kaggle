{"cell_type":{"8260e3ef":"code","9bffed03":"code","a7f2c4db":"code","bec34d4a":"code","1130523a":"code","599fbf67":"code","180170a8":"code","9861dd83":"code","0f3b49d0":"code","492fc971":"code","89761b18":"code","7a77211f":"code","48ebe76e":"code","6780a53b":"code","6f9a11bd":"code","cbe3ccd4":"code","c4e5fab7":"code","9d27004d":"code","420d8cbb":"code","e6aa0f68":"code","4b29cb70":"code","4baede15":"code","864a0761":"code","46cb19e7":"code","8df760cf":"code","af98717c":"code","877915ba":"code","761669d4":"code","1fe5be88":"code","2c28126e":"code","31a76422":"code","f19e9541":"code","6b38deac":"code","a0a3031e":"code","f632b99f":"code","bcc977d8":"code","4d7a29a4":"code","1ed43ba2":"code","8fe8b8e7":"code","e2397580":"code","be55ee84":"code","7216e035":"code","53248600":"code","574242db":"code","3b181be5":"code","fc6af44c":"markdown","4678b01b":"markdown","849016b1":"markdown","9313aa23":"markdown","7876a3ca":"markdown","8fe7bdc9":"markdown","df7625b8":"markdown","d2697ec0":"markdown","3cff2fdf":"markdown","4e98c030":"markdown","cf5171c8":"markdown","fe6a79b4":"markdown","7b6b756c":"markdown","e61e5f58":"markdown","bd8728cf":"markdown","59311c3a":"markdown","114beb06":"markdown","0142cd3a":"markdown","b566e102":"markdown"},"source":{"8260e3ef":"!pip install dataprep","9bffed03":"from dataprep.eda import *","a7f2c4db":"# manipulation data\nimport pandas as pd\nimport numpy as np\n\n#visualiation data\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport matplotlib\nimport plotly.graph_objects as go\nimport plotly.express as px\n\n#default theme\nsns.set(context='notebook', style='darkgrid', palette='colorblind', font='sans-serif', font_scale=1, rc=None)\nmatplotlib.rcParams['figure.figsize'] =[8,8]\nmatplotlib.rcParams.update({'font.size': 15})\nmatplotlib.rcParams['font.family'] = 'sans-serif'","bec34d4a":"df = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')\ndf.head()","1130523a":"# CLIENTNUM : Client number. Unique identifier for the customer holding the account ==> so we gonna drop it (usless)\ndf=df.drop('CLIENTNUM',axis=1)\ndf.head()","599fbf67":"df.shape","180170a8":"df.info()","9861dd83":"# data type plot\ndf.dtypes.value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',shadow=True)\nplt.title('type of our data');","0f3b49d0":"df.describe(include='all')","492fc971":"missing_values=df.isnull().sum()\npercent_missing = df.isnull().sum()\/df.shape[0]*100\n\nvalue = {\n    'missing_values ':missing_values,\n    'percent_missing %':percent_missing\n}\nframe=pd.DataFrame(value)\nframe","89761b18":"create_report(df)","7a77211f":"df.Attrition_Flag.replace({'Existing Customer': 1, 'Attrited Customer': 0}, inplace=True)\n\ndf.Gender.replace({'F': 0, 'M': 1}, inplace=True)\n\ndf.Education_Level.replace({'Graduate': 0, 'High School': 1, 'Unknown': 2,'Uneducated':3,'College':4,'Post-Graduate':5,'Doctorate':6}, inplace=True)\n\ndf.Marital_Status.replace({'Married': 0, 'Single': 1,'Unknown':2,'Divorced':3}, inplace=True)\n\ndf.Income_Category.replace({'Less than $40K': 0,'$80K - $120K': 1, '$60K - $80K': 2,'Unknown':3}, inplace=True)\ndf.Income_Category.replace({'$40K - $60K': 4}, inplace=True)\ndf.Income_Category.replace({'$120K +': 5}, inplace=True)\n\ndf.Card_Category.replace({'Blue': 0, 'Silver': 1,'Gold':2,'Platinum':3}, inplace=True)\n\ndf.head()","48ebe76e":"df.dtypes","6780a53b":"# data type plot\ndf.dtypes.value_counts().plot.pie(explode=[0.1,0.1],autopct='%1.1f%%',shadow=True)\nplt.title('type of our data');","6f9a11bd":"df.corr().style.background_gradient(cmap='coolwarm').set_precision(2)","cbe3ccd4":"# Feature Selection\n\nplt.rcParams['figure.figsize']=15,6 \nsns.set_style(\"darkgrid\")\n\nx = df.drop('Attrition_Flag',axis=1)\ny = df.Attrition_Flag\n\nfrom sklearn.ensemble import ExtraTreesClassifier\n\nmodel = ExtraTreesClassifier()\nmodel.fit(x,y)\nprint(model.feature_importances_) \nfeat_importances = pd.Series(model.feature_importances_, index=x.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.title('the most 10 important feature are')\nplt.show()","c4e5fab7":"df.columns","9d27004d":"df=df.drop(['Customer_Age','Customer_Age','Gender','Dependent_count','Education_Level','Marital_Status','Income_Category','Card_Category','Months_on_book','Total_Relationship_Count','Months_Inactive_12_mon','Contacts_Count_12_mon','Credit_Limit','Avg_Open_To_Buy','Total_Amt_Chng_Q4_Q1','Total_Ct_Chng_Q4_Q1'],axis=1)","420d8cbb":"df","e6aa0f68":"X = df.drop(columns=[\"Attrition_Flag\"])\ny = df[\"Attrition_Flag\"]","4b29cb70":"from sklearn.model_selection import train_test_split\n\n#Splitting data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)","4baede15":"from sklearn.ensemble import GradientBoostingClassifier\n\n#Applying GradientBoostingClassifier Model \n\n\nGBCModel = GradientBoostingClassifier(n_estimators=100,max_depth=3,random_state=33) \nGBCModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('GBCModel Train Score is : ' , GBCModel.score(X_train, y_train))\nprint('GBCModel Test Score is : ' , GBCModel.score(X_test, y_test))\n#print('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = GBCModel.predict(X_test)\ny_pred_prob = GBCModel.predict_proba(X_test)\n#print('Predicted Value for GBCModel is : ' , y_pred[:10])\n#print('Prediction Probabilities Value for GBCModel is : ' , y_pred_prob[:10])","864a0761":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Calculating Confusion Matrix\nCM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n\n# drawing confusion matrix\nsns.heatmap(CM, center = True,cmap='GnBu')\nplt.show()","46cb19e7":"# Making Confusion Matrix and calculating accuracy score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nmodel = LogisticRegression()\n\n#Fit the model\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nmylist = []\n# Confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\n# accuracy score\nacc_logreg = accuracy_score(y_test, y_pred)\n\nmylist.append(acc_logreg)\nprint(cm)\nprint(acc_logreg,'%')\n# drawing confusion matrix\nsns.heatmap(cm, center = True,cmap='GnBu')\nplt.show()","8df760cf":"# Finding the optimum number of neighbors \n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nlist1 = []\nfor neighbors in range(1,5):\n    classifier = KNeighborsClassifier(n_neighbors=neighbors, metric='minkowski')\n    classifier.fit(X_train, y_train)\n    y_pred = classifier.predict(X_test)\n    list1.append(accuracy_score(y_test,y_pred))\nplt.plot(list(range(1,5)), list1)\nplt.show()","af98717c":"# Training the K Nearest Neighbor Classifier on the Training set\n\nclassifier = KNeighborsClassifier(n_neighbors=3)\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\n\ny_pred = classifier.predict(X_test)\nprint(y_pred)","877915ba":"# Making the confusion matrix and calculating accuracy score\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nacc_knn = accuracy_score(y_test, y_pred)\nmylist.append(acc_knn)\nprint(cm)\nprint(acc_knn)","761669d4":"# drawing confusion matrix\nsns.heatmap(cm, center = True,cmap='GnBu')\nplt.show()","1fe5be88":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nlist1 = []\nfor c in [0.5,0.6,0.7,0.8,0.9,1.0]:\n    classifier = SVC(C = c, random_state=0, kernel = 'rbf')\n    classifier.fit(X_train, y_train)\n    y_pred = classifier.predict(X_test)\n    list1.append(accuracy_score(y_test,y_pred))\nplt.plot([0.5,0.6,0.7,0.8,0.9,1.0], list1)\nplt.show()","2c28126e":"# Training the Support Vector Classifier on the Training set\n\nfrom sklearn.svm import SVC\nclassifier = SVC(C = 1.0, random_state=0, kernel = 'rbf')\nclassifier.fit(X_train, y_train)","31a76422":"# Predicting the test set results\n\ny_pred = classifier.predict(X_test)\nprint(y_pred)","f19e9541":"# Making the confusion matrix and calculating accuracy score\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nacc_svc = accuracy_score(y_test, y_pred)\nprint(cm)\nprint(acc_svc,'%')\nmylist.append(acc_svc)","6b38deac":"\n# Finding the optimum number of max_leaf_nodes\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nlist1 = []\nfor leaves in range(2,15):\n    classifier = DecisionTreeClassifier(max_leaf_nodes = leaves, random_state=0, criterion='entropy')\n    classifier.fit(X_train, y_train)\n    y_pred = classifier.predict(X_test)\n    list1.append(accuracy_score(y_test,y_pred))\n#print(mylist)\nplt.plot(list(range(2,15)), list1)\nplt.show()","a0a3031e":"# Training the Decision Tree Classifier on the Training set\n\nclassifier = DecisionTreeClassifier(max_leaf_nodes = 5, random_state=0, criterion='entropy')\nclassifier.fit(X_train, y_train)","f632b99f":"#Predicting the test set results\n\ny_pred = classifier.predict(X_test)\nprint(y_pred)","bcc977d8":"# Making the confusion matrix and calculating accuracy score\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nacc_decisiontree = accuracy_score(y_test, y_pred)\nprint(cm)\nprint(acc_decisiontree)\nmylist.append(acc_decisiontree)","4d7a29a4":"\nnp.random.seed(0)\nimport tensorflow as tf\n\n# Initialising the ANN\n\nann = tf.keras.models.Sequential()\n\n# Adding the input layer and the first hidden layer\n\nann.add(tf.keras.layers.Dense(units = 7, activation = 'relu'))\n\n# Adding the second hidden layer\n\nann.add(tf.keras.layers.Dense(units = 7, activation = 'relu'))\n\n# Adding the third hidden layer\n\nann.add(tf.keras.layers.Dense(units = 7, activation = 'relu'))\n\n# Adding the fourth hidden layer\n\nann.add(tf.keras.layers.Dense(units = 7, activation = 'relu'))\n\n# Adding the output layer\n\nann.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))\n\n# Compiling the ANN\n\nann.compile(optimizer = 'adam', loss = 'binary_crossentropy' , metrics = ['accuracy'] )\n\n# Training the ANN on the training set\n\nann.fit(X_train, y_train, batch_size = 16, epochs = 100)","1ed43ba2":"# Predicting the test set results\n\ny_pred = ann.predict(X_test)\ny_pred = (y_pred > 0.9)\nnp.set_printoptions()","8fe8b8e7":"# Making the confusion matrix, calculating accuracy_score \n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\n# confusion matrix\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Confusion Matrix\")\nprint(cm)\nprint()\n\n# accuracy\nac_ann = accuracy_score(y_test,y_pred)\nprint(\"Accuracy\")\nprint(ac_ann)\nmylist.append(ac_ann)","e2397580":"\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nlist1 = []\nfor estimators in range(10,30,1):\n    classifier = XGBClassifier(n_estimators = estimators, max_depth=12, subsample=0.7)\n    classifier.fit(X_train, y_train)\n    y_pred = classifier.predict(X_test)\n    list1.append(accuracy_score(y_test,y_pred))\n#print(mylist)\nplt.plot(list(range(10,30,1)), list1)\nplt.show()","be55ee84":"from xgboost import XGBClassifier\nclassifier = XGBClassifier(n_estimators = 15, max_depth=12, subsample=0.7)\nclassifier.fit(X_train,y_train)","7216e035":"y_pred = classifier.predict(X_test)\nprint(y_pred)","53248600":"# Making the confusion matrix and calculating the accuracy score\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nac_xgboost = accuracy_score(y_test, y_pred)\nmylist.append(ac_xgboost)\nprint(cm)\nprint(ac_xgboost)","574242db":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n               'ANN',   \n              'Decision Tree','xgboost'],\n    'Score': [acc_svc, acc_knn, acc_logreg, \n               ac_ann, acc_decisiontree,ac_xgboost\n              ]})\nmodels.sort_values(by='Score', ascending=False)","3b181be5":"plt.rcParams['figure.figsize']=15,6 \nsns.set_style(\"darkgrid\")\nax = sns.barplot(x=models.Model, y=models.Score, palette = \"rocket\", saturation =1.5)\nplt.xlabel(\"Classifier Models\", fontsize = 20 )\nplt.ylabel(\"% of Accuracy\", fontsize = 20)\nplt.title(\"Accuracy of different Classifier Models\", fontsize = 20)\nplt.xticks(fontsize = 12, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 13)\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{height:.2%}', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","fc6af44c":"## B-the most 10 important feature are","4678b01b":"# 1- library and package ","849016b1":"## C- SUPPORT VECTOR MACHINE","9313aa23":"# B- KNN","7876a3ca":"## D) DecisionTreeClassifier","8fe7bdc9":"## F- xgboost","df7625b8":"# 2- laod and analysis data","d2697ec0":"## Credit Card customers\n\n* CLIENTNUM          :  Client number. Unique identifier for the customer holding the account\n* Attrition_Flag     :  Internal event (customer activity) variable - if the account is closed then 1 else 0\n* Customer_Age       :  Demographic variable - Customer's Age in Years\n* Gender             :  Demographic variable - M=Male, F=Female\n* Dependent_count    :  Demographic variable - Number of dependents\n* Education_Level    :  Demographic variable - Educational Qualification of the account holder (example: high school, college graduate, etc.)\n* Marital_Status     :  Demographic variable - Married, Single, Divorced, Unknown\n* Income_Category    :  Demographic variable - Annual Income Category of the account holder (< $40K, $40K - 60K, $60K - $80K, $80K-$120K, >\n* Card_Category      :  Product Variable - Type of Card (Blue, Silver, Gold, Platinum)\n* Months_on_book     :  Period of relationship with bank\n* Total_Relationship_Count :  Total no. of products held by the customer\n* Months_Inactive_12_mon   :  No. of months inactive in the last 12 months\n* Contacts_Count_12_mon    :  No. of Contacts in the last 12 months\n* Credit_Limit             ;  Credit Limit on the Credit Card\n* Total_Revolving_Bal      :  Total Revolving Balance on the Credit Card\n* Avg_Open_To_Buy          :  Open to Buy Credit Line (Average of last 12 months)\n* Total_Amt_Chng_Q4_Q1     :  Change in Transaction Amount (Q4 over Q1)\n* Total_Trans_Amt          :  Total Transaction Amount (Last 12 months)\n* Total_Trans_Ct           :  Total Transaction Count (Last 12 months)\n* Total_Ct_Chng_Q4_Q1      :  Change in Transaction Count (Q4 over Q1)\n* Avg_Utilization_Ratio    :  Average Card Utilization Ratio\n* Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 : \n* Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2' :\n\n![](https:\/\/www.madd.org\/wp-content\/uploads\/2017\/11\/Card-Handoff-2.jpg)\n\n","3cff2fdf":"# 3- finding missing values","4e98c030":"## A- corr map","cf5171c8":"# 6- feautres selection","fe6a79b4":"# 5- features transformation","7b6b756c":"#### some notes :\nby applicing the describe() we can see are the most frequent valuer on eaxh columns are  :\n1. Attrition_Flag : Existing Customer \n2. Gender : the famale \n3. Education_Level : Graduate \n4. Marital_Status : Married\n5. Income_Category : Less than $40K\n6. Card_Category : Blue","e61e5f58":"# 4- data visualization","bd8728cf":"so lie we c we had :\n* 10127 Rows\n* 22 columns","59311c3a":"our data is so clean happy news :) ","114beb06":"# 7- data split","0142cd3a":"## A- LOGISTIC REGRESSION","b566e102":"## E- ANN (neural network )"}}