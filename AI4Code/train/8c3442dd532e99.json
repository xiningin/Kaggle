{"cell_type":{"ac54a3dd":"code","59ea452c":"code","b636c5a0":"code","acd9e4db":"code","4d155686":"code","11f1edef":"markdown","ef9e7bc7":"markdown","ea47d6f2":"markdown"},"source":{"ac54a3dd":"import matplotlib.pyplot as plt\nimport numpy as np\nplt.rcParams['figure.figsize'] = [10, 5]\n\nxC = np.array([2, 1])      # Center of data (mean)\nsig = np.array([2, 0.5])   # Principal axes\n\ntheta = np.pi\/3            # Rotate cloud by pi\/3\n\nR = np.array([[np.cos(theta), -np.sin(theta)],     # Rotation matrix\n              [np.sin(theta), np.cos(theta)]])\n\nnPoints = 10000            # Create 10,000 points\nX = R @ np.diag(sig) @ np.random.randn(2,nPoints) + np.diag(xC) @ np.ones((2,nPoints))","59ea452c":"Xavg = np.mean(X,axis=1)                  # Compute mean\nB = X - np.tile(Xavg,(nPoints,1)).T       # Mean-subtracted data\n\n# Find principal components (SVD)\nU, S, VT = np.linalg.svd(B,full_matrices=0)\n\ncomponents = U @ np.diag(S)\ncomponent_1 = components[:,0]\ncomponent_2 = components[:,1]","b636c5a0":"\nplt.figure(figsize=(5,5))\nplt.plot(X[0,:],X[1,:], '.')   # Plot data to overlay PCA\nplt.grid()\nplt.xlim((-6, 8))\nplt.ylim((-6,8))\n\nplt.plot(np.array([Xavg[0],   Xavg[0] + component_1[0]]),\n         np.array([Xavg[1],   Xavg[1] + component_1[1]]),'-',color='k',LineWidth=5)\n\n\nplt.plot(np.array([Xavg[0],   Xavg[0] + component_2[0]]),\n         np.array([Xavg[1],   Xavg[1] + component_2[1]]),'-',color='k',LineWidth=5)\n\nplt.show()","acd9e4db":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler().fit(X.T)\n\nX_scaled = scaler.transform(X.T)\n\npca = PCA(svd_solver='full').fit(X.T)\n\ncomponents = pca.components_ @ np.diag(pca.singular_values_)\ncomponent_1 = components[:,0]\ncomponent_2 = components[:,1]\n\nplt.figure(figsize=(5,5))\nplt.plot(X[0,:],X[1,:], '.')   # Plot data to overlay PCA\nplt.grid()\nplt.xlim((-6, 8))\nplt.ylim((-6,8))\n\n\nplt.plot(np.array([scaler.mean_[0],         scaler.mean_[0]+component_1[0]]),\n         np.array([scaler.mean_[1],         scaler.mean_[1]+component_1[1]]),'-',color='r',LineWidth=5)\n\n\nplt.plot(np.array([scaler.mean_[0],         scaler.mean_[0]+component_2[0]]),\n         np.array([scaler.mean_[1],         scaler.mean_[1]+component_2[1]]),'-',color='r',LineWidth=5)\n\nplt.show()","4d155686":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n# Not stardardize\n\npca = PCA(svd_solver='full').fit(X.T)\n\nplt.figure(figsize=(5,5))\nplt.plot(X[0,:],X[1,:], '.')   # Plot data to overlay PCA\nplt.grid()\nplt.xlim((-6, 8))\nplt.ylim((-6,8))\n\n\nplt.plot(np.array([Xavg[0],         Xavg[0]+pca.components_[0,0]*pca.singular_values_[0]]),\n         np.array([Xavg[1],           Xavg[1]+pca.components_[1,0]*pca.singular_values_[0]]),'-',color='r',LineWidth=5)\n\n\nplt.plot(np.array([Xavg[0],         Xavg[0]+pca.components_[0,1]*pca.singular_values_[1]]),\n         np.array([Xavg[1],           Xavg[1]+pca.components_[1,1]*pca.singular_values_[1]]),'-',color='r',LineWidth=5)\n\nplt.show()","11f1edef":"# Create data points","ef9e7bc7":"# 2) Using sklearn.decomposition.PCA","ea47d6f2":"# 1) Compute PCA using SVD. <br>\nLet $X$ be the data matrix with shape 3x3.\n\n$X = \\begin{bmatrix} x_{00} & x_{01} & x_{02} \\\\ x_{10} & x_{11} & x_{12} \\\\ x_{20} & x_{21} & x_{22} \\end{bmatrix}$ <br>\n\nWhere **First row** represents first observation and **First column** represents first feature.\n\n1. Compute feature-wise mean\n\n$\\bar{X} = \\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\end{bmatrix} * [mean([x_{00}, x_{10}, x_{20}], ...)]$\n\n2. Subtract mean\n\n$B = X - \\bar{X}$\n\n3. Compute SVD of B\n\n$B = \\underbrace{U\\sum}_{PC} V^{T}$\n\n"}}