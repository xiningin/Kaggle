{"cell_type":{"721cf141":"code","19ef60e7":"code","bad6b0ad":"code","337ee9fe":"code","eff0b47d":"code","ad7f7fa4":"code","17e2ada8":"code","354fb47f":"code","3ad2deae":"code","06ee8bfd":"code","4ba8ee9e":"markdown","0d0e21b0":"markdown","2c51cb07":"markdown","a3404bf9":"markdown","6668bdaa":"markdown","e6a4ccef":"markdown","a2ec1891":"markdown","683999a2":"markdown"},"source":{"721cf141":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\ncurrent_path = os.getcwd()\ndata_path = os.path.join(current_path, '..', 'input', '2020backofwordrcv')\nprint(os.listdir(data_path))\n# Any results you write to the current directory are saved as output.","19ef60e7":"train_path = os.path.join(data_path, 'traindata')\ntrain_label_list = os.listdir(train_path)","bad6b0ad":"train_label_info = {}\n\nfor label in train_label_list:\n    _tmp_label_path = os.path.join(train_path, label)\n    _num_images = len(os.listdir(_tmp_label_path))\n    \n    if label not in train_label_info.keys():\n        train_label_info[label] = _num_images\n        \nnum_show = 10\nprint('Total number of labels: {}'.format(len(train_label_info)))\nprint('Just show {} items {} ...'.format(num_show, list(train_label_info.keys())[:num_show]))","337ee9fe":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 5))\nplt.bar(range(len(train_label_info)), list(train_label_info.values()))\nplt.show()","eff0b47d":"import random\n\nnum_label = len(train_label_info)\nnum_image = train_label_info[train_label_list[0]]","ad7f7fa4":"fig = plt.figure(figsize=(18, 18))\n\nfor i in range(9):\n    ax = fig.add_subplot(3, 3, i + 1)\n    \n    _random_label = random.randint(0, num_label - 1)\n    _random_image = random.randint(0, num_image - 1)\n    \n    _label_path = os.path.join(train_path, train_label_list[_random_label])\n    _image_list = os.listdir(_label_path)\n    _image_path = os.path.join(_label_path, _image_list[_random_image])\n    \n    image = plt.imread(_image_path)\n    plt.imshow(image)\n    \n    _title = '{}, {}'.format(train_label_list[_random_label], _random_image)\n    ax.set_title(_title)\n    ax.axis('off')","17e2ada8":"test_path = os.path.join(data_path, 'testdata')\ntest_image_list = os.listdir(test_path)\n\nnum_test_images = len(test_image_list)\nprint('Total number of test images: {}'.format(num_test_images))","354fb47f":"fig = plt.figure(figsize=(18, 18))\n\nfor i in range(9):\n    ax = fig.add_subplot(3, 3, i + 1)\n    \n    _random_image = random.randint(0, num_test_images - 1)\n    _image_path = os.path.join(test_path, test_image_list[_random_image])\n    \n    image = plt.imread(_image_path)\n    plt.imshow(image)\n    \n    _title = '{}'.format(test_image_list[_random_image])\n    ax.set_title(_title)\n    ax.axis('off')","3ad2deae":"test_label_path = os.path.join(data_path, \"test_label.csv\")\ntest_label = pd.read_csv(test_label_path)\nprint(test_label.head(5))","06ee8bfd":"cum_h = []\ncum_w = []\n\nfor label_list in train_label_list:\n    _label_path = os.path.join(train_path, label_list)\n    _image_list = os.listdir(_label_path)\n    for image_file in _image_list:\n        _image_path = os.path.join(_label_path, image_file)\n        image = plt.imread(_image_path)\n\n        h, w = image.shape[:2]\n        cum_h.append(h)\n        cum_w.append(w)\n\ncum_h = np.array(cum_h)\ncum_w = np.array(cum_w)\nprint('Avg. height:\\t{:.1f}\\nAvg. width:\\t{:.1f}'.format(np.mean(cum_h), np.mean(cum_w)))\nprint('Median height:\\t{}\\nMedian width:\\t{}'.format(np.median(cum_h), np.median(cum_w)))","4ba8ee9e":"## 1. \ub370\uc774\ud130\uc14b \ubd88\ub7ec\uc624\uae30","0d0e21b0":"### 2.3. Submission","2c51cb07":"### 2.2. Train \ub370\uc774\ud130","a3404bf9":"- Train \ub370\uc774\ud130\uc758 label\uc740 \ucd1d 102\uac1c\uc774\uba70, \uac01 label\ub2f9 \ub370\uc774\ud130\uc758 \uac1c\uc218\ub294 30\uac1c\ub85c \uade0\ub4f1\ud558\ub2e4.","6668bdaa":"## 3. \uc774\ubbf8\uc9c0 \ud06c\uae30 \uc0b4\ud3b4\ubcf4\uae30","e6a4ccef":"## 2. \ub370\uc774\ud130\uc14b \uc0b4\ud3b4\ubcf4\uae30","a2ec1891":"# Explore Data Analysis","683999a2":"### 2.2. Test \ub370\uc774\ud130"}}