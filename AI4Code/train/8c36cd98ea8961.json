{"cell_type":{"111778b2":"code","5b9dda26":"code","48833b37":"code","78d8fda8":"code","5574b0c9":"code","4ef83dae":"code","65fe5794":"code","f9b7f960":"code","93e1777f":"code","64b30613":"code","4ab596bd":"code","be070ebf":"code","d84cbd38":"code","33a41cc3":"code","d9eabe89":"code","1da41297":"code","b36c3f45":"code","5acb6bb2":"code","55d83d71":"code","8cea577e":"code","7f3abc01":"code","dd4e6cdd":"markdown","840b7441":"markdown","c431f5e4":"markdown","d27386ce":"markdown","cb200237":"markdown","ee3f76ac":"markdown","de990f47":"markdown","601dc03b":"markdown","dc838e16":"markdown"},"source":{"111778b2":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os, json, re, math\n\nfrom tqdm import tqdm\nfrom glob import glob\nimport gc\n\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nplt.rcParams[\"figure.figsize\"] = (12,8)\nplt.rcParams['axes.titlesize'] = 16\n\nfrom kaggle_datasets import KaggleDatasets\n\nfrom time import time, strftime, gmtime\nstart = time()\nimport datetime\nprint(str(datetime.datetime.now()))","5b9dda26":"print(os.listdir('\/kaggle\/input\/'))\nprint(os.listdir('\/kaggle\/input\/ranzcr-clip-catheter-line-classification\/'))","48833b37":"base_dir = '\/kaggle\/input\/ranzcr-clip-catheter-line-classification\/'","78d8fda8":"train = pd.read_csv(base_dir + 'train.csv')\ntrain","5574b0c9":"targets = ['ETT - Abnormal', 'ETT - Borderline',\n       'ETT - Normal', 'NGT - Abnormal', 'NGT - Borderline',\n       'NGT - Incompletely Imaged', 'NGT - Normal', 'CVC - Abnormal',\n       'CVC - Borderline', 'CVC - Normal', 'Swan Ganz Catheter Present',\n       ]","4ef83dae":"print('Number of unique PatientID: ', train['PatientID'].nunique())","65fe5794":"print('Number of unique Images in Train: ', train['StudyInstanceUID'].nunique())\nprint('Number of unique Images in Test: ', len(os.listdir(base_dir + 'test')))","f9b7f960":"train[targets].sum()","93e1777f":"ax = sns.countplot(x = \"variable\", hue = \"value\", data = pd.melt(train[targets]))\nax.grid()\nax.set_xticklabels(targets, rotation = 90)","64b30613":"def display_images(UID, lbl):\n    files = np.random.choice(UID, 12)\n\n    plt.figure(figsize = (16, 12))\n\n    for i, im in enumerate(files):\n        plt.subplot(3, 4, i + 1)\n        img = cv2.imread(base_dir + 'train\/' + im + '.jpg')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (512, 512))\n        plt.imshow(img)\n        plt.title(f'{lbl}', fontsize = 10)\n    plt.suptitle(f'Train Images: {lbl}', fontsize = 16)\n    plt.show()","4ab596bd":"for lbl in targets:\n    temp = train['StudyInstanceUID'].loc[train[lbl] == 1]\n    display_images(temp.values, lbl)","be070ebf":"train_annot = pd.read_csv(base_dir + 'train_annotations.csv')\ntrain_annot","d84cbd38":"import ast\n\ndef display_images_annot(temp, lbl):\n    files = np.random.choice(temp['StudyInstanceUID'], 3)\n\n    plt.figure(figsize = (12, 8))\n\n    for i, uid in enumerate(files):\n        plt.subplot(1, 3, i + 1)\n        img = cv2.imread(base_dir + 'train\/' + uid + '.jpg')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        plt.imshow(img)\n        \n        annot = train_annot[train_annot['StudyInstanceUID'] == uid]['data'].values[0]\n        annot = np.array(ast.literal_eval(annot))\n        plt.scatter(annot[:, 0], annot[:, 1])\n        plt.title(f'{lbl}', fontsize = 10)\n    plt.suptitle(f'{lbl} with Annotations', fontsize = 16, y = 0.75)\n    plt.show()","33a41cc3":"for lbl in targets:\n    temp = train_annot[train_annot['label'] == lbl]\n    display_images_annot(temp, lbl)","d9eabe89":"train_more = train[train[targets].sum(axis = 1) > 1]\ntrain_no = train[train[targets].sum(axis = 1) == 0]\nprint('Number of Images with more than one labels: ', len(train_more))\nprint('Number of Images with NO labels: ', len(train_no))","1da41297":"#print(train_more[targets].loc[5].eq(1).astype(int).sum())","b36c3f45":"def display_images_more(df):\n    idx = np.random.choice(df.index, 12)\n    \n    \n    plt.figure(figsize = (16, 12))\n\n    for i, ind in enumerate(idx):\n        plt.subplot(3, 4, i + 1)\n        im = train_more['StudyInstanceUID'].loc[ind]\n        img = cv2.imread(base_dir + 'train\/' + im + '.jpg')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (512, 512))\n        plt.imshow(img)\n        lbl_num = df[targets].loc[5].eq(1).astype(int).sum()\n        plt.title(f'Number of Labels: {lbl_num}', fontsize = 10)\n    plt.suptitle(f'Train Images with more than one label', fontsize = 16)\n    plt.show()","5acb6bb2":"display_images_more(train_more)","55d83d71":"def display_images_no(df):\n    idx = np.random.choice(df.index, 12)\n    \n    \n    plt.figure(figsize = (16, 12))\n\n    for i, ind in enumerate(idx):\n        plt.subplot(3, 4, i + 1)\n        im = train_no['StudyInstanceUID'].loc[ind]\n        img = cv2.imread(base_dir + 'train\/' + im + '.jpg')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (512, 512))\n        plt.imshow(img)\n        #plt.title(f'Number of Labels: {lbl_num}', fontsize = 10)\n    plt.suptitle(f'Train Images with NO labels', fontsize = 16)\n    plt.show()\n    print(train_no['StudyInstanceUID'].values)","8cea577e":"display_images_no(train_no)","7f3abc01":"finish = time()\nprint(strftime(\"%H:%M:%S\", gmtime(finish - start)))","dd4e6cdd":"__Competition Goal__\n\nDetect the presence and position of catheters and lines on chest x-rays","840b7441":"__Visualization with annotations__","c431f5e4":"__Target Labels__\n\n- ETT - Abnormal - endotracheal tube placement abnormal\n- ETT - Borderline - endotracheal tube placement borderline abnormal\n- ETT - Normal - endotracheal tube placement normal\n- NGT - Abnormal - nasogastric tube placement abnormal\n- NGT - Borderline - nasogastric tube placement borderline abnormal\n- NGT - Incompletely Imaged - nasogastric tube placement inconclusive due to imaging\n- NGT - Normal - nasogastric tube placement borderline normal\n- CVC - Abnormal - central venous catheter placement abnormal\n- CVC - Borderline - central venous catheter placement borderline abnormal\n- CVC - Normal - central venous catheter placement normal\n- Swan Ganz Catheter Present","d27386ce":"__Visualization__","cb200237":"__Labels Count__","ee3f76ac":"__Competition Rules__\n\n- CPU Notebook <= 9 hours run-time\n- GPU Notebook <= 9 hours run-time\n- TPUs will not be available for making submissions to this competition. You are still welcome to use them for training models. For a walk-through on how to train on TPUs and run inference\/submit on GPUs, see our TPU Docs.\n- No internet access enabled on submission\n- External data, freely & publicly available, is allowed. This includes pre-trained models.\n- Submission file must be named submission.csv","de990f47":"__Competition Metric__\n\nSubmissions are evaluated on __area under the ROC curve__ between the predicted probability and the observed target.","601dc03b":"__Images with more than one labels__","dc838e16":"__Train Images with no Labels__"}}