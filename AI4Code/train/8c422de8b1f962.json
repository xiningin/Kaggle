{"cell_type":{"60703a10":"code","b248046c":"code","be5c3f1c":"code","0896422e":"code","85ddc981":"code","5b46903e":"code","c45c0345":"code","6ffb44ee":"code","b57518f2":"markdown","f8172d83":"markdown","88a7c82a":"markdown","ed65764d":"markdown","85cb6594":"markdown","27e2b0eb":"markdown","14001a5f":"markdown","7f59920f":"markdown","8e5ccdf2":"markdown"},"source":{"60703a10":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nfrom sklearn.datasets import load_boston\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom IPython.display import HTML","b248046c":"boston=load_boston()\nfeatures=pd.DataFrame(boston.data,columns=boston.feature_names)\ntarget=pd.DataFrame(boston.target,columns=['target'])\ndf=pd.concat([features,target],axis=1)\ndf.describe().round(decimals=2)\n\ncorr=df.corr('pearson')\ncorrs=[abs(corr[attr]['target']) for attr in list(features)]\nl=list(zip(corrs,list(features)))\nl.sort(key=lambda x:x[0],reverse=True)\ncorrs,labels=list(zip(*l))\n\nindex=np.arange(len(labels))\nplt.figure(figsize=(15,5))\nplt.bar(index,corrs,width=0.5)\nplt.xlabel('Attributes')\nplt.ylabel('Correlation with target variable')\nplt.xticks(index,labels)\nplt.show()","be5c3f1c":"X=df['LSTAT'].values\nY=df['target'].values\n\nx_scaler=MinMaxScaler()\nX=x_scaler.fit_transform(X.reshape(-1,1))\nX=X[:,-1]\ny_scaler=MinMaxScaler()\nY=y_scaler.fit_transform(Y.reshape(-1,1))\nY=Y[:,-1]\n\nxtrain,xtest,ytrain,ytest=train_test_split(X,Y,test_size=0.15)","0896422e":"def error(m,x,c,t):\n    N=x.size\n    e=sum(((m*x+c)-t)**2)\n    return e*1\/(2*N)\n\ndef update(m,x,c,t,learning_rate):\n    grad_m=sum(2*((m*x+c)-t)*x)\n    grad_c=sum(2*((m*x+c)-t))\n    m=m-grad_m*learning_rate\n    c=c-grad_c*learning_rate\n    return m,c\ndef gradient_descent(init_m,init_c,x,t,learning_rate,iterations,error_threshold):\n    m=init_m\n    c=init_c\n    error_values=list()\n    mc_values=list()\n    for i in range(iterations):\n        e=error(m,x,c,t)\n        if e<error_threshold:\n            print('Error less than threshold,stop gradient descent')\n            break\n        error_values.append(e)\n        m,c=update(m,x,c,t,learning_rate)\n        mc_values.append((m,c))\n    return m,c,error_values,mc_values\n\ninit_m=0.5\ninit_c=0.6\nlearning_rate=0.001\niterations=70\nerror_threshold=0.0001\nm,c,error_values,mc_values=gradient_descent(init_m,init_c,xtrain,\n                ytrain,learning_rate,iterations,error_threshold)","85ddc981":"mc_values_anim=mc_values[0:250:5]\nfig,ax=plt.subplots()\nln,=plt.plot([],[],'ro-',animated=True)\ndef init():\n    plt.scatter(xtest,ytest,color='g')\n    ax.set_xlim(0,1.0)\n    ax.set_ylim(0,1.0)\n    return ln,\ndef update_frame(frame):\n    m,c=mc_values_anim[frame]\n    x1,y1=-0.5,m*-0.5+c\n    x2,y2=1.5,m*1.5+c\n    ln.set_data([x1,x2],[y1,y2])\n    return ln,\nanim=FuncAnimation(fig,update_frame,\n        frames=range(len(mc_values_anim)),init_func=init,blit=True)\nHTML(anim.to_html5_video())","5b46903e":"plt.plot(np.arange(len(error_values)),error_values)\nplt.ylabel('Error')\nplt.xlabel('Iterations')","c45c0345":"predicted=(m*xtest)+c\nmean_absolute_error(ytest,predicted)","6ffb44ee":"xtest_scaled=x_scaler.inverse_transform(xtest.reshape(-1,1))\nytest_scaled=y_scaler.inverse_transform(ytest.reshape(-1,1))\npredicted_scaled=y_scaler.inverse_transform(predicted.reshape(-1,1))\nxtest_scaled=xtest_scaled[:,-1]\nytest_scaled=ytest_scaled[:,-1]\npredicted_scaled=predicted_scaled[:,-1]\n\np=pd.DataFrame(list(zip(xtest_scaled,ytest_scaled,predicted_scaled)),\n               columns=['x','y','predicted'])\np=p.round(decimals=2)\np.head()","b57518f2":"3) Training the Linear regression model and finding M and c Values. ","f8172d83":"2)Normalization of data and Splitting the dataset","88a7c82a":"Denormalize the values","ed65764d":"Data Animation","85cb6594":"1) Loading the dataset and finding the correlation","27e2b0eb":"Error curve","14001a5f":"5) Prediction of prices","7f59920f":"4) Data Visualization","8e5ccdf2":"Importing the modules"}}