{"cell_type":{"7e76c9c2":"code","494b5097":"code","b892e783":"code","9be9dd11":"code","47037dd2":"code","8451f14e":"code","c253e670":"code","a5911c91":"code","478526ae":"code","45f369f6":"code","8f94308c":"code","f4135d7b":"code","7874c5db":"code","6b2c141f":"code","7395b457":"code","26fdd232":"code","62ebfba9":"code","4fb58b19":"code","c3b27ebd":"code","287e3457":"code","ec88fc20":"code","6b0636f1":"code","cc8069df":"code","8c11c156":"code","aea49ab9":"code","df1b4736":"code","f8ab8f18":"code","73dc018d":"code","5123aab3":"code","0a329d2b":"code","407081c3":"code","9deb419c":"code","c241af63":"code","743b9471":"code","ea696bfd":"code","19297128":"code","8a1afcad":"code","b2ad3934":"code","aa169c81":"markdown","30484f1c":"markdown","bae0a7bf":"markdown","6a2e4d27":"markdown","04ebb5b7":"markdown","030ec03e":"markdown","91fb0b2b":"markdown","d1a13664":"markdown","c3505a9e":"markdown"},"source":{"7e76c9c2":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.colors import ListedColormap\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier, NeighborhoodComponentsAnalysis, LocalOutlierFactor\nfrom sklearn.decomposition import PCA\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","494b5097":"data = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndata.head()","b892e783":"data.drop([\"id\",\"Unnamed: 32\"], axis =1, inplace = True)","9be9dd11":"data = data.rename(columns = {\"diagnosis\" : \"target\"})","47037dd2":"plt.figure(figsize=(10,8))\nsns.countplot(data['target'])\nprint(data.target.value_counts())","8451f14e":"data['target'] = [1 if i.strip() == 'M' else  0 for i in data['target']]","c253e670":"data.info()","a5911c91":"data.describe()","478526ae":"corr_matrix = data.corr()\nplt.figure(figsize =(30,20))\nsns.clustermap(corr_matrix, annot = True, fmt = \".2f\")\nplt.show()","45f369f6":"threshold = 0.7\nfiltre = np.abs(corr_matrix['target']) > threshold\ncorr_features = corr_matrix.columns[filtre].tolist()\nplt.figure(figsize =(15,15))\nsns.clustermap(data[corr_features].corr(),annot=True, fmt=\".2f\")\nplt.title(\"Correlation Between Features w Corr Threshold 0.70\")\nplt.show()","8f94308c":"data_melted = pd.melt(data, id_vars=\"target\", var_name=\"features\", value_name=\"value\")\ndata_melted.head(10)","f4135d7b":"plt.figure(figsize = (20,15))\nsns.boxplot(x=\"features\", y=\"value\", hue=\"target\", data = data_melted)\nplt.xticks(rotation = 90)\nplt.show()","7874c5db":"plt.figure(figsize =(20,20))\nsns.pairplot(data[corr_features], diag_kind = \"kde\", markers = \"+\", hue = \"target\")\nplt.show()","6b2c141f":"y = data['target']\nX = data.drop(['target'],axis = 1)\ncolumns = X.columns.tolist()\n\nout_detect = LocalOutlierFactor()\ny_pred = out_detect.fit_predict(X)\nX_score = out_detect.negative_outlier_factor_\n\noutlier_score = pd.DataFrame()\noutlier_score['score'] = X_score","7395b457":"y_pred  # -1 = outlier | 1 = inlier","26fdd232":"X_score","62ebfba9":"plt.figure(figsize = (10,8))\nplt.scatter(X.iloc[:,0],X.iloc[:,1], color = 'k', s=3, label = 'Data Points' )","4fb58b19":"radius = (X_score.max() - X_score) \/ (X_score.max() - X_score.min())\noutlier_score[\"radius\"] = radius\nplt.figure(figsize = (15,12))\nplt.scatter(X.iloc[:,0],X.iloc[:,1], color = 'k', s=3, label = 'Data Points' )\nplt.scatter(X.iloc[:,0], X.iloc[:,1], s=1000*radius, edgecolors=\"r\", facecolors = \"none\", label = \"Outlier Score\")\nplt.legend()\nplt.show()","c3b27ebd":"threshold = -2\nfiltre = outlier_score[\"score\"] < threshold\noutlier_index = outlier_score[filtre].index.tolist()\nplt.figure(figsize = (15,12))\nplt.scatter(X.iloc[outlier_index,0],X.iloc[outlier_index,1], color = 'blue', facecolors = \"blue\", label = 'Outlier' )\nplt.scatter(X.iloc[:,0],X.iloc[:,1], color = 'k', s=3, label = 'Data Points' )\nplt.scatter(X.iloc[:,0], X.iloc[:,1], s=1000*radius, edgecolors=\"r\", facecolors = \"none\", label = \"Outlier Score\")\nplt.legend()\nplt.show()","287e3457":"X = X.drop(outlier_index)\ny = y.drop(outlier_index).values","ec88fc20":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,  random_state = 66)","6b0636f1":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","cc8069df":"X_train_df = pd.DataFrame(X_train, columns = columns)\nX_train_df.describe()","8c11c156":"X_train_df['target'] = y_train\ndata_melted = pd.melt(X_train_df, id_vars=\"target\", var_name=\"features\", value_name=\"value\")\n\n\nplt.figure(figsize = (16,12))\nsns.boxplot(x=\"features\", y = \"value\", hue = \"target\", data = data_melted)\nplt.xticks(rotation = 90)\nplt.show()","aea49ab9":"plt.figure(figsize =(20,20))\nsns.pairplot(X_train_df[corr_features], diag_kind=\"kde\", markers = \"+\", hue = \"target\")\nplt.show()","df1b4736":"knn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(X_train,y_train)\ny_pred = knn.predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred)\nacc = accuracy_score(y_test, y_pred)\nprint(\"Accuracy : \", acc)\nprint(\"Confusion Matrix : \",cm)","f8ab8f18":"def KNN_Best_Params(x_train,x_test,y_train,y_test):\n    k_range = list(range(1,30))\n    weight_options = [\"uniform\", \"distance\"]\n    print()\n    param_grid = dict(n_neighbors = k_range, weights = weight_options)\n    \n    knn = KNeighborsClassifier()\n    grid = GridSearchCV(knn, param_grid, cv = 10, scoring = \"accuracy\")\n    grid.fit(x_train, y_train)\n    \n    print(\"Best training Score : {} with parameters : {}\".format(grid.best_score_, grid.best_params_))\n    print()\n    \n    knn = KNeighborsClassifier(**grid.best_params_)\n    knn.fit(x_train, y_train)\n    \n    y_pred_train = knn.predict(x_train)\n    y_pred_test = knn.predict(x_test)\n    \n    cm_train = confusion_matrix(y_train, y_pred_train)\n    cm_test = confusion_matrix(y_test, y_pred_test)\n    \n    acc_train = accuracy_score(y_train, y_pred_train)\n    acc_test = accuracy_score(y_test, y_pred_test)\n    \n    print(\"Train Acc : {} , Test Acc : {}\".format(acc_train, acc_test))\n    print()\n    print(\"Train Confusion Matrix \", cm_train)\n    print()\n    print(\"Test Confusion Matrix \", cm_test)\n    \n    return grid","73dc018d":"grid = KNN_Best_Params(X_train, X_test, y_train, y_test)","5123aab3":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\npca = PCA(n_components=2)\npca.fit(X_scaled)\nX_reduced_pca = pca.transform(X_scaled)\n\npca_data = pd.DataFrame(X_reduced_pca, columns = [\"p1\",\"p2\"])\npca_data['target'] = y","0a329d2b":"plt.figure(figsize=(20,10))\nsns.scatterplot(x=\"p1\", y=\"p2\", hue=\"target\",data=pca_data)","407081c3":"X_train_pca, X_test_pca, y_train_pca, y_test_pca = train_test_split(X_reduced_pca, y, test_size = 0.2,  random_state = 66)","9deb419c":"grid_pca = KNN_Best_Params(X_train_pca, X_test_pca, y_train_pca, y_test_pca)","c241af63":"# visualize\ncmap_light = ListedColormap(['orange',  'cornflowerblue'])\ncmap_bold = ListedColormap(['darkorange', 'darkblue'])\n\nh = .05 # step size in the mesh\nX = X_reduced_pca\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                     np.arange(y_min, y_max, h))\n\nZ = grid_pca.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\nZ = Z.reshape(xx.shape)\nplt.figure(figsize=(20,12))\nplt.pcolormesh(xx, yy, Z, cmap=cmap_light)\n\n# Plot also the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold,\n            edgecolor='k', s=20)\nplt.xlim(xx.min(), xx.max())\nplt.ylim(yy.min(), yy.max())\nplt.title(\"%i-Class classification (k = %i, weights = '%s')\"\n          % (len(np.unique(y)),grid_pca.best_estimator_.n_neighbors, grid_pca.best_estimator_.weights))\nplt.show()","743b9471":"nca = NeighborhoodComponentsAnalysis(n_components=2, random_state = 42)\nnca.fit(X_scaled, y)\nX_reduced_nca = nca.transform(X_scaled)\n\nnca_data = pd.DataFrame(X_reduced_nca, columns = [\"p1\",\"p2\"])\nnca_data['target'] = y","ea696bfd":"plt.figure(figsize=(20,10))\nsns.scatterplot(x=\"p1\", y=\"p2\", hue=\"target\",data=nca_data)","19297128":"X_train_nca, X_test_nca, Y_train_nca, Y_test_nca = train_test_split(X_reduced_nca, y, test_size = 0.2, random_state = 66)","8a1afcad":"grid_nca = KNN_Best_Params(X_train_nca, X_test_nca, Y_train_nca, Y_test_nca)","b2ad3934":"# visualize \ncmap_light = ListedColormap(['orange',  'cornflowerblue'])\ncmap_bold = ListedColormap(['darkorange', 'darkblue'])\n\nh = .2 # step size in the mesh\nX = X_reduced_nca\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                     np.arange(y_min, y_max, h))\n\nZ = grid_nca.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\nZ = Z.reshape(xx.shape)\nplt.figure(figsize = (20,12))\nplt.pcolormesh(xx, yy, Z, cmap=cmap_light)\n\n# Plot also the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold,\n            edgecolor='k', s=20)\nplt.xlim(xx.min(), xx.max())\nplt.ylim(yy.min(), yy.max())\nplt.title(\"%i-Class classification (k = %i, weights = '%s')\"\n          % (len(np.unique(y)),grid_nca.best_estimator_.n_neighbors, grid_nca.best_estimator_.weights))","aa169c81":"# NCA","30484f1c":"### Best Params","bae0a7bf":"# Base KNN Model","6a2e4d27":"# EDA","04ebb5b7":"## Scale Data","030ec03e":"## PCA Train - Test Split","91fb0b2b":"# Import Libs and Data","d1a13664":"# Train - Test Split","c3505a9e":"# PCA"}}