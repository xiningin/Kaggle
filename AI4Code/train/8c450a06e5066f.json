{"cell_type":{"830f681c":"code","fd4f3cf5":"code","c357270e":"code","b6762a67":"code","b6f5816d":"code","d2911637":"code","068b0def":"code","e82f51ed":"code","2033dd8b":"code","3afd98c9":"code","b4de95f9":"code","01f3869f":"code","770b4ab4":"code","fd0176c6":"code","b3e6c7a1":"code","c74c3aeb":"code","43a7d123":"code","1f9f24dc":"code","b800c8e3":"code","391a748f":"code","fe1cc4ff":"code","303a49a5":"code","2b926b55":"code","9baa7730":"code","aec23fc0":"code","53410cc4":"code","409d160e":"code","d4e6f63f":"code","ca08ad9b":"code","6012ae2b":"markdown","6308554e":"markdown","7717b2bd":"markdown","f0453b73":"markdown","fa853424":"markdown","e212ad1a":"markdown","ad268136":"markdown","9c126e77":"markdown"},"source":{"830f681c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd4f3cf5":"data = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\") # read file\n\ndata.head(20) # preview","c357270e":"# correlation map\n\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","b6762a67":"data.info() # general info\n","b6f5816d":"series = data[['Wage']]\nseries.info()","d2911637":"data.describe() #","068b0def":"data[np.logical_and(data[\"Age\"]<= 25, data[\"Overall\"]> 80)]","e82f51ed":"x = data[\"Nationality\"] == \"Turkey\"\ndata[x]\ndata[x].head(20)","2033dd8b":"data[np.logical_and(data[\"Potential\"] >= 76, data[\"Club\"] == \"Fenerbah\u00e7e SK\")]","3afd98c9":"data1 = data[\"Name\"].head()\ndata2 = data[\"Wage\"].head()\ndat_col = pd.concat([data1,data2], axis=1)\ndat_col","b4de95f9":"data.dtypes","01f3869f":"# lets convert object(str) to categorical and int to float.\ndata['Age'] = data['Age'].astype('int64')\ndata['Overall'] = data['Overall'].astype('float')\ndata.dtypes","770b4ab4":"# Lets chech Type 2\ndata[\"Age\"].value_counts(dropna =False)\n","fd0176c6":"data_new = data.head()\ndata_new","b3e6c7a1":"#lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new, id_vars=\"Name\", value_vars=[\"Overall\",\"Potential\"])\nmelted","c74c3aeb":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index=\"Name\", columns=\"variable\", values=\"value\")","43a7d123":"data1 = data.head()\ndata2 = data.tail()\ndata_con_row = pd.concat([data1,data2], axis=0, ignore_index=True)# axis = 0 : adds dataframes in row\ndata_con_row","1f9f24dc":"data1 = data[\"Overall\"].head()\ndata2 = data[\"Potential\"].head()\ndata_con_rol = pd.concat([data1,data2], axis =1)\ndata_con_rol","b800c8e3":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ndata3 = data.head()\n# In order to practice lets take head of pokemon data and add it a time list\ndate_list = [\"1998-04-13\",\"1998-04-14\",\"1998-05-20\",\"1999-05-25\",\"1999-05-26\"]\ndata_object = pd.to_datetime(date_list)\ndata3[\"date\"] = data_object\n# lets make date as index\ndata3 = data3.set_index(\"date\")\ndata3","391a748f":"data3.resample(\"A\").mean()","fe1cc4ff":"# Lets resample with month\ndata3.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","303a49a5":"data3.resample(\"M\").mean().interpolate(\"linear\")","2b926b55":"data.plot(kind = \"line\", x = \"Wage\", y = \"Overall\", c = \"orange\", alpha = 1.0, figsize = (12,12), grid = True )\nplt.ylim(80)\nplt.xlabel(\"Wage\")\nplt.ylabel(\"Overall\")\nplt.title(\"Wage and Overall\")\nplt.show()","9baa7730":"# scatter plot Wage vs. Overall\ndata.plot(kind = \"scatter\", color = \"r\", x = \"Overall\", y = \"Wage\",figsize = (20,20))\nplt.ylabel(\"Wage\")\nplt.xlabel(\"Overall\")\nplt.title(\"Scatter Plot  Wage vs. Overall\")\nplt.show()","aec23fc0":"# line plot\ndata.Potential.plot(kind = \"line\", color= \"g\", label = \"Potential\", Linewidth = 1, grid= True, alpha = 0.5, linestyle = \":\",figsize = (15,15))\ndata.Overall.plot(kind = \"line\", color = \"b\",label = \"Overall\", Linewidth = 1, grid = True,alpha= 0.5, linestyle = \"-.\",figsize = (15,15))\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.legend()\nplt.title(\"Line Plot\")\nplt.show()\n","53410cc4":"# scatter plot Potential vs. Overall\ndata.plot(kind = \"scatter\", color = \"r\", x = \"Potential\", y = \"Overall\",figsize = (15,15))\nplt.xlabel(\"Potential\")\nplt.ylabel(\"Overall\")\nplt.title(\"Scatter Plot Potential vs. Overall\")\nplt.show()","409d160e":" # histogram Overall\ndata.Overall.plot(kind = \"hist\",bins = 50,figsize = (15,15), color = \"g\")\nplt.title(\"Histogram Overall\")\nplt.show()","d4e6f63f":"# histogram Potential\ndata.Potential.plot(kind = \"hist\", bins = 50, color = \"pink\", figsize = (15,15))\nplt.title(\"Histogram Potential\")\nplt.show()\n","ca08ad9b":"# histogram Age\n\ndata.Age.plot(kind=\"hist\", bins=30, color=\"blue\", figsize=(15,15), label=\"Age\")\nplt.title(\"Histogram Age\")\nplt.show()\n","6012ae2b":"Overall vs Potential","6308554e":"Pivot Data","7717b2bd":"# Pandas","f0453b73":"CONCATENATING DATA","fa853424":"INDEXING PANDAS TIME SERIES","e212ad1a":"# RESAMPLING PANDAS TIME SERIES\n*  Resampling: statistical method over different time intervals\n* Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html","ad268136":"#  Matplotlib","9c126e77":"Tidy data"}}