{"cell_type":{"766efb7d":"code","f18aa7e6":"code","083f195c":"code","01cd4454":"code","0c9cdc55":"code","ab54302b":"code","a9aef621":"code","06a4c875":"code","b93a0eee":"code","199dc3a7":"code","ca8538be":"code","c91b902d":"code","6aab4044":"code","8e3b9e40":"code","1d1ca453":"code","0e8614f3":"code","e08274a3":"code","ae8df37a":"code","f0de35a0":"code","175a314a":"code","c746f735":"code","a3bf455a":"code","b82cea1c":"code","35c0ff9a":"code","87af95b5":"code","3f8070a6":"code","b7c5aff7":"code","1672243a":"code","099f8169":"code","fb0aa82b":"code","41113b64":"code","1aa473e4":"code","793ffdbb":"code","9f05fb7b":"code","7f3da89e":"code","52d4d2c9":"code","ccbd5ce9":"code","25dcc8b5":"code","c0a8d661":"code","6f18c37d":"code","1982d916":"code","5b9e2b61":"code","8633030c":"code","f5d0e8d5":"code","7e147300":"code","9be3cb7f":"code","7624e87c":"code","b7e1e650":"code","9efa4127":"code","c0d59f75":"markdown","72a3b82f":"markdown","038b7229":"markdown","4d19af6c":"markdown","5663a665":"markdown","63703979":"markdown","1a92252b":"markdown","00048809":"markdown","f18a9f51":"markdown","7efe1210":"markdown","c2908e09":"markdown","ef9757a9":"markdown","1af101ce":"markdown","9ec97c33":"markdown","ffca14b4":"markdown","c81199dc":"markdown","cbffb347":"markdown","51f3e792":"markdown","01d276c7":"markdown","78a83993":"markdown","58f680cc":"markdown","f84a8945":"markdown","11aaf5ab":"markdown","d1fed0f8":"markdown","7a1cb7ca":"markdown","58b11a0f":"markdown","60d1d28a":"markdown","54241a8b":"markdown","f964e220":"markdown","b7ae25ad":"markdown","de22a9d6":"markdown","4fa7cce3":"markdown","c9310eb1":"markdown","029120bd":"markdown","1cb17f42":"markdown","a68d8010":"markdown","5e19d62f":"markdown","efa1d77f":"markdown","d39dccb9":"markdown"},"source":{"766efb7d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nplt.style.use('fivethirtyeight')","f18aa7e6":"games = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\ngames","083f195c":"def downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('{:.1f}% Compressed'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","01cd4454":"games = downcast(games)","0c9cdc55":"def resumetable(df):\n    print(f'Shape : {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns=['Data Type'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns={'index': 'Feature'})\n    summary['Num of null'] = df.isnull().sum().values\n    summary['Num of unique'] = df.nunique().values\n    summary['First value'] = df.loc[0].values\n    summary['Second value'] = df.loc[1].values\n    summary['Third value'] = df.loc[2].values\n    return summary\n\nresumetable(games)","ab54302b":"def write_percent(ax, total_size):\n    '''Traverse the figure object and display the ratio at the top of the bar graph.'''\n    for patch in ax.patches:\n        height = patch.get_height() # Figure height (number of data)\n        width = patch.get_width() # Figure width\n        left_coord = patch.get_x() # The x-axis position on the left edge of the figure\n        percent = height\/total_size*100 # percent\n        \n        # Type text in the (x, y) coordinates\n        ax.text(x=left_coord + width\/2.0, # x-axis position\n                y=height + total_size*0.001, # y-axis position\n                s=f'{percent:1.1f}%', # Text\n                ha='center') # in the middle","a9aef621":"games['month'] = games['gameDate'].apply(lambda x: int(x.split('\/')[0]))\ngames['day'] = games['gameDate'].apply(lambda x: int(x.split('\/')[1]))\ngames['hour'] = games['gameTimeEastern'].apply(lambda x: int(x.split(':')[0]))","06a4c875":"mpl.rc('font', size=15) # Set font size\nplt.figure(figsize=(7, 6)) # Set figure size\n\nax = sns.countplot(x='season', data=games)\nwrite_percent(ax, len(games)) \nax.set_title('Number of games for season');","b93a0eee":"mpl.rc('font', size=15)\nplt.figure(figsize=(8, 6))\n\nax = sns.countplot(x='month', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for month');","199dc3a7":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='day', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for day');","ca8538be":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='gameTimeEastern', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for gameTimeEastern');\nax.tick_params('x', labelrotation=30) # rotate 30 degree of x label","c91b902d":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='hour', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for hour');","6aab4044":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='week', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for week');","8e3b9e40":"players = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\nplayers","1d1ca453":"players = downcast(players)","0e8614f3":"resumetable(players)","e08274a3":"check = players['height'].str.split('-', expand=True)\n\ncheck.columns = ['first', 'second']\n\ncheck.loc[(check['second'].notnull()), 'first'] = check[check['second'].notnull()]['first'].astype(np.int16) * 12 + check[check['second'].notnull()]['second'].astype(np.int16)","ae8df37a":"players['height'] = check['first']\nplayers['height'] = players['height'].astype(np.float32)\nplayers['height'] \/= 12\n\nplayers","f0de35a0":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 6))\n\nax = sns.distplot(players['height'], bins=12)\nax.set_title('Height Distribution');","175a314a":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 6))\n\nax = sns.distplot(players['weight'])\nax.set_title('Weight Distribution');","c746f735":"top_players_colleage = players['collegeName'].value_counts()[:20].reset_index()\ntop_players_colleage.columns = ['collageName', 'numberOfPlayers']","a3bf455a":"mpl.rc('font', size=10) \nplt.figure(figsize=(15, 12))\n\nax = sns.barplot(x='numberOfPlayers', y='collageName', data=top_players_colleage)\nax.set_title('Number of players for collegeName');","b82cea1c":"players['birthYear'] = 0","35c0ff9a":"players.dropna(subset=['birthDate'], inplace=True)","87af95b5":"for idx, row in players.iterrows():\n    if len(row['birthDate'].split('\/')) == 3: # ex) 05\/17\/1994 \n        players.loc[idx, 'birthYear'] = row['birthDate'].split('\/')[2]\n        \n    elif len(row['birthDate'].split('-')) == 3: # ex) 1995-05-05\n        players.loc[idx, 'birthYear'] = row['birthDate'].split('-')[0]","3f8070a6":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(players['birthYear'], bins=25)\nax.set_title('Players birth year Distribution');","b7c5aff7":"players['birthYear'].min(), players['birthYear'].max()","1672243a":"plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\n\nplays","099f8169":"plays = downcast(plays)","fb0aa82b":"resumetable(plays)","41113b64":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='quarter', data=plays)\nwrite_percent(ax, len(plays))\nax.set_title('Number of plays of every quarter');","1aa473e4":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='down', data=plays)\nwrite_percent(ax, len(plays))\nax.set_title('Number of plays of every down');","793ffdbb":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='yardsToGo', data=plays)\nax.set_title('Number of plays for every yards to go category');","9f05fb7b":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['playResult'], bins=25);\nax.set_title('playResult Distribution'); ","7f3da89e":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['preSnapHomeScore'], bins=12);\nax.set_title('preSnapHomeScore Distribution'); ","52d4d2c9":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['preSnapVisitorScore'], bins=12);\nax.set_title('preSnapVisitorScore Distribution'); ","ccbd5ce9":"tracking2018 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\ntracking2018.head()","25dcc8b5":"tracking2018 = downcast(tracking2018)","c0a8d661":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018123000 and playId == 36').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","6f18c37d":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091001 and playId == 4033').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","1982d916":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"CB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","5b9e2b61":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"LB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","8633030c":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"RB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","f5d0e8d5":"import matplotlib.patches as patches\nfrom matplotlib.patches import Arc\nfrom matplotlib import pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Change size of the figure\nplt.rcParams['figure.figsize'] = [12, 8]\ndef drawPitch(width, height, color=\"w\"):\n    fig = plt.figure()\n    ax = plt.axes(xlim=(-10, width + 30), ylim=(-15, height + 5))\n    plt.axis('off')\n\n    # Grass around pitch\n    rect = patches.Rectangle((-10, -5), width + 40, height + 10, linewidth=1, facecolor='#3f995b', capstyle='round')\n    ax.add_patch(rect)\n    ###################\n\n    # Pitch boundaries\n    rect = plt.Rectangle((0, 0), width + 20, height, ec=color, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    ###################\n\n    # vertical lines - every 5 yards\n    for i in range(21):\n        plt.plot([10 + 5 * i, 10 + 5 * i], [0, height], c=\"w\", lw=2)\n    ###################\n        \n    # distance markers - every 10 yards\n    for yards in range(10, width, 10):\n        yards_text = yards if yards <= width \/ 2 else width - yards\n        # top markers\n        plt.text(10 + yards - 2, height - 7.5, yards_text, size=15, c=\"w\", weight=\"bold\")\n        # botoom markers\n        plt.text(10 + yards - 2, 7.5, yards_text, size=15, c=\"w\", weight=\"bold\", rotation=180)\n    ###################\n\n    # yards markers - every yard\n    # bottom markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [1, 3], color=\"w\", lw=2)\n\n    # top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - 1, height - 3], color=\"w\", lw=2)\n\n    # middle bottom markers\n    y = (height - 18.5) \/ 2\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [y, y + 2], color=\"w\", lw=2)\n\n    # middle top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - y, height - y - 2], color=\"w\", lw=2)\n    ###################\n\n    # draw home end zone\n    plt.text(2.5, (height - 15) \/ 2, \"HOME\", size=30, c=\"w\", weight=\"bold\", rotation=90)\n    rect = plt.Rectangle((0, 0), 10, height, ec=color, fc=\"#0064dc\", lw=2)\n    ax.add_patch(rect)\n\n    # draw away end zone    \n    plt.text(111, (height - 15) \/ 2, \"AWAY\", size=30, c=\"w\", weight=\"bold\", rotation=-90)\n    rect = plt.Rectangle((width + 10, 0), 10, height, ec=color, fc=\"#c80014\", lw=2)\n    ax.add_patch(rect)\n    ###################\n    \n    # draw extra spot point\n    # left\n    y = (height - 3) \/ 2\n    plt.plot([10 + 2, 10 + 2], [y, y + 3], c=\"w\", lw=2)\n    \n    # right\n    plt.plot([width + 10 - 2, width + 10 - 2], [y, y + 3], c=\"w\", lw=2)\n    ###################\n    \n    # draw goalpost\n    goal_width = 6 # yards\n    y = (height - goal_width) \/ 2\n    # left\n    plt.plot([0, 0], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    # right\n    plt.plot([width + 20, width + 20], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    \n    return fig, ax","7e147300":" fig, ax = drawPitch(100, 53.3)","9be3cb7f":"games_ids = {}\ngames_tracking2018 = tracking2018.groupby(by=[\"gameId\"])\nfor game, data in games_tracking2018:\n    games_ids[game] = list(set(data.playId.tolist()))","7624e87c":"def extract_one_game(game_id, play_id, df):\n    game = df[(df.gameId == game_id) & (df.playId == play_id)]\n    home = {}\n    away = {}\n    balls = []\n    \n    players = game.sort_values(['frameId'], ascending=True).groupby('nflId')\n    for id, dx in players:\n        jerseyNumber = int(dx.jerseyNumber.iloc[0])\n        if dx.team.iloc[0] == \"home\":\n            home[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n        elif dx.team.iloc[0] == \"away\":\n            away[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n\n\n    ball_df = game.sort_values(['frameId'], ascending=True) \n    ball_df = ball_df[ball_df.team == \"football\"]\n    balls = list(zip(ball_df.x.tolist(), ball_df.y.tolist()))\n    return home, away, balls","b7e1e650":"from matplotlib import animation\nfrom IPython.display import HTML\ndef animate_one_play(game_id, play_id, df):\n    fig, ax = drawPitch(100, 53.3)\n    \n    home, away, balls = extract_one_game(game_id, play_id, df)\n\n    team_left, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"r\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    team_right, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"b\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    ball, = ax.plot([], [], 'o', markersize=10, markerfacecolor=\"black\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    drawings = [team_left, team_right, ball]\n\n    def init():\n        team_left.set_data([], [])\n        team_right.set_data([], [])\n        ball.set_data([], [])\n        return drawings\n\n    def draw_teams(i):\n        X = []\n        Y = []\n        for k, v in home.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_left.set_data(X, Y)\n        \n        X = []\n        Y = []\n        for k, v in away.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_right.set_data(X, Y)\n\n    def animate(i):\n        draw_teams(i)\n        \n        x, y = balls[i]\n        ball.set_data([x, y])\n        return drawings\n    \n    # !May take a while!\n    anim = animation.FuncAnimation(fig, animate, init_func=init,\n                                   frames=len(balls), interval=100, blit=True)\n\n    return HTML(anim.to_html5_video())","9efa4127":"animate_one_play(2018123000, 36, tracking2018)","c0d59f75":"There are NA values in birthDate so that we should drop them","72a3b82f":"#### The game was held from September to January. There are especially many games in December, and they are rarely held in January","038b7229":"## Function to create football field\n","4d19af6c":"Downcast is a great skill to compress data size which helps to save memory.","5663a665":"Extract birth year","63703979":"#### As the years go by, the number of games increases","1a92252b":"### Convert all heights to feet","00048809":"#### gameId == 2018091609 and position == \"RB\"","f18a9f51":"## Make derivative features (month, day, hour)","7efe1210":"### **Game data:** The games.csv contains the teams playing in each game. The key variable is gameId.\n\n* **gameId:** Game identifier, unique (numeric)\n\n* **gameDate:** Game Date (time, mm\/dd\/yyyy)\n\n* **gameTimeEastern:** Start time of game (time, HH:MM:SS, EST)\n\n* **homeTeamAbbr:** Home team three-letter code (text)\n\n* **visitorTeamAbbr:** Visiting team three-letter code (text)\n\n* **week:** Week of game (numeric)","c2908e09":"### PLEASE UPVOTE if you like this notebook. It will keep me motivated to update my notebook.","ef9757a9":"<a id=\"1\"><\/a>\n<h2 style='background:transparent; color:black'><center>1. Game Data<center><h2>","1af101ce":"This function is taken from the post created by JARON_MICHAL. See the post [here](https:\/\/www.kaggle.com\/jaronmichal\/tracking-data-visualization)","9ec97c33":"playResult: Net yards gained by the offense, including penalty yardage (numeric)","ffca14b4":"#### gameId == 2018091609 and position == \"LB\"","c81199dc":"<a id=\"3\"><\/a>\n<h2 style='background:transparent; border:0; color:black'><center>4. Tracking Data<center><h2>","cbffb347":"## Function for writing percent at the top of the bar graph","51f3e792":"<h1><center>NFL Big Data Bowl Basic EDA for beginner<\/center><\/h1>\n\n<center><img src=\"https:\/\/deadline.com\/wp-content\/uploads\/2021\/01\/NFL-ball.jpg?crop=0px%2C33px%2C1226px%2C687px&resize=681%2C383\"><\/center>","01d276c7":"#### There are lots of null values in `returnerld`, `kickBlockerId`, `penaltyCodes`, `penaltyJerseyNumbers`, `penaltyYards`, `passResult`, `kickReturnYardage` features","78a83993":"## Function for making feature summary ","58f680cc":"#### gameId == 2018091001 and playId == 4033","f84a8945":"### **Play data:** The plays.csv file contains play-level information from each game. The key variables are gameId and playId\n- gameId: Game identifier, unique (numeric)\n- playId: Play identifier, not unique across games (numeric)\n- playDescription: Description of play (text)\n- quarter: Game quarter (numeric)\n- down: Down (numeric)\n- yardsToGo: Distance needed for a first down (numeric)\n- possessionTeam: Team punting, placekicking or kicking off the ball (text)\n- specialTeamsPlayType: Formation of play: Extra Point, Field Goal, Kickoff or Punt (text)\n- specialTeamsPlayResult: Special Teams outcome of play dependent on play type: Blocked Kick Attempt, Blocked Punt, Downed, Fair Catch, Kick Attempt Good, Kick Attempt No Good, Kickoff Team Recovery, Muffed, Non-Special Teams Result, Out of Bounds, Return or Touchback (text)\n- kickerId: nflId of placekicker, punter or kickoff specialist on play (numeric)\n- returnerId: nflId(s) of returner(s) on play if there was a special teams return. Multiple returners on a play are separated by a ; (text)\n- kickBlockerId: nflId of blocker of kick on play if there was a blocked field goal or blocked punt (numeric)\n- yardlineSide: 3-letter team code corresponding to line-of-scrimmage (text)\n- yardlineNumber: Yard line at line-of-scrimmage (numeric) \n- gameClock: Time on clock of play (MM:SS)\n- penaltyCodes: NFL categorization of the penalties that occurred on the play. Multiple penalties on a play are separated by a ; (text)\n- penaltyJerseyNumber: Jersey number and team code of the player committing each penalty. Multiple penalties on a play are separated by a ; (text)\n- penaltyYards: yards gained by possessionTeam by penalty (numeric)\n- preSnapHomeScore: Home score prior to the play (numeric)\n- preSnapVisitorScore: Visiting team score prior to the play (numeric)\n- passResult: Scrimmage outcome of the play if specialTeamsPlayResult is \"Non-Special Teams Result\" (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass, R: Scramble, ' ': Designed Rush, text)\n- kickLength: Kick length in air of kickoff, field goal or punt (numeric)\n- kickReturnYardage: Yards gained by return team if there was a return on a kickoff or punt (numeric)\n- playResult: Net yards gained by the kicking team, including penalty yardage (numeric)\n- absoluteYardlineNumber: Location of ball downfield in tracking data coordinates (numeric)","11aaf5ab":"<a id=\"3\"><\/a>\n<h2 style='background:transparent; border:0; color:black'><center>3. Play Data<center><h2>","d1fed0f8":"#### What are you trying to do in this notebook ?\n\nIn this notebook I will predict how many yards a team will gain on a rushing play in an NFL regular season game. I will loop through a series of rushing plays; for each play. I'll use the information that is provided in this notebook and it will predict how many yards the team will gain on the play as a cumulative probability distribution. Once I'll make that prediction, I can move on to the next rushing play.\n\n#### Why are you trying it ?\n\nThis competition is different from most Kaggle Competitions in that:\n\n* In this kaggle notebook I may not other data sources, GPU, or internet access.\n* This is a two-stage competition. In Stage One I can edit my Notebooks and improve my model, where Public Leaderboard scores are based on my predictions on rushing play.\n* The purpose of this competition is to control the flow of information that is to ensure the future data to make predictions for the current rushing play.","7a1cb7ca":"## Function for Downcast","58b11a0f":"### Create birth year feature","60d1d28a":"preSnapHomeScore: Home score prior to the play (numeric)","54241a8b":"#### Those born in 1995 are the most common","f964e220":"## Data Visualization","b7ae25ad":"#### 2018123000 and playId == 36","de22a9d6":"#### Are the proposed findings actionable?\n#### Is this a way of looking at tracking data that is novel?\n\nMy notebook is to generate actionable, practical, and novel insights from player tracking data that corresponds to special teams play. \n\nThere are several points but are not limited to:\n\n* Create a new special teams metric. \n* Quantify special teams strategy. \n* Rank special teams players. \nSubmissions that examine one idea more thoroughly are preferred versus those that examine several ideas somewhat thoroughly.\n\n\n#### Is this project creative?\n\nWell, this competition has both creative and analytical properties.","4fa7cce3":"## Function to create animation","c9310eb1":"#### The most games were held at 1, 4, and 8","029120bd":"This function is taken from the post created by ROB MULLA. See the post [here](https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-2022-twitch-stream-eda). Thank you ROB MULLA :)","1cb17f42":"#### gameId == 2018091609 and position == \"CB\"","a68d8010":"<a id=\"2\"><\/a>\n<h2 style='background:transparent; border:0; color:black'><center>2. Player Data<center><h2>","5e19d62f":"preSnapVisitorScore: Visiting team score prior to the play (numeric)","efa1d77f":"### **Player data:** The players.csv file contains player-level information from players that participated in any of the tracking data files. The key variable is nflId\n\n* **nflId:** Player identification number, unique across players (numeric)\n\n* **height:** Player height (text)\n\n* **weight:** Player weight (numeric)\n\n* **birthDate:** Date of birth (YYYY-MM-DD)\n\n* **collegeName:** Player college (text)\n\n* **position:** Player position (text)\n\n* **displayName:** Player name (text)","d39dccb9":"#### The oldest player was born in 1972, and the youngest player was born in 1999"}}