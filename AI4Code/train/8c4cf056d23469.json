{"cell_type":{"6d2a198b":"code","9091755d":"code","738876c3":"code","2a24fdc2":"code","5cf62dca":"code","7bb50656":"code","712f1f40":"code","7d50ddee":"code","985e22df":"code","903996ed":"code","ca091c9b":"code","671075c4":"code","ce97e585":"code","2e036684":"code","73d0e868":"code","b148f58b":"code","f4e5cf0c":"code","fd1afa31":"code","97d9c715":"code","6c339067":"code","9fd75e65":"code","8a53d79f":"code","905eeb36":"code","670fc7ae":"code","a504e315":"code","2ecc1b97":"markdown","403d7296":"markdown","a48aaf9f":"markdown","0423de9d":"markdown","e2d44ed6":"markdown","44cb6baa":"markdown","4dba9af5":"markdown","01b8e690":"markdown","e1d67a3e":"markdown","4be30f5b":"markdown","1fe53a6c":"markdown"},"source":{"6d2a198b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport math\nimport scipy.stats as stats\nimport pickle\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.cluster import KMeans\nfrom matplotlib import colors","9091755d":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","738876c3":"df.head()","2a24fdc2":"print('Number of rows: ', df.shape[0])\nprint('Number of features: ', df.shape[1])","5cf62dca":"df.info()","7bb50656":"print('There are {0} duplicate rows.'.format(len(df[df.duplicated() == True])))","712f1f40":"categorical_features = df.select_dtypes(include=['object']).columns","7d50ddee":"for col in categorical_features:\n  print(col)\n  print(df[col].unique(), '\\n')","985e22df":"print('There are {0} blank value in TotalCharges '.format(len(df[df['TotalCharges'].str.strip() == ''])))","903996ed":"median_total_charges = df[df['TotalCharges'].str.strip() != ''].TotalCharges.median()\ndf['TotalCharges'] = df['TotalCharges'].apply(lambda x: median_total_charges if str(x).strip() == '' else x)\ndf['TotalCharges'] = df['TotalCharges'].astype(float)","ca091c9b":"df.describe()","671075c4":"plt.figure()\nsns.pairplot(df)\nplt.show()","ce97e585":"sns.heatmap(df.corr(), annot=True)","2e036684":"df.drop(['customerID', 'Churn'], axis=1, inplace=True)","73d0e868":"df = df.apply(preprocessing.LabelEncoder().fit_transform) ","b148f58b":"ds = df\nscaler = StandardScaler()\nds = pd.DataFrame(scaler.fit_transform(ds), columns=df.columns)","f4e5cf0c":"ds.head()","fd1afa31":"pca = PCA(n_components=3)\npca_ds = pd.DataFrame(pca.fit_transform(ds), columns=['comp1', 'comp2', 'comp3'])","97d9c715":"pca_ds.head()","6c339067":"#Plot dataset\nx = pca_ds['comp1']\ny = pca_ds['comp2']\nz = pca_ds['comp3']\ncmap = colors.ListedColormap([\"#C1106F\", \"#1710C1\", \"#10C118\", \"#E08D03\"])\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection=\"3d\")\nax.scatter(x,y,z, marker=\".\", cmap=cmap)\nplt.show()","9fd75e65":"distortions = []\nK = range(1,10)\nfor k in K:\n  kmeanModel = KMeans(n_clusters=k)\n  kmeanModel.fit(pca_ds)\n  distortions.append(kmeanModel.inertia_)\n  \nplt.figure(figsize=(8,6))\nplt.plot(K, distortions, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method showing the optimal k')\nplt.show()","8a53d79f":"kmeans = KMeans(n_clusters=4, init='k-means++')\ny_kmeans = kmeans.fit_predict(pca_ds)\ndf['Cluster'] = y_kmeans\npca_ds[\"Cluster\"] = y_kmeans","905eeb36":"# Plot dataset\ncmap = colors.ListedColormap([\"#C1106F\", \"#1710C1\", \"#10C118\", \"#E08D03\"])\nfig = plt.figure(figsize=(10,8))\nax = plt.subplot(111, projection='3d')\nax.scatter(x, y, z, c=pca_ds[\"Cluster\"], marker='.', cmap=cmap)\nplt.show()","670fc7ae":"fig = plt.figure(figsize=(11,7))\nsns.scatterplot(data = df,x=df[\"TotalCharges\"], y=df[\"tenure\"],hue=df[\"Cluster\"])\nplt.show()","a504e315":"for col in ['gender', 'SeniorCitizen', 'Partner', 'Dependents',\n       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod']:\n  fig = plt.figure(figsize=(11,7))\n  sns.countplot(x=df[col],hue=df[\"Cluster\"])\n  plt.show()","2ecc1b97":"After performing PCA (3 principle components) we will apply KMean clustering to group\/create clusters of data points based on similar characteristics.\nTo decide the no. of clusters to split our dataset (K value) we will use the most common Elbow Method.","403d7296":"# Dimensionality Reduction","a48aaf9f":"Observations:\n1. We can cast **TotalCharges** into numeric datatype.\n2. Rest of the categorical features seem to have clean values.","0423de9d":"# Data Cleaning","e2d44ed6":"Dropped unnecessary features","44cb6baa":"As we have 20 features to deal with, it possible our clustering model may not be able to create appropriate customer segments. So we will try to reduce the dimensions of our dataset by using PCA before we pass it to the clustering model.","4dba9af5":"We will be performing PCA to segment customers based on similar characteristics. In order to apply PCA we need to perform following steps:\n1. Encoding categorical variables (Label Encoding)\n2. Standardize dataset","01b8e690":"Replacing blank values with median of TotalCharges","e1d67a3e":"Using elbow method we get to know K=4 seems to be the best fit for clustering.","4be30f5b":"Observation\n1. No missing values\n2. No duplicate values\n3. Too many object datatype features. We need to convert them to numeric.","1fe53a6c":"Observation:\n1. No correlation found"}}