{"cell_type":{"db8c8e7f":"code","34fee52d":"code","b6d1fe2a":"code","73f5a68d":"code","f005d71b":"code","c7dc2639":"code","4dc831ac":"code","3b8c6f0b":"code","f6bd4035":"code","7568ef5d":"code","7cf0f797":"code","5755ddcd":"code","e06deca3":"code","1a9d8c9b":"code","38bb2fd8":"code","41228800":"code","1793082e":"code","1b0a01e8":"code","db0dc16a":"code","37f78410":"code","657cb880":"code","3a6d3296":"code","21659552":"code","46e80635":"code","a1835931":"code","f2ca86fd":"code","3fa7055b":"code","b2d06070":"code","4649c296":"code","abc33e3b":"code","642d092e":"code","06c7050c":"code","dcd48eb4":"code","9536b362":"code","83e582f1":"code","96e96a4a":"code","754cbdc7":"code","14b54780":"code","4fb18756":"code","5f90221f":"markdown","1d9b8ea6":"markdown","1d12f3b2":"markdown"},"source":{"db8c8e7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34fee52d":"BASE_DIR = '\/kaggle\/input\/tabular-playground-series-mar-2021\/'\ntrain_df = pd.read_csv(os.path.join(BASE_DIR, 'train.csv'))\ntest_df = pd.read_csv(os.path.join(BASE_DIR,'test.csv'))","b6d1fe2a":"train_df.head()","73f5a68d":"cols = train_df.columns\ncols","f005d71b":"cat_cols = [col for col in cols if 'cat' in col]\ncont_cols = [col for col in cols if 'cont' in col]\nprint('cat_cols : ', cat_cols)\nprint('cont_cols : ', cont_cols)","c7dc2639":"train_df[cat_cols].isnull().sum()","4dc831ac":"train_df[cont_cols].isnull().sum()","3b8c6f0b":"test_df[cat_cols].isnull().sum()","f6bd4035":"test_df[cont_cols].isnull().sum()","7568ef5d":"train_df[cat_cols].head()","7cf0f797":"trainCopy = train_df.copy()\ntestCopy = test_df.copy()","5755ddcd":"trainCopy.drop('id', axis=1, inplace=True)\ntestCopy.drop('id', axis=1, inplace=True)","e06deca3":"from sklearn.preprocessing import LabelEncoder","1a9d8c9b":"lb = LabelEncoder()\nfor data in [trainCopy, testCopy]:\n    for col in cat_cols:\n        data[col] = pd.DataFrame(lb.fit_transform(data[col]))","38bb2fd8":"feature = trainCopy.drop('target', axis=1).columns\ntarget = trainCopy['target']","41228800":"trainCopy.target.dtype","1793082e":"trainCopy.target.unique()","1b0a01e8":"trainCopy[cont_cols].head()","db0dc16a":"trainCopy[cat_cols].head()","37f78410":"from sklearn.model_selection import train_test_split","657cb880":"from tensorflow.keras import models, layers\nimport tensorflow as tf","3a6d3296":"devicename = tf.test.gpu_device_name()\ndevicename","21659552":"tf.device(devicename)","46e80635":"# X_train_cat = X_train[cat_cols]\n# X_train_cont = X_train[cont_cols]\n# X_valid_cat = X_valid[cat_cols]\n# X_valid_cont = X_valid[cont_cols]\n# X_train_cat = X_train_cat \/ np.max(X_train_cat)\n# X_train_cont = X_train_cont \/ np.max(X_train_cont)\n# X_valid_cat = X_valid_cat \/ np.max(X_valid_cat)\n# X_valid_cont = X_valid_cont \/ np.max(X_valid_cont)\n\n# # x\n# inputx = layers.Input(shape=(X_train_cat.shape[1],))\n# x = layers.Dense(2*X_train_cat.shape[1])(inputx)\n# x = layers.Activation('tanh')(x)\n# # x = layers.Dense(100)(x)\n# # x = layers.Activation('relu')(x)\n# x = models.Model(inputs=inputx, outputs=x)\n# # y\n# inputy = layers.Input(shape=(X_train_cont.shape[1],))\n# y = layers.Dense(2*X_train_cont.shape[1])(inputy)\n# y = layers.Activation('tanh')(y)\n# # y = layers.Dense(100)(y)\n# # y = layers.Activation('relu')(y)\n# y = models.Model(inputs=inputy, outputs=y)\n# # merge\n# merge = layers.concatenate([x.output, y.output])\n# z = layers.Dense(38+22)(merge)\n# # z = layers.Activation('tanh')(z)\n# # z = layers.Dense(800)(z)\n# # z = layers.Activation('relu')(z)\n# # z = layers.Dropout(0.1)(z)\n# z = layers.Dense(1, activation='sigmoid')(z)\n# z = models.Model(inputs=[x.input, y.input], outputs=z)\n\n# z.compile(loss='binary_crossentropy',\n#          optimizer='adam',\n#          metrics=['accuracy'])\n\n# z.fit([X_train_cat, X_train_cont], y_train,\n#      validation_data=([X_valid_cat, X_valid_cont], y_valid),\n#      batch_size=100,\n#      epochs=50)","a1835931":"# import matplotlib.pyplot as plt\n# acc = z.history.history['accuracy']\n# val_acc = z.history.history['val_accuracy']\n# epochs = range(1, len(acc)+1)\n# plt.plot(epochs, acc, 'r', label='train')\n# plt.plot(epochs, val_acc, 'b', label='validation')\n# plt.legend()","f2ca86fd":"trainCopy[cat_cols] = trainCopy[cat_cols] \/ np.max(trainCopy[cat_cols])\ntestCopy[cat_cols] = testCopy[cat_cols] \/ np.max(testCopy[cat_cols])\ntestCopy[cat_cols]","3fa7055b":"import optuna\nX_train, X_valid, y_train, y_valid = train_test_split(trainCopy[feature], target, test_size=0.25, random_state=1)\n\n# X_train = X_train \/ np.max(X_train)\n# X_valid = X_valid \/ np.max(X_valid)\nxtrain = np.array(X_train)\nxvalid = np.array(X_valid)","b2d06070":"xtrain, xvalid","4649c296":"\n# def objective(trial):\n#     n_unit0 = trial.suggest_int('units0', 50, 500)\n#     n_unit1 = trial.suggest_int('units1', 50, 500)\n#     n_unit2 = trial.suggest_int('units2', 50, 500)\n#     dropout = trial.suggest_float('dropout', 0.0, 0.9)\n#     lr = trial.suggest_float('lr', 1e-4, 0.01)\n# #     beta_1 = trial.suggest_float('beta_1', 0.0, 1.0)\n# #     beta_2 = trial.suggest_float('beta_2', 0.0, 1.0)\n# #     epsilon = trial.suggest_float('epsilon', 1e-9, 1e-5)\n# #     dropout = trial.suggest_float('dropout', 0.1, 0.9999)\n#     model = models.Sequential()\n#     model.add(layers.Dense(n_unit0, activation='tanh', input_shape=(X_train.shape[1],)))\n#     model.add(layers.Dense(n_unit1, activation='tanh'))\n#     model.add(layers.Dense(n_unit2, activation='tanh'))\n#     # model.add(layers.Dense(400, activation='relu'))\n#     model.add(layers.Dropout(dropout))\n#     model.add(layers.Dense(1, activation='sigmoid'))\n#     model.compile(loss='binary_crossentropy',\n#                  optimizer='adam',\n#                  metrics=['accuracy'])\n#     # model.summary()\n#     history = model.fit(xtrain, y_train, validation_data=(xvalid, y_valid), epochs=5, batch_size=150,\n#                        callbacks=tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', mode='max'))\n#     return history.history['val_loss'][len(history.history['val_loss'])-1]\n# study = optuna.create_study()\n# study.optimize(objective, n_trials=30)","abc33e3b":"# study.best_params, study.best_value","642d092e":"X_train.shape","06c7050c":"model = models.Sequential()\nmodel.add(layers.Dense(2*X_train.shape[1], activation='tanh', input_shape=(X_train.shape[1],)))\nmodel.add(layers.Dense(2*X_train.shape[1], activation='tanh'))\nmodel.add(layers.Dense(2*X_train.shape[1], activation='tanh'))\nmodel.add(layers.Dense(2*X_train.shape[1], activation='tanh'))\n# model.add(layers.Dense(100, activation='tanh'))\n# model.add(layers.Dense(100, activation='tanh'))\n# model.add(layers.Dropout(0.1))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n              metrics=['accuracy'])\n# model.summary()\nhistory = model.fit(xtrain, y_train, validation_data=(xvalid, y_valid), epochs=100, batch_size=100)","dcd48eb4":"# history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid), epochs=20, batch_size=50)","9536b362":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nepochs = range(1, len(acc)+1)\nplt.plot(epochs, acc, 'r', label='train')\nplt.plot(epochs, val_acc, 'b', label='validation')\nplt.legend()","83e582f1":"model.evaluate(X_valid,y_valid)","96e96a4a":"trainCopy.columns","754cbdc7":"# testCopy = testCopy \/ np.max(testCopy)\n# trainCopy = np.expand_dims(-1)\n\n# test_cont = testCopy[cont_cols] \/ np.max(testCopy[cont_cols])\n# prediction = model.predict([test_cat, test_cont])\nprediction = model.predict(testCopy)\nprediction","14b54780":"p = [r[0] for r in prediction]\np","4fb18756":"output = pd.DataFrame({'id': test_df.id, 'target': p})\noutput.to_csv('submission.csv', index=False)","5f90221f":"# Fully connected neural network","1d9b8ea6":"# the data","1d12f3b2":"# feature and target"}}