{"cell_type":{"a9157eb0":"code","8a25049c":"code","f5bfbe4c":"code","b7cdccd7":"code","8a4191c1":"code","48b3187a":"code","bf445c13":"code","f7b36fca":"code","3d8dcf1b":"code","d91b9b4b":"code","0c950b77":"code","e889d3d4":"code","6f5a392f":"code","694ce282":"code","c27d26df":"code","3b6d5473":"code","072a8408":"code","fb549bc7":"code","de3ec292":"code","523304fa":"code","620b44c4":"code","1288ca3d":"code","370cf758":"code","aef24146":"code","81d1898e":"code","a0555a93":"code","076a26d0":"code","4b6e226a":"code","b0fd38e1":"code","945f80f1":"markdown","5220a3b5":"markdown","6993c560":"markdown","c9fabebb":"markdown","e6601f25":"markdown","82dc760d":"markdown","9ca9d0e4":"markdown","85a07450":"markdown","8855eb08":"markdown","7a39cee6":"markdown"},"source":{"a9157eb0":"import pandas as pd\nimport pandas_profiling\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","8a25049c":"train.profile_report()","f5bfbe4c":"sns.countplot(x='SibSp', hue='Survived', data=train)\nplt.legend(loc='upper right', title='Survived')","b7cdccd7":"sns.countplot(x='Parch', hue='Survived', data=train)\nplt.legend(loc='upper right', title='Survived')","8a4191c1":"data = pd.concat([train, test], sort=False)","48b3187a":"pclass_group = data.groupby('Pclass')\n#pclass_group.mean()['Fare'][1]\n#pclass_group.median()['Fare']\n\nmean = pclass_group.median()['Fare']\n\nm1 = (data['Pclass'] == 1)\ndata.loc[m1,'Fare'] = data.loc[m1,'Fare'].fillna(mean[1])\n\nm2 = (data['Pclass'] == 2)\ndata.loc[m2,'Fare'] = data.loc[m2,'Fare'].fillna(mean[2])\n\nm3 = (data['Pclass'] == 3)\ndata.loc[m3,'Fare'] = data.loc[m3,'Fare'].fillna(mean[3])\n\n\n#data.iloc[:,10]=np.nan\n#df[df['A'].isnull()]","bf445c13":"data['Sex'].replace(['male', 'female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype(int)\n#data['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata['FamilySize'] = data['Parch'] + data['SibSp'] + 1\ndata['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1","f7b36fca":"data.head()","3d8dcf1b":"delete_columns = ['Name', 'PassengerId', 'Ticket', 'Cabin']\ndata.drop(delete_columns, axis=1, inplace=True)\n\ntrain = data[:len(train)]\ntest = data[len(train):]\n\ny_train = train['Survived']\nX_train = train.drop('Survived', axis=1)\ny_test = test['Survived']\nX_test = test.drop('Survived', axis=1)\n","d91b9b4b":"X_train.head()","0c950b77":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","e889d3d4":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub['Survived'] = list(map(int, y_pred))\nsub.to_csv('submission_randomforest.csv', index=False)\nsub.head()","6f5a392f":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.3, random_state=0, stratify=y_train)","694ce282":"categorical_features=['Embarked', 'Pclass', 'Sex']","c27d26df":"import lightgbm as lgb\nimport optuna\nfrom sklearn.metrics import log_loss\n\ndef objective(trial):\n  params = {\n      'objective': 'binary',\n      'max_bin': trial.suggest_int('max_bin', 255, 500),\n      'learning_rate': 0.05,\n      'num_leaves': trial.suggest_int('num_leaves', 32, 128)\n  }\n\n  lgb_train =lgb.Dataset(X_train, y_train, categorical_feature=categorical_features)\n  lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train, categorical_feature=categorical_features)\n\n  model = lgb.train(params, lgb_train, \n                    valid_sets=[lgb_train, lgb_eval],\n                    verbose_eval=10,\n                    num_boost_round=1000,\n                    early_stopping_rounds=10)\n  \n  y_pred_valid = model.predict(X_valid, num_iteration=model.best_iteration)\n  score = log_loss(y_valid, y_pred_valid)\n  return score\n\nstudy = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=40)\n","3b6d5473":"study.best_params","072a8408":"params = {\n    'objective': 'binary',\n    'max_bin': study.best_params['max_bin'],\n    'learning_rate': 0.05,\n    'num_leaves': study.best_params['num_leaves']\n}\n\nlgb_train = lgb.Dataset(X_train, y_train,\n                                         categorical_feature=categorical_features)\nlgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train,\n                                         categorical_feature=categorical_features)\n\nmodel = lgb.train(params, lgb_train,\n                               valid_sets=[lgb_train, lgb_eval],\n                               verbose_eval=10,\n                               num_boost_round=1000,\n                               early_stopping_rounds=10)\n\ny_pred = model.predict(X_test, num_iteration=model.best_iteration)","fb549bc7":"y_pred = (y_pred > 0.5).astype(int)\n\nsub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub['Survived'] = y_pred\nsub.to_csv('submission_lightgbm_optuna.csv', index=False)\n\nsub","de3ec292":"from catboost import CatBoost\nfrom catboost import Pool\n\ntrain_pool = Pool(X_train, label=y_train)\ntest_pool = Pool(X_test, label=y_test)\n\nparams = {\n    'loss_function': 'Logloss',\n    'num_boost_round': 100\n}\n\nmodel = CatBoost(params)\nmodel.fit(train_pool)\ny_pred = model.predict(test_pool, prediction_type='Class')","523304fa":"y_pred = (y_pred > 0.5).astype(int)\n\nsub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub['Survived'] = y_pred\nsub.to_csv('submission_catboost.csv', index=False)\n\nsub","620b44c4":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\n\nss = StandardScaler()\nX_train_ss = ss.fit_transform(X_train)\nX_test_ss = ss.fit_transform(X_test)\n\nmodel = KNeighborsClassifier(n_neighbors=3, algorithm='ball_tree')\nmodel.fit(X_train_ss, y_train)\n\ny_pred = model.predict(X_test_ss)\n","1288ca3d":"y_pred\ny_pred = (y_pred > 0.5).astype(int)\n","370cf758":"y_pred ","aef24146":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub['Survived'] = y_pred\nsub.to_csv('submission_knn.csv', index=False)\n\nsub","81d1898e":"randomforest = pd.read_csv('\/kaggle\/working\/submission_randomforest.csv')\nlightgbm = pd.read_csv('\/kaggle\/working\/submission_lightgbm_optuna.csv')\ncatboost = pd.read_csv('\/kaggle\/working\/submission_catboost.csv')\nknn = pd.read_csv('\/kaggle\/working\/submission_knn.csv')\n","a0555a93":"df = pd.DataFrame({'sub_lgb': lightgbm['Survived'].values,\n                   'sub_rf': randomforest['Survived'].values,\n                   'sub_knn': knn['Survived'].values,\n                   'sub_cb': catboost['Survived'].values})\ndf.head()","076a26d0":"df.corr()","4b6e226a":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub['Survived'] = lightgbm['Survived'] + randomforest['Survived'] + catboost['Survived'] + knn['Survived']\nsub.head()","b0fd38e1":"sub['Survived'] = (sub['Survived'] >= 3).astype(int)\nsub.to_csv('submission_lightgbm_ensemble.csv', index=False)\nsub","945f80f1":"# \u6a5f\u68b0\u5b66\u7fd2\u52c9\u5f37\u7528","5220a3b5":"LightGBM\u3067\u4e88\u6e2c\u3002 \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092Optuna\u3092\u4f7f\u3063\u3066\u6700\u9069\u5024\u3092\u691c\u51fa\u3002","6993c560":"# LighGBM","c9fabebb":"kNN\u3060\u3051\u9055\u3046\u3053\u3068\u304c\u308f\u304b\u308b\u3002(StandardScaling\u3092\u3061\u3083\u3093\u3068\u3084\u308b\u3053\u3068\u3067\u3001\u304b\u306a\u308a\u7cbe\u5ea6\u304c\u3042\u304c\u3063\u305f\uff09[](http:\/\/)\nkNN\u3092\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3059\u308b\u3068\u7cbe\u5ea6\u304c\u843d\u3061\u305f\u3002\n\n\u30c7\u30fc\u30bf\u6570\u304c\u5c11\u91cf\u3060\u304b\u3089\u304b\u3001CatBoost\u304c\u8abf\u5b50\u304c\u826f\u3044\u3002\n\u6700\u521d\u306fCatBoost\u306e\u307f\u304c\u4e00\u756a\u7cbe\u5ea6\u304c\u3088\u304b\u3063\u305f\u304c\u3001kNN(SS\u3042\u308a)\u3092\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3057\u305f\u3068\u3053\u308d\u3001\u7cbe\u5ea6\u304c\u3042\u304c\u3063\u305f\u3002","e6601f25":"# \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\n\u8907\u6570\u306e\u7d50\u679c\u304b\u3089\u201d\u591a\u6570\u6c7a\u201d\u3067\u5224\u5b9a\u3059\u308b\u3002","82dc760d":"# kNN","9ca9d0e4":"# Catboost","85a07450":"# \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790\n\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2\u6027\u304c\u306a\u3044\u304b\u8abf\u67fb\u3059\u308b\u3002","8855eb08":"# RandomForest","7a39cee6":"\u89e3\u6790\u53ef\u80fd\u306a\u5024\u306b\u5909\u63db\u3059\u308b\u3002\u307e\u305f\u3088\u308a\u826f\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3067\u3042\u308d\u3046\u9805\u76ee\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n- Sex\u3092\u6587\u5b57\u5217\u304b\u30890,1\u306e2\u5024\u306b\u3059\u308b\n- \u7a7a\u306eEmbarked\u306bS\u3092\u57cb\u3081\u308b\n- Embarked\u3092S C Q\u306e3\u6587\u5b57\u304b\u3089\u30011,2,3\u306e\u6570\u5024\u306b\u5909\u63db\u3059\u308b\n- \u7a7a\u306eFare\u306b\u3001\u5404PClass\u306e\u4e2d\u592e\u5024\u3092\u57cb\u3081\u308b\n- \u7a7a\u306eAge\u306b\u4e2d\u592e\u5024\u3092\u57cb\u3081\u308b\n- Parch(\u89aa\u3068\u5b50\u306e\u6570)\u3068SibSp(\u5144\u5f1f\u306e\u6570)\u304c\u610f\u5473\u3042\u3044\u4e0a\u3001\u307e\u305fSurvived\u3068\u306e\u95a2\u4fc2\u304c\u4f3c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001FamilySize\u3068\u3044\u3046\u9805\u76ee\u3092\u4f5c\u308b\u3002\n- FamilySize\u304c1\u306e\u5834\u5408\u306bSurvived=0\u3067\u3042\u308b\u5272\u5408\u304c\u975e\u5e38\u306b\u9ad8\u3044\u3053\u3068\u304b\u3089\u3001IsAlone\u3068\u3044\u3046\u9805\u76ee\u3092\u4f5c\u308b\u3002"}}