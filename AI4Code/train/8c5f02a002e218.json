{"cell_type":{"5a1f1025":"code","7cb7f6b1":"code","9ec39799":"code","df87f1c9":"code","ca9edadb":"code","48e3c209":"code","482b667b":"code","971d222d":"code","ed836a73":"code","22d7ef84":"code","19ea76ba":"code","fc2e6297":"code","8642970e":"code","b0cc07a8":"code","3e120d29":"code","642321be":"code","044443ac":"code","afe68948":"code","177f0fa9":"code","a53014e7":"code","66b52106":"markdown","a6a43e01":"markdown"},"source":{"5a1f1025":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7cb7f6b1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\nfrom tensorflow import keras\nfrom numpy.linalg import norm\nimport os\nfrom tqdm import tqdm\nimport cv2\n%matplotlib inline\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', None)\nimport warnings   # To avoid warning messages in the code run\nwarnings.filterwarnings(\"ignore\")\n\nimport os # os - operating system (Windows, Mac, Linux) os.mkdir('abc') --> will create a folder for me with the name 'abc'","9ec39799":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain.head()","df87f1c9":"print(train.shape)\nprint(test.shape)","ca9edadb":"order = list(np.sort(train['label'].unique()))\nprint(order)","48e3c209":"sns.countplot(train[\"label\"]);","482b667b":"X_train = (train.iloc[:,1:].values).astype('float32') \ny_train = train.iloc[:,0].values.astype('int32') \nX_test = test.values.astype('float32')\n\nX_train = X_train.reshape(X_train.shape[0],28,28,1).astype('float32')\nX_test = X_test.reshape(X_test.shape[0],28,28,1).astype('float32')\n\nX_train = X_train \/ 255\nX_test = X_test \/ 255","971d222d":"X_train.shape","ed836a73":"model = Sequential()\nmodel.add(Conv2D(28, kernel_size=(3,3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=tf.nn.relu))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10,activation=tf.nn.softmax))","22d7ef84":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x=X_train,y=y_train, epochs=20)","19ea76ba":"predictions = model.predict_classes(X_test, verbose=0)\npredictions","fc2e6297":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","8642970e":"INPUT_SHAPE_RN = (32, 32, 3)\n\ndef create_cnn_architecture_model2(input_shape):\n    inc_net = keras.applications.resnet50.ResNet50(include_top=False, weights='imagenet', \n                                                          input_shape=input_shape)\n    inc_net.trainable = True\n    # Fine-tune the layers\n    for layer in inc_net.layers:\n        layer.trainable = True\n    \n    base_inc = inc_net\n    base_out = base_inc.output\n    pool_out = keras.layers.Flatten()(base_out)\n    \n    hidden1 = keras.layers.Dense(512, activation='relu')(pool_out)\n    drop1 = keras.layers.Dropout(rate=0.3)(hidden1)\n    hidden2 = keras.layers.Dense(512, activation='relu')(drop1)\n    drop2 = keras.layers.Dropout(rate=0.3)(hidden2)\n\n    out = keras.layers.Dense(10, activation='softmax')(drop2)\n\n    model = keras.Model(inputs=base_inc.input, outputs=out)\n    model.compile(optimizer=keras.optimizers.RMSprop(lr=1e-4),\n                    loss='sparse_categorical_crossentropy',\n                    metrics=['accuracy'])\n    return model","b0cc07a8":"model2 = create_cnn_architecture_model2(input_shape=INPUT_SHAPE_RN)\nmodel2.summary()","3e120d29":"y_train = train['label'].values\nx_train = train.drop('label', axis = 1).values.reshape((-1, 28, 28, 1)) \/ 255\n# since ResNet is for 3 channel color image but digit is grayscale 1 channle, change it to 3 channel below\nx_train = np.concatenate((x_train,x_train,x_train), axis = 3)\nprint(x_train.shape)\n\nx_test = train.drop('label', axis = 1).values.reshape((-1, 28, 28, 1)) \/ 255\n# since ResNet is for 3 channel color image but digit is grayscale 1 channle, change it to 3 channel below\nx_test = np.concatenate((x_test,x_test,x_test), axis = 3)\nprint(x_test.shape)\n","642321be":"def resize_image_array(img, img_size_dims):\n    img = cv2.resize(img, dsize=img_size_dims, \n                     interpolation=cv2.INTER_CUBIC)\n    img = np.array(img, dtype=np.float32)\n    return img","044443ac":"IMG_DIMS = (32, 32)\n\nx_train = np.array([resize_image_array(img, img_size_dims=IMG_DIMS) for img in x_train])\nx_test = np.array([resize_image_array(img, img_size_dims=IMG_DIMS) for img in x_test])\n\nprint('\\nTrain_images.shape: {}, of {}'.format(x_train.shape, x_train.dtype))\nprint('Test_images.shape: {}, of {}'.format(x_test.shape, x_test.dtype))","afe68948":"EPOCHS = 10\nx_train_scaled = x_train \/ 255.\nmodel2.fit(x_train_scaled, y_train, validation_split=0.1, epochs=EPOCHS)","177f0fa9":"x_test_scaled = x_test \/ 255.\npredictions = model2.predict(x_test_scaled)\npredictions","a53014e7":"\ntest_id = np.arange(1, x_test.shape[0] + 1, 1)\nprediction = np.argmax(predictions, axis = 1)\n\npred = pd.DataFrame(data = {'ImageId': test_id,\n                           'Label': prediction})","66b52106":"# Basic Model ","a6a43e01":"# Model using ResNet50"}}