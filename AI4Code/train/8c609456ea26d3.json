{"cell_type":{"a4c855ab":"code","7ffe3c13":"code","3f73aa2b":"code","931eab29":"code","435ff509":"code","9b2f992f":"code","4566d258":"code","86fd6b77":"code","be640e08":"code","98d4985a":"code","94537136":"code","7c2a2b14":"code","b0457eea":"code","a374861e":"code","62994c96":"code","ee081470":"code","69e4a16d":"code","25daa500":"code","a817ed73":"code","6d4d1eca":"code","0d5f791b":"code","4185c1fa":"code","f09145ee":"code","d22d5af9":"code","a81db9b1":"code","e81f6403":"code","dd94c006":"code","93d5318d":"code","b4510760":"code","a83a966f":"code","28280958":"code","2f5c8a58":"code","5c0ac795":"code","1d913e36":"code","8aa07a40":"code","08a8dd62":"code","f65cf7f5":"code","84437acc":"code","fa7adee8":"code","68b7d9b8":"code","54642672":"code","169e4330":"markdown"},"source":{"a4c855ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport collections as cll\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7ffe3c13":"# Read Datas\nmedian_house_hold_in_come = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv\", encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv\", encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv\", encoding=\"windows-1252\")\nkill = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv\", encoding=\"windows-1252\")\nshare_race_city = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv\", encoding=\"windows-1252\")","3f73aa2b":"# Poverty rate of each state - Her bir eyaletin yoksulluk oran\u0131\npercentage_people_below_poverty_level.info() # Data'n\u0131n poverty level k\u0131sm\u0131 hakk\u0131nda genel bilgi","931eab29":"# Poverty rate of each state - Her bir eyaletin yoksulluk oran\u0131\n#percentage_people_below_poverty_level.poverty_rate.value_counts() # Datada 201 tane '-' \u015feklinde belirtilmi\u015f poverty level var. Bu 201 '-' yi g\u00f6rmezden gelmeliyiz.","435ff509":"# Poverty rate of each state - Her bir eyaletin yoksulluk oran\u0131\n    # BarPlot\npercentage_people_below_poverty_level.poverty_rate.replace(['-'], 0.0, inplace = True) # '-' yerine 0 yaz\u0131lmas\u0131n\u0131 sa\u011fl\u0131yoruz.\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float) # Object olarak verilmi\u015f poverty rate'leri say\u0131ya \u00e7eviriyoruz.\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique()) # Datada verilen her bir unique eyaleti buluyoruz.\narea_poverty_ratio = [] # G\u00f6rselle\u015ftirme esnas\u0131nda grafik, s\u0131ral\u0131 bir \u015fekilde \u00e7\u0131kmas\u0131 i\u00e7in datay\u0131 s\u0131ral\u0131yoruz\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list': area_list, 'area_poverty_ratio': area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=True)).index.values\nsorted_data = data.reindex(new_index)\n\n# visualization \/ g\u00f6rselle\u015ftirme \/ BARPLOT\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation=45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","9b2f992f":"# Most common 15 Name or Surname of killed people \/ \u00d6ld\u00fcr\u00fclen insanlar\u0131n isimleri veya soyisimleri aras\u0131ndan en \u00e7ok kullan\u0131lan 15 tanesi\nkill.head()","4566d258":"# kill.name.value_counts() # Burada isimleri frekanslar\u0131na g\u00f6re s\u0131ralad\u0131\u011f\u0131m\u0131zda TK TK kay\u0131tl\u0131 49 ki\u015fi g\u00f6r\u00fcyoruz. B\u00f6yle bir verinin olmamas\u0131n\u0131 istiyoruz.","86fd6b77":"# Most common 15 Name or Surname of killed people \/ \u00d6ld\u00fcr\u00fclen insanlar\u0131n isimleri veya soyisimleri aras\u0131ndan en \u00e7ok kullan\u0131lan 15 tanesi\n    # BarPlot\nseparate = kill.name[kill.name != 'TK TK'].str.split()\na,b = zip(*separate)\nname_list = a+b\nname_count = cll.Counter(name_list)\nmost_common_names = name_count.most_common(15)\nx,y = zip(*most_common_names)\nx,y = list(x), list(y)\n\n# visualization \/ g\u00f6rselle\u015ftirme\nplt.figure(figsize=(15,10))\nsns.barplot(x=x, y=y, palette=sns.cubehelix_palette(len(x))) # palette: x uzunlu\u011fu kadar birbirleriyle alakal\u0131 farkl\u0131 renk \u00fcretiyor.\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')","be640e08":"# High school graduation rate of the population that is older than 25 in states \/ Eyaletlerde 25 ya\u015f\u0131ndan b\u00fcy\u00fck n\u00fcfusun lise mezuniyet oran\u0131\npercent_over_25_completed_highSchool.head()","98d4985a":"#percent_over_25_completed_highSchool.percent_completed_hs.value_counts() # Bu veride 197 tane cevab\u0131n\u0131 bilmedi\u011fimiz sat\u0131r var. Bu sat\u0131rlar\u0131 0'a \u00e7evirmeliyiz.","94537136":"# High school graduation rate of the population that is older than 25 in states \/ Eyaletlerde 25 ya\u015f\u0131ndan b\u00fcy\u00fck n\u00fcfusun lise mezuniyet oran\u0131\n    # BarPlot\npercent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace=True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float) # String olan de\u011ferlerimizi floata \u00e7eviriyoruz.\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique()) # Eyaletleri unique \u015fekilde al\u0131yoruz.\narea_highschool = []\nfor i in area_list: # Unique eyaletleri filtreleyerek, highschool tamamlayanlar\u0131 buluyoruz.\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n# Sorting\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n# Visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation=45)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")","7c2a2b14":"# Percentage of states population according to races that are black, white, native american, asian and hispanic \/ Eyaletlerde bulunan insanlar\u0131n etnik k\u00f6kenlerinin oranlar\u0131\nshare_race_city.head()","b0457eea":"share_race_city.info() # Object olan de\u011ferlerimizi floata \u00e7evirmemiz gerekiyor","a374861e":"# Percentage of states population according to races that are black, white, native american, asian and hispanic \/ Eyaletlerde bulunan insanlar\u0131n etnik k\u00f6kenlerinin oranlar\u0131\n    # Horizontal BarPlot \/ Yatay BarPlot \nshare_race_city.replace(['-'], 0.0, inplace=True)\nshare_race_city.replace(['(X)'], 0.0, inplace=True)\nshare_race_city.loc[:,['share_white', 'share_black', 'share_native_american', 'share_asian', 'share_hispanic']] = share_race_city.loc[:,['share_white', 'share_black', 'share_native_american', 'share_asian', 'share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area'] == i]\n    share_white.append(sum(x.share_white) \/ len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n\n# Visualization \/ G\u00f6rselle\u015ftirme\nf,ax = plt.subplots(figsize=(9,15)) # x ve y eksenlerinin uzunlu\u011fu\nsns.barplot(x = share_white, y = area_list, color = 'green', alpha = 0.5, label = 'White') # Alpha: Saydaml\u0131k\nsns.barplot(x = share_black, y = area_list, color = 'blue', alpha = 0.7, label = 'African American')\nsns.barplot(x = share_native_american, y = area_list, color = 'cyan', alpha = 0.7, label = 'Native American')\nsns.barplot(x = share_asian, y = area_list, color = 'yellow', alpha = 0.7, label = 'Asian')\nsns.barplot(x = share_hispanic, y = area_list, color = 'red', alpha = 0.7, label = 'Hispanic')\n\nax.legend(loc = 'lower right', frameon = True) # Legendlar\u0131n g\u00f6r\u00fcn\u00fcm\u00fc\nax.set(xlabel = 'Percentage of Races', ylabel = 'States', title = \"Percentage of State's Population According to Races\")","62994c96":"# High school graduation rate vs poverty rate of each state \/ Herbir eyaletteki liseden mezun olma ve fakirlik oran\u0131\n    # PointPlot\n# sorted_data ' y\u0131 \u00f6nceden bulmu\u015ftuk. Bu data eyaletlerin fakirlik oranlar\u0131n\u0131n ortalamas\u0131n\u0131 g\u00f6steriyor.\n# sorted_data2 ' yi \u00f6nceden bulmu\u015ftuk. Bu data eyaletlerde ki mezun olma durumunu g\u00f6steriyor.\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio'] \/ max(sorted_data['area_poverty_ratio']) # Normalization \/ Normalizasyon\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio'] \/ max(sorted_data2['area_highschool_ratio']) # Normalization \/ Normalizasyon\ndata = pd.concat([sorted_data, sorted_data2['area_highschool_ratio']], axis = 1) # Datalar\u0131m\u0131z\u0131 yanyana birle\u015ftiriyoruz.\ndata.sort_values('area_poverty_ratio', inplace = True) \n\n# Visualize \/ G\u00f6rselle\u015ftirme\nf,ax1 = plt.subplots(figsize = (20,10))\nsns.pointplot(x = 'area_list', y = 'area_poverty_ratio', data = data, color = 'blue', alpha = 0.8)\nsns.pointplot(x = 'area_list', y = 'area_highschool_ratio', data = data, color = 'red', alpha = 0.8)\n'''plt.text(40, 0.6, 'high school graduate ratio', color = 'red', fontsize = 17, style = 'italic')  # Red : HighSchool Graduate Ratio\nplt.text(40, 0.55, 'poverty ratio', color = ' lime', fontsize = 18, style = 'italic')'''            # Blue : Poverty Ratio\nplt.xlabel('States', fontsize = 15, color = 'blue')\nplt.ylabel('Values', fontsize = 15, color = 'blue')\nplt.title('High School Graduate VS Poverty Rate', fontsize = 20, color = 'blue')\nplt.grid()","ee081470":"# High school graduation rate vs poverty rate of each state \/ Herbir eyaletteki liseden mezun olma ve fakirlik oran\u0131\n    # JointPlot\n# Daha \u00f6nceden elimizde bulunan data'y\u0131 kullan\u0131yoruz.\ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind = \"kde\", size = 7) # kde: Kernel Density Estimation\nplt.show()\n''' Pearsonr : 2 tane eksen aras\u0131nda ki (x,y) korelasyonu \/ aralar\u0131ndaki ili\u015fkiyi g\u00f6sterir.\nPearsonr katsay\u0131s\u0131 1 ise: Pozitif korelasyon\nPearsonr katsay\u0131s\u0131 -1 ise: Negatif korelasyon\nPearsonr katsay\u0131s\u0131 0 ise: Korelasyon yok'''","69e4a16d":"# Joint plot farkl\u0131 parametre kullan\u0131m\u0131 ile de yap\u0131labilir.\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data = data, size = 5, ratio = 3, color = \"r\")","25daa500":"# Race rates accorging in kill data \/ \u00d6ld\u00fcr\u00fclen insanlar\u0131n \u0131rk oranlar\u0131\n\nkill.race.head(15)","a817ed73":"# Race rates according in kill data \/ \u00d6ld\u00fcr\u00fclen insanlar\u0131n \u0131rklar\u0131n oran\u0131\n    # PiePlot\nkill.race.dropna(inplace = True) # Irk kolonu bo\u015f ise bu kolonu datadan \u00e7\u0131kart\nlabels = kill.race.value_counts().index # Datada hangi \u0131rktan ka\u00e7 tane oldu\u011funu d\u00f6nd\u00fcr\u00fcyor.\ncolors = ['grey', 'blue', 'red', 'yellow', 'green', 'brown']\nexplode = [0, 0, 0, 0, 0, 0]\nsizes = kill.race.value_counts().values\n\n# Visual\nplt.figure(figsize = (7, 7))\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\nplt.title('Killed People According to Races', color = 'blue', fontsize = 15)","6d4d1eca":"data.head()","0d5f791b":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# Fakirlik oran\u0131 ile liseden mezun olma oran\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n    # LmPlot\n        # Show the results of a linear regression within each dataset\n        # Linear Regression\nsns.lmplot(x = \"area_poverty_ratio\", y = \"area_highschool_ratio\", data = data) # X ekseni fakirlik oran\u0131, y ekseni liseden mezun olma oran\u0131, datasetimiz ise data olarak tan\u0131mlanm\u0131\u015f dataset\nplt.show() # Bu line'\u0131 \u00e7izerken linear regression kullan\u0131l\u0131yor.","4185c1fa":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# Fakirlik oran\u0131 ile liseden mezun olma oran\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n    # CubehelixPlot\nsns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade = True, cut = 5) # X ekseni yoksulluk, Y ekseni liseden mezun olma oran\u0131 olsun. 'Shade', koyuluk. 'Cut' ise b\u00fcy\u00fckl\u00fck\nplt.show()","f09145ee":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\n    # ViolinPlot\npal = sns.cubehelix_palette(2, rot = .5, dark = .3) # Seaborn Palette\nsns.violinplot(data = data, palette = pal, inner = \"points\") # inner points'in her biri bizim data pointimiz\nplt.show()\n# Sadece say\u0131sal \u015feyleri g\u00f6rselle\u015ftiriyor. \u00c7ok kullan\u0131\u015fl\u0131d\u0131r.","d22d5af9":"# Correlation Map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\ndata.corr() # \u0130ki veri aras\u0131nda ki korelasyon","a81db9b1":"# Correlation Map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n    #HeatMap\n# HeatMap: Genellikle korelasyonu g\u00f6rselle\u015ftirmek i\u00e7in kullan\u0131l\u0131yor.\nf, ax = plt.subplots(figsize = (5, 5))\nsns.heatmap(data.corr(), annot = True, linewidths = .5, linecolor = \"red\", fmt = '.1f', ax = ax)\nplt.show()","e81f6403":"kill.head()","dd94c006":"# \u00d6l\u00fcm \u015fekline g\u00f6re cinsiyet ve ya\u015f s\u0131n\u0131fland\u0131r\u0131lmas\u0131\n# Manner of Death(\u00d6l\u00fcm \u015eekli): Ate\u015f edilerek, Ate\u015f edilerek ve \u015fok tabancas\u0131yla\n# Gender: Cinsiyet\n# Age: Ya\u015f\n# Plot the orbital period with horizontal boxes\n    #BoxPlot\nsns.boxplot(x = \"gender\", y = \"age\", hue = \"manner_of_death\", data = kill, palette = \"PRGn\")\nplt.show()","93d5318d":"kill.head()","b4510760":"# \u00d6l\u00fcm \u015fekline g\u00f6re cinsiyet ve ya\u015f s\u0131n\u0131fland\u0131r\u0131lmas\u0131\n# Manner of Death(\u00d6l\u00fcm \u015eekli): Ate\u015f edilerek, Ate\u015f edilerek ve \u015fok tabancas\u0131yla\n# Gender: Cinsiyet\n# Age: Ya\u015f    \n    # SwarmPlot\nsns.swarmplot(x = \"gender\", y = \"age\", hue = \"manner_of_death\", data = kill)\nplt.show()\n # Classification algoritmalar\u0131nda datan\u0131n nas\u0131l ayr\u0131laca\u011f\u0131n\u0131 net bir \u015fekilde g\u00f6sterir.\n        # Dezavantaj\u0131: Data say\u0131s\u0131 \u00e7ok fazla ise \u00e7izim yap\u0131lamayacak.","a83a966f":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# Fakirlik oran\u0131 ile liseden mezun olma oran\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n    # PairPlot\nsns.pairplot(data)\nplt.show()","28280958":"kill.manner_of_death.value_counts()","2f5c8a58":"kill.gender.value_counts()","5c0ac795":"# Kill properties \/ \u00d6ld\u00fcrme \u00f6zellikleri\n# Manner of Death\n    # CountPlot\nsns.countplot(kill.gender)\n#sns.countplot(kill.manner_of_death)\nplt.title(\"gender\", color = \"blue\", fontsize = 15)","1d913e36":"# Kill Weapon\narmed = kill.armed.value_counts()\n#print(armed)\nplt.figure(figsize = (10, 7))\nsns.barplot(x = armed[:7].index, y = armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill Weapon', color = 'blue', fontsize = 15)","8aa07a40":"# Age of Kill People\nabove25 = ['above25' if i >= 25 else 'below25' for i in kill.age]\ndf = pd.DataFrame({'age': above25})\nsns.countplot(x = df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of Killed People', color = 'blue', fontsize = 15)","08a8dd62":"# Race of Killed People\nsns.countplot(data = kill, x = 'race')\nplt.title('Race of Killed People', color = 'blue', fontsize = 15)","f65cf7f5":"# Most Dangerous Cities\ncity = kill.city.value_counts()\nplt.figure(figsize = (10, 7))\nsns.barplot(x = city[:12].index, y = city[:12].values)\nplt.xticks(rotation = 45)\nplt.title('Most Dangerous Cities', color = 'blue', fontsize = 15)","84437acc":"# Most Dangerous States\nstate = kill.state.value_counts()\nplt.figure(figsize = (10, 7))\nsns.barplot(x = state[:20].index, y = state[:20].values)\nplt.title('Most Dangerous State', color = 'blue', fontsize = 15)","fa7adee8":"# Having mental ilness or not for killed people\n# \u00d6ld\u00fcr\u00fclen insanlar\u0131n ak\u0131l hastal\u0131\u011f\u0131 olup olmamas\u0131\nsns.countplot(kill.signs_of_mental_illness)\nplt.xlabel('Mental illness')\nplt.ylabel('Number of Mental ilness')\nplt.title('Having mental illness or not', color = 'blue', fontsize = 15)","68b7d9b8":"# Threat Types \/ Tehdit T\u00fcrleri\nsns.countplot(kill.threat_level)\nplt.xlabel('Threat Types')\nplt.title('Threat Types', color = 'blue', fontsize = 15)","54642672":"# Kill numbers from states in kill data\n# Eyaletlerde \u00f6ld\u00fcrme say\u0131lar\u0131\nsta = kill.state.value_counts().index[:10]\nsns.barplot(x = sta, y = kill.state.value_counts().values[:10])\nplt.title('Kill Numbers from States', color = 'blue', fontsize = 15)","169e4330":"**SEABORN**"}}