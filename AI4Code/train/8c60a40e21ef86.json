{"cell_type":{"53eaa789":"code","ba875450":"code","b498fc7b":"code","442630cb":"code","b4922c7c":"code","f4a8fccf":"code","7a236ac0":"code","1aa34a8c":"code","e5d3ee39":"code","e4c08a37":"code","18061cf3":"code","5647d6bc":"code","b75d230b":"code","cb7ddbbb":"code","b8856e74":"code","9400fe1d":"code","8c84e3fd":"code","e42819df":"code","c7e14a6c":"code","c5720e48":"code","d74f5c82":"code","c3ff52ee":"code","62d3cec7":"code","fe96099a":"code","6e2d2ff1":"code","0301d119":"code","8cbe6ebc":"code","c8f31345":"code","3bdb5dab":"code","36836bc2":"code","52dbf265":"code","136a60e8":"code","644b58ec":"code","1ac128bc":"code","fbe38eb5":"code","b906512d":"code","96149534":"code","876dcab4":"code","83107967":"code","9cd97738":"code","6e32c406":"code","2e3c630e":"code","9cfc2308":"code","9d880526":"code","344db60d":"code","d9eb0c4f":"code","5d26f131":"code","552ec152":"code","95ea2fd5":"code","80e7f5fc":"code","73b3a9d9":"code","f07e8c31":"code","8d2c21ff":"code","ec8f5b64":"code","48b97a47":"code","510a82db":"code","b0de2091":"code","3cd73788":"code","f14fffbe":"markdown","86dd7c94":"markdown","e6c85246":"markdown","fc72181a":"markdown","3b93e0cf":"markdown","1627e853":"markdown","c78609d6":"markdown","5143613a":"markdown","f05bf8aa":"markdown","ffa9f805":"markdown","0ce49e5c":"markdown","e7b4749b":"markdown","1f3aa58e":"markdown","663422f9":"markdown","a274bfcf":"markdown","e007b56e":"markdown","da75c1d0":"markdown","1e44c56b":"markdown","98171848":"markdown","da56ec45":"markdown","3c2729e5":"markdown","73234ee2":"markdown"},"source":{"53eaa789":"!pip install tabula-py","ba875450":"!pip install dash","b498fc7b":"\nimport pandas as pd\nimport numpy as np\nimport os\nimport sys\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport requests\n\nimport ast\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport glob\nfrom tabula.io import read_pdf","442630cb":"### Downloading the Statewise COVID Data for India\nstatewise_data_url=\"https:\/\/api.covid19india.org\/csv\/latest\/states.csv\"\nindia_statewise_data=pd.read_csv(statewise_data_url,parse_dates=['Date'],infer_datetime_format=True)\nindia_statewise_data.head()","b4922c7c":"def handleMissingDates(data,min_date,max_date,date_col=\"Date\"):\n    data=data.set_index(date_col,drop=True)\n    all_days = pd.date_range(min_date,max_date, freq='D')\n    #print(len(all_days))\n    data=data.reindex(all_days)\n    #print(data.shape)\n    data=data.ffill() ## Get data from previous rows\n    data[date_col]=data.index\n    data.reset_index(drop=True,inplace=True)\n    data.fillna(0,inplace=True)\n    return data\n\n    \n\n    \n    \n    ","f4a8fccf":"min_date=min(india_statewise_data['Date'])\nmax_date=max(india_statewise_data['Date'])\n\n## Group by State and fill the Missing Values. \nindia_statewise_data=india_statewise_data.groupby(\"State\").apply(lambda x:handleMissingDates(x,min_date,max_date))\nindia_statewise_data.drop(['State'],axis=1,inplace=True)\nindia_statewise_data=india_statewise_data.reset_index()\nindia_statewise_data.drop(['level_1'],axis=1,inplace=True)\nindia_statewise_data.head()\n\n\n## Seperate the India Overall and State wise data\n\ncovid_india_data=india_statewise_data[india_statewise_data['State']==\"India\"]\nindia_statewise_data=india_statewise_data[india_statewise_data['State']!=\"India\"]","7a236ac0":"### Getting Statewise GDP in Billion Dollars\ngdp_url=\"https:\/\/statisticstimes.com\/m\/economy\/json\/india\/gsdp-dollar.json\"\nresponse=requests.get(gdp_url)\nstate_gdp=ast.literal_eval(response.text)\nstate_gdp=pd.DataFrame(state_gdp)\nstate_gdp=state_gdp.rename(columns={'name':'State','dollar':'gdp_billion_dollars'})\nstate_gdp['State']=state_gdp['State'].apply(lambda x:x.replace(\"&\",\"and\"))\nstate_gdp=state_gdp.rename(columns={'rank':'Rank by GDP'})\nstate_gdp.head()","1aa34a8c":"## Getting Statewise Population\ntable = read_pdf(\"https:\/\/uidai.gov.in\/images\/state-wise-aadhaar-saturation.pdf\",pages=1)\nindia_state_population=table[0]\n\n\nindia_state_population=india_state_population[pd.notna(india_state_population['S.No'])]\nindia_state_population=india_state_population[india_state_population['S.No']!=\"Total\"]\nindia_state_population=india_state_population[pd.notna(india_state_population['Saturation %\\r(LIVE)'])]\nindia_state_population['State']=india_state_population['State Name'].apply(lambda x:x.replace(\"*\",\"\"))\nindia_state_population.drop(['Numbers of  Aadhaar\\rassigned (LIVE)','Saturation %\\r(LIVE)','S.No','State Name'],axis=1,inplace=True)\nindia_state_population=india_state_population.rename(columns={'Total Population\\r(Projected 2020)':'Population_2020'})\nindia_state_population['State']=india_state_population['State'].apply(lambda x:x.replace(\"A & N Islands\",\"Andaman and Nicobar Islands\"))\nindia_state_population['State']=india_state_population['State'].apply(lambda x:x.replace(\"&\",\"and\"))\nindia_state_population['State']=india_state_population['State'].apply(lambda x:x.replace(\"Jammu Kashmir\",'Jammu and Kashmir'))\nindia_state_population['Population_2020']=india_state_population['Population_2020'].apply(lambda x:int(x.replace(\",\",\"\")))\nindia_state_population.head()","e5d3ee39":"### Getting State wise Area information\nWIKI_URL = \"https:\/\/en.wikipedia.org\/wiki\/List_of_states_and_union_territories_of_India_by_area\"\ndfs = pd.read_html(WIKI_URL, header=0)\nindia_state_area=dfs[1]\nindia_state_area=india_state_area.rename(columns={'State (S) \/ Union territory (UT)':\"State\",'Area (km2)':'Area_sqkm'})\nindia_state_area['Rank']=india_state_area['Rank'].apply(lambda x:x.split(\"(\")[0].strip())\nindia_state_area=india_state_area[pd.notna(india_state_area['Region'])]\nindia_state_area['Area_sqkm']=india_state_area['Area_sqkm'].apply(lambda x:int(x.replace(\",\",\"\")))\nindia_state_area=india_state_area.drop(['Ref','Political entities of comparable size (land mass)'],axis=1)\nindia_state_area['State']=india_state_area['State'].apply(lambda x:x.replace(\"NCT Delhi\",\"Delhi\"))\nindia_state_area=india_state_area.rename(columns={'Rank':'Rank in Area'})\nindia_state_area=india_state_area.rename(columns={'National Share (%)':'Percent_National_Share_By_Area'})\n\nindia_state_area","e4c08a37":"india_area_population_gdp=pd.merge(india_state_population,india_state_area,on=\"State\",how=\"outer\")\nindia_area_population_gdp=pd.merge(india_area_population_gdp,state_gdp,on=\"State\",how=\"outer\")\nindia_area_population_gdp.head()","18061cf3":"### Reading the Google Mobility Data for India\n\n'''\nThis function takes a country code and path to the mobility_report folder and returns the merged data for all years for the given Country Code\n\n'''\ndef getCountryMobilityReport(country_code,mobility_report_path):\n    __files__= glob.glob(mobility_report_path+\"*_\"+country_code+\"_*.csv\")\n    mobility_report_list=[]\n    for __file__ in __files__:\n        mobility_report_list.append(pd.read_csv(__file__))\n    mobility_report=pd.concat(mobility_report_list)\n    return mobility_report\n\n\nindia_mobility_report=getCountryMobilityReport(\"IN\",mobility_report_path=\"\/kaggle\/input\/google-mobility-data\/\")\nindia_mobility_report.shape","5647d6bc":"india_mobility_report.head()","b75d230b":"india_mobility=india_mobility_report[(india_mobility_report['country_region']==\"India\") & (pd.isna(india_mobility_report['sub_region_1']))]\nindia_mobility.shape","cb7ddbbb":"india_state_mobility=india_mobility_report[(india_mobility_report['country_region']==\"India\") & (pd.notna(india_mobility_report['sub_region_1'])) & (pd.isna(india_mobility_report['sub_region_2']))]\nindia_state_mobility.shape","b8856e74":"cols_to_include=['date','country_region','sub_region_1']+[col for col in india_mobility_report if \"percent_change_from_baseline\" in col]\nindia_mobility=india_mobility[cols_to_include]\nindia_state_mobility=india_state_mobility[cols_to_include]\nindia_mobility=india_mobility.drop(['sub_region_1'],axis=1)\nindia_state_mobility=india_state_mobility.drop(['country_region'],axis=1)\nindia_mobility=india_mobility.rename(columns={'country_region':'State'})\nindia_state_mobility=india_state_mobility.rename(columns={'sub_region_1':'State'})\nindia_state_mobility.head()\n","9400fe1d":"pd.isna(india_state_mobility).sum()","8c84e3fd":"pd.isna(india_mobility).sum()","e42819df":"activity_cols=[col for col in india_mobility_report if \"percent_change_from_baseline\" in col]\nfor col in activity_cols:\n    india_state_mobility.loc[pd.isna(india_state_mobility[col]),col]=0\n\n\n","c7e14a6c":"india_mobility['Date']=pd.to_datetime(india_mobility['date'])\nindia_state_mobility['Date']=pd.to_datetime(india_state_mobility['date'])\n","c5720e48":"## india_statewise_covid with india area, population and gdp information\nindia_statewise_data=pd.merge(india_statewise_data,india_area_population_gdp,on=\"State\",how=\"left\")\nindia_statewise_data.shape","d74f5c82":"set(india_statewise_data['State']) - set(india_state_mobility['State'])","c3ff52ee":"## Dropping Dates before Mobility Data was available\nmin_mobility_date=min(india_mobility['Date'])\nindia_statewise_data =india_statewise_data[(india_statewise_data['Date'] >= min_mobility_date)]\ncovid_india_data=covid_india_data[(covid_india_data['Date'] >= min_mobility_date)]","62d3cec7":"## Dropping states for which mobility data was not available\nignore_states=list(set(india_statewise_data['State']) - set(india_state_mobility['State']))\nindia_statewise_data=india_statewise_data[~india_statewise_data['State'].isin(ignore_states)]\nindia_statewise_data.shape","fe96099a":"india_statewise_data=pd.merge(india_statewise_data,india_state_mobility,on=['Date','State'],how=\"left\")\nindia_statewise_data.shape","6e2d2ff1":"covid_india_data=pd.merge(covid_india_data,india_mobility,on=['Date','State'],how=\"left\")\ncovid_india_data.shape","0301d119":"covid_india_data['Population_2020']=1370508600\ncovid_india_data['Area_sqkm']=3287263","8cbe6ebc":"'''\nThis function takes the data and for each of the rate_column, calculates the current Confirmed, Recovered and Deceased Values\n'''\ndef calculateTodayRate(data,rate_col):\n    if type(rate_col)==\"str\":\n        rate_col=[rate_col]\n    for col in rate_col:\n        data['Prev_Day_'+col]=data[col].shift(1)\n        data['Today_'+col]=data[col] - data['Prev_Day_'+col]\n        #data.drop(['Prev_Day_'+col],axis=1,inplace=True)\n    \n    return data","c8f31345":"'''\nThis function is based on http:\/\/njcmindia.org\/uploads\/11-3_141-143.pdf\n\nFor Doubling Rate, we will look at 7days prior cases\n\nOnly slight change, adding +1 to log in the denominator to avoid divison by 0\n'''\ndef getDoublingRate(data,window=7,confirmed_cases_col='Confirmed',date_col=\"Date\"):\n    ## Set Date Column as Index\n    data=data.set_index(\"Date\",drop=True)\n    data['7DaysPrior_Cases']=data[confirmed_cases_col].shift(window)\n    data[date_col]=data.index\n    data.reset_index(drop=True,inplace=True)\n    \n    data['log_Current_by_Prior']=data.apply(lambda row:np.log((row[confirmed_cases_col]+1)\/(row['7DaysPrior_Cases']+1)) if row[confirmed_cases_col]!=0 else 0,axis=1)\n    data['Doubling_Rate']=data.apply(lambda row:window*(np.log(2)\/(row['log_Current_by_Prior'])),axis=1)\n    data.loc[pd.isna(data['7DaysPrior_Cases']),'Doubling_Rate']=0\n    data.loc[(data[confirmed_cases_col]==0) & (data['7DaysPrior_Cases']==0),'Doubling_Rate']=0\n    #if row['log_Current_by_Prior']!=0 else 0\n    return data\n    \n    \n    \n","3bdb5dab":"'''\nThis function takes the data, the columns for which the rolling average is to be perfomed and the Rolling Window Period which is default to 7\n'''\ndef getRollingAverage(data,rate_col,window=7):\n    if type(rate_col)==\"str\":\n        rate_col=[rate_col]\n    for col in rate_col:\n        #print(col)\n        data[str(window)+\"Day_Rolling_Average_\"+col.replace(\"Today_\",\"\")]=data[col].rolling(window=window).mean()\n    return data","36836bc2":"def getActiveCases(data,confirmed_col=\"Confirmed\",recovered_col=\"Recovered\",deceased_col=\"Deceased\"):\n    data['Active_Cases']=data[confirmed_col] - data[recovered_col] - data[deceased_col]\n    return data\n\ndef getRecoveryDeathRate(data,recovered_col=\"Recovered\",confirmed_col=\"Confirmed\",deceased_col=\"Deceased\"):\n    data['Recovery_Rate']=(data[recovered_col]\/data[confirmed_col])\n    data['Death_Rate']=(data[deceased_col]\/data[confirmed_col])\n    return data","52dbf265":"def getPopulationDensity(data,population_col,area_col):\n    return data[population_col]\/data[area_col]","136a60e8":"def CasesPerMillion(data,population_col,cases_col):\n    data[cases_col+\"_Per_Million\"]=data[cases_col]\/data[population_col]*1000000\n    return data\n","644b58ec":"def getOutdoorMobility(data,outdoor_mobility_cols):\n    data['outdoor_percent_change_from_baseline']=data.loc[:,outdoor_mobility_cols].mean(axis=1)\n    return data\n    ","1ac128bc":"mobility_cols=[col for col in india_statewise_data if \"percent_change_from_baseline\" in col]\n\n#print(mobility_cols)\n\n\nindia_statewise_data=india_statewise_data.groupby(\"State\").apply(lambda x:calculateTodayRate(x,['Confirmed','Recovered','Deceased']))\nindia_statewise_data=india_statewise_data.groupby(\"State\").apply(lambda x:getRollingAverage(x,['Today_Confirmed','Today_Recovered','Today_Deceased']))\nindia_statewise_data=india_statewise_data.groupby(\"State\").apply(lambda x:getActiveCases(x,\"Confirmed\",\"Recovered\",\"Deceased\"))\nindia_statewise_data=india_statewise_data.groupby(\"State\").apply(lambda x:getRecoveryDeathRate(x))\n\nindia_statewise_data=getOutdoorMobility(india_statewise_data,mobility_cols)\nindia_statewise_data=india_statewise_data.groupby(\"State\").apply(lambda x:getRollingAverage(x,mobility_cols+['outdoor_percent_change_from_baseline']))\n\n\nindia_statewise_data=CasesPerMillion(india_statewise_data,\"Population_2020\",\"Confirmed\")\nindia_statewise_data=CasesPerMillion(india_statewise_data,\"Population_2020\",\"Recovered\")\nindia_statewise_data=CasesPerMillion(india_statewise_data,\"Population_2020\",\"Deceased\")\n\nindia_statewise_data['Population_Density']=getPopulationDensity(india_statewise_data,\"Population_2020\",\"Area_sqkm\")\n\nindia_statewise_data=india_statewise_data.groupby(\"State\").apply(lambda x:getDoublingRate(x))\n\nindia_statewise_data.drop(['State'],axis=1,inplace=True)\nindia_statewise_data=india_statewise_data.reset_index()\nindia_statewise_data.drop(['level_1'],axis=1,inplace=True)\n\n\ncovid_india_data=covid_india_data.groupby(\"State\").apply(lambda x:calculateTodayRate(x,['Confirmed','Recovered','Deceased']))\ncovid_india_data=covid_india_data.groupby(\"State\").apply(lambda x:getRollingAverage(x,['Today_Confirmed','Today_Recovered','Today_Deceased']))\ncovid_india_data=covid_india_data.groupby(\"State\").apply(lambda x:getRecoveryDeathRate(x))\n\n\ncovid_india_data=getOutdoorMobility(covid_india_data,mobility_cols)\n\ncovid_india_data=covid_india_data.groupby(\"State\").apply(lambda x:getRollingAverage(x,mobility_cols+['outdoor_percent_change_from_baseline']))\ncovid_india_data=getActiveCases(covid_india_data,\"Confirmed\",\"Recovered\",\"Deceased\")\ncovid_india_data=CasesPerMillion(covid_india_data,\"Population_2020\",\"Confirmed\")\ncovid_india_data=CasesPerMillion(covid_india_data,\"Population_2020\",\"Recovered\")\ncovid_india_data=CasesPerMillion(covid_india_data,\"Population_2020\",\"Deceased\")\n\n\ncovid_india_data=getDoublingRate(covid_india_data)\n\nindia_statewise_data.head()","fbe38eb5":"\ncovid_india_data.head(20)","b906512d":"def plotCovidTimeSeries(data,rate_col,date_col,color_pallete,plot_moving_average=True):\n\n    if type(rate_col)==\"str\":\n        rate_col=[rate_col]\n    num_cols=len(rate_col)\n    \n    subplot_title=[col.replace(\"Today_\",\"\")+\" Cases\" for col in rate_col]\n    fig = make_subplots(num_cols,1,shared_xaxes=True,subplot_titles=subplot_title)\n    col_id=1\n    for col in rate_col:\n        \n        fig.add_trace(go.Bar(x=data[date_col], y=data[col],\n                     name=col.replace(\"New_\",\"\").replace(\"Today_\",\"\")+\" Cases\",\n                     \n                     \n                     opacity=0.5,\n                     marker_line_color=color_pallete[col_id-1][3],\n                     marker_line_width=2),\n              row = col_id, col = 1)\n        ## Add line chart for the rolling average if plot_moving_average=True\n        if plot_moving_average==True:\n            rolling_avg_col=col.replace(\"Today_\",\"7Day_Rolling_Average_\")\n            fig.add_trace(go.Scatter(x=data[date_col],y=data[rolling_avg_col],line=dict(color=color_pallete[col_id-1][8]),name=col.replace(\"New_\",\"\").replace(\"Today_\",\"\")+\" Cases 7 Day Rolling Average\"),row=col_id,col=1)\n        \n        #fig.update_layout(xaxis=dict(showgrid=False),yaxis=dict(showgrid=False))\n        col_id=col_id+1\n    fig.update_layout(height=1500,width=1000)\n    fig.update_yaxes(showgrid=False)\n    fig.update_xaxes(\n    \n    showgrid=False,\n    rangeslider_visible=False,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=15,label=\"15days\",step=\"day\",stepmode=\"backward\"),\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=2, label=\"2m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=3, label=\"3m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=9, label=\"9m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            \n            dict(step=\"all\")\n        ])\n    )\n)\n    return fig\n    \n","96149534":"india_covid_fig=plotCovidTimeSeries(covid_india_data,[col for col in covid_india_data if col.startswith(\"Today_\")],\"Date\",[px.colors.sequential.Blues,px.colors.sequential.Greens,px.colors.sequential.Reds])\nindia_covid_fig.update_layout(title=\"Rise of COVID - INDIA\",title_x=0.5)","876dcab4":"px.line(covid_india_data,x=\"Date\",y=['Confirmed_Per_Million','Recovered_Per_Million'],color_discrete_sequence=[px.colors.sequential.Blues[6],px.colors.sequential.Greens[6],px.colors.sequential.Reds[6]],title=\"Confirmed and Recovered Cases Per Million- INDIA\")","83107967":"px.line(covid_india_data,x=\"Date\",y=['Deceased_Per_Million'],color_discrete_sequence=[px.colors.sequential.Reds[6]],title=\"Deceased Cases Per Million- INDIA\")","9cd97738":"px.line(covid_india_data,x=\"Date\",y=['Doubling_Rate'],color_discrete_sequence=[px.colors.diverging.PuOr[10]],title=\"Deceased Cases Per Million- INDIA\")","6e32c406":"\ndef getTopN(data,sort_col,n_top=10,is_top=True):\n    return data.sort_values(by=sort_col,ascending=not is_top).head(10).sort_values(by=sort_col,ascending=is_top)\n\ndef plotTopN(data,sort_col,n_top=10,is_top=True,x_col=\"State\",orientation=\"h\",color_continuous_scale=None,text_font_color=\"black\",text_format=\"%{text:.2s}\"):\n    top_n_data=getTopN(data,sort_col,n_top,is_top)\n    if is_top:\n        top=\"Top \"\n    else:\n        top=\"Bottom \"\n    if orientation==\"h\":\n        fig=px.bar(top_n_data,y=x_col,x=sort_col,orientation=orientation,title=top+str(n_top)+\" \"+ x_col+\"s by \"+sort_col.replace(\"_\",\" \"),color_continuous_scale=color_continuous_scale,color=sort_col,text=sort_col)\n    else:\n        fig=px.bar(top_n_data,x=x_col,y=sort_col,orientation=orientation,title=top+str(n_top)+\" \"+ x_col+\"s by \"+sort_col.replace(\"_\",\" \"),color_continuous_scale=color_continuous_scale,color=sort_col,text=sort_col)\n    \n    \n    fig.update_traces(textfont_color=text_font_color,textposition=\"outside\",texttemplate=text_format)\n    \n    \n    \n    \n\n    \n    return fig\n        ","2e3c630e":"max_date=max(india_statewise_data['Date'])\ncase_on_max_date=india_statewise_data[india_statewise_data['Date']==max_date]\n#case_on_max_date['Recovery_Rate']=(case_on_max_date['Recovered']\/case_on_max_date['Confirmed'])*100\n#case_on_max_date['Death_Rate']=(case_on_max_date['Deceased']\/case_on_max_date['Confirmed'])*100\nplotTopN(case_on_max_date,\"Confirmed\",n_top=10,color_continuous_scale=px.colors.sequential.Blues)","9cfc2308":"plotTopN(case_on_max_date,\"Active_Cases\",n_top=10,color_continuous_scale=px.colors.sequential.Blues)","9d880526":"plotTopN(case_on_max_date,\"Doubling_Rate\",n_top=10,color_continuous_scale=px.colors.sequential.Aggrnyl)","344db60d":"plotTopN(case_on_max_date,\"Doubling_Rate\",n_top=10,is_top=False,color_continuous_scale=px.colors.sequential.Aggrnyl)","d9eb0c4f":"plotTopN(case_on_max_date,\"Recovery_Rate\",n_top=20,color_continuous_scale=px.colors.sequential.Greens,text_format=\"%{text:.1%}\")\n","5d26f131":"plotTopN(case_on_max_date,\"Death_Rate\",n_top=10,color_continuous_scale=px.colors.sequential.Reds,text_format=\"%{text:.1%}\")\n","552ec152":"px.pie(case_on_max_date, values='Confirmed', names='State', title='Confirmed Cases across States',height=800,color_discrete_sequence=px.colors.sequential.Blues_r)","95ea2fd5":"px.pie(case_on_max_date, values='Deceased', names='State', title='Death Cases across States',height=800,color_discrete_sequence=px.colors.sequential.Reds_r)","80e7f5fc":"px.scatter(case_on_max_date,y=\"Confirmed_Per_Million\",x=\"Area_sqkm\",size=\"Deceased_Per_Million\",color=\"State\",title=\"Confirmed Cases Per Million vs Area - Size by Deceased Per Million\")","73b3a9d9":"covid_india_data.columns","f07e8c31":"def createMobilityPlot(data,date_col,primary_axis_cols,secondary_axis_cols,primary_yaxis_title,secondary_yaxis_title,primary_col_colors,plot_title):\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n    for idx,col in enumerate(secondary_axis_cols):\n        fig.add_trace(\n    go.Line(x=data[date_col], y=data[col], name=col.replace(\"7Day_Rolling_Average_\",\"\").replace(\"percent_change_from_baseline\",\"mobility\").replace(\"_\",\" \").title()),\n    secondary_y=True,\n)\n        \n    for idx,col in enumerate(primary_axis_cols):\n        fig.add_trace(go.Line(x=data[date_col], y=data[col], name=col.replace(\"_\",\" \"),line=dict(color=primary_col_colors[idx])),\n    secondary_y=False,\n                      \n)\n        \n    \n    \n   \n    fig.update_layout(\n    title_text=plot_title,\n)\n    #Set x-axes title\n    fig.update_xaxes(title_text=\"<b>Date\")\n    fig.update_yaxes(title_text=\"<b>\"+primary_yaxis_title, secondary_y=False)\n    fig.update_yaxes(title_text=\"<b>\"+secondary_yaxis_title, secondary_y=True)\n    return fig\n\n\n    \n    ","8d2c21ff":"fig=createMobilityPlot(covid_india_data,date_col=\"Date\",primary_axis_cols=['Doubling_Rate'],secondary_axis_cols=[col for col in covid_india_data if \"7Day_Rolling_Average\" in col and \"percent_change_from_baseline\" in col],primary_col_colors=[px.colors.diverging.PuOr[10]],primary_yaxis_title=\"Doubling Rate\",secondary_yaxis_title=\"Mobility Percent Change (7 days rolling average)\",plot_title=\"<b>Impact of Mobility on Doubling Rate Across India\")\n\n## Adding Range filter\nfig.update_xaxes(\n    \n    showgrid=False,\n    rangeslider_visible=False,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=15,label=\"15days\",step=\"day\",stepmode=\"backward\"),\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=2, label=\"2m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=3, label=\"3m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=9, label=\"9m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            \n            dict(step=\"all\")\n        ])\n    )\n)\n\n\n\nfig.show()","ec8f5b64":"second_wave_start_date=np.datetime64('2021-03-01')\nsecond_wave_start_date","48b97a47":"def getStateData(data,state,start_date=None):\n   \n    state_data=data[data['State']==state]\n    if start_date!=None:\n        #print(\"Filtering Start Date\")\n        state_data=state_data[state_data['Date']>=start_date]\n    return state_data","510a82db":"mh_data=getStateData(india_statewise_data,\"Maharashtra\",start_date=second_wave_start_date)\nmh_data.head()","b0de2091":"fig=createMobilityPlot(mh_data,date_col=\"Date\",primary_axis_cols=['Doubling_Rate'],secondary_axis_cols=[col for col in covid_india_data if \"7Day_Rolling_Average\" in col and \"percent_change_from_baseline\" in col],primary_col_colors=[px.colors.diverging.PuOr[10]],primary_yaxis_title=\"Doubling Rate\",secondary_yaxis_title=\"Mobility Percent Change (7 days rolling average)\",plot_title=\"<b>Impact of Mobility on Doubling Rate Across Maharastra\")\nfig.show()","3cd73788":"fig=createMobilityPlot(mh_data,date_col=\"Date\",primary_axis_cols=['7Day_Rolling_Average_Confirmed'],secondary_axis_cols=[col for col in covid_india_data if \"7Day_Rolling_Average\" in col and \"percent_change_from_baseline\" in col],primary_col_colors=[px.colors.sequential.Blues_r[0]],primary_yaxis_title=\"7 Day Rolling New Cases\",secondary_yaxis_title=\"Mobility Percent Change (7 days rolling average)\",plot_title=\"<b>Impact of Mobility on  New Cases Across Maharastra<\/b> (Dashed line is where lockdown was imposed)\")\nfig.add_vline(x=\"2021-04-14\",line_width=3, line_dash=\"dash\", line_color=\"green\")\n\n","f14fffbe":"### Merging all the Data","86dd7c94":"## Exploring the Data\n\n### Rise of COVID in India ","e6c85246":"1. **Punjab has a very high death rate**\n2. **Southern States like Karnataka and Kerala, though have a very high number of confirmed cases, there recovery and death rate is much lower**\n3. **Maharastra contributes to 21% of the total Cases, and 30% of Death Cases.**\nIn all the above graphs, we looked at number of Cases oveall - but how does this change when we look at per Millio people how many cases?\n\n\n\n### Impact of Area of State on Cases Per Million","fc72181a":"### Preprocessing the Data\n\n1. **In the raw data, the Confirmed, Recovered and Deceased columns are cumulative.We need to get the cases confirmed, recovered or deceased for that particular day** -  To analyse the number of cases each day, we need to subtract total cases of today from total cases of the previous day. \n\n2. **To smoothen the curve, we need to calculate the rolling 7 day moving average for Confirmed, Recovered and Deceased**\n\n3. **Get Active Number of Cases for Each Day - this is Total_Confirmed_Cases - Total_Recovered_Cases - Total_Deceased**\n\n4. **Create a column Population Density on statewise data- this field can help us understand if spread of the virus is more in denser areas**\n\n5. **To smoothen the mobility curve, we will also do a 7 day moving average**\n\n6. **Create a column that measures the Recovery Rate and Death Rate** \n\n7. **Create a column for Doubling Rate**\n\n8. **Mobility Data - Average across all outdoor place**\n\n\n\n\nBoth the calculations must be done for each state. \n","3b93e0cf":"1. **The Doubling Rate in Maharastra started to increase around April 14th - the day lockdown was announced**\n2. **Around April 14th, the doubling rate was 40 days, as of May 18th it is 118 days.**\n3. **Drop in Outdoor activities like Retail and Recreation, Parks, Workplaces can be observed since March 28th when night curfew was announced**\n4. **From april 24th we can see around 70% less mobility than baseline and it is around this time that the Doubling rate started increasing**\n","1627e853":"### Impact of Lockdown By States\n\nDuring the Second Wave States like Maharastra, Delhi, Karnataka, Kerala have imposed strict lockdowns . Let us see if the lockdowns had any impact on the cases","c78609d6":"### Overall India what is the contribution of Different States in the Total Number of Deaths and Cases?","5143613a":"There are UT like Daman and Diu and Andaman and Nicobar Islands for whom GDP data is not available. Let us map the Population, Area and GDP information with the COVID data for India States\n","f05bf8aa":"1. **Doubling rate was highest around Feb 21 - the TIme when India declared it won over COVID and from then on its been a steep drop. Since May 2nd the doubling rate has begun to increase**\n2. **From the graph, we can see that in beginning of April, there is a drop in the retail and recreation mobility - It is time when states like Karnataka imposed a rule of 50% seating only in movie theatres. This is the time where the drop in Doubling Rate slowed down**\n3. **By May 8th number of people staying inside homes(Residential Mobility Change  increased by 24% compared to baseline) and the doubling rate started increasing**\n4. **Drop in Grocery and Pharmacy Mobility has been the highest since April 6th**\n\n\n","ffa9f805":"1. **Maharastra, leads in the total number of cases. The cases in Maharastra is close to 5Million, more than the second highest state (Karnataka) by almost 3 Times.**\n\n2. **Uttar Pradesh which has the highest populated state in the country has much lesser number of cases**\n\n3. **The number of Active Cases in Maharastra and Karnataka are almost the same**\n\n4. **Karnataka has one of the lowest doubling rate of 35 days, while Maharastra though has a lot of cases, takes 87 days to double the cases**\n\n### Most Affected States - By Recovery Rate and Death Rate","0ce49e5c":"### Most Affected State - By Number of Cases\n","e7b4749b":"As per google mobility Reports, there can be days where the percent change from baseline can be missing - this may be because the data couldnt be captired without loss of anonymity indicating lower activity level.So, for our purposes we will replace the Nans in google mobility Report by 0\n\nAlso, there is no missing value at country level but missing data is seen at State Level Report","1f3aa58e":"1.**After the lockdown there has been an significant drop in Outdoor Mobility**\n","663422f9":"The COVID Data, contains data for India as well as the States in the same table. Let us seperate them into two datasets ","a274bfcf":"## Load the Data\n\n1. **Download the State wise data of India from the covid19india api and fill in the missing dates**\n\n2. **Download the Population, GDP and Area Data**\n\n3. **Read the Mobility Data**\n\nMerge all the Datasets ","e007b56e":"### Introduction\n\nOn 22nd January 2021, PM Modi had declared Indias victory against the deadly COVID Pandemic - The first wave came and the curve flattened and people started walking out on the streets all precautions gone to the wind, and then came March 2021, almost a year since COVID pandemic started - and along with it brought the rise in COVID Cases across the country - this time because of a double\/triple mutant. Unlike the first wave, this was more infectious, infecting the young as well as children.. Soon Hospital Beds were full and there was shortage of Oxygen and Ventilators. \n\nThis notebook is to analyse the second wave in India.For this analysis, we will be using the Google Mobility Data. This Mobility Data is anonymised and gives an aggregate measure of how peoples movements have changed over time since the beginning of the pandemic. ","da75c1d0":"### How has Movement Had an impact on the COVID Cases?\n\n#### Impact of Movement on India\n\nOne key measure that can help understand how movement impacted the rise of COVID is the doubling rate. ","1e44c56b":"1. **In mobility data,Dadra and Nagar Haveli and Daman and Diu are captired at two levels - Dadra and Nagar Haveli , Daman and Diu  and Ladakh is not captured seperately.As these are smaller UTs and do not have a major impact, for now let us ignore them in our analysis.**\n\n2. **The mobility data has information 15 Feb 2020, while COVID data is from 30 Jan 2020(first instance seen in Kerala). For our analysis, let us consider the data from 15Feb 2020 as before this the case numbers was insignificant**\n\n3. **Also, the mobility data is updated weekly while COVID data is updated daily. So for a few days in the end, the mobility data may be NULL**","98171848":"1. **For India as a country data, we need to get the data where country_region=\"India\" and sub_region_1 and sub_region_2 are NULL**\n\n2. **For state level, we need to get where country_region= \"India\" and sub_region_1=state_name.** \nSince we have two dataframes one for complete India COVID Cases and another for state level, let us extract the google mobility data at the same level.\n\n3. **sub_region_2 is for district level and since we are not looking at district level, we can drop this column for this analysis**","da56ec45":"#### Maharastra - Second Wave\n\nMaharastra has been one of the most affected states during the Second Wave. \nThis state imposed lockdown since April 14 2021 and the lockdown now has been extended till June 1st 2021. ","3c2729e5":"1. **As we can see in the above plot, around Sep 2020 India saw peak in COVID Cases and then there was a lull - the time we belived we defeated COVID. But as March dawned , COVID started rising steeply - catching everyone unawares - leading to Oxygen shortage and lack of beds and life saving drugs**\n\n2. **In the Second wave the number of daily cases is atleast 4 Times that of the peak cases during first wave  and is increasing (as of 8 May 2021)**\n\n3. **In the Second Wave, the Gap between Confirmed Cases Per million and Recovered Cases Per Million has increased.**\n","73234ee2":"1. **Compared to larger states, UT and states like Punjab,Kerala,Uttarakhand, J&K, have higher cases per million people.**\n\n2. **For example, Kerala whose area is less then 50k sq km has most number of confirmed cases per million**\n\n3. **States which have greater than 200k sqkm area except Maharastra - seem to have lower number of Confirmed Cases Per Million People**\n\n4. **Between around 70k sqkm Area and less than 200sqkm area , there is a linear relationship between the number of Confirmed Cases Per Million and Area of the state**\n\n5. **States like GOA,Delhi,Pudhucherry have smaller area and at same time high Death Rate per million**\n\n6. **States that have higher area(beyound 200k sqkm) like UP,Madhya Pradesh, Rajasthan have very low death rate per million**\n\n7. **Kerala is one state which has a high COnfirmed_Per_Million, but its Death rate is low**\n\n8. **In States like Himachal Pradesh, Punjab, Uttarakhand, we can see that Confirmed_Per_Million is less than 30K, but Death Rate is higher**\n\n9. **Confirmed Cases Per Million is higher than Maharastra which has recorded the highest number of COVID Cases - but Kerala also has one of the lowest Death Rates**"}}