{"cell_type":{"14ae7ce4":"code","849e1494":"code","bf76e9aa":"code","1c12e928":"code","0e1c6bd8":"code","47f6318b":"code","3a73c66a":"code","32182536":"code","3075221f":"code","e85274bc":"code","225bf279":"code","f13affa9":"code","f0db5246":"code","457fcd24":"code","1bc0d132":"code","b702dcfc":"code","8aa47cbf":"markdown","45840be7":"markdown","042379a3":"markdown","e0ba5200":"markdown","a540f2b9":"markdown","ba53198d":"markdown","ef0f88a7":"markdown","5dcf2d43":"markdown","fa06d02a":"markdown","554a379c":"markdown","3e702f69":"markdown","ce96a3b4":"markdown","2aecb8f8":"markdown","ab0305be":"markdown","d19efdd4":"markdown"},"source":{"14ae7ce4":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.linear_model import LogisticRegression","849e1494":"for dirname, _, filenames in os.walk('\/kaggle'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndata_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndata_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\n# data_train.head()","bf76e9aa":"\ndef quant_sex(value):\n    ''' Change variable Sex from qualitative to quantitative values'''\n    if value == 'female':\n        return 1\n    else:\n        return 0\n    \nvariables = ['Sex_bin', 'Age', 'Pclass', 'SibSp', 'Parch', 'Fare', 'Embarked_S', 'Embarked_C', 'Cabine_nula', 'Nome_contem_Miss', 'Nome_contem_Mrs', 'Nome_contem_Master', 'Nome_contem_Col', 'Nome_contem_Major', 'Nome_contem_Mr']\n\n#\n# Treino\n#\ndata_train['Embarked_S'] = (data_train['Embarked'] == 'S').astype(int)\ndata_train['Embarked_C'] = (data_train['Embarked'] == 'C').astype(int)\n# data_train['Embarked_Q'] = (train['Embarked'] == 'Q').astype(int)\n\ndata_train['Cabine_nula'] = data_train['Cabin'].isnull().astype(int)\n\ndata_train['Nome_contem_Miss'] = data_train['Name'].str.contains(\"Miss\").astype(int)\ndata_train['Nome_contem_Mrs'] = data_train['Name'].str.contains(\"Mrs\").astype(int)\n\ndata_train['Nome_contem_Master'] = data_train['Name'].str.contains(\"Master\").astype(int)\ndata_train['Nome_contem_Col'] = data_train['Name'].str.contains(\"Col\").astype(int)\ndata_train['Nome_contem_Major'] = data_train['Name'].str.contains(\"Major\").astype(int)\ndata_train['Nome_contem_Mr'] = data_train['Name'].str.contains(\"Mr\").astype(int)\n\ndata_train['Sex_bin'] = data_train['Sex'].map(quant_sex)\nsub_data_train = data_train[variables].fillna(-1)\nsurvived_train = data_train['Survived']\n\n#\n# Teste\n#\ndata_test['Embarked_S'] = (data_test['Embarked'] == 'S').astype(int)\ndata_test['Embarked_C'] = (data_test['Embarked'] == 'C').astype(int)\n# data_train['Embarked_Q'] = (train['Embarked'] == 'Q').astype(int)\n\ndata_test['Cabine_nula'] = data_test['Cabin'].isnull().astype(int)\n\ndata_test['Nome_contem_Miss'] = data_test['Name'].str.contains(\"Miss\").astype(int)\ndata_test['Nome_contem_Mrs'] = data_test['Name'].str.contains(\"Mrs\").astype(int)\n\ndata_test['Nome_contem_Master'] = data_test['Name'].str.contains(\"Master\").astype(int)\ndata_test['Nome_contem_Col'] = data_test['Name'].str.contains(\"Col\").astype(int)\ndata_test['Nome_contem_Major'] = data_test['Name'].str.contains(\"Major\").astype(int)\ndata_test['Nome_contem_Mr'] = data_test['Name'].str.contains(\"Mr\").astype(int)\n\ndata_test['Sex_bin'] = data_test['Sex'].map(quant_sex)\nsub_data_test = data_test[variables].fillna(-1)","1c12e928":"baseline = (data_test['Sex'] == 'female').astype(int)\nbaseline.index = data_test['PassengerId']\nbaseline.name = 'Survived'\nbaseline.to_csv('gender_submission_baseline.csv', header = True)\n\n# Imprime os 10 primeiros registros do arquivo\n# !head -n10 gender_submission.csv","0e1c6bd8":"model = RandomForestClassifier(n_estimators = 100, n_jobs = -1, random_state = 0)\n\nmodel.fit(sub_data_train, survived_train) \n\nrf_survived = model.predict(sub_data_test)\n\n# Imprime variavel\n# rf_survived","47f6318b":"output = pd.Series(rf_survived, index = data_test['PassengerId'], name = 'Survived')\noutput.to_csv(\"random_forest.csv\", header = True)\n\n# !head -n10 random_forest.csv","3a73c66a":"model = LogisticRegression()\n\nmodel.fit(sub_data_train, survived_train) \n\nlr_survived = model.predict(sub_data_test)\n\n# Imprime variavel\n# lr_survived","32182536":"output = pd.Series(lr_survived, index = data_test['PassengerId'], name = 'Survived')\noutput.to_csv(\"logistic_regression.csv\", header = True)\n\n# !head -n10 logistic_regression.csv","3075221f":"sub_train, sub_valid, sub_surv_train, sub_surv_valid  = train_test_split(sub_data_train, survived_train, test_size = 0.5)\n\n# Imprime dimens\u00f5es das tuplas\n# sub_train.shape, sub_valid.shape, sub_surv_train.shape, sub_surv_valid.shape\n\n# Baseline\nbaseline = (sub_valid['Sex_bin'] == 1).astype(np.int64)\nacc_baseline = np.mean(sub_surv_valid == baseline)\n\n# Random Forest\nmodel_RF = RandomForestClassifier(n_estimators = 100, n_jobs = -1, random_state = 0)\nmodel_RF.fit(sub_train, sub_surv_train) \nsurvived_predicted_valid_RF = model_RF.predict(sub_valid)\nacc_rf = np.mean(sub_surv_valid == survived_predicted_valid_RF)\n\n# Logistic Regression\nmodel_LR = LogisticRegression()\nmodel_LR.fit(sub_train, sub_surv_train) \nsurvived_predicted_valid_LR = model_LR.predict(sub_valid)\nacc_lr = np.mean(sub_surv_valid == survived_predicted_valid_LR)","e85274bc":"def cross_validation(kfold, data, survived, model):\n    results = []\n    valid_lines = []\n    survived_predicted = []\n    for train_lines, valid_lines in kfold.split(data):\n        # print(\"Train:\", train_lines.shape[0])\n        # print(\"Valid:\", valid_lines.shape[0])\n\n        sub_train, sub_valid = data.iloc[train_lines], data.iloc[valid_lines] \n        sub_surv_train, sub_surv_valid =  survived.iloc[train_lines], survived.iloc[valid_lines]\n\n        model.fit(sub_train, sub_surv_train) \n        survived_predicted = model.predict(sub_valid)\n\n        acc = np.mean(sub_surv_valid == survived_predicted)\n        results.append(acc)\n        # print(\"Acc:\", acc)\n        # print()\n    return results, valid_lines, survived_predicted","225bf279":"kf = RepeatedKFold(n_splits = 2, n_repeats = 10, random_state = 10)\n\n# Random Forest\nmodel_RF = RandomForestClassifier(n_estimators = 100, n_jobs = -1, random_state = 0)\nresults_kf_rf, valid_lines_rf, survived_predicted_rf = cross_validation(kf, sub_data_train, survived_train, model_RF)\nacc_kf_rf = np.mean(results_kf_rf)\n\n# Logistic Regression\nmodel_LR = LogisticRegression()\nresults_kf_lr, valid_lines_lr, survived_predicted_lr = cross_validation(kf, sub_data_train, survived_train, model_LR)\nacc_kf_lr = np.mean(results_kf_lr)","f13affa9":"print(\"Baseline\\t\\t\", acc_baseline, \"\\nRandom Forest\\t\\t\", acc_rf, \"\\nLogistic Regression\\t\", acc_lr, \"\\nKFold RF\\t\\t\", acc_kf_rf, \"\\nKFold LR\\t\\t\", acc_kf_lr)","f0db5246":"%matplotlib inline\n%pylab inline\npylab.hist(results_kf_rf), pylab.hist(results_kf_lr, alpha=0.8)","457fcd24":"data_check = data_train.iloc[valid_lines_rf].copy()\ndata_check[\"Predicted\"] = survived_predicted_rf\n# data_check.head()\n\nerrors = data_check[data_check[\"Survived\"] != data_check[\"Predicted\"]]\nerrors = errors[['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Sex_bin', 'Predicted', 'Survived']]\n# errors.head()\n\nwomen = errors[errors[\"Sex\"] == \"female\"]\nmen = errors[errors[\"Sex\"] == \"male\"]\n\nwomen.sort_values(\"Survived\")","1bc0d132":"men.sort_values(\"Survived\")","b702dcfc":"predicted = lr_survived\nfile_submit = pd.Series(predicted, index = data_test[\"PassengerId\"], name = \"Survived\" )\nfile_submit.to_csv(\"titanic_prediction.csv\", header = True)\n\n# head -n10 titanic_prediction.csv","8aa47cbf":"Exibir valores de acur\u00e1cia para as valida\u00e7\u00f5es testadas","45840be7":"### Valida\u00e7\u00e3o cruzada (KFold Cross Validation) ###\n\nDefinir fun\u00e7\u00e3o que executa valida\u00e7\u00e3o cruzada","042379a3":"Resolu\u00e7\u00e3o baseada no tutorial do [Mario Filho](https:\/\/github.com\/ledmaster\/TutorialTitanic)\n\n## Bibliotecas ##","e0ba5200":"## Modelos ##\n\n### Base ###\n\nModelo que assume que todas as mulheres sobrevivem","a540f2b9":"## Visualiza\u00e7\u00e3o dos dados ##","ba53198d":"Exportando resultados para formato de submiss\u00e3o","ef0f88a7":"## Valida\u00e7\u00e3o ##\n\n### Simples ###","5dcf2d43":"## An\u00e1lise de erro ##","fa06d02a":"Quantizando os dados","554a379c":"Exportando resultados para formato de submiss\u00e3o","3e702f69":"Executar valida\u00e7\u00e3o cruzada com os modelos definidos","ce96a3b4":"## Submiss\u00e3o ##","2aecb8f8":"### Random Forest ###\n\nCriando modelo, executando treinamento e predi\u00e7\u00e3o","ab0305be":"### Regress\u00e3o Linear ###\n\nCriando modelo, executando treinamento e predi\u00e7\u00e3o","d19efdd4":"## Dados ##\n\nLeitura dos dados"}}