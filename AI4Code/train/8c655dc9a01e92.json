{"cell_type":{"d65212ee":"code","64adddb5":"code","8775239f":"code","afa143fd":"code","3db56c16":"code","5ccd7274":"code","6c93c06e":"code","289285cd":"code","605a9c2c":"code","8f821452":"markdown","f78619d7":"markdown"},"source":{"d65212ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","64adddb5":"data = pd.read_csv('\/kaggle\/input\/swiss-banknote-conterfeit-detection\/banknotes.csv')\ndata","8775239f":"data.columns","afa143fd":"sns.countplot(data['conterfeit'])\nplt.show()","3db56c16":"for column in data.columns:\n    sns.boxplot(y=column, data=data, x='conterfeit')\n    plt.title(column)\n    plt.show()","5ccd7274":"X = data[['Length', 'Left', 'Right', 'Bottom', 'Top', 'Diagonal']]\ny = data['conterfeit']","6c93c06e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","289285cd":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n#from sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodels = []\nmodels.append(('LogisticRegression', LogisticRegression()))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\nmodels.append(('XGBClassifier', XGBClassifier()))\nmodels.append(('GradientBoostingClassifier', GradientBoostingClassifier()))\n#models.append(('MLPClassifier', MLPClassifier()))\nmodels.append(('KNeighborsClassifier', KNeighborsClassifier()))\nmodels.append(('RandomForestClassifier', RandomForestClassifier()))\n\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=0)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","605a9c2c":"model=GradientBoostingClassifier(random_state=0,learning_rate=0.2,n_estimators=200)\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\n\nfrom sklearn import metrics\n\ncm = metrics.confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(9,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix - score:'+str(metrics.accuracy_score(y_test,y_pred))\nplt.title(all_sample_title, size = 15);\nplt.show()\nprint(metrics.classification_report(y_test,y_pred))","8f821452":"The features are very distinct between counterfeit and real notes. I will first use decision trees to classify. But first things first, let me split the dataset to train and test.","f78619d7":"All models are giving an very goods results. "}}