{"cell_type":{"ae70394c":"code","79f475ca":"code","fb544000":"code","160e28e7":"code","c8a0b475":"code","ae97cdaf":"code","1d333b28":"code","566c5876":"code","862cca28":"code","ed272567":"code","c27029c5":"code","156ea3b4":"code","457c95d4":"code","d698c7b3":"code","d8996049":"code","c0b299b3":"code","4c675b73":"code","40230181":"code","91642750":"code","ea925a12":"code","f717f6e7":"code","d31f12e7":"code","3a0205f9":"code","baa45547":"code","a1cfa33f":"code","3c97bcae":"code","3a5859d4":"code","7344bd2d":"code","3c247b19":"code","31d52f85":"code","dfb0e834":"code","f28598e1":"code","e05373b9":"code","87fb3aa6":"code","6107b775":"code","00a08590":"markdown","7f521eaa":"markdown","38bfb660":"markdown","4cf68ade":"markdown","110a849a":"markdown","dc91c323":"markdown","83756c45":"markdown","dbf78832":"markdown","5c4e79d1":"markdown","a60ba2bc":"markdown","e50bdcf8":"markdown","ba29e04d":"markdown","f93bf7c2":"markdown","a184aa04":"markdown","4ef5c4f3":"markdown","acb2f77a":"markdown","eb6299ca":"markdown","6ee24927":"markdown","869fcf52":"markdown","797184c5":"markdown","4ef5c753":"markdown"},"source":{"ae70394c":"! pip install openpyxl","79f475ca":"import os\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error as mae","fb544000":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","160e28e7":"df = pd.read_excel('\/kaggle\/input\/covid19-and-character-strengths\/DB.xlsx')\ndf.head()","c8a0b475":"df.info()","ae97cdaf":"df.replace(to_replace={'Student': 1, 'Other': 2}, inplace=True)\ndf.replace(to_replace={'Male': 0, 'Female': 1}, inplace=True)\ndf.fillna(0,inplace=True)\ndf[['Student','Gender']]= df[['Student','Gender']].astype('int64')","1d333b28":"plt.figure(figsize=(16,12))\n\nheatmap = sns.heatmap(df.corr(), vmin=-1,vmax=1, annot=False, cmap='viridis')\n\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12)\nplt.show()","566c5876":"df_p = df.drop(columns=['Participant', 'Openness', 'Restraint', 'Transcendence', 'Interpersonal'])\ndf_p.head()","862cca28":"features = df_p.iloc[:,3:-3]","ed272567":"cov_mat = np.cov(features.T)\n\neig_vals, eig_vectors = np.linalg.eig(cov_mat)\n\ntotal_sum = sum(eig_vals)\nvar_exp = [(i\/total_sum)*100 for i in eig_vals]\ncum_var_exp = np.cumsum(var_exp)\n\nwith plt.style.context('dark_background'):\n    plt.figure(figsize=(16,9))\n    plt.bar(range(1,31),cum_var_exp, label='Cummulative Variance Explained for components')\n    plt.xlabel('Principal Components')\n    plt.ylabel('Cummulative Variance Explained')\n    plt.legend(loc=(0,0.9))\n    plt.xticks(range(1,31))\n    for i in range(30):\n        plt.text(x = i+0.5, y = cum_var_exp[i]+1, s = '{:.1f}'.format(cum_var_exp[i]), size = 10)\n","c27029c5":"nd_feat = features.iloc[:,6:]\ncov_mat = np.cov(nd_feat.T)\n\neig_vals, eig_vectors = np.linalg.eig(cov_mat)\n\ntotal_sum = sum(eig_vals)\nvar_exp = [(i\/total_sum)*100 for i in eig_vals]\ncum_var_exp = np.cumsum(var_exp)\n\nwith plt.style.context('dark_background'):\n    plt.figure(figsize=(16,9))\n    plt.bar(range(1,25),cum_var_exp, label='Cummulative Variance Explained for components')\n    plt.xlabel('Principal Components')\n    plt.ylabel('Cummulative Variance Explained')\n    plt.legend(loc=(0,0.9))\n    plt.xticks(range(1,25))\n    for i in range(24):\n        plt.text(x = i+0.5, y = cum_var_exp[i]+1, s = '{:.1f}'.format(cum_var_exp[i]), size = 10)\n","156ea3b4":"# Variables into account\nfeatures.columns.values.tolist()","457c95d4":"X_train, X_test, targets_train, targets_test = train_test_split(features, \n                                                             df_p.drop(columns=features.columns.values.tolist()),\n                                                             test_size = 0.2,\n                                                             shuffle = True,\n                                                             random_state = 42)\n\n(DASS_tr, DASS_ts) = (targets_train.iloc[:,0], targets_test.iloc[:,0])\n(GHQ_tr, GHQ_ts) = (targets_train.iloc[:,1], targets_test.iloc[:,1])\n(SEC_tr, SEC_ts) = (targets_train.iloc[:,2], targets_test.iloc[:,2])\n(DAS_tr, DAS_ts) = (targets_train.iloc[:,3:], targets_test.iloc[:,3:])","d698c7b3":"scaler = MinMaxScaler(feature_range=(0,1))\nX_tr = scaler.fit_transform(X_train)\nX_ts = scaler.transform(X_test)","d8996049":"RFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, DASS_tr)\n\nDASS_pred = RFR.predict(X_ts)\nDASS_mae = mae(DASS_ts, DASS_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, GHQ_tr)\n\nGHQ_pred = RFR.predict(X_ts)\nGHQ_mae = mae(GHQ_ts, GHQ_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, SEC_tr)\n\nSEC_pred = RFR.predict(X_ts)\nSEC_mae = mae(SEC_ts, SEC_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, DAS_tr)\n\nDAS_pred = RFR.predict(X_ts)\nAnx_mae = mae(DAS_ts.iloc[:,0], DAS_pred[:,0])\nDep_mae = mae(DAS_ts.iloc[:,1], DAS_pred[:,1])\nStr_mae = mae(DAS_ts.iloc[:,2], DAS_pred[:,2])","c0b299b3":"xx = range(0,len(X_ts))\nfig, ax = plt.subplots(2,3,sharex= True, figsize=(16,9))\nfig.suptitle('Random Forest Regressor model predictions')\n\nax[0,0].plot(xx, sorted(DASS_ts), color='b', label='Actual')\nax[0,0].plot(xx, sorted(DASS_pred), color='k', label='Predicted', alpha=0.7)\nax[0,0].fill_between(xx, sorted(DASS_pred)+DASS_mae, sorted(DASS_pred)-DASS_mae,\n                     color = 'k',alpha=0.15)\nax[0,0].legend()\nax[0,0].set_title('Depression Anxiety Stress Scale\\n MAE: {:.2f}'.format(DASS_mae))\n\nax[0,1].plot(xx, sorted(GHQ_ts), color='r', label='Actual')\nax[0,1].plot(xx, sorted(GHQ_pred), color='k', label='Predicted', alpha=0.7)\nax[0,1].fill_between(xx, sorted(GHQ_pred)+GHQ_mae, sorted(GHQ_pred)-GHQ_mae,\n                     color = 'k',alpha=0.15)\nax[0,1].legend()\nax[0,1].set_title('General Heatlh Questionnaire\\n MAE: {:.2f}'.format(GHQ_mae))\n\nax[0,2].plot(xx, sorted(SEC_ts), color='g', label='SEC Actual')\nax[0,2].plot(xx, sorted(SEC_pred), color='k', label='SEC Predicted', alpha=0.7)\nax[0,2].fill_between(xx, sorted(SEC_pred)+SEC_mae, sorted(SEC_pred)-SEC_mae,\n                     color = 'k',alpha=0.15)\nax[0,2].legend()\nax[0,2].set_title('Self efficacy for CoVid-19\\n MAE: {:.2f}'.format(SEC_mae))\n\nax[1,0].plot(xx, sorted(DAS_ts.iloc[:,0]), color='b', label='Anxiety Actual')\nax[1,0].plot(xx, sorted(DAS_pred[:,0]), color='k', label='Anxiety Predicted', alpha=0.7)\nax[1,0].fill_between(xx, sorted(DAS_pred[:,0])+Anx_mae, sorted(DAS_pred[:,0])-Anx_mae,\n                     color = 'k',alpha=0.15)\nax[1,0].legend()\nax[1,0].set_title('Anxiety Scale\\n MAE: {:.2f}'.format(Anx_mae))\n\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,1]), color='r', label='Depression Actual')\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_pred[:,1]), color='k', label='Depression Predicted', alpha=0.7)\nax[1,1].fill_between(xx, sorted(DAS_pred[:,1])+Dep_mae, sorted(DAS_pred[:,1])-Dep_mae,\n                     color = 'k',alpha=0.15)\n\nax[1,1].legend()\nax[1,1].set_title('Depression Scale\\n MAE: {:.2f}'.format(Dep_mae))\n\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,2]), color='g', label='Stress Actual')\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_pred[:,2]), color='k', label='Stress Predicted', alpha=0.7)\nax[1,2].fill_between(xx, sorted(DAS_pred[:,2])+Str_mae, sorted(DAS_pred[:,2])-Str_mae,\n                     color = 'k',alpha=0.15)\n\nax[1,2].legend()\nax[1,2].set_title('Stress Scale\\n MAE: {:.2f}'.format(Str_mae))\n\nplt.show()","4c675b73":"GBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DASS_tr)\n\nDASS_pred1 = GBR.predict(X_ts)\nDASS_mae1 = mae(DASS_ts, DASS_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, GHQ_tr)\n\nGHQ_pred1 = GBR.predict(X_ts)\nGHQ_mae1 = mae(GHQ_ts, GHQ_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, SEC_tr)\n\nSEC_pred1 = GBR.predict(X_ts)\nSEC_mae1 = mae(SEC_ts, SEC_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,0])\nAnx_pred1 = GBR.predict(X_ts)\n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,1])\nDep_pred1 = GBR.predict(X_ts)\n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,2])\nStr_pred1 = GBR.predict(X_ts)\n\nAnx_mae1 = mae(DAS_ts.iloc[:,0], Anx_pred1)\nDep_mae1 = mae(DAS_ts.iloc[:,1], Dep_pred1)\nStr_mae1 = mae(DAS_ts.iloc[:,2], Str_pred1)","40230181":"xx = range(0,len(X_ts))\nfig, ax = plt.subplots(2,3,sharex= True, figsize=(16,9))\nfig.suptitle('Gradient Boosting Regressor model predictions')\n\nax[0,0].plot(xx, sorted(DASS_ts), color='b', label='Actual')\nax[0,0].plot(xx, sorted(DASS_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,0].fill_between(xx, sorted(DASS_pred1)+DASS_mae1, sorted(DASS_pred1)-DASS_mae1,\n                     color = 'k',alpha=0.15)\nax[0,0].legend()\nax[0,0].set_title('Depression Anxiety Stress Scale\\n MAE: {:.2f}'.format(DASS_mae1))\n\nax[0,1].plot(xx, sorted(GHQ_ts), color='r', label='Actual')\nax[0,1].plot(xx, sorted(GHQ_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,1].fill_between(xx, sorted(GHQ_pred1)+GHQ_mae1, sorted(GHQ_pred1)-GHQ_mae1,\n                     color = 'k',alpha=0.15)\nax[0,1].legend()\nax[0,1].set_title('General Heatlh Questionnaire\\n MAE: {:.2f}'.format(GHQ_mae1))\n\nax[0,2].plot(xx, sorted(SEC_ts), color='g', label='Actual')\nax[0,2].plot(xx, sorted(SEC_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,2].fill_between(xx, sorted(SEC_pred1)+SEC_mae1, sorted(SEC_pred1)-SEC_mae1,\n                     color = 'k',alpha=0.15)\nax[0,2].legend()\nax[0,2].set_title('Self efficacy for CoVid-19\\n MAE: {:.2f}'.format(SEC_mae1))\n\nax[1,0].plot(xx, sorted(DAS_ts.iloc[:,0]), color='b', label='Actual')\nax[1,0].plot(xx, sorted(Anx_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,0].fill_between(xx, sorted(Anx_pred1)+Anx_mae1, sorted(Anx_pred1)-Anx_mae1,\n                     color = 'k',alpha=0.15)\nax[1,0].legend()\nax[1,0].set_title('Anxiety Scale\\n MAE: {:.2f}'.format(Anx_mae1))\n\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,1]), color='r', label='Actual')\nax[1,1].plot(range(0,len(X_ts)), sorted(Dep_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,1].fill_between(xx, sorted(Dep_pred1)+Dep_mae1, sorted(Dep_pred1)-Dep_mae1,\n                     color = 'k',alpha=0.15)\n\nax[1,1].legend()\nax[1,1].set_title('Depression Scale\\n MAE: {:.2f}'.format(Dep_mae1))\n\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,2]), color='g', label='Actual')\nax[1,2].plot(range(0,len(X_ts)), sorted(Str_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,2].fill_between(xx, sorted(Str_pred1)+Str_mae1, sorted(Str_pred1)-Str_mae1,\n                     color = 'k',alpha=0.15)\n\nax[1,2].legend()\nax[1,2].set_title('Stress Scale\\n MAE: {:.2f}'.format(Str_mae1))\n\nplt.show()","91642750":"# Variables into account\nnd_feat.columns.values.tolist()","ea925a12":"X_train, X_test, targets_train, targets_test = train_test_split(nd_feat, \n                                                             df_p.drop(columns=features.columns.values.tolist()),\n                                                             test_size = 0.2,\n                                                             shuffle = True,\n                                                             random_state = 42)\n\n(DASS_tr, DASS_ts) = (targets_train.iloc[:,0], targets_test.iloc[:,0])\n(GHQ_tr, GHQ_ts) = (targets_train.iloc[:,1], targets_test.iloc[:,1])\n(SEC_tr, SEC_ts) = (targets_train.iloc[:,2], targets_test.iloc[:,2])\n(DAS_tr, DAS_ts) = (targets_train.iloc[:,3:], targets_test.iloc[:,3:])","f717f6e7":"scaler = MinMaxScaler(feature_range=(0,1))\nX_tr = scaler.fit_transform(X_train)\nX_ts = scaler.transform(X_test)","d31f12e7":"RFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, DASS_tr)\n\nDASS_pred = RFR.predict(X_ts)\nDASS_mae2 = mae(DASS_ts, DASS_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, GHQ_tr)\n\nGHQ_pred = RFR.predict(X_ts)\nGHQ_mae2 = mae(GHQ_ts, GHQ_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, SEC_tr)\n\nSEC_pred = RFR.predict(X_ts)\nSEC_mae2 = mae(SEC_ts, SEC_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, DAS_tr)\n\nDAS_pred = RFR.predict(X_ts)\nAnx_mae2 = mae(DAS_ts.iloc[:,0], DAS_pred[:,0])\nDep_mae2 = mae(DAS_ts.iloc[:,1], DAS_pred[:,1])\nStr_mae2 = mae(DAS_ts.iloc[:,2], DAS_pred[:,2])","3a0205f9":"xx = range(0,len(X_ts))\nfig, ax = plt.subplots(2,3,sharex= True, figsize=(16,9))\nfig.suptitle('Random Forest Regressor model predictions')\n\nax[0,0].plot(xx, sorted(DASS_ts), color='b', label='Actual')\nax[0,0].plot(xx, sorted(DASS_pred), color='k', label='Predicted', alpha=0.7)\nax[0,0].fill_between(xx, sorted(DASS_pred)+DASS_mae2, sorted(DASS_pred)-DASS_mae2,\n                     color = 'k',alpha=0.15)\nax[0,0].legend()\nax[0,0].set_title('Depression Anxiety Stress Scale\\n MAE: {:.2f}'.format(DASS_mae2))\n\nax[0,1].plot(xx, sorted(GHQ_ts), color='r', label='Actual')\nax[0,1].plot(xx, sorted(GHQ_pred), color='k', label='Predicted', alpha=0.7)\nax[0,1].fill_between(xx, sorted(GHQ_pred)+GHQ_mae2, sorted(GHQ_pred)-GHQ_mae2,\n                     color = 'k',alpha=0.15)\nax[0,1].legend()\nax[0,1].set_title('General Heatlh Questionnaire\\n MAE: {:.2f}'.format(GHQ_mae2))\n\nax[0,2].plot(xx, sorted(SEC_ts), color='g', label='SEC Actual')\nax[0,2].plot(xx, sorted(SEC_pred), color='k', label='SEC Predicted', alpha=0.7)\nax[0,2].fill_between(xx, sorted(SEC_pred)+SEC_mae2, sorted(SEC_pred)-SEC_mae2,\n                     color = 'k',alpha=0.15)\nax[0,2].legend()\nax[0,2].set_title('Self efficacy for CoVid-19\\n MAE: {:.2f}'.format(SEC_mae2))\n\nax[1,0].plot(xx, sorted(DAS_ts.iloc[:,0]), color='b', label='Anxiety Actual')\nax[1,0].plot(xx, sorted(DAS_pred[:,0]), color='k', label='Anxiety Predicted', alpha=0.7)\nax[1,0].fill_between(xx, sorted(DAS_pred[:,0])+Anx_mae2, sorted(DAS_pred[:,0])-Anx_mae2,\n                     color = 'k',alpha=0.15)\nax[1,0].legend()\nax[1,0].set_title('Anxiety Scale\\n MAE: {:.2f}'.format(Anx_mae2))\n\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,1]), color='r', label='Depression Actual')\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_pred[:,1]), color='k', label='Depression Predicted', alpha=0.7)\nax[1,1].fill_between(xx, sorted(DAS_pred[:,1])+Dep_mae2, sorted(DAS_pred[:,1])-Dep_mae2,\n                     color = 'k',alpha=0.15)\n\nax[1,1].legend()\nax[1,1].set_title('Depression Scale\\n MAE: {:.2f}'.format(Dep_mae2))\n\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,2]), color='g', label='Stress Actual')\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_pred[:,2]), color='k', label='Stress Predicted', alpha=0.7)\nax[1,2].fill_between(xx, sorted(DAS_pred[:,2])+Str_mae2, sorted(DAS_pred[:,2])-Str_mae2,\n                     color = 'k',alpha=0.15)\n\nax[1,2].legend()\nax[1,2].set_title('Stress Scale\\n MAE: {:.2f}'.format(Str_mae2))\n\nplt.show()","baa45547":"GBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DASS_tr)\n\nDASS_pred1 = GBR.predict(X_ts)\nDASS_mae3 = mae(DASS_ts, DASS_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, GHQ_tr)\n\nGHQ_pred1 = GBR.predict(X_ts)\nGHQ_mae3 = mae(GHQ_ts, GHQ_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, SEC_tr)\n\nSEC_pred1 = GBR.predict(X_ts)\nSEC_mae3 = mae(SEC_ts, SEC_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,0])\nAnx_pred1 = GBR.predict(X_ts)\n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,1])\nDep_pred1 = GBR.predict(X_ts)\n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,2])\nStr_pred1 = GBR.predict(X_ts)\n\nAnx_mae3 = mae(DAS_ts.iloc[:,0], Anx_pred1)\nDep_mae3 = mae(DAS_ts.iloc[:,1], Dep_pred1)\nStr_mae3 = mae(DAS_ts.iloc[:,2], Str_pred1)","a1cfa33f":"xx = range(0,len(X_ts))\nfig, ax = plt.subplots(2,3,sharex= True, figsize=(16,9))\nfig.suptitle('Gradient Boosting Regressor model predictions')\n\nax[0,0].plot(xx, sorted(DASS_ts), color='b', label='Actual')\nax[0,0].plot(xx, sorted(DASS_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,0].fill_between(xx, sorted(DASS_pred1)+DASS_mae3, sorted(DASS_pred1)-DASS_mae3,\n                     color = 'k',alpha=0.15)\nax[0,0].legend()\nax[0,0].set_title('Depression Anxiety Stress Scale\\n MAE: {:.2f}'.format(DASS_mae3))\n\nax[0,1].plot(xx, sorted(GHQ_ts), color='r', label='Actual')\nax[0,1].plot(xx, sorted(GHQ_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,1].fill_between(xx, sorted(GHQ_pred1)+GHQ_mae3, sorted(GHQ_pred1)-GHQ_mae3,\n                     color = 'k',alpha=0.15)\nax[0,1].legend()\nax[0,1].set_title('General Heatlh Questionnaire\\n MAE: {:.2f}'.format(GHQ_mae3))\n\nax[0,2].plot(xx, sorted(SEC_ts), color='g', label='Actual')\nax[0,2].plot(xx, sorted(SEC_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,2].fill_between(xx, sorted(SEC_pred1)+SEC_mae3, sorted(SEC_pred1)-SEC_mae3,\n                     color = 'k',alpha=0.15)\nax[0,2].legend()\nax[0,2].set_title('Self efficacy for CoVid-19\\n MAE: {:.2f}'.format(SEC_mae3))\n\nax[1,0].plot(xx, sorted(DAS_ts.iloc[:,0]), color='b', label='Actual')\nax[1,0].plot(xx, sorted(Anx_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,0].fill_between(xx, sorted(Anx_pred1)+Anx_mae3, sorted(Anx_pred1)-Anx_mae3,\n                     color = 'k',alpha=0.15)\nax[1,0].legend()\nax[1,0].set_title('Anxiety Scale\\n MAE: {:.2f}'.format(Anx_mae3))\n\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,1]), color='r', label='Actual')\nax[1,1].plot(range(0,len(X_ts)), sorted(Dep_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,1].fill_between(xx, sorted(Dep_pred1)+Dep_mae3, sorted(Dep_pred1)-Dep_mae3,\n                     color = 'k',alpha=0.15)\n\nax[1,1].legend()\nax[1,1].set_title('Depression Scale\\n MAE: {:.2f}'.format(Dep_mae3))\n\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,2]), color='g', label='Actual')\nax[1,2].plot(range(0,len(X_ts)), sorted(Str_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,2].fill_between(xx, sorted(Str_pred1)+Str_mae3, sorted(Str_pred1)-Str_mae3,\n                     color = 'k',alpha=0.15)\n\nax[1,2].legend()\nax[1,2].set_title('Stress Scale\\n MAE: {:.2f}'.format(Str_mae3))\n\nplt.show()","3c97bcae":"# Variables into account\ndf.iloc[:,1:5].columns.values.tolist()","3a5859d4":"X_train, X_test, targets_train, targets_test = train_test_split(df.iloc[:,1:5], \n                                                             df_p.drop(columns=features.columns.values.tolist()),\n                                                             test_size = 0.2,\n                                                             shuffle = True,\n                                                             random_state = 42)\n\n(DASS_tr, DASS_ts) = (targets_train.iloc[:,0], targets_test.iloc[:,0])\n(GHQ_tr, GHQ_ts) = (targets_train.iloc[:,1], targets_test.iloc[:,1])\n(SEC_tr, SEC_ts) = (targets_train.iloc[:,2], targets_test.iloc[:,2])\n(DAS_tr, DAS_ts) = (targets_train.iloc[:,3:], targets_test.iloc[:,3:])","7344bd2d":"scaler = MinMaxScaler(feature_range=(0,1))\nX_tr = scaler.fit_transform(X_train)\nX_ts = scaler.transform(X_test)","3c247b19":"RFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, DASS_tr)\n\nDASS_pred = RFR.predict(X_ts)\nDASS_mae4 = mae(DASS_ts, DASS_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, GHQ_tr)\n\nGHQ_pred = RFR.predict(X_ts)\nGHQ_mae4 = mae(GHQ_ts, GHQ_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, SEC_tr)\n\nSEC_pred = RFR.predict(X_ts)\nSEC_mae4 = mae(SEC_ts, SEC_pred) \n\nRFR = RandomForestRegressor(n_jobs=3, random_state=42)\nRFR.fit(X_tr, DAS_tr)\n\nDAS_pred = RFR.predict(X_ts)\nAnx_mae4 = mae(DAS_ts.iloc[:,0], DAS_pred[:,0])\nDep_mae4 = mae(DAS_ts.iloc[:,1], DAS_pred[:,1])\nStr_mae4 = mae(DAS_ts.iloc[:,2], DAS_pred[:,2])","31d52f85":"xx = range(0,len(X_ts))\nfig, ax = plt.subplots(2,3,sharex= True, figsize=(16,9))\nfig.suptitle('Random Forest Regressor model predictions')\n\nax[0,0].plot(xx, sorted(DASS_ts), color='b', label='Actual')\nax[0,0].plot(xx, sorted(DASS_pred), color='k', label='Predicted', alpha=0.7)\nax[0,0].fill_between(xx, sorted(DASS_pred)+DASS_mae4, sorted(DASS_pred)-DASS_mae4,\n                     color = 'k',alpha=0.15)\nax[0,0].legend()\nax[0,0].set_title('Depression Anxiety Stress Scale\\n MAE: {:.2f}'.format(DASS_mae))\n\nax[0,1].plot(xx, sorted(GHQ_ts), color='r', label='Actual')\nax[0,1].plot(xx, sorted(GHQ_pred), color='k', label='Predicted', alpha=0.7)\nax[0,1].fill_between(xx, sorted(GHQ_pred)+GHQ_mae4, sorted(GHQ_pred)-GHQ_mae4,\n                     color = 'k',alpha=0.15)\nax[0,1].legend()\nax[0,1].set_title('General Heatlh Questionnaire\\n MAE: {:.2f}'.format(GHQ_mae4))\n\nax[0,2].plot(xx, sorted(SEC_ts), color='g', label='SEC Actual')\nax[0,2].plot(xx, sorted(SEC_pred), color='k', label='SEC Predicted', alpha=0.7)\nax[0,2].fill_between(xx, sorted(SEC_pred)+SEC_mae4, sorted(SEC_pred)-SEC_mae4,\n                     color = 'k',alpha=0.15)\nax[0,2].legend()\nax[0,2].set_title('Self efficacy for CoVid-19\\n MAE: {:.2f}'.format(SEC_mae4))\n\nax[1,0].plot(xx, sorted(DAS_ts.iloc[:,0]), color='b', label='Anxiety Actual')\nax[1,0].plot(xx, sorted(DAS_pred[:,0]), color='k', label='Anxiety Predicted', alpha=0.7)\nax[1,0].fill_between(xx, sorted(DAS_pred[:,0])+Anx_mae4, sorted(DAS_pred[:,0])-Anx_mae4,\n                     color = 'k',alpha=0.15)\nax[1,0].legend()\nax[1,0].set_title('Anxiety Scale\\n MAE: {:.2f}'.format(Anx_mae4))\n\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,1]), color='r', label='Depression Actual')\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_pred[:,1]), color='k', label='Depression Predicted', alpha=0.7)\nax[1,1].fill_between(xx, sorted(DAS_pred[:,1])+Dep_mae4, sorted(DAS_pred[:,1])-Dep_mae4,\n                     color = 'k',alpha=0.15)\n\nax[1,1].legend()\nax[1,1].set_title('Depression Scale\\n MAE: {:.2f}'.format(Dep_mae4))\n\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,2]), color='g', label='Stress Actual')\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_pred[:,2]), color='k', label='Stress Predicted', alpha=0.7)\nax[1,2].fill_between(xx, sorted(DAS_pred[:,2])+Str_mae4, sorted(DAS_pred[:,2])-Str_mae4,\n                     color = 'k',alpha=0.15)\n\nax[1,2].legend()\nax[1,2].set_title('Stress Scale\\n MAE: {:.2f}'.format(Str_mae4))\n\nplt.show()","dfb0e834":"GBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DASS_tr)\n\nDASS_pred1 = GBR.predict(X_ts)\nDASS_mae5 = mae(DASS_ts, DASS_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, GHQ_tr)\n\nGHQ_pred1 = GBR.predict(X_ts)\nGHQ_mae5 = mae(GHQ_ts, GHQ_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, SEC_tr)\n\nSEC_pred1 = GBR.predict(X_ts)\nSEC_mae5 = mae(SEC_ts, SEC_pred1) \n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,0])\nAnx_pred1 = GBR.predict(X_ts)\n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,1])\nDep_pred1 = GBR.predict(X_ts)\n\nGBR = GradientBoostingRegressor(random_state=42)\nGBR.fit(X_tr, DAS_tr.iloc[:,2])\nStr_pred1 = GBR.predict(X_ts)\n\nAnx_mae5 = mae(DAS_ts.iloc[:,0], Anx_pred1)\nDep_mae5 = mae(DAS_ts.iloc[:,1], Dep_pred1)\nStr_mae5 = mae(DAS_ts.iloc[:,2], Str_pred1)","f28598e1":"xx = range(0,len(X_ts))\nfig, ax = plt.subplots(2,3,sharex= True, figsize=(16,9))\nfig.suptitle('Gradient Boosting Regressor model predictions')\n\nax[0,0].plot(xx, sorted(DASS_ts), color='b', label='Actual')\nax[0,0].plot(xx, sorted(DASS_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,0].fill_between(xx, sorted(DASS_pred1)+DASS_mae5, sorted(DASS_pred1)-DASS_mae5,\n                     color = 'k',alpha=0.15)\nax[0,0].legend()\nax[0,0].set_title('Depression Anxiety Stress Scale\\n MAE: {:.2f}'.format(DASS_mae5))\n\nax[0,1].plot(xx, sorted(GHQ_ts), color='r', label='Actual')\nax[0,1].plot(xx, sorted(GHQ_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,1].fill_between(xx, sorted(GHQ_pred1)+GHQ_mae5, sorted(GHQ_pred1)-GHQ_mae5,\n                     color = 'k',alpha=0.15)\nax[0,1].legend()\nax[0,1].set_title('General Heatlh Questionnaire\\n MAE: {:.2f}'.format(GHQ_mae5))\n\nax[0,2].plot(xx, sorted(SEC_ts), color='g', label='Actual')\nax[0,2].plot(xx, sorted(SEC_pred1), color='k', label='Predicted', alpha=0.7)\nax[0,2].fill_between(xx, sorted(SEC_pred1)+SEC_mae5, sorted(SEC_pred1)-SEC_mae5,\n                     color = 'k',alpha=0.15)\nax[0,2].legend()\nax[0,2].set_title('Self efficacy for CoVid-19\\n MAE: {:.2f}'.format(SEC_mae5))\n\nax[1,0].plot(xx, sorted(DAS_ts.iloc[:,0]), color='b', label='Actual')\nax[1,0].plot(xx, sorted(Anx_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,0].fill_between(xx, sorted(Anx_pred1)+Anx_mae5, sorted(Anx_pred1)-Anx_mae5,\n                     color = 'k',alpha=0.15)\nax[1,0].legend()\nax[1,0].set_title('Anxiety Scale\\n MAE: {:.2f}'.format(Anx_mae5))\n\nax[1,1].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,1]), color='r', label='Actual')\nax[1,1].plot(range(0,len(X_ts)), sorted(Dep_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,1].fill_between(xx, sorted(Dep_pred1)+Dep_mae5, sorted(Dep_pred1)-Dep_mae5,\n                     color = 'k',alpha=0.15)\n\nax[1,1].legend()\nax[1,1].set_title('Depression Scale\\n MAE: {:.2f}'.format(Dep_mae5))\n\nax[1,2].plot(range(0,len(X_ts)), sorted(DAS_ts.iloc[:,2]), color='g', label='Actual')\nax[1,2].plot(range(0,len(X_ts)), sorted(Str_pred1), color='k', label='Predicted', alpha=0.7)\nax[1,2].fill_between(xx, sorted(Str_pred1)+Str_mae5, sorted(Str_pred1)-Str_mae5,\n                     color = 'k',alpha=0.15)\n\nax[1,2].legend()\nax[1,2].set_title('Stress Scale\\n MAE: {:.2f}'.format(Str_mae5))\n\nplt.show()","e05373b9":"DASS_MAE=[DASS_mae,DASS_mae1,DASS_mae2,DASS_mae3,DASS_mae4,DASS_mae5]\nGHQ_MAE=[GHQ_mae,GHQ_mae1,GHQ_mae2,GHQ_mae3,GHQ_mae4,GHQ_mae5]\nSEC_MAE=[SEC_mae,SEC_mae1,SEC_mae2,SEC_mae3,SEC_mae4,SEC_mae5]\nAnx_MAE=[Anx_mae,Anx_mae1,Anx_mae2,Anx_mae3,Anx_mae4,Anx_mae5]\nDep_MAE=[Dep_mae,Dep_mae1,Dep_mae2,Dep_mae3,Dep_mae4,Dep_mae5]\nStr_MAE=[Str_mae,Str_mae1,Str_mae2,Str_mae3,Str_mae4,Str_mae5]\n\nMAE_er = pd.DataFrame(data=[DASS_MAE,GHQ_MAE,SEC_MAE,Anx_MAE,Dep_MAE,Str_MAE],\n                     index=['DASS','GHQ','SEC','Anx','Dep','Str'],\n                     columns=['All_RFR','All_GBR','ND_RFR','ND_GBR','PCA_RFR','PCA_GBR'])\nMAE_er","87fb3aa6":"fig, ax = plt.subplots(2,3,figsize=(16,9))\nfig.suptitle('MAE by model and target')\nxx = np.arange(3)\nwidth = 0.35\n\nax[0,0].bar(xx-width\/2,[DASS_mae,DASS_mae2,DASS_mae4],width, label='Random Forest')\nax[0,0].bar(xx+width\/2,[DASS_mae1,DASS_mae3,DASS_mae5],width, label='Gradient Boosting')\nax[0,0].set_title('Depression Anxiety Stress Scale')\nax[0,0].set_xticks(xx)\nax[0,0].set_xticklabels(['All','Non Demograph','PCA'])\nax[0,0].set_ylabel('MAE score')\nax[0,0].grid(True)\nax[0,0].legend(loc='lower left')\n\n\nax[0,1].bar(xx-width\/2,[GHQ_mae,GHQ_mae2,GHQ_mae4],width, label='Random Forest')\nax[0,1].bar(xx+width\/2,[GHQ_mae1,GHQ_mae3,GHQ_mae5],width, label='Gradient Boosting')\nax[0,1].set_title('General Health Questionnaire')\nax[0,1].set_xticks(xx)\nax[0,1].set_xticklabels(['All','Non Demograph','PCA'])\nax[0,1].set_ylabel('MAE score')\nax[0,1].grid(True)\nax[0,1].legend(loc='lower left')\n\nax[0,2].bar(xx-width\/2,[SEC_mae,SEC_mae2,SEC_mae4],width, label='Random Forest')\nax[0,2].bar(xx+width\/2,[SEC_mae1,SEC_mae3,SEC_mae5],width, label='Gradient Boosting')\nax[0,2].set_title('Self efficacy for CoVid-19')\nax[0,2].set_xticks(xx)\nax[0,2].set_xticklabels(['All','Non Demograph','PCA'])\nax[0,2].set_ylabel('MAE score')\nax[0,2].grid(True)\nax[0,2].legend(loc='lower left')\n\nax[1,0].bar(xx-width\/2,[Anx_mae,Anx_mae2,Anx_mae4],width, label='Random Forest')\nax[1,0].bar(xx+width\/2,[Anx_mae1,Anx_mae3,Anx_mae5],width, label='Gradient Boosting')\nax[1,0].set_title('Anxiety Score')\nax[1,0].set_xticks(xx)\nax[1,0].set_xticklabels(['All','Non Demograph','PCA'])\nax[1,0].set_ylabel('MAE score')\nax[1,0].grid(True)\nax[1,0].legend(loc='lower left')\n\nax[1,1].bar(xx-width\/2,[Dep_mae,Dep_mae2,Dep_mae4],width, label='Random Forest')\nax[1,1].bar(xx+width\/2,[Dep_mae1,Dep_mae3,Dep_mae5],width, label='Gradient Boosting')\nax[1,1].set_title('Depression Score')\nax[1,1].set_xticks(xx)\nax[1,1].set_xticklabels(['All','Non Demograph','PCA'])\nax[1,1].set_ylabel('MAE score')\nax[1,1].grid(True)\nax[1,1].legend(loc='lower left')\n\nax[1,2].bar(xx-width\/2,[Str_mae,Str_mae2,Str_mae4],width, label='Random Forest')\nax[1,2].bar(xx+width\/2,[Str_mae1,Str_mae3,Str_mae5],width, label='Gradient Boosting')\nax[1,2].set_title('Stress Score')\nax[1,2].set_xticks(xx)\nax[1,2].set_xticklabels(['All','Non Demograph','PCA'])\nax[1,2].set_ylabel('MAE score')\nax[1,2].grid(True)\nax[1,2].legend(loc='lower left')\n\n\nplt.show()","6107b775":"fig, ax = plt.subplots(1,2,figsize=(16,9))\nfig.suptitle('Cummulative error')\nxx = np.arange(3)\nwidth = 0.35\n\ncumm_err=MAE_er.sum(axis=0)\n\nax[0].bar(xx-width\/2,[cumm_err[0],cumm_err[2],cumm_err[4]],width, label='Random Forest')\nax[0].bar(xx+width\/2,[cumm_err[1],cumm_err[3],cumm_err[5]],width, label='Gradient Boosting')\nax[0].set_title('by variables taken')\nax[0].set_xticks(xx)\nax[0].set_xticklabels(['All','Non Demograph','PCA'])\nax[0].set_ylabel('MAE score')\nax[0].set_ylim([20,23])\nax[0].grid(True)\nax[0].legend(loc='lower left')\n\nxx = np.arange(1)\nwidth = 0.5\n\nRFR_err = np.sum(MAE_er.iloc[:,0]+MAE_er.iloc[:,2]+MAE_er.iloc[:,4])\nGBR_err = np.sum(MAE_er.iloc[:,1]+MAE_er.iloc[:,3]+MAE_er.iloc[:,5])\n\nax[1].bar(xx-width\/2,RFR_err,width, label='Random Forest')\nax[1].bar(xx+width\/2,GBR_err,width, label='Gradient Boosting')\nax[1].set_title('by model')\nax[1].set_xticks(xx)\nax[1].set_xticklabels([None])\nax[1].set_ylabel('MAE score')\nax[1].set_ylim([64,66])\nax[1].grid(True)\nax[1].legend(loc='lower left')\n\nplt.show()","00a08590":"## Gradient Boosting Regressor","7f521eaa":"# Evaluation","38bfb660":"## PCA usability\n\n### Taking demographic variables into account","4cf68ade":"### Not taking demographic variables","110a849a":"* Gradient Boosting have more total cummulative error than Random Forest.\n* Demographic variables give valuable information (errors are lower with both models)\n* Taking the given principal components:\n    * give the best prediction using only Gradient Boosting\n    * give the worst prediction using only Random Forest\n* The best option is clearly taking all the variables (excepting the given principal components) and applying a Random Forest Regressor model.","dc91c323":"## Random Forest Regressor","83756c45":"## Preprocess","dbf78832":"## Gradient Boosting Regressor","5c4e79d1":"# Data","a60ba2bc":"## Random Forest Regressor","e50bdcf8":"# CoVid-19 impact on psychological heatlh","ba29e04d":"Taking a PCA should take, at least, between 17 and 21 principal components.\n\nIf you compact these 24 variables into 4 independent variables you lose almost half of the information. That's why the four components given are not independent, instead we have seen that they are pretty correlated. Is not a good reduction of dimensionality. In addition, we don't need any reduction due to the dataset is small.","f93bf7c2":"## Random Forest Regressor","a184aa04":"Taking between 15 and 21 principal components would be acceptable.","4ef5c4f3":"# Model prediction with demographic variables","acb2f77a":"# Model Prediction without demographic variables","eb6299ca":"Data set complete, filled and coverted to int.\n\nStudent categorized as:\n* 'NaN' : 0\n* 'Student' : 1\n* 'Other' : 2\n\nGender categorized as:\n* 'Male' : 0\n* 'Female' : 1","6ee24927":"Obviating the DASS_21 (*Depression Anxiety and Stress Scale*), GHQ_12 (*General Health Questionaire*) and SEC (*self_efficacy for Covid-19*) we can see some correlations (mostly inverse) between columns and DASS_anxiety, DASS_depression and DASS_stress. Some of which are:\n\n* Openness\n* Trascendence\n* Gender\n* Work\n* Gratitude\n* Hope\n* Zest\n\nThis data_set has redundant information though. We could do a research in which factor are more influential on:\n* DASS_21\n* SEC\n* DASS_anxiety, DASS_depression, DASS_stress\n\ngetting almost the same result due to are almost the same columns\n\nThe same issue is given in the 'predictors' features. We have \n* Opennes\n* Restraint\n* Transcendence\n* Interpersonal \n\nas PCA components of the non-demographical variables.","869fcf52":"# Model with PCA variables","797184c5":"# Conclusion","4ef5c753":"## Gradient Boosting Regressor"}}