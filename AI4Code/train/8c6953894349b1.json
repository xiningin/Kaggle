{"cell_type":{"51e7d107":"code","c598fdf9":"code","fb138299":"code","0b836884":"code","a0ab35c5":"code","4ba28dbf":"code","233e291a":"code","b484d8ec":"code","14f4577a":"code","0306045f":"code","ccf54540":"code","2e35dcfa":"code","84ffd20e":"code","666b5f92":"code","96eec88d":"code","f559be3a":"code","589b96b4":"code","6f89d233":"code","e1a6b24a":"code","75a67998":"code","62fcc047":"code","d030f703":"code","dbc9532a":"code","edcc4843":"code","2f24f14f":"code","7b1b5917":"code","e0360315":"code","b58356c5":"code","9da5cabf":"code","c9730aa3":"markdown","7d73ad08":"markdown","f822cc76":"markdown","25f48897":"markdown","e821acbf":"markdown","b8e0d5f9":"markdown","fd237108":"markdown","820767f6":"markdown","58b1cf1b":"markdown"},"source":{"51e7d107":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nimport tensorflow as tf\nimport keras\n","c598fdf9":"solarpower = pd.read_csv(\"..\/input\/solarpanelspower\/PV_Elec_Gas3.csv\",header = None,skiprows=1 ,\n                    names = ['date','cum_power','Elec_kW', 'Gas_mxm'], sep=',',usecols = [0,1,2,3],                     \n                    parse_dates={'dt' : ['date']}, infer_datetime_format=True,index_col='dt')\nprint(solarpower.head(2))","fb138299":"# make cum_power stationary\n\nsolarpower2 = solarpower.shift(periods=1, freq='D', axis=0)\nsolarpower['cum_power_shift'] = solarpower2.loc[:,'cum_power']\nsolarpower['day_power'] = solarpower['cum_power'].values - solarpower['cum_power_shift']\nsolarpower.iloc[0:1].day_power.value = 0.\nA = solarpower.dropna()\ndel A['cum_power'], A['cum_power_shift']\nsolarpower = A","0b836884":"solarpower.head(2), solarpower.tail(2)","a0ab35c5":"X_train = solarpower[:'2019-10-28']\nX_valid = solarpower['2019-10-29':'2020-10-27'] # is 365 days\nX_train.shape, X_valid.shape","4ba28dbf":"X_train.tail(2), X_valid.head(2)","233e291a":"# we devide the series into multiple input and output patterns\n\ndef my_split_window(dataframe, out_sequence, window):\n    '''\n    the Pandas dataframe has the columns (features) that we use as input (X).\n    out_sequence is the time series that matches the input\n    Returns array X with the features windowed in shape (number of windows, window, n_features)\n    and array y\n    '''\n    X = []\n    y = []\n    n_steps = len(out_sequence) - window + 1\n    for step in range(n_steps):\n        X_w = []\n        for i in range(window):\n            X_w.append(dataframe.iloc[step + i])\n        X.append(X_w)\n        y.append(out_sequence[step + window -1])\n    X = np.array(X)\n    y = np.array(y)\n    return X, y","b484d8ec":"# test my_split_window\ndf = pd.DataFrame()\ndf['feature1'] = [10,20,30,40,50,60,70,80,90]\ndf['feature2'] = [11,21,31,41,51,61,71,81,91]\nout_sequence = [26, 46, 66, 86, 106, 126, 146, 166, 186]\nwindow = 3\nX_, y_ = my_split_window(df, out_sequence, window)\nX_, y_\n","14f4577a":"# apply my_split_window on daily solar power with a window of 365 days (we do not make account for leap years)\n# the output series is the daily solar power\nX_features = [ 'Elec_kW' , 'Gas_mxm']\nX_train_input = X_train[ X_features]\nout_sequence = X_train.day_power.values\nwindow = 365\nX, y = my_split_window(X_train_input, out_sequence,  window)\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i])","0306045f":"# define model\ndef my_CNN_model(window, n_features):\n    # define model\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu', \n                                 input_shape=(window, n_features)))\n    model.add(tf.keras.layers.MaxPooling1D(pool_size=2))\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.Dense(50, activation='relu'))\n    model.add(tf.keras.layers.Dense(1))\n    model.compile(optimizer='adam', loss='mae')\n    return model\n","ccf54540":"#tf.keras.backend.clear_session()\n\n# we have an input shape = (number of windows, window, n_features) \n#  and we have a window size of one year (365 days) \n# we do not have to reshape for the 1D CNN\n\nepochs = 200\nn_features = X.shape[2]\nwindow = 365\nmodel_solar = my_CNN_model(window, n_features)\nmodel_solar.compile(optimizer='adam', loss='mae')\n\n# fit model\nhistory_solar = model_solar.fit(X, y, epochs=epochs, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history_solar.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","2e35dcfa":"# predicting validation year but with validation values for Electricity and Gas to verify quality of the model\n# if we want prediction into the future year where we have no data for Elec and Gas then we have to train models\n# that can predict those features\n# the model expects an input of shape(n_time steps = window size, n_features)\ny_hat = []\nfeatures = ['Elec_kW' , 'Gas_mxm']\nX_input_solar =  np.array(X_train[features][-365:]) #  next value based on data of last year\nX_input_solar = X_input_solar.reshape(1, X_input_solar.shape[0], X_input_solar.shape[1]) # input must have 3 dimensions\nX_input_solar = X_input_solar\nfor i in range(365):\n    new_x = np.array(X_valid[features].iloc[i])\n    new_x = new_x.reshape(1, 1, X_input_solar.shape[2])\n    X_input_solar = np.concatenate((X_input_solar[:, (-364):], new_x), axis=1)\n    y_hat.append((model_solar.predict(X_input_solar, verbose=0).ravel())[0])","84ffd20e":"\nplt.plot(y_hat, label='predicted_power')\n\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","666b5f92":"first_r2_score = r2_score(y_true, y_hat) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat)\nprint('r2_score %.2f' % first_r2_score)\nprint('mae %.2f' % first_mae)","96eec88d":"def cumulate(series, start=0):\n    '''\n    start is the starting cumulative power, the series is the daily solar power\n    a list with daily cumulative power is the result\n    '''\n    cum = [start]\n    for i in range(len(series)):\n        sum_plus = cum[i] + series[i]\n        cum.append(sum_plus)\n    return cum","f559be3a":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat)\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","589b96b4":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","6f89d233":"# save the first results\n\nresults = pd.DataFrame()\nresults['102_3_features_on_validation'] = y_hat\nresults.to_csv('102_3_features_on_validation.csv')","e1a6b24a":"X_train = X_train.copy()\nX_valid = X_valid.copy()\nX_train['Gas_plus_Elek'] = X_train.Gas_mxm + X_train.Elec_kW\nX_valid['Gas_plus_Elek'] = X_valid.Gas_mxm + X_valid.Elec_kW","75a67998":"# apply my_split_window on dayly solar power with a window of 365 days (we do not make account for leap years)\n# the input series is the daily solar power\nX_features = ['day_power','Elec_kW' , 'Gas_mxm', 'Gas_plus_Elek']\nX_train_input = X_train[ X_features]\nout_sequence = X_train.day_power.values\nwindow = 365\nX, y = my_split_window(X_train_input, out_sequence,  window)\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i])","62fcc047":"# apply my_split_window on dayly solar power with a window of 365 days (we do not make account for leap years)\n# the input series is the daily Elec_kW\nX_features_elec = ['day_power' , 'Gas_mxm']\nX_train_input = X_train[ X_features_elec]\nout_sequence = X_train.Elec_kW.values\nwindow = 365\nX, y = my_split_window(X_train_input, out_sequence,  window)\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i])\n\n#tf.keras.backend.clear_session()\n# we have an input shape = (number of windows, window, n_features) \n#  and we have a window size of one year (365 days) \n# we do not have to reshape for the 1D CNN\n\nn_features = X.shape[2]\n\nmodel_elec = my_CNN_model(window, n_features)\nmodel_elec.compile(optimizer='adam', loss='mae')\nepochs = 600\n# fit model\nhistory_elec = model_elec.fit(X, y, epochs=epochs, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history_elec.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","d030f703":"# apply my_split_window on dayly solar power with a window of 365 days (we do not make account for leap years)\n# the output series is the daily Gas\nX_features_gas = ['day_power' , 'Elec_kW']\nX_train_input = X_train[ X_features_gas]\nout_sequence = X_train.Gas_mxm.values\nwindow = 365\nX, y = my_split_window(X_train_input, out_sequence,  window)\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i])","dbc9532a":"#tf.keras.backend.clear_session()\n# we have an input shape = (number of windows, window, n_features) \n#  and we have a window size of one year (365 days) \n# we do not have to reshape for the 1D CNN\n\nn_features = X.shape[2]\n\nmodel_gas = my_CNN_model(window, n_features)\nmodel_gas.compile(optimizer='adam', loss='mae')\n\n# fit model\nhistory_gas = model_gas.fit(X, y, epochs=epochs, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history_gas.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","edcc4843":"features_solar = ['Elec_kW' , 'Gas_mxm']\nX_input_solar =  np.array(X_train[features_solar][-365:]) #  next value based on data of last year\nX_input_solar = X_input_solar.reshape(1, X_input_solar.shape[0], X_input_solar.shape[1]) # input must have 3 dimensions\nx_input_solar = X_input_solar\n\nfeatures_gas = ['Elec_kW' , 'day_power']\nX_input_gas =  np.array(X_train[features_gas][-365:]) #  next value based on data of last year\nX_input_gas = X_input_gas.reshape(1, X_input_gas.shape[0], X_input_gas.shape[1]) # input must have 3 dimensions\nx_input_gas = X_input_gas\n\nfeatures_elec = ['day_power' , 'Gas_mxm']\nX_input_elec =  np.array(X_train[features_elec][-365:]) #  next value based on data of last year\nX_input_elec = X_input_elec.reshape(1, X_input_elec.shape[0], X_input_elec.shape[1]) # input must have 3 dimensions\nx_input_elec = X_input_elec\n\ny_hat_solar = ((model_solar.predict(x_input_solar, verbose=0).ravel())[0])\ny_hat_gas = ((model_gas.predict(x_input_gas, verbose=0).ravel())[0])\ny_hat_elec = ((model_elec.predict(x_input_elec, verbose=0).ravel())[0])\nprint('s', y_hat_solar, 'g', y_hat_gas, 'e', y_hat_elec)\ny_hat_solar = []\ny_hat_gas = []\ny_hat_elec = []\nfor i in range(365):\n    y_hat_solar.append((model_solar.predict(x_input_solar, verbose=0).ravel())[0])\n    y_hat_gas.append((model_gas.predict(x_input_gas, verbose=0).ravel())[0])    \n    y_hat_elec.append((model_elec.predict(x_input_elec, verbose=0).ravel())[0])\n    \n    new_x_solar = np.array((y_hat_elec[i], y_hat_gas[i]) )\n    new_x_solar = new_x_solar.reshape(1, 1, 2)\n    x_input_solar = np.concatenate((x_input_solar[:, (-364):], new_x_solar), axis=1)\n    \n    new_x_gas = np.array((y_hat_elec[i], y_hat_solar[i]) )\n    new_x_gas = new_x_gas.reshape(1, 1, 2)\n    x_input_gas = np.concatenate((x_input_gas[:, (-364):], new_x_gas), axis=1)\n    \n    new_x_elec = np.array((y_hat_solar[i], y_hat_gas[i]))\n    new_x_elec = new_x_elec.reshape(1, 1, 2)\n    x_input_elec = np.concatenate((x_input_elec[:, (-364):], new_x_elec), axis=1)\n       ","2f24f14f":"\nplt.plot(y_hat_solar, label='predicted_power')\n\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","7b1b5917":"first_r2_score = r2_score(y_true, y_hat_solar) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat_solar)\nprint('r2_score %.2f' % first_r2_score)\nprint('mae %.2f' % first_mae)","e0360315":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat_solar)\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","b58356c5":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","9da5cabf":"results['102_4_features_on_validation'] = y_hat_solar\nresults.to_csv('102_4_features_on_validation.csv')","c9730aa3":"# save the first results","7d73ad08":"The error increases after 4 months","f822cc76":"We want to use a one-dimensional Convolutional Neural Network (1D CNN). Just like in a CNN for images,  \na 1D CNN extracts features. It is very usefull in timeseries. More info is on the links:  \nhttps:\/\/missinglink.ai\/guides\/keras\/keras-conv1d-working-1d-convolutional-neural-networks-keras\/  \nhttps:\/\/machinelearningmastery.com\/cnn-models-for-human-activity-recognition-time-series-classification\/  \n","25f48897":"# predicting Electricity and Gas","e821acbf":"# save the second results","b8e0d5f9":"# what if we add a feature?\nWe can make an extra feature by adding Elecricty and Gas","fd237108":"These notebooks are based on the excellent article by Jason Brownlee:\nHow to Develop Convolutional Neural Network Models for Time Series Forecasting.  \nhttps:\/\/machinelearningmastery.com\/how-to-develop-convolutional-neural-network-models-for-time-series-forecasting\/","820767f6":"test 102 : test prediction solarpower with multivariate mulitple inputs series and CNN","58b1cf1b":"But the cumulative power is actually much more interesting.  \nIt tels us what the the total expected solar power of that year will be."}}