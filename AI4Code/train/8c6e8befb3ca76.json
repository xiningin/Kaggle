{"cell_type":{"4e2a805c":"code","1af2db7a":"code","e70b71ff":"code","dd9ced71":"code","c6388397":"code","f5be308c":"code","f058f857":"code","8dcd18a2":"code","68d4f9fe":"code","1b017075":"code","e1046483":"code","888d28c0":"code","27e5bd17":"code","9294121d":"code","b270fd99":"code","3162a782":"code","f7b391a5":"code","a9c1488d":"code","fac79f31":"code","9bee896f":"code","e794d1f0":"code","cb871105":"code","4578ea72":"code","7c310579":"code","157e07f7":"code","0a26e35d":"code","7f03f76f":"code","73d19091":"code","b1b0acae":"code","6a2d36b7":"markdown","66ba1dad":"markdown","31a01d75":"markdown","1d0755fc":"markdown","ae32b877":"markdown","3307a472":"markdown","7f8de53b":"markdown","99e36c78":"markdown","f0059ab7":"markdown","9d4fdfe2":"markdown","ab0bfee2":"markdown","a781f325":"markdown"},"source":{"4e2a805c":"# Pandas\nimport numpy as np\nimport pandas as pd\n# Plot\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.style.use('seaborn-whitegrid')\n%matplotlib inline","1af2db7a":"dataset_folder = '..\/input'\nplot_folder = '..\/plot'\n\ncourses = pd.read_csv('%s\/%s' % (dataset_folder, 'courses.csv'), sep='\\t', encoding='utf-8')\nlikes   = pd.read_csv('%s\/%s' % (dataset_folder, 'likes.csv'), sep='\\t', encoding='utf-8')\nplays   = pd.read_csv('%s\/%s' % (dataset_folder, 'plays.csv'), sep='\\t', encoding='utf-8')\nclears  = pd.read_csv('%s\/%s' % (dataset_folder, 'clears.csv'), sep='\\t', encoding='utf-8')\nrecords = pd.read_csv('%s\/%s' % (dataset_folder, 'records.csv'), sep='\\t', encoding='utf-8')","e70b71ff":"ids = courses['id'].unique().tolist()\ninteractions = {id:{'likes':0, 'plays':0, 'clears':0, 'records':0} for id in ids}","dd9ced71":"names = ['courses','likes','plays','clears','records']\nfor df, name in zip([courses,likes,plays,clears,records], names):\n    print('%s:' % (name), len(df))","c6388397":"likes.head()","f5be308c":"# count number of likes per map\nlikes_per_course = likes['id'].value_counts().to_dict()","f058f857":"for id, values in likes_per_course.items():\n    interactions[id]['likes'] = values","8dcd18a2":"plays.head()","68d4f9fe":"# count number of plays per map\nplays_per_course = plays['id'].value_counts().to_dict()","1b017075":"for id, values in plays_per_course.items():\n    interactions[id]['plays'] = values","e1046483":"clears.head()","888d28c0":"# count number of clears per map\nclears_per_course = clears['id'].value_counts().to_dict()","27e5bd17":"for id, values in clears_per_course.items():\n    interactions[id]['clears'] = values","9294121d":"records.head()","b270fd99":"# count number of records per map\nrecords_per_course = records['id'].value_counts().to_dict()","3162a782":"for id, values in records_per_course.items():\n    interactions[id]['records'] = values","f7b391a5":"# palette of colors\npalette = sns.color_palette('cubehelix', 4)\nsns.palplot(palette)","a9c1488d":"# data sorted\ndf = pd.DataFrame(interactions).transpose()\ndf['sum'] = df['likes'] + df['plays'] + df['clears'] + df['records']\ndf = df.sort_values(by=['sum'], ascending=False)","fac79f31":"df.head()","9bee896f":"# settings\nlimit = 100\nfontsize = 14\n\n# getting axis\naxis_id = df.index.tolist()[0:limit]\naxis_plays = df['plays'].tolist()[0:limit]\naxis_clears = df['clears'].tolist()[0:limit]\naxis_records = df['records'].tolist()[0:limit]\naxis_likes = df['likes'].tolist()[0:limit]","e794d1f0":"# plot\nfig, ax = plt.subplots()\nbottom_records  = [axis_plays[i] + axis_clears[i] for i in range(0, limit)]\nbottom_likes    = [bottom_records[i] + axis_records[i] for i in range(0, limit)]\n\n# bar plot\np1 = plt.bar(range(0, limit), axis_plays, color=palette[0], label='Plays')\np2 = plt.bar(range(0, limit), axis_clears, bottom=axis_plays, color=palette[1], label='Clears')\np3 = plt.bar(range(0, limit), axis_records, bottom=bottom_records, color=palette[2], label='Records')\np4 = plt.bar(range(0, limit), axis_likes, bottom=bottom_likes, color=palette[3], label='Likes')\n\n# texts and labels\nplt.ylabel('Players Interactions', fontsize=fontsize)\nplt.xlabel('Game Maps', fontsize=fontsize)\nax.legend(prop={'size':fontsize-2})\n\n# ticks\nfig.set_size_inches(6, 3, forward=True)\nplt.xlim(-1, 100)\n# plt.savefig('%s\/%s.pdf' % (plot_folder, 'interactions'), dpi=300)\nplt.show()","cb871105":"!pip install powerlaw","4578ea72":"import powerlaw\nfrom scipy import stats\n# -- ignore warning\nimport warnings\nwarnings.simplefilter(action='ignore', category=RuntimeWarning)","7c310579":"data = df['sum']\nfit = powerlaw.Fit(data, discrete=True, estimate_discrete=False)","157e07f7":"# plot\nfig, ax = plt.subplots()\nfig_powerlaw = fit.plot_pdf(linewidth=3, color=palette[0], label='Empirical data')\nfit.power_law.plot_pdf(ax=fig_powerlaw, color=palette[1], linestyle='--', label='Power law fit')\nfit.lognormal.plot_pdf(ax=fig_powerlaw, color=palette[2], linestyle='--', label='Log-normal fit')\n\n# texts and labels\nax.legend(prop={'size':fontsize-2})\n\n# ticks\nfig.set_size_inches(6, 3, forward=True)\n# plt.savefig('%s\/%s.pdf' % (plot_folder, 'interactions-powerlaw-PDF'), dpi=300)\nplt.show()","0a26e35d":"# plot\nfig, ax = plt.subplots()\nfig_powerlaw = fit.plot_cdf(linewidth=3, color=palette[0], label='Empirical data')\nfit.power_law.plot_cdf(ax=fig_powerlaw, color=palette[1], linestyle='--', label='Power law fit')\nfit.lognormal.plot_cdf(ax=fig_powerlaw, color=palette[2], linestyle='--', label='Log-normal fit')\n\n# texts and labels\nax.legend(prop={'size':fontsize-2})\n\n# ticks\nfig.set_size_inches(6, 3, forward=True)\n# plt.savefig('%s\/%s.pdf' % (plot_folder, 'interactions-powerlaw-CDF'), dpi=300)\nplt.show()","7f03f76f":"# plot\nfig, ax = plt.subplots()\nfig_powerlaw = fit.plot_ccdf(linewidth=3, color=palette[0], label='Empirical data')\nfit.power_law.plot_ccdf(ax=fig_powerlaw, color=palette[1], linestyle='--', label='Power law fit')\nfit.lognormal.plot_ccdf(ax=fig_powerlaw, color=palette[2], linestyle='--', label='Log-normal fit')\n\n# texts and labels\nax.legend(prop={'size':fontsize-2})\n\n# ticks\nfig.set_size_inches(6, 3, forward=True)\n# plt.savefig('%s\/%s.pdf' % (plot_folder, 'interactions-powerlaw-CCDF'), dpi=300)\nplt.show()","73d19091":"cdfs = [\n    \"norm\",            #Normal (Gaussian)\n    \"alpha\",           #Alpha\n    \"anglit\",          #Anglit\n    \"arcsine\",         #Arcsine\n    \"beta\",            #Beta\n    \"betaprime\",       #Beta Prime\n    \"bradford\",        #Bradford\n    \"burr\",            #Burr\n    \"cauchy\",          #Cauchy\n    \"chi\",             #Chi\n    \"chi2\",            #Chi-squared\n    \"cosine\",          #Cosine\n    \"dgamma\",          #Double Gamma\n    \"dweibull\",        #Double Weibull\n    \"erlang\",          #Erlang\n    \"expon\",           #Exponential\n    \"exponweib\",       #Exponentiated Weibull\n    \"exponpow\",        #Exponential Power\n    \"fatiguelife\",     #Fatigue Life (Birnbaum-Sanders)\n    \"foldcauchy\",      #Folded Cauchy\n    \"f\",               #F (Snecdor F)\n    \"fisk\",            #Fisk\n    \"foldnorm\",        #Folded Normal\n    \"gamma\",           #Gamma\n    \n#     \"gausshyper\",      #Gauss Hypergeometric\n    \n    \"genexpon\",        #Generalized Exponential\n    \"genextreme\",      #Generalized Extreme Value\n    \"gengamma\",        #Generalized gamma\n    \"genlogistic\",     #Generalized Logistic\n    \"genpareto\",       #Generalized Pareto\n    \"genhalflogistic\", #Generalized Half Logistic\n    \"gilbrat\",         #Gilbrat\n    \"gompertz\",        #Gompertz (Truncated Gumbel)\n    \"gumbel_l\",        #Left Sided Gumbel, etc.\n    \"gumbel_r\",        #Right Sided Gumbel\n    \"halfcauchy\",      #Half Cauchy\n    \"halflogistic\",    #Half Logistic\n    \"halfnorm\",        #Half Normal\n    \"hypsecant\",       #Hyperbolic Secant\n    \"invgamma\",        #Inverse Gamma\n    \"invweibull\",      #Inverse Weibull\n    \"johnsonsb\",       #Johnson SB\n    \"johnsonsu\",       #Johnson SU\n    \"laplace\",         #Laplace\n    \"logistic\",        #Logistic\n    \"loggamma\",        #Log-Gamma\n    \"loglaplace\",      #Log-Laplace (Log Double Exponential)\n    \"lognorm\",         #Log-Normal\n    \"lomax\",           #Lomax (Pareto of the second kind)\n    \"maxwell\",         #Maxwell\n    \"mielke\",          #Mielke's Beta-Kappa\n    \"nakagami\",        #Nakagami\n    \n#     \"ncx2\",            #Non-central chi-squared\n#     \"ncf\",             #Non-central F\n#     \"nct\",             #Non-central Student's T\n    \n    \"pareto\",          #Pareto\n    \"powerlaw\",        #Power-function\n    \"powerlognorm\",    #Power log normal\n    \"powernorm\",       #Power normal\n    \"rdist\",           #R distribution\n    \"reciprocal\",      #Reciprocal\n    \"rayleigh\",        #Rayleigh\n    \"rice\",            #Rice\n    \"recipinvgauss\",   #Reciprocal Inverse Gaussian\n    \"semicircular\",    #Semicircular\n    \"t\",               #Student's T\n    \"triang\",          #Triangular\n    \"truncexpon\",      #Truncated Exponential\n    \"truncnorm\",       #Truncated Normal\n    \n#     \"tukeylambda\",     #Tukey-Lambda\n    \n    \"uniform\",         #Uniform\n    \"vonmises\",        #Von-Mises (Circular)\n    \"wald\",            #Wald\n    \"weibull_min\",     #Minimum Weibull (see Frechet)\n    \"weibull_max\",     #Maximum Weibull (see Frechet)\n    \"wrapcauchy\",      #Wrapped Cauchy\n    \n#     \"ksone\",           #Kolmogorov-Smirnov one-sided (no stats)\n#     \"kstwobign\"        #Kolmogorov-Smirnov two-sided test for Large N\n    ]","b1b0acae":"for cdf in cdfs:\n    # fit our data set against every probability distribution\n    parameters = eval(\"stats.\"+cdf+\".fit(data)\")\n    # applying the Kolmogorov-Smirnof test\n    D, p = stats.kstest(data, cdf, args=parameters)\n    # print\n    print('p = %.25f, D = %.4f (%s)' % (p,D,cdf))","6a2d36b7":"Create a `dict` to store the interactions.","66ba1dad":"## Overview","31a01d75":"### Plays","1d0755fc":"Plot","ae32b877":"### Records","3307a472":"### Plot","7f8de53b":"### Clears","99e36c78":"## Power law test  (Clauset et al. 2009)\n\nhttps:\/\/arxiv.org\/pdf\/0706.1062.pdf","f0059ab7":"Read data","9d4fdfe2":"## Kolmogorov-smirnov (test)\n\nTesting with many distributions.  \n\n-   `D`: Close to 0 (better), drawn from the same distribution.\n-   `p`: significance level, high is better.","ab0bfee2":"# Overview: Game Maps and Players (Interactions)","a781f325":"### Likes"}}