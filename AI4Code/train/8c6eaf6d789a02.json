{"cell_type":{"c6c8f3f5":"code","d2cb0304":"code","ad5c82ae":"code","efe1d92a":"code","fc3fd1dd":"code","fea46209":"code","248b2af2":"code","badcb5c2":"code","17e2b3ae":"code","53da2a6b":"code","8ee9864f":"code","4e1db38f":"code","b88cd84d":"code","c853c321":"code","48d3520e":"code","f4be8262":"code","8769c5c5":"code","7294c39f":"code","61f9311d":"code","d619a662":"code","cef038e8":"code","d778f19d":"markdown"},"source":{"c6c8f3f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2cb0304":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS28Q.PNG\")","ad5c82ae":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS28.PNG\")","efe1d92a":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS29Q.PNG\")","fc3fd1dd":"from abc import ABCMeta, abstractmethod\nclass Customer(metaclass=ABCMeta):\n    def __init__(self,customer_name):\n        self.bill_id=0\n        self.__customer_name=customer_name.title()\n        self.bill_amount=0\n    @abstractmethod\n    def calculate_bill_amount(self):\n        pass\n    def get_customer_name(self):\n        return self.__customer_name\nclass OccasionalCustomer(Customer):\n    __counter=1000\n    def __init__(self, customer_name, distance_in_kms):\n        self.__distance_in_kms=distance_in_kms\n        Customer.__init__(self, customer_name)\n        self.bill_id=\"O\"+str(OccasionalCustomer.__counter+1)\n        OccasionalCustomer.__counter+=1\n    def validate_distance_in_kms(self):\n        if self.__distance_in_kms>=1 and self.__distance_in_kms<=5:\n            return True\n        else:\n            return False\n    def calculate_bill_amount(self):\n        if self.validate_distance_in_kms():\n            tiffin_cost=50\n            distance=1\n            while(distance<=self.__distance_in_kms):\n                if distance in [1,2]:\n                    self.bill_amount=self.__distance_in_kms*5\n                if distance in range(3,6):\n                    self.bill_amount=self.__distance_in_kms*7.5\n                distance += 1\n            self.bill_amount+=tiffin_cost\n            return self.bill_amount\n        else:\n            self.bill_amount=-1\n            return self.bill_amount \n    def get_distance_in_kms(self):\n        return self.__distance_in_kms\nclass RegularCustomer(Customer):\n    __counter=100\n    def __init__(self, customer_name, no_of_tiffin):\n        self.__no_of_tiffin=no_of_tiffin\n        Customer.__init__(self, customer_name)\n        self.bill_id=\"R\"+str(RegularCustomer.__counter+1)\n        RegularCustomer.__counter+=1\n    def validate_no_of_tiffin(self):\n        if self.__no_of_tiffin in range(1,8):\n            return True\n        else:\n            return False\n    def calculate_bill_amount(self):\n        if self.validate_no_of_tiffin():\n            tiffin_cost=50\n            self.bill_amount=tiffin_cost*self.__no_of_tiffin*7\n            return self.bill_amount\n        else:\n            self.bill_amount=-1\n            return self.bill_amount\n    def get_no_of_tiffin(self):\n        return self.__no_of_tiffin\no=OccasionalCustomer(\"David\", 5)\nprint(o.calculate_bill_amount())","fea46209":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS29.PNG\")","248b2af2":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS30Q.PNG\")","badcb5c2":"#OOPR-Assgn-30\ntypes=['small', 'medium', 'Small', 'Medium']\nclass Customer:\n    def __init__(self, customer_name, quantity):\n        self.__customer_name=customer_name.title()\n        self.__quantity=quantity\n    def validate_quantity(self):\n        if self.__quantity in range(1,6):\n            return True\n        else: \n            return False\n    def get_customer_name(self):\n        return self.__customer_name\n    def get_quantity(self):\n        return self.__quantity\n    \nclass Pizzaservice:\n    counter=100\n    def __init__(self, customer, pizza_type, additional_topping):\n        self.__customer = customer\n        self.__pizza_type = pizza_type\n        self.__additional_topping = additional_topping\n        self.pizza_cost = 0\n        self.__service_id=None\n    def validate_pizza_type(self):\n        if self.__pizza_type.lower() in types:\n            return True\n        else:\n            return False\n    def calculate_pizza_cost(self):\n        if self.validate_pizza_type() and Customer.validate_quantity(self.__customer):\n            if self.__pizza_type.title() == \"Small\" :\n                self.pizza_cost=150 * Customer.get_quantity(self.__customer)\n                if self.__additional_topping:\n                    self.pizza_cost+=35 * Customer.get_quantity(self.__customer)\n            if self.__pizza_type.title()==\"Medium\":\n                self.pizza_cost=200 * Customer.get_quantity(self.__customer)\n                if self.__additional_topping:\n                    self.pizza_cost+=50 *  Customer.get_quantity(self.__customer)\n            if not self.__service_id:\n                self.__service_id = self.__pizza_type[0] + str(Pizzaservice.counter+1)\n                Pizzaservice.counter+=1\n        else:\n            self.pizza_cost=-1\n    def get_service_id(self):\n        return self.__service_id\n    def get_pizza_type(self):\n        return self.__pizza_type\n    def get_customer(self):\n        return self.__customer\n    def get_additional_topping(self):\n        return self.__additional_topping\nclass Doordelivery(Pizzaservice):\n    def __init__(self, customer, pizza_type, additional_topping, distance_in_kms):\n        self.__delivery_charge=0\n        self.__distance_in_kms = distance_in_kms\n        Pizzaservice.__init__(self, customer, pizza_type, additional_topping)\n    def validate_distance_in_kms(self):\n        if self.__distance_in_kms in range(1,11):\n            return True\n        else:\n            return False\n    def calculate_pizza_cost(self):\n        if self.validate_distance_in_kms():\n            Pizzaservice.calculate_pizza_cost(self)\n            if self.pizza_cost!= -1:\n                distance=1\n                while(distance<=self.__distance_in_kms):\n                    if distance in range(1,6):\n                        self.pizza_cost += 5\n                    if distance in range(6,11):\n                        self.pizza_cost += 7\n                    distance += 1\n        else:\n            self.pizza_cost = -1\n    def get_delivery_charge(self):\n        return self.__delivery_charge\n    def get_distance_in_kms(self):\n        return self.__distance_in_kms\nc = Customer(\"BB\", 5)\nd = Pizzaservice(c, \"MEDIUM\", True)\nd.calculate_pizza_cost()\nd.calculate_pizza_cost()\nd.calculate_pizza_cost()\nd.calculate_pizza_cost()\nd.calculate_pizza_cost()\n\nprint(d.pizza_cost)\nprint(d.get_service_id())","17e2b3ae":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS30.PNG\")","53da2a6b":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS31Q.PNG\")","8ee9864f":"#OOPR-Assgn-31\nimport math\nfrom abc import ABCMeta, abstractmethod\n# metaclass=ABCMeta):\nclass Logistics(metaclass=ABCMeta):\n    __counter=None\n    def __init__(self,start_reading,end_reading):\n        self.__consumer_id=None\n        self.__start_reading=start_reading\n        self.__end_reading=end_reading\n    def get_consumer_id(self):\n        return self.__consumer_id\n    def get_start_reading(self):\n        return self.__start_reading\n    def get_end_reading(self):\n        return self.__end_reading\n    def validate_meter_reading(self):\n        if(self.__start_reading >= self.__end_reading):\n            return False\n        else:\n            return True\n    def generate_consumer_id(self):\n        if not Logistics.__counter:\n            Logistics.__counter=7000\n        if not self.__consumer_id:\n            self.__consumer_id = Logistics.__counter + 1\n            Logistics.__counter += 1\n    @abstractmethod\n    def calculate_bill_amount(self):\n        pass\nclass PassengerLogistics(Logistics):\n    __list_vehicle=[\"BMW\",\"TOYOTA\",\"FORD\"]\n    __list_minimum_charge=[3000,1500,1000]\n    __list_charge_for_hundred=[30,15,10]\n    __list_charge_after_hundred=[25,12,7]\n    def __init__(self,vehicle_type,start_reading,end_reading):\n        super().__init__(start_reading,end_reading)\n        self.__vehicle_type=vehicle_type\n    def get_vehicle_type(self):\n        return self.__vehicle_type\n    def validate_vehicle_type(self):\n        for index in range(0,len(PassengerLogistics.__list_vehicle)):\n            if(PassengerLogistics.__list_vehicle[index]==self.__vehicle_type):\n                return index\n        return -1\n    def calculate_bill_amount(self):\n        if self.validate_vehicle_type()>=0 and self.validate_meter_reading():\n            self.generate_consumer_id()\n            distance_travelled = self.get_end_reading() - self.get_start_reading()\n            distance = 1\n            bill_amount=0\n            index = PassengerLogistics.__list_vehicle.index(self.get_vehicle_type())\n            while(distance<=distance_travelled):\n                if distance<=100:\n                    bill_amount+=PassengerLogistics.__list_charge_for_hundred[index]\n                if distance>100:\n                    bill_amount+=PassengerLogistics.__list_charge_after_hundred[index]\n                distance += 1\n            if PassengerLogistics.__list_minimum_charge[index]>bill_amount:\n                bill_amount=PassengerLogistics.__list_minimum_charge[index]\n            bill_amount*=1.05\n            return bill_amount\n        else:\n            bill_amount=-1\n            return bill_amount\n            \nclass GoodsLogistics(Logistics):\n    __carrier_dict={\"EICHER\": 38, \"FORCE\": 42, \"TATA\": 25} # stores the carrier type and rate per kilometer for 1000kg\n    def __init__(self,carrier_type,goods_weight,start_reading,end_reading):\n        super().__init__(start_reading,end_reading)\n        self.__carrier_type=carrier_type\n        self.__goods_weight=goods_weight\n    def get_carrier_type(self):\n        return self.__carrier_type\n    def get_goods_weight(self):\n        return self.__goods_weight\n    def validate_carrier_type(self):\n        for carrier in GoodsLogistics.__carrier_dict:\n            if(carrier==self.__carrier_type):\n                return True\n        return False\n    def calculate_bill_amount(self):\n        if(self.validate_carrier_type()):\n            if(self.validate_meter_reading()):\n                self.generate_consumer_id()\n                total_distance=self.get_end_reading()-self.get_start_reading()\n                multiplier = math.ceil(self.__goods_weight\/1000)-1\n                charge_per_kilometer=0\n                bill_amount=0\n                if(self.__goods_weight<=1000):\n                    charge_per_kilometer=GoodsLogistics.__carrier_dict[self.__carrier_type]\n                elif(self.__goods_weight >1000 and self.__goods_weight<=3000):\n                    charge_per_kilometer=self.__carrier_dict[self.__carrier_type]*2**multiplier\n                else:\n                    charge_per_kilometer=200\n                bill_amount+=total_distance*charge_per_kilometer\n                bill_amount*=1.10\n                bill_amount+=2000\n                return bill_amount\n            else:\n                return -1\n        else:\n            return -1\n# # _Logistics__counter-None(Method invoked 5 times)\n# passenger_logistic=PassengerLogistics(\"TOYOTA\",300,400)\n# bill_amount=passenger_logistic.calculate_bill_amount()\n\n# # bill_amount=passenger_logistic.calculate_bill_amount()\n# if(bill_amount==-1):\n#     print(\"Invalid vehicle type or meter reading \")\n# else:\n#     print(\"Consumer id    :\",passenger_logistic.get_consumer_id())\n#     print(\"Start reading  :\",passenger_logistic.get_start_reading())\n#     print(\"End reading    :\",passenger_logistic.get_end_reading())\n#     print(\"Total Amount   :\",bill_amount)\n# print(\"------------------------------------------------------------\")\ngoods_logistic=GoodsLogistics(\"TATA\",2000,300,400)\nbill_amount=goods_logistic.calculate_bill_amount()\nif(bill_amount==-1):\n    print(\"Invalid career type or meter reading \")\nelse:\n    print(\"Consumer id    :\",goods_logistic.get_consumer_id())\n    print(\"Goods weight   :\",goods_logistic.get_goods_weight())\n    print(\"Start reading  :\",goods_logistic.get_start_reading())\n    print(\"End reading    :\",goods_logistic.get_end_reading())\n    print(\"Total Amount   :\",bill_amount)","4e1db38f":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS31.PNG\")","b88cd84d":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS32Q.PNG\")","c853c321":"#OOPR-Assgn-32\n#Start writing your code here\nfrom abc import ABCMeta,abstractmethod\n\nemp_qualification=[\"Bachelors\",\"Masters\"]\ngraduate_job_band=[\"A\",\"B\",\"C\"]\nlateral_job=[\"D\",\"E\",\"F\"]\nbonus={\"AGP\":6500,\"AGPT\":8200,\"AGDEV\":11500}\nemp_incentive={\"A\":4,\"B\":6,\"C\":10,\"D\":13,\"E\":16,\"F\":20}\n\nclass Employee(metaclass=ABCMeta):\n    def __init__(self,job_band,employee_name,basic_salary,qualification):\n        self.__job_band=job_band\n        self.__employee_name=employee_name\n        self.__basic_salary=basic_salary\n        self.__qualification=qualification\n        \n    def get_employee_name(self):\n        return self.__employee_name\n        \n    def get_job_band(self):\n        return self.__job_band\n        \n    def get_basic_salary(self):\n        return self.__basic_salary\n    \n    def get_qualification(self):\n        return self.__qualification\n    \n    @abstractmethod\n    def validate_job_band(self):\n        pass\n    \n    @abstractmethod\n    def calculate_gross_salary(self):\n        pass \n    \n    def validate_basic_salary(self):\n        if self.__basic_salary>3000:\n            return True\n        else:\n            return False\n            \n    def validate_qualification(self):\n        if self.__qualification in emp_qualification:\n            return True\n        else:\n            return False\n            \n\nclass Graduate(Employee):\n    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):\n        super().__init__(job_band,employee_name,basic_salary,qualification)\n        self.__cgpa=cgpa\n            \n    def get_cgpa(self):\n        return self.__cgpa\n        \n    def validate_job_band(self):\n        band=Employee.get_job_band(self)\n        if band in graduate_job_band:\n            return True\n        else:\n            return False\n    \n    def calculate_gross_salary(self):\n        if self.validate_basic_salary() == True and self.validate_qualification() == True and self.validate_job_band() == True:\n            incentive=0 \n            tpi=0 \n            salary=Employee.get_basic_salary(self) \n            band=Employee.get_job_band(self)\n            incent=emp_incentive[band]\n            incentive=incent\/100 \n\n            if 4<= self.__cgpa <= 4.25:\n                tpi=1000\n            elif 4.26 <= self.__cgpa <= 4.5:\n                tpi=1700\n            elif 4.51 <= self.__cgpa <= 4.75:\n                tpi=3200\n            elif 4.76 <= self.__cgpa <= 5:\n                tpi=5000\n                \n            gross_salary = salary + salary * incentive + tpi + salary * 0.12\n            return gross_salary\n        else:\n            return -1\n            \n        \nclass Lateral(Employee):\n    def __init__(self,job_band,employee_name,basic_salary,qualification,skill_set):\n        super().__init__(job_band,employee_name,basic_salary,qualification)\n        self.__skill_set=skill_set\n        \n    def get_skill_set(self):\n        return self.__skill_set\n        \n    def validate_job_band(self):\n        band=Employee.get_job_band(self)\n        if band in lateral_job:\n            return True\n        else:\n            return False\n            \n    def calculate_gross_salary(self):\n        if self.validate_basic_salary() == True and self.validate_qualification() == True and self.validate_job_band() == True:\n            sme=0 \n            incentive=0 \n            band=Employee.get_job_band(self)\n            salary=Employee.get_basic_salary(self)\n            incent=emp_incentive[band]\n            incentive=incent\/100 \n            sme = bonus[self.__skill_set]\n            \n            gross_salary = salary + salary * incentive + sme + salary * 0.12\n            return gross_salary\n        else:\n            return -1\n            \n        \nl=Lateral(\"D\",\"Sarah\",6500,\"Masters\",\"AGP\")\ng=Graduate(\"B\",\"Sarah\",6500,\"Masters\",4.65)\nprint(l.get_skill_set())\nprint(l.validate_job_band())\nprint(l.calculate_gross_salary())\nprint(g.calculate_gross_salary())","48d3520e":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS32.PNG\")","f4be8262":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS33Q.PNG\")","8769c5c5":"class OverdrawException(Exception):\n    pass\n\nclass LimitReachedException(Exception):\n    pass\n\nclass Account:\n    def __init__(self,account_type,balance,min_balance):\n        self.__account_type=account_type\n        self.__balance=balance\n        self.__min_balance=min_balance\n        \n    def get_account_type(self):\n        return self.__account_type\n        \n    def get_balance(self):\n        return self.__balance\n        \n    def get_min_balance(self):\n        return self.__min_balance\n        \n    def set_balance(self,balance):\n        self.__balance=balance\n        \n        \nclass Customer:\n    def __init__(self,customer_id,customer_name,age,account):\n        self.__customer_id=customer_id\n        self.__customer_name=customer_name\n        self.__age=age\n        self.__account=account\n        \n    def withdraw(self,amount):\n        balance=Account.get_balance(self.__account)\n        min_balance=Account.get_min_balance(self.__account)\n        new_balance = balance - amount\n        if amount > balance:\n            raise OverdrawException\n        elif new_balance < min_balance:\n            raise LimitReachedException\n            \n        Account.set_balance(self.__account,new_balance)\n        \n    def take_card(self):\n        print(\"Take card out from the ATM\")\n        \n    def get_customer_id(self):\n        return self.__customer_id\n        \n    def get_customer_name(self):\n        return self.__customer_name\n        \n    def get_age(self):\n        return self.__age\n        \n    def get_account(self):\n        return self.__account\n        \n        \nclass PrivilegedCustomer(Customer):\n    def __init__ (self,customer_id, customer_name, age, account, bonus_points):\n        super().__init__ (customer_id, customer_name, age, account)\n        self.__bonus_points=bonus_points\n        \n    def __increase_bonus(self):\n        Account=self.get_account()\n        balance = Account.get_balance()\n        if balance>1000:\n            self.__bonus_points+=10 \n        else:\n            self.__bonus_points+=2\n            \n    def withdraw(self,amount):\n        Customer.withdraw(self,amount)\n        self.__increase_bonus()\n        \n    def get_bonus_points(self):\n        return self.__bonus_points\n        \na = Account(\"Savings\",1000,500)\nc = Customer(\"100\",\"Gopal\",43,a)\np = PrivilegedCustomer(\"c101\",\"Sudarshan\",22,a,100)\n\ntry:\n    print(\"Customer Id: \"+str(c.get_customer_id()))\n    print(\"Customer Name: \"+c.get_customer_name())\n    print(\"Age: \"+str(c.get_age()))\n    print(\"Account Type: \"+a.get_account_type())\n    print(\"Account Balance: \"+str(a.get_balance()))\n    print(\"Account minimum: \"+str(a.get_min_balance()))\n    p.withdraw(400)\n    print(\"Account Balance after withdraw: \"+str(a.get_balance()))\n    print(\"Bonus Points: \"+str(p.get_bonus_points()))\nexcept OverdrawException:\n    print(\"amount to be withdrawn is greater than account balance.\")\nexcept LimitReachedException:\n    print(\"balance amount is less than minimum account balance.\")\nfinally:\n    c.take_card()","7294c39f":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS33.PNG\")","61f9311d":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS34 Q.PNG\")","d619a662":"class Company:\n    #Stores hike% based on job level.\n    dict_hike={\"A\":5, \"B\":6, \"C\":10 , \"D\":11}\n    #Consider incentive provided in all classes to be in Rupees(Rs).\n    __c_incentive=5000\n    def __init__(self,name):\n        self.name=name\n    @staticmethod\n    def get_c_incentive():\n        return Company.__c_incentive\nclass Employee:\n    def __init__(self, emp_id,e_incentive, job_level,salary, performance_list):\n        self.emp_id=emp_id\n        self.__e_incentive=e_incentive\n        self.__salary=salary\n        self.__job_level=job_level\n        self.__performance_list=performance_list\n    def get_e_incentive(self):\n        return self.__e_incentive\n    def get_performance_list(self):\n        return self.__performance_list\n    def get_salary(self):\n        return self.__salary\n    def get_job_level(self):\n        return self.__job_level\n    def identify_performance_hike(self):\n        return None\n    def identify_job_level_hike(self):\n        return None\n    def identify_incentive(self):\n        return None\n    def update_salary(self,hike, incentive):\n        self.__salary= (self.__salary+ self.__salary*hike\/100) + incentive\n    def calculate_salary(self):\n        jl_hike=self.identify_job_level_hike()\n        ex_hike=self.identify_performance_hike()\n        if(jl_hike!=None):\n            hike=jl_hike\n            if(ex_hike!=None):\n                hike+=ex_hike\n            incentive=self.identify_incentive()\n            self.update_salary(hike, incentive)\n            return True\n        else:\n            return False\n#Implement the class here\nclass PermanentEmployee(Employee):\n    def __init__(self, emp_id,e_incentive, job_level,salary, performance_list,p_incentive):\n        super().__init__(emp_id,e_incentive, job_level,salary, performance_list)\n        self.__p_incentive=p_incentive\n        \n    \n    def get_p_incentive(self):\n        return self.__p_incentive\n        \n    def identify_performance_hike(self):\n        performance_list=self.get_performance_list()\n        if performance_list[4]==1 and performance_list[3]==1:\n            hike=5 \n        elif performance_list[4]==1 and performance_list[3]==2 and performance_list[2]==1:\n            hike=3 \n        else:\n            hike = None\n        return hike\n        \n    def identify_job_level_hike(self):\n        job_level = Employee.get_job_level(self)\n        if job_level in Company.dict_hike.keys():\n            job_hike=Company.dict_hike[job_level]\n            return job_hike\n        else:\n            return None\n            \n    def identify_incentive(self):\n        c_incentive=Company.get_c_incentive()\n        e_incentive=Employee.get_e_incentive(self)\n        incentive=e_incentive + self.__p_incentive + c_incentive\n        return incentive\n        \n    def calculate_salary(self):\n        jl_hike=self.identify_job_level_hike()\n        ex_hike=self.identify_performance_hike()\n        if(jl_hike!=None):\n            hike=jl_hike\n            if(ex_hike!=None):\n                hike+=ex_hike\n            incentive=self.identify_incentive()\n            Employee.update_salary(self, hike, incentive)\n            return True\n        else:\n            return False\n            \np = PermanentEmployee(2134,1000,\"A\",130000,[1, 2, 1, 1, 1],3000)","cef038e8":"from IPython.display import Image\nImage(\"..\/input\/day5-assignment\/AS34.PNG\")","d778f19d":"Rio Logistics Company provides two categories of services, namely Passenger logistics and Goods logistics.40 min\n\nSome part of the program for this requirement is already given to you. You may need to implement or debug the given code to meet the requirements."}}