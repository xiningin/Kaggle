{"cell_type":{"22bc0e65":"code","152b4898":"code","bd4d5e8d":"code","254b58a3":"code","2542a262":"code","7a4ce223":"code","583f4b3e":"code","67aee265":"code","7e262b8f":"code","7780fd69":"code","447d7b28":"code","62327800":"code","57a694e2":"code","fec2af27":"code","d61e0687":"code","fb4bfa8f":"code","cebfb055":"code","4a5b3a98":"code","791e54d3":"code","6e9ae4d9":"code","2f4c2a74":"code","29eadd68":"code","542a1952":"code","9e2bdbf5":"code","c7ecfe89":"markdown"},"source":{"22bc0e65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","152b4898":"import pandas as pd\nimport numpy as np\nimport os\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.subplots import make_subplots\nimport matplotlib","bd4d5e8d":"df_2021 = pd.read_csv('\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv')\ndf = pd.read_csv('\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report.csv')\npop = pd.read_csv('..\/input\/world-population-19602018\/population_total_long.csv')\ndf2 = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\ndf","254b58a3":"df_2021['Regional indicator'].value_counts()","2542a262":"country_continent = {}\nfor i in range(len(df_2021)):\n    country_continent[df_2021['Country name'][i]] = df_2021['Regional indicator'][i]\nall_countries = df['Country name'].value_counts().reset_index()['index'].tolist()\nall_countries_2021 = df_2021['Country name'].value_counts().reset_index()['index'].tolist()\nfor x in all_countries:\n    if x not in all_countries_2021:\n        print(x)","7a4ce223":"region = []\nfor i in range(len(df)):\n    if df['Country name'][i] == 'Angola':\n        region.append(\"Sub-Saharan Africa\")\n    elif df['Country name'][i] == 'Belize':\n        region.append(\"Latin America and Caribbean\")\n    elif df['Country name'][i] == 'Congo (Kinshasa)':\n        region.append(\"Sub-Saharan Africa\")\n    elif df['Country name'][i] == 'Syria':\n        region.append(\"Middle East and North Africa\")\n    elif df['Country name'][i] == 'Trinidad and Tobago':\n        region.append(\"Latin America and Caribbean\")\n    elif df['Country name'][i] == 'Cuba':\n        region.append(\"Latin America and Caribbean\")\n    elif df['Country name'][i] == 'Qatar':\n        region.append(\"Middle East and North Africa\")\n    elif df['Country name'][i] == 'Sudan':\n        region.append(\"Middle East and North Africa\")\n    elif df['Country name'][i] == 'Central African Republic':\n        region.append(\"Sub-Saharan Africa\")\n    elif df['Country name'][i] == 'Djibouti':\n        region.append(\"Sub-Saharan Africa\")\n    elif df['Country name'][i] == 'Somaliland region':\n        region.append(\"Sub-Saharan Africa\")\n    elif df['Country name'][i] == 'South Sudan':\n        region.append(\"Middle East and North Africa\")\n    elif df['Country name'][i] == 'Somalia':\n        region.append(\"Sub-Saharan Africa\")\n    elif df['Country name'][i] == 'Oman':\n        region.append(\"Middle East and North Africa\")\n    elif df['Country name'][i] == 'Guyana':\n        region.append(\"Latin America and Caribbean\")\n    elif df['Country name'][i] == 'Guyana':\n        region.append(\"Latin America and Caribbean\")\n    elif df['Country name'][i] == 'Bhutan':\n        region.append(\"South Asia\")\n    elif df['Country name'][i] == 'Suriname':\n        region.append(\"Latin America and Caribbean\")\n    else:\n        region.append(country_continent[df['Country name'][i]])\ndf['region'] = region","583f4b3e":"df = df.replace('Latin America and Caribbean','LatinAmerica&Caribbean')\ndf.replace('Middle East and North Africa','MiddleEast&NorthAfrica',inplace=True)\ndf = df.replace('Central and Eastern Europe','Central&EasternEurope')\ndf = df.replace('Commonwealth of Independent States','Independent States')\ndf = df.replace('North America and ANZ','North America & ANZ')","67aee265":"df['region'].value_counts()","7e262b8f":"def animated_graph(df, column_name):\n    fig = px.choropleth(df.sort_values('year'), locations=\"Country name\", color=column_name, \n                    locationmode='country names',\n                    animation_frame='year',\n                 color_continuous_midpoint=0.8,\n                    color_continuous_scale=px.colors.sequential.dense,\n#                         width=800, height=400\n                   )\n\n    fig.update_layout(title=column_name+' Comparison by country',autosize=True)\n    fig.show() ","7780fd69":"animated_graph(df,\"Perceptions of corruption\")","447d7b28":"animated_graph(df,\"Freedom to make life choices\")","62327800":"fig = px.choropleth(pop.sort_values('Year'), locations=\"Country Name\", color='Count', \n                locationmode='country names',\n                animation_frame='Year',\n#                 range_color=[0,1500000000],\n                color_continuous_scale=px.colors.sequential.dense,\n                color_continuous_midpoint=1500000000\/5\n               )\nfig.update_layout(title='World population through the years')\nfig.show() ","57a694e2":"temp = df[['Log GDP per capita','Life Ladder','year','Country name',\n           'Healthy life expectancy at birth','region','Social support',\n           'Freedom to make life choices','Perceptions of corruption','Generosity']]\nis_NaN = temp.isnull()\nrow_has_NaN = is_NaN.any(axis=1)\nrows_with_NaN = temp[row_has_NaN]\n# print(len(rows_with_NaN))\n# temp = temp.dropna(how='any',axis=0) \ntemp = temp[~temp.year.isin([2006,2005,2007,2008])]\ntemp = temp.sort_values('year')\n# temp['Healthy life expectancy at birth'] = temp['Healthy life expectancy at birth'].apply(lambda x: x*10)","fec2af27":"all_countries = df['Country name'].value_counts().reset_index()['index'].tolist()\nall_countries_pop = pop['Country Name'].value_counts().reset_index()['index'].tolist()\ndel_cou = []\nfor x in all_countries:\n    if x not in all_countries_pop:\n        del_cou.append(x)","d61e0687":"pop_df = temp.copy()\npop_df = pop_df[~pop_df['Country name'].isin(del_cou)]\npop_df = pop_df[~pop_df.year.isin([2006,2005,2007,2018,2019,2020,2021])]\npop_dict = {x:{} for x in range(2008,2018)}\nfor i in range(len(pop)):\n    if(pop['Year'][i] in range(2008,2018)):\n        pop_dict[pop['Year'][i]][pop['Country Name'][i]] = pop['Count'][i]\n\npopulation = []\nfor i in pop_df.index:\n    population.append(pop_dict[pop_df['year'][i]][pop_df['Country name'][i]])\npop_df['population'] = population","fb4bfa8f":"px.scatter(pop_df, x=\"Log GDP per capita\", y=\"Life Ladder\", animation_frame=\"year\", \n           animation_group=\"Country name\",size='population'\n           ,color=\"region\", hover_name=\"Country name\", size_max=60,\n           color_discrete_sequence=px.colors.qualitative.T10)","cebfb055":"px.scatter(pop_df, x=\"Healthy life expectancy at birth\", y=\"Social support\", animation_frame=\"year\", \n           animation_group=\"Country name\",size='population'\n           ,color=\"region\", hover_name=\"Country name\", size_max=60,\n           color_discrete_sequence=px.colors.qualitative.T10)","4a5b3a98":"px.scatter(pop_df, x='Freedom to make life choices', y=\"Generosity\", animation_frame=\"year\", \n           animation_group=\"Country name\",size='population'\n           ,color=\"region\", hover_name=\"Country name\", size_max=60,\n           color_discrete_sequence=px.colors.qualitative.T10)","791e54d3":"all_countries = df['Country name'].value_counts().reset_index()['index'].tolist()\nall_countries_pop = pop['Country Name'].value_counts().reset_index()['index'].tolist()\ndel_cou = []\nfor x in all_countries_pop:\n    if x not in all_countries_2021:\n        del_cou.append(x)\n# print(len(del_cou))","6e9ae4d9":"pop_df = pop.copy()\npop_df = pop_df[~pop_df['Country Name'].isin(del_cou)]\n# pop_df = pop_df[~pop_df.year.isin([2006,2005,2007,2018,2019,2020,2021])]\n# pop_dict = {x:{} for x in range(2008,2018)}\n# for i in range(len(pop)):\n#     if(pop['Year'][i] in range(2008,2018)):\n#         pop_dict[pop['Year'][i]][pop['Country Name'][i]] = pop['Count'][i]\n\nregion = []\nfor i in pop_df.index:\n    region.append(country_continent[pop_df['Country Name'][i]])\npop_df['region'] = region","2f4c2a74":"fig = px.bar(pop_df, x=\"region\", y=\"Count\", color=\"region\",\n  animation_frame=\"Year\", animation_group=\"Country Name\",range_y=[0,2000000000],\n            color_discrete_sequence=px.colors.qualitative.Dark24)\nfig.update_layout(\n    title=\"Animated bar plot of World population over the years\",\n    yaxis_title=\"Population\",\n    showlegend=False\n)\nfig['layout']['updatemenus'][0]['pad']=dict(r= 10, t= 175)\nfig['layout']['sliders'][0]['pad']=dict(r= 10, t= 175,)\nfig.show()","29eadd68":"fig = px.box(temp, y=\"Life Ladder\",color='region',\n            animation_frame=\"year\", animation_group=\"Country name\",\n            color_discrete_sequence=px.colors.qualitative.Dark24)\n# fig.update_layout(title=\"Effects of cholestrol corresponding to chest pain type on chances of heart attack\")\nfig.show()","542a1952":"fig = px.bar(temp, x=\"Generosity\",y='region', color=\"region\",\n  animation_frame=\"year\", animation_group=\"region\",range_x=[-0.5,0.5],\n            color_discrete_sequence=px.colors.qualitative.Dark24)\nfig.update_layout(\n    showlegend=False)\nfig.show()","9e2bdbf5":"fig = px.box(temp, x=\"Healthy life expectancy at birth\",color='region',\n            animation_frame=\"year\", animation_group=\"Country name\",orientation='h',\n            color_discrete_sequence=px.colors.qualitative.Dark24)\n# fig.update_layout(title=\"Effects of cholestrol corresponding to chest pain type on chances of heart attack\")\nfig.show()","c7ecfe89":"# **If there are any suggesion for the notebook please comment, that would be helpful. Also please upvote if you liked it! Thank you.**"}}