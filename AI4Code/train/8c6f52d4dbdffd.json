{"cell_type":{"6c52ebff":"code","973810ef":"code","252cd12d":"code","158ad69a":"code","5e561f64":"code","4e5270d8":"code","2ce0e131":"code","ea138ee1":"code","bc543bc9":"code","ac63c501":"code","424084b1":"code","fd4e79ab":"code","25cd3998":"code","11768446":"code","07716b45":"code","764bb39f":"code","382be527":"code","6c66a2c5":"code","b482a56a":"code","bf2dbb7b":"code","61dbfffc":"code","8bf6fcb1":"code","b2fa404d":"code","effbf8f9":"code","93a93adf":"code","95082f47":"code","13125b16":"code","9a72147b":"code","417a9ccc":"code","9db6b32e":"code","791e4d87":"code","aebd6f3d":"code","9f114881":"code","80be3892":"code","01ea1244":"code","0dce444e":"code","9d9d1364":"code","bccb2fb0":"code","9d894753":"markdown","fe811720":"markdown","6c091a6b":"markdown","956b2478":"markdown","7f2b9045":"markdown"},"source":{"6c52ebff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","973810ef":"nfl_teams = pd.read_csv(\"\/kaggle\/input\/nfl-scores-and-betting-data\/nfl_teams.csv\")\nnfl_teams.head()","252cd12d":"scores = pd.read_csv(\"\/kaggle\/input\/nfl-scores-and-betting-data\/spreadspoke_scores.csv\")\nscores.head()","158ad69a":"scores.describe()","5e561f64":"scores.dtypes, scores.shape","4e5270d8":"# dropping scores from dataset that do not contain a favorite\nscores_with_fav = scores.dropna(subset = [\"team_favorite_id\", \"spread_favorite\", \"over_under_line\"], axis = 0)\nscores_with_fav.shape","2ce0e131":"# turning over-under line to a numeric field\nscores_with_fav[\"over_under_line\"] = pd.to_numeric(scores_with_fav.over_under_line, errors = \"coerce\")\nscores_with_fav.dtypes","ea138ee1":"# dropping all games without an over-under line, \nscores_with_fav = scores_with_fav.dropna(subset = [\"over_under_line\"], axis = 0)\nscores_with_fav.shape","bc543bc9":"scores_with_fav.head()","ac63c501":"# no duplicated data\nscores.loc[scores.duplicated()]","424084b1":"# adding total points to df\nscores_with_fav[\"total_pts\"] = scores_with_fav.score_home + scores_with_fav.score_away\nscores_with_fav","fd4e79ab":"# returns separate dataframes for a given team's home and away games\ndef get_team_games(team, df):\n    team_home = df.loc[df.team_home.str.contains(team)]\n    team_away = df.loc[df.team_away.str.contains(team)]\n    \n    return team_home, team_away","25cd3998":"colts_home, colts_away = get_team_games(\"Colts\", scores_with_fav)\ncolts_home.shape, colts_away.shape","11768446":"# overall, we have 696 games of Colts data, 347 home, 349 away\ncolts_scores = pd.concat([colts_home, colts_away], ignore_index = True)\ncolts_scores.head()","07716b45":"# how many times were the Colts favored in games?\n# Colts were favored in 320\/696 games\ncolts_favored = colts_scores.loc[colts_scores[\"team_favorite_id\"] == \"IND\"]\ndisplay(colts_favored.head(), colts_favored.shape)","764bb39f":"# games that the colts are favored in when they are home -> 212\/347\ncolts_favored_home = colts_favored.loc[colts_favored[\"team_home\"].str.contains(\"Colts\")]\ndisplay(colts_favored_home.head(), colts_favored_home.shape)","382be527":"# need to figure out how to get rid of this warning\ncolts_favored_home[\"pts_diff\"] = colts_favored_home.score_home - colts_favored_home.score_away","6c66a2c5":"# when the colts were favored at home, how often did they cover? 94\/212\ncolts_covered_hm = colts_favored_home.pts_diff > abs(colts_favored_home.spread_favorite)\ncolts_pushed_hm = colts_favored_home.pts_diff == abs(colts_favored_home.spread_favorite)\ncolts_covered_hm.sum(), colts_pushed_hm.sum()","b482a56a":"# games that the colts are favored in when they are away -> 108\/349\ncolts_favored_rd = colts_favored.loc[colts_favored[\"team_away\"].str.contains(\"Colts\")]\ndisplay(colts_favored_rd.head(), colts_favored_rd.shape)\n\n# adding in pts diff to colts road games\ncolts_favored_rd[\"pts_diff\"] = colts_favored_rd.score_away - colts_favored_rd.score_home\ncolts_favored_rd.head()","bf2dbb7b":"# when the colts were favored on the road, how often did they cover? 61\/108\ncolts_covered_awy = colts_favored_rd.pts_diff > abs(colts_favored_rd.spread_favorite)\ncolts_pushed_awy = colts_favored_rd.pts_diff == abs(colts_favored_rd.spread_favorite)\ncolts_covered_awy.sum(), colts_pushed_awy.sum()","61dbfffc":"# creating summary statistics for Colts games\ncolts_hm = colts_home.shape[0], colts_favored_home.shape[0], colts_covered_hm.sum(), colts_pushed_hm.sum()\ncolts_awy = colts_away.shape[0], colts_favored_rd.shape[0], colts_covered_awy.sum(), colts_pushed_awy.sum()\ntotal = colts_scores.shape[0], colts_favored.shape[0], (colts_covered_hm.sum() + colts_covered_awy.sum()), (colts_pushed_hm.sum() + colts_pushed_awy.sum())\n\n\n# creating summary table for games that colts were favored in:\nd_colts_fav = {\n    \"Colts Home\" : pd.Series(colts_hm, index = [\"Total Games\",\"Favored\", \"Covered\", \"Pushed\"]),\n    \"Colts Away\" : pd.Series(colts_awy, index = [\"Total Games\",\"Favored\", \"Covered\", \"Pushed\"]),\n    \"Total\" : pd.Series(total, index = [\"Total Games\", \"Favored\", \"Covered\", \"Pushed\"])\n}\n\ncovered_sum = pd.DataFrame(d_colts_fav)\ncovered_sum","8bf6fcb1":"colts_home, colts_away = get_team_games(\"Colts\", scores_with_fav)\n\n# 83 games in 5 seasons\ncolts_home = colts_home[colts_home.schedule_season > 2015]\ncolts_away = colts_away[colts_away.schedule_season > 2015]\ncolts_home.shape, colts_away.shape","b2fa404d":"colts_home.head()","effbf8f9":"colts_home.agg(['min', 'max', 'mean', 'std'])","93a93adf":"colts_away.head()","95082f47":"# creating summary statistics from Colts and their oppenents\ncolts_avg_ppg = (colts_home.score_home.mean() + colts_away.score_away.mean()) \/ 2\nopp_avg_ppg = (colts_home.score_away.mean() + colts_away.score_home.mean()) \/ 2\ncolts_sum_stats = round(colts_home.score_home.mean(), 2), round(colts_away.score_away.mean(), 2), round(colts_avg_ppg, 2)\nopponent_sum_stats = round(colts_home.score_away.mean(),2), round(colts_away.score_home.mean(), 2), round(opp_avg_ppg, 2)\n\n# creating summary table\nd = {\n    \"Colts\": pd.Series(colts_sum_stats, index = [\"Home\", \"Away\", \"Avg\"]), \n    \"Opponent\": pd.Series(opponent_sum_stats, index = [\"Home\", \"Away\", \"Avg\"])\n}\ncolts_sum_table = pd.DataFrame(d)\ncolts_sum_table","13125b16":"# create visualization of summary table\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\ncolts_sum_table.plot(kind = \"barh\", figsize = (10,8), color = ['#1338BE', 'black'])\nplt.title(\"Colts Avg Pts\/G from 2016-2020\", fontsize = 16, fontweight = 'bold')","9a72147b":"colts_recent = pd.concat([colts_home, colts_away], ignore_index = True)\n# home many times did a recent Colts game go \"over\"? 79\/169\ncolts_game_over = colts_recent[\"total_pts\"] > colts_recent[\"over_under_line\"]\ncolts_recent.shape[0], colts_game_over.sum()","417a9ccc":"# getting all bengals games, 337 home games, 337 away games\nbengals_home, bengals_away = get_team_games(\"Bengals\", scores_with_fav)\n\n# combining into one dataset\nbengals_scores = pd.concat([bengals_home, bengals_away], ignore_index = True)","9db6b32e":"# adding point differential to all bengals games\nbengals_home[\"pts_diff\"] = bengals_home[\"score_home\"] - bengals_home[\"score_away\"]\nbengals_away[\"pts_diff\"] = bengals_away[\"score_away\"] - bengals_away[\"score_home\"]\n\ndisplay(bengals_home.head(), bengals_away.head())","791e4d87":"# out 337 home games, bengals are favored in 183\nbengals_favored_home = bengals_home.loc[bengals_home[\"team_favorite_id\"] == \"CIN\"]\ndisplay(bengals_favored_home.head(), bengals_favored_home.shape)","aebd6f3d":"# out of 337 away games, bengals are favored in 81 of them\nbengals_favored_away = bengals_away.loc[bengals_away[\"team_favorite_id\"] == \"CIN\"]\ndisplay(bengals_favored_away.head(), bengals_favored_away.shape)","9f114881":"# how often do the bengals cover when they're favored at home\nbengals_covered_hm = bengals_favored_home.pts_diff > abs(bengals_favored_home.spread_favorite)\nbengals_pushed_hm = bengals_favored_home.pts_diff == abs(bengals_favored_home.spread_favorite)\nbengals_covered_hm.sum(), bengals_pushed_hm.sum()\n","80be3892":"# how often do the bengals cover when they're favored on the road\nbengals_covered_rd = bengals_favored_away.pts_diff > abs(bengals_favored_away.spread_favorite)\nbengals_pushed_rd = bengals_favored_away.pts_diff == abs(bengals_favored_away.spread_favorite)\nbengals_covered_rd.sum(), bengals_pushed_rd.sum()","01ea1244":"bengals_favored = pd.concat([bengals_favored_home, bengals_favored_away], ignore_index = True)\n# creating summary statistics for Colts games\nbengals_hm = bengals_home.shape[0], bengals_favored_home.shape[0], bengals_covered_hm.sum(), bengals_pushed_hm.sum()\nbengals_awy = bengals_away.shape[0], bengals_favored_away.shape[0], bengals_covered_rd.sum(), bengals_pushed_rd.sum()\ntotal = bengals_scores.shape [0], bengals_favored.shape[0], (bengals_covered_hm.sum() + bengals_covered_rd.sum()), (bengals_pushed_hm.sum() + bengals_pushed_rd.sum())\n\n\n# creating summary table for games that colts were favored in:\nd_bengals_fav = {\n    \"Bengals Home\" : pd.Series(bengals_hm, index = [\"Total Games\", \"Favored\", \"Covered\", \"Pushed\"]),\n    \"Bengals Away\" : pd.Series(bengals_awy, index = [\"Total Games\", \"Favored\", \"Covered\", \"Pushed\"]),\n    \"Total\" : pd.Series(total, index = [\"Total Games\", \"Favored\", \"Covered\", \"Pushed\"])\n}\n\ncovered_sum = pd.DataFrame(d_bengals_fav)\ncovered_sum","0dce444e":"# getting 2011-2020 seasons\nbengals_home, bengals_away = get_team_games(\"Bengals\", scores_with_fav)\nbengals_home = bengals_home.loc[bengals_home.schedule_season > 2015]\nbengals_away = bengals_away.loc[bengals_away.schedule_season > 2015]\nbengals_away.head()","9d9d1364":"# creating summary table for the bengals\nbengals_avg = (bengals_home.score_home.mean() + bengals_away.score_away.mean())\/2\nopponent_avg = (bengals_home.score_away.mean()+ bengals_away.score_home.mean())\/2\nbengals_summary = round(bengals_home.score_home.mean(), 2), round(bengals_away.score_away.mean(), 2), round(bengals_avg, 2)\nopponent_summary = round(bengals_home.score_away.mean(), 2), round(bengals_away.score_home.mean(), 2), round(opponent_avg, 2)\n\nbengals_dict = {\n    \"Bengals\": pd.Series(bengals_summary, index = [\"Home\", \"Away\", \"Avg\"]), \n    \"Opponent\": pd.Series(opponent_summary, index = [\"Home\", \"Away\", \"Avg\"])\n}\nbengals_sum_table = pd.DataFrame(bengals_dict)\nbengals_sum_table","bccb2fb0":"bengals_sum_table.plot(kind = \"barh\", figsize = (10,8), color = ['#FC6A03', 'black'])\nplt.title(\"Points Scored in Bengals Games (2016-2020)\", fontsize = 16, fontweight = 'bold')","9d894753":"## Bengals Analysis","fe811720":"# Conclusion\n\nBetting on either the Colts or the Bengals when they are favored would be a losing proposition, becuase neither of these teams have covered in more than half of such games.  This seems to be even more true for the lowly Bengals.  The Colts have covered in 48% of all games that they have been favored in, while the Bengals have only covered 46% of games they have been favored in.\n\nOver the past 5 years, the Bengals have had a rough stretch.  They have not had a single winning season while losing by an average of almost 5 points a game (including losing by an average of 6.58 points a game on the road).  \n\nThe Colts have been relatively decent over the past 5 years, posting 2 winning seasons and one 8-8 season.  Over the same 5 year time frame they have been winning games by an average of 0.5 points per game.","6c091a6b":"## Colts Analysis (2016-2020)\nLet's analyze statistics from the past 10 years, 2011-2020.  Spefically, I'm going to focus on the average amount of points\nper game scored when the Colts are at home and when they are on the road.","956b2478":"## Bengals Analysis (2016-2020)","7f2b9045":"## Colts Analysis"}}