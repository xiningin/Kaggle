{"cell_type":{"828a60f2":"code","f61cab14":"code","b35c8ab9":"code","b7cb971f":"code","f7dc6f72":"code","7e450c9f":"code","48c0a430":"code","a5b9ebaa":"code","26db4536":"code","c0c2b7ac":"code","0188df7f":"code","051f7248":"code","efcde0fa":"code","1e75b9f1":"code","b40cbe04":"code","d68c839b":"code","31c551b1":"code","344977f3":"code","24b2530e":"code","a43b199d":"code","2ee8a8f9":"code","746086f9":"code","d0ed7ed1":"code","eb525de2":"code","01239406":"code","0ec7c1ee":"code","cdf4ec65":"code","b00f134a":"code","f9c21119":"code","c619e1b5":"code","b022b8e6":"code","ad41c455":"markdown","27984a65":"markdown","3dcb1e1a":"markdown","39166bab":"markdown","d66a9562":"markdown","41ac2217":"markdown","7d2e087e":"markdown"},"source":{"828a60f2":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","f61cab14":"train0 = pd.read_csv(\"..\/input\/automobile-customer\/train-set.csv\")\ntest0 = pd.read_csv(\"..\/input\/automobile-customer\/test-set.csv\")","b35c8ab9":"train0","b7cb971f":"print(train0['Segmentation'].unique().tolist())\nprint(train0['Profession'].unique().tolist())\nName=train0['Profession'].unique().tolist()","f7dc6f72":"print(len(train0))\nprint(len(test0))\nn=len(train0)","7e450c9f":"data=pd.concat([train0,test0])","48c0a430":"df=data\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","a5b9ebaa":"train1=df.iloc[0:n]\ntest1=df.iloc[n:]","26db4536":"print(train1['Segmentation'].unique().tolist())\nprint(train1['Profession'].unique().tolist())\nN=train1['Profession'].unique().tolist()","c0c2b7ac":"normal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","0188df7f":"print(train1.columns.tolist())\nprint(test1.columns.tolist())","051f7248":"trainY = train1['Segmentation']\ntrainX = train1.drop(['Segmentation','CustomerID'],axis=1)\ntestX = test1.drop(['Segmentation','CustomerID'],axis=1)","efcde0fa":"df_columns = list(trainX.columns)\nprint(df_columns)","1e75b9f1":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","b40cbe04":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","d68c839b":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","31c551b1":"train_feat_df = to_feature(trainX)\ntest_feat_df = to_feature(testX)","344977f3":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","24b2530e":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","a43b199d":"y = trainY\nprint(y.shape)","2ee8a8f9":"ydf=pd.DataFrame(y)\nydf","746086f9":"target=['Segmentation']","d0ed7ed1":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Train Predicted '+target[i],fontsize=12)\n    ax.set_xlabel('Train Actual '+target[i],fontsize=12)\n    ax.scatter(y,oof)","eb525de2":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","01239406":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","0ec7c1ee":"preds = models[4].predict(test_feat_df.values)","cdf4ec65":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(preds, label='Test Predicted '+target[0], ax=ax, color='black',bins=20)\nsns.histplot(oof, label='Train Predicted '+target[0], ax=ax, color='C1',bins=20)\nax.legend()\nax.grid()","b00f134a":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Age vs Segmentation',fontsize=20)\nax.set_xlabel('Train Actual Segmentation',fontsize=12)\nax.set_ylabel('Train Actual Age',fontsize=12)\nax.scatter(train1['Segmentation'],train1['Age'],)","f9c21119":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Profession vs Segmentation',fontsize=20)\nax.set_xlabel('Train Actual Segmentation',fontsize=12)\nax.set_ylabel('Train Actual Profession',fontsize=12)\nax.scatter(train1['Segmentation'],train1['Profession'],)","c619e1b5":"# profession\nprint(pd.Series([0,1,2,3,4,5,6,7,8,9]).map(reverse_mapping).tolist())","b022b8e6":"g=sns.jointplot(data=train1,x='Age',y='Profession',hue=\"Segmentation\",kind=\"kde\")\ng.fig.set_size_inches(13,13)","ad41c455":"## Jointplot of Age and Profession","27984a65":"#### Variable description\n* CustomerID : unique customer ID\n* Gender : gender of the customer\n* Married : marital status of the customer\n* Age : age of the customer\n* Graduated : specifies whether the customer a graduate?\n* Profession : profession of the customer\n* WorkExperience : work experience of the customer in years\n* SpendingScore : spending score of the customer\n* FamilySize : number of family members of the customer (including the customer)\n* Category : anonymised category for the customer\n* Segmentation : (target variable) customer segment of the customer","3dcb1e1a":"# Model","39166bab":"## Importance No.2, Profession","d66a9562":"# Data preparation","41ac2217":"# Visualize Importance","7d2e087e":"## Importance No.1, Age"}}