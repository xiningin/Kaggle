{"cell_type":{"162c20d1":"code","5dce4538":"code","1ae1d97a":"code","412b1ca9":"code","10a400fe":"code","b7f03891":"code","0bb9505c":"code","3417ffb1":"code","00e30ec4":"code","8da86255":"code","f986b30f":"code","5c131f89":"code","157540b1":"code","64e56fcc":"code","3d7587f6":"code","da1a09c9":"code","169dd5c1":"code","9aa27fd8":"code","81465294":"code","69bdce9d":"code","94dde9b7":"code","618bb02c":"code","77a1496c":"code","978800c7":"code","39d5247a":"code","54fe8361":"code","9e90da13":"code","aff3adbf":"code","8e1122c4":"code","1fdc83ea":"code","5fd5737c":"code","30c97841":"code","99c5ce63":"code","c25c1cfb":"code","87a92040":"code","68d57397":"code","a6f0688c":"code","62d521b2":"code","def6b49d":"code","2133a8cf":"code","179b3b93":"code","50f13ef9":"code","7995df3f":"code","ca645594":"code","23878b4d":"code","43b7eca9":"code","263817a1":"code","f433de55":"code","e5c81d48":"code","4ef3836a":"code","f3c98be7":"code","ae7674c1":"code","237c9514":"code","f292dfa0":"markdown","660fbac3":"markdown","a971f875":"markdown","f5b28f84":"markdown","00a9e83d":"markdown","e4996fa6":"markdown","63dbe217":"markdown","fccd1cfc":"markdown","5e135458":"markdown"},"source":{"162c20d1":"import pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nprint(\"Priyatama is ready!\")","5dce4538":"data = pd.read_csv('..\/input\/customer-churn-prediction-2020\/train.csv')","1ae1d97a":"data.head()","412b1ca9":"data.shape","10a400fe":"sns.heatmap(data.isnull())","b7f03891":"data.isnull().sum().any()","0bb9505c":"data.dtypes","3417ffb1":"data.state.unique()","00e30ec4":"data.state.value_counts().plot(kind='bar')","8da86255":"data.account_length.nunique()","f986b30f":"data.area_code.nunique()","5c131f89":"data.international_plan.value_counts().plot(kind = 'pie')","157540b1":"data.voice_mail_plan.value_counts().plot(kind = 'pie')","64e56fcc":"sns.barplot(x=data.voice_mail_plan, y =data.number_vmail_messages, estimator=sum)","3d7587f6":"data.number_customer_service_calls.value_counts().plot(kind = 'barh')","da1a09c9":"churn_y = data.loc[data.churn == 'yes', 'churn'].count()\r\nchurn_n = data.loc[data.churn == 'no', 'churn'].count()\r\nchurn_total =churn_n+churn_y\r\nprint('The total customers are '+ str(churn_total))\r\nprint('Total Churned customers are '+ str(churn_y) +' which is '+ str(round(100*churn_y\/churn_total,0)) +'%' )\r\nprint('Total non-Churned customers are '+ str(churn_n) +' which is '+ str(round(100*churn_n\/churn_total,0)) +'%' )","169dd5c1":"fig, ax=plt.subplots(figsize=(20,5))\r\nsns.countplot(data = data, x='state', order=data['state'].value_counts().index, palette='viridis', hue='churn')\r\nplt.xticks(rotation=90)\r\nplt.xlabel('State', fontsize=10, fontweight='bold')\r\nplt.ylabel('Customers', fontsize=10, fontweight='bold')\r\nplt.title('State wise Customers', fontsize=12, fontweight='bold')\r\nplt.show()","9aa27fd8":"fig2, ax=plt.subplots(figsize=(15,5))\r\nsns.countplot(data = data, x='area_code', order=data['area_code'].value_counts().index, palette='viridis', hue='churn')\r\nplt.xlabel('Area Code', fontsize=10, fontweight='bold')\r\nplt.ylabel('Customers', fontsize=10, fontweight='bold')\r\nplt.title('Area Code wise Customers', fontsize=12, fontweight='bold')\r\nplt.show()","81465294":"fig3, ax=plt.subplots(figsize=(15,5))\r\nsns.scatterplot(data = data, x='total_day_calls',y='total_day_charge' , palette='viridis')\r\nplt.xlabel('Total Day Calls', fontsize=10, fontweight='bold')\r\nplt.ylabel('Total Day Charge', fontsize=10, fontweight='bold')\r\nplt.title('Day charge v\/s Calls', fontsize=12, fontweight='bold')\r\nplt.show()","69bdce9d":"data[data.total_day_calls==0]","94dde9b7":"data2 = data.drop([1138,1183])\r\ndata2[data2.total_day_calls==0]","618bb02c":"data2.describe()","77a1496c":"data3 = data2.groupby(['area_code','churn']).agg({'number_customer_service_calls': 'sum', 'state':'count'}).reset_index() \r\ndata3['Average Calls'] = data3['number_customer_service_calls']\/data3['state']\r\ndata3.rename(columns={'state':'Count of Customers','number_customer_service_calls':'Number of Customer Service Calls'}, \r\n                inplace=True)\r\ndata3","978800c7":"data4 = data2.groupby(['voice_mail_plan','churn']).agg({'state': 'count'}).reset_index()\r\ndata4","39d5247a":"#Create columns with rate of calls, so call charge columns could be dropped as they are corelated.\r\ndata2['day_rate'] = data2['total_day_charge']\/data2['total_day_minutes']\r\ndata2['eve_rate'] = data2['total_eve_charge']\/data2['total_eve_minutes']\r\ndata2['night_rate'] = data2['total_night_charge']\/data2['total_night_minutes']\r\ndata2['intl_rate'] = data2['total_intl_charge']\/data2['total_intl_minutes']","54fe8361":"data2.drop({'total_day_charge','total_eve_charge','total_night_charge','total_intl_charge'},axis=1,inplace= True)","9e90da13":"data2.dropna(inplace=True)","aff3adbf":"X0=data2.drop('churn', axis=1)\r\ny= data2.churn","8e1122c4":"X0.columns","1fdc83ea":"X0.drop({'voice_mail_plan'},axis=1,inplace= True)","5fd5737c":"X0.isnull().sum().any()","30c97841":"X0.isnull().sum().any()","99c5ce63":"corr = X0.corr()\r\nfig4, ax = plt.subplots(figsize=(15,7))\r\nsns.heatmap(corr,\r\n            xticklabels=corr.columns.values,\r\n            yticklabels=corr.columns.values,\r\n            annot=True,cmap=\"YlGnBu\",annot_kws={'size': 12},fmt=\".2f\")\r\n\r\n'''Various String Foratter-\r\n.1e = scientific notation with 1 decimal point (standard form)\r\n\r\n.2f = 2 decimal places\r\n\r\n.3g = 3 significant figures\r\n\r\n.4% = percentage with 4 decimal places\r\n\r\nA more detailed explanation on the python string formatter can be found here: \r\nhttps:\/\/docs.python.org\/3\/library\/string.html?highlight=string#formatspec '''","c25c1cfb":"X0.dtypes","87a92040":"X1= pd.get_dummies(X0, drop_first = True)\r\nX1.shape","68d57397":"from sklearn.model_selection import train_test_split\r\n\r\nfrom sklearn.model_selection import cross_val_score","a6f0688c":"X_train, X_valid, y_train, y_valid = train_test_split(X1, y, train_size=0.80,test_size=0.20,random_state=1)","62d521b2":"print(X_train.isnull().sum().any())\r\nprint(X_valid.isnull().sum().any())\r\nprint(y_train.isnull().sum().any())\r\nprint(y_valid.isnull().sum().any())","def6b49d":"from sklearn.metrics import f1_score,confusion_matrix\r\nfrom sklearn.metrics import accuracy_score","2133a8cf":"X_train.head(3)","179b3b93":"from sklearn.ensemble import RandomForestClassifier\r\nclf_rf = RandomForestClassifier(n_estimators=20 ,random_state=43)      \r\nclr_rf = clf_rf.fit(X_train,y_train)\r\n\r\nac = accuracy_score(y_valid,clf_rf.predict(X_valid))\r\nprint('Accuracy is: ',int(ac*100),\" %\")\r\ncm = confusion_matrix(y_valid,clf_rf.predict(X_valid))\r\nsns.heatmap(cm,annot=True,fmt=\"d\")","50f13ef9":"from sklearn.feature_selection import SelectKBest\r\nfrom sklearn.feature_selection import chi2\r\n# find best scored 5 features\r\nselect_feature = SelectKBest(chi2, k=5).fit(X_valid, y_valid)\r\na = select_feature.scores_\r\nb = X_train.columns\r\ndf = pd.DataFrame(list(zip(b, a)),\r\n               columns =['Column', 'Score'])\r\ndf.dtypes","7995df3f":"df['Score'] = df['Score'].replace(np.nan, 0)\r\ndf['Score'] = df['Score'].astype(int)\r\ndf.sort_values(by='Score',ascending=False)","ca645594":"y_pred=clf_rf.predict(X1)","23878b4d":"test0=pd.read_csv('..\/input\/customer-churn-prediction-2020\/test.csv')\r\ntest0.head()","43b7eca9":"test=test0.copy()","263817a1":"test['day_rate'] = test['total_day_charge']\/test['total_day_minutes']\r\ntest['eve_rate'] = test['total_eve_charge']\/test['total_eve_minutes']\r\ntest['night_rate'] = test['total_night_charge']\/test['total_night_minutes']\r\ntest['intl_rate'] = test['total_intl_charge']\/test['total_intl_minutes']","f433de55":"test.drop({'id','total_day_charge','total_eve_charge','total_night_charge','total_intl_charge','voice_mail_plan'},axis=1,inplace= True)\r\ntest1= pd.get_dummies(test, drop_first = True)","e5c81d48":"a = (test1.isnull().sum())\r\nprint(a[a>0])","4ef3836a":"test1.fillna(0,inplace=True)","f3c98be7":"results =clf_rf.predict(test1)","ae7674c1":"submission = pd.DataFrame({\r\n        \"id\": test0[\"id\"],\r\n        \"churn\": results\r\n    })\r\n\r\nsubmission.to_csv('submission.csv', index=False)\r\n","237c9514":"submission.shape","f292dfa0":"# 5. Model Designing.","660fbac3":"# 6. Generate Submission.","a971f875":"# 1. Setting up the environment.","f5b28f84":"#3. Exploratory data analysis.","00a9e83d":"### Plot statewise customers.","e4996fa6":"# 2. Reading the dataset.","63dbe217":"# 4. Feature engineering.","fccd1cfc":"### So, there ar no outliers with no voice mail plan having voicemail messages.","5e135458":"### Since there are only 3 categrical values in this column, turning them in to int could lead to variation in result, so we will use them as categorical values only."}}