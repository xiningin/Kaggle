{"cell_type":{"be89765f":"code","ddd7da9d":"code","3fe9d583":"code","a8312ccb":"code","5c2f477e":"code","94907dc8":"code","8cac64af":"code","28793987":"code","9984c5ef":"code","754ab016":"code","eab7be51":"code","d7a51bd7":"code","6820ddc4":"code","e147dfa5":"code","c33ea1a5":"code","939a1d8b":"code","1e752832":"code","6333b482":"code","af7e9875":"code","81316591":"code","617f8dfc":"code","1b41ff94":"code","1d327130":"code","4f5a69c4":"code","e9c5af40":"code","67d25363":"code","76026637":"code","6a57b764":"code","785cbb83":"code","cb894695":"code","aa881930":"code","1285d461":"code","7500cbf6":"code","3a3c8c2f":"code","5a95db0b":"code","a0705629":"code","715298b2":"code","3c12c62b":"code","822aadbd":"code","69f3a099":"code","7da049ee":"code","2ce32323":"code","c0568b96":"code","cfec0141":"code","cf67eb5b":"code","1d6249c4":"code","26cbf63b":"code","da1d30c0":"code","eb7ee0bd":"code","cad3cfac":"code","9bad0801":"code","994e4eb5":"code","89f5d252":"markdown","79c0f527":"markdown","c453f2b3":"markdown","a65319d2":"markdown","47f129a8":"markdown","f3378067":"markdown","2c47452d":"markdown","878e3561":"markdown","25c5c179":"markdown","290bbe84":"markdown","045b156d":"markdown","fe726e6f":"markdown","5632c8f2":"markdown"},"source":{"be89765f":"import pandas as pd\nimport os\nimport email\nimport email.policy\nfrom bs4 import BeautifulSoup\nimport regex as re\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, roc_auc_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","ddd7da9d":"ham_files = os.listdir('\/kaggle\/input\/ham-and-spam-dataset\/ham\/')\nprint(\"Number of ham files:\", len(ham_files))\n\nspam_files = os.listdir('\/kaggle\/input\/ham-and-spam-dataset\/spam\/')\nprint(\"Number of spam files:\", len(spam_files))\n\nprint(\"Precentage of spam files:\", round(len(spam_files)*100\/(len(ham_files)+len(spam_files)), 2))","3fe9d583":"#first ham file\nwith open(os.path.join('\/kaggle\/input\/ham-and-spam-dataset\/ham\/', ham_files[0]), 'rb') as file:\n    email_ham = email.parser.BytesParser(policy=email.policy.default).parse(file) \n    print(email_ham)","a8312ccb":"print(\"Email headers:\", email_ham.keys(), '\\n')\nprint(\"Header values:\", email_ham.values(), '\\n')\nprint(\"Content:\", email_ham.get_content().strip())","5c2f477e":"print(email_ham.get_all('Subject'))\nprint(email_ham.get_all('From'))\nprint(email_ham.get_all('To'))","94907dc8":"def load_email(path, filename):\n    with open(os.path.join(path, filename), 'rb') as file:\n          email_file = email.parser.BytesParser(policy=email.policy.default).parse(file)\n    return email_file","8cac64af":"ham_emails = [load_email('\/kaggle\/input\/ham-and-spam-dataset\/ham\/', filename) for filename in ham_files]\nspam_emails = [load_email('\/kaggle\/input\/ham-and-spam-dataset\/spam\/', filename) for filename in spam_files]","28793987":"print(\"Ham email subject:\", ham_emails[0].get_all('Subject'), \"\\n\")\nprint(\"Ham email content:\", ham_emails[0].get_content().strip())","9984c5ef":"print(\"Spam email subject:\", spam_emails[5].get_all('Subject'), \"\\n\")\nprint(\"Spam email content:\", spam_emails[5].get_content().strip())","754ab016":"ham_email_types = []\nspam_email_types = []\n\nfor i in range(len(ham_files)):\n    ham_email_types.append(ham_emails[i].get_content_type())\nprint(\"Ham content type:\", set(ham_email_types), \"\\n\")\n\nfor i in range(len(spam_files)):\n    spam_email_types.append(spam_emails[i].get_content_type())\nprint(\"Spam content type:\", set(spam_email_types), \"\\n\")","eab7be51":"def email_content_type(email):\n    payload = email.get_payload()\n    if isinstance(payload, list):\n        return \"multipart({})\".format(\", \".join([email_content_type(sub_email) for sub_email in payload]))\n    else:\n        return email.get_content_type()","d7a51bd7":"ham_types = {}\n\nfor i in range(len(ham_files)):\n    ham_email_type = email_content_type(ham_emails[i])\n    if ham_email_type in ham_types:\n        ham_types[ham_email_type] += 1\n    else: \n        ham_types[ham_email_type] = 1\n        \nsorted(ham_types.items(), key=lambda x: x[1], reverse=True)","6820ddc4":"spam_types = {}\n\nfor i in range(len(spam_files)):\n    spam_email_type = email_content_type(spam_emails[i])\n    if spam_email_type in spam_types:\n        spam_types[spam_email_type] += 1\n    else: \n        spam_types[spam_email_type] = 1\n        \nsorted(spam_types.items(), key=lambda x: x[1], reverse=True)","e147dfa5":"for email in spam_emails:\n    if email_content_type(email) == \"text\/html\":\n        spam_html_email = email\n        break\n        \nprint(spam_html_email.get_content())","c33ea1a5":"def html_to_plain_text(email):\n    try:\n        soup = BeautifulSoup(email.get_content(), 'html.parser')\n        return soup.text.replace('\\n\\n','')\n    except:\n        return None\n\nprint(html_to_plain_text(spam_html_email))","939a1d8b":"def email_to_plain_text(email):\n    \n    #the walk() method is an all-purpose generator which can be used to iterate over all the parts and subparts \n    #of a message object tree, in depth-first traversal order.\n    for part in email.walk():\n        part_content_type = part.get_content_type()\n        \n        #only using plain text and html emails for our tasks\n        if part_content_type not in ['text\/plain','text\/html']:\n            continue\n            \n        try: \n            part_content = part.get_content()\n        except:\n            part_content = str(part.get_payload())\n            \n        if part_content_type == \"text\/plain\":\n            return part_content\n        else:\n            return html_to_plain_text(part)","1e752832":"email_1 = email_to_plain_text(spam_emails[1])\nprint(email_1.strip())","6333b482":"email_2 = email_to_plain_text(spam_emails[70])\nprint(email_2.strip())","af7e9875":"ham_df = []\n\nfor i in range(len(ham_emails)):\n    ham_df.append(email_to_plain_text(ham_emails[i]))\nham_df = pd.DataFrame(ham_df, columns = ['Content'])\nham_df['Label'] = 0\n\nham_df.head()","81316591":"spam_df = []\n\nfor i in range(len(spam_emails)):\n    spam_df.append(email_to_plain_text(spam_emails[i]))\nspam_df = pd.DataFrame(spam_df, columns = ['Content'])\nspam_df['Label'] = 1\n\nspam_df.head()","617f8dfc":"df = pd.concat([ham_df,spam_df], axis=0)\ndf.head()","1b41ff94":"df = df.dropna()\ndf = df.sample(frac=1).reset_index(drop=True)\ndf.head(10)","1d327130":"for i in range(len(df)):\n    df['Content'][i] = re.sub(r\"[^a-zA-Z0-9]+\", ' ', df['Content'][i])\ndf.head(10)","4f5a69c4":"def input_preprocessing(email):\n    email = re.sub(r\"[^a-zA-Z0-9]+\", ' ', email)\n    return email","e9c5af40":"sss = StratifiedShuffleSplit(n_splits=2, test_size=0.2, random_state=101)\n\nfor train_index, test_index in sss.split(df['Content'], df['Label']):\n    X_train, X_test = df['Content'][train_index], df['Content'][test_index]\n    y_train, y_test = df['Label'][train_index], df['Label'][test_index]   ","67d25363":"print(\"Length of training set:\", len(X_train), \",\", len(y_train))\nprint(\"Length of test set:\", len(X_test), \",\", len(y_test))","76026637":"pipe = make_pipeline(CountVectorizer(min_df=4), LogisticRegression(max_iter=1000))\nparam_grid = {\"logisticregression__C\":[0.1,1,10,100], \"countvectorizer__ngram_range\":[(1,2),(1,3),(2,2)]}\ngrid = GridSearchCV(pipe, param_grid, cv=5)\ngrid.fit(X_train, y_train)","6a57b764":"print(\"Best cross validation score: {}\".format(grid.best_score_))\nprint(\"Best parameters: {}\".format(grid.best_params_))","785cbb83":"vect = CountVectorizer(min_df=4, ngram_range=[1,3])\n\nX_train_vectorized = vect.fit_transform(X_train)\nX_test_vectorized = vect.transform(X_test)\n\nclf = LogisticRegression(C=1, max_iter=1000).fit(X_train_vectorized, y_train)\ny_predicted = clf.predict(X_test_vectorized)\n                                            ","cb894695":"print(\"Precision: {}\".format(100 * precision_score(y_test, y_predicted)))\nprint(\"Recall: {}\".format(100 * recall_score(y_test, y_predicted)))\nprint(\"Accuracy: {}\".format(100 * accuracy_score(y_test, y_predicted)))\nprint(\"AUC Score: {}\".format(100 * roc_auc_score(y_test, y_predicted)))","aa881930":"pipe = make_pipeline(TfidfVectorizer(min_df=4), LogisticRegression(max_iter=1000))\nparam_grid = {\"logisticregression__C\":[0.1,1,10,100], \"tfidfvectorizer__ngram_range\":[(1,2),(1,3),(2,2)]}\ngrid = GridSearchCV(pipe, param_grid, cv=5)\ngrid.fit(X_train, y_train)","1285d461":"print(\"Best cross validation score: {}\".format(grid.best_score_))\nprint(\"Best parameters: {}\".format(grid.best_params_))","7500cbf6":"vect = TfidfVectorizer(min_df=4, ngram_range=[1,3])\n\nX_train_vectorized = vect.fit_transform(X_train)\nX_test_vectorized = vect.transform(X_test)\n\nclf = LogisticRegression(C=100, max_iter=1000).fit(X_train_vectorized, y_train)\ny_predicted = clf.predict(X_test_vectorized)","3a3c8c2f":"print(\"Precision: {}\".format(100 * precision_score(y_test, y_predicted)))\nprint(\"Recall: {}\".format(100 * recall_score(y_test, y_predicted)))\nprint(\"Accuracy: {}\".format(100 * accuracy_score(y_test, y_predicted)))\nprint(\"AUC Score: {}\".format(100 * roc_auc_score(y_test, y_predicted)))","5a95db0b":"pipe = make_pipeline(CountVectorizer(min_df=4), MultinomialNB())\nparam_grid = {\"countvectorizer__ngram_range\":[(1,2),(1,3),(2,2)]}\ngrid = GridSearchCV(pipe, param_grid, cv=5)\ngrid.fit(X_train, y_train)","a0705629":"print(\"Best cross validation score: {}\".format(grid.best_score_))\nprint(\"Best parameters: {}\".format(grid.best_params_))","715298b2":"vect = CountVectorizer(min_df=4, ngram_range=[1,2])\n\nX_train_vectorized = vect.fit_transform(X_train)\nX_test_vectorized = vect.transform(X_test)\n\nclf = MultinomialNB().fit(X_train_vectorized, y_train)\ny_predicted = clf.predict(X_test_vectorized)","3c12c62b":"print(\"Precision: {}\".format(100 * precision_score(y_test, y_predicted)))\nprint(\"Recall: {}\".format(100 * recall_score(y_test, y_predicted)))\nprint(\"Accuracy: {}\".format(100 * accuracy_score(y_test, y_predicted)))\nprint(\"AUC Score: {}\".format(100 * roc_auc_score(y_test, y_predicted)))","822aadbd":"pipe = make_pipeline(TfidfVectorizer(min_df=4), MultinomialNB())\nparam_grid = {\"tfidfvectorizer__ngram_range\":[(1,2),(1,3),(2,2)]}\ngrid = GridSearchCV(pipe, param_grid, cv=5)\ngrid.fit(X_train, y_train)","69f3a099":"print(\"Best cross validation score: {}\".format(grid.best_score_))\nprint(\"Best parameters: {}\".format(grid.best_params_))","7da049ee":"vect = TfidfVectorizer(min_df=4, ngram_range=[2,2])\n\nX_train_vectorized = vect.fit_transform(X_train)\nX_test_vectorized = vect.transform(X_test)\n\nclf = MultinomialNB().fit(X_train_vectorized, y_train)\ny_predicted = clf.predict(X_test_vectorized)","2ce32323":"print(\"Precision: {}\".format(100 * precision_score(y_test, y_predicted)))\nprint(\"Recall: {}\".format(100 * recall_score(y_test, y_predicted)))\nprint(\"Accuracy: {}\".format(100 * accuracy_score(y_test, y_predicted)))\nprint(\"AUC Score: {}\".format(100 * roc_auc_score(y_test, y_predicted)))","c0568b96":"pipe = make_pipeline(CountVectorizer(min_df=4), MultinomialNB())\nparam_grid = {\"countvectorizer__ngram_range\":[(1,2),(1,3),(2,2)]}\ngrid = GridSearchCV(pipe, param_grid, cv=5)\ngrid.fit(X_train, y_train)\n\nvect = CountVectorizer(min_df=4, ngram_range=[1,2])\n\nX_train_vectorized = vect.fit_transform(X_train)\nX_test_vectorized = vect.transform(X_test)\n\nclf = MultinomialNB().fit(X_train_vectorized, y_train)\ny_predicted = clf.predict(X_test_vectorized)\n\nprint(\"Precision: {}\".format(100 * precision_score(y_test, y_predicted)))\nprint(\"Recall: {}\".format(100 * recall_score(y_test, y_predicted)))\nprint(\"Accuracy: {}\".format(100 * accuracy_score(y_test, y_predicted)))\nprint(\"AUC Score: {}\".format(100 * roc_auc_score(y_test, y_predicted)))","cfec0141":"cn_matrix = confusion_matrix(y_test, y_predicted)\ncn_matrix","cf67eb5b":"matrix_df = pd.DataFrame(cn_matrix, index=[\"Ham\", \"Spam\"], columns=[\"Ham\", \"Spam\"])","1d6249c4":"df = matrix_df.astype('float')\/matrix_df.sum(axis=1)[:, np.newaxis]\nsns.heatmap(df, annot=True)\nplt.show()","26cbf63b":"email = [\"My Dear Good Friend. May i use this medium to open a mutual communication with you seeking your acceptance towards  investing in your country under your management as my partner, My name is Aisha  Gaddafi and  presently living in Oman, i am a Widow and single Mother with three Children, the only biological  Daughter of late Libyan President (Late Colonel Muammar Gaddafi) and presently i am under political  asylum protection by the Omani Government. Please Reply me in my box. (aishagaddafi7710@gmail.com). I have funds worth Twenty Seven Million Five Hundred Thousand United State Dollars,$27.500.000.00 US Dollars which i want to entrust to you for investment projects in your country. If you are willing to handle this project on my behalf, kindly reply urgent to enable me provide you more  details to start the transfer process, I shall appreciate your urgent response through my email address. Below : (aishagaddafi7710@gmail.com). Best Regards. Mrs Aisha.\"]\nemail[0] = input_preprocessing(email[0])\nemail","da1d30c0":"email = vect.transform(email)\nprediction = clf.predict(email)\nprediction","eb7ee0bd":"if prediction == 0:\n    print(\"Email is not spam.\")\nelse:\n    print(\"Email is spam.\")","cad3cfac":"email = [\"Hello Edward, I just wanted to update you about our upcoming meeting. The meeting has been resceduled by the client to 9:00 pm EST instead of 7:30 pm EST. Thank you! John\"]\nemail[0] = input_preprocessing(email[0])\nemail","9bad0801":"email = vect.transform(email)\nprediction = clf.predict(email)\nprediction","994e4eb5":"if prediction == 0:\n    print(\"Email is not spam.\")\nelse:\n    print(\"Email is spam.\")","89f5d252":"## Logistic Regression with Tfidf Vectorizer","79c0f527":"## Final Model\n\nBased on the precision, recall, accuracy and AUC score I have chosen Multinomial Naive Bayes with Count Vectorizer as my final model.","c453f2b3":"## Multinomial Naive Bayes with Tfidf Vectorizer","a65319d2":"## Multinomial Naive Bayes with Count Vectorizer","47f129a8":"## Input pre-processing","f3378067":"## Logistic Regression with Count Vectorizer","2c47452d":"## Building Dataset","878e3561":"## Different types of email present in the dataset","25c5c179":"## Converting html emails to plain text","290bbe84":"## Test train split","045b156d":"## Model Testing","fe726e6f":"## Email Loading","5632c8f2":"## Importing Libraries"}}