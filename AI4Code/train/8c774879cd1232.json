{"cell_type":{"f7edb0ba":"code","5e41a8e7":"code","48c04668":"code","0daabd2a":"code","91eb54da":"code","797d49b5":"code","57ac347b":"code","0d0c7b3a":"code","d8d96c6b":"code","cf27a6ce":"code","162a1922":"code","40f0a93b":"code","227ce329":"code","372eaedc":"code","8ccd6454":"code","6456fc64":"code","ce9d7b33":"code","a9a55f44":"code","48a9f476":"code","c931ae18":"code","fa01ed9b":"code","aafeafea":"code","52eb0a1f":"code","2c84944c":"code","b5cf455b":"code","ec364277":"code","14e8d9c3":"code","c868b3e6":"code","ce976762":"code","992a3a41":"code","56a8f48c":"code","c7c359cc":"code","cc6b4a2e":"code","8083d03c":"code","ad58228b":"code","17733c86":"code","cdd44a5b":"code","02ef229d":"code","06ce546b":"code","0039e9ea":"code","7c3d47fc":"code","3812676b":"code","bdd7e1b1":"code","2cab7879":"code","6f67caca":"code","cbeec830":"code","a5e162c2":"code","71695877":"code","1dea716d":"code","d23c6070":"code","3355b0ff":"code","e977dbc4":"code","1174e284":"code","92afbcef":"code","6e485749":"code","14cb6912":"code","07f1652a":"code","687b4d8f":"code","41532a89":"code","3c85acd3":"code","1ba98af7":"code","29d21578":"code","3e7be6e2":"code","71fd4087":"code","184a6de2":"code","ba530893":"code","08576621":"code","83d1cda3":"code","0aba07c6":"code","6027f879":"code","28a97077":"code","75393b5f":"code","ac9e27d3":"code","8724f88f":"code","8508d32f":"code","465ffb97":"code","9c2beaf7":"code","b6f88eab":"code","877f1254":"code","f44a190b":"code","cde27b5b":"code","9f551638":"code","358533ab":"code","34be1dc6":"code","dc9c0c99":"code","b5b72d25":"code","e5194356":"code","b3cff99c":"code","bc404e8c":"code","8b9894c6":"code","dbb278a9":"code","adcfe855":"code","e486380e":"code","bad0b9a9":"code","fc61c766":"code","9eaefd2a":"code","790aed39":"code","70877989":"code","637ae3ad":"code","b7e01168":"code","d0abb1f5":"code","875384c5":"code","505604c7":"code","e2541307":"code","aafa3af0":"code","90dd9b7a":"code","8b4bcfec":"code","240ffca3":"code","def1aad5":"code","b36610ba":"code","5af02425":"code","81340703":"code","dbc21a1d":"code","4a5243e8":"code","a887ebf2":"code","2ad96faa":"code","9fecfe07":"code","edc74e5f":"code","7a977a02":"code","90bb205d":"code","ab44a7e0":"code","7b6486c8":"code","877a87df":"code","844a3ea0":"code","ad5cf495":"code","b683fc0b":"code","3f9b3867":"code","f81f2a37":"code","a7b3d9b4":"code","a0d15161":"code","cb981a16":"code","fe7e7d41":"code","13551f98":"code","1758464a":"markdown","969dc1fe":"markdown","fca23d9a":"markdown","9ae96367":"markdown","7f9ac7aa":"markdown","e907d9e3":"markdown","b7fcc95b":"markdown","fefc2142":"markdown","7b9d906f":"markdown","3442b990":"markdown","916e45a1":"markdown","7def928d":"markdown","08aa30da":"markdown","c6df59e5":"markdown","c8bfe79b":"markdown","f132de30":"markdown","627b2795":"markdown","a30f7e32":"markdown","48cee576":"markdown","735b3c14":"markdown","82ed5a21":"markdown","aa9d6e8d":"markdown","899782e6":"markdown","01391767":"markdown","f0e2a08d":"markdown","cf1d48e1":"markdown"},"source":{"f7edb0ba":"from scipy import stats\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pylab import *\npd.set_option('display.max_columns',100)\nimport warnings\nwarnings.filterwarnings('ignore')","5e41a8e7":"dx = .01\nX  = np.arange(-2,2,dx)  #400 value\nY  = exp(-X**2)\n\n# Normalize the data to a proper PDF\nY \/= (dx*Y).sum()\n\n# Compute the CDF and return the probability value\nCY = np.cumsum(Y*dx)\n\n# Plot the probability density function(blue) and the cumulative density function (red dotted)\nplot(X,Y)\nplot(X,CY,'r--')\n\nshow()","48c04668":"## cdf function for x=0 gives us back y=0.5 \nprint(stats.norm.cdf(np.array([1,-1., 0, 1, 3, 4, -2, 6])))","0daabd2a":"np.random.seed(282629734) # set-up the seed \n\n# Generate 1000 Student\u2019s T continuous random variables.\nx = stats.t.rvs(10, size=1000)","91eb54da":"print(x.min())   # equivalent to np.min(x)\n\nprint(x.max())   # equivalent to np.max(x)\n\nprint(x.mean())  # equivalent to np.mean(x)\n\nprint(x.var())   # equivalent to np.var(x))\n\nstats.describe(x)","797d49b5":"x = np.arange(0, 3 * np.pi, 0.1) # numpy array with 95 values","57ac347b":"y = -x\nplt.plot(x,y)\nplt.show()","0d0c7b3a":"y = -x**2\nplt.plot(x, y)\nplt.show()","d8d96c6b":"y_sin = np.sin(x)\ny_cos = np.cos(x)\n\nplt.plot(x, y_sin)\nplt.plot(x, y_cos)\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.title('Sine and Cosine')\nplt.legend(['Sine', 'Cosine'])\nplt.show()","cf27a6ce":"y_sin = np.sin(x)\ny_cos = np.cos(x)\n\nplt.subplot(2, 1, 1)\nplt.plot(x, y_sin)\nplt.title('Sine')\n\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title('Cosine')\nplt.show()","162a1922":"df= pd.read_csv('..\/input\/data-for-datavis\/insurance.csv')\ndf","40f0a93b":"df.groupby(['smoker']).size()","227ce329":"plt.figure(figsize=(12,6))\nsns.swarmplot(x='sex', y='charges', data = df)\nplt.show()","372eaedc":"sns.boxplot(data=df.loc[:,['age',  'bmi']])\nplt.show()","8ccd6454":"sns.boxplot(data=df.loc[df['sex'] == 'female', [\"age\", \"bmi\"]])\n","6456fc64":"df.head()","ce9d7b33":"sns.distplot(df.age) #Histogram\nplt.show()","a9a55f44":"sns.distplot(df.bmi) # Bell shape\nplt.show()","48a9f476":"sns.distplot(df.charges) #Histogram\nplt.show()","c931ae18":"print('chargese mean: ', df.charges.mean())\nprint('chargese median: ', df.charges.median())","fa01ed9b":"tips_data = sns.load_dataset('tips')\ntips_data","aafeafea":"tips_data.describe()","52eb0a1f":"tips_data.total_bill.median()  # 50%","2c84944c":"sns.set_style(\"darkgrid\")\nplt.figure(figsize=(10,6))\nsns.distplot(tips_data.total_bill, kde=True).set_title('Histogram of total_bill')\nplt.show() # unimodal and right skewed shape","b5cf455b":"sns.distplot(tips_data.tip) \nplt.show()","ec364277":"sns.distplot(tips_data[\"total_bill\"], kde = False)\nsns.distplot(tips_data[\"tip\"], kde = False).set_title(\"Histogram of Both Tip Size and Total Bill\")\nplt.show()","14e8d9c3":"sns.boxplot(tips_data['total_bill'])\nplt.show()","c868b3e6":"sns.boxplot(tips_data[\"tip\"]).set_title(\"Box plot of the Tip\")\nplt.show()","ce976762":"sns.boxplot(tips_data[\"total_bill\"])\nsns.boxplot(tips_data[\"tip\"]).set_title(\"Box plot of the Total Bill and Tips\")\nplt.show()","992a3a41":"sns.boxplot(x = tips_data[\"tip\"], y = tips_data[\"smoker\"]) #y is the group by\nplt.show()","56a8f48c":"sns.boxplot(x=tips_data['tip'], y=tips_data['time'])\ng = sns.FacetGrid(tips_data, row = \"time\")\ng = g.map(plt.hist, \"tip\")\nplt.show()","c7c359cc":"# Create a boxplot and histogram of the tips grouped by the day\nsns.boxplot(x = tips_data[\"tip\"], y = tips_data[\"day\"])\n\ng = sns.FacetGrid(tips_data, row = \"day\") # groupby: Day\ng = g.map(plt.hist, \"tip\")\nplt.show()","cc6b4a2e":"da = pd.read_csv('..\/input\/nhanes-2015-2016\/NHANES.csv')\nda # the focuss only on 'DMDEDUC2' column","8083d03c":"# The table down shows the data file have DMDEDUC=4, which indicates that the person has completed some college,\n# but has not graduated with a four-year degree.\nda.DMDEDUC2.value_counts()  # the \"frequency distribution\" of the variable.","ad58228b":"da.DMDEDUC2.isnull().sum()","17733c86":"#Relabel the variable to have informative character labels\nda[\"DMDEDUC2x\"] = da.DMDEDUC2.replace({1: \"<9\", 2: \"9-11\", 3: \"HS\/GED\", 4: \"Some college\/AA\", 5: \"College\", \n                                       7: \"Refused\", 9: \"Don't know\"})\nda.DMDEDUC2x.value_counts() ","cdd44a5b":"da[\"RIAGENDRx\"] = da.RIAGENDR.replace({1: \"Male\", 2: \"Female\"})","02ef229d":"#It is more relevant to consider the proportion of the sample with each of the possible category values, \n# rather than the number of people in each category\nx = da.DMDEDUC2x.value_counts()  \nx \/ x.sum()","06ce546b":"#  Explicitly drop the missing cases using the dropna method before generating the summaries.\nda.BMXWT.dropna().describe()","0039e9ea":"da.BMXWT.dropna()","7c3d47fc":"x = da.BMXWT.dropna()  # Extract all non-missing values of BMXWT into a variable called 'x'\nprint('mean:' ,x.mean()) # Pandas method\nprint(np.mean(x)) # Numpy function\n\nprint(x.median())\nprint(np.percentile(x, 50))  # 50th percentile, same as the median\nprint(np.percentile(x, 75))  # 75th percentile\nprint(x.quantile(0.75)) # Pandas method for quantiles, equivalent to 75th percentile","3812676b":"# A person is considered to have pre-hypertension when their systolic blood pressure(BPXSY2)is between 120 \n# and 139, or their diastolic blood pressure(BPXDI2) is between 80 and 89. \nnp.mean((da.BPXSY1 >= 120) & (da.BPXSY2 <= 139)) ","bdd7e1b1":"np.mean((da.BPXSY1 >= 120) & (da.BPXSY2 <= 139)) ","2cab7879":"#the proportion of NHANES subjects who are pre-hypertensive based on either systolic or diastolic blood pressure. \na = (da.BPXSY1 >= 120) & (da.BPXSY2 <= 139)\nb = (da.BPXDI1 >= 80) & (da.BPXDI2 <= 89)\nprint(np.mean(a | b))  ","6f67caca":"# We can calculate the extent to which white coat anxiety is present in the NHANES data by looking a the mean \n# difference between the first two systolic or diastolic blood pressure measurements.\nprint(np.mean(da.BPXSY1 - da.BPXSY2))\nprint(np.mean(da.BPXDI1 - da.BPXDI2))","cbeec830":"# the body weight 'kg'shown as a histogram\nsns.distplot(da.BMXWT.dropna());","a5e162c2":"sns.distplot(da.BPXSY1.dropna());","71695877":"bp = sns.boxplot(data=da.loc[:, [\"BPXSY1\", \"BPXSY2\", \"BPXDI1\", \"BPXDI2\"]])\n_ = bp.set_ylabel(\"Blood pressure in mm\/Hg\")","1dea716d":"da[\"agegrp\"] = pd.cut(da.RIDAGEYR, [18, 30, 40, 50, 60, 70, 80]) # Create age strata based on these cut points\nplt.figure(figsize=(12, 5)) \nsns.boxplot(x=\"agegrp\", y=\"BPXSY1\", data=da);  # Make boxplot of BPXSY1 stratified by age group","d23c6070":"plt.figure(figsize=(12, 5))\nsns.boxplot(x=\"agegrp\", y=\"BPXSY1\", hue=\"RIAGENDRx\", data=da);","3355b0ff":"plt.figure(figsize=(12, 5))\nsns.boxplot(x=\"RIAGENDRx\", y=\"BPXSY1\", hue=\"agegrp\", data=da);","e977dbc4":"da.groupby(\"agegrp\")[\"DMDEDUC2x\"].value_counts()","1174e284":"#To stratify jointly by age and gender to explore how educational attainment varies by both of these factors simultaneously\ndx = da.loc[~da.DMDEDUC2x.isin([\"Don't know\", \"Missing\"]), :]  # Eliminate rare\/missing values\ndx = dx.groupby([\"agegrp\", \"RIAGENDRx\"])[\"DMDEDUC2x\"]\ndx = dx.value_counts()\ndx = dx.unstack() # Restructure the results from 'long' to 'wide'\ndx = dx.apply(lambda x: x\/x.sum(), axis=1) # Normalize within each stratum to get proportions\nprint(dx.to_string(float_format=\"%.3f\"))  # Limit display to 3 decimal places","92afbcef":"da['DMDMARTLx'] = da.DMDMARTL.replace({1:'Married', 2:'Widowed',3:'Divorced',4:'Separated',\n                    5:'Never married',6:'Living with partner',77:'Refused'})\nda.DMDMARTLx.value_counts() #the distribution of marital status between women and men, for people of all ages.","6e485749":"#the distribution of marital status for Men in all ages.\nda.loc[da['RIAGENDRx'] == 'Male'].DMDMARTLx.value_counts()","14cb6912":"da.loc[da['RIAGENDRx'] == 'Female'].RIDAGEYR.describe() #female ages","07f1652a":"da.loc[da['RIAGENDRx'] == 'Female'].DMDMARTLx.value_counts().sum() # total women","687b4d8f":"#the distribution of marital status for women in all ages.\nda.loc[da['RIAGENDRx'] == 'Female'].DMDMARTLx.value_counts()\n#The widowed's females are more than men which means women lives more than the men.","41532a89":"da_Fem = da.loc[da['RIAGENDRx'] == 'Female']","3c85acd3":"# the female marital status between 30-40 years old\nda_ladies = da.loc[(da['RIDAGEYR']>=30) & (da['RIDAGEYR']<=40)]\nda_ladies.loc[da_ladies['RIAGENDRx']=='Female'].DMDMARTLx.value_counts()","1ba98af7":"da_young = da.loc[(da['RIDAGEYR']<30)]\nda_young.loc[da_young['RIAGENDRx']=='Female'].DMDMARTLx.value_counts()","29d21578":"da_Mrs = da.loc[(da['RIDAGEYR']>40)]\nda_Mrs.loc[da_Mrs['RIAGENDRx']=='Female'].DMDMARTLx.value_counts()","3e7be6e2":"da_Mrs.loc[da_Mrs['RIAGENDRx']=='Female'].RIAGENDRx.value_counts()","71fd4087":"da.loc[da['RIAGENDRx'] == 'Male'].RIDAGEYR.describe() #Male ages destibution","184a6de2":"da_Men = da.loc[(da['RIDAGEYR']>=30) & (da['RIDAGEYR']<=40)]\nda_Men.loc[da_Men['RIAGENDRx']=='Male'].DMDMARTLx.value_counts()","ba530893":"da_youngM = da.loc[(da['RIDAGEYR']<30)]\nda_youngM.loc[da_youngM['RIAGENDRx']=='Female'].DMDMARTLx.value_counts()","08576621":"da_Senior = da.loc[(da['RIDAGEYR']>40)]\nda_Senior.loc[da_Senior['RIAGENDRx']=='Female'].DMDMARTLx.value_counts()","83d1cda3":"da_Mrs.loc[da_Mrs['RIAGENDRx']=='Female'].RIAGENDRx.value_counts()","0aba07c6":"da_Fem[\"Fagegrp\"] = pd.cut(da_Fem.RIDAGEYR, [18, 30, 40, 50, 60, 70, 80])\nda_Men[\"Fagegrp\"] = pd.cut(da_Men.RIDAGEYR, [18, 30, 40, 50, 60, 70, 80])","6027f879":"#The distrubution propotion of the maritual status for each group age\nFem_prop = da_Fem.groupby('Fagegrp')['DMDMARTLx'].value_counts()\nFem_prop \/ Fem_prop.sum()","28a97077":"df = pd.read_csv('..\/input\/nhanes-2015-2016\/NHANES.csv')\ndf","75393b5f":"columns = df.columns\ncolumns","ac9e27d3":"keep = [column for column in columns if 'BMX' in column]\nkeep","8724f88f":"df[keep]","8508d32f":"# 2 conditions\nwaist_median = pd.Series.median(df['BMXWAIST'])\ncondition1 = df['BMXWAIST'] > waist_median\ncondition2 = df['BMXLEG'] < 32\ndf[condition1 & condition2]","465ffb97":"df.loc[condition1 & condition2, :]","9c2beaf7":"df_small = df.head(5)\ndf_small","b6f88eab":"df_small.index = ['a','b','c','d','f'] # change the index\ndf_small.loc[['a','c'],:]","877f1254":"df_small['BMXBMI']","f44a190b":"df_small['BMXBMI'] = (range(5))\ndf_small.BMXBMI","cde27b5b":"df_small[df_small.BMXBMI >2].index","9f551638":"df_small.loc[df_small.BMXBMI >2, 'BMXBMI'] = [10]*2\ndf_small","358533ab":"df_small.loc[df_small['BMXBMI'] == 10]","34be1dc6":"r= 1\nmean= [15,5]\ncov = [[1,r], [r,1]]\nx, y = x,y = np.random.multivariate_normal(mean, cov, 400).T","dc9c0c99":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nplt.hist(x=x, bins = 15)\nplt.title('X')\n\nplt.subplot(1,2,2)\nplt.hist(x=y, bins=15)\nplt.title('y')\nplt.show()","b5b72d25":"plt.figure(figsize=(10,10))\nplt.subplot(2,2,2)\nplt.scatter(x=x, y=y)\nplt.title('Joint distribution of X and Y')\n\nplt.subplot(2,2,4)\nplt.hist(x=x, bins=15)\nplt.title('Marginal distribution of X')\n\nplt.subplot(2,2,1)\nplt.hist(x=y, orientation = 'horizontal', bins=15)\nplt.title('Marginal distrubution of Y')\n\nplt.show()","e5194356":"df = pd.read_csv('..\/input\/nhanes-2015-2016\/NHANES.csv')\ndf.index = range(1,df.shape[0]+1)\ndf.head()","b3cff99c":"# one way, the age greater than 60 and only first 100 line of blood pressure\npd.Series.mean(df[df.RIDAGEYR > 60].loc[0:100, 'BPXSY1']) \n# Note that the result is not correct! we should use iloc instead of loc","bc404e8c":"df[df.RIDAGEYR > 60].loc[0:5, :] ","8b9894c6":"df[df.RIDAGEYR > 60].iloc[0:5, :]\n# It is better to use iloc when choosing specific raws or column","dbb278a9":"# Applying the correct method to the original question about BPXSY1\nprint(pd.Series.mean(df[df.RIDAGEYR > 60].iloc[0:100, 16]))\n\n# Another way to reference the BPXSY1 variable\nprint(pd.Series.mean(df[df.RIDAGEYR > 60].iloc[0:100, df.columns.get_loc('BPXSY1')]))","adcfe855":"da = pd.read_csv('..\/input\/nhanes-2015-2016\/NHANES.csv')\nsns.regplot(x=\"BMXLEG\", y=\"BMXARML\", data=da, fit_reg=False, scatter_kws={\"alpha\": 0.2}).set_title(\n    'The arm length vs leg length');\n#We see see a positive dependence between the two measures x,y  But it is far from a perfect relationship \n#people with longer arms tend to have longer legs, and vice-versa. use\"alpha\" to make the points semi-transparent.","e486380e":"#will use jointplot which shows\n#Pearson correlation coefficient that ranges from (-1 to 1), 0.62 is considered a strong positive dependence. \nsns.jointplot(x=\"BMXLEG\", y=\"BMXARML\", kind='kde', data=da).annotate(stats.pearsonr);","bad0b9a9":"# that systolic and diastolic blood pressure (the max and min blood pressure between two consecutive heart beats)\n# more weakly correlated than arm and leg length,with a correlation coefficient of 0.32 which indicates that some\n# people have unusually high systolic blood pressure but have average diastolic blood pressure, and vice-versa.\nsns.jointplot(x=\"BPXSY1\", y=\"BPXDI1\", kind='kde', data=da).annotate(stats.pearsonr);","fc61c766":"# Next we look at two repeated measures of systolic blood pressure, taken a few minutes apart on the \n# same person. These values are very highly correlated, with a correlation coefficient of around 0.96.\njp = sns.jointplot(x=\"BPXSY1\", y=\"BPXSY2\", kind='kde', data=da).annotate(stats.pearsonr);","9eaefd2a":"# again the relation between leg & arm length, stratifying first by gender, then by gender and ethnicity.\nda[\"RIAGENDRx\"] = da.RIAGENDR.replace({1: \"Male\", 2: \"Female\"}) \nsns.FacetGrid(da, col=\"RIAGENDRx\").map(plt.scatter, \"BMXLEG\", \"BMXARML\", alpha=0.4).add_legend();\n# The plot indicates that men tend to have somewhat longer arms and legs than women, beside that the \n# correlation between arm length and leg length appears to be somewhat weaker in women than in men.","790aed39":"# calculating the correlation coefficient separately within each gender. The 'corr' method of a dataframe \n# calculates the correlation coefficients for every pair of variables in the dataframe, this method returns \n# a \"correlation matrix\" that is also symmetric around the diagonal (1), \nprint(da.loc[da.RIAGENDRx==\"Female\", [\"BMXLEG\", \"BMXARML\"]].dropna().corr())\nprint(da.loc[da.RIAGENDRx==\"Male\", [\"BMXLEG\", \"BMXARML\"]].dropna().corr())\n#the correlation between leg length and arm length in men is 0.50, while in women the correlation is 0.43.","70877989":"#map(a function, a list to iterate through)\n_=sns.FacetGrid(da,col='RIDRETH1',row='RIAGENDRx').map(plt.scatter,\"BMXLEG\",\"BMXARML\",alpha=0.5 ).add_legend()\n#since there are 2 gender strata and 5 ethnicity strata the result would be 2x5 = 10 strata.\n#the relationship between arm length and leg length within genders is roughly similar across the ethnic groups. ","637ae3ad":"da.DMDEDUC2.value_counts()","b7e01168":"da[\"DMDEDUC2x\"] = da.DMDEDUC2.replace({1: \"<9\", 2: \"9-11\", 3: \"HS\/GED\", 4: \"Some college\/AA\", 5: \"College\", \n                                       7: \"Refused\", 9: \"Don't know\"})\nda[\"DMDMARTLx\"] = da.DMDMARTL.replace({1: \"Married\", 2: \"Widowed\", 3: \"Divorced\", 4: \"Separated\", 5: \"Never married\",\n                                      6: \"Living w\/partner\", 77: \"Refused\"})\ndb = da.loc[(da.DMDEDUC2x != \"Don't know\") & (da.DMDMARTLx != \"Refused\"), :]\n#create a new data set that omits people who responded \"Don't know\" or who refused to answer these questions.","d0abb1f5":"x = pd.crosstab(db.DMDEDUC2x, da.DMDMARTLx) #count the frequency (index, columns)\nx","875384c5":"#pd.crosstab(index=new_index(rows),columns=your_pivoted_columns,values=your_new_values,aggfunc=aggregationFuntion)\nres_names=['pc', 'll', 'pc', 'ts', 'fc']\npurchase_type=['food', 'food', 'food','drink','drink']\nprice=[12,25,32,10,15]\npd.crosstab(index=[res_names], columns=[purchase_type])# counted the frequency at which the intersection happened","505604c7":"pd.crosstab(index=[res_names], columns=[purchase_type],  values=price, aggfunc=sum)","e2541307":"# Normalize within the columns is calculate the proportion for each education level(row)\nx.apply(lambda z: z\/z.sum(), axis=1)","aafa3af0":"# Normalize within the rows is calculate the proportion for each maritial status(column)\nx.apply(lambda z: z\/z.sum(), axis=0) # We see here that the plurality of divorced people have some\n# college but have not graduated from college, while the plurality of married people are college graduates.","90dd9b7a":"# look at the proportion of people in each marital status category, for each combination of the gender\n# and education variables. The following line does these steps, reading the code from left to right:\n# 1 Group the data by every combination of gender, education, and marital status\n# 2 Count the number of people in each cell using the 'size' method\n# 3 Pivot the marital status results into the columns (using unstack)\n# 4 Fill any empty cells with 0\n# 5 Normalize the data by row\ndb.groupby([\"RIAGENDRx\", \"DMDEDUC2x\", \"DMDMARTLx\"]).size().unstack().fillna(0).apply(lambda x: x\/x.sum(), axis=1)","8b4bcfec":"#The factor behind the greater number of women who are divorced & widowed could b that women live longer than men.\n#To minimize the impact of this factor,we are going to focus on the marriage rate, which is\n# a widely-studied variable in social science research.","240ffca3":"#There are a number of intriguing results here. For example, the marriage rate seems to drop as college-educated \n#people get older (e.g. 71% of college educated women between 49 and 50 are married, but only 65% of college \n#educated women between 50 and 59 are married, an even larger drop occurs for men). However in people with \n#a HS\/GED level of education, the marriage rate is higher for older people (although it is lower compared to \n#the college educated sample). There are a number of possible explanations for this, for example, that remarriage\n#after divorce is less common among college graduates.\ndx = db.loc[(db.RIDAGEYR >= 40) & (db.RIDAGEYR < 50)]\na = dx.groupby([\"RIAGENDRx\", \"DMDEDUC2x\", \"DMDMARTLx\"]).size().unstack().fillna(0).apply(lambda x: x\/x.sum(), axis=1)\n\ndx = db.loc[(db.RIDAGEYR >= 50) & (db.RIDAGEYR < 60)]\nb = dx.groupby([\"RIAGENDRx\", \"DMDEDUC2x\", \"DMDMARTLx\"]).size().unstack().fillna(0).apply(lambda x: x\/x.sum(), axis=1)\n\nprint(a.loc[:, [\"Married\"]].unstack())\nprint(\"\")\nprint(b.loc[:, [\"Married\"]].unstack())","def1aad5":"#Another situation that commonly arises when we analyze bivariate data consisting of quantitative & categorical,\n#(marital status and age)notice that widowed people tend to be older, and never-married people tend to be younger.\nplt.figure(figsize=(12,4))\n_=sns.boxplot(db.DMDMARTLx, db.RIDAGEYR)","b36610ba":"#When we have enough data,\"violinplot\" gives a bit more insight into the shapes of the distributions than boxplot\nplt.figure(figsize=(12, 4))\na = sns.violinplot(da.DMDMARTLx, da.RIDAGEYR)\n#We can see quite clearly that the distributions with low mean (living with partner, never married) are strongly\n#right-skewed, while the distribution with high mean (widowed) is strongly left-skewed.","5af02425":"_=sns.regplot(x='BPXDI1', y='BPXDI2', data=da, fit_reg=False, scatter_kws={'alpha':0.2}).set_title(\n    'The first and second measurements of diastolic blood pressure')","81340703":"print(da.loc[:, ['BPXDI1','BPXDI2']].dropna().corr())\nprint(da.loc[:, ['BPXSY1','BPXSY2']].dropna().corr())\n#NOTE the correlation for the systolic is larger than the diastolic","dbc21a1d":"plt.figure(figsize=(14,6))\nsns.violinplot(x='DMDEDUC2x', y='RIDAGEYR', hue='RIAGENDRx', data = da);\n#NOTE that people with <9 years education have age average around 60 ","4a5243e8":"da[\"agegrp\"] = pd.cut(da.RIDAGEYR, [18, 30, 40, 50, 60, 70, 80])\nplt.figure(figsize=(14,8))\nsns.violinplot(x='agegrp', y='BMXBMI', hue='RIAGENDRx', data = da);\n#NOTE that almost all ages has the same BMI median and they are all right-skewed","a887ebf2":"x = pd.crosstab(da.RIDRETH1, da.HIQ210)\nx.apply(lambda z: z\/z.sum(), axis=1)\n#NOTE: The ethnic group 3 has the highest rate of being uninsured in the past year","2ad96faa":"# hypothetical simulation for non-normal and normal sampling distribution\nmean_uofm = 155  # mean weight of the student\nsd_uofm = 5   # std\nmean_gym = 185   # mean \nsd_gym = 5 \ngymperc = .3    # 30 percent of ppl visiting GYM\ntotalPopSize = 40000\n\n# Create two subgroups, [in order to sample from the normal distribution we use normal function ]\nuofm_students = np.random.normal(mean_uofm, sd_uofm, int(totalPopSize * (1 - gymperc)))\nstudents_at_gym = np.random.normal(mean_gym, sd_gym, int(totalPopSize * (gymperc)))\n\n# Create the population from the subgroups\npopulation = np.append(uofm_students, students_at_gym)\n\n# Set up the figure for plotting\nplt.figure(figsize=(10,12))\n\n# Plot the UofM students only\nplt.subplot(3,1,1)\nsns.distplot(uofm_students)\nplt.title(\"UofM Students Only\")\nplt.xlim([140,200])\n\n# Plot the Gym Goers only\nplt.subplot(3,1,2)\nsns.distplot(students_at_gym)\nplt.title(\"Gym Goers Only\")\nplt.xlim([140,200])\n\n# Plot both groups together\nplt.subplot(3,1,3)\nsns.distplot(population)\nplt.title(\"Full Population of UofM Students\")\nplt.axvline(x = np.mean(population), color='r')\nplt.xlim([140,200])\n\nplt.show()","9fecfe07":"# Simulation parameters\nnumberSamps = 5000\nsampSize = 50\n\n# Get the sampling distribution of the mean from only the gym\nmean_distribution = np.empty(numberSamps)\nfor i in range(numberSamps):\n    random_students = np.random.choice(population,sampSize)#pick 50 random students from the population\n    mean_distribution[i] = np.mean(random_students) #assign in mean dis vector\n    \n# Plot the population and the biased sampling distribution\nplt.figure(figsize = (10,8))\n\n# Plotting the population again\nplt.subplot(2,1,1)\nsns.distplot(population)\nplt.title(\"Full Population of UofM Students\")\nplt.axvline(x = np.mean(population))\nplt.xlim([140,200])\n\n# Plotting the sampling distribution\nplt.subplot(2,1,2)\nsns.distplot(mean_distribution)\nplt.title(\"Sampling Distribution of the Mean Weight of All UofM Students\")\nplt.axvline(x = np.mean(population))\nplt.axvline(x = np.mean(mean_distribution), color = \"black\")\nplt.xlim([140,200])\n\nplt.show()","edc74e5f":"# Simulation parameters\nnumberSamps = 5000\nsampSize = 3\n\n# Get the sampling distribution of the mean from only the gym\nmean_distribution = np.empty(numberSamps)\nfor i in range(numberSamps):\n    random_students = np.random.choice(students_at_gym, sampSize)\n    mean_distribution[i] = np.mean(random_students) \n    \n\n# Plot the population and the biased sampling distribution\nplt.figure(figsize = (10,8))\n\n# Plotting the population again\nplt.subplot(2,1,1)\nsns.distplot(population)\nplt.title(\"Full Population of UofM Students\")\nplt.axvline(x = np.mean(population))\nplt.xlim([140,200])\n\n# Plotting the sampling distribution\nplt.subplot(2,1,2)\nsns.distplot(mean_distribution)\nplt.title(\"Sampling Distribution of the Mean Weight of Gym Goers\")\nplt.axvline(x = np.mean(population))\nplt.axvline(x = np.mean(students_at_gym), color = \"black\")\nplt.xlim([140,200])\n\nplt.show()","7a977a02":"#we can replicate the output of a random number generator simply by knowing which seed was used\nimport random\nrandom.seed(1234)\nrandom.random()","90bb205d":"from IPython.display import Image\npath = '..\/input\/three-sigma-rule\/three_sigma_rule.png'\nImage(filename = path , width=400, height=400)\n# the 68-95-99.7 rule","ab44a7e0":"random.seed(1738)\nmu = 7  # the average college student within the population will have about 7 hours of sleep a night\nsigma = 1.7 # the average distance fro mthis mean is about 1.7\nObservations = [random.normalvariate(mu, sigma) for _ in range(100000)] # create bell curve","7b6486c8":"sns.distplot(Observations)\n\nplt.axvline(np.mean(Observations) + np.std(Observations), color = \"g\")\nplt.axvline(np.mean(Observations) - np.std(Observations), color = \"g\")\n\nplt.axvline(np.mean(Observations) + (np.std(Observations) * 2), color = \"y\")\nplt.axvline(np.mean(Observations) - (np.std(Observations) * 2), color = \"y\")","877a87df":"pd.Series(Observations).describe() # summary statistics","844a3ea0":"SampleA = random.sample(Observations,100)#pulling 100 values from our population with equal propability\nSampleB = random.sample(Observations,100)\nSampleC = random.sample(Observations,100)","ad5cf495":"fig, ax = plt.subplots() #create figure and lay in it subplota\nsns.distplot(SampleA, ax = ax)\nsns.distplot(SampleB, ax = ax)\nsns.distplot(SampleC, ax = ax);\n#the distributions are do vary even they follow the same trend, mean around 7","b683fc0b":"from statsmodels.distributions.empirical_distribution import ECDF\n\necdf = ECDF(Observations) # calculate the empirical cumulative density function\n\nplt.plot(ecdf.x, ecdf.y)\n\nplt.axhline(y = 0.025, color = 'y', linestyle='-')\nplt.axvline(x = np.mean(Observations) - (2 * np.std(Observations)), color = 'y', linestyle='-')\n\nplt.axhline(y = 0.975, color = 'y', linestyle='-')\nplt.axvline(x = np.mean(Observations) + (2 * np.std(Observations)), color = 'y', linestyle='-')","3f9b3867":"m = 100 # Subsample size\nsbp_diff = [] # Storage for our subsample mean differences\n\nfor i in range(1000):\n    dx = da.sample(2*m)  # We need two subsamples of size m\n    dx1 = dx.iloc[0:m, :]  # First subsample\n    dx2 = dx.iloc[m:, :]  # Second subsample\n    sbp_diff.append(dx1.BPXSY1.mean() - dx2.BPXSY1.mean())  # The difference of mean BPXSY1 values","f81f2a37":"sns.distplot(sbp_diff);","a7b3d9b4":"pd.Series(sbp_diff).describe()","a0d15161":"m = 400  # Change the sample size, everything else below is unchanged from the cells above\nsbp_diff = []\n\nfor i in range(1000):\n    dx = da.sample(2*m)\n    dx1 = dx.iloc[0:m, :]\n    dx2 = dx.iloc[m:, :]\n    sbp_diff.append(dx1.BPXSY1.mean() - dx2.BPXSY1.mean())\n    \nsns.distplot(sbp_diff)\npd.Series(sbp_diff).describe()","cb981a16":"# Question: generate 3 normal random variables with mean 100 and standard deviation 1\nnp.random.seed(123)\nmu, sigma = 100, 1\nsample = np.random.normal(mu, sigma, 1000)\nsample","fe7e7d41":"sns.distplot(sample)","13551f98":"#Question: Generating random samples from a population lies at the heart of statistics. \n# In the code block below, draw a sample of size 10 from a set containing the integers 1 through 100.\nnp.random.seed(123)\npopulation = np.arange(1,101)  # create population list of number 1-100\nSample  = np.random.choice(population, 10)\nSample","1758464a":"##  Empirical Rule and Distribution","969dc1fe":"# Sampling from Biased Population","fca23d9a":"# ------------------------------------\n# multivariate data select with conditions","9ae96367":"# Univariate data analyses - NHANES case study","7f9ac7aa":"# Categorical Bivariate data using \"Crosstab\"","e907d9e3":"### What happens if I only go to the gym to get the weight of individuals, and I don't sample randomly from all students at the University of Michigan?\n","b7fcc95b":"# ----------------------------------------\n# Analysis of Multivariate data","fefc2142":">We look to stratifying the data by two factors the gender and ethnicity 2x5 = 10 strata.  the correlation in group 5 between arm length and leg length is stronger, especially for men. This is not surprising, as greater heterogeneity can allow correlations to emerge that are indiscernible in more homogeneous data. ","7b9d906f":"# ------------------------------\n# Relabel Marital status variable to have informative character labels.","3442b990":"## The difference between loc & iloc","916e45a1":"# ---------------------------------\n# Relabel education variable to have informative character labels.","7def928d":"> We conclude this section by noting that marital status is associated with many factors, including gender and eduational status, but also varies strongly by age and birth cohort. For example, it is unlikely for young people to be widowed, and it is less likely for older people to be \"never married\", since a person can transition from \"never married\" into one of the other categories, but can never move back. Below we will consider the role of age in more detail, and later in the course we will revisit these questions using more sophisticated analytic methods that can account for all of these factors simultaneously. However, since NHANES is a cross-sectional study, there are certain important questions that it cannot be used to answer. For example, while we know each person's current marital status, we do not know their full marital history (e.g. how many times and at what ages they were married or divorced).\n","08aa30da":"## Question 1: \n>Make a scatterplot showing the relationship between the first and second measurements of diastolic blood pressure (BPXDI1 and BPXDI2). Also obtain the 4x4 matrix of correlation coefficients among the first two systolic and the first two diastolic blood pressure measures.","c6df59e5":">the correlation between arm length and leg length appears to be somewhat weaker in women than in men.","c8bfe79b":"#### We see from the figure below that within each gender, older people tend to have higher blood pressure than younger people. However within an age band, the relationship between gender and systolic blood pressure is somewhat complex -- in younger people, men have substantially higher blood pressures than women of the same age. However for people older than 50, this relationship becomes much weaker, and among people older than 70 it appears to reverse. It is also notable that the variation of these distributions, reflected in the height of each box in the boxplot, increases with age.","f132de30":"#### Stratification can also be useful when working with categorical variables. Below we look at the frequency distribution of educational attainment (\"DMDEDUC2\") within 10-year age bands. While \"some college\" is the most common response in all age bands, up to around age 60 the second most common response is \"college\" (i.e. the person graduated from college with a four-year degree). However for people over 50, there are as many or more people with only high school or general equivalency diplomas (HS\/GED) than there are college graduates. ","627b2795":"## Question 3: \n>Use violin plots to compare the distributions of BMI within a series of 10-year age bands. Also stratify these plots by gender","a30f7e32":"# Find the mean of the first 100 rows of'BPXSY1' when 'RIDAGEYR' > 60","48cee576":"The average that people paid a total bill is 19.78 $. \ndoes the size of the party impact the si<e of the tip? or the size of the bill","735b3c14":">It is usually productive to explore the data more deeply by stratifying on relevant factors such as gender","82ed5a21":"## Question 4:\n>Construct a frequency table for the joint distribution of ethnicity groups (RIDRETH1) and health-insurance status (HIQ210). Normalize the results so that the values within each ethnic group are proportions that sum to 1.","aa9d6e8d":"# ----------------------------------------\n# Unit testign","899782e6":"### --------------------------------------------------------------------------\n\n### --------------------------------------------------------------------------","01391767":">Another way to avoid overplotting is to make a plot of the \"density\" of points.","f0e2a08d":">  Below we make a scatterplot of arm length against leg length. This arm length (BMXARML) is plotted on the vertical axis and leg length (BMXLEG) is plotted on the horizontal axis). We see a positive dependence between the two measures -- people with longer arms tend to have longer legs, and vice-versa. However it is far from a perfect relationship.","cf1d48e1":"## Question 2: \n>Use \"violin plots\" to compare the distributions of ages within groups defined by gender and educational attainment."}}