{"cell_type":{"d5d7028f":"code","a1a3a5dd":"code","95a37791":"code","4de9b240":"code","f72122e9":"code","38cdc3db":"code","0f244104":"code","caeaba9f":"code","0b0f5eca":"code","4dc9ae63":"code","09675563":"code","13cac515":"code","585dbec3":"code","d53a2e73":"code","4ae3c167":"code","09dcfcc9":"code","f4e5d127":"code","6fa6c252":"code","de4bf8a8":"code","594e3fe4":"code","2a89767c":"code","b3b4b8cf":"code","96b3e2ee":"code","7c72be99":"code","e15ac7a1":"code","de7b953c":"code","a8ccea71":"code","d1030666":"code","2f58915f":"code","e660833d":"code","753efba7":"code","c240edfd":"code","bced0f36":"code","4568d81f":"code","a74a376b":"markdown","b7e8e469":"markdown","84b9c84e":"markdown","1f7edd0f":"markdown","bf451e14":"markdown","988d462f":"markdown","437d6d00":"markdown","3fd65880":"markdown","62a45591":"markdown","cc9047cd":"markdown","a9d894bb":"markdown","95dd5b4e":"markdown","2b87d7f9":"markdown","86d0b961":"markdown","e71d691c":"markdown","aee037ca":"markdown","5bc63660":"markdown","3fc41296":"markdown","294b29b3":"markdown","6b05ff83":"markdown","d197d65f":"markdown","eb551349":"markdown","475da0e7":"markdown","dd6f73fa":"markdown","519991dc":"markdown"},"source":{"d5d7028f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a1a3a5dd":"# Import numpy, pandas, matpltlib.pyplot, sklearn modules and seaborn\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import  date\n%matplotlib inline\npd.set_option('display.max_rows', 200)\npd.set_option('display.max_columns', 200)\nplt.style.use('ggplot')","95a37791":"# Define lists of states, colors, linestyles, month order, day_order, and hour_order\n# For this notebook, we will focus on the following three states: NJ, PA, & NY\nstate_lst=['NJ','PA','NY']\nstate_lst_full=['New Jersey','Pennsylvania','New York']\n\n# We will focus on accident severities 2, 3 & 4\nseverity_lst=[2,3,4]\n\n# Set a list of colors, markers and linestyles for plotting\ncolor_lst=['r','b','k']\nmarker_lst=['D','o','*']\nlinestyle_lst=['dashed','dashdot','solid']\n\n# Set a list of month, weekday, hour for reindex purpose and time_duraction to clear the accident\nmonth_lst = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul','Aug','Sep','Oct','Nov','Dec']\nweekday_lst = [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\nweekday_lst_full = [ 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nhour_lst= np.arange(24)\ntd='Time_Duration(min)'","4de9b240":"# Import the data, slice the states of interests, and display the first 5 rows\ndf = pd.read_csv('\/kaggle\/input\/us-accidents\/US_Accidents_May19.csv')\ndf = df[df.State.isin(state_lst)]\ndf.head()","f72122e9":"# Extract year, month, day, hour, & weekday information\n\n# Convert Start_Time and End_Time to datetypes\ndf['Start_Time'] = pd.to_datetime(df['Start_Time'], errors='coerce')\ndf['End_Time'] = pd.to_datetime(df['End_Time'], errors='coerce')\n\n# Extract year, month, day, hour, weekday and time_duration information\ndf['Start_Year']=df['Start_Time'].dt.year\ndf['Start_Month']=df['Start_Time'].dt.strftime('%b')\ndf['Start_Day']=df['Start_Time'].dt.day\ndf['Start_Hour']=df['Start_Time'].dt.hour\ndf['Start_Weekday']=df['Start_Time'].dt.strftime('%a')\n\n# Extract the amount of time in the unit of minutes for each accident, round to the nearest integer\ntd='Time_Duration(min)'\ndf[td]=round((df['End_Time']-df['Start_Time'])\/np.timedelta64(1,'m'))\n\n# Check the dataframe\ndf.head()","38cdc3db":"# Visualization: map of accidents by state\nsns.scatterplot(x='Start_Lng', y='Start_Lat', data=df, hue='State')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude)')\nplt.show()","0f244104":"# Check the beginning and end date of this dataset\nprint('This dataset contains data beween {} and {}.'.format(df.Start_Time.min(),df.Start_Time.max()))","caeaba9f":"# Find out how many days (Monday-Sunday) between the beginning and end of this dataset.\n\ncalendar_weekday_num=[]\n\nd1=df.Start_Time.min()\nd2=df.Start_Time.max()\n\nfor i in range(7):\n\n    count = 0\n\n    for d_ord in range(d1.toordinal(), d2.toordinal()+1):\n        d = date.fromordinal(d_ord)\n        if (d.weekday() == i):\n            count += 1\n    calendar_weekday_num.append(count)\n\nprint('Number of days for Monday-Sunday: {}.'.format(calendar_weekday_num))\nprint('Total number of days between {} and {}: {} days.'.format(d1,d2,sum(calendar_weekday_num)))","0b0f5eca":"# Find out how many unique days in the dataset\nallday_lst=df.Start_Time.astype(str).str.split(' ')\nallday_lst2=[item[0] for item in allday_lst]\n\nprint('For the three states of New Jersey, Pennsylvania, & New York in this dataset:')\nprint('There are {} total accidents.'.format(df.shape[0]))\nprint('There are {} total days.'.format(len(allday_lst2)))\nprint('There are {} unique days.'.format(len(set(allday_lst2))))\nprint('On average, there are {} accidents per day.'.format(round(df.shape[0]\/len(set(allday_lst2)))))","4dc9ae63":"# For each state, find out how many unique days for each weekday\/weekend\n\n# Initialize an empty list to hold the number of days for each weekday\/weekend for the three states\nweekday_num_state=[]\n\n# Run a for loop for the list of states: NJ, PA, & NY\nfor state in state_lst:\n    \n    # Initialize an empty list to hold the number of days for each weekday\n    weekday_num=[]\n    \n    # Run a for loop for the whole week\n    for weekday in weekday_lst:\n        \n        # Slice the dataframe for specific state & weekday\n        df_weekday=df[(df['State']==state) & (df.Start_Weekday==weekday)]\n        \n        # For each weekday, extract the day information from the Start_Time column, by separating the datetime into day and hour\n        day_lst1=df_weekday.Start_Time.astype(str).str.split(' ')\n        \n        # Extract the first item which is the day information\n        day_lst2=[item[0] for item in day_lst1]\n        \n        # Append the day into the list weekday_num\n        weekday_num.append(len(set(day_lst2)))\n\n    # Append the day with state information encoded into the list weekday_num_state\n    weekday_num_state.append(weekday_num)\n\nprint('For the states of {}, here is the list of numbers of weekdays (Mon-Sun): {}.'.format(state_lst,weekday_num_state))","09675563":"# Run a for loop for each state to find out the percentage of days with accidents during this period of time in the data set\nday_pct_lst=[]\nfor i,state in enumerate(state_lst):\n    day_pct=[round(int(item1)\/int(item2),2)*100 for item1,item2 in zip(weekday_num_state[i],calendar_weekday_num)]\n    day_pct_lst.append(day_pct)\n    print('For the state of {}, the percentage of days with accident during this period in the data set: {}%.'.format(state_lst[i], day_pct))\n\nprint(day_pct_lst)","13cac515":"# Time series analysis, resample by month\n\n# Set the start_time as the index for resampling purpose\n\ndf.set_index('Start_Time',drop=True,inplace=True)\n\n\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n     # Slice the dataframe for the specific state and weekday\n    df[df['State']==state].resample('M').count()['ID'].plot(linestyle=linestyle_lst[i], color=color_lst[i])\n    \n    # Set the limits and labels\n    plt.xlim('2016','2019-Mar')\n    plt.ylim(0,4200)\n    plt.xlabel('Year')\n    plt.title('{}'.format(state))\n\nplt.show()\n\n# Reset the index back for further data analysis\ndf.reset_index(inplace=True)","585dbec3":"df.Severity.value_counts().sort_values(ascending=False)","d53a2e73":"# The severity of accidents for each state\nfeature='Severity'\n\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Cutoff percentage for display\npct_cutoff=0\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    # Slice the dataframe for the specific state and feature\n    df_temp=df[df['State']==state][feature].value_counts(normalize=True).round(2)\n\n    # Define lables to go with the pie plot\n    labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n    # Generate the pie plot\n    plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n    # Set axis,label and title\n    plt.axis('equal')\n    plt.xlabel(feature)\n    plt.title(state)\n\nplt.tight_layout()\nplt.show()","4ae3c167":"# Find the median time to clear an accident for each state; for each of the following Severity (2,3,4)\n\n# Initialize median_lst_state_severity\nmedian_lst_state_severity=[]\n\n# Run a for loop for each weather condition\nfor i,severity in enumerate(severity_lst):\n    # Initialize median_lst_state\n    median_lst_state=[]\n    \n    # Run a for loop for each state\n    for j,state in enumerate(state_lst):        \n        \n        # Slice the dataframe for the specific state, weather condition and feature\n        df_temp=df[(df['State']==state) & (df['Severity']==severity)]\n\n        # Calculate 25, 50, and 75 quantile and interquantile range\n        df_25=df_temp[td].quantile(.25)\n        df_50=df_temp[td].quantile(.5)\n        df_75=df_temp[td].quantile(.75)\n        df_iqr=df_75-df_25\n        # print('1Q: {}; 3Q: {}; IQR: {}.'.format(df_25,df_75,df_iqr))\n        \n        # Convert the series to a list\n        df_temp_lst=df_temp[td].tolist()\n        \n        # Run a list comprehension to remove outliers and fill with median\n        # Define criteria for outlier: n*iqr\n        n=3\n        \n        df_temp_lst=[item if ((item >= df_25 - n * df_iqr) & (item <= df_75 + n * df_iqr)) else df_50 for item in df_temp_lst]\n        \n        # Convert back to pandas series\n        df_temp_lst=pd.Series(df_temp_lst)\n        \n        # Extract the median after outlier manipulation, and append it to the list median_lst_state\n        median_lst_state.append(df_temp_lst.median())\n        \n    median_lst_state_severity.append(median_lst_state)   \n        \nprint('State list: {}; Severity list: {}.'.format(state_lst,severity_lst))\n\n\n# Set the size of the figure\nfig= plt.figure(figsize=(5,6))\n\nx_ticks=np.arange(len(median_lst_state_severity))\n\nf, (ax, ax2) = plt.subplots(2, 1, sharex=True)\n\nfor i in range(len(median_lst_state_severity)):\n    \n    # Assign the sublist to pts\n    pts=median_lst_state_severity[i]\n    \n    # If we were to simply plot pts, we'd lose most of the interesting\n    # details due to the outliers. So let's 'break' or 'cut-out' the y-axis\n    # into two portions - use the top (ax) for the outliers, and the bottom\n    # (ax2) for the details of the majority of our data\n    \n\n\n    # plot the same data on both axes\n    ax.plot(x_ticks, pts,linestyle=linestyle_lst[i], color=color_lst[i], marker=marker_lst[i])\n    ax2.plot(x_ticks, pts,linestyle=linestyle_lst[i], color=color_lst[i], marker=marker_lst[i])\n    \n\n    # zoom-in \/ limit the view to different portions of the data\n    ax.set_ylim(350, 370)  # outliers only\n    ax2.set_ylim(20, 50)  # most of the data\n\n    # hide the spines between ax and ax2\n    ax.spines['bottom'].set_visible(False)\n    ax2.spines['top'].set_visible(False)\n    ax.xaxis.tick_top()\n    ax.tick_params(labeltop='off')  # don't put tick labels at the top\n    ax2.xaxis.tick_bottom()\n\n    # This looks pretty good, and was fairly painless, but you can get that\n    # cut-out diagonal lines look with just a bit more work. The important\n    # thing to know here is that in axes coordinates, which are always\n    # between 0-1, spine endpoints are at these locations (0,0), (0,1),\n    # (1,0), and (1,1).  Thus, we just need to put the diagonals in the\n    # appropriate corners of each of our axes, and so long as we use the\n    # right transform and disable clipping.\n\n    d = .015  # how big to make the diagonal lines in axes coordinates\n    # arguments to pass to plot, just so we don't keep repeating them\n    kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)\n    ax.plot((-d, +d), (-d, +d), **kwargs,label='_nolegend_')        # top-left diagonal\n    ax.plot((1 - d, 1 + d), (-d, +d), **kwargs,label='_nolegend_')  # top-right diagonal\n\n    kwargs.update(transform=ax2.transAxes)  # switch to the bottom axes\n    ax2.plot((-d, +d), (1 - d, 1 + d), **kwargs,label='_nolegend_')  # bottom-left diagonal\n    ax2.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs,label='_nolegend_')  # bottom-right diagonal\n\n    # What's cool about this is that now if we vary the distance between\n    # ax and ax2 via f.subplots_adjust(hspace=...) or plt.subplot_tool(),\n    # the diagonal lines will move accordingly, and stay right at the tips\n    # of the spines they are 'breaking'       \n   \n\n# Set labels, limit, legend, title and xticks\nplt.xlabel('State')\nplt.ylabel('Time (minutes)')\n\nax2.legend(['Severity: 2','Severity: 3','Severity: 4'],loc=\"best\")\n\nplt.xticks(np.arange(len(median_lst_state_severity)),(state_lst))\n\n\nplt.title('How long does it take to clear the accident?')\n\nplt.show()","09dcfcc9":"# The day or night when accidents occurred for each state\nfeature='Sunrise_Sunset'\n\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Cutoff percentage for display\npct_cutoff=2\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    # Slice the dataframe for the specific state and feature\n    df_temp=df[df['State']==state][feature].value_counts(normalize=True).round(2)\n\n    # Define lables to go with the pie plot\n    labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n    # Generate the pie plot\n    plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n    # Set axis,label and title\n    plt.axis('equal')\n    plt.xlabel(feature)\n    plt.title(state)\n    \nplt.tight_layout()\nplt.show()","f4e5d127":"# Hourly distribution of accidents on weekdays in NJ, PA & NY (for the whole dataset)\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\nfor i,state in enumerate(state_lst):\n    plt.subplot(1, 3, 1+i)\n    df[df['State']==state].groupby('Start_Weekday').count()['ID'].reindex(weekday_lst).plot(kind='bar',color=color_lst[i]).set_title(state)\n    plt.xlabel('')\n    plt.ylim(0, 20000)\n    \n    # Only diplay ylabel on the leftmost plot\n    if i==0:\n        plt.ylabel('Number of accidents')","6fa6c252":"# Accidents per day on weekdays\/weekends in NJ, PA & NY\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Divide the total number of accidents by the number of unique days\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    \n    # Slice the dataframe for the specific state and weekday\n    df_temp=df[df['State']==state].groupby('Start_Weekday').count()['ID'].reindex(weekday_lst)\n    \n    # checkpoint\n    # print('df_temp:', df_temp)\n    # print('weekday_num_state[i]:',weekday_num_state[i])\n    \n    # Divid the number of accidents by the number of unique days, using list comprehension\n    df_temp2=[round(int(item1)\/int(item2)) for item1,item2 in zip(df_temp,weekday_num_state[i])]\n    \n    # checkpoint\n    # print('df_temp2:', df_temp2)\n    \n    # Convert the list of pandas series for plot\n    df_temp2=pd.Series(df_temp2)\n    \n    # Make a bar plot, using different color and set the title as the state\n    df_temp2.plot(kind='bar',color=color_lst[i]).set_title(state)\n    \n    # Remove xlabels\n    plt.xlabel('')\n    \n    # Replace the xticks with weekday\n    plt.xticks(np.arange(7),weekday_lst)\n    \n    # Set the limit of y axis\n    plt.ylim(0, 125)\n    \n    # Only diplay ylabel on the leftmost plot\n    if i==0:\n        plt.ylabel('Number of accidents')","de4bf8a8":"# Accidents per day on weekdays\/weekends in NJ, PA & NY\n# Set the size of the figure\n\n# The severity for each location for each state; for each of the following locations, what's the severity of the accident?\nfeature='Start_Weekday'\nfig_x=len(state_lst)\n\n\n# Divide the total number of accidents by the number of unique days\n\n# Set the size of the figure\nfig= plt.figure(figsize=(5*fig_x,6))\n\n# Cutoff percentage for display\npct_cutoff=2\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    \n    # Slice the dataframe for the specific state and weekday\n    df_temp=df[df['State']==state].groupby('Start_Weekday').count()['ID'].reindex(weekday_lst)\n    \n    # checkpoint\n    # print('df_temp:', df_temp)\n    # print('weekday_num_state[i]:',weekday_num_state[i])\n    \n    # Divid the number of accidents by the number of unique days, using list comprehension\n    df_temp2=[round(int(item1)\/int(item2)) for item1,item2 in zip(df_temp,weekday_num_state[i])]\n    \n    # checkpoint\n    # print('df_temp2:', df_temp2)\n    \n    # Convert the list of pandas series for plot\n    df_temp2=pd.Series(df_temp2)\n    \n    # Make a bar plot, using different color and set the title as the state\n    # df_temp2.plot(kind='bar',color=color_lst[i]).set_title(state)\n    \n    # Define lables to go with the pie plot\n    labels = [n if v > pct_cutoff\/100 else '' for n, v in zip(df_temp.index, df_temp)] \n    \n    # Generate the pie plot\n    plt.pie(df_temp2, labels=labels, autopct=my_autopct, shadow=True)\n        \n    # Set axis,label and title\n    plt.axis('equal')\n    plt.xlabel('Weekday\/Weekend')\n    plt.title(state)\n\n        \n\nplt.tight_layout()\nplt.show()","594e3fe4":"# Hourly distribution of accidents on all days, weekdays, & weekends in NJ, PA & NY\n# Set the size of the figure\n\nfig= plt.figure(figsize=(18,6))\n\n# Plot all data together\n\nplt.subplot(1, 3, 1)\n\n# Plot the states of New Jersey, Pennsylvania, & New York on all days, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\ndf[df['State']=='NJ'].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashed',color='r')\n\ndf[df['State']=='PA'].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashdot',color='b')\n\ndf[df['State']=='NY'].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='solid',color='k')\n\n# Set labels, limit, legend, title and xticks\nplt.ylabel('Number of accidents')\nplt.xlabel('Hour')\nplt.ylim(0, 12500)\nplt.legend(['NJ','PA','NY'])\nplt.title('All days')\nplt.xticks(np.arange(0, 24, step=2))\n\n# Weekdays\nplt.subplot(1, 3, 2)\n\n# Plot the states of New Jersey, Pennsylvania, & New York on weekdays, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\ndf[(df['State']=='NJ') & (df['Start_Weekday'].isin(weekday_lst[:5]))].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashed',color='r')\n\ndf[(df['State']=='PA') & (df['Start_Weekday'].isin(weekday_lst[:5]))].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashdot',color='b')\n\ndf[(df['State']=='NY') & (df['Start_Weekday'].isin(weekday_lst[:5]))].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='solid',color='k')\n\n# Set labels, limit, legend, title and xticks\nplt.xlabel('Hour')\nplt.ylim(0, 12500)\nplt.legend(['NJ','PA','NY'])\nplt.title('Weedays')\nplt.xticks(np.arange(0, 24, step=2))\n\n# Weekends\nplt.subplot(1, 3, 3)\n\n# Plot the state of New Jersey on weekends, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\ndf[(df['State']=='NJ') & (df['Start_Weekday'].isin(weekday_lst[5:]))].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashed',color='r')\n# Plot the state of Pennsylvania on weekends, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\ndf[(df['State']=='PA') & (df['Start_Weekday'].isin(weekday_lst[5:]))].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashdot',color='b')\n# Plot the state of New York on weekends, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\ndf[(df['State']=='NY') & (df['Start_Weekday'].isin(weekday_lst[5:]))].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='solid',color='k')\n\n# Set labels, limit, legend, title and xticks\nplt.xlabel('Hour')\nplt.ylim(0, 1000)\nplt.legend(['NJ','PA','NY'])\nplt.title('Weekends')\nplt.xticks(np.arange(0, 24, step=2))\n\nplt.tight_layout()\nplt.show()","2a89767c":"# Hourly distribution of accidents (severity 2, 3, & 4) per day on all days, weekdays, & weekends in NJ, PA & NY\n\nfeature='Severity'\nfeature2=['All days', 'Weekdays','Weekends']\nseverity_lst=[2,3,4]\nfig_x=len(state_lst)\nfig_y=len(severity_lst)\nfig_z=len(feature2)\n\n# Set the size of the figure\nfig= plt.figure(figsize=(5*fig_z,6*fig_y))\n\n# Run a for loop for each weather condition and each state for all days together\nfor i,severity in enumerate(severity_lst):\n\n    ### ###\n    # All days\n    # Set a sub plot\n    plt.subplot(fig_z, fig_y, i+1)\n    \n    # Run a for loop for each state, all days\n    for j,state in enumerate(state_lst):\n            \n        # Slice the dataframe for the specific state, weather condition and feature\n        df_temp=df[(df['State']==state) & (df['Severity']==severity)].groupby('Start_Hour').count()['ID'].reindex(hour_lst)\n        \n        \n        # Divid the number of accidents by the number of week days, using list comprehension\n        df_temp=df_temp\/sum(weekday_num_state[i])\n        \n        # Generate the scatter plot\n \n        df_temp.plot(linestyle=linestyle_lst[j], color=color_lst[j])   \n            \n        # Set labels, limit, legend, title and xticks\n        \n    plt.xlabel('Hour')\n    plt.ylabel('Number of accidents')\n        \n    # plt.xlim(0, 23)\n    # plt.ylim(0, 12500)\n    plt.legend(['NJ','PA','NY'])\n    plt.title('All days'+': severity-'+str(severity))\n    plt.xticks(np.arange(0, 24, step=2))\n\n    ### ###\n    # Weekdays\n    # Set a sub plot\n    plt.subplot(fig_z, fig_y, i+1+fig_y)\n    \n    # Run a for loop for each state, weekdays\n    for j,state in enumerate(state_lst):\n            \n        # Slice the dataframe for the specific state, weather condition and feature\n        df_temp=df[(df['State']==state) & (df['Severity']==severity) & (df['Start_Weekday'].isin(weekday_lst[:5]))].groupby('Start_Hour').count()['ID'].reindex(hour_lst)\n           \n                  \n        # Divid the number of accidents by the number of weekdays (Mon-Fri), using list comprehension\n        df_temp=df_temp\/sum(weekday_num_state[i][:5])      \n\n        \n        # Generate the scatter plot\n \n        df_temp.plot(linestyle=linestyle_lst[j], color=color_lst[j])   \n            \n        # Set labels, limit, legend, title and xticks\n        \n    plt.xlabel('Hour')\n    plt.ylabel('Number of accidents')\n        \n    # plt.xlim(0, 23)\n    # plt.ylim(0, 12500)\n    plt.legend(['NJ','PA','NY'])\n    plt.title('Weekdays'+': severity-'+str(severity))\n    plt.xticks(np.arange(0, 24, step=2))\n\n    \n    ### ###\n    # Weekends\n    # Set a sub plot\n    plt.subplot(fig_z, fig_y, i+1+fig_y+fig_y)\n    \n    # Run a for loop for each state, weekdays\n    for j,state in enumerate(state_lst):\n            \n        # Slice the dataframe for the specific state, weather condition and feature\n        df_temp=df[(df['State']==state) & (df['Severity']==severity) & (df['Start_Weekday'].isin(weekday_lst[5:]))].groupby('Start_Hour').count()['ID'].reindex(hour_lst)\n          \n                         \n        # Divid the number of accidents by the number of week days, using list comprehension\n        df_temp=df_temp\/sum(weekday_num_state[i][5:])     \n        \n        # Generate the scatter plot\n \n        df_temp.plot(linestyle=linestyle_lst[j], color=color_lst[j])   \n            \n        # Set labels, limit, legend, title and xticks\n        \n    plt.xlabel('Hour')\n    plt.ylabel('Number of accidents')\n        \n    # plt.xlim(0, 23)\n    # plt.ylim(0, 12500)\n    plt.legend(['NJ','PA','NY'])\n    plt.title('Weekends'+': severity-'+str(severity))\n    plt.xticks(np.arange(0, 24, step=2))\n    \nplt.tight_layout()\nplt.show()","b3b4b8cf":"# Hourly distribution of accidents on weekdays in NJ, PA & NY\n# Set the size of the figure\nfig= plt.figure(figsize=(30,6))\nn=5\n\n# Make subplots on each weekday with a for loop\nfor i in range(n):\n    plt.subplot(1, 5, i+1)\n    # Plot the state of New Jersey on weekdays, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\n    df[(df['State']=='NJ') & (df['Start_Weekday']==weekday_lst[i])].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashed',color='r')\n    # Plot the state of Pennsylvania on weekdays, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\n    df[(df['State']=='PA') & (df['Start_Weekday']==weekday_lst[i])].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashdot',color='b')\n    # Plot the state of New York on weekdays, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\n    df[(df['State']=='NY') & (df['Start_Weekday']==weekday_lst[i])].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='solid',color='k')\n    \n    # Set labels, limit, legend, title and xticks\n    plt.xlabel('Hour')\n    plt.ylim(0, 2700)\n    plt.legend(['NJ','PA','NY'])\n    plt.title(weekday_lst_full[i])\n    plt.xticks(np.arange(0, 24, step=2))\n    \n    # Only diplay ylabel on the leftmost plot\n    if i==0:\n        plt.ylabel('Number of accidents')\n\nplt.tight_layout()\nplt.show()","96b3e2ee":"# Hourly distribution of accidents on weekends in NJ, PA & NY\n# Set the size of the figure\n\nfig= plt.figure(figsize=(12,6))\n\n# Make subplots on each weekday with a for loop\nfor i in range(2):\n    # Set the subplot\n    plt.subplot(1, 2, i+1)\n    # Plot the state of New Jersey on weekends, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\n    df[(df['State']=='NJ') & (df['Start_Weekday']==weekday_lst[i+5])].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashed',color='r')\n    # Plot the state of Pennsylvania on weekends, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\n    df[(df['State']=='PA') & (df['Start_Weekday']==weekday_lst[i+5])].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='dashdot',color='b')\n    # Plot the state of New York on weekends, group the data by hours and count the number of accident, reorder the data by hours, make lineplot with certain style and color\n    df[(df['State']=='NY') & (df['Start_Weekday']==weekday_lst[i+5])].groupby('Start_Hour').count()['ID'].reindex(hour_lst).plot(linestyle='solid',color='k')\n\n    # Set labels, limit, legend, title and xticks\n    plt.xlabel('Hour')\n    plt.ylim(0, 500)\n    plt.legend(['NJ','PA','NY'])\n    plt.title(weekday_lst_full[i+5])\n    plt.xticks(np.arange(0, 24, step=2))\n    \n    # Only diplay ylabel on the leftmost plot\n    if i==0:\n        plt.ylabel('Number of accidents')\n\nplt.tight_layout()\nplt.show()\n","7c72be99":"# The county distribution of accidents for each state\nfeature='County'\n\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Cutoff percentage for display\npct_cutoff=2.5\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    # Slice the dataframe for the specific state and feature\n    df_temp=df[df['State']==state][feature].value_counts(normalize=True).round(8)\n\n    # Define lables to go with the pie plot\n    labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n    # Generate the pie plot\n    plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n    # Set axis,label and title\n    plt.axis('equal')\n    plt.xlabel(feature)\n    plt.title(state)\n\nplt.tight_layout()\nplt.show()","e15ac7a1":"df[df['State']=='NJ']['City'].value_counts(normalize=True)","de7b953c":"# The city distribution of accidents for each state\nfeature='City'\n\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Cutoff percentage for display\npct_cutoff=2.5\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    # Slice the dataframe for the specific state and feature\n    df_temp=df[df['State']==state][feature].value_counts(normalize=True).round(8)\n\n    # Define lables to go with the pie plot\n    labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n    # Generate the pie plot\n    plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n    # Set axis,label and title\n    plt.axis('equal')\n    plt.xlabel(feature)\n    plt.title(state)\n\nplt.xlabel(feature)\nplt.show()","a8ccea71":"# The zip code distribution of accidents for each state\nfeature='Zipcode'\n\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Cutoff percentage for display\npct_cutoff=2.5\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    # Slice the dataframe for the specific state and feature\n    df_temp=df[df['State']==state][feature].value_counts(normalize=True).round(8)\n\n    # Define lables to go with the pie plot\n    labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n    # Generate the pie plot\n    plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n    # Set axis,label and title\n    plt.axis('equal')\n    plt.xlabel(feature)\n    plt.title(state)\n\nplt.xlabel(feature)\nplt.show()","d1030666":"# The relative side of the street (Right\/Left) in address field for each state.\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\nlabels=['Right','Left']\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n     # Slice the dataframe for the specific state and weekday\n    df_side=df[df['State']==state]['Side'].value_counts(normalize=True).round(2)\n\n    plt.pie(df_side, labels=labels, autopct='%1.0f%%', shadow=True)\n\n    plt.axis('equal')\n    plt.xlabel('Street side')\n    plt.title('{}'.format(state))\n\nplt.show()","2f58915f":"# The location of accidents for each state\n# Where are the accidents?\nfeature='Accident location'\n\n# Set the state as the index\ndf.set_index('State',drop=True,inplace=True)\n\n# State is the index when selecting bool type data as df_bool\ndf_bool=df.select_dtypes(include=['bool'])\n\n# Reset the index of the original data for other calculations\ndf.reset_index(inplace=True)\n\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Cutoff percentage for display\npct_cutoff=2.5\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    # Slice the dataframe for the specific state and feature\n    df_temp=df_bool[df_bool.index==state]\n    df_temp=(df_temp.sum(axis=0)\/df_temp.sum(axis=0).sum()).sort_values()\n\n    \n    # Define lables to go with the pie plot\n    labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n    # Generate the pie plot\n    plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n    # Set axis,label and title\n    plt.axis('equal')\n    plt.xlabel(feature)\n    plt.title(state)\n\nplt.xlabel(feature)\nplt.show()","e660833d":"# Select the data with a list of columns as State, Severity and the location list\n# List the locations with data types as boolean\ncol_sel=list(df.dtypes[df.dtypes=='bool'].index)\n\n# Append stat and severity to the list\ncol_sel.append('State')\ncol_sel.append('Severity')\n\n# Slice the dataframe with the list above\ndf_sel=df[col_sel]\n\n# The severity for each location for each state; for each of the following locations, what's the severity of the accident?\nfeature='Severity'\nloc_lst=['Traffic_Signal','Junction', 'Crossing']\nfig_x=len(state_lst)\nfig_y=len(loc_lst)\n\n# Set the size of the figure\nfig= plt.figure(figsize=(5*fig_x,6*fig_y))\n\n# Cutoff percentage for display\npct_cutoff=2\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each location\nfor i,loc in enumerate(loc_lst):\n    # Run a for loop for each state\n    for j,state in enumerate(state_lst):\n    \n        # Set a sub plot\n        plt.subplot(fig_y, fig_x, i*fig_x+j+1)\n        # Slice the dataframe for the specific state, weather condition and feature\n        \n        df_temp=df_sel\n                   \n        df_temp=df_temp[(df_temp['State']==state) & (df_temp[loc]==True)]\n        \n        df_temp=df_temp[feature].value_counts(normalize=True).round(2)\n\n        # Define lables to go with the pie plot\n        labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n        # Generate the pie plot\n        plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n        # Set axis,label and title\n        plt.axis('equal')\n        plt.xlabel(feature)\n        plt.title(state+': '+loc)\n\nplt.tight_layout()\nplt.show()","753efba7":"df[df['State']==state]['Weather_Condition'].value_counts(normalize=True).round(5)","c240edfd":"# The weather condition for each state\nfeature='Weather_Condition'\n\n# Set the size of the figure\nfig= plt.figure(figsize=(15,6))\n\n# Cutoff percentage for display\npct_cutoff=2\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each state\nfor i,state in enumerate(state_lst):\n    \n    # Set a sub plot\n    plt.subplot(1, 3, 1+i)\n    # Slice the dataframe for the specific state and feature\n    df_temp=df[df['State']==state][feature].value_counts(normalize=True).round(2)\n\n    # Define lables to go with the pie plot\n    labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n    # Generate the pie plot\n    plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n    # Set axis,label and title\n    plt.axis('equal')\n    plt.xlabel(feature)\n    plt.title(state)\n\nplt.tight_layout()\nplt.show()","bced0f36":"# The weather condition for each state; for each of the following weather conditions (Clear, Overcast and Mostly Cloudy), what's the severity?\nfeature='Severity'\nweather_lst=['Clear','Overcast','Mostly Cloudy']\nfig_x=len(state_lst)\nfig_y=len(weather_lst)\n\n# Set the size of the figure\nfig= plt.figure(figsize=(5*fig_x,6*fig_y))\n\n# Cutoff percentage for display\npct_cutoff=2\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each weather condition\nfor i,weather in enumerate(weather_lst):\n    # Run a for loop for each state\n    for j,state in enumerate(state_lst):\n    \n        # Set a sub plot\n        plt.subplot(fig_y, fig_x, i*fig_x+j+1)\n        # Slice the dataframe for the specific state, weather condition and feature\n        df_temp=df[(df['State']==state) & (df['Weather_Condition']==weather)][feature].value_counts(normalize=True).round(2)\n\n        # Define lables to go with the pie plot\n        labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n        # Generate the pie plot\n        plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n        # Set axis,label and title\n        plt.axis('equal')\n        plt.xlabel(feature)\n        plt.title(state+': '+weather)\n\nplt.tight_layout()\nplt.show()","4568d81f":"# The weather condition for each state; for each of the following Severity (2,3,4), what's the weather conditions?\nfeature='Weather_Condition'\nseverity_lst=[2,3,4]\nfig_x=len(state_lst)\nfig_y=len(severity_lst)\n\n# Set the size of the figure\nfig= plt.figure(figsize=(5*fig_x,6*fig_y))\n\n# Cutoff percentage for display\npct_cutoff=2\n\n# Define autopct: only display the value if the percentage is greater than the predefined cutoff value\ndef my_autopct(pct):\n    return ('%1.0f%%' % pct) if pct > pct_cutoff else ''\n\n\n# Run a for loop for each weather condition\nfor i,severity in enumerate(severity_lst):\n    # Run a for loop for each state\n    for j,state in enumerate(state_lst):\n    \n        # Set a sub plot\n        plt.subplot(fig_y, fig_x, i*fig_x+j+1)\n        # Slice the dataframe for the specific state, weather condition and feature\n        df_temp=df[(df['State']==state) & (df['Severity']==severity)][feature].value_counts(normalize=True).round(2)\n\n        # Define lables to go with the pie plot\n        labels = [n if v > pct_cutoff\/100 else ''\n              for n, v in zip(df_temp.index, df_temp)] \n    \n        # Generate the pie plot\n        plt.pie(df_temp, labels=labels, autopct=my_autopct, shadow=True)\n    \n        # Set axis,label and title\n        plt.axis('equal')\n        plt.xlabel(feature)\n        plt.title(state+': severity-'+str(severity))\n\nplt.tight_layout()\nplt.show()","a74a376b":"### Step 2. Parameters, dataset and data manipulation\n   \n   #### B. Import the dataset","b7e8e469":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 3: With what weather condition do most accidents happen?\n      \n   ##### A. Top weather conditions with accidents ","84b9c84e":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 1: When do most accidents happen?\n      \n   ##### C. Rush hour","1f7edd0f":"### Step 3. Exploratory Data Analysis -- General\n\n   #### Accident visualization B: time series analysis, resample by month","bf451e14":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 2: Where do most accidents happen?\n      \n   ##### D. Street side","988d462f":"## How You Can Avoid Accident in 2020?","437d6d00":"### Step 3. Exploratory Data Analysis -- General\n\n   #### Accident visualization A: accident map","3fd65880":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 1: When do most accidents happen?\n      \n   ##### B. Weekday versus weekend","62a45591":"#### How many unique days with accident for each weekday\/weekend for each state in this dataset?","cc9047cd":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 2: Where do most accidents happen?\n      \n   ##### C. Zipcode","a9d894bb":"# How You Can Avoid Car Accident in 2020\nsee post on medium.com\nhttps:\/\/medium.com\/@RonghuiZhou\/how-you-can-avoid-car-accident-in-2020-c9626c9b6f68\n\n## Exploratory Data analysis for the States of NJ, PA & NY\n\n-----------------------------------------------------------------------------------------------------\n\n### Step 1. Import libraries\n\n### Step 2. Parameters, dataset and data manipulation\n   #### A. Define parameters\n   #### B. Import the dataset\n   #### C. Data manipulation: extract year, month, day, hour, weekday, and time to clear accidents\n   \n### Step 3. Exploratory Data Analysis -- General\n   #### Accident visualization A: accident map\n   #### Accident visualization B: time series analysis, resample by month\n   #### Accident visualization C: accident severity distribution for each state\n   #### Accident visualization D: how long does it take to clear the accident?\n   \n### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n   #### Question 1: When do most accidents happen?      \n   ##### A. Daytime versus nighttime\n   ##### B. Weekday versus weekend\n   ##### C. Rush hour\n\n   #### Question 2: Where do most accidents happen?      \n   ##### A. County\n   ##### B. City\n   ##### C. Zipcode\n   ##### D. Street side\n   ##### E. Location\n\n   #### Question 3: With what weather condition do most accidents happen?      \n   ##### A. Top weather conditions with accidents\n   ##### B. Accident severity for the top 3 weather conditions\n   ##### C. Weather conditions for each accident severity (2, 3, & 4)\n\n\n\n-----------------------------------------------------------------------------------------------------\n\n## Apply Machine Learning Algorithms to Predict Car Accidents\n\nUse LR\/KNN\/Decision Tree\/Random Forest classification algorithms from sklearn to predict the accident severity\n\nA separate file is made for Machine Learning per state.\n\nhttps:\/\/github.com\/RonghuiZhou\/us-accidents\/blob\/master\/Machine%20Learning%20for%20US%20Accidents_PA_RZhou.ipynb \n\n\n\n-----------------------------------------------------------------------------------------------------\n\n### Data source\nhttps:\/\/www.kaggle.com\/sobhanmoosavi\/us-accidents\n\n\n### Acknowledgements\n\nMoosavi, Sobhan, Mohammad Hossein Samavatian, Srinivasan Parthasarathy, and Rajiv Ramnath. \u201cA Countrywide Traffic Accident Dataset.\u201d, 2019.\n\nMoosavi, Sobhan, Mohammad Hossein Samavatian, Srinivasan Parthasarathy, Radu Teodorescu, and Rajiv Ramnath. \"Accident Risk Prediction based on Heterogeneous Sparse Data: New Dataset and Insights.\" In proceedings of the 27th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems, ACM, 2019.\n\n\n####  Author\nRonghui Zhou, zhou.uf@gmail.com\nhttps:\/\/github.com\/RonghuiZhou\/us-accidents","95dd5b4e":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 2: Where do most accidents happen?\n      \n   ##### B. City","2b87d7f9":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 2: Where do most accidents happen?\n      \n   ##### A. County","86d0b961":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 1: When do most accidents happen?\n      \n   ##### A. Daytime versus nighttime","e71d691c":"#### Time series analysis, resample by month","aee037ca":"### Step 2. Parameters, dataset and data manipulation\n   \n   #### A. Define parameters","5bc63660":"### Step 1. Import libraries","3fc41296":"#### How many unique days with accidents for each state in this dataset?","294b29b3":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 3: With what weather condition do most accidents happen?\n      \n   ##### C. Weather conditions for each accident severity (2, 3, & 4)","6b05ff83":"### Step 3. Exploratory Data Analysis -- General\n\n   #### Accident visualization D: how long does it take to clear the accident?","d197d65f":"### Step 3. Exploratory Data Analysis -- General\n\n   #### Accident visualization C: accident severity distribution for each state","eb551349":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 3: With what weather condition do most accidents happen?\n      \n   ##### B. Accident severity for the top 3 weather conditions","475da0e7":"### Step 4. Exploratory Data Analysis -- WWW (When, Where, & Weather)\n\n   #### Question 2: Where do most accidents happen?\n      \n   ##### E. Location","dd6f73fa":"#### How many days (Monday-Sunday) between the beginning and end of this dataset?","519991dc":"### Step 2. Parameters, dataset and data manipulation\n   \n   #### C. Data manipulation: extract year, month, day, hour, weekday, and time to clear accidents"}}