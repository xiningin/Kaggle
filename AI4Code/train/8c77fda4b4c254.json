{"cell_type":{"9510d693":"code","11f5fda6":"code","195a851f":"code","bc79f4da":"code","6f8b9787":"code","19526bd9":"code","ca375a16":"code","d59cae2e":"code","fe596505":"code","3a918f69":"code","065b254f":"code","7f47a426":"code","b58010eb":"code","2dcc40aa":"code","f2c91ac4":"code","815eb920":"code","c06a7bc1":"code","3c7559b5":"code","6450d461":"code","05e444d6":"code","2d57bdaa":"code","3175c84f":"code","4be3ea26":"code","53d8ed0a":"code","3c511b62":"code","417b1356":"code","6adc23f1":"code","b66c3dd3":"code","f3b1f006":"code","101543c1":"code","1f0a32e5":"code","ff59194e":"code","9defe8ce":"code","08cb38e5":"code","48991e40":"code","9f0c27f4":"code","f24824c1":"code","3f891843":"code","e6dc4f1f":"code","f317ccca":"code","25538e5a":"code","235ca9a6":"code","f793b551":"code","229811fe":"code","edf3c936":"code","5f3e3d25":"code","263f831c":"code","6ffb523e":"code","b67d0809":"code","d5ddf1dd":"code","5b65d510":"code","6ac6ccd1":"code","15a72ea4":"code","a04b960b":"code","9b161aad":"code","b3620e7f":"code","918d024d":"code","980d557a":"code","e23606ad":"code","9cf698cb":"code","39c560e4":"code","45b816d8":"code","a30e29b2":"code","f00c2549":"code","bb33b870":"code","bbd38073":"code","6742ff22":"code","7e2e54b1":"code","2e312c2a":"code","434212e7":"code","4902ca93":"code","10e8efba":"markdown","031cd6ba":"markdown","9b3ccb81":"markdown","2c1565b1":"markdown","c7e63d81":"markdown"},"source":{"9510d693":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11f5fda6":"#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","195a851f":"FILEPATH = '\/kaggle\/input\/tamilnadu-cropproduction\/Tamilnadu agriculture yield data.csv'","bc79f4da":"df = pd.read_csv(FILEPATH)","6f8b9787":"df.sample()","19526bd9":"df.describe()","ca375a16":"df.info()","d59cae2e":"list(df.columns)","fe596505":"df.isnull().any().any()","3a918f69":"df.isnull().any()","065b254f":"import missingno as mino","7f47a426":"mino.matrix(df)","b58010eb":"mino.dendrogram(df)","2dcc40aa":"mino.bar(df)","f2c91ac4":"df.sample(3)","815eb920":"df.reset_index(inplace=True)","c06a7bc1":"df.sample(3)","3c7559b5":"df['State_Name'].unique()","6450d461":"# We can remove the state as there is no use of it.\n\ndf = df.drop(['State_Name'], axis = 1)","05e444d6":"df.sample(3)","2d57bdaa":"df['District_Name'] = df['District_Name'].apply(lambda x: x.title())","3175c84f":"df.dropna(how='any', inplace=True)","4be3ea26":"# Google Translator\n\n!pip install googletrans","53d8ed0a":"# clean up season\n\nfrom googletrans import Translator\n\ntranslator = Translator()","3c511b62":"def convert_me(msg):\n    translation = translator.translate(msg, dest='en')\n    return(translation.text)","417b1356":"df['Season'].unique()","6adc23f1":"convert_me('Kharif')","b66c3dd3":"convert_me('Rabi')","f3b1f006":"season_map = {\n    'Kharif' : 'Autumn',\n    'Rabi' : 'Spring',\n    'Whole Year' : 'Whole Year'\n}\n\ndef convert_season(season):\n    \n    return season_map[season]","101543c1":"df['Season'] = df['Season'].apply(convert_season)","1f0a32e5":"df.sample(5)","ff59194e":"df.sample(3)","9defe8ce":"df['Production'].unique()","08cb38e5":"import plotly.express as px\nimport plotly.graph_objects as go","48991e40":"district_df = df[['District_Name', 'Production']]","9f0c27f4":"district_df.sample(2)","f24824c1":"district_df = pd.DataFrame(district_df['Production'].value_counts().head(10)).reset_index()","3f891843":"district_df.sample(3)","e6dc4f1f":"state_fig = go.Figure(data=[go.Pie(labels=district_df['index'],\n                             values=district_df['Production'],\n                             hole=.7,\n                             title = 'Count by District',\n                             marker_colors = px.colors.sequential.Blues_r,\n                            )\n                     ])\nstate_fig.update_layout(title = '% by District')\nstate_fig.show()","f317ccca":"df.sample(2)","25538e5a":"district_production_group = df.groupby(\"District_Name\")[\"Production\"].sum().sort_index(ascending=True)","235ca9a6":"dist_prod_df = pd.DataFrame({'District_Name': district_production_group.index,\n                        'Production': district_production_group.values})\n\n# dist_prod_df","f793b551":"import plotly.express as px\n\nfig = px.bar(dist_prod_df, x=\"Production\", y=\"District_Name\", orientation='h', color = 'Production')\nfig.show()","229811fe":"# Unique crop\n\ndf['Crop'].unique()","edf3c936":"# Which district produce more Brinjal?\n\ndef show_production_by_crop_and_district(df, crop):\n    \n    df = df[df['Crop'] == crop]\n    \n    current_group = df.groupby(\"District_Name\")[\"Production\"].sum().sort_index(ascending=True)\n    \n    current_df = pd.DataFrame({'District_Name': current_group.index,\n                        'Production': current_group.values})\n    \n    fig = px.bar(current_df, x=\"Production\", y=\"District_Name\", orientation='h', color = 'Production')\n    fig.show()","5f3e3d25":"show_production_by_crop_and_district(df, 'Grapes')","263f831c":"show_production_by_crop_and_district(df, 'Sunflower')","6ffb523e":"show_production_by_crop_and_district(df, 'Coconut')","b67d0809":"show_production_by_crop_and_district(df, 'Tapioca')","d5ddf1dd":"df.sample(4)","5b65d510":"def show_production_by_crop_and_dist(df, district):\n    \n    df = df[df['District_Name'] == district]\n    \n#     return df\n    \n    current_group = df.groupby(\"Crop_Year\")[\"Production\"].sum().sort_index(ascending=True)\n    \n    current_df = pd.DataFrame({'Crop_Year': current_group.index,\n                        'Production': current_group.values})\n    \n    fig = px.bar(current_df, x=\"Production\", y=\"Crop_Year\", orientation='h', color = 'Production')\n    fig.show()","6ac6ccd1":"show_production_by_crop_and_dist(df, 'Madurai')","15a72ea4":"import matplotlib.pyplot as plt\n\ndef show_donut_plot(col, max_cols = 10):\n    \n    rating_data = df.groupby(col)[['index']].count().head(max_cols)\n    plt.figure(figsize = (12, 8))\n    plt.pie(rating_data[['index']], autopct = '%1.0f%%', startangle = 140, pctdistance = 1.1, shadow = True)\n\n    # create a center circle for more aesthetics to make it better\n    gap = plt.Circle((0, 0), 0.5, fc = 'white')\n    fig = plt.gcf()\n    fig.gca().add_artist(gap)\n    \n    plt.axis('equal')\n    \n    cols = []\n    for index, row in rating_data.iterrows():\n        cols.append(index)\n    plt.legend(cols)\n    \n    plt.title('Donut Plot by ' +str(col), loc='center')\n    \n    plt.show()","a04b960b":"show_donut_plot('District_Name')","9b161aad":"show_donut_plot('Crop_Year', 8)","b3620e7f":"import squarify\n\ndef show_treemap(col, max_labels = 10):\n    \n    df_type_series = df.groupby(col)['index'].count().sort_values(ascending = False).head(20)\n\n    type_sizes = []\n    type_labels = []\n    for i, v in df_type_series.items():\n        type_sizes.append(v)\n        \n        type_labels.append(str(i) + ' ('+str(v)+')')\n\n\n    fig, ax = plt.subplots(1, figsize = (12,12))\n    squarify.plot(sizes=type_sizes, \n                  label=type_labels[:max_labels],  # show labels for only first 10 items\n                  alpha=.2 )\n    \n    plt.title('TreeMap: Count by '+ str(col))\n    plt.axis('off')\n    plt.show()","918d024d":"show_treemap('Crop_Year')","980d557a":"show_treemap('District_Name')","e23606ad":"df.sample(2)","9cf698cb":"fig = px.sunburst(df, path=['District_Name', 'Crop_Year'], values='Production',\n                  color='Production', hover_data=['Production'])\nfig.show()","39c560e4":"fig = px.sunburst(df, path=['Crop_Year', 'Season'], values='Production',\n                  color='Production', hover_data=['Production'])\nfig.show()","45b816d8":"df['Crop_Year'].max()","a30e29b2":"last_4_years_df = df[df['Crop_Year'] > 2009]","f00c2549":"fig = px.sunburst(last_4_years_df, path=['Crop_Year', 'Season'], values='Area',\n                  color='Area', hover_data=['Area'])\nfig.show()","bb33b870":"fig = px.sunburst(last_4_years_df, path=['Crop_Year', 'Crop'], values='Area',\n                  color='Area', hover_data=['Area'])\nfig.show()","bbd38073":"df.sample(2)","6742ff22":"theni_df = df[df['District_Name'] == 'Theni']\ntheni_df = theni_df[theni_df['Crop_Year'] > 2009]","7e2e54b1":"fig = px.sunburst(theni_df, path=['Crop_Year', 'Crop'], values='Area',\n                  color='Area', hover_data=['Area'])\nfig.show()","2e312c2a":"def show_crop_sunburtst_by_district(district = 'Theni'):\n    \n    current_df = df[df['District_Name'] == district]\n    current_df = current_df[current_df['Crop_Year'] > 2009]\n    \n    fig = px.sunburst(current_df, path=['Crop_Year', 'Crop'], values='Area',\n                  color='Area', hover_data=['Area'])\n    fig.show()","434212e7":"show_crop_sunburtst_by_district('Madurai')","4902ca93":"show_crop_sunburtst_by_district('Kanniyakumari')","10e8efba":"As Googletrans is not translating the word properly, we are using our own knowledge to fix is.\n\nRabi in Arabic means Spring. So, we use Spring season","031cd6ba":"### Single District Production Rate","9b3ccb81":"**To do:**\n\n* Add some documentation for each plot\n* Add more visuals","2c1565b1":"<font color=\"blue\" size=+1.5><b>Check out my other kernels<\/b><\/font>\n\n<table style=\"font-family: 'Trebuchet MS', Arial, Helvetica, sans-serif;border-collapse: collapse;width: 100%;\">\t\n  <tr>\n    <th style=\"border: 1px solid #ddd;padding: 8px; padding-top: 12px;padding-bottom: 12px;text-align: left;background-color: #2987E7;color: white;\">Notebook<\/th>\n    <th style=\"border: 1px solid #ddd;padding: 8px; padding-top: 12px;padding-bottom: 12px;text-align: left;background-color: #2987E7;color: white;\">Tags<\/th>\n  <\/tr>\n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/reviews-with-nlp-wip\">Amazon Alexa Reviews with NLP<\/a> <\/td>\n    <td style=\"text-align: left\">NLP, Spacy<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/sof-questions-eda-and-visual\">SOF Questions - EDA and Visual<\/a> <\/td>\n    <td style=\"text-align: left\">Data Visual, Plotly<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"background-color: #f2f2f2;text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/netflix-visualization-plotly-plots-treemap\">Netflix - Visualization, Plotly, Plots, and Treemap<\/a> <\/td>\n    <td style=\"background-color: #f2f2f2;text-align: left\">Data Visual, Data Cleaning, Plotly<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/prediction-with-various-algorithms\">Prediction with various Algorithms<\/a> <\/td>\n    <td style=\"text-align: left\">Random Forest, Logistic Regression<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"background-color: #f2f2f2;text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/eda-and-visualization\">EDA and Visualization<\/a> <\/td>\n    <td style=\"background-color: #f2f2f2;text-align: left\">Data Cleaning, Data Visual<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/job-analysis-eda-visual\">Job Analysis - EDA and Visual<\/a> <\/td>\n    <td style=\"text-align: left\">Data Visual, EDA, Plotly<\/td>\n  <\/tr>   \n  <tr>\n    <td style=\"background-color: #f2f2f2;text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/estonia-disaster-visualization\">Estonia Disaster - Visualization<\/a> <\/td>\n    <td style=\"background-color: #f2f2f2;text-align: left\">Data Visual, EDA, Data Cleaning<\/td>\n  <\/tr>\n    \n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/pandas-dundas-challenge-100\" >Pandas 100+ exercises collection<\/a><\/td>\n    <td style=\"text-align: left\">Pandas, Data Manipulation<\/td>\n  <\/tr>   \n  <tr>\n    <td style=\"background-color: #f2f2f2;text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/prediction-with-various-algorithms\">Credit Card Fraud - Prediction with various algorithms<\/a><\/td>\n    <td style=\"background-color: #f2f2f2;text-align: left\">Various ML Algorithms<\/td>\n  <\/tr>  \n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/linear-equations-real-time\">Linear Equations - Real Time<\/a> <\/td>\n    <td style=\"text-align: left\">Linear Equation<\/td>\n  <\/tr>  \n<\/table>\n\n","c7e63d81":"**Final Notes:**\n\nI am adding things still. You can come back and check for more information.\n\nAlso, if you **like my notebook**, <font style=\"color:blue;size:14px;\">please upvote it<\/font> as it will motivate me to come up with better approach in the upcoming notebooks."}}