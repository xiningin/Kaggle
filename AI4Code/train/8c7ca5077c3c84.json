{"cell_type":{"516e775b":"code","679ff3c2":"code","4c4c989a":"code","a66d97cc":"code","e9eb77c2":"code","f54425ba":"code","2fbe8a0a":"code","15f5ef4b":"code","d8c8dd88":"code","4c91a49d":"code","0d63e05f":"code","9d28673e":"code","b1f972a0":"code","75371363":"code","bacc60c7":"code","fb635887":"code","e2ef5ffd":"code","d6af32c4":"code","419defb7":"code","92aa0630":"code","24e62b60":"code","3fa88dd9":"code","dd94fc1a":"markdown","2f68cf99":"markdown","1d9aa74e":"markdown","d09e8476":"markdown","33a513fb":"markdown"},"source":{"516e775b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder","679ff3c2":"anime_data = pd.read_csv('..\/input\/anime-recommendations-database\/anime.csv', index_col='anime_id')\nanime_data.info()","4c4c989a":"#anime_data['rating'].fillna(-1, inplace=True)\n#change Unknown as NaN\nanime_data.replace(\"Unknown\", np.nan, inplace=True)\n#remove all NaN values\nanime_data.dropna(inplace=True)\n\n#convert episodes to numeric\nanime_data['episodes']=pd.to_numeric(anime_data['episodes'])\n\ntotal_rows=anime_data.shape[0]","a66d97cc":"#capture all genres\ngenres=[]\nfor group_genres in anime_data['genre']:\n    if not pd.isna(group_genres):\n        split_genres=group_genres.split(',')\n        for genre in split_genres:\n            genre=genre.strip()\n            if genres.count(genre)==0:\n                genres.append(genre)\n#create cols by genres\nfor genre in genres:\n    anime_data['genre_'+genre]=[False for i in range(anime_data.shape[0])]","e9eb77c2":"def set_genre(row):\n    '''set True in the col of relative genre'''\n    if not pd.isna(row['genre']):\n        genres=row['genre'].split(',')\n        for genre in genres:\n            genre=genre.strip()\n            row['genre_'+genre] = True\n    return row\n#set genre True in correct places\nanime_data = anime_data.apply(set_genre, axis=1)","f54425ba":"print(anime_data['type'].unique())\nprint(genres)","2fbe8a0a":"anime_data.head()","15f5ef4b":"for p in range(7, 2, -1):\n    total=anime_data.query(\"rating <\"+str(p))['rating'].count()\n    print(\"Anime less than rating %.1f: %d relative the %.2f%% of the data\" % (p, total, ((total*100)\/total_rows)))","d8c8dd88":"total=anime_data.query(\"rating >=7\")['rating'].count()\nprint(\"Anime more or equal than rating 7.0: %d relative the %.2f%% of the data\" % (total, ((total*100)\/total_rows)))\nfor p in range(8, 10):\n    total=anime_data.query(\"rating >\"+str(p))['rating'].count()\n    print(\"Anime more than rating %.1f: %d relative the %.2f%% of the data\" % (p, total, ((total*100)\/total_rows)))","4c91a49d":"total=anime_data.query(\"rating<=7 and rating>=6\")['rating'].count()\nprint('Anime with rating between 7 and 6 inclusive: %d relative the %.2f%% of the data' % (total, ((total*100)\/total_rows)))","0d63e05f":"plt.figure(figsize=(14,6))\nplt.title(\"Compare Rating per Members\")\nsns.lineplot(x=anime_data['rating'], y=anime_data['members'])","9d28673e":"plt.figure(figsize=(14,6))\nplt.title(\"Compare Type per Members\")\nsns.barplot(x=anime_data['type'], y=anime_data['members'])","b1f972a0":"plt.figure(figsize=(14,6))\nplt.title(\"Compare Rating per Members by each type\")\n\nfor val in anime_data['type'].unique():\n    sns.lineplot(x=anime_data[anime_data['type']==val]['rating'], y=anime_data[anime_data['type']==val]['members'], label=val)\nplt.legend()","75371363":"plt.figure(figsize=(14,6))\nplt.title(\"Compare Episodes per Members by each type (without TV)\")\n\nfor val in anime_data['type'].unique():\n    if val=='TV':\n        continue\n    sns.lineplot(x=anime_data[anime_data['type']==val]['rating'], y=anime_data[anime_data['type']==val]['members'], label=val)\nplt.legend()","bacc60c7":"plt.figure(figsize=(14,6))\nplt.title(\"Compare Episodes per Members\")\nsns.lineplot(x=anime_data['episodes'], y=anime_data['members'])","fb635887":"anime_data.describe()","e2ef5ffd":"anime_data[anime_data['episodes']>1000]","d6af32c4":"anime_data[anime_data['rating']==10].head()","419defb7":"#create a new database based in genre\ngenre_cols=['genre', 'rating', 'members', 'episodes']\ngenre_data=pd.DataFrame(columns=genre_cols)\nfor genre in genres:\n    col_name=\"genre_\" + genre\n    aux_data = anime_data.groupby(col_name).agg({ 'rating': 'mean', 'members': 'sum', 'episodes': 'sum' })\n    aux_data['genre']=genre\n    genre_data=genre_data.append(aux_data[aux_data.index==True][genre_cols], ignore_index=True)\ngenre_data.set_index('genre', inplace=True)\n\n#I don't know why, but members is object in this part\ngenre_data['members']=pd.to_numeric(genre_data['members'])\ngenre_data['episodes']=pd.to_numeric(genre_data['episodes'])","92aa0630":"genre_data.info()","24e62b60":"genre_data_top = genre_data.sort_values('rating', ascending=False)[:10]\nplt.figure(figsize=(14,6))\nplt.title(\"Genrer per rating Top 10\")\nsns.barplot(x=genre_data_top.index, y=genre_data_top['rating'])","3fa88dd9":"genre_data_members_top = genre_data.sort_values('members', ascending=False)[:10]\n\nplt.figure(figsize=(14,6))\nplt.title(\"Genrer per members Top 10\")\nsns.barplot(x=genre_data_members_top.index, y=genre_data_members_top['members'])","dd94fc1a":"Anime with more 1000 episodes, have lower rating:","2f68cf99":"Anime with rating 10.0:","1d9aa74e":"67% of the animes is less than rating 7.0. 40.64% of rating are between 7.0 and 6.0 inclusive. But below in the graph, you can see the number of members by rating, the majority is between 8.0 and 9.0.","d09e8476":"# Compare Rating","33a513fb":"1. Create predict based in one list of animes\n2. New anime predict rating and members by genre, type and episodes"}}