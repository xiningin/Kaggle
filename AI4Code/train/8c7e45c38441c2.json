{"cell_type":{"885cfb99":"code","6fe80166":"code","48bc0472":"code","29d32179":"code","cbc06f24":"code","b4324ec4":"code","a7cc17f5":"code","ad323309":"code","74440d01":"code","5620c440":"code","91c0c0f7":"code","0ea55b15":"code","5619b4b7":"code","6a4f820c":"code","5d01c2f9":"code","b5ce5a47":"code","6f760f3a":"code","a371fca5":"code","93f3c3eb":"code","dc43e1c5":"code","870ed4a5":"code","6813fb2f":"code","0128019c":"code","3d76e0b9":"code","a960541a":"code","8e4ec65f":"code","8e0cbe65":"code","756e921b":"code","ce96f47d":"code","4cc1dcd7":"code","8c03aa60":"code","3aa00d57":"code","c780ab04":"code","74d93fc2":"code","ead34284":"code","dc15b2da":"code","00071739":"code","17ed00f9":"code","a355f3da":"code","1989fc1a":"code","1565cddf":"code","57c411e9":"code","30989cd8":"code","4744bfe1":"code","9aee89ae":"code","afffeb05":"code","9622ddca":"code","e7a1f5e7":"code","5bec3587":"code","736bb451":"code","50c6905e":"code","6c019746":"code","342644d3":"code","66de2fff":"code","d2d7f69b":"code","97cd79c4":"code","c100d7fe":"code","e959685c":"code","6685c0a9":"code","1b9bc026":"code","4587fd7a":"code","306d8279":"code","635d467d":"code","bed1921f":"code","7ade4022":"code","da767833":"code","8aec348f":"code","9379bcb0":"code","3d579c89":"code","6bf07fcb":"code","47d8b609":"code","a8ffb146":"code","36a255a8":"code","b73d6714":"code","52af5dee":"code","c614bbe9":"code","7a6e87ff":"code","5f01ea18":"code","adad7ba4":"code","735245f9":"code","46f2a99c":"code","bfd3e8b5":"code","b98fbd0e":"markdown","280c9d67":"markdown","757083b1":"markdown","f5d1a3ae":"markdown","960d7aa8":"markdown","03cbd7b9":"markdown","94cfd63c":"markdown","3922f4a0":"markdown","aa79863d":"markdown","44d9f62d":"markdown","80427682":"markdown","ca689346":"markdown","e1942041":"markdown","5df6ed3d":"markdown","1195b02f":"markdown","f80a083e":"markdown","da2856e0":"markdown","0e429935":"markdown","5c379966":"markdown","7dfbdda7":"markdown","2188206e":"markdown","cd39a650":"markdown","391ed416":"markdown","3944ecf8":"markdown","595098bd":"markdown","e3463fee":"markdown","c8527b1e":"markdown","e646f06f":"markdown"},"source":{"885cfb99":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport warnings\nfrom sklearn.svm import SVC\n\nfrom sklearn import ensemble\nfrom xgboost import XGBClassifier\nfrom matplotlib import pyplot as plt\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import cross_validate\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","6fe80166":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","48bc0472":"#Reading the data\ntrain_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","29d32179":"train_df.head()","cbc06f24":"train_df.describe().T","b4324ec4":"train_df.shape","a7cc17f5":"test_df.head()","ad323309":"test_df.describe().T","74440d01":"test_df.shape","5620c440":"import missingno as mss_val\nmss_val.bar(train_df)","91c0c0f7":"mss_val.bar(test_df)","0ea55b15":"del train_df['Cabin']\ndel test_df['Cabin']","5619b4b7":"train_df.isnull().sum().reset_index()","6a4f820c":"train_df['Embarked'].value_counts().reset_index()","5d01c2f9":"train_df['Embarked'] = train_df['Embarked'].fillna('S')\ntrain_df['Embarked'].isnull().sum()","b5ce5a47":"Age = train_df['Age']\nax = sns.distplot(Age , color='g')","6f760f3a":"train_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())\ntrain_df['Age'].isnull().sum()","a371fca5":"test_df.isnull().sum().reset_index()","93f3c3eb":"Age = test_df['Age']\nax = sns.distplot(Age , color='g')","dc43e1c5":"test_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())\ntest_df['Age'].isnull().sum()","870ed4a5":"test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())\ntest_df['Fare'].isnull().sum()","6813fb2f":"train_df.head()","0128019c":"train_df.shape","3d76e0b9":"fig = plt.subplots(figsize = (8,8))\nSurvived = train_df['Survived']\nax = sns.countplot(Survived,palette = \"husl\")\nfor i in ax.patches:\n    height = i.get_height()\n    width = i.get_width()\n    ax.text(i.get_x() + width\/2, height + 1,height ,ha=\"center\")","a960541a":"fig,ax = plt.subplots(figsize = (15,6))\nfig.suptitle('Passengers who are all survived based on passenger accompanied by Parent or Children', fontsize=20)\nParch = train_df['Parch']\nsns.countplot(x = Parch, data = train_df, palette = 'husl')\nfor i in ax.patches:\n    height = i.get_height()\n    width = i.get_width()\n    ax.text(i.get_x() + width\/2, height + 1,height ,ha=\"center\")","8e4ec65f":"sns.set_theme(style='darkgrid')\nfig,ax = plt.subplots(1,2,figsize = (25,8))\nfig.suptitle('Passengers who are all survived based on passenger accompanied by Parent or Children', fontsize=20)\nParch = train_df['Parch']\nsns.countplot(x = Parch, data = train_df, hue = 'Survived', ax = ax[0],palette = 'husl')\nsns.histplot(x = Parch, data = train_df[train_df['Survived']==1], hue = 'Sex', ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = \"center\")","8e0cbe65":"fig,ax = plt.subplots(1,2,figsize = (20,6))\nfig.suptitle('Age distribution of Passengers who accompanined with siblings \/ spouce', fontsize=15)\nAge = train_df['Age']\nsns.histplot(x = Age,kde = True, hue = 'Sex', data = train_df[train_df['Parch'] >= 1],ax = ax[0])\nsns.histplot(x = Age,kde = True, hue = 'Survived', data = train_df[train_df['Parch'] >= 1],ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","756e921b":"fig,ax = plt.subplots(1,2,figsize = (25,8))\nfig.suptitle('Age distribution of Passengers who travelled with one or more siblings \/ spouce', fontsize=15)\nAge = train_df['Age']\nsns.histplot(x = Age,kde = True, hue = 'Sex', data = train_df[train_df['Parch'] <= 1],ax = ax[0])\nsns.histplot(x = Age,kde = True, hue = 'Survived', data = train_df[train_df['Parch'] <= 1],ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","ce96f47d":"sns.set_theme(style=\"darkgrid\")\nfig,ax  = plt.subplots(1,4,figsize = (25,8))\nfig.suptitle('Passengers who are all survived based on Passenger Class', fontsize=20)\nPclass = train_df['Pclass']\nsns.countplot(x = Pclass, data = train_df, ax = ax[0])\nsns.countplot(x= Pclass, data = train_df, hue = 'Survived', palette = 'husl', ax = ax[1])\nsns.countplot(x = Pclass, data = train_df, hue = 'Sex', ax = ax[2])\nsns.histplot(x = Pclass, data = train_df[train_df['Survived']==1],hue = 'Sex',ax = ax[3] )\nfor p in np.arange(4):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + i.get_width()\/2., height + 1, height, ha = 'center')","4cc1dcd7":"fig,ax = plt.subplots(1,2,figsize = (25,8))\nfig.suptitle('Age distribution of Passengers based on the Passengers Class 1', fontsize=15)\nAge = train_df['Age']\nsns.histplot(x = Age,kde = True, hue = 'Sex', data = train_df[train_df['Pclass'] == 1],ax = ax[0])\nsns.histplot(x = Age,kde = True, hue = 'Survived', data = train_df[train_df['Pclass'] == 1],ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","8c03aa60":"fig,ax = plt.subplots(1,2,figsize = (25,8))\nfig.suptitle('Age distribution of Passengers based on Passenger Class 2', fontsize=15)\nAge = train_df['Age']\nsns.histplot(x = Age,kde = True, hue = 'Sex', data = train_df[train_df['Pclass'] == 2],ax = ax[0])\nsns.histplot(x = Age,kde = True, hue = 'Survived', data = train_df[train_df['Pclass'] == 2],ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","3aa00d57":"fig,ax = plt.subplots(1,2,figsize = (25,8))\nfig.suptitle('Age distribution of Passengers based on Passenger Class 3', fontsize=15)\nAge = train_df['Age']\nsns.histplot(x = Age,kde = True, hue = 'Sex', data = train_df[train_df['Pclass'] == 3],ax = ax[0])\nsns.histplot(x = Age,kde = True, hue = 'Survived', data = train_df[train_df['Pclass'] == 3],ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","c780ab04":"fig,ax = plt.subplots(figsize = (9,9))\nfig.suptitle('Number of Passenger travelling in the Ship based on Gender', fontsize=15)\nGender = train_df['Sex'].value_counts()\nplt.pie(x=Gender,autopct=\"%.1f%%\",labels = train_df['Sex'].value_counts().index,pctdistance=0.5)","74d93fc2":"Gender.reset_index()","ead34284":"fig,ax = plt.subplots(figsize = (15,8))\nfig.suptitle('Passengers who are all survived', fontsize=15)\nSex = train_df['Sex']\nsns.countplot(x=Sex,data = train_df,hue = 'Survived', palette = \"husl\")\nfor i in ax.patches:\n    height = i.get_height()\n    width = i.get_width()\n    ax.text(i.get_x()+ i.get_width()\/2., height + 1,height ,ha=\"center\")","dc15b2da":"fig,ax = plt.subplots(1,2,figsize = (30,10))\nfig.suptitle('Age distribution of Passengers who travelled with one or more siblings \/ spouce', fontsize = 20)\nAge = train_df['Age']\nsns.histplot(x = Age,kde = True, hue = 'Sex', data = train_df ,ax = ax[0])\nsns.histplot(x = Age,kde = True, hue = 'Survived', data = train_df ,ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","00071739":"fig,ax = plt.subplots(figsize = (20,8))\nfig.suptitle('Passengers who are all survived based on Passenger accompanied by Sibilings or Spouse', fontsize=20)\nSibsp = train_df['SibSp']\nsns.countplot(x = Sibsp, data = train_df, palette = 'husl')\nfor i in ax.patches:\n    height = i.get_height()\n    width = i.get_width()\n    ax.text(i.get_x()+ i.get_width()\/2., height + 1,height ,ha=\"center\")","17ed00f9":"sns.set_theme(style=\"darkgrid\")\nfig,ax = plt.subplots(1,3,figsize = (25,10))\nfig.suptitle('Passengers who are all survived based on Passenger accompanied by Sibilings or Spouse', fontsize=20)\nsns.countplot(x = Sibsp, data = train_df, hue = 'Survived', palette = 'husl',ax = ax[0])\nsns.countplot(x = Sibsp, data = train_df, hue = 'Sex', ax = ax[1])\nsns.histplot(x = Sibsp, data = train_df[train_df['Survived'] == 1], hue = 'Sex',ax = ax[2])\nfor p in np.arange(3):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha=\"center\")","a355f3da":"fig,ax = plt.subplots(1,2,figsize = (20,8))\nfig.suptitle('Age distribution of Passengers based on Passenger accompanied by two or more Sibilings', fontsize=15)\nAge = train_df['Age']\nsns.histplot(x = Age,hue = 'Sex', data = train_df[train_df['SibSp'] >= 2] ,ax = ax[0])\nsns.histplot(x = Age,hue = 'Survived', data = train_df[train_df['SibSp'] >= 2] ,ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","1989fc1a":"fig,ax = plt.subplots(1,2,figsize = (30,10))\nfig.suptitle('Age distribution of Passengers based on Passenger accompanined by less than two Siblings', fontsize=15)\nAge = train_df['Age']\nsns.histplot(x = Age,kde = True, hue = 'Sex', data = train_df[train_df['SibSp'] <2 ] ,ax = ax[0])\nsns.histplot(x = Age,kde = True, hue = 'Survived', data = train_df[train_df['SibSp'] <2 ] ,ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","1565cddf":"fig,ax = plt.subplots(figsize = (20,8))\nFare = train_df['Fare']\nsns.histplot(x = Fare, bins = 30,color = 'g')\nfor i in ax.patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax.text(i.get_x() + width\/2., height + 1, height, ha = 'center')","57c411e9":"sns.set_theme(style=\"darkgrid\")\nfig,ax = plt.subplots(1,2,figsize = (20,8))\nsns.histplot(x = Fare, hue = 'Sex', data = train_df[train_df['Age']>=50], color = 'g',ax = ax[0])\nsns.histplot(x = Fare, bins = 30, hue ='Survived' ,kde =True, data = train_df[train_df['Fare'] < 50], color = 'g',ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","30989cd8":"sns.set_theme(style=\"darkgrid\")\nfig,ax = plt.subplots(1,4, figsize = (20,8))\nfig.suptitle('Passengers who are all survived based on Embarked', fontsize=20)\nEmbarked = train_df['Embarked']\nsns.countplot(x = Embarked, data = train_df, ax = ax[0])\nsns.countplot(x = Embarked, data = train_df, hue = 'Sex', ax = ax[1])\nsns.countplot(x = Embarked, data = train_df, hue = 'Survived', palette = 'husl', ax = ax[2])\nsns.histplot(x = Embarked,data = train_df[train_df['Survived']==1], hue = 'Sex', ax = ax[3])\nfor p in np.arange(4):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2, height + 1, height, ha=\"center\")","4744bfe1":"sns.set_theme(style = 'darkgrid')\nfig,ax = plt.subplots(1,3,figsize = (20,8))\nfig.suptitle('Number of Passenger Survived based on Age Distribution', fontsize = 20)\nAge = train_df['Age']\nsns.histplot(x = Age, kde = True, data = train_df, color = 'g', ax = ax[0])\nsns.histplot(x = Age, data = train_df, hue = 'Sex', ax = ax[1])\nsns.histplot(x = Age, data = train_df, hue = 'Survived', ax = ax[2])\nfor p in np.arange(3):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","9aee89ae":"sns.set_theme(style = 'darkgrid')\nfig,ax = plt.subplots(1,2,figsize = (20,8))\nfig.suptitle('Number of Senior Passenger Survived', fontsize = 20)\nAge = train_df['Age']\nsns.histplot(x = Age, data = train_df[train_df['Age'] >= 50], hue = 'Sex', ax = ax[0])\nsns.histplot(x = Age, data = train_df[train_df['Age'] >= 50], hue = 'Survived', ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","afffeb05":"sns.set_theme(style = 'darkgrid')\nfig,ax = plt.subplots(1,2,figsize = (20,8))\nfig.suptitle('Number of Teenaged Passenger Survived', fontsize = 20)\nAge = train_df['Age']\nsns.histplot(x = Age, data = train_df[train_df['Age'] < 18 ], hue = 'Sex', ax = ax[0])\nsns.histplot(x = Age, data = train_df[train_df['Age'] < 18 ], hue = 'Survived', ax = ax[1])\nfor p in np.arange(2):\n    for i in ax[p].patches:\n        height = i.get_height()\n        width = i.get_width()\n        ax[p].text(i.get_x() + width\/2., height + 1, height, ha = 'center')","9622ddca":"ids = test_df['PassengerId']","e7a1f5e7":"train_df = train_df.drop(['PassengerId','Name','Ticket'],axis = 1)\ntest_df = test_df.drop(['PassengerId','Name','Ticket'],axis = 1)","5bec3587":"train_df = pd.get_dummies(train_df)\ntest_df = pd.get_dummies(test_df)","736bb451":"train_corr = train_df.corr()\nmask = np.triu(np.ones_like(train_corr, dtype=bool))\nfig, ax = plt.subplots(figsize=(20, 9))\nax.tick_params(axis='both', which='major', labelsize=12)\nhm = sns.heatmap(train_corr,mask = mask, cmap=\"coolwarm\",center=0, square=True, linewidths=1.5, linecolor=\"#424949\", annot=True,\n            cbar_kws={\"shrink\": 0.6}).set_title('Variable correlation', fontsize=\"14\")","50c6905e":"X_train, X_test, y_train, y_test = train_test_split(train_df.drop('Survived', axis=1),train_df['Survived'],test_size=0.3,random_state=0) \n\nX_train.shape, X_test.shape","6c019746":"train_df.isnull().sum()","342644d3":"test_df.isnull().sum()","66de2fff":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train_std = scaler.transform(X_train)\nX_test_std = scaler.transform(X_test)","d2d7f69b":"X_train_std","97cd79c4":"X_test_std","c100d7fe":"logReg = LogisticRegression(penalty='l1', solver='liblinear')\nlogReg.fit(X_train_std, y_train)\npredictions = logReg.predict(X_test_std)\nprint(f\"The score on the Test-dataset is {logReg.score(X_test_std, y_test)}\")\nprint(f\"The score on the Train-dataset is {logReg.score(X_train_std, y_train)}\")","e959685c":"accuracy_score = cross_val_score(logReg, X_train_std, y_train, cv= 9,scoring='accuracy')\nprint(f'The Cross-Valiation accuracy Score is {accuracy_score.mean()}')","6685c0a9":"model_performance = {}\nmodel_performance['Logistic Regression(Lasso)'] = accuracy_score.mean()","1b9bc026":"param_dict_lr = {'C' : [1e-6,1e-5,1e-4,1e-3,1e-2,1e-1,1,10,100,1e-3,1e+4,1e+5,1e+6]}\n\n# Create an instance of the RandomForestClassifier\nLogReg_model = LogisticRegression()\n\n# Grid search\nLogReg_grid = GridSearchCV(estimator = LogReg_model, param_grid = param_dict_lr, cv = 5, verbose=2, scoring='roc_auc')\nLogReg_grid.fit(X_train_std,y_train)","4587fd7a":"LogReg_Optimal_model = LogReg_grid.best_estimator_\ntrain_class_preds = LogReg_Optimal_model.predict(X_train_std)\ntest_class_preds = LogReg_Optimal_model.predict(X_test_std)\nprint('Train ROC-AUC score : ', LogReg_Optimal_model.score(X_train_std,y_train))\nprint('Test ROC-AUC score : ', LogReg_Optimal_model.score(X_test_std,y_test))","306d8279":"#cross-val score\naccuracy_score = cross_val_score(LogReg_Optimal_model, X_train_std, y_train, cv= 9,scoring='accuracy')\nprint(f'The Cross-Valiation Score is {accuracy_score.mean()}')","635d467d":"model_performance['Logistic Regression (Cross Validation)'] = accuracy_score.mean()","bed1921f":"param_svc_dict = [{ \"C\" : [0.1,0.3,0.33,0.331,0.34,0.24,0.29], \n                   \"gamma\" : ['scale',0.081,0.095,0.08,0.06,0.3,0.09,0.1,0.091,0.25], \n                   \"kernel\" : ['rbf'] },]","7ade4022":"clf_svc = SVC()\nclf_svc_grid = RandomizedSearchCV(estimator = clf_svc, param_distributions = param_svc_dict, cv = 5, verbose=2, scoring='roc_auc')\nclf_svc_grid.fit(X_train_std,y_train)\nclf_svc_grid.best_params_","da767833":"clf_svc_optimal = clf_svc_grid.best_estimator_\nprint('Train ROC-AUC score : ', clf_svc_optimal.score(X_train_std,y_train))\nprint('Test ROC-AUC score : ', clf_svc_optimal.score(X_test_std,y_test))","8aec348f":"accuracy_score = cross_val_score(clf_svc_optimal, X_train_std, y_train, cv= 9,scoring='accuracy')\nprint(f'The Cross-Valiation Score is {accuracy_score.mean()}')","9379bcb0":"model_performance['Support Vector Machine'] = accuracy_score.mean()","3d579c89":"# Number of trees\nn_estimators = range(30, 200, 20)\n\n# Maximum depth of trees\nmax_depth = range (6, 20, 2)\n\n# Minimum number of samples required to split a node\nmin_samples_split = range(30,200,20)\n\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = range(40,100,10)\n\n# Hyperparameter Grid\nparam_dict_ranfor = {'n_estimators' : n_estimators, 'max_depth' : max_depth, 'min_samples_split' : min_samples_split, 'min_samples_leaf' : min_samples_leaf}","6bf07fcb":"# Create an instance of the RandomForestClassifier\nranfor_model = RandomForestClassifier()\n\n# Grid search\nranfor_grid = RandomizedSearchCV(estimator = ranfor_model, param_distributions = param_dict_ranfor, cv = 5, verbose=2, scoring='roc_auc')\nranfor_grid.fit(X_train_std,y_train)\n","47d8b609":"ranfor_optimal_model = ranfor_grid.best_estimator_\nprint('Train ROC-AUC score : ', ranfor_optimal_model.score(X_train_std,y_train))\nprint('Test ROC-AUC score : ', ranfor_optimal_model.score(X_test_std,y_test))","a8ffb146":"#cross-val score\naccuracy_score = cross_val_score(ranfor_optimal_model, X_train_std, y_train, cv= 9,scoring='accuracy')\nprint(f'The Cross-Valiation Score is {accuracy_score.mean()}')","36a255a8":"model_performance['Random Forest Classifier'] = accuracy_score.mean()","b73d6714":"GBoost = GradientBoostingClassifier()\nparam_dict_GBoost = { 'max_depth': range (2, 20, 1),'n_estimators': range(60, 220, 20), 'learning_rate': [0.1, 0.05, 0.01, 0.005]}\nGBoost_grid = RandomizedSearchCV(estimator = GBoost, param_distributions = param_dict_GBoost, cv = 5, verbose=2, scoring='roc_auc')\nGBoost_grid.fit(X_train_std, y_train)\nGBoost_grid.best_params_","52af5dee":"GBoostOptimal = GBoost_grid.best_estimator_\nprint('Train ROC-AUC score : ', GBoostOptimal.score(X_train_std,y_train))\nprint('Test ROC-AUC score : ', GBoostOptimal.score(X_test_std,y_test))","c614bbe9":"#cross-val score\naccuracy_score = cross_val_score(GBoostOptimal, X_train_std, y_train, cv= 9,scoring='accuracy')\nprint(f'The Cross-Valiation Score is {accuracy_score.mean()}')","7a6e87ff":"model_performance['Graident Boosting Classifier'] = accuracy_score.mean()","5f01ea18":"model_df = pd.DataFrame.from_dict(model_performance,orient = 'index',columns = ['Mean CV Score'])\nmodel_df = model_df.sort_values(by ='Mean CV Score',ascending = False)","adad7ba4":"model_df","735245f9":"fig,ax = plt.subplots(figsize = (12,6))\nsns.barplot(x=\"Mean CV Score\", y=model_df.index, data=model_df, palette = 'husl')","46f2a99c":"Test_std = scaler.transform(test_df)\npredictions = GBoostOptimal.predict(Test_std)","bfd3e8b5":"output = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","b98fbd0e":"### Variable_7 : **Age**","280c9d67":"### Dependent Variable : **Survived**","757083b1":"# **Comparsion of Results**","f5d1a3ae":"# **Introduction**\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","960d7aa8":"### **Random Forest Classifier**","03cbd7b9":"# **Modelling**","94cfd63c":"### **Logistic Regression using Grid Search Cross Validation**","3922f4a0":"### Variable_3 : **Sex**","aa79863d":"### Variable_4 : **SibSp**","44d9f62d":"### Variable_1 : **Parch**","80427682":"### **Logistic Regression**","ca689346":"# **Submission**","e1942041":"# Preprocessing of Datasets","5df6ed3d":"# Data Refining & Imputation","1195b02f":"## Handling Missing values in test datasets.","f80a083e":"# Exploratory Data Analysis","da2856e0":"#### In train dataset \"Embarked\" feature having two missing values. We can fix those by filling it with highest freqency value.","0e429935":"### **Gradient Boosting**","5c379966":"## Handling Missing values in Train Dataset.","7dfbdda7":"### Variable_5 : **Fare**","2188206e":"### Variable_2 : **Pclass**","cd39a650":"### **Dropping unimportant variables**","391ed416":"#### Missing values in \"Age\" features can be filled by its median value.","3944ecf8":"#### Missing values in \"Age\" features can be filled by its median value.","595098bd":"### Variable_6 : **Embarked**","e3463fee":"In both test and train datasets the cabin feature scores high for missing values. So we can neglect it.","c8527b1e":"### **One hot Encoding**","e646f06f":"### **Support Vector Machine**"}}