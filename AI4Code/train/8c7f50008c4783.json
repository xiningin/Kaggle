{"cell_type":{"86a8c12d":"code","4d46f91e":"code","7de0ca44":"code","a43a69cf":"code","816287d3":"code","ff32f6f6":"code","b80207d6":"code","4b82f9f5":"code","e159068f":"code","8aa17b0b":"code","2f85679d":"code","d0260d99":"code","27c36950":"code","87abcf87":"code","134c7000":"code","5ee4d999":"code","d975d4d3":"code","dc89ca09":"code","edb36d5a":"code","94e1cea8":"markdown","d0bd3090":"markdown","dc3bebc4":"markdown","0fa7b6c8":"markdown","5fbf7659":"markdown","0868c9e8":"markdown"},"source":{"86a8c12d":"# import libraries\nimport math\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM","4d46f91e":"# Import the dataset\ndf=pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv', index_col='Month')\ndf.head(2)","7de0ca44":"# visualize the number of passengers\nplt.figure(figsize=(12,6))\nplt.title('Number of passengers 1949\/01 -- 1960\/12')\nplt.plot(df['#Passengers'], color='black')\nplt.xlabel('Month', fontsize=18)\nplt.ylabel('Number of passengers', fontsize=18)\nax=plt.gca()\nax.get_xaxis().set_visible(False)\nplt.show()","a43a69cf":"df.shape","816287d3":"# Create a new dataframe with only the \"#Passengers\" column\ndata_df=df.filter(['#Passengers'])\n# Convert the dataframe to a numpy array\ndata=data_df.values\nprint(data[:5])","ff32f6f6":"# Scale the data \nsc=MinMaxScaler(feature_range=(0,1))\ndata_scaled=sc.fit_transform(data)\ndata_scaled[:10]","b80207d6":"# Split data into inputs and outputs\n# predict the actual month's number of passengers using the past 5 month number of passengers\nX_data=[]\ny_data=[]\nlook_back=5 # the number of previous months to take as input\nfor i in range(len(data_scaled)-5):\n  X_data.append(data_scaled[i:(i+look_back),0]) # la colonne 0\n  y_data.append(data_scaled[i+look_back,0])\nX_data,y_data=np.array(X_data),np.array(y_data)\nprint(X_data)\nprint(y_data)","4b82f9f5":"# reshaping \nX_data=np.reshape(X_data, (X_data.shape[0], X_data.shape[1], 1))","e159068f":"X_data.shape","8aa17b0b":"# Split data into Test and Train sets \n### Get the number of rows in train and test set\ntrain_size=math.ceil(len(X_data)*0.8)\ntest_size=len(X_data-train_size)\nX_train=X_data[:train_size, :]\nX_test=X_data[train_size:len(X_data),:]\ny_train=y_data[:train_size]\ny_test=y_data[train_size:len(y_data)]","2f85679d":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","d0260d99":"# Building the RNN model\nmodel=Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(LSTM(units=50))\n# Ajouter la couche de sortie\nmodel.add(Dense(units=1))\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()","27c36950":"# Training the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=32)","87abcf87":"# Making predictions\ny_pred=model.predict(X_test)\ny_pred=sc.inverse_transform(y_pred)\nY_test=y_test.reshape(y_test.shape[0],1)\nY_test=sc.inverse_transform(Y_test)","134c7000":"# Visualize the results\nplt.plot(Y_test, color='red',label='Reel number')\nplt.plot(y_pred, color='blue',label='Predicted number')\nplt.title('Reel Number of passengers vs Predicted number ')\nplt.xlabel('Time')\nplt.ylabel('Passengers')\nplt.legend()\nplt.show()","5ee4d999":"# Building the RNN model\nmodel=Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))\nmodel.add(LSTM(units=50))\nmodel.add(Dense(units=1))\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()\n# Training the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=32)\n# Making predictions\ny_pred=model.predict(X_test)\ny_pred=sc.inverse_transform(y_pred)\nY_test=y_test.reshape(y_test.shape[0],1)\nY_test=sc.inverse_transform(Y_test)\n# Visualize the results\nplt.plot(Y_test, color='red',label='Reel number')\nplt.plot(y_pred, color='blue',label='Predicted number')\nplt.title('Reel Number of passengers vs Predicted number ')\nplt.xlabel('Time')\nplt.ylabel('Passengers')\nplt.legend()\nplt.show()","d975d4d3":"# Split data to inputs and outputs\n# predict the actual month's number of passengers using the past 5 month number of passengers\nX_data=[]\ny_data=[]\nlook_back=2 \nfor i in range(len(data_scaled)-2):\n  X_data.append(data_scaled[i:(i+look_back),0]) # la colonne 0\n  y_data.append(data_scaled[i+look_back,0])\nX_data,y_data=np.array(X_data),np.array(y_data)\nprint(X_data)\nprint(y_data)\n# reshaping \nX_data=np.reshape(X_data, (X_data.shape[0], X_data.shape[1], 1))\n# Split data into Test and Train sets \n### Get the number of rows in train and test set\ntrain_size=math.ceil(len(X_data)*0.8)\ntest_size=len(X_data-train_size)\nX_train=X_data[:train_size, :]\nX_test=X_data[train_size:len(X_data),:]\ny_train=y_data[:train_size]\ny_test=y_data[train_size:len(y_data)]\n# Building the RNN model\nmodel=Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(LSTM(units=50))\nmodel.add(Dense(units=1))\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()\n# Training the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=32)\n# Making predictions\ny_pred=model.predict(X_test)\ny_pred=sc.inverse_transform(y_pred)\nY_test=y_test.reshape(y_test.shape[0],1)\nY_test=sc.inverse_transform(Y_test)\n# Visualize the results\nplt.plot(Y_test, color='red',label='Reel number')\nplt.plot(y_pred, color='blue',label='Predicted number')\nplt.title('Reel Number of passengers vs Predicted number ')\nplt.xlabel('Time')\nplt.ylabel('Passengers')\nplt.legend()\nplt.show()","dc89ca09":"# Split data to inputs and outputs\n# predict the actual month's number of passengers using the past 5 month number of passengers\nX_data=[]\ny_data=[]\nlook_back=2 \nfor i in range(len(data_scaled)-2):\n  X_data.append(data_scaled[i:(i+look_back),0]) # la colonne 0\n  y_data.append(data_scaled[i+look_back,0])\nX_data,y_data=np.array(X_data),np.array(y_data)\nprint(X_data)\nprint(y_data)\n# reshaping \nX_data=np.reshape(X_data, (X_data.shape[0], X_data.shape[1], 1))\n# Split data into Test and Train sets \n### Get the number of rows in train and test set\ntrain_size=math.ceil(len(X_data)*0.8)\ntest_size=len(X_data-train_size)\nX_train=X_data[:train_size, :]\nX_test=X_data[train_size:len(X_data),:]\ny_train=y_data[:train_size]\ny_test=y_data[train_size:len(y_data)]\n# Building the RNN model\nmodel=Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))\nmodel.add(LSTM(units=50))\nmodel.add(Dense(units=1))\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()\n# Training the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=32)\n# Making predictions\ny_pred=model.predict(X_test)\ny_pred=sc.inverse_transform(y_pred)\nY_test=y_test.reshape(y_test.shape[0],1)\nY_test=sc.inverse_transform(Y_test)\n# Visualize the results\nplt.plot(Y_test, color='red',label='Reel number')\nplt.plot(y_pred, color='blue',label='Predicted number')\nplt.title('Reel Number of passengers vs Predicted number ')\nplt.xlabel('Time')\nplt.ylabel('Passengers')\nplt.legend()\nplt.show()","edb36d5a":"# Split data to inputs and outputs\n# predict the actual month's number of passengers using the past 5 month number of passengers\nX_data=[]\ny_data=[]\nlook_back=1 \nfor i in range(len(data_scaled)-1):\n  X_data.append(data_scaled[i:(i+look_back),0]) # la colonne 0\n  y_data.append(data_scaled[i+look_back,0])\nX_data,y_data=np.array(X_data),np.array(y_data)\nprint(X_data)\nprint(y_data)\n# reshaping \nX_data=np.reshape(X_data, (X_data.shape[0], X_data.shape[1], 1))\n# Split data into Test and Train sets \n### Get the number of rows in train and test set\ntrain_size=math.ceil(len(X_data)*0.8)\ntest_size=len(X_data-train_size)\nX_train=X_data[:train_size, :]\nX_test=X_data[train_size:len(X_data),:]\ny_train=y_data[:train_size]\ny_test=y_data[train_size:len(y_data)]\n# Building the RNN model\nmodel=Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(LSTM(units=50))\nmodel.add(Dense(units=1))\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()\n# Training the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=32)\n# Making predictions\ny_pred=model.predict(X_test)\ny_pred=sc.inverse_transform(y_pred)\nY_test=y_test.reshape(y_test.shape[0],1)\nY_test=sc.inverse_transform(Y_test)\n# Visualize the results\nplt.plot(Y_test, color='red',label='Reel number')\nplt.plot(y_pred, color='blue',label='Predicted number')\nplt.title('Reel Number of passengers vs Predicted number ')\nplt.xlabel('Time')\nplt.ylabel('Passengers')\nplt.legend()\nplt.show()","94e1cea8":"##### Using **02 LSTM layers**, and taking as input the number of passengers in **the 02 previous months** to predict the number of assengers in the actual month","d0bd3090":"##### Using **03 LSTM layers**, and taking as input the number of passengers in **the 01 previous months** to predict the number of assengers in the actual month","dc3bebc4":"##### Using **04 LSTM layers**, and taking as input the number of passengers in **the 02 previous months** to predict the number of assengers in the actual month","0fa7b6c8":"##### Using **04 LSTM layers**, and taking as input the number of passengers in **the 05 previous months** to predict the number of assengers in the actual month","5fbf7659":"##### Using **02 LSTM layers**, and taking as input the number of passengers in **the 05 previous months** to predict the number of assengers in the actual month","0868c9e8":"**Conclusion** <\/br>\nWe notice that the model performs better when we use *fewer LSTM layers* and *a less number of previous months* as input."}}