{"cell_type":{"f4008d41":"code","aa2aad5f":"code","99d19001":"code","2542a6a7":"code","23f3a1fd":"code","ce40a6f1":"code","87178931":"code","ae893b6a":"code","7bb86003":"code","e1f399f5":"code","1a514129":"markdown","68b0fe1c":"markdown","e3f2730c":"markdown","e534120e":"markdown"},"source":{"f4008d41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\npath = os.getcwd()\nprint(\"Working Directory:\", path)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa2aad5f":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_train.head()\ndf_train.info()","99d19001":"df_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf_test.head()","2542a6a7":"print (\"Count of people with different age groups\")\ndf_train['Age_Category'] = pd.cut(df_train['Age'],\n                        bins=[0,16,32,48,64,81])\nplt.subplots(figsize=(10,10))\n\nsns.countplot('Age_Category',hue='Survived',data=df_train, palette= 'husl')\nplt.show()","23f3a1fd":"print (\"Survival Ratio for Men And Women\",\"\\n\",\"0:Not Survived\",\"\\n\",\"1:Survived\")\nplt.subplots(figsize=(10,10))\nsns.countplot('Sex',hue='Survived',data=df_train, palette = \"Set3\")\nplt.show()\n","ce40a6f1":"y = df_train[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(df_train[features])  \nX_test = pd.get_dummies(df_test[features])\nprint (\"Feature set\",df_test )","87178931":"print (\"Target Column\", y)","ae893b6a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n\n# RandomForest\nprint (\"Training model with Random Forest Classifier\")\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\n\nclf = RandomForestClassifier()\nclf.fit(X, y)\n\ny_pred_random = model.predict(X_test)\nacc_random_forest = round(clf.score(X, y) * 100, 2)\n\n\n# Knn\nfrom sklearn.neighbors import KNeighborsClassifier\nprint (\"Training model with KNN Classifier\")\nclf = KNeighborsClassifier(n_neighbors=3)\nclf.fit(X, y)\ny_pred_knn = model.predict(X_test)\nacc_knn = round(clf.score(X, y) * 100, 2)\n\n\n#Support Vector Classifier\nfrom sklearn.svm import SVC, LinearSVC\nprint (\"Training model with Linear Support Vector Classifier\")\nclf = SVC()\nclf.fit(X, y)\ny_pred_svc = clf.predict(X_test)\nacc_linear_svc = round(clf.score(X, y) * 100, 2)\n\n#Logestic Regression\nfrom sklearn.linear_model import LogisticRegression\nprint (\"Training model with  LogisticRegression Classifier\")\nclf = LogisticRegression()\nclf.fit(X, y)\ny_pred_log_reg = clf.predict(X_test)\nacc_log_reg = round(clf.score(X, y) * 100, 2)\n\nmodels = pd.DataFrame({\n    'Model': ['Logistic Regression', 'KNN', 'SVC', 'Random Forest'],\n    'Score': [acc_log_reg,acc_knn, acc_linear_svc, acc_random_forest]})\n\nmodels.sort_values(by='Score', ascending=False)","7bb86003":"X_test","e1f399f5":"submission = pd.DataFrame({\n        \"PassengerId\": df_test['PassengerId'],\n        \"Survived\": y_pred_random\n    })\n\n\nsubmission.to_csv('titanic_prediction.csv', index=False)\n\n","1a514129":"# Data Visualization","68b0fe1c":"# Data Preparation","e3f2730c":"# Loading Training & Testing Data","e534120e":"# Save output"}}