{"cell_type":{"abb249b3":"code","d5adb27e":"code","499ec172":"code","1fe36bcc":"code","17faf250":"code","f4ad1df6":"code","8b445c48":"code","5461e76d":"code","a86699f1":"code","112724f7":"code","5caeab3d":"code","06799728":"code","a124f4d1":"code","aea42622":"code","146aa935":"code","3c4e8b04":"code","edff41f6":"code","91420aa6":"code","0b46252f":"code","44409de4":"code","833276ff":"code","1a6216f1":"code","e9581295":"code","fff395a6":"code","3d7d1041":"code","68e07d63":"code","7c8199b9":"code","322f2454":"code","8d67cdea":"code","f87d9d98":"code","00b49851":"code","9eefc504":"code","5231af23":"code","62e0910a":"code","fe6ede1a":"code","0146eedd":"code","09d2f89e":"code","a0296702":"code","8813b661":"code","ce987d20":"code","6db4e8e3":"code","b30dfab7":"code","0603086e":"code","8bef50d7":"code","ea514559":"code","3fea3090":"code","e0bd8d04":"code","78448057":"code","4380ae3e":"code","4cbc6624":"code","492f9ddc":"code","e874d440":"code","2f8e79b7":"code","944da85e":"code","398e2ec9":"code","fde04d4d":"code","0a48002b":"code","4025d89c":"code","87f704a9":"code","3769e17c":"code","499e63f0":"code","d9cbebac":"code","aaa65e69":"code","c3ff53d0":"code","cd4438a5":"code","7557cb72":"code","6e1cf586":"code","649aa4a3":"code","d3e46881":"code","7a4022c4":"code","e3f6552b":"markdown","7c84693f":"markdown","0241b95d":"markdown","3b03980c":"markdown","82d9f404":"markdown","48869dce":"markdown","4ca9e3b7":"markdown","4bb1048d":"markdown","cd1db951":"markdown","b00369a1":"markdown","bb727266":"markdown","c145acc2":"markdown","504bfe68":"markdown","98b73d31":"markdown","8d11375e":"markdown","d468a9e3":"markdown","0ce436f5":"markdown","041cc11d":"markdown","522990c4":"markdown","d48b7781":"markdown","df4f8cbe":"markdown","85cdcb3d":"markdown","993b703b":"markdown","69ae3892":"markdown","eddcf779":"markdown","84365645":"markdown","68322b22":"markdown","f463be24":"markdown","d2aea789":"markdown","ef4f6e5b":"markdown","c89e56a8":"markdown","28a5a85b":"markdown","0d9414de":"markdown","dd1e382e":"markdown","3975619a":"markdown","3de8d7d7":"markdown","5f4dc5d1":"markdown"},"source":{"abb249b3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","d5adb27e":"df_bill_amt = pd.read_csv(\"..\/input\/sukouz-equnix\/bill_amount.csv\")\ndf_demographics = pd.read_csv(\"..\/input\/sukouz-equnix\/demographics.csv\")\ndf_bill_id = pd.read_csv(\"..\/input\/sukouz-equnix\/bill_id.csv\")\ndf_clinical_data = pd.read_csv(\"..\/input\/sukouz-equnix\/clinical_data.csv\")","499ec172":"df_bill_amt.head()","1fe36bcc":"df_demographics.head()","17faf250":"df_bill_id.head()","f4ad1df6":"df_clinical_data.head()","8b445c48":"df_bill_amt.amount.hist(color = 'orange', edgecolor = 'black', figsize = (10,8), bins = 25)   # target is skewed","5461e76d":"df_bill_id.count()","a86699f1":"df_bill_id.patient_id.nunique()","112724f7":"df_clinical_data.head()","5caeab3d":"df_clinical_data.id.nunique()","06799728":"df_clinical_data.shape","a124f4d1":"set(df_clinical_data.id) ==  set(df_bill_id.patient_id) ","aea42622":"set(df_bill_id.bill_id) == set(df_bill_amt.bill_id) ","146aa935":"set(df_demographics.patient_id) == set(df_bill_id.patient_id)  ","3c4e8b04":"df_clinical_data.rename(columns = {'id':'patient_id'}, inplace = True)","edff41f6":"df_bill_clinical = pd.merge(df_bill_id,  df_clinical_data, \n                            on = ['patient_id', 'date_of_admission'], how = 'inner')\n\ndf_bill_cinical_amt = pd.merge(df_bill_clinical, df_bill_amt, on = 'bill_id', how = 'inner' )\n\ndf_final = pd.merge(df_bill_cinical_amt, df_demographics, on = 'patient_id', how = 'inner')","91420aa6":"df_final.date_of_admission = pd.to_datetime(df_final.date_of_admission, format = \"%Y-%m-%d\")\ndf_final.date_of_discharge = pd.to_datetime(df_final.date_of_discharge, format = \"%Y-%m-%d\")\ndf_final.date_of_birth = pd.to_datetime(df_final.date_of_birth, format = \"%Y-%m-%d\")","0b46252f":"df_final.count()   ","44409de4":"df_final.isna().sum()[df_final.isna().sum() != 0]","833276ff":"list_missing_data_columns = [\"medical_history_2\", \"medical_history_5\"] # needs to be looked sepeartely","1a6216f1":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}","e9581295":"## If you Re Run the this cell after data cleaning (after the last cell) it will plot the clean results. \n##ie. We can re run after df_final complete \n\nlist_sepearte_columns = []   \n\ncount = 0\n\nfor i in df_final.columns[2:]:\n    C = df_final[i].nunique()\n    #print(i + \"  \"+ str(C))\n    \n    if(C < 20):\n        (df_final[i].value_counts()*100\/len(df_final[i])).plot(kind = 'bar')\n        plt.title(i + \" (Count Plot)\")\n        plt.ylabel(\"Frequency (%)\")\n        plt.xlabel(\"Unique Values\")\n        plt.show()\n        count = count+1\n    else:\n        if(df_final[i].dtype != 'O'):\n            df_final[i].hist(color = 'orange', edgecolor = 'black', figsize = (10,8), bins = 25)\n            plt.ylabel(\"Frequency (count)\")\n            plt.xlabel(i)\n            plt.title(\"Histogram\")\n            plt.show()\n            count = count+1\n        else:\n            list_sepearte_columns.append(i)\n            ","fff395a6":"list_sepearte_columns  # Thus we see we plotted all columns","3d7d1041":"df_final.medical_history_2.count()\/len(df_final.medical_history_2)\n","68e07d63":"df_final.medical_history_5.count()\/len(df_final.medical_history_2)","7c8199b9":"df_final.medical_history_5.isna().sum()","322f2454":"df_final.medical_history_2.isna().sum()","8d67cdea":"df_final.medical_history_2 = df_final.medical_history_2.fillna(\"missing\")\ndf_final.medical_history_5 = df_final.medical_history_5.fillna(\"missing\")","f87d9d98":"df_final.medical_history_3.value_counts()","00b49851":" df_final.medical_history_3 =  df_final.medical_history_3.replace({\"Yes\":'1', \"No\":'0'}).astype('int8')","9eefc504":" df_final.medical_history_3.value_counts()","5231af23":"df_final.gender.value_counts()","62e0910a":" df_final.gender =  df_final.gender.replace({\"m\":1, \"f\":0, 'Male':1, 'Female':0}).astype('int8')","fe6ede1a":"df_final.gender.value_counts()  ## corrected","0146eedd":"df_final.race.value_counts()","09d2f89e":"mapper = {'Chinese':'Chinese', 'Malay':'Malay', 'chinese':'Chinese', \n          'Indian':'Indian', 'Others':'Others', 'India':'Indian'}","a0296702":"df_final.race =  df_final.race.map(mapper)","8813b661":"df_final.race.value_counts()  ## corrected","ce987d20":"df_final.resident_status.value_counts()","6db4e8e3":"mapper = {'Singaporean':'Singaporean', 'Singapore citizen':'Singaporean', 'PR':'PR',\n          'Foreigner':'Foreigner'}","b30dfab7":"df_final.resident_status =  df_final.resident_status.replace(mapper)","0603086e":"df_final.resident_status.value_counts() ## corrected","8bef50d7":"df_final.date_of_admission = pd.to_datetime(df_final.date_of_admission, format = \"%Y-%m-%d\")\ndf_final.date_of_discharge = pd.to_datetime(df_final.date_of_discharge, format = \"%Y-%m-%d\")\ndf_final.date_of_birth = pd.to_datetime(df_final.date_of_birth, format = \"%Y-%m-%d\")","ea514559":"df_final['Age'] = ((df_final.date_of_admission - df_final.date_of_birth).dt.days)\/365","3fea3090":"df_final['Age'].hist(color = 'orange', edgecolor = 'black', figsize = (10,8), bins = 25)  # looks okay","e0bd8d04":"df_final['Stay_days'] = (df_final.date_of_discharge - df_final.date_of_admission).dt.days","78448057":"df_final['Stay_days'].hist(color = 'orange', edgecolor = 'black', figsize = (10,8), bins = 25)","4380ae3e":"df_final['BMI'] = df_final.weight \/ (df_final.height\/100)**2","4cbc6624":"df_final['BMI'].hist(color = 'orange', edgecolor = 'black', figsize = (10,8), bins = 25)","492f9ddc":"df_final['month'] = df_final['date_of_discharge'].dt.month\ndf_final['weekofyear'] = df_final['date_of_discharge'].dt.weekofyear","e874d440":"df_final['month'].hist(color = 'orange', edgecolor = 'black', figsize = (10,8), bins = 25)","2f8e79b7":"df_final['weekofyear'].hist(color = 'orange', edgecolor = 'black', figsize = (10,8), bins = 25)","944da85e":"df_final.columns","398e2ec9":"cat_features = [ 'patient_id', 'medical_history_1', 'medical_history_2',\n       'medical_history_3', 'medical_history_4', 'medical_history_5',\n       'medical_history_6', 'medical_history_7', 'preop_medication_1',\n       'preop_medication_2', 'preop_medication_3', 'preop_medication_4',\n       'preop_medication_5', 'preop_medication_6', 'symptom_1', 'symptom_2',\n       'symptom_3', 'symptom_4', 'symptom_5', 'gender', 'race', 'resident_status',\n       'month', 'weekofyear']    # categoriclal features","fde04d4d":"numerical_features = ['lab_result_1', 'lab_result_2',\n       'lab_result_3', 'weight', 'height', 'Stay_days', 'BMI', 'Age', 'amount'\n       ]     # Numerical features","0a48002b":"len(cat_features)  # categorical features count","4025d89c":"len(numerical_features)  # numerical features count","87f704a9":"df_final[numerical_features].describe()","3769e17c":"df_final[numerical_features].corr()","499e63f0":"plt.figure(figsize = (12,8))\nax = sns.heatmap(df_final[numerical_features].corr(), annot=True, \n                 cmap=plt.cm.Blues, linecolor ='black',  \n                 linewidths=1) \nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.tight_layout()\nplt.show()","d9cbebac":"df_final['target_transformed'] = np.log1p(df_final.amount)   # adding 1 plus to take care of target having value zero","aaa65e69":"df_final['target_transformed'].hist(color = 'orange', edgecolor = 'black', figsize = (10,8), bins = 25)","c3ff53d0":"df_final['target_bins'] = pd.cut(df_final['target_transformed'] ,bins = 5).astype('object')  \n#this will be used in splitting the train and test","cd4438a5":"df_final['target_bins'].value_counts()","7557cb72":"df_final.drop(columns = ['date_of_admission', 'date_of_discharge', 'date_of_birth'], inplace = True)","6e1cf586":"df_final.to_csv(\"created_flat_file.csv\", index = False)","649aa4a3":"df_final.columns","d3e46881":"print(f\"Unique Percentage of patinet_id : {df_final.patient_id.nunique()*100\/len(df_final.patient_id)}\")","7a4022c4":"binary_features  = [  'medical_history_1', 'medical_history_2',\n       'medical_history_3', 'medical_history_4', 'medical_history_5',\n       'medical_history_6', 'medical_history_7', 'preop_medication_1',\n       'preop_medication_2', 'preop_medication_3', 'preop_medication_4',\n       'preop_medication_5', 'preop_medication_6', 'symptom_1', 'symptom_2',\n       'symptom_3', 'symptom_4', 'symptom_5', 'gender']\n\n\n\nfor i in range(0, len(binary_features), 2):\n    \n    \n    fig, axarr = plt.subplots(1, 2, figsize=(16, 8))\n    try:   \n        df_final[df_final[binary_features[i]] == 1]['target_transformed'].hist(density = True, ax = axarr[0])\n        df_final[df_final[binary_features[i]] == 0]['target_transformed'].hist(density = True,\n                                                                               alpha = .5,\n                                                                               ax = axarr[0])\n        axarr[0].title.set_text(\"Histograms of Target for \" + '\"'+ binary_features[i] +   '\"' + \" : 0 and 1\")\n        axarr[0].set_xlabel(\"Log transformed target Values\")\n        axarr[0].set_ylabel(\"Normalized Frequency\")\n        \n        #plt.show()\n\n        df_final[df_final[binary_features[i+1]] == 1]['target_transformed'].hist(density = True, ax = axarr[1])\n        df_final[df_final[binary_features[i+1]] == 0]['target_transformed'].hist(density = True,alpha = .5,\n                                                                                 ax = axarr[1])\n        axarr[1].title.set_text(\"Histograms of Target for \" + '\"'+ binary_features[i+1] +   '\"' + \" : 0 and 1\")\n        axarr[1].set_xlabel(\"Log transformed target Values\")\n        axarr[1].set_ylabel(\"Normalized Frequency\")\n        axarr[1].tight_layout()\n\n        #plt.show()\n    except:\n         plt.show()","e3f6552b":"### Converting date time columns","7c84693f":"#### Looking at the above numbers it appears to be no linear correlation (except Age) between target and the numerical features. thus nonlinear model might do a better job  ","0241b95d":"### A look in to columns haveing missing value","3b03980c":"### Importing Libraries","82d9f404":"### BMI","48869dce":"## Quick look at the files","4ca9e3b7":"#### Given the repeating nature of patinet, patient_id can be used for model building.  while production two model can be used one witout patient_id and other whith patient_id. when a new patient is coming accordingly prdiction can be use. In this case i am going to build a model with patient_id as a feature. ","4bb1048d":"### Checking the correlation b\/w numerical columns and target","cd1db951":"## Quick EDA","b00369a1":"# Data Cleaning","bb727266":"### Geeting Age of the patients","c145acc2":"## Columns Having Missing Values","504bfe68":"### Seasonal Features","98b73d31":"## Reading Files","8d11375e":"### in the abouve columns Around 7-9 % rows are missing ","d468a9e3":"###  Checking statistics of numerical columns","0ce436f5":"#### medical_history_2 and medical_history_5 have missing value","041cc11d":"### Above 2 variable can be imputed or can be given as 3rd catergory missing. instead of inputing i will assigng it as another category. OneHotEncoding can be done to get the feature representation for the model. This we will do during model building ","522990c4":"# More EDA on cleaned Data","d48b7781":"#### Binning target to ensure startified split the data into train and test","df4f8cbe":"## Quick look at the target ","85cdcb3d":"## Analysing patinet_id","993b703b":"## As we saw in the EDA that target distribution is extremly skewed. Thus log tranformation (of box - cox) transformation will be good idea to ensure train test split is less biased. here we are doing log transform","69ae3892":"### Remarks : Looking at the number of categorical features and past experience CatBoost will be appropriate for this data. Although we will build linear model baseline","eddcf779":"### Plotting Heatmap of Correlations","84365645":"### Number of days paitent has stayed","68322b22":"## Exploring columns having binary value and its effect on target  \n\nWe are looking at the distibution of target for different value for binary columns (ie. 0 and 1) In the below plots blue is the distibution of target when feature value is equal to 1 and orange is distibution of target when feature value is 0.  Here we are using Log transformed distibution of target because it is very difficult to distigush the distibution of orginal target value\n\n### If there is significant difference in the distibution means the feature will be imporantant in the model","f463be24":"### Removing non relevent columns for modeling","d2aea789":"### Saving the flat file for model building ","ef4f6e5b":"### Correcting gender, Race and resedential_status columns","c89e56a8":"## Checking if All ids Are present in All files","28a5a85b":"####  Looking at the above counts we can identify the columns which are having misssing values","0d9414de":"## Renaming \"id\"  to \"patient_id\"","dd1e382e":"## Preparing flat file by merging the files","3975619a":"###  looking at the distribution and count \"No\" has count coparable to 0 and \"yes\" has count comparable to 1 thus using common sense replacing \"yes\" by 1 and \"No\" by 1. although its better to confirm with business","3de8d7d7":"### Treatment for \"medical_history_3\" column","5f4dc5d1":"# Feature Engineering"}}