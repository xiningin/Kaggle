{"cell_type":{"e70b9b59":"code","0a4d551c":"code","706b9474":"code","56fa4e59":"code","70c92fff":"code","2cade2ee":"code","64b12fa3":"code","c6689c34":"code","3ef418e9":"code","b3d3c77d":"code","6e77a8e5":"code","cde84063":"code","a789c28c":"code","e6757904":"code","fda2313d":"code","8a773d4b":"code","0583113d":"code","9168e3e7":"code","e50f3067":"code","053e6555":"code","398aeb7d":"code","e3a4f309":"code","0645cf15":"code","61c8ee2f":"code","dcc716a1":"code","8a016a9c":"code","27f0c3a7":"code","9738635c":"code","f7f84bf2":"code","13e1dc7e":"code","0638837b":"code","8354ee85":"code","fd789c55":"code","a46215d0":"code","924359ab":"code","525fef30":"code","f4ab0508":"code","5b45c6f0":"code","635c86ae":"code","30bda173":"code","451b9127":"code","6fb16d22":"markdown"},"source":{"e70b9b59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a4d551c":"'''Customize visualization\nSeaborn and matplotlib visualization.'''\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n%matplotlib inline\n\n'''Plotly visualization .'''\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n\nimport cufflinks as cf #importing plotly and cufflinks in offline mode  \nimport plotly.offline  \ncf.go_offline()  \ncf.set_config_file(offline=False, world_readable=True)\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown\ndef bold(string):\n    display(Markdown(string))","706b9474":"df = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")","56fa4e59":"df.head()","70c92fff":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(stopwords=STOPWORDS,background_color = 'black', width = 1000,  height = 1000, max_words = 121).generate(' '.join(df['title']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Words in Title',fontsize = 30)\nplt.show()","2cade2ee":"df.info()","64b12fa3":"df.isnull().sum(axis = 0)","c6689c34":"df = df.replace(np.nan, \"No Info\")\n#fillna()","3ef418e9":"df.head()","b3d3c77d":"country_list = ['South Korea','Japan','United Kingdom','United States','China','India']\nsel_df = df[df['country'].str.contains('|'.join(country_list))]","6e77a8e5":"sel_df.head()","cde84063":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(stopwords=STOPWORDS,background_color = 'black', width = 1000,  height = 1000, max_words = 121).generate(' '.join(sel_df['title']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Words in Title',fontsize = 30)\nplt.show()","a789c28c":"new_df = sel_df[['title','director','cast','listed_in','description','rating']]\nnew_df.head()","e6757904":"!pip install rake-nltk\nfrom rake_nltk import Rake\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer","fda2313d":"# initializing the new column\nnew_df['Key_words'] = \"\"\n\nfor index, row in new_df.iterrows():\n    description = row['description']\n\n    # instantiating Rake, by default it uses english stopwords from NLTK\n    # and discards all puntuation characters as well\n    r = Rake()\n\n    # extracting the words by passing the text\n    r.extract_keywords_from_text(description)\n\n    # getting the dictionary whith key words as keys and their scores as values\n    key_words_dict_scores = r.get_word_degrees()\n    \n    # assigning the key words to the new column for the corresponding movie\n    row['Key_words'] = list(key_words_dict_scores.keys())","8a773d4b":"# dropping the Plot column\nnew_df.drop(columns = ['description'], inplace = True)","0583113d":"new_df['cast'] = new_df['cast'].map(lambda x: x.lower().split(','))\n\n# putting the genres in a list of words\nnew_df['listed_in'] = new_df['listed_in'].map(lambda x: x.lower().split(','))\nnew_df['director'] = new_df['director'].map(lambda x: x.lower().split(','))\n","9168e3e7":"new_df.head()","e50f3067":"# merging together first and last name for each actor and director, so it's considered as one word \n# and there is no mix up between people sharing a first name\nfor index, row in new_df.iterrows():\n    row['cast'] = [x.lower().replace(\" \",\"\") for x in row['cast']]\n    row['director'] = [x.lower().replace(\" \",\"\") for x in row['director']]","053e6555":"new_df.head()","398aeb7d":"new_df.set_index('title', inplace = True)\nnew_df.head()","e3a4f309":"new_df['bag_of_words'] = ''\ncolumns = new_df.columns\nfor index, row in new_df.iterrows():\n    words = ''\n    for col in columns:\n        words = words + ' '.join(row[col])+ ' '\n    row['bag_of_words'] = words\n    \nnew_df.drop(columns = [col for col in new_df.columns if col!= 'bag_of_words'], inplace = True)","0645cf15":"new_df.head()","61c8ee2f":"# instantiating and generating the count matrix\ncount = CountVectorizer()\ncount_matrix = count.fit_transform(new_df['bag_of_words'])\n\n# creating a Series for the movie titles so they are associated to an ordered numerical\n# list I will use later to match the indexes\nindices = pd.Series(new_df.index)\nindices[:5]","dcc716a1":"import tensorflow_hub as hub\n\nembed = hub.load(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/4\")","8a016a9c":"new_df['vector']=new_df['bag_of_words'].apply(lambda x: embed([x]).numpy()[0])","27f0c3a7":"new_df.head()","9738635c":"from sklearn.metrics.pairwise import euclidean_distances\ndistances = euclidean_distances(list(new_df['vector']))","f7f84bf2":"cos_sim = cosine_similarity(list(new_df['vector']))","13e1dc7e":"cosine_sim = cosine_similarity(count_matrix, count_matrix)","0638837b":"recommended_movies = set()","8354ee85":"def recommendations_dist(Title, dist, recommended_movies):\n    \n    # gettin the index of the movie that matches the title\n    idx = indices[indices == Title].index[0]\n\n    # creating a Series with the similarity scores in descending order\n    score_series = pd.Series(dist[idx]).sort_values(ascending = True)\n\n    # getting the indexes of the 10 most similar movies\n    top_10_indexes = list(score_series.iloc[0:10].index)\n    \n    # populating the list with the titles of the best 10 matching movies\n    for i in top_10_indexes:\n        recommended_movies.add(list(new_df.index)[i])\n        \n    return recommended_movies - set([Title])","fd789c55":"def recommendations_sim(Title, sim, recommended_movies):\n    \n    # gettin the index of the movie that matches the title\n    idx = indices[indices == Title].index[0]\n\n    # creating a Series with the similarity scores in descending order\n    score_series = pd.Series(sim[idx]).sort_values(ascending = False)\n\n    # getting the indexes of the 10 most similar movies\n    top_10_indexes = list(score_series.iloc[1:11].index)\n    \n    # populating the list with the titles of the best 10 matching movies\n    for i in top_10_indexes:\n        recommended_movies.add(list(new_df.index)[i])\n        \n    return recommended_movies\n        ","a46215d0":"recommended_movies =recommendations_dist('Stranger', distances, recommended_movies)","924359ab":"recommended_movies = recommendations_sim('Stranger', cosine_sim, recommended_movies)","525fef30":"recommended_movies = recommendations_sim('Stranger', cos_sim, recommended_movies)\nrecommended_movies","f4ab0508":"def recommend_list(Title):\n    recommended_movies = set()\n    recommended_movies = recommendations_dist(Title, distances, recommended_movies)\n    recommended_movies = recommendations_sim(Title, cosine_sim, recommended_movies)\n    recommended_movies = recommendations_sim(Title, cos_sim, recommended_movies)\n    \n    return list(recommended_movies)\n    \n    ","5b45c6f0":"recommend_list('When the Camellia Blooms')","635c86ae":"recommend_list(\"Live\")","30bda173":"recommend_list('Strong Girl Bong-soon')","451b9127":"recommend_list('Tunnel')","6fb16d22":"**Content-Based Movie Recommender System**"}}