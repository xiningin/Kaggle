{"cell_type":{"31c5ff1d":"code","03c426a9":"code","c6725f00":"code","be56ed73":"code","418b2610":"code","989ffc68":"code","97d0d2a6":"code","d61e4972":"code","a3645dcb":"code","59907223":"code","c38d01ff":"code","c6714568":"code","8f184c95":"code","2be0083b":"code","2011741e":"code","50c82473":"code","25df1017":"code","418ac9f2":"code","03755401":"code","419c6eb8":"code","d42b80ec":"code","5c1a8986":"code","b0d4c966":"code","826a3751":"code","176b124e":"code","ddf066ce":"code","63c2e095":"code","767ad70f":"code","32d89c8c":"code","8a67b10c":"code","5ba2baaf":"code","1fb38505":"code","e2ba974c":"code","9ed2e9d3":"code","de4f68bc":"code","9d88b11e":"code","69b6f466":"code","40634c8e":"markdown","8586835c":"markdown","a7855980":"markdown","8cbd0287":"markdown","33043680":"markdown","512f4489":"markdown","0ba9ad85":"markdown","d2f1d66f":"markdown","1dc0360a":"markdown","00166388":"markdown"},"source":{"31c5ff1d":"# Required packages\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","03c426a9":"# Loading the Data\noil = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/oil.csv\")\nholidays = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/holidays_events.csv\")\nstores = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/stores.csv\")\ntrain = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/train.csv\")\ntest = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/test.csv\")\ntransactions = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/transactions.csv\")\nsamp_subm = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/sample_submission.csv\")","c6725f00":"train.head()","be56ed73":"test.head()","418b2610":"oil.head()","989ffc68":"holidays.head()","97d0d2a6":"stores.head()","d61e4972":"transactions.head()","a3645dcb":"# This function will do basic checks for Dataframes\ndef basic_eda(df):\n    print(\"\\n----------TOP 5 RECORDS--------\\n\")\n    print(df.head(5))\n    print(\"\\n----------INFO-----------------\\n\")\n    print(df.info())\n    print(\"\\n----------Describe-------------\\n\")\n    print(df.describe())\n    print(\"\\n----------Columns--------------\\n\")\n    print(df.columns)\n    print(\"\\n----------Data Types-----------\\n\")\n    print(df.dtypes)\n    print(\"\\n-------Missing Values----------\\n\")\n    print(df.isnull().sum())\n    print(\"\\n-------NULL values-------------\\n\")\n    print(df.isna().sum())\n    print(\"\\n-----Shape Of Data-------------\\n\")\n    print(df.shape)\n    numeric_variables = df.select_dtypes(include=[np.number])\n    categorical_variables = df.select_dtypes(exclude=[np.number])\n\n    print('Numeric variables in the given the dataframe : ',numeric_variables.shape[1])\n    print('Categorical variables in the givne the dataframe:',categorical_variables.shape[1])","59907223":"#Litle bit of exploration of data\n\nprint(\"\\n============================= oil =============================\")\nbasic_eda(oil)","c38d01ff":"print(\"\\n============================= holidays =============================\")\nbasic_eda(holidays)","c6714568":"print(\"\\n============================= Shops =============================\")\nbasic_eda(stores)","8f184c95":"print(\"\\n============================= train =============================\")\nbasic_eda(train)","2be0083b":"print(\"\\n============================= test =============================\")\nbasic_eda(test)","2011741e":"print(\"\\n============================= transactions =============================\")\nbasic_eda(transactions )","50c82473":"# Let's check the store data\nstores.type.value_counts()","25df1017":"stores.state.value_counts()","418ac9f2":"stores.city.value_counts()","03755401":"plt.figure(figsize=(15, 10))\nsns.countplot(data=stores, x='type', order=stores.type.value_counts().index)\n\nplt.title('Number of Stores based on Type',fontweight=\"bold\")\nplt.xlabel('Type')\nplt.ylabel('Count')","419c6eb8":"plt.figure(figsize=(15, 10))\nsns.countplot(data=stores, y='city',order=stores.city.value_counts().index)\n\nplt.title('Number of Stores based on Cities',fontweight=\"bold\")\nplt.ylabel('City')\nplt.xlabel('Count')","d42b80ec":"train.date = pd.to_datetime(train.date)\ntest.date = pd.to_datetime(test.date)\nmonths_sales = train.groupby(train['date'].dt.strftime('%B'))['sales'].sum().sort_values()\n\nplt.figure(figsize=(15,10))\nplt.plot(months_sales)\nplt.title(\"the sales by month\", fontweight=\"bold\")\nplt.xlabel(\"the month\")\nplt.ylabel(\"the sales\")","5c1a8986":"plt.figure(figsize=(15,8))\ntrain.groupby(pd.Grouper(key='date', freq='2D')).sum()['sales'].plot()\nplt.ylabel(\"the sales\", fontsize=15)","b0d4c966":"plt.figure(figsize=(15,10))\ntrain.groupby(pd.Grouper(key='date', freq='1Y')).sum()['sales'].plot()\nplt.title(\"the sales by year\", fontweight=\"bold\")\nplt.ylabel(\"the sales\")","826a3751":"# some Features\nfeatures = ['store_nbr', 'family', 'onpromotion']\ntarget = 'sales'","176b124e":"# creating the features weekday, month or year.\ndef extract_weekday(df):\n    return df.dayofweek\n\ndef extract_month(df):\n    return df.month\n\ndef extract_year(df):\n    return df.year","ddf066ce":"train['weekday'] = train['date'].apply(extract_weekday)\ntrain['year'] = train['date'].apply(extract_year)\ntrain['month'] = train['date'].apply(extract_month)\n\ntest['weekday'] = test['date'].apply(extract_weekday)\ntest['year'] = test['date'].apply(extract_year)\ntest['month'] = test['date'].apply(extract_month)","63c2e095":"features.append('weekday')\nfeatures.append('year')\nfeatures.append('month')","767ad70f":"features","32d89c8c":"store_sales = pd.read_csv(\n    '..\/input\/store-sales-time-series-forecasting\/train.csv',\n    usecols=['store_nbr', 'family', 'date', 'sales'],\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales['date'] = store_sales.date.dt.to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\n\n\ndf_test = pd.read_csv(\n    '..\/input\/store-sales-time-series-forecasting\/test.csv',\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'uint32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\ndf_test['date'] = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()","8a67b10c":"df_test.head()","5ba2baaf":"# Target\ny = store_sales.unstack(['store_nbr', 'family']).loc[\"2017\"]\ny","1fb38505":"fourier = CalendarFourier(freq='M', order=4)\ndp = DeterministicProcess(\n    index=y.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\nX = dp.in_sample()\nX['NewYear'] = (X.index.dayofyear == 1)","e2ba974c":"# Linear Regression\nmodel = LinearRegression(fit_intercept=False)\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","9ed2e9d3":"X.head()","de4f68bc":"X_test = dp.out_of_sample(steps=16)\nX_test.index.name = 'date'\nX_test['NewYear'] = (X_test.index.dayofyear == 1)","9d88b11e":"y_submit = pd.DataFrame(model.predict(X_test), index=X_test.index, columns=y.columns)\ny_submit = y_submit.stack(['store_nbr', 'family'])\ny_submit = y_submit.join(df_test.id).reindex(columns=['id', 'sales'])\ny_submit.to_csv('submission.csv', index=False)","69b6f466":"y_submit","40634c8e":"#### **Submission**","8586835c":"#### **Encode Labels**","a7855980":"#  **Pre-processing & Feature Engineering**","8cbd0287":"#### **Let's do some visualization**","33043680":"#### **Create training data**","512f4489":"#### **Getting to know the Data**","0ba9ad85":"#  **Exploratory Data Analysis**","d2f1d66f":"<h2 style=\"font-weight: bold\">Store Sales TS Forecast<\/h2>\n\n<h4>Emmm... wouldn't it be if we could use machine learning to predict grocery sales. So Yeah! you guess it! this notebook is going to be about the Store Sales TS Forecast Compeition \ud83d\ude04\ud83d\ude04<br><br>I will be doing a EDA of review texts, some Visualization and Pre-Processing. and finally modelling <br><\/h4>\n\n* <h5 style=\"font-weight: 700\">Your feedback is very welcome<\/h5>\n* <h5 style=\"font-weight: 700\">If you find this notebook useful, please don't forget to upvote it!<\/h5>","1dc0360a":"#### **Credit**\nhttps:\/\/www.kaggle.com\/dkomyagin\/simple-ts-ridge-rf","00166388":"#  **Modeling**"}}