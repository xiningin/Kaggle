{"cell_type":{"1c72590c":"code","b3868fef":"code","4021575a":"code","d4ec2792":"code","f716ce2e":"code","816a6955":"code","d99fd425":"code","ced77577":"code","7838db8a":"code","4c82f30f":"code","5af82527":"code","f054e84b":"code","2cf6bb19":"code","808a0137":"code","3c243db9":"code","b39e108f":"code","b619067b":"code","69c4d058":"code","69cb8c39":"code","4f85f531":"code","27cd5dc6":"code","94977569":"code","fc733ffb":"code","052748e8":"code","097f4b11":"code","3894bcfb":"code","2b4144f5":"code","f0f0eeca":"code","66422a38":"code","bece5eea":"code","12362bfd":"code","d5e6e69b":"code","76cd4a0b":"code","5ed55d79":"code","91121ee4":"code","d27d6acb":"code","ad9d886e":"code","596f88a6":"code","550c907c":"code","58c2935c":"code","18f8b15f":"code","f66d9895":"code","c5053f16":"code","f8803f5b":"code","52448eb5":"code","6ed61758":"code","b2229694":"markdown","5f2316d2":"markdown","fecd42fd":"markdown","154375f7":"markdown","b7415aa9":"markdown","2186fb31":"markdown","bffe8934":"markdown","07a7b29c":"markdown","5c68fa29":"markdown","c64379e6":"markdown","760c56f5":"markdown","a5d4f298":"markdown","1c621bcc":"markdown","a63eb35d":"markdown","d13f91ca":"markdown","b8f49b8f":"markdown","201682c6":"markdown","29ce4ffc":"markdown","3b1cc657":"markdown","1a9065ba":"markdown","4939fa24":"markdown","ff3f5711":"markdown","1911d17d":"markdown","afdeb6cf":"markdown","b3168a02":"markdown","f75fb9ab":"markdown","2b3c6d78":"markdown","5fa73f68":"markdown","2884101a":"markdown","553c8af8":"markdown","d511c21b":"markdown","bdc35a6c":"markdown","b68fc0f7":"markdown","f695ef02":"markdown","2252cc9f":"markdown","170e8e6b":"markdown","f3e46f5e":"markdown","315fb5f0":"markdown","1d2acf2b":"markdown"},"source":{"1c72590c":"import numpy as np # linear algebra\nfrom numpy import *\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visulization\n%matplotlib inline\n\nimport seaborn as sns # data visulization\nimport missingno as msno # missing data visualization\nimport math # Calcuation \nfrom math import log\n\nimport operator # Operation\nimport sys\n#import treePlotter # Visualization tool for decision tree\nfrom time import time # time info\n\nfrom sklearn.cross_validation import train_test_split # dataset split\n\nfrom sklearn import neighbors\nfrom sklearn.neighbors import KNeighborsClassifier # KNN\nfrom sklearn.ensemble import BaggingClassifier # Bagging\nfrom sklearn.tree import DecisionTreeClassifier # Decision Tree\nfrom sklearn.ensemble import RandomForestClassifier # Random Forest\nfrom sklearn import linear_model \nfrom sklearn.linear_model import LogisticRegression # Logistic Regression\nfrom sklearn.linear_model import Perceptron # Perceptron\nfrom sklearn.linear_model import SGDClassifier # Stochastic Gradient Descent \nfrom sklearn.svm import SVC, LinearSVC # Support Vector Machine (Normal, linear)\nfrom sklearn.naive_bayes import GaussianNB # Naive Bayes\n\nfrom sklearn.cluster import KMeans # K-means\n\nfrom sklearn.neural_network import MLPClassifier # Multiple Layers Perceptron\n\nfrom sklearn.metrics import accuracy_score # Accuracy Calculation\nfrom sklearn.metrics import precision_score, recall_score # calculate precision and recall\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\nimport tensorflow as tf # Deep Learning Library\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nnp.random.seed(2)\n\nimport os\nprint(os.listdir(\"..\/input\"))","b3868fef":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\n#print (train)\n#print (test)\n#print (train.head())\n#train.describe(include=\"all\")\n#train.isnull().any()\n#train.isnull().sum()\nmsno.matrix(train,figsize=(12,5))","4021575a":"survived = train[\"Survived\"]\ntotal = survived.shape[0]\nresult_survived = pd.value_counts(survived)\nprint (result_survived)\n\nlabels_survived = 'Survived', 'Dead'\nsize_survived = [result_survived[1]\/total, result_survived[0]\/total]\nexplode_survived = [0.1, 0]\n\nplt.figure(figsize = (5,5))\nplt.pie(size_survived, explode = explode_survived, labels = labels_survived, center = (0, 0), labeldistance=1.1, autopct='%1.2f%%', pctdistance=0.5, shadow=True)\nplt.title(\"Survived\")\n\nplt.show()","d4ec2792":"passenger_class = train[\"Pclass\"]\nresult_class = pd.value_counts(passenger_class)\n\nlabels_class = 'Class 1', 'Class 2', 'Class 3'\nsize_class = [result_class[1]\/total, result_class[2]\/total, result_class[3]\/total]\nexplode_class = [0.1, 0.1, 0.1]\n\nplt.figure(figsize = (5,4.5))\nplt.pie(size_class, explode = explode_class, labels = labels_class, center = (0, 0), labeldistance=1.1, autopct='%1.2f%%', pctdistance=0.5, shadow=True)\nplt.title(\"Passenger class\")\n\nplt.show()","f716ce2e":"train[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"]).mean().plot.bar()\nsns.countplot(\"Pclass\", hue = \"Survived\", data = train)\n\nplt.show()","816a6955":"passenger_sex = train[\"Sex\"]\nresult_sex = pd.value_counts(passenger_sex)\n   \nlabels_sex = 'Male', 'Female'\nsize_sex = [result_sex['male']\/total, result_sex['female']\/total]\nexplode_sex = [0.1, 0]\n\nplt.figure(figsize = (5,4.5))\nplt.pie(size_sex, explode = explode_sex, labels = labels_sex, center = (0, 0), labeldistance=1.1, autopct='%1.2f%%', pctdistance=0.5, shadow=True)\nplt.title(\"Sex\")\n\nplt.show()","d99fd425":"train[[\"Sex\", \"Survived\"]].groupby([\"Sex\"]).mean().plot.bar()\nsns.countplot(\"Sex\", hue = \"Survived\", data = train)\n\nplt.show()","ced77577":"sns.catplot(x = \"Pclass\", y = \"Survived\", hue = \"Sex\", data = train, height = 5, kind = \"bar\")\n\nplt.show()","7838db8a":"age = train[\"Age\"]\nresult_age = pd.value_counts(age)\nx = np.arange(0,90,0.1)\n\n#age.isnull().sum()\nage = age.dropna(axis = 0, how = \"any\") # Delete \"nan\" recoards\n#print (age)\n\nplt.bar(x,result_age[x])\nplt.show","4c82f30f":"sns.violinplot(x = \"Pclass\", y = \"Age\", hue = \"Survived\", split = True, inner = \"quart\",data = train)\n\nplt.show()","5af82527":"sns.violinplot(x = \"Sex\", y = \"Age\", hue = \"Survived\", split = True, inner = \"quart\",data = train)\n\nplt.show()","f054e84b":"sibsp = train[\"SibSp\"]\nresult_sibsp = pd.value_counts(sibsp)\nx_1 = np.arange(0,10,1)\n\nparch = train[\"Parch\"]\nresult_parch = pd.value_counts(parch)\nx_2 = np.arange(0,10,1)\n\nf, (ax1, ax2) = plt.subplots(2, 1, figsize=(7, 5), sharex=True)\n\nsns.barplot(x_1, result_sibsp[x_1], ax = ax1)\nsns.barplot(x_2, result_parch[x_2], ax = ax2)\nplt.show","2cf6bb19":"sibsp_survived = pd.crosstab([train.SibSp],train.Survived)\nprint (sibsp_survived)\n\nparch_survived = pd.crosstab([train.Parch],train.Survived)\nprint (parch_survived)","808a0137":"f, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 5), )\n\nsns.barplot('SibSp','Survived', data=train, ax = ax1)\nsns.barplot('Parch','Survived', data=train, ax = ax2)","3c243db9":"class_fare = pd.crosstab([train.Pclass],train.Fare)\nprint (class_fare)","b39e108f":"f, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5), )\nsns.boxenplot(x = \"Pclass\", y = \"Fare\", color = \"blue\", scale = \"linear\", data = train, ax = ax1)\nsns.violinplot(x = \"Pclass\", y = \"Fare\", hue = \"Survived\", split = True, inner = \"quart\",data = train, ax = ax2)\nplt.show()","b619067b":"train = train.drop(columns = ['PassengerId', 'Name', 'Ticket', 'Cabin'])\n\ntrain.isnull().sum()","69c4d058":"train.fillna({\"Embarked\":\"S\"},inplace=True)\ntrain.isnull().sum()","69cb8c39":"ports = {\"S\": 0, \"C\": 1, \"Q\": 2}\ntrain['Embarked'] = train['Embarked'].map(ports)\n\ntrain.Embarked.describe()","4f85f531":"genders = {\"male\": 0, \"female\": 1}\ntrain['Sex'] = train['Sex'].map(genders)\n\ntrain.Sex.describe()","27cd5dc6":"age_med = train.groupby([\"Pclass\",\"Sex\"]).Age.median()\ntrain.set_index([\"Pclass\",\"Sex\"],inplace = True)\ntrain.Age.fillna(age_med, inplace = True)\ntrain.reset_index(inplace = True)\n\ntrain.Age.describe()","94977569":"train_test, train_eval = train_test_split(train, test_size = 0.2)\n\nprint (train_test)\nprint (train_eval)","fc733ffb":"train_test_learning = train_test.drop(\"Survived\", axis = 1)\ntrain_test_results = train_test[\"Survived\"] # generate the results list\n\ntrain_eval_learning = train_eval.drop(\"Survived\", axis = 1)\ntrain_eval_results = train_eval[\"Survived\"] # generate the results list\n\nprint (train_test_learning, train_test_results)","052748e8":"# Eculidean distance calculation\ndef euclideanDistance(instance1,instance2,length):\n    distance = 0\n    for x in range(length):\n        distance = pow((instance1[x] - instance2[x]),2)\n    return math.sqrt(distance)\n \n# Return K nearest distance\ndef getNeighbors(trainingSet,testInstance,k):\n    distances = []\n    length = len(testInstance) -1\n    # Calculate test record to each train records\n    for x in range(len(trainingSet)):\n        dist = euclideanDistance(testInstance, trainingSet[x], length)\n        distances.append((trainingSet[x],dist))\n    # Sort of all distance\n    distances.sort(key = operator.itemgetter(1))\n    neighbors = []\n    # Return K nearest value\n    for x in range(k):\n        neighbors.append(distances[x][0])\n    return neighbors\n \n# Merge all KNN and find the largest value\ndef getResponse(neighbors):\n    classVotes = {}\n    for x in range(len(neighbors)):\n        response = neighbors[x][-1]\n        if response in classVotes:\n            classVotes[response] += 1\n        else:\n            classVotes[response] = 1\n    # Sort of the KNN\n    sortedVotes = sorted(classVotes.items(),key = operator.itemgetter(1),reverse =True)\n    return sortedVotes[0][0]\n \n# Evaluate the model\ndef getAccuracy(testSet,predictions):\n    correct = 0\n    for x in range(len(testSet)):\n        if testSet[x][-1] == predictions[x]:\n            correct+=1\n    return (correct\/float(len(testSet))) * 100.0\n\n# Convert the dataframe to array\ntrainingSet = pd.concat([train_test_learning,train_test_results],axis=1).values\ntestSet = pd.concat([train_eval_learning,train_eval_results],axis=1).values\n\n# Generate the prediction list\npredictions = []\n\n# Define K value\nk = 5\n\n#print (trainingSet)\n\n# Main Part\nfor x in range(len(testSet)):\n    neighbors = getNeighbors(trainingSet, testSet[x], k)\n    result = getResponse(neighbors)\n    predictions.append(result)\n    print (\">predicted = \" + repr(result) + \",actual = \" + repr(testSet[x][-1]))\naccuracy = getAccuracy(testSet, predictions)\nprint (\"Accuracy:\" + repr(accuracy) + \"%\")","097f4b11":"knn = KNeighborsClassifier(n_neighbors = 20, weights = 'uniform', algorithm = 'auto', leaf_size = 30, p = 2, metric = 'minkowski', metric_params = None, n_jobs = 1)\nknn.fit(train_test_learning, train_test_results)  \neval_pred_knn = knn.predict(train_eval_learning)  \nacc_knn = round(knn.score(train_test_learning, train_test_results) * 100, 2)\n\n#print (eval_pred)\n#print (train_eval_results)\nprint (acc_knn)\n\naccuracy_score(train_eval_results, eval_pred_knn)","3894bcfb":"class Bagging(object):\n    # Initialization\n    def __init__(self,n_estimators,estimator,rate=1.0):\n        self.estimator = estimator\n        self.n_estimators = n_estimators\n        self.rate = rate\n\n    def Voting(self,data):          # Define voting method\n        term = np.transpose(data)   \n        result = list()            \n\n        def Vote(df):               # vote for each raw or each simple model output\n            store = defaultdict()\n            for kw in df:\n                store.setdefault(kw, 0)\n                store[kw] += 1\n            return max(store,key = store.get)\n\n        result = map(Vote,term)      # Generate results\n        return result\n\n    # Define Under-Sampling\n    def UnderSampling(self,data):\n        #np.random.seed(np.random.randint(0,1000))\n        data = np.array(data)\n        np.random.shuffle(data)    # Personally think shuffle is important          \n        newdata = data[0:int(data.shape[0] * self.rate),:]   # Define the number of elements in new set\n        return newdata   \n\n    def TrainPredict(self,train,test):          # Build simple model\n        clf = self.estimator.fit(train[:,0:-1],train[:,-1])\n        result = clf.predict(test[:,0:-1])\n        return result\n\n    # General sampling method\n    def RepetitionRandomSampling(self,data,number):     \n        sample = []\n        for i in range(int(self.rate * number)):\n             sample.append(data[random.randint(0,len(data)-1)])\n        return sample\n\n    def Metrics(self,predict_data,test):        # Evaluation\n        score = predict_data\n        recall = recall_score(test[:,-1], score, average = None)    # Recall\n        precision = precision_score(test[:,-1], score, average = None)  # Precision\n        return recall,precision\n\n\n    def MutModel_clf(self,train,test,sample_type = \"RepetitionRandomSampling\"):\n        print (\"self.Bagging Mul_basemodel\")\n        result = list()\n        num_estimators = len(self.estimator)   \n\n        if sample_type == \"RepetitionRandomSampling\":\n            print (\"Sample Method\uff1a\",sample_type)\n            sample_function = self.RepetitionRandomSampling\n        elif sample_type == \"UnderSampling\":\n            print (\"Sample Method\uff1a\",sample_type)\n            sample_function = self.UnderSampling \n            print (\"Sampling Rate\",self.rate)\n        elif sample_type == \"IF_SubSample\":\n            print (\"Sample Method\uff1a\",sample_type)\n            sample_function = self.IF_SubSample \n            print (\"Sampling Rate\",(1.0-self.rate))\n\n        for estimator in self.estimator:\n            print (estimator)\n            for i in range(int(self.n_estimators\/num_estimators)):\n                sample = np.array(sample_function(train,len(train)))       \n                clf = estimator.fit(sample[:,0:-1],sample[:,-1])\n                result.append(clf.predict(test[:,0:-1]))      # Summerize simple model output\n\n        score = self.Voting(result)\n        recall,precosoion = self.Metrics(score,test)\n        return recall,precosoion  \n\ntrain_r = Bagging(trainingSet,100,10)\n\nprint (train_r)","2b4144f5":"bagging = BaggingClassifier(base_estimator = None, n_estimators = 10, max_samples = 1.0, max_features = 1.0, bootstrap = True, bootstrap_features = False, oob_score = False, warm_start = False, n_jobs = 1, random_state = None, verbose = 0)\nbagging.fit(train_test_learning, train_test_results)\n\neval_pred_bg = bagging.predict(train_eval_learning)\nacc_bg = round(bagging.score(train_test_learning, train_test_results) * 100, 2)\n\n#print (eval_pred_bg)\nprint (acc_bg)\n\naccuracy_score(train_eval_results, eval_pred_bg)","f0f0eeca":"decision_tree = DecisionTreeClassifier(criterion = 'gini', splitter = 'best', max_depth = None, min_samples_split = 2, min_samples_leaf = 1, min_weight_fraction_leaf = 0.0, max_features = None, random_state = None, max_leaf_nodes = None, min_impurity_decrease = 0.0, min_impurity_split = None, class_weight = None, presort = False)\ndecision_tree.fit(train_test_learning, train_test_results)\n\neval_pred_dt = decision_tree.predict(train_eval_learning)\nacc_dt = round(decision_tree.score(train_test_learning, train_test_results) * 100, 2)\n\n#print (eval_pred_dt)\nprint (acc_dt)\n\naccuracy_score(train_eval_results, eval_pred_dt)","66422a38":"random_forest = RandomForestClassifier(n_estimators = 100, criterion = 'gini', max_depth = None, min_samples_split = 2, min_samples_leaf = 1, min_weight_fraction_leaf = 0.0, max_features = 'auto', max_leaf_nodes = None, min_impurity_decrease = 0.0, min_impurity_split = None, bootstrap = True, oob_score = True, n_jobs = 1, random_state = None, verbose = 0, warm_start = False, class_weight = None)\nrandom_forest.fit(train_test_learning, train_test_results)\n\neval_pred_rf = random_forest.predict(train_eval_learning)\n\nacc_rf = round(random_forest.score(train_test_learning, train_test_results) * 100, 2)\n\n#print (eval_pred_rf)\nprint (acc_rf)\n\naccuracy_score(train_eval_results, eval_pred_rf)","bece5eea":"logistic_regression = LogisticRegression(penalty = 'l2', dual = False, tol = 0.0001, C = 1.0, fit_intercept = True, intercept_scaling = 1, class_weight = None, random_state = None, solver = 'liblinear', max_iter = 100, multi_class = 'ovr', verbose = 0, warm_start = False, n_jobs = 1)\nlogistic_regression.fit(train_test_learning, train_test_results)\n\n\neval_pred_lr = logistic_regression.predict(train_eval_learning)\n\nacc_lr = round(logistic_regression.score(train_test_learning, train_test_results) * 100, 2)\n\n#print (eval_pred_lr)\nprint (acc_lr)\n\naccuracy_score(train_eval_results, eval_pred_lr)","12362bfd":"def SGD(self, training_data, epochs, mini_batch_size, eta, test_data=None):\n    if test_data:\n        n_test = len(test_data)\n        n = len(training_data)\n        for j in xrange(epochs):\n            random.shuffle(training_data)\n            mini_batches = [\n                training_data[k:k+mini_batch_size] \n                for k in xrange(0,n,mini_batch_size)]\n            for mini_batch in mini_batches:\n                self.update_mini_batch(mini_batch, eta)\n            if test_data:\n                print (\"Epoch {0}: {1}\/{2}\".format(j, self.evaluate(test_data),n_test))\n            else:\n                print (\"Epoch {0} complete\".format(j))","d5e6e69b":"sgd = SGDClassifier(loss = 'hinge', penalty = 'l2', alpha = 0.0001, l1_ratio = 0.15, fit_intercept = True, max_iter = None, tol = None, shuffle = True, verbose = 0, epsilon = 0.1, n_jobs = 1, random_state = None, learning_rate = 'optimal', eta0 = 0.0, power_t = 0.5, class_weight = None, warm_start = False, average = False, n_iter = None)\nsgd.fit(train_test_learning, train_test_results)\n\neval_pred_sgd = sgd.predict(train_eval_learning)\n\nacc_sgd = round(sgd.score(train_test_learning, train_test_results) * 100, 2)\n\nprint (acc_sgd)\n\naccuracy_score(train_eval_results, eval_pred_sgd)","76cd4a0b":"perceptron = Perceptron(penalty = None, alpha = 0.0001, fit_intercept = True, max_iter = None, tol = None, shuffle = True, verbose = 0, eta0 = 1.0, n_jobs = 1, random_state = 0, class_weight = None, warm_start = False, n_iter = None)\nperceptron.fit(train_test_learning, train_test_results)\n\n\neval_pred_pp = perceptron.predict(train_eval_learning)\n\nacc_pp = round(perceptron.score(train_test_learning, train_test_results) * 100, 2)\n\n#print (eval_pred_pp)\nprint (acc_pp)\n\naccuracy_score(train_eval_results, eval_pred_pp)","5ed55d79":"linear_svc = LinearSVC()\nlinear_svc.fit(train_test_learning, train_test_results)\n\neval_pred_liner_svc = linear_svc.predict(train_eval_learning)\n\nacc_linear_svc = round(linear_svc.score(train_test_learning, train_test_results) * 100, 2)\n\nprint (acc_linear_svc)\n\naccuracy_score(train_eval_results, eval_pred_liner_svc)","91121ee4":"svc = SVC(C = 1.0, kernel = 'rbf', degree = 3, gamma = 'auto', coef0 = 0.0, shrinking = True, probability = False, tol = 0.001, cache_size = 200, class_weight = None, verbose = False, max_iter = -1, decision_function_shape = 'ovr', random_state = None)\nsvc.fit(train_test_learning, train_test_results)\n\neval_pred_svc = svc.predict(train_eval_learning)\n\nacc_svc = round(svc.score(train_test_learning, train_test_results) * 100, 2)\n\nprint (acc_svc)\n\naccuracy_score(train_eval_results, eval_pred_svc)","d27d6acb":"gaussian_naive_bayes = GaussianNB(priors = None)\ngaussian_naive_bayes.fit(train_test_learning, train_test_results)\n\neval_pred_gnb = gaussian_naive_bayes.predict(train_eval_learning)\n\nacc_gnb = round(gaussian_naive_bayes.score(train_test_learning, train_test_results) * 100, 2)\n\nprint (acc_gnb)\n\naccuracy_score(train_eval_results, eval_pred_gnb)","ad9d886e":"def kmeans(data,k=2):\n    def _distance(p1,p2):\n        \"\"\"\n        Return Eclud distance between two points.\n        p1 = np.array([0,0]), p2 = np.array([1,1]) => 1.414\n        \"\"\"\n        tmp = np.sum((p1-p2)**2)\n        return np.sqrt(tmp)\n    def _rand_center(data,k):\n        \"\"\"Generate k center within the range of data set.\"\"\"\n        n = data.shape[1] # features\n        centroids = np.zeros((k,n)) # init with (0,0)....\n        for i in range(n):\n            dmin, dmax = np.min(data[:,i]), np.max(data[:,i])\n            centroids[:,i] = dmin + (dmax - dmin) * np.random.rand(k)\n        return centroids\n    \n    def _converged(centroids1, centroids2):\n        \n        # if centroids not changed, we say 'converged'\n         set1 = set([tuple(c) for c in centroids1])\n         set2 = set([tuple(c) for c in centroids2])\n         return (set1 == set2)\n        \n    \n    n = data.shape[0] # number of entries\n    centroids = _rand_center(data,k)\n    label = np.zeros(n,dtype=np.int) # track the nearest centroid\n    assement = np.zeros(n) # for the assement of our model\n    converged = False\n    \n    while not converged:\n        old_centroids = np.copy(centroids)\n        for i in range(n):\n            # determine the nearest centroid and track it with label\n            min_dist, min_index = np.inf, -1\n            for j in range(k):\n                dist = _distance(data[i],centroids[j])\n                if dist < min_dist:\n                    min_dist, min_index = dist, j\n                    label[i] = j\n            assement[i] = _distance(data[i],centroids[label[i]])**2\n        \n        # update centroid\n        for m in range(k):\n            centroids[m] = np.mean(data[label==m],axis=0)\n        converged = _converged(old_centroids,centroids)    \n    return centroids, label, np.sum(assement)","596f88a6":"#Trainset = train_test_learning.values\n\n#print (Trainset)\n\nkmeans = KMeans(n_clusters = 2, init = 'k-means++', n_init = 10, max_iter = 300, tol = 0.0001, precompute_distances = 'auto', verbose = 0, random_state = None, copy_x = True, n_jobs = 1, algorithm = 'auto')\nkmeans.fit_predict(train_test_learning)\nlabel_pred = kmeans.labels_\ncentroids = kmeans.cluster_centers_ # Clustering center\ninertia = kmeans.inertia_ # Clustering inertia summary\n\n#print (label_pred)\nprint (centroids)\nprint (inertia)\n\nacc_k = accuracy_score(train_test_results, label_pred)*100\n\nprint (acc_k)","550c907c":"mlp = MLPClassifier(hidden_layer_sizes = (50, ), activation = 'relu', solver = 'adam', alpha = 0.0001, batch_size = 'auto', learning_rate = 'constant', learning_rate_init = 0.001, power_t = 0.5, max_iter = 200, shuffle = True, random_state = None, tol = 0.0001, verbose = False, warm_start = False, momentum = 0.9, nesterovs_momentum = True, early_stopping = False, validation_fraction = 0.1, beta_1 = 0.9, beta_2 = 0.999, epsilon = 1e-08)\nmlp.fit(train_test_learning, train_test_results)\n\neval_pred_mlp = mlp.predict(train_eval_learning)\n\nacc_mlp = round(mlp.score(train_test_learning, train_test_results) * 100, 2)\n\nprint (acc_mlp)\n\naccuracy_score(train_eval_results, eval_pred_mlp)","58c2935c":"start = time() # use \"time\" function to calculate the model process time\n\nmodel = Sequential() # very improtent, it defines the model is built one layer by one layer\nmodel.add(Dense(input_dim=7, output_dim=1)) # .add means add a layer into model; dense is the layer I added, dense layer is fully connected layer\nmodel.add(Activation(\"relu\")) # add activation function, I choose \"relu\" for classification\n# this is a single layer model, it is a simple one. If need, you can add more layers by using code .add\n# take care, before you built the model, it is better to have a whole model topology \n# after this, we define the model topology\n\n# next, we need activate model by using code .complie\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# we define the optimizer, loss function\n# optimize can be custimize first, than add into the complie function\n# metrics is used for evaluate the model, can put accuracy, score or cost into it\n\n# train the model by using .fit\nmodel.fit(train_test_learning, train_test_results)\n# train data, train label\n# can add the number of epoch and batch size as well.\n\nloss, accuracy = model.evaluate(train_test_learning, train_test_results)\nacc_nn = 100*accuracy\n\nprint (loss, accuracy)\nprint ('\\ntime taken %s seconds' % str(time() - start))\n\n# predic the test data\ndp1_pred = model.predict_classes(train_eval_learning)\n#print (dp1_pred)\n#print (train_eval_results)\nprint (\"\\n\\naccuracy\", np.sum(dp1_pred == train_eval_results.values) \/ float(len(train_eval_results.values)))","18f8b15f":"comparesion = pd.DataFrame({\n    'Model': ['KNN', 'bagging', 'Decision Tree', 'Random Forest', 'Logistic Regression', \n              'Stochastic Gradient Decent', 'Perceptron', 'Linear Support Vector Machines', \n              'Support Vector Machines', 'Naive Bayes', 'K-Means', 'N.N(sklearn)', 'N.N(keras)'],\n    'Score': [acc_knn, acc_bg, acc_dt, acc_rf, acc_lr, acc_sgd, acc_pp, acc_linear_svc, acc_svc,\n              acc_gnb, acc_k, acc_mlp, acc_nn\n              ]})\ncomparesion_df = comparesion.sort_values(by='Score', ascending=False)\ncomparesion_df = comparesion_df.set_index('Score')\ncomparesion_df.head(14)","f66d9895":"predictions = cross_val_predict(random_forest, train_test_learning, train_test_results, cv=3)\nprint (precision_score(train_test_results, predictions), recall_score(train_test_results, predictions))","c5053f16":"y_scores = random_forest.predict_proba(train_test_learning)\ny_scores = y_scores[:,1]\n\nprecision, recall, threshold = precision_recall_curve(train_test_results, y_scores)\n\ndef plot_precision_vs_recall(precision, recall):\n    plt.plot(recall, precision, \"g--\", linewidth=2.5)\n    plt.ylabel(\"recall\", fontsize=19)\n    plt.xlabel(\"precision\", fontsize=19)\n    plt.axis([0, 1, 0, 1])\n\nplt.figure(figsize=(10, 5))\nplot_precision_vs_recall(precision, recall)\nplt.show()","f8803f5b":"false_positive_rate, true_positive_rate, thresholds = roc_curve(train_test_results, y_scores)\n# plotting them against each other\ndef plot_roc_curve(false_positive_rate, true_positive_rate, label=None):\n    plt.plot(false_positive_rate, true_positive_rate, linewidth=2, label=label)\n    plt.plot([0, 1], [0, 1], 'r', linewidth=4)\n    plt.axis([0, 1, 0, 1])\n    plt.xlabel('False Positive Rate (FPR)', fontsize=16)\n    plt.ylabel('True Positive Rate (TPR)', fontsize=16)\n\nplt.figure(figsize=(10, 5))\nplot_roc_curve(false_positive_rate, true_positive_rate)\nplt.show()","52448eb5":"final = roc_auc_score(train_test_results, y_scores)\n\nprint (final)","6ed61758":"test_mod = test.drop(columns = ['Name', 'Ticket', 'Cabin'])\n\nage_med_test = test_mod.groupby([\"Pclass\",\"Sex\"]).Age.median()\ntest_mod.set_index([\"Pclass\",\"Sex\"],inplace = True)\ntest_mod.Age.fillna(age_med_test, inplace = True)\ntest_mod.reset_index(inplace = True)\n\nfare_med_test = test_mod.groupby([\"Pclass\"]).Fare.median()\ntest_mod.set_index([\"Pclass\"],inplace = True)\ntest_mod.Fare.fillna(fare_med_test, inplace = True)\ntest_mod.reset_index(inplace = True)\n\ntest_mod['Embarked'] = test_mod['Embarked'].map(ports)\ntest_mod['Sex'] = test_mod['Sex'].map(genders)\n\ntest_mod.isnull().sum()\n\ntest_mod_pred = test_mod.drop(\"PassengerId\", axis = 1)\ntest_mod_id = test_mod[\"PassengerId\"] # generate the results list\n\npred = random_forest.predict(test_mod_pred)\n\nprint (pred)\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_mod_id,\n        \"Survived\": pred\n    })\n\nsubmission.to_csv(\"submission.csv\",index=False)","b2229694":"Let us introduce \"**Survived**\" into previous figure. <br>\nFirst, we check the **SibSp\/Survived** and **Parch\/Survived** table.<br>\nThen, use **bar chart** to indicate the data.","5f2316d2":"Last step is to predict the test data set and submission.","fecd42fd":"**<H1>Random Forest<H1>**\n\nIf two methods, bagging and decision tree, are combined, there will be an new method, Random Forest. Tuning the parameters based on the decsion tree and bagging I mentioned above.","154375f7":"Same as above other methods, \"sklearn\" provide the function as well. Let us take a look at parameters.\n\n* criterion: This determin the algorithom. For **gini impurity**,  which is a measure of how often a randomly chosen element from the set would be incorrectly labeled if it was randomly labeled according to the distribution of labels in the subset,  simply as **CART**, the setting should be \"**gini**\". For **imformation gain** as I use for raw code, you can choose \"**entropy**\"; \n\n* splitter: Two options, \"**best**\" for best split; \"**random**\" for random split. If the set is not large, best is good, otherwise, please use \"random\";\n\n* max_depth: How deep the tree goes to.  If the **data is not big** or the **number of featrues** is not big, can use defalut value \"**None**\". Otherwise, the randm value between **10-100** is better.\n\n* min_samples_split: Defalut value is** 2**, which hs a good performance for **small data sample**. If the **set is large**, increase this value a little bit. The maximum valueI used for this parameter is **10**;\n\n* min_samples_leaf: Same as above features, **if the data set is samll, keep default value \"1\"**. If the set is large, increase this value a little bit. The maximum valueI used for this parameter is **5**;\n\n* min_weight_fraction_leaf: If we **ignore the weight issue**, set value \"**0**\". If not, or the** some samples have missing features**, or** the deviation of the distribution category is large**, please consider this value;\n\n* max_features: Very important parameter, I just copy from official website, I think it is very clear;\n> The number of features to consider when looking for the best split:\n> * If **int**, then consider max_features features at each split;\n> * If **float**, then max_features is a percentage and int(max_features * n_features) features are considered at each split;\n> * If **\u201cauto\u201d**, then max_features=sqrt(n_features);\n> * If **\u201csqrt\u201d**, then max_features=sqrt(n_features);\n> * If **\u201clog2\u201d**, then max_features=log2(n_features);\n> * If **None**, then max_features=n_features;\n\n* random_state: Not use too much;\n\n* max_leaf_nodes: For set, if the feature is not to much, keep defalut value. Otherwise, set a value will have a better performance. Use cross validation to choose the value;\n\n* min_impurity_decrease: A node will be split if this split induces a decrease of the impurity greater than or equal to this value;\n\n* min_impurity_split: Threshold for early stopping in tree growth;\n\n* class_weight: This parameter is used for **blancing the set smaples**. For example, if in the set, one type of data record is too many, so the decision tree predicion is strongly related with this type of data, which is not good. In this case, we need set as \"**balance**\". If not, choose \"**None**\";\n\n* presort: It is related with the speed. Normally I ignore this parameter.\n","b7415aa9":"Yup, \"**Fare**\" is related with \"**Pclass**\". The above left one shows the price pattern of class 1, 2 nd 3. **Class 1 has the highest price. Class 2 price is higher than class 3, but the differenceis quite small.** <br>\n\nTill now, all the necessary data visualization is done. I think I have a understanding of this data.<br>\nNext, I will start to **build the machine learning model.**\n","2186fb31":"\"sklearn\" function implementation.\n\n* penalty: This parameter is related with normalization. If the purpose is **solve overfitting problem**, choose \"**l2**\"; if the **predict result is not good**, try \"**l1**\";\n\n* dual: Normally is \"false\". **Only if \"penalty = 'l2'\" and \"solve = 'liblinear'\"**, choose \"dual\"; \n\n* tol: critaria on stopping;\n\n* C: Inverse of lambda;\n\n* fit_intercept: Normally set \"True\";\n\n* intercept_scaling: **Only if \"solve='liblinear'\" and \"fit_intercept='True'\"**, this parameter affect the prediction;\n\n* class_weight: same as desicion tree;\n\n* random_state: **Only if \"solve='sag'\" or \"solve='liblinear'\"**, this parameter affect the prediction. Otherwise, keep it as default;\n\n* solver: Define the method on cost function optimization:\n> * For small datasets, \u2018liblinear\u2019 is a good choice, whereas \u2018sag\u2019 and \u2018saga\u2019 are faster for large ones.\n> * For multiclass problems, only \u2018newton-cg\u2019, \u2018sag\u2019, \u2018saga\u2019 and \u2018lbfgs\u2019 handle multinomial loss; \u2018liblinear\u2019 is limited to one-versus-rest schemes.\n> * \u2018newton-cg\u2019, \u2018lbfgs\u2019 and \u2018sag\u2019 only handle L2 penalty, whereas \u2018liblinear\u2019 and \u2018saga\u2019 handle L1 penalty.\n\n* max_iter: maximum iter number, default is 10. ** Only if \"solve='sag'\" or \"solve='newton-cg'\" or \"solve='lbfgs'\"**, this parameter affect the prediction. \n\n* multi_class : Two types: \"**ovr**\" means \"one to rest\", and \"**mvm**\" means \"many to many\". \"ovr\" is simple and fast but perforamce is not as good as \"mvm\", but \"mvm\" is slower.\n","bffe8934":"\"sklearn\" provide the N.N function as well. As menthioned, perceptron is the basic of N.N, so the \"sklearn\" model is called **multi-layer perceptron (MLP)**. However, \"sklearn\" model is not intend to **handle big data**. \n\n1. hidden_layer_sizes: Define the hidden laye size, in the other words, it defines the topology. For example, (10, 5) means there are two hidden layers, the first hidden layer contains 10 neurons, the second hidden layer contains 5 neurons;\n\n2. activation: Define activation function. Can only choose **\"identity\", \"logistic\" (sigmoid), \"tanh\" and \"relu\";**\n\n3. solver: Optimization method. Can choose **\"lbfgs\", \"sgd\" and \"adam\"**;\n\n4. alpha: Normalize parameter;\n\n5. batch_size: Related with mini-batch;\n\n6. learning_rate & learning_rate_init: Define the learning rate;\n\n7. power_t: The exponent for inverse scaling learning rate;\n\n8. max_iter: Maximum number of iterations;\n\n9. shuffle: Whether to shuffle samples in each iteration;\n\n10. momentum: Momentum for gradient descent update;\n\n11. nesterovs_momentum: Whether to use Nesterov\u2019s momentum.\n","07a7b29c":"**<H1>Data Preparation<H1>**\n\nBefore we start the prediction, we need to do the **data preparation**.<br>\nIf we look back to the beginning, we found that there are **177 records** missing under label \"**Age**\" and **over 650 records** missing under label \"**Cabin**\". Moreover, what we found from the visualization is that, **some label is not useful** for the prediction. Based on this, we do the data preparation by the following steps:\n\n* Delete the column \"Cabin\", as we visualize it and find it not important; \n\n* Convert the 'nan' to 'S' under label \"Embarked\". Further convert label \"Embarked\" as:<br>\n\"S\" -> \"0\";\n<br>\n\"C\" -> \"1\";\n<br>\n\"Q' -> \"2\";\n\n* Convert 'male' to '0' and 'femal' to '1' under label \"Sex\";\n\n* Fill missing records under label \"Age\". Normally, the mediation number is used for the refill. Moreover, I consider sex and class fsctor as well.\n\n* Split train data set into two parts: learning and evaluation.\n","5c68fa29":"**<H1>Decision Tree<H1>**\n\nNext, let's try other method, Decision Tree. Follow the bollowing steps to build decision tree model.\n* Define **entropy** calculation;\n\n* Calculate **infomation gain ratio** and choose the feature with largest gain ratio;\n\n* Split the data based on the feature;\n\n* Iterate the above steps to **generate the decision tree**;\n\n* If it possible, **visualize** the decision tree;\n\n* Prepare the test data set and **run** the model.\n","c64379e6":"Besides the \"sklearn\", there are some other library can be used for N.N , even deep learning, model built. **Keras** is one of them. The following is the keras N.N model. I add come comments in the code to explain the code meaning.","760c56f5":"Among the rescued people, the **female** is aound **1.5 times** more than **male**.  This indicates the truth that, women have a high priority to board the lifeboat.\n\nI try to add the **class** info into the result. I would like to check is there the order among the class.","a5d4f298":"Last figure indicates the relation between class and survived. **First class has the largest survived number**, followed by the third class. The difference between three classes survived amounts is not so large. It seems like the importnce of class is not high. But, one we need notice that, the people in the third class is largest.\n\nNext , I will check label \"**Sex**\" by **pie chart**.","1c621bcc":"Same as KNN,  sklearn provide \"Bagging\" function. We can use it directly. So the problem is how to set parameters. The following s are the definitions for each parameter.\n* base_estimator: basic parameter for simple model, defualt settingis \"None\" which means **decision tree**. Also, youcan change it to **random forest** or others;\n\n* n_estimators: No. of estimator. Normally, **the more estimator, the lower variance**;\n\n* max_samples: the number of parameter j. Please note, thea value an be **integer or float**.But, if you set \"1\" pnot \"1.0\" and there is only one sample in the new set, the error will occur;\n\n* max_features: number of new set features;\n\n* bootstrap & bootstrap_features: **replacement** samples and sample features or not;\n\n* oob_score: \"oob\" stands of \"**out of bag**\". Whether to use out-of-bag samples to estimate the **generalization error**.\n\n* warm_start: **Reuse** the solution of the previous call to fit and add more estimators to the ensemble if the setting is Ture;\n\n* n_jobs: How many jobs working parally;\n","a63eb35d":"**<H1>Neural Network (N.N)<H2>**\n\nNeural network, even deep learning, is widely used technology. It **simulate the human brain** working, especilly in some specify area which the conventional method is not good at, as **computer vision**, **speed recognition**...\n\nThe N.N contains **three components**:\n1. Topology, weights and biases: These parameters define the N.N **architechture**;\n\n2. Activity rule: It defines the how to activate the nodes (neurons) and transfer the info between each nodes (neuons);\n\n3. Learning rule or propagation rule: This is very important in the N.N. It defines the how to optimize the model parameters to achieve the best performance. If the activitry rule is considered as short-term dynamic rule, the propogation can be considered as a long-term dymanic rule.\n\nTo implement the raw N.N model, the above three components are necessary. Strongly recommend the ccousera course to build the N.N, even deep learning model step by step. It is worth to do it.","d13f91ca":"**<H1>K-Means<H1>**\n\nAll the above prediction methods are **supervised learning**. Let us take a look at **unsupervised learning** one.\n\nK-means is a typical unsupervised learning method.  It is suitablefor **text mining** as well. The followings are the steps of K-means:\n\n1. Define the number of clustering center, K. Randomly choose the clustering center;\n\n2. Calculate the distance between each point and each clustering center;\n\n3. Based on the distance, implemnt K clustering;\n\n4. Calculate the clustering center again;\n\n5. Repeat step 1-3, tilll the center is not change.\n\nBased on the steps, it is obvious to see that the essential parameters is **number of clustering** and clustering center.","b8f49b8f":"**<H1>KNN<H1>**\n\nI try the KNN method first.\nI will follow the following steps to build the KNN model:\n\n* Split the train dataset into two part: raw data and result list;\n\n* Calculate [eculidean distance](http:\/\/https:\/\/en.wikipedia.org\/wiki\/Euclidean_distance). The distance between each test record and learning record will be calculated;\n\n* Find the K nearest distance and return the largest value;\n\n* Based on the largest value, generate the prediction results;\n\n* Evaluate the results.\n","201682c6":"First of the first, the dataset is **loaded**.<br>\nWe can check each data and their discription.<br>\nMoreover, **the missing records** can be viusalized.","29ce4ffc":"**<H1>Logistic Regression<H1>**\n\n**Linear regression** is basic prediction method. However, the regression equation of linear regression is **linear function**. If we want to accurate regression or classification, the function may not be linear. So, **logistic regression** is introduced as advance method.\n\nTo implement the logistic regression, the following aspects are necessary:\n\n* Regression\/Classification equation: a propoer function is necessary for the classification, like **step, sigmoid**....\n\n* Cost function: The **variation** between prediction and realistic. \n\n* Using **gradient decrese or other advanced method** to minimize the cost function and find **the best model parameters**.\n","3b1cc657":"Till now, I try different types of prediction method to predict survived person. But, which method is the best?\n\nLet us create a final results to check which one is the best.\n","1a9065ba":"For random forest, draw **precision & recall curve** and **ROC**","4939fa24":"SGD implemetation by \"sklearn\".\n\n1. loss: Define the loss function. Can choose from \"**hinge**\", \"**modified_huber**\", \"**log**\", \"**squared_loss**\", \"**epsilon_insensitive**\" and \"**huber**\";\n\n2. penalty: same as logistic regression;\n\n3. alpha: penalty function parameter; \n\n4. l1_ratio: The mixtrue value for \"l1\" and 'l2\". **\"0\" means \"l2\"; \"1\" means \"l1\"**;\n\n5. fit_intercept: Whether the intercept should be estimated or not;\n\n6. max_iter: The maximum number of passes over the training data (aka epochs);\n\n7. epsilon: Official description as follow:\n> Epsilon in the epsilon-insensitive loss functions; only if loss is \u2018huber\u2019, \u2018epsilon_insensitive\u2019, or \u2018squared_epsilon_insensitive\u2019. For \u2018huber\u2019, determines the threshold at which it becomes less important to get the prediction exactly right. For epsilon-insensitive, any differences between the current prediction and the correct label are ignored if they are less than this threshold.\n\n8. learning_rate:\n> The learning rate schedule:\n> * \u2018**constant**\u2019: eta = eta0\n> * \u2018**optimal**\u2019: eta = 1.0 \/ (alpha * (t + t0)) [default]\n> * \u2018**invscaling**\u2019: eta = eta0 \/ pow(t, power_t);\n\n9.  n_iter: The number of passes over the training data (aka epochs).\n","ff3f5711":"\"sklearn\" has the k-means function as well.\n\n1. n_clusters: Number of clustering;\n\n2. init: The method of choosing initial clustering center;\n\n3. n_init: Number of time the k-means algorithm will be run with different centroid seeds, which is related with initial clustering center;\n\n4. precompute_distances\uff1aNeed pre-calculate the distance or not. If it is \"True\", model will put the whole matrix in ram; if it is \"auto\", model willl choose \"false\" if n_samples * n_clusters > 12 million; if it is \"false\",the core algorithm is \"Cpython\";\n\n5. copy_x: When pre-computing distances it is more numerically accurate to center the data first. If copy_x is True, then the original data is not modified. If False, the original data is modified, and put back before the function returns, but small numerical differences may be introduced by subtracting and then adding the data mean;\n\n6. algorithm: K-means algorithm.\n","1911d17d":"**<H1>Naive Bayes<H1>**\n\nNaive bayes is a very simple predict method. It is based on **Bayes' theorem**, which is a famous theorem in probability theory. \n\nSimple speaking, the idea of naive bayes is **calcuate all the potential prediction resluts probability based on the bayes' theorem, then choose the result with highest probability**. It is a good method for text mining.","afdeb6cf":"It looks like a \"**Gaussian Distribution**\". <br>\nLet us add \"**Survived**\" label and **class & sex** factors.","b3168a02":"ROC score is very important value for performance evaluation. The more cvlose to 1, the better performance. Now, we can find that the random forest value is over 99%, which is good for the prefdiction.","f75fb9ab":"**<H1>Booststrap Aggregation (Bagging)<H1>**\n\n**Bagging** is a **classic prediction** method. It is the fundamental for many other advanced predict algorithm. In facts, bagging is the advanced method from **bootstrap** since the sampleing idea based on it. Different from the KNN, \"**class**\" is ued for module implementation, so this module can be used for other advanced method. General speaking from the publications, baggins is a good method for **unstable classification**. It has a better perforamce for **high square error\/low bias error model**.\n\nThe module is built by the following steps:\n* Initialization:\n\n* Sampling: Suppose there is a **original set \"S\"** which contains the **n** samples. Each time, I pick a sample and put it into a **new set \"Si\"**, after this, the sample will be **put back to the original set**. Repeat this step, we can generate **i new set** and each set contains **j elements**. We can define hw many new set we want to generate which is parameter i; same we can define how many elements in the new set which is parameter j. If j is less than n, the sampling method is called \"**Under-Sampling**\"; If j is larger than n, the sampling method is called \"**Over-Sampling**\"; If j is equal to n, the sampling method is called \"**Bootstrap**\". The reference code is defined other method as well. Please note, the elements in new set **can be the same** since we put the sample back after pick it out.\n\n* Simple model precess: For each new set, it will be processed by the simple model. Then each model have a result or output.\n\n* Voting: For **classification purpose**, voting is a good way. The results from simple model will be summeraized to define the finnal result. However, if we want to do **regression or others**, we can choose **averaging** method or other advanced methods.\n","2b3c6d78":"The above is the **KNN fundmental code** I find from the internet. It helps me to undertand the KNN better.<br>\nHowever, the KNN algorithm is not as simply as above.<br>\nActully,  library \"**sklearn**\" contains the [KNN module](http:\/\/http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html). I can use it directly. <br>\nPlease take care of the following parameters:\n* \"n_neighbors\" is the **K value**;\n\n* \"weight\" is the way to consider the distance. it can be considered as equal or the nearer the more importance;\n\n* \"algorithm\" contains the following 4 types:\n>* brute: heavy calculation method;\n>*  kdtree: reduce the calculation pressure. It has a good performance if the dimension is less than 20;\n>* balltree: If the dimension is higher than 20, the efficiency of KD tree is reduced. This is called \"Curse of Dimensionality\". Balltree is proposed to solve this problem;\n>*  auto: Module \"fit\" function will auto decide which method will be used;<br>\n\n* \"leaf_size\" will pass to KDtree or Balltree. **It will not affect the prediction results but the calculaton speed and store space**. Normaly, the store space is **the number of samples divided leaf_size**. Also, the number of samples should be located **between one leaf_size and double leaf_size**;\n\n* \"metric\" is the method to calculat distance.","5fa73f68":"**<H1>Perceptron<H1>**\n\nPerceptron is the **basic** of **neural network**. It is a simplest **forward propagation network** and a **binary linear classification**. It only contains two layers: **input and output**.\n\nPreceptron can be built based on the following steps:\n\n1. Define a **node** which contains two layers:input and output;\n\n2. Define the node **activation function**;\n\n3. Define an **input list** for the node;\n\n4. Define the **tranfer function** frominout to output,the function contains weights and bias;\n\n5. Define the **optimizer** for the parameter.\n","2884101a":"For each plot, the age factor always look like  \"**Gaussian Distribution**\", which is same as the original age distribution.  The **expected value in this distribution is around 30**, which is similaer with teh original distribution as well. It seems like the childs are not send to the liftboat first.\n\nNext, I will look into the factor \"**SibSp**\" and \"**Parch**\" since they indicate the same factor. Let's check the data by **bar chart** first.","553c8af8":"**<H1>Stochastic Gradient Descent (SGD)<H1>**\n\nOne of the advanced method for logistic regression optimize the SGD. **SGD has a fast speed** when the traning set is large since it only use a part of the data to optimize the cost function. However, SGD has some shortages as **large noise**. Among them, the essential disadvantege is the **accuracy**. Since SGD only some of the data to optimize, technically SGD achieve local optima not global optima. It will sffect the accuracy. The simple raw code is as below.","d511c21b":"**<H1>Data Visualization<H1>**\n\nThis is the first step I would like to do. It will help me to understand the data better.\n\n**Totally we have 12 labels:** (Most of them are discrbed in Kaggle data info. I just add some my thoughts)\n\n* PassengerID: I feel that this is just ID number, do not relate with analysis, will throw it;\n\n* Survival: It can be considered as results:  \n0 = No; 1 = Yes;\n\n* Pclass:\tTicket class, it can indicate the SES as mentioned in the data discription.\n1 = 1st(Upper); 2 = 2nd(Middle); 3 = 3rd(Lower);\n\n* Name: Passenger name. Do not relate with analysis, will throw it;\n\n* Sex:\tSex. I think this lbel is enssential since the women and child have a high priority for the lifeboat boarding;\t\n\n* Age:\tAge in years. I think this lbel is enssential since the women and child have a high priority for the lifeboat boarding. the problem with this label isthat, 177 records are missing;\n\n* SibSp: This dataset defines family relations. \nSibling means brother, sister, stepbrother, stepsister; Spouse means husband, wife(mistresses and fiances were ignored);\n\n* Parch: This dataset defines family relations as well, but different from the label \"SibSp\". \nParent means father and mother; Child means daughter, son, stepdaughter, stepson. if children travelled only with a nanny, therefore parch=0 for them;\n\n* Ticket: I feel that this is just number, do not relate with analysis, will throw it;\n\n* Fare: Passenger Fare. I do not comfirm this label is usefull or not. in my opinion, this label is related with passenger class. Normally, higher class with higher fare. So, in the next seesions, I will check the relationship between passenger class and fare. if they are positive correlation, I think this bale can be thrown as well;\n\n* Cabin: Cabin number. I feel that this is just recoards. Moreover, most of this records are missing. So I will throw it;\n\n* Embarkation: This dataset defines the port of embarkation. \nC means Cherbourg; Q means Queenstown;S means Southampton;\n\nBased on the analysis above, we will focus on the labels: Survived, Pclass, Sex, Age, SibSp, Parch. moreover, I will check labels: Fare and Embarkation first, then deciede they will be thrown or not.\n\nOK, first, let us check how many people is **\"Survived\"**.\nI will use **pie chart** to visualize it.","bdc35a6c":"Based on the above table, it is obvious to find that, **random forest** and **decision tree** has the best performance. Because of the** data set limitation**, unsupervised learning and netural network do not good performance.","b68fc0f7":"**<H1>Supported Vector Classification<H1>**\n\nExtend the linear SVC to general method. SVC is proposed.\n\nThe **differences** betweem lineasr SVC and SVC are as follows:\n\n1. Linear SVC is to minimize the square of \"hinge loss\". SVC is to minimize \"hinge loss\";\n\n2. Linear SVC use \"one to rest\", but SVC use \"one to one\";\n\n3. SVC can choose kernel function, but linear SVC can not;\n\n4. Linear SVC can choose penalty function, but SVC can not.\n","f695ef02":"**<H1>Linear Supported Vector Classification<H1>**\n\nSVM is a binary classification method. Simply speaking, **SVM is to build a hyperplane or a set of hyperplane to achieve classifiction or regression**. Make sure the distance between the hyperplane bounary and each point as large as possible. The basic one is linear SVC, which means the linear function is used for hyperplane implementation.","2252cc9f":"**Passengers who travel alone** are the largest rescued number. But, **passenger with one family member** have the highest rescued percentage. <br>\nIt make sense since no matter parents or husband will give the lifeboat boarding chance to their child or wife.\n\nLast label I want to check is \"**Fare**\". I think it is related with the label \"Pclass\". Normally, the higher class, the more fare passenger need to pay.<br>\nLet's check it is correct or not.","170e8e6b":"**Over 60%** passengers are dead in this **tragedy**. \n\nNext, we will check the **passenger class**. Then, I will **combine** the labels: class and survived to check the relationship between them.\n\nI will use **pie chart** to visualize label \"**Pclass**\" as well. \n<br>\nThen, I will use **bar chart** to visualize the combination. **Seabone** is another lisualization library I use.\n<br>","f3e46f5e":"Preceptron can be implemented by \"sklearn\" as well. Most of the parameters are same as other method I introduced.","315fb5f0":"**<H1>Titanic Dataset Analysis: Visualization and Prediction<H1>**\n\n![Titanic](http:\/\/https:\/\/goo.gl\/images\/9kGf1u)\n\n**Titanic dataset** is a very famous set for the beginners. Also, this is my first kernel at kaggle. I would like to start from a easy dataset and try to make a **comprehensive analysis** which will contain **data visualization**, **data refromation**, **supervised learning methods**, **unsupervised learning method**, even **simple deep learning model**. For each method, I am try to use **raw code** to introduce the basic idea. Then, I use exisiting **functions** from \"sklearn\" or others to achieve easy implementation. Also, I try to **tune the model parameters** to achieve better preformance.<br>\n\nApologize my poor Engilish and let's start~! ","1d2acf2b":"Although the number of rescued peopel is nearly the same among the three class. But, the last figure show that, **over 90%** femals are survived in **class 1 & 2**. Only **half** femals are rescued in **class 3**. So, \"Class\" is the important factor.\n\nNext, I will check label \"**Age**\" by **bar chart**.\n\n**Notice**: There are **177 records are \"nan\"**. For data visualization, I throw them first."}}