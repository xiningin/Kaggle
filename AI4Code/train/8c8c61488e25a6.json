{"cell_type":{"f45c5d94":"code","bbd6738c":"code","3ca42600":"code","c31c1075":"code","8511d7bb":"code","89953056":"code","c7981407":"code","604f2b0b":"code","0cd020a4":"code","889f7a67":"code","598fb063":"code","13f685b7":"code","68bc9156":"code","ef4974a6":"code","a83757cd":"code","2c852c9a":"code","d0390d13":"code","36157658":"code","84c2778f":"code","5137fd72":"code","97a68def":"code","93c5c41e":"code","ceb39301":"code","36b6157b":"code","1e6f9c19":"code","3b060c53":"code","c45c706c":"code","82a81c6b":"markdown","81454c09":"markdown","edf78209":"markdown","d880ae45":"markdown","7d89f4d8":"markdown","31bfca96":"markdown","6e7ac6b4":"markdown","d8840133":"markdown","a990ca1d":"markdown","473f8495":"markdown","600d33bc":"markdown"},"source":{"f45c5d94":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom lightgbm import LGBMRegressor\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport gresearch_crypto","bbd6738c":"train_csv = '\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'\nasset_details_csv = '\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv'","3ca42600":"df_train = pd.read_csv(train_csv)\ndf_train.head()","c31c1075":"df_train.info()","8511d7bb":"df_asset_details = pd.read_csv(asset_details_csv)\ndf_asset_details.info()","89953056":"df_asset_details = df_asset_details.sort_values(\"Asset_ID\")\ndf_asset_details","c7981407":"df_train.isna().sum()","604f2b0b":"asset_dict = {}\nfor asset_id in df_asset_details['Asset_ID']:\n    asset_dict[asset_id] = df_train[df_train['Asset_ID']==asset_id].dropna()","0cd020a4":"for key in asset_dict.keys():\n    print('Missing Values for Asset '+str(key)+':', asset_dict[key].isna().sum().sum())","889f7a67":"for key in asset_dict.keys():\n    print('Observations for Asset '+str(key)+':', asset_dict[key].shape[0])","598fb063":"def upper_shadow(df):\n    return df['High'] - np.maximum(df['Open'], df['Close'])\n\ndef lower_shadow(df):\n    return np.minimum(df['Open'], df['Close']) - df['Low']\n\ndef daily_range(df):\n    return df['High'] - df['Low']","13f685b7":"test_df = asset_dict[0]\ntest_df.head()","68bc9156":"def stochastic_indicator(high, low, close, window=14, smooth_window=3):\n    \"\"\" calculates stochastic oscillator for rolling window, smoothed by smooth_window SMA \"\"\"\n    def stoch_k(high, low, close, window):\n        window_high = high.rolling(window).max()\n        window_low = low.rolling(window).min()\n        return round((close - window_low) \/ (window_high - window_low) * 100)\n    \n    def stoch_d(stoch_k, smooth_window):\n        return stoch_k.rolling(smooth_window).mean()\n    \n    k = stoch_k(high, low, close, window)\n    return k, stoch_d(k, smooth_window)\n        \n\ndef add_stochastic_to_df(df, window=14, smooth_window=3):\n        df['STOCH'], df['STOCH_signal'] = stochastic_indicator(df['High'], df['Low'], df['Close'], \n                                                               window=window, smooth_window=smooth_window)\n        return df.copy()","ef4974a6":"def rsi(close, window):\n    close = close.diff()\n    upward_series = pd.Series([np.nan] * len(close), index=close.index)\n    upward_series[close > 0] = close[close > 0]\n    \n    downward_series = pd.Series([np.nan] * len(close), index=close.index)\n    downward_series[close < 0] = close[close < 0]\n    \n    rolling_up = upward_series.rolling(window, min_periods=1).mean()\n    rolling_down = downward_series.rolling(window, min_periods=1).mean()\n    \n    return 100 - ( 100 \/ ( 1 + (rolling_up \/ abs(rolling_down))  ) )\n    \n\ndef add_rsi_to_df(df, window=14):\n    df['RSI'] = rsi(df['Close'], window=window)\n    return df.copy()","a83757cd":"def atr(high, low, close, window):\n    high = high.values\n    low = low.values\n    close = close.values\n    \n    atr = [max([high[i] - low[i], abs( high[i] - close[i-1] ), abs( low[i] - close[i-1] )]) for i in range(1, len(high))]\n    atr.insert(0, high[0] - low[0])\n    atr[1:] = [(atr[i-1] * (window - 1) + atr[i]) \/ window for i in range(1, len(atr))]\n    return np.array(atr)\n\ndef add_atr_to_df(df, window=14):\n    df['ATR'] = atr(df['High'], df['Low'], df['Close'], window=window)\n    return df.copy()","2c852c9a":"def macd(close, window_slow, window_fast, window_signal):\n    slow_ewm = close.ewm(span=window_slow, adjust=False).mean()\n    fast_ewm = close.ewm(span=window_fast, adjust=False).mean()\n    macd = slow_ewm - fast_ewm\n    macd_signal = macd.ewm(span=window_signal, adjust=False).mean()\n    return macd, macd_signal\n\ndef add_macd_to_df(df, window_slow=26, window_fast=12, window_signal=9):\n    df['MACD'], df['MACD_signal'] = macd(df['Close'], window_slow, window_fast, window_signal)\n    return df.copy()","d0390d13":"def get_features(df, STOCH_window, STOCH_smooth_window, RSI_window, ATR_window, \n                            MACD_window_slow, MACD_window_fast, MACD_window_sign):\n    df_features = df[['Open', 'High', 'Low', 'Close', 'Count', 'Volume', 'VWAP']].copy()\n    df_features['upper_shadow'] = upper_shadow(df_features)\n    df_features['lower_shadow'] = lower_shadow(df_features)\n    df_features['daily_range'] = daily_range(df_features)\n    df_features = add_stochastic_to_df(df_features, STOCH_window, STOCH_smooth_window)\n    df_features = add_rsi_to_df(df_features, RSI_window)\n    df_features = add_atr_to_df(df_features, ATR_window)\n    df_features = add_macd_to_df(df_features, MACD_window_slow, MACD_window_fast, MACD_window_sign)\n    df_features = df_features.dropna()\n    return df_features.copy()","36157658":"def get_features_and_target(df, STOCH_window, STOCH_smooth_window, RSI_window, ATR_window, \n                            MACD_window_slow, MACD_window_fast, MACD_window_sign):\n    df_features = df[['Open', 'High', 'Low', 'Close', 'Count', 'Volume', 'VWAP', 'Target']].copy()\n    df_features['upper_shadow'] = upper_shadow(df_features)\n    df_features['lower_shadow'] = lower_shadow(df_features)\n    df_features['daily_range'] = daily_range(df_features)\n    df_features = add_stochastic_to_df(df_features, STOCH_window, STOCH_smooth_window)\n    df_features = add_rsi_to_df(df_features, RSI_window)\n    df_features = add_atr_to_df(df_features, ATR_window)\n    df_features = add_macd_to_df(df_features, MACD_window_slow, MACD_window_fast, MACD_window_sign)\n    df_features = df_features.dropna()\n    return df_features.copy()","84c2778f":"def separate_xy(df, STOCH_window, STOCH_smooth_window, RSI_window, ATR_window, \n                MACD_window_slow, MACD_window_fast, MACD_window_sign):\n    df = df.replace([np.inf, -np.inf], np.nan).dropna()\n    feats = get_features_and_target(df, STOCH_window, STOCH_smooth_window, RSI_window, ATR_window, \n                            MACD_window_slow, MACD_window_fast, MACD_window_sign).copy()\n    y = feats['Target'].copy()\n    X = feats.drop('Target', axis=1).copy()\n    return X, y","5137fd72":"def binary_target(y):\n    return np.array([1 if i>0 else -1 for i in y])","97a68def":"#def fit_linreg(X,y):\n#    model = LinearRegression()\n#    model.fit(X,y)\n#    return model","93c5c41e":"def fit_lgbm(X,y):\n    model = LGBMRegressor()\n    model.fit(X,y)\n    return model","ceb39301":"## hyperparameters for technical indicators\nSTOCH_window = 14\nSTOCH_smooth_window = 3\n\nRSI_window = 14\n\nATR_window = 14\n\nMACD_window_slow = 21\nMACD_window_fast = 12\nMACD_window_sign = 9","36b6157b":"#Xs = {}\n#ys = {}\n#models = {}\n\n#for asset_id in asset_dict.keys():\n#    print(asset_id, \"Fitting Model for \", df_asset_details.loc[df_asset_details['Asset_ID']==asset_id, \"Asset_Name\"].values)\n#    asset_df = asset_dict[asset_id]\n#    X, y = separate_xy(asset_df, STOCH_window, STOCH_smooth_window, RSI_window, ATR_window, \n#                       MACD_window_slow, MACD_window_fast, MACD_window_sign)\n#    model = fit_linreg(X,y)\n#    \n#    Xs[asset_id] = X\n#    ys[asset_id] = y\n#    models[asset_id] = model","1e6f9c19":"Xs = {}\nys = {}\navg_changes = {}\nmodels = {}\n\nfor asset_id in asset_dict.keys():\n    print(asset_id, \"Fitting Model for \", df_asset_details.loc[df_asset_details['Asset_ID']==asset_id, \"Asset_Name\"].values)\n    asset_df = asset_dict[asset_id]\n    X, y = separate_xy(asset_df, STOCH_window, STOCH_smooth_window, RSI_window, ATR_window, \n                       MACD_window_slow, MACD_window_fast, MACD_window_sign)\n    \n    Xs[asset_id] = X\n    ys[asset_id] = y\n    avg_changes[asset_id] = np.mean(abs(y))\n    y = binary_target(y)\n    model = fit_lgbm(X,y)\n    models[asset_id] = model","3b060c53":"avg_changes","c45c706c":"env = gresearch_crypto.make_env()\niter_test = env.iter_test()\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    for j, row in df_test.iterrows():\n        model = models[row['Asset_ID']]\n        avg_change = avg_changes[row['Asset_ID']]\n        \n        df = asset_dict[row['Asset_ID']]\n        df = df.loc[df['timestamp'] < row['timestamp'], :]\n        df = df.append(row.replace([np.inf, -np.inf], np.nan).dropna())\n        X_test = get_features(df, STOCH_window, STOCH_smooth_window, RSI_window, ATR_window, \n                            MACD_window_slow, MACD_window_fast, MACD_window_sign)\n        y_pred = model.predict(X_test.tail(1))\n        y_pred_scaled = y_pred * avg_change\n        \n        df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred_scaled\n        \n        if i==0 and j==0:\n            display(X_test)\n            \n    if i==0:\n        display(df_pred)\n        \n    env.predict(df_pred)","82a81c6b":"## Load Data","81454c09":"## Fit GBM Models\n\nSame as the LinearRegression() models, but using LGBMRegressor().","edf78209":"Now we need a function that processes the data to add the features and separate the targets.","d880ae45":"No TA-Lib, so I will have to make functions to calculate technical indicators myself.","7d89f4d8":"## Get Predictions and Test Submission","31bfca96":"## Fit Linear Regression Models\n\nWe want to cycle through assets, in the asset_dict, and fit a linear regression models to each.","6e7ac6b4":"We are going to use technical indicators, and I am going to start with Stochastic Indicator, RSI, ATR, and MACD. These are commonly used indicators, because they have been shown to be reliably useful. The group has two momentum indicators, a volatility indicator, and a trend indicator. Each of these has a hyperparameter that will need to be optimized.","d8840133":"## Missing Data\n\n","a990ca1d":"## Set Hyperparameters for Indicators","473f8495":"## Import Libraries","600d33bc":"## Feature Engineering\n\nThe tutorial notebook has two suggested engineered features: upper_shadow and lower_shadow\n\nThese are the distance from the high(low) to the maximum(minumum) of the open or close price, like in a candlestick chart.\n\nWe are also going to engineer a daily_range feature, which is the difference between the high and low."}}