{"cell_type":{"5afa62a7":"code","5a6a8048":"code","03537261":"code","36aba336":"code","68bb34f9":"code","6df9651d":"code","1d704f2a":"code","cfeebf90":"code","fbe52e42":"code","f1e20ea9":"markdown","0f3f5926":"markdown","5f247545":"markdown","864ccced":"markdown","6a109702":"markdown","8ad8f682":"markdown","689558d8":"markdown","4c024530":"markdown"},"source":{"5afa62a7":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth', None)\n#pd.set_option('display.max_rows', None)\n\nimport gc\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import classification_report, roc_auc_score, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom glob import glob\n\nfrom IPython.display import display\n\nplt.rcParams[\"figure.figsize\"] = (12, 8)\nplt.rcParams['axes.titlesize'] = 16\nplt.style.use('seaborn-whitegrid')\nsns.set_palette('Set2')\n\nimport os\nprint(os.listdir('\/kaggle\/input\/g2net-gravitational-wave-detection\/'))\n\nfrom time import time, strftime, gmtime\nstart = time()\nimport datetime\nprint(str(datetime.datetime.now()))\n\nimport warnings\nwarnings.simplefilter('ignore')","5a6a8048":"base_dir = '\/kaggle\/input\/g2net-gravitational-wave-detection\/'","03537261":"train_labels = pd.read_csv(base_dir + 'training_labels.csv')\nprint(train_labels.shape)\ntrain_labels.head()","36aba336":"sub = pd.read_csv(base_dir + 'sample_submission.csv')\nprint(sub.shape)\nsub.head()","68bb34f9":"print(f\"Num of train files: {len(glob(base_dir + 'train\/*\/*\/*\/*.npy'))}\")\nprint(f\"Num of test files: {len(glob(base_dir + 'test\/*\/*\/*\/*.npy'))}\")","6df9651d":"ax = sns.countplot(train_labels['target'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","1d704f2a":"def image_id_to_path(img_id, flag = None):\n    path = f\"..\/input\/g2net-gravitational-wave-detection\/{flag}\/{img_id[0]}\/{img_id[1]}\/{img_id[2]}\/{img_id}.npy\"\n    return path\n\ndef visualize_waves(img_id, target, flag = None, plot = None):\n    plot_colors = [\"blue\", \"teal\", \"orange\"]\n    signal_path = image_id_to_path(img_id, flag)\n    signal = np.load(signal_path)\n    fig1, ax1 = plt.subplots(3, 1, figsize = (16, 8), sharex = True)\n    ax1 = ax1.ravel()\n    for i in range(len(ax1)):\n        ax1[i].plot(signal[i], color = plot_colors[i])\n        ax1[i].set_xlabel('Time (1\/2048 sec)')\n    plt.suptitle(f\"Signal - Image_id: {img_id}, Target: {target}\")\n    plt.show()\n    \n    fig2, ax2 = plt.subplots(1, 3, figsize = (16, 6))\n    ax2 = ax2.ravel()\n    for j, ax in enumerate(ax2):\n        sns.kdeplot(signal[j], shade = True, color = plot_colors[j], ax = ax)\n    plt.suptitle(f\"Signal Distribution - Image_id: {img_id}, Target: {target}\")\n    plt.show()\n    \n    #Freq Spectrum of GW\n    fs = 2048\n    nfft = fs \/\/ 8\n    novl = nfft * 15 \/\/ 16\n    window = np.blackman(nfft)\n    spec_cmap = [\"inferno\", \"seismic\", \"icefire\"]\n    plt.figure(figsize = (16, 8))\n    for i in range(3):\n        plt.subplot(1, 3, i + 1)\n        plt.specgram(signal[i], NFFT = nfft, Fs = fs, window = window, \n                    noverlap = novl, cmap = spec_cmap[i], xextent = [0, 4000], vmin = -550, \n                     vmax = -440)\n        plt.grid(False)\n    plt.suptitle(f\"Signal Spectrogram- Image_id: {img_id}, Target: {target}\")\n    plt.show()","cfeebf90":"sample_path = image_id_to_path(train_labels['id'][0], 'train')\nsample = np.load(sample_path)\nprint(sample.shape)\nplt.figure(figsize = (16, 8))\nplt.title('Sample Signal')\nplt.plot(sample)\nplt.show()","fbe52e42":"for idx in np.random.choice(train_labels.index, 4):\n    img_id = train_labels['id'].iloc[idx]\n    target = train_labels['target'].iloc[idx]\n    visualize_waves(img_id, target, 'train')","f1e20ea9":"# Visualize few samples","0f3f5926":"![header](http:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/23249\/logos\/header.png)","5f247545":"Check single npy file","864ccced":"## Evaluation Metrics\n\n- Area under the ROC curve","6a109702":"# Utils","8ad8f682":"- The target variables are well balanced!","689558d8":"## Competition\n\nIn this competition you are provided with a training set of time series data containing simulated gravitational wave measurements from a network of 3 gravitational wave interferometers (LIGO Hanford, LIGO Livingston, and Virgo). Each time series contains either detector noise or detector noise plus a simulated gravitational wave signal. The task is to identify when a signal is present in the data (target=1).\n\nEach data sample (npy file) contains 3 time series (1 for each detector) and each spans 2 sec and is sampled at 2,048 Hz.\n\n- train\/ - the training set files, one npy file per observation; labels are provided in a files shown below\n- test\/ - the test set files; you must predict the probability that the observation contains a gravitational wave\n- training_labels.csv - target values of whether the associated signal contains a gravitational wave\n- sample_submission.csv - a sample submission file in the correct format\n\nThe train\/test paths are in the format:\n- '..\/input\/g2net-gravitational-wave-detection\/{train\/test}\/{id[0]}\/{id[1]}\/{id[2]}\/{id}.npy'","4c024530":"# WIP"}}