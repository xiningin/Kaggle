{"cell_type":{"6ac466ba":"code","1bdc1d97":"code","4164dd5a":"code","f7a15840":"code","7ebdc37f":"code","d32652fa":"code","29efe932":"code","3eec5ddb":"code","82e3d917":"code","2a00fe5e":"code","cb368e00":"code","5a6e1f1e":"code","ac099de7":"code","a968bb19":"code","6d867612":"code","dc054ca3":"code","a896e7c5":"markdown"},"source":{"6ac466ba":"# import all package\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport sys\nimport os","1bdc1d97":"# Read csv data from local disk\ndf = pd.read_csv(\"..\/input\/Admission_Predict.csv\")\n\n# This line change the name of column i.e. \"Chance of Admit \" to \"Chance of Admit\" ,in last we remove just space\ndf=df.rename(columns = {'Chance of Admit ':'Chance of Admit'})\n\n# it may be needed in the future.\nserialNo = df[\"Serial No.\"].values\n\n# Delete serial number from dataframe\ndf.drop([\"Serial No.\"],axis=1,inplace = True)\n\ndf.head()","4164dd5a":"# It gives statistical overview of given data\n\ndf.describe()","f7a15840":"# Check if there is null or not and if there is null then i will give total number of null values i.e. count\n\ndf.isnull().sum()","7ebdc37f":"# Correlation between different varaibles\n\nfig,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(df.corr(), ax=ax, annot=True, linewidths=0.05, fmt= '.2f',cmap=\"magma\")\nplt.show()","d32652fa":"# Values of correlation w.r.t Chance of Admit \n\ncor=df.corr()['Chance of Admit'].sort_values(ascending=False)\ncor","29efe932":"print(\"Not Having Research:\",len(df[df.Research == 0]))\nprint(\"Having Research:\",len(df[df.Research == 1]))\ny=[len(df[df.Research==0]),len(df[df.Research==1])]\nx = [\"Not Having Research\",\"Having Research\"]\nplt.bar(x,y)\nplt.title(\"Research Experience\")\nplt.xlabel(\"Canditates\")\nplt.ylabel(\"Frequency\")\nplt.show()","3eec5ddb":"# Scatter plot between CGPA vs GRE score\n# df.GRE Score did not work because there is space between GRE and Score ,so i use df[\"GRE Score\"]\n\nplt.scatter(df[\"GRE Score\"],df.CGPA)\nplt.title(\"CGPA for GRE Scores\")\nplt.xlabel(\"GRE Score\")\nplt.ylabel(\"CGPA\")\nplt.show()","82e3d917":"# Number of candidates w.r.t university and their 75% acceptance chance\n# value_counts() mean return a Series containing counts of unique values\n\ns = df[df[\"Chance of Admit\"] >= 0.75][\"University Rating\"].value_counts().head(5)\nplt.title(\"University Ratings of Candidates with an 75% acceptance chance\")\ns.plot(kind='bar',figsize=(20, 10))\nplt.xlabel(\"University Rating\")\nplt.ylabel(\"Candidates\")\nplt.show()","2a00fe5e":"# Average score needed for candidate to admit \n# If they have average score given below then there is chance of 90% to get admission\n\ndf[(df['Chance of Admit']>0.90)].mean()","cb368e00":"# Modify column data in dataframe \n# Replace value>=0.75 into 1 \n# Replace value<0.75 into 0\ndf.loc[df['Chance of Admit']>=0.75,['Chance of Admit']]=1\ndf.loc[df['Chance of Admit']<0.75,['Chance of Admit']]=0","5a6e1f1e":"import keras\n\n# X is input for our model\nX=df.iloc[:,:-1].values\n\n# y is output for our model\ny=df.iloc[:,-1].values","ac099de7":"# Split dataset in train and test\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7,random_state=1)","a968bb19":"from keras.models import Sequential\nfrom keras.layers.core import Dense, Activation\n\n\n# Initialising the ANN\nclassifier = Sequential()\n\n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(output_dim = 128, init = 'uniform', activation = 'relu', input_dim = 7))\n\n# Adding the second hidden layer\nclassifier.add(Dense(output_dim = 32, init = 'uniform', activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Fitting the ANN to the Training set\nclassifier.fit(X_train, y_train, batch_size = 10, nb_epoch = 100)","6d867612":"y_pred=classifier.predict(X_test)\ny_pred=(y_pred>0.75)","dc054ca3":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","a896e7c5":"## Prediction Using ANN"}}