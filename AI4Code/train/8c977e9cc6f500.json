{"cell_type":{"d332e65b":"code","00f22723":"code","ac14718e":"code","041a23ab":"code","f10f0303":"code","6320bf55":"code","6cc73c4e":"code","8f3cf84a":"code","e749bc97":"code","6b910afc":"code","f0492703":"code","fa8933c7":"code","713bc3c9":"code","1a747ff1":"code","fa79d784":"code","9149389f":"code","04a28310":"code","03fcc41b":"code","d54e05bb":"code","95f7f9db":"code","f0e3cbcf":"code","5229261d":"code","93a978e1":"code","843191ee":"code","a8a04cf7":"code","2569b817":"code","4d5f2222":"code","1e885f38":"code","9ccb30ad":"code","7ce1bd34":"code","6e9b9680":"code","de4e6137":"code","523b6c48":"code","ba2f5e63":"markdown"},"source":{"d332e65b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00f22723":"import matplotlib.pyplot as plt # Visualization\nimport seaborn as sns #Visualization\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression \nplt.rcParams['figure.figsize'] = [8,5]\nplt.rcParams['font.size'] =14\nplt.rcParams['font.weight']= 'bold'\nplt.style.use('seaborn-whitegrid')","ac14718e":"df = pd.read_csv('\/kaggle\/input\/fitbit-export\/fitbit_export - fitbit_export.csv')","041a23ab":"df.head()","f10f0303":"df.info()","6320bf55":"# df['Start Time'] = pd.to_datetime(df['Start Time'],infer_datetime_format=True)\n# df['End Time'] = pd.to_datetime(df['End Time'],infer_datetime_format=True)\n# df['In bed start Date'] = df['Start Time'].dt.date\n# df['In bed Finish Date'] = df['End Time'].dt.date\n# import plotly.graph_objects as go\n# fig = go.Figure([go.Scatter(x=df['Start Time'], y=df['Time in Bed'])])\n# fig.show()","6cc73c4e":"print('\\nNumber of rows and columns in the data set: ',df.shape)","8f3cf84a":"df.describe()","e749bc97":"plt.figure(figsize=(12,4))\nsns.heatmap(df.isnull(),cbar=False,cmap='viridis',yticklabels=False)\nplt.title('Missing value in the dataset');","6b910afc":"# correlation plot\ncorr = df.corr()\nsns.heatmap(corr, cmap = 'Wistia', annot= True);","f0492703":"df.corr()['Sleep Score'].sort_values() # taking just charges column and sorting it","fa8933c7":"f= plt.figure(figsize=(12,4))\n\nax=f.add_subplot(121)\nsns.distplot(df['Sleep Score'],bins=50,color='r',ax=ax)\nax.set_title('Distribution of Sleep Score')","713bc3c9":"import plotly.graph_objects as go\nfig = go.Figure([go.Scatter(x=df['Start Time'], y=df['Time in Bed'])])\nfig.show()","1a747ff1":"#converting sleep time in minutes to hours\ndf['Time in Bed in hrs'] = df['Time in Bed'].div(60).round()","fa79d784":"import plotly.graph_objects as go\nfig = go.Figure([go.Scatter(x=df['Start Time'], y=df['Time in Bed in hrs'])])\nfig.show()","9149389f":"df.columns","04a28310":"X = df.values[:, 2:9]  # get input values from first two columns\ny = df.values[:, 9]  # get output values from last coulmn\nm = len(y) # Number of training examples\nprint(type(X))\nprint('Total no of training examples (m) = %s \\n' %(m))\n\n# Show only first 5 records\nfor i in range(5):\n    print('X =', X[i, ], ', y =', y[i])","03fcc41b":"df = df.drop('Time in Bed in hrs', axis=1)","d54e05bb":"df.columns","95f7f9db":"from numpy import asarray\nfrom sklearn.preprocessing import MinMaxScaler","f0e3cbcf":"# arr_2d_x = np.reshape(X, (2, 5))","5229261d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25) ","93a978e1":"X_train.shape","843191ee":"type(X_train)","a8a04cf7":"scaler = MinMaxScaler()\n# transform data\nscaler.fit(X_train)\nscaled_X_train = scaler.transform(X_train)\nscaled_X_test = scaler.transform(X_test)\n# scaled_X = scaler.fit_transform(X_train)\n# scaled_y = scaler.fit_transform(y_train)","2569b817":"model_ols =  linear_model.LinearRegression(normalize=True)\nmodel_ols.fit(scaled_X_train, y_train) \n# fit() method is used for training the model\n# Note the first parameter(feature) is must be 2D array(feature matrix)","4d5f2222":"coef = model_ols.coef_\nintercept = model_ols.intercept_\nprint('coef= ', coef)\nprint('intercept= ', intercept)","1e885f38":"print(model_ols.score(scaled_X_test, y_test))","9ccb30ad":"y_train[:34].shape","7ce1bd34":"y_test.shape","6e9b9680":"model_ols.predict(scaled_X_test[0:1])","de4e6137":"predictedPrice = pd.DataFrame(model_ols.predict(scaled_X_test), columns=['Predicted Price']) # Create new dataframe of column'Predicted Price'\nactualPrice = pd.DataFrame(y_test, columns=['Actual Price'])\nactualPrice = actualPrice.reset_index(drop=True) # Drop the index so that we can concat it, to create new dataframe\ndf_actual_vs_predicted = pd.concat([actualPrice,predictedPrice],axis =1)\ndf_actual_vs_predicted.T","523b6c48":"plt.scatter(y, model_ols.predict(X))\nplt.xlabel('Price From Dataset')\nplt.ylabel('Price Predicted By Model')\nplt.rcParams[\"figure.figsize\"] = (10,6) # Custom figure size in inches\nplt.title(\"Price From Dataset Vs Price Predicted By Model\")","ba2f5e63":"$$\\mathbf{ h_\\theta(x_{i}) = \\theta_0+\\theta_1 Minutes Asleep + \\theta_2 Minutes Awake + \\theta_3 Number of Awakenings + \\theta_4 Time in Bed + \\theta_5 Minutes REM Sleep\t + \\theta_6 Minutes Light Sleep + \\theta_7 Minutes Deep Sleep\t+ \\theta_6 Sleep Score }$$\n\nThis multiple linear regression equation for given dataset.  \nIf $\\mathbf{i=1}$ then \n$$\\mathbf{h_\\theta(x_{1}) = \\theta_0+\\theta_1 423 + \\theta_2 81 + \\theta_3 24 + \\theta_4 504 + \\theta_5 71\t + \\theta_6 322 + \\theta_7 30\t+ \\theta_6 79 }$$"}}