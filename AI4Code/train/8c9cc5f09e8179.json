{"cell_type":{"a103444f":"code","7e3373e1":"code","66830abb":"code","8649e8b0":"code","34541672":"code","8fb10fac":"code","54adab50":"code","62e7920e":"code","dfa0f8de":"code","f7c0427f":"code","8d69788b":"code","de717649":"code","8fbccb0d":"code","bc90561c":"code","23d5e698":"code","498352b3":"code","558b04ca":"code","b248eaef":"code","b5e857c9":"code","3d84e829":"code","9e1e86f7":"code","698ef5af":"code","3992b8db":"code","9a234e68":"code","23c3049b":"code","1c22310a":"code","79dcd00f":"code","0bd0adfd":"code","ce004952":"code","65e3296c":"code","d29b11b2":"code","71d0486f":"code","03e0eb1b":"code","e277f683":"code","39136f6c":"code","2ac4724d":"code","4d9a367c":"code","49339c51":"code","d5049cb1":"code","09fc60dc":"markdown","aa595cc5":"markdown","ea96d4ee":"markdown","ab175c5e":"markdown","ca26d19e":"markdown","d139cf2d":"markdown","ea5e3ac3":"markdown","c0c7c547":"markdown","60ffc416":"markdown","d6a96d81":"markdown"},"source":{"a103444f":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, precision_recall_curve\n\n%matplotlib inline\nplt.style.use('ggplot')","7e3373e1":"data_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('..\/input\/titanic\/test.csv')","66830abb":"data_train.shape","8649e8b0":"data_train.isnull().sum()","34541672":"data_train.dropna(axis=0,subset=['Age','Embarked'],inplace=True)","8fb10fac":"data_train.head()","54adab50":"train_columns = list(data_train.columns)\ntarget = 'Survived'\ntest_columns = list(data_test.columns)\ncolumns = ['Pclass','Sex', 'Age','SibSp','Parch','Fare','Embarked']","62e7920e":"# columns.remove('Survived')\nprint(train_columns)","dfa0f8de":"data_train.info()","f7c0427f":"fig = plt.figure()\n\nax = fig.add_axes([0,0,1,1])\nsns.countplot( x='Survived', data=data_train, hue='Sex', ax=ax)\nax.set_title(\"Survived Passengers by Sex\")\nax.set_ylabel(\"Survived Count\")\nax.set_xlabel(\"Sex\")\nax.set_xticklabels(labels=[\"Not Survived\", \"Survived\"])","8d69788b":"data_train['Pclass'].value_counts()","de717649":"fig = plt.figure()\n\nax = fig.add_axes([0,0,1,1])\nsns.countplot(x='Survived', data=data_train[data_train['Survived'] == 0], hue='Pclass', ax = ax)\nax.set_xlabel(\"Pclass\")\nax.set_ylabel(\"Survived Count\")\nax.set_title(\"Passengers Survived by Pclass\")\n","8fbccb0d":"data_train['SibSp'].value_counts()","bc90561c":"fig = plt.figure()\n\nax = fig.add_axes([0,0,0.9,0.9])\nsns.countplot(x='Survived', data= data_train, hue='SibSp', ax=ax)\nax.legend(loc=1)","23d5e698":"fig = plt.figure()\nax=  fig.add_axes([0,0,0.9,0.9])\n\nsns.distplot(data_train['Fare'], ax = ax, bins=60)\nax.set_title(\"Distribution of Fare\")\nax.set_xlim([ 0,200])","498352b3":"data_train['Fare'].mean()","558b04ca":"data_train['Fare_cut'] = pd.cut(data_train['Fare'], bins= [0,20,50,80,np.inf], labels=[1,2,3,4])","b248eaef":"fig = plt.figure()\nax =fig.add_axes([0,0,0.9,0.9])\n\nsns.countplot(x='Fare_cut', data= data_train, ax=ax, hue='Survived')\nax.set_title(\"Fare Categorical vs Survived\")\nax.set_xlabel('Fare')\nax.set_xticklabels(labels = ['0-20', '20-50', '50-80', '>80'])","b5e857c9":"cat_attr = []\nnum_attr = []\nfor i in data_train.columns:\n    \n    if (i == 'Name' or i =='Ticket' or i=='Cabin'):\n        continue\n    if data_train[i].dtype == 'object':\n        cat_attr.append(i)\n    else:\n        num_attr.append(i)","3d84e829":"cat_attr","9e1e86f7":"imputer = SimpleImputer(missing_values = np.nan, strategy='most_frequent')","698ef5af":"data_test = imputer.fit_transform(data_test)","3992b8db":"data_test = pd.DataFrame(data_test, columns = test_columns)","9a234e68":"ordinal_encoder = OrdinalEncoder()\n\nfor i in cat_attr:\n    data_train[i] =ordinal_encoder.fit_transform(data_train[[i]])\n    data_test[i] = ordinal_encoder.fit_transform(data_test[[i]])","23c3049b":"data_test","1c22310a":"corr = data_train.corr()\nmask = np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_axes([0,0,0.9,0.9])\nsns.heatmap(corr,mask=mask,annot=True, ax=ax)\nplt.show() ","79dcd00f":"columns","0bd0adfd":"def train_test_split(x, ratio):\n    split_index = int(x.shape[0] * ratio)    \n    return x[:split_index], x[split_index:]","ce004952":"train, test = train_test_split(data_train, 0.75)\n\n","65e3296c":"def save(data, columns):\n    \n    pd.DataFrame(data, columns=[columns]).to_csv('..\/input\/kaggle_output.csv',index=False)\n\ndef plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n\n    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\")\n    plt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\")\n    \n\ndef get_score(classifier,x, y):\n    \n    y_pred = cross_val_predict(classifier, x,y, cv=3)\n    get_confusion_matrix(y, y_pred)\n    \n    \n    precisions, recalls, thresholds = precision_recall_curve(y, y_pred)\n    print(\"######################### Precision Recall Curve #########################\")\n    plot_precision_recall_vs_threshold(precisions, recalls,thresholds)\n    \n    \n    \ndef get_confusion_matrix(y_true, y_pred):\n    print(\"######################### Confusion matrix #########################\")\n    print(confusion_matrix(y_true, y_pred))\n    ","d29b11b2":"from sklearn.linear_model import SGDClassifier\n\nsgd_clf = SGDClassifier(random_state=42, n_jobs=100)\nsgd_clf.fit(train[columns],train[target])","71d0486f":"get_score(sgd_clf, test[columns], test[target])","03e0eb1b":"from sklearn.svm import LinearSVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\nsvm_clf = Pipeline([\n    \n    (\"scaler\", StandardScaler()),\n    (\"linear_svc\", LinearSVC(C=5, loss=\"hinge\"))\n])","e277f683":"svm_clf.fit(train[columns], train[target])","39136f6c":"get_score(svm_clf, test[columns], test[target])","2ac4724d":"from sklearn.svm import SVC\n\npoly_kernel_svm_clf = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"svm_clf\", SVC(kernel=\"poly\", degree=3, coef0=0.7, C=1))\n])\n\npoly_kernel_svm_clf.fit(train[columns], train[target])","4d9a367c":"get_score(poly_kernel_svm_clf, test[columns], test[target])","49339c51":"test_pred = poly_kernel_svm_clf.predict(data_test[columns])","d5049cb1":"test_pred.shape, data_test.shape","09fc60dc":"### Turn Fare into categorical value","aa595cc5":"### People who survived based on Pclass","ea96d4ee":"# SVC","ab175c5e":"## Train Test Split","ca26d19e":"## Utils","d139cf2d":"# Titanic Survival Prediction \n- [Github ML Checklist](https:\/\/github.com\/SaiKrishna1908\/ML-Checklist\/blob\/main\/Pipeline.md)","ea5e3ac3":"## SGD Classifier","c0c7c547":"#### What is the ratio of Male to Female who have survived ?","60ffc416":"## LinearSVC","d6a96d81":"### Impute Test Data"}}