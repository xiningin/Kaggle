{"cell_type":{"fa9ca16d":"code","802a2806":"code","1aa22f49":"code","7f4d3263":"code","d8d00d5e":"code","1073fee0":"code","cca9369c":"code","b9f7a127":"code","a60995b9":"code","a5b394cd":"code","5fecf8c8":"code","33f10a4f":"code","f19468c7":"code","16cbec66":"code","008fe4be":"code","fbd38131":"code","c99515bf":"code","1ea6339d":"code","491f0cec":"markdown","cc371633":"markdown","f7f2234a":"markdown","faf24df5":"markdown","50d94734":"markdown","ac003d8d":"markdown","ebf2132f":"markdown","62fbbc76":"markdown"},"source":{"fa9ca16d":"# Libs\nimport matplotlib.pyplot as plt                                    # visualization\nfrom mpl_toolkits.mplot3d import Axes3D \nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\nfrom matplotlib.collections import PolyCollection\nfrom matplotlib.colors import colorConverter\nimport seaborn as sns    \nimport numpy as np # vector and matrizes\n\n%matplotlib inline\nsns.set()","802a2806":"class functions_pertinence:\n    \n        def __init__(self,):\n            \"\"\"\n            fun\u00e7\u00f5es de pertin\u00eancia\n            \"\"\"\n    \n        def triangular(self, a,m,b,x, max_degree=None):\n            \"\"\"\n            define pertinence y of the triangular function from x values\n            a - primeiro valor conjunto\n            m - valor mediano do conjunto\n            b - \u00faltimo valor do conjunto\n            x - valor a ser calculado\n            \"\"\"\n\n            if x <= a or x >= b:\n                return 0\n\n            if x == m and max_degree != None:\n                return max_degree\n\n            if x > a and x <= m:\n                return ((x-a)\/(m-a))\n\n            if x > m and x < b:\n                return ((b-x)\/(b-m))","1aa22f49":"# gerando a estrutura pra armazernar o conjunto fyzzye as principais opera\u00e7\u00f5es necess\u00e1rias para manipul\u00e7\u00e3o\nclass fuzzy:\n    \n    def __init__(self,size_set):\n        self.x = np.zeros(size_set)\n        self.y = np.zeros(size_set)\n        self.set = np.zeros((size_set,2))\n        self.size = size_set\n        self.calculo = functions_pertinence()\n        \n        \n    def set_x(self, conjunto):\n        \"\"\"\n        seta o conjunto passado ao conjunto x - dominio\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.x[i] = conjunto[i]\n    \n    def merge(self,verbose=False):\n        \"\"\"\n        junta o conjunto x com y em um unico array\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.set[i][0] = self.x[i]\n            self.set[i][1] = self.y[i]\n            \n        if verbose:\n            print(self.set)\n            \n    def set_y(self, conjunto):\n        \"\"\"\n        seta o conjunto passado ao conjunto y - pertinencias\n        \"\"\"\n        for i in range(self.y.shape[0]):\n            self.y[i] = conjunto[i]\n            \n        self.merge()\n        \n    \n    def triangular(self, a,m,b, max_degree=None):\n        \"\"\"\n        define o conjunto x com a func\u00e3o de pertin\u1ebdncia triangular\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.y[i] = self.calculo.triangular(a,m,b,self.x[i])\n        self.merge()\n        \n    def trapezoidal(self, a,m,n,b, max_degree=None):\n        \"\"\"\n        define o conjunto x com a func\u00e3o de pertin\u00eancia trapezoidal\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.y[i] = self.calculo.trapezoidal(a,m,n,b,self.x[i])\n        self.merge()\n    \n    def gaussiana(self, m,sigma=0.5, max_degree=None):\n        \"\"\"\n        define o conjunto x com a func\u00e3o de pertin\u00eancia trapezoidal\n        \"\"\"\n        \n        for i in range(self.x.shape[0]):\n            self.y[i] = self.calculo.gaussiana(self.x[i],m,sigma)\n        self.merge()\n    \n        \n    def get_y(self, x):\n        \"\"\"\n        obtem o valor da pertinencia do valor x passado - WARNING obter posi\u00e7\u00e3o do x\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            if x == self.x[i]:\n                return self.y[i]\n        return 0\n        \n    \n    def view_set(self,):\n        print(self.set)","7f4d3263":"# visualiza\u00e7\u00e3o\ndef plot_sets(conjuntos, labels, title=None, position=None):\n    \"\"\"\n     - fun\u00e7\u00e3o para plotagem dos conjuntos 2d\n     -- plota os conjuntos em um mesmo plano\n    \"\"\"\n    \n    color = ['--bo','--go', '--ro', '--yo', '--po']\n    facecolors = [cm.jet(x) for x in np.random.rand(20)]\n    \n    fig, ax = plt.subplots(figsize=(8,5))\n\n    indice = 0\n    for i in conjuntos:\n            plt.plot(i[:,0], i[:,1], color[indice], label=labels[indice])\n            plt.fill_between(i[:,0], i[:,1], facecolors=facecolors[indice], alpha=0.4)\n            indice += 1 \n            \n    if position:\n        legend = ax.legend(loc=position, shadow=True, fontsize='x-large')\n    else:\n        legend = ax.legend(loc='upper left', shadow=True, fontsize='x-large')\n\n    # Put a nicer background color on the legend.\n    legend.get_frame().set_facecolor('#00FFCC')\n    plt.title(title)\n    plt.grid(True)","d8d00d5e":"# defini\u00e7\u00e3o dos conjuntos fuzzy - representa\u00e7\u00e3o por NUMPY ARRAY\nA = np.arange(1,12)\nB = np.arange(5,16)\n\nprint('A', A)\nprint('B', B)\n\n# definindo meus conjuntos fuzzy\nvendas_baixa = fuzzy(A.size)\nvendas_media = fuzzy(B.size)\n\n# setando o dom\u00ednio\nvendas_baixa.set_x(A)\nvendas_media.set_x(B)\n\n# calcula a pertin\u00eancia dos conjuntos com a fun\u00e7\u00e3o de pertin\u00eancia tringular \nvendas_baixa.triangular(a=A[0], m=A[5], b=A[len(A)-1])\nvendas_media.triangular(a=B[0], m=B[5], b=B[len(A)-1]) # trapezoidal\n\n# visualizando os conjuntos\nplot_sets(np.array([vendas_baixa.set,vendas_media.set]), ['Baixa', 'M\u00e9dia'], ' Vendas')","1073fee0":"def get_coord_alpha_cut(a,b,m,pert):\n    \"\"\"\n    return new a' and b' do alphacut\n    \"\"\"\n    new_a_row = (pert * (m-a)) + a\n    new_b_row = ((pert * (b-m))-b) * -1\n    \n    return new_a_row, m, new_b_row","cca9369c":"vendas_baixa.set[0]","b9f7a127":"alpha_cut = 0.5\n\na_a,a_m, a_b = get_coord_alpha_cut(a=vendas_baixa.set[0],\n                                   b=vendas_baixa.set[len(vendas_baixa.x)-1],\n                                   m=vendas_baixa.set[int((len(vendas_baixa.x)-1)\/2)],\n                                   pert=alpha_cut)\n\nb_a,b_m, b_b = get_coord_alpha_cut(a=vendas_media.set[0],\n                                   b=vendas_media.set[len(vendas_media.x)-1],\n                                   m=vendas_media.set[int((len(vendas_media.x)-1)\/2)],\n                                   pert=alpha_cut)\n\n\nregion_alpha_cut_baixa = np.array([a_a,a_m,a_b,a_a], dtype=np.float32)\n\nregion_alpha_cut_media = np.array([b_a,b_m,b_b,b_a], dtype=np.float32)\n\nprint('alphacut of A >\\n', region_alpha_cut_baixa)\nprint('alphacut of B >\\n', region_alpha_cut_media)","a60995b9":"# cojunto dos cojuntos\nconjuntos = np.array([vendas_baixa.set,vendas_media.set,region_alpha_cut_baixa,region_alpha_cut_media])\n\n# plot sets\nplot_sets(conjuntos, ['Baixa','Media','a cut B','a cut M'], ' Vendas ')","a5b394cd":"def intervalo_soma(a,b):\n    \"\"\"\n    soma [1:soma de a+b, m, soma de b+c]\n    \"\"\"\n    value_min = (a[0,0] + b[0,0]) \n    value_max = (a[len(a)-1,0]  + b[len(b)-1,0])\n    m = (value_min + value_max) \/ 2\n    \n    soma = np.array([ [value_min, min(a[0,1],b[0,1])],\n                       [m, 1],\n                      [value_max, min(a[len(a)-1,1], b[len(b)-1,1])],\n                     [value_min, min(a[0,1],b[0,1])],\n                    ], dtype=np.float32)\n    return soma","5fecf8c8":"# calcule sets sum alpha cut of a and b\nconjunto_soma = intervalo_soma(np.copy(region_alpha_cut_baixa[0:len(region_alpha_cut_baixa)-1]),\n                               np.copy(region_alpha_cut_media[0:len(region_alpha_cut_baixa)-1]))\nconjunto_soma","33f10a4f":"# cojunto dos cojuntos\nconjuntos = np.array([vendas_baixa.set,vendas_media.set, conjunto_soma])\n\n# plot sets\nplot_sets(conjuntos, ['Baixa','Media', 'Soma'], ' Vendas ', 'lower right' )","f19468c7":"def intervalo_subtracion(a,b):\n    \"\"\"\n    subtracion [1:subtracion de a+b, m, subtracion de b+c]\n    a = a[0,0]\n    b = a[len(a)-1,0]\n    c = b[0,0]\n    d = b[len(b)-1,0]\n    \"\"\"\n    value_min = abs(a[0,0] - b[len(b)-1,0]) \n    value_max = abs(b[0,0] - a[len(a)-1,0])\n    m = abs(value_min + value_max) \/ 2\n    \n    subtracion = np.array([ [value_min, min(a[0,1],b[0,1])],\n                            [m, 1],\n                            [value_max, min(a[len(a)-1,1], b[len(b)-1,1])],\n                            [value_min, min(a[0,1],b[0,1])],\n                          ],dtype=np.float32)\n    return subtracion","16cbec66":"intervalo_subtracion =  intervalo_subtracion(np.copy(region_alpha_cut_baixa[0:len(region_alpha_cut_baixa)-1]),\n                                             np.copy(region_alpha_cut_media[0:len(region_alpha_cut_media)-1]))\n\n# cojunto dos cojuntos\nconjuntos = np.array([vendas_baixa.set,vendas_media.set, intervalo_subtracion])\n\n# plot sets\nplot_sets(conjuntos, ['Baixa','Media', 'sub'], ' Vendas ', 'upper right' )","008fe4be":"def intervalo_multiplication(a,b):\n    \"\"\"\n    a = a[0,0]\n    b = a[len(a)-1,0]\n    c = b[0,0]\n    d = b[len(b)-1,0]\n    \"\"\"\n    \n    value_min = min((a[0,0]*b[0,0]), (a[0,0]*b[len(b)-1,0]), (a[len(a)-1,0]*b[0,0]), (a[len(a)-1,0]*b[len(b)-1,0])) \n    value_max = max((a[0,0]*b[0,0]), (a[0,0]*b[len(b)-1,0]), (a[len(a)-1,0]*b[0,0]), (a[len(a)-1,0]*b[len(b)-1,0])) \n    m = abs(value_min + value_max) \/ 2\n    \n    mul = np.array([ [value_min, min(a[0,1],b[0,1])],\n                     [m, 1],\n                     [value_max, min(a[len(a)-1,1], b[len(b)-1,1])],\n                     [value_min, min(a[0,1],b[0,1])]\n                   ], dtype=np.float32)\n    return mul","fbd38131":"intervalo_mul =  intervalo_multiplication(np.copy(region_alpha_cut_baixa[0:len(region_alpha_cut_baixa)-1]),\n                                             np.copy(region_alpha_cut_media[0:len(region_alpha_cut_media)-1]))\nintervalo_mul\n\n# cojunto dos cojuntos\nconjuntos = np.array([vendas_baixa.set,vendas_media.set, intervalo_mul])\n\n# plot sets\nplot_sets(conjuntos, ['Baixa','Media', 'mul'], ' Vendas ', 'lower right' )","c99515bf":"def intervalo_divisao(a,b):\n    \"\"\"\n    a = a[0,0]\n    b = a[len(a)-1,0]\n    c = b[0,0]\n    d = b[len(b)-1,0]\n    \"\"\"\n    \n    value_min = min((a[0,0]\/b[0,0]), (a[0,0]\/b[len(b)-1,0]), (a[len(a)-1,0]\/b[0,0]), (a[len(a)-1,0]\/b[len(b)-1,0])) \n    value_max = max((a[0,0]\/b[0,0]), (a[0,0]\/b[len(b)-1,0]), (a[len(a)-1,0]\/b[0,0]), (a[len(a)-1,0]\/b[len(b)-1,0])) \n    m = abs(value_min + value_max) \/ 2\n    \n    div = np.array([ [value_min, min(a[0,1],b[0,1])],\n                     [m, 1],\n                     [value_max, min(a[len(a)-1,1], b[len(b)-1,1])],\n                     [value_min, min(a[0,1],b[0,1])]\n                   ], dtype=np.float32)\n    return div","1ea6339d":"intervalo_div =  intervalo_divisao(np.copy(region_alpha_cut_baixa[0:len(region_alpha_cut_baixa)-1]),\n                                   np.copy(region_alpha_cut_media[0:len(region_alpha_cut_media)-1]))\nintervalo_div\n\n# cojunto dos cojuntos\nconjuntos = np.array([vendas_baixa.set,vendas_media.set, intervalo_div])\n\n# plot sets\nplot_sets(conjuntos, ['Baixa','Media', 'div'], ' Vendas ', 'upper right' )","491f0cec":"# Define Sets","cc371633":"# Refer\u00eancias\n * [Plotting categorical variables](https:\/\/matplotlib.org\/gallery\/lines_bars_and_markers\/categorical_variables.html#sphx-glr-gallery-lines-bars-and-markers-categorical-variables-py)","f7f2234a":"### Multiplica\u00e7\u00e3o\n * $[a,b] x [c,d] = [min((axc),(axd),(bxc),(bxd)), max((axc),(axd),(bxc),(bxd))]$","faf24df5":"# Fuzzy Arithmetic\n  * Numeros Fuzzy\n  * Computa\u00e7\u00e3o com N\u00fameros Fuzzy\n  * Artim\u00e9tica intervalar e alfa-cuts\n    * soma, subtra\u00e7\u00e3o, multiplica\u00e7\u00e3o, divis\u00e3o\n  * Princ\u00edpio da extens\u00e3o\n    \n## Steps\n   * Defino o valor do **alphacut** que deseho fazer as opera\u00e7\u00f5es aritm\u00e9ticas.\n      * 1.1 **alphacut** = 0.5\n   * Encontro o valor de $x$ para **alphacut** determinado sobre os conjuntos $A$ e $B$.\n   * calculo as opera\u00e7\u00f5es aritmeticas ","50d94734":"# Opera\u00e7\u00f5es \n## Soma :\n  * $[a,b] + [c,d] = [a+c, b+d]$\n","ac003d8d":"### Subtra\u00e7\u00e3o :  \n  * $[a,b] - [c,d] = [a-d, b-c]$","ebf2132f":"## Visualizing  Fuzzy set with alpha cut 0.5","62fbbc76":"### Divis\u00e3o\n * $[a,b] x [c,d] = [min((a\/c),(a\/d),(b\/c),(b\/d)), max((a\/c),(a\/d),(b\/c),(b\/d))]$"}}