{"cell_type":{"76675aac":"code","fe9c1ecd":"code","4d07f7e0":"code","27f2d44d":"code","41e8376a":"code","4bc31ed0":"code","b26850cb":"code","3e590be5":"code","a64736a4":"code","efb34943":"code","5a6c0e54":"code","4dec22d1":"code","4c5ecf51":"code","d029e42e":"code","352bfa81":"code","cc42d399":"code","a10c0a07":"code","1c972816":"code","c6296d79":"code","e7c00eaf":"code","2b9529c9":"code","ea7e8224":"code","7975cb20":"code","8634aa3c":"code","ff86687c":"code","e19d671a":"markdown","e164ba0f":"markdown","3e5aed2f":"markdown","b63ca26a":"markdown","7c19e83a":"markdown","3aec6758":"markdown"},"source":{"76675aac":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O\nfrom pandas.api.types import is_string_dtype\nfrom pandas.api.types import is_numeric_dtype\n\n# Plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\npd.set_option('display.precision', 5)\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport plotly.offline as py\nfrom plotly.subplots import make_subplots\n\n# Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","fe9c1ecd":"# Reading in the csv file\ndata = pd.read_csv('..\/input\/goodreadsbooks\/books.csv', error_bad_lines = False) # Not every line can be read correctly\n\n# The index should be the bookID\ndata.index = data['bookID']","4d07f7e0":"# Checking the data's columns\ndata.info()","27f2d44d":"# Checking the shape of the data\nprint('Data shape:', data.shape)","41e8376a":"# Column renaming \ndata.rename(columns={'  num_pages':'total_pages'},inplace=True)\n\n# Printing out the first 5 rows\ndisplay(data.head(6))","4bc31ed0":"# Fixing J.K. Rowling rows\ndata.replace(to_replace='J.K. Rowling-Mary GrandPr\u00e9', value = 'J.K. Rowling', inplace=True)\n\n# Creating a new columns for the published year, month, day (mm\/dd\/yyyy)\ndata['publish_year'] = data['publication_date'].str.split('\/').apply(lambda x: x[2]).astype(int)\ndata['publish_month'] = data['publication_date'].str.split('\/').apply(lambda x: x[0]).astype(int)\ndata['publish_day'] = data['publication_date'].str.split('\/').apply(lambda x: x[1]).astype(int)\n\n# Creating missing data table\n# Total - total number of missing data\n# Percent - percentage of the dataset\ntotal = data.isnull().sum().sort_values(ascending=False)\npercent = (data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(10)","b26850cb":"# Describe columns with numerical datatypes (float and int)\ndata.describe()","3e590be5":"# Checking unique values in each feature\nfor col in data.columns:\n    unique_vals = data[col].unique()\n    if len(unique_vals) < 5:\n        print('Unique values for column {}: {}'.format(col, unique_vals))\n    else:\n        if is_string_dtype(data[col]):\n            print('Column {} has values string type'.format(col))\n        elif is_numeric_dtype(data[col]):\n            print('Column {} is numerical'.format(col))","a64736a4":"# Deleting ISBN (International Standard Book Number) numbers from the data set\ndel data['isbn']\ndel data['isbn13']","efb34943":"print('Number of unique authors in this dataset:', data['authors'].nunique())\nprint('Number of total books: {}'.format(data['title'].count()))\nprint('Number of unique books: {}'.format(data['title'].value_counts().count()))\nprint('There are ' + str(data['ratings_count'].isin([0]).sum()) +' books with 0 reviews.')","5a6c0e54":"# Average rating of the 15 most rated books\ndata.sort_values(by=['ratings_count'], ascending=False).loc[:,('title','average_rating', 'ratings_count')].head(15)","4dec22d1":"# Average rating, rating count of the 15 longest books\ndata.sort_values(by=['total_pages'], ascending=False).loc[:,('title', 'average_rating', 'ratings_count', 'total_pages')].head(15)","4c5ecf51":"# Checking how many books have 5.0 rating\nbest_rating = data.loc[data['average_rating'] == 5.0]\nprint(f'Number of books: {best_rating.shape[0]}')\nbest_rating","d029e42e":"# Checking how many books have 1.0 rating\nworst_rating = data.loc[data['average_rating'] == 1.0]\nprint(f'Number of books: {worst_rating.shape[0]}')\nworst_rating","352bfa81":"# The 15 shortest book\ndata[data['total_pages'] > 0].sort_values('total_pages').head(15)","cc42d399":"# Correlation heatmap\nplt.figure(figsize=(20, 10))\n\n# Compute the correlation matrix\ncorr = data.apply(lambda x: pd.factorize(x)[0]).corr()\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n# Draw the heatmap with the mask and correct aspect ratio\nax = sns.heatmap(corr, mask=mask, xticklabels=corr.columns, yticklabels=corr.columns, annot=True, linewidths=.2, cmap='coolwarm', vmin=-1, vmax=1)","a10c0a07":"# Most books written by an author (TOP 15)\nplot_data = pd.DataFrame() \nplot_data['authors'] = data.authors.value_counts()\nplot_data = plot_data.sort_index(ascending=True)\nplot_data = plot_data.nlargest(15, 'authors')\nfig = px.bar(plot_data, x=plot_data.index, y=plot_data['authors'], color='authors', labels={'index': \"Author's name\", 'authors': 'Number of books written'})\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Number of books written', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Author's name\", row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=850, height=600,\n    title_font=dict(size=25, family='Courier'),\n    title='Most books written by an author (TOP 15)',\n)\n\nfig.show()","1c972816":"# Most books published by publisher (TOP 15)\nplot_data = pd.DataFrame() \nplot_data['publisher'] = data.publisher.value_counts()\nplot_data = plot_data.sort_index(ascending=True)\nplot_data = plot_data.nlargest(15, 'publisher')\nfig = px.bar(plot_data, x=plot_data.index, y=plot_data['publisher'], color='publisher', labels={'index': 'Publisher', 'publisher': 'Number of books published'})\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Number of books published', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text='Publisher', row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=850, height=600,\n    title_font=dict(size=25, family='Courier'),\n    title='Most books published by publisher (TOP 15)',\n)\n\nfig.show()","c6296d79":"# Books by language\nplot_data = pd.DataFrame() \nplot_data['language_code'] = data.language_code.value_counts()\nplot_data = plot_data.sort_index(ascending=True)\nfig = px.bar(plot_data, x=plot_data.index, y=plot_data['language_code'], color='language_code', labels={'index': 'Language', 'language_code': 'Number of books'})\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Number of books', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text='Language', row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=850, height=750,\n    title_font=dict(size=25, family='Courier'),\n    title='Books by language',\n)\n\nfig.show()","e7c00eaf":"plot_data = pd.DataFrame() \nplot_data['most_rated'] = data.groupby('title')['text_reviews_count'].sum().sort_values(ascending=False)\nplot_data = plot_data.nlargest(10, 'most_rated')\nfig = px.bar(plot_data, x=plot_data.index, y=plot_data['most_rated'], color='most_rated', labels={'title': \"Book's name\", 'most_rated': 'Number of reviews'})\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Number of reviews', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Book's name\", row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=850, height=750,\n    title_font=dict(size=25, family='Courier'),\n    title='Most reviewed books (TOP 10)',\n)\n\nfig.show()","2b9529c9":"# Creating 3 plots using average_rating as X and the stats list's elements for Y axis\nstats = ['total_pages', 'ratings_count', 'text_reviews_count']\n\nfor i, st in enumerate(stats):\n    fig = px.scatter(data, x='average_rating', y=st, color=st, labels={'average_rating': 'Average rating'})\n    \n    # Update yaxis properties\n    fig.update_yaxes(title_text=st, row=1, col=1)\n    # Update xaxis properties\n    fig.update_xaxes(title_text='Average rating', row=1, col=1)\n\n    # Update size and title\n    fig.update_layout(autosize=True, width=900, height=500,\n        title_font=dict(size=25, family='Courier'),\n        title='Average rating and '+ st,\n    )\n    \n    fig.show()","ea7e8224":"fig = px.scatter(data, x='average_rating', marginal_x='histogram', color='ratings_count', labels={'average_rating': 'Average rating', 'ratings_count': 'Number of ratings'})\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Number of books', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text='Rating', row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=1200, height=500,\n    title_font=dict(size=25, family='Courier'),\n    title='Average rating distribution for all books',\n)\n\n\nfig.show()","7975cb20":"fig = px.scatter(data, x='total_pages', marginal_x='histogram', color='ratings_count', labels={'total_pages': 'Number of pages', 'ratings_count': 'Number of ratings'})\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Number of books', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text='Pages', row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=900, height=500,\n    title_font=dict(size=25, family='Courier'),\n    title='Average page number distribution for all books',\n)\n\n\nfig.show()","8634aa3c":"fig = px.scatter(data, x='publish_year', marginal_x='histogram', color='ratings_count', labels={'publish_year': 'Year', 'ratings_count': 'ratings_count'})\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Number of books', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text='Year', row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=900, height=500,\n    title_font=dict(size=25, family='Courier'),\n    title='Publiaction date distribution (Yearly)',\n)\n\nfig.show()","ff86687c":"fig = px.scatter(data, x='publish_month', marginal_x='histogram', color='publish_year', labels={'publish_month': 'Month', 'publish_year': 'Year'})\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Number of books', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text='Year', row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=900, height=500,\n    title_font=dict(size=25, family='Courier'),\n    title='Publiaction date distribution (Monthly)',\n)\n\nfig.show()","e19d671a":"# EDA","e164ba0f":"## NOT visualisation based","3e5aed2f":"# Introduction\n\nThis data was entirely scraped via the Goodreads API, so kudos to them for providing such a simple interface to scrape their database. The basic idea behind analysing the Goodreads dataset is to get a fair idea about the relationships between the multiple attributes a book might have.\n\n**Our data includes:**\n* bookID\n* title\n* authors\n* average_rating - the average rating of the books, as decided by the Goodreads users\n* isbn - unique number to identify the book, the International Standard Book Number\n* isbn13 - a 13-digit ISBN to identify the book, instead of the standard 11-digit ISBN\n* language_code\n* num_pages - number of pages\n* ratings_count - total number of ratings the book received\n* text_reviews_count - total number of written text reviews the book received.\n* publication_date \n* publisher","b63ca26a":"# Imports","7c19e83a":"# Reading in the data, reshaping and cleaning","3aec6758":"## Visualisation based"}}