{"cell_type":{"a951b92b":"code","d3c6f851":"code","56a29e27":"code","2e494e63":"code","14b684ba":"code","e9d97e57":"code","1404a4be":"code","751d3c79":"code","14646473":"code","2abca00d":"code","fcde4af6":"code","3675321c":"code","07ec8a6c":"code","7e0cd2a9":"code","a7ac0df4":"code","031dfe38":"code","b242eefb":"markdown","ee6e5f33":"markdown"},"source":{"a951b92b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math","d3c6f851":"df=pd.read_csv('..\/input\/insurance\/insurance.csv')\ndf.head()","56a29e27":"df.isnull().sum()","2e494e63":"\ndf.hist(rwidth=0.9,figsize=(11,9))\nplt.tight_layout() ","14b684ba":"#continous values vs 'charges'\nplt.subplot(2,2,1)\nplt.title(\"Age Vs charges\")\nplt.scatter(df['age'],df['charges'],s=1,c='g')\n\nplt.subplot(2,2,2)\nplt.title(\"BMI Vs charges\")\nplt.scatter(df['bmi'],df['charges'],s=1,c='m')\n\nplt.subplot(2,2,3)\nplt.title(\"Children Vs charges\")\nplt.scatter(df['children'],df['charges'],s=1,c='b')\n\nplt.tight_layout()","e9d97e57":"#linearity using correlation coefficient matrix using corr()\ncorrelation=df[['age','bmi','children','charges']].corr()\ncorrelation","1404a4be":"#plot categorical features Vs charges\n#create 2x2 subplot\nclrs=['g','r','m']\n\n#1- sex\nplt.subplot(2,2,1)\nplt.title('charges per sex')\ncat_list=df['sex'].unique()\n#create avg demand per sex using groupby\ncat_avg=df.groupby('sex').mean()['charges']\nplt.bar(cat_list,cat_avg,color=clrs)\n\n#2- smoker\nplt.subplot(2,2,2)\nplt.title('charges per smoker')\ncat_list=df['smoker'].unique()\n#create avg demand per smoker using groupby\ncat_avg=df.groupby('smoker').mean()['charges']\nplt.bar(cat_list,cat_avg,color=clrs)\n\n#3- region\nplt.subplot(2,2,3)\nplt.title('charges per region')\ncat_list=df['region'].unique()\n#create avg demand per region using groupby\ncat_avg=df.groupby('region').mean()['charges']\nplt.bar(cat_list,cat_avg,color=clrs)\n\nplt.tight_layout()","751d3c79":"#df=df.drop(['sex'],axis=1)\ndf","14646473":"#normalize the feature 'charges' using log\n\ndf['charges']=np.log(df['charges'])\nplt.figure()\ndf['charges'].hist(rwidth=0.9,bins=20)\n","2abca00d":"#first to avoid dummy variable trap using get_dummies\n#only for categorical columns- sex,smoker,region\ndf.dtypes","fcde4af6":"df=pd.get_dummies(df,drop_first=True)\ndf","3675321c":"Y= df[['charges']]\nX= df.drop(['charges'],axis=1)\n#split dataset into 80-20 format\n#create 80% size\nsz=0.8*len(X)\nsz=int(sz)\n#create train and test\nX_train=X.values[0:sz]\nX_test=X.values[sz:len(X)]\n\nY_train=Y.values[0:sz]\nY_test=Y.values[sz:len(Y)]\n","07ec8a6c":"#fit and score the model\n#linera regression\nfrom sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,Y_train)\n\nprint(lr.score(X_train,Y_train))\nprint(lr.score(X_test,Y_test))","7e0cd2a9":"#generate Y_predictions\nY_pred=lr.predict(X_test)","a7ac0df4":"#root mean squared error\nfrom sklearn.metrics import mean_squared_error\nrmse=math.sqrt(mean_squared_error(Y_test,Y_pred))\nrmse","031dfe38":"#root mean squared logarithmic error\nY_test_e=[]\nY_pred_e=[]\n\n#convert float values to int\nfor i in range (0,len(Y_test)):\n  Y_test_e.append(math.exp(Y_test[i]))\n  Y_pred_e.append(math.exp(Y_pred[i]))\nlog_sq_sum=0\nfor i in range (0,len(Y_test)):\n  log_a=math.log(Y_test_e[i]+1)      #for actual values\n  log_p=math.log(Y_pred_e[i]+1)      #for predicted values\n  log_diff=(log_p - log_a)**2\n  log_sq_sum=log_sq_sum + log_diff\n\nrmsle=math.sqrt((log_sq_sum\/len(Y_test)))\nrmsle","b242eefb":"no null values","ee6e5f33":"Conclusion- predicted variable 'charges' is not normally distributed"}}