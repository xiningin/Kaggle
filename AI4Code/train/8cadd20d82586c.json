{"cell_type":{"b02fe8aa":"code","9872646e":"code","f7bceccb":"code","0057e832":"code","9f41332b":"code","5997f0b3":"code","92e3ad61":"code","a018fcf9":"code","3d66c7c9":"code","0a569171":"code","0c805ace":"markdown"},"source":{"b02fe8aa":"import numpy as np \nimport pandas as pd \nfrom sklearn.ensemble import GradientBoostingClassifier","9872646e":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\nntrain = train_df.shape[0]\nntest = test_df.shape[0]","f7bceccb":"trues = train_df.loc[train_df['target'] == 1]\nfalses = train_df.loc[train_df['target'] != 1].sample(frac=1)[:len(trues)]\ndata = pd.concat([trues, falses], ignore_index=True).sample(frac=1)\n\ndata.shape","0057e832":"cols = [i for i in data.columns.values if i not in [\"ID_code\",\"target\"]]\ntarget = data[\"target\"].values","9f41332b":"def augment(x,y,t=2):\n    xs,xn = [],[]\n    for i in range(t):\n        mask = y>0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xs.append(x1)\n\n    for i in range(t\/\/2):\n        mask = y==0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xn.append(x1)\n\n    xs = np.vstack(xs)\n    xn = np.vstack(xn)\n    ys = np.ones(xs.shape[0])\n    yn = np.zeros(xn.shape[0])\n    x = np.vstack([x,xs,xn])\n    y = np.concatenate([y,ys,yn])\n    return x,y","5997f0b3":"X_t, y_t = augment(data[cols].values, target)\nX_t = pd.DataFrame(X_t)\nX_t = X_t.add_prefix('var_')","92e3ad61":"GBC = GradientBoostingClassifier(learning_rate=0.05,min_samples_split=800,max_depth = 9,n_estimators=400,min_samples_leaf=80,\n                                                        random_state=1,max_features = 11 ,verbose=50,subsample=0.75)","a018fcf9":"%%time\nGBC.fit(X_t,y_t)","3d66c7c9":"GBC.train_score_","0a569171":"pred = np.zeros(ntest)\nsub = pd.DataFrame({\"ID_code\":test_df[\"ID_code\"].values})\npred = GBC.predict_proba(test_df[cols])[:,1]\nsub[\"target\"] = pred\nsub.to_csv(\"submission5.csv\",index=False)","0c805ace":"undersampling check https:\/\/www.kaggle.com\/danielgrimshaw\/sklearn-model-exploration "}}