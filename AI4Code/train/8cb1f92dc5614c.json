{"cell_type":{"befe9a5c":"code","3e788442":"code","12bbfbee":"code","9b8f5d52":"code","bbf43f5d":"code","9bbc5768":"code","7d3bc8c1":"code","3b811407":"code","2ee8961f":"code","02e481ec":"code","ba8d8cec":"code","ae354b58":"code","e9647305":"code","368975b0":"code","dd27a9f1":"markdown","512b59ef":"markdown","d8249ad6":"markdown"},"source":{"befe9a5c":"import numpy as np\nimport pandas as pd\nfrom IPython.display import clear_output\n\nfrom kaggle_environments import evaluate, make\nenv = make(\"halite\", debug=True)\nenv.render()","3e788442":"import shutil; import os\nshutil.copyfile('shared_code_1.py' if os.path.exists('shared_code_1.py') \n                   else '..\/input\/halite-models\/shared_code_1.py', \n                'submission.py');\n ","12bbfbee":"model_path = '..\/input\/halite-models\/2020_07_28_1150fresh_3k_batch32_lr2_wdp003_CLEAN_95.pth'","9b8f5d52":"import base64\nwith open(model_path, 'rb') as f:\n    raw_bytes = f.read()\n    encoded_weights = base64.encodebytes(raw_bytes)\n\nwith open('submission.py', 'a') as f:\n    f.write(f'\\nencoded_weights = {encoded_weights}\\n')","bbf43f5d":"%%writefile -a submission.py\n\nimport io\nimport base64\nimport torch\n\ndecoded = base64.b64decode(encoded_weights)\nbuffer = io.BytesIO(decoded)\nmodel.load_state_dict(torch.load(buffer, torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")))\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)","9bbc5768":"%%writefile -a submission.py\n\nmodel.eval();\ntorch.no_grad();\n\ntorch.set_num_threads(os.cpu_count())","7d3bc8c1":"%%writefile -a submission.py\n\ndevice = 'cpu'\n\nimport scipy.optimize\n\ndef main(obs, config):\n    start_time = datetime.datetime.now()\n\n    conf = config \n        \n    # convert to game format\n    step, halite, ship, base, cargo, ph, new_var, prior_actions = \\\n                processStep(obs, conf)\n    \n    # featurize\n    input_stack = getInputStack(step, halite, ship, base, cargo, ph, new_var, prior_actions, action_map,\n                               first_player = obs['player'])[0]\n\n    input_stack   = torch.as_tensor(input_stack).unsqueeze(0).to(device)  \n    \n        \n    # predict\n    output = model(input_stack)\n    \n    # extract predictions\n    policy_output = output[:, :-N_VALUE_HEADS].reshape(output.shape[0], N_POLICY_CHOICES, 21, 21)\n    \n    ship_prediction = Softmax(1)(policy_output[:, :-1, :, :]).detach().numpy()\n    \n    base_prediction = torch.sigmoid( policy_output[:, -1, :] ).detach().numpy()\n\n    value_prediction = output[:, -N_VALUE_HEADS:].detach().numpy()\n            \n        \n    nn_ship_actions = ship_prediction\n    nn_base_actions = base_prediction\n    nn_value_prediction = value_prediction\n\n    print(\"{:.0f} ms - neural network\".format((datetime.datetime.now() - start_time).microseconds \/\/ 1e3))\n    \n    \n    actions = {}\n    \n    # my assets -- to predict which step to take\n    my_ships = obs['players'][obs['player']][SHIPS]\n    my_bases = obs['players'][obs['player']][BASES]\n    my_halite = obs['players'][obs['player']][HALITE]\n    \n    \n    ship_list = list(my_ships.items())\n    base_list = list(my_bases.items())\n    print(ship_list)\n    print(base_list)\n    print()\n    \n    # score matrix -- can only pick valid actions\n    C = -100* np.ones((len(my_ships) + len(my_bases), 21 * 21 + len(my_ships) + len(my_bases)))\n#     print(C.shape)\n    \n    # add ships to scoring matrix\n    for ship_idx, (ship_key, ship_info)  in enumerate(ship_list):        \n        x, y = xy(ship_info[POSITION])\n        ship_pred_actions = nn_ship_actions[0, :, x, y]\n        \n        print('{},{}: {}'.format(x, y, list(np.round(ship_pred_actions, 2))))\n    \n        raw_ship_pred_actions = np.copy(ship_pred_actions)\n    \n        MIN_PROB = 0.0  \n        PRED_PWR = 2.7\n        \n        restore_sum = np.sum(ship_pred_actions[1:5])\n        ship_pred_actions[1:5] = np.where(ship_pred_actions[1:5] > MIN_PROB, ship_pred_actions[1:5], 0)\n        if np.sum(ship_pred_actions[1:5]) > 0:\n            ship_pred_actions[1:5] *= restore_sum \/ sum(ship_pred_actions[1:5])\n        \n        restore_sum = np.sum(ship_pred_actions[1:5])\n        if restore_sum > 0:\n            ship_pred_actions[1:5] = ship_pred_actions[1:5] ** PRED_PWR\n            ship_pred_actions[1:5] *= restore_sum \/ sum(ship_pred_actions[1:5])\n            \n        print(list(np.round(ship_pred_actions, 2)))\n        \n        ship_ranked_actions = np.zeros((6,), dtype = np.float32)\n        \n        for rank in range(0, np.sum(ship_pred_actions > 1e-6) ):\n            while True:\n                action = int(random.choice(np.flatnonzero(ship_pred_actions)))\n                    \n                if random.random() < ship_pred_actions[action]:\n                    ship_ranked_actions[action] = 6 - rank + raw_ship_pred_actions[action];\n                    ship_pred_actions[action] = 0\n                    ship_pred_actions = ship_pred_actions \/ np.sum(ship_pred_actions) \n                    break;\n                \n        \n        print(list(np.round(ship_ranked_actions, 1)))\n                \n\n        C[ship_idx, x + 21*y] = ship_ranked_actions[0]  \n        C[ship_idx, x + 21*c(y - 1)] = ship_ranked_actions[1]  \n        C[ship_idx, c(x + 1) + 21*y] = ship_ranked_actions[2]  \n        C[ship_idx, x + 21*c(y + 1)] = ship_ranked_actions[3]  \n        C[ship_idx, c(x - 1) + 21*y] = ship_ranked_actions[4]  \n        if my_halite >= conf.convertCost or ship_info[CARGO] > conf.convertCost:\n            C[ship_idx, 21*21 + ship_idx]= ship_ranked_actions[5] # conversion doesn't use any squares\n       \n    # add bases to scoring matrix\n    for base_idx, (base_key, base_info) in enumerate(base_list):\n        x, y = xy(base_info)\n        base_pred_actions = nn_base_actions[0, x, y]\n        print()\n        print(\"{}, {}: {:.2f}\".format(x, y, base_pred_actions))\n        \n        \n        SPAWN_CEIL = 0.8\n        \n        spawn_prob =  (base_pred_actions if obs.step > 20 else \n                           ( base_pred_actions if base_pred_actions < SPAWN_CEIL else 1 ))\n        spawn_yesno = random.random() < spawn_prob \n        print(spawn_yesno)\n        \n        if my_halite >= conf.spawnCost:\n            C[len(my_ships) + base_idx, x + 21*y] = spawn_yesno * 10\n            C[len(my_ships) + base_idx, 21*21 + len(my_ships) + base_idx] = 5\n        else:\n            C[len(my_ships) + base_idx, 21*21 + len(my_ships) + base_idx] = 10\n \n\n #     print(\"{:.0f} ms - rankings\".format((datetime.datetime.now() - start_time).microseconds \/\/ 1e3))\n\n    entity_idxs, assignments = scipy.optimize.linear_sum_assignment(C, maximize=True)\n    print()\n    print(entity_idxs)\n    print([ ( xy(assignment) if assignment < 21 * 21 else assignment - 21 * 21 ) for assignment in assignments])\n    \n    \n#     print(\"{:.0f} ms - linear optimization\".format((datetime.datetime.now() - start_time).microseconds \/\/ 1e3))\n\n    \n    # iterate over ships, assign them action\n    assigned = dict(zip(entity_idxs, assignments))\n    for ship_idx, (ship_key, ship_info)  in enumerate(ship_list):        \n        x, y = xy(ship_info[POSITION])\n\n        if assigned[ship_idx] >= 21 * 21:  # if assigned to convert\n            if ship_info[CARGO] > conf.convertCost:\n                actions[ship_key] = 'CONVERT'\n            elif my_halite > conf.convertCost:\n                actions[ship_key] = 'CONVERT'\n                my_halite -= conf.convertCost\n            else:\n                print('{} wanted to convert at {},{} but no resources'.format(ship_idx, x, y))\n            continue;\n        \n        xt, yt = xy(assigned[ship_idx])\n        if x == xt and y == yt:\n            print('remaining at {},{}'.format(x, y))\n            \n        else:\n            print('ship {} from {},{} to {},{}'.format(ship_idx, x, y, xt, yt))\n            a = None\n            if c(xt-x) == 1:\n                a = 'EAST'\n            elif c(yt-y) == 1:\n                a = 'SOUTH'\n            elif c(x-xt) == 1:\n                a = 'WEST'\n            elif c(y-yt) == 1:\n                a = 'NORTH'\n            if a is not None:\n                actions[ship_key] = a \n            else:\n                print('   says to move but where???')\n    \n    # iterate over bases - assign them actions\n    for base_idx, (base_key, base_info) in enumerate(base_list):\n        if assigned[len(my_ships) + base_idx] >= 21 * 21:\n            continue; # no spawn\n        else:\n            if my_halite >= conf.spawnCost:\n                actions[base_key] = 'SPAWN'\n                print('spawning a ship at {},{}'.format(*xy(base_info)))\n            else:\n                print('assigned to spawn at {}, {} but no cash on hand'.format(*xy(base_info)))\n                \n        \n    print()\n    print(actions)\n    \n\n\n    print(\"{:.0f} ms - total\".format((datetime.datetime.now() - start_time).microseconds \/\/ 1e3))\n\n    return actions","3b811407":"def show_status():\n    player = observation['players'][observation['player']]\n    print('   {} halite, {} bases, {} ships with {} onboard'.format( player[0], len(player[1]), \n                                            len(player[2]), sum([i[1][1] for i in player[2].items()]) )) ","2ee8961f":"paths = [   '..\/input\/halite-bots-c30',  '..\/input\/halite-bots-c30',  ]\n\nSAVED_BOTS = []\nfor path in paths:\n    SAVED_BOTS.extend([path + '\/' + file for file in os.listdir(path) if '.py' in file])\nSAVED_BOTS = sorted(SAVED_BOTS)\n\n\ndef printBots(bots):\n    for a in [a.split('\/')[-1] for a in bots]:\n        print(a)\n        \nEXTRAS = []\n\nAGENTS = sorted(SAVED_BOTS + [b for b in SAVED_BOTS if any(z in b for z in EXTRAS)] * 2)\n","02e481ec":"LIVE = False\nimport time \n    \nif LIVE:\n    %run submission.py\n\n    # reset variables\n    ships_data = {};  \n    max_step_time = 0 \n    step_times = np.zeros(400)\n    random.seed(3)\n\n    # Play as first position against random agent.\n    this_run = [None, random.choice(AGENTS), random.choice(AGENTS), random.choice(AGENTS)]\n    trainer = env.train(this_run)\n\n    observation = trainer.reset()\n    print(this_run)\n    \n    while not env.done:\n        start = datetime.datetime.now()\n        show_status(); print()\n            \n        my_action = main(observation, env.configuration)\n        step_time = (datetime.datetime.now() - start).microseconds\/\/1e3; \n        step_times[observation.step] = step_time\n\n        print(\"\\nStep: {}, {:.0f}ms, My Actions: {}\".format(observation.step, \n                                                           step_time, \n                                                           my_action))\n        prior_obs = observation.copy(); \n        observation, reward, done, info = trainer.step(my_action); obs = observation\n\n    print(' Longest Step Time: {:.0f}ms'.format(np.max(step_times)))\n\n    clear_output(wait=True)\n    print('Run Complete')","ba8d8cec":"if LIVE:\n    env.render(mode = 'ipython', width = 700, height = 500)","ae354b58":"def compete(runs):\n    return evaluate(\"halite\", [ 'submission.py', random.choice(AGENTS), random.choice(AGENTS), random.choice(AGENTS)],\n    num_episodes=runs, configuration={\"agentExec\": \"LOCAL\"})\n\ndef mean_reward(rewards):\n    wins = 0; ties = 0; losses = 0\n    rewards = np.nan_to_num(np.array(rewards, dtype = np.float32), -500)\n    games = 3 * len(rewards)\n    for p in range(1, 4):\n        wins += sum(rewards[:, 0] > rewards[:, p])\n        ties += sum(rewards[:, 0] == rewards[:, p])\n        losses += sum(rewards[:, 0] < rewards[:, p])\n    \n    return \"{:.0%} wins, {:.0%} losses, {:.0%} ties\".format(\n        wins\/games, losses\/games, ties\/games )","e9647305":"N_RUNS = 3  \nCSEED = 10","368975b0":"import datetime as datetime\nimport random\n\nstart = datetime.datetime.now()\nif CSEED > 0:\n    random.seed(CSEED + N_RUNS)\nelse:\n    random.seed(datetime.datetime.now().microsecond)\n\npreds = []\nfor i in range(0, N_RUNS):\n    r = compete(1)\n    preds.append(r)\n    clear_output(wait=True)\n\nprint('Over {} runs:'.format(len(preds)))\nprint(\" \", mean_reward([p for sub in preds for p in sub]))\nprint('\\nTime Elapsed: ', (datetime.datetime.now() - start).seconds, 's')","dd27a9f1":"### Games","512b59ef":"### Agents","d8249ad6":"### Live Game"}}