{"cell_type":{"122c7fe3":"code","bfcf224f":"code","44504c57":"code","ff43aafb":"code","96f45569":"code","ed598deb":"code","62b04bd9":"code","3330c9dc":"code","633a4632":"code","dbf645b4":"code","94d9737b":"code","12cdbb83":"code","c390bf9e":"code","d3c8ec64":"code","29801857":"code","10b8277b":"code","5f5134c8":"code","d2b56cc0":"code","62318ae2":"code","4312b405":"code","45ca09e8":"code","1370b907":"code","6b25274f":"code","3e089c5e":"code","10a94a06":"code","16cf8166":"code","8eb5facd":"code","dd83126f":"code","7e57ebde":"code","e9621e7a":"code","b82fe988":"code","47c830aa":"code","36370403":"code","6154f6b0":"code","f02dd8fc":"code","23b43015":"code","2cc8705f":"code","280febcc":"code","045d2083":"code","f545cd8c":"code","e07507e8":"code","5286c747":"code","b045ba1c":"code","502fddf8":"code","41c28768":"code","bc9e8ec1":"code","c3f886ee":"code","03c56027":"code","623aad54":"code","0aa05fe4":"code","e57ae4ff":"code","ef9805dd":"code","e9b8421d":"code","2ba36a65":"code","5e944b39":"code","b03148c9":"code","848ed7a0":"code","0f41f666":"code","052825f5":"code","a5e38004":"code","ab6d76fa":"code","b530d191":"code","37e76279":"code","483806a0":"code","436411db":"code","c1c57e6a":"code","16d767b1":"code","7e88cd98":"code","65c5f563":"code","89f66720":"code","5e2c8de7":"code","d1a775af":"code","1841faf9":"code","c687f5e4":"code","f7f81666":"code","0143ce36":"code","36231231":"code","bb6b2dde":"code","76b14c68":"code","e50e5cd0":"code","4f2ebb1f":"code","cadb33f7":"code","0f1a81cb":"code","307c4d15":"code","7e50f134":"code","d209a0e8":"code","f34dbbe0":"code","09d0e185":"code","65f63a0d":"code","03734374":"code","f677df5c":"code","ac88bc9c":"code","f10202a5":"code","f95998e8":"code","b8d9b212":"code","17bcd250":"code","9d586b3f":"code","4ec9119b":"code","7418a569":"code","bdbd4785":"code","fa79e768":"code","32036327":"code","85405c41":"code","b7c1011c":"code","d4955001":"code","b55ee445":"code","f1d6ae3f":"code","908b7553":"code","ee0a96b9":"code","488cf8b0":"code","a3eb9aed":"code","3c253c22":"code","212a3085":"code","d6f7adcb":"code","e4ab27e1":"code","51312b4b":"code","660083f1":"code","44f6aaba":"code","155597c2":"code","d184482c":"code","c6b85e01":"code","f15e67e7":"code","309bb535":"code","9c55172f":"code","0de58851":"code","a4756d93":"code","7576106b":"code","0e81cea8":"code","42662faf":"code","7ba37d1d":"code","e28b6938":"code","e341d87d":"code","a2c66a1b":"code","7812d017":"code","24e65067":"code","2571ec58":"code","2e1cb04a":"code","1c854a60":"code","cb7a37c9":"code","8a18f85d":"code","03431d97":"code","55977601":"code","f3d97bf6":"code","bc58c36a":"code","50858a35":"markdown","1ecede95":"markdown","6f047e0d":"markdown","7fc854e3":"markdown","4f9073ef":"markdown","d5d0121a":"markdown","ffd2d15a":"markdown","21f48fe4":"markdown","fbee88da":"markdown","95ccdd55":"markdown","7fff33e4":"markdown","3a9a0f2a":"markdown","0040ae62":"markdown","0e9af155":"markdown","bed74060":"markdown","a7c42b65":"markdown","71274c80":"markdown","a752d523":"markdown","9e0ddf68":"markdown","2dc21aa4":"markdown","707e2f8d":"markdown","7c9652d6":"markdown","e44d0675":"markdown","983cd6aa":"markdown","948f1003":"markdown","b83bb026":"markdown","7f161e3b":"markdown","26696f56":"markdown","ce6cd316":"markdown","b4508970":"markdown","8dc56260":"markdown","123d5680":"markdown","0ca7dc7b":"markdown","e36f1ff0":"markdown","5c474b61":"markdown","55050b37":"markdown","b4fdb485":"markdown","b7e8c9b5":"markdown","41870f82":"markdown","4b87fbaa":"markdown","eaef1764":"markdown","790a5092":"markdown","e404ec94":"markdown","de8d9623":"markdown","2f7ffc8e":"markdown","f7535c2a":"markdown","0a9434be":"markdown","2b48fe0b":"markdown","00690e4f":"markdown","bb608b6b":"markdown","4bcd6546":"markdown","a39be56c":"markdown","de5a02a5":"markdown","352da282":"markdown","386b4f60":"markdown","d9fe893c":"markdown","0f21294c":"markdown","8cea0f42":"markdown","3d3f8b55":"markdown","ec936dfb":"markdown","d0162119":"markdown","45903d8b":"markdown","1bb9ae0b":"markdown","fddbd995":"markdown","dbcf7876":"markdown","8d999a24":"markdown"},"source":{"122c7fe3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# Any results you write to the current directory are saved as output.\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bfcf224f":"train = pd.read_csv('\/kaggle\/input\/recommendationsv4\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/recommendationsv4\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/recommendationsv4\/sample_submission.csv')","44504c57":"train.sample(15)","ff43aafb":"test.sample(5)","96f45569":"pd.options.mode.chained_assignment = None \n\n# \u0432\u043e\u0437\u044c\u043c\u0443 \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438\u0437 \u0442\u0440\u0435\u0439\u043d\u0430 \u0438 \u0441\u043e\u0437\u0434\u0430\u043c \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u0442\u043e\u0432\u0430\u0440\u0430\u043c\u0438\nitems_train_list = train[['asin', 'itemid', 'rating']]\n\nitems_train_list['likes_up'] = np.where(items_train_list['rating'] == 1, 1, 0)\nitems_train_list['likes_down'] = np.where(items_train_list['rating'] == 0, 1, 0)\n\n# \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u044e \u0442\u043e\u0432\u0430\u0440\u044b \u043f\u043e asin \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u044e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e itemid \u0432\u0445\u043e\u0434\u0438\u0442\nitems_train_list_grouped_by_likes = items_train_list.groupby(['asin']) \\\n    .agg({'itemid': 'count', 'likes_up': 'sum', 'likes_down': 'sum'}) \\\n    .sort_values(by=['asin'], ascending=False)\\\n    .reset_index()\\\n    .rename(columns={'itemid': 'all_likes'})\n\nitems_train_list_grouped_by_likes","ed598deb":"items_train_list_with_overall = train[['asin', 'itemid', 'overall']]\n\n# \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u044e \u0442\u043e\u0432\u0430\u0440\u044b \u043f\u043e asin \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u044e \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\nitems_train_list_grouped_by_overall_mean = items_train_list_with_overall.groupby(['asin']) \\\n    .agg({'overall': 'mean'}) \\\n    .sort_values(by=['asin'], ascending=False) \\\n    .reset_index() \\\n    .rename(columns={'overall': 'item_rating_mean'})\n\nitems_train_list_grouped_by_overall_mean","62b04bd9":"items_train_list = items_train_list_grouped_by_overall_mean.merge(items_train_list_grouped_by_likes, left_on='asin', right_on='asin')\nitems_train_list = items_train_list.sort_values(by='all_likes', ascending=False)\nitems_train_list","3330c9dc":"items_train_list['all_likes'].hist(bins='doane')","633a4632":"items_train_list[items_train_list['all_likes'] > 100]","dbf645b4":"from math import sqrt\n\ndef confidence(ups, downs):\n    n = ups + downs\n\n    if n == 0:\n        return 0\n\n    z = 1.96 #1.44 = 85%, 1.96 = 95%\n    phat = float(ups) \/ n\n    return ((phat + z*z\/(2*n) - z * sqrt((phat*(1-phat)+z*z\/(4*n))\/n))\/(1+z*z\/n))\n\nitems_train_list['item_score'] = items_train_list.apply(lambda row : confidence(row['likes_up'], row['likes_down']), axis = 1)\n\nitems_train_list","94d9737b":"items_train_list['item_score'].hist(bins='doane')","12cdbb83":"train = train.drop(columns='image')","c390bf9e":"train['reviewTime_new'] = pd.to_datetime(train.unixReviewTime, unit='s')","d3c8ec64":"train = train.drop(columns=['reviewTime'])","29801857":"train = train.rename(columns={'reviewTime_new': 'review_time', 'unixReviewTime': 'unix_review_time'})","10b8277b":"train","5f5134c8":"train['rating'] = train['rating'].astype(int)","d2b56cc0":"def col_info(col, bins):\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432: {}'.format(col.isnull().sum()))\n    print('{},'.format(col.describe()))\n    print('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435:\\n{},'.format(col.value_counts()))\n    col.hist(bins=bins)","62318ae2":"col_info(train.overall, 'doane')","4312b405":"train['overall'] = train['overall'].astype(int)","45ca09e8":"train.verified.nunique()","1370b907":"train.verified.unique()","6b25274f":"train = train.drop(columns='verified')","3e089c5e":"col_info(train.vote, 'doane')","10a94a06":"train = train.drop(columns='vote')","16cf8166":"train = train.drop(columns='reviewerName')","8eb5facd":"train.sample(5)","dd83126f":"train['review_year'] = pd.DatetimeIndex(train['review_time']).year\ntrain['review_month'] = pd.DatetimeIndex(train['review_time']).month\ntrain['review_day'] = pd.DatetimeIndex(train['review_time']).day\ntrain['review_dayofweek'] = pd.DatetimeIndex(train['review_time']).dayofweek.astype(object)\n\n# \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0443 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u043f\u0435\u0440\u0435\u0434, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u0443 \u043c\u0435\u043d\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u043c\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 OneEncoding \u0434\u043b\u044f CatBoost\ncols = ['review_dayofweek']  + [col for col in train if col != 'review_dayofweek']\ntrain = train[cols]\n\ntrain = train.drop(columns='review_time')\ntrain","7e57ebde":"train = train.drop(columns='overall')","e9621e7a":"train = train.drop(columns='style')","b82fe988":"train = train.drop(columns=['summary', 'reviewText'])","47c830aa":"train","36370403":"test = pd.read_csv('\/kaggle\/input\/recommendationsv4\/test.csv')","6154f6b0":"test = test.drop(columns='image')\ntest['reviewTime_new'] = pd.to_datetime(test.unixReviewTime, unit='s')\ntest = test.drop(columns=['reviewTime'])\ntest = test.rename(columns={'reviewTime_new': 'review_time', 'unixReviewTime': 'unix_review_time'})\ntest = test.drop(columns=['vote', 'reviewerName'])\ntest = test.drop(columns='verified')\ntest['review_year'] = pd.DatetimeIndex(test['review_time']).year\ntest['review_month'] = pd.DatetimeIndex(test['review_time']).month\ntest['review_day'] = pd.DatetimeIndex(test['review_time']).day\ntest['review_dayofweek'] = pd.DatetimeIndex(test['review_time']).dayofweek.astype(object)\n\n# \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0443 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u043f\u0435\u0440\u0435\u0434, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u0443 \u043c\u0435\u043d\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u043c\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 OneEncoding \u0434\u043b\u044f CatBoost\ncols = ['review_dayofweek']  + [col for col in test if col != 'review_dayofweek']\ntest = test[cols]\n\ntest = test.drop(columns='review_time')\ntest = test.drop(columns='Id')\ntest = test.drop(columns='style')\n","f02dd8fc":"test.info()","23b43015":"import scipy.sparse as sparse\n\nfrom lightfm import LightFM\nfrom lightfm.cross_validation import random_train_test_split\nfrom lightfm.evaluation import auc_score, precision_at_k, recall_at_k\nimport sklearn\nfrom sklearn.model_selection import train_test_split\n\nimport scipy.sparse as sparse","2cc8705f":"train_data, test_data = train_test_split(train,random_state=32, shuffle=True)","280febcc":"ratings_coo = sparse.coo_matrix((train_data['rating'].astype(int),\n                                 (train_data['userid'],\n                                  train_data['itemid'])))","045d2083":"NUM_THREADS = 4 #\u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432\nNUM_COMPONENTS = 70 #\u0447\u0438\u0441\u043b\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \nNUM_EPOCHS = 20 #\u0447\u0438\u0441\u043b\u043e \u044d\u043f\u043e\u0445 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n\nmodel = LightFM(learning_rate=0.1, loss='logistic',\n                learning_schedule='adagrad',\n                no_components=NUM_COMPONENTS)\nmodel = model.fit(ratings_coo, epochs=NUM_EPOCHS, \n                  num_threads=NUM_THREADS)","f545cd8c":"preds_lightfm = model.predict(test_data.userid.values,\n                      test_data.itemid.values)\n","e07507e8":"preds_lightfm","5286c747":"preds_lightfm.min(), preds_lightfm.max()","b045ba1c":"normalized_preds_lightfm = (preds_lightfm - preds_lightfm.min())\/(preds_lightfm - preds_lightfm.min()).max()","502fddf8":"normalized_preds_lightfm","41c28768":"sklearn.metrics.roc_auc_score(test_data.rating,preds_lightfm)\n","bc9e8ec1":"normalized_preds_lightfm.min(), normalized_preds_lightfm.max()","c3f886ee":"preds_lightfm = model.predict(test.userid.values,\n                      test.itemid.values)\n","03c56027":"preds_lightfm.min(), preds_lightfm.max()","623aad54":"test_normalized_preds_lightfm = (preds_lightfm - preds_lightfm.min())\/(preds_lightfm - preds_lightfm.min()).max()","0aa05fe4":"normalized_preds_lightfm.min(), normalized_preds_lightfm.max()","e57ae4ff":"test_full = test.copy()\ntrain_full = train.copy()","ef9805dd":"train_full[['unix_review_time', 'userid', 'itemid', 'rating', 'review_year', 'review_month', 'review_day']] = train_full[['unix_review_time', 'userid', 'itemid', 'rating', 'review_year', 'review_month', 'review_day']].astype('int32')\ntest_full[['unix_review_time', 'userid', 'itemid', 'review_year', 'review_month', 'review_day']] = test_full[['unix_review_time', 'userid', 'itemid', 'review_year', 'review_month', 'review_day']].astype('int32')","e9b8421d":"train_full","2ba36a65":"test_full","5e944b39":"train_full = train.merge(items_train_list, how='left', left_on='asin', right_on='asin')\ntest_full = test.merge(items_train_list, how='left', left_on='asin', right_on='asin')","b03148c9":"test_full['item_rating_mean'].fillna((test_full['item_rating_mean'].mean()), inplace=True)\ntest_full['all_likes'].fillna((test_full['all_likes'].mean()), inplace=True)\ntest_full['likes_up'].fillna((test_full['likes_up'].mean()), inplace=True)\ntest_full['likes_down'].fillna((test_full['likes_down'].mean()), inplace=True)\ntest_full['item_score'].fillna((test_full['item_score'].mean()), inplace=True)","848ed7a0":"train_target_predict_from_lightfm = pd.read_csv('..\/input\/train-target-predict\/train_target_predict_from_lightfm.csv')","0f41f666":"train_full['lightfm_rating'] = train_target_predict_from_lightfm\n\ntest_full['lightfm_rating'] = pd.DataFrame(test_normalized_preds_lightfm)","052825f5":"test_full","a5e38004":"test_full = test_full.drop(columns=['itemid'])\ntrain_full = train_full.drop(columns=['itemid'])","ab6d76fa":"test_full = test_full.drop(columns=['asin'])\ntrain_full = train_full.drop(columns=['asin'])","b530d191":"test_full = test_full.drop(columns=['itemid', 'asin', 'all_likes', 'likes_up', 'likes_down'])\ntrain_full = train_full.drop(columns=['itemid', 'asin', 'all_likes', 'likes_up', 'likes_down'])","37e76279":"train_full['lightfm_rolling_mean'] = train_full['lightfm_rating'].rolling(window=7).mean()\ntrain_full['lightfm_rolling_mean'] = train_full['lightfm_rolling_mean'].fillna(0)\n\ntest_full['lightfm_rolling_mean'] = test_full['lightfm_rating'].rolling(window=7).mean()\ntest_full['lightfm_rolling_mean'] = test_full['lightfm_rolling_mean'].fillna(0)","483806a0":"train_full['lightfm_expanding_mean'] = train_full['lightfm_rating'].expanding(2).mean()\ntrain_full['lightfm_expanding_mean'] = train_full['lightfm_expanding_mean'].fillna(0)\n\ntest_full['lightfm_expanding_mean'] = test_full['lightfm_rating'].expanding(2).mean()\ntest_full['lightfm_expanding_mean'] = test_full['lightfm_expanding_mean'].fillna(0)","436411db":"def code_mean(data, cat_feature, real_feature):\n    \"\"\"\n    Returns a dictionary where keys are unique categories of the cat_feature,\n    and values are means over real_feature\n    \"\"\"\n    return dict(data.groupby(cat_feature)[real_feature].mean())","c1c57e6a":"average_dayofweek = code_mean(train_full, 'review_day', \"rating\")\nplt.figure(figsize=(7, 5))\nplt.title(\"dayofweek averages\")\npd.DataFrame.from_dict(average_dayofweek, orient='index')[0].plot()\nplt.grid(True);","16d767b1":"train_full[\"lightfm_rating_by_day_average\"] = list(map(code_mean(train_full, 'review_day', \"lightfm_rating\").get, train_full.review_day))\ntest_full[\"lightfm_rating_by_day_average\"] = list(map(code_mean(test_full, 'review_day', \"lightfm_rating\").get, test_full.review_day))\n\ntrain_full[\"review_by_month_average\"] = list(map(code_mean(train_full, 'review_month', \"lightfm_rating\").get, train_full.review_month))\ntest_full[\"review_by_month_average\"] = list(map(code_mean(test_full, 'review_month', \"lightfm_rating\").get, test_full.review_month))\n\ntrain_full[\"lightfm_rating_by_dayofweek_average\"] = list(map(code_mean(train_full, 'review_dayofweek', \"lightfm_rating\").get, train_full.review_dayofweek))\ntest_full[\"lightfm_rating_by_dayofweek_average\"] = list(map(code_mean(test_full, 'review_dayofweek', \"lightfm_rating\").get, test_full.review_dayofweek))","7e88cd98":"test_full = test_full.drop(columns=['review_year', 'review_month', 'review_day', 'unix_review_time'])\ntrain_full = train_full.drop(columns=['review_year', 'review_month', 'review_day', 'unix_review_time'])","65c5f563":"train_full[['lightfm_rating', 'lightfm_rolling_mean', 'lightfm_expanding_mean', 'lightfm_rating_by_day_average', 'review_by_month_average', 'lightfm_rating_by_dayofweek_average']] = train_full[['lightfm_rating', 'lightfm_rolling_mean', 'lightfm_expanding_mean', 'lightfm_rating_by_day_average', 'review_by_month_average', 'lightfm_rating_by_dayofweek_average']].astype('float32')\ntest_full[['lightfm_rating', 'lightfm_rolling_mean', 'lightfm_expanding_mean', 'lightfm_rating_by_day_average', 'review_by_month_average', 'lightfm_rating_by_dayofweek_average']] = test_full[['lightfm_rating', 'lightfm_rolling_mean', 'lightfm_expanding_mean', 'lightfm_rating_by_day_average', 'review_by_month_average', 'lightfm_rating_by_dayofweek_average']].astype('float32')","89f66720":"import itertools\n\ndef itr_combinations_new_features(data):\n    \n    tmp_df = data.copy()\n    \n    old_columns = [item for item in tmp_df.columns.tolist() if item != 'rating' and item != 'review_dayofweek' and item != 'userid']\n    \n    tmp_df_sum_2 = [(pd.Series(tmp_df.loc[:,list(i)].sum(axis=1),\\\n            name='_sum2_'.join(tmp_df.loc[:,list(i)].columns))) for i in list(itertools.combinations(old_columns,2))]\n    \n    tmp_df_sum_3 = [(pd.Series(tmp_df.loc[:,list(i)].sum(axis=1),\\\n            name='_sum3_'.join(tmp_df.loc[:,list(i)].columns))) for i in list(itertools.combinations(old_columns,3))]\n    \n    tmp_df_multiplication = [(pd.Series(tmp_df.loc[:,i[0]]*tmp_df.loc[:,i[1]],\\\n            name='_mult_'.join(tmp_df.loc[:,list(i)].columns))) for i in list(itertools.combinations(old_columns,2))]\n    \n   \n    df_sum_2 = pd.DataFrame(tmp_df_sum_2).T  \n    \n    df_sum_3 = pd.DataFrame(tmp_df_sum_3).T  \n    \n    df_multiplication = pd.DataFrame(tmp_df_multiplication).T  \n   \n    data = pd.concat([data, df_sum_2, df_sum_3, df_multiplication], axis=1, sort=False)         \n \n    \n    return data","5e2c8de7":"train_full = itr_combinations_new_features(train_full)\ntrain_full = train_full.fillna(0)","d1a775af":"train_full","1841faf9":"test_full = itr_combinations_new_features(test_full)\ntest_full = test_full.fillna(0)","c687f5e4":"test_full.info()","f7f81666":"test_full","0143ce36":"train_full","36231231":"test_full.info()","bb6b2dde":"col_info(train_full.lightfm_rating, 'doane')","76b14c68":"col_info(train_full.item_score, 'doane')","e50e5cd0":"train_full","4f2ebb1f":"test_full","cadb33f7":"test_full = test_full.drop(columns=['lightfm_rating', 'userid'])\ntrain_full = train_full.drop(columns=['rating', 'userid'])","0f1a81cb":"from catboost import CatBoostRegressor\nfrom sklearn.metrics import accuracy_score","307c4d15":"from sklearn.model_selection import train_test_split\n\nX = train_full.drop(['lightfm_rating'], axis=1,)\ny = train_full.lightfm_rating.values\n\nX_train, X_validation, y_train, y_validation = train_test_split(X, y, train_size=0.75, random_state=42)\n\nX_test = test_full.drop([], axis=1,)","7e50f134":"import hyperopt\n\ndef hyperopt_objective(params):\n    model = CatBoostRegressor(\n        l2_leaf_reg=int(params['l2_leaf_reg']),\n        learning_rate=params['learning_rate'],\n        iterations=100,\n        eval_metric='AUC',\n        random_seed=42,\n        verbose=False,\n        loss_function='RMSE',\n    )\n    \n    cv_data = cv(\n        Pool(X_train, y_train),\n        model.get_params()\n    )\n    best_accuracy = np.max(cv_data['test-AUC-mean'])\n    \n    return 1 - best_accuracy # as hyperopt minimises","d209a0e8":"from numpy.random import RandomState\n\nparams_space = {\n    'l2_leaf_reg': hyperopt.hp.qloguniform('l2_leaf_reg', 0, 2, 1),\n    'learning_rate': hyperopt.hp.uniform('learning_rate', 0.01, 0.5),\n}\n\ntrials = hyperopt.Trials()\n\nbest = hyperopt.fmin(\n    hyperopt_objective,\n    space=params_space,\n    algo=hyperopt.tpe.suggest,\n    max_evals=10,\n    trials=trials,\n    rstate=RandomState(123)\n)\n\nprint(best)","f34dbbe0":"# CatBoost Regression\n\nparams = {\n    'iterations': 400,\n    'learning_rate': 0.2,\n    'l2_leaf_reg': 3,\n    'eval_metric': 'AUC',\n    'loss_function': 'RMSE',\n    'use_best_model': True,\n    'random_seed': 42,\n    'logging_level': 'Silent'\n}\n\n\nmodel = CatBoostRegressor(**params)\n\ncategorical_features_names = [0]\n\n# Fit model\nmodel.fit(\n    X_train, y_train,\n    cat_features=categorical_features_names,\n    eval_set=(X_validation, y_validation),\n#     logging_level='Verbose',  # you can uncomment this for text output\n    plot=True\n);","09d0e185":"from catboost import Pool, CatBoostRegressor, cv\n\nfeature_score = pd.DataFrame(list(zip(X.dtypes.index, model.get_feature_importance(Pool(X_train, label=y_train, cat_features=categorical_features_names)))),\n                columns=['Feature','Score'])\n\nfeature_score = feature_score.sort_values(by='Score', ascending=False, inplace=False, kind='quicksort', na_position='last')\n\nfeature_score","65f63a0d":"def del_bag_feat(data):\n\n    feature_score_upd = feature_score[(feature_score['Score']<0.3)]\n    feature_score_upd = feature_score_upd['Feature'].tolist()\n    \n    print(feature_score_upd)\n    \n    indexes_to_keep = set(data.columns) - set(feature_score_upd)    \n   \n    data = data[indexes_to_keep]\n    \n\n    return data","03734374":"train_full2 = del_bag_feat(train_full)","f677df5c":"train_full2","ac88bc9c":"test_full2 = del_bag_feat(test_full)","f10202a5":"test_full2","f95998e8":"def drop_corr_features(data):\n    # Create correlation matrix\n    corr_matrix = data.corr().abs()\n\n    # Select upper triangle of correlation matrix\n    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n    # Find features with correlation greater than 0.95\n    to_drop = [column for column in upper.columns if any(upper[column] > 0.95)]\n\n    print(to_drop)\n    \n    data.drop(to_drop, axis=1, inplace=True)\n\n    # Drop features \n    return data","b8d9b212":"train_full = drop_corr_features(train_full)","17bcd250":"test_full = drop_corr_features(test_full)","9d586b3f":"train_full","4ec9119b":"test_full","7418a569":"# \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0443 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u043f\u0435\u0440\u0435\u0434, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u0443 \u043c\u0435\u043d\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u043c\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 OneEncoding \u0434\u043b\u044f CatBoost\ncols = ['review_dayofweek']  + [col for col in train_full if col != 'review_dayofweek']\ntrain_full = train_full[cols]","bdbd4785":"# \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0443 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u043f\u0435\u0440\u0435\u0434, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u0443 \u043c\u0435\u043d\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u043c\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 OneEncoding \u0434\u043b\u044f CatBoost\ncols = ['review_dayofweek']  + [col for col in test_full if col != 'review_dayofweek']\ntest_full = test_full[cols]","fa79e768":"from sklearn.model_selection import train_test_split\n\nX = train_full2.drop(['lightfm_rating'], axis=1,)\ny = train_full2.lightfm_rating.values\n\nX_train, X_validation, y_train, y_validation = train_test_split(X, y, train_size=0.75, random_state=42)\n\nX_test = test_full2.drop([], axis=1,)","32036327":"# CatBoost Regression\n\nparams = {\n    'iterations': 450,\n    'learning_rate': 0.1,\n    'l2_leaf_reg': 2,\n    'eval_metric': 'AUC',\n    'loss_function': 'RMSE',\n    'use_best_model': True,\n    'random_seed': 42,\n    'logging_level': 'Silent'\n}\n\n\nmodel = CatBoostRegressor(**params)\n\n# categorical_features_names = [0]\n\n# Fit model\nmodel.fit(\n    X_train, y_train,\n#     cat_features=categorical_features_names,\n    eval_set=(X_validation, y_validation),\n#     logging_level='Verbose',  # you can uncomment this for text output\n    plot=True\n);","85405c41":"from catboost import Pool, CatBoostRegressor, cv\n\nfeature_score = pd.DataFrame(list(zip(X.dtypes.index, model.get_feature_importance(Pool(X_train, label=y_train)))),\n                columns=['Feature','Score'])\n\nfeature_score = feature_score.sort_values(by='Score', ascending=False, inplace=False, kind='quicksort', na_position='last')\n\nfeature_score","b7c1011c":"def del_bag_feat_2(data):\n\n    feature_score_upd = feature_score[(feature_score['Score']<2)]\n    feature_score_upd = feature_score_upd['Feature'].tolist()\n    \n    print(feature_score_upd)\n    \n    indexes_to_keep = set(data.columns) - set(feature_score_upd)    \n   \n    data = data[indexes_to_keep]\n    \n\n    return data","d4955001":"train_full2 = del_bag_feat_2(train_full2)\ntest_full2 = del_bag_feat_2(test_full2)","b55ee445":"train_full2.info()","f1d6ae3f":"# Get predictions\npredictions_catboost = model.predict(X_test)\nprint(predictions_catboost[:10])","908b7553":"plt.rcParams[\"figure.figsize\"] = (12,7)\nax = feature_score.plot('Feature', 'Score', kind='bar', color='c')\nax.set_title(\"Catboost Feature Importance Ranking\", fontsize = 14)\nax.set_xlabel('')\n\nrects = ax.patches\n\nlabels = feature_score['Score'].round(2)\n\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height + 0.35, label, ha='center', va='bottom')\n\nplt.show()","ee0a96b9":"model = CatBoostRegressor(\n    l2_leaf_reg=int(best['l2_leaf_reg']),\n    learning_rate=best['learning_rate'],\n    iterations=750,\n    eval_metric='AUC',\n    random_seed=42,\n    verbose=True,\n    loss_function='RMSE',\n)\n","488cf8b0":"cv_data = cv(Pool(X_train, y_train), model.get_params())","a3eb9aed":"cv_data","3c253c22":"model.fit(X_train, y_train, plot=True)","212a3085":"# Get predictions\npredictions_catboost = model.predict(X_test)\nprint(predictions_catboost[:10])","d6f7adcb":"RANDOM_STATE = 900\n\nCATBOOST_PARAMS_GENERATOR_VER = 11\n\ncatbr_params = {\n    'random_seed': RANDOM_STATE, \n    'learning_rate': 0.1, #0.2-\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n    'iterations': 750, #750-\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n    'depth': 9, # 9-\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n    'l2_leaf_reg': 2, # 2-\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n    'eval_metric': 'AUC',\n    'subsample' : 0.75,\n    'random_strength': 0.06, \n    'od_type': \"Iter\", #\u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f catboost\n    'od_wait': 1500,  # 1500-\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \n    'loss_function': 'RMSE',\n    'verbose': False, \n}","e4ab27e1":"import random\n\ncol_mean = []\n\nresult_pred_df = pd.DataFrame()\n\nfor i in range(30):\n    # Params rendomizer\n    catbr_params['subsample'] = random.choice([0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])\n    catbr_params['learning_rate'] = random.choice([0.3, 0.1, 0.2, 0.4])\n    catbr_params['depth'] = random.choice([2, 4, 6, 7, 8, 9])\n    catbr_params['l2_leaf_reg'] = random.choice([0.85, 0.9, 1, 2, 3, 4, 2.5, 3.5, 4.5])\n    catbr_params['random_seed'] = random.randint(10,10000)\n    predict_model_ = 'result' + str(CATBOOST_PARAMS_GENERATOR_VER) + str(i) + \"_subs_\" + str(catbr_params['subsample'])+  \"_lr_\" + str(catbr_params['learning_rate'])+ \"_l2_\" + str(catbr_params['l2_leaf_reg'])+\\\n            \"_rs_\" + str(catbr_params['random_seed'])\n      \n    # Model\n    model = CatBoostRegressor(**catbr_params)\n    \n    # Model fit\n    model.fit(\n    X_train, y_train,\n    eval_set=(X_validation, y_validation),\n#     cat_features=categorical_features_names,\n    plot=False\n    );\n    \n    print(i)\n    \n    # Get predictions\n    predict_model_ = model.predict(X_test)\n    result_pred_df[f'result_{i}'] = predict_model_\n    print(predict_model_[:10])    \n\n    col_mean.extend([predict_model_])\n    \nprint(col_mean)","51312b4b":"col_list = result_pred_df.columns.tolist()\nresult_pred_df['y_pred_v0'] = result_pred_df[col_list].mean(axis = 1)","660083f1":"result_pred_df","44f6aaba":"predictions_catboost = result_pred_df['y_pred_v0'].values","155597c2":"predictions_catboost.min(), predictions_catboost.max()","d184482c":"normalized_predictions_catboost = (predictions_catboost - predictions_catboost.min())\/(predictions_catboost - predictions_catboost.min()).max()\nnormalized_predictions_catboost","c6b85e01":"normalized_preds = (normalized_predictions_catboost + test_normalized_preds_lightfm) \/ 2","f15e67e7":"submission['rating'] = normalized_preds","309bb535":"submission","9c55172f":"VERSION = 45","0de58851":"submission.to_csv(f'submission_log_v{VERSION}.csv', index=False)","a4756d93":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\nimport matplotlib\nfrom matplotlib.pyplot import figure\n\n%matplotlib inline\nmatplotlib.rcParams['figure.figsize'] = (12,8)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, confusion_matrix, roc_curve, accuracy_score, f1_score, precision_score, recall_score\n\nimport keras\nfrom keras import backend as K\nfrom keras.models import Sequential, Model\nfrom keras.layers import Embedding, Flatten, Dense, Dropout, concatenate, multiply, Input, BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras import metrics\nfrom keras.utils.vis_utils import plot_model\n\nimport scikitplot as skplt\n\nimport sys\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n    \nRANDOM_SEED = 13\n\nprint('Python       :', sys.version.split('\\n')[0])\nprint('Pandas       :', pd.__version__)\nprint('Numpy        :', np.__version__)\nprint('Keras        :', keras.__version__)","7576106b":"def open_data():\n    \"\"\" open datasets\"\"\"\n    global train, test, sample_submission # \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c\u0438\n    train = pd.read_csv('\/kaggle\/input\/recommendationsv4\/train.csv', low_memory = False)\n    train = train.drop_duplicates().reset_index(drop = True) # \u0443\u0434\u0430\u043b\u0438\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c\n    test = pd.read_csv('\/kaggle\/input\/recommendationsv4\/test.csv', low_memory = False)\n    sample_submission = pd.read_csv('\/kaggle\/input\/recommendationsv4\/sample_submission.csv')\n    \nopen_data() # \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n\ndef param_data(data): # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435\n    \"\"\"dataset required parameters \"\"\"\n    param = pd.DataFrame({\n              'dtypes': data.dtypes.values,\n              'nunique': data.nunique().values,\n              'isna': data.isna().sum().values,\n              'loc[0]': data.loc[0].values,\n              }, \n             index = data.loc[0].index)\n    return param\n\npd.concat([param_data(train), param_data(test)], \n          axis=1, \n          keys = [f'\u2193 \u041e\u0411\u0423\u0427\u0410\u042e\u0429\u0410\u042f \u0412\u042b\u0411\u041e\u0420\u041a\u0410 \u2193 {train.shape}', f'\u2193 \u0422\u0415\u0421\u0422\u041e\u0412\u0410\u042f \u0412\u042b\u0411\u041e\u0420\u041a\u0410 \u2193 {test.shape}'],  \n          sort=False)","0e81cea8":"def viz_na(data):\n    \"\"\"NA visualisation\"\"\"\n    global cols\n    cols = data.columns # \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0446\u0432\u0435\u0442\u0430 \n    # \u0436\u0435\u043b\u0442\u044b\u0439 - \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0441\u0438\u043d\u0438\u0439 - \u043d\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435\n    colours = ['#000099', '#ffff00'] \n    sns.heatmap(data[cols].isnull(), cmap=sns.color_palette(colours))\n    plt.show()\n\n\nviz_na(train)\nviz_na(test)","42662faf":"def stat_na_per_percent(data):\n    print(f'{data.shape}')\n    for col in data.columns:\n        pct_missing = np.mean(data[col].isnull())\n        print('{} - {}%'.format(col, round(pct_missing*100)))\n    print(\"END\", end = '\\n\\n')\nstat_na_per_percent(train)\nstat_na_per_percent(test)","7ba37d1d":"sns.countplot(train['rating']);","e28b6938":"sns.heatmap(train.corr())\nplt.show()","e341d87d":"train_data_GB = pd.DataFrame({\n    'userid': train['userid'],\n    'itemid': train['itemid'],\n    'rating': train['rating']\n})\n\ntest_data_GB = pd.DataFrame({\n    'userid': test['userid'],\n    'itemid': test['itemid'],\n})\n\ntrain_data_GB = pd.get_dummies(train_data_GB, prefix='', prefix_sep='', columns=['rating'])","a2c66a1b":"#train_data_GB['rating'] = train_data_GB['rating'].astype(int)\n## unisue users, books\nuserid, utemid = len(train_data_GB.userid.unique()), len(train_data_GB.itemid.unique())\n\n\nf'The dataset includes {len(train_data_GB)} ratings by {userid} unique users on {utemid} unique itemid.'","7812d017":"train_, test_ = train_test_split(train_data_GB, test_size=0.01)\nf\"The training and testing data include {len(train), len(test)} records.\"","24e65067":"keras.backend.clear_session()\n## define the number of latent factors (can be different for the users and books)\ndim_embedding_user = 40\ndim_embedding_book = 40\n\n## book embedding\nutem_input= Input(shape=[1], name='Utem')\nutem_embedding = Embedding(utemid + 1, dim_embedding_book, name='Utem-Embedding')(utem_input)\nutem_vec = Flatten(name='Utem-Flatten')(utem_embedding)\nutem_vec = Dropout(0.5)(utem_vec)\n\n## user embedding\nuser_input = Input(shape=[1], name='User')\nuser_embedding = Embedding(userid + 1, dim_embedding_user, name ='User-Embedding')(user_input)\nuser_vec = Flatten(name ='User-Flatten')(user_embedding)\nuser_vec = Dropout(0.5)(user_vec)\n\n## concatenate flattened values \nconcat = concatenate([utem_vec, user_vec])\nconcat_dropout = Dropout(0.5)(concat)\n\n## add dense layer (can try more)\ndense_1 = Dense(30, name ='Fully-Connected1', activation='relu')(concat)\ndense_1 = Dense(30, name ='Fully-Connected2', activation='relu')(dense_1)\ndense_1 = Dense(30, name ='Fully-Connected3', activation='relu')(dense_1)\ndense_1 = Dense(30, name ='Fully-Connected4', activation='relu')(dense_1)\n## define output (can try sigmoid instead of relu)\nresult = Dense(2, activation ='softmax',name ='Activation')(dense_1)\n\n## define model with 2 inputs and 1 output\nmodel_tabular = Model([user_input, utem_input], result)\nmodel_tabular.summary()","2571ec58":"plot_model(model_tabular, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","2e1cb04a":"## specify learning rate (or use the default by specifying optimizer = 'adam')\nopt_adam = Adam(lr = 0.0003)\n\n## compile model\nmodel_tabular.compile(optimizer= opt_adam, loss= ['binary_crossentropy'], metrics=[keras.metrics.AUC()])\n\n## fit model\nhistory_tabular = model_tabular.fit([train_['userid'], train_['itemid']],\n                                    train_.iloc[:,[-2,-1]],\n                                    batch_size = 1000,\n                                    validation_split = 0.1,\n                                    epochs = 4,\n                                    verbose = 1)","1c854a60":"test_pred_GB = model_tabular.predict([test_data_GB['userid'], test_data_GB['itemid']])[:,1]","cb7a37c9":"test_pred = model_tabular.predict([test_['userid'], test_['itemid']])","8a18f85d":"skplt.metrics.plot_roc(test_.iloc[:, -1], test_pred)\nplt.show()","03431d97":"fpr, tpr, _ = roc_curve(test_.iloc[:, -1], test_pred[:,1])\nauc = roc_auc_score(test_.iloc[:,  -1], test_pred[:, 1])\naccuracy = accuracy_score(test_.iloc[:, -1], np.argmax(test_pred, axis = -1))\nf1 = f1_score(test_.iloc[:, -1], np.argmax(test_pred, axis = -1))\nprecision =  precision_score(test_.iloc[:, -1], np.argmax(test_pred, axis = -1))\nrecall = recall_score(test_.iloc[:, -1], np.argmax(test_pred, axis = -1))\n\nprint('FP, TP              :', sum(fpr), sum(tpr))\nprint('ROC_AUC_SCORE       :', auc)\nprint('accuracy            :', accuracy)\nprint('precision           :', precision)\nprint('recall              :', recall)\nprint('f1                  :', f1)","55977601":"sample_submission['rating'] = test_pred_GB\nsample_submission.to_csv('submission_XXXXXX.csv', index=False)\nsample_submission.head(3)","f3d97bf6":"#\u042d\u043c\u0431\u0435\u0434\u0438\u043d\u0433\u0438\nutem_embedding_weights = model_tabular.layers[2].get_weights()[0]","bc58c36a":"utem_embedding_weights","50858a35":"\u0417\u0430\u043f\u0443\u0449\u0443 \u0442\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043d\u043e\u0432\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 \u0443\u0436\u0435 \u043f\u043e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.","1ecede95":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0442\u0435\u043f\u0435\u0440\u044c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0443 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0443\u0445\u0438\u0449\u0440\u0435\u043d\u0438\u0439 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 CatBoost \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 rating.","6f047e0d":"\u041a\u0430\u043a \u043d\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0446\u0435\u043d\u043e\u043a? \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b: \u00ab\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043e\u0446\u0435\u043d\u043e\u043a, \u0441 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0432 95 % \u0438\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u0434\u043e\u043b\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043a\u0430\u043a\u0430\u044f?\u00bb. \u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u044d\u0442\u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441 \u0434\u0430\u043b \u042d\u0434\u0432\u0438\u043d \u0423\u0438\u043b\u0441\u043e\u043d \u0432 1927 \u0433\u043e\u0434\u0443: http:\/\/www.evanmiller.org\/how-not-to-sort-by-average-rating.html","7fc854e3":"\u0421\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 image \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u041f\u043e\u0431\u043e\u0440\u043e\u0442\u044c \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c. \u041d\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e 1% \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043c\u0435\u043b\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","4f9073ef":"### Image","d5d0121a":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043b\u0430\u0439\u043a\u043e\u0432 \u0438 \u043a\u043d\u0438\u0433","ffd2d15a":"# Fit\/Predict","21f48fe4":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u044e \u043f\u0440\u0438\u0441\u0442\u0430\u043b\u044c\u043d\u0435\u0435 \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. \u0421\u043e\u0437\u0434\u0430\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:","fbee88da":"### style","95ccdd55":"\u0422\u0435\u043f\u0435\u0440\u044c \u0445\u043e\u0447\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043a\u0430\u0442\u0431\u0443\u0441\u0442\u0430 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0441\u0440\u0435\u0434\u0438\u0442\u044c \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f.","7fff33e4":"\u0423\u0434\u0430\u043b\u044f\u0442\u044c \u0431\u0443\u0434\u0443 \u0442\u0430\u043a, \u043a\u0430\u043a \u0442\u043e\u0433\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 pandas \u043f\u0443\u0442\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u044b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430, \u0431\u0435\u0437 inplace=True","3a9a0f2a":"\u041f\u043e\u0434\u0447\u0438\u0449\u0443 \u0443\u0436\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0040ae62":"# \u041e\u043a, \u0432\u044b\u0434\u0435\u043b\u044e \u0442\u043e\u0432\u0430\u0440\u044b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438, \u043b\u0430\u0439\u043a\u0438 \u0438 \u0442\u0434.","0e9af155":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0430\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u0430 - \u0433\u043e\u0434, \u043c\u0435\u0441\u044f\u0446, \u0434\u0435\u043d\u044c, \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438.","bed74060":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c-\u043a\u0430 \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 score","a7c42b65":"\u041d\u0430\u0434\u043e \u043b\u0438 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a? \u0412 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0442\u0430\u043a \u0438\u043b\u0438 \u0438\u043d\u0430\u0447\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u043b \u0441\u0432\u043e\u0439 \u043e\u0442\u0437\u044b\u0432 \u0438 \u044d\u0442\u043e \u0435\u0433\u043e \u043c\u043d\u0435\u043d\u0438\u0435 \u043e \u043a\u043d\u0438\u0433\u0435. \u0417\u043d\u0430\u0447\u0438\u0442, \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","71274c80":"\u041d\u043e \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0434\u0430\u043b\u044e \u0438\u0437 \u0442\u0440\u0435\u0439\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 rating, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e \u0441\u0443\u0442\u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u044f \u0431\u0443\u0434\u0443 \u043d\u0430 \u0442\u0435\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043b LightFM. \u041d\u0443 \u0438 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443\u0434\u0430\u043b\u044e \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0435\u0433\u043e \u0438 \u0431\u0443\u0434\u0435\u043c \u0443\u0447\u0438\u0442\u044c.","a752d523":"### Vote","9e0ddf68":"\u0420\u0430\u043d\u0435\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e K-FOLD \u0442\u0435\u0445\u043d\u0438\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e LightFM \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0440\u0435\u0439\u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439. \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0437\u0430\u0441\u043e\u0440\u044f\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u043a\u043e\u0434\u043e\u043c, \u0432\u044b\u043d\u0435\u0441 \u044d\u0442\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u0435\u0433\u043e \u0438 \u0434\u0430\u043b\u0435\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.","2dc21aa4":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 train","707e2f8d":"# Submission","7c9652d6":"\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u044e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0442 LightFM \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f. \u0418 \u0431\u0443\u0434\u0443 \u043d\u0430 \u043d\u0438\u0445 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c.","e44d0675":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 CatBoost \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0432\u0430\u0436\u043d\u044b\u043c\u0438.","983cd6aa":"### reviewerName\t","948f1003":"### Tabular data method","b83bb026":"### Overall","7f161e3b":"\u0421\u043a\u043b\u0435\u044e \u0434\u0432\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u043e\u0432\u0430\u0440\u043e\u0432","26696f56":"CatBoost \u0432\u044b\u0434\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u0443\u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0435\u0441\u043b\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0430\u0445.","ce6cd316":"\u041e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432... \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u044d\u0442\u0438\u043c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435\u043b\u044c\u0437\u044f - \u0443\u0434\u0430\u043b\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","b4508970":"\u0414\u0430\u0442\u0430\u0441\u0435\u0442\n\n\u0423 \u0432\u0430\u0441 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0435\u0433\u043e \u043e\u0431\u0437\u043e\u0440\u043e\u043c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0440\u0435\u0446\u0435\u043d\u0437\u0438\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u0412\u0441\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 3 (\u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e), \u0442\u043e \u043c\u044b \u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0447\u0442\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u0435\u043c\u0443 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f, \u0435\u0441\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 4, \u0442\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u043d\u0435 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f.\n\n\u0421\u043e\u0441\u0442\u0430\u0432\u043b\u044e \u0441\u043f\u0438\u0441\u043e\u043a \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 train:\n\n* rating - \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0430\u0441\u044c \u0438\u043b\u0438 \u043d\u0435 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0430\u0441\u044c \u043a\u043d\u0438\u0433\u0430 (1 - \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0430\u0441\u044c, 0 - \u043d\u0435 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0430\u0441\u044c). \n\ntest.csv - \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f. \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u043e\u0431\u043e\u0440\u0430 userid, itemid \u0435\u0441\u0442\u044c \u0441\u0432\u043e\u0439 id, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435:\n\n- overall - \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\n- verified - \u0431\u044b\u043b \u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u0432\u0435\u0440\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\n- reviewTime - \u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b \u043e\u0442\u0437\u044b\u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\n- reviewerName - \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n- reviewText - \u0442\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430\n- summary - \u0441\u0436\u0430\u0442\u044b\u0439 \u043e\u0442\u0437\u044b\u0432\n- vote - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 \u043e\u0442\u0437\u044b\u0432\n- style - \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435\n- image - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\n- userid - id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n- itemid - id \u0442\u043e\u0432\u0430\u0440\u0430\n- id - id \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f","8dc56260":"# EDA","123d5680":"ASIN \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0434\u043b\u044f \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430, \u0432\u044b \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043e\u0442 \u0410\u043c\u0430\u0437\u043e\u043d \u0432\u043c\u0435\u0441\u0442\u043e UPC \u043a\u043e\u0434\u0430. \u041d\u0430\u0437\u043e\u0432\u0443 \u044d\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u043d\u043e \"\u0442\u043e\u0432\u0430\u0440\".","0ca7dc7b":"\u0411\u0430\u0439\u0435\u0441\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 CatBoost \u0441 Hyperopt","e36f1ff0":"\u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u0442\u0435\u0441\u0442\u0435 \u043d\u0435\u0442\u0443 reviewText, summary, \u0442\u043e \u0443\u0434\u0430\u043b\u044e \u0438\u0445 - \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043d\u0435 \u0441\u043c\u043e\u0433\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","5c474b61":"\u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u043b \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 - \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0434\u043b\u044f \u0445\u043e\u043b\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430, \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u0443\u044f\u0441\u044c \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0442\u043e\u0432\u0430\u0440\u0430. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u044f \u0432\u0438\u0436\u0443 \u0442\u0430\u043a. \u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438, \u043b\u0430\u0439\u043a\u0430\u043c\u0438 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430..","55050b37":"### Rating","b4fdb485":"\u0418 \u0441\u0440\u0430\u0437\u0443 \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443 reviewTime_new \u0432 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435","b7e8c9b5":"\u041f\u043b\u043e\u0445\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a item_score. \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f. \u041d\u0430\u0434\u043e \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c.","41870f82":"\u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0438\u0445 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u044b, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0432\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043a \u043d\u0438\u043c one-hot \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043e\u0431\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0432 \u043e\u0434\u043d\u043e, \u0430 \u0442\u0430\u0436\u0435 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.","4b87fbaa":"### reviewText, summary","eaef1764":"\u0414\u043e\u0431\u0430\u0432\u043b\u044e \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0442\u043e\u0432\u0430\u0440\u043e\u0432","790a5092":"\u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0443 \u0432 int \u043f\u0440\u0438\u0437\u043d\u0430\u043a overall.","e404ec94":"# \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 train","de8d9623":"\u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435. \u0421 \u043d\u0430\u0442\u044f\u0436\u043a\u043e\u0439 \u0432\u0440\u043e\u0434\u0435 \u0431\u044b \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e.","2f7ffc8e":"\u0412\u044b\u044f\u0441\u043d\u0438\u043b\u0438, \u0447\u0442\u043e rating - \u044d\u0442\u043e \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u043a\u043d\u0438\u0433\u0430 \u0438\u043b\u0438 \u043d\u0435\u0442. \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0443 \u044d\u0442\u043e \u0432 int.","f7535c2a":"\u0422\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u043e\u0439 style","0a9434be":"\u0423\u0434\u0430\u043b\u044e \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u043e-\u043c\u043e\u0435\u043c\u0443 \u043c\u043d\u0435\u043d\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","2b48fe0b":"### Verified","00690e4f":"\u041f\u0440\u043e\u0432\u0435\u0440\u044e, \u0447\u0442\u043e \u0432\u044b\u0434\u0430\u0435\u0442 unixReviewTime \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0435 \u0435\u0433\u043e \u0432 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.","bb608b6b":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u043a\u043d\u0430","4bcd6546":"\u0427\u0442\u043e \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u0432\u044b\u0448\u0435 - \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043a\u043e\u043b\u043e 1200 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438\u0437 41000 \u0438\u043c\u0435\u044e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0430\u0439\u043a\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 100. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u043e\u0432\u0430\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u043a LongTail... \u0427\u0442\u043e \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0434\u043b\u044f \u043d\u0430\u0441 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435?\n\n\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u0442\u043e \u0434\u043b\u044f \"\u0445\u043e\u043b\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430\".\n\n\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0439\u0442\u0435\u043c\u043e\u0432, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u043d\u0430\u044e\u0442 \u0432\u0441\u0435. \u041d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u0441\u043c\u044b\u0441\u043b\u0430 \u0438\u0445 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u043b\u0438\u0431\u043e \u0443\u0436\u0435 \u0438\u0445 \u0432\u0438\u0434\u0435\u043b \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043e\u0446\u0435\u043d\u043a\u0443, \u043b\u0438\u0431\u043e \u0438 \u0442\u0430\u043a \u043e \u043d\u0438\u0445 \u0437\u043d\u0430\u0435\u0442 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u043b\u0438\u0431\u043e \u0442\u0432\u0435\u0440\u0434\u043e \u0440\u0435\u0448\u0438\u043b \u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0432\u0441\u0435. \u042f \u043d\u0435 \u0440\u0430\u0437 \u0441\u043c\u043e\u0442\u0440\u0435\u043b \u0442\u0440\u0435\u0439\u043b\u0435\u0440 \u00ab\u0421\u043f\u0438\u0441\u043a\u0430 \u0428\u0438\u043d\u0434\u043b\u0435\u0440\u0430\u00bb, \u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u043a \u0438 \u043d\u0435 \u0441\u043e\u0431\u0440\u0430\u043b\u0441\u044f. \u0421 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b, \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043f\u0430\u0434\u0430\u0435\u0442, \u0438 \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0439\u0442\u0435\u043c\u043e\u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0432\u0438\u0434\u0435\u043b. \u0414\u0435\u043b\u0430\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0438\u0437 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u0435\u0439: \u0442\u0430\u043c \u0435\u0441\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0440\u044f\u0434 \u043b\u0438 \u0441\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c.\n\n\u0410 \u0435\u0449\u0435 \u0434\u043b\u044f \"\u0445\u043e\u043b\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430\" \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u0435 \u043a\u0430\u043a-\u0442\u043e \u043e\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a\u0438\u0435 \u0435\u043c\u0443 \u0442\u043e\u0432\u0430\u0440\u044b \u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f (\u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430), \u043a\u0430\u043a \u0434\u0435\u043b\u0430\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 Pinterest (\u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0435, \u0433\u0434\u0435 \u0441\u043e \u0441\u0442\u0430\u0440\u0442\u0430 \u043c\u043d\u0435 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b). \u0418\u043b\u0438 \u0435\u0441\u043b\u0438 \u043c\u044b \u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043f\u0440\u043e \u0442\u043e\u0432\u0430\u0440\u044b, \u0442\u043e \u043c\u043e\u0436\u0435\u043c \u0435\u043c\u0443 \u0441\u043e \u0441\u0442\u0430\u0440\u0442\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c 5 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u043d\u0430\u0448\u0438\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0433\u043e\u043b\u043e\u0441\u043e\u0432), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0433\u043e\u043b\u043e\u0441\u0430\u043c\u0438 - \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0438\u043b\u0438 \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f. \u0418 \u043c\u044b \u0443\u0436\u0435 \u0431\u0443\u0434\u0435\u043c \u0437\u043d\u0430\u0442\u044c, \u0447\u0442\u043e \u0435\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f.","a39be56c":"\u0421\u043e\u0437\u0434\u0430\u043c \u0431\u0430\u0437\u0443 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 (\u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u0438 \u0442\u0440\u0435\u0439\u043d\u0430) - \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u043e\u0437\u044c\u043c\u0443 itemid \u0438 asin, \u0430 \u043f\u043e\u0442\u043e\u043c \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u044e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u043f\u043e \u0438\u0434\u0435\u0435 \u043d\u0435 \u0432\u0430\u0436\u043d\u043e \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443, \u044d\u0442\u043e \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435, \u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c).\n\n\u0414\u043b\u044f \u0431\u0443\u0434\u0443\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0441\u0442\u0435\u0439 \u0435\u0449\u0435 \u0441\u0434\u0435\u043b\u0430\u044e \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 - \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438. \u0411\u0443\u0434\u0443 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f  \u043d\u0430 1 \u0438\u043b\u0438 0 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 0 - \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u0415\u0441\u043b\u0438 1 - \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f.","de5a02a5":"\u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043d\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 overall, \u0443\u0434\u0430\u043b\u044e \u0435\u0435 \u0438 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435","352da282":"### unixReviewTime, reviewTime","386b4f60":"\u041d\u0430\u043c \u043f\u043e \u0445\u043e\u0434\u0443 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a itemid, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 asin. \u0410 \u0437\u0430\u0447\u0435\u043c userid? \u0422\u043e\u0436\u0435 \u0432\u0440\u043e\u0434\u0435 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d","d9fe893c":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u043e\u0432\u0430\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 reviewTime, \u043d\u043e \u0443\u0436\u0435 \u0432 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435. \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0442\u0435\u043f\u0435\u0440\u044c reviewTime \u043c\u043e\u0436\u043d\u043e \u0441\u043c\u0435\u043b\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c.","0f21294c":"\u041f\u0440\u0438\u043c\u0435\u043d\u044e \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0434\u0435\u043b\u044c CatBoost Regressor","8cea0f42":"# NN_collab_filter","3d3f8b55":"# Predict Upper","ec936dfb":"\u0414\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043e\u043d \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0430\u043c \u043d\u0435 \u0434\u0430\u0435\u0442.","d0162119":"\u0427\u0442\u043e \u044d\u0442\u043e \u0437\u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b - True \u0438\u043b\u0438 False. \u0415\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0440\u0435\u0447\u044c \u0438\u0434\u0435\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u0442\u0437\u044b\u0432 \u0431\u044b\u043b \u0437\u0430\u0430\u043f\u0440\u0443\u0432\u043b\u0435\u043d (\u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d \u043d\u0430 \u0441\u0430\u0439\u0442\u0435) \u0438\u043b\u0438 \u043d\u0435\u0442.","45903d8b":"\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0442\u043e\u0432\u0430\u0440\u044b, \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u0432 \u0442\u0435\u0441\u0442\u0435 \u043d\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f 60 \u0442\u043e\u0432\u0430\u0440\u043e\u0432. \u041d\u0430 \u0444\u043e\u043d\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u0442\u043e \u043c\u0438\u0437\u0435\u0440. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044e \u0441\u044e\u0434\u0430 \u0441\u0440\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u0435 \u0438 \u0432\u0441\u0435.","1bb9ae0b":"\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u0443\u0434\u0430\u043b\u044e \u0435\u0449\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c.","fddbd995":"\u041d\u0443 \u0447\u0442\u043e \u0436\u0435, \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0434\u0435\u043b\u0430\u043b. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e LightFM - \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u043e\u0439 \u0431\u0435\u0439\u0441\u043b\u0430\u0439\u043d.","dbcf7876":"# \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 test","8d999a24":"\u0414\u043e\u0431\u0430\u0432\u043b\u044e \u0442\u0430\u043a\u0436\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0442\u043e\u0432\u0430\u0440\u0430"}}