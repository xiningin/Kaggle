{"cell_type":{"8b8d31e7":"code","fb78ebcc":"code","05f84156":"code","d502fd95":"code","2a5ebfea":"code","89a6a39e":"code","ca1a9ce4":"code","2e258b87":"code","97220576":"code","5ad94edd":"code","9436d474":"code","86e763d7":"code","d7f73fbb":"code","18616d3b":"code","d21f7956":"code","c8615f65":"code","6cd11dc2":"code","1f0b22db":"code","2fdbf01d":"code","28073b2c":"code","78d18095":"code","8f64a9b5":"code","67307921":"code","24d8168a":"code","193f9124":"code","010f2932":"code","d77044ab":"code","e3185338":"code","b80b1f82":"markdown","23ca57a8":"markdown","739454ca":"markdown","91a486d5":"markdown","c992aa14":"markdown"},"source":{"8b8d31e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fb78ebcc":"import pandas as pd\nyelp=pd.read_csv(\"..\/input\/yelp.csv\")\nyelp","05f84156":"stars=yelp[\"stars\"]\ntexts=yelp[\"text\"]\ntexts","d502fd95":"scoredata=stars.map({0: 0, 1:0,2:0,3:1,4:1,5:1}) \nscoredata","2a5ebfea":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer=TfidfVectorizer()","89a6a39e":"textvector=vectorizer.fit_transform(texts)\ntextvector","ca1a9ce4":"import math\nk=math.sqrt(len(texts))*0.5 #Rule of thumb for k-nearast-neighbour algorithm\nk=round(k)\nk ","2e258b87":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=k)","97220576":"from sklearn.model_selection import train_test_split\nx_train, x_test,y_train,y_test = train_test_split(textvector,scoredata,test_size=0.20, random_state=0)","5ad94edd":"knn.fit(x_train,y_train)\nypred=knn.predict(x_test)\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,ypred)\ncm","9436d474":"from sklearn.feature_extraction.text import CountVectorizer\ncovectorize=CountVectorizer()\ncountvector=covectorize.fit_transform(texts)\ncountvector","86e763d7":"x_train, x_test,y_train,y_test = train_test_split(countvector,scoredata,test_size=0.20, random_state=0)\nknn2=KNeighborsClassifier(n_neighbors=k)\nknn2.fit(x_train,y_train)\nypred=knn2.predict(x_test)\ncm2=confusion_matrix(y_test,ypred)\ncm2","d7f73fbb":"import re","18616d3b":"text2=[]\nfor tex in texts:\n    tek=re.sub(\"[^a-zA-Z]\",\" \",tex)\n    text2.append(tek)\ntext2[4]    ","d21f7956":"text2[0]","c8615f65":"print(\"Hello world\")","6cd11dc2":"text3=[]\nfor tex in text2:\n    tex=tex.lower()\n    text3.append(tex)\ntext3[0]    ","1f0b22db":"vectorizer=TfidfVectorizer()\ntextvector=vectorizer.fit_transform(text3)","2fdbf01d":"textvector","28073b2c":"x_train, x_test,y_train,y_test = train_test_split(textvector,scoredata,test_size=0.20, random_state=0)\nknn3=KNeighborsClassifier(n_neighbors=k)\nknn3.fit(x_train,y_train)\nypred=knn3.predict(x_test)\ncm3=confusion_matrix(y_test,ypred)\ncm3","78d18095":"cm2","8f64a9b5":"cm","67307921":"text3[4]","24d8168a":"from nltk.stem.porter import *\nfrom nltk.corpus import stopwords\nderlem=[]\nps=PorterStemmer()\nfor yorum in text3:\n    yorum= yorum.split()\n    yorlist=[ps.stem(kelime) for kelime in yorum if not kelime in stopwords.words('english')]\n    yorumson=' '.join(yorlist)\n    derlem.append(yorumson)\n    len(derlem)\n    #if not kelime in set(stopwords.words('english')","193f9124":"len(derlem)","010f2932":"derlem[4]","d77044ab":"textvectorwithfull=vectorizer.fit_transform(derlem) #All Preporecessing is done\ntextvectorwithfull","e3185338":"x_train, x_test,y_train,y_test = train_test_split(textvectorwithfull,scoredata,test_size=0.20, random_state=0)\nknn4=KNeighborsClassifier(n_neighbors=k)\nknn4.fit(x_train,y_train)\nypred=knn4.predict(x_test)\ncm4=confusion_matrix(y_test,ypred)\ncm4","b80b1f82":"**TF \u0130df Vectorizer work fine with these situation**","23ca57a8":"***ALSO THESE DATASET \u0130S TOO SMALL TO MAKE SER\u0130OUS PRED\u0130CT\u0130ON***","739454ca":"**Work but can't work very well in 0,0 situation.**","91a486d5":"**Not worth it. Stopwords deletion is may goes %100 accuracy**","c992aa14":"**Can't work well. Stem stopwords vs can't work improve performance dramaticly**"}}