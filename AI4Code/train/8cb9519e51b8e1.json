{"cell_type":{"4dc2d9cb":"code","d5f559ee":"code","3db375d1":"code","96365fbc":"code","19e93640":"code","79c751ad":"code","43d415d9":"code","2d27b6da":"code","7a4f09e2":"code","4aa8ccc9":"code","84294e1d":"code","b53c0e19":"code","d40430fc":"code","3a1d277e":"code","ea398112":"code","65329366":"code","020db331":"code","ffa7c2bb":"code","240c3695":"code","70da6e4c":"code","20262edf":"code","0c230d5d":"code","a381831e":"code","bdce9eb4":"code","1649dcdd":"markdown","61290484":"markdown","7092f5e6":"markdown","fd97c409":"markdown","a778c53a":"markdown"},"source":{"4dc2d9cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5f559ee":"test=pd.read_csv(\"\/kaggle\/input\/janatahack-crosssell-prediction\/test.csv\")\ntrain=pd.read_csv(\"\/kaggle\/input\/janatahack-crosssell-prediction\/train.csv\")\nprint(train.shape)\nprint(test.shape)\ndata=pd.concat([train,test],axis=0)\ndata.drop(\"Response\",axis=1,inplace=True)\ntrain.head()\nprint(data.shape)","3db375d1":"data.isnull().sum()","96365fbc":"data.head()","19e93640":"from sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()\ndata.Gender=encoder.fit_transform(data.Gender)\ndata.Vehicle_Damage=encoder.fit_transform(data.Vehicle_Damage)\ndata.head()","79c751ad":"data[\"Vehicle_Age\"].unique()","43d415d9":"vehicle_age={\"< 1 Year\": 0,'1-2 Year':1,'> 2 Years':2}\ndata[\"Vehicle_Age\"]=data[\"Vehicle_Age\"].replace(vehicle_age)\ndata[\"Vehicle_Age\"].unique()","2d27b6da":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","7a4f09e2":"cor=data.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(cor,annot=True)\n","4aa8ccc9":"column=data.columns\nfrom sklearn.preprocessing import MinMaxScaler\nscale=MinMaxScaler()\nsdata=scale.fit_transform(data)\nData=pd.DataFrame(sdata,columns=column)\nData.head()","84294e1d":"Train=Data.iloc[:381109,:]\nTest=Data.iloc[381109: ,:]\nTrain[\"Response\"]=train[\"Response\"]\ntrain[\"Response\"].value_counts()","b53c0e19":"cor_re=Train.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(cor_re,annot=True)","d40430fc":"y=Train.Response\n# mod_=data.drop(columns=[\"Response\"],axis=1,inplace=False)\n# total_data=pd.concat([mod_train ,Test])\ndata=data.drop(columns=[\"Age\",\"Vehicle_Damage\",\"id\"],axis=1,inplace=False)\n","3a1d277e":"Mod_train=data.iloc[:381109,:]\nMod_test=data.iloc[381109:,:]","ea398112":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(Mod_train,y,test_size=0.2,random_state=1)\nfrom sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()\nmodel.fit(x_train,y_train)","65329366":"y_pred=model.predict(x_test)","020db331":"from sklearn.metrics import roc_auc_score,classification_report\nprint(roc_auc_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","ffa7c2bb":"Mod_train[\"Response\"]=train[\"Response\"]\nfrom sklearn.utils import resample\nmin_data=Mod_train[Mod_train[\"Response\"]==1]\nmaj_data=Mod_train[Mod_train[\"Response\"]==0]\nmod_min_data=resample(min_data,n_samples=334399,replace=True)\nmod_data=pd.concat([maj_data,mod_min_data])\nmod_data.shape","240c3695":"Y=mod_data.Response\nX=mod_data.drop(\"Response\",axis=1)","70da6e4c":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=1)\nfrom sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()\nmodel.fit(X_train,Y_train)\nY_pred=model.predict(X_test)","20262edf":"print(roc_auc_score(Y_test,Y_pred))\nprint(classification_report(Y_test,Y_pred))","0c230d5d":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(model,X,Y,cv=10,scoring=\"roc_auc\")\nprint(score.mean())\n\n","a381831e":"predictions=model.predict(Mod_test)\nresult=pd.DataFrame(test[\"id\"],columns=[\"id\",\"Response\"])\nresult[\"Response\"]=predictions\nresult.to_csv(\"sub.csv\",index=0)\n","bdce9eb4":"from sklearn.metrics import SCORERS\nprint(SCORERS.keys())","1649dcdd":"converting vehicle age into numerical data","61290484":"Balancing both 1 and 0 classes","7092f5e6":"Readig the info abot the data","fd97c409":"age & vehicle_age and vehicle_damage & previously_insured are highly correlated pairs so removing age and vehicle_damage columns","a778c53a":"Normalising the data"}}