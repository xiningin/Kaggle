{"cell_type":{"a75bd47a":"code","efdc841c":"code","38eda3a8":"code","c9159a46":"code","8b60585f":"code","89efcc03":"code","eaeb0265":"code","cea7b7e6":"code","40bd51a5":"code","98852ed2":"code","52106ef9":"code","02447925":"code","83e1b078":"code","2ac2477a":"code","d019a8b4":"code","845c8312":"code","8d8d0402":"code","9b5b0e2d":"code","c53f1aa3":"code","954c0f85":"code","bed4cdcd":"code","d9d82a86":"code","f31eee89":"code","6564ba30":"code","1c74eab7":"code","c39de85b":"code","54d986a2":"code","06542b19":"code","d8cd3624":"code","48e3e906":"code","02ce2069":"code","9726ecab":"code","fd98111c":"code","4b8beb53":"markdown","97df8d38":"markdown","7f49f93e":"markdown","cf0dfd42":"markdown","ee62c3af":"markdown","1cc32fca":"markdown","0efed167":"markdown","69a7f0bd":"markdown","c24e53ff":"markdown","48d9e722":"markdown","6d3ab0f5":"markdown","965d6343":"markdown","7a50078f":"markdown","c56a4b46":"markdown","677d349a":"markdown","82a15bdb":"markdown","995e2d78":"markdown","1b90e8e8":"markdown","c7529a3f":"markdown","5c214f90":"markdown","06150aa3":"markdown","cda260e8":"markdown","1d211a8e":"markdown","2f3d2239":"markdown","417436f2":"markdown","269c2b81":"markdown","f0e73e03":"markdown","d4e8cf0f":"markdown","178e95a5":"markdown","f34e9dca":"markdown"},"source":{"a75bd47a":"import numpy as np\nimport pandas as pd","efdc841c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","38eda3a8":"df = pd.read_csv('..\/input\/montcoalert\/911.csv')","c9159a46":"df.info()","8b60585f":"df.head(3)","89efcc03":"df['zip'].value_counts().head(5)","eaeb0265":"df['twp'].value_counts().head(5)","cea7b7e6":"df['title'].nunique()","40bd51a5":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","98852ed2":"df['Reason'].value_counts()","52106ef9":"sns.countplot(x='Reason',data=df,palette='viridis')","02447925":"type(df['timeStamp'].iloc[0])","83e1b078":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","2ac2477a":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","d019a8b4":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","845c8312":"df['Day of Week'] = df['Day of Week'].map(dmap)","8d8d0402":"sns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","9b5b0e2d":"sns.countplot(x='Month',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","c53f1aa3":"# It is missing some months! 9,10, and 11 are not there.","954c0f85":"byMonth = df.groupby('Month').count()\nbyMonth.head()","bed4cdcd":"# Could be any column\nbyMonth['twp'].plot()","d9d82a86":"sns.lmplot(x='Month',y='twp',data=byMonth.reset_index())","f31eee89":"df['Date']=df['timeStamp'].apply(lambda t: t.date())","6564ba30":"df.groupby('Date').count()['twp'].plot()\nplt.tight_layout()","1c74eab7":"df[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()","c39de85b":"df[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()","54d986a2":"df[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()","06542b19":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.head()","d8cd3624":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')","48e3e906":"sns.clustermap(dayHour,cmap='viridis')","02ce2069":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()","9726ecab":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='viridis')","fd98111c":"sns.clustermap(dayMonth,cmap='viridis')","4b8beb53":"**Take a look at the 'title' column, how many unique title codes are there?**","97df8d38":"**Read in the csv file as a dataframe called df**","7f49f93e":" **Import visualization libraries and set %matplotlib inline.**","cf0dfd42":"\nFor this capstone project we will be analyzing some 911 call data from Kaggle.\n\n# The data contains the following fields:\n\n**lat** : String variable, Latitude\n\n**lng:** String variable, Longitude\n\n**desc:** String variable, Description of the Emergency Call\n\n**zip:** String variable, Zipcode\n\n**title:** String variable, Title\n\n**timeStamp:** String variable, YYYY-MM-DD HH:MM:SS\n\n**twp:** String variable, Township\n\n**addr:** String variable, Address\n\n**e:** String variable, Dummy variable (always 1)\n\nJust go along with this notebook and try to complete the instructions or answer the questions in bold using your Python and Data Science skills!\n\n# Data and Setup\n","ee62c3af":"Now groupby this Date column with the count() aggregate and create a plot of counts of 911 calls","1cc32fca":"You can now grab specific attributes from a Datetime object by calling them. For example:\ntime = df['timeStamp'].iloc[0]\n\ntime.hour\n\nYou can use Jupyter's tab method to explore the various attributes you can call.\n\nNow that the timestamp column are actually DateTime objects, use .apply() to create 3 new columns called Hour, Month, and Day of Week.\n\nYou will create these columns based off of the timeStamp column, reference the solutions if you get stuck on this step.","0efed167":"Create a new column called 'Date' that contains the date from the timeStamp column. You'll need to use apply along with the .date() method. ","69a7f0bd":"**Now create a clustermap using this DataFrame.**","c24e53ff":" **Check the head of df**","48d9e722":"# Creating new features\n\n In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.\n \nFor example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS.","6d3ab0f5":"**Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week:**\n\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","965d6343":"Now repeat these same plots and operations, for a DataFrame that shows the Month as the column.","7a50078f":"#  Import numpy and pandas","c56a4b46":"Now see if you can use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column","677d349a":" Now use seaborn to create a countplot of 911 calls by Reason. ","82a15bdb":"Now create a simple plot off of the dataframe indicating the count of calls per month.","995e2d78":"*  You should have noticed it was missing some Months, let's see if we can maybe fill in this information by plotting the information in another way, possibly a simple line plot that fills in the missing months, in order to do this, we'll need to do some work with pandas...\n\n*  Now create a gropuby object called byMonth, where you group the DataFrame by the month column and use the count() method for aggregation. Use the head() method on this returned DataFrame.","1b90e8e8":"**Now do the same for Month:**","c7529a3f":" **What are the top 5 townships (twp) for 911 calls?**","5c214f90":"Now recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call","06150aa3":"**Now use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column.**","cda260e8":" **You should have seen that these timestamps are still strings. Use pd.to_datetime to convert the column from strings to DateTime objects.**","1d211a8e":"**Now let us begin to focus on time information. What is the data type of the objects in the timeStamp column?**","2f3d2239":"**Now create a HeatMap using this new DataFrame.**","417436f2":"Now let's move on to creating heatmaps with seaborn and our data. We'll first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. \n\nThere are lots of ways to do this, but I would recommend trying to combine groupby with an unstack method. Reference the solutions if you get stuck on this!","269c2b81":"# Basic Questions","f0e73e03":"**Did you notice something strange about the Plot?** ","d4e8cf0f":"**Check the info() of the df**","178e95a5":"**What are the top 5 zipcodes for 911 calls?**","f34e9dca":"**What is the most common Reason for a 911 call based off of this new column?**"}}