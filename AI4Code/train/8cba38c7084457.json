{"cell_type":{"aba17ce1":"code","98648ba5":"code","c8e49d78":"code","ed69d5c2":"code","33d1bdc2":"code","4cd3d929":"code","1234d8b9":"code","38a8f839":"code","acc3538e":"code","61dd68a3":"code","29fc8b76":"code","0e663164":"code","88961af3":"code","ec1200e8":"code","bd8abe21":"code","9ce71122":"code","09e472af":"code","63033749":"code","f0dc2d39":"code","19e015f2":"code","2fef297a":"code","77011ad8":"code","eec60419":"code","25958633":"code","6c87cbdc":"code","ec6b62de":"code","60f2c311":"code","f7aeddc2":"code","a5c3b25f":"code","10787c87":"code","0652b0f7":"code","847cf8b1":"markdown","a6e00b35":"markdown","4aff4b8b":"markdown","3d457a63":"markdown","d2c9dfcc":"markdown"},"source":{"aba17ce1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport os \nimport glob as gb\nimport cv2\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98648ba5":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport tensorflow as tf\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')","c8e49d78":"tf.__version__","ed69d5c2":"train_data = pd.read_csv('..\/input\/nicht-mnist\/train.csv',header=None, index_col=0)\ntrain_data","33d1bdc2":"test_data = pd.read_csv('..\/input\/nicht-mnist\/test.csv',header=None, index_col=0)\ntest_data","4cd3d929":"train_data[1] = pd.Categorical(train_data[1])\ntrain_data[1] = train_data[1].cat.codes\ntrain_data[1]","1234d8b9":"df_test = train_data.sample(frac=0.3, random_state=7)\ndf_train = train_data.drop(df_test.index)","38a8f839":"y_train = df_train.iloc[:,0]\nx_train = df_train.iloc[:,1:]\ny_val = df_train.iloc[:,0]\nx_val = df_train.iloc[:,1:]","acc3538e":"x_train","61dd68a3":"y_train.value_counts()","29fc8b76":"g = sns.countplot(y_train)","0e663164":"train_data.isnull().any().sum(), test_data.isnull().any().sum()","88961af3":"len(y_train.value_counts())","ec1200e8":"x_train = x_train \/ 255.0 \nx_val = x_val \/ 255.0 ","bd8abe21":"x_train_np = np.vstack([[np.array(r).astype('uint8').reshape(28,28, 1) for i, r in x_train.iterrows()] ] )\nx_val_np = np.vstack([[np.array(r).astype('uint8').reshape(28,28, 1) for i, r in x_val.iterrows()] ] )","9ce71122":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","09e472af":"model.build()\nmodel.summary()","63033749":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","f0dc2d39":"model.compile(optimizer = optimizer , loss = \"SparseCategoricalCrossentropy\", metrics=[\"accuracy\"])","19e015f2":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","2fef297a":"epochs = 60\nbatch_size = 100","77011ad8":"datagen = ImageDataGenerator(\n        rotation_range=9,\n        zoom_range = 0.1,\n        width_shift_range=0.1,\n        height_shift_range=0.1)\n\n\ndatagen.fit(x_train_np)","eec60419":"history = model.fit_generator(datagen.flow(x_train_np,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_val_np,y_val),\n                              verbose = 2, steps_per_epoch=x_train_np.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","25958633":"model.evaluate(x_val_np,  y_val, verbose=2)","6c87cbdc":"test_data = test_data \/ 255.0\ntest_data","ec6b62de":"x_test_np = np.vstack([[np.array(r).astype('uint8').reshape(28,28, 1) for i, r in test_data.iterrows()] ] )","60f2c311":"model.predict(x_test_np)","f7aeddc2":"preds = np.argmax(model.predict(x_test_np), axis=1).tolist()","a5c3b25f":"class_labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\npred_labes = pd.Series([class_labels[p] for p in preds])\npred_labes","10787c87":"out_df = pd.DataFrame({\n    'Id': test_data.index,\n    'target': pred_labes\n})\nout_df","0652b0f7":"out_df.to_csv('my_submission.csv', index=False)","847cf8b1":"# Reshaping.","a6e00b35":"# Normalization.","4aff4b8b":"# Load data.","3d457a63":"# Check for null and missing values.","d2c9dfcc":"# import deep learning & machine learning libraries."}}