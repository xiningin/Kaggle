{"cell_type":{"aa291b2e":"code","668f989f":"code","243fdcf4":"code","2e3be998":"code","cf723415":"code","cf1a1863":"code","9fae3c76":"code","b79f37b4":"code","0934332b":"code","c29aaef7":"code","1d9736a6":"code","7cabcebd":"code","cb94f40b":"code","bee4a71b":"code","83333a5e":"code","260ef5db":"code","07017f4c":"code","b70826a7":"code","579d3820":"code","3a6ecdb5":"code","c012a5dc":"code","100aa1e3":"code","fbc3ce60":"code","ee36dd70":"code","277337c8":"code","91d2062b":"markdown","8b07d1e5":"markdown","8ca45e88":"markdown","f3366016":"markdown","73fdf246":"markdown","e6cbcc4e":"markdown","fe9ae7bf":"markdown","c2099391":"markdown","9ed02a91":"markdown"},"source":{"aa291b2e":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\nfrom datetime import datetime\n\nfrom matplotlib import rc,rcParams\n\nrc('text', usetex=False)\nrc('axes', linewidth=2)\nrc('font', weight='bold')\n\nimport json\nimport pickle\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom pandas.plotting import lag_plot\nfrom pandas import datetime\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.stats import norm\nimport statsmodels.api as sm","668f989f":"from sklearn.preprocessing import MinMaxScaler\nfrom tensorflow import keras\nfrom tensorflow.keras import backend as k","243fdcf4":"file = '..\/input\/nifty-filtered\/data_filtered.pkl'\nwith open(file, 'rb') as handle:\n    data_dict = pickle.load(handle)","2e3be998":"data_dict.keys()","cf723415":"stocks_under_cosideration = ['BAJAJHLDNG', 'CHOLAFIN']","cf1a1863":"data_filtered = {}\nfor stocks in stocks_under_cosideration:\n    data_filtered[stocks] = data_dict[stocks]","9fae3c76":"period_start = '2009-01-06'\nperiod_end = '2017-12-31'\nfinal_data = {}\nplt.figure(figsize=(15, 10))\n#plt.subplots_adjust(top=14, bottom=13) \nfor i, company in enumerate(data_filtered.keys(), 1):\n    plt.subplot(2,1, i)\n    plt.tight_layout()\n    data_filtered[company]['nse_closing_price'].loc[period_start:period_end].plot()\n    final_data[company] = data_filtered[company].loc[period_start:period_end]\n    plt.ylabel('Closing price')\n    plt.xlabel(None)\n    plt.xticks(rotation = '45')\n    plt.title(f\"{company}\")\nplt.show()","b79f37b4":"tensor_length = 5\n\nbajaj_df = final_data['BAJAJHLDNG']['nse_closing_price']\nscalar = MinMaxScaler()\nbajaj = scalar.fit_transform(bajaj_df.values.reshape(-1,1))\ntrain_ratio = 0.9\nbajaj_train= bajaj[0:int(len(bajaj)*train_ratio)]\nbajaj_test = bajaj[int(len(bajaj)*train_ratio) - tensor_length:]","0934332b":"train_data = bajaj_train\ntest_data = bajaj_test\n#train_data = scaler_train.fit_transform(train_data)\n#test_data = scaler_test.fit_transform(test_data)","c29aaef7":"print('# training data - ', len(train_data))\nprint('# test data - ', len(test_data))","1d9736a6":"x_train = []\ny_train = []\n\nfor i in range(tensor_length, len(train_data)):\n    x_train.append(train_data[i-tensor_length:i, 0])\n    y_train.append(train_data[i, 0])\nx_train, y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n\nx_test = []\ny_test = []\n# y_test = bajaj[int(len(bajaj)*train_ratio):]['nse_closing_price'].values\nfor i in range(tensor_length, len(test_data)):\n    x_test.append(test_data[i-tensor_length:i, 0])\n    y_test.append(test_data[i])\nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))","7cabcebd":"print('train shape - ', x_train.shape)\nprint('test shape - ', x_test.shape)","cb94f40b":"input_layer = keras.layers.Input(shape = (tensor_length, 1), batch_size=1)\n#batch_norm = keras.layers.BatchNormalization()(input_layer)\nlstm_1 = keras.layers.LSTM(units=16,\n                          return_sequences=True,\n                          )(input_layer)\nlstm_2 = keras.layers.LSTM(units=8,\n                          return_sequences=False,\n                          )(lstm_1)\ndense_1 = keras.layers.Dense(units=4)(lstm_2)\noutput = keras.layers.Dense(units=1)(dense_1)\nbajaj_model = keras.Model(input_layer, output, name = 'LSTM_model')\nbajaj_model.summary()","bee4a71b":"bajaj_predictions = list()\nbajaj_model.compile(loss=keras.losses.MeanSquaredError(), optimizer = keras.optimizers.Adam(lr = 0.0003))\n\nfor i in range(len(x_test[:50])-1):\n    bajaj_model.fit(x_train, y_train, batch_size=1,epochs =1)\n    #print(x_test.shape)\n    #print(y_train.shape)\n    output = bajaj_model.predict(x_test[i].reshape(1,-1,1))\n    yhat = output[0]\n    bajaj_predictions.append(yhat)\n    obs_x = np.expand_dims(x_test[i], axis = 0)\n    obs_y = y_test[i]\n    x_train = np.append(x_train, obs_x, axis = 0)\n    y_train = np.append(y_train, obs_y)\n    print(yhat-obs_y)","83333a5e":"bajaj_predictions = np.squeeze(scalar.inverse_transform(bajaj_predictions))  # uncomment this line after training the model\nplt.title('First 50 day forecast for BAJAJHLDNG')\nplt.plot(bajaj_predictions, color = 'r', label = 'Predicted Value')\nplt.plot(np.squeeze(scalar.inverse_transform(y_test))[:50], label = 'True Value')\nplt.xticks(np.arange(0,len(bajaj_df.iloc[int(len(bajaj_df)*train_ratio):int(len(bajaj_df)*train_ratio) + 50]), 20), rotation = 45)\nplt.ylabel('Closing Price')\nplt.legend()\nplt.show()","260ef5db":"mse = np.mean((bajaj_predictions - np.squeeze(scalar.inverse_transform(y_test))[:49])**2)\nprint('Mean Squared Error - ', mse)","07017f4c":"tensor_length = 5\n\nchola_df = final_data['CHOLAFIN']['nse_closing_price']\nscalar = MinMaxScaler()\nchola = scalar.fit_transform(chola_df.values.reshape(-1,1))\ntrain_ratio = 0.9\nchola_train= chola[0:int(len(chola)*train_ratio)]\nchola_test = chola[int(len(chola)*train_ratio) - tensor_length:]","b70826a7":"train_data = bajaj_train\ntest_data = bajaj_test\n\nprint('# training data - ', len(train_data))\nprint('# test data - ', len(test_data))","579d3820":"x_train = []\ny_train = []\n\nfor i in range(tensor_length, len(train_data)):\n    x_train.append(train_data[i-tensor_length:i, 0])\n    y_train.append(train_data[i, 0])\nx_train, y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n\nx_test = []\ny_test = []\n# y_test = bajaj[int(len(bajaj)*train_ratio):]['nse_closing_price'].values\nfor i in range(tensor_length, len(test_data)):\n    x_test.append(test_data[i-tensor_length:i, 0])\n    y_test.append(test_data[i])\nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))","3a6ecdb5":"print('train shape - ', x_train.shape)\nprint('test shape - ', x_test.shape)","c012a5dc":"input_layer = keras.layers.Input(shape = (tensor_length, 1), batch_size=1)\n#batch_norm = keras.layers.BatchNormalization()(input_layer)\nlstm_1 = keras.layers.LSTM(units=16,\n                          return_sequences=True,\n                          )(input_layer)\nlstm_2 = keras.layers.LSTM(units=8,\n                          return_sequences=False,\n                          )(lstm_1)\ndense_1 = keras.layers.Dense(units=4)(lstm_2)\noutput = keras.layers.Dense(units=1)(dense_1)\nchola_model = keras.Model(input_layer, output, name = 'LSTM_model')\nchola_model.summary()","100aa1e3":"chola_predictions = list()\nchola_model.compile(loss=keras.losses.MeanSquaredError(), optimizer = keras.optimizers.Adam(lr = 0.0003))\n\nfor i in range(len(x_test[:50])-1):\n    chola_model.fit(x_train, y_train, batch_size=1,epochs =1)\n    #print(x_test.shape)\n    #print(y_train.shape)\n    output = chola_model.predict(x_test[i].reshape(1,-1,1))\n    yhat = output[0]\n    chola_predictions.append(yhat)\n    obs_x = np.expand_dims(x_test[i], axis = 0)\n    obs_y = y_test[i]\n    x_train = np.append(x_train, obs_x, axis = 0)\n    y_train = np.append(y_train, obs_y)\n    print(yhat-obs_y)","fbc3ce60":"chola_predictions = np.squeeze(scalar.inverse_transform(chola_predictions))  # uncomment this line after training the model","ee36dd70":"plt.title('First 50 day forecast for CHOLAFIN')\nplt.plot(chola_predictions, color = 'r', label = 'Predicted Value')\nplt.plot(np.squeeze(scalar.inverse_transform(y_test))[:50], label = 'True Value')\nplt.xticks(np.arange(0,len(chola_df.iloc[int(len(chola_df)*train_ratio):int(len(chola_df)*train_ratio) + 50]), 20), rotation = 45)\nplt.ylabel('Closing Price')\nplt.legend()\nplt.show()","277337c8":"mse = np.mean((chola_predictions - np.squeeze(scalar.inverse_transform(y_test))[:49])**2)\nprint('Mean Squared Error - ', mse)","91d2062b":"### BAJAJHLDNG","8b07d1e5":"## LSTM model for time series forecasting","8ca45e88":"This is the thrid notebook in the Nifty Financial Index Analysis. Till Now we have done the following\n- Extensively performed EDA on Nifty Financial Servics Index - https:\/\/www.kaggle.com\/ashishsinha5\/eda-of-nifty-financial-services-indices\n- Made ARIMA model with rolling on various stocks in the index - https:\/\/www.kaggle.com\/ashishsinha5\/time-series-model-for-nifty-indices\n\nWe now look towards more sofisticated LSTM methodology using rolling technique (see ARIMA notebook) and compare the results with the ARIMA model.\n\nEntire Codebase with data preparation available at my [github](http:\/\/https:\/\/github.com\/AshishSinha5\/nifty_financial_services_eda) repository.","f3366016":"### CHOLAFIN","73fdf246":"We will create tensors for training data as follows","e6cbcc4e":"### We see a significant improvement in MSE for LSTM model than ARIMA model <br>\n#### More sophisticated ML models can be made using alternative data e.g. news data, etc. along with the closing price data.","fe9ae7bf":"|Stock | MSE for ARIMA on test set | MSE for LSTM on test set |\n| --- | --- | --- |\n| BAJAJHLDING | 1236.905 | 918.537 |\n| CHOLAFIN | 377.405 |  240.762 |","c2099391":"## Model Architecture\n\n![lstm_model.png](attachment:lstm_model.png)","9ed02a91":"\n![lstm_target_independence.png](attachment:lstm_target_independence.png)"}}