{"cell_type":{"fe081ce5":"code","742cec38":"code","ef49e7a5":"code","c2b4fb98":"code","5eff2f46":"code","2499e2c0":"code","0c74b585":"code","1b9f454c":"code","4d0172c3":"code","7d7fbc5e":"code","fddf9740":"code","46ef2a41":"code","2097ca65":"code","88905aaa":"code","1b32a217":"code","6a85395e":"code","a4661635":"code","32853b68":"code","9e53b22f":"code","d09ba37f":"code","319cf68c":"code","39790a12":"code","2f978461":"code","ec6121c5":"code","5bae182b":"code","78ecdb55":"code","e428ee88":"code","727dbf94":"code","f11c5679":"code","696637ac":"code","1e37c8c1":"code","1b54984b":"code","80de264e":"code","fdf74cae":"code","376b3e2f":"code","69e54324":"code","ae73bc1d":"code","315a0719":"code","186c28f5":"code","0f47e9d9":"code","50950ab3":"code","659c31cf":"code","4b6f941c":"code","f630c8d8":"code","793d0852":"code","7db7ef28":"code","7aa8c595":"code","e937ee66":"code","df0291b8":"code","e43253a8":"code","428ac3bf":"code","05e5fbfe":"code","2148ef78":"code","04e3734c":"code","19d7795e":"code","b4f71129":"code","3b5803c6":"code","51cd059e":"code","b828dd46":"code","315b3bde":"code","50df19b9":"code","5d8bd78b":"code","2ff24c64":"code","3e79a557":"code","a2f59fd8":"code","41cdfb54":"code","807e65d7":"code","b270798b":"code","ef166ca6":"code","ce2f8a2c":"code","b16bf7cf":"code","66d933d3":"code","cf53509d":"code","0d794d19":"code","e5e7e9bf":"markdown","16d05547":"markdown","c2614909":"markdown","07e218a2":"markdown","fc6f4d1c":"markdown","b2f99b26":"markdown","7c1f9397":"markdown","1763d82f":"markdown","b1f0b305":"markdown","c2f4dc3a":"markdown","4b58ab62":"markdown","f365c56c":"markdown","b0116c20":"markdown","b1889a20":"markdown","740c9f1a":"markdown"},"source":{"fe081ce5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix,classification_report,roc_curve,accuracy_score,auc\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom keras.utils import np_utils\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Activation, Conv2D,MaxPooling2D, Flatten\ndf = pd.read_csv(\"..\/input\/pima-diabetes-dataset\/Diabetes.csv\")","742cec38":"title_mapping = {'YES':1,'NO':0}\ndf[' Class variable']=df[' Class variable'].map(title_mapping)","ef49e7a5":"z=(df == 0).sum(axis=0)\nz=pd.DataFrame(z)\nz.columns=['Zeros Count']\nz.drop(' Class variable',inplace=True)\nz.plot(kind='bar',stacked=True, figsize=(10,5),grid=True)","c2b4fb98":"col=['n_pregnant','glucose_conc','bp','skin_len','insulin','bmi','pedigree_fun','age','Output']\ndf.columns=col\ndf.head()","5eff2f46":"diabetes_true_count = len(df.loc[df['Output'] == True])\ndiabetes_false_count = len(df.loc[df['Output'] == False])\n(diabetes_true_count,diabetes_false_count)","2499e2c0":"col=['glucose_conc','bp','insulin','bmi','skin_len']\nfor i in col:\n    df[i].replace(0, np.nan, inplace= True)","0c74b585":"df.isnull().sum()","1b9f454c":"def median_target(var):   \n    temp = df[df[var].notnull()]\n    temp = temp[[var, 'Output']].groupby(['Output'])[[var]].median().reset_index()\n    return temp","4d0172c3":"median_target('insulin')","7d7fbc5e":"median_target('glucose_conc')","fddf9740":"median_target('skin_len')","46ef2a41":"median_target('bp')","2097ca65":"median_target('bmi')","88905aaa":"df.loc[(df['Output'] == 0 ) & (df['insulin'].isnull()), 'insulin'] = 102.5\ndf.loc[(df['Output'] == 1 ) & (df['insulin'].isnull()), 'insulin'] = 169.5\ndf.loc[(df['Output'] == 0 ) & (df['glucose_conc'].isnull()), 'glucose_conc'] = 107\ndf.loc[(df['Output'] == 1 ) & (df['glucose_conc'].isnull()), 'glucose_conc'] = 140\ndf.loc[(df['Output'] == 0 ) & (df['skin_len'].isnull()), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len'].isnull()), 'skin_len'] = 32\ndf.loc[(df['Output'] == 0 ) & (df['bp'].isnull()), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp'].isnull()), 'bp'] = 74.5\ndf.loc[(df['Output'] == 0 ) & (df['bmi'].isnull()), 'bmi'] = 30.1\ndf.loc[(df['Output'] == 1 ) & (df['bmi'].isnull()), 'bmi'] = 34.3","1b32a217":"df.isnull().sum()","6a85395e":"plt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","a4661635":"sns.boxplot(df.n_pregnant)","32853b68":"df['n_pregnant'].value_counts()","9e53b22f":"median_target('n_pregnant')","d09ba37f":"df.loc[(df['Output'] == 0 ) & (df['n_pregnant']>13), 'n_pregnant'] = 2\ndf.loc[(df['Output'] == 1 ) & (df['n_pregnant']>13), 'n_pregnant'] = 4","319cf68c":"df['n_pregnant'].value_counts()","39790a12":"sns.boxplot(df.bp)","2f978461":"median_target('bp')","ec6121c5":"df.loc[(df['Output'] == 0 ) & (df['bp']<40), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp']<40), 'bp'] = 74.5","5bae182b":"df.loc[(df['Output'] == 0 ) & (df['bp']>103), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp']>103), 'bp'] = 74.5","78ecdb55":"sns.boxplot(df.bp)","e428ee88":"sns.boxplot(df.skin_len)","727dbf94":"median_target('skin_len')","f11c5679":"df.loc[(df['Output'] == 0 ) & (df['skin_len']>38), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len']>38), 'skin_len'] = 32","696637ac":"df.loc[(df['Output'] == 0 ) & (df['skin_len']<20), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len']<20), 'skin_len'] = 32","1e37c8c1":"sns.boxplot(df.bmi)","1b54984b":"median_target('bmi')","80de264e":"df.loc[(df['Output'] == 0 ) & (df['bmi']>48), 'bmi'] = 30.1\ndf.loc[(df['Output'] == 1 ) & (df['bmi']>48), 'bmi'] = 34.3","fdf74cae":"sns.boxplot(df.pedigree_fun)","376b3e2f":"median_target('pedigree_fun')","69e54324":"df.loc[(df['Output'] == 0 ) & (df['pedigree_fun']>1), 'pedigree_fun'] = 0.336\ndf.loc[(df['Output'] == 1 ) & (df['pedigree_fun']>1), 'pedigree_fun'] = 0.449","ae73bc1d":"sns.boxplot(df.age)","315a0719":"median_target('age')","186c28f5":"df.loc[(df['Output'] == 0 ) & (df['age']>61), 'age'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['age']>61), 'age'] = 36","0f47e9d9":"X = df.drop(['Output'], 1)\ny = df['Output']","50950ab3":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","659c31cf":"std = StandardScaler()\nx_train = std.fit_transform(x_train)\nx_test = std.transform(x_test)","4b6f941c":"model=SVC(kernel='rbf')\nmodel.fit(x_train,y_train)","f630c8d8":"y_pred=model.predict(x_test)","793d0852":"accuracy_score(y_test,y_pred)","7db7ef28":"confusion_matrix(y_test,y_pred)","7aa8c595":"print(classification_report(y_test,y_pred))","e937ee66":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","df0291b8":"model=SVC(kernel='linear')\nmodel.fit(x_train,y_train)","e43253a8":"y_pred=model.predict(x_test)","428ac3bf":"accuracy_score(y_test,y_pred)","05e5fbfe":"confusion_matrix(y_test,y_pred)","2148ef78":"print(classification_report(y_test,y_pred))","04e3734c":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","19d7795e":"\nregressor=LogisticRegression()","b4f71129":"regressor.fit(x_train,y_train)","3b5803c6":"y_pred=regressor.predict(x_test)","51cd059e":"accuracy_score(y_test,y_pred)","b828dd46":"confusion_matrix(y_test,y_pred)","315b3bde":"print(classification_report(y_test,y_pred))","50df19b9":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","5d8bd78b":"clf = KNeighborsClassifier(n_neighbors=3) \nclf.fit(x_train,y_train)  \nprint(clf.score(x_test,y_test))","2ff24c64":"y_pred=clf.predict(x_test)","3e79a557":"accuracy_score(y_test,y_pred)","a2f59fd8":"confusion_matrix(y_test,y_pred)","41cdfb54":"print(classification_report(y_test,y_pred))","807e65d7":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","b270798b":"classifier=RandomForestClassifier()\nclassifier.fit(x_train,y_train)","ef166ca6":"Y_pred=classifier.predict(x_test)\nconfusion_matrix(y_test,Y_pred)","ce2f8a2c":"accuracy_score(y_test,Y_pred)","b16bf7cf":"print(classification_report(y_test,Y_pred))","66d933d3":"fpr,tpr,_=roc_curve(y_test,Y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","cf53509d":"model = Sequential()\nmodel.add(Dense(32,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(256,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(256,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))","0d794d19":"print(model.summary())\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer=\"sgd\",metrics=['accuracy'])\nmodel.fit(x_train, y_train, batch_size=10, epochs=50, verbose=1, validation_data=(x_test, y_test))\nloss, accuracy = model.evaluate(x_test,y_test, verbose=0)\nprint(\"Loss : \"+str(loss))\nprint(\"Accuracy :\"+str(accuracy*100.0))","e5e7e9bf":"## Plotting Zeros Count in Data","16d05547":"## Random Forest","c2614909":"## SVM With Linear Kernel","07e218a2":"## Splitting the Data","fc6f4d1c":"## Scaling the Data","b2f99b26":"# Outlier Correction with Median","7c1f9397":"## KNN","1763d82f":"## Artificial Neural Networks","b1f0b305":"## Replacing 0 with NaN to Handle Easily","c2f4dc3a":"## Importing Important Libraries","4b58ab62":"### Function to calculate Median according to the Output","f365c56c":"## Box Plot to check for Outliers in the Data","b0116c20":"## SVM With RBF Kernel","b1889a20":"## Filling the NaN value with Median according to Output","740c9f1a":"## Logistic Regression"}}