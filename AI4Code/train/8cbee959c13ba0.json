{"cell_type":{"f16d9ce4":"code","506008c3":"code","10efafd8":"code","ede0a4fb":"code","4b058317":"code","d79cf326":"code","7fee6693":"code","f38421f2":"code","3350e439":"code","75a47c00":"code","4bc71f8b":"code","31d25300":"code","0f53a732":"code","02d921da":"code","07635098":"code","8029a90c":"code","a5bd6cc0":"code","48743e46":"code","f887c8c7":"code","27387929":"code","2e4c77b1":"code","f353d167":"code","706e2b6b":"markdown"},"source":{"f16d9ce4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))","506008c3":"df = pd.read_csv('..\/input\/bike_share.csv')","10efafd8":"df.head()","ede0a4fb":"df.info()","4b058317":"df.describe()","d79cf326":"df.corr()['count']","7fee6693":"df.drop(columns=['atemp','casual','registered'],inplace = True)","f38421f2":"df.head()","3350e439":"%matplotlib inline\nsns.pairplot(df)","75a47c00":"from sklearn.preprocessing import OneHotEncoder","4bc71f8b":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split","31d25300":"X = df[['season','holiday','workingday','weather','temp','humidity','windspeed']]\ny = df['count']","0f53a732":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 0)","02d921da":"model = LinearRegression()","07635098":"model.fit(X_train,y_train)","8029a90c":"model.coef_","a5bd6cc0":"model.intercept_","48743e46":"from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score","f887c8c7":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","27387929":"train_predict = model.predict(X_train)\n\nmae_train = mean_absolute_error(y_train,train_predict)\n\nmse_train = mean_squared_error(y_train,train_predict)\n\nrmse_train = np.sqrt(mse_train)\n\nr2_train = r2_score(y_train,train_predict)\n\nmape_train = mean_absolute_percentage_error(y_train,train_predict)","2e4c77b1":"test_predict = model.predict(X_test)\n\nmae_test = mean_absolute_error(test_predict,y_test)\n\nmse_test = mean_squared_error(test_predict,y_test)\n\nrmse_test = np.sqrt(mean_squared_error(test_predict,y_test))\n\nr2_test = r2_score(y_test,test_predict)\n\nmape_test = mean_absolute_percentage_error(y_test,test_predict)","f353d167":"print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\nprint('TRAIN: Mean Absolute Error(MAE): ',mae_train)\nprint('TRAIN: Mean Squared Error(MSE):',mse_train)\nprint('TRAIN: Root Mean Squared Error(RMSE):',rmse_train)\nprint('TRAIN: R square value:',r2_train)\nprint('TRAIN: Mean Absolute Percentage Error: ',mape_train)\nprint('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\nprint('TEST: Mean Absolute Error(MAE): ',mae_test)\nprint('TEST: Mean Squared Error(MSE):',mse_test)\nprint('TEST: Root Mean Squared Error(RMSE):',rmse_test)\nprint('TEST: R square value:',r2_test)\nprint('TEST: Mean Absolute Percentage Error: ',mape_test)","706e2b6b":"There are no null values here. Categorical columns like weather, season, holiday and working day are already encoded.\n\nCasual and registered user columns are highly correlated with count because count is resultant of sum of those two columns. So, we can drop casual and registered columns since they can overfit the model.\n\nAlso temp and atemp appear to be same just that the normalization factor is different. Let us drop atemp and keep temp column."}}