{"cell_type":{"6f232c26":"code","b549871d":"code","4350ef6e":"code","1a0bdb50":"code","3336014a":"code","71999825":"code","810ca489":"code","bbca18fe":"code","93e75c7c":"code","dd9a8b96":"code","4f617e90":"code","7724bc21":"code","68e46ee9":"code","8b026d03":"code","d8eaa689":"markdown","0d54bde0":"markdown","d12ce02c":"markdown"},"source":{"6f232c26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.applications.inception_v3 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.models import Sequential\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b549871d":"IMAGE_SIZE = [224, 224]\n\n#Setting train and valid path\ntrain_path = '\/kaggle\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train'\nvalid_path = '\/kaggle\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/valid'","4350ef6e":"# Import the Inception V3 library as shown below and add preprocessing layer to the front of VGG\n# Here we will be using imagenet weights\n\ninception = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)","1a0bdb50":"# don't train existing weights\nfor layer in inception.layers:\n    layer.trainable = False","3336014a":"# useful for getting number of output classes\nfolders = glob('\/kaggle\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train\/*')","71999825":"# our layers - you can add more if you want\nx = Flatten()(inception.output)","810ca489":"prediction = Dense(len(folders), activation='softmax')(x)\n\n# create a model object\nmodel = Model(inputs=inception.input, outputs=prediction)","bbca18fe":"# view the structure of the model\nmodel.summary()","93e75c7c":"# tell the model what cost and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","dd9a8b96":"# Use the Image Data Generator to import the images from the dataset\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","4f617e90":"# Make sure you provide the same target size as initialied for the image size\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train',\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","7724bc21":"test_set = test_datagen.flow_from_directory('\/kaggle\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/valid',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')","68e46ee9":"# fit the model\n# Run the cell. It will take some time to execute\nr = model.fit(\n  training_set,\n  validation_data=test_set,\n  epochs=5,\n  validation_steps=len(test_set)\n)","8b026d03":"# plot the loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","d8eaa689":"# Creating the Model","0d54bde0":"# Preprocessing the train and test set","d12ce02c":"# Fitting in the Model"}}