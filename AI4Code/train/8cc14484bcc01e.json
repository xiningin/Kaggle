{"cell_type":{"60d204af":"code","e3c12782":"code","de94a5ae":"code","15d72e5e":"code","4957feba":"code","8e8561bf":"code","6f47fc8e":"code","c2461b48":"code","d5066780":"code","a47943c3":"code","96c58be2":"code","88400572":"code","e75813eb":"code","7cc6a35c":"code","b7c3e2bd":"code","bbe1426c":"code","86c16fbd":"code","27267957":"code","b9a89363":"code","a3d66d87":"code","feb9e55a":"code","6271a822":"code","45e1b606":"code","42eed52b":"code","ae21d546":"code","a42192fe":"code","fd6446ad":"code","730c6ed4":"code","09ce6303":"markdown","28ad4b0b":"markdown","062c3f5a":"markdown","068b5523":"markdown","f21a3215":"markdown","171b10fa":"markdown","1bf75838":"markdown","9d6a5916":"markdown","e457b34e":"markdown","a5c1faa5":"markdown","2cd28050":"markdown","9da2df62":"markdown"},"source":{"60d204af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3c12782":"import numpy as np\nimport pandas as pd\nfrom tabulate import tabulate\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport matplotlib\nimport seaborn as sns\nimport geopandas as gpd\nfrom geopandas.tools import geocode\nimport squarify    # pip install squarify (algorithm for treemap)\nfrom mpl_toolkits.basemap import Basemap\nimport folium\n\n\nprint(gpd.__version__)","de94a5ae":"df = pd.read_excel(\"..\/input\/best-restaurants-in-germany\/Best Restaurants in Germany.xlsx\")\ndf.head()","15d72e5e":"df.columns","4957feba":"print(\"Percentage null or na values in df\")\n((df.isnull() | df.isna()).sum() * 100 \/ df.index.size).round(2)","8e8561bf":"print(\"Rank   |   Chef   |   Restaurant | Stars\")\nfor i in range(len(df)):\n    print(df['Rank'].iloc[i].astype(int),\"-\", df['Chef'].iloc[i],\"  -  \",df['Restaurant'].iloc[i],\"-\",df['Stars'].iloc[i])","6f47fc8e":"df.City.value_counts().head(20)","c2461b48":"city=df['City'].value_counts()\nnames=city.index\nvalues=city.values","d5066780":"plt.figure(figsize=(9,8))\nplt.style.use('default')\nsns.barplot(x=names[:10],y=values[:10],edgecolor='k')\nplt.xticks(rotation=90)\nplt.ylabel('Restaurants Count')\nplt.xlabel('City')\nplt.title('Restaurants by City',fontsize=15)\nplt.show()","a47943c3":"plt.figure(figsize=(20,9))\n\nplt.style.use('tableau-colorblind10')\ndf['City'].value_counts()[:15].plot(kind='bar',edgecolor='k',color='orange', alpha=0.8)\n  \nfor index, value in enumerate(df['City'].value_counts()[:15]):\n    plt.text(index, value, str(value))\nplt.xlabel(\"City\", fontsize=14)\nplt.ylabel(\"Restaurants Count\", fontsize=13)\nplt.title(\"Restaurants by City\", fontsize=15)\nplt.legend()\nplt.show()","96c58be2":"df.Stars.value_counts()","88400572":"stars_index=df.Stars.value_counts()\nstars_index=stars_index.head(10)\n\nplt.figure(figsize=(8,6))\nax=sns.barplot(x=stars_index.index,y=stars_index.values,palette=sns.cubehelix_palette(len(stars_index.index)))\nplt.xlabel('Stars(rating)')\nplt.ylabel('Count')\nplt.xticks(rotation=90)\nplt.title('Star rating of Restaurants')\nplt.show()","e75813eb":"df['Culinary Category'].value_counts()[:20]","7cc6a35c":"rcParams['figure.figsize'] = 20,7\ng = sns.countplot(x=\"Culinary Category\",data=df, palette = \"Set1\")   \ng.set_xticklabels(g.get_xticklabels(), rotation=90, ha=\"right\")\ng \nplt.title('Cuisines that are served across Germany',size = 15)\nplt.show()","b7c3e2bd":"plt.figure(figsize=(20,9))\n\nplt.style.use('default')\ndf['Culinary Category'].value_counts()[:15].plot(kind='bar',edgecolor='k',color='tomato', alpha=0.8)\n  \nfor index, value in enumerate(df['Culinary Category'].value_counts()[:15]):\n    plt.text(index, value, str(value))\nplt.xlabel(\"Culinary Category\", fontsize=14)\nplt.ylabel(\"Count\", fontsize=13)\nplt.title(\"Cuisines that are served across Germany\", fontsize=15)\nplt.legend()\nplt.show()","bbe1426c":"plt.rcParams['figure.figsize'] = (8, 9)\nplt.style.use('ggplot')\n\nplt.subplot(2,2,1)\ndf['Open for Lunch'].value_counts().plot.bar(color = 'orange', width=0.5)\nplt.title('Open for Lunch', fontsize = 12)\n\nplt.subplot(2,2,2)\ndf['Open for Dinner'].value_counts().plot.bar(color = 'slateblue', width=0.5)\nplt.title('Open for Dinner', fontsize = 12)\n\nplt.subplot(2,2,3)\ndf['Open for Midday'].value_counts().plot.bar(color = 'orangered', width=0.5)\nplt.title('Open for Midday', fontsize = 12)\n\nplt.subplot(2,2,4)\ndf['Plant Holidays'].value_counts().plot.bar(color = 'chartreuse', width=0.5)\nplt.title('Plant Holidays', fontsize = 12)\n\nplt.show()","86c16fbd":"df['Quality Score'].value_counts().head(20)","27267957":"fig, ax = plt.subplots(figsize=[16,4])\nsns.distplot(df['Quality Score'],bins=50, kde=True,color='red')\nax.set_title('Quality Score of Restaurants')\nax. set_yticks([])\nplt.show()","b9a89363":"fig, ax = plt.subplots(figsize=[8,4])\nsns.violinplot(data=df['Quality Score'], palette=\"Set3\", bw=.2, cut=1, linewidth=1)\nax.set_title('Quality Score of Restaurants')\nax.grid('off')\nplt.show()","a3d66d87":"df['Price Per Person']= df['Price Per Person'].str.split(\"\u20ac\", n = 1, expand = True) \ndf['Price Per Person']","feb9e55a":"df.dropna(how='any',inplace=True)\ndf.head()","6271a822":"df['Price Per Person'].value_counts()","45e1b606":"sns.countplot(df['Price Per Person']).set_xticklabels(sns.countplot(df['Price Per Person']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(20,6)\nplt.title('Cost of Restuarant')\nplt.show()","42eed52b":"fig, ax = plt.subplots(figsize=[16,4])\nsns.distplot(df['Price Per Person'],bins=50, kde=True,color='red', ax=ax)\nax.set_title('Cost Distrubution for all restaurants')\n\n\nax. set_yticks([])\nax2 = ax.twinx() # create a second y axis\ny_max = df['Price Per Person'].astype(float).max() # maximum of the array\n\n# find the percentages of the max y values.\n# This will be where the \"0%, 25%\" labels will be placed\nticks = [0, 0.25*y_max, 0.5*y_max, 0.75*y_max, y_max] \n\nax2.set_ylim(ax.get_ylim()) # set second y axis to have the same limits as the first y axis\nax2.set_yticks(ticks) \n# ax2.set_yticklabels([\"0%\", \"25%\",\"50%\",\"75%\",\"100%\"]) # labels in percentage\nax2.grid(\"off\")\n\nplt.show()\n","ae21d546":"plt.figure(figsize=(15,7))\nchains=df['Restaurant'].value_counts()[:20]\nsns.barplot(x=chains,y=chains.index,palette='Set1')\nplt.title(\"Restaurant chains with most number of outlets\",size=15,pad=20)\nplt.xlabel(\"Number of outlets\",size=15)\nplt.show()","a42192fe":"df.Courses.value_counts()[:20]","fd6446ad":"df['Courses']= df['Courses'].str.split(\" \", n = 1, expand = True) \n\ndf['Courses']","730c6ed4":"plt.figure(figsize=(12,6))\nplt.style.use('seaborn-white')\nsns.distplot(df['Courses'].astype(float),kde = False, color='r')\nplt.ylabel('Count')\nplt.title('Number of Courses served')\nplt.show()","09ce6303":"### **Number of Courses served in a Restaurant**","28ad4b0b":"**Reading the dataset**","062c3f5a":"#### **List of *Chefs* by their Rank\ud83c\udfc6** **and**\n#### ***Restaurants* by their Star Rating\u2b50**","068b5523":"**Restaurants that are open for Lunch, Midday and Dinner**","f21a3215":"**Look at data information**","171b10fa":"### **Number of Restaurants by City\ud83c\udf06**","1bf75838":"### **List of *Cuisine Types* served across *Germany***","9d6a5916":"### **Price Per Person** in \u20ac","e457b34e":"### **Restaurants by Stars(Rating)**","a5c1faa5":"### **Restaurant chains in Germany**","2cd28050":"**Loading the Dataset** ","9da2df62":"### **Restaurants by their Quality Score**"}}