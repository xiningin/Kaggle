{"cell_type":{"55a7e32f":"code","16e2028e":"code","3bf36cd7":"code","5da98ef0":"code","b9bb08b1":"code","8952fe11":"code","3ac90b96":"code","27cef594":"code","bda90422":"code","643dc3d8":"code","55aaae3d":"code","1104609d":"code","61f14ff9":"code","4d236c92":"code","ad2320d4":"code","b0c90817":"code","bd09a8a0":"code","808c3a2a":"code","e1736bc2":"code","95b47801":"code","3242031a":"code","0f467865":"code","4628497b":"code","36e8d5d2":"code","47f89025":"code","d811bcb9":"code","fae204e4":"code","5b121374":"code","49e98fbc":"code","9de180ee":"code","3d186542":"code","e5e9c706":"code","e55dae63":"code","ff32a95d":"code","99c73653":"code","3bac7a1d":"code","16078d31":"code","9629af06":"code","3b34290c":"code","ce68a6c5":"code","ce317ea8":"code","57607bae":"code","e8505d7b":"code","dc88ab1b":"code","ca89859b":"code","faf9b993":"code","b0d65470":"code","bb43161c":"code","5a923c25":"code","6aee3ea3":"code","7cf38c42":"code","b44c506f":"code","9f481b57":"code","2a26967e":"code","7a123b4c":"code","e88cec06":"code","60214930":"code","32123a2a":"code","e94ce2c1":"code","a44e33b9":"markdown","4f6ef0e0":"markdown","b1b8f730":"markdown","02a1596a":"markdown","edf6199a":"markdown","173a15a8":"markdown","52f0a615":"markdown","74a27b50":"markdown","f21db943":"markdown","97f2d5d3":"markdown","077454ee":"markdown","af37aa13":"markdown","fe727599":"markdown","77fac42c":"markdown","f0eb4950":"markdown","d58727d5":"markdown","c923a7f1":"markdown","38b0d905":"markdown","bd83d5c4":"markdown","f05ce8df":"markdown","64ea804e":"markdown","0b6d85ca":"markdown","454bb8fb":"markdown","9b012432":"markdown"},"source":{"55a7e32f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16e2028e":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport folium\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nimport math\nimport random\nfrom datetime import timedelta\n\n\ncnf = '#393e46'\ndth = '#ff2e63'\nrec = '#21bf73'\nact = '#fe9801'","3bf36cd7":"\nimport warnings\nwarnings.filterwarnings('ignore')","5da98ef0":"# !pip install folium\n# !pip install plotly","b9bb08b1":"import plotly as py\npy.offline.init_notebook_mode(connected = True)","8952fe11":"import os","3ac90b96":"try:\n    os.system(\"rm -rf Covid-19-Preprocessed-Dataset\")\nexcept:\n    print('File does not exist')","27cef594":"!git clone https:\/\/github.com\/laxmimerit\/Covid-19-Preprocessed-Dataset.git","bda90422":"df = pd.read_csv('Covid-19-Preprocessed-Dataset\/preprocessed\/covid_19_data_cleaned.csv', parse_dates=['Date'])\n\ncountry_daywise = pd.read_csv('Covid-19-Preprocessed-Dataset\/preprocessed\/country_daywise.csv', parse_dates=['Date'])\ncountywise = pd.read_csv('Covid-19-Preprocessed-Dataset\/preprocessed\/countrywise.csv')\ndaywise = pd.read_csv('Covid-19-Preprocessed-Dataset\/preprocessed\/daywise.csv', parse_dates=['Date'])\n","643dc3d8":"df['Province\/State'] = df['Province\/State'].fillna(\"\")\ndf.head()","55aaae3d":"confirmed = df.groupby('Date').sum()['Confirmed'].reset_index()\nrecovered = df.groupby('Date').sum()['Recovered'].reset_index()\ndeaths = df.groupby('Date').sum()['Deaths'].reset_index()\ndeaths.head()","1104609d":"# df.isnull().sum()","61f14ff9":"# df.info()","4d236c92":"# df.query('Country == \"US\"')","ad2320d4":"# confirmed.tail()","b0c90817":"# recovered.tail()","bd09a8a0":"# deaths.tail()","808c3a2a":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = confirmed['Date'], y = confirmed['Confirmed'], mode = 'lines+markers', name = 'Confirmed', line = dict(color = \"Orange\", width = 2)))\nfig.add_trace(go.Scatter(x = recovered['Date'], y = recovered['Recovered'], mode = 'lines+markers', name = 'Recovered', line = dict(color = \"Green\", width = 2)))\nfig.add_trace(go.Scatter(x = deaths['Date'], y = deaths['Deaths'], mode = 'lines+markers', name = 'Deaths', line = dict(color = \"Red\", width = 2)))\nfig.update_layout(title = 'Worldwide Covid-19 Cases', xaxis_tickfont_size = 14, yaxis = dict(title = 'Number of Cases'))\n\nfig.show()","e1736bc2":"df.info()","95b47801":"df['Date'] = df['Date'].astype(str)","3242031a":"df.info()","0f467865":"# df.head()","4628497b":"fig = px.density_mapbox(df, lat = 'Lat', lon = 'Long', hover_name = 'Country', hover_data = ['Confirmed', 'Recovered', 'Deaths'], animation_frame = 'Date', color_continuous_scale = 'Portland', radius = 7, zoom = 0, height = 700)\nfig.update_layout(title = 'Worldwide Covid-19 Cases With Time Laps')\nfig.update_layout(mapbox_style = 'open-street-map', mapbox_center_lon = 0)\n\nfig.show()","36e8d5d2":"df['Date'] = pd.to_datetime(df['Date'])\ndf.info()","47f89025":"ship_rows = df['Province\/State'].str.contains('Grand Princess') | df['Province\/State'].str.contains('Diamond Princess') | df['Country'].str.contains('Grand Princess') | df['Country'].str.contains('Diamond Princess') | df['Country'].str.contains('MS Zaandam')\nship = df[ship_rows]\n\ndf = df[~ship_rows]","d811bcb9":"ship_latest = ship[ship['Date'] == max(ship['Date'])]\nship_latest","fae204e4":"ship_latest.style.background_gradient(cmap = 'Pastel1_r')","5b121374":"temp = df.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date'] == max(temp['Date'])].reset_index(drop = True)\n\ntm = temp.melt(id_vars = 'Date', value_vars = ['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path = ['variable'], values = 'value', height = 250, width = 800, color_discrete_sequence = [act, rec, dth])\n\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","49e98fbc":"temp = df.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars = 'Date', value_vars = ['Recovered', 'Deaths', 'Active'], var_name = 'Case', value_name = 'Count')\n\nfig = px.area(temp, x = 'Date', y = 'Count', color = 'Case', height = 400, title = 'Case over time', color_discrete_sequence = [rec, dth, act])\nfig.update_layout(xaxis_rangeslider_visible = True)\nfig.show()","9de180ee":"temp = df[df['Date'] == max(df['Date'])]","3d186542":"m = folium.Map(location=[0,0], tiles = 'cartodbpositron', min_zoom = 1, max_zoom = 4, zoom_start = 1)\n\nfor i in range(0, len(temp)):\n    folium.Circle(location = [temp.iloc[i]['Lat'], temp.iloc[i]['Long']], color = 'crimson', fill = 'crimson',\n                 tooltip = '<li><bold> Country: ' + str(temp.iloc[i]['Country'])+\n                            '<li><bold> Province: ' + str(temp.iloc[i]['Province\/State'])+\n                            '<li><bold> Confirmed: ' + str(temp.iloc[i]['Confirmed'])+\n                             '<li><bold> Deaths: ' + str(temp.iloc[i]['Deaths']),\n                 radius = int(temp.iloc[i]['Confirmed'])**0.5).add_to(m)\nm","e5e9c706":"# country_daywise.head()","e55dae63":"fig = px.choropleth(country_daywise, locations = 'Country', locationmode = 'country names', color = np.log(country_daywise['Confirmed']),\n                  hover_name = 'Country', animation_frame = country_daywise['Date'].dt.strftime('%Y-%m-%d'),\n                  title = 'Cases over time', color_continuous_scale = px.colors.sequential.Inferno)\n\nfig.update(layout_coloraxis_showscale = True)\nfig.show()","ff32a95d":"# fig = px.choropleth(country_daywise, locations = 'Country', locationmode = 'country names', color = country_daywise['Confirmed'],\n#                    hover_name = 'Country', animation_frame = country_daywise['Date'].dt.strftime('%Y-%m-%d'),\n#                    title = 'Cases Over time', color_continuous_scale = px.colors.sequential.Inferno)\n\n# fig.update(layout_coloraxis_showscale = True)\n# fig.show()","99c73653":"fig_c = px.choropleth(countywise, locations = 'Country', locationmode = 'country names',\n                     color = np.log(countywise['Confirmed']), hover_name = 'Country',\n                     hover_data = ['Confirmed'])\ntemp = countywise[countywise['Deaths']>0]\nfig_d = px.choropleth(temp, locations = 'Country', locationmode = 'country names',\n                     color = np.log(temp['Deaths']), hover_name = 'Country',\n                     hover_data = ['Deaths'])\n\nfig = make_subplots(rows = 1, cols = 2, subplot_titles = ['Confirmed', 'Deaths'],\n                   specs = [[{'type':'choropleth'}, {'type':'choropleth'}]])\n\nfig.add_trace(fig_c['data'][0], row = 1, col = 1)\nfig.add_trace(fig_d['data'][0], row = 1, col = 2)\n\nfig.update(layout_coloraxis_showscale = False)\n\nfig.show()","3bac7a1d":"# daywise.head()","16078d31":"fig_c = px.bar(daywise, x = 'Date', y = 'Confirmed', color_discrete_sequence = [act])\nfig_d = px.bar(daywise, x = 'Date', y = 'Deaths', color_discrete_sequence = [dth])\n\nfig = make_subplots(rows = 1,cols = 2, shared_xaxes = False, horizontal_spacing = 0.1,\n                   subplot_titles = ('Confirmed Cases', 'Deaths Cases'))\nfig.add_trace(fig_c['data'][0], row = 1, col = 1)\nfig.add_trace(fig_d['data'][0], row = 1, col = 2)\n\nfig.update_layout(height = 400)\n\nfig.show()","9629af06":"# daywise.columns","3b34290c":"fig1 = px.line(daywise, x = 'Date', y = 'Deaths \/ 100 Cases', color_discrete_sequence=[dth])\nfig2 = px.line(daywise, x = 'Date', y = 'Recovered \/ 100 Cases', color_discrete_sequence=[rec])\nfig3 = px.line(daywise, x = 'Date', y = 'Deaths \/ 100 Recovered', color_discrete_sequence=['aqua'])\n\nfig = make_subplots(rows = 1, cols = 3, shared_xaxes=False,\n                   subplot_titles=('Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered'))\n\nfig.add_trace(fig1['data'][0], row = 1, col = 1)\nfig.add_trace(fig2['data'][0], row = 1, col = 2)\nfig.add_trace(fig3['data'][0], row = 1, col = 3)\n\nfig.update_layout(height = 400)\nfig.show()","ce68a6c5":"fig_c = px.bar(daywise, x = 'Date', y = 'Confirmed', color_discrete_sequence=[act])\nfig_d = px.bar(daywise, x = 'Date', y = 'No. of Countries', color_discrete_sequence=[dth])\n\nfig = make_subplots(rows = 1, cols = 2, shared_xaxes = False, horizontal_spacing = 0.1,\n                   subplot_titles = ('No. of New Cases per Day', 'No.of Countries'))\n\nfig.add_trace(fig_c['data'][0], row = 1, col = 1)\nfig.add_trace(fig_d['data'][0], row = 1, col = 2)\n\nfig.show()","ce317ea8":"countywise.columns","57607bae":"top  = 15\n\nfig_c = px.bar(countywise.sort_values('Confirmed').tail(top), x = 'Confirmed', y = 'Country',\n              text = 'Confirmed', orientation='h', color_discrete_sequence=[act])\nfig_d = px.bar(countywise.sort_values('Deaths').tail(top), x = 'Deaths', y = 'Country',\n              text = 'Deaths', orientation='h', color_discrete_sequence=[dth])\n\n\nfig_a = px.bar(countywise.sort_values('Active').tail(top), x = 'Active', y = 'Country',\n              text = 'Active', orientation='h', color_discrete_sequence=['#434343'])\nfig_r = px.bar(countywise.sort_values('Recovered').tail(top), x = 'Recovered', y = 'Country',\n              text = 'Recovered', orientation='h', color_discrete_sequence=[rec])\n\n\nfig_dc = px.bar(countywise.sort_values('Deaths \/ 100 Cases').tail(top), x = 'Deaths \/ 100 Cases', y = 'Country',\n              text = 'Deaths \/ 100 Cases', orientation='h', color_discrete_sequence=['#f84351'])\nfig_rc = px.bar(countywise.sort_values('Recovered \/ 100 Cases').tail(top), x = 'Recovered \/ 100 Cases', y = 'Country',\n              text = 'Recovered \/ 100 Cases', orientation='h', color_discrete_sequence=['#a45398'])\n\n\nfig_nc = px.bar(countywise.sort_values('New Cases').tail(top), x = 'New Cases', y = 'Country',\n              text = 'New Cases', orientation='h', color_discrete_sequence=['#f04341'])\ntemp = countywise[countywise['Population']>1000000]\nfig_p = px.bar(temp.sort_values('Cases \/ Million People').tail(top), x = 'Cases \/ Million People', y = 'Country',\n              text = 'Cases \/ Million People', orientation='h', color_discrete_sequence=['#b40398'])\n\n\n\nfig_wc = px.bar(countywise.sort_values('1 week change').tail(top), x = '1 week change', y = 'Country',\n              text = '1 week change', orientation='h', color_discrete_sequence=['#c04041'])\ntemp = countywise[countywise['Confirmed']>100]\nfig_wi = px.bar(temp.sort_values('1 week % increase').tail(top), x = '1 week % increase', y = 'Country',\n              text = '1 week % increase', orientation='h', color_discrete_sequence=['#b00398'])\n\n\nfig = make_subplots(rows = 5, cols = 2, shared_xaxes=False, horizontal_spacing=0.2, \n                    vertical_spacing=.05,\n                   subplot_titles=('Confirmed Cases', 'Deaths Reported', 'Recovered Cases', 'Active Cases',\n                                  'Deaths \/ 100 Cases', 'Recovered \/ 100 Cases',\n                                  'New Cases', 'Cases \/ Million People',\n                                  '1 week change', '1 week % increase'))\n\nfig.add_trace(fig_c['data'][0], row = 1, col = 1)\nfig.add_trace(fig_d['data'][0], row = 1, col = 2)\n\nfig.add_trace(fig_r['data'][0], row = 2, col = 1)\nfig.add_trace(fig_a['data'][0], row = 2, col = 2)\n\nfig.add_trace(fig_dc['data'][0], row = 3, col = 1)\nfig.add_trace(fig_rc['data'][0], row = 3, col = 2)\n\nfig.add_trace(fig_nc['data'][0], row = 4, col = 1)\nfig.add_trace(fig_p['data'][0], row = 4, col = 2)\n\nfig.add_trace(fig_wc['data'][0], row = 5, col = 1)\nfig.add_trace(fig_wi['data'][0], row = 5, col = 2)\n\nfig.update_layout(height = 3000)\nfig.show()\n","e8505d7b":"# if not os.path.exists('images'):\n#     os.mkdir('images')","dc88ab1b":"# fig.write_image('images\/fig.png')","ca89859b":"# fig.write_image('images\/fig.jpeg')","faf9b993":"# fig.write_image('images\/fig.pdf')","b0d65470":"top = 15\nfig = px.scatter(countywise.sort_values('Deaths', ascending = False).head(top),\n                x = 'Confirmed', y = 'Deaths', color = 'Country', size = 'Confirmed', height = 600,\n                text = 'Country', log_x = True, log_y = True, title = 'Deaths vs Confirmed Cases (Cases are on log10 scale)')\n\nfig.update_traces(textposition = 'top center')\nfig.update_layout(showlegend = False)\nfig.update_layout(xaxis_rangeslider_visible = True)\nfig.show()","bb43161c":"countywise.sort_values('Deaths', ascending = False).head(15)","5a923c25":"# fig = px.bar(country_daywise, x = 'Date', y = 'Confirmed', color = 'Country', height = 600,\n#             title = 'Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\n# fig.show()","6aee3ea3":"# fig = px.bar(country_daywise, x = 'Date', y = 'Recovered', color = 'Country', height = 600,\n#             title = 'Recovered', color_discrete_sequence = px.colors.cyclical.mygbm)\n# fig.show()","7cf38c42":"# fig = px.bar(country_daywise, x = 'Date', y = 'New Cases', color = 'Country',height = 600,\n#             title = 'New Cases', color_discrete_sequence = px.colors.cyclical.mygbm)\n# fig.show()","b44c506f":"# fig = px.line(country_daywise, x = 'Date', y = 'Confirmed', color = 'Country', height = 600,\n#              title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\n# fig.show()\n\n# fig = px.line(country_daywise, x = 'Date', y = 'Deaths', color = 'Country', height = 600,\n#              title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\n# fig.show()\n\n# fig = px.line(country_daywise, x = 'Date', y = 'Recovered', color = 'Country', height = 600,\n#              title='Recovered', color_discrete_sequence = px.colors.cyclical.mygbm)\n# fig.show()","9f481b57":"df.head()","2a26967e":"gt_100 = country_daywise[country_daywise['Confirmed']>100]['Country'].unique()\ntemp = df[df['Country'].isin(gt_100)]\n\ntemp = temp.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>100]\n\nmin_date = temp.groupby('Country')['Date'].min().reset_index()\nmin_date.columns = ['Country', 'Min Date']\n\nfrom_100th_case = pd.merge(temp, min_date, on = 'Country')\nfrom_100th_case['N days'] = (from_100th_case['Date'] - from_100th_case['Min Date']).dt.days\n\nfig = px.line(from_100th_case, x = 'N days', y = 'Confirmed', color = 'Country', title = 'N days from 100 case', height = 600)\nfig.show()","7a123b4c":"# gt_1000 = country_daywise[country_daywise['Confirmed']>1000]['Country'].unique()\n# temp = df[df['Country'].isin(gt_1000)]\n\n# temp = temp.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\n# temp = temp[temp['Confirmed']>1000]\n\n# min_date = temp.groupby('Country')['Date'].min().reset_index()\n# min_date.columns = ['Country', 'Min Date']\n\n# from_1000th_case = pd.merge(temp, min_date, on = 'Country')\n# from_1000th_case['N days'] = (from_1000th_case['Date'] - from_1000th_case['Min Date']).dt.days\n\n# fig = px.line(from_1000th_case, x = 'N days', y = 'Confirmed', color = 'Country', title = 'N days from 1000 case', height = 600)\n# fig.show()","e88cec06":"# gt_10000 = country_daywise[country_daywise['Confirmed']>10000]['Country'].unique()\n# temp = df[df['Country'].isin(gt_10000)]\n\n# temp = temp.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\n# temp = temp[temp['Confirmed']>10000]\n\n# min_date = temp.groupby('Country')['Date'].min().reset_index()\n# min_date.columns = ['Country', 'Min Date']\n\n# from_10000th_case = pd.merge(temp, min_date, on = 'Country')\n# from_10000th_case['N days'] = (from_10000th_case['Date'] - from_10000th_case['Min Date']).dt.days\n\n# fig = px.line(from_10000th_case, x = 'N days', y = 'Confirmed', color = 'Country', title = 'N days from 10000 case', height = 600)\n# fig.show()","60214930":"full_latest = df[df['Date'] == max(df['Date'])]\n\nfig = px.treemap(full_latest.sort_values(by = 'Confirmed', ascending = False).reset_index(drop = True),\n                 path = ['Country', 'Province\/State'], values = 'Confirmed', height = 700,\n                 title = 'Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","32123a2a":"# full_latest = df[df['Date'] == max(df['Date'])]\n\n# fig = px.treemap(full_latest.sort_values(by = 'Deaths', ascending = False).reset_index(drop = True),\n#                 path = ['Country', 'Province\/State'], values = 'Deaths', height = 700,\n#                 color_discrete_sequence = px.colors.qualitative.Dark2)\n# fig.data[0].textinfo = 'label+text+value'\n# fig.show()","e94ce2c1":"first_date = df[df['Confirmed']>0]\nfirst_date = first_date.groupby('Country')['Date'].agg(['min']).reset_index()\n\nlast_date = df.groupby(['Country', 'Date'])['Confirmed', 'Deaths', 'Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = (last_date['Country'] != last_date['Country'].shift(1))\n\nlast_date.loc[mask, 'Confirmed'] = np.nan\nlast_date.loc[mask, 'Deaths'] = np.nan\nlast_date.loc[mask, 'Recovered'] = np.nan\n\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Country')['Date'].agg(['max']).reset_index()\nfirst_last = pd.concat([first_date, last_date['max']], axis = 1)\nfirst_last['max'] = first_last['max'] + timedelta(days = 1)\n\nfirst_last['Days'] = first_last['max'] - first_last['min']\nfirst_last['Task'] = first_last['Country']\n\nfirst_last.columns = ['Country', 'Start', 'Finish', 'Days', 'Task']\n\nfirst_last = first_last.sort_values('Days')\n\ncolors = ['#' + ''.join([random.choice('0123456789ABCDEF') for j in range(6)]) for i in range(len(first_last))]\n\nfig = ff.create_gantt(first_last, index_col = 'Country', colors = colors, show_colorbar = False,\n                     bar_width=0.2, showgrid_x = True, showgrid_y=True, height = 2500)\n\nfig.show()","a44e33b9":"## Confirmed Cases with Choropleth Map","4f6ef0e0":"## Confirmed Cases","b1b8f730":"# Tree Map Analysis","02a1596a":"## Confirmed and Death Cases with Static Colormap","edf6199a":"### Bar Plot","173a15a8":"## Confirmed, Deaths, New Cases vs Country and Date","52f0a615":"## Folium Maps","74a27b50":"## Deaths and Recoveries per 100 Cases","f21db943":"# Dataset Preparation","97f2d5d3":"### Line Plot","077454ee":"Preprocessed Dataset Link: https:\/\/github.com\/laxmimerit\/Covid-19-Preprocessed-Dataset","af37aa13":"## Total Cases on Ships","fe727599":"## Save Static Plots","77fac42c":"## Growth Rate After 100 Cases","f0eb4950":"## Cases Density Animation on World Map","d58727d5":"## Deaths Cases","c923a7f1":"## Top 15 Countries Case Analysis","38b0d905":"## Cases Over the Time with Area Plot","bd83d5c4":"## Worldwide Total Confirmed, Recovered, and Deaths","f05ce8df":"## Growth Rate After 1000 Cases","64ea804e":"## Scatter Plot for Deaths vs Confirmed Cases\n\n","0b6d85ca":"## First and Last Case Report Time","454bb8fb":"## New Cases and No.of Countries","9b012432":"## Growth Rate After 10.000 Cases"}}