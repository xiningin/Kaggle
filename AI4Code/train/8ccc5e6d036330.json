{"cell_type":{"19cb0e2b":"code","37449acd":"code","28a787fc":"code","4df2e235":"code","9f72afc5":"code","01b691ee":"code","bd6db683":"code","a2b1b0f7":"code","b79433dc":"code","bc0cbf80":"code","a907db36":"code","1d0f3d71":"code","63e1f1ca":"code","4b8cbd53":"code","6c5d6af0":"code","b6751301":"code","534d4df1":"code","53a4c007":"code","38b23077":"code","658c1330":"code","1eb5e350":"code","b79ebc4c":"code","8b366af9":"code","a11263fe":"code","3b3c54f3":"code","5bd7f7f2":"code","e1bf87ff":"code","9dcd4e9d":"code","5e53c01a":"code","8c67acb6":"code","93a8428f":"code","c662ce91":"code","eb8bc57a":"code","d01f4b63":"code","cdea1131":"code","2116897c":"code","16e77d7e":"code","aac3728d":"code","f26ef02d":"code","7a78a936":"code","7b0e0cb1":"code","78b09efe":"code","0ed76f7a":"code","6234f480":"code","dc5cac93":"code","51ca0eed":"code","516f1fbb":"code","0b5f5ffe":"code","b338691f":"code","19f0b182":"code","4d5aaebb":"code","9c3d2415":"code","7d0221d4":"code","cc9b7305":"code","28b1a6df":"code","dcc98ff8":"code","1b73f5ca":"code","78b44342":"code","9f6562c6":"code","214c980e":"code","a81b34c1":"code","ea2a122a":"code","69543011":"code","36191d83":"code","9be6ffea":"code","b4f53ccc":"code","4f872292":"code","2afa6646":"code","2c9496b7":"code","11bff89c":"code","c7b73ed8":"code","29a30fcb":"code","c23aa5cb":"code","95443f49":"code","ac1eecff":"code","eaee9412":"code","83095e81":"code","fd06d69f":"code","ca3c9b20":"code","7f22130d":"code","8937063b":"code","0dfa0f98":"code","81033022":"code","2a9c7645":"code","bd737947":"code","888275af":"code","dae702e2":"code","72a5356d":"code","9e31e9a5":"code","cc56c3ed":"code","318f2bef":"code","f339114d":"code","8f0fc80f":"code","72e3952d":"code","2744a0c6":"code","831f53a1":"code","35f90cb5":"code","8f1cbfef":"code","cfb33b3d":"code","5a39c2d5":"code","f2618222":"code","735357d2":"code","13c9423e":"code","0214909f":"code","e4f8a2c6":"code","835d3193":"code","a703daeb":"code","3e257d16":"code","9e765cf4":"code","acb69fb8":"code","94e9dfef":"code","d13aaadc":"code","c61ab9ce":"code","38fe84d2":"code","c69b6321":"code","5e25add5":"code","9bcb004f":"code","80bcc9c7":"code","7db56ed5":"code","34b81b3c":"code","3c14b978":"code","500f7ae7":"code","0d2c1670":"code","8e81f984":"markdown","2529c606":"markdown","47b9a492":"markdown","c9878605":"markdown","905b4a7c":"markdown","e7d32a1e":"markdown","a8d8708f":"markdown","673e57cf":"markdown","7f32f551":"markdown","7b7d48e1":"markdown","82f60bd2":"markdown","8d725540":"markdown","8fc1d135":"markdown","176f3ed2":"markdown","3332289f":"markdown","909f855c":"markdown","b8c9c0d3":"markdown","6217cca6":"markdown","52fe727a":"markdown","053ab0a6":"markdown","ef4cafa6":"markdown","5b776ea4":"markdown","ccc9a4af":"markdown","435e6311":"markdown","8e892c10":"markdown","7241ddd5":"markdown","4413c77a":"markdown","0d8753f1":"markdown"},"source":{"19cb0e2b":"# importar pacotes necess\u00e1rios\nimport numpy as np\nimport pandas as pd\n\n# definir par\u00e2metros extras\npd.set_option('precision', 3)\npd.set_option('display.max_columns', 100)\n\n# carregar arquivo de dados de treino\ndata = pd.read_csv('.\/iris-train2.csv', index_col='Id')\n\n# mostrar alguns exemplos de registros\ndata.head()\n\n\n\n","37449acd":"# quantas linhas e colunas existem?\ndata.shape\n","28a787fc":"# quais s\u00e3o as colunas e respectivos tipos de dados?\ndata.info()","4df2e235":"# sum\u00e1rio estat\u00edstico das caracter\u00edsticas num\u00e9ricas\ndata.describe()","9f72afc5":"# quais as correla\u00e7\u00f5es entre as caracter\u00edsticas num\u00e9ricas?\ndata.corr()\n\n","01b691ee":"# quantos registros existem de cada esp\u00e9cie?\ndata['Species'].value_counts()","bd6db683":"# gerar um gr\u00e1fico do tipo boxplot sobre uma caracter\u00edstica individual\nimport seaborn as sns\nsns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=data)","a2b1b0f7":"sns.boxplot(x=\"Species\", y=\"PetalWidthCm\", data=data)","b79433dc":"# gerar um gr\u00e1fico do tipo boxplot sobre uma caracter\u00edstica individual\nsns.boxplot(x=\"Species\", y=\"SepalLengthCm\", data=data)","bc0cbf80":"sns.boxplot(x=\"Species\", y=\"SepalWidthCm\", data=data)","a907db36":"sns.boxplot(x=\"Species\", y=\"AreaPetala\", data=data)","1d0f3d71":"sns.boxplot(x=\"Species\", y=\"AreaSepala\", data=data)","63e1f1ca":"sns.boxplot(x=\"Species\", y=\"RazaoAreas\", data=data)","4b8cbd53":"# gerar boxplot para cada uma das caracter\u00edsticas por esp\u00e9cie\ndata.boxplot(by=\"Species\", figsize=(20, 10))","6c5d6af0":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# definir par\u00e2metros extras\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set(style=\"white\", color_codes=True)\n\n\n\n# gerar gr\u00e1fico em pares com kde nas diagonais\nsns.pairplot(data, hue=\"Species\", size=3, diag_kind=\"kde\")\n\n","b6751301":"# gerar gr\u00e1fico similar usando a esp\u00e9cie na cor\nsns.FacetGrid(data, hue=\"Species\", size=5) \\\n   .map(plt.scatter, \"AreaPetala\", \"PetalWidthCm\") \\\n   .add_legend()\n\n","534d4df1":"\n\n# gerar gr\u00e1fico similar usando a esp\u00e9cie na cor\nsns.FacetGrid(data, hue=\"Species\", size=5) \\\n   .map(plt.scatter, \"AreaPetala\", \"PetalLengthCm\") \\\n   .add_legend()\n\n","53a4c007":"# gerar gr\u00e1fico similar usando a esp\u00e9cie na cor\nsns.FacetGrid(data, hue=\"Species\", size=5) \\\n   .map(plt.scatter, \"PetalLengthCm\", \"PetalWidthCm\") \\\n   .add_legend()","38b23077":"# gerar mapa de calor com a correla\u00e7\u00e3o das caracter\u00edsticas\nsns.heatmap(data.corr(), annot=True, cmap='cubehelix_r')\n\n","658c1330":"# importar pacotes necess\u00e1rios\nimport numpy as np\n\n\n# importar pacotes usados na sele\u00e7\u00e3o do modelo e na medi\u00e7\u00e3o da precis\u00e3o\nfrom sklearn.model_selection import train_test_split\n\n# importar os pacotes necess\u00e1rios para os algoritmos de classifica\u00e7\u00e3o\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# definir dados de entrada\n\nX = data.drop(['Species'], axis=1) # tudo, exceto a coluna alvo\ny = data['Species'] # apenas a coluna alvo\n\nprint('Forma dos dados originais:', X.shape, y.shape)\n\n\n\n","1eb5e350":"# separarar dados para fins de treino (70%) e de teste (30%)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint('Forma dos dados separados:', X_train.shape, X_test.shape, y_train.shape, y_test.shape)\n\n","b79ebc4c":"# A) Support Vector Machine (SVM)\n\nmodel = SVC()\n\nmodel.fit(X_train, y_train)\nscore = model.score(X_test, y_test) * 100\n\nprint(model, '\\nScore:', score, '%')\n\n","8b366af9":"# B) Logistic Regression\n\nmodel = LogisticRegression()\n\nmodel.fit(X_train, y_train)\nscore = model.score(X_test, y_test) * 100\n\nprint(model, '\\nScore:', score, '%')","a11263fe":"# C) Decision Tree\n\nmodel = DecisionTreeClassifier()\n\nmodel.fit(X_train, y_train)\nscore = model.score(X_test, y_test) * 100\n\nprint(model, '\\nScore:', score, '%')","3b3c54f3":"# D) K-Nearest Neighbours\n\nmodel = KNeighborsClassifier(n_neighbors=3)\n\nmodel.fit(X_train, y_train)\nscore = model.score(X_test, y_test) * 100\n\nprint(model, '\\nScore:', score, '%')\n\n","5bd7f7f2":"# carregar arquivo de dados de treino\ntrain_data = data\n\n# carregar arquivo de dados de teste\ntest_data = pd.read_csv('.\/iris-newtest.csv', index_col='Id')\n\ntest_data.head()","e1bf87ff":"# definir dados de treino\n\nX_train = train_data.drop(['Species'], axis=1) # tudo, exceto a coluna alvo\ny_train = train_data['Species'] # apenas a coluna alvo\n\nprint('Forma dos dados de treino:', X_train.shape, y_train.shape)","9dcd4e9d":"# definir dados de teste\n\nX_test = test_data # tudo, j\u00e1 que n\u00e3o possui a coluna alvo\n\nprint('Forma dos dados de teste:', X_test.shape)\n\n","5e53c01a":"# Usando Logistic Regression\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nprint(model)","8c67acb6":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","93a8428f":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","c662ce91":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submission-lreg.csv')","eb8bc57a":"# Usando Decision Tree\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\nprint(model)","d01f4b63":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","cdea1131":"\n\n# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)\n\n","2116897c":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submission-dectree.csv')\n","16e77d7e":"# Usando K-Nearest Neighbours\n\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\nprint(model)","aac3728d":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","f26ef02d":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","7a78a936":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submission-KNN.csv')","7b0e0cb1":"# Usando Support Vector Machine (SVM)\n\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\nprint(model)","78b09efe":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","0ed76f7a":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","6234f480":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submission-SVM.csv')","dc5cac93":"# carregar arquivo de dados de treino\ntrain_data = data\n\n# carregar arquivo de dados de teste\ntest_data = pd.read_csv('.\/iris-test.csv', index_col='Id')\n\ntest_data.head()\n\n","51ca0eed":"# definir dados de treino\n\nX_train = train_data.drop(['AreaPetala','AreaSepala','RazaoAreas','RazaoLarg','RazaoComp','Species'], axis=1) # tudo, exceto as colunas listadas\ny_train = train_data['Species'] # apenas a coluna alvo\n\nprint('Forma dos dados de treino:', X_train.shape, y_train.shape)","516f1fbb":"# definir dados de teste\n\nX_test = test_data # tudo, j\u00e1 que n\u00e3o possui a coluna alvo\n\nprint('Forma dos dados de teste:', X_test.shape)","0b5f5ffe":"# Usando Logistic Regression\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nprint(model)","b338691f":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","19f0b182":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","4d5aaebb":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionOri-lreg.csv')","9c3d2415":"# Usando Decision Tree\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\nprint(model)","7d0221d4":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","cc9b7305":"\n\n# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)\n\n","28b1a6df":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionOri-dectree.csv')\n","dcc98ff8":"# Usando K-Nearest Neighbours\n\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\nprint(model)","1b73f5ca":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","78b44342":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","9f6562c6":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionOri-KNN.csv')","214c980e":"# Usando Support Vector Machine (SVM)\n\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\nprint(model)","a81b34c1":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","ea2a122a":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","69543011":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionOri-SVM.csv')","36191d83":"# carregar arquivo de dados de treino\ntrain_data = data\n\n# carregar arquivo de dados de teste\ntest_data = pd.read_csv('.\/iris-newtest.csv', index_col='Id')\n\ntest_data.head()","9be6ffea":"# definir dados de treino\n\nX_train = train_data.drop(['SepalLengthCm','SepalWidthCm','AreaSepala','RazaoAreas','RazaoLarg','RazaoComp','Species'], axis=1) # tudo, exceto as colunas listadas\ny_train = train_data['Species'] # apenas a coluna alvo\n\nprint('Forma dos dados de treino:', X_train.shape, y_train.shape)","b4f53ccc":"# definir dados de teste\n\nX_test = test_data.drop(['SepalLengthCm','SepalWidthCm','AreaSepala','RazaoAreas','RazaoLarg','RazaoComp'], axis=1) # tudo, exceto as colunas listadas, j\u00e1 que n\u00e3o possui a coluna alvo\n\nprint('Forma dos dados de teste:', X_test.shape)\n\n","4f872292":"# Usando Logistic Regression\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nprint(model)","2afa6646":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","2c9496b7":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","11bff89c":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSel-lreg.csv')","c7b73ed8":"# Usando Decision Tree\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\nprint(model)","29a30fcb":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","c23aa5cb":"\n\n# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)\n\n","95443f49":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSel-dectree.csv')\n","ac1eecff":"# Usando K-Nearest Neighbours\n\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\nprint(model)","eaee9412":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","83095e81":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","fd06d69f":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSel-KNN.csv')","ca3c9b20":"# Usando Support Vector Machine (SVM)\n\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\nprint(model)","7f22130d":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","8937063b":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","0dfa0f98":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSel-SVM.csv')","81033022":"# carregar arquivo de dados de treino\ntrain_data = data\n\n# carregar arquivo de dados de teste\ntest_data = pd.read_csv('.\/iris-newtest.csv', index_col='Id')\n\ntest_data.head()","2a9c7645":"# definir dados de treino\nfrom sklearn import preprocessing\n\nX_train = train_data.drop(['SepalLengthCm','SepalWidthCm','AreaSepala','RazaoAreas','RazaoLarg','RazaoComp','Species'], axis=1) # tudo, exceto as colunas listadas\ny_train = train_data['Species'] # apenas a coluna alvo\nX_train_pro=preprocessing.scale(X_train)\n\nprint('Forma dos dados de treino:', X_train.shape, y_train.shape)","bd737947":"# definir dados de teste\n\nX_test = test_data.drop(['SepalLengthCm','SepalWidthCm','AreaSepala','RazaoAreas','RazaoLarg','RazaoComp'], axis=1) # tudo, exceto as colunas listadas, j\u00e1 que n\u00e3o possui a coluna alvo\nX_test_pro=preprocessing.scale(X_test)\n\nprint('Forma dos dados de teste:', X_test.shape)\n\n","888275af":"# Usando Logistic Regression\n\nmodel = LogisticRegression()\nmodel.fit(X_train_pro, y_train)\n\nprint(model)","dae702e2":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test_pro)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","72a5356d":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","9e31e9a5":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSelPro-lreg.csv')","cc56c3ed":"# Usando Decision Tree\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train_pro, y_train)\n\nprint(model)","318f2bef":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test_pro)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","f339114d":"\n\n# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)\n\n","8f0fc80f":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSelPro-dectree.csv')\n","72e3952d":"# Usando K-Nearest Neighbours\n\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train_pro, y_train)\n\nprint(model)","2744a0c6":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test_pro)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","831f53a1":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","35f90cb5":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSelPro-KNN.csv')","8f1cbfef":"# Usando Support Vector Machine (SVM)\n\nmodel = SVC()\nmodel.fit(X_train_pro, y_train)\n\nprint(model)","cfb33b3d":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test_pro)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","5a39c2d5":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","f2618222":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSelPro-SVM.csv')","735357d2":"# carregar arquivo de dados de treino\ntrain_data = data\n\n# carregar arquivo de dados de teste\ntest_data = pd.read_csv('.\/iris-newtest.csv', index_col='Id')\n\ntest_data.head()","13c9423e":"# definir dados de treino\n\nX_train = train_data.drop(['Species'], axis=1) # tudo, exceto a coluna alvo\ny_train = train_data['Species'] # apenas a coluna alvo\n\nprint('Forma dos dados de treino:', X_train.shape, y_train.shape)","0214909f":"# definir dados de teste\n\nX_test = test_data # tudo, j\u00e1 que n\u00e3o possui a coluna alvo\n\nprint('Forma dos dados de teste:', X_test.shape)\n\n","e4f8a2c6":"# Usando K-Nearest Neighbours\n\nmodel = KNeighborsClassifier(n_neighbors=5)\nmodel.fit(X_train, y_train)\n\nprint(model)","835d3193":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","a703daeb":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","3e257d16":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submission-KNN5.csv')","9e765cf4":"# carregar arquivo de dados de treino\ntrain_data = data\n\n# carregar arquivo de dados de teste\ntest_data = pd.read_csv('.\/iris-newtest.csv', index_col='Id')\n\ntest_data.head()","acb69fb8":"# definir dados de treino\nfrom sklearn import preprocessing\n\nX_train = train_data.drop(['SepalLengthCm','SepalWidthCm','AreaSepala','RazaoAreas','RazaoLarg','RazaoComp','Species'], axis=1) # tudo, exceto as colunas listadas\ny_train = train_data['Species'] # apenas a coluna alvo\nX_train_pro=preprocessing.scale(X_train)\n\nprint('Forma dos dados de treino:', X_train.shape, y_train.shape)","94e9dfef":"# definir dados de teste\n\nX_test = test_data.drop(['SepalLengthCm','SepalWidthCm','AreaSepala','RazaoAreas','RazaoLarg','RazaoComp'], axis=1) # tudo, exceto as colunas listadas, j\u00e1 que n\u00e3o possui a coluna alvo\nX_test_pro=preprocessing.scale(X_test)\n\nprint('Forma dos dados de teste:', X_test.shape)\n\n","d13aaadc":"# Usando K-Nearest Neighbours\n\nmodel = KNeighborsClassifier(n_neighbors=5)\nmodel.fit(X_train_pro, y_train)\n\nprint(model)","c61ab9ce":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test_pro)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","38fe84d2":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","c69b6321":"# gerar arquivo CSV para o envio\nsubmission.to_csv('.\/iris-submissionSelPro-KNN5.csv')","5e25add5":"# carregar arquivo de dados de treino\ntrain_data = data\n\n# carregar arquivo de dados de teste\ntest_data = pd.read_csv('.\/iris-newtest.csv', index_col='Id')\n\ntest_data.head()","9bcb004f":"# definir dados de treino\n\nX_train = train_data.drop(['Species'], axis=1) # tudo, exceto a coluna alvo\ny_train = train_data['Species'] # apenas a coluna alvo\n\nprint('Forma dos dados de treino:', X_train.shape, y_train.shape)","80bcc9c7":"# definir dados de teste\n\nX_test = test_data # tudo, j\u00e1 que n\u00e3o possui a coluna alvo\n\nprint('Forma dos dados de teste:', X_test.shape)\n\n","7db56ed5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test_pro = scaler.transform(X_test)","34b81b3c":"from sklearn.neural_network import MLPClassifier\n\nmodel = MLPClassifier(hidden_layer_sizes = (20,20,20,20,20))\nmodel.fit(X_train, y_train)\n\nprint(model)","3c14b978":"# executar previs\u00e3o usando o modelo escolhido\ny_pred = model.predict(X_test_pro)\n\nprint('Exemplos de previs\u00f5es:\\n', y_pred[:10])","500f7ae7":"# gerar dados de envio (submiss\u00e3o)\n\nsubmission = pd.DataFrame({\n  'Id': X_test.index,\n  'Species': y_pred\n})\nsubmission.set_index('Id', inplace=True)\n\n# mostrar dados de exemplo\nsubmission.head(10)","0d2c1670":"# gerar arquivo MLP para o envio\nsubmission.to_csv('.\/iris-submissionPro-MLP5.csv')","8e81f984":"#### Usando SVM...","2529c606":"#### Usando \u00c1rvore de Decis\u00e3o...","47b9a492":"#### Usando SVM...","c9878605":"#### Usando SVM...","905b4a7c":"#### Usando Vizinhos mais Pr\u00f3ximos...","e7d32a1e":"#### Usando Regress\u00e3o...","a8d8708f":"#### Usando Regress\u00e3o...","673e57cf":"#### Usando Vizinhos mais Pr\u00f3ximos...","7f32f551":"#### Usando SVM...","7b7d48e1":"# Explora\u00e7\u00e3o dos Dados\n\nO arquivos .csv foram baixados e explorados com o uso do excel.\n\nCom os dados de treino foi possivel observar maior rela\u00e7\u00e3o das vari\u00e1veis de comprimento e largura das p\u00e9talas com a vari\u00e1vel resposta. Fazendo-se a ordena\u00e7\u00e3o dos dados pela vari\u00e1el de comprimento da p\u00e9tala, os dados de treino s\u00e3o separados quase de forma ideal. \n\nCriei as v\u00e1riaveis de \u00e1rea da p\u00e9tala e de \u00e1rea da s\u00e9pala para verificar tamb\u00e9m suas rela\u00e7\u00f5es com a vari\u00e1vel resposta (atrav\u00e9s da ordena\u00e7\u00e3o dos dados pelas vari\u00e1veis criadas). Visualmente foi poss\u00edvel verificar maior rela\u00e7\u00e3o na vari\u00e1vel correspondente \u00e0 \u00e1rea da p\u00e9tala.\n\nPor fim, criei mais uma vari\u00e1vel com a raz\u00e3o entre as \u00e1reas da petala\/s\u00e9pala , assim como as raz\u00f5es entre seus comprimentos e larguras, que tamb\u00e9m demonstraram forte rela\u00e7\u00e3o com a vari\u00e1vel resposta.\n\nEssas novas vari\u00e1veis ser\u00e3o testadas na constru\u00e7\u00e3o do modelo em conjunto com as vari\u00e1veis existentes.\n\nA id\u00e9ia ser\u00e1 realizar o estudo em tr\u00eas etapas: utilizando somente as vari\u00e1veis propostas pelo exerc\u00edcio; utilizando as vari\u00e1veis propostas pelo exerc\u00edcio em conjunto com as vari\u00e1veis criadas; e outra utilizando somente as vari\u00e1veis com forte correla\u00e7\u00e3o observada.","82f60bd2":"#### Usando \u00c1rvore de Decis\u00e3o...","8d725540":"#### Usando Vizinhos mais Pr\u00f3ximos...","8fc1d135":"#### Usando Vizinhos mais Pr\u00f3ximos...","176f3ed2":"#### Usando Vizinhos mais Pr\u00f3ximos...","3332289f":"#### Refazendo o Modelo, com padroniza\u00e7\u00e3o dos dados...","909f855c":"#### Para todas as submiss\u00f5es, o score encontrado foi de 0,93.\n#### Gerando os arquivos para cada para submiss\u00e3o apenas com vari\u00e1veis originais...\nNo arquivo de teste ser\u00e3o usados apenas vari\u00e1veis originais do problema proposto.","b8c9c0d3":"#### Usando \u00c1rvore de Decis\u00e3o...","6217cca6":"#### O score encontrado foi inferior aos encontrados com as demais vari\u00e1veis.\n#### Gerando os arquivos para cada para submiss\u00e3o apenas com vari\u00e1veis selecionadas...\nNo arquivo de teste ser\u00e3o usados apenas vari\u00e1veis que apresentaram maior poder de classifica\u00e7\u00e3o de acordo com a an\u00e1lise gr\u00e1fica. S\u00e3o elas: PetalLengthCm, PetalWidthCm e AreaPetala.","52fe727a":"#### Usando Regress\u00e3o...","053ab0a6":"#### Preparando os dados e criando o modelo","ef4cafa6":"### Utilizando Redes Neurais no arquivo completo","5b776ea4":"### Utilizando KNN com vari\u00e1veis selecionadas e 5 vizinhos","ccc9a4af":"# Iniciando a Modelagem Preditiva","435e6311":"#### Usando Vizinhos mais Pr\u00f3ximos...","8e892c10":"### Utilizando KNN no arquivo completo com 5 vizinhos","7241ddd5":"#### Usando \u00c1rvore de Decis\u00e3o...","4413c77a":"#### Usando Regress\u00e3o...","0d8753f1":"#### Para todas as t\u00e9cnicas testadas, o score encontrado foi de 100%.\n#### Gerando os arquivos para submiss\u00e3o...\nO arquivo de teste foi acrescido das vari\u00e1veis AreaPetala, AreaSepala, RazaoAreas, RazaoComp, RazaoLarg.\n"}}