{"cell_type":{"e2275d5c":"code","84f45c2f":"code","270b6140":"code","0d7c35ca":"code","b62c23b8":"code","14ef6e05":"code","461d2fac":"code","6d7f4b2d":"code","3ad08828":"code","736db3e3":"code","b1b443e5":"code","5021245e":"code","57b551d7":"code","39e9e4e8":"code","4965eab4":"code","56e1c21a":"code","c5413a2b":"code","5db2669d":"code","7367ea7a":"code","6f7357ad":"code","f7fd4aa7":"code","1eba0d86":"code","1229686a":"code","7e10bf6b":"code","838421ac":"code","cafffd2b":"code","902a5d37":"code","12224a8b":"code","4d7effd7":"code","739382b3":"code","d0cab280":"code","b93dc793":"code","ac04d554":"code","2772fa9f":"code","c6550213":"code","87eeb1df":"code","8d960e29":"code","5369729c":"code","a71eb3f3":"code","a08a1331":"code","7f8e7eb9":"code","b92a991e":"code","5a016868":"code","2861382f":"code","8a8cfcb7":"code","81c38efd":"code","0efe477e":"code","e091d740":"markdown","dcffea7c":"markdown","46bd2e1d":"markdown","3fae14aa":"markdown","f5a98760":"markdown","dfe47722":"markdown","61c345d0":"markdown","77d2187f":"markdown","042f8df8":"markdown"},"source":{"e2275d5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","84f45c2f":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport glob\nimport matplotlib.image as mpimg\nfrom PIL import Image\nfrom tqdm import tqdm\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import (\n        vgg16,\n        resnet50,\n        inception_v3)\nfrom tensorflow.keras.layers.experimental import preprocessing\nfrom tensorflow.keras import layers","270b6140":"train_dir = '..\/input\/cassava-leaf-disease-classification\/train_images'\ntest_dir = '..\/input\/cassava-leaf-disease-classification\/test_images'\ntrain_names = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv',dtype=str)","0d7c35ca":"print(train_names.head())\nprint(len(train_names))","b62c23b8":"plt.figure(figsize=(8,8), num=0)\nfor cntr, filename in enumerate(glob.iglob(train_dir + '**\/*.jpg', recursive=True)):\n    if cntr == 9:\n        image = Image.open(filename)\n        image_shape = np.array(image).shape\n        print(f'The shape of the images is: {image_shape}')\n        break\n    elif cntr < 9:\n        img = mpimg.imread(filename)\n        plt.subplot(3,3,cntr+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.imshow(img)\nplt.show()","14ef6e05":"batch_size = 256\nimg_height = image_shape[0]\nimg_width = image_shape[1]","461d2fac":"train_datagen = ImageDataGenerator(\n        rescale=1.\/255)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","6d7f4b2d":"train_names.head()","3ad08828":"train_datagen = ImageDataGenerator(rescale=1.\/255.,validation_split=0.2)","736db3e3":"train_generator = train_datagen.flow_from_dataframe(\ndataframe = train_names,\ndirectory = train_dir,\nx_col = \"image_id\",\ny_col = \"label\",\nsubset = \"training\",\nbatch_size = batch_size,\nseed = 42,\nshuffle = True,\nclass_mode = \"sparse\",\ntarget_size = (img_height, img_width))","b1b443e5":"valid_generator = train_datagen.flow_from_dataframe(\ndataframe = train_names,\ndirectory = train_dir,\nx_col = \"image_id\",\ny_col = \"label\",\nsubset = \"validation\",\nbatch_size = batch_size,\nseed = 42,\nshuffle = True,\nclass_mode = \"sparse\",\ntarget_size = (img_height, img_width))","5021245e":"# Will be given to us at the end...","57b551d7":"image_batch, labels_batch = next(iter(train_generator))","39e9e4e8":"labels_batch","4965eab4":"plt.figure(figsize=(14,14), num=1)\nfor i in range(32):\n    \n#     max_value = max(labels_batch[i])\n#     labels_list = list(labels_batch[i])\n#     max_index = labels_list.index(max_value)\n    max_index = labels_batch[i]\n    plt.subplot(8,4,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(image_batch[i])\n    plt.title(max_index)\nplt.show()","56e1c21a":"image_batch, labels_batch = next(iter(train_generator))","c5413a2b":"print(image_batch.shape)\nprint(labels_batch.shape)","5db2669d":"image_batch, labels_batch = next(iter(valid_generator))","7367ea7a":"print(image_batch.shape)\nprint(labels_batch.shape)","6f7357ad":"labels_batch","f7fd4aa7":"plt.figure(figsize=(14,14), num=1)\nfor i in range(32):\n    \n#     max_value = max(labels_batch[i])\n#     labels_list = list(labels_batch[i])\n#     max_index = labels_list.index(max_value)\n    max_index = labels_batch[i]\n\n    plt.subplot(8,4,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(image_batch[i])\n    plt.title(max_index)\nplt.show()","1eba0d86":"def my_block(inputs, block_name='MyBlock'):\n    if block_name == 'MyBlock':\n        with tf.name_scope(block_name):\n            conv = layers.Conv2D(filters=3, strides=2, kernel_size=2, padding='same')(inputs)\n            bn = layers.BatchNormalization()(conv)\n            relu = layers.ReLU()(bn)\n            return relu\n    \n    elif block_name == 'MyEnd':\n        with tf.name_scope(block_name):\n            conv = layers.Conv2D(filters=3, strides=2, kernel_size=2, padding='same')(inputs)\n            bn = layers.BatchNormalization()(conv)\n            relu = layers.ReLU()(bn)\n            return relu","1229686a":" def preprocessing_layer(inputs, block_name='MyPre'):\n    with tf.name_scope(block_name):\n        pre = preprocessing.Resizing(int(224*4), int(224*4), interpolation='bilinear')(inputs)\n        pre = preprocessing.RandomFlip('horizontal')(pre)\n        pre = preprocessing.RandomFlip('vertical')(pre)\n        pre = preprocessing.RandomContrast(0.5)(pre) \n    return pre","7e10bf6b":"resnet_model = resnet50.ResNet50(weights='imagenet')\nfor layer in resnet_model.layers[:161]:\n    layer.trainable = False","838421ac":"inputs = keras.Input(shape=(img_height, img_width, 3))","cafffd2b":"x = preprocessing_layer(inputs, block_name='MyPre')\nx = my_block(x, block_name='MyBlock')\nx = my_block(x, block_name='MyEnd')\n\n# x = resnet_model(x)\n\nx = layers.GlobalAveragePooling2D()(x)\n\nx = layers.Dense(100, activation='relu')(x)\noutputs = layers.Dense(5, activation='relu')(x)","902a5d37":"model = keras.Model(inputs=inputs, outputs=outputs)","12224a8b":"model.summary()","4d7effd7":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","739382b3":"train_samples = train_generator.samples\nvalid_samples = valid_generator.samples","d0cab280":"print(train_samples, valid_samples)","b93dc793":"history = model.fit(\n        train_generator,\n        steps_per_epoch = np.ceil(train_samples \/ batch_size),\n        epochs = 5,\n        validation_data = valid_generator,\n        validation_steps = np.ceil(valid_samples \/ batch_size))","ac04d554":"history_frame = pd.DataFrame(history.history)\n\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['accuracy', 'val_accuracy']].plot();","2772fa9f":"test_datagen = ImageDataGenerator(rescale=1.\/255.)\ntest_dir = '..\/input\/cassava-leaf-disease-classification\/test_images'","c6550213":"file_list = [i.split('\/')[-1] for i in glob.glob(test_dir + \"\/*.jpg\")]\nlabels = ['0' for i in range(len(file_list))]","87eeb1df":"d = {'image_id': file_list, 'label': labels}\ndf = pd.DataFrame(data=d)","8d960e29":"train_names.label[0]","5369729c":"df.label[0]","a71eb3f3":"test_generator = test_datagen.flow_from_dataframe(\ndataframe = df,\ndirectory = test_dir,\nx_col = \"image_id\",\ny_col = \"label\",\nsubset = \"training\",\nbatch_size = 1,\nseed = 42,\nshuffle = True,\nclass_mode = \"sparse\",\ntarget_size = (img_height, img_width))","a08a1331":"filenames = test_generator.filenames\nnb_samples = len(filenames)","7f8e7eb9":"predictions = model.predict(test_generator,steps = nb_samples)","b92a991e":"predictions = np.argmax(predictions, axis=1) ","5a016868":"predictions","2861382f":"df.label = predictions","8a8cfcb7":"df","81c38efd":"plt.imshow(image_batch[0])","0efe477e":"df.to_csv('submission.csv', index=False)","e091d740":"# Import libraries","dcffea7c":"# Constructing the train generator","46bd2e1d":"# Building the Model","3fae14aa":"# Iterating over our Data and plotting it\n## Now the data and labels are together!","f5a98760":"# Constructing the test generator","dfe47722":"# Plot the Data\n\nFirst we will want to visualize our data","61c345d0":"# Load Data","77d2187f":"# Predictions on the test Data","042f8df8":"# Exhibition of our results"}}