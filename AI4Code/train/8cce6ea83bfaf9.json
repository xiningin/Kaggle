{"cell_type":{"7e0aedf5":"code","1bde59d4":"code","a6aa6fea":"code","9fbb1a60":"code","494bf43b":"code","7de27aef":"code","c8e74833":"code","c2da6e5b":"code","24babeaf":"code","98f3f92e":"code","0c64dd56":"code","4d5eab8e":"code","be8eae2b":"code","bacf2d70":"code","c7d44bd0":"code","67cc44b0":"code","53089b47":"code","8a1253d7":"code","d0d4fc4b":"code","7660ca50":"code","9da6dd88":"code","09bdb178":"code","42bb6245":"markdown","7acfbf9d":"markdown","6475661f":"markdown","ffd167a8":"markdown","3756a7dc":"markdown"},"source":{"7e0aedf5":"import matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd\nimport cv2,math,gc\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import transforms\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision.models as models\nfrom torch.nn import Parameter\n\n!pip install \"..\/input\/efficient-net\/dist\/efficientnet_pytorch-0.7.0.tar\"\nfrom efficientnet_pytorch import EfficientNet\n\n!pip install \"..\/input\/faissgpuwheel\/faiss_gpu-1.7.0-cp37-cp37m-manylinux2014_x86_64.whl\"\nimport faiss\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nimport cudf, cuml, cupy\nfrom cuml.feature_extraction.text import TfidfVectorizer\nfrom cuml.neighbors import NearestNeighbors\n\nimport warnings\nwarnings.simplefilter('ignore')\n\ntorch.backends.cudnn.benchmark = True","1bde59d4":"class cfg:\n    img_size = (380,380)\n    feavec_num1 = 512\n    feavec_num2 = 1280\n    fea_norm = 64\n    margin = 0.35\n    batch = 50\n    wpath = [\"..\/input\/shopee-weight\/w_eff6_s380_cl8812_fold1_v2.pt\",\n             \"..\/input\/shopee-weight\/w_effb3_s380_cl8811_fold2_0.80.pt\",\n             \"..\/input\/shopee-weight\/w_effb5_s380_cl8811_fold3.pt\",\n             \"..\/input\/shopee-weight\/w_effb4_s380_cl8811_fold4.pt\",\n             \"..\/input\/shopee-weight\/w_effb3_s380_cl8811_fold5_m0.35.pt\"]\n    mname = ['efficientnet-b6','efficientnet-b3','efficientnet-b5','efficientnet-b4','efficientnet-b3']\n    clsize = [8812,8811,8811,8811,8811]","a6aa6fea":"COMPUTE_CV = False\n\n#make target clustering\nif COMPUTE_CV:\n    df = pd.read_csv(\"..\/input\/shopee-product-matching\/train.csv\")\n    tmp = df.groupby('label_group').posting_id.agg('unique').to_dict()\n    df['target'] = df.label_group.map(tmp)\n    df['target'] = df['target'].apply(lambda x: ' '.join(x))\n    df_cu = cudf.DataFrame(df)\nelse:\n    df = pd.read_csv(\"..\/input\/shopee-product-matching\/test.csv\")\n    df_cu = cudf.DataFrame(df)\n    if len(df)==3:\n        cfg.batch = 3\n    \nprint('df shape is', df.shape )\ndf.head()","9fbb1a60":"class ArcMarginProduct(nn.Module):\n    def __init__(self, in_features, out_features, s=30.0, m=0.30, easy_margin=False):\n        super(ArcMarginProduct, self).__init__()\n        self.in_features = in_features\n        self.out_features = out_features\n        self.s = s\n        self.m = m\n        self.weight = Parameter(torch.FloatTensor(out_features, in_features))\n        nn.init.xavier_uniform_(self.weight)\n\n        self.easy_margin = easy_margin\n        self.cos_m = math.cos(m)\n        self.sin_m = math.sin(m)\n        self.th = math.cos(math.pi - m)\n        self.mm = math.sin(math.pi - m) * m\n\n    def forward(self, input, label):\n        # --------------------------- cos(theta) & phi(theta) ---------------------------\n        cosine = F.linear(F.normalize(input), F.normalize(self.weight))\n        sine = torch.sqrt((1.0 - torch.pow(cosine, 2)).clamp(0, 1))\n        phi = cosine * self.cos_m - sine * self.sin_m\n        if self.easy_margin:\n            phi = torch.where(cosine > 0, phi, cosine)\n        else:\n            phi = torch.where(cosine > self.th, phi, cosine - self.mm)\n        # --------------------------- convert label to one-hot ---------------------------\n        one_hot = torch.zeros(cosine.size(), device=device)\n        one_hot.scatter_(1, label.view(-1, 1).long(), 1)\n        output = (one_hot * phi) + ((1.0 - one_hot) * cosine)  # you can use torch.where if your torch.__version__ is 0.4\n        output *= self.s\n        return output\n\n\nclass Model(nn.Module):\n    def __init__(self,name,clustersize,feavec=512):\n        super(Model, self).__init__()\n        self.eff = EfficientNet.from_name(name)\n        self.out = nn.Linear(1000,feavec)\n        self.margin = ArcMarginProduct(in_features=feavec, \n                                       out_features = clustersize, \n                                       s=cfg.fea_norm, \n                                       m=cfg.margin)      \n\n    def forward(self, x, labels=None):\n        x = self.eff(x)\n        x = self.out(x)\n        if labels is not None:\n            return self.margin(x,labels)\n        return F.normalize(x,dim=1)","494bf43b":"model1 = Model(name=cfg.mname[0],clustersize=cfg.clsize[0]).to(device).half()\nmodel1.load_state_dict(torch.load(cfg.wpath[0], map_location=device))\n\nmodel2 = Model(name=cfg.mname[1],clustersize=cfg.clsize[1]).to(device).half()\nmodel2.load_state_dict(torch.load(cfg.wpath[1], map_location=device))\n\nmodel3 = Model(name=cfg.mname[2],clustersize=cfg.clsize[2]).to(device).half()\nmodel3.load_state_dict(torch.load(cfg.wpath[2], map_location=device))\n\nmodel4 = Model(name=cfg.mname[3],clustersize=cfg.clsize[3]).to(device).half()\nmodel4.load_state_dict(torch.load(cfg.wpath[3], map_location=device))\n\nmodel5 = Model(name=cfg.mname[4],clustersize=cfg.clsize[4]).to(device).half()\nmodel5.load_state_dict(torch.load(cfg.wpath[4], map_location=device))","7de27aef":"# make image Datasets\ndef load_image(file_name):\n    if COMPUTE_CV:\n        file_path = f'\/kaggle\/input\/shopee-product-matching\/train_images\/{file_name}'\n    else:\n        file_path = f'\/kaggle\/input\/shopee-product-matching\/test_images\/{file_name}'\n\n    img = cv2.imread(file_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize(img, cfg.img_size)\n    tensor_img = torch.tensor(img)\n    tensor_img = tensor_img.permute(( 2, 0, 1)).float()\/255.0\n    return tensor_img\n\nclass valDataset(Dataset):\n    def __init__(self, df):\n        self.img = df.image.values\n        \n    def __len__(self):\n        return len(self.img)\n\n    def __getitem__(self, idx):\n        img = self.img[idx]\n        img = load_image(img)\n        return img","c8e74833":"def image_embeddings(df):\n    dataset = valDataset(df)\n    loader = DataLoader(dataset,\n                        batch_size=cfg.batch,\n                        shuffle=False,\n                        num_workers=2,\n                        pin_memory=True,\n                        drop_last=False)\n    \n    model1.eval()\n    model2.eval()\n    model3.eval()\n    model4.eval()\n    model5.eval()\n    print('start collection')\n    feavec = 512\n    embedded1 = np.empty((0,feavec),dtype='float32')\n    embedded2 = np.empty((0,feavec),dtype='float32')\n    embedded3 = np.empty((0,feavec),dtype='float32')\n    embedded4 = np.empty((0,feavec),dtype='float32')\n    embedded5 = np.empty((0,feavec),dtype='float32')\n    with torch.no_grad():\n        for idx,images in enumerate(loader):\n            images = images.to(device,non_blocking=True).half()\n            outputs = model1(images)\n            embedded1 = np.append(embedded1, outputs.cpu().detach().numpy(),axis=0)\n            outputs = model2(images)\n            embedded2 = np.append(embedded2, outputs.cpu().detach().numpy(),axis=0)\n            outputs = model3(images)\n            embedded3 = np.append(embedded3, outputs.cpu().detach().numpy(),axis=0)\n            outputs = model4(images)\n            embedded4 = np.append(embedded4, outputs.cpu().detach().numpy(),axis=0)\n            outputs = model5(images)\n            embedded5 = np.append(embedded5, outputs.cpu().detach().numpy(),axis=0)\n\n            if idx%100==0:\n                print(idx,len(loader)) \n                print(embedded1.shape)\n                print(embedded2.shape)\n                print(embedded3.shape)\n                print(embedded4.shape)\n                print(embedded5.shape)\n    #del model1,model2,model3,model4\n    return embedded1,embedded2,embedded3,embedded4,embedded5","c2da6e5b":"def f1_score(y_true, y_pred):\n    y_true = y_true.apply(lambda x: set(x.split()))\n    y_pred = y_pred.apply(lambda x: set(x.split()))\n    intersection = np.array([len(x[0] & x[1]) for x in zip(y_true, y_pred)])\n    len_y_pred = y_pred.apply(lambda x: len(x)).values\n    len_y_true = y_true.apply(lambda x: len(x)).values\n    f1 = 2 * intersection \/ (len_y_pred + len_y_true)\n    return f1\n\ndef predict_img(df,embeddings,topk=50,threshold=0.63):\n    N,D = embeddings.shape\n    cpu_index = faiss.IndexFlatL2(D)\n    gpu_index = faiss.index_cpu_to_all_gpus(cpu_index)\n    gpu_index.add(embeddings)\n    cluster_distance,cluster_index = gpu_index.search(x=embeddings, k=topk)\n    \n    df['pred_images'] = ''\n    pred = []\n    for k in range(embeddings.shape[0]):\n        idx = np.where(cluster_distance[k,] < threshold)[0]\n        ids = cluster_index[k,idx]\n        #posting_ids = ' '.join(df['posting_id'].iloc[ids].values)\n        posting_ids = df['posting_id'].iloc[ids].values\n        pred.append(posting_ids)\n    df['pred_images'] = pred\n    if COMPUTE_CV:\n        df['pred_imgonly'] = df.pred_images.apply(lambda x: ' '.join(x))\n        df['f1_img'] = f1_score(df['target'], df['pred_imgonly'])\n        score = df['f1_img'].mean()\n        print(f'Our f1 score for threshold {threshold} is {score}')\n    return df\n\ndef predict_text(df,embeddings,topk=50,threshold=0.63):\n    N,D = embeddings.shape\n    cpu_index = faiss.IndexFlatL2(D)\n    gpu_index = faiss.index_cpu_to_all_gpus(cpu_index)\n    gpu_index.add(embeddings)\n    cluster_distance,cluster_index = gpu_index.search(x=embeddings, k=topk)\n    \n    df['pred_text'] = ''\n    pred = []\n    for k in range(embeddings.shape[0]):\n        idx = np.where(cluster_distance[k,] < threshold)[0]\n        ids = cluster_index[k,idx]\n        #posting_ids = ' '.join(df['posting_id'].iloc[ids].values)\n        posting_ids = df['posting_id'].iloc[ids].values\n        pred.append(posting_ids)\n    df['pred_text'] = pred\n    if COMPUTE_CV:\n        df['pred_textonly'] = df.pred_images.apply(lambda x: ' '.join(x))\n        df['f1_text'] = f1_score(df['target'], df['pred_textonly'])\n        score = df['f1_text'].mean()\n        print(f'Our f1 score for threshold {threshold} is {score}')\n    return df","24babeaf":"def get_text_predictions(df, max_features = 25000,threshold=0.7):\n    from cuml.feature_extraction.text import TfidfVectorizer\n    model = TfidfVectorizer(stop_words = 'english', binary = True, max_features = max_features)\n    text_embeddings = model.fit_transform(df_cu.title).toarray()\n    #print(text_embeddings)\n    preds = []\n    CHUNK = 1024*4\n\n    print('Finding similar titles...')\n    CTS = len(df)\/\/CHUNK\n    if len(df)%CHUNK!=0: CTS += 1\n    for j in range( CTS ):\n\n        a = j*CHUNK\n        b = (j+1)*CHUNK\n        b = min(b,len(df))\n        print('chunk',a,'to',b)\n\n        # COSINE SIMILARITY DISTANCE\n        cts = cupy.matmul( text_embeddings, text_embeddings[a:b].T).T\n\n        for k in range(b-a):\n            IDX = cupy.where(cts[k,]>threshold)[0]\n            o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n            preds.append(o)\n    df['pred_text'] = preds\n    del model,text_embeddings\n    gc.collect()\n    if COMPUTE_CV:\n        df['pred_textonly'] = df.pred_text.apply(lambda x: ' '.join(x))\n        df['f1_text'] = f1_score(df['target'], df['pred_textonly'])\n        score = df['f1_text'].mean()\n        print(f'Our f1 score for threshold {threshold} is {score}')\n    return df","98f3f92e":"class textvalDataset(Dataset):\n    def __init__(self, textlist):\n        self.text = textlist\n        \n    def __len__(self):\n        return len(self.text)\n\n    def __getitem__(self, idx):\n        text = torch.tensor(self.text[idx])\n        text = text.float()\n        return text\n\nclass Model(nn.Module):\n    def __init__(self,clustersize,feavec=512):\n        super(Model, self).__init__()\n        self.linear1 = nn.Linear(24939,4000)\n        self.linear2 = nn.Linear(4000,feavec)\n        self.dropout = nn.Dropout(p=0.5)\n        self.relu = nn.ReLU()\n        self.margin = ArcMarginProduct(in_features=feavec, \n                                       out_features = clustersize, \n                                       s=64, \n                                       m=0.7)      \n\n    def forward(self, x, labels=None):\n        x = self.linear1(x)\n        #x = self.relu(x)\n        x = self.linear2(x)\n        #x = self.relu(x)\n        x = self.dropout(x)\n        if labels is not None:\n            return self.margin(x,labels)\n        return F.normalize(x,dim=1)\n    \n\ndef get_deeptext_predictions(df):\n    from sklearn.feature_extraction.text import TfidfVectorizer\n    df_t = pd.read_csv(\"..\/input\/shopee-product-matching\/train.csv\")\n    models = TfidfVectorizer(stop_words = 'english', binary = True, max_features = 24939)\n    models.fit(pd.concat([df,df_t],axis=0).title)\n    text = models.transform(df.title).toarray()\n    batch = 100\n    if len(df)==3:\n        batch=3\n    test_dataset = textvalDataset(text)\n    test_loader = DataLoader(test_dataset,\n                            batch_size=batch,\n                            shuffle=False,\n                            num_workers=2,\n                            pin_memory=True)\n    model_t1 = Model(8811)\n    model_t2 = Model(8811)\n    model_t1 = model_t1.to(device)\n    model_t2 = model_t2.to(device)\n    model_t1.load_state_dict(torch.load('..\/input\/shopee-weight\/w_lin_e5_fold1.pt'))\n    model_t2.load_state_dict(torch.load('..\/input\/shopee-weight\/w_lin_e5_fold2.pt'))\n    #model.load_state_dict(torch.load('..\/input\/shopee-weight-text\/w_lin_e5_fold0.pt'))\n    model_t1.eval()\n    model_t2.eval()\n    print('start collection')\n    embedded1 = np.empty((0,512),dtype='float32')\n    embedded2 = np.empty((0,512),dtype='float32')\n    with torch.no_grad():\n        for idx,(images) in enumerate(test_loader):\n            images = images.to(device,non_blocking=True)\n            outputs = model_t1(images)\n            embedded1 = np.append(embedded1, outputs.cpu().detach().numpy(),axis=0)\n            outputs = model_t2(images)\n            embedded2 = np.append(embedded2, outputs.cpu().detach().numpy(),axis=0)\n\n            if idx%100==0:\n                print(idx,len(test_loader)) \n                print(embedded1.shape)\n                print(embedded2.shape)\n    print(embedded1.shape,embedded2.shape)\n    return embedded1,embedded2","0c64dd56":"text_embeddings1, text_embeddings2 = get_deeptext_predictions(df)","4d5eab8e":"image_embeddings1,image_embeddings2,image_embeddings3, image_embeddings4, image_embeddings5 = image_embeddings(df)\n\n#image_embeddings2 = image_embeddings(df,cfg.wpath2,cfg.mname2,cfg.feavec_num1)\n#image_embeddings3 = image_embeddings(df,cfg.wpath3,cfg.mname3,cfg.feavec_num1)","be8eae2b":"embed_reuse = False\nif embed_reuse:\n    image_embeddings1 = np.load(\"..\/input\/shopeeinferoutput\/fold1_512.npy\")\n    image_embeddings2 = np.load(\"..\/input\/shopeeinferoutput\/fold2_512.npy\")\n    image_embeddings3 = np.load(\"..\/input\/shopeeinferoutput\/fold3_512.npy\")\n    image_embeddings4 = np.load(\"..\/input\/shopeeinferoutput\/fold4_512.npy\")\n    image_embeddings5 = np.load(\"..\/input\/shopeeinferoutput\/fold5_512.npy\")","bacf2d70":"w = np.array([1.2,0.8,1.1,0.8,0.7])\nimage_embeddings = (w[0]*image_embeddings1+w[1]*image_embeddings2+w[2]*image_embeddings3+w[3]*image_embeddings4+w[4]*image_embeddings5)\/w.sum()\nwt = np.array([1,1])\ntext_embeddings = (wt[0]*text_embeddings1+wt[1]*text_embeddings2)\/wt.sum()\nimg_text_embeddings = (image_embeddings + 0.4*text_embeddings)\/1.4","c7d44bd0":"#image_embeddings = np.average([image_embeddings1, image_embeddings2, image_embeddings3, image_embeddings4, image_embeddings5], axis = 0)\n#w = np.array([0.80,1.05,1.4,1.05,1.15])\n#image_embeddings = np.average([image_embeddings2, image_embeddings3, image_embeddings4], axis = 0)\n#image_embeddings = np.average([image_embeddings3, image_embeddings4], axis = 0)\nif COMPUTE_CV:\n    df = predict_img(df,image_embeddings1,topk=50,threshold=0.88)\n    df = predict_img(df,image_embeddings2,topk=50,threshold=0.88)\n    df = predict_img(df,image_embeddings3,topk=50,threshold=0.88)\n    df = predict_img(df,image_embeddings4,topk=50,threshold=0.88)\n    df = predict_img(df,image_embeddings5,topk=50,threshold=0.88)\n    df = predict_img(df,image_embeddings,topk=50,threshold=0.196)\n    df = predict_img(df,img_text_embeddings,topk=50,threshold=0.138)","67cc44b0":"if COMPUTE_CV:\n    np.save('fold1_512.npy', image_embeddings1)\n    np.save('fold2_512.npy', image_embeddings2)\n    np.save('fold3_512.npy', image_embeddings3)\n    np.save('fold4_512.npy', image_embeddings4)\n    np.save('fold5_512.npy', image_embeddings5)","53089b47":"#2,3,4\n#df = predict_img(df,image_embeddings,topk=50,threshold=0.13)\ndf = predict_img(df,img_text_embeddings,topk=50,threshold=0.11)\n#3,4\n#df = predict_img(df,image_embeddings,topk=50,threshold=0.30)\n\n#df = predict_img(df,image_embeddings,topk=50,threshold=0.60)","8a1253d7":"theresholds=np.linspace(0.13,0.15,10)\nif COMPUTE_CV:\n    #for topk in [49,50,51,60]:\n    for threshold in theresholds:\n        df = predict_img(df,img_text_embeddings,topk=50,threshold=threshold)","d0d4fc4b":"df = get_text_predictions(df, max_features = 25000,threshold=0.75)\ndf.head()","7660ca50":"def combine_predictions(row):\n    x = np.concatenate([row['pred_images'], row['pred_text']])\n    return ' '.join( np.unique(x) )","9da6dd88":"df['matches'] = df.apply(combine_predictions, axis=1)\n#df['matches'] = df['pred_images'].apply(lambda x: ' '.join(x))\nif COMPUTE_CV:\n    df['f1'] = f1_score(df['target'], df['matches'])\n    score = df['f1'].mean()\n    print(f'Final f1 score is {score}')\nelse:\n    with open('submission.csv', 'w') as outf:\n        print('posting_id,matches', file=outf)\n        for i,(idnum,match) in enumerate(zip(df['posting_id'],df['matches'])):\n            print(f'{idnum},{match}', file=outf)","09bdb178":"df_t = pd.read_csv(\"submission.csv\")\nprint(df_t)","42bb6245":"# Use Text Embeddings","7acfbf9d":"# combine_predictions","6475661f":"# Carry out image prediction","ffd167a8":"# Carry out text predictions","3756a7dc":"# Use Image Embeddings"}}