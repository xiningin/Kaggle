{"cell_type":{"710d7cde":"code","e233ec39":"code","5fae7111":"code","97f7e68b":"code","1fa66d22":"code","5cf1e36e":"code","1d9b50a8":"code","472523c8":"code","701dcd23":"code","04b57cae":"code","be38af50":"code","acc11e17":"code","5b8ea8d2":"code","ae422944":"code","03fe2dca":"code","3e794554":"code","f63d031d":"code","e228db47":"code","7699346b":"code","a4cc8370":"markdown","3f591c68":"markdown","569419bf":"markdown","0ad9dc70":"markdown","21a9b4ec":"markdown"},"source":{"710d7cde":"# rewrite using bigquery helper\n\n# write a compelling story\n\n# hide codes in your final notebook","e233ec39":"from google.cloud import bigquery\nfrom bq_helper import BigQueryHelper\nimport pandas as pd","5fae7111":"bq_assistant = BigQueryHelper(\"patents-public-data\", \"patents\")","97f7e68b":"# Create a \"Client\" object\nclient = bigquery.Client()","1fa66d22":"# Construct a reference to the \"patents\" dataset\ndataset_ref = client.dataset(\"patents\", project=\"patents-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)","5cf1e36e":"# List all the tables in the \"patents\" dataset\ntables = list(client.list_tables(dataset))\n\n# Print names of all tables in the dataset\nfor table in tables:  \n    print(table.table_id)","1d9b50a8":"# Construct a reference to the \"publications\" table\ntable_ref = dataset_ref.table(\"publications\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"publications\" table\nclient.list_rows(table, max_results=5).to_dataframe()","472523c8":"query = \"\"\"\n        #standardSQL\n        SELECT AVG(num_inventors), COUNT(*) AS cnt, country_code, filing_year, STRING_AGG(publication_number LIMIT 10) AS example_publications\n        FROM (\n          SELECT ANY_VALUE(publication_number) AS publication_number, ANY_VALUE(ARRAY_LENGTH(inventor)) AS num_inventors, ANY_VALUE(country_code) AS country_code, ANY_VALUE(CAST(FLOOR(filing_date \/ (5*10000)) AS INT64))*5 AS filing_year\n          FROM `patents-public-data.patents.publications` AS pubs\n          WHERE filing_date > 19000000 AND ARRAY_LENGTH(inventor) > 0\n          GROUP BY application_number\n        )\n        GROUP BY filing_year, country_code\n        HAVING cnt > 100\n        ORDER BY filing_year\n        \"\"\"","701dcd23":"# Only run the query if it's less than 10 GB\nTEN_GB = 1000*1000*10000\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=TEN_GB)","04b57cae":"try:\n    job_post_scores = pd.read_csv('job_post_scores.csv')\nexcept:\n    # Set up the query \n    safe_query_job = client.query(query, job_config=safe_config)\n\n    # API request - try to run the query, and return a pandas DataFrame\n    job_post_scores = safe_query_job.to_dataframe()\n\n    job_post_scores.shape\n    \n    # Save to CSV\n    job_post_scores.to_csv('job_post_scores.csv')    ","be38af50":"import matplotlib.pyplot as plt","acc11e17":"job_post_scores","5b8ea8d2":"job_post_scores['country_code'].unique()","ae422944":"fig, ax = plt.subplots(figsize=(10, 6))\ncountries = ['US', 'GB', 'CA', 'JP', 'FR', 'RU']\nfor country in countries:\n    ax.plot(job_post_scores['filing_year'].loc[job_post_scores['country_code']==country], \n            job_post_scores['f0_'].loc[job_post_scores['country_code']==country], \n            label=country)\nax.legend()\nax.set_xlabel('year')\nax.set_ylabel('average auther per patent')\n","03fe2dca":"# Query to select all the items from the \"city\" column where the \"country\" column is 'US'\nipc_type_query = \"\"\"\n        SELECT country_code, COUNT(*) AS cnt, filing_year, ip_section\n        FROM\n            (\n            SELECT ANY_VALUE(country_code) AS country_code, SUBSTRING(ANY_VALUE(ip.code), 0, 1) AS ip_section, ANY_VALUE(CAST(FLOOR(filing_date \/ (5*10000)) AS INT64))*5 AS filing_year\n            FROM `patents-public-data.patents.publications`, UNNEST(ipc) AS ip\n            WHERE filing_date > 19000000\n            GROUP BY application_number\n            )\n        GROUP BY country_code, filing_year, ip_section\n        ORDER BY filing_year\n        #LIMIT 10000\n        \"\"\"","3e794554":"bq_assistant.estimate_query_size(ipc_type_query)","f63d031d":"try:\n    ipc_type_query_df = pd.read_csv('ipc_type_query_df.csv')\nexcept:\n    # Set up the query \n    ipc_type_query_job = client.query(ipc_type_query, job_config=safe_config)\n\n    # API request - try to run the query, and return a pandas DataFrame\n    ipc_type_query_df = ipc_type_query_job.to_dataframe()\n\n    ipc_type_query_df.shape\n\n    ipc_type_query_df.to_csv('ipc_type_query_df.csv')","e228db47":"ipc_type_query_df","7699346b":"countries = ['CA', 'FR', 'DE', 'IT', 'JP', 'GB', 'US', 'CN' ]\nsections = ['A', 'B','C', 'D', 'E', 'F', 'G', 'H']\n\nfig, axes = plt.subplots(2,4,figsize=(20, 10), sharey=True, sharex=True)\nax = axes.flatten()\nx = 0\nfor country in countries:\n    for section in sections:\n        ax[x].plot(ipc_type_query_df['filing_year'].loc[ipc_type_query_df['country_code']==country].loc[ipc_type_query_df['ip_section']==section], \n                ipc_type_query_df['cnt'].loc[ipc_type_query_df['country_code']==country].loc[ipc_type_query_df['ip_section']==section], \n                label=section)\n        ax[x].legend()\n        ax[x].set_title(country)\n        ax[x].set_xlabel('year')\n        ax[x].set_ylabel('number of patent applications')\n    x+=1    ","a4cc8370":"    A: Human Necessities\n    B: Performing Operations, Transporting\n    C: Chemistry, Metallurgy\n    D: Textiles, Paper\n    E: Fixed Constructions\n    F: Mechanical Engineering, Lighting, Heating, Weapons\n    G: Physics\n    H: Electricity","3f591c68":"Countries:\n\nG7 (Canada, France, Germany, Italy, Japan, United Kingdom, United States) and and China","569419bf":"#  Google Patents Public Dataset\n\n","0ad9dc70":"What insights are in the Google Patents Public Dataset?","21a9b4ec":"**under development...**"}}