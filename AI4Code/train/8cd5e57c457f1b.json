{"cell_type":{"405109e8":"code","f32c90bd":"code","a17ec38e":"code","13cf33bb":"code","bb0d5f24":"code","5d7923f1":"code","ccab7be5":"code","e7e9b81c":"code","23752fd3":"markdown","c343f2a4":"markdown","2cf0feec":"markdown","4c5031a7":"markdown","a253c3f0":"markdown","e90adc00":"markdown","71817c7e":"markdown","1613ceba":"markdown","6f1eb733":"markdown","785b0dd3":"markdown","6bc9661d":"markdown","d1540e9c":"markdown","3f022532":"markdown"},"source":{"405109e8":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.express as px\n%matplotlib inline","f32c90bd":"path0 = '..\/input\/gsdc6027\/submission.csv' \n\nsub6027 = pd.read_csv(path0)","a17ec38e":"path1 = '..\/input\/gsdc5639\/submission.csv' \n\nsub5639 = pd.read_csv(path1)","13cf33bb":"path2 = '..\/input\/gsdc5370\/submission.csv' \n\nsub5370 = pd.read_csv(path2)","bb0d5f24":"path = [path0, path1, path2]","5d7923f1":"def ensembling(main, support, coeff1, coeff2): \n    \n    suba  = main.copy() \n    subav = suba.values\n       \n    subb  = support.copy()\n    subbv = subb.values    \n           \n    ense  = main.copy()    \n    ensev = ense.values  \n \n    for i in range (len(main)):\n        \n        pera1 = subav[i, 2]\n        pera2 = subav[i, 3]\n        \n        perb1 = subbv[i, 2]\n        perb2 = subbv[i, 3]\n\n        per1 = (pera1 * coeff1) + (perb1 * (1.0 - coeff1))\n        per2 = (pera2 * coeff2) + (perb2 * (1.0 - coeff2))\n        \n        ensev[i, 2] = per1\n        ensev[i, 3] = per2\n        \n    ense.iloc[:, 2:] = ensev[:, 2:]  \n  \n    return ense      \n","ccab7be5":"sub1 = ensembling(sub5639, sub6027, 0.25, 0.60)\n\nsub2 = ensembling(sub5370,    sub1, 0.50, 0.62)","e7e9b81c":"sub1.to_csv(\"submission1.csv\",index=False)\nsub2.to_csv(\"submission2.csv\",index=False)\n!ls","23752fd3":"<div class=\"alert alert-success\">  \n<\/div>","c343f2a4":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">If you find this work useful, please don't forget upvoting :)<\/h1>\n<\/div>","2cf0feec":"Thanks to: @t88take https:\/\/www.kaggle.com\/t88take\/gsdc-phones-mean-prediction\/output","4c5031a7":"<div class=\"alert alert-success\">  \n<\/div>","a253c3f0":"<div class=\"alert alert-success\">  \n<\/div>","e90adc00":"Thanks to: @bpetrb https:\/\/www.kaggle.com\/bpetrb\/adaptive-gauss-phone-mean\/output","71817c7e":"<div class=\"alert alert-success\">  \n<\/div>","1613ceba":"<div class=\"alert alert-success\">  \n<\/div>","6f1eb733":"Thanks for https:\/\/www.kaggle.com\/somayyehgholami\/gsdc-smart-ensembling","785b0dd3":"<div>\n    <h1 align=\"center\">Smart Ensembling<\/h1>\n    <h1 align=\"center\">Google Smartphone Decimeter Challenge<\/h1>   \n<\/div>","6bc9661d":"<div class=\"alert alert-success\">  \n<\/div>","d1540e9c":"Thanks to: @tensorchoko https:\/\/www.kaggle.com\/tensorchoko\/google-multioutputregressor\/output","3f022532":"<div class=\"alert alert-success\">  \n<\/div>"}}