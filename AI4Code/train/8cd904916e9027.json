{"cell_type":{"5abbffff":"code","67911d19":"code","de83c696":"code","e1181d96":"code","3b790013":"code","98bad26b":"code","94b57e96":"code","205ea159":"code","68fa2099":"code","b4216d07":"code","7b0e057b":"code","e5c4a1ea":"code","15adc56c":"code","61510cd2":"markdown","6cbcdb64":"markdown","609bb9bc":"markdown","9c31deab":"markdown"},"source":{"5abbffff":"#Load the csv file as data frame.\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndf = pd.read_csv('..\/input\/weatherAUS.csv')\nprint('Size of weather data frame is :',df.shape)\n#Let us see how our data looks like!\ndf[0:5]","67911d19":"# We see there are some columns with null values. \n# Before we start pre-processing, let's find out which of the columns have maximum null values\ndf.count().sort_values()","de83c696":"# As we can see the first four columns have less than 60% data, we can ignore these four columns\n# We don't need the location column because \n# we are going to find if it will rain in Australia(not location specific)\n# We are going to drop the date column too.\n# We need to remove RISK_MM because we want to predict 'RainTomorrow' and RISK_MM can leak some info to our model\ndf = df.drop(columns=['Sunshine','Evaporation','Cloud3pm','Cloud9am','Location','RISK_MM','Date'],axis=1)\ndf.shape","e1181d96":"#Let us get rid of all null values in df\ndf = df.dropna(how='any')\ndf.shape","3b790013":"#its time to remove the outliers in our data - we are using Z-score to detect and remove the outliers.\nfrom scipy import stats\nz = np.abs(stats.zscore(df._get_numeric_data()))\nprint(z)\ndf= df[(z < 3).all(axis=1)]\nprint(df.shape)","98bad26b":"#Lets deal with the categorical cloumns now\n# simply change yes\/no to 1\/0 for RainToday and RainTomorrow\ndf['RainToday'].replace({'No': 0, 'Yes': 1},inplace = True)\ndf['RainTomorrow'].replace({'No': 0, 'Yes': 1},inplace = True)\n\n#See unique values and convert them to int using pd.getDummies()\ncategorical_columns = ['WindGustDir', 'WindDir3pm', 'WindDir9am']\nfor col in categorical_columns:\n    print(np.unique(df[col]))\n# transform the categorical columns\ndf = pd.get_dummies(df, columns=categorical_columns)\ndf.iloc[4:9]","94b57e96":"#next step is to standardize our data - using MinMaxScaler\nfrom sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler()\nscaler.fit(df)\ndf = pd.DataFrame(scaler.transform(df), index=df.index, columns=df.columns)\ndf.iloc[4:10]","205ea159":"#now that we are done with the pre-processing part, let's see which are the important features for RainTomorrow!\n#Using SelectKBest to get the top features!\nfrom sklearn.feature_selection import SelectKBest, chi2\nX = df.loc[:,df.columns!='RainTomorrow']\ny = df[['RainTomorrow']]\nselector = SelectKBest(chi2, k=3)\nselector.fit(X, y)\nX_new = selector.transform(X)\nprint(X.columns[selector.get_support(indices=True)]) #top 3 columns","68fa2099":"#Let's get hold of the important features as assign them as X\ndf = df[['Humidity3pm','Rainfall','RainToday','RainTomorrow']]\nX = df[['Humidity3pm']] # let's use only one feature Humidity3pm\ny = df[['RainTomorrow']]","b4216d07":"#Logistic Regression \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport time\n\nt0=time.time()\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)\nclf_logreg = LogisticRegression(random_state=0)\nclf_logreg.fit(X_train,y_train)\ny_pred = clf_logreg.predict(X_test)\nscore = accuracy_score(y_test,y_pred)\nprint('Accuracy :',score)\nprint('Time taken :' , time.time()-t0)\n","7b0e057b":"#Random Forest Classifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nt0=time.time()\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)\nclf_rf = RandomForestClassifier(n_estimators=100, max_depth=4,random_state=0)\nclf_rf.fit(X_train,y_train)\ny_pred = clf_rf.predict(X_test)\nscore = accuracy_score(y_test,y_pred)\nprint('Accuracy :',score)\nprint('Time taken :' , time.time()-t0)","e5c4a1ea":"#Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\nt0=time.time()\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)\nclf_dt = DecisionTreeClassifier(random_state=0)\nclf_dt.fit(X_train,y_train)\ny_pred = clf_dt.predict(X_test)\nscore = accuracy_score(y_test,y_pred)\nprint('Accuracy :',score)\nprint('Time taken :' , time.time()-t0)","15adc56c":"#Support Vector Machine\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\n\nt0=time.time()\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)\nclf_svc = svm.SVC(kernel='linear')\nclf_svc.fit(X_train,y_train)\ny_pred = clf_svc.predict(X_test)\nscore = accuracy_score(y_test,y_pred)\nprint('Accuracy :',score)\nprint('Time taken :' , time.time()-t0)","61510cd2":"In this example, I will try to build a model which will predict if it will rain tomorrow!\nClearly, it is a classification problem. The model will gives us 2 classes - either YES or NO.\nWe shall try various classifiers to find the best model for the data.\n\n**Data Pre-processing**","6cbcdb64":"**Finding the best model**","609bb9bc":"**Feature Selection**","9c31deab":"All models give an accuracy score of ~ 83-84 % except for SVM.\nConsidering the computation time,  DecisionTreeClassifier is best."}}