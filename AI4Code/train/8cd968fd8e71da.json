{"cell_type":{"95c1cfe9":"code","7f00f96f":"code","764e7b27":"code","a54c0bdc":"code","aae53338":"code","00667b24":"code","ccb0377c":"code","8568740d":"code","2fe7734a":"code","bc817b06":"code","7b8b4c48":"code","40df39d5":"code","e6aa1826":"code","479149b2":"code","b9123a5e":"code","36dee406":"code","fd938dec":"code","6ddcbdfa":"code","b4301529":"code","5b0e2253":"code","11e663c9":"code","f830c743":"code","759ae218":"code","f005ab02":"code","1b6c6b60":"code","4b7b3141":"code","e2097e39":"code","0cd6379b":"code","974b222d":"code","4d4585be":"code","cf6c671a":"code","852fd83d":"code","7e534f11":"code","9afd9ec9":"code","3c580edf":"code","bff9c1ef":"code","63d0226a":"code","00d925e6":"code","f3394f98":"code","2d44df12":"code","3ecf760f":"code","f1188ad4":"code","35dbb485":"code","1024d8a8":"code","384bdf9e":"code","18f330dc":"code","4708fcf6":"code","b80cfb60":"code","295d58ec":"code","58af7bf1":"code","4f80a5be":"code","ea947813":"markdown","20b746fb":"markdown","a70dde76":"markdown","6626c48c":"markdown","b41083e5":"markdown","768146bc":"markdown","f2342590":"markdown","d6d36c1d":"markdown","ee157301":"markdown","d631835c":"markdown","f666c51e":"markdown","e6d1f83f":"markdown","604e5e8a":"markdown","6ed1e798":"markdown","f0c08d01":"markdown","9259b9b4":"markdown","9a86353a":"markdown","bd922064":"markdown","4e0638e6":"markdown","0add805e":"markdown","97af38e1":"markdown","8f361fa9":"markdown","3b1458ab":"markdown","809fe6ff":"markdown","bef02757":"markdown","41076f5e":"markdown","87b87977":"markdown","9417f5c5":"markdown","6bf11690":"markdown","401161d1":"markdown","ced9ccc1":"markdown","67d6ca0f":"markdown","5abbc28b":"markdown"},"source":{"95c1cfe9":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling as pp\n\n# Visualization\nimport matplotlib.pyplot as plt\n\n# Preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, ShuffleSplit, GridSearchCV\n\n# Modeling\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\n\n# Metrics\nfrom sklearn.metrics import r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","7f00f96f":"pd.set_option('max_colwidth', 200)","764e7b27":"# Download data\ndata = pd.read_csv('..\/input\/wq-southern-bug-river-01052021\/PB_All_2000_2021.csv', sep=';', header=0)\ndata","a54c0bdc":"# Information for training data\ndata.info()","aae53338":"# Download data about monitoring stations\ndata_about = pd.read_csv('..\/input\/wq-southern-bug-river-01052021\/PB_stations.csv', sep=';', header=0, encoding='cp1251')\ndata_about.sort_values(by=['length'], ascending=False)","00667b24":"# Amount data observations of stations\ndata['id'].value_counts().sort_values().plot(kind='barh')","ccb0377c":"# Determination the year of observations\ndata['ds'] = pd.to_datetime(data['date'])\ndata['year'] = data['ds'].dt.year\ndata.info()","8568740d":"# Determination the start year of observations for all stations\ndata[['id', 'year']].groupby(by=['id']).min().sort_values(by=['year'], ascending=False)","2fe7734a":"# Determination the final year of observations for all stations\ndata[['id', 'year']].groupby(by=['id']).max().sort_values(by=['year'], ascending=False)","bc817b06":"# Information about stations 14, 15, 16\nstations_good = [14, 15, 16]\ndata_about[data_about['id'].isin(stations_good)]","7b8b4c48":"# Set target indicator\ntarget_data_name = 'BSK5'\n#feature_target_all = ['NH4', 'BSK5', 'NO3', 'NO2', 'SO4', 'PO4', 'CL']\nfeature_target_all = ['NH4', 'NO3']\nfeature_data_all = feature_target_all + [target_data_name]\nfeature_data_all","40df39d5":"# Data sampling only for good stations\ndf_indicator = data[['id', 'ds'] + feature_data_all]\ndf_indicator = df_indicator[df_indicator['id'].isin(stations_good)].dropna().reset_index(drop=True)\ndf_indicator","e6aa1826":"cols = []\nfor station in stations_good:\n    for feature in feature_data_all:\n        cols.append(str(station) + \"_\" + feature)\ncols","479149b2":"df = pd.pivot_table(df_indicator, index=[\"ds\"], columns=[\"id\"], values=feature_data_all).dropna()\ndf.columns = cols\ndf","b9123a5e":"# Set target data\ntarget_name = '14_' + target_data_name","36dee406":"# EDA with Pandas Profiling\npp.ProfileReport(df)","fd938dec":"# Data visualization\ndf.plot(figsize=(12,10))","6ddcbdfa":"# Anomaly search\ndf.describe([.05, .5, .96])","b4301529":"# Selection of anomalous features\ncols_anomal = df.columns.tolist()   # All features\ncols_anomal.remove(target_name)     # All features without target\nprint(cols_anomal)\n#cols_anomal = ['16_NH4', '16_NO3']","5b0e2253":"# Anomaly filtering\ndf_len0 = len(df)\nfor col in cols_anomal:\n    df = df[df[col] <= float(df.quantile([.96])[col])]\ndf = df.reset_index(drop=True)\nprint(f\"The number of observational data before filtering anomalies - {df_len0} and the number after - {len(df)}\")\nprint(f\"It is desirable that after filtering the anomalies there is enough data: at least 65% - {int(0.65*df_len0)}\")\ndf.describe()","11e663c9":"# Data visualization after filtering\ndf.plot(figsize=(12,10))","f830c743":"# Drop target data\ntarget_data = df.pop(target_name)\ntarget_data","759ae218":"# Dividing data into training and test\ntrain, test, target, target_test = train_test_split(df, target_data, test_size=0.2, random_state=0)\nprint(train.shape, test.shape)","f005ab02":"# Display the statistics for training data\ntrain.describe()","1b6c6b60":"# Display the statistics for test data\ntest.describe()","4b7b3141":"# Standartization data\nscaler = StandardScaler()\ntrain = pd.DataFrame(scaler.fit_transform(train), columns = train.columns)\n\n# Display training data\ntrain","e2097e39":"# Standartization data\ntest = pd.DataFrame(scaler.transform(test), columns = test.columns)","0cd6379b":"# Training data splitting to new training (part of the all training) and validation data\ntrain_all = train.copy()\ntarget_all = target.copy()\ntrain, valid, target_train, target_valid = train_test_split(train_all, target_all, test_size=0.25, random_state=0)","974b222d":"# Display information about new training data\ntrain.info()","4d4585be":"# Display information about validation data\nvalid.info()","cf6c671a":"# Cross-validation of training data with shuffle\ncv_train = ShuffleSplit(n_splits=3, test_size=0.5, random_state=0)","852fd83d":"# Creation the dataframe with the resulting score of all models\nresult = pd.DataFrame({'model' : ['Linear Regression', 'Random Forest Regressor', \n                                  'XGBoost Regressor', 'Aggregate prediction'], \n                       'train_score': 0, 'valid_score': 0})\nresult","7e534f11":"# Linear Regression\nlr = LinearRegression()\nlr.fit(train, target_train)\n\n# Prediction for training data\ny_train_lr = lr.predict(train)\n\n# Accuracy of model\nr2_score_acc = round(r2_score(target_train, y_train_lr), 2)\nprint(f'Accuracy of Linear Regression model training is {r2_score_acc}')\n\n# Save to result dataframe\nresult.loc[result['model'] == 'Linear Regression', 'train_score'] = r2_score_acc","9afd9ec9":"# Print rounded r2_lr = lr.predict(valid)\ny_val_lr = lr.predict(valid)\nr2_score_acc_valid = round(r2_score(target_valid, y_val_lr),2)\nresult.loc[result['model'] == 'Linear Regression', 'valid_score'] = r2_score_acc_valid\nprint(f'Accuracy of Linear Regression model prediction for valid dataset is {r2_score_acc_valid}')","3c580edf":"%%time\n# Random Forest Regressor\nrf = RandomForestRegressor()\nparam_grid = {'n_estimators': [15, 20, 25], 'min_samples_leaf': [i for i in range(4,7)], \n              'max_features': ['auto'], 'max_depth': [i for i in range(3,6)], \n              'criterion': ['mse'], 'bootstrap': [False]}\n\n# Training model\nrf_CV = GridSearchCV(rf, param_grid=param_grid, cv=cv_train, verbose=False)\nrf_CV.fit(train, target_train)\nprint(rf_CV.best_params_)\n\n# Prediction for training data\ny_train_rf = rf_CV.predict(train)\n\n# Accuracy of model\nr2_score_acc = round(r2_score(target_train, y_train_rf),2)\nprint(f'Accuracy of RandomForestRegressor model training is {r2_score_acc}')\n\n# Save to result dataframe\nresult.loc[result['model'] == 'Random Forest Regressor', 'train_score'] = r2_score_acc","bff9c1ef":"# Print rounded r2_score_acc to 2 decimal values after the text\ny_val_rf = rf_CV.predict(valid)\nr2_score_acc_valid = round(r2_score(target_valid, y_val_rf),2)\nresult.loc[result['model'] == 'Random Forest Regressor', 'valid_score'] = r2_score_acc_valid\nprint(f'Accuracy of RandomForestRegressor model prediction for valid dataset is {r2_score_acc_valid}')","63d0226a":"%%time\n# XGBoost Regressor\nxgbr = xgb.XGBRegressor() \n# parameters = {'n_estimators': [60, 70, 80, 90, 95, 100, 105, 110, 120, 130, 140], \n#               'learning_rate': [0.005, 0.01, 0.05, 0.075, 0.1],\n#               'max_depth': [3, 5, 7, 9],\n#               'reg_lambda': [0.1, 0.3, 0.5]}\n\nparameters = {'n_estimators': [50, 70], \n              'learning_rate': [0.01, 0.03],\n              'max_depth': [5, 6],\n              'reg_lambda': [0.1]}\n\n# Training model\nxgb_CV = GridSearchCV(estimator=xgbr, param_grid=parameters, cv=cv_train, n_jobs=-1)\nxgb_CV.fit(train, target_train)\nprint(\"Best score: %0.3f\" % xgb_CV.best_score_)\nprint(\"Best parameters set:\", xgb_CV.best_params_)\n\n# Prediction for training data\ny_train_xgb = xgb_CV.predict(train)\n\n# Accuracy of model\nr2_score_acc = round(r2_score(target_train, y_train_xgb),2)\nprint(f'Accuracy of XGBoost Regressor model training is {r2_score_acc}')\n\n# Save to result dataframe\nresult.loc[result['model'] == 'XGBoost Regressor', 'train_score'] = r2_score_acc","00d925e6":"# Print rounded r2_score_acc to 2 decimal values after the text\ny_val_xgb = xgb_CV.predict(valid)\nr2_score_acc_valid = round(r2_score(target_valid, y_val_xgb),2)\nresult.loc[result['model'] == 'XGBoost Regressor', 'valid_score'] = r2_score_acc_valid\nprint(f'Accuracy of XGBoost Regressor model prediction for valid dataset is {r2_score_acc_valid}')","f3394f98":"# Feature importance diagram\nxgbr = xgb.XGBRegressor(**xgb_CV.best_params_)\nxgbr.fit(train, target_train)\nfig =  plt.figure(figsize = (10,8))\naxes = fig.add_subplot(111)\nxgb.plot_importance(xgbr,ax = axes,height = 0.5)\nplt.show();\nplt.close()","2d44df12":"def agg(x1, x2, x3):\n    # Aggregation of x1, x2 and x3 predictions\n    #return (x1 + x2 + x3) \/ 3\n    #return list(np.maximum(np.array(x1), np.array(x2), np.array(x3)))\n    return list(np.minimum(np.array(x1), np.array(x2), np.array(x3)))","3ecf760f":"# Aggregate prediction for training dataset\ny_train = agg(y_train_lr, y_train_rf, y_train_xgb)\n\n# Accuracy of model\nr2_score_acc = round(r2_score(target_train, y_train),2)\nprint(f'Accuracy of Aggregate prediction is {r2_score_acc}')\n\n# Save to result dataframe\nresult.loc[result['model'] == 'Aggregate prediction', 'train_score'] = r2_score_acc","f1188ad4":"# Aggregate prediction for validation dataset\ny_val = agg(y_val_lr, y_val_rf, y_val_xgb)\nr2_score_acc_valid = round(r2_score(target_valid, y_val),2)\nprint(f'Accuracy of Aggregate prediction for valid dataset is {r2_score_acc_valid}')\nresult.loc[result['model'] == 'Aggregate prediction', 'valid_score'] = r2_score_acc_valid","35dbb485":"# Prediction of target for test data for all models\ny_test_lr = lr.predict(test)\ny_test_rf = rf_CV.predict(test)\ny_test_xgb = xgb_CV.predict(test)\ny_test = agg(y_test_lr, y_test_rf, y_test_xgb)","1024d8a8":"# Building plot for prediction for the training data \nx = np.arange(len(train))\nplt.figure(figsize=(16,10))\nplt.scatter(x, target_train, label = \"Target training data\", color = 'k')\nplt.scatter(x, y_train_lr, label = \"Linear Regression prediction\", color = 'b')\nplt.scatter(x, y_train_rf, label = \"Random Forest prediction\", color = 'y')\nplt.scatter(x, y_train_xgb, label = \"XGBoost Regressor prediction\", color = 'brown')\nplt.scatter(x, y_train, label = \"Aggregate prediction\", color = 'g')\nplt.plot(x, np.full(len(train), 0.5), label = \"Maximum allowable value\", color = 'r')\nplt.title('Prediction for the training data')\nplt.legend(loc='best')\nplt.grid(True)","384bdf9e":"# Building plot for prediction for the valid data \nx = np.arange(len(valid))\nplt.figure(figsize=(16,10))\nplt.scatter(x, target_valid, label = \"Target valid data\", color = 'k')\nplt.scatter(x, y_val_lr, label = \"Linear Regression prediction\", color = 'b')\nplt.scatter(x, y_val_rf, label = \"Random Forest prediction\", color = 'y')\nplt.scatter(x, y_val_xgb, label = \"XGBoost Regressor prediction\", color = 'brown')\nplt.scatter(x, y_val, label = \"Aggregate prediction\", color = 'g')\nplt.plot(x, np.full(len(valid), 0.5), label = \"Maximum allowable value\", color = 'r')\nplt.title('Prediction for the valid data')\nplt.legend(loc='best')\nplt.grid(True)","18f330dc":"# Building plot for prediction for the test data \nx = np.arange(len(test))\nplt.figure(figsize=(16,10))\nplt.scatter(x, target_test, label = \"Target test data\", color = 'k')\nplt.scatter(x, y_test_lr, label = \"Linear Regression prediction\", color = 'b')\nplt.scatter(x, y_test_rf, label = \"Random Forest prediction\", color = 'y')\nplt.scatter(x, y_test_xgb, label = \"XGBoost Regressor prediction\", color = 'brown')\nplt.scatter(x, y_test, label = \"Aggregate prediction\", color = 'g')\nplt.plot(x, np.full(len(test), 0.5), label = \"Maximum allowable value\", color = 'r')\nplt.title('Prediction for the test data')\nplt.legend(loc='best')\nplt.grid(True)","4708fcf6":"# Display results of modeling\nresult.sort_values(by=['valid_score', 'train_score'], ascending=False)","b80cfb60":"# Select models\n#result_best = result[(result['train_score'] - result['valid_score']).abs() < 0.05]\nresult_best = result\nresult_best.sort_values(by=['valid_score', 'train_score'], ascending=False)","295d58ec":"# Select the best model\nresult_best.nlargest(1, 'valid_score')","58af7bf1":"# Find a name of the best model (with maximal valid score)\nbest_model_name = result_best.loc[result_best['valid_score'].idxmax(result_best['valid_score'].max()), 'model']","4f80a5be":"print(f'The best model is \"{best_model_name}\"')","ea947813":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE & Preprocessing data](#3)\n    - [Data selection](#3.1)\n    - [Anomaly filtering](#3.2)\n    - [Form datasets for forecasting](#3.3)\n    - [Statistics for datasets](#3.4)\n    - [Data standartization](#3.5)\n    - [Training data splitting](#3.6)\n    - [Cross-validation of training data](#3.7)\n1. [Modeling](#4)\n    - [Linear Regression](#4.1)\n    - [Random Forest Regressor](#4.2)\n    - [XGBoost Regressor](#4.3)\n    - [Aggregate prediction](#4.4)    \n1. [Test prediction](#5)\n1. [Results visualization](#6)\n1. [Select the best model](#6)","20b746fb":"\nAlthough, if you limit yourself to 2018, then you can take all the stations.","a70dde76":"### 4.3. XGBoost Regressor<a class=\"anchor\" id=\"4.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","6626c48c":"Dataset contains data on river water quality for 8 indicators for 22 monitoring stations.\n\nData for 2000-2021 for the Southern Bug (or Pivdennyi Booh) river.","b41083e5":"### 3.4. Statistics for datasets<a class=\"anchor\" id=\"3.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","768146bc":"**ADDITIONAL TASKS:** \n1. Try to change the parameters (see examples above).\n2. Try deleting anomalous data. \n3. Add to dataframe result also calculated array: y_train, y_val.\n4. Creation the function with all commands and output information (in each section of this chapter 4) for all models:\n\n        result = get_model(train, valid, target_train, target_valid, model_name, param_grid, cv_train, result)","f2342590":"\u0421onsider only stations 14, 15, 16.","d6d36c1d":"### 4.2. Random Forest Regressor<a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","ee157301":"### 3.6. Training data splitting<a class=\"anchor\" id=\"3.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","d631835c":"## 6. Visualization<a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","f666c51e":"### 3.3. Form datasets for forecasting<a class=\"anchor\" id=\"3.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","e6d1f83f":"## 5. Test prediction<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","604e5e8a":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","6ed1e798":"### Possible Tasks:\n\n1. Analysis of data dependences, including EDA.\n\n2. Prediction of the data in the certain station by data from upstream stations with the highest accuracy - see notebook [WQ SB river : EDA and Forecasting](https:\/\/www.kaggle.com\/vbmokin\/wq-sb-river-eda-and-forecasting)\n\n3. Data prediction after anomaly filtering (upgrade for the notebook [WQ SB river : EDA and Forecasting](https:\/\/www.kaggle.com\/vbmokin\/wq-sb-river-eda-and-forecasting)).","f0c08d01":"### 3.2. Anomaly filtering<a class=\"anchor\" id=\"3.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","9259b9b4":"### 4.1. Linear Regression<a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","9a86353a":"### Map of the stations:\nhttp:\/\/monitoring.davr.gov.ua\/EcoWaterMon\/GDKMap\/Index\n\n![image.png](attachment:7d210839-9bcd-46a8-a58d-ce90f29fb294.png)\n\nThe water quality state monitoring stations of the Southern Bug (or Pivdennyi Booh) river.","bd922064":"The analysis showed that many values are only available in stations 1 and 2, while others have much less data. I propose select only these two stations.","4e0638e6":"<a class=\"anchor\" id=\"0\"><\/a>\n# Dataset [River Water Quality EDA and Forecasting](https:\/\/www.kaggle.com\/vbmokin\/wq-southern-bug-river-01052021)","0add805e":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","97af38e1":"### 4.4. Aggregate prediction<a class=\"anchor\" id=\"4.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","8f361fa9":"**ADDITIONAL TASKS:** \n1. Set number of splitting = 5, 7, 10 and to compare of results.\n2. Try use another method for cross-validation of training data (without shuffle):\n\n        KFold(n_splits=5, shuffle=False, random_state=0)","3b1458ab":"As you can see, the stations 5 & 13 have little data.","809fe6ff":"### 3.5. Data standartization<a class=\"anchor\" id=\"3.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","bef02757":"### 3.1. Data selection<a class=\"anchor\" id=\"3.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","41076f5e":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","87b87977":"## 3. EDA & FE & Preprocessing data<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","9417f5c5":"As you can see, only stations 3, 5, 10, 14, 15, 16 and 22 have modern data.","6bf11690":"## Acknowledgements\n* [WQ SB river : EDA and Forecasting](https:\/\/www.kaggle.com\/vbmokin\/wq-sb-river-eda-and-forecasting)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [Datasets for river water quality prediction](https:\/\/www.kaggle.com\/vbmokin\/datasets-for-river-water-quality-prediction)\n* [AI-ML-DS Training. L1T : Titanic - Decision Tree](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-titanic-decision-tree)\n* [AI-ML-DS Training. L1T : NH4 - linear regression](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-nh4-linear-regression)\n* [Heart Disease - Automatic AdvEDA & FE & 20 models](https:\/\/www.kaggle.com\/vbmokin\/heart-disease-automatic-adveda-fe-20-models)\n* [BOD prediction in river - 15 regression models](https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models)\n* [The system \"MONITORING AND ENVIRONMENTAL ASSESSMENT OF WATER RESOURCES OF UKRAINE\", State Agency of Water Resources of Ukraine](http:\/\/monitoring.davr.gov.ua\/EcoWaterMon\/GDKMap\/Index)","401161d1":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","ced9ccc1":"## 7. Select the best model <a class=\"anchor\" id=\"7\"><\/a>\n\n[Back to Table of Contents](#0.1)","67d6ca0f":"**ADDITIONAL TASKS:** \n1. Try other filter values (maximum quantile value yet to be considered): 0.9, 0.95, 0.99... between [0.9, 0.99)\n2. Try setting only a few filter features yourself for example: cols_anomal = ['16_NH4', '16_NO3']","5abbc28b":"### 3.7. Cross-validation of training data<a class=\"anchor\" id=\"3.7\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}