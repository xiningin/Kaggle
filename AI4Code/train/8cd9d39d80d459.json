{"cell_type":{"ceb74b18":"code","1307bbfd":"code","2b4009aa":"code","a59ce77a":"code","527a2ac3":"code","29906b50":"code","6dca357a":"code","43fc43d9":"code","13b8efc3":"code","f0be947d":"code","57171d72":"code","4f006945":"code","1e5f99a3":"code","c851c66a":"code","e3d2974c":"code","8ec3c0d9":"code","58e87fa2":"code","05f4b383":"code","b7c95e0c":"markdown","7a32087e":"markdown","1db0d878":"markdown","b893b7f9":"markdown","f4d0f9ce":"markdown","cbdfee0c":"markdown","084f91de":"markdown","954e9939":"markdown","97c49e85":"markdown"},"source":{"ceb74b18":"import pandas as pd \nimport numpy as np\n\n# CountVectorizer will help calculate word counts\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Import the string dictionary that we'll use to remove punctuation\nimport string","1307bbfd":"# Import datasets\n\ntrain = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')","2b4009aa":"# The row with index 13133 has NaN text, so remove it from the dataset\n\ntrain[train['text'].isna()]","a59ce77a":"train.drop(314, inplace = True)","527a2ac3":"# Make all the text lowercase - casing doesn't matter when \n# we choose our selected text.\ntrain['text'] = train['text'].apply(lambda x: x.lower())\ntest['text'] = test['text'].apply(lambda x: x.lower())\n\n# Make training\/test split\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val = train_test_split(\n    train, train_size = 0.80, random_state = 0)","29906b50":"pos_train = X_train[X_train['sentiment'] == 'positive']\nneutral_train = X_train[X_train['sentiment'] == 'neutral']\nneg_train = X_train[X_train['sentiment'] == 'negative']","6dca357a":"# Use CountVectorizer to get the word counts within each dataset\n\ncv = CountVectorizer(max_df=0.95, min_df=2,\n                                     max_features=10000,\n                                     stop_words='english')\n\nX_train_cv = cv.fit_transform(X_train['text'])\n\nX_pos = cv.transform(pos_train['text'])\nX_neutral = cv.transform(neutral_train['text'])\nX_neg = cv.transform(neg_train['text'])\n\npos_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())\n\n# Create dictionaries of the words within each sentiment group, where the values are the proportions of tweets that \n# contain those words\n\npos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_count_df[k].sum()\n    neutral = neutral_count_df[k].sum()\n    neg = neg_count_df[k].sum()\n    \n    pos_words[k] = pos\/pos_train.shape[0]\n    neutral_words[k] = neutral\/neutral_train.shape[0]\n    neg_words[k] = neg\/neg_train.shape[0]\n    \n# We need to account for the fact that there will be a lot of words used in tweets of every sentiment.  \n# Therefore, we reassign the values in the dictionary by subtracting the proportion of tweets in the other \n# sentiments that use that word.\n\nneg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","43fc43d9":"def calculate_selected_text(df_row, tol = 0):\n    \n    tweet = df_row['text']\n    sentiment = df_row['sentiment']\n    \n    if(sentiment == 'neutral'):\n        return tweet\n    \n    elif(sentiment == 'positive'):\n        dict_to_use = pos_words_adj # Calculate word weights using the pos_words dictionary\n    elif(sentiment == 'negative'):\n        dict_to_use = neg_words_adj # Calculate word weights using the neg_words dictionary\n        \n    words = tweet.split()\n    words_len = len(words)\n    subsets = [words[i:j+1] for i in range(words_len) for j in range(i,words_len)]\n    \n    score = 0\n    selection_str = '' # This will be our choice\n    lst = sorted(subsets, key = len) # Sort candidates by length\n    \n    \n    for i in range(len(subsets)):\n        \n        new_sum = 0 # Sum for the current substring\n        \n        # Calculate the sum of weights for each word in the substring\n        for p in range(len(lst[i])):\n            if(lst[i][p].translate(str.maketrans('','',string.punctuation)) in dict_to_use.keys()):\n                new_sum += dict_to_use[lst[i][p].translate(str.maketrans('','',string.punctuation))]\n            \n        # If the sum is greater than the score, update our current selection\n        if(new_sum > score + tol):\n            score = new_sum\n            selection_str = lst[i]\n            #tol = tol*5 # Increase the tolerance a bit each time we choose a selection\n\n    # If we didn't find good substrings, return the whole text\n    if(len(selection_str) == 0):\n        selection_str = words\n        \n    return ' '.join(selection_str)","13b8efc3":"pd.options.mode.chained_assignment = None","f0be947d":"tol = 0.001\n\nX_val['predicted_selection'] = ''\n\nfor index, row in X_val.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    X_val.loc[X_val['textID'] == row['textID'], ['predicted_selection']] = selected_text","57171d72":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","4f006945":"X_val['jaccard'] = X_val.apply(lambda x: jaccard(x['selected_text'], x['predicted_selection']), axis = 1)\n\nprint('The jaccard score for the validation set is:', np.mean(X_val['jaccard']))","1e5f99a3":"pos_tr = train[train['sentiment'] == 'positive']\nneutral_tr = train[train['sentiment'] == 'neutral']\nneg_tr = train[train['sentiment'] == 'negative']","c851c66a":"cv = CountVectorizer(max_df=0.95, min_df=2,\n                                     max_features=10000,\n                                     stop_words='english')\n\nfinal_cv = cv.fit_transform(train['text'])\n\nX_pos = cv.transform(pos_tr['text'])\nX_neutral = cv.transform(neutral_tr['text'])\nX_neg = cv.transform(neg_tr['text'])\n\npos_final_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_final_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_final_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())","e3d2974c":"pos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_final_count_df[k].sum()\n    neutral = neutral_final_count_df[k].sum()\n    neg = neg_final_count_df[k].sum()\n    \n    pos_words[k] = pos\/(pos_tr.shape[0])\n    neutral_words[k] = neutral\/(neutral_tr.shape[0])\n    neg_words[k] = neg\/(neg_tr.shape[0])","8ec3c0d9":"neg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","58e87fa2":"tol = 0.001\n\nfor index, row in test.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    sample.loc[sample['textID'] == row['textID'], ['selected_text']] = selected_text\n    ","05f4b383":"sample.to_csv('submission.csv', index = False)","b7c95e0c":"### This is a simple solution using only word counts with CountVectorizer to make predictions.\n\n#### Here's the idea:\n- Find and weight words that are used most often in only certain kinds of tweets.\n- Search all subsets of the tweet and calculate a score based on these weights.\n- For positive or negative tweets, the selected text is the most highly weighted subset, within some threshold.\n- Always return the entire text for neutral tweets.","7a32087e":"### Algorithm for finding selected text: \n  \n1. For every tweet:\n\n    a. Let $j$ be the sentiment of the tweet. \n\n    b. If $j ==$ neutral return entire text.\n\n    c. Otherwise, for each subset of words in the tweet, calculate $\\sum\\limits_{i}w_{i, j}$, where $i$ is the set of words in the tweet\n\n   d. Return the subset of words with the largest sum, given that it exceeds some tolerance.","1db0d878":"Create and submit the submission file.","b893b7f9":"Recalculate word weights using the entire training set.","f4d0f9ce":"Create a training set and a validation set.","cbdfee0c":"Calculate the selected text and score for the validation set.","084f91de":"### Algorithm for weight calculation:\n\n1. For each class $j \\in \\{positive, neutral, negative\\}$\n\n    a. Find all the words $i$ in the tweets belonging to class $j$.\n\n    b. Calculate $n_{i, j} =$ the number of tweets in class $j$ containing word $i$. \n\n    c. Let $d_j$ be the number of tweets in class $j$.  Calculate $p_{i, j} = \\frac{n_{i, j}}{d_j}$, the proportion of tweets in class $j$ that conain word $i$.\n\n    d. Let $w_{i, j} = p_{i, j} - \\sum\\limits_{k \\neq j}p_{i, k}$ be the weights assigned to each word within each class. \n    ","954e9939":"### Generate Submission","97c49e85":"Break up the training data into datasets where the sentiment is positive, neutral, or negative"}}