{"cell_type":{"8ef69f03":"code","1c99349c":"code","82ac04af":"code","ab1c00cf":"code","45388d6d":"code","240c5e9c":"code","ed09f27f":"code","5cd7393f":"code","ff430fd8":"code","a5d14080":"code","223e676f":"code","a072781e":"code","d8512f54":"code","60a96e29":"code","e6d1c39a":"code","83c17a4c":"code","44ce0911":"code","5b17683f":"code","1cff98f7":"code","900b9e63":"code","2e25f42b":"code","b3155df2":"code","814eb0e9":"code","3de27169":"code","414948dc":"code","044c753d":"code","fbba5b6a":"code","247d3980":"code","065f8229":"code","820ef206":"code","09aa04dd":"code","49a6b134":"code","f189e33b":"code","ba88c211":"code","28020167":"code","c1ab839b":"code","8c7db011":"code","3a70a27c":"code","f5e01cd2":"code","d108128f":"code","e58dfa19":"markdown","5207bf7f":"markdown","b6ca1880":"markdown","76ec1e60":"markdown","76a4c439":"markdown","4d0f9664":"markdown","dd992331":"markdown","e2c9e6a4":"markdown","c63d4d5d":"markdown","29b4ab15":"markdown","4cb72d85":"markdown","7f4d5339":"markdown","997e7973":"markdown","db2e7d1a":"markdown","f24e811e":"markdown","dd7f94b1":"markdown","fd859a6f":"markdown","d4eea72a":"markdown","b94aaf11":"markdown","5880f52b":"markdown","119a51bc":"markdown","72107db5":"markdown"},"source":{"8ef69f03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c99349c":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use(\"fivethirtyeight\")\nsns.set_style(\"darkgrid\")","82ac04af":"from sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.linear_model import Ridge\nfrom xgboost import XGBRegressor","ab1c00cf":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","45388d6d":"display(train.head())\ndisplay(test.head())\ndisplay(submission.head())","240c5e9c":"display(train.shape)\ndisplay(test.shape)\ndisplay(submission.shape)","ed09f27f":"display(train.info())\ndisplay(test.info())","5cd7393f":"!pip install dataprep","ff430fd8":"from dataprep.eda import *\nfrom dataprep.eda import plot","a5d14080":"# plots the distribution of each column and calculates dataset statistics\nplot(train)","223e676f":"from dataprep.eda import plot_correlation","a072781e":"plot_correlation(train)","d8512f54":"from dataprep.eda import plot_missing","60a96e29":"plot_missing(train)","e6d1c39a":"create_report(train)","83c17a4c":"plt.figure(figsize=(18,18))\nsns.boxplot(data=train, orient=\"h\");","44ce0911":"plt.figure(figsize=(18,18))\nsns.boxplot(data=test, orient=\"h\");","5b17683f":"# Pearson Correlation\nplt.figure(figsize=(18,10))\nsns.heatmap(train.corr(method='pearson'), cbar=False, annot=True, fmt='.1f', linewidth=0.2, cmap='coolwarm');","1cff98f7":"# Spearman Correlation\nplt.figure(figsize=(24,15))\nsns.heatmap(train.corr(method='spearman'), cbar=False, annot=True, fmt='.1f', linewidth=0.2, cmap='coolwarm');","900b9e63":"fig, ax = plt.subplots(figsize=(18, 12))\ncorr = train.corr()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\nax.text(-1.1, -0.7, 'Correlation between the Features', fontsize=20, fontweight='bold', fontfamily='serif')\nsns.heatmap(corr, mask=mask, annot=False, fmt='.2f', linewidth=0.2, cbar=True, cmap='coolwarm');","2e25f42b":"# kendall\nfig, ax = plt.subplots(1, 3, figsize=(17 , 5))\n\nfeature_lst = ['relative_humidity', 'absolute_humidity', 'sensor_1','sensor_2','sensor_3', 'sensor_4', 'sensor_5']\n\ncorr = train[feature_lst].corr()\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nfor idx, method in enumerate(['pearson', 'kendall', 'spearman']):\n    sns.heatmap(train[feature_lst].corr(method=method), ax=ax[idx],\n            square=True, annot=True, fmt='.1f', center=0, linewidth=2,\n            cbar=False, cmap=sns.diverging_palette(240, 10, as_cmap=True),\n            mask=mask\n           ) \n    ax[idx].set_title(f'{method.capitalize()} Correlation', loc='left', fontweight='bold')     \n\nplt.show()","b3155df2":"train.skew()","814eb0e9":"test.skew()","3de27169":"plt.figure(figsize=(16, 16), tight_layout=True)\n\nall_df = pd.concat([train, test]).reset_index(drop=True)\nall_df.fillna(0, inplace=True)\nfor i, col in enumerate(test.columns[1:]):\n    plt.subplot(8, 1, i+1)\n    plt.title(col)\n\n    plt.plot(all_df[col][:train.shape[0]])\n    plt.plot(all_df[col][train.shape[0]:])","414948dc":"columns = test.columns[1:]\ncolumns","044c753d":"X = train[columns].values\nX_test = test[columns].values\ntarget_1 = train['target_carbon_monoxide'].values.reshape(-1,1)\ntarget_2 = train['target_benzene'].values.reshape(-1,1)\ntarget_3 = train['target_nitrogen_oxides'].values.reshape(-1,1)","fbba5b6a":"rr = Ridge()\nrr.fit(X, target_1)\nsubmission['target_carbon_monoxide'] = rr.predict(X_test)\n\nrr = Ridge()\nrr.fit(X, target_2)\nsubmission['target_benzene'] = rr.predict(X_test)\n\nrr = Ridge()\nrr.fit(X, target_3)\nsubmission['target_nitrogen_oxides'] = rr.predict(X_test)","247d3980":"submission.head()","065f8229":"submission.to_csv('submission.csv', index=False)","820ef206":"# import packages\nimport pandas as pd\n\nimport h2o\nfrom h2o.automl import H2OAutoML","09aa04dd":"# prepare data\nh2o.init()\n\nh2o_train = h2o.import_file('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\nh2o_test = h2o.import_file('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')","49a6b134":"## run model for carbon monoxide\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\nh2oaml_carbon_monoxide = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\nh2oaml_carbon_monoxide.train(x=features, y='target_carbon_monoxide', training_frame=h2o_train)","f189e33b":"# check leaderboard for carbon monoxide\nh2oaml_carbon_monoxide.leaderboard","ba88c211":"# run model for carbon benzene\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\nh2oaml_benzene = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\nh2oaml_benzene.train(x=features, y='target_benzene', training_frame=h2o_train)","28020167":"# check leaderboard for benzene\nh2oaml_benzene.leaderboard","c1ab839b":"# run model for nitrogen oxides\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\nh2oaml_nitrogen_oxides = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\nh2oaml_nitrogen_oxides.train(x=features, y='target_nitrogen_oxides', training_frame=h2o_train)","8c7db011":"# check leaderboard for nitrogen oxides\nh2oaml_nitrogen_oxides.leaderboard","3a70a27c":"# generate predictions\npreds_h2oaml_carbon_monoxide = h2oaml_carbon_monoxide.leader.predict(h2o_test)\npreds_h2oaml_benzene = h2oaml_benzene.leader.predict(h2o_test)\npreds_h2oaml_nitrogen_oxides = h2oaml_nitrogen_oxides.leader.predict(h2o_test)","f5e01cd2":"# create submission\nsubmission = pd.DataFrame({\n    'date_time': test.date_time,\n    'target_carbon_monoxide': preds_h2oaml_carbon_monoxide.as_data_frame().predict,\n    'target_benzene': preds_h2oaml_benzene.as_data_frame().predict,\n    'target_nitrogen_oxides': preds_h2oaml_nitrogen_oxides.as_data_frame().predict\n})\n\nsubmission.head()","d108128f":"# save submission\nsubmission.to_csv('submission_H2OAutoML.csv', index=False)","e58dfa19":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 3) EDA (Exploratory Data Analysis) <\/h1>","5207bf7f":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:180%; text-align:center; border-radius: 10px 50px;\"> 4) MODEL BUILDING AND EVALUATION <\/h1>","b6ca1880":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:180%; text-align:left; border-radius: 0px 0px;\"> 3.3.2) Relation between Features <\/h1>","76ec1e60":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:180%; text-align:center; border-radius: 10px 50px;\"> 6) Light AutoML <\/h1>","76a4c439":"* [1) Load Required Libraries](#1)\n\n* [2) Read Data](#2)\n\n* [3) EDA (Exploratory Data Analysis)](#3)\n\n  * [3.1) DataPrep (AutoEDA)](#3.1)\n  \n  * [3.2) Outliers](#3.2)\n  \n  * [3.3) Relation between Features](#3.3)\n  \n    * [3.3.1) Relation between Features](#3.3.1)\n    \n    * [3.3.2) Relation between Features](#3.3.2)","4d0f9664":"# generate predictions\npreds_laml_carbon_monoxide = laml_carbon_monoxide.predict(test[train.columns]).data.ravel()\npreds_laml_benzene = laml_benzene.predict(test[train.columns]).data.ravel()\npreds_laml_nitrogen_oxides = laml_nitrogen_oxides.predict(test[train.columns]).data.ravel()","dd992331":"# install packages\n!python3 -m pip install -q lightautoml","e2c9e6a4":"<h1 style=\"background-color:skyblue; font-family:newtimeroman; font-size:170%; text-align:left; border-radius: 0px 0px;\"> 3.2) Outliers <\/h1>","c63d4d5d":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 10px 50px;\"> 5) H2O AutoML <\/h1>","29b4ab15":"## save submission\nsubmission.to_csv(PATH_LAML_SUBMISSION, index=False)","4cb72d85":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> Table of Contents <\/h1>","7f4d5339":"a. Pearson Correlation\n\nb. Spearman Correlation\n\nc. kendall","997e7973":"# run model for benzene\ntrain['target'] = train.target_benzene.values\n\nlaml_benzene = TabularAutoML(\n    task = Task('reg'),\n    timeout = 180\n)\n\nlaml_benzene.fit_predict(train_data=train, roles={'target': 'target'})\n\ndel train['target']","db2e7d1a":"# run model for nitrogen oxides\ntrain['target'] = train.target_nitrogen_oxides.values\n\nlaml_nitrogen_oxides = TabularAutoML(\n    task = Task('reg'),\n    timeout = 180\n)\n\nlaml_nitrogen_oxides.fit_predict(train_data=train, roles={'target': 'target'})\n\ndel train['target']","f24e811e":"<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:180%; text-align:left; border-radius: 0px 0px;\"> 3.3) Relation between Features <\/h1>","dd7f94b1":"<h1 style=\"background-color:skyblue; font-family:newtimeroman; font-size:180%; text-align:left; border-radius: 0x 0px;\"> 3.1) DataPrep (AutoEDA) <\/h1>","fd859a6f":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left; border-radius: 0px 0px;\"> 3.3.1) Relation between Features <\/h1>","d4eea72a":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 2) Read Data <\/h1>","b94aaf11":"# import packages\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML\nfrom lightautoml.tasks import Task","5880f52b":"# create submission\nsubmission = pd.DataFrame({\n    'date_time': test.date_time,\n    'target_carbon_monoxide': preds_laml_carbon_monoxide,\n    'target_benzene': preds_laml_benzene,\n    'target_nitrogen_oxides': preds_laml_nitrogen_oxides\n})\n\nsubmission.head()","119a51bc":"# run model for carbon monoxide\ntrain['target'] = train.target_carbon_monoxide.values\n\nlaml_carbon_monoxide = TabularAutoML(\n    task = Task('reg'),\n    timeout = 180\n)\n\nlaml_carbon_monoxide.fit_predict(train_data=train, roles={'target': 'target'})\n\ndel train['target']","72107db5":"<h1 style=\"background-color:LimeGreen; font-family:timenewroman; font-size:200%; text-align:center; border-radius: 10px 50px;\"> 1) Load Required Libraries <\/h1>"}}