{"cell_type":{"0a7a4d9a":"code","cd858466":"code","a600b34d":"code","de67c8d9":"code","1b59c608":"code","ccb0b226":"code","83dd5141":"code","8ea63d77":"code","d3ea3b0f":"code","909be18b":"code","6d235b06":"code","774cebc5":"code","78f344a2":"code","224a8151":"code","ca0f7575":"code","68444dc1":"code","ed6e4d0c":"code","169179d6":"code","5d9f69dc":"code","1345d63f":"code","957ccd5b":"code","078e0319":"code","60cb1e0b":"code","60324517":"markdown","939a2cf6":"markdown"},"source":{"0a7a4d9a":"import tensorflow as tf\nimport tensorflow.keras as keras\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport PIL.Image","cd858466":"train = pd.read_csv(\"\/kaggle\/input\/aicmnist\/mnist_train\/train.csv\",header=None)\ntest = pd.read_csv(\"\/kaggle\/input\/aicmnist\/mnist_test\/test.csv\",header=None)\nsubmission = pd.read_csv(\"\/kaggle\/input\/aicmnist\/mnist_sample.csv\")","a600b34d":"X_valid = tf.constant(train.loc[:10000,1:],dtype='float32')\ny_valid = tf.constant(train.loc[:10000,0],dtype='float32')\nX_train = tf.constant(train.loc[10000:,1:],dtype='float32')\ny_train = tf.constant(train.loc[10000:,0],dtype='float32')","de67c8d9":"X_test = tf.constant(test.loc[:,:],dtype='float32')","1b59c608":"print(\" Training data size: \", X_train.shape)\nprint(\" Validation data size: \", X_valid.shape)\nprint(\" Testing data size: \", X_test.shape)","ccb0b226":"inputs = keras.layers.Input(shape=(784,))\nx = keras.layers.Dense(256,activation=\"relu\")(inputs)\nx = keras.layers.Dense(64,activation=\"relu\")(x)\nout = keras.layers.Dense(10,activation=\"softmax\")(x)\n\nmodel = keras.Model(inputs=inputs,outputs=out,name=\"aicrowd_mlp\")","83dd5141":"def tensortoimage(tensor):\n    out = tf.reshape(tensor,[tensor.shape[0],28,28,1])\n    out \/= 255\n    return out","8ea63d77":"X_train = tensortoimage(X_train)\nX_valid = tensortoimage(X_valid)\nX_test = tensortoimage(X_test)","d3ea3b0f":"print(\" Shape as an Image: \")\nprint(\" Training data size: \", X_train.shape)\nprint(\" Validation data size: \", X_valid.shape)\nprint(\" Testing data size: \", X_test.shape)","909be18b":"inputs = keras.layers.Input(shape=[28,28,1])\nx = keras.layers.Conv2D(16,(3,3),padding='same',activation='relu')(inputs)\nx = keras.layers.Conv2D(16,(3,3),padding='same',activation='relu')(x)\nx = keras.layers.MaxPooling2D((2,2))(x)\n\nx = keras.layers.Conv2D(64,(3,3),activation='relu')(x)\nx = keras.layers.Conv2D(64,(3,3),activation='relu')(x)\nx = keras.layers.MaxPool2D((2,2))(x)\n\nx = keras.layers.Flatten()(x)\n\nx = keras.layers.Dense(64,activation='relu')(x)\nout = keras.layers.Dense(10,activation='softmax')(x)\n\nmodel = keras.Model(inputs=[inputs],outputs=[out],name='Conv_mnist_aic')","6d235b06":"model.summary()","774cebc5":"optimizer = keras.optimizers.Adagrad(lr=0.01)\nloss = keras.losses.SparseCategoricalCrossentropy()","78f344a2":"earlystopping = keras.callbacks.EarlyStopping(min_delta=0.0001)","224a8151":"model.compile(optimizer=optimizer,loss=loss,metrics=['accuracy'])","ca0f7575":"model.fit(X_train,y_train,epochs=20,validation_data=(X_valid,y_valid))","68444dc1":"y_pred = model.predict(X_valid)","ed6e4d0c":"y_pred_labels = np.argmax(y_pred,axis = 1)","169179d6":"from sklearn.metrics import f1_score","5d9f69dc":"f1_score(y_valid,y_pred_labels,average='macro')","1345d63f":"y_test = model.predict(X_test)\ny_test_labels = np.argmax(y_test,axis=1)","957ccd5b":"submission = pd.DataFrame(y_test_labels)\nsubmission.head()","078e0319":"submission.to_csv('submission.csv',header=['label'],index=False)","60cb1e0b":"submission","60324517":"## Run Below code only when you want to use Convolution Neural Networks for prediction","939a2cf6":"## Run Below Code only if you want a MLP Model"}}