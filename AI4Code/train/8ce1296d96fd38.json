{"cell_type":{"8bb057f3":"code","e50a220d":"code","187a9620":"code","cc4e7b91":"code","bfde364e":"code","40b292ca":"code","8382723a":"code","f67c767c":"code","a885faa3":"code","656edae5":"code","c878d899":"code","ea85bde6":"code","0b47c711":"code","fe3cf301":"code","01b6f2f1":"code","404ae892":"code","629e3d45":"markdown","978d4859":"markdown","1d86d3af":"markdown","e6e484e3":"markdown","4373a7b7":"markdown","98019055":"markdown"},"source":{"8bb057f3":"from typing import Dict\n\nfrom tempfile import gettempdir\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch import nn, optim\nfrom torch.utils.data import DataLoader\nfrom torchvision.models.resnet import resnet50, resnet18, resnet34, resnet101\nfrom tqdm import tqdm\n\nimport l5kit\nfrom l5kit.configs import load_config_data\nfrom l5kit.data import LocalDataManager, ChunkedDataset\nfrom l5kit.dataset import AgentDataset, EgoDataset\nfrom l5kit.rasterization import build_rasterizer\nfrom l5kit.evaluation import write_pred_csv, compute_metrics_csv, read_gt_csv, create_chopped_dataset\nfrom l5kit.evaluation.chop_dataset import MIN_FUTURE_STEPS\nfrom l5kit.evaluation.metrics import neg_multi_log_likelihood, time_displace\nfrom l5kit.geometry import transform_points\nfrom l5kit.visualization import PREDICTED_POINTS_COLOR, TARGET_POINTS_COLOR, draw_trajectory\nfrom prettytable import PrettyTable\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\n\nimport os\nimport random\nimport time\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e50a220d":"l5kit.__version__","187a9620":"def set_seed(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    \nset_seed(42)","cc4e7b91":"# --- Lyft configs ---\ncfg = {\n    'format_version': 4,\n    'data_path': \"\/kaggle\/input\/lyft-motion-prediction-autonomous-vehicles\",\n    'model_params': {\n        'model_architecture': 'resnet34',\n        'history_num_frames': 10,\n        'history_step_size': 1,\n        'history_delta_time': 0.1,\n        'future_num_frames': 50,\n        'future_step_size': 1,\n        'future_delta_time': 0.1,\n        'model_name': \"model_resnet34_output\",\n        'lr': 1e-3,\n        'weight_path': \"\/kaggle\/input\/lyft-pretrained-model-hv\/model_multi_update_lyft_public.pth\",\n        'train': False,\n        'predict': True\n    },\n\n    'raster_params': {\n        'raster_size': [224, 224],\n        'pixel_size': [0.5, 0.5],\n        'ego_center': [0.25, 0.5],\n        'map_type': 'py_semantic',\n        'satellite_map_key': 'aerial_map\/aerial_map.png',\n        'semantic_map_key': 'semantic_map\/semantic_map.pb',\n        'dataset_meta_key': 'meta.json',\n        'filter_agents_threshold': 0.5\n    },\n\n    'train_data_loader': {\n        'key': 'scenes\/train.zarr',\n        'batch_size': 16,\n        'shuffle': True,\n        'num_workers': 4\n    },\n    \n    'test_data_loader': {\n        'key': 'scenes\/test.zarr',\n        'batch_size': 32,\n        'shuffle': False,\n        'num_workers': 4\n    },\n\n    'train_params': {\n        'max_num_steps': 101,\n        'checkpoint_every_n_steps': 20,\n    },\n       'val_data_loader': {\n        'key': 'scenes\/validate_chopped_100\/validate.zarr',\n        'batch_size': 16,\n        'shuffle': True,\n        'num_workers': 8\n    },\n    'val_params': {\n        'max_num_steps': 5000,\n    }\n}","bfde364e":"# set env variable for data\nDIR_INPUT = cfg[\"data_path\"]\nos.environ[\"L5KIT_DATA_FOLDER\"] = DIR_INPUT\ndm = LocalDataManager(None)","40b292ca":"# --- Function utils ---\n# Original code from https:\/\/github.com\/lyft\/l5kit\/blob\/20ab033c01610d711c3d36e1963ecec86e8b85b6\/l5kit\/l5kit\/evaluation\/metrics.py\nimport numpy as np\n\nimport torch\nfrom torch import Tensor\n\n\ndef pytorch_neg_multi_log_likelihood_batch(\n    gt: Tensor, pred: Tensor, confidences: Tensor, avails: Tensor\n) -> Tensor:\n    \"\"\"\n    Compute a negative log-likelihood for the multi-modal scenario.\n    log-sum-exp trick is used here to avoid underflow and overflow, For more information about it see:\n    https:\/\/en.wikipedia.org\/wiki\/LogSumExp#log-sum-exp_trick_for_log-domain_calculations\n    https:\/\/timvieira.github.io\/blog\/post\/2014\/02\/11\/exp-normalize-trick\/\n    https:\/\/leimao.github.io\/blog\/LogSumExp\/\n    Args:\n        gt (Tensor): array of shape (bs)x(time)x(2D coords)\n        pred (Tensor): array of shape (bs)x(modes)x(time)x(2D coords)\n        confidences (Tensor): array of shape (bs)x(modes) with a confidence for each mode in each sample\n        avails (Tensor): array of shape (bs)x(time) with the availability for each gt timestep\n    Returns:\n        Tensor: negative log-likelihood for this example, a single float number\n    \"\"\"\n    assert len(pred.shape) == 4, f\"expected 3D (MxTxC) array for pred, got {pred.shape}\"\n    batch_size, num_modes, future_len, num_coords = pred.shape\n\n    assert gt.shape == (batch_size, future_len, num_coords), f\"expected 2D (Time x Coords) array for gt, got {gt.shape}\"\n    assert confidences.shape == (batch_size, num_modes), f\"expected 1D (Modes) array for gt, got {confidences.shape}\"\n    assert torch.allclose(torch.sum(confidences, dim=1), confidences.new_ones((batch_size,))), \"confidences should sum to 1\"\n    assert avails.shape == (batch_size, future_len), f\"expected 1D (Time) array for gt, got {avails.shape}\"\n    # assert all data are valid\n    assert torch.isfinite(pred).all(), \"invalid value found in pred\"\n    assert torch.isfinite(gt).all(), \"invalid value found in gt\"\n    assert torch.isfinite(confidences).all(), \"invalid value found in confidences\"\n    assert torch.isfinite(avails).all(), \"invalid value found in avails\"\n\n    # convert to (batch_size, num_modes, future_len, num_coords)\n    gt = torch.unsqueeze(gt, 1)  # add modes\n    avails = avails[:, None, :, None]  # add modes and cords\n\n    # error (batch_size, num_modes, future_len)\n    error = torch.sum(((gt - pred) * avails) ** 2, dim=-1)  # reduce coords and use availability\n\n    with np.errstate(divide=\"ignore\"):  # when confidence is 0 log goes to -inf, but we're fine with it\n        # error (batch_size, num_modes)\n        error = torch.log(confidences) - 0.5 * torch.sum(error, dim=-1)  # reduce time\n\n    # use max aggregator on modes for numerical stability\n    # error (batch_size, num_modes)\n    max_value, _ = error.max(dim=1, keepdim=True)  # error are negative at this point, so max() gives the minimum one\n    error = -torch.log(torch.sum(torch.exp(error - max_value), dim=-1, keepdim=True)) - max_value  # reduce modes\n    # print(\"error\", error)\n    return torch.mean(error)\n\n\ndef pytorch_neg_multi_log_likelihood_single(\n    gt: Tensor, pred: Tensor, avails: Tensor\n) -> Tensor:\n    \"\"\"\n\n    Args:\n        gt (Tensor): array of shape (bs)x(time)x(2D coords)\n        pred (Tensor): array of shape (bs)x(time)x(2D coords)\n        avails (Tensor): array of shape (bs)x(time) with the availability for each gt timestep\n    Returns:\n        Tensor: negative log-likelihood for this example, a single float number\n    \"\"\"\n    # pred (bs)x(time)x(2D coords) --> (bs)x(mode=1)x(time)x(2D coords)\n    # create confidence (bs)x(mode=1)\n    batch_size, future_len, num_coords = pred.shape\n    confidences = pred.new_ones((batch_size, 1))\n    return pytorch_neg_multi_log_likelihood_batch(gt, pred.unsqueeze(1), confidences, avails)","8382723a":"class LyftMultiModel(nn.Module):\n\n    def __init__(self, cfg: Dict, num_modes=3):\n        super().__init__()\n\n        architecture = cfg[\"model_params\"][\"model_architecture\"]\n        backbone = eval(architecture)(pretrained=True, progress=True)\n        self.backbone = backbone\n\n        num_history_channels = (cfg[\"model_params\"][\"history_num_frames\"] + 1) * 2\n        num_in_channels = 3 + num_history_channels\n\n        self.backbone.conv1 = nn.Conv2d(\n            num_in_channels,\n            self.backbone.conv1.out_channels,\n            kernel_size=self.backbone.conv1.kernel_size,\n            stride=self.backbone.conv1.stride,\n            padding=self.backbone.conv1.padding,\n            bias=False,\n        )\n\n        # This is 512 for resnet18 and resnet34;\n        # And it is 2048 for the other resnets\n        \n        if architecture == \"resnet50\":\n            backbone_out_features = 2048\n        else:\n            backbone_out_features = 512\n\n        # X, Y coords for the future positions (output shape: batch_sizex50x2)\n        self.future_len = cfg[\"model_params\"][\"future_num_frames\"]\n        num_targets = 2 * self.future_len\n\n        # You can add more layers here.\n        self.head = nn.Sequential(\n            # nn.Dropout(0.2),\n            nn.Linear(in_features=backbone_out_features, out_features=4096),\n        )\n\n        self.num_preds = num_targets * num_modes\n        self.num_modes = num_modes\n\n        self.logit = nn.Linear(4096, out_features=self.num_preds + num_modes)\n\n    def forward(self, x):\n        x = self.backbone.conv1(x)\n        x = self.backbone.bn1(x)\n        x = self.backbone.relu(x)\n        x = self.backbone.maxpool(x)\n\n        x = self.backbone.layer1(x)\n        x = self.backbone.layer2(x)\n        x = self.backbone.layer3(x)\n        x = self.backbone.layer4(x)\n\n        x = self.backbone.avgpool(x)\n        x = torch.flatten(x, 1)\n\n        x = self.head(x)\n        x = self.logit(x)\n\n        # pred (batch_size)x(modes)x(time)x(2D coords)\n        # confidences (batch_size)x(modes)\n        bs, _ = x.shape\n        pred, confidences = torch.split(x, self.num_preds, dim=1)\n        pred = pred.view(bs, self.num_modes, self.future_len, 2)\n        assert confidences.shape == (bs, self.num_modes)\n        confidences = torch.softmax(confidences, dim=1)\n        return pred, confidences","f67c767c":"def forward(data, model, device, criterion = pytorch_neg_multi_log_likelihood_batch):\n    inputs = data[\"image\"].to(device)\n    target_availabilities = data[\"target_availabilities\"].to(device)\n    targets = data[\"target_positions\"].to(device)\n    # Forward pass\n    preds, confidences = model(inputs)\n    loss = criterion(targets, preds, confidences, target_availabilities)\n    return loss, preds, confidences","a885faa3":"# ==== INIT MODEL=================\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel = LyftMultiModel(cfg)\n\n#load weight if there is a pretrained model\nweight_path = cfg[\"model_params\"][\"weight_path\"]\nif weight_path:\n    model.load_state_dict(torch.load(weight_path))\n\nmodel.to(device)\noptimizer = optim.Adam(model.parameters(), lr=cfg[\"model_params\"][\"lr\"])\nprint(f'device {device}')","656edae5":"!git clone https:\/\/github.com\/lyft\/l5kit","c878d899":"from collections import OrderedDict, defaultdict\n\nimport sys\nsys.path.append('.\/l5kit\/l5kit\/l5kit\/evaluation')\n\nfrom csv_utils import read_gt_csv, read_pred_csv, write_gt_csv, write_pred_csv","ea85bde6":"# https:\/\/stackoverflow.com\/questions\/50544730\/how-do-i-split-a-custom-dataset-into-training-and-test-datasets\nfrom torch.utils.data.sampler import SubsetRandomSampler\n\nrandom_seed = 42 + 5\nshuffle_dataset = True\n\n# ===== INIT VAL DATASET============================================================\neval_base_path = '..\/input\/lyft-validate-chopped'\neval_cfg = cfg[\"val_data_loader\"]\nrasterizer = build_rasterizer(cfg, dm)\n\neval_zarr_path = str(Path(eval_base_path) \/ 'validate.zarr' )\neval_mask_path = str(Path(eval_base_path) \/ \"mask.npz\")\neval_gt_path = str(Path(eval_base_path) \/ \"gt.csv\")\n\neval_zarr = ChunkedDataset(eval_zarr_path).open()\neval_mask = np.load(eval_mask_path)[\"arr_0\"]\n# ===== INIT DATASET AND LOAD MASK\neval_dataset = AgentDataset(cfg, eval_zarr, rasterizer, agents_mask=eval_mask)\n\n# Creating data indices for training and validation splits:\ndataset_size = len(eval_dataset)\nindices = list(range(dataset_size))\nsplit = cfg[\"val_params\"][\"max_num_steps\"]\nif shuffle_dataset :\n    np.random.seed(random_seed)\n    np.random.shuffle(indices)\nval_indices = indices[:split]\n\nvalid_sampler = SubsetRandomSampler(val_indices)\nval_dataloader = DataLoader(eval_dataset, sampler=valid_sampler, batch_size=eval_cfg[\"batch_size\"], \n                             num_workers=eval_cfg[\"num_workers\"])\n\nprint(\"Valid {}\".format(len(val_indices)))","0b47c711":"ground_truth_path = eval_gt_path\nground_truth = OrderedDict()\ninference = OrderedDict()\n\nfor el in read_gt_csv(ground_truth_path):\n    ground_truth[el[\"track_id\"] + el[\"timestamp\"]] = el","fe3cf301":"# ==== EVAL LOOP\nmodel.eval()\ntorch.set_grad_enabled(False)\n\n# store information for evaluation\nfuture_coords_offsets_pd = []\ntimestamps = []\nconfidences_list = []\nagent_ids = []\n\nprogress_bar = tqdm(val_dataloader)\nfor data in progress_bar:\n    loss, preds, confidences = forward(data, model, device)\n\n    #fix for the new environment\n    preds = preds.cpu().numpy()\n    world_from_agents = data[\"world_from_agent\"].numpy()\n    centroids = data[\"centroid\"].numpy()\n    coords_offset = []\n\n    # convert into world coordinates and compute offsets\n    for idx in range(len(preds)):\n        for mode in range(3):\n            preds[idx, mode, :, :] = transform_points(preds[idx, mode, :, :], world_from_agents[idx]) - centroids[idx][:2]\n\n    future_coords_offsets_pd.append(preds.copy())\n    confidences_list.append(confidences.cpu().numpy().copy())\n    timestamps.append(data[\"timestamp\"].numpy().copy())\n    agent_ids.append(data[\"track_id\"].numpy().copy()) ","01b6f2f1":"pred_path = 'pred_short.csv'\nwrite_pred_csv(pred_path,\n           timestamps=np.concatenate(timestamps),\n           track_ids=np.concatenate(agent_ids),\n           coords=np.concatenate(future_coords_offsets_pd),\n           confs = np.concatenate(confidences_list)\n          )\n\ninference = OrderedDict()\n\nfor el in read_pred_csv(pred_path):\n    inference[el[\"track_id\"] + el[\"timestamp\"]] = el","404ae892":"metrics = [neg_multi_log_likelihood, time_displace]\nmetrics_dict = defaultdict(list)\n\nfor key, ground_truth_value in ground_truth.items():\n    gt_coord = ground_truth_value[\"coord\"]\n    avail = ground_truth_value[\"avail\"]\n        \n    # we subsampled the eval datset -> not every timestamp is available\n    if key in inference:\n        pred_coords = inference[key][\"coords\"]\n        conf = inference[key][\"conf\"]\n        for metric in metrics:\n            metrics_dict[metric.__name__].append(metric(gt_coord, pred_coords, conf, avail))\n\nprint({metric_name: np.mean(values, axis=0) for metric_name, values in metrics_dict.items()})","629e3d45":"Next we define the baseline model. Note that this model will return three possible trajectories together with confidence score for each trajectory.","978d4859":"## Loss function","1d86d3af":"## Model","e6e484e3":"This notebook is based on [Lyft: Complete train and prediction pipeline](https:\/\/www.kaggle.com\/huanvo\/lyft-complete-train-and-prediction-pipeline)","4373a7b7":"Now let us initialize the model and load the pretrained weights. Note that since the pretrained model was trained on GPU, you also need to enable GPU when running this notebook.","98019055":"## Configs"}}