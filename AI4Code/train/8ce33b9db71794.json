{"cell_type":{"acee98c1":"code","233edc1d":"code","d7d467aa":"code","822e4a28":"code","195046a5":"code","bd704d51":"code","6b0e539b":"code","f38f4040":"code","61ecb5b5":"code","d08710b5":"code","d593e2ca":"code","a7619a54":"code","24f842ae":"code","277bd42d":"code","97760bb4":"code","5ef43459":"code","e2337976":"code","ed015bbe":"code","5a7949ba":"code","8c8cb435":"code","33eca0cf":"code","14b90e42":"code","e2676b35":"code","e5193de3":"code","47c6601b":"code","1c3c1944":"markdown","01ecf31f":"markdown","803cd896":"markdown","b779c971":"markdown","14666360":"markdown","509f0d58":"markdown","9477fe6a":"markdown","a8a2f496":"markdown","680bd928":"markdown","c5d49e14":"markdown","960d7a7c":"markdown","86803597":"markdown","3bf27b10":"markdown"},"source":{"acee98c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","233edc1d":"train_data = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")","d7d467aa":"train_data.head()","822e4a28":"test_data = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")","195046a5":"test_data.tail()","bd704d51":"X_test = test_data.drop(['label'], axis = 1)\ny_test = test_data.label","6b0e539b":"train_data.isnull().sum().sum()","f38f4040":"X = train_data.drop(['label'], axis = 1)\ny = train_data.label","61ecb5b5":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","d08710b5":"parameters = {'max_depth' : [13,16,19]}","d593e2ca":"tree_clf = DecisionTreeClassifier()\ngrid_search_cv_clf_tree = GridSearchCV(tree_clf, parameters, cv = 5)\ngrid_search_cv_clf_tree.fit(X, y)","a7619a54":"grid_search_cv_clf_tree.best_params_","24f842ae":"best_clf_tree = grid_search_cv_clf_tree.best_estimator_","277bd42d":"best_clf_tree.score(X_test,y_test)","97760bb4":"clf_rf = RandomForestClassifier()","5ef43459":"clf_rf.fit(X,y)","e2337976":"clf_rf.score(X,y)","ed015bbe":"clf_rf.score(X_test,y_test)","5a7949ba":"parameters = {'n_estimators':[30, 60, 90], \n             'max_depth': [9, 15, 22]}","8c8cb435":"grid_search_cv_clf_rf = GridSearchCV(clf_rf, parameters, cv = 4)","33eca0cf":"grid_search_cv_clf_rf.fit(X, y)","14b90e42":"grid_search_cv_clf_rf.best_params_","e2676b35":"best_clf_rf = grid_search_cv_clf_rf.best_estimator_","e5193de3":"best_clf_rf.score(X,y)","47c6601b":"best_clf_rf.score(X_test,y_test)","1c3c1944":"checking if data has NULL elements","01ecf31f":"The final result was 88.22% accuracy, while Decision Tree Classifier shows 81% accuracy score. From observations, we can see that Random Forest Classifier works better than Decision Tree classifier.","803cd896":"Then, we used grid search for better solution","b779c971":"Using Grid Search to find best parameters","14666360":"checking last 5 elements","509f0d58":"checking first 5 elements","9477fe6a":"We tried to use Random Forest because it is a composition of \"Trees\" and the accuracy should be higher this time.","a8a2f496":"Firstly, we used default parameters for Randoom Forest","680bd928":"Dividing data to X and y using drop()","c5d49e14":"Decision Tree Classifier shows 82% accuracy score","960d7a7c":"In this Kaggle competition we have used Decision Tree classifier and Ranfom Forest classifier","86803597":"importing train data with pandas","3bf27b10":"This showed us 88.36% accuracy"}}