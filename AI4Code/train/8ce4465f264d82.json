{"cell_type":{"e85505d7":"code","d645104b":"code","fe25d902":"code","a9d84c47":"code","b40d8400":"code","1a66baa7":"code","da5dfa28":"code","6ded79f0":"code","b058c3c6":"code","dd48a4f5":"code","ff38e8d4":"code","aabc5545":"code","052c044e":"code","dbed80ae":"code","8b67d8fa":"code","e0f60c5e":"code","73dcccbf":"code","a9404469":"code","ea1e15a4":"code","605e7df8":"code","c72d7420":"code","42c7eaae":"code","7f180fab":"code","99595085":"code","345586e3":"code","ab5acc1f":"code","0617f370":"code","304f1e9e":"markdown","79ea1ca2":"markdown","d0035a79":"markdown","5965685f":"markdown","2528e127":"markdown","7cd9f52e":"markdown","611cb23c":"markdown","8806fd1b":"markdown","181a90b6":"markdown","1429952e":"markdown","12960352":"markdown","01137598":"markdown","c7e7067f":"markdown","55fbc19a":"markdown","9b5b65be":"markdown"},"source":{"e85505d7":"from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom tensorflow.keras.optimizers import RMSprop\nfrom keras.callbacks import ReduceLROnPlateau\nfrom sklearn.metrics import confusion_matrix\nfrom keras.models import Sequential\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport pandas as pd\nimport numpy as np\n%matplotlib inline\n\nnp.random.seed(2)\n\nimport itertools\n\nsns.set(style='white', context='notebook', palette='deep')","d645104b":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","fe25d902":"y_train = train['label']\n\nX_train = train.drop(labels = ['label'], axis=1)\n\ndel train\n\ng = sns.countplot(y_train)\n\ny_train.value_counts()","a9d84c47":"X_train.isnull().any().describe()","b40d8400":"test.isnull().any().describe()","1a66baa7":"X_train = X_train \/ 255.0\ntest = test \/ 255.0","da5dfa28":"# Reshape image in 3 dimensions (height=28px, width=28px, channel=1)\nX_train = X_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)","6ded79f0":"y_train = to_categorical(y_train, num_classes=10)","b058c3c6":"random_seed = 2","dd48a4f5":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=random_seed)","ff38e8d4":"g = plt.imshow(X_train[0][:,:,0])","aabc5545":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size=(5,5), padding='Same',\n                 activation='relu', input_shape=(28,28,1)))\n\nmodel.add(Conv2D(filters = 32, kernel_size=(5,5), padding='Same',\n                 activation='relu', input_shape=(28,28,1)))\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size=(3,3), padding='Same',\n                 activation='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size=(3,3), padding='Same',\n                 activation='relu'))\n\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","052c044e":"optimizer = RMSprop(learning_rate=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","dbed80ae":"model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","8b67d8fa":"# Set learning rate\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc',\n                                            patience=3,\n                                            verbose=1,\n                                            factor=0.5,\n                                            min_lr=0.00001)","e0f60c5e":"epochs = 25\nbatch_size = 96","73dcccbf":"# Training without augmentations\nhistory = model.fit(X_train, y_train, batch_size=batch_size, epochs=epochs,\n                    validation_data=(X_val, y_val), verbose=2)","a9404469":"# Augmentations\ndatagen = ImageDataGenerator(featurewise_center = False,\n                             samplewise_center = False,\n                             featurewise_std_normalization=False,\n                             samplewise_std_normalization=False,\n                             zca_whitening=False,\n                             rotation_range=10,\n                             zoom_range=0.1,\n                             width_shift_range=0.1,\n                             height_shift_range=0.1,\n                             horizontal_flip=False,\n                             vertical_flip=False)\n\ndatagen.fit(X_train)","ea1e15a4":"# Fit augmentation model\nhistory_aug = model.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size),\n                             epochs=epochs, validation_data=(X_val, y_val),\n                             verbose=2, steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                             callbacks=[learning_rate_reduction])","605e7df8":"# For non-augmented data\nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label='Training loss')\nax[0].plot(history.history['val_loss'], color='r', label='validation loss', axes=ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label='Training accuracy')\nax[1].plot(history.history['val_accuracy'], color='r', label='Validation accuracy')\n\nlegend = ax[1].legend(loc='best', shadow=True)","c72d7420":"# For augmented data\nfig, ax = plt.subplots(2,1)\nax[0].plot(history_aug.history['loss'], color='b', label='Training loss')\nax[0].plot(history_aug.history['val_loss'], color='r', label='validation loss', axes=ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history_aug.history['accuracy'], color='b', label='Training accuracy')\nax[1].plot(history_aug.history['val_accuracy'], color='r', label='Validation accuracy')\n\nlegend = ax[1].legend(loc='best', shadow=True)","42c7eaae":"def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    \n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        \n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                horizontalalignment='center',\n                color='white' if cm[i, j] > thresh else \"black\")\n        \n    plt.tight_layout()\n    plt.ylabel(\"True Label\")\n    plt.xlabel(\"Predicted Label\")","7f180fab":"y_pred = model.predict(X_val)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\ny_true = np.argmax(y_val, axis=1)\n\nconfusion_mtx = confusion_matrix(y_true, y_pred_classes)\n\nplot_confusion_matrix(confusion_mtx, classes = range(10))","99595085":"accuracy_score = model.evaluate(X_val, y_pred, verbose=2)","345586e3":"## Display wrong result\nerrors = (y_pred_classes - y_true != 0)\n\ny_pred_classes_errors = y_pred_classes[errors]\ny_pred_errors = y_pred[errors]\ny_true_errors = y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index, img_errors, pred_errors, obs_errors):\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows, ncols, sharex=True, sharey=True)\n    \n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row, col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row, col].set_title(\"Predicted label: {}\\nTrue label: {}\".format(pred_errors[error], obs_errors[error]))\n            n += 1\n            \ny_pred_errors_prob = np.max(y_pred_errors, axis=1)\ntrue_prob_errors = np.diagonal(np.take(y_pred_errors, y_true_errors, axis=1))\n\ndelta_pred_true_errors = y_pred_errors_prob - true_prob_errors\n\nsorted_delta_errors = np.argsort(delta_pred_true_errors)\n\nmost_important_errors = sorted_delta_errors[-6:]\n\n# show 6 top errors\ndisplay_errors(most_important_errors, X_val_errors, \n               y_pred_classes_errors, y_true_errors)","ab5acc1f":"results = model.predict(test)\n\nresults = np.argmax(results, axis=1)\n\nresults = pd.Series(results, name='Label')","0617f370":"submission = pd.concat([pd.Series(range(1,28001), name='ImageId'), results], axis=1)\n\nsubmission.to_csv(\"cnn_mnist_prdictions.csv\", index=False)","304f1e9e":"## 4. Evaluate the Model","79ea1ca2":"### 2.5 Label Encoding","d0035a79":"### 2.6 Split training and validation set","5965685f":"### 2.4 Reshape","2528e127":"### 3.2 Optimizer and annealer","7cd9f52e":"Gray-scale = 1D vector of 784 values being reshaped to 28x28x1 3D matrices\nRGB-images = 3 Channels 28x28x3 3D matrices","611cb23c":"## 3. CNN","8806fd1b":"### 2.1 Load Data","181a90b6":"### 4.1 Train and val curves","1429952e":"### 3.3 Data Augmentation","12960352":"Labels are 10 digits from 0 to 9","01137598":"### 2.3 Normalization","c7e7067f":"### 4.2 Confusion Matrix","55fbc19a":"### 2.2 Check for null and missing values","9b5b65be":"## 2. Data Preparation"}}