{"cell_type":{"6463c0d1":"code","1f02ec26":"code","bf1c22b6":"code","d0e57906":"code","5e821c25":"code","5794b9e2":"code","4d8ce35d":"code","83a8dc10":"code","1d8dd311":"code","36ee8b85":"code","97de45c6":"code","390261bc":"code","af7dc5fb":"code","80e305ec":"code","0f8d24a7":"code","4df1f403":"code","72d70538":"code","6f9e5372":"code","5d49628d":"code","25d20398":"code","a380cf76":"code","4d138fac":"code","71594c67":"code","2a5d00dd":"code","cd05027a":"code","fce2bd2a":"code","15022f8f":"code","8e09872a":"code","f721b80f":"code","1b92b227":"code","5918c4c3":"code","d2a9f48f":"code","0e2bab30":"code","671f030f":"code","e85bf58e":"code","ccb30926":"code","5d6d298f":"code","272f8b6e":"code","f7463aa5":"code","5c85bd23":"code","777f4ca5":"code","8f5351c6":"code","3b81ab34":"code","970dec8f":"code","4205a620":"code","7442d7c2":"code","eafe5b6c":"code","e8f73df6":"code","930e254e":"code","f6c90ff0":"code","b2bdd8b4":"code","512b6873":"code","568a992d":"code","5dafe3db":"code","b6538076":"code","f0f6d512":"code","eb3eb5ab":"code","ae95d1b8":"code","56bc7e08":"code","c792a965":"code","17a3347f":"code","2bf8ee9b":"code","4c3201e4":"code","cf346b10":"code","3fe3e283":"code","7d62c94c":"code","1e2a0f88":"code","d5e793d3":"code","eb63e40c":"code","21fceb2e":"code","1c8c995f":"code","34689244":"code","cf8ba432":"code","84b4c959":"code","a45a1aba":"code","04bca461":"code","e1fcf146":"code","0c99ba8e":"code","3bdfb1c6":"code","6704659f":"code","f90d684b":"code","7345d492":"code","1f08fc73":"code","ebbd58b3":"code","f0d52d95":"code","ec506627":"code","c868b0e0":"code","ccedb9cc":"code","57515a30":"code","56d9a360":"code","3a59503a":"code","63bddd98":"code","0e69f3bb":"code","6a57d7ea":"code","95c566fb":"code","286ff8d0":"code","c8a02d8a":"code","b4f1107f":"code","c2fe1df4":"code","4d75f029":"code","b656483d":"code","d8c5d974":"code","9f7691d3":"code","9b679f72":"code","dc40c829":"code","8d4997ec":"code","fdab928c":"code","1a2c0d18":"code","dbf48b7c":"code","61449932":"code","3444b0cc":"code","53ce6b81":"code","24aa22bd":"code","ed6ee123":"code","8adc1920":"code","d7c9ccd7":"code","350883bf":"code","f5fee370":"code","3b1719b7":"code","4a4767b6":"code","1fa0c63b":"code","23253995":"code","0ea6a598":"code","d08bc7c7":"code","65c608f9":"code","02750d1a":"markdown","d5c5d289":"markdown","92e0c8c0":"markdown","7b9fc3cb":"markdown","5913ae29":"markdown","9c1f219f":"markdown","2bdfbfa3":"markdown","e672bdbe":"markdown","14dda479":"markdown","5160b772":"markdown","15e9026a":"markdown","de906ae5":"markdown","8d806d66":"markdown","7cc2e220":"markdown","5520db3a":"markdown","c89fba1f":"markdown","eeef5bf7":"markdown","7fcebfe8":"markdown","fca0a884":"markdown","59cb734a":"markdown","02730bec":"markdown","0a9cf549":"markdown","99571e1d":"markdown","d1f3d236":"markdown","eefd70d8":"markdown","68172113":"markdown","30f46f3a":"markdown","ddcd4ce9":"markdown","5ec280d2":"markdown","afc447e8":"markdown","ebc26229":"markdown","6b9e1ae6":"markdown","aeff1793":"markdown","a5cf9033":"markdown","58a6933b":"markdown","6c18e8aa":"markdown","f3830260":"markdown","86fdc735":"markdown","7c59427a":"markdown","d6f55f20":"markdown","8b89b2ac":"markdown","16110850":"markdown","f2ae6dd7":"markdown","e485a52c":"markdown","e1052679":"markdown","e63f372d":"markdown","b290c925":"markdown","2b8003e8":"markdown","c84ecb06":"markdown","01d107ea":"markdown","93e34929":"markdown","e49f696b":"markdown","00615d01":"markdown","f4df9820":"markdown","784e8574":"markdown","ac02a35d":"markdown","8c225e93":"markdown","e08c1e12":"markdown","3639a917":"markdown","e14241db":"markdown","fd54bbb9":"markdown","f3813e7b":"markdown","1b1e7bfb":"markdown","a6a8b845":"markdown","31a3aaf8":"markdown","7193a74e":"markdown","a1bddc96":"markdown"},"source":{"6463c0d1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nplt.style.use('fivethirtyeight')","1f02ec26":"games = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\ngames","bf1c22b6":"def downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('{:.1f}% Compressed'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","d0e57906":"games = downcast(games)","5e821c25":"def resumetable(df):\n    print(f'Shape : {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns=['Data Type'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns={'index': 'Feature'})\n    summary['Num of null'] = df.isnull().sum().values\n    summary['Num of unique'] = df.nunique().values\n    summary['First value'] = df.loc[0].values\n    summary['Second value'] = df.loc[1].values\n    summary['Third value'] = df.loc[2].values\n    return summary\n\nresumetable(games)","5794b9e2":"def write_percent(ax, total_size):\n    '''Traverse the figure object and display the ratio at the top of the bar graph.'''\n    for patch in ax.patches:\n        height = patch.get_height() # Figure height (number of data)\n        width = patch.get_width() # Figure width\n        left_coord = patch.get_x() # The x-axis position on the left edge of the figure\n        percent = height\/total_size*100 # percent\n        \n        # Type text in the (x, y) coordinates\n        ax.text(x=left_coord + width\/2.0, # x-axis position\n                y=height + total_size*0.001, # y-axis position\n                s=f'{percent:1.1f}%', # Text\n                ha='center') # in the middle","4d8ce35d":"games['month'] = games['gameDate'].apply(lambda x: int(x.split('\/')[0]))\ngames['day'] = games['gameDate'].apply(lambda x: int(x.split('\/')[1]))\ngames['hour'] = games['gameTimeEastern'].apply(lambda x: int(x.split(':')[0]))","83a8dc10":"mpl.rc('font', size=15) # Set font size\nplt.figure(figsize=(7, 6)) # Set figure size\n\nax = sns.countplot(x='season', data=games)\nwrite_percent(ax, len(games)) \nax.set_title('Number of games for season');","1d8dd311":"mpl.rc('font', size=15)\nplt.figure(figsize=(8, 6))\n\nax = sns.countplot(x='month', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for month');","36ee8b85":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='day', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for day');","97de45c6":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='gameTimeEastern', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for gameTimeEastern');\nax.tick_params('x', labelrotation=30) # rotate 30 degree of x label","390261bc":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='hour', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for hour');","af7dc5fb":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='week', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for week');","80e305ec":"sns.pairplot(games, hue='homeTeamAbbr')","0f8d24a7":"sns.pairplot(games, hue='visitorTeamAbbr')","4df1f403":"sns.pairplot(games, hue='season')","72d70538":"sns.pairplot(games, hue='week')","6f9e5372":"sns.pairplot(games, hue='gameTimeEastern')","5d49628d":"players = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\nplayers","25d20398":"players = downcast(players)","a380cf76":"resumetable(players)","4d138fac":"check = players['height'].str.split('-', expand=True)\n\ncheck.columns = ['first', 'second']\n\ncheck.loc[(check['second'].notnull()), 'first'] = check[check['second'].notnull()]['first'].astype(np.int16) * 12 + check[check['second'].notnull()]['second'].astype(np.int16)","71594c67":"players[\"birthYear\"] = 0\nplayers[\"birthMonth\"] = 0\n#There are NA values in birthDate so that we should drop them\nplayers.dropna(subset=[\"birthDate\"], inplace=True)\nfor idx, row in players.iterrows():\n    if len(row['birthDate'].split('\/')) == 3: # 05\/17\/1994 \n        players.loc[idx, 'birthYear'] = row['birthDate'].split('\/')[2]\n        players.loc[idx, 'birthMonth'] = row['birthDate'].split('\/')[0]\n        \n    elif len(row['birthDate'].split('-')) == 3: # 1995-05-05\n        players.loc[idx, 'birthYear'] = row['birthDate'].split('-')[0]\n        players.loc[idx, 'birthMonth'] = row['birthDate'].split('-')[1]","2a5d00dd":"players_heights = players[\"height\"] # Get the Height data from DataFrame\nplayers_heights = players_heights.apply(lambda x: x.split(\"-\")) # Split the heights by hyphen (\"-\")\n\n# Convert Heights to Centimeters and add them to DataFrame\nplayers[\"height\"] = players_heights.apply(lambda x: int(x[0]) * 12 + int(x[1]) if len(x) == 2 else int(x[0])) * 2.54\n\n# Convert Weights to Kilograms and them to DataFrame\nplayers[\"weight\"] = round(players.weight * 0.453592, 2)\n\nplayers","cd05027a":"import seaborn as sns\ncollege_df = players['collegeName'].value_counts()\nsns.set_style('darkgrid')\nfig, axes = plt.subplots(1,2,figsize=(12,6))\naxes[0] = sns.barplot(x=college_df[:10].values, y=college_df[:10].index, edgecolor=\"black\", ax=axes[0] )\naxes[0].set_title(\"Top 10 College player counts\", fontsize=20)\naxes[1].pie(x= college_df[:10], labels = college_df[:10].index, autopct='%.0f%%',\n           explode=[0.03 for i in college_df[:10].index])\naxes[1].add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","fce2bd2a":"pos_df = players['Position'].value_counts()\nsns.set_style('darkgrid')\nfig, axes = plt.subplots(1,2,figsize=(12,6))\naxes[0] = sns.barplot(x=pos_df[:10].values, y=pos_df[:10].index, edgecolor=\"black\", ax=axes[0])\naxes[0].set_title(\"Top 10 Postions played by player (By Count)\", fontsize=20)\naxes[1].pie(x= pos_df[:10], labels = pos_df[:10].index, autopct='%.0f%%',\n           explode=[0.03 for i in pos_df[:10].index])\naxes[1].add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","15022f8f":"plt.figure(figsize=(10, 6), dpi=100)\nsns.regplot(x=players.weight, y=players.height, line_kws={\"color\": \"red\"})\nplt.title(\"Player Weight(Kg) vs Player Height(cm)\");","8e09872a":"fig = plt.figure(figsize=(20, 15), dpi=80)\n\nax1 = fig.add_subplot(223)\nsns.histplot(players.weight, ax=ax1)\nax1.set_title(\"Weight(Kg) Distribution\")\n\nax2 = fig.add_subplot(224)\nsns.histplot(players.height, ax=ax2, bins=10)\nax2.set_title(\"Height(cm) Distribution\");","f721b80f":"fig = plt.figure(figsize=(20, 15), dpi=80)\n\nbirthyear = players['birthYear'].value_counts()\nax1 = fig.add_subplot(223)\nsns.barplot(x=birthyear.index, y=birthyear.values, ci=None, ax=ax1)\nax1.tick_params(axis='x', rotation=45)\nax1.set_title(\"BirthYear Distribution\",size=20)\nplt.xlabel(\"Year\", size=15)\n\nbirthmonth = players['birthMonth'].value_counts()\nax2 = fig.add_subplot(224)\nsns.barplot(x=birthmonth.index, y=birthmonth.values, ci=None, ax=ax2)\nax2.set_title(\"BirthMonth Distribution\",size=20)\nplt.xlabel(\"Month\",size=15);","1b92b227":"players['height'] = check['first']\nplayers['height'] = players['height'].astype(np.float32)\nplayers['height'] \/= 12\n\nplayers","5918c4c3":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 6))\n\nax = sns.distplot(players['height'], bins=12)\nax.set_title('Height Distribution');","d2a9f48f":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 6))\n\nax = sns.distplot(players['weight'])\nax.set_title('Weight Distribution');","0e2bab30":"top_players_colleage = players['collegeName'].value_counts()[:20].reset_index()\ntop_players_colleage.columns = ['collageName', 'numberOfPlayers']","671f030f":"mpl.rc('font', size=10) \nplt.figure(figsize=(15, 12))\n\nax = sns.barplot(x='numberOfPlayers', y='collageName', data=top_players_colleage)\nax.set_title('Number of players for collegeName');","e85bf58e":"players['birthYear'] = 0","ccb30926":"players.dropna(subset=['birthDate'], inplace=True)","5d6d298f":"for idx, row in players.iterrows():\n    if len(row['birthDate'].split('\/')) == 3: # ex) 05\/17\/1994 \n        players.loc[idx, 'birthYear'] = row['birthDate'].split('\/')[2]\n        \n    elif len(row['birthDate'].split('-')) == 3: # ex) 1995-05-05\n        players.loc[idx, 'birthYear'] = row['birthDate'].split('-')[0]","272f8b6e":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(players['birthYear'], bins=25)\nax.set_title('Players birth year Distribution');","f7463aa5":"players['birthYear'].min(), players['birthYear'].max()","5c85bd23":"sns.pairplot(players, hue='Position')","777f4ca5":"sns.pairplot(players, hue='height')","8f5351c6":"plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\n\nplays","3b81ab34":"plays = downcast(plays)","970dec8f":"resumetable(plays)","4205a620":"fig = plt.figure(figsize=(12,6))\nsns.scatterplot(x='quarter', y='down', data=plays)\nplt.show()","7442d7c2":"fig = plt.figure(figsize=(12,6))\ng = sns.barplot(x='quarter', y='yardsToGo', data=plays, ci=None)\ng.bar_label(g.containers[0])\nplt.title('Yards to Go in Each Quarter', size=15)\nplt.show()","eafe5b6c":"fig = plt.figure(figsize=(12,6))\ng = sns.barplot(x='quarter', y='playResult', data=plays, ci=None)\ng.bar_label(g.containers[0])\nplt.title(\"Play result for every quarter\", size=15)\nplt.show()","e8f73df6":"fig = plt.figure(figsize=(12,6))\nsns.distplot(plays['kickLength'])\nplt.show()","930e254e":"plays['kickLength'].describe()","f6c90ff0":"fig = plt.figure(figsize=(12,6))\nsns.histplot(plays['passResult'])\nplt.show()","b2bdd8b4":"plays['passResult'].describe()","512b6873":"fig = plt.figure(figsize=(12,6))\nsns.histplot(plays['possessionTeam'])\nplt.xticks(rotation=90)\nplt.show()","568a992d":"import plotly.express as px\nimport plotly.graph_objects as pg\nfrom plotly import tools as tl","5dafe3db":"tr18 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv\")\ntr18.head()","b6538076":"data = tr18.query('playId == 36 and gameId == 2018123000')\nprint(data[[\"x\", \"y\", \"team\"]])","f0f6d512":"fig = px.scatter(data, x='x', y='y', color='team')\nfig.show()","eb3eb5ab":"data = tr18.query('playId == 36 and gameId == 2018102107')\nprint(data[[\"x\", \"y\", \"team\"]])","ae95d1b8":"fig = px.scatter(data, x=\"x\", y=\"y\", color=\"team\")\nfig.show()","56bc7e08":"data = tr18.query('position == \"CB\" and gameId == 2018111900')\nprint(data[[\"x\", \"y\", \"team\"]])","c792a965":"fig = px.scatter(data, x=\"x\", y=\"y\", color=\"team\")\nfig.show()","17a3347f":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='quarter', data=plays)\nwrite_percent(ax, len(plays))\nax.set_title('Number of plays of every quarter');","2bf8ee9b":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='down', data=plays)\nwrite_percent(ax, len(plays))\nax.set_title('Number of plays of every down');","4c3201e4":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='yardsToGo', data=plays)\nax.set_title('Number of plays for every yards to go category');","cf346b10":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['playResult'], bins=25);\nax.set_title('playResult Distribution'); ","3fe3e283":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['preSnapHomeScore'], bins=12);\nax.set_title('preSnapHomeScore Distribution'); ","7d62c94c":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['preSnapVisitorScore'], bins=12);\nax.set_title('preSnapVisitorScore Distribution'); ","1e2a0f88":"sns.pairplot(plays,hue='quarter')","d5e793d3":"sns.pairplot(plays,hue='possessionTeam')","eb63e40c":"sns.pairplot(plays,hue='specialTeamsPlayType')","21fceb2e":"sns.pairplot(plays,hue='specialTeamsResult')","1c8c995f":"import matplotlib.patches as patches\nfrom matplotlib.patches import Arc\nfrom matplotlib import pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Change size of the figure\nplt.rcParams['figure.figsize'] = [20, 16]\ndef drawPitch(width, height, color=\"w\"):\n    fig = plt.figure()\n    ax = plt.axes(xlim=(-10, width + 30), ylim=(-15, height + 5))\n    plt.axis('off')\n\n    # Grass around pitch\n    rect = patches.Rectangle((-10, -5), width + 40, height + 10, linewidth=1, facecolor='#3f995b', capstyle='round')\n    ax.add_patch(rect)\n    ###################\n\n    # Pitch boundaries\n    rect = plt.Rectangle((0, 0), width + 20, height, ec=color, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    ###################\n\n    # vertical lines - every 5 yards\n    for i in range(21):\n        plt.plot([10 + 5 * i, 10 + 5 * i], [0, height], c=\"w\", lw=2)\n    ###################\n        \n    # distance markers - every 10 yards\n    for yards in range(10, width, 10):\n        yards_text = yards if yards <= width \/ 2 else width - yards\n        # top markers\n        plt.text(10 + yards - 2, height - 7.5, yards_text, size=20, c=\"w\", weight=\"bold\")\n        # botoom markers\n        plt.text(10 + yards - 2, 7.5, yards_text, size=20, c=\"w\", weight=\"bold\", rotation=180)\n    ###################\n\n    # yards markers - every yard\n    # bottom markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [1, 3], color=\"w\", lw=3)\n\n    # top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - 1, height - 3], color=\"w\", lw=3)\n\n    # middle bottom markers\n    y = (height - 18.5) \/ 2\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [y, y + 2], color=\"w\", lw=3)\n\n    # middle top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - y, height - y - 2], color=\"w\", lw=3)\n    ###################\n\n    # draw home end zone\n    plt.text(2.5, (height - 10) \/ 2, \"HOME\", size=40, c=\"w\", weight=\"bold\", rotation=90)\n    rect = plt.Rectangle((0, 0), 10, height, ec=color, fc=\"#0064dc\", lw=2)\n    ax.add_patch(rect)\n\n    # draw away end zone    \n    plt.text(112.5, (height - 10) \/ 2, \"AWAY\", size=40, c=\"w\", weight=\"bold\", rotation=-90)\n    rect = plt.Rectangle((width + 10, 0), 10, height, ec=color, fc=\"#c80014\", lw=2)\n    ax.add_patch(rect)\n    ###################\n    \n    # draw extra spot point\n    # left\n    y = (height - 3) \/ 2\n    plt.plot([10 + 2, 10 + 2], [y, y + 3], c=\"w\", lw=2)\n    \n    # right\n    plt.plot([width + 10 - 2, width + 10 - 2], [y, y + 3], c=\"w\", lw=2)\n    ###################\n    \n    # draw goalpost\n    goal_width = 6 # yards\n    y = (height - goal_width) \/ 2\n    # left\n    plt.plot([0, 0], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    # right\n    plt.plot([width + 20, width + 20], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    \n    return fig, ax\n\nfig, ax = drawPitch(100, 53.3)","34689244":"tracking2018 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\ntracking2019 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv')\ntracking2020 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')","cf8ba432":"tracking2018.head()\ntracking2019.head()\ntracking2020.head()","84b4c959":"tracking2018 = downcast(tracking2018)\ntracking2019 = downcast(tracking2019)\ntracking2020 = downcast(tracking2020)","a45a1aba":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018123000 and playId == 36').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","04bca461":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091001 and playId == 4033').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","e1fcf146":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"CB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","0c99ba8e":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"LB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","3bdfb1c6":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"RB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","6704659f":" fig, ax = drawPitch(100, 53.3)","f90d684b":"import matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import rgb2hex\n%matplotlib inline\nimport seaborn as sns\n\n#(Credit for the below code goes to @ANZ check out his notebook as well)\ncmap = cm.get_cmap('GnBu',12) #colormap and number\ncol_def =[]\nfor i in range(cmap.N):\n    rgb = cmap(i)[:3]\n    col_def.append(rgb2hex(rgb))\n    print(rgb2hex(rgb))","7345d492":"games_ids = {}\ngames_tracking2018 = tracking2018.groupby(by=[\"gameId\"])\nfor game, data in games_tracking2018:\n    games_ids[game] = list(set(data.playId.tolist()))","1f08fc73":"def extract_one_game(game_id, play_id, df):\n    game = df[(df.gameId == game_id) & (df.playId == play_id)]\n    home1 = {}\n    away1 = {}\n    balls1 = []\n    \n    players = game.sort_values(['frameId'], ascending=True).groupby('nflId')\n    for id, dx in players:\n        jerseyNumber = int(dx.jerseyNumber.iloc[0])\n        if dx.team.iloc[0] == \"home\":\n            home1[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n        elif dx.team.iloc[0] == \"away\":\n            away1[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n\n\n    ball_df = game.sort_values(['frameId'], ascending=True) \n    ball_df = ball_df[ball_df.team == \"football\"]\n    balls1 = list(zip(ball_df.x.tolist(), ball_df.y.tolist()))\n    return home1, away1, balls1","ebbd58b3":"games_ids = {}\ngames_tracking2019 = tracking2019.groupby(by=[\"gameId\"])\nfor game, data in games_tracking2019:\n    games_ids[game] = list(set(data.playId.tolist()))","f0d52d95":"def extract_one_game(game_id, play_id, df):\n    game = df[(df.gameId == game_id) & (df.playId == play_id)]\n    home2 = {}\n    away2 = {}\n    balls2 = []\n    \n    players = game.sort_values(['frameId'], ascending=True).groupby('nflId')\n    for id, dx in players:\n        jerseyNumber = int(dx.jerseyNumber.iloc[0])\n        if dx.team.iloc[0] == \"home\":\n            home2[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n        elif dx.team.iloc[0] == \"away\":\n            away2[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n\n\n    ball_df = game.sort_values(['frameId'], ascending=True) \n    ball_df = ball_df[ball_df.team == \"football\"]\n    balls2 = list(zip(ball_df.x.tolist(), ball_df.y.tolist()))\n    return home2, away2, balls2","ec506627":"games_ids = {}\ngames_tracking2020 = tracking2020.groupby(by=[\"gameId\"])\nfor game, data in games_tracking2020:\n    games_ids[game] = list(set(data.playId.tolist()))","c868b0e0":"def extract_one_game(game_id, play_id, df):\n    game = df[(df.gameId == game_id) & (df.playId == play_id)]\n    home3 = {}\n    away3 = {}\n    balls3 = []\n    \n    players = game.sort_values(['frameId'], ascending=True).groupby('nflId')\n    for id, dx in players:\n        jerseyNumber = int(dx.jerseyNumber.iloc[0])\n        if dx.team.iloc[0] == \"home\":\n            home3[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n        elif dx.team.iloc[0] == \"away\":\n            away3[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n\n\n    ball_df = game.sort_values(['frameId'], ascending=True) \n    ball_df = ball_df[ball_df.team == \"football\"]\n    balls3 = list(zip(ball_df.x.tolist(), ball_df.y.tolist()))\n    return home3, away3, balls3","ccedb9cc":"from matplotlib import animation\nfrom IPython.display import HTML\ndef animate_one_play(game_id, play_id, df):\n    fig, ax = drawPitch(100, 53.3)\n    \n    home1, away1, balls1 = extract_one_game(game_id, play_id, df)\n\n    team_left, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"r\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    team_right, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"b\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    ball, = ax.plot([], [], 'o', markersize=10, markerfacecolor=\"black\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    drawings = [team_left, team_right, ball]\n\n    def init():\n        team_left.set_data([], [])\n        team_right.set_data([], [])\n        ball.set_data([], [])\n        return drawings\n\n    def draw_teams(i):\n        X = []\n        Y = []\n        for k, v in home1.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_left.set_data(X, Y)\n        \n        X = []\n        Y = []\n        for k, v in away1.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_right.set_data(X, Y)\n\n    def animate(i):\n        draw_teams(i)\n        \n        x, y = balls1[i]\n        ball.set_data([x, y])\n        return drawings\n    \n    # !May take a while!\n    anim1 = animation.FuncAnimation(fig, animate, init_func=init,\n                                   frames=len(balls1), interval=100, blit=True)\n\n    return HTML(anim1.to_html5_video())","57515a30":"from matplotlib import animation\nfrom IPython.display import HTML\ndef animate_one_play(game_id, play_id, df):\n    fig, ax = drawPitch(100, 53.3)\n    \n    home2, away2, balls2 = extract_one_game(game_id, play_id, df)\n\n    team_left, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"r\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    team_right, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"b\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    ball, = ax.plot([], [], 'o', markersize=10, markerfacecolor=\"black\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    drawings = [team_left, team_right, ball]\n\n    def init():\n        team_left.set_data([], [])\n        team_right.set_data([], [])\n        ball.set_data([], [])\n        return drawings\n\n    def draw_teams(i):\n        X = []\n        Y = []\n        for k, v in home2.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_left.set_data(X, Y)\n        \n        X = []\n        Y = []\n        for k, v in away2.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_right.set_data(X, Y)\n\n    def animate(i):\n        draw_teams(i)\n        \n        x, y = balls2[i]\n        ball.set_data([x, y])\n        return drawings\n    \n    # !May take a while!\n    anim2 = animation.FuncAnimation(fig, animate, init_func=init,\n                                   frames=len(balls2), interval=100, blit=True)\n\n    return HTML(anim2.to_html5_video())","56d9a360":"from matplotlib import animation\nfrom IPython.display import HTML\ndef animate_one_play(game_id, play_id, df):\n    fig, ax = drawPitch(100, 53.3)\n    \n    home3, away3, balls3 = extract_one_game(game_id, play_id, df)\n\n    team_left, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"r\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    team_right, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"b\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    ball, = ax.plot([], [], 'o', markersize=10, markerfacecolor=\"black\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    drawings = [team_left, team_right, ball]\n\n    def init():\n        team_left.set_data([], [])\n        team_right.set_data([], [])\n        ball.set_data([], [])\n        return drawings\n\n    def draw_teams(i):\n        X = []\n        Y = []\n        for k, v in home3.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_left.set_data(X, Y)\n        \n        X = []\n        Y = []\n        for k, v in away3.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_right.set_data(X, Y)\n\n    def animate(i):\n        draw_teams(i)\n        \n        x, y = balls3[i]\n        ball.set_data([x, y])\n        return drawings\n    \n    # !May take a while!\n    anim3= animation.FuncAnimation(fig, animate, init_func=init,\n                                   frames=len(balls3), interval=100, blit=True)\n\n    return HTML(anim3.to_html5_video())","3a59503a":"animate_one_play(2018123000, 36, tracking2018)","63bddd98":"df_scouting= pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\ndf_scouting.head()","0e69f3bb":"df_scouting.info()","6a57d7ea":"fig, ax = plt.subplots()\ndf_scouting['kickType'].value_counts().plot(ax=ax, kind='bar')","95c566fb":"sns.pairplot(df_scouting, hue='kickDirectionActual')","286ff8d0":"sns.pairplot(df_scouting, hue='kickDirectionIntended')","c8a02d8a":"sns.pairplot(df_scouting, hue='kickType')","b4f1107f":"import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nax = sns.violinplot(x=plays['quarter'])","c2fe1df4":"sns.set_theme(style=\"whitegrid\")\nax = sns.violinplot(x=plays['yardsToGo'],y=plays['specialTeamsPlayType'])","4d75f029":"sns.set_theme(style=\"whitegrid\")\nax = sns.violinplot(x=plays['kickLength'],y=plays['kickReturnYardage'])","b656483d":"sns.set_theme(style=\"whitegrid\")\nax = sns.violinplot(x=df_scouting['hangTime'],y=df_scouting['kickContactType'])","d8c5d974":"import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=df_scouting[\"hangTime\"], y=df_scouting[\"kickType\"])\n","9f7691d3":"import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=df_scouting[\"hangTime\"], y=df_scouting[\"operationTime\"])","9b679f72":"import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=df_scouting[\"hangTime\"], y=df_scouting[\"snapTime\"])","dc40c829":"import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=df_scouting[\"snapTime\"], y=df_scouting[\"operationTime\"])","8d4997ec":"sns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=players[\"height\"], y=players[\"Position\"])","fdab928c":"sns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=players[\"weight\"], y=players[\"Position\"])","1a2c0d18":"sns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=players[\"weight\"], y=players[\"height\"])","dbf48b7c":"#using df_tracking to merge to jersey numbers\n\n#selecting variables of interest & dropping duplicates - jersey # is constant throughout game\njerseyMap = tracking2018.drop_duplicates(subset = [\"gameId\", \"team\", \"jerseyNumber\", \"nflId\"])\n\n#joining to games\njerseyMap = pd.merge(jerseyMap, games, left_on=['gameId'], right_on =['gameId'])\n\n#getting name of team\nconditions = [\n    (jerseyMap['team'] == \"home\"),\n    (jerseyMap['team'] != \"home\"),\n]\n\nvalues = [jerseyMap['homeTeamAbbr'], jerseyMap['visitorTeamAbbr']]\n\n#adjusting jersey number so that it includes 0 when < 10\njerseyMap['team'] = np.select(conditions, values)\n\njerseyMap['jerseyNumber'] = jerseyMap['jerseyNumber'].astype(str)\n\njerseyMap.loc[jerseyMap['jerseyNumber'].map(len) < 4, 'jerseyNumber'] = \"0\"+jerseyMap.loc[jerseyMap['jerseyNumber'].map(len) < 4, 'jerseyNumber'].str[:2]\n\njerseyMap['jerseyNumber'] = jerseyMap['jerseyNumber'].str[:2]\n\n#getting team and jersey\njerseyMap['teamJersey'] = jerseyMap['team'] + ' ' + jerseyMap['jerseyNumber'].str[:2]\n\n#map to merge nflId to teamJersey\njerseyMap = jerseyMap[['gameId', 'nflId', 'teamJersey']]\n\njerseyMap = jerseyMap.sort_values(['gameId', 'nflId', 'teamJersey'])\n\njerseyMap.head()","61449932":"#dataframe will include gameId, playId and nflId for each special teams safety\nPFF_specialTeamSafeties = df_scouting.copy()\n\n#splitting into a column for each special teams safety\nPFF_specialTeamSafeties[['teamJersey1', 'teamJersey2', 'teamJersey3', 'teamJersey4', 'teamJersey5', 'teamJersey6']] = PFF_specialTeamSafeties['specialTeamsSafeties'].str.split('; ',expand=True)\n\n#selecting jersey numbers for each team_PFF_specialTeamSafeties = PFF_specialTeamSafeties[['gameId', 'playId', 'teamJersey1', 'teamJersey2', 'teamJersey3', 'teamJersey4', 'teamJersey5', 'teamJersey6']]\n\n#gathering data\nPFF_specialTeamSafeties = pd.melt(PFF_specialTeamSafeties, id_vars =['gameId', 'playId'], value_vars =['teamJersey1', 'teamJersey2', 'teamJersey3', 'teamJersey4', 'teamJersey5', 'teamJersey6'],\n               value_name = 'teamJersey')\n\n#dropping NA rows\nPFF_specialTeamSafeties.dropna()\n\n#joining to jersey map\nPFF_specialTeamSafeties = pd.merge(PFF_specialTeamSafeties, jerseyMap, on = ['gameId', 'teamJersey'])\n\n#selecting variables of interest\nPFF_specialTeamSafeties = PFF_specialTeamSafeties[['gameId', 'playId', 'nflId']]\n\nPFF_specialTeamSafeties = PFF_specialTeamSafeties.sort_values(['gameId', 'playId', 'nflId'])\n\nPFF_specialTeamSafeties.head()","3444b0cc":"#creating data frame that will only include deep kickoffs\ndf_deepKickoffs = plays.copy()\n\n#joining the scouting data\ndf_deepKickoffs = pd.merge(df_deepKickoffs, df_scouting, on = ['gameId', 'playId'])\n\n#filtering for kickoff plays only & deep kickoffs only\ndf_deepKickoffs = df_deepKickoffs[(df_deepKickoffs['specialTeamsPlayType'] == 'Kickoff') & (df_deepKickoffs['kickType'] == 'D')]\n\n#selecting variables of interest\ndf_deepKickoffs = df_deepKickoffs[['gameId', 'playId', 'kickerId', 'possessionTeam']]\n\ndf_deepKickoffs.head()","53ce6b81":"df_maxSpeeds = tracking2018.copy()\n\n#joining games\ndf_maxSpeeds = pd.merge(df_maxSpeeds, games, on = 'gameId')\n\n#using a join to remove special teams safeties\ndf_maxSpeeds = pd.merge(left = df_maxSpeeds, right = PFF_specialTeamSafeties, how='left', indicator=True, on = ['gameId', 'playId', 'nflId'])\n\ndf_maxSpeeds = df_maxSpeeds.loc[df_maxSpeeds._merge == 'left_only', :].drop(columns = '_merge')\n\n#joining deep kickoffs\ndf_maxSpeeds = pd.merge(df_maxSpeeds, df_deepKickoffs, on = ['gameId', 'playId'])\n\n#removing the kicker from the tracking data\ndf_maxSpeeds = df_maxSpeeds[(df_maxSpeeds['kickerId'] != df_maxSpeeds['nflId']) &\n                            \n                            #player is on home team and kicking team is home\n                            ((df_maxSpeeds['team']=='home') & (df_maxSpeeds['possessionTeam'] == df_maxSpeeds['homeTeamAbbr']) |\n                             \n                             #or player is on away team and kicking team is away\n                            (df_maxSpeeds['team']=='away') & (df_maxSpeeds['possessionTeam'] == df_maxSpeeds['visitorTeamAbbr']))]\n\n#select variables of interest\ndf_maxSpeeds = df_maxSpeeds[['gameId', 'playId', 'frameId', 'nflId', 'event', 's']]\n\n#arranging by gameId, playId, frameId and nflId\ndf_maxSpeeds = df_maxSpeeds.sort_values(['gameId', 'playId', 'frameId'])\n\n#grouping by gameId, playId and nflId & filtering for frames after kickoff\ndf_maxSpeeds = df_maxSpeeds.loc[df_maxSpeeds.groupby(['gameId', 'playId']).event.transform(lambda z: np.cumsum(z.isin(['kickoff', 'free_kick'])) >= 1)]\n\n#grouping by gameId, playId and nflId & filtering for first 40 observations\ndf_maxSpeeds = df_maxSpeeds.groupby(['gameId', 'playId', 'nflId']).head(40).reset_index()\n\n#calculating max speed for given play \/ player\ndf_maxSpeeds = df_maxSpeeds.groupby(['gameId', 'playId', 'nflId']).s.apply(lambda z: z.max()).reset_index()\n\n#renaming speed column as maxSpeed\ndf_maxSpeeds = df_maxSpeeds.rename(columns={\"s\" : \"maxSpeed\"})\ndf_maxSpeeds.head()","24aa22bd":"#will have max speeds for each player with surface info\ndf_maxSpeeds2 = df_maxSpeeds.copy()\n\n#merging to Lee Sharpe's data\ndf_maxSpeeds2 = pd.merge(df_maxSpeeds, df_leeSharpeGames, left_on = ['gameId'], right_on = ['old_game_id'])\n\n#selecting variables of interest\ndf_maxSpeeds2 = df_maxSpeeds2[['gameId', 'playId', 'nflId', 'week', 'surface', 'maxSpeed']]\n\n#striping the surface column to remove extra spaces at the end\ndf_maxSpeeds2['surface'] = df_maxSpeeds2['surface'].transform(lambda x : x.str.strip())\n\ndf_maxSpeeds2['surface'].unique()","ed6ee123":"import statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\n#fitting model\nmodel = smf.mixedlm(formula= \"maxSpeed ~ C(surface, Treatment(reference='grass'))\", data = df_maxSpeeds2, groups = 'nflId')\n\nmodelF = model.fit(method=[\"lbfgs\"])\nprint(modelF.summary())","8adc1920":"modelF.params","d7c9ccd7":"#saving results of model in data frame. extracting ids:\ndf_modelResults = pd.DataFrame.from_dict(modelF.random_effects, orient = 'index').reset_index()\n\n#renaming the columns appropriately\ndf_modelResults = df_modelResults.rename(columns={\"index\" : \"nflId\", \"nflId\" : \"effect\"})\n\n#joining by nflId\ndf_modelResults = pd.merge(df_modelResults, players, on = 'nflId')\n\n#selecting variables of interest\ndf_modelResults = df_modelResults[['nflId', 'displayName', 'effect']]\n\ndf_modelResults.head()","350883bf":"#ordering for top effects\ndf_modelResults = df_modelResults.sort_values(by = 'effect', ascending = False)\n\n#filtering for top 25\ndf_visual1 = df_modelResults.head(25)","f5fee370":"#plotting\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(15,10))\nplt.rc('grid', linestyle=':', color='lightgray', linewidth=0.5)\nplt.grid(True, zorder = 0)\n\n#reordering to show largest effect at the top\ndf_visual1 = df_visual1.sort_values(by = 'effect')\n\n#creating bar graph\nplt.barh(list(df_visual1['displayName']), list(df_visual1['effect']), color = \"lightblue\")\nplt.xticks([0.0, 0.5, 1, 1.5])\n\n#setting labels\nplt.title(\"Top 25 Players in Max Speed Player Effect\", fontsize = 16)\nplt.xlabel(\"Max Speed Player Effect\", fontsize = 14)\nplt.ylabel(\"Player Name\", fontsize = 14)\n\nplt.show()","3b1719b7":"import seaborn as sns\n\nfig = plt.figure(figsize=(15,10))\n\n#plotting density plot\nsns.kdeplot(df_modelResults['effect'], fill = True)\n\n#setting theme\nplt.rc('grid', linestyle=':', color='lightgray', linewidth=0.5)\nplt.grid(True, zorder = 0)\n\n#setting labels\nplt.title(\"Density of Max Speed Player Effects\", fontsize = 16)\nplt.xlabel(\"Max Speed Player Effects\", fontsize = 14)\nplt.xticks([-3, -2, -1, 0, 1])\n\nplt.show()","4a4767b6":"#dataframe for week 1-8\ndf_wk1to8 = df_maxSpeeds2.loc[df_maxSpeeds2['week'] <= 8].copy()\n\n#fitting model filtering for week 1-8\nmodel1 = smf.mixedlm(formula= \"maxSpeed ~ C(surface, Treatment(reference='grass'))\", data = df_wk1to8, groups = 'nflId')\nmodel_wk1to8 = model1.fit(method=[\"lbfgs\"])\n\n#saving results of effects\ndf_model_wk1to8Results = pd.DataFrame.from_dict(model_wk1to8.random_effects, orient = 'index').reset_index()\ndf_model_wk1to8Results = df_model_wk1to8Results.rename(columns={\"index\" : \"nflId\", \"nflId\" : \"effect\"})\ndf_model_wk1to8Results = pd.merge(df_model_wk1to8Results, df_players, on = 'nflId')\ndf_model_wk1to8Results = df_model_wk1to8Results[['nflId', 'displayName', 'effect']]\n\ndf_model_wk1to8Results.head()","1fa0c63b":"#dataframe for week 9-17\ndf_wk9to17 = df_maxSpeeds2.loc[df_maxSpeeds2['week'] >= 9].copy()\n\n#fitting model filtering for week 9-17\nmodel2 = smf.mixedlm(formula= \"maxSpeed ~ C(surface, Treatment(reference='grass'))\", data = df_wk9to17, groups = 'nflId')\nmodel_wk9to17 = model2.fit(method=[\"lbfgs\"])\n\n#saving results of effects\ndf_model_wk9to17Results = pd.DataFrame.from_dict(model_wk9to17.random_effects, orient = 'index').reset_index()\ndf_model_wk9to17Results = df_model_wk9to17Results.rename(columns={\"index\" : \"nflId\", \"nflId\" : \"effect\"})\ndf_model_wk9to17Results = pd.merge(df_model_wk9to17Results, df_players, on = 'nflId')\ndf_model_wk9to17Results = df_model_wk9to17Results[['nflId', 'displayName', 'effect']]\n\ndf_model_wk9to17Results.head()","23253995":"#merging model results\ndf_model_ResultsCompare = pd.merge(df_model_wk9to17Results, df_model_wk1to8Results, on = ['nflId', 'displayName'], suffixes = ('_wk1to8', '_wk9to17'))\n\ndf_model_ResultsCompare.head()","0ea6a598":"#plotting scatter plot\nfig = plt.figure(figsize=(10,10))\nplt.rc('grid', linestyle=':', color='lightgray', linewidth=0.5)\nplt.grid(True, zorder = 0)\n\n#finding the outliers\ndf_model_ResultsCompare_highlight = df_model_ResultsCompare.loc[((abs(df_model_ResultsCompare['effect_wk1to8'] - df_model_ResultsCompare['effect_wk9to17']) > 1) |\n                                                                (df_model_ResultsCompare['effect_wk9to17'] == max(df_model_ResultsCompare['effect_wk9to17'])) |\n                                                                (df_model_ResultsCompare['effect_wk1to8'] == max(df_model_ResultsCompare['effect_wk1to8'])))]\n\n#adding points\nplt.plot(df_model_ResultsCompare['effect_wk1to8'], df_model_ResultsCompare['effect_wk9to17'], 'o', color = 'black')\n\n#labeling outliers\nfor x, y, l in zip(df_model_ResultsCompare_highlight['effect_wk1to8'],df_model_ResultsCompare_highlight['effect_wk9to17'], df_model_ResultsCompare_highlight['displayName']):\n    plt.text(x, y, l)\n\n#adding linear model trend line\nx = np.linspace(-3, 1)\ny = x\nplt.plot(x, y,  color='red')\nplt.gca().set_aspect('equal')\n\n#setting labels\nplt.title(\"Stability of Max Speed Player Effect from Weeks 1-8 to Weeks 9-17 \\n (Each dot represents a player)\", fontsize = 16)\nplt.xlabel(\"Weeks 1-8 Max Speed Player Effect\", fontsize = 14)\nplt.xticks([-3, -2, -1, 0, 1])\nplt.ylabel(\"Weeks 9-17 Max Speed Player Effect\", fontsize = 14)\nplt.yticks([-4, -2, 0])\n\nplt.show()","d08bc7c7":"#plotting scatter plot\nfig = plt.figure(figsize=(10,10))\nplt.rc('grid', linestyle=':', color='lightgray', linewidth=0.5)\nplt.grid(True, zorder = 0)\n\n#filtering out outliers\ndf_model_ResultsCompareNoOutliers = df_model_ResultsCompare.loc[(df_model_ResultsCompare['effect_wk1to8'] >= -2) & \n                                        (df_model_ResultsCompare['effect_wk1to8'] <= 2) &\n                                        (df_model_ResultsCompare['effect_wk9to17'] >= -2) &\n                                        (df_model_ResultsCompare['effect_wk9to17'] <= 2)].copy()\n\n#finding the outliers\ndf_model_ResultsCompare_highlight = df_model_ResultsCompareNoOutliers.loc[((abs(df_model_ResultsCompareNoOutliers['effect_wk1to8'] - df_model_ResultsCompareNoOutliers['effect_wk9to17']) > 1) |\n                                                                (df_model_ResultsCompareNoOutliers['effect_wk9to17'] == max(df_model_ResultsCompareNoOutliers['effect_wk9to17'])) |\n                                                                (df_model_ResultsCompareNoOutliers['effect_wk1to8'] == max(df_model_ResultsCompareNoOutliers['effect_wk1to8'])))]\n\n#adding points\nplt.plot(df_model_ResultsCompareNoOutliers['effect_wk1to8'], df_model_ResultsCompareNoOutliers['effect_wk9to17'], 'o', color = 'black')\n\n#labeling outliers\nfor x, y, l in zip(df_model_ResultsCompare_highlight['effect_wk1to8'],df_model_ResultsCompare_highlight['effect_wk9to17'], df_model_ResultsCompare_highlight['displayName']):\n    plt.text(x, y, l)\n\n#adding linear model trend line\nx = np.linspace(-2, 1)\ny = x\nplt.plot(x, y,  color='red')\nplt.gca().set_aspect('equal')\n\n#setting labels\nplt.title(\"Stability of Max Speed Player Effect from Weeks 1-8 to Weeks 9-17 \\n (Each dot represents a player)\", fontsize = 16)\nplt.xlabel(\"Weeks 1-8 Max Speed Player Effect\", fontsize = 14)\nplt.xticks([-1, 0, 1])\nplt.ylabel(\"Weeks 9-17 Max Speed Player Effect\", fontsize = 14)\nplt.yticks([-1, 0, 1])\n\nplt.show()","65c608f9":"#calculating R^2 with all the data\ncorr_AllData = np.corrcoef(df_model_ResultsCompare['effect_wk1to8'], df_model_ResultsCompare['effect_wk9to17'])\ncorr_xy_AllData = corr_AllData[0,1]\nRsquared_AllData = corr_xy_AllData**2\n\n#printing R^2\nprint('R^2 Correlation from week 1-8 player effect to week 9-17 player effect:',Rsquared_AllData)\n\n#calculating R^2 after removing the outliers\ncorr_NoOutliers = np.corrcoef(df_model_ResultsCompareNoOutliers['effect_wk1to8'], df_model_ResultsCompareNoOutliers['effect_wk9to17'])\ncorr_xy_NoOutliers = corr_NoOutliers[0,1]\nRsquared_NoOutliers = corr_xy_NoOutliers**2\n\n#printing R^2\nprint('R^2 Correlation from week 1-8 player effect to week 9-17 player effect:',Rsquared_NoOutliers)","02750d1a":"# Let's add some interactivity\nFrom provided dropdown widgets you can choose a demanded game.\n\n**Animation's creation can take a while (depending on play's length - sometimes even up to 60s, so don't give up after clicking start)**","d5c5d289":"## Some visualizations about Scouting data","92e0c8c0":"## Time For Some EDA on Players DataSet","7b9fc3cb":"**Player birthyear and birthmonth Distribution**","5913ae29":"## Extract birth year","9c1f219f":"<a id=\"3\"><\/a>\n<h2 style='background:transparent; border:0; color:Red'><center>3. Play Data<center><h2>\n    \n<center><img src=\"https:\/\/sportshub.cbsistatic.com\/i\/r\/2016\/06\/02\/d400604b-681c-4fcf-8d39-7813b69d7da3\/thumbnail\/1200x675\/b1bf18f17cece8a1f5a9b047fb179a41\/nfl-shield-logo-general.jpg\"><\/center>","2bdfbfa3":"## Function for writing percent at the top of the bar graph","e672bdbe":"### A pairplot of the scouting data with the hue as 'kicktype'","14dda479":"<h2 style='background:transparent; border:0; color:Red'><center>Some visualizations about Scouting data<center><h2>\n    \n<center><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/8\/87\/NFL_Scouting_Combine_logo.svg\/1200px-NFL_Scouting_Combine_logo.svg.png\"><\/center>    ","5160b772":"## The mean kick length is 54.744166. The minimum is 2.000 and the max is 90.000.","15e9026a":"<h1 style='background:transparent; color:Red'><center>NFL Big Data Bowl analysis<\/center><\/h1>\n\n","de906ae5":"### The number of kicktypes and how frequently each one is implemented in the game","8d806d66":"#### The oldest player was born in 1972, and the youngest player was born in 1999","7cc2e220":"#### There are lots of null values in `returnerld`, `kickBlockerId`, `penaltyCodes`, `penaltyJerseyNumbers`, `penaltyYards`, `passResult`, `kickReturnYardage` features","5520db3a":"<a id=\"3\"><\/a>\n<h2 style='background:transparent; border:0; color:Red'><center>4. Tracking Data<center><h2>\n    \n<center><img src=\"https:\/\/itipsports.com.au\/storage\/2021\/06\/nfl-logo-mgn.jpg\"><\/center>","c89fba1f":"Another way to measure stability is to calculate the $R^2$ of the player effects across weeks:","eeef5bf7":"#### gameId == 2018091001 and playId == 4033","7fcebfe8":"### **Player data:** The players.csv file contains player-level information from players that participated in any of the tracking data files. The key variable is nflId\n\n* **nflId:** Player identification number, unique across players (numeric)\n\n* **height:** Player height (text)\n\n* **weight:** Player weight (numeric)\n\n* **birthDate:** Date of birth (YYYY-MM-DD)\n\n* **collegeName:** Player college (text)\n\n* **position:** Player position (text)\n\n* **displayName:** Player name (text)","fca0a884":"<a id=\"ModelAcross\"><\/a>\n# Analyze Stability\n\nTo ensure that our results are meaningful, it is important to check the stability of this analysis across weeks. If each player effect is mostly independent of the player's previous weeks' player effect, it might suggest that the analysis cannot be used to properly measure performance. Here, we will make a model using data from weeks 1-8 only and compare the results to a model using weeks 9-17 only.","59cb734a":"## Function to create animation","02730bec":"# Mixed Effects Model\n\nTo account for the lack of independence among observations from the same player, we fit a mixed effects model of player speed that includes a random intercept for each player (called a random effect) and a fixed effect surface type. The random effect represents how that player, after some shrinkage towards the overall league mean, compares to the league average. Random effects models allow us to avoid overfitting (e.g., a fixed effect for each player, and the shrinkage towards league average pulls some players more than others (those with fewer observations get pulled further towards the league average).","0a9cf549":"## Function for making feature summary ","99571e1d":"An easy way to measure stability is to graph the values in a scatter plot. We also will use a line with a slope of 1 and intercept 0 to visualize the correlation. If the points align well with the line, we can feel good that the first sample is well correlated with the second sample.","d1f3d236":"## I thought of implementing the pairplots here for data as they end up giving us very insightful observations into the dataset as a whole","eefd70d8":"### **Game data:** The games.csv contains the teams playing in each game. The key variable is gameId.\n\n* **gameId:** Game identifier, unique (numeric)\n\n* **gameDate:** Game Date (time, mm\/dd\/yyyy)\n\n* **gameTimeEastern:** Start time of game (time, HH:MM:SS, EST)\n\n* **homeTeamAbbr:** Home team three-letter code (text)\n\n* **visitorTeamAbbr:** Visiting team three-letter code (text)\n\n* **week:** Week of game (numeric)","68172113":"### **Play data:** The plays.csv file contains play-level information from each game. The key variables are gameId and playId\n- gameId: Game identifier, unique (numeric)\n- playId: Play identifier, not unique across games (numeric)\n- playDescription: Description of play (text)\n- quarter: Game quarter (numeric)\n- down: Down (numeric)\n- yardsToGo: Distance needed for a first down (numeric)\n- possessionTeam: Team punting, placekicking or kicking off the ball (text)\n- specialTeamsPlayType: Formation of play: Extra Point, Field Goal, Kickoff or Punt (text)\n- specialTeamsPlayResult: Special Teams outcome of play dependent on play type: Blocked Kick Attempt, Blocked Punt, Downed, Fair Catch, Kick Attempt Good, Kick Attempt No Good, Kickoff Team Recovery, Muffed, Non-Special Teams Result, Out of Bounds, Return or Touchback (text)\n- kickerId: nflId of placekicker, punter or kickoff specialist on play (numeric)\n- returnerId: nflId(s) of returner(s) on play if there was a special teams return. Multiple returners on a play are separated by a ; (text)\n- kickBlockerId: nflId of blocker of kick on play if there was a blocked field goal or blocked punt (numeric)\n- yardlineSide: 3-letter team code corresponding to line-of-scrimmage (text)\n- yardlineNumber: Yard line at line-of-scrimmage (numeric) \n- gameClock: Time on clock of play (MM:SS)\n- penaltyCodes: NFL categorization of the penalties that occurred on the play. Multiple penalties on a play are separated by a ; (text)\n- penaltyJerseyNumber: Jersey number and team code of the player committing each penalty. Multiple penalties on a play are separated by a ; (text)\n- penaltyYards: yards gained by possessionTeam by penalty (numeric)\n- preSnapHomeScore: Home score prior to the play (numeric)\n- preSnapVisitorScore: Visiting team score prior to the play (numeric)\n- passResult: Scrimmage outcome of the play if specialTeamsPlayResult is \"Non-Special Teams Result\" (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass, R: Scramble, ' ': Designed Rush, text)\n- kickLength: Kick length in air of kickoff, field goal or punt (numeric)\n- kickReturnYardage: Yards gained by return team if there was a return on a kickoff or punt (numeric)\n- playResult: Net yards gained by the kicking team, including penalty yardage (numeric)\n- absoluteYardlineNumber: Location of ball downfield in tracking data coordinates (numeric)","30f46f3a":"#### The most games were held at 1, 4, and 8","ddcd4ce9":"#### gameId == 2018091609 and position == \"RB\"","5ec280d2":"<a id=\"1\"><\/a>\n<h2 style='background:transparent; color:Red'><center>1. Game Data<center><h2>\n    \n<center><img src=\"https:\/\/c4.wallpaperflare.com\/wallpaper\/361\/392\/43\/nfl-helmets-wallpaper-preview.jpg\"><\/center>   \n    ","afc447e8":"> preSnapHomeScore: Home score prior to the play (numeric)","ebc26229":"## Here are some plots for comparing various parameters available in the datasets provided, such as kickLength, kickReturnYardage, hangTime, kickType, yardsToGo, etc.","6b9e1ae6":"### Convert all heights to feet","aeff1793":"**From the above graph, we can see that, Alabama is at the top with approximately 68 players.**","a5cf9033":"#### The game was held from September to January. There are especially many games in December, and they are rarely held in January","58a6933b":"**Postions played by players**","6c18e8aa":"## UPVOTE THE NOTEBOOK IF YOU LIKE IT \n![image.png](attachment:d3fec2bf-19d5-4eb3-a86f-9d81e7071451.png)![image.png](attachment:df4ff67b-7bc5-425b-a5df-bcf90938f577.png)","f3830260":"# Football field\n\n**From wiki:**\n> The rectangular field of play used for American football games measures 100 yards (91.44 m) long between the goal lines, and 160 feet (48.8 m) (53+1\u20443 yards) wide. The field is made of grass. In addition, there are end zones extending another 10 yards (9.144 m) past the goal lines to the \"end lines\", for a total length of 120 yards (109.7 m). When the \"football field\" is used as unit of measurement, it is usually understood to mean 100 yards (91.44 m), although technically the full length of the official field, including the end zones, is 120 yards (109.7 m). There is a goal centered on each end line, with a crossbar 10 feet (3.0 m) above the ground and goalposts 18 feet 6 inches (5.64 m) apart extending at least 35 feet (11 m) above the crossbar. Between the goal lines, additional lines span the width of the field at 5-yard intervals.\n\n**Visualizations in this notebook are based on the above informations from Wikipedia and the the image provided by competition's organizers**\n\n","86fdc735":"Our results give us a player effect for each player which we can use to rank them. First, we plot the top 25 players with the highest player effect:","7c59427a":"## Make derivative features (month, day, hour)","d6f55f20":"**From the above distribution, we can see that most of the players are between 190cm - 195cm height(390+310 = 700 approximately). Players who are on the shorter side i.e < 170cm are very less roughly 30 in count. Same is with the taller side i.e 200cm - 205cm, And most players are seen to be in between 80kg to 100. Very less people on both the extremes.**","8b89b2ac":"### Pairplot for the gamedata ","16110850":"# Let's draw football pitch in matplotlib","f2ae6dd7":"## playResult: Net yards gained by the offense, including penalty yardage (numeric)","e485a52c":"#### As the years go by, the number of games increases","e1052679":"Now, we will use the data frames we created to filter the tracking data. We will use `df_PFF_specialTeamSafeties` to filter out players who were special teams safeties and use `df_deepKickoffs` to remove plays where there was not a deep kickoff. For each player on each play in the the tracking data, we will filter for the first 40 frames which approximately corresponds to the initial sprint portion of the play. Over that interval, we calculate the maximum speed reached for each player in the play.","e63f372d":"## Data Visualization","b290c925":"# Tracking data visualization\n\n**Hello everyone!**\n\nAs a great sports fan, I'm always more than happy to participate in sport's competitions on Kaggle! \nAmerical football has always fascinated me, but unfortunately as a European, I might don't fully understand all the rules, so if you find any error in this notebook - you're more than welcome to correct me :)\n\n* **The goal of this notebook is to build a tool to visualize matches more nicely.**\n* **Visualized tracking data can allow us to understand data better and develop better solutions**\n* **You'll learn how to draw pitch in matplotlib**\n* **You'll learn how to create animations**\n* **You'll learn how to create ipywidgets, making your notebooks interactive**\n* **The Whole tool is implemented in sole matplotlib which I hope makes this notebook even more didactic**\n\n*I hope that code is self-explanatory but if anything is unclear - just let me know and I will do my best to help!*\n\n# I invite you to ebmark on this journey with me - let's visualize and animate tracking data together.","2b8003e8":"## Function for Downcast\nDowncast is a great skill to compress data size which helps to save memory.","c84ecb06":"<center><img src=\"https:\/\/d28ipuewd7cdcq.cloudfront.net\/assets\/article\/2020\/01\/30\/fortnite-nfl-2020_feature.jpg\"><\/center>","01d107ea":"### Create birth year feature","93e34929":"#### gameId == 2018091609 and position == \"LB\"","e49f696b":"####  we analyze the density of player effects:","00615d01":"**It looks like the taller the player is the heavier he is.**","f4df9820":"## Function to create football field\n","784e8574":"### A pairplot for the gameplay information file with the hue ","ac02a35d":"**Weight and Height Distribution.**","8c225e93":"#### gameId == 2018091609 and position == \"CB\"","e08c1e12":"### Pairplot of the players W.R.T position and height","3639a917":"**Converting heights to CM and weights to Kg**","e14241db":"**From the above charts, it can be determined that most players are born in the year 1995. The most frequent birth month is September.**","fd54bbb9":"#### 2018123000 and playId == 36","f3813e7b":"#### Those born in 1995 are the most common","1b1e7bfb":"# Violin Plots and Box Plots","a6a8b845":"## Speed on Kickoff Plays Across Surfaces ","31a3aaf8":"<a id=\"2\"><\/a>\n<h2 style='background:transparent; border:0; color:Red'><center>2. Player Data<center><h2>\n    \n<center><img src=\"https:\/\/www.whatspaper.com\/wp-content\/uploads\/2021\/01\/4k-nfl-wallpaper-whatspaper-1.jpg\"><\/center>","7193a74e":"**The postion 'WR' is played the most by the players. It is approximately 320 i.e is 16%**","a1bddc96":"The density curve shows that the population of player effects is somewhat different from a standard normal distribution. While most of the players are between -1 and 1, there are some outliers on the left side of curve. Although, we removed special teams safeties and kickers in the data cleaning process, some of these players likely have a non-traditional role on the kickoff team."}}