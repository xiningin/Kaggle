{"cell_type":{"082e9a0d":"code","c3f3f3f7":"code","dca4ff39":"code","10c2d1bb":"code","2048675f":"code","9f44b90b":"code","0abdfbb3":"code","94d556bd":"code","4e87aaea":"code","1294148b":"code","b88dd2eb":"code","d209693b":"code","40344b19":"code","a321479c":"code","40228be9":"code","046914d1":"code","41a6cbc9":"code","632465b0":"code","fdf81d34":"code","5eff1950":"code","8ed5642f":"code","cfc3c46f":"code","8bf6556c":"code","a316a4c8":"code","98833e54":"code","8904eb21":"code","968d3403":"code","8db54b6a":"code","4485d710":"markdown","252dbcdc":"markdown","f035e470":"markdown","69675d3c":"markdown","6e7ff191":"markdown","d37a3f24":"markdown","408ff76d":"markdown","bafedb72":"markdown"},"source":{"082e9a0d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c3f3f3f7":"tf.random.set_seed(100)","dca4ff39":"data = pd.read_csv('\/kaggle\/input\/bank-marketing-campaigns-dataset\/bank-additional-full.csv', delimiter=';')","10c2d1bb":"pd.set_option('max_columns', None)","2048675f":"data","9f44b90b":"data.info()","0abdfbb3":"data.y = data.y.apply(lambda x: 1 if x == 'yes' else 0)","94d556bd":"data.y.sum()","4e87aaea":"data.select_dtypes('object')","1294148b":"{column: len(data[column].unique()) for column in data.select_dtypes('object').columns}","b88dd2eb":"{column: list(data[column].unique()) for column in data.select_dtypes('object').columns}","d209693b":"data.replace('unknown', np.nan, inplace=True)","40344b19":"# Encoding Helper Functions\n\ndef encode_onehot(df, columns, prefixes):\n    df = df.copy()\n    for column, prefix in zip(columns, prefixes):\n        dumdums = pd.get_dummies(df[column], prefix=prefix)\n        df = pd.concat([df, dumdums], axis=1)\n        df = df.drop(column, axis=1)        \n    return df\n\ndef encode_ordinal(df, columns, orderings):\n    df = df.copy()\n    for column, ordering in zip(columns, orderings):\n        df[column] = df[column].apply(lambda x: ordering.index(x))\n    return df\n\ndef encode_binary(df, columns, positive_values):\n    df = df.copy()\n    for column, positive_value in zip(columns, positive_values):\n        df[column] = df[column].apply(lambda x: 1 if x == positive_value else x)\n        df[column] = df[column].apply(lambda x: 0 if str(x) != 'nan' else x)\n    return df","a321479c":"nominal_features = [\n    'job',\n    'marital',\n    'education',\n    'day_of_week',\n    'poutcome'\n]\n\nordinal_features = [\n    'month'\n]\n\nbinary_features = [\n    'default',\n    'housing',\n    'loan',\n    'contact'\n]","40228be9":"prefixes = ['J', 'M', 'E', 'D', 'P']\n\norderings = [\n    ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n]\n\npositive_values = [\n    'yes',    \n    'yes',\n    'yes',\n    'cellular'\n]","046914d1":"data1 = data.copy()\ndata1 = encode_onehot(data1, nominal_features, prefixes)\ndata1 = encode_ordinal(data1, ordinal_features, orderings)\ndata1 = encode_binary(data1, binary_features, positive_values)\ndata1","41a6cbc9":"for column in binary_features:\n    data1[column]=data1[column].fillna(data1[column].mean())","632465b0":"print('Remaining Missing Values: ', data1.isna().sum().sum())","fdf81d34":"y = data1.y\nX = data1.drop('y', axis=1)\nX, y","5eff1950":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","8ed5642f":"X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.7, random_state=123)","cfc3c46f":"print('Positive Examples: {}'.format(y.sum()))\nprint('Negative Examples: {}'.format(len(y) - y.sum()))\n\nprint(\"\\nClass Distribution: {:.1f} \/ {:.1f}\".format(y.mean() * 100, (1-y.mean())*100) )","8bf6556c":"X.shape","a316a4c8":"inputs = tf.keras.Input(shape=(X.shape[1]))\n#Create 2 hidden layers - 64 activations each - relu activ. fucn.\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs, outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\nbatch_size=32\nepochs = 100\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size = batch_size,\n    epochs = epochs,\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","98833e54":"model.evaluate(X_test, y_test)","8904eb21":"y_true = np.array(y_test)\ny_pred = np.squeeze(np.array(model.predict(X_test) >= 0.9, dtype=np.int))","968d3403":"print(\"Confusion Matrix: \\n \", confusion_matrix(y_true, y_pred))","8db54b6a":"print(\"Classification Report: \\n\", classification_report(y_true, y_pred))","4485d710":"## Encoding Labels","252dbcdc":"## Marketing Effectiveness Prediction\n\nGiven data about subjects' responses to a bank's marketing campaign, let's try to predict whether a given subject will place a deposit or not.\nWe will use TensorFlow ANN to make our predictions","f035e470":"## Modeling \/ Training","69675d3c":"# Task for Today\n***  ","6e7ff191":"## Split and Scale the Data","d37a3f24":"## Results","408ff76d":"## Missing Values Sanity Check","bafedb72":"## Encoding Categorical, Sequential, Binary Features"}}