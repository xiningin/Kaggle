{"cell_type":{"e4364726":"code","463282b0":"code","cdb01dd5":"code","44a7f7be":"code","428ca87a":"code","0583c48a":"code","5dd96360":"code","cc80423d":"code","5811cbe7":"code","31fb2070":"code","20b91b41":"code","47192974":"code","224b4c58":"code","45eccd54":"code","dc7e9d8f":"code","2da28754":"code","3325415c":"code","e12c079b":"code","e5725045":"code","135b5b67":"code","dac2ef39":"code","b253d02f":"code","c8973c9f":"code","0095be74":"code","d5891e70":"code","28678fb4":"code","05d9123c":"code","525545c1":"code","914d9f7b":"code","691e5a3d":"code","58fe98ec":"code","f4aedd0e":"code","cd9ab689":"code","190c51f1":"code","415f7f3e":"code","e06e38fc":"code","57867a47":"code","b11308db":"code","1a63311b":"code","01ef10bd":"code","32a82043":"code","e8a60c7e":"code","99c07bd3":"code","98edbc68":"code","08701179":"code","be8e9489":"code","dea83744":"code","26bc0e61":"code","b12d2faa":"code","0326c826":"code","bb20fe22":"code","8113e393":"code","7d4bcd9f":"code","bc6c6e1f":"code","219ef370":"code","7dd83827":"code","2eb831f5":"code","a0a7302c":"code","65778c9a":"code","b2ba0b48":"code","1dc634bc":"code","f1c86215":"code","2a11e2c5":"code","4e14a145":"code","67a87a84":"code","f0597627":"code","1e2a3baa":"code","31e1541b":"code","ba0d4b34":"code","6b028bae":"markdown","1a50701b":"markdown","7c720f3a":"markdown","124770eb":"markdown","f52d94a4":"markdown","12c6dd24":"markdown","d545a913":"markdown","37f7a1a9":"markdown","13a167cb":"markdown"},"source":{"e4364726":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix, mean_squared_error, accuracy_score,classification_report\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import VotingClassifier\nimport os\nimport datetime as dt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cluster import KMeans\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import r2_score\n#from lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor","463282b0":"train = pd.read_csv('..\/input\/bigmart-sales-data\/Train.csv')\ntest = pd.read_csv('..\/input\/bigmart-sales-data\/Test.csv')","cdb01dd5":"train.dtypes","44a7f7be":"test.dtypes","428ca87a":"train.info()","0583c48a":"test.info()","5dd96360":"train.isnull().sum()","cc80423d":"test.isnull().sum()","5811cbe7":"train['Item_Weight'].mean()","31fb2070":"train['Item_Weight']=train['Item_Weight'].fillna(train['Item_Weight'].mean())","20b91b41":"train.isnull().sum()","47192974":"test['Item_Weight']=test['Item_Weight'].fillna(test['Item_Weight'].mean())","224b4c58":"test.isnull().sum()","45eccd54":"train['Outlet_Size']","dc7e9d8f":"train.head()","2da28754":"train.loc[train['Outlet_Type']=='Grocery Store','Outlet_Size'] = 'Small'","3325415c":"train.isnull().sum()","e12c079b":"moda = train['Outlet_Size'].mode()[0]","e5725045":"train['Outlet_Size'] = train['Outlet_Size'].fillna(moda)","135b5b67":"train.isnull().sum()","dac2ef39":"train['Outlet_Size'].value_counts()","b253d02f":"test.loc[test['Outlet_Type']=='Grocery Store','Outlet_Size'] = 'Small'","c8973c9f":"moda = test['Outlet_Size'].mode()[0]\ntest['Outlet_Size'] = test['Outlet_Size'].fillna(moda)","0095be74":"test['Outlet_Size'].isnull().sum()","d5891e70":"test.isna().sum()","28678fb4":"train.head()","05d9123c":"for col in train.columns:\n    print('Value Count is: ',train[col].value_counts())","525545c1":"test['Item_Fat_Content'] = test['Item_Fat_Content'].replace({'LOW FAT':'Low Fat','LF':'Low Fat','Regular':'Regular','reg':'Regular','low fat':'Low Fat'})","914d9f7b":"train['Item_Fat_Content'] = train['Item_Fat_Content'].replace({'LOW FAT':'Low Fat','LF':'Low Fat','Regular':'Regular','reg':'Regular','low fat':'Low Fat'})","691e5a3d":"train.head()","58fe98ec":"train['Item_Identifier'] = train['Item_Identifier'].astype(str).str[:2]","f4aedd0e":"train.head()","cd9ab689":"train.loc[train['Item_Identifier']=='NC','Item_Fat_Content'] = 'Non-Edible'","190c51f1":"test['Item_Identifier'] = test['Item_Identifier'].astype(str).str[:2]","415f7f3e":"test.head()","e06e38fc":"print(test.shape)\ntrain.shape","57867a47":"test.loc[test['Item_Identifier']=='NC','Item_Fat_Content'] = 'Non-Edible'","b11308db":"train['Item_Fat_Content'].value_counts()","1a63311b":"test['Item_Fat_Content'].value_counts()","01ef10bd":"test.groupby(['Item_Type'])['Item_Fat_Content'].count().sort_values().plot.bar()","32a82043":"train.groupby(['Item_Type'])['Item_Fat_Content'].count().sort_values().plot.bar()","e8a60c7e":"train.groupby(['Item_Type'])['Item_Visibility'].count().sort_values().plot.bar()","99c07bd3":"test.groupby(['Item_Type'])['Item_Visibility'].count().sort_values().plot.bar()","98edbc68":"sns.distplot(train['Item_MRP'],bins=30)","08701179":"sns.catplot(x='Outlet_Size',hue='Item_Fat_Content',data=train,kind='count')","be8e9489":"sns.catplot(x='Outlet_Establishment_Year',hue='Outlet_Size',data=train,kind='count')","dea83744":"train['Outlet_Establishment_Year'].max()","26bc0e61":"test['Outlet_Establishment_Year'].max()","b12d2faa":"train['Outlet_Establishment_Year'] = 2010-train['Outlet_Establishment_Year']","0326c826":"test['Outlet_Establishment_Year'] = 2010-test['Outlet_Establishment_Year']","bb20fe22":"train.head()","8113e393":"train=train.drop(['Item_Identifier','Outlet_Identifier'],axis=1)","7d4bcd9f":"train.shape","bc6c6e1f":"test=test.drop(['Item_Identifier','Outlet_Identifier'],axis=1)","219ef370":"test.shape","7dd83827":"dtest = pd.get_dummies(test)","2eb831f5":"dtest.head()","a0a7302c":"dtrain = pd.get_dummies(train)","65778c9a":"dtrain.head()","b2ba0b48":"y=dtrain['Item_Outlet_Sales']","1dc634bc":"x=dtrain.drop(['Item_Outlet_Sales'],axis=1)\nxx=x.copy()","f1c86215":"from sklearn.preprocessing import StandardScaler\nstds=StandardScaler()\nx = stds.fit_transform(x)\n#x['Item_Weight']=stds.fit_transform(np.array(x['Item_Weight']).reshape(-1,1))","2a11e2c5":"x=pd.DataFrame(x,columns=xx.columns)","4e14a145":"dtestt=dtest.copy()\ndtest = stds.fit_transform(dtest)\ndtest = pd.DataFrame(dtest,columns=dtestt.columns)","67a87a84":"dtest.head()","f0597627":"XX_train,X_test,yy_train,y_test = train_test_split(x,y,test_size=0.2, random_state=42)","1e2a3baa":"Ridge_model = Ridge()\nRidge_model.fit(XX_train,yy_train)\nRidge_model.predict(X_test)\nprint(\"Score\",Ridge_model.score(XX_train, yy_train)*100);\nprint(\"Coefficient:\",Ridge_model.coef_);\nprint(\"Intercept:\",Ridge_model.intercept_);","31e1541b":"Lin_Model = reg = LinearRegression()\nLin_Model.fit(XX_train,yy_train)\nLin_Model.predict(X_test)","ba0d4b34":"print(\"Score\",Lin_Model.score(XX_train, yy_train)*100);\nprint(\"Coefficient:\",Lin_Model.coef_);\nprint(\"Intercept:\",Lin_Model.intercept_);","6b028bae":"#### Data Clearning and Preprocessing","1a50701b":"### Importing some important Libraries","7c720f3a":"#### Converting categorical values to numeric values","124770eb":"#### Data type and check for null values","f52d94a4":"#### EDA","12c6dd24":"# Linear Regression","d545a913":"# Ridge","37f7a1a9":"#### Import Data","13a167cb":"### Preparing Data for Machine Learning Model (Train, Test, Split)"}}