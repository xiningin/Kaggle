{"cell_type":{"e576a7f3":"code","af7798db":"code","e1fe5736":"code","67485d27":"code","0891a7f6":"code","04e576f0":"code","cad8c0a0":"code","658f0a4b":"code","0321d01a":"code","b7d72506":"code","58bc068e":"code","c65ec416":"code","81cb1000":"code","f40bed56":"code","bb719810":"code","e1120330":"code","c640b048":"code","9878d447":"code","2137b19f":"code","981d7280":"code","86cc59ef":"markdown","5c30dd34":"markdown","bb325692":"markdown","babe89fe":"markdown","63297034":"markdown","dbeeb24a":"markdown","7fe73449":"markdown","07efcba6":"markdown"},"source":{"e576a7f3":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, normalize\nfrom sklearn.model_selection import train_test_split\n\nDEBUG = True","af7798db":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsample = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","e1fe5736":"train.head()","67485d27":"def plot_sample(sample_id, df):\n    df_breath = df[df['breath_id'] == sample_id]\n    r, c  = df_breath[['R', 'C']].values[0]\n\n    cols = ['u_in', 'u_out', 'pressure'] if 'pressure' in df.columns else ['u_in', 'u_out']\n    \n    plt.figure(figsize=(12, 4))\n    for col in ['u_in', 'u_out', 'pressure']:\n        plt.plot(df_breath['time_step'], df_breath[col], label=col)\n        \n    plt.legend()\n    plt.title(f'Sample {sample_id} - R={r}, C={c}')","0891a7f6":"df = train[train['breath_id'] < 5].reset_index(drop=True)","04e576f0":"df.head()","cad8c0a0":"for i in df['breath_id'].unique():\n    plot_sample(i, train)","658f0a4b":"# fix random seed for reproducibility\nnp.random.seed(7)","0321d01a":"if DEBUG:\n    train = train[:80*200]","b7d72506":"targets = train[['pressure']].to_numpy().reshape(-1, 80)\ntrain.drop(['pressure', 'id', 'breath_id'], axis=1, inplace=True)\ntest = test.drop(['id', 'breath_id'], axis=1)","58bc068e":"RS = RobustScaler()\ntrain = RS.fit_transform(train)\ntest = RS.transform(test)","c65ec416":"train = train.reshape(-1, 80, train.shape[-1])\ntest = test.reshape(-1, 80, train.shape[-1])","81cb1000":"train.shape","f40bed56":"# detect and init the TPU\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\n\n# instantiate a distribution strategy\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)","bb719810":"# instantiating the model in the strategy scope creates the model on the TPU\nwith tpu_strategy.scope():\n    model = tf.keras.Sequential([\n    keras.layers.Input(shape=train.shape[-2:]),\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(1)\n  ])\n    model.compile(optimizer='adam',\n                steps_per_execution = 50,\n                loss='mae',\n                metrics=['accuracy'])","e1120330":"X_train, X_valid, y_train, y_valid = train_test_split(train, targets, test_size=0.33, random_state=42)","c640b048":"SHUFFLE_BUFFER = 500\nBATCH_SIZE = 2\nEPOCH = 5","9878d447":"model.fit(X_train, y_train, validation_data=(X_valid, y_valid),epochs=EPOCH, batch_size=BATCH_SIZE)","2137b19f":"test_preds = []\ntest_preds.append(model.predict(test).squeeze().reshape(-1, 1).squeeze())","981d7280":"sample[\"pressure\"] = sum(test_preds)\nsample.to_csv('submission.csv', index=False)","86cc59ef":"# Predict","5c30dd34":"# Imports","bb325692":"# Fit data","babe89fe":"References:\n\nhttps:\/\/www.kaggle.com\/theoviel\/deep-learning-starter-simple-lstm\nhttps:\/\/www.kaggle.com\/tenffe\/finetune-of-tensorflow-bidirectional-lstm\n\nThank you.","63297034":"# Split data for validation","dbeeb24a":"# Visualize","7fe73449":"# Define Model","07efcba6":"# Read data"}}