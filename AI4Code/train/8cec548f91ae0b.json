{"cell_type":{"d6b4b0bf":"code","bf004a5c":"code","04ac307e":"code","77b6bffa":"code","e5703523":"code","5be91797":"code","7b04508d":"markdown","f8acc1f3":"markdown","a6d402f3":"markdown"},"source":{"d6b4b0bf":"import numpy as np,pandas as pd\nimport h5py,pylab as pl\nimport tensorflow_hub as th,tensorflow as tf\nfrom tensorflow import image as timage","bf004a5c":"fpath='..\/input\/tf-cats-vs-dogs\/'\nf='CatDogImages.h5'\nf=h5py.File(fpath+f,'r')\nkeys=list(f.keys()); print(keys)\nx_test=np.array(f[keys[0]])\ny_test=np.array(f[keys[1]],dtype='int8')\nx_train=np.array(f[keys[2]])\ny_train=np.array(f[keys[3]],dtype='int8')\nN=len(y_train); shuffle_ids=np.arange(N)\nnp.random.RandomState(12).shuffle(shuffle_ids)\nx_train,y_train=x_train[shuffle_ids],y_train[shuffle_ids]\nN=len(y_test); shuffle_ids=np.arange(N)\nnp.random.RandomState(23).shuffle(shuffle_ids)\nx_test,y_test=x_test[shuffle_ids],y_test[shuffle_ids]\nn=int(len(x_test)\/2)\nx_valid,y_valid=x_test[:n],y_test[:n]\nx_test,y_test=x_test[n:],y_test[n:]\npd.DataFrame([[x_train.shape,x_valid.shape,x_test.shape],\n              [x_train.dtype,x_valid.dtype,x_test.dtype],\n              [y_train.shape,y_valid.shape,y_test.shape],\n              [y_train.dtype,y_valid.dtype,y_test.dtype]],\n             columns=['train','valid','test'],\n             index=['image shape','image type',\n                    'label shape','label type'])","04ac307e":"fw='weights.best.hdf5'\ndef premodel(pix,den,mh,lbl,activ,loss):\n    model=tf.keras.Sequential([\n        tf.keras.layers.Input((pix,pix,3),\n                              name='input'),\n        th.KerasLayer(mh,trainable=True),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(den,activation='relu'),\n        tf.keras.layers.Dropout(rate=.5),\n        tf.keras.layers.Dense(lbl,activation=activ)])\n    model.compile(optimizer='adam',\n                  metrics=['accuracy'],loss=loss)\n    display(model.summary())\n    return model\ndef cb(fw):\n    early_stopping=tf.keras.callbacks\\\n    .EarlyStopping(monitor='val_loss',patience=20,verbose=2)\n    checkpointer=tf.keras.callbacks\\\n    .ModelCheckpoint(filepath=fw,save_best_only=True,verbose=2)\n    lr_reduction=tf.keras.callbacks\\\n    .ReduceLROnPlateau(monitor='val_loss',verbose=2,\n                       patience=5,factor=.8)\n    return [checkpointer,early_stopping,lr_reduction]","77b6bffa":"[handle_base,pixels]=[\"mobilenet_v1_100_128\",128]\nmhandle=\"https:\/\/tfhub.dev\/google\/imagenet\/{}\/feature_vector\/4\"\\\n.format(handle_base)","e5703523":"model=premodel(pixels,3072,mhandle,1,\n               'sigmoid','binary_crossentropy')\nhistory=model.fit(x=x_train,y=y_train,batch_size=128,\n                  epochs=3,callbacks=cb(fw),\n                  validation_data=(x_valid,y_valid))","5be91797":"model.load_weights(fw)\nmodel.evaluate(x_test,y_test)","7b04508d":"## Data","f8acc1f3":"## TF Hub Models","a6d402f3":"## Code Modules"}}