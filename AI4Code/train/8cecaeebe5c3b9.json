{"cell_type":{"a996ba5a":"code","c2e66964":"code","27df6a3d":"code","ac9e99cf":"code","1ad850bb":"code","d23dfb30":"code","e8347bbd":"code","7a91a0db":"code","2f7f9dcd":"code","99606ec2":"code","d5e8de00":"code","f82e8169":"code","ae39206a":"code","bd160845":"code","8894f4f5":"code","f86c2ded":"code","7c2e85bb":"code","d1334b49":"code","9a6f6fec":"code","2b3ed4f8":"code","cbc2be14":"code","7119fe49":"code","870cba1c":"code","00b7b3b8":"code","7fa3f054":"code","25127ca0":"markdown","fdb57f84":"markdown","7410bc2a":"markdown","e6ae0417":"markdown","895360d7":"markdown","de515ef2":"markdown"},"source":{"a996ba5a":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\n","c2e66964":"dataset_path = '\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/'\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))","27df6a3d":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(test_df.shape))","ac9e99cf":"df.columns","1ad850bb":"test_df.columns","d23dfb30":"df.info()","e8347bbd":"df.isna().sum()","7a91a0db":"df.duplicated().sum()","2f7f9dcd":"df.y.unique()","99606ec2":"df.y.value_counts()","d5e8de00":"features= df.drop(columns=['ID','y'])\nlabels = df['y']\n\nX_test= test_df.drop(columns=['ID'])","f82e8169":"features.describe().T","ae39206a":"corr = features.corr()\nplt.figure(figsize=(20,15))\nsns.heatmap(corr, annot=True, square=True)","bd160845":"feature_cols = features.columns\nsns.set(style='darkgrid')\nfig, ax_list = plt.subplots(nrows=4, ncols=4, sharey=False, figsize=(36,24))\n\nax_list = ax_list.flatten()\nfor name, ax in zip(feature_cols, ax_list):\n     g = sns.histplot(features, x=name, bins=10, ax=ax).set(title=name)","8894f4f5":"features['correlated'] = np.sqrt(features.Area**2 + features.Perimeter**2 + features.MajorAxisLength**2 +features.MinorAxisLength**2)\nX_test['correlated'] = np.sqrt(X_test.Area**2 + X_test.Perimeter**2 + X_test.MajorAxisLength**2 + X_test.MinorAxisLength**2)\n\nfeatures= features.drop(columns=['Area', 'Perimeter', 'MajorAxisLength','MinorAxisLength'],axis=1)\nX_test= X_test.drop(columns=['Area', 'Perimeter', 'MajorAxisLength','MinorAxisLength'],axis=1)","f86c2ded":"from sklearn.model_selection import train_test_split\nX_train,X_val, y_train, y_val = train_test_split(features, labels, test_size=0.2,stratify=labels, random_state=87)","7c2e85bb":"\nprint(X_train.shape)\nprint(X_val.shape)\n","d1334b49":"from sklearn.preprocessing import MinMaxScaler,StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import VotingClassifier,RandomForestClassifier,BaggingClassifier\nfrom sklearn.metrics import plot_confusion_matrix,confusion_matrix,classification_report\nfrom sklearn.svm import SVC","9a6f6fec":"scaler=StandardScaler()\npca=PCA(n_components=11)","2b3ed4f8":"pca=PCA(n_components=12)\ndt_classifier = DecisionTreeClassifier(random_state=0)\ndt_pipeline=make_pipeline(pca,scaler,dt_classifier).fit(X_train, y_train)\nprint(dt_pipeline.score(X_train, y_train))\nprint(dt_pipeline.score(X_val,y_val))","cbc2be14":"from sklearn.ensemble import RandomForestClassifier\npca=PCA(n_components=12)\nrf_classifier = RandomForestClassifier(max_depth=15,random_state= 0)\nrf_pipeline=make_pipeline(pca,scaler,rf_classifier).fit(X_train, y_train)\nprint(rf_pipeline.score(X_train, y_train))\nprint(rf_pipeline.score(X_val,y_val))","7119fe49":"from sklearn.metrics import classification_report\nprint(classification_report(y_val,rf_pipeline.predict(X_val)))\n","870cba1c":"from sklearn.metrics import plot_confusion_matrix,confusion_matrix\nfig, ax = plt.subplots(figsize=(10, 10))\nplot_confusion_matrix(rf_pipeline,X_val,y_val, cmap=plt.cm.Blues, ax=ax)","00b7b3b8":"y_test_predicted = rf_pipeline.predict(X_test)\ntest_df['y'] = y_test_predicted\ntest_df['y'].value_counts()\n\n","7fa3f054":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","25127ca0":"# Import the libraries\n","fdb57f84":"# Submission File Generation\n","7410bc2a":"# Data Splitting","e6ae0417":"# Exploratory Data Analysis\n","895360d7":"**In this step, one should load the data and analyze it. However, I'll load the data and do minimal analysis. \nYou'll learn to do that yourself in time!**\n\n**Let's load the data using pandas and have a look at the generated DataFrame**","de515ef2":"# Model Training"}}