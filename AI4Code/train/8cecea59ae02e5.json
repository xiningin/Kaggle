{"cell_type":{"565f1c29":"code","1b27b98e":"code","b3513c09":"code","f6d1d6e5":"code","eb99da30":"code","dc355ae7":"code","d2a90743":"code","865be93f":"code","a67252b2":"code","1965ec4f":"code","512d4c0c":"code","373104ba":"code","da6c112d":"code","bfb0b0af":"code","56247e36":"code","e2b474d2":"code","c0736569":"code","5d8492a3":"code","72c71c13":"code","df9d8dc2":"code","9c252b30":"markdown","8e28dd41":"markdown","c275814b":"markdown","1ad6052e":"markdown","9531ed20":"markdown","3b6a14b1":"markdown","d1792647":"markdown","a3ad8cb8":"markdown","ba916b23":"markdown","e2a0afd1":"markdown","9c3e1ee8":"markdown","7e9f176c":"markdown","79bdee1f":"markdown","603adc8b":"markdown","638cb0c5":"markdown","3be01afb":"markdown","029da52e":"markdown","ac4d54a0":"markdown","93d7a924":"markdown","db37aada":"markdown"},"source":{"565f1c29":"import pandas as pd\nimport math \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1b27b98e":"train_filepath = \"..\/input\/digit-recognizer\/train.csv\"\ntrain = pd.read_csv(train_filepath)\nprint(\"Train Shape --> \",train.shape)","b3513c09":"test_filepath = \"..\/input\/digit-recognizer\/test.csv\"\ntest = pd.read_csv(test_filepath)\nprint(\"Test Shape --> \",test.shape)","f6d1d6e5":"train.head()","eb99da30":"y_train = train['label']\nX_train = train.drop(labels = [\"label\"],axis = 1)","dc355ae7":"# how many of which numbers are there?\nplt.figure(figsize=(15,7))\ng = sns.countplot(y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")","d2a90743":"X_train = X_train \/ 255.0\ntest = test \/ 255.0","865be93f":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","a67252b2":"from keras.utils import to_categorical\nY_train = to_categorical(y_train, num_classes = 10)","1965ec4f":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state = 2)","512d4c0c":"import cv2 as cv\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout, Activation\nfrom keras.optimizers import Adam\nfrom keras_preprocessing.image import ImageDataGenerator\nfrom keras.models import load_model","373104ba":"model = keras.Sequential()\n\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5), activation='relu',\n                      padding='Same', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5), activation='relu',\n                      padding='Same', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), activation='relu',\n                      padding='Same', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","da6c112d":"optimizer = Adam(lr = 0.001, epsilon = 0.01)","bfb0b0af":"model.compile(\n    optimizer = optimizer,\n    loss = 'categorical_crossentropy',\n    metrics = ['accuracy'])","56247e36":"epochs = 50\nbatch_size = 250","e2b474d2":"datagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False, \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,   \n        zoom_range = 0.1, \n        width_shift_range=0.1,  \n        height_shift_range=0.1)  \n\ndatagen.fit(X_train)","c0736569":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=6)","5d8492a3":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                              callbacks=[early_stopping])","72c71c13":"print(\"The accuracy of the model is -->\", model.evaluate(X_val, Y_val, batch_size = batch_size)[1]*100, \"%\")","df9d8dc2":"predictions = model.predict_classes(test, verbose=0)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"DR.csv\", index=False, header=True)","9c252b30":"**Label encoding for training labels**","8e28dd41":"**Show how much digit classes there are**","c275814b":"**e) Define epochs and batch_size**","1ad6052e":"**Read data file**","9531ed20":"**Evaluate model**","3b6a14b1":"**c) Define optimizer**","d1792647":"**Split training data and labels**","a3ad8cb8":"# **Convolutional Neural Network (CVV)**","ba916b23":"**Import libraries**","e2a0afd1":"**h) Fit model**","9c3e1ee8":"**Train-test split**","7e9f176c":"**g) Callbacks (Early Stoppings)**","79bdee1f":"**f) Data augmentation**","603adc8b":"**a) Import useful libraries**","638cb0c5":"**Reshape**","3be01afb":"**An overview of training data**","029da52e":"**b) Create model**","ac4d54a0":"# Let's begin","93d7a924":"**Normalization**","db37aada":"**d) Compile model**"}}