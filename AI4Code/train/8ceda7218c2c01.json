{"cell_type":{"1c794f45":"code","85f10b64":"code","690e0b94":"code","cf05f3ea":"code","b9fdfff4":"code","df5eb3d2":"code","4c53d7cb":"code","aa8dbdde":"code","e958b375":"code","624d2392":"code","e8942a33":"code","d0e87d68":"code","53613c4f":"code","c55c8a14":"code","bad7946b":"code","ae0e7b69":"code","da6dabbe":"code","3417f56a":"code","3c46f68f":"code","c8f9659a":"code","e6f29df5":"code","3d3a02b0":"code","51e11edc":"code","5e9c7e24":"code","f246983c":"code","e7afb5e9":"code","879ae7df":"code","b4d19830":"code","b23ad57f":"code","e92e670d":"code","fa7c7d66":"code","046fa767":"code","4c81c4a9":"code","f99cfa2f":"code","7dde1f37":"code","cdd6cdbd":"code","8f1c4bc6":"code","78931a52":"code","ea110445":"code","87d4187a":"code","665de990":"markdown","e35203ac":"markdown","958675eb":"markdown","38714af8":"markdown","5479773b":"markdown"},"source":{"1c794f45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","85f10b64":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","690e0b94":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","cf05f3ea":"train.info()","b9fdfff4":"test.info()","df5eb3d2":"all = pd.concat([train, test], sort = False)\nall.info()","4c53d7cb":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","aa8dbdde":"all.info()","e958b375":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","624d2392":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","e8942a33":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","d0e87d68":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","53613c4f":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","c55c8a14":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","bad7946b":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","ae0e7b69":"all.info()","da6dabbe":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","3417f56a":"all.info()","3c46f68f":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","c8f9659a":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","e6f29df5":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","3d3a02b0":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","51e11edc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","5e9c7e24":"from sklearn.ensemble import RandomForestClassifier","f246983c":"RF_Model = RandomForestClassifier()","e7afb5e9":"#from sklearn.model_selection import GridSearchCV","879ae7df":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","b4d19830":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","b23ad57f":"#RF_grid_model = RF_grid.fit(X_train, y_train)","e92e670d":"#RF_grid_model.best_estimator_","fa7c7d66":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","046fa767":"RF_Model.fit(X_train, y_train)","4c81c4a9":"predictions = RF_Model.predict(X_test)\npredictions","f99cfa2f":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","7dde1f37":"all_test.head()","cdd6cdbd":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","8f1c4bc6":"t_pred = RF_Model.predict(TestForPred).astype(int)","78931a52":"PassengerId = all_test['PassengerId']","ea110445":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","87d4187a":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","665de990":"### Build Random Forest","e35203ac":"****Extra Features:","958675eb":"****Final Predictions","38714af8":"****Train\/Test Split","5479773b":"****Check Accuracy"}}