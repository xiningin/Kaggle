{"cell_type":{"128c1137":"code","644ed404":"code","6db77636":"code","02a806cd":"code","6924704d":"code","3bf7b7db":"code","fc6b9ea2":"code","33e12a44":"code","a8350788":"code","ed3f6d06":"code","da2cf462":"code","e16bf467":"code","1a978c5f":"code","a8c6cd73":"code","4810c103":"code","529a59ea":"code","a66f1bf8":"markdown","ef814e8a":"markdown","ca144c13":"markdown","7dfa376d":"markdown","d721271c":"markdown","1c8c2249":"markdown","652a5d78":"markdown","90bb1583":"markdown","f9a85606":"markdown","38d318fb":"markdown","83048c4e":"markdown","59a9c18e":"markdown","023aa13d":"markdown","1ac076c6":"markdown"},"source":{"128c1137":"# Data Manipulation and Linear Algebra\nimport pandas as pd\nimport numpy as np\n\n# Plots\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport matplotlib.pyplot as plt\n\n# Machine Learning\nfrom sklearn.model_selection import StratifiedShuffleSplit, cross_val_score, cross_val_predict\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_recall_curve, roc_curve\nfrom sklearn.decomposition import PCA\n\nfrom sklearn import tree, linear_model, ensemble\n\n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore')","644ed404":"data = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndata","6db77636":"data.info()","02a806cd":"data.drop(\"Time\", axis=1, inplace=True)","6924704d":"data","3bf7b7db":"# Reducing the Number of Features in the Dataset using PCA\npca = PCA(2)\npca_dataframe = pd.DataFrame(pca.fit_transform(data.iloc[:, :29]), columns=[\"PCA1\", \"PCA2\"])","fc6b9ea2":"full_data = pd.concat([pca_dataframe, data.iloc[:, 29:]], axis=1)\nfull_data","33e12a44":"split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(full_data, full_data['Class']):\n    train = full_data.loc[train_index]\n    test = full_data.loc[test_index]","a8350788":"X_train = train.drop(\"Class\", axis=1)\ny_train = train[\"Class\"]\n\nX_test = test.drop(\"Class\", axis=1)\ny_test = test[\"Class\"]","ed3f6d06":"MLA_compare = pd.DataFrame()\n\nrow_index = 0\n\ndef MLA_testing(MLA, X_train, X_test, y_train, y_test):  \n    global row_index\n    \n    # Training The Model\n    MLA.fit(X_train, y_train)\n\n    # KFold Accuracies on Training Data\n    kfold_accuracy = cross_val_score(estimator = MLA, X = X_train, y = y_train, cv = 10, n_jobs=-1)\n    print(\"K-Fold Accuracies:\\n\", kfold_accuracy, \"\\n\")\n    \n    # Prediction on Testing Data\n    y_pred = cross_val_predict(estimator = MLA, X = X_test, y = y_test, cv = 10, n_jobs=-1)\n    \n    # Accuracy for y_test and y_pred\n    classifier_accuracy_score = accuracy_score(y_test, y_pred)\n    print(\"Accuracy Score:\\n\", classifier_accuracy_score, \"\\n\")\n    \n    # Confusion Matrix\n    conf_mtx = confusion_matrix(y_test, y_pred)\n    print(\"Confusion Matrix:\\n\", conf_mtx, \"\\n\")\n    \n    # Classification Report\n    class_rep = classification_report(y_test, y_pred)\n    print(\"Classification Report:\\n\", class_rep, \"\\n\")\n    \n    # Precision - Recall Curve\n    yhat = MLA.predict_proba(X_test)\n    no_skill = len(full_data.Class[full_data.Class==1]) \/ len(full_data.Class)\n    precision, recall, _ = precision_recall_curve(y_test, yhat[:, 1])\n    \n    plt.figure(dpi=100, figsize=(15, 6))\n    plt.subplot(121)\n    sns.lineplot([0, 1], [no_skill, no_skill], linestyle='--', label='No Skill')\n    sns.lineplot(recall, precision, marker='.', label=MLA.__class__.__name__)\n    plt.title(\"Recall vs Precision Curve\")\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.legend()\n    \n    # ROC Curve\n    plt.subplot(122)\n    sns.lineplot([0, 1], [0, 1], linestyle='--', label='No Skill')\n    fpr, tpr, _ = roc_curve(y_test, yhat[:, 1])\n    sns.lineplot(fpr, tpr, marker='.', label=MLA.__class__.__name__)\n    plt.title(\"ROC Curve\")\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.legend()\n    plt.show()\n\n    # Saving Data in Dataframe\n    MLA_name = MLA.__class__.__name__\n    MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n    MLA_compare.loc[row_index, 'Accuracy Score'] = classifier_accuracy_score*100\n    MLA_compare.loc[row_index, 'K-Fold Accuracy'] = kfold_accuracy.mean()*100\n\n    print(MLA_name, \"Done\")\n    \n    row_index+=1","da2cf462":"rf_clf = ensemble.RandomForestClassifier()\n\nMLA_testing(rf_clf, X_train, X_test, y_train, y_test)","e16bf467":"gb_clf = ensemble.GradientBoostingClassifier()\n\nMLA_testing(gb_clf, X_train, X_test, y_train, y_test)","1a978c5f":"lr_clf = linear_model.LogisticRegression()\n\nMLA_testing(lr_clf, X_train, X_test, y_train, y_test)","a8c6cd73":"sgf_clf = linear_model.SGDClassifier(loss=\"log\")\n\nMLA_testing(sgf_clf, X_train, X_test, y_train, y_test)","4810c103":"dt_clf = tree.DecisionTreeClassifier()\n\nMLA_testing(dt_clf, X_train, X_test, y_train, y_test)","529a59ea":"MLA_compare = MLA_compare.sort_values(by=\"K-Fold Accuracy\", ascending=False).reset_index(drop=True)\nMLA_compare","a66f1bf8":"# Comparing Algorithm's Performance","ef814e8a":"# Preparing Data","ca144c13":"## DecisionTreeClassifier","7dfa376d":"## Dropping Time Column","d721271c":"## Dataframe to store all the accuracy scores for Comparison and Analysis","1c8c2249":"# Modeling","652a5d78":"# Importing Libraries","90bb1583":"## Stratified Train Test Split\n### Evenly Spreading the Dependent Variable \"status\" in Train and Test set","f9a85606":"## RandomForestClassifier","38d318fb":"## SGDClassifier","83048c4e":"# Loading Data and Overview","59a9c18e":"## LogisticRegression","023aa13d":"## GradientBoostingClassifier","1ac076c6":"## Dimensionality Reduction"}}