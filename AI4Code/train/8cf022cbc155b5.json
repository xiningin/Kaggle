{"cell_type":{"2ed0d37e":"code","9423f3da":"code","76c80988":"code","cd82fd8d":"code","19ff5bc5":"code","a6f5ee00":"code","e54a6b65":"code","07cdb0c8":"code","7c331ee3":"code","20850b10":"code","cbec5d5a":"code","ad9d79ef":"code","21ef3029":"code","5bab92ef":"code","105e614e":"code","000f4110":"code","e23ce9fb":"code","7e65e7a2":"code","5d51bcd2":"code","395bdf63":"code","6d4d4d90":"code","957bd18e":"code","08ea014b":"code","2171df99":"code","be6cb371":"code","02b47b35":"code","0cba63e5":"markdown"},"source":{"2ed0d37e":"import pandas as pd\nimport numpy as np","9423f3da":"df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')  \ndf","76c80988":"df.drop('date', axis=1, inplace=True)","cd82fd8d":"df.drop('item_price', axis=1, inplace=True)\ndf","19ff5bc5":"# De\u011ferler 0-1 aral\u0131\u011f\u0131na ta\u015f\u0131n\u0131yor\ndf[\"shop_id\"] = df[\"shop_id\"]\/59\ndf[\"item_id\"] = df[\"item_id\"]\/22169\n","a6f5ee00":"df","e54a6b65":"data = df.loc[:,[\"date_block_num\", \"shop_id\", \"item_id\"]]","07cdb0c8":"data = data.to_numpy()","7c331ee3":"labels = df[\"item_cnt_day\"]\nlabels","20850b10":"labels = labels.to_numpy()","cbec5d5a":"df2 = df.sample(n=1000000, random_state=1)\ndf2","ad9d79ef":"data2 = df2.loc[:,[\"date_block_num\", \"shop_id\", \"item_id\"]]","21ef3029":"data2 = data2.to_numpy()","5bab92ef":"labels2 = df2[\"item_cnt_day\"]\nlabels2","105e614e":"labels2 = labels2.to_numpy()","000f4110":"# A\u011f \u00fczerinden 3 adet n\u00f6ron oldu\u011fu i\u00e7in \n# 8 adet a\u011f\u0131rl\u0131k ve 3 adet bias de\u011feri olmal\u0131\nglobal w11,w12,w13,w21,w22,w23,w31,w32,b1,b2,b3\n\n## Sigmoid fonksiyonu \ndef sigmoid(x):\n\n    # Sigmoid aktivasyon fonksiyonu : f(x) = 1 \/ (1 + e^(-x))\n    return 1 \/ (1 + np.exp(-x))\n\n## Sigmoid fonksiyonunun t\u00fcrevi\ndef sigmoid_turev(x):\n\n    # Sigmoid fonksiyonunun t\u00fcrevi: f'(x) = f(x) * (1 - f(x))\n    sig = sigmoid(x)\n    result = sig * (1 - sig)\n\n    return result\n\ndef mse_loss(y_real, y_prediction):\n\n    # y_real ve y_prediction ayn\u0131 boyutta numpy arrayleri olmal\u0131d\u0131r. \n    return ((y_real - y_prediction) ** 2).mean()\n\n## \u0130leri beslemeli n\u00f6ronlar \u00fczerinden tahmin\n## de\u011ferinin elde edilmesi \n\ndef feedforward(row):\n\n    # h1 n\u00f6ronunun de\u011feri\n    h1 = sigmoid((w11 * row[0]) + (w12 * row[1]) + (w13 * row[2]) + b1)\n\n    # h2 n\u00f6ronunun de\u011feri\n    h2 = sigmoid((w21 * row[0]) + (w22 * row[1]) + (w23 * row[2]) + b2)\n\n    # Tahmin de\u011feri o1 n\u00f6ronun de\u011feri\n    o1 = sigmoid((w31 * h1) + (w32 * h2) + b3)\n\n    return o1\n\n## Belitiler iteresyon say\u0131s\u0131 kadar (epochs) modeli e\u011fitelim\n\ndef train(data, labels, epochs, learning_rate):\n    \n    global w11,w12,w13,w21,w22,w23,w31,w32,b1,b2,b3\n    \n    \n    w11 = np.random.normal()\n    w12 = np.random.normal()\n    w13 = np.random.normal()    \n\n    w21 = np.random.normal()\n    w22 = np.random.normal()\n    w23 = np.random.normal()\n    \n    w31 = np.random.normal()\n    w32 = np.random.normal()\n    \n\n    b1 = np.random.normal()\n    b2 = np.random.normal()\n    b3 = np.random.normal()\n\n    for epoch in range(epochs):\n\n        for x, y in zip(data, labels):\n            # N\u00f6ron H1\n            sumH1 = (w11 * x[0]) + (w12 * x[1]) + (w13 * x[2]) + b1\n            H1 = sigmoid(sumH1)\n\n            # N\u00f6ron H2\n            sumH2 = (w21 * x[0]) + (w22 * x[1]) + (w23 * x[2]) + b2\n            H2 = sigmoid(sumH2)\n\n            # N\u00f6ron O1\n            sumO1 = (w31 * H1) + (w32 * H2) + b3\n            O1 = sigmoid(sumO1)\n\n            # Tahmin de\u011ferimiz\n            prediction = O1\n\n            # T\u00fcrevlerin Hesaplanmas\u0131\n            # dL\/dYpred :  y = do\u011fru de\u011fer | prediciton: tahmin de\u011feri\n            dLoss_dPrediction = -2 * (y - prediction)\n\n            # N\u00f6ron H1 i\u00e7in a\u011f\u0131rl\u0131k ve bias t\u00fcrevleri \n            dH1_dW11 = x[0] * sigmoid_turev(sumH1)\n            dH1_dW12 = x[1] * sigmoid_turev(sumH1)\n            dH1_dW13 = x[2] * sigmoid_turev(sumH1)\n            dH1_dB1 = sigmoid_turev(sumH1)\n\n            # N\u00f6ron H2 i\u00e7in a\u011f\u0131rl\u0131k ve bias t\u00fcrevleri\n            dH2_dW21 = x[0] * sigmoid_turev(sumH2)\n            dH2_dW22 = x[1] * sigmoid_turev(sumH2)\n            dH2_dW23 = x[2] * sigmoid_turev(sumH2)                \n            dH2_dB2 = sigmoid_turev(sumH2)\n\n            # N\u00f6ron O1 (output) i\u00e7in a\u011f\u0131rl\u0131k ve bias t\u00fcrevleri\n            dPrediction_dW31 = H1 * sigmoid_turev(sumO1)\n            dPrediction_dW32 = H2 * sigmoid_turev(sumO1)\n            dPrediction_dB3 = sigmoid_turev(sumO1)\n\n            # Ayn\u0131 zamanda tahmin de\u011ferinin H1 ve H2'ye g\u00f6re t\u00fcrevlerinin de\n            # hesaplanmas\u0131 gerekmektedir. \n            dPrediction_dH1 = w31 * sigmoid_turev(sumO1)\n            dPrediction_dH2 = w32 * sigmoid_turev(sumO1)\n\n            ## A\u011f\u0131rl\u0131k ve biaslar\u0131n g\u00fcncellenmesi \n\n            # H1 n\u00f6ronu i\u00e7in g\u00fcncelleme\n            w11 = w11 - (learning_rate * dLoss_dPrediction * dPrediction_dH1 * dH1_dW11)\n            w12 = w12 - (learning_rate * dLoss_dPrediction * dPrediction_dH1 * dH1_dW12)\n            w13 = w13 - (learning_rate * dLoss_dPrediction * dPrediction_dH1 * dH1_dW13)            \n            b1  = b1 - (learning_rate * dLoss_dPrediction * dPrediction_dH1 * dH1_dB1)\n\n            # H2 n\u00f6ronu i\u00e7in g\u00fcncelleme \n            w21 = w21 - (learning_rate * dLoss_dPrediction * dPrediction_dH2 * dH2_dW21)\n            w22 = w22 - (learning_rate * dLoss_dPrediction * dPrediction_dH2 * dH2_dW22)\n            w23 = w23 - (learning_rate * dLoss_dPrediction * dPrediction_dH2 * dH2_dW23)\n            b2 = b2 - (learning_rate * dLoss_dPrediction * dPrediction_dH2 * dH2_dB2)\n\n            # O1 n\u00f6ronu i\u00e7in g\u00fcncelleme \n            w31 = w31 - (learning_rate * dLoss_dPrediction * dPrediction_dW31)\n            w32 = w32 - (learning_rate * dLoss_dPrediction * dPrediction_dW32)\n            b3 = b3 - (learning_rate * dLoss_dPrediction * dPrediction_dB3)\n\n        predictions = np.apply_along_axis(feedforward, 1, data)\n        loss = mse_loss(labels, predictions)\n        \n        #print(\"%d iterasyonda loss de\u011feri: %.4f\" % (epoch+1, loss))\n        #print(\"%d iterasyonda: %.4f\" % (epoch+1, loss))\n    print(\"\")\n    print(\"%d iterasyonda loss de\u011feri: %.4f\" % (epoch+1, loss))","e23ce9fb":"df_test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')  \ndf_test","7e65e7a2":"df_test.drop('ID', axis=1, inplace=True)\ndf_test","5d51bcd2":"x = np.arange(214200, dtype=int)\ntest_value = np.full_like(x, 34)\ntest_value = pd.DataFrame(test_value, columns = ['date_block_num'])\ntest_value","395bdf63":"df_test = test_value.join(df_test)\ndf_test","6d4d4d90":"df_test2 = df_test.sample(n=10000, random_state=1)\ndf_test2 = df_test.to_numpy()\ndf_test2","957bd18e":"len(df_test2)","08ea014b":"##### datam\u0131z\u0131 label'deki de\u011ferlere g\u00f6re e\u011fitiyoruz\nprint(\"e\u011fitim basladi...\")\ntrain(data2, labels2, 100, 0.015)\nprint(\"e\u011fitim tamamlandi...\")","2171df99":"i=0\nL = [];\ntahmin = [];\n\nwhile(i<len(df_test2)):\n    \n    A = [];\n    L = df_test2[i]\n    a1 = L[0]\n    a2 = L[1]\n    a3 = L[2]\n    A.append(int(a1))\n    A.append(int(a2)\/59)\n    A.append(int(a3)\/22169)\n    \n    \n    prediction = feedforward(A)\n    \n    if (prediction > 0.5):\n        tahmin.append('1')\n    else:\n        tahmin.append('-1')\n        \n    #print(tahmin[i])\n    i=i+1\n","be6cb371":"tahminler = pd.DataFrame(tahmin, columns = ['item_cnt_day'])","02b47b35":"result = df_test.join(tahminler)\nresult","0cba63e5":"### fonksiyonlar"}}