{"cell_type":{"35b4bcda":"code","4cab0203":"code","b029d995":"code","37f75ec5":"code","890d5e2d":"code","54cd98b6":"code","99d03ca1":"code","9a21d877":"code","064681a9":"code","2492e0dd":"code","76e1114b":"code","5d5fecab":"code","1c88b6ef":"markdown","054f1dd5":"markdown"},"source":{"35b4bcda":"import numpy as np \nimport pandas as pd\nimport os\nimport cv2\n\nimport torch\nimport torch.nn as nn\nimport torchvision\nimport torchvision.transforms as transforms\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn.functional as nnf","4cab0203":"NUM_CL = 19\n\nBATCH = 16\nEPOCHS = 15\n\nLR = 0.0001\nIM_SIZE = 256\n\nDEVICE = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nPATH = '\/kaggle\/input\/hpa-single-cell-image-classification\/'\nTRAIN_DIR = PATH + 'train\/'\nTEST_DIR = PATH + 'test\/'","b029d995":"train = pd.read_csv(PATH +'train.csv')\n\n# I take just a subset to reduce training time \n# train = train[:1000]\n\ntrain.head()","37f75ec5":"Transform = transforms.Compose(\n    [transforms.ToTensor(),\n    transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])","890d5e2d":"class GetData(Dataset):\n    def __init__(self, path, list_IDs, labels, img_size, Transform):\n        self.path = path\n        self.list_IDs = list_IDs\n        self.labels = labels\n        self.img_size = img_size        \n        self.transform = Transform\n        \n    def __len__(self):\n        return len(self.list_IDs)    \n    \n    def __getitem__(self, index):\n        ID = self.list_IDs[index]   \n        \n        # I take just a \"green\" images\n        data_file = cv2.imread(self.path + ID + '_green.png')\n            \n        img = cv2.resize(data_file, (self.img_size, self.img_size))\n        X = img\/255.        \n        \n        if \"train\" in self.path:                       \n            y = self.labels[index]\n            y = y.split('|')\n            y = list(map(int, y))            \n            y = np.eye(NUM_CL, dtype='float')[y]                                    \n            y = y.sum(axis=0)            \n            return self.transform(X), y\n        \n        elif \"test\" in self.path:\n            return self.transform(X), ID","54cd98b6":"X_Train, Y_Train = train['ID'].values, train['Label'].values\n\ntrainset = GetData(TRAIN_DIR, X_Train, Y_Train, IM_SIZE, Transform)\ntrainloader = DataLoader(trainset, batch_size=BATCH, shuffle=True)","99d03ca1":"X_Test = [name.rstrip('green.png').rstrip('_') for name in (os.listdir(TEST_DIR)) if '_green.png' in name]\n\ntestset = GetData(TEST_DIR, X_Test, None, IM_SIZE, Transform)\ntestloader = DataLoader(testset, batch_size=1, shuffle=False)","9a21d877":"model = torchvision.models.resnet34()\nmodel.fc = nn.Linear(512, NUM_CL, bias=True)\nmodel = model.to(DEVICE)\n\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=LR)","064681a9":"%%time\n\nfor epoch in range(EPOCHS):\n    tr_loss = 0.0\n\n    model = model.train()\n\n    for i, (images, labels) in enumerate(trainloader):        \n        images = images.to(DEVICE)\n        labels = labels.to(DEVICE)       \n        logits = model(images.float())       \n        loss = criterion(logits, labels)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        tr_loss += loss.detach().item()\n    \n    model.eval()\n    print('Epoch: %d | Loss: %.4f'%(epoch, tr_loss \/ i))","2492e0dd":"%%time\n\ns_ls = []\n\nwith torch.no_grad():\n    model.eval()\n    for image, fname in testloader:     \n        image = image.to(DEVICE)        \n        logits = model(image.float())                          \n        prob = nnf.softmax(logits, dim=1)\n        p, top_class = prob.topk(1, dim=1)\n        sp = ' '.join(str(e) for e in [top_class[0][0].item(), p[0][0].item()])               \n        img = cv2.imread(TEST_DIR + fname[0] + '_green.png')\n        \n        if img.shape[0] == 2048:\n            sp = sp + ' eNoLCAgIMAEABJkBdQ=='\n        elif img.shape[0] == 1728:\n            sp = sp + ' eNoLCAjJNgIABNkBkg=='\n        else:\n            sp = sp + ' eNoLCAgIsAQABJ4Beg=='\n        \n        s_ls.append([fname[0], img.shape[1], img.shape[0], sp])","76e1114b":"sub = pd.DataFrame.from_records(s_ls, columns=['ID', 'ImageWidth', 'ImageHeight', 'PredictionString'])\n\nprint(len(sub))\nsub.head()","5d5fecab":"sub.to_csv(\"submission.csv\", index=False)","1c88b6ef":"# TEST","054f1dd5":"# TRAIN"}}