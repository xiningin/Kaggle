{"cell_type":{"4d8ec7db":"code","f011bd70":"code","f8bbd5a0":"code","d09788c1":"code","53eeb7cb":"code","9a5b2b25":"code","acad63cd":"code","92ead76a":"code","fb84e2b8":"code","846b16d6":"code","bb7ae199":"code","baaff988":"code","0436eb41":"code","12e982cc":"code","3ca637eb":"code","11f058c8":"code","ed2b7bb3":"code","94054c37":"code","31a991a4":"code","904d808c":"code","b4336db0":"code","d52dde00":"code","d40c1c81":"code","a6f591c3":"code","ccfed158":"code","39d52820":"code","5c175f48":"code","3c70dc1d":"code","84c6618d":"code","69e90ec9":"code","77154027":"code","502c3a4a":"code","cd11ec3e":"markdown","32ad1595":"markdown","0e66aef7":"markdown","5c414480":"markdown","9817029b":"markdown","abc83778":"markdown","87f90a4b":"markdown","6a73cbc2":"markdown","9a3d51b8":"markdown","1d7b930d":"markdown","40408e38":"markdown"},"source":{"4d8ec7db":"import os\nimport json\n\n#license_keys['SECRET'] = 'your secret'\n#license_keys['SPARK_NLP_LICENSE'] = 'your nlp_license'\n#license_keys['AWS_ACCESS_KEY_ID'] = 'your_aws_key'\n#license_keys['AWS_SECRET_ACCESS_KEY'] = 'your_aws_secret'\n\nfrom kaggle_secrets import UserSecretsClient\n\nlicense_keys = {}\nlicense_keys.keys()\n\nlicense_keys[\"PUBLIC_VERSION\"] = '2.6.5'\nlicense_keys[\"JSL_VERSION\"] = '2.7.2'\n\nuser_secrets = UserSecretsClient()\nos.environ['AWS_ACCESS_KEY_ID'] = user_secrets.get_secret(\"aws_id\")\nos.environ['AWS_SECRET_ACCESS_KEY'] = user_secrets.get_secret(\"aws_secret\")\nsecret = user_secrets.get_secret(\"license_key_secret\")\nos.environ['SPARK_NLP_LICENSE'] = user_secrets.get_secret(\"spark_nlp_license\")\n\nsparknlp_version = license_keys[\"PUBLIC_VERSION\"]\njsl_version = license_keys[\"JSL_VERSION\"]\n\nprint ('SparkNLP Version:', sparknlp_version)\nprint ('SparkNLP-JSL Version:', jsl_version)","f011bd70":"# Install Java\n! apt-get update -qq\n! apt-get install -y openjdk-8-jdk-headless -qq > \/dev\/null\n! java -version\n\n# Install pyspark\n! pip install --ignore-installed -q pyspark==2.4.4\n\n# Install Spark NLP\n! pip install --ignore-installed spark-nlp==$sparknlp_version\n! python -m pip install --upgrade spark-nlp-jsl==$jsl_version --extra-index-url https:\/\/pypi.johnsnowlabs.com\/$secret","f8bbd5a0":"!ls '\/usr\/lib\/jvm\/java-8-openjdk-amd64'","d09788c1":"os.environ['JAVA_HOME'] = \"\/usr\/lib\/jvm\/java-8-openjdk-amd64\"\nos.environ['PATH'] = os.environ['JAVA_HOME'] + \"\/bin:\" + os.environ['PATH']\n\nimport pandas as pd\nimport numpy as np\nfrom pyspark.ml import Pipeline\nfrom pyspark.sql import SparkSession\nimport pyspark.sql.functions as F\n\nimport sparknlp\nfrom sparknlp.annotator import *\nfrom sparknlp_jsl.annotator import *\nfrom sparknlp.base import *\nimport sparknlp_jsl\n\nspark = sparknlp_jsl.start(secret)\n\nfrom sklearn.metrics import precision_recall_curve, average_precision_score, auc\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, accuracy_score, f1_score\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","53eeb7cb":"# You can change this to the model you want to use and re-run cells below.\n# Diagnosis & Procedures models: ner_diseases, ner_clinical, ner_jsl\n\n#MODEL_NAME = \"ner_diseases\"\n#MODEL_NAME = 'ner_clinical'\nMODEL_NAME = 'ner_jsl'","9a5b2b25":"#Create the pipeline\n\ndocument_assembler = DocumentAssembler() \\\n    .setInputCol('text')\\\n    .setOutputCol('document')\n\nsentence_detector = SentenceDetector() \\\n    .setInputCols(['document'])\\\n    .setOutputCol('sentence')\n\ntokenizer = Tokenizer()\\\n    .setInputCols(['sentence']) \\\n    .setOutputCol('token')\n\nword_embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical', 'en', 'clinical\/models') \\\n    .setInputCols(['sentence', 'token']) \\\n    .setOutputCol('embeddings')\n\nclinical_ner = NerDLModel.pretrained(MODEL_NAME, 'en', 'clinical\/models') \\\n    .setInputCols(['sentence', 'token', 'embeddings']) \\\n    .setOutputCol('ner')\n\nner_converter = NerConverter()\\\n    .setInputCols(['sentence', 'token', 'ner']) \\\n    .setOutputCol('ner_chunk')\n\nnlp_pipeline = Pipeline(stages=[\n    document_assembler, \n    sentence_detector,\n    tokenizer,\n    word_embeddings,\n    clinical_ner,\n    ner_converter])\n\nempty_df = spark.createDataFrame([['']]).toDF(\"text\")\npipeline_model = nlp_pipeline.fit(empty_df)\nlight_pipeline = LightPipeline(pipeline_model)","acad63cd":"# Free Text \ninput_list = [\n    \"\"\"\n    This is an 86-year-old female with a past medical History of asthma, Chf, anemia,\nhypertension, Aortic stenosis, myelodysplastic syndrome, chronic kidney disease, gerd, GAVE, right\npleural effusion as well as C. diff colitis. She presented from home with greater than one\nmonth history of Dyspnea, Wheezing and productive cough with blood-tinged Sputum. She was positive\nfor influenza b, admitted for Acute bronchitis and influenza. After treatment with Tamiflu, Ceftin and IV\nSteroid, she continues to have right rib pain, difficulty expectorating and intermittent Wheezing. Repeat\nchest x-ray reveals small right lower lobe infiltrate, question of viral etiology, possible aspiration and\/or\nsuperimposed infection. Chest x-ray also reveals a right Rib fracture which may be contributing to her\nsymptoms. Her Dyspnea is most likely secondary to asthmatic bronchitis, influenza and probable Splinting\nin the setting of right Rib fracture.\n\u2022 Popular language: Double vision and potentially a Heart attack\n\u2022 Acronyms: Bph, CVA, MI, HTN, Niddm, Dvt, Chf, Copd, C-section\n\u2022 45 minutes office visit.\n\u2022 extracapsular cataract removal\n\u2022 Felty\u2019s syndrome\n\u2022 Parkinson\u2019s disease\n\u2022 Crohn\u2019s disease\n\u2022 Bartholin\u2019s gland Excision\n\u2022 Meniere\u2019s disease\n\u2022 lipid panel\n\u2022 Bil. Testosterone.\n\u2022 left iliac bypass\n\u2022 clostridium difficile enterocolitis.\n\u2022 Lt. Knee Replacement on July 12, 2009\n\u2022 bilateral knee replacement\n\u2022 Rt. Hip replacement on May 12, 2012\n\u2022 guttate psoriasis\n\u2022 Patient is asthmatic. asthma can be a serious disease\u2026and then asthmatic appears again\n1. acute appendicitis and Laparoscopic Appendectomy\n2. s\/p Laparoscopic Cholecystectomy 1988\n3. negative \/ no finding\n4. Arthropathic psoriasis. period. and then same line Psoriatic arthritis\n5. diabetes mellitus\n6. chronic atrial fibrillation with short periods of Atrial flutter\n7. Mild Pulmonary hypertension.\n8. Pt underwent rt. eye Trabeculectomy in 1999 (suffering from bil. Glaucoma )\n9. acute on chronic Systolic heart failure\n\n\nand now some free text:\n\nSt. Elsewhere Hospital\n123 main st.\nNYC, NY 12121\ntelephone 212.212.2121\nCO-Consultation Report\nPATIENT NAME: Mary Smith J MED REC NO: 121299338177\nDOB: 06\/10\/1927 PATIENT NO: 876876772\nSEX: F ROOM NUMBER: 5-998\ndate: 04\/17\/2014\nCO-Consultation Report\nPage 1 of\nCONSULTANT: Agent Good, PA\nATTENDING MD: Great Doc, MD\nDICTATED BY: Amy Best, PA\nreason for consultation: Copd exacerbation, Influenza b.\nHISTORY: This is an 86-year-old female with a past medical History of asthma, congestive heart failure,\nanemia, hypertension, Aortic stenosis, myelodysplastic syndrome, chronic kidney disease, gerd, GAVE,\nright pleural effusion Status post benign Thoracentesis and C. diff colitis. She is well known to Pulmonary\nand critical care Services and was seen as an initial consultation by Dr. Louis Gold, March 2014. The\npatient was seen post Pneumonia evaluation. Over the past two months, the patient has been treated for\nmuscle upper respiratory tract infections with a course of Levaquin and subsequently Z-Pak. She was\ngiven a prednisone taper on March 9. Despite taking two rounds of Antibiotics and prednisone, she has\nbeen very slow to respond. She admits to productive cough with white and blood-tinged Sputum, chest\ncongestion, hoarseness and right rib pain. She was transferred from Our Lady of Mercy Residence to St.\nElsewhere Hospital for further evaluation of Dyspnea. On admission to St. Elsewhere on April 17, she was noted\nto have a temperature of 100 degrees Fahrenheit, normotensive and an oxygen saturation of 88% on\nroom air. Initial chest x-ray did not reveal focal infiltrate. Influenza screen was positive for influenza b.\nShe was started on Tamiflu, Ceftin and given IV Steroid. The patient states she is slowing improving;\nhowever, has persistent Dyspnea, difficulty expectorating and rib pain.\nPAST MEDICAL HISTORY:\n1. asthma.\n2. congestive heart failure.\n3. iron deficiency anemia.\n4. depression.\n5. hypertension.\n6. Mild Aortic stenosis.\n7. hypothyroidism.\n8. myelodysplastic syndrome.\n9. chronic kidney disease.\n10. gait abnormality.\n11. dysphagia.\n12. gerd.\n13. GAVE.\n14. Upper GI bleed.\n15. C. diff colitis.\n16. Status post multiple Blood transfusions.\n17. Right Thoracentesis with benign cytology, March 2012.\nPAST SURGICAL HISTORY:\n1. status post right Total knee replacement and left Hip replacement.\n2. hysterectomy.\n3. Status post back surgery.\n4. cataract surgery.\n5. Right carotid endarterectomy.\n6. EGD with Cauterization for GAVE, November 2012.\n7. temporal artery biopsy, negative for Arteritis.\nhome medications:\n1. Acetaminophen 325 mg one tab po every four hours.\n2. Allopurinol 100 mg one tab po every day.\n3. Calcium carbonate one tab po twice a day.\n4. Citalopram 20 mg one tab po every day.\n5. Advair 250\/50 one puff inhaled bid.\n6. Lasix 20 mg one tab po every day.\n7. Guaifenesin 5 mL po every four hours prn cough.\n8. Hydrocodone\/acetaminophen 5\/325 one tab po every night at bedtime.\n9. Xopenex 1.25 mg\/3 mL solution for nebulization every four hours prn Shortness of breath.\n10. Levaquin 500 mg tab po every other day, started on April 16.\n11. Synthroid 175 micrograms one tab po every day.\n12. Loperamide 2 mg one capsule po every four hours prn Diarrhea.\n13. Multivitamin one tab po every day.\n14. Pantoprazole 40 mg one tab po bid.\n15. Potassium chloride 10 mEq one tab po every day.\n16. Prednisone 20 mg three tabs po every day for five days.\n17. Syllium 3.4 grams one po every day.\n18. Spiriva 18 micrograms one cap inhaled every day.\n19. Ursodiol 300 mg one cap po tid.\nHOSPITAL MEDICATIONS:\n1. Albuterol 2.5 mg nebulizer every four hours.\n2. Allopurinol 100 mg po every day.\n3. Amlodipine 5 mg po every day.\n4. Ceftin 500 mg po bid.\n5. Celexa 20 mg one tab po every day.\n6. Guaifenesin 600 mg po bid.\n7. Heparin 5000 units subcu every eight hours.\n8. Hydrocodone 5\/325 mg one tab po every night at bedtime.\n9. Levothyroxine 175 micrograms po every day.\n10. Solu-Medrol 40 mg IV every six hours.\n11. Multivitamin one tab po every day.\n12. Prilosec 40 mg po bid.\n13. Tamiflu 75 mg po bid.\n14. Potassium chloride 10 mEq po every day.\n15. Spiriva one puff inhaled every day.\nAllergies:\n1. BETA-BLOCKERS cause Dyspnea.\n2. CODEINE, Nausea and Vomiting.\nreview of systems: SYSTEMIC: No Fevers, Chills, night sweats or lower extremity Edema. She\ndoes admit to Weight gain over the last several months that she attributes to her diet.\nHEAD: No Headache or sinus pain.\nNECK: No lump or swelling.\nEYES: No change in vision.\nENT: No nasal discharge, Epistaxis or Sore throat. Positive for hoarseness, positive for chronic hearing\nloss.\nCARDIOVASCULAR: No Chest pain or Palpitations.\nPULMONARY: positive for a history of Pneumonia, chronic Shortness of breath and productive cough\nwith white colored Sputum, occasionally blood-tinged. Positive for Wheezing. No history of TB exposure.\nGI: No change in appetite. Positive for Heartburn. No Nausea, Vomiting, Diarrhea or Abdominal pain.\npositive for a history of C. diff colitis.\nGU: No Dysuria or Hematuria.\nENDOCRINE: No history of diabetes or thyroid disease.\nHEME: No easy Bruising or recent Bleeding. positive for a history of GI Bleeding secondary to GAVE.\nMUSCULOSKELETAL: No Muscle aches or pain.\nSKIN: No Rash or Lesions.\nPHYSICAL EXAMINATION: VITAL SIGNS: Temperature 36.7, blood Pressure 137\/71, pulse 70,\nrespirations 20, sat of 90% on 2 liters Nasal cannula.\nGENERAL: This is a very pleasant, well-developed, well-nourished elderly female who is seated in bed in\nno acute Respiratory distress. She he is able to speak in full sentences with no accessory muscle use.\nHEENT: Normocephalic, Atraumatic. Pupils are equal, round and reactive to light. Sclerae Anicteric.\nHearing is reduced bilaterally. She has a Hearing aid in place. Oropharynx is moist. No evidence of\nThrush. E\nNECK: Supple. Trachea is midline. There is right CEA Scar.\nCHEST: Symmetric. Breath sounds are reduced bilaterally with expiratory Wheeze and rhonchi. No\nrales. Right rib cage is tender to palpitation.\nHEART: Regular S1, S2. No Murmurs, rubs or gallops appreciated.\nABDOMEN: Positive bowel sounds. Soft, nontender, nondistended. No organomegaly.\nEXTREMITIES: No Edema, Cyanosis or clubbing.\nSKIN: Warm and dry. No Rash or Lesions.\nLABORATORY DATA: White blood cell count 6, hemoglobin 11, hematocrit 34, platelets 116,000,\nmagnesium 1.8, sodium 139, potassium 4.3, chloride 105, bicarb 25, BUN 55, creatinine 1.4, glucose\n197.\nBlood culture from April 17: Negative times two.\nInfluenza from April 17: Positive for influenza b.\nIMAGING: Chest x-ray from April 17: Lungs are clear with no evidence of focal infiltrate, Pleural effusion\nor Chf. Personally reviewed.\nChest x-ray from April 21: Question of Rib fracture, rib 6 and 7, as well as a right lower lobe infiltrate seen\non the lateral view.\nIMPRESSION: This is an 86-year-old female with a past medical History of asthma, Chf, anemia,\nhypertension, Aortic stenosis, myelodysplastic syndrome, chronic kidney disease, gerd, GAVE, right\npleural effusion as well as C. diff colitis. She presented from home with greater than one\nmonth history of Dyspnea, Wheezing and productive cough with blood-tinged Sputum. She was positive\nfor influenza b, admitted for Acute bronchitis and influenza. After treatment with Tamiflu, Ceftin and IV\nSteroid, she continues to have right rib pain, difficulty expectorating and intermittent Wheezing. Repeat\nchest x-ray reveals small right lower lobe infiltrate, question of viral etiology, possible aspiration and\/or\nsuperimposed infection. Chest x-ray also reveals a right Rib fracture which may be contributing to her\nsymptoms. Her Dyspnea is most likely secondary to asthmatic bronchitis, influenza and probable Splinting\nin the setting of right Rib fracture.\n    \"\"\"\n]","92ead76a":"df = spark.createDataFrame(pd.DataFrame({\"text\": input_list}))\nresult = pipeline_model.transform(df)","fb84e2b8":"# Visualize outputs as data frame ... NOTE pyspark df not pandas df...\n\nexploded = F.explode(F.arrays_zip('ner_chunk.result', 'ner_chunk.metadata'))\nselect_expression_0 = F.expr(\"cols['0']\").alias(\"chunk\")\nselect_expression_1 = F.expr(\"cols['1']['entity']\").alias(\"ner_label\")\nresult.select(exploded.alias(\"cols\")) \\\n    .select(select_expression_0, select_expression_1).show(truncate=False)\nresult = result.toPandas()","846b16d6":"\nIOIdf = pd.DataFrame(columns = ['Result', 'Entity', 'StrBegin', 'StrEnd'])\n\n\nfor i in range(len(result['ner_chunk'][0])):\n    #ResultEntity = [result['ner_chunk'][0][i]['result'] , result['ner_chunk'][0][i]['metadata']['entity']]\n    ResultEntity = pd.DataFrame()\n    ResultEntity['Result'] = [result['ner_chunk'][0][i]['result']]\n    ResultEntity['Entity'] = [result['ner_chunk'][0][i]['metadata']['entity']]\n    ResultEntity['StrBegin'] = [result['ner_chunk'][0][i]['begin']]\n    ResultEntity['StrEnd'] = [result['ner_chunk'][0][i]['end']]\n    #print(ResultEntity)\n    \n    IOIdf = IOIdf.append(ResultEntity)\n    \nIOIdf ","bb7ae199":"# Categories \/ Entities extracted\n\nIOIElist = list(IOIdf['Entity'])\nset(IOIElist)","baaff988":"from IPython.display import HTML, display\nimport random\n\ndef get_color():\n    r = lambda: random.randint(128,255)\n    return \"#%02x%02x%02x\" % (r(), r(), r())\n\ndef annotation_to_html(full_annotation):\n    ner_chunks = full_annotation[0]['ner_chunk']\n    text = full_annotation[0]['document'][0].result\n    label_color = {}\n    for chunk in ner_chunks:\n        label_color[chunk.metadata['entity']] = get_color()\n\n    html_output = \"<div>\"\n    pos = 0\n\n    for n in ner_chunks:\n        if pos < n.begin and pos < len(text):\n            html_output += f\"<span class=\\\"others\\\">{text[pos:n.begin]}<\/span>\"\n        pos = n.end + 1\n        html_output += f\"<span class=\\\"entity-wrapper\\\" style=\\\"color: black; background-color: {label_color[n.metadata['entity']]}\\\"> <span class=\\\"entity-name\\\">{n.result}<\/span> <span class=\\\"entity-type\\\">[{n.metadata['entity']}]<\/span><\/span>\"\n\n    if pos < len(text):\n        html_output += f\"<span class=\\\"others\\\">{text[pos:]}<\/span>\"\n\n    html_output += \"<\/div>\"\n    display(HTML(html_output))","0436eb41":"# Display example outputs as HTML\n\nfor example in input_list:\n    annotation_to_html(light_pipeline.fullAnnotate(example))","12e982cc":"result['ner_chunk'][0][-1]['metadata']['entity']","3ca637eb":"# Shorter text ... removed 's from Meniere's disease and similar\n\ninput_list = [\n    \"\"\"\n    This is an 86 year old female with a past medical History of asthma, Chf, anemia,\nhypertension, Aortic stenosis, myelodysplastic syndrome, chronic kidney disease, GERD, GAVE, right\npleural effusion as well as C. diff colitis. She presented from home with greater than one\nmonth history of Dyspnea, Wheezing and productive cough with blood-tinged Sputum. She was positive\nfor influenza b, admitted for Acute bronchitis and influenza. After treatment with Tamiflu, Ceftin and IV\nSteroid, she continues to have right rib pain, difficulty expectorating and intermittent Wheezing. Repeat\nchest x-ray reveals small right lower lobe infiltrate, question of viral etiology, possible aspiration and\/or\nsuperimposed infection. Chest x-ray also reveals a right Rib fracture which may be contributing to her\nsymptoms. Her Dyspnea is most likely secondary to asthmatic bronchitis, influenza and probable Splinting\nin the setting of right Rib fracture.\n\u2022 Popular language: Double vision aka diplopia and potentially a Heart attack\n\u2022 Acronyms: BPH, CVA, MI, HTN, Niddm, DVT, CHF, COPD\nC-section\n\u2022 45 minutes office visit.\n\u2022 extracapsular cataract removal\n\u2022 Felty syndrome\n\u2022 Parkinson disease\n\u2022 Crohn disease\n\u2022 Bartholin gland Excision\n\u2022 Meniere disease\n\u2022 lipid panel\n\u2022 Bil. Testosterone.\n\u2022 left iliac bypass\n\u2022 clostridium difficile enterocolitis.\n\u2022 Lt. Knee Replacement on July 12, 2009\n\u2022 bilateral knee replacement\n\u2022 Rt. Hip replacement on May 12, 2012\n\u2022 guttate psoriasis\n\u2022 Patient is asthmatic. asthma can be a serious disease\u2026and then asthmatic appears again\n1. acute appendicitis and Laparoscopic Appendectomy\n2. s\/p Laparoscopic Cholecystectomy 1988\n3. negative \/ no finding\n4. Arthropathic psoriasis. period. and then same line Psoriatic arthritis\n5. diabetes mellitus\n6. chronic atrial fibrillation with short periods of Atrial flutter\n7. Mild Pulmonary hypertension.\n8. Pt underwent rt. eye Trabeculectomy in 1999 (suffering from bil. Glaucoma )\n9. Acute on chronic systolic heart failure\n\"\"\"] ","11f058c8":"df = spark.createDataFrame(pd.DataFrame({\"text\": input_list}))\nresult = pipeline_model.transform(df)\n\n# Visualize outputs as data frame ... NOTE pyspark df not pandas df...\n\nexploded = F.explode(F.arrays_zip('ner_chunk.result', 'ner_chunk.metadata'))\nselect_expression_0 = F.expr(\"cols['0']\").alias(\"chunk\")\nselect_expression_1 = F.expr(\"cols['1']['entity']\").alias(\"ner_label\")\nresult.select(exploded.alias(\"cols\")) \\\n    .select(select_expression_0, select_expression_1).show(truncate=False)\nresult = result.toPandas()\n\n\nIOIdf = pd.DataFrame(columns = ['Result', 'Entity', 'StrBegin', 'StrEnd'])\n\n\nfor i in range(len(result['ner_chunk'][0])):\n    #ResultEntity = [result['ner_chunk'][0][i]['result'] , result['ner_chunk'][0][i]['metadata']['entity']]\n    ResultEntity = pd.DataFrame()\n    ResultEntity['Result'] = [result['ner_chunk'][0][i]['result']]\n    ResultEntity['Entity'] = [result['ner_chunk'][0][i]['metadata']['entity']]\n    ResultEntity['StrBegin'] = [result['ner_chunk'][0][i]['begin']]\n    ResultEntity['StrEnd'] = [result['ner_chunk'][0][i]['end']]\n    #print(ResultEntity)\n    \n    IOIdf = IOIdf.append(ResultEntity)\n    \nIOIdf ","ed2b7bb3":"# Only one category\n\n#IOIdf[IOIdf['Entity']=='Negated']\nIOIdf[IOIdf['Entity']=='Diagnosis']\n#IOIdf[IOIdf['Entity']=='Procedure_Name']","94054c37":"IOIdf['Result'] = IOIdf['Result'].str.lower()\nIOIdf['Result'] = IOIdf['Result'].replace('\\n',' ', regex=True)","31a991a4":"Extracted = list(IOIdf[IOIdf['Entity']=='Diagnosis']['Result'].unique())\nExtracted = sorted(Extracted)\nExtracted","904d808c":"import string\nAllWords = input_list[0].split()\nAllWords = [x.lower() for x in AllWords]\nAllWords = [s.translate(str.maketrans('','',string.punctuation)) for s in AllWords]\nTotNumWords = len(AllWords)\nTotNumWords","b4336db0":"# a df with all the words to populate with ground truth and extracted\n\nevalDF = pd.DataFrame(AllWords)\nevalDF.columns = ['OriginalWord']\nevalDF['GroundTruth'] = 0\nevalDF['Extracted'] = 0\nevalDF","d52dde00":"TruePos = ['anemia',\n 'aortic stenosis',\n 'appendicitis',\n 'arthropathic psoriasis',\n 'aspiration',\n    'superimposed infection',\n 'asthma',\n 'asthmatic',\n 'asthmatic bronchitis',\n 'atrial fibrillation',\n 'atrial flutter',\n 'bronchitis',\n 'chf','Meniere disease', 'Crohn disease', \n   'Parkinson disease', 'Felty syndrome', \n   'enterocolitis' ,'guttate psoriasis', 'heart failure',\n 'chronic kidney disease','colitis',\n 'cva','gerd','gave',\n 'diabetes mellitus',\n 'dvt',\n 'glaucoma',\n 'htn',\n 'hypertension',\n 'psoriatic arthritis',\n 'mi', 'influenza', 'diplopia','copd',\n 'myelodysplastic syndrome',\n 'niddm',\n 'pleural effusion',\n 'pulmonary hypertension',\n 'rib fracture']\nTruePos = sorted(TruePos)\n\nprint(len(TruePos))\n#TruePos","d40c1c81":"# Flatten the TruePos\n\nTruePosToken = [x.split() for x in TruePos]\nTruePosToken = [item for sublist in TruePosToken for item in sublist]\nTruePosToken = sorted(set(TruePosToken))\n#TruePosToken\nlen(TruePosToken)","a6f591c3":"ExtToken = [x.split() for x in Extracted]\nExtToken = [item for sublist in ExtToken for item in sublist]\nExtToken = sorted(set(ExtToken))\nExtToken\nlen(ExtToken)","ccfed158":"# Set GT on the AllWords\n\nfor w in range(len(AllWords)):\n    for t in range(len(TruePosToken)):\n        if evalDF['OriginalWord'][w] == TruePosToken[t]:\n            evalDF['GroundTruth'][w] = 1\n            #print(evalDF['OriginalWord'][w])","39d52820":"# Set Extracted on the AllWords\n\nfor w in range(len(AllWords)):\n    for t in range(len(ExtToken)):\n        if evalDF['OriginalWord'][w] == ExtToken[t]:\n            evalDF['Extracted'][w] = 1\n            #print(evalDF['OriginalWord'][w])","5c175f48":"evalDF.head(50)","3c70dc1d":"y_test = evalDF['GroundTruth'].values\nPreds = evalDF['Extracted'].values","84c6618d":"# Confusion matrix\n\nconf_mx = confusion_matrix(y_test, Preds)\n\nTN = conf_mx[0,0]\nFP = conf_mx[0,1]\nFN = conf_mx[1,0]\nTP = conf_mx[1,1]\n\nprint ('TN: ', TN)\nprint ('FP: ', FP)\nprint ('FN: ', FN)\nprint ('TP: ', TP)\n\nrecall = TP\/(TP+FN)\nprecision = TP\/(TP+FP)\n\nprint ('recall = ', round(recall,3), 'precision = ', round(precision,3))\n\nF1 = 2 * recall * precision \/ (recall + precision)\nprint('F1 = ', round(F1,3))","69e90ec9":"def plot_confusion_matrix(cm,target_names,title='Confusion matrix',cmap=None,\n                          normalize=False):\n    import itertools\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        \n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()","77154027":"plot_confusion_matrix(conf_mx, \n                      normalize    = False,\n                      target_names = ['NOT_Extract', 'Extract'],\n                      title        = \"Confusion Matrix at the TOKEN level\")","502c3a4a":"# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(y_test, Preds)\n# calculate F1 score\nf1 = f1_score(y_test, Preds)\nprint('f1=%.3f' % (f1))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the roc curve for the model\nplt.plot(recall, precision, marker='.')\n# show the plot\nplt.show()","cd11ec3e":"# Display results","32ad1595":"Import dependencies into Python and start the Spark session","0e66aef7":"Select the NER model: **ner_diseases, ner_clinical, ner_jsl**\n\nFor more details: https:\/\/github.com\/JohnSnowLabs\/spark-nlp-models#pretrained-models---spark-nlp-for-healthcare","5c414480":"# Select the NER model and construct the pipeline","9817029b":"# Extract medical terms from free text with Spark NLP Healthcare\n\nThis notebook was modified from the original one from JSL.\n\nIt extracts all the medical terms such as diagnosis, procedure, lab, medications, etc. from free text while using an impressive, state of the art NLP tool: ***Spark NLP for Healthcare*** from https:\/\/www.johnsnowlabs.com\/.\n\n\n# Plan:\nThe performance of the extraction algorithm will be measured with F1 score, the harmonic mean of precision and recall based on the good old confusion matrix (TP, TN, FP, FN). \n\nF1 will be calculated for each major group: diagnosis, procedure, labs, meds, etc.\n\n* Many thanks to Jiri and David from JS labs for their help and support.\n\n","abc83778":"# Calculate confusion matrix at the TOKEN level (not entity level)\n\nSo *myelodisplastic syndrome* is actually 2 tokens to be extracted and not what would be preferrable at ONE entity...but it's much easier to calculate and semi-manually annotate the texts","87f90a4b":"# Create example input","6a73cbc2":"# Use the pipeline to create outputs","9a3d51b8":"Install dependencies","1d7b930d":"# Import license keys\n\nWhile Spark-NLP is available for free, the Healthcare version is **not** (except for a one month free trial).\n\nYou'll need to purchase a Spark NLP for Healthcare license from JS labs, once you decide to use it for your purposes.\n\nBecause it depends on a license, ***this notebook will not run if you fork it***, unless you bring your own license keys...","40408e38":"# Diagnosis only"}}