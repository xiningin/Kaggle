{"cell_type":{"d6d324d3":"code","52dbd27c":"code","78809af4":"code","134b51f6":"code","6fce2070":"code","04f92e63":"code","3324cfe0":"code","c437b417":"code","8f27733f":"code","a332db76":"code","9af5b8d4":"code","f9f6ba2a":"code","69012f25":"code","b3c2490a":"code","ea568d7f":"code","150c17b2":"code","962274b8":"code","7d73a9c4":"markdown","8c6b2934":"markdown","7a864ee9":"markdown"},"source":{"d6d324d3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","52dbd27c":"df_train_x = pd.read_csv(\"\/kaggle\/input\/comp-covid19-death\/train\/train_infection.csv\")\ndf_train_y = pd.read_csv(\"\/kaggle\/input\/comp-covid19-death\/train\/train_death.csv\")\n\ndf_public_x = pd.read_csv(\"\/kaggle\/input\/comp-covid19-death\/test\/public_infection.csv\")\ndf_private_x = pd.read_csv(\"\/kaggle\/input\/comp-covid19-death\/test\/private_infection.csv\")\n\ndf_all_x = pd.concat([df_train_x, df_public_x,df_private_x],axis=1)\ndf_all_x.head()","78809af4":"city_df = pd.read_csv(\"\/kaggle\/input\/comp-covid19-death\/train\/city_info.csv\")\ncity_df[\"city\"] = city_df[\"city\"].fillna(\"N\")\ncity_df[\"city_province\"] = (city_df[\"city\"] + \"_\" +city_df[\"Province_State\"]).replace(\" \", \"_\")\n\n\ndf_train_x[\"city_province\"] = city_df[\"city_province\"]\ndf_train_x =df_train_x.drop(\"city\",axis=1).set_index(\"city_province\")\n\ndf_train_y[\"city_province\"] = city_df[\"city_province\"]\ndf_train_y = df_train_y.drop(\"city\",axis=1).set_index(\"city_province\")\n\ndf_public_x[\"city_province\"] = city_df[\"city_province\"]\ndf_public_x = df_public_x.drop(\"city\",axis=1).set_index(\"city_province\")\n\ndf_private_x[\"city_province\"] = city_df[\"city_province\"]\ndf_private_x = df_private_x.drop(\"city\",axis=1).set_index(\"city_province\")\n\ndf_all_x[\"city_province\"] = city_df[\"city_province\"]\ndf_all_x = df_all_x.drop(\"city\",axis=1).set_index(\"city_province\")\n\n","134b51f6":"df_train_x.index[9]","6fce2070":"display(df_train_x.head())","04f92e63":"def plot_infection(df, cities, logy=True):\n    _df = df\n    _df.transpose()[cities].plot(logy=logy)\ndef plot_infection_diff(df, cities, logy=True):\n    _df = df\n    _df.transpose()[cities].diff().plot(logy=logy)\n    \ndef plot_infection_and_death(df, gt, cities, logy=True):\n    _df = df.transpose()[cities]\n    _gt = gt.transpose()[cities]\n    for city in cities:\n        _df[city+\"_death\"] = _gt[city]\n    _df.plot(logy=logy)\n    \ndef plot_infection_and_death_diff(df, gt, cities, logy=True):\n    _df = df.transpose()[cities]\n    _gt = gt.transpose()[cities]\n    for city in cities:\n        _df[city+\"_death\"] = _gt[city]\n    _df.diff().plot(logy=logy)\n    ","3324cfe0":"plot_infection(df_all_x, ['Baldwin_Alabama'],logy=False)\nplot_infection_diff(df_all_x, ['Baldwin_Alabama'],logy=False)","c437b417":"plot_infection_and_death(df_all_x, df_train_y, ['Cherokee_Alabama'],logy=False)\nplot_infection_and_death_diff(df_all_x, df_train_y, ['Cherokee_Alabama'],logy=False)\n\nplot_infection_and_death(df_all_x, df_train_y, ['Cherokee_Alabama'],logy=True)\nplot_infection_and_death_diff(df_all_x, df_train_y, ['Cherokee_Alabama'],logy=True)","8f27733f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a332db76":"import statsmodels.api as sm\n\nxs = df_all_x.values\nys = df_train_y.values\nfor i in range(len(ys)):\n    # AR\u30e2\u30c7\u30eb(p=5)\n    ORDER_P = 5\n    model = sm.tsa.ARMA(ys[i] , order=(ORDER_P , 0))\n    result = model.fit(trend='c' , method='mle')\n    print(result.summary())\n    \n    start = len(ys[i])\n    end = len(xs[i])\n    pred = result.predict(start=start,end=end-1)\n    print(\"prediction size =\",pred.shape)\n    print(\"prediction values =\",pred)\n\n    # \u4e88\u6e2c\u30c7\u30fc\u30bf\u3082\u53ef\u8996\u5316\n    plt.figure()\n    plt.plot(list(range(0,start)), ys[i], label=\"past\")\n    plt.plot(list(range(start,end)), pred, label=\"prediction\") #\u4e88\u6e2c\u5024\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306brange\u306e\u533a\u9593\u3092\u8a2d\u5b9a\u3002\n    plt.grid()\n\n    plt.legend()\n    plt.show()\n\n    break","9af5b8d4":"start = df_train_y.shape[1]\nend = df_all_x.shape[1]\n\ndef sarima(y,\n    ORDER_P = 1,\n    ORDER_D = 1,\n    ORDER_Q = 1,):\n    model = sm.tsa.statespace.SARIMAX(y,order=(ORDER_P,ORDER_D,ORDER_Q),seasonal_order=(0,0,1,7),trend='c',enforce_invertibility=False)\n    result = model.fit(trend='c' )    \n    pred = result.predict(start=start,end=end-1)\n    return pred","f9f6ba2a":"import statsmodels.api as sm\n\nxs = df_all_x.values\nys = df_train_y.iloc[:].values\nfor i in range(len(ys)):\n    if i!=2558:\n        continue\n    pred = sarima(ys[i],\n                ORDER_P = 1, \n                ORDER_D = 2,\n                ORDER_Q = 1,)\n    # \u4e88\u6e2c\u30c7\u30fc\u30bf\u3082\u53ef\u8996\u5316\n    plt.figure()\n    plt.plot(list(range(0,start)), ys[i], label=\"past\")\n    plt.plot(list(range(start,end)), pred, label=\"prediction\") #\u4e88\u6e2c\u5024\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306brange\u306e\u533a\u9593\u3092\u8a2d\u5b9a\u3002\n    plt.grid()\n\n    plt.legend()\n    plt.show()\n\n    break\n","69012f25":"import joblib\n\nresult = joblib.Parallel(n_jobs=-1, verbose=1)(joblib.delayed(sarima)(ys[i],ORDER_D = 2) for i in range(len(ys)))","b3c2490a":"submission_public = pd.read_csv(\"\/kaggle\/input\/comp-covid19-death\/submission\/submission_public.csv\", index_col=\"Id\")\nsubmission_private = pd.read_csv(\"\/kaggle\/input\/comp-covid19-death\/submission\/submission_private.csv\", index_col=\"Id\")\n\nprint(submission_public.shape)\nprint(submission_private.shape)","ea568d7f":"from tqdm.notebook import tqdm\n\nxs = df_all_x.values\nys = df_train_y.iloc[:].values\nfor i in tqdm(range(len(ys))):\n    submission_public.iloc[i,:] = result[i][:submission_public.shape[1]]\n    submission_private.iloc[i,:] = result[i][submission_public.shape[1]:]\n","150c17b2":"submission_public.to_csv(\"\/kaggle\/working\/submission_public.csv\")\nsubmission_public = pd.read_csv(\"\/kaggle\/working\/submission_public.csv\", index_col=\"Id\")\nsubmission_public.head()","962274b8":"submission_private.to_csv(\"\/kaggle\/working\/submission_private.csv\")\nsubmission_private = pd.read_csv(\"\/kaggle\/working\/submission_private.csv\", index_col=\"Id\")\nsubmission_private.head()","7d73a9c4":"# \u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\n\u82f1\u8a9e\u540d\uff1aAR\u30e2\u30c7\u30eb (Autoregressive model)","8c6b2934":"# SARIMA \u306b\u3088\u308b\u4e88\u6e2c","7a864ee9":"# SARIMA"}}