{"cell_type":{"83994040":"code","2eeae6a4":"code","1d869f0a":"code","acdf5f9d":"code","4508421e":"code","2745b65b":"code","32043d60":"code","54979ca1":"code","c0a74be3":"code","b5b17f8d":"code","00cbce33":"code","60b2c1f1":"code","d495b08b":"code","222555c3":"code","3e9eac59":"code","36800a2f":"code","cf7f69d4":"code","9d9dac96":"code","40aee9b1":"code","29660c70":"code","e4725676":"code","771f6229":"code","7f8629fe":"code","75123581":"code","e9e1fc16":"code","9c727406":"code","d2372a68":"code","ea8c08c7":"code","4d53f1ad":"code","cfcdd0a4":"markdown","dc892d7f":"markdown","8c958502":"markdown","fed06a51":"markdown","a0fb292a":"markdown","1cdb971d":"markdown","c46a0ece":"markdown","c7d8a319":"markdown","3df19558":"markdown","37f8c3b4":"markdown","2daac7d4":"markdown","cd92fbb2":"markdown","a74987fe":"markdown","9e6f3cc9":"markdown"},"source":{"83994040":"# Importing Essential Libraries.\nimport pandas as pd\nimport numpy as np\n\n# Visualization Libraries (plotly.express)\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio","2eeae6a4":"market = pd.read_csv('..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv')\nmarket.head() # checking our DataFrame","1d869f0a":"market.columns = market.columns.str.lower().str.replace(' ', '_')","acdf5f9d":"# Preparing DataFrame\ncategorical = market.select_dtypes(include = 'object')\ncategorical = categorical.drop(columns = 'invoice_id')\n\n\n# Table Figure\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(categorical.columns),\n                fill_color='navy',\n                align='left'),\n    cells=dict(values= [market.branch, market.city, market.customer_type, market.gender, market.product_line, market.date, market.time, market.payment],\n               fill_color='black',\n               align='left'))\n])\n\nfig.update_layout(template = 'plotly_dark', title = 'Categorical Table (Objects)')\n\nfig.show()","4508421e":"# Preparing the DataFrame\nnumerical = market.select_dtypes(exclude = 'object')\nnumerical.columns = numerical.columns.str.replace('%', '')\n\n\n# Table\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(numerical.columns),\n                fill_color='navy',\n                align='left'),\n    cells=dict(values= [numerical.unit_price, numerical.quantity, numerical.tax_5, numerical.total, numerical.cogs, numerical.gross_margin_percentage, numerical.gross_income, numerical.rating],\n               fill_color='black',\n               align='left'))\n])\n\nfig.update_layout(template = 'plotly_dark', title = 'Numerical Table(Floats and Integers)')\n\nfig.show()","2745b65b":"print(categorical.apply(lambda col: col.unique())) #check some of the unique values","32043d60":"market.info() # checking more information from the dataframe","54979ca1":"market.isnull().sum() # sum of missing values","c0a74be3":"categorical_df = market.select_dtypes(include = 'object') # selecting all object columns","b5b17f8d":"numerical_df  = market.select_dtypes(include = 'number') #selecting all numerical columns","00cbce33":"print(categorical_df.head(3))\nprint(numerical_df.head(3))","60b2c1f1":"# Memory Usage Check\ncategorical_df.memory_usage(deep = True)","d495b08b":"# Converting Column Names to lower case\ncategorical_df.columns = categorical_df.columns.str.lower().str.replace(' ', '_')","222555c3":"# Columns that will be converted\nconvert_cat = categorical_df[['product_line', 'city', 'gender', 'customer_type', 'city', 'branch', 'payment']]\nconvert_cat = convert_cat.astype('category')","3e9eac59":"print(convert_cat.memory_usage(deep = True))","36800a2f":"# Merging date and time columns from categorical df\ncategorical_df['datetime'] = categorical_df['date'] + ' ' + categorical_df['time']\ndatetime = pd.Series(categorical_df['datetime'])","cf7f69d4":"# Converting object to datetimeobject\ndatetime = pd.to_datetime(datetime)","9d9dac96":"categorical_df = pd.concat([convert_cat, datetime], axis = 1)","40aee9b1":"print(categorical_df.head(3))\nprint(categorical_df.memory_usage(deep = True))","29660c70":"categorical_df.info()","e4725676":"numerical_df.head(2) # check starting data using head()","771f6229":"# renaming columns\nnumerical_df.columns = numerical_df.columns.str.lower().str.replace(' ', '_')","7f8629fe":"numerical_df.describe() # descriptive stat","75123581":"customer_types = pd.DataFrame(categorical_df['customer_type'])","e9e1fc16":"# start with categorical DataFrame\ncategorical_df","9c727406":"# Count for Bar Chart\nproduct_line = categorical_df['product_line'].value_counts().reset_index()\n\nfig = px.bar(\n    product_line,\n    y = 'index',\n    x = 'product_line',\n    text = 'product_line',\n    color = 'index',\n    orientation = 'h'\n)\n\n# updating traces\nfig.update_traces(textposition = 'inside')\n\n#updating layout\nfig.update_layout(uniformtext_minsize = 8, \n                  xaxis_tickangle = -90,\n                  title = 'Product Line Purchases (count)',\n                  autosize = False,\n                  template = 'plotly_dark',\n                  xaxis_title = 'Count',\n                  yaxis_title = 'Product Category'\n)\n\nfig.show()","d2372a68":"index_val = categorical_df['customer_type'].cat.codes","ea8c08c7":"fig = go.Figure(data=go.Splom(\n                  dimensions=[dict(label = 'Unit Price', values = numerical_df['unit_price']),\n                            dict(label = 'Quantity', values = numerical_df['quantity']),\n                            dict(label = 'Tax 5%', values = numerical_df['tax_5%']),\n                            dict(label = 'Total', values = numerical_df['total']),\n                            dict(label = 'COGS', values = numerical_df['cogs']),\n                            dict(label = 'Gross Margin %', values = numerical_df['gross_margin_percentage']),\n                            dict(label = 'Gross Income', values = numerical_df['gross_income']),\n                            dict(label = 'Rating', values = numerical_df['rating'])],\n                  diagonal_visible = False,\n                  marker=dict(\n                              showscale = False,\n                              color ='cyan',\n                              line_color = 'black', line_width = 0.4)))","4d53f1ad":"fig.layout.update(title= 'Scatter Plot Matrix', \n                  height = 1000,\n                  width = 1000,\n                  hovermode='closest', \n                  template = 'plotly_dark')\nfig.show()","cfcdd0a4":"Data Visualization and Exploration helps us understand the relationships of our data.\nThis process helps us gain inferences.","dc892d7f":"## **Are there any missing values?**","8c958502":"What is the share of the product line.\n\n- Does the Branch\/City offer similar product line.\n\n- What is the distribution the Gender.\n\n- What are customer types, who are these member and normal.\n\n\nPayment Options:\n- Prefential payment mode by Gender\n- Prefentianl Payment by Customer type\n- Prefential Payment by City\n\n- Purchasing activity by Gender\n- Purchasing activity by Product Line","fed06a51":"Hi, thanks for checking this notebook out. I started to learn pandas and coding in general last November and this is my 1st public notebook in kaggle.\nI'm a beginner and I would highly appreciate to get some feedback on my work.","a0fb292a":"## **Concatenating Converted Categoricals and Datetime**","1cdb971d":"## **Datetime objects**","c46a0ece":"## **Enchancing DataFrame Memory Usage**","c7d8a319":"# Data Exploration (Visualization)","3df19558":" # \u267b Data Cleaning","37f8c3b4":"# Scatter Matrix (SPLOM)","2daac7d4":"## **Numerical Variables**","cd92fbb2":"--------------------------------------------------------","a74987fe":"## **Splitting Categorical and Numerical Values**","9e6f3cc9":"\ud83c\udfea\ud83d\udcca **Supermarket Exploratory Data Analysis** \n---\n\n"}}