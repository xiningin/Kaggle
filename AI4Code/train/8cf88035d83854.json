{"cell_type":{"a0c6382f":"code","98ebd68f":"code","6cefc56e":"code","854cdfe9":"code","79d59ab4":"code","36b1eec1":"code","534d16a6":"code","3200acf2":"code","9249df72":"code","7971aab1":"code","ebd325c3":"markdown","e6a13a26":"markdown","29b8e6ec":"markdown","486103df":"markdown","c97759ec":"markdown","64af1595":"markdown"},"source":{"a0c6382f":"import tensorflow as tf\ntf.__version__","98ebd68f":"from tensorflow.keras import models, layers, utils\nfrom tensorflow.keras.datasets import boston_housing\nimport numpy as np\nimport matplotlib.pyplot as plt","6cefc56e":"(train_data, train_target), (test_data, test_target) = boston_housing.load_data()\n\ntrain_data.shape, test_data.shape","854cdfe9":"mean = train_data.mean(axis=0)\ntrain_data -= mean\nstd = train_data.std(axis=0)\ntrain_data \/= std\ntest_data -= mean\ntest_data \/= std","79d59ab4":"def build_model():\n  model = models.Sequential()\n  model.add(layers.Dense(64, activation='relu', input_shape=(train_data.shape[1], )))\n  model.add(layers.Dense(64, activation='relu'))\n  model.add(layers.Dense(1))\n  model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\n  return model","36b1eec1":"k = 4\nnum_value_samples = len(train_data) \/\/ k # \/\/ returns int value and ignores values after decimal point\nnum_epochs = 500\nall_scores = []\nall_mae_history = []\nfor i in range(k):\n  print(\"Processing fold #\", i)\n  val_data = train_data[i * num_value_samples: (i + 1) * num_value_samples]\n  val_target = train_target[i * num_value_samples: (i +1) * num_value_samples]\n  partial_train_data = np.concatenate([train_data[:i * num_value_samples], train_data[(i + 1) * num_value_samples:]])\n  partial_train_targets = np.concatenate([train_target[:i * num_value_samples], train_target[(i + 1) * num_value_samples :]])\n\n  model = build_model()\n  history = model.fit(partial_train_data, partial_train_targets, epochs=num_epochs, verbose=0)\n  val_mse, val_mae = model.evaluate(val_data, val_target, verbose=0)\n  all_scores.append(val_mae)\n  mae_history = history.history['mae']\n  all_mae_history.append(mae_history)\n","534d16a6":"average_mae_history = [ np.mean([x[i] for x in all_mae_history]) for i in range(num_epochs) ]\n\nprint(\"All fold validation errors: \", all_scores)\nprint(\"mean of all fold validation errors: \", all_scores)\nprint(\"Average MAE history: \", average_mae_history)","3200acf2":"plt.plot(range(1, len(average_mae_history) + 1), average_mae_history)\nplt.xlabel('Epochs')\nplt.ylabel('Validation MAE')\nplt.show()","9249df72":"def smooth_curve(points, factor=0.9):\n  smoothed_points = []\n  for point in points:\n    if smoothed_points:\n      previous = smoothed_points[-1]\n      smoothed_points.append(previous * factor + point * (1 - factor))\n    else:\n      smoothed_points.append(point)\n  return smoothed_points\n\nsmooth_mae_history = smooth_curve(average_mae_history[10:])\n\nplt.plot(range(1, len(smooth_mae_history) + 1), smooth_mae_history)\nplt.xlabel('Epochs')\nplt.ylabel('Validation MAE')\nplt.show()","7971aab1":"#  Get a fresh, compiled model.\nmodel = build_model()\n# Train it on the entirety of the data. \nmodel.fit(train_data, train_target, epochs=80, batch_size=16, verbose=0)\ntest_mse_score, test_mae_score = model.evaluate(test_data, test_target)","ebd325c3":"## Preparing Data","e6a13a26":"## K-Fold","29b8e6ec":"## Erros","486103df":"## Plotting errors","c97759ec":"## Building Model","64af1595":"## Loading Libraries and Datasets"}}