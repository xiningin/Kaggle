{"cell_type":{"4204881d":"code","07d5c03a":"code","90628196":"code","fe300e31":"code","5c972dc6":"code","ad1a2e5f":"code","9641fdd2":"code","551d45fd":"code","6621fe2b":"code","b76a4f3c":"code","26b94dd0":"code","5c7641a5":"code","b80e2897":"code","ede9ecbc":"code","686facaa":"code","2e2ff496":"code","a9474857":"code","eeb9b7fc":"code","f1497e42":"markdown","730ec211":"markdown","a5dfa099":"markdown","0a7bdc33":"markdown","89bcd357":"markdown","78499e8e":"markdown","f63eb912":"markdown"},"source":{"4204881d":"import pandas as pd\nimport numpy as np\nimport sqlite3\nimport pandasql\nfrom pandasql import sqldf\nimport matplotlib.pyplot as plt\nimport sklearn\n\npysqldf = lambda q: sqldf(q, globals())\n\n# q = \"\"\"\n# ;\"\"\"\n# data_cleaned = pysqldf(q)\n# data_cleaned","07d5c03a":"data1 = pd.read_csv(\"..\/input\/cyclist\/data\/202004-divvy-tripdata.csv\")\ndata2 = pd.read_csv(\"..\/input\/cyclist\/data\/202005-divvy-tripdata.csv\")\ndata3 = pd.read_csv(\"..\/input\/cyclist\/data\/202006-divvy-tripdata.csv\")\ndata4 = pd.read_csv(\"..\/input\/cyclist\/data\/202007-divvy-tripdata.csv\")\ndata5 = pd.read_csv(\"..\/input\/cyclist\/data\/202008-divvy-tripdata.csv\")\ndata6 = pd.read_csv(\"..\/input\/cyclist\/data\/202009-divvy-tripdata.csv\")\ndata7 = pd.read_csv(\"..\/input\/cyclist\/data\/202010-divvy-tripdata.csv\")\ndata8 = pd.read_csv(\"..\/input\/cyclist\/data\/202011-divvy-tripdata.csv\")\ndata9 = pd.read_csv(\"..\/input\/cyclist\/data\/202012-divvy-tripdata.csv\")\ndata10 = pd.read_csv(\"..\/input\/cyclist\/data\/202101-divvy-tripdata.csv\")\ndata11 = pd.read_csv(\"..\/input\/cyclist\/data\/202102-divvy-tripdata.csv\")\ndata12 = pd.read_csv(\"..\/input\/cyclist\/data\/202103-divvy-tripdata.csv\")\ndata13 = pd.read_csv(\"..\/input\/cyclist\/data\/202104-divvy-tripdata.csv\")\ndata14 = pd.read_csv(\"..\/input\/cyclist\/data\/202105-divvy-tripdata.csv\")\ndata15 = pd.read_csv(\"..\/input\/cyclist\/data\/202106-divvy-tripdata.csv\")\ndata16 = pd.read_csv(\"..\/input\/cyclist\/data\/202107-divvy-tripdata.csv\")\ndata17 = pd.read_csv(\"..\/input\/cyclist\/data\/202108-divvy-tripdata.csv\")\ndata22 = pd.read_csv(\"..\/input\/cyclist\/data\/Divvy_Trips_2020_Q1.csv\")\n\n","90628196":"data_cleaned = pd.concat([data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17, data22])\ndata_cleaned.sort_values(by='started_at', inplace=True)","fe300e31":"data_cleaned.loc[:, 'duration'] = pd.to_datetime(data_cleaned['ended_at']) - pd.to_datetime(data_cleaned['started_at'])","5c972dc6":"print(data_cleaned.columns)","ad1a2e5f":"import math \nfrom collections import Counter\n\nn = data_cleaned['duration'].dt.seconds\nn = n.values\n\ncounter = Counter(n)\ncommon = counter.most_common()\nsorted_counter = sorted(counter.items())","9641fdd2":"# buckets = np.arange(0, 31918, 500)\n# new_counter = {}\n# for bucket in buckets:  \n#     new_counter[bucket] = 0","551d45fd":"# i = 1\n# for chunk in sorted_counter:\n#     if chunk[0] < buckets[i]:\n#         new_counter[buckets[i-1]] += chunk[1]\n#     else:\n#         i += 1\n","6621fe2b":"# Checking na vals and common traits among na vals\n\ndata_cleaned['nan'] = 0\ndata_cleaned['nan'].loc[ (data_cleaned['start_station_id'].isna() == True) | (data_cleaned['end_station_id'].isna() == True)] = 1\n","b76a4f3c":"data_eda = data_cleaned.copy()\ndata_eda.loc[:, 'duration'] = pd.to_datetime(data_eda['ended_at']) - pd.to_datetime(data_eda['started_at'])\ndata_eda = data_eda[data_eda['nan'] == True]\n\nprint(len(data_eda))\nprint('------')\nprint(data_eda['rideable_type'].value_counts())\nprint('------')\nprint(data_eda['member_casual'].value_counts())","26b94dd0":"# Number of customers in each group\ndata_desc = data_cleaned['member_casual'].describe()\n# print(d['freq']\/d['count'])\n\n# Trip duration of each group\ndata_cleaned['duration'] = pd.to_datetime(data_cleaned['ended_at']) - pd.to_datetime(data_cleaned['started_at'])\ndata_cleaned['duration'] = data_cleaned['duration'].dt.seconds\/3600\ngroup_duration = data_cleaned.groupby('member_casual')['duration'].agg('sum')\n\n# Trip number of each group\ndata_cleaned['trips'] = 1\ntrip_amt = data_cleaned.groupby('member_casual')['trips'].agg('sum')\n\n","5c7641a5":"groups = ['member', 'casual']\n\nfig = plt.figure(figsize=(18,10), dpi=1600)\n\nax1 = plt.subplot2grid((1,3),(0,0))\nplt.pie([data_desc['freq'], data_desc['count']], labels=groups, autopct='%1.2f%%')\nplt.title('Number of members vs casual customers')\n#next one\nax1 = plt.subplot2grid((1, 3), (0, 1))\nplt.pie([float(group_duration['member']), float(group_duration['casual'])], labels=groups, autopct='%1.2f%%')\nplt.title('Duration of trips for members vs casual')\n\nax1 = plt.subplot2grid((1, 3), (0, 2))\nplt.pie([float(trip_amt['member']), float(trip_amt['casual'])], labels=groups, autopct='%1.2f%%')\nplt.title('Number of trips for members vs casual')\nplt.savefig('cyclist_pie.png', bbox_inches='tight')\n# plt.show()\n","b80e2897":"from sklearn import preprocessing\npd.options.mode.chained_assignment = None\n\nstore = [data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17]\nmonths = ['April 2020', 'May 2020', 'June 2020', 'July 2020', 'August 2020', 'September 2020', 'October 2020', 'November 2020', 'December 2020', 'January 2021', 'February 2021', 'March 2021', 'April 2021', 'May 2021', 'June 2021', 'July 2021', 'August 2021']\n\ndef get_class_data(data1_times, name):\n    member_data = data1_times[data1_times['member_casual'] == name]\n    member_data.loc[:, 'hour'] = pd.to_datetime(member_data['started_at']).dt.hour\n    member_data.loc[:, 'trips'] = 1\n    member_data.loc[:, 'duration'] = member_data['duration'].dt.seconds\/3600\n    member_scatter = member_data.groupby(['hour'])['duration'].agg('sum')\n    alphas = member_data.groupby(['hour'])['trips'].agg('sum')\n    member_x = list(member_scatter.index)\n    member_y = list(member_scatter.values)\n\n    docked_bike = member_data[member_data['rideable_type'] == 'docked_bike']\n    electric_bike =  member_data[member_data['rideable_type'] == 'electric_bike']\n    classic_bike =  member_data[member_data['rideable_type'] == 'classic_bike']\n    docked_hour = docked_bike.groupby(['hour'])['rideable_type'].agg('count')\n    electric_hour = electric_bike.groupby(['hour'])['rideable_type'].agg('count')\n    classic_hour = classic_bike.groupby(['hour'])['rideable_type'].agg('count')\n    bike_df = pd.DataFrame({'docked': docked_hour, 'electric': electric_hour, 'classic': classic_hour})\n    \n    return member_x, member_y, alphas, bike_df\n\ndef create_versus_scatter(data, month, k):\n    data_times = data.drop(data.columns[[4,5,6,7,8,9,10,11]], axis=1)\n    data_times.loc[:, 'duration'] = pd.to_datetime(data_times['ended_at']) - pd.to_datetime(data_times['started_at'])\n\n    member_x, member_y, alphas_m,  bike_df_m = get_class_data(data_times, 'member')\n    casual_x, casual_y, alphas_c,  bike_df_c = get_class_data(data_times, 'casual')\n    fig, ax = plt.subplots(1)\n    ax.scatter(member_x, member_y, color='#BE4152', label='member')\n    ax.scatter(casual_x, casual_y, color='teal', label='casual')\n    ax.legend(loc='upper left')\n    ax.set_ylabel('total duration in the bike (in hours)')\n    ax.set_xlabel('hour of day')\n    ax.set_title(f'Member vs Casual bike rides for {month}')\n    plt.rcParams[\"figure.figsize\"] = (12,3)\n    ax.set_xticks(member_x)\n    ax.set_xticklabels(x_labels, rotation=45)\n\n    ax2=ax.twinx()\n    ax2.plot(member_x, alphas_m, color='#BE4152', label='total trips by member')\n    ax2.plot(member_x, alphas_c, color='teal', label='total trips by casual')\n    \n\n    if month not in ['April 2020', 'May 2020', 'June 2020', 'July 2020', 'August 2020']:\n        ax2.scatter(member_x, bike_df_m['docked'], color='#BE4152', marker='v', label='trips in docked bike', alpha=0.5)\n        ax2.scatter(member_x, bike_df_m['electric'], color='#BE4152', marker='s', label='trips in electric bike', alpha=0.5)\n        ax2.scatter(member_x, bike_df_m['classic'], color='#BE4152', marker='+', label='trips in classic bike', alpha=0.5)\n\n        ax2.scatter(member_x, bike_df_c['docked'], color='teal', marker='v', alpha=0.5)\n        ax2.scatter(member_x, bike_df_c['electric'], color='teal', marker='s', alpha=0.5)\n        ax2.scatter(member_x, bike_df_c['classic'], color='teal', marker='+', alpha=0.5)\n        \n    else:\n        ax.text(0.05, 0.4, 'only docked bikes are used this month', transform=ax.transAxes, style='italic', bbox={'facecolor': 'red', 'alpha': 0.5, 'pad': 10})\n    ax2.legend(loc='upper right')\n    ax2.set_ylabel(\"number of trips\")\n    plt.show()\n    plt.savefig(f'cyclist_{k}.png')\n\n\nx_labels = ['12am', '1am', '2am', '3am', '4am', '5am', '6am', '7am', '8am', '9am', '10am','11am', '12pm', '1pm', '2pm', '3pm', '4pm', '5pm', '6pm', '7pm', '8pm', '9pm', '10pm', '11pm']","ede9ecbc":"for k, data in enumerate(store):\n    create_versus_scatter(data, months[k], k)\n    ","686facaa":"# split the days into 4 sections and apply on each month.\nmorning = [4, 5, 6, 7, 8, 9]\nafternoon = [10, 11, 12, 13, 14, 15]\nevening = [16, 17, 18, 19, 20, 21]\nnight = [22, 23, 0, 1, 2, 3]","2e2ff496":"def create_stacked_bar(data, month):\n    data_times = data.drop(data.columns[[4,5,6,7,8,9,10,11]], axis=1)\n    data_times['duration'] = pd.to_datetime(data_times['ended_at']) - pd.to_datetime(data_times['started_at'])\n    data_times['duration'] = data_times['duration'].dt.seconds\/3600\n    data_times['hour'] = pd.to_datetime(data_times['started_at']).dt.hour\n    data_times['hour'].loc[(data_times['hour'] >= 22) | (data_times['hour'] <= 3)] = 3\n    data_times['hour'].loc[(data_times['hour'] >= 4) & (data_times['hour'] <= 9)] = 0\n    data_times['hour'].loc[(data_times['hour'] >= 10) & (data_times['hour'] <= 15)] = 1\n    data_times['hour'].loc[(data_times['hour'] >= 16) & (data_times['hour'] <= 21)] = 2\n    y = pd.DataFrame(data_times.groupby('hour')['duration'].agg(sum))\n    y.index = ['morning', 'afternoon', 'evening', 'night']\n    y = y.T\n    y.index = [month]\n    return y\n\ndef create_bar_df(data, name, y, index):\n    split_dat = split_data(data, name)\n    y = y.append(create_stacked_bar(split_dat, months[index]))\n    return y\n\ndef split_data(data, name):\n    member_data = data[data['member_casual'] == name]\n    return member_data\n\n\n\n# member data:\nmember_bar_df = pd.DataFrame()\nfor k, i in enumerate(store):\n    member_bar_df = create_bar_df(i, 'member', member_bar_df, k)\n\n# casual data:\ncasual_bar_df = pd.DataFrame()\nfor k, i in enumerate(store):\n    casual_bar_df = create_bar_df(i, 'casual', casual_bar_df, k)\n","a9474857":"import matplotlib.patches as mpatches\n\ndef plot_bar_chart(y, group_name):\n    fields = ['morning','afternoon', 'evening', 'night']\n    colors = [ 'teal', '#1D2F6F', '#8390FA', 'orange']\n\n    fig, ax = plt.subplots(1, figsize=(15, 6))\n    left = len(y) * [0]\n    for idx, name in enumerate(fields):\n        plt.bar(y.index, y[name], bottom = left, color=colors[idx])\n        left = left + y[name]\n\n    morn = mpatches.Patch(color='teal', label='morning')\n    aft = mpatches.Patch(color='#1D2F6F', label='afternoon')\n    eve = mpatches.Patch(color='#8390FA', label='evening')\n    night = mpatches.Patch(color='orange', label='night')\n\n    plt.legend(handles=[morn, aft,eve, night ])\n    plt.title(f\"monthly use of Cyclist by {group_name} group split across the day\")\n    plt.xticks(rotation=45)\n\nplot_bar_chart(member_bar_df, 'member')\nplot_bar_chart(casual_bar_df, 'casual')","eeb9b7fc":"data6['rideable_type'].value_counts()","f1497e42":"## Daily Distribution\nHow often does each customer type use Cyclist and at what times.","730ec211":"## Imports\nimporting all files\n","a5dfa099":"# Comments\n\n- Seasonal Use\n    - Bikes are used more often during the summers so price change\n- Daily use\n    - During the day, bikes are used more often during 12pm - 6pm. Change Price Accordingly\n    - The members have more trips while the casual users have more duration spent each trip. If you start having weekly\/monthly passes for casual members, you could try to move them into an annual user gradually\n- Bike Type \n    - Change\n","0a7bdc33":"## Basic EDA\nFinding the distribution of each type and how often they use Cyclist.","89bcd357":"# Casual vs Member Riders\n\n- Differences between the 2 kinds of users\n    - Who bikes more often?\n    - Are there differences in the times they bike at? (time of day; day of week; month of year)\n    - Are there differences in the rideable types?\n    - Are there differences in duration?\n    - Differences in Location?","78499e8e":"## Comparing month-to-month data for riders\nWhat times of the day do riders use Cyclist?","f63eb912":"## Further Analysis\nNew EDA -- Rideable Type"}}