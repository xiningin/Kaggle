{"cell_type":{"c479768f":"code","caea94f9":"code","659365b5":"code","304b5875":"code","e652c70c":"code","9e694a25":"code","25ceb9ad":"code","02feea91":"code","e1bdabcf":"code","ef90ea9a":"code","c5b41ea0":"code","e50dd480":"code","b488ce92":"code","48de498a":"code","eccef650":"code","b7746830":"code","f8faf02b":"code","eadbc8fd":"code","c6beff8d":"code","d62f94a7":"code","e4a6743c":"code","a5374ca9":"code","b994c110":"code","814b09a3":"markdown","5dc8835a":"markdown"},"source":{"c479768f":"#import libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom plotnine import *\n%matplotlib inline\nfrom sklearn.tree import DecisionTreeRegressor\ndf = pd.read_csv('..\/input\/Mall_Customers.csv')\nprint('info about table')\nprint(df.info())\n","caea94f9":"print('Number of rows in the dataset: ',df.shape[0])\nprint('Number of columns in the dataset: ',df.shape[1])","659365b5":"df.head()","304b5875":"df.isnull().sum()","e652c70c":"df.describe()","9e694a25":"male =len(df[df['Gender'] == 'Male'])\nfemale = len(df[df['Gender']== 'Female'])\n\nplt.figure(figsize=(10,8))\n\n# Data to plot\nlabels = 'Male','Female'\nsizes = [male,female]\ncolors = ['skyblue', 'yellow']\nexplode = (0, 0)  # explode 1st slice\n \n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,autopct='%1.1f%%',\nshadow=True, startangle=270)\n \nplt.axis('equal')\nplt.show()","25ceb9ad":"plot = df.Age.value_counts().sort_index().plot(kind = \"line\", figsize=(15,5), fontsize=13)\nplot.set_title(\"Mall customers: Age distribution\", fontsize = 20)","02feea91":"plot = df.Age.value_counts().sort_index().plot(kind = \"bar\", figsize=(15,5), fontsize = 15)\nplot.set_title(\"Mall Customers: Age distribution\", fontsize = 20)\n","e1bdabcf":"plot = df['Spending Score (1-100)'].value_counts().sort_index().plot(kind = \"bar\", figsize=(20,5), fontsize = 15)\nplot.set_title(\"Mall Customers: Spending score\", fontsize = 20)\n#Spending Score distribution","ef90ea9a":"plot = df['Spending Score (1-100)'].value_counts().sort_index().plot(kind = \"line\", figsize=(15,5), fontsize=13)\nplot.set_title(\"Mall customers: Spending Score \", fontsize = 20)\n#Spending Score distribution","c5b41ea0":"sns.distplot(df['Annual Income (k$)'],kde=False,bins=60,color='green')\n#Annual income distribution","e50dd480":"plt.figure(figsize=(15,6))\nsns.countplot(x='Annual Income (k$)',data = df, hue = 'Gender',palette='GnBu')\nplt.show()\n#Annual income distribution","b488ce92":"plt.figure(figsize=(15,6))\nsns.countplot(x='Age',data = df, hue = 'Gender',palette='GnBu')\nplt.show()\n#Age distribution","48de498a":"plt.figure(figsize=(12,9))\nsns.scatterplot(x='Spending Score (1-100)',y='Annual Income (k$)',data=df,hue='Gender')\nplt.show()","eccef650":"plt.figure(figsize=(12,9))\nsns.scatterplot(x='Spending Score (1-100)',y='Age',data=df,hue='Gender')\nplt.show()","b7746830":"plt.figure(figsize=(12,9))\nsns.scatterplot(x='Annual Income (k$)',y='Age',data=df,hue='Gender')\nplt.show()","f8faf02b":"#Trying to predict spending score\ndf['Gender'] = df['Gender'].apply({'Male':1, 'Female':2}.get)","eadbc8fd":"y = df['Spending Score (1-100)']\ndf_features = ['Gender','Age' ,'Annual Income (k$)']\nx = df[df_features]\n#Define model\ndf_model = DecisionTreeRegressor(random_state = 1)\n#Fit model\ndf_model.fit(x,y)\nprint('prediction for first five rows')\nprint(df_model.predict(x.head()))","c6beff8d":"from sklearn.metrics import mean_absolute_error\npredicted_score = df_model.predict(x)\nMAE = mean_absolute_error(y,predicted_score)\nprint('mean absolute error is '  + str(MAE))","d62f94a7":"from sklearn.model_selection import train_test_split\ntrain_x, val_x, train_y, val_y = train_test_split(x,y,random_state=0)","e4a6743c":"df_mod = DecisionTreeRegressor()\ndf_mod.fit(train_x, train_y)\nscore_predictions = df_mod.predict(val_x)\nMAE = mean_absolute_error(val_y,score_predictions)\nprint('mean absolute error is '  + str(MAE))","a5374ca9":"def get_mae(max_leaf_nodes, train_x, val_x, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_x,train_y)\n    pred_val = model.predict(val_x)\n    MAE = mean_absolute_error(val_y, pred_val)\n    return(MAE)\nfor max_leaf_nodes in [5,50,75,77,80,100,500,1000,2500,5000,10000,1000000]:\n    my_mae=get_mae(max_leaf_nodes,train_x,val_x,train_y,val_y)\n    print('Max leaf node = ' + str(max_leaf_nodes) + '; MAE = ' + str(my_mae))","b994c110":"from sklearn.ensemble import RandomForestRegressor\nforest_model = RandomForestRegressor(random_state = 1)\nforest_model.fit(train_x,train_y)\ndf_pred = forest_model.predict(val_x)\nprint(mean_absolute_error(val_y,df_pred))","814b09a3":"Random forest model","5dc8835a":"There are no null values in the dataset"}}