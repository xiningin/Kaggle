{"cell_type":{"5173aae4":"code","2946ee6f":"code","c0fba31c":"code","9ec883fc":"code","50707194":"code","2fd9688f":"code","09c3d556":"code","5ad4bb18":"code","9d1e4865":"code","085b9f9d":"code","9fc7678d":"code","bc496aad":"code","a8f5a46f":"code","a1c3f7ad":"code","58b76c80":"code","ce6c2b7f":"code","db514328":"code","984f3252":"code","616445eb":"code","620c11b2":"code","caa8a8c1":"code","d82ec05c":"code","5e4086a9":"code","97030b47":"code","ce95adfd":"code","3921e304":"code","0971d741":"code","d375a901":"markdown","51f15a0a":"markdown","b0d2c8ae":"markdown","9fab8575":"markdown","fc3ae137":"markdown","22554244":"markdown","359bb5c7":"markdown"},"source":{"5173aae4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2946ee6f":"from tensorflow.keras.datasets import mnist\nimport numpy as np","c0fba31c":"(x_train,y_train),(x_valid,y_valid)=mnist.load_data()","9ec883fc":"x_train.shape","50707194":"x_valid.shape","2fd9688f":"x_train.min()","09c3d556":"x_train.max()","5ad4bb18":"x_train.dtype","9d1e4865":"x_train[0]","085b9f9d":"import matplotlib.pyplot as plt\nimage=x_train[0]\nplt.imshow(image,cmap='gray')","9fc7678d":"y_train[0]","bc496aad":"x_train=x_train.reshape(60000,784)\nx_valid=x_valid.reshape(10000,784)","a8f5a46f":"x_train.shape","a1c3f7ad":"x_valid.shape","58b76c80":"x_train=x_train\/255\nx_valid=x_valid\/255","ce6c2b7f":"x_train.max()","db514328":"x_train.min()","984f3252":"import tensorflow.keras as keras\nnum_categories=10\ny_train=keras.utils.to_categorical(y_train,num_categories)\ny_valid=keras.utils.to_categorical(y_valid,num_categories)","616445eb":"y_train[0:9]","620c11b2":"from tensorflow.keras.models import Sequential\nmodel=Sequential()","caa8a8c1":"from tensorflow.keras.layers import Dense","d82ec05c":"model.add(Dense(units=512,activation='relu',input_shape=(784,)))","5e4086a9":"model.add(Dense(units=512,activation='relu'))","97030b47":"model.add(Dense(units=10,activation='softmax'))","ce95adfd":"model.summary()","3921e304":"model.compile(loss='categorical_crossentropy',metrics=['accuracy'])","0971d741":"history=model.fit(x_train,y_train,epochs=5,verbose=1,validation_data=(x_valid,y_valid)\n                 )","d375a901":"# Data Modelling","51f15a0a":"## Adding layers for neuralnetworks training","b0d2c8ae":"Reshaping the image from 2d to 1d","9fab8575":"# Import Required Libraries","fc3ae137":"Splitting the Data into training and validation set","22554244":"Normalizing the Data","359bb5c7":"# Encoding the data"}}