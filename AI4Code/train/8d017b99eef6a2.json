{"cell_type":{"b10400b1":"code","6dc9e696":"code","7e55a3da":"code","3393a5de":"code","a1f957fe":"code","3c881800":"code","e8db4d1b":"code","980c1f85":"code","fa7b4334":"code","53772d17":"code","fda11dd1":"code","8127bb08":"code","c384e894":"code","add1a0b6":"code","11acaed0":"code","2d3d77b2":"code","2ce6d1b7":"code","2cbcc390":"code","248aea94":"code","e08a8668":"code","610e207a":"code","065696d6":"code","b68ca354":"code","c6d921b5":"code","b10811fa":"code","01242e38":"code","16a0ac55":"code","31d961ed":"code","0d68f964":"code","0faf3df5":"code","5263f8c5":"code","66e3020f":"code","adc95175":"code","92c27abd":"code","6a1b89ec":"code","2cb5bd25":"code","f69542b0":"code","2929b55e":"code","ebe03a7c":"code","43d35aa2":"code","951d444a":"code","9d1c5bea":"code","d5b8f80d":"code","24203bec":"code","03516f7e":"code","716a7e5d":"code","73ee64dd":"code","a3a66fc1":"code","08c14e37":"code","29326a54":"code","ca5121a6":"code","cfda8703":"code","1178b9b4":"markdown","aacba0ab":"markdown","053c0a89":"markdown","152aebcf":"markdown","62a22e65":"markdown","bb5b2a0c":"markdown","84956a18":"markdown","55ba30bb":"markdown","5e24151f":"markdown","d590e849":"markdown","5d492372":"markdown","1afd9a77":"markdown","925da723":"markdown","37794389":"markdown","c81c0e7b":"markdown","2060ad6e":"markdown","eef2067c":"markdown","744cf55d":"markdown","69025576":"markdown","3f8a0c26":"markdown","1e0399f0":"markdown","ec6bf52a":"markdown","ab5e40a0":"markdown","37432038":"markdown","c3f41222":"markdown","ed4c5473":"markdown","cee03ac3":"markdown","c47b408f":"markdown","96fb959f":"markdown","2293e131":"markdown"},"source":{"b10400b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n\n# Any results you write to the current directory are saved as output.","6dc9e696":"import sqlite3\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","7e55a3da":"con = sqlite3.connect('..\/input\/database.sqlite')\ncursor = con.cursor()\ntable_names = cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\nprint(cursor.fetchall())","3393a5de":"player_table = pd.read_sql_query(\"SELECT * FROM Player\", con)\nplayer_att_table = pd.read_sql_query(\"SELECT * FROM Player_Attributes\", con)\nmatch_table = pd.read_sql_query(\"SELECT * FROM Match\", con)\nleague_table = pd.read_sql_query(\"SELECT * FROM League\", con)\ncountry_table = pd.read_sql_query(\"SELECT * FROM Country\", con)\nteam_table = pd.read_sql_query(\"SELECT * FROM Team\", con)\nteam_att_table = pd.read_sql_query(\"SELECT * FROM Team_Attributes\", con)","a1f957fe":"print(\"Dimension of Country Table is: {}\".format(country_table.shape))\nprint(100*\"*\")\nprint(country_table.info())\nprint(100*\"*\")\nprint(country_table.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(country_table.describe())\nprint(100*\"*\")\nprint(country_table.isnull().sum(axis=0))","3c881800":"country_table","e8db4d1b":"print(\"Dimension of League Table is: {}\".format(league_table.shape))\nprint(100*\"*\")\nprint(league_table.info())\nprint(100*\"*\")\nprint(league_table.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(league_table.describe())\nprint(100*\"*\")\nprint(league_table.isnull().sum(axis=0))","980c1f85":"league_table","fa7b4334":"print(\"Dimension of Player Table is: {}\".format(player_table.shape))\nprint(100*\"*\")\nprint(player_table.info())\nprint(100*\"*\")\nprint(player_table.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(player_table.describe())\nprint(100*\"*\")\nprint(player_table.isnull().sum(axis=0))\n#Player table has no missing data","53772d17":"fig1, ax1 = plt.subplots(nrows = 1, ncols = 2)\nfig1.set_size_inches(14,4)\nsns.boxplot(data = player_table.loc[:,[\"height\",'weight']], ax = ax1[0])\nax1[0].set_xlabel('Player Table Features')\nax1[0].set_ylabel('')\nsns.distplot(a = player_table.loc[:,[\"height\"]], bins= 10, kde = True, ax = ax1[1], \\\n            label = 'Height')\nsns.distplot(a = player_table.loc[:,[\"weight\"]], bins= 10, kde = True, ax = ax1[1], \\\n            label = 'Weight')\nax1[1].legend()\nsns.jointplot(x='height',y = 'weight',data = player_table,kind = 'scatter')\nfig1.tight_layout()","fda11dd1":"print(\"Cardinality of Feature: Height - {:0.3f}%\".format( \\\n        100 * (len(np.unique(player_table.loc[:,'height'])) \/ len(player_table.loc[:,'height']))))\nprint(\"Cardinality of Feature: Weight - {:0.3f}%\".format( \\\n        100 * (len(np.unique(player_table.loc[:,'weight'])) \/ len(player_table.loc[:,'weight']))))","8127bb08":"print(\"Dimension of Player Attributes Table is: {}\".format(player_att_table.shape))\nprint(100*\"*\")\nprint(player_att_table.info())\nprint(100*\"*\")\nprint(player_att_table.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(player_att_table.describe())\nprint(100*\"*\")\nprint(player_att_table.isnull().sum(axis=0))\n#Player Attributes Table has some missing data","c384e894":"np.unique(player_att_table.dtypes.values)","add1a0b6":"player_att_table.select_dtypes(include =['float64','int64']).head().\\\nloc[:,player_att_table.select_dtypes(include =['float64','int64']).columns[3:]].head()","11acaed0":"corr2 = player_att_table.select_dtypes(include =['float64','int64']).\\\nloc[:,player_att_table.select_dtypes(include =['float64','int64']).columns[3:]].corr()","2d3d77b2":"fig2,ax2 = plt.subplots(nrows = 1,ncols = 1)\nfig2.set_size_inches(w=24,h=24)\nsns.heatmap(corr2,annot = True,linewidths=0.5,ax = ax2)","2ce6d1b7":"fig3, ax3 = plt.subplots(nrows = 1, ncols = 3)\nfig3.set_size_inches(12,4)\nsns.countplot(x = player_att_table['preferred_foot'],ax = ax3[0])\nsns.countplot(x = player_att_table['attacking_work_rate'],ax = ax3[1])\nsns.countplot(x = player_att_table['defensive_work_rate'],ax = ax3[2])\nfig3.tight_layout()","2cbcc390":"print(player_att_table['attacking_work_rate'].value_counts())\nprint(100*'*')\nprint(player_att_table['defensive_work_rate'].value_counts())\nprint(100*'*')\nprint(player_att_table.shape)","248aea94":"player_att_table.loc[~(player_att_table['attacking_work_rate'].\\\n                                                  isin(['medium','high','low'])\\\n                       | player_att_table['defensive_work_rate'].isin(['medium','high','low'])),:].head()","e08a8668":"player_att_table_updated1 = player_att_table.loc[(player_att_table['attacking_work_rate'].\\\n                                                  isin(['medium','high','low'])\\\n                       & player_att_table['defensive_work_rate'].isin(['medium','high','low'])),:]\nprint(player_att_table_updated1.shape)\nplayer_att_table_updated1.head()","610e207a":"fig4, ax4 = plt.subplots(nrows = 1, ncols = 3)\nfig4.set_size_inches(12,3)\nsns.countplot(x = player_att_table_updated1['preferred_foot'],ax = ax4[0])\nsns.countplot(x = player_att_table_updated1['attacking_work_rate'],ax = ax4[1])\nsns.countplot(x = player_att_table_updated1['defensive_work_rate'],ax = ax4[2])\nfig4.tight_layout()","065696d6":"fig4, ax4 = plt.subplots(nrows = 1, ncols = 3)\nfig4.set_size_inches(12,3)\nsns.barplot(x ='preferred_foot', y = 'preferred_foot', data = player_att_table_updated1,\\\n            estimator = lambda x: len(x)\/len(player_att_table_updated1) * 100, ax = ax4[0],\\\n           orient = 'v')\nax4[0].set(ylabel = 'Percentage',title = 'Preferred Foot')\nsns.barplot(x ='attacking_work_rate', y = 'attacking_work_rate', data = player_att_table_updated1,\\\n            estimator = lambda x: len(x)\/len(player_att_table_updated1) * 100, ax = ax4[1],\\\n           orient = 'v')\nax4[1].set(ylabel = 'Percentage',title = 'Attacking Work Rate')\nsns.barplot(x ='defensive_work_rate', y = 'defensive_work_rate', data = player_att_table_updated1,\\\n            estimator = lambda x: len(x)\/len(player_att_table_updated1) * 100, ax = ax4[2],\\\n           orient = 'v')\nax4[2].set(ylabel = 'Percentage',title = 'Defensive Work Rate')\nfig4.tight_layout()","b68ca354":"att_work_rate = player_att_table_updated1.groupby('attacking_work_rate').size().values.tolist()\ndef_work_rate = player_att_table_updated1.groupby('defensive_work_rate').size().values.tolist()","c6d921b5":"print(\"Attacking work rate factor, Medium, accounts for: {:0.3f}% of features\".format(100 * att_work_rate[2]\/np.sum(att_work_rate)))\nprint(\"Defensive work rate factor, Medium, accounts for: {:0.3f}% of features\".format(100 * def_work_rate[2]\/np.sum(def_work_rate)))","b10811fa":"print(\"Percentage of instances removed from player attributes table: {:0.2f}%\".\\\n      format(100* (1 - player_att_table_updated1.shape[0]\/player_att_table.shape[0])))\nprint(\"We removed {} instances from Player Attributes table\".\\\n      format(-player_att_table_updated1.shape[0] + player_att_table.shape[0]))","01242e38":"print(\"Dimension of Player Attributes Table Updated 1 is: {}\".format(player_att_table_updated1.shape))\nprint(100*\"*\")\nprint(player_att_table_updated1.info())\nprint(100*\"*\")\nprint(player_att_table_updated1.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(player_att_table_updated1.describe())\nprint(100*\"*\")\nprint(player_att_table_updated1.isnull().sum(axis=0))\n#No more missing data","16a0ac55":"pat = player_att_table_updated1.loc[:,player_att_table_updated1.columns.tolist()[3:]]","31d961ed":"fig5, ax5 = plt.subplots(nrows=5,ncols=7)\nfig5.set_size_inches(16,12)\nfor i,j in enumerate(player_att_table_updated1.select_dtypes(include = ['float64','int64']).columns[3:].tolist()):\n    sns.distplot(pat.loc[:,j],kde = False,hist = True, ax = ax5[int(i\/7)][i%7])\nfig5.tight_layout()","0d68f964":"fig6, ax6 = plt.subplots(nrows=5,ncols=7)\nfig6.set_size_inches(16,12)\nfor i,j in enumerate(player_att_table_updated1.select_dtypes(include = ['float64','int64']).columns[3:].tolist()):\n    sns.boxplot(x = \"preferred_foot\", y = j, data= pat, ax = ax6[int(i\/7)][i%7])\nfig6.tight_layout()","0faf3df5":"fig7, ax7 = plt.subplots(nrows=5,ncols=7)\nfig7.set_size_inches(16,12)\nfor i,j in enumerate(player_att_table_updated1.select_dtypes(include = ['float64','int64']).columns[3:].tolist()):\n    sns.boxplot(x = \"attacking_work_rate\", y = j, data= pat, ax = ax7[int(i\/7)][i%7])\nfig7.tight_layout() ","5263f8c5":"fig8, ax8 = plt.subplots(nrows=5,ncols=7)\nfig8.set_size_inches(16,12)\nfor i,j in enumerate(player_att_table_updated1.select_dtypes(include = ['float64','int64']).columns[3:].tolist()):\n    sns.boxplot(x = \"defensive_work_rate\", y = j, data= pat, ax = ax8[int(i\/7)][i%7])\nfig8.tight_layout()","66e3020f":"print(\"Dimension of Team Table is: {}\".format(team_table.shape))\nprint(100*\"*\")\nprint(team_table.info())\nprint(100*\"*\")\nprint(team_table.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(team_table.describe())\nprint(100*\"*\")\nprint(team_table.isnull().sum(axis=0))","adc95175":"team_table[team_table.loc[:,'team_fifa_api_id'].isnull()]","92c27abd":"team_table_updated = team_table[~team_table.loc[:,'team_fifa_api_id'].isnull()]","6a1b89ec":"print(\"Dimension of Team Table Updated is: {}\".format(team_table_updated.shape))\nprint(100*\"*\")\nprint(team_table_updated.info())\nprint(100*\"*\")\nprint(team_table_updated.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(team_table_updated.describe())\nprint(100*\"*\")\nprint(team_table_updated.isnull().sum(axis=0))\nprint(100*\"*\")\nprint(team_table_updated.select_dtypes(exclude=['float64','int64']).apply(lambda x: len(x.unique().tolist()),axis = 0))","2cb5bd25":"print(len(team_table_updated['team_long_name'].unique().tolist()),\\\n      len(team_table_updated['team_short_name'].unique().tolist()))","f69542b0":"my_team = dict()\nfor i,j in list(team_table_updated.iloc[:,3:].groupby('team_short_name')):\n    my_team[i] = j.iloc[:,0].values.tolist()","2929b55e":"{k:v for k,v in my_team.items() if len(v) > 1}\n#List of teams with similar short team names","ebe03a7c":"print(\"Dimension of Team Attributes Table is: {}\".format(team_att_table.shape))\nprint(100*\"*\")\nprint(team_att_table.info())\nprint(100*\"*\")\nprint(team_att_table.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(team_att_table.describe())\nprint(100*\"*\")\nprint(team_att_table.isnull().sum(axis=0))","43d35aa2":"team_att_table.loc[team_att_table['buildUpPlayDribbling'].isnull(),:].head()","951d444a":"team_att_table.loc[~team_att_table['buildUpPlayDribbling'].isnull(),:].head()","9d1c5bea":"team_att_table_updated1 = team_att_table.drop(['buildUpPlayDribbling'],axis = 1)\nprint(\"Dimension of Team Attributes Table updated is: {}\".format(team_att_table_updated1.shape))\nprint(100*\"*\")\nprint(team_att_table_updated1.info())\nprint(100*\"*\")\nprint(team_att_table_updated1.select_dtypes(exclude=['float64','int64']).describe())\nprint(100*\"*\")\nprint(team_att_table_updated1.describe())\nprint(100*\"*\")\nprint(team_att_table_updated1.isnull().sum(axis=0))","d5b8f80d":"tat = team_att_table_updated1.loc[:,team_att_table_updated1.columns.tolist()[3:]]","24203bec":"sns.pairplot(tat)\n#Little to no correlation beween any of the continuous features","03516f7e":"fig9, ax9 = plt.subplots(nrows=2,ncols=4)\nfig9.set_size_inches(12,6)\nfor i,j in enumerate(team_att_table_updated1.select_dtypes(include = ['int64']).columns[3:].tolist()):\n    sns.distplot(tat.loc[:,j],kde =True,hist = True, ax = ax9[int(i\/4)][i%4])\nfig9.tight_layout()","716a7e5d":" team_att_table_updated1.select_dtypes(include = ['int64']).head()","73ee64dd":"sns.boxplot(data = team_att_table_updated1.select_dtypes(include = ['int64']).iloc[:,3:],\\\n           orient = 'h')","a3a66fc1":"fig9, ax9 = plt.subplots(nrows=3,ncols=4)\nfig9.set_size_inches(14,8)\nfor i,j in enumerate(team_att_table_updated1.select_dtypes(include = ['object']).columns[1:].tolist()):\n    #sns.countplot(tat.loc[:,j], ax = ax9[int(i\/4)][i%4])\n    sns.barplot(x = j, y = j, data = tat,\\\n            estimator = lambda x: len(x)\/len(tat) * 100, ax = ax9[int(i\/4)][i%4],\\\n           orient = 'v')\n    ax9[int(i\/4)][i%4].set(xlabel = \"\")\nfig9.tight_layout()","08c14e37":"tat.select_dtypes(include = ['int64']).columns.tolist()","29326a54":"sns.pairplot(tat,hue = tat.select_dtypes(include = ['object']).\\\n          columns.tolist()[1]) ","ca5121a6":"sns.pairplot(tat,hue = tat.select_dtypes(include = ['object']).\\\n          columns.tolist()[12]) ","cfda8703":"fig9, ax9 = plt.subplots(nrows=2,ncols=4)\nfig9.set_size_inches(12,6)\nfor i,j in enumerate(team_att_table_updated1.select_dtypes(include = ['int64']).columns[3:].tolist()):\n    sns.boxplot(data = tat, y = j, x = tat.select_dtypes(include = ['object']).columns[3],\\\n                                                      ax = ax9[int(i\/4)][i%4])\nfig9.tight_layout()","1178b9b4":"Preferred Foot does not distinguish any of the variables. Distribution of features the same regardless of preferred foot","aacba0ab":">### <a id='analyze-team-table'><\/a> Analyzing Team Table ","053c0a89":"Only attribute \"buildUpPlayDribbling\" has missing values.Look into it. See if other variables at NA instance are strange","152aebcf":"None of the continuous features are normaly distributted or appear to follow exponential family distributions. Multimodal maybe?","62a22e65":"Analyze distribution and spead of continuous features based off of categorical features. Do the levels of each categorical features drastically change the distribution \/ spead of the continuous features?","bb5b2a0c":"Very low cardinality for continuous variable for both the weight and height features considering we have 11060 instances. As expected instances from both the weight and height features follow a normal distribution and follow a linear relationship. ","84956a18":"The purpose of this kernel is to perform data analytics and visualization of the data from the soccer database: https:\/\/www.kaggle.com\/hugomathien\/soccer. Once completed, a second kernel will be completed in an attempt to predict the winner of soccer games based off the league, teams and results availabe in the data. ","55ba30bb":"### <a id='analyze-player-table'><\/a>Analyzing Player Table","5e24151f":"Read all sql tables into data frames to be analyzed. ","d590e849":"Analyze the correlation between the continuous features. We should see a positive correlation between the attacking features, a positive correlation between the defensive features and a negative correlation between the attacking and defensive features.  ","5d492372":"The levels for both the attacking work rate and defensive work rate cateorical features should be 'low', 'medium', and 'high'. Note that they also account for the majority of instances. The remaining of the levels do not make sense so remove the instances that contain them. ","1afd9a77":"Attacking work rate does a better job (better than preferred foot) of separating the features but not in a significant manner. Note that it does do a decent job of separating instances with high and low attacking work rate. Also remember that for attacking work rate feature, the factor, Medium', accounts for 70% of the instances. From closer examination, it appears that for features related to atacking attributes, attacking work rate feature does a good job of distinguishing instances of high and low categorical values. ","925da723":"### <a id='league'><\/a> Analyzing League Table","37794389":"Use all features in Player Attributes Updated table? Use Principal Component Analysis to reduce number of features in this table? Use only overall rating since this number is an accumulation of all other features for each player? Do not use any features? Will look into it in second kernel for prediction. ","c81c0e7b":"### <a id='conclusion'><\/a> Conclusion","2060ad6e":"## <a id='import'><\/a> Import and load data","eef2067c":"# Table of Contents\n* [Import and load data](#import)\n* [Data Analysis and Visualization](#data-analysis-and-viz) \n    * [Analyzing Country Table](#country)\n    * [Analyzing League Table](#league)\n    * [Analyzing Player Table](#analyze-player-table)\n    * [Analyzing Player Attributes Table](#analyze-player-att-table)\n    * [Analyzing Team Table](#analyze-team-table)\n    * [Analyzing Team Attributes Table](#analyze-team-att-table)\n    * [Conclusion](#conclusion)","744cf55d":"Does not seem to be related to the other featues and more than 50% of the features are missing. In order to not skew data, drop feaure from dataset and continue analyzing the rest","69025576":"### <a id='analyze-player-att-table'><\/a> Analyzing Player Attributes Table","3f8a0c26":"Similar to attacking work rate, defensive work rate does a better job (better than preferred foot) of separating the features but not in a significant manner. Note that it does do a decent job of separating instances with high and low defensive work rate values for certain features. Also remember that for attacking work rate feature, the factor, Medium', accounts for 70% of the instances. From closer examination, it appears that for features related to defensive attributes, defensive work rate feature does a good job of distinguishing instances of high and low categorical values. ","1e0399f0":"When build up play speed is plotted versus the remaining features, build up play speed class appears to perfectly distinguish the plot into sections. This makes sense because as build up play increases in value, the categorical feature of the observation changes from slow to balanced to fast. Most likely, the build up play speed variable was cut into three different and distinct regions, creating the build up play speed class. Either feature can be used (build up play speed or build up play speed class for prediction) but not both since they represent the same thing. Same principle applies for:\n* Build up play speed\n* Build up play passing\n* Chance creation passing\n* Chance creation crossing\n* Chance creation shooting\n* Defense pressure\n* Defense aggression\n* Defense team width\n\nAs for the remaining continuous features, the remaining categorical variables do a poor job of separating\/clustering the data. See below for an example","ec6bf52a":"### <a id='country'><\/a> Analyzing Country Table","ab5e40a0":"## Introduction","37432038":"Figure out which columns have strange attacking and defensive work rate. Is there a correlation between attacking and defensive work rate values? If one is strange, is the other strange? ","c3f41222":"Analyzing the league, country, player, player attributes, team and team atributes tables gave a better understanding of the data. Once the respective features are joined and merged with the match table, machine learning algorithms can be used to predict the winner of the future soccer matches in the european league. This kernel also allows for the opportunity to practice using the seaborn library and visualizing the data.   ","ed4c5473":"### <a id='analyze-team-att-table'><\/a> Analyzing Team Attributes Table","cee03ac3":"## <a id='data-analysis-and-viz'><\/a> Data Analysis and Visualization ","c47b408f":"Data is available only for the european leagues. Note that top 5 leaguesa are: Ligue 1, Bundesliga, Serie A, Premier League and LIGA BBVA","96fb959f":"Boxplots, as displayed above, also confirm the fact that some continuous and categorical features are duplicates of each other since the categorical features do an amazing job of separating its respective continuous feature","2293e131":"Percentage of rows eliminated due to invalid\/strange attacking and defensive work rate values:"}}