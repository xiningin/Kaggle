{"cell_type":{"47d57b1d":"code","300b2d50":"code","8be32b86":"code","03945117":"code","66ae8ed2":"code","fc81f4c5":"code","fbe9395c":"code","a64b0370":"code","ae4e97ce":"code","60977669":"code","eab2d468":"code","23184d02":"code","12753b5b":"code","95b47efe":"code","62b081ab":"code","a5859bac":"code","1e6422c4":"code","c88f5944":"code","2eefc803":"code","fc965af5":"code","f1472b2a":"code","443a9cae":"code","dac7acf0":"code","b6656730":"code","f36c222d":"code","792c6d72":"code","d7a757a7":"code","036f3d26":"code","cc10eb02":"code","6dc65960":"code","28b30700":"code","891cdb05":"markdown","06e36637":"markdown"},"source":{"47d57b1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import Lasso\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","300b2d50":"#read the training data\n# train_df =  pd.read_csv('..\/input\/train.csv', nrows = 10_000_000)\ntrain_df =  pd.read_csv('..\/input\/train.csv', nrows = 10_000_000)\n","8be32b86":"train_df['pickup_datetime'] = train_df['pickup_datetime'].str.slice(0, 16)\ntrain_df['pickup_datetime'] = pd.to_datetime(train_df['pickup_datetime'], utc=True, format='%Y-%m-%d %H:%M')","03945117":"train_df.head()","66ae8ed2":"train_df.loc[:,('dropoff_longitude','pickup_longitude')].head()","fc81f4c5":"print(train_df.dropoff_longitude[:2])","fbe9395c":"print(train_df.isnull().sum())","a64b0370":"train_df = train_df[train_df.fare_amount>=0]\n","ae4e97ce":"#Remove NaN from dataset\nprint('Old size %d'% len(train_df))","60977669":"train_df = train_df.dropna(how = 'any', axis = 'rows')\nprint('New size: %d' % len(train_df))","eab2d468":"#change add_traval_vector_features to calculate distance using  Haversine \n# def add_travel_vector_features(df):\n#     df['abs_diff_longitude'] = (df.dropoff_longitude - df.pickup_longitude).abs()\n#     df['abs_diff_latitude'] = (df.dropoff_latitude - df.pickup_latitude).abs()\n\n# add_travel_vector_features(train_df)\ndef distance(df):\n    p = 0.017453292519943295     #Pi\/180\n    a = 0.5 - np.cos((df.dropoff_latitude - df.pickup_latitude) * p)\/2 + np.cos(df.pickup_latitude * p) * np.cos(df.dropoff_latitude * p) * (1 - np.cos((df.dropoff_longitude - df.pickup_longitude) * p)) \/ 2\n#     return 12742 * asin(sqrt(a)) #2*R*asin...\n    df['distance_miles'] = 0.6213712 * 12742 * np.arcsin(np.sqrt(a))\ndistance(train_df)","23184d02":"# plot = train_df.iloc[:2000].plot.scatter('abs_diff_longitude', 'abs_diff_latitude')","12753b5b":"# print('Old size: %d' % len(train_df))\n# train_df = train_df[(train_df.abs_diff_longitude < 5.0) & (train_df.abs_diff_latitude < 5.0)]\n# print('New size: %d' % len(train_df))","95b47efe":"train_df = train_df[(train_df.distance_miles < 345)]","62b081ab":"\n# Removing observations with erroneous values\nmask = train_df['pickup_longitude'].between(-75, -73)\nmask &= train_df['dropoff_longitude'].between(-75, -73)\nmask &= train_df['pickup_latitude'].between(40, 42)\nmask &= train_df['dropoff_latitude'].between(40, 42)\nmask &= train_df['passenger_count'].between(0, 8)\nmask &= train_df['fare_amount'].between(0, 250)\n\ntrain_df = train_df[mask]\n\n","a5859bac":"train_df['hour'] = train_df.pickup_datetime.apply(lambda t: pd.to_datetime(t).hour)\ntrain_df['year'] = train_df.pickup_datetime.apply(lambda t: pd.to_datetime(t).year)","1e6422c4":"# Get input matrix\ndef get_input_matrix(df):\n    return np.column_stack((df.year,df.hour,df.distance_miles,df.passenger_count, np.ones(len(df))))\n\n","c88f5944":"#X_train= get_input_matrix(train_df)\n#y_train = np.array(train_df['fare_amount'])\n\n#print(X_train.shape)\n#print(y_train.shape)\nX = get_input_matrix(train_df)\ny = np.array(train_df['fare_amount'])\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\n\n# Create training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)\n# Create the regressor: reg_all\nreg_all = LinearRegression()\ncv_scores = cross_val_score(reg_all,X,y,cv=5)\n# Fit the regressor to the training data\nreg_all.fit(X_train, y_train)\n# Predict on the test data: y_pred\ny_pred = reg_all.predict(X_test)\n\nprint(\"R^2: {}\".format(reg_all.score(X_test, y_test)))\nrmse = np.sqrt(mean_squared_error(y_test , y_pred))\nprint(\"Root Mean Squared Error: {}\".format(rmse))\n\n# Print the 5-fold cross-validation scores\nprint(cv_scores)\n\nprint(\"Average 5-Fold CV Score: {}\".format(np.mean(cv_scores)))\n\n","2eefc803":"train_df.columns.values","fc965af5":"df_columns = pd.Index([  'pickup_longitude',\n       'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude',\n       'passenger_count', 'distance_miles','hour','year'])","f1472b2a":"df_columns","443a9cae":"#Find the most important variable\n# Instantiate a lasso regressor: lasso\nX_all_feature = np.column_stack((train_df.pickup_longitude,train_df.pickup_latitude,train_df.dropoff_longitude,\n                    train_df.dropoff_latitude,train_df.passenger_count,train_df.distance_miles,train_df.hour,train_df.year))\nX_all_feature","dac7acf0":"lasso = Lasso(alpha=0.1)\n\n# Fit the regressor to the data\nlasso.fit(X_all_feature,y)\n\n# Compute and print the coefficients\nlasso_coef = lasso.coef_\nprint(lasso_coef)\n\n# Plot the coefficients\nplt.plot(range(len(df_columns)), lasso_coef)\nplt.xticks(range(len(df_columns)), df_columns.values, rotation=60)\nplt.margins(0.02)\nplt.show()","b6656730":"test_df = pd.read_csv('..\/input\/test.csv')\ntest_df.dtypes","f36c222d":"# Reuse the above helper functions to add our features and generate the input matrix.\n# add_travel_vector_features(test_df)\ndistance(test_df)\ntest_df['hour'] = test_df.pickup_datetime.apply(lambda t: pd.to_datetime(t).hour)\ntest_df['year'] = test_df.pickup_datetime.apply(lambda t: pd.to_datetime(t).year)\ntest_X = get_input_matrix(test_df)\n","792c6d72":"# Predict fare_amount on the test set using our model (w) trained on the training set.\n# test_y_predictions = np.matmul(test_X, w_OLS).round(decimals = 2)\ntest_y_predictions = reg_all.predict(test_X)","d7a757a7":"test_y_predictions","036f3d26":"\n# Write the predictions to a CSV file which we can submit to the competition.\nsubmission = pd.DataFrame(\n    {'key': test_df.key, 'fare_amount': test_y_predictions},\n    columns = ['key', 'fare_amount'])\nsubmission.to_csv('submission.csv', index = False)\n\nprint(os.listdir('.'))","cc10eb02":"test_y_predictions[:200]","6dc65960":"data = pd.read_csv('submission.csv')","28b30700":"data","891cdb05":"**Regularization lasso**","06e36637":"****5 fold cross validation****"}}