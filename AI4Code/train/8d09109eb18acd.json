{"cell_type":{"8f5886ce":"code","d487b5cb":"code","6ff77ab1":"code","8869e02e":"code","67264da1":"code","8c1f6f50":"code","fb68b936":"code","45cc6b0d":"code","3dc08ff0":"code","365c455e":"code","b0ecb269":"code","6a038f5d":"code","7212bb52":"code","f9f85518":"code","94043f09":"code","cbad61bb":"code","092b4a09":"code","f3030a29":"code","df04b7ef":"code","ac8b5f4e":"code","fc447709":"code","6f084156":"code","2093984a":"code","b542b245":"code","de5e43ce":"code","7c7071dc":"code","24a98943":"code","cc5b681c":"code","2ffc284a":"code","abca3eb7":"code","560fa1fe":"code","74487173":"code","56738043":"code","cadbc487":"code","1c9e8bbb":"code","2a4d192f":"code","6e294c08":"code","d0eb1c19":"code","f78d4bbd":"code","d4d4516b":"code","4d9c030c":"code","2169e0d8":"code","1efb101d":"code","fa83fe2f":"code","7e791bfd":"code","4012f212":"code","18081f92":"code","7f18155d":"code","c91352c7":"code","ea68b583":"code","a9a0c223":"code","dcfef5ca":"code","95fcdbf9":"code","583d44b0":"code","8c6dd54a":"code","68278c15":"code","33393c56":"code","4daf5dbe":"code","8767a570":"code","a13222ec":"code","a48873ac":"code","bfbc1393":"code","73f6e82c":"code","bd05d734":"code","0054947c":"code","6e573b98":"code","4a0cee78":"code","34ecb69a":"code","762d12a2":"code","926e1e30":"code","1ec98dc8":"code","ef35ad13":"code","37f4afe6":"code","1849eadb":"code","579782c9":"code","16831ae2":"code","d7e4d69e":"code","d2096428":"code","dab67de7":"code","7071847a":"code","049dadd1":"code","e44530f1":"code","87954ed8":"code","8cc5d82d":"code","354dca3a":"code","62f7743c":"code","cfa96a08":"code","696a67cc":"code","b04eeece":"code","e0459962":"markdown","83ceb77f":"markdown","d441e13b":"markdown","00e9997a":"markdown","94ad8629":"markdown","57a47ffd":"markdown","fc05f738":"markdown","8e3e70c3":"markdown","67ae114b":"markdown","8ae07a4a":"markdown","e6e72dc6":"markdown","c6f2df3f":"markdown","054610a9":"markdown","19eddecb":"markdown","fa92efe2":"markdown","4fe348bc":"markdown","d76fc397":"markdown","fcb19f2d":"markdown","54620cb5":"markdown","2b870659":"markdown","c3f774fb":"markdown","c0d7d383":"markdown","14d6c962":"markdown","ba9bde08":"markdown","adb8ceae":"markdown","8f32b808":"markdown","ebbb7426":"markdown","075d5dfe":"markdown","792d7b02":"markdown","6b939c17":"markdown","99a84385":"markdown","cc9a57c8":"markdown","0d50ab1a":"markdown","b20e286e":"markdown","0b6d7869":"markdown","92b7453d":"markdown","ce5d130d":"markdown","fdd27365":"markdown","5749bee2":"markdown","4fb7070d":"markdown","fa7faf71":"markdown","8e3aa994":"markdown","fcb768e4":"markdown","e7abae02":"markdown","4fd96702":"markdown","8383d3a8":"markdown","13764c80":"markdown","218b8fc2":"markdown","ad2ceddc":"markdown","cb14df0c":"markdown","270b789a":"markdown","7ed99253":"markdown","fda8dc8d":"markdown","0d0119ea":"markdown","d11a65c3":"markdown","0a7a01a1":"markdown","a3ab3ded":"markdown","8e4db4fc":"markdown"},"source":{"8f5886ce":"import numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nimport matplotlib.pyplot as plt\nfrom numpy import mean, median\n\nimport plotly.figure_factory as ff\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\n# import plotly.plotly\n# import plotly.io as pio\ninit_notebook_mode(connected=True)\n\n\nfrom datashader.utils import lnglat_to_meters as webm\nimport geoviews as gv\nimport holoviews as hv\nimport datashader as ds\nfrom holoviews.operation.datashader import datashade, dynspread, rasterize\nfrom colorcet import  rainbow, fire, bjy , cwr\nfrom holoviews.streams import RangeXY\nfrom bokeh.io import push_notebook, show, output_notebook\n\n\n#display notebook in full width\n# from IPython.core.display import display, HTML\n# display(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\n\npd.set_option('display.max_columns', 100)\n","d487b5cb":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent= (data.isnull().sum() * 100 \/ data.isnull().count() ).sort_values(ascending = False)\n    df = pd.concat([total, percent], axis = 1, keys = ['Total', 'Percent'])\n    return df[df['Total'] != 0]\n\ndef distinct_values(df, cols = None):\n    print('Data Shape: No of Rows {}, No of Columns {} \\n'.format(df.shape[0], df.shape[1]))\n    if cols is None:\n       columns = df.columns \n    else:\n        columns = cols\n    for col in columns:\n        dist_vals = df[col].value_counts().shape[0]\n        print('Column:{}, Number of distinct Values:{}'.format(col, dist_vals))\n        \n\n\ndef display_duplicates(df, col, n_rows = 5):\n    num_dups = df[df.duplicated( subset = col, \n                                keep = 'first')].sort_values(by = col).shape[0]\n    print('Number of Duplicates for columns {} :{}'.format(col, num_dups))\n    return df[df.duplicated(subset = col, keep = False)].sort_values(by = col).head(n_rows)","6ff77ab1":"data_path = '..\/input\/'\n\ncust_data = pd.read_csv(os.path.join(data_path, 'olist_customers_dataset.csv'),dtype={'customer_zip_code_prefix': str})\ngeo_data  = pd.read_csv(os.path.join(data_path, 'olist_geolocation_dataset.csv'),dtype={'geolocation_zip_code_prefix': str}) \norder_items_data  = pd.read_csv(os.path.join(data_path, 'olist_order_items_dataset.csv')) \norder_payments_data = pd.read_csv(os.path.join(data_path, 'olist_order_payments_dataset.csv')) \norder_reviews_data = pd.read_csv(os.path.join(data_path, 'olist_order_reviews_dataset.csv')) \norders_data = pd.read_csv(os.path.join(data_path, 'olist_orders_dataset.csv')) \nproducts_data = pd.read_csv(os.path.join(data_path, 'olist_products_dataset.csv')) \nsellers_data = pd.read_csv(os.path.join(data_path, 'olist_sellers_dataset.csv'),dtype={'seller_zip_code_prefix': str}) \nproduct_cat_tran_data = pd.read_csv(os.path.join(data_path, 'product_category_name_translation.csv')) ","8869e02e":"print('Customer Data - rows:', cust_data.shape[0], 'columns:', cust_data.shape[1])\nprint('Geo Location  Data - rows:', geo_data.shape[0], 'columns:',geo_data.shape[1])\nprint('Order Items Data  - rows:', order_items_data.shape[0], 'columns:', order_items_data.shape[1])\nprint('Order Payments Data  - rows:', order_payments_data.shape[0], 'columns:', order_payments_data.shape[1])\nprint('Order Reviews Data  - rows:', order_reviews_data.shape[0], 'columns:', order_reviews_data.shape[1])\nprint('Order Data  - rows:', orders_data.shape[0], 'columns:', orders_data.shape[1])\nprint('Products Data  - rows:', products_data.shape[0], 'columns:',products_data.shape[1])\nprint('Sellers Data  - rows:', sellers_data.shape[0], 'columns:', sellers_data.shape[1])\nprint('Product Translation Data  - rows:', product_cat_tran_data.shape[0], 'columns:', product_cat_tran_data.shape[1])\n\n","67264da1":"\ncust_data.head()","8c1f6f50":"distinct_values(cust_data)","fb68b936":"missing_data(cust_data)","45cc6b0d":"geo_data.head()","3dc08ff0":"distinct_values(geo_data)","365c455e":"display_duplicates(geo_data, geo_data.columns.tolist(), n_rows=5)","b0ecb269":"missing_data(geo_data)","6a038f5d":"order_items_data.head()","7212bb52":"cat_cols = ['order_id', 'order_item_id','product_id', 'seller_id']\nnum_cols = ['price', 'freight_value']\ndistinct_values(order_items_data, cat_cols)","f9f85518":"cols = order_items_data.columns.tolist()\ncols.remove('order_item_id')\ndisplay_duplicates(order_items_data, cols)\n","94043f09":"order_items_data[num_cols].describe()","cbad61bb":"missing_data(order_items_data)","092b4a09":"order_payments_data.head()","f3030a29":"cols = order_payments_data.columns.tolist()\nnum_cols = ['payment_value']\ncat_cols = list(set(cols)- set(num_cols))\ndistinct_values(order_payments_data,cat_cols)","df04b7ef":"order_payments_data[num_cols].describe()","ac8b5f4e":"display_duplicates(order_payments_data, ['order_id'])","fc447709":"order_reviews_data.head()","6f084156":"cat_cols = ['review_id', 'order_id', 'review_score']\ndistinct_values(order_reviews_data, cat_cols)","2093984a":"\ndisplay_duplicates(order_reviews_data, ['review_id'])\n","b542b245":"display_duplicates(order_reviews_data, ['order_id'])\n","de5e43ce":"order_reviews_data['review_score'].describe()","7c7071dc":"missing_data(order_reviews_data)","24a98943":"orders_data.head()","cc5b681c":"distinct_values(orders_data)","2ffc284a":"missing_data(orders_data)","abca3eb7":"products_data.head()","560fa1fe":"distinct_values(products_data)","74487173":"missing_data(products_data)","56738043":"sellers_data.head()","cadbc487":"distinct_values(sellers_data)","1c9e8bbb":"missing_data(sellers_data)","2a4d192f":"product_cat_tran_data.head()","6e294c08":"distinct_values(product_cat_tran_data)","d0eb1c19":"missing_data(product_cat_tran_data)","f78d4bbd":"\norder_reviews_data['neg_review'] = order_reviews_data['review_score'].apply(lambda x: 1 if x < 3 else 0)\norder_reviews_data['review_class_name'] = order_reviews_data['review_score'].apply(lambda x: 'positive' if x >=3 else 'negative')","d4d4516b":"orders_data[['order_purchase_timestamp', 'order_delivered_customer_date']] = orders_data[['order_purchase_timestamp', 'order_delivered_customer_date']].apply(pd.to_datetime)\norders_data['days_delivery'] =  (orders_data['order_delivered_customer_date'] -  orders_data['order_purchase_timestamp']).dt.days\n","4d9c030c":"orders_data['order_date'] = pd.to_datetime(orders_data['order_purchase_timestamp']).dt.date\norders_data['order_year'] = pd.to_datetime(orders_data['order_purchase_timestamp']).dt.year\norders_data['order_month'] = pd.to_datetime(orders_data['order_purchase_timestamp']).dt.month\norders_data['order_month_name'] = pd.to_datetime(orders_data['order_purchase_timestamp']).dt.month_name()\n","2169e0d8":"# Transfrom the Lattitude and Longitude to Mercetor x, y co-ordnates\nx, y = webm(geo_data.geolocation_lng, geo_data.geolocation_lat)\ngeo_data['x'] = pd.Series(x)\ngeo_data['y'] = pd.Series(y)\n\n#First 3 digits of zip code to cover a wide area\ngeo_data['geolocation_zip_code_prefix_3_digits']  = geo_data['geolocation_zip_code_prefix'].str[0:3]\ncust_data['customer_zip_code_prefix_3_digits']    =  cust_data['customer_zip_code_prefix'].str[0:3]\n\n# transforming the prefixes to int for plotting purposes\ngeo_data['geolocation_zip_code_prefix'] = geo_data['geolocation_zip_code_prefix'].astype(int)\ngeo_data['geolocation_zip_code_prefix_3_digits'] = geo_data['geolocation_zip_code_prefix_3_digits'].astype(int)\ncust_data['customer_zip_code_prefix_3_digits'] = cust_data['customer_zip_code_prefix_3_digits'].astype(int)","1efb101d":"# Remove Ouliers else map will display data from Europe too\n#Brazils most Northern spot is at 5 deg 16\u2032 27.8\u2033 N latitude.;\ngeo_data = geo_data[geo_data.geolocation_lat <= 5.27438888]\n#it\u2019s most Western spot is at 73 deg, 58\u2032 58.19\u2033W Long.\ngeo_data = geo_data[geo_data.geolocation_lng >= -73.98283055]\n#It\u2019s most southern spot is at 33 deg, 45\u2032 04.21\u2033 S Latitude.\ngeo_data = geo_data[geo_data.geolocation_lat >= -33.75116944]\n#It\u2019s most Eastern spot is 34 deg, 47\u2032 35.33\u2033 W Long.\ngeo_data = geo_data[geo_data.geolocation_lng <=  -34.79314722]","fa83fe2f":"cols = order_items_data.columns.tolist()\ncols.remove('order_item_id')\norder_items_data.drop_duplicates(subset = cols, keep = 'first', inplace = True)\norder_items_data.shape","7e791bfd":"display_duplicates(order_items_data, ['order_id', 'price'], 5)","4012f212":"order_items_data.drop_duplicates(subset = ['order_id'] , keep ='first', inplace = True)\norder_items_data.shape","18081f92":"order_reviews_data.drop_duplicates(subset = ['order_id'], keep = 'first', inplace = True)\norder_reviews_data.shape","7f18155d":"data = pd.merge(orders_data, order_reviews_data, on = 'order_id' )\ndata.shape","c91352c7":"data = pd.merge(data, order_items_data, on = 'order_id' )\ndata.shape","ea68b583":"products_data = pd.merge( products_data, product_cat_tran_data, on = 'product_category_name', how = 'left')\n","a9a0c223":"data = pd.merge(data, products_data, on = 'product_id' )\ndata.shape","dcfef5ca":"data = pd.merge(data, cust_data, on = 'customer_id' )\ndata.shape","95fcdbf9":"data = pd.merge(data, sellers_data, on = 'seller_id' )\ndata.shape","583d44b0":"data.head()","8c6dd54a":"distinct_values(data)","68278c15":"missing_data(data)","33393c56":"data.describe()","4daf5dbe":"data.groupby('review_score').agg([np.mean])","8767a570":"def get_bar_trace_vert(df):\n    # Display Ratings Count\n    trace =  go.Bar(\n                x= df.index,\n                y= df.values.ravel(),\n                orientation = 'v'  ,\n               \n                ) \n    return trace\n\ndef get_bar_trace_hor(df):\n    # Display Ratings Count\n    trace =  go.Bar(\n                y= df.index,\n                x= df.values.ravel(),\n                orientation = 'h'  ,\n               \n                ) \n    return trace\n\n\n\ndef display_sales_data(df, xlabel, title):\n    trace1 = get_bar_trace_vert(df['count'])\n    trace2 = get_bar_trace_vert(df['total_sales'])\n\n\n    fig = make_subplots(rows=1, cols=2, subplot_titles=('Orders Count', 'Total Sales in BRL' ))\n    fig['layout']['xaxis1'].update(title= xlabel , type = 'category')\n    fig['layout']['xaxis2'].update(title= xlabel , type = 'category')\n\n    fig['layout']['yaxis1'].update( title= 'Count')\n    fig['layout']['yaxis2'].update( title= 'Sales Amount' )\n\n    fig['layout'].update(height = 400, width = 1200, showlegend = False, title = title)\n    fig.append_trace(trace1, 1,1)\n    fig.append_trace(trace2, 1,2)\n\n    iplot(fig)","a13222ec":"df = data.groupby('order_year').agg({'order_year':['count'],  'price':['sum']})[['order_year','price']]\ndf.columns = [ 'count', 'total_sales']\ndisplay_sales_data(df, xlabel = 'Year' , title = 'Yearly Sales')","a48873ac":"df = data.groupby(['order_month', 'order_month_name','order_year']).agg({'order_month':['count'],  'price':['sum']})\ndf.columns = [ 'count', 'total_sales']\ndf = df.reset_index(['order_month', 'order_year'])\ndf = df[df['order_year'] == 2017]\ndisplay_sales_data(df,  xlabel = 'Month' , title = 'Monthly Sales')\n","bfbc1393":"\ndf = data.groupby('order_date').agg({'price':'sum'}).reset_index()\ndf.columns = ['date','sales']\ntrace =  go.Scatter(x=df.date, y=df['sales'])\nplot_data = [trace]\n\n\nlayout = dict(\n    title='Daily Sales Amount',\n    xaxis=dict(\n               rangeslider=dict( visible = True ),\n               type='date'\n              )\n            )\n\nfig = dict(data = plot_data, layout = layout)\niplot(fig)\n# df.to_csv(os.path.join(graphs_path, 'daily_sales.csv'), index = False)   ","73f6e82c":"df = data.groupby('review_score')['review_score'].agg(['size'])\ndf.columns = ['count']\ndf['percent'] = df['count']\/df['count'].sum()\n\n\ntrace1 = get_bar_trace_hor(df['count'])\ntrace2 = get_bar_trace_hor(df['percent'])\n\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Ratings Count', 'Ratings Percent' ))\nfig['layout']['xaxis1'].update(title= 'count')\nfig['layout']['xaxis2'].update(title=  'percent', tickformat=\".2%\" )\n\nfig['layout']['yaxis1'].update( title='Ratings' )\nfig['layout']['yaxis2'].update( title='Ratings')\n\nfig['layout'].update(height = 400, width = 1200, showlegend = False)\nfig.append_trace(trace1, 1,1)\nfig.append_trace(trace2, 1,2)\n\nprint(\"Mean Rating for all orders is {:0.2f}\".format(data['review_score'].mean()))\nprint(\"% of  orders with negative reviews(ratings 1 or 2) is {:0.2%}\".format(df['percent'][df.index < 3].sum()))\niplot(fig)\n","bd05d734":"col = 'product_id'\n# col = 'product_category_name_english'\ndf = data.groupby(col).agg({'review_comment_message':['count']})\ndf.columns = ['review_comments_count']\ndf = df.sort_values(by = 'review_comments_count', ascending= False)\n\ntrace = go.Histogram(x = df['review_comments_count'],histnorm='probability', nbinsx = 50)\nfig = tools.make_subplots(rows = 1, cols =1)\nfig.append_trace(trace, 1,1)\nfig['layout'].update(height = 400, width = 800, showlegend = False, title = 'Product Review Comments Probability Distribution'.format(col))\nfig['layout']['xaxis1'].update(title= 'Number of review comments')\nfig['layout']['yaxis1'].update(title= 'Distribution')\niplot(fig)","0054947c":"\ndef  plot_discrete_feature(col, top_n = 10):\n    \n    df = data.groupby(col).agg({col:['count'],  'neg_review':['mean','sum'],'review_score':['mean'],})[[col, 'neg_review', 'review_score']]\n    df.columns = ['count',  'neg_review_perc','neg_review_count', 'review_score_mean',]\n    df = df.sort_values(by ='count', ascending= False).head(top_n )\n\n    trace1 = get_bar_trace_hor(df['count'])\n    trace2 = get_bar_trace_hor(df['neg_review_perc'])\n    trace3 = get_bar_trace_hor(df['neg_review_count'])    \n    trace4 = get_bar_trace_hor(df['review_score_mean'])\n\n\n    fig = tools.make_subplots(rows=2, cols=2, subplot_titles=('Number of orders', 'Negative Reviews Percent',\n                                                              'Negative Reviews Count', 'Mean Ratings'))\n    fig['layout']['xaxis1'].update(title= 'Count')\n    fig['layout']['xaxis2'].update(title= 'Percent', tickformat=\".2%\")\n    fig['layout']['xaxis3'].update(title= 'Count')\n    fig['layout']['xaxis4'].update(title=  'Mean Rating')\n\n    fig['layout']['yaxis1'].update( title=col, type = 'category',autorange=\"reversed\",  automargin =True )\n    fig['layout']['yaxis2'].update( title= col, type = 'category',autorange=\"reversed\",automargin =True)\n    fig['layout']['yaxis3'].update( title=col, type = 'category',autorange=\"reversed\",automargin =True )\n    fig['layout']['yaxis4'].update( title= col, type = 'category',autorange=\"reversed\",automargin =True)\n\n    fig['layout'].update(height = 1000, width = None, showlegend = False, title = 'Plots for {}'.format(col))\n    fig.append_trace(trace1, 1,1)\n    fig.append_trace(trace2, 1,2)\n    fig.append_trace(trace3, 2,1)\n    fig.append_trace(trace4, 2,2)\n    \n    iplot(fig)\n  ","6e573b98":"\nplot_discrete_feature(col= 'order_status')\n","4a0cee78":"\nplot_discrete_feature(col= 'product_photos_qty')\n","34ecb69a":"\nplot_discrete_feature(col = 'product_category_name_english', top_n = 20)\n","762d12a2":"plot_discrete_feature(col = 'customer_state', top_n = 20)","926e1e30":"plot_discrete_feature(col = 'customer_city', top_n = 20)","1ec98dc8":"plot_discrete_feature(col = 'customer_unique_id', top_n = 20)","ef35ad13":"plot_discrete_feature(col = 'seller_id', top_n = 20)\n","37f4afe6":"plot_discrete_feature(col = 'seller_state', top_n = 20)","1849eadb":"# col = 'days_delivery'\n# df = data[[col, 'review_score', 'neg_review']].copy()\n# df.dropna(subset=[col], inplace =True)\n# df_neg =  df[df['neg_review'] == 1] \n# df_pos = df[df['neg_review'] == 0] \n\n# hist_data = [df_neg[col].values, df_pos[col].values]\n# group_labels = ['Negative Reviews', 'Positive Reviews']\n# fig = ff.create_distplot(hist_data, group_labels)\n# fig['layout'].update(height = 600, width = 800)\n# iplot(fig)","579782c9":"def display_continous_features(df, col, xlim = None):\n    df = df[[col, 'review_score', 'neg_review', 'review_class_name']].copy()\n    df.dropna(subset=[col], inplace =True)\n\n    fig = plt.figure(figsize=(20, 20)) \n    #Display Density Plot\n    sns.distplot(df[col], color = 'b',  kde = True, ax = plt.subplot(321)  )\n    plt.xlim(right = xlim)\n    plt.ylabel('Density')\n\n\n    #Display Density Plot for negatave vs positive reviews\n    sns.distplot(df[df['review_class_name'] == 'negative'][col], color = 'r', label = 'Negative(<3 rating)',ax = plt.subplot(322))\n    sns.distplot(df[df['review_class_name'] == 'positive'][col], color = 'b', label = 'Positive (>=3 rating)',ax = plt.subplot(322))\n    plt.xlim(right = xlim)\n    plt.legend(loc = 'best')\n    plt.ylabel('Density negative vs positive reviews')\n\n#   Display Box Plot for feature\n    sns.boxplot(x = col , data = df, ax = plt.subplot(323))\n    plt.xlim(left = 0, right = xlim)\n    \n#     Display Violin Plot for survived vs died\n    sns.violinplot(x = col , y = 'review_class_name', data = df, ax = plt.subplot(324))\n    plt.xlim(right = xlim)\n   \n    \n#   Plot average column value for each rating    \n    sns.barplot(x=\"review_class_name\", y= col, data = df, estimator=mean, ax = plt.subplot(325))\n    plt.ylabel('Mean {}'.format(col))\n    plt.show()","16831ae2":"col = 'days_delivery'\ndisplay_continous_features(data, col)","d7e4d69e":"null_delivery = data[data['days_delivery'].isnull()]\nprint('The number of orders not yet delivered {}'.format(null_delivery.shape[0]))\nprint('Mean Rating for orders not delivered {:0.2f} \/ 5'.format(null_delivery.review_score.mean()))\n","d2096428":"col = 'price'\ndisplay_continous_features(data, col)","dab67de7":"col = 'freight_value'\ndisplay_continous_features(data, col, xlim = 100)","7071847a":"def display_cumilative_sales(col, col_name):\n    agg_values = {col:'count', 'review_score':'mean', 'neg_review':['sum', 'mean'], 'price':'sum', 'days_delivery':'mean' }\n    df = data.groupby(col).agg(agg_values)[[col,'review_score', 'neg_review', 'price', 'days_delivery']]\n    df.columns = ['count', 'review_score_mean',  'neg_review_count','neg_review_perc', 'total_sales' ,'days_delivery_mean' ]\n    df = df.sort_values(by = 'total_sales', ascending= False).reset_index()\n\n    #Cumilative Count\n    df['cum_count'] = df.index + 1\n    #Cumilative Count Percentage\n    df['cum_count_perc'] = df['cum_count'] \/ df.shape[0]\n    # Cumilative Sales\n    df['cum_sales'] = df['total_sales'].cumsum(axis = 0) \n    # Cumilative Sales Percentage\n    df['cum_sales_perc'] = df['cum_sales']  \/ df['total_sales'].sum()\n\n   \n    \n    trace1 =  go.Scatter(x=df['cum_count'], y=df['cum_sales'], name = 'Sales Amount')\n    trace2 =  go.Scatter(x=df['cum_count_perc'], y=df['cum_sales_perc'], name = 'Sales Percentage')\n\n    plot_data = [trace1, trace2]\n\n    fig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Cumilative Sales Amount', 'Cumilative Sales Percent'))\n\n    fig['layout']['xaxis1'].update(title=  '{} count'.format(col_name))\n    fig['layout']['xaxis2'].update(title=  '{} Percentage'.format(col_name), tickformat = '0.0%')\n    fig['layout']['yaxis1'].update( title= 'Cumilative Sales Amount')\n    fig['layout']['yaxis2'].update( title= 'Cumilative Sales Percent',  tickformat = '0.0%')\n    fig['layout'].update(title = 'Cumilative Sales for {}'.format(col_name))\n\n    fig.append_trace(trace1, 1,1)\n    fig.append_trace(trace2, 1,2)\n    iplot(fig)\n    \n#   Print TOP revenues \n    for top_perc in [1,10,20,30,50]:\n        top_perc_count = int(df.shape[0] * top_perc \/100)\n        df_top_perc = df.head(top_perc_count)\n\n        print('Top {}% ({}) {}  Generate {:.2%} ({:0.2f}M) of revenue'.format( top_perc,\n                                                                                top_perc_count, \n                                                                                col_name,\n                                                                                df_top_perc['total_sales'].sum()\/df['total_sales'].sum(),\n                                                                                df_top_perc['total_sales'].sum() \/ 10**6\n                                                                              ))\n\n","049dadd1":"display_cumilative_sales('seller_id', 'Sellers')\n","e44530f1":"display_cumilative_sales('product_id', 'Products')\n","87954ed8":"display_cumilative_sales('customer_id', 'Customers')\n","8cc5d82d":"display_cumilative_sales('customer_city', 'City')","354dca3a":"# T = 0.05\n# PX = 1\n\n# output_notebook()\n# hv.extension('bokeh')\n\n# %opts Overlay [width=800 height=600 toolbar='above' xaxis=None yaxis=None]\n# %opts QuadMesh [tools=['hover'] colorbar=True] (alpha=0 hover_alpha=0.2)\n\n# def plot_map(data, label, agg_data, agg_name, cmap):\n#     url=\"http:\/\/server.arcgisonline.com\/ArcGIS\/rest\/services\/Canvas\/World_Dark_Gray_Base\/MapServer\/tile\/{Z}\/{Y}\/{X}.png\"\n#     geomap = gv.WMTS(url)\n#     points = hv.Points(gv.Dataset(data = data, kdims = ['x', 'y'], vdims = [agg_name]))\n#     agg = datashade(points, element_type = gv.Image, aggregator= agg_data, cmap =cmap)\n#     zip_codes = dynspread(agg, threshold= T, max_px = PX)\n#     hover = hv.util.Dynamic(rasterize(points, aggregator= agg_data, width = 50, height = 25, streams = [RangeXY]), operation= hv.QuadMesh)\n#     hover =hover.options(cmap = cmap)\n#     img = geomap * zip_codes * hover\n#     img = img.relabel(label)\n#     return img\n","62f7743c":"# brazil_geo = geo_data.set_index('geolocation_zip_code_prefix_3_digits').copy()\n# agg_name = 'geolocation_zip_code_prefix'\n# agg_data = ds.min(agg_name)\n# cmap = rainbow\n# label = 'Brazil ZIP Codes'\n# # plot_map(data = brazil_geo, label = 'Brazil Zip Codes', agg_data = agg_data, agg_name = agg_name, cmap = rainbow)","cfa96a08":"# grp = data.groupby('customer_zip_code_prefix_3_digits')['price'].sum().to_frame()\n# revenue = brazil_geo.join(grp)\n# agg_name = 'revenue'\n# revenue[agg_name] = revenue['price']\/1000\n# plot_map(revenue, 'Orders Revenue (thousands R$)', ds.mean(agg_name), agg_name, cmap = fire)","696a67cc":"# grp = data.groupby('customer_zip_code_prefix_3_digits')['review_score'].mean().to_frame()\n# review_score = brazil_geo.join(grp)\n# agg_name = 'review_score'\n# plot_map(review_score , 'Review Score', ds.mean(agg_name), agg_name, cmap = bjy)","b04eeece":"# grp = data.groupby('customer_zip_code_prefix_3_digits')['days_delivery'].mean().to_frame()\n# delivery_days = brazil_geo.join(grp)\n# agg_name = 'days_delivery'\n# plot_map(delivery_days , 'Delivery Days', ds.mean(agg_name), agg_name, cmap = cwr)","e0459962":"### 2 Geo Location Data","83ceb77f":"### 8 Plots fo seller state (seller_state)\nMajority of orders come from sellers from state SP with 15% of such orders being negatively reviewed with mean rating of 4.06\/5\n","d441e13b":"There are duplicates for order_id but snce each order can have multiple products ordered the data may be correct.\nBut the Orders Review data does not have product_id as key hence its better to drop all orders for \nwhich multiple products were ordered","00e9997a":"### Merge With Seller data","94ad8629":"## Geolocation Data:\nReference: https:\/\/www.kaggle.com\/andresionek\/geospatial-analysis-of-brazilian-e-commerce","57a47ffd":"Remove duplicate data from order item data","fc05f738":"### 4 Plots for Customer State(customer_state)","8e3e70c3":"### 7 Products Data","67ae114b":"The null values for delivery days implies that the order is not delivered yet. Lets check the impact of such orders in rating. There are 2190 orders which are not deliverd yet and they have a mean review score of 1.76 \/5. This is quite a significant number of orders with very low review score.","8ae07a4a":"### Plots for Days Delivery \n( Number of days it takes order to reach customer)\n<br>The box plot interpretation can be checked at https:\/\/en.wikipedia.org\/wiki\/Interquartile_range#\/media\/File:Boxplot_vs_PDF.svg","e6e72dc6":"### Yearly sales Data ","c6f2df3f":"The histogram for review comments counts for products is shown below. 95% of products have less than 4 review comments as shown from the distribution","054610a9":"### 4 Order Payments Data","19eddecb":"### Monthly Sales Data\nDisplay monthly aggregrate sales for 2017 data.Jan is Lowest month in terms of revenue while Novemeber is Highest.\nSales for 2017 is only shown as for other years 2016 and 2018 not all months have data","fa92efe2":"### Ratings \nRating scores value 1 or 2 will be considered as negative review. There are 14.5% of total orders are negatively reviewed","4fe348bc":"#### Merge with Customer data","d76fc397":"## Adding New Features","fcb19f2d":"#### Date and Time related Features for orders","54620cb5":"### Plots for Freight Value(freight_value)","2b870659":"#### Merge with Products Data","c3f774fb":"## Data Cleaning and PreProcessing","c0d7d383":"More product photos implies slight increase in mean review rating. \n15% of orders with one product picture have negative reviews with mean rating of 4.06 while 12% of orders with 5 product photos have Negative reviews with mean rating of 4.17","14d6c962":"#### Merge order data and Review Data","ba9bde08":"### 2 Plots for Number of Product Photos (product_photos_qty)","adb8ceae":"### Show Delivery days  on MAP\nThe North region in particlar have high mean delivey days for orders. We also see pattern here that regions with high delivery days also have low review scores","8f32b808":"### 7 Plots for Top 20 sellers (seller_id)\nAmong top 20 sellers there are at least 8 sellers, who have 15% or more orders with  negative reviews . \n","ebbb7426":"## EDA and Analysis","075d5dfe":"### 3 Plots for Product Category(product_category_name_english)\n\n<br>Showing only top 20 most frequent categories.  \n<br>Bed and Bath is top selling category but have a quite high % of negative reviews at 17%  with mean rating of 3.96\/5\n<br>Categories Like pet shop, stationary. perfumery etc, have mean rating of more than 4.2\n","792d7b02":"#### Negative  Review \nCreate a feature neg_review based on review scores.\nIf Review Score is 0 or 1, then its will be classified as Negative Review with value 1. \nIf Review Score is 3, 4 or 5, then its will be classified as Non-Negative with value 0\n","6b939c17":"### 1 Plots for Oder Status\nMajority of orders are delivered, and these orders have more than 4 mean review score.\n<br>For other orders the mean rating is quite low and all orders except those delivered have mean rating less than 2.5\n<br> 13 percent of delivered orders have negative reviews with mean rating of 4.14\/5 while 70% of shipped products have negative reviews with mean rating of 1.98\n","99a84385":"### Plots for order price (price)\nFrom the fifth plot it looks like orders with higher mean value, are associated with negative reviews. ","cc9a57c8":"#### Days Delivery \nThe number of days it takes customer order to be delivered after order is placed.\n","0d50ab1a":"Remove duplicate data from Order Reviews Data","b20e286e":"### Show all ZIP codes","0b6d7869":"## Pareto Charts (Categories With Big impact on Revenue)\nThe pareto principle states that 80% of the effects come from 20% of the causes. As we can see for many cetgories this holds true.\n<br>Top 20 % sellers generate 83% of revenue.  \n<br>Top 20 % products generate 75% of Revenue.\n<br> Top 10 % cities generate 81% of Revenue\n\nMarketing Department can target the top categories that have big impact on revenue.","92b7453d":"#### Geolocation features","ce5d130d":"### 5 Order Reviews Data","fdd27365":"### 5 Plots for Customer City(customer_city)","5749bee2":"Data Source\nhttps:\/\/www.kaggle.com\/olistbr\/brazilian-ecommerce","4fb7070d":"### 9 Product Category Translation Data","fa7faf71":"### 6 Plots for Top 20 Customers(customer_unique_id)\nThe top 20 customers by order count is shown below. The maximum number of orders by a single customer is 16 while minimum is 4. Among top 20 customers there are 6 who have given negative ratings.","8e3aa994":"#### Merge with Orders Items Data","fcb768e4":"## Read Data","e7abae02":"#### Check Duplcates ","4fd96702":"## Final Data ","8383d3a8":"####  Identifying Duplcate Rows\nThere are some duplicate rows ignoring the column order_item_id. These need to be removed later","13764c80":"<br>(1) First plot is univariate distribution of days delivery.\n<br>(2) The second plot shows relative distributions of the feature for negative and positive reviews. It\u2019s clear that orders that take more than 25 days to deliver have negative reviews(1, or 2 rating)\n<br>(3) The third plot shows the box plot and the shows outliers. The last  Combining the observations with second and fourth plots its clear that outliers are associated with negative reviews\n<br>(4) The fourth plot shows violin plots for positive and negative reviews. It\u2019s clear that delivery days for negatively reviewed orders are more indicated by fatter regions . The median delivery days(white dot) is more for negative reviews\n<br> (5) The fith plot shows the mean days of delivery against each negative and postive reviews. Its clear that high mean delivery days are assocated with lower review scores. Orders with Postive Reviews on average take 11 days to deliver and oreers with negative reviews on an average take 19 days to deliver \n","218b8fc2":"### Daily Sales Amount\nThere is big spike on 24th Novemeber 2017 which is Black Friday","ad2ceddc":"### 3 Order Items Data","cb14df0c":"### Show Review Scores on MAP\nThe average review score is shown for customer zip codes. The regions in blue have low mean review score. Perhaps one of the factor is geographic location, as these regions are located far away from sellers which result in longer shipping time and increased shipping fee as we will see later","270b789a":"### 1 Customer Data","7ed99253":"#### Merge Products data with Product Translation Data","fda8dc8d":"State RJ is second most busy state in terms of customer orders, but also has high percentage of dissatisfied customers. \n21% of customer orders from this state are negatively reviewed with mean rating of 3.87\/5\n<br> State BR recieved most number of orders(41375) and has 12% of negative reviews with mean rating of 4.18","0d0119ea":"### Show Revenue MAP\nGroup the revenues by 3 digit customer zip code prefix and show in map. The south and south east region of Brazil contribute most towards the revenue","d11a65c3":"### Product Review Comments:\nReview comments have become an important aspect of online buying experinec. Some interesting fact below from https:\/\/www.forbes.com\/sites\/forbesagencycouncil\/2018\/03\/05\/how-to-increase-search-rankings-and-conversions-with-customer-ratings-and-reviews\/#49610b742660\n\n\n<br>85% of online consumers trust online reviews on the same level as personal recommendations from friends and family. \n<br>Additional research shows a 166% increase in sales conversion when ratings and user-generated content are integrated into the online shopping experience\n<br>Participants said they are suspicious of five-star ratings, and consumers often look at negative reviews first to determine the legitimacy of the reviews as a whole.\n<br>A study found that consumers read about seven reviews before they decide to trust a business","0a7a01a1":"From the fifth plot it looks like orders with higher mean freight rate , are associated with negative reviews.","a3ab3ded":"### 6 Orders Data","8e4db4fc":"### 8 Sellers Data"}}