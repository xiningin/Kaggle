{"cell_type":{"daf3f7d8":"code","622ef300":"code","599cb5a2":"code","11925059":"code","07887be8":"code","360ad527":"code","fcdd1cd7":"code","109ed59d":"code","49135dc0":"code","96583bac":"code","ea9d8058":"code","076927c6":"code","ec63f0f1":"code","c45b813f":"code","88ae7244":"code","55a584ab":"code","3dbbe8d8":"code","f81c1f00":"code","e2249fde":"code","956ba318":"code","181aa358":"code","7453225d":"code","1b8fc516":"code","9240c5a4":"markdown","11cf48d9":"markdown","90b6cce8":"markdown","72727102":"markdown","ed60f52f":"markdown","ea4a26b8":"markdown","b68afb3a":"markdown","d01ff222":"markdown","dea0dd4a":"markdown","fcea1187":"markdown"},"source":{"daf3f7d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","622ef300":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","599cb5a2":"data = pd.read_csv('..\/input\/crab-age-prediction\/CrabAgePrediction.csv')","11925059":"data","07887be8":"data.info()","360ad527":"data.isnull().sum()","fcdd1cd7":"length = data['Length']\nlength = pd.DataFrame(length)","109ed59d":"low = length['Length'].quantile(0.25)\nhigh = length['Length'].quantile(0.75)\nIQR = high - low\nh=high+1.5*IQR\nl=low-1.5*IQR","49135dc0":"length['Length']=np.where(length['Length'] > h,h,\n                        np.where(length['Length']<l,l,\n                                length['Length'])) ","96583bac":"fig,ax = plt.subplots(1,4,figsize=(20,5))\nsns.boxplot(x=data['Length'],ax=ax[0],color='red')\nax[0].set_title('Before IRQ')\nsns.distplot(x=data['Length'],ax=ax[1],color='red')\nax[1].set_title('Before IQR')\nsns.boxplot(x=length['Length'],ax=ax[2],color='green')\nax[2].set_title('Ofter IQR')\nsns.distplot(x=length['Length'],ax=ax[3],color='green')\nax[3].set_title('Ofter IQR')","ea9d8058":"print(\"Before\",data['Length'].var())\nprint(\"Ofter handling Outlier\",length['Length'].var())","076927c6":"z=data['Length']\nz=pd.DataFrame(z)","ec63f0f1":"h1 = z['Length'].mean()+3* z['Length'].std()\nl1 = z['Length'].mean()-3 * z['Length'].std()","c45b813f":"z['Length']=np.where(z['Length'] > h1,h1,\n                        np.where(z['Length']<l1,l1,\n                                z['Length'])) ","88ae7244":"fig,ax = plt.subplots(1,4,figsize=(20,5))\nsns.boxplot(x=data['Length'],ax=ax[0],color='red')\nax[0].set_title('Before Z score')\nsns.distplot(x=data['Length'],ax=ax[1],color='red')\nax[1].set_title('Before Z score')\nsns.boxplot(x=z['Length'],ax=ax[2],color='green')\nax[2].set_title('ofter Z score')\nsns.distplot(x=z['Length'],ax=ax[3],color='green')\nax[3].set_title('ofter Z score')","55a584ab":"log1=data['Length']\nlog1=pd.DataFrame(log1)","3dbbe8d8":"from sklearn.preprocessing import FunctionTransformer","f81c1f00":"log = FunctionTransformer(func=np.log1p)\nlogtrans=log.fit_transform(log1)\nfig,ax = plt.subplots(1,2,figsize=(20,5))\nsns.histplot(x=log1['Length'],ax=ax[0],color='red')\nax[0].set_title('Before log transform')\nsns.histplot(x=logtrans['Length'],ax=ax[1],color='red')\nax[1].set_title('ofter log transform')\n","e2249fde":"sq1=data['Length']\nsq1=pd.DataFrame(sq1)\nsqrt = FunctionTransformer(func=np.sqrt)\nsqrttrans=log.fit_transform(sq1)\nfig,ax = plt.subplots(1,2,figsize=(20,5))\nsns.histplot(x=sq1['Length'],ax=ax[0],color='red')\nax[0].set_title('Before sqrt transform')\nsns.histplot(x=sqrttrans['Length'],ax=ax[1],color='red')\nax[1].set_title('ofter sqrt transform')","956ba318":"cb=data['Length']\ncb=pd.DataFrame(sq1)\ncbrttrans = FunctionTransformer(func=np.cbrt)\ncbrttrans=log.fit_transform(cb)\nfig,ax = plt.subplots(1,2,figsize=(20,5))\nsns.histplot(x=cb['Length'],ax=ax[0],color='red')\nax[0].set_title('Before cbrt transform')\nsns.histplot(x=cbrttrans['Length'],ax=ax[1],color='red')\nax[1].set_title('ofter cbrt transform')","181aa358":"from sklearn.preprocessing import PowerTransformer","7453225d":"po=data['Length']\npo=pd.DataFrame(po)\np=PowerTransformer(method='yeo-johnson')\npowertrans =p.fit_transform(po)\npowertrans=pd.DataFrame(powertrans)\npowertrans.columns=['length']\nfig,ax = plt.subplots(1,2,figsize=(20,5))\nsns.histplot(x=po['Length'],ax=ax[0],color='red')\nax[0].set_title('Before power Yeo-johnson transform')\nsns.histplot(x=powertrans['length'],ax=ax[1],color='red')\nax[1].set_title('ofter power Yeo-jahnson transform')","1b8fc516":"co=data['Length']\nco=pd.DataFrame(co)\nc=PowerTransformer(method='cox-box')\nc =p.fit_transform(co)\nc=pd.DataFrame(c)\nc.columns=['length']\nfig,ax = plt.subplots(1,2,figsize=(20,5))\nsns.histplot(x=co['Length'],ax=ax[0],color='red')\nax[0].set_title('Before power cox box transform')\nsns.histplot(x=c['length'],ax=ax[1],color='red')\nax[1].set_title('ofter power cox box transform')","9240c5a4":"# Cube Root Transformation","11cf48d9":"# Transformer","90b6cce8":"# Sqrt Transformer","72727102":"# log transformer","ed60f52f":"# yeo-johnson","ea4a26b8":"# Handling with outliers--> IQR methods","b68afb3a":"# Power transformer","d01ff222":"# Cox box","dea0dd4a":"# Z- Score","fcea1187":"# Handling Feature Engineering  outlier,transform"}}