{"cell_type":{"782a2bf8":"code","e03ec58b":"code","18202ae9":"code","612dd326":"code","e5d2330e":"code","9b5e08a3":"code","fea70cf7":"code","7cb94fab":"code","39c5f004":"code","a01d1a13":"code","9448c3e2":"code","38b650a2":"code","0ec55f75":"code","c38ed954":"code","c3c29ac3":"code","dddf35de":"code","ad6d7092":"code","b03cb95f":"code","d7aa67e8":"code","2bd30e02":"code","0da0b3dc":"code","8dad3ece":"code","1164c3da":"code","9f9ac875":"markdown"},"source":{"782a2bf8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf \nfrom tensorflow import keras \nimport matplotlib.pyplot as plt \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n#print(tf.__version__)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e03ec58b":"fashion_mnist = keras.datasets.fashion_mnist\n(train_images, train_labels) ,(test_images,test_labels) = fashion_mnist.load_data()\n","18202ae9":"class_names = ['Tshirt\/top','Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot'] ","612dd326":"len(class_names)","e5d2330e":"train_images.shape\n","9b5e08a3":"\nlen(train_labels)","fea70cf7":"train_labels","7cb94fab":"test_images.shape\n","39c5f004":"test_labels\n","a01d1a13":"len(test_labels)","9448c3e2":"#preprocess data \nplt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()\n","38b650a2":"plt.figure(figsize= (10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i],cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show","0ec55f75":"model = keras.Sequential([\n        keras.layers.Flatten(input_shape = (28,28)),\n        keras.layers.Dense(128,activation = 'relu'),\n        keras.layers.Dense(10)\n    \n])","c38ed954":"model.compile(optimizer = 'adam',\n              loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits = True),\n              metrics = ['accuracy'] \n              \n             )","c3c29ac3":"model.fit(train_images,train_labels,epochs = 10)","dddf35de":"test_loss, test_acc = model.evaluate(test_images ,test_labels ,verbose = 2)\nprint(test_loss)\nprint(test_acc)","ad6d7092":"#make predictions \nprobability_model = tf.keras.Sequential([model,\n                                       tf.keras.layers.Softmax()])\npredictions = probability_model.predict(test_images)\n","b03cb95f":"predictions[0]","d7aa67e8":"np.argmax(predictions[0])","2bd30e02":"test_labels[0]","0da0b3dc":"def plot_image(i,predictions_array,true_label,img_passed):\n    predictions_array, true_label, img = predictions_array, true_label[i], img_passed[i]\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(img, cmap = plt.cm.binary)\n    \n    predicted_label = np.argmax(predictions_array)\n    if predicted_label == true_label :\n        color = 'blue'\n    else :\n        color = 'red'\n        \n    plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\n    \ndef plot_value_array(i,predictions_array,true_label):\n        prediction_array ,true_label = predictions_array ,true_label[i]\n        plt.grid(False)\n        plt.xticks(range(10))\n        plt.yticks([])\n        thisplot = plt.bar(range(10),predictions_array,color = '#777777')\n        plt.ylim([0,1])\n        predicted_label = np.argmax(predictions_array)\n        thisplot[predicted_label].set_color('red')\n        thisplot[true_label].set_color('blue')\n","8dad3ece":"i = 0 \nplt.figure(figsize = (6,3))\nplt.subplot(1,2,1)\nplot_image(i,predictions[i],test_labels,test_images)\nplt.subplot(1,2,2)\nplot_value_array(i,predictions[i],test_labels)\nplt.show()","1164c3da":"# Plot the first X test images, their predicted labels, and the true labels.\n# Color correct predictions in blue and incorrect predictions in red.\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","9f9ac875":"train_images = train_images\/255.0\ntest_images = test_images\/255.0"}}