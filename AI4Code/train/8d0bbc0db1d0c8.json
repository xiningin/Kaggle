{"cell_type":{"100cfbca":"code","2f229b83":"code","b494e789":"code","538c9d5b":"code","5035fcc8":"code","7fcbf555":"code","348c3daa":"code","5b245336":"code","74c2b8c3":"code","195789ed":"code","e40455b4":"code","dcf88f25":"code","1c16845d":"code","f8c19281":"code","56608375":"code","ef0b6261":"code","fcd0a684":"code","bb79fe42":"code","d449bdef":"code","645ec857":"code","ed241f7f":"code","ea13c883":"code","23ee1c34":"code","49476d3c":"code","2d23a31d":"code","878cb005":"code","cdf1b6d4":"code","320a063d":"code","5fca6302":"code","807dec82":"code","3387f7a7":"code","c7222884":"code","93edaaf5":"code","e65ff300":"code","41592036":"code","4340a221":"code","e4298e01":"code","78d8b44f":"code","d8c773b0":"code","02d04296":"code","061ecaaf":"code","cb93d1dd":"code","18b5b54c":"code","9229375e":"code","f667abe4":"code","a11d9ab6":"code","9f8df068":"code","d425f3b4":"code","14dad769":"code","17026cbd":"code","2d91ce98":"code","cb7f5095":"code","7a82f7ad":"code","cb7d618e":"code","46ef6520":"code","38c4c5cd":"code","7cf67539":"code","7af294c4":"code","4c5fa787":"code","1700e390":"code","47c1c628":"code","41fa9d0c":"code","40c5db93":"code","1663eba3":"code","67e573eb":"code","5771461b":"code","b6df7647":"code","2fd29320":"code","f696bb6a":"code","f7a66f1b":"code","a4bcb0dc":"code","cc5ebbda":"code","06805dad":"code","7a2eeae2":"code","580db3f9":"code","943be9b0":"code","49a6bf7e":"code","a437dc2f":"code","3ce5d911":"code","dfb76fc2":"code","a2a1a1b4":"code","4b7842a8":"code","1075cde8":"code","1faa8061":"code","5c66c80f":"code","74bd0982":"code","f5e905a1":"code","c8422c56":"code","716c6d4d":"code","9f8b2bc0":"code","ac8a96c3":"code","13331d7a":"code","14c33c4b":"code","823905a6":"code","34d3e05c":"code","0486eb54":"code","f28995d6":"code","5ead1ce7":"code","3b0de2cf":"code","445281f2":"code","05035e8a":"code","314cf4a1":"code","1a56859e":"code","8f2d0674":"code","a54a7314":"code","da1ccb25":"code","04fc9b09":"code","018661d1":"code","a5ba8af7":"code","4f725865":"code","14c49806":"code","a656764e":"code","bd380f21":"code","4dbe1c6b":"code","9861ea04":"code","bd6c6d8f":"code","ec68a8a4":"code","05933a85":"code","8c08f9a3":"code","69b4d3c6":"code","140c9855":"code","54be9a11":"code","27b89d78":"code","5d952000":"code","6ab3df58":"code","3dfe445d":"code","a337d127":"code","93979d84":"code","d035a305":"code","7d85f162":"code","da1456e9":"code","2529f8d3":"code","45366a31":"code","35cd9cff":"code","8816e46b":"code","ca157db6":"code","deb14b97":"code","9fdb11b6":"code","313d52b4":"code","881e86e3":"code","853aa163":"code","6f769441":"code","10c830a8":"code","44dad648":"code","37b63e08":"code","3f9b1d8b":"code","e9261860":"code","1a4c2333":"code","2c0cb64f":"code","b7c5f0bc":"code","3797ce83":"code","6f0bd996":"code","2ca080e7":"code","2ef31362":"code","28f1d4f3":"code","e1d094f1":"code","0bbfc031":"code","5738ef16":"code","3ea025cf":"code","780030bd":"code","9047a5ca":"code","fd67728c":"code","479d90cd":"code","0adb55d3":"code","61a8a42f":"code","1dce7390":"code","e0e96f43":"code","8eb18baa":"code","f01eb78f":"code","8bbc3594":"code","9c90945e":"code","7ba7cb3e":"code","c551f537":"code","a2db592b":"code","3ad44132":"code","59bdd16a":"code","e40c618a":"code","b3745cad":"code","9f254e95":"code","adba8437":"code","6973f0ba":"code","ce1003c0":"code","295353f4":"code","ba6b36ba":"code","b9a2d7ec":"code","42799f34":"code","ebe18c98":"code","ba17ac29":"code","1c380058":"code","647e2ec7":"code","0afc13c1":"code","95257910":"code","756629f4":"code","006e168a":"code","a5209cb3":"code","90dc3bca":"code","c63b01e3":"code","f1185a0a":"code","245d1288":"code","68e43742":"code","61a75375":"code","2c2fe8aa":"code","81867546":"code","daeedfda":"code","5e45519d":"code","3153830f":"code","273ed7ae":"code","a8cb6f8a":"code","0cf55620":"code","2ac201f7":"code","002a9a70":"code","17adc34e":"code","f38c9161":"code","daca32ec":"code","f248cc18":"code","4f740147":"code","228f4e5a":"code","068ed059":"code","5f462335":"code","2b0176c7":"code","7da34ee9":"code","163916c8":"code","e495b63e":"code","6c645e98":"code","1dac6289":"code","5c78f2d9":"code","a5e9ba0a":"code","18437db2":"code","3f6e78d6":"code","1354ebd8":"code","c6079f4d":"code","89f26cef":"code","1111d350":"code","ed7635d3":"code","17f8f9b9":"code","fdb5af56":"code","5256eeb8":"code","944ff4d4":"code","6cb115e7":"code","2b942fe0":"code","c48bf336":"code","080b47f6":"code","5738439d":"code","185ca2c7":"code","a87ddd9f":"code","1af250a6":"code","937337c0":"code","856cf848":"code","c80e87d7":"code","a46986e5":"code","8a08f16b":"code","8bb6fcbc":"code","50284d69":"code","2742aea1":"code","755e01a7":"code","959363e8":"code","963b5a24":"code","7e73b5c6":"code","6908f32d":"code","15ce76c5":"code","e1143db7":"code","fa540291":"code","ba0b2c4b":"code","29bc2850":"code","376ba50a":"code","a80b7416":"code","b570dd2a":"code","5de082c0":"code","a7ea5e34":"code","0ba22f2d":"code","94222f0d":"code","2c1042ef":"code","dfc061c5":"code","d829797c":"code","32fc95e0":"code","05006de5":"code","b766e6f8":"code","f06063f7":"code","91e7b3c8":"code","8c31ebe4":"code","8f19629c":"code","396fe672":"code","489789de":"code","46f4146a":"code","34ae9670":"code","7a6e3742":"code","e2f7ad27":"code","f740a013":"code","9d982bb0":"code","392b9b32":"code","a1dddf5e":"code","aff247bd":"code","c091709c":"code","2899cbe5":"code","c041af58":"code","a3dae160":"code","c6ea8f3c":"code","0e93b073":"code","e9395e6c":"code","d4b26275":"code","42389015":"code","2ebdf7bb":"code","f628bf4c":"code","45636f61":"code","3f49ac00":"code","0f2ceff2":"code","d3a1119a":"code","470b310b":"code","7b943ebd":"code","39d4a653":"code","f666eef8":"code","fbb438e9":"code","c90c35f0":"code","db6b454c":"code","f085c199":"code","0456f68c":"code","1cbac8e6":"code","f93487c6":"code","a18cd6c7":"code","2f3a88cb":"code","f6d40453":"code","d41177b9":"code","31d2479f":"code","3bc21f7c":"code","18559cc8":"code","171703cc":"code","9f87cba4":"code","357b33fb":"code","881ce98b":"code","345af8f3":"code","4063055a":"code","29f489ed":"code","319dc5bc":"code","73605c08":"code","2c1a43d8":"code","bb78749a":"code","61347e85":"code","cb256bba":"code","ab77e03a":"code","d679146c":"code","d940068c":"code","f2a3e152":"code","6196aa85":"code","7c5be3f8":"code","4f4ebfb3":"code","50c82633":"code","20674a44":"code","5536ed18":"code","bcb63d22":"code","f67f5c9f":"code","107363f1":"code","4702857d":"code","9f50cdc6":"code","4221e3a5":"code","2b47edfc":"code","0ace7c1c":"code","3a94c2fa":"code","f3231a8f":"code","39641ded":"code","a48460ad":"code","d630e0d3":"code","2cb1fd73":"code","4dbaac43":"code","b61212b2":"code","af014734":"code","521310d9":"code","a9c6aa1d":"code","05cda05a":"code","573be3c6":"code","b919179c":"markdown","84aed92f":"markdown","24f36e3e":"markdown","43489e97":"markdown","0f296c2e":"markdown","8d77df10":"markdown","623b244e":"markdown","eb9aeb8b":"markdown","8c43dba4":"markdown","85ff215a":"markdown","abe29945":"markdown","478b56b0":"markdown","f2227aea":"markdown","b0e30af5":"markdown","90af712f":"markdown","f8839f68":"markdown","8d5b20a1":"markdown","a67c7b99":"markdown","f9b416e7":"markdown","e9c29a22":"markdown","60ea6bd0":"markdown","9b8a034c":"markdown","7cd2d128":"markdown","2bec5069":"markdown","a3d56903":"markdown","97956c8a":"markdown","51f4aeef":"markdown","c381de87":"markdown","ca39d439":"markdown","49cf25bb":"markdown","48b1759b":"markdown","b2e2d319":"markdown","96fae472":"markdown","856885ec":"markdown","d71c84fd":"markdown","078c56e6":"markdown","a5884d5c":"markdown","e814917b":"markdown","652f17b3":"markdown","3c8d25ed":"markdown","f6483980":"markdown","69b27091":"markdown","dd7337c8":"markdown","28025d2a":"markdown","78b20af6":"markdown","5585fac6":"markdown","bcc9e29b":"markdown","26a65d97":"markdown","2b6528d2":"markdown","af187c18":"markdown"},"source":{"100cfbca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f229b83":"train_df=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nsubmission_df=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","b494e789":"train_df.columns","538c9d5b":"train_df.info()","5035fcc8":"train_df.info()","7fcbf555":"categorical=[]\nnumerical=[]\nfor i in range(train_df.columns.size):\n    if train_df.iloc[:,i].dtype==\"object\":\n        categorical.append(train_df.columns[i])\n    else:\n        numerical.append(train_df.columns[i])","348c3daa":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with Histogram\".format(variable))\n    plt.show()","5b245336":"for i in numerical:\n    plot_hist(i)","74c2b8c3":"def bar_plot(variable):\n    var=train_df[variable]\n    varValue=var.value_counts()\n    \n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}\\n{}\".format(variable, varValue))","195789ed":"for i in categorical:\n    bar_plot(i)","e40455b4":"categorical_df=train_df[categorical]\nnumerical_df=train_df[numerical]\ncategorical_df[\"SalePrice\"]=train_df.SalePrice","dcf88f25":"for i in range(0,42,1):\n    print(categorical_df[[categorical[i], \"SalePrice\"]].groupby([categorical[i]], as_index=False).mean().sort_values(by=\"SalePrice\", ascending=False))","1c16845d":"train_df.corr()","f8c19281":"numerical_df.corr().SalePrice","56608375":"def detect_outliers(df, features):\n    outlier_indices=[]\n    \n    for c in features:\n        # 1st quartile\n        Q1=np.percentile(df[c], 25)\n        # 2nd quartile\n        Q3=np.percentile(df[c], 75)\n        # IQR\n        IQR=Q3-Q1\n        # Outlier step\n        outlier_step=IQR*1.5\n        # Detect outliers and their indices\n        outlier_list_col=df[(df[c]<Q1-outlier_step) | (df[c]>Q3+outlier_step)].index\n        \n        outlier_indices.extend(outlier_list_col)\n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v>2)\n    return multiple_outliers\noutlier_index=detect_outliers(train_df, numerical)\noutlier_df=[]\nfor i in outlier_index:\n    outlier_df.append(train_df.iloc[i,:])\noutlier_df=pd.DataFrame(item for item in outlier_df)\n\ntrain_df=train_df.drop(detect_outliers(train_df, numerical),axis=0).reset_index(drop=True)","ef0b6261":"train_df.isnull()","fcd0a684":"train_df.columns[train_df.isnull().any()]","bb79fe42":"train_df.isnull().sum()","d449bdef":"submission_df.isnull().sum()","645ec857":"submission_df.columns[submission_df.isnull().any()]","ed241f7f":"miss_cat=categorical_df.columns[categorical_df.isnull().any()]\n\nmiss_cat_df_list=[]\nfor i in range(0,16,1):\n    miss_cat_df_list.append(train_df[train_df[miss_cat[i]].isnull()])\nmiss_cat_df_list","ea13c883":"train_df.Alley=train_df.Alley.fillna(\"NA\")\ntrain_df.MasVnrType=train_df.MasVnrType.fillna(\"None\")\ntrain_df.MasVnrArea=train_df.MasVnrArea.fillna(0)\ntrain_df.BsmtQual=train_df.BsmtQual.fillna(\"NA\")\ntrain_df.BsmtCond=train_df.BsmtCond.fillna(\"NA\")\ntrain_df.BsmtExposure=train_df.BsmtExposure.fillna(\"NA\")\ntrain_df.BsmtFinType1=train_df.BsmtFinType1.fillna(\"NA\")\ntrain_df.BsmtFinType2=train_df.BsmtFinType2.fillna(\"NA\")\ntrain_df.FireplaceQu=train_df.FireplaceQu.fillna(\"NA\")\ntrain_df.GarageQual=train_df.GarageQual.fillna(\"NA\")\ntrain_df.GarageType=train_df.GarageType.fillna(\"NA\")\n# Think more about this one --> train_df.GarageYrBlt=train_df.GarageYrBlt.fillna(\"NA\")\ntrain_df.GarageFinish=train_df.GarageFinish.fillna(\"NA\")\ntrain_df.GarageCond=train_df.GarageCond.fillna(\"NA\")\ntrain_df.PoolQC=train_df.PoolQC.fillna(\"NA\")\ntrain_df.Fence=train_df.Fence.fillna(\"NA\")\ntrain_df.MiscFeature=train_df.MiscFeature.fillna(\"NA\")\ntrain_df.Electrical.value_counts()\n# The counts show that SBrkr is way more likely to be replaced with a nan value\ntrain_df.Electrical=train_df.Electrical.fillna(\"SBrkr\")","23ee1c34":"miss_cat_df_list=[]\nfor i in range(0,16,1):\n    miss_cat_df_list.append(train_df[train_df[miss_cat[i]].isnull()])\nmiss_cat_df_list","49476d3c":"sub_miss_cat=submission_df[categorical].columns[submission_df[categorical].isnull().any()]\nsub_miss_cat","2d23a31d":"submission_df.Alley=submission_df.Alley.fillna(\"NA\")\nsubmission_df.MasVnrType=submission_df.MasVnrType.fillna(\"None\")\nsubmission_df.MasVnrArea=submission_df.MasVnrArea.fillna(0)\nsubmission_df.BsmtQual=submission_df.BsmtQual.fillna(\"NA\")\nsubmission_df.BsmtCond=submission_df.BsmtCond.fillna(\"NA\")\nsubmission_df.BsmtExposure=submission_df.BsmtExposure.fillna(\"NA\")\nsubmission_df.BsmtFinType1=submission_df.BsmtFinType1.fillna(\"NA\")\nsubmission_df.BsmtFinType2=submission_df.BsmtFinType2.fillna(\"NA\")\nsubmission_df.FireplaceQu=submission_df.FireplaceQu.fillna(\"NA\")\nsubmission_df.GarageQual=submission_df.GarageQual.fillna(\"NA\")\nsubmission_df.GarageType=submission_df.GarageType.fillna(\"NA\")\nsubmission_df.GarageFinish=submission_df.GarageFinish.fillna(\"NA\")\nsubmission_df.GarageCond=submission_df.GarageCond.fillna(\"NA\")\nsubmission_df.PoolQC=submission_df.PoolQC.fillna(\"NA\")\nsubmission_df.Fence=submission_df.Fence.fillna(\"NA\")\nsubmission_df.MiscFeature=submission_df.MiscFeature.fillna(\"NA\")\nsubmission_df.MSZoning.value_counts()\n# RL is more likely to be as nan value\nsubmission_df.MSZoning=submission_df.MSZoning.fillna(\"RL\")\nsubmission_df.Utilities.value_counts()\n# All of values are AllPub for Utilities feature so we will fill nan values with it\nsubmission_df.Utilities=submission_df.Utilities.fillna(\"AllPub\")\nsubmission_df.Exterior1st.value_counts()\n# VinylSd is more likely\nsubmission_df.Exterior1st=submission_df.Exterior1st.fillna(\"VinylSd\")\nsubmission_df.Exterior2nd.value_counts()\nsubmission_df.Exterior2nd=submission_df.Exterior2nd.fillna(\"VinylSd\")\nsubmission_df.KitchenQual.value_counts()\nsubmission_df.KitchenQual=submission_df.KitchenQual.fillna(\"TA\")\nsubmission_df.Functional.value_counts()\nsubmission_df.Functional=submission_df.Functional.fillna(\"Typ\")\nsubmission_df.SaleType.value_counts()\nsubmission_df.SaleType=submission_df.SaleType.fillna(\"WD\")","878cb005":"sub_miss_cat=submission_df[categorical].columns[submission_df[categorical].isnull().any()]\nsub_miss_cat","cdf1b6d4":"miss_num=numerical_df.columns[numerical_df.isnull().any()]\n\nmiss_num_df_list=[]\nfor i in range(0,3,1):\n    miss_num_df_list.append(train_df[train_df[miss_num[i]].isnull()])\nmiss_num_df_list","320a063d":"train_df.GarageYrBlt=train_df.GarageYrBlt.fillna(\"NA\")\nfront_area_ratio_list=train_df.LotFrontage\/train_df.LotArea\nfront_area_ratio_list.describe()\nfront_area_ratio=front_area_ratio_list.median()\n\nindex_nan=train_df[train_df.LotFrontage.isnull()].index\nfor i in index_nan:\n    train_df.LotFrontage[i]=train_df.LotArea[i]*front_area_ratio","5fca6302":"miss_num_df_list=[]\nfor i in range(0,3,1):\n    miss_num_df_list.append(train_df[train_df[miss_num[i]].isnull()])\nmiss_num_df_list","807dec82":"train_df.columns[train_df.isnull().any()]","3387f7a7":"train_df.isnull().sum()","c7222884":"sub_numerical=[]\nfor i in range(submission_df.columns.size):\n    if submission_df.iloc[:,i].dtype==\"float\":\n        sub_numerical.append(submission_df.columns[i])\n    elif submission_df.iloc[:,i].dtype==\"int\":\n        sub_numerical.append(submission_df.columns[i])","93edaaf5":"sub_numerical.remove(\"Id\")","e65ff300":"len(sub_numerical)","41592036":"sub_miss_num=submission_df[sub_numerical].columns[submission_df[sub_numerical].isnull().any()]\nsub_miss_num","4340a221":"front_area_ratio_list=submission_df.LotFrontage\/train_df.LotArea\nfront_area_ratio=front_area_ratio_list.median()\n\nindex_nan=submission_df[submission_df.LotFrontage.isnull()].index\nfor i in index_nan:\n    submission_df.LotFrontage[i]=submission_df.LotArea[i]*front_area_ratio\n\nsubmission_df.GarageYrBlt=submission_df.GarageYrBlt.fillna(\"NA\")\nsubmission_df.BsmtFinSF1=submission_df.BsmtFinSF1.fillna(submission_df.BsmtFinSF1.median())\nsubmission_df.BsmtFinSF2=submission_df.BsmtFinSF2.fillna(submission_df.BsmtFinSF2.median())\nsubmission_df.BsmtUnfSF=submission_df.BsmtUnfSF.fillna(submission_df.BsmtUnfSF.median())\nsubmission_df.TotalBsmtSF=submission_df.TotalBsmtSF.fillna(submission_df.TotalBsmtSF.median())\nsubmission_df.BsmtFullBath=submission_df.BsmtFullBath.fillna(submission_df.BsmtFullBath.median())\nsubmission_df.BsmtHalfBath=submission_df.BsmtHalfBath.fillna(submission_df.BsmtHalfBath.median())\nsubmission_df.GarageCars=submission_df.GarageCars.fillna(submission_df.GarageCars.median())\nsubmission_df.GarageArea=submission_df.GarageArea.fillna(submission_df.GarageArea.median())","e4298e01":"sub_miss_num=submission_df[sub_numerical].columns[submission_df[sub_numerical].isnull().any()]\nsub_miss_num","78d8b44f":"submission_df.columns.isnull().any()","d8c773b0":"f,ax=plt.subplots(figsize=(22,22))\nsns.heatmap(train_df.corr(), vmax=1, vmin=-1, annot=True, fmt=\".2f\")\nplt.show()","02d04296":"evaluative_features=[\"OverallQual\", \"OverallCond\", \"ExterQual\", \"ExterCond\", \"BsmtQual\", \"BsmtExposure\",\n                     \"BsmtCond\", \"BsmtFinType1\", \"BsmtFinType2\", \"HeatingQC\", \"KitchenQual\",\n                     \"FireplaceQu\", \"GarageQual\", \"GarageCond\" ,\"PoolQC\", \"Fence\"]","061ecaaf":"train_df.SalePrice=train_df.SalePrice.astype(float)\nOQ_List=list(train_df.OverallQual.unique())\nprice=[]\nfor i in OQ_List:\n    x=train_df[train_df.OverallQual==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nOQ_data=pd.DataFrame({\"quality_point\":OQ_List, \"price_average\":price})\nnew_index=(OQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=OQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.quality_point, y=sorted_data.price_average)\nplt.xlabel(\"Overall Quality Evaluation Point (Over 10)\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Overall Quality Evaluation and Price\", fontsize=17)\nplt.show()","cb93d1dd":"train_df.SalePrice=train_df.SalePrice.astype(float)\nOC_List=list(train_df.OverallCond.unique())\nprice=[]\nfor i in OC_List:\n    x=train_df[train_df.OverallCond==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nOC_data=pd.DataFrame({\"condition_point\":OC_List, \"price_average\":price})\nnew_index=(OC_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=OC_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.condition_point, y=sorted_data.price_average)\nplt.xlabel(\"Overall Condition Evaluation Point (Over 10)\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Overall Condition Evaluation and Price\", fontsize=17)\nplt.show()","18b5b54c":"evaluative_features[2]","9229375e":"train_df.SalePrice=train_df.SalePrice.astype(float)\nEQ_List=list(train_df.ExterQual.unique())\nprice=[]\nfor i in EQ_List:\n    x=train_df[train_df.ExterQual==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nEQ_data=pd.DataFrame({\"eq_point\":EQ_List, \"price_average\":price})\nnew_index=(EQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=EQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.eq_point, y=sorted_data.price_average)\nplt.xlabel(\"Exterior Quality Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Exterior Quality Evaluation and Price\", fontsize=17)\nplt.text(-0.3,280000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\", fontsize=17)\nplt.show()","f667abe4":"evaluative_features[3]","a11d9ab6":"train_df.SalePrice=train_df.SalePrice.astype(float)\nEC_List=list(train_df.ExterCond.unique())\nprice=[]\nfor i in EC_List:\n    x=train_df[train_df.ExterCond==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nEC_data=pd.DataFrame({\"ec_point\":EC_List, \"price_average\":price})\nnew_index=(EC_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=EC_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.ec_point, y=sorted_data.price_average)\nplt.xlabel(\"Exterior Condition Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Exterior Condition Evaluation and Price\", fontsize=17)\nplt.text(-0.3,140000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\", fontsize=17)\nplt.show()","9f8df068":"evaluative_features[4]","d425f3b4":"train_df.SalePrice=train_df.SalePrice.astype(float)\nBQ_List=list(train_df.BsmtQual.unique())\nprice=[]\nfor i in BQ_List:\n    x=train_df[train_df.BsmtQual==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nBQ_data=pd.DataFrame({\"bq_point\":BQ_List, \"price_average\":price})\nnew_index=(BQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=BQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.bq_point, y=sorted_data.price_average)\nplt.xlabel(\"Height Evaluation for Basement\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Height Evaluation for Basement and Price\", fontsize=17)\nplt.text(-0.3,220000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\\nNA: No Basement\", fontsize=17)\nplt.show()","14dad769":"evaluative_features[5]","17026cbd":"train_df.SalePrice=train_df.SalePrice.astype(float)\nBE_List=list(train_df.BsmtExposure.unique())\nprice=[]\nfor i in BE_List:\n    x=train_df[train_df.BsmtExposure==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nBE_data=pd.DataFrame({\"be_point\":BE_List, \"price_average\":price})\nnew_index=(BE_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=BE_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.be_point, y=sorted_data.price_average)\nplt.xlabel(\"Basement Exposure Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Basement Exposure Evaluation and Price\", fontsize=17)\nplt.text(-0.3,180000,\"Gd: Good Exposure\\nAv: Average Exposure\\nMn: Minimum Exposure\\nNo: No Exposure\\nNA: No Basement\", fontsize=17)\nplt.show()","2d91ce98":"evaluative_features[6]","cb7f5095":"train_df.SalePrice=train_df.SalePrice.astype(float)\nBC_List=list(train_df.BsmtCond.unique())\nprice=[]\nfor i in BC_List:\n    x=train_df[train_df.BsmtCond==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nBC_data=pd.DataFrame({\"bc_point\":BC_List, \"price_average\":price})\nnew_index=(BC_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=BC_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.bc_point, y=sorted_data.price_average)\nplt.xlabel(\"Basement Condition Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Basement Condition Evaluation and Price\", fontsize=17)\nplt.text(-0.3,180000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\\nNA: No Basement\", fontsize=17)\nplt.show()","7a82f7ad":"evaluative_features[7]","cb7d618e":"train_df.SalePrice=train_df.SalePrice.astype(float)\nBF1_List=list(train_df.BsmtFinType1.unique())\nprice=[]\nfor i in BF1_List:\n    x=train_df[train_df.BsmtFinType1==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nBF1_data=pd.DataFrame({\"bf1_point\":BF1_List, \"price_average\":price})\nnew_index=(BF1_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=BF1_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.bf1_point, y=sorted_data.price_average)\nplt.xlabel(\"Basement Finished Area Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Basement Finished Area Evaluation and Price\", fontsize=17)\nplt.text(-0.3,170000,\"GLQ: Good Living Quarters\\nALQ: Average Living Quarters\\nBLQ: Below Average Living Quarters\\nRec: Average Rec Room\\nLwQ: Low Quality\\nUnf: Unfinshed\\nNA: No Basement\", fontsize=17)\nplt.show()","46ef6520":"evaluative_features[8]","38c4c5cd":"train_df.SalePrice=train_df.SalePrice.astype(float)\nBF2_List=list(train_df.BsmtFinType2.unique())\nprice=[]\nfor i in BF2_List:\n    x=train_df[train_df.BsmtFinType2==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nBF2_data=pd.DataFrame({\"bf2_point\":BF2_List, \"price_average\":price})\nnew_index=(BF2_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=BF2_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.bf2_point, y=sorted_data.price_average)\nplt.xlabel(\"Basement Finished Area Evaluation (if multiple)\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Basement Finished Area Evaluation and Price\", fontsize=17)\nplt.text(-0.3,143000,\"GLQ: Good Living Quarters\\nALQ: Average Living Quarters\\nBLQ: Below Average Living Quarters\\nRec: Average Rec Room\\nLwQ: Low Quality\\nUnf: Unfinshed\\nNA: No Basement\", fontsize=17)\nplt.show()","7cf67539":"evaluative_features[9]","7af294c4":"train_df.SalePrice=train_df.SalePrice.astype(float)\nHQ_List=list(train_df.HeatingQC.unique())\nprice=[]\nfor i in HQ_List:\n    x=train_df[train_df.HeatingQC==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nHQ_data=pd.DataFrame({\"hq_point\":HQ_List, \"price_average\":price})\nnew_index=(HQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=HQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.hq_point, y=sorted_data.price_average)\nplt.xlabel(\"Heating Quality & Condition Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Heating Quality & Condition Evaluation and Price\", fontsize=17)\nplt.text(-0.3,162000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\", fontsize=17)\nplt.show()","4c5fa787":"evaluative_features[10]","1700e390":"train_df.SalePrice=train_df.SalePrice.astype(float)\nKQ_List=list(train_df.KitchenQual.unique())\nprice=[]\nfor i in KQ_List:\n    x=train_df[train_df.KitchenQual==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nKQ_data=pd.DataFrame({\"kq_point\":KQ_List, \"price_average\":price})\nnew_index=(KQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=KQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.kq_point, y=sorted_data.price_average)\nplt.xlabel(\"Kitchen Quality Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Kitchen Quality Evaluation and Price\", fontsize=17)\nplt.text(-0.3,232000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\", fontsize=17)\nplt.show()","47c1c628":"evaluative_features[11]","41fa9d0c":"train_df.SalePrice=train_df.SalePrice.astype(float)\nFQ_List=list(train_df.FireplaceQu.unique())\nprice=[]\nfor i in FQ_List:\n    x=train_df[train_df.FireplaceQu==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nFQ_data=pd.DataFrame({\"fq_point\":FQ_List, \"price_average\":price})\nnew_index=(FQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=FQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.fq_point, y=sorted_data.price_average)\nplt.xlabel(\"Fireplace Quality Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Fireplace Quality Evaluation and Price\", fontsize=17)\nplt.text(-0.3,232000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\\nNA: No Fireplace\", fontsize=17)\nplt.show()","40c5db93":"evaluative_features[12]","1663eba3":"train_df.SalePrice=train_df.SalePrice.astype(float)\nGQ_List=list(train_df.GarageQual.unique())\nprice=[]\nfor i in GQ_List:\n    x=train_df[train_df.GarageQual==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nGQ_data=pd.DataFrame({\"gq_point\":GQ_List, \"price_average\":price})\nnew_index=(GQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=GQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.gq_point, y=sorted_data.price_average)\nplt.xlabel(\"Garage Quality Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Garage Quality Evaluation and Price\", fontsize=17)\nplt.text(-0.3,152000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\\nNA: No Garage\", fontsize=17)\nplt.show()","67e573eb":"evaluative_features[13]","5771461b":"train_df.SalePrice=train_df.SalePrice.astype(float)\nGC_List=list(train_df.GarageCond.unique())\nprice=[]\nfor i in GC_List:\n    x=train_df[train_df.GarageCond==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nGC_data=pd.DataFrame({\"gc_point\":GC_List, \"price_average\":price})\nnew_index=(GC_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=GC_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.gc_point, y=sorted_data.price_average)\nplt.xlabel(\"Garage Condition Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Garage Condition Evaluation and Price\", fontsize=17)\nplt.text(-0.3,136000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\\nNA: No Garage\", fontsize=17)\nplt.show()","b6df7647":"evaluative_features[14]","2fd29320":"train_df.SalePrice=train_df.SalePrice.astype(float)\nPQ_List=list(train_df.PoolQC.unique())\nprice=[]\nfor i in PQ_List:\n    x=train_df[train_df.PoolQC==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nPQ_data=pd.DataFrame({\"pq_point\":PQ_List, \"price_average\":price})\nnew_index=(PQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=PQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.pq_point, y=sorted_data.price_average)\nplt.xlabel(\"Pool Quality Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Pool Quality Evaluation and Price\", fontsize=17)\nplt.text(-0.3,122000,\"Ex: Excellent\\nGd: Good\\nTA: Typical\/Average\\nFA: Fair\\nPo: Poor\\nNA: No Pool\", fontsize=17)\nplt.show()","f696bb6a":"evaluative_features[15]","f7a66f1b":"train_df.SalePrice=train_df.SalePrice.astype(float)\nFQ_List=list(train_df.Fence.unique())\nprice=[]\nfor i in FQ_List:\n    x=train_df[train_df.Fence==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\nFQ_data=pd.DataFrame({\"fq_point\":FQ_List, \"price_average\":price})\nnew_index=(FQ_data.price_average.sort_values(ascending=True)).index.values\nsorted_data=FQ_data.reindex(new_index)\n\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.fq_point, y=sorted_data.price_average)\nplt.xlabel(\"Fence Quality Evaluation\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Fence Quality Evaluation and Price\", fontsize=17)\nplt.text(-0.3,152000,\"GdPrv: Good Privacy\\nMnPrv: Minimum Privacy\\nGdWo: Good Wood\\nMnWw: Minimum Wood\/Wire\\nNA: No Fence\", fontsize=17)\nplt.show()","a4bcb0dc":"type_features=[]\nfor i in categorical:\n    if not i in evaluative_features:\n        type_features.append(i)","cc5ebbda":"len(type_features)","06805dad":"train_df.MSSubClass=train_df.MSSubClass.astype(str)","7a2eeae2":"type_features.append(\"MSSubClass\")","580db3f9":"type_features[29]","943be9b0":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.MSSubClass.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.MSSubClass==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Type and Price\", fontsize=17)\nplt.text(-0.3, 101000, \"20: 1-STORY 1946 & NEWER ALL STYLES\\n30: 1-STORY 1945 & OLDER\\n40: 1-STORY W\/FINISHED ATTIC ALL AGES\\n45: 1-1\/2 STORY - UNFINISHED ALL AGES\\n50: 1-1\/2 STORY FINISHED ALL AGES\\n60: 2-STORY 1946 & NEWER\\n70: 2-STORY 1945 & OLDER\\n75: 2-1\/2 STORY ALL AGES\\n80: SPLIT OR MULTI-LEVEL\\n85: SPLIT FOYER\\n90: DUPLEX - ALL STYLES AND AGES\\n120: 1-STORY PUD (Planned Unit Development) - 1946 & NEWER\\n150: 1-1\/2 STORY PUD - ALL AGES\\n160: 2-STORY PUD - 1946 & NEWER\\n180: PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\\n190: 2 FAMILY CONVERSION - ALL STYLES AND AGES\", fontsize=14)\nplt.show()","49a6bf7e":"type_features[0]","a437dc2f":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.MSZoning.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.MSZoning==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Zoning Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Zoning Type and Price\", fontsize=17)\nplt.text(-0.3, 151000, \"A: Agriculture\\nC: Commercial\\nFV: Floating Village Residential\\nI: Industrial\\nRH: Residential High Density\\nRL: Residential Low Density\\nRP: Residential Low Density Park\\nRM: Residential Medium Density\", fontsize=14)\nplt.show()","3ce5d911":"type_features[1]","dfb76fc2":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Street.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Street==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Street Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Street Type and Price\", fontsize=17)\nplt.text(-0.4, 153000, \"Grvl: Gravel\\nPave: Paved\", fontsize=14)\nplt.show()","a2a1a1b4":"type_features[2]","4b7842a8":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Alley.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Alley==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Alley Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Alley Type and Price\", fontsize=17)\nplt.text(-0.4, 153000, \"Grvl: Gravel\\nPave: Paved\\nNA: No Alley Access\", fontsize=14)\nplt.show()","1075cde8":"type_features[3]","1faa8061":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.LotShape.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.LotShape==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Lot Shape of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Lot Shape and Price\", fontsize=17)\nplt.text(-0.4, 179000, \"Reg: Regular\\nIR1: Slightly irregular\\nIR2:Moderately Irregular\\nIR3: Irregular\", fontsize=14)\nplt.show()","5c66c80f":"type_features[4]","74bd0982":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.LandContour.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.LandContour==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Flatness of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Flatness and Price\", fontsize=17)\nplt.text(-0.4, 189000, \"Lvl: Near Flat\/Level\\nBnk: Banked - Quick and significant rise from street grade to building\\nHLS: Hillside - Significant slope from side to side\\nLow: Depression\", fontsize=14)\nplt.show()","f5e905a1":"type_features[5]","c8422c56":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Utilities.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Utilities==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Utilities of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Utilities and Price\", fontsize=17)\nplt.text(-0.4, 189000, \"AllPub: All public Utilities (E,G,W,& S)\\nNoSewr: Electricity, Gas, and Water (Septic Tank)\\nNoSeWa: Electricity and Gas Only\\nELO: Electricity only\", fontsize=14)\nplt.show()","716c6d4d":"type_features[6]","9f8b2bc0":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.LotConfig.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.LotConfig==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Lot Configuration of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Lot Configuration and Price\", fontsize=17)\nplt.text(-0.4, 179000, \"Inside: Inside lot\\nCorner: Corner lot\\nCulDSac: Cul-de-sac\\nFR2: Frontage on 2 sides of property\\nFR3: Frontage on 3 sides of property\", fontsize=14)\nplt.show()","ac8a96c3":"type_features[7]","13331d7a":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.LandSlope.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.LandSlope==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Land Slope of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Land Slope and Price\", fontsize=17)\nplt.text(-0.4, 177000, \"Gtl: Gentle slope\\nMod: Moderate Slope\\nSev: Severe Slope\", fontsize=14)\nplt.show()","14c33c4b":"type_features[8]","823905a6":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Neighborhood.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Neighborhood==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Neighborhood of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Neighborhood and Price\", fontsize=17)\nplt.show()","34d3e05c":"type_features[9]","0486eb54":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Condition1.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Condition1==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Proximity to Various Conditions of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Proximity to Various Conditions and Price\", fontsize=17)\nplt.text(-0.4, 177000, \"\", fontsize=14)\nplt.show()","f28995d6":"type_features[10]","5ead1ce7":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Condition2.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Condition2==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Proximity to Various Conditions of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Proximity to Various Conditions (if multiple) and Price\", fontsize=17)\nplt.text(-0.4, 177000, \"\", fontsize=14)\nplt.show()","3b0de2cf":"type_features[11]","445281f2":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.BldgType.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.BldgType==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Type of House and Price\", fontsize=17)\nplt.text(-0.4, 150000, \"1Fam: Single-family Detached\\n2FmCon: Two-family Conversion; originally built as one-family dwelling\\nDuplx: Duplex\\nTwnhsE: Townhouse End Unit\\nTwnhsI: Townhouse Inside Unit\", fontsize=14)\nplt.show()","05035e8a":"type_features[12]","314cf4a1":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.HouseStyle.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.HouseStyle==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Style of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Style of House and Price\", fontsize=17)\nplt.text(-0.4, 150000, \"1Story: One story\\n1.5Fin: One and one-half story: 2nd level finished\\n1.5Unf: One and one-half story: 2nd level unfinished\\n2Story: Two story\\n2.5Fin: Two and one-half story: 2nd level finished\\n2.5Unf: Two and one-half story: 2nd level unfinished\\nSFoyer: Split Foyer\\nSLvl: Split Level\", fontsize=14)\nplt.show()","1a56859e":"type_features[13]","8f2d0674":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.RoofStyle.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.RoofStyle==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Roof Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Roof Type of House and Price\", fontsize=17)\nplt.text(-0.4, 210000, \"Flat: Flat\\nGable: Gable\\nGambrel: Gabrel (Barn)\\nHip: Hip\\nMansard: Mansard\\nShed: Shed\", fontsize=14)\nplt.show()","a54a7314":"len(type_features)","da1ccb25":"type_features[14]","04fc9b09":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.RoofMatl.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.RoofMatl==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Roof Material of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Roof Material of House and Price\", fontsize=17)\nplt.text(-0.4, 200000, \"ClyTile: Clay or Tile\\nCompShg: Standard (Composite) Shingle\\nMetal: Metal\\nTar&Grv: Gravel & Tar\\nWdShake: Wood Shakes\\nWdShngl: Wood Shingles\", fontsize=14)\nplt.show()","018661d1":"type_features[15]","a5ba8af7":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Exterior1st.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Exterior1st==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Exterior Covering of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Exterior Covering of House and Price\", fontsize=17)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","4f725865":"type_features[16]","14c49806":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Exterior2nd.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Exterior2nd==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Exterior Covering of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Exterior Covering (if multiple) of House and Price\", fontsize=17)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","a656764e":"type_features[17]","bd380f21":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.MasVnrType.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.MasVnrType==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Masonry Veneer Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Masonry Veneer Type of House and Price\", fontsize=17)\nplt.text(-0.4, 201000, \"BrkCmn: Brick Common\\nBrkFace: Brick Face\\nCBlock: Cinder Block\\nNone: None\\nStone: Stone\", fontsize=14)\nplt.show()","4dbe1c6b":"type_features[18]","9861ea04":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Foundation.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Foundation==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Foundation Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Foundation Type of House and Price\", fontsize=17)\nplt.text(-0.4, 171000, \"BrkTil: Brick & Tile\\nCBlock: Cinder Block\\nPConc: Poured Contrete\\nSlab: Slab\\nStone: Stone\\nWood: Wood\", fontsize=14)\nplt.show()","bd6c6d8f":"type_features[19]","ec68a8a4":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Heating.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Heating==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Heating Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Heating Type of House and Price\", fontsize=17)\nplt.text(-0.4, 141000, \"Floor: Floor Furnace\\nGasA: Gas forced warm air furnace\\nGasW: Gas hot water or steam heat\\nGrav: Gravity furnace\\nOthW: Hot water or steam heat other than gas\\nWall: Wall furnac\", fontsize=14)\nplt.show()","05933a85":"type_features[20]","8c08f9a3":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.CentralAir.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.CentralAir==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Central Air Conditioning of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Central Air Conditioning House and Price\", fontsize=17)\nplt.text(-0.4, 161000, \"N: No\\nY:Yes\", fontsize=14)\nplt.show()","69b4d3c6":"type_features[21]","140c9855":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Electrical.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Electrical==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Electrical System of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Electrical System of House and Price\", fontsize=17)\nplt.text(-0.4, 151000, \"SBrkr: Standard Circuit Breakers & Romex\\nFuseA: Fuse Box over 60 AMP and all Romex wiring (Average)\\nFuseF: 60 AMP Fuse Box and mostly Romex wiring (Fair)\\nFuseP: 60 AMP Fuse Box and mostly knob & tube wiring (poor)\\nMix: Mixed\", fontsize=14)\nplt.show()","54be9a11":"type_features[22]","27b89d78":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.Functional.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.Functional==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Functionality of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Functionality of House and Price\", fontsize=17)\nplt.text(-0.4, 135000, \"Typ: Typical Functionality\\nMin1: Minor Deductions 1\\nMin2: Minor Deductions 2\\nMod: Moderate Deductions\\nMaj1: Major Deductions 1\\nMaj2: Major Deductions 2\\nSev: Severely Damaged\\nSal: Salvage only\", fontsize=14)\nplt.show()","5d952000":"type_features[23]","6ab3df58":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.GarageType.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.GarageType==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Garage Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Garage Type of House and Price\", fontsize=17)\nplt.text(-0.4, 175000, \"2Types: More than one type of garage\\nAttchd: Attached to home\\nBasment: Basement Garage\\nBuiltIn: Built-In (Garage part of house - typically has room above garage)\\nCarPort: Car Port\\nDetchd: Detached from home\\nNA: No Garage\", fontsize=14)\nplt.show()","3dfe445d":"type_features[24]","a337d127":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.GarageFinish.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.GarageFinish==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Interior Finish of the Garage\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Interior Finish of the Garage and Price\", fontsize=17)\nplt.text(-0.4, 195000, \"Fin: Finished\\nRFn: Rough Finished\\nUnf: Unfinished\\nNA: No Garage\", fontsize=14)\nplt.show()","93979d84":"type_features[25]","d035a305":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.PavedDrive.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.PavedDrive==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Paved Driveaway of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Paved Driveaway of House and Price\", fontsize=17)\nplt.text(-0.4, 155000, \"Y: Paved\\nP: Partial Pavement\\nN: Dirt\/Gravel\", fontsize=14)\nplt.show()","7d85f162":"type_features[26]","da1456e9":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.MiscFeature.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.MiscFeature==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Miscellaneous Features of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Miscellaneous Features of House and Price\", fontsize=17)\nplt.text(-0.4, 145000, \"Elev: Elevator\\nGar2: 2nd Garage (if not described in garage section)\\nOthr: Other\\nShed: Shed (over 100 SF)\\nTenC: Tennis Court\\nNA: None\", fontsize=14)\nplt.show()","2529f8d3":"type_features[27]","45366a31":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.SaleType.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.SaleType==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Sale Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Sale Type of House and Price\", fontsize=17)\nplt.text(-0.4, 145000, \"\", fontsize=14)\nplt.show()","35cd9cff":"type_features[28]","8816e46b":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.SaleCondition.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.SaleCondition==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Sale Condition of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Sale Condition of House and Price\", fontsize=17)\nplt.text(-0.4, 205000, \"Normal: Normal Sale\\nAbnorml: Abnormal Sale -  trade, foreclosure, short sale\\nAdjLand: Adjoining Land Purchase\\nAlloca: Allocation - two linked properties with separate deeds, typically condo with a garage unit\t\\nFamily: Sale between family members\\nPartial: Home was not completed when last assessed (associated with New Homes)\", fontsize=14)\nplt.show()","ca157db6":"train_index=train_df.index.values\ndf=pd.concat([train_df, submission_df], axis=0).reset_index(drop=True)","deb14b97":"categorical_features=type_features\ncategorical_features","9fdb11b6":"numerical.remove(\"Id\")\nnumerical.remove(\"MSSubClass\")\nnumerical.remove(\"OverallQual\")\nnumerical.remove(\"OverallCond\")\nnumerical_features=numerical\nnumerical_features","313d52b4":"evaluative_features","881e86e3":"evaluative_features","853aa163":"df.OverallQual.unique()","6f769441":"g=sns.factorplot(x=\"OverallQual\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","10c830a8":"df.OverallCond.unique()","44dad648":"g=sns.factorplot(x=\"OverallCond\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","37b63e08":"df.ExterQual.unique()","3f9b1d8b":"eq_list=[]\nfor i in range(0, len(df.ExterQual), 1):\n    if df.ExterQual[i]==\"Ex\":\n        eq_list.append(5)\n    elif df.ExterQual[i]==\"Gd\":\n        eq_list.append(4)\n    elif df.ExterQual[i]==\"TA\":\n        eq_list.append(3)\n    elif df.ExterQual[i]==\"Fa\":\n        eq_list.append(2)\n    else:\n        eq_list.append(1)\ndf.ExterQual=eq_list","e9261860":"g=sns.factorplot(x=\"ExterQual\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","1a4c2333":"df.ExterCond.unique()","2c0cb64f":"ec_list=[]\nfor i in range(0, len(df.ExterCond), 1):\n    if df.ExterCond[i]==\"Ex\":\n        ec_list.append(5)\n    elif df.ExterCond[i]==\"Gd\":\n        ec_list.append(4)\n    elif df.ExterCond[i]==\"TA\":\n        ec_list.append(3)\n    elif df.ExterCond[i]==\"Fa\":\n        ec_list.append(2)\n    else:\n        ec_list.append(1)\ndf.ExterCond=ec_list","b7c5f0bc":"g=sns.factorplot(x=\"ExterCond\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","3797ce83":"evaluative_features[4]","6f0bd996":"df.BsmtQual.unique()","2ca080e7":"bq_list=[]\nfor i in range(0, len(df.BsmtQual), 1):\n    if df.BsmtQual[i]==\"Ex\":\n        bq_list.append(5)\n    elif df.BsmtQual[i]==\"Gd\":\n        bq_list.append(4)\n    elif df.BsmtQual[i]==\"TA\":\n        bq_list.append(3)\n    elif df.BsmtQual[i]==\"Fa\":\n        bq_list.append(2)\n    elif df.BsmtQual[i]==\"Po\":\n        bq_list.append(1)\n    elif df.BsmtQual[i]==\"NA\":\n        bq_list.append(0)\ndf.BsmtQual=bq_list","2ef31362":"g=sns.factorplot(x=\"BsmtQual\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","28f1d4f3":"evaluative_features[5]","e1d094f1":"df.BsmtExposure.unique()","0bbfc031":"be_list=[]\nfor i in range(0, len(df.BsmtExposure), 1):\n    if df.BsmtExposure[i]==\"Gd\":\n        be_list.append(4)\n    elif df.BsmtExposure[i]==\"Av\":\n        be_list.append(3)\n    elif df.BsmtExposure[i]==\"Mn\":\n        be_list.append(2)\n    else:\n        be_list.append(0)\ndf.BsmtExposure=be_list","5738ef16":"g=sns.factorplot(x=\"BsmtExposure\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","3ea025cf":"evaluative_features[6]","780030bd":"df.BsmtCond.unique()","9047a5ca":"bc_list=[]\nfor i in range(0, len(df.BsmtCond), 1):\n    if df.BsmtCond[i]==\"Ex\":\n        bc_list.append(5)\n    elif df.BsmtCond[i]==\"Gd\":\n        bc_list.append(4)\n    elif df.BsmtCond[i]==\"TA\":\n        bc_list.append(3)\n    elif df.BsmtCond[i]==\"Fa\":\n        bc_list.append(2)\n    elif df.BsmtCond[i]==\"Po\":\n        bc_list.append(1)\n    else:\n        bc_list.append(0)\ndf.BsmtCond=bc_list","fd67728c":"g=sns.factorplot(x=\"BsmtCond\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","479d90cd":"evaluative_features[7]","0adb55d3":"df.BsmtFinType1.unique()","61a8a42f":"bf1_list=[]\nfor i in range(0, len(df.BsmtFinType1), 1):\n    if df.BsmtFinType1[i]==\"GLQ\":\n        bf1_list.append(6)\n    elif df.BsmtFinType1[i]==\"ALQ\":\n        bf1_list.append(5)\n    elif df.BsmtFinType1[i]==\"BLQ\":\n        bf1_list.append(4)\n    elif df.BsmtFinType1[i]==\"Rec\":\n        bf1_list.append(3)\n    elif df.BsmtFinType1[i]==\"LwQ\":\n        bf1_list.append(2)\n    elif df.BsmtFinType1[i]==\"Unf\":\n        bf1_list.append(1)\n    else:\n        bf1_list.append(0)\nset(bf1_list)\ndf.BsmtFinType1=bf1_list","1dce7390":"g=sns.factorplot(x=\"BsmtFinType1\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","e0e96f43":"evaluative_features[8]","8eb18baa":"df.BsmtFinType2.unique()","f01eb78f":"bf2_list=[]\nfor i in range(0, len(df.BsmtFinType2), 1):\n    if df.BsmtFinType2[i]==\"GLQ\":\n        bf2_list.append(6)\n    elif df.BsmtFinType2[i]==\"ALQ\":\n        bf2_list.append(5)\n    elif df.BsmtFinType2[i]==\"BLQ\":\n        bf2_list.append(4)\n    elif df.BsmtFinType2[i]==\"Rec\":\n        bf2_list.append(3)\n    elif df.BsmtFinType2[i]==\"LwQ\":\n        bf2_list.append(2)\n    elif df.BsmtFinType2[i]==\"Unf\":\n        bf2_list.append(1)\n    else:\n        bf2_list.append(0)\nset(bf2_list)\ndf.BsmtFinType2=bf2_list","8bbc3594":"g=sns.factorplot(x=\"BsmtFinType2\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","9c90945e":"evaluative_features[9]","7ba7cb3e":"df.HeatingQC.unique()","c551f537":"hq_list=[]\nfor i in range(0, len(df.HeatingQC), 1):\n    if df.HeatingQC[i]==\"Ex\":\n        hq_list.append(5)\n    elif df.HeatingQC[i]==\"Gd\":\n        hq_list.append(4)\n    elif df.HeatingQC[i]==\"TA\":\n        hq_list.append(3)\n    elif df.HeatingQC[i]==\"Fa\":\n        hq_list.append(2)\n    elif df.HeatingQC[i]==\"Po\":\n        hq_list.append(1)\n    else:\n        hq_list.append(0)\nset(hq_list)\ndf.HeatingQC=hq_list","a2db592b":"df[evaluative_features]","3ad44132":"g=sns.factorplot(x=\"HeatingQC\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","59bdd16a":"evaluative_features[10]","e40c618a":"df.KitchenQual.unique()","b3745cad":"kq_list=[]\nfor i in range(0, len(df.KitchenQual), 1):\n    if df.KitchenQual[i]==\"Ex\":\n        kq_list.append(5)\n    elif df.KitchenQual[i]==\"Gd\":\n        kq_list.append(4)\n    elif df.KitchenQual[i]==\"TA\":\n        kq_list.append(3)\n    elif df.KitchenQual[i]==\"Fa\":\n        kq_list.append(2)\n    elif df.KitchenQual[i]==\"Po\":\n        kq_list.append(1)\nset(kq_list)\ndf.KitchenQual=kq_list","9f254e95":"g=sns.factorplot(x=\"KitchenQual\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","adba8437":"evaluative_features[11]","6973f0ba":"df.FireplaceQu.unique()","ce1003c0":"fq_list=[]\nfor i in range(0, len(df.FireplaceQu), 1):\n    if df.FireplaceQu[i]==\"Ex\":\n        fq_list.append(5)\n    elif df.FireplaceQu[i]==\"Gd\":\n        fq_list.append(4)\n    elif df.FireplaceQu[i]==\"TA\":\n        fq_list.append(3)\n    elif df.FireplaceQu[i]==\"Fa\":\n        fq_list.append(2)\n    elif df.FireplaceQu[i]==\"Po\":\n        fq_list.append(1)\n    else:\n        fq_list.append(0)\nset(fq_list)\ndf.FireplaceQu=fq_list","295353f4":"g=sns.factorplot(x=\"FireplaceQu\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","ba6b36ba":"evaluative_features[12]","b9a2d7ec":"df.GarageQual.unique()","42799f34":"gq_list=[]\nfor i in range(0, len(df.GarageQual), 1):\n    if df.GarageQual[i]==\"Ex\":\n        gq_list.append(5)\n    elif df.GarageQual[i]==\"Gd\":\n        gq_list.append(4)\n    elif df.GarageQual[i]==\"TA\":\n        gq_list.append(3)\n    elif df.GarageQual[i]==\"Fa\":\n        gq_list.append(2)\n    elif df.GarageQual[i]==\"Po\":\n        gq_list.append(1)\n    else:\n        gq_list.append(0)\nset(gq_list)\ndf.GarageQual=gq_list","ebe18c98":"g=sns.factorplot(x=\"GarageQual\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","ba17ac29":"evaluative_features[13]","1c380058":"df.GarageCond.unique()","647e2ec7":"gc_list=[]\nfor i in range(0, len(df.GarageCond), 1):\n    if df.GarageCond[i]==\"Ex\":\n        gc_list.append(5)\n    elif df.GarageCond[i]==\"Gd\":\n        gc_list.append(4)\n    elif df.GarageCond[i]==\"TA\":\n        gc_list.append(3)\n    elif df.GarageCond[i]==\"Fa\":\n        gc_list.append(2)\n    elif df.GarageCond[i]==\"Po\":\n        gc_list.append(1)\n    else:\n        gc_list.append(0)\nset(gc_list)\ndf.GarageCond=gc_list","0afc13c1":"g=sns.factorplot(x=\"GarageCond\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","95257910":"evaluative_features[14]","756629f4":"df.PoolQC.unique()","006e168a":"pq_list=[]\nfor i in range(0, len(df.PoolQC), 1):\n    if df.PoolQC[i]==\"Ex\":\n        pq_list.append(5)\n    elif df.PoolQC[i]==\"Gd\":\n        pq_list.append(4)\n    elif df.PoolQC[i]==\"TA\":\n        pq_list.append(3)\n    elif df.PoolQC[i]==\"Fa\":\n        pq_list.append(2)\n    else:\n        pq_list.append(0)\nset(pq_list)\ndf.PoolQC=pq_list","a5209cb3":"g=sns.factorplot(x=\"PoolQC\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","90dc3bca":"evaluative_features[15]","c63b01e3":"df.Fence.unique()","f1185a0a":"f_list=[]\nfor i in range(0, len(df.Fence), 1):\n    if df.Fence[i]==\"GdWo\":\n        f_list.append(5)\n    elif df.Fence[i]==\"GdPrv\":\n        f_list.append(5)\n    elif df.Fence[i]==\"MnWw\":\n        f_list.append(2)\n    elif df.Fence[i]==\"MnPrv\":\n        f_list.append(2)\n    else:\n        f_list.append(0)\nset(f_list)\ndf.Fence=f_list","245d1288":"g=sns.factorplot(x=\"Fence\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","68e43742":"df[evaluative_features]","61a75375":"type_features","2c2fe8aa":"type_features[0]","81867546":"df.MSZoning.unique()","daeedfda":"g=sns.factorplot(x=\"MSZoning\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","5e45519d":"mz_list=[]\nfor i in range(0, len(df.MSZoning), 1):\n    if df.MSZoning[i]==\"FV\":\n        mz_list.append(\"FVRL\")\n    elif df.MSZoning[i]==\"RL\":\n        mz_list.append(\"FVRL\")\n    elif df.MSZoning[i]==\"RH\":\n        mz_list.append(\"RHRM\")\n    elif df.MSZoning[i]==\"RM\":\n        mz_list.append(\"RHRM\")\n    else:\n        mz_list.append(\"C\")\nset(mz_list)\ndf.MSZoning=mz_list","3153830f":"g=sns.factorplot(x=\"MSZoning\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","273ed7ae":"type_features[1]","a8cb6f8a":"df.Street.unique()","0cf55620":"g=sns.factorplot(x=\"Street\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","2ac201f7":"type_features[2]","002a9a70":"df.Alley.unique()","17adc34e":"g=sns.factorplot(x=\"Alley\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","f38c9161":"type_features[3]","daca32ec":"df.LotShape.unique()","f248cc18":"g=sns.factorplot(x=\"LotShape\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","4f740147":"ls_list=[]\nfor i in range(0, len(df.LotShape), 1):\n    if df.LotShape[i]==\"IR3\":\n        ls_list.append(\"IR\")\n    elif df.LotShape[i]==\"IR2\":\n        ls_list.append(\"IR\")\n    elif df.LotShape[i]==\"IR1\":\n        ls_list.append(\"IR\")\n    else:\n        ls_list.append(\"R\")\nset(ls_list)\ndf.LotShape=ls_list","228f4e5a":"g=sns.factorplot(x=\"LotShape\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","068ed059":"type_features[4]","5f462335":"df.LandContour.unique()","2b0176c7":"g=sns.factorplot(x=\"LandContour\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","7da34ee9":"lc_list=[]\nfor i in df.LandContour:\n    if i==\"Low\":\n        lc_list.append(\"LH\")\n    elif i==\"HLS\":\n        lc_list.append(\"LH\")\n    elif i==\"Lvl\":\n        lc_list.append(\"Lvl\")\n    else:\n        lc_list.append(\"Bnk\")\ndf.LandContour=lc_list","163916c8":"set(lc_list)","e495b63e":"g=sns.factorplot(x=\"LandContour\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","6c645e98":"type_features[5]","1dac6289":"df.Utilities.unique()","5c78f2d9":"type_features[6]","a5e9ba0a":"df.LotConfig.unique()","18437db2":"g=sns.factorplot(x=\"LotConfig\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","3f6e78d6":"loc_list=[]\nfor i in df.LotConfig:\n    if i==\"FR3\":\n        loc_list.append(\"CF\")\n    elif i==\"CulDSac\":\n        loc_list.append(\"CF\")\n    elif i==\"Inside\":\n        loc_list.append(\"IFC\")\n    elif i==\"FR2\":\n        loc_list.append(\"IFC\")\n    elif i==\"Corner\":\n        loc_list.append(\"IFC\")\nset(loc_list)\ndf.LotConfig=loc_list","1354ebd8":"g=sns.factorplot(x=\"LotConfig\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","c6079f4d":"type_features[7]","89f26cef":"df.LandSlope.unique()","1111d350":"g=sns.factorplot(x=\"LandSlope\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","ed7635d3":"type_features[8]","17f8f9b9":"df.Neighborhood.unique()","fdb5af56":"List=list(df.Neighborhood.unique())\nprice=[]\nfor i in List:\n    x=df[df.Neighborhood==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Neighborhood of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Neighborhood and Price\", fontsize=17)\nplt.show()","5256eeb8":"n_list=[]\nfor i in df.Neighborhood:\n    if i==\"NridgHt\":\n        n_list.append(\"A\")\n    elif i==\"NoRidge\":\n        n_list.append(\"A\")\n    elif i==\"StoneBr\":\n        n_list.append(\"A\")\n    elif i==\"Timber\":\n        n_list.append(\"B\")\n    elif i==\"Veenker\":\n        n_list.append(\"B\")\n    elif i==\"Somerst\":\n        n_list.append(\"B\")\n    elif i==\"ClearCr\":\n        n_list.append(\"B\")\n    elif i==\"Crawfor\":\n        n_list.append(\"C\")\n    elif i==\"CollgCr\":\n        n_list.append(\"C\")\n    elif i==\"Blmngtn\":\n        n_list.append(\"C\")\n    elif i==\"Gilbert\":\n        n_list.append(\"C\")\n    elif i==\"NWAmes\":\n        n_list.append(\"C\")\n    elif i==\"SawyerW\":\n        n_list.append(\"C\")\n    elif i==\"Mitchel\":\n        n_list.append(\"D\")\n    elif i==\"NAmes\":\n        n_list.append(\"D\")\n    elif i==\"NPkVill\":\n        n_list.append(\"D\")\n    elif i==\"SWISU\":\n        n_list.append(\"D\")\n    elif i==\"Blueste\":\n        n_list.append(\"D\")\n    elif i==\"Sawyer\":\n        n_list.append(\"D\")\n    elif i==\"BrkSide\":\n        n_list.append(\"E\")\n    elif i==\"Edwards\":\n        n_list.append(\"E\")\n    elif i==\"OldTown\":\n        n_list.append(\"E\")\n    elif i==\"BrDale\":\n        n_list.append(\"F\")\n    elif i==\"IDOTRR\":\n        n_list.append(\"F\")\n    elif i==\"MeadowV\":\n        n_list.append(\"F\")\nset(n_list)\ndf.Neighborhood=n_list","944ff4d4":"g=sns.factorplot(x=\"Neighborhood\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","6cb115e7":"type_features[9]","2b942fe0":"df.Condition1.unique()","c48bf336":"g=sns.factorplot(x=\"Condition1\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","080b47f6":"c1_list=[]\nfor i in df.Condition1:\n    if i==\"RRNn\":\n        c1_list.append(\"RP\")\n    elif i==\"PosA\":\n        c1_list.append(\"RP\")\n    elif i==\"PosN\":\n        c1_list.append(\"POR\")\n    elif i==\"RRNe\":\n        c1_list.append(\"POR\")\n    elif i==\"RRAn\":\n        c1_list.append(\"NR\")\n    elif i==\"Norm\":\n        c1_list.append(\"NR\")\n    elif i==\"Feedr\":\n        c1_list.append(\"FR\")\n    elif i==\"RRAe\":\n        c1_list.append(\"FR\")\n    elif i==\"Artery\":\n        c1_list.append(\"A\")\nset(c1_list)\ndf.Condition1=c1_list","5738439d":"g=sns.factorplot(x=\"Condition1\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","185ca2c7":"type_features[10]","a87ddd9f":"g=sns.factorplot(x=\"Condition2\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","1af250a6":"c2_list=[]\nfor i in df.Condition2:\n    if i==\"Norm\":\n        c2_list.append(\"N\")\n    elif i==\"Feedr\":\n        c2_list.append(\"FR\")\n    elif i==\"RRAn\":\n        c2_list.append(\"FR\")\n    elif i==\"Artery\":\n        c2_list.append(\"AR\")\n    elif i==\"RRNn\":\n        c2_list.append(\"AR\")\n    else:\n        c2_list.append(\"POS\")\nset(c2_list)\ndf.Condition2=c2_list","937337c0":"g=sns.factorplot(x=\"Condition2\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","856cf848":"df[df.Condition2==\"POS\"]","c80e87d7":"df[type_features]","a46986e5":"type_features[11]","8a08f16b":"df.BldgType.unique()","8bb6fcbc":"g=sns.factorplot(x=\"BldgType\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","50284d69":"bt_list=[]\nfor i in df.BldgType:\n    if i==\"1Fam\":\n        bt_list.append(\"FT\")\n    elif i==\"TwnhsE\":\n        bt_list.append(\"FT\")\n    elif i==\"Twnhs\":\n        bt_list.append(\"DTF\")\n    elif i==\"2fmCon\":\n        bt_list.append(\"DTF\")\n    elif i==\"Duplex\":\n        bt_list.append(\"DTF\")\nset(bt_list)\ndf.BldgType=bt_list","2742aea1":"g=sns.factorplot(x=\"BldgType\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","755e01a7":"type_features[12]","959363e8":"df.HouseStyle.unique()","963b5a24":"g=sns.factorplot(x=\"HouseStyle\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","7e73b5c6":"hs_list=[]\nfor i in df.HouseStyle:\n    if i==\"1Story\":\n        hs_list.append(\"SF1\")\n    elif i==\"SLvl\":\n        hs_list.append(\"SF1\")\n    elif i==\"2.5Fin\":\n        hs_list.append(\"SF1\")\n    elif i==\"1.5Unf\":\n        hs_list.append(\"1.5U\")\n    elif i==\"2Story\":\n        hs_list.append(\"2S\")\n    else:\n        hs_list.append(\"UFS\")\nset(hs_list)\ndf.HouseStyle=hs_list","6908f32d":"g=sns.factorplot(x=\"HouseStyle\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","15ce76c5":"type_features[13]","e1143db7":"df.RoofStyle.unique()","fa540291":"g=sns.factorplot(x=\"RoofStyle\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","ba0b2c4b":"rs_list=[]\nfor i in df.RoofStyle:\n    if i==\"Shed\":\n        rs_list.append(\"S\")\n    elif i==\"Flat\":\n        rs_list.append(\"FH\")\n    elif i==\"Hip\":\n        rs_list.append(\"FH\")\n    else:\n        rs_list.append(\"GMG\")\nset(rs_list)\ndf.RoofStyle=rs_list","29bc2850":"g=sns.factorplot(x=\"RoofStyle\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","376ba50a":"type_features[14]","a80b7416":"df.RoofMatl.unique()","b570dd2a":"g=sns.factorplot(x=\"RoofMatl\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","5de082c0":"rm_list=[]\nfor i in df.RoofMatl:\n    if i==\"Roll\":\n        rm_list.append(\"R\")\n    elif i==\"Membran\":\n        rm_list.append(\"WMW\")\n    elif i==\"WDShake\":\n        rm_list.append(\"WMW\")\n    elif i==\"WdShngl\":\n        rm_list.append(\"WMW\")\n    else:\n        rm_list.append(\"CMT\")\nset(rm_list)\ndf.RoofMatl=rm_list","a7ea5e34":"g=sns.factorplot(x=\"RoofMatl\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","0ba22f2d":"type_features[15]","94222f0d":"df.Exterior1st.unique()","2c1042ef":"df.SalePrice=df.SalePrice.astype(float)\nList=list(df.Exterior1st.unique())\nprice=[]\nfor i in List:\n    x=df[df.Exterior1st==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Exterior Covering of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Exterior Covering of House and Price\", fontsize=17)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","dfc061c5":"e1_list=[]\nfor i in df.Exterior1st:\n    if i==\"ImStucc\":\n        e1_list.append(\"A\")\n    elif i==\"Stone\":\n        e1_list.append(\"A\")\n    elif i==\"CemntBd\":\n        e1_list.append(\"A\")\n    elif i==\"VinylSd\":\n        e1_list.append(\"A\")\n    elif i==\"BrkFace\":\n        e1_list.append(\"B\")\n    elif i==\"Plywood\":\n        e1_list.append(\"B\")\n    elif i==\"AsbShng\":\n        e1_list.append(\"D\")\n    elif i==\"Cblock\":\n        e1_list.append(\"D\")\n    elif i==\"AsphShn\":\n        e1_list.append(\"D\")\n    elif i==\"BrkComm\":\n        e1_list.append(\"D\")\n    else:\n        e1_list.append(\"C\")\nset(e1_list)\ndf.Exterior1st=e1_list","d829797c":"df.SalePrice=df.SalePrice.astype(float)\nList=list(df.Exterior1st.unique())\nprice=[]\nfor i in List:\n    x=df[df.Exterior1st==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Exterior Covering of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Exterior Covering of House and Price\", fontsize=17)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","32fc95e0":"type_features[16]","05006de5":"df.Exterior2nd.unique()","b766e6f8":"df.SalePrice=df.SalePrice.astype(float)\nList=list(df.Exterior2nd.unique())\nprice=[]\nfor i in List:\n    x=df[df.Exterior2nd==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Exterior Covering of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Exterior Covering of House and Price\", fontsize=17)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","f06063f7":"e2_list=[]\nfor i in df.Exterior2nd:\n    if i==\"Other\":\n        e2_list.append(\"O\")\n    elif i==\"CmentBd\":\n        e2_list.append(\"A\")\n    elif i==\"VnylSd\":\n        e2_list.append(\"A\")\n    elif i==\"ImStucc\":\n        e2_list.append(\"A\")\n    elif i==\"BrkFace\":\n        e2_list.append(\"A\")\n    elif i==\"PlyWood\":\n        e2_list.append(\"A\")\n    elif i==\"HdBoard\":\n        e2_list.append(\"A\")\n    elif i==\"Brk Cmn\":\n        e2_list.append(\"C\")\n    elif i==\"AsbShng\":\n        e2_list.append(\"C\")\n    elif i==\"CBlock\":\n        e2_list.append(\"C\")\n    else:\n        e2_list.append(\"B\")\nset(e2_list)\ndf.Exterior2nd=e2_list","91e7b3c8":"df.SalePrice=df.SalePrice.astype(float)\nList=list(df.Exterior2nd.unique())\nprice=[]\nfor i in List:\n    x=df[df.Exterior2nd==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","8c31ebe4":"type_features[17]","8f19629c":"df.MasVnrType.unique()","396fe672":"g=sns.factorplot(x=\"MasVnrType\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","489789de":"type_features[18]","46f4146a":"df.Foundation.unique()","34ae9670":"g=sns.factorplot(x=\"Foundation\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","7a6e3742":"type_features[19]","e2f7ad27":"df.Heating.unique()","f740a013":"g=sns.factorplot(x=\"Heating\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","9d982bb0":"h_list=[]\nfor i in df.Heating:\n    if i==\"GasA\":\n        h_list.append(\"A\")\n    elif i==\"GasW\":\n        h_list.append(\"A\")\n    elif i==\"OthW\":\n        h_list.append(\"A\")\n    else:\n        h_list.append(\"B\")\nset(h_list)\ndf.Heating=h_list","392b9b32":"g=sns.factorplot(x=\"Heating\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","a1dddf5e":"type_features[20]","aff247bd":"df.CentralAir.unique()","c091709c":"g=sns.factorplot(x=\"CentralAir\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","2899cbe5":"type_features[21]","c041af58":"g=sns.factorplot(x=\"Electrical\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","a3dae160":"e_list=[]\nfor i in df.Electrical:\n    if i==\"SBrkr\":\n        e_list.append(\"A\")\n    elif i==\"FuseF\":\n        e_list.append(\"B\")\n    elif i==\"FuseA\":\n        e_list.append(\"B\")\n    else:\n        e_list.append(\"C\")\nset(e_list)\ndf.Electrical=e_list","c6ea8f3c":"g=sns.factorplot(x=\"Electrical\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","0e93b073":"type_features[22]","e9395e6c":"df.Functional.unique()","d4b26275":"g=sns.factorplot(x=\"Functional\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","42389015":"fu_list=[]\nfor i in df.Functional:\n    if i==\"Typ\":\n        fu_list.append(\"A\")\n    elif i==\"Maj2\":\n        fu_list.append(\"C\")\n    else:\n        fu_list.append(\"B\")\nset(fu_list)\ndf.Functional=fu_list","2ebdf7bb":"g=sns.factorplot(x=\"Functional\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","f628bf4c":"type_features[23]","45636f61":"df.GarageType.unique()","3f49ac00":"g=sns.factorplot(x=\"GarageType\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","0f2ceff2":"gt_list=[]\nfor i in df.GarageType:\n    if i==\"Attchd\":\n        gt_list.append(\"A\")\n    elif i==\"BuiltIn\":\n        gt_list.append(\"A\")\n    elif i==\"NA\":\n        gt_list.append(\"C\")\n    elif i==\"CarPort\":\n        gt_list.append(\"C\")\n    else:\n        gt_list.append(\"B\")\nset(gt_list)\ndf.GarageType=gt_list","d3a1119a":"g=sns.factorplot(x=\"GarageType\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","470b310b":"type_features[24]","7b943ebd":"df.GarageFinish.unique()","39d4a653":"g=sns.factorplot(x=\"GarageFinish\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","f666eef8":"gf_list=[]\nfor i in df.GarageFinish:\n    if i==\"RFn\":\n        gf_list.append(\"RF\")\n    elif i==\"Fin\":\n        gf_list.append(\"RF\")\n    else:\n        gf_list.append(\"UN\")\nset(gf_list)\ndf.GarageFinish=gf_list","fbb438e9":"g=sns.factorplot(x=\"GarageFinish\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","c90c35f0":"type_features[25]","db6b454c":"df.PavedDrive.unique()","f085c199":"g=sns.factorplot(x=\"PavedDrive\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","0456f68c":"type_features[26]","1cbac8e6":"df.MiscFeature.unique()","f93487c6":"g=sns.factorplot(x=\"MiscFeature\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","a18cd6c7":"mf_list=[]\nfor i in df.MiscFeature:\n    if i==\"NA\":\n        mf_list.append(\"NA\")\n    else:\n        mf_list.append(\"GSO\")\nset(mf_list)\ndf.MiscFeature=mf_list","2f3a88cb":"g=sns.factorplot(x=\"MiscFeature\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","f6d40453":"type_features[27]","d41177b9":"df.SaleType.unique()","31d2479f":"df.SalePrice=df.SalePrice.astype(float)\nList=list(df.SaleType.unique())\nprice=[]\nfor i in List:\n    x=df[df.SaleType==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","3bc21f7c":"st_list=[]\nfor i in df.SaleType:\n    if i==\"New\":\n        st_list.append(\"NC\")\n    elif i==\"Con\":\n        st_list.append(\"NC\")\n    elif i==\"CWD\":\n        st_list.append(\"CC\")\n    elif i==\"ConLI\":\n        st_list.append(\"CC\")\n    else:\n        st_list.append(\"O\")\nset(st_list)\ndf.SaleType=st_list","18559cc8":"df.SalePrice=df.SalePrice.astype(float)\nList=list(df.SaleType.unique())\nprice=[]\nfor i in List:\n    x=df[df.SaleType==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","171703cc":"type_features[28]","9f87cba4":"df.SaleCondition.unique()","357b33fb":"df.SalePrice=df.SalePrice.astype(float)\nList=list(df.SaleCondition.unique())\nprice=[]\nfor i in List:\n    x=df[df.SaleCondition==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","881ce98b":"sc_list=[]\nfor i in df.SaleCondition:\n    if i==\"Partial\":\n        sc_list.append(\"P\")\n    elif i==\"AdjLand\":\n        sc_list.append(\"A\")\n    else:\n        sc_list.append(\"O\")\nset(sc_list)\ndf.SaleCondition=sc_list","345af8f3":"df.SalePrice=df.SalePrice.astype(float)\nList=list(df.SaleCondition.unique())\nprice=[]\nfor i in List:\n    x=df[df.SaleCondition==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.text(-0.4, 200000, \"\", fontsize=14)\nplt.show()","4063055a":"type_features[29]","29f489ed":"df.MSSubClass.unique()","319dc5bc":"train_df.SalePrice=train_df.SalePrice.astype(float)\nList=list(train_df.MSSubClass.unique())\nprice=[]\nfor i in List:\n    x=train_df[train_df.MSSubClass==i]\n    priceav=x.SalePrice.mean()\n    price.append(priceav)\ndata=pd.DataFrame({\"type\":List, \"price_average\":price})\nnew_index=(data.price_average.sort_values(ascending=True)).index.values\nsorted_data=data.reindex(new_index)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=sorted_data.type, y=sorted_data.price_average)\nplt.xlabel(\"Type of House\", fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=14)\nplt.title(\"Relation Between Type and Price\", fontsize=17)\nplt.text(-0.3, 101000, \"20: 1-STORY 1946 & NEWER ALL STYLES\\n30: 1-STORY 1945 & OLDER\\n40: 1-STORY W\/FINISHED ATTIC ALL AGES\\n45: 1-1\/2 STORY - UNFINISHED ALL AGES\\n50: 1-1\/2 STORY FINISHED ALL AGES\\n60: 2-STORY 1946 & NEWER\\n70: 2-STORY 1945 & OLDER\\n75: 2-1\/2 STORY ALL AGES\\n80: SPLIT OR MULTI-LEVEL\\n85: SPLIT FOYER\\n90: DUPLEX - ALL STYLES AND AGES\\n120: 1-STORY PUD (Planned Unit Development) - 1946 & NEWER\\n150: 1-1\/2 STORY PUD - ALL AGES\\n160: 2-STORY PUD - 1946 & NEWER\\n180: PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\\n190: 2 FAMILY CONVERSION - ALL STYLES AND AGES\", fontsize=14)\nplt.show()","73605c08":"mc_list=[]\nfor i in df.MSSubClass:\n    if i==\"120\":\n        mc_list.append(\"A\")\n    elif i==\"60\":\n        mc_list.append(\"A\")\n    elif i==\"20\":\n        mc_list.append(\"B\")\n    elif i==\"40\":\n        mc_list.append(\"B\")\n    elif i==\"70\":\n        mc_list.append(\"B\")\n    elif i==\"80\":\n        mc_list.append(\"B\")\n    elif i==\"160\":\n        mc_list.append(\"C\")\n    elif i==\"75\":\n        mc_list.append(\"C\")\n    elif i==\"85\":\n        mc_list.append(\"C\")\n    elif i==\"90\":\n        mc_list.append(\"C\")\n    elif i==\"50\":\n        mc_list.append(\"C\")\n    else:\n        mc_list.append(\"D\")\nset(mc_list)\ndf.MSSubClass=mc_list","2c1a43d8":"g=sns.factorplot(x=\"MSSubClass\", y=\"SalePrice\", data=df, kind=\"bar\")\ng.set_ylabels(\"Price\")\nplt.show()","bb78749a":"df[type_features]","61347e85":"df=pd.get_dummies(df, columns=type_features)","cb256bba":"df.head()","ab77e03a":"numerical_features","d679146c":"f,ax=plt.subplots(figsize=(22,22))\nsns.heatmap(df[numerical_features].corr(), vmax=1, vmin=-1, annot=True, fmt=\".2f\")\nplt.show()","d940068c":"len(list(df[df.GarageYrBlt==\"NA\"].index.values))","f2a3e152":"df.GarageYrBlt=df.GarageYrBlt.replace(\"NA\", 1979)","6196aa85":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","7c5be3f8":"train_df_len=len(train_df)","4f4ebfb3":"train_data=df[:train_df_len]","50c82633":"sub_data=df[train_df_len:]","20674a44":"train_data.drop([\"Id\"], axis=1, inplace=True)\ntrain_data","5536ed18":"x=train_data.drop([\"SalePrice\"], axis=1)\ny=train_data.SalePrice","bcb63d22":"x_train, x_test, y_train, y_test=train_test_split(x, y, random_state=42, test_size=0.3)","f67f5c9f":"logreg=LogisticRegression()\nlogreg.fit(x_train, y_train)\ntrain_acc=round(logreg.score(x_train, y_train)*100,3)\ntest_acc=round(logreg.score(x_test, y_test)*100,3)\nprint(\"Training Accuracy:\", train_acc, \"%\")\nprint(\"Test Accuracy:\", test_acc, \"%\")","107363f1":"y_pred=logreg.predict(x_test)","4702857d":"predd=pd.DataFrame({\"pred\":y_pred, \"test\":y_test})","9f50cdc6":"predd[predd.pred==predd.test]","4221e3a5":"pred100=[]\nfor i in predd.pred:\n    pred100.append(100*(int(i\/100)))\npredd[\"pred100\"]=pred100","2b47edfc":"predd[predd.pred100==predd.test]","0ace7c1c":"pred1000=[]\nfor i in predd.pred:\n    pred1000.append(1000*(int(i\/1000)))\npredd[\"pred1000\"]=pred1000","3a94c2fa":"predd[predd.pred1000==predd.test]","f3231a8f":"pred10000=[]\nfor i in predd.pred:\n    pred10000.append(10000*(int(i\/10000)))\npredd[\"pred10000\"]=pred10000","39641ded":"predd[predd.pred10000==predd.test]","a48460ad":"predd.head(30)","d630e0d3":"#######################################","2cb1fd73":"rs=42\nclassifier=[DecisionTreeClassifier(random_state=rs),\n           SVC(random_state=rs),\n           RandomForestClassifier(random_state=rs),\n           KNeighborsClassifier(),\n           LogisticRegression(random_state=rs)]\n\ndt_param_grid={\"min_samples_split\": range(10,500,20), \n               \"max_depth\": range(1,20,2)}\n\nsvc_param_grid={\"kernel\": [\"rbf\"], \n               \"gamma\": [0.001, 0.01, 0.1, 1],\n               \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid={\"max_features\": [1,3,10],\n              \"min_samples_split\": [2,3,10],\n              \"min_samples_leaf\": [1,3,10],\n              \"bootstrap\": [False],\n              \"n_estimators\": [100,300],\n              \"criterion\": [\"gini\"]}\n\nknn_param_grid={\"n_neighbors\": np.linspace(1,19,10, dtype=int).tolist(),\n               \"weights\": [\"distance\", \"uniform\"],\n               \"metric\": [\"euclidean\", \"manhattan\"]}\n\nlogreg_param_grid={\"C\": np.logspace(-3,3,7),\n                  \"penalty\": [\"l1\", \"l2\"]}\n\nclassifier_param=[dt_param_grid, svc_param_grid, rf_param_grid, knn_param_grid, logreg_param_grid]","4dbaac43":"cv_result=[]\nbest_estimators=[]\nfor i in range(len(classifier)):\n    clf=GridSearchCV(classifier[i], param_grid=classifier_param[i], cv=StratifiedKFold(n_splits=10), scoring=\"accuracy\", n_jobs=-1, verbose=1)\n    clf.fit(x_train, y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","b61212b2":"cv_result=[100*each for each in cv_result]","af014734":"results=pd.DataFrame({\"Cross Validation Best Scores\": cv_result, \"ML Models\": [\"DecisionTreeClassifier\", \"SVM\", \"RandomForestClassifier\", \"KNeighborsClassifier\", \"LogisticRegression\"]})\nf,ax=plt.subplots(figsize=(12,7))\ng = sns.barplot(data=results, y=\"ML Models\", x=\"Cross Validation Best Scores\")\ng.set_ylabel(\"\")\ng.set_xlabel(\"Accuracy %\")\nplt.show()\nfor i in range(len(results)):\n    print(results[\"ML Models\"][i], \"Accuracy:\", results[\"Cross Validation Best Scores\"][i], \"%\")","521310d9":"voting_c=VotingClassifier(estimators=[(\"dt\", best_estimators[0]), (\"rf\", best_estimators[2])],\n                         voting=\"soft\", n_jobs=-1)\nvoting_c=voting_c.fit(x_train, y_train)\nprint(\"Accuracy:\", 100*accuracy_score(voting_c.predict(x_test), y_test), \"%\")","a9c6aa1d":"sub_data.drop([\"Id\", \"SalePrice\"], axis=1, inplace=True)","05cda05a":"sub_price=pd.Series(voting_c.predict(sub_data), name=\"SalePrice\").astype(float)\nresult=pd.concat([submission_df[\"Id\"], sub_price], axis=1)","573be3c6":"result.to_csv(\"submission.csv\", index=False)","b919179c":"<a id=\"6\" ><\/a><br>\n## Categorical Features","84aed92f":"As we can see in the plot exterior quality evaluation is clearly related with house prices.","24f36e3e":"According to bar chart above, we can say that basement height quality is correlated with price.","43489e97":"Sale Price --> FR3 > CulDSac > FR2 > Corner > Inside","0f296c2e":"I choose 1979 because it is median value.","8d77df10":"There are lots of features correlated with SalePrice. It will be useful for us when we do feature engineering.","623b244e":"Sale Price --> Mod > Sev > Gtl","eb9aeb8b":"BsmtFinType2 is not useful for us for correlation relation between price.","8c43dba4":"There are no missing values anymore.","85ff215a":"<a id=\"12\" ><\/a><br>\n## Evaluative Features","abe29945":"Generally, houses with high level basements have higher prices than others.","478b56b0":"Pool data is not so useful for us.","f2227aea":"Sale Price --> IR3 > IR2 > IR1 > Reg","b0e30af5":"<a id=\"4\" ><\/a><br>\n## Categorical Variable","90af712f":"<a id=\"8\" ><\/a><br>\n# Detect & Delete Outliers","f8839f68":"### Categorical Features","8d5b20a1":"<a id=\"15\" ><\/a><br>\n# Modeling","a67c7b99":"As we can see from the miss_cat_df_list, there are no missing categorical values anymore.","f9b416e7":"There is a correlation between BsmtCond and SalePrice","e9c29a22":"## Fill","60ea6bd0":"<a id=\"2\" ><\/a><br>\n# Unvariate Variable Analysis\n* Numerical Variable\n* Categorical Variable","9b8a034c":"Kitchen quality is an important feature because there is a clear correlation with sale price.","7cd2d128":"There is a correlation.","2bec5069":"<a id=\"9\" ><\/a><br>\n# Missing Values","a3d56903":"Sale Price --> NA > Pave > Grvl","97956c8a":"<a id=\"3\" ><\/a><br>\n## Numerical Variable","51f4aeef":"<a id=\"14\" ><\/a><br>\n## Numerical Features","c381de87":"All houses have all the utilities so this feature is useless for us.","ca39d439":"Again, condition is not clearly correlated as quality do but yet there is a considerable relation.","49cf25bb":"## Find","48b1759b":"Condition evaluation is not correlated with price as clear as quality, but we still can say that there is a positive relation between condition and price.","b2e2d319":"<a id=\"11\" ><\/a><br>\n# Feature Engineering","96fae472":"Fireplace quality and sale price are correlated.","856885ec":"House prices are normally correlated with overall evaluation.","d71c84fd":"Sale Price --> TwnhsE > 1Fam > Twnhs > Duplex > 2fmCon","078c56e6":"Sale Price --> HLS > Low > Lvl > Bnk","a5884d5c":"According to this chart we can't say there is a clear correlation between garage quality and price.","e814917b":"<a id=\"1\" ><\/a><br>\n# Load and Check Data","652f17b3":"Sale Price --> Pave > Grvl","3c8d25ed":"Evaluative features are in numbers now, this will be useful for machine learning.","f6483980":"<a id=\"5\" ><\/a><br>\n# Basic Relation Analysis","69b27091":"<a id=\"13\" ><\/a><br>\n## Categorical Features","dd7337c8":"There is no correlation.","28025d2a":"# Introduction\n\n\n<font color = \"blue\">\nContent:\n\n1. [Load and Check Data](#1)\n2. [Univariate Variable Analysis](#2)\n    * [Numerical Variable](#3)\n    * [Categorical Variable](#4)\n3. [Basic Relation Analysis](#5)\n    * [Categorical Features](#6)\n    * [Numerical Features](#7)\n4. [Outlier Detection](#8)\n5. [Missing Values](#9)\n6. [Visualization](#10)\n7. [Feature Engineering](#11)\n    * [Evaluative Features](#12)\n    * [Categorical Features](#13)\n    * [Numerical Features](#14)\n8. [Modeling](#15)","78b20af6":"As we can see in the plot above there is a correlation between BsmtExposure and SalePrice.","5585fac6":"HeatingQC is correlated with SalePrice as we can see in bar chart above.","bcc9e29b":"<a id=\"10\" ><\/a><br>\n# Visualization","26a65d97":"<a id=\"7\" ><\/a><br>\n## Numerical Features","2b6528d2":"### Numerical Features","af187c18":"Sale Price --> FV > RL > RH > RM > C"}}