{"cell_type":{"73639bcd":"code","aa5afe9e":"code","28a0638e":"code","5bf6dd78":"code","e892467d":"code","901e2017":"code","ce126a83":"code","0c4c14fd":"code","77573e1b":"code","852d7e6e":"code","2b9fa2cc":"code","7518c9d2":"code","8ae2c2c1":"code","fa1f1ec0":"code","8e20cd5b":"markdown","b3db2cdc":"markdown","a1808a98":"markdown","046614c3":"markdown","79702a57":"markdown","8cf7c7ea":"markdown","d78c23ce":"markdown","e61b19d8":"markdown","16d8813f":"markdown","cd7d4702":"markdown","628eb631":"markdown","39b35e75":"markdown"},"source":{"73639bcd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa5afe9e":"import sqlite3\nimport pandas\nimport numpy\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nimport seaborn\nimport warnings\n\nfrom pandas.core.common import SettingWithCopyWarning\nwarnings.simplefilter(action=\"ignore\", category=SettingWithCopyWarning)\nwarnings.simplefilter(action='ignore', category=FutureWarning)","28a0638e":"sqlconnection = sqlite3.connect('..\/input\/clubhouse-dataset\/Clubhouse_Dataset_v1.db')\ncursor = sqlconnection.cursor()\ncursor.execute(\"select * from user\")\ntotal_records = cursor.fetchall()","5bf6dd78":"dataset = pandas.DataFrame(total_records, columns=['user_id', 'name', 'photo_url', 'username', 'twitter', 'Instagram', 'num_followers',\n                                             'num_following', 'time_created', 'invitedbyuser_profile'])\n\ndataset.fillna(value=numpy.nan, inplace=True)\ndataset['photo_url'].replace('null', 'empty', inplace=True)\ndataset['photo_url'].replace(numpy.NaN, 'empty', inplace=True)\ndataset['username'].replace('null', 'empty', inplace=True)\ndataset['twitter'].replace('null', 'empty', inplace=True)\ndataset['Instagram'].replace('null', 'empty', inplace=True)\ndataset['num_followers'].replace('null', 0, inplace=True)\ndataset['num_following'].replace('null', 0, inplace=True)\ndataset['invitedbyuser_profile'].replace('null', 0, inplace=True)\n\nprint(dataset.info())\ntotal_users = dataset.shape[0]\nprint(\"Total records: \", total_users)","e892467d":"dataset['time_created'] = dataset['time_created'].apply(lambda x: x.replace('T', ' ').replace('+00:00', '').split('.')[0])\ndataset['time_created'] = dataset['time_created'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S'))\ndataset['time_created'] = dataset['time_created'].apply(lambda x: (x.replace(second=0, minute=0, hour=x.hour) + timedelta(hours=x.minute\/\/30)))\ndataset['time'] = dataset['time_created'].apply(lambda x: x.strftime('%H'))\ndataset['time'] = dataset['time'].apply(lambda x: int(x))\ndataset['year_created'] = dataset['time_created'].apply(lambda x: x.strftime('%Y'))\n\ndataset.loc[(dataset['time']) >= 6 & (dataset['time'] < 11), 'part_of_day'] = 'morning'\ndataset.loc[(dataset['time']) >= 11 & (dataset['time'] < 14), 'part_of_day'] = 'noon'\ndataset.loc[(dataset['time']) >= 14 & (dataset['time'] < 16), 'part_of_day'] = 'afternoon'\ndataset.loc[(dataset['time']) >= 16 & (dataset['time'] < 19), 'part_of_day'] = 'evening'\ndataset.loc[(dataset['time']) >= 19 & (dataset['time'] < 6), 'part_of_day'] = 'night'","901e2017":"fig = plt.figure(figsize=(12,5))\nplt.subplot(1, 2, 1)\nplt.title('Account created during time of the day')\nseaborn.countplot(dataset['part_of_day'])\nplt.subplot(1, 2, 2)\nplt.title('Account created in a year')\nseaborn.countplot(dataset['year_created'])\nplt.show()","ce126a83":"labels = ['Profile picture', 'No Profile Picture']\npic_sizes = [round((len(dataset[dataset['photo_url'] != 'empty'])\/total_users)*100, 2), 100-round((len(dataset[dataset['photo_url'] != 'empty'])\/total_users)*100, 2)]\npic_colors = ['#99ff99','#ff9999']\nexplode = (0.05,0.05)\n\nplt.title('Profile picture percentage')\nplt.pie(pic_sizes, colors = pic_colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = explode)#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle) \nplt.tight_layout()\nplt.show()","0c4c14fd":"\nlabels = ['Using', 'Not Using']\ntwitter_sizes = [round((len(dataset[dataset['twitter'] != 'empty'])\/total_users)*100, 2), 100-round((len(dataset[dataset['twitter'] != 'empty'])\/total_users)*100, 2)]\ninsta_sizes = [round((len(dataset[dataset['Instagram'] != 'empty'])\/total_users)*100, 2), 100-round((len(dataset[dataset['Instagram'] != 'empty'])\/total_users)*100, 2)]\ntwitter_colors = ['#ff9999','#99ff99']\ninsta_colors = ['#66b3ff','#ffcc99']\nexplode = (0.05,0.05)\n\nfig = plt.figure(figsize=(10, 10))\nplt.subplot(1, 2, 1)\nplt.title('Twitter usage percentage')\nplt.pie(twitter_sizes, colors = twitter_colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = explode)#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle) \nplt.tight_layout()\nplt.subplot(1, 2, 2)\nplt.title('Instagram usage percentage')\nplt.pie(insta_sizes, colors = insta_colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = explode)#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle) \nplt.tight_layout()\nplt.show()","77573e1b":"fig = plt.figure(figsize=(12, 8))\nseaborn.scatterplot(data=dataset[['num_followers', 'num_following']], x='num_followers', y='num_following')\nplt.title('Followers vs Following')\nplt.show()","852d7e6e":"fig = plt.figure(figsize=(12,5))\nplt.subplot(1, 2, 1)\nseaborn.distplot(dataset['num_followers'])\nplt.title('Followers distribution')\nplt.subplot(1, 2, 2)\nseaborn.distplot(dataset['num_following'])\nplt.title('Followings distribution')\nplt.show()","2b9fa2cc":"seaborn.countplot(y=dataset['invitedbyuser_profile'], palette=\"Set2\",order=dataset['invitedbyuser_profile'].value_counts().index[1: 11])\nplt.title('Top 10 invites by user')\nplt.show()","7518c9d2":"print(dataset[['user_id', 'invitedbyuser_profile']])","8ae2c2c1":"testset = dataset[['user_id', 'invitedbyuser_profile', 'username']]\n\nvip_users = []\nfor row in range(len(testset[testset['invitedbyuser_profile'] == 0])):\n    vip_users.append(testset['user_id'][row])\n    \nprint(\"Total count of VIP users: \", len(vip_users))\n\nlabels = ['VIP users', 'Referred']\ncolors = ['#ff9999','#66b3ff']\nsizes = [round((len(vip_users)\/total_users)*100, 2), 100 - round((len(vip_users)\/total_users)*100, 2)]\nexplode = (0.05,0.05)\n\nplt.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = explode)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('VIP user vs referred user % count')\nplt.show()","fa1f1ec0":"# !pip install python-igraph\nimport plotly.graph_objects as go\n\ntree_data = dataset.loc[dataset['invitedbyuser_profile'] == 27950, ['invitedbyuser_profile', 'user_id', 'username']]\nprint(tree_data)\nfig = go.Figure(go.Treemap(\n        ids = tree_data.user_id,\n        labels = tree_data.username,\n        parents = tree_data.invitedbyuser_profile))\nfig.update_layout(uniformtext=dict(minsize=10, mode='hide'))\nfig.show()","8e20cd5b":"# With vs without profile picture","b3db2cdc":"# Collect dataset through sqlite3","a1808a98":"# Account creation info","046614c3":"# VIP users vs The referred by users","79702a57":"# User's Following vs Followers","8cf7c7ea":"# Data preprocessing for missing values","d78c23ce":"# Categorize the time created field for better understanding","e61b19d8":"# Top 10 Users who invited others","16d8813f":"# User's Followers, Following distribution","cd7d4702":"# Tree visualisation\nTry out the tree plot and feel free to share your thoughts\n","628eb631":"# Users with, without social connectivity apps","39b35e75":"# Import libraries"}}