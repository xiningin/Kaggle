{"cell_type":{"5b755618":"code","42545aca":"code","4cac665c":"code","7768ddfa":"code","fd6a6fbf":"code","f37d3a31":"code","1090b689":"code","826c8892":"code","d9f12c8d":"code","9b1fe9f9":"code","0782c0b4":"code","056e10d1":"code","12deeddd":"code","d6221c1a":"code","02c164ad":"code","c465ed9d":"code","f1380e25":"code","7e4a3084":"markdown","b5be260d":"markdown"},"source":{"5b755618":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42545aca":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4cac665c":"housing = pd.read_csv('\/kaggle\/input\/florida-city-housing-pricing-sample\/fl_city_housing_sample.csv')","7768ddfa":"housing.info()","fd6a6fbf":"housing.describe()","f37d3a31":"sns.scatterplot(x='log_res_sfla',y='log_price',data=housing)","1090b689":"intercept = tf.Variable(4.5653,tf.float32)\nslope = tf.Variable(0.2257,tf.float32)","826c8892":"def lr(intercept,slope,features=np.array(housing['log_res_sfla'],np.float32)):\n    return intercept + features*slope","d9f12c8d":"def loss_func(intercept,slope,targets=np.array(housing['log_price'],np.float32),features=np.array(housing['log_res_sfla'],np.float32)):\n    predictions = lr(intercept, slope, features)\n    print('MSE {}'.format(tf.losses.mse(targets,predictions).numpy()))\n    print('RMSE {}'.format(np.sqrt(tf.losses.mse(targets,predictions).numpy())))\n    print('MAE {}'.format(tf.losses.mae(targets,predictions).numpy()))\n    return tf.losses.mae(targets,predictions)","9b1fe9f9":"opt = tf.keras.optimizers.Adam()","0782c0b4":"price = np.array(housing['log_price'],np.float32)\nsize = np.array(housing['log_res_sfla'],np.float32)","056e10d1":"print(price)","12deeddd":"print(size)","d6221c1a":"print(intercept)","02c164ad":"opt.minimize(lambda:loss_func(intercept,slope,price,size),var_list=[intercept,slope])","c465ed9d":"print(intercept.numpy(),slope.numpy())","f1380e25":"fig, ax = plt.subplots(1, figsize=(10,5))\n\nax.set_xlabel('log(single family living area)')\nax.set_ylabel('log(price)')\n\nax = plt.plot(size,intercept.numpy()+size*slope.numpy(),c='red')\nax = plt.scatter(size,price)","7e4a3084":"linear regresion (univariate regression:  log_res_sfla)","b5be260d":"# import modules"}}