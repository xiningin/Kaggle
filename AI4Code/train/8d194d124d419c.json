{"cell_type":{"8751bc2b":"code","245f8313":"code","9c528334":"code","9664459f":"code","d9cde3a9":"code","9ccf25b4":"code","4f86fcde":"code","045f8660":"code","5cbb9430":"code","c9816152":"code","695c5dce":"code","e23148d4":"code","bc3ac24c":"code","920ef8e7":"code","f0bb1c4d":"code","963c0a6f":"code","c76030c2":"code","59d38666":"code","9fd8c355":"code","eccf82d9":"code","7f08573f":"code","69ec6f3c":"code","384911fa":"code","660d2b9f":"code","f368027d":"code","682eec63":"code","12bf9700":"code","ac32005f":"code","5626f69e":"code","5c4a54fa":"code","b7e5dde5":"code","2fb998fe":"code","0f245c7a":"code","5a00a19c":"code","aee91823":"code","19ea8878":"code","911629dc":"code","23dd8234":"code","a8121b84":"code","b8bbb98b":"code","63f2005e":"code","34258067":"code","1f4739e0":"code","c7fc5ed6":"code","e5e57946":"code","62abaa94":"code","ef338952":"code","4a9f3e64":"code","6be62b80":"code","eccdab21":"code","615b0137":"code","41e50b9b":"code","b86bdf67":"code","dc0c792e":"code","8e9d0ed9":"code","6029c9db":"code","2970c6cf":"code","e21ec595":"code","caa73efc":"code","3468b79e":"code","5527f15e":"code","c47fc810":"code","7a876751":"markdown","3a8e47e3":"markdown","1578453f":"markdown","da6247ef":"markdown","75863782":"markdown","91b426bd":"markdown","39bd547f":"markdown","771aeb05":"markdown"},"source":{"8751bc2b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\npd.set_option('display.max_columns',None)\n","245f8313":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n","9c528334":"df_train.head()","9664459f":"df_test.head()","d9cde3a9":"df_train.shape","9ccf25b4":"df_test.shape","4f86fcde":"df_train.columns","045f8660":"df_test.columns","5cbb9430":"df_train.info()","c9816152":"df_train.isnull().sum()","695c5dce":"df_train.corr()","e23148d4":"corr = df_train.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(36,18))\na = sns.heatmap(corr, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","bc3ac24c":"df_train.describe().T ","920ef8e7":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False)","f0bb1c4d":"df_train.isnull().sum()","963c0a6f":"df_train.info()","c76030c2":"df_train[\"LotFrontage\"] = df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean())\ndf_train.drop([\"Alley\"],axis=1,inplace=True) #Aa alley has more than 3\/4 values are null values.so we drop the column","59d38666":"df_train['MasVnrType']=df_train['MasVnrType'].fillna(df_train['MasVnrType'].mode()[0])\ndf_train['MasVnrArea']=df_train['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])\ndf_train['BsmtCond']=df_train['BsmtCond'].fillna(df_train['BsmtCond'].mode()[0])\ndf_train['BsmtQual']=df_train['BsmtQual'].fillna(df_train['BsmtQual'].mode()[0])\ndf_train['FireplaceQu']=df_train['FireplaceQu'].fillna(df_train['FireplaceQu'].mode()[0])\ndf_train['GarageType']=df_train['GarageType'].fillna(df_train['GarageType'].mode()[0])\ndf_train['GarageFinish']=df_train['GarageFinish'].fillna(df_train['GarageFinish'].mode()[0])\ndf_train['GarageQual']=df_train['GarageQual'].fillna(df_train['GarageQual'].mode()[0])\ndf_train['GarageCond']=df_train['GarageCond'].fillna(df_train['GarageCond'].mode()[0])\ndf_train['Electrical']=df_train['Electrical'].fillna(df_train['Electrical'].mode()[0])","9fd8c355":"df_train.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_train.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n#I'm droping these columns because they contain more null values","eccf82d9":"df_train.shape","7f08573f":"df_train.drop([\"Id\"],axis=1,inplace=True)\n#As id did'nt affect our target variable i'm going to delete it","69ec6f3c":"df_train.isnull().sum()","384911fa":"df_train['BsmtExposure']=df_train['BsmtExposure'].fillna(df_train['BsmtExposure'].mode()[0])\ndf_train['BsmtFinType2']=df_train['BsmtFinType2'].fillna(df_train['BsmtFinType2'].mode()[0])","660d2b9f":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","f368027d":"df_train.isnull().sum()","682eec63":"df_train.dropna(inplace=True)\ndf_train.shape","12bf9700":"#Categorical features handling\ncat_feature = [feature for feature in df_train.columns if df_train[feature].dtype==\"O\"]\nlen(cat_feature)","ac32005f":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","5626f69e":"main_df = df_train.copy()","5c4a54fa":"main_df.head()","b7e5dde5":"df_test.head()","2fb998fe":"sol = df_test[\"Id\"]\ndf_test.shape","0f245c7a":"test_num = [feature for feature in df_test.columns if df_test[feature].isnull().sum()>1]\ntest_num","5a00a19c":"df_test['MSZoning']=df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['LotFrontage']=df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean())","aee91823":"df_test.drop(['Alley'],axis=1,inplace=True)\ndf_test.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_test.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndf_test.drop(['Id'],axis=1,inplace=True)\n#Dropping columns not present in train data","19ea8878":"df_test['Utilities']=df_test['Utilities'].fillna(df_test['Utilities'].mode()[0])\ndf_test['MasVnrType']=df_test['MasVnrType'].fillna(df_test['MasVnrType'].mode()[0])\ndf_test['MasVnrArea']=df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mode()[0])\ndf_test['BsmtCond']=df_test['BsmtCond'].fillna(df_test['BsmtCond'].mode()[0])\ndf_test['BsmtQual']=df_test['BsmtQual'].fillna(df_test['BsmtQual'].mode()[0])\ndf_test['BsmtExposure']=df_test['BsmtExposure'].fillna(df_test['BsmtExposure'].mode()[0])\ndf_test['BsmtFinType1']=df_test['BsmtFinType1'].fillna(df_test['BsmtFinType1'].mode()[0])\ndf_test['BsmtFinType2']=df_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].mode()[0])\ndf_test['BsmtFullBath']=df_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].mode()[0])\ndf_test['BsmtHalfBath']=df_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].mode()[0])\ndf_test['Functional']=df_test['Functional'].fillna(df_test['Functional'].mode()[0])\ndf_test['FireplaceQu']=df_test['FireplaceQu'].fillna(df_test['FireplaceQu'].mode()[0])\ndf_test['GarageType']=df_test['GarageType'].fillna(df_test['GarageType'].mode()[0])\ndf_test['GarageFinish']=df_test['GarageFinish'].fillna(df_test['GarageFinish'].mode()[0])\ndf_test['GarageQual']=df_test['GarageQual'].fillna(df_test['GarageQual'].mode()[0])\ndf_test['GarageCond']=df_test['GarageCond'].fillna(df_test['GarageCond'].mode()[0])\n","911629dc":"df_test.shape","23dd8234":"df_test.loc[:, df_test.isnull().any()].head()","a8121b84":"df_test['Exterior1st']=df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0])\ndf_test['Exterior2nd']=df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['BsmtFinSF1']=df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].mean())\ndf_test['BsmtFinSF2']=df_test['BsmtFinSF2'].fillna(df_test['BsmtFinSF2'].mean())\ndf_test['BsmtUnfSF']=df_test['BsmtUnfSF'].fillna(df_test['BsmtUnfSF'].mean())\ndf_test['TotalBsmtSF']=df_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].mean())\ndf_test['KitchenQual']=df_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0])\ndf_test['GarageCars']=df_test['GarageCars'].fillna(df_test['GarageCars'].mean())\ndf_test['GarageArea']=df_test['GarageArea'].fillna(df_test['GarageArea'].mean())\ndf_test['SaleType']=df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])\n","b8bbb98b":"df_test.isnull().sum().any()","63f2005e":"df_test.shape","34258067":"df_train.shape","1f4739e0":"final_df = pd.concat([df_train,df_test],axis=0)","c7fc5ed6":"final_df.shape","e5e57946":"final_df = category_onehot_multcols(cat_feature)","62abaa94":"final_df.shape #After one hot encoding categorical data","ef338952":"final_df =final_df.loc[:,~final_df.columns.duplicated()]","4a9f3e64":"final_df.shape","6be62b80":"train_df = final_df.iloc[:1422,:]\ntest_df = final_df.iloc[1422:,:]","eccdab21":"test_df.head()","615b0137":"train_df.head()","41e50b9b":"test_df.drop([\"SalePrice\"],axis=1,inplace=True)","b86bdf67":"train_df[\"SalePrice\"]","dc0c792e":"X_train=train_df.drop(['SalePrice'],axis=1)\ny_train=train_df['SalePrice']","8e9d0ed9":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nX_train = scalar.fit_transform(X_train)\ntest_df = scalar.transform(test_df)","6029c9db":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)","2970c6cf":"y_tr=lr.predict(X_train)","e21ec595":"lr.coef_","caa73efc":"lr.intercept_","3468b79e":"y_pred = lr.predict(test_df)","5527f15e":"lst = sol\n  \n# list of int\nlst2 = list(y_pred)\n  \n# Calling DataFrame constructor after zipping\n# both lists, with columns specified\ndf = pd.DataFrame(list(zip(lst, lst2)),\n               columns =['id', 'SalePrice'])","c47fc810":"df.to_csv('result.csv',index=False)","7a876751":"## Handling Test Data","3a8e47e3":"#### Handling missing values","1578453f":"### importing libraries","da6247ef":"### Loading data sets","75863782":"##### Here i'm filling null values with mean and mode for numerical columns and categorical columns respectively","91b426bd":"### Concatinating train and test data to do one hot encoding for categorical data","39bd547f":"## Finding predictions for Test data and make .csv file","771aeb05":"## Multiple Linear Regression"}}