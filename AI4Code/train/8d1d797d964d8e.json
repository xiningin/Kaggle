{"cell_type":{"c4ccbcda":"code","5076623b":"code","2e15c4fe":"code","6251cb7c":"code","03dd6553":"code","f487edd2":"code","239f0383":"code","1c8e3edf":"code","5ce2cceb":"code","31b3957c":"code","459c6920":"code","93cefd4a":"code","8f6a7f97":"code","d81ea391":"code","c533f594":"code","5f19ba22":"code","84b48854":"code","8900dcfd":"code","1a0921a6":"code","fd9abe02":"code","22b53aed":"code","eb90b851":"code","91383bcc":"code","f303aa0e":"code","0ff836f1":"code","063cda6e":"code","4d5589c9":"code","0c9dd6bb":"code","30d73d7f":"code","94aecace":"code","b552c622":"code","e69267a8":"code","33c944f3":"code","2f01191f":"code","be4e0dcb":"code","463ea2be":"code","15b3f0a0":"code","ff0cef52":"code","4dc9c9e7":"code","fcbef081":"code","d898e110":"code","fc72aa16":"code","f7d49a0b":"code","533314e9":"code","42830021":"code","1660e6bb":"code","ded28366":"code","35333b15":"code","64ca16d0":"code","22ee0790":"code","51f3af54":"code","de6ec202":"code","f6290616":"code","2c108b08":"code","bbb9c1fd":"code","c957e4dc":"code","757e3719":"code","aca5f97e":"code","f094dfd5":"code","68b29753":"code","7f242a87":"code","76a6b1b7":"code","2386db58":"code","c2845a3d":"code","35d84739":"code","32f8f9e9":"code","af26c9e3":"code","02dc98a3":"code","1e36e3ff":"code","6cdf65fb":"code","f681331a":"code","e78b71ae":"code","09cd526e":"code","cae65fa2":"code","926b3b5f":"code","27ff976a":"code","b87dfb77":"code","dc606bce":"code","454a7f92":"code","ad3a93e6":"code","14c47ed2":"code","ac1b029e":"code","5c2b6625":"code","435fdfcf":"code","9834894c":"code","0420fcf4":"code","46ee875e":"code","f18e40f9":"code","62a8d115":"code","c47b6a6e":"code","575370b9":"code","8f5346d3":"code","84f3fb09":"code","12391b81":"markdown","edde339e":"markdown","369acd5d":"markdown","e5124030":"markdown","62e8b2d1":"markdown","aa8f81b4":"markdown","1c811d21":"markdown","b8209cc9":"markdown","e1875960":"markdown","67a107bd":"markdown","304d7db7":"markdown","da0eb4b9":"markdown","bb40a433":"markdown","58d9a8cc":"markdown","2dcde44d":"markdown","658e1735":"markdown","b9bc0f5b":"markdown","d4633558":"markdown","f0c82c36":"markdown","14385f30":"markdown","55963704":"markdown","3369330f":"markdown","dde23863":"markdown","f8b12bba":"markdown","33befa2b":"markdown","81ef8462":"markdown","064d58e9":"markdown","16fa6811":"markdown","a7ba4254":"markdown","d3420025":"markdown","aa805748":"markdown","800238fe":"markdown","e0c754d1":"markdown","039bbeaa":"markdown","7462dcc7":"markdown","d71d4377":"markdown","61e315ac":"markdown","fcb9376b":"markdown","f6f76526":"markdown","ed10b9c9":"markdown","82f67b04":"markdown","8ba2d6d9":"markdown","fa057cb0":"markdown","bda4531a":"markdown","58e3f3bd":"markdown"},"source":{"c4ccbcda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nplt.style.use('seaborn-whitegrid') # white grid i kullanaca\u011f\u0131z\n\nimport seaborn as sns \n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore') # (\u00e7\u0131kan warningleri hata sanmamak i\u00e7in yaz\u0131lan code)\n\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5076623b":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId=test_df['PassengerId']","2e15c4fe":"train_df.columns # train dataset columnslar\u0131","6251cb7c":"train_df.head(5) # ilk 5 satira hizli bakis ","03dd6553":"train_df.describe() #numerik columnlarla ilgili istatistiksel bilgiler ","f487edd2":"train_df.head()","239f0383":"train_df.info()\n# object=string ","1c8e3edf":"# categorical variable gorsellestirme \ndef bar_plot(variable):\n    \"\"\"\n    input:variable ex:'Sex'\n    output:bar plot & value count\n    \n    \"\"\"\n    \n    var=train_df[variable]\n    varValue=var.value_counts()\n    # visualize \n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print('{}: \\n {}'.format(variable,varValue))","5ce2cceb":"category1=['Survived','Sex','Pclass','Embarked','SibSp','Parch']\nfor c in category1:\n    bar_plot(c)","31b3957c":"category2=['Cabin','Name','Ticket']\nfor c in category2:\n    print('{}: \\n'.format(train_df[c].value_counts()))","459c6920":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.title('{} distribution with histogram:'.format(variable))","93cefd4a":"numericVar=['Fare','Age','PassengerId']\nfor n in numericVar:\n    plot_hist(n)\n# passenger id bizim i\u00e7in \u00f6nemli bir parametre de\u011fil","8f6a7f97":"# Pclass vs Survived(Pclass \u0131n hayatta kalmaya olan etkisini inceliyoruz)\ntrain_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)","d81ea391":"train_df[['Pclass','Survived']] # bu datayi Pclass a g\u00f6re groupby yapaca\u011f\u0131z.Grupla ve ortalamasini g\u00f6ster.","c533f594":"# Sex vs Survived(Pclass \u0131n hayatta kalmaya olan etkisini inceliyoruz)\ntrain_df[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)","5f19ba22":"# SibSp vs Survived(Pclass \u0131n hayatta kalmaya olan etkisini inceliyoruz)\ntrain_df[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending=False)","84b48854":"\n# Parch vs Survived(Pclass \u0131n hayatta kalmaya olan etkisini inceliyoruz)\ntrain_df[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending=False)\n","8900dcfd":"# Embarked vs Survived(Pclass \u0131n hayatta kalmaya olan etkisini inceliyoruz)\ntrain_df[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean().sort_values(by='Survived',ascending=False)","1a0921a6":"def detect_outliers(df,features):\n    outlier_indices=[]\n    for c in features:\n        # 1 st quartile \n        Q1=np.percentile(df[c],25)\n        # 3 nd quartile \n        Q3=np.percentile(df[c],75)\n        # IQR\n        IQR=Q3-Q1\n        # Outlier step\n        outlier_step=IQR*1.5\n        # detect outlier and their indeces\n        outlier_list_col=df[(df[c]<Q1-outlier_step)|(df[c]>Q3+outlier_step)].index\n        #store indeces\n        outlier_indices.extend(outlier_list_col)      \n        \n    \n    outlier_indices=Counter(outlier_indices)\n    \n# birden \u00e7ok features de outlier varsa o yolcu \u00e7\u0131kar\u0131lmal\u0131d\u0131r.\n    multiple_outliers=list(i for i,v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers\n        \n        \n        \n        ","fd9abe02":"train_df.loc[detect_outliers(train_df,['Age','SibSp','Parch','Fare'])]","22b53aed":"# drop outliers \ntrain_df=train_df.drop(detect_outliers(train_df,['Age','SibSp','Parch','Fare']),axis=0).reset_index(drop=True)","eb90b851":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)\n# missing value leri silmek i\u00e7in train ve test datalar\u0131n\u0131 birle\u015ftirdik","91383bcc":"train_df.head()","f303aa0e":"train_df.columns[train_df.isnull().any()]\n# train dataset i\u00e7inde hangi columnlarda missing de\u011fer oldu\u011funu bulduk \ntrain_df.isnull().sum()\n# ka\u00e7 tane missing de\u011fer var \u00f6r:256 yolcunun ya\u015f\u0131 bilinmiyor.","0ff836f1":"train_df[train_df['Embarked'].isnull()]\n# Fare \u00f6 g\u00f6re embarked \u0131 doldurma ","063cda6e":"train_df.boxplot(column='Fare',by='Embarked')\nplt.show()","4d5589c9":"train_df['Embarked']=train_df['Embarked'].fillna('C')\ntrain_df[train_df['Embarked'].isnull()]\n# \u00f6dedikleri \u00fccret 80 olduklar\u0131 i\u00e7in C grubunda olma ihtimalleri y\u00fcksek o y\u00fczden C ile doldurduk","0c9dd6bb":"train_df[train_df['Fare'].isnull()]","30d73d7f":"np.mean(train_df[train_df['Pclass']==3]['Fare'])","94aecace":"train_df['Fare']=train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass']==3]['Fare']))","b552c622":"list1=['SibSp','Parch','Age','Fare','Survived']\nsns.heatmap(train_df[list1].corr(),annot=True,fmt='.2f')\nplt.show()\n# Survived ile Fare arasinda y\u00fcksek korelasyon var ","e69267a8":"g=sns.factorplot(x='SibSp',y='Survived',data=train_df,kind='bar',size=6)\ng.set_ylabels('Survived Probability')\nplt.show()\n# Yolcu 2 den fazla ","33c944f3":"g=sns.factorplot(x='Parch',y='Survived',data=train_df,kind='bar',size=6)\ng.set_ylabels('Survived Probability')\nplt.show()","2f01191f":"g=sns.factorplot(x='Pclass',y='Survived',data=train_df,kind='bar',size=6)\ng.set_ylabels('Survived Probability')\nplt.show()","be4e0dcb":"g=sns.FacetGrid(train_df,col='Survived')\ng.map(sns.distplot,'Age',bins=25)\nplt.show()","463ea2be":"g=sns.FacetGrid(train_df,col='Survived',row='Pclass',size=2)\ng.map(plt.hist,'Age',bins=25)\ng.add_legend()\nplt.show()","15b3f0a0":"g=sns.FacetGrid(train_df,row='Embarked',size=2)\ng.map(sns.pointplot,'Pclass','Survived','Sex')\ng.add_legend()\nplt.show()","ff0cef52":"g=sns.FacetGrid(train_df,row='Embarked',col='Survived',size=2.3)\ng.map(sns.barplot,'Sex','Fare')\ng.add_legend()\nplt.show()","4dc9c9e7":"train_df[train_df['Age'].isnull()]","fcbef081":"sns.factorplot(x='Sex',y='Age',data=train_df,kind='box')\nplt.show()\n# Sex is not informative for age prediction ,age distribution seems to be same.","d898e110":"sns.factorplot(x='Sex',y='Age',hue='Pclass',data=train_df,kind='box')\nplt.show()\n#1 st class passengers are older than 2 nd class and 2 nd class older than 3 rd class","fc72aa16":"sns.factorplot(x='Parch',y='Age',data=train_df,kind='box')\nsns.factorplot(x='SibSp',y='Age',data=train_df,kind='box')\nplt.show()","f7d49a0b":"train_df['Sex']=[1  if i=='male' else 0 for i in train_df['Sex']]","533314e9":"sns.heatmap(train_df[['Age','Sex','SibSp','Parch','Pclass']].corr(),annot=True )\nplt.show()","42830021":"index_nan_age=list(train_df['Age'][train_df['Age'].isnull()].index)\n# age in bulunmad\u0131\u011f\u0131 indexleri bul\nfor i in index_nan_age:\n    age_pred=train_df['Age'][((train_df['SibSp']==train_df.iloc[i]['SibSp'])&(train_df['Parch']==train_df.iloc[i]['Parch'])&(train_df['Pclass']==train_df.iloc[i]['Pclass']))].median()\n    age_med=train_df['Sex'].median()\n    if not np.isnan(age_pred):\n        train_df['Age'].iloc[i]=age_pred\n    else:\n        train_df['Age'].iloc[i]=age_med","1660e6bb":"train_df[train_df['Age'].isnull()]\n# t\u00fcm null de\u011ferleri ortadan kald\u0131rd\u0131k.","ded28366":"train_df['Name'].head(10)\n","35333b15":"# \u00f6r: \nstring='Braund, Mr. Owen Harris'\nstring.split('.')[0].split(',')[-1].strip()\n","64ca16d0":"name=train_df['Name']\ntrain_df['Title']=[i.split('.')[0].split(',')[-1].strip() for i in name]","22ee0790":"train_df['Title'].head(10)","51f3af54":"sns.countplot(x='Title',data=train_df)\nplt.xticks(rotation=60)\nplt.show()","de6ec202":"# convert to categorical \ntrain_df['Title']=train_df['Title'].replace(['Lady','the Countess','Capt','Don','Dr','Major','Rev','Sir','Jonkheer','Dona'],'other')\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","f6290616":"sns.countplot(x='Title',data=train_df)\nplt.xticks(rotation=60)\nplt.show()","2c108b08":"g=sns.factorplot(x='Title',y='Survived',data=train_df,kind='bar')\ng.set_xticklabels(['Master','Mrs','Mr','other'])\ng.set_ylabels('Survival Probability')\nplt.show()","bbb9c1fd":"train_df.head()","c957e4dc":"train_df.drop(labels=['Name'],axis=1,inplace=True)","757e3719":"train_df.head()","aca5f97e":"train_df=pd.get_dummies(train_df,columns=['Title'])\ntrain_df.head()\n# title feature 'ni 4 e b\u00f6ld\u00fck.","f094dfd5":"train_df.head()","68b29753":"train_df['F_size']=train_df['SibSp']+train_df['Parch']+1\n# SbipSp ve Parch feature yi kullan\u0131p family size feature'sini yaratt\u0131k ","7f242a87":"train_df.head()","76a6b1b7":"g=sns.factorplot(x='F_size',y='Survived',data=train_df,kind='bar')\ng.set_ylabels('Survive Probability')\nplt.show()","2386db58":"train_df['family_size']=[1 if i<5 else 0 for i in train_df['F_size']]","c2845a3d":"train_df.head(10)","35d84739":"sns.countplot(x='family_size',data=train_df)\nplt.show()","32f8f9e9":"g=sns.factorplot(x='family_size',y='Survived',data=train_df,kind='bar')\ng.set_ylabels('Survive Probability')\nplt.show()","af26c9e3":"train_df=pd.get_dummies(train_df,columns=['family_size'])\ntrain_df.head()","02dc98a3":"train_df['Embarked'].head()","1e36e3ff":"sns.countplot(x='Embarked',data=train_df)\nplt.show()","6cdf65fb":"train_df=pd.get_dummies(train_df,columns=['Embarked'])\ntrain_df.head()","f681331a":"train_df['Ticket'].head(20)","e78b71ae":"a='A\/5 21171'\na.replace('.','').replace('\/','').strip().split(' ')[0]\n","09cd526e":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace('.','').replace('\/','').strip().split(' ')[0])\n    else:\n        tickets.append('x')\ntrain_df['Ticket']=tickets\n\n        \n        ","cae65fa2":"train_df['Ticket'].head(20)\n# sondaki sayilari ortadan kaldirdik ","926b3b5f":"train_df.head()","27ff976a":"train_df=pd.get_dummies(train_df,columns=['Ticket'],prefix=('T'))\ntrain_df.head(10)","b87dfb77":"sns.countplot(x='Pclass',data=train_df)\nplt.show()","dc606bce":"train_df['Pclass']=train_df['Pclass'].astype('category')\ntrain_df=pd.get_dummies(train_df,columns=['Pclass'])\ntrain_df.head(10)","454a7f92":"train_df['Sex']=train_df['Sex'].astype('category')\ntrain_df=pd.get_dummies(train_df,columns=['Sex'])\ntrain_df.head()","ad3a93e6":"train_df.drop(labels=['PassengerId','Cabin'],axis=1,inplace=True)","14c47ed2":"train_df.columns","ac1b029e":"from sklearn.model_selection import train_test_split,StratifiedKFold,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","5c2b6625":"train_df_len","435fdfcf":"test=train_df[train_df_len:]\ntest.drop(labels=['Survived'],axis=1,inplace=True)","9834894c":"test.head()","0420fcf4":"train=train_df[:train_df_len]\nX_train=train.drop(labels='Survived',axis=1)\ny_train=train['Survived']\nX_train,X_test,y_train,y_test=train_test_split(X_train,y_train,test_size=0.33,random_state=42)\nprint('X_train',len(X_train))\nprint('X_test',len(X_test))\nprint('y_train',len(y_train))\nprint('y_test',len(y_test))\nprint('test',len(test))","46ee875e":"logreg=LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_reg_train=round(logreg.score(X_train,y_train)*100,2)\nacc_log_reg_test=round(logreg.score(X_test,y_test)*100,2)\nprint('Training accuracy: % {}'.format(acc_log_reg_train))\nprint('Testing accuracy: % {}'.format(acc_log_reg_test))\n","f18e40f9":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]\n","62a8d115":"cv_results=[]\nbest_estimators=[]\nfor i in range(len(classifier)):\n    clf=GridSearchCV(classifier[i],param_grid=classifier_param[i],cv=StratifiedKFold(n_splits=10),scoring='accuracy',n_jobs=-1,verbose=1)\n    clf.fit(X_train,y_train)\n    cv_results.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_results[i])\n                     ","c47b6a6e":"cv_result=pd.DataFrame({'Cross Validation Means':cv_results,'ML Models':['DecisionTreeClassifier',\n                         'SVC',\n                         'RandomForestClassifier',                   \n                         'LogisticRegression',\n                         'KNeighborsClassifier']})\n\ng=sns.barplot('Cross Validation Means','ML Models',data=cv_result)\ng.set_xlabel('Mean Accuracy')\ng.set_title('Cross Validation Scores ')","575370b9":"votingC=VotingClassifier(estimators=[('dt',best_estimators[0]),\n                                     ('rfc',best_estimators[2]),\n                                     ('lr',best_estimators[3])],\n                                     voting='soft',n_jobs=-1)\n                                    \nvotingC=votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),(y_test)))","8f5346d3":"test_survived=pd.Series(votingC.predict(test),name='Survived').astype(int)\nresults=pd.concat([test_PassengerId,test_survived])\nresults.to_csv('Titanic.csv',index=False)\n","84f3fb09":"test.head()","12391b81":"<a id='15'><\/a><br>\n# Pclass--Survived","edde339e":"* age is not corraleted with sex but it is corralated with parch,sibsp and pclass","369acd5d":"# Introduction\n\nThe sinking of Titanic is one of the most notorious shipwrecks in the history.In 1912 during her voyage,the titanic sank after colliding with an iceberg,killing 1502 out of 2224 passengers and crew.\n\n<font color='blue'>\nContent:\n    \n1. [Load and check data](#1)    \n1. [Veriable Description](#2)\n    * [Univariate Variable Analysis](#3)\n       * [Categorical Variable Analysis](#4)\n       * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7) \n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation between SibSp--Parch-Age--Fare--Survived](#12)\n    * [SibSp--Survived](#13)\n    * [Parch--Survived](#14)\n    * [Pclass--Survived](#15)\n    * [Age--Survived](#16)\n    * [Pclass--Survived--Age](#17)\n    * [Embarked--Sex--Pclass--Survived](#18) \n    * [Embarked--Sex--Fare--Survived](#19) \n    * [Fill Missing:Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name--Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger Id and Cabin ](#28)\n1. [Modeling](#29)\n    * [Train-Test Split](#30)\n    * [Simple Logictic Regression](#31)\n    * [Hyperparameter--Tuning--Grid Search--Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)\n        \n        \n        \n   \n    \n    \n    \n\n\n    \n    \n","e5124030":"<a id='28'><\/a><br>\n# Drop Passenger Id and Cabin ","62e8b2d1":"<a id='31'><\/a><br>\n# Simple Logictic Regression","aa8f81b4":"<a id='9'><\/a><br>\n## Find Missing Value","1c811d21":"<a id='25'><\/a><br>\n# Ticket","b8209cc9":"<a id='4'><\/a><br>\n## Categorical Variable","e1875960":"* Having a lot of SibSp have less chance to survive.\n* if SibSp = 0 or 1 or 2 passenger has more chance to survive\n* we can consider a new feature describing these cetogories.","67a107bd":"<a id='20'><\/a><br>\n# Fill Missing:Age Feature","304d7db7":"<a id='30'><\/a><br>\n# Train-Test Split","da0eb4b9":"<a id='1'><\/a><br>\n# 1.Load and check data","bb40a433":"<a id='21'><\/a><br>\n# Feature Engineering","58d9a8cc":"<a id='23'><\/a><br>\n# Family Size","2dcde44d":"<a id='18'><\/a><br>\n# Embarked--Sex--Pclass--Survived","658e1735":"<a id='6'><\/a><br>\n# Basic Data Analysis\n\n* Pclass-Survived\n* Sex-Survived\n* SibSp-Survived\n* Parch-Survived\n* Embarked-Survived","b9bc0f5b":"<a id='33'><\/a><br>\n# Ensemble Modeling","d4633558":"<a id='32'><\/a><br>\n# Hyperparameter Tuning--Grid Search--Cross Validation\n* we well compare 5 Ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest \n* KNN\n* Logistic Regression","f0c82c36":"<a id='2'><\/a><br>\n# 2.Veriable Description\n1. PassengerId : unique Id number to each passenger\n1. Survived :passenger survive(1) or died(0) \n1. Pclass:passenger class\n1. Name:name\n1. Sex:gender of passengers\n1. Age:age of passengers\n1. SibSp:number of siblings\/spouses (in ship)\n1. Parch:number of parents\/children (in ship)\n1. Ticket:ticket number\n1. Fare:amount of money spent on ticket \n1. Cabin:cabin category \n1. Embarked:port where passenger embarked(C=Cherborg,Q=Queenstown,S=Southampton)","14385f30":"<a id='27'><\/a><br>\n# Sex","55963704":"<a id='3'><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived,Sex,Pclass,Embarked,Cabin,Name,Ticket,Sibsp,Parch\n* Numerical Variable:Age,PassengeId,Fare","3369330f":"train_df.columns","dde23863":"<a id='22'><\/a><br>\n## Name--Title","f8b12bba":"* Small families have more chance to survive than large families","33befa2b":"<a id='7'><\/a><br>\n# Outlier Detection","81ef8462":"<a id='17'><\/a><br>\n# Pclass--Survived--Age","064d58e9":"<a id='11'><\/a><br>\n# Visualization","16fa6811":"<a id='13'><\/a><br>\n#  SibSp--Survived","a7ba4254":"* float64(2):Fare and Age \n* int64(5):Pclass,sibsp,parch,passengerId and survived\n* object(5):name,sex,Cabin,embarked,Ticket","d3420025":"<a id='12'><\/a><br>\n## Correlation between SibSp--Parch-Age--Fare--Survived","aa805748":"* Fare feature seems to have correlation with survived feature (0.26)","800238fe":"<a id='19'><\/a><br>\n# Embarked--Sex--Fare--Survived","e0c754d1":"<a id='8'><\/a><br>\n# Missing Value\n   * Find Missing Value\n   * Fill Missing Value","039bbeaa":"* Pclass is important feature for model training","7462dcc7":"<a id='24'><\/a><br>\n# Embarked","d71d4377":"* female passengers have much better survival rate than males.\n* males  have better survival rate in pclass 3 in C\n* embarked and sex will be used in training","61e315ac":"<a id='16'><\/a><br>\n# Age--Survived","fcb9376b":"<a id='14'><\/a><br>\n# Parch--Survived ","f6f76526":"* age <=10 has a high survival rate\n* oldest passengers(80) survived\n* large number of 20 years old didnt survived\n* most passengers are in 15-35 in range\n* use age feature in training \n* use age distribution for missing value of age ","ed10b9c9":"<a id='26'><\/a><br>\n# Pclass","82f67b04":"<a id='10'><\/a><br>\n# Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only one ","8ba2d6d9":"<a id='29'><\/a><br>\n# Modeling","fa057cb0":"<a id='5'><\/a><br>\n## Numerical Variable","bda4531a":"* sibsp and parch can be used for new feature extraction with th=3\n* small families have more chance to survive\n* there is a std in survival of passenger with parch=3","58e3f3bd":"<a id='34'><\/a><br>\n# Prediction and Submission"}}