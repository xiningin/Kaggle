{"cell_type":{"b7534693":"code","91fd24e8":"code","41771457":"code","4fdf93d2":"code","157a9838":"code","1068adf6":"code","3ccdb415":"code","e30e6c5b":"code","98172fba":"code","9f716489":"code","d3644adc":"code","99f10659":"code","be0430ad":"code","10a2b7c7":"code","ff6dca7c":"code","b8e1c14e":"code","5f64d719":"code","5c20204a":"code","6fac5790":"code","ab9d638c":"code","912c8fc1":"code","6ce5de46":"code","40c4372e":"code","d17366cb":"code","4bf44025":"code","020726b2":"code","1b79de5f":"code","1d573fca":"code","9b09bb08":"code","668a65b1":"code","77930530":"code","c7b1c12a":"code","83e6fd9d":"code","415e731a":"code","aee01fdd":"code","d4a96d26":"code","d2bf67e3":"code","a2a2f6d7":"code","4454090f":"code","76451a36":"code","0d44a041":"code","a057dfb9":"markdown","132a41da":"markdown","2771a797":"markdown","d31c26aa":"markdown","ff63f75f":"markdown","b21873b3":"markdown","aa89c889":"markdown","c30baae1":"markdown","01339870":"markdown","9af6f782":"markdown","8efb9c2c":"markdown","ed6565c0":"markdown","3e18d8f2":"markdown","7ecaa673":"markdown","618d9463":"markdown","7ca6f0d6":"markdown","50c27faf":"markdown","2ab6934d":"markdown","8dd1db23":"markdown"},"source":{"b7534693":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91fd24e8":"from sklearn.metrics import roc_auc_score, roc_curve","41771457":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","4fdf93d2":"data = pd.read_csv('..\/input\/advanced-dls-spring-2021\/train.csv')\ndata.sample(10) #\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438","157a9838":"# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = [\n    'ClientPeriod',\n    'MonthlySpending',\n    'TotalSpent'\n]\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = [\n    'Sex',\n    'IsSeniorCitizen',\n    'HasPartner',\n    'HasChild',\n    'HasPhoneService',\n    'HasMultiplePhoneNumbers',\n    'HasInternetService',\n    'HasOnlineSecurityService',\n    'HasOnlineBackup',\n    'HasDeviceProtection',\n    'HasTechSupportAccess',\n    'HasOnlineTV',\n    'HasMovieSubscription',\n    'HasContractPhone',\n    'IsBillingPaperless',\n    'PaymentMethod'\n]\n\nfeature_cols = num_cols + cat_cols\ntarget_col = 'Churn'","1068adf6":"#\u0438\u0449\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e nan \u0438 null \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\nfor i in range(len(num_cols)):\n    summ = (data[num_cols[i]].isnull()).sum() + (data[num_cols[i]].isna()).sum()\n    print (num_cols[i], summ)\n\nfor i in range(len(cat_cols)):\n    summ = data[cat_cols[i]].isnull().sum() + data[cat_cols[i]].isna().sum()\n    print (cat_cols[i], summ)","3ccdb415":"data['TotalSpent'] = pd.to_numeric(data['TotalSpent'], errors ='coerce')\ndata['ClientPeriod'] = pd.to_numeric(data['ClientPeriod'], errors ='coerce')\ndata['MonthlySpending'] = pd.to_numeric(data['MonthlySpending'], errors ='coerce')\n# data.sample(20)\n\nfor i in range(len(num_cols)):\n    summ = (data[num_cols[i]].isnull()).sum() + (data[num_cols[i]].isna()).sum()\n    print (num_cols[i], summ)\n","e30e6c5b":"#\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043d\ndata = data.dropna() #\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043d","98172fba":"data_test = pd.read_csv('..\/input\/advanced-dls-spring-2021\/test.csv')\nfor i in range(len(num_cols)):\n    summ = (data_test[num_cols[i]].isnull()).sum() + (data_test[num_cols[i]].isna()).sum()\n    print (num_cols[i], summ)\n\nfor i in range(len(cat_cols)):\n    summ = data_test[cat_cols[i]].isnull().sum() + data_test[cat_cols[i]].isna().sum()\n    print (cat_cols[i], summ)\n\ndata_test['TotalSpent'] = pd.to_numeric(data_test['TotalSpent'], errors ='coerce')\ndata_test['ClientPeriod'] = pd.to_numeric(data_test['ClientPeriod'], errors ='coerce')\ndata_test['MonthlySpending'] = pd.to_numeric(data_test['MonthlySpending'], errors ='coerce')\n\nfor i in range(len(num_cols)):\n    summ = (data_test[num_cols[i]].isnull()).sum() + (data_test[num_cols[i]].isna()).sum()\n    print (num_cols[i], summ)\ndata_test = data_test.dropna() #\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043d","9f716489":"import seaborn as sns\nsns.set()\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 8, 8","d3644adc":"# num_cols\nplt.figure()\nplt.hist(data['ClientPeriod'], bins=10, color='red')\nplt.title('ClientPeriod')\nplt.ylabel('\u0427\u0430\u0441\u0442\u043e\u0442\u0430')\nplt.xlabel('\u041f\u0435\u0440\u0438\u043e\u0434')\nplt.show() \n\nplt.figure()\nplt.hist(data['ClientPeriod'], bins=3, color='r')\nplt.title('ClientPeriod')\nplt.ylabel('\u0427\u0430\u0441\u0442\u043e\u0442\u0430')\nplt.xlabel('\u041f\u0435\u0440\u0438\u043e\u0434')\nplt.show() ","99f10659":"plt.figure()\nplt.hist(data['MonthlySpending'], bins=10, color='blue')\nplt.title('MonthlySpending')\nplt.ylabel('\u0427\u0430\u0441\u0442\u043e\u0442\u0430')\nplt.xlabel('\u0415\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b')\nplt.show() ","be0430ad":"plt.figure()\nplt.hist(data['TotalSpent'], bins=10, color='greenyellow')\nplt.title('TotalSpent')\nplt.ylabel('\u0427\u0430\u0441\u0442\u043e\u0442\u0430')\nplt.xlabel('\u0412\u0441\u0435\u0433\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043e')\nplt.show() ","10a2b7c7":"#\u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nfor i in range(len(cat_cols)):\n    print(data.value_counts(data[cat_cols[i]]),'\\n')","ff6dca7c":"rcParams['figure.figsize'] = 15, 8","b8e1c14e":"plt.subplot(1, 4, 1)\nplt.pie(data.value_counts(data['Sex']), labels = data['Sex'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Sex')\nplt.legend()\n\nplt.subplot(1, 4, 2)\nplt.pie(data.value_counts(data['IsSeniorCitizen']), labels = data['IsSeniorCitizen'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('IsSeniorCitizen')\nplt.legend()\n\nplt.subplot(1, 4, 3)\nplt.pie(data.value_counts(data['HasPartner']), labels = data['HasPartner'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasPartner')\nplt.legend()\n\nplt.subplot(1, 4, 4)\nplt.pie(data.value_counts(data['HasChild']), labels = data['HasChild'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasChild')\nplt.legend()\nplt.show()\n\nplt.subplot(1, 4, 1)\nplt.pie(data.value_counts(data['HasPhoneService']), labels = data['HasPhoneService'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasPhoneService')\nplt.legend()\n\nplt.subplot(1, 4, 2)\nplt.pie(data.value_counts(data['HasMultiplePhoneNumbers']), labels = data['HasMultiplePhoneNumbers'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasMultiplePhoneNumbers')\nplt.legend()\n\nplt.subplot(1, 4, 3)\nplt.pie(data.value_counts(data['HasInternetService']), labels = data['HasInternetService'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasInternetService')\nplt.legend()\n\nplt.subplot(1, 4, 4)\nplt.pie(data.value_counts(data['HasOnlineSecurityService']), labels = data['HasOnlineSecurityService'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasOnlineSecurityService')\nplt.legend()\nplt.show()","5f64d719":"plt.subplot(1, 4, 1)\nplt.pie(data.value_counts(data['HasOnlineBackup']), labels = data['HasOnlineBackup'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasOnlineBackup')\nplt.legend()\n\nplt.subplot(1, 4, 2)\nplt.pie(data.value_counts(data['HasDeviceProtection']), labels = data['HasDeviceProtection'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasDeviceProtection')\nplt.legend()\n\nplt.subplot(1, 4, 3)\nplt.pie(data.value_counts(data['HasTechSupportAccess']), labels = data['HasTechSupportAccess'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasTechSupportAccess')\nplt.legend()\n\nplt.subplot(1, 4, 4)\nplt.pie(data.value_counts(data['HasOnlineTV']), labels = data['HasOnlineTV'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasOnlineTV')\nplt.legend()\nplt.show()","5c20204a":"plt.subplot(1, 4, 1)\nplt.pie(data.value_counts(data['HasMovieSubscription']), labels = data['HasMovieSubscription'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasMovieSubscription')\nplt.legend()\n\nplt.subplot(1, 4, 2)\nplt.pie(data.value_counts(data['HasContractPhone']), labels = data['HasContractPhone'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('HasContractPhone')\nplt.legend()\n\nplt.subplot(1, 4, 3)\nplt.pie(data.value_counts(data['IsBillingPaperless']), labels = data['IsBillingPaperless'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('IsBillingPaperless')\nplt.legend()\n\nplt.subplot(1, 4, 4)\nplt.pie(data.value_counts(data['PaymentMethod']), labels = data['PaymentMethod'].unique(), autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('PaymentMethod')\nplt.legend()\nplt.show()","6fac5790":"data.value_counts(data['Churn'])","ab9d638c":"from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nimport copy","912c8fc1":"X_origin = data.iloc[:, :-1] #\u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u043e\u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439\nX_origin_train = data[num_cols].iloc[:, :-1]\nX_origin_test = data_test[num_cols].iloc[:, :-1]\n\nX_train = data[num_cols]\nX_test = data_test[num_cols]\n# \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\nscaler = StandardScaler()\nX_train_scaler = scaler.fit_transform(X_train)\nX_origin_train[num_cols] = X_train_scaler\nprint(X_origin_train[num_cols])\n\n#\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439\nX_test_scaler = scaler.transform(X_test)\nX_origin_test[num_cols] = X_test_scaler\nprint(X_origin_test[num_cols])","6ce5de46":"dummy_features = pd.get_dummies(data[cat_cols]) \nX = pd.concat([X_origin_train, dummy_features], axis=1)  \nX.head()","40c4372e":"y_train = data['Churn']","d17366cb":"from sklearn.model_selection import GridSearchCV # \u0441\u0435\u0442\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \nfrom sklearn.model_selection import RandomizedSearchCV","4bf44025":"def search_and_draw(X, y, model, param_name, grid, param_scale='ordinary', draw=True): \n    #param_scale='ordinary', draw=True \u044d\u0442\u043e \u043f\u0430\u0440-\u0440\u044b \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0438 \u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c \u043b\u0438 \u0435\u0433\u043e \u0432\u043e\u043e\u0431\u0449\u0435     \n    #X, y, model - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0432\u0445\u043e\u0434\u044f\u0449 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0432\u0435\u043a\u0442\u043e\u0440\u044b\n    \n    parameters = {param_name: grid} #\u0441\u0435\u0442\u043a\u0430 \u0441\u043e\u0437\u0434-\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u043e\u0432\u0430\u0440\u044f (dict) \u0433\u0434\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0438\u043c\u044f \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440-\u0440\u0430\n    \n    \n    CV_model = GridSearchCV(estimator=model, #\u044d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n                            param_grid=parameters, \n                            cv=8, #\u044d\u0442\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \n                            scoring='roc_auc',#\u043c\u0435\u0442\u0440\u0440\u0438\u043a\u0430 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0444\u043e\u043b\u0434\u043e\u0432, \u044d\u0442\u0430 \u0447\u0435\u043c \u0431\u043b\u0438\u0436\u0435 \u0432 1 -\u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435\n                            n_jobs=-1, #\u043a\u043e\u043b-\u0432\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 (-1 - \u044d\u0442\u043e \u0432\u0441\u0435 \u043f\u043e\u0442\u043e\u043a\u0438)\n                            verbose=10) #\u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u043e\n    \n    CV_model.fit(X, y) #\u044d\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0445 \u0438 \u0443. \u042d\u0442\u043e \u0432\u0441\u0435 \u043f\u043e\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432  \n    means = CV_model.cv_results_['mean_test_score']\n    error = CV_model.cv_results_['std_test_score'] #\u0432 \u044d\u0442\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 (\u043e \u0442\u0435\u0441\u0442\u0435) \u0438\u0437 \u043e\u0442\u0447\u0435\u0442\u0430\n    \n    if draw: #\u044d\u0442\u043e \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n        plt.figure(figsize=(15,8))\n        plt.title('choose ' + param_name)\n\n\n        if (param_scale == 'log'):\n            plt.xscale('log')\n\n        plt.plot(grid, means, label='mean values of score', color='red', lw=3)\n\n        plt.fill_between(grid, means - 2 * error, means + 2 * error, \n                         color='green', label='filled area between errors', alpha=0.5)\n        legend_box = plt.legend(framealpha=1).get_frame()\n        legend_box.set_facecolor(\"white\")\n        legend_box.set_edgecolor(\"black\")\n        plt.xlabel('parameter')\n        plt.ylabel('roc_auc')\n        plt.show()\n        \n    return means, error","020726b2":"models = [LogisticRegression()] #\u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440-\u0440\u044b\nparam_names = ['C'] #\u0442\u0435 \u0441\u0430\u043c\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440-\u0440\u044b -\u043a\u043e\u043b\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0438 \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0430\ngrids = [np.array([100, 10, 1, 0.1, 0.01, 0.001])] # \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043f\u0430\u0440-\u0440\u043e\u0432, \u0441\u0435\u0442\u043a\u0430\nparam_scales = ['log', 'ordinary'] ","1b79de5f":"for model, param_name, grid, param_scale in zip(models, \n                                                param_names, \n                                                grids, \n                                                param_scales):\n    search_and_draw(X, y_train, model, param_name, grid, param_scale)","1d573fca":"\u041b\u0443\u0447\u0448\u0435\u0435 \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 - 0.844 \u0441 \u0421= 0.1","9b09bb08":"import catboost ","668a65b1":"X_train_origin, X_test_origin, y_train, y_test = train_test_split(data[feature_cols], data['Churn'], \n                                                       train_size=0.8, \n                                                       random_state=42)","77930530":"boosting_model = catboost.CatBoostClassifier(n_estimators=200, \n                                             cat_features=cat_cols)\n\nboosting_model.fit(X_train_origin, y_train)\n\ny_train_predicted = boosting_model.predict_proba(X_train_origin)[:, 1]\ny_test_predicted = boosting_model.predict_proba(X_test_origin)[:, 1]","c7b1c12a":" train_auc = roc_auc_score(y_train, y_train_predicted)\ntest_auc = roc_auc_score(y_test, y_test_predicted)\n\nplt.figure(figsize=(10,7))\nplt.plot(*roc_curve(y_train, y_train_predicted)[:2], label='train AUC={:.4f}'.format(train_auc))\nplt.plot(*roc_curve(y_test, y_test_predicted)[:2], label='test AUC={:.4f}'.format(test_auc))\nlegend_box = plt.legend(fontsize='large', framealpha=1).get_frame()\nlegend_box.set_facecolor(\"white\")\nlegend_box.set_edgecolor(\"black\")\nplt.plot(np.linspace(0,1,100), np.linspace(0,1,100))\nplt.show()","83e6fd9d":"boosting_model = catboost.CatBoostClassifier(n_estimators=100, \n                                             cat_features=cat_cols)\n\nboosting_model.fit(X_train_origin, y_train)\n\ny_train_predicted = boosting_model.predict_proba(X_train_origin)[:, 1]\ny_test_predicted = boosting_model.predict_proba(X_test_origin)[:, 1]","415e731a":"train_auc = roc_auc_score(y_train, y_train_predicted)\ntest_auc = roc_auc_score(y_test, y_test_predicted)\n\nplt.figure(figsize=(10,7))\nplt.plot(*roc_curve(y_train, y_train_predicted)[:2], label='train AUC={:.4f}'.format(train_auc))\nplt.plot(*roc_curve(y_test, y_test_predicted)[:2], label='test AUC={:.4f}'.format(test_auc))\nlegend_box = plt.legend(fontsize='large', framealpha=1).get_frame()\nlegend_box.set_facecolor(\"white\")\nlegend_box.set_edgecolor(\"black\")\nplt.plot(np.linspace(0,1,100), np.linspace(0,1,100))\nplt.show()","aee01fdd":"y_train = data['Churn']\ny_train.shape, X.shape","d4a96d26":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X.values, y_train.values, \n                                                    train_size=0.8,\n                                                    random_state=42)","d2bf67e3":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm.notebook import tqdm","a2a2f6d7":"max_trees = 100\n\nvalues = np.arange(max_trees) + 1\n\nkf = KFold(n_splits=5, shuffle=True, random_state=1234)\n\nglobal_scores = []\n\nfor train_indices, val_indices in tqdm(kf.split(X_train), total=5):\n    scores = []\n    \n    X_train_kf = X_train[train_indices]\n    y_train_kf = y_train[train_indices]\n    \n    X_val_kf = X_train[val_indices]\n    y_val_kf = y_train[val_indices]\n    \n    forest = RandomForestClassifier(n_estimators=max_trees)\n    forest.fit(X_train_kf, y_train_kf)\n    trees = forest.estimators_\n    \n    for number_of_trees in tqdm(values, leave=False):\n        thinned_forest = RandomForestClassifier(n_estimators=number_of_trees)\n        \n        thinned_forest.n_classes_ = 2\n        thinned_forest.estimators_ = trees[:number_of_trees]\n\n        scores.append(roc_auc_score(y_val_kf, thinned_forest.predict_proba(X_val_kf)[:, 1]))\n    \n    scores = np.array(scores)\n    \n    global_scores.append(scores)\n\nglobal_scores = np.stack(global_scores, axis=0)","4454090f":"mean_cross_val_score = global_scores.mean(axis=0)\nstd_cross_val_score = global_scores.std(axis=0)\n\nplt.figure(figsize=(15,8))\nplt.title('Quality of random forest')\n\nplt.plot(values, mean_cross_val_score, label='mean values', color='red', lw=3)\nplt.fill_between(values, \n                 mean_cross_val_score - 2 * std_cross_val_score, \n                 mean_cross_val_score + 2 * std_cross_val_score, \n                 color='green', \n                 label='filled area between errors',\n                 alpha=0.5)\nlegend_box = plt.legend(framealpha=1).get_frame()\nlegend_box.set_facecolor(\"white\")\nlegend_box.set_edgecolor(\"black\")\nplt.xlabel('number of trees')\nplt.ylabel('roc-auc')\n\nplt.show()","76451a36":"best_model = catboost.CatBoostClassifier(n_estimators=100, \n                                         cat_features=cat_cols,\n                                         learning_rate=0.157346)\n\nbest_model.fit(X_train_origin, y_train)\n\ny_train_predicted = boosting_model.predict_proba(X_train_origin)[:, 1]\ny_test_predicted = boosting_model.predict_proba(X_test_origin)[:, 1]","0d44a041":"X_test = pd.read_csv('..\/input\/advanced-dls-spring-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/advanced-dls-spring-2021\/submission.csv')\n\nsubmission['Churn'] = best_model.predict(X_test) #best_model.predict_proba(X_test)\nsubmission.to_csv('..\/my_submission2.csv', index=False, columns= [\"Id\", \"Churn\"])","a057dfb9":"**\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439**","132a41da":"\u043d\u0435 \u043d\u0430\u0448\u043b\u0438 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e\u0431 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u044b\u043b\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435. \u041d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c\n\u0422\u0430\u043a\u0436\u0435 \u0447\u0438\u0441\u0442\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. ","2771a797":"**\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441** ","d31c26aa":"**\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","ff63f75f":"\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430 (\u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0435,\u0447\u0435\u043c \u0432 3 \u0440\u0430\u0437\u0430)","b21873b3":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\n\u0421\u043b\u0438\u0432\u0430\u0435\u043c \u0432\u043c\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043c\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438(\u0431\u044b\u0432\u0448 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435)","aa89c889":"\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e 0.8444 catboost \u0441 learning_rate=0.157346 \u0438 n_estimate = 100 (Kaggle 0.71128)","c30baae1":"\u041b\u0443\u0447\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - catboost\n\nPredict_proba \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443. \u041f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u043a \u043d\u0443\u043b\u0435\u0432\u043e\u043c\u0443, \u0432\u0442\u043e\u0440\u0430\u044f \u043a \u043f\u0435\u043f\u0432\u043e\u043c\u0443 (\u0438 \u0442\u0434, \u0435\u0441\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0432\u0443\u0445). \u0410 predict \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441","01339870":"**\u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433**\n\ncatboost","9af6f782":"**\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (3 \u0431\u0430\u043b\u043b\u0430)**\n\n\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043a \u043d\u0438\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c LogisticRegression. \n\u041d\u041e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","8efb9c2c":"\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","ed6565c0":"\u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 'TotalSpent' \u0432\u044b\u043b\u0435\u0437\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430. \u0411\u0438\u0442\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430. pd.to_numeric(data, errors ='coerce')","3e18d8f2":"**\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f**","7ecaa673":"**\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445**\n\n\u0414\u043b\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u0430\u043d\u043a\u043e\u0432 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 (plt.hist(...)) \u0438\u043b\u0438 boxplot (plt.boxplot(...)). \n\u0414\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. \n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043d\u0430\u0434\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c data.value_counts() \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c bar \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b plt.bar(...) \u0438\u043b\u0438 \u043a\u0440\u0443\u0433\u043e\u0432\u044b\u0435 \n\u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b plt.pie(...) (\u0445\u043e\u0440\u043e\u0448\u043e, \u0435\u043b\u0441\u0438 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0433\u0430\u0440\u0444\u0438\u043a\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e plt.subplots(...)).","618d9463":"\u041f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435\n\n\u200b\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","7ca6f0d6":"\u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","50c27faf":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u044f\u0447\u0435\u0435\u043a \u0438 nan","2ab6934d":"**\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f** \n\n\u0441 \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u043c \u043f\u0430\u0440-\u0440\u0430 \u0421 \u0441 \u0441\u0435\u0442\u043a\u043e\u0439 ","8dd1db23":"\u0421\u0442\u0440\u043e\u0438\u043c \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c"}}