{"cell_type":{"53b5b9e7":"code","7b39b73f":"code","bf75a690":"code","0c688127":"code","8845d680":"code","5b38d653":"code","531aa335":"code","a32db7b7":"code","4713d013":"code","a0e27a99":"code","a2706950":"code","8041141d":"code","6d81225b":"code","67c13551":"code","040c72ae":"code","361f27e5":"code","ddb2dab6":"code","ed53d3ac":"markdown","daedbe04":"markdown","585492f6":"markdown","c5f4cbfc":"markdown","ef0087db":"markdown","4049495d":"markdown","4a3133ca":"markdown","51646b1a":"markdown","4eeae72b":"markdown","0246e4e4":"markdown","55ebc94a":"markdown","10e3c168":"markdown","2acc3831":"markdown"},"source":{"53b5b9e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport calendar\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7b39b73f":"#importing the data\ntracks = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/tracks.csv\")\nartists = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/artists.csv\")\n","bf75a690":"tracks.head()","0c688127":"tracks.info()","8845d680":"tracks['release_date'] = pd.to_datetime(tracks['release_date'])\ntracks['release_year'] = tracks['release_date'].dt.year\ntracks['release_month'] = tracks['release_date'].dt.month\ntracks['release_month'] = tracks['release_month'].apply(lambda x : calendar.month_name[x])","5b38d653":"tracks.head()","531aa335":"cols_to_drop = ['id' , 'id_artists' , 'release_date']\ntracks.drop(columns= cols_to_drop , inplace = True)\ntracks.head()","a32db7b7":"tracks.groupby('release_year')['explicit'].mean().plot(figsize = (18,6) , kind = 'line' , color = 'blue' , title = 'Rise of Explicit Content on Spotify')","4713d013":"tracks.groupby('artists')['explicit'].sum().sort_values(ascending = False).to_frame()[: 10].plot(kind = 'bar' , figsize = (18,8), color = 'skyblue' ,title = 'Number of Explicit Songs')","a0e27a99":"tracks.groupby('artists')['popularity'].mean().to_frame()[: 10].plot(kind = 'bar', figsize = (18,8) , color = 'lightgreen', title = 'Top 10 Most Popular Artists')","a2706950":"features_to_plot = ['liveness' , 'danceability' , 'energy' , 'speechiness' , 'acousticness' , 'instrumentalness' , 'valence','loudness' , 'tempo']\nfig,ax = plt.subplots(3,3 , figsize =(18,12))\nfor i in range(3):\n    for j in range(3):\n        color = np.random.rand(3,)\n        sns.boxplot(data = tracks , y = features_to_plot[i+j] , ax = ax[i][j] , color = color)\nplt.tight_layout()\nplt.show()\n        \n    ","8041141d":"features_to_plot = ['liveness' , 'danceability' , 'energy' , 'speechiness' , 'acousticness' , 'instrumentalness' , 'valence','loudness' , 'tempo']\nfig,ax = plt.subplots(3,3 , figsize =(18,12))\nfor i in range(3):\n    for j in range(3):\n        color = np.random.rand(3,)\n        sns.lineplot(data = tracks ,x = 'release_year' , y = features_to_plot[i+j] , ax = ax[i][j] , color = color, ci = False)\nplt.tight_layout()\nplt.show()\n        \n    ","6d81225b":"plt.figure(figsize = (18,8))\nsns.lineplot(x = 'release_year' , y = 'duration_ms' , data = tracks , ci = False)\nplt.show()","67c13551":"tracks.head()","040c72ae":"tracks.groupby('release_month')['popularity'].mean().plot(kind = 'bar' , figsize = (18,8) , color = 'skyblue' , title = 'Are the most popular songs released in a particular month?')","361f27e5":"corr = tracks.corr()\nplt.figure(figsize=(20,8))\nsns.heatmap(corr, vmax=1, vmin=-1, center=0,linewidth=.5,square=True,\n            annot = True, annot_kws = {'size':8},fmt='.1f', cmap='BrBG_r')\nplt.title('Correlation')\nplt.show()\n","ddb2dab6":"features_to_plot = ['liveness' , 'danceability' , 'energy' , 'speechiness' , 'acousticness' , 'instrumentalness' , 'valence','loudness' , 'tempo']\nfig,ax = plt.subplots(3,3 , figsize =(18,12))\nfor i in range(3):\n    for j in range(3):\n        color = np.random.rand(3,)\n        tracks.groupby('artists')[features_to_plot[i+j]].mean().sort_values(ascending = False).to_frame()[: 5].plot(\n            kind = 'bar' , color = color\n              , title = f\"top 5 artists for {features_to_plot[i+j]}\"\n              , ax = ax[i][j])\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=1.8)\nplt.tight_layout()\nplt.show()\n        \n    ","ed53d3ac":"## Box Plots to get a better picture of how quartiles are distributed for our track features","daedbe04":"## Plotting Relationships Between Release_Year and track Features","585492f6":"## Lets see how durition of songs have chaged over the years. ","c5f4cbfc":"Top 10 artists having most number of E songs on Spotify","ef0087db":"Lets plot our how our song features have changed over the years","4049495d":"I am feeling a little dirty, the first thing I will check is how the tracks have evolved in their expicitness if you will.\nIf we plot the means of the feature explicit over the yearsit should give us how profane our songs have become over the years. The higher the label 1s in exlicit column, the higher the mean and consequently higher the mean.","4a3133ca":"Most Popular Artists ?","51646b1a":"A few notable correlations in our dataset:\n1. Popularity has a moderatly high correlation with release_year.\n2. energy and loudness are highly correlated. (EDM\/Hard Rock fans unite!)\n3. energy and acousticness are negatively correlated.\n","4eeae72b":"Lets see of month of release affects the popularity of our tracks","0246e4e4":"We'll drop some not so important columns like id ,artist_id , release_date","55ebc94a":"## Lets Plot The top 10 artists for each of our song features.","10e3c168":"I will convert the release_date feature into a datetime object and then extract Features like year, month from it. I will then drop the release_date feature as then it would have server its purpose. \n\nI sound like a GoT villain but thats how we are gonna roll!","2acc3831":"## Lets Plot Some Heatmaps\n"}}