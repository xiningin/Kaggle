{"cell_type":{"c1ad5b6d":"code","5315abca":"code","7e8cc89d":"code","9c55976d":"code","65874b0b":"code","9b1d83a6":"code","f6bc862c":"code","06057db1":"code","49eb0f93":"code","b989d75b":"code","60a3635e":"code","749e7818":"code","515506e0":"code","558deb9d":"code","1c93b56e":"code","56fb2ae2":"code","8dcb0709":"code","f23e506f":"code","6491b9cd":"code","46684bad":"code","4d7b2be2":"code","a6ce9f11":"code","d7171484":"code","ddb737d1":"code","ec478770":"code","630aa9ca":"code","18b1f672":"code","931f33c3":"code","59de40b3":"code","098cd661":"code","3a194229":"code","7924b7c0":"code","281de4e0":"code","8c76ccaf":"code","f951381f":"code","756b6173":"code","5a54fa51":"code","ad445a30":"code","3aea964f":"code","2b2dfba8":"code","a118962e":"code","3477acdc":"code","77ec849f":"code","9e055dd7":"code","a6b66b91":"code","f07a087e":"code","c5e071b1":"code","43ffac7f":"code","139181b9":"code","35e8c11f":"code","76ffba51":"code","7cd34723":"code","8e3a9ab5":"code","0cf5db3a":"code","549f89c4":"code","c4fe5e3f":"code","6fe37b93":"code","2d1feefe":"code","2fbbb770":"code","65212217":"code","364fb2b0":"code","bb346777":"code","ada7fcb3":"code","684ddc85":"code","f3603195":"code","d4943304":"code","8802853d":"code","ee605b44":"code","e4e0ec14":"code","bf41121c":"markdown","ffb56990":"markdown","cdc2422e":"markdown","77de1ab1":"markdown","e8c1fbd8":"markdown","c07726d8":"markdown","6d14007d":"markdown","cb75fbdd":"markdown","d84fef26":"markdown","fa74790a":"markdown","7f0bb333":"markdown","41a0bd1a":"markdown","3273aa50":"markdown","378c93ef":"markdown","c4a83fe9":"markdown","7a925147":"markdown","70b758cb":"markdown","7c72303a":"markdown","fbbecc89":"markdown","0c404a5a":"markdown","71debf1f":"markdown","bdc64fef":"markdown","6881635a":"markdown","1b8940f8":"markdown","30767284":"markdown","19ecdbfe":"markdown","415b19d6":"markdown","363695ef":"markdown","da656f64":"markdown","b752e919":"markdown","3d3b4f2e":"markdown","567d8331":"markdown","90041843":"markdown","6ea5114d":"markdown","741ac8e3":"markdown","44d48f61":"markdown","34495ebe":"markdown","9f8b4bc5":"markdown","5d2c2880":"markdown"},"source":{"c1ad5b6d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom pylab import rcParams\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","5315abca":"data = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\ndata.head()","7e8cc89d":"data.shape","9c55976d":"data.columns","65874b0b":"#Finding the missing data\nsb.heatmap(pd.isnull(data))","9b1d83a6":"#Evaluating the missing values\nmissing_values = data.isnull().sum().sort_values(ascending = False)\nmissing_values","f6bc862c":"#Dropping the Missing values\ndata.dropna(how = 'any', inplace = True)\nmissing_values = data.isnull().sum().sort_values(ascending = False)\nmissing_values","06057db1":"sb.heatmap(pd.isnull(data))","49eb0f93":"data.shape","b989d75b":"#Evaluating the data for Rating field\ndata['Rating'].describe()","60a3635e":"plt.rcParams['figure.figsize'] = (15, 10)\ncount_graph = sb.countplot(data['Rating'])\ncount_graph.set_xticklabels(count_graph.get_xticklabels(), rotation = 90)\ncount_graph\nplt.title('Count of Apps ', size = 20)","749e7818":"plt.rcParams['figure.figsize'] = (15, 10)\nsb.distplot(data.Rating, color = 'red', hist = False)\nplt.title('Rating Distribution', size = 20)","515506e0":"#Categorical Evaluation of Apps\nprint(data['Category'].unique())\nprint('\\n', len(data['Category'].unique()), 'Categories')","558deb9d":"plt.rcParams['figure.figsize'] = (15, 10)\ncount_graph = sb.countplot(data['Category'])\ncount_graph.set_xticklabels(count_graph.get_xticklabels(), rotation = 90)\ncount_graph\nplt.title('Count of Apps in each Category', size = 20)","1c93b56e":"plt.rcParams['figure.figsize'] = (15, 10)\ngraph = sb.boxplot(y = data['Rating'], x = data['Category'])\nsb.despine(left = True)\ngraph.set_xticklabels(graph.get_xticklabels(), rotation = 90)\ngraph\nplt.title('Box Plot of Rating VS Category', size = 20)\nplt.show()","56fb2ae2":"#Evaluating the data for Reviews\ndata['Reviews'].describe()","8dcb0709":"plt.rcParams['figure.figsize'] = (15, 10)\nsb.distplot(data.Reviews, color = 'red', hist = False)\nplt.title('Reviews Distribution', size = 20)\nplt.show()","f23e506f":"#Convertings the Reviews object data into int type to plot comparision graph \ndata['Reviews'] = data['Reviews'].apply(lambda x: int(x))","6491b9cd":"rcParams['figure.figsize'] = (15, 10)\nsb.jointplot(data = data, x = \"Reviews\", y = \"Rating\", size = 10)","46684bad":"rcParams['figure.figsize'] = (15, 10)\nsb.regplot(data = data, x = 'Reviews', y = 'Rating')\nplt.title('Reviews VS Rating', size = 20)","4d7b2be2":"data['Size'].head()","a6ce9f11":"data['Size'].unique()","d7171484":"len(data[data.Size == 'Varies with device'])","ddb737d1":"data['Size'].replace('Varies with device', np.nan , inplace = True)","ec478770":"#Converting the object data type into int \ndata.Size = (data.Size.replace(r'[kM]+$', '', regex=True).astype(float) * \\\n             data.Size.str.extract(r'[\\d\\.]+([KM]+)', expand=False)\n            .fillna(1)\n            .replace(['k','M'], [10**3, 10**6]).astype(int))","630aa9ca":"data['Size'].fillna(data.groupby('Category')['Size'].transform('mean'), inplace = True)","18b1f672":"rcParams['figure.figsize'] = (15, 10)\nsb.jointplot(x = 'Size', y = 'Rating', data = data, size = 10 )","931f33c3":"data['Installs'].head()","59de40b3":"data['Installs'].unique()","098cd661":"plt.rcParams['figure.figsize'] = (15, 10)\ncount_graph = sb.countplot(data['Installs'])\ncount_graph.set_xticklabels(count_graph.get_xticklabels(), rotation = 90)\ncount_graph\nplt.title('Count of Apps ', size = 20)","3a194229":"#Converting the Object data into interger data\ndata.Installs = data.Installs.apply(lambda x: x.replace(',',''))\ndata.Installs = data.Installs.apply(lambda x: x.replace('+',''))\ndata.Installs = data.Installs.apply(lambda x: int(x))","7924b7c0":"data['Installs'].unique()","281de4e0":"#Sorting the values\nsorted_value = sorted(list(data['Installs'].unique()))","8c76ccaf":"data['Installs'].replace(sorted_value, range(0, len(sorted_value), 1), inplace = True)\n","f951381f":"rcParams['figure.figsize'] = (15, 10)\nsb.regplot(x = 'Installs', y = 'Rating', data = data)\nplt.title(\"Ratings VS Installs\", size = 20)","756b6173":"data['Type'].unique()","5a54fa51":"plt.rcParams['figure.figsize'] = (15, 10)\ncount_graph = sb.countplot(data['Type'])\ncount_graph.set_xticklabels(count_graph.get_xticklabels(), rotation = 90)\ncount_graph\nplt.title('Count of Apps ', size = 20)","ad445a30":"labels = data['Type'].value_counts(sort = True).index\nsize = data['Type'].value_counts(sort = True)\n\nexplode = (0.1, 0)\n\nrcParams['figure.figsize'] = (10, 10)\n\nplt.pie(size, explode = explode, labels = labels, autopct = '%.2f%%', shadow = True)\n\nplt.title(\"Perceantage of Free Apps in Playstore\", size = 20)\nplt.show()","3aea964f":"#For Evaluation of Paid Apps only, I will consider the all the free apps as a single record\ndata['Free'] = data['Type'].map(lambda s :1  if s =='Free' else 0)\ndata.drop(['Type'], axis=1, inplace=True)","2b2dfba8":"data['Price'].unique()","a118962e":"data.Price = data.Price.apply(lambda x: x.replace('$',''))\ndata['Price'] = data['Price'].apply(lambda x: float(x))","3477acdc":"data['Price'].describe()","77ec849f":"rcParams['figure.figsize'] = (15, 10)\nsb.regplot(x = 'Price', y = 'Rating', data = data)\nplt.title(\" Price VS Rating\", size = 20)","9e055dd7":"data['Content Rating'].unique()","a6b66b91":"plt.rcParams['figure.figsize'] = (15, 10)\ncount_graph = sb.countplot(data['Content Rating'])\ncount_graph.set_xticklabels(count_graph.get_xticklabels(), rotation = 90)\ncount_graph\nplt.title('Count of Apps ', size = 20)","f07a087e":"rcParams['figure.figsize'] = (15, 10)\nsb.boxplot(x = 'Content Rating', y = 'Rating', data = data)\nplt.title(\"Content Rating VS Rating\", size = 20)","c5e071b1":"data['Genres'].unique()","43ffac7f":"len(data['Genres'].unique())","139181b9":"data.Genres.value_counts()","35e8c11f":"#Grouping to ignore sub-genre\ndata['Genres'] = data['Genres'].str.split(';').str[0]","76ffba51":"print(data['Genres'].unique())\nprint('\\n', len(data['Genres'].unique()), 'genres')","7cd34723":"plt.rcParams['figure.figsize'] = (20, 10)\ncount_graph = sb.countplot(data['Genres'])\ncount_graph.set_xticklabels(count_graph.get_xticklabels(), rotation = 90)\ncount_graph\nplt.title('Count of Apps', size = 20)","8e3a9ab5":"rcParams['figure.figsize'] = (20,10)\ngraph = sb.boxplot(x = 'Genres', y = 'Rating', data = data)\ngraph.set_xticklabels(graph.get_xticklabels(), rotation = 90)\ngraph\nplt.title('Rating VS Genres', size = 20)","0cf5db3a":"rev = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')\nrev.head()","549f89c4":"rev = pd.concat([rev.Translated_Review, rev.Sentiment], axis = 1)\nrev.dropna(axis = 0, inplace = True)\nrev.head(10)","c4fe5e3f":"rev.Sentiment.value_counts()","6fe37b93":"rev.Sentiment = [0 if i == 'Positive' else 1 if i == 'Negative' else 2 for i in rev.Sentiment]\nrev.head(10)","2d1feefe":"# Removing characters that are not letters & converting them to lower case\nimport re\nfirst_text = rev.Translated_Review[0]\ntext = re.sub('[^a-zA-Z]',' ', first_text)\ntext = text.lower()","2fbbb770":"print(rev.Translated_Review[0])\nprint(text)","65212217":"#Tokenize to seperate each word\nimport nltk as nlp\nfrom nltk.corpus import stopwords\ntext = nlp.word_tokenize(text)\ntext","364fb2b0":"#Lemmatization to convert words to their root forms\nlemma = nlp.WordNetLemmatizer()\ntext = [lemma.lemmatize(i) for i in text]\ntext = \" \".join(text)\ntext","bb346777":"text_list = []\nfor i in rev.Translated_Review:\n    text = re.sub('[^a-zA-Z]',' ', i)\n    text = text.lower()\n    text = nlp.word_tokenize(text)\n    lemma = nlp.WordNetLemmatizer()\n    text = [lemma.lemmatize(i) for i in text]\n    text = \" \".join(text)\n    text_list.append(text)\n    \ntext_list[:10]    ","ada7fcb3":"from sklearn.feature_extraction.text import CountVectorizer\nmax_features = 200000\ncou_vec = CountVectorizer(max_features = max_features, stop_words = 'english')\nsparce_matrix = cou_vec.fit_transform(text_list).toarray()\nall_words = cou_vec.get_feature_names()\nprint('Most used words :', all_words[:100])","684ddc85":"y = rev.iloc[:,1].values\nx = sparce_matrix","f3603195":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)","d4943304":"from sklearn.ensemble import RandomForestClassifier\nrandom = RandomForestClassifier(n_estimators = 10)\nrandom.fit(x_train, y_train)","8802853d":"print(\"Accuracy: \",random.score(x_test,y_test))","ee605b44":"y_pred = random.predict(x_test)\ny_true = y_test","e4e0ec14":"#Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nnames = ['Positive', 'Negative', 'Neutral']\ncm = confusion_matrix(y_true, y_pred)\nf, ax = plt.subplots(figsize = (5,5))\nsb.heatmap(cm, annot = True, fmt = '0.2f')\nplt.xlabel('y_pred')\nplt.ylabel('y_true')\nax.set_xticklabels(names)\nax.set_yticklabels(names)","bf41121c":"There are 1637 apps whose size may vary depending on the device.","ffb56990":"### Selecting Reviews and Types of Reviews","cdc2422e":"###### Positive = 0\n###### Negative = 1\n###### Neutral = 2","77de1ab1":"From the above comparision graph we can say that Rating for apps in each Category is not much different and each category has apps rated between 4 to 5 stars in store.","e8c1fbd8":"### Comparision between Ratings and Reviews","c07726d8":"### Category","6d14007d":"### Comparision between Rating and Category","cb75fbdd":"# NLP for Apps Reviews","d84fef26":"# Google Play Store Apps Visualization","fa74790a":"From the above chart we can say that 93.11% of the apps in the Playstore are Free.","7f0bb333":"### Comparision between Ratings and Installs","41a0bd1a":"If the app price is high but does not match expectations of the user then the app may get low rating.","3273aa50":"\nFrom the above graph we say state that the no of installs affects the rating of the apps","378c93ef":"## Importing libraries","c4a83fe9":"The data is still in object and most the app size varies with device, so we will filter those apps.","7a925147":"The Dataset contains 10841 records with 13 fields","70b758cb":"### Size","7c72303a":"\nFrom the above graph we can state that most of the apps have less than 1M reviews and popular apps have more reviews.","fbbecc89":"### Content Rating","0c404a5a":"### Reviews","71debf1f":"### Converting Review Types","bdc64fef":"From the above graph we can state that most of the apps in the Google Playstore are rated in between 4 to 5 stars.","6881635a":"### Classification for Modelling","1b8940f8":"The data is still in object type.","30767284":"### Simplifying Reviews for Modelling","19ecdbfe":"### Installs","415b19d6":"From the graph we can say that most of the apps that have high rating also have good reviews.","363695ef":"### Type","da656f64":"### Genres","b752e919":"'Varies with device' is filled by mean of the size for each category.","3d3b4f2e":"### Price","567d8331":"### Comparison between Rating and Price","90041843":"The sentence is in its simplest form, So now we will apply this each review","6ea5114d":"### Modelling","741ac8e3":"Average price of paid apps is 0.96 dollars and most expensive app is at price 400 dollars.","44d48f61":"After removing the missing values now the dataset contains 9360 records with 13 fields","34495ebe":"### Rating","9f8b4bc5":"Content Rating does not affect much the overall rating of the app, but the adult apps seems to have low rating when compared to other apps.","5d2c2880":"Game and Family category has the highest count of apps in the Play store."}}