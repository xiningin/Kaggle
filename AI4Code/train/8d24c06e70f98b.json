{"cell_type":{"087d1527":"code","cf39408e":"code","b151d414":"code","05292889":"code","13a7a052":"code","6472ae61":"code","b71557ec":"code","b72f939e":"code","6e17025c":"code","d3853ac8":"code","db32f01b":"markdown","915f7034":"markdown","763dbb0f":"markdown","1760f16b":"markdown","9da71ecf":"markdown","fc4cdeaa":"markdown","03cf1a37":"markdown","b82fb080":"markdown","3b96c891":"markdown","5f12a115":"markdown"},"source":{"087d1527":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf39408e":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\npd.options.mode.chained_assignment = None  # default='warn'\nsns.set()\n\n# considering exchange rate on january 7th, 2022\nafn_to_inr_exchange_rate = 0.70699236\n\n# considering 48 hours of work per week\nhours_work_per_week = 48\n\ndf = pd.read_csv('\/kaggle\/input\/analytics-industry-salaries-2022-india\/Salary Dataset.csv', encoding='utf-8' )\n\ndf.dropna(inplace=True)\ndf.sample(10)","b151d414":"df['Frequency'] = df['Salary'].str.slice(-2)\ndf['Salary'] = df['Salary'].str.slice(1,-3)\ndf['Salary'] = df['Salary'].str.replace(',','')\ndf['Salary'].loc[df['Salary'].str.contains('FN')] = df['Salary'].loc[df['Salary'].str.contains('FN')].str.replace('FN ','').astype(int) * afn_to_inr_exchange_rate\ndf['Salary'] = df['Salary'].astype(float)","05292889":"df['Frequency'].unique()","13a7a052":"df['Salary'].loc[df['Frequency'] == 'hr'] = df['Salary'].loc[df['Frequency'] == 'hr'] * hours_work_per_week * 4\ndf['Frequency'].loc[df['Frequency'] == 'hr'] = 'mo'\ndf['Salary'].loc[df['Frequency'] == 'mo'] = df['Salary'].loc[df['Frequency'] == 'mo'] * 12\ndf['Frequency'].loc[df['Frequency'] == 'mo'] = 'yr'\ndf['Yearly Salary (INR)'] = df['Salary']\ndf.drop(['Salary', 'Frequency'], axis=1, inplace=True)","6472ae61":"df_avgSalary_Location = df.groupby('Location')[['Yearly Salary (INR)']].agg('mean').reset_index()\nsns.barplot(x='Location', y='Yearly Salary (INR)', data=df_avgSalary_Location)\nplt.xlabel('Location')\nplt.ylabel('Yearly Salary (millions of Rupees)')\nplt.title('Average Yearly Salary by Location')\nplt.show()\n\ndf_avgSalary_JobTitle = df.groupby('Job Title')[['Yearly Salary (INR)']].agg('mean').reset_index().sort_values('Yearly Salary (INR)', ascending=False)\nsns.barplot(y='Job Title', x='Yearly Salary (INR)', data=df_avgSalary_JobTitle)\nplt.xlabel('Yearly Salary (millions of Rupees)')\nplt.ylabel('Job Title')\nplt.title('Average Yearly Salary by Job Title')\nplt.show()","b71557ec":"df['Field'] = 'Data'\n\nwData =  df['Job Title'].str.contains(\"Data\")\nwScience = df['Job Title'].str.contains(\"Science\")\nwScientist = df['Job Title'].str.contains(\"Scientist\")\nwMachine = df['Job Title'].str.contains(\"Machine\")\nwLearning = df['Job Title'].str.contains(\"Learning\")\nwEngineer = df['Job Title'].str.contains(\"Engineer\")\nwEngineering = df['Job Title'].str.contains(\"Engineering\")\nwAnalyst = df['Job Title'].str.contains(\"Analyst\")\n\ndf['Field'].loc[wData & (wScience | wScientist) & ~wMachine] = 'Data Science'\ndf['Field'].loc[wData & (wEngineer | wEngineering)] = 'Data Engineering'\ndf['Field'].loc[wMachine & wLearning & ~(wData & wScientist)] = 'Machine Learning'\ndf['Field'].loc[wData & wAnalyst & ~(wMachine | wScientist)] = 'Data Analysis'\n\n\ndf['Level'] = 'Associate'\n\nwJunior =  df['Job Title'].str.contains(\"Junior\")\nwTrainee = df['Job Title'].str.contains(\"Junior\")\nwConsultant = df['Job Title'].str.contains(\"Consultant\")\nwSenior = df['Job Title'].str.contains(\"Senior\")\nwManager = df['Job Title'].str.contains(\"Lead\")\nwManager = df['Job Title'].str.contains(\"Manager\")\n\ndf['Level'].loc[wJunior | wTrainee] = 'Junior'\ndf['Level'].loc[wConsultant] = 'Consultant'\ndf['Level'].loc[wSenior] = 'Senior'\ndf['Level'].loc[wManager] = 'Manager'","b72f939e":"df.sample(10)","6e17025c":"df_avgSalary_Field = df.groupby(['Location','Field'])[['Field', 'Yearly Salary (INR)']].agg('mean').sort_values('Yearly Salary (INR)').reset_index()\n\nsns.barplot(data=df_avgSalary_Field, x='Field', y='Yearly Salary (INR)', hue='Location')\nplt.xlabel('Field')\nplt.ylabel('Yearly Salary (millions of Rupees)')\nplt.title('Average Yearly Salary by Field')\nplt.xticks(rotation='45')\nplt.show()\n\nsns.boxplot(data=df_avgSalary_Field, x='Field', y='Yearly Salary (INR)')\nplt.xlabel('Field')\nplt.ylabel('Yearly Salary (millions of Rupees)')\nplt.title('Average Yearly Salary by Field')\nplt.xticks(rotation='45')\nplt.show()","d3853ac8":"df_bigtechs = df.copy()\n\ndf_bigtechs['Company Name'].loc[df_bigtechs['Company Name'].str.contains('Apple')] = 'Apple'\ndf_bigtechs['Company Name'].loc[df_bigtechs['Company Name'].str.contains('Google')] = 'Google'\ndf_bigtechs['Company Name'].loc[df_bigtechs['Company Name'].str.contains('Microsoft')] = 'Microsoft'\ndf_bigtechs['Company Name'].loc[df_bigtechs['Company Name'].str.contains('IBM')] = 'IBM'\ndf_bigtechs['Company Name'].loc[df_bigtechs['Company Name'].str.contains('Amazon')] = 'Amazon'\n\ndf_bigtechs = df_bigtechs.loc[\n    (df_bigtechs['Company Name'] == 'Apple')\n    | (df_bigtechs['Company Name'] =='Google') \n    | (df_bigtechs['Company Name'] == 'Microsoft') \n    | (df_bigtechs['Company Name'] == 'IBM') \n    | (df_bigtechs['Company Name'] == 'Amazon')]\n\nsns.barplot(data=df_bigtechs, x='Field', y='Yearly Salary (INR)', hue='Company Name', ci=None)\nplt.xlabel('Field')\nplt.ylabel('Yearly Salary (millions of Rupees)')\nplt.title('Big Techs: Average Yearly Salary by Location')\nplt.xticks(rotation='45')\nplt.show()","db32f01b":"Now, let's clean up the ```Salary``` column.\n\nWe start by isolating the frequency, creating a separated column for it. Then, we remove it from the ```Salary``` column, along with the first character, which is special, and the commas.\n\nLastly, we take care of one single salary that is in AFN currency and make the ```Salary``` column numeric.","915f7034":"Ok, let's see a bit of what we have","763dbb0f":"We can start by loading the dataset","1760f16b":"We can see that Amazon and IBm tends to pay less than the other big techs. Also, that are significant differences between some of the companies, mainly on data engineering and machine learning.","9da71ecf":"We can see that Bangalore employees have the highest average salaries.\n\nJob titles are a bit messy. Let's create two new columns, based on them:\n* ```Level``` column will categorize the job titles into four levels: Junior, Associate, Senior and Manager;\n* ```Field``` column will categorize the job titles into four fields: Data Science, Data Engineering, Machine Learning and Data Analysis.","fc4cdeaa":"We can see that the data science employees are the ones who get the higher salaries and that there's a significant increase from one field to another.\n\nFinally, let's check how some of the big techs pay their data employees by field.","03cf1a37":"Let's check the frequencies.","b82fb080":"Now, we can plot some graphs to visualize the data, like the average yearly salary by location and job title","3b96c891":"We see that there are three. Let's convert it to make it all yearly and then we can drop the ```Frequency``` column.","5f12a115":"Now, we can plot more graphs to see if we can get a better view on the yearly salary by field."}}