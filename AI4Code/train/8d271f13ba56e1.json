{"cell_type":{"f728e7dd":"code","16f5483e":"code","790a1559":"code","3baee5d2":"code","7b6f9892":"code","65c0c881":"code","a8c11f62":"code","e12bccff":"code","b47e1c5f":"code","6de84c6e":"code","b46bfb92":"code","9a00f47e":"code","2a2c2efb":"code","8ff3a8f4":"code","39bb4bba":"code","c326f065":"code","78b52e98":"code","b557bd72":"code","232c63f0":"code","a1a2d3da":"code","ba3a083b":"code","45439ffa":"code","801502cc":"code","8a99a32b":"code","7f3fc45a":"code","54dbc7c9":"code","e5b8ff02":"code","f58fe3e4":"code","90dc9c6a":"code","b987890b":"code","85ebd911":"code","084c149b":"code","9a9e5877":"code","ae023aee":"code","804a88ce":"code","6618f957":"code","c5da52cc":"markdown","d4ca6d8d":"markdown","2304ffaf":"markdown","5ab53c8f":"markdown","5e90400c":"markdown"},"source":{"f728e7dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16f5483e":"#Inspired from https:\/\/www.kaggle.com\/uysimty\/keras-cnn-dog-or-cat-classification\/data#Import-Library\nimport numpy as np\nimport pandas as pd \nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os\nprint(os.listdir(\"..\/input\/chest-xray-pneumonia\"))","790a1559":"#Defining constants\nFAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","3baee5d2":"#Preparing training data\ntrain_folders=[\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\",\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\"]\ncategories={}\nfor i in train_folders:\n    filenames = os.listdir(i)\n    for filename in filenames:\n        category = filename.split('.')[0]\n        if \"bacteria\" in str(category) or \"virus\" in str(category):\n            categories[filename]=1\n        else:\n            categories[filename]=0\n \n\ntrain_df = pd.DataFrame(categories.items(), columns=['filename','category'])\nprint(train_df)","7b6f9892":"#Preparing test data\ntest_folders=[\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\",\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\"]\ncategories={}\nfor i in test_folders:\n    filenames = os.listdir(i)\n    for filename in filenames:\n        category = filename.split('.')[0]\n        if \"bacteria\" in str(category) or \"virus\" in str(category):\n            categories[filename]=1\n        else:\n            categories[filename]=0\n \n\ntest_df = pd.DataFrame(categories.items(), columns=['filename','category'])\nprint(test_df)","65c0c881":"sample = random.choice(os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\"))\nimage = load_img(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/\"+sample)\nplt.imshow(image)\n","a8c11f62":"#Building the CNN model\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have normal and pneumonia\n\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","e12bccff":"#Setting callbacks\n\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\n#To prevent over fitting we will stop the learning after 10 epochs\nearlystop = EarlyStopping(patience=10) \n\n\n#We will reduce the learning rate when then accuracy not increase for 2 steps\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\ncallbacks = [earlystop, learning_rate_reduction]","b47e1c5f":"train_df[\"category\"] = train_df[\"category\"].replace({0: 'normal', 1: 'pneumonia'}) \ntest_df[\"category\"] = test_df[\"category\"].replace({0: 'normal', 1: 'pneumonia'}) ","6de84c6e":"train_df = train_df.reset_index(drop=True)\ntest_df = test_df.reset_index(drop=True)","b46bfb92":"print(train_df)","9a00f47e":"train_df['category'].value_counts().plot.bar()","2a2c2efb":"total_train = train_df.shape[0]\ntest_train = test_df.shape[0]\nbatch_size=15","8ff3a8f4":"print(train_df)","39bb4bba":"df1=train_df.copy()\nprint(df1)","c326f065":"print(len(df1))","78b52e98":"\n\nfor i in range(len(df1)):\n    if \"bacteria\" in str(df1.iloc[i,0]) or \"virus\" in str(df1.iloc[i,0]):\n        df1.iloc[i,0]=os.path.join(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/\",df1.iloc[i,0])\n    else:\n        df1.iloc[i,0]=os.path.join(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/\",df1.iloc[i,0])\n        \n\n","b557bd72":"print(df1.iloc[5215,0])    ","232c63f0":"print(os.getcwd())","a1a2d3da":"#Training generator\n\ntrain_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n        df1, \n        #\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/\", \n        directory=None,\n        x_col='filename',\n        y_col='category',\n        target_size=IMAGE_SIZE,\n        class_mode='categorical',\n        batch_size=batch_size   \n    )","ba3a083b":"df2=test_df.copy()\nfor i in range(len(df2)):\n    if \"bacteria\" in str(df2.iloc[i,0]) or \"virus\" in str(df2.iloc[i,0]):\n        df2.iloc[i,0]=os.path.join(\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\/\",df2.iloc[i,0])\n    else:\n        df2.iloc[i,0]=os.path.join(\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/\",df2.iloc[i,0])\n        \n","45439ffa":"test_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_dataframe(\n    df2, \n    directory=None,\n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","801502cc":"example_df = df1.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    directory=None, \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical'\n)","8a99a32b":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","7f3fc45a":"#Fit the model\nFAST_RUN = False \n#setting it to true since it would take more time for 50 epochs. But 50 would give the best accuracy rate\n#trying with 20 epochs\nepochs=3 if FAST_RUN else 20\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=test_generator,\n    validation_steps=test_train\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n)","54dbc7c9":"#Prepare Validation Data\nval_normal_filenames = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/NORMAL\")\nval_df = pd.DataFrame({\n    'filename': val_normal_filenames\n})\n\n\nval_pneumonia_filenames = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\")\nval_df1 = pd.DataFrame({\n    'filename': val_pneumonia_filenames\n})\n\nval_df=val_df.append(val_df1,ignore_index = True) \nnb_samples = val_df.shape[0]\nprint(val_df)","e5b8ff02":"\nfor i in range(len(val_df)):\n    if \"bacteria\" in str(val_df.iloc[i,0]) or \"virus\" in str(val_df.iloc[i,0]):\n        val_df.iloc[i,0]=os.path.join(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/\",val_df.iloc[i,0])\n    else:\n        val_df.iloc[i,0]=os.path.join(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/NORMAL\/\",val_df.iloc[i,0])\n\nprint(val_df)","f58fe3e4":"val_gen = ImageDataGenerator(rescale=1.\/255)\nval_generator = val_gen.flow_from_dataframe(\n    val_df, \n    directory=None,\n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=8,\n    shuffle=False\n)","90dc9c6a":"\npredict = model.predict_generator(val_generator, steps=np.ceil(nb_samples\/batch_size))","b987890b":"print(len(np.argmax(predict, axis=-1)))","85ebd911":"val_df['category'] = np.argmax(predict, axis=-1)","084c149b":"print(val_df)","9a9e5877":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\nval_df['category'] = val_df['category'].replace(label_map)","ae023aee":"val_df['category'] = val_df['category'].replace({ 'Pneumonia': 1, 'Normal': 0 })","804a88ce":"print(val_df)","6618f957":"#See predicted result with images\n\n\nplt.figure(figsize=(12, 24))\nfor index, row in val_df.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(filename, target_size=IMAGE_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel('(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","c5da52cc":"I cannot pass multiple directories flow_from_dataframe function.\nwe are creating a dataframe that has all the images with their absolute paths defined.","d4ca6d8d":"For categoral classication the prediction will come with probability of each category. So we will pick the category that have the highest probability with numpy average max","2304ffaf":"*We will convert the predict category back into our generator classes by using train_generator.class_indices. It is the classes that image generator map while converting data into computer vision*","5ab53c8f":"Because we will use image genaretor with class_mode=\"categorical\". We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification.\n\nSo we will convert 1 to pneumonia and 0 to normal","5e90400c":"Input Layer: It represent input image data. It will reshape image into single diminsion array. Example your image is 64x64 = 4096, it will convert to (4096,1) array.\nConv Layer: This layer will extract features from image.\nPooling Layer: This layerreduce the spatial volume of input image after convolution.\nFully Connected Layer: It connect the network from a layer to another layer\nOutput Layer: It is the predicted values layer."}}