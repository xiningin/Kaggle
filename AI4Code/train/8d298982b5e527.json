{"cell_type":{"705ca88f":"code","2c0eeaaf":"code","9d8df6cb":"code","dc3446ea":"code","8a0dd79c":"code","d87ded4d":"code","d993d0e2":"code","221f2a61":"code","6a4ac908":"code","ff336cb3":"code","8c35832a":"code","e54f4e9b":"code","07e79b93":"code","78acbd9a":"code","f415a7f5":"code","84ff0ba6":"code","186dc5d7":"code","1a759754":"markdown","11b1159c":"markdown","3255a834":"markdown","e8296f1c":"markdown","7c433a56":"markdown","6364322b":"markdown","9dd9d0e0":"markdown","c959a725":"markdown","02eba066":"markdown","d63eea1b":"markdown","8808cfd9":"markdown","ac090371":"markdown","9e6ab678":"markdown"},"source":{"705ca88f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2c0eeaaf":"trainDf = pd.read_csv(\"..\/input\/train.csv\")\nprint(trainDf.info())","9d8df6cb":"testDf = pd.read_csv(\"..\/input\/test.csv\")\nprint(testDf.info())","dc3446ea":"gender_submDf = pd.read_csv(\"..\/input\/gender_submission.csv\")\nprint(gender_submDf.info())","8a0dd79c":"print(\"Missing data in 'Cabin': {:.2f}%\".format(trainDf[\"Cabin\"].isnull().sum()\/len(trainDf.index)*100.0))\nprint(\"Missing data in 'Age': {:.2f}%\".format(trainDf[\"Age\"].isnull().sum()\/len(trainDf.index)*100.0))","d87ded4d":"trainDf.drop(\"Cabin\", axis=1, inplace=True)","d993d0e2":"trainDf[\"IsFemale\"] = trainDf[\"Sex\"].astype(\"category\").cat.codes\ntrainDf[\"EmbarkPort\"] = trainDf[\"Embarked\"].astype(\"category\").cat.codes\ntrainDf.drop(\"Sex\", axis=1, inplace=True)\ntrainDf.drop(\"Embarked\", axis=1, inplace=True)\ntrainDf.drop(['Name', 'Ticket'], axis=1, inplace=True)\ntrainDf.head()","221f2a61":"from sklearn.linear_model import LogisticRegression\nLogReg = LogisticRegression(penalty='l2')\n## 'Age' contains missing values, skip for now and see how good we get without it.\nLogReg.fit(trainDf.drop(['Survived', 'PassengerId', 'Age'], axis=1), trainDf.Survived)","6a4ac908":"## It looks like this gives a notion on how well the learned logistic regression predicts the training data\nLogReg.score(trainDf.drop(['Survived', 'PassengerId', 'Age'], axis=1), trainDf.Survived)","ff336cb3":"## Remove the rows with missing values\ntrainDfAge = trainDf.dropna(axis=0, inplace=False)\ntrainDfAge.info()\nLogRegAge = LogisticRegression(penalty='l2')\nLogRegAge.fit(trainDfAge.drop(['Survived', 'PassengerId'], axis=1), trainDfAge.Survived)\n## It looks like this gives a notion on how well the learned logistic regression predicts the training data\nLogRegAge.score(trainDfAge.drop(['Survived', 'PassengerId'], axis=1), trainDfAge.Survived)","8c35832a":"testDf.drop(\"Cabin\", axis=1, inplace=True)\ntestDf[\"IsFemale\"] = testDf[\"Sex\"].astype(\"category\").cat.codes\ntestDf[\"EmbarkPort\"] = testDf[\"Embarked\"].astype(\"category\").cat.codes\ntestDf.drop(\"Sex\", axis=1, inplace=True)\ntestDf.drop(\"Embarked\", axis=1, inplace=True)\ntestDf.drop(['Name', 'Ticket', 'Age'], axis=1, inplace=True)\ntestDf.info()\ntestDf.head()","e54f4e9b":"testDf1 = testDf.dropna(axis=0, inplace=False)\ntestDf1.info()","07e79b93":"Predict = LogReg.predict(testDf1.drop('PassengerId', axis=1, inplace=False))","78acbd9a":"answer = pd.DataFrame(Predict, columns=[\"Survived\"])\nanswer.info()","f415a7f5":"## Since one row was dropped earlier, I need to reset the index before I add the 'Survived' column, since otherwise the rows (indexes) of the two DataFrames don't line up.\nanswerDf = pd.concat([testDf1.reset_index(drop=True), answer], axis=1)\nanswerDf.info()","84ff0ba6":"## Find the affected passenger\nnoFare = testDf[testDf['Fare'].isnull()]\n## Append the data\nanswerDf = answerDf.append(noFare, sort=False)\n## And fill the missing values with 0\nanswerDf = answerDf.fillna(0)","186dc5d7":"answerDf[['PassengerId', 'Survived']].to_csv(\"output.csv\", index=False)","1a759754":"And, stuff it all into a new DataFrame, so it's easy to submit later.","11b1159c":"Lastly, I need to re-add the one passenger that did not have a value in the 'Fare' column.","3255a834":"Now I can select the two required columns for submission and write to a file to submit it.","e8296f1c":"Start by reading in the three supplied data files into Pandas DataFrames, and print out some basic info for the data in those files.","7c433a56":"Not bad.\n\nNow try including the Age column in the fitting process, but only include the rows that contain an age.","6364322b":"There is one row in the 'Fare' column that's missing its value, so drop it. Note that this \"messes up\" the index in that the index is not re-numbered; the dropped row is just skipped.","9dd9d0e0":"This is the same as without the age, so the Age column doesn't seem to be a predictor for survival. Go on without it.\n\nThis could be a fun\/insightful exercise - drop a column and see if it affects the prediction capability.\n\nApply the same manipulations\/transformations as to the training data set, so that I can start making some predictions.","c959a725":"# Titanic Disaster Notebook","02eba066":"At this point, I'm not sure what to do with the 'Age' column yet. ~20% is missing from the training data, which I find to be a lot. Other tutorials that I've consulted just fill the missing data with the median age without justification. I'm not comfortable with doing what everyone else does without fully understanding it (or knowing they know what they're doing). I'm just going to leave it here and decide later.\n\n\nThe columns 'Sex', and 'Embarked' contain categorical values, convert to numerical values. Then drop the original columns.\n\nFurthermore, the 'Name' and the 'Ticket' columns are (probably) not good predictors either.","d63eea1b":"It is apparent that the 'Cabin' column is missing a lot of (i.e the majority) data. This is a bit of a bummer, since the cabin might be taken a proxy for describing the proximity to the life rafts, and thus could influence the chance of survival. Instead of trying to make up data, which is dangerous in general and stupid in this case. remove this column from the analysis.\n\nPerhaps later I could use the subset of training\/test data that has this information to give a better prediction for the subset only.","8808cfd9":"\nFirst, let's train on the data without the Age column, since some values are missing.","ac090371":"## Now I'm set to make a prediction!","9e6ab678":"From the info-method I can see that there is some missing data:"}}