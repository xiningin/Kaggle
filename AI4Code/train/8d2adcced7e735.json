{"cell_type":{"674e0966":"code","ab905de4":"code","02255d51":"code","7150ef90":"code","be8f9c7b":"code","3a613a7c":"code","ab4c5603":"code","57b03d4d":"markdown","50cc93c9":"markdown","96300aa0":"markdown","10e752ea":"markdown","8df35544":"markdown"},"source":{"674e0966":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ab905de4":"def create_data(x, len_seq):\n    # \u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n    X = []  # \u5165\u529b\n    y = []  # \u51fa\u529b\n    for i in range(len(x) - len_seq):\n        X.append(x[i:i+len_seq])  # \u5165\u529b\u30d9\u30af\u30c8\u30eb\u3092\u8ffd\u52a0\n        y.append(x[i+len_seq])  # \u51fa\u529b\u5024\u3092\u8ffd\u52a0\n    return np.array(X), np.array(y)\n\ndf = pd.read_csv('..\/input\/train.csv', index_col=0)\nx = df['Min temp.'].values\n\nlen_seq = 121  # \u5165\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\uff08121\u65e5=\u7d044\u30f6\u6708\uff09\nX, y = create_data(x, len_seq)\nX = np.reshape(X, (X.shape[0], X.shape[1], 1))  # (samples, timesteps, features)\nprint(X.shape)\nprint(y.shape)","02255d51":"from keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout\nfrom keras.layers.recurrent import LSTM\n\nmodel = Sequential()\nmodel.add(LSTM(units=64, return_sequences=False, input_shape=(len_seq, 1)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=1, activation='linear'))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.summary()","7150ef90":"model.fit(X, y, batch_size=365, epochs=100, validation_split=0.1)","be8f9c7b":"predict = model.predict(X)  # X\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\npredict.flatten()  # \u30d9\u30af\u30c8\u30eb\u5316\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.plot(y, marker='.', linestyle='None', color='c')  # y\u3092\u70b9\u3067\u51fa\u529b\nplt.plot(predict)  # \u4e88\u6e2c\u5024\u3092\u7dda\u3067\u51fa\u529b\nplt.show()","3a613a7c":"x = df['Min temp.'].values[len(x)-len_seq:]  # \u6700\u521d\u306e\u4e88\u6e2c\u306e\u305f\u3081\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6700\u5f8c\u306elen_seq\u500b\uff09\n\npredict = np.array([])\nfor i in range(365):\n    X = np.reshape(x, (1, len_seq, 1))  # \u30d9\u30af\u30c8\u30ebx\u30923\u968e\u30c6\u30f3\u30bd\u30eb\u306b (samples, timesteps, features)\n    p = model.predict(X)[0]  # X\u304b\u3089p\u3092\u4e88\u6e2c\n    predict = np.append(predict, p)  # p\u3092predict\u306b\u8ffd\u52a0\n    x = np.append(np.delete(x, 0), p)  # x\u306e\u5148\u982d\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u6700\u5f8c\u306b\u4e88\u6e2c\u3057\u305fp\u3092\u8ffd\u52a0\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.plot(predict)  # \u4e88\u6e2c\u5024\u3092\u7dda\u3067\u51fa\u529b\nplt.show()","ab4c5603":"submit = pd.read_csv('..\/input\/sampleSubmission.csv')\nsubmit['Min temp.'] = predict\nsubmit.to_csv('submission.csv', index=False)","57b03d4d":"# \u5c06\u6765\u306e\u4e88\u6e2c","50cc93c9":"# LSTM\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\nLSTM, Dropout, \u5168\u7d50\u5408","96300aa0":"# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2","10e752ea":"# \u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c","8df35544":"# LSTM\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n```\nx1, x2, ..., xn\n```\n\u3068\u3044\u3046\u30c7\u30fc\u30bf\u304b\u3089\n```\nx1, x2, ..., xk\nx2, x3, ..., xk+1\n...\n```\n\u3068\u3044\u3046\u5165\u529bX\u3068\n```\nxk+1\nxk+2\n...\n```\n\u3068\u3044\u3046\u51fa\u529by\u3092\u4f5c\u6210\u3057\u307e\u3059"}}