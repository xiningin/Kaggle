{"cell_type":{"617330ff":"code","0cbbaf0a":"code","5fed0b67":"code","fce4f224":"code","dfb456cf":"code","5cc9e061":"code","19d722f7":"code","3f8dcd3c":"code","d3c22bca":"code","7948ca98":"code","08f86de9":"code","30784a0b":"code","21234602":"code","a2c91b90":"code","9a4bedce":"code","5324fc02":"code","692c1658":"code","e3874413":"code","f560cf38":"code","21678279":"code","a4d797e9":"code","d6f887a6":"code","d6c6ef98":"code","2c7feb97":"code","103190cf":"code","50afcb64":"code","fb660008":"code","54f9ebc6":"code","443ac430":"code","560e8402":"code","384b97a6":"code","99c7a028":"markdown","061192f4":"markdown","83ef4bb8":"markdown","78f4e843":"markdown","7ea6392f":"markdown","b10e3a7d":"markdown","e97fa591":"markdown","0e49b3a1":"markdown","e1df1e33":"markdown","2213e9f1":"markdown","76d1efa3":"markdown","050ff57c":"markdown","87bb8494":"markdown","6c39cc9e":"markdown","e1d67e56":"markdown","c2e402d9":"markdown","909e06ff":"markdown","cf6e4aca":"markdown","eec49ef7":"markdown","65314255":"markdown","e6e902d3":"markdown","f454e155":"markdown","75187e6b":"markdown","8b1958e4":"markdown","57c668ae":"markdown","43b3ed7b":"markdown","7c9e94b2":"markdown","462d2e65":"markdown"},"source":{"617330ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# import warnings\nimport warnings\n# ignore warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0cbbaf0a":"world = pd.read_csv(\"..\/input\/countries of the world.csv\")\nworld.head(10)","5fed0b67":"world.info()\nworld.dtypes","fce4f224":"world.columns = ([\"country\",\"region\",\"population\",\"area\",\"density\",\"coastline\",\"migration\",\"infant_mortality\",\"gdp\",\"literacy\",\"phones\",\"arable\",\"crops\",\"other\",\"climate\",\"birthrate\",\"deathrate\",\"agriculture\",\"industry\",\"service\"])","dfb456cf":"world.country = world.country.astype('category')\nworld.region = world.region.astype('category')\nworld.density = world.density.str.replace(\",\",\".\").astype(float)\nworld.coastline = world.coastline.str.replace(\",\",\".\").astype(float)\nworld.migration = world.migration.str.replace(\",\",\".\").astype(float)\nworld.infant_mortality = world.infant_mortality.str.replace(\",\",\".\").astype(float)\nworld.literacy = world.literacy.str.replace(\",\",\".\").astype(float)\nworld.phones = world.phones.str.replace(\",\",\".\").astype(float)\nworld.arable = world.arable.str.replace(\",\",\".\").astype(float)\nworld.crops = world.crops.str.replace(\",\",\".\").astype(float)\nworld.other = world.other.str.replace(\",\",\".\").astype(float)\nworld.climate = world.climate.str.replace(\",\",\".\").astype(float)\nworld.birthrate = world.birthrate.str.replace(\",\",\".\").astype(float)\nworld.deathrate = world.deathrate.str.replace(\",\",\".\").astype(float)\nworld.agriculture = world.agriculture.str.replace(\",\",\".\").astype(float)\nworld.industry = world.industry.str.replace(\",\",\".\").astype(float)\nworld.service = world.service.str.replace(\",\",\".\").astype(float)\n","5cc9e061":"world.info()","19d722f7":"missing = world.isnull().sum()\nmissing","3f8dcd3c":"world.fillna(world.mean(),inplace=True)","d3c22bca":"world.region = world.region.str.strip()","7948ca98":"group = world.groupby(\"region\")\ngroup.mean()","08f86de9":"world.head(10)","30784a0b":"region = world.region.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=region.index,y=region.values)\nplt.xticks(rotation=45)\nplt.ylabel('Number of countries')\nplt.xlabel('Region')\nplt.title('Number of Countries by REG\u0130ON',color = 'red',fontsize=20)","21234602":"sns.set(style=\"darkgrid\",font_scale=1.5)\nf, axes = plt.subplots(2,2,figsize=(15,10))\n\nsns.distplot(world.infant_mortality,bins=20,kde=False,color=\"y\",ax=axes[0,0])\nsns.distplot(world.gdp,hist=False,rug=True,color=\"r\",ax=axes[0,1])\nsns.distplot(world.birthrate,hist=False,color=\"g\",kde_kws={\"shade\":True},ax=axes[1,0])\nsns.distplot(world.deathrate,color=\"m\",ax=axes[1,1])","a2c91b90":"sns.boxplot(x=\"region\",y=\"gdp\",data=world,width=0.7,palette=\"Set3\",fliersize=5)\nplt.xticks(rotation=90)\nplt.title(\"GDP BY REG\u0130ON\",color=\"red\")","9a4bedce":"world.corr()","5324fc02":"f,ax = plt.subplots(figsize=(18, 16))\nsns.heatmap(world.corr(), annot=True, linewidths=.8, fmt= '.1f',ax=ax)","692c1658":"x = world.loc[:,[\"region\",\"gdp\",\"infant_mortality\",\"birthrate\",\"phones\",\"literacy\",\"service\"]]\nsns.pairplot(x,hue=\"region\",palette=\"inferno\")","e3874413":"sns.lmplot(x=\"gdp\",y=\"phones\",data=world,height=10)\nsns.lmplot(x=\"gdp\",y=\"service\",data=world,height=10)","f560cf38":"gdp=world.sort_values([\"gdp\"],ascending=False)","21678279":"# prepare data frame\ndf = gdp.iloc[:100,:]\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.gdp,\n                    y = df.birthrate,\n                    mode = \"lines\",\n                    name = \"Birthrate\",\n                    marker = dict(color = 'rgba(235,66,30, 0.8)'),\n                    text= df.country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.gdp,\n                    y = df.deathrate,\n                    mode = \"lines+markers\",\n                    name = \"Deathrate\",\n                    marker = dict(color = 'rgba(10,10,180, 0.8)'),\n                    text= df.country)\nz = [trace1, trace2]\nlayout = dict(title = 'Birthrate and Deathrate of World Countries (Top 100)',\n              xaxis= dict(title= 'GDP',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = z, layout = layout)\niplot(fig)","a4d797e9":"# prepare data frame\ndf = gdp.iloc[77:177,:]\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.gdp,\n                    y = df.birthrate,\n                    mode = \"lines\",\n                    name = \"Birthrate\",\n                    marker = dict(color = 'rgba(235,66,30, 0.8)'),\n                    text= df.country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.gdp,\n                    y = df.deathrate,\n                    mode = \"lines+markers\",\n                    name = \"Deathrate\",\n                    marker = dict(color = 'rgba(10,10,180, 0.8)'),\n                    text= df.country)\nz = [trace1, trace2]\nlayout = dict(title = 'Birthrate and Deathrate Percentage of World Countries (Last 100)',\n              xaxis= dict(title= 'GDP',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = z, layout = layout)\niplot(fig)","d6f887a6":"# prepare data frame\ndf = gdp.iloc[:100,:]\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.gdp,\n                    y = df.agriculture,\n                    mode = \"lines+markers\",\n                    name = \"AGRICULTURE\",\n                    marker = dict(color = 'rgba(235,66,30, 0.8)'),\n                    text= df.country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.gdp,\n                    y = df.industry,\n                    mode = \"lines+markers\",\n                    name = \"INDUSTRY\",\n                    marker = dict(color = 'rgba(10,10,180, 0.8)'),\n                    text= df.country)\n# Creating trace3\ntrace3 = go.Scatter(\n                    x = df.gdp,\n                    y = df.service,\n                    mode = \"lines+markers\",\n                    name = \"SERVICE\",\n                    marker = dict(color = 'rgba(10,250,60, 0.8)'),\n                    text= df.country)\n\n\nz = [trace1, trace2,trace3]\nlayout = dict(title = 'Service , Industry and Agriculture Percentage of World Countries (TOP 100)',\n              xaxis= dict(title= 'GDP',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = z, layout = layout)\niplot(fig)","d6c6ef98":"# prepare data frame\ndf = gdp.iloc[77:,:]\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.gdp,\n                    y = df.agriculture,\n                    mode = \"lines+markers\",\n                    name = \"AGRICULTURE\",\n                    marker = dict(color = 'rgba(235,66,30, 0.8)'),\n                    text= df.country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.gdp,\n                    y = df.industry,\n                    mode = \"lines+markers\",\n                    name = \"INDUSTRY\",\n                    marker = dict(color = 'rgba(10,10,180, 0.8)'),\n                    text= df.country)\n# Creating trace3\ntrace3 = go.Scatter(\n                    x = df.gdp,\n                    y = df.service,\n                    mode = \"lines+markers\",\n                    name = \"SERVICE\",\n                    marker = dict(color = 'rgba(10,250,60, 0.8)'),\n                    text= df.country)\n\n\nz = [trace1, trace2,trace3]\nlayout = dict(title = 'Service , Industry and Agriculture Percentage of World Countries (LAST 100)',\n              xaxis= dict(title= 'GDP',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = z, layout = layout)\niplot(fig)","2c7feb97":"lit = world.sort_values(\"literacy\",ascending=False).head(7)","103190cf":"trace1 = go.Bar(\n                x = lit.country,\n                y = lit.agriculture,\n                name = \"agriculture\",\n                marker = dict(color = 'rgba(255, 20, 20, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = lit.gdp)\ntrace2 = go.Bar(\n                x = lit.country,\n                y = lit.service,\n                name = \"service\",\n                marker = dict(color = 'rgba(20, 20, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = lit.gdp)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","50afcb64":"x = lit.country\n\ntrace1 = {\n  'x': x,\n  'y': lit.industry,\n  'name': 'industry',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': lit.service,\n  'name': 'service',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 7 country'},\n  'barmode': 'relative',\n  'title': 'industry and service percentage of top 7 country (literacy)'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","fb660008":"fig = {\n  \"data\": [\n    {\n      \"values\": lit.gdp,\n      \"labels\": lit.country,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"GDP percentage of\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"GDP of top 7 country(literacy)\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"GDP\",\n                \"x\": 0.22,\n                \"y\": 0.5\n            },\n        ]\n    }\n}\niplot(fig)","54f9ebc6":"lite = world.sort_values(\"literacy\",ascending=False).head(15)\ndata = [\n    {\n        'y': lite.service,\n        'x': lite.index,\n        'mode': 'markers',\n        'marker': {\n            'color': lite.service,\n            'size': lite.literacy,\n            'showscale': True\n        },\n        \"text\" :  lite.country    \n    }\n]\niplot(data)","443ac430":"#Population per country\ndata = dict(type='choropleth',\nlocations = world.country,\nlocationmode = 'country names', z = world.population,\ntext = world.country, colorbar = {'title':'Population'},\ncolorscale = 'Blackbody', reversescale = True)\nlayout = dict(title='Population per country',\ngeo = dict(showframe=False,projection={'type':'natural earth'}))\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","560e8402":"#Population per country\ndata = dict(type='choropleth',\nlocations = world.country,\nlocationmode = 'country names', z = world.infant_mortality,\ntext = world.country, colorbar = {'title':'Infant Mortality'},\ncolorscale = 'YlOrRd', reversescale = True)\nlayout = dict(title='Infant Mortality per Country',\ngeo = dict(showframe=False,projection={'type':'natural earth'}))\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","384b97a6":"#Population per country\ndata = dict(type='choropleth',\nlocations = world.country,\nlocationmode = 'country names', z = world.gdp,\ntext = world.country, colorbar = {'title':'GDP'},\ncolorscale = 'Hot', reversescale = True)\nlayout = dict(title='GDP of World Countries',\ngeo = dict(showframe=False,projection={'type':'natural earth'}))\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","99c7a028":"Please **Upvote** if you like this kernel","061192f4":"**Reading Countries of World Data**","83ef4bb8":"**Let's look at percentage of agriculture , industry and service of top 100 and last 100 countries interactively**","78f4e843":"**Let's look at birthrate and deathrate of top 100 countries and last 100 countries interactively**","7ea6392f":"**As you see on graph , number one region is Sub-saharan Africa.Let's look at GDP, infant mortality , birthrate and deathrate of countries**","b10e3a7d":"**Importing Libraries**","e97fa591":"**There are some Nan values and these will be a problem for us. So we have fix them. Now Let's learn how many Nan values in our dataset.**","0e49b3a1":"![](http:\/\/peoplemagazine.com.pk\/wp-content\/uploads\/2017\/11\/o-WORLD-facebook.jpg)","e1df1e33":"**Let's look at industry and service features of top 7 countries (literacy)**","2213e9f1":"**There are problems with our column names.We have to fix them.**","76d1efa3":"**Let's fill the missing values by using fillna method.We will fill Nan values with mean of columns**","050ff57c":" **DATA SCIENCE WITH COUNTRIES OF WORLD**\n    ","87bb8494":"**Now ,We will look at correlation of features.Correlation is a statistical technique that can show whether and how strongly pairs of variables are related. For example, height and weight are related; taller people tend to be heavier than shorter people. When two sets of data are strongly linked together we say they have a High Correlation.**","6c39cc9e":"**In the region column , There are some spaces before and after of the regions.We can fix this issue with \"strip()\" method**","e1d67e56":"**GDP is key value. As you see, there are positive correlation between \"Phones\" and \"Service\". Let's look these two features deeply**","c2e402d9":"**Let's look at agriculture and service features of top 7 countries (literacy)**","909e06ff":"**We have to change our datatype to \"category\" and \"float\" to use easily**","cf6e4aca":"**MISSING VALUES**","eec49ef7":"**Yes our datatypes are perfect now. We can go on.**","65314255":"**Let's visualize the correlations with heatmap**","e6e902d3":"**Let's make world map with plotly interactively**","f454e155":"**There are relationships with these features (gdp,infant mortality,birthrate,phones,literacy,service)**","75187e6b":"**More money more phones :)** **, Let's make some interactive visualization with plotly. I like plotly**","8b1958e4":"**First of all , We have to know our data types.As you know There will be some problems with our data types and we will change some of them in order to use them effectively.**","57c668ae":"**Now our data is ready , Data preprocessing is finished. Our data is clean and let's look at World data**","43b3ed7b":"**Let's make bubble chart with service and literacy of countries**","7c9e94b2":"**Data visualization is the presentation of data in a pictorial or graphical format. It enables decision makers to see analytics presented visually, so they can grasp difficult concepts or identify new patterns. NOW Let's make some visualization**","462d2e65":"**We can group our data by regions and let's look at the mean of each region**"}}