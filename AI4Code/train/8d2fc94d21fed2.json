{"cell_type":{"b4c4614a":"code","319cc1c8":"code","95308aac":"code","4c8dc1d3":"code","266dbc98":"code","2efe6d07":"code","c4f6e286":"code","8ca21d5f":"code","53781d23":"code","d4d3cdbc":"code","6e50c3c1":"code","d5ce131a":"code","4f63fabe":"code","71151e42":"code","fac0e9b1":"code","1019214f":"code","10c25812":"code","df93753e":"code","67f094fb":"code","ce3d44d5":"code","f7ecceb9":"code","fa9a4e72":"code","93533382":"code","6d639539":"code","af01f2a0":"code","06e3213e":"code","d85eccfc":"code","aaa9e27f":"code","e49abfee":"code","13c506e0":"code","77dc413b":"code","5f90b8f3":"code","53f750b5":"code","f7749987":"code","ee945a69":"code","62693f42":"code","2e78e5c5":"code","3b2c261e":"code","aec5645d":"code","ba2525a1":"code","b2710b77":"code","8877930b":"code","e7d6c91f":"code","3412348a":"code","d0c96745":"code","e466257f":"code","661d53d8":"code","9c0c0ec1":"code","8137bb0c":"code","520eb67c":"code","cba0915e":"code","3b1c12ae":"code","a02db89f":"code","2266f088":"code","30ce7b4b":"code","d5dd264f":"code","04e98de8":"code","89b221ab":"code","540bb5a1":"code","a30a4075":"code","38d3189c":"code","46a9766c":"markdown"},"source":{"b4c4614a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","319cc1c8":"import pandas as pd\nimport numpy as np\nimport glob\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pprint import pprint\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","95308aac":"accidents = pd.read_csv('\/kaggle\/input\/uk-road-safety-accidents-and-vehicles\/Accident_Information.csv')\nprint('Records:', accidents.shape[0], '\\nColumns:', accidents.shape[1])\naccidents.head()","4c8dc1d3":"vehicles = pd.read_csv('\/kaggle\/input\/uk-road-safety-accidents-and-vehicles\/Vehicle_Information.csv', encoding='ISO-8859-1')\nprint('Records:', vehicles.shape[0], '\\nColumns:', vehicles.shape[1])\nvehicles.head()","266dbc98":"accidents['Date']= pd.to_datetime(accidents['Date'], format=\"%Y-%m-%d\")","2efe6d07":"accidents.iloc[:, 5:13].info()","c4f6e286":"\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(15,6))\n\n\naccidents.set_index('Date').resample('M').size().plot(label='total per bulan', color='green', ax=ax)\naccidents.set_index('Date').resample('M').size().rolling(window=10).mean()\\\n                           .plot(color='yellow', linewidth=5, label='Rata- rata dalam dala 10 bulan', ax=ax)\n\nax.set_title('Kecelakaan dalam sebulan', fontsize=14, fontweight='bold')\nax.set(ylabel='Jumlah\\n', xlabel='')\nax.legend(bbox_to_anchor=(1.1, 1.1), frameon=False)\n\n\nsns.despine(ax=ax, top=True, right=True, left=True, bottom=False);","8ca21d5f":"\naccidents['Hour'] = accidents['Time'].str[0:2]\n\n\naccidents['Hour'] = pd.to_numeric(accidents['Hour'])\n\n\naccidents = accidents.dropna(subset=['Hour'])\n\n\naccidents['Hour'] = accidents['Hour'].astype('int')","53781d23":"\ndef when_was_it(hour):\n    if hour >= 5 and hour < 10:\n        return \"morning rush (5-10)\"\n    elif hour >= 10 and hour < 15:\n        return \"office hours (10-15)\"\n    elif hour >= 15 and hour < 19:\n        return \"afternoon rush (15-19)\"\n    elif hour >= 19 and hour < 23:\n        return \"evening (19-23)\"\n    else:\n        return \"night (23-5)\"","d4d3cdbc":"\naccidents['Daytime'] = accidents['Hour'].apply(when_was_it)\naccidents[['Time', 'Hour', 'Daytime']].head(30)","6e50c3c1":"yearly_count = accidents['Date'].dt.year.value_counts().sort_index(ascending=False)\n\n# prepare plot\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(12,5))\n\n# plot\nax.bar(yearly_count.index, yearly_count.values, color='red')\nax.plot(yearly_count, linestyle=':', color='black')\nax.set_title('\\nKecelakaan per tahun\\n', fontsize=14, fontweight='bold')\nax.set(ylabel='\\nJumlah')\n\n# remove all spines\nsns.despine(ax=ax, top=True, right=True, left=True, bottom=True);","d5ce131a":"weekday_counts = pd.DataFrame(accidents.set_index('Date').resample('1d')['Accident_Index'].size().reset_index())\nweekday_counts.columns = ['Date', 'Count']\n\n\nweekday = weekday_counts['Date'].dt.weekday_name\n\n\nweekday_averages = pd.DataFrame(weekday_counts.groupby(weekday)['Count'].mean().reset_index())\nweekday_averages.columns = ['Weekday', 'Average_Accidents']\nweekday_averages.set_index('Weekday', inplace=True)\n","4f63fabe":"\ndays = ['Sunday', 'Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']\n\n\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(10,5))\ncolors=['green', 'red', 'grey', 'pink', \n        'brown', 'orange', 'lightsteelblue']\n\n\nweekday_averages.reindex(days).plot(kind='barh', ax=ax, color=[colors])\nax.set_title('\\nRata - rata kecelakaan di weekday\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='\\nRata - rata jumlah', ylabel='')\nax.legend('')\n\n\nsns.despine(ax=ax, top=True, right=True, left=True, bottom=True);","71151e42":"accidents.Weather_Conditions.value_counts(normalize=True)","fac0e9b1":"accidents.Accident_Severity.value_counts()","1019214f":"\nfatal   = accidents.Accident_Severity.value_counts()['Fatal']\nserious = accidents.Accident_Severity.value_counts()['Serious']\nslight  = accidents.Accident_Severity.value_counts()['Slight']\n\nnames = ['Kecelakaan parah','Kecelakaan sedang', 'Kecelakaan ringan']\nsize  = [fatal, serious, slight]\n#explode = (0.2, 0, 0)\n\n\nplt.pie(x=size, labels=names, colors=['red', 'yellow', 'green'], \n        autopct='%1.2f%%', pctdistance=0.6, textprops=dict(fontweight='bold'),\n        wedgeprops={'linewidth':7, 'edgecolor':'white'})\n\n\nmy_circle = plt.Circle((0,0), 0.6, color='white')\n\n\nfig = plt.gcf()\nfig.set_size_inches(8,8)\nfig.gca().add_artist(my_circle)\nplt.title('\\nTingkat kecelakaan di tahun 2013-2017', fontsize=14, fontweight='bold')\nplt.show()","10c25812":"sub_df = accidents[['Date', 'Accident_Index', 'Accident_Severity']]\n\n\nyear = sub_df['Date'].dt.year\nweek = sub_df['Date'].dt.week\n\ncount_of_fatalities = sub_df.set_index('Date').groupby([pd.Grouper(freq='W'), 'Accident_Severity']).size()\n\nfatalities_table = count_of_fatalities.rename_axis(['Week', 'Accident_Severity'])\\\n                                      .unstack('Accident_Severity')\\\n                                      .rename({1:'fatal', 2:'serious', 3:'slight'}, axis='columns')","df93753e":"fatalities_table['sum'] = fatalities_table.sum(axis=1)\nfatalities_table = fatalities_table.join(fatalities_table.div(fatalities_table['sum'], axis=0), rsuffix='_percentage')","67f094fb":"\nsub_df = fatalities_table[['Fatal_percentage', 'Serious_percentage', 'Slight_percentage']]\n\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(14,6))\ncolors=['green', 'pink', 'red']\n\nsub_df.plot(color=colors, ax=ax)\nax.set_title('\\nProporsi Tingkat Keparahan Kecelakaan\\n', fontsize=14, fontweight='bold')\nax.set(ylabel='\\n', xlabel='')\nax.legend(labels=['Kecelakaan Parah', 'Kecelakaan Sedang', 'Kecelakaan Ringan'], \n          bbox_to_anchor=(1.3, 1.1), frameon=False)\n\nsns.despine(top=True, right=True, left=True, bottom=False);","ce3d44d5":"\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(10,6))\n\n\naccidents.Hour.hist(bins=24, ax=ax, color='brown')\nax.set_title('\\nKecelakaan di jam\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='jam', ylabel='Jumlah kecelakaan')\n\n\nsns.despine(top=True, right=True, left=True, bottom=True);","f7ecceb9":"order = ['night (23-5)', 'evening (19-23)', 'afternoon rush (15-19)', 'office hours (10-15)', 'morning rush (5-10)']\ndf_sub = accidents.groupby('Daytime').size().reindex(order)\n\n\nfig, ax = plt.subplots(figsize=(10, 5))\ncolors = ['green', 'green', 'orange', 'green', 'green']\n\n\ndf_sub.plot(kind='barh', ax=ax, color=colors)\nax.set_title('\\nKecelakaan pada waktu\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='\\nTjumlah kecelakaan', ylabel='')\n\n\nsns.despine(top=True, right=True, left=True, bottom=True);","fa9a4e72":"\ncounts = accidents.groupby(['Daytime', 'Accident_Severity']).size()\n\ncounts = counts.rename_axis(['Daytime', 'Accident_Severity'])\\\n                                .unstack('Accident_Severity')\\\n                                .rename({1:'fatal', 2:'serious', 3:'slight'}, axis='columns')","93533382":"counts['sum'] = counts.sum(axis=1)\ncounts = counts.join(counts.div(counts['sum'], axis=0), rsuffix=' in %')\ncounts_share = counts.drop(columns=['Fatal', 'Serious', 'Slight', 'sum', 'sum in %'], axis=1)","6d639539":"# prepare barplot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# plot\ncounts_share.reindex(order).plot(kind='barh', ax=ax, stacked=True, cmap='cividis')\nax.set_title('\\nkecelakaan pada waktu\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='persentase', ylabel='')\nax.legend(bbox_to_anchor=(1.25, 0.98), frameon=False)\n\n# remove all spines\nsns.despine(top=True, right=True, left=True, bottom=True);","af01f2a0":"vehicles.Sex_of_Driver.value_counts(normalize=True)","06e3213e":"drivers = vehicles.groupby(['Age_Band_of_Driver', 'Sex_of_Driver']).size().reset_index()\n\n# drop the values that have no value\ndrivers.drop(drivers[(drivers['Age_Band_of_Driver'] == 'Data missing or out of range') | \\\n                     (drivers['Sex_of_Driver'] == 'Not known') | \\\n                     (drivers['Sex_of_Driver'] == 'Data missing or out of range')]\\\n                     .index, axis=0, inplace=True)\n# rename the columns\ndrivers.columns = ['Age_Band_of_Driver', 'Sex_of_Driver', 'Count']\ndrivers","d85eccfc":"fig, ax = plt.subplots(figsize=(14, 7))\nsns.barplot(y='Age_Band_of_Driver', x='Count', hue='Sex_of_Driver', data=drivers, palette='bone')\nax.set_title('\\nPerbandingan kecelakaan dengan umur dan jenis kelamin\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='Count', ylabel='Age Band of Driver')\nax.legend(bbox_to_anchor=(1.1, 1.), borderaxespad=0., frameon=False)\n\nsns.despine(top=True, right=True, left=True, bottom=True);","aaa9e27f":"accidents['Date']= pd.to_datetime(accidents['Date'], format=\"%Y-%m-%d\")","e49abfee":"accidents.iloc[:, 8:11].info()","13c506e0":"daytime_groups = {1: 'Morning (5-10)', \n                  2: 'Office Hours (10-15)', \n                  3: 'Afternoon Rush (15-19)', \n                  4: 'Evening (19-23)', \n                  5: 'Night(23-5)'}","77dc413b":"# slice first and second string from time column\naccidents['Hour'] = accidents['Time'].str[0:2]\n\n# convert new column to numeric datetype\naccidents['Hour'] = pd.to_numeric(accidents['Hour'])\n\n# drop null values in our new column\naccidents = accidents.dropna(subset=['Hour'])\n\n# cast to integer values\naccidents['Hour'] = accidents['Hour'].astype('int')","5f90b8f3":"# define a function that turns the hours into daytime groups\ndef when_was_it(hour):\n    if hour >= 5 and hour < 10:\n        return \"1\"\n    elif hour >= 10 and hour < 15:\n        return \"2\"\n    elif hour >= 15 and hour < 19:\n        return \"3\"\n    elif hour >= 19 and hour < 23:\n        return \"4\"\n    else:\n        return \"5\"\n    \n# apply this function to our temporary hour column\naccidents['Daytime'] = accidents['Hour'].apply(when_was_it)\naccidents[['Time', 'Hour', 'Daytime']].tail()","53f750b5":"accidents = accidents.drop(columns=['Time', 'Hour'])","f7749987":"labels = tuple(daytime_groups.values())\n\n# plot total no. of accidents by daytime\naccidents.groupby('Daytime').size().plot(kind='bar', color='green', figsize=(12,5), grid=True)\nplt.xticks(np.arange(5), labels, rotation='horizontal')\nplt.xlabel(''), plt.ylabel('Jumlah\\n')\nplt.title('\\nTotal jumlah kecelakaan dari jam\\n', fontweight='bold')\nsns.despine(top=True, right=True, left=True, bottom=True);","ee945a69":"accidents.groupby('Daytime')['Number_of_Casualties'].mean().plot(kind='bar', color='orange', \n                                                                 figsize=(12,4), grid=False)\nplt.xticks(np.arange(5), labels, rotation='horizontal')\nplt.ylim((1,1.5))\nplt.xlabel(''), plt.ylabel('rata rata corbans\\n')\nplt.title('\\nJumlah rata - rata korban di lihat dari jam\\n', fontweight='bold')\nsns.despine(top=True, right=True, left=True, bottom=True);","62693f42":"print('Proportion of Missing Values in Accidents Table:', \n      round(accidents.isna().sum().sum()\/len(accidents),3), '%')","2e78e5c5":"accidents = accidents.drop(columns=['Location_Easting_OSGR', 'Location_Northing_OSGR', \n                                    'Longitude', 'Latitude'])\n\n# drop remaining records with NaN's\naccidents = accidents.dropna()\n\n# check if we have no NaN's anymore\naccidents.isna().sum().sum()","3b2c261e":"df = accidents[['Accident_Index', 'Accident_Severity', 'Number_of_Vehicles', 'Number_of_Casualties', 'Day_of_Week', \n                'Daytime', 'Road_Type', 'Speed_limit', 'Urban_or_Rural_Area', 'LSOA_of_Accident_Location']]\ndf.isna().sum().sum()","aec5645d":"for col in ['Accident_Severity', 'Day_of_Week', 'Daytime', 'Road_Type', 'Speed_limit', \n            'Urban_or_Rural_Area', 'LSOA_of_Accident_Location']:\n    df[col] = df[col].astype('category')\n    \ndf.info()","ba2525a1":"df.groupby('Road_Type')['Number_of_Casualties'].mean().plot(kind='bar', color='pink', \n                                                            figsize=(12,4), grid=False)\nplt.xticks(np.arange(6), \n           ['Roundabout', 'One way street', 'Dual carriageway', 'Single carriageway', 'Slip road', 'Unknown'], \n           rotation='horizontal')\nplt.ylim((1,1.5))\nplt.xlabel(''), plt.ylabel('angka rata rata\\n')\nplt.title('\\nRata - rata kecelakaan di karena jenis jalan\\n', fontweight='bold')\nsns.despine(top=True, right=True, left=True, bottom=True);","b2710b77":"df.groupby('Speed_limit')['Number_of_Casualties'].mean().plot(kind='bar', color='lightgreen', \n                                                              figsize=(15,4), grid=False)\nplt.xticks(np.arange(8), \n           ['None', '10mph', '20mph', '30mph', '40mph', '50mph', '60mph', '70mph'], \n           rotation='horizontal')\nplt.ylim((0.6,1.6))\nplt.xlabel(''), plt.ylabel('Angka rata-rata\\n')\nplt.title('\\nRata - rata angka kecelakaan karena batas kecelakaan\\n', fontweight='bold')\nsns.despine(top=True, right=True, left=True, bottom=True);","8877930b":"df.groupby('Day_of_Week')['Number_of_Casualties'].mean().plot(kind='bar', color='brown', \n                                                              figsize=(14,4), grid=False)\nplt.xticks(np.arange(7), \n           ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], \n           rotation='horizontal')\nplt.ylim((1.0,1.6))\nplt.xlabel(''), plt.ylabel('Angka Rat-Rata\\n')\nplt.title('\\nAngka Rata-rata kecelakaan di hari kerja\\n', fontweight='bold')\nsns.despine(top=True, right=True, left=True, bottom=True);","e7d6c91f":"num_cols = ['Number_of_Vehicles', 'Number_of_Casualties']","3412348a":"sns.set(style='darkgrid')\nfig, axes = plt.subplots(2,1, figsize=(10,4))\n\nfor ax, col in zip(axes, num_cols):\n    df.boxplot(column=col, grid=False, vert=False, ax=ax)\n    plt.tight_layout();","d0c96745":"df['Number_of_Vehicles'].value_counts().head(10)","e466257f":"df['Number_of_Casualties'].value_counts().head(20)","661d53d8":"condition = (df['Number_of_Vehicles'] < 6) & (df['Number_of_Casualties'] < 9)\n\ndf = df[condition]\n\n\nprint(df['Number_of_Vehicles'].value_counts())","9c0c0ec1":"print(df['Number_of_Casualties'].value_counts())","8137bb0c":"df.head(2)","520eb67c":"look_up = pd.read_csv('..\/input\/datasetex\/Output_Area_to_LSOA_to_MSOA_to_Local_Authority_District__December_2017__Lookup_with_Area_Classifications_in_Great_Britain.csv')\nlook_up.head(10)","cba0915e":"df_merged = pd.merge(df, look_up[['LSOA11CD', 'LAD17NM']], how='left', \n                     left_on='LSOA_of_Accident_Location', right_on='LSOA11CD')\ndf_merged.head(5)","3b1c12ae":"df_merged = df_merged.drop(columns=['LSOA_of_Accident_Location', 'LSOA11CD'])\\\n                        .rename(columns={'LAD17NM': 'County_of_Accident'})\\\n                            .astype({'County_of_Accident': 'category'})\\\n                                .drop_duplicates()\n\ndf_merged.head(5)","a02db89f":"df_merged.shape","2266f088":"df_merged.groupby('County_of_Accident').size().sort_values(ascending=False).head()","30ce7b4b":"df_plot = df_merged.groupby('County_of_Accident').size().reset_index().rename(columns={0:'Count'})\ndf_plot.head()","d5dd264f":"num_col = ['Number_of_Vehicles']\n\ncat_cols = ['Accident_Severity', 'Day_of_Week', 'Daytime', 'Road_Type', 'Speed_limit', \n            'Urban_or_Rural_Area', 'County_of_Accident']\n\ntarget_col = ['Number_of_Casualties']\n\ncols = cat_cols + num_cols + target_col\n\ndf_model = df_merged[cols].copy()\ndf_model.shape","04e98de8":"dummies = pd.get_dummies(df_model[cat_cols], drop_first=True)\ndf_model = pd.concat([df_model[num_cols], df_model[target_col], dummies], axis=1)\ndf_model.shape","89b221ab":"df_model.isna().sum().sum()","540bb5a1":"features = df_model.drop(['Number_of_Casualties'], axis=1)\n\ntarget = df_model[['Number_of_Casualties']]","a30a4075":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2)","38d3189c":"from sklearn.linear_model import LogisticRegression, Perceptron, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier","46a9766c":"### Train-Test-Split"}}