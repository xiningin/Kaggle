{"cell_type":{"a697664d":"code","074d72af":"code","4834a3b2":"code","7c692efc":"code","0770d887":"code","08e1c81b":"code","988a534c":"code","fed60bab":"code","a6c1972b":"code","43d9080e":"code","77561521":"code","beb82be2":"code","220d3b70":"code","f44ddefe":"code","f09f72d9":"code","b9cc7619":"code","a0c56427":"code","1617d929":"markdown","e79f04f2":"markdown","752087cb":"markdown"},"source":{"a697664d":"import matplotlib.pyplot as plt\nimport PIL\nfrom PIL import Image\nimport numpy as np\nimport pandas as p","074d72af":"import os\ndr1 = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/\"\ndata1 = []\nfor f in os.listdir(dr1):\n    #print(dr1+f)\n    data1.append(dr1+str(f))\n\ndata2 = []\ndr2 = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/\"\nfor i in os.listdir(dr2):\n    data2.append(dr2 + str(i))\n\ndata = data1 + data2\n\nf1 = np.size(data1)\nf2 = np.size(data2)\n#print(f1,f2)","4834a3b2":"print(np.size(data[0]))\ndata = np.array(data)\nprint(data[0])\nImage.open(data[0])","7c692efc":"train = []\n\nfor i in data:\n    \n    img = Image.open(i)\n    img = img.resize((300,300))\n    img = np.array(img)\n    if (np.size(img) == 270000):\n        img = np.resize(img, (300,300))\n    img = np.reshape(img, (300,300,1))\n    train.append(img)    ","0770d887":"#for i in train:\n #   print(np.shape(i))","08e1c81b":"train_val = []\n\nfor i in range(f1):\n    train_val.append(0)\nfor i in range(f2):\n    train_val.append(1)\n    \nprint(np.size(train_val))","988a534c":"dr3 = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/\"\ndata3, data4 = [], []\nfor f in os.listdir(dr3):\n    data3.append(dr3+str(f))\n\ndr4 = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\/\"\n\nfor f in os.listdir(dr4):\n    data4.append(dr4+str(f)) \n\ndt2 = data3 + data4  \nf3 = np.size(data3)\nf4 = np.size(data4)\n\ntest = []\n\nfor i in dt2:\n    \n    img = Image.open(i)\n    img = img.resize((300,300))\n    img = np.array(img)\n    if (np.size(img) == 270000):\n        img = np.resize(img, (300,300))\n    img = np.reshape(img, (300,300,1))\n    test.append(img)\n    \ntest_val = []\n\nfor i in range(f3):\n    test_val.append(0)\nfor i in range(f4):\n    test_val.append(1)\n    \nprint(np.size(test_val))","fed60bab":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization\n\n","a6c1972b":"train = np.array(train)\ntrain_val = np.array(train_val)\n\n#for i in range(len(train)):\n#    print(np.shape(train[i]))","43d9080e":"np.shape(train)","77561521":"model = Sequential()\nmodel.add(Conv2D(64, (3,3), activation = 'relu' , input_shape = (300,300,1)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(128, (3,3), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(256, (3,3), activation = 'relu' ))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(128, (3,3), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(units = 1024 , activation = 'relu'))\nmodel.add(Dense(units = 128 , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 64, activation = 'sigmoid'))\nmodel.add(Dense(units = 1 , activation = 'sigmoid'))\nmodel.compile(optimizer = \"adam\" , loss = 'binary_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","beb82be2":"model.fit((train), np.array(train_val), epochs=5)","220d3b70":"res = model.evaluate(np.array(test),np.array(test_val),)\nprint('Evaluation result : ',res[1]*100,'%')","f44ddefe":"prediction = model.predict(np.array(test))","f09f72d9":"tabulate = []\nfor i in range(len(prediction)):\n    tabulate.append([prediction[i,0],test_val[i]])\n\nconf_mat = [0,0,0,0] \nfor i in tabulate:\n    \n    if (i[1] == 0 and i[0] < 0.5 ):\n        conf_mat[0] = conf_mat[0] + 1 \n    if (i[1] == 0 and i[0] >= 0.5 ):\n        conf_mat[1] = conf_mat[1] + 1 \n    if (i[1] == 1 and i[0] < 0.5 ):\n        conf_mat[2] = conf_mat[2] + 1 \n    if (i[1] == 1 and i[0] >= 0.5 ):\n        conf_mat[3] = conf_mat[3] + 1 \n        \nconf_mat","b9cc7619":"conf_mat2 = np.reshape(conf_mat,(2,2))\n\nimport seaborn as sn\n\nsn.heatmap(conf_mat2,annot=True, fmt=\"d\",center=0,)","a0c56427":"Accuracy = (conf_mat[0] + conf_mat[3])\/(conf_mat[0] + conf_mat[1] + conf_mat[2] + conf_mat[3])\nPrecision = (conf_mat[0])\/(conf_mat[0]+conf_mat[2])\nRecall =  (conf_mat[0])\/(conf_mat[0]+conf_mat[1])\nF1 = 2*(Recall * Precision) \/ (Recall + Precision)\n\nprint('Accuracy: ', Accuracy)\nprint('Precision: ', Precision)\nprint('Recall: ', Recall)\nprint('F1 Score: ', F1)","1617d929":"# Model fitting accuracy is more than 98.5%.\n\nAccuracy:  0.7419871794871795\n\nPrecision:  0.974025974025974\n\nRecall:  0.32051282051282054\n\nF1 Score:  0.482315112540193","e79f04f2":"# **Evaluation result**","752087cb":"# **Pneumonia Detection using CNN**"}}