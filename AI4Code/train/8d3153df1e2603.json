{"cell_type":{"bea87a48":"code","e513a085":"code","20b42385":"code","14a58826":"code","4eaa62ee":"code","957856ec":"code","d14ee3e8":"code","1cbeaf5b":"code","7ac6d8b2":"code","36a53d0d":"code","2d072278":"code","7f07b5c9":"code","cb5f6559":"code","1123c565":"code","75c4dd4f":"code","277a96c3":"code","bb683139":"code","ae01f283":"code","011ff3ba":"code","aec80709":"code","055e60ac":"code","f4dc5315":"code","41da4929":"code","012c8671":"code","a822e6d6":"code","c362b25b":"code","a489d07a":"code","03db5b1b":"code","07b9a299":"code","f2b76780":"code","c608cb8e":"code","4d1711a8":"code","0fb629cd":"code","358da849":"markdown","ac57c0b4":"markdown","7356f1cd":"markdown","51eada4f":"markdown","5a451d40":"markdown","7a2ab3be":"markdown"},"source":{"bea87a48":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e513a085":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","20b42385":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","14a58826":"train.info()","4eaa62ee":"test.info()","957856ec":"all = pd.concat([train, test], sort = False)\nall.info()","d14ee3e8":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","1cbeaf5b":"all.info()","7ac6d8b2":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","36a53d0d":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","2d072278":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","7f07b5c9":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","cb5f6559":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","1123c565":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","75c4dd4f":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","277a96c3":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","bb683139":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","ae01f283":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","011ff3ba":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","aec80709":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","055e60ac":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","f4dc5315":"from sklearn.linear_model import LogisticRegression","41da4929":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","012c8671":"predictions = logmodel.predict(X_test)\npredictions","a822e6d6":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","c362b25b":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","a489d07a":"all_test.head()","03db5b1b":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","07b9a299":"TestForPred.info()","f2b76780":"t_pred = logmodel.predict(TestForPred).astype(int)","c608cb8e":"PassengerId = all_test['PassengerId']","4d1711a8":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","0fb629cd":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","358da849":"****Check Accuracy","ac57c0b4":"****Final Predictions","7356f1cd":"****Extra Features:","51eada4f":"****Train\/Test Split","5a451d40":"****Confusion Matrix","7a2ab3be":"****Build Logistic Model"}}