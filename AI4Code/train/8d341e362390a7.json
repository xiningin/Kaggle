{"cell_type":{"20937bbe":"code","4541b3c0":"code","95b1169d":"code","8435debe":"code","75bfc62e":"code","b63515f3":"code","87b6b4fe":"code","ccd17dde":"code","e38120bd":"code","dd4806b6":"code","164476a2":"code","2658ca2c":"code","3d8d6618":"code","19325cc0":"code","b3d605a9":"code","2f2968fe":"code","01a6dd61":"code","0257b7de":"code","ef8c2c6d":"markdown","d945ef47":"markdown","203365d7":"markdown","acefa61f":"markdown","513cc751":"markdown","6443139b":"markdown","6bfcf2d4":"markdown","2881c6f3":"markdown","88c4a1af":"markdown","5635fae2":"markdown","4599e80d":"markdown","5fec0481":"markdown","788373be":"markdown","e688029d":"markdown","4a7922a1":"markdown","09ec8b05":"markdown"},"source":{"20937bbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4541b3c0":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense,BatchNormalization\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image  import ImageDataGenerator, img_to_array,load_img\nimport matplotlib.pyplot as plt\nfrom glob import glob","95b1169d":"def load_and_preprocess(data_path):\n    data = pd.read_csv(data_path)\n    data = data.to_numpy()\n    np.random.shuffle(data)\n    x = data[:,1:].reshape(-1,28,28,1)\/255.0\n    y = data[:,0].astype(np.int32)\n    y = to_categorical(y, num_classes=len(set(y)))\n\n    return x,y","8435debe":"x_train,y_train = load_and_preprocess(\"\/kaggle\/input\/mnist-in-csv\/mnist_train.csv\"\n)\nprint(\"Shape of x_train : \" , x_train.shape)\nprint(\"Shape of y_train : \" , y_train.shape)","75bfc62e":"x_test,y_test = load_and_preprocess(\"\/kaggle\/input\/mnist-in-csv\/mnist_test.csv\"\n)\nprint(\"Shape of x_test : \" , x_test.shape)\nprint(\"Shape of y_test : \" , y_test.shape)","b63515f3":"i = 20;\ntemp = x_train.reshape(60000,28,28)\nplt.imshow(temp[i,:,:])\nplt.legend()\nplt.axis('off')\nplt.title(np.argmax(y_train[i]))\nplt.show()","87b6b4fe":"number_of_class = y_train.shape[1]","ccd17dde":"model = Sequential()","e38120bd":"model.add(Conv2D(input_shape = (28,28,1), filters = 16, kernel_size = (3,3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())","dd4806b6":"model.add(Conv2D(filters = 64, kernel_size = (3,3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())","164476a2":"model.add(Conv2D(filters = 128, kernel_size = (3,3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())","2658ca2c":"model.add(Flatten())\nmodel.add(Dense(units = 256))\nmodel.add(Activation(\"relu\"))","3d8d6618":"model.add(Dropout(0.2))\nmodel.add(Dense(units = number_of_class))\nmodel.add(Activation(\"softmax\"))","19325cc0":"model.compile(loss = \"categorical_crossentropy\",\n              optimizer = \"adam\",\n              metrics = [\"accuracy\"])","b3d605a9":"hist = model.fit(x_train,y_train, validation_data=(x_test,y_test), epochs= 5, batch_size= 32)","2f2968fe":"model.save_weights('cnn_mnist_model.h5')","01a6dd61":"print(hist.history.keys())\nplt.plot(hist.history[\"loss\"],label = \"Train Loss\")\nplt.plot(hist.history[\"val_loss\"],label = \"Validation Loss\")\nplt.legend()\nplt.show()\nplt.figure()\nplt.plot(hist.history[\"accuracy\"],label = \"Train Accuracy\")\nplt.plot(hist.history[\"val_accuracy\"],label = \"Validation Accuracy\")\nplt.legend()\nplt.show()","0257b7de":"#%% save history\nimport json\nwith open('cnn_mnist_hist.json', 'w') as f:\n    json.dump(hist.history, f)\n    \n#%% load history\nimport codecs\nwith codecs.open(\"cnn_mnist_hist.json\", 'r', encoding='utf-8') as f:\n    h = json.loads(f.read())\n\nplt.figure()\nplt.plot(h[\"loss\"],label = \"Train Loss\")\nplt.plot(h[\"val_loss\"],label = \"Validation Loss\")\nplt.legend()\nplt.show()\nplt.figure()\nplt.plot(h[\"accuracy\"],label = \"Train Accuracy\")\nplt.plot(h[\"val_accuracy\"],label = \"Validation Accuracy\")\nplt.legend()\nplt.show()","ef8c2c6d":"> To learn different proporties of image, we use Dropout\n\n**Dropout and Output Layers**","d945ef47":"* **Needed Libraries**\n\n> Sequential provides us to add our layers with order.\n\n> In my model, I plan to use \n    1. Convolutional layers(CNN), \n    2. Maxpooling layers, \n    3. Activation layers, \n    4. Droupout Layers, \n    5. Fully Connected Layers.\n  \n> I need to make preprocessing to my data; therefore, I need to import ralated libraries, namely \n    1. ImageDataGenerator\n    2. img_to_array => convert image to array\n    3. load_img => to load image\n    \n> To plot and visualize the data and results, matplotlib.pyplot will be used. \n\n> To learn how many class I have, glob library will be used","203365d7":"**Compiling Our Model**","acefa61f":"**Load Test Data & Preprocessing**","513cc751":"**Load Train Data & Preprocessing**","6443139b":"> Our class number is 10 since there are 10 number(0,1,2,3,4,5,6,7,8,9)","6bfcf2d4":"**Save Model**","2881c6f3":"> Now, we load and preprocess our data. \n\n**Visualization of Data**","88c4a1af":"# Implementing The Model","5635fae2":"**Flatten process and Fully Conncected Neural Network**","4599e80d":"# Loading Data","5fec0481":"# Train Proccessing","788373be":"**Initializing Model**","e688029d":"# Evaluation of Model & Results","4a7922a1":"**Our model sturucture :**\n1. 3 Convolutional Layers with Different Filters\n2. 3 Batch Normalization Layers\n3. Activation function in Convolutional Layers is Relu\n4. 3 MaxPooling Layers","09ec8b05":"> Lets look at one example image"}}