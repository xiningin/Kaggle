{"cell_type":{"cb647640":"code","10d11455":"code","40081a0b":"code","c96050f4":"markdown","3a8c8ef3":"markdown","20c97360":"markdown","126a599f":"markdown","31ff7954":"markdown","4366b23e":"markdown"},"source":{"cb647640":"####################################################################################\n# imports \nimport numpy as np\nimport pandas as pd \nimport os,random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_randFloat\nfrom scipy.stats import randint as sp_randInt\n\nfrom sklearn import ensemble,linear_model\nfrom sklearn.model_selection import cross_validate\n####################################################################################\n# variables\nTRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"PassengerId\"\nTARGET = \"Survived\"\n\nSEED = 2022\ndef seed_everything(seed=SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseed_everything()\n\nRS_CV = 5\nRS_N_ITER = 500\nRS_N_JOBS = -1\nRS_SCORING = 'accuracy'\n\nCV_SCORING = 'accuracy'\n####################################################################################\n# load & preprocess\n# import module we'll need to import our custom module\nfrom shutil import copyfile\n\n# copy our file into the working directory (make sure it has .py suffix)\ncopyfile(src = \"..\/input\/titanic-preprocess\/titanic_preprocess_py.py\", dst = \"..\/working\/titanic_preprocess_py.py\")\n\nfrom titanic_preprocess_py import *\n\ntrain,test = loadAndPreprocess(TRAIN_PATH,TEST_PATH)\n####################################################################################","10d11455":"####################################################################################\n#split input data and target data \nX = train.drop([ID,TARGET],axis=1)\ny = train[TARGET]\n####################################################################################\n# search best parameter and model\nmodel = linear_model.RidgeClassifier()\nparameters = {\n    'alpha' :sp_randFloat(1e-10, 1e+10) , \n    'fit_intercept':[True,False],\n    'class_weight':['balanced',None],\n    'solver':['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga', 'lbfgs'] \n}\n\nrs = RandomizedSearchCV(estimator=model, \n                           param_distributions = parameters,\n                           scoring=RS_SCORING,\n                           cv = RS_CV, \n                           n_iter = RS_N_ITER, \n                           n_jobs=RS_N_JOBS,\n                           verbose=10)\nrs.fit(X, y)\n    \ncv_results = cross_validate(rs, X, y, cv=5,scoring=(CV_SCORING),return_train_score=True)\nprint(cv_results)\n\n# best model \nprint(rs.best_params_)\nbestModel = rs.best_estimator_\n####################################################################################","40081a0b":"####################################################################################\n#predict\nX_test = test.drop([ID,TARGET],axis=1)\npred_test = bestModel.predict(X_test)\n####################################################################################\n#submit\nsub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = pred_test.astype(int)\nsub.to_csv(SUBMISSION_PATH, index=False)\nsub.head()\n####################################################################################","c96050f4":"### predict & submit","3a8c8ef3":"### split data & search best model","20c97360":"# Build Model","126a599f":"# After Building Model","31ff7954":"### imports & variables & load & preprocess","4366b23e":"# Before Building Model"}}