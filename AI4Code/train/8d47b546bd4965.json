{"cell_type":{"944c9374":"code","465453da":"code","f92ce923":"code","c8cd565d":"code","2e6238be":"code","492668bb":"code","e185669b":"code","b0ed84da":"code","bf693a68":"code","fb1a7964":"code","eadb45f9":"code","e5eb0a32":"code","0b31c5ba":"code","ae7fdacd":"code","a9a04fc9":"code","19597aac":"markdown","153148f3":"markdown","5669eec5":"markdown","516e645d":"markdown","35b84248":"markdown","3790aea8":"markdown","e3c8eec9":"markdown"},"source":{"944c9374":"from IPython.display import Image, display\n\nlistOfImageNames = ['..\/input\/tsp-superpermutation-images\/03ED256B-4DBA-42EA-AD91-D4AE783EC266.jpeg',\n                    '..\/input\/tsp-superpermutation-images\/B383B703-361A-4F46-A148-AF98BA0EE128.jpeg']\n\nfor imageName in listOfImageNames:\n    display(Image(filename=imageName, width = 600, height = 250))","465453da":"import numpy as np\nimport pandas as pd\nimport itertools\nfrom typing import List, Dict\nfrom tqdm.notebook import trange, tqdm","f92ce923":"solutionnprint('The best solution is length',len(solution))","c8cd565d":"# split\nsplit_id = [len(solution) \/\/ 3, len(solution)*2\/\/3]\nt1, t2 = split_id\n\nprint(\"lengths:\")\nstrings = [solution[:t1+3], solution[t1-3:t2+3], solution[t2-3:]]\nfor s in strings:\n    print(len(s))\n\n# validate\nprint(\"\\nno strings should be printed\")\npermutations = [''.join(x) for x in itertools.permutations(['1','2','3','4','5','6','7'], 7)]\n\nfor p in permutations:\n    if p not in strings[0] and p not in strings[1] and p not in strings[2]:\n        print(p)\nprint(\"should have no strings above\\n\")\n        \n# include required permuations\nprint(\"number of required permutations:\")\nrequired_permutaions = ['54' + ''.join(x) for x in itertools.permutations(['1','2','3','6','7'], 5)]\nprint(len(required_permutaions))\n\nfor p in required_permutaions:\n    for i in range(3):\n        if p not in strings[i]:\n            strings[i] += p\n\n# final schedule lengths\nprint(\"\\nschedule lengths:\")\nfor s in strings:\n    print(len(s))","2e6238be":"from enum import Enum\nclass Heuristic(Enum):\n    NEAREST = 'insert nearest'\n    SMALLEST = 'insert smallest'\n    # add more here","492668bb":"from __future__ import annotations\n\nclass Node:\n    \"\"\"\n    A Node for the Graph \/ Linked List\n    \"\"\"\n    def __init__(self, permutation: str) -> None:\n        \"\"\"\n        Creates a Node given a permutation\n        \n        Parameters\n        ----------\n        permutation : str\n            the permutation as a string\n        \"\"\"\n        self.permutation = permutation\n        self.next_node: Node = None\n        \n    def _hamming_distance(self, str1, str2) -> int:\n        \"\"\"\n        Gets the hamming distance between two permutations as strings\n        \n        Parameters\n        ----------\n        str1 : str\n            the first string\n        str2 : str\n            the second string\n        \n        Returns\n        -------\n        the hamming distance between the nodes : int\n        \"\"\"\n        return sum( (c1!=c2) for c1, c2 in zip(str1, str2))\n\n    def dist_offset(self, other: Node) -> int:\n        \"\"\"\n        Gets the offset distance between this node and another\n        \n        Parameters\n        ----------\n        other : Node\n            the node to compare to\n        \n        Returns\n        -------\n        j : int\n            the offset distance between the nodes\n        \"\"\"\n        s1 = str(self.permutation)\n        s2 = str(other)\n        #print(s1, s2)\n        assert(len(s1)==len(s2))\n        ln = len(s1)\n        j = ln\n        for k in range(0,ln):\n            if self._hamming_distance(s1[k:],s2[:7-k])==0:\n                j=k\n                break\n        return j\n    \n    def __str__(self) -> str:\n        \"\"\" Gets a string representation of the node \"\"\"\n        return str(self.permutation)\n    \n\nclass LinkedList:\n    \"\"\"\n    A Graph to Optimize a superpermutation \/ schedule\n    \"\"\"\n    def __init__(self, path: str, heuristic: Heuristic, n: int=7) -> None:\n        \"\"\"\n        Creates a Graph in the form of a Linked List for a schedule\n        Inserts all the permutations based on a given type of heuristic\n        \n        Parameters\n        ----------\n        path : str\n            the given part of a superpermutation\n        heuristic: Heuristic\n            the heuristic to use\n        \"\"\"\n        self.path = path\n        self.n = n\n        self.heuristic = heuristic\n        \n        all_permutation = [''.join(x) for x in itertools.permutations(['1','2','3','4','5','6','7'], 7)]\n        self.permutations = list()\n        for p in all_permutation:\n            if path.find(p)!=-1:\n                self.permutations.append(p)\n                \n        self.head = None\n        self.length = 0\n            \n        if heuristic == Heuristic.SMALLEST:\n            for i in trange(len(path)-6):\n                if path[i:i+7] in all_permutation:\n                    self.insert_smallest(path[i:i+7])\n        elif heuristic == Heuristic.NEAREST:\n            for i in trange(len(path)-6):\n                if path[i:i+7] in all_permutation:\n                    self.insert_nearest(path[i:i+7])\n        else:\n            raise Exception(\"Not Implemented\")\n        \n    def optimize(self, t: int=1) -> List[int]:\n        \"\"\"\n        Optimizes the path by repetitively applying the heuristic\n        \n        Parameters\n        ----------\n        t : int\n            the number of times to apply the optimization\n            \n        Returns\n        -------\n        scores : List[int]\n            a list containing the evolution of the scores throughout the optimization\n        \"\"\"\n        scores = list()\n        scores.append(len(self.merge_to_string()))\n        \n        for _ in range(t):\n            if self.heuristic == Heuristic.SMALLEST:\n                self._improve_smallest()\n            elif self.heuristic == Heuristic.NEAREST:\n                self._improve_nearest()\n            else:\n                raise Exception(\"Not Implemented\")\n            scores.append(len(self.merge_to_string()))\n            \n        return scores\n        \n    def insert_nearest(self, p_string: str) -> None:\n        \"\"\"\n        Inserts a permutation into the graph using the insert nearest heuristic\n        \n        Parameters\n        ----------\n        p_string : str\n            the string containing the permutation\n        \"\"\"\n        p = Node(p_string)\n        \n        if self.head is None:\n            self.head = Node(p)\n            \n        index = 0\n        smallest_idx = 0\n        smallest_dist = np.inf\n        cur = self.head\n        \n        while(cur.next_node is not None):\n            added = cur.dist_offset(p)\n            if added < smallest_dist:\n                smallest_dist = added\n                smallest_idx = index\n            \n            index+=1\n            cur = cur.next_node\n            \n        # insert\n        cur = self.head\n        for i in range(smallest_idx):\n            cur = cur.next_node\n        temp = cur.next_node\n        cur.next_node = p\n        cur.next_node.next_node = temp\n        self.length+=1\n        \n    def insert_smallest(self, p_string: str) -> None:\n        \"\"\"\n        Inserts a permutation into the graph using the insert smallest heuristic\n        \n        Parameters\n        ----------\n        p_string : str\n            the string containing the permutation\n        \"\"\"\n        p = Node(p_string)\n        \n        if self.head is None:\n            self.head = Node(p)\n            \n        index = 0\n        smallest_idx = 0\n        smallest_dist = np.inf\n        cur = self.head\n        \n        while(cur.next_node is not None):\n            og = cur.dist_offset(cur.next_node)\n            added = cur.dist_offset(p) + p.dist_offset(cur.next_node) - og\n            \n            if added < smallest_dist:\n                smallest_dist = added\n                smallest_idx = index\n            \n            index+=1\n            cur = cur.next_node\n            \n        # insert\n        cur = self.head\n        for i in range(smallest_idx):\n            cur = cur.next_node\n        temp = cur.next_node\n        cur.next_node = p\n        cur.next_node.next_node = temp\n        self.length+=1\n    \n    def _improve_nearest(self) -> None:\n        \"\"\"\n        Improves the graph by using insert nearest heuristic on the filled graph\n        \"\"\"\n        cur = self.head\n        for i in trange(self.length):\n            try:\n                temp = cur.next_node\n                cur.next_node = cur.next_node.next_node\n                self.length-=1\n                self.insert_nearest(str(temp))\n                cur = cur.next_node\n            except Exception:\n                pass\n    \n    def _improve_smallest(self) -> None:\n        \"\"\"\n        Improves the graph by using insert smallest heuristic on the filled graph\n        \"\"\"\n        cur = self.head\n        for i in trange(self.length):\n            try:\n                temp = cur.next_node\n                cur.next_node = cur.next_node.next_node\n                self.length-=1\n                self.insert_smallest(str(temp))\n                cur = cur.next_node\n            except Exception:\n                pass\n    \n    def merge_to_string(self) -> str:\n        \"\"\"\n        Gets the solution from the graph\n        \"\"\"\n        result = None\n        cur = self.head\n        while(cur.next_node != None):\n            if(result == None):\n                result = str(cur)\n            d = cur.dist_offset(cur.next_node)\n            result += str(cur.next_node)[-d:]\n            cur = cur.next_node\n            \n        return result\n    \n    def __len__(self) -> int:\n        \"\"\" Gets the length (score) of the graph \"\"\"\n        return len(self.merge_to_string())","e185669b":"# The smallest heuristic is much better than nearest\ngraph1 = LinkedList(strings[0], Heuristic.SMALLEST)\ngraph2 = LinkedList(strings[1], Heuristic.SMALLEST)\ngraph3 = LinkedList(strings[2], Heuristic.SMALLEST)","b0ed84da":"history1 = graph1.optimize(1)\nhistory2 = graph2.optimize(1)\nhistory3 = graph3.optimize(1)","bf693a68":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot(range(len(history1)), history1, color='#307542')\nplt.plot(range(len(history2)), history2, color='#b08f3c')\nplt.plot(range(len(history3)), history3, color='#5171a6')\nplt.xticks(range(len(history1)))\nplt.show()","fb1a7964":"print(\"Final Score: \")\nprint( max(len(graph1), len(graph2), len(graph3)) )","eadb45f9":"replace_dict = {\n '5': '\ud83c\udf85',\n '4': '\ud83e\udd36',\n '8': '\ud83c\udf1f',\n '1': '\ud83e\udd8c',\n '2': '\ud83e\udddd',\n '3': '\ud83c\udf84',\n '6': '\ud83c\udf81',\n '7': '\ud83c\udf80'}\n\ndef replace(ans: str):\n    ans = ans.replace('5', '\ud83c\udf85')\n    ans = ans.replace('4', '\ud83e\udd36')\n    ans = ans.replace('8', '\ud83c\udf1f')\n    ans = ans.replace('1', '\ud83e\udd8c')\n    ans = ans.replace('2', '\ud83e\udddd')\n    ans = ans.replace('3', '\ud83c\udf84')\n    ans = ans.replace('6', '\ud83c\udf81')\n    ans = ans.replace('7', '\ud83c\udf80')\n    return ans\n\nfor k,v in replace_dict.items():\n    ans1 = graph1.merge_to_string()\n    ans1 = replace(ans1)\n    ans2 = graph2.merge_to_string()\n    ans2 = replace(ans2)\n    ans3 = graph3.merge_to_string()\n    ans3 = replace(ans3)","e5eb0a32":"sub = pd.read_csv(\"..\/input\/santa-2021\/sample_submission.csv\")\nsub.iloc[0] = ans1\nsub.iloc[1] = ans2\nsub.iloc[2] = ans3\nsub","0b31c5ba":"sub.to_csv('submission.csv', index=False)","ae7fdacd":"string1 = graph1.merge_to_string()\nstring2 = graph2.merge_to_string()\nstring3 = graph3.merge_to_string()\n\nall_permutations = [''.join(x) for x in itertools.permutations(['1','2','3','4','5','6','7'], 7)]\n\nfor p in all_permutations:\n    if p not in string1 and p not in string2 and p not in string3:\n        print(p)","a9a04fc9":"mandatory = ['54' + ''.join(x) for x in itertools.permutations(['1','2','3','6','7'], 5)]\nfor p in mandatory:\n    if p not in string1:\n        print(p)\n    if p not in string2:\n        print(p)\n    if p not in string3:\n        print(p)","19597aac":"# Create TSP Graph (Linked List)","153148f3":"# Split Superpermutation n=7\n\nIn this part, I will split the current best superpermutation for n=7 (length 5906) into 3 parts for the 3 schedules. I will also make sure each schedule has all 120 of the require permuations. In this notebook I will be using permutations starting with 54 as my required permuations.","5669eec5":"# Make Submission","516e645d":"# Solve With Graph","35b84248":"# Overview\n\nIn this notebook, I implement a traveling salesman problem (TSP) solution to split and optimize superpermutations according to the Santa 2021 Kaggle Competition rules.\n\nThe TSP is a popular NP-Hard challenge to attempt to find the minimal distance between points in a tour. TSP can be used for superpermutations by considering permutations as nodes and calculating their offest as the distance between them.\n\nIn this notebook, I implement the insert nearest and insert smallest heuristics. I recommend trying others.\n\nThis notebook is not designed to have the highest score, but rather to provide you with a graph and baseline for a TSP approach.","3790aea8":"# Verify Submission is Valid\n\nIn order for your submission to be accepted, run the cells below and you should have NO output","e3c8eec9":"# Anaylze Results\n\nDepending on the heuristic and other factors, the optimize function could have great or little-no benefit"}}