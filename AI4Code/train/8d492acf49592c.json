{"cell_type":{"0de0bb6d":"code","741bf28e":"code","e971c7ac":"code","2706b981":"code","697f9322":"code","c55751fd":"code","5f1c110b":"code","7d896287":"code","bb895578":"code","a4d4dfaa":"code","12b2aae3":"code","2d619654":"code","b3bed415":"code","a8a639a5":"code","a9e09383":"code","d2597c32":"code","44c476a8":"code","dbf6c808":"code","90672f63":"code","99820519":"code","e4e97b60":"code","b791794f":"code","7fe830ef":"code","19be719f":"code","7d4ea1d0":"code","8156d406":"code","76fdc6c4":"code","ac13203e":"code","77ca2469":"code","b691d8be":"code","44e5ac01":"code","f60f61dd":"code","05d8e83a":"code","f05d7766":"code","133fa0c7":"code","d03d215f":"code","0c57eeb5":"code","b4727c30":"code","cd385b70":"code","909cb109":"code","115f2a32":"code","ea85338c":"code","293fb9cc":"code","5602e6cc":"code","4a5442f6":"code","8731de54":"code","88d62c81":"code","1e4ec102":"markdown","d06b7cef":"markdown","5f07216f":"markdown","e7330ec1":"markdown","7cea6181":"markdown","e96f1350":"markdown","a55b92f3":"markdown","257f06cc":"markdown","d75d1be9":"markdown","84302b00":"markdown","59686ea6":"markdown","9667d2e0":"markdown","2d78141a":"markdown"},"source":{"0de0bb6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","741bf28e":"df2015 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2015.csv\")\ndf2016 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2016.csv\")\ndf2017 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2017.csv\")\ndf2018 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2018.csv\")\ndf2019 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\")","e971c7ac":"df15 = df2015.copy()\ndf16 = df2016.copy()\ndf17 = df2017.copy()\ndf18 = df2018.copy()\ndf19 = df2019.copy()","2706b981":"df15.head()","697f9322":"df16.head()","c55751fd":"df17.head()","5f1c110b":"df18.head()","7d896287":"df19.head()","bb895578":"df15.shape, df16.shape, df17.shape, df18.shape, df19.shape\n","a4d4dfaa":"df15.columns, df16.columns, df17.columns, df18.columns, df19.columns","12b2aae3":"df15.drop(['Happiness Rank','Standard Error', 'Economy (GDP per Capita)', \n           'Family', 'Dystopia Residual'],axis=1,inplace=True)\n\ndf15.rename(columns={\"Happiness Score\":\"Score\",\n                     \"Health (Life Expectancy)\":\"Health\",\n                     \"Trust (Government Corruption)\":\"Corruption\"}, inplace=True)\ndf15[\"Year\"]=2015\n#df15","2d619654":"df16.drop(['Happiness Rank','Lower Confidence Interval', 'Upper Confidence Interval', 'Economy (GDP per Capita)', \n           'Family', 'Dystopia Residual'],axis=1,inplace=True)\n\ndf16.rename(columns={\"Happiness Score\":\"Score\",\n                     \"Health (Life Expectancy)\":\"Health\",\n                     \"Trust (Government Corruption)\":\"Corruption\"}, inplace=True)\ndf16[\"Year\"]=2016\n#df16","b3bed415":"df17.drop(['Happiness.Rank','Whisker.high', \"Whisker.low\", 'Economy..GDP.per.Capita.', 'Family', 'Dystopia.Residual'],axis=1,inplace=True)\n\ndf17.rename(columns={\"Happiness.Score\":\"Score\",\n                     \"Health..Life.Expectancy.\":\"Health\",\n                     \"Trust..Government.Corruption.\":\"Corruption\"}, inplace=True)\ndf17[\"Year\"]=2017\n#df17","a8a639a5":"df18.drop([\"Overall rank\",\"GDP per capita\",\"Social support\"],axis=1,inplace=True)\n\ndf18.rename(columns={\"Country or region\":\"Country\",\n                     \"Healthy life expectancy\":\"Health\",\n                     \"Freedom to make life choices\":\"Freedom\",\n                     \"Perceptions of corruption\":\"Corruption\"}, inplace=True)\ndf18[\"Year\"]=2018\n#df18","a9e09383":"df19.drop([\"Overall rank\",\"GDP per capita\",\"Social support\"],axis=1,inplace=True)\n\ndf19.rename(columns={\"Country or region\":\"Country\",\n                     \"Healthy life expectancy\":\"Health\",\n                     \"Freedom to make life choices\":\"Freedom\",\n                     \"Perceptions of corruption\":\"Corruption\"}, inplace=True)\ndf19[\"Year\"]=2019\ndf19","d2597c32":"df = pd.concat([df15,df16,df17,df18, df19],ignore_index=True, sort=False)\ndf","44c476a8":"df.isna().sum() # concat yap\u0131ld\u0131ktan sonra region s\u00fctununda 467 nan de\u011fer var. \u00f6nce bunu halletmemiz laz\u0131m.","dbf6c808":"df1516 = pd.concat([df15,df16])\nregions = list(df1516[\"Region\"])\ncountries = list(df1516[\"Country\"])\n\n# 2015 ve 2016 tablolar\u0131nda \u00fclkelerin b\u00f6lgeleri yer ald\u0131\u011f\u0131 i\u00e7in bu iki tabloyu birle\u015fitrdik ve \n# olu\u015fan tabloda yer alan b\u00fct\u00fcn ulkeleri ve bolgeleri iki ayr\u0131 de\u011fi\u015fkene atad\u0131k.\n\nco_re=[[str(regions[i]),str(countries[i])] for i in range(len(regions))]\n\n# Yukar\u0131daki iki listeden faydalanarak (\u00fclke, b\u00f6lge) \u015feklinde iki elemanl\u0131 alt k\u00fcmeler olu\u015fturduk, \u00fclkeleri b\u00f6lgeleri ile e\u015fle\u015ftirmi\u015f olduk.\n\nfor i in range(len(df)):   \n    if str(df.loc[i,\"Region\"]) == str(np.nan): \n        country = str(df.loc[i,\"Country\"])\n\n# concat etti\u011fimiz (5 tablodan olu\u015fan) df tablosunun sat\u0131r say\u0131s\u0131 kadar d\u00f6ng\u00fc kurduk.         \n# e\u011fer gezilen sat\u0131r\u0131n b\u00f6lge s\u00fctunu nan ise; (not: str'ye \u00e7evirmeden ba\u015far\u0131l\u0131 olamad\u0131m.)   \n# o sat\u0131rda yer alan \u00fclke ad\u0131n\u0131 bir de\u011fi\u015fkene atad\u0131k.        \n        \n        for j in co_re:\n            if j[1] == country:\n                region = j[0]               \n                df.loc[i,\"Region\"] = region\n        \n# daha sonra ulke ve b\u00f6lge adlar\u0131ndan olu\u015ftrdu\u011fumuz liste i\u00e7in d\u00f6ng\u00fc kurduk.\n# yukar\u0131da elde etti\u011fimiz \u00fclke de\u011fi\u015fkeni hangi b\u00f6lge ile e\u015fle\u015fiyorsa, \u00f6rne\u011fin; (Switzerland, Western Europe) gibi,\n# e\u015fle\u015fen de\u011feri, df tablosunda b\u00f6lge ismi olarak nan de\u011fere atad\u0131k.\n\ndf\n\n#bu i\u015flemi \"merge\" ile denedim ancak ba\u015far\u0131l\u0131 olamad\u0131m. bu konuda yard\u0131m\u0131n\u0131z\u0131 bekliyorum.","90672f63":"df[\"Region\"].isna().sum() # Region s\u00fctununda ka\u00e7 tane nan de\u011feri oldu\u011funu verir.","99820519":"zoneless = pd.isnull(df[\"Region\"]) \ndf[zoneless]\n# Region s\u00fctunundaki nan de\u011ferlerini tablo olarak g\u00f6steriyoruz. ","e4e97b60":"empty_corruption = pd.isnull(df[\"Corruption\"])\ndf[empty_corruption]","b791794f":"df.isna().sum() # t\u00fcm s\u00fctunlardaki toplam nan de\u011ferlerini sayd\u0131r\u0131yoruz.","7fe830ef":"df[\"Region\"].fillna(\"Unspecified\", inplace=True) \n# region s\u00fctunundaki nan de\u011ferlere yeni bir isim girdik.\n# bu \u00fclkeler ara\u015ft\u0131r\u0131l\u0131p hangi b\u00f6lgede ise manuel olarak tek tek yaz\u0131labilir ama yeti\u015ftiremedim. ba\u015fka yolu var m\u0131 bilmiyorum.","19be719f":"df[\"Corruption\"].fillna(df[\"Corruption\"].mean(), inplace=True) \n# Corruption s\u00fctunundaki nan de\u011fere bu s\u00fctunun ortalamas\u0131n\u0131 girdik.","7d4ea1d0":"df.isna().sum() \n# tekrar sorgulad\u0131\u011f\u0131m\u0131zda tabloda nan de\u011fer kalmad\u0131\u011f\u0131n\u0131 teyit ediyoruz.","8156d406":"df_pv = df.pivot_table(index=[\"Region\",\"Country\",\"Year\"])\ndf_pv","76fdc6c4":"df_pv.loc[\"Western Europe\"] \n# pivot table \u0131n istedi\u011fimiz indexlerine ula\u015fabilme.\n# bu tablo bat\u0131 avrupadaki \u00fclkeleri ve y\u0131llara g\u00f6re de\u011fi\u015fkenlerini g\u00f6steriyor.","ac13203e":"df_pv.loc[\"Western Europe\",\"Netherlands\"] \n# bu tablo ile daha fazla \u00f6zelle\u015ftirme yap\u0131p sadece Hollanda'n\u0131n y\u0131llara g\u00f6re de\u011fi\u015fkenlerini g\u00f6rebiliyoruz.","77ca2469":"df.groupby(\"Region\").mean() \n# toplam ka\u00e7 b\u00f6lge var bu \u015fekkilde g\u00f6rebiliriz. ayn\u0131 zamanda b\u00f6lgelerin ortalamalar\u0131n\u0131 g\u00f6r\u00fcyoruz.","b691d8be":"len(df_pv.groupby(\"Region\"))-1    # B\u00f6lge say\u0131s\u0131n\u0131 buluyoruz.","44e5ac01":"print(f\"\"\"\nAustralia and New Zealand: {len(df[df[\"Region\"]==\"Australia and New Zealand\"].groupby(\"Country\"))} \nCentral and Eastern Europe: {len(df[df[\"Region\"]==\"Central and Eastern Europe\"].groupby(\"Country\"))}\nEastern Asia: {len(df[df[\"Region\"]==\"Eastern Asia\"].groupby(\"Country\"))}\nLatin America and Caribbean: {len(df[df[\"Region\"]==\"Latin America and Caribbean\"].groupby(\"Country\"))}\nMiddle East and Northern Africa: {len(df[df[\"Region\"]==\"Middle East and Northern Africa\"].groupby(\"Country\"))}\nNorth America: {len(df[df[\"Region\"]==\"North America\"].groupby(\"Country\"))}\nSoutheastern Asia: {len(df[df[\"Region\"]==\"Southeastern Asia\"].groupby(\"Country\"))}\nSouthern Asia: {len(df[df[\"Region\"]==\"Southern Asia\"].groupby(\"Country\"))}\nSub-Saharan Africa: {len(df[df[\"Region\"]==\"Sub-Saharan Africa\"].groupby(\"Country\"))}\nWestern Europe: {len(df[df[\"Region\"]==\"Western Europe\"].groupby(\"Country\"))}\n\"\"\")","f60f61dd":"# df.pivot_table(index=[\"Country\"]) \n\n# df.groupby(\"Country\").mean()\n\n# bu iki y\u00f6ntem de tabloyu \u00fclkelere g\u00f6re grupluyor ve ortalamalar\u0131n\u0131 veriyor.","05d8e83a":"df.groupby(\"Country\").mean()","f05d7766":"df.info()","133fa0c7":"df.describe().T","d03d215f":"df[\"Health\"].corr(df[\"Score\"]), df[\"Freedom\"].corr(df[\"Score\"]),df[\"Corruption\"].corr(df[\"Score\"]), df[\"Generosity\"].corr(df[\"Score\"])","0c57eeb5":"first_three = df.sort_values(by=\"Score\").tail(3)\nlast_three = df.sort_values(by=\"Score\").head(3)\n\nmiddle = df.sort_values(by=\"Score\")[int(len(df)\/2)-1 : int(len(df)\/2)+2]\n\n# tablonun ortas\u0131ndan \u00fc\u00e7 tane eleman se\u00e7menin \u015f\u0131k bir yolu var m\u0131?\n# middle i\u00e7in ba\u015fka y\u00f6ntem: df[(df[\"Score\"] <= df[\"Score\"].mean()+0.01) & (df[\"Score\"] >= df[\"Score\"].mean()-0.01)]\n\npd.concat([first_three, middle, last_three]).sort_values(by=\"Score\", ascending=False)","b4727c30":"df[\"Score\"].mean() # t\u00fcm \u00fclkeler 5 y\u0131l\u0131n mutluluk ortalamas\u0131","cd385b70":"df.iloc[:,:-1].groupby(\"Country\").mean().sort_values(by=\"Score\").head(3) \n\n# 5 y\u0131l\u0131n ortalamas\u0131nda en mutsuz \u00fc\u00e7 \u00fclke.\n# ayr\u0131ca df.iloc[:,:-1] diyerek son s\u00fctunda yer alan \"year\" de\u011fi\u015fkenini g\u00f6stermeyebiliriz.","909cb109":"df.iloc[:,:-1].groupby(\"Country\").mean().sort_values(by=\"Score\").tail(3) # 5 y\u0131l\u0131n ortalamas\u0131nda en mutlu \u00fc\u00e7 \u00fclke.","115f2a32":"df.iloc[:,:-1].groupby(\"Country\")[\"Score\"].mean().sort_values().tail(3) \n\n# yukar\u0131daki ile ayn\u0131 sorguyu bu \u015fekilde yaparsam tablo olarak vermiyor. Fark\u0131 g\u00f6rmek i\u00e7in koydum.","ea85338c":"df.iloc[:,:-1].groupby(\"Country\").mean().sort_values(by=\"Health\").head(3) # 5 y\u0131l\u0131n ortalamas\u0131nda en sa\u011fl\u0131ks\u0131z \u00fc\u00e7 \u00fclke.","293fb9cc":"df.iloc[:,:-1].groupby(\"Country\").mean().sort_values(by=\"Health\").tail(3) # 5 y\u0131l\u0131n ortalamas\u0131nda en sa\u011fl\u0131kl\u0131 \u00fc\u00e7 \u00fclke.","5602e6cc":"df.iloc[:,:-1].groupby(\"Country\").mean().sort_values(by=\"Corruption\").head(3) # 5 y\u0131l\u0131n ortalamas\u0131nda yolsuzlukta en k\u00f6t\u00fc \u00fc\u00e7 \u00fclke","4a5442f6":"df.groupby(\"Region\")[\"Freedom\"].mean() # 5 y\u0131l\u0131n b\u00f6lgelere g\u00f6re \u00f6zg\u00fcrl\u00fck ortalamalar\u0131.","8731de54":"df.iloc[:,:-1].groupby(\"Region\").mean().sort_values(by=\"Freedom\").tail(1) # en \u00f6zg\u00fcr b\u00f6lge.","88d62c81":"df.iloc[:,:-1].groupby(\"Region\").mean().sort_values(by=\"Freedom\").head(1) # en \u00f6zg\u00fcr olmayan b\u00f6lge.","1e4ec102":"# Her tablo i\u00e7in istemedi\u011fimiz de\u011fi\u015fkenleri silme ve de\u011fi\u015fkenleri yeniden adland\u0131rma:","d06b7cef":"# Tabloyu \u00fclkelere g\u00f6re grupland\u0131rma:","5f07216f":"# 5 tabloyu birle\u015ftirme:","e7330ec1":"Korelasyon katsay\u0131lar\u0131 sorguland\u0131\u011f\u0131nda tablomuzda mutluluk puan\u0131n\u0131 en fazla etkileyen degiskenin sa\u011fl\u0131k oldu\u011fu s\u00f6ylenebilir. \nA\u015fa\u011f\u0131da da bu durumu g\u00f6zle g\u00f6rebilmek i\u00e7in puan\u0131 en d\u00fc\u015f\u00fck olan 3 \u00fclke, ortalama olan \u00fc\u00e7 \u00fclke ve en y\u00fcksek olan 3 \u00fclke tabloda g\u00f6sterilmi\u015ftir. Tablo incelendi\u011finde hangi de\u011fi\u015fkenlerin mutluluk puan\u0131n\u0131 (score) en \u00e7ok etkiledi\u011fi g\u00f6r\u00fclebilmektedir. ","7cea6181":"# Her b\u00f6lgede ka\u00e7 \u00fclke var hesaplama:","e96f1350":"# Toplam ka\u00e7 b\u00f6lge oldu\u011funu sorgulama:","a55b92f3":"# Tablolara genel bak\u0131\u015f:","257f06cc":"# De\u011fi\u015fkenlere g\u00f6re min,max ve mean de\u011ferleri bulma ve s\u0131ralama:","d75d1be9":"# NaN de\u011ferleri sorgulama ve doldurma:","84302b00":"# Tablonun \u00f6zet bilgilerini sorgulama:","59686ea6":"# Korelasyon hesaplama:\n\nBasit (\u0130kili) Korelasyon: Bir bireye ait iki \u00f6l\u00e7\u00fcm oldu\u011funda bu iki de\u011fi\u015fken aras\u0131ndaki ili\u015fkiyi belirler. Korelasyon analizi sonucunda, do\u011frusal ili\u015fki olup olmad\u0131\u011f\u0131 ve varsa bu ili\u015fkinin derecesi korelasyon katsay\u0131s\u0131 ile hesaplan\u0131r.\n\nKorelasyon katsay\u0131s\u0131 \u201cr\u201d ile g\u00f6sterilir ve -1 ile +1 aras\u0131nda de\u011ferler al\u0131r\n\n* r= -1 ise tam negatif do\u011frusal bir ili\u015fki vard\u0131r.\n* r= +1 ise tam pozitif do\u011frusal bir ili\u015fki vard\u0131r.\n* r= 0 ise iki de\u011fi\u015fken aras\u0131nda ili\u015fki yoktur.\n\nBu ba\u011flamda r= \u0130li\u015fki i\u00e7in \u00e7\u0131kan sonu\u00e7lar a\u015fa\u011f\u0131daki aral\u0131klara g\u00f6re \u015fu \u015fekilde yorumlan\u0131r:\n\n* 0.00 ili\u015fki yok\n* 0.01 \u2013 0.29 d\u00fc\u015f\u00fck d\u00fczeyde ili\u015fki\n* 0.30 \u2013 0.70 orta d\u00fczeyde ili\u015fki\n* 0.71 \u2013 0.99 y\u00fcksek d\u00fczeyde ili\u015fki\n* 1.00 m\u00fckemmel ili\u015fki","9667d2e0":"# Tablolar\u0131n sat\u0131r s\u00fctun bilgisini ve kolon adlar\u0131n\u0131 sorgulama:","2d78141a":"# Pivot table olu\u015fturma:"}}