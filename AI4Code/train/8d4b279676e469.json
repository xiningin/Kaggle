{"cell_type":{"e30ae36c":"code","4ba4559b":"code","7396449d":"code","8f9eb6f5":"code","9bfaa883":"code","761527bd":"code","b60ae450":"code","1a812596":"code","b05cb3f5":"code","5620c4c2":"code","6ecd2920":"code","b423144f":"code","0dca7e98":"code","86ee5b80":"code","fb37015a":"code","d50db456":"code","f9cf5cc4":"code","042bfcbc":"code","93f41555":"code","d6e2b707":"code","c3b68b5a":"code","4777b53f":"code","b30d618c":"code","6137015d":"markdown","bfcf1b37":"markdown","be74faad":"markdown","390dc9c1":"markdown","36a32922":"markdown","1d406ce9":"markdown","bd07574e":"markdown","346394aa":"markdown","b2dca33f":"markdown","8e61047d":"markdown","db6ee994":"markdown","79e41235":"markdown","dfbc24dc":"markdown","18fcac39":"markdown","b51bf627":"markdown","5cf9475f":"markdown","bf492a0c":"markdown","ac5f885d":"markdown","55960f55":"markdown","df5d0736":"markdown","d9df4fa3":"markdown"},"source":{"e30ae36c":"# Required imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math","4ba4559b":"def countplots(cols, data, width_factor=1, height_factor=1):\n    '''Barplots of counts for disc_numeric and cat features\n    automatic sizing and number of rows\/columns'''\n    #define number of rows and columns based on length of feature list\n    ncols = min(math.ceil(len(cols)**0.5),4)\n    nrows = math.ceil(len(cols)\/ncols)\n    #create plots looping through the feature list\n    fig, axs = plt.subplots(nrows,ncols,figsize=(ncols*4*width_factor, nrows*4))\n    for ax, feature in zip(axs.flatten(), cols):\n        sns.countplot(x=feature,data=data, ax=ax)\n        #set title and x-axis label rotation (here would be the place to add further axes methods)\n        ax.set_title(feature)\n        ax.tick_params(axis='x',labelrotation=45)\n    #remove unused axs    \n    unused_axs = (nrows*ncols)-len(cols)\n    for unused_axs in range(unused_axs):\n        axs[nrows-1, -1-unused_axs].remove()\n    #snug fit!  \n    fig.tight_layout(pad=1.5)","7396449d":"def countplots_by_target(cols, data, target, width_factor=1, height_factor=1):\n    '''Barplots of counts of target variable for discrete\n    numeric and categorical features'''\n    #define number of rows and columns based on length of feature list\n    ncols = min(math.ceil(len(cols)**0.5),4)\n    nrows = math.ceil(len(cols)\/ncols)\n    #create plots looping through the feature list\n    fig, axs = plt.subplots(nrows,ncols,figsize=(ncols*4*width_factor, nrows*4))\n    for ax, feature in zip(axs.flatten(), cols):\n        sns.countplot(x=feature,data=data, hue=target, ax=ax)\n        #set title and x-axis label rotation (here would be the place to add further axes methods)\n        ax.set_title(feature)\n        ax.tick_params(axis='x',labelrotation=45)\n    #remove unused axs    \n    unused_axs = (nrows*ncols)-len(cols)\n    for unused_axs in range(unused_axs):\n        axs[nrows-1, -1-unused_axs].remove()\n    #snug fit!  \n    fig.tight_layout(pad=1.5)","8f9eb6f5":"def barplots(cols, data, width_factor=1, height_factor=1):\n    '''Barplots of counts for discrete numerical and categorical features'''\n    #define number of rows and columns based on length of feature list\n    ncols = min(math.ceil(len(cols)**0.5),4)\n    nrows = math.ceil(len(cols)\/ncols)\n    #create plots looping through the feature list\n    fig, axs = plt.subplots(nrows,ncols,figsize=(ncols*4*width_factor, nrows*4))\n    for ax, feature in zip(axs.flatten(), cols):\n        sns.barplot(x=data.groupby([feature])[feature].count().index,y=data.groupby([feature])[feature].count(), ax=ax)\n        #set title and x-axis label rotation (here would be the place to add further axes methods)\n        ax.set_title(feature)\n        ax.tick_params(axis='x',labelrotation=45)\n    #remove unused axs    \n    unused_axs = (nrows*ncols)-len(cols)\n    for unused_axs in range(unused_axs):\n        axs[nrows-1, -1-unused_axs].remove()\n    #snug fit!  \n    fig.tight_layout(pad=1.5)","9bfaa883":"def distplots(cols, data,kde=False, width_factor=1, height_factor=1):\n    '''Distribution plots for continuous numeric features'''\n    # Define number of rows and columns based on length of feature list\n    ncols = min(math.ceil(len(cols)**0.5),4)\n    nrows = math.ceil(len(cols)\/ncols)\n\n    # if statement to deal with case of single figure \n    if len(cols) == 1:\n        plt.figure(figsize=(6*width_factor,4*height_factor))\n        plt.title(cols[0])\n        sns.distplot(data[cols], kde=kde)\n        \n    # else for multi-plots loop through feature list \n    else:\n        fig, axs = plt.subplots(nrows,ncols,figsize=(ncols*4*width_factor, nrows*4))\n        for ax, feature in zip(axs.flatten(), cols):\n            sns.distplot(data[feature], kde=kde, ax=ax)\n            ax.set_title(feature)\n            \n        # Remove any unused axs    \n        unused_axs = (nrows*ncols)-len(cols)\n        for unused_axs in range(unused_axs):\n            axs[nrows-1, -1-unused_axs].remove()\n        # Create a snug fit!  \n        fig.tight_layout(pad=1.5)","761527bd":"def barplots_mean_target(cols, data, target, width_factor=1, height_factor=1):\n    '''Barplots of mean target values across discrete numeric and categorical features\n    automatic sizing and number of rows\/columns'''\n    #define number of rows and columns based on length of feature list\n    ncols = min(math.ceil(len(cols)**0.5),4)\n    nrows = math.ceil(len(cols)\/ncols)\n    #create plots looping through the feature list\n    fig, axs = plt.subplots(nrows,ncols,figsize=(ncols*4*width_factor, nrows*4))\n    for ax, feature in zip(axs.flatten(), cols):\n        sns.barplot(x=data.groupby([feature])[feature].count().index,y=data.groupby([feature])[target].mean(), ax=ax)\n        #set title, x-axis label rotation, and y-axis title\n        ax.set_title(feature)\n        ax.tick_params(axis='x',labelrotation=45)\n        ax.set_ylabel('Mean '+target)\n    #remove unused axs    \n    unused_axs = (nrows*ncols)-len(cols)\n    for unused_axs in range(unused_axs):\n        axs[nrows-1, -1-unused_axs].remove()\n    #snug fit!  \n    fig.tight_layout(pad=1.5)","b60ae450":"def scatterplots(cols, data, target, width_factor=1, height_factor=1):\n    '''Scatterplots of numerical features versus target feature'''\n    #define number of rows and columns based on length of feature list\n    ncols = min(math.ceil(len(cols)**0.5),4)\n    nrows = math.ceil(len(cols)\/ncols)\n    #create plots looping through the feature list\n    fig, axs = plt.subplots(nrows,ncols, sharey=True, figsize=(ncols*4*width_factor, nrows*4))\n    for ax, feature in zip(axs.flatten(), cols):\n        sns.scatterplot(x=data[feature],y=data[target], ax=ax)\n        #set title, x-axis label rotation, and y-axis title\n        ax.set_title(feature)\n        ax.tick_params(axis='x',labelrotation=45)\n        ax.set_ylabel(target)\n    #remove unused axs    \n    unused_axs = (nrows*ncols)-len(cols)\n    for unused_axs in range(unused_axs):\n        axs[nrows-1, -1-unused_axs].remove()\n    #snug fit!  \n    fig.tight_layout(pad=1.5)","1a812596":"#Load 'Titanic: Learning from Disaster' Dataset\ntrain_data_path = '..\/input\/titanic\/train.csv'\nTITANIC_DATA = pd.read_csv(train_data_path, index_col='PassengerId')\n\n#Create new Categorical Feature 'Deck' from stripping the numbers from the cabin \nTITANIC_DATA['Deck'] = TITANIC_DATA['Cabin'].fillna('N').map(lambda c : c.rstrip('0123456789')[-1] if 'N' not in c else float('nan'))","b05cb3f5":"def create_feature_lists(data):\n    '''Create lists of all_numeric, continuous_numeric (>25 unique values), discrete_numeric, \n    and categorical features excluding high-cardinality features < 13'''\n    NUM_FEAT = [feature for feature in data.columns if data[feature].dtype == 'int64' or data[feature].dtype == 'float64']\n    CONT_FEAT = [feature for feature in NUM_FEAT if len(data[feature].unique()) > 25]\n    DISC_FEAT = [feature for feature in NUM_FEAT if len(data[feature].unique()) < 25]\n    CAT_FEAT = [feature for feature in data.columns if data[feature].dtype == 'object' and len(data[feature].unique()) < 13\n               or data[feature].dtype == 'bool']\n    \n    return NUM_FEAT, CONT_FEAT, DISC_FEAT, CAT_FEAT\n\n\n#Run Create Feature List Function\nTT_NUM_FEAT, TT_CONT_FEAT, TT_DISC_FEAT, TT_CAT_FEAT = create_feature_lists(TITANIC_DATA)","5620c4c2":"distplots(TT_CONT_FEAT, TITANIC_DATA, kde=True)\n#Save figure as png for Markdown box at the top of the page\nplt.savefig('Sample.png')","6ecd2920":"distplots(['Age'], TITANIC_DATA, kde=True)","b423144f":"countplots(TT_CAT_FEAT, TITANIC_DATA)","0dca7e98":"countplots_by_target(TT_CAT_FEAT, TITANIC_DATA,'Survived')","86ee5b80":"countplots_by_target(TT_DISC_FEAT, TITANIC_DATA, 'Survived')","fb37015a":"countplots_by_target(TT_DISC_FEAT, TITANIC_DATA, 'Pclass')","d50db456":"#Import Data\n\n#Load 'Iowa House Price Prediction Competition' Dataset\nhouse_prices_data_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv'\nHOUSE_PRICE_DATA = pd.read_csv(house_prices_data_path, index_col='Id')","f9cf5cc4":"#create feature name lists\nHP_NUM_FEAT, HP_CONT_FEAT, HP_DISC_FEAT, HP_CAT_FEAT = create_feature_lists(HOUSE_PRICE_DATA)\n","042bfcbc":"#countplots for categorical data\ncountplots(HP_CAT_FEAT, HOUSE_PRICE_DATA, width_factor=1, height_factor=1)","93f41555":"#countplots for discrete numerical data\ncountplots(HP_DISC_FEAT, HOUSE_PRICE_DATA, width_factor=1, height_factor=1)","d6e2b707":"#Note: No argument given for kde, thus it defaults to False. Seaborn kde is sometimes problematic when plotting lots of unprocessed features\ndistplots(HP_CONT_FEAT, HOUSE_PRICE_DATA)","c3b68b5a":"#Scatter plots for continuous numerical features\nscatterplots(HP_CONT_FEAT, HOUSE_PRICE_DATA, 'SalePrice', width_factor=1, height_factor=1)","4777b53f":"#barplots_mean_target for plotting mean target values across categorical variables\nbarplots_mean_target(HP_CAT_FEAT, HOUSE_PRICE_DATA, 'SalePrice', width_factor=1, height_factor=1)","b30d618c":"#Define figure and axes\nfig, axs = plt.subplots(2,2,figsize=(9, 9))\n\nprint('''\\nVisualisation of Zip object created using numpy.flatten() function:''')\n\n# Zip up axs.flatten() and feature list to create iterable for assigning data to subplots\n[(ax,feature) for (ax,feature) in zip(axs.flatten(), TT_DISC_FEAT)]","6137015d":"<a id=\"sec3.5\"><\/a>\n# 'barplots_mean_target'","bfcf1b37":"# Contents\n1. [Acknowledgements](#sec1)\n2. [Imports](#sec2)   \n3. [PLOTTING FUNCTIONS](#sec3)  \n4. [Testing with Titanic Dataset](#sec4)\n5. [Testing with Iowa House Prices Dataset](#sec5)\n5. [Bonus Round - Flatten and Zip Functions](#sec6)\n\n","be74faad":"<a id=\"sec3.2\"><\/a>\n# 'countplots_by_target'","390dc9c1":"<a id=\"sec3.3\"><\/a>\n# 'barplots'","36a32922":"<a id=\"sec4.3\"><\/a>\n# Distplots Function Test","1d406ce9":"<a id=\"sec1\"><\/a>\n# Acknowledgements\nBefore we start I have to say this [article](https:\/\/medium.com\/@rayheberer\/generating-matplotlib-subplots-programmatically-cc234629b648) by Ray Herberer on Medium.com was very useful, in particular for showing me the numpy flatten function. For more explanation and a visualisation of how this and zip functions are used check out the [Bonus Round](#Bonus+Round+-+Flatten+and+Zip+Functions) at the end of the Notebook!\n\nI also need to reference a [notebook](https:\/\/www.kaggle.com\/angqx95\/data-science-workflow-top-2-with-tuning) from Kaggle user '[apx](https:\/\/www.kaggle.com\/angqx95\/data-science-workflow-top-2-with-tuning)', just because I found it so useful in so many ways - check it out and spread the love with the upvotes. Any plagiarism for this notebook is probably sub-conscious as I have chosen to use pyplot.subplots as opposed to pyplot.subplot (subtle differences!) that I saw 'apx' using. If you want to know something of these differences then best to try out both, but this [article](https:\/\/towardsdatascience.com\/plt-subplot-or-plt-subplots-understanding-state-based-vs-object-oriented-programming-in-pyplot-4ba0c7283f5d) has a picture of Ouroboros so you know it must be good...","bd07574e":"<a id=\"sec4.7\"><\/a>\n# Countplots-by-Target Function (Discrete Numerical Data)","346394aa":"<a id=\"sec3\"><\/a>\n# Plotting Functions\n\nThis section has the code for the plotting functions themselves.  There is so much you can do with the [matplotlib.axes](https:\/\/matplotlib.org\/3.3.2\/api\/axes_api.html) class - but I've kept it simple and just used a set_title using the feature name. There are also many other useful plots but for me this was a fun experiment to write a nice notebook to share rather than an exhaustive library. If anyone uses these as a base for their own work then I'd love to see what plots\/styles\/features you can adapt them for!    \n\n**List of Functions:**\n\n1. [countplots](#sec3.1): returns column barcharts for discrete numerical and categorical features  \n2. [countplots_by_target](#sec3.2): same as countplots but splits counts for specified 'Target'. Works best for classification problems like the Titanic competition  \n3. [barplots](#sec3.3): does what it says on the tin - again for discrete numerical and categorical features  \n4. [distplots](#sec3.4): distribution plots (histograms) for continuous numerical features  \n5. [barplots_mean_target](#sec3.5): plot the mean target values across categorical values (for numerical targets only, such as Iowa House Prices Competition)  \n6. [scatterplots](#sec3.6): scatter plots for numerical features vs target feature\n\n**Inputs Required:**\n* **cols** - List of features (column headings) from dataframe that you would like to plot\n* **data** - Pandas Dataframe containing data that you would like to plot\n* **width factor & height factor** - Default value=1. Functions are set-up to automatically size the figures according to number of subplots to ensure consistency but you can tweak the aspect ratio by changing these factors if you please\n\n**Additional Input for 'countplots_by_target' and 'barplots_mean_target' functions:**\n\n* **target** - String of target column name to set the the 'hue' in countplots. This gives you the counts split by a given feature, such as 'Survived' in the Titanic dataset shown below. Can choose any categorical or discrete numerical feature of interest but choosing the Target on a classification problem is a good place to start.\n\n**Additional Input for 'distplots' function:**\n\n* **kde** - default value=False. I find problems plotting kde for large lists of unscaled features (if anybody knows exactly why let me know!). Sometimes can be useful to plot the kde, so it's up to you!\n","b2dca33f":"<a id=\"sec6\"><\/a>\n# Bonus Round - Flatten and Zip Functions\n\nBelow is a visualisation of the [zip](https:\/\/docs.python.org\/3.3\/library\/functions.html) and [flatten](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.ndarray.flatten.html) functions used in the plotting functions above. \n\nFirstly axs.flatten() collapses the axs array created by subplots into a 1-d array (from (2,2) array to (4,1) array in the example below). Python zip() function then groups each feature that you want to plot with an specific subplot in a zip object, which can then be iterated through to produce the intended multi-plot figure. Simples!\n\nI like to do this type of visualisation of objects when learning about new functions or solving tricky problems. I find it a really useful way of making sense of what I (or somebody else in the case of shameless plagiarism!) is doing, breaking it down step by step.","8e61047d":"<a id=\"sec2\"><\/a>\n# Imports","db6ee994":"<a id=\"sec4.4\"><\/a>\n# Distplots Function with Single Feature Input","79e41235":"<a id=\"sec3.4\"><\/a>\n# 'distplots'","dfbc24dc":"<a id=\"sec4.8\"><\/a>\n# Countplots by Target Function (Using Alternative Feature)","18fcac39":"<a id=\"sec4.5\"><\/a>\n# Countplots Function (with Categorical Data)","b51bf627":"<a id=\"sec4\"><\/a>\n# Testing with Titanic Dataset\n\nNow we need a dataset to test the functions on and the Titanic dataset is a pretty good place to start as it's familiar to most and doesn't require much cleaning before we can get out some meaningful plots.","5cf9475f":"<a id=\"sec3.1\"><\/a>\n# 'countplots'","bf492a0c":"<a id=\"sec5\"><\/a>\n# Testing With Iowa House Prices Dataset","ac5f885d":"<a id=\"sec4.2\"><\/a>\n# 'Create Feature Lists' Function\nHere we need a quick function to create the different feature lists for input into the plotting functions - based on some simple rules to define discrete-numeric, continuous-numeric, and categorical features (with cardinality low pass filter).\n\nBy no means is this fool-proof! Most datasets will need a bit more work than this one and there is no substitute for reading any supporting docs with the dataset or some amateur sleuthing in-lieu of high-quality feature info!","55960f55":"<a id=\"sec3.6\"><\/a>\n# 'scatterplots'","df5d0736":"<a id=\"sec4.6\"><\/a>\n# Countplots-by-Target Function (Categorical Data)","d9df4fa3":"\n# Functions for Automated Seaborn Plots\n![](.\/Sample.png)\n\n**Greetings Entrepid Data Scientists!!** \n\nIt's likely you've taken a wrong turn in the multi-verse - but on the off chance you're looking for functions to automatically create extremely generic Seaborn plots for data science projects (or you're just looking for a great night in) - **then you've come to the right place!**\n\nI'm a bit of a novice (I'm an aerodynamicist by trade) and somewhat bashful about making my work public, but with this one I figured what-the-hey, maybe someone will find it useful and\/or informative - like all the shared notebooks that have helped me so much!\n\nAnyway, if I get any upvotes I'll be over the moon!! But any feedback is most welcome!!"}}