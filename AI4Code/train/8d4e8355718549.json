{"cell_type":{"fab87902":"code","93e0322c":"code","770b309d":"code","4087ec93":"code","3aa05a98":"code","ea386be3":"code","397208da":"code","7e1158fd":"code","8e1631fd":"code","8d85e88d":"code","b587fa48":"code","33b5fe1b":"code","c64d3145":"markdown","72fb5766":"markdown","98df38ec":"markdown","adae607c":"markdown"},"source":{"fab87902":"import numpy as np\nimport matplotlib.pyplot as plt","93e0322c":"# odd = black\n# even = white\ncolors = {\n    'black': (0,0,0),\n    'white': (1,1,1),\n    'blue': (0,1,1),\n    'red' : (1,.2,0),\n    'green': (0,1,0)\n}\n","770b309d":"class ChessBoard:\n    def __init__(self):\n        self.board = self.create_board()\n        self.blue = ()\n        self.red = ()\n    \n    def create_board(self):\n        board = np.ones((8,8,3))\n        board[:] = colors['black']\n        self.board = board\n        for i in range(8):\n            c = 0\n            if i % 2 == 1:\n                while c < 8:\n                    self.paint_square(i,c,colors['white'])\n                    c += 2\n            else:\n                while c < 8:\n                    self.paint_square(i,c-1,colors['white'])\n                    c += 2\n        return board\n        \n    def paint_square(self,r,c, color):\n        self.board[r][c] = color\n      \n    def add_red(self, row, col):\n        self.board[row][col] = colors['red']\n        self.red = (row,col)\n    \n    def add_blue(self, row, col):\n        self.board[row][col] = colors['blue']\n        self.blue = (row, col)\n    \n    def render(self):\n        plt.imshow(self.board)\n        \n    def is_under_attack(self, color):\n        is_under_attack = False\n        loc = self.red if color == 'red' else self.blue\n        print(f'The {color} queen is at {loc}')\n        \n        if self.red[0] == self.blue[0]:\n            self.paint_rank()\n            is_under_attack = True\n        if self.red[1] == self.blue[1]:\n            self.paint_file()\n            is_under_attack = True\n        if is_under_attack:\n            print('The queen is under attack!')\n        if self.blue in self.diagonal_attack():\n            print('Queens on Diagonal')\n            \n            for i in self.diagonal_attack():\n                self.paint_square(i[0],i[1], colors['green'])\n                self.add_red(self.red[0], self.red[1])\n                self.add_blue(self.blue[0], self.blue[1])\n            is_under_attack = True\n            \n        return is_under_attack\n    \n    def paint_rank(self):\n        rank = self.red[0]\n        for i in range(8):\n            self.paint_square(rank, i, colors['green'])\n        \n        self.add_red(self.red[0], self.red[1])\n        self.add_blue(self.blue[0], self.blue[1])\n            \n    def paint_file(self):\n        file = self.red[1]\n        for i in range(8):\n            self.paint_square(i, file, colors['green'])\n        \n        self.add_red(self.red[0], self.red[1])\n        self.add_blue(self.blue[0], self.blue[1])\n    \n    def diagonal_attack(self):\n        diagonal = []\n        x1,y1 = x2,y2 = x3,y3 = x4,y4 = self.red\n        \n        # Down and right\n        while x1 <= 7 and y1 <= 7:\n            diagonal.append((x1, y1))\n            x1 += 1\n            y1 += 1\n\n       # Up and left\n        while y2 >= 0 and x2 >= 0:\n            diagonal.append((x2,y2))\n            x2 -= 1\n            y2 -= 1\n            \n        # Up and right\n        while x3 >= 0 and y3 <= 7:\n            diagonal.append((x3, y3))\n            x3 -=1\n            y3 += 1\n            \n        # Down and left\n        while x4 <= 7 and y4 >= 0:\n            diagonal.append((x4,y4))\n            x4 += 1\n            y4 -= 1\n\n        return diagonal","4087ec93":"# Add Queens to board\nc = ChessBoard()\nc.add_red(4,6)\nc.add_blue(3,3)\nc.is_under_attack('red')\n# c.render()","3aa05a98":"# SAME RANK ATTACK\nsame_rank = ChessBoard()\nsame_rank.add_red(0,0)\nsame_rank.add_blue(0,7)\nassert same_rank.is_under_attack('red') == True\n# same_rank.render()","ea386be3":"# SAME FILE ATTACK\nsame_file = ChessBoard()\nsame_file.add_red(0,4)\nsame_file.add_blue(7,4)\nsame_file.is_under_attack('red')\nassert same_file.is_under_attack('red') == True\n# same_file.render()","397208da":"# Diagonal Attack Top left\ndiagonal_attack_tl = ChessBoard()\ndiagonal_attack_tl.add_blue(0,0)\ndiagonal_attack_tl.add_red(4,4)\ndiagonal_attack_tl.is_under_attack('red')\n\nassert diagonal_attack_tl.is_under_attack('red') == True\n# diagonal_attack_tl.render()\n","7e1158fd":"# Diagonal Attack Top Rigth\ndiagonal_attack_tr = ChessBoard()\ndiagonal_attack_tr.add_blue(2,6)\ndiagonal_attack_tr.add_red(4,4)\ndiagonal_attack_tr.is_under_attack('red')\n\nassert diagonal_attack_tr.is_under_attack('red') == True\n# diagonal_attack_tr.render()","8e1631fd":"# Diagonal Bottom Left\ndiagonal_attack_bl = ChessBoard()\ndiagonal_attack_bl.add_blue(7,1)\ndiagonal_attack_bl.add_red(4,4)\ndiagonal_attack_bl.is_under_attack('red')\n\nassert diagonal_attack_bl.is_under_attack('red') == True\n# diagonal_attack_tr_bl.render()","8d85e88d":"# Diagonal Bottom Rigth\ndiagonal_attack_br = ChessBoard()\ndiagonal_attack_br.add_blue(4,6)\ndiagonal_attack_br.add_red(2,4)\ndiagonal_attack_br.is_under_attack('red')\n\nassert diagonal_attack_br.is_under_attack('red') == True\n# diagonal_attack_br.render()","b587fa48":"fig = plt.figure(figsize=(20,20))\nrows = 4\ncolumns = 3\n\nfig.add_subplot(rows, columns, 1)\na1 = c.render()\nplt.title('Two Queens')\n\nfig.add_subplot(rows, columns, 2)\na2 = same_file.render()\nplt.title('Queens on same File')\n\nfig.add_subplot(rows, columns, 3)\na3 = same_rank.render()\nplt.title('Queens on same Rank')\n\nfig.add_subplot(rows, columns, 4)\na1 = diagonal_attack_tr.render()\nplt.title('Enemy Above Right')\n\nfig.add_subplot(rows, columns, 5)\na2 = diagonal_attack_tl.render()\nplt.title('Enemy Above Left')\n\nfig.add_subplot(rows, columns, 6)\na3 = diagonal_attack_bl.render()\nplt.title('Enemy Below Left')\n\nfig.add_subplot(rows, columns, 7)\na3 = diagonal_attack_br.render()\nplt.title('Enemey Below Right')\n\nplt.show()","33b5fe1b":"# fig = plt.figure(figsize=(8,8))\n# rows = 2\n# columns = 2\n\n# fig.add_subplot(rows, columns, 1)\n# a1 = diagonal_attack_tr.render()\n# plt.title('Enemy Above Right')\n\n# fig.add_subplot(rows, columns, 2)\n# a2 = diagonal_attack_tl.render()\n# plt.title('Enemy Above Left')\n\n# fig.add_subplot(rows, columns, 3)\n# a3 = diagonal_attack_bl.render()\n# plt.title('Enemy Below Left')\n\n# fig.add_subplot(rows, columns, 4)\n# a3 = diagonal_attack_br.render()\n# plt.title('Enemey Below Right')\n\n# plt.show()","c64d3145":"# ATTACK TESTING","72fb5766":"## Queens on the same File","98df38ec":"## Diagonal Attack Testing\n\nScroll down for plot","adae607c":"## Queens on the same Rank"}}