{"cell_type":{"ef5f29d6":"code","c6de3d28":"code","4b1e2bba":"code","2707b3b3":"code","55b74aea":"code","77603caa":"code","3c191801":"code","57e07000":"code","51ebda04":"code","9f065df9":"code","9416df4e":"code","cf0456cd":"code","9ede8a78":"code","5caddf6c":"code","28ea3881":"code","5e709f76":"code","57ddf6b5":"code","8e28d841":"code","78738ad1":"code","b2c47016":"markdown","9884be18":"markdown","d3cae962":"markdown","737a3902":"markdown","8c1542e0":"markdown","559d85cd":"markdown","46064077":"markdown","c442aeb1":"markdown","33dc68f1":"markdown","32752543":"markdown","5518c2e4":"markdown","af7c9d46":"markdown","8a103f3d":"markdown","e7c45134":"markdown","b33fe794":"markdown","a41a375f":"markdown","eeb5de6a":"markdown","19874973":"markdown","be060d66":"markdown","28709686":"markdown","08cc682c":"markdown","d3570d43":"markdown","5acc076c":"markdown","348c3535":"markdown","6ab096a3":"markdown","7defd411":"markdown","a0802876":"markdown","f7263d5e":"markdown","ef01e7ea":"markdown","24ee211c":"markdown","6e2b4247":"markdown","41d73293":"markdown"},"source":{"ef5f29d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6de3d28":"import plotly.express as px\nimport plotly.graph_objects as go\nfrom warnings import filterwarnings\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nfilterwarnings('ignore')\n\ngen_colors = ['#4169E1','#B2182B','#81007F','#D1B2FF','#EFE4E2']\nJP_colors = ['#D90B0B','#F24444','#EFE4E2','#FCCE88','#64807F']\nCN_colors = ['#E0201B','#FFCE3F','#A63F03','#04BF33','#F2E6D8']\ncoun_years_colors = ['#FDB0C0','#FFDB81','#FD4659','#FFAB0F']\n\ncoun_years = ['2019_JP','2019_CN','2021_JP','2021_CN']\n\n\ndf19 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\ndf21 = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\n\ndf21.head()","4b1e2bba":"# define\ndef group(data, country, question_num):\n    return data[data['Q3'] == country][question_num].value_counts()\n\n\ndef go_Pie(country, label_value):\n    return go.Pie(title = country,\n                  labels = label_value.index,\n                  values = label_value.values,\n                  textinfo = 'label+percent',\n                  rotation=315,\n                  hole = .3,)\n\n# -----------------------------------------------------------\n\n# Q1\nJP_age_19 = group(df19,'Japan','Q1').sort_index()\n\nJP_age_21 = group(df21,'Japan','Q1').sort_index()\n\nCN_age_19 = group(df19,'China','Q1')\nCN_age_19.loc['55-59'] = 0\nCN_age_19.loc['60-69'] = 0\nCN_age_19 = CN_age_19.sort_index()\n\nCN_age_21 = group(df21,'China','Q1')\nCN_age_21.loc['60-69'] = 0\nCN_age_21 = CN_age_21.sort_index()\n\n# -----------------------------------------------------------\n\n# Q3\nJP_ndarray = df19[df19['Q3'] == 'Japan']['Q2'].values\nCN_ndarray = df19[df19['Q3'] == 'China']['Q2'].values\nJP_age_list = [] # 'Male'\uc744 'Man'\uc73c\ub85c \ubc14\uafd4\ub2f4\uc744 \ube48 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\nCN_age_list = []\n\nfor item in JP_ndarray:\n    if item == 'Male':\n        # \ubb38\uc790\uc5f4 \uce58\ud658\n        item_mod = item.replace('Male','Man')\n        # \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        JP_age_list.append(item_mod)\n    elif item == 'Female':\n        item_mod2 = item.replace('Female','Woman')\n        JP_age_list.append(item_mod2)\n    else :\n        JP_age_list.append(item)\n\nfor item in CN_ndarray:\n    if item == 'Male':\n        # \ubb38\uc790\uc5f4 \uce58\ud658\n        item_mod = item.replace('Male','Man')\n        # \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        CN_age_list.append(item_mod)\n    elif item == 'Female':\n        item_mod2 = item.replace('Female','Woman')\n        CN_age_list.append(item_mod2)\n    else :\n        CN_age_list.append(item)\n\nJP_age_series = pd.Series(JP_age_list)\nCN_age_series = pd.Series(CN_age_list)\n\n\nyears = ['2019', '2021']\nJP_country_count_19 = (df19[df19['Q3'] == 'Japan']['Q3']).count()\nCN_country_count_19 = (df19[df19['Q3'] == 'China']['Q3']).count()\nJP_country_count_21 = (df21[df21['Q3'] == 'Japan']['Q3']).count()\nCN_country_count_21 = (df21[df21['Q3'] == 'China']['Q3']).count()\n\nJP_country_count_19_21 = [JP_country_count_19, JP_country_count_21]\nCN_country_count_19_21 = [CN_country_count_19, CN_country_count_21]\n\n# -----------------------------------------------------------\n\n# Q14\ndf19_JP = df19[df19.Q3.isin(['Japan'])]\ndf19_CN = df19[df19.Q3.isin(['China'])]\ndf21_JP = df21[df21.Q3.isin(['Japan'])]\ndf21_CN = df21[df21.Q3.isin(['China'])]\ndf19_JP_Q14 = pd.DataFrame()\ndf19_CN_Q14 = pd.DataFrame()\ndf21_JP_Q14 = pd.DataFrame()\ndf21_CN_Q14 = pd.DataFrame()\ndf19_JP_Q14['Q20'] = [df19_JP[col][1:].value_counts().index[0] for col in df19_JP.columns[97:109]]\ndf19_CN_Q14['Q20'] = [df19_CN[col][1:].value_counts().index[0] for col in df19_CN.columns[97:109]]\ndf21_JP_Q14['Q14'] = [df21_JP[col][1:].value_counts().index[0] for col in df21_JP.columns[59:71]]\ndf21_CN_Q14['Q14'] = [df21_CN[col][1:].value_counts().index[0] for col in df21_CN.columns[59:71]]\ndf19_JP_Q14['counts'] = [df19_JP[col][1:].value_counts().values[0] for col in df19_JP.columns[97:109]]\ndf19_CN_Q14['counts'] = [df19_CN[col][1:].value_counts().values[0] for col in df19_CN.columns[97:109]]\ndf21_JP_Q14['counts'] = [df21_JP[col][1:].value_counts().values[0] for col in df21_JP.columns[59:71]]\ndf21_CN_Q14['counts'] = [df21_CN[col][1:].value_counts().values[0] for col in df21_CN.columns[59:71]]\n\n\ndf19_JP_Q14.index = [3,0,6,4,5,2,7,1,8,9,10,11]\ndf19_CN_Q14.index = [3,0,6,4,5,2,7,1,8,9,10,11]\ndf19_JP_Q14 = df19_JP_Q14.sort_index()\ndf19_CN_Q14 = df19_CN_Q14.sort_index()\ndf21_JP_Q14['Q14'].index = [0,1,2,3,4,5,6,7,8,9,10,11]\ndf21_CN_Q14['Q14'].index = [0,1,2,3,4,5,6,7,8,9,10,11]\ndf19_JP_Q14.replace(regex = 'D3.js', value = 'D3 js', inplace = True)\ndf19_CN_Q14.replace(regex = 'D3.js', value = 'D3 js', inplace = True)\n\n# Q16\ndf19_JP_Q16 = pd.DataFrame()\ndf19_CN_Q16 = pd.DataFrame()\ndf21_JP_Q16 = pd.DataFrame()\ndf21_CN_Q16 = pd.DataFrame()\ndf19_JP_Q16['Q28'] = [df19_JP[col][1:].value_counts().index[0] for col in df19_JP.columns[155:166]]\ndf19_CN_Q16['Q28'] = [df19_CN[col][1:].value_counts().index[0] for col in df19_CN.columns[155:166]]\ndf21_JP_Q16['Q16'] = [df21_JP[col][1:].value_counts().index[0] for col in df21_JP.columns[72:89]]\ndf21_CN_Q16['Q16'] = [df21_CN[col][1:].value_counts().index[0] for col in df21_CN.columns[72:89]]\ndf19_JP_Q16['counts'] = [df19_JP[col][1:].value_counts().values[0] for col in df19_JP.columns[155:166]]\ndf19_CN_Q16['counts'] = [df19_CN[col][1:].value_counts().values[0] for col in df19_CN.columns[155:166]]\ndf21_JP_Q16['counts'] = [df21_JP[col][1:].value_counts().values[0] for col in df21_JP.columns[72:89]]\ndf21_CN_Q16['counts'] = [df21_CN[col][1:].value_counts().values[0] for col in df21_CN.columns[72:89]]\ndf19_JP_Q16 = df19_JP_Q16.sort_index()\ndf19_CN_Q16 = df19_CN_Q16.sort_index()","2707b3b3":"fig_age = make_subplots(rows=1, cols=2, specs=[[{'type':'xy'}, {'type':'xy'}]])\n\nfig_age.add_trace(go.Bar(name=coun_years[0], x=JP_age_19.index, y=JP_age_19.values, marker_color='#FDB0C0'),1,1)\nfig_age.add_trace(go.Bar(name=coun_years[2], x=JP_age_21.index, y=JP_age_21.values, marker_color='#FD4659'),1,1)\nfig_age.add_trace(go.Bar(name=coun_years[1], x=CN_age_19.index, y=CN_age_19.values, marker_color='#FFDB81'),1,2)\nfig_age.add_trace(go.Bar(name=coun_years[3], x=CN_age_21.index, y=CN_age_21.values, marker_color='#FFAB0F'),1,2)\n\nfig_age.update_layout(barmode='group', title_text='2019 & 2021, Japan and China age distribution', showlegend=True)\n\nfig_age.update_xaxes(title_text='Japan Age distribution', row=1, col=1)\nfig_age.update_yaxes(title_text='Counts', row=1, col=1)\nfig_age.update_xaxes(title_text='China Age distribution', row=1, col=2)\nfig_age.update_yaxes(title_text='Counts', row=1, col=2)\n\nfig_age.show()","55b74aea":"fig = make_subplots(rows=2, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}],\n                                           [{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go_Pie('2019_Japan', JP_age_series.value_counts()),1,1)\nfig.add_trace(go_Pie('2019_China', CN_age_series.value_counts()),1,2)\nfig.add_trace(go_Pie('2021_Japan', group(df21,'Japan','Q2')),2,1)\nfig.add_trace(go_Pie('2021_China', group(df21,'China','Q2')),2,2)\n\nfig.update_traces(marker=dict(colors=gen_colors[0:]),\n                  rotation=180)\nfig.update_layout(title_text='Gender Distribution',\n                  showlegend=True,\n                  autosize=True,\n                  height=700)\nfig.show()","77603caa":"fig_country = go.Figure(data=[\n    go.Bar(name='Japan', x=years, y=JP_country_count_19_21, marker_color=JP_colors[0]),\n    go.Bar(name='China', x=years, y=CN_country_count_19_21, marker_color=CN_colors[1])\n])\n\nfig_country.update_layout(\n                    barmode='group',\n                    title_text='2019 & 2021, the number of Kaggler living in Japan and China',\n                    xaxis_title='Years',\n                    yaxis_title='Counts')\nfig_country.show()\n","3c191801":"fig_T = make_subplots(rows=1, cols=2, specs=[[{'type':'xy'}, {'type':'xy'}]])\n\nfig_T.add_trace(go.Bar(name=coun_years[0], x=df19_JP_Q14['Q20'].values, y=df19_JP_Q14['counts'].values, marker_color=coun_years_colors[0]),1,1)\nfig_T.add_trace(go.Bar(name=coun_years[1], x=df19_CN_Q14['Q20'].values, y=df19_CN_Q14['counts'].values, marker_color=coun_years_colors[1]),1,1)\nfig_T.add_trace(go.Bar(name=coun_years[2], x=df21_JP_Q14['Q14'].values, y=df21_JP_Q14['counts'].values, marker_color=coun_years_colors[2]),1,2)\nfig_T.add_trace(go.Bar(name=coun_years[3], x=df21_CN_Q14['Q14'].values, y=df21_CN_Q14['counts'].values, marker_color=coun_years_colors[3]),1,2)\n\nfig_T.update_layout(title_text='2019 & 2021, Visualization Library and Tools in Use',\n                    showlegend=True,\n                    autosize=True)\n\nfig_T.update_xaxes(title_text='2019 Library and Tools', row=1, col=1)\nfig_T.update_yaxes(title_text='Counts', row=1, col=1)\nfig_T.update_xaxes(title_text='2021 Library and Tools', row=1, col=2)\nfig_T.update_yaxes(title_text='Counts', row=1, col=2)\n\nfig_T.show()","57e07000":"df21_ChJp = df21[df21.Q3.isin([\"Japan\",\"China\"])]\n\ndf21_ChJp_total_PL = pd.DataFrame()\ndf21_ChJp_total_PL['Program_Language'] = [df21_ChJp[col][1:].value_counts().index[0] for col in df21_ChJp.columns[7:20]]\ndf21_ChJp_total_PL['counts'] = [df21_ChJp[col][1:].value_counts().values[0] for col in df21_ChJp.columns[7:20]]","51ebda04":"df19_ChJp = df19[df19.Q3.isin([\"Japan\",\"China\"])]\n\ndf19_ChJp_total_PL = pd.DataFrame()\ndf19_ChJp_total_PL['Program_Language'] = [df19_ChJp[col][1:].value_counts().index[0] for col in df19_ChJp.columns[82:94]]\ndf19_ChJp_total_PL['counts'] = [df19_ChJp[col][1:].value_counts().values[0] for col in df19_ChJp.columns[82:94]]","9f065df9":"df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([\"China\"])]\ndf21_Jp = df21_ChJp[df21_ChJp.Q3.isin([\"Japan\"])]\n\n\n## Q7(Program_Language): \uce7c\ub7fc\ubc88\ud638 8~20 - others\ndf21_Jp_PL = pd.DataFrame()\ndf21_Jp_PL['Program_Language'] = [df21_Jp[col][1:].value_counts().index[0] for col in df21_Jp.columns[7:19]]\ndf21_Jp_PL['counts'] = [df21_Jp[col][1:].value_counts().values[0] for col in df21_Jp.columns[7:19]]\n\n\n## 2021 China: Q7_Part12(None) value == 0\uc774\ubbc0\ub85c \uacb0\uce21\uac12 \uc81c\uac70\ndf21_Ch_rmQ07P12 = df21_Ch.drop(['Q7_Part_12'], axis='columns')\n\n## Q7(Program_Language): \uce7c\ub7fc\ubc88\ud638 8~20 - others - Q7_Part12(None)\ndf21_Ch_PL = pd.DataFrame()\ndf21_Ch_PL['Program_Language'] = [df21_Ch_rmQ07P12[col][1:].value_counts() .index[0] for col in df21_Ch_rmQ07P12.columns[7:18]]\ndf21_Ch_PL['counts'] = [df21_Ch_rmQ07P12[col][1:].value_counts() .values[0] for col in df21_Ch_rmQ07P12.columns[7:18]]\n\n\n## \uc81c\uac70\ub41c \ub098\ub77c \uce7c\ub7fc\uacfc value\ub97c \uac01\uac01 \uc0bd\uc785 \ubc0f \ud1b5\ud569\ndf21_Jp_PL.insert(0, 'Country',  'Japan')\ndf21_Ch_PL.insert(0, 'Country',  'China')\n\ndf21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=True)","9416df4e":"df19_Ch = df19_ChJp[df19_ChJp.Q3.isin([\"China\"])]\ndf19_Jp = df19_ChJp[df19_ChJp.Q3.isin([\"Japan\"])]\n\n\n## Q18(Program_Language): \uce7c\ub7fc\ubc88\ud638 83~95 - others\ndf19_Jp_PL = pd.DataFrame()\ndf19_Jp_PL['Program_Language'] = [df19_Jp[col][1:].value_counts().index[0] for col in df19_Jp.columns[82:94]]\ndf19_Jp_PL['counts'] = [df19_Jp[col][1:].value_counts().values[0] for col in df19_Jp.columns[82:94]]\n\n\n## 2019 China Q18_Part11(None) \uacb0\uce21\uac12 \uc81c\uac70\ndf19_Ch_rmQ18P11 = df19_Ch.drop(['Q18_Part_11'], axis='columns')\n\n## Q18(Program_Language): \uce7c\ub7fc\ubc88\ud638 83~95 - others - Q18_Part11(None)\ndf19_Ch_PL = pd.DataFrame()\ndf19_Ch_PL['Program_Language'] = [df19_Ch_rmQ18P11[col][1:].value_counts() .index[0] for col in df19_Ch_rmQ18P11.columns[82:93]]\ndf19_Ch_PL['counts'] = [df19_Ch_rmQ18P11[col][1:].value_counts() .values[0] for col in df19_Ch_rmQ18P11.columns[82:93]]\n\n\n\ndf19_Jp_PL.insert(0, 'Country',  'Japan')\ndf19_Ch_PL.insert(0, 'Country',  'China')\n\ndf19_PL_JnC = pd.concat([df19_Jp_PL,df19_Ch_PL], ignore_index=True)","cf0456cd":"df21_PL_JnC.insert(0, 'year',  '2021')\ndf19_PL_JnC.insert(0, 'year',  '2019')\n\ndf_PL_JnC_21n19 = pd.concat([df21_PL_JnC,df19_PL_JnC], ignore_index=True)","9ede8a78":"fig = px.treemap(df_PL_JnC_21n19, path=[px.Constant(\"2019n2021\"),'year','Program_Language','Country'],\n                values='counts', color='Country',\n                  color_discrete_map={'(?)':'lightgrey', 'China':'gold', 'Japan':'darkblue'})\n\nfig.data[0].textinfo = 'label+percent parent+value'\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n\nfig.show()","5caddf6c":"## \uc55e\uc120 Program_Language\uc5d0\uc11c \uc120\uc5b8\ub41c \uac1d\uccb4\ub85c \uc8fc\uc11d\ucc98\ub9ac\n#df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([\"China\"])]\n#df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([\"Japan\"])]\n\n\n## Q9(IDE's): \uce7c\ub7fc\ubc88\ud638 22~34 - others\ndf21_Jp_IDEs = pd.DataFrame()\ndf21_Jp_IDEs['IDE\\'s'] = [df21_Jp[col][1:].value_counts().index[0] for col in df21_Jp.columns[21:33]]\ndf21_Jp_IDEs['counts'] = [df21_Jp[col][1:].value_counts().values[0] for col in df21_Jp.columns[21:33]]\n\n\ndf21_Ch_IDEs = pd.DataFrame()\ndf21_Ch_IDEs['IDE\\'s'] = [df21_Ch[col][1:].value_counts().index[0] for col in df21_Ch.columns[21:33]]\ndf21_Ch_IDEs['counts'] = [df21_Ch[col][1:].value_counts().values[0] for col in df21_Ch.columns[21:33]]\n\n\n\ndf21_Ch_IDEs.insert(0, 'Country',  'China')\ndf21_Jp_IDEs.insert(0, 'Country',  'Japan')\n\ndf21_IDEs_JnC = pd.concat([df21_Jp_IDEs,df21_Ch_IDEs], ignore_index=True)","28ea3881":"#df19_Ch = df19_ChJp[df19.Q3.isin([\"China\"])]\n#df19_Jp = df19_ChJp[df19.Q3.isin([\"Japan\"])]\n\n\n## Q16(IDE's): \uce7c\ub7fc\ubc88\ud638 57~69 - others\ndf19_Jp_IDEs = pd.DataFrame()\ndf19_Jp_IDEs['IDE\\'s'] = [df19_Jp[col][1:].value_counts().index[0] for col in df19_Jp.columns[56:68]]\ndf19_Jp_IDEs['counts'] = [df19_Jp[col][1:].value_counts().values[0] for col in df19_Jp.columns[56:68]]\n\n\ndf19_Ch_IDEs = pd.DataFrame()\ndf19_Ch_IDEs['IDE\\'s'] = [df19_Ch[col][1:].value_counts().index[0] for col in df19_Ch.columns[56:68]]\ndf19_Ch_IDEs['counts'] = [df19_Ch[col][1:].value_counts().values[0] for col in df19_Ch.columns[56:68]]\n\n\n\ndf19_Jp_IDEs.insert(0, 'Country',  'China')\ndf19_Ch_IDEs.insert(0, 'Country',  'Japan')\n\ndf19_IDEs_JnC = pd.concat([df19_Jp_IDEs,df19_Ch_IDEs], ignore_index=True)","5e709f76":"df21_IDEs_JnC.insert(0, 'year',  '2021')\n#df21_JCQ9.rename(columns={'Q9':'IDE'}, inplace = True)\ndf19_IDEs_JnC.insert(0, 'year',  '2019')\n#df19_JCQ9.rename(columns={'Q16':'IDE'}, inplace = True)\n\ndf_IDEs_JnC_21n19 = pd.concat([df21_IDEs_JnC,df19_IDEs_JnC], ignore_index=True)","57ddf6b5":"# \uc694\uc18c\uba85 \uac04\ub7b5\ud654\ndf_IDEs_JnC_21n19.replace(to_replace = 'Jupyter (JupyterLab, Jupyter Notebooks, etc) ', value = 'Jupyter', inplace = True)\ndf_IDEs_JnC_21n19.replace(to_replace = 'Visual Studio \/ Visual Studio Code', value = 'VS \/ VSCode', inplace = True, regex = True)","8e28d841":"fig = px.treemap(df_IDEs_JnC_21n19, path=[px.Constant(\"2019n2021\"),'year','IDE\\'s','Country'],\n                values='counts', color='Country',\n                  color_discrete_map={'(?)':'lightgrey', 'China':'gold', 'Japan':'darkblue'})\n\nfig.data[0].textinfo = 'label+percent parent+value'\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n\nfig.show()","78738ad1":"fig_F = make_subplots(rows=1, cols=2, specs=[[{'type':'xy'}, {'type':'xy'}]])\n \nfig_F.add_trace(go.Bar(name=coun_years[0], x=df19_JP_Q16['Q28'].values, y=df19_JP_Q16['counts'].sort_values(ascending=False).values, marker_color=coun_years_colors[0]),1,1)\nfig_F.add_trace(go.Bar(name=coun_years[1], x=df19_CN_Q16['Q28'].values, y=df19_CN_Q16['counts'].sort_values(ascending=False).values, marker_color=coun_years_colors[1]),1,1)\nfig_F.add_trace(go.Bar(name=coun_years[2], x=df21_JP_Q16['Q16'].values, y=df21_JP_Q16['counts'].sort_values(ascending=False).values, marker_color=coun_years_colors[2]),1,2)\nfig_F.add_trace(go.Bar(name=coun_years[3], x=df21_CN_Q16['Q16'].values, y=df21_CN_Q16['counts'].sort_values(ascending=False).values, marker_color=coun_years_colors[3]),1,2)\n \nfig_F.update_layout(title_text='2019 & 2021, Machine Learning Frameworks in Use',\n                    showlegend=True,\n                    autosize=True)\n\nfig_F.update_xaxes(title_text='2019 Machine Learning Frameworks', row=1, col=1)\nfig_F.update_yaxes(title_text='Counts', row=1, col=1)\nfig_F.update_xaxes(title_text='2021 Machine Learning Frameworks', row=1, col=2)\nfig_F.update_yaxes(title_text='Counts', row=1, col=2)\n\nfig_F.show()","b2c47016":"\n # \ud1b5\ud569 \uac1c\ubc1c \ud658\uacbd(IDE's) \n - *2021\ub144\ub3c4 \uc790\ub8cc\uc5d0\ub294 \ubb38\ud56d\uc774 \ub098\ub204\uc5b4\uc838 \uc788\uc5b4 Jupyter\uc640 visual\uc774 \uc138\ubd80\uc801\uc73c\ub85c \ub098\ub258\uc838 \uc788\ub2e4.(\ud3b8\uc758\uc0c1 Jupter\uc640 visual\ub85c \ud638\uce6d)*\n \n#### \uc77c\ubcf8\n> * 2019\ub144\ub3c4\uc5d4 Jupyter(293)\uacfc Pycharm(240)\uc774 \uc8fc\ub97c \uc774\ub974\uace0 \uc788\uc73c\uba70 Visual(137)\uc774 \uc138\ubc88\uc9f8\uc758 \ube44\uc911\uc744 \ucc28\uc9c0\ud558\uace0 \uc788\uc73c\uba70 \ub4a4\ub530\ub974\uace0 \uc788\ub294 \uac1c\ubc1c \ud658\uacbd\ub4e4\uc740 \ube44\uc2b7\ube44\uc2b7\ud55c \uc218\uce58\ub97c \ubcf4\uc774\uace0 \uc788\ub2e4.\n> * 2021\ub144\ub3c4\uc5d4 Jupyter\uacfc Visual \ub300\ubd80\ubd84\uc744 \ucc28\uc9c0 \ud558\uba70 Pycharm\uacfc \ub098\uba38\uc9c0 \ud56d\ubaa9\ub4e4\uc774 \ub4a4\ub97c \uc787\uace0 \uc788\ub2e4.\n> * Visual\uc758 \uc0ac\uc6a9\ub960\uc774 \uae09\uc99d\ud588\uc73c\uba70 Jupyter\uc640 Visual \uc774 \uc591\ub300\uc0b0\ub9e5\uc744 \uc774\ub8f0\uc815\ub3c4\ub85c \uc555\ub3c4\uc801\uc778 \uc218\uce58\ub97c \ubcf4\uc774\uace0 Pycharm\uc758 \uc99d\uac00\ub294 \ubbf8\ubbf8\ud558\uace0 Visual\uc5d0 \ubc00\ub9b0 \ubaa8\uc2b5\uc774\ub2e4.\n\n#### \uc911\uad6d\n> * 2019\ub144\ub3c4\uc5d4 Jupyter\uacfc Visual\uc774 \uc8fc\ub97c \uc774\ub8e8\uace0 \uc788\uc73c\uba70 Vim \/ Emacs\uac00 \uc138\ubc88\uc9f8\ub85c \ube44\uc911\uc774 \ucef8\ub2e4 pycharm\uacfc Rstudio\uac00 \uadf8 \ub4a4\ub97c \ub530\ub974\uace0 \uc788\ub2e4.\n> * 2021\ub144\ub3c4\uc5d4 Pycharm\uc758 \ube44\uc911\uc774 \ud06c\uac8c \uc99d\uac00\ud588\uc73c\uba70 Jupter\uc640 Visual\uc740 \uc5ec\uc804\ud788 \ub192\uc740 \uc218\uce58\ub97c \ubcf4\uc5ec \uc8fc\uace0 \uc788\uace0 Python\ub3c4 \uc5b4\uae68\ub97c \ub098\ub780\ud788 \ud558\uace0 \uc788\ub2e4.\n> * \uae30\uc874\uc5d0 \ub192\uc558\ub358 Jupter\uc640 Visual\uc740 \ub354 \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc774 \uc0ac\uc6a9\uc744 \ud558\uace0 \uc810\uc720\uc728\uc774 \ud06c\uc9c0 \uc54a\ub358 Pycharm\uc774 2021\ub144\ub3c4\uac00 \ub428\uc5d0\ub530\ub77c \ub9ce\uc740 \ube44\uc911\uc744 \ucc28\uc9c0 \ud55c\ub2e4.\n\n### \ub450 \ub098\ub77c \ubaa8\ub450 Jupyter, Visual \uad49\uc7a5\ud788 \ud070 \ube44\uc911\uc744 \ucc28\uc9c0\ud558\uace0 \uc788\ub2e4","9884be18":"* Program_Language\uc758 19\ub144\ub3c4 21\ub144\ub3c4 \ud1b5\ud569 value_counts\uc758 \uc815\ub82c(\uc5f0\ub3c4 - \uc5b8\uc5b4 - \ub098\ub77c)\n\n* values\ub294 Program_Language\uc758 value_counts\n\n* color \uae30\uc900: country","d3cae962":"# Japan & China: IDE's\n> ##  Which of the following integrated development environments (IDE's) do you use on a regular basis? (Select all that apply)","737a3902":"## DATA FRAME SET","8c1542e0":"# \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \ud234 \ud504\ub85c\uadf8\ub7a8\n#### \uc77c\ubcf8\n> * 2019\ub144 \uc77c\ubcf8\uc740 Matplotlib\uc218\uce58\uac00 367\ub85c \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc774\uba70, \ub450\ubc88\uc9f8\ub85c\ub294 seaborn(247) \uc138\ubc88\uc9f8\ub85c\ub294 Ggplot\/ggplot2(79) \ub124\ubc88\uc9f8\ub85c\ub294 Plotly(61)\uc774\ub2e4.\n> * 2021\ub144 \uc77c\ubcf8\uc740 Matplotlib\uc218\uce58\uac00 660\ub85c \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc774\uba70, \ub450\ubc88\uc9f8\ub85c\ub294 seaborn(412) \uc138\ubc88\uc9f8\ub85c\ub294 None(137) \ub124\ubc88\uc9f8\ub294 Plotly(115) \ub2e4\uc12f\ubc88\uc9f8\uac00 Ggplot\/gglot2(74)\uc774\ub2e4.\n> * 2019\ub144 \ub300\ube44 Matplotlib\uac00 2\ubc30\uc5d0 \uac00\uae4c\uc6b4 \uc218\uce58\ub85c \uc99d\uac00\ud588\uc73c\uba70, seaborn\uc774 \ub4a4\ub97c \ub530\ub974\uace0 \uc788\ub2e4. None\uc758 \uc751\ub2f5\uc218\ub3c4 \ub9ce\uc544\uc84c\uc73c\uba70, 2019\ub144\uc5d0 \uc138\ubc88\uc9f8\ub85c \ube44\uc728\uc774 \ub192\uc558\ub358 Ggplot\/ggplot2\uc758 \uc778\uc6d0\uacfc \ube44\uc728\uc774 \uc904\uc5c8\ub2e4.\n> * Plotly\ub294 2019\ub144 \ub300\ube44 \uc778\uc6d0\uacfc \ube44\uc728\uc774 \uc99d\uac00\ud588\uc73c\uba70 None\uc758 \uc751\ub2f5\uc744 \uc81c\uc678\ud558\uba74 3\ubc88\uc9f8\uc758 \ube44\uc728\uc744 \ucc28\uc9c0\ud558\uace0 \uc788\ub2e4.\n\n#### \uc911\uad6d\n> * 2019\ub144 \uc911\uad6d\uc740 Matplotlib\uc218\uce58\uac00 321\ub85c \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc774\uba70, \ub450\ubc88\uc9f8\ub85c\ub294 seaborn(160) \uc138\ubc88\uc9f8\ub85c\ub294 Ggplot\/gglot2(54) \ub124\ubc88\uc9f8\ub85c\ub294 Plotly(50)\uc774\ub2e4.\n> * 2021\ub144 \uc911\uad6d\uc740 Matplotlib\uc218\uce58\uac00 491\ub85c \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc774\uba70, \ub450\ubc88\uc9f8\ub85c\ub294 Seaborn(215) \uc138\ubc88\uc9f8\ub85c\ub294 None(155) \ub124\ubc88\uc9f8\ub294 Plotly(75) \ub2e4\uc12f\ubc88\uc9f8\ub85c Ggplot\/ggplot2(72)\uc774\ub2e4.\n> * 2019\ub144 \ub300\ube44 Matplotlib\uc758 \uc218\uce58\uac00 \uc57d 170\uba85 \uc815\ub3c4 \ub298\uc5b4 \ub0ac\uace0 seaborn \ub610\ud55c \uc57d 50\uba85\uc815\ub3c4 \ub298\uc5b4\ub0ac\uc73c\uba70 \uc138\ubc88\uc9f8\ub85c \ub192\uc558\ub358 Ggplot\/ggplot2\uc758 \uc2dc\uc6a9\uc740 \uc18c\ud3ed \uc99d\uac00\ud588\uc9c0\ub9cc Plotly\uc758 \uc99d\uac00\uc5d0 \ub4a4\uccd0\uc84c\ub2e4. None\uc758 \uc751\ub2f5\uc218\uac00 \ub208\uc5d0 \ub744\uac8c \uc99d\uac00\ud588\ub2e4.\n\n### 2019\ub144\uacfc \ub300\ube44\ud574 \uae30\uc874\uc5d0 \ub192\uc558\ub358 Matplotlib\uc640 Seaborn \ucc28\uc9c0 \ube44\uc728\uc740 \ub354 \ub192\uc544\uc84c\uace0 Plotly\/Plotly Express\uc774 Ggplot\/ggplot2\ub97c \uc81c\uce58\uace0 \uc99d\uac00\ud588\ub2e4.","559d85cd":"* 19\ub144\ub3c4 \uc790\ub8cc\uc640 21\ub144\ub3c4 \uc790\ub8cc\ub97c \uae30\ubc18\uc73c\ub85c \ub370\uc774\ud130\uc14b \n* 2019\ub144\uc77c\ubcf8 ,2021\ub144\uc77c\ubcf8 , 2019\ub144\uc911\uad6d , 2021\ub144\uc911\uad6d\uc73c\ub85c \ubd84\ub958","46064077":"# \uc131\ube44\uc728\n\n#### \uc77c\ubcf8\n> * 2019\ub144\ub3c4\uc640 2021\ub144\ub3c4 \ubaa8\ub450 \ub0a8\uc131\uc758 \ube44\uc728\uc774 \ub192\uc73c\uba70 \uc5ec\uc131\uc758 \ube44\uc728\uc740 \ubbf8\ubbf8\ud558\uac8c \uac10\uc18c\ud588\ub2e4.\n\n#### \uc911\uad6d\n> * 2019\ub144\ub3c4\uc640 2021\ub144\ub3c4 \ubaa8\ub450 \ub0a8\uc131\uc758 \ube44\uc728\uc774 \ub192\uc73c\uba70 \uc5ec\uc131\uc758 \ube44\uc728\uc740 \ubbf8\ubbf8\ud558\uac8c \uac10\uc18c\ud588\ub2e4.\n\n\n### \uc77c\ubcf8\uacfc \uc911\uad6d \ubaa8\ub450 \ub0a8\uc131\uc758 \ube44\uc728\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub192\ub2e4\n### \uc99d\uac00\ud55c \uce90\uae00\ub7ec\ub4e4\uc758 \uc131\ube44\uac00 \ub0a8\uc131\uc758 \uc720\uc785\uc774 \ub9ce\uc740\uac78 \uc54c \uc218 \uc788\ub2e4.\n","c442aeb1":" #  Introduce\n\n## \uc8fc\uc81c \n>  * \uc911\uad6d\uacfc \uc77c\ubcf8\uc758 \uce90\uae00\ub7ec \ud2b8\ub80c\ub4dc\n\n## \uc120\uc815\uc774\uc720\n\n>  * \ub3d9\uc544\uc2dc\uc544\uc911 \uac00\uc7a5 \ud070 \uc601\ud5a5\ub825\uc744 \ud589\uc0ac\n>  * \ube44\uc2b7\ud55c \uce90\uae00\ub7ec\uc758 \ubd84\ud3ec\n\n## \uac1c\uc694\n>  * \uc8fc\uc81c \uc911\uad6d vs \uc77c\ubcf8 \uce90\uae00\ub7ec \ucd5c\uc2e0 \ud2b8\ub80c\ub4dc\n>  * 2019\ub144\ub3c4 \uc790\ub8cc\uc640 2021\ub144\ub3c4 \uc790\ub8cc\uae30\ubc18 \ube44\uad50","33dc68f1":"> # What is your age?","32752543":"## DataFrame Set","5518c2e4":"\n # \ud504\ub85c\uadf8\ub7a8 \uc5b8\uc5b4\n#### \uc77c\ubcf8\n> * 2019\ub144\ub3c4\uc5d4 Python(442)\uc774 \uac00\uc7a5 \ub192\uc558\uc73c\uba70 SQL(150) , R(121) , C++(79) ,Javascript(73), C(70) , Bash(64) , Java(56) \uc21c\uc73c\ub85c \ub192\uc558\ub2e4.\n> * 2021\ub144\ub3c4\uc5d4 Python(786)\uc774 \uac00\uc7a5 \ub192\uc558\uc73c\uba70 SQL(232) , C++(164) , C(163) , Javascript(147) , Java(137) , R(122) , Bash(81) \uc21c\uc73c\ub85c \ub192\uc558\ub2e4.\n> * Python\uacfc SQL\uc758 \uc5b8\uc5b4 \ube44\uc911\uc774 \ub300\ubd80\ubd84\uc744 \ucc28\uc9c0 \ud558\uace0 \uc788\uc73c\uba70 2019\ub144\ub3c4\uc5d0 \ube44\ud574 R\uc758 \ube44\uc911\uc774 \ud06c\uac8c \uac10\uc18c\ud588\ub2e4.\n\n#### \uc911\uad6d\n> * 2019\ub144\ub3c4\uc5d4 Python(375)\uc774 \uac00\uc7a5 \ub192\uc558\uc73c\uba70 SQL(117) , C++(98) , Java(73) , Matlab(67) , C(66) , R(60) , Javascript(38) , Bash(36)\uc21c\uc73c\ub85c \ub192\uc558\ub2e4.\n> * 2021\ub144\ub3c4\uc5d4 Python(737)\uc774 \uac00\uc7a5 \ub192\uc558\uc73c\uba70 C++(267) , C(225) , SQL(215) , Java(212) , Matlab(169) , Javascript(86) , R(85) , Bash(31)\uc21c\uc73c\ub85c \ub192\uc558\ub2e4. \n> * Python\uc758 \ucc28\uc9c0 \ube44\uc728\uc774 \ub300\ubd80\ubd84\uc744 \ucc28\uc9c0 \ud558\uace0 \uc788\uc73c\uba70 2019\ub144\ub3c4 \ub300\ube44 C++\uacfc C\uc774 \uae09\uc99d \ud588\uace0 R\uacfc Bash\ub294 \ubbf8\ubbf8\ud558\uba70 \ub0ae\uc740 \ube44\uc911\uc744 \ucc28\uc9c0\ud55c\ub2e4.\n\n### 2019\ub144\ub3c4 \ub300\ube44 2021\ub144\uc5d0\ub294 \uc5ec\uc804\ud788 Python\uc758 \uc790\ub9ac\ub294 \uad73\uac74\ud574\uc84c\uace0 Python\uc744 \uc81c\uc678\ud558\uba74 \ub300\ubd80\ubd84 \uace0\ub978 \ubd84\ud3ec\ub97c \ubcf4\uc774\uc9c0\ub9cc R\uacfc Bash\uc758 \uc0ac\uc6a9\ub960\uc740 \uad49\uc7a5\ud788 \ub0ae\ub2e4.","af7c9d46":"### Split Country\n\ub098\ub77c\ubcc4 value_counts\ub97c \uc704\ud574 \uac01 \ub098\ub77c\ub85c dataframe \ubd84\ub9ac","8a103f3d":"### 2021 Japan & China total Dataframe SET\n2021\ub144 Q3(Country) \uc77c\ubcf8 \uc911\uad6d \ucd94\ucd9c dataframe","e7c45134":"# \ub098\uc774 \ubd84\ud3ec\ub3c4\n#### \uc77c\ubcf8\n> * 2019\ub144\ub3c4\uc5d0 25-29\uc138\uc758 \ubd84\ud3ec\uac00 \uac00\uc7a5 \ud06c\uac8c \ub098\ud0c0\ub0ac\uc73c\uba70, \ub2e4\uc74c\uc73c\ub85c\ub294 30-34 , 35-39 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\ub2e4.\n> * 2021\ub144\ub3c4\uc5d0 25-29\uc138\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc558\uc73c\uba70, 2019\ub144\ub3c4 \uc790\ub8cc\uc640 \uc810\uc720\uc728\uc740 \ube44\uc2b7\ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uc5f0\ub839\uce35\uc774 \uc99d\uac00\ud55c\uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.\n> * \uac00\uc7a5 \ub208\uc5d0 \ub744\ub294\uac83\uc740 18-21\uc138\uc758 \ube44\uc728\uc774 \uae09\uaca9\ud558\uac8c \ub192\uc544\uc9c4\uac83\uacfc 35-49\uc138 \uc774\uc0c1\uc758 \ub098\uc774 \ubd84\ud3ec\ub3c4\uac00 \ubaa8\ub450 \uae09\uaca9\ud558\uac8c \uc99d\uac00\ud55c\uac83\uc774 \ub208\uc5d0 \ub748\ub2e4.\n\n#### \uc911\uad6d\n> * 2019\ub144\ub3c4\uc5d0 22-24 , 25-29 , 18-21 \uc21c\uc11c\ub300\ub85c \ub192\uc558\uc73c\uba70 \uc80a\uc740\uce35\uc758 \ube44\uc728\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub192\uc740\uac83\uc744 \ubcfc\uc218 \uc788\ub2e4.\n> * 2019\ub144\ub3c4\uc5d0 \ube44\ud574 2021\ub144\uc5d0 \uc804 \uc5f0\ub839\ub300\ube44 \ube44\uc728\uc774 \uc99d\uac00\ud588\uc9c0\ub9cc, 18-21, 22-24, 30-34\uc758 \ubd84\ud3ec\ub3c4\uac00 \uc555\ub3c4\uc801\uc73c\ub85c \ub192\uc544\uc9c4\uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.\n> * \uac00\uc7a5 \ub208\uc5d0 \ub744\ub294\uac83\uc740 \uc80a\uc740\uce35\uc758 \ube44\uc728 18-21, 22-24\uc758 \ubd84\ud3ec\uac00 \uae09\uaca9\ud558\uac8c \ub192\uc544\uc84c\uc73c\uba70 30-34 \ubd84\ud3ec \ub610\ud55c \uc18c\ud3ed \uc0c1\uc2b9\ud588\uc73c\uba70 \uadf8 \uc678\uc5d0\ub294 \ubbf8\ubbf8\ud558\uac70\ub098 \uc870\uae08 \ub192\uc544 \uc84c\ub2e4.\n\n\n### \uc911\uad6d\uc740 22-24\uc138\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc73c\uba70, \uc77c\ubcf8\uc740 25-29\uc138\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\ub2e4.\n### \ub450 \ub098\ub77c \ubaa8\ub450 \uc80a\uc740\uce35\uc758 \uc810\uc720\uc728\uc774 \uac00\uc7a5 \ub192\uc740 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. ","b33fe794":"# 2019 vs 2021 (Japan , China)\n> ##  In which country do you currently reside?","a41a375f":"# Gender Distribution\n> ## What is your gender?","eeb5de6a":"#  DATA","19874973":"# Conclusion !\n## \uc9c0\ud45c\ub85c \ubcf4\ub294 2019\ub144\uacfc 2021\ub144\uc758 \ucc28\uc774\n* \ub9c9\ub300\uadf8\ub798\ud504\uc640 \ud2b8\ub9ac\ub9f5\uc73c\ub85c \ubcf4\ub294 2019\ub144\uacfc 2021\ub144\uc758 \ucc28\uc774\n  > * 2019\ub144\uc5d0 \ube44\ud574 2021\ub144\ub3c4\uc5d0 \ud06c\uac8c \uce90\uae00\ub7ec\ub4e4\uc774 \ub9ce\uc774 \uc720\uc785\ub41c \uac78 \uc54c \uc218 \uc788\ub2e4. \uc911\uad6d\uc740 \uc778\uad6c\ube44\uc728\uc5d0 \ube44\ud574 \uc801\uc740 \uce90\uae00\ub7ec\uc758 \uc22b\uc790\uac00 \ub208\uc5d0 \ub748\ub2e4. \ub450 \ub098\ub77c \ubaa8\ub450 \uc80a\uc740\uce35\uc758 \uc778\uc6d0\ub4e4\uc774 \uae09\uaca9\ud558\uac8c \uc99d\uac00\ud588\ub2e4. \n  > * \ub450 \ub098\ub77c \ubaa8\ub450 \ub300\uac1c \ub0a8\uc131\uc758 \uc778\uc6d0\uc774 \ub9ce\ub2e4. \n* \ub3d9\uc544\uc2dc\uc544\uc5d0\uc11c \uce90\uae00\ub7ec\ub4e4\uc758 \ud06c\uac8c \ub098\ud0c0\ub098\ub294 \ud2b9\uc9d5\n  > * \ud234\uacfc \uc5b8\uc5b4\uc5d0 \ub300\ud574\uc11c \ube44\uc2b7\ud558\uc9c0\ub9cc \ub2e4\ub978 \uc591\uc0c1\uc744 \ubcf4\uc774\uace0 \uc788\ub2e4.\n  > * Matplotlib,Seaborn,Plotly\uc758 \ube44\uc911\uc774 \ub192\uc544\uc84c\ub2e4.\n  > * \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub294 \uc870\uae08 \ub2e4\ub978 \ud2b9\uc9d5\uc774 \uc788\ub2e4. \uba3c\uc800 \uc77c\ubcf8\uac19\uc740 \uacbd\uc6b0 Phython\uacfc SQL\uc758 \ube44\uc911\uc774 \uac00\uc7a5 \ub192\uc740 \ubc18\uba74 \uc911\uad6d\uc740 Python\uc758 \ube44\uc911\uc774 \ud06c\uc9c0\ub9cc \ub2e4\ub978 \uc5b8\uc5b4\ub4e4\uc758 \ube44\uc911 \ucc28\uc9c0\ub294 \ube44\uc2b7\ud558\ub2e4. \uacf5\ud1b5\uc810\uc73c\ub85c\ub294 R\uc758 \uc5b8\uc5b4\ube44\uc911\uc774 \ud06c\uac8c \uac10\uc18c\ud55c\uac8c \ub208\uc5d0 \ub748\ub2e4. \ub450 \ub098\ub77c \ubaa8\ub450 2019\ub144\ub3c4 \ub300\ube44 2021\ub144\ub3c4\uc5d0\ub294 R\uc758 \uc0ac\uc6a9\ub7c9\uc774 \ub9ce\uc774 \ub0ae\uc544\uc84c\ub2e4. \n  > * IDE's \uac1c\ubc1c \ud658\uacbd\uc740 \ub450 \ub098\ub77c\uc758 \uacbd\uc6b0 \uc96c\ud53c\ud130\uc640 \ube44\uc96c\uc5bc \ubaa8\ub450 \ub9ce\uc740 \uc810\uc720\uc728\uc744 \ubcf4\uc774\uace0 \uc788\uc73c\ub098 \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8\ub4e4\uc740 \ub450 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ube44\ud574 \ub0ae\uc740 \uc810\uc720\uc728\uc744 \ubcf4\uc774\uace0 \uc788\uc73c\uba70 \uc77c\ubcf8\uc740 \ud30c\uc774\uc36c\uc758 \ube44\uc911\uc774 \uc801\uc740 \ubc18\uba74 \uc911\uad6d\uc740 \ud30c\uc774\uc36c\uc758 \ube44\uc911\uc774 \ucee4\uc84c\ub2e4.\n  > * \uba38\uc2e0 \ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\uac19\uc740\uacbd\uc6b0 \ub450 \ub098\ub77c\uac00 Scikit-learn\uc774 \ub192\uc740 \ube44\uc728\uc744 \ucc28\uc9c0\ud558\ub294\uac74 \ub3d9\uc77c\ud558\uc9c0\ub9cc \ub098\uba38\uc9c0 \ud56d\ubaa9\ub4e4\uc740 \ube44\uc2b7\ud558\uba70 Xgboost\uc640 Caret\uc758 \uc810\uc720\uc728\uc774 \ub5a8\uc5b4\uc84c\ub2e4. \uadf8\ub9ac\uace0 Pytorch\uc640 Fast.ai,MXNET\uc774 \uc0c8\ub86d\uac8c \uc774\ub984\uc744 \uc62c\ub9b0 \ubaa8\uc2b5\uc744 \ubcf4\uc778\ub2e4.\n* \ud5a5\ud6c4 \ub3d9\uc544\uc2dc\uc544 \ubbf8\ub798\uc758 \uce90\uae00\ub7ec\ub4e4\uc758 \ube44\uc804\uacfc \ud2b8\ub80c\ub4dc \uc608\uce21 \n > * \uce90\uae00\ub7ec\ub4e4\uc758 \uc131\uc7a5\uc774 \uae30\ub300\ub41c\ub2e4 \uc55e\uc73c\ub85c \uce90\uae00\ub7ec\ub4e4\uc758 \uc131\uc7a5\uc740 \uacc4\uc18d \ub420 \uac78\ub85c \ubcf4\uc778\ub2e4.\n > * \uc55e\uc11c \ubd24\ub358 \ub098\uc774 \ubd84\ud3ec\ub3c4\ub97c \ubcf4\uba74 \uc80a\uc740 \uc778\uc6d0\ub4e4\uc758 \uc720\uc785\uc5d0 \uc758\ud574 \uce90\uae00\uc2dc\uc7a5\uc774 \ud655\ub300 \ub420 \uac78\ub85c \ubcf4\uc5ec\uc9c4\ub2e4.\n > * IT\uc0b0\uc5c5\uc758 \uc99d\uc9c4\uc5d0 \ub530\ub77c \ub354\uc6b1 \ub9ce\uc740 \uc778\uc6d0\ub4e4\uc774 \uc720\uc785\ub420\uac78\ub85c \ubcf4\uc774\uba70 \uc555\ub3c4\uc801\uc778 \uc218\uce58\ub97c \ubcf4\uc600\ub358 \ud234\uacfc \uc5b8\uc5b4 \uba38\uc2e0\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\ub294 \ub354\uc6b1 \ub354 \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc774 \uc0ac\uc6a9\ub420 \uac78\ub85c \ubcf4\uc778\ub2e4.\n > * \ub3d9\uc544\uc2dc\uc544\uc758 \uc778\uc811\ud55c \uad6d\uac00\uc9c0\ub9cc \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc774 \ucc28\uc9c0\ud558\ub294\uac83\ub4e4\uc740 \uc77c\uce58\ud558\uba70 \ub3d9\uc544\uc2dc\uc544\uc5d0 \ub9ce\uc740 \uc601\ud5a5\uc774 \ubbf8\uce60\uac83\uc73c\ub85c \uae30\ub300\ub418\uace0 \uc55e\uc73c\ub85c \uc8fc\ubaa9\ud574\uc57c\ud560 \ud3ec\uc778\ud2b8\ub77c\uace0 \ubcf4\uc778\ub2e4.","be060d66":"# Frameworks\n> ##  Which of the following machine learning frameworks do you use on a regular basis? (Select all that apply)\n","28709686":"#### 2021","08cc682c":"### Split year{Country}","d3570d43":"### Split year{Country}\n\ub2e4\ub978 csv\uc778 2019\uc790\ub8cc\uc640 2021\uc790\ub8cc \ud1b5\ud569","5acc076c":"### REFERENCE\n - plotly bar chart tutorial(https:\/\/plotly.com\/python\/bar-charts\/)\n - plotly bar chart properties (bar traces)(https:\/\/plotly.com\/python\/reference\/bar\/)\n - plotly pie chart tutorial(https:\/\/plotly.com\/python\/pie-charts\/)\n - plotly pie chart properties (pie traces)(https:\/\/plotly.com\/python\/reference\/pie\/)\n - [\ub370\uc774\ud130\ud504\ub808\uc784 \ud569\uce58\uae30](https:\/\/yganalyst.github.io\/data_handling\/Pd_12\/)\n - [\ud589\uc5f4 \uc774\ub984 \ubcc0\uacbd](https:\/\/mizykk.tistory.com\/131)\n - [pd insert](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.insert.html)\n     - [Ex1](https:\/\/www.delftstack.com\/ko\/howto\/python-pandas\/how-to-add-new-column-to-existing-dataframe-in-python-pandas\/)\n     - [Ex2](https:\/\/m.blog.naver.com\/PostView.naver?isHttpsRedirect=true&blogId=rising_n_falling&logNo=221631637822)","348c3535":"### Split Country","6ab096a3":"# Japan & China programming languages\n> ## What data visualization libraries or tools do you use on a regular basis? (Select all that apply)","7defd411":"#### 2021","a0802876":" # \uc778\uc6d0\uc758 \uc99d\uac10\n\n#### \uc77c\ubcf8\n> * 2019\ub144 673\uba85, 2021\ub144\uc5d0\ub294 921\uba85\uc73c\ub85c \uc57d 248\uba85\uc815\ub3c4 \uc99d\uac00 \ud588\ub2e4.\n\n#### \uc911\uad6d\n> * 2019\ub144 574\uba85, 2021\ub144\uc5d0\ub294 814\uba85\uc73c\ub85c \uc57d 240\uba85\uc815\ub3c4 \uc99d\uac00 \ud588\ub2e4.\n\n### \uc77c\ubcf8\uc774 \uc911\uad6d\ubcf4\ub2e4 \uc57d 90\uba85\uc815\ub3c4 \uce90\uae00\ub7ec\uac00 \ub9ce\uc73c\uba70, \n### 2019\ub144\ub300\ube44 2021\ub144 \ud604\uc7ac \ub450 \ub098\ub77c \ubaa8\ub450 \uc99d\uac00\ud588\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4.","f7263d5e":"### 2019 Japan & China total\n2019\ub144 Q3(Country) \uc77c\ubcf8 \uc911\uad6d \ucd94\ucd9c dataframe","ef01e7ea":"#### 2019","24ee211c":"# visualization libraries or tools\n>  ## What data visualization libraries or tools do you use on a regular basis? (Select all that apply)","6e2b4247":" # \uba38\uc2e0\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\n \n#### \uc77c\ubcf8\n> * 2019\ub144\ub3c4\uc5d4 Scikit-learn\uc774 \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc744 \ucc28\uc9c0\ud55c\ub2e4.\n> * 2021\ub144\ub3c4\uc5d4 Scikit-learn\uc774 \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc744 \ucc28\uc9c0\ud55c\ub2e4.\n> * Scikit-learn\uc774 \ub192\uc740 \ube44\uc728\uc744 \ucc28\uc9c0\ud558\ub294\uac83\uc740 \uc5ec\uc804\ud558\ub2e4.\n\n#### \uc911\uad6d\n> * 2019\ub144\ub3c4\uc5d4 Scikit-learn\uc774 \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc744 \ucc28\uc9c0\ud55c\ub2e4.\n> * 2021\ub144\ub3c4\uc5d4 Scikit-learn\uc774 \uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc744 \ucc28\uc9c0\ud55c\ub2e4.\n> * Scikit-learn\uc774 \ub192\uc740 \ube44\uc728\uc744 \ucc28\uc9c0\ud558\uc9c0\ub9cc \uc555\ub3c4\uc801\uc778 \uc0ac\uc6a9\ub960\uc744 \uc790\ub791\ud558\uc9c4 \uc54a\ub294\ub2e4.\n\n### \uc77c\ubcf8\uc740 Scikit-learn\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub192\uc740 \uc778\uae30\ub97c \uc790\ub791\ud558\uc9c0\ub9cc \uc911\uad6d\uc740 \ud06c\uac8c \ucc28\uc774\ub098\ub294 \uc218\uce58\ub294 \uc544\ub2c8\ub2e4.\n### \ub450 \ub098\ub77c \ubaa8\ub450 Xgboost \uc640 Caret \uc778\uae30\uac00 \uc2dd\uc5c8\ub2e4. \ubc18\uba74 PyTorch\uc640 Fast.ai ,MXNET \ud56d\ubaa9\ub4e4\uc774 \uc131\uc7a5\ud558\uc5ec \ud604\uc7ac \uc21c\uc704\uad8c\uc5d0 \uc774\ub984\uc744 \uc62c\ub838\ub2e4.\n","41d73293":"#### 2019"}}