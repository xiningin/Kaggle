{"cell_type":{"c6304a55":"code","bd615bc1":"code","422d0d24":"code","f2b8cc54":"code","cb9c0805":"code","c932d6bf":"code","77341c3d":"code","6a7cb2c9":"code","55fb5af0":"code","464da47f":"code","dc77280a":"code","04f0829f":"code","6f770504":"code","14db9b9a":"code","9bee7152":"code","fb5013ab":"code","2429e6ba":"code","daa1a1bb":"code","3780ee4b":"code","403fd25b":"code","d1c02808":"code","6706a7b8":"code","8f0fb180":"code","004a110e":"code","8589362d":"code","f0e78d4c":"code","ccfe62c0":"code","597616dd":"code","436206c1":"code","01c8e45e":"code","a9f34a92":"code","c7591f2d":"code","ee0e49b1":"code","4a85c061":"code","2e63d5dc":"code","de07cbc1":"code","1aaa67c1":"code","710546f2":"code","1aad7c55":"code","254379eb":"code","95772ad6":"code","c3643914":"code","f616cf5b":"code","defe43a3":"code","584598c5":"code","694c4163":"code","2d4870ce":"code","7d73e267":"code","850af05d":"code","c72bcd23":"code","33c586c9":"code","5d0d0f38":"code","93c845e9":"code","68112720":"code","b833f252":"code","1c68f2c2":"code","42cb2607":"code","a656bdde":"code","77b54dc8":"code","bff07d39":"code","05d78039":"code","a0f36bf9":"code","6cfad717":"code","54549f1c":"code","800d0080":"code","73acb68f":"markdown","ef5c128b":"markdown","f473e9cc":"markdown","40707f6a":"markdown"},"source":{"c6304a55":"!pip install tensorflow==1.15.5\nimport tensorflow as tf\ntf.__version__\n!pip install keras==2.3.1\n!pip install git+https:\/\/www.github.com\/keras-team\/keras-contrib.git","bd615bc1":"import sys\nprint(sys.version)","422d0d24":"import numpy as np\nfrom numpy import array\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport string\nimport os\nfrom PIL import Image\nimport glob\nfrom pickle import dump, load\nfrom time import time\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Embedding, TimeDistributed, Dense, RepeatVector,\\\n                         Activation, Flatten, Reshape, concatenate, Dropout, BatchNormalization\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.layers.wrappers import Bidirectional\nfrom keras.layers.merge import add\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.preprocessing import image\nfrom keras.models import Model\nfrom keras import Input, layers\nfrom keras import optimizers\nfrom keras.applications.inception_v3 import preprocess_input\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.utils import to_categorical","f2b8cc54":"# load doc into memory\ndef load_doc(filename):\n\t# open the file as read only\n\tfile = open(filename, 'r')\n\t# read all text\n\ttext = file.read()\n\t# close the file\n\tfile.close()\n\treturn text\n\nfilename = \"..\/input\/flickr-8k-images\/Flickr8k\/Flickr8k_text\/Flickr8k.token.txt\"\n# load descriptions\ndoc = load_doc(filename)\nprint(doc[:300])","cb9c0805":"len(doc)","c932d6bf":"def load_descriptions(doc):\n\tmapping = dict()\n\t# process lines\n\tfor line in doc.split('\\n'):\n\t\t# split line by white space\n\t\ttokens = line.split()\n\t\tif len(line) < 2:\n\t\t\tcontinue\n\t\t# take the first token as the image id, the rest as the description\n\t\timage_id, image_desc = tokens[0], tokens[1:]\n\t\t# extract filename from image id\n\t\timage_id = image_id.split('.')[0]\n\t\t# convert description tokens back to string\n\t\timage_desc = ' '.join(image_desc)\n\t\t# create the list if needed\n\t\tif image_id not in mapping:\n\t\t\tmapping[image_id] = list()\n\t\t# store description\n\t\tmapping[image_id].append(image_desc)\n\treturn mapping\n\n# parse descriptions\ndescriptions = load_descriptions(doc)\nprint('Loaded: %d ' % len(descriptions))","77341c3d":"list(descriptions.keys())[:5]","6a7cb2c9":"descriptions['1000268201_693b08cb0e']","55fb5af0":"descriptions['1001773457_577c3a7d70']","464da47f":"def clean_descriptions(descriptions):\n\t# prepare translation table for removing punctuation\n\ttable = str.maketrans('', '', string.punctuation)\n\tfor key, desc_list in descriptions.items():\n\t\tfor i in range(len(desc_list)):\n\t\t\tdesc = desc_list[i]\n\t\t\t# tokenize\n\t\t\tdesc = desc.split()\n\t\t\t# convert to lower case\n\t\t\tdesc = [word.lower() for word in desc]\n\t\t\t# remove punctuation from each token\n\t\t\tdesc = [w.translate(table) for w in desc]\n\t\t\t# remove hanging 's' and 'a'\n\t\t\tdesc = [word for word in desc if len(word)>1]\n\t\t\t# remove tokens with numbers in them\n\t\t\tdesc = [word for word in desc if word.isalpha()]\n\t\t\t# store as string\n\t\t\tdesc_list[i] =  ' '.join(desc)\n\n# clean descriptions\nclean_descriptions(descriptions)","dc77280a":"descriptions['1000268201_693b08cb0e']","04f0829f":"descriptions['1001773457_577c3a7d70']","6f770504":"# convert the loaded descriptions into a vocabulary of words\ndef to_vocabulary(descriptions):\n\t# build a list of all description strings\n\tall_desc = set()\n\tfor key in descriptions.keys():\n\t\t[all_desc.update(d.split()) for d in descriptions[key]]\n\treturn all_desc\n\n# summarize vocabulary\nvocabulary = to_vocabulary(descriptions)\nprint('Original Vocabulary Size: %d' % len(vocabulary))","14db9b9a":"# save descriptions to file, one per line\ndef save_descriptions(descriptions, filename):\n\tlines = list()\n\tfor key, desc_list in descriptions.items():\n\t\tfor desc in desc_list:\n\t\t\tlines.append(key + ' ' + desc)\n\tdata = '\\n'.join(lines)\n\tfile = open(filename, 'w')\n\tfile.write(data)\n\tfile.close()\n\nsave_descriptions(descriptions, 'descriptions.txt')","9bee7152":"# load a pre-defined list of photo identifiers\ndef load_set(filename):\n\tdoc = load_doc(filename)\n\tdataset = list()\n\t# process line by line\n\tfor line in doc.split('\\n'):\n\t\t# skip empty lines\n\t\tif len(line) < 1:\n\t\t\tcontinue\n\t\t# get the image identifier\n\t\tidentifier = line.split('.')[0]\n\t\tdataset.append(identifier)\n\treturn set(dataset)\n\n# load training dataset (6K)\nfilename = '..\/input\/flickr-8k-images\/Flickr8k\/Flickr8k_text\/Flickr_8k.trainImages.txt'\ntrain = load_set(filename)\nprint('Dataset: %d' % len(train))","fb5013ab":"# Below path contains all the images\nimages = '..\/input\/flickr-8k-images\/Flickr8k\/Flickr8k_Dataset\/Flicker8k_Dataset\/' #forward_slice is always important when you read something in folder\n# Create a list of all image names in the directory\nimg = glob.glob(images + '*.jpg')","2429e6ba":"# img","daa1a1bb":"# Below file conatains the names of images to be used in train data\ntrain_images_file = '..\/input\/flickr-8k-images\/Flickr8k\/Flickr8k_text\/Flickr_8k.trainImages.txt'\n# Read the train image names in a set\ntrain_images = set(open(train_images_file, 'r').read().strip().split('\\n'))\n\n# Create a list of all the training images with their full path names\ntrain_img = []\n\nfor i in img: # img is list of full path names of all images\n    if i[len(images):] in train_images: # Check if the image belongs to training set\n        train_img.append(i) # Add it to the list of train images","3780ee4b":"# Below file conatains the names of images to be used in test data\ntest_images_file = '..\/input\/flickr-8k-images\/Flickr8k\/Flickr8k_text\/Flickr_8k.testImages.txt'\n# Read the validation image names in a set# Read the test image names in a set\ntest_images = set(open(test_images_file, 'r').read().strip().split('\\n'))\n\n# Create a list of all the test images with their full path names\ntest_img = []\n\nfor i in img: # img is list of full path names of all images\n    if i[len(images):] in test_images: # Check if the image belongs to test set\n        test_img.append(i) # Add it to the list of test images","403fd25b":"# load clean descriptions into memory\ndef load_clean_descriptions(filename, dataset):\n\t# load document\n\tdoc = load_doc(filename)\n\tdescriptions = dict()\n\tfor line in doc.split('\\n'):\n\t\t# split line by white space\n\t\ttokens = line.split()\n\t\t# split id from description\n\t\timage_id, image_desc = tokens[0], tokens[1:]\n\t\t# skip images not in the set\n\t\tif image_id in dataset:\n\t\t\t# create list\n\t\t\tif image_id not in descriptions:\n\t\t\t\tdescriptions[image_id] = list()\n\t\t\t# wrap description in tokens\n\t\t\tdesc = 'startseq ' + ' '.join(image_desc) + ' endseq'\n\t\t\t# store\n\t\t\tdescriptions[image_id].append(desc)\n\treturn descriptions\n\n# descriptions\ntrain_descriptions = load_clean_descriptions('descriptions.txt', train)\nprint('Descriptions: train=%d' % len(train_descriptions))","d1c02808":"def preprocess(image_path):\n    # Convert all the images to size 299x299 as expected by the inception v3 model\n    img = image.load_img(image_path, target_size=(299, 299))\n    # Convert PIL image to numpy array of 3-dimensions\n    x = image.img_to_array(img)\n    # Add one more dimension\n    x = np.expand_dims(x, axis=0)\n    # preprocess the images using preprocess_input() from inception module\n    x = preprocess_input(x)\n    return x","6706a7b8":"# Load the inception v3 model\nmodel = InceptionV3(weights='imagenet')","8f0fb180":"# Create a new model, by removing the last layer (output layer) from the inception v3\nmodel_new = Model(model.input, model.layers[-2].output)","004a110e":"# Function to encode a given image into a vector of size (2048, )\ndef encode(image):\n    image = preprocess(image) # preprocess the image\n    fea_vec = model_new.predict(image) # Get the encoding vector for the image\n    fea_vec = np.reshape(fea_vec, fea_vec.shape[1]) # reshape from (1, 2048) to (2048, )\n    return fea_vec","8589362d":"# train_img","f0e78d4c":"# Call the funtion to encode all the train images\n# This will take a while on CPU - Execute this only once\nstart = time()\nencoding_train = {}\nfor img in train_img:\n    encoding_train[img[len(images):]] = encode(img)\nprint(\"Time taken in seconds =\", time()-start)","ccfe62c0":"import os\nimport pickle\n# os.makedirs(\"save_model\")","597616dd":"# Save the bottleneck train features to disk\nwith open(\"encoded_train_images.pkl\", \"wb\") as encoded_pickle:\n    pickle.dump(encoding_train, encoded_pickle)","436206c1":"# encoding_train","01c8e45e":"# Call the funtion to encode all the test images - Execute this only once\nstart = time()\nencoding_test = {}\nfor img in test_img:\n    encoding_test[img[len(images):]] = encode(img)\nprint(\"Time taken in seconds =\", time()-start)","a9f34a92":"# encoding_test","c7591f2d":"# Save the bottleneck test features to disk\nwith open(\"encoded_test_images.pkl\", \"wb\") as encoded_pickle:\n    pickle.dump(encoding_test, encoded_pickle)","ee0e49b1":"train_features = load(open(\"encoded_train_images.pkl\", \"rb\"))\nprint('Photos: train=%d' % len(train_features))","4a85c061":"# Create a list of all the training captions\nall_train_captions = []\nfor key, val in train_descriptions.items():\n    for cap in val:\n        all_train_captions.append(cap)\nlen(all_train_captions)","2e63d5dc":"# Consider only words which occur at least 10 times in the corpus\nword_count_threshold = 10\nword_counts = {}\nnsents = 0\nfor sent in all_train_captions:\n    nsents += 1\n    for w in sent.split(' '):\n        word_counts[w] = word_counts.get(w, 0) + 1\n\nvocab = [w for w in word_counts if word_counts[w] >= word_count_threshold]\nprint('preprocessed words %d -> %d' % (len(word_counts), len(vocab)))","de07cbc1":"ixtoword = {}\nwordtoix = {}\n\nix = 1\nfor w in vocab:\n    wordtoix[w] = ix\n    ixtoword[ix] = w\n    ix += 1","1aaa67c1":"vocab_size = len(ixtoword) + 1 # one for appended 0's\nvocab_size","710546f2":"# convert a dictionary of clean descriptions to a list of descriptions\ndef to_lines(descriptions):\n\tall_desc = list()\n\tfor key in descriptions.keys():\n\t\t[all_desc.append(d) for d in descriptions[key]]\n\treturn all_desc\n\n# calculate the length of the description with the most words\ndef max_length(descriptions):\n\tlines = to_lines(descriptions)\n\treturn max(len(d.split()) for d in lines)\n\n# determine the maximum sequence length\nmax_length = max_length(train_descriptions)\nprint('Description Length: %d' % max_length)","1aad7c55":"# data generator, intended to be used in a call to model.fit_generator()\ndef data_generator(descriptions, photos, wordtoix, max_length, num_photos_per_batch):\n    X1, X2, y = list(), list(), list()\n    n=0\n    # loop for ever over images\n    while 1:\n        for key, desc_list in descriptions.items():\n            n+=1\n            # retrieve the photo feature\n            photo = photos[key+'.jpg']\n            for desc in desc_list:\n                # encode the sequence\n                seq = [wordtoix[word] for word in desc.split(' ') if word in wordtoix]\n                # split one sequence into multiple X, y pairs\n                for i in range(1, len(seq)):\n                    # split into input and output pair\n                    in_seq, out_seq = seq[:i], seq[i]\n                    # pad input sequence\n                    in_seq = pad_sequences([in_seq], maxlen=max_length)[0]\n                    # encode output sequence\n                    out_seq = to_categorical([out_seq], num_classes=vocab_size)[0]\n                    # store\n                    X1.append(photo)\n                    X2.append(in_seq)\n                    y.append(out_seq)\n            # yield the batch data\n            if n==num_photos_per_batch:\n                yield [[array(X1), array(X2)], array(y)]\n                X1, X2, y = list(), list(), list()\n                n=0","254379eb":"# Load Glove vectors\nglove_dir = '..\/input\/glove6b200d'\nembeddings_index = {} # empty dictionary\nf = open(os.path.join(glove_dir, 'glove.6B.200d.txt'), encoding=\"utf-8\")\n\nfor line in f:\n    values = line.split()\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\nprint('Found %s word vectors.' % len(embeddings_index))","95772ad6":"embedding_dim = 200\n\n# Get 200-dim dense vector for each of the 10000 words in out vocabulary\nembedding_matrix = np.zeros((vocab_size, embedding_dim))\n\nfor word, i in wordtoix.items():\n    #if i < max_words:\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        # Words not found in the embedding index will be all zeros\n        embedding_matrix[i] = embedding_vector","c3643914":"embedding_matrix.shape","f616cf5b":"inputs1 = Input(shape=(2048,))\nfe1 = Dropout(0.5)(inputs1)\nfe2 = Dense(256, activation='relu')(fe1)\ninputs2 = Input(shape=(max_length,))\nse1 = Embedding(vocab_size, embedding_dim, mask_zero=True)(inputs2)\nse2 = Dropout(0.5)(se1)\nse3 = LSTM(256)(se2)\ndecoder1 = add([fe2, se3])\ndecoder2 = Dense(256, activation='relu')(decoder1)\noutputs = Dense(vocab_size, activation='softmax')(decoder2)\nmodel = Model(inputs=[inputs1, inputs2], outputs=outputs)","defe43a3":"model.summary()","584598c5":"model.layers[2]","694c4163":"model.layers[2].set_weights([embedding_matrix])\nmodel.layers[2].trainable = False","2d4870ce":"model.compile(loss='categorical_crossentropy', optimizer='adam')","7d73e267":"epochs = 1\nnumber_pics_per_bath = 3\nsteps = len(train_descriptions)\/\/number_pics_per_bath","850af05d":"os.makedirs('save_model')","c72bcd23":"# train['1000268201_693b08cb0e.jpg'].shape","33c586c9":"for i in range(epochs):\n    generator = data_generator(train_descriptions, train_features, wordtoix, max_length, number_pics_per_bath)\n    model.fit_generator(generator, epochs=1, steps_per_epoch=steps, verbose=1)\n    model.save('.\/save_model\/model_' + str(i) + '.h5')","5d0d0f38":"# break()","93c845e9":"for i in range(epochs):\n    generator = data_generator(train_descriptions, train_features, wordtoix, max_length, number_pics_per_bath)\n    model.fit_generator(generator, epochs=1, steps_per_epoch=steps, verbose=1)\n    model.save('save_model\/model_' + str(i) + '.h5')","68112720":"model.optimizer.lr = 0.0001\nepochs = 10\nnumber_pics_per_bath = 6\nsteps = len(train_descriptions)\/\/number_pics_per_bath","b833f252":"for i in range(epochs):\n    generator = data_generator(train_descriptions, train_features, wordtoix, max_length, number_pics_per_bath)\n    model.fit_generator(generator, epochs=1, steps_per_epoch=steps, verbose=1)\n    #model.save('.\/model_weights\/model_' + str(i) + '.h5')","1c68f2c2":"model.save_weights('save_model\/model_30.h5')","42cb2607":"model.load_weights('save_model\/model_30.h5')","a656bdde":"images = '..\/input\/flickr-8k-images\/Flickr8k\/Flickr8k_Dataset\/Flicker8k_Dataset\/'","77b54dc8":"with open(\"encoded_test_images.pkl\", \"rb\") as encoded_pickle:\n    encoding_test = load(encoded_pickle)","bff07d39":"def greedySearch(photo):\n    in_text = 'startseq'\n    for i in range(max_length):\n        sequence = [wordtoix[w] for w in in_text.split() if w in wordtoix]\n        sequence = pad_sequences([sequence], maxlen=max_length)\n        yhat = model.predict([photo,sequence], verbose=0)\n        yhat = np.argmax(yhat)\n        word = ixtoword[yhat]\n        in_text += ' ' + word\n        if word == 'endseq':\n            break\n    final = in_text.split()\n    final = final[1:-1]\n    final = ' '.join(final)\n    return final","05d78039":"# z = 0\nz+=2\npic = list(encoding_test.keys())[z]\nimage = encoding_test[pic].reshape((1,2048))\nx=plt.imread(images+pic)\nplt.imshow(x)\nplt.show()\nprint(\"Greedy:\",greedySearch(image))","a0f36bf9":"# z = 0\nz+=1\npic = list(encoding_test.keys())[z]\nimage = encoding_test[pic].reshape((1,2048))\nx=plt.imread(images+pic)\nplt.imshow(x)\nplt.show()\nprint(\"Greedy:\",greedySearch(image))","6cfad717":"# z=0\nz+=5\npic = list(encoding_test.keys())[z]\nimage = encoding_test[pic].reshape((1,2048))\nx=plt.imread(images+pic)\nplt.imshow(x)\nplt.show()\nprint(\"Greedy:\",greedySearch(image))","54549f1c":"# z=0\nz+=5\npic = list(encoding_test.keys())[z]\nimage = encoding_test[pic].reshape((1,2048))\nx=plt.imread(images+pic)\nplt.imshow(x)\nplt.show()\nprint(\"Greedy:\",greedySearch(image))","800d0080":"# # z=0\n# z += 1\n# ptint(z) it will work\n# p+=1    \n# print(p)#its not","73acb68f":"# Error check: https:\/\/github.com\/hlamba28\/Automatic-Image-Captioning\/blob\/master\/Automatic%20Image%20Captioning.ipynb","ef5c128b":"## Visit for better understandning: \nhttps:\/\/towardsdatascience.com\/image-captioning-with-keras-teaching-computers-to-describe-pictures-c88a46a311b8","f473e9cc":"# ResTNet Block ::: http:\/\/ethereon.github.io\/netscope\/#\/gist\/db945b393d40bfa26006","40707f6a":"## Install these library before run"}}