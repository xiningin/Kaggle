{"cell_type":{"14640043":"code","fddf1bb0":"code","159a8e23":"code","d7e1b86a":"code","3d268430":"code","d1c2f331":"code","8612b6b7":"markdown","f223fa7c":"markdown","8d8058ab":"markdown","13074217":"markdown","a31f15e6":"markdown"},"source":{"14640043":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fddf1bb0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\n\n\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","159a8e23":"from sklearn.model_selection import train_test_split\n\ny= train_data['Survived']\nfeatures = [\"Pclass\",\"Sex\",\"SibSp\",\"Parch\"]\n\nX = pd.get_dummies(train_data[features])\nX_train, X_cv, y_train, y_cv = train_test_split(X, y, train_size = 0.8, test_size =0.2)\nX_test = pd.get_dummies(test_data[features])\n\n","d7e1b86a":"from sklearn import metrics\n\ndef score(X_train, y_train, X_cv, y_cv, estimators):\n    model = RandomForestClassifier(n_estimators = estimators, random_state = 0)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_cv)\n    \n    return metrics.f1_score(y_cv, predictions)","3d268430":"estimator_range = 200\nmodels = []\n\nfor i in range(1,estimator_range):\n    models.append(score(X_train, y_train, X_cv, y_cv, i))\n    \nbest_model = models.index(min(models))\nprint(best_model)","d1c2f331":"model = RandomForestClassifier(n_estimators=best_model, max_depth = 5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","8612b6b7":"Loop through a few different values of estimators to find the ebst model","f223fa7c":"Select Data","8d8058ab":"Define a function that will score different models","13074217":"find and submit predictions","a31f15e6":"Import all modules and load data\n"}}