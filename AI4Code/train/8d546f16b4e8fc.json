{"cell_type":{"66e2cc78":"code","4c6d5d66":"code","a18798a3":"code","9b22a3df":"code","ec83f938":"code","90a977dc":"code","e9b30cac":"code","c5d8d9e9":"code","f17ca1a9":"code","3c386fd3":"code","9bf0c26d":"code","127c4fc5":"code","08b92ad8":"code","3b6f8d95":"code","136c5b12":"code","1005c10b":"code","9b40bedc":"code","e433a5cb":"code","d1f04c1a":"code","f7520790":"code","95e3bfb1":"code","60e5f25a":"code","605aaa2f":"code","d5c62693":"code","ffe4832a":"code","19fb5915":"code","6832b8d9":"code","670a7f4e":"code","c6a34f04":"code","b553af51":"code","8032c237":"code","b1b64e4e":"markdown","b9b314ab":"markdown","645e74c4":"markdown","b3449b72":"markdown","b695313f":"markdown","ab7a9501":"markdown","9a2ca17f":"markdown","8bc009c5":"markdown","2418b305":"markdown"},"source":{"66e2cc78":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfrom pathlib import Path\n\nfrom tqdm import tqdm\nimport gc\n\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nfrom plotly.offline import iplot\n\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline = False, world_readable = True)\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\nplt.rcParams[\"figure.figsize\"] = (12, 10)\nplt.rcParams['axes.titlesize'] = 12\n\n   \nfrom time import time, strftime, gmtime\n\nprint(os.listdir('..\/input\/ventilator-pressure-prediction\/'))\n\nstart = time()\nprint(start)\n\nimport datetime\nprint(str(datetime.datetime.now()))\n\nimport warnings\nwarnings.simplefilter('ignore')","4c6d5d66":"base_dir = '..\/input\/ventilator-pressure-prediction\/'","a18798a3":"train = pd.read_csv(base_dir + 'train.csv')\nprint(train.shape)\ntrain.head()","9b22a3df":"test = pd.read_csv(base_dir + 'test.csv')\nprint(test.shape)\ntest.head()","ec83f938":"sub = pd.read_csv(base_dir + 'sample_submission.csv')\nprint(sub.shape)\nsub.head()","90a977dc":"train.describe().T","e9b30cac":"test.describe().T","c5d8d9e9":"train.info()","f17ca1a9":"train.isna().sum(), test.isna().sum()","3c386fd3":"train.nunique(), test.nunique()","9bf0c26d":"train.nunique().iplot(kind = 'bar', \n                        xTitle = 'Features', \n                        yTitle = 'Num of Unique Values', \n                        title = f'<b> Number of Unique Values in Features Train Data <\/b>', \n                        color = 'purple')","127c4fc5":"test.nunique().iplot(kind = 'bar', \n                        xTitle = 'Features', \n                        yTitle = 'Num of Unique Values', \n                        title = f'<b> Number of Unique Values in Features in Test Data<\/b>', \n                        color = 'blue')","08b92ad8":"fig, ax = plt.subplots(1, 2, figsize = (16, 10))\nax[0].set_title('Target: Pressure Distribution')\nsns.distplot(train['pressure'], bins = 150, color = 'green', ax = ax[0])\nax[1].set_title('Target: Log1p - Pressure Distribution')\nsns.distplot(np.log1p(train['pressure']), bins = 150, color = 'green', ax = ax[1])\nsns.despine(trim = True, left = True)","3b6f8d95":"print(f\"There are {train['breath_id'].nunique()} unique breath_ids in train\")","136c5b12":"def plot_breath_id(b_id: int):\n    temp = train[train['breath_id'] == b_id]\n    temp.nunique().iplot(kind = 'bar', \n                        xTitle = 'Features', \n                        yTitle = 'Num of Unique Values', \n                        title = f'<b> Number of Unique Values in Features for breath_id {b_id}<\/b>', \n                        color = 'red')\n    plt.figure(figsize = (16, 4))\n    plt.plot(temp['time_step'], temp['u_in'], label = 'u_in', color = 'green')\n    plt.plot(temp['time_step'], temp['pressure'], label = 'pressure', color = 'red')\n    plt.plot(temp['time_step'], temp['u_out'], label = 'u_out', color = 'yellow')\n    plt.legend()\n    plt.show()\n    plt.title(f'Pressure Distribution for breath_id {b_id}', fontsize = 16)\n    sns.kdeplot(temp['pressure'], shade = True)","1005c10b":"b_id = np.random.choice(train['breath_id'], 1)[0]\nplot_breath_id(b_id)","9b40bedc":"b_id = np.random.choice(train['breath_id'], 1)[0]\nplot_breath_id(b_id)","e433a5cb":"temp = train.copy()\ntemp['shift_1'] = temp['u_in'].shift(1).fillna(0)\ntemp['shift_2'] = temp['u_in'].shift(2).fillna(0)","d1f04c1a":"temp = temp[temp['breath_id'] == 25]\nplt.figure(figsize = (18, 8))\nplt.plot(temp['time_step'], temp['shift_1'], label = 'uin_shift_1', color = 'green')\nplt.plot(temp['time_step'], temp['pressure'], label = 'pressure', color = 'orange')\nplt.legend()\nplt.title('Pressure and u_in_shifted 1')\nplt.show()","f7520790":"plt.figure(figsize = (18, 8))\nplt.plot(temp['time_step'], temp['shift_2'], label = 'uin_shift_2', color = 'blue')\nplt.plot(temp['time_step'], temp['pressure'], label = 'pressure', color = 'orange')\nplt.legend()\nplt.title('Pressure and u_in_shifted 2')\nplt.show()","95e3bfb1":"corr = train.corr()\nplt.subplots(figsize = (12, 8))\nsns.heatmap(corr, vmax = 0.9, cmap = \"Blues\", square = True);","60e5f25a":"#Simple train\/test split\nXtrain, Xvalid, ytrain, yvalid = train_test_split(train.drop(['id', 'breath_id', 'pressure'], axis = 1), train['pressure'], \n                                                  test_size = 0.2, random_state = 42)\nprint(Xtrain.shape, ytrain.shape, Xvalid.shape, yvalid.shape)","605aaa2f":"import xgboost as xgb","d5c62693":"xg_params = {\n        \"subsample\": 0.60,\n        \"colsample_bytree\": 0.40,\n        \"max_depth\": 6,\n        \"learning_rate\": 0.02,\n        \"objective\": \"reg:squarederror\",\n        'disable_default_eval_metric': 1, \n        'metrics': 'mae',\n        \"nthread\": -1,\n        \"tree_method\": \"gpu_hist\",\n        \"gpu_id\": 0,\n        \"max_bin\": 128, \n        'min_child_weight': 2,\n        'reg_lambda': 0.001,\n        'reg_alpha': 0.01, \n        'seed' : 2021,\n    }","ffe4832a":"def evaluate_error(preds, xg_train):\n    labels = xg_train.get_label()\n    err = mean_absolute_error(labels, preds)\n    return 'mae', err","19fb5915":"xg_train = xgb.DMatrix(Xtrain, ytrain)\nxg_valid = xgb.DMatrix(Xvalid, yvalid)\n\nmodel = xgb.train(xg_params, xg_train, 10000,\n                [(xg_valid, 'valid')],\n                verbose_eval = 250,\n                early_stopping_rounds = 50,\n                feval = evaluate_error\n            )","6832b8d9":"fig, ax = plt.subplots(figsize = (8,12))\nxgb.plot_importance(model, height = 0.8, ax = ax)\nplt.show()","670a7f4e":"xg_test = xgb.DMatrix(test.drop(['id', 'breath_id'], axis = 1))\ntest_preds = model.predict(xg_test)\ntest_preds[:10]","c6a34f04":"plt.title(f'Pressure Distribution of Prediction', fontsize = 16)\nsns.kdeplot(test_preds, shade = True, color = 'green');","b553af51":"sub['pressure'] = test_preds\nsub.to_csv('.\/submission.csv', index = False)\nsub.head()","8032c237":"finish = time()\nprint(strftime(\"%H:%M:%S\", gmtime(finish - start)))","b1b64e4e":"### Check data has any missing values","b9b314ab":"# Baseline Model","645e74c4":"![Ventilator](https:\/\/raw.githubusercontent.com\/google\/deluca-lung\/main\/assets\/2020-10-02%20Ventilator%20diagram.svg)","b3449b72":"Let's plot the target along with shift in u_in feature","b695313f":"- Shift 2 matches the pressure","ab7a9501":"# Background\nThere are two types of mechanical ventilators:\n\n- <font color = 'green'> Positive-pressure Ventilation<\/font>: \n    - Pushes the air into the lungs.\n    - Developed in early 1950s to treat polio patients\n    - They may be invasive or noninvasive.\n    - __Invasive Ventilation__:\n        - *Endotracheal intubation*: the tube is inserted into the patient\u2019s airway (trachea) through the mouth or nose\n        - *Tracheostomy*: the tube is inserted through a hole made into the airway.\n    - __Noninvasive Ventilation__:\n        - *Continuous positive airway pressure (CPAP)*: delivers constant and steady air pressure.\n        - *Autotitrating (adjustable) positive airway pressure (APAP)*: changes air pressure according to the breathing pattern.\n        - *Bilevel positive airway pressure (BiPAP)*: delivers air with different pressures for inhalation and exhalation.\n        \n- __Negative-pressure ventilation__: \n    - Sucks the air into the lungs by making the chest expand and contract.\n    - Early ventilators were negative-pressure ventilators\n    - They are very little in use now\n\n\n### <font color = 'green'>Positive-pressure Ventilation<\/font>\nCurrently positive pressure ventilation is the common form of mechanical ventilation in hospitals. The positive-pressure ventilators push the air into the patient\u2019s airway. The ventilator continually blows and stops in regular preset cycles enabling the lungs to receive oxygen and expel carbon dioxide. Positive-pressure ventilators may be\n\n- __Volume-controlled__: delivers a preset volume of air into the patient\u2019s trachea even if it entails high airway pressure. When the flow is stopped the chest recoils and expels the air out.\n- __Pressure-controlled__: delivers air till the airway pressure limit is reached and the valve opens to expel air. The volume of air delivered may vary depending on the airway resistance and lung capacity.\n- __Dual control__: these combine the advantages of volume control and pressure control and deliver airflow based on the requirement and response of the patient.\n\n[Ref](https:\/\/www.medicinenet.com\/different_types_of_mechanical_ventilation\/article.htm)","9a2ca17f":"# Evaluation Metric\nThe competition will be scored as the __mean absolute error__ between the predicted and actual pressures during the inspiratory phase of each breath. The expiratory phase is not scored","8bc009c5":"Thanks to @titericz for this Rapids GPU notebook","2418b305":"# Competition\nIn this competition, we have to simulate a ventilator connected to a sedated patient's lung. The best submissions will take lung attributes compliance and resistance into account.\n\nIn this competition, participants are given numerous time series of breaths and will learn to predict the airway pressure in the respiratory circuit during the breath, given the time series of control inputs.\n\nEach time series represents an approximately 3-second breath. The files are organized such that each row is a time step in a breath and gives the two control signals, the resulting airway pressure, and relevant attributes of the lung."}}