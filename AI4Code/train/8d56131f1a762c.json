{"cell_type":{"89001594":"code","6b248704":"code","8210c441":"code","1943ce61":"code","b213539c":"code","a8e377dc":"code","17c06f23":"code","b7abfa2f":"code","d28c00fb":"code","e256a79c":"code","10057a88":"code","cae0c8e8":"code","a57a911c":"code","7655450a":"code","af656c61":"code","b73528cd":"code","a4198217":"code","faec5071":"code","e7324390":"code","18349c18":"code","403dacaf":"code","4dd2afc7":"code","0a08477f":"code","f270740a":"code","2265a907":"code","e1503186":"code","094a9567":"code","04791d96":"code","f0f648bd":"code","99de4761":"code","8b2720ba":"code","f51a03a1":"code","456da4d2":"code","724727ae":"code","1d5c5437":"code","3ef4762f":"code","f4041b99":"code","9a2a3ca0":"code","51f95927":"code","819e6b11":"code","4df91d61":"markdown","0b67d98f":"markdown","514e1c8c":"markdown","e543a348":"markdown"},"source":{"89001594":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import KFold\nfrom matplotlib import pyplot as plt\nimport lightgbm as lgb\n%matplotlib inline\n\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.preprocessing import StandardScaler","6b248704":"train = pd.read_csv(\"..\/input\/lish-moa\/train_features.csv\")\ntest = pd.read_csv(\"..\/input\/lish-moa\/test_features.csv\")\ntrain_targets_scored = pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_targets_nonscored = pd.read_csv(\"..\/input\/lish-moa\/train_targets_nonscored.csv\")\nsub = pd.read_csv(\"..\/input\/lish-moa\/sample_submission.csv\")\nGENES = [col for col in train.columns if col.startswith('g-')]\nCELLS = [col for col in train.columns if col.startswith('c-')]","8210c441":"#\u5909\u63db\u524d\nplt.hist(x=train[GENES[0]],bins=50)\nplt.title(\"before transform\")\nplt.show()","1943ce61":"#RankGauss\n#https:\/\/www.kaggle.com\/kushal1506\/moa-pytorch-0-01859-rankgauss-pca-nn\nfor col in (GENES + CELLS):\n\n    transformer = QuantileTransformer(n_quantiles=100,random_state=0, output_distribution=\"normal\")\n    vec_len = len(train[col].values)\n    vec_len_test = len(test[col].values)\n    raw_vec = train[col].values.reshape(vec_len, 1)\n    transformer.fit(raw_vec)\n\n    train[col] = transformer.transform(raw_vec).reshape(1, vec_len)[0]\n    test[col] = transformer.transform(test[col].values.reshape(vec_len_test, 1)).reshape(1, vec_len_test)[0]","b213539c":"plt.hist(x=train[GENES[0]],bins=50)\nplt.title(\"Rank Gauss transform\")\nplt.show()","a8e377dc":"#StandardScaler\n#\u8aad\u307f\u76f4\u3057\ntrain = pd.read_csv(\"..\/input\/lish-moa\/train_features.csv\")\ntest = pd.read_csv(\"..\/input\/lish-moa\/test_features.csv\")\nfor col in (GENES + CELLS):\n\n    transformer = StandardScaler()\n    vec_len = len(train[col].values)\n    vec_len_test = len(test[col].values)\n    raw_vec = train[col].values.reshape(vec_len, 1)\n    transformer.fit(raw_vec)\n\n    train[col] = transformer.transform(raw_vec).reshape(1, vec_len)[0]\n    test[col] = transformer.transform(test[col].values.reshape(vec_len_test, 1)).reshape(1, vec_len_test)[0]","17c06f23":"plt.hist(x=train[GENES[0]],bins=50)\nplt.title(\"StandardScaler transform\")\nplt.show()","b7abfa2f":"def label_encoding(train: pd.DataFrame, test: pd.DataFrame, encode_cols):\n    n_train = len(train)\n    train = pd.concat([train, test], sort=False).reset_index(drop=True)\n    for f in encode_cols:\n        try:\n            lbl = preprocessing.LabelEncoder()\n            train[f] = lbl.fit_transform(list(train[f].values))\n        except:\n            print(f)\n    test = train[n_train:].reset_index(drop=True)\n    train = train[:n_train]\n    return train, test","d28c00fb":"train.shape","e256a79c":"train.head()","10057a88":"labels = train_targets_scored.copy()","cae0c8e8":"res = train[\"cp_type\"]==\"trt_cp\"\ntrain = train[res].reset_index(drop=True)\nlabels = labels[res].reset_index(drop=True)","a57a911c":"len(labels)","7655450a":"ans = 0\nfor i in range(len(labels)):\n    if all(i== 0 for i in labels.iloc[i,1:]):\n        ans += 1\n\nprint(ans)","af656c61":"res = train[[\"g-0\",\"g-1\",\"g-2\",\"c-0\",\"c-1\",\"c-2\"]]\nres.describe()","b73528cd":"print(train[\"cp_type\"].unique())\nprint(train[\"cp_time\"].unique())\nprint(train[\"cp_dose\"].unique())","a4198217":"train_targets_scored.head()","faec5071":"sub.head()","e7324390":"res = pd.concat([train,train_targets_scored],axis=1)\nres = res[res[\"cp_type\"]==\"ctl_vehicle\"]\nres = res[train_targets_scored.columns]\nres.describe()","18349c18":"#cp_type == ctl_vehicle\u3060\u3063\u305f\u6642\u306b\u672c\u5f53\u306b1\u3068\u306a\u308b\u5024\u304c\u7121\u3044\u3053\u3068\u3092\u78ba\u8a8d\nal = 0\nfor i in res.columns:\n    if i == \"sig_id\":continue\n    al += res[i].sum()\nprint(al)","403dacaf":"res = pd.concat([train,train_targets_scored],axis=1)\nres = res[res[\"cp_type\"]==\"trt_cp\"]\nres = res[train_targets_scored.columns]\nres.describe()","4dd2afc7":"ret = []\nfor i in train_targets_scored.columns:\n    if i == \"sig_id\":continue\n    ret.append(train_targets_scored[i].sum())\nprint(*ret)\nprint(max(ret),min(ret),sum(ret)\/len(ret))","0a08477f":"test.head()","f270740a":"df = train.loc[[i for i in range(5)],[\"g-0\",\"g-1\",\"g-2\"]]","2265a907":"df","e1503186":"#\u9806\u756a\u3092\u4fdd\u6301\ndf2 = df.copy()\nfor i in range(5):\n    df2[\"g-0\"][i] = str((i,df[\"g-0\"][i]))\n    df2[\"g-1\"][i] = str((i,df[\"g-1\"][i]))\n    df2[\"g-2\"][i] = str((i,df[\"g-2\"][i]))","094a9567":"df2","04791d96":"#2\u3064\u3081\u306e\u8981\u7d20\u3067\u6607\u9806\u306b\u30bd\u30fc\u30c8\nlst = [[] for _ in range(3)]\nfor i in range(5):\n    lst[0].append((i,df[\"g-0\"][i]))\n    lst[1].append((i,df[\"g-1\"][i]))\n    lst[2].append((i,df[\"g-2\"][i]))","f0f648bd":"lst","99de4761":"from operator import itemgetter\nfor i in range(3):\n    lst[i].sort(key=itemgetter(1))","8b2720ba":"lst","f51a03a1":"#\u9806\u756a\u3092\u4fdd\u6301\ndf2 = df.copy()\nfor i in range(5):\n    df2[\"g-0\"][i] = str(lst[0][i])\n    df2[\"g-1\"][i] = str(lst[1][i])\n    df2[\"g-2\"][i] = str(lst[2][i])","456da4d2":"df2","724727ae":"df2[\"mean\"] = 0.\nfor i in range(5):\n    df2[\"mean\"][i] = sum([lst[j][i][1] for j in range(3)])","1d5c5437":"df2","3ef4762f":"df3 = df2.copy()\nlst2 = [[] for _ in range(3)]\nfor i in range(5):\n    df3[\"g-0\"][i] = str((lst[0][i][0],df2[\"mean\"][i].round(4)))\n    df3[\"g-1\"][i] = str((lst[1][i][0],df2[\"mean\"][i].round(4)))\n    df3[\"g-2\"][i] = str((lst[2][i][0],df2[\"mean\"][i].round(4)))\n    \n    lst2[0].append((lst[0][i][0],df2[\"mean\"][i].round(4)))\n    lst2[1].append((lst[1][i][0],df2[\"mean\"][i].round(4)))\n    lst2[2].append((lst[2][i][0],df2[\"mean\"][i].round(4)))\ndf3","f4041b99":"lst2\n","9a2a3ca0":"for i in range(3):\n    lst2[i].sort()\n\ndf2 = df.copy()\nfor i in range(5):\n    df2[\"g-0\"][i] = str(lst2[0][i])\n    df2[\"g-1\"][i] = str(lst2[1][i])\n    df2[\"g-2\"][i] = str(lst2[2][i])","51f95927":"df2","819e6b11":"df2 = df.copy()\nfor i in range(5):\n    df2[\"g-0\"][i] = lst2[0][i][1]\n    df2[\"g-1\"][i] = lst2[1][i][1]\n    df2[\"g-2\"][i] = lst2[2][i][1]\ndf2","4df91d61":"\"cp_type\"==\"ctl_vehicle\"\u3067\u3042\u308b\u3082\u306e\u306f\u6b63\u89e3\u30e9\u30d9\u30eb\u306b1\u304c\u7acb\u3063\u3066\u3044\u308b\u3082\u306e\u304c1\u3064\u3082\u306a\u3044(\u3053\u308c\u304c\u3001\"\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u6442\u52d5\u306f\u4f5c\u7528\u6a5f\u5e8f\u3092\u6301\u305f\u306a\u3044\"\u306e\u610f\u5473\u3067\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u308b)\n\u305d\u3082\u305d\u3082\u3001\u967d\u6b63\u89e3\u30e9\u30d9\u30eb\u3092\u6301\u305f\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u30c7\u30fc\u30bf\u304b\u3089\u5f3e\u3044\u3066\u3057\u307e\u3046\u306e\u3082\u624b\u3060\u304c(\u4f8b\u3048\u3070\u3001\"cp_type\"==\"ctl_vehicle\"\u3067\u3042\u308b\u6642\u70b9\u3067100%\u5168\u3066\u304c0\u306b\u306a\u308b\u7279\u5fb4\u91cf\u3067\u3042\u308b\u3068\u8a00\u3048\u308b\u306e\u3067\u3001\u7121\u610f\u5473)\u3001\"cp_type\"\u3092\u96a0\u3057\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3053\u3068\u3067\u3001\u4f55\u3089\u304b\u306e\u7279\u5fb4\u3092\u63b4\u3080\u53ef\u80fd\u6027\u306f\u3042\u308a\u305d\u3046\uff1f","0b67d98f":"# EDA  ","514e1c8c":"# StandardScaler\u3068Rank Gauss\u306e\u9055\u3044","e543a348":"# Quantile Norm"}}