{"cell_type":{"aad3f805":"code","2661e993":"code","8aa34ce4":"code","a50f67ca":"code","4c99f1d3":"code","b5ea4df7":"code","ea9e4ee4":"code","8d0fede4":"code","5514f69e":"code","17cc173c":"code","e9f56410":"code","25010f53":"code","0659556a":"code","b5619ea4":"code","d5d054ae":"code","aac45127":"code","52b55749":"code","ab1088b0":"code","70f09ddd":"code","f32a9693":"code","5ba1899d":"code","ac1eadd6":"code","748de185":"code","d53e1660":"code","947122dc":"markdown","f82019a3":"markdown","3c7b9fd1":"markdown","219fa346":"markdown","0770901e":"markdown","a9195c3c":"markdown"},"source":{"aad3f805":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2661e993":"import matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go","8aa34ce4":"# Importing data\ndf = pd.read_csv('\/kaggle\/input\/gamestop-historical-stock-prices\/GME_stock.csv')\ndf.head()","a50f67ca":"df.info()","4c99f1d3":"# Converting the date column into datetime index\ndf['date'] = pd.to_datetime(df['date'])\ndf.set_index('date',inplace=True)\ndf.head()","b5ea4df7":"# Plotting the open, close, high, low, volume and adjusted close value for the term of 12 months\nfig = px.line(df, x=df.index, y=df.columns,\n              title='Plot of values for a 12 month period')\nfig.update_xaxes(\n    dtick=\"M12\",\n    tickformat=\"%b\\n%Y\")\nfig.show()","ea9e4ee4":"# Plotting the data from december 2020 to january 2021 to view the trend\nfig = px.line(df, x=df.index, y=df.columns, \n              range_x=['2020-12-01','2021-01-28'],\n              title='Plot of values for December 20 and January 21')\nfig.show()","8d0fede4":"# Plotting the data using range slider\nfig = px.line(df, x=df.index, y=df.columns, \n              title='Plot of data with range slider')\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","5514f69e":"# Plotting the total amount traded\ndf['total_amount_traded'] = df['open_price']*df['volume']\n\nfig = px.line(df, x=df.index, y=df.total_amount_traded,\n              title='Plot of total amount traded')\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.show()","17cc173c":"# Plotting the moving average for the opening price\ndf['MA256'] = df['open_price'].rolling(256).mean()\ndf[['open_price','MA256']].plot(figsize=(16,8))","e9f56410":"# Plotting the exponential moving average for the opening price\ndf['EWMA12'] = df['open_price'].ewm(span=12).mean()\ndf[['open_price','EWMA12']].plot(figsize=(16,8))","25010f53":"# Plotting candlestick chart\nfig = go.Figure(data=[go.Candlestick(x=df.index,\n                open=df['open_price'],\n                high=df['high_price'],\n                low=df['low_price'],\n                close=df['close_price'])])\n\nfig.show()","0659556a":"# Importing required libraries for LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM","b5619ea4":"#creating dataframe\ndata = df.sort_index(ascending=True, axis=0)\nnew_data = pd.DataFrame(index=range(0,len(df)),columns=['Date', 'Close'])\nfor i in range(0,len(data)):\n    new_data['Date'][i] = data.index[i]\n    new_data['Close'][i] = data['close_price'][i]\nnew_data.head()","d5d054ae":"#setting index\nnew_data['Date'] = pd.to_datetime(new_data['Date'])\nnew_data.set_index('Date',inplace=True)\nnew_data.head()","aac45127":"# Creating train and test sets\ndataset = new_data.values\n\ntrain = dataset[0:3773,:]\nvalid = dataset[1000:,:]","52b55749":"# Feature scaling\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_data = scaler.fit_transform(dataset)","ab1088b0":"# Converting dataset into x_train and y_train for 60 timesteps\nx_train, y_train = [], []\nfor i in range(60,len(train)):\n    x_train.append(scaled_data[i-60:i,0])\n    y_train.append(scaled_data[i,0])\nx_train, y_train = np.array(x_train), np.array(y_train)\n\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))","70f09ddd":"# Build the LSTM model\nregressor = Sequential()\n\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\n\nregressor.add(Dense(units = 1))\n\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\nregressor.fit(x_train, y_train, epochs = 100, batch_size = 32)","f32a9693":"# Predicting values, using past 60 from the train data\ninputs = new_data[len(new_data) - len(valid) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs  = scaler.transform(inputs)","5ba1899d":"X_test = []\nfor i in range(60,inputs.shape[0]):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)","ac1eadd6":"X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nclosing_price_pred = regressor.predict(X_test)\nclosing_price_pred = scaler.inverse_transform(closing_price_pred)","748de185":"rms=np.sqrt(np.mean(np.power((valid-closing_price_pred),2)))\nrms","d53e1660":"# Plotting\ntrain = new_data[:3773]\nvalid = new_data[1000:]\nvalid['Predictions'] = closing_price_pred\nplt.plot(train['Close'])\nplt.plot(valid[['Close','Predictions']])","947122dc":"## Importing necessary libraries","f82019a3":"## Visualization","3c7b9fd1":"As seen from the abpve plot, there is a sudden surge in the values of the opening price, closing price, high price, low price, volume and the adjusted closing price.","219fa346":"There is a sudden surge in the open price on 27 january 2021. But the volume experienced a surge right before on 13 january 2021. ","0770901e":"## Analyze data","a9195c3c":"## Prediction - Using LSTM model "}}