{"cell_type":{"5ea35a3b":"code","ca69ead3":"code","1b6653e6":"code","f04589e7":"code","e6f3e46d":"code","e75ff99d":"code","5e4e70c1":"code","3b0f4452":"code","cd74399f":"code","bf746022":"code","11040b39":"code","6834e253":"code","5d4f47e6":"code","46860c9b":"code","a56bd100":"code","b2146f03":"code","3e711de8":"code","e045c55b":"code","292ffb65":"code","09b8a1d5":"code","563c2f61":"code","b73b4d2a":"code","ea949bf2":"code","683f8788":"code","4fc1b7f4":"code","d4759ca5":"code","4d41787c":"code","20002981":"code","9df66d8a":"code","ce544fd0":"code","c95f7232":"code","1d767370":"code","5683a945":"code","716ef5f1":"code","7a7b71e6":"code","1ec19ba2":"code","c7f814e0":"code","882087db":"code","4a54c3a3":"code","d63569bf":"code","eabaafc4":"code","4c828e4a":"code","b6feac27":"code","288f2763":"code","615a8e2b":"code","fd01056a":"code","1c8938cb":"code","01511629":"code","9e1f62a9":"markdown","b8cca11e":"markdown","389eea9d":"markdown"},"source":{"5ea35a3b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ca69ead3":"dataset = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","1b6653e6":"dataset.head(5)","f04589e7":"dataset.info()","e6f3e46d":"dataset.isnull().sum()","e75ff99d":"plt.figure(figsize=(15,10))\nsns.heatmap(dataset.corr(), annot=True)","5e4e70c1":"age_chol_df = dataset.groupby('age',as_index=False)['chol'].mean()\nage_chol_df.style.background_gradient(cmap='Reds')","3b0f4452":"numerical_features = [feat for feat in dataset.columns if feat not in ['output']]","cd74399f":"numerical_features","bf746022":"for feat in numerical_features:\n    df = dataset.groupby(feat)['output'].count()\n    print(feat,',', 'Unique :',len(dataset[feat].unique()))\n   ","11040b39":"discrete_feat = [feat for feat in numerical_features if len(dataset[feat].unique())<10]\ndiscrete_feat\n    ","6834e253":"continuous_feat = [feat for feat in numerical_features if feat not in discrete_feat]\ncontinuous_feat","5d4f47e6":"for feat in discrete_feat:\n    print(feat,',', 'Unique :',len(dataset[feat].unique()),dataset.groupby('output')[feat].count())","46860c9b":"for feat in discrete_feat:\n    data = dataset.copy()\n    \n    sns.set_color_codes()\n    plt.figure(figsize=(10,7))\n    plt.style.use(\"ggplot\")\n    sns.histplot(data[feat],color='red')\n    plt.xlabel(feat,fontsize=12)\n    plt.ylabel(\"COUNT\",fontsize=12)\n    plt.show()","a56bd100":"for feat in continuous_feat:\n    plt.figure(figsize=(10,7))\n    plt.style.use(\"ggplot\")\n    hue =['sex']\n    for i in hue:\n        sns.histplot(data= dataset, x =dataset[feat],hue=i )\n        plt.xlabel(feat)\n        plt.ylabel('Count')\n        plt.show()","b2146f03":"for feat in continuous_feat:\n    plt.figure(figsize=(10,7))\n    plt.style.use(\"ggplot\")\n    hue =['output']\n    for i in hue:\n        sns.histplot(data= dataset, x =dataset[feat],hue=i )\n        plt.xlabel(feat)\n        plt.ylabel('Count')\n        plt.show()","3e711de8":"for feat in continuous_feat:\n    plt.figure(figsize=(10,7))\n    plt.style.use(\"ggplot\")\n    hue =['cp']\n    for i in hue:\n        sns.histplot(data= dataset, x =dataset[feat],hue=i )\n        plt.xlabel(feat)\n        plt.ylabel('Count')\n        plt.show()","e045c55b":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\nimport xgboost \n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.decomposition import PCA","292ffb65":"X = dataset.drop('output',axis=1)\ny = dataset['output']","09b8a1d5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)","563c2f61":"pipe_LogReg = Pipeline([('scaler',MinMaxScaler()),\n                        ('pca1',PCA()),\n                        ('LogisticRegression',LogisticRegression(C=2))])\n\npipe_knn = Pipeline([('scaler',MinMaxScaler()),\n                     ('pca1',PCA()),\n                    ('KNeighborsClassifier',KNeighborsClassifier())])\n\npipe_Svm = Pipeline([('scaler',MinMaxScaler()),\n                     ('pca1',PCA()),\n                    ('SVC',SVC())])\n\npipe_RForest = Pipeline([('scaler',MinMaxScaler()),\n                    ('pca1',PCA()),     \n                   ('RandomForestClassifier',RandomForestClassifier())])\n\n\npipe_Ada = Pipeline([('scaler',MinMaxScaler()),\n                     ('pca1',PCA()),\n                  ('AdaBoostClassifier',AdaBoostClassifier())])\n\npipe_Ada_RF = Pipeline([('scaler',MinMaxScaler()),\n                     ('pca1',PCA()),\n                  ('AdaBoostClassifier_rf',AdaBoostClassifier(base_estimator=RandomForestClassifier(n_estimators=100),learning_rate=.1,algorithm='SAMME.R'))])","b73b4d2a":"pipelines1 = [pipe_LogReg ,pipe_knn,pipe_Svm,pipe_RForest,pipe_Ada,pipe_Ada_RF]","ea949bf2":"for pipe in pipelines1:\n    pipe.fit(X_train,y_train)","683f8788":"model_name1 =[]\nscores1=[]\n\nfor i,model in enumerate(pipelines1):\n    pred = model.predict(X_test)\n    score = accuracy_score(y_test,pred)\n    model_name1.append(model.steps[2][0])\n    scores1.append(score)\n    print(model.steps[2][0].upper(),score)\n    print('\\n')","4fc1b7f4":"scores1","d4759ca5":"plt.figure(figsize = (17,9))\nsns.barplot(x = model_name1, y = scores1)","4d41787c":"pipe_LogReg = Pipeline([('scaler',StandardScaler()),\n                        ('LogisticRegression',LogisticRegression())])\n\npipe_knn = Pipeline([('scaler',StandardScaler()),\n                        ('KNeighborsClassifier',KNeighborsClassifier())])\n\npipe_Svm = Pipeline([('scaler',StandardScaler()),\n                        ('SVC',SVC(C=2))])\n\npipe_RForest = Pipeline([('scaler',StandardScaler()),\n                  ('RandomForestClassifier',RandomForestClassifier())])\n\n\npipe_Ada = Pipeline([('scaler',StandardScaler()),\n                  ('AdaBoostClassifier',AdaBoostClassifier())])","20002981":"pipelines2 = [pipe_LogReg ,pipe_knn,pipe_Svm,pipe_RForest,pipe_Ada]","9df66d8a":"for pipe in pipelines2:\n    pipe.fit(X_train,y_train)","ce544fd0":"model_name2 =[]\nscores2=[]\n\nfor i,model in enumerate(pipelines2):\n    pred2 = model.predict(X_test)\n    score = accuracy_score(y_test,pred2)\n    model_name2.append(model.steps[1][0])\n    scores2.append(score)\n    print(i,model.steps[1][0].upper(),':',score)\n    print('\\n')","c95f7232":"plt.figure(figsize = (15,8))\nsns.barplot(x = model_name2, y = scores2)","1d767370":"\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier","5683a945":"rf_classifier =RandomForestClassifier()","716ef5f1":"params = {\n    'n_estimators':[int(x) for x in np.linspace(100,1000,10)],\n    'criterion':[\"gini\", \"entropy\"],\n    'max_depth':[int(x) for x in np.linspace(1,100,10)],\n    'min_samples_split':[1,2,3,4,6,8,10,13],\n    'min_samples_leaf':[1,2,3,4,5,6,7,8],\n    'max_features':[\"sqrt\", \"log2\",\"auto\"],\n    'n_jobs':[4],\n    'verbose':[2]\n}","7a7b71e6":"rand_srchCV = RandomizedSearchCV(estimator=rf_classifier,\n    param_distributions=params,\n    n_iter=100,\n    n_jobs=4,\n    cv=5,\n    verbose=2)","1ec19ba2":"rand_srchCV.fit(X_train,y_train)","c7f814e0":"rand_srchCV.best_score_","882087db":"rand_srchCV.best_params_","4a54c3a3":"rf_pred = rand_srchCV.predict(X_test)","d63569bf":"print('accuracy :',accuracy_score(y_test,rf_pred))","eabaafc4":"X_train_knn = X_train\nX_test_knn = X_test","4c828e4a":"scaler = StandardScaler()\n","b6feac27":"X_train_knn = scaler.fit_transform(X_train_knn)\nX_test_knn =scaler.fit_transform(X_test_knn)","288f2763":"error_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train_knn,y_train)\n    knn_pred = knn.predict(X_test_knn)\n    error_rate.append(np.mean(knn_pred != y_test))\n    ","615a8e2b":"error_rate","fd01056a":"plt.figure(figsize=(15,9))\nplt.plot(range(1,40),error_rate,marker='o')\nplt.xlabel('range(1,40)')\nplt.ylabel('errorRate')","1c8938cb":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train_knn,y_train)\nknn_pred2 = knn.predict(X_test_knn)","01511629":"print('accuracy :',accuracy_score(y_test,knn_pred2))","9e1f62a9":"# RandomizedSearchCV","b8cca11e":"# PipeLines","389eea9d":"# KNNCLASSIFIER"}}