{"cell_type":{"947902ea":"code","aa21057a":"code","b1d0d20c":"code","1bd6af59":"code","1ba3cf61":"code","56dd5c96":"code","d8e9e9be":"code","6485d80f":"code","0b62940a":"code","ef9ce968":"code","4aaaab7c":"code","154fb181":"code","246f316e":"code","dcc47f04":"code","d1735b00":"code","ced624d1":"code","9f7b4958":"code","50318c9e":"code","a6782dac":"code","cfff0820":"code","9f1a000e":"code","afce4eb5":"code","2e5d1824":"code","68e71ea3":"code","aa05953d":"code","17392a81":"code","635486b9":"code","f1c5e4e9":"code","64ccc3a6":"code","0eb36162":"code","e8ff6103":"code","7d817681":"code","30c82b8d":"code","67aca919":"code","c4821738":"code","520a0fab":"code","4de2881d":"code","3022b7f3":"code","5757de87":"code","84aee029":"code","570b5a9f":"code","2a531bfc":"code","6692c344":"code","5cc47c0b":"code","ca7506d2":"code","b227208b":"code","82d56dfa":"code","d8e612a9":"code","b5eb0e9b":"code","12615b4f":"code","030e50bb":"code","4e1f8100":"code","50664cce":"code","f162c92c":"code","bf0384c5":"code","283cd781":"code","f1a24b3f":"code","b6dff1ec":"code","9ff9dc73":"code","4011b743":"code","c9dc4842":"code","9fb39dfb":"code","e7aab2d5":"code","610fc7d2":"code","79a335dd":"code","da4b8a59":"code","31e5d82f":"code","408e9640":"code","2012393d":"code","6523cc65":"code","e8d326cf":"code","f079cdb5":"code","01d2b54b":"code","ddfcc609":"code","26af1016":"code","4f9760ba":"code","d46c2f44":"code","3504fce8":"code","5672b920":"code","8f4224b1":"code","95a50942":"code","a08851b7":"code","c1e4e96f":"code","9d175609":"code","f8e11a5a":"code","d8e017c3":"code","c2ecc85d":"code","bc4e2ef5":"code","d12d78be":"code","b03a3beb":"code","707e3b69":"code","f664c5c2":"code","e4ea38c4":"code","bd7d771f":"code","86ca10cd":"code","e47af013":"code","69ad5581":"code","eee2053c":"code","0eeb9bd5":"code","f8d7ed35":"code","116b45c8":"code","2c4812ee":"code","8764f3dc":"code","16f3a0ec":"code","ad03caee":"code","eb1e2558":"code","d05a48e6":"code","5c3d00cf":"code","f327f3ca":"code","5ad8fe3e":"code","0c49fcc9":"code","6faa247d":"code","4ff83beb":"code","0be1f08a":"code","72ac811e":"code","abf01493":"code","8a3b8df9":"code","31e28db8":"code","c04dc441":"code","f69bcc63":"code","ce8a0fdd":"code","05f7f70d":"code","21d9edb4":"code","70fe43d3":"code","1ea196b6":"code","61261c74":"code","4adf93bc":"code","b8369612":"code","795ffcfb":"code","d343bf51":"code","20b37168":"code","5401cbe7":"code","2da92c06":"code","6a1e303f":"code","016dc50a":"code","bd628bf5":"code","925a3520":"code","60b80dae":"code","62dc508a":"code","3399a941":"code","ef4beb9e":"code","28648d68":"code","5425cdf1":"code","fa6f6a19":"code","a621468f":"code","e492a9a8":"code","e7255000":"code","cc0ebbe1":"code","81421d6d":"code","cdba63f6":"code","c9d9e191":"code","be5bc2b5":"code","771cc9fe":"code","8c9c3df6":"code","efb05d11":"code","802c4345":"code","2dca4817":"code","41fea602":"code","550963de":"code","29945dd1":"code","7dec4472":"code","240de2e3":"code","5f9f393c":"code","f3af1163":"code","bf1a5108":"code","2eeff19b":"code","1e17d638":"code","af639215":"code","a9c5e970":"code","3778951f":"code","f31934fd":"code","8aec36a2":"code","a3c3a696":"code","0eca150a":"code","41e1cc5e":"code","2eb2303b":"code","833a5d4e":"markdown","a0e468aa":"markdown","00000c5b":"markdown","b4c64349":"markdown","d47b5e5d":"markdown","2c36fdb7":"markdown","9394ae53":"markdown","e95fdf2e":"markdown","56317c64":"markdown","a01c6907":"markdown","63c8c2ef":"markdown","ed60ddb6":"markdown","631e599f":"markdown","e1ba2dc7":"markdown","4d03e615":"markdown","8eecb951":"markdown","bd1c1d30":"markdown","186630ab":"markdown","f8801362":"markdown","d1146eb8":"markdown","5f876551":"markdown","d13f86e6":"markdown","80e2ddf6":"markdown","8cf3bd2b":"markdown","d1493186":"markdown","27afd227":"markdown","583b610c":"markdown","a2bc1302":"markdown","5d14bdc6":"markdown","7c6a136d":"markdown","74c0aa0a":"markdown","fa232220":"markdown","d391e13f":"markdown","de787351":"markdown","5f14b038":"markdown","6e83bcde":"markdown","60789cea":"markdown","20b7cca2":"markdown","7becff2d":"markdown","6e332227":"markdown","a752dedb":"markdown","9f8fd66d":"markdown","3293782d":"markdown","a0cef663":"markdown","57f709f2":"markdown","4ebfb21c":"markdown","c9c00039":"markdown","2eee22bc":"markdown","f68580ac":"markdown","609c66fb":"markdown","c4cc4bce":"markdown","19da3737":"markdown","9b7b9092":"markdown","8a574b49":"markdown","e6ba10b8":"markdown","387fe0f0":"markdown","6e1713d7":"markdown","da723b0e":"markdown","4a66993e":"markdown","3f457775":"markdown","5d9c636d":"markdown","a8c1f98d":"markdown","b68abc1e":"markdown","587a0d05":"markdown","2803ec41":"markdown","b33e72b9":"markdown","52159a06":"markdown","c08ee541":"markdown","50a19c06":"markdown","f7694024":"markdown","8c6b27a6":"markdown","12f8aff8":"markdown","1a445a89":"markdown","bf870925":"markdown","f78a7e68":"markdown","16fb0e07":"markdown","a36a0c3c":"markdown","97e38185":"markdown","b2493249":"markdown","5312b89e":"markdown","42fe67f9":"markdown","68d68bc9":"markdown","3e2801dd":"markdown","6b2dd29a":"markdown","a66d4167":"markdown"},"source":{"947902ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa21057a":"import numpy as np \nimport pandas as pd\n\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b1d0d20c":"Direct_Marketing=pd.read_csv(\"\/kaggle\/input\/direct-marketing\/DirectMarketing.csv\")\ndf=Direct_Marketing.copy()\ndf.head(25)","1bd6af59":"df.info()","1ba3cf61":"# Columns Types\ndf.dtypes","56dd5c96":"# Size Of Data Set\ndf.shape","d8e9e9be":"# Duplicated data\ndf[df.duplicated() == True]","6485d80f":"# Unique Value\n{column: list(df[column].unique()) for column in df.select_dtypes('object').columns}","0b62940a":"df.isnull().values.any()","ef9ce968":"df.isnull().sum()","4aaaab7c":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(df)","154fb181":"df.corr()","246f316e":"print(\"Correlation Matrix\")\nplt.rcParams['figure.figsize']=(8,6)\nsns.heatmap(df.corr(),cmap='coolwarm',linewidths=.5,fmt=\".2f\",annot = True);","dcc47f04":"df.describe().T","d1735b00":"df_Age=df['Age'].value_counts().to_frame().reset_index().rename(columns={'index':'Age','Age':'count'})\ndf_Age","ced624d1":"df_Age=df['Age'].value_counts().to_frame().reset_index().rename(columns={'index':'Age','Age':'count'})\n\n\nfig = go.Figure([go.Pie(labels=df_Age['Age'], values=df_Age['count'], pull=[0.2,0,0],hole=0.4)])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\n\nfig.update_layout(title=\"Age Distribution\",title_x=0.5)\nfig.show()","9f7b4958":"df_Age=df['Age'].value_counts().to_frame().reset_index().rename(columns={'index':'Age','Age':'count'})\n\nfig = go.Figure(go.Bar(\n    x=df_Age['Age'],y=df_Age['count'],\n    marker={'color': df_Age['count'], \n    'colorscale': 'Viridis'},  \n    text=df_Age['count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Age Distribution',xaxis_title=\"Age\",yaxis_title=\"Count \",title_x=0.5)\nfig.show()","50318c9e":"df_Age_Salary=df.groupby(by =['Age'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Age_AmountSpent=df.groupby(by =['Age'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Age':'Age1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Age_Salary,df_Age_AmountSpent], axis=1)\nresult.drop(['Age1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult","a6782dac":"df_Age_Salary=df.groupby(by =['Age'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Age_AmountSpent=df.groupby(by =['Age'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Age':'Age1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Age_Salary,df_Age_AmountSpent], axis=1)\nresult.drop(['Age1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Age AVG Salary \",\n                                   \"Age AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['Age'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'fall'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Age'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \"Age \",title_x=0.5)\nfig.show()","cfff0820":"# Scatter plot - Category\n\nfig = px.scatter(df, x='Salary', y='AmountSpent',trendline=\"ols\",\n                 color='Age') # Added color to basic scatter\nfig.update_layout(title='Age With Salary Vs Amount Spent ',xaxis_title=\"Salary\",yaxis_title=\"Amount Spent\",title_x=0.5)\nfig.show()","9f1a000e":"df_Gender=df['Gender'].value_counts().to_frame().reset_index().rename(columns={'index':'Gender','Gender':'count'})\ndf_Gender","afce4eb5":"fig = go.Figure(go.Bar(\n    x=df_Gender['Gender'],y=df_Gender['count'],\n    marker={'color': df_Gender['count'], \n    'colorscale': 'Viridis'},  \n    text=df_Gender['count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Gender Distribution',xaxis_title=\"Gender\",yaxis_title=\"Count \",title_x=0.5)\nfig.show()","2e5d1824":"df_Gender_Salary=df.groupby(by =['Gender'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Gender_AmountSpent=df.groupby(by =['Gender'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Gender':'Gender1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Gender_Salary,df_Gender_AmountSpent], axis=1)\nresult.drop(['Gender1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Gender AVG Salary \",\n                                   \"Gender AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['Gender'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'fall'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Gender'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \"Gender \",title_x=0.5)\nfig.show()","68e71ea3":"# Scatter plot - Category\n\nfig = px.scatter(df, x='Salary', y='AmountSpent',trendline=\"ols\",\n                 color='Gender') # Added color to basic scatter\nfig.update_layout(title='Gender With Salary Vs Amount Spent ',xaxis_title=\"Salary\",yaxis_title=\"Amount Spent\",title_x=0.5)\nfig.show()","aa05953d":"df_G_and_A=df.groupby(by =['Gender','Age'])['Married'].count().to_frame().reset_index().rename(columns={'Gender':'Gender','Age':'Age','Married':'count'})\ndf_G_and_A","17392a81":"df_G_and_A=df.groupby(by =['Gender','Age'])['Married'].count().to_frame().reset_index().rename(columns={'Gender':'Gender','Age':'Age','Married':'count'})\n\nfig = px.bar(df_G_and_A, x=\"Age\", y=\"count\",color=\"Gender\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Age Count With Gender',title_x=0.5,yaxis_title=\"Count\",\n                 )\nfig.show()","635486b9":"df_G_and_A=df.groupby(by =['Gender','Age'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'AmountSpent':'AVG_AmountSpent'})\ndf_G_and_A[\"AVG_AmountSpent\"]=df_G_and_A[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\ndf_G_and_A","f1c5e4e9":"df_G_and_A=df.groupby(by =['Gender','Age'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'AmountSpent':'AVG_AmountSpent'})\ndf_G_and_A[\"AVG_AmountSpent\"]=df_G_and_A[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\nfig = px.bar(df_G_and_A, x=\"Age\", y=\"AVG_AmountSpent\",color=\"Gender\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Age Amount Spent With Gender,Age',title_x=0.5,yaxis_title=\"Amount Spent\",\n                 )\nfig.show()","64ccc3a6":"df_age_gender_agg=df.groupby(by=[\"Age\",\"Gender\"])['AmountSpent'].agg([\"min\",\"mean\",\"max\"])\ndf_age_gender_agg","0eb36162":"df_G_and_A_AVG=df.groupby(by =['Gender','Age'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Gender':'Gender','Age':'Age','AmountSpent':'AVG_AmountSpent'})\ndf_G_and_A_Max=df.groupby(by =['Gender','Age'])['AmountSpent'].max().to_frame().reset_index().rename(columns={'Gender':'Gender1','Age':'Age1','AmountSpent':'Max_AmountSpent'})\ndf_G_and_A_Min=df.groupby(by =['Gender','Age'])['AmountSpent'].min().to_frame().reset_index().rename(columns={'Gender':'Gender2','Age':'Age2','AmountSpent':'Min_AmountSpent'})\ndf_G_and_A_Count=df.groupby(by =['Gender','Age'])['AmountSpent'].count().to_frame().reset_index().rename(columns={'Gender':'Gender3','Age':'Age3','AmountSpent':'Count'})\nresult = pd.concat([df_G_and_A_AVG, df_G_and_A_Max,df_G_and_A_Min,df_G_and_A_Count], axis=1)\nresult.drop(['Gender1','Gender2','Gender3','Age1','Age2','Age3'],inplace=True,axis=1)\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult[\"Gender_Age\"]=result[\"Gender\"]+\" \"+result[\"Age\"]\nresult.drop(['Gender','Age'],inplace=True,axis=1)\nresult","e8ff6103":"df_G_and_A_AVG=df.groupby(by =['Gender','Age'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Gender':'Gender','Age':'Age','AmountSpent':'AVG_AmountSpent'})\ndf_G_and_A_Max=df.groupby(by =['Gender','Age'])['AmountSpent'].max().to_frame().reset_index().rename(columns={'Gender':'Gender1','Age':'Age1','AmountSpent':'Max_AmountSpent'})\ndf_G_and_A_Min=df.groupby(by =['Gender','Age'])['AmountSpent'].min().to_frame().reset_index().rename(columns={'Gender':'Gender2','Age':'Age2','AmountSpent':'Min_AmountSpent'})\ndf_G_and_A_Count=df.groupby(by =['Gender','Age'])['AmountSpent'].count().to_frame().reset_index().rename(columns={'Gender':'Gender3','Age':'Age3','AmountSpent':'Count'})\nresult = pd.concat([df_G_and_A_AVG, df_G_and_A_Max,df_G_and_A_Min,df_G_and_A_Count], axis=1)\nresult.drop(['Gender1','Gender2','Gender3','Age1','Age2','Age3'],inplace=True,axis=1)\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult[\"Gender_Age\"]=result[\"Gender\"]+\" \"+result[\"Age\"]\nresult.drop(['Gender','Age'],inplace=True,axis=1)\n\nfig = make_subplots(rows=4, cols=1,\n                   subplot_titles=(\" Mean Amount Spent\",\n                                   \" Min Amount Spent\",\n                                   \" Max Amount Spent\",\n                                   \" Count \"))  # Subplot titles\n\nfig.add_trace(go.Bar(\n    x=result['Gender_Age'],y=result['AVG_AmountSpent'],\n    name=\"Mean\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Gender_Age'],y=result['Min_AmountSpent'],\n    name=\"Min\",\n    marker={'color': result['Min_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['Min_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Gender_Age'],y=result['Max_AmountSpent'],\n    name=\"Max\",\n    marker={'color': result['Max_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['Max_AmountSpent'],\n    textposition = \"inside\"),\n    row=3, col=1           \n)\nfig.add_trace(go.Bar(\n    x=result['Gender_Age'],y=result['Count'],\n    name=\"Count\",\n    marker={'color': result['Count'], \n    'colorscale': 'fall'},  \n    text=result['Count'],\n    textposition = \"inside\"),\n    row=4, col=1           \n)\nfig.update_layout(title = \"Gender Age With Amount Spent\",title_x=0.5)\nfig.update_xaxes(\n        tickangle = 0,\n        )\nfig.show()","7d817681":"df_age_gender_agg=df.groupby(by=[\"Age\",\"Gender\"])['Salary'].agg([\"min\",\"mean\",\"max\"])\ndf_age_gender_agg","30c82b8d":"df_G_and_A_AVG=df.groupby(by =['Gender','Age'])['Salary'].mean().to_frame().reset_index().rename(columns={'Gender':'Gender','Age':'Age','Salary':'AVG_Salary'})\ndf_G_and_A_Max=df.groupby(by =['Gender','Age'])['Salary'].max().to_frame().reset_index().rename(columns={'Gender':'Gender1','Age':'Age1','Salary':'Max_Salary'})\ndf_G_and_A_Min=df.groupby(by =['Gender','Age'])['Salary'].min().to_frame().reset_index().rename(columns={'Gender':'Gender2','Age':'Age2','Salary':'Min_Salary'})\ndf_G_and_A_Count=df.groupby(by =['Gender','Age'])['Salary'].count().to_frame().reset_index().rename(columns={'Gender':'Gender3','Age':'Age3','Salary':'Count'})\nresult = pd.concat([df_G_and_A_AVG, df_G_and_A_Max,df_G_and_A_Min,df_G_and_A_Count], axis=1)\nresult.drop(['Gender1','Gender2','Gender3','Age1','Age2','Age3'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"Gender_Age\"]=result[\"Gender\"]+\" \"+result[\"Age\"]\nresult.drop(['Gender','Age'],inplace=True,axis=1)\n\n\nfig = make_subplots(rows=4, cols=1,\n                   subplot_titles=(\" Mean Salary\",\n                                   \" Min Salary\",\n                                   \" Max Salary\",\n                                   \" Count \"))  # Subplot titles\n\nfig.add_trace(go.Bar(\n    x=result['Gender_Age'],y=result['AVG_Salary'],\n    name=\"Mean\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'fall'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Gender_Age'],y=result['Min_Salary'],\n    name=\"Min\",\n    marker={'color': result['Min_Salary'], \n    'colorscale': 'fall'},  \n    text=result['Min_Salary'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Gender_Age'],y=result['Max_Salary'],\n    name=\"Max\",\n    marker={'color': result['Max_Salary'], \n    'colorscale': 'fall'},  \n    text=result['Max_Salary'],\n    textposition = \"inside\"),\n    row=3, col=1           \n)\nfig.add_trace(go.Bar(\n    x=result['Gender_Age'],y=result['Count'],\n    name=\"Count\",\n    marker={'color': result['Count'], \n    'colorscale': 'fall'},  \n    text=result['Count'],\n    textposition = \"inside\"),\n    row=4, col=1           \n)\nfig.update_layout(title = \"Gender Age With Salary\",title_x=0.5)\nfig.update_xaxes(\n        tickangle = 0,\n        )\nfig.show()","67aca919":"df_OwnHome=df['OwnHome'].value_counts().to_frame().reset_index().rename(columns={'index':'OwnHome','OwnHome':'count'})\ndf_OwnHome","c4821738":"df_OwnHome=df['OwnHome'].value_counts().to_frame().reset_index().rename(columns={'index':'OwnHome','OwnHome':'count'})\n\ncolors=['darkblue',\"darkcyan\"]\n\nfig = go.Figure([go.Pie(labels=df_OwnHome['OwnHome'], values=df_OwnHome['count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Own Home  Count\",title_x=0.5)\nfig.show()","520a0fab":"df_OwnHome_Salary=df.groupby(by =['OwnHome'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_OwnHome_AmountSpent=df.groupby(by =['OwnHome'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'OwnHome':'OwnHome1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_OwnHome_Salary,df_OwnHome_AmountSpent], axis=1)\nresult.drop(['OwnHome1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult\n","4de2881d":"df_OwnHome_Salary=df.groupby(by =['OwnHome'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_OwnHome_AmountSpent=df.groupby(by =['OwnHome'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'OwnHome':'OwnHome1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_OwnHome_Salary,df_OwnHome_AmountSpent], axis=1)\nresult.drop(['OwnHome1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Own Home AVG Salary \",\n                                   \"Own Home AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['OwnHome'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'fall'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['OwnHome'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \"Own Home\",title_x=0.5)\nfig.show()","3022b7f3":"# Scatter plot - Category\n\nfig = px.scatter(df, x='Salary', y='AmountSpent',trendline=\"ols\",\n                 color='OwnHome') # Added color to basic scatter\nfig.update_layout(title='Own Home With Salary Vs Amount Spent ',xaxis_title=\"Salary\",yaxis_title=\"Amount Spent\",title_x=0.5)\nfig.show()","5757de87":"df_Married=df['Married'].value_counts().to_frame().reset_index().rename(columns={'index':'Married','Married':'count'})\n\ncolors=['darkblue',\"darkcyan\"]\n\nfig = go.Figure([go.Pie(labels=df_Married['Married'], values=df_Married['count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Married  Count\",title_x=0.5)\nfig.show()","84aee029":"df_Married_Salary=df.groupby(by =['Married'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Married_AmountSpent=df.groupby(by =['Married'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Married':'Married1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Married_Salary,df_Married_AmountSpent], axis=1)\nresult.drop(['Married1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult","570b5a9f":"df_Married_Salary=df.groupby(by =['Married'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Married_AmountSpent=df.groupby(by =['Married'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Married':'Married1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Married_Salary,df_Married_AmountSpent], axis=1)\nresult.drop(['Married1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Married AVG Salary \",\n                                   \"Married AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['Married'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'fall'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Married'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \"Married \",title_x=0.5)\nfig.show()","2a531bfc":"# Scatter plot - Category\n\nfig = px.scatter(df, x='Salary', y='AmountSpent',trendline=\"ols\",\n                 color='Married') # Added color to basic scatter\nfig.update_layout(title='Married With Salary Vs Amount Spent ',xaxis_title=\"Salary\",yaxis_title=\"Amount Spent\",title_x=0.5)\nfig.show()","6692c344":"df_Location=df['Location'].value_counts().to_frame().reset_index().rename(columns={'index':'Location','Location':'count'})\n\nfig = go.Figure(go.Bar(\n    x=df_Location['Location'],y=df_Location['count'],\n    marker={'color': df_Location['count'], \n    'colorscale': 'Viridis'},  \n    text=df_Location['count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Location Distribution',xaxis_title=\"Location\",yaxis_title=\"Count \",title_x=0.5)\nfig.show()","5cc47c0b":"df_Location_Salary=df.groupby(by =['Location'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Location_AmountSpent=df.groupby(by =['Location'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Location':'Location1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Location_Salary,df_Location_AmountSpent], axis=1)\nresult.drop(['Location1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult\n","ca7506d2":"df_Location_Salary=df.groupby(by =['Location'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Location_AmountSpent=df.groupby(by =['Location'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Location':'Location1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Location_Salary,df_Location_AmountSpent], axis=1)\nresult.drop(['Location1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Location AVG Salary \",\n                                   \"Location AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['Location'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'fall'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Location'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \"Location \",title_x=0.5)\nfig.show()","b227208b":"# Scatter plot - Category\n\nfig = px.scatter(df, x='Salary', y='AmountSpent',trendline=\"ols\",\n                 color='Location') # Added color to basic scatter\nfig.update_layout(title='Location With Salary Vs Amount Spent ',xaxis_title=\"Salary\",yaxis_title=\"Amount Spent\",title_x=0.5)\nfig.show()","82d56dfa":"df_Children=df['Children'].value_counts().to_frame().reset_index().rename(columns={'index':'Children','Children':'count'})\ndf_Children","d8e612a9":"df_Children=df['Children'].value_counts().to_frame().reset_index().rename(columns={'index':'Children','Children':'count'})\n\ncolors=['darkblue',\"darkcyan\",\"CadetBlue\",\"DarkSeaGreen\"]\n\nfig = go.Figure([go.Pie(labels=df_Children['Children'], values=df_Children['count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Children  Count\",title_x=0.5)\nfig.show()","b5eb0e9b":"fig = go.Figure(data=[go.Scatter(\n    x=df_Children['Children'], y=df_Children['count'],\n    mode='markers',\n    marker=dict(\n        color=df_Children['count'],\n        size=df_Children['count']*0.1, # Multiplying by 0.3 to reduce size and stay uniform accross all points\n        showscale=True\n    ))])\n\nfig.update_layout(title='Children Distribution ',xaxis_title=\"Children Count  \",yaxis_title=\"Number Of Customers \",title_x=0.5)\nfig.show()","12615b4f":"df_Children_Salary=df.groupby(by =['Children'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Children_AmountSpent=df.groupby(by =['Children'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Children':'Children1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Children_Salary,df_Children_AmountSpent], axis=1)\nresult.drop(['Children1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult","030e50bb":"df_Children_Salary=df.groupby(by =['Children'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Children_AmountSpent=df.groupby(by =['Children'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Children':'Children1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Children_Salary,df_Children_AmountSpent], axis=1)\nresult.drop(['Children1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Children AVG Salary \",\n                                   \"Children AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['Children'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'fall'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Children'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'fall'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \"Children \",title_x=0.5)\nfig.show()","4e1f8100":"# Scatter plot - Category\ndf['Children']=df['Children'].astype('object')\nfig = px.scatter(df, x='Salary', y='AmountSpent',trendline=\"ols\",\n                 color='Children') # Added color to basic scatter\nfig.update_layout(title='Children With Salary Vs Amount Spent ',xaxis_title=\"Salary\",yaxis_title=\"Amount Spent\",title_x=0.5)\nfig.show()","50664cce":"df_missing=df.copy()\ndf_History=df_missing['History'].value_counts().to_frame().reset_index().rename(columns={'index':'History','History':'count'})\ndf_History","f162c92c":"df_missing[\"History\"]=df_missing[\"History\"].fillna(\"None\")","bf0384c5":"df_History=df_missing['History'].value_counts().to_frame().reset_index().rename(columns={'index':'History','History':'count'})\ndf_History","283cd781":"df_History=df_missing['History'].value_counts().to_frame().reset_index().rename(columns={'index':'History','History':'count'})\n\nfig = go.Figure(go.Bar(\n    x=df_History['History'],y=df_History['count'],\n    marker={'color': df_History['count'], \n    'colorscale': 'Viridis'},  \n    text=df_History['count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='History Distribution',xaxis_title=\"History\",yaxis_title=\"Count \",title_x=0.5)\nfig.show()","f1a24b3f":"df_History_Salary=df_missing.groupby(by =['History'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_History_AmountSpent=df_missing.groupby(by =['History'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'History':'History1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_History_Salary,df_History_AmountSpent], axis=1)\nresult.drop(['History1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult","b6dff1ec":"df_History_Salary=df_missing.groupby(by =['History'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_History_AmountSpent=df_missing.groupby(by =['History'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'History':'History1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_History_Salary,df_History_AmountSpent], axis=1)\nresult.drop(['History1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"History AVG Salary \",\n                                   \"History AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['History'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'balance'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"\n    ),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['History'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'balance'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \" History \",title_x=0.5,\n                 hoverlabel=dict(\n                  bgcolor=\"white\",\n                  font_size=16,\n                  font_family=\"Rockwell\"))\nfig.show()","9ff9dc73":"# Scatter plot - Category\nfig = px.scatter(df_missing, x='Salary', y='AmountSpent',trendline=\"ols\",\n                 color='History') # Added color to basic scatter\nfig.update_layout(title='History With Salary Vs Amount Spent ',xaxis_title=\"Salary\",yaxis_title=\"Amount Spent\",title_x=0.5)\nfig.show()","4011b743":"df_Catalogs=df['Catalogs'].value_counts().to_frame().reset_index().rename(columns={'index':'Catalogs','Catalogs':'count'})\ndf_Catalogs","c9dc4842":"df_Catalogs=df['Catalogs'].value_counts().to_frame().reset_index().rename(columns={'index':'Catalogs','Catalogs':'count'})\n\ncolors=['darkblue',\"darkcyan\",\"CadetBlue\",\"DarkSeaGreen\"]\n\nfig = go.Figure([go.Pie(labels=df_Catalogs['Catalogs'], values=df_Catalogs['count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Catalogs  Count\",title_x=0.5)\nfig.show()","9fb39dfb":"df_Catalogs_Salary=df.groupby(by =['Catalogs'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Catalogs_AmountSpent=df.groupby(by =['Catalogs'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Catalogs':'Catalogs1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Catalogs_Salary,df_Catalogs_AmountSpent], axis=1)\nresult.drop(['Catalogs1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult","e7aab2d5":"df_Catalogs_Salary=df.groupby(by =['Catalogs'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Catalogs_AmountSpent=df.groupby(by =['Catalogs'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Catalogs':'Catalogs1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Catalogs_Salary,df_Catalogs_AmountSpent], axis=1)\nresult.drop(['Catalogs1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Catalogs AVG Salary \",\n                                   \"Catalogs AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['Catalogs'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'balance'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"\n    ),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Catalogs'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'balance'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \" Catalogs \",title_x=0.5,\n                 hoverlabel=dict(\n                  bgcolor=\"white\",\n                  font_size=16,\n                  font_family=\"Rockwell\"))\nfig.show()","610fc7d2":"# Scatter plot - Category\ndf['Catalogs']=df['Catalogs'].astype('object')\nfig = px.scatter(df, x='Salary', y='AmountSpent',trendline=\"ols\",\n                 color='Catalogs') # Added color to basic scatter\nfig.update_layout(title='Catalogs With Salary Vs Amount Spent ',xaxis_title=\"Salary\",yaxis_title=\"Amount Spent\",title_x=0.5)\nfig.show()","79a335dd":"fig = go.Figure(data=[go.Histogram(x=df['AmountSpent'],  # To get Horizontal plot ,change axis - \n                                  marker_color=\"Crimson\",\n                       xbins=dict(\n                      start=0, #start range of bin\n                      end=6000,  #end range of bin\n                      size=200   #size of bin\n                      ))])\nfig.update_layout(title=\"Distribution Of Amount Spent\",xaxis_title=\"Amount Spent \",yaxis_title=\"Counts\",title_x=0.5)\nfig.show()","da4b8a59":"fig = go.Figure()\nfig.add_trace(go.Box(\n    y=df[\"AmountSpent\"],\n    name='Amount Spent',\n    marker_color='royalblue',\n    boxmean='sd' # represent mean and standard deviation\n))\nfig.update_layout(title = \"Amount Spent Distribution \",title_x=0.5,\n                 )\nfig.show()","31e5d82f":"fig = go.Figure(data=go.Violin(y=df['AmountSpent'], box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                               x0='Amount Spent'))\n\nfig.update_layout(yaxis_zeroline=False,title = \"Amount Spent Distribution \",title_x=0.5,)\nfig.show()","408e9640":"fig = go.Figure(data=[go.Histogram(x=df['Salary'],  # To get Horizontal plot ,change axis - \n                                  marker_color=\"Crimson\",\n                       xbins=dict(\n                      start=0, #start range of bin\n                      end=150000,  #end range of bin\n                      size=5000   #size of bin\n                      ))])\nfig.update_layout(title=\"Distribution Of Salary\",xaxis_title=\"Salary \",yaxis_title=\"Counts\",title_x=0.5)\nfig.show()","2012393d":"fig = go.Figure()\nfig.add_trace(go.Box(\n    y=df[\"Salary\"],\n    name='Salary',\n    marker_color='royalblue',\n    boxmean='sd' # represent mean and standard deviation\n))\nfig.update_layout(title = \"Salary Distribution \",title_x=0.5,\n                 )\nfig.show()","6523cc65":"fig = go.Figure(data=go.Violin(y=df['Salary'], box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                               x0='Salary'))\n\nfig.update_layout(yaxis_zeroline=False,title = \"Salary  Distribution \",title_x=0.5,)\nfig.show()","e8d326cf":"df_missing[\"one\"]=1\ndf_missing.head()\n","f079cdb5":"fig = px.sunburst(df_missing, path=['Age','Married','Gender','History'], values='one'\n                 )\nfig.update_layout(title = \" Distribution \",title_x=0.5,\n                 )\nfig.show()","01d2b54b":"fig = px.treemap(df_missing, path=['Age', 'Married', 'Gender'], values='one')\nfig.update_layout(title = \" Distribution \",title_x=0.5,\n                 )\nfig.show()","ddfcc609":"fig = px.bar(df, x=\"Age\", y=\"AmountSpent\", color=\"Married\", barmode=\"group\", facet_col=\"Gender\",\n             category_orders={\"day\": [\"Young\", \"Middle\", \"Old\"],\n                              \"Married\": [\"Married\", \"Single\"],\n                              \"Gender\": [\"Male\", \"Female\"]})\nfig.show()","26af1016":"fig = px.bar(df, x=\"Age\", y=\"Salary\", color=\"Married\", barmode=\"group\", facet_col=\"Gender\",\n             category_orders={\"day\": [\"Young\", \"Middle\", \"Old\"],\n                              \"Married\": [\"Married\", \"Single\"],\n                              \"Gender\": [\"Male\", \"Female\"]})\nfig.show()","4f9760ba":"df_Single=df_missing[df_missing[\"Married\"]==\"Single\"]\ndf_Single","d46c2f44":"df_divorce=df_Single[df_Single[\"Children\"]>0]\ndf_divorce","3504fce8":"df_single_C_0=df_Single[df_Single[\"Children\"]==0]\ndf_single_C_0","5672b920":"df_Single_Salary=df_Single.groupby(by =['Children'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_Single_AmountSpent=df_Single.groupby(by =['Children'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'Children':'Children1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_Single_Salary,df_Single_AmountSpent], axis=1)\nresult.drop(['Children1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\" Single AVG Salary \",\n                                   \" Single AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['Children'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'balance'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"\n    ),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['Children'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'balance'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \"Single With Salary And Amount Spent \",title_x=0.5,\n                 hoverlabel=dict(\n                  bgcolor=\"white\",\n                  font_size=16,\n                  font_family=\"Rockwell\"))\nfig.show()","8f4224b1":"df.head()","95a50942":"df[\"History\"]=df[\"History\"].fillna(\"None\")","a08851b7":"Gender_map= {'Male':0,'Female':1}\nOwnHome_map= {'Own':1,'Rent':0}\nMarried_map= {'Married':1,'Single':0}\nLocation_map= {'Close':1,'Far':0}","c1e4e96f":"df[\"Gender\"]=df[\"Gender\"].map(Gender_map)\ndf[\"OwnHome\"]=df[\"OwnHome\"].map(OwnHome_map)\ndf[\"Married\"]=df[\"Married\"].map(Married_map)\ndf[\"Location\"]=df[\"Location\"].map(Location_map)","9d175609":"df.head()","f8e11a5a":"Age_map= {'Young':1,'Middle':2,'Old':3}\nHistory_map={'None':1,'Low':2,'Medium':3,'High':4}","d8e017c3":"df[\"Age\"]=df[\"Age\"].map(Age_map)\ndf[\"History\"]=df[\"History\"].map(History_map)","c2ecc85d":"df.head()","bc4e2ef5":"df['Children']=df['Children'].astype('int64')\ndf['Catalogs']=df['Catalogs'].astype('int64')","d12d78be":"print(\"Correlation Matrix\")\nplt.rcParams['figure.figsize']=(8,6)\nsns.heatmap(df.corr(),cmap='coolwarm',linewidths=.5,fmt=\".2f\",annot = True);","b03a3beb":"from sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)","707e3b69":"df_out=df.copy()\nclf.fit_predict(df_out)\ndf_scores = clf.negative_outlier_factor_","f664c5c2":"np.sort(df_scores)[0:50]","e4ea38c4":"threshold_value = np.sort(df_scores)[15]\nthreshold_value","bd7d771f":"Outlier_df= df_out[df_scores < threshold_value]\nindexs=Outlier_df.index\nOutlier_df","86ca10cd":"# Kick Outliers\nfor i in indexs:\n    df.drop(i, axis = 0,inplace = True)","e47af013":"df.info()","69ad5581":"sample_df=df.sample(n=15,random_state=15)\nsample_df","eee2053c":"indexs=sample_df.index\n","0eeb9bd5":"# Kick sample \nfor i in indexs:\n    df.drop(i, axis = 0,inplace = True)","f8d7ed35":"df.info()","116b45c8":"X = df.drop(['AmountSpent'], axis= 1)\ny = df[\"AmountSpent\"]","2c4812ee":"X = (X - np.min(X)) \/ (np.max(X) - np.min(X)).values\nX[\"Salary\"]=X[\"Salary\"].map(lambda x:round(x,2))\nX[\"Children\"]=X[\"Children\"].map(lambda x:round(x,2))\nX[\"History\"]=X[\"History\"].map(lambda x:round(x,2))\nX[\"Catalogs\"]=X[\"Catalogs\"].map(lambda x:round(x,2))\nX","8764f3dc":"y","16f3a0ec":"from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=42)\n\nprint(\"X_train\", X_train.shape)\n\nprint(\"y_train\",y_train.shape)\n\nprint(\"X_test\",X_test.shape)\n\nprint(\"y_test\",y_test.shape)\n","ad03caee":"sample_df_X_test=sample_df.drop(['AmountSpent'],axis=1)\nsample_df_y_test=sample_df[\"AmountSpent\"]","eb1e2558":"sample_df_X_test = (sample_df_X_test - np.min(sample_df_X_test)) \/ (np.max(sample_df_X_test) - np.min(sample_df_X_test)).values\nsample_df_X_test[\"Salary\"]=sample_df_X_test[\"Salary\"].map(lambda x:round(x,2))\nsample_df_X_test[\"Children\"]=sample_df_X_test[\"Children\"].map(lambda x:round(x,2))\nsample_df_X_test[\"Catalogs\"]=sample_df_X_test[\"Catalogs\"].map(lambda x:round(x,2))\nsample_df_X_test[\"History\"]=sample_df_X_test[\"History\"].map(lambda x:round(x,2))\nsample_df_X_test","d05a48e6":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nmodel = lm.fit(X_train, y_train)","5c3d00cf":"model.intercept_","f327f3ca":"model.coef_","5ad8fe3e":"from sklearn.metrics import mean_squared_error, r2_score\nnp.sqrt(mean_squared_error(y_train, model.predict(X_train)))","0c49fcc9":"model.score(X_train, y_train)","6faa247d":"cross_val_score(model, X_train, y_train, cv = 10, scoring = \"r2\").mean()","4ff83beb":"pred=model.predict(sample_df_X_test)\nframes = [pred, sample_df_y_test.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred=result_pred.rename(columns={0:'Pred',1:'Real'})\nresult_pred[\"Pred\"]=result_pred[\"Pred\"].map(lambda x:round(x,2))\nresult_pred[\"Diff\"]=result_pred[\"Pred\"]-result_pred[\"Real\"]\nresult_pred[\"Diff\"]=result_pred[\"Diff\"]\nprint(\"Total Diff: \",result_pred[\"Diff\"].sum())\nprint(\"Mean Diff: \",abs(result_pred[\"Diff\"]).mean())\nresult_pred","0be1f08a":"from sklearn.neighbors import KNeighborsRegressor","72ac811e":"knn_model = KNeighborsRegressor().fit(X_train, y_train)\nknn_model","abf01493":"y_pred = knn_model.predict(X_test)","8a3b8df9":"np.sqrt(mean_squared_error(y_test, y_pred))","31e28db8":"knn_model.score(X_train, y_train)","c04dc441":"cross_val_score(knn_model, X_train, y_train, cv = 10, scoring = \"r2\").mean()","f69bcc63":"from sklearn.model_selection import GridSearchCV","ce8a0fdd":"knn_params = {'n_neighbors': np.arange(1,30,1)}","05f7f70d":"knn = KNeighborsRegressor()","21d9edb4":"knn_cv_model = GridSearchCV(knn, knn_params, cv = 10)","70fe43d3":"knn_cv_model.fit(X_train, y_train)","1ea196b6":"knn_cv_model.best_params_[\"n_neighbors\"]","61261c74":"knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_[\"n_neighbors\"])","4adf93bc":"knn_tuned.fit(X_train, y_train)","b8369612":"np.sqrt(mean_squared_error(y_test, knn_tuned.predict(X_test)))","795ffcfb":"knn_tuned.score(X_train, y_train)","d343bf51":"pred=knn_tuned.predict(sample_df_X_test)\nframes = [pred, sample_df_y_test.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred=result_pred.rename(columns={0:'Pred',1:'Real'})\nresult_pred[\"Pred\"]=result_pred[\"Pred\"].map(lambda x:round(x,2))\nresult_pred[\"Diff\"]=result_pred[\"Pred\"]-result_pred[\"Real\"]\nresult_pred[\"Diff\"]=result_pred[\"Diff\"]\nprint(\"Total Diff: \",result_pred[\"Diff\"].sum())\nprint(\"Mean Diff: \",abs(result_pred[\"Diff\"]).mean())\nresult_pred","20b37168":"from sklearn.svm import SVR","5401cbe7":"svr_model = SVR(\"linear\").fit(X_train, y_train)","2da92c06":"y_pred = svr_model.predict(X_test)","6a1e303f":"np.sqrt(mean_squared_error(y_test, y_pred))","016dc50a":"svr_params = {\"C\": [0.01, 0.1,0.4,5,10,20,30,40,50]}\nsvr_cv_model = GridSearchCV(svr_model,svr_params, cv = 10)\nsvr_cv_model.fit(X_train, y_train)","bd628bf5":"pd.Series(svr_cv_model.best_params_)[0]","925a3520":"svr_tuned = SVR(\"linear\", C = pd.Series(svr_cv_model.best_params_)[0]).fit(X_train, \n                                                                        y_train)    ","60b80dae":"y_pred = svr_tuned.predict(X_test)","62dc508a":"np.sqrt(mean_squared_error(y_test, y_pred))","3399a941":"svr_tuned.score(X_train, y_train)","ef4beb9e":"pred=svr_tuned.predict(sample_df_X_test)\nframes = [pred, sample_df_y_test.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred=result_pred.rename(columns={0:'Pred',1:'Real'})\nresult_pred[\"Pred\"]=result_pred[\"Pred\"].map(lambda x:round(x,2))\nresult_pred[\"Diff\"]=result_pred[\"Pred\"]-result_pred[\"Real\"]\nresult_pred[\"Diff\"]=result_pred[\"Diff\"]\nprint(\"Total Diff: \",result_pred[\"Diff\"].sum())\nprint(\"Mean Diff: \",abs(result_pred[\"Diff\"]).mean())\nresult_pred","28648d68":"from sklearn.ensemble import RandomForestRegressor","5425cdf1":"rf_model = RandomForestRegressor(random_state = 42)","fa6f6a19":"rf_model.fit(X_train, y_train)","a621468f":"y_pred = rf_model.predict(X_test)","e492a9a8":"np.sqrt(mean_squared_error(y_test, y_pred))","e7255000":"rf_params = {'max_depth': list(range(1,10)),\n            'max_features': [3,5,10,15],\n            'n_estimators' : [100, 200, 500, 1000]}","cc0ebbe1":"rf_model = RandomForestRegressor(random_state = 42)","81421d6d":"rf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                            n_jobs = -1,\n                          verbose = 2)","cdba63f6":"rf_cv_model.fit(X_train, y_train)","c9d9e191":"rf_cv_model.best_params_","be5bc2b5":"rf_tuned = RandomForestRegressor(max_depth  = 9, \n                                 max_features = 5, \n                                 n_estimators =100)","771cc9fe":"rf_tuned.fit(X_train, y_train)","8c9c3df6":"y_pred = rf_tuned.predict(X_test)","efb05d11":"np.sqrt(mean_squared_error(y_test, y_pred))","802c4345":"rf_tuned.score(X_train, y_train)","2dca4817":"pred=rf_tuned.predict(sample_df_X_test)\nframes = [pred, sample_df_y_test.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred=result_pred.rename(columns={0:'Pred',1:'Real'})\nresult_pred[\"Pred\"]=result_pred[\"Pred\"].map(lambda x:round(x,2))\nresult_pred[\"Diff\"]=result_pred[\"Pred\"]-result_pred[\"Real\"]\nresult_pred[\"Diff\"]=result_pred[\"Diff\"]\nprint(\"Total Diff: \",result_pred[\"Diff\"].sum())\nprint(\"Mean Diff: \",abs(result_pred[\"Diff\"]).mean())\nresult_pred","41fea602":"Importance = pd.DataFrame({\"Importance\": rf_tuned.feature_importances_*100},\n                         index = X_train.columns)","550963de":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Variable Significance Levels\")","29945dd1":"df.head()","7dec4472":"df[\"Name\"]=\"Person Name\"\ndf.info()","240de2e3":"\nname_list=[]\ni=1\nfor k in df[\"Name\"]:\n    k='Person '+ str(i)\n    i=i+1\n    name_list.append(k)\nname_list\ndf[\"Name\"]=name_list","5f9f393c":"df.head()","f3af1163":"df.index=df.iloc[:,10]\ndf.index.name = None","bf1a5108":"df.drop(['Name'],inplace=True,axis=1)\ndf.head()","2eeff19b":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters = 4)\nkmeans","1e17d638":"k_fit=kmeans.fit(df)","af639215":"k_fit.cluster_centers_","a9c5e970":"cluster = k_fit.labels_","3778951f":"pd.DataFrame({\"Person\":df.index,\"cluster\":cluster})[0:10]","f31934fd":"from yellowbrick.cluster import KElbowVisualizer\nkmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k=(2,20))\nvisualizer.fit(df) \nvisualizer.poof() ","8aec36a2":"df[\"cluster_no\"]=cluster\ndf[\"cluster_no\"]=df[\"cluster_no\"]+1\ndf.head()","a3c3a696":"df.groupby(by=\"cluster_no\")['AmountSpent'].agg([\"min\",\"mean\",\"max\"])","0eca150a":"df.groupby(by=\"cluster_no\")['Salary'].agg([\"min\",\"mean\",\"max\"])","41e1cc5e":"df_cluster_no_Salary=df.groupby(by =['cluster_no'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_cluster_no_AmountSpent=df.groupby(by =['cluster_no'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'cluster_no':'cluster_no1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_cluster_no_Salary,df_cluster_no_AmountSpent], axis=1)\nresult.drop(['cluster_no1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\nresult","2eb2303b":"df_cluster_no_Salary=df.groupby(by =['cluster_no'])['Salary'].mean().to_frame().reset_index().rename(columns={'Salary':'AVG_Salary'})\ndf_cluster_no_AmountSpent=df.groupby(by =['cluster_no'])['AmountSpent'].mean().to_frame().reset_index().rename(columns={'cluster_no':'cluster_no1','AmountSpent':'AVG_AmountSpent'})\nresult = pd.concat([df_cluster_no_Salary,df_cluster_no_AmountSpent], axis=1)\nresult.drop(['cluster_no1'],inplace=True,axis=1)\nresult[\"AVG_Salary\"]=result[\"AVG_Salary\"].map(lambda x:round(x,2))\nresult[\"AVG_AmountSpent\"]=result[\"AVG_AmountSpent\"].map(lambda x:round(x,2))\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Cluster No AVG Salary \",\n                                   \"Cluster No AVG Amount Spent \" ))  # Subplot titles\n                                  \n\nfig.add_trace(go.Bar(\n    x=result['cluster_no'],y=result['AVG_Salary'],\n    name=\"Mean Salary\",\n    marker={'color': result['AVG_Salary'], \n    'colorscale': 'balance'},  \n    text=result['AVG_Salary'],\n    textposition = \"inside\"\n    ),\n    row=1, col=1         \n)\nfig.add_trace(go.Bar(\n    x=result['cluster_no'],y=result['AVG_AmountSpent'],\n    name=\"Mean Amount Spent\",\n    marker={'color': result['AVG_AmountSpent'], \n    'colorscale': 'balance'},  \n    text=result['AVG_AmountSpent'],\n    textposition = \"inside\"),\n    row=2, col=1         \n)\n\nfig.update_layout(title = \" Cluster No \",title_x=0.5,\n                 hoverlabel=dict(\n                  bgcolor=\"white\",\n                  font_size=16,\n                  font_family=\"Rockwell\"))\nfig.show()","833a5d4e":"## <a id='18'> 5.Distribution <\/a>","a0e468aa":"## <a id='30'><font color=\"LIGHTSEAGREEN\" size=+2.5><b>15.End Note<\/b><\/font> <\/a>\n\nI hope you enjoyed my kernel.If you like this notebook, an <font color=\"DARKCYAN\"><b>Upvote<\/b><\/font> would be great ! :)\n\nI am new with data science. Please <font color=\"GREEN\"><b>comments<\/b><\/font> me your <font color=\"GREEN\"><b>feedbacks<\/b><\/font> to help me improve myself. \n![](https:\/\/media.giphy.com\/media\/3oEdva9BUHPIs2SkGk\/giphy.gif)    \n","00000c5b":"## <a id='29'>14.Conclusion <\/a>\n\n* As you can see our models are not good.<br>\n* We have multidimensional data. <br>\n* We need to do feature engineering. <br>\n**Models**\n![ ](https:\/\/media.giphy.com\/media\/l22ysLe54hZP0wubek\/giphy.gif) \n* Suitable for data set customer segmentation <br>","b4c64349":"* How much is the average salary,amount spent by Gender","d47b5e5d":"* What are the customers' average income and expenses by Children?","2c36fdb7":"* The highest number of customers who prefer us for the first time","9394ae53":"## Summary\n* Most of the customers are in the middle age group\n* Middle age group earns more and spends more","e95fdf2e":"## <a id='55'> <font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>Reference<\/b><\/font><br>\n* https:\/\/plotly.com\/python\/\n* https:\/\/www.displayr.com\/what-is-a-correlation-matrix\/ <br>\n    \n* https:\/\/towardsdatascience.com\/exploratory-data-analysis-8fc1cb20fd15 <br>\n* https:\/\/r4ds.had.co.nz\/exploratory-data-analysis.html#introduction-3  <br>  \n","56317c64":"## Sample Data","a01c6907":"* Gender distribution is balanced","63c8c2ef":" ## <a id='26'> 11.SVR<\/a>","ed60ddb6":"# <a id='0'> Dataset Introduction<\/a>\n![](https:\/\/media.giphy.com\/media\/Tgm9bOjavn9Y5H3MUH\/giphy.gif)\nThe data set includes data from a direct marketer who sells his products only via direct mail. He sends catalogs with product characteristics to customers who then order directly from the catalogs. The marketer has developed customer records to learn what makes some customers spend more than others.","631e599f":"## Summary\n* OwnHome distribution is balanced\n* Homeowners earn more and spend more","e1ba2dc7":"* Customers who are close to the nearest physical store selling similar products have lower expenses, although their income is higher","4d03e615":"## Summary\n* Most customers are close to the nearest physical store that sells similar products\n* Customers who are close to the nearest physical store selling similar products have lower spend, although their income is higher","8eecb951":"## <a id='7'> 4.Data Analysis <\/a>","bd1c1d30":"* The highest number of customers is middle age men\n* Lowest number of customers older men","186630ab":"* As the number of catalogs sent increases, so does the expenditure and income","f8801362":"* How much is the average salary,amount spent by age?","d1146eb8":" ## <a id='25'> 10. KNN<\/a>","5f876551":" ## <a id='24'> 9. Linear Regression<\/a>","d13f86e6":"## Summary\n* 46 percent of customers don't have Children\n* Although customers' incomes were close, there was a decrease in spending as the number of children increased","80e2ddf6":"## <a id='22'>8.1 Data Preprocessing <\/a>","8cf3bd2b":"## Summary\n* Salary max:168.8 k\n* Salary mean:56.1 k \n* Salary median:53.7 k\n* Salary min:10.1 k","d1493186":"* We don't have duplicated data","27afd227":"## <a id='15'> 4.8 Catalogs <\/a>\n* How is the Catalogs distribution ?","583b610c":"## <a id='6'> 3.3 Describe Function<\/a>\n* Generate descriptive statistics.<br>\n* This function returns the **count**, **mean**, **standard deviation**,\n**minimum** and **maximum** **values** and the **quantiles of the data**.<br>","a2bc1302":"## Model Tuning","5d14bdc6":"* Although customers' incomes were close, there was a decrease in spending as the number of children increased","7c6a136d":"## <a id='5'>3.2 Correlation Matrix <\/a>\n\n* A correlation matrix is a table showing correlation coefficients between variables. Each cell in the table shows the correlation between two variables.<br>","74c0aa0a":"* Married people earn more and spend more","fa232220":" # <a id='3'> 3.Exploratory Data Analysis<\/a>\n  * Exploratory Data Analysis refers to the critical process of performing \ninitial investigations on data so as to discover patterns,to spot anomalies, \nto test hypothesis and to check assumptions with\nthe help of summary statistics and graphical representations. <br>\n\n* Your goal during EDA is to develop an understanding of your data. The easiest way to do this is to use questions as tools to guide your investigation. When you ask a question, the question focuses your attention on a specific part of your dataset and helps you decide which graphs, models, or transformations to make.<br>\n\n* Generate questions about your data.<br>\n\n* Search for answers by visualising, transforming, and modelling your data. <br>\n\n* Use what you learn to refine your questions and\/or generate new questions. <br>\n\n* EDA is not a formal process with a strict set of rules.<br> \n* More than anything, EDA  is a state of mind.<br> \n* During the initial phases of EDA you should feel free to investigate every idea that occurs to you.<br> \n* Some of these ideas will pan out, and some will be dead ends.<br>\n* As your exploration continues, you will home in on a few particularly productive areas that you\u2019ll eventually write up and communicate to others.<br>\n\n* Let's start exploring our data","d391e13f":"* What are the customers' average income and expenses by location?","de787351":"* What is the average spending of customers by gender and age?","5f14b038":"## <a id='16'> 4.9 AmountSpent <\/a>\n* How is the AmountSpent distribution ?","6e83bcde":"## Model Tuning","60789cea":"* Most customers are close to the nearest physical store that sells similar products.","20b7cca2":"* Middle age group earns more and spends more","7becff2d":"* Catalogs distribution is balanced","6e332227":"## Model Tuning","a752dedb":"* We would like to see which segment customers belong to.","9f8fd66d":"* 46 percent of customers don't have Children","3293782d":"* What are the customers' average income and expenses by OwnHome?","a0cef663":"* How much is the average(min,max) spending amount of customers by gender,age?\n","57f709f2":"# <a id='1'> 1.Importing Libraries<\/a>","4ebfb21c":"* Customers with high previous purchasing volume are the group with the highest income and expenditure","c9c00039":"## Determining the Optimum Number of Clusters","2eee22bc":"## Normalize","f68580ac":"* OwnHome distribution is balanced","609c66fb":"## <a id='12'> 4.5 Location <\/a>\n* How is the Location distribution ?","c4cc4bce":"## <a id='8'> 4.1 Age <\/a>\n* How is the age distribution ?","19da3737":"<font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>My Other Kernels<\/b><\/font><br>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/loan-data-visualisation-eda-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Loan Data Visualisation & EDA & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/book-review-ratings-data-analysis-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Book Review Ratings Analysis & Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/cs-books-eda-visualization-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">CS Books EDA & Visualization & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/insurance-prediction-lgbm-gbm-xgboost-eda\" class=\"btn btn-primary\" style=\"color:white;\">Insurance Prediction- LGBM,GBM,XGBoost EDA<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/basketball-players-stats-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Basketball Players Stats Data Visualisation<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/lego-transfer-cnn-classification\" class=\"btn btn-primary\" style=\"color:white;\">Lego Transfer-CNN Classification<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/face-image-classification\" class=\"btn btn-primary\" style=\"color:white;\">Face Image Classification<\/a>\n\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/fish-market-data-visualisation-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Fish Market Data Visualisation & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/seabron-plotly-for-beginners\" class=\"btn btn-primary\" style=\"color:white;\">Seabron & Plotly For Beginners<\/a>\n\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/women-s-football-results-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Women's Football Results Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/us-police-shootings-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Us Police Shootings Data Visualisation<\/a>","9b7b9092":"* Married distribution is balanced","8a574b49":"* Men earn more and spend more","e6ba10b8":" ## <a id='23'> 8.2 Local Outlier Factor<\/a>\n\n![](http:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/4e\/LOF-idea.svg)\n*  The local outlier factor is based on a concept of a local density, where locality is given by k nearest neighbors, whose distance is used to estimate the density. By comparing the local density of an object to the local densities of its neighbors, one can identify regions of similar density, and points that have a substantially lower density than their neighbors. These are considered to be outliers.","387fe0f0":"## Summary\n* Married distribution is balanced\n* Married people earn more and spend more","6e1713d7":" ## <a id='27'> 12.Random Forests<\/a>","da723b0e":"## <a id='13'> 4.6 Children <\/a>\n* How is the Children distribution ?","4a66993e":"![](https:\/\/media.giphy.com\/media\/Ty9Sg8oHghPWg\/giphy.gif)","3f457775":"\n* Data has only object and integer values.\n* Variable column has not missing values.","5d9c636d":"* What are the customers' average income by gender,age?","a8c1f98d":"* We have already said in the data set that null values are customers who have not exchanged with us in the past, we do not have missing data.","b68abc1e":"## Summary\n* The highest number of customers who prefer us for the first time\n* Customers with high previous purchasing volume are the group with the highest income and expenditure","587a0d05":"## <a id='17'> 4.10 Salary <\/a>\n* How is the Salary distribution ?","2803ec41":"## <a id='11'> 4.4 Married <\/a>\n* How is the Married distribution ?","b33e72b9":"# Table of contents\n<a href='#0'> Dataset Introduction <\/a> <br>\n<a href='#1'>1. Importing Libraries <\/a> <br>\n<a href='#2'>2. Data <\/a> <br>\n<a href='#3'>3. Exploratory Data Analysis <\/a> <br>\n<a href='#4'>3.1 Missing Value <\/a> <br>\n<a href='#5'>3.2 Correlation Matrix <\/a> <br>\n<a href='#6'>3.3 Describe Function <\/a> <br>\n<a href='#7'>4. Data Analysis <\/a> <br>\n<a href='#8'>4.1 Age <\/a> <br>\n<a href='#9'>4.2 Gender <\/a> <br>\n<a href='#10'>4.3 Own Home <\/a> <br>\n<a href='#11'>4.4 Married <\/a> <br>\n<a href='#12'>4.5 Location <\/a> <br>\n<a href='#13'>4.6 Children <\/a> <br>\n<a href='#14'>4.7 History <\/a> <br>\n<a href='#15'>4.8 Catalogs  <\/a> <br>\n<a href='#16'>4.9 Amount Spent <\/a> <br>\n<a href='#17'>4.10 Salary  <\/a> <br>\n<a href='#18'>5. Distribution <\/a> <br>\n<a href='#19'>6. Divorce <\/a> <br>\n<a href='#20'>7. Summray<\/a> <br>\n<a href='#21'>8. Machine Learning <\/a> <br>\n<a href='#22'>8.1 Data Preprocessing <\/a> <br>\n<a href='#23'>8.2 Local Outlier Factor <\/a> <br>\n<a href='#24'>9. Linear Regression <\/a> <br>\n<a href='#25'>10. KNN <\/a> <br>\n<a href='#26'>11. SVR <\/a> <br>\n<a href='#27'>12. Random Forests <\/a> <br>\n<a href='#28'>13.Customer Segmentation K-Means <\/a> <br>\n<a href='#29'>14. Conclusion <\/a> <br>\n<a href='#30'>15. End Note <\/a> <br>","52159a06":"* How is the age distribution by gender?","c08ee541":"## <a id='14'> 4.7 History <\/a>\n* How is the History distribution ?","50a19c06":"* What are the customers' average income and expenses by married?","f7694024":"## <a id='20'>7.Summary <\/a>\n\n* Data has only object and integer values.\n* Dataset comprises of 1000 observations and 10 characteristics.\n* We don't have duplicated data\n* We have already said in the data set that null values are customers who have not exchanged with us in the past, we do not have missing data.\n* Most of the customers are in the middle age group\n* Middle age group earns more and spends more\n* Gender distribution is balanced\n* Men earn more and spend more\n* The highest number of customers is middle age men\n* Lowest number of customers older men\n* Highest average spending:Male Old 1691\n* Lowest average spending: Female Young 501\n* Highest average Salary:Male Middle 76.3 k\n* Lowest average Salary: Female Young 25.5 k\n* OwnHome distribution is balanced\n* Homeowners earn more and spend more\n* Married distribution is balanced\n* Married people earn more and spend more\n* Most customers are close to the nearest physical store that sells similar products\n* Customers who are close to the nearest physical store selling similar products have lower spend , although their income is higher\n* 46 percent of customers don't have Children\n* Although customers' incomes were close, there was a decrease in spending as the number of children increased\n* The highest number of customers who prefer us for the first time\n* Customers with high previous purchasing volume are the group with the highest income and expenditure\n* Catalogs distribution is balanced\n* As the number of catalogs sent increases, so does the expenditure and income\n\n* Amount Spent max:6217\n* Amount Spent mean:1216\n* Amount Spent median:962\n* Amount Spent min:38\n\n* Salary max:168.8 k\n* Salary mean:56.1 k\n* Salary median:53.7 k\n* Salary min:10.1 k","8c6b27a6":"## <a id='4'> 3.1 Missing Value<\/a>","12f8aff8":"* Homeowners earn more and spend more","1a445a89":"Highest average spending:**Male**\t**Old** 1691 <br>\nLowest average spending: **Female**\t**Young** 501 <br>","bf870925":"* Dataset comprises of 1000 observations and 10 characteristics.","f78a7e68":"* 4 clusters are enough for us. This number should be chosen with business knowledge.\n* We can increase or decrease depending on business knowledge.","16fb0e07":"## <a id='19'> 6.Divorce <\/a>","a36a0c3c":"# <a id='2'> 2. Data<\/a>\n## **Data Columns Means**\nAge--------------> Age of customer(M\u00fc\u015fterinin ya\u015f\u0131)(old\/middle\/young). <br>\nGender -------------->Gender(Cinsiyet) (Male\/ Female)  <br>\nOwnHome -------------->Whether customer owns home (M\u00fc\u015fterinin evin sahibi olup olmad\u0131\u011f\u0131)(Own\/Rent) <br>\nMarried ------------> Married (M\u00fc\u015fteri Evli plup olmad\u0131\u011f\u0131)(single\/married) <br>\nLocation -------------> In terms of distance to the nearest brick and mortar store that sells similar products (Benzer \u00fcr\u00fcnler satan en yak\u0131n fiziksel ma\u011fazaya olan uzakl\u0131\u011f\u0131) (Far\/ Close) <br>\nSalary --------->Yearly salary of customer in dollars(Y\u0131ll\u0131k m\u00fc\u015fteri maa\u015f\u0131 dolar cinsinden) <br>\nChildren ------->Number of children (\u00c7o\u00e7uk say\u0131s\u0131 0-3)<br>\nHistory -----> History of previous purchase volume (low\/medium\/high\/NA NA means that this customer has not yet purchased) (Ge\u00e7mi\u015f \u00f6nceki sat\u0131n alma hacmi(low \/ medium \/ high \/ NA; NA, bu m\u00fc\u015fterinin hen\u00fcz sat\u0131n almad\u0131\u011f\u0131 anlam\u0131na gelir) <br>\nCatalogs ----------->Number of catalogs sent (G\u00f6nderilen katalog say\u0131s\u0131) <br>\nAmountSpent ------> Amount Spent in dollars (Harcanan Miktar dolar cinsinden) <br>","97e38185":"## Summary\n* Gender distribution is balanced\n* Men earn more and spend more\n\n* The highest number of customers is middle age men\n* Lowest number of customers older men\n\n* Highest average spending:Male Old 1691\n* Lowest average spending: Female Young 501\n\n* Highest average Salary:Male Middle 76.3 k\n* Lowest average Salary: Female Young 25.5 k","b2493249":"## Summary\n* Catalogs distribution is balanced\n* As the number of catalogs sent increases, so does the expenditure and income","5312b89e":"## <a id='21'>8.Machine Learning  <\/a>","42fe67f9":"## <a id='9'> 4.2 Gender <\/a>\n* How is the gender distribution ?","68d68bc9":"* Most of the customers are in the middle age group","3e2801dd":" ## <a id='28'> 13.Customer Segmentation K-Means<\/a>","6b2dd29a":"## <a id='10'> 4.3 OwnHome <\/a>\n* How is the OwnHome  distribution ?","a66d4167":"## Summary\n\n* Amount Spent max:6217\n* Amount Spent mean:1216\n* Amount Spent median:962\n* Amount Spent min:38"}}