{"cell_type":{"7ca7981e":"code","0512b2be":"code","0f1047e1":"code","56477c5e":"code","96601330":"code","d6af1633":"code","a423a0d7":"code","452b9d95":"markdown","d8cc7f54":"markdown","e33b2003":"markdown","3f3f886a":"markdown","4dffb79b":"markdown","5f50e813":"markdown"},"source":{"7ca7981e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport glob\n\nimport pydicom\nfrom skimage import data, img_as_float, exposure, io\n\nprint(os.listdir(\"..\/input\/siim-acr-pneumothorax-segmentation\/sample images\"))\n# Any results you write to the current directory are saved as output.\n\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\n\nimport sys\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')","0512b2be":"start = 0   # Starting index of images\nnum_img = 5 # Total number of images to show\n\nfig, ax = plt.subplots(nrows=1, ncols=num_img, sharey=True, figsize=(num_img*10,10))\nfor q, file_path in enumerate(glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')[start:start+num_img]):\n    dataset = pydicom.dcmread(file_path)\n    ax[q].imshow(dataset.pixel_array, cmap=plt.cm.gray)\n","0f1047e1":"start = 0   # Starting index of images\nnum_img = 5 # Total number of images to show\n\nfig, ax = plt.subplots(nrows=1, ncols=num_img, sharey=True, figsize=(num_img*10,10))\nfor q, file_path in enumerate(glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')[start:start+num_img]):\n    dataset = pydicom.dcmread(file_path)\n\n    src_img = dataset.pixel_array\n    \n    # Contrast Stretching\n    p2, p98 = np.percentile(src_img, (2, 98))\n    img_cs = img_as_float(exposure.rescale_intensity(src_img, in_range=(p2, p98)))\n    \n    ax[q].imshow(img_cs, cmap=plt.cm.gray)","56477c5e":"start = 0   # Starting index of images\nnum_img = 5 # Total number of images to show\n\nfig, ax = plt.subplots(nrows=1, ncols=num_img, sharey=True, figsize=(num_img*10,10))\nfor q, file_path in enumerate(glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')[start:start+num_img]):\n    dataset = pydicom.dcmread(file_path)\n\n    src_img = dataset.pixel_array\n    \n    # Histogram Equalization\n    img_he = img_as_float(exposure.equalize_hist(src_img))\n    \n    ax[q].imshow(img_he, cmap=plt.cm.gray)","96601330":"start = 0   # Starting index of images\nnum_img = 5 # Total number of images to show\n\nfig, ax = plt.subplots(nrows=1, ncols=num_img, sharey=True, figsize=(num_img*10,10))\nfor q, file_path in enumerate(glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')[start:start+num_img]):\n    dataset = pydicom.dcmread(file_path)\n\n    src_img = dataset.pixel_array\n    \n    # Adaptive Equalization\n    img_ae = img_as_float(exposure.equalize_adapthist(src_img))\n    \n    ax[q].imshow(img_ae, cmap=plt.cm.gray)","d6af1633":"def plot_img_and_hist(img, axes, bins=256):\n    \"\"\"Plot an image along with its histogram and cumulative histogram.\n\n    \"\"\"\n    img = img_as_float(img)\n    ax_img, ax_hist = axes\n    ax_cdf = ax_hist.twinx()\n\n    # Display image\n    ax_img.imshow(img, cmap=plt.cm.gray)\n    ax_img.set_axis_off()\n\n    # Display histogram\n    ax_hist.hist(img.ravel(), bins=bins, histtype='step', color='black')\n    ax_hist.ticklabel_format(axis='y', style='scientific', scilimits=(0, 0))\n    ax_hist.set_xlabel('Pixel intensity')\n    ax_hist.set_xlim(0, 1)\n    ax_hist.set_yticks([])\n\n    # Display cumulative distribution\n    img_cdf, bins = exposure.cumulative_distribution(img, bins)\n    ax_cdf.plot(bins, img_cdf, 'r')\n    ax_cdf.set_yticks([])\n\n    return ax_img, ax_hist, ax_cdf","a423a0d7":"#### Everything below here is just to create the plot\/graphs ####\n# Display results\nfig = plt.figure(figsize=(16, 10)) \naxes = np.zeros((2, 4), dtype=np.object)\naxes[0, 0] = fig.add_subplot(2, 4, 1)\n\nfor i in range(1, 4):\n    axes[0, i] = fig.add_subplot(2, 4, 1+i, sharex=axes[0,0], sharey=axes[0,0])\n    \nfor i in range(0, 4):\n    axes[1, i] = fig.add_subplot(2, 4, 5+i)\n    \nsample_file_path = '..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/1.2.276.0.7230010.3.1.4.8323329.4982.1517875185.837576.dcm'\ndataset = pydicom.dcmread(sample_file_path)\n\nsrc_img = dataset.pixel_array\n    \n# Contrast Stretching\np2, p98 = np.percentile(src_img, (2, 98))\nimg_cs = img_as_float(exposure.rescale_intensity(src_img, in_range=(p2, p98)))\n    \n# Histogram Equalization\nimg_he = img_as_float(exposure.equalize_hist(src_img))\n    \n# Adaptive Equalization\nimg_ae = img_as_float(exposure.equalize_adapthist(src_img))\n    \nax_img, ax_hist, ax_cdf = plot_img_and_hist(src_img, axes[:, 0])\nax_img.set_title('Low contrast image')\n\ny_min, y_max = ax_hist.get_ylim()\nax_hist.set_ylabel('Number of pixels')\n\nax_hist.set_yticks(np.linspace(0, y_max, 5))\nax_img, ax_hist, ax_cdf = plot_img_and_hist(img_cs, axes[:, 1])\nax_img.set_title('Contrast stretching')\n\nax_img, ax_hist, ax_cdf = plot_img_and_hist(img_he, axes[:, 2])\nax_img.set_title('Histogram equalization')\n\nax_img, ax_hist, ax_cdf = plot_img_and_hist(img_ae, axes[:, 3])\nax_img.set_title('Adaptive equalization')\nax_cdf.set_ylabel('Fraction of total intensity')\nax_cdf.set_yticks(np.linspace(0, 1, 5))\n\n# prevent overlap of y-axis labels\nfig.tight_layout()\nplt.show()","452b9d95":"<br\/>\n# To summarize pixel intensity","d8cc7f54":"<br\/>\n# Adaptive Equalization","e33b2003":"This kernel is froked from [Image Pre-processing for Chest X-ray](https:\/\/www.kaggle.com\/seriousran\/image-pre-processing-for-chest-x-ray) <br\/>\nand adapted from my repository [histogram-equalization](https:\/\/github.com\/sakares\/histogram-equalization).\n\nI hope this notebook could you have a better picture of pixel intensity and further processing.\nConcretely, low contrast images could be found in many DICOM images and some **\"histogram equalization\"** techniques could leverage the exposure of images.\n\nscikit-image provides a bunch of methods you can play with those images.\n\nFurther reading: [Image Augmentation for Deep Learning using Keras and Histogram Equalization](https:\/\/towardsdatascience.com\/image-augmentation-for-deep-learning-using-keras-and-histogram-equalization-9329f6ae5085)","3f3f886a":"<br\/>\n# Contrast Stretching\n![](http:\/\/)ref: https:\/\/scikit-image.org\/docs\/0.9.x\/auto_examples\/plot_equalize.html","4dffb79b":"# Original","5f50e813":"<br\/>\n# Histogram Equalization"}}