{"cell_type":{"f0295f1a":"code","3c075ca0":"code","4a9a29c4":"code","2be5f354":"code","ee5d12a3":"code","7dd2ca4c":"code","5c105e9d":"code","6a634c2f":"code","9f031437":"code","399a4784":"code","6e4ae605":"code","0bd8b27b":"code","8a786c72":"markdown"},"source":{"f0295f1a":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\npred_24=pd.read_csv(\"..\/input\/et-oof-20210514-100615\/et_pred24.csv\")\n\npred_24.head()","3c075ca0":"## plt cm\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.utils.multiclass import unique_labels\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\ndef plot_confusion_matrix(y_true, y_pred, classes,\n                          normalize=False,\n                          title=None,\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    Refer to: https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html\n    \n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if not title:\n        if normalize:\n            title = 'Normalized confusion matrix'\n        else:\n            title = 'Confusion matrix, without normalization'\n\n    # Compute confusion matrix\n    cm = confusion_matrix(y_true, y_pred)\n\n    # Only use the labels that appear in the data\n\n    classes = classes[unique_labels(y_true, y_pred)]\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    fig, ax = plt.subplots(figsize=(20, 20))\n    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, fontsize=25)\n    plt.yticks(tick_marks, fontsize=25)\n    plt.xlabel('Predicted label',fontsize=25)\n    plt.ylabel('True label', fontsize=25)\n    plt.title(title, fontsize=30)\n    \n    divider = make_axes_locatable(ax)\n    cax = divider.append_axes('right', size=\"5%\", pad=0.15)\n    cbar = ax.figure.colorbar(im, ax=ax, cax=cax)\n    cbar.ax.tick_params(labelsize=20)\n    \n    # We want to show all ticks...\n    ax.set(xticks=np.arange(cm.shape[1]),\n           yticks=np.arange(cm.shape[0]),\n           # ... and label them with the respective list entries\n           xticklabels=classes, yticklabels=classes,\n#            title=title,\n           ylabel='True label',\n           xlabel='Predicted label')\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), ha=\"center\",\n             rotation_mode=\"anchor\")\n\n    # Loop over data dimensions and create text annotations.\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j, i, format(cm[i, j], fmt),\n                    fontsize=20,\n                    ha=\"center\", va=\"center\",\n                    color=\"white\" if cm[i, j] > thresh else \"black\")\n    fig.tight_layout()\n    title = title.replace(\" \",\"_\")\n    plt.show()\n    #fig.savefig(f\"{title}.png\")\n    return ax","4a9a29c4":"threshed_pred = [round(x) for x in pred_24[\"pred\"]]\ntargets_cm = [\"0\",\"1\"]\nplt.figure()\nplot_confusion_matrix(pred_24[\"target\"], threshed_pred, \n                      classes=np.array(targets_cm),\n                      normalize=False)","2be5f354":"##target==1\npred1 = pred_24[pred_24[\"target\"]==1].reset_index(drop=True)\nplt.figure(figsize=(12,6))\nplt.hist(pred1[\"pred\"].values,bins=100)\nplt.show()","ee5d12a3":"##target==0\npred0 = pred_24[pred_24[\"target\"]==0].reset_index(drop=True)\nplt.figure(figsize=(12,6))\nplt.hist(pred1[\"pred\"].values,bins=100)\nplt.show()","7dd2ca4c":"## true=1,pred~1\neasy1 =pred_24[pred_24[\"target\"]==1].reset_index(drop=True).sort_values(\"pred\").iloc[-30:,:]\n\nfor i in range(30):\n    file_path = easy1[\"id\"].values[i]\n    image = np.load(f\"..\/input\/seti-breakthrough-listen\/train\/{file_path[0]}\/{file_path}.npy\")\n    image = np.vstack(image).transpose((1, 0)).astype(\"float32\")\n    plt.figure(figsize=(12,12))\n    plt.imshow(image)\n    plt.show()","5c105e9d":"## true=0,pred~0\neasy0 =pred_24[pred_24[\"target\"]==0].reset_index(drop=True).sort_values(\"pred\").iloc[:30,:]\n\nfor i in range(10):\n    file_path = easy0[\"id\"].values[i]\n    image = np.load(f\"..\/input\/seti-breakthrough-listen\/train\/{file_path[0]}\/{file_path}.npy\")\n    image = np.vstack(image).transpose((1, 0)).astype(\"float32\")\n    plt.figure(figsize=(12,12))\n    plt.imshow(image)\n    plt.show()","6a634c2f":"##true=0,pred~1\noverconf1=pred_24[pred_24[\"target\"]==0].reset_index(drop=True).sort_values(\"pred\").iloc[-30:,:]\noverconf1.head()","9f031437":"\nfor i in range(10):\n    file_path = overconf1[\"id\"].values[i]\n    image = np.load(f\"..\/input\/seti-breakthrough-listen\/train\/{file_path[0]}\/{file_path}.npy\")\n    image = np.vstack(image).transpose((1, 0)).astype(\"float32\")\n    plt.figure(figsize=(12,12))\n    plt.imshow(image)\n    plt.show()","399a4784":"##true=1,pred~0 ... difficult\noverconf0=pred_24[pred_24[\"target\"]==1].reset_index(drop=True).sort_values(\"pred\").iloc[:30,:]\noverconf0.head()","6e4ae605":"##true=1,pred~0\n\nfor i in range(30):\n    file_path = overconf0[\"id\"].values[i]\n    image = np.load(f\"..\/input\/seti-breakthrough-listen\/train\/{file_path[0]}\/{file_path}.npy\")\n    image = np.vstack(image).transpose((1, 0)).astype(\"float32\")\n    plt.figure(figsize=(12,12))\n    plt.imshow(image)\n    plt.show()","0bd8b27b":"##kaggle?? \n\n\nfor i in range(11,12):\n    file_path = easy1[\"id\"].values[i]\n    image = np.load(f\"..\/input\/seti-breakthrough-listen\/train\/{file_path[0]}\/{file_path}.npy\")\n    image = np.vstack(image).transpose((1, 0)).astype(\"float32\")\n    plt.figure(figsize=(12,12))\n    plt.imshow(image)\n    plt.show()","8a786c72":"\n\nit looks that my pred24 tend to mistake target==1 for target==0."}}