{"cell_type":{"b5f4b3f2":"code","5765cdfb":"code","502573fd":"code","551d5ba3":"code","79c54b03":"code","4f895e03":"code","e82eafb8":"code","fbfd1853":"code","66b66759":"code","d8de69ef":"code","214155f8":"code","1450c648":"markdown","c99d2814":"markdown","f3258452":"markdown","dbfb1966":"markdown","82d76d68":"markdown"},"source":{"b5f4b3f2":"# data analysis libraries:\nimport numpy as np\nimport pandas as pd\n\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n# to ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to display all columns:\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier \nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nimport numpy as np, pandas as pd, os, gc\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn as sns\nimport lightgbm as lgb\nimport gc\nfrom time import time\nimport datetime\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, TimeSeriesSplit\nfrom sklearn.metrics import roc_auc_score\nwarnings.simplefilter('ignore')\nsns.set()\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np,gc # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\nimport numpy as np\nimport pandas as pd \nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom sklearn.model_selection import StratifiedKFold\nsns.set()\n%matplotlib inline\nimport gc\nimport time\nfrom contextlib import contextmanager","5765cdfb":"@contextmanager\ndef timer(title):\n    t0 = time.time()\n    yield\n    print(\"{} - done in {:.0f}s\".format(title, time.time() - t0))","502573fd":"# FREQUENCY ENCODE TOGETHER\ndef encode_FE(df1, df2, cols):\n    for col in cols:\n        df = pd.concat([df1[col],df2[col]])\n        vc = df.value_counts(dropna=True, normalize=True).to_dict()\n        vc[-1] = -1\n        nm = col+'_FE'\n        df1[nm] = df1[col].map(vc)\n        df1[nm] = df1[nm].astype('float32')\n        df2[nm] = df2[col].map(vc)\n        df2[nm] = df2[nm].astype('float32')\n        print(nm,', ',end='')\n        \n# LABEL ENCODE\ndef encode_LE(col,train,test,verbose=False):\n    df_comb = pd.concat([train[col],test[col]],axis=0)\n    df_comb,_ = df_comb.factorize(sort=True)\n    nm = col\n    if df_comb.max()>32000: \n        train[nm] = df_comb[:len(train)].astype('int32')\n        test[nm] = df_comb[len(train):].astype('int32')\n    else:\n        train[nm] = df_comb[:len(train)].astype('int16')\n        test[nm] = df_comb[len(train):].astype('int16')\n    del df_comb; x=gc.collect()\n    if verbose: print(nm,', ',end='')\n        \n# GROUP AGGREGATION MEAN AND STD\n# https:\/\/www.kaggle.com\/kyakovlev\/ieee-fe-with-some-eda\ndef encode_AG(main_columns, uids, aggregations, train_df, test_df, \n              fillna=True, usena=False):\n    # AGGREGATION OF MAIN WITH UID FOR GIVEN STATISTICS\n    for main_column in main_columns:  \n        for col in uids:\n            for agg_type in aggregations:\n                new_col_name = main_column+'_'+col+'_'+agg_type\n                temp_df = pd.concat([train_df[[col, main_column]], test_df[[col,main_column]]])\n                if usena: temp_df.loc[temp_df[main_column]==-1,main_column] = np.nan\n                temp_df = temp_df.groupby([col])[main_column].agg([agg_type]).reset_index().rename(\n                                                        columns={agg_type: new_col_name})\n\n                temp_df.index = list(temp_df[col])\n                temp_df = temp_df[new_col_name].to_dict()   \n\n                train_df[new_col_name] = train_df[col].map(temp_df).astype('float32')\n                test_df[new_col_name]  = test_df[col].map(temp_df).astype('float32')\n                \n                if fillna:\n                    train_df[new_col_name].fillna(-1,inplace=True)\n                    test_df[new_col_name].fillna(-1,inplace=True)\n                \n                print(\"'\"+new_col_name+\"'\",', ',end='')\n                \n# COMBINE FEATURES\ndef encode_CB(col1,col2,train,test):\n    nm = col1+'_'+col2\n    train[nm] = train[col1].astype(str)+'_'+train[col2].astype(str)\n    test[nm] = test[col1].astype(str)+'_'+test[col2].astype(str) \n    encode_LE(nm,train,test)\n# GROUP AGGREGATION NUNIQUE\ndef encode_AG2(main_columns, uids, train_df, test_df):\n    for main_column in main_columns:  \n        for col in uids:\n            comb = pd.concat([train_df[[col]+[main_column]],test_df[[col]+[main_column]]],axis=0)\n            mp = comb.groupby(col)[main_column].agg(['nunique'])['nunique'].to_dict()\n            train_df[col+'_'+main_column+'_ct'] = train_df[col].map(mp).astype('float32')\n            test_df[col+'_'+main_column+'_ct'] = test_df[col].map(mp).astype('float32')\n            print(col+'_'+main_column+'_ct, ',end='')","551d5ba3":"%%time\n# From kernel https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n# WARNING! THIS CAN DAMAGE THE DATA \ndef reduce_mem_usage2(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","79c54b03":"def base_models(X,y,test,test_Exited):\n    \n   \n    \n    \n    from sklearn.model_selection import cross_val_score, KFold \n  \n\n    \n    results = []\n    A = []\n    \n    names = [\"LogisticRegression\",\"GaussianNB\",\"KNN\",\n             \"CART\",\"RF\",\"GBM\",\"XGBoost\",\"LightGBM\",\"CatBoost\"]\n    \n    \n    classifiers = [LogisticRegression(),GaussianNB(), KNeighborsClassifier(),\n                  RandomForestClassifier(), GradientBoostingClassifier(),\n                  XGBClassifier(), LGBMClassifier(), CatBoostClassifier(verbose = False)]\n    \n    \n    for name, clf in zip(names, classifiers):\n        \n        folds = StratifiedKFold(n_splits=5)\n        cv_results = cross_val_score(clf, X, y, cv = folds, scoring = \"accuracy\")\n        results.append(cv_results)\n        A.append(name)\n        clf.fit(X, y)\n        predictions = clf.predict_proba(test)[:, 1]\n        real_test_y=pd.DataFrame(test_Exited)\n        real_test_y[\"predictions\"]=predictions\n        real_test_y.loc[:,\"predictions\"]=round((real_test_y.loc[:,\"predictions\"]).astype(\"int\") )\n        z=accuracy_score(real_test_y.loc[:,\"Exited\"],real_test_y.loc[:,\"predictions\"] )\n        test_score=\"   test score : \"\n        msg = \"%s: %f (%f) %s %f\" % (name, cv_results.mean() , cv_results.std(),test_score, z)\n        print(msg)\n       ","4f895e03":"def love():\n    print('\\n'.join([''.join([(' I_Love_Data_Science_'[(x-y) % len('I_Love_Data_Science_')] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0 else ' ') for x in range(-30, 30)]) for y in range(15, -15, -1)]))","e82eafb8":"def combine():\n     with timer('Combining :'):   \n        print('Combining Start...')\n        # Read train and test data with pd.read_csv():\n        data=pd.read_csv(\"\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv\")\n        train, test = train_test_split(data, test_size=0.30, random_state=4)\n        test_Exited=test[\"Exited\"]\n        test=test.drop([\"Exited\"], axis=1)\n        \n        \n\n        return train,test,test_Exited","fbfd1853":"def pre_processing_and_feature_engineering():\n    train,test,test_Exited=combine()   \n    \n    with timer('Preprocessing and Feature Engineering'):\n        print('-' * 30)\n        print('Preprocessing and Feature Engineering start...')\n        print('-' * 10)\n        print(\"we can drop RowNumber column\")\n        train = train.drop([\"RowNumber\"],axis=1)\n        test = test.drop([\"RowNumber\"],axis=1)\n        print(\"-\")\n        print(\"Creating New Features...\")\n        bins = [0, 20, 30, 40, 50, 60, 70, np.inf]\n        mylabels = [ 'Child', 'Young', 'Young Adult', 'Adult', 'Senior',\"Old\",\"Death\"]\n        train['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = mylabels)\n        test['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = mylabels)\n        main_columns=test._get_numeric_data().columns.drop(['CustomerId'])\n        categorical_columns=test.columns.drop(main_columns)\n        categorical_columns=categorical_columns.drop(['CustomerId'])           \n        bins = [0, 585, 653, 718,np.inf]\n        mylabels = [ 'v_low', 'low', 'medium', 'high']\n        train[\"CreditScoreGroup\"] = pd.cut(train[\"CreditScore\"], bins, labels = mylabels)\n        test[\"CreditScoreGroup\"] = pd.cut(test[\"CreditScore\"], bins, labels = mylabels)\n        bins = [-1, 97006,  127290,np.inf]\n        mylabels = [ 'low',  'medium', 'high']\n        train[\"BalanceGroup\"] = pd.cut(train[\"Balance\"], bins, labels = mylabels)\n        test[\"BalanceGroup\"] = pd.cut(test[\"Balance\"], bins, labels = mylabels)\n        bins = [0, 50607,  99041,149383,np.inf]\n        mylabels = [ 'low',  'medium', 'high',\"v_high\"]\n        train[\"EstimatedSalaryGroup\"] = pd.cut(train[\"EstimatedSalary\"], bins, labels = mylabels)\n        test[\"EstimatedSalaryGroup\"] = pd.cut(test[\"EstimatedSalary\"], bins, labels = mylabels)\n        # FREQUENCY ENCODE TOGETHER\n        encode_FE(train, test, [ 'NumOfProducts', 'Tenure'])\n        # COMBINE FEATURES\n        encode_CB('NumOfProducts','Tenure',train,test)\n        encode_CB('NumOfProducts_Tenure','Gender',train,test)\n        encode_CB(\"EstimatedSalaryGroup\",\"BalanceGroup\",train,test)\n        encode_CB('EstimatedSalaryGroup_BalanceGroup',\"CreditScoreGroup\",train,test)\n        # GROUP AGGREGATION MEAN AND STD\n        encode_AG([\"Balance\",\"EstimatedSalary\",\"CreditScore\"], [\"NumOfProducts\",'NumOfProducts_Tenure','EstimatedSalaryGroup_BalanceGroup_CreditScoreGroup'], [\"mean\",\"std\"], train, test)\n        # GROUP AGGREGATION NUNIQUE\n        encode_AG2([ 'Surname'], ['NumOfProducts_Tenure','EstimatedSalaryGroup_BalanceGroup_CreditScoreGroup'], train, test)\n        print(\"Creating New Features Finished\")\n        print('-' * 10)\n        print('Label Coding and One Hot Encoding Start...')\n        train=pd.get_dummies(train, columns = [\"Geography\"])\n        test = pd.get_dummies(test, columns = [\"Geography\"])\n        train=pd.get_dummies(train, columns = [\"AgeGroup\"])\n        test = pd.get_dummies(test, columns = [\"AgeGroup\"])\n\n        main_columns=test._get_numeric_data().columns.drop(['CustomerId'])\n        categorical_columns=test.columns.drop(main_columns)\n        categorical_columns=categorical_columns.drop(['CustomerId'])\n        from sklearn import preprocessing\n        for i in categorical_columns:\n                lbe=preprocessing.LabelEncoder()\n                train[i]=lbe.fit_transform(train[i].astype(str))\n                test[i]=lbe.fit_transform(test[i].astype(str))\n   \n        \n        \n        \n       \n       \n          \n        \n                \n        print('-' * 10)\n        return train,test,test_Exited","66b66759":"def modeling():\n    train,test,test_Exited=pre_processing_and_feature_engineering()\n    with timer('Machine Learning '):\n        train_CustomerId= train[\"CustomerId\"]\n        test_CustomerId=test[\"CustomerId\"]\n\n        X= train.drop(['CustomerId',\"Exited\"], axis=1)\n        y = train['Exited']\n        test = test.drop(['CustomerId'], axis=1)\n        \n        print('-')\n        print('-' * 20)\n        print('Machine Learning start ... ')\n        base_models(X,y,test,test_Exited)\n        params=  {\n                    'task': 'train',\n                    'boosting_type': 'gbdt',\n                    'objective': 'binary',\n                    'metric': 'auc',\n                    'num_leaves': 35,\n                    'learning_rate': 0.05,\n                    'verbose': -1}\n        from sklearn.model_selection import StratifiedKFold\n        folds = StratifiedKFold(n_splits=5)\n        folds.get_n_splits(X, y)\n\n        aucs = list()\n\n        fold=-1\n        \n        for trn_idx, test_idx in folds.split(X, y):\n            fold=fold+1\n            \n            print('Training on fold {}'.format(fold + 1))\n\n            trn_data = lgb.Dataset(X.iloc[trn_idx], label=y.iloc[trn_idx])\n            val_data = lgb.Dataset(X.iloc[test_idx], label=y.iloc[test_idx])\n            clf = lgb.train(params,trn_data, 10000, valid_sets = [trn_data, val_data], verbose_eval=1000, early_stopping_rounds=500)\n\n\n            aucs.append(clf.best_score['valid_1']['auc'])\n\n            \n        print('-' * 30)\n        print('Training has finished.')\n       \n        print('Mean AUC:', np.mean(aucs))\n        print('-' * 30)\n        #clf right now is the last model, trained with 80% of data and validated with 20%\n        best_iter = clf.best_iteration\n        clf = lgb.LGBMClassifier(**params, num_boost_round=best_iter)\n        clf.fit(X, y)\n        \n        predictions = clf.predict_proba(test)[:, 1]\n        real_test_y=pd.DataFrame(test_Exited)\n        real_test_y[\"predictions\"]=predictions\n        real_test_y.loc[:,\"predictions\"]=round(real_test_y.loc[:,\"predictions\"] ).astype(int)\n        print(\"Final model real accuracy LGBM :\",accuracy_score(real_test_y.loc[:,\"Exited\"],real_test_y.loc[:,\"predictions\"] ))\n        love()\n        feature_imp = pd.DataFrame(sorted(zip(clf.feature_importances_,X.columns)), columns=['Value','Feature'])\n        feature_imp.to_excel('feature_importances.xlsx')\n        plt.figure(figsize=(20, 10))\n        sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\n        plt.title('LightGBM Features (avg over folds)')\n        plt.tight_layout()\n        plt.show()\n        plt.savefig('lgbm_importances-01.png')\n\n        return ","d8de69ef":"def main():\n    with timer('Full Model Run '):\n        print(\"Full Model Run Start...\")\n        print('-' * 50)\n        modeling() \n        print('-' * 50)","214155f8":"if __name__ == \"__main__\":\n     main()","1450c648":"> # Preprocessing and Feature Engineering","c99d2814":"# Libraries","f3258452":"# Combine","dbfb1966":"# main","82d76d68":"# Helper Functions"}}