{"cell_type":{"4a0189ac":"code","7ce88f9f":"code","959cdc58":"code","ad620319":"code","696d592a":"code","ce581494":"code","cd70cbe3":"code","e80ed2d2":"code","4e66611f":"code","2d6d7e3d":"code","8cf288e1":"code","5469cbca":"code","d6ad7445":"code","761367ed":"code","a841f19c":"code","db6673f3":"code","5382191a":"code","41afe182":"code","c38b86de":"code","1715a5d7":"code","e53c5000":"code","3e8e4499":"code","99387a7c":"markdown"},"source":{"4a0189ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ce88f9f":"# Import library\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nfrom glob import glob\nfrom PIL import Image\nimport os\nimport random\nimport cv2","959cdc58":"path = '..\/input\/hrct-chest-covid-data-ct-scan\/HRCT-Chest-Covid-Data-CT-SCAN\/HRCT Chest Covid Data CT SCAN'\n\ndiag_code_dict = {\n    'Covid': 0,\n\n    'Normal': 1\n}\n\ndiag_title_dict = {\n    'Covid': 'Covid-19',\n\n    'Normal': 'Healthy'}\n\nimageid_path_dict = {os.path.splitext(os.path.basename(x))[0]: x for x in glob(os.path.join(path, '*','*.jpg'))}\n\nimageid_path_dict","ad620319":"covidData = pd.DataFrame.from_dict(imageid_path_dict, orient = 'index').reset_index()\ncovidData.columns = ['image_id','path']\nclasses = covidData.image_id.str.split('-').str[0]\ncovidData['diag'] = classes\ncovidData['target'] = covidData['diag'].map(diag_code_dict.get)\ncovidData['Class'] = covidData['diag'].map(diag_title_dict.get)","696d592a":"samples,feature = covidData.shape\nduplicated = covidData.duplicated().sum()\nnull_values = covidData.isnull().sum().sum()\n\nprint('Simple EDA')\nprint('Number of samples: %d'%(samples))\nprint('duplicates: %d'%(duplicated))\nprint('null values: %d' %(null_values))","ce581494":"#samples per class\nplt.figure(figsize=(20,8))\nsns.set(style=\"ticks\", font_scale = 1)\nax = sns.countplot(data = covidData,x='Class',order = covidData['Class'].value_counts().index,palette=\"flare\")\nsns.despine(top=True, right=True, left=True, bottom=False)\nplt.xticks(rotation=0,fontsize = 12)\nax.set_xlabel('Sample Type - Diagnosis',fontsize = 14,weight = 'bold')\nax.set(yticklabels=[])\nax.axes.get_yaxis().set_visible(False) \nplt.title('Number of Samples per Class', fontsize = 16,weight = 'bold');\n#plot percentage\nfor p in ax.patches:\n    ax.annotate(\"%.1f%%\" % (100*float(p.get_height()\/samples)), (p.get_x() + p.get_width() \/ 2., abs(p.get_height())),\n    ha='center', va='bottom', color='black', xytext=(0, 10),rotation = 'horizontal',\n    textcoords='offset points')","cd70cbe3":"covidData['image'] = covidData['path'].map(lambda x: np.asarray(Image.open(x).resize((75, 75))))","e80ed2d2":"n_samples =3\n\nfig, m_axs = plt.subplots(2, n_samples, figsize = (2*n_samples, 3*2))\n\nfor n_axs, (type_name, type_rows) in zip(m_axs,covidData.sort_values(['diag']).groupby('diag')):\n    n_axs[1].set_title(type_name,fontsize = 14,weight = 'bold')\n    for c_ax, (_, c_row) in zip(n_axs, type_rows.sample(n_samples, random_state=1234).iterrows()):       \n        picture = c_row['path']\n        image = cv2.imread(picture)\n        c_ax.imshow(image)\n        c_ax.axis('off')","4e66611f":"print('shape of the image: {}'.format(image.shape))","2d6d7e3d":"print('image size {}'.format(image.size))","8cf288e1":"image.dtype","5469cbca":"print('max rgb: {}'.format(image.max()))","d6ad7445":"print('min rgb: {}'.format(image.min()))","761367ed":"image[0, 0]","a841f19c":"plt.title('Bchannel', fontsize=14, weight='bold')\nplt.imshow(image[:,:,0])\nplt.axis('off');\nplt.show()","db6673f3":"mean_val = []\nstd_dev_val = []\nmax_val = []\nmin_val = []\n\nfor i in range(0, samples):\n    mean_val.append(covidData['image'][i].mean())\n    std_dev_val.append(np.std(covidData['image'][i]))\n    max_val.append(covidData['image'][i].max())\n    min_val.append(covidData['image'][i].min())\n\nimageEDA = covidData.loc[:, ['image', 'Class', 'path']]\nimageEDA['mean'] = mean_val\nimageEDA['stedev'] = std_dev_val\nimageEDA['max'] = max_val\nimageEDA['min'] = min_val\n\nsubt_mean_samples = imageEDA['mean'].mean() - imageEDA['mean']\nimageEDA['subt_mean'] = subt_mean_samples","5382191a":"ax = sns.displot(data = imageEDA, x = 'mean', kind=\"kde\")\nplt.title('Image color mean value distribution')","41afe182":"ax = sns.displot(data = imageEDA, x = 'mean', kind=\"kde\", hue='Class')\nplt.title('Image color mean value distribution by class')","c38b86de":"ax = sns.displot(data = imageEDA, x = 'max', kind=\"kde\", hue='Class')\nplt.title('Image color max value distribution by class')","1715a5d7":"sns.displot(data = imageEDA, x = 'min', kind=\"kde\", hue='Class')\nplt.title('Image color min value distribution by class')","e53c5000":"plt.figure(figsize=(20,8))\nsns.set(style=\"ticks\", font_scale = 1)\nax = sns.scatterplot(data=imageEDA, x=\"mean\", y=imageEDA['stedev'], hue = 'Class',alpha=0.8);\nsns.despine(top=True, right=True, left=False, bottom=False)\nplt.xticks(rotation=0,fontsize = 12)\nax.set_xlabel('Image Channel Colour Mean',fontsize = 14,weight = 'bold')\nax.set_ylabel('Image Channel Colour Standard Deviation',fontsize = 14,weight = 'bold')\nplt.title('Mean and Standard Deviation of Image Samples', fontsize = 16,weight = 'bold');","3e8e4499":"plt.figure(figsize=(20,8));\ng = sns.FacetGrid(imageEDA, col=\"Class\", height=6)\ng.map_dataframe(sns.scatterplot, x='mean', y='stedev');\ng.set_titles(col_template=\"{col_name}\", row_template=\"{row_name}\", size=14)\ng.fig.subplots_adjust(top=.7)\ng.fig.suptitle('Mean and standard dev of img samples')\naxes = g.axes.flatten()\naxes[0].set_ylabel('std dev')\nfor ax in axes:\n    ax.set_xlabel('Mean')\ng.fig.tight_layout()","99387a7c":"## EDA is inspired by meghnasingh, below is the link\n\nhttps:\/\/www.kaggle.com\/meghnasingh2080\/covid-19-x-ray-classifier"}}