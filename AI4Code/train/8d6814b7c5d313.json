{"cell_type":{"95c5e010":"code","cf88759d":"code","dd21dbd3":"code","6ae6c818":"code","edf7f39e":"code","a652363b":"code","fa2d6737":"code","e9e991a0":"code","4f26be6d":"code","820404e1":"code","ed6566b1":"code","c93ecc20":"code","6dcca356":"code","f12b6ef9":"code","97d99098":"code","8e56cd0e":"code","5e8c8ac6":"code","845516e4":"code","769bf87a":"code","9b22ca73":"code","34b1394d":"code","41b2122c":"code","75e0af62":"code","23bbf61e":"code","dfdc32e2":"code","7edaaf40":"code","476c6881":"code","3bb3db05":"code","ace12303":"code","5ff93695":"code","6c9f1fa8":"code","e1676ad0":"code","ff90e3e1":"code","3299b6c7":"code","0549d1ff":"code","3f659167":"code","baae1463":"code","bcfec3cb":"code","3b720a5e":"code","baaa56b5":"code","fccb2bae":"code","afef850b":"code","3d855a4b":"code","a8b70c37":"markdown","1fe0b1a8":"markdown","838f2030":"markdown","557edf4d":"markdown","b8edb5dc":"markdown","5be907cf":"markdown","544c3aac":"markdown","780d0dae":"markdown","47c9ac6c":"markdown"},"source":{"95c5e010":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        a=1\n\n# Any results you write to the current directory are saved as output.","cf88759d":"try:\n  # %tensorflow_version only exists in Colab.\n  %tensorflow_version 2.x\n  print(tf.__version__)\nexcept Exception:\n  pass","dd21dbd3":"from pathlib import Path\nimport os\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport seaborn as sns\n\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import (Input, Activation, Dense, Flatten, Conv2D, \n                                     MaxPooling2D, Dropout, BatchNormalization)","6ae6c818":"data_dir = Path('..\/input\/intel-image-classification')","edf7f39e":"train_dir = data_dir \/ 'seg_train'\/'seg_train'\n\nval_dir = data_dir \/ 'seg_test'\/'seg_test'\n\ntest_dir = data_dir \/ 'seg_pred'\/'seg_pred'","a652363b":"mountain_dir = train_dir \/ 'mountain'\nsea_dir = train_dir \/ 'sea'\nforest_dir = train_dir \/ 'forest'\nstreet_dir = train_dir \/ 'street'\nglacier_dir = train_dir \/ 'glacier'\nbuildings_dir = train_dir \/ 'buildings'","fa2d6737":"mountain_val_dir = val_dir \/ 'mountain'\nsea_val_dir = val_dir \/ 'sea'\nforest_val_dir = val_dir \/ 'forest'\nstreet_val_dir = val_dir \/ 'street'\nglacier_val_dir = val_dir \/ 'glacier'\nbuildings_val_dir = val_dir \/ 'buildings'","e9e991a0":"mountain_dir_ = os.path.join(mountain_dir)\nmountain_img = os.listdir(mountain_dir_)\nsea_dir_ = os.path.join(sea_dir)\nsea_img = os.listdir(sea_dir_)\nforest_dir_ = os.path.join(forest_dir)\nforest_img = os.listdir(forest_dir_)\nstreet_dir_ = os.path.join(street_dir)\nstreet_img = os.listdir(street_dir_)\nglacier_dir_ = os.path.join(glacier_dir)\nglacier_img = os.listdir(glacier_dir_)\nbuildings_dir_ = os.path.join(buildings_dir)\nbuildings_img = os.listdir(buildings_dir_)","4f26be6d":"mountain_val_dir_ = os.path.join(mountain_val_dir)\nmountain_val_img = os.listdir(mountain_val_dir_)\nsea_val_dir_ = os.path.join(sea_val_dir)\nsea_val_img = os.listdir(sea_val_dir_)\nforest_val_dir_ = os.path.join(forest_val_dir)\nforest_val_img = os.listdir(forest_val_dir_)\nstreet_val_dir_ = os.path.join(street_val_dir)\nstreet_val_img = os.listdir(street_val_dir_)\nglacier_val_dir_ = os.path.join(glacier_val_dir)\nglacier_val_img = os.listdir(glacier_val_dir_)\nbuildings_val_dir_ = os.path.join(buildings_val_dir)\nbuildings_val_img = os.listdir(buildings_val_dir_)","820404e1":"def plot_imm(dir_img, img_plot, n_img):\n  for i in range(n_img):\n    img_path = os.path.join(dir_img, img_plot[i]) \n    plt.subplot(2,2,i+1)\n    img = mpimg.imread(img_path)\n    plt.imshow(img)","ed6566b1":"plot_imm(mountain_dir, mountain_img,4)","c93ecc20":"plot_imm(sea_dir, sea_img,4)","6dcca356":"plot_imm(forest_dir, forest_img,4)","f12b6ef9":"plot_imm(street_dir, street_img,4)","97d99098":"plot_imm(glacier_dir, glacier_img,4)","8e56cd0e":"plot_imm(buildings_dir, buildings_img,4)","5e8c8ac6":"len_mountain_train   = len(os.listdir(mountain_dir))\nlen_sea_train        = len(os.listdir(sea_dir))\nlen_forest_train     = len(os.listdir(forest_dir))\nlen_street_train     = len(os.listdir(street_dir))\nlen_glacier_train    = len(os.listdir(glacier_dir))\nlen_buildings_train  = len(os.listdir(buildings_dir))\n\nlen_mountain_val     = len(os.listdir(mountain_val_dir))\nlen_sea_val          = len(os.listdir(sea_val_dir))\nlen_forest_val       = len(os.listdir(forest_val_dir))\nlen_street_val       = len(os.listdir(street_val_dir))\nlen_glacier_val      = len(os.listdir(glacier_val_dir))\nlen_buildings_val    = len(os.listdir(buildings_val_dir))","845516e4":"print('total training mountain images:',  len_mountain_train)\nprint('total training sea images:',       len_sea_train)\nprint('total training forest images:',    len_forest_train)\nprint('total training street images:',    len_street_train)\nprint('total training glacier images:',   len_glacier_train)\nprint('total training buildings images:', len_buildings_train)\n\nprint('total val mountain images:',       len_mountain_val)\nprint('total val sea images:',            len_sea_val)\nprint('total val forest images:',         len_forest_val)\nprint('total val street images:',         len_street_val)\nprint('total val glacier images:',        len_glacier_val)\nprint('total val buildings images:',      len_buildings_val)","769bf87a":"d = {'class' : ['mountain','sea', 'forest','street','glacier','buildings'],\n     'train': [len_mountain_train, len_sea_train,len_forest_train, len_street_train,len_glacier_train, len_buildings_train], \n     'val': [len_mountain_val, len_sea_val,len_forest_val, len_street_val,len_glacier_val, len_buildings_val]}\ndata_clas = pd.DataFrame(data=d)\ndata_clas","9b22ca73":"sns.factorplot('train',data=data_clas,kind=\"count\",palette='winter_d')","34b1394d":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1\/255, \n                                   rotation_range=20,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   horizontal_flip=True,\n                                  )\n\nval_datagen = ImageDataGenerator(rescale=1\/255, \n                                   rotation_range=20,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   horizontal_flip=True,\n                                  )\n\ntest_datagen = ImageDataGenerator(rescale=1\/255)\n\ntrain_generator = train_datagen.flow_from_directory(train_dir, target_size=(300, 300), \n                                                    batch_size=128,  class_mode='categorical')\n\nvalidation_generator = train_datagen.flow_from_directory(val_dir, target_size=(300, 300), \n                                                    batch_size=128,  class_mode='categorical')","41b2122c":"train_generator.class_indices","75e0af62":"def plotImages(images_arr):\n    fig, axes = plt.subplots(1, 5, figsize=(20,20))\n    axes = axes.flatten()\n    for img, ax in zip( images_arr, axes):\n        ax.imshow(img)\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()","23bbf61e":"augmented_images = [train_generator[0][0][0] for i in range(5)]\nplotImages(augmented_images)","dfdc32e2":"class classificator (tf.keras.Model):\n    \n    def __init__(self):\n       \n        super(classificator, self).__init__()\n        \n        self.conv_1        = Conv2D(16, kernel_size=(3, 3), activation='relu',input_shape=(300, 300, 3)) \n        self.max_pool_1    = MaxPooling2D(pool_size=(2, 2))\n        self.conv_2        = Conv2D(16, kernel_size=(3, 3), activation='relu') \n        self.max_pool_2    = MaxPooling2D(pool_size=(2, 2))\n        self.Dropout_0     = Dropout(0.3)\n        \n        self.conv_3        = Conv2D(32, kernel_size=(3, 3), activation='relu') \n        self.max_pool_3    = MaxPooling2D(pool_size=(2, 2))   \n        self.Dropout_1     = Dropout(0.3)\n        \n        self.conv_4        = Conv2D(64, kernel_size=(3, 3), activation='relu') \n        self.max_pool_4    = MaxPooling2D(pool_size=(2, 2)) \n        self.Dropout_2     = Dropout(0.3)\n        \n        self.conv_5        = Conv2D(64, kernel_size=(3, 3), activation='relu') \n        self.max_pool_5    = MaxPooling2D(pool_size=(2, 2))      \n        self.Dropout_3     = Dropout(0.2)     \n\n  \n        self.flatten       = tf.keras.layers.Flatten()\n \n        self.dense_1       = tf.keras.layers.Dense(units=128, activation='relu')\n        self.dense_2       = tf.keras.layers.Dense(units=64, activation='relu')\n        self.dense_3       = tf.keras.layers.Dense(units=6, activation='sigmoid')\n        \n    def call(self, inputs):\n\n        x = self.max_pool_1(self.conv_1(inputs))\n        x = self.max_pool_2(self.conv_2(x))\n        x = self.Dropout_0(x)\n        \n        x = self.max_pool_3(self.conv_3(x))\n        \n        x = self.Dropout_1(x) \n        \n        x = self.max_pool_4(self.conv_4(x))\n        x = self.Dropout_3(x)\n        \n        x = self.max_pool_5(self.conv_5(x))\n        \n        \n        x = self.flatten(x)\n        x = self.dense_1(x)     \n      # x = self.dense_2(x)\n        x = self.dense_3(x)\n        \n        return x","7edaaf40":"model = classificator()","476c6881":"loss_object = tf.keras.losses.CategoricalCrossentropy()\noptimizer = tf.keras.optimizers.RMSprop(learning_rate=1e-3)","3bb3db05":"model.compile(optimizer=optimizer,\n              loss=loss_object,\n              metrics=['acc'])","ace12303":"history = model.fit_generator(train_generator,\n                              validation_data=validation_generator,\n                              epochs=8,\n                              verbose=1)","5ff93695":"acc      = history.history[     'acc' ]\nval_acc  = history.history[ 'val_acc' ]\nloss     = history.history[    'loss' ]\nval_loss = history.history['val_loss' ]","6c9f1fa8":"epochs   = range(len(acc))\nplt.plot  ( epochs,     acc )\nplt.plot  ( epochs, val_acc )\nplt.title ('Training and validation accuracy')\nplt.figure()","e1676ad0":"epochs   = range(len(acc))\nplt.plot  ( epochs,     loss )\nplt.plot  ( epochs, val_loss )\nplt.title ('Training and validation loss'   )","ff90e3e1":"test_img_dir = os.path.join(test_dir)\ntest_img = os.listdir(test_dir)\nprint(test_img_dir)","3299b6c7":"test_path = os.path.join(test_img_dir, test_img[25]) \nimg = mpimg.imread(test_path)\nplt.imshow(img)","0549d1ff":"from keras.preprocessing import image","3f659167":"img = image.load_img(test_path, target_size=(300, 300))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nimages = np.vstack([x])","baae1463":"classes = np.argmax(model.predict(images))","bcfec3cb":"if classes == 0:\n    print(\"the predict class is buildings\")\nelif classes ==1:\n    print(\"the predict class is forest\")\nelif classes ==2:\n    print(\"the predict class is glacier\")\nelif classes ==3:\n    print(\"the predict class is mountain\")\nelif classes ==4:\n    print(\"the predict class is sea\")\nelif classes ==5:\n    print(\"the predict class is street\")","3b720a5e":"my_model = \"intel_image_classification\"","baaa56b5":"tf.saved_model.save(model, my_model)","fccb2bae":"converter = tf.lite.TFLiteConverter.from_saved_model(my_model)\nconverter.optimizations = [tf.lite.Optimize.DEFAULT]","afef850b":"tflite_model = converter.convert()\ntflite_model_file = 'converted_model.tflite'\n\nwith open(tflite_model_file, \"wb\") as f:\n    f.write(tflite_model)","3d855a4b":"labels = ['buildings', 'forest','glacier', 'mountain', 'sea', 'street']\n\nwith open('labels.txt', 'w') as f:\n    f.write('\\n'.join(labels))","a8b70c37":"**Import Packages**","1fe0b1a8":"**Preprocessing and rescale**","838f2030":"Steps are:\n* Build the model,\n* Define the loss function and the optimizer,\n* Compile the model,\n* Fit the data to the model,\n* Predict a new image,\n* Save the model","557edf4d":"# **Intel Image Classification Tensorflow 2**","b8edb5dc":"**Model Creation**","5be907cf":"**Loading the Dataset**","544c3aac":"**Let's explore the dataset**","780d0dae":"This tutorial shows how to classify: mountain, sea, forest, street, glacier and buidings\n\nThe image classifier has been implemented using tensorflow 2.0","47c9ac6c":"**PREDICT**"}}