{"cell_type":{"963b60cb":"code","6f54536c":"code","b4bb8654":"code","4562f076":"code","5a36320b":"code","39cb6d44":"code","1b8731a7":"code","e9a80a41":"code","b73fb2c5":"code","e0ac76d5":"code","6f4c402f":"code","597b51e8":"code","a77623c8":"code","5c479cce":"code","bb77246f":"code","fca28e29":"code","67984eb4":"code","7a15414d":"code","cf00b5f6":"code","d12966b9":"code","37e43e5e":"code","c4030085":"code","e86d8917":"code","531a0816":"code","e44dd4f7":"code","c90b2f33":"code","7e04fe10":"code","ccd4d447":"code","46dc21ba":"code","bebf1056":"code","875eede4":"code","60a8db4f":"code","07fa3019":"code","929230a7":"code","bbb087a5":"code","a72fb551":"code","1f9ff65d":"code","75675e9b":"code","39a1e90f":"code","e29b3618":"code","53310698":"code","f88881f1":"code","0956b8e5":"code","4f5623fb":"code","3c6896bb":"code","9ffd087c":"code","3fe72fce":"code","5e406abd":"code","7d3c297c":"code","bab579e1":"code","a66204e4":"code","d0e20647":"code","6ddc10e6":"code","96d42a9e":"code","26ee62e4":"code","2b9c76fe":"code","54fe9877":"markdown","34a1a0ac":"markdown","706894ec":"markdown","9df89352":"markdown","3fe34ccc":"markdown","e093f748":"markdown","2cc42f71":"markdown","d930d51a":"markdown","4cef9dc0":"markdown","55581d79":"markdown","dadc830c":"markdown","c4fccec3":"markdown","3a619779":"markdown","930b5666":"markdown","9b4a2487":"markdown","7a99d615":"markdown","0fe47b4c":"markdown","41e7b45f":"markdown","7b59d50e":"markdown","d24d0e0d":"markdown","e82350a9":"markdown","bcb8422b":"markdown","ac1d36b0":"markdown","d3eaa37b":"markdown","16d3fd2a":"markdown","e8f946f8":"markdown","e16d7ba6":"markdown","135612ae":"markdown","c6897201":"markdown","144cfb98":"markdown","fb643fed":"markdown","32fe777e":"markdown","bdb36dba":"markdown","45de2737":"markdown"},"source":{"963b60cb":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport tqdm.notebook as tqdm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBRegressor\n\nplt.rcParams.update({'font.size': 18})\nplt.style.use('ggplot')\n\npd.set_option('display.max_colwidth',None)","6f54536c":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\n\nprint(train.shape, test.shape)","b4bb8654":"train.head(2)","4562f076":"test.head(2)","5a36320b":"train.isnull().sum()\ntest.isnull().sum()","39cb6d44":"unique_breath_id = train['breath_id'].nunique()\nprint('Number of unique breath IDs in train are: ', unique_breath_id)\n\nunique_breath_id_test = test['breath_id'].nunique()\nprint('Number of unique breath IDs in test are: ', unique_breath_id_test)","1b8731a7":"train_breath_id = [x for x in (np.unique(train['breath_id']))]\ntest_breath_id = [x for x in (np.unique(test['breath_id']))]","e9a80a41":"print(len(list(set(test_breath_id) - set(train_breath_id))))","b73fb2c5":"set(test_breath_id).intersection(train_breath_id)","e0ac76d5":"train.pressure.hist(figsize=(16, 4))","6f4c402f":"sns.kdeplot(train['pressure'])","597b51e8":"sns.kdeplot(train['R'].to_numpy(), color = 'red')\nsns.kdeplot(test['R'].to_numpy(), color = 'green')","a77623c8":"sns.kdeplot(train['C'].to_numpy(), color = 'red')\nsns.kdeplot(test['C'].to_numpy(), color = 'green')","5c479cce":"sns.countplot(train['R'])","bb77246f":"sns.countplot(test['R'])","fca28e29":"sns.countplot(train['u_out'])","67984eb4":"sns.countplot(test['u_out'])","7a15414d":"corr = train.corr().abs()\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(corr,cmap='coolwarm', vmin=-1, vmax=1)\nfig.colorbar(cax)\nticks = np.arange(0,len(train.columns),1)\nax.set_xticks(ticks)\nplt.xticks(rotation=90)\nax.set_yticks(ticks)\nax.set_xticklabels(train.columns)\nax.set_yticklabels(train.columns)\nplt.show()","cf00b5f6":"corr","d12966b9":"train.pressure.max()","37e43e5e":"breath_id_1 = train[train['breath_id'] == 1]\nbreath_id_1.head()","c4030085":"breath_id_1.shape","e86d8917":"fig, ax1 = plt.subplots(figsize = (6, 4))\nax2 = ax1.twinx()\nax1.plot(breath_id_1['time_step'], breath_id_1['pressure'], 'm-', label='pressure')\nax1.plot(breath_id_1['time_step'], breath_id_1['u_in'], 'g-', label='u_in')\nax2.plot(breath_id_1['time_step'], breath_id_1['u_out'], 'b-', label='u_out')\n\nax1.set_xlabel('Timestep')\n\nR = breath_id_1['R'][0]\nC = breath_id_1['C'][0]\nax1.set_title(f'breath_id:{1}, R:{R}, C:{C}')\n\nax1.legend(loc=(1.1, 0.8))\nax2.legend(loc=(1.1, 0.7))\nplt.show()","531a0816":"sns.lineplot(x = 'id',y='pressure',data=breath_id_1[breath_id_1['u_out']==0],color='green',label='inhale pressure');\nsns.lineplot(x = 'id',y='pressure',data=breath_id_1[breath_id_1['u_out']==1],color='orange',label='exhale pressure');\nsns.lineplot(x = 'id',y='u_in',data=breath_id_1,color='blue',label='valve pressure')\nplt.title(f\"Variation of Pressure and Input valve position during breath Id 1\");\nplt.show()","e44dd4f7":"plt.title(f'breath_id:{1}, Time Step Plot')\nplt.ylabel('Timestep')\nplt.xlabel('Row No.')\nplt.plot(breath_id_1['time_step'])\nplt.show()","c90b2f33":"plt.figure(figsize = (10,5))\nsns.histplot(data=train,x='time_step', bins=20)\nplt.show()","7e04fe10":"train.groupby(\"breath_id\")[\"time_step\"].count()","ccd4d447":"print(\"For train max time_step: \",train.time_step.max())\nprint(\"For test max time_step: \",test.time_step.max())","46dc21ba":"print(train.nunique().to_frame())\nprint('------------------------------')\nprint(test.nunique().to_frame())","bebf1056":"train.columns.values","875eede4":"def feature_engineering(df):\n    # adding feature last_value_u_in\n    \n    # for each breath fetching maximum time_step value\n    idxmax_time_step = df.groupby('breath_id')['time_step'].idxmax()\n    # for a maximum time_step value this column is fetching associated breath_id & u_in\n    last_value_u_in = df.loc[idxmax_time_step, ['breath_id','u_in']]\n    last_value_u_in.columns = ['breath_id','last_value_u_in']\n    df = df.merge(last_value_u_in, on='breath_id')\n    \n    \n    # adding feature mean_value_u_in\n    \n    mean_u_in = df.groupby('breath_id')['u_in'].mean().to_frame()\n    mean_u_in.columns = ['mean_value_u_in']\n    df = df.merge(mean_u_in,on='breath_id')\n    \n    \n    # adding feature 'diff_u_in'\n    # this is basically, u_in[1] = u_in[1] - u_in[0], u_in[2] = u_in[2] - u_in[1] ...\n    df['diff_u_in'] = df.groupby('breath_id')['u_in'].diff()\n    df = df.fillna(0)\n    \n    \n    # adding feature 'diff_diff_u_in'\n    # i.e. \n    df['diff_diff_u_in'] = df.groupby('breath_id')['diff_u_in'].diff()\n    df = df.fillna(0)\n    \n    \n    # adding feature cummulative sum 'u_in_cumsum'\n    df['u_in_cumsum'] = df.groupby(['breath_id'])['u_in'].cumsum()\n    \n    \n    # adding feature sum_value_u_in\n    # sum of all u_in values for a particular breath_id\n    sum_u_in = df.groupby('breath_id')['u_in'].sum().to_frame()\n    sum_u_in.columns = ['sum_value_u_in']\n    df = df.merge(sum_u_in,on='breath_id')\n    \n    \n    # adding feature u_in_cumsum_rate\n    df['u_in_cumsum_rate'] = df['u_in_cumsum'] \/ df['sum_value_u_in']\n    \n    \n    df = df.fillna(0)\n    \n    \n    #adding feature lag_u_in\n    df['lag_u_in'] = df.groupby('breath_id')['u_in'].shift(1)\n    df = df.fillna(0)\n    \n    \n    #adding feature lag2_u_in\n    df['lag2_u_in'] = df.groupby('breath_id')['u_in'].shift(2)\n    df = df.fillna(0)\n    \n    \n    #adding feature lag_-1_u_in\n    df['lag_-1_u_in'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df = df.fillna(0)\n    \n    \n    #adding feature lag_-2_u_in\n    df['lag_-2_u_in'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df = df.fillna(0)\n    \n    \n    #adding feature lag3_u_in\n    df['lag3_u_in'] = df.groupby('breath_id')['u_in'].shift(3)\n    df = df.fillna(0)\n    \n    \n    #adding feature lag2_u_in\n    df['lag_-3_u_in'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df = df.fillna(0)\n    \n    \n    #adding feature max_u_in_breath_id\n    # maximum u_in value for a particular breath_id\n    df['max_u_in_breath_id'] = df.groupby('breath_id')['u_in'].transform('max')\n    \n    \n    #adding feature R*C\n    df['R*C'] = df['R'] * df['C']\n    \n    \n    #adding feature min_u_in_breath_id\n    # minimum u_in value for a particular breath_id\n    df['min_u_in_breath_id'] = df.groupby('breath_id')['u_in'].transform('min')\n    \n    \n    #adding max_u_in_breath_id_diff\n    df['max_u_in_breath_id_diff'] = df.groupby('breath_id')['u_in'].transform('max') - df['u_in']\n    \n    \n    #adding mean_u_in_breath_id_diff\n    df['mean_u_in_breath_id_diff'] = df.groupby('breath_id')['u_in'].transform('mean') - df['u_in']\n    \n    \n    #adding u_in_partition_out_sum\n    df['u_in_partition_out_sum'] = df.groupby(['breath_id', 'u_out'])['u_in'].transform('sum')\n    \n    \n    #adding area\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    \n    return df\n","60a8db4f":"df_train = feature_engineering(train)\ndf_test = feature_engineering(test)","07fa3019":"df_train","929230a7":"df_train.shape","bbb087a5":"df_train.columns","a72fb551":"df_test","1f9ff65d":"columns = [col for col in df_train.columns if col not in ['id', 'breath_id', 'pressure']]\nX = df_train[columns]\ny = df_train['pressure']","75675e9b":"columns","39a1e90f":"print(X.shape, y.shape)","e29b3618":"X.columns","53310698":"y","f88881f1":"X_test = df_test[columns]","0956b8e5":"X_test","4f5623fb":"X_test.shape","3c6896bb":"xgb = XGBRegressor(objective='reg:squarederror', n_estimators=700)\nxgb.fit(X, y)","9ffd087c":"submission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\nsubmission.head()","3fe72fce":"submission['pressure'] = xgb.predict(X_test)","5e406abd":"submission.head()","7d3c297c":"mean = np.mean(submission['pressure'], axis=0)\nmed = np.median(submission['pressure'], axis=0)\nstd = np.std(submission['pressure'], axis=0)\n\n\n\n# mean of values inside the standard mean\nclipped_pres = np.clip(np.vstack(submission['pressure']), mean-std, mean+std)\nclipped_mean = np.mean(clipped_pres, axis=0)","bab579e1":"print('clipped mean is: ', clipped_mean)","a66204e4":"clipped_pres","d0e20647":"prediction_ = clipped_pres.ravel()\nprediction_","6ddc10e6":"submission_ = pd.DataFrame({\"id\":submission[\"id\"],\"pressure\":prediction_})","96d42a9e":"submission_","26ee62e4":"submission_.shape","2b9c76fe":"submission_.to_csv('submission.csv', index = False)","54fe9877":"#### Checking for unique `breath_id`","34a1a0ac":"#### `pressure` hiatogram","706894ec":"# <a name=\"sub\"><\/a><mark style=\"background: #FFBF00\">Submission<\/mark>","9df89352":"`R` for `test`","3fe34ccc":"Time step plot for `breath_id_1`","e093f748":"### feature engineering on train data:\n\n[Really helpful kernel](https:\/\/www.kaggle.com\/yasuosuzuki\/various-feature-and-lightgbm)","2cc42f71":"# <a name=\"eda\"><\/a><mark style=\"background: #FFBF00\">Exploratory Data Analysis<\/mark>","d930d51a":"Kdeplot is a Kernel Distribution Estimation Plot which depicts the probability density function of the continuous or non-parametric data variables.\n\nKdeplot plot for `pressure`","4cef9dc0":"### Breath Plot\n\nlets plot a breath with a `breath_id == 1` \n\nI took help from the kernel [here](https:\/\/www.kaggle.com\/marutama\/eda-about-time-step-and-u-out)","55581d79":"# <a name=\"prediction\"><\/a><mark style=\"background: #FFBF00\">Prediction<\/mark>","dadc830c":"### XGBoost Model\n","c4fccec3":"Here `R` and `C` are categorical features","3a619779":"there are no null values","930b5666":"## <mark style=\"background: #d9ead3\">Motiavtion<\/mark>\n\nWhen a patient has trouble breathing the doctors use a ventilator to pump oxygen into patient's lungs. However, this procedure is operated by the help of a clinician, which is a limitation.   The current simulators are not dynamic they are modeled to simulate a single lung setting. In reality, lungs and its attributes vary from patient to patient.                                                                                                                                 \n## <mark style=\"background: #d9ead3\">Goal<\/mark>\n\nIn this competition, our goal is to simulate a ventilator connected to a sedated patient's lung. By taking lungs attributes and other constraints in account we should simulate a mechanical ventilator that can take burdens off of clinicians.\n\nAs a result, ventilator treatments may become more widely available to help patients breathe.","9b4a2487":"Max `pressure`","7a99d615":"#### Checking if all the `breath_id` from `test` is present in `train`\n\nNo `breath_id` of `test` are included in `train`","0fe47b4c":"Maximum `time_step` | how long a breath last?","41e7b45f":"To well develop the prediction I will first calculate the `mean` and `median` of the prediction values. Once this has been done the `standard deviation` of the prediction will be calculated and will be clipped within this range to finally calculate the average of `clipped data`.\n\n[Reference Kernel](https:\/\/github.com\/angliu-bu\/Kaggle-Google-Brain\/blob\/main\/google_brain.ipynb)","7b59d50e":"# <a name=\"process\"><\/a><mark style=\"background: #FFBF00\">Data Processing<\/mark>","d24d0e0d":"# <mark style=\"background: #FFBF00\">Contents<\/mark>\n- [Imports](#import)\n- [Explaining the Attributes](#explain)\n- [Exploratory Data Analysis](#eda)\n- [Data Processing](#process)\n- [Model Creation](#model)\n- [Prediction](#prediction)\n- [Submission](#sub)","e82350a9":"Applying the above features to `train` and `test` data","bcb8422b":"Defining `X_test` to make prediction on `df_test`","ac1d36b0":"we can see that we have 80 unique `time_step` per breath.","d3eaa37b":"We can see from the plot above that when valve is closed the pressure on valve is higher and when opened the pressure decreases.","16d3fd2a":"reading the given `train` and `test` files","e8f946f8":"`u_out` for `test`","e16d7ba6":"Defining `X` and `y` for model creation. \n\nNot including columns like `id`, `breath_id`, `pressure` for `X`\n\n`y` has the `pressure` column only from `df_train`","135612ae":"#### Countplot on columns","c6897201":"`time_step` value ranges from 0 ~ 3","144cfb98":"### <a name=\"explain\"><\/a><mark style=\"background: #FFBF00\">Explaining the attributes<\/mark>\n\n**The columns**\n\n- id - globally-unique time step identifier across an entire file\n- breath_id - globally-unique time step for breaths\n- R - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow. \n> (Basically, the diameter of the airway of the lung)\n\n- C - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow. \n> (Basically, the thickness of the airway (i.e. how thivk or thin is the airway))\n\n- time_step - the actual time stamp.\n\n    **The below two columns are control input.**\n\n- u_in - the control input for the inspiratory solenoid valve. Ranges from 0 to 100. \n> (Basically, represents the opening state of the inspiratory valve. 0 being completely closed, no air can get in. 100 is when the valve is completely open).\n\n- u_out - the control input for the exploratory solenoid valve. Either 0 or 1. \n> (Basically, represents the opening state of the exploratory valve. 1 --> valve open and 0 --> valve closed,\n\n- pressure - the airway pressure measured in the respiratory circuit, measured in cmH2O.","fb643fed":"# <a name=\"model\"><\/a><mark style=\"background: #FFBF00\">Model Creation<\/mark>","32fe777e":"By looking at the correlation plot below we can see that `u_out` and `time_step` has kind of strong correlation.","bdb36dba":"Reference kernel [here](https:\/\/www.kaggle.com\/ahmedaffan789\/google-brain-eda-lstm-bi-directional)\n\nAs described above `u_in` == valve pressure\n\nSo, when `u_in == 0` then the valve is closed and that is inhale pressure from the patient (patient inhales)\n\nand, when `u_in == 1` then the valve is open and that is exhale pressure from the patient (patient exhales)","45de2737":"# <a name=\"import\"><\/a><mark style=\"background: #FFBF00\">Imports<\/mark>"}}