{"cell_type":{"7fab9393":"code","bd57a591":"code","be2968f6":"code","eb1484ac":"code","e0719244":"code","f79c0082":"code","aa09f022":"code","dcf45ece":"code","74062ff0":"code","75c40a76":"code","37b00842":"code","243b6256":"code","f52ecd98":"code","08ff2be5":"markdown"},"source":{"7fab9393":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bd57a591":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# \ud55c\uae00 \ud45c\uc2dc\ub97c \uc704\ud574\uc11c \ud574\ubd04 (\uacb0\uad6d\uc5d0\ub294 \ucc98\ub9ac\uac00 \uc548\ub42c\uc2b5\ub2c8\ub2e4 -> \uce90\uae00\uc5d0\ub294 \ud55c\uae00\uc744 \uc9c0\uc6d0\ud574\uc8fc\ub294 \uae00\uc790\ud615\ud0dc\uac00 \uc5c6\ub294\uac83 \uac19\uc544\uc11c \uacb0\uacfc\uc801\uc73c\ub85c \uc774\uac83\uc740 \uc758\ubbf8 \uc5c6\uc5c8\ub124\uc694)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nplt.rcParams['font.family'] = 'AppleGothic'\nplt.rcParams['font.size'] = 12\nplt.rcParams['figure.figsize'] = (14, 4)\n\nmpl.rcParams['axes.unicode_minus'] = False","be2968f6":"data = pd.read_csv('\/kaggle\/input\/2019-covid19-ncov19-data-set-in-korean\/COVID-19_Korean.csv')\ndata.head()","eb1484ac":"data.shape","e0719244":"data.tail()","f79c0082":"data.describe()","aa09f022":"# \uacb0\uce21\uce58 \ud655\uc778\ndata.isnull().sum()","dcf45ece":"#\uba87\uac1c\uc758 \uad6d\uac00\uc5d0 \ud655\uc9c4\uc790\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ncountry = data['\uad6d\uac00\/\uc9c0\uc5ed'].unique()","74062ff0":"country","75c40a76":"# \uac01 \uad6d\uac00\ubcc4\ub85c \uba87\uba85\uc758 \ucd1d \ud655\uc9c4\uc790\uac00 \uc788\ub294\uc9c0 \uacb0\uacfc \ud655\uc778\nconfirmed_case = {}\nfor con in country:\n    confirmed_case[con] =  [data[data['\uad6d\uac00\/\uc9c0\uc5ed'] == con ]['\ud655\uc9c4\uc790'].sum()]\nconfirmed_case = pd.DataFrame(confirmed_case).T\nconfirmed_case.reset_index(inplace = True)\nconfirmed_case.columns = ['country', 'Total Confirmed Count']\nconfirmed_case.sort_values(by = 'Total Confirmed Count',ascending=False, inplace=True )\nconfirmed_case.reset_index(drop = True, inplace = True)\nconfirmed_case","37b00842":"#barplot\uc744 \uadf8\ub9ac\uae30\uc5d0 \ub108\ubb34 \ud070 \uac12\uc744 \uac00\uc9c4 \uc911\uad6d\uacfc \uad6d\uac00\uc5d0 \ub530\ub85c \uadc0\uc18d\ub418\uc9c0 \uc54a\uc740 \uae30\ud0c0\uc6b4\uc1a1\uc218\ub2e8\uc744 \ube7c\uace0 9\uac00\uc9c0\ub9cc \ubf51\uae30\ub85c \ud568\nconfirmed_case = confirmed_case.iloc[1:10, :]","243b6256":"confirmed_case","f52ecd98":"sns.barplot(data = confirmed_case, x = 'country', y = 'Total Confirmed Count')\nplt.show()","08ff2be5":"**\ucee4\ub110 \uc774\ub984 \ubcc0\uacbd\ubc29\ubc95\uc744 \ubab0\ub77c\uc11c \uadf8\ub0e5 \uae30\uc874 \ucee4\ub110\uc758 \uc774\ub984\uc744 \uc62c\ub824\ub1a8\uc2b5\ub2c8\ub2e4 \ubcc0\uacbd\ubc29\ubc95 \uc544\uc2dc\ub294 \ubd84\uc740 \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4 **"}}