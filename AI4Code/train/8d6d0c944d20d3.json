{"cell_type":{"f7a320a6":"code","a77f42ed":"code","1b1856c8":"code","70660825":"code","4e80d9b2":"code","6d6330ae":"code","0eee4091":"code","2a78f9f7":"code","08e6516c":"code","6a6cc617":"code","ce59fe35":"code","54616956":"code","69d0790b":"code","046837b9":"code","e8b751e4":"code","712eba4b":"code","e29a2837":"markdown","542a9c07":"markdown","e7e41da6":"markdown","5491c431":"markdown","c37b6919":"markdown","17e2edf4":"markdown","a18a5be8":"markdown","7f1fe8f9":"markdown","2e753104":"markdown","8ef7e38c":"markdown","2fe3a741":"markdown","6322b519":"markdown","c85c5e82":"markdown","c1d5848b":"markdown","c8f1275b":"markdown","e38bbde1":"markdown","6952e3ab":"markdown"},"source":{"f7a320a6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport math","a77f42ed":"from sklearn.datasets import fetch_openml","1b1856c8":"mnist = fetch_openml(\"mnist_784\")","70660825":"print(mnist.data.shape) # total no of images 70k with dimension(28*28==784)\nprint(mnist.target.shape)","4e80d9b2":"from sklearn.model_selection import train_test_split\ntrain_img, test_img, train_lbl, test_lbl = train_test_split(mnist.data, mnist.target, test_size=1\/7.0, random_state=0) ","6d6330ae":"plt.figure(figsize=(20,4))\nfor index, (image, label) in enumerate(zip(train_img[0:5], train_lbl[0:5])):\n plt.subplot(1, 5, index + 1)\n plt.imshow(np.reshape(image, (28,28)), cmap=plt.cm.gray)","0eee4091":"from sklearn.linear_model import LogisticRegression\nlogisticRegr = LogisticRegression(solver = 'lbfgs')","2a78f9f7":"logisticRegr.fit(train_img, train_lbl)","08e6516c":"logisticRegr.predict(test_img[0].reshape(1,-1))","6a6cc617":"logisticRegr.predict(test_img[0:10])","ce59fe35":"predictions = logisticRegr.predict(test_img)","54616956":"score = logisticRegr.score(test_img, test_lbl) #(score = correct predictions \/ total number of data points)*100\nprint(score*100)","69d0790b":"from sklearn import metrics","046837b9":"confusion_matrix = metrics.confusion_matrix(test_lbl, predictions)\nprint(confusion_matrix)","e8b751e4":"plt.figure(figsize=(9,9))\nsns.heatmap(confusion_matrix, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Accuracy Score: {0}'.format(score)\nplt.title(all_sample_title, size = 15);","712eba4b":"plt.figure(figsize=(9,9))\nplt.imshow(confusion_matrix, interpolation='nearest', cmap='Pastel1')\nplt.title('Confusion matrix', size = 15)\nplt.colorbar()\ntick_marks = np.arange(10)\nplt.xticks(tick_marks, [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], rotation=45, size = 10)\nplt.yticks(tick_marks, [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], size = 10)\nplt.tight_layout()\nplt.ylabel('Actual label', size = 15)\nplt.xlabel('Predicted label', size = 15)\nwidth, height = confusion_matrix.shape\nfor x in range(width):\n for y in range(height):\n  plt.annotate(str(confusion_matrix[x][y]), xy=(y, x), \n  horizontalalignment='center',\n  verticalalignment='center')","e29a2837":"2. Predict for Multiple Observations (images) at Once","542a9c07":"# Step 1 : Loading the MNIST datasets","e7e41da6":"# Step 2 : Train & Test (for splitting the datasets)","5491c431":"Hi kaggler,\n\nWelcome to my kernel, before jumping into model implementation let's have a look that what type of datasets, tools, ML algos will be gonna used in this kernel.\n\n**Dataset**: MNIST\n\n**Tools**: Scikit learn\n\n**Machine Alogoritm**: Logistic Regression\n\n**Language**: Python\n\n**What is Logistic regression ?**\n\nLogistic regression in Python is a predictive analysis technique, used in Machine Learning for binary classification problems. It provides analysis that predicts the outcome in a binary variable which has only two possible outcomes\nThe dependent variable is categorical in nature. It is special case of linear regression to predict the outcome in a categorical variable.\n\n**What is MNIST ?**\n\nMNIST stands for Modified National Institute of Standards and Technology database. It is a large database of handwritten digits that is commonly used for training various image processing systems.\n\nThe MNIST database contains 60,000 training images and 10,000 testing images.\n\nSource : http:\/\/yann.lecun.com\/exdb\/mnist\/\n\n**What is Scikit learn ?**\n\nScikit learn is simple, open source and efficient tool which have a very significant role in the field of machine learning.  It features various classification, regression and clustering algorithms including support vector machines, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy.\n\nSource : https:\/\/scikit-learn.org\/stable\/index.html\n\nIn this kernel, We'll harness the power of scikit learn to implement logistic regression to predict digit label based on images. So let's begin !\n\nIf you like it then please upvote my kernel.\n\nThanks in advance :)\n\n","c37b6919":"A confusion matrix is a table that is often used to describe the performance of a classification model (or \"classifier\") on a set of test data for which the true values are known.","17e2edf4":"A . Creating an instance of the model","a18a5be8":"# Confusion Matrix","7f1fe8f9":"# **Check the accuracy of the model**","2e753104":"# Step 3 : Analysing the datasets","8ef7e38c":"3. Make predictions on entire test data","2fe3a741":"# B. Representation of confusion matrix using Matplotlib","6322b519":"# Step 4 : Model Training","c85c5e82":"1. Predict the labels of new data (new images)","c1d5848b":"B. Fit and Transform","c8f1275b":"# **Importing Libraries**","e38bbde1":"# A. Seaborn Heatmap for confusion matrix","6952e3ab":"**Testing the model**"}}