{"cell_type":{"d747aa72":"code","87200dc1":"code","7c3de5ed":"code","a8e3ba5d":"code","4daa8582":"code","bb7f26e7":"code","444cb86c":"code","b91b23a0":"code","f6fd9741":"code","288fc437":"code","6756c8eb":"code","ec6a8114":"code","ca6f435b":"code","c1422dd1":"code","0f787bf9":"code","ca0ab43b":"code","ef1d6595":"code","d1d4a7ed":"code","4833b4af":"code","08c923d9":"code","1c1d4488":"code","0dbbbee5":"code","ca3570bc":"code","44309279":"code","40e8cf3e":"code","8a73abf6":"code","22cebaa5":"code","3eda571d":"code","bc25813a":"code","dbc31ae7":"code","cc38f6f2":"code","1f975652":"code","96a21a3c":"code","7cff4811":"code","c44da229":"code","c023b38f":"code","84baef57":"code","5447bcff":"code","48b316f7":"code","93496ecc":"code","737ddd5f":"code","463f6480":"code","9e254669":"code","79dbd539":"code","91c932bb":"code","6549d6e1":"code","4c986c9b":"code","9b9868d9":"code","c6fc1910":"code","ea691ecd":"code","cce979c2":"code","aa485af6":"code","9c26cb50":"code","994dfede":"code","b5b9e797":"code","633b9412":"code","b40764e2":"code","d94ba9d0":"code","2abb2b50":"code","2db25424":"code","e2a2c923":"code","3501a1d8":"code","c04b9bd2":"code","a8908261":"code","fc597546":"code","5cb1ea18":"code","5f9aadab":"code","69ae3066":"markdown","35db37b0":"markdown","8933160d":"markdown","19c9ab37":"markdown","6b1a51d6":"markdown","1dd4f80e":"markdown","bee47a28":"markdown","05f8999e":"markdown","09d21fa0":"markdown","b0dcc6be":"markdown","fe9b5a02":"markdown","11a66adf":"markdown"},"source":{"d747aa72":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","87200dc1":"app = pd.read_csv(\"..\/input\/credit-card-approval-prediction\/application_record.csv\")\ncrecord = pd.read_csv(\"..\/input\/credit-card-approval-prediction\/credit_record.csv\")","7c3de5ed":"app.info()","a8e3ba5d":"crecord.info()","4daa8582":"app['ID'].nunique() # the total rows are 438,557. This means it has duplicates","bb7f26e7":"crecord['ID'].nunique() \n# this has around 43,000 unique rows as there are repeating entries for different monthly values and status.","444cb86c":"len(set(crecord['ID']).intersection(set(app['ID']))) # checking to see how many records match in two datasets","b91b23a0":"sns.heatmap(app.isnull()) # checking for null values. Seems like occupation_type has many","f6fd9741":"sns.heatmap(crecord.isnull()) # checking for null values. All good here!","288fc437":"app = app.drop_duplicates('ID', keep='last') \n# we identified that there are some duplicates in this dataset\n# we will be deleting those duplicates and will keep the last entry of the ID if its repeated.","6756c8eb":"app.drop('OCCUPATION_TYPE', axis=1, inplace=True) \n#we identified earlier that occupation_type has many missing values\n# we will drop this column","ec6a8114":"ot = pd.DataFrame(app.dtypes =='object').reset_index()\nobject_type = ot[ot[0] == True]['index']\nobject_type\n#we are filtering the columns that have non numeric values to see if they are useful","ca6f435b":"num_type = pd.DataFrame(app.dtypes != 'object').reset_index().rename(columns =  {0:'yes\/no'})\nnum_type = num_type[num_type['yes\/no'] ==True]['index']\n#HAVE CREATED SEPARATE LIST FOR NUMERIC TYPE INCASE IT WILL BE NEEDED IN FURTHER ANALYSIS\n# IT IS NEEDED IN FURTHER ANALYSIS","c1422dd1":"a = app[object_type]['CODE_GENDER'].value_counts()\nb = app[object_type]['FLAG_OWN_CAR'].value_counts()\nc = app[object_type]['FLAG_OWN_REALTY'].value_counts()\nd = app[object_type]['NAME_INCOME_TYPE'].value_counts()\ne = app[object_type]['NAME_EDUCATION_TYPE'].value_counts()\nf = app[object_type]['NAME_FAMILY_STATUS'].value_counts()\ng = app[object_type]['NAME_HOUSING_TYPE'].value_counts()\n\nprint( a,\"\\n\",b,'\\n', c, '\\n', d, '\\n', e, '\\n', f, '\\n', g)\n\n#this is just to see what each column is. \n#It seems that all of them are important since there is very fine classifcation in each column.\n# their effectiveness cannot be judged at this moment so we convert all of them to numeric values.","0f787bf9":"app.head(10)","ca0ab43b":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor x in app:\n    if app[x].dtypes=='object':\n        app[x] = le.fit_transform(app[x])\n# we have transformed all the non numeric data columns into data columns\n# this method applies 0,1.. classification to different value types.","ef1d6595":"app.head(10)","d1d4a7ed":"app[num_type].head()\n# We will look at numeric columns and see if there is anything that needs to be changed. ","4833b4af":"fig, ax= plt.subplots(nrows= 3, ncols = 3, figsize= (14,6))\n\nsns.scatterplot(x='ID', y='CNT_CHILDREN', data=app, ax=ax[0][0], color= 'orange')\nsns.scatterplot(x='ID', y='AMT_INCOME_TOTAL', data=app, ax=ax[0][1], color='orange')\nsns.scatterplot(x='ID', y='CNT_FAM_MEMBERS', data=app, ax=ax[0][2], color= 'orange')\n\nsns.scatterplot(x='ID', y='DAYS_EMPLOYED', data=app, ax=ax[1][0])\nsns.scatterplot(x='ID', y='FLAG_MOBIL', data=app, ax=ax[1][1])\nsns.scatterplot(x='ID', y='FLAG_WORK_PHONE', data=app, ax=ax[1][2])\nsns.scatterplot(x='ID', y='FLAG_PHONE', data=app, ax=ax[2][0])\nsns.scatterplot(x='ID', y='FLAG_EMAIL', data=app, ax=ax[2][1])\nsns.scatterplot(x='ID', y='DAYS_BIRTH', data=app, ax=ax[2][2])","08c923d9":"# FOR CNT_CHILDREN COLUMN\nq_hi = app['CNT_CHILDREN'].quantile(0.999)\nq_low = app['CNT_CHILDREN'].quantile(0.001)\napp = app[(app['CNT_CHILDREN']>q_low) & (app['CNT_CHILDREN']<q_hi)]","1c1d4488":"# FOR AMT_INCOME_TOTAL COLUMN\nq_hi = app['AMT_INCOME_TOTAL'].quantile(0.999)\nq_low = app['AMT_INCOME_TOTAL'].quantile(0.001)\napp= app[(app['AMT_INCOME_TOTAL']>q_low) & (app['AMT_INCOME_TOTAL']<q_hi)]","0dbbbee5":"#FOR CNT_FAM_MEMBERS COLUMN\nq_hi = app['CNT_FAM_MEMBERS'].quantile(0.999)\nq_low = app['CNT_FAM_MEMBERS'].quantile(0.001)\napp= app[(app['CNT_FAM_MEMBERS']>q_low) & (app['CNT_FAM_MEMBERS']<q_hi)]","ca3570bc":"fig, ax= plt.subplots(nrows= 3, ncols = 3, figsize= (14,6))\n\nsns.scatterplot(x='ID', y='CNT_CHILDREN', data=app, ax=ax[0][0], color= 'orange')\nsns.scatterplot(x='ID', y='AMT_INCOME_TOTAL', data=app, ax=ax[0][1], color='orange')\nsns.scatterplot(x='ID', y='CNT_FAM_MEMBERS', data=app, ax=ax[0][2], color= 'orange')\n\nsns.scatterplot(x='ID', y='DAYS_EMPLOYED', data=app, ax=ax[1][0])\nsns.scatterplot(x='ID', y='FLAG_MOBIL', data=app, ax=ax[1][1])\nsns.scatterplot(x='ID', y='FLAG_WORK_PHONE', data=app, ax=ax[1][2])\nsns.scatterplot(x='ID', y='FLAG_PHONE', data=app, ax=ax[2][0])\nsns.scatterplot(x='ID', y='FLAG_EMAIL', data=app, ax=ax[2][1])\nsns.scatterplot(x='ID', y='DAYS_BIRTH', data=app, ax=ax[2][2])","44309279":"crecord['Months from today'] = crecord['MONTHS_BALANCE']*-1\ncrecord = crecord.sort_values(['ID','Months from today'], ascending=True)\ncrecord.head(10)\n# we calculated months from today column to see how much old is the month\n# we also sort the data according to ID and Months from today columns. ","40e8cf3e":"crecord['STATUS'].value_counts() \n# performed a value count on status to see how many values exist of each type","8a73abf6":"crecord['STATUS'].replace({'C': 0, 'X' : 0}, inplace=True)\ncrecord['STATUS'] = crecord['STATUS'].astype('int')\ncrecord['STATUS'] = crecord['STATUS'].apply(lambda x:1 if x >= 2 else 0)\n# replace the value C and X with 0 as it is the same type\n# 1,2,3,4,5 are classified as 1 because they are the same type\n# these will be our labels\/prediction results for our model","22cebaa5":"crecord['STATUS'].value_counts(normalize=True) \n# there is a problem here\n# the data is oversampled for the labels\n# 0 are 99%\n# 1 are only 1% in the whole dataset\n# we will need to address the oversampling issue in order to make sense of our analysis\n# this will be done after when we combine both the datasets\n# so first we will join the datasets","3eda571d":"crecordgb = crecord.groupby('ID').agg(max).reset_index()\ncrecordgb.head() \n#we are grouping the data in crecord by ID so that we can join it with app","bc25813a":"df = app.join(crecordgb.set_index('ID'), on='ID', how='inner')\ndf.drop(['Months from today', 'MONTHS_BALANCE'], axis=1, inplace=True)\ndf.head()\n# no that this is joined, we will solve over sampling issue","dbc31ae7":"df.info() # checking for number of rows. \n# there are 9516 rows.","cc38f6f2":"X = df.iloc[:,1:-1] # X value contains all the variables except labels\ny = df.iloc[:,-1] # these are the labels","1f975652":"y","96a21a3c":"X","7cff4811":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3)\n# we create the test train split first","c44da229":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX_scaled = pd.DataFrame(ss.fit_transform(X_train), columns=X_train.columns)\nX_test_scaled = pd.DataFrame(ss.transform(X_test), columns=X_test.columns)\n# we have now fit and transform the data into a scaler for accurate reading and results.","c023b38f":"from imblearn.over_sampling import SMOTE\noversample = SMOTE()\nX_balanced, y_balanced = oversample.fit_resample(X_scaled, y_train)\nX_test_balanced, y_test_balanced = oversample.fit_resample(X_test_scaled, y_test)\n# we have addressed the issue of oversampling here","84baef57":"y_train.value_counts()","5447bcff":"y_balanced.value_counts()","48b316f7":"y_test.value_counts()","93496ecc":"y_test_balanced.value_counts()","737ddd5f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import validation_curve\nfrom scipy.stats import randint\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import classification_report, confusion_matrix\n# !pip install pydotplus\n# import pydotplus\nfrom IPython.display import Image\nfrom sklearn.model_selection import learning_curve \nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom random import uniform","463f6480":"def plot_learning_curve(estimator):\n    sizes, training_scores, testing_scores , fit_times, _= learning_curve(estimator, X_balanced, y_balanced, cv=3, scoring='accuracy', n_jobs=-1, train_sizes=np.linspace(0.01, 1.0, 100), return_times=True) \n    # Mean and Standard Deviation of training scores \n    mean_training = np.mean(training_scores, axis=1) \n    Standard_Deviation_training = np.std(training_scores, axis=1) \n\n    # Mean and Standard Deviation of testing scores \n    mean_testing = np.mean(testing_scores, axis=1) \n    Standard_Deviation_testing = np.std(testing_scores, axis=1) \n    \n    fit_times_mean = np.mean(fit_times, axis=1)\n    fit_times_std = np.std(fit_times, axis=1)\n    \n    _, axes = plt.subplots(1, 2, figsize=(20, 5))\n\n    # dotted blue line is for training scores and green line is for cross-validation score \n    axes[0].plot(sizes, mean_training, '--', color=\"b\",  label=\"Training score\") \n    axes[0].plot(sizes, mean_testing, color=\"g\", label=\"Cross-validation score\") \n\n    # Drawing plot \n#     plt.title(\"LEARNING CURVE FOR MLP Classifier\") \n    axes[0].set_title(\"LEARNING CURVE FOR SVM Classifier\")\n    axes[0].set_xlabel(\"Training Set Size\"), axes[0].set_ylabel(\"Accuracy Score\"), axes[0].legend(loc=\"best\") \n    \n    axes[1].grid()\n#     axes[1].plot(fit_times_mean, mean_testing, 'o-')\n#     axes[1].set_xlabel(\"fit_times\")\n#     axes[1].set_ylabel(\"Score\")\n\n    axes[1].plot(sizes, fit_times_mean, 'o-')\n    axes[1].set_xlabel(\"Training Set Size\")\n    axes[1].set_ylabel(\"fit_times\")\n    axes[1].set_title(\"Performance of the model\")\n    \n    \n    return plt","9e254669":"def plot_validation_curve(param, param_range,estimator, param_range_label=None):\n#     param_range = np.arange(1, 41, 2)\n    train_scores, test_scores = validation_curve(estimator, X_balanced, y_balanced, param_name=param, cv=3, param_range=param_range,n_jobs=-1, scoring=\"accuracy\")\n\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.title(\"Validation Curve with SVM kernels\")\n    plt.xlabel(param)\n    plt.ylabel(\"Score\")\n    plt.ylim(0.0, 1.1)\n    if(param_range_label!= None):\n        ind = np.arange(len(param_range))\n        plt.plot(ind, train_scores_mean, label=\"Training score\", color=\"r\")\n        plt.plot(ind, test_scores_mean, label=\"Cross-validation score\", color=\"g\")\n        plt.xticks(ind,param_range_label)\n        \n    else:\n        plt.plot(param_range, train_scores_mean, label=\"Training score\", color=\"r\")\n        plt.plot(param_range, test_scores_mean, label=\"Cross-validation score\", color=\"g\")\n        \n    plt.legend(loc=\"best\")\n#     param_range = np.arange(1, param_range.max(), 2)\n#     plt.xticks(param_range)\n    plt.show()","79dbd539":"%%time\nsvc1 = SVC(kernel='linear')\nmodel = svc1.fit(X_balanced, y_balanced)\nprediction = svc1.predict(X_test_balanced)\nprint(classification_report(y_test_balanced, prediction))","91c932bb":"%%time\nplot_learning_curve(svc1)","6549d6e1":"%%time\nsvc2 = SVC(kernel='poly')\nmodel = svc2.fit(X_balanced, y_balanced)\nprediction = svc2.predict(X_test_balanced)\nprint(classification_report(y_test_balanced, prediction))","4c986c9b":"%%time\nplot_learning_curve(svc2)","9b9868d9":"%%time\nsvc3 = SVC(kernel='rbf')\nmodel = svc3.fit(X_balanced, y_balanced)\nprediction = svc3.predict(X_test_balanced)\nprint(classification_report(y_test_balanced, prediction))","c6fc1910":"%%time\nplot_learning_curve(svc3)","ea691ecd":"%%time\nsvc4 = SVC(kernel='sigmoid')\nmodel = svc4.fit(X_balanced, y_balanced)\nprediction = svc4.predict(X_test_balanced)\nprint(classification_report(y_test_balanced, prediction))","cce979c2":"%%time\nplot_learning_curve(svc4)","aa485af6":"# param_range = [(10,10),(20,20),(30,30),(40,40),(50,50)]\nparam_range_label = ['linear','poly','sigmoid','rbf']\nparam_name=\"kernel\"\nplot_validation_curve(param_name,param_range_label,svc1,param_range_label)","9c26cb50":"%%time\nparam_range = np.arange(100, 2000, 200)\n# param_range_label = ['1','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5']\nparam_name=\"cache_size\"\nplot_validation_curve(param_name,param_range,svc3)","994dfede":"%%time\nparam_range = np.arange(1, 50, 5)\n# param_range_label = ['1','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5']\nparam_name=\"max_iter\"\nplot_validation_curve(param_name,param_range,svc3)","b5b9e797":"%%time\nparam_range = np.arange(1e-3, 10e-3, 1e-3)\n# param_range_label = ['1','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5']\nparam_name=\"tol\"\nplot_validation_curve(param_name,param_range,svc3)","633b9412":"%%time\nparam_range = np.arange(1e-4, 10e-4, 1e-4)\n# param_range_label = ['1','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5']\nparam_name=\"tol\"\nplot_validation_curve(param_name,param_range,svc3)","b40764e2":"%%time\nparam_range = np.arange(1e-2, 10e-2, 1e-2)\n# param_range_label = ['1','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5']\nparam_name=\"tol\"\nplot_validation_curve(param_name,param_range,svc3)","d94ba9d0":"%%time\nparam_range = np.arange(1e-1, 10e-1, 1e-1)\n# param_range_label = ['1','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5']\nparam_name=\"tol\"\nplot_validation_curve(param_name,param_range,svc3)","2abb2b50":"params = svc3.get_params()\nparams['shrinking'] = False\nsvc3.set_params(**params)\nmodel = svc3.fit(X_balanced, y_balanced)\nprediction = svc3.predict(X_test_balanced)\nprint(classification_report(y_test_balanced, prediction))","2db25424":"params = svc3.get_params()\nparams['tol'] = 0.9\nsvc3.set_params(**params)\nmodel = svc3.fit(X_balanced, y_balanced)\nprediction = svc3.predict(X_test_balanced)\nprint(classification_report(y_test_balanced, prediction))","e2a2c923":"params = svc3.get_params()\nparams['max_iter'] = 100000\nsvc3.set_params(**params)\nmodel = svc3.fit(X_balanced, y_balanced)\nprediction = svc3.predict(X_test_balanced)\nprint(classification_report(y_test_balanced, prediction))","3501a1d8":"%%time\nparam_range = np.arange(1, 10, 1)\n# param_range_label = ['1','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5','1.1e-5']\nparam_name=\"C\"\nplot_validation_curve(param_name,param_range,svc3)","c04b9bd2":"params = svc3.get_params()\nparams['C'] = 10\nsvc3.set_params(**params)\n","a8908261":"%%time\nmodel = svc3.fit(X_balanced, y_balanced)\n","fc597546":"%%time\nprediction = svc3.predict(X_test_balanced)","5cb1ea18":"\nprint(classification_report(y_test_balanced, prediction))","5f9aadab":"%%time\nplot_learning_curve(svc3)","69ae3066":"# Importing Libraries","35db37b0":"# Credit Card Prediction Analysis!","8933160d":"* We notice in the value counts above that label types are now balanced\n* the problem of oversampling is solved now\n* we will now implement different models to see which one performs the best","19c9ab37":"<img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxAQEA8PEBAPDw8QDw8QDw4PDw8PEA8QFhEWFhURFRUYHiggGBolHRUVITEhJSkrLi4uFx8zODMsOSgtLisBCgoKDg0OFxAQGi0lHx0tLS0tLy0tLS0tLS0rLS8tLS0tLS0uLS0tLS0rLS0tLS8tLS0tLS0tLS0tKy0tLS0tLf\/AABEIALIBGwMBIgACEQEDEQH\/xAAcAAADAAIDAQAAAAAAAAAAAAAAAQIDBgQFBwj\/xABFEAACAgIABAQEBAALBAoDAAABAgADBBEFEiExBhNBURQiYXEHMoGRFSMzUlNygpKTsdEkQoOhVFVjc3Sis8HS4RclNP\/EABkBAQEBAQEBAAAAAAAAAAAAAAECAAMEBf\/EAC0RAQEAAgAEBQIEBwAAAAAAAAABAhEDEiExBBMUUfAiQWFxodEyM4GRscHx\/9oADAMBAAIRAxEAPwDJ+Jf4gXvfZh4djU00s1dttZK2XWA6YBh1VQdjp36+k81scsSWJYnuWJJP3JhY5YlidliWJ9yTsmTPNbt9jDCYTUEIQgsQhLppZzyorOx7Kilm\/YTMiMTnrwiwfyr4+P8A9\/fWGP8AYTmf\/wAsyrg4i\/ymdzH1XGxL7f2a01iOhzR1wtI9TLGQ30P6TslXhg7vxN\/6tOFVv97GmRTwj1HFx9jgH\/SbR57+LrBle4\/aZFyF+o+4nc0YPBbOgzs\/FJ9cnEqtUfc0tOfkfhzktV8Rg343EqevWh+W3p3HIem\/pzb+kORvUa7\/AKtbVwexBlCdcykEggggkEEEEEHRBHoZaOR2Jk6d5xHPlCcRMg+ujMyXg9wR\/wA5NjpM4zShJRgexlgQdYYlARAShBcgEoRCUILglRRiCoYjEI4KghHCCk8oiKy4opsYTJMzmY2T2jK53FjMkmUwmMmU5V2\/A\/EuVhurU2tyg\/NS7FqnHsV9PuOs9y4Lx6nJx6shWCCxdlGYbVgSGU\/YgifOpMz08QtRQq2MqjegCQBs7nXDO4vD4nwuPF1Z0rX4GE9B8C8Lox+H5fG76kvektXh1WdaxYCF5yPU87AfQA6lSbcs8+WbaH8LZy8\/lW8mt8\/lvya9+bWpinfUeLOJm8WrmXta7coQuTSS\/wAoTyfyAde2uk2fiP4eYteSuCmfZZnWVo1VBq3okku9rgaVAoLa2GbX1G3W+ybxOX+J51Mi2NrkDNyt0KAnTb9x6ze8v8PVFef5T5nm4QXkbIpSunNbR5lpGge40Ds7JEzYXgrFx+IcPwr8i9852qyLEqrrONWqsbPKYk8xJFbDY+h11m5aPOxabkeHsyprEfFuRqahdaOTfl1EkCxtbAHyt3\/mn2nWz1fxpztXxbiBy8iqizMr4f8ADUCsjIqr5K36t67a\/oCN60ZyuKeF8B8zhPCVR1NNBycgKtai+vWibXX5jYWrA6ejN9I8qJx+m786PMOG+H8zJUvRjW2VjvZoV1f33IU\/vDinAMzFCtkY9lSP+WwhWrY+wdCV39Nzv\/xS4wb82zFX5cTDIoqoXS1hlA525R03vp9AvTuZtHgPFazw\/nV3darbbK8VW1oMQiIF\/wCN2+u5pJvSrxMpjMr93lePQ9jBK0exz2RFLsf0E9A8H8Vq4HXk2X2C3MvVVXh9LiwVcu9Pe67VW69gSQB+g7bK4Bw2riePwkHNfz6ibFqvWmpDyO4LhAC5ITt6DXfc64fh3VWOIZB82+ii56cPGSyupshgQp57T0CqxK9NH5CfpNMbOycuJjnNZdr+rRmS\/MuvuVDZY7vdbyAALzMWPf06npOGBN18T8OXh1WJfiWNRZl0lcrENteT5LhQSAxBOtsR19ppYkV6OHeabnYwJYEQlgSXaQwJlRyJAliDpOjMt3uP2mZWBnFAlCTp1xzrlCVMCOZlVx9pLtjlKuMRCUBJdJBHDUeplQQhCBKIxxRSRiMckxTSMxPX7ftMskxRlNuMTJ3OS67mA1GVK4ZY2Oom0eHPFooxMjh2TScjCv2xVHFV1TkglkYjR6gHR9R9dTV4TtLp4MsZlNVsGDxDh2PbTbXj5txrvqt3k3ULoI4bSrWuiSQBtiRrfTc5qeN3XjD8WWrYc6OOzdfK8la+UMB0Pyg71NShNup8uXu2ji+VSllefRjZaF8qrKU5ORU9Stz+eEVUXem1scx\/L2HrO9X8QMMcR\/hP4LIbIakVlWyKyiHQXdYC72R06n7Abmm8U4w16V18gRa+XXzcx6U11ADoNLqsHXXqT19JwsTI8tucAFgDyE6IR\/R9HoSO4366PpHmT5Us6tq4z4rLY+JhNjtW+Jmtk5Qdh\/H3eazupGvl+Zm7\/SZeL+MXt4gOMYlVyNStVdq3FLKgGBVa\/kGwG0\/c9+2pqnEcw32tcwCs4TmA7FlRVLfTZUnX1nI4Txd8bXKqOpfmtR9lb05dCtwPQbYjXXZB9Jtt5ck7fL3d5x3i3DMnJsyLsXiFN7OfiKKb8byWtXo3zMvMuyOupzD4yuL4L\/C+TwvDdbKcOltK\/IWRC9rfmYPv+63QkbmjsxJJJ2xJJJ7knuZ2GVxQ2Y9OOa1C0fybgnmG+Y2b9+ZmB+mvqZuY+VOkbJgeNkTi9\/FbKHs8xStdIsUGvaIgJYjR+VWH9qOrxlVdhX4GdRbZVbk25KW49iJajPcbiCHBU\/MzdfY9vWaYBKAhzVXk4\/PwcjL8kv8A7PW9VYAAFjiyxj6szAAb+gAHSYwIgJYEmu8gAmQCICWBJXIAJQgBKAguQwJQgJQEFwCUIARgQXIpTqZFaYxKEK6Y2xljmNWlgya6y7OKOKBIxQJiikGKERMU0jEYbiMU0jFAmTFO3SQhCdnzBCEumpnZUUbZ3VEX3ZmCqP3Ii29IhN6p\/DS4gc2VSra6qKncA+wbmG\/2ED+HOmKNxHHRl1tWpZT1GweryuSuPqOH7tFjm9t+G4AJ\/hPGOgTyrSSzaHYDzOp+k5v\/AOIrv+nVfb4Z\/wD5zclb1HD9\/wDLzgShNk8WeDbeHLW73V3LY5rBRWQhgvN1BJ6aB9fSa4BJs07YZTKbhiWBEBLAkukAEsCAEsCC5ABKEAJQEFyGBKAiAlAQq5DAlCAEYElchgShEBGJlyGI4AQgoQBhJgWZW3AzCDMgO5tKmWzMmOTMwJiMIjFNIxEwMkxRQTJ3AxRS6aEITq+cJzuA\/wD9eH6\/7Xi9B1J\/j0nBnYeHiBmYRPYZmIT9hekZ3Tn\/AA17fZZ\/2d3+E0xcOyz5l50y\/NX+YFT\/ACYna25lX84fs3+k6mplezIKnY5qx6jr5YnofHdsudobJ0B1J9hITigIBCXEEbB8tu06fLcqj\/1G\/wAjIxOLV8ifOPyr6H2ExdF+LORz42N8rjWUfzqV3\/Ev2nmYE9C\/EnLWzGo5W3rJ69\/6J558BOGfd9Xwv8uGBLAiAlgTnXqkMCWBEBKAg6SGBKEAJQEFSACUBEBKAguQwJQiEoQXIBKEWo4KEIopiZMRiiMw2DGjdfvJMkmYbciIxKdiEHTZbiMDJMU0EySYzJiikYtwMmKLXUwhCdXgE5vA7QmXiOx0qZeKzH2UXISf0AnChEWbmn002\/Y\/pvrOouW1bLSKXdW5CGDIOyAEaJE8ETMuAAF1wA6AC2wAD2ABljOu\/pr\/APGs\/wBZ08x4\/R33e0Zy3FXAx7NlWA+arvr7ziGp1VflbYVQeh76nkgzbv6a7\/Fs\/wBZQzLv6a7\/ABbP9YeYr0d925ePXPw9Ct0Y3lgp6EqK2BOvbbAfrNKAjZyx2xZj7sSx\/cxgTnld3b2cHh8mPKYEsCICUBIeiGBKAiEsQXABKAgBKAguACUBEJUFQCUBCOC4IoRTEREx7kkzAExEwJkkzJBMkwJkkxTaz1HpKMx1dv1lGDpOwMmBkmItBkmMyTFFoiihFO3VQhCdHhECQO5A+51GBNp8CPytnuLhjleH2EZBVn8o+fT82gCT7dB6xgyuptq6EHsQfsdy5sPibiVd1WMnn\/GZFbXG3M8g0brbl5KeoDNohjsj\/e0Jh8LAbzt\/9U8R7+\/k95jL03XTgShEhB7aP26zYvBmLu57yalXEqa4Nc6V1eefkoVmboNuQf7Bk9128s26FZRYDuQPudTvvGGEEvW5TWa8usZANTrZWLD0uRWXoQLA3b0InJ8A59yZuPStjLVbaTZX05X\/AItu+\/sP2m110ef6OaNbUg9iD9pYmfMz7shhZdY1rhQvM2t6766fczs+Hr\/+vzz6+dg9f7VsNOm9SWunlCcrgw\/2nE\/8Vjf+sk23LxktbiOZSoVRjcQpyqh2qvX8tqj+Y6jf0YMISbOXE5brTSgI9xMOh+xm6Kg\/hvHGhotisB00V+GUk\/boTCTa8s+X+1v9mnCUDIp\/Kv8AVH+U3e7A+KxOH0qAHqrpdmHf4e26yuxj\/VKVn9YSbVxOJMNb+7SwY53\/AI0vSy6iytQlb4WOyKBrSbflH7amvwymrpfDz5sZl7nJhEYKBiMDETEbImImBMkmZOwTIJjJjrGz9ojuzr0AERgTJJg6gySYzJMyKRiMDFFFEUIRDq4QjAnR4jE5GNkvWLAjFRbWa7ANfPWWBKn9VB\/SYQJQEx0YE5nDc+7HfzaLDXZysnMArbVvzLpgRo69pxAJYEFacziHErshla6zzGUcqnkrTQ3vWlAEivIcVvUGIrdkd0AHzMgYKSe\/Tmbp9ZhAlgQ2uYzszNku1aVFia62dq0IGkL659evXlHT6SsPJep1trYpYh2jjW1OiN9fuZhEoCG1yGBM9eQ4R6wxFdhRnTppim+Un7bP7zEJQEF6VS5RldTpkZWVvVWUgg\/oQJyK861fOK2MPiFZb9drVY7YMPv\/AJzjgRiG1csvcxOyTjmUKxSL3FYTywPl5hX\/ADA+uYL6a3qddHNvSrjL3hicuviV665bWXVLY41ofxLEk1\/bZM4kUNqsl7st+Q78nOxbkRa03r5UX8qj6DZmGERmbpDkwMRmBGIwMkxGwZJhuSTMnZzOi6EmpNdT3lkwrpjjrqRMkwJiJmakYoExRRQYoGSzAdTFNMmcdsrr0Gx77mK64t9B7TFKkccuJ7FqUBEJYEpxAEsCICWBBUhgSwIgJYEFyACWBEBLAguQCUIAShBcgEoQAlCCoBKEUcFwxHCEyhuTCLcwOSTAmImYbImImBkkxGwZO4ExTJImZaq\/U\/oI66\/U\/tLMLV44\/egyTGZJMyqURgTFuKaRMUCZxrcn0X9\/9IyOeWUndlttC\/f2nDssLdT\/APQkkwlSaefLO0oQMJSFgSgIgJYE1MMCWBEBLkrkAEsCLp7iVse8FSGBKAiBHuP3lAj3Ey5DAlARAygRBchgRgRAj6ShBWjjijgoRQ2ItzMDFDcksPpMDJkmLmiLD3ikGSYFh7ylXf0H+cw1tAG+0zJXr7ygAO0CYbdJjoGIwMUC7HhXD6LiFsza8Vie1tNjJ37+YDofrqd14m8B34OP8UbqrqwyK3IrIVDkKrdSdjZA\/WakZ7FRcc3w5YfzWJh2rr1NmPvl\/U8in9Z1wkyln3eLxPEz4WWOUvS3V7POvCXhW3iT2rXYtS1KrM7ozDbEgKACOvysf0nO4d4EsyMvLw68qothirzbfKfkL2c3yAc3ccpm6+EwvCuCPmWLqx62ymU9CzMoFNf3I5B92MwfgxURhZWZadvk5Vtj2H\/eCD5m\/vGydMeHOm3k4vi8\/ruN6TpPzec0+DcrIz8jAoZLTjMBdfpq6U7d+53vYA6k8pm0n8F7uXfx9XNr8vwr8u\/63mf+05X4PeJqHsza7WWvIy8psqsuQPNDj+TB\/nL7evN09Zg8d+Cs\/He\/iGJl5Fy8z22J5ti30qSWPKQdOg9uhAHrGYzW3PPi8TzOW5a\/p3ebYvDbLclcSrT2PeaUI2FYhiOff83QJ+02\/wASfhhkYWLbltk1XCoIWrSp1YguqkglvTe\/0nY\/ghwTzMi7OcfJQpqqJ\/pXHzMPsnT\/AIk3rA4mvF8HidY1rzMzEX6qE\/i2\/UEGOOMs6txePljnqdprb54MIDfqNH1HsfaE5vWzgSwJsHjjw8+DmWoVPk2O1mO+vlZCd8u\/dd6I+3vOgAhehwsyksMCbR4A5RfksxChOH5bh\/LS7kKhSHCN0Yj2M1kCWhI7EjY0dHWx7TS6qssebGx6LhcXxrBm3oWq8nDwa7Mv4PGNj2nJKtcKN8g2GAPXeh26Cdh5GreJNXTYSKeFmq3ExsW6zJBNnNkpWw5AGHQ+3L7zyxSeo2dHuN9\/vMqWuOzMNDXRiOntHnc\/Te1+dP2b2mcMfHyrbvianbiKoD8FgnI5fhEIV63IRB038v09zOR\/GfwfhtXVlM1mLaztjYWHbUXNj9bHf5l\/s+k88Lse5J676knrrW5a2sBoMwHsGIH7Q51+nekZvltRdUoFrpwiiwYXw9C9WqXeSlo+dmXuR079Nw475bU51SAXPVhY5GJ8PQnlc1dZOVXYPnfl3sjp+aecBzvezvsDs717RhjvezvWt7O9a1qa8RsfC611+fP6vSPESOL0QVZQp+KwNk4eKuJymyrYFo+c7J9e5JHadd4nps+HzmyqkrKZwXAY011O1fmNzqvKAWTkCnZ3NLNznoXY\/dj6doncnqSSfckmFz2vDw1x117N14ZRkfDYQwqaLa7Uv+Na2ut62tDMCt7HqqhNa6iZeEcIqOEMRmxRk5tVuRWrsRer7HwqoNfkPl2E9f8Ae9ZogcgEAkBvzAHo33HrA2HYOzsa0dnY121NzfgbwL9r99\/9ei4ZQ000cvmWfwMlvwDY9AF7kOCwtPz+YNbK69BrfWY7KHKIttSfwd\/A1VjWtTWAuR5G1dbNc3Pza6A+s898w7B2djsdnYkvYSACSQOwJJAjzo9N17t18FYVeRhZOM4QPlZK0V2EDdbjHe1SD3A3V\/zmw5HltZkWUVPoYGMahjY9F12vjLVDIj\/KSVA3v037TygOR2JHXfQkdff7wW1h2Zh010JHT2+00z1NDPw1yyt33+f6ej8LwRk152NejpZlZVVNVmTRVRdWVxPNUla\/lXrUe3fY9zOZlitrcl6KnA\/g7CNQxcei60D4y5eZEs+UkqBvfpv6Ty8Fu5Zt73+Y99a3uWtjDszDproSOntN5k9j6PK3e\/nT9npjYoSziDpTYHajhbhMfFxrMlWY2B+apvkVzrba9NTicNsVUc3vZitbxRKvMuw8U2cpxUIS1D8tanp1XfcH1M89FrDZDMCe5DEE\/f3ku5Pck7Ozsk7Otbh5n4KnhOmt+32c\/wASLy5eSPJ+H1c+qBrVY30A10169OnWdaTG7knZJJ9ydzBZeB9ftI716p9OMl+zKZisuA\/0E41l5P0HsJhJjMXLLi+zLZkE9ug+neer\/gbnh6c3DbryutwU9ili8jD7bQf3p5CZVdrL1VmQnoSrFSR+k6YXlu3k4+F4uNxteq\/jjxoKMfh6HQAGRcB2Cja1L+4Y\/wBkTu7gcDwzr8thwde2rsjv+u7P+U8NsdmO2ZmPuxLH9zLsyLGHK1ljL0+VnYr07dCZXP1tcfT\/AE4477Xf5vQuDfhUcvDxclMoVPfUtj12VeYq83VeUqwI6a6Hc37Iy04PwwVZWScu5a3rq5+tuRY2+WpVJJIGwOpOgOs8Aoy7a+ldttQPUiu16wT7nlImOy1mbnZmZ\/57MzP\/AHj1mmUnaDLgZZ36sun5PoDhfw\/AuEY65IOlVBcEHOz329XUA63rZH2WPwH4h4Xe9uPw6j4YhRbYgoroVxsLzfKep7TwC3IdujO7jvpnZhv36mTXaynasynttWKnXt0j5iL4Tcu71rs\/FuD8Pn5tPomTbyj2Vm51H91hOpmQB7HAHPZY5AA+Z3duwA9SfSe4eGfw4oTEoGUu8jlLW60dMzFuXfroED9ITG3s658WcKTmbb4pxa7MS8WVpYAhYB0VwGHYgH1nzbYPmP3P+ccI8Vy8D2pCUIQnF9GLjEITLillCEILihHCEFQ4QhMQYjCEzJMRhCYJMzV9oQhTh3VJMIQdCMmEJk1xco9dempxzCE6R5eJ3QZJhCU5lCEJhRCEJgUUcJmKOEJmet\/ghiVkX2mus2qdLYUUuoPcBu4nrUIT04dnyPE\/zK\/\/2Q==\">\n\n# Context\n\nCredit score cards are a common risk control method in the financial industry. It uses personal information and data submitted by credit card applicants to predict the probability of future defaults and credit card borrowings. The bank is able to decide whether to issue a credit card to the applicant. Credit scores can objectively quantify the magnitude of risk.\n\nGenerally speaking, credit score cards are based on historical data. Once encountering large economic fluctuations. Past models may lose their original predictive power. Logistic model is a common method for credit scoring. Because Logistic is suitable for binary classification tasks and can calculate the coefficients of each feature. In order to facilitate understanding and operation, the score card will multiply the logistic regression coefficient by a certain value (such as 100) and round it.\n \nAt present, with the development of machine learning algorithms. More predictive methods such as Boosting, Random Forest, and Support Vector Machines have been introduced into credit card scoring. However, these methods often do not have good transparency. It may be difficult to provide customers and regulators with a reason for rejection or acceptance.\n \n\n\n# Task\nBuild a machine learning model to predict if an applicant is 'good' or 'bad' client, different from other tasks, the definition of 'good' or 'bad' is not given. You should use some techique, such as vintage analysis to construct you label.\n\n# Following main steps were used:\n* Fill missing values with mode\n* Find correlation between features\n* Oversample data set\n* Use scaling (StandardScaler)\n* Do ramdomizedSearchCV to select initialized parameters\n* Plot learning curves over multiple iterations\n* Plot validation curves over multiple iterations\n\n","6b1a51d6":"* Using different methods to understand data\n* data is complex and both dataset need some kind of transformation before analysis\n* datasets are indivudally dealt with and then eventually compiled using joins","1dd4f80e":"# Iteration 1 with RBF kernel","bee47a28":"# Extracting data using two data sources","05f8999e":"source: https:\/\/www.kaggle.com\/umerkk12\/credit-card-predictive-analysis","09d21fa0":"df.info() # checking for number of rows. \n# there are 9516 rows.","b0dcc6be":"# Algorithms code start below\n","fe9b5a02":"There are outliers in 3 columns.\n1. CNT_CHILDREN\n2. AMT_INCOME_TOTAL\n3. CNT_FAM_MEMBERS","11a66adf":"* We need to remove these outliers to make sure they do not affect our model results. \n* We will now remove these outliers. "}}