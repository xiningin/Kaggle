{"cell_type":{"94f83dad":"code","ff379ec7":"code","7ec6be6a":"code","a7462cdb":"code","150d3de6":"markdown","e213b6c8":"markdown"},"source":{"94f83dad":"import pandas as pd\nimport numpy as np\nimport os\n\ndataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n# print(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n\nweather = pd.read_csv(os.path.join(dataset_path, 'weather-sfcsv.csv'))\n# weather.sort_values(by=['Year', 'Month', 'Day', 'Hour'])\nweather.drop_duplicates(['Year', 'Month', 'Day', 'Hour'], inplace=True)\ndfTimestampDt = pd.to_datetime(df['timestamp']).dt\ndf['Year'] = dfTimestampDt.year\ndf['Month'] = dfTimestampDt.month\ndf['Day'] = dfTimestampDt.day\ndf['Hour'] = dfTimestampDt.hour\n\ndf = pd.merge(left = df, right = weather, how = 'left',\n              left_on=['Year', 'Month', 'Day', 'Hour'], \n              right_on=['Year', 'Month', 'Day', 'Hour'])\n# df.iloc[0,:]#[['Year', 'Month', 'Day', 'Hour']]\n\nimport xml.etree.ElementTree as ET\nroot = ET.parse(os.path.join(dataset_path, 'holidays.xml')).getroot()\n\nl = [{r[i].tag:r[i].text for i in range(len(r))} for r in root]\nholidays = pd.DataFrame.from_dict(l)\nholidays = set(holidays.date)\ndf['holiday'] = 0\nfor i, row in df.iterrows():\n    if row.timestamp.split(' ')[0] in holidays:\n        df.at[i, 'holiday'] = 1\n\nbool_feartures = ['Crossing', 'Junction', 'Railway', 'Stop', 'Amenity']\nfor feat in bool_feartures:\n    df[feat] = np.where(True == df[feat], 1, 0)\ndf['Side'] = np.where('R' == df['Side'], 1, 0)\n\nfrom sklearn.preprocessing import LabelEncoder\ndf = df[~df.Weather_Condition.isna()]\nweather = weather[~weather.Weather_Condition.isna()]\n# fit & transform on X_train \/ X_val\n# print(df['Weather_Condition'])\n\nfrom sklearn.model_selection import train_test_split\ndrop_columns=['ID', 'Bump', 'Give_Way', 'No_Exit', 'Selected',\n              'timestamp', 'Month', 'Day', 'Hour', 'Roundabout',\n              'Wind_Speed(mph)', 'Distance(mi)', 'Crossing','Junction',\n              'Railway','Amenity','Wind_Chill(F)', 'Precipitation(in)','Temperature(F)',\n              'Visibility(mi)', 'holiday',\n             ] #'Weather_Condition'\n\ndf.drop(columns=drop_columns, inplace=True)\n# df.fillna(df.mean(), inplace=True)\ndf.dropna(inplace=True)\ndf.reset_index(drop=True, inplace=True)\n\n# from sklearn.preprocessing import StandardScaler\n# floatFeatures = ['Wind_Chill(F)', 'Precipitation(in)', 'Temperature(F)', 'Humidity(%)', 'Visibility(mi)']\n# floatFeaturesTransformer = StandardScaler().fit(df[floatFeatures])\n# df[floatFeatures] = floatFeaturesTransformer.transform(df[floatFeatures])\n\n# print(df.dtypes)\ntrain_df, val_df = train_test_split(df, test_size=0.3, random_state=42)\n\n# cols = ['Severity', ]# 'Distance(mi)', 'Railway', 'Side', 'holiday']\n# X_train = train_df.drop(columns=cols)\n# y_train = train_df['Severity']\n# X_val = val_df.drop(columns=cols)\n# y_val = val_df['Severity']\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier\ncols = ['Severity', ]# 'Distance(mi)', 'Railway', 'Side', 'holiday']\nX_df = df.drop(columns=cols)\ny_df = df['Severity']\n\nmodels = {\n    'acc':[],\n    'model':[]\n}\n\n# WeatherConditionTransformer = LabelEncoder().fit(df.loc[:,'Weather_Condition'])\nWeatherConditionTransformer = LabelEncoder().fit(weather.loc[:,'Weather_Condition'])\n\nskf = StratifiedKFold(n_splits=20, shuffle=True, random_state=42)\nfor train_index, val_index in skf.split(X_df, y_df):\n    X_train, X_val = X_df.loc[train_index,:], X_df.loc[val_index,:]\n    X_train['Weather_Condition'] = WeatherConditionTransformer.transform(X_train.loc[:,'Weather_Condition'])\n    X_val['Weather_Condition'] = WeatherConditionTransformer.transform(X_val.loc[:,'Weather_Condition'])\n    y_train, y_val = y_df.loc[train_index], y_df.loc[val_index]\n    classifier = RandomForestClassifier(max_depth=2, random_state=0)\n    classifier = classifier.fit(X_train, y_train)\n    models['model'].append(classifier)\n    models['acc'].append(classifier.score(X_val, y_val))\n    print(\"The accuracy of the classifier on the validation set is \", models.get('acc',[])[-1])","ff379ec7":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\n\ndfTestTimestampDt = pd.to_datetime(test_df['timestamp']).dt\ntest_df['Year'] = dfTestTimestampDt.year\ntest_df['Month'] = dfTestTimestampDt.month\ntest_df['Day'] = dfTestTimestampDt.day\ntest_df['Hour'] = dfTestTimestampDt.hour\n\ntest_df = pd.merge(left = test_df, right = weather, how = 'left',\n              left_on=['Year', 'Month', 'Day', 'Hour'], \n              right_on=['Year', 'Month', 'Day', 'Hour'])\n\ntest_df['holiday'] = 0\nfor i, row in test_df.iterrows():\n    if row.timestamp.split(' ')[0] in holidays:\n        test_df.at[i, 'holiday'] = 1\n\nbool_feartures = ['Crossing', 'Junction', 'Railway', 'Stop', 'Amenity']\nfor feat in bool_feartures:\n    test_df[feat] = np.where(True == test_df[feat], 1, 0)\ntest_df['Side'] = np.where('R' == test_df['Side'], 1, 0)\n\n# test_df = test_df[~test_df.Weather_Condition.isna()]\ntest_df['Weather_Condition'] = WeatherConditionTransformer.transform(test_df.loc[:,'Weather_Condition'])\n\ndrop_columns=['ID', 'Bump', 'Give_Way', 'No_Exit', 'Selected',\n              'timestamp', 'Month', 'Day', 'Hour', 'Roundabout',\n              'Wind_Speed(mph)', 'Distance(mi)', 'Crossing','Junction',\n              'Railway','Amenity','Wind_Chill(F)', 'Precipitation(in)','Temperature(F)',\n              'Visibility(mi)', 'holiday',\n             ]\nX_test = test_df.drop(columns=drop_columns)\n\nX_test.fillna(df.mean(), inplace=True)\nX_test.reset_index(drop=True, inplace=True)","7ec6be6a":"argmax = lambda y: max(range(len(y)), key=lambda x:y[x])\nclassifier = models['model'][argmax(models['acc'])]\n\ny_test_predicted = classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","a7462cdb":"test_df[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)","150d3de6":"## Import the libraries\n\nWe'll use `pandas` to load and manipulate the data. Other libraries will be imported in the relevant sections.","e213b6c8":"## You're here! \nWelcome to your first competition in the [ITI's AI Pro training program](https:\/\/ai.iti.gov.eg\/epita\/ai-engineer\/)! We hope you enjoy and learn as much as we did prepairing this competition.\n\n\n## Introduction\n\nIn the competition, it's required to predict the `Severity` of a car crash given info about the crash, e.g., location.\n\nThis is the getting started notebook. Things are kept simple so that it's easier to understand the steps and modify it.\n\nFeel free to `Fork` this notebook and share it with your modifications **OR** use it to create your submissions.\n\n### Prerequisites\nYou should know how to use python and a little bit of Machine Learning. You can apply the techniques you learned in the training program and submit the new solutions! \n\n### Checklist\nYou can participate in this competition the way you perefer. However, I recommend following these steps if this is your first time joining a competition on Kaggle.\n\n* Fork this notebook and run the cells in order.\n* Submit this solution.\n* Make changes to the data processing step as you see fit.\n* Submit the new solutions.\n\n*You can submit up to 5 submissions per day. You can select only one of the submission you make to be considered in the final ranking.*\n\n\nDon't hesitate to leave a comment or contact me if you have any question!"}}