{"cell_type":{"2401684e":"code","450cbd3e":"code","2149c7b6":"code","5a716b97":"code","1ab80dbf":"code","8ff2fc7d":"code","9c89ab3b":"code","d39cff04":"code","03e5880c":"code","5969d5e1":"code","5dbcd4d3":"code","b17e50b0":"code","8076e1f4":"code","ec634153":"markdown"},"source":{"2401684e":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","450cbd3e":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","2149c7b6":"train_df.head()","5a716b97":"y = train_df['SalePrice'].values\ncombine_df = pd.concat([train_df.drop(['SalePrice'], axis=1), test_df], axis=0)\ncombine_df['MSZoning'] = combine_df['MSZoning'].fillna(combine_df['MSZoning'].mode()[0])\ncombine_df[\"LotFrontage\"] = combine_df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\ncombine_df[\"Alley\"] = combine_df[\"Alley\"].fillna(\"None\")\ncombine_df['Utilities'] = combine_df['Utilities'].fillna(combine_df['Utilities'].mode()[0])\ncombine_df['Exterior1st'] = combine_df['Exterior1st'].fillna(combine_df['Exterior1st'].mode()[0])\ncombine_df['Exterior2nd'] = combine_df['Exterior2nd'].fillna(combine_df['Exterior2nd'].mode()[0])\ncombine_df[\"MasVnrType\"] = combine_df[\"MasVnrType\"].fillna(combine_df['MasVnrType'].mode()[0])\ncombine_df[\"MasVnrArea\"] = combine_df[\"MasVnrArea\"].fillna(combine_df['MasVnrArea'].mode()[0])\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    combine_df[col] = combine_df[col].fillna('None')\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    combine_df[col] = combine_df[col].fillna(0)\ncombine_df['Electrical'] = combine_df['Electrical'].fillna(combine_df['Electrical'].mode()[0])\ncombine_df['KitchenQual'] = combine_df['KitchenQual'].fillna(combine_df['KitchenQual'].mode()[0])\ncombine_df['Functional'] = combine_df['Functional'].fillna(combine_df['Functional'].mode()[0])\ncombine_df['FireplaceQu'] = combine_df['FireplaceQu'].fillna('None')\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    combine_df[col] = combine_df[col].fillna('None')\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    combine_df[col] = combine_df[col].fillna(0)\ncombine_df['PoolQC'] = combine_df['PoolQC'].fillna('None')\ncombine_df['Fence'] = combine_df['Fence'].fillna('None')\ncombine_df['MiscFeature'] = combine_df['MiscFeature'].fillna('None')\ncombine_df['SaleType'] = combine_df['SaleType'].fillna(combine_df['SaleType'].mode()[0])","1ab80dbf":"combine_df.isnull().sum().sum()","8ff2fc7d":"combine_df['MSSubClass'] = combine_df['MSSubClass'].astype(str)\ncombine_df['OverallCond'] = combine_df['OverallCond'].astype(str)\ncombine_df['OverallQual'] = combine_df['OverallQual'].astype(str)\ncombine_df = combine_df.drop(['Id'], axis=1)\ncombine_dummies = pd.get_dummies(combine_df)\nresult = combine_dummies.values","9c89ab3b":"scaler = StandardScaler()\nresult = scaler.fit_transform(result)\nX = result[:train_df.shape[0]]\ntest_values = result[train_df.shape[0]:]","d39cff04":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\nclf1 = LinearRegression()\nclf1.fit(X_train, y_train)\ny_pred1 = clf1.predict(X_test)\ny_train_pred1 = clf1.predict(X_train)\n\nclf2 = Lasso(alpha=1.0)\nclf2.fit(X_train, y_train)\ny_pred2 = clf2.predict(X_test)\ny_train_pred2 = clf2.predict(X_train)\n\nclf3 = Ridge(alpha=1.0)\nclf3.fit(X_train, y_train)\ny_pred3 = clf3.predict(X_test)\ny_train_pred3 = clf3.predict(X_train)","03e5880c":"print(\"Train Linear acc: \" , r2_score(y_train, y_train_pred1))\nprint(\"Test Linear acc: \", r2_score(y_test, y_pred1))\nprint(\"Train Lasso acc: \" , r2_score(y_train, y_train_pred2))\nprint(\"Test Lasso acc: \", r2_score(y_test, y_pred2))\nprint(\"Train Ridge acc: \" , r2_score(y_train, y_train_pred3))\nprint(\"Test Ridge acc: \", r2_score(y_test, y_pred3))","5969d5e1":"print(\"Train Linear acc: \" , clf1.score(X_train, y_train))\nprint(\"Test Linear acc: \", clf1.score(X_test, y_test))\nprint(\"Train Lasso acc: \" , clf2.score(X_train, y_train))\nprint(\"Test Lasso acc: \", clf2.score(X_test, y_test))\nprint(\"Train Ridge acc: \" , clf3.score(X_train, y_train))\nprint(\"Test Ridge acc: \", clf3.score(X_test, y_test))","5dbcd4d3":"final_labels1 = clf2.predict(test_values)\nfinal_labels2 = clf3.predict(test_values)\nfinal_labels = (final_labels1+final_labels2)\/2\nprint(\"Lasso Prediction\",final_labels1)\nprint(\"Ridge Prediction\",final_labels2)\nprint(\"Combined Prediction\",final_labels)","b17e50b0":"final_result = pd.DataFrame({'Id': test_df['Id'], 'SalePrice': final_labels})\nfinal_result","8076e1f4":"import matplotlib.pyplot as plt\nplt.plot(final_labels1,final_labels2,'r.')","ec634153":"**Now we can see that Linear Regression is not suitable for this scenario. Also, both Lasso and Ridge regression approaches are giving good results. So combining the prediction capability of both the models could improve the prediction capability.**"}}