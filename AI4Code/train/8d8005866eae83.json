{"cell_type":{"40d05f29":"code","7d90e86a":"code","a2024489":"code","07684643":"code","f72ae3e7":"code","dca43903":"code","a7df4d93":"code","2990fb0a":"code","fe338fbd":"code","776b992d":"code","11a70e18":"code","e4871767":"code","e4e97791":"code","89a13435":"code","93cc9cea":"code","d4d57801":"markdown","ae1a79f8":"markdown","f0cb285b":"markdown","75890713":"markdown","eb107e74":"markdown","eccc5b99":"markdown","6b5efd66":"markdown"},"source":{"40d05f29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d90e86a":"import pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\ndf = pd.read_csv('..\/input\/shiba-inu-data\/SHIB-USD.csv' ,parse_dates=['Date'],infer_datetime_format=True)","a2024489":"df.head(3)","07684643":"df.shape","f72ae3e7":"df.info()","dca43903":"df.describe()","a7df4d93":"df.isnull().sum()","2990fb0a":"\nplt.figure(figsize=(10,8))\nsns.heatmap(df.corr(),annot=True)","fe338fbd":"df['Close'].duplicated().any()","776b992d":"#drop the duplicated column Adj Close\ndf.drop('Adj Close',axis=1, inplace = True)","11a70e18":"# Initialize the figure style\nplt.style.use('seaborn-darkgrid')\n \n# create a color palette\npalette = plt.get_cmap('Set1')\n# multiple line plot\nplt.figure(figsize=(20,15))\nnum=0\nfor column in df.drop('Date', axis=1):\n    num+=1\n    #plt.figure(figsize=(20,10))\n    # Find the right spot on the plot\n    plt.subplot(3,3, num)\n \n    # Plot the lineplot\n    plt.plot(df['Date'], df[column], marker='', color=palette(num), linewidth=1.9, label=column)\n \n\n \n    # Not ticks everywhere\n    if num in range(7) :\n        plt.tick_params(labelbottom='off')\n    if num not in [1,4,7] :\n        plt.tick_params(labelleft='off')\n \n    # Add title\n    plt.title(column, loc='center', fontsize=12, fontweight=0, color=palette(num) )","e4871767":"X = df[[ 'Open', 'High', 'Low','Volume']]\ny = df['Close']","e4e97791":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","89a13435":"from sklearn.preprocessing import StandardScaler\n#Initalise standard scaler\nscaler = StandardScaler()\n#Fit the scaler using X_train data\nscaler.fit(X_train)\n#Transform X_train and X_test using the scaler and convert back to DataFrame\nX_train = pd.DataFrame(scaler.transform(X_train), columns = X_train.columns)\nX_test = pd.DataFrame(scaler.transform(X_test), columns = X_test.columns)","93cc9cea":"#Import Library\nfrom sklearn.linear_model import LinearRegression\n\n#Initialise & Fit Model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n#Use Model to Make Predictions\ny_pred = model.predict(X_test)\n\n#Get Intercept & Coefficients\nprint(model.intercept_)\ncoef = pd.DataFrame(model.coef_, X_train.columns, columns=['Coef'])\n\n#Get MSE & MAE\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nprint('MSE:',mean_squared_error(y_test,y_pred))\nprint('MAE:',mean_absolute_error(y_test,y_pred))","d4d57801":"# linear regression","ae1a79f8":"interesting spike fore 2021-10 and went further in 2021-11 !","f0cb285b":"Here we see clearly a duplicated column close - Adj Close !!\nLet's confirm it by : ","75890713":"Nice ! we see that the the date was intially an object( a string) and we converted it to a date!\n\nAll is fine for the other columns.\n\nLet's see some stats","eb107e74":"Hmmm all values are <1 except for the volume having very large values (scaling is essential)\n\nand no null values :D!","eccc5b99":"# EDA","6b5efd66":"Hello everyone,\n\nI present you my notebook in which I explored this data and runned a simple linear rregressio model on the close price.\n\nFeel free to put your suggestions\/recommendations in the comment section!\n\nIf you like my notebook , please upvote !!\nHappy kaggling :)"}}