{"cell_type":{"15de242b":"code","c62a7de4":"code","a9155547":"code","14293922":"code","b25dd6e1":"code","ad45df75":"code","1762d0ba":"code","7464773c":"code","e7e79787":"code","df7867a0":"code","7347805a":"code","62049bb5":"code","5d6fab06":"code","dc3b7e0f":"code","a5ab8555":"code","646b5274":"code","7dde520b":"code","945e85fa":"code","8d853c70":"code","e0adf6a2":"code","f517fd36":"code","39bac667":"code","a2c0d39d":"code","45246ed3":"code","6d35b98a":"code","d4287922":"code","6f52980e":"code","2a6d226a":"code","15a60d7c":"code","9812e7a8":"code","4efb0a7c":"code","1eb435dc":"code","09ec5fa8":"markdown","27483f8a":"markdown"},"source":{"15de242b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory","c62a7de4":"# import libraries \nimport fastai \nfrom fastai import * \nfrom fastai.text import * \nimport pandas as pd \nimport numpy as np \nfrom functools import partial \nimport io \nimport os","a9155547":"from sklearn.datasets import fetch_20newsgroups ","14293922":"cats = ['rec.sport.hockey','comp.sys.ibm.pc.hardware','soc.religion.christian']\n#cats = ['alt.atheism', 'sci.space', 'rec.motorcycles']\ndataset = fetch_20newsgroups(subset='train', categories=cats)","b25dd6e1":"#dataset = fetch_20newsgroups(shuffle=True, random_state=1, remove= ('headers', 'footers', 'quotes'))","ad45df75":"documents = dataset.data","1762d0ba":"df = pd.DataFrame({'label':dataset.target, 'text':dataset.data})","7464773c":"df.shape\ndf.head()","e7e79787":"#df = df[df['label'].isin([1,7,10])] \ndf = df.reset_index(drop = True)","df7867a0":"df['label'].value_counts()","7347805a":"df['text'] = df['text'].str.replace(\"[^a-zA-Z]\", \" \")","62049bb5":"import nltk\nnltk.download('stopwords') \nfrom nltk.corpus import stopwords ","5d6fab06":"stop_words = stopwords.words('english')","dc3b7e0f":"# tokenization \ntokenized_doc = df['text'].apply(lambda x: x.split()) ","a5ab8555":"# remove stop-words \ntokenized_doc = tokenized_doc.apply(lambda x:[item for item in x if \n                                    item not in stop_words]) ","646b5274":"# de-tokenization \ndetokenized_doc = [] ","7dde520b":"for i in range(len(df)):\n    t =' '.join(tokenized_doc[i]) \n    detokenized_doc.append(t) ","945e85fa":"df['text'] = detokenized_doc","8d853c70":"from sklearn.model_selection import train_test_split ","e0adf6a2":"# split data into training and validation set \ndf_trn, df_val = train_test_split(df, stratify = df['label'],  test_size = 0.4, random_state = 12)","f517fd36":"df_trn.shape, df_val.shape","39bac667":"# Language model data \ndata_lm = TextLMDataBunch.from_df(train_df = df_trn, valid_df = df_val, path = \"\") ","a2c0d39d":"# Classifier model data \ndata_clas = TextClasDataBunch.from_df(path = \"\", train_df = df_trn, \n                                      valid_df = df_val,  \n                                      vocab=data_lm.train_ds.vocab, \n                                      bs=32)","45246ed3":"learn = language_model_learner(data_lm, pretrained_model=URLs.WT103, drop_mult=0.7)","6d35b98a":"learn.lr_find()\nlearn.recorder.plot()","d4287922":"# train the learner object with learning rate = 1e-2 \nlearn.fit_one_cycle(1, 1e-2)","6f52980e":"learn.save_encoder('ft_enc')","2a6d226a":"learn = text_classifier_learner(data_clas, drop_mult=0.7) \nlearn.load_encoder('ft_enc')","15a60d7c":"learn.fit_one_cycle(1, 1e-2)","9812e7a8":"learn.unfreeze()\nlearn.fit_one_cycle(3, slice(2e-3\/100, 2e-3))","4efb0a7c":"# get predictions \npreds, targets = learn.get_preds() \npredictions = np.argmax(preds, axis = 1) ","1eb435dc":"%matplotlib inline\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(font_scale=2)\n#predictions = model.predict(X_test, batch_size=1000)\n\n#LABELS = ['graphics','hockey'] \nLABELS = cats\n\nconfusion_matrix = metrics.confusion_matrix(targets, predictions)\n\nplt.figure(figsize=(5, 5))\nsns.heatmap(confusion_matrix, xticklabels=LABELS, yticklabels=LABELS, annot=True, fmt=\"d\", annot_kws={\"size\": 20});\nplt.title(\"Confusion matrix\", fontsize=20)\nplt.ylabel('True label', fontsize=20)\nplt.xlabel('Predicted label', fontsize=20)\nplt.show()","09ec5fa8":"https:\/\/scikit-learn.org\/0.19\/datasets\/twenty_newsgroups.html","27483f8a":"https:\/\/mc.ai\/tutorial-on-text-classification-nlp-using-ulmfit-and-fastai-library-in-python\/"}}