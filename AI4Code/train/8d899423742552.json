{"cell_type":{"4e010e4d":"code","1853ea5a":"code","7321bf17":"code","a1095108":"code","c328be33":"markdown","4d3b5777":"markdown"},"source":{"4e010e4d":"from scipy.stats import beta\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","1853ea5a":"def simulate_beta(prior_a, prior_b, p, n_trials):\n    \"\"\"\n    Run Bayesian updating on prior, given true parameter.\n    \n    Parameters\n    ----------\n    prior_a int: prior alpha\n    prior_b int: prior beta\n    p float: true Bernoulli parameter\n    n_trials int: number of iterations to run\n    \n    Return\n    ------\n    df DataFrame: parameters for Bernoulli trial p during each iteration\n    df_ DataFrame: parameters for Bernoulli trial 1 - p during each iteration\n    \"\"\"\n    a = prior_a\n    b = prior_b\n\n    df = pd.DataFrame({\"a\" : [a], \"b\" : [b]})\n    df_ = pd.DataFrame({\"a\" : [a], \"b\" : [b]})\n    for _ in range(n_trials):\n        if np.random.rand() < p:\n            a, b = df.iloc[-1].values\n            a += 1\n            df = df.append({\"a\" : a, \"b\" : b}, ignore_index=True)\n            \n            a, b = df_.iloc[-1].values\n            b += 1\n            df_ = df_.append({\"a\" : a, \"b\" : b}, ignore_index=True)\n        else:\n            a, b = df.iloc[-1].values\n            b += 1\n            df = df.append({\"a\" : a, \"b\" : b}, ignore_index=True)\n            \n            a, b = df_.iloc[-1].values\n            a += 1\n            df_ = df_.append({\"a\" : a, \"b\" : b}, ignore_index=True)\n        \n    return df, df_","7321bf17":"n_trials = 1000\nprior_a = 100\nprior_b = 100\n\np = 0.2\ndf, df2 = simulate_beta(prior_a, prior_b, p=p, n_trials=n_trials)","a1095108":"x = np.linspace(0, 1, 1000)\nfig, ax = plt.subplots(figsize=(12,4))\n\n# -------------------------------------------\n# plot prior\nrv_prior = beta(prior_a, prior_b)\nax.plot(x, rv_prior.pdf(x), alpha=0.2)\n\n# -------------------------------------------\n# first graph\na, b = df.iloc[-1].values\nrv = beta(a, b)\nline, = ax.plot(x, rv.pdf(x), alpha=0.8, color='#ff7f0e')\n\n# -------------------------------------------\n# second graph\na2, b2 = df2.iloc[-1].values\nrv2 = beta(a2, b2)\nline2, = ax.plot(x, rv2.pdf(x), alpha=0.8, color='C2')\n\n# -------------------------------------------\n# ax.axvline(prior_a \/ (prior_a + prior_b), alpha=0.2, linestyle=\"--\")\nax.axvline(p, alpha=0.2, linestyle=\"--\", color='#ff7f0e')\nax.axvline(1-p, alpha=0.2, linestyle=\"--\", color='C2')\n\n# -------------------------------------------\n# accessory\nlegend = [\" prior p=%.3f, Beta(\\u03B1=%i, \\u03B2=%i)\"%(prior_a \/ (prior_a + prior_b), prior_a, prior_b), \n          \"mean p=%.3f, Beta(\\u03B1=%i, \\u03B2=%i)\"%(a \/ (a + b), a, b),\n          \"mean p=%.3f, Beta(\\u03B1=%i, \\u03B2=%i)\"%(a2 \/ (a2 + b2), a2, b2)]\nax.legend(legend, frameon=False, loc=\"upper center\")\n\n# -------------------------------------------\n# minimalism style\nax.tick_params(top=False, bottom=False, left=False, right=False, labelleft=False, labelbottom=True)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\nax.set_ylim(0, 50)\n\nplt.show()","c328be33":"#### Visualize Results","4d3b5777":"#### Simulation Setup"}}