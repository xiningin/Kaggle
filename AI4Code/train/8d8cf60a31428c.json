{"cell_type":{"357a5ac4":"code","1e3f0c80":"code","09911ec1":"code","99d4c50e":"code","69a628d1":"code","c782d6e5":"code","585f2715":"code","7fe65f73":"code","1bf4f3b9":"code","a29cbe49":"code","689cbd6a":"code","49c2ce33":"code","7eae6737":"code","5bf7b91b":"code","c4677f8c":"code","c1f3fd93":"code","2eea904a":"code","9e803a9e":"markdown","5d362de3":"markdown","a80c242a":"markdown","4e047715":"markdown","b138eaf8":"markdown","39791974":"markdown","fad0ee81":"markdown"},"source":{"357a5ac4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.naive_bayes import MultinomialNB\n\nimport nltk # it is the one of most comman libraries for Natural Language Process\nimport re # Regular Expression library","1e3f0c80":"data = pd.read_csv(\"..\/input\/twitter-user-gender-classification\/gender-classifier-DFE-791531.csv\", encoding=\"latin1\")\n\n# i will use only description column \ndata = pd.concat([data.gender, data.description], axis=1)\ndata.dropna(axis = 0, inplace = True) # we dropped the null rows","09911ec1":"data.info()","99d4c50e":"import nltk # natural language took kit\nnltk.download(\"stopwords\")\nnltk.download('punkt')\nnltk.download('wordnet')","69a628d1":"# genders have two options (male\/female). so i changed male to 0 and female to 1.\ndata.gender = [1 if gender == \"female\" else 0 for gender in data.gender]","c782d6e5":"import nltk\ndescription_list = [] # we created a list so we after these steps, we will append into this list\nfor description in data.description:\n    description = re.sub(\"[^a-zA-Z]\", \" \", description)\n    # sub method finds the given pattern ([^a-zA-Z] means, NOT letter like \":\") and changes them with \" \" (space)\n    description = description.lower()\n    # we need to have all letters lowercase (because A is not equall to a)\n    description = nltk.word_tokenize(description)\n    # we make a word list from our text\n    lemma = nltk.WordNetLemmatizer()\n    description = [lemma.lemmatize(word) for word in description]\n    # we found the roots of each words with lemma\n    description = \" \".join(description)\n    # after all these steps,we joined the words together and remake our text.\n    description_list.append(description)\n    # and append these texts into the list we created.","585f2715":"# now, we will implement \"bag of words\" method\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nmax_features = 5000 # we will take top 5000 feature \n\ncv = CountVectorizer(max_features=max_features, stop_words = \"english\")\n# in this method, we remove the stopwords (irrelevant words) in English language. (like \"of\", \"and\", \"the\" etc.)\n\nsparce_matrix = cv.fit_transform(description_list).toarray()\n\nprint(\"top used {} words: {}\".format(max_features, cv.get_feature_names()))","7fe65f73":"y = data.iloc[:, 0].values\nx = sparce_matrix","1bf4f3b9":"from sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","a29cbe49":"# train test split\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state = 42)","689cbd6a":"# Random Forest Implementation\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nrf = RandomForestClassifier()\nrf.fit(x_train, y_train)\n# prediction\ny_pred = rf.predict(x_test)","49c2ce33":"# Random Forest \naccuracy = 100.0 * accuracy_score(y_test, y_pred)\nprint(\"Accuracy: \", accuracy)","7eae6737":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\nprint(\"accuracy: \",nb.score(x_test,y_test))","5bf7b91b":"nb = MultinomialNB()\nnb.fit(x_train, y_train)\n# prediction\ny_pred = nb.predict(x_test)\naccuracy = 100.0 * accuracy_score(y_test, y_pred)\nprint(\"Accuracy: \", accuracy)","c4677f8c":"lr = LogisticRegression(max_iter = 2000)\nlr.fit(x_train,y_train)\n# prediction\ny_pred = lr.predict(x_test)\naccuracy = 100.0 * accuracy_score(y_test, y_pred)\nprint(\"Accuracy: \", accuracy)","c1f3fd93":"from xgboost import XGBClassifier\nxgb = XGBClassifier(random_state =1)\ncv = cross_val_score(xgb,x_train,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","2eea904a":"voting_classfication = VotingClassifier(estimators = [('rf', rf),('lr',lr), ('nb', nb)], voting=\"hard\", n_jobs=-1)\nvoting_classfication.fit(x_train, y_train)\nprint(\"Accuracy: \", voting_classfication.score(x_test,y_test))","9e803a9e":" # Ensemble Modeling","5d362de3":"# XGboost","a80c242a":"# MultinomialNB","4e047715":"# I gained the top high accuracy with LogisticRegression algorithm for this problem\nI hope you enjoy reading my kernel\n\nPlease share any suggestions for the further improvement\n","b138eaf8":"These are the most comman words in description list.","39791974":"# Top accuracy","fad0ee81":"# LogisticRegression"}}