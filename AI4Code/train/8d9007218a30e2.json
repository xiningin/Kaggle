{"cell_type":{"7cccf33b":"code","6bd78f09":"code","a3b7d918":"code","726c7434":"code","4e5f10f7":"code","0c8b460f":"code","8297f7cc":"code","d889c742":"code","a95aca07":"code","09d1bf20":"code","85e7a465":"code","b6f27618":"code","b42828d5":"code","8ec9bb74":"code","0dbdee5f":"markdown","0ecc08af":"markdown","ab46c783":"markdown"},"source":{"7cccf33b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6bd78f09":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","a3b7d918":"data=pd.read_csv('..\/input\/gender-classification-dataset\/gender_classification_v7.csv')","726c7434":"data.head()","4e5f10f7":"data.isnull().sum()","0c8b460f":"le=LabelEncoder()\ndata.gender=le.fit_transform(data.gender)","8297f7cc":"X=data.drop('gender', axis=1)\ny=data.gender","d889c742":"X_train,X_test,y_train,y_test=train_test_split(X,y, random_state=42,test_size=0.5)","a95aca07":"model=RandomForestClassifier()\nmodel.fit(X_train,y_train)\nrf_preds=model.predict_proba(X_test)[:,1]","09d1bf20":"log_model=LogisticRegression()\nlog_model.fit(X_train,y_train)\nlog_preds=log_model.predict_proba(X_test)[:,1]","85e7a465":"print(f'Success of the RandomForest Classifier: {roc_auc_score(y_test,rf_preds)}')\nprint(f'Success of the Logistic Regression: {roc_auc_score(y_test,log_preds)}')","b6f27618":"rf_fpr,rf_tpr, _ = roc_curve(y_test,rf_preds)\nlog_fpr,log_tpr,_=roc_curve(y_test,log_preds)","b42828d5":"plt.plot(rf_fpr,rf_tpr, linewidth=4)\nplt.plot([0,1],[0,1], '--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve for RandomForestClassifier')\nplt.show()","8ec9bb74":"plt.plot(log_fpr,log_tpr,linewidth=4)\nplt.plot([0,1],[0,1], '--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve for LogisticRegression')\nplt.show()","0dbdee5f":"True Positive Rate (TPR): It is the ratio of the number of positives that were classified by the machine learning algorithm to the number of positives in reality.\n\nFalse Positive Rate (FPR): It is the ratio of number negatives that were classified by the machine algorithm as positive to the number of negatives in reality.\n\nROC Curves are constructed by plotting FPR in the x-axis and TPR in the y-axis. Ideally, the model learns quickly and predicts flawless. In other words, the ideal roc curve should be like this!\n![Ekran Al\u0131nt\u0131s\u0131.PNG](attachment:3d825e12-646e-4e54-a52f-cb56fa25aa97.PNG)\n\n\nThe area under the curve gets bigger as the model gets closer to the ideal scenario. So, we can use the area under the ROC curve as a representation of model success.\n\nThe \"roc_auc_score()\" gives the area under the curve.\nThe \"roc_curve()\" returns us the FPR,TPR and thresholds.\nBy using the results of the \"roc_curve()\" we can plot and observe model success visually and by using the \"roc_auc_score()\" we can evaluate the model success numerically.","0ecc08af":"Both of the classifiers have an almost ideal ROC Curve. We can check that also by considering the scores of the models.\n\nThanks for your attention!\n\nDon't hesitate to share your ideas if you have.","ab46c783":"The goal of this notebook is to explain and illustrate the usage of ROC curves.\n\nModels that we will evaluate are LogisticRegression and RandomForestClassifier.\n\nBefore training machine learning algorithms, we will encode the gender column by using LabelEncoder\n\nHope you'll enjoy!"}}