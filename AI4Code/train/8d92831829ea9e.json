{"cell_type":{"8a814373":"code","e0ed4318":"code","20ce9158":"code","163e8baa":"code","a7a87fc3":"code","31001481":"code","d7e852a0":"code","a8ce5bad":"code","a980253a":"code","820f7f64":"markdown","74179c3a":"markdown","594d2d8f":"markdown","cf3b148a":"markdown","338379d2":"markdown","1d3bb185":"markdown","290e9704":"markdown","d60a3cf6":"markdown","eded843e":"markdown","70b5407a":"markdown"},"source":{"8a814373":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport numpy as np","e0ed4318":"df = pd.read_csv(\"..\/input\/tictactoe-endgame-dataset-uci\/tic-tac-toe-endgame.csv\")","20ce9158":"df['V1'],v1 = pd.factorize(df['V1'], sort=True)\ndf['V2'],v2 = pd.factorize(df['V2'], sort=True)\ndf['V3'],v3 = pd.factorize(df['V3'], sort=True)\ndf['V4'],v4 = pd.factorize(df['V4'], sort=True)\ndf['V5'],v5 = pd.factorize(df['V5'], sort=True)\ndf['V6'],v6 = pd.factorize(df['V6'], sort=True)\ndf['V7'],v7 = pd.factorize(df['V7'], sort=True)\ndf['V8'],v8 = pd.factorize(df['V8'], sort=True)\ndf['V9'],v9 = pd.factorize(df['V9'], sort=True)\ndf['V10'],v10 = pd.factorize(df['V10'], sort=True)","163e8baa":"X = df.drop('V10',axis=1).to_numpy()\ny = df['V10'].to_numpy()","a7a87fc3":"X_train, X_val, y_train, y_val = train_test_split(X, y, random_state=1)\ninput_shape = [X_train.shape[1]]","31001481":"model = keras.Sequential([\n    # input layer\n    layers.BatchNormalization(input_shape=input_shape),\n\n    # hidden layer 1\n    layers.Dense(units=128, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.3),\n    layers.Dense(units=64, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.3),\n\n    # output layer\n    layers.Dense(units=32, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.3),\n    layers.Dense(units=1, activation='sigmoid')\n])\n\nmodel.summary()","d7e852a0":"model.compile(\n    optimizer=Adam(learning_rate=0.001),\n    loss='binary_crossentropy',\n    metrics=['binary_accuracy']\n)\n\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_val, y_val),\n    batch_size=512,\n    epochs=600,\n    # callbacks=[early_stopping]\n)","a8ce5bad":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"Learning Curve: Loss over Epochs\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend(['Training Loss', 'Validation Loss'])\n\nhistory_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot(title=\"Learning Curve: Accuracy over Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.legend(['Training Accuracy', 'Validation Accuracy'])","a980253a":"y_pred = model.predict(X_train[:10], verbose=0)\nrounded_pred = np.around(y_pred).astype(int).flatten()\ny_actual = y_train[:10]\n\nprint(\"Prediction:\", rounded_pred)\nprint(\"Actual:    \", y_actual)","820f7f64":"## **Splitting X and y and defining input shape**","74179c3a":"## **Importing dataset**","594d2d8f":"## **Compiling and training model**","cf3b148a":"# **TicTacToe UCI Tensorflow with Keras**\n## **Author's Notes:**\nSupposedly my final project for the 1st semester for Introduction to Artificial Intelligence at WVSU-CICT, but I don't know what this dataset is and what it's for. It's still a great practice for building a binary classification neural network though.","338379d2":"## **Testing model on untrained data (predicting)**","1d3bb185":"## **Importing modules**","290e9704":"## **Defining X and y**","d60a3cf6":"## **Cleaning up dataset**\nConverting from categorical to numerical value","eded843e":"## **Show loss and accuracy from training and validation**","70b5407a":"## **Defining the model**"}}