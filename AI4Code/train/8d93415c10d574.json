{"cell_type":{"6a1cc739":"code","0136927d":"code","c700cec5":"code","0cf35066":"code","c0ef3a9f":"code","80d3512d":"code","987e21c6":"code","628b2c45":"code","4a3f1b37":"code","707ff8c1":"code","b2ff7cff":"code","4aa375f8":"code","83d7e9be":"code","c84801f0":"code","9fe665f0":"code","6bdc856e":"code","6fcd3e38":"code","78e0ea77":"code","fc07e9b9":"code","060a40af":"code","49525875":"code","33a0a67d":"code","d1e4b50e":"code","cf401a4a":"code","53f52c62":"code","ec726172":"code","e03a280e":"markdown","c8fab0af":"markdown","b9527dde":"markdown","ecddda17":"markdown","4d190ad4":"markdown","6bae45b8":"markdown","21e7e189":"markdown","dc945d98":"markdown","84592c1e":"markdown","915c34bd":"markdown"},"source":{"6a1cc739":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0136927d":"df=pd.read_csv('\/kaggle\/input\/dementia-prediction-dataset\/dementia_dataset.csv')","c700cec5":"import warnings\nwarnings.filterwarnings('ignore')","0cf35066":"df","c0ef3a9f":"df['Group'].unique()","80d3512d":"df=df.replace('Nondemented', 0).replace('Demented', 1).replace('Converted',2)","987e21c6":"df.head()","628b2c45":"df1=df.drop(['Subject ID', 'MRI ID'], axis=1)","4a3f1b37":"df1= pd.get_dummies(df1)","707ff8c1":"df1","b2ff7cff":"import matplotlib.pyplot as plt\nimport seaborn as sns","4aa375f8":"fig, ax = plt.subplots(figsize=(15,15))\nsns.heatmap(df1.corr(),annot=True)","83d7e9be":"sns.pairplot(df1,hue='Group',size=2)","c84801f0":"plt.figure(figsize=(12, 12))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df1['Age'],y=df1['SES'],hue=df1['CDR'],size=df1['EDUC'],data=df1,sizes=(50,500))\nplt.setp(ax.get_xticklabels(), rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","9fe665f0":"plt.figure(figsize=(12, 12))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df1['MMSE'],y=df1['nWBV'],hue=df1['CDR'],size=df1['ASF'],data=df1,sizes=(50,500))\nplt.setp(ax.get_xticklabels(), rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","6bdc856e":"plt.figure(figsize=(12, 12))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df1['eTIV'],y=df1['ASF'],hue=df1['Group'],size=df1['CDR'],data=df1,sizes=(50,500))\nplt.setp(ax.get_xticklabels(), rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","6fcd3e38":"pip install pycaret","78e0ea77":"from pycaret.classification import *","fc07e9b9":"exp1 = setup(df1, target = 'Group', ignore_features = None,silent=True)","060a40af":"compare_models()","49525875":"lgbm =  create_model('lightgbm')","33a0a67d":"tuned_lgbm=tune_model(lgbm)","d1e4b50e":"plot_model(tuned_lgbm)","cf401a4a":"interpret_model(tuned_lgbm)","53f52c62":"plot_model(tuned_lgbm, plot = 'confusion_matrix')","ec726172":"finalize_lgbm = finalize_model(tuned_lgbm)\npredictions = predict_model(finalize_lgbm, data=df1)\npredictions.head(30)","e03a280e":"# 2. Visualization","c8fab0af":"# Age, SES and EDUC by CDR","b9527dde":"# eTIV, ASF and CDR by Group","ecddda17":"# 'Label' shows the predictions.","4d190ad4":"# 0. Preprocessing","6bae45b8":"# 5. Finalize the model","21e7e189":"# MMSE, nWBV and ASF by CDR","dc945d98":"# I chose Light Gradient Boosting Machine.","84592c1e":"# 3. Select the model by PyCaret","915c34bd":"# 4. Create and tune the model"}}