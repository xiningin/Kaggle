{"cell_type":{"746a14c3":"code","77fd9561":"code","34aa579a":"code","98589f56":"code","2256d0d7":"code","ea738280":"code","be798ee7":"code","f8826462":"code","d91cf0e1":"code","b772fe47":"code","7667e7ad":"code","b13c9982":"code","ef2b7f1f":"code","ca18ffc4":"code","523542c1":"code","d8c072ea":"code","f5cef044":"code","bbd01f20":"code","2aa830ea":"code","cf3e5b14":"code","61f012cf":"code","c1f27caa":"code","191181bc":"code","5787fc87":"code","17f18ab4":"code","1b94499f":"code","c9df2328":"code","c1b35c12":"markdown","f5cc0962":"markdown","346833f4":"markdown","b4bd641a":"markdown","27cf30a0":"markdown","2789ffff":"markdown","ab89b8f4":"markdown"},"source":{"746a14c3":"import tensorflow as tf","77fd9561":"# We install imageio to make GIFs\n!pip install imageio","34aa579a":"# The glob module finds all the pathnames matching a specified pattern according to the rules used\nimport glob\n# imageio is a Python library that provides an easy interface to read and write a wide range of image data,\nimport imageio\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport os\n\n# PIL is Python Imaging Library which is a free and open-source additional library for the Python programming language \n# that adds support for opening, manipulating, and saving many different image file formats.\nimport PIL\nfrom PIL import Image\nfrom tensorflow.keras import datasets, layers, models\nimport time\nimport random\n%load_ext tensorboard\nfrom IPython import display\n\n%matplotlib inline","98589f56":"(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()\ntrain_images, test_images = train_images \/ 255.0, test_images \/ 255.0","2256d0d7":"class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',\n               'dog', 'frog', 'horse', 'ship', 'truck']\n\nplt.figure(figsize=(10,10))\nfor i in range(4):\n    plt.subplot(1,4,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i][0]])\nplt.show()","ea738280":"train_images = train_images.reshape(train_images.shape[0], 32, 32, 3).astype('float32')\ntrain_images = (train_images - 127.5) \/ 127.5 # Normalize the images to [-1, 1]","be798ee7":"BUFFER_SIZE = 120000\nBATCH_SIZE = 256","f8826462":"# Create batches of data and shuffle them.\ntrain_dataset = tf.data.Dataset.from_tensor_slices(train_images).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)","d91cf0e1":"# Let's make genrator model function\n\ndef make_generator_model():\n\n    model = tf.keras.Sequential()\n    model.add(layers.Dense(4*4*256, use_bias=False, input_shape=(100,)))\n    model.add(layers.LeakyReLU())\n\n\n    model.add(layers.Reshape((4, 4, 256)))\n    assert model.output_shape == (None, 4, 4, 256) \n\n\n    model.add(layers.Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same', use_bias=False))\n    assert model.output_shape == (None, 8, 8, 128) \n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Conv2DTranspose(64, (4, 4), strides=(2, 2), padding='same', use_bias=False))\n    assert model.output_shape == (None, 16, 16, 64) \n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n\n    model.add(layers.Conv2DTranspose(32, (4, 4), strides=(2, 2), padding='same', use_bias=False))\n    assert model.output_shape == (None, 32, 32, 32)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n\n    model.add(layers.Conv2DTranspose(3, (3, 3), strides=(1, 1), padding='same', \n                                     use_bias=False, activation='tanh')) \n    assert model.output_shape == (None, 32, 32, 3) \n\n    return model","b772fe47":"generator = make_generator_model()\n\nnoise = tf.random.normal([1, 100])\ngenerated_image = generator(noise, training=False)\n\nplt.imshow(generated_image[0, :, :, 0], cmap='gray')","7667e7ad":"def make_discriminator_model():\n    model = tf.keras.Sequential()\n    model.add(layers.Conv2D(64, (4, 4), strides=(2, 2), padding='same',\n                                     input_shape=[32, 32, 3]))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n \n    model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n \n    model.add(layers.Flatten())\n \n    model.add(layers.Dense(1))\n\n    return model","b13c9982":"discriminator = make_discriminator_model()\ndecision = discriminator(generated_image)\nprint (decision)","ef2b7f1f":"# This method returns a helper function to compute the cross entropy loss. (for Binary Classification)\ncross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)","ca18ffc4":"def discriminator_loss(real_output, fake_output):\n    real_loss = cross_entropy(tf.ones_like(real_output), real_output)\n    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)\n    total_loss = real_loss + fake_loss\n    return total_loss","523542c1":"def generator_loss(fake_output):\n    return cross_entropy(tf.ones_like(fake_output), fake_output)","d8c072ea":"# Use Adam as the Optimizer\ngenerator_optimizer = tf.keras.optimizers.Adam(1e-4)\ndiscriminator_optimizer = tf.keras.optimizers.Adam(1e-4)","f5cef044":"checkpoint_dir = '.\/training_checkpoints'\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt\")\ncheckpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,\n                                 discriminator_optimizer=discriminator_optimizer,\n                                 generator=generator,\n                                 discriminator=discriminator)","bbd01f20":"# Define the training loop\n\nEPOCHS = 10000\nnoise_dim = 100\nnum_examples_to_generate = 16\n\nseed = tf.random.normal([num_examples_to_generate, noise_dim])","2aa830ea":"@tf.function\ndef train_step(images):\n    noise = tf.random.normal([BATCH_SIZE, noise_dim])\n\n    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n      generated_images = generator(noise, training=True)\n\n      real_output = discriminator(images, training=True)\n      fake_output = discriminator(generated_images, training=True)\n\n      gen_loss = generator_loss(fake_output)\n      disc_loss = discriminator_loss(real_output, fake_output)\n\n    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)\n    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)\n\n    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))\n    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))","cf3e5b14":"# Create and save images\n\ndef generate_and_save_images(model, epoch, test_input):\n  predictions = model(test_input, training=False)\n\n  fig = plt.figure(figsize=(4,4))\n\n  for i in range(predictions.shape[0]):\n      plt.subplot(4, 4, i+1)\n      plt.imshow(predictions[i, :, :, 0] * 127.5 + 127.5, cmap='gray')\n      plt.axis('off')\n\n  plt.savefig('image_at_epoch_{:04d}.png'.format(epoch))\n  plt.show()\n","61f012cf":"def train(dataset, epochs):\n  for epoch in range(epochs):\n    start = time.time()\n\n    for image_batch in dataset:\n      train_step(image_batch)\n\n# Instantly create images for GIF.\n    display.clear_output(wait=True)\n    generate_and_save_images(generator,\n                             epoch + 1,\n                             seed)\n\n\n# It saves the model every 15 epoch passes\n    if (epoch + 1) % 15 == 0:\n      checkpoint.save(file_prefix = checkpoint_prefix)\n    \n\n # print the report on how much time it takes for each epoch\n    print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))\n\n# Generate after the last epoch is over.\n  display.clear_output(wait=True)\n  generate_and_save_images(generator,\n                           epochs,\n                           seed)\n","c1f27caa":"# # Model training\n%%time\ntrain(train_dataset, EPOCHS)","191181bc":"# Restore the last checkpoint.\ncheckpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))","5787fc87":"# Create GIF\n# Displays a single image using epoch numbers.\n\ndef display_image(epoch_no):\n  return PIL.Image.open('image_at_epoch_{:04d}.png'.format(epoch_no))","17f18ab4":"display_image(EPOCHS)","1b94499f":"# Create a GIF animation using images saved during training with imageio.\n\nanim_file = 'dcganwithcifar10.gif'\n\nwith imageio.get_writer(anim_file, mode='I') as writer:\n  filenames = glob.glob('image*.png')\n  filenames = sorted(filenames)\n  last = -1\n  for i,filename in enumerate(filenames):\n    frame = 2*(i**0.5)\n    if round(frame) > round(last):\n      last = frame\n    else:\n      continue\n    image = imageio.imread(filename)\n    writer.append_data(image)\n  image = imageio.imread(filename)\n  writer.append_data(image)\n\nimport IPython\nif IPython.version_info > (6,2,0,''):\n  display.Image(filename=anim_file)","c9df2328":"# If you are working at Colab, you can download the animation from the code below:\n\ntry:\n  from google.colab import files\nexcept ImportError:\n  pass\nelse:\n  files.download(anim_file)","c1b35c12":"# DCGAN with Cifar10 Data","f5cc0962":"Let's create an image using a generator that hasn't been trained yet.","346833f4":"## Creating the model\nGenerator and Discriminator are defined using [Keras Sequential API] \n","b4bd641a":"### Experiment utils (RUN ME!)","27cf30a0":"### Save checkpoint\nThis notebook shows you how to save and restore models that can be useful in cases where long-running training is disrupted.","2789ffff":"### Model Traning","ab89b8f4":"# Please give an upvoe if you feel it is useful\n\u200b\n### plaese check other notebooks \n\u200b\n* [DCGAN with MNIST ](https:\/\/www.kaggle.com\/joshuajhchoi\/wgan-gp-with-mnist-for-absolute-beginners)\n\u200b\n* [DCGAN with Fashion MNIST](https:\/\/www.kaggle.com\/joshuajhchoi\/dcgan-with-fashion-mnist-for-absolute-beginners)\n\u200b\n* [DCGAN with parasitized cell images](https:\/\/www.kaggle.com\/joshuajhchoi\/dcgan-with-medical-images-for-absolute-beginners)\n\u200b\n* [CGAN with MNIST](https:\/\/www.kaggle.com\/joshuajhchoi\/cgan-with-mnist-for-absolute-beginners)\n\u200b\n* [WGAN with MNIST](http:\/\/https:\/\/www.kaggle.com\/joshuajhchoi\/wgan-with-fashion-mnist-for-absolute-beginners)\n\u200b\n* [WGAN-GP with MNIST](https:\/\/www.kaggle.com\/joshuajhchoi\/wgan-gp-with-mnist-for-absolute-beginners)"}}