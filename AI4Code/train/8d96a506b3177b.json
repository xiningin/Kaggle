{"cell_type":{"484b2c7c":"code","a98ce57d":"code","6ef591d2":"code","d206fea3":"code","36aa9282":"code","56f24144":"code","5b0a30ae":"code","c03f10f2":"code","d95a7517":"code","26ef6a70":"code","68705ad2":"code","5ad8ab08":"code","75b5988c":"code","53e671c8":"code","268ff546":"code","a3a3ae8d":"code","88bfe751":"code","d60d99be":"code","77e12827":"code","6b41c6db":"code","56df8c7e":"code","c936519e":"code","ec5526c4":"code","b13847dc":"code","45f99d1b":"code","9852013b":"code","8d2e7468":"markdown","040422df":"markdown","ab16a7c2":"markdown","973c8b5b":"markdown","f1252ee0":"markdown","330a5ea8":"markdown","df4bd22c":"markdown","696a923a":"markdown","4aca1464":"markdown","c0e3e85a":"markdown","87e4d84d":"markdown","f250e694":"markdown","da7fb5cf":"markdown","a35b007a":"markdown","e3bdd50f":"markdown","bbff608e":"markdown","09014721":"markdown","eb150904":"markdown","3a629ece":"markdown","4375e6b5":"markdown","bc1aeac8":"markdown","ba2c4dc5":"markdown","4550aad0":"markdown","ddbf3751":"markdown","3f32f75a":"markdown","18eb3b5b":"markdown","8afafb1b":"markdown","f1c2af28":"markdown","ce1d743d":"markdown","bd61f98b":"markdown","6db90419":"markdown"},"source":{"484b2c7c":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport json","a98ce57d":"# Load our data and print out a few lines.\ndf = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ndf.head()","6ef591d2":"# Perform operations to inspect data\n# types and look for instances of missing or possibly errant data.\ndf.isnull().sum()","d206fea3":"df.drop(['homepage','tagline','id'], axis = 1,inplace = True) ","36aa9282":"df.shape","56f24144":"df['runtime'].fillna(df['runtime'].mean(),inplace=True)","5b0a30ae":"df.dropna(inplace = True)","c03f10f2":"df.isnull().sum()","d95a7517":"df.shape","26ef6a70":"df.duplicated().sum()","68705ad2":"df.info()","5ad8ab08":"df['release_date'] = pd.to_datetime(df['release_date'])\ndf['year'] = df['release_date'].dt.year\ndf['year']","75b5988c":"# exploare columns\ndf.head(1)","53e671c8":"# showing some statistcs\ndf.describe()","268ff546":"def get_insights_popularity(year_1 = 0 , year_2 = 0) :\n    # this function will give us the most popular genres \n    # Parameters :\n    #    year_1 : int ( year between 1960 to 2016)\n    #           if you not give any number the function will give you insights of all years\n    #           if you give a specific year the function will give you insights of this years\n    #    year_2 : int (year between year_1 to 2016)\n    #            if you give a specific year the function will give you insights between year_1 and year_2\n    sorted_popularity = df.sort_values(by = 'popularity',ascending= False)\n    if year_2 == 0 :\n        year_2 = year_1\n    if year_1 != 0 :\n        sorted_popularity.query('year >= @year_1 and year <= @year_2',inplace = True)\n    plt.subplots(figsize=(10,8))\n    plt.gca().invert_yaxis()\n    plt.barh(sorted_popularity['title'].head(10),sorted_popularity['popularity'].head(10))","a3a3ae8d":"get_insights_popularity()","88bfe751":"get_insights_popularity(2013)","d60d99be":"get_insights_popularity(2013,2015)","77e12827":"def get_insights_genres(year_1 = 0 , year_2 = 0) :\n    # this function will give us the most popular genres \n    # Parameters :\n    #    year_1 : int ( year between 1960 to 2016)\n    #           if you not give any number the function will give you insights of all years\n    #           if you give a specific year the function will give you insights of this years\n    #    year_2 : int (year between year_1 to 2016)\n    #            if you give a specific year the function will give you insights between year_1 and year_2\n    \n    sorted_popularity = df.sort_values(by = 'popularity',ascending= False)\n    if year_2 == 0 :\n        year_2 = year_1\n    if year_1 != 0 :\n        sorted_popularity.query('year >= @year_1 and year <= @year_2',inplace = True)\n    z = list()\n    print(sorted_popularity.shape)\n    counter = 0\n    for i in sorted_popularity['genres'] :\n        i = json.loads(i)\n        for dic in i :\n            dict(dic)\n        z.append(dic.get('name'))\n        counter +=1\n        if counter >=sorted_popularity['genres'].shape[0]\/2 :\n            break\n    unique_genres = set(z)\n    counts = dict()\n    for i in z:\n      counts[i] = counts.get(i, 0) + 1 \n    plt.subplots(figsize=(10,8))\n    plt.gca().invert_yaxis()\n    plt.barh(list(counts.keys()),list(counts.values()))","6b41c6db":"get_insights_genres()","56df8c7e":"get_insights_genres(2008)","c936519e":"get_insights_genres(2010,2012)","ec5526c4":"def companies_make_moveis_with_high_revenues() :\n    sorted_revenues = df.sort_values(by = 'revenue',ascending= False)\n    low_revenues = df[df['revenue'] < df['revenue'].median()]\n    high_revenues = df[df['revenue'] >= df['revenue'].median()]\n    z = list()\n    print(high_revenues.shape)\n    counter = 0\n    for i in high_revenues['production_companies'] :\n        i = json.loads(i)\n        for dic in i :\n            dict(dic)\n        z.append(dic.get('name'))\n    unique_genres = set(z)\n    counts = dict()\n    for i in z:\n      counts[i] = counts.get(i, 0) + 1 \n    s = pd.DataFrame(list(counts.values()),list(counts.keys()),columns=['counts'])\n    s= s.sort_values(by='counts',ascending= False)\n    print(s)","b13847dc":"companies_make_moveis_with_high_revenues()","45f99d1b":"low_revenues = df[df['revenue'] < df['revenue'].median()]\nhigh_revenues = df[df['revenue'] >= df['revenue'].median()]\nhigh_revenues['budget'].mean() , low_revenues['budget'].mean()","9852013b":"plt.scatter(df['budget'],df['revenue'])","8d2e7468":"<a id='intro'><\/a>\n## Introduction\n\n> This data set contains information about 5000 movies collected from The Movie Database (TMDb),including user ratings and revenue.\n\n### What we can do ?\n> We can exploare this dataset and asking some important questions that can be answered given this information \n like..\n> <ul> \n    <li>Which genres are most popular from year to year ?<\/li>\n    <li>Which movie have high popularity over this years ?<\/li>\n    <li>What kinds of properties are associated with movies that have high revenues ?<\/li>\n    <li>Is there a relation between budget and revenue ?<\/li>\n  <\/ul>","040422df":"# Project: TMDB 5000 Movie Dataset\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#packages\">Import Packages<\/a><\/li>    \n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","ab16a7c2":"## Which Genres have high popularity in specific year or period time ?","973c8b5b":"from this slight statistics <br>\n* I think there is a postive correlation between budget spend and revenue\n* Also this is amazing to have at least one movie with high vote_average\n* Its a little weird to have a movie with 0 run time","f1252ee0":"Also we have not any duplicates ","330a5ea8":"Now we have a clean dataset we can work on to drive some questons and answer it freely <br> let's explore our data ","df4bd22c":"### Is there a relation between budget and revenue ?","696a923a":"We can add a new column \"year\" to make it easier while working with date","4aca1464":"Now for sure the more budget the more revenues <br> Also Warner Bros company make a lot of revenues i think this is the best company","c0e3e85a":"## Which Genres have high popularity over all years ?","87e4d84d":"Now we can make sure we have not any missing data","f250e694":"There is two missing data in runtime columns we can fill it by the avarage runtime","da7fb5cf":"There is a lot if missing data in the coloumn \"**homepage**\" and \"**tagline**\" but dont worry we can drop this columns because we don't need it in analysis.\n<br>also we can drop any columns or rows don't give us valuable information and fill the missing data that can use in analysis.","a35b007a":"Then drop the rest of rows with missing data","e3bdd50f":"<a id='packages'><\/a>\n## Import Packages","bbff608e":"## Which movie have high popularity over all years ?","09014721":"### What kinds of properties are associated with movies that have high revenues ?<br> or Is there a relation between budget and revenue ?","eb150904":"there is a positive correlation between budget and revenue","3a629ece":"the most popular movie from 2013 to 2015 is **Minions**","4375e6b5":"if you not give the function any parameter the function will give you insights of all years","bc1aeac8":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n> Now let's try to exploare columns and variables and show some statistics\n \n","ba2c4dc5":"> In this section we will import necessary packages and vistualization packages to make the process enjoyable and give us valuable insights","4550aad0":"the most popular movie in 2013 is **Frozen**","ddbf3751":"We can take a look at datarypes and edit it if needed ","3f32f75a":"**Minions** movie have the most popularity all years","18eb3b5b":"### How we can find Movies are most popular from all years or specific year or period time ?\n","8afafb1b":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n> In this section of the report, We will load the data, check for cleanliness, and then trim and clean our dataset for analysis.","f1c2af28":"<a id='conclusions'><\/a>\n## Conclusions\n\n> we analyzed this amazing dataset and find the best movies in each year and minions movie is the best movie in all years\n> Also the popular genres is thriller , drama , romance \n> there is a poisitive correlation between budget and revenues\n## Limitations\n\n> we dropped some rows maybe will affect on insights bud dont worry this is only about 5 columns","ce1d743d":"## Which movie have the most popularity in specific year or in period time ?","bd61f98b":"### How we can find Genres are most popular from all years or specific year or period time ?","6db90419":"Here we can find which movie have the most popularity in specific year or for example between 2000 to 2015"}}