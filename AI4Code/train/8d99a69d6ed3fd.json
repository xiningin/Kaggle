{"cell_type":{"e1900ba0":"code","993985b2":"code","c338985f":"code","ce9f36ea":"code","82e76e15":"code","74b2a43f":"code","6a0984fa":"code","08799e6c":"code","4b0bd62a":"code","4d6d09e1":"code","172fe43d":"code","9df3bd5c":"code","ff6d27e3":"code","13475aa6":"code","6a985dea":"markdown","089b1f8c":"markdown","7f4c4a54":"markdown","14b886c1":"markdown","e2b47216":"markdown","77dc2d27":"markdown","56d853df":"markdown"},"source":{"e1900ba0":"import numpy as np\nimport matplotlib.pyplot as plt","993985b2":"X_train = np.arange(0,100,0.5) \ny_train = np.sin(X_train)\n\nX_test = np.arange(100,200,0.5) \ny_test = np.sin(X_test)\n\nn_features = 1\n\ntrain_series = y_train.reshape((len(y_train), n_features))\ntest_series  = y_test.reshape((len(y_test), n_features))","c338985f":"fig, ax = plt.subplots(1, 1, figsize=(15, 4))\nax.plot(X_train,y_train, lw=3, label='train data')\nax.plot(X_test, y_test,  lw=3, label='test data')\nax.legend(loc=\"lower left\")\nplt.show();","ce9f36ea":"from keras.preprocessing.sequence import TimeseriesGenerator\n\nlook_back  = 20\n\ntrain_generator = TimeseriesGenerator(train_series, train_series,\n                                      length        = look_back, \n                                      sampling_rate = 1,\n                                      stride        = 1,\n                                      batch_size    = 10)\n\ntest_generator = TimeseriesGenerator(test_series, test_series,\n                                      length        = look_back, \n                                      sampling_rate = 1,\n                                      stride        = 1,\n                                      batch_size    = 10)","82e76e15":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\nn_neurons  = 4\nmodel = Sequential()\nmodel.add(LSTM(n_neurons, input_shape=(look_back, n_features)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\n\nmodel.fit(train_generator,epochs=300, verbose=0)","74b2a43f":"test_predictions  = model.predict(test_generator)","6a0984fa":"x = np.arange(110,200,0.5)\nfig, ax = plt.subplots(1, 1, figsize=(15, 5))\nax.plot(X_train,y_train, lw=2, label='train data')\nax.plot(X_test,y_test, lw=3, c='y', label='test data')\nax.plot(x,test_predictions, lw=3, c='r',linestyle = ':', label='predictions')\nax.legend(loc=\"lower left\")\nplt.show();","08799e6c":"extrapolation = list()\nseed_batch    = y_test[:look_back].reshape((1,look_back, n_features))\ncurrent_batch = seed_batch\n\n# extrapolate the next 180 values\nfor i in range(180):\n    predicted_value = model.predict(current_batch)[0]\n    extrapolation.append(predicted_value) \n    current_batch = np.append(current_batch[:,1:,:],[[predicted_value]],axis=1)","4b0bd62a":"x = np.arange(110,200,0.5)\nfig, ax = plt.subplots(1, 1, figsize=(15, 5))\nax.plot(X_train,y_train, lw=2, label='train data')\nax.plot(X_test,y_test, lw=3, c='y', label='test data')\nax.plot(x,extrapolation, lw=3, c='r',linestyle = ':', label='extrapolation')\nax.legend(loc=\"lower left\")\nplt.show();","4d6d09e1":"X_train = np.arange(0,50,0.5) \ny_train = np.sin(X_train) + np.sin(3*X_train)\/3 + np.sin(5*X_train)\/5\n\nX_test  = np.arange(50,100,0.5) \ny_test  = np.sin(X_train) + np.sin(3*X_train)\/3 + np.sin(5*X_train)\/5","172fe43d":"train_series = y_train.reshape((len(y_train), n_features))\ntest_series  = y_test.reshape((len(y_test), n_features))\nfig, ax = plt.subplots(1, 1, figsize=(15, 4))\nax.plot(X_train,y_train, lw=2, label='train data')\nax.plot(X_test, y_test,  lw=2, label='test data')\nax.legend(loc=\"lower left\")\nplt.show();","9df3bd5c":"train_generator = TimeseriesGenerator(train_series, train_series,\n                                      length        = look_back, \n                                      sampling_rate = 1,\n                                      stride        = 1,\n                                      batch_size    = 10)\n\ntest_generator = TimeseriesGenerator(test_series, test_series,\n                                      length        = look_back, \n                                      sampling_rate = 1,\n                                      stride        = 1,\n                                      batch_size    = 10)\n\nmodel.fit(train_generator,epochs=300, verbose=0)","ff6d27e3":"test_predictions  = model.predict(test_generator)\nx = np.arange(60,100,0.5)\nfig, ax = plt.subplots(1, 1, figsize=(15, 5))\nax.plot(X_train,y_train, lw=2, label='train data')\nax.plot(X_test,y_test, lw=3, c='y', label='test data')\nax.plot(x,test_predictions, lw=3, c='r',linestyle = ':', label='predictions')\nax.legend(loc=\"lower left\")\nplt.show();","13475aa6":"extrapolation = list()\nseed_batch    = y_test[:look_back].reshape((1,look_back, n_features))\ncurrent_batch = seed_batch\n\n# extrapolate the next 180 values\nfor i in range(400):\n    predicted_value = model.predict(current_batch)[0]\n    extrapolation.append(predicted_value) \n    current_batch = np.append(current_batch[:,1:,:],[[predicted_value]],axis=1)\n\n# plot\nx = np.arange(60,260,0.5)\nfig, ax = plt.subplots(1, 1, figsize=(15, 5))\nax.plot(X_train,y_train, lw=2, label='train data')\nax.plot(X_test,y_test, lw=3, c='y', label='test data')\nax.plot(x,extrapolation, lw=1, c='r', label='extrapolation')\nax.legend(loc=\"lower left\")\nplt.show();","6a985dea":"### Extrapolation","089b1f8c":"## Sine wave + 3rd harmonic + 5th harmonic\nLet us complicate things a little by now adding the third and fifth harmonics to the input data","7f4c4a54":"# LSTM RNN time series prediction: univariate sine wave example","14b886c1":"### Extrapolation","e2b47216":"## Related reading\n* [Sepp Hochreiter and J\u00fcrgen Schmidhuber \"Long Short-Term Memory\", Neural Computation **9** pp. 1735-1780 (1997)](https:\/\/www.mitpressjournals.org\/doi\/pdf\/10.1162\/neco.1997.9.8.1735)\n* [Long short-term memory](https:\/\/en.wikipedia.org\/wiki\/Long_short-term_memory) Wikipedia\n* [keras LSTM layers](https:\/\/keras.io\/api\/layers\/recurrent_layers\/lstm\/)\n* [keras TimeseriesGenerator](https:\/\/keras.io\/api\/preprocessing\/timeseries\/)","77dc2d27":"### Prediction","56d853df":"### Prediction"}}