{"cell_type":{"87e4ba73":"code","e89f286f":"code","14193a61":"code","141b06d8":"code","13f6a93b":"code","8b880aa2":"code","bc61ee1d":"code","87ffd08d":"code","e54ac748":"code","a50dac63":"code","152dbed2":"code","ccbc0a4d":"code","8ac6908a":"code","9b092903":"code","669fcf1f":"code","8b0b9cb0":"code","fd2e82b8":"code","cc878eb1":"code","9de4a47e":"code","91a7f62a":"code","00540e45":"code","f742dc39":"code","a23277f6":"code","37ff05fd":"code","2386baf4":"code","635f8b5f":"code","d3850864":"code","e9122833":"code","201432d9":"code","4425df08":"code","47165cfd":"code","2f16e368":"code","bd69ae89":"code","d27fe4ae":"code","13e60e6d":"code","2c4b4a1d":"code","f50d0b0c":"code","3e5c91b8":"code","f3edc24f":"code","10396c69":"code","2d2b78b3":"code","90c17a55":"code","0cf514ac":"code","ea273146":"code","851611ca":"code","ae9f74fc":"code","2ab5d56c":"code","e89596b6":"code","5822974b":"code","3e000f09":"code","3413a41d":"code","50b461c1":"code","ee2afe87":"code","3a72944d":"code","8dbc7d6d":"code","78a84af3":"code","892b67f4":"code","2554c326":"code","ba82ddc4":"code","7356142f":"code","dc91c1cc":"code","8c5db7d1":"code","44854d35":"code","78f5bdb0":"code","2d02744b":"code","6a2a1e48":"code","3577d9e5":"code","06685db8":"code","dc14cbaf":"code","10f3ffc4":"code","e6ddf755":"markdown","59fe4cb5":"markdown","986553cd":"markdown","4b0373b3":"markdown","e380d80c":"markdown","31f07307":"markdown","4a2fcd64":"markdown","adbdb606":"markdown","c65e8f3a":"markdown","b420692b":"markdown","b195eed0":"markdown","b23d3cce":"markdown","ca569d97":"markdown","42993016":"markdown","f265140d":"markdown","12056f0c":"markdown","4797f50b":"markdown","102def01":"markdown","e32ffae0":"markdown","95e3c788":"markdown","8846fada":"markdown","122450be":"markdown","5158c6e0":"markdown","43be691d":"markdown","8655c3a7":"markdown","d8e7b225":"markdown","8c134ca7":"markdown","1d3554b5":"markdown","7e8274f3":"markdown","01627c4d":"markdown","4c95e92f":"markdown","cb409026":"markdown","d677292a":"markdown","cc7772d9":"markdown","4ca5cdfe":"markdown","1ae99377":"markdown","93ece08d":"markdown","1db5e96a":"markdown","d214357b":"markdown","1cca505d":"markdown","cc5e583d":"markdown","ba73cd9d":"markdown","d7190664":"markdown","232d9ddd":"markdown","c59438b2":"markdown","5b61735e":"markdown","642352c1":"markdown","b2df6aa5":"markdown","406f9e15":"markdown","ee7d3d9c":"markdown"},"source":{"87e4ba73":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport datetime","e89f286f":"sns.set_style(\"whitegrid\")\nsns.set(rc={'figure.figsize':(10,6)})","14193a61":"df = pd.read_csv('..\/input\/metacritic-videogames-data\/games-data.csv')\ndf.head()","141b06d8":"# Create new columns: r-month, r-year, r-dow (day of week)\n\ndef convert_year(obj):\n    dto = datetime.datetime.strptime(obj, '%B %d, %Y')\n    return dto.year\n\ndef convert_month(obj):\n    dto = datetime.datetime.strptime(obj, '%B %d, %Y')\n    return dto.month\n\ndef convert_dow(obj):\n    dto = datetime.datetime.strptime(obj, '%B %d, %Y')\n    return dto.weekday()\n\ndef convert_day(obj):\n    dto = datetime.datetime.strptime(obj, '%B %d, %Y')\n    return dto.day\n\ndf['year'] = df['r-date'].apply(convert_year)\ndf['month'] = df['r-date'].apply(convert_month)\ndf['day'] = df['r-date'].apply(convert_day)\ndf['dow'] = df['r-date'].apply(convert_dow)","13f6a93b":"df.head()","8b880aa2":"# Transform the dow column to strings\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\n\ndf['dow'] = df['dow'].map(dmap)\n\ndf.head()","bc61ee1d":"# First, I want to turn the user score column to a numeric value and multiply by 10 to compare with (meta)score\n\n# Make a copy of the df to keep the original\n\ndf_games = df.copy()","87ffd08d":"# Dealing with games not yet released (have a 'tbd' string as user score)\ndf_games['user score'] = df_games['user score'].apply(lambda score: 0 if score == 'tbd' else score)\n\n# Transforming values to numeric type\ndf_games['user score'] = pd.to_numeric(df_games['user score'])\n\n# Get both scores in same scale\ndf_games['user score'] = df_games['user score']*10","e54ac748":"# Check distribution of scores:\nmean_score = df_games['score'].mean()\n\nfig = px.histogram(df_games, x=\"score\", title='Mean value: '+str(mean_score), opacity = 0.6)\n\nfig.add_shape(\n        # Mean value of score\n            type=\"line\",\n            x0=df_games['score'].mean(),\n            y0=0,\n            x1=df_games['score'].mean(),\n            y1=700,\n            line=dict(\n                color=\"darkblue\",\n                width=4\n            ),\n    )\n\n\nfig.show()","a50dac63":"# Distribution of user scores\nfig = px.histogram(df_games, x=\"user score\", opacity = 0.6)\nfig.show()","152dbed2":"mean_userscore = df_games[df_games['user score'] != 0.0]['user score'].mean()\n\nfig = px.histogram(df_games[df_games['user score'] != 0.0], x=\"user score\",\n                   title = 'Mean value: '+str(mean_userscore), opacity = 0.6)\n\nfig.add_shape(\n        # Mean value of score\n            type=\"line\",\n            x0=df_games[df_games['user score'] != 0.0]['user score'].mean(),\n            y0=0,\n            x1=df_games[df_games['user score'] != 0.0]['user score'].mean(),\n            y1=700,\n            line=dict(\n                color=\"darkblue\",\n                width=4\n            ),\n    )\n\nfig.show()","ccbc0a4d":"df_games['score_diff'] = df_games['score'] - df_games['user score']\n\ndf_games.head()","8ac6908a":"# Save the cleaned csv\n# df_games.to_csv('games-data-cleaned.csv', index=False)","9b092903":"mean_diff = df_games['score_diff'].mean()\n\nfig = px.histogram(df_games, x=\"score_diff\", title='Mean value: '+str(mean_diff), opacity = 0.6)\n\nfig.add_shape(\n        # Mean value of score\n            type=\"line\",\n            x0=df_games['score_diff'].mean(),\n            y0=0,\n            x1=df_games['score_diff'].mean(),\n            y1=700,\n            line=dict(\n                color=\"darkblue\",\n                width=4\n            ),\n    )\n\n\nfig.show()","669fcf1f":"mean_diff = df_games[df_games['user score'] != 0.0]['score_diff'].mean()\n\nfig = px.histogram(df_games[df_games['user score'] != 0.0],\n                   x=\"score_diff\",\n                   title='Mean value: '+str(mean_diff), opacity = 0.6)\n\nfig.add_shape(\n        # Mean value of score\n            type=\"line\",\n            x0=mean_diff,\n            y0=0,\n            x1=mean_diff,\n            y1=700,\n            line=dict(\n                color=\"darkblue\",\n                width=4\n            ),\n    )\n\n\nfig.show()","8b0b9cb0":"# How many unique platforms are there in our df:\nprint('Number of unique platforms: ', df_games['platform'].nunique())\nprint()\nprint('Unique platforms:')\nprint(df_games['platform'].unique())","fd2e82b8":"by_platform = df_games.groupby('platform')\n\nby_platform.mean()","cc878eb1":"# Let's flatten this multi-index df to deal with a traditional dataframe\nby_platform = by_platform[['score','user score','critics','users','year','month','day','score_diff']].mean().reset_index()\n\nby_platform.head()","9de4a47e":"# How does the mean score look like for each platform\nfig = px.bar(by_platform,\n             x='platform',\n             y='score',\n             color='user score').update_xaxes(categoryorder=\"total descending\")\nfig.show()","91a7f62a":"# How does the mean score look like for each platform (excluding PS5 and XboxX)\nddf = by_platform[by_platform['platform'] != 'XboxSeriesX']\nddf = ddf[ddf['platform'] != 'PlayStation5']\n\n\nfig = px.bar(ddf,\n             x='platform',\n             y='score',\n             color='user score').update_xaxes(categoryorder=\"total descending\")\nfig.show()","00540e45":"# How does the mean score look like for each platform (excluding PS5 and XboxX)\nddf = by_platform[by_platform['platform'] != 'XboxSeriesX']\nddf = ddf[ddf['platform'] != 'PlayStation5']\n\n\nfig = px.bar(ddf,\n             x='platform',\n             y='user score',\n             color='users').update_xaxes(categoryorder=\"total descending\")\nfig.show()","f742dc39":"fig = px.scatter(df_games, x='score', y='month',\n                 color='platform',\n                 hover_name='name')\nfig.show()","a23277f6":"def make_dist(df, feature):\n    '''\n    Function to plot a histogram of the distribution of 'feature' within 'df'.\n    '''\n    # Check distribution of feature:\n    mean_feat = df[feature].mean()\n    num_of_values = len(df)\n\n    fig = px.histogram(df, x=feature,\n                       title='Mean value of ' +feature+ ': ' +str(round(mean_feat,2))+\n                           ' - (with '+str(num_of_values)+' games)',\n                       opacity = 0.6)\n\n    fig.show()","37ff05fd":"make_dist(df_games[df_games['platform'] == 'Nintendo64'], 'score')","2386baf4":"make_dist(df_games[df_games['platform'] == 'PlayStation'], 'score')","635f8b5f":"plt.figure(figsize=(30,10))\nsns.boxplot(x='platform', y = 'score', data = df_games)\nplt.xticks(rotation=45);","d3850864":"games_per_platform = df_games.groupby(['platform']).size().reset_index(name='counts')","e9122833":"fig = px.bar(games_per_platform,\n             x='platform', y='counts').update_xaxes(categoryorder=\"total descending\")\nfig.show()","201432d9":"by_month = df_games.groupby('month')","4425df08":"fig = px.bar(by_month.size().reset_index(name='counts'), x='month', y='counts')\nfig.show()","47165cfd":"fig = px.bar(by_month['score'].mean().reset_index(), x='month', y='score')\nfig.show()","2f16e368":"by_dow = df_games.groupby('dow')\n\nfig = px.bar(by_dow.size().reset_index(name='counts'), x='dow', y='counts',\n             category_orders = {\n                                    'dow': ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']\n                                },\n                                labels = {\n                                    'dow': 'Day of the Week'\n                                })\nfig.show()","bd69ae89":"fig = px.bar(by_dow['score'].mean().reset_index(), x='dow', y='score')\nfig.show()","d27fe4ae":"by_year = df_games.groupby('year')\n\nfig = px.bar(by_year.size().reset_index(name='counts'), x='year', y='counts')\nfig.show()\n\n\nfig = px.bar(by_year['score'].mean().reset_index(),\n             x='year',\n             y='score')\nfig.show()","13e60e6d":"unique_years = sorted(df_games['year'].unique())\n\nyear_dict = {\n    'year':[],\n    '#_of_games':[],\n    'avg_score': [],\n    'avg_user_score': []\n}\n\nfor y in unique_years:\n    year_dict['year'].append(y)\n    year_dict['#_of_games'].append(len(df_games[df_games['year'] == y]))\n    year_dict['avg_score'].append(df_games[df_games['year'] == y]['score'].mean())\n    year_dict['avg_user_score'].append(df_games[df_games['year'] == y]['user score'].mean())\n    \ndf_peryear = pd.DataFrame(year_dict)\ndf_peryear","2c4b4a1d":"fig, axs = plt.subplots(3,1, figsize=(15,10))\nfig.suptitle('Per year Info')\n\n#avg_user_score\nsns.barplot(ax=axs[0], x='year', y ='avg_user_score', data = df_peryear)\naxs[0].set_title('Average user score')\n\n#avg_score\nsns.barplot(ax=axs[1], x='year', y ='avg_score', data = df_peryear)\naxs[1].set_title('Average score')\n\n# # of games\nsns.barplot(ax=axs[2], x='year', y ='#_of_games', data = df_peryear)\naxs[2].set_title('Number of released games')\n\n\nplt.subplots_adjust(hspace=0.5)\nplt.show()","f50d0b0c":"fig = px.histogram(df_games[df_games['user score'] != 0.0],\n                   x=\"users\",\n                   title='Number of user reviews', opacity = 0.6,\n                   nbins= 10)\nfig.show()","3e5c91b8":"fig = px.scatter(df_games[df_games['user score'] != 0.0],\n                 x=\"year\",\n                 y=\"users\",\n                 hover_name=\"name\")\nfig.show()","f3edc24f":"df_users = df_games[df_games['user score'] != 0.0]","10396c69":"fig = px.histogram(df_users[df_users['users'] < 20000],\n                   x=\"users\",\n                   title='Number of user reviews', opacity = 0.6)\nfig.show()","2d2b78b3":"fig = px.histogram(df_users[df_users['users'] < 1000],\n                   x=\"users\",\n                   title='Number of user reviews', opacity = 0.6)\nfig.show()","90c17a55":"fig = px.histogram(df_games,\n                   x=\"critics\",\n                   title='Number of critics reviews', opacity = 0.6,\n                   nbins= 50)\nfig.show()","0cf514ac":"df_games['players'] = df_games['players'].fillna('No info')","ea273146":"df_games['players'].nunique()","851611ca":"num_of_players = df_games.groupby(['players']).size().reset_index(name='counts')\n\nnum_of_players","ae9f74fc":"num_of_players.iloc[4]['players']","2ab5d56c":"df_games['players'] = df_games['players'].apply(lambda x: str(x).strip())","e89596b6":"num_of_players = df_games.groupby(['players']).size().reset_index(name='counts')\n\nnum_of_players.iloc[4]['players']","5822974b":"df_games['players'].replace(['1 Player', 'No Online Multiplayer'], ['1','1'], inplace=True)","3e000f09":"df_games['players'].replace(['2', '1-2', '2  Online'], ['2','2','2'], inplace=True)","3413a41d":"df_games['players'].replace(['1-3', '3  Online', 'Up to 3'], ['3','3','3'], inplace=True)","50b461c1":"df_games['players'].replace(['1-4', '4  Online', 'Up to 4'], ['4','4','4'], inplace=True)","ee2afe87":"df_games.loc[(df_games['players'] !='1') &\n         (df_games['players'] !='2') &\n         (df_games['players'] !='3') &\n         (df_games['players'] !='4') &\n         (df_games['players'] !='No info'),\n             'players'\n        ] = '>4'","3a72944d":"num_of_players = df_games.groupby(['players']).size().reset_index(name='counts')\n\nnum_of_players","8dbc7d6d":"fig = px.bar(num_of_players, x='players', y ='counts')\nfig.show()","78a84af3":"fig = px.histogram(df_games, x=\"score\", opacity = 0.6,\n                   facet_row='players',\n                   height=800, width=800)\nfig.show()","892b67f4":"fig = px.histogram(df_games, x=\"user score\", opacity = 0.6,\n                   facet_row='players',\n                   height=800, width=800)\nfig.show()","2554c326":"df_games['genre'].nunique()","ba82ddc4":"df_games['genre'] = df_games['genre'].apply(lambda s: s.lower().replace(' ',''))","7356142f":"df_games['genre_list'] = df_games['genre'].apply(lambda s: list(set(s.split(','))) )","dc91c1cc":"df_games.head()","8c5db7d1":"# Check games containing the 'action' genre\ndf_games.loc[df_games['genre'].str.contains('action')]","44854d35":"# Distribution os scores for the 'action' games\nmake_dist(df_games.loc[df_games['genre'].str.contains('action')], 'score')","78f5bdb0":"unique_genres = []\nfor i in df_games['genre_list']:\n    unique_genres += i\n    \nunique_genres = list(set(unique_genres))\nprint('Number of unique genres: ',len(unique_genres))","2d02744b":"# Saving the cleaned df to a csv\n# df_games.to_csv('games-data-cleaned.csv', index=False)","6a2a1e48":"genre_plat = {'genre':[]}\nfor p in df_games['platform'].unique():\n    genre_plat[p] = []\n\nfor g in unique_genres:\n    genre_plat['genre'].append(g)\n    \n    for p in df_games['platform'].unique():        \n        g_p = []\n        for i in df_games[df_games['platform'] == p]['genre_list']:\n            g_p += i\n            \n        genre_plat[p].append( g_p.count(g) )","3577d9e5":"df_genre_plat = pd.DataFrame(genre_plat)\ndf_genre_plat","06685db8":"# Saving the df to a csv file\n# df_genre_plat.to_csv('games-genre-platform.csv',index=False)","dc14cbaf":"choice = 'Switch'","10f3ffc4":"fig = px.bar(df_genre_plat[df_genre_plat[choice]!=0], x = 'genre', y =choice, title = choice).update_xaxes(categoryorder=\"total descending\")\nfig.show()","e6ddf755":"How many unique genres are there:","59fe4cb5":"Inspecting a value from this df:","986553cd":"For example, we can use our function to plot the distribution of scores for the Nintendo 64 and the Playstation:","4b0373b3":"It would be interesting to see the difference between `score` and `user score`.","e380d80c":"The Nintendo 64 has a great score averages and Stadia is just super weird (worst user score average but second best average meta score...). In this last graph, the color scale represents the avergae number of users reviewing the games. Notice the PS4 has a huge difference from the others. This is greatly due to the whole 'The Last of Us Part 2' review bombing incident...\n\nNow, let's do a quick visual of the distrribution of scores by month of release. We'll use the color scale for the platforms.","31f07307":"Let's only use games with **user score**:","4a2fcd64":"Let's see the distribution of critics.","adbdb606":"Now, let's group together the values '2', '1-2' and '2  Online'.","c65e8f3a":"Create a new column **genre_list** with a list of unique genres for each game.","b420692b":"There seems to be some white space after some names in `players` columns. Let's get rid of that before we run into trouble...","b195eed0":"That one weird outlier is The Last of Us Part II, which suffered a horrible review bombing (it has over 146K reviews).\n\nLet's see all games with non-zero user reviews and fewer than 20K users.","b23d3cce":"## Cleaning up the number of players","ca569d97":"Now we can investigate the distribution of scores for each number of players.","42993016":"By far, Tuesday is the day with more games released. This has a really interesting story dating way back with the release of Sonic The Hedgehog 2 and a little pun. If you're interested in the story behind this, there's a quick read [here](https:\/\/www.timesreporter.com\/article\/20141111\/BUSINESS\/311119974) about it.","f265140d":"After cleaning the genre info, we can check for the real number of unique genres:","12056f0c":"October is the month with more releases.\n\nLet's see the distribution of scores given on average by month:","4797f50b":"And the same for user score:","102def01":"### Get scores by given genre","e32ffae0":"Done!\n\nOk, we did some beginning cleaning. Let's get rid of some columns (55 is way to much to handle...).\n\nI am going to make a quick assumption (based on actually viewing most of the games in this situation) that all games in the `No Online Multiplayer` class are single player games. Let's map all these, and the ones with the `1 Player` value to simply '1':","95e3c788":"Converting everything in **genre** column to lower case with no white spaces will help out a lot in future applications.","8846fada":"## Distribution of scores by platform","122450be":"Chosing a platform, let's create a bar plot for the distribution of games by genre.","5158c6e0":"# EDA - by platform","43be691d":"The mean (meta)scores are very evenly distributed across months of release (which makes sense).","8655c3a7":"This graph is very difficult to read, something is off here. Let's try to find out more.","d8e7b225":"Tha's a lot...","8c134ca7":"This is far more consistent than with users.","1d3554b5":"## Number of Users and Critics reviewing games","7e8274f3":"And we can do the same analysis for the year of release:","01627c4d":"# Get info based on platform\/genre\n\nLet's create a single df with all platforms and genre info.","4c95e92f":"There are 55 unique values for the number of players. That's way too many.\nWe can see these values in a DataFrame to get a better understanding.","cb409026":"There are some `NaN` values in the `players` column. Let's replace them with 'No info'.","d677292a":"The great majority of games have less than 1000 reviewers, as expected.","cc7772d9":"## Exploring the genres","4ca5cdfe":"Let's create a new pandas DataFrame with the number of games per year and the average scores.","1ae99377":"We can see a box plot of the scores to get a better visual for all the platforms.","93ece08d":"Doing the same for the day of the week:","1db5e96a":"## Distribution of games by platform","d214357b":"## General release date info","1cca505d":"For 4 players: '1-4', '4  Online' and 'Up to 4':","cc5e583d":"That's it for now! Hope you guys enjoy the data and some starting EDA. \nHave fun all! Any feedback is welcome.\n\nDon't forget to check out the [dash app](https:\/\/games-dash.herokuapp.com\/) for interactive EDA and some recommendations!","ba73cd9d":"Finally, let's redo the groupby:","d7190664":"So, there are over 1200 games with no user score. We can filter these out before plotting the histogram:","232d9ddd":"We can exclude PS5 and XboxSeriesX because they have no user score (only critics have reviewed games in these platform by the day I started this EDA).","c59438b2":"Let's just do the same for the user score:","5b61735e":"Crudly (very!), we will put everything else on '>4' category...","642352c1":"Now, we can do a big visual with a lot of information on year of release.","b2df6aa5":"Much better! Looks surprisingly symmetrical.\n\nBefore exploring this further, let's do some more general EDA.","406f9e15":"Let's create a helper function to plot a distribution based on a filtered `df`:","ee7d3d9c":"For 3 players, we'll group: '1-3', '3  Online' and 'Up to 3':"}}