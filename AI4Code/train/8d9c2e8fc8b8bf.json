{"cell_type":{"08a57a25":"code","80f35460":"code","c1cca918":"code","1ab532d8":"code","23f8cfd8":"code","33633af8":"code","c025ff1e":"code","a899beb6":"code","37e4ab2e":"code","2bfaff46":"code","0fbec530":"code","207960e0":"code","75ead5dd":"code","6ca17e86":"code","747d5928":"code","0e1e3ea0":"code","84a23648":"code","84161f8f":"code","4d04f29e":"code","3514dab2":"code","1baeac27":"code","7ad33e7a":"code","bbe90322":"code","cd936806":"code","1c029df1":"code","9386f8a0":"code","23b138da":"code","03d47bee":"code","f2e1d42f":"code","7d7eedd7":"code","2d43c143":"code","26b3b374":"markdown","888467e4":"markdown","372dc901":"markdown","45d0e2fd":"markdown","14bf8eea":"markdown","bf14d27f":"markdown","0a9495a1":"markdown","6c115114":"markdown","de484fde":"markdown","08f7dd98":"markdown","f0b6d583":"markdown","f10d888a":"markdown"},"source":{"08a57a25":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport warnings\nwarnings.simplefilter(\"ignore\")","80f35460":"data = pd.read_csv(\"..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv\")\ndata.head()","c1cca918":"data.describe().T","1ab532d8":"data.groupby(\"Category\").describe()","23f8cfd8":"data[\"Length\"] = data[\"Message\"].apply(len)","33633af8":"data[\"Spam\"] = data[\"Category\"].apply(lambda x: 1 if x==\"spam\" else 0)","c025ff1e":"data.head()","a899beb6":"def custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length = 0)","37e4ab2e":"pal = [\"#5887FF\",\"#59ffa0\",\"#f6aa1c\"]\ncustom_palette(pal)","2bfaff46":"plt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x = data.Category, palette=pal)\nplt.show()","0fbec530":"plt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.histplot(x = data[\"Length\"], kde=True, color=pal[2], bins=20);\nplt.xlabel(\"Text Length\",fontsize=15);","207960e0":"# Maximum Length of a message\nprint(\"Maximum length of a message:\", data[\"Length\"].max())","75ead5dd":"plt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.histplot(x = data[\"Length\"], hue = data[\"Category\"], kde=True, bins=20);","6ca17e86":"from wordcloud import WordCloud\n\nspam_data = data[data.Category == 'spam']\n\nspam_texts = \" \".join(text for text in spam_data['Message'])\n\nspam_cloud = WordCloud(background_color = 'white', max_words=150, collocations = False).generate(spam_texts)\n\nplt.imshow(spam_cloud, interpolation='bilinear')\nplt.title('Most Common Spam Words', fontsize=20, y=1.1)\nplt.axis(\"off\");","747d5928":"ham_data = data[data.Category == 'ham']\n\nham_text = \" \".join(text for text in ham_data['Message'])\n\nham_cloud = WordCloud(background_color = 'white', max_words=150, collocations = False).generate(ham_text)\n\nplt.imshow(ham_cloud, interpolation='bilinear')\nplt.title('Most Common Ham Words', fontsize=20, y=1.1)\nplt.axis(\"off\");","0e1e3ea0":"# X data\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['Message']).toarray()","84a23648":"# y data\ny = data[\"Spam\"]\ny.head()","84161f8f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","4d04f29e":"from sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB()\nnb.fit(X_train, y_train)","3514dab2":"MultinomialNBScore = nb.score(X_test, y_test)\nprint(\"Accuracy obtained by Multinomial Naive Bayes model:\",MultinomialNBScore*100)","1baeac27":"from sklearn import metrics\n\ny_pred_nb = nb.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_nb))","7ad33e7a":"from sklearn.naive_bayes import BernoulliNB\nbnb = BernoulliNB()\nbnb.fit(X_train, y_train)","bbe90322":"BernoulliNBScore = bnb.score(X_test, y_test)\nprint(\"Accuracy obtained by Bernoulli Naive Bayes model:\",BernoulliNBScore*100)","cd936806":"y_pred_bnb = bnb.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_bnb))","1c029df1":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 100)\nrfc.fit(X_train,y_train)","9386f8a0":"RandomForestClassifierScore = rfc.score(X_test, y_test)\nprint(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","23b138da":"y_pred_rfc = rfc.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_rfc))","03d47bee":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)","f2e1d42f":"DecisionTreeClassifierScore = dtc.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","7d7eedd7":"y_pred_dtc = dtc.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_dtc))","2d43c143":"plt.style.use(\"seaborn\")\n\nx = [\"Multinomial Naive Bayes\",\n     \"Bernoulli Naive Bayes\",\n     \"Decision Tree Classifier\", \n     \"Random Forest Classifier\"\n     ]\n\ny = [MultinomialNBScore,\n     BernoulliNBScore,\n     DecisionTreeClassifierScore, \n     RandomForestClassifierScore \n    ]\n\nfig, ax = plt.subplots(figsize=(10,6))\nsns.barplot(x=x,y=y, palette=\"viridis\");\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=45, fontsize=14)\nplt.title(\"Model Comparison - Model Accuracy\", fontsize=18, fontname=\"Helvetica\", y=1.03)\nplt.show()","26b3b374":"# <span style=\"color:#5887FF;\"> Loading up the data <\/span>","888467e4":"# <span style=\"color:#5887ff;\"> Multinomial Naive Bayes <\/span>","372dc901":"#### If you like my work, It will be really great of you to upvote this notebook!\n#### If not then you leaving a comment on what do I need to work on and improve will be really helpful!","45d0e2fd":"# <span style=\"color:#5887ff;\"> Random Forest Classifier <\/span>","14bf8eea":"# <span style=\"color:#5887FF;\"> Splitting the data into training and test datasets <\/span>\nHere, we are trying to predict whether the message is span or not the given data. Hence, `Spam` will be the y label and rest of the data will be the X or the input data.","bf14d27f":"# <span style=\"color:#5887FF;\"> Importing Libraries <\/span>","0a9495a1":"# <span style=\"color:#5887ff;\"> Decision Tree Classifier <\/span>","6c115114":"#### <span style=\"color:#f6aa1c;\"> Most of the messages' length is between the range of 0-200 characters <\/span>","de484fde":"#### <span style=\"color:#f6aa1c;\"> The above graph demonstrates that the spam texts have a bigger length compared to the non-spam texts <\/span>","08f7dd98":"# <span style=\"color:#5887ff;\"> Comparing Model Performances <\/span>","f0b6d583":"# <p style=\"background-color:#5887FF;font-family:inter;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Spam or Ham Text Classification \ud83d\udcf2<\/p>","f10d888a":"# <span style=\"color:#5887ff;\"> Bernoulli Naive Bayes <\/span>"}}