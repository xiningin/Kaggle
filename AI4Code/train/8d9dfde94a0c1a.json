{"cell_type":{"13e56c03":"code","9d9683b5":"code","62749460":"code","af8b6be8":"code","44af6b6a":"code","fec99529":"code","a4f33bb0":"code","6b8bd4af":"code","7f68d020":"code","120e4879":"code","9c368680":"code","ffcff1cd":"code","6088edad":"code","e9a371f9":"code","56eea575":"code","c4171861":"code","27bf4a86":"code","ef51cfe5":"code","3ebab733":"code","0f1f917b":"code","ff77899e":"code","7e3be6f1":"markdown","19eb353c":"markdown","96627b03":"markdown","5e90d4de":"markdown","ff34b880":"markdown","8709bf28":"markdown","b432b3d5":"markdown","fe2a981b":"markdown","bcb71905":"markdown","55a7b72d":"markdown","8ae34219":"markdown","2128f99e":"markdown","b41f46f5":"markdown"},"source":{"13e56c03":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder","9d9683b5":"yes_data = []\n\nno_data = []\n\npaths = []\n\nlabels = []\n\nimport os\nfor dirname, _, filenames in os.walk(r'..\/input\/brain-mri-images-for-brain-tumor-detection\/yes'):\n    \n    for filename in filenames:\n        \n        if '.jpg' in filename:\n            \n            paths.append(os.path.join(dirname, filename))","62749460":"encoder = OneHotEncoder()\n\nencoder.fit([[0], [1]])\n\nfor path in paths:\n    \n    image = Image.open(path)\n    \n    image = image.resize((128,128))\n    \n    image= np.array(image)\n    \n    if image.shape == (128,128,3):\n        \n        yes_data.append(np.array(image))\n        \n        labels.append(encoder.transform([[0]]).toarray())\n        \nlabels[0]","af8b6be8":"more_paths = []\n\nfor dirname, _, filenames in os.walk(r'..\/input\/brain-mri-images-for-brain-tumor-detection\/no'):\n    \n    for filename in filenames:\n        \n        if '.jpg' in filename:\n            \n            more_paths.append(os.path.join(dirname, filename))","44af6b6a":"for path in more_paths:\n    \n    image = Image.open(path)\n    \n    image = image.resize((128,128))\n    \n    image = np.array(image)\n    \n    if image.shape == (128,128,3):\n        \n        yes_data.append(np.array(image))\n        \n        labels.append(encoder.transform([[1]]).toarray())\n        \n","fec99529":"yes_data = np.array(yes_data)\n\nyes_data.shape","a4f33bb0":"labels = np.array(labels)\n\nlabels = labels.reshape(139,2)\n\nlabels.shape","6b8bd4af":"np.set_printoptions(linewidth = 200)\n\nplt.imshow(yes_data[0])\n\nprint(yes_data[0])\n\nprint(labels[0])","7f68d020":"train_data, test_data, train_labels, test_labels = train_test_split(yes_data, labels, random_state = 3, shuffle = True)","120e4879":"train_data.shape, test_data.shape, train_labels.shape, test_labels.shape","9c368680":"train_data = train_data \/255.0\ntest_data = test_data\/255.0","ffcff1cd":"from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import BatchNormalization\n\n\ninput = Input(shape = (128,128,3))\n\nx = Conv2D(16, (3,3), activation = 'relu')(input)\n\nx = BatchNormalization()(x)\n\nx = MaxPooling2D(2,2)(x)\n\nx = Conv2D(32, (3,3), activation = 'relu')(x)\n\nx = MaxPooling2D(2,2)(x)\n\n\n\nx = Flatten()(x)\n\nx = BatchNormalization()(x)\n\nx = Dense(124, activation = 'relu')(x)\n\nx = Dropout(0.27)(x)\n\nx = Dense(124, activation = 'relu')(x)\n\noutput = Dense(2, activation = 'softmax')(x)\n\nmodel = Model(inputs = input, outputs = output)\n\nmodel.summary()","6088edad":"from keras.optimizers import RMSprop","e9a371f9":"model.compile(loss = 'categorical_crossentropy', optimizer = RMSprop(lr = 0.001), metrics = [\"accuracy\"])","56eea575":"lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-8*10**(epoch \/ 20))","c4171861":"history = model.fit(train_data, train_labels, epochs = 75, callbacks = [lr_schedule],validation_data = (test_data, test_labels))","27bf4a86":"# accuracy\n\nplt.figure(figsize = (12,7))\n\nplt.plot(history.history['accuracy'], label = 'train accuracy')\nplt.plot(history.history['val_accuracy'], label = 'validation accuracy')\nplt.title(\"train accuracy vs validation accuracy\")\nplt.legend()\nplt.show()","ef51cfe5":"# loss\n\nplt.figure(figsize = (12,7))\n\nplt.plot(history.history['loss'], label = 'train loss')\nplt.plot(history.history['val_loss'], label = 'validation loss')\nplt.legend()\nplt.title(\"train vs validation loss\")\nplt.show()\n","3ebab733":"def tumor(number):\n    \n    if number == 0:\n        \n        return \"Not a tumor\"\n    \n    else:\n        \n        return \"a tumor\"","0f1f917b":"#example image\n\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/Y1.jpg\")\n\nx = np.array(img.resize((128,128)))\n\nx = x.reshape(1, 128, 128, 3)\n\nresult = model.predict([x])\n\nclassification = np.where(result == np.amax(result))[1][0]\n\nprint(str(result[0][classification]*100) + '% Confidence This Is ' + tumor(classification))\n\nplt.imshow(img)\n","ff77899e":"img2 = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/18 no.jpg\")\n\ny = np.array(img2.resize((128,128)))\n\ny = y.reshape(1, 128, 128, 3)\n\nresult2 = model.predict([y])\n\nind = 0\nclassification2 = 0\n\nimport numpy as np\n\nfor result in result2:\n    result = result.tolist()\n    print(result)\n    \n    if result[0] > result[1]:\n        classification = 1\n        ind = 0\n    else:\n        classification = 0\n        ind = 1\n\n#classification2 = np.where(result2 == np.amax(result2))[1][0]\n\nprint(str(result2[0][ind]*100) + '% Confidence This Is ' + tumor(classification2))\n\nplt.imshow(img2)\n\n\n\n\n","7e3be6f1":"## Fitting the Model","19eb353c":"## Plotting results","96627b03":"## Getting a glance at the data","5e90d4de":"## Predictions","ff34b880":"## Predicting if a patient does or does not have a brain tumor","8709bf28":"## Building A Model (Using Functional API)","b432b3d5":"## Normalizing Data","fe2a981b":"### Imports","bcb71905":"In this notebook we will be using labeled MRI images to train a neural network that will try and correctly diagnose a patient.","55a7b72d":"## Compile Model","8ae34219":"## Making a Learning Rate Scheduler","2128f99e":"## Training + Testing data","b41f46f5":"### Preprocessing Data "}}