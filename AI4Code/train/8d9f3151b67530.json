{"cell_type":{"130b07c9":"code","9c9c4aae":"code","727ef444":"code","06313c7d":"code","4b7bd5d3":"code","bce33aa5":"code","ff2db4ad":"code","55e1740a":"code","e5e0a951":"code","9fa5b58b":"code","24c8aca0":"code","a287c7a9":"code","8c51d714":"code","b6e17bb5":"code","3057f082":"code","a91ace60":"code","ce4854f2":"code","e37a9b7d":"code","60ff4c9b":"code","274199d1":"code","a27f9a80":"code","ebcbc77b":"code","f608669d":"code","0eda4c46":"code","2e3f3cfe":"code","1fa3a093":"code","92928c0d":"code","3e2da80b":"code","65617530":"code","2cece0fd":"code","7c9a96e7":"code","5f3414a2":"code","a2d85b2a":"code","41231bf6":"code","5a16ea1c":"code","263871fe":"code","92b49858":"code","fe37ec16":"code","6beef47e":"code","4bc2cf93":"code","61ed00be":"code","ca120318":"code","195633a3":"code","910048ac":"code","45562c10":"code","098cedcb":"code","5f1b932e":"code","e73ddb8d":"code","2385536d":"code","192c14e5":"code","a3a358c5":"markdown","01c137d1":"markdown","6960925c":"markdown","f43d1acd":"markdown","fe276643":"markdown","71384eb2":"markdown","0d28f978":"markdown","7bcbecba":"markdown","78df34fb":"markdown","89b6db0d":"markdown","b2c43b24":"markdown"},"source":{"130b07c9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport warnings\nwarnings.simplefilter(\"ignore\")","9c9c4aae":"data = pd.read_csv(\"..\/input\/lung-cancer\/survey lung cancer.csv\")\ndata.head()","727ef444":"data.info()","06313c7d":"data.describe().T","4b7bd5d3":"data.isna().sum()","bce33aa5":"data[\"LUNG_CANCER\"].unique()","ff2db4ad":"data[\"GENDER\"].unique()","55e1740a":"# Mapping numeric values to non-numeric values\n\ndata['GENDER'] = data['GENDER'].map({'F': 0, 'M': 1})\n\ndata['LUNG_CANCER'] = data['LUNG_CANCER'].map({'NO': 0, 'YES': 1})","e5e0a951":"data.dtypes","9fa5b58b":"def custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length = 0)","24c8aca0":"pal = [\"#395e66\",\"#387d7a\",\"#32936f\",\"#26a96c\",\"#2bc016\"]\ncustom_palette(pal)","a287c7a9":"fig, ax = plt.subplots(figsize=(12,10))\nsns.heatmap(data.corr(), annot=True, fmt='.1g', cmap=pal, cbar=False, linewidths=0.5, linecolor='grey');","8c51d714":"print ('Total Healthy Patients : {} '.format(data.LUNG_CANCER.value_counts()[0]))\nprint ('Total Suspected Patients : {} '.format(data.LUNG_CANCER.value_counts()[1]))","b6e17bb5":"values = data['LUNG_CANCER'].value_counts().tolist()\nnames = list(dict(data['LUNG_CANCER'].value_counts()).keys())\n\npx.pie(data, values=values, names=names, hole = 0.5,\n       color_discrete_sequence=[\"firebrick\", \"green\"])","3057f082":"x = data['LUNG_CANCER'].value_counts().index.tolist()\ny = data['LUNG_CANCER'].value_counts().tolist()\n\nfig = px.bar(x=x, y=y, color=[\"firebrick\", \"green\"], color_discrete_map=\"identity\",\n             labels={\n                'x': 'LUNG_CANCER',\n                'y': 'count'\n                },)\nfig.show()","a91ace60":"plt.style.use(\"seaborn\")\ndata.hist(figsize=(25,20), color=pal[3], bins=15);","ce4854f2":"plt.figure(figsize=(20,10))\nsns.boxenplot(data = data, palette = pal)\nplt.xticks(rotation=90, fontsize=18)\nplt.show()","e37a9b7d":"sns.kdeplot(x=data[\"GENDER\"], y=data[\"AGE\"], hue =data[\"LUNG_CANCER\"], palette=\"crest\");\nplt.show()","60ff4c9b":"for i in data:\n    sns.swarmplot(x = data[\"LUNG_CANCER\"], y = data[i], color = \"black\", alpha = 0.8)\n    sns.boxenplot(x = data[\"LUNG_CANCER\"], y = data[i], palette=\"crest\")\n    plt.show()   ","274199d1":"# X data\nX = data.drop(\"LUNG_CANCER\", axis=1)\nX.head()","a27f9a80":"# y data\ny = data[\"LUNG_CANCER\"]\ny.head()","ebcbc77b":"# Adding randomized samples to the data as the data is imbalanced\n\nfrom imblearn.over_sampling import RandomOverSampler\n\nover_samp =  RandomOverSampler(random_state=0)\nX_train_res, y_train_res = over_samp.fit_resample(X, y)\nX_train_res.shape, y_train_res.shape","f608669d":"plt.style.use(\"seaborn\")\nplt.figure(figsize=(10,6))\nplt.title(\"No. of samples after balancing\", fontsize=20, y=1.02)\nsns.countplot(x = y_train_res, palette=pal)\nplt.show()","0eda4c46":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_train_res, y_train_res, test_size = 0.2, random_state = 42)","2e3f3cfe":"len(X_train), len(X_test)","1fa3a093":"# Scaling the data \n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","92928c0d":"plt.figure(figsize=(20,10))\nplt.title(\"Data after Scaling\", fontsize=25, y=1.02)\nsns.boxenplot(data = X_train, palette = pal)\nplt.show()","3e2da80b":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)","65617530":"LinearRegressionScore = lr.score(X_test,y_test)\nprint(\"Accuracy obtained by Linear Regression model:\",LinearRegressionScore*100)","2cece0fd":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 100)\nrfc.fit(X_train,y_train)","7c9a96e7":"RandomForestClassifierScore = rfc.score(X_test, y_test)\nprint(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","5f3414a2":"# Confusion Matrix of Random Forest Classifier\nfrom sklearn.metrics import confusion_matrix, classification_report\n\ny_pred_rfc = rfc.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_rfc)\nsns.heatmap(cf_matrix, annot=True, cmap=pal)\nplt.title(\"Confusion Matrix for Random Forest Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","a2d85b2a":"from sklearn import metrics\nprint(metrics.classification_report(y_test, y_pred_rfc))","41231bf6":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train,y_train)","5a16ea1c":"KNeighborsClassifierScore = knn.score(X_test, y_test)\nprint(\"Accuracy obtained by K Neighbors Classifier model:\",KNeighborsClassifierScore*100)","263871fe":"# Confustion Matrix \n\ny_pred_knn = knn.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_knn)\nsns.heatmap(cf_matrix, annot=True, cmap=pal)\nplt.title(\"Confusion Matrix for K Neighbors Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","92b49858":"print(metrics.classification_report(y_test, y_pred_knn))","fe37ec16":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)","6beef47e":"DecisionTreeClassifierScore = dtc.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","4bc2cf93":"y_pred_dtc = dtc.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_dtc)\nsns.heatmap(cf_matrix, annot=True, cmap=pal)\nplt.title(\"Confusion Metrix for Decision Tree Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","61ed00be":"print(metrics.classification_report(y_test, y_pred_dtc))","ca120318":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)","195633a3":"GradientBoostingClassifierScore = gb.score(X_test,y_test)\nprint(\"Accuracy obtained by Gradient Boosting Classifier model:\",GradientBoostingClassifierScore*100)","910048ac":"y_pred_gb = gb.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_gb)\nsns.heatmap(cf_matrix, annot=True, cmap=pal)\nplt.title(\"Confusion Matrix for Gradient Boosting Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","45562c10":"print(metrics.classification_report(y_test, y_pred_gb))","098cedcb":"from xgboost import XGBClassifier\nxgb = XGBClassifier()\nxgb.fit(X_train, y_train)","5f1b932e":"XGBClassifierScore = xgb.score(X_test,y_test)\nprint(\"Accuracy obtained by XGB Classifier model:\",XGBClassifierScore*100)","e73ddb8d":"y_pred_xgb = xgb.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_xgb)\nsns.heatmap(cf_matrix, annot=True, cmap=pal)\nplt.title(\"Confusion Matrix for XGB Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","2385536d":"print(metrics.classification_report(y_test, y_pred_xgb))","192c14e5":"plt.style.use(\"seaborn\")\n\nx = [\"Linear Regression\", \n     \"Decision Tree Classifier\", \n     \"Random Forest Classifier\", \n     \"K Neighbors Classifier\",  \n     \"Gradient Boosting Classifier\",\n     \"XGB Classifier\"]\n\ny = [LinearRegressionScore, \n     DecisionTreeClassifierScore, \n     RandomForestClassifierScore, \n     KNeighborsClassifierScore,  \n     GradientBoostingClassifierScore, \n     XGBClassifierScore]\n\nfig, ax = plt.subplots(figsize=(12,6))\nsns.barplot(x=x,y=y, palette=pal);\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40, fontsize=14)\nplt.title(\"Model Comparison - Model Accuracy\", fontsize=20, fontname=\"Helvetica\", y=1.03)\nplt.show()","a3a358c5":"# <p style=\"background-color:#32936f;font-family:inter;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Lung Cancer Predictions<\/p>","01c137d1":"# <span style=\"color:#32936f;\"> Random Forest Classifier <\/span>","6960925c":"# <span style=\"color:#32936f;\"> Loading up the data <\/span>","f43d1acd":"# <span style=\"color:#32936f;\"> Gradient Boosting Classifier <\/span>","fe276643":"# <span style=\"color:#32936f;\"> XGB Classifier <\/span>","71384eb2":"# <span style=\"color:#32936f;\"> Linear Regression <\/span>","0d28f978":"# <span style=\"color:#32936f;\"> Splitting the data into training and test datasets <\/span>\nHere, we are trying to predict whether the patient has Lung Cancer or not using the given data. Hence, `LUNG_CANCER` will be the y label and rest of the data will be the X or the input data.","7bcbecba":"# <span style=\"color:#32936f;\"> Importing Libraries <\/span>","78df34fb":"# <span style=\"color:#32936f;\"> K Neighbors Classifier <\/span>","89b6db0d":"# <span style=\"color:#32936f;\"> Decision Tree Classifier <\/span>","b2c43b24":"![400 all.png](attachment:7d1a780e-59d5-458a-9dfa-c4854624ce1c.png)"}}