{"cell_type":{"a2da9958":"code","a42b7cfb":"code","10522407":"code","c25057ae":"code","56becc90":"code","a6244b13":"code","9c9750f6":"code","9f9a96c3":"code","1d415b36":"code","3d199e3d":"code","19c551e7":"code","aafdb4b5":"code","4e8414be":"code","45bca82f":"code","16129525":"code","bc84dbca":"code","981759f7":"code","47a56476":"code","3e22c936":"code","a26c9b2b":"code","1c9fbb6f":"code","10af6bd6":"code","364e3abd":"code","0ad83816":"code","7b038fb3":"code","c9e5aab1":"code","e5d62d9e":"code","c8467ae3":"code","c59f538a":"code","5d1e3ab0":"code","ec406825":"markdown","daae1643":"markdown","85717e8f":"markdown","6949aff3":"markdown","c116a308":"markdown","1a20fb1b":"markdown","0e7ff550":"markdown","6e22f6f6":"markdown","32a929e2":"markdown","17a5c61f":"markdown","3341e031":"markdown","2c62dcac":"markdown","f77f9e9d":"markdown","4b3beff9":"markdown","01d23e59":"markdown"},"source":{"a2da9958":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a42b7cfb":"import h5py","10522407":"import matplotlib.pyplot as plt \nimport seaborn as sns\nimport time\n","c25057ae":"filename = '\/kaggle\/input\/multiple-single-cell-rna-expressions-archs4\/human_matrix.h5'\nwith h5py.File(filename, \"r\") as f:\n    # List all groups\n    print(\"Keys: %s\" % f.keys())\n    a_group_key = list(f.keys())[0]\n\n    # Get the data\n    # data = list(f[a_group_key])","56becc90":"f = h5py.File(filename,'r')#, mode)\nfor key in f.keys():\n    print(key) #Names of the groups in HDF5 file.","a6244b13":"key = 'data'\ngroup = f[key]\nprint(group.keys())\nfor k in group.keys():\n    print(group[k])","9c9750f6":"key = 'data'\nkey2 = 'expression'\nX = f[key][key2]\nprint(X.shape)\nX","9f9a96c3":"X[:5,:8]","1d415b36":"t0=time.time()\nfor gene in range((X.shape[0]))[:10]:\n    v = X[:,gene]\n    print('Gene N', gene, 'Percent of zeros:',np.round(100*np.sum(v==0)\/len(v), 2),'%  ', 'seconds passed:', np.round(time.time()-t0,1))\n    \n    ","3d199e3d":"key = 'meta'\ngroup = f[key]\nl = []\nfor key in group.keys():\n    l.append(key)\n    #print(key)\nprint(len(l))    \nprint(l)    ","19c551e7":"l_gene = list(  filter(lambda x: 'gene' in x , l) )\nprint(len(l_gene))\nprint(l_gene)","aafdb4b5":"key = 'meta'\nkey2 = 'gene_name'\ngene_names = f[key][key2]\nprint(len(gene_names))\ngene_names[:10]","4e8414be":"l_gene\nkey = 'meta'\nfor key2 in l_gene:\n    dt = f[key][key2]\n    print(key2, 'len = ', len(dt), 'First 5 elements:')\n    print(dt[:5] )","45bca82f":"l_sample = list(  filter(lambda x: 'Sample' in x , l) )\nprint(len(l_sample))\nprint(l_sample)","16129525":"key = 'meta'\nkey2 = 'Sample_organism_ch1'\ndt = f[key][key2]\ns = pd.Series(dt)\nprint(s.value_counts())\ndt[:10]","bc84dbca":"l_sample\nkey = 'meta'\nfor key2 in l_sample:\n    dt = f[key][key2]\n    print(key2, 'len = ', len(dt), 'First 5 elements:')\n    print(dt[:5] )","981759f7":"print( f['info'] )\nprint( f['info'].keys() )\nfor k in f['info']:\n    print(f['info'][k][0])\n","47a56476":"fn = '\/kaggle\/input\/multiple-single-cell-rna-expressions-archs4\/gene_human_tsne.csv'\ndf = pd.read_csv(fn)\ndf","3e22c936":"fn = '\/kaggle\/input\/multiple-single-cell-rna-expressions-archs4\/gene_human_tsne.csv'\ndf = pd.read_csv(fn)\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure(figsize = (15,8))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['x'], df['y'], df['z'])# , c=c, marker=m)\n\nplt.title('Human genes in TSN3 3D space')\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n\nplt.show()","a26c9b2b":"fn = '\/kaggle\/input\/multiple-single-cell-rna-expressions-archs4\/sample_mouse_tsne.csv'\ndf = pd.read_csv(fn)\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure(figsize = (15,8))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['x'], df['y'], df['z'])# , c=c, marker=m)\n\nplt.title('Mouse genes in TSN3 3D space')\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()","1c9fbb6f":"import pyarrow.feather as feather\n\nfn = '\/kaggle\/input\/multiple-single-cell-rna-expressions-archs4\/mouse_correlation_archs4.f'\nwith open(fn, 'rb') as f:\n    df = feather.read_feather(f)\n    \n","10af6bd6":"df","364e3abd":"v = df.values.ravel()\n\n#corr_matr = df.values\n#corr_matr_abs = np.abs(read_df.values )\n","0ad83816":"plt.figure(figsize=(14,8))\nt0 = time.time()\nplt.hist(v, bins = 50)\nplt.title('correlation coefficients distribution')\nplt.show()\nprint(time.time() - t0, 'seconds passed')\n\nprint(np.min(v ), 'minimal correlation' )\nprint(np.mean(np.abs(v) ), 'average absolute correlation' )\nprint(np.median(np.abs(v)), 'median absolute correlation' )\nprint(np.min(np.abs(v) ), 'min absolute correlation' )\nprint(np.std(np.abs(v) ), 'std absolute correlation' )\nfor t in [0.5,0.6, 0.7,0.8,0.9,0.95,0.97,0.98,.99]:\n    print( ((np.abs(v) < 0.99999999) & (np.abs(v) > t)).sum()\/2 , 'number of pairs correlated more than', t  )\nv.shape","7b038fb3":"# Strange extremelt highly correlated elements - will look on them below  in more details\nt = 0.9999\nprint( ((np.abs(v) < 0.9999999999999) & (np.abs(v) > t)).sum()\/2 , 'number of pairs correlated more than', t  )\nt = 0.999\nprint( ((np.abs(v) < 0.9999999999999) & (np.abs(v) > t)).sum()\/2 , 'number of pairs correlated more than', t  )\n","c9e5aab1":"a = np.where( np.abs(np.triu(df.values,1)) > 0.9999 )\nl = zip( a[0],a[1])\nl = list(l)\nprint( len(l) ); print()\nfor t in l[:20]:\n    print(t[0],t[1], df.columns[t[0]], df.columns[t[1]],'Correlation:',  df.iloc[t[0], t[1]] )\n","e5d62d9e":"import igraph\n","c8467ae3":"# Create graph\na = np.where( np.abs(np.triu(df.values,1)) > 0.5 )\nl = list( zip( a[0],a[1]) )\nprint('Number of edges:', len(l) )\n\ng = igraph.Graph()\ng.add_vertices(len(df))\ng.add_edges( list(l) )","c59f538a":"# Analyse connected components:\n\ng_clusters = g.clusters(mode='WEAK')\ng_clusters\nprint('Number of components',len(g_clusters))\n\nlist_cluster_sizes = [len(t) for t  in g_clusters ]\nl = np.sort(list_cluster_sizes)[::-1]\nprint('Sizes of 20 largest components:',  l[:20] )\nprint('Number of single node components', (np.array(l) == 1).sum()) \n","5d1e3ab0":"# Visualize largest connected component\nix_max = np.argmax(list_cluster_sizes)\nprint(ix_max)\nlen(g_clusters[ix_max] )\ng2 = g.subgraph( g_clusters[ix_max] )\nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['green' for v in g2.vs]\n#visual_style[\"vertex_label\"] = range(g.vcount()) \nvisual_style[\"vertex_size\"] = 2\nigraph.plot(g2,bbox = (800,500), **visual_style )\n","ec406825":"# Open file way 2 - more simple ","daae1643":"## Gene names etc,  35238 genes","85717e8f":"# Exercise - show percent of zeros for several genes ( illustrate dropout)","6949aff3":"# Open file way 1","c116a308":"## Some details on data\n\nThe file human_matrix.h5 - is version of 8 of the data file.\nIt contains expressions of 35238 genes for  238522 samples. Same file contains meta-information - gene names, sources of data etc \n\nExpression files for mouse and human in HDF5 format. All gene counts are on gene level (Entrez Gene Symbol). For compression purposes the Kallisto pseudocounts are rounded to integer values.\n\n\nSmall csv files like sample_human_tsne.csv may correspond to different version of the main file for example to version 2,\nand thus contains data corresponding to a subset of data relatively to .h5. \n","1a20fb1b":"# What is about ?\n\nDataset is downloaded from https:\/\/amp.pharm.mssm.edu\/archs4\/download.html\nThe methods are described in Nature Communications paper: https:\/\/www.nature.com\/articles\/s41467-018-03751-6\n\nThe ARCHS4 data provides user-friendly access to multiple gene expression data from the GEO database. (https:\/\/www.ncbi.nlm.nih.gov\/geo\/ ).  While in GEO database most of data is stored in raw formats,\nARCHS4 provides prepared count matrix expression data. While GEO contains data stored separately for each research paper,\nARCHS4 collects all the information in one single matrix. One may consult the main site for further information.  \n\n\nMain data files are in H5 (HD5, Hierarchical Data Format ) file format https:\/\/en.wikipedia.org\/wiki\/Hierarchical_Data_Format\nIt contains expression data, as well as annotation data and futher meta-information. There are several other auxilliary files like TSNE 3d projection (in CSV format) and correlation matrices for genes for human and mouse in feather format. \n\nThe notebook below gives examples how to work with such files. \n\nThe ARCHS4 project is by :\n\n'Alexander Lachmann', 'alexander.lachmann@mssm.edu', update: '2020-02-06'\n","0e7ff550":"## Graph of correlations","6e22f6f6":"## Look for ","32a929e2":"# Get meta data\n","17a5c61f":"# Load and look at gene correlation matrices","3341e031":"# Plot genes in TSNE 3d dimensional reduction ","2c62dcac":"## Sample information","f77f9e9d":"## Access","4b3beff9":"# Info on ARCHS4 authorship","01d23e59":"# Access expression data  "}}