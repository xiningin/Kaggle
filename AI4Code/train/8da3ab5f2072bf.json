{"cell_type":{"4bb74d63":"code","94a736a8":"code","ef68eeb6":"code","352f2c0b":"code","b2bfb4db":"code","c2169596":"code","fd85f4ad":"code","eb226c29":"code","3833d717":"code","45c2c833":"code","a8b28ea2":"code","35f93b12":"code","acc8953a":"code","13d563c3":"code","f4d16368":"code","fa07e6b9":"code","1c57a313":"code","ff1a048c":"code","1f908ae2":"code","4ae811e3":"code","19f547bc":"code","6db128ad":"code","26469d01":"code","ffc4b0ce":"code","25ea0a62":"code","790d7c0d":"code","85233a46":"code","70998100":"code","00ddb5ca":"code","dbc1f139":"code","273c808b":"markdown","101cb651":"markdown","4b721377":"markdown","5b96f17e":"markdown"},"source":{"4bb74d63":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom wordcloud import WordCloud\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94a736a8":"personality = pd.read_csv('..\/input\/big-five-personality-test\/IPIP-FFM-data-8Nov2018\/data-final.csv', sep='\\t')\npersonality\n","ef68eeb6":"personality.head()","352f2c0b":"personality.tail()","b2bfb4db":"personality.describe()","c2169596":"personality.dtypes\n","fd85f4ad":"personality.info()","eb226c29":"personality.shape","3833d717":"personality.columns\npersonality.columns.to_list()","45c2c833":"pd.options.display.max_columns = 150\n\npersonality.drop(personality.columns[50:107], axis=1, inplace=True)\npersonality.drop(personality.columns[51:], axis=1, inplace=True)\n\nprint('Number of participants: ', len(personality))\npersonality.head()","a8b28ea2":"#Check Missing Value\nprint('Is there any missing value? ', personality.isnull().values.any())\nprint('How many missing values? ', personality.isnull().values.sum())\npersonality.dropna(inplace=True)\nprint('Number of participants after eliminating missing values: ', len(personality))","35f93b12":"countries = pd.DataFrame(personality['country'].value_counts())\ncountries_5000 = countries[countries['country'] >= 5000]\nplt.figure(figsize=(15,5))\nsns.barplot(data=countries_5000, x=countries_5000.index, y='country')\nplt.title('Countries With More Than 5000 Participants')\nplt.ylabel('Participants');","acc8953a":"plt.figure(figsize=[15,15])\nfft=['EXT1','EXT2','EXT3','EXT4','EXT5','EXT6','EXT7','EXT8','EXT9','EXT10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f,  edgecolor=\"white\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Extroversion Personality : {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","13d563c3":"plt.figure(figsize=[15,15])\nfft=['EST1','EST2','EST3','EST4','EST5','EST6','EST7','EST8','EST9','EST10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f,  edgecolor=\"white\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Neuroticism Personality : {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","f4d16368":"plt.figure(figsize=[15,15])\nfft=['EST1','EST2','EST3','EST4','EST5','EST6','EST7','EST8','EST9','EST10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f,  edgecolor=\"white\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Neuroticism Personality : {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","fa07e6b9":"plt.figure(figsize=[15,15])\nfft=['AGR1','AGR2','AGR3','AGR4','AGR5','AGR6','AGR7','AGR8','AGR9','AGR10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f, edgecolor=\"white\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Agreeable Personality : {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","1c57a313":"plt.figure(figsize=[15,15])\nfft=['CSN1','CSN2','CSN3','CSN4','CSN5','CSN6','CSN7','CSN8','CSN9','CSN10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f, edgecolor=\"white\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Conscientious Personality: {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","ff1a048c":"plt.figure(figsize=[15,15])\nfft=['OPN1','OPN2','OPN3','OPN4','OPN5','OPN6','OPN7','OPN8','OPN9','OPN10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f,  edgecolor=\"white\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Open Personality : {}  \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","1f908ae2":"from sklearn.preprocessing import MinMaxScaler\n\ndf = personality.drop('country', axis=1)\ncolumns = list(df.columns)\n\nscaler = MinMaxScaler(feature_range=(0,1))\ndf = scaler.fit_transform(df)\ndf = pd.DataFrame(df, columns=columns)\ndf_sample = df[:5000]\n\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\n\nkmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k=(2,15))\nvisualizer.fit(df_sample)\nvisualizer.poof()","4ae811e3":"X=personality.copy()\nfrom sklearn.cluster import KMeans\ndf = X.drop(\"country\", axis=1)\n\n\n#fit model\nkmeans = KMeans(n_clusters=5)\nk_fit = kmeans.fit(df)\n\npd.options.display.max_columns = 10\nclusters_ = k_fit.labels_\ndf['Clusters'] = clusters_\ndf.head()","19f547bc":"pd.options.display.max_columns = 150\ndf.groupby('Clusters').mean()","6db128ad":"col_list = list(df)\next = col_list[0:10]\nest = col_list[10:20]\nagr = col_list[20:30]\ncsn = col_list[30:40]\nopn = col_list[40:50]\n\ndata_sums = pd.DataFrame()\ndata_sums['extroversion'] = df[ext].sum(axis=1)\/10\ndata_sums['neurotic'] = df[est].sum(axis=1)\/10\ndata_sums['agreeable'] = df[agr].sum(axis=1)\/10\ndata_sums['conscientious'] = df[csn].sum(axis=1)\/10\ndata_sums['open'] = df[opn].sum(axis=1)\/10\ndata_sums['clusters'] = clusters_\ndata_sums.groupby('clusters').mean()","26469d01":"dataclusters = data_sums.groupby('clusters').mean()\nplt.figure(figsize=(22,3))\nfor i in range(0, 5):\n    plt.subplot(1,5,i+1)\n    plt.bar(dataclusters.columns, dataclusters.iloc[:, i], color='purple', alpha=0.2)\n    plt.plot(dataclusters.columns, dataclusters.iloc[:, i], color='orange')\n    plt.title('Cluster ' + str(i))\n    plt.xticks(rotation=45)\n    plt.ylim(0,4);","ffc4b0ce":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\npca_fit = pca.fit_transform(df)\n\ndf_pca = pd.DataFrame(data=pca_fit, columns=['PCA1', 'PCA2'])\ndf_pca['Clusters'] = clusters_\ndf_pca.head()","25ea0a62":"plt.figure(figsize=(10,10))\nsns.scatterplot(data=df_pca, x='PCA1', y='PCA2', hue='Clusters', palette='Set1', alpha=0.8)\nplt.title('Personality Clusters after PCA');","790d7c0d":"df.Clusters.value_counts()","85233a46":"\nmy_data = pd.read_csv('..\/input\/ourpersonalitytest2\/our_personality_test (1).csv')","70998100":"my_personality = k_fit.predict(my_data)\nprint('My Personality Cluster: ', my_personality)","00ddb5ca":"col_list = list(my_data)\next = col_list[0:10]\nest = col_list[10:20]\nagr = col_list[20:30]\ncsn = col_list[30:40]\nopn = col_list[40:50]\n\nmy_sums = pd.DataFrame()\nmy_sums['extroversion'] = my_data[ext].sum(axis=1)\/10\nmy_sums['neurotic'] = my_data[est].sum(axis=1)\/10\nmy_sums['agreeable'] = my_data[agr].sum(axis=1)\/10\nmy_sums['conscientious'] = my_data[csn].sum(axis=1)\/10\nmy_sums['open'] = my_data[opn].sum(axis=1)\/10\nmy_sums['cluster'] = my_personality\nprint('Sum of our question groups')\nmy_sums\n","dbc1f139":"my_sum = my_sums.drop('cluster', axis=1)\nplt.bar(my_sum.columns, my_sum.iloc[0,:], color='purple', alpha=0.2)\nplt.plot(my_sum.columns, my_sum.iloc[0,:], color='orange')\nplt.title('Cluster 2')\nplt.xticks(rotation=45)\nplt.ylim(0,4);","273c808b":" # INTRODUCTION","101cb651":"\n# VARIABLE DESCRIPTION","4b721377":"**CLUSTERING**","5b96f17e":"# VISUALIZATION"}}