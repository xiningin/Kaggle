{"cell_type":{"8749e790":"code","1d880840":"code","b2cbad84":"code","21af42cb":"code","c22fda82":"code","7326d2b5":"code","13f33d78":"code","3916ab92":"code","26cdd2dc":"markdown","9843d4bb":"markdown","e76b52cf":"markdown"},"source":{"8749e790":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d880840":"import matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (8,8)","b2cbad84":"FILEPATH = \"..\/input\/iris\/Iris.csv\"","21af42cb":"iris_data = pd.read_csv(FILEPATH)","c22fda82":"iris_data","7326d2b5":"fig, axis = plt.subplots()\n\naxis.plot(\n    iris_data[\"SepalLengthCm\"],\n    iris_data[\"SepalWidthCm\"],\n    linestyle=\"\", marker=\"o\")\naxis.set_xlabel(\"Sepal Length (cm)\")\naxis.set_ylabel(\"Sepal Width (cm)\")","13f33d78":"fig, axis = plt.subplots()\ngroups = iris_data.groupby(\"Species\")\n\n\nfor name, group in groups:\n    print(name)\n    axis.plot(\n        group[\"SepalLengthCm\"],\n        group[\"SepalWidthCm\"],\n        label = name,\n        marker = \"o\",\n        linestyle=\"\"\n    )\n    \naxis.set_xlabel(\"Sepal Length (cm)\")\naxis.set_ylabel(\"Sepal Width (cm)\")\n\naxis.legend()","3916ab92":"fig, axis = plt.subplots()\ngroups = iris_data.groupby(\"Species\")\n\n\nfor name, group in groups:\n    print(name)\n    axis.plot(\n        group[\"SepalLengthCm\"],\n        group[\"SepalWidthCm\"],\n        label = name,\n        marker = \"o\",\n        linestyle=\"\"\n    )\n    \naxis.set_xlabel(\"Sepal Length (cm)\")\naxis.set_ylabel(\"Sepal Width (cm)\")\n\naxis.legend()\n\naxis.axline((5.2, 3.0), slope = 0.65, c = \"pink\")\n","26cdd2dc":"# Fisher's Iris dataset\n\n- A flower just reduced to four **features**: `petal_length`, `petal_width`, `sepal_width`, and `sepal_length`.\n\n- Can one \"determine\" the species of the flower from these four lengths?\n\n## Points to remember\n\n- No a priori knowledge of whether this data is sufficient for the purpose or not.\n- Not even a mechnaism (at least a priori) assumed of going from species to these numbers.\n\n","9843d4bb":"We did some hit and trial with the slope, and saw that the line with slope = 0.65 and passign through (5.2, 3.0) seems to \"classify\" *Iris setosa* \"correctly\".\n\n\nThe class pointed out the big issue with using up the whole data set without any \"hold-out\" for testing.","e76b52cf":"Our goal is to now make a \"rule\" for distinguishing *Iris setosa* from the other species.\n\n# A MAJOR ERROR STARTS HERE!!\n\nThe picture suggests we can do it with a line!"}}