{"cell_type":{"a6a8a59b":"code","2e10b26e":"code","97e56b93":"code","154282a1":"code","b05f6ded":"code","69d670ba":"code","5c3367c4":"code","9617f9fa":"code","7ff569e0":"code","6f841a18":"code","5abdd0ad":"code","07da0875":"code","b63a20a2":"markdown","42e86924":"markdown","13d3163c":"markdown","69eb330f":"markdown","820ab466":"markdown","21e46e37":"markdown"},"source":{"a6a8a59b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2e10b26e":"wdata = pd.read_csv('..\/input\/countries of the world.csv')","97e56b93":"wdata.info()","154282a1":"wdata.head(20)","b05f6ded":"wdata.columns","69d670ba":"def enbuyuk(count=5):\n    \"\"\" return a list of largest 5 countries\"\"\"\n    return wdata.sort_values(by=['Area (sq. mi.)'],ascending=False).head(count)\n\nenbuyuk()","5c3367c4":"def coast(country):\n    #columns = [c.replace(' ', '_') for c in wdata.columns]\n    #columns = [c.replace('.', '_') for c in wdata.columns]\n    Country=wdata.at[country-1,'Country']\n    area=wdata.at[country-1,'Area (sq. mi.)']\n    def multiply():\n        sqkm=round(area*0.38610)\n        print(Country)\n        print(\"has\", area, \"km sq area\")\n        print(\"has\", sqkm, \"mi sq area\")\n    multiply()\ncoast(12)","9617f9fa":"def ulkeler(*args):\n    for i in args:\n        print(i)\n        \ncountries=tuple(wdata.iloc[:, wdata.columns.get_loc('Country')])\n#ulkeler(countries)\n\ndict=wdata.set_index('Country').to_dict()['Population']\ndef f(**kwargs):\n    for key, value in kwargs.items():\n        print(key, \" \", value)\n    \nf(**dict)","7ff569e0":"pop=list(wdata.iloc[:, wdata.columns.get_loc('Population')])\npop2=[]\n\nfor i in range(len(pop)):\n    pop2.append(int(pop[i]))\nort=sum(pop2)\/len(pop2)\n#print(ort)\nkalabalik = list(filter(lambda x: (x>ort) , pop2))\nprint(kalabalik)","6f841a18":"# zip example\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nlist2 = ['A','D','C','D','C','B','B','D','C','A']\nz = zip(list1,list2)\nz_list = list(z)\nprint(\"yan\u0131tlar\", z_list)  ","5abdd0ad":"pop=list(wdata.iloc[:, wdata.columns.get_loc('Population')])\npop2=[]\n\nfor i in range(len(pop)):\n    pop2.append(int(pop[i]))\n    \nort=sum(pop2)\/len(pop2)\nwdata[\"Nufus\"] = [\"kalabalik\" if i > 3*ort else \"dusuk\" for i in pop2]\nwdata.reindex(columns=[\"Country\",\"Nufus\",\"Population\"]).head(10)","07da0875":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(wdata.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.show()\n","b63a20a2":"#User defined functions - Kullan\u0131c\u0131 tan\u0131ml\u0131 fonksiyonlar","42e86924":"#Nested Functions - \u0130\u00e7 \u0130\u00e7e Fonksiyonlar","13d3163c":"**LIST COMPREHENS\u0130ON","69eb330f":"**lambda function and anonymous function\n\nThere is a cool note at w3schools. \n\"Use lambda functions when an anonymous function is required for a short period of time.\"","820ab466":"**zip: zip fermuar demektir. \n\nAyn\u0131 eleman say\u0131s\u0131na sahip listeleri fermuar gibi birebir e\u015fleyerek s\u0131ral\u0131 ikililer olu\u015fturman\u0131z\u0131 sa\u011flar. \nAyn\u0131 eleman say\u0131s\u0131na sahip olmayanlar i\u00e7in minimum kural\u0131na g\u00f6re \u00e7al\u0131\u015f\u0131r.\n\nIt allows you to create sequential pairs by matching lists with the same number of elements.\nIt works according to the minimum rule for those if lists do not have the same number of elements.","21e46e37":"# *args ve **kwargs\n"}}