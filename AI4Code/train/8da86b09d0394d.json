{"cell_type":{"c0131082":"code","37302a3c":"code","08e2dbdb":"code","125a6fd1":"code","3e70c541":"code","b6a9e842":"code","8e01efb8":"code","443de74e":"code","137580b4":"code","869e9f3b":"code","b65c9f48":"code","f0f26a3d":"code","bf1245b0":"code","a7725802":"code","0f4d34db":"code","9a79ca49":"code","5da071a4":"code","da3b57ee":"markdown","f9968dbf":"markdown","2b3a254f":"markdown","2c1a00d3":"markdown","1b2e6f6c":"markdown","1809dc5b":"markdown","1346e75b":"markdown"},"source":{"c0131082":"# install libraries\n# ! pip install shap\n# ! pip install kaggle\n# ! pip install tensorflow-data-validation\n# ! pip install -i https:\/\/pypi-nightly.tensorflow.org\/simple tensorflow-data-validation","37302a3c":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import FunctionTransformer\n\nimport shap\n\n# import tensorflow as tf\n# import tensorflow_data_validation as tfdv","08e2dbdb":"df = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1: , :]\nprint(df.shape)","125a6fd1":"# def chop_question(s):\n#     return s.split('-')[0]\n# df.iloc[0 , :].apply(chop_question).unique().tolist()","3e70c541":"# df.head()","b6a9e842":"# df.columns.to_list()\ngroup_by_question(4)","8e01efb8":"def group_by_question(q_num, q_letter = ''):\n    question = 'Q' + str(q_num) + '_' + q_letter\n    result = []\n    for col in df.columns:\n        if col.startswith(question) or col == 'Q' + str(q_num):\n            result.append(col)\n    return df[result]\n\ndef value_counts_by_question(q_num):\n    question_df = group_by_question(q_num)\n    for col in question_df.columns:\n        print(question_df[col].value_counts(dropna = False))\n        \ndef col_prefix(col):\n    if 'P' in col:\n        return col.split('P')[0].strip('_')\n    if 'O' in col:\n        return col.split('O')[0].strip('_')\n    return col\n\ndef one_hot_like_questions(df):\n    cols = df.columns.to_series().apply(col_prefix).value_counts()\n    return cols[cols > 1].index\n\ndef title_to_num(s):\n    if '_' in s:\n        s = s.split('_')[0]\n    return int(s.strip(\"Q\"))\n\ndef one_hot_formating(series):\n    pos = series.value_counts().index[0]\n    new_series = series.fillna(0)\n    one_hot_dict = {pos: 1, 0: 0}\n    return new_series.map(one_hot_dict)\n\ndef one_hot_formating_entry(s):\n    if pd.notna(s):\n        return 1\n    return 0\n\ndef salary_range_to_mean(s):\n    if pd.isna(s):\n        return s\n    range_list = s.strip('$>').replace(',', '').split('-')\n    range_list = [int(x) for x in range_list]\n    if len(range_list) == 1:\n        return range_list[0]\n    else:\n        return np.mean(range_list)\n    return range_list\n\ndef is_one_hot_like(s):\n#     return any([s.startswith(pre) for pre in one_hot_like])\n    return 'Part' in s or 'OTHER' in s","443de74e":"df.columns[df.columns.map(is_one_hot_like)]","137580b4":"group_by_question(25).iloc[:, 0].map(salary_range_to_mean).value_counts().to_frame().sort_index()","869e9f3b":"# value_counts_by_question(16)","b65c9f48":"# df.columns.to_series().apply(col_prefix).value_counts().sort_index()","f0f26a3d":"one_hot_like = one_hot_like_questions(df)\n# for col in df.columns:\n#     if not col in one_hot_like:\n#         print(df[col].value_counts())\none_hot_like","bf1245b0":"q7 = group_by_question(7).iloc[:, 0]\nnew_q7 = one_hot_formating(group_by_question(7).iloc[:, 0])\nprint(q7.value_counts(dropna = False))\nprint(new_q7.value_counts(dropna = False))","a7725802":"full_one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\")\n\nsemi_one_hot_encoder = FunctionTransformer(one_hot_formating, validate=True)\n# semi_one_hot_encoder.fit_transform(q7)\n","0f4d34db":"categorical_columns = df.columns[~df.columns.to_series().map(is_one_hot_like)].to_list()[1:]\nsemi_one_hot_columns = df.columns[df.columns.map(is_one_hot_like)].to_list()\ntotal_columns = categorical_columns + semi_one_hot_columns","9a79ca49":"full_one_hot_encoder.fit_transform(df[semi_one_hot_columns])\n# df[semi_one_hot_columns]","5da071a4":"semi_df = df[semi_one_hot_columns].copy()\nsemi_df[~semi_df.isna()] = 1\nsemi_df[semi_df.isna()] = 0\nsemi_df.head()","da3b57ee":"# 2021 Kaggle Survey Analysis: A SHAP interpretation\n## Team Members: ","f9968dbf":"## 2. Machine Learning Models","2b3a254f":"## 1. Fundamental Descriptive Analysis","2c1a00d3":"## 0. Libries and tools","1b2e6f6c":"### 2.1 Pipeline Building","1809dc5b":"#### 2.1.2 Distinguish Columns","1346e75b":"#### 2.1.1 Data Transformers"}}