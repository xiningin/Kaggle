{"cell_type":{"f475e673":"code","e06838ef":"code","b3d9c87f":"code","92ae9918":"code","59cecd39":"code","6afe555f":"code","a3926f13":"code","041df3b4":"code","1cf4e9a7":"code","533520cb":"code","58827099":"code","ae5e61c3":"code","c96fe07b":"code","77b600c3":"code","e9f3c4c0":"code","18ce4589":"code","bf1da05a":"code","85c9fcad":"code","237336f8":"code","29343261":"code","9fc6e151":"code","2f1e20dd":"code","f33e0da7":"code","b41b1822":"code","8bc8d996":"code","71aeafb9":"code","58b7c0b3":"code","b3296a22":"code","768708c9":"code","f74de00f":"code","f0c3e81c":"code","daebfe09":"code","7f144e90":"code","3e8d1843":"code","6349125d":"code","10b93027":"code","f619ab11":"code","6ba0ebb2":"markdown","ac38ac28":"markdown","c3e7350d":"markdown","bfb1c4ee":"markdown","c249ddcb":"markdown","385eeb16":"markdown","92b994c9":"markdown","38d40be5":"markdown","b98faf8a":"markdown","1d9cf457":"markdown","43802780":"markdown","321d336c":"markdown","ea22a302":"markdown","9227b4fa":"markdown","0ead1409":"markdown","d36be776":"markdown","f76eea7b":"markdown"},"source":{"f475e673":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e06838ef":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.simplefilter(\"ignore\")","b3d9c87f":"df = pd.read_csv(\"\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv\")\ndf.head()","92ae9918":"df.info()","59cecd39":"df.drop(['car_ID', 'symboling', 'CarName'], axis=1, inplace=True)","6afe555f":"df.describe().T","a3926f13":"df.corr()['price'].sort_values()","041df3b4":"df_num_cols = df.select_dtypes(exclude='object').columns\nfig, axes = plt.subplots(figsize=(4,52),nrows=len(df_num_cols))\ni = 0\nfor col in df_num_cols:\n    sns.scatterplot(data=df, x=col, y='price', ax=axes[i])\n    i+=1","1cf4e9a7":"df.isnull().sum()","533520cb":"sns.scatterplot(data=df, x='enginesize', y='price');","58827099":"sns.scatterplot(data=df, x='curbweight', y='price');","ae5e61c3":"# drop outliers\ndf_drop_idx = df[(df['price']>30000) & (df['curbweight']<3000)].index\ndf.drop(df_drop_idx, axis=0)","c96fe07b":"sns.scatterplot(data=df, x='horsepower', y='price');","77b600c3":"# drop outliers\ndf_drop_idx = df[(df['price']>40000) & (df['horsepower']<200)].index\ndf.drop(df_drop_idx, axis=0)","e9f3c4c0":"df_str_cols = df.select_dtypes(include = 'object')\ndf_num_cols = df.select_dtypes(exclude = 'object')","18ce4589":"# make str columns to numerical columns using get_dummies\ndf_str_dummies = pd.get_dummies(df_str_cols, drop_first=True)\ndf_str_dummies","bf1da05a":"final_df = pd.concat([df_num_cols, df_str_dummies], axis=1)\nfinal_df","85c9fcad":"final_df.info()","237336f8":"final_df.corr()['price'].sort_values()","29343261":"from sklearn.model_selection import train_test_split","9fc6e151":"X = final_df.drop('price', axis=1)\ny= final_df['price']","2f1e20dd":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)","f33e0da7":"from sklearn.preprocessing import StandardScaler","b41b1822":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","8bc8d996":"from sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import GridSearchCV","71aeafb9":"base_elastic_net_model = ElasticNet()","58b7c0b3":"param_grid = {'alpha':[0.1,0.01, .05, .001], \n             'l1_ratio':[.65, .66, .67]}","b3296a22":"grid_model = GridSearchCV(estimator= base_elastic_net_model,\n                          param_grid = param_grid,\n                          scoring='neg_mean_squared_error',\n                          cv=5, verbose=0)","768708c9":"grid_model.fit(X_train, y_train)","f74de00f":"grid_model.best_params_","f0c3e81c":"y_pred = grid_model.predict(X_test)","daebfe09":"from sklearn.metrics import mean_absolute_error, mean_squared_error","7f144e90":"mae = mean_absolute_error(y_test, y_pred)\nmae","3e8d1843":"rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nrmse","6349125d":"from sklearn.metrics import r2_score","10b93027":"r2 = r2_score(y_test, y_pred)\nr2","f619ab11":"report = pd.DataFrame(data=[r2],columns=['R-SQUARED'])\nreport['RMSE']=rmse\nreport['MAE']=mae\nreport.index=['grid_model']\nreport","6ba0ebb2":"#### **drop useless columns**","ac38ac28":"##### 1. missing data","c3e7350d":"##### 2. outlier","bfb1c4ee":"##### quick eda","c249ddcb":"* no missing data(if it have missing values then have to fill, drop or fix the data)","385eeb16":"* still enginesize, curbweight, horsepower are top 3 correlated columns","92b994c9":"##### estimate mae, rmse, r2_score","38d40be5":"### conclusion\nThrough ElasticNet model and Grid Search, we get 86% r2 score (when alpha: 0.1, l1_ratio: 0.65 ).\nTop 5 features that effect on price are carlength, carwidth, horsepower, curbweight, and enginesize.","b98faf8a":"* In these scatter plots, we can find positive linearity and some outliers(e.g. when horsepower goes up but low price)","1d9cf457":"##### train\/ test set split","43802780":"* enginesize, curbweight, horsepower are highly related to car price","321d336c":"##### **import data**","ea22a302":"##### 3. categorical data processing","9227b4fa":"##### feature engineering","0ead1409":"* Accoring to Grid Search, best parameters are alpha: 0.1, l1_ratio: 0.65 ","d36be776":"##### fit model using ElasticNet and GridSearchCV","f76eea7b":"##### scaling data"}}