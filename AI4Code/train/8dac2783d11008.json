{"cell_type":{"93d3d6bd":"code","35dee9ab":"code","de14b488":"code","4be8c25e":"code","84257559":"code","947bb7e9":"code","015df908":"code","89ffedce":"code","62d81ecb":"code","e4fc8b4e":"code","d6ffcb4e":"code","a7bd6278":"code","b901e069":"code","d0dcca15":"code","99590ae8":"code","a4268c16":"code","b754440e":"code","040f1e20":"code","a3623e8f":"code","ab5119d0":"code","1a9a504a":"code","5b7f98e4":"code","a0df49a5":"code","c5a60ec9":"code","c318865f":"code","fc2626ec":"code","7855056b":"code","011f3df2":"code","38c32447":"code","c0d42801":"code","783628c6":"code","1adcdd51":"code","90155d97":"code","c374727c":"code","85be6b61":"code","dcfc9cc6":"code","6d408686":"code","26b0d65d":"code","4b3e8d9b":"code","f9a6a49e":"code","352ed15c":"code","97150b4c":"code","5f304d15":"code","11efa324":"code","97b9668e":"code","756ec4f3":"code","adbd1d9c":"code","6658a642":"code","0c137e33":"code","3a8bcfe4":"markdown"},"source":{"93d3d6bd":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\ndf=pd.read_csv(\"..\/input\/hr-analytics-case-study\/general_data.csv\")\ndf","35dee9ab":"df.columns","de14b488":"df.head()","4be8c25e":"df.tail()","84257559":"df.describe()","947bb7e9":"df.corr()","015df908":"print(df.isnull().any())\nprint(df.isnull().any().any())","89ffedce":"#df.drop(['EmployeeCount','EmployeeID','StandardHours','Over18','NumCompaniesWorked','TotalWorkingYears'],axis=1, inplace = True)\nplt.figure(figsize=(50,50)) #plt is the object of matplot lib and .figure() is used to show or change properties of graphs\nsns.heatmap(df.isnull(),cmap='viridis',yticklabels=False,cbar=False) #heatmaps are matrix plots which can visualize data in 2D\nplt.show()","62d81ecb":"df.fillna(0,inplace=True)","e4fc8b4e":"df.drop(['EmployeeCount','EmployeeID','StandardHours','Over18','NumCompaniesWorked','TotalWorkingYears'],axis=1, inplace = True)","d6ffcb4e":"df.columns","a7bd6278":"#df['NumCompaniesWorked'].value_counts()","b901e069":"df.columns","d0dcca15":"df.head()","99590ae8":"df.tail()","a4268c16":"#df.drop([\"EmployeeCount\",\"EmployeeID\",\"StandardHours\"],1,inplace= True)","b754440e":"df_corr = df[['Age','Attrition','BusinessTravel','DistanceFromHome','Education', 'EducationField','Gender', 'JobLevel', 'JobRole',\n       'MaritalStatus', 'MonthlyIncome',\n       'PercentSalaryHike', 'StockOptionLevel',\n       'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion',\n       'YearsWithCurrManager']]","040f1e20":"corr=df_corr.corr()\ncorr","a3623e8f":"f,ax = plt.subplots(figsize=(16, 7))\nsns.heatmap(corr, annot=True)\nplt.show()","ab5119d0":"print(round(df['Attrition'].value_counts(normalize = True),2))\nsns.countplot(x='Attrition',data=df)\n","1a9a504a":"sns.pairplot(df[['Age', 'Attrition', 'BusinessTravel', 'DistanceFromHome', 'EducationField', 'Gender', 'JobLevel', 'JobRole',\n       'MaritalStatus', 'MonthlyIncome',\n       'PercentSalaryHike', 'StockOptionLevel',\n       'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion',\n       'YearsWithCurrManager']],hue = 'Attrition')","5b7f98e4":"sns.countplot(x = \"Attrition\",data=df,hue=\"Gender\")\n#plt.scatter(df['Attrition'], data=df,hue=\"Gender\")\n#sns.catplot(x=\"Attrition\", y=df, data=df)\n#sns.boxplot(x=\"Attrition\", y=\"Gender\", data=df)","a0df49a5":"sns.countplot(x = \"Attrition\",data=df,hue=\"JobLevel\")","c5a60ec9":"sns.countplot(x = \"Attrition\",data=df,hue=\"MaritalStatus\")","c318865f":"sns.countplot(x = \"Attrition\",data=df)\nplt.show()","fc2626ec":"sns.pairplot(df[['Age','MonthlyIncome','DistanceFromHome','Gender']],hue = 'Gender',hue_order=['Male','Female'], palette={'Male':'black','Female':'yellow'},plot_kws={'alpha':0.1},height=4)","7855056b":"df.isnull().any()","011f3df2":"print(df['BusinessTravel'].unique())\nprint(df['Department'].unique())\nprint(df['EducationField'].unique())\nprint(df['Gender'].unique())\nprint(df['JobRole'].unique())\nprint(df['MaritalStatus'].unique())","38c32447":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder_X = LabelEncoder()\ndf['BusinessTravel'] = labelEncoder_X.fit_transform(df['BusinessTravel'])\ndf['Department'] = labelEncoder_X.fit_transform(df['Department'])\ndf['EducationField'] = labelEncoder_X.fit_transform(df['EducationField'])\ndf['Gender'] = labelEncoder_X.fit_transform(df['Gender'])\ndf['JobRole'] = labelEncoder_X.fit_transform(df['JobRole'])\ndf['MaritalStatus'] = labelEncoder_X.fit_transform(df['MaritalStatus'])","c0d42801":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder_y=LabelEncoder()\ndf['Attrition']=label_encoder_y.fit_transform(df['Attrition'])","783628c6":"f,ax = plt.subplots(figsize=(16, 7))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","1adcdd51":"df.corr()","90155d97":"df.isnull().any().any()","c374727c":"y=df['Attrition']\nx=df.drop('Attrition',axis=1)","85be6b61":"from sklearn.model_selection import train_test_split\nX_train,X_test, y_train, y_test = train_test_split(x,y, test_size = 0.20, random_state=42)","dcfc9cc6":"from sklearn.preprocessing import StandardScaler\nScaler_X = StandardScaler()\nX_train = Scaler_X.fit_transform(X_train)\nX_test = Scaler_X.transform(X_test)","6d408686":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score","26b0d65d":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\n","4b3e8d9b":"print(accuracy_score(y_test,y_pred))","f9a6a49e":"print(confusion_matrix(y_test,y_pred))","352ed15c":"log_score = cross_val_score(estimator=LogisticRegression(), X=X_test, y=y_test, cv=5)  ","97150b4c":"plt.plot(log_score)","5f304d15":"log_score","11efa324":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","97b9668e":"from sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","756ec4f3":"clf = DecisionTreeClassifier(random_state=42)\n#clf.fit(X_train, y_train)\nbag_clf = BaggingClassifier(base_estimator=clf, n_estimators=10)\nbag_clf.fit(X_train, y_train)\nbag_clf.predict(X_test)","adbd1d9c":"def kpi_metrics(clf, X_train, y_train, X_test, y_test, train=True):\n    '''\n    print the accuracy score, classification report and confusion matrix of classifier\n    '''\n    if train:\n        '''\n        training performance\n        '''\n        print(\"Train Result:\\n\")\n        print(\"accuracy score: {0:.4f}\\n\".format(accuracy_score(y_train, clf.predict(X_train))))\n        print(\"Classification Report: \\n {}\\n\".format(classification_report(y_train, clf.predict(X_train))))\n        print(\"Confusion Matrix: \\n {}\\n\".format(confusion_matrix(y_train, clf.predict(X_train))))\n\n        res = cross_val_score(clf, X_train, y_train, cv=10, scoring='accuracy')\n        \n        print(\"Average Accuracy: \\t {0:.4f}\".format(np.mean(res)))\n        \n        print(\"Accuracy SD: \\t\\t {0:.4f}\".format(np.std(res)))\n        return pd.DataFrame(res)\n        \n    elif train==False:\n        '''\n        test performance\n        '''\n        print(\"Test Result:\\n\")        \n        print(\"accuracy score: {0:.4f}\\n\".format(accuracy_score(y_test, clf.predict(X_test))))\n        print(\"Classification Report: \\n {}\\n\".format(classification_report(y_test, clf.predict(X_test))))\n        print(\"Confusion Matrix: \\n {}\\n\".format(confusion_matrix(y_test, clf.predict(X_test))))\n        \n        \n        res = cross_val_score(clf, X_test, y_test, cv=10, scoring='accuracy')\n        print(\"Average Accuracy: \\t {0:.4f}\".format(np.mean(res)))\n        print(\"Accuracy SD: \\t\\t {0:.4f}\".format(np.std(res)))\n        return pd.DataFrame(res)\n        ","6658a642":"import numpy as np\nkpi_metrics(bag_clf, X_train, y_train, X_test, y_test, train=True)","0c137e33":"kpi_metrics(bag_clf, X_train, y_train, X_test, y_test, train=False)","3a8bcfe4":"Problem Statement A large company named XYZ, employs, at any given point of time, around 4000 employees. However, every year, around 15% of its employees leave the company and need to be replaced with the talent pool available in the job market. The management believes that this level of attrition (employees leaving, either on their own or because they got fired) is bad for the company, because of the following reasons -\n\nThe former employees\u2019 projects get delayed, which makes it difficult to meet timelines, resulting in a reputation loss among consumers and partners\nA sizeable department has to be maintained, for the purposes of recruiting new talent\nMore often than not, the new employees have to be trained for the job and\/or given time to acclimatise themselves to the company\nHence, the management has contracted an HR analytics firm to understand what factors they should focus on, in order to curb attrition. In other words, they want to know what changes they should make to their workplace, in order to get most of their employees to stay. Also, they want to know which of these variables is most important and needs to be addressed right away.\n\nSince you are one of the star analysts at the firm, this project has been given to you.\n\nGoal of the case study You are required to model the probability of attrition using a logistic regression. The results thus obtained will be used by the management to understand what changes they should make to their workplace, in order to get most of their employees to stay."}}