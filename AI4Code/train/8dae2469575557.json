{"cell_type":{"8e1bc9b1":"code","068e998a":"code","14f27bfc":"code","15672017":"code","7703e6af":"code","7175ed23":"code","48823907":"code","2bebd7e1":"code","09979323":"code","5d4538d4":"code","716db0f3":"code","208745e7":"code","5a9a3721":"code","37a7db47":"code","739a2abc":"code","6bb0c983":"code","24775fc2":"code","4d40606a":"code","c09b38a8":"code","50b706fa":"code","0364d8fe":"code","aee02f5b":"code","08c3d2ce":"code","ca7e65ad":"code","b5529c0b":"code","0640daa7":"code","9d0da442":"code","a532af14":"code","a72eeb2b":"code","fc0ebcd1":"code","05d5ae53":"code","77b75581":"markdown"},"source":{"8e1bc9b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","068e998a":"import pandas as pd\nimport regex\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import model_selection, naive_bayes, metrics, svm\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\n#from keras.preprocessing import text, sequence\nfrom sklearn import model_selection\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix, classification_report","14f27bfc":"mydata = pd.read_csv('\/kaggle\/input\/disaster-tweets\/tweets.csv')","15672017":"mydata.head()","7703e6af":"mydata.shape","7175ed23":"mydata.to_csv('submission.csv', index=False)","48823907":"text = mydata['text']\nlabel = mydata['target']","2bebd7e1":"numOfClass = mydata.target.value_counts()\nprint(numOfClass)","09979323":"import matplotlib.pyplot as plt\nnames = ['0', '1']\nvalues = [numOfClass[0], numOfClass[1]]\nplt.figure(figsize=(7,7))\nplt.bar(names, values)\nplt.title('comparison of the two class')\nplt.ylabel(\"text\")\nplt.show","5d4538d4":"import re\ndef preprocess_text(sen):\n    # Removing html tags\n    sentence = remove_tags(sen)\n    # Remove punctuations and numbers\n    sentence = re.sub('[^a-zA-Z]', ' ', sentence)\n    # Single character removal\n    sentence = re.sub(r\"\\s+[a-zA-Z]\\s+\", ' ', sentence)\n    # Removing multiple spaces\n    sentence = re.sub(r'\\s+', ' ', sentence)\n    sentence = sen.lower()\n    sentence = re.sub(r'wo*w','wow', sentence)\n    sentence = re.sub(r'uu*f','uff', sentence)\n    sentence = re.sub(r'http\\S+', '', sentence)\n    sentence = re.sub(r'https\\S+', '', sentence)\n    return sentence\nTAG_RE = re.compile(r'<[^>]+>')\ndef remove_tags(text):\n    return TAG_RE.sub('', text)","716db0f3":"processed_text = []\nsentences = list(text)\nfor sen in sentences:\n    processed_text.append(preprocess_text(sen))","208745e7":"processed_text[0]","5a9a3721":"x_train, x_test, y_train, y_test = model_selection.train_test_split(processed_text, label, test_size=0.2, random_state=0)\nencoder = LabelEncoder()\ny_train = encoder.fit_transform(y_train)\ny_test = encoder.fit_transform(y_test)","37a7db47":"vectorized_data = TfidfVectorizer(analyzer='word',token_pattern=r'\\w{1,}', ngram_range=(1,3), max_features=5000)","739a2abc":"vectorized_data.fit(processed_text)","6bb0c983":"training_set = vectorized_data.transform(x_train)\ntesting_set = vectorized_data.transform(x_test)","24775fc2":"training_set = vectorized_data.transform(x_train)\ntesting_set = vectorized_data.transform(x_test)","4d40606a":"def train_model(classifier, feature_vector_train, label, feature_vector_validation, is_neural_net=False):\n    classifier.fit(feature_vector_train, label)\n    predictions = classifier.predict(feature_vector_validation)\n    if is_neural_net:\n        predictions = predictions.argmax(axis = -1)\n    return metrics.accuracy_score(predictions, y_test)","c09b38a8":"def train_model_classification(classifier, feature_vector_train, label, feature_vector_validation, is_neural_net=False):\n    classifier.fit(feature_vector_train, label)\n    predictions = classifier.predict(feature_vector_validation)\n    if is_neural_net:\n        predictions = predictions.argmax(axis = -1)\n    return metrics.classification_report(predictions, y_test)","50b706fa":"def train_model_classification(classifier, feature_vector_train, label, feature_vector_validation, is_neural_net=False):\n    classifier.fit(feature_vector_train, label)\n    predictions = classifier.predict(feature_vector_validation)\n    if is_neural_net:\n        predictions = predictions.argmax(axis = -1)\n    return metrics.confusion_matrix(predictions, y_test)","0364d8fe":"model = naive_bayes.MultinomialNB()\naccuracy_of_nb = train_model(model, training_set, y_train, testing_set)","aee02f5b":"print(accuracy_of_nb)","08c3d2ce":"classification_report = train_model_classification(model, training_set, y_train, testing_set)","ca7e65ad":"print(classification_report)","b5529c0b":"model2 = svm.SVC()\naccuracy_of_svm = train_model(model2, training_set, y_train, testing_set)","0640daa7":"print(accuracy_of_svm)","9d0da442":"def svm_model_classification(classifier, feature_vector_train, label, feature_vector_validation, is_neural_net=False):\n    classifier.fit(feature_vector_train, label)\n    predictions = classifier.predict(feature_vector_validation)\n    if is_neural_net:\n        predictions = predictions.argmax(axis = -1)\n    return metrics.classification_report(predictions, y_test)","a532af14":"report = svm_model_classification(model2, training_set, y_train, testing_set)","a72eeb2b":"print(report)","fc0ebcd1":"import matplotlib.pyplot as plt\nnames = ['support vector machine', 'Naibe Bayes']\nvalues = [accuracy_of_nb, accuracy_of_svm]","05d5ae53":"plt.figure(figsize=(5,7))\nplt.bar(names, values)\nplt.title('model Accuracy of SVM and NB')\nplt.ylabel(\"Accuracy\")\nplt.show","77b75581":"splitting the data into training and test set"}}