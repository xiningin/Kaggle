{"cell_type":{"f96f4d96":"code","8fce15ff":"code","be089b58":"code","36804c54":"code","9517381f":"code","a951a5f5":"code","33a00849":"code","016903c8":"code","d3c4a090":"code","98e14369":"code","b8d412f5":"code","2fe63c55":"code","5fbc18ac":"code","b9013f6f":"code","8208b4fd":"code","2a4a6a91":"code","78485f65":"code","7576e3d4":"code","7690f4d9":"code","98aee44b":"code","c19013b6":"code","b42f9d81":"code","2b4c1420":"code","fbd2a64f":"code","0649bd22":"code","2bebd869":"code","49f859cc":"code","ff7bfe9d":"code","1aeed06a":"code","ac1581f6":"code","ef3a3ef6":"code","27dfd0eb":"code","58249c6f":"code","a9afed33":"code","4b8c87fb":"code","b20ccc03":"code","a803ed29":"code","00db84d8":"code","6d323d4a":"code","d281ecd2":"code","24628b0c":"code","d201855c":"code","076d2b3d":"code","bc464d21":"code","2a30a4c2":"code","35c5e975":"code","a75b12ba":"code","8cf98ed3":"code","33aa49d7":"code","ed237808":"code","a5ae853e":"code","59d0e31e":"code","5e6f1252":"code","9b21536e":"code","83d5372e":"code","582be311":"code","5edc9d1d":"code","cbade184":"code","70abb758":"code","ff968f69":"code","80835283":"code","1311dbc1":"code","a71d7390":"code","6aebca25":"code","7f446fb8":"code","600515f4":"code","ecee0749":"code","5535aaa4":"code","482d4db8":"code","2426480a":"markdown","2ef63105":"markdown","b53f7562":"markdown","2cc122b5":"markdown","5a07a706":"markdown","cde19643":"markdown","f6c77b99":"markdown","758eabd2":"markdown","6ea020a3":"markdown","410a8ddb":"markdown","d687b133":"markdown","fcbb733b":"markdown","6e075d4e":"markdown","f8956136":"markdown","cde9257d":"markdown","38003af4":"markdown","181f203a":"markdown","dce139ec":"markdown","643edb22":"markdown","22ef9349":"markdown","9ea20a8a":"markdown","17d78a8a":"markdown","70a363cd":"markdown","9d6bea39":"markdown","861c64a0":"markdown","b1790925":"markdown","c014e7d6":"markdown","94ca87fa":"markdown","093af210":"markdown","38ebb96c":"markdown","001071d5":"markdown","cac989f4":"markdown","15e3ef7f":"markdown","e34f32e2":"markdown","fcdecfdf":"markdown","f74784cd":"markdown","a45cd1f4":"markdown","993f948e":"markdown","6005da82":"markdown","e29cc4cc":"markdown","077f1969":"markdown","f4b59b49":"markdown","b63594fd":"markdown","48fdc361":"markdown","3e651a17":"markdown","b9431559":"markdown","9aa4e85a":"markdown","ca0b8d08":"markdown","5258ac62":"markdown","0cb8c8d6":"markdown","bd27e7e1":"markdown","24c409be":"markdown","61a9eba5":"markdown","b2d299c4":"markdown","d0566bcb":"markdown","c47afd69":"markdown","961a951e":"markdown","ffd6edb8":"markdown","e495e0e5":"markdown","c59d0202":"markdown","2fab4261":"markdown","baeac71b":"markdown","04c92fd7":"markdown","9ecc96bf":"markdown","2f0af194":"markdown"},"source":{"f96f4d96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8fce15ff":"#import warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","be089b58":"#import libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","36804c54":"#import train data set\n\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","9517381f":"#import test data set\n\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","a951a5f5":"#describe train data set\n\nprint(train.shape)\nprint(train.info())\nprint(train.describe())","33a00849":"#check data type for p-class\nprint('Train[pclass]:',train.Pclass.dtype)","016903c8":"#change it to object data type\ntrain['Pclass'] = train['Pclass'].astype('object')\nprint('Train[pclass]:',train.Pclass.dtype)","d3c4a090":"#decoding p-class column\ntrain['Pclass'] = train['Pclass'].replace({1:'1st',2:'2nd',3:'3rd'}).astype('object')\n#counting the values\ntrain['Pclass'].value_counts(ascending=False)","98e14369":"#decoding embarked column\ntrain['Embarked'] = train['Embarked'].replace({'C':'Cherbourge','Q':'Queenstown','S':'Southampton'}).astype('object')\n#counting the values\ntrain['Embarked'].value_counts(ascending=False)","b8d412f5":"#describe test dataset\n\nprint(test.shape)\nprint(test.info())\nprint(test.describe())","2fe63c55":"#check the datatype for pclass\n\nprint('test[Pclass]:',test['Pclass'].dtype)","5fbc18ac":"#Change it to object datatype\ntest['Pclass'] = test['Pclass'].astype('object')\nprint('test[Pclass]:',test['Pclass'].dtype)","b9013f6f":"#decoding values for Pclass col\ntest['Pclass'] = test['Pclass'].replace({1:'1st',2:'2nd',3:'3rd'}).astype('object')\n#counting the values\ntest['Pclass'].value_counts()","8208b4fd":"#decoding values for Embarked col\ntest['Embarked'] = test['Embarked'].replace({'C':'Cherbourge','Q':'Queenstown','S':'Southampton'}).astype('object')\n#counting the values\ntest['Embarked'].value_counts()","2a4a6a91":"#findout missing values\ntrain.isnull().sum()","78485f65":"#for cabin\ntrain['Cabin'].describe()","7576e3d4":"train.Cabin[train['Cabin'].notnull()].head()","7690f4d9":"#fill the missing value\ntrain['Cabin'] = pd.Series(i[0] if not pd.isnull(i) else 'J' for i in train['Cabin'])\n#check the null values again\nprint(train['Cabin'].isnull().sum())","98aee44b":"train.Cabin.value_counts()","c19013b6":"#for age\ntrain['Age'].describe()","b42f9d81":"train['Age'] = train['Age'].fillna(train['Age'].median())\n#check the null values again\nprint(train['Age'].isnull().sum())","2b4c1420":"train['Embarked'].value_counts()","fbd2a64f":"train['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode()[0])\n#check the null values again\ntrain['Embarked'].isnull().sum()","0649bd22":"#findout missing values\ntest.isnull().sum()","2bebd869":"test['Age'].describe()","49f859cc":"#fill missing values with median\ntest['Age'] = test['Age'].fillna(test['Age'].median())\n#check the null values again if any\ntest['Age'].isnull().sum()","ff7bfe9d":"test['Cabin'].describe()","1aeed06a":"#fill the missing value\ntest['Cabin'] = pd.Series(i[0] if not pd.isnull(i) else 'J' for i in test['Cabin'])\n#check the null values again\nprint(test['Cabin'].isnull().sum())","ac1581f6":"test.Cabin.value_counts()","ef3a3ef6":"test['Fare'] = test['Fare'].fillna(test['Fare'].median())\n#check null values if any\ntest['Fare'].isnull().sum()","27dfd0eb":"print(train.isnull().sum())\nprint(test.isnull().sum())","58249c6f":"#pairplot for train set\nsns.pairplot(train)","a9afed33":"#heatmap\nplt.figure(figsize=(10,8))\nsns.heatmap(train.corr(),annot=True,cmap='RdYlGn')","4b8c87fb":"#heatmap for testset\nplt.figure(figsize=(8,6))\nsns.heatmap(test.corr(),annot=True,cmap='summer')","b20ccc03":"plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\ncolors = ['gold', 'yellowgreen', 'lightcoral']\nexplode = (0.1, 0, 0) #explode 1st slice\ntrain.Pclass.value_counts().plot.pie(explode=explode,colors=colors,autopct='%1.1f%%',shadow=True,startangle=140)\nplt.title('Passenger by class')\nplt.subplot(1,2,2)\nsns.barplot(x='Pclass',y='Survived',data=train)\nplt.title('Pclass vs Survival')\nplt.show()","a803ed29":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.countplot(x='Sex',hue='Pclass',data=train,palette='YlOrBr')\nplt.title('Sex vs Pclass')\nplt.subplot(1,2,2)\nsns.barplot(x='Pclass',y='Survived',hue='Sex',data=train)\nplt.ylabel('Survival Rate')\nplt.title('Sex & Passenger Class Vs Survival rate')\nplt.show()","00db84d8":"plt.figure(figsize=(10,6))\nsns.distplot(train[train['Survived']==0].Age,bins=20, kde=False, color='r',label= 'not survived')\nsns.distplot(train[train['Survived']==1].Age,bins=20 ,kde=False, color='b',label= 'survived')\nplt.title('Age Vs Survival rate',fontweight='bold',size=15)\nplt.legend()\n#plt.ylabel('Survival rate')\nplt.show()","6d323d4a":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.countplot(x='Embarked',hue='Pclass',data=train,palette='gist_heat')\nplt.title('Embarked vs Pclass')\nplt.subplot(1,2,2)\nsns.barplot(x='Pclass',y='Survived',hue='Embarked',data=train)\nplt.ylabel('Survival Rate')\nplt.title('Embarked & Passenger Class Vs Survival rate')\nplt.show()","d281ecd2":"plt.figure(figsize=(12,6))\nsns.barplot(x='Parch',y='Survived',data=train,palette='tab20')\nplt.title(\"Parent\/Child Vs Survival Rate\")\nplt.ylabel(\"Survival rate\")\nplt.show()","24628b0c":"plt.figure(figsize=(12,6))\nsns.barplot(x='SibSp',y='Survived',data=train,palette='tab20')\nplt.title(\"Sibling\/Spouse Vs Survival Rate\")\nplt.ylabel(\"Survival rate\")\nplt.show()","d201855c":"train['Family'] = train['SibSp']+train['Parch']+1\ntest['Family'] = test['SibSp']+test['Parch']+1","076d2b3d":"plt.figure(figsize=(10,6))\nsns.countplot('Family',hue='Pclass',data=train)\nplt.show()","bc464d21":"plt.figure(figsize=(10,6))\nsns.barplot(x='Pclass', y='Family',hue='Survived',data=train,palette='mako')\nplt.title('Family & Pclass Vs Survival rate')\n\nplt.show()","2a30a4c2":"plt.figure(figsize=(8,6))\ntrain.groupby('Pclass')['Fare'].sum().plot(kind='bar')\nplt.show()","35c5e975":"plt.figure(figsize=(10,6))\nsns.barplot('Cabin','Survived', hue='Pclass',data=train)\nplt.ylabel('Survival Rate')\nplt.show()","a75b12ba":"#Check columns\ntrain.columns","8cf98ed3":"#Drop above col from both train & test data.\n\ntrain.drop(['Name','SibSp','Parch','Ticket'],axis=1,inplace=True)\ntest.drop(['Name','SibSp','Parch','Ticket'],axis=1,inplace=True)","33aa49d7":"#Convert Pclass column \ncode = {'1st':1, '2nd':2, '3rd':3}\ntrain['Pclass'] = train['Pclass'].map(code)\ntest['Pclass'] = test['Pclass'].map(code)","ed237808":"#Convert Sex\ncode={\"male\":0, \"female\":1}\ntrain['Sex'] = train['Sex'].map(code)\ntest['Sex'] = test['Sex'].map(code)","a5ae853e":"#Convert Embarked\ncode={\"Cherbourge\":1, \"Queenstown\":2,\"Southampton\":3}\ntrain['Embarked'] = train['Embarked'].map(code)\ntest['Embarked'] = test['Embarked'].map(code)","59d0e31e":"#Convert Cabin\ncode = {'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'T':8,'J':9}\ntrain['Cabin'] = train['Cabin'].map(code)","5e6f1252":"#Convert Cabin\ncode = {'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'J':8}\ntest['Cabin'] = test['Cabin'].map(code)","9b21536e":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\ntrain[['Age','Fare']] = scaler.fit_transform(train[['Age','Fare']])\ntest[['Age','Fare']] = scaler.transform(test[['Age','Fare']])","83d5372e":"#check the train data\ntrain.head()","582be311":"#Check test data\ntest.head()","5edc9d1d":"X_train = train.drop(['PassengerId','Survived'],axis=1)\ny_train = train['Survived']\nX_test = test.drop(['PassengerId'],axis=1).copy()\nX_train.shape, y_train.shape, X_test.shape","cbade184":"#import libraries\nfrom sklearn.linear_model import LogisticRegression\nLR = LogisticRegression()\n\n#Fitting the model\nLR.fit(X_train,y_train)","70abb758":"#making prediction\ny_pred = LR.predict(X_test) ","ff968f69":"#calculating accuracy of our model\nprint(\"Accuracy:\",round(LR.score(X_train,y_train)*100,2))","80835283":"LR.coef_","1311dbc1":"X_train.columns","a71d7390":"features = ['Pclass', 'Sex', 'Age', 'Fare', 'Cabin', 'Embarked', 'Family']","6aebca25":"coeff = pd.DataFrame(X_train.columns)\ncoeff.columns = ['Feature']\ncoeff['Correlation'] = pd.Series(LR.coef_[0])\n\ncoeff.sort_values(by='Correlation', ascending=False)","7f446fb8":"from sklearn.ensemble import RandomForestClassifier\nRF = RandomForestClassifier(n_estimators=100,random_state=22)\n\n#fitting model on trained set\nRF.fit(X_train,y_train)","600515f4":"#making prediction\ny_pred = RF.predict(X_test)","ecee0749":"#calculating accuracy\nprint(\"Accuracy:\",round(RF.score(X_train,y_train)*100,2))","5535aaa4":"feature_1 = pd.Series(RF.feature_importances_,index=features).sort_values(ascending=False)\nfeature_1","482d4db8":"Submit_file = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':y_pred})\nSubmit_file.to_csv('Titanic_predict.csv', index=False)","2426480a":"* We can add Sibsp and Parch column and take as a family and visualize overall data","2ef63105":"## **Logistic Regression**","b53f7562":"Observation:\n* Family size having one members are maximum in 3rd-pclass.\n* It gradually decresing once family size is incresing.","2cc122b5":"# **Importing Dataset**","5a07a706":"## **Random Forest**","cde19643":"Observation:\n* From above plot we noticed that higher survival rate are the middle age passenger from 20-30.\n* Below 5(children) are saved atmost.\n* Death rate age were from 15-30.\n* The oldest 80's passenger was survived.","f6c77b99":"### **ii. Missing values for test set**","758eabd2":"# **ii. Test-set description**","6ea020a3":"Observation:\n\n1. In Test data there are total 418 rows and 11 columns.\n2. There is no survived colun in test data set. we need to find out the survive pessangers for test set.\n3. P-class is a categorical variable. we would need to change the data type from int to object and replace it as respective.\n4. Embarked column is object type and it has further classified as 'C':'Cherbourge','Q':'Queenstown', 'S'='Southampton'.","410a8ddb":"Test set having null values in Age:86, Cabin:327, Fare:1 column.","d687b133":"### **i. Missing values for train set**","fcbb733b":"* We can drop 'Name' as we have PassengerId. So no required of name for analysis.\n* We can drop 'SibSp','Parch'as we created Family for it.\n* We can drop 'Ticket' column too.","6e075d4e":"## **Parch-Parent\/Children vs Survived**","f8956136":"Observation:\n* In 3rd class there is a high count of both male and female passengers.\n* Male passengers are more than female passengers.\n* Female surviver rate is more than male survivor from every class.\n* Female & male surviver are more in 1st class as compare to other classes.\n* Maximum rate of dead cases are from 3rd class male & female passengers.","cde9257d":"### **b. Cabin**","38003af4":"### **c. Scalling features**","181f203a":"## **Age Vs Survival**","dce139ec":"### **b. Dealing with Categorical variable**","643edb22":"Observation:\n* Most passengers from Southampton were travelled in 3rd class.\n* Maximum survival rate from 1st-pclass and from cherbourge place.","22ef9349":"* We can check there are few cabin assigned to pessangers. There might be assign or not assign cabin to other pasengers, hence there values are coming as null. we can make one group called \"general\" and assign as 'J' and fill those missing value.","9ea20a8a":"In Logistic Regression:\n* Accuracy : 79.46\n* Important Features : Sex, Fare, Cabin\n\nIn Random Forest:\n* Accuracy: 98.32\n* Important Features : Sex, fare, Age ","17d78a8a":"### **Handling missing value for train set**","70a363cd":"### **Feature Importance**","9d6bea39":"Observation:\n* Its obvious that 1st-pclass having higher fare as comapre to other p-class","861c64a0":"Observation:\n* There is an high correlation between Age and fair. The ticket price was based on pessanger age.\n* Survived and Fare are also highly correlated. that means we can assume that based on fair survival rate has given priority.","b1790925":"## **Sex & Pclass Vs Surviva**l","c014e7d6":"Observation:\n* We can noticed that parent with children from 1 to 3 were having higher number of survival chance.\n* Once they increases, survival rate becomes less.","94ca87fa":"## **Family Vs Pclass**","093af210":"## **Cabin Vs Pclass**","38ebb96c":"**a. Changing data type for p-class and survived column.**","001071d5":"### b. Age","cac989f4":"### **c.Fare**","15e3ef7f":"So there is no null value present in both set.Now we can step further.","e34f32e2":"Fill the na values with mode","fcdecfdf":"Here we can imputing missing values with median","f74784cd":"## **Sibsp-Sibling\/Spouse Vs Survival**","a45cd1f4":"### c. Embarked","993f948e":"## **Pclass Vs Survival**","6005da82":"### **Handling missing values for test set**","e29cc4cc":"## **Family & Pclass Vs Survival rate**","077f1969":"## **Findout Missing values and Handling it**","f4b59b49":"**a. Changing data type for p-class.**","b63594fd":"Observation:\n* Missing value are present in Age, Cabin and Embarked\n* There are 687 for Cabin, 177 for Age, 2 for Embarked missing values.\n* Need to fill those missing value as per requirements.","48fdc361":"## ***Thank you for your time.. :)***","3e651a17":"## **Embarked & Pclass vs Survived**","b9431559":"Observation:\n1. In Train data there are total 891 rows and 12 columns.\n2. P-class is a categorical variable. we would need to change the data type from int to object and replace it as respective.\n4. Embarked column is object type and it has further classified as 'C':'Cherbourge','Q':'Queenstown', 'S'='Southampton'.\n5. In train set describe we can check that total 891 passengers were travelling from which only 38% pessanger survived.","9aa4e85a":"Now we can check for both train & test set if any null value present or not.","ca0b8d08":"### **a. Age**","5258ac62":"# **Conclusion:**","0cb8c8d6":"## **Fare vs Pclass**","bd27e7e1":"b. **Decoding values for Pclass column and Embarked column**","24c409be":"# **i. Train-set description**","61a9eba5":"# **The Challenge**\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","b2d299c4":"# **Model Building**","d0566bcb":"### **a. Drop unnessesary column**","c47afd69":"Observation:\n* Family having 2 members from 2nd-pclass has survived as comapare to other two.\n* family having 2 or more members from 3rd pclass have not survived.","961a951e":"### a. Cabin","ffd6edb8":"**b. Decoding values for Pclass column and Embarked column**","e495e0e5":"## **2. Data Visualization**","c59d0202":"![image.png](attachment:image.png)","2fab4261":"Observation:\n* From zero to one sibling\/spouse, the survival rate got increased.\n* Where number of sibling\/spouse increases, the survival rate has decresed accordingly.","baeac71b":"Observation:\n* There are more number of passengers in cabin E.\n* there are more 3rd_pclass passenger in cabin E & G\n* Cabin A,B,C,D having 1st-pclass passengers.\n* From cabin E, more passengers got rescued as compare to others Cabin.","04c92fd7":"Observation:\n* Age & fare is highly correlated like train set.\n* fare was completely depend on the no. of members from each passenger's family i.e.parents,child, spouse etc..","9ecc96bf":"# **Data Preparation**","2f0af194":"Observation:\n* There are maximum number of passengers travelling in 3rd class i.e. 55.1%, where passenger rate in 1st & 2nd class were around 24% and 20% respectively.\n* But the survival rate of 3rd class passengers are very low.\n* Where 1st class passenger survival rate is highest."}}