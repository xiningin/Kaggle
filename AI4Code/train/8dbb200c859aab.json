{"cell_type":{"d823ee95":"code","e0af897e":"code","a42ade48":"code","d64dc7b3":"code","593d0601":"code","630cd0e8":"code","9df88619":"code","ae932105":"code","494ea7f3":"code","e88aeb09":"code","366b2a54":"code","bff72532":"code","47dbd988":"code","e0a94b44":"code","10c29fab":"code","e57e88c7":"code","9cc8e14f":"code","500a8bb3":"code","8abba6b3":"code","92ddbc90":"code","ad74c6f6":"code","b3cc584f":"code","d7772164":"code","6618beb6":"code","040cc25f":"code","faabde7b":"code","4bfa42cf":"code","2c459c66":"markdown","133d08f0":"markdown","37214b16":"markdown","f317a7b9":"markdown","769b3964":"markdown"},"source":{"d823ee95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0af897e":"# Importar el dataframe de netflix\nimport pandas as pd\nnetflix = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","a42ade48":"# Analizando la estructura del dataframe\nnetflix.info()","d64dc7b3":"# Analizar la estructura del dataframe\nnetflix.head(3)","593d0601":"# Analizar el numero de eventos en el dataframe\nnetflix.describe()","630cd0e8":"# Analizar una serie random de datos\nnetflix.sample(10)","9df88619":"# Investigando los tipos de valores en la columna 'type'\n\nnetflix.type.unique()","ae932105":"# Revisar la sinopsis de una pelicula\nsynopsis = netflix['description']\nsynopsis[1956]","494ea7f3":"# Analizar las peliculas segun su a\u00f1o de publicaci\u00f3n\nnetflix.release_year.describe()","e88aeb09":"# Dataframe de 'TV Show'\ntv_shows = netflix[netflix.type == 'TV Show']\ntv_shows.sample(5)","366b2a54":"# Ajustar variables para procesamiento\ntv_shows_split = tv_shows['duration'].str.split(' ', expand = True)\ntv_shows_split.columns = ['Seasons', 'Null']\ntv_shows_split\ntype(tv_shows_split['Seasons'])\ntv_shows_split.describe()\ntv_shows_split.sample(10)","bff72532":"# Busqueda de Cobra Kai en dataframe de Netflix\ncobra_kai = netflix[netflix.title == 'Cobra Kai']\ncobra_kai","47dbd988":"# Segmentar las peliculas de a\u00f1o de 2017 o posteriores, percentil 50-100%\ntitles_2017 = netflix.release_year >= 2017\ntitles_2017 = netflix[titles_2017]","e0a94b44":"# Segmentar el percentil 0-50%\ntitles_down2017 = netflix[netflix.release_year < 2017]\ntitles_down2017.head(3)","10c29fab":"# Revisi\u00f3n del codigo anterior\ntitles_2017.describe()","e57e88c7":"#Revisi\u00f3n del codigo anterior\ntitles_2017.tail(3)","9cc8e14f":"# Ordenar los valores por el a\u00f1o de lanzamiento\nnetflix.sort_values('release_year', ascending=False).head(5)","500a8bb3":"# Agrupando el numero de peliculas y directores por a\u00f1o\n\nnetflix_anual = netflix.groupby('release_year')[['title']].count()\nnetflix_anual","8abba6b3":"# Agrupando el numero de peliculas por pais\n\nnetflix_country = netflix.groupby('country')[['title']].count()\nnetflix_country","92ddbc90":"# Ordenando los paises con mayor numero de peliculas publicadas\n\nnetflix_country.sort_values('title', ascending = False).head(10)","ad74c6f6":"# Buscando a mi director favorito 'Martin Scorsese'\n\ntitles_scorsese = netflix[netflix.director == 'Martin Scorsese']\ntitles_scorsese.head(10).sort_values('duration')","b3cc584f":"# Buscando a mi director favorito 'Martin Scorsese'\n\ntitles_drama = netflix[netflix.release_year == 2002]\ntitles_drama.head(2)","d7772164":"# Importar librerias de visualizaci\u00f3n de datos\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ","6618beb6":"# Numero de peliculas y directores por a\u00f1o\nsns.set_style(\"darkgrid\")\n\nplt.figure(figsize = (16, 8))\n\nplt.plot(netflix_anual, marker = 'x')\n\nplt.xlabel('Year')\nplt.ylabel('Number of movies')\n\nplt.title('Peliculas lanzadas por a\u00f1o')\nplt.legend('Movies')","040cc25f":"#Histograma de peliculas\n\nplt.figure(figsize = (16, 8))\nplt.hist(netflix.release_year, bins = 30);","faabde7b":"# Agrupando por tipo de contenido\n\ntv_movie = netflix.groupby('type')[['title']].count()\ntv_movie","4bfa42cf":"# Exportar la tabla a CSV\n\nnetflix_anual.to_csv('netflix_anual.csv')","2c459c66":"# Etapa de exploraci\u00f3n de la informaci\u00f3n","133d08f0":"# Visualizando los primeros datos","37214b16":"# Tesis principal\nSomos una agencia de marketing que quiere realizar una alianza estrategica con Netflix. \u00bfQu\u00e9 ideas se te ocurren para maximizar esta alianza?","f317a7b9":"# Realizando las primeros queries o estructuras","769b3964":"### Para considerar...\n\nHere's a summary of the functions & methods we've looked at so far:\n\n- pd.read_csv - Read data from a CSV file into a Pandas DataFrame object\n- .info() - View basic infomation about rows, columns & data types\n- .describe() - View statistical information about numeric columns\n- .columns - Get the list of column names\n- .shape - Get the number of rows & columns as a tuple\n\nHere's a summary of the functions & methods we looked at in this section:\n\n- covid_df['new_cases'] - Retrieving columns as a Series using the column name\n- new_cases[243] - Retrieving values from a Series using an index\n- covid_df.at[243, 'new_cases'] - Retrieving a single value from a data frame\n- covid_df.copy() - Creating a deep copy of a data frame\n- covid_df.loc[243] - Retrieving a row or range of rows of data from the data frame\n- head, tail, and sample - Retrieving multiple rows of data from the data frame\n- covid_df.new_tests.first_valid_index - Finding the first non-empty index in a series\n\nHere's a summary of the functions & methods we looked at in this section:\n\n- covid_df.new_cases.sum() - Computing the sum of values in a column or series\n- covid_df[covid_df.new_cases > 1000] - Querying a subset of rows satisfying the chosen criteria using boolean expressions\n- df['pos_rate'] = df.new_cases\/df.new_tests - Adding new columns by combining data from existing columns\n- covid_df.drop('positive_rate') - Removing one or more columns from the data frame\n- sort_values - Sorting the rows of a data frame using column values\n- covid_df.at[172, 'new_cases'] = ... - Replacing a value within the data frame"}}