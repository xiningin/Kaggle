{"cell_type":{"d2f101d1":"code","ca501af6":"code","b341efdc":"code","9c00d493":"code","fdce6240":"code","a7288bd4":"code","093f3d8f":"code","a7d62034":"code","8eab5d07":"code","9a14ec71":"code","90c3e670":"code","1037b3f0":"code","5a8e3965":"code","5f9ec31c":"code","4beb372c":"code","e9a49a2b":"code","ae30eb71":"code","11e99b83":"code","5b1cc7f1":"code","5b7ee859":"code","8549831e":"code","5c939d33":"code","e825c3d9":"code","fc5116fd":"code","7ee5f72e":"markdown","9caaa1aa":"markdown","d00cc726":"markdown","40e1dc23":"markdown","fe99770c":"markdown","96483d0b":"markdown","bac51d6f":"markdown","c5c458d6":"markdown","4d9420e0":"markdown","a569c3fc":"markdown","817c007d":"markdown","f7463993":"markdown","fb456cc3":"markdown","21157b67":"markdown","2a00bc06":"markdown","f506fc93":"markdown","b780d89a":"markdown","91d63696":"markdown","013b555a":"markdown","42874147":"markdown","2a5b5166":"markdown","99624801":"markdown","b9fbfef6":"markdown","3dc5e9f6":"markdown","656266fe":"markdown","09612ce8":"markdown","32878e2e":"markdown"},"source":{"d2f101d1":"import numpy as np \nimport pandas as pd\nfrom statistics import mode\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\n\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca501af6":"# Load Data\n\nplays_pd = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')\n\nplay_man_pd = pd.read_csv('\/kaggle\/input\/setting-the-table-coverage-data-bowl-2018\/play_pred.csv') \\\n                .drop('Unnamed: 0',axis=1)\n# player_man_pd = pd.read_csv('\/kaggle\/input\/setting-the-table-coverage-data-bowl-2018\/player_level_man_pred.csv') \\\n#                   .rename(columns={'displayName':'covering','isManPred':'isManCoverage'})\n\n\nplayer_man_pd = pd.read_csv('\/kaggle\/input\/setting-the-table-coverage-data-bowl-2018\/def_player_level_man_pred.csv') \\\n                  .rename(columns={'displayName':'defender','isManPred':'isManCoverage'})\n\ncoverage_pd = pd.read_csv('\/kaggle\/input\/setting-the-table-coverage-data-bowl-2018\/coverage_pairings_2018.csv') \\\n                .drop('Unnamed: 0',axis=1)\nmadden_scores = pd.read_excel('\/kaggle\/input\/madden19-ratings\/madden_nfl_19_-_full_player_ratings_1.xlsx')[['Name','Overall','Team']]\n\ndiff_pd = madden_scores.rename(columns={'Overall':'difficulty','Name':'covering','Team':'off_team'})[['covering','difficulty','off_team']]\n\ndf_team_pd = madden_scores.rename(columns={'Name':'defender','Team':'def_team'})[['defender','def_team']]\n\nrevis_pd = coverage_pd.merge(player_man_pd, on=['gameId','playId','defender']) \\\n                      .merge(play_man_pd, on=['gameId','playId']) \\\n                      .merge(diff_pd,on='covering') \\\n                      .merge(df_team_pd, on='defender')\n\n# Columns & Helpers needed along the way\nrevis_pd['completed'] = revis_pd.targetted & (revis_pd.passResult == 'C')\n\ndiff = revis_pd[['covering','difficulty']].drop_duplicates().difficulty \ndiff_mean = np.mean(diff)\ndiff_std = np.std(diff)\n\nrevis_pd['zscore'] = (revis_pd.difficulty - diff_mean)\/diff_std\nrevis_pd['normalDiff'] = (revis_pd.difficulty - min(diff))\/(max(diff)-min(diff))*4+1\n\n### gameImpact strictly shows up after we score our plays\n\nrevis_pd","b341efdc":"# Visual: Largest Change when converting to EPA Yards\ncompleted_pd = plays_pd[(plays_pd.passResult == 'C')& \\\n                        ~(plays_pd.playDescription.str.contains('FUMBLE'))&\\\n                        (plays_pd.playResult > 0)].copy()\n\ncompleted_pd['epa_yards'] = completed_pd.playResult\n\n# If First Down\ncompleted_pd.loc[completed_pd.playResult >= completed_pd.yardsToGo, 'epa_yards'] = completed_pd.epa_yards * \\\n                                                                                    (0.8 + completed_pd.down\/5)\n\n# If Touchdown\ncompleted_pd.loc[completed_pd.playDescription.str.contains('TOUCHDOWN'), 'epa_yards'] = completed_pd.epa_yards * 1.6\n\n# If Close Game\ncompleted_pd.loc[abs(completed_pd.preSnapHomeScore - completed_pd.preSnapVisitorScore)<=10, 'epa_yards'] = completed_pd.epa_yards * \\\n                                                                                                          (0.9 + completed_pd.quarter\/10)\n# If meaningless yards\ncompleted_pd.loc[(completed_pd.epa <= 0), 'epa_yards'] = 0\n\ncompleted_pd['delta'] = completed_pd.epa_yards-completed_pd.playResult\n\ncolor = ['green','yellow','orange','red']\ndwn = ['1st Down','2nd Down','3rd Down', '4th Down']\n\nlayout = go.Layout(\n                title='Weighting Contextually Important Completions',\n                paper_bgcolor='rgba(0,0,0,0)',\n                plot_bgcolor='rgba(0,0,0,0)',\n                xaxis = dict(title = 'Yards Gained'),\n                yaxis = dict(title = 'Game Impact'),\n)\n\nfig = go.Figure(layout = layout)\n\nfor i in range(4):\n    d = completed_pd[completed_pd.down == i+1]\n\n    trace1 = go.Scatter(\n    x=d.playResult,\n    y=d.epa_yards,\n    text=d.playDescription,\n    name= dwn[i],\n    hoverinfo='text',\n    mode='markers',\n    marker=dict(\n        color=color[i]))\n    \n    fig.add_trace(trace1)\n\n\n\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'y', y0= 0, y1= 100,\n      xref= 'x', x0= 0, x1= 100\n    )\n    \n])\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"y\",\n            x=46, y=153,\n            text=\"<b>1<\/b>\",\n            showarrow=False)\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"y\",\n            x=48, y=0,\n            text=\"<b>2<\/b>\",\n            showarrow=False)\n\niplot(fig)","9c00d493":"incomplete_pd = plays_pd[((plays_pd.passResult == 'I')|(plays_pd.passResult == 'IN'))&\n                         ~(plays_pd.playDescription.str.contains('sack'))&\n                         ~(plays_pd.playDescription.str.contains('PENALTY'))&\n                        ~(plays_pd.playDescription.str.contains('FUMBLE'))&\n                        ~(plays_pd.playDescription.str.contains('Intentional Grounding'))&\n                        ~(plays_pd.playDescription.str.contains('Roughness'))].copy()\n\n# If increases chance of victory \nincomplete_pd['epa_yards'] = incomplete_pd.epa+incomplete_pd.epa*(incomplete_pd.down-1)\n# incomplete_pd.loc[incomplete_pd.passResults == 'IN', 'epa_yards'] = \n\n\n# If Close Game\nincomplete_pd.loc[abs(incomplete_pd.preSnapHomeScore - incomplete_pd.preSnapVisitorScore)<=10, 'epa_yards'] = incomplete_pd.epa_yards * \\\n                                                                                                          (0.9 + incomplete_pd.quarter\/10)\n\n# If RedZone\nincomplete_pd.loc[incomplete_pd.absoluteYardlineNumber <= 45, 'epa_yards'] = incomplete_pd.epa_yards * \\\n                                                                    (1 + (45-incomplete_pd.absoluteYardlineNumber)\/30)\n\n\ncolor = ['green','yellow','orange','red']\ndwn = ['1st Down','2nd Down','3rd Down', '4th Down']\n\nlayout = go.Layout(\n                title='Weighting Contextually Important Incompletions',\n                paper_bgcolor='rgba(0,0,0,0)',\n                plot_bgcolor='rgba(0,0,0,0)',\n                xaxis = dict(title = 'Yards to Endzone'),\n                yaxis = dict(title = 'Game Impact', range=[-25,0.5]),\n    \n)\n\nfig = go.Figure(layout = layout)\n\nfor i in range(4):\n    d = incomplete_pd[incomplete_pd.down == i+1]\n\n    trace1 = go.Scatter(\n    x=d.absoluteYardlineNumber,\n    y=d.epa_yards,\n    text=d.playDescription,\n    name= dwn[i],\n    hoverinfo='text',\n    mode='markers',\n    marker=dict(\n        color=color[i]))\n    \n    fig.add_trace(trace1)\n\n\n\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'y', y0= 0, y1= 0,\n      xref= 'paper', x0= 0, x1= 1,\n    )\n    \n])\n\niplot(fig)\n","fdce6240":"# Handle Edge Cases\n   \nsacks = plays_pd[(plays_pd.passResult == 'S')|plays_pd.playDescription.str.contains('Intentional Grounding')][['gameId','playId']].copy()\nsacks['epa_yards'] = 0\n\noff_penalty_mask = ((plays_pd.penaltyCodes!='ING')& \\\n                   ((plays_pd.penaltyCodes.str.contains('D'))|(plays_pd.penaltyCodes.str.contains('d'))))\n\ncatch_val_mask = (plays_pd.playDescription.str.contains('FUMB')) | off_penalty_mask |\\\n                 (plays_pd.penaltyCodes=='RPS')\n\nfumbles = plays_pd[(plays_pd.passResult != 'S') & catch_val_mask] \\\n                 [['gameId','playId','offensePlayResult']]\n\nfumbles.columns = ['gameId','playId','epa_yards']\n\nfumbles = fumbles.append(sacks)\n\nepa_pd = completed_pd[['gameId','playId','epa_yards']] \\\n                    .append(incomplete_pd[['gameId','playId','epa_yards']]) \\\n                    .append(fumbles)\n\nepa_plays = plays_pd.merge(epa_pd, on=['gameId','playId'],how='left')\nepa_plays.loc[epa_plays['epa_yards'].isnull(),'epa_yards'] = epa_plays['playResult']\n\n\n","a7288bd4":"# Prep for JJ Visual \nrevis_pd = revis_pd.merge(epa_plays[['gameId','playId','epa_yards']],on=['gameId','playId']) \\\n                   .rename(columns={'epa_yards':'gameImpact'})\n\ngames_pd = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv')\n\nimpacts = revis_pd[revis_pd.targetted].groupby(['covering','gameId'])['gameImpact'].sum().values\nmean_ = round(np.mean(impacts),2)\nmax_ = 250\nprint(\"Average Impact: {}\".format(mean_))\nprint(\"Max Impact: {}, capped at 250 for visual\".format(round(np.max(impacts),2)))","093f3d8f":"## TODO: \n    # Make Widget to look up other receivers\n    # Color Background with Team Logo\n    # Color Bars Against Team Colors","a7d62034":"# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Look at Resistance for Just Julio Jones\nwr = 'Julio Jones'\n\nx = revis_pd[revis_pd.covering==wr].groupby('gameId').agg({\"playId\":[\"count\"],\n                                                                  \"targetted\":[\"sum\"],\n                                                                 \"completed\":[\"sum\"]})\n\nx2 = revis_pd[(revis_pd.targetted)&(revis_pd.covering==wr)].groupby('gameId').agg({\"gameImpact\":['sum']})\n\nx = x.merge(x2,on='gameId')\nx.columns = ['snaps','targets','completed','impact']\nx['targetsPerSnap'] = np.round(100*x['targets']\/x['snaps'],0)\nx['completionsPerTarget'] = np.round(100*x['completed']\/x['snaps'],0)\n\n# Get Team Names and week\nx_pd = x.merge(games_pd[['gameId','homeTeamAbbr','visitorTeamAbbr','week']],on='gameId')\nx_pd['against'] = x_pd.homeTeamAbbr\nwr_team = mode(x_pd.homeTeamAbbr)\n\nx_pd.loc[x_pd.against == wr_team, 'against'] = x_pd.visitorTeamAbbr\nx_pd = x_pd.drop(['homeTeamAbbr','visitorTeamAbbr'],axis=1) \\\n           .sort_values('week')\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Bar(x=x_pd.week, y=x_pd.impact, opacity=0.5, name=\"Game Impact Score\", hovertemplate ='Against '+x_pd.against),\n    secondary_y=True,\n)\n\nfig.add_trace(\n    go.Scatter(x=x_pd.week, y=x_pd.targetsPerSnap, name=\"Targets per Snap (%)\", \n               hovertemplate =x_pd.targetsPerSnap.astype(int).astype(str)+'%'),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=x_pd.week, y=x_pd.completionsPerTarget, name=\"Completions per Snap (%)\", \n               hovertemplate =x_pd.completionsPerTarget.astype(int).astype(str)+'%'),\n    secondary_y=False,\n)\n\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      name='average WR impact',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'y2', y0= mean_, y1= mean_,\n      xref= 'paper', x0= 0, x1= 0.94\n    )])\n\n# Add figure title\nfig.update_layout(\n    title_text=wr+\" Game Impact 2018\"\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Game\", range=[1, 17])\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"Receiving Statistics (%)\", range=[0, 101], showgrid=False, secondary_y=False)\nfig.update_yaxes(title_text=\"Impact Score\", range=[0, 250], showgrid=False, secondary_y=True)\n\nfig.show()","8eab5d07":"# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n\nrevis_pd['completed'] = revis_pd.targetted & (revis_pd.passResult == 'C')\n\n# Look at Resistance for just Marvin Hall\nwr = 'Marvin Hall'\n\nx = revis_pd[revis_pd.covering==wr].groupby('gameId').agg({\"playId\":[\"count\"],\n                                                                  \"targetted\":[\"sum\"],\n                                                                 \"completed\":[\"sum\"]})\n\nx2 = revis_pd[(revis_pd.targetted)&(revis_pd.covering==wr)].groupby('gameId').agg({\"gameImpact\":['sum']})\n\nx = x.merge(x2,on='gameId')\nx.columns = ['snaps','targets','completed','impact']\nx['targetsPerSnap'] = np.round(100*x['targets']\/x['snaps'],0)\nx['completionsPerTarget'] = np.round(100*x['completed']\/x['snaps'],0)\n\n# Get Team Names and week\nx_pd = x.merge(games_pd[['gameId','homeTeamAbbr','visitorTeamAbbr','week']],on='gameId')\nx_pd['against'] = x_pd.homeTeamAbbr\nwr_team = mode(x_pd.homeTeamAbbr)\n\nx_pd.loc[x_pd.against == wr_team, 'against'] = x_pd.visitorTeamAbbr\nx_pd = x_pd.drop(['homeTeamAbbr','visitorTeamAbbr'],axis=1) \\\n           .sort_values('week')\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Bar(x=x_pd.week, y=x_pd.impact, opacity=0.5, name=\"Game Impact Score\", hovertemplate ='Against '+x_pd.against),\n    secondary_y=True,\n)\n\nfig.add_trace(\n    go.Scatter(x=x_pd.week, y=x_pd.targetsPerSnap, name=\"Targets per Snap (%)\", \n               hovertemplate =x_pd.targetsPerSnap.astype(int).astype(str)+'%'),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=x_pd.week, y=x_pd.completionsPerTarget, name=\"Completions per Snap (%)\", \n               hovertemplate =x_pd.completionsPerTarget.astype(int).astype(str)+'%'),\n    secondary_y=False,\n)\n\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      name='average WR impact',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'y2', y0= mean_, y1= mean_,\n      xref= 'paper', x0= 0, x1= 0.94\n    )])\n\n# Add figure title\nfig.update_layout(\n    title_text=wr+\" Game Impact 2018\"\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Game\", range=[1, 17])\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"Receiving Statistics (%)\", range=[0, 101], showgrid=False, secondary_y=False)\nfig.update_yaxes(title_text=\"Impact Score\", range=[0, 250], showgrid=False, secondary_y=True)\n\nfig.show()","9a14ec71":"def show_game_impact(wr_name):\n    # CREATE WIDGET + SAMPLE\n\n    # Create figure with secondary y-axis\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n\n    revis_pd['completed'] = revis_pd.targetted & (revis_pd.passResult == 'C')\n\n    # Look at Resistance for Just Julio Jones\n    wr = revis_pd[['covering']].drop_duplicates().sample()['covering'].values[0]\n\n    x = revis_pd[revis_pd.covering==wr_name].groupby('gameId').agg({\"playId\":[\"count\"],\n                                                                      \"targetted\":[\"sum\"],\n                                                                     \"completed\":[\"sum\"]})\n\n    if len(x) < 1:\n        print('Could not find a receiver named {}...\\nBut if you\\'re interested, you could look up the stats for {}!'.format(wr_name,wr))\n    else:\n        x2 = revis_pd[(revis_pd.targetted)&(revis_pd.covering==wr_name)].groupby('gameId').agg({\"gameImpact\":['sum']})\n\n        x = x.merge(x2,on='gameId')\n        x.columns = ['snaps','targets','completed','impact']\n        x['targetsPerSnap'] = np.round(100*x['targets']\/x['snaps'],0)\n        x['completionsPerTarget'] = np.round(100*x['completed']\/x['snaps'],0)\n\n        # Get Team Names and week\n        x_pd = x.merge(games_pd[['gameId','homeTeamAbbr','visitorTeamAbbr','week']],on='gameId')\n        x_pd['against'] = x_pd.homeTeamAbbr\n        wr_team = mode(x_pd.homeTeamAbbr)\n\n        x_pd.loc[x_pd.against == wr_team, 'against'] = x_pd.visitorTeamAbbr\n        x_pd = x_pd.drop(['homeTeamAbbr','visitorTeamAbbr'],axis=1) \\\n                   .sort_values('week')\n\n        fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n        fig.add_trace(\n            go.Bar(x=x_pd.week, y=x_pd.impact, opacity=0.5, name=\"Game Impact Score\", hovertemplate ='Against '+x_pd.against),\n            secondary_y=True,\n        )\n\n        fig.add_trace(\n            go.Scatter(x=x_pd.week, y=x_pd.targetsPerSnap, name=\"Targets per Snap (%)\", \n                       hovertemplate =x_pd.targetsPerSnap.astype(int).astype(str)+'%'),\n            secondary_y=False,\n        )\n\n        fig.add_trace(\n            go.Scatter(x=x_pd.week, y=x_pd.completionsPerTarget, name=\"Completions per Target (%)\", \n                       hovertemplate =x_pd.completionsPerTarget.astype(int).astype(str)+'%'),\n            secondary_y=False,\n        )\n\n        fig.update_layout(shapes=[\n            dict(\n              type= 'line',\n              name='average WR impact',\n              line=dict(\n                color=\"gray\",\n                width=1,\n                dash=\"dot\",\n                ),\n              yref= 'y2', y0= mean_, y1= mean_,\n              xref= 'paper', x0= 0, x1= 0.94\n            )])\n\n        # Add figure title\n        fig.update_layout(\n            title_text=wr_name+\" Game Impact 2018\"\n        )\n\n        # Set x-axis title\n        fig.update_xaxes(title_text=\"Game\", range=[1, 17])\n\n        # Set y-axes titles\n        fig.update_yaxes(title_text=\"Receiving Statistics (%)\", range=[0, 101], showgrid=False, secondary_y=False)\n        fig.update_yaxes(title_text=\"Impact Score\", range=[0, 250], showgrid=False, secondary_y=True)\n\n        fig.show()","90c3e670":"show_game_impact(input())","1037b3f0":"diff.hist(bins=20,grid=False)\nplt.title('Madden Scores Histogram\\nMean: {:.2f} || STD: {:.2f}'.format(diff_mean,diff_std))\n\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"bottom\"].set_visible(False)\nplt.tick_params(\n    axis='x',          # changes apply to the x-axis\n    which='both',      # both major and minor ticks are affected\n    bottom=False,      # ticks along the bottom edge are off\n    top=False,         # ticks along the top edge are off\n    labelbottom=True)\n\nplt.show()","5a8e3965":"press_defenders = revis_pd[revis_pd.press].groupby('defender').count()\npress_defenders = press_defenders[press_defenders.gameId >= 10]\n\npress_revis_pd = revis_pd[(revis_pd.press) & revis_pd.defender.isin(list(press_defenders.index))]\n\nx = press_revis_pd.groupby('defender').agg({\"playId\":[\"count\"],\"difficulty\":[\"mean\"]})\nx.columns = ['numPlays','avgDiff']\n\n\ndiff = x.avgDiff.values\nplays = x.numPlays.values\nplyrs = x.index\n\ntrace1 = go.Scatter(\n    x=plays,\n    y=diff,\n    text=plyrs,\n    hoverinfo='text',\n    mode='markers'\n)\n\nlayout = go.Layout(\n                title='Finding Elite Press Coverage DBs:',\n                paper_bgcolor='rgba(0,0,0,0)',\n                plot_bgcolor='rgba(0,0,0,0)',\n                xaxis = dict(title = 'Number of Press Plays'),\n                yaxis = dict(title = 'Average Difficult of Assignment'),\n)\n\nfig = go.Figure(data=trace1, layout = layout)\n\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'paper', y0= 0, y1= 1,\n      xref= 'x', x0= 150, x1= 150\n    ),\n   dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'y', y0= 85, y1= 85,\n      xref= 'paper', x0= 0, x1= 1\n    ),\n    \n])\n\nfig.add_annotation(\n            xref=\"paper\",\n            yref=\"y\",\n            x=0, y=86,\n            text=\"consistently pressing Elite WRs\",\n            showarrow=False)\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"paper\",\n            x=169, y=0,\n            text=\"consistently playing<br>Press Coverage\",\n            showarrow=False)\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"y\",\n            x=100, y=88.5,\n            font = dict(size = 8),\n            text=\"Jalen Ramsey\",\n            showarrow=False)\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"y\",\n            x=104, y=83,\n            font = dict(size = 8),\n            text=\"Jaire Alexander\",\n            showarrow=False)\n\n\niplot(fig)","5f9ec31c":"# x = revis_pd[['zscore','targetted','completed','epa_yards']].copy()\n# x['diff_group'] = np.round(x.zscore,1)\n# x = x[x.diff_group>-1.8].groupby('diff_group').mean().drop('epa_yards',axis=1) \\\n#  .merge(\n#     x[x.completed].groupby('diff_group')[['epa_yards']].mean(),\n#     left_index=True,\n#     right_index=True\n#         )\n\n# fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n\n# fig.add_trace(go.Scatter(\n#     x=x.index,\n#     y=x.targetted,\n#     mode='lines',\n#     name='Targets per Snap'\n#     ),\n#     secondary_y=False)\n\n# fig.add_trace(go.Scatter(\n#     x=x.index,\n#     y=x.completed,\n#     mode='lines',\n#     name='Completions per Snap'),\n#     secondary_y=False)\n\n# fig.add_trace(go.Scatter(\n#     x=x.index,\n#     y=x.epa_yards,\n#     mode='lines',\n#     name='Game Impact per Completion'),\n#     secondary_y=True)\n\n# # Add figure title\n# fig.update_layout(\n#     title_text='WR Output over WR Strength'\n# )\n\n# # Set x-axis title\n# fig.update_xaxes(title_text=\"WR Strength (std)\")\n\n# # Set y-axes titles\n# fig.update_yaxes(title_text=\"Targets\/Completions (%)\", showgrid=False, secondary_y=False)\n# fig.update_yaxes(title_text=\"Game Impact\", showgrid=False, secondary_y=True)\n\n\n# fig.show()","4beb372c":"x = revis_pd[revis_pd.targetted].groupby('defender').agg({'playResult':['mean'],'gameImpact':['mean'],\n                                                          'targetted':['sum'], 'zscore':['mean']})\nx.columns = ['playResult','gameImpact','targetted','difficulty']\nx['difficulty'] = x.difficulty - np.mean(x.difficulty)\nx = x[x.targetted > 20]\n\n\n\ntrace1 = go.Scatter(\n    x=x.playResult,\n    y=100*(x.playResult-x.gameImpact)\/x.playResult,\n    text=x.index,\n    hoverinfo='text',\n    mode='markers',\n    marker=dict(\n    color=x.difficulty,\n    size=10,\n    colorbar=dict(\n            title=\"Avg. Relative Matchup Difficulty\"\n        ),\n        colorscale=\"Viridis\")\n)\n\nlayout = go.Layout(\n                title='Hidden Busts & Hidden Gems:<br>Comparing Avg. Yards Forfeit to Game Impact',\n                paper_bgcolor='rgba(0,0,0,0)',\n                plot_bgcolor='rgba(0,0,0,0)',\n                xaxis = dict(title = 'Yards Forfeit per Target'),\n                yaxis = dict(title = 'Game Impact Difference <br>to Yards Forfeitted (%) '),\n)\n\nfig = go.Figure(data=trace1, layout = layout)\n\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'y', y0= 0, y1= 0,\n      xref= 'paper', x0= 0, x1= 1\n    ),\n    dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'paper', y0= 0, y1= 1,\n      xref= 'x', x0=np.mean(x.playResult), x1=np.mean(x.playResult)\n    ),\n\n])\n\nfig.add_annotation(\n            xref=\"paper\",\n            yref=\"y\",\n            x=1, y=4,\n            text=\"Choke\",\n            showarrow=False)\n\nfig.add_annotation(\n            xref=\"paper\",\n            yref=\"y\",\n            x=1, y=-4,\n            text=\"Clutch\",\n            showarrow=False)\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"paper\",\n            x=np.mean(x.playResult)-0.455, y=1,\n            text=\"Tough\",\n            showarrow=False)\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"paper\",\n            x=np.mean(x.playResult)+0.33, y=1,\n            text=\"Soft\",\n            showarrow=False)\n\niplot(fig)","e9a49a2b":"df = pd.DataFrame(columns=['defender','target_resistance','completion_resistance','impact_resistance'])\nd = revis_pd.groupby('defender').count()\nd = d[d.gameId>50].index\n\ndf['defender'] = d\n\nlow_pairs = 0\nlow_reps = 0\nlow_targets = 0\n\n# For every defender...\nfor defender in d:\n\n#     defender = 'Stephon Gilmore'\n    \n    wrs = revis_pd[revis_pd.defender==defender].covering.unique()\n    \n    # for every receiver...\n    non_cover_plays = revis_pd[revis_pd.covering.isin(wrs)&(revis_pd.defender!=defender)]\n    cover_plays = revis_pd[revis_pd.covering.isin(wrs)&(revis_pd.defender==defender)]\n    \n    non_cover_stats = non_cover_plays.groupby('covering')[['targetted','normalDiff']].mean() \\\n                                     .merge(\n                                        non_cover_plays[non_cover_plays.targetted].groupby('covering')[['gameImpact','completed']].mean(),\n                                        right_index=True,left_index=True\n    )\n    \n    non_cover_stats.columns = ['non_cover_'+i if i != 'normalDiff' else 'normalDiff' for i in non_cover_stats.columns]\n    \n    \n    cover_stats = cover_plays.groupby('covering')[['targetted']].sum() \\\n                                 .merge(\n                                    cover_plays[cover_plays.targetted].groupby('covering')[['completed','gameImpact']].sum(),\n                                    right_index=True,left_index=True\n    )\n\n    cover_stats.columns = ['pairing_'+i for i in cover_stats.columns]\n    \n    #... if they have played at least 50 snaps ...\n    non_cover_snaps = non_cover_plays.groupby('covering')[['gameId']].count()\n    non_cover_snaps.columns = ['non_cover_snap_count']\n    non_cover_snaps = non_cover_snaps[non_cover_snaps.non_cover_snap_count>=50]\n    \n    # ...low quantity coverage pairing values should be downweighted until they hit 10\n    cover_snaps = cover_plays.groupby('covering')[['gameId']].count()\n    cover_snaps.columns = ['pairing_snap_count']\n    \n    z = cover_stats.merge(cover_snaps,left_index=True,right_index=True) \\\n                   .merge(non_cover_stats,left_index=True,right_index=True) \n    \n    # Calculate Pairing-level resistance\n    z['target_resistance'] = z.non_cover_targetted*z.pairing_snap_count-z.pairing_targetted\n    z['completion_resistance'] = z.non_cover_completed*z.pairing_targetted-z.pairing_completed\n    z['impact_resistance'] = z.non_cover_gameImpact*z.pairing_targetted-z.pairing_gameImpact\n#     break\n    \n#     z['target_resistance'] = (z.non_cover_targetted*z.pairing_snap_count-z.pairing_targetted)*z.normalDiff\/(z.non_cover_targetted*z.pairing_snap_count)\n#     z['completion_resistance'] = (z.non_cover_completed*z.non_cover_targetted-z.pairing_completed)\/(z.non_cover_completed*z.non_cover_targetted)\n#     z['impact_resistance'] = (z.non_cover_epa_yards*z.non_cover_targetted-z.pairing_epa_yards)\/(z.non_cover_epa_yards*z.non_cover_targetted)\n    \n    # Fix bug where 0 completions causes problems\n    z.loc[z.non_cover_completed == 0, 'completion_resistance'] = np.mean(z[z.non_cover_completed!=0].completion_resistance)\n    z.loc[z.non_cover_gameImpact == 0, 'impact_resistance'] = np.mean(z[z.non_cover_gameImpact!=0].impact_resistance)\n#     break\n    # Can iterate through all 3 with this\n        # Reward > 0 resistance on good players\n        # Punish < 0 resistance on bad players\n    for col in ['target_resistance','completion_resistance','impact_resistance']:\n        z.loc[(z[col] < 0), col] = z[col]*(5-z.normalDiff)*z.pairing_snap_count\n        z.loc[(z[col] > 0), col] = z[col]*z.normalDiff*z.pairing_snap_count\n\n    df.loc[df.defender==defender,'snaps'] = sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'impact_resistance'] = np.sum(z.impact_resistance)\/sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'target_resistance'] = np.sum(z.target_resistance)\/sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'completion_resistance'] = np.sum(z.completion_resistance)\/sum(z.pairing_snap_count)","ae30eb71":"db_stats = df\ndb_stats['target_resistance_rank'] = db_stats.target_resistance.rank(method = 'max', ascending=False)+1\ndb_stats['completion_resistance_rank'] = db_stats.completion_resistance.rank(method = 'max', ascending=False)+1\ndb_stats['impact_resistance_rank'] = db_stats.impact_resistance.rank(method = 'max', ascending=False)+1\ndb_stats['overall_rank'] = ((db_stats.target_resistance_rank+db_stats.completion_resistance_rank+db_stats.impact_resistance_rank)\/3).rank(method = 'max')+1\n\n# db_stats[['target_resistance_rank','completion_resistance_rank','impact_resistance_rank','overall_rank']]","11e99b83":"fig = go.Figure(data=[go.Scatter3d(x=db_stats.target_resistance_rank, \n                                   y=db_stats.completion_resistance_rank, \n                                   z=db_stats.impact_resistance_rank,\n                                   mode='markers',\n                                   name='',\n                                   hovertemplate = db_stats.defender,\n                                    marker=dict(\n                                        color=db_stats.overall_rank,\n                                        size=10,\n                                        colorbar=dict(\n                                                title=\"Overall Rank\"\n                                            )))])\n\n\n# Set title\nfig.update_layout(scene = dict(\n                    xaxis_title='Impact Resistance Rank',\n                    yaxis_title='Target Resistance Rank',\n                    zaxis_title='Completion Resistance Rank'),\n                    width=700,\n                    margin=dict(r=20, b=10, l=10, t=10))\n\n# # Add figure title\n# fig.update_layout(\n#     title_text=\"The Resistance Cube\"\n# )\n\nfig.update_layout(showlegend=False)\n\nfig.show()","5b1cc7f1":"import matplotlib.pyplot as plt\nfrom matplotlib_venn import venn3\n\nplt.figure(num=None, figsize=(20, 20), dpi=80, facecolor='w', edgecolor='k')\n\ngood_target = db_stats[db_stats.target_resistance_rank <=16]\ngood_compl = db_stats[db_stats.completion_resistance_rank <=16]\ngood_impact = db_stats[db_stats.impact_resistance_rank <=16]\n\nset1 = set(good_target.defender)\nset2 = set(good_compl.defender)\nset3 = set(good_impact.defender)\n\nnames = [\"Strong\\nTarget Resistance\", \"Strong\\nCompletion Resistance\", \"Strong\\nImpact Resistance\"]\nvenn = venn3([set1, set2, set3], set_labels=(names))\n\ntry:\n    venn.get_label_by_id('100').set_text(',\\n'.join(set1-set2-set3))\n    venn.get_patch_by_id('100').set_color('#B2F7EF')\n    venn.get_label_by_id('100').set_fontsize(15)\nexcept:x = 1\n    \ntry:\n    venn.get_label_by_id('110').set_text(',\\n'.join(set1&set2-set3))\n    venn.get_patch_by_id('110').set_color('#1B98E0')\n    venn.get_label_by_id('110').set_fontsize(15)\nexcept: x = 1\n\ntry:\n    venn.get_label_by_id('010').set_text(',\\n'.join(set2-set3-set1))\n    venn.get_patch_by_id('010').set_color('#136F63')\n    venn.get_label_by_id('010').set_fontsize(15)\nexcept: x = 1\n\ntry:\n    venn.get_label_by_id('101').set_text(',\\n'.join(set1&set3-set2))\n    venn.get_patch_by_id('101').set_color('#090C9B')\n    venn.get_label_by_id('101').set_fontsize(15)\nexcept: x = 1\n\ntry:\n    venn.get_label_by_id('111').set_text(',\\n'.join(set1&set2&set3))\n    venn.get_patch_by_id('111').set_color('#E8F1F2')\n    venn.get_label_by_id('111').set_fontsize(15)\nexcept: x = 1\n\ntry:\n    venn.get_label_by_id('011').set_text(',\\n'.join(set2&set3-set1))\n    venn.get_patch_by_id('011').set_color('#034078')\n    venn.get_label_by_id('011').set_fontsize(15)\nexcept: x = 1\n\ntry:\n    venn.get_label_by_id('001').set_text(',\\n'.join(set3-set2-set1))\n    venn.get_patch_by_id('001').set_color('#4C3957')\n    venn.get_label_by_id('001').set_fontsize(15)\nexcept: x = 1\n\n\n\nplt.title('Defensive Resistance Scores; Ordinally Ranked')\n\ns = 'DBs not listed fell outside top 10% for Resistance Metrics'\n# n = db_stats[~db_stats.index.isin(set1|set2|set3)].defender\n# for i in range(len(n)):\n#     s += n[i]\n#     if (i % 20 == 0) and (i!=0):\n#         s+=',\\n'\n#     else:\n#         s+=', '\nplt.text(0.5,-0.05,s,horizontalalignment='center',\n     verticalalignment='center', transform = plt.gca().transAxes)\n\nplt.show()","5b7ee859":"man_pd = revis_pd[(revis_pd.isManCoverage == 1) & (revis_pd.isManPlay == 1)].copy()\n\ndf = pd.DataFrame(columns=['defender','target_resistance','completion_resistance','impact_resistance'])\nd = man_pd.groupby('defender').count()\nd = d[d.gameId>50].index\n\ndf['defender'] = d\n\nlow_pairs = 0\nlow_reps = 0\nlow_targets = 0\n\n# For every defender...\nfor defender in d:\n\n#     defender = 'Stephon Gilmore'\n    \n    wrs = man_pd[man_pd.defender==defender].covering.unique()\n    \n    # for every receiver...\n    non_cover_plays = revis_pd[revis_pd.covering.isin(wrs)&(revis_pd.defender!=defender)]\n    cover_plays = man_pd[man_pd.covering.isin(wrs)&(man_pd.defender==defender)]\n    \n    non_cover_stats = non_cover_plays.groupby('covering')[['targetted','normalDiff']].mean() \\\n                                     .merge(\n                                        non_cover_plays[non_cover_plays.targetted].groupby('covering')[['gameImpact','completed']].mean(),\n                                        right_index=True,left_index=True\n    )\n    \n    non_cover_stats.columns = ['non_cover_'+i if i != 'normalDiff' else 'normalDiff' for i in non_cover_stats.columns]\n    \n    \n    cover_stats = cover_plays.groupby('covering')[['targetted']].sum() \\\n                                 .merge(\n                                    cover_plays[cover_plays.targetted].groupby('covering')[['completed','gameImpact']].sum(),\n                                    right_index=True,left_index=True\n    )\n\n    cover_stats.columns = ['pairing_'+i for i in cover_stats.columns]\n    \n    #... if they have played at least 50 snaps ...\n    non_cover_snaps = non_cover_plays.groupby('covering')[['gameId']].count()\n    non_cover_snaps.columns = ['non_cover_snap_count']\n    non_cover_snaps = non_cover_snaps[non_cover_snaps.non_cover_snap_count>=50]\n    \n    # ...low quantity coverage pairing values should be downweighted until they hit 10\n    cover_snaps = cover_plays.groupby('covering')[['gameId']].count()\n    cover_snaps.columns = ['pairing_snap_count']\n    \n    z = cover_stats.merge(cover_snaps,left_index=True,right_index=True) \\\n                   .merge(non_cover_stats,left_index=True,right_index=True) \n    \n    # Calculate Pairing-level resistance\n    z['target_resistance'] = z.non_cover_targetted*z.pairing_snap_count-z.pairing_targetted\n    z['completion_resistance'] = z.non_cover_completed*z.pairing_targetted-z.pairing_completed\n    z['impact_resistance'] = z.non_cover_gameImpact*z.pairing_targetted-z.pairing_gameImpact\n#     break\n    \n#     z['target_resistance'] = (z.non_cover_targetted*z.pairing_snap_count-z.pairing_targetted)*z.normalDiff\/(z.non_cover_targetted*z.pairing_snap_count)\n#     z['completion_resistance'] = (z.non_cover_completed*z.non_cover_targetted-z.pairing_completed)\/(z.non_cover_completed*z.non_cover_targetted)\n#     z['impact_resistance'] = (z.non_cover_epa_yards*z.non_cover_targetted-z.pairing_epa_yards)\/(z.non_cover_epa_yards*z.non_cover_targetted)\n    \n    # Fix bug where 0 completions causes problems\n    z.loc[z.non_cover_completed == 0, 'completion_resistance'] = np.mean(z[z.non_cover_completed!=0].completion_resistance)\n    z.loc[z.non_cover_gameImpact == 0, 'impact_resistance'] = np.mean(z[z.non_cover_gameImpact!=0].impact_resistance)\n#     break\n    # Can iterate through all 3 with this\n        # Reward > 0 resistance on good players\n        # Punish < 0 resistance on bad players\n    for col in ['target_resistance','completion_resistance','impact_resistance']:\n        z.loc[(z[col] < 0), col] = z[col]*(5-z.normalDiff)*z.pairing_snap_count\n        z.loc[(z[col] > 0), col] = z[col]*z.normalDiff*z.pairing_snap_count\n\n    df.loc[df.defender==defender,'snaps'] = sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'impact_resistance'] = np.sum(z.impact_resistance)\/sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'target_resistance'] = np.sum(z.target_resistance)\/sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'completion_resistance'] = np.sum(z.completion_resistance)\/sum(z.pairing_snap_count)","8549831e":"revis_stats = man_pd.groupby('defender')[['zscore']].mean().reset_index().merge(df, on=['defender'])\n\ntrace1=go.Scatter(x=revis_stats.impact_resistance, \n                                   y=revis_stats.completion_resistance, \n                                   mode='markers',\n                                   name='',\n                                   hovertemplate = revis_stats.defender,\n                                    marker=dict(\n                                        color=revis_stats.zscore,\n                                        size=revis_stats.snaps\/6,\n                                        colorbar=dict(\n                                                title=\"Average Coverage Difficulty\"\n                                            ),\n                                    colorscale=\"speed\"))\n\nlayout = go.Layout(\n                title='Hidden Busts & Hidden Gems:<br>Comparing Avg. Yards Forfeit to Game Impact',\n                paper_bgcolor='rgba(0,0,0,0)',\n                plot_bgcolor='rgba(0,0,0,0)',\n                xaxis = dict(title = 'Impact Resistance',range=[-30,105]),\n                yaxis = dict(title = 'Completion Resistance'),\n)\n\nfig = go.Figure(data=[trace1], layout = layout)\n\n# Add figure title\nfig.update_layout(\n    title_text=\"Shutdown Man-Coverage Players\"\n)\n\n# fig.add_trace(go.Scatter(x=[0,1,2,0], y=[0,2,0,0], fill=\"toself\", mode='lines'))\n\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'y', y0= 0, y1= 0,\n      xref= 'paper', x0= 0, x1= 1\n    ),\n    dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'paper', y0= 0, y1= 1,\n      xref= 'x', x0=0, x1=0\n    ),\n\n])\n\n# x, y = ellipse(x_center=6.5, y_center=150,\n# #                    ax1 =[np.cos(np.pi\/12), np.sin(np.pi\/12)],  ax2=[-np.sin(np.pi\/12),np.cos(np.pi\/12)],\n#                    a=1.5, b =25)\n# fig.add_scatter(\n#             x=x,\n#             y=y,\n#             mode = 'lines')\n\nfig.update_layout(showlegend=False)\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"y\",\n            x=85, y=3.6,\n            text=\"<b>Revis Island<\/b>\",\n            showarrow=False)\n\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"y\",\n            x=54, y=1.8,\n            text=\"<b>Explorers<\/b>\",\n            showarrow=False)\n\nl = revis_stats[revis_stats.defender == 'Richard Sherman']\nfig.add_annotation(\n            xref=\"x\",\n            yref=\"y\",\n            x=l.impact_resistance.values[0], y=l.completion_resistance.values[0],\n            text=\"<b>Sherman<\/b>\",\n            showarrow=True)\n\nfig.show()","5c939d33":"best_wrs = man_pd[['covering','difficulty']].drop_duplicates().sort_values('difficulty',ascending=False).head(10)[['covering']]\n\nbest_man_pd = man_pd.merge(best_wrs, on='covering')\n\n# man_pd = revis_pd[(revis_pd.isManCoverage == 1) & (revis_pd.isManCoverage == 1)].copy()\n\ndf = pd.DataFrame(columns=['defender','target_resistance','completion_resistance','impact_resistance'])\nd = best_man_pd.groupby('defender').count()\nd = d[d.gameId>25].index\n\ndf['defender'] = d\n\nlow_pairs = 0\nlow_reps = 0\nlow_targets = 0\n\n# For every defender...\nfor defender in d:\n\n#     defender = 'Stephon Gilmore'\n    \n    wrs = best_man_pd[best_man_pd.defender==defender].covering.unique()\n    \n    # for every receiver...\n    non_cover_plays = revis_pd[revis_pd.covering.isin(wrs)&(revis_pd.defender!=defender)]\n    cover_plays = best_man_pd[best_man_pd.covering.isin(wrs)&(best_man_pd.defender==defender)]\n    \n    non_cover_stats = non_cover_plays.groupby('covering')[['targetted','normalDiff']].mean() \\\n                                     .merge(\n                                        non_cover_plays[non_cover_plays.targetted].groupby('covering')[['gameImpact','completed']].mean(),\n                                        right_index=True,left_index=True\n    )\n    \n    non_cover_stats.columns = ['non_cover_'+i if i != 'normalDiff' else 'normalDiff' for i in non_cover_stats.columns]\n    \n    \n    cover_stats = cover_plays.groupby('covering')[['targetted']].sum() \\\n                                 .merge(\n                                    cover_plays[cover_plays.targetted].groupby('covering')[['completed','gameImpact']].sum(),\n                                    right_index=True,left_index=True\n    )\n\n    cover_stats.columns = ['pairing_'+i for i in cover_stats.columns]\n    \n    #... if they have played at least 50 snaps ...\n    non_cover_snaps = non_cover_plays.groupby('covering')[['gameId']].count()\n    non_cover_snaps.columns = ['non_cover_snap_count']\n    non_cover_snaps = non_cover_snaps[non_cover_snaps.non_cover_snap_count>=50]\n    \n    # ...low quantity coverage pairing values should be downweighted until they hit 10\n    cover_snaps = cover_plays.groupby('covering')[['gameId']].count()\n    cover_snaps.columns = ['pairing_snap_count']\n    \n    z = cover_stats.merge(cover_snaps,left_index=True,right_index=True) \\\n                   .merge(non_cover_stats,left_index=True,right_index=True) \n    \n    # Calculate Pairing-level resistance\n    z['target_resistance'] = z.non_cover_targetted*z.pairing_snap_count-z.pairing_targetted\n    z['completion_resistance'] = z.non_cover_completed*z.pairing_targetted-z.pairing_completed\n    z['impact_resistance'] = z.non_cover_gameImpact*z.pairing_targetted-z.pairing_gameImpact\n#     break\n    \n    \n    # Fix bug where 0 completions causes problems\n    z.loc[z.non_cover_completed == 0, 'completion_resistance'] = np.mean(z[z.non_cover_completed!=0].completion_resistance)\n    z.loc[z.non_cover_gameImpact == 0, 'impact_resistance'] = np.mean(z[z.non_cover_gameImpact!=0].impact_resistance)\n#     break\n    # Can iterate through all 3 with this\n        # Reward > 0 resistance on good players\n        # Punish < 0 resistance on bad players\n    for col in ['target_resistance','completion_resistance','impact_resistance']:\n        z.loc[(z[col] < 0), col] = z[col]*(5-z.normalDiff)*z.pairing_snap_count\n        z.loc[(z[col] > 0), col] = z[col]*z.normalDiff*z.pairing_snap_count\n\n    df.loc[df.defender==defender,'snaps'] = sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'impact_resistance'] = np.sum(z.impact_resistance)\/sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'target_resistance'] = np.sum(z.target_resistance)\/sum(z.pairing_snap_count)\n    df.loc[df.defender==defender,'completion_resistance'] = np.sum(z.completion_resistance)\/sum(z.pairing_snap_count)\n    \n    ","e825c3d9":"# wr_list = best_man_pd[['defender','covering']].drop_duplicates().groupby('defender')['covering'].apply(list).reset_index()\n\n# df_plot = df.merge(wr_list, on=['defender']).sort_values('impact_resistance',ascending=False)\n\n# df_plot[df_plot.snaps>20]","fc5116fd":"wr_list = best_man_pd[['defender','covering']].drop_duplicates().groupby('defender')['covering'].apply(list).reset_index()\n\ndf_plot = df.merge(wr_list, on=['defender'])\n\ndf_plot['impact_resistance'] = df_plot['impact_resistance']\/df.snaps\n\ndf_plot = df_plot[df_plot.snaps>20].sort_values('impact_resistance',ascending=False)\n\ntrace1 = go.Bar(x=df_plot.defender, y=df_plot.impact_resistance, name=\"Game Impact Score\", \n                hovertemplate =['Top Receivers Covered:<br>'+ '<br>'.join(i) for i in df_plot.covering])\n\nlayout = go.Layout(\n                title='Shutdown DBs against The Best WRs in the League',\n                paper_bgcolor='rgba(0,0,0,0)',\n                plot_bgcolor='rgba(0,0,0,0)',\n                yaxis = dict(title = 'Impact Resistance per Matchup Snap'),\n)\n\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      line=dict(\n        color=\"gray\",\n        width=1,\n        dash=\"dot\",\n        ),\n      yref= 'y', y0= 0, y1= 0,\n      xref= 'paper', x0= 0, x1= 1\n    ),\n])\n\nfig = go.Figure(data=trace1, layout = layout)\n\nfig.update_layout(showlegend=False)\n\nfig.show()","7ee5f72e":"## Visualizing DB Man Coverage Performance against Elite WRs","9caaa1aa":"Just as some completions are worse coverage plays than overs, some _incompletitons_ are better defensive plays than others. While all of these plays are incompletions, incompletitions that occur in close games, in the redzone, are intercepted, or otherwise affect the opponents chance of winning are rewarded with a negative game impact score. Notice how many 4th down plays have large downweight on them-- good DBs ensure that 4th down conversions do not happen","d00cc726":"## Highlighting Matchup Difficulty:\n\nWhile we should combine game impact and matchup difficulty into a single metric--a 40yrd catch on 3rd and 10 is just as bad from a game perspective regardless of who caught it-- it is crucial that we highlight both game impact and matchup difficulty when assessing DB strength.\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/6\/6d\/Madden19cover.jpeg\/220px-Madden19cover.jpeg)\n\nAs a proxy for WR strength, we will use each WRs overall rating from **Madden 2019**, the video game released to simulate this year of football. Even quickly using these raw numbers helps us get a clearly separation of elite DBs vs. others:","40e1dc23":"![](https:\/\/i.pinimg.com\/originals\/e8\/8a\/bc\/e88abc5615d88985d53f1e8e01802dff.jpg)\n\nThe Year is 2009. Week 12 of the NFL Regular season. Finishing my weekend chores _just_ before gametime, I excitedly turn on my Carolina Panthers vs. New York Jets on the living room TV. I throw a bag of popcorn in the microwave, relax, and watch the opening kick off...\n\n... and within the first 4 minutes of play, Darrelle Revis intercepts Delhomme and returns it for a Touchdown. A Pick 6.\n\nRevis would go on to hold Steve Smith, our star receiver, to 1 catch for 5 yards on 6 targets. The Jets would go on to win 17 to 6. \n\nA Sunday ruined...\n\n--\n\nMy nightmarish memory of Darrelle Revis against my team that Sunday was not the exception, but the rule. Revis consistently dominated whomever he was matched up against; which was often future first-ballot HOFers like himself. 2009 Revis was the definition of a \"Shutdown Corner.\"\n\n![](https:\/\/i.redd.it\/mj85t54nxta51.jpg)\n\nWhat is so amazing about Revis as a player is that through his career he made a name for himself for matching up against the best receivers in the league, and absolutely annihilating their offensive output. Playing man-to-man with no Safety help, he could hold receivers coming off 200+ yard games to a single catch. His notoriety for shutting down phenomenal WRs incepted the idea of Revis Island in the minds of Football Fans.\n\n> **Revis Island:** A term describing the effect Darrelle Revis had on the receivers he covered. No matter how good they were, Revis always found a way to neutralize their game impact, seemingly getting lost on the Island (Revis' career coincident with the airing of the show LOST, likely where the idea of getting lost on an island came from)\n\nAfter Revis retired after the 2017 season, I've always wondered if a CB could ever take up the mantle of Revis Island. Would there ever be a defensive player so dominant in the passing game as Revis ever again? \n\nIt is with this in mind that led me to Dat Bowl 2021: **In Search of Revis Island**. Specifically, focusing on answering these select questions:\n\n### 1. Can we quantify not just the reduction in targets and yards, but actual **Game Impact** of a defensive player?\n\n### 2. Who truly are the **Shutdown Defensive Backs** of NFL in 2018?","fe99770c":"## Visualizing Shutdown Corners\n\nCalculating & Visualzing a DB's **Completion Resistance** and **Impact Resistance** on man coverage plays finally reveals to us what we have been searching for: \n\n\n## Revis Island!\n\n![](https:\/\/pix10.agoda.net\/hotelImages\/186782\/-1\/d767492a24b0547a44db71f806e03d1d.jpg?s=1024x768)\n\n\n... or at least an island that's part of the Revis archipelago.\n\n### Revis Islanders\nWhile strong cornerbacks in their own right when looking at all plays, Jalen Ramsay, James Bradberry, Joe Harden, Taron Johnson, and Marlon Humphrey are cut above the pack when it comes to man-to-man coverage. These is a wide gap across both completion and impact resistance between these players and the rest of the DBs in the NFL. According to game resistance on man coverage, these are the most elite DBs in the leage. If your team is looking to gain a shutdown DB, trade for one of these players.\n\n_Note: Taron Johnson, while I'm sure an elite player, has fewer man-to-man snaps than his fellow Revis Islander. The jury is still out on his status_\n\n### Revis Explorers\nThere is an interesting cohort of DBs that also falls out of this list: DBs who have a low number of man coverage plays in 2018, but have some promising results. Particularly Anothony Brown, Adoree' Jackson, and Carlton Davis. They have started to separate themselves from the rest of the leage in terms of impact, but have a small sample size and average completion resistance. A recommendation for teams that these DBs play for is to test their mettle by playing more man coverage, ideally against WR1s, and see if they have what it takes to make it to Revis Island. Stephone Gilmore, Adoree' Jackson, and William Jackson all also fall into this category, but have a larger number of snaps. Perhaps they need some more technical help to acheive Revis-Island-status, but they clearly still have the potential!\n\n#### Interesting Specific Examples:\n\n**Janoris Jenkins** sits somewhere between the Revis Islanders and Explorers. Depending on his previous year stats, he could be trending towards Revis-Island status or dropping down out of it. Either way, he is in a year of transition it seems.\n\n**Stephon Gilmore**, the best corner in the game according to all plays is \"only\" in the Explorers grouping. The explorers are still the top 10% of corners in the league, but I would have expected him to be a Revis Islander This leads me to believe that these he is great in team defenses, but when it comes to one-on-one coverage, there are better specialists than he.\n\n**Richard Sherman** is a famous CB in football today, due to his spectacular [\"Swat Heard Round the World\"](https:\/\/www.youtube.com\/watch?v=OhtfaME_v0Y) in coverage against Crabtree. Before this analysis and based on that playoff moment, I assumed he was an excellemt shutdown corner. But the data shows that he is not that great in man-to-man coverage. I guess one play does not make a career...","96483d0b":"# PART II: THE SEARCH FOR REVIS ISLANDERS","bac51d6f":"# Conclusion: There and Back Again\n\nLet's recap what we covered, and few interesting insights\/actions uncovered:\n- **Process:** By modifying play outcome by game context and matchup difficulty, we can distill out the true **game impact** of a play. Game Impact often varies significantly from play outcome\n- **Process:** By comparing a WR's game impact acheived against a DB versus a WR's typical performance, we can capture a DB's **resistance** to forfeitting targets,completions, and game impact\n- **Insight:** While Marlon Humphrey and Tradvious White are stellar DBs, their yards stat line is not what it first appears. They give up fewer yards than average, but the yards they give up are worse than the appear. Turn to a Clutch cornerback like Denzel Ward or John Norman-- who gives up a few more yards but makes the big plays\n- **Insight:** Stephon Gilmore, while one of the strongest overall cornerbacks in the league, is not comparable to Darelle Revis in terms of shutdown man coverage. That honor is reserved for Jalen Ramsay and Marlon Humphrey\n- **Action:** If your team has a DB that is a \"Revis Explorer,\" provide them with more opportunities to play man-to-man against WR1. You may have a budding Darelle Revis on your hands!\n- **Action:** On critical plays in the game, play your most Clutch DB agaisnt their best receiver-- Ignore the statline, Cluth DBs are more likely to get a stop\n\n## Next Steps\nAka \"things I wish I could've done\"\n- I would absolutely love to run this analysis for Darelle Revis' 2009 and 2010 seasons, and see where he compares to the 2018 cohort. Would Jalen Ramsay and company be comperable? Better, worse? It would be a fun yardstick to measure success on\n- **No Man is a (Revis) Island:** Sticking with the narrative around individual-player performance, I had to scrap my analysis around team-level strength. But now that I have player-levels stats, it would be a fun exercise to explore if the best defensive teams always have the best players, or if a collection of above-average players does a better job than 1 super star\n- **Making a Revis:** A further analysis that would so fun for someone to explore is finding explanatory elements of what makes a shutdown corner. This analysis alluded to strictly output, but finding technique-related differences would be amazing to see (this would require pretty serious tracking equipment...maybe 2024)\n- **QB Games** Shaking off QBs, or messing up their reads, would be an amazing future topic. My original metric for difficulty included which read number a WR was. But we did not have QB head movement, so could not check who their first\/second reads.\n- **Longitudinal Study:** Strong Football metrics can stand the test of time. Would love to see resistance scores over multiple seasons, and see how they improve\/degrade for each corner back. Hopefully **Resistance** can be used to track a DBs skill across their career! I also wanted to run this on college prospects and see if it (1) translated to the pros and (2) could result in draft-prospecting strategies\n\nThanks for reading, and I hope you enjoyed!\n\n![](https:\/\/blog.sevenponds.com\/wp-content\/uploads\/2018\/01\/800px-Sunset_in_Zadar_2-513x344.jpg)","c5c458d6":"## Hey! Look up a Your Favorite 2018 Receiver's Game Impact Score Below:","4d9420e0":"Above: **Julio Jones**, the star receiver for the Atlanta Falcons in 2018. Consistently posting monster games in terms of Game Impact, which makes sense as he was the Falcons go-to receiver for that year. In Week 13 against Baltimore, he is held to only ~10pts of Game Impact. This is a seriously impressive feat given the context of Jones' other appearances, and should be rewarded as such.\n\nBelow: **Marvin Hall**, another receiver for the Atlana Falcons in 2018. Even though his Completion\/Reception stats are sometimes comparable to Jones (and actually higher in Week 7), you can see from the Game Impact scores that Hall and Jones do not have the same impact on the Game. Hall's ~30pt game against the Giants in Week 7 is a poor defensive by the DB, and should count more heavily against against them than if they had forfeitted the same Game Impact score to Jones","a569c3fc":"The above chart quantifies the game context & impact of a completion. While generally increasing linearly with absolute yards gained, **Game Impact**  spikes when a play results in a Touchdown or First Down, particularly on 3rd or 4th down. Large plays on 3rd down in close games are painful for defenses, and so Game Impact captures this effect reasonably well. Conversely, large chunks of yards that have no impact on the game are dropped to 0 game impact, ensuring that garbage-time yardage does not penalize a DB.\n\nTo illustrate this with an example:\n\n**Play #1** marked above is a 47 yard touchdown passs on 4th down with less than 2min of play left. An absolutely terrible play to give up, as a stop would likely sealed the game up; hence the Game Impact of that play is significant.\n\n**Play #2** marked above, while resulting in _more_ yards gained than Play #1, was a hail mary that did not reach the endzone before time expires. The DB on the play did his job by preventing a TD, and so the Game Impact is neutralized.\n\nThe act of weighting plays by their game context will help our later analysis separate generally good DBs from those that _almost never_ give up a big play... and hopefully reveal a few corners whose performance is actually much worse than their stats show at first glance","817c007d":"# 1. Determining Coverage\n\nThe objective of this section was to determine which defensive player was covering which offensive player on every passing play from 2018. Using frame-by-frame data of distances and velocities, I was able to determine this to a relative strong degree of reliability (metrics below). \n\nWhile this process was interesting from a Data Science perspective, an extensive debrief on the subject would be tangental to this notebook's true purpose: Measuring game impact resistance of defensive players. In addition, the preprocessing required to determine coverage takes several hours, so for expediency (and saving space in this NB) I generated csv files of the data rather than include all of the code to rerun. You can absolutely check out my entire process in this [public notebook](https:\/\/www.kaggle.com\/adam1brownell\/setting-the-table-determining-coverage).\n\nSkip to next section if more interested in insights\/analytics than preprocessing","f7463993":"# Introduction: The Legend of Revis Island","fb456cc3":"The above chart plots the **ordinal rank** of each DB across our 3 resistance metrics. The color represents the overal ordinal rank of the DB, with Blue DBs being stronger overall than Yellow DBs. The smaller the ordinal rank, the better (think 1st place).\n\nWhile the above chart is very cool looking and fun to play around with, it is a little challenging to glean insights from. A more engageable chart of the same information is generate below:","21157b67":"Below is a outline of the analytics notebook, along with questions\/comments addressed in each section:\n\n### PART I: SETTING THE TABLE\n**1. Determining Coverage** \n- Determining if a player is in man coverage\n- Determining if a play is a man coverage play\n- Determining who a DB is covering\n        \n**2. Not All Catches are Created Equal** \n- Calculating **Game Impact** of a pass attempts. **Game Impact:** Weighting yards gained on a play by the game context \n- Calculating **Game Impact** of an incompletion \n- Visualizing a Receivers Game Impact over the course of a season\n- Modifying game impact by matchup difficulty\n    \n### PART II: THE SEARCH FOR REVIS ISLANDERS\n\n**3. Finding Clutch Defensive Players**\n- Comparing Yards forfeited to Game Impact forfeited \n- Calculating Coverage, Target, and Impact **Resistance** of every Defensive Player. **Resistance:** The reduction in output a defensive player inflicts on their opponents\n- Scoring & Ranking DBs by their **Resistance** scores\n\n**4. Finding Shutdown Man-Coverage DBs**\n- Visualizing Resistance for Man Coverage\n- Visualizing Resistance for Man Coverage against the league's best Receivers\n    \nEnjoy!","2a00bc06":"# PART I: SETTING THE TABLE ","f506fc93":"## Visualizing Receiver-Level Game Impact\n\nThe following few charts showcase how the strength of the receiver plays a crucial role in understanding DB strength, and highlights how not all stat lines for DBs should be treated equally.","b780d89a":"_Author's Note: I put my descriptions for charts in markdown **underneath** the chart unless otherwise specfied_","91d63696":"**In a Nutshell:** \n\nI built three models: (1) play-level man\/zone predictor, (2) player-level man\/zone predictor, and (3) player-level coverage (offense and defense) predictor. All three took in frame by frame data and computed the distance to other offense and defensive players, and attempting to predict labels, both those provided by in the NFL bonus data and labels generated by me spotchecking plays. The features used were a mix of homebrewed values and those outlined in \"Unsupervised Methods for Identifying Pass Coverage Among Defensive Backs with NFL Player Tracking Data\" (although the unsupervised method was not a very strong predictor in the end). Thanks to [Andika Rachman](https:\/\/www.kaggle.com\/ar2017) for the boilerplate code. \n\nBoth the play-level and player-level man\/zone performed reasonably well, producing 75% Accuracy with an emphasis on low False Negative Rates on the player-level predictions. Confusion Matrix results found in the above notebook.","013b555a":"## Segmenting DBs by Resistance\nThe above Venn Diagram captures the top 10% of DBs across the three main categories we discussed at the beginning of this section. With the best DBs in football falling into a distinct categories, lets add some meaining and context to each of these buckets:\n\n### Cohort Descriptions: \n\n- **Impact Only:** The DBs are likely to give up yardage and catches, but know how to tighten up when it matters. They rarely give up the big play. There is likely a preference for LBs in these metrics, since LBs are often covering short routes by RBs and TEs as opposed to deep plays downfield\n\n- **Targets Only:** Playstyle likely leads to the QB avoiding this matchup unless its open, but when it is, the pass usually nets the offense a large chunk of yards. Could be indicative of inconsistent DB performance by a strong player\n\n- **Completions Only:** Usually  paired up against WRs QBs love to throw to, but often can make a good play to prevent a completion. Scoring may indicate an overcommitment to deflect\/disrupt pass, which leads to big plays when missed\n\n- **Impact & Completions Only:** Often play against WRs that QBs love to throw to, even in tight coverage. Despite the high targetting rate, these DBs often make a good play on the ball. This group of DBs are high caliber\n    - **Spot Check:** It makes perfect sense that Jalen Ramsey would fall in this cateogory. We saw in our earlier analysis that he was often covering very strong WRs but did a praise-worthy job at mitigating their impact\n\n- **Impact & Targets Only:** Known to allow the receiver to get open and catch on occassion, but mostly on shorter, less meaningful routes. Typically plays tight coverage and does not give up the big play. Likely also plays against WR1 + high-target WRs less often-- perhaps consider moving them to play more difficult matchups.\n    - Spot Check: [Humphrey](https:\/\/en.wikipedia.org\/wiki\/Marlon_Humphrey) was first-team AllPro and made the ProBowl the year after this season (2019) for the first time. Maybe the Ravens _also_ saw the same potential this analysis is revealing!\n\n- **Target & Completions Only:** Does a good job covering their players most of the time, but when they get beat they get beat badly\n\n- **All Three Categories** DBs who are represent the top 10% for Target, Completion, and Impact Resistance. This segement is where all DBs should strive to be-- significantly reducing a WR's output across all meaningful metrics. While I don't have data to prove this, I would assume a HOF corner like Revis would often find their seasons stats placing them in this section.","42874147":"## Interpreting this Graph:\n\nBy visualizing Yards Forfeit vs. the Game Impact of those Yards Forfeitted, we can uncover some interesting insights into the play of defensive players in 2018. To start, along the X Axis shows the typical stat line shown for a DB-- given their WR was targetted, what is the average yards given up. At first glance, this should cleanly separate DBs by skill. However, when taking into account the game ramifications of those yards, we start to see a different picture of DB skill.\n\n_Note: Good corners would have less yards\/game impact forfeit, so the bottom left section is the \"best\" section_\n\nBy cutting the dataset into quadraints, we get the following groups:\n\n### 1. Posers: Low Absolute Yards Forfeightted, but High Game Impact Allowed\nOn paper, these DBs look like very strong defensive players. But what the statline does _not_ capture is the significant game impact of these yards allowed. They may only allow a 4 yard completions, but it'll be on a 3rd and 2 in a close game. Rely on these DBs for 80% of the game, but when you really need a stop, look for a more Clutch DB to cover their WR1\n\n### 2. Busts: High Absolute Yards Forfeightted with High Game Impact Allowed\nThese DBs have had unfavorable matchups this year. For whatever reason, they have found themselves giving up big yardage plays to the deteriment of their team (and likely season). Supporting these DBs with on-field help and off-field traing is the logical remedy\n\n### 3. Bend-Don't-Breaks: High Absolute Yards Forfeightted, but Low Game Impact Allowed\nThese DBS understand that an 12 yard completion on 3rd and 15 is acceptable, even if not optimal. They may appear . Often these DBs are covering some of the most elite WRs in the league, and doing a fine job. These DBs are underrated, and despite their stat line at times, should be on the field on pivotal plays\n\n### 4. Gems: Low Absolute Yards Forgeightted with Low Game Impact Allowed\nGems look good on paper and on the field. They are excellent DBs in all situations. They rarely give up yards, and more importantly, rarely give up a big important play that gives the offense momentum. If Gems ask for a higher salary, pay them.\n\nA note on **Holton Hill**-- While seeming to be THE elite DB in the NFL in 2018 based on this graph, it is important to look at the average difficulty of match-ups. Jalen Ramsay, an excellent CB, had a much more challeneging suite of WRs to cover, whereas Hill has one on of the easiest covering duties amongst players plotted. His easy match-ups helped catapault him to be an outlier in the dataset. The color of the dot hopefully provides a thrid yardstick to compare DBs","2a5b5166":"# 2. Not all Catches are Created Equal\n\nWhile the traditional DB metrics of targets, completions, and yards allowed directionally show who is a stronger\/weaker defensive player, they fail to capture the critical element of **game context**. A 5 yard completion on 3rd and 2 is much worse than a 5 yard completion on 2nd and 22, even though the stat sheet would count the, as equal. In addition, holding Julio Jones, a top 10 receiver in 2018, to only 3 catches for 30 yards is a much more impressive feat than holding Russell Gage (not a top 10 receiver in 2018) to the same numbers.\n\nIt is with this in mind that we will create a new lens through which to look at our DBs: **Game Impact**. Below are the general rules that will guide our process:\n- Weighting Play Outcome by **Game Context:**\n    - Critical Incompletions should be rewarded\n    - Yardage that nets an offensive milestone (1st downs, TDs, redzone yards) should incure a penalty \n    - Close Game Plays (good and bad) are worth more than blowout game plays\n- Highlighting **Matchup Difficulty** in coverage statistics:\n    - Good defensive plays on stronger receivers should be rewarded\n    - Bad defensive plays on weaker receivers should be punished\n    - A strong game against and WR1 should be worth more for a DBs stats than an identical game against an WR3","99624801":"To our pleasant surprise, the WR scores from Madden created a relatively normal distribution, centered around 75 and ranging from ~50 to ~100. We simply normalized the rating of each WR score to find the relative strength of each coverage matchup.","b9fbfef6":"# 4. Finding Shutdown Man-Coverage DBs","3dc5e9f6":"# 3.Finding Clutch DBs\n\n> It's 4th and 3 on your own 11, your divisional rival has the ball with 1:22 left on the clock. Down by 5, they need a touchdown to win. You know the ball is going to their star receiver, who has picked apart defenses all season in these situations...\n> \n> ...who do you trust to make the stop?\n\n\nNow that we have impact scores of plays in addition to raw yardage, we can now take a shot at finding DBs that at exceptionally good at diminishing the impact of the WRs the play against. We can also look for DBs that, by traditional metrics aren't notworthy defenders, but they rarely allow high impact plays... and visa versa!\n\nTaking a note from circuit boards, the term we will use for \"diminishing the impact of a player\" is **resistance**. This value will be found by calculating the expected Targets\/Completions\/Game Impact of a WR per snap, and comparing this to the actual values during a WR\/DB pairing. A strong DB will have a much higher resistance than a weaker DB\n\nIn this section we will introduce 3 new metrics for us to examine:\n- **Target Resistance:** How many fewer targets do they receive per snap against this DB?\n- **Completion Resistance:** How many fewer completions do they receive per target against this DB?\n- **Impact Resistance:** What is the average reduction in Game Impact of the WRs they cover? How \"shutdown\" is this DB against WRs?\n\n\nWhereas **Impact Resistance** is a function of yards gained weighted by the game impact of those yards, **Target Resistance** and **Completion Resistance** are functions of reducing in WR output weighted by the difficulty of matchup\n\nClutch vs. Choke (https:\/\/en.wikipedia.org\/wiki\/Clutch_(sports))","656266fe":"Even with little processing, we can see how difficulty of assignment starts to separate defensive backs into a variety of different categories. \n\nFor Example: **Jalen Ramsay** & **Jaire Alexander**, while playing about the same number of press plays, play press against a significantly different cohort of receivers. Ramsay consistently plays press against elite receivers, whereas Alexander plays press against more average opponents. This example is simply to show why it is important to consider receiver difficulty when assesing DB strength!","09612ce8":"## Weighting Play Outcome by **Game Context:**","32878e2e":"The above chart shows who are the DBs when it comes ot covering the strongest WRs in the league. The elite DBs of the NFL playing against the elite WRs of the NFL.\n\nInterestingly, **Jimmy Smith** has played enough man-to-man snaps against top-10 WRs (25) to make this list. But his inclusion is welcome, because it highlights how strong the remaining 3 DBs are. **Bradberry, Ramsey, and Harden** are on Revis Island against all players, and maintain their dominance with elite WRs. These are clearly the best shutdown DBs in the leage in 2018. \n\nAn surprising element of this chart not immediately obvious that no CB that had more than 25 snaps against a top 10 WR has a negative Impact Resistance. The narrative this fits is that if you can't prove you can cover Julio Jones, they'll pull you off that matchup. \n\n**Lattimore** is an intruguing entry because he middle of the pack in terms of man-to-man coverage in general, his team trusts him to make the plays against the best in the league. And does a decent job of it too!  clearly has the potential to be the top shutdown corner in the lead, and already is almost there for elite WRs. \n\n**Marlon Humprhey**, present in Revis Island for all man-coverage plays, does not make this list, leading us to believe that perhaps he is a shutdown corner against your typical WR, but not Julio Jones and company. Or maybe he simply needs more reps against top-10 receivers, and he can prove this analysis wrong in Data Bowl 2021.\n\n### Real World Data\n\nAfter the 2019 season, Jalen Ramsey [signed a 5 year, 105million dollar contract, 71 million of it guaranteed](https:\/\/www.espn.com\/nfl\/story\/_\/id\/29844575\/rams-cb-jalen-ramsey-agree-five-year-105m-contract-agent-says). This was the largest guarantee in a contract for a DB in the history of the NFL. \n\nSome sports analysts questioned whether he was worth that much. \n\nBut using the data collected from above, Ramsey is absoltely one of THE BEST cornerbacks when it comes to shuting down tough receivers in man-to-man coverage. Which is particuarly impressive given his resume of WRs he covered in 2018. If your team is in need of a modern-day Darelle Revis, paying him a gigantic contract makes perfect sense, and the data supports this.\n\n![](https:\/\/www.totalprosports.com\/wp-content\/uploads\/2018\/08\/GettyImages-908463338.jpg)"}}