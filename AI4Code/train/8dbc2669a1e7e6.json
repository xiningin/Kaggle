{"cell_type":{"cb0a3083":"code","07bc880c":"code","7e99c3ac":"code","0b928bcf":"code","cf2e04a5":"code","efed79d4":"code","27262531":"code","eeaa38f6":"code","16e07ca0":"code","cdd066e3":"code","5dc5d0ff":"code","9f9b84c7":"code","f768f67c":"code","f770d9cc":"code","5b37ba74":"code","d9bef219":"code","3eed0c60":"code","6670bc06":"code","94816d92":"code","89944e97":"code","3b6aa351":"code","4794bbd3":"code","a1845b08":"code","02e04dc6":"code","dc82cde6":"code","c20ca0c8":"code","1e7de67e":"code","b17da402":"code","32157a2f":"code","9eaa371a":"code","291a4a14":"code","f73ab8cb":"code","502f8a59":"code","29ae22c6":"code","dcc989a3":"code","ecd65264":"code","0b9b97af":"code","d133e24f":"code","4e77446b":"code","4e9b6dc1":"code","89111e69":"markdown","dc6ffa30":"markdown","4d8fbb4a":"markdown","e3a3f5db":"markdown","0567011b":"markdown"},"source":{"cb0a3083":"import numpy as np \nimport pandas as pd\nimport scipy\nimport math\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import axes3d   \nfrom mpl_toolkits import mplot3d\nimport sklearn.metrics as sklm\nfrom datetime import datetime\nimport seaborn as sns\nimport xgboost as xgb\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import StratifiedKFold, train_test_split\npd.options.mode.chained_assignment = None","07bc880c":"singapore = pd.read_csv('..\/input\/flatpriceslatlonclean\/flat-prices-lat-lon-2.csv')","7e99c3ac":"singapore = singapore.drop(['Unnamed: 0'], axis =1)","0b928bcf":"singapore.head()","cf2e04a5":"singapore.shape","efed79d4":"singapore['street_name'].value_counts()","27262531":"singapore.describe()","eeaa38f6":"singapore['storey_range'].value_counts()","16e07ca0":"singapore['town'].value_counts()","cdd066e3":"singapore['month'] = pd.to_datetime(singapore['month'])\nsingapore['month'] = singapore['month'].astype(int)\nsingapore['price\/m\u00b2'] = singapore['resale_price']\/singapore['floor_area_sqm']\nt_prices = singapore.groupby('month').mean()\nt_prices2 = singapore.groupby('lease_commence_date').mean()","5dc5d0ff":"fig, ax = plt.subplots(figsize=(20,10))\nplt.scatter(singapore['lease_commence_date'], singapore['price\/m\u00b2'], color ='darkturquoise')\nplt.plot(t_prices2['price\/m\u00b2'], color ='deeppink', linewidth=2.5)\nplt.xlabel('Lease Commence Date')\nplt.ylabel('Price\/m\u00b2')\nplt.show()","9f9b84c7":"fig, ax = plt.subplots(figsize=(20,10))\nplt.scatter(singapore['month'], singapore['price\/m\u00b2'], color ='darkturquoise')\nplt.plot(t_prices['price\/m\u00b2'], color ='deeppink', linewidth=2.5)\nplt.xlabel('Month (converted to integer)')\nplt.ylabel('Price\/m\u00b2')\nplt.show()","f768f67c":"fig = plt.figure(figsize = (10, 10))\nplt.scatter(singapore['long'], singapore['lat'], c = singapore['resale_price'],cmap = 'cool')\nplt.xlabel('long')\nplt.ylabel('lat')\nplt.show()","f770d9cc":"fig = plt.figure(figsize = (15, 15))\nax = plt.axes(projection=\"3d\")\nax.scatter3D(singapore['long'], singapore['lat'], singapore['price\/m\u00b2'], c=singapore['price\/m\u00b2'], cmap='cool')\nax.set_xlabel('long')\nax.set_ylabel('lat')\nax.set_zlabel('price\/m\u00b2')\nplt.show()","5b37ba74":"pal = [\"palegreen\", \"paleturquoise\", \"lightpink\",\"mistyrose\",\"salmon\",\"plum\",\"wheat\",\"lavender\",\"sandybrown\"]","d9bef219":"fig, ax = plt.subplots(figsize=(15,13))\nsns.violinplot(x=\"storey_range\", y=\"price\/m\u00b2\", palette = 'cool', data=singapore)\nplt.show()","3eed0c60":"fig, ax = plt.subplots(figsize=(25,13))\nsns.violinplot(x=\"flat_model\", y=\"price\/m\u00b2\", palette = 'cool', data=singapore)\nplt.show()","6670bc06":"fig, ax = plt.subplots(figsize=(25,13))\nsns.violinplot(x=\"flat_type\", y=\"price\/m\u00b2\", palette = 'cool', data=singapore)\nplt.show()","94816d92":"singapore_y = singapore.pop('resale_price')\nsingapore = singapore.drop('price\/m\u00b2', axis = 1)","89944e97":"singapore.head()","3b6aa351":"label = LabelEncoder()\nsingapore['town'] = label.fit_transform(singapore['town'])\nsingapore['flat_type'] = label.fit_transform(singapore['flat_type'])\nsingapore['storey_range'] = label.fit_transform(singapore['storey_range'])\nsingapore['flat_model'] = label.fit_transform(singapore['flat_model'])","4794bbd3":"train,test,train_y,test_y = train_test_split(singapore,singapore_y,random_state=69,test_size=0.2)","a1845b08":"kf = StratifiedKFold(n_splits=5,shuffle=True, random_state=2021)","02e04dc6":"col = ['lat','long', 'floor_area_sqm', 'month'] ","dc82cde6":"scaler = StandardScaler()\ntrain[col]=pd.DataFrame(scaler.fit_transform(train[col]),\n                   columns=col,index=train.index)\ntest[col]=pd.DataFrame(scaler.transform(test[col]),\n                   columns=col,index=test.index)","c20ca0c8":"scores_knn = []","1e7de67e":"for t_ind, v_ind in kf.split(train, train_y):\n    X_train, X_val, y_train, y_val = train[col].iloc[t_ind], train[col].iloc[v_ind], \\\n                                        train_y.iloc[t_ind], train_y.iloc[v_ind]\n    k_c = KNeighborsRegressor(n_neighbors=20, weights='distance')\n    k_c.fit(X_train, y_train)\n    f_pred = k_c.predict(X_val)\n    sc = math.sqrt(sklm.mean_squared_error(y_val, f_pred))\n    scores_knn.append(sc)\n    print(sc)","b17da402":"print(np.mean(scores_knn))\nprint(np.std(scores_knn))","32157a2f":"final_knn = KNeighborsRegressor(n_neighbors=20, weights='distance').fit(train[col], train_y)","9eaa371a":"knn_pred = final_knn.predict(test[col])","291a4a14":"print('RMSE: ' + str(math.sqrt(sklm.mean_squared_error(test_y, knn_pred))))\nprint('RMSLE: ' + str(math.sqrt(sklm.mean_squared_log_error(test_y, knn_pred))))","f73ab8cb":"train.head()","502f8a59":"train = train.drop(['block', 'street_name'], axis = 1)\ntest = test.drop(['block', 'street_name'], axis = 1)","29ae22c6":"params = {\n    'max_depth': 4,\n    'n_estimators': 1550,\n    'eta': 0.2,\n    'gamma': 50}","dcc989a3":"scores_xgb = []","ecd65264":"for t_ind, v_ind in kf.split(train, train_y):\n    X_train, X_val, y_train, y_val = train[train.columns].iloc[t_ind], train[train.columns].iloc[v_ind], \\\n                                        train_y.iloc[t_ind], train_y.iloc[v_ind]\n    xg = xgb.XGBRegressor(**params)\n    xg.fit(X_train, y_train)\n    f_pred = xg.predict(X_val)\n    sc = math.sqrt(sklm.mean_squared_error(y_val, f_pred))\n    scores_xgb.append(sc)\n    print(sc)","0b9b97af":"print(np.mean(scores_xgb))\nprint(np.std(scores_xgb))","d133e24f":"xgb_final = xgb.XGBRegressor(**params).fit(train, train_y)","4e77446b":"xgb_pred = xgb_final.predict(test)","4e9b6dc1":"print('RMSE: ' + str(math.sqrt(sklm.mean_squared_error(test_y, xgb_pred))))\nprint('RMSLE: ' + str(math.sqrt(sklm.mean_squared_log_error(test_y, xgb_pred))))","89111e69":"# EDA","dc6ffa30":"# XGBoost","4d8fbb4a":"# KNN-Regression","e3a3f5db":"Looking at the 2d plot of the locations isn't very helpful, because there are multiple flats stacked at each of the coordinates. It may be beneficial to look at this in three dimensions.","0567011b":"# Summary\nMy main goal was to build a price-prediction-model. I added the geocoordinates of the flats to the dataframe, since the streetnames were available. This drastically improved the performance of my models. My first approach was a KNN-Regression and the results were already quite good with an RMSE of 20734.84 and an RMSLE of 0.1173 on the test-data. Then I also built an XGBoost regression model. It scored an RMSE of 16250.77 and an RMSLE of 0.0964."}}