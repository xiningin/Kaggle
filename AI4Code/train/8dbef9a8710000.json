{"cell_type":{"5b16498b":"code","3fcfe979":"code","21076a4b":"code","9dcb81bc":"code","8bcaf1d9":"code","2d9a3048":"code","9f37b30d":"code","83eccb0c":"code","0fb60116":"code","0c041819":"code","11f9ac54":"code","573a872a":"code","f0851a3f":"code","82d3bee5":"code","83ffeaac":"code","aa44a432":"code","261132d7":"code","8f33a6dc":"code","cd7bf70c":"code","568ca493":"code","2a365000":"code","e2c94320":"code","25932b2f":"code","8addba6d":"code","968d6199":"code","a599d2f2":"code","012d1285":"code","74e88256":"code","4b1ac43c":"code","aa9e4e2b":"code","3c0a5b25":"code","9bb6e9f7":"code","50c9da80":"code","9a8b8737":"code","4f3f6c98":"code","bd242375":"code","9868a7e4":"code","b0d66ecd":"code","d9e9af02":"code","865b427d":"code","39dd30aa":"code","63035137":"code","d1fa6e6f":"code","fe0a1764":"code","f2ffdcce":"code","37ae5b3e":"code","d0ad6fc0":"code","9a3b201a":"code","8d9d4be2":"code","76fa0e19":"markdown","884bd922":"markdown","81dbcdba":"markdown","1408c2db":"markdown","0746e1a6":"markdown","bacea1c4":"markdown","d6474c06":"markdown","355575f7":"markdown","fadbec0e":"markdown","a792a499":"markdown","93bb683b":"markdown"},"source":{"5b16498b":"import pandas as pd\nimport numpy as np","3fcfe979":"pwd","21076a4b":"import os","9dcb81bc":"data1=pd.read_csv('..\/input\/breast-cancer\/data.csv')","8bcaf1d9":"data1.head()","2d9a3048":"data1.shape","9f37b30d":"data1.dtypes","83eccb0c":"data1.info()","0fb60116":"data1.drop(['Unnamed: 32','id'],axis=1,inplace=True)","0c041819":"data1.diagnosis=[1 if each==\"M\" else 0 for each in data1.diagnosis]","11f9ac54":"y=data1.loc[:,\"diagnosis\"]\ny","573a872a":"X=data1.loc[:,data1.columns!=\"diagnosis\"]\nX","f0851a3f":"type(X)","82d3bee5":"type(y)","83ffeaac":"print(X.shape,y.shape)","aa44a432":"from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline","261132d7":"X_train,X_test,y_train,y_test=train_test_split(X,y, test_size = 0.2, random_state = 122)","8f33a6dc":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","cd7bf70c":"X_train.shape[1]","568ca493":"y_train.value_counts()","2a365000":"y_train.value_counts()","e2c94320":"print(y_train.value_counts()\/X_train.shape[0])","25932b2f":"data1['diagnosis'].value_counts() \/len(data1)*100","8addba6d":"print(y_test.value_counts()\/X_test.shape[0])","968d6199":"import warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')","a599d2f2":"import numpy as np\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import svm\nfrom sklearn.svm import SVC","012d1285":"linear_svm = SVC(kernel='linear', C=1, random_state=0)","74e88256":"linear_svm.fit(X=X_train, y= y_train)","4b1ac43c":"train_predictions = linear_svm.predict(X_train)\ntest_predictions = linear_svm.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","aa9e4e2b":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","3c0a5b25":"train_predictions = classifier.predict(X_train)\ntest_predictions = classifier.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","9bb6e9f7":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)","50c9da80":"train_predictions = classifier.predict(X_train)\ntest_predictions = classifier.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","9a8b8737":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","4f3f6c98":"train_predictions = classifier.predict(X_train)\ntest_predictions = classifier.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","bd242375":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","9868a7e4":"train_predictions = classifier.predict(X_train)\ntest_predictions = classifier.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","b0d66ecd":"from numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","d9e9af02":"model = XGBClassifier()\nmodel.fit(X_train, y_train)","865b427d":"train_predictions = classifier.predict(X_train)\ntest_predictions = classifier.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","39dd30aa":"from sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression\nreg = linear_model.LinearRegression() \nreg.fit(X_train, y_train)","63035137":"train_predictions = classifier.predict(X_train)\ntest_predictions = classifier.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","d1fa6e6f":"from sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.datasets import load_iris","fe0a1764":"knn = KNeighborsClassifier(n_neighbors=7)","f2ffdcce":"knn.fit(X_train, y_train)","37ae5b3e":"train_predictions = knn.predict(X_train)\ntest_predictions = knn.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","d0ad6fc0":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.cluster import KMeans","9a3b201a":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2)\nkmeans.fit(X_train, y_train)","8d9d4be2":"train_predictions = kmeans.predict(X_train)\ntest_predictions = kmeans.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","76fa0e19":"# Random forest classifier","884bd922":"# Logistic Regression","81dbcdba":"# Linear Regression","1408c2db":"# k-nearest neighbor","0746e1a6":"# Naive Bayes","bacea1c4":"# K-Means","d6474c06":"# check current working directory","355575f7":"# Decision Tree","fadbec0e":"##Support Vector Machine","a792a499":"# SVM","93bb683b":"# XGBoost"}}