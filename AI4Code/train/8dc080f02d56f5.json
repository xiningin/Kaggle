{"cell_type":{"70a235fa":"code","7e9d4725":"code","12aed40a":"code","034d1cbe":"code","56f83e08":"code","6070dff0":"code","7e11df26":"code","119962a5":"code","8551df02":"code","527a20dd":"code","141f9b93":"code","c55b7e1e":"code","da2e6b2a":"code","addc4f65":"code","c417ba9a":"code","3bcb26c4":"code","ab79fc90":"code","88e9e352":"code","7c6ce6e2":"code","b38ce0b5":"code","39161123":"code","8ef92403":"code","cb761bd2":"code","d8c6f393":"code","a2af4a38":"code","9c3dd919":"code","e274c4c3":"code","e1506812":"code","8c6caf1b":"code","982a1434":"code","393f053d":"code","e0a49c40":"code","15ab5cb4":"code","c90150fd":"code","364e9b21":"code","c622d764":"code","4b44214e":"code","d23bb637":"markdown","5bedd30a":"markdown","408d8c4a":"markdown","4cc12f0e":"markdown","e10f2ba3":"markdown","579cef21":"markdown","8726a258":"markdown","8e330a7b":"markdown","a7735ef7":"markdown","63517b6a":"markdown"},"source":{"70a235fa":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","7e9d4725":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","12aed40a":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","034d1cbe":"df.head()","56f83e08":"df.info()","6070dff0":"df.shape","7e11df26":"df.describe()","119962a5":"df.isnull().count()","8551df02":"df['Outcome'].value_counts()","527a20dd":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","141f9b93":"sns.set_style('whitegrid')","c55b7e1e":"df.columns","da2e6b2a":"sns.distplot(df['Age'], bins = 50,kde =False)","addc4f65":"sns.countplot(x = 'Outcome', data = df)","c417ba9a":"df.hist(figsize = (12,8))","3bcb26c4":"corr = df.corr()\nplt.figure(figsize = (12,8))\nsns.heatmap(corr, annot = True)","ab79fc90":"df.plot(kind = 'box', figsize = (12,8), subplots = True, layout = (3,3))\nplt.show()","88e9e352":"cols = df.columns[:8]\nfor item in cols:\n    plt.figure(figsize = (6,4))\n    plt.title(str(item) + 'With' + 'Outcome')\n    sns.violinplot(x = df.Outcome, y = df[item], data = df)\n    plt.show()","7c6ce6e2":"#sns.pairplot(df,hue='Outcome',palette='coolwarm', diag_kind = 'hist')","b38ce0b5":"X = df.drop(['Outcome'], axis = 1)\ny = df['Outcome']","39161123":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaler = scaler.fit_transform(X)","8ef92403":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaler, y, test_size=0.33, random_state=42)","cb761bd2":"\nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train, y_train)","d8c6f393":"predic_logistic = logmodel.predict(X_test)","a2af4a38":"from sklearn.metrics import classification_report, confusion_matrix\nprint(classification_report(y_test, predic_logistic))\nprint(confusion_matrix(y_test, predic_logistic))\nprint('Accuracy -- >', logmodel.score(X_test, y_test)*100)\ncm = confusion_matrix(y_test, predic_logistic)\nsns.heatmap(cm, annot = True, fmt = 'g')\nplt.show()","9c3dd919":"from sklearn.ensemble import RandomForestClassifier\nmodel_random = RandomForestClassifier()\nmodel_random.fit(X_train, y_train)","e274c4c3":"y_predict_random = model_random.predict(X_test)","e1506812":"print(classification_report(y_test, y_predict_random))\nprint(confusion_matrix(y_test, y_predict_random))\nprint('Accuracy -- >', model_random.score(X_test, y_test)*100)\ncm = confusion_matrix(y_test, y_predict_random)\nsns.heatmap(cm, annot = True, fmt = 'g')\nplt.show()","8c6caf1b":"from sklearn.svm import SVC\nmodel_svc = SVC()\nmodel_svc.fit(X_train, y_train)","982a1434":"y_pred_svc = model_svc.predict(X_test)","393f053d":"print(classification_report(y_test, y_pred_svc))\nprint(confusion_matrix(y_test, y_pred_svc))\nprint('Accuracy -- >', model_svc.score(X_test, y_test)*100)\ncm = confusion_matrix(y_test, y_pred_svc)\nsns.heatmap(cm, annot = True, fmt = 'g')\nplt.show()","e0a49c40":"from sklearn.neighbors import KNeighborsClassifier\nmodel_KNN = KNeighborsClassifier()\nmodel_KNN.fit(X_train, y_train)","15ab5cb4":"y_pred_knn = model_KNN.predict(X_test)","c90150fd":"print(classification_report(y_test, y_pred_knn))\nprint(confusion_matrix(y_test, y_pred_knn))\nprint('Accuracy -- >', model_KNN.score(X_test, y_test)*100)\ncm = confusion_matrix(y_test, y_pred_knn)\nsns.heatmap(cm, annot = True, fmt = 'g')\nplt.show()","364e9b21":"from sklearn.ensemble import GradientBoostingClassifier\nmodel_GB = GradientBoostingClassifier()\nmodel_GB.fit(X_train, y_train)","c622d764":"y_pred_GB = model_GB.predict(X_test)","4b44214e":"print(classification_report(y_test, y_pred_GB))\nprint(confusion_matrix(y_test, y_pred_GB))\nprint('Accuracy -- >', model_GB.score(X_test, y_test)*100)\ncm = confusion_matrix(y_test, y_pred_GB)\nsns.heatmap(cm, annot = True, fmt = 'g')\nplt.show()","d23bb637":"## Standardizing the data","5bedd30a":"## splitting into train and test","408d8c4a":"### Gradient Boosting Classifier","4cc12f0e":"## Project Diabetes","e10f2ba3":"### Random Forest","579cef21":"### Support Vector Mechine","8726a258":"### K Nearest Neighbors","8e330a7b":"### EDA ","a7735ef7":"## apply algorithm for predictions","63517b6a":"### Logistic Regression"}}