{"cell_type":{"b3f3fe6b":"code","4e525616":"code","20988746":"code","27355840":"code","631b33e8":"code","0e5ba85c":"code","124ab4be":"markdown"},"source":{"b3f3fe6b":"import random\nimport numpy as np\n\nfrom kaggle_environments import make, evaluate\n\n# Create the game environment\n# Set debug=True to see the errors if your agent refuses to run\nenv = make(\"connectx\", debug=True)\n\n# List of available default agents\nprint(list(env.agents))","4e525616":"# Two random agents play one game round\nenv.run([\"random\", \"random\"])\n\n# Show the game\nenv.render(mode=\"ipython\")","20988746":"# Selects random valid column\ndef agent_random(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return random.choice(valid_moves)\n\n# Selects middle column\ndef agent_middle(obs, config):\n    return config.columns\/\/2\n\n# Selects leftmost valid column\ndef agent_leftmost(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return valid_moves[0]","27355840":"# Two random agents play one game round\nenv.run([agent_random, agent_random])\n\n# Show the game\nenv.render(mode=\"ipython\")","631b33e8":"# To learn more about the evaluate() function, check out the documentation here: (insert link here)\n# Ref: https:\/\/www.kaggle.com\/learn-forum\/159448#890681\ndef get_win_percentages(agent1, agent2, n_rounds=100):\n\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    \n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    \n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    \n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))\n    print(\"Number of Draws (in {} game rounds):\".format(n_rounds), outcomes.count([0, 0]))","0e5ba85c":"get_win_percentages(agent1=agent_random, agent2=agent_random)","124ab4be":"# Connect Four\n- Reference: https:\/\/www.kaggle.com\/alexisbcook\/play-the-game"}}