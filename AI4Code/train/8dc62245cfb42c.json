{"cell_type":{"07bcfb5d":"code","e0b90e66":"code","647fb00c":"code","fbe366f1":"code","7b8a4311":"code","2906d5a7":"code","b83d1ecc":"code","951c3065":"code","ce8cb48c":"code","8e060371":"code","4f6b3985":"code","4a365555":"code","7df5f5c7":"code","3b5ad5fc":"code","550d32cb":"code","10b21e5f":"code","3c30bf38":"markdown","98d5e028":"markdown","83d8093b":"markdown"},"source":{"07bcfb5d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport xgboost\n# Set up code checking\nimport os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \n\n# Path of the file to read. We changed the directory structure to simplify submitting to a competition\ntrain_data = pd.read_csv('..\/input\/train.csv', header=0)\ntest_data = pd.read_csv('..\/input\/test.csv', header=0)","e0b90e66":"train_data.head()","647fb00c":"categorical_features = ['MSSubClass','MSZoning','Street','Alley','LotShape','LandContour','Utilities',\n                      'LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle',\n                      'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond',\n                      'Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating',\n                      'HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu',\n                      'GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence',\n                      'MiscFeature','SaleType','SaleCondition']\npredictors = [col for col in train_data.columns if col not in ['SalePrice','Id']]\ntrain_data.describe()","fbe366f1":"data = pd.concat([train_data,test_data])\ndata.head()","7b8a4311":"data.shape","2906d5a7":"non_categorical_cols= [col for col in data.columns if col not in categorical_features and col not in ['Id'] ]\nnumeric_feats = data[non_categorical_cols].dtypes[data.dtypes != \"object\"].index\ndata[numeric_feats] = np.log1p(data[numeric_feats])","b83d1ecc":"data.head()","951c3065":"SalePrice = data.SalePrice\ndata.dropna(axis=1,inplace=True)\ndata['SalePrice'] = SalePrice","ce8cb48c":"data.head()","8e060371":"categorical_features = list(set(categorical_features).intersection(set(data.columns)))\ndata = pd.get_dummies(data,columns =categorical_features)","4f6b3985":"train_set = data.loc[data.SalePrice.notna()]\ntest_set = data.loc[data.SalePrice.isna()]","4a365555":"train_X = train_set[train_set.columns[train_set.columns.values!='SalePrice']]\ntrain_y = train_set.SalePrice\ntrain_X.drop('Id',axis=1,inplace=True)\ntest_X = test_set[test_set.columns[test_set.columns.values!='SalePrice']]","7df5f5c7":"model = xgboost.XGBRegressor(colsample_bytree=0.4,gamma=0,learning_rate=0.07,max_depth=3,min_child_weight=1.5,\n                             n_estimators=10000,reg_alpha=0.75,reg_lambda=0.45,subsample=0.6,seed=42)","3b5ad5fc":"model.fit(train_X,train_y)","550d32cb":"submission=pd.DataFrame(columns=['Id','SalePrice'])\nsubmission['Id']=test_set['Id']\ntest_X.drop('Id',axis=1,inplace=True)\nsubmission['SalePrice']=model.predict(test_X)\nsubmission['SalePrice']=submission['SalePrice'].apply(lambda x: np.expm1(x))\nsubmission.head()","10b21e5f":"submission.to_csv('xgb.csv',index=False)","3c30bf38":"### Make predictions","98d5e028":"### NORMALIZING","83d8093b":"### CLEANING"}}