{"cell_type":{"f77d901f":"code","a75ae9d7":"code","ca04d6c0":"code","1201edab":"code","52f8f68b":"code","b6981a62":"code","37e68336":"code","147aa159":"code","3d037cf8":"code","222c2039":"code","94d6cff8":"code","635e60ce":"code","654b65e2":"code","bd3de423":"code","0ec1abfa":"code","afb78089":"code","838a04ff":"code","d53f2beb":"markdown","060491f4":"markdown","40cfe70c":"markdown","4ef323f2":"markdown","ab6f8db5":"markdown","8b8ea74c":"markdown","60513077":"markdown","34a9e1fc":"markdown","b10d12ec":"markdown","e078ed53":"markdown","c7c93391":"markdown","111fb2a6":"markdown","03f734e8":"markdown","4cf94c27":"markdown","aaf30ad7":"markdown"},"source":{"f77d901f":"!pip install geocoder","a75ae9d7":"import numpy as np \nimport pandas as pd \nimport os\nimport seaborn as sns\nimport geocoder\nimport folium","ca04d6c0":"renfe= pd.read_csv(\"..\/input\/spanish-high-speed-rail-system-ticket-pricing\/thegurus-opendata-renfe-trips.csv\")","1201edab":"renfe = renfe.filter([\"origin\", \"destination\", \"departure\", \"duration\",\n             \"vehicle_type\",\"vehicle_class\", \"price\", \"fare\"])","52f8f68b":"renfe.dropna(inplace=True)","b6981a62":"renfe = renfe[(renfe['price'] != 0)]","37e68336":"renfe = renfe.groupby(['origin', 'destination', 'departure', 'duration', 'vehicle_type', 'vehicle_class', 'fare'], as_index=False)['price'].mean()","147aa159":"sns.boxplot(x= renfe['price']) ","3d037cf8":"sum(renfe.price > 250) \/ len(renfe) * 100","222c2039":"renfe = renfe[renfe.price < 250]","94d6cff8":"renfe = renfe.filter([\"origin\", \"destination\"])","635e60ce":"renfe.filter(['origin', 'destination']).groupby(['origin', 'destination'], as_index=False).size().sort_values(['size'], ascending= False)[:5] ","654b65e2":"route= renfe.filter(['origin', 'destination']).groupby(['origin', 'destination'], as_index=False).size().sort_values(['size'], ascending= False) \norigin= route['origin'].tolist()\ndestination= route['destination'].tolist()\nor_dest_unique= route.origin.unique().tolist()","bd3de423":"coord = []\nfor i in or_dest_unique:\n    g = geocoder.osm(str(i +\",  Spain\"))\n    coord.extend((str(i), g.osm['y'], g.osm['x']))","0ec1abfa":"df = pd.DataFrame(columns = ['origin_lng', 'origin_lat', 'destination_lng', 'destination_lat'])\nfor i in range(len(origin)):\n    s = []\n    if origin[i] in coord:\n        s.append(coord[coord.index(origin[i]) + 1])\n        s.append(coord[coord.index(origin[i]) + 2])\n    if destination[i] in coord:\n        s.append(coord[coord.index(destination[i]) + 1])\n        s.append(coord[coord.index(destination[i]) + 2])\n    df.loc[i] = s\nfor i in df.columns.tolist():\n    df[str(i)] = pd.to_numeric(df[str(i)])","afb78089":"df.head()","838a04ff":"centroid_lat = 40.208\ncentroid_lon = -3.713\nm = folium.Map([centroid_lat, centroid_lon], zoom_start=5)\nfor i in range(len(df)):\n    folium.CircleMarker(df.iloc[i][:2].tolist(),\n                        radius=15,\n                        fill_color=\"blue\", \n                       ).add_child(folium.Popup(str(destination[i]))).add_to(m) # destination\n\n    folium.CircleMarker(df.iloc[i][:2].tolist(),\n                        radius=15,\n                        fill_color=\"red\", \n                       ).add_child(folium.Popup(str(origin[i]))).add_to(m) # origin\n\n    folium.PolyLine([df.iloc[i][2:].tolist(), df.iloc[i][:2].tolist()],\n               color=\"red\").add_to(m)\n    \nm","d53f2beb":"The below function creates four columns according to the origin and destination:\n- Origin: origin_lng (longitude) and origin_lat (latitude)\n- Destination: destination_lng (longitude) anddestination_lat (latitude)","060491f4":"### 1.4) Removing outliers:","40cfe70c":"The below code extracts the coordinates of the different origin and destination cities","4ef323f2":"As we can see in the above map the Spanish railway has radial shape with center in the capital, Madrid. On the other hand, when one city is darker indicates there are many connections there (origin and destination). It seems the cities with more connections are Madrid and Barcelona. ","ab6f8db5":"It appears that only 0.0023% of the data is greater than the price equal to 250 EUR, hence we will delete the rows with values in which the price is greater than 250 EUR\u00b6","8b8ea74c":"### 1.3) Grouping data by the same type of travel:","60513077":"After that we can create the map with the help of the package folium","34a9e1fc":"As per the box plotgraph, it seems there are some outliers, however we should check this deeper","b10d12ec":"# 2) Map of routes:","e078ed53":"### 1.2) Removing NaN and zero values:","c7c93391":"Below we can see how often are the different travels, it seems the most frequent is between the big cities, such as between Madrid and Barcelona","111fb2a6":"### 1.1) Selecting columns:","03f734e8":"# 1) Data cleaning:","4cf94c27":"The average price is going to be returned, hence, we are transfoming the time series data with millions of rows to just thousand of rows with not repeated kind of travels","aaf30ad7":"One is able to interact with the map, it is possible to click the circles in order to see the name of the city and put more or less zoom."}}