{"cell_type":{"09cfd098":"code","58a37e9b":"code","e0f56d3a":"code","c91b6040":"code","dcbaff97":"code","45e74c40":"code","d8a7b506":"code","b0135136":"code","d1d2a996":"code","95fd36f9":"code","89491b01":"code","cb0f444a":"code","b63e1013":"code","f750ad32":"code","02dde016":"code","88c17103":"code","a369d3be":"code","6add4570":"code","59268589":"code","359b3b2e":"code","39c15217":"code","1d193dbc":"code","1f8c4d6d":"markdown","e7c34272":"markdown","0c824f73":"markdown","9a5fba23":"markdown","f05eca0e":"markdown","d73ad135":"markdown","62fe44e3":"markdown","9b281022":"markdown"},"source":{"09cfd098":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58a37e9b":"# import basic libraries\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","e0f56d3a":"# train dataset\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","c91b6040":"# test dataset\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","dcbaff97":"# gender dataset\ngender = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ngender.head()","45e74c40":"# Analyse data from the target variable\nnot_survived = round(train['Survived'].value_counts()[0]\/len(train)*100,2)\nsurvived = round(train['Survived'].value_counts()[1]\/len(train)*100,2)\n\nprint(f'{not_survived} % of passenger were died')\nprint(f'{survived} % of passenger survived')\n\nfemale = train[train['Sex']=='female']['Survived']\nmale = train[train['Sex']=='male']['Survived']\n\nprint(round(sum(female)\/len(female)*100,2),'% of female survived')\nprint(round(sum(male)\/len(male)*100,2), '% of male survived')","d8a7b506":"# variable information\ntrain.info()","b0135136":"# taget variable plot to see if data is unbalanced\nsns.countplot(x='Survived', data=train)\nplt.show()","d1d2a996":"# check numerical features\nplt.figure(figsize=(14,8))\nplt.subplot(2,2,1)\nsns.distplot(train['Age'])\nplt.subplot(2,2,2)\nsns.boxplot(train['Age'])\nplt.subplot(2,2,3)\nsns.distplot(train['Fare'])\nplt.subplot(2,2,4)\nsns.boxplot(train['Fare'])\nplt.show()","95fd36f9":"# lets see other variables from target variable on the plot\nplt.figure(figsize=(12,18))\n\nplt.subplot(5,2,1)\nsns.barplot(x='Sex',y='Survived', data=train, estimator=np.sum)\nplt.subplot(5,2,2)\nsns.countplot(x='Sex', data=train, hue='Survived')\n\nplt.subplot(5,2,3)\nsns.barplot(x='Pclass',y='Survived', data=train, estimator=np.sum)\nplt.subplot(5,2,4)\nsns.countplot(x='Pclass', data=train, hue='Survived')\n\nplt.subplot(5,2,5)\nsns.barplot(x='Embarked',y='Survived', data=train, estimator=np.sum)\nplt.subplot(5,2,6)\nsns.countplot(x='Embarked', data=train,hue='Survived')\n\nplt.subplot(5,2,7)\nsns.barplot(x='Parch',y='Survived', data=train, estimator=np.sum)\nplt.subplot(5,2,8)\nsns.countplot(x='Parch', data=train,hue='Survived')\n\nplt.subplot(5,2,9)\nsns.barplot(x='SibSp',y='Survived', data=train, estimator=np.sum)\nplt.subplot(5,2,10)\nsns.countplot(x='SibSp', data=train,hue='Survived')\nplt.show()","89491b01":"# check null values in the dataset\n#round(train.isnull().sum()\/len(train)*100,2)\nnull = pd.DataFrame(train.isnull().sum(), columns=['null'])\nnull['null_percentage'] = round(train.isnull().sum()\/len(train)*100,2)\nnull","cb0f444a":"# dataset is very small and removing null value will again reduce the size of dataset\n# so lets impute the null values\n\n# impute age with the median\ntrain['Age'].fillna(train['Age'].median(), inplace=True)\ntest['Age'].fillna(train['Age'].median(),inplace=True)\n#impute embarked with mode\ntrain['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True)\ntest['Fare'].fillna(train['Fare'].median(), inplace=True)\n\n# cabin value has more than 77% of null values; imputing will distort the dataset. \n# Also passengerID and ticket variable are not significant or doesn't add value\n# removing passengerID, cabin, ticket, Name\ntrain.drop(['PassengerId','Cabin','Ticket','Name'], axis=1,inplace=True)\ntest.drop(['Cabin','Ticket','Name'], axis=1,inplace=True)\n\ntrain.info()\nprint('*'*50)\ntest.info()","b63e1013":"# family members\ntrain['family_size'] = train['SibSp'] + train['Parch'] + 1\ntest['family_size'] = test['SibSp'] + test['Parch'] + 1\n\n# single or with family\ntrain['single'] = train['family_size'].apply(lambda x: 0 if x>1 else 1)\ntest['single'] = train['family_size'].apply(lambda x: 0 if x>1 else 1)\n\ntrain.head()","f750ad32":"# label enoding\nfrom sklearn.preprocessing import LabelEncoder\nlabel = LabelEncoder()\n\ntrain['Sex'] = label.fit_transform(train['Sex'])\ntest['Sex'] = label.fit_transform(test['Sex'])\n\ntrain['Embarked'] = label.fit_transform(train['Embarked'])\ntest['Embarked'] = label.fit_transform(test['Embarked'])\n\ntrain.head()","02dde016":"test.head()","88c17103":"plt.figure(figsize=(12,10))\nsns.heatmap(train.corr(),annot=True)\nplt.show()","a369d3be":"# removing highly correlated features - SibSp, Parch\ntrain = train.drop(['SibSp', 'Parch'], axis=1)\ntest = test.drop(['SibSp', 'Parch'], axis=1)","6add4570":"X = train.drop('Survived',axis=1)\ny = train['Survived']\nX_test = test.drop('PassengerId',axis=1)","59268589":"X.head()","359b3b2e":"X_test.head()","39c15217":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X,y)\nprediction = model.predict(X_test)\n","1d193dbc":"output = pd.DataFrame({'PassengerId' : test['PassengerId'], 'Survived' : prediction})\noutput.to_csv('submission.csv',index=False)","1f8c4d6d":"**Feature Engineering**","e7c34272":"# Gather Data","0c824f73":"# Model Data","9a5fba23":"# EDA","f05eca0e":"# Define the problem","d73ad135":"**Missing value treatment**","62fe44e3":"# Preparing data ","9b281022":"**Import Dataset**"}}