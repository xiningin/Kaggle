{"cell_type":{"b924b577":"code","d88de741":"code","84768478":"code","6653152a":"code","f6b2a606":"code","f98c60d2":"code","1065585d":"code","1144f052":"code","d14fa9e8":"code","e3946492":"code","6163d6c7":"code","971dace3":"code","87efc9e9":"code","75217af3":"markdown","2a13dbcc":"markdown","915681fa":"markdown","488d1fed":"markdown","09d87057":"markdown","e94729cc":"markdown","4a763e5d":"markdown"},"source":{"b924b577":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\nimport optuna\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, roc_auc_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression, LogisticRegression","d88de741":"train = pd.read_csv('..\/input\/tpssep2021dataset10folds\/train_10_folds.csv', index_col='id')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/test.csv', index_col='id')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nprint(test.shape)\nprint(train.shape)\nprint(submission.shape)","84768478":"# Adding the number of missing values in a row as a feature increases the score significantly\ntrain[\"missing_value_cnt\"] = train.isnull().sum(axis=1)\ntest[\"missing_value_cnt\"] = test.isnull().sum(axis=1)","6653152a":"xgb_train_preds = pd.read_csv(\"..\/input\/tps-sep2021-model-predictions-for-blending\/XGB_train_predictions.csv\")\nlgbm_train_preds = pd.read_csv(\"..\/input\/tps-sep2021-model-predictions-for-blending\/LGBM_train_predictions.csv\")\n\nxgb_test_preds = pd.read_csv(\"..\/input\/tps-sep2021-model-predictions-for-blending\/XGB_test_predictions.csv\")\nlgbm_test_preds = pd.read_csv(\"..\/input\/tps-sep2021-model-predictions-for-blending\/LGBM_test_predictions.csv\")\n\ntrain = train.merge(xgb_train_preds, on=\"id\", how=\"left\")\ntrain = train.merge(lgbm_train_preds, on=\"id\", how=\"left\")\n\ntest = test.merge(xgb_test_preds, on=\"id\", how=\"left\")\ntest = test.merge(lgbm_test_preds, on=\"id\", how=\"left\")","f6b2a606":"train.head()","f98c60d2":"test.head()","1065585d":"models = ['XGB', 'LGBM']\nall_test_predictions = []\nauc_scores = []\n\nfor fold in range(10):\n    X_train =  train[train.fold != fold]\n    X_valid = train[train.fold == fold]\n    X_test = test.copy()\n\n    y_train = X_train.claim\n    y_valid = X_valid.claim\n    \n    X_train = X_train.loc[:, ['{}_preds'.format(model) for model in models]]\n    X_valid = X_valid.loc[:, ['{}_preds'.format(model) for model in models]]\n    X_test = X_test.loc[:, ['{}_preds'.format(model) for model in models]]\n    \n    model = LogisticRegression(max_iter=1000)\n    model.fit(X_train, y_train)\n    \n    valid_preds = model.predict_proba(X_valid)[:, 1]\n    test_preds = model.predict_proba(X_test)[:, 1]\n    all_test_predictions.append(test_preds)\n    roc_auc = roc_auc_score(y_valid, valid_preds)\n    print(\"Validation score for fold {}: {}\".format(fold, roc_auc))\n    auc_scores.append(roc_auc)\n\nprint(\"Validation scores mean : {} and Standard deviation : {}\".format(np.mean(auc_scores), np.std(auc_scores)))","1144f052":"submission.claim = np.mean(np.array(all_test_predictions), axis=0)\nsubmission.to_csv(\"blending_output_kfold_cv.csv\", index=False)","d14fa9e8":"print(submission.shape)\nsubmission.head()","e3946492":"# models = ['XGB', 'LGBM']\n\n# X_train = train.copy()\n# X_test = test.copy()\n\n# y_train = train.claim\n# X_train = X_train.loc[:, ['{}_preds'.format(model) for model in models]]\n# X_test = X_test.loc[:, ['{}_preds'.format(model) for model in models]]","6163d6c7":"# model = LinearRegression()\n# model.fit(X_train, y_train)\n# test_preds = model.predict(X_test)","971dace3":"# print(roc_auc_score(y_train, model.predict(X_train)))","87efc9e9":"# submission['claim'] = test_preds\n# submission.to_csv('blending_output_with_whole_data.csv', index = False)","75217af3":"## Training model with 10 Fold Cross Validation","2a13dbcc":"## Introducing Additional Features","915681fa":"## Read the Prediction Files","488d1fed":"## Submission","09d87057":"## Read the data files","e94729cc":"## Training Model with Whole Training Data","4a763e5d":"## Import Necessary Libraries"}}