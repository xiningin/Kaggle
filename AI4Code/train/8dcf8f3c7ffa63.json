{"cell_type":{"02de301a":"code","f15b0fbf":"code","068d4143":"code","af8d62c6":"code","b99ce6af":"code","b4e88dc9":"code","9c7ad918":"code","2cdc2809":"code","9ca28a69":"code","0b89d830":"code","ed2743bd":"code","d79085d3":"code","84f6bf5f":"code","cf4c45ff":"code","34cc956e":"code","8cbd02ab":"code","333428e1":"code","68a860ea":"code","cbc13df1":"code","35c642d0":"code","e28f6758":"code","a26838f3":"code","68052989":"code","067f7dcc":"code","8eb03c69":"code","d7354a79":"code","97aef465":"code","43863ea7":"code","6fc23e6d":"code","6a646a25":"code","130524cc":"code","0b4f1ea1":"code","f6d7e4a7":"code","8b48aeeb":"code","798250e2":"code","e1aff7ea":"code","2b8724fe":"code","2024ea5f":"markdown","45c3deb9":"markdown","bc7be768":"markdown","a2905757":"markdown"},"source":{"02de301a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns","f15b0fbf":"data_file  = pd.read_csv('..\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 4.csv', encoding=\"utf-8\", delimiter=',')\ndata_file.head()","068d4143":"data_file.shape","af8d62c6":"data_file.info()","b99ce6af":"data_file.isnull().sum()  #number of missing values in each col.","b4e88dc9":"data_file.dropna(subset=['Book Name'], inplace= True)","9c7ad918":"data_file.dropna(subset=['City (Billing)'], inplace = True)","2cdc2809":"data_file.isnull().sum() #so now there is no null data in 'Book Name' and 'City' ","9ca28a69":"data_file.info() #In previous steps,I drop those rows that contains null data that's why it has same number of rows","0b89d830":"from itertools import chain\n\n# return list from series of comma-separated strings\ndef chainer(s):\n    return list(chain.from_iterable(s.str.split('\/')))\n\n# calculate lengths of splits\nlens = data_file['Book Name'].str.split('\/').map(len)\n\n# create new dataframe, repeating or chaining as appropriate\ndf = pd.DataFrame({'Order Number': np.repeat(data_file['Order Number'], lens),\n                    'Order Status': np.repeat(data_file['Order Status'], lens),\n                    'Book Name': chainer(data_file['Book Name']),\n                    'Order Date': np.repeat(data_file['Order Date'], lens),\n                    'City (Billing)': np.repeat(data_file['City (Billing)'], lens)})","ed2743bd":"df.shape","d79085d3":"len(df[\"Book Name\"].unique()) #unique books","84f6bf5f":"df['Order Status'].unique()","cf4c45ff":"df['Book Name'].value_counts().max() #Total no. of copies of most \"ordered\" book (but it's include complet.\/cancel\/return)","34cc956e":"df1 = df[df['Order Status'] == 'Completed']  # we need only completed order for best selling book\ndf1.head(10)","8cbd02ab":"df1['Book Name'].value_counts().max()  ##Total no. of copies of most \"selling\" book","333428e1":"df1['Book Name'].value_counts().idxmax()  #so, the below book is best selling book","68a860ea":"df1['Book Name'].value_counts() #Total numbers of each books","cbc13df1":"#Visualization of Top 10 selled books\nbook_chart = df1['Book Name'].value_counts().nlargest(10).to_frame()\npx.bar(book_chart, y = book_chart['Book Name'], x = book_chart.index, title = 'Most Selling Books')","35c642d0":"df['Order Status'].unique()","e28f6758":"df.groupby('Order Status')['Order Status'].agg('count')","a26838f3":"sns.countplot(df['Order Status'])\nfig = plt.gcf()\nfig.set_size_inches(8,4)\nplt.title('Order Status')","68052989":"len(df['City (Billing)'].unique())  ","067f7dcc":"df['City (Billing)'] = df['City (Billing)'].str.lower()\ndf['City (Billing)']","8eb03c69":"len(df['City (Billing)'].unique())   #Total no. of unique cities","d7354a79":"df['City (Billing)'] = df['City (Billing)'].apply(lambda x: x.strip(''))\ncity_stats = df['City (Billing)'].value_counts(ascending=False)\ncity_stats.head()","97aef465":"df1 = df[df['Order Status'] == 'Completed']\ndf1.head()","43863ea7":"top_10_cities = df1[\"City (Billing)\"].value_counts().nlargest(10).to_frame()  #top 10 only those cities whose orders are completed\ntop_10_cities   ","6fc23e6d":"combine = [df]\ntitlemapping = {'Canceled':0, 'Completed':1,'Returned':2}\nfor row in combine:\n    row[\"Order Status\"] = row[\"Order Status\"].map(titlemapping)\n    row['Order Status'] = row['Order Status'].fillna(0)\n    row['Order Status'] = row['Order Status'].astype(int)","6a646a25":"df[['City (Billing)','Order Status']].groupby(['Order Status']).agg(['count'])","130524cc":"#where order is canceled\ndf2 = df.loc[(df['Order Status'] == 0)]\ndf2.head()","0b4f1ea1":"#where order is completed\ndf3 = df.loc[(df['Order Status'] == 1)]\ndf3.head()","f6d7e4a7":"#where order is returned\ndf4 = df.loc[(df['Order Status'] == 2)]\ndf4.head()","8b48aeeb":"df5 = pd.concat([df2, df4])","798250e2":"#Cities from where the most number of orders are canceled\n\ntop_10_cities_cancelled = df2[\"City (Billing)\"].value_counts().nlargest(15).to_frame()\n\nfig = px.bar(top_10_cities_cancelled, y =top_10_cities_cancelled['City (Billing)'], x = top_10_cities_cancelled.index, title = 'Cities Rate for Cancelled Bought Books',\n            custom_data=[top_10_cities_cancelled['City (Billing)'],\n                          top_10_cities_cancelled.index]\n            )\n\nfig.update_xaxes(title=\"Top 10 Cities cancelled Ordered Books Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"City: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","e1aff7ea":"#Cities from where the most number of orders are returned\n\ntop_15_cities_returned = df3[\"City (Billing)\"].value_counts().nlargest(15).to_frame()\n\n\nfig = px.bar(top_15_cities_returned, y =top_15_cities_returned['City (Billing)'], x = top_15_cities_returned.index, title = 'Top 10 Cities From Where Books have been returned',\n             custom_data=[top_15_cities_returned['City (Billing)'],\n                          top_15_cities_returned.index]\n            )\n\nfig.update_xaxes(title=\"Cities from Books Returned Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"City: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","2b8724fe":"#It is for learning purpose. It is also included some other people code. ","2024ea5f":"# # Q3- Find a correlation between city and order status","45c3deb9":"# #Q.2) Visualize order status frequency","bc7be768":"# # CONT... Next questions will be soved soon.","a2905757":"# Q1. What is the best-selling book?"}}