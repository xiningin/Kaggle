{"cell_type":{"40dcab64":"code","f2179d49":"code","038e2f13":"code","383a4f38":"code","7d04b3c6":"code","967a5812":"code","0ceea1bc":"code","484edae2":"code","c53897fb":"code","081dfc68":"markdown"},"source":{"40dcab64":"import os, logging,math\nfrom collections import deque\n\nfrom tqdm import tqdm\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn import metrics\n\nimport datatable as dt\nfrom datatable import f\n\nimport mxnet as mx\nfrom mxnet import nd, autograd, gluon\nfrom mxnet.gluon import nn\n","f2179d49":"### the utils functions\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass GroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_size : int, default=None\n        Maximum size for a single training set.\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import GroupTimeSeriesSplit\n    >>> groups = np.array(['a', 'a', 'a', 'a', 'a', 'a',\\\n                           'b', 'b', 'b', 'b', 'b',\\\n                           'c', 'c', 'c', 'c',\\\n                           'd', 'd', 'd'])\n    >>> gtss = GroupTimeSeriesSplit(n_splits=3)\n    >>> for train_idx, test_idx in gtss.split(groups, groups=groups):\n    ...     print(\"TRAIN:\", train_idx, \"TEST:\", test_idx)\n    ...     print(\"TRAIN GROUP:\", groups[train_idx],\\\n                  \"TEST GROUP:\", groups[test_idx])\n    TRAIN: [0, 1, 2, 3, 4, 5] TEST: [6, 7, 8, 9, 10]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a']\\\n    TEST GROUP: ['b' 'b' 'b' 'b' 'b']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] TEST: [11, 12, 13, 14]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b']\\\n    TEST GROUP: ['c' 'c' 'c' 'c']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\\n    TEST: [15, 16, 17]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b' 'c' 'c' 'c' 'c']\\\n    TEST GROUP: ['d' 'd' 'd']\n    \"\"\"\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_size=None\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_size = max_train_size\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n        group_test_size = n_groups \/\/ n_folds\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n            for train_group_idx in unique_groups[:group_test_start]:\n                train_array_tmp = group_dict[train_group_idx]\n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n            train_end = train_array.size\n            if self.max_train_size and self.max_train_size < train_end:\n                train_array = train_array[train_end -\n                                          self.max_train_size:train_end]\n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n            yield [int(i) for i in train_array], [int(i) for i in test_array]\n\n# modified code for group gaps; source\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]\n","038e2f13":"\nclass MLPModel(nn.Block):\n    def __init__(self, hiddenList, dropoutList,actType='relu', **kwargs):\n        super(MLPModel, self).__init__(**kwargs)\n        assert len(hiddenList) == len(dropoutList)\n        assert actType in ['relu','tanh','softrelu']\n        self.net=nn.Sequential()\n        with self.name_scope():\n            self.embedding1 = nn.Embedding(2,2)\n            for nHidden, dropout in zip(hiddenList, dropoutList):\n                self.net.add(nn.Dense(nHidden, activation=actType))\n                self.net.add(nn.Dropout(dropout))\n            self.Resp = nn.Dense(1, activation='sigmoid')\n            self.Resp1 = nn.Dense(1, activation='sigmoid')\n            self.Resp2 = nn.Dense(1, activation='sigmoid')\n            self.Resp3 = nn.Dense(1, activation='sigmoid')\n            self.Resp4 = nn.Dense(1, activation='sigmoid')\n\n    def forward(self,  X):\n        embed1 = self.embedding1(X[:,0])\n        embedConcat = nd.concat(embed1,X[:,1:])\n        tmpOutput =  self.net(embedConcat)\n        ##The multiple output\n        resp =  self.Resp(tmpOutput)\n        resp1 =  self.Resp1(tmpOutput)\n        resp2 =  self.Resp2(tmpOutput)\n        resp3 =  self.Resp3(tmpOutput)\n        resp4 =  self.Resp4(tmpOutput)\n        return resp[:,0],resp1[:,0],resp2[:,0],resp3[:,0],resp4[:,0]","383a4f38":"\n\"\"\"\nThe trainer framework for nn models\n\"\"\"\ndef utilityScoreBincount(date, weight, resp, action):\n    countI = len(np.unique(date))\n    Pi = np.bincount(date,weight*resp*action)\n    t = np.sum(Pi) \/ np.sqrt(np.sum(Pi**2)) * np.sqrt(250\/countI)\n    u = np.clip(t,0,6)*np.sum(Pi)\n    return u\n\n\nclass MLPTrainer(object):\n    def __init__(self, nnModel, modelCtx, dataCtx):\n        self.modelCtx = modelCtx\n        self.dataCtx = dataCtx\n        self.model =  nnModel\n\n    def saveCheckpoint(self,nnModel, savePath, mark, metric):\n        if not os.path.exists(savePath):\n            os.makedirs(savePath)\n        filename = os.path.join(savePath, \"mark_{:s}_metrics_{:.3f}\".format(mark, metric))\n        filename +='.param'\n        nnModel.save_parameters(filename)\n\n    def predict(self, testX, batchSize=2000):\n        predDtSize = testX.shape[0]\n        # if the test dataset is small\n        if(predDtSize<=batchSize):\n            return self.model(nd.array(testX,dtype='float32', ctx=self.dataCtx))[0]\n        # if the test dataset is large(to prevent memory allocation error of mxnet)\n        blockSize = math.ceil(predDtSize \/\/ batchSize)+1\n        predResult = self.model(nd.array(testX[0:batchSize,:],dtype='float32', ctx=self.dataCtx))[0]\n        for i in range(1, blockSize):\n            subStartIndex = i*batchSize\n            subEndIndex = min(subStartIndex+batchSize, predDtSize)\n            blockPred = self.model(nd.array(testX[subStartIndex:subEndIndex,:],dtype='float32', ctx=self.dataCtx))[0]\n            predResult = nd.concat(predResult, blockPred, dim=0)\n        return predResult\n            \n    def basicEvaluator(self, testX, testY, testW, testD,  lossFunc, optThreshold,  metric):\n        assert metric in set(['auc','utility','both'])\n    \n        loss, auc, utility = [0.0, 0.0, 0.0]\n\n        pred =self.predict(testX)\n        npPred = pred.asnumpy()\n        \n        predAction = np.where(npPred>=optThreshold, 1, 0)\n        print(sum(predAction>0.5))\n        label = testY[:,4]>0\n        # The loss\n        loss = nd.mean(lossFunc(pred, nd.array(label, ctx=self.dataCtx)))[0].asscalar()\n        # The auc\n        fpr, tpr, thresholds = metrics.roc_curve(label, npPred)\n        auc = metrics.auc(fpr, tpr)\n        # The utility \n        utility = utilityScoreBincount(testD, testW, testY[:,4], predAction)\n        return loss, auc, utility\n\n    def fit(self,mark, paramsDict, trainX, trainY, trainW, testX=None, testY=None, testW=None, testD=None):\n        \"\"\"\n        The parameters list:\n            esEpochs: the early-stopping epoch: -1, non early stopping\n        \"\"\"\n        epochs = paramsDict['epochs']\n        esEpochs = paramsDict['esEpochs']\n        evalCriteria = paramsDict['evalCriteria']\n\n        batchSize = paramsDict['batchSize']\n        learningRate = paramsDict['learningRate']\n        sampleRate = paramsDict['sampleRate']\n        smoothingAlpha = paramsDict['smoothingAlpha']\n\n        lossFunc = paramsDict['lossFunc']\n        optimizer = paramsDict['optimizer']\n        initializer = paramsDict['initializer']\n        ### The model initialization\n        self.model.collect_params().initialize(initializer, ctx=self.modelCtx)\n        ### The trainer\n        trainer = gluon.Trainer(self.model.collect_params(), optimizer=optimizer, optimizer_params={'learning_rate': learningRate})\n\n        ## \n        nSamples = trainX.shape[0]\n        nBatch = int(nSamples \/ batchSize)\n        maxTrainingSample = nSamples*sampleRate\n\n        # Keep the metrics history\n        history = dict()\n        lossTrainSeq = []\n        lossTestSeq = []\n\n        # The early stopping framework\n        bestValidMetric = 999999. if evalCriteria =='min' else 0.\n        if(esEpochs > 0):\n            modelDeque = deque()\n            evalMetricDeque= deque()\n\n        for e in tqdm(range(epochs), desc='epochs'):\n            cumLoss = 0.\n            cumSamples = 0.\n            trainIter = gluon.data.DataLoader(gluon.data.ArrayDataset(trainX, trainY), batch_size=batchSize, shuffle=True)\n            for  data, allLabel in trainIter:\n                data = nd.array(data, dtype='float32', ctx=self.dataCtx)\n                allLabel = nd.array(allLabel>0,dtype='float32',ctx=self.dataCtx)\n                label = nd.array(nd.abs(allLabel-smoothingAlpha),dtype='float32', ctx=self.dataCtx)\n                with autograd.record():\n                    resPred,resPred1, resPred2,resPred3, resPred4  = self.model(data)\n                    resloss = lossFunc(resPred, label[:,4])\n                    resloss1 = lossFunc(resPred1, label[:,0])\n                    resloss2 = lossFunc(resPred2, label[:,1])\n                    resloss3 = lossFunc(resPred3, label[:,2])\n                    resloss4 = lossFunc(resPred4, label[:,3])\n                    loss = 8*resloss+resloss1+resloss2+resloss3+resloss4\n                loss.backward()\n                trainer.step(batchSize)\n                batchLoss = nd.sum(loss).asscalar()\n                batchAvgLoss = batchLoss \/ data.shape[0]\n                cumLoss += batchLoss\n\n                cumSamples += batchSize\n                if(cumSamples>maxTrainingSample): break\n            #sampling\n\n            logging.info(\"Epoch %s \/ %s. Loss: %s.\" % (e + 1, epochs, cumLoss \/ nSamples))\n            print(\"Epoch %s \/ %s. Training Loss: %s.\" % (e + 1, epochs, cumLoss \/ nSamples))\n            lossTrainSeq.append(cumLoss\/nSamples)\n            if not testX is None:\n                testLoss, testAuc,testUtility = self.basicEvaluator(testX, testY, testW,testD, lossFunc,0.5, 'auc')\n                print(\"Epoch %s \/ %s. Testing loss: %s. Testing utility: %s. Testing AUC: %s. Best AUC: %s\" % (e + 1, epochs, testLoss, testUtility, testAuc, bestValidMetric))\n                ###Save the model\n                #self.saveCheckpoint('Params',mark, e)\n                ### The early stopping framework\n                if(testAuc > bestValidMetric):\n                    modelDeque.clear()\n                    modelDeque.append(self.model)\n\n                    evalMetricDeque.clear()\n                    evalMetricDeque.append(testAuc)\n                    ## update the best metrics\n                    bestValidMetric = testAuc\n\n                elif len(modelDeque) < esEpochs:\n                    modelDeque.append(self.model)\n                    evalMetricDeque.append(testAuc)\n                else:\n                    break\n        bestModel = modelDeque.popleft()\n        bestMetric = evalMetricDeque.popleft()\n        #self.saveCheckpoint(bestModel, 'Params',mark, bestMetric)\n\n        return bestModel","7d04b3c6":"\"\"\"\nLoad the dataset and preprocessing\n\"\"\"\ndataDirPath = \"\/kaggle\/input\/jane-street-market-prediction\/\"\ntrain = dt.fread(dataDirPath + 'train.csv', na_strings = ['NA','NULL','NaN','\\\\N'])\n# select part of data for baseline testing\ntrain = train[(f.date>85) & (f.weight>0),:]\n# add classification indicator\ntrain[:,[\"action1\",\"action2\",\"action3\",\"action4\",\"action\"]] = train[:, [f.resp_1>0, f.resp_2>0, f.resp_3>0, f.resp_4>0, f.resp>0]]\ntrain[[\"action1\",\"action2\",\"action3\",\"action4\",\"action\"]] = dt.int32\n# The features\nfeatures = [c for c in  train.names if 'feature' in c]\nresps = [c for c in train.names if 'resp' in c]\nactions = [c for c in train.names if 'action' in c]\n\n# The imputation mean\nmeanImputeValues = train[:, 8:137].mean().to_numpy()[0,:]\n#np.savetxt('meanImputation.npy', meanImputeValues,delimiter=',')\n#meanImputeValues = np.loadtxt('meanImputation.npy')\n\n### The basic imputation\ntrain = train.to_pandas()\ntrain = train.astype({c: np.float32 for c, t in train.dtypes.items() if t == np.float64})\ntrain = train.fillna(train.mean())\n\ntrain.loc[train['feature_0'] ==-1, 'feature_0'] = 0","967a5812":"nSplits = 5\ngroupGap = 5\n\ncv = PurgedGroupTimeSeriesSplit(\n    n_splits=5,\n    max_train_group_size=np.inf,\n    group_gap=0,\n    max_test_group_size=np.inf\n)\n\n\n\nfoldList = []\ntrainXList = []; trainYList = []; trainWList = []\nvalidXList = []; validYList = []; validWList =[];validDList = [];\n\nfor fold, (tr, te) in enumerate(cv.split(train['resp'].values, train['resp'].values, train['date'].values)):\n    if fold != 4: continue\n    subTrain, subValid = train.loc[tr,], train.loc[te,]\n\n    trainX, trainY, trainW = subTrain.loc[tr, features].values, subTrain.loc[tr, resps].values, subTrain.loc[tr, 'weight'].values\n    validX, validY, validW,validD = subValid.loc[te, features].values, subValid.loc[te, resps].values, subValid.loc[te, 'weight'].values, subValid.loc[te, 'date'].values\n\n    foldList.append(fold)\n    trainXList.append(trainX);  trainYList.append(trainY);  trainWList.append(trainW)\n    validXList.append(validX);  validYList.append(validY);  validWList.append(validW); validDList.append(validD)","0ceea1bc":"\n\nhiddenList = [128, 64,64]\ndropoutList = [0.2, 0.3,0.3]\n\nbaseMLP = MLPModel(hiddenList,dropoutList)\nmodelPrefix = 'MLP_{}d{}l.params'.format(hiddenList[0], len(hiddenList))\n\nmodelCtx = mx.gpu() if mx.context.num_gpus() else mx.cpu()\ndataCtx = mx.gpu() if mx.context.num_gpus() else mx.cpu()\n\nmlpTrainer = MLPTrainer(baseMLP, dataCtx, modelCtx)\n\n\"\"\"\"\nDefine the trainer\n\"\"\"\nfrom mxnet.gluon.loss import SigmoidBinaryCrossEntropyLoss\n\nepochs = 50\nesEpochs = 3\nevalCriteria = 'max'\n\nbatchSize = 128*8\nlearningRate = 0.001\nsampleRate = 0.8\nsmoothingAlpha=0.005\n\ninitializer = mx.init.Xavier(magnitude=2.24)\noptimizer = 'adam';\nlossFunc = SigmoidBinaryCrossEntropyLoss(from_sigmoid=True)\n\n\ntrainerParamsList = {'epochs': epochs, 'esEpochs': esEpochs, 'evalCriteria': evalCriteria,\n        'batchSize': batchSize, 'learningRate': learningRate, 'sampleRate': sampleRate, 'smoothingAlpha':smoothingAlpha,\n                    'initializer': initializer, 'optimizer':optimizer, 'lossFunc': lossFunc}\n","484edae2":"\"\"\"\nThe model training\n\"\"\"\nmodelList = []\nfor fold in foldList:\n    fold=0\n    subMark = \"fold\"+str(fold)\n    trainX, trainY, trainW = np.array(trainXList[fold]), np.array(trainYList[fold]),np.array(trainWList[fold])\n    testX, testY, testW,testD = np.array(validXList[fold]), np.array(validYList[fold]), np.array(validWList[fold]), np.array(validDList[fold])\n    subFit = mlpTrainer.fit(subMark, trainerParamsList, trainX, trainY, trainW,  testX, testY, testW,testD)\n    modelList.append(subFit)\n    break","c53897fb":"\nimport janestreet\nenv = janestreet.make_env()\nenvIter = env.iter_test()\n\n\noptThreshold = 0.5 \n\nfor (testDf, predDf) in tqdm(envIter):\n    if testDf['weight'].item() > 0:\n        testDf.loc[testDf['feature_0'] == -1, 'feature_0'] = 0\n        xTT = testDf.loc[:, features].values\n        if np.isnan(xTT[:, 1:].sum()):\n            xTT[:, 1:] = np.nan_to_num(xTT[:, 1:]) + np.isnan(xTT[:, 1:]) * meanImputeValues\n        pred = 0.\n        pred = subFit(nd.array(xTT,ctx=dataCtx))[0].asnumpy()\n        predDf.action = np.where(pred >= optThreshold, 1, 0).astype(int)\n    else:\n        predDf.action = 0\n    env.predict(predDf)\n","081dfc68":"### Submitting"}}