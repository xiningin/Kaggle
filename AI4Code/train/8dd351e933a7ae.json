{"cell_type":{"a9a00735":"code","18a1f46b":"code","e856f552":"code","10abad3e":"code","b41199c9":"code","2050b8af":"code","409376b3":"code","25628dbc":"code","6627342d":"code","bce42191":"code","ac4eb408":"code","97ad4944":"code","d58da50f":"code","485b62da":"code","5db5e3ec":"code","025f6ba3":"code","ce286fbb":"code","7261dd94":"code","737ac52d":"code","e5f35977":"code","099e7d3e":"code","520362cb":"code","8e9d0acc":"code","b9a95a8d":"code","ba87ddf8":"code","9f493dc5":"code","037356e0":"code","0a75adc2":"code","a0717c25":"code","0a023db8":"code","04ee54a0":"code","d0d50949":"code","c4171484":"code","c6b328d5":"code","28d11893":"markdown","5ab12025":"markdown","43c6b9cb":"markdown","7e8c2e42":"markdown","818e29cd":"markdown","b1b45751":"markdown","c36c97ad":"markdown","466043a5":"markdown","9b954754":"markdown","240edc93":"markdown","6eeb50a6":"markdown","a8180558":"markdown","d60b665f":"markdown","a4a068a8":"markdown","a75d2446":"markdown","850825b1":"markdown","a27bf23a":"markdown"},"source":{"a9a00735":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import Lasso, LassoCV","18a1f46b":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")\ntest2=pd.read_csv(\"..\/input\/test.csv\")\nlen_train=train.shape[0]\nhouses=pd.concat([train,test], sort=False)\nprint(train.shape)\nprint(test.shape)","e856f552":"houses.select_dtypes(include='object').head()","10abad3e":"houses.select_dtypes(include=['float','int']).head()","b41199c9":"houses.select_dtypes(include='object').isnull().sum()[houses.select_dtypes(include='object').isnull().sum()>0]","2050b8af":"for col in ('Alley','Utilities','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1',\n            'BsmtFinType2','Electrical','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond',\n           'PoolQC','Fence','MiscFeature'):\n    train[col]=train[col].fillna('None')\n    test[col]=test[col].fillna('None')\n","409376b3":"#for col in ('MSZoning','Exterior1st','Exterior2nd','KitchenQual','SaleType','Functional'):\n    #train[col]=train[col].fillna(train[col].mode()[0])\n    #test[col]=test[col].fillna(test[col].mode()[0])","25628dbc":"for col in ('MSZoning','Exterior1st','Exterior2nd','KitchenQual','SaleType','Functional'):\n    train[col]=train[col].fillna(train[col].mode()[0])\n    test[col]=test[col].fillna(train[col].mode()[0])","6627342d":"houses.select_dtypes(include=['int','float']).isnull().sum()[houses.select_dtypes(include=['int','float']).isnull().sum()>0]","bce42191":"for col in ('MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageYrBlt','GarageCars','GarageArea'):\n    train[col]=train[col].fillna(0)\n    test[col]=test[col].fillna(0)","ac4eb408":"#train['LotFrontage']=train.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.mean()))\n#test['LotFrontage']=test.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.mean()))","97ad4944":"train['LotFrontage']=train['LotFrontage'].fillna(train['LotFrontage'].mean())\ntest['LotFrontage']=test['LotFrontage'].fillna(train['LotFrontage'].mean())\n\n","d58da50f":"print(train.isnull().sum().sum())\nprint(train.isnull().sum().sum())","485b62da":"plt.figure(figsize=[30,15])\nsns.heatmap(train.corr(), annot=True)","5db5e3ec":"#from 2 features high correlated, removing the less correlated with SalePrice\ntrain.drop(['GarageArea','1stFlrSF','TotRmsAbvGrd','2ndFlrSF'], axis=1, inplace=True)\ntest.drop(['GarageArea','1stFlrSF','TotRmsAbvGrd','2ndFlrSF'], axis=1, inplace=True)","025f6ba3":"#removing outliers recomended by author\ntrain = train[train['GrLivArea']<4000]","ce286fbb":"len_train=train.shape[0]\nprint(train.shape)","7261dd94":"houses=pd.concat([train,test], sort=False)","737ac52d":"houses['MSSubClass']=houses['MSSubClass'].astype(str)","e5f35977":"skew=houses.select_dtypes(include=['int','float']).apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskew_df=pd.DataFrame({'Skew':skew})\nskewed_df=skew_df[(skew_df['Skew']>0.5)|(skew_df['Skew']<-0.5)]","099e7d3e":"skewed_df.index","520362cb":"train=houses[:len_train]\ntest=houses[len_train:]","8e9d0acc":"lam=0.1\nfor col in ('MiscVal', 'PoolArea', 'LotArea', 'LowQualFinSF', '3SsnPorch',\n       'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch', 'ScreenPorch',\n       'BsmtHalfBath', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF',\n       'LotFrontage', 'GrLivArea', 'BsmtFinSF1', 'BsmtUnfSF', 'Fireplaces',\n       'HalfBath', 'TotalBsmtSF', 'BsmtFullBath', 'OverallCond', 'YearBuilt',\n       'GarageYrBlt'):\n    train[col]=boxcox1p(train[col],lam)\n    test[col]=boxcox1p(test[col],lam)","b9a95a8d":"train['SalePrice']=np.log(train['SalePrice'])","ba87ddf8":"houses=pd.concat([train,test], sort=False)\nhouses=pd.get_dummies(houses)","9f493dc5":"train=houses[:len_train]\ntest=houses[len_train:]","037356e0":"train.drop('Id', axis=1, inplace=True)\ntest.drop('Id', axis=1, inplace=True)","0a75adc2":"x=train.drop('SalePrice', axis=1)\ny=train['SalePrice']\ntest=test.drop('SalePrice', axis=1)","a0717c25":"sc=RobustScaler()\nx=sc.fit_transform(x)\ntest=sc.transform(test)","0a023db8":"model=Lasso(alpha =0.001, random_state=1)","04ee54a0":"model.fit(x,y)","d0d50949":"pred=model.predict(test)\npreds=np.exp(pred)","c4171484":"output=pd.DataFrame({'Id':test2.Id, 'SalePrice':preds})\noutput.to_csv('submission.csv', index=False)","c6b328d5":"output.head()","28d11893":"### Numerical","5ab12025":"### 1.4 - Remove some features high correlated and outliers","43c6b9cb":"### 1.1- Imports","7e8c2e42":"### 1.6 - Prepare for model\n","818e29cd":"# Regression:top 20% with a very simple model-lasso\n\nPlease, upvote if you find useful.\n\n### Steps:\n* 1- Preprocessing and exploring\n    * 1.1 - Imports\n    * 1.2 - Checking Types\n    * 1.3 - Missing Values\n    * 1.4 - Remove some features high correlated and outliers\n    * 1.5 - Transformations\n    * 1.6 - Prepare for model\n* 2- Model\n* 3- Submission\n","b1b45751":"Skew","c36c97ad":"### 1.5 - Transformations","466043a5":"# 3- Submission","9b954754":"Depending on the categorical variable, missing value can means \"None\" (which I will fill with \"None\") or \"Not Available\" (which I will fill with the mode).","240edc93":"# 2 - Model","6eeb50a6":"### Categorical\n","a8180558":"Categorical to one hot encoding","d60b665f":"Numerical to categorical","a4a068a8":"### 1.2- Checking Types\n","a75d2446":"#### When we read the data description file we realize that \"MSSubClass\", a numerical features (not ordinal), should be transformed into categorical. I'll do this later in this kernel.","850825b1":"Some NAs means \"None\" (which I will fill with 0) or means \"Not Available\" (which I will fill with mean)","a27bf23a":"### 1.3 - Missing Values"}}