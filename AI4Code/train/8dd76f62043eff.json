{"cell_type":{"62f08bc1":"code","157335da":"code","f0946c02":"code","6ac35349":"code","6fbc128c":"code","9c2f1565":"code","f4371a66":"code","0acea895":"code","5f439f82":"code","120bc9b3":"code","99f13a2a":"code","eeb15db5":"code","71f1c29c":"code","605b56cb":"code","2295c56e":"code","64fd875f":"code","c835f72d":"code","4c09066f":"code","ec3175e5":"code","2ad536b5":"code","6943322d":"code","59fccc50":"code","74e7a517":"code","d7f100d6":"code","0652a71c":"code","56656314":"code","09e30fa2":"code","fa51ba50":"code","d52370a0":"code","73fa3b54":"code","855e50c9":"code","78193a6f":"code","8e02d2de":"code","524f3ff7":"code","f75e2084":"code","2b5c4c22":"code","3e12f68d":"code","bcd12682":"code","98a73b7a":"code","a69e3098":"code","cbcc87f9":"code","9b8e9f98":"code","55fc2777":"code","838c209b":"code","b53375bc":"code","fb554188":"code","31eac0fb":"code","810d8ab7":"code","c6124596":"code","8855f696":"code","80a476dd":"code","6fe2e2de":"code","97cb3892":"code","5b1cc79c":"code","888eb6c7":"code","37446dec":"code","4e1c323a":"code","287fea6d":"code","a958778c":"code","d2d4e5c9":"markdown","26977d3d":"markdown","a1549729":"markdown","7de976c6":"markdown","3bf545a6":"markdown","677c1dbf":"markdown","a6968149":"markdown"},"source":{"62f08bc1":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nimport skimage\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, \\\nConvolution2D, Reshape, GaussianNoise\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\nfrom keras.regularizers import l1,l2,L1L2\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","157335da":"Proton_Train_Path = Path(\"..\/input\/proton-collision-image-set\/Proton Collision 13TeV\/Train\")\n\nProton_Train_PNG_Path = list(Proton_Train_Path.glob(r\"*\/*.png\"))\n\nProton_Train_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Proton_Train_PNG_Path))\n\nTrain_PNG_Path_Series = pd.Series(Proton_Train_PNG_Path,name=\"PNG\").astype(str)\nTrain_PNG_Labels_Series = pd.Series(Proton_Train_PNG_Labels,name=\"CATEGORY\")\n\nMain_Train_Data = pd.concat([Train_PNG_Path_Series,Train_PNG_Labels_Series],axis=1)\n\nMain_Train_Data = Main_Train_Data.sample(frac=1).reset_index(drop=True)","f0946c02":"TTbar_Set = Main_Train_Data[Main_Train_Data[\"CATEGORY\"] == \"TTbar\"]\nQCD_Set = Main_Train_Data[Main_Train_Data[\"CATEGORY\"] == \"QCD\"]\nWjets_Set = Main_Train_Data[Main_Train_Data[\"CATEGORY\"] == \"WJets\"]\n\nTTbar_Set = TTbar_Set.reset_index()\nQCD_Set = QCD_Set.reset_index()\nWjets_Set = Wjets_Set.reset_index()","6ac35349":"figure = plt.figure(figsize=(10,10))\n\nProton_Example_IMG = Main_Train_Data[\"PNG\"][33]\nReading_IMG = cv2.imread(Proton_Example_IMG)\nRGB_Transformed = cv2.cvtColor(Reading_IMG,cv2.COLOR_BGR2RGB)\nplt.xlabel(RGB_Transformed.shape)\nplt.ylabel(RGB_Transformed.size)\nplt.title(Main_Train_Data[\"CATEGORY\"][33])\nplt.imshow(RGB_Transformed)","6fbc128c":"figure = plt.figure(figsize=(10,10))\n\nProton_Example_IMG = Main_Train_Data[\"PNG\"][22000]\nReading_IMG = cv2.imread(Proton_Example_IMG)\nRGB_Transformed = cv2.cvtColor(Reading_IMG,cv2.COLOR_BGR2RGB)\nplt.xlabel(RGB_Transformed.shape)\nplt.ylabel(RGB_Transformed.size)\nplt.title(Main_Train_Data[\"CATEGORY\"][33])\nplt.imshow(RGB_Transformed)","9c2f1565":"figure,axis = plt.subplots(nrows=4,ncols=4,figsize=(12,12))\n\nfor indexing,seting in enumerate(axis.flat):\n    Reading_P_IMG = cv2.imread(Main_Train_Data[\"PNG\"][indexing])\n    Reading_P_IMG = cv2.cvtColor(Reading_P_IMG,cv2.COLOR_BGR2RGB)\n    seting.set_xlabel(Reading_P_IMG.shape)\n    seting.set_ylabel(Reading_P_IMG.size)\n    seting.set_title(Main_Train_Data[\"CATEGORY\"][indexing])\n    seting.imshow(Reading_P_IMG)\n    \nplt.tight_layout()\nplt.show()","f4371a66":"TTbar_Example = cv2.imread(TTbar_Set[\"PNG\"][345])\nQCD_Example = cv2.imread(QCD_Set[\"PNG\"][345])\nWjets_Example = cv2.imread(Wjets_Set[\"PNG\"][345])","0acea895":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(20,20))\n\n\nCanny_TTbar = cv2.Canny(TTbar_Example,10,100)\nCanny_QCD = cv2.Canny(QCD_Example,10,100)\nCanny_Wjets = cv2.Canny(Wjets_Example,10,100)\n\naxis[0].imshow(Canny_TTbar)\naxis[1].imshow(Canny_QCD)\naxis[2].imshow(Canny_Wjets)","5f439f82":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(20,20))\n\n_,Threshold_TTbar = cv2.threshold(TTbar_Example,90,155,cv2.THRESH_BINARY_INV)\n_,Threshold_QCD = cv2.threshold(QCD_Example,90,155,cv2.THRESH_BINARY_INV)\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\n\naxis[0].imshow(Threshold_TTbar)\naxis[1].imshow(Threshold_QCD)\naxis[2].imshow(Threshold_Wjets)","120bc9b3":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(20,20))\n\n_,Threshold_TTbar = cv2.threshold(TTbar_Example,90,155,cv2.THRESH_BINARY_INV)\n_,Threshold_QCD = cv2.threshold(QCD_Example,90,155,cv2.THRESH_BINARY_INV)\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\n\nCanny_TTbar = cv2.Canny(Threshold_TTbar,10,100)\nCanny_QCD = cv2.Canny(Threshold_QCD,10,100)\nCanny_Wjets = cv2.Canny(Threshold_Wjets,10,100)\n\ncontours_TTbar,_ = cv2.findContours(Canny_TTbar,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ncontours_QCD,_ = cv2.findContours(Canny_QCD,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ncontours_Wjets,_ = cv2.findContours(Canny_Wjets,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n\ndraw_TTBAR = cv2.drawContours(TTbar_Example,contours_TTbar,-1,(255,0,0),1)\ndraw_QCD = cv2.drawContours(QCD_Example,contours_QCD,-1,(255,0,0),1)\ndraw_Wjets = cv2.drawContours(Wjets_Example,contours_Wjets,-1,(255,0,0),1)\n\naxis[0].imshow(draw_TTBAR)\naxis[1].imshow(draw_QCD)\naxis[2].imshow(draw_Wjets)","99f13a2a":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_TTbar = cv2.threshold(TTbar_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_TTbar = cv2.Canny(Threshold_TTbar,10,100)\ncontours_TTbar,_ = cv2.findContours(Canny_TTbar,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_TTBAR = cv2.drawContours(TTbar_Example,contours_TTbar,-1,(255,0,0),1)\n\nplt.imshow(draw_TTBAR)","eeb15db5":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_QCD = cv2.threshold(QCD_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_QCD = cv2.Canny(Threshold_QCD,10,100)\ncontours_QCD,_ = cv2.findContours(Canny_QCD,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_QCD = cv2.drawContours(QCD_Example,contours_QCD,-1,(255,0,0),1)\n\nplt.imshow(draw_QCD)","71f1c29c":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_Wjets = cv2.Canny(Threshold_Wjets,10,100)\ncontours_Wjets,_ = cv2.findContours(Canny_Wjets,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_Wjets = cv2.drawContours(Wjets_Example,contours_Wjets,-1,(255,0,0),1)\n\nplt.imshow(draw_Wjets)","605b56cb":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_Wjets = cv2.Canny(Threshold_Wjets,10,100)\ncontours_Wjets,_ = cv2.findContours(Canny_Wjets,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_Wjets = cv2.drawContours(Wjets_Example,contours_Wjets,-1,(255,0,0),1)\n\nplt.imshow(draw_Wjets)","2295c56e":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_Wjets = cv2.Canny(Threshold_Wjets,10,100)\ncontours_Wjets,_ = cv2.findContours(Canny_Wjets,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_Wjets = cv2.drawContours(Wjets_Example,contours_Wjets,-1,(255,0,0),1)\n\nplt.imshow(draw_Wjets)","64fd875f":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_QCD = cv2.threshold(QCD_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_QCD = cv2.Canny(Threshold_QCD,10,100)\ncontours_QCD,_ = cv2.findContours(Canny_QCD,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_QCD = cv2.drawContours(QCD_Example,contours_QCD,-1,(255,0,0),1)\n\nfor cnt in contours_QCD:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(QCD_Example,(x,y),(x+w,y+h),(0,0,255),2)\n\nplt.imshow(QCD_Example)","c835f72d":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_Wjets = cv2.Canny(Threshold_Wjets,10,100)\ncontours_Wjets,_ = cv2.findContours(Canny_Wjets,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_Wjets = cv2.drawContours(Wjets_Example,contours_Wjets,-1,(255,0,0),1)\n\nfor cnt in contours_Wjets:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(Wjets_Example,(x,y),(x+w,y+h),(0,0,255),2)\n\nplt.imshow(Wjets_Example)","4c09066f":"figure,axis = plt.subplots(nrows=4,ncols=4,figsize=(12,12))\n\nfor indexing,seting in enumerate(axis.flat):\n    Reading_P_IMG = cv2.imread(TTbar_Set[\"PNG\"][indexing])\n    Reading_P_IMG = cv2.cvtColor(Reading_P_IMG,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_IMG = cv2.threshold(Reading_P_IMG,90,155,cv2.THRESH_BINARY_INV)\n    Canny_IMG = cv2.Canny(Threshold_IMG,10,100)\n    contours_IMG,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    draw_IMG = cv2.drawContours(Reading_P_IMG,contours_IMG,-1,(255,0,0),1)\n    \n    for cnt in contours_IMG:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(Reading_P_IMG,(x,y),(x+w,y+h),(0,0,255),2)\n        \n    seting.set_xlabel(Reading_P_IMG.shape)\n    seting.set_ylabel(Reading_P_IMG.size)\n    seting.imshow(Reading_P_IMG)\n    \nplt.tight_layout()\nplt.show()","ec3175e5":"figure,axis = plt.subplots(nrows=4,ncols=4,figsize=(12,12))\n\nfor indexing,seting in enumerate(axis.flat):\n    Reading_P_IMG = cv2.imread(QCD_Set[\"PNG\"][indexing])\n    Reading_P_IMG = cv2.cvtColor(Reading_P_IMG,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_IMG = cv2.threshold(Reading_P_IMG,90,155,cv2.THRESH_BINARY_INV)\n    Canny_IMG = cv2.Canny(Threshold_IMG,10,100)\n    contours_IMG,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    draw_IMG = cv2.drawContours(Reading_P_IMG,contours_IMG,-1,(255,0,0),1)\n    \n    for cnt in contours_IMG:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(Reading_P_IMG,(x,y),(x+w,y+h),(0,0,255),2)\n        \n    seting.set_xlabel(Reading_P_IMG.shape)\n    seting.set_ylabel(Reading_P_IMG.size)\n    seting.imshow(Reading_P_IMG)\n    \nplt.tight_layout()\nplt.show()","2ad536b5":"figure,axis = plt.subplots(nrows=4,ncols=4,figsize=(12,12))\n\nfor indexing,seting in enumerate(axis.flat):\n    Reading_P_IMG = cv2.imread(Wjets_Set[\"PNG\"][indexing])\n    Reading_P_IMG = cv2.cvtColor(Reading_P_IMG,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_IMG = cv2.threshold(Reading_P_IMG,90,155,cv2.THRESH_BINARY_INV)\n    Canny_IMG = cv2.Canny(Threshold_IMG,10,100)\n    contours_IMG,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    draw_IMG = cv2.drawContours(Reading_P_IMG,contours_IMG,-1,(255,0,0),1)\n    \n    for cnt in contours_IMG:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(Reading_P_IMG,(x,y),(x+w,y+h),(0,0,255),2)\n        \n    seting.set_xlabel(Reading_P_IMG.shape)\n    seting.set_ylabel(Reading_P_IMG.size)\n    seting.imshow(Reading_P_IMG)\n    \nplt.tight_layout()\nplt.show()","6943322d":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(20,20))\n\nExample_Image = cv2.cvtColor(TTbar_Example,cv2.COLOR_BGR2GRAY)\n\nHessian_Mat = hessian_matrix(Example_Image,sigma=5,order=\"rc\")\nmax_S,min_S = hessian_matrix_eigvals(Hessian_Mat)\n\naxis[0].imshow(min_S)\naxis[1].imshow(max_S)","59fccc50":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(20,20))\n\nExample_Image = cv2.cvtColor(QCD_Example,cv2.COLOR_BGR2GRAY)\n\nHessian_Mat = hessian_matrix(Example_Image,sigma=5,order=\"rc\")\nmax_S,min_S = hessian_matrix_eigvals(Hessian_Mat)\n\naxis[0].imshow(min_S)\naxis[1].imshow(max_S)","74e7a517":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(20,20))\n\nExample_Image = cv2.cvtColor(Wjets_Example,cv2.COLOR_BGR2GRAY)\n\nHessian_Mat = hessian_matrix(Example_Image,sigma=5,order=\"rc\")\nmax_S,min_S = hessian_matrix_eigvals(Hessian_Mat)\n\naxis[0].imshow(min_S)\naxis[1].imshow(max_S)","d7f100d6":"figure = plt.figure(figsize=(20,20))\n\nExample_Image = cv2.cvtColor(TTbar_Example,cv2.COLOR_BGR2GRAY)\n_,Threshold_Image = cv2.threshold(Example_Image,10,255,cv2.THRESH_BINARY_INV)\n\nArr_IMG = np.array(Example_Image > Threshold_Image).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Arr_IMG)\n\nplt.imshow(Skeleton_IMG)","0652a71c":"figure = plt.figure(figsize=(20,20))\n\nExample_Image = cv2.cvtColor(QCD_Example,cv2.COLOR_BGR2GRAY)\n_,Threshold_Image = cv2.threshold(Example_Image,10,255,cv2.THRESH_BINARY_INV)\n\nArr_IMG = np.array(Example_Image > Threshold_Image).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Arr_IMG)\n\nplt.imshow(Skeleton_IMG)","56656314":"figure = plt.figure(figsize=(20,20))\n\nExample_Image = cv2.cvtColor(Wjets_Example,cv2.COLOR_BGR2GRAY)\n_,Threshold_Image = cv2.threshold(Example_Image,10,255,cv2.THRESH_BINARY_INV)\n\nArr_IMG = np.array(Example_Image > Threshold_Image).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Arr_IMG)\n\nplt.imshow(Skeleton_IMG)","09e30fa2":"New_TTbar_Set = TTbar_Set[:2000]\nNew_TTbar_Set = New_TTbar_Set.reset_index()","fa51ba50":"X_Train = []\n\nfor img_P in New_TTbar_Set[\"PNG\"]:\n    Proton_IMG = cv2.imread(img_P)\n    Proton_IMG = cv2.cvtColor(Proton_IMG,cv2.COLOR_BGR2RGB)\n    Proton_IMG = cv2.resize(Proton_IMG,(180,180))\n    Proton_IMG = Proton_IMG \/ 255.\n    X_Train.append(Proton_IMG)","d52370a0":"print(X_Train[5].shape)","73fa3b54":"figure = plt.figure(figsize=(12,12))\nExample_P_IMG = X_Train[45]\nplt.xlabel(Example_P_IMG.shape)\nplt.imshow(Example_P_IMG)","855e50c9":"X_Train = np.asarray(X_Train)","78193a6f":"print(X_Train.shape)","8e02d2de":"X_Train = X_Train.reshape(-1,180,180,3)","524f3ff7":"print(X_Train.shape)","f75e2084":"encoder = Sequential()\n#\nencoder.add(Flatten(input_shape=(180,180,3)))\n#\n\nencoder.add(Dense(380,activation=\"relu\"))\nencoder.add(Dense(280,activation=\"relu\"))\nencoder.add(Dense(180,activation=\"relu\"))\nencoder.add(Dense(150,activation=\"relu\"))\nencoder.add(Dense(100,activation=\"relu\"))\nencoder.add(Dense(50,activation=\"relu\"))\nencoder.add(Dense(25,activation=\"relu\"))\nencoder.add(Dense(15,activation=\"relu\"))","2b5c4c22":"decoder = Sequential()\n#\ndecoder.add(Dense(25,input_shape=[15],activation=\"relu\"))\ndecoder.add(Dense(50,activation=\"relu\"))\ndecoder.add(Dense(100,activation=\"relu\"))\ndecoder.add(Dense(150,activation=\"relu\"))\ndecoder.add(Dense(180,activation=\"relu\"))\ndecoder.add(Dense(280,activation=\"relu\"))\ndecoder.add(Dense(380,activation=\"relu\"))\ndecoder.add(Dense(97200,activation=\"sigmoid\"))\n#\ndecoder.add(Reshape([180,180,3]))","3e12f68d":"Auto_Encoder = Sequential([encoder,decoder])","bcd12682":"print(Auto_Encoder.summary())","98a73b7a":"Auto_Encoder.compile(loss=\"binary_crossentropy\",optimizer=Adam(),metrics=[\"accuracy\"])","a69e3098":"AE_Model = Auto_Encoder.fit(X_Train,X_Train,epochs=20)","cbcc87f9":"Proton_Test_Path = Path(\"..\/input\/proton-collision-image-set\/Proton Collision 13TeV\/Test\")\nProton_Test_PNG_Path = list(Proton_Test_Path.glob(r\"*\/*.png\"))\nProton_Test_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Proton_Test_PNG_Path))\nTest_PNG_Path_Series = pd.Series(Proton_Test_PNG_Path,name=\"PNG\").astype(str)","9b8e9f98":"New_TTbar_Test = Test_PNG_Path_Series[:2000]\nNew_TTbar_Test = New_TTbar_Test.reset_index()","55fc2777":"print(New_TTbar_Test.head(-1))","838c209b":"X_Test = []\n\nfor img_P in New_TTbar_Test[\"PNG\"]:\n    Proton_IMG = cv2.imread(img_P)\n    Proton_IMG = cv2.cvtColor(Proton_IMG,cv2.COLOR_BGR2RGB)\n    Proton_IMG = cv2.resize(Proton_IMG,(180,180))\n    Proton_IMG = Proton_IMG \/ 255.\n    X_Test.append(Proton_IMG)","b53375bc":"X_Test = np.asarray(X_Test)\nX_Test = X_Test.reshape(-1,180,180,3)","fb554188":"Predict_Image = Auto_Encoder.predict(X_Test[:10])","31eac0fb":"figure = plt.figure(figsize=(10,10))\nprediction_img = 5\nprint(\"NORMAL\")\nplt.imshow(X_Test[prediction_img])\nplt.show()\nfigure = plt.figure(figsize=(10,10))\nprint(\"Auto Encoder\")\nplt.imshow(Predict_Image[prediction_img])","810d8ab7":"figure = plt.figure(figsize=(10,10))\nprediction_img = 1\nprint(\"NORMAL\")\nplt.imshow(X_Test[prediction_img])\nplt.show()\nfigure = plt.figure(figsize=(10,10))\nprint(\"Auto Encoder\")\nplt.imshow(Predict_Image[prediction_img])","c6124596":"figure,axis = plt.subplots(nrows=3,ncols=3,figsize=(10,10))\n\nfor P_Image,ax in enumerate(axis.flat):\n    ax.imshow(Predict_Image[P_Image])","8855f696":"S_Layer = GaussianNoise(0.2)\nNoise_Exm = S_Layer(X_Test[:5],training=True)","80a476dd":"i = 0\nfigure = plt.figure(figsize=(10,10))\nprint(\"NORMAL\")\nplt.imshow(X_Test[i])\nplt.show()\nfigure = plt.figure(figsize=(10,10))\nprint(\"NOISE\")\nplt.imshow(Noise_Exm[i])","6fe2e2de":"encoder_N = Sequential()\nencoder_N.add(Flatten(input_shape=[180,180,3]))\nencoder_N.add(GaussianNoise(0.3))\nencoder_N.add(Dense(500,activation=\"relu\"))\nencoder_N.add(Dense(400,activation=\"relu\"))\nencoder_N.add(Dense(300,activation=\"relu\"))\nencoder_N.add(Dense(200,activation=\"relu\"))\nencoder_N.add(Dense(100,activation=\"relu\"))\nencoder_N.add(Dense(50,activation=\"relu\"))\nencoder_N.add(Dense(25,activation=\"relu\"))","97cb3892":"decoder_N = Sequential()\ndecoder_N.add(Dense(50,input_shape=[25],activation=\"relu\"))\ndecoder_N.add(Dense(100,activation=\"relu\"))\ndecoder_N.add(Dense(200,activation=\"relu\"))\ndecoder_N.add(Dense(300,activation=\"relu\"))\ndecoder_N.add(Dense(400,activation=\"relu\"))\ndecoder_N.add(Dense(500,activation=\"relu\"))\ndecoder_N.add(Dense(97200,activation=\"sigmoid\"))\ndecoder_N.add(Reshape([180,180,3]))","5b1cc79c":"Removing_Noise_Model = Sequential([encoder_N,decoder_N])","888eb6c7":"Removing_Noise_Model.compile(loss=\"binary_crossentropy\",optimizer=\"rmsprop\",metrics=[\"accuracy\"])","37446dec":"Removing_Noise_Model.fit(X_Train,X_Train,epochs=8)","4e1c323a":"Ten_N_IMG = S_Layer(X_Test[0:11],training=True)","287fea6d":"Removing_N_IMG = Removing_Noise_Model(Ten_N_IMG)","a958778c":"exp_n_img = 3\n\nfigure = plt.figure(figsize=(10,10))\nprint(\"NORMAL\")\nplt.imshow(X_Test[exp_n_img])\nplt.show()\nfigure = plt.figure(figsize=(10,10))\nprint(\"ADDED NOISE\")\nplt.imshow(Ten_N_IMG[exp_n_img])\nplt.show()\nfigure = plt.figure(figsize=(10,10))\nprint(\"AFTER REMOVING MODEL\")\nplt.imshow(Removing_N_IMG[exp_n_img])\nplt.show()","d2d4e5c9":"# VISUALIZATION","26977d3d":"# SPLITTING CLASS","a1549729":"# DATA PROCESS","7de976c6":"# PACKAGES AND LIBRARIES","3bf545a6":"# PREDICTION","677c1dbf":"# AUTO ENCODER PROCESS","a6968149":"# PATH AND LABELS"}}