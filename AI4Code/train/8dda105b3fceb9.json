{"cell_type":{"b4e1fbe2":"code","0a57a447":"code","ec9f79f9":"code","071b116b":"code","84303491":"code","90ba50ae":"code","41587517":"code","81e1fcee":"code","08fc1569":"code","ad73a118":"code","78fb0b6f":"code","fd23a9e2":"code","99822c83":"code","34acf2a7":"code","685f8f56":"code","f33deb46":"code","a56f0a4a":"code","049cf260":"code","e1ddab7a":"code","fc91e5d9":"code","a9558cd0":"code","b556d168":"code","e0cbccaa":"code","adb9f6ec":"code","abb7afc3":"code","dd0edee5":"code","44984c86":"code","978df16c":"code","d6ac2c7f":"code","b4191ea4":"code","2fd2dd1c":"code","ccc6bab0":"markdown","39aa1af5":"markdown","7d205540":"markdown","07ad4538":"markdown","a536a1e2":"markdown","8f2a0695":"markdown","7af95dfd":"markdown","3fac6e82":"markdown","207a5543":"markdown","3ce1bf2f":"markdown","0ba91d29":"markdown","e04abed8":"markdown","b7951e5e":"markdown","974bf89c":"markdown","f03cbcf4":"markdown","0b813161":"markdown","32f20d42":"markdown"},"source":{"b4e1fbe2":"pip install joypy","0a57a447":"import pandas as pd\n\nimport seaborn as sns\nimport squarify\nimport joypy\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom collections import namedtuple ","ec9f79f9":"# Chart setting\nsns.set()\nfacecolor = '#00000000'\nplt.rcParams['figure.facecolor'] = facecolor\nplt.rcParams['axes.facecolor'] = facecolor\n#plt.rcParams.update({'axes.spines.top': False, 'axes.spines.right': False})\nplt.rcParams['font.family'] = ['Calibri']\npalette17 = ['#FFD166','#F16A70','#B1D877','#8CDCDA','#4D4D4D']\npalette18 = ['#F16A70','#B1D877','#8CDCDA','#4D4D4D']\npalette19 = ['#B1D877','#8CDCDA','#4D4D4D']\n\n\n# Load files\nraw21 = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\nraw20 = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nraw19 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\nraw18 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\nraw17 = pd.read_csv('..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv',encoding='unicode_escape')\n\n\n# Clean data\ncolumn_name21 = raw21.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ncolumn_name20 = raw20.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ncolumn_name19 = raw19.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ncolumn_name18 = raw18.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ncolumn_name17 = raw17.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\n\n\n# 2021 data\ndata21 = raw21.iloc[1:,:]\ndata21.columns = column_name21\ndata21['year'] = '2021'\n\n# 2020 data\ndata20 = raw20.iloc[1:,:]\ndata20.columns = column_name20\ndata20['year'] = '2020'\n\n# 2019 data\ndata19 = raw19.iloc[1:,:]\ndata19.columns = column_name19\ndata19['year'] = '2019'\n\n# 2018 data\ndata18 = raw18.iloc[1:,:]\ndata18.columns = column_name18\ndata18['year'] = '2018'\n\n# 2017 data\ndata17= raw17.loc[1:,:]\ndata17columns = column_name17\ndata17['year'] = '2017'\n\n\n# consolidate\nfiles = [data21, data20, data19, data18, data17] # all data\nfiles1 = [data21, data20, data19, data18] # exclude 2017\nfiles2 = [data21, data20, data19] # exclude 2018","071b116b":"# Rename to make gender choices consistent\ndata19.replace(['Female', 'Male'],['Woman', 'Man'], inplace=True)\ndata18.replace(['Female', 'Male'],['Woman', 'Man'], inplace=True)\ndata17.replace(['Female', 'Male'],['Woman', 'Man'], inplace=True)\n\n# country columns in  files\ncountry_col = ['Q3', 'Q3', 'Q3', 'Q3','Country']\n\n# Rename \ndata17.replace(['United States', 'United Kingdom', \"People 's Republic of China\"],['United States', 'United Kingdom', 'China'], inplace=True)\ndata18.replace(['United Kingdom of Great Britain and Northern Ireland', 'United States of America','Viet Nam'],['United Kingdom','United States', 'Vietnam'], inplace=True)\ndata19.replace(['United Kingdom of Great Britain and Northern Ireland', 'United States of America','Viet Nam'],['United Kingdom','United States', 'Vietnam'], inplace=True)\ndata20.replace(['United Kingdom of Great Britain and Northern Ireland', 'United States of America','Viet Nam'],['United Kingdom','United States', 'Vietnam'], inplace=True)\ndata21.replace(['United Kingdom of Great Britain and Northern Ireland', 'United States of America','Viet Nam'],['United Kingdom','United States', 'Vietnam'], inplace=True)\n\n# DataFrame summary\ndf_country = []\nfor (file, country) in zip(files, country_col):\n    df_country.append(file.loc[:,['year', country]])\n\nfor i in range(len(country_col)):\n    df_country[i].columns = ['year', 'country']\n\ndf_country = pd.concat(df_country, axis=0, ignore_index=False)\ndf_country_ct = pd.crosstab(index=df_country['year'], columns=df_country['country'], values=df_country['country'], aggfunc='count').transpose().drop(index='Other')\n\n\ncountry_no = []\nfor i in range(len(country_col)):\n    country_no.append([2017+i, df_country_ct.iloc[:,i].nunique()])\n\ncountry_no = pd.DataFrame(country_no, columns=['year', 'number'])\n\ncolor = palette17\n\nfig = plt.figure(figsize=(15,6))\nfor i in range(len(country_col)):\n    ax = fig.add_subplot(1,5, i+1)\n    top10 =  df_country_ct.iloc[:, i].nlargest(10)\n    ax= top10.plot(kind='barh', color=color[i])\n    ax.set_title(top10.name + ' top 10 countries', size=12, fontweight='bold')\n    \n    ax.invert_yaxis()\n    ax.set_ylabel(\"\")\n    \n    values = top10.values    \n    for j, value in enumerate(values):\n        ax.text(value+values.max()*0.05 , j, '{:,}'.format(int(value)),va='center', \n                 fontweight='bold', alpha=0.8, size=12, ha='left')   \nplt.tight_layout()","84303491":"from enum import Enum\nimport numpy as np\n\n\nclass Mapping(Enum):\n    \"\"\"\n    Contains dicts mapping values found in the surveys to values we want to replace with.\n    \"\"\"\n    COMPENSATION={ \n        '$0-999': '0-10k',\n        '1,000-1,999': '0-10k',\n        '2,000-2,999': '0-10k',\n        '3,000-3,999': '0-10k',\n        '4,000-4,999': '0-10k',\n        '5,000-7,499': '0-10k',\n        '7,500-9,999': '0-10k',\n        '10,000-14,999': '10-20k',\n        '15,000-19,999': '10-20k',\n        '20,000-24,999': '20-30k',\n        '25,000-29,999': '20-30k',\n        '30,000-39,999': '30-40k',\n        '40,000-49,999': '40-50k',\n        '50,000-59,999': '50-60k',\n        '60,000-69,999': '60-70k',\n        '70,000-79,999': '70-80k',\n        '80,000-89,999': '80-90k',\n        '90,000-99,999': '90-100k',\n        '100,000-124,999': '100-125k',\n        '125,000-149,999': '125-150k',\n        '150,000-199,999': '150-200k',\n        '200,000-249,999': '200-250k',\n        '300,000-500,000': '300-500k',\n        '> $500,000': np.nan,\n        '0-10,000': '0-10k',\n        '10-20,000': '10-20k',\n        '20-30,000': '20-30k',\n        '30-40,000': '30-40k',\n        '40-50,000': '40-50k',\n        '50-60,000': '50-60k',\n        '60-70,000': '60-70k',\n        '70-80,000': '70-80k',\n        '80-90,000': '80-90k',\n        '90-100,000': '90-100k',\n        '100-125,000': '100-125k',\n        '125-150,000': '125-150k',\n        '150-200,00': '150-200k',\n        '200-250,000': '200-250k',\n        '300-400,000': '300-500k',\n        '400-500,000': '300-500k',\n        '500,000+': np.nan,\n        'I do not wish to disclose my approximate yearly compensation': np.nan\n    }\n    JOB_TITLE={\n        'Data Scientist': 'Data Scientist',\n        'Software Engineer': 'Software Engineer',\n        'Data Analyst': 'Data Analyst',\n        'Other': 'Other',\n        'Research Scientist': 'Research Scientist\/Statistician',\n        'Business Analyst': 'Business Analyst',\n        'Product\/Project Manager': 'Product\/Project Manager',\n        'Program\/Project Manager': 'Product\/Project Manager',\n        'Product Manager': 'Product\/Project Manager',\n        'Data Engineer': 'Data Engineer\/DBA',\n        'Not employed': 'Currently not employed',\n        'Machine Learning Engineer': 'Machine Learning Engineer',\n        'Statistician': 'Research Scientist\/Statistician',\n        'Consultant': 'Other',\n        'Research Assistant': 'Research Scientist\/Statistician',\n        'Manager': 'Manager\/C-level',\n        'DBA\/Database Engineer': 'Data Engineer\/DBA',\n        'Chief Officer': 'Manager\/C-level',\n        'Developer Advocate': 'Other',\n        'Marketing Analyst': 'Business Analyst',\n        'Salesperson': 'Other',\n        'Principal Investigator': 'Research Scientist\/Statistician',\n        'Data Journalist': 'Other',\n        'Currently not employed': 'Currently not employed', \n        'Student': 'Student'\n    } \n    GENDER={\n        'Male': 'Men',\n        'Female': 'Women',\n        'Man': 'Men',\n        'Woman': 'Women',\n        'Prefer not to say': np.nan, # Very few answers on those categories to do any meaningful analysis\n        'Prefer to self-describe':  np.nan, # Very few answers on those categories to do any meaningful analysis\n        'Nonbinary':  np.nan # Very few answers on those categories to do any meaningful analysis\n    }\n    AGE={\n        '18-21': '18-21', \n        '22-24': '22-24', \n        '25-29': '25-29',\n        '30-34': '30-34', \n        '35-39': '35-39', \n        '40-44': '40-44', \n        '45-49': '45-49', \n        '50-54': '50-54', \n        '55-59': '55-59', \n        '60-69': '60-69', \n        '70+': '70+',\n        '70-79': '70+',\n        '80+': '70+'\n    }\n    EDUCATION={\n        'Master\u2019s degree': 'Master\u2019s', \n        'Bachelor\u2019s degree': 'Bachelor\u2019s',\n        'Some college\/university study without earning a bachelor\u2019s degree': 'Some college',\n        'Doctoral degree': 'Doctoral',\n        'Professional degree': 'Professional',\n        'I prefer not to answer': np.nan,\n        'No formal education past high school': 'High school'\n    }\n    YEARS_WRITING_CODE={\n        '3-5 years': '3-5 years',\n        '1-2 years': '1-3 years',\n        '2-3 years': '1-3 years',\n        '5-10 years': '5-10 years',\n        '10-20 years': '10+ years',\n        '< 1 years': '< 1 year',\n        '< 1 year': '< 1 year',\n        '20+ years': '10+ years',\n        np.nan: 'None',\n        'I have never written code': 'None',\n        'I have never written code but I want to learn': 'None',\n        '20-30 years': '10+ years',\n        '30-40 years': '10+ years',\n        '40+ years': '10+ years'\n    }    \n    YEARS_WRITING_CODE_PROFILES={\n        '3-5 years': '3-10 years',\n        '1-2 years': '1-2 years',\n        '2-3 years': '2-3 years',\n        '5-10 years': '3-10 years',\n        '10-20 years': '10+ years',\n        '< 1 years': '0-1 years',\n        '< 1 year': '0-1 years',\n        '20+ years': '10+ years',\n        np.nan: 'None',\n        'I have never written code': 'None',\n        'I have never written code but I want to learn': 'None',\n        '20-30 years': '10+ years',\n        '30-40 years': '10+ years',\n        '40+ years': '10+ years'\n    } \n    RECOMMENDED_LANGUAGE={\n        'Python': 'Python',\n        'R': 'R',\n        'SQL': 'SQL',\n        'C++': 'C++',\n        'MATLAB': 'MATLAB',\n        'Other': 'Other',\n        'Java': 'Java',\n        'C': 'C',\n        'None': 'None',\n        'Javascript': 'Javascript',\n        'Julia': 'Julia',\n        'Scala': 'Other',\n        'SAS': 'Other',\n        'Bash': 'Bash',\n        'VBA': 'Other',\n        'Go': 'Other',\n        'Swift': 'Swift',\n        'TypeScript': 'Other'\n    } \n    LANGUAGES={\n        'SQL': 'SQL', \n        'R': 'R', \n        'Java': 'Java', \n        'MATLAB': 'MATLAB', \n        'Python': 'Python', \n        'Javascript\/Typescript': 'Javascript',\n        'Bash': 'Bash', \n        'Visual Basic\/VBA': 'VBA', \n        'Scala': 'Scala', \n        'PHP': 'Other', \n        'C\/C++': 'C\/C++',\n        'Other': 'Other', \n        'C#\/.NET': 'Other',\n        'Go': 'Other', \n        'SAS\/STATA': 'Other', \n        'Ruby': 'Other', \n        'Julia': 'Julia',\n        'None': 'None',\n         np.nan: 'None',\n        'Javascript': 'Javascript',\n        'C': 'C\/C++', \n        'TypeScript': 'Typescript', \n        'C++': 'C\/C++', \n        'Swift': 'Swift'\n    }\n    YEARS_USING_ML={\n        '1-2 years': '1-3 years',\n        '2-3 years': '1-3 years',\n        '< 1 year': '< 1 year',\n        'Under 1 year': '< 1 year',\n        '< 1 years': '< 1 year',\n        '3-4 years': '3-5 years',\n        '5-10 years': '5+ years',\n        '4-5 years': '3-5 years',\n        np.nan: 'None',\n        'I have never studied machine learning but plan to learn in the future': 'None',\n        'I do not use machine learning methods': 'None',\n        '10-15 years': '5+ years',\n        '20+ years': '5+ years',\n        '10-20 years': '5+ years',\n        '20 or more years': '5+ years',\n        'I have never studied machine learning and I do not plan to': 'None'\n    } \n    YEARS_USING_ML_PROFILES={\n        '1-2 years': '1-2 years',\n        '2-3 years': '2-3 years',\n        '< 1 year': '0-1 years',\n        'Under 1 year': '0-3 years',\n        '< 1 years': '0-1 years',\n        '3-4 years': '3-10 years',\n        '5-10 years': '3-10 years',\n        '4-5 years': '3-10 years',\n        np.nan: 'None',\n        'I have never studied machine learning but plan to learn in the future': 'None',\n        'I do not use machine learning methods': 'None',\n        '10-15 years': '10+ years',\n        '20+ years': '10+ years',\n        '10-20 years': '10+ years',\n        '20 or more years': '10+ years',\n        'I have never studied machine learning and I do not plan to': 'None'\n    } \n    PRIMARY_TOOL={\n        'Local development environments (RStudio, JupyterLab, etc.)': 'Local or hosted development environments',\n        'Basic statistical software (Microsoft Excel, Google Sheets, etc.)': 'Basic statistical software',\n        'Local or hosted development environments (RStudio, JupyterLab, etc.)': 'Local or hosted development environments',\n        'Cloud-based data software & APIs (AWS, GCP, Azure, etc.)': 'Cloud-based data software & APIs',\n        'Other': 'Other',\n        'Advanced statistical software (SPSS, SAS, etc.)': 'Advanced statistical software',\n        'Business intelligence software (Salesforce, Tableau, Spotfire, etc.)': 'Business intelligence software'\n    }\n    COUNTRY = {\n        'India': 'India',\n        'United States of America': 'United States',\n        'Other': 'Other',\n        'Brazil': 'Brazil',\n        'Russia': 'Other',\n        'Japan': 'Japan',  \n        'United Kingdom of Great Britain and Northern Ireland': 'Other',\n        'Germany': 'Other',\n        'China': 'Other',\n        'Spain': 'Other',\n        'France': 'Other',\n        'Canada': 'Other',\n        'Italy': 'Other',\n        'Nigeria': 'Other',\n        'Turkey': 'Other',\n        'Australia': 'Other'\n    }\n    IDE={\n        'None': 'None', \n        'MATLAB': 'MATLAB', \n        'RStudio': 'RStudio', \n        'Jupyter\/IPython': 'Jupyter\/IPython', \n        'PyCharm': 'PyCharm', \n        'Atom': 'Vim\/Emacs\/Atom',\n        'Visual Studio': 'Visual Studio',\n        'Notepad++': 'Notepad++\/Sublime', \n        'Sublime Text': 'Notepad++\/Sublime', \n        'IntelliJ': 'PyCharm', \n        'Spyder': 'Spyder',\n        'Visual Studio Code': 'Visual Studio',\n        'Vim': 'Vim\/Emacs\/Atom', \n        'Other': 'Other', \n        'nteract': 'Other', \n        np.nan: 'Other',\n        'Jupyter (JupyterLab, Jupyter Notebooks, etc) ': 'Jupyter\/IPython', \n        ' Jupyter Notebook': 'Jupyter\/IPython', \n        ' RStudio ': 'RStudio',\n        ' PyCharm ': 'PyCharm', \n        ' MATLAB ': 'MATLAB', \n        '  Spyder  ': 'Spyder', \n        '  Notepad++  ': 'Notepad++\/Sublime',\n        '  Sublime Text  ': 'Notepad++\/Sublime', \n        ' Atom ': 'Vim\/Emacs\/Atom',\n        ' Visual Studio \/ Visual Studio Code ': 'Visual Studio',\n        'Visual Studio Code (VSCode)': 'Visual Studio',\n        ' Visual Studio ': 'Visual Studio',\n        ' Visual Studio Code (VSCode) ': 'Visual Studio',\n        '  Vim \/ Emacs  ': 'Vim\/Emacs\/Atom',\n    }\n    CLOUD={\n        'I have not used any cloud providers': 'None', \n        'Microsoft Azure': 'Microsoft',\n        'Google Cloud Platform (GCP)': 'Google', \n        'Amazon Web Services (AWS)': 'amazon',\n        'IBM Cloud': 'IBM\/Red Hat', \n        'Other': 'Other', \n        'Alibaba Cloud': 'Other', \n        np.nan: 'None',\n        ' Amazon Web Services (AWS) ': 'amazon', \n        ' Google Cloud Platform (GCP) ': 'Google',\n        ' Microsoft Azure ': 'Microsoft', \n        'None': 'None', \n        ' Salesforce Cloud ': 'Other',\n        ' Red Hat Cloud ': 'IBM\/Red Hat', \n        ' VMware Cloud ': 'Other', \n        ' Alibaba Cloud ': 'Other',\n        ' SAP Cloud ': 'Other', \n        ' IBM Cloud ': 'IBM\/Red Hat', \n        ' Oracle Cloud ': 'Other',\n        ' IBM Cloud \/ Red Hat ': 'IBM\/Red Hat',\n        ' Tencent Cloud ': 'Other',\n    }\n    ML_STATUS={ \n        'No (we do not use ML methods)': 'Do not use ML \/ Do not know',\n        'I do not know': 'Do not use ML \/ Do not know',\n        'We recently started using ML methods (i.e., models in production for less than 2 years)': 'Recently started using ML',\n        'We have well established ML methods (i.e., models in production for more than 2 years)':  'Well established ML',\n        'We are exploring ML methods (and may one day put a model into production)': 'Exploring ML',\n        'We use ML methods for generating insights (but do not put working models into production)': 'Use ML for generating insights',\n        np.nan: 'Do not use ML \/ Do not know',\n    }\n    ML_FRAMEWORKS={\n        'None': 'None', \n        'Prophet': 'Prophet', \n        'Scikit-Learn': 'Scikit-learn', \n        'Keras': 'Keras', \n        'TensorFlow': 'TensorFlow',\n        'Spark MLlib': 'Other', \n        'Xgboost': 'Xgboost', \n        'randomForest': 'Other', \n        'lightgbm': 'LightGBM',\n        'Caret': 'Caret',\n        'mlr': 'Other', \n        'PyTorch': 'PyTorch', \n        'Mxnet': 'Other', \n        'CNTK': 'Other', \n        'Caffe': 'Other', \n        'H20': 'H2O', \n        'catboost': 'CatBoost',\n        'Fastai': 'Fast.ai', \n        'Other': 'Other', \n        np.nan: 'None', \n        '  Scikit-learn ': 'Scikit-learn', \n        ' RandomForest': 'Other',\n        ' Xgboost ': 'Xgboost', \n        ' LightGBM ': 'LightGBM',\n        '  TensorFlow ': 'TensorFlow',\n        ' Keras ': 'Keras', \n        ' Caret ': 'Caret',\n        ' PyTorch ': 'PyTorch', \n        ' PyTorch Lightning ': 'PyTorchLight', \n        ' Spark MLib ': 'Spark MLlib',\n        ' Fast.ai ': 'Fast.ai', \n        ' Tidymodels ': 'Other',\n        ' CatBoost ': 'CatBoost', \n        ' JAX ': 'Other', \n        ' Prophet ': 'Prophet', \n        ' H2O 3 ': 'H2O', \n        ' MXNet ': 'Other',\n        ' Huggingface ': 'Huggingface'        \n    }\n    \n    \nclass Category(Enum): #Category of subplots\n    COMPENSATION=[\n        'Not Disclosed', '0-10k', '10-20k', '20-30k', '30-40k', '40-50k', '50-60k', \n        '60-70k', '70-80k', '80-90k', '90-100k', '100-125k', '125-150k', '150-200k', \n        '200-250k', '300-500k'\n    ]\n    JOB_TITLE=[\n        'Other', 'Manager\/C-level', 'Product\/Project Manager', 'Business Analyst', 'Data Analyst', \n        'Research Scientist\/Statistician', 'Data Scientist', 'Machine Learning Engineer', \n        'Data Engineer\/DBA', 'Software Engineer'\n    ]  \n    GENDER = ['Women', 'Men'] \n    AGE=['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-69', '70+']\n    YEARS_WRITING_CODE=['None', '< 1 year', '1-3 years', '3-5 years', '5-10 years', '10+ years']\n    YEARS_USING_ML=['None', '< 1 year', '1-3 years', '3-5 years', '5+ years']\n    SURVEY_YEAR=[2018, 2019, 2020, 2021]\n    EDUCATION=['High school', 'Some college', 'Professional', 'Bachelor\u2019s', 'Master\u2019s', 'Doctoral']\n    PROFILES=['Beginners', 'Others', 'Modern DS', 'Coders', 'ML Veterans']\n    COUNTRY = ['India', 'United States', 'Japan','Brazil', 'Other']\n    CLOUD=['None', 'Microsoft', 'Google', 'amazon', 'IBM\/Red Hat', 'Other']\n\nCOLORS = {\n    'India': 'indigo', \n    'Brazil': 'deeppink',\n    'United States': 'firebrick', \n    'China': '#ED2124', \n    'Average': 'blueviolet',\n    'Canada': '#F60B00',\n    'Japan': 'teal',\n    'Data Scientist': '#13A4B4',\n    'Product\/Project Manager': '#D70947',\n    'Software Engineer': '#E8743B', \n    'Data Analyst': '#BF399E',\n    'Data Engineer\/DBA': '#144B7F',\n    'Machine Learning Engineer': 'deeppink', \n    '< 1 year': 'lightgreen', \n    '10+ years': 'green', \n    'Women': 'hotpink', \n    'Men': 'midnightblue',\n    'Python': '#87cefa',\n    'SQL': '#F60B00',\n    'R': '#2063b7',\n    'C\/C++': 'black',\n    'Java': 'lawngreen',\n    'Javascript': 'gold',\n    'Basic statistical software': '#0D7036', \n    'Local or hosted development environments': '#36B5E2',\n    'Visual Studio': '#349FED',\n    'Jupyter\/IPython': '#EC7426',\n    'amazon': '#F79500',\n    'Google': '#1AA746',\n    'Microsoft': '#3278B1',\n    'Well established ML': 'dodgerblue', \n    'PyTorch': 'orangered', \n    'Scikit-learn': 'goldenrod',\n    'None': 'darkblue',\n    'Do not use ML \/ Do not know': 'slategrey',\n    'Exploring ML': 'lightseagreen', \n    'Recently started using ML': 'forestgreen'\n}\n\n","90ba50ae":"from typing import List, Type, Tuple\nfrom abc import ABC, abstractmethod\n\n\nclass BaseKaggle(ABC):\n    \"\"\"\n    Base class to handle cleaning and transformation of datasets from different years.\n    \"\"\"\n    def __init__(self) -> None:\n        self.df = None\n        self.non_professionals = ['Student', 'Currently not employed', np.nan]\n        self.mapping = {}\n        self.questions_to_combine = []\n        self.survey_year = None\n   \n    @property\n    def questions_to_keep(self) -> List[str]:\n        \"\"\"\n        Select which questions we should keep in the dataframe using the mapping keys\n        \"\"\"\n        return [key for key, value in self.mapping.items()]\n\n    def remove_non_professionals(self) -> pd.DataFrame:\n        \"\"\"\n        Non-professionals were defined as students, unemployed and NaNs. \n        Also removed those who didn't disclose compensation.\n        \"\"\"\n        self.df = self.df.drop(self.df[self.df['Job Title'].isin(self.non_professionals)].index)\n        self.df.dropna(subset=['Yearly Compensation'], inplace=True)\n        return self.df\n    \n    @abstractmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        pass\n    \n    @staticmethod\n    def remove_nans_from_list(answers: List[str]) -> List[str]:\n        \"\"\"\n        This function removes all nans from a list\n        \"\"\"\n        return [x for x in answers if pd.notnull(x)]\n\n    def combine_answers_into_list(self, question: str) -> pd.DataFrame:\n        \"\"\"\n        This function will create a new column in the dataframe adding \n        all answers to a list and removing nans.\n        \"\"\"\n        filtered_columns = self.filter_question_columns(list(self.df.columns), question)\n        self.df[question] = self.df[filtered_columns].values.tolist()\n        self.df[question] = self.df[question].apply(self.remove_nans_from_list)\n        return self.df\n\n    def batch_combine_answers_into_list(self, questions_to_combine: List[str]) -> pd.DataFrame:\n        \"\"\"\n        Applyes combine_answers_into_list to multiple columns\n        \"\"\"\n        for question in questions_to_combine:\n            self.combine_answers_into_list(question=question)\n        return self.df\n    \n    def rename_columns(self) -> pd.DataFrame:\n        \"\"\"\n        Renames columns using mapping\n        \"\"\"\n        self.df = self.df.rename(columns=self.mapping)\n        return self.df\n    \n    def do_mapping(self, column: str, mapping: Mapping) -> pd.DataFrame:\n        \"\"\"\n        Maps values to have same classes accross all years\n        \"\"\"\n        self.df[column] = self.df[column].map(mapping.value)\n        return self.df\n    \n    def do_list_mapping(self, column: str, mapping: Mapping) -> pd.DataFrame:\n        \"\"\"\n        Maps values to have same classes accross all years for columns that are list type\n        \"\"\"\n        mapping_dict = mapping.value\n        self.df[column] = self.df[column].apply(lambda x: [mapping_dict[val] for val in x])\n        return self.df\n\n    def add_numeric_average_compensation(self) -> pd.DataFrame:\n        \"\"\"\n        Create a numeric value for compensation, taking the average between the max and min values for each class\n        \n        We are summing up the lowest and highest value for each category, and then dividing by 2.\n        Some regex needed to clean the text\n        \"\"\"\n        compensation = self.df['Yearly Compensation'].str.replace(r'(?:(?!\\d|\\-).)*', '').str.replace('500', '500-500').str.split('-')\n        self.df['Yearly Compensation Numeric'] = compensation.apply(lambda x: (int(x[0]) + int(x[1]))\/ 2) # it is calculated in thousand of dollars\n        return self.df\n\n    def add_survey_year_column(self) -> pd.DataFrame:\n        \"\"\"\n        Adds the year the survey was taken as a column\n        \"\"\"\n        self.df['Survey Year'] = self.survey_year\n        return self.df\n    \n    def add_dummy_column(self) -> pd.DataFrame:\n        \"\"\"\n        Adds Dummy = 1 to make easier to perform group by\n        \"\"\"\n        self.df['Dummy'] = 1\n        return self.df\n    \n    def select_questions(self) -> pd.DataFrame:\n        \"\"\"\n        Selects only the relevant questions from each survey year\n        \"\"\"\n        self.df = self.df[self.questions_to_keep]\n        return self.df\n    \n    def fill_na(self, column: str, value: str) -> pd.DataFrame:\n        \"\"\"\n        Fill column NaNs with a given value\n        \"\"\"\n        self.df[column] = self.df[column].fillna(value)\n        return self.df\n   \n    def calculate_profile(self, values: tuple) -> str:\n        \"\"\"\n        This function creates profiles for professionals adapted from the work developed by Teresa Kubacka on last years survey\n        https:\/\/www.kaggle.com\/tkubacka\/a-story-told-through-a-heatmap\n        \"\"\"\n        years_code, years_ml = values\n        if years_code in ['0-1 years', '1-2 years'] and years_ml in ['0-1 years', '1-2 years']:\n            return 'Beginners'\n        elif years_code in ['2-3 years', '3-10 years'] and years_ml in ['1-2 years', '2-3 years', '3-10 years']:\n            return 'Modern DS'\n        elif years_code == '10+ years' and years_ml in ['0-1 years', '1-2 years']:\n            return 'Coders'\n        elif years_code == '10+ years' and years_ml == '10+ years':\n            return 'ML Veterans'\n        else:\n            return 'Others'\n\n    def create_profiles(self) -> None:\n        \"\"\"\n        This function creates a new columns with profiles for professionals adapted from the work developed by Teresa Kubacka on last years survey\n        https:\/\/www.kaggle.com\/tkubacka\/a-story-told-through-a-heatmap\n        \"\"\"\n        self.df['Years Writing Code Profile'] = self.df['Tenure: Years Writing Code'].map(Mapping.YEARS_WRITING_CODE_PROFILES.value)\n        self.df['Years Using ML Profile'] = self.df['Tenure: Years Using Machine Learning Methods'].map(Mapping.YEARS_USING_ML_PROFILES.value)\n        \n        self.df['Profile'] = self.df[\n            ['Years Writing Code Profile', \n             'Years Using ML Profile']\n        ].apply(self.calculate_profile, axis=1)\n\n        \n    def transform(self) -> pd.DataFrame:\n        \"\"\"\n        Process and clean the dataset\n        \"\"\"\n\n        self.df.drop(0, axis=0, inplace=True)  # dropping first row (questions) from processed data\n\n        self.batch_combine_answers_into_list(questions_to_combine=self.questions_to_combine)\n        self.select_questions()\n        self.rename_columns()\n\n        self.create_profiles()\n        self.do_mapping(column='Yearly Compensation', mapping=Mapping.COMPENSATION)\n        self.do_mapping(column='Job Title', mapping=Mapping.JOB_TITLE)\n        self.do_mapping(column='Gender', mapping=Mapping.GENDER)\n        self.do_mapping(column='Age', mapping=Mapping.AGE)\n        self.do_mapping(column='Education', mapping=Mapping.EDUCATION)\n        self.do_mapping(column='Tenure: Years Writing Code', mapping=Mapping.YEARS_WRITING_CODE)\n        self.do_mapping(column='Recommended Programming Language', mapping=Mapping.RECOMMENDED_LANGUAGE)\n        self.do_mapping(column='Tenure: Years Using Machine Learning Methods', mapping=Mapping.YEARS_USING_ML)\n        self.do_mapping(column='Primary Tool to Analyze Data', mapping=Mapping.PRIMARY_TOOL)\n        self.do_mapping(column='Country', mapping=Mapping.COUNTRY)\n        self.do_mapping(column='Machine Learning Status in Company', mapping=Mapping.ML_STATUS)\n        self.do_list_mapping(column='Machine Learning Frameworks', mapping=Mapping.ML_FRAMEWORKS)\n        \n        self.do_list_mapping(column='Programming Languages', mapping=Mapping.LANGUAGES)\n        self.do_list_mapping(column='IDEs', mapping=Mapping.IDE)\n        self.do_list_mapping(column='Cloud Computing Platforms', mapping=Mapping.CLOUD)\n        self.fill_na(column='Country', value='Other')\n\n        self.remove_non_professionals()       \n        self.add_numeric_average_compensation()\n        self.add_survey_year_column()\n        self.add_dummy_column()\n                \n        self.df.reset_index(drop=True, inplace=True)\n    \n        return self.df\n    ","41587517":"class Kaggle2021(BaseKaggle):\n    \"\"\"\n    Processing and cleaning 2021 Dataset\n\n    Here we do the following:\n    * Group all multiple choice answers into a list in a single column.\n    * Remove Non-Professionals from the data set. Non-professionals were defined as students, unemployed and NaNs.\n    * Select the questions we want to keep, based on the spreadsheet analysis done previously.\n    * Remove all non-multiple choice answers\n    \"\"\"\n    \n    def __init__(self) -> None:\n        super().__init__()\n        self.survey_year = 2021\n        self.df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv', low_memory=False)\n        self.mapping = {\n            'Q1':'Age',\n            'Q2':'Gender',\n            'Q3':'Country',\n            'Q4':'Education',\n            'Q5':'Job Title',\n            'Q6':'Tenure: Years Writing Code',\n            'Q7':'Programming Languages',\n            'Q8':'Recommended Programming Language',\n            'Q9':'IDEs',\n            'Q10':'Hosted Notebooks',\n            'Q14':'Data Visualization Libraries',\n            'Q15':'Tenure: Years Using Machine Learning Methods',\n            'Q16':'Machine Learning Frameworks',\n            'Q23':'Machine Learning Status in Company',\n            'Q24':'Daily activities',\n            'Q25':'Yearly Compensation',\n            'Q27_A':'Cloud Computing Platforms',\n            'Q29_A':'Cloud Computing Products',\n            'Q31_A':'Machine Learning Products',\n            'Q32':'Big Data Products',\n            'Q40':'Data Science Courses',\n            'Q41':'Primary Tool to Analyze Data',\n            'Q42':'Media Sources',\n        }\n        self.questions_to_combine = [\n            'Q7', 'Q9', 'Q10', 'Q14', 'Q16', 'Q24', 'Q27_A', 'Q29_A', 'Q31_A', 'Q32', 'Q40', 'Q42'\n        ]\n           \n    @staticmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        \"\"\"\n        Filters only questions that starts with the question_number and do not end with the string _OTHER\n        \"\"\"\n        return [col for col in columns if col.startswith(f'{question}_P') and not col.endswith('_OTHER')]","81e1fcee":"class Kaggle2020(BaseKaggle):\n    \"\"\"\n    Processing and cleaning 2020 Dataset\n\n    Here we do the following:\n    * Group all multiple choice answers into a list in a single column.\n    * Remove Non-Professionals from the data set. Non-professionals were defined as students, unemployed and NaNs.\n    * Select the questions we want to keep, based on the spreadsheet analysis done previously.\n    * Remove all non-multiple choice answers\n    \"\"\"\n    \n    def __init__(self) -> None:\n        super().__init__()\n        self.survey_year = 2020\n        self.df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', low_memory=False)\n        self.mapping = {\n            'Q1':'Age',\n            'Q2':'Gender',\n            'Q3':'Country',\n            'Q4':'Education',\n            'Q5':'Job Title',\n            'Q6':'Tenure: Years Writing Code',\n            'Q7':'Programming Languages',\n            'Q8':'Recommended Programming Language',\n            'Q9':'IDEs',\n            'Q10':'Hosted Notebooks',\n            'Q14':'Data Visualization Libraries',\n            'Q15':'Tenure: Years Using Machine Learning Methods',\n            'Q16':'Machine Learning Frameworks',\n            'Q22':'Machine Learning Status in Company',\n            'Q23':'Daily activities',\n            'Q24':'Yearly Compensation',\n            'Q26_A':'Cloud Computing Platforms',\n            'Q27_A':'Cloud Computing Products',\n            'Q28_A':'Machine Learning Products',\n            'Q29_A':'Big Data Products',\n            'Q37':'Data Science Courses',\n            'Q38':'Primary Tool to Analyze Data',\n            'Q39':'Media Sources',\n        }\n        self.questions_to_combine = [\n            'Q7', 'Q9', 'Q10', 'Q14', 'Q16', 'Q23', 'Q26_A', 'Q27_A', 'Q28_A', 'Q29_A', 'Q37', 'Q39'\n        ]\n           \n    @staticmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        \"\"\"\n        Filters only questions that starts with the question_number and do not end with the string _OTHER\n        \"\"\"\n        return [col for col in columns if col.startswith(f'{question}_P') and not col.endswith('_OTHER')]\n","08fc1569":"\nclass Kaggle2019(BaseKaggle):\n    \"\"\"\n    Processing and cleaning 2019 Dataset\n    \"\"\"\n    \n    \n    def __init__(self) -> None:\n        super().__init__()\n        self.survey_year = 2019\n        self.df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv', low_memory=False)\n        self.mapping = {\n            'Q1':'Age',\n            'Q2':'Gender',\n            'Q3':'Country',\n            'Q4':'Education',\n            'Q5':'Job Title',\n            'Q15':'Tenure: Years Writing Code',\n            'Q18':'Programming Languages',\n            'Q19':'Recommended Programming Language',\n            'Q16':'IDEs',\n            'Q17':'Hosted Notebooks',\n            'Q20':'Data Visualization Libraries',\n            'Q23':'Tenure: Years Using Machine Learning Methods',\n            'Q28':'Machine Learning Frameworks',\n            'Q8':'Machine Learning Status in Company',\n            'Q9':'Daily activities',\n            'Q10':'Yearly Compensation',\n            'Q29':'Cloud Computing Platforms',\n            'Q30':'Cloud Computing Products',\n            'Q32':'Machine Learning Products',\n            'Q31':'Big Data Products',\n            'Q13':'Data Science Courses',\n            'Q14':'Primary Tool to Analyze Data',\n            'Q12':'Media Sources',\n        }\n        self.questions_to_combine = [\n            'Q18', 'Q16', 'Q17', 'Q20', 'Q28', 'Q9', 'Q29', 'Q30', 'Q32', 'Q31', 'Q13', 'Q12'\n        ]\n           \n    @staticmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        \"\"\"\n        Filters only questions that starts with the question_number and do not end with the string _OTHER_TEXT\n        \"\"\"\n        return [col for col in columns if col.startswith(f'{question}_P') and not col.endswith('_OTHER_TEXT')]\n","ad73a118":"\nclass Kaggle2018(BaseKaggle):\n    \"\"\"\n    Processing and cleaning 2019 Dataset\n    \"\"\"\n    \n    def __init__(self) -> None:\n        super().__init__()\n        self.survey_year = 2018\n        self.df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv', low_memory=False)\n        self.mapping = {\n            'Q2':'Age',\n            'Q1':'Gender',\n            'Q3':'Country',\n            'Q4':'Education',\n            'Q6':'Job Title',\n            'Q24':'Tenure: Years Writing Code',\n            'Q16':'Programming Languages',\n            'Q18':'Recommended Programming Language',\n            'Q13':'IDEs',\n            'Q14':'Hosted Notebooks',\n            'Q21':'Data Visualization Libraries',\n            'Q25':'Tenure: Years Using Machine Learning Methods',\n            'Q19':'Machine Learning Frameworks',\n            'Q10':'Machine Learning Status in Company',\n            'Q11':'Daily activities',\n            'Q9':'Yearly Compensation',\n            'Q15':'Cloud Computing Platforms',\n            'Q27':'Cloud Computing Products',\n            'Q28':'Machine Learning Products',\n            'Q30':'Big Data Products',\n            'Q36':'Data Science Courses',\n            'Q12_MULTIPLE_CHOICE':'Primary Tool to Analyze Data',\n            'Q38':'Media Sources',\n        }\n        self.questions_to_combine = [\n            'Q16', 'Q13', 'Q14', 'Q21', 'Q19', 'Q11', 'Q15', 'Q27', 'Q28', 'Q30', 'Q36', 'Q38'\n        ]\n    \n    @staticmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        \"\"\"\n        Filters only questions that starts with the question_number and do not end with the string _OTHER_TEXT\n        \"\"\"\n        return [col for col in columns if col.startswith(f'{question}_P') and not col.endswith('_OTHER_TEXT')]\n","78fb0b6f":"class KaggleCombinedSurvey:\n    \"\"\"\n    This class combines surveys from multiple years into a concatenated dataframe.\n    \"\"\"\n    \n    def __init__(self, surveys: List[Type[BaseKaggle]]) -> None:\n        self.surveys = surveys\n        self._cached_df = None\n        \n    @property\n    def df(self) -> pd.DataFrame:\n        \"\"\"\n        If df was already processed get it from cache, otherwise process it and saves to cache.\n        \"\"\"\n        if isinstance(self._cached_df, type(None)):\n            self._cached_df = self._concatenate()\n        return self._cached_df\n    \n    def _get_surveys_dfs(self) -> List[pd.DataFrame]:\n        \"\"\"\n        Applies the transform method for each survey and return the dfs in a list\n        \"\"\"\n        return [survey().transform() for survey in self.surveys]\n    \n    def _concatenate(self) -> pd.DataFrame:\n        \"\"\"\n        Concatenate survey dataframes into a single dataframe\n        \"\"\"\n        df = pd.concat(self._get_surveys_dfs())\n        df = df.reset_index(drop=True)\n        return df","fd23a9e2":"MetricData = namedtuple('MetricData', ['subplot_name','trace_name','y_values', 'x_values', \n                                       'subplot_y_position', 'subplot_x_position', 'highlighted_traces']) \n\n\nclass BaseMetric(ABC):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"\n    \n    def __init__(\n        self, \n        survey: KaggleCombinedSurvey, \n        traces_col: str, \n        y_col: str, \n        x_col: str,\n        explode: bool = False\n    ) -> None:\n        \"\"\"\n        traces: the column name we want to create traces from\n        y: the column name we will be ploting\n        x: Will always be survey year for our slopegraphs.\n        \"\"\"\n        self.traces_col = traces_col\n        self.y_col = y_col\n        self.x_col = x_col\n        self.survey = survey\n        self.traces = []\n        self.explode = explode\n        self.metric_df = None\n\n    @property\n    def traces_names(self) -> List[str]:\n        \"\"\"\n        Calculate unique values of traces_col\n        \"\"\"\n        return self.metric_df[self.traces_col].cat.categories\n    \n    @property\n    def subplots_names(self) -> List[str]:\n        \"\"\"\n        Calculate unique values of traces_col\n        \"\"\"\n        return self.metric_df[self.y_col].cat.categories\n\n    @property\n    def subplots_qty(self):\n        return len(self.subplots_names)\n    \n    @property\n    def traces_qty(self):\n        return len(self.traces_names)\n    \n    def apply_filter(self, df: pd.DataFrame, column: str, value: str) -> pd.DataFrame:\n        \"\"\"\n        filters data for a single trace\n        \"\"\"\n        return df[df[column] == value] \n\n    @abstractmethod\n    def calculate(self) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        pass\n   \n    def groupby(self, df: pd.DataFrame, columns: List[str]) -> pd.DataFrame:\n        \"\"\"\"\n        Calculates quantity per x, y and traces col\n        \"\"\"\n        return df.groupby(columns, as_index=False)['Dummy'].sum()\n    \n    def join_dataframes(self, df1: pd.DataFrame, df2: pd.DataFrame, on_columns: List[str]) -> pd.DataFrame:\n        return df1.set_index(on_columns).join(df2.set_index(on_columns), rsuffix='_total').reset_index()\n    \n    def to_categorical(self, column: str, categories: Category) -> pd.DataFrame:\n        cat_dtype = pd.api.types.CategoricalDtype(categories=categories.value, ordered=True)\n        self.metric_df[column] = self.metric_df[column].astype(cat_dtype)\n        return self.metric_df\n    \n    def get_df(self):\n        \"\"\"\n        Returns a dataframe with or without lists exploded \n        \"\"\"\n        if self.explode:\n            return self.survey.df.explode(self.traces_col)\n        else:\n            return self.survey.df\n        \n    def get_subplots(self, highlighted_traces: List[str]) -> List[MetricData]:\n        self.apply_categories()\n        self.metric_df['subplot_y_position'] = self.metric_df[self.y_col].cat.codes + 1\n        self.metric_df['subplot_x_position'] = 1       \n\n        for index, row in self.metric_df.iterrows():\n            filtered_df = self.apply_filter(df=self.metric_df, column=self.y_col, value=row[self.y_col])\n            filtered_df = self.apply_filter(df=filtered_df, column=self.traces_col, value=row[self.traces_col])\n            \n            metric_data = MetricData(\n                subplot_name=row[self.y_col],\n                trace_name=row[self.traces_col],\n                y_values=filtered_df['Metric'].values,\n                x_values=filtered_df[self.x_col].values,\n                subplot_y_position=row['subplot_y_position'],\n                subplot_x_position=row['subplot_x_position'],\n                highlighted_traces=row[self.traces_col] in highlighted_traces\n            )\n            self.traces.append(metric_data)","99822c83":"class PercentageMetric(BaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"   \n    \n    def calculate_average(self, df=pd.DataFrame) -> pd.DataFrame:\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col])\n        total = self.groupby(df=df, columns=[self.x_col])\n        joined = self.join_dataframes(df1=detail, df2=total, on_columns=[self.x_col]) \n        joined['Metric'] = joined['Dummy'] \/ joined['Dummy_total'] * 100  # get percentage\n        joined[self.traces_col] = 'Average'\n        return joined\n            \n    \n    def calculate(self, add_avg: bool = False) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        df = self.get_df()\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col, self.traces_col])\n        total = self.groupby(df=df, columns=[self.x_col, self.traces_col]) \n        joined = self.join_dataframes(df1=detail, df2=total, on_columns=[self.x_col, self.traces_col]) \n        joined['Metric'] = joined['Dummy'] \/ joined['Dummy_total'] * 100  # get percentage\n        \n        if add_avg:\n            avg_df = self.calculate_average(df=joined)\n            joined = joined.append(avg_df)\n                \n        self.metric_df = joined\n        return joined\n\n    @abstractmethod\n    def apply_categories(self):\n        pass ","34acf2a7":"class BasePlot(ABC):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"\n    \n    def __init__(\n        self, \n        metric: Type[BaseMetric], \n        title: str, \n        yaxes_title: str, \n        shared_yaxes: bool, \n        yticks: List[float], \n        yticks_template: str, \n        annotation_template: str,\n        x_nticks: int,\n        hover_template: str\n    ) -> None:\n    \n        pyo.init_notebook_mode()\n        self.metric = metric\n        self.yaxes_title = yaxes_title\n        self.shared_yaxes = shared_yaxes\n        self.hover_template = hover_template\n        self.title = title\n        self.yticks = yticks\n        self.yticks_template = yticks_template\n        self.annotation_template = annotation_template\n        self.x_nticks = x_nticks\n        self.figure = go.Figure()\n        self.range = (0, 0)\n\n    def make_subplots(self) -> None:\n        \"\"\"\n        Creates subplots in the figure and add titles\n        \"\"\"\n        self.figure = make_subplots(\n            cols=self.metric.subplots_qty, # our subplots will have the number of unique values for the select column\n            rows=1, # and 1 row\n            subplot_titles=self.metric.subplots_names, # Add titles to subplots\n            specs=[[{'type': 'scatter'}]*self.metric.subplots_qty]*1, # Define chart type for each subplot\n            shared_yaxes=self.shared_yaxes,\n            shared_xaxes=True\n        )\n\n        for idx, subplot_title in enumerate(self.figure['layout']['annotations']):\n            subplot_title['font'] = dict(size=14,color='grey')  # Size and color of subplot title\n            subplot_title['align'] = 'left'\n            subplot_title['xanchor'] = 'left'\n            subplot_title['x'] = 0\n            subplot_title['xref'] = 'x' if idx == 0 else f'x{idx + 1}'\n            \n\n    def update_common_layout(self) -> None:\n        \"\"\"\n        Updates general layout characteristics\n        \"\"\"\n        self.figure.update_layout(\n            showlegend = False,\n            plot_bgcolor='white',\n            title_text = self.title,\n            title_font_color = 'grey',\n            title_font_size = 15,\n            title_x=0,\n            title_y=0.98,\n            margin_t=130,\n            margin_l=0,\n            margin_r=0,\n            height=600,\n            width=800,\n            yaxis_range=self.range\n        )\n\n    def get_yticks_text(self) -> List[str]:\n        \"\"\"\n        Calculates the y_ticks text for charts\n        \"\"\"\n        return [self.yticks_template.format(i) for i in self.yticks]\n    \n    def update_subplots_layout(self) -> None:\n        \"\"\"\n        Updates scatter subplots layout characteristics\n        \"\"\"\n        for subplot_idx in range(self.metric.subplots_qty):\n            self.figure.update_xaxes(\n                type='category',\n                color='lightgrey', # to not draw to much attention to axis\n                showgrid=False, \n                visible=subplot_idx == 0,  # Visible only to the first subplot\n                row=1,\n                nticks=self.x_nticks,               \n                col=subplot_idx + 1 # Subplots start at 1 \n            )\n            self.figure.update_yaxes(\n                showgrid=False,\n                visible=subplot_idx == 0 or not self.shared_yaxes,\n                title=self.yaxes_title if subplot_idx == 0 else None,  # Visible only to the first subplot\n                color='grey',\n                row=1, \n                col=subplot_idx + 1,\n                tickvals=self.yticks, # show ticks ate 25, 50 and 75\n                ticktext=self.get_yticks_text(),\n                tickmode='array',\n                tickfont_color='lightgrey',\n                autorange=True\n            )\n\n    def line_color(self, trace: MetricData) -> str:\n        \"\"\"\n        Sets color to the highlight color or to a tone of grey if not highlighted\n        \"\"\"\n        return self.highlight_color(trace=trace) if trace.highlighted_traces else 'lightslategrey'\n    \n    def highlight_color(self, trace: MetricData) -> str:\n        \"\"\"\n        Returns the highlight color\n        \"\"\"\n        return COLORS[trace.trace_name]\n    \n    def line_width(self, trace: MetricData) -> str:\n        \"\"\"\n        Returns the line width of traces depending if trace is highlighted or not\n        \"\"\"\n        return 1.6 if trace.highlighted_traces else 0.6\n   \n    def opacity(self, trace: MetricData) -> str:\n        \"\"\"\n        Returns the opacity depending if trace is highlighted or not\n        \"\"\"\n        return 0.8 if trace.highlighted_traces else 0.25\n\n    def add_trace(self, trace: MetricData) -> None:\n        \"\"\"\n        Adds a new trace to a figure\n        \"\"\"\n        self.figure.add_trace(\n            go.Scatter(\n                x=trace.x_values, \n                y=trace.y_values, \n                mode='lines',\n                name=trace.trace_name,\n                hoverinfo='name+text+y',\n                hovertemplate=self.hover_template,\n                text=trace.x_values,\n                line_color=self.line_color(trace=trace),\n                showlegend=False,\n                opacity= self.opacity(trace=trace),\n                line_shape='linear',\n                line_width=self.line_width(trace=trace),\n                connectgaps=True\n            ), \n            trace.subplot_x_position, \n            trace.subplot_y_position\n        )\n    \n    def get_annotation_text(self, trace: MetricData, idx: int) -> str:\n        \"\"\"\n        Calculates the annotation text to be added to the plot\n        \"\"\"\n        if trace.subplot_y_position == 1 and idx == 0:\n            template = '{}<br>' + f'{self.annotation_template}'\n            return template.format(trace.trace_name, trace.y_values[idx])\n        else:\n            return self.annotation_template.format(trace.y_values[idx])\n        \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                # Add left annotation\n                self.figure.add_annotation(\n                    xref=f'x{trace.subplot_y_position}',\n                    yref=f'y{trace.subplot_y_position}',\n                    font=dict(\n                        size=11,\n                        color=self.highlight_color(trace=trace)\n                    ),\n                    opacity=0.8,\n                    align='center',\n                    yshift=0,\n                    xshift=-3,\n                    xanchor='right',\n                    x=trace.x_values.codes[0], \n                    y=trace.y_values[0],\n                    text=self.get_annotation_text(trace=trace, idx=0),\n                    showarrow=False\n                    )\n                # Add right annotation\n                self.figure.add_annotation(\n                    xref=f'x{trace.subplot_y_position}',\n                    yref=f'y{trace.subplot_y_position}',\n                    font=dict(\n                        size=11,\n                        color=self.highlight_color(trace=trace)\n                    ),\n                    opacity=0.8,\n                    align='center',\n                    yshift=0,\n                    xshift=3,\n                    xanchor='left',\n                    x=trace.x_values.codes[-1], \n                    y=trace.y_values[-1],\n                    text=self.get_annotation_text(trace=trace, idx=-1),\n                    showarrow=False\n                    )\n\n    def add_subplot_axis_annotation(self) -> None:\n        \"\"\"\n        Add subplot axis annotation\n        \"\"\"\n        self.figure.add_annotation(\n            xref=\"x\", \n            yref=\"paper\",\n            font=dict(\n                size=14,\n                color='lightgrey'\n            ),\n            align='left',\n            x=0, \n            xanchor='left',\n            y=1.05,\n            yanchor='bottom',\n            text=f'{self.metric.y_col}',\n            showarrow=False\n        )\n        \n    def add_source_annotation(self) -> None:\n        \"\"\"\n        Add source annotation\n        \"\"\"\n        self.figure.add_annotation(\n            xref=\"paper\", \n            yref=\"paper\",\n            font=dict(\n                size=11,\n                color='lightgrey'\n            ),\n            align='left',\n            x=-0.07, \n            xanchor='left',\n            y=-0.13,\n            yanchor='bottom',\n            text='<b>Source:<\/b> Kaggle surveys from 2018 to 2021.',\n            showarrow=False\n        )\n        \n    def add_data(self) -> None:\n        \"\"\"\n        Adds a trace to the figure following the same standard for each trace\n        \"\"\"\n        # Add all non-highlighted traces.\n        for trace in self.metric.traces:\n            self.add_trace(trace=trace)\n            self.update_range(data=trace.y_values)\n\n        \n    def update_range(self, data: List[float]) -> None:\n        \"\"\"\n        Updates the range to be 90% of minimum values and 110% of maximum value of all traces\n        \"\"\"\n        if len(data) == 0:\n            return self.range\n        \n        max_range = max(data) * 1.2\n        min_range = min(data) * 0.8\n        self.range = (self.range[0], max_range) if max_range > self.range[1] else self.range \n        self.range = (min_range, self.range[1]) if min_range < self.range[0] else self.range\n        \n    def show(self) -> None:\n        \"\"\"\n        Renders and shows the plot\n        \"\"\"\n        self.make_subplots()\n        self.update_common_layout()\n        self.add_data()\n        self.add_annotations()\n        self.add_subplot_axis_annotation()\n        self.update_subplots_layout()\n        self.add_source_annotation()\n        self.figure.show()","685f8f56":"kaggle_combined_survey = KaggleCombinedSurvey(surveys=[Kaggle2018, Kaggle2019, Kaggle2020, Kaggle2021])","f33deb46":"class GenderProportionMetric(PercentageMetric):\n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Country', y_col='Gender', x_col='Survey Year')\n    \n    def apply_categories(self):\n        self.to_categorical(column='Gender', categories=Category.GENDER)\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)","a56f0a4a":"class GenderProportionPlot(BasePlot):\n    pass","049cf260":"metric = GenderProportionMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['India', 'United States', 'Japan', 'Brazil'])\n\nGenderProportionPlot(\n    metric=metric, \n    yaxes_title='% of Respondents per Survey Year',\n    shared_yaxes=False,\n    yticks=[5, 10, 15, 20, 75, 80, 85, 90],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=3,\n    title='<b>Gender Gap: Kaggle members are mostly men. <\/b><br>Changes are still very small to make any difference.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents per country<\/i><\/span>'\n).show()","e1ddab7a":"class AverageBaseMetric(BaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"   \n        \n    def groupby(self, df: pd.DataFrame, columns: List[str]) -> pd.DataFrame:\n        \"\"\"\"\n        Calculates quantity per x, y and traces col\n        \"\"\"\n        return df.groupby(columns, as_index=False).agg({'Yearly Compensation Numeric': lambda x: x.mean(skipna=False)})\n    \n    def calculate_average(self, df=pd.DataFrame) -> pd.DataFrame:\n        \"\"\"\n        Calculates the average trace\n        \"\"\"\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col])\n        detail['Metric'] = detail['Yearly Compensation Numeric'] \n        detail[self.traces_col] = 'Average'\n        return detail\n            \n    \n    def calculate(self, add_avg: bool = False) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        df = self.get_df()\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col, self.traces_col])\n        detail['Metric'] = detail['Yearly Compensation Numeric'] \n        if add_avg:\n            avg_df = self.calculate_average(df=detail)\n            detail = detail.append(avg_df)\n                \n        self.metric_df = detail\n        return detail","fc91e5d9":"class CompensationEducationMetric(AverageBaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Country', y_col='Education', x_col='Survey Year')\n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Education', categories=Category.EDUCATION)      \n        \nclass CompensationPlot4(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=10 if trace.trace_name == '10+ years' else -25,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","a9558cd0":"metric = CompensationEducationMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=True)\nmetric.get_subplots(highlighted_traces=['United States', 'India', 'China', 'Japan', 'Brazil'])\n\nCompensationPlot4(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[30, 60, 90, 120],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>Educational degree has little impact on salary.<\/b> <br>However, the higher the degree, the better.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents. Lines are years of experience writing code.<\/i><\/span>'\n).show()","b556d168":"class SalaryCountryMetric(AverageBaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Job Title', y_col='Country', x_col='Survey Year')\n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Country', categories=Category.COUNTRY)\n        ","e0cbccaa":"class SalaryPlot(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=-30 if trace.trace_name == 'Average' else 5,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","adb9f6ec":"metric = SalaryCountryMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=True)\nmetric.get_subplots(highlighted_traces=['Data Scientist', 'Product\/Project Manager', 'Average'])\n\nSalaryPlot(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[30, 60, 90],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>Salary by Job by country<\/b><br>Salary has settled down in 4 years.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents by job title<\/i><\/span>'\n    ).show()","abb7afc3":"class ListColumnsPercentageMetric(PercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    \n    def calculate(self, add_avg: bool = False) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        df = self.get_df()\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col, self.traces_col])\n        self.explode = False\n        df = self.get_df()\n        total = self.groupby(df=df, columns=[self.x_col, self.y_col])\n        joined = self.join_dataframes(df1=detail, df2=total, on_columns=[self.x_col, self.y_col]) \n        joined['Metric'] = joined['Dummy'] \/ joined['Dummy_total'] * 100  # get percentage\n        \n        if add_avg:\n            avg_df = self.calculate_average(df=joined)\n            joined = joined.append(avg_df)\n                \n        self.metric_df = joined\n        return joined","dd0edee5":"class LanguagesMetric(ListColumnsPercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(\n            survey=survey, \n            traces_col='Programming Languages', \n            y_col='Country', \n            x_col='Survey Year', \n            explode=True\n        )\n        \n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Country', categories=Category.COUNTRY) ","44984c86":"class LanguagesPlot(BasePlot):\n                \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=-25 if trace.trace_name == 'Javascript' else 10,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","978df16c":"metric = LanguagesMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Python', 'C\/C++', 'SQL', 'R', 'Java', 'Javascript'])\n\nLanguagesPlot(\n    metric=metric,\n    yaxes_title='% of Language use',\n    shared_yaxes=True,\n    yticks=[30, 60, 90],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>Python is the language most beginners use on a regular basis and adoption is increasing.<\/b> '\\\n          '<br>C\/C++ usage is also increasing for all profiles, but specially for Coders.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents that use a language on a regular basis.<\/i><\/span>'\n).show()","d6ac2c7f":"class CloudMetric(ListColumnsPercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(\n            survey=survey, \n            traces_col='Cloud Computing Platforms', \n            y_col='Country', \n            x_col='Survey Year', \n            explode=True\n        )\n        \n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Country', categories=Category.COUNTRY) ","b4191ea4":"class CloudPlot(BasePlot):\n                \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=-40 if trace.trace_name == 'Microsoft' else 0,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","2fd2dd1c":"metric = CloudMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['amazon', 'Microsoft', 'Google'])\n\nCloudPlot(\n    metric=metric,\n    yaxes_title='% of Cloud Platform use',\n    shared_yaxes=True,\n    yticks=[30, 60, 90],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>The three big providers remain the three big providers, with amazon\/AWS losing marketshare.<\/b> '\\\n          '<br>amazon\/AWS, Google\/GCP, Microsoft\/Azure'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents and the cloud platforms they use.<\/i><\/span>'\n).show()","ccc6bab0":"<h1>Language & Cloud<\/h1>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n Finally, let's look differences in Cloud Platform by country.\n<\/div>","39aa1af5":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nThere seems to be no big difference in the usage tendency of Language by country. The popularity of amazon \/ AWS in the United States and the popularity of Google \/ GCP in Japan stand out a little.<br><br>\n    Let's take a look at <b>The Synergy Research Group's report<\/b>. \n<\/div><br><br>\n\n<img src=\"https:\/\/i.imgur.com\/o4A07Lq.jpg\" align=\"center\" style=\"width:800px;\"\/>\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nIt doesn't look much different from the Kaggle community. It is unpredictable which of the three major providers will win. (Or else?) You need to keep an eye on the trends of each platform.\n\n<div class=\"alert alert-success\"> <b>Python is King in Data Science.\n<br>\nThe king of the Cloud platform has not been decided. Let's watch!<\/b><\/div>\n<\/div>","7d205540":"<h1>Differences in Salary by Job<\/h1>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n Let's look differences in salary by country.\n<\/div>","07ad4538":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nUnfortunately, due to the large gender gap, we had to change the vertical axis for men and women.<br> India has narrowed the gender gap over the last four years. Is there any change in other countries?<br>\nLet's look at it internationally.The chart below is <b>published by the World Bank. The data source is the International Labor Organization.<\/b><\/div>\n<br><br>    \n<iframe src=\"https:\/\/ourworldindata.org\/grapher\/female-employment-to-population-ratio?time=2010..latest&country=USA~JPN~BRA~RUS~IND\" loading=\"lazy\" style=\"width: 100%; height: 600px; border: 0px none;\"><\/iframe>","a536a1e2":"<h1>Language & Cloud<\/h1>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n Let's look differences in Language by country.\n<\/div>","8f2a0695":"<h1>The Gender Gap<\/h1>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nThe Sustainable Development Goal 5 is \"Achieve gender equality and empower all women and girls\".Our advanced Kaggle Community will reach its goals ahead of other communities. Let's take a look.\n    <\/div>","7af95dfd":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nI will choose the four countries below, which are the most in three years.    <\/div>\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n<div class=\"alert alert-info\"><b>&emsp; India&emsp; United States&emsp; Japan&emsp; Brazil <\/b>\n<\/div>","3fac6e82":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nThere seems to be no big difference in the usage tendency of Language by country. After all Python is extremely popular. C and C ++ have also been reinstated. SQL usage is low in Japan, maybe because there is relatively little need to deal with big data.<br><br>\n    Let's take a look at <b>The TIOBE Programming Community index<\/b>. This index is an indicator of the popularity of programming languages. Popular search engines such as Google, Bing, Yahoo!, Wikipedia, Amazon, YouTube and Baidu are used to calculate the ratings.\n<\/div><br><br>\n\n<img src=\"https:\/\/i.imgur.com\/XP8dcqB.png\" align=\"center\" style=\"width:800px;\"\/>\n<br>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    Python is growing a lot. Data Science seems to be one of the reasons. The growth of C \/ C ++ in Kaggle is inferred to be due to the growth of C ++ from the chart above. It seems obvious from TIOBE that Java is sluggish with Kaggle.<\/div>   ","207a5543":"<h2>Select Contries<\/h2>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nI would like to compare and analyze many countries, but it is difficult. Check the number of responses by country and select some countries.    <\/div>","3ce1bf2f":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n\nIn the United States, people who are neither Doctorals nor Professionals tend to have a salary advantage.<br>Participating in Kaggle is appealing to such people.\n<br>\n\n<div class=\"alert alert-success\"> <b>Working in the United States is appealing to Kaggle participants.<br>\nKaggle is appealing to anyone who lives in the United States and is neither a PhD nor an expert.<\/b><\/div>\n<\/div>\n","0ba91d29":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nAgain, the high salaries of United States stand out. Also, Data Scientists have high salaries in every country, but Managers have high salaries in countries other than United States. Is it due to the development of software engineering in the United States?<br>\n    Let's take a look at <b>the national average Salary by the Organisation for Economic Co-operation and Development<\/b>.\n<\/div>\n\n<iframe src=\"https:\/\/data.oecd.org\/chart\/6xuq\" width=\"800\" height=\"600\" style=\"border: 0\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" allowfullscreen=\"true\"><a href=\"https:\/\/data.oecd.org\/chart\/6xuq\" target=\"_blank\">OECD Chart: Average wages, Total, US dollars, Annual, 2020<\/a><\/iframe>","e04abed8":"<h1>Educational degree earned<\/h1>\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    Let's take a look at the impact of Educational degree on annual income in the Kaggle community.\n<\/div>","b7951e5e":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n\nIt's a shame that we don't have data for India and Brazil, but we find that joining Kaggle in Japan is attractive in terms of income. This may be the reason why the number of Japanese participants is increasing. (I also \ud83d\ude09)<br>\n\n<div class=\"alert alert-success\"> <b>Outside of the United States, Manager's career is attractive.\n<br>\nKaggle is attractive to Japanese people.<\/b><\/div>\n<\/div>\n","974bf89c":"# \ud83d\uddfaKaggle Survey seen from the outside\n<h2>D'o\u00f9 venons-nous ? Que sommes-nous ? O\u00f9 allons-nous ?<\/h2>\n\n<img src=\"https:\/\/i.imgur.com\/4qzLkis.jpg\" align=\"center\" style=\"width:800px;\"\/>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n <b>Purpose<\/b><br><br>    Where do Kaggle community members come from, who are we, and where are we going? I want to tell the story.<br><br> This attempt will probably end up being completely inadequate. But I want to show that the Kaggle community is determined to shape the future of Machine Learning & Data Science.<br><br> The following is what I finally got after struggling without fear of being Don Quixote. As an inexperienced person, I hope that a good Kaggle's member will take over this thought and make it bloom and contribute to the development of Kaggle.\n<br><br>\n     <b>Means<\/b><br><br>\nIn doing this, I have actively used data research outside of Kaggle. While this has the problem of varying the credibility of the data, it is essential to have an outside perspective in order to understand the Kaggle community. It is fundamentally inevitable that the perspective from which we see ourselves and the perspective from which others see us from the outside will differ, and we should not be afraid of this.<br><br>\nAlso, this is the 5th Kaggle Survey, so I explore trends over time. I often refer to <a href=\"https:\/\/www.kaggle.com\/andresionek\/one-chart-many-answers-kaggle-surveys-in-slopes\">One chart, many answers: Kaggle Surveys in Slopes<\/a>. Thanks, @andresionek.\n<\/div>\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nOn previous surveys, I explored <a href=\"https:\/\/www.kaggle.com\/andresionek\/what-makes-a-kaggler-valuable\">What Makes a Kaggler Valuable<\/a> and a comparison between job posts and survey answers on <a href=\"https:\/\/www.kaggle.com\/andresionek\/is-there-any-job-out-there-kaggle-vs-glassdoor\">Is there any job out there? Kaggle vs Glassdoor<\/a>.\n","f03cbcf4":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nEducational degree has little impact on salary. However, the higher the degree, the better. The high annual income of the United States stands out.<br>\n    Let's look at the trends compared to the workers as a whole. The only data source is <b>the United States Census Bureau<\/b> because no suitable data was found. Pay attention to the United States of Chart above and compare.\n<\/div>\n<br><br>    \n<iframe src=\"https:\/\/ourworldindata.org\/grapher\/female-employment-to-population-ratio?time=2010..latest&country=USA~JPN~BRA~RUS~IND\" loading=\"lazy\" style=\"width: 100%; height: 600px; border: 0px none;\"><\/iframe>\n\n<img src=\"https:\/\/i.imgur.com\/BwNZPlC.png\" align=\"center\" style=\"width:800px;\"\/>","0b813161":"<h1>Conclusion<\/h1>\n<br>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nThe suggestions obtained in comparison to the external data were very interesting. It was hard for me, who lacked coding skills, but I learned a lot in the process of creating this notebook. Thanks to Kaggle for giving me this opportunity.<br><br>\n Where are the members of the Kaggle community, who are they, and where are they going? This notebook is not the complete answer to the final question. However, there are many things that can be understood by looking inside, but there are many things that cannot be understood by looking outside, and I think both are just as important. It would be difficult to answer the question without that attitude. I would appreciate it if you could sympathize with that attitude.\n    <br><br>\n\n<h3>Thank you for read!<\/h3>","32f20d42":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nI think it's interesting. I think the Kaggle community is moving forward, but the gender gap doesn't seem to be closing.The delay in Japan is remarkable. (I'm disappointed because I'm Japanese\ud83d\ude25) <br>However, India is an exception, and the gender gap has been largely closed. I think the background is the social structure of India.    <\/div>\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    <div class=\"alert alert-success\">The gender gap in Kaggle is lagging. <br>\nExceptionally, Kaggle's gender gap in India is closing.<br><br><b>&emsp;I hope Kaggle will work to close the gender gap.<\/b><\/div>"}}