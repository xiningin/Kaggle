{"cell_type":{"a3cb023f":"code","3c15e3d8":"code","82a247d7":"code","c24a7b8c":"code","4021c08e":"code","39f6bb9f":"code","3fcfa9a1":"code","3fd04de4":"code","bf8b4afb":"code","bbf492f4":"code","b54854a2":"code","93325f2f":"code","e8620731":"code","3be86527":"code","356a5610":"code","0e8ff00b":"code","8b5d315c":"code","16ab6454":"code","1ccdcc2d":"code","a2b3760e":"code","bb022f00":"code","44754c62":"code","e24e1195":"code","5cf6259c":"code","34eaba87":"code","33506c5d":"code","4d206fb6":"code","a6797d36":"code","dbc0a916":"code","fb38c463":"code","3aa8cbda":"code","2e265d32":"code","50a8e1ec":"code","fd006d10":"code","17ade7d1":"code","2bfd7365":"code","9d4bd1be":"code","3550972a":"code","ce074008":"code","e6e60a14":"code","d808dfdd":"code","91f5513c":"code","3e10bedc":"code","8655ce73":"code","ad5a0dd8":"code","a29d4f72":"code","43e4c1be":"code","c5366c90":"code","e8af7a5b":"code","70d4078b":"code","9a9405c7":"code","0c16c18e":"code","838041d7":"code","32619c00":"code","013ed3a0":"code","bee2d9d0":"code","e7c84ea6":"code","364e57ac":"code","5afbd745":"code","3ee034b7":"code","fb458fd9":"code","14883ab6":"code","6f6a462c":"code","1fbab4a2":"code","3d90fdeb":"code","7ca7c0bd":"code","771a4042":"code","0f3f33d8":"code","fee2b17e":"code","b6818da3":"code","55326c6d":"code","d96299c3":"code","5f43458e":"code","510a302f":"code","7bb5646d":"code","00f12627":"code","762c5da3":"code","bc9c0ef9":"code","ff90460e":"code","3ca426a7":"code","b41c4939":"code","127387ee":"code","303ca8db":"code","d743cc96":"code","8eb94879":"code","9d9de1b5":"code","aa658abd":"code","335fbcf1":"code","11c85058":"code","92d12526":"code","206eace8":"code","ee420c7f":"code","b2743f37":"code","10fad2db":"code","b828c706":"code","9c9042b9":"code","d64b2692":"code","d155da6a":"code","f999141a":"code","bb15ab01":"code","da157c83":"code","a0dc1f5b":"code","f82fc03f":"code","7f2334d7":"code","6f7626a0":"code","4b486822":"code","a2ef364e":"code","144c90f0":"code","e4e0ed0b":"code","89b5c3a6":"code","626c784c":"code","6c2a6348":"code","5fa5165f":"code","0153d8ff":"code","01b0964f":"code","25c9345f":"code","e6e10f9c":"code","7528b216":"code","fa9c71d3":"code","40d66df2":"code","64063990":"code","f0ff5b37":"code","233c18ac":"code","df6830fd":"code","1c785471":"code","bcc398dd":"code","04eafe66":"code","524214c9":"code","446d9b47":"code","f67a94b6":"code","f7ae355c":"code","05281c3d":"code","8f2ee3f1":"code","bf8a7ec9":"code","bd4e8ebf":"code","664ab88f":"code","1005facb":"code","2b9b2731":"code","8151c682":"code","0543642e":"code","dca538aa":"code","5170b2f2":"code","9e990ba5":"code","f5f4ffdb":"code","de52d322":"code","10e4c24c":"code","fb8a1522":"code","8586beb8":"code","20d9c023":"code","b3821e1d":"code","c4c53b35":"code","aaabcb94":"code","01436b1d":"code","44fc9821":"code","d4943c65":"code","1d5c6f96":"code","820febd5":"code","d0d484b5":"code","6838516f":"code","89016c76":"code","842d2667":"code","265e1ea8":"code","015a2f23":"code","da5f2596":"code","a6ff56e5":"code","98747556":"code","30f17d9a":"code","8fbc23d5":"code","5c1b1296":"code","00a060af":"code","a62d871f":"code","7d2aa688":"code","bd2ade49":"code","5cae6773":"code","1281ffc1":"code","8a2473b0":"code","7e0e7eac":"code","5d763c39":"code","edea00e1":"code","c4fa46cc":"code","5531014d":"code","0aa95ac8":"code","7231c2f8":"code","e71107ed":"code","00f58736":"code","137d2e1c":"code","fb70279c":"code","e62bb557":"code","40067a24":"code","fb0975c2":"code","e6f15bbc":"code","aa81ac82":"code","e53d6a49":"code","5a6a6866":"code","fdc98357":"code","db2ac794":"code","6e5a69a4":"code","c13ce221":"code","6fd784dd":"code","99789594":"code","c6bc6704":"code","7df1a071":"code","dd5ada99":"code","b8fdcf42":"code","9c867b67":"code","8b73efa8":"code","f577672e":"code","8abeb283":"code","f3958c25":"code","da1be2b9":"code","352b5bdd":"code","a6c694f3":"code","969cef72":"code","4de2990f":"code","1cadac18":"code","471d04b8":"code","a298cec9":"code","94cd7349":"code","b7433f69":"code","e422acfb":"code","9467a02d":"code","92f27179":"code","e3945dbf":"code","6594042c":"code","cf69a277":"code","3953fe54":"code","ecab2b0b":"code","1587e502":"code","32eba661":"code","e2e60853":"code","2140ebd3":"code","f2656959":"code","49d5eaa2":"code","ac6437ee":"code","3e63e964":"code","b8ae963f":"code","6dfebf64":"code","94ad1445":"code","d0b09a6e":"code","e10e5d1b":"code","609a1b6b":"code","80996cc5":"code","70a4f8ef":"code","52c6dfe5":"code","ae88097b":"code","b026e8a4":"code","f1ae24e2":"code","81c7b93b":"markdown","2f52f14d":"markdown","d3beea0e":"markdown","f5c1b1c7":"markdown","409048f3":"markdown","55b406dd":"markdown","29eb8f31":"markdown","37fbb1b4":"markdown","4c55280c":"markdown","1e9e3e0c":"markdown","b1815ccd":"markdown","bf30b0df":"markdown","abdd42bf":"markdown","25980a3e":"markdown","181d2621":"markdown","5d5451a7":"markdown","35f69229":"markdown","df332b91":"markdown","99436361":"markdown","bebedd21":"markdown","5c88b166":"markdown","baa17f1d":"markdown","0b1afca2":"markdown","8937a9d7":"markdown","09b65d2f":"markdown","b86a63c9":"markdown","209ea893":"markdown","f809ace2":"markdown","2c7ce3d0":"markdown","48ed8739":"markdown","12f4a875":"markdown","9372e6d9":"markdown","2734ceb7":"markdown","68c22147":"markdown","b7b2626e":"markdown","4e22ade9":"markdown","8e7dbc06":"markdown","b4e39b10":"markdown","35783386":"markdown","e5c440d6":"markdown","698a027d":"markdown","15f88c05":"markdown","0f6e78a5":"markdown"},"source":{"a3cb023f":"# set - uniqueness in your elements\n# list - contain all your elements, ordered in the way you added them","3c15e3d8":"my_list = [6, 7, 8, 9, 0, 1, 1, 1, 4, 5]\nmy_list","82a247d7":"set(my_list)","c24a7b8c":"my_list.append(10)\nmy_list","4021c08e":"my_set = set(my_list)\nmy_set","39f6bb9f":"my_set.add(2)\nmy_set","3fcfa9a1":"!pip install numpy","3fd04de4":"import numpy as np","bf8b4afb":"numpy.array()","bbf492f4":"n.array([1])","b54854a2":"[]","93325f2f":"my_array_2d = [[i for i in range(4)] for j in range(5)]\nprint(my_array_2d)","e8620731":"my_array_1d = [\"John\", \"Tom\"]\nnp.array(my_array_1d)","3be86527":"my_array = np.array(my_array_2d)\nmy_array","356a5610":"my_array.shape","0e8ff00b":"np.lookfor(\"shape\")","8b5d315c":"np.array([0 for i in range(10)]).reshape((1,10))","16ab6454":"np.array([0 for i in range(10)]).reshape((10,1))","1ccdcc2d":"np.array([0 for i in range(10)]).reshape((10,5))","a2b3760e":"(3,)","bb022f00":"(3)","44754c62":"# Create an array of ones\nnp.ones((3,4))","e24e1195":"np.array([1, 2, \"Tom\"])","5cf6259c":"np.array([1.1, 2.0])","34eaba87":"# Create an array of zeros\nnp.zeros((2,3,4),dtype=np.int16)","33506c5d":"# Create an array with random values\nnp.random.random((2,2))","4d206fb6":"[]","a6797d36":"# Create an empty array\nempty = np.empty((3,2))\nempty","dbc0a916":"empty[0]","fb38c463":"# Create a full array\nfull = np.full((2,5), 10)\nfull","3aa8cbda":"full[0]","2e265d32":"np.arange(10, 25)","50a8e1ec":"# Create an array of evenly-spaced values\nnp.arange(10, 25, 5)","fd006d10":"# Create an array of evenly-spaced values\nnp.linspace(0,2,9)","17ade7d1":"my_tuple = (2, 3)\nmy_tuple","2bfd7365":"my_tuple[1]","9d4bd1be":"x, y = (2, 3)\nprint(x)\nprint(y)","3550972a":"!ls ..\/input\/lecture-4-data","ce074008":"# windows: C:\\\\Users\\\\blah\\\\...\nx, y, z = np.loadtxt(\"..\/input\/lecture-4-data\/np-1.txt\",\n                    skiprows=1,\n                    unpack=True)\nx, y, z","e6e60a14":"my_array1 = np.genfromtxt('..\/input\/lecture-4-data\/np-2.txt',\n                      skip_header=1)\nmy_array1","d808dfdd":"my_array = np.genfromtxt('..\/input\/lecture-4-data\/np-2.txt',\n                      skip_header=1,\n                      filling_values=-999)\nmy_array","91f5513c":"my_array","3e10bedc":"# Print the number of `my_array`'s dimensions\nprint(my_array.ndim)","8655ce73":"# Print the number of `my_array`'s elements\nprint(my_array.size)","ad5a0dd8":"# Print the length of one array element in bytes\nprint(\"itemsize\", my_array.itemsize)\n\n# Print information about `my_array`'s memory layout\nprint(\"flags\", my_array.flags)\n\n# Print the total consumed bytes by `my_array`'s elements\nprint(\"nbytes\", my_array.nbytes)","a29d4f72":"x = np.ones((3,4))\ny = np.random.random((3,4))\nx, y","43e4c1be":"x + y","c5366c90":"x = np.ones((3,4))\ny = np.random.random((3,5))\nx + y","e8af7a5b":"x = np.ones((3,5))\ny = np.random.random((3,4))\nx + y","70d4078b":"x = np.ones((3,4))\nprint(x)\ny = np.arange(4)\nprint(y)","9a9405c7":"x - y","0c16c18e":"y - x","838041d7":"x + y","32619c00":"x = np.ones((3,4))\ny = np.arange(4)\nx, y","013ed3a0":"np.dot(x,y)","bee2d9d0":"np.divide(x, y)","e7c84ea6":"np.divide(y, x)","364e57ac":"x = np.random.random((3,4))","5afbd745":"print(x)","3ee034b7":"x.min()","fb458fd9":"x.std()","14883ab6":"np.std(x)","6f6a462c":"x.mean()","1fbab4a2":"x","3d90fdeb":"x.mean(axis=0)","7ca7c0bd":"x.mean(axis=1)","771a4042":"x.mean(axis=3)","0f3f33d8":"regular_list = [i for i in range(10)]\nregular_list","fee2b17e":"regular_list[1:]","b6818da3":"regular_list[5:7]","55326c6d":"regular_list[0:9]","d96299c3":"regular_list[0,]","5f43458e":"regular_list[0:9:2]","510a302f":"x = np.random.random((3,))","7bb5646d":"x","00f12627":"x[0:2,]","762c5da3":"x[0]","bc9c0ef9":"x_2d = np.random.random((3,2))\nx_2d","ff90460e":"x_2d[1]","3ca426a7":"x_2d[1,1]","b41c4939":"x_2d[1][1]","127387ee":"x_3d = np.random.random((3,2,3))\nx_3d","303ca8db":"x_3d","d743cc96":"x_2d = np.random.random((3,5))\nx_2d","8eb94879":"x_2d[0:2, :2]","9d9de1b5":"x_2d[0]","aa658abd":"x_2d = 2.5 * np.random.random((3,5))\nx_2d","335fbcf1":"x_2d < 1.0","11c85058":"x_2d[x_2d < 1.0]","92d12526":"x_2d[(x_2d < 1.0) & (x_2d > 0.9)]","206eace8":"x = np.random.random((5, 4))\nx","ee420c7f":"np.sort(x)","b2743f37":"x = np.random.random((5, 4))\nx","10fad2db":"x[2, 0: :2]","b828c706":"np.log(x[2, 0::2])","9c9042b9":"import pandas as pd","d64b2692":"np.random.randn(5)","d155da6a":"s = pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])\ns","f999141a":"s[0]","bb15ab01":"s['a']","da157c83":"s > s.median()","a0dc1f5b":"s[s > s.median()]","f82fc03f":"np.exp(s)","7f2334d7":"# Same vectorized computations like np.array\n\ns + s","6f7626a0":"s","4b486822":"s * 2","a2ef364e":"import pandas as pd\nimport numpy as np","144c90f0":"data = np.array([['','Col1','Col2'],\n                ['Row1',1,2],\n                ['Row2',3,4]])\ndata","e4e0ed0b":"df = pd.DataFrame(data)\ndf","89b5c3a6":"df[0]","626c784c":"df[0][1]","6c2a6348":"data[1:,1:]","5fa5165f":"# All the rows in the first column besides the empty string (' ')\ndata[1:,0]","0153d8ff":"data[0,1:]","01b0964f":"df = pd.DataFrame(data=data[1:,1:],\n            index=data[1:,0],\n            columns=data[0,1:])\ndf","25c9345f":"df['Col1']['Row1']","e6e10f9c":"df['Col2']['Row1']","7528b216":"my_2darray = np.array([[1, 2, 3], [4, 5, 6]])\nmy_2darray","fa9c71d3":"my_2darray.shape","40d66df2":"my_2darray[0, 1]","64063990":"# Take a 2D array as input to your DataFrame \nmy_2darray = np.array([[1, 2, 3], [4, 5, 6]])\npd.DataFrame(my_2darray)","f0ff5b37":"# Take a dictionary as input to your DataFrame \nmy_dict = {'Col 1': ['1', '3'], 'Col 2': ['1', '2'], 'Col 3': ['2', '4']}\npd.DataFrame(my_dict)","233c18ac":"my_df = pd.DataFrame(data=[4,5,6,7], index=[(\"row-%i\" % i, \"row2-%i\" % (i + 1)) for i in range(4)], columns=['A'])\nmy_df","df6830fd":"my_df.index","1c785471":"my_df['A'][('row-2', 'row2-3')]","bcc398dd":"# Take a DataFrame as input to your DataFrame \nmy_df = pd.DataFrame(data=[4,5,6,7], index=range(0,4), columns=['A'])\npd.DataFrame(my_df)","04eafe66":"# Take a Series as input to your DataFrame\nmy_series = pd.Series({\"United Kingdom\":\"London\", \"India\":\"New Delhi\", \"United States\":\"Washington\", \"Belgium\":\"Brussels\"})\ndf = pd.DataFrame(my_series, columns=[\"Capitol\"])\ndf","524214c9":"df[\"Capitol\"][\"United States\"]","446d9b47":"df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6]]))\ndf","f67a94b6":"# Use the `shape` property\ndf.shape","f7ae355c":"df.index.__doc__","05281c3d":"my_list = [1, 2, 3, 4]\nprint(my_list[0:2:1])\nprint(my_list[0:4:2])","8f2ee3f1":"df.index","bf8a7ec9":"# Or use the `len()` function with the `index` property\nlen(df.index)","bd4e8ebf":"df","664ab88f":"df.columns","1005facb":"df.columns.values","2b9b2731":"list(df.columns)","8151c682":"my_list = list(df.columns)\nmy_row = 0\nfor column in my_list:\n    print(df[column][my_row])","0543642e":"d = {'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}}\ndf = pd.DataFrame(d)\ndf","dca538aa":"df['A']","5170b2f2":"df['C']","9e990ba5":"# Using `iloc[]`\ndf.iloc[0]","f5f4ffdb":"df.iloc[0]['A']","de52d322":"df.iloc[0][0]","10e4c24c":"df","fb8a1522":"df.columns.values","8586beb8":"df.loc.__doc__","20d9c023":"df.loc[0]","b3821e1d":"df.loc[0][0]","c4c53b35":"# Using `loc[]`\ndf.loc[0]['A']","aaabcb94":"df.loc[0:, 'A']","01436b1d":"df.at[0,'A']","44fc9821":"df.iat[0,0]","d4943c65":"df","1d5c6f96":"df.index","820febd5":"df.set_index('C')","d0d484b5":"df","6838516f":"df.columns","89016c76":"df","842d2667":"df = df.set_index('C')\ndf","265e1ea8":"pd.DataFrame(df['A'])","015a2f23":"df","da5f2596":"df.columns","a6ff56e5":"df['C']","98747556":"df['A']","30f17d9a":"df['A'][6]","8fbc23d5":"d = {'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}}\ndf = pd.DataFrame(d)\ndf\ndf.ix[0]","5c1b1296":"df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\ndf","00a060af":"df.ix[4.8].values","a62d871f":"new_row = []\nfor i in df.ix[4.8].values:\n    if i > 8:\n        new_row.append(i * 2)\n    else:\n        new_row.append(i)\n\ndf.ix[2] = new_row\ndf","7d2aa688":"df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\ndf","bd2ade49":"# There's no index labeled `2`, so you will change the index at position `2`\ndf.ix[2] = [60, 50, 40]\ndf","5cae6773":"# This will make an index labeled `2` and add the new values\ndf.loc[2] = [11, 12, 13]\ndf","1281ffc1":"df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf","8a2473b0":"df['original_index'] = df.index\ndf","7e0e7eac":"df.set_index('C')","5d763c39":"df['A_and_B'] = df['A'] + df['B']","edea00e1":"df","c4fa46cc":"df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6]]))\ndf","5531014d":"df.loc[:, 4] = pd.Series(['5', '6'], index=df.index)\ndf","0aa95ac8":"df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\ndf","7231c2f8":"df_reset = df.reset_index(level=0, drop=True)\ndf_reset","e71107ed":"df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\ndf.reset_index()","00f58736":"df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\nprint(df)\ndf.reset_index(level=0, inplace=True)\ndf","137d2e1c":"df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\ndf.reset_index(inplace=True)\ndf","fb70279c":"import pandas as pd","e62bb557":"d = {'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}}\ndf = pd.DataFrame(d)\ndf","40067a24":"df.drop('A', axis=1)\ndf","fb0975c2":"df.drop('A', axis=1, inplace=True)\ndf","e6f15bbc":"df","aa81ac82":"df.drop(0)","e53d6a49":"df","5a6a6866":"df.columns[1]","fdc98357":"df.drop(df.columns[1], axis=1)","db2ac794":"df","6e5a69a4":"df.columns","c13ce221":"df.drop(df.columns[[1]], axis=1, inplace = True)","6fd784dd":"df","99789594":"d = {48: {2.5: 23, 4.7999999999999998: 23, 12.6: 4},\n 49: {2.5: 35, 4.7999999999999998: 50, 12.6: 5},\n 50: {2.5: 23, 4.7999999999999998: 7, 12.6: 5}}\n\ndf = pd.DataFrame(d)\ndf","c6bc6704":"df.drop_duplicates([48], keep='last')","7df1a071":"df","dd5ada99":"df = df.drop_duplicates([48], keep='last')\ndf","b8fdcf42":"df.reset_index(drop=True)","9c867b67":"d = {'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}}\ndf = pd.DataFrame(d)\ndf","8b73efa8":"# Define the new names of your columns\nnewcols = {\n    'A': 'new_column_1', \n    'B': 'new_column_2', \n    'C': 'new_column_3'\n}\n\n# Use `rename()` to rename your columns\ndf.rename(columns=newcols, inplace=True)\ndf","f577672e":"# Rename your index'}\ndf.rename(index={1: 'a)","8abeb283":"import numpy as np","f3958c25":"df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n                  index=['mouse', 'rabbit'],\n                  columns=['one', 'two', 'three'])\ndf","da1be2b9":"df.filter(items=['one', 'three'])","352b5bdd":"data = {'name': ['Jack', 'Frank', 'Kelly', 'Rebecca', \"Monica\"], \n        'year': [2015, 2011, 2010, 2014, None], \n        'reports': [24, 4, 2, 31, None]}\ndf = pd.DataFrame(data, index = ['New York', 'New Orleans', 'Budapest', 'Helsinki', \"Cologne\"])\ndf","a6c694f3":"df[['name', 'year']]","969cef72":"df['year'] > 2012","4de2990f":"df[df['year'] > 2012]","1cadac18":"df[(df['year'] > 2012) & (df['reports'] < 30)]","471d04b8":"df.query('year > 2012 | name == \"Frank\"')","a298cec9":"df","94cd7349":"df[df['year'].notnull()]","b7433f69":"df[df['year'].isnull()]","e422acfb":"d = {'Student1': {0: 'OK', 1: 'Awful', 2: 'Acceptable'},\n 'Student2': {0: 'Perfect', 1: 'Awful', 2: 'OK'},\n 'Student3': {0: 'Acceptable', 1: 'Perfect', 2: 'Poor'}}\ndf = pd.DataFrame(d)\ndf","9467a02d":"# Replace the strings by numerical values (0-4)\ndf.replace(['Awful', 'Poor', 'OK', 'Acceptable', 'Perfect'], [0, 1, 2, 3, 4]) ","92f27179":"#  Removing Parts From Strings in the Cells of Your DataFrame\nd = {'class': {0: '1', 1: '4', 2: '7'},\n 'result': {0: '+3b', 1: '-6B', 2: '+9A'},\n 'test': {0: '2', 1: '5', 2: '8'}}\ndf = pd.DataFrame(d)\ndf","e3945dbf":"def my_filter(x):\n    return x.lstrip('+-').rstrip('aAbBcC')","6594042c":"# Delete unwanted parts from the strings in the `result` column\ndf['result'] = df['result'].map(my_filter)\ndf","cf69a277":"# Splitting Text in a Column into Multiple Rows in a DataFrame\nd = {'Age': {0: '34', 1: '22', 2: '19'},\n 'PlusOne': {0: '0', 1: '0', 2: '1'},\n 'Ticket': {0: '23:44:55', 1: '66:77:88', 2: '43:68:05 56:34:12'}}\ndf = pd.DataFrame(d)\ndf","3953fe54":"\"43:68:05 56:34:12\".split(\" \")","ecab2b0b":"\"43:68:05 56:34:12\".split(\":\")","1587e502":" df['Ticket'].str.split(' ')","32eba661":"pd.Series(1)","e2e60853":"stacked_df = pd.DataFrame(pd.Series(1)).stack()\nstacked_df","2140ebd3":"df","f2656959":"# Split out the two values in the third row\n# Make it a Series\n# Stack the values\nticket_series = df['Ticket'].str.split(' ').apply(pd.Series, 1).stack()\nticket_series","49d5eaa2":"import pandas as pd","ac6437ee":"!ls ..\/input\/lecture-4-data","3e63e964":"df = pd.read_csv(\"..\/input\/lecture-4-data\/omni2_all_years.dat\",\n                 delim_whitespace=True,\n                 usecols=[0, 1, 2, 39, 40, 50],\n                 names=[\"Year\", \"DOY\", \"Hour\", \"R\", \"Dst\", \"F10.7\"])\ndf","b8ae963f":"2013*100000 + 36 + 2","6dfebf64":"df.index = pd.to_datetime(df[\"Year\"] * 100000 + df[\"DOY\"] * 100 + df[\"Hour\"], format=\"%Y%j%H\")\ndf = df.drop(columns=[\"Year\", \"DOY\", \"Hour\"])\ndf","94ad1445":"import numpy as np","d0b09a6e":"df = df.replace({\"R\":999,\n                 \"Dst\":99999,\n                 \"F10.7\":999.9}, np.nan)\ndf","e10e5d1b":"print(\"Dataframe shape: \", df.shape)\ndt = (df.index[-1] - df.index[0])\nprint(dt)\nprint(\"Number of hours between start and end dates: \", dt.total_seconds()\/3600 + 1)","609a1b6b":"# Plotting all the time series on one axis\ndf.plot(figsize=(15,4))","80996cc5":"# Plotting them all on separate subplots to see them more clearly (sharing the x axis)\ndf.plot(subplots=True, figsize=(15,6))","70a4f8ef":"# Plotting a selection of columns\ndf.plot(y=[\"R\", \"F10.7\"], figsize=(15,4))","52c6dfe5":"# Plotting two of the variables against one of the others\ndf.plot(x=\"R\", y=[\"F10.7\", \"Dst\"], style='.')","ae88097b":"df[[\"F10.7\", \"R\"]].resample(\"1y\").median().plot(figsize=(15,4))","b026e8a4":"df[[\"F10.7\", \"R\"]].rolling(24*365).median().plot(figsize=(15,4))","f1ae24e2":"df[[\"F10.7\", \"R\"]].resample(\"3y\").median().diff().plot(subplots=True, figsize=(15,4))","81c7b93b":"`iat`: Access a single value for a row\/column pair by integer position.","2f52f14d":"<dl class=\"simple\">\n<dt><strong>level <\/strong><span class=\"classifier\">int, str, tuple, or list, default None<\/span><\/dt><dd><p>Only remove the given levels from the index. Removes all levels by\ndefault.<\/p>\n<\/dd>\n<dt><strong>drop <\/strong><span class=\"classifier\">bool, default False<\/span><\/dt><dd><p>Do not try to insert index into dataframe columns. This resets\nthe index to the default integer index.<\/p>\n<\/dd>\n<dt><strong>inplace <\/strong><span class=\"classifier\">bool, default False<\/span><\/dt><dd><p>Modify the DataFrame in place (do not create a new object).<\/p>\n<\/dd>\n<dt><strong>col_level <\/strong><span class=\"classifier\">int or str, default 0<\/span><\/dt><dd><p>If the columns have multiple levels, determines which level the\nlabels are inserted into. By default it is inserted into the first\nlevel.<\/p>\n<\/dd>\n<dt><strong>col_fill <\/strong><span class=\"classifier\">object, default \u2018\u2019<\/span><\/dt><dd><p>If the columns have multiple levels, determines how the other\nlevels are named. If None then the index name is repeated.<\/p>\n<\/dd>\n<\/dl>","d3beea0e":"Applying a unary NumPy function, `f(x)`, to an N-dimensional array will apply `f(x)` elementwise on the array.","f5c1b1c7":"start:end:step","409048f3":"To reduce the noise in the data, we can smooth it.","55b406dd":"`|` OR\n\n`&` AND","29eb8f31":"Indexing is a core component!","37fbb1b4":"https:\/\/ourcodingclub.github.io\/tutorials\/pandas-time-series\/\n\n**Heliophysics** is the study of the effects of the Sun on the Solar System; it addresses problems that span a number of existing disciplines \u2013 solar and heliospheric physics, and magnetospheric and ionospheric physics for the Earth and other planets.","4c55280c":"## Format\n\nSome normal usage","1e9e3e0c":"## Operations","b1815ccd":"<tbody>\n\t\t<tr class=\"even\">\n\t\t\t<td>a.min()<\/td>\n\t\t\t<td>Array-wise minimum value<\/td>\n\t\t<\/tr>\n\t\t<tr class=\"odd\">\n\t\t\t<td>b.max(axis=0)<\/td>\n\t\t\t<td>Maximum value of an array row<\/td>\n\t\t<\/tr>\n\t\t<tr class=\"even\">\n\t\t\t<td>b.cumsum(axis=1)<\/td>\n\t\t\t<td>Cumulative sum of the elements<\/td>\n\t\t<\/tr>\n\t\t<tr class=\"odd\">\n\t\t\t<td>a.mean()<\/td>\n\t\t\t<td>Mean<\/td>\n\t\t<\/tr>\n\t\t<tr class=\"even\">\n\t\t\t<td>b.median()<\/td>\n\t\t\t<td>Median<\/td>\n\t\t<\/tr>\n\t\t<tr class=\"odd\">\n\t\t\t<td>a.corrcoef()<\/td>\n\t\t\t<td>Correlation coefficient<\/td>\n\t\t<\/tr>\n\t\t<tr class=\"even\">\n\t\t\t<td>np.std(b)<\/td>\n\t\t\t<td>Standard deviation<\/td>\n\t\t<\/tr>\n\t<\/tbody>","bf30b0df":"## Inspecting","abdd42bf":"Differencing is often a useful tool which can be part of time series algorithms. See for example how we can use smoothing and differencing to more clearly isolate the periodic signal:","25980a3e":".resample: Lower cadence dataset which then doesn\u2019t contain the high frequency noise","181d2621":"Rolling window calculations: calculations are performed over a rolling window of a given width about each datapoint","5d5451a7":"## Creating np arrays ","35f69229":"`keep`\n\n\n    \u2018first\u2019 : Drop duplicates except for the first occurrence.\n\n    \u2018last\u2019 : Drop duplicates except for the last occurrence.\n\n    False : Drop all duplicates.\n","df332b91":"\n* columns 1, 2, 3 giving the year, day of year (DOY), and hour of day of each measurement\n* column 40: the sunspot number (R) - the number of spots on the surface of the Sun, indicating how active it is\n* column 41: the Dst index - an hourly magnetic activity index measured at Earth\u2019s surface, in nT\n* column 51: the F10.7 index - the radio flux at 10.7cm (i.e. how bright the Sun is at that wavelength), in \u201csolar flux units\u201d (sfu)\n\nConditions on the Sun (R and Dst), and magnetic conditions at Earth (Dst)","99436361":"## Series","bebedd21":"Example of unpacking in Python","5c88b166":"start:end","baa17f1d":"```\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n```","0b1afca2":"```\n1963   1  0 1771 99 99 999 999 999.9 999.9 999.9 999.9 999.9 999.9 999.9 999.9 999.9 999.9 999.9 999.9 999.9 999.9 9999999. 999.9 9999. 999.9 999.9 9.999 99.99 9999999. 999.9 9999. 999.9 999.9 9.999 999.99 999.99 999.9  7  33    -6  119 999999.99 99999.99 99999.99 99999.99 99999.99 99999.99  0   3 999.9 999.9 99999 99999 99.9\n```","8937a9d7":"Tip: as a consequence of what you have just read, you understand now also that the general recommendation is that you use .loc to insert rows in your DataFrame. That is because if you would use df.ix[], you might try to reference a numerically valued index with the index value and accidentally overwrite an existing row of your DataFrame. You better avoid this!","09b65d2f":"## Row\/Column manipulation","b86a63c9":"`loc`: Access a group of rows and columns by label(s) or a boolean array.","209ea893":"![image.png](attachment:image.png)\nhttps:\/\/devhints.io\/datetime","f809ace2":"## Filtering","2c7ce3d0":"`at`:  Access a single value for a row\/column label pair.","48ed8739":"Empty np.arrays","12f4a875":"```\na[start:end] # items start through the end (but the end is not included!)\na[start:]    # items start through the rest of the array\na[:end]      # items from the beginning through the end (but the end is not included!)\n```","9372e6d9":"`%Y%j%H`\n\n`Y`: Year (2013)\n\n`j`: Day of Year (001..366)\n\n`H`: 24 hour","2734ceb7":"## Some Problems","68c22147":"# numpy\n\nhttps:\/\/www.datacamp.com\/community\/tutorials\/python-numpy-tutorial","b7b2626e":"##  Subset, Slice, And Index","4e22ade9":"Take the natural-logarithm of the 1st and 3rd element in the 3rd-row of x, producing a shape-(2,) result.","8e7dbc06":"## Creating DataFrames","b4e39b10":"## Operations","35783386":"With np.linspace() and np.arange() you can make arrays of evenly spaced values. The difference between these two functions is that the last value of the three that are passed in the code chunk above designates either the step value for np.linspace() or a number of samples for np.arange(). What happens in the first is that you want, for example, an array of 9 values that lie between 0 and 2. For the latter, you specify that you want an array to start at 10 and per steps of 5, generate values for the array that you\u2019re creating.","e5c440d6":"`iloc`: Purely integer-location based indexing for selection by position.","698a027d":"The axis argument is either 0 when it indicates rows and 1 when it is used to drop columns.","15f88c05":"Rolling calculations take the size of the window as the argument, whereas resampling takes a frequency specifier as the argument.","0f6e78a5":"# pandas\n\nhttps:\/\/www.datacamp.com\/community\/tutorials\/pandas-tutorial-dataframe-python"}}