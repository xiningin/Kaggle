{"cell_type":{"37252ef1":"code","da6ddf08":"code","e608279f":"code","dba2c6ef":"code","1a866c25":"code","d2c4a828":"code","501f6e94":"code","57de4b51":"code","b264e70a":"code","5780cd9a":"code","3bbae52e":"code","e0b281ac":"code","65f31091":"code","078b2da5":"code","e0d7e074":"code","27627c7e":"code","756b2b7f":"code","d9246505":"code","d1da9d1c":"code","c1b84c6a":"code","61df956d":"code","5987dc4f":"code","4aded865":"code","483db483":"code","8a8b356c":"code","8b851d8a":"code","9dc4f8aa":"code","98678737":"code","a03de34c":"code","9c358b7c":"code","b5e53c64":"code","30882777":"markdown","04006540":"markdown","b4c6cd5f":"markdown","fb4d00d9":"markdown","5b172e7f":"markdown","c61e9259":"markdown","32a45ee3":"markdown","4940c801":"markdown","190106da":"markdown","b5acfd79":"markdown","f01223e6":"markdown","f3dd7a80":"markdown"},"source":{"37252ef1":"# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","da6ddf08":"\n# Importing the dataset\ndataset = pd.read_csv(\"..\/input\/uber-ride-reviews\/Uber_Ride_Reviews.csv\")","e608279f":"#checking the dataset\ndataset.head(30) ","dba2c6ef":"#Checking the dimensions of dataset....\ndataset.shape","1a866c25":"#Checking the null values in the dataset\ndataset.isnull().sum()","d2c4a828":"#Counting all unique values of column \"sentiment\" from dataset \n\ndataset[\"sentiment\"].value_counts()\n","501f6e94":"#Counting all unique values of column \"ride_rating\" from dataset \n\ndataset[\"ride_rating\"].value_counts()\n","57de4b51":"#visualize the \"rating\" of each customer with the help of Bar plot \ndataset[\"ride_rating\"].value_counts().plot.bar(color='blue')\n","b264e70a":"#Bar plot for sentiment column\ndataset[\"sentiment\"].value_counts().plot.bar(color='Pink')\n","5780cd9a":"#ride_rating column is nomore required for my prediction....hence removed\ndataset = dataset.drop('ride_rating', 1)\ndataset\n","3bbae52e":"# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = [] #Creating an empty list\nfor i in range(0, 1000):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['ride_review'][i])#Remove all special character like('',:,;,%,*,@,$,!,#) \n    #Convert complete sentences into lowercase. \n    review = review.lower() \n    #Spliting each sentences into different words.\n    review = review.split()\n    #Stemming example is love-loving,loved,lovely.etc.\n    ps = PorterStemmer()\n    #Removing unnecessary words like is,of,for,this...and only focusing on main meaning of the sentence. \n    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\n    review = ' '.join(review)\n    corpus.append(review)\n","e0b281ac":"print(corpus)","65f31091":"print(review)","078b2da5":"# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features = 1344)\nX= cv.fit_transform(corpus).toarray()\nX = X.transpose()#Transposing here just to match the dimensionsns with y-target variable\n\ny = dataset.iloc[:, 1].values","e0d7e074":"print(X) #Separting every unique value and mapping it as 1 just like encode and decode..\n","27627c7e":"print(y) # liked or not!\n","756b2b7f":"X.shape","d9246505":"y.shape","d1da9d1c":"\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n\nimport re\nimport string\nimport nltk\n\ncleanup_re = re.compile('[^a-z]+')\ndef cleanup(sentence):\n    sentence = sentence.lower()\n    sentence = cleanup_re.sub(' ', sentence).strip()\n    #sentence = \" \".join(nltk.word_tokenize(sentence))\n    return sentence\n\ndataset[\"Reviews_Clean\"] = dataset[\"ride_review\"].apply(cleanup)","c1b84c6a":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib as mpl\nstopwords = set(STOPWORDS)\n\n\nmpl.rcParams['font.size']=12                #10 \nmpl.rcParams['savefig.dpi']=100             #72 \nmpl.rcParams['figure.subplot.bottom']=0.1 \n\n\n\ndef show_wordcloud(dataset, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=300,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n        \n    ).generate(str(dataset))\n    \n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\nshow_wordcloud(dataset[\"Reviews_Clean\"])","61df956d":"show_wordcloud(dataset[\"Reviews_Clean\"][dataset[\"sentiment\"] == 1] , title=\"Postive Words\")\n","5987dc4f":"show_wordcloud(dataset[\"Reviews_Clean\"][dataset[\"sentiment\"] == 0] , title=\"Negative Words\")","4aded865":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","483db483":"# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\n\n\n# Predicting the Test set results\npredict_gaussianNB = classifier.predict(X_test)\n\n\n\n\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, predict_gaussianNB)\nprint(cm)\n","8a8b356c":"from sklearn import metrics #for checking the model accuracy\nprint('The accuracy of the Naive bayes is:',metrics.accuracy_score(y_test,predict_gaussianNB))\n","8b851d8a":"# Fitting Logistic Regression to the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\nPredict_Logistic = classifier.predict(X_test)\n\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, Predict_Logistic)\nprint(cm)\n\n","9dc4f8aa":"\nfrom sklearn import metrics #for checking the model accuracy\nprint('The accuracy of the Logistic_regression is:',metrics.accuracy_score(y_test,Predict_Logistic))","98678737":"# Fitting Decision Tree Regression to the dataset\nfrom sklearn.tree import DecisionTreeClassifier\nclr = DecisionTreeClassifier(random_state = 0)\nclr.fit(X_train, y_train)\n\npredict_Decisiontree = clr.predict(X_test)\n\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, predict_Decisiontree)\nprint(cm)\n","a03de34c":"\nfrom sklearn import metrics #for checking the model accuracy\nprint('The accuracy of the Decisiontree is:',metrics.accuracy_score(y_test,predict_Decisiontree))","9c358b7c":"# Fitting Random Forest Classification to the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n\n\n# Predicting the Test set results\npredict_randomforest = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, predict_randomforest)\nprint(cm)\n","b5e53c64":"\nfrom sklearn import metrics #for checking the model accuracy\nprint('The accuracy of the Random forest is:',metrics.accuracy_score(y_test,predict_randomforest))","30882777":"# 1.Data preprocessing-----","04006540":"# 3.Splitting the dataset and building a model----","b4c6cd5f":"**||UBER RIDE||**\n\n\n![](https:\/\/image.slidesharecdn.com\/newmicrosoftofficepowerpointpresentation-170207062412\/95\/about-uber-3-638.jpg?cb=1515795896)              \n\n","fb4d00d9":"# ||Making predictions over Uber ride reviews||","5b172e7f":"# ||Exercise||\n","c61e9259":"Hello everyone! \n\nThanks for taking your time and visiting my project....\n\nPlease **vote up** if you like it...\n\nIf any doubt please feel free to comment i try to clear your doubts....\n\nHappy kaggling!!!","32a45ee3":"# ||Goal||--\n      \n      \n  The analysis is to study Uber ride review from customers, and try to predict whether a review is positive or negative. ","4940c801":"**Please voteup if you like it.**","190106da":"**||About the dataset||**\n\nIt contains uber ride **reviews** from 2014-2017. Also, we have columns like **\"Ride Sentiment\"** and **\"Ride rating\"**.If the rating is **above 3** I have treated it as a positive sentiment(1), otherwise it's a negative sentiment(0).","b5acfd79":"The accuracy of the **Naive bayes** is: 0.32342007434944237\n\n\nThe accuracy of the **Logistic_regression** is: 0.7732342007434945\n\n\nThe accuracy of the **Decisiontree** is: 0.7286245353159851\n\n\nThe accuracy of the **Random forest** is: 0.8438661710037175\n\n\n\n\n\n\n\n\n\n\n\n","f01223e6":"# 2.Extracting features from text data----\n","f3dd7a80":"# From above model we got accuracy of maximum 85%"}}