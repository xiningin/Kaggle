{"cell_type":{"40b372b5":"code","1842cccc":"code","3aad11af":"code","70b1f797":"code","5ecc2ee4":"code","5bd191d3":"code","c92c6c45":"code","203ab1e6":"code","e5f6dd11":"code","ff30e29a":"code","03b0123f":"code","805abbd2":"code","a84489bc":"code","c6aadc0a":"code","56523ffd":"code","ab874528":"code","be4eec52":"code","73f863ec":"code","c0826ffc":"code","8cd4e832":"code","a8782fd7":"code","3892e394":"code","cd7e35bd":"code","d3290f24":"code","7e037261":"code","362c4d56":"code","528247a5":"code","2590a047":"code","910647ae":"code","2071a969":"code","632c66a3":"code","11ac7de7":"code","f865c75f":"code","9c94d620":"code","7b8f416d":"code","a29c2ac3":"code","873b5bbc":"code","35b01018":"code","6010c268":"code","1d94e8bb":"code","b2c816b3":"code","47aadc6c":"code","58d8446f":"code","5683b06e":"code","de589885":"code","5d271724":"code","daf39a94":"code","33d48ad6":"code","57e1640c":"code","6c753138":"markdown","1630d106":"markdown","21a4c2e3":"markdown","20dba931":"markdown","a53c37f1":"markdown","73aaf91d":"markdown","7f3b024d":"markdown","57d98cd5":"markdown","e861f978":"markdown","2b0a840d":"markdown","05597dbd":"markdown","9dd6d3e0":"markdown","5a044d89":"markdown","e161cd3b":"markdown","d1d935d4":"markdown","e8f1ca61":"markdown","ceff0da9":"markdown","cc8f9969":"markdown","fdc7afa3":"markdown","d6eef34d":"markdown","bb7dc36b":"markdown","9ea42fb3":"markdown","aa8d5d41":"markdown","356a3652":"markdown","5a36cf24":"markdown","0e3d8ad0":"markdown","b4f2092d":"markdown","00579458":"markdown"},"source":{"40b372b5":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nfrom colorama import Fore, Back, Style\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport lightgbm\nfrom mlxtend.plotting import plot_confusion_matrix\nimport xgboost\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom statsmodels.formula.api import ols\n\ninit_notebook_mode(connected=True)\nwarnings.filterwarnings(\"ignore\")\nimport plotly.figure_factory as ff\n\n%matplotlib inline","1842cccc":"data = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndata.head()","3aad11af":"data.info()","70b1f797":"data['sex'] = data['sex'].astype('category')\ndata['diabetes'] = data['diabetes'].astype('category')\ndata['anaemia'] = data['anaemia'].astype('category')\ndata['high_blood_pressure'] = data['high_blood_pressure'].astype('category')\ndata['smoking'] = data['smoking'].astype('category')\ndata['DEATH_EVENT'] = data['DEATH_EVENT'].astype('category')","5ecc2ee4":"data.info()","5bd191d3":"data['age'].describe()","c92c6c45":"data['age'] = data['age'].astype('int64')","203ab1e6":"hist_data = [data['age'].values]\ngroup_labels = ['age']\n\nfig = ff.create_distplot(hist_data, group_labels)\nfig.update_layout(title_text='Age Distribution')\nfig.show()","e5f6dd11":"fig = px.box(data, x='sex', y='age', points='all',)\nfig.update_layout(\n    title='Gender-wise Age Distribution',\n    xaxis=dict(\n    tickmode = 'array',\n    tickvals = [1,0],\n    ticktext = ['Male', 'Female']))\nfig.show()","ff30e29a":"sns.set_style(\"ticks\")\ng = sns.catplot(x='sex', y='age', data=data, kind='boxen')\ng.set_xticklabels(['Female', 'Male'])\n#plt.show(ax, dpi = 200)","03b0123f":"male = data[data['sex'] == 1]\nfemale = data[data['sex'] == 0]\n\nmale_alive = male[male['DEATH_EVENT'] == 0]\nmale_dead = male[male['DEATH_EVENT'] == 1]\nfemale_alive = female[female['DEATH_EVENT'] == 0]\nfemale_dead = female[female['DEATH_EVENT'] == 1]\n\nlabels = ['Male - Survived', 'Male - Didn\\'t survive', 'Female - Survived', 'Female - Didn\\'t survive']\nvalues = [len(male_alive), len(male_dead), len(female_alive), len(female_dead)]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.2)])\nfig.update_layout(title=\"Gender-wise Survival Chart\")\nfig.show()","805abbd2":"f, ax = plt.subplots(dpi=200)\nax = plt.pie(values, labels=labels, autopct='%1.1f%%', shadow=True)\nplt.title(\"Gender-wise Survival Chart\")\nplt.show()","a84489bc":"surv = pd.concat([male_alive, female_alive])\nsurv = surv['age']\ndead = pd.concat([male_dead, female_dead])\ndead = dead['age']\n\nhist_data = [surv, dead]\ngroup_labels = ['Survived', 'Didn\\'t Survive']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(title_text='Age-wise Survival state')\nfig.show()","c6aadc0a":"f, ax = plt.subplots(dpi=200)\nax = sns.countplot('age', data=data, hue='DEATH_EVENT')\nplt.xticks(rotation=90)","56523ffd":"fig = px.violin(data, y='age', x='sex', color='DEATH_EVENT', box=True, points=\"all\", hover_data=data.columns)\nfig.update_layout(title_text=\"Gender vs Age on survival status\")","ab874528":"#f, ax = plt.subplots(dpi=200)\ng = sns.catplot(x='sex', y='age', data=data, kind='violin', hue='DEATH_EVENT')\ng.set_xticklabels(['Survived', 'Didn\\'t Survive'])\n#g.set_title(\"Sex vs Age Survival Status\")\n","be4eec52":"fig = px.violin(data, y='age', x='smoking', color='DEATH_EVENT', box=True, points=\"all\", hover_data=data.columns)\nfig.update_layout(title_text = 'Analysis in Age, Smoking and Survival status')\nfig.show()","73f863ec":"fig = px.box(data, y='age', x='diabetes', color='DEATH_EVENT', \n             notched=True, points='all', hover_data=data.columns, \n             title='Analysis in Age, Diabetes and Survival Status')\nfig.show()","c0826ffc":"fig = px.histogram(data, x='creatinine_phosphokinase',\n                  color='DEATH_EVENT', marginal='violin',\n                  hover_data=data.columns,\n                  title='Histogram for creatinine phosphokinase')\nfig.show()","8cd4e832":"fig = px.histogram(data, x='ejection_fraction', color='DEATH_EVENT',\n                  marginal='violin', hover_data=data.columns,\n                  title='Histogram for Ejection Fraction')\nfig.show()\n","a8782fd7":"fig = px.histogram(data, x='platelets', color='DEATH_EVENT',\n                  marginal='violin', hover_data=data.columns,\n                  title='Histogram for Platelets',\n                  color_discrete_sequence=px.colors.sequential.Plasma)\nfig.show()","3892e394":"fig = px.histogram(data, x='serum_creatinine', color='DEATH_EVENT',\n                  marginal='violin', hover_data=data.columns,\n                  title='Histogram for Serum Creatinine',\n                  color_discrete_sequence=px.colors.diverging.PuOr)\nfig.show()","cd7e35bd":"fig = px.histogram(data, x='serum_sodium', color='DEATH_EVENT',\n                  marginal='violin', hover_data=data.columns,\n                  title='Histogram for Serum Sodium')\nfig.show()","d3290f24":"data = data.rename(columns={'DEATH_EVENT':'death'})","7e037261":"surv = data[data['death'] == 0]['serum_sodium']\ndead = data[data['death'] == 1]['serum_sodium']\nhist_data=[surv,dead]\nlabels = ['Survived', 'Didn\\'t survive']\n\nfig = ff.create_distplot(hist_data, labels, bin_size=0.5)\nfig.update_layout(title_text='Serum Sodium vs Survival Status Analysis')\nfig.show()","362c4d56":"surv = data[data['death'] == 0]['serum_creatinine']\ndead = data[data['death'] == 1]['serum_creatinine']\n\nhist_data = [surv, dead]\nlabels = ['Survived', 'Didn\\'t survive']\n\nfig = ff.create_distplot(hist_data, labels, bin_size=0.5)\nfig.update_layout(\n    title_text='Serum Creatinine vs Survival Status Analysis')\nfig.show()","528247a5":"surv = data[data['death'] == 0]['ejection_fraction']\ndead = data[data['death'] == 1]['ejection_fraction']\n\nhist_data = [surv, dead]\nlabels = ['Survived', 'Didn\\'t survive']\n\nfig = ff.create_distplot(hist_data, labels, bin_size=0.5)\nfig.update_layout(\n    title_text='Ejection Fraction vs Survival Status Analysis')\nfig.show()","2590a047":"fig = px.pie(data, values='diabetes', names='death', \n             title='Diabetes x Death Chart')\nfig.show()","910647ae":"dpos = data[data['diabetes'] == 1]\ndneg = data[data['diabetes'] == 0]\n\nlabels = ['Positive Diabetes, Survived', 'Positive Diabetes, Didn\\'t Survive',\n         'Negative Diabetes, Survived', 'Negative Diabetes, Didn\\'t Survive']\ndposdneg = dpos[dpos['death'] == 0]\ndposdpos = dpos[dpos['death'] == 1]\ndnegdneg = dneg[dneg['death'] == 0]\ndnegdpos = dneg[dneg['death'] == 1]\n\nvalues = [len(dposdneg),\n         len(dposdpos),\n         len(dnegdneg),\n         len(dnegdpos)]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.3)])\nfig.update_layout(title_text='Survival x Diabetes Chart')\nfig.show()","2071a969":"fig = px.pie(data, values='anaemia', names='death',\n            title='Anaemia x Death Chart')\nfig.show()","632c66a3":"data.anaemia.describe()","11ac7de7":"apos = data[data['anaemia'] == 1]\naneg = data[data['anaemia'] == 0]\n\naposdneg = apos[apos['death'] == 0]\naposdpos = apos[apos['death'] == 1]\nanegdneg = aneg[aneg['death'] == 0]\nanegdpos = aneg[aneg['death'] == 1]\n\nlabels = ['Positive Anaemia, Survived', 'Positive Anaemia, Didn\\'t Survive',\n         'Negative Anaemia, Survived', 'Negative Anaemia, Didn\\'t Survive'] \n\nvalues = [len(aposdneg), len(aposdpos), len(anegdneg), len(anegdpos)]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.3)])\nfig.update_layout(\n    title_text='Survival x Anaemia Analysis'\n)\nfig.show()","f865c75f":"fig = px.pie(data, values='smoking', names='death',\n            title='Smoking x Death Chart')\nfig.show()","9c94d620":"apos = data[data['smoking'] == 1]\naneg = data[data['smoking'] == 0]\n\naposdneg = apos[apos['death'] == 0]\naposdpos = apos[apos['death'] == 1]\nanegdneg = aneg[aneg['death'] == 0]\nanegdpos = aneg[aneg['death'] == 1]\n\nlabels = ['Smoked, Survived', 'Smoked, Didn\\'t Survive',\n         'Didn\\'t Smoke, Survived', 'Didn\\'t Smoke, Didn\\'t Survive'] \n\nvalues = [len(aposdneg), len(aposdpos), len(anegdneg), len(anegdpos)]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.3)])\nfig.update_layout(\n    title_text='Survival x Smoking Analysis'\n)\nfig.show()","7b8f416d":"fig = px.pie(data, values='high_blood_pressure', names='death',\n            title='High Blood Pressure x Death Chart')\nfig.show()","a29c2ac3":"apos = data[data['high_blood_pressure'] == 1]\naneg = data[data['high_blood_pressure'] == 0]\n\naposdneg = apos[apos['death'] == 0]\naposdpos = apos[apos['death'] == 1]\nanegdneg = aneg[aneg['death'] == 0]\nanegdpos = aneg[aneg['death'] == 1]\n\nlabels = ['HBP, Survived', 'HBP, Didn\\'t Survive',\n         'Not HBP, Survived', 'Not HBP, Didn\\'t Survive'] \n\nvalues = [len(aposdneg), len(aposdpos), len(anegdneg), len(anegdpos)]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.3)])\nfig.update_layout(\n    title_text='Survival x High Blood Pressure Analysis'\n)\nfig.show()","873b5bbc":"plt.figure(dpi=200)\nsns.heatmap(data.corr(), vmin=-1, cmap=sns.color_palette(\"plasma_r\"), annot=True)","35b01018":"#choice = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium']\nindex_vals = data['death'].cat.codes\n\n\nfig = go.Figure(data=go.Splom(\n    dimensions=[\n        dict(label='Age', values=data['age']),\n        dict(label='Creatinine Phosphokinase', values=data['creatinine_phosphokinase']),\n        dict(label='Ejection Fration', values=data['ejection_fraction']),\n        dict(label='Platelets', values=data['platelets']),\n        dict(label='Serum Creatinine', values=data['serum_creatinine']),\n        dict(label='Serum Sodium', values=data['serum_sodium'])    \n    ],\n    text=data['death']\n))\n\nfig.update_layout(\n    title='Heart Failure Data set',\n    dragmode='select',\n    width=1000,\n    height=1000,\n    hovermode='closest',\n)\n\nfig.show()\n","6010c268":"data.info()","1d94e8bb":"features = ['diabetes', 'ejection_fraction', 'high_blood_pressure',\n           'serum_creatinine', 'age', 'time']\n\nfeatures = ['time', 'age', 'ejection_fraction', 'serum_creatinine', 'platelets']\n\nX = data[features]\ny = data.death","b2c816b3":"X_train, X_test, y_train, y_test = train_test_split(X,y, \n                                                    test_size=0.2,\n                                                   random_state=2698)","47aadc6c":"clf = RandomForestClassifier(max_features=2, max_depth=15,\n                            random_state=1)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint(\"Accuracy of RandomForestClassifier is : \",\n     clf.score(X_test, y_test))","58d8446f":"cm = confusion_matrix(y_test, y_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(10,6), hide_ticks=True,\n                     cmap = plt.cm.Blues)\nplt.title(\"Random Forest Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart didn\\'t fail\", \"Heart failed\"],\n          fontsize=16)\nplt.yticks(range(2), [\"Heart didn\\'t fail\", \"Heart failed\"],\n          fontsize=16)\nplt.show()","5683b06e":"gradientboost_clf = GradientBoostingClassifier(max_depth=2,\n                                              random_state=4)\ngradientboost_clf.fit(X_train, y_train)\ngradientboost_pred = gradientboost_clf.predict(X_test)\n\nprint(\"Accuracy of Gradient Boosting is : \",\n     gradientboost_clf.score(X_test, y_test))","de589885":"cm = confusion_matrix(y_test, gradientboost_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(10,6), hide_ticks=True,\n                    cmap=plt.cm.Blues)\nplt.title(\"Gradient Boost Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","5d271724":"xgb_clf = xgboost.XGBRFClassifier(max_depth=3, random_state=0)\nxgb_clf.fit(X_train, y_train)\nxgb_pred = xgb_clf.predict(X_test)\n\nprint(\"Accuracy of XGBRFClassifier is : \", xgb_clf.score(X_test,\n                                                        y_test))","daf39a94":"cm = confusion_matrix(y_test, xgb_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(10,6), hide_ticks=True,\n                     cmap=plt.cm.Blues)\nplt.title(\"XGBRFClassifier Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","33d48ad6":"lgb_clf = lightgbm.LGBMClassifier(max_depth=2, random_state=1)\nlgb_clf.fit(X_train, y_train)\nlgb_pred = lgb_clf.predict(X_test)\n\nprint(\"Accuracy of LGBMClassifier is : \", \n     lgb_clf.score(X_test, y_test))","57e1640c":"cm = confusion_matrix(y_test, lgb_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(10,6), hide_ticks=True,\n                     cmap=plt.cm.Blues)\nplt.title(\"LGBMClassifier Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","6c753138":"### :) ","1630d106":"Is Age and Sex an indicator for Death Event?","21a4c2e3":"<ol type='i'>\n    <li>Random Forest Classifier : 95%<\/li>\n    <li>Gradient Boosting Classifier : 95%<\/li>\n    <li>Extreme Gradient Boosting RFClassifier : 93.33%<\/li>\n    <li>Light Gradient Boosting Manner Classifier : 93.33%<\/li>\n<\/ol>","20dba931":"## We will predict heart failure rate using clustering and other various methods","a53c37f1":"confirming the changes......","73aaf91d":"## Thank you!\n### Suggestions are welcomed. ","7f3b024d":"# Heart Failure Prediction ","57d98cd5":"We can further convert int64 to int32, int16 or even int8. But we have enough resources to overlook that. If the dataset was bigger, we would have considered doing so.","e861f978":"Importing the csv file","2b0a840d":"We can see that from sub-40 to sub-70, there are huge number of people. ","05597dbd":"At the initial stage, it was 30KB. Now, it came down to 18KB. So just by making necessary changes, we reduced the usage by 40%.","9dd6d3e0":"## Random Forest Classifier","5a044d89":"HEATMAP","e161cd3b":"##### Traint Test Split","d1d935d4":"## GradientBoostingClassifier","e8f1ca61":"Evidently there are outliers in Male as well as Female. We will remove them if we find the need to in the future.","ceff0da9":"## LGBMClassifier ","cc8f9969":"Now, we continue with our work.","fdc7afa3":"We can see the changes that were reflected in the Dtype as well as the memory usage by the dataframe","d6eef34d":"## Let's do some data modelling ","bb7dc36b":"Importing necessary libraries","9ea42fb3":"We can further investigate the data to optimize the data more.","aa8d5d41":"Checking general information of the dataset","356a3652":"We noticed that many of the columns have binary values(1 or 0). They can be treated as category.","5a36cf24":"## XGBRFClassifier","0e3d8ad0":"The age need not to be a float-point number. We can treat it as an integer.","b4f2092d":"### This notebook is made with the help of another Kaggle notebook submitted under the same task. The link to that notebook is :  https:\/\/www.kaggle.com\/nayansakhiya\/heart-fail-analysis-and-quick-prediction-96-rate","00579458":"##  Results"}}