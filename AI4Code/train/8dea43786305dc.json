{"cell_type":{"d06dd5b9":"code","87a0502c":"code","a7132ac3":"code","5f8aa26c":"code","4baef1e0":"code","866c9708":"code","8ae0d603":"code","c16a0260":"code","8625a5c0":"code","e5c54c2f":"code","49a96295":"code","78ea3f86":"markdown","69887c2d":"markdown","1261bd0a":"markdown"},"source":{"d06dd5b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport random\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nfrom sklearn.metrics import classification_report\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import preprocessing\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","87a0502c":"SEED = 2019\nrandom.seed(SEED)\nnp.random.seed(SEED)","a7132ac3":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')","5f8aa26c":"df.head()","4baef1e0":"df['SARS-Cov-2 exam result'] = [0 if a == 'negative' else 1 for a in df['SARS-Cov-2 exam result'].values]\n\nY = df['SARS-Cov-2 exam result']\n\ndf = df.drop([\n    \"SARS-Cov-2 exam result\",\n    \"Patient ID\",\n    'Patient addmited to regular ward (1=yes, 0=no)',\n    'Patient addmited to semi-intensive unit (1=yes, 0=no)',\n    'Patient addmited to intensive care unit (1=yes, 0=no)'\n], axis=1)","866c9708":"df = df.fillna(df.mean())","8ae0d603":"# Fill NaNs with -10\ndf = df.fillna(-10, axis=1)","c16a0260":"categorical_features = [key for key in dict(df.dtypes) if dict(df.dtypes)[key] in ['object'] ]","8625a5c0":"X = pd.get_dummies(df, prefix=categorical_features, columns=categorical_features)","e5c54c2f":"clf = RandomForestClassifier(max_depth=50, random_state=0,n_estimators=1000)\nK = 10\nfolds = KFold(K, shuffle = True, random_state = SEED)\n\nfor fold , (train_index,test_index) in enumerate(folds.split(X, Y)):\n    print('Fold:',fold+1)\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n    \n    \n    clf.fit(X_train,y_train)\n\n    \n    pred_y = clf.predict(X_test)\n   \n    \n    print(classification_report(y_test,pred_y))","49a96295":"#Acurracy 0.90 but recall for the class \"positive\" close to zero or zero","78ea3f86":"# **Data Loading and Preprocessing**","69887c2d":"clf = RandomForestClassifier(max_depth=50, random_state=0,n_estimators=1000)","1261bd0a":"# RandomForestClassifier"}}