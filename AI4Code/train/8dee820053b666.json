{"cell_type":{"320b960e":"code","f1bb8cec":"code","ccf84771":"code","49f12fb8":"code","43b7accb":"code","521236e9":"code","a19312aa":"code","67ff8151":"code","3f15869a":"code","2fb58c05":"code","121d777a":"code","e4cff00c":"code","55493a53":"code","6b46a416":"code","e024f161":"code","ce1ec4d9":"code","fa9faae1":"code","c9b4470c":"code","2e926555":"code","ef7ea536":"code","4cbe0f33":"code","a378b5b2":"code","c5fe7872":"code","74f23d9a":"code","0ca62e93":"code","cb98d250":"code","776291d3":"markdown","712d468f":"markdown","9b5d792e":"markdown","c3f1a86f":"markdown","d7388f56":"markdown","fe9a3e33":"markdown","bd3ddcc5":"markdown","c6dea22f":"markdown","2519a0eb":"markdown","37693d1b":"markdown","e6be5787":"markdown","ea0c04d7":"markdown","4a975f27":"markdown","64e96919":"markdown","032cd2af":"markdown"},"source":{"320b960e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1bb8cec":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_data.head()","ccf84771":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_data.head()","49f12fb8":"complete_data=pd.concat(objs=[train_data, test_data], axis=0).reset_index(drop=True)\nsns.pairplot(complete_data)\nplt.show()","43b7accb":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(complete_data['Pclass'],complete_data['Fare'],hue=complete_data['Sex'],split=True,ax=ax[0])\n\nsns.violinplot(complete_data['Pclass'],complete_data['Age'],hue=complete_data['Sex'],split=True,ax=ax[1])\nplt.show()","521236e9":"# Some plots using the train_data\nf,ax=plt.subplots(1,2,figsize=(18,8))\nsns.countplot('Pclass',hue='Sex',data=complete_data,ax=ax[0])\nax[0].set_xlabel('Passenger Class')\nax[0].set_title('Passenger Distribution')\nax[0].legend(loc=2)\n\nsns.countplot('Embarked',hue='Sex',data=complete_data,ax=ax[1])\nax[1].set_xlabel('Embarked Port')\nax[1].set_title('Passenger Distribution')\n\nplt.show()","a19312aa":"plt.figure(figsize=(8,8))\n#sns.lmplot(x='Pclass',y ='Fare',data=complete_data)\nsns.scatterplot(complete_data['Pclass'],complete_data['Fare'],hue=complete_data['Sex'])\nplt.show()","67ff8151":"plt.figure(figsize=(8,8))\nsns.heatmap(complete_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","3f15869a":"complete_data[complete_data['Cabin'].isnull()]","2fb58c05":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint('During the sinking of the Titanic '+str(round(rate_women*100,2))+'% of women survived while '+str(round(rate_men*100,2))+'% of men survived')","121d777a":"# Survival Plot\ngrp_name=['Died','Survived']\nf,ax=plt.subplots(1,2,figsize=(18,8)) # 1 row , 2 columns subplots\n\nwomen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',labels=None,ax=ax[0],shadow=True)\nax[0].set_title('Women Survival rate') \nax[0].set_ylabel('')\nax[0].legend(labels=grp_name,loc=\"best\")\n\nmen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[1],labels=None,shadow=True)\nax[1].set_title('Men Survival rate') \nax[1].set_ylabel('')\nax[1].legend(labels=grp_name,loc=\"best\")\nplt.show()","e4cff00c":"grp_name=['Died','Survived']\n\nf,ax=plt.subplots(1,3,figsize=(25,10))\nsns.countplot('Embarked',hue='Survived',data=train_data,ax=ax[0])\nax[0].set_xlabel('Embarked Port')\nax[0].set_title('Passenger Distribution')\nax[0].legend(labels=grp_name,loc=\"best\")\n\nsns.countplot('Sex',hue='Survived',data=train_data,ax=ax[1])\nax[1].set_title('Passenger Distribution')\nax[1].legend(labels=grp_name,loc=\"best\")\n\nsns.countplot('Pclass',hue='Survived',data=train_data,ax=ax[2])\nax[2].set_title('Passenger Distribution')\nax[2].legend(labels=grp_name,loc=\"best\")\n\nplt.show()","55493a53":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\noutput = pd.DataFrame(test_data)\noutput['Survived']= predictions\n\noutput_csv = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n\noutput.head()\n\n# Comand to submit the results\noutput_csv.to_csv('submission-tutorial.csv', index=False)\nprint(\"Your submission was successfully saved!\")","6b46a416":"grp_name=['Died','Survived']\nf,ax=plt.subplots(1,2,figsize=(18,8))\n\nsns.countplot('Embarked',hue='Survived',data=output,ax=ax[0])\nax[0].set_xlabel('Embarked Port')\nax[0].set_title('Model Survival Prediction')\nax[0].legend(labels=grp_name,loc=\"best\")\n\nsns.countplot('Sex',hue='Survived',data=output,ax=ax[1])\nax[1].set_title('Model Survival Prediction')\nax[1].legend(labels=grp_name,loc=\"best\")\n\nplt.show()","e024f161":"women = output.loc[output.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nmen = output.loc[output.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\n# Survival Plot\ngrp_name=['Died','Survived']\nf,ax=plt.subplots(1,2,figsize=(18,8)) # 1 row , 2 columns subplots\n\nwomen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',labels=None,ax=ax[0],shadow=True)\nax[0].set_title('Women Survival rate') \nax[0].set_ylabel('')\nax[0].legend(labels=grp_name,loc=\"best\")\n\nmen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[1],labels=None,shadow=True)\nax[1].set_title('Men Survival rate') \nax[1].set_ylabel('')\nax[1].legend(labels=grp_name,loc=\"best\")\nplt.show()","ce1ec4d9":"#Using the mean age of different passenger class to fill in the age gaps\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","fa9faae1":"train_data['Age'] = train_data[['Age','Pclass']].apply(impute_age,axis=1)\ntest_data['Age'] = test_data[['Age','Pclass']].apply(impute_age,axis=1)","c9b4470c":"y = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\",\"Age\",\"Sex\",\"SibSp\",\"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\noutput = pd.DataFrame(test_data)\noutput['Survived']= predictions\n\noutput_csv = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n\noutput.head()\n\n# Comand to submit the results\noutput_csv.to_csv('submission-age.csv', index=False)\nprint(\"Your submission was successfully saved!\")","2e926555":"women = output.loc[output.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nmen = output.loc[output.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\n# Survival Plot\ngrp_name=['Died','Survived']\nf,ax=plt.subplots(1,2,figsize=(18,8)) # 1 row , 2 columns subplots\n\nwomen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',labels=None,ax=ax[0],shadow=True)\nax[0].set_title('Women Survival rate') \nax[0].set_ylabel('')\nax[0].legend(labels=grp_name,loc=\"best\")\n\nmen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[1],labels=None,shadow=True)\nax[1].set_title('Men Survival rate') \nax[1].set_ylabel('')\nax[1].legend(labels=grp_name,loc=\"best\")\nplt.show()","ef7ea536":"from sklearn.linear_model import LogisticRegression\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\",\"Age\",\"Sex\",\"SibSp\",\"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nlogmodel = LogisticRegression()\nlogmodel.fit(X,y)\npredictions = logmodel.predict(X_test)\noutput = pd.DataFrame(test_data)\noutput['Survived']= predictions\n\noutput_csv = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n\noutput.head()\n\n# Comand to submit the results\noutput_csv.to_csv('submission-LogR.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4cbe0f33":"women = output.loc[output.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nmen = output.loc[output.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\n# Survival Plot\ngrp_name=['Died','Survived']\nf,ax=plt.subplots(1,2,figsize=(18,8)) # 1 row , 2 columns subplots\n\nwomen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',labels=None,ax=ax[0],shadow=True)\nax[0].set_title('Women Survival rate') \nax[0].set_ylabel('')\nax[0].legend(labels=grp_name,loc=\"best\")\n\nmen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[1],labels=None,shadow=True)\nax[1].set_title('Men Survival rate') \nax[1].set_ylabel('')\nax[1].legend(labels=grp_name,loc=\"best\")\nplt.show()","a378b5b2":"# Changing for the train data\ntrain_1=train_data.drop(['Cabin'],axis=1)\ntrain_1.dropna(inplace=True)\nfeatures=['PassengerId','Pclass','Age','SibSp','Parch','Fare','Survived']\nsex = pd.get_dummies(train_1['Sex'],drop_first=True)\nembark = pd.get_dummies(train_1['Embarked'].dropna(),drop_first=True)\ntrain = pd.concat([train_1[features],sex,embark],axis=1)\ntrain.head()","c5fe7872":"# Changing for the test data\ntest_1=test_data.drop(['Cabin'],axis=1)\ntest_1.dropna(inplace=True)\nfeatures=['PassengerId','Pclass','Age','SibSp','Parch','Fare']\nsex = pd.get_dummies(test_1['Sex'],drop_first=True)\nembark = pd.get_dummies(test_1['Embarked'].dropna(),drop_first=True)\ntest = pd.concat([test_1[features],sex,embark],axis=1)\ntest.head()","74f23d9a":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis',ax=ax[0])\nax[0].set_title('Null values in train data') \n\nsns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis',ax=ax[1])\nax[1].set_title('Null values in test data')\n\nplt.show()","0ca62e93":"features=['Pclass','Age','SibSp','Parch','Fare','male','Q','S']\ny = train['Survived']\nX = train[features]\n\nX_test = test[features]\n\nlogmodel = LogisticRegression(max_iter=1000)\nlogmodel.fit(X,y)\npredictions = logmodel.predict(X_test)\noutput = pd.DataFrame(test)\noutput['Survived']= predictions\n\noutput_csv = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\n\n# Comand to submit the results\noutput_csv.to_csv('submission-LogR2.csv', index=False)\nprint(\"Your submission was successfully saved!\")","cb98d250":"#output.head()\n\nwomen = output.loc[output.male == 0][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nmen = output.loc[output.male == 1][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\n# Survival Plot\ngrp_name=['Died','Survived']\nf,ax=plt.subplots(1,2,figsize=(18,8)) # 1 row , 2 columns subplots\n\nwomen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',labels=None,ax=ax[0],shadow=True)\nax[0].set_title('Women Survival rate') \nax[0].set_ylabel('')\nax[0].legend(labels=grp_name,loc=\"best\")\n\nmen.value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[1],labels=None,shadow=True)\nax[1].set_title('Men Survival rate') \nax[1].set_ylabel('')\nax[1].legend(labels=grp_name,loc=\"best\")\nplt.show()","776291d3":"# **Back to using only train_data**","712d468f":"# **Adding Age to the model** \n\nTo make the model more accurate age could be taken into condisderation. But age as nan values. To fill in these gaps a simple look at the mean age of the Passenger class population can be used","9b5d792e":"Clearly the model is overestimating the predicitons","c3f1a86f":"**A bit better**","d7388f56":"# **Repeating the linear regression test now with age as a feature**","fe9a3e33":"**Second we look at fare and age distributions across the different class**","bd3ddcc5":"**Next we look at the passenger distribution across different class and embarkment ports**","c6dea22f":"**We can check if the data has any null values**","2519a0eb":"# **Creating the first model**","37693d1b":"# **Reading in the test and train data**","e6be5787":"# **Using both the test_data and train_data to gather some information**\n\n**First we look at pairplots**","ea0c04d7":"# **This is the \"Getting started with Titanic\" competition used to learn more about machine learning and to test different ideas.**","4a975f27":"**A few things to note here**\n* The null values is survived are the ones we want to predict\n* The missing ages are a tricky problem but can be tackled\n* The missing cabins might seem like the problem put my guess is that they are just associated with passengers in 3rd class who did not get private cabins","64e96919":"# **Lets try Logistic Regression**","032cd2af":"## **Converting Categorical Features**"}}