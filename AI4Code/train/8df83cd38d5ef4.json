{"cell_type":{"6bbda77b":"code","20fb34c3":"code","5f9dd044":"code","bc809d6e":"code","1b6a3e63":"code","352d2518":"code","f445facf":"code","9211e9f8":"code","bb781515":"code","a926c1e5":"code","8a871099":"code","2958ea9f":"markdown","7be9ac7c":"markdown","c16b2b57":"markdown","28c9247f":"markdown","387c2e37":"markdown","3c77d56f":"markdown","d92b5ba7":"markdown","d9e7064f":"markdown","3e462954":"markdown","1bc01d30":"markdown","b16f7e74":"markdown"},"source":{"6bbda77b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, cohen_kappa_score, average_precision_score\nfrom scipy import stats\n\nimport warnings\nfrom sklearn.exceptions import DataConversionWarning\nwarnings.filterwarnings(action='ignore', category=DataConversionWarning)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","20fb34c3":"df_train = '\/kaggle\/input\/liverpool-ion-switching\/train.csv'\ndf_test = '\/kaggle\/input\/liverpool-ion-switching\/test.csv'\ndf_sample_submission = '\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv'\n\n# Create dataframes\nprint(f'Reading csv from {df_train}...')\ntrain = pd.read_csv(df_train)\nprint('...Complete')\n\n# Create dataframes\nprint(f'Reading csv from {df_test}...')\ntest = pd.read_csv(df_test)\nprint('...Complete')\n\n# Create dataframes\nprint(f'Reading csv from {df_sample_submission}...')\nsample_submission = pd.read_csv(df_sample_submission)\nprint('...Complete')","5f9dd044":"def qwk(a1, a2):\n    \"\"\"\n    Source: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114133#latest-660168\n\n    :param a1:\n    :param a2:\n    :param max_rat:\n    :return:\n    \"\"\"\n    max_rat = 10\n    a1 = np.asarray(a1, dtype=int)\n    a2 = np.asarray(a2, dtype=int)\n\n    hist1 = np.zeros((max_rat + 1, ))\n    hist2 = np.zeros((max_rat + 1, ))\n\n    o = 0\n    for k in range(a1.shape[0]):\n        i, j = a1[k], a2[k]\n        hist1[i] += 1\n        hist2[j] += 1\n        o +=  (i - j) * (i - j)\n\n    e = 0\n    for i in range(max_rat + 1):\n        for j in range(max_rat + 1):\n            e += hist1[i] * hist2[j] * (i - j) * (i - j)\n\n    e = e \/ a1.shape[0]\n\n    return 1 - o \/ e\n","bc809d6e":"train.head()","1b6a3e63":"train.tail()","352d2518":"train.describe()","f445facf":"train['signal'].plot(kind='hist',figsize=(20, 7),label='train', bins=10)\ntest['signal'].plot(kind='hist', figsize=(20, 7),label='test', bins=10)\nplt.legend()\nplt.show()","9211e9f8":"train['open_channels'].plot(kind='hist',figsize=(20, 7),label='train', bins=10)\nplt.legend()\nplt.show()","bb781515":"fig_dims = (20, 15)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.scatterplot(data=train,x='time',y ='signal', ax=ax)","a926c1e5":"fig_dims = (20, 15)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.scatterplot(data=train,x='time',y ='open_channels', ax=ax)","8a871099":"fig_dims = (20, 15)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.scatterplot(data=train,x='signal',y ='open_channels', ax=ax)","2958ea9f":"## QWK Metric\n\n![image.png](attachment:image.png)","7be9ac7c":"## EDA","c16b2b57":"Key Information about this dataset from the competition sponsors:\n\n> In this competition, you will be predicting the number of open_channels present, based on electrophysiological signal data.\n> \n> IMPORTANT: While the time series appears continuous, the data is from discrete batches of 50 seconds long 10 kHz samples (500,000 rows per batch). In other words, the data from 0.0001 - 50.0000 is a different batch than 50.0001 - 100.0000, and thus discontinuous between 50.0000 and 50.0001.\n> \n> You can find detailed information about the data from the paper Deep-Channel uses deep neural networks to detect single-molecule events from patch-clamp data.","28c9247f":"### UPVOTE if you find this EDA helpful","387c2e37":"### Most Open Channels = 0 and trend downwards with the least numer of Open Channels = 10","3c77d56f":"### Very fascinating trends in 'Signal' over time","d92b5ba7":"### Stay Tuned for more...","d9e7064f":"### Distribution of 'Signals' shifts mean to the right as number of 'Open Channels' Increases","3e462954":"# Ion Switching - Exploratory Data Analysis","1bc01d30":"### Most 'Open Channel' Activity (higher channel activity) occurring roughly around t=250 and t=475","b16f7e74":"### Distribution between test and train signal data looks to be similar."}}