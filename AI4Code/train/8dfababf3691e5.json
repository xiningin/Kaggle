{"cell_type":{"b01f4f18":"code","49d68665":"code","2451b60a":"code","2d57ab58":"code","ebb21402":"code","a25b25c4":"code","4970c3dd":"code","01b9a454":"code","653077bb":"code","ce97b2ad":"code","4ef21363":"markdown","487d6d25":"markdown","833ccbab":"markdown","54d5320d":"markdown","3c17c9a9":"markdown","be726bdf":"markdown","b7670570":"markdown","e512ceb2":"markdown","56e623f3":"markdown","77248423":"markdown","3d1cdd8d":"markdown","d3861295":"markdown"},"source":{"b01f4f18":"# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the training set\ndataset_train = pd.read_csv('..\/input\/COST Train.csv')\nprint(dataset_train)","49d68665":"# Selecting closing prices\ntraining_set = dataset_train.iloc[:,4:5].values\n\n# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_set)","2451b60a":"# Creating a data structure with 120 timesteps and 1 output\n\nX_train = []\ny_train = []\nfor i in range(120, 1258):\n    X_train.append(training_set_scaled[i-120:i, 0])\n    y_train.append(training_set_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)\n\n# Reshaping\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","2d57ab58":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding four LSTM layer and Dropout regularisation\nregressor.add(LSTM(units = 60, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 60, return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 60, return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 60))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 32)","ebb21402":"dataset_test = pd.read_csv('..\/input\/COST Test.csv')\nprint(dataset_test)","a25b25c4":"real_stock_price = dataset_test.iloc[:,4:5].values\n\n# Combing the last 120 prices from train set with the test set \ndataset_total = pd.concat((dataset_train['Close'], dataset_test['Close']), axis = 0) \ninputs = dataset_total[len(dataset_total) - len(dataset_test) - 120:].values\ninputs = inputs.reshape(-1,1)\n\n# Applying the same data processing \ninputs = sc.transform(inputs) \nX_test = []\nfor i in range(120, 432):\n    X_test.append(inputs[i-120:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))","4970c3dd":"predicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)\n\ncompare = pd.DataFrame(predicted_stock_price).join(dataset_test['Close']) \ncompare.rename(columns={0: \"Predicted\", \"Close\": \"Actual\"})","01b9a454":"# Visualizing the results \nplt.plot(real_stock_price, color = 'red', label = 'Actual Costco Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Costco Stock Price')\nplt.title('Costco Stock Price Prediction')\nplt.xlabel('Date')\nplt.ylabel('Costco Stock Price')\nplt.legend()\nplt.show()","653077bb":"# Evaluating \nimport math\nfrom sklearn.metrics import mean_squared_error\nrmse = math.sqrt(mean_squared_error(real_stock_price, predicted_stock_price))\nprint(rmse)","ce97b2ad":"# Predicting the stock price in the next 120 days \n\nnew = pd.DataFrame(columns=['Close'],index=[0])\nnewdays = pd.concat((dataset_test['Close'],new['Close']), axis = 0) \nnewdays = newdays[len(newdays) - 1 - 120:].values\nnewdays = newdays.reshape(-1,1)\nnewdays = sc.transform(newdays) \nX_pred = []\n\nfor i in range(120, 121):\n    X_pred.append(newdays[i-120:i, 0]) \nX_pred = np.array(X_pred)\nX_pred = np.reshape(X_pred, (X_pred.shape[0], X_pred.shape[1], 1))\nnew_stock_price = regressor.predict(X_pred)\nnew_stock_price = sc.inverse_transform(new_stock_price) \n\nprint(\"The price of the next trading day will be: $\", new_stock_price)","4ef21363":"The next step is to predict the test set.  ","487d6d25":"Add the last 120 observations (the last 6 months of 2018) from the train set to the test set, as they are the timesetps that must be included in predicting the first three months of 2019.","833ccbab":"I am using prices in the past 120 trading days or 6 months to predict the next day's stock price. Thus, the input variable X will be every 120 closing prices, and the output variable Y will be the very 121st closing price. ","54d5320d":"As an active investor and a professional working in data science & AI, I decided to build a LSTM (Long Short Term Memory) model to see how it predicts the prices of the stocks in my portfolio. Costco Wholesales is my first candicate for modelling. I am using the 5-year COST closing prices from 2014 to 2018 as the train set, and the closing prices from 2019 to March 27th, 2020 as the test set. The data source is Yahoo Finance. ","3c17c9a9":"Now I will visualize the comparison between all actual prices and predict prices. ","be726bdf":"Finally, I would like to take a look what the stock price will be on the next trading day according to the model. ","b7670570":"Model & code reference: https:\/\/www.udemy.com\/course\/deeplearning\/","e512ceb2":"As shown above, the model is getting the correct direction of the stock movement, although the gap becomes wider starting in around June 2019 and the model tends to underestimate the stock value and lags behind a bit.","56e623f3":"To improve the model, I can create more layers or add more units to each LSTM layer, which will increase the computation time. ","77248423":"Build the LSTM model. I chose 4 layers, 60 units of memory cells (since stock price movements are quite complicated), and a common dropout rate of 20%. ","3d1cdd8d":"Import the train set. The train set includes stock price data from January 2nd, 2014 to December 28th, 2018. ","d3861295":"Predict using the test data and compare with the actual close prices. "}}