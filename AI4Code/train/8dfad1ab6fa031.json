{"cell_type":{"a6dbb31d":"code","6c898db7":"code","0b228691":"code","11a050ec":"code","30386601":"code","023a8582":"code","77037475":"code","c56c924c":"code","babf5c3c":"code","2e19e5ed":"code","da958467":"markdown","bebd39d8":"markdown","728a8d8c":"markdown","532a4d40":"markdown","4a679e5d":"markdown","b80bd696":"markdown","64a87816":"markdown"},"source":{"a6dbb31d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualization\nimport matplotlib.pyplot as plt # data visualization\nfrom sklearn.impute import SimpleImputer # imputation of missing values\nfrom sklearn.preprocessing import StandardScaler # scaling\nfrom sklearn.preprocessing import OneHotEncoder # handling with categorical values\nfrom sklearn.ensemble import GradientBoostingRegressor # regression model\nfrom sklearn.metrics import mean_squared_error # metric\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n","6c898db7":"df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\") #read data\nprint(df.info())","0b228691":"#we see that five columns store too many null values, so we drop them. Drop the Id column\ndf = df.drop(columns=['Id', 'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'], axis=1)\nprint(df.info())","11a050ec":"print(df.corr()['SalePrice'].sort_values())\nmax_thresold = df['SalePrice'].quantile(0.996)\nmin_thresold = df['SalePrice'].quantile(0.004)\nmax_thresold2 = df['OverallQual'].quantile(0.996)\nmin_thresold2 = df['OverallQual'].quantile(0.004)\n\nsns.scatterplot(data=df, x='OverallQual', y='SalePrice')\nplt.axhline(y=max_thresold, color='r')\nplt.axhline(y=min_thresold, color='r')\nplt.show()","30386601":"print(max_thresold2)\nprint(min_thresold2)\ndf = df[((df['SalePrice']>min_thresold) & (df['OverallQual']>min_thresold2)) &\n        ((df['SalePrice']<max_thresold) & (df['OverallQual']>min_thresold2))] #Outliers drop\n\nsns.scatterplot(data=df, x='OverallQual', y='SalePrice')\nplt.axhline(y=max_thresold, color='r')\nplt.axhline(y=min_thresold, color='r')\nplt.show()","023a8582":"#Some columns store null values, that must be imputed\nx_train_floatint = df.select_dtypes(include=[np.float, np.int])\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp.fit(x_train_floatint)\nx_train_floatint2 = imp.transform(x_train_floatint)\n\nx_train_cat = df.select_dtypes(include=[np.object])\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nimp.fit(x_train_cat)\nx_train_cat2 = imp.transform(x_train_cat)\n\nx_train_floatint3 = pd.DataFrame(x_train_floatint2, columns=x_train_floatint.columns)\nx_train_cat3 = pd.DataFrame(x_train_cat2, columns=x_train_cat.columns)\ndf = x_train_floatint3.join(x_train_cat3)\n\n#Checking the info\nprint(df.info()) #info to start preprocessing","77037475":"x_train = df.drop('SalePrice', axis=1)\ny_train = df['SalePrice']\nx_train_cat = df.select_dtypes(include=[np.object])\n\n#creating categories for OneEncoder\nMSZoning = ['A', 'C (all)', 'FV', 'I', 'RH', 'RL', 'RP', 'RM']\nStreet = ['Grvl', 'Pave']\nLotShape = ['Reg', 'IR1', 'IR2', 'IR3']\nLandContour = ['Lvl', 'Bnk', 'HLS', 'Low']\nUtilities = ['AllPub', 'NoSewr', 'NoSeWa', 'ELO']\nLotConfig = ['Inside', 'Corner', 'CulDSac', 'FR2', 'FR3']\nLandSlope = ['Gtl', 'Mod', 'Sev']\nNeighborhood = ['Blmngtn', 'Blueste','BrDale','BrkSide', 'ClearCr',\n                'CollgCr', 'Crawfor', 'Edwards', 'Gilbert',\n                'IDOTRR', 'MeadowV', 'Mitchel', 'NAmes', 'NoRidge',\n                'NPkVill', 'NridgHt', 'NWAmes', 'OldTown', 'SWISU',\n                'Sawyer', 'SawyerW', 'Somerst', 'StoneBr', 'Timber',\n                'Veenker']\nCondition1 = ['Artery', 'Feedr', 'Norm', 'RRNn', 'RRAn',\n              'PosN', 'PosA', 'RRNe', 'RRAe']\nCondition2 = Condition1\nBldgType = ['1Fam', '2fmCon', 'Duplex', 'Twnhs', 'TwnhsE', 'TwnhsI']\nHouseStyle = ['1Story', '1.5Fin', '1.5Unf', '2Story', '2.5Fin',\n              '2.5Unf', 'SFoyer', 'SLvl']\nRoofStyle = ['Flat', 'Gable', 'Gambrel', 'Hip', 'Mansard',\n             'Shed']\nRoofMatl = ['ClyTile', 'CompShg', 'Membran', 'Metal', 'Roll',\n            'Tar&Grv', 'WdShake', 'WdShngl']\nExterior1st = ['AsbShng', 'AsphShn', 'BrkComm', 'BrkFace',\n               'CBlock', 'CemntBd', 'HdBoard', 'ImStucc',\n               'MetalSd', 'Other', 'Plywood', 'PreCast',\n               'Stone', 'Stucco', 'VinylSd', 'Wd Sdng',\n               'WdShing']\nExterior2nd = Exterior1st + ['Brk Cmn', 'CmentBd' ,'Wd Shng']\nMasVnrType = ['BrkComm', 'BrkFace', 'CBlock', 'None', 'Stone', 'BrkCmn']\nExterQual = ['Ex', 'Gd', 'TA', 'Fa', 'Po']\nExterCond = ExterQual\nFoundation = ['BrkTil', 'CBlock', 'PConc', 'Slab', 'Stone',\n              'Wood']\nBsmtQual = ['Ex','Gd', 'TA', 'Fa', 'Po','NA']\nBsmtCond = BsmtQual\nBsmtExposure = ['Gd', 'Av', 'Mn', 'No', 'NA']\nBsmtFinType1 = ['GLQ', 'ALQ', 'BLQ', 'Rec', 'LwQ', 'Unf', 'NA']\nBsmtFinType2 = BsmtFinType1\nHeating = ['Floor', 'GasA', 'GasW', 'Grav', 'OthW', 'Wall']\nHeatingQC = ExterQual\nCentralAir = ['N', 'Y']\nElectrical = ['SBrkr', 'FuseA', 'FuseF', 'FuseP', 'Mix']\nKitchenQual = ExterQual\nFunctional = ['Typ', 'Min1', 'Min2', 'Mod', 'Maj1', 'Maj2',\n              'Sev', 'Sal']\nGarageType = ['2Types', 'Attchd', 'Basment', 'BuiltIn', 'CarPort',\n              'Detchd', 'NA']\nGarageFinish = ['Fin', 'RFn' ,'Unf', 'NA']\nGarageQual = BsmtQual\nGarageCond = BsmtQual\nPavedDrive = ['Y', 'P', 'N']\nSaleType = ['WD', 'CWD', 'VWD', 'New', 'COD', 'Con', 'ConLw',\n            'ConLI', 'ConLD', 'Oth']\nSaleCondition = ['Normal', 'Abnorml', 'AdjLand', 'Alloca', 'Family',\n                 'Partial']\n\nenc = OneHotEncoder(categories=[MSZoning, Street, LotShape, LandContour,\n                                Utilities, LotConfig, LandSlope, Neighborhood,\n                                Condition1, Condition2, BldgType, HouseStyle,\n                                RoofStyle, RoofMatl, Exterior1st, Exterior2nd,\n                                MasVnrType, ExterQual, ExterCond, Foundation,\n                                BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1,\n                                BsmtFinType2, Heating, HeatingQC, CentralAir,\n                                Electrical, KitchenQual, Functional, GarageType,\n                                GarageFinish, GarageQual, GarageCond, PavedDrive,\n                                SaleType, SaleCondition], sparse=False)\nx_train_cat = enc.fit_transform(x_train_cat)\ndf_cat = pd.DataFrame(x_train_cat)\nx_train_floatint = df.select_dtypes(include=[np.float, np.int])\nx_new_train = x_train_floatint.join(df_cat)\nx_new_train = x_new_train.drop(columns=['SalePrice'])\n\nprint(x_new_train.info(verbose=True))","c56c924c":"model = GradientBoostingRegressor(n_estimators=200000, alpha=0.75).fit(x_new_train, y_train) #You have to wait \n#about an hour to have it learnt :)","babf5c3c":"test_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest_df = test_df.drop(columns=['Id', 'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'], axis=1)\n\nx_test_floatint = test_df.select_dtypes(include=[np.float, np.int])\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp.fit(x_test_floatint)\nx_test_floatint2 = imp.transform(x_test_floatint)\n\nscaler = StandardScaler()\nx_test_floatint2 = scaler.fit_transform(x_test_floatint2)\n\nx_test_cat = test_df.select_dtypes(include=[np.object])\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nimp.fit(x_test_cat)\nx_test_cat2 = imp.transform(x_test_cat)\n\nx_test_floatint3 = pd.DataFrame(x_test_floatint2, columns=x_test_floatint.columns)\nx_test_cat3 = pd.DataFrame(x_test_cat2, columns=x_test_cat.columns)\ntest_df = x_test_floatint3.join(x_test_cat3)\n\nx_test = test_df\nx_test_floatint = x_test.select_dtypes(include=[np.float, np.int])\nx_test_cat = x_test.select_dtypes(include=[np.object])\nx_test_cat = enc.fit_transform(x_test_cat)\ntest_df_cat = pd.DataFrame(x_test_cat)\nx_new_test = x_test_floatint.join(test_df_cat)\n\nscaler = StandardScaler()\nx_new_test = scaler.fit_transform(x_new_test)\n\nprint(test_df.info())","2e19e5ed":"off_test = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nprint(\"MSE - \", mean_squared_error(model.predict(x_new_test)[:1459], off_test['SalePrice']))","da958467":"Test Dataset Preprocessing","bebd39d8":"Conclusion","728a8d8c":"Info about missing values","532a4d40":"Imputation of missing values","4a679e5d":"Model Building","b80bd696":"Outlier Detection","64a87816":"Categorical values"}}