{"cell_type":{"f3ce7d5b":"code","fc0f229c":"code","d8ce749c":"code","02fdd887":"code","238d362a":"code","bf0d6c92":"code","6896b6df":"code","69382fb1":"code","e0f9234f":"code","6af2d897":"code","ff9c0725":"code","3e19cf75":"code","9e315789":"code","9a04d568":"code","1225be00":"code","f23a92f3":"code","1154775f":"code","d9947bca":"code","4a004add":"code","5c5b4c0d":"code","5ce225db":"code","be62efef":"code","8b7e4c0d":"code","ac6d752b":"code","9962c175":"code","f4272c4f":"code","0696d245":"code","b9e14790":"code","1fa7a48a":"code","1251ad9f":"code","c693b645":"code","7fdbb3e5":"code","2d8a1dc2":"code","8b6f57b2":"code","b2628653":"code","8b294247":"code","cbdde9ca":"code","27b5568b":"code","7fb68edc":"code","acbbac3d":"markdown","e4bd4a7c":"markdown","2adf8e10":"markdown","5cc31035":"markdown","54883c20":"markdown","6c352de4":"markdown","9a17b2c5":"markdown","51ba4cf7":"markdown","7c25fd37":"markdown","8499408c":"markdown","baa98e6e":"markdown","796c9df7":"markdown","cf647a81":"markdown"},"source":{"f3ce7d5b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","fc0f229c":"def reduce_memory_usage(df):\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    \n    return df","d8ce749c":"df=pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\nreduce_memory_usage(df)\ntest=pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")\nreduce_memory_usage(test)","02fdd887":"df.head()","238d362a":"df.describe().T","bf0d6c92":"df.isnull().sum()","6896b6df":"df.info()","69382fb1":"for col in df.columns:\n    print(f\"The total unique values in {col} are {len(df[col].unique())}\")","e0f9234f":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('bmh')","6af2d897":"plt.figure(figsize=(15,10))\nsns.countplot(df.Cover_Type)\nplt.plot()","ff9c0725":"df['Cover_Type'].value_counts(ascending=False)","3e19cf75":"try:\n    fig, axes=plt.subplots(2,5,figsize=(30,15))\n    j=0\n    i=0\n    for k in range(1,11):\n        if j==5:\n            i+=1\n            j=0\n        sns.kdeplot(df.loc[:,df.columns[k]],ax=axes[i,j])\n        plt.gca().set_title(f\"{df.columns[k]}\")\n        plt.tight_layout()\n        j+=1\nexcept:\n    print(\"Got all the columns\")","9e315789":"def outlier_function(df, col_name):\n    first_quartile = np.percentile(np.array(df[col_name].tolist()), 25)\n    third_quartile = np.percentile(np.array(df[col_name].tolist()), 75)\n    IQR = third_quartile - first_quartile\n    \n    upper_limit = third_quartile+(3*IQR)\n    lower_limit = first_quartile-(3*IQR)\n    outlier_count = 0\n    \n    for value in df[col_name].tolist():\n        if (value < lower_limit) | (value > upper_limit):\n            outlier_count += 1\n    return lower_limit, upper_limit, outlier_count","9a04d568":"for col in  df.columns[:10]:\n    out=outlier_function(df,col)\n    if out[2]>0:\n        print(f\"There are {out[2]} outliers in {col}\")","1225be00":"try:\n    fig_out, axes_out=plt.subplots(2,5,figsize=(30,15))\n    j=0\n    i=0\n    for k in range(1,11):\n        if j==5:\n            i+=1\n            j=0\n        sns.boxplot(y=df.columns[k],x=df.columns[-1],data=df,ax=axes_out[i,j])\n        plt.gca().set_title(f\"{df.columns[k]}\")\n        j+=1\nexcept:\n    print(\"Got all the columns\")","f23a92f3":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr())\nplt.tight_layout()\nplt.plot()","1154775f":"df.drop([\"Soil_Type7\",\"Soil_Type15\"],axis=1,inplace=True)","d9947bca":"df=pd.concat([df,\n              df[df[\"Cover_Type\"]==5],\n              df[df[\"Cover_Type\"]==5],\n              df[df[\"Cover_Type\"]==5],\n              df[df[\"Cover_Type\"]==5],\n              df[df[\"Cover_Type\"]==5],\n              df[df[\"Cover_Type\"]==5],\n              df[df[\"Cover_Type\"]==4],\n              df[df[\"Cover_Type\"]==4],\n              df[df[\"Cover_Type\"]==4],\n              df[df[\"Cover_Type\"]==4],\n              df[df[\"Cover_Type\"]==4],\n              df[df[\"Cover_Type\"]==4]],ignore_index=True)","4a004add":"test.drop([\"Soil_Type7\",\"Soil_Type15\"],axis=1,inplace=True)","5c5b4c0d":"feature_col=df.columns[1:-1]","5ce225db":"df.head()","be62efef":"test.head()","8b7e4c0d":"df.to_csv(\"train.csv\",index=False)\ntest.to_csv(\"test.csv\",index=False)","ac6d752b":"! pip install scikit-learn --upgrade --force-reinstall","9962c175":"! pip install --no-deps autoxgb","f4272c4f":"from autoxgb import AutoXGB\n","0696d245":"train_filename=\".\/train.csv\"\noutput=\"submission_4\"\ntest_filename=\".\/test.csv\"\nidx=\"Id\"\ntargets=[\"Cover_Type\"]\nuse_gpu=True\nnum_folds=5\nseed=42\nnum_trials=5\ntime_limit=600","b9e14790":"axgb=AutoXGB(\n    train_filename=train_filename,\n    output=output,\n    test_filename=test_filename,\n    idx=idx,\n    targets=targets,\n    use_gpu=use_gpu,\n    num_folds=num_folds,\n    num_trials=num_trials,\n    time_limit=time_limit\n)","1fa7a48a":"axgb.train()","1251ad9f":"import os\nimport numpy as np","c693b645":"import pandas as pd\ntest_pred=pd.read_csv(f\".\/submission_4\/test_predictions.csv\")","7fdbb3e5":"test_pred.info()","2d8a1dc2":"test_pred.head()","8b6f57b2":"test_pred.shape","b2628653":"i=0\nli=[]\ntry: \n    while True:\n        li.append(np.argmax(test_pred.loc[i,test_pred.columns[1:]])+1)\n        \n        i+=1\nexcept:\n    if len(li)==test_pred.shape[0]:\n        print(\"Got all prediction \ud83d\ude01\")\n    else:\n        print(\"Error Occured\ud83d\udc80\")","8b294247":"submit=pd.concat([pd.DataFrame(test_pred[\"Id\"]),pd.DataFrame(li)],axis=1)","cbdde9ca":"submit.columns=[\"Id\",\"Cover_Type\"]","27b5568b":"submit.head()","7fb68edc":"submit.to_csv(\"submission.csv\",index=False)","acbbac3d":"# Please Upvote if you like The kernel!! \n\n<img src=\"https:\/\/media.giphy.com\/media\/SfYTJuxdAbsVW\/giphy.gif\" width=70%>","e4bd4a7c":"As **Soil_Type7** and **Soil_Type15** are  having only 1 type of data need to be removed from the data frame","2adf8e10":"# Getting Outliers\n\n<img src=\"https:\/\/media.giphy.com\/media\/Jszr4owyso6Xo9wjWT\/giphy.gif\">","5cc31035":"# Exploratory Data Analysis","54883c20":"# Checking for NULL","6c352de4":"# Getting the Correlation HeatMap\n\n","9a17b2c5":"# Data Description\n- Elevation - Elevation in meters\n- Aspect - Aspect in degrees azimuth\n- Slope - Slope in degrees\n- Horizontal_Distance_To_Hydrology - Horz Dist to nearest surface water features\n- Vertical_Distance_To_Hydrology - Vert Dist to nearest surface water features\n- Horizontal_Distance_To_Roadways - Horz Dist to nearest roadway\n- Hillshade_9am (0 to 255 index) - Hillshade index at 9am, summer solstice\n- Hillshade_Noon (0 to 255 index) - Hillshade index at noon, summer solstice\n- Hillshade_3pm (0 to 255 index) - Hillshade index at 3pm, summer solstice\n- Horizontal_Distance_To_Fire_Points - Horz Dist to nearest wildfire ignition points\n- Wilderness_Area (4 binary columns, 0 = absence or 1 = presence) - Wilderness area designation\n- Soil_Type (40 binary columns, 0 = absence or 1 = presence) - Soil Type designation\n- Cover_Type (7 types, integers 1 to 7) - Forest Cover Type designation","51ba4cf7":"# Installing AutoXGBoost\n\n## This uses XGBoost as well as Optuna together and chooses the best for us, so we only have to do the hard work of Feature Engineering and the rest modeleling can be handled by the Library","7c25fd37":"## So Here we have the probilites of each prediction need to convert it to submission Format ","8499408c":"# Reducing Memory of Data","baa98e6e":"<img src=\"https:\/\/media.giphy.com\/media\/nIUkbJV97FzDicnDtQ\/giphy.gif\">","796c9df7":"<img src=\"https:\/\/media.giphy.com\/media\/3o6ZtkShGlfpCJVCXm\/giphy.gif\">","cf647a81":"# HI!!!!\n\n<img src=\"https:\/\/media.giphy.com\/media\/3ornk57KwDXf81rjWM\/giphy.gif\" width=50%>\n\n# Lets Get started"}}