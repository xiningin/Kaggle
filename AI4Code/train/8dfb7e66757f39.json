{"cell_type":{"c713e3ef":"code","9ab81619":"code","239f7161":"code","5a48645d":"code","b7867388":"code","34065c22":"code","65e07c34":"code","86133d44":"code","f5f0cdb4":"code","1c4e820f":"code","2f985245":"code","c71ae58e":"code","d07f4460":"code","fedaa4d7":"code","8fc1da8c":"code","d9a51516":"code","27171338":"code","08b2fde6":"code","c75ea1a9":"code","e98ef2da":"markdown","93c5b51e":"markdown","c52bf009":"markdown","38910330":"markdown","4fe49c1c":"markdown","a0c538bb":"markdown","949b8dfb":"markdown"},"source":{"c713e3ef":"import matplotlib.pyplot as plt\nfrom IPython.display import set_matplotlib_formats\nset_matplotlib_formats('svg')","9ab81619":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","239f7161":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv',index_col='PassengerId')\ndel df['Name']\ndf.head(3)\n","5a48645d":"df.Survived.value_counts()\ndf.groupby(['Fare']).Survived.agg(['mean','count']).sort_values('count',ascending=False)","b7867388":"df.isna().sum()\n#sns.heatmap(df.isnull(),yticklabels=False ,cbar=False)","34065c22":"sns.heatmap(df.corr())\ndf.corr()[['Survived']].sort_values('Survived',ascending=False)","65e07c34":"df.Fare.apply(np.log1p).plot.hist(bins=50)\nprint(df.Fare)","86133d44":"df.plot.scatter(x='Survived' , y='Fare', alpha= 0.2)","f5f0cdb4":"sns.violinplot(x='Survived',y='Fare',data = df)","1c4e820f":"features_df = df.drop('Survived', axis=1 )\nnum_features = features_df.select_dtypes(np.number)\nnum_features.describe()","2f985245":"feature = num_features.Pclass\nvalue =  feature[feature < feature.quantile(.95)]\nvalue = (value - value.mean())\/value.std()\nvalue.plot.hist(bins= 20)\nvalue_1 =  num_features.Age\nvalue_1 = (value_1 - value_1.mean())\/value_1.std()\nvalue_1.plot.hist(bins=20)","c71ae58e":"cat_features = df.select_dtypes(['object'])\ncat_features.sample(5)\npd.get_dummies(cat_features)","d07f4460":"features = pd.concat([num_features,pd.get_dummies(cat_features)],axis=1)\ntarget = df['Survived']\nfeatures= features.fillna(0)","fedaa4d7":"from sklearn.model_selection import train_test_split\nx_train,x_test , y_train,y_test = train_test_split(features, target, test_size =0.25)\nx_train.sample(5)","8fc1da8c":"from sklearn.dummy import DummyClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nbaseline =  DummyClassifier(strategy='most_frequent')\nmodel = RandomForestClassifier()\n","d9a51516":"baseline.fit(x_train,y_train)\nmodel.fit(x_train,y_train)","27171338":"baseline_pred = baseline.predict(x_test)\nmodel_pred =  model.predict(x_test)","08b2fde6":"from sklearn.metrics import classification_report,confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\nprint('baseline :',classification_report(y_test,baseline.predict(x_test)))\ndtCM = confusion_matrix(y_test, baseline_pred)\n\nfig, ax = plot_confusion_matrix(conf_mat=dtCM ,  figsize=(8,8))\nplt.title('Confusion matrix')\nplt.show()\n\n","c75ea1a9":"print('model :',classification_report(y_test,model.predict(x_test)))\ndtCM = confusion_matrix(y_test, model_pred)\n\nfig, ax = plot_confusion_matrix(conf_mat=dtCM ,  figsize=(8,8))\nplt.title('Confusion matrix')\nplt.show()\n","e98ef2da":"## Extract the numerical features","93c5b51e":"# Data preprocessing","c52bf009":"# Splitting our dataset","38910330":" ## One hot encoding to extract the categorical values","4fe49c1c":"# Comparing the performance of both models ","a0c538bb":"# Predictions","949b8dfb":"# Building the model"}}