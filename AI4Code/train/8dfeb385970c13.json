{"cell_type":{"da1fa159":"code","65fb215d":"code","3be66f59":"code","9b3bd59b":"code","754e38e4":"code","ff9b8231":"code","dd05741d":"code","18d65d03":"code","d6cae332":"code","080923b7":"code","d6629aeb":"code","b9593eea":"code","213cca53":"code","38dd37a1":"code","9f6fdda1":"code","e34a4d45":"code","8866dd10":"code","6b3de62f":"code","bc1eaedd":"code","71e28193":"code","551663a3":"markdown","734dc9da":"markdown","205686a3":"markdown","085a9922":"markdown","97fadce6":"markdown","d4d26392":"markdown","abc927fa":"markdown","1f372612":"markdown","ee587768":"markdown"},"source":{"da1fa159":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom keras import layers, models","65fb215d":"df = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","3be66f59":"df_train = df.drop('label', axis=1).iloc[0:31500]\/255.0\ndf_labels = df[\"label\"][0:31500]","9b3bd59b":"val_train = df.drop('label',axis=1).iloc[31500:]\/255.0\nval_labels = df[\"label\"][31500:]\n","754e38e4":"df_train = np.array(df_train).reshape(31500,28,28,1)\nval_train = np.array(val_train).reshape(10500,28,28,1)","ff9b8231":"model = models.Sequential()\nmodel.add(layers.Conv2D(28, (3, 3), activation='relu', input_shape=(28, 28,1))) # (28,28,3)\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(56, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(56, (3, 3), activation='relu'))\n","dd05741d":"model.summary()\n","18d65d03":"model.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10))\n","d6cae332":"model.summary()\n","080923b7":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n","d6629aeb":"history = model.fit(df_train, \n                    df_labels, \n                    epochs=15, # epochs = 10\n                    validation_data=(val_train, val_labels))\n","b9593eea":"import matplotlib.pyplot as plt\n%matplotlib inline\n","213cca53":"\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.9, 1]) # [0.5, 1]\nplt.legend(loc='lower right')\n\ntest_loss, test_acc = model.evaluate(df_train,  df_labels, verbose=2)\n","38dd37a1":"df_test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","9f6fdda1":"predictions = model.predict(np.array(df_test).reshape(28000,28,28,1))\n","e34a4d45":"output = []\n\nfor i in range(len(predictions)):\n    j = -1\n    max_i = -1\n    out = 0\n    for num in predictions[i]:\n        j += 1\n        if num > max_i:\n            max_i = num\n            out = j\n            \n    output.append(out)\n        ","8866dd10":"outputDict = {\"ImageId\":np.arange(1,28001)}","6b3de62f":"submissions = pd.DataFrame(outputDict)","bc1eaedd":"submissions[\"Label\"] = output","71e28193":"submissions.to_csv(\"submission.csv\", index=False, header=True)","551663a3":"## Preprocessing","734dc9da":"## Making Predictions","205686a3":"## Introduction","085a9922":"## Model Creation","97fadce6":"## Model Training","d4d26392":"## Conclusion","abc927fa":"# Tensorflow for Absolute Beginners (Keras)","1f372612":"This notebook scored 98% accuracy. It is essensially copied from tensorflows example found here: https:\/\/www.tensorflow.org\/tutorials\/images\/cnn. From what I understand, CNN's (Convolutional Neural Network's) work well for image classification.","ee587768":"The code from this notebook came from the link in the Introduction. This code was intended for an image set of flowers, categorizing different types of flowers. It worked well for categorizing the handwritten digits dataset. There was an increase in classification score when I upped the number of training epochs from 10 to 15, but at 20, the classification rate decreased. Maybe there's a better sweet spot for number of training epochs? Maybe more layers in the neural network? Maybe some different model parameters? Let me know!"}}