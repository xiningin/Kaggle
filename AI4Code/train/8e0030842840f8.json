{"cell_type":{"a2abfae0":"code","19a371aa":"code","745961d1":"code","a7202de6":"code","9f45ecc8":"code","2b35b381":"code","8445e17c":"code","34539b24":"code","767f72da":"code","b9971a93":"code","0ddb966f":"code","92e79315":"code","51765c8b":"code","90df29de":"code","a260c453":"code","10476397":"code","4c9e2b88":"code","acdf3010":"code","ffbd17ac":"markdown","fde9aa84":"markdown","c9b76bb8":"markdown","c8faa9dc":"markdown","c1b34e37":"markdown","6572ee08":"markdown","e7d82253":"markdown","798806e0":"markdown","b6ecb45f":"markdown","43264952":"markdown","b68b3d24":"markdown"},"source":{"a2abfae0":"!pip install ..\/input\/python-datatable\/datatable-0.11.0-cp37-cp37m-manylinux2010_x86_64.whl > \/dev\/null 2>&1","19a371aa":"import numpy as np\nimport pandas as pd\nfrom collections import defaultdict\nimport datatable as dt\nimport catboost\nfrom matplotlib import pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torch\n\nimport janestreet\n\nimport warnings\nwarnings.filterwarnings('ignore')","745961d1":"train_df = dt.fread('..\/input\/jane-street-market-prediction\/train.csv').to_pandas()\ntrain_df.info()","a7202de6":"print(f'On average, there are {train_df.shape[0] \/ len(train_df.date.unique())} actions are considered per day.')","9f45ecc8":"# Number of NaN values in each columns\nfeatures = ['feature_' + str(i) for i in range(130)]\nresp = ['resp_' + str(i) for i in range(1,5)]\nnan_values_count = train_df[['weight'] + resp + features].isna().sum()\nprint(nan_values_count)\nprint('Percentage of NaN values:', nan_values_count.sum() \/ np.product(train_df.shape) * 100)","2b35b381":"r'''# Filling NaN values by moving average of 17 periods ahead\nfor feat in tqdm(features):\n    train_df[feat] = train_df[feat].fillna(train_df[feat].rolling(17, min_periods = 1).mean())'''","8445e17c":"r'''for feat in tqdm(features):\n    train_df[feat] = train_df[feat].rolling(17, min_periods = 1).mean()'''","34539b24":"train_df.fillna(-999, inplace = True)","767f72da":"train_df = train_df[train_df['weight'] != 0]\ntrain_df['action'] = ((train_df['weight'].values * train_df['resp'].values) > 0).astype('int')","b9971a93":"# Define the target variable\nnum_label = {}\nfor i in train_df.action.unique():\n    num_label[i] = [sum(train_df.action == i), sum(train_df.action == i)\/train_df.shape[0] * 100]\nprint(num_label)","0ddb966f":"# Splitting\nratio = 0.2\ncutting_point = int(train_df.shape[0] * ratio)\n\ntrain = train_df.iloc[:cutting_point,:]\nval = train_df.iloc[cutting_point:,:]","92e79315":"train_action = train.groupby(['date', 'action']).size()\n# In the training set\nprint('The number of 1 in the training set is:')\nprint(train_action[train_action.index.get_level_values('action') == 1].sum())\nprint('The number of 0 in the training set is:')\nprint(train_action[train_action.index.get_level_values('action') == 0].sum())","51765c8b":"val_action = val.groupby(['date', 'action']).size()\n# In the validation set\nprint('The number of 1 in the validation set is:')\nprint(val_action[val_action.index.get_level_values('action') == 1].sum())\nprint('The number of 0 in the validation set is:')\nprint(val_action[val_action.index.get_level_values('action') == 0].sum())","90df29de":"params = {\n    'loss_function': 'Logloss',\n    'eval_metric': 'AUC',\n    'task_type': 'GPU' if torch.cuda.is_available() else 'CPU',\n    'grow_policy': 'Lossguide',\n    'iterations': 2000,\n    'learning_rate': 0.05,\n    'random_seed': 0,\n    'l2_leaf_reg': 50,\n    'depth': 10,\n    'max_leaves': 10,\n    'border_count': 128,\n    'verbose': 50,\n}","a260c453":"from catboost import CatBoostClassifier, Pool\n\n# Training and validating data\ntrain_set = Pool(train[features], label = train['action'])\nval_set = Pool(val[features], label = val['action'])","10476397":"# Model definition\nmodel = CatBoostClassifier(**params)\n\n# Fitting\nmodel.fit(train_set, eval_set = val_set, use_best_model = True)","4c9e2b88":"try:\n    env = janestreet.make_env()\nexcept:\n    pass\niter_test = env.iter_test()\nprior_test_df = None","acdf3010":"%%time\nfor (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df[features]\n    # For the rest, fill with -999\n    X_test.fillna(-999, inplace = True)\n    y_preds = model.predict(X_test)\n    sample_prediction_df.action = y_preds\n    env.predict(sample_prediction_df)","ffbd17ac":"* Quite good balancedness","fde9aa84":"* Modelling","c9b76bb8":"* For those NaN values remained, replace by -999","c8faa9dc":"# Understand data","c1b34e37":"# Load data","6572ee08":"* How many actions are considered per day?","e7d82253":"* Data balancedness","798806e0":"# Modelling","b6ecb45f":"# Inference","43264952":"* Check the distribution of types of actions over days, this will affect how we split the data into training and validation sets","b68b3d24":"* Handling NaN values"}}