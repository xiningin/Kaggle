{"cell_type":{"8ea5f8c9":"code","95a47bae":"code","a1491581":"code","6a29b4ac":"code","ab5983d6":"code","4b8020f5":"code","94827ee8":"code","030973b6":"code","255ac68c":"code","724901bd":"code","3531a72e":"code","1f3e492d":"code","10a9252e":"code","198f58ea":"code","45073fe7":"code","45c95eb2":"code","328175ce":"code","32bc2774":"code","7a5ca006":"code","4518ebb9":"code","4436d39a":"code","3307402b":"code","08b77d34":"code","2e6d5e99":"code","1600b048":"code","8a989f42":"code","bb578d13":"code","dd5d63b8":"markdown","684c057b":"markdown","2ad8813f":"markdown","338750f5":"markdown","295edb7a":"markdown","932072d4":"markdown","81538bfb":"markdown","f6a750a8":"markdown","d0b365c4":"markdown","8973e83f":"markdown","b6de590e":"markdown","4e38a810":"markdown","750021fa":"markdown","569c58e5":"markdown","b59677c3":"markdown","29a4a925":"markdown","78bdb400":"markdown","4e8e68b9":"markdown","7e1070fa":"markdown","59ae680f":"markdown","8e401c65":"markdown","60970a18":"markdown","41426329":"markdown","be7bf1b9":"markdown","59716b49":"markdown","8fa0bcac":"markdown","9b29581b":"markdown","0c64c4cc":"markdown"},"source":{"8ea5f8c9":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_colwidth', -1)","95a47bae":"data = pd.read_csv('\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv', header = None)\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head(12)","a1491581":"data.plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","6a29b4ac":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","ab5983d6":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Linear_Interpolation'],inplace=True)","4b8020f5":"import seaborn as sns\nfig = plt.subplots(figsize=(20, 5))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","94827ee8":"fig = data.Passengers.hist(figsize = (20,5))","030973b6":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 20, 10\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","255ac68c":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","724901bd":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","3531a72e":"data['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","1f3e492d":"from statsmodels.tsa.stattools import adfuller\nadf_test = adfuller(data['Passengers'])\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","10a9252e":"from statsmodels.tsa.stattools import kpss\nkpss_test = kpss(data['Passengers'])\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","198f58ea":"from scipy.stats import boxcox\ndata_boxcox = pd.Series(boxcox(data['Passengers'], lmbda=0), index = data.index)\n\ndata['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.plot(data_boxcox, label='After Box Cox tranformation')\nplt.legend(loc='best')\nplt.title('After Box Cox transform')\nplt.show()","45073fe7":"data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(), data.index)\nplt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(data_boxcox_diff, label='After Box Cox tranformation and differencing')\nplt.legend(loc='best')\nplt.title('After Box Cox transform and differencing')\nplt.show()","45c95eb2":"data_boxcox_diff.dropna(inplace=True)","328175ce":"data_boxcox_diff.tail()","32bc2774":"adf_test = adfuller(data_boxcox_diff)\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","7a5ca006":"kpss_test = kpss(data_boxcox_diff)\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","4518ebb9":"from statsmodels.graphics.tsaplots import plot_acf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_acf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","4436d39a":"from statsmodels.graphics.tsaplots import plot_pacf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_pacf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","3307402b":"train_data_boxcox = data_boxcox[:train_len]\ntest_data_boxcox = data_boxcox[train_len:]\ntrain_data_boxcox_diff = data_boxcox_diff[:train_len-1]\ntest_data_boxcox_diff = data_boxcox_diff[train_len-1:]","08b77d34":"train_data_boxcox_diff[:5]","2e6d5e99":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(train_data_boxcox, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)) \nmodel_fit = model.fit()\nprint(model_fit.params)","1600b048":"y_hat_sarima = data_boxcox_diff.copy()\ny_hat_sarima['sarima_forecast_boxcox'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_sarima['sarima_forecast'] = np.exp(y_hat_sarima['sarima_forecast_boxcox'])","8a989f42":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_sarima['sarima_forecast'][test.index.min():], label='SARIMA forecast')\nplt.legend(loc='best')\nplt.title('Seasonal autoregressive integrated moving average (SARIMA) method')\nplt.show()","bb578d13":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_sarima['sarima_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_sarima['sarima_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['Seasonal autoregressive integrated moving average (SARIMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\n\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","dd5d63b8":"## Autocorrelation function (ACF)","684c057b":"# Time series analysis","2ad8813f":"### Plot train, test and forecast","338750f5":"### Additive seasonal decomposition","295edb7a":"## Plot time series data","932072d4":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","81538bfb":"## Seasonal auto regressive integrated moving average (SARIMA)","f6a750a8":"## Outlier detection","d0b365c4":"## Import required packages","8973e83f":"## Stationarity vs non-stationary time series","b6de590e":"## Time series Decomposition","4e38a810":"### Histogram plot","750021fa":"### Augmented Dickey-Fuller (ADF) test","569c58e5":"# Auto Regressive methods","b59677c3":"### Calculate RMSE and MAPE","29a4a925":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","78bdb400":"### Recover original time series forecast","4e8e68b9":"## Split time series data into training and test set","7e1070fa":"### Differencing to remove trend","59ae680f":"### Augmented Dickey-Fuller (ADF) test","8e401c65":"# Build and evaluate time series forecast","60970a18":"### Multiplicative seasonal decomposition","41426329":"## Partial autocorrelation function (PACF)","be7bf1b9":"## Missing value treatment","59716b49":"# Initial setup","8fa0bcac":"### Box Cox transformation to make variance constant","9b29581b":"### Box plot and interquartile range","0c64c4cc":"## Import time series data: Airline passenger traffic"}}