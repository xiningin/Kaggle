{"cell_type":{"a9c10ff5":"code","f0b47d06":"code","61e3356b":"code","237c2b5f":"code","2a96e644":"code","b03670d9":"code","ea039cb6":"code","b540a8a5":"code","35976fd6":"code","e45a55f7":"code","812630c9":"code","0d594b84":"code","143d6561":"code","d454493a":"code","117fbba4":"code","9e66619f":"code","b3804b4b":"code","9d4cfc91":"code","c710a7ca":"code","1a5b9ceb":"code","e6ebcd9b":"code","e8d84401":"code","ff4fe157":"code","ff8ab01f":"code","e10a123b":"code","d3708c4b":"code","611cfffc":"code","3803ff26":"code","54550ac6":"code","20ea67c8":"code","8e2c118a":"code","1043f601":"code","463597c2":"markdown","910f5d39":"markdown","3774240c":"markdown","0dde767d":"markdown","64194bef":"markdown","89bc9aee":"markdown"},"source":{"a9c10ff5":"import pandas as pd","f0b47d06":"dataset_train1 = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv', index_col='id')\ndataset_test1 = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv', index_col='id')\ny = dataset_train1.claim\ny = pd.DataFrame(y)\ndataset_train = dataset_train1.drop(['claim'], axis=1)","61e3356b":"#","237c2b5f":"dataset_train['nan_count'] = dataset_train.isnull().sum(axis=1)\n#dataset_train['nan_count']  = dataset_train['nan_count']\/dataset_train['nan_count'].max()","2a96e644":"dataset_test1['nan_count'] = dataset_test1.isnull().sum(axis=1)\n#dataset_test1['nan_count']  = dataset_test1['nan_count']\/dataset_test1['nan_count'].max()","b03670d9":"#dataset_test1['num_missing_std'] = dataset_test1.isna().std(axis=1).astype('float')\n#dataset_test1['mean'] = dataset_test1.mean(axis=1)\n#dataset_test1['median'] = dataset_test1.median(axis=1)\n#dataset_test1['std'] = dataset_test1.std(axis=1)\n#dataset_test1['mad'] = dataset_test1.mad(axis=1)\n#dataset_test1['var'] = dataset_test1.var(axis=1)\n#dataset_test1['skew'] = dataset_test1.skew(axis=1) \n#dataset_test1['max'] = dataset_test1.abs().max(axis=1)\n#dataset_test1['min'] = dataset_test1.abs().min(axis=1) ","ea039cb6":"import tensorflow as tf","b540a8a5":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","35976fd6":"from sklearn.preprocessing import QuantileTransformer, KBinsDiscretizer, PowerTransformer","e45a55f7":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='median')\ndataset_train = imputer.fit_transform(dataset_train)\ndataset_test = imputer.transform(dataset_test1)","812630c9":"#pt = PowerTransformer()\n#dataset_train = pt.fit_transform(dataset_train)\n#dataset_test = pt.transform(dataset_test)","0d594b84":"qt = QuantileTransformer(n_quantiles=100, output_distribution='uniform')\ndataset_train = qt.fit_transform(dataset_train)\ndataset_test = qt.transform(dataset_test)","143d6561":"from sklearn.preprocessing import MinMaxScaler\nx_scaler = MinMaxScaler()\ndataset_train_sc = x_scaler.fit_transform(dataset_train)\ndataset_test_sc = x_scaler.transform(dataset_test)","d454493a":"from tensorflow import keras\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Embedding\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Reshape\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import load_model\n#from tensorflow.keras.engine.input_layer import Input\nfrom tensorflow.keras.layers import MaxPooling1D, GaussianNoise\nfrom tensorflow.keras.layers import GlobalAveragePooling1D\nfrom tensorflow.keras.layers import BatchNormalization","117fbba4":"from tensorflow.keras.constraints import max_norm","9e66619f":"def model_builder(lr):\n    \"\"\"\u041c\u043e\u0434\u0435\u043b\u044c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u0434\u043b\u044f \u0430\u0433\u0435\u043d\u0442\u0430\"\"\"\n    inputA = keras.Input(shape=(119))\n    line = GaussianNoise(0.000001)(inputA)\n    line = Reshape((119,1))(line)\n    \n    #line = Conv1D(filters=8, kernel_size=2, padding='same', activation='relu')(line)\n    #line = BatchNormalization()(line)\n    #line = Dropout(0.2)(line)\n    \n    #line = MaxPooling1D(pool_size=2)(line)\n    \n    line = Conv1D(filters=16, kernel_size=2, activation='relu')(line)\n    line = BatchNormalization()(line)\n    line = Dropout(0.3)(line)\n    \n    #line = MaxPooling1D(pool_size=2)(line)\n\n    line = Conv1D(filters=32, kernel_size=2, activation='relu')(line)\n    line = BatchNormalization()(line)\n    line = Dropout(0.5)(line)\n    \n    line = Conv1D(filters=64, kernel_size=3, activation='relu')(line)\n    line = BatchNormalization()(line)\n    line = Dropout(0.5)(line)\n    \n    #x = MaxPooling1D(pool_size=2)(line)\n    #line = GlobalAveragePooling1D()(line)\n    \n    line = Flatten()(line)\n    #line = Dense(512, activation='relu', kernel_regularizer=keras.regularizers.l1(0.000001))(line)\n    #line = Dense(256, activation='relu', kernel_regularizer=keras.regularizers.l1(0.000001))(line)\n    #line = Dropout(0.1)(line)\n    #line = Dense(128, activation='relu')(line)\n    #line = Dense(32, activation='relu')(line)\n    #line = Dense(32, activation='relu',kernel_constraint=max_norm(2.),)(line)\n    #line = Dense(16, activation='relu')(line)\n    #line = Dense(64, activation='relu')(line)\n    #line = Dense(32, activation='relu')(line)\n    #line = Dense(16, activation='relu')(line)\n    \n    outputA = Dense(units=1, activation=\"sigmoid\", kernel_regularizer=keras.regularizers.l1(0.01))(line)\n    model = Model(inputs=inputA, outputs=outputA)\n    #model = keras.models.load_model('models\/model2')\n    model.compile(loss = 'binary_crossentropy', optimizer = Adam(lr=lr), metrics=[tf.keras.metrics.AUC(name='auc'), 'binary_accuracy'],)\n    return model","b3804b4b":"lr=0.0001\nwith strategy.scope():\n    model = model_builder(lr)","9d4cfc91":"model.summary()","c710a7ca":"checkpoint_filepath = 'pseudo_best.h5'\nsave_model_callback = tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_filepath,\n    save_weights_only=False,\n    monitor='val_auc',\n    mode='max',\n    verbose=1,\n    save_best_only=True)","1a5b9ceb":"#model = load_model('..\/input\/tps0921-pre-nn\/best_81332.h5')","e6ebcd9b":"#model = load_model('..\/input\/tps0921-pre-nn\/best_81204.h5')","e8d84401":"#preds = model.predict(dataset_test_sc)","ff4fe157":"#for i in range(len(preds)):\n#    preds[i] = 1 if preds[i] >= 0.5 else 0","ff8ab01f":"N_split = int(0.2 * len(dataset_train_sc))\ndataset_sc_TRAIN = dataset_train_sc[:-N_split, :]\ndataset_sc_VAL = dataset_train_sc[-N_split:, :]\ny_TRAIN = y[:-N_split]\ny_VAL = y[-N_split:]","e10a123b":"#import numpy as np\n#big_dataset_X = np.concatenate([dataset_sc_TRAIN, dataset_test_sc], axis=0)\n#len(big_dataset_X)","d3708c4b":"#big_dataset_y = np.concatenate([y_TRAIN, preds], axis=0)\n#len(big_dataset_y)","611cfffc":"#N = len(preds)\/(len(preds)+len(y_TRAIN))\n#N","3803ff26":"from tensorflow.keras.callbacks import ReduceLROnPlateau\nreduce_lr = ReduceLROnPlateau(monitor='val_auc', factor=0.2, patience=10, min_lr=0.001, verbose=1, mode='max')","54550ac6":"EPOCHS = 50\n#EPOCHS = 1\n#model.fit(\n#    big_dataset_X, big_dataset_y,\n#    validation_data=(dataset_sc_VAL, y_VAL), epochs=EPOCHS, callbacks=[save_model_callback, reduce_lr], batch_size=2048, shuffle=True)","20ea67c8":"EPOCHS = 1000\n#EPOCHS = 1\nmodel.fit(\n    dataset_sc_TRAIN, y_TRAIN,\n    validation_data=(dataset_sc_VAL, y_VAL), epochs=EPOCHS, callbacks=[save_model_callback, reduce_lr], batch_size=1024, shuffle=True)","8e2c118a":"model = load_model('pseudo_best.h5')","1043f601":"preds = model.predict(dataset_test_sc)\noutput = pd.DataFrame({'Id': dataset_test1.index,'claim': preds[:,0]})\npath = 'sample_submission.csv'\noutput.to_csv(path, index=False)\noutput ","463597c2":"dataset_train['min_row'] = dataset_train.min(axis=1)\ndataset_train['max_row'] = dataset_train.max(axis=1)\ndataset_train['mean_row'] = dataset_train.mean(axis=1)\ndataset_train['std_row'] = dataset_train.std(axis=1)\n\ndataset_test1['min_row'] = dataset_test1.min(axis=1)\ndataset_test1['max_row'] = dataset_test1.max(axis=1)\ndataset_test1['mean_row'] = dataset_test1.mean(axis=1)\ndataset_test1['std_row'] = dataset_test1.std(axis=1)","910f5d39":"Below is the compiled list of the all feature engineering ideas tried out so far.<br>\n\nX['num_missing'] = X.isna().sum(axis=1) # Number of NaN columns <br>\nX['num_missing_std'] = X.isna().std(axis=1).astype('float') # Standard deviation of NaN columns count<br>\nX['mean'] = X.mean(axis=1) # Mean of row values<br>\nX['median'] = X.median(axis=1) # Median<br>\nX['std'] = X.std(axis=1) # Standard Deviation<br>\nX['mad'] = X.mad(axis=1) # Mean Absolute Deviation<br>\nX['var'] = X.var(axis=1) # Variance<br>\nX['skew'] = X.skew(axis=1) # Skewness<br>\nX['max'] = X.abs().max(axis=1) # Max of row values<br>\nX['min'] = X.abs().min(axis=1) # Min of row values<br>","3774240c":"pseudo training","0dde767d":"repeated pseudo training","64194bef":"real training","89bc9aee":"repeat few times 2 cells above"}}