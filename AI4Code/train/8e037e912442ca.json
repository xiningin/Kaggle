{"cell_type":{"902b5bfd":"code","aa2cc19b":"code","9138e7b6":"code","9dbaacf8":"code","892e4c21":"code","4ce6f7e1":"code","33c4e131":"code","1f641974":"code","dda589fb":"code","c7bbde8d":"code","6eb1c75f":"code","0151fc77":"code","e66bee7c":"code","fcc60a8d":"code","2f1a0377":"code","0e2c981a":"code","50b76fb9":"code","f38b632c":"code","b4451a63":"code","6ff1c02c":"code","d0c3bb2d":"code","f6ecf058":"code","43e94b0e":"code","ebb45e18":"code","89539be4":"markdown"},"source":{"902b5bfd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nimport os\nimport glob as gb\nimport cv2\nimport tensorflow as tf\nimport keras","aa2cc19b":"trainpath = '..\/input\/cell-images\/cell_images\/train\/'\ntestpath = '..\/input\/cell-images\/cell_images\/valid\/'","9138e7b6":"for folder in os.listdir(trainpath):\n    files = gb.glob(pathname= str(trainpath+folder + \"\/*.png\"))\n    print(f'For training data , found {len(files)} in folder {folder}')","9dbaacf8":"for folder in os.listdir(testpath):\n    files = gb.glob(pathname= str(testpath+folder + \"\/*.png\"))\n    print(f'For training data , found {len(files)} in folder {folder}')","892e4c21":"size = []\nfor folder in os.listdir(trainpath):\n    files = gb.glob(pathname=str(trainpath+folder+'\/*.png'))\n    for file in files:\n        image = plt.imread(file)\n        size.append(image.shape)\n        \n        \npd.Series(size).value_counts()","4ce6f7e1":"size = []\nfor folder in os.listdir(testpath):\n    files = gb.glob(pathname=str(testpath+folder+'\/*.png'))\n    for file in files:\n        image = plt.imread(file)\n        size.append(image.shape)\n        \n        \npd.Series(size).value_counts()","33c4e131":"code = {'Parasitized':0,'Uninfected':1}\n \ndef getcode(n):\n    for x,y in code.items():\n        if n == y:\n            return x","1f641974":"s = 64 # size of each image","dda589fb":"X_train = []\ny_train = []\nfor folder in os.listdir(trainpath):\n    files = gb.glob(pathname = str(trainpath +folder + '\/*.png'))\n    for file in files:\n        image = cv2.imread(file)\n        image_array = cv2.resize(image,(s,s))\n        X_train.append(list(image_array))\n        y_train.append(code[folder])","c7bbde8d":"plt.figure(figsize=(20,20))\nfor n, i in enumerate(np.random.randint(0,len(X_train),36)):\n    plt.subplot(6,6,n+1)\n    plt.imshow(X_train[i])\n    plt.axis('off')\n    plt.title(getcode(y_train[i]))","6eb1c75f":"print(f'we have {len(X_train)} items in X_train')","0151fc77":"X_test = []\ny_test = []\nfor folder in os.listdir(testpath):\n    files = gb.glob(pathname = str(testpath +folder + '\/*.png'))\n    for file in files:\n        image = cv2.imread(file)\n        image_array = cv2.resize(image,(s,s))\n        X_test.append(list(image_array))\n        y_test.append(code[folder])","e66bee7c":"plt.figure(figsize=(20,20))\nfor n, i in enumerate(np.random.randint(0,len(X_test),36)):\n    plt.subplot(6,6,n+1)\n    plt.imshow(X_test[i])\n    plt.axis('off')\n    plt.title(getcode(y_test[i]))","fcc60a8d":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)\n\nprint(f'X_train shape is {X_train.shape}')\nprint(f'X_test shape is {X_test.shape}')\nprint(f'y_train shape is {y_train.shape}')\nprint(f'y_test shape is {y_test.shape}')","2f1a0377":"kerasModel = keras.models.Sequential([\n    keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(s,s,3)),\n    keras.layers.MaxPool2D(2,2),\n    keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu'),\n    keras.layers.MaxPool2D(2,2),\n    keras.layers.Flatten(),\n    keras.layers.Dense(128,activation='relu'),\n    keras.layers.Dense(1,activation='sigmoid')\n    \n])","0e2c981a":"kerasModel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","50b76fb9":"print('Model Details are: ')\nprint(kerasModel.summary())","f38b632c":"epochs = 50\nThisModel = kerasModel.fit(X_train,y_train,epochs=epochs,verbose=1)","b4451a63":"ModelLoss, ModelAccuracy = kerasModel.evaluate(X_test,y_test)\n\nprint('Test Loss is {}'.format(ModelLoss))\nprint('Test Accuracy is {}'.format(ModelAccuracy))","6ff1c02c":"curves = pd.DataFrame(ThisModel.history)\ncurves.plot()","d0c3bb2d":"from keras.preprocessing import image\ntest_image1= image.load_img('..\/input\/cell-images\/cell_images\/random1.png', target_size = (64,64))\ntest_image = image.img_to_array(test_image1)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = kerasModel.predict(test_image)\nplt.title(getcode(result))\nplt.imshow(test_image1)","f6ecf058":"from keras.preprocessing import image\ntest_image1= image.load_img('..\/input\/cell-images\/cell_images\/random2.png', target_size = (64,64))\ntest_image = image.img_to_array(test_image1)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = kerasModel.predict(test_image)\nplt.title(getcode(result))\nplt.imshow(test_image1)","43e94b0e":"from keras.preprocessing import image\ntest_image1= image.load_img('..\/input\/cell-images\/cell_images\/random3.png', target_size = (64,64))\ntest_image = image.img_to_array(test_image1)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = kerasModel.predict(test_image)\nplt.title(getcode(result))\nplt.imshow(test_image1)","ebb45e18":"from keras.preprocessing import image\ntest_image1= image.load_img('..\/input\/cell-images\/cell_images\/random4.png', target_size = (64,64))\ntest_image = image.img_to_array(test_image1)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = kerasModel.predict(test_image)\nplt.title(getcode(result))\nplt.imshow(test_image1)","89539be4":"# Reading Data"}}