{"cell_type":{"d805011d":"code","880a46a6":"code","7619a579":"code","6bf83763":"code","54480f77":"code","b76bea5e":"code","2cfb0610":"code","272ac7cf":"code","06718122":"code","51bd7c8f":"code","ae5d5119":"code","bdaea833":"code","639e4d1a":"code","ae9638fb":"code","9a04f15d":"code","9b4eeb53":"code","298066d3":"code","57740431":"markdown","8db2d0b2":"markdown","265164df":"markdown","569d119b":"markdown","e3cf6740":"markdown","416f40be":"markdown","1a4e157e":"markdown","c83bd311":"markdown","de84ed71":"markdown","67a67bb0":"markdown","c8852e5f":"markdown","239df6c5":"markdown","f9ca4227":"markdown","2072ed9c":"markdown"},"source":{"d805011d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","880a46a6":"import pandas as pd\nimport pandas.util.testing as tm\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score,train_test_split,StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.naive_bayes import GaussianNB\n","7619a579":"data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv',sep = ',',index_col=['Id'])","6bf83763":"# first 5 rows of the Dataset\ndata.head()","54480f77":"sns.heatmap(data.isnull())","b76bea5e":"sns.countplot(x = 'Species',data = data)","2cfb0610":"sns.heatmap(data.corr(),annot = True)","272ac7cf":"sns.boxplot(y = 'SepalLengthCm',x = 'Species',data = data)\n","06718122":"sns.boxplot(y = 'SepalWidthCm',x = 'Species',data = data)","51bd7c8f":"sns.boxplot(y = 'PetalWidthCm',x = 'Species',data = data)","ae5d5119":"sns.boxplot(y = 'PetalLengthCm',x = 'Species',data = data)","bdaea833":"x = data.iloc[:,:4]\ny = data.iloc[:,4]","639e4d1a":"encode = LabelEncoder()\ny = encode.fit_transform(y)\ndf = pd.DataFrame({'Categorical':data['Species'][:10],'Numerical':y[:10]})\ndf","ae9638fb":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size = 0.2,random_state = 42)","9a04f15d":"nb = GaussianNB()\ncross_val_score(nb,xtrain,y = ytrain,cv = StratifiedKFold(n_splits=5,shuffle = True)).mean()","9b4eeb53":"nb.fit(xtrain,ytrain)\npred = nb.predict(xtest)","298066d3":"accuracy_score(ytest,pred)","57740431":"### ***Splitting the Data***","8db2d0b2":"###  ***Splitting the data into train and test data with test size being 20% of the data***","265164df":"###  ***importing the required libraries***","569d119b":"### ***Reading the data*** ","e3cf6740":"# If this NoteBook was in any way helpful please do upvote \n\n\n**Any Kind of Issue related to the notebook be sure to comment down below**","416f40be":"### ***Count of total Number of each class in our dataset***","1a4e157e":"### ***Finding the correlation between the columns***","c83bd311":" ***Looking at the Hetmap looks like our data is pretty clean***","de84ed71":"### ***Performing the fit and predict***","67a67bb0":"### ***using the naive bayes algorithm to perform the classification task and using the cross_val_score to test it on the training data and each time shuffleing the class\u2019s samples before splitting into batches to get the better output***","c8852e5f":"### ***Looking for the missing Values in the Dataset***","239df6c5":"### ***Testing out output using the accuracy_score***","f9ca4227":"### ***Performing the label encoding in the dataset to change label data into the numerical data***","2072ed9c":"## ***Box Plots wrt each column and species***"}}