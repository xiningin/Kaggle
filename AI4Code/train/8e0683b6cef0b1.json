{"cell_type":{"82fb2b81":"code","55bd5709":"code","46624313":"code","03ccc791":"code","c3bfe08b":"code","f0b1b580":"code","066b007b":"code","4673828c":"code","7282b9d2":"code","816f3ae8":"code","1361db3b":"code","3a3e8c10":"code","c41a070c":"code","02310870":"code","2ff3dc5f":"code","a0a93be1":"code","0936b08b":"code","5c793263":"code","00326403":"code","e19294ae":"code","b5e476a4":"code","a7d1fd39":"code","9162c349":"code","1a93b449":"code","ef758a99":"code","d5e0ed5a":"code","9a6e2bec":"code","9751c59d":"code","aafe46c9":"code","213cd8bf":"code","713d2d41":"code","b5f65a22":"code","472e63e2":"code","37d44e33":"code","3c03b09b":"code","d6fdc689":"code","02068cc7":"code","2001a406":"code","7e2da435":"code","5c344050":"code","6006eec0":"code","ce04370c":"code","6c91823f":"code","aed457aa":"code","b0843eca":"code","97e67956":"code","1bfd3ea9":"code","75dabbe6":"code","5ccd69cf":"code","c251f294":"code","aa4d47a3":"code","e687b097":"code","f0cfbb8a":"code","a1310c5f":"code","d09245bb":"code","bc61e82f":"code","4dbcf634":"code","ab60f760":"code","0a995e9b":"code","8bea191e":"code","8f8dba69":"code","342cb560":"code","db1f2f69":"code","6d16eea2":"code","d3ea83d6":"code","d67f4f2b":"code","1fcfbe5f":"code","725ff814":"code","ffce2d97":"code","fd8bbcb7":"code","d95da633":"code","abbe532a":"code","b2c5da3d":"code","003fc89a":"code","451bc358":"code","5a0e7e9b":"code","c15b1f08":"code","eba8c391":"code","c5de475f":"code","b8635f57":"code","39bc51d4":"code","82cafcad":"code","41546704":"code","e194e9b6":"code","dac70083":"code","bf0928f5":"code","7c805cec":"code","47ffd4fc":"code","f76ada62":"code","f8b05c16":"code","fd0c2fa7":"code","d2ed5068":"code","4a133c7e":"code","dc9f276e":"code","8149212d":"code","50382c0d":"code","8361e42b":"code","8677c2b9":"code","05820bbe":"code","ab7b4ed7":"code","0bcfd365":"code","ad13b1b8":"code","29bfb51e":"code","13136a97":"code","48fe42c3":"code","b07fe257":"code","b4152e82":"code","44223510":"code","eb5a6877":"code","dd21c173":"code","13ad19ec":"code","b143e5dc":"code","e6ae57bb":"code","374fb2db":"code","a9febdac":"code","2a4e7d85":"code","5c2af181":"code","6463c46d":"code","b819fd6b":"code","1cba565c":"code","7d882c3b":"code","c8742cc1":"code","c738663b":"code","a0f66b39":"code","7894fd38":"code","5d064c77":"code","8f619f30":"code","6e299c13":"code","7e98e554":"markdown","b6550876":"markdown","e0ecfd28":"markdown","0a14e7ac":"markdown","5f5d1ec5":"markdown","b85ee7f6":"markdown","a4033a63":"markdown"},"source":{"82fb2b81":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom numpy import nan","55bd5709":"import pickle","46624313":"import joblib","03ccc791":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nimport tensorflow as tf","c3bfe08b":"from sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler","f0b1b580":"# detect and init the TPU\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\n","066b007b":"\n# instantiate a distribution strategy\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n","4673828c":"from tensorflow.python.tpu import device_assignment as device_assignment_lib\ntf.keras.backend.set_floatx('float32')\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\ntf.config.experimental_connect_to_cluster(tpu)\ntopology = tf.tpu.experimental.initialize_tpu_system(tpu)\ndevice_assignment = device_assignment_lib.DeviceAssignment(topology,\n                                                           core_assignment=device_assignment_lib.SINGLE_CORE_ASSIGNMENT)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu,device_assignment)\n","7282b9d2":"forex_2018 = pd.read_csv('..\/input\/forex-2018\/richard_2k18.csv',\n                        parse_dates = True,\n                        low_memory = False,\n                        index_col = 'TIME1')","816f3ae8":"forex_2018.sort_values(by = 'TIME1', inplace = True)","1361db3b":"forex_2018.rename(columns = {'Closw' : 'Close'}, inplace = True)","3a3e8c10":"forex_2018","c41a070c":"forex_2018.head()","02310870":"forex_daily_2018 = forex_2018.resample('D').mean()","2ff3dc5f":"forex_daily_2018","a0a93be1":"plt.figure(figsize=(20,10))\nplt.plot(forex_2018.iloc[:,0:1])","0936b08b":"split = int(0.65 * len(forex_2018))","5c793263":"train = forex_2018[:]#split]","00326403":"train.head(50)","e19294ae":"train = train.drop(columns = 'Volume', axis =1)","b5e476a4":"test = forex_2018[split:]","a7d1fd39":"test","9162c349":"test = test.drop(columns = 'Volume', axis =1)","1a93b449":"train.shape\n","ef758a99":"test.shape","d5e0ed5a":"train.head(100)","9a6e2bec":"train = np.array(train, dtype = 'float64')","9751c59d":"X_train = []\ny_train = []\n\nfor i in range(60, len(train)-60):\n    X_train.append(train[i-60:i])\n    y_train.append(train[i:i+60])","aafe46c9":"X_train = np.array(X_train, dtype = 'float64')\ny_train = np.array(y_train, dtype = 'float64')","213cd8bf":"X_train.shape","713d2d41":"X_train = X_train.reshape(525480,60)","b5f65a22":"y_train = y_train.reshape(525480,60)","472e63e2":"X_train.shape, y_train.shape","37d44e33":"X_train","3c03b09b":"y_train","d6fdc689":"sc = MinMaxScaler()\nX_train = sc.fit_transform(X_train)\n","02068cc7":"X_train","2001a406":"pd.DataFrame(y_train)","7e2da435":"y_train = sc.fit_transform(y_train)","5c344050":"X_train.shape, y_train.shape","6006eec0":"X_train = X_train.reshape(525480,60,1)","ce04370c":"# instantiating the model in the strategy scope creates the model on the TPU\n#with tpu_strategy.scope():\n#   model = tf.keras.Sequential( \u2026 ) # define your model normally\n#    model.compile( \u2026 )\n\n# train model normally\n# model.fit(training_dataset, epochs=EPOCHS, steps_per_epoch=\u2026)    \n    ","6c91823f":"# Max batch size = available GPU memory bytes \/ 4 \/ (size of tensors + trainable parameters)","aed457aa":"with tpu_strategy.scope():\n    reg = Sequential()\n    reg.add(LSTM(units = 200, activation = 'relu', input_shape = (60,1)))\n    #reg.add(Dense(60, activation='relu'))\n    reg.add(Dense(60))\n    \n    #reg.add(Dense(y_train.shape[1]))\n    reg.compile(loss = 'mse', optimizer = 'adam')","b0843eca":"reg.summary()","97e67956":"\"\"\"\nfrom keras import callbacks \nearlystopping = callbacks.EarlyStopping(monitor =\"val_loss\",  \n                                        mode =\"min\", patience = 5,  \n                                        restore_best_weights = True) \n  \nhistory = reg.fit(X_train, y_train, batch_size = 32,  \n                    epochs = 25,validation_split = 0.2,  \n                    callbacks =[earlystopping]) \n\"\"\"\n\n","1bfd3ea9":"fitist = reg.fit(\n    X_train, y_train, \n    verbose = True, \n    epochs = 100,\n    batch_size = 512,\n    validation_split = 0.2, # 1M records\n    shuffle = True)","75dabbe6":"#reg.fit(X_train, y_train, epochs = , batch_size = 32, validation_split = 0.2)","5ccd69cf":"tf.size(\n    X_train, out_type=tf.dtypes.int32, name=None\n)\n","c251f294":"15900000000\/4\/(173660+20491200)","aa4d47a3":"#16 * tpu_strategy.num_replicas_in_sync","e687b097":"#filename = 'finalized_model.sav'\n#pickle.dump(reg, open(filename, 'wb'))","f0cfbb8a":"test = np.array(test, dtype = 'float32')","a1310c5f":"X_test = []\ny_test = []\n\nfor i in range(60, len(test)-60):\n    X_test.append(test[i-60:i])\n    y_test.append(test[i:i+60])","d09245bb":"X_test, y_test = np.array(X_test), np.array(y_test)","bc61e82f":"X_test = X_test.reshape(183840, 60)\n","4dbcf634":"y_test = y_test.reshape(183840, 60)","ab60f760":"X_test = sc.transform(X_test)\ny_test = sc.transform(y_test)","0a995e9b":"X_test.shape","8bea191e":"X_test = X_test.reshape(183840,60,1)","8f8dba69":"y_pred = reg.predict(X_test)","342cb560":"y_pred = sc.inverse_transform(y_pred)","db1f2f69":"y_true = sc.inverse_transform(y_test)","6d16eea2":"X_test.shape, y_pred.shape","d3ea83d6":"def evaluate_model(y_true, y_predicted):\n    scores = []\n    \n    #calculate scores for each day\n    for i in range(y_true.shape[1]):\n        mse = mean_squared_error(y_true[:,i], y_predicted[:,i])\n        rmse = np.sqrt(mse)\n        scores.append(rmse)\n        \n    #calculate scores for whole prediction\n    total_score = 0\n    for row in range(y_true.shape[1]):\n        for col in range(y_predicted.shape[1]):\n            total_score = total_score + (y_true[row, col] - y_predicted[row, col]) ** 2\n    total_score = np.sqrt(total_score\/(y_true.shape[0] * y_predicted.shape[1]))\n    \n    return total_score, scores","d67f4f2b":"score, scores = evaluate_model(y_true, y_pred)","1fcfbe5f":"tmp = []\nfor i in range(len(y_true)):\n    tmp.append(np.std(y_true[i]))","725ff814":"np.mean(tmp) ","ffce2d97":"score","fd8bbcb7":"pd.DataFrame(y_pred)\n\n\n","d95da633":"pd.DataFrame(y_true)\n\n","abbe532a":"X_test = X_test.reshape(183840,60)","b2c5da3d":"X_test.shape","003fc89a":"X_test = sc.inverse_transform(X_test)\n\n","451bc358":"pd.DataFrame(X_test)","5a0e7e9b":"mins = range(1,61)\nplt.figure(figsize=(20,10))\nplt.plot(mins, scores, marker='o', label='lstm')\nplt.show()","c15b1f08":"forex_2019 = pd.read_csv('..\/input\/forex2019\/richard_2k19.csv',\n                        parse_dates = True,\n                        low_memory = False,\n                        index_col = 'TIME1')","eba8c391":"forex_2019.sort_values(by = 'TIME1', inplace = True)","c5de475f":"plt.figure(figsize=(20,10))\nplt.plot(forex_2019.iloc[:,0:1])","b8635f57":"test_19 = forex_2019.copy()","39bc51d4":"test_19 = pd.DataFrame(test_19[:split])","82cafcad":"test_19.shape","41546704":"test_19 = test_19.drop(columns = 'Volume', axis =1)","e194e9b6":"test_19 = np.array(test_19, dtype = 'float32')","dac70083":"X_19 = []\ny_19 = []\n\nfor i in range(60, len(test_19)-60):\n    X_19.append(test_19[i-60:i])\n    y_19.append(test_19[i:i+60])","bf0928f5":"X_19, y_19 = np.array(X_19), np.array(y_19)","7c805cec":"X_19.shape","47ffd4fc":"X_19 = X_19.reshape(341520, 60)","f76ada62":"y_19 = y_19.reshape(341520, 60)","f8b05c16":"X_19 = sc.transform(X_19)\ny_19 = sc.transform(y_19)","fd0c2fa7":"X_19 = X_19.reshape(341520,60,1)","d2ed5068":"y_19_pred = reg.predict(X_19)","4a133c7e":"y_19_pred = sc.inverse_transform(y_19_pred)","dc9f276e":"y_19_true = sc.inverse_transform(y_19)","8149212d":"X_19.shape, y_19_pred.shape","50382c0d":"y_19_pred","8361e42b":"score_19, scores_19 = evaluate_model(y_19_true, y_19_pred)","8677c2b9":"tmp_19 = []\nfor i in range(len(y_19_true)):\n    tmp_19.append(np.std(y_19_true[i]))","05820bbe":"np.mean(tmp_19) ","ab7b4ed7":"score_19","0bcfd365":"plt.figure(figsize=(20,10))\nplt.plot(mins, scores_19, marker='o', label='lstm')\nplt.show()","ad13b1b8":"pd.DataFrame(y_19_pred)","29bfb51e":"pd.DataFrame(y_19_true)\n","13136a97":"# 5257, 5263\n# 60","48fe42c3":"y_19_pred[5257-60,:7], y_19_true[5257-60,:7]","b07fe257":"y_19_true[5257]","b4152e82":"forex_2019.iloc[5257]","44223510":"forex_2019","eb5a6877":"y_temp_pred = y_19_pred[5257-60]","dd21c173":"y_temp_real = y_19_true[5257-60]","13ad19ec":"def rmse(predictions, targets):\n    return np.sqrt(((predictions - targets) ** 2).mean())","b143e5dc":"rmse_lstm_simple = rmse(y_temp_pred, y_temp_real)","e6ae57bb":"rmse_lstm_simple","374fb2db":"y_temp_pred","a9febdac":"y_temp_real","2a4e7d85":"pd.DataFrame(test_19)","5c2af181":"forex_2019_pred = (pd.DataFrame(forex_2019[:split])).iloc[60:-60,0]","6463c46d":"forex_2019_pred","b819fd6b":"pred_19 = []\nfor i in range(0,341520,60):\n    for j in range(len(pd.DataFrame(y_19_pred).columns)):\n        pred_19.append(y_19_pred[i,j])","1cba565c":"true_19 = []\nfor i in range(0,341520,60):\n    for j in range(len(pd.DataFrame(y_19_true).columns)):\n        true_19.append(y_19_true[i,j])","7d882c3b":"forex_2019_pred = pd.DataFrame(forex_2019_pred)","c8742cc1":"forex_2019_pred['True'] = true_19","c738663b":"forex_2019_pred['pred'] = pred_19","a0f66b39":"forex_2019_pred_plot = forex_2019_pred.copy()","7894fd38":"#forex_2019_pred_plot = forex_2019_pred_plot.set_index('TIME1')","5d064c77":"forex_2019_pred_plot = forex_2019_pred_plot.drop(columns = 'Close')","8f619f30":"%%time\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\n\nfig = px.line(title = \"Pred vs True\")\nfor i in forex_2019_pred_plot.columns:\n    fig.add_scatter(x = forex_2019_pred_plot.index, y = forex_2019_pred_plot[i], name = i) # add a new Scatter trace\n\nfig.show()\n","6e299c13":"forex_2019_pred_plot","7e98e554":"### Prepare Testing Data","b6550876":"# Long Short Term Memory","e0ecfd28":"### LSTM Model","0a14e7ac":"### Evaluate the Model","5f5d1ec5":"# Exploratory Data Analysis","b85ee7f6":"### Train & Test Split","a4033a63":"### Preparing Training Data"}}