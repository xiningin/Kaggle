{"cell_type":{"31b451d9":"code","51e756b5":"code","e48872b3":"code","be382a34":"code","d8600430":"code","01964b2d":"code","44b3af60":"code","7203ef55":"code","350202eb":"code","78dc0159":"code","6f23eba7":"code","4c7fb8a1":"code","12cd10ea":"code","f4e51e03":"code","a5a85d3f":"code","2afdf166":"code","383ca7ea":"code","e34c3651":"code","0dbb9641":"code","1736a528":"code","6cd5c5f0":"code","79b73f18":"code","e5c7c61a":"code","89e4d2d5":"code","1a43c373":"code","b231541a":"code","8c8c86f6":"code","b62c316a":"code","b366ee89":"code","a423fd01":"code","59e134bf":"code","560ff897":"code","6d6403ea":"markdown","a07736ad":"markdown","7c2bbec0":"markdown","5e88d9f7":"markdown","790f03bf":"markdown","0fcb4c4f":"markdown","78d20af5":"markdown","a9798ed3":"markdown","445775ac":"markdown","01b1e464":"markdown","61525099":"markdown","3d513166":"markdown","3ff15026":"markdown","164090aa":"markdown","9cb276c5":"markdown","a7a74d83":"markdown","02cc34fc":"markdown","4ea1994a":"markdown","ab714f0e":"markdown","fa12236d":"markdown","c58430fd":"markdown","7aa441bc":"markdown","806d562b":"markdown","9306258f":"markdown","458760c8":"markdown","238ac302":"markdown","d60cf54a":"markdown","251bcc0b":"markdown","37fc6a83":"markdown","57c890c5":"markdown","473e61c4":"markdown","213f2f95":"markdown","c1929802":"markdown","55879b00":"markdown","070701c2":"markdown","3f1925eb":"markdown","3be54749":"markdown","465fa91a":"markdown","8c620e34":"markdown","8a7b1645":"markdown"},"source":{"31b451d9":"%%html\n<style> \n@import url('https:\/\/fonts.googleapis.com\/css?family=Orbitron|Roboto');\nbody {background-color: gainsboro;} \na {color: #37c9e1; font-family: 'Roboto';} \nh1 {color: #37c9e1; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;} \nh2, h3 {color: slategray; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;}\nh4 {color: #818286; font-family: 'Roboto';}\nspan {text-shadow: 4px 4px 4px #aaa;}\ndiv.output_prompt, div.output_area pre {color: white;}\ndiv.input_prompt, div.output_subarea {color: #37c9e1;}      \ndiv.output_stderr pre {background-color: gainsboro;}  \ndiv.output_stderr {background-color: slategrey;}       \n<\/style>","51e756b5":"import sqlite3\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import scale","e48872b3":"path = \"..\/input\/\" \ndatabase = path + 'database.sqlite'\n\nconn = sqlite3.connect(database)\ntables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", conn)\nprint(\"Connection Successful\",conn)","be382a34":"df = pd.read_sql_query(\"SELECT * FROM Player_Attributes\", conn)\ndf","d8600430":"df.columns","01964b2d":"df.describe().transpose()","44b3af60":"df.isnull().any().any(), df.shape","7203ef55":"df.isnull().sum(axis=0)","350202eb":"rows = df.shape[0]\ndf=df.dropna()","78dc0159":"print(rows)\ndf.isnull().any().any(), df.shape","6f23eba7":"rows - df.shape[0]","4c7fb8a1":"df.isnull().sum()","12cd10ea":"df.head(10)","f4e51e03":"df[:10][['penalties', 'overall_rating']]","a5a85d3f":"df['overall_rating'].corr(df['penalties'])","2afdf166":"potentialFeatures  = ['acceleration', 'curve', 'free_kick_accuracy', 'ball_control', 'shot_power', 'stamina']","383ca7ea":"for fc in potentialFeatures:\n    related = df['overall_rating'].corr(df[fc])\n    print(\"%s: %f\" % (fc,related))","e34c3651":"correlation_matrix  = df.corr()\ncorrelation_matrix[\"overall_rating\"].sort_values(ascending=False)","0dbb9641":"columns = ['potential',  'crossing', 'finishing', 'heading_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',\n       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',\n       'vision', 'penalties', 'marking', 'standing_tackle', 'sliding_tackle',\n       'gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning',\n       'gk_reflexes']","1736a528":"correlations = [ df['overall_rating'].corr(df[f]) for f in columns ]","6cd5c5f0":"len(columns),len(correlations)","79b73f18":"def plot_dataframe(df, y_label):  \n    color='red'\n    fig = plt.gcf()\n    fig.set_size_inches(10, 5)\n    plt.ylabel(y_label)\n\n    ax = df.correlation.plot(linewidth=3.3, color=color)\n    ax.set_xticks(df.index)\n    ax.set_xticklabels(df.attributes, rotation=75); \n    plt.show()","e5c7c61a":"df1 = pd.DataFrame({'attributes': columns, 'correlation': correlations})","89e4d2d5":"plot_dataframe(df1, 'Player\\'s Overall Rating')\nplt.xkcd()","1a43c373":"selectfivefeatures = ['gk_kicking', 'potential', 'marking', 'interceptions', 'standing_tackle']\nselectfivefeatures","b231541a":"df_select = df[selectfivefeatures].copy(deep=True)","8c8c86f6":"df_select.head()","b62c316a":"# Perform scaling on the dataframe containing the features\n\ndata = scale(df_select)\n\n# Define number of clusters\nnoOfClusters = 4\n\n# Train a model\nmodel = KMeans(init='k-means++', n_clusters=noOfClusters, n_init=20).fit(data)","b366ee89":"print(90*'*')\nprint(\"\\nCount of players in each cluster\")\nprint(90*'*')\n\npd.value_counts(model.labels_, sort=False)","a423fd01":"def pd_centers(featuresUsed, centers):\n    from itertools import cycle, islice\n    from pandas.tools.plotting import parallel_coordinates\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    import numpy as np\n    \n    colNames = list(featuresUsed)\n    colNames.append('prediction')\n    # Zip with a column called 'prediction' (index)\n    Z = [np.append(A, index) for index, A in enumerate(centers)]\n    \n    # Convert to pandas for plotting\n    P = pd.DataFrame(Z, columns=colNames)\n    P['prediction'] = P['prediction'].astype(int)\n    return P\n\ndef parallel_plot(data):\n    from itertools import cycle, islice\n    from pandas.tools.plotting import parallel_coordinates\n    import matplotlib.pyplot as plt\n    \n    my_colors = list(islice(cycle(['b', 'r', 'g', 'y', 'k']), None, len(data)))\n    plt.figure(figsize=(15,8)).gca().axes.set_ylim([-2.5,+2.5])\n    parallel_coordinates(data, 'prediction', color = my_colors, marker='o')","59e134bf":"Pan = pd_centers(featuresUsed=selectfivefeatures, centers=model.cluster_centers_)\nPan","560ff897":"%matplotlib inline \nparallel_plot(Pan)\nplt.xkcd()","6d6403ea":"## &#128681; Highlites:\nWe now have 4 clusters based on the features we selected, we can treat them as profiles for similar groups of players. We can visualize these profiles by plotting the centers for each cluster, i.e., the average values for each featuere within the cluster. ","a07736ad":"* ## &#128268; Connection Database:\nThe basic structure of the query is very simple: You define what you want to see after the SELECT, * means all possible columns You choose the table after the FROM You add the conditions for the data you want to use from the table(s) after the WHERE\n![Imgur](https:\/\/i.imgur.com\/nl0oMt1.png)\nThe stracture, and the order of the sections matter, while spaces, new lines, capital words and indentation are there to make the code easier to read.","7c2bbec0":"* Now let's try to find how many data points in each column are null.","5e88d9f7":"# \ud83c\udf10   Code Library, Style, and Links","790f03bf":"\n## &#128285; Which features have the highest correlation with overall_rating?\n* Looking at the values printed by the previous cell, we notice that the to two are \"ball_control\" (0.44) and \"shot_power\" (0.43). So these two features seem to have higher correlation with \"overall_rating\".","0fcb4c4f":"* Now if we check the null values and number of rows, we will see that there are no null values and number of rows decreased accordingly.","78d20af5":"* Most of the time, we are only interested in plotting some columns. In that case, we can use the pandas column selection option as follows. Please ignore the first column in the output of the one line code below. It is the unique identifier that acts as an index for the data.\n\n**Note: From this point on, we will start referring to the columns as \"features\" in our description.**","a9798ed3":"\n## &#128295; Data Cleaning: Handling Missing Data:\n\nReal data is never clean. We need to make sure we clean the data by converting or getting rid of null or missing values.\nThe next code cell will show you if any of the 183978 rows have null value in one of the 42 columns.","445775ac":"## &#128505; &#128503;  Feature Correlation Analysis\n\nNext, we will check if 'penalties' is correlated to 'overall_rating'. We are using a similar selection operation, bu this time for all the rows and within the correlation function.","01b1e464":"## &#128203; Definitions of SQL:\n\nSQL is a conceptual language for working with data stored in databases. In our case, SQLite is the specific implementation. Most SQL languges share all of the capabilities in this doc. The differences are usually in performance and advances analytical funcionalities (and sometimes bugs of course). Eventually, we will use SQL lunguage to write queries that would pull data from the DB, manipulate it, sort it, and extract it.\n\nThe most important component of the DB is its tables - that's where all the data stored. Usually the data would be devided to many tables, and not stored all in one place (so designing the data stracture propely is very important). Most of this script would handle how to work with tables. Other than tables, there are some other very useful concepts\/features that we won't talk about:\n\n* table creation\n\n* inserting \/ updating data in the DB\n\n* functions - gets a value as an input, and returns manipulation of that value (for example function that remove white spaces)","61525099":"## &#128505; &#128503; Select Features on Which to Group Players","3d513166":"# &#128187; Perform KMeans Clustering","3ff15026":"## &#128195; Create a list of potential Features that you want to measure correlation with","164090aa":"## &#128681; Highlites:\nWe make sure that the number of selected features and the correlations calculated are the same, e.g., both 34 in this case. Next couple of cells show some lines of code that use pandas plaotting functions to create  graph of these correlation vealues and column names.","9cb276c5":"# &#128225; Motivation\n![Imgur](https:\/\/i.imgur.com\/aRe0Ya8.jpg)","a7a74d83":"# &#128204; Getting Started\n\nTo get started, we will need to:\n\nDownload the data from: https:\/\/www.kaggle.com\/hugomathien\/soccer\n\nExtract the zip file called \"soccer.zip\" ","02cc34fc":"## &#128200; Predicting: 'overall_rating' of a player","4ea1994a":"## &#128221; Exploring Data\nWe will start our data exploration by generating simple statistics of the data. \n\n* Let us look at what the data columns are using a pandas attribute called \"columns\".","ab714f0e":"# &#128200; &#128201; &#128202; Data Visualization:","fa12236d":"* Now that our data cleaning step is reasonably complete and we can trust and understand the data more, we will start diving into the dataset further.","c58430fd":"\n# &#128202; &#128201; &#128200; Visualization of Clusters","7aa441bc":"* The for loop below prints out the correlation coefficient of \"overall_rating\" of a player with each feature we added to the list as potential.","806d562b":"### &#128199; Note: \nGenerally, someone with domain knowledge needs to define which features. We could have also selected some of the features with highest correlation with overall_rating. However, it does not guarantee best outcome always as we are not sure if the top five features are independent. For example, if 4 of the 5 features depend on the remaining 1 feature, taking all 5 does not give new information.","9306258f":"## &#128101; Are these correlated (using Pearson's correlation coefficient) ?","458760c8":"# &#128203; Overview of European Soccer Database:\n\nThis European Soccer Database has more than 25,000 matches and more than 10,000 players for European professional soccer seasons from 2008 to 2016. \n\nThe goal of this kernel is to walk you through an end to end process of analysing  a dataset and introduce you to what we will be covering in this kernel. Our simple analytical process will include some steps for exploring and cleaning our dataset, some steps for predicting player performance using basic statistics, and some steps for grouping similar clusters using machine learning. \n\nIf you have other ideas, you can add a comment  &#128071; ","238ac302":"### &#128223; Check length of Columns and Correlations","d60cf54a":"## &#128209; Import Libraries\n\nWe will start by importing the Python libraries we will be using in this analysis. These libraries include:\n\n* sqllite3 for interacting with a local relational database; \n\n* pandas and numpy for data ingestion and manipulation.\n\n* matplotlib for data visualization\n\n* specific methods from sklearn for Machine Learning ","251bcc0b":"## &#128223; Fixing Null Values by Deleting Them","37fc6a83":"* Next will display simple statistics of our dataset. You need to run each cell to make sure you see the outputs.","57c890c5":"* To find exactly how many lines we removed, we need to subtract the current number of rows in our data frame from the original number of rows.","473e61c4":"### &#128199; Note: \nNow we will use a machine learning method called KMeans to cluster the values (i.e., player features on gk_kicking, potential, marking, interceptions, and standing_tackle). We will ask for four clusters. ","213f2f95":"## &#128197; Load and Read the Data\nNow, we will need to read the dataset using the commands below.\n\nNote: Make sure Database connection before you run the data load and read code below.\n\ndf is a variable pointing to a pandas data frame. We will learn about them in an upcoming kernel.","c1929802":"# &#128202; Graph or Ploting","55879b00":"* Next we will start plotting the correlation coefficients of each feature with \"overall_rating\". We start by selecting the columns and creating a list with correlation coefficients, called \"correlations\".","070701c2":"### Let's take a look at top few rows.\nWe will use the head function for data frames for this task. This gives us every column in every row.","3f1925eb":"# &#128304; Clustering Players into Similar Groups\nUntil now, we used basic statistics and correlation coefficients to start forming an opinion, but can we do better? What if we took some features and start looking at each player using those features? Can we group similar players based on these features? Let's see how we can do this.","3be54749":"![Imgur](https:\/\/i.imgur.com\/Gmo1HgD.png)","465fa91a":"* In our next two lines, we will drop the null values by going through each row.","8c620e34":"#### &#128221; Observations:\n\nWe see that Pearson's Correlation Coefficient for these two columns is 0.39. \n\nPearson goes from -1 to +1. A value of 0 would have told there is no correlation, so we shouldn\u2019t bother looking at that attribute. A value of 0. shows some correlation, although it could be stronger. \n\nAt least, we have these attributes which are slightly correlated.\n\nNext, we will create a list of features that we would like to iterate the same operation on.","8a7b1645":"Useful `LINKS`:\n\n&#128187; 1.  [Understanding European Soccer Video](https:\/\/www.youtube.com\/watch?v=FZ4i3KX2CW4)\n\n&#128187; 2. [European Soccer Database Research Paper](https:\/\/drive.google.com\/open?id=1Zu58FMy9JJZMBf_7ZnioKwZGP73qYD-U)\n\n&#128187; 3. [sqllite3 for Database](https:\/\/docs.python.org\/3\/library\/sqlite3.html)\n\n&#128187; 4. [Matplotlib  Visualization ](https:\/\/matplotlib.org\/api\/pyplot_api.html)\n"}}