{"cell_type":{"d3c4f688":"code","8efd5b23":"code","b4a2d3f9":"code","244ca73b":"code","77c85a82":"code","cfbf0a9e":"code","7bbe995e":"code","6fd04de1":"code","9092064b":"code","be0449e9":"code","fee50da2":"markdown","1780de41":"markdown","d127d3c5":"markdown","cf6cfc07":"markdown","39b6ec31":"markdown","e373aeac":"markdown","85f6cda4":"markdown","924ac217":"markdown","6174f820":"markdown","e7ad570d":"markdown"},"source":{"d3c4f688":"# Importing Libraries\nimport pandas as pd\n### Data Visualization libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_predict\nimport numpy as np","8efd5b23":"train_df = pd.read_csv('..\/input\/loan-approval-prediction-dataset\/LoanApprovalPrediction.csv')\ntrain_df","b4a2d3f9":"train_df.info()","244ca73b":"############ Count number of Categorical and Numerical Columns ######################\ntrain_df = train_df.drop(columns=['Loan_ID']) ## Dropping Loan ID\ncategorical_columns = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area','Credit_History','Loan_Amount_Term']\n#categorical_columns = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area','Loan_Amount_Term']\n\nprint(categorical_columns)\nnumerical_columns = ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount']\nprint(numerical_columns)","77c85a82":"fig,axes = plt.subplots(4,2,figsize=(12,15))\nfor idx,cat_col in enumerate(categorical_columns):\n    row,col = idx\/\/2,idx%2\n    sns.countplot(x=cat_col,data=train_df,hue='Loan_Status',ax=axes[row,col])\n\n\nplt.subplots_adjust(hspace=1)","cfbf0a9e":"fig,axes = plt.subplots(1,3,figsize=(17,5))\nfor idx,cat_col in enumerate(numerical_columns):\n    sns.boxplot(y=cat_col,data=train_df,x='Loan_Status',ax=axes[idx])\n\nprint(train_df[numerical_columns].describe())\nplt.subplots_adjust(hspace=1)","7bbe995e":"#### Encoding categrical Features: ##########\ntrain_df_encoded = pd.get_dummies(train_df,drop_first=True)\ntrain_df_encoded.head()","6fd04de1":"########## Assign X and Y ############\nX = train_df_encoded.drop(columns='Loan_Status_Y')\ny = train_df_encoded['Loan_Status_Y']\n\n################# Splitting into Train -Test Data #######\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,stratify =y,random_state =42)\n\n############### Handling\/Imputing Missing values #############\nfrom sklearn.impute import SimpleImputer\nimp = SimpleImputer(strategy='mean')\nimp_train = imp.fit(X_train)\nX_train = imp_train.transform(X_train)\nX_test_imp = imp_train.transform(X_test)","9092064b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,f1_score\nfrom sklearn.model_selection import cross_val_predict\n\ntrain_accuracies = []\ntrain_f1_scores = []\ntest_accuracies = []\ntest_f1_scores = []\nthresholds = []\n\n#for thresh in np.linspace(0.1,0.9,8): ## Sweeping from threshold of 0.1 to 0.9\nfor thresh in np.arange(0.1,0.9,0.1): ## Sweeping from threshold of 0.1 to 0.9\n    logreg_clf = LogisticRegression(solver='liblinear')\n    logreg_clf.fit(X_train,y_train)\n    \n    y_pred_train_thresh = logreg_clf.predict_proba(X_train)[:,1]\n    y_pred_train = (y_pred_train_thresh > thresh).astype(int)\n\n    train_acc = accuracy_score(y_train,y_pred_train)\n    train_f1 = f1_score(y_train,y_pred_train)\n    \n    y_pred_test_thresh = logreg_clf.predict_proba(X_test_imp)[:,1]\n    y_pred_test = (y_pred_test_thresh > thresh).astype(int) \n    \n    test_acc = accuracy_score(y_test,y_pred_test)\n    test_f1 = f1_score(y_test,y_pred_test)\n    \n    train_accuracies.append(train_acc)\n    train_f1_scores.append(train_f1)\n    test_accuracies.append(test_acc)\n    test_f1_scores.append(test_f1)\n    thresholds.append(thresh)\n    \n    \nThreshold_logreg = {\"Training Accuracy\": train_accuracies, \"Test Accuracy\": test_accuracies, \"Training F1\": train_f1_scores, \"Test F1\":test_f1_scores, \"Decision Threshold\": thresholds }\nThreshold_logreg_df = pd.DataFrame.from_dict(Threshold_logreg)\n\nplot_df = Threshold_logreg_df.melt('Decision Threshold',var_name='Metrics',value_name=\"Values\")\nfig,ax = plt.subplots(figsize=(15,5))\nsns.pointplot(x=\"Decision Threshold\", y=\"Values\",hue=\"Metrics\", data=plot_df,ax=ax)","be0449e9":"thresh = 0.4 ### Threshold chosen from above Curves\ny_pred_test_thresh = logreg_clf.predict_proba(X_test_imp)[:,1]\ny_pred = (y_pred_test_thresh > thresh).astype(int) \nprint(\"Test Accuracy: \",accuracy_score(y_test,y_pred))\nprint(\"Test F1 Score: \",f1_score(y_test,y_pred))\nprint(\"Confusion Matrix on Test Data\")\npd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","fee50da2":"**Plots above convey following things about the dataset:**\n\n1. Loan Approval Status: About 2\/3rd of applicants have been granted loan.\n2. Sex: There are more Men than Women (approx. 3x)\n3. Martial Status: 2\/3rd of the population in the dataset is Marred; Married applicants are more likely to be granted loans.\n4. Dependents: Majority of the population have zero dependents and are also likely to accepted for loan.\n5. Education: About 5\/6th of the population is Graduate and graduates have higher propotion of loan approval\n6. Employment: 5\/6th of population is not self employed.\n7. Property Area: More applicants from Semi-urban and also likely to be granted loans.\n8. Applicant with credit history are far more likely to be accepted.\n9. Loan Amount Term: Majority of the loans taken are for 360 Months (30 years). Now, let's also analyze Numerical Columns:","1780de41":"# Loan Approval Prediction:","d127d3c5":"Observations: We can see there are total 13 columns including target variable, all of them are self explanatory. We also see some missing values, lets take stock of missing columns and what are the possible values for categorical and numerical columnsObservations: We can see there are total 13 columns including target variable, all of them are self explanatory. We also see some missing values, lets take stock of missing columns and what are the possible values for categorical and numerical columns","cf6cfc07":"For Numercical Columns, there is no significant relation to Loan approval status.","39b6ec31":"# Analyze values assigned to columns","e373aeac":"Input data needs to be pre-processed before we feed it to model. Following things need to be taken care:\n\n1. Encoding Categorical Features.\n2. Inputing missing values","85f6cda4":"# Logistic Regression","924ac217":"In this analysis, we did extensive analysis of input data and were able to achieve Test Accuracy of 86 %","6174f820":"# Preprocessing Data:","e7ad570d":"Problem: Company wants to automate the loan eligibility process (real time) based on customer detail provided while filling online application form. These details are Gender, Marital Status, Education, Number of Dependents, Income, Loan Amount, Credit History and others. To automate this process, they have given a problem to identify the customers segments, those are eligible for loan amount so that they can specifically target these customers. Here they have provided a partial data set."}}