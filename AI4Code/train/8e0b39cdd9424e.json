{"cell_type":{"37e2a36e":"code","03a6ad8a":"code","906b8041":"code","65f66577":"code","187dfa4e":"code","9ac6ea3b":"code","c654d506":"code","eac7d9de":"code","bfdd7b84":"code","5a58d243":"code","7216265b":"code","3c1b905b":"code","a979691b":"code","80f24893":"code","e802ccd6":"code","e49c863e":"code","bc270285":"code","6f02fbbb":"code","3c092afd":"code","2af5434f":"code","412cccb2":"code","506c98a8":"code","521e1839":"code","0b499e3c":"code","23845a55":"code","028607a1":"code","0622638d":"code","e4ae76e6":"code","a493cd09":"code","3998093d":"code","0b035ef2":"code","73b36238":"code","310e26bb":"code","83d2fdcb":"code","c46dcfdf":"code","079c722f":"code","aba3b2bb":"code","adeb9a8b":"code","ba3d5738":"code","ac348c05":"code","b201e4db":"code","aca5d471":"code","f05e6902":"code","4799688d":"code","470433a4":"code","c66ec6da":"code","ca6e426f":"code","8ac5740f":"code","db875d5b":"code","76cbeea1":"code","dacb5daa":"code","491ab844":"code","07a13814":"code","0a790000":"code","c52a09b4":"code","2d97e00b":"code","1a7bbc3d":"code","4f996cc3":"code","533da135":"code","e2a2512b":"code","d8c16048":"code","f01e8841":"code","f9cd2e0e":"code","f1472ef5":"code","8ae84956":"code","c75b6aa4":"code","768cc301":"code","810c985b":"code","ff014d02":"code","c7edf150":"code","00fee06c":"code","38a9e492":"code","8ed66f32":"code","a79d3751":"code","26d1110f":"code","8fd7007a":"code","02265abb":"code","62edd8fc":"code","848d8089":"code","bcadddbb":"code","b686ab2f":"code","1fb90984":"code","661612a4":"code","d61197c1":"code","2849eb0d":"code","7f25eb39":"code","8398816c":"code","018e8605":"code","0f830918":"code","e91f4b55":"code","0e3a54b5":"code","22597544":"code","5887948f":"code","a4e21019":"code","c95a2b93":"code","f88e080c":"code","1b6a2d57":"code","66c49de7":"code","4d231c46":"code","2a8dccc5":"code","fbc934fc":"code","dc960b3d":"code","862c4004":"code","6755a3b0":"code","f1de14f7":"code","13f7e1e1":"code","2c864225":"code","3f2e38c6":"code","0b1e4e3f":"code","86f49a1f":"code","a4ed0c5f":"code","10d39791":"code","e27fe4b5":"code","0cf2e7d7":"code","357cab33":"code","6f8b793d":"code","4b7f34ae":"code","10f933e8":"code","a75c51a9":"code","7b9def07":"code","ecb6d91d":"code","fa766ff5":"code","fcbf5b33":"code","44beacfa":"code","aa37883d":"code","65b5c40b":"code","878ca163":"code","92e8f85d":"code","1b9077f3":"code","e33453d1":"code","d4e881ba":"code","3a268f0f":"code","19c082f3":"code","6ffd4a16":"code","7e338a47":"code","7e057998":"code","71ca65bf":"code","a9acff7d":"code","95ad9cb9":"code","cc716f22":"code","ae5d699a":"code","20b59d19":"code","c6a0a99a":"code","1cfe54d9":"code","8437e8bb":"code","cb97e945":"code","56b14f7c":"code","0c33a604":"code","d136fa59":"code","fcd74130":"code","8304eaee":"code","f4885606":"code","95bdb9cc":"code","633521d6":"code","3881052d":"code","83ccdbcd":"code","90c98a67":"code","79a19e42":"code","170ca0e7":"code","5f674c8c":"code","ad186cf2":"code","a1cc2aa5":"code","d0e3b377":"code","51eff582":"code","1ea7221d":"code","396bad21":"code","8ab56072":"markdown","881f9f11":"markdown","81a6cb68":"markdown","41fa9f06":"markdown","ae967f1c":"markdown","76f777ba":"markdown","fcf58144":"markdown","a01ee4b0":"markdown","63dd2763":"markdown","eb7f3d08":"markdown","f068f9df":"markdown","47c1bfd3":"markdown","c0f442d4":"markdown","e56b8e80":"markdown","034c3f84":"markdown"},"source":{"37e2a36e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns               # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\nfrom subprocess import check_output\n\nimport warnings                                            # Ignore warning related to pandas_profiling\nwarnings.filterwarnings('ignore') \n\ndef annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n         ax.annotate(f\"{p.get_height() * 100 \/ df.shape[0]:.2f}%\", (p.get_x() + p.get_width() \/ 2., p.get_height()),\n         ha='center', va='center', fontsize=11, color='black', rotation=0, xytext=(0, 10),\n         textcoords='offset points')             \ndef annot_plot_num(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))\n\nimport os\nprint(os.listdir(\"..\/input\"))","03a6ad8a":"df = pd.read_csv('..\/input\/income_evaluation.csv')","906b8041":"df.head()","65f66577":"df.nunique()","187dfa4e":"df.isnull().sum()","9ac6ea3b":"df.info()","c654d506":"df.columns","eac7d9de":"df.columns = df.columns.str.replace(' ', '')","bfdd7b84":"new_df = df.copy()","5a58d243":"new_df.columns","7216265b":"new_df.head()","3c1b905b":"ax = sns.countplot(new_df['income'])\nplt.xticks(rotation = 30, ha='right')\nannot_plot(ax,0.08,1)","a979691b":"plt.figure(figsize=(12,6))\nax = sns.countplot(new_df['marital-status'], hue = new_df.income)\nplt.xticks(rotation = 30, ha='right')\nannot_plot(ax,0.08,1)","80f24893":"plt.figure(figsize=(12,6))\nax = sns.countplot(new_df['relationship'], hue = new_df.income)\nplt.xticks(rotation = 30, ha='right')\nannot_plot(ax,0.08,1)","e802ccd6":"plt.figure(figsize=(12,6))\nax = sns.countplot(new_df['occupation'], hue = new_df.income)\nplt.xticks(rotation = 30, ha='right')\nannot_plot(ax,0.08,1)","e49c863e":"plt.figure(figsize=(10,6))\nnative_country_count = new_df['native-country'].value_counts()[:10].plot(kind='bar')\nannot_plot(native_country_count, 0.08,1)","bc270285":"native_country_col = pd.get_dummies(new_df['native-country'])\nnative_country_col.head()","6f02fbbb":"native_country_col.columns.values","3c092afd":"new_df = new_df.drop('native-country', axis = 1)","2af5434f":"native_country_col.columns.values","412cccb2":"#reorder_column\ncols = [' ?', ' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba',\n       ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England',\n       ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti',\n       ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India',\n       ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos',\n       ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru',\n       ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico',\n       ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago',\n       ' Vietnam', ' Yugoslavia',' United-States']","506c98a8":"country = native_country_col[cols]","521e1839":"other_country = country.loc[:,' ?':' Yugoslavia'].max(axis=1)\nus_country = country.loc[:,' United-States':].max(axis=1)","0b499e3c":"new_df = pd.concat([new_df,us_country,other_country], axis =1)","23845a55":"new_df.head()","028607a1":"new_df = new_df.rename(columns = {0:\"United_state\",1:\"Other_country\"})","0622638d":"new_df.head(2)","e4ae76e6":"country_mod = new_df.copy()","a493cd09":"country_mod.head()","3998093d":"new_df.columns","0b035ef2":"reorder_cols = ['age', 'workclass', 'fnlwgt', 'education', 'education-num',\n       'marital-status', 'occupation', 'relationship', 'race', 'sex',\n       'capital-gain', 'capital-loss', 'hours-per-week','United_state', \n                'Other_country', 'income']","73b36238":"country_mod = country_mod[reorder_cols]","310e26bb":"country_mod.head()","83d2fdcb":"country_mod.workclass.unique()","c46dcfdf":"country_mod = country_mod.replace(' ?','unknown')","079c722f":"plt.figure(figsize=(10,6))\nworkclass_count = country_mod['workclass'].value_counts().plot(kind='bar')\nannot_plot(workclass_count, 0.08,1)","aba3b2bb":"workclass_dummies = pd.get_dummies(country_mod['workclass'])","adeb9a8b":"workclass_dummies.head()","ba3d5738":"workclass_mod_df = country_mod.copy()","ac348c05":"workclass_mod_df = workclass_mod_df.drop('workclass', axis = 1)","b201e4db":"workclass_mod_df.head()","aca5d471":"workclass_mod_df = pd.concat([workclass_mod_df,workclass_dummies], axis = 1)","f05e6902":"workclass_mod_df.head()","4799688d":"workclass_mod_df.columns","470433a4":"#reorder_col\ncol = ['age', 'fnlwgt', 'education', 'education-num', 'marital-status',\n       'occupation', 'relationship', 'race', 'sex', 'capital-gain',\n       'capital-loss', 'hours-per-week', 'United_state', 'Other_country',\n       ' Federal-gov', ' Local-gov', ' Never-worked', ' Private',\n       ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay',\n       'unknown','income']","c66ec6da":"workclass_mod_df = workclass_mod_df[col]","ca6e426f":"workclass_mod_df.head()","8ac5740f":"workclass_mod_df.nunique()","db875d5b":"plt.figure(figsize=(10,6))\nworkclass_count = country_mod['race'].value_counts().plot(kind='bar')\nannot_plot(workclass_count, 0.08,1)","76cbeea1":"race_dummies = pd.get_dummies(workclass_mod_df['race'])","dacb5daa":"workclass_mod_df = workclass_mod_df.drop('race', axis = 1)","491ab844":"race_mod_df = workclass_mod_df.copy()","07a13814":"race_dummies.head()","0a790000":"race_dummies.columns","c52a09b4":"race_cols = [' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Other', ' Black',' White']","2d97e00b":"race_dummies = race_dummies[race_cols]","1a7bbc3d":"other_country = country.loc[:,' ?':' Yugoslavia'].max(axis=1)\nus_country = country.loc[:,' United-States':].max(axis=1)","4f996cc3":"race_dummies.head(15)","533da135":"Others = race_dummies.loc[:,' Amer-Indian-Eskimo':' Other'].max(axis=1)","e2a2512b":"race_dummies = race_dummies.drop([' Amer-Indian-Eskimo',' Asian-Pac-Islander',' Other'], axis = 1)","d8c16048":"race_dummies = pd.concat([race_dummies,Others], axis = 1)","f01e8841":"race_dummies.head()","f9cd2e0e":"race_dummies = race_dummies.rename(columns = {0:\"Other_race\"})","f1472ef5":"race_dummies.head()","8ae84956":"race_mod_df = pd.concat([race_mod_df, race_dummies], axis = 1)","c75b6aa4":"race_mod_df.head()","768cc301":"race_mod_df.columns","810c985b":"race_col_reorder = ['age', 'fnlwgt', 'education', 'education-num', 'marital-status',\n       'occupation', 'relationship', 'sex', 'capital-gain', 'capital-loss',\n       'hours-per-week', 'United_state', 'Other_country', ' Federal-gov',\n       ' Local-gov', ' Never-worked', ' Private', ' Self-emp-inc',\n       ' Self-emp-not-inc', ' State-gov', ' Without-pay', 'unknown',\n       ' Black', ' White', 'Other_race', 'income']","ff014d02":"race_mod_df = race_mod_df[race_col_reorder]","c7edf150":"race_mod_df.head()","00fee06c":"Education_df = race_mod_df.copy()","38a9e492":"Education_df.education.unique()","8ed66f32":"plt.figure(figsize=(10,6))\neducation_count = Education_df['education'].value_counts().plot(kind='bar')\nannot_plot(education_count, 0.08,1)","a79d3751":"education_dummies = pd.get_dummies(Education_df.education)","26d1110f":"education_dummies.columns","8fd7007a":"edu_cols_reorder = [' Preschool', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' 10th',\n       ' 11th', ' 12th', ' Prof-school', ' Assoc-acdm', ' Assoc-voc',\n       ' Bachelors', ' Some-college', ' Doctorate', ' Masters', ' HS-grad']","02265abb":"education_dummies = education_dummies[edu_cols_reorder]","62edd8fc":"education_dummies.head()","848d8089":"#Others = race_dummies.loc[:,' Amer-Indian-Eskimo':' Other'].max(axis=1)\npre_prof_school = education_dummies.loc[:,' Preschool':' Prof-school'].max(axis=1)","bcadddbb":"assosiate_edu = education_dummies.loc[:,' Assoc-acdm':' Assoc-voc'].max(axis=1)","b686ab2f":"masters_doc = education_dummies.loc[:,' Doctorate':' Masters'].max(axis=1)","1fb90984":"college = education_dummies.loc[:,' Bachelors':' Some-college'].max(axis=1)","661612a4":"Education_df['pre_prof_school'] = pre_prof_school\nEducation_df['college'] = college\nEducation_df['masters_doc'] = masters_doc\nEducation_df['assosiate_edu'] = assosiate_edu","d61197c1":"Education_df.head()","2849eb0d":"Education_df = Education_df.drop(['education'], axis = 1)","7f25eb39":"Education_df.head()","8398816c":"marital_status_df = Education_df.copy()","018e8605":"plt.figure(figsize=(10,6))\nmarital_status_count = marital_status_df['marital-status'].value_counts().plot(kind='bar')\nannot_plot(marital_status_count, 0.08,1)","0f830918":"marital_status_reorder = [' Divorced', ' Married-spouse-absent',' Separated', ' Widowed',\n                          ' Married-AF-spouse', ' Married-civ-spouse',\n                          ' Never-married']","e91f4b55":"marital_status_dummies = pd.get_dummies(marital_status_df['marital-status'])","0e3a54b5":"marital_status_dummies = marital_status_dummies[marital_status_reorder]","22597544":"marital_status_dummies.head()","5887948f":"marital_status_df['Divorced'] = marital_status_dummies.loc[:, ' Divorced':' Widowed'].max(axis=1)\nmarital_status_df['Married' ] = marital_status_dummies.loc[:, ' Married-AF-spouse':' Married-civ-spouse'].max(axis=1)\nmarital_status_df['Never_Married'] = marital_status_dummies[' Never-married']","a4e21019":"marital_status_df.head()","c95a2b93":"marital_status_df = marital_status_df.drop(['marital-status'], axis = 1)","f88e080c":"marital_status_df.head()","1b6a2d57":"occupation_df = marital_status_df.copy()","66c49de7":"plt.figure(figsize=(10,6))\noccupation_count = occupation_df['occupation'].value_counts().plot(kind='bar')\nannot_plot(occupation_count, 0.08,1)","4d231c46":"occupation_dummies = pd.get_dummies(occupation_df['occupation'])","2a8dccc5":"occupation_dummies.columns","fbc934fc":"occupation_reorder = [' Adm-clerical', \n                      ' Armed-Forces',' Farming-fishing',' Handlers-cleaners',' Other-service',\n                      ' Priv-house-serv',' Protective-serv','unknown',\n                      ' Craft-repair', ' Machine-op-inspct',' Tech-support', ' Transport-moving',\n                      ' Exec-managerial',' Prof-specialty',\n                      ' Sales' ]","dc960b3d":"occupation_dummies = occupation_dummies[occupation_reorder]","862c4004":"occupation_dummies.head(2)","6755a3b0":"occupation_df['Group_1_ocp'] = occupation_dummies[' Adm-clerical']\noccupation_df['Group_2_ocp'] = occupation_dummies.loc[:,' Armed-Forces':'unknown'].max(axis=1)\noccupation_df['Group_3_ocp'] = occupation_dummies.loc[:,' Craft-repair':' Transport-moving'].max(axis=1)\noccupation_df['Group_4_ocp'] = occupation_dummies.loc[:,' Exec-managerial':' Prof-specialty'].max(axis=1)\noccupation_df['Group_5_ocp'] = occupation_dummies[' Sales']","f1de14f7":"occupation_df = occupation_df.drop(['occupation'], axis = 1)","13f7e1e1":"occupation_df.head()","2c864225":"occupation_df.columns = occupation_df.columns.str.replace(' ', '')","3f2e38c6":"occupation_df.columns","0b1e4e3f":"relationship_df = occupation_df.copy()","86f49a1f":"relationship_df.head()","a4ed0c5f":"plt.figure(figsize=(10,6))\nrelationship_count = relationship_df['relationship'].value_counts().plot(kind='bar')\nannot_plot(relationship_count, 0.08,1)","10d39791":"relationship_df = relationship_df.drop(['relationship'], axis=1)","e27fe4b5":"relationship_df.head()","0cf2e7d7":"relationship_df['sex'] = relationship_df['sex'].map({' Male':1, ' Female':0})","357cab33":"relationship_df.head()","6f8b793d":"income_df = relationship_df.copy()","4b7f34ae":"income_df.income.unique()","10f933e8":"income_df['income'] = income_df['income'].map({' <=50K':0, ' >50K':1})","a75c51a9":"plt.figure(figsize=(10,6))\nincome_count = income_df['income'].value_counts().plot(kind='bar')\nannot_plot(income_count, 0.08,1)","7b9def07":"final_df = income_df.copy()","ecb6d91d":"final_df.head()","fa766ff5":"final_df.columns","fcbf5b33":"final_col_reorder = ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss',\n       'hours-per-week', 'sex', 'United_state', 'Other_country', 'Federal-gov',\n       'Local-gov', 'Never-worked', 'Private', 'Self-emp-inc',\n       'Self-emp-not-inc', 'State-gov', 'Without-pay', 'unknown', 'Black',\n       'White', 'Other_race', 'pre_prof_school', 'college',\n       'masters_doc', 'assosiate_edu', 'Divorced', 'Married', 'Never_Married',\n       'Group_1_ocp', 'Group_2_ocp', 'Group_3_ocp', 'Group_4_ocp',\n       'Group_5_ocp', 'income']","44beacfa":"final_df = final_df[final_col_reorder]","aa37883d":"final_df.head()","65b5c40b":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import StandardScaler\n\n# the custom scaler class\nclass CustomScaler(BaseEstimator,TransformerMixin):\n    \n    def __init__(self,columns,copy=True,with_mean=True,with_std=True):\n        self.scaler = StandardScaler(copy,with_mean,with_std)\n        self.columns = columns\n        self.mean_ = None\n        self.var_ = None\n        \n    def fit(self, X, y=None):\n        self.scaler.fit(X[self.columns], y)\n        self.mean_ = np.mean(X[self.columns])\n        self.var_ = np.var(X[self.columns])\n        return self\n    \n    def transform(self, X, y=None, copy=None):\n        init_col_order = X.columns\n        X_scaled = pd.DataFrame(self.scaler.transform(X[self.columns]), columns=self.columns)\n        X_not_scaled = X.loc[:,~X.columns.isin(self.columns)]\n        return pd.concat([X_not_scaled, X_scaled], axis=1)[init_col_order]","878ca163":"final_df.columns","92e8f85d":"columns_to_scale = ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss',\n       'hours-per-week']","1b9077f3":"income_scaler = CustomScaler(columns_to_scale)","e33453d1":"unscaled_inputs = final_df.iloc[:,:-1]","d4e881ba":"unscaled_inputs.columns.values","3a268f0f":"income_scaler.fit(unscaled_inputs)","19c082f3":"scaled_inputs = income_scaler.transform(unscaled_inputs)","6ffd4a16":"scaled_inputs.head()","7e338a47":"scaled_inputs.shape","7e057998":"targets = final_df.income","71ca65bf":"from sklearn.model_selection import train_test_split","a9acff7d":"x_train, x_test, y_train, y_test = train_test_split(scaled_inputs, targets, train_size = 0.8, random_state = 20)","95ad9cb9":"print(x_train.shape, y_train.shape)","cc716f22":"print(x_test.shape, y_test.shape)","ae5d699a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","20b59d19":"reg = LogisticRegression()","c6a0a99a":"reg.fit(x_train, y_train)","1cfe54d9":"reg.score(x_train, y_train)","8437e8bb":"pred_y = reg.predict(x_test)","cb97e945":"metrics.confusion_matrix(pred_y,y_test)","56b14f7c":"reg.score(x_test,y_test)","0c33a604":"reg.intercept_","d136fa59":"reg.coef_","fcd74130":"unscaled_inputs.columns.values","8304eaee":"feature_name = unscaled_inputs.columns.values","f4885606":"summary_table = pd.DataFrame(columns=['Feature_name'], data = feature_name)\nsummary_table['Coefficient'] = np.transpose(reg.coef_)","95bdb9cc":"summary_table","633521d6":"summary_table.index = summary_table.index + 1\nsummary_table.loc[0] = ['intercept', reg.intercept_[0]]\nsummary_table = summary_table.sort_index()\nsummary_table","3881052d":"summary_table['Odds_ratio'] = np.exp(summary_table.Coefficient)","83ccdbcd":"summary_table","90c98a67":"summary_table.sort_values('Odds_ratio', ascending = False)","79a19e42":"corr = final_df.corr()","170ca0e7":"plt.figure(figsize=(25,12))\nsns.heatmap(corr, annot=True)\nplt.show()","5f674c8c":"#let's check what params will be best suitable for random forest classification.\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.model_selection import cross_val_score\n\nrfc_clf = RandomForestClassifier()\nparams = {'n_estimators':[25,50,100,150,200,500],'max_depth':[0.5,1,5,10],'random_state':[1,10,20,42],\n          'n_jobs':[1,2]}\ngrid_search_cv = GridSearchCV(rfc_clf, params, scoring='precision')\ngrid_search_cv.fit(x_train, y_train)","ad186cf2":"print(grid_search_cv.best_estimator_)\nprint(grid_search_cv.best_params_)","a1cc2aa5":"rfc_clf = grid_search_cv.best_estimator_\nrfc_clf.fit(x_train,y_train)\nrfc_clf_pred = rfc_clf.predict(x_test)\nprint('Accuracy:',accuracy_score(rfc_clf_pred,y_test) )\nprint('Confusion Matrix:', confusion_matrix(rfc_clf_pred,y_test).ravel()) #tn,fp,fn,tp\nprint('Classification report:')\nprint(classification_report(rfc_clf_pred,y_test))\n\n# Let's make sure the data is not overfitting\nscore_rfc = cross_val_score(rfc_clf,x_train,y_train,cv = 10).mean()\nprint('cross val score:', score_rfc)","d0e3b377":"feature_imp = rfc_clf.feature_importances_.round(3)\nser_rank = pd.Series(feature_imp, index=scaled_inputs.columns).sort_values(ascending = False)\n\nplt.figure(figsize=(12,7))\nsns.barplot(x= ser_rank.values, y = ser_rank.index, palette='deep')\nplt.xlabel('relative importance')\nplt.show()","51eff582":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n# Implement gridsearchcv to see which are our best p\n\nparams = {'C': [0.75, 0.85, 0.95, 1], 'kernel': ['linear', 'poly', 'rbf', 'sigmoid'], \n          'degree': [3, 4, 5]}\n\nsvc_clf = SVC(random_state=42)\ngrid_search_cv = GridSearchCV(svc_clf, params)\ngrid_search_cv.fit(x_train, y_train)","1ea7221d":"print(grid_search_cv.best_estimator_)\nprint(grid_search_cv.best_params_)","396bad21":"svc_clf = grid_search_cv.best_estimator_\nsvc_clf.fit(x_train,y_train)\nsvc_pred = svc_clf.predict(x_test)\n\nprint('Accuracy:',accuracy_score(svc_pred,y_test) )\nprint('Confusion Matrix:', confusion_matrix(svc_pred,y_test,labels=[0,1])) #tn,fp,fn,tp\nprint('Classification report:')\nprint(classification_report(svc_pred,y_test))\n\n# Let's make sure the data is not overfitting\nscore_svc = cross_val_score(svc_clf,x_train,y_train, cv = 10).mean()\nprint('cross val score:', score_svc)","8ab56072":"# Interpreting the Coefficients:","881f9f11":"# Finding the intercept and coefficients:****","81a6cb68":"# Workclass column:","41fa9f06":"# Race Column:","ae967f1c":"### Native_country column","76f777ba":"# Relationship cols:","fcf58144":"# Income col:","a01ee4b0":"# Education Columns","63dd2763":"### Backward Elimination\nThe idea is that we can simplify our model by removing all features which have close to no contribution to the model.\n\nWhen we have the p-value, we get rid of all coeff with p-values>0.05.\n\nif the weights is small enough. it won't make a diff anyway....","eb7f3d08":"# Final DataFrame:","f068f9df":"# SupportVectorClassifier:","47c1bfd3":"if its coeff is around 0 and Odds ratio is around 1, means feature isn't particularly important.\n\n**A weight(coeff) of 0 implies that no matter the featyure value, we will multiply it by 0(in the model)**\n\n**For a unit change in the standardized feature, the odds increase by a multiple equal to the odds ratio(1=no change)**\n\nDaily work load Average, Day of the week, Distance to work columns coeff is alomost 0 and odds ratio is almost 1, so it means that feature isn't important.","c0f442d4":"# Marital-status col:","e56b8e80":"# Occupation:","034c3f84":"# Random Forest Classifier.\n**Let's choose the best estimator and parameters :GridSearchCV**"}}