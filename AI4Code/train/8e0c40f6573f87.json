{"cell_type":{"90365584":"code","dbf06683":"code","6a32509d":"code","b91d73a5":"code","ab81a0cf":"code","e18abb88":"code","6489ecb1":"code","00e23f3a":"code","f5192b31":"code","7c81c2c4":"code","977921ef":"code","2b140175":"code","2108c608":"code","0a2eba2b":"code","ea9a1654":"code","3b985786":"code","8a11bb06":"code","2a77e04b":"code","f2fdd8c0":"code","bf36e517":"code","43a5c8fd":"code","8525b78e":"code","42efa20e":"code","03e4db4b":"code","85868117":"code","77a8f178":"code","269a6ff5":"code","23ae7a89":"code","5e53af98":"code","b1747613":"code","257be641":"code","9c0b86ff":"code","9892853c":"code","64e6dcdc":"code","be8fd219":"code","3d69e573":"code","a296d919":"code","9ee2cc53":"code","de800930":"markdown","c4cbdf1d":"markdown","dae29c32":"markdown","ac757fbb":"markdown","814bc518":"markdown","e616bce0":"markdown","cc3608e1":"markdown","e66d38ed":"markdown","a2e5e9a8":"markdown","d3dd7e9d":"markdown","df382be6":"markdown","8516d903":"markdown","ad7988ae":"markdown","ae728f33":"markdown","2d2e7641":"markdown"},"source":{"90365584":"# import libraries\n#!pip install turicreate\nimport numpy as np\nimport pandas as pd\n#import turicreate\nfrom sklearn.preprocessing import OneHotEncoder","dbf06683":"# libraries used\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n\n# Encoders\nfrom category_encoders import TargetEncoder\nfrom sklearn.preprocessing import LabelEncoder\n\n# Strategic imports\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.model_selection import GridSearchCV, train_test_split, RepeatedStratifiedKFold, cross_val_score\nfrom sklearn.model_selection import StratifiedKFold, StratifiedShuffleSplit\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\n\n# Machine learning Models\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import StackingClassifier, VotingClassifier\n\nfrom tensorflow import keras\nimport tensorflow as tf\n\n# imports to mute warnings\npd.options.display.max_rows=200\npd.set_option('mode.chained_assignment', None)\n\nfrom warnings import simplefilter\nfrom sklearn.exceptions import ConvergenceWarning\nsimplefilter(\"ignore\", category=ConvergenceWarning)\nsimplefilter(\"ignore\", category=RuntimeWarning)\n\nprint(\"sns.__version__\", sns.__version__)\n#print(\"sklearn.__version__\", sklearn.__version__)","6a32509d":"train = pd.read_csv('..\/input\/alc-datathon-2021\/covid_mental_health_train.csv')\ntest = pd.read_csv('..\/input\/alc-datathon-2021\/covid_mental_health_test.csv')","b91d73a5":"# summary stats\ntrain.describe()","ab81a0cf":"train.columns.tolist()","e18abb88":"plt.figure(figsize=(60, 8))\nsns.set(font_scale=1.5)\nsns.heatmap(train.corr(), cmap='coolwarm', annot=True, annot_kws={'size':15})\nplt.show()","6489ecb1":"important_features = ['id', 'current_mental', 'current_mental_resampled', 'past_mental', 'past_physical', 'current_physical', 'optimism', 'deterioration_interact', 'frustration', 'difficulty_work', 'difficulty_living', 'deterioration_economy', 'healthy_sleep']","00e23f3a":"train[\"current_mental_resampled\"] = train[\"current_mental\"].mean()\ntest[\"current_mental_resampled\"] = test[\"current_mental\"].mean()","f5192b31":"train[\"current_mental_resampled\"] = train[\"current_mental\"].__iter__()\ntest[\"current_mental_resampled\"] = test[\"current_mental\"].__iter__()","7c81c2c4":"train[\"current_mental_resampled\"] = train[\"current_mental\"].quantile()\ntest[\"current_mental_resampled\"] = test[\"current_mental\"].quantile()","977921ef":"train[\"current_mental_resampled\"] = train[\"current_mental\"].prod()\ntest[\"current_mental_resampled\"] = test[\"current_mental\"].prod()","2b140175":"train[\"current_mental_resampled\"] = train[\"current_mental\"].ffill()\ntest[\"current_mental_resampled\"] = test[\"current_mental\"].ffill()","2108c608":"train[\"current_mental_resampled\"] = train[\"current_mental\"].max()\ntest[\"current_mental_resampled\"] = test[\"current_mental\"].max()","0a2eba2b":"train[\"current_mental_resampled\"] = train[\"current_mental\"].std()\ntest[\"current_mental_resampled\"] = test[\"current_mental\"].std()","ea9a1654":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats # some useful stuff\n","3b985786":"#train = pd.read_csv('..\/input\/alc-datathon-2021\/covid_mental_health_train.csv')\n#test = pd.read_csv('..\/input\/alc-datathon-2021\/covid_mental_health_test.csv')","8a11bb06":"#https:\/\/www.kaggle.com\/getting-started\/110134\narr = train[\"deterioration_interact\"]\narr = np.array(arr)\n\nsqrt_arr = np.sqrt(arr)\ntrain[\"deterioration_interact_sqrt\"] = sqrt_arr\n\ncbrt_arr = np.cbrt(arr)\ntrain[\"deterioration_interact_cbrt\"] = cbrt_arr\n\nlog_arr = np.log(arr)\ntrain[\"deterioration_interact_log\"] = log_arr","2a77e04b":"train.head()\nprint(train.shape)","f2fdd8c0":"from scipy import stats\nzscore = stats.zscore(np.array(train[\"age\"]))\nprint(\"Zscore:\",zscore)\n","bf36e517":"count=0\nfor value in zscore:\n    if abs(value)>3: count=count+1\nprint(count)        ","43a5c8fd":"p = stats.normaltest(np.array(train[\"age\"]), axis = 0)\nstatistics, p = stats.normaltest(np.array(train[\"age\"]), axis = 0)\nprint(p)","8525b78e":"new_train = pd.DataFrame()\nfor feature in important_features:\n    new_train[feature] = train[feature]\nnew_train[\"depression\"] = train[\"depression\"]\nnew_train.head()","42efa20e":"one_hot_encoded_training_predictors = pd.get_dummies(new_train)\none_hot_encoded_training_predictors.head()","03e4db4b":"new_test = pd.DataFrame()\nfor feature in important_features:\n    new_test[feature] = test[feature]\nnew_test.head()","85868117":"one_hot_encoded_test = pd.get_dummies(new_test)\none_hot_encoded_test.head()","77a8f178":"print(len(one_hot_encoded_training_predictors))","269a6ff5":"X_trainTest = one_hot_encoded_training_predictors.drop(columns = \"depression\")\nY_trainTest = one_hot_encoded_training_predictors[\"depression\"]","23ae7a89":"# split again, and we should see the same split\nX_train, X_val, y_train, y_val = train_test_split(X_trainTest, Y_trainTest, test_size=0.11, random_state=1)","5e53af98":"print(len(X_train))","b1747613":"X_testTest = one_hot_encoded_test\nX_testTest.head()","257be641":"# Let's load the packages\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.inspection import permutation_importance\nimport shap\nfrom matplotlib import pyplot as plt\n\nplt.rcParams.update({'figure.figsize': (12.0, 8.0)})\nplt.rcParams.update({'font.size': 14})","9c0b86ff":"from sklearn import tree\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import plot_roc_curve","9892853c":"rf = RandomForestClassifier(n_estimators=100)\nrf = rf.fit(X_train, y_train)","64e6dcdc":"Y_val_pred = rf.predict_proba(X_val)[:, 1]\nprint(roc_auc_score(y_val, Y_val_pred))","be8fd219":"viz = plot_roc_curve(rf, X_val, y_val, name='ROC fold', alpha=0.3, lw=1)","3d69e573":"Y_test_pred = rf.predict_proba(X_testTest)[:, 1]","a296d919":"submission = pd.DataFrame({'id':X_testTest.id,'depression':Y_test_pred})","9ee2cc53":"submission.head()","de800930":"# Models","c4cbdf1d":"# Using random forest","dae29c32":"https:\/\/www.kaggle.com\/nawshadbintanizam\/eda-allfeatures","ac757fbb":"https:\/\/www.kaggle.com\/tasnimnishatislam\/26-na-experimentwithclassifiers","814bc518":"Multiple Resampler were tested individually to get a preferable outcome. \npandas.core.resample.Resampler.mean and likewise.","e616bce0":"# Handle Unbalance Data","cc3608e1":"# Random split","e66d38ed":"We have participated in the competition Ada Lovelace Datathon 2021, we managed to score 11 th position in the leaderboard, we are publishing our attempts in the series of notebooks, rest of the notebook links are-\n\n* [EDA and Data Visualization](https:\/\/www.kaggle.com\/nawshadbintanizam\/eda-allfeatures)\n* [Handling Data Imbalance](https:\/\/www.kaggle.com\/erabaka\/classifier-experiments-with-resample)\n* [Classifications using pre-built models](https:\/\/www.kaggle.com\/tasnimnishatislam\/26-na-experimentwithclassifiers?fbclid=IwAR15jk4-zEoAPXxQXXgMun-8Ne--LGk5gMalllyGjpcC9BNY_vMFWKR-0Qo)\n* [Hardcoding Logistic Regression and Decision Tree](https:\/\/www.kaggle.com\/nabilatasnim\/hardcode-logisticregression-decisiontree)","a2e5e9a8":"From EDA analysis we come to know that  current mental, past mental, past physical, current physical is heavily unbalanced, sonwe will be using undersampling method for this purpose","d3dd7e9d":"# Z Test Hypothesis","df382be6":"# Normalization Test","8516d903":"By the correlation analysis, we will be considering the feature, current mental, past mental, past physical, current physical, optimism, deterioration interact, frustration, difficulty_work, difficulty_living, deteriation, healthy_sleep\nThe continuous datas are binned, we want to figure out the feature importance according to random forest classifier","ad7988ae":"https:\/\/www.kaggle.com\/nabilatasnim\/hardcode-logisticregression-decisiontree","ae728f33":"# EDA","2d2e7641":"# Age has no outlier in it"}}