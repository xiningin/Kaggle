{"cell_type":{"94599d46":"code","521d031e":"code","0cf0542f":"code","96dffba3":"code","26045b3b":"code","536cea2b":"code","c9afefc2":"code","fd55776d":"code","4a87d865":"code","eab6630e":"code","8e412294":"code","a26e1b8c":"code","6cfa398d":"code","40b71ce5":"code","e15c0662":"code","8f095ffc":"code","5e1f4567":"code","5f32f9d9":"code","4d7a8c6d":"code","f9ea411c":"code","e2283cde":"code","a0deb459":"code","71f63ea0":"code","5015f164":"code","901652fb":"code","93e31145":"code","efd348b0":"code","43495736":"code","9c9f16ba":"markdown"},"source":{"94599d46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","521d031e":"FILEPATH = '\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv'","0cf0542f":"df = pd.read_csv(FILEPATH, encoding='iso-8859-1', engine = 'c') # engine 'c' used instead of 'python' for higher performance\ndf.head(10)","96dffba3":"# delete unnecessary cols\ncols = ['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4']\n\ndf.drop(cols, axis = 1, inplace = True)","26045b3b":"df.head()","536cea2b":"# Title change v1 = result, v2 = input\n\ndf.rename(columns = {'v1' : 'Label','v2':'Message'},inplace=True)\n\n# we can also use df.rename() option here","c9afefc2":"df.head()","fd55776d":"# reorder options - must be applicable for all cols\ndf = df[['Message','Label']]\n ","4a87d865":"df.head()","eab6630e":"# Buggy, please don't use\nnew_cols = ['my_input', 'my_result']\n\ndf1 = df.reindex(columns = new_cols)\n# df1.to_csv(FILEPATH)\n# df1.head()","8e412294":"# Rename cols by using .rename - can be used for selected cols\n\ndf.rename(columns = {'input' : 'my_new_input', 'result' : 'my_new_result'}, inplace = True)","a26e1b8c":"df.head()","6cfa398d":"df.count()","40b71ce5":"# print first string\n\ndf.iloc[1][0]","e15c0662":"df.iloc[2][0]","8f095ffc":"def find_message_length(msg):\n    \n    msg_words = msg.split(' ')\n    \n    msg_len = len(msg_words)\n    \n    return msg_len","5e1f4567":"print(find_message_length(df.iloc[0][0]))","5f32f9d9":"# Create a new col called 'message_word_length' showing how many words in the message\ndf['input_words_count'] = df['my_new_input'].apply(find_message_length)\ndf.head()\n\n# ref: https:\/\/rajacsp.github.io\/mlnotes\/python\/data-wrangling\/advanced-custom-lambda\/","4d7a8c6d":"# show the unique labels\n\nset(df['my_new_result'])","f9ea411c":"def find_length(msg):\n    \n    msg_len = len(msg)\n    \n    return msg_len","e2283cde":"print(find_length(df.iloc[0][0]))","a0deb459":"# Create a new col called 'message_word_length' showing how many words in the message\ndf['input_char_length'] = df['my_new_input'].apply(find_length)\ndf.head()","71f63ea0":"# History words count\n\nimport matplotlib.pyplot as plt\n\n# to avoid popups use inline\n%matplotlib inline ","5015f164":"# plt.hist(data['label'], bins=3, weights=np.ones(len(data['label'])) \/ len(data['label']))\n\nimport numpy as np\n\nplt.hist(df['input_words_count'], bins = 100, weights = np.ones(len(df['input_words_count'])) \/ len(df['input_words_count']))\n\nplt.xlabel('Word Length')\nplt.ylabel('Group Count')\nplt.title('Word Length Histogram')","901652fb":"# Find more than 80 words\ndf['input_words_count']","93e31145":"df_above_80 = df[df['input_words_count'] > 80]","efd348b0":"df_above_80","43495736":"import numpy as np\n\nplt.hist(df['input_char_length'], bins = 100, weights = np.ones(len(df['input_char_length'])) \/ len(df['input_char_length']))\n\nplt.xlabel('Char Length')\nplt.ylabel('Group Count')\nplt.title('Char Length Histogram')","9c9f16ba":"Source:\n\nhttps:\/\/docs.python.org\/3\/library\/codecs.html#standard-encodings\n\nhttps:\/\/www.kaggle.com\/devghiles\/step-by-step-solution-with-f1-score-as-a-metric\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html\n\nTo rename:\nhttps:\/\/stackoverflow.com\/questions\/11346283\/renaming-columns-in-pandas\n\nTo change cols:\nhttps:\/\/stackoverflow.com\/questions\/12329853\/how-to-rearrange-pandas-column-sequence\/23741704\n\nhttps:\/\/rajacsp.github.io\/mlnotes\/python\/data-wrangling\/advanced-custom-lambda\/\n"}}