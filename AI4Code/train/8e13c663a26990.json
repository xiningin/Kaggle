{"cell_type":{"539a8ed6":"code","1754b4fd":"code","cd30fb63":"code","d3e6de23":"code","bf364ff3":"code","fb3f0d6b":"code","70b0274c":"code","77b2e106":"code","9ea1baaf":"code","b11390be":"code","fe7c8b26":"code","5b086f50":"code","c3854f5b":"code","3a9fb9d5":"code","333562b0":"code","c2a1b90c":"code","1326c136":"code","6aa96ee4":"code","0f6e7bb2":"code","d5620a72":"code","a6a216c6":"code","da7c468a":"code","8593e52a":"code","e17537d4":"code","5a5157e7":"code","d7e17be2":"code","fb9d6cd6":"code","6493b8c7":"code","5391bf48":"code","5ea206a9":"code","8079948f":"code","40bbfcae":"code","c4b33c9b":"code","b58d1e56":"code","49be4663":"code","d4c1c711":"code","7d910cfa":"code","8e43a0d1":"code","75a1a772":"code","661f129f":"code","4cbb09f5":"code","b6abd36b":"markdown","dcede45a":"markdown","5c0258d8":"markdown","98fdc044":"markdown","552a6c74":"markdown","87a06843":"markdown","d0fa5b59":"markdown","ff9a579e":"markdown","0ae8a19b":"markdown","48622469":"markdown","24c47d5a":"markdown","085def36":"markdown","62054f22":"markdown","22512784":"markdown","24390c45":"markdown","fc8c457d":"markdown","818be400":"markdown","89b010af":"markdown","f927bf7b":"markdown","61699a13":"markdown","277dea86":"markdown","c61cc427":"markdown","bf3266ed":"markdown","3835078d":"markdown","0c61a037":"markdown","9ab1f120":"markdown","d25162ec":"markdown","bae64253":"markdown","1a2178e9":"markdown","a7e52708":"markdown","02d39980":"markdown","26452fd7":"markdown","7092919e":"markdown","72371f8b":"markdown","e9848f60":"markdown","53777f03":"markdown","cc6fc36b":"markdown","eab9aeb5":"markdown"},"source":{"539a8ed6":"# Filtering out the warnings\n\nimport warnings\n\nwarnings.filterwarnings('ignore')","1754b4fd":"# Importing the required libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","cd30fb63":"# Read the csv file using  \n\nmovies = pd.read_csv('..\/input\/imdb-movie-data\/MovieData.csv')\nmovies.head()","d3e6de23":"# Check the number of rows and columns in the dataframe\n\nmovies.shape","bf364ff3":"# Check the column-wise info of the dataframe\n\nmovies.info()","fb3f0d6b":"# Check the summary for the numeric columns \n\nmovies.describe()","70b0274c":"# Divide the 'gross' and 'budget' columns by 1000000 to convert '$' to 'million $'\n\nmovies['budget'] = round(movies['budget'] \/ 1000000, 2)\nmovies['Gross'] = round(movies['Gross'] \/ 1000000, 2)\n\n#Verifying the change\n\nmovies.head()[['Title','budget','Gross']]","77b2e106":"# Create the new column named 'profit' by subtracting the 'budget' column from the 'gross' column\nmovies['profit'] = movies['Gross'] - movies['budget']\n\n# Verifying data in profit column\nmovies.head()[['Gross','budget','profit']]","9ea1baaf":"# Sort the dataframe with the 'profit' column as reference using the 'sort_values' function. Make sure to set the argument\n#'ascending' to 'False'\n\nmovies.sort_values('profit', ascending = False, inplace = True)\nmovies = movies.reset_index(drop=True)\nmovies.head()[['Title','profit']]","b11390be":"# Get the top 10 profitable movies by using position based indexing. Specify the rows till 10 (0-9)\n\ntop10 = movies.iloc[0:10]\ntop10[['Title', 'profit']]","fe7c8b26":"#Plot profit vs budget\n\nsns.jointplot(movies.profit, movies.budget)\nplt.show()","5b086f50":"#Find the movies with negative profit\n\nneg_profit = movies[movies.profit < 0]\nneg_profit = neg_profit.reset_index(drop=True)\nneg_profit[['Title', 'profit']]","c3854f5b":"# Change the scale of MetaCritic\n\nmovies.MetaCritic = movies.MetaCritic\/10","3a9fb9d5":"#Verify the change in scale\n\nmovies.MetaCritic.head()","333562b0":"# Find the average ratings\n\nmovies['Avg_rating'] = movies[['MetaCritic','IMDb_rating']].mean(axis=1)\nmovies.head()[['Title','MetaCritic','IMDb_rating','Avg_rating']]","c2a1b90c":"#Sort in descending order of average rating\n\nmovies.sort_values('Avg_rating', ascending = False)[['Title', 'Avg_rating']].head(10)","1326c136":"# Find the movies with metacritic-Imdb rating < 0.5 and also with an average rating of >= 8 (sorted in descending order)\n\n\nUniversalAcclaim = movies[(abs(movies.IMDb_rating - movies.MetaCritic) < 0.5) & (movies['Avg_rating'] >= 8)]\nUniversalAcclaim = UniversalAcclaim.reset_index(drop=True)\nUniversalAcclaim[['Title','IMDb_rating','MetaCritic','Avg_rating']]","6aa96ee4":"# Write your code here\n\n# Find the combined Facebook likes for all 3 actors and store that in a new variable\nmovies['trio_facebook_likes'] = movies[['actor_1_facebook_likes','actor_2_facebook_likes','actor_3_facebook_likes']].sum(axis=1)\n\n# To verify\nmovies.head()[['Title','actor_1_facebook_likes','actor_2_facebook_likes','actor_3_facebook_likes','trio_facebook_likes']]","0f6e7bb2":"# Sort the dataset in descending order of combined Facebook likes \nmovies.sort_values('trio_facebook_likes', ascending = False, inplace = True)\nmovies = movies.reset_index(drop=True)\nmovies.head()[['Title','trio_facebook_likes']]","d5620a72":"# Top 5 popular trios names (in a list)\n\ntop_trio = movies.iloc[0:5]\ntop_trio[['actor_1_name','actor_2_name','actor_3_name']].to_numpy().tolist()","a6a216c6":"# Runtime histogram\/density plot\n\nsns.distplot(movies['Runtime'])\nplt.title('Movie Runtime Plot')\nplt.xlabel('Runtime in Minutes')\nplt.show()\n","da7c468a":"\n# Filter the R rated movies, sort them in descending order of vote counts from under 18 age group and find the top 10\n\nPopularR = movies[movies.content_rating == 'R'].sort_values('CVotesU18', ascending = False).head(10)\nPopularR = PopularR.reset_index(drop=True)\n\n#To verify\n\nPopularR[['Title','content_rating','CVotesU18']]","8593e52a":"# Create the dataframe df_by_genre\n\ndf_by_genre = pd.concat([movies.loc[:,'genre_1':'genre_3'], movies.loc[:, 'CVotes10':'VotesnUS']], axis=1)\ndf_by_genre = df_by_genre.reset_index(drop=True)\ndf_by_genre.head()","e17537d4":"# Create a column cnt and initialize it to 1\n\ndf_by_genre['cnt'] = 1\ndf_by_genre.head()","5a5157e7":"# Group by genre_1 to find the sum and store the result in df_by_g1\n\ndf_by_g1 = df_by_genre.groupby(by='genre_1').sum()\ndf_by_g1\n","d7e17be2":"# Group by genre_2 to find the sum and store the result in df_by_g2\n\ndf_by_g2 = df_by_genre.groupby(by='genre_2').sum()\ndf_by_g2","fb9d6cd6":"# Group by genre_3 to find the sum and store the result in df_by_g3\n\ndf_by_g3 = df_by_genre.groupby(by='genre_3').sum()\ndf_by_g3","6493b8c7":"# Add the grouped data frames and store it in a new data frame\n\ndf_add = df_by_g1.add(df_by_g2, fill_value=0).add(df_by_g3, fill_value=0)\ndf_add.head()","5391bf48":"# Extract genres with atleast 10 occurences\n\ngenre_top10 =  df_add[df_add.cnt >= 10]\ngenre_top10","5ea206a9":"# Take the mean for every column by dividing with cnt \n\ngenre_top10.loc[:, \"CVotes10\":\"VotesnUS\"] = genre_top10.loc[:, \"CVotes10\":\"VotesnUS\"].apply(lambda x: x\/genre_top10[\"cnt\"])\ngenre_top10","8079948f":"# Rounding off the columns of Votes to two decimals\n\ngenre_top10.iloc[:, 0:-2] = genre_top10.iloc[:,0:-2].round(decimals = 2)\ngenre_top10","40bbfcae":"# Converting CVotes to int type\n\ngenre_top10[genre_top10.loc[:,\"CVotes10\":\"CVotesnUS\"].columns] = genre_top10[genre_top10.loc[:,\"CVotes10\":\"CVotesnUS\"].columns].astype('int')\n\n# To verify\ngenre_top10.info()","c4b33c9b":"# Final Dataframe\ngenre_top10","b58d1e56":"# Countplot for genres\n\nplt.figure(figsize=[10,7])\nsns.barplot(data = genre_top10, x=genre_top10.index, y='cnt')\nplt.title('Genre Count Plot')\nplt.xlabel('Movie Genre')\nplt.ylabel('Movie Count')\nplt.show()\n","49be4663":"# 1st set of heat maps for CVotes-related columns\n\nplt.figure(figsize = [20,10])\n\n# 1st sub-plot for male voters\nplt.subplot(1,2,1)\nsns.heatmap(genre_top10[['CVotesU18M','CVotes1829M','CVotes3044M','CVotes45AM']],cmap=\"YlGnBu\", annot = True, fmt=\"d\")\nplt.title('Male Voters\\n', fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\n\n# 2nd sub-plot for female voters\nplt.subplot(1,2,2)\nsns.heatmap(genre_top10[['CVotesU18F','CVotes1829F','CVotes3044F','CVotes45AF']],cmap=\"YlGnBu\", annot = True, fmt=\"d\")\nplt.title('Female Voters\\n', fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\n\nplt.show()","d4c1c711":"# 2nd set of heat maps for Votes-related columns\n\nplt.figure(figsize = [20,10])\n\n# 1st sub-plot for male voters\nplt.subplot(1,2,1)\nsns.heatmap(genre_top10[['VotesU18M','Votes1829M','Votes3044M','Votes45AM']],cmap=\"YlGnBu\", annot = True, fmt=\"g\")\nplt.title('Average rating by males\\n', fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\n# 2nd sub-plot for female voters\nplt.subplot(1,2,2)\nsns.heatmap(genre_top10[['VotesU18F','Votes1829F','Votes3044F','Votes45AF']],cmap=\"YlGnBu\", annot = True, fmt=\"g\")\nplt.title('Average rating by females\\n', fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\nplt.show()","7d910cfa":"# Creating IFUS column\n\nmovies['IFUS'] = movies.Country.apply(lambda x: 'USA' if x=='USA' else 'non-USA')\nmovies.IFUS.value_counts()","8e43a0d1":"# Box plot - 1: CVotesUS(y) vs IFUS(x)\n\nplt.figure(figsize = [18,8])\n\n# 1st sub-plot - Total Vote Counts for US people\nplt.subplot(1,2,1)\nsns.boxplot(x=movies.IFUS,y=movies.CVotesUS, palette=\"Set3\")\nplt.ylabel('Vote counts of US people', fontdict={'fontsize': 12, 'fontweight' : 5, 'color' : 'Brown'})\nplt.xlabel('Country of origin of the movie', fontdict={'fontsize': 12, 'fontweight' : 5, 'color' : 'Brown'})\nplt.title('Vote Counts by US people\\n', fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Blue'})\n# 2nd sub-plot - Total Vote Counts for non-US people\nplt.subplot(1,2,2)\nsns.boxplot(x=movies.IFUS,y=movies.CVotesnUS, palette=\"Set3\")\nplt.ylabel('Vote counts of non-US people', fontdict={'fontsize': 12, 'fontweight' : 5, 'color' : 'Brown'})\nplt.xlabel('Country of origin of the movie', fontdict={'fontsize': 12, 'fontweight' : 5, 'color' : 'Brown'})\nplt.title('Vote Counts by non-US people\\n', fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Blue'})\nplt.show()","75a1a772":"# Box plot - 2: VotesUS(y) vs IFUS(x)\n\nplt.figure(figsize = [18,8])\n\n# 1st sub-plot - Average ratings by US people\nplt.subplot(1,2,1)\nsns.boxplot(x=movies.IFUS,y=movies.VotesUS, palette=\"Set3\")\nplt.ylabel('Average ratings by US people')\nplt.xlabel('Country of origin of the movie')\nplt.title('Average rating by US people\\n', fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Blue'})\n# 2nd sub-plot - Average ratings by non-US people\nplt.subplot(1,2,2)\nsns.boxplot(x=movies.IFUS,y=movies.VotesnUS, palette=\"Set3\")\nplt.ylabel('Average ratings by non-US people')\nplt.xlabel('Country of origin of the movie')\nplt.title('Average rating by non-US people\\n', fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Blue'})\nplt.show()","661f129f":"# Sorting by CVotes1000\n\ngenre_top10.sort_values('CVotes1000', ascending = False, inplace = True)\n\n#Verifying\ngenre_top10","4cbb09f5":"# Bar plot\nplt.figure(figsize=[10,10])\nsns.barplot( x = genre_top10.CVotes1000 , y =  genre_top10.index)\nplt.suptitle('Movie Genre Vs Average Vote Counts by Top 1000 voters on IMDb')\nplt.ylabel('Genre')\nplt.xlabel('Average Vote Counts by Top 1000 voters on IMDb')\nplt.show()","b6abd36b":"Inferences: \n\n1. Vote counts by both USA & non-USA people seem to have outliers for USA-originated movies.\n2. The median value of vote counts by USA people for USA-originated movies is higher than non-USA-originated movies. Whereas, the median value of vote counts by non-USA people is almost same for both USA & non-USA originated movies.","dcede45a":"## 10. Gender and Genre","5c0258d8":"Now that we have loaded the dataset and inspected it, we see that most of the data is in place. As of now, no data cleaning is required, so let's start with some data manipulation, analysis, and visualisation to get various insights about the data.\n\n\nThese numbers in the budget and gross are too big, compromising its readability. Let's convert the unit of the budget and gross columns from dollar to million dollar.","98fdc044":"## 7. R-Rated Movies","552a6c74":"## 1. Reading the data","87a06843":"# Problem Statement","d0fa5b59":"- Create a new column called profit which contains the difference of the two columns: gross and budget.\n- Sort the dataframe using the profit column as reference.\n- Extract the top ten profiting movies in descending order and store them in a new dataframe - top10\n- Plot a scatter or a joint plot between the columns budget and profit and write a few words on what you observed.\n- Extract the movies with a negative profit and store them in a new dataframe","ff9a579e":"Inferences\n\n 1. Maximum number of movies are of Drama genre \n 2. Crime and Animation genres have the lowest count","0ae8a19b":"Inferences:\n\n- We can see the data points are densely crowded in low budget(< 50 million dollars)-low profit(< 100 million dollars) range. Most of the movies fall in this section.\n- There are only a couple of movies with very high profits, upto ~700 million dollars with a budget ~250 million dollars.\n- There are quite a number of movies with neagtive profit(loss) as well.\n\n\nThe dataset contains the 100 best performing movies from the year 2010 to 2016. However, the scatter plot tells a different story. We can notice that there are some movies with negative profit. Although good movies do incur losses, but there appear to be quite a few movie with losses. What can be the reason behind this? Lets have a closer look at this by finding the movies with negative profit.","48622469":"There will primarily be three lead roles in a movie and we wish to cast the most popular actors for it. Now, since we don't want to take a risk, we will cast a trio which has already acted together in a movie before. The metric that we've chosen to check the popularity is the Facebook likes of each of these actors.\n\nThe dataframe has three columns - `actor_1_facebook_likes`, `actor_2_facebook_likes`, and `actor_3_facebook_likes`. Our objective is to find the trios which has the most number of Facebook likes combined. That is, the sum of `actor_1_facebook_likes`, `actor_2_facebook_likes` and `actor_3_facebook_likes` should be maximum.\nLet's find out the top 5 popular trios, and output their names in a list.","24c47d5a":"Inference\n\n1. Most of the movies are 2 hrs long\n2. Maximum length of any movie is 3 hrs \n3. Minimum length of any movie is ~1.5 hrs","085def36":"## 9. Genre Counts","62054f22":"If we take a look at the last columns in the dataframe, most of these are related to demographics of the voters. We also have three genre columns indicating the genres of a particular movie. We will extensively use these columns for the third and the final stage wherein we will analyse the voters across all demographics and also see how these vary across various genres. ","22512784":"Inferences: \n\n1. Average rating by both USA & non-USA people seems to have some outliers for both USA originated movies.\n2. Both US & non-USA people have seemingly given higher rating to US-originated movies as it is skewed towards top. Whereas, non-USA -originated movie in the first one is symmetric but in the second one it is skewed to bottom referring it has got more low ratings.","24390c45":"Make the second heatmap to see how the average number of votes of females is varying across the genres.","fc8c457d":"There is a column named Runtime in the dataframe which primarily shows the length of the movie. It might be intersting to see how this variable this distributed. Plot a histogram or distplot of seaborn to find the Runtime range most of the movies fall into.","818be400":"## 5. Find the Most Popular Trios","89b010af":"If we take a look at the final dataframe that we have gotten, we will see that we now have the complete information about all the demographic (Votes- and CVotes-related) columns across the top 10 genres. We can use this dataset to extract exciting insights about the voters!","f927bf7b":"The dataset contains both the US and non-US movies. Let's analyse how both the US and the non-US voters have responded to the US and the non-US movies.","61699a13":"Inferences: \n\n1. Males have voted more than females, and Sci-Fi appears to be most popular among the 18-29 age group irrespective of their gender. \n\n2. Most of the votes are from the audience in the age group range 18-44 irrespective of their gender and under 18 age group has the least number of votes in both male & female group.\n\n3. Next to Sci-Fi, Adventure and Animation are the most voted genres among females(18-29 age group), Females in the age-group (30-44) have mainly voted for Sci-Fi, Thriller & Adventure movies. Next to Sci-Fi, Action & Thriller are the most voted genres among males(18-44 age group).\n\n4. Crime is the least voted genre among females 18-44 age group whereas Romance is the least voted genre among males 18-44 age group.","277dea86":"Although R rated movies are restricted movies for the under 18 age group, still there are vote counts from that age group. Among all the R rated movies that have been voted by the under-18 age group,let's find the top 10 movies that have the highest number of votes i.e.CVotesU18 from the movies dataframe.","c61cc427":"## 2. Data Inspection","bf3266ed":"## 3. Data Analysis","3835078d":"## 8. Demographic analysis","0c61a037":"We have the data for the 100 top-rated movies from the past decade along with various pieces of information about the movie, its actors, and the voters who have rated these movies online. Here we will try to find some interesting insights into these movies and their voters, using Python.","9ab1f120":"We can notice the column `MetaCritic` in this dataset. This is a very popular website where an average score is determined through the scores given by the top-rated critics. Second, we also have another column `IMDb_rating` which tells us the IMDb rating of a movie. This rating is determined by taking the average of hundred-thousands of ratings from the general audience. \n\nAs a part of this subtask, we need to find out the highest rated movies which have been liked by critics and audiences alike.\n1. Firstly we will notice that the `MetaCritic` score is on a scale of `100` whereas the `IMDb_rating` is on a scale of 10. We need to first convert the `MetaCritic` column to a scale of 10.\n2. Now, to find out the movies which have been liked by both critics and audiences alike and also have a high rating overall, we need to -\n    - Create a new column `Avg_rating` which will have the average of the `MetaCritic` and `Rating` columns\n    - Retain only the movies in which the absolute difference between the `IMDb_rating` and `Metacritic` columns is less than 0.5. \n    - Sort these values in a descending order of `Avg_rating` and retain only the movies with a rating equal to or greater than `8` and store these movies in a new dataframe.","d25162ec":"## 6. Runtime Analysis","bae64253":"Inferences: \n\n1. Sci-Fi genre is the most popular among the top 1000 voters.\n2. Drama genre, despite of having the highest count does not seem that popular among the top 1000 voters.\n3. The genre Romance seems to be most unpopular among the top 1000 voters.","1a2178e9":"If we have closely looked at the Votes- and CVotes-related columns, we might have noticed the suffixes F and M indicating Female and Male. Since we have the vote counts for both males and females, across various age groups, let's now see how the popularity of genres vary between the two genders in the dataframe.\n\nLet's make the first heatmap to see how the average number of votes of males is varying across the genres.","a7e52708":"We have also observed the column CVotes1000. This column represents the top 1000 voters on IMDb and gives the count for the number of these voters who have voted for a particular movie. Let's see how these top 1000 voters have voted across the genres.","02d39980":"Now let's derive some insights from this data frame. Make a bar chart plotting different genres vs cnt using seaborn.","26452fd7":"Inferences: \n\n1. Sci-Fi appears to be the highest rated genre in the age group of U18 for both males and females. Also, females in this age group have rated it a bit higher than the males in the same age group. \n2. People of age < 30, specfically under 18 age group, have given higher ratings than people of age > 30, irrespective of their gender.\n3. Romance is the least rated genre in both male and female group.\n4. Next to Sci-Fi, Crime is the next highest rated genre in the under 18 age males, whereas Action and Adventure are the next highest rated genres among under 18 females.","7092919e":"## 4. The General Audience and the Critics","72371f8b":"\nRead the movies data file provided and store it in a dataframe.","e9848f60":"Inspect the dataframe for dimensions, null-values, and summary of different numeric columns.","53777f03":"Inference\n\nThe kids are watching Deadpool a lot.","cc6fc36b":"We can spot the movie Tangled in the dataset. Although its one of the highest grossing movies of all time, it has negative profit as per this result. If we cross check the gross values of this movie (link: https:\/\/www.imdb.com\/title\/tt0398286\/), we can see that the gross in the dataset accounts only for the domestic gross and not the worldwide gross. This is true for may other movies also in the list.","eab9aeb5":"## 11. Top 1000 Voters Vs Genres"}}