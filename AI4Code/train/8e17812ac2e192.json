{"cell_type":{"81a34bfd":"code","147b0c97":"code","c4d101ad":"code","0dc069ae":"code","21e1764f":"code","da23af46":"code","1d3644de":"code","2df8ae0e":"code","ff7200e5":"code","86fd89e1":"code","1e3b97f2":"code","e2a6b22a":"code","dd32a9a2":"code","af4c2c5e":"code","01bd83be":"code","2da7a975":"code","10f2b067":"code","4af41bc8":"code","c005b3f8":"code","be6cc7d2":"code","ec12e0bc":"code","fd642d2a":"code","6d89622b":"code","d3613341":"code","8e8d3545":"markdown","89827ef5":"markdown","82e5f257":"markdown","5c764b58":"markdown","85b986b8":"markdown","bdbfffde":"markdown","153279dd":"markdown"},"source":{"81a34bfd":"# import Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as pyplot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","147b0c97":"# to see all the comands result in a single kernal \n%load_ext autoreload\n%autoreload 2\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","c4d101ad":"# to increase no. of rows and column visibility in outputs\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","0dc069ae":"#Import data\ntrain = pd.read_csv(r'..\/input\/house-price-prediction-challenge-machine-hack\/Train.csv')\ntest = pd.read_csv(r'..\/input\/house-price-prediction-challenge-machine-hack\/Test.csv')\nsample = pd.read_csv(r'..\/input\/house-price-prediction-challenge-machine-hack\/sample_submission.csv')","21e1764f":"# Having a look at data and its shape \ntrain.head()\ntest.head()\ntrain.shape\ntest.shape\nsample.shape","da23af46":"#Conerting categorical variable to numeric\ntrain['BHK_OR_RK']=train['BHK_OR_RK'].replace({'BHK':0,'RK':1})\ntrain['POSTED_BY']=train['POSTED_BY'].replace({'Owner':0,'Dealer':1,'Builder':2})\ntest['BHK_OR_RK']=test['BHK_OR_RK'].replace({'BHK':0,'RK':1})\ntest['POSTED_BY']=test['POSTED_BY'].replace({'Owner':0,'Dealer':1,'Builder':2})","1d3644de":"# to check type of columns and identify whether missing values exist or not\ntrain.info()\ntest.info()","2df8ae0e":"# found out that there is no. missing value and only one address as object type variable\n# Target varibale distribution \ntrain['TARGET(PRICE_IN_LACS)'].plot(kind = 'density', title = 'Price Distribution')","ff7200e5":"# Transforming target varible(log transformation), because target is to optimize Root mean square log error\n# and checking log transformed varibale distribution\ntrain['TARGET_log']=np.log1p(train['TARGET(PRICE_IN_LACS)'])\ntrain['TARGET_log'].plot(kind = 'density', title = 'log of Price Distribution')","86fd89e1":"# Check Dublicacy\nduplicateRowsDF = train[train.duplicated()]\nprint(\"Duplicate Rows except first occurrence based on all columns are :\")\nduplicateRowsDF.shape","1e3b97f2":"# Removing Dublicacy\ntrain.drop_duplicates(keep = False, inplace = True,ignore_index=True) ","e2a6b22a":"# Analysing distribution in Categorical varibales \ncat_cols = ['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'RESALE']\nfig, axes = plt.subplots(1, 6, figsize=(24, 10))\n\nfor i, c in enumerate(['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'RESALE']):\n    _ = train[c].value_counts()[::-1].plot(kind = 'pie', ax=axes[i], title=c, autopct='%.0f', fontsize=18)\n    _ = axes[i].set_ylabel('')\n    \n_ = plt.tight_layout()","dd32a9a2":"# we found out that 99% of houses are either 1,2,3,or 4 BHK \n# almost all the houses are BHK \n# to get exact values of distribution \ncat_col=['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'RESALE']\nfor col in cat_col:\n train[col].value_counts()\/len(train)","af4c2c5e":"# Analysing distribution in Numeric varibales, sqrt ft with target\nsns.scatterplot(x=np.log1p(train['SQUARE_FT']), y=train['TARGET_log'])","01bd83be":"# Checking correlation\nplt.figure(figsize=(15, 8))\nsns.heatmap(train.corr(),annot=True)","2da7a975":"#ready ro move and under construction have correlation -1 so both giving same information, we remove one of model","10f2b067":"train['sq_per_room']=train['SQUARE_FT']\/train['BHK_NO.']\ntest['sq_per_room']=test['SQUARE_FT']\/test['BHK_NO.']","4af41bc8":"# Extracting name of city and locality of house\nimport re\ndef city(address):\n city_name=address.split(',')[-1]\n return city_name\ndef locality(address):\n locality=address.split(',')[-2]\n return locality\ntrain['loc']=train['ADDRESS'].apply(lambda x : locality(x))\ntrain['City']=train['ADDRESS'].apply(lambda x : city(x))\ntest['loc']=test['ADDRESS'].apply(lambda x : locality(x))\ntest['City']=test['ADDRESS'].apply(lambda x : city(x))","c005b3f8":"# Mean Encoding city (adding a new varibale City_mean which value is equal to average price of house in that city)\nEncoding = train.groupby('City')['TARGET(PRICE_IN_LACS)'].mean()\ntrain['City_mean']= train.City.map(Encoding )\ntest['City_mean']= test.City.map(Encoding )","be6cc7d2":"# Selecting Columns to take in the model\ncol=['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'SQUARE_FT','LONGITUDE', 'LATITUDE', 'RESALE','City_mean','sq_per_room']","ec12e0bc":"# sub_Train validation set split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nX_train, X_val = train_test_split(train, test_size=.25, random_state=150303,shuffle=True)","fd642d2a":"# Model Fitting on sub_train set and evaluating score on validation set \nfrom lightgbm import LGBMRegressor\nlgbcl = LGBMRegressor(n_estimators=1000, importance_type='gain')\nlgbcl= lgbcl.fit(X_train[col],X_train['TARGET_log'],categorical_feature=cat_col,eval_set=(X_val[col],X_val['TARGET_log']),verbose=100,early_stopping_rounds=100)\ny_predict = lgbcl.predict(X_val[col])\nnp.sqrt(mean_squared_error(X_val['TARGET_log'],y_predict))","6d89622b":"# Checking Feature Importance\nfeat_importances = pd.Series(lgbcl.feature_importances_, index=col)\nfeat_importances.nlargest(8).plot(kind='barh')\nplt.show()","d3613341":"# Fitting model on complete training set and Predicting on test set\nlgbcl= lgbcl.fit(train[col], train['TARGET_log'])\nlgb_pred = lgbcl.predict(test[col])\nsample['TARGET(PRICE_IN_LACS)']=np.abs((np.exp(lgb_pred)-1))\nsample.to_csv('lgbm_.csv',index=False)","8e8d3545":"### If you learn anything from this notebook and find it useful,don't forget to upvote it.\n* Suggestions are welcomed at the comment section.\n","89827ef5":"# Feature Engineering","82e5f257":"* Score on Public leaderboard 0.3002","5c764b58":"# Basic Visulization","85b986b8":"# INDEX\n* [Basic Visulization](#1)\n* [Feature Engineering](#2)\n* [Model Fitting](#3)","bdbfffde":"# Model Fitting","153279dd":"* dataset for kaggle notebook- https:\/\/www.kaggle.com\/jassican\/house-price-prediction-challenge-machine-hack\n* link to Competition-https:\/\/www.machinehack.com\/hackathons\/house_price_prediction_beat_the_benchmark\/overview"}}