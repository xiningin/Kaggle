{"cell_type":{"e92f2c9f":"code","cf4c9048":"code","fddb2f99":"code","12bf4ed4":"code","c4e2d2df":"code","f5fa1c05":"code","6579abd8":"code","96e1cccd":"code","d85b2dd2":"code","b5da9e96":"code","2bfa169a":"code","c1d1a78a":"code","aa331b30":"code","89dc04ab":"code","01289c49":"code","73ecbc87":"code","3a66aacf":"code","739db6c5":"code","ef0e486e":"code","20530c7e":"code","9c9256c8":"code","e945a0df":"code","6598cb15":"code","14f1f8c2":"code","09f867ef":"code","9053f5d0":"code","88c9e71f":"code","77f0db72":"code","2a2e1ea9":"code","791b4f1b":"code","f5261a1c":"code","f111d3a7":"code","b1ab5f71":"code","0130c5d6":"markdown","69907589":"markdown","ffac3d03":"markdown","ae47a21c":"markdown","a09e7fc4":"markdown","8d98db07":"markdown","0f1c2b34":"markdown","af781922":"markdown","e489211e":"markdown","17654e6e":"markdown","ce4d0931":"markdown","f001881d":"markdown","a4c3c671":"markdown","3d3a834f":"markdown"},"source":{"e92f2c9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf4c9048":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor,DecisionTreeClassifier\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n#import train and test data.\ntrain=pd.read_csv('\/kaggle\/input\/wwwkagglecomprat57kaggletitanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/wwwkagglecomprat57kaggletitanic\/test.csv')\nname=train.Name\ntrain.head()","fddb2f99":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='coolwarm')","12bf4ed4":"train.head(20)","c4e2d2df":"train.shape","f5fa1c05":"train.isnull().sum()","6579abd8":"import numpy as np\nimport pandas as pd\ntrain['Age']=train['Age'].fillna(train['Age'].median())\n","96e1cccd":"train.set_index('PassengerId',inplace=True)\n# new_index = ['PassengerId']\n# train.reindex(new_index )\n## get dummy variables for Column sex and embarked since they are categorical value.\ntrain['Sex']=train['Sex'].replace(to_replace='male',value=1)\ntrain['Sex']=train['Sex'].replace(to_replace='female',value=0)\n#train['Embarked']=train['Embarked'].replace(to_replace='female',value=0)\n#train['Embarked']=train['Embarked'].replace(to_replace='female',value=1)\n#train['Embarked']=train['Embarked'].replace(to_replace='female',value=2)\n\n#Mapping the data.\ntrain['Fare'] = train['Fare'].astype(int)\ntrain.loc[train.Fare<=7.91,'Fare']=0\ntrain.loc[(train.Fare>7.91) &(train.Fare<=14.454),'Fare']=1\ntrain.loc[(train.Fare>14.454)&(train.Fare<=31),'Fare']=2\ntrain.loc[(train.Fare>31),'Fare']=3\n\ntrain['Age']=train['Age'].astype(int)\ntrain.loc[ train['Age'] <= 16, 'Age']= 0\ntrain.loc[(train['Age'] > 16) & (train['Age'] <= 32), 'Age'] = 1\ntrain.loc[(train['Age'] > 32) & (train['Age'] <= 48), 'Age'] = 2\ntrain.loc[(train['Age'] > 48) & (train['Age'] <= 64), 'Age'] = 3\ntrain.loc[train['Age'] > 64, 'Age'] = 4","d85b2dd2":"train.drop(['Ticket','Cabin','Name','Embarked'],axis=1,inplace=True)\ntrain.head()\nprint(type(train.Age))","b5da9e96":"train.shape","2bfa169a":"train.head(50)","c1d1a78a":"train.Survived.value_counts()\/len(train)*100","aa331b30":"train.describe()","89dc04ab":"train.groupby('Survived').mean()","01289c49":"train.groupby('Sex').mean()","73ecbc87":"train.corr()","3a66aacf":"plt.subplots(figsize=(15,8))\nsns.heatmap(train.corr(),annot=True,cmap=\"BrBG\")\nplt.title(\"Correlations Amongst Features\", fontsize=15)","739db6c5":"plt.subplots(figsize = (15,8))\nsns.barplot(x = \"Sex\", y = \"Survived\", data=train, edgecolor=(0,0,0), linewidth=2)\nplt.title(\"Survived\/Non-Survived Passengers Gender-wise Distribution\", fontsize = 25)\nlabels = ['Female', 'Male']\nplt.ylabel(\"% of passenger survived\", fontsize = 15)\nplt.xlabel(\"Gender\",fontsize = 15)\nplt.xticks(sorted(train.Sex.unique()), labels)\n\n# 1 is for male and 0 is for female.","ef0e486e":"sns.set(style='darkgrid')\nplt.subplots(figsize = (15,8))\nax=sns.countplot(x='Sex',data=train,hue='Survived',edgecolor=(0,0,0),linewidth=2)\ntrain.shape\n## Fixing title, xlabel and ylabel\nplt.title('Passenger distribution of survived vs not-survived',fontsize=25)\nplt.xlabel('Gender',fontsize=15)\nplt.ylabel(\"# of Passenger Survived\", fontsize = 15)\nlabels = ['Female', 'Male']\n#Fixing xticks.\nplt.xticks(sorted(train.Survived.unique()),labels)\n## Fixing legends\nleg = ax.get_legend()\nleg.set_title('Survived')\nlegs=leg.texts\nlegs[0].set_text('No')\nlegs[1].set_text('Yes')","20530c7e":"plt.subplots(figsize = (10,10))\nax=sns.countplot(x='Pclass',hue='Survived',data=train)\nplt.title(\"Passenger Class Distribution - Survived vs Non-Survived\", fontsize = 25)\nleg=ax.get_legend()\nleg.set_title('Survival')\nlegs=leg.texts\n\nlegs[0].set_text('No')\nlegs[1].set_text(\"yes\")","9c9256c8":"plt.subplots(figsize=(10,8))\nax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Pclass'],shade=True,color='r',label='Not Survived')\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Pclass'],shade=True,color='b',label='Survived' )\n\nlabels = ['First', 'Second', 'Third']\nplt.xticks(sorted(train.Pclass.unique()),labels)\n\n","e945a0df":"plt.subplots(figsize=(15,10))\n\nax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Fare'],color='r',shade=True,label='Not Survived')\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Fare'],color='b',shade=True,label='Survived' )\nplt.title('Fare Distribution Survived vs Non Survived',fontsize=25)\nplt.ylabel('Frequency of Passengers Survived',fontsize=20)\nplt.xlabel('Fare',fontsize=20)","6598cb15":"fig,axs=plt.subplots(figsize=(10,8))\nsns.set_style(style='darkgrid')\nsns.kdeplot(train.loc[(train['Survived']==0),'Age'],color='r',shade=True,label='Not Survived')\nsns.kdeplot(train.loc[(train['Survived']==1),'Age'],color='b',shade=True,label='Survived')","14f1f8c2":"train.dtypes","09f867ef":"X=train.drop('Survived',axis=1)\ny=train['Survived'].astype(int)","9053f5d0":"train.head(20)","88c9e71f":"from sklearn.model_selection import train_test_split\n\n#x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.1,random_state =0)\n\nsss = StratifiedShuffleSplit(n_splits=10, test_size=0.3, random_state=0)\nX_train, X_test = X.iloc[train_index], X.iloc[test_index]\ny_train, y_test = y.iloc[train_index], y.iloc[test_index]","77f0db72":"##Now we fit our model\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier(colsample_bylevel= 0.9,\n                    colsample_bytree = 0.8, \n                    gamma=0.99,\n                    max_depth= 5,\n                    min_child_weight= 1,\n                    n_estimators= 10,\n                    nthread= 4,\n                    random_state= 2,\n                    silent= True)\nclassifier.fit(X_train,y_train)\nclassifier.score(X_test,y_test)","2a2e1ea9":"#test = test_data['Pclass','Sex','Age','SibSp','Parch','Fare']","791b4f1b":"test.drop(['Ticket','Cabin','Name','Embarked'],axis=1,inplace=True)\ntest['Age']=test['Age'].fillna(test['Age'].median())\ntest['Fare']=test['Fare'].fillna(test['Fare'].median())\ntest.set_index('PassengerId',inplace=True)\n# new_index = ['PassengerId']\n# test.reindex(new_index )\n## get dummy variables for Column sex and embarked since they are categorical value.\ntest['Sex']=test['Sex'].replace(to_replace='male',value=1)\ntest['Sex']=test['Sex'].replace(to_replace='female',value=0)\n\n\n#Mapping the data.\ntest['Fare'] = test['Fare'].astype(int)\ntest.loc[test.Fare<=7.91,'Fare']=0\ntest.loc[(test.Fare>7.91) &(test.Fare<=14.454),'Fare']=1\ntest.loc[(test.Fare>14.454)&(test.Fare<=31),'Fare']=2\ntest.loc[(test.Fare>31),'Fare']=3\n\ntest['Age']=test['Age'].astype(int)\ntest.loc[ test['Age'] <= 16, 'Age']= 0\ntest.loc[(test['Age'] > 16) & (test['Age'] <= 32), 'Age'] = 1\ntest.loc[(test['Age'] > 32) & (test['Age'] <= 48), 'Age'] = 2\ntest.loc[(test['Age'] > 48) & (test['Age'] <= 64), 'Age'] = 3\ntest.loc[test['Age'] > 64, 'Age'] = 4","f5261a1c":"test.head()","f111d3a7":"Result=classifier.predict(test)\nprint(Result)\nprint(len(Result))","b1ab5f71":"output = pd.DataFrame({'PassengerId': test.index,'Survived': Result})\noutput.to_csv('submission2.csv', index=False)\noutput.head()","0130c5d6":"**People who Survived, gender-wise distribution**","69907589":"**Survived vs Non-survived based on Passenger Class Distribution**","ffac3d03":"Getting to know the count of null values for all columns","ae47a21c":"**Actual count of how many passengers survived and how many didn't**","a09e7fc4":"**Survived vs Non-survived based on Fare distribution**","8d98db07":"As we can see from the output above, 61% of the passengers dies and almost 39% survived","0f1c2b34":"**Correlation Matrix and Heatmap**","af781922":"**Using XGB Boost**","e489211e":"**Filling Null Values**","17654e6e":"**KDE plot for the analysis given above**","ce4d0931":"**Cleaning The Data!**","f001881d":"**Survived vs Non-survived based on Age distribution**\n","a4c3c671":"**Let's check visually how many null values do w ehave in our data**","3d3a834f":"**In our data the Ticket, Cabin and Name don't contribute anything so dropping them**"}}