{"cell_type":{"5b95a08d":"code","f7bd385e":"code","afc67024":"code","fdb1fa4c":"code","ec437a1a":"code","660ef9a7":"code","3f4ca36a":"code","0b47112b":"code","447b7352":"code","3ca49dc6":"code","5d55e9b8":"code","883ae5fe":"code","dae04088":"code","5a63b886":"code","65156ee4":"code","24d61116":"code","34683e13":"code","9d2ace5c":"code","3c5abc7c":"code","5b54b6d1":"code","ee07b676":"code","9d083fa0":"code","31d8dc48":"code","b2f9baca":"code","8e6b739b":"code","b91a7ad7":"code","d9dc7135":"code","321ed459":"code","1acc88d6":"code","c7bb8aa8":"markdown","043cae3c":"markdown","738bf28e":"markdown","9cb3b8e9":"markdown","db483c9a":"markdown","d52f38f0":"markdown","623dc8eb":"markdown","7450725c":"markdown","da87f37b":"markdown"},"source":{"5b95a08d":"VERSION = \"nightly\"  \n!curl https:\/\/raw.githubusercontent.com\/pytorch\/xla\/master\/contrib\/scripts\/env-setup.py -o pytorch-xla-env-setup.py\n!python pytorch-xla-env-setup.py --version $VERSION","f7bd385e":"!git clone https:\/\/github.com\/huggingface\/transformers.git\n!pip install .\/transformers\n","afc67024":"import torch\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration","fdb1fa4c":"tokenizer = T5Tokenizer.from_pretrained('t5-base')","ec437a1a":"# process the examples in input and target text format and the eos token at the end \ndef add_eos_to_examples(example):\n    example['input_text'] = '%s <\/s>' % (example['question'])\n    example['target_text'] = '%s <\/s>' % (example['answers'])\n    return example\n\n# tokenize the examples\ndef convert_to_features(example_batch):\n    input_encodings = tokenizer.batch_encode_plus(example_batch['input_text'], pad_to_max_length=True, max_length=512)\n    target_encodings = tokenizer.batch_encode_plus(example_batch['target_text'], pad_to_max_length=True, max_length=16)\n\n    encodings = {\n        'input_ids': input_encodings['input_ids'], \n        'attention_mask': input_encodings['attention_mask'],\n        'target_ids': target_encodings['input_ids'],\n        'target_attention_mask': target_encodings['attention_mask']\n    }\n\n    return encodings","660ef9a7":"import pandas as pd\ntrain = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')","3f4ca36a":"test.head()","0b47112b":"import matplotlib.pyplot as plt\nplt.style.use('ggplot')\ntrain['sentiment'].hist()","447b7352":"content = []\nfor i in range(len(train)):\n  content.append(\"context: %s classification: %s <\/s>\"%(train['text'][i], train['sentiment'][i]))\ntrain['content'] = content","3ca49dc6":"content = []\nfor i in range(len(test)):\n  content.append(\"context: %s classification: %s <\/s>\"%(test['text'][i], test['sentiment'][i]))\ntest['content'] = content","5d55e9b8":"def pre(t):\n  return \"%s <\/s>\"%t\ntrain['selected_text'] = train['selected_text'].apply(pre)","883ae5fe":"from sklearn.model_selection import train_test_split\ntrain = train[['content','selected_text']]\ntrain.columns = ['text', 'target']\ntrain, valid = train_test_split(train, test_size=0.2, random_state=42)","dae04088":"from torch.utils.data import Dataset, DataLoader\nfrom transformers import T5Tokenizer\n\nclass T5Model(Dataset):\n  def __init__(self, tokenizer,df,  max_len=128, train=True):\n    self.data_column = df[\"text\"].values\n    if train:\n        self.class_column = df['target'].values\n    self.max_len = max_len\n    self.tokenizer = tokenizer\n    self.train = train\n        \n  def __len__(self):\n      return len(self.data_column)\n\n  def __getitem__(self, index):\n    # tokenize inputs\n    tokenized_inputs = self.tokenizer.encode_plus( self.data_column[index], max_length=self.max_len, pad_to_max_length=True, truncation=True,return_tensors=\"pt\")\n    source_ids = tokenized_inputs[\"input_ids\"].squeeze()\n    src_mask    = tokenized_inputs[\"attention_mask\"].squeeze() # might need to squeeze\n    \n    if self.train:\n        tokenized_targets = self.tokenizer.encode_plus( self.class_column[index] , max_length=32, pad_to_max_length=True,truncation=True, return_tensors=\"pt\")\n        target_ids = tokenized_targets[\"input_ids\"].squeeze()\n        target_mask = tokenized_targets['attention_mask'].squeeze()  # might need to squeeze\n        return {\"input_ids\": source_ids, \"attention_mask\": src_mask, \n                \"target_ids\": target_ids, \"target_attention_mask\": target_mask}\n    else:\n        return {\"input_ids\": source_ids, \"attention_mask\": src_mask}","5a63b886":"train_dataset = T5Model(tokenizer, train)\nvalid_dataset = T5Model(tokenizer,valid)","65156ee4":"test_dataset = T5Model(tokenizer, test, train=False)","24d61116":"%%timeit\ntrain_dataset[1]","34683e13":"len(train_dataset), len(valid_dataset), len(test_dataset)","9d2ace5c":"# cach the dataset, so we can load it directly for training\n\ntorch.save(train_dataset, 'train_data.pt')\ntorch.save(valid_dataset, 'valid_data.pt')\ntorch.save(test_dataset, 'test_data.pt')","3c5abc7c":"import dataclasses\nimport logging\nimport os\nimport sys\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Optional\n\nimport numpy as np\nimport torch\n\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer, EvalPrediction\nfrom transformers import (\n    HfArgumentParser,\n    DataCollator,\n    Trainer,\n    TrainingArguments,\n    set_seed,\n)\n\n\nlogger = logging.getLogger(__name__)\n\n# prepares lm_labels from target_ids, returns examples with keys as expected by the forward method\n# this is necessacry because the trainer directly passes this dict as arguments to the model\n# so make sure the keys match the parameter names of the forward method\n@dataclass\nclass T2TDataCollator():\n    def __call__(self, batch: List) -> Dict[str, torch.Tensor]:\n        \"\"\"\n        Take a list of samples from a Dataset and collate them into a batch.\n        Returns:\n            A dictionary of tensors\n        \"\"\"\n        input_ids = torch.stack([example['input_ids'] for example in batch])\n        lm_labels = torch.stack([example['target_ids'] for example in batch])\n        lm_labels[lm_labels[:, :] == 0] = -100\n        attention_mask = torch.stack([example['attention_mask'] for example in batch])\n        decoder_attention_mask = torch.stack([example['target_attention_mask'] for example in batch])\n        \n\n        return {\n            'input_ids': input_ids, \n            'attention_mask': attention_mask,\n            'lm_labels': lm_labels, \n            'decoder_attention_mask': decoder_attention_mask\n        }\n\n\n@dataclass\nclass ModelArguments:\n    \"\"\"\n    Arguments pertaining to which model\/config\/tokenizer we are going to fine-tune from.\n    \"\"\"\n\n    model_name_or_path: str = field(\n        metadata={\"help\": \"Path to pretrained model or model identifier from huggingface.co\/models\"}\n    )\n    tokenizer_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n    )\n    cache_dir: Optional[str] = field(\n        default=None, metadata={\"help\": \"Where do you want to store the pretrained models downloaded from s3\"}\n    )\n\n@dataclass\nclass DataTrainingArguments:\n    \"\"\"\n    Arguments pertaining to what data we are going to input our model for training and eval.\n    \"\"\"\n    train_file_path: Optional[str] = field(\n        default='train_data.pt',\n        metadata={\"help\": \"Path for cached train dataset\"},\n    )\n    valid_file_path: Optional[str] = field(\n        default='valid_data.pt',\n        metadata={\"help\": \"Path for cached valid dataset\"},\n    )\n    max_len: Optional[int] = field(\n        default=512,\n        metadata={\"help\": \"Max input length for the source text\"},\n    )\n    target_max_len: Optional[int] = field(\n        default=32,\n        metadata={\"help\": \"Max input length for the target text\"},\n    )\n\n\ndef main():\n    # See all possible arguments in src\/transformers\/training_args.py\n    # or by passing the --help flag to this script.\n    # We now keep distinct sets of args, for a cleaner separation of concerns.\n\n    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n\n    # we will load the arguments from a json file, \n    #make sure you save the arguments in at .\/args.json\n    model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath('args.json'))\n\n    if (\n        os.path.exists(training_args.output_dir)\n        and os.listdir(training_args.output_dir)\n        and training_args.do_train\n        and not training_args.overwrite_output_dir\n    ):\n        raise ValueError(\n            f\"Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.\"\n        )\n\n    # Setup logging\n    logging.basicConfig(\n        format=\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\",\n        datefmt=\"%m\/%d\/%Y %H:%M:%S\",\n        level=logging.INFO if training_args.local_rank in [-1, 0] else logging.WARN,\n    )\n    logger.warning(\n        \"Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s\",\n        training_args.local_rank,\n        training_args.device,\n        training_args.n_gpu,\n        bool(training_args.local_rank != -1),\n        training_args.fp16,\n    )\n    logger.info(\"Training\/evaluation parameters %s\", training_args)\n\n    # Set seed\n    set_seed(training_args.seed)\n\n    # Load pretrained model and tokenizer\n    #\n    # Distributed training:\n    # The .from_pretrained methods guarantee that only one local process can concurrently\n    # download model & vocab.\n\n    tokenizer = T5Tokenizer.from_pretrained(\n        model_args.tokenizer_name if model_args.tokenizer_name else model_args.model_name_or_path,\n        cache_dir=model_args.cache_dir,\n    )\n    model = T5ForConditionalGeneration.from_pretrained(\n        model_args.model_name_or_path,\n        cache_dir=model_args.cache_dir,\n    )\n\n    # Get datasets\n    print('loading data')\n    train_dataset  = torch.load(data_args.train_file_path)\n    valid_dataset = torch.load(data_args.valid_file_path)\n    print('loading done')\n\n    # Initialize our Trainer\n    trainer = Trainer(\n        model=model,\n        args=training_args,\n        train_dataset=train_dataset,\n        eval_dataset=valid_dataset,\n        data_collator=T2TDataCollator(),\n        prediction_loss_only=True\n    )\n\n    # Training\n    if training_args.do_train:\n        trainer.train(\n            model_path=model_args.model_name_or_path if os.path.isdir(model_args.model_name_or_path) else None\n        )\n        trainer.save_model()\n        # For convenience, we also re-save the tokenizer to the same directory,\n        # so that you can share your model easily on huggingface.co\/models =)\n        if trainer.is_world_master():\n            tokenizer.save_pretrained(training_args.output_dir)\n\n    # Evaluation\n    results = {}\n    if training_args.do_eval and training_args.local_rank in [-1, 0]:\n        logger.info(\"*** Evaluate ***\")\n\n        eval_output = trainer.evaluate()\n\n        output_eval_file = os.path.join(training_args.output_dir, \"eval_results.txt\")\n        with open(output_eval_file, \"w\") as writer:\n            logger.info(\"***** Eval results *****\")\n            for key in sorted(eval_output.keys()):\n                logger.info(\"  %s = %s\", key, str(eval_output[key]))\n                writer.write(\"%s = %s\\n\" % (key, str(eval_output[key])))\n    \n        results.update(eval_output)\n    \n    return results\n\n\ndef _mp_fn(index):\n    # For xla_spawn (TPUs)\n    main()","5b54b6d1":"import json\nargs_dict = {\n  \"num_cores\": 8,\n  \"model_name_or_path\": 't5-base',\n  \"max_len\": 128 ,\n  \"target_max_len\": 2,\n  \"output_dir\": '.\/models\/tpu',\n  \"overwrite_output_dir\": True,\n  \"per_device_train_batch_size\": 4,\n  \"per_gpu_eval_batch_size\": 4,\n  \"gradient_accumulation_steps\": 4,\n  \"learning_rate\": 5e-5,\n  \"tpu_num_cores\": 8,\n  \"num_train_epochs\": 5,\n  \"do_train\": True\n}\nwith open('args.json', 'w') as f:\n  json.dump(args_dict, f)","ee07b676":"import torch_xla.core.xla_model as xm\nimport torch_xla.distributed.parallel_loader as pl\nimport torch_xla.distributed.xla_multiprocessing as xmp","9d083fa0":"xmp.spawn(_mp_fn, args=(), nprocs=8, start_method='fork')","31d8dc48":"import torch\nimport torch_xla\nimport torch_xla.core.xla_model as xm\n\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer\n\nfrom tqdm.auto import tqdm","b2f9baca":"model = T5ForConditionalGeneration.from_pretrained('models\/tpu').to('cpu') # because its loaded on xla by default\ntokenizer = T5Tokenizer.from_pretrained('models\/tpu')","8e6b739b":"valid_dataset = torch.load('valid_data.pt')\ndataloader = torch.utils.data.DataLoader(valid_dataset, batch_size=32)","b91a7ad7":"answers = []\nfor batch in tqdm(dataloader):\n  outs = model.generate(input_ids=batch['input_ids'], \n                        attention_mask=batch['attention_mask'],\n                        max_length=2,\n                        early_stopping=True)\n  outs = [tokenizer.decode(ids) for ids in outs]\n  answers.extend(outs)","d9dc7135":"predictions = []\nreferences = []\nfor ref, pred in zip(valid_dataset, answers):\n  predictions.append(pred)\n  references.append(tokenizer.decode(ref['target_ids']))","321ed459":"predictions[0], references[0]","1acc88d6":"from sklearn.metrics import classification_report\nprint(classification_report(references, predictions))","c7bb8aa8":"## Eval","043cae3c":"## Train","738bf28e":"## Load and process data","9cb3b8e9":"Install transformers with full support on T5model","db483c9a":"There are two gotchas here. First the metrics functionality in the nlp package is still work-in-progress so we will use the official squad evaluation script. Second, for some reason which I couldn't figure out, the `.generate` method is not working on TPU so will need to do prediction on CPU. For predicting the validation set it almost takes 40 mins.","d52f38f0":"Let's install PyTorch\/XLA enables PyTorch on TPU. Remember to turn on TPUv3.8. You have 30 hours use TPU on Kaggle","623dc8eb":"Start training!","7450725c":"Let's write the arguments in a dict and store in a json file. The above code will load this file and parse the arguments.","da87f37b":"## Write training script"}}