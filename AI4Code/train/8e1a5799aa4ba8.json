{"cell_type":{"0b043cfe":"code","c4387452":"code","9ac62f0f":"code","45a610f8":"code","935bd0aa":"code","3b2acb46":"code","659348c7":"code","61a4cfc4":"code","38ee0ff5":"code","d0fba1b6":"code","6ef50115":"code","0c31e30b":"code","546398d7":"code","1fec3c61":"code","ccfe5f55":"code","220274ea":"code","3509fe21":"code","414b2c9e":"code","a6e5d83c":"code","d2fb38be":"code","5752d5ec":"code","160e180f":"code","05d894a5":"code","8ebed507":"code","3760ad94":"code","a5e04b4b":"code","6e06e317":"code","07f02426":"code","c43f05f7":"code","4eb1799d":"code","29fac673":"code","d4b2686f":"code","4d6b7a6f":"code","424dfaf9":"code","cb71b2f0":"code","2176529e":"code","4a644f6a":"code","1d00e3cb":"code","6a1f8995":"code","fe5f1fe7":"code","c373a76e":"code","b86c8aa3":"code","2b2be0ea":"code","56ad64b7":"code","2fe356dd":"code","d8ef9d38":"code","b3af3332":"code","f10c8a8c":"code","aa60e163":"code","cb05eb17":"code","f3b50910":"code","6232400d":"code","95d8348b":"code","f8ef8106":"code","a348ceff":"code","f5135e2d":"code","41920895":"code","1330d88a":"code","142e891f":"code","c17f87ce":"code","7a86098e":"code","079b4e1d":"code","7b68f7fc":"code","2f7a1536":"code","5f7cca86":"code","4cf092a6":"code","393f00be":"code","ecd3b2db":"code","eae96fbf":"code","853906a9":"code","0ce9e6bc":"code","ea32ea18":"code","5687ae7e":"code","565f9462":"code","91b98275":"code","18709276":"markdown","8b831930":"markdown","5a6ac96f":"markdown","687304bf":"markdown","fbf04a05":"markdown","24bf1b6d":"markdown","7b415f99":"markdown","c7c0e13b":"markdown","7af83565":"markdown","79e9aa26":"markdown","bef5b862":"markdown","fc3b0316":"markdown","ac9db649":"markdown","b3f26237":"markdown","3e83d73c":"markdown","9c1d4bc2":"markdown","678674a2":"markdown","b69ad6c1":"markdown","f16ba832":"markdown","c104261a":"markdown","447364b8":"markdown","817b5be5":"markdown","55b0d572":"markdown","7d287b42":"markdown","03800b0e":"markdown","463fcabb":"markdown","4d3e19b1":"markdown","e2de20b2":"markdown","15ab2e00":"markdown","73ce0f2b":"markdown"},"source":{"0b043cfe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4387452":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nimport tensorflow as tf\nfrom tensorflow import keras\n\n#Machine Learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\nfrom sklearn.model_selection import RandomizedSearchCV\n\n%matplotlib inline","9ac62f0f":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n","45a610f8":"df.head()","935bd0aa":"df.shape","3b2acb46":"df.describe()","659348c7":"#Let's check the feature typs\ndf.dtypes","61a4cfc4":"df.TotalCharges.values","38ee0ff5":"pd.to_numeric(df.TotalCharges)","d0fba1b6":"#Here we are seeing that some of the valus contain space(' ') let's tackle it.\npd.to_numeric(df.TotalCharges, errors = 'coerce')","6ef50115":"#Let's have a glance of those rows which contains space (' ').\ndf[pd.to_numeric(df.TotalCharges, errors = 'coerce').isnull()]","0c31e30b":"new_df = df[df.TotalCharges != ' ']","546398d7":"#So now safely convert the feature type.\nnew_df.TotalCharges = pd.to_numeric(new_df.TotalCharges)","1fec3c61":"new_df.TotalCharges.dtypes","ccfe5f55":"sns.countplot(x = 'Churn', data = new_df)","220274ea":"#Let'us see the realationship between numercal features and the target features.\ntenure_churn_yes = new_df[new_df.Churn=='Yes'].tenure\ntenure_churn_no = new_df[new_df.Churn=='No'].tenure\n\nplt.hist([tenure_churn_yes, tenure_churn_no], color = ['green', 'red'], label = ['Churn = Yes', 'Churn = No'] )\nplt.legend()","3509fe21":"mc_churn_yes = new_df[new_df.Churn=='Yes'].MonthlyCharges\nmc_churn_no = new_df[new_df.Churn=='No'].MonthlyCharges\n\nplt.hist([mc_churn_yes, mc_churn_no], color = ['green', 'red'], label = ['Churn = Yes', 'Churn = No'] )\nplt.legend()","414b2c9e":"sns.countplot(x = 'gender', hue = 'Churn', data =new_df)","a6e5d83c":"new_df.isnull().sum()","d2fb38be":"#Out_check = ( 'tenure', 'MonthlyCharges','TotalCharges')\nsns.boxplot(x = 'Churn', y = 'tenure', data = new_df)","5752d5ec":"sns.boxplot(x = 'Churn', y = 'MonthlyCharges', data = new_df)","160e180f":"sns.boxplot(x = 'Churn', y = 'TotalCharges', data = new_df)","05d894a5":"# I dont't think customerID columns will be eventfull in our way so drop it\nnew_df.drop(['customerID'], axis = 1, inplace = True)","8ebed507":"def uni_col_val(df):\n    for column in df:\n        if df[column].dtype == 'object':\n            print(f'{column} : {df[column].unique()}')","3760ad94":"uni_col_val(new_df)","a5e04b4b":"new_df.replace( 'No phone service', 'No', inplace = True )\nnew_df.replace( 'No internet service', 'No', inplace = True )","6e06e317":"uni_col_val(new_df)","07f02426":"new_df['Partner'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['Dependents'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['PhoneService'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['MultipleLines'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['OnlineSecurity'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['OnlineBackup'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['DeviceProtection'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['TechSupport'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['StreamingTV'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['StreamingMovies'].replace({'Yes' : 1, 'No' : 0},inplace = True)\nnew_df['Churn'].replace({'Yes' : 1, 'No' : 0},inplace = True)  \nnew_df['PaperlessBilling'].replace({'Yes' : 1, 'No' : 0},inplace = True)\n           ","c43f05f7":"new_df['gender'].replace({'Female':1, 'Male':0},inplace = True)","4eb1799d":"for col in new_df:\n    print(f'{col} : {new_df[col].unique()}')\n    ","29fac673":"#new_df['gender'].replace({'Female':1, 'Male':0},inplace = True)","d4b2686f":"new_df.head()","4d6b7a6f":"#Let's do label_encoding for the rest two categorical_features\nle_IS = LabelEncoder()\nle_CT = LabelEncoder()\nle_PM = LabelEncoder()","424dfaf9":"new_df['InternetService'] = le_IS.fit_transform(new_df['InternetService'])\nnew_df['Contract'] = le_CT.fit_transform(new_df['Contract'])\nnew_df['PaymentMethod'] =le_PM.fit_transform(new_df['PaymentMethod'])\n","cb71b2f0":"# first have the corelation\n#colormap = plt.cm.RdBu\nplt.figure(figsize=(20,20))\nplt.title('Person Correlation of Features', y=1.05, size=15)\nsns.heatmap(new_df.corr(),linewidths=0.1,vmax=1.0, \n            square=True,  linecolor='white', annot=True)","2176529e":"sns.relplot(x= 'TotalCharges', y = 'tenure' , hue = 'Churn', data = new_df)","4a644f6a":"sns.relplot(x= 'TotalCharges', y = 'MultipleLines' , hue = 'Churn', data = new_df)","1d00e3cb":"sns.relplot(x= 'TotalCharges', y = 'OnlineBackup' , hue = 'Churn', data = new_df)","6a1f8995":"sns.relplot(x= 'TotalCharges', y = 'DeviceProtection' , hue = 'Churn', data = new_df)","fe5f1fe7":"sns.relplot(x= 'TotalCharges', y = 'StreamingTV' , hue = 'Churn', data = new_df)","c373a76e":"sns.relplot(x= 'TotalCharges', y = 'StreamingMovies' , hue = 'Churn', data = new_df)","b86c8aa3":"sns.relplot(x= 'Dependents', y = 'Partner' , hue = 'Churn', data = new_df)","2b2be0ea":"sns.relplot(x= 'InternetService', y = 'PhoneService' , hue = 'Churn', data = new_df)","56ad64b7":"new_df.head()","2fe356dd":"features = new_df[['gender','SeniorCitizen','Partner','Dependents','PhoneService','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling','PaymentMethod']].columns","d8ef9d38":"for i in features:\n    sns.countplot(x = i, hue = 'Churn', data = new_df)\n    plt.show()","b3af3332":"#Let's scale down the data.\n\ncols_to_scale = ['tenure', 'MonthlyCharges', 'TotalCharges']\nscaler = MinMaxScaler()\nnew_df[cols_to_scale] = scaler.fit_transform(new_df[cols_to_scale])","f10c8a8c":"new_df.head()","aa60e163":"X = new_df.drop(['Churn'], axis=1)\ny = new_df.Churn","cb05eb17":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","f3b50910":"\n\nlen(X_train.columns)","6232400d":"model = keras.Sequential([\n    keras.layers.Dense(20, input_shape = (19,),activation = 'sigmoid'),\n     keras.layers.Dense(16,activation = 'relu' ),\n     keras.layers.Dense(12,activation = 'relu' ),\n     keras.layers.Dense(1,activation = 'sigmoid' )\n])\n\nmodel.compile(\n    optimizer = 'adam',\n    loss = 'binary_crossentropy',\n    metrics = ['accuracy']\n    \n)","95d8348b":"model.fit(X_train, y_train, epochs = 20)","f8ef8106":"model.evaluate(X_test,y_test)","a348ceff":"y_p = model.predict(X_test)\n","f5135e2d":"y_p[:10]","41920895":"y_pred = []\nfor output in y_p:\n    if output>.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)\n    \n    ","1330d88a":"y_pred[:10]","142e891f":"y_test[:10]","c17f87ce":"from sklearn.metrics import confusion_matrix, classification_report","7a86098e":" print(classification_report(y_test,y_pred))","079b4e1d":"cm = tf.math.confusion_matrix(labels = y_test, predictions = y_pred)\nsns.heatmap(cm,annot = True,fmt = 'd')","7b68f7fc":"\n#Accuracy\nround((916+196)\/(916+117+178+196),2)","2f7a1536":"round(916\/(916+178),2)","5f7cca86":"round(196\/(196+117),2)","4cf092a6":"round(916\/(916+117), 2)","393f00be":"round(196\/(178+196), 2)","ecd3b2db":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","eae96fbf":"knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train,y_train)\ny_pred = knn.predict(X_test)","853906a9":"from sklearn.metrics import mean_squared_error\nprint('Mean Squared Error is', mean_squared_error(y_test, y_pred))\n","0ce9e6bc":"Error = []\n\nfor i in range(1, 51):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    y_pred = knn.predict(X_test)\n    Error.append(mean_squared_error(y_test,y_pred))","ea32ea18":"plt.figure(figsize=(10,5))\nplt.plot(range(1,51), Error, color = 'blue', marker = 'o', markerfacecolor = 'red', markersize = 10)\n\nplt.title('Error rate vs K. value')\nplt.xlabel('k')\nplt.ylabel('Error Rate')","5687ae7e":"knn = KNeighborsClassifier(n_neighbors=50)\nknn.fit(X_train,y_train)\ny_pred = knn.predict(X_test)\nprint('Mean Squared Error is', mean_squared_error(y_test, y_pred))\n","565f9462":"cv = KFold(n_splits = 6, random_state = 0, shuffle = True)\n\nError = []\n\nfor i in range(1, 51):\n    knn = make_pipeline(StandardScaler(),KNeighborsClassifier(n_neighbors=i)) \n    y_pred = cross_val_predict(knn, X,y, cv = cv)\n    Error.append(mean_squared_error(y,y_pred))\n","91b98275":"plt.figure(figsize=(10,5))\nplt.plot(range(1,51), Error, color = 'red', marker = 'o', markerfacecolor = 'blue', markersize = 10)\n\nplt.title('Error rate vs K. value')\nplt.xlabel('k')\nplt.ylabel('Error Rate')","18709276":"Here we are seeing that a lot's of column contain yes and no value.And 'No phone service and 'No internet service' is equavalent to no.So first convert those values into no. ","8b831930":"From the above chart we are seeing that man who are associated with the company greater than 60 months are likly to not churning.\nAnd who are less then 10 months are likely to churn the company.","5a6ac96f":"# Cross Validation","687304bf":"Now our data is totally cleaned up and try to find some insights:","fbf04a05":"Outliers Checking:","24bf1b6d":"Recall for 1 class","7b415f99":"Here we are seeing that more 1400 people are not likely to churn the company as they have monthlychargers less then 30","c7c0e13b":"Here we are seeing that 3 features are Numerical and rest all of are strings type.But here one noticable point is \n'TotalCharges' feature is given as object type, which cann,t be object and we have to convert it into numeric type. \n","7af83565":"here we are seeing that around 50error is less and in a stable mood.","79e9aa26":"Here we are seeing there is decent amount of outliers in 'TotalCharges' features.And i think it willnot\nbe wise delete or substitue those value because this feature obtained from multiplyinf 'MonthlyCharges' by 'tenure'\nand which is not imaginary but true values.","bef5b862":"Here we are seeing some categorical features we will handlee this but before that let's map the rest all the features.","fc3b0316":"Reporting the result:","ac9db649":"Till now we have seen realtionship among features wirh respect to target.\n\nNow let's how does all the features related to the target. ","b3f26237":"This giving us an clear indication that Person having partner and Dependents == 0 are  only interested in Churning.","3e83d73c":"Here we are not seeing a conclusive relationship among the features except Monthly and Total charges.Though i will try to get the best out of it. ","9c1d4bc2":"Let's try to understand how confusion_matrix is formatted.","678674a2":"Before dig into our first have something about the problem.Here our objective is to predicting the churning of people from this company in future . And at the end Compare the prediction between Deep learning model and Machine learning model, how they work corresponding to this dataset.\n\n\n\nContent of this kernel.\n* Collecting the Data.\n* Analyzing the data.\n* Wrangling the data.\n* Fature Engineering.\n* Make prediction with the help of ANN","b69ad6c1":"And people having OnlineBackup and totalcharges greater then 4000 are not interested in Churn.","f16ba832":"# Data Cleaning","c104261a":"# finding perfect k Value.","447364b8":"Recall for 0 class","817b5be5":"Precision for 0 class i.e Precision for customers who didn't chuened. ","55b0d572":"Except few people around 4000 rest of the are having Multiple line = 0 are not interested in Churn.\nAnd people having multiple line and totalcharges greater then 6000 are also not interested in Churn.","7d287b42":"People who's charges greater then  4000 rest of the are having Streaming TV = 0 are totally  not interested in Churn.\n","03800b0e":"### Now let's try with Machine learning Algorithm","463fcabb":" Here we are seeing that out of 7043, 11 rows contains ' '.So we can drop those rows .","4d3e19b1":"# EDA","e2de20b2":"# Introduction","15ab2e00":"Precision for 1 class i.e Precision for customers who actually  churned.","73ce0f2b":"Let's try to find some insight by seeing the corelation"}}