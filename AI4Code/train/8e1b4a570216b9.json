{"cell_type":{"23692a0a":"code","f57fc674":"code","295b4073":"code","bfdae3d5":"code","affc622b":"code","40f707d9":"code","17ebb465":"code","e59711b4":"code","fad09851":"code","81455ae1":"code","5c9beec1":"code","5776507f":"code","2bb2c6da":"code","bf48d8f0":"code","9ad80072":"code","4172a110":"code","9ac18328":"code","0f4c9f10":"code","200974b2":"code","41657eca":"code","7549eaac":"code","995cfffd":"code","ea06ae5b":"code","5f0c03a8":"markdown","c7a3c4eb":"markdown","9f61f1ee":"markdown","90736574":"markdown","2a47418f":"markdown","94f1b3a6":"markdown","cac81577":"markdown","d7768390":"markdown"},"source":{"23692a0a":"# Import libraries\nimport pandas as pd\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer","f57fc674":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.info()","295b4073":"train.head()","bfdae3d5":"test.info()","affc622b":"test.head()","40f707d9":"total_len = len(train) + len(test)\nprint(len(train) \/ total_len * 100)\nprint(len(test) \/ total_len * 100)","17ebb465":"# PassengerId is a running index\ntrain = train.drop(columns='PassengerId')\n\n# Cabin has a large number of missing values\ntrain = train.drop(columns='Cabin')\ntest = test.drop(columns='Cabin')\n\ntrain = train.drop(columns='Ticket')\ntest = test.drop(columns='Ticket')","e59711b4":"# Compute median of Age on training set, save, then impute on training and test set\nmedian_age = train['Age'].median()\ntrain['Age'].fillna(median_age, inplace=True)\ntest['Age'].fillna(median_age, inplace=True)","fad09851":"# Drop remaining missing values\ntrain = train.dropna()\ntrain.info()","81455ae1":"# Store target in y\nclean_train = train.copy()\nclean_test = test.copy()\n\ny_train = clean_train[['Survived']].copy() # Needs to be DataFrame\ny_train.head()","5c9beec1":"type(y_train)","5776507f":"# Store predictors in X\nX_train = clean_train[clean_train.columns.drop('Survived')].copy()\nX_train.columns","2bb2c6da":"X_test = clean_test.copy()\nX_test.columns","bf48d8f0":"y_train.columns","9ad80072":"# Encode categorical attributes as numerical values\ncat_attribs = ['Sex', 'Embarked']\n\nfull_pipeline = ColumnTransformer([\n    (\"cat\", OneHotEncoder(), cat_attribs),\n])\n\nX_train_prepared = full_pipeline.fit_transform(X_train)\nX_test_prepared = full_pipeline.fit_transform(X_test)","4172a110":"# Fit the model to the train set\nsurvival_classifier = DecisionTreeClassifier(max_leaf_nodes=10, random_state=0)\nsurvival_classifier.fit(X_train_prepared, y_train)","9ac18328":"type(survival_classifier)","0f4c9f10":"# Accuracy on the training set\nsurvival_classifier.score(X_train_prepared, y_train)","200974b2":"predictions = survival_classifier.predict(X_test_prepared)","41657eca":"predictions[:10]","7549eaac":"submit = test.copy()\nsubmit['Survived'] = predictions\nsubmit = submit[['PassengerId', 'Survived']]\nsubmit.shape","995cfffd":"submit.head()","ea06ae5b":"submit.to_csv('..\/working\/submit.csv', index=False)","5f0c03a8":"The dataset is split 70\/30 into training and test sets.","c7a3c4eb":"A decision tree classifier uses a tree-like structure to determine the class label for a sample. It is constructed by repeatedly splitting the data into successively more homogenous subsets.\n\nIt is a good model to start with for a classification problem because it is easy to understand and relatively fast to run.\n\n> How does a decision tree classifier perform compared to the baseline models below?\n\n# Summary\n\nThis decision tree classifier has an accuracy of 76.5% on the test set, which is equal to the second baseline model. I have done some basic pre-processing of the data.\n\n## Baseline models\n\n1. Nobody survives. Accuracy is about 60%.\n2. Females survive; males do not. Accuracy is 76.5%. ","9f61f1ee":"# Accuracy","90736574":"# Clean the data","2a47418f":"2 rows are dropped after cleaning the data.","94f1b3a6":"# Train the model","cac81577":"# Predict on the test set","d7768390":"# Get the data"}}