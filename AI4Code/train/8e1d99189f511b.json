{"cell_type":{"99eb6f3e":"code","c0d2b617":"code","4170ccdc":"code","c9f297ab":"code","d73ff8db":"code","ae4b4ffe":"code","31a37b04":"code","2592e411":"code","d9b323c6":"code","8f560c21":"code","baf99a03":"code","d0489434":"code","34680336":"code","956131c3":"code","23e7cd72":"code","ef09f37e":"code","752e1306":"markdown"},"source":{"99eb6f3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0d2b617":"ds = pd.read_csv('\/kaggle\/input\/up-crime-data-year-2019\/MR data - Compiled Data Set.csv')\nds.loc[[155]]","4170ccdc":"dataset = pd.read_csv('\/kaggle\/input\/up-crime-data-year-2019\/MR data - Compiled Data Set.csv')\n# dataset.head(0)\n# for col in dataset.columns:\n#     print(col,end='\\n************\\n')","c9f297ab":"# Changing the names of the columns to something readable\nnew_columns = dataset.columns.values\n# print(type(new_columns))\nnew_columns[0]='City'\nnew_columns[3]='murder_cause'\nnew_columns[10]='IPC crime act'\nnew_columns[4]='Child Victims'\nnew_columns[5]='Male Victims'\nnew_columns[6]='Female Victims'\nnew_columns[7]='Kidnaped Child Victims'\n# print(\"\\nAfter change :{}\".format(new_columns))\n#Re-Set the column names on the og dataset\ndataset.columns = new_columns\n# Dropping the irrelevant columns\ndataset=dataset.drop(['Title','Text'],axis=1)\n# Setting NaN values to 0\ndataset=dataset.fillna(0)","d73ff8db":"dataset.head()","ae4b4ffe":"for i in range(1,12):\n    dataset.insert(7+i,\"Act{}\".format(i),0)\n# dataset.head()","31a37b04":"# dataset.columns","2592e411":"dataset['IPC crime act']=dataset['IPC crime act'].astype('string')\ncrime_act_values = (dataset['IPC crime act'].values)\n\n# Seperating the crimes | i.e   8,9,10  =>  ['8','9','10']\nfor j in range(len(crime_act_values)):\n    acts_commited = crime_act_values[j].split(',')\n#     print(acts_commited)\n    for x in acts_commited:\n        if x=='0':\n            continue\n        dataset.loc[int(j),'Act{}'.format(x.strip())]=1\n        \n# dataset.head()","d9b323c6":"# Murder cause unique values\ndataset.murder_cause.unique()","8f560c21":"# dataset.drop(['IPC crime act'],axis=1)","baf99a03":"dataset.head()\n","d0489434":"city_wise=(dataset['City'].value_counts().to_dict())\ncity_wise","34680336":"import matplotlib.pyplot as plt\n%matplotlib inline","956131c3":"#making city-wise crime report \nvals = list(city_wise.values())\nname = list(city_wise.keys())\n\nplt.figure(figsize=(15,15))\nplt.subplot(2,2,1)\n\nplt.pie(vals,labels=name,autopct='%.2f%%')\nplt.title(\"City wise crime data\",fontsize=20)\n\n# plt.show()\n\n# plt.bar(range(len(city_wise)),vals,tick_label=name)\n# plt.title(\"City wise crime data\")\n# plt.xlabel(\"City\")\n# plt.ylabel(\"Crimes commited\")\n# plt.show()\n\n\n# \n# \nmurder_reasons = dataset['murder_cause'].value_counts().to_dict()\nmurder_reasons.pop(0)\n\nm_val = list(murder_reasons.values())\nm_key = list(murder_reasons.keys())\nplt.figure(figsize=(15,15))\nplt.subplot(2,2,2)\nplt.bar(range(len(murder_reasons)),m_val,tick_label = m_key)\nplt.ylabel(\"Number of crimes commited\",fontsize=20)\nplt.title(\"# of crimes v\/s Common Reasons\",fontsize=20)\nplt.xticks(rotation=90,fontsize=20)\n# plt.show()\n\n# \n# \nmy_dict={}\nfor i in range(1,12):\n    my_dict[\"Act {}\".format(i)]=dataset[\"Act{}\".format(i)].sum() \n\nact_val = list(my_dict.values())\nact_key = list(my_dict.keys())\nplt.subplot(2,2,3)\n# plt.figure(figsize=(15,15))\nplt.bar(range(len(my_dict)),act_val,tick_label = act_key)\nplt.ylabel(\"Number of crimes commited\",fontsize=20)\nplt.title(\"IPC Act wise crimes commited \",fontsize=20)\nplt.xticks(rotation=90,fontsize=15)\n\nplt.show()","23e7cd72":"# Number of people affected due to different IPC acts :\n\n# dictionary (act -> (child , adult))\ncount = {}\nfor i in range(1,12):\n    count[i]=[0,0]\nfor i in range(len(dataset['City'])):\n    for actno in range(1,12):\n        if dataset.loc[i,\"Act{}\".format(actno)]!=0:\n            count[actno][0]+=int(dataset.loc[i,\"Number of childs invoved\"])\n            count[actno][1]+=int(dataset.loc[i,\"Number of adult victims\"])\n","ef09f37e":"#seperating the child & adult lists :\nchild_affected=[]\nadults_affected=[]\nfor i in range(1,12):\n    child_affected.append(count[i][0])\n    adults_affected.append(count[i][1])\n# print(child_affected)\n# print(adults_affected)\nindex=np.arange(11)\nwidth=0.3\nplt.figure(figsize=(9,9))\nplt.bar(index,child_affected,width,color='red',label = 'Children affected')\nplt.bar(index+width,adults_affected,width,color='blue',label = 'Adults affected')\nplt.xticks(index+width\/2,act_key,rotation=90,fontsize=13)\nplt.legend(loc='best',prop={'size':20})\nplt.xlabel(\"Acts\",fontsize=16)\nplt.ylabel(\"# of people affected\",fontsize=16)\nplt.title(\"Number of people affected by different acts\",fontsize=20)\nplt.show()","752e1306":"### The column names initially are : "}}