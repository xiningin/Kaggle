{"cell_type":{"a4e17935":"code","907ffe93":"code","285790f4":"code","ec0b89ed":"code","cf9e99d5":"code","e755b021":"code","6c64a8d3":"code","6ccd7ceb":"code","9339a6ec":"code","42aecc69":"code","7d3b0031":"code","872f0178":"code","4c1e31c7":"code","8189149d":"code","c568321f":"code","861654d0":"code","99e54a4f":"code","67875c75":"code","46976666":"code","2224f924":"code","ed5ec322":"code","76e7601f":"code","b134f012":"code","365caf46":"code","1209be85":"code","1da8449e":"code","126669c7":"code","fc348d16":"code","294ef70a":"code","269f2cf3":"code","88e48839":"code","7010acbc":"code","bb98124a":"code","33f70a65":"code","720ccb17":"code","8722af49":"code","8ba07851":"code","2d9284c5":"code","fdfaa449":"code","ac926106":"code","c8aea41d":"code","5f29a7a4":"code","49c46e61":"code","788dfe06":"code","8a58a06a":"code","2e3a24be":"code","fd50a81a":"code","97f9b137":"code","d6009424":"code","fddab08f":"code","941571cc":"code","c7120f45":"code","8739e5c5":"code","6ebba028":"code","b3c3d1ea":"code","a0cf5202":"code","a7ebde7f":"code","50a3e9af":"code","92773c8c":"code","006abeeb":"code","11a4b81b":"code","bbc5f3da":"code","30f185e9":"code","2e99f70b":"code","f23e9daa":"code","3f005340":"code","8f33a39d":"code","50092f07":"code","8be04c14":"markdown","73cfefa4":"markdown","393bfbb5":"markdown","4167bbb0":"markdown","6b34ddc6":"markdown","da09186a":"markdown","4db4846f":"markdown","353269f3":"markdown","821717c2":"markdown","b8a4c26d":"markdown","c4ab56f9":"markdown","d8abb1b7":"markdown","673f1f36":"markdown","aaa200d2":"markdown","9e97830b":"markdown","9cd857d8":"markdown","65276866":"markdown","50fbb4aa":"markdown","f8be8ce3":"markdown","7f6ed817":"markdown"},"source":{"a4e17935":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","907ffe93":"!pip install pycountry-convert\n!pip install country_converter --upgrade\n","285790f4":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px \nimport pycountry\nimport pycountry_convert as pc\nimport plotly.graph_objects as go\nfrom Bio import SeqIO\nfrom Bio import pairwise2\nfrom Bio.pairwise2 import format_alignment\nfrom Bio import Phylo\nfrom Bio.SeqUtils import GC\nfrom functools import lru_cache\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom Bio.SeqUtils import GC_skew,molecular_weight\nimport pylab\nimport country_converter as coco\nfrom plotly.subplots import make_subplots\n","ec0b89ed":"import pandas as pd\ncovid_clean = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\",parse_dates=['Date'])\n\nus_covid19_daily = pd.read_csv(\"..\/input\/covid19-in-usa\/us_covid19_daily.csv\")\nus_states_covid19_daily = pd.read_csv(\"..\/input\/covid19-in-usa\/us_states_covid19_daily.csv\")\n","cf9e99d5":"covid_clean['Active'] = covid_clean['Confirmed'] - covid_clean['Deaths'] - covid_clean['Recovered']\n\ncovid_clean['Country\/Region'] = covid_clean['Country\/Region'].replace('Mainland China', 'China')\n\ncovid_clean[['Province\/State']] = covid_clean[['Province\/State']].fillna('unknown')\ncovid_ship =covid_clean[covid_clean['Province\/State'].str.contains('Grand Princess')|covid_clean['Province\/State'].str.contains('Diamond Princess cruise ship')]\n","e755b021":"\n@lru_cache(maxsize=None)\ndef do_fuzzy_search(country):\n    try:\n        result = pycountry.countries.search_fuzzy(country)\n        return result[0].alpha_2\n    except:\n        return np.nan\n\ncovid_clean['country_code'] = covid_clean[\"Country\/Region\"].apply(lambda country: do_fuzzy_search(country))","6c64a8d3":"covid_clean[\"country_code\"] = covid_clean.apply(lambda row:\"TW\" if row['Country\/Region'] == 'Taipei and environs'   else row['country_code'],axis = 1)\ncovid_clean[\"country_code\"] = covid_clean.apply(lambda row:\"IR\" if row['Country\/Region'] == 'Iran (Islamic Republic of)' else row['country_code'],axis = 1) \ncovid_clean[\"country_code\"] = covid_clean.apply(lambda row:\"PS\" if row['Country\/Region'] == 'occupied Palestinian territory' else row['country_code'],axis = 1)\ncovid_clean[\"country_code\"] = covid_clean.apply(lambda row:\"GB\" if row['Country\/Region'] == 'Channel Islands' else row['country_code'],axis = 1)\ncovid_clean[\"country_code\"] = covid_clean.apply(lambda row:\"TW\" if row['Country\/Region'] == 'Taiwan*'  else row['country_code'],axis = 1)\ncovid_clean[\"country_code\"] = covid_clean.apply(lambda row:\"KR\" if row['Country\/Region'] == 'Korea, South'  else row['country_code'],axis = 1)\ncovid_clean[\"country_code\"] = covid_clean.apply(lambda row:\"CD\" if row['Country\/Region'] == 'Congo (Kinshasa)'  else row['country_code'],axis = 1)\ncovid_clean[\"country_code\"] = covid_clean.apply(lambda row:\"CD\" if row['Country\/Region'] == 'Congo (Brazzaville)'   else row['country_code'],axis = 1)","6ccd7ceb":"@lru_cache(maxsize=None)\ndef do_continent_search(alpha2):\n    try:\n        result = pc.country_alpha2_to_continent_code(alpha2)\n        return result\n    except Exception:\n        return np.nan\ncovid_clean['continent'] = covid_clean[\"country_code\"].apply(lambda x: do_continent_search(x))\ncovid_clean[\"continent\"] = covid_clean.apply(lambda row:\"EU\" if row['country_code'] == 'VA'   else row['continent'],axis = 1)\n\n","9339a6ec":"@lru_cache(maxsize=None)\ndef country(alpha2):\n    try:\n        result =coco.convert(names=alpha2, to='name_short',not_found = np.NaN)\n        return result\n    except Exception:\n        return np.nan\n","42aecc69":"covid_clean['Country\/Region'] = covid_clean['country_code'].apply(lambda x:country(x))","7d3b0031":"latest_data = covid_clean[covid_clean[\"Date\"] == max(covid_clean[\"Date\"])].reset_index()\ncountry_latest_data = latest_data.groupby('Country\/Region').sum().reset_index().sort_values(by = 'Confirmed',ascending = False).head(5)\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=country_latest_data[\"Country\/Region\"], y=country_latest_data['Confirmed'],marker_color = 'rgb(55, 83, 109)'),\n    go.Bar(name='Active', x=country_latest_data[\"Country\/Region\"], y=country_latest_data['Active'],marker_color = 'lightsalmon'),\n    go.Bar(name = 'Revovered',x=country_latest_data[\"Country\/Region\"],y=country_latest_data['Recovered'],marker_color = 'green' ),\n    go.Bar(name = 'Deaths',x=country_latest_data[\"Country\/Region\"],y=country_latest_data['Deaths'],marker_color = 'crimson' ),\n    \n])\nfig.update_layout(barmode='group',title_text ='Top 5 countries ')\nfig.layout.template ='plotly_dark'\nfig.show()","872f0178":"latest_data = covid_clean[covid_clean[\"Date\"] == max(covid_clean[\"Date\"])].reset_index()\ncountry_latest_data = latest_data.groupby('Country\/Region').sum().reset_index()\ncountries_confirmed_cases = country_latest_data[country_latest_data['Confirmed']>1000].reset_index().sort_values(by = 'Confirmed',ascending = False)\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=countries_confirmed_cases[\"Country\/Region\"], y=countries_confirmed_cases['Confirmed'],marker_color = 'rgb(55, 83, 109)'),\n    go.Bar(name='Active', x=countries_confirmed_cases[\"Country\/Region\"], y=countries_confirmed_cases['Active'],marker_color = 'lightsalmon'),\n    go.Bar(name = 'Revovered',x=countries_confirmed_cases[\"Country\/Region\"],y=countries_confirmed_cases['Recovered'],marker_color = 'green' ),\n    go.Bar(name = 'Deaths',x=countries_confirmed_cases[\"Country\/Region\"],y=countries_confirmed_cases['Deaths'],marker_color = 'crimson' ),\n    \n])\nfig.update_layout(barmode='group',title_text ='Countries(confirmed>1000)')\nfig.layout.template ='plotly_dark'\nfig.show()","4c1e31c7":"latest_data = covid_clean[covid_clean[\"Date\"] == max(covid_clean[\"Date\"])].reset_index()\ncountry_latest_data = latest_data.groupby('Country\/Region').sum().reset_index()\ncountries_confirmed_cases = country_latest_data[(country_latest_data['Confirmed']<1000)&(country_latest_data['Confirmed']>100)].reset_index().sort_values(by = 'Confirmed',ascending = False)\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=countries_confirmed_cases[\"Country\/Region\"], y=countries_confirmed_cases['Confirmed'],marker_color = 'rgb(55, 83, 109)'),\n    go.Bar(name='Active', x=countries_confirmed_cases[\"Country\/Region\"], y=countries_confirmed_cases['Active'],marker_color = 'lightsalmon'),\n    go.Bar(name = 'Revovered',x=countries_confirmed_cases[\"Country\/Region\"],y=countries_confirmed_cases['Recovered'],marker_color = 'green' ),\n    go.Bar(name = 'Deaths',x=countries_confirmed_cases[\"Country\/Region\"],y=countries_confirmed_cases['Deaths'],marker_color = 'crimson' ),\n    \n])\nfig.update_layout(barmode='group',title_text ='Deaths vs Confirmed Cases(confirmed between 1000 and 100)')\nfig.layout.template ='plotly_dark'\nfig.show()","8189149d":"latest_data = covid_clean[covid_clean[\"Date\"] == max(covid_clean[\"Date\"])].reset_index()\ncountry_latest_data = latest_data.groupby('Country\/Region').sum().reset_index()\ncountries_confirmed_cases = country_latest_data[(country_latest_data['Confirmed']<100)&(country_latest_data['Confirmed']>10)].reset_index().sort_values(by = 'Confirmed',ascending = False)\nfig = go.Figure(data=[\n    go.Bar(name='Active', x=countries_confirmed_cases[\"Country\/Region\"], y=countries_confirmed_cases['Active'],marker_color = 'rgb(55, 83, 109)'),\n    go.Bar(name = 'Revovered',x=countries_confirmed_cases[\"Country\/Region\"],y=countries_confirmed_cases['Recovered'],marker_color = 'green' ),\n    go.Bar(name = 'Deaths',x=countries_confirmed_cases[\"Country\/Region\"],y=countries_confirmed_cases['Deaths'],marker_color = 'crimson' ),\n    \n])\nfig.update_layout(barmode='stack',title_text ='Coountries(confirmed between 100 and 10)')\nfig.layout.template ='plotly_dark'\nfig.show()","c568321f":"latest_data = covid_clean[covid_clean[\"Date\"] == max(covid_clean[\"Date\"])].reset_index()\ncountry_latest_data = latest_data.groupby('Country\/Region').sum().reset_index()\ncountries_confirmed_cases = country_latest_data[(country_latest_data['Confirmed']<10)].reset_index().sort_values(by = 'Confirmed',ascending = False)\nfig = go.Figure(data=[\n    go.Bar(name='Active', x=countries_confirmed_cases[\"Country\/Region\"], y=countries_confirmed_cases['Active'],marker_color = 'rgb(55, 83, 109)'),\n    go.Bar(name = 'Revovered',x=countries_confirmed_cases[\"Country\/Region\"],y=countries_confirmed_cases['Recovered'],marker_color = 'green' ),\n    go.Bar(name = 'Deaths',x=countries_confirmed_cases[\"Country\/Region\"],y=countries_confirmed_cases['Deaths'],marker_color = 'crimson' ),\n    \n])\nfig.update_layout(barmode='stack',title_text ='Countries(confirmed < 10)')\nfig.layout.template ='plotly_dark'\nfig.show()","861654d0":"temp = covid_clean.groupby(['Country\/Region','Date']).sum().reset_index()\ncountry_df =covid_clean.groupby('Country\/Region').sum().reset_index()\nls =country_df[country_df['Confirmed']>1000]['Country\/Region'].unique()\ntemp = temp[temp['Country\/Region'].isin(list(ls))]\na = temp.groupby('Country\/Region')\ncounter = 0\nfig = make_subplots(rows = ls.reshape(-1,2).shape[0],cols = ls.reshape(-1,2).shape[1],subplot_titles = list(ls))\n\nfor i in  range(1,ls.reshape(-1,2).shape[0]+1):\n    for j in range(1,ls.reshape(-1,2).shape[1]+1):\n        b = a.get_group(ls[counter])\n        fig.add_trace(go.Scatter(x=b['Date'], y=b['Confirmed'],mode='lines',name=ls[counter]), row=i, col=j)\n        counter = counter+1\nfig.update_layout(height=2000, width=800, title_text=\"Countries Cases>1000\",showlegend=False)\nfig.layout.template ='plotly_dark'\nfig.show()\n","99e54a4f":"latest_data = covid_clean[covid_clean[\"Date\"] == max(covid_clean[\"Date\"])].reset_index()\ncontinent_latest_data = latest_data.groupby('continent').sum().reset_index().sort_values(by = 'Confirmed',ascending =False)\nfig = go.Figure(data=[\n    go.Bar(name='Active', x=continent_latest_data[\"continent\"], y=continent_latest_data['Active'],marker_color = 'rgb(55, 83, 109)'),\n    go.Bar(name = 'Revovered',x=continent_latest_data[\"continent\"],y=continent_latest_data['Recovered'],marker_color = 'green' ),\n    go.Bar(name = 'Deaths',x=continent_latest_data[\"continent\"],y=continent_latest_data['Deaths'],marker_color = 'crimson' ),\n    \n])\nfig.update_layout(barmode='group',title_text ='continent')\nfig.layout.template ='plotly_dark'\nfig.show()","67875c75":"temp = covid_clean.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case')\nfig.update_layout(barmode='stack',title_text ='Confirmed Cases')\nfig.layout.template ='plotly_dark'\nfig.show()","46976666":"from datetime import datetime\nprincess = covid_ship[covid_ship['Province\/State'] == 'Grand Princess'].groupby('Date').sum().reset_index()\nprincess = princess[princess['Date']>'2020-03-03']","2224f924":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=princess['Date'], y=princess['Confirmed'],\n                    mode='lines+markers',\n                    name='Confirmed'))\nfig.add_trace(go.Scatter(x=princess['Date'], y=princess['Recovered'],\n                    mode='lines',\n                    name='Recovered'))\nfig.update_layout(barmode='stack',title_text ='Grand Princess Confirmed vs Recovered')\nfig.layout.template ='plotly_dark'\nfig.show()","ed5ec322":"temp = covid_clean.groupby('Date').sum().reset_index()\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Confirmed'],\n                    mode='lines',\n                    name='Confirmed'))\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Recovered'],\n                    mode='lines',\n                    name='Recovered'))\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Deaths'],\n                    mode='lines',\n                    name='Deaths'))\nfig.update_layout(barmode='stack',title_text ='Covid Patterns')\nfig.layout.template ='plotly_dark'\nfig.show()","76e7601f":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Active'],\n                    mode='lines',\n                    name='Active'))\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Recovered'],\n                    mode='lines',\n                    name='Recovered'))\nfig.update_layout(barmode='stack',title_text ='Covid Patterns')\nfig.layout.template ='plotly_dark'\nfig.show()","b134f012":"fig = px.line(covid_clean,x = \"Date\",y = \"Confirmed\")\nfig.update_layout(title_text ='Date vs Confirmed Cases')\nfig.layout.template ='plotly_dark'\nfig.show()","365caf46":"fig = px.line(covid_clean.groupby(['Date','Country\/Region']).agg({'Confirmed':\"sum\"}).reset_index(),x = \"Date\",y = \"Confirmed\",color = \"Country\/Region\")\nfig.update_layout(title_text = 'Country-Wise Covid Distribution')\nfig.layout.template ='plotly_dark'\nfig.show()","1209be85":"continent_data = covid_clean.groupby('continent').sum()\ncontinent_data[[\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"]].style.background_gradient(cmap='Reds')","1da8449e":"fig = px.line(covid_clean.groupby(['Date','continent']).agg({'Confirmed':\"sum\"}).reset_index(),x = \"Date\",y = \"Confirmed\",color = \"continent\")\nfig.update_layout(title_text = 'Total Continent-Wise Covid Distribution')\nfig.layout.template ='plotly_dark'\nfig.show()","126669c7":"continent_data['Mortality'] = 100*continent_data['Deaths']\/continent_data['Confirmed']\ncontinent_data[['Mortality']].style.background_gradient(cmap='Reds')","fc348d16":"continent_data['Recovery Rate'] = 100*continent_data['Recovered']\/continent_data['Confirmed']\ncontinent_data[['Recovery Rate']].style.background_gradient(cmap='Greens')","294ef70a":"temp = covid_clean.groupby('Date').sum().reset_index()\ntemp['Mortality'] = temp['Deaths']\/temp['Confirmed']\nfig = px.line(x = temp['Date'],y = temp['Mortality'],labels={'x':'Date','y':'Rate'})\nfig.update_layout(title_text = 'Cummulative Mortality Rate')\nfig.layout.template ='plotly_dark'\nfig.show()","269f2cf3":"temp = covid_clean.groupby('Date').sum().reset_index()\ntemp['nth day'] = (temp['Date']-min(temp['Date'])).apply(lambda x:str(x).split(' ')[0]).astype(int)\na = list(temp[temp['Date'] == min(temp['Date'])]['Confirmed']) \nfor i in range(1,temp.shape[0]):\n     a.append(temp['Confirmed'].iloc[i]-temp['Confirmed'].iloc[i-1])\ntemp['Day_confirmed'] = a\n\nb = list(temp[temp['Date'] == min(temp['Date'])]['Deaths']) \nfor i in range(1,temp.shape[0]):\n     b.append(temp['Deaths'].iloc[i]-temp['Deaths'].iloc[i-1])\ntemp['Day_deaths'] = b\n\nc = list(temp[temp['Date'] == min(temp['Date'])]['Recovered']) \nfor i in range(1,temp.shape[0]):\n     c.append(temp['Recovered'].iloc[i]-temp['Recovered'].iloc[i-1])\ntemp['Day_Recovered'] = c\ntemp['Day_Mortality'] = temp['Day_deaths']\/temp['Day_confirmed']\nfig = px.line(x = temp['nth day'],y = temp['Day_Mortality'],labels = {'x':'days','y':'rate'})\nfig.update_layout(title_text = 'Mortality Day Wise')\nfig.layout.template ='plotly_dark'\nfig.show()","88e48839":"fig = px.choropleth(latest_data.groupby('Country\/Region').sum().reset_index(), locations=\"Country\/Region\", \n                     color=\"Confirmed\",locationmode='country names',\n                    hover_name=\"Country\/Region\", range_color=[1,7000], \n                    title='Countries with Confirmed Cases',\n                   color_continuous_scale=px.colors.sequential.Plasma)\nfig.update(layout_coloraxis_showscale=True)\nfig.show()","7010acbc":"fig = px.choropleth(latest_data.groupby('Country\/Region').sum().reset_index(), locations=\"Country\/Region\", \n                    color=\"Deaths\",locationmode='country names',\n                    hover_name=\"Country\/Region\", range_color=[1,5], \n                    title='World Wide Covid Deaths',\n                   color_continuous_scale=px.colors.sequential.Plasma)\nfig.update(layout_coloraxis_showscale=True)\nfig.show()","bb98124a":"fig = px.choropleth(latest_data.groupby('Country\/Region').sum().reset_index(), locations=\"Country\/Region\", \n                    color=\"Recovered\",locationmode='country names', \n                    hover_name=\"Country\/Region\", range_color=[1,5], \n                    title='Recovered Cases World Wide ',\n                   color_continuous_scale=px.colors.sequential.Plasma)\nfig.update(layout_coloraxis_showscale=True)\nfig.show()","33f70a65":"country_latest = latest_data.groupby(\"Country\/Region\").sum().reset_index()\ncountry_latest[\"Mortality_Rate\"] = 100*country_latest[\"Deaths\"]\/country_latest[\"Confirmed\"]\nmortality = country_latest[country_latest[\"Mortality_Rate\"]>0].sort_values(by = 'Mortality_Rate',ascending= False)\ncountry_latest = country_latest.sort_values(by = 'Mortality_Rate',ascending = False)","720ccb17":"fig = px.bar(x = country_latest[\"Country\/Region\"],y = country_latest[\"Mortality_Rate\"],labels={'x':'Country','y':'Rate'})\nfig.update_layout(title_text = \"Courty wise Mortality Rate\")\nfig.layout.template ='plotly_dark'\nfig.show()","8722af49":"highest100 =  country_latest[country_latest[\"Confirmed\"] >100].sort_values(by = 'Mortality_Rate',ascending = False)","8ba07851":"fig = px.bar(x = highest100[\"Country\/Region\"],y = highest100[\"Mortality_Rate\"],labels={'x':'Country','y':'Rate'})\nfig.update_layout(title_text = \"Courty wise Mortality Rate when cases>100\")\nfig.layout.template ='plotly_dark'\nfig.show()","2d9284c5":"ebola_clean = pd.read_csv(\"..\/input\/ebola-outbreak-20142016-complete-dataset\/ebola_2014_2016_clean.csv\",parse_dates=['Date'])\nebola_clean = ebola_clean[['Date','Country','No. of confirmed cases','No. of confirmed deaths']]\nebola_clean.columns = ['Date','Country','Confirmed','Deaths']\nebola_clean.fillna(0,inplace = True)\nebola_clean['Confirmed'] = ebola_clean['Confirmed'].astype('int')\nebola_clean['Deaths'] = ebola_clean['Deaths'].astype('int')\nebola_clean['Country_code'] = ebola_clean[\"Country\"].apply(lambda x: do_fuzzy_search(x))\nebola_clean['Continent'] = ebola_clean[\"Country_code\"].apply(lambda x: do_continent_search(x))\nebola_clean['Country'] = ebola_clean[\"Country_code\"].apply(lambda x: country(x))\nebola_country = ebola_clean[ebola_clean['Date'] == max(ebola_clean['Date'])].groupby('Country').sum().reset_index()\nebola_time = ebola_clean.groupby('Date')['Confirmed', 'Deaths'].sum().reset_index()\n","fdfaa449":"\nebola_country[[\"Country\",\"Confirmed\",\"Deaths\"]].style.background_gradient(cmap='Reds')","ac926106":"sars_clean = pd.read_csv('\/kaggle\/input\/sars-outbreak-2003-complete-dataset\/sars_2003_complete_dataset_clean.csv')\nsars_clean.columns = ['Date','Country','Confirmed','Deaths','Recovered']\nsars_clean['Country_code'] = sars_clean[\"Country\"].apply(lambda country: do_fuzzy_search(country))\nsars_clean[\"Country_code\"] = sars_clean.apply(lambda row:\"HK\" if row['Country'] == 'Hong Kong SAR, China'   else row['Country_code'],axis = 1)\nsars_clean[\"Country_code\"] = sars_clean.apply(lambda row:\"TW\" if row['Country'] == 'Taiwan, China'   else row['Country_code'],axis = 1)\nsars_clean[\"Country_code\"] = sars_clean.apply(lambda row:\"IE\" if row['Country'] == 'Republic of Ireland'   else row['Country_code'],axis = 1)\nsars_clean[\"Country_code\"] = sars_clean.apply(lambda row:\"MO\" if row['Country'] == 'Macao SAR, China'   else row['Country_code'],axis = 1)\nsars_clean['Continent'] = sars_clean[\"Country_code\"].apply(lambda x: do_continent_search(x))\nsars_clean['Country'] = sars_clean[\"Country_code\"].apply(lambda x: country(x))\nsars_country = sars_clean[sars_clean['Date'] == max(sars_clean['Date'])].groupby('Country').sum().reset_index()\nsars_time = sars_clean.groupby('Date')['Confirmed', 'Deaths','Recovered'].sum().reset_index()\n\n\n","c8aea41d":"sars_country[['Country','Confirmed','Deaths']].sort_values(by='Confirmed',ascending = False).head(10).style.background_gradient(cmap = 'Reds')","5f29a7a4":"countries_confirmed_cases[['Country\/Region','Confirmed','Deaths']].sort_values(by='Confirmed',ascending = False).head(10).style.background_gradient(cmap = 'Reds')","49c46e61":"temp = covid_clean.groupby('Date').sum().reset_index()\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=sars_time.index, y=sars_time['Confirmed'],\n                    mode='lines',\n                    name='SARS'))\nfig.add_trace(go.Scatter(x=ebola_time.index, y=ebola_time['Confirmed'],\n                    mode='lines',\n                    name='Ebola'))\nfig.add_trace(go.Scatter(x=temp.index, y=temp['Confirmed'],\n                    mode='lines',\n                    name='Covid19'))\n\nfig.update_layout(barmode='stack',title_text ='epidemic Patterns(Day wise)')\nfig.layout.template ='plotly_dark'\nfig.show()","788dfe06":"fig = px.choropleth(sars_clean.groupby('Country').sum().reset_index(), locations=\"Country\", \n                   color=\"Confirmed\",locationmode='country names', \n                    hover_name=\"Country\", range_color=[1,7000], \n                    title='Sars Epidemic',\n                   color_continuous_scale=px.colors.sequential.Plasma)\nfig.update(layout_coloraxis_showscale=True)\nfig.show()\n","8a58a06a":"fig = px.choropleth(ebola_clean.groupby('Country').sum().reset_index(), locations=\"Country\", \n                  color=\"Confirmed\",locationmode='country names', \n                    hover_name=\"Country\", range_color=[1,7000], \n                    title='Ebola Epidemic',\n                   color_continuous_scale=px.colors.sequential.Plasma)\nfig.update(layout_coloraxis_showscale=True)\nfig.show()","2e3a24be":"fig = px.choropleth(latest_data.groupby('Country\/Region').sum().reset_index(), locations=\"Country\/Region\", \n                    color=\"Confirmed\",locationmode='country names', \n                    hover_name=\"Country\/Region\", range_color=[1,7000], \n                    title='Countries with Confirmed Cases',\n                   color_continuous_scale=px.colors.sequential.Plasma)\nfig.update(layout_coloraxis_showscale=True)\nfig.show()","fd50a81a":"from Bio import SeqIO\n\nfor seq_record in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/EBOLAV.fasta\", \"fasta\"):\n    EBOLAV = str(seq_record.seq)\nfor seq_record in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/MERS sequence.fasta\", \"fasta\"):\n    MERSV = str(seq_record.seq)\nfor seq_record in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/SARS-COV2.fasta\", \"fasta\"):\n    COV2 = str(seq_record.seq)\nfor seq_record in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/Civet-SARS.fasta\", \"fasta\"):\n    Civet_SARS = str(seq_record.seq)\nfor seq_record in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/SARSr-COV.fasta\", \"fasta\"):\n    SARS_Cov = str(seq_record.seq)\nfor seq_record in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/BAT-SARS.fasta\", \"fasta\"):\n    Bat_SARS = str(seq_record.seq)","97f9b137":"\nbio_details = pd.read_csv(\"..\/input\/corona-details\/corona.csv\")\nbio_details = bio_details[['Accession','Protein','Geo_Location','Isolation_Source']]","d6009424":"weights_comparison = pd.DataFrame({'Virus':['SARS-CoV-2(COVID19)','EBOLAV','MERS-CoV','SARS-COV1(SARS)','BAT-SARS','CIVET-SARS'],\n              'GC%':[GC(COV2),GC(EBOLAV),GC(MERSV),GC(SARS_Cov),GC(Bat_SARS),GC(Civet_SARS)],\n              'molecular-Weight':[molecular_weight(COV2),molecular_weight(EBOLAV),molecular_weight(MERSV),molecular_weight(SARS_Cov),molecular_weight(Bat_SARS),molecular_weight(Civet_SARS)]})","fddab08f":"sizes = [len(r) for r in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/SARS-COV2.fasta\", \"fasta\")]\nfig = px.histogram(x = sizes,nbins=20,labels={'x':\"Sequence length (bp)\",'y':\"Count\"})\nfig.update_layout(title_text=(\"COVID-19(SARS-COV-2): %i sequences\\nLengths %i to %i\" \\\n% (len(sizes),min(sizes),max(sizes))))\nfig.layout.template ='plotly_dark'\nfig.show()","941571cc":"sizes = [len(r) for r in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/SARSr-COV.fasta\", \"fasta\")]\nfig = px.histogram(x = sizes,nbins=20,labels={'x':\"Sequence length (bp)\",'y':\"Count\"})\nfig.update_layout(title_text=(\"SARS(SARSr-COV1): %i sequences\\nLengths %i to %i\" \\\n% (len(sizes),min(sizes),max(sizes))))\nfig.layout.template ='plotly_dark'\n\nfig.show()","c7120f45":"sizes = [len(r) for r in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/BAT-SARS.fasta\", \"fasta\")]\nfig = px.histogram(x = sizes,nbins=20,labels={'x':\"Sequence length (bp)\",'y':\"Count\"})\nfig.update_layout(title_text=(\"Bat-SARS: %i sequences\\nLengths %i to %i\" \\\n% (len(sizes),min(sizes),max(sizes))))\nfig.layout.template ='plotly_dark'\n\nfig.show()","8739e5c5":"sizes = [len(r) for r in SeqIO.parse(\"\/kaggle\/input\/ebolav-vs-sarscov-vs-mers\/MERS sequence.fasta\", \"fasta\")]\n\nfig = px.histogram(x = sizes,nbins=20,labels={'x':\"Sequence length (bp)\",'y':\"Count\"})\nfig.update_layout(title_text=(\"MERS: %i sequences\\nLengths %i to %i\" \\\n% (len(sizes),min(sizes),max(sizes))))\nfig.layout.template ='plotly_dark'\n\nfig.show()","6ebba028":"color =['crimson','lightslategray','lightslategray','lightslategray','lightslategray','lightslategray']\nfig = go.Figure(data=[go.Bar(x = weights_comparison[\"Virus\"],  y =weights_comparison['GC%'],marker_color = color)])\nfig.update_layout(title_text ='Guanine Cytosine Percentage')\nfig.layout.template ='plotly_dark'\n\nfig.show()\n","b3c3d1ea":"color =['crimson','lightslategray','lightslategray','lightslategray','lightslategray','lightslategray']\nfig = go.Figure(data=[go.Bar(x = weights_comparison[\"Virus\"],  y =weights_comparison['molecular-Weight'],marker_color = color)])\nfig.update_layout(title_text ='molecular-Mass')\nfig.layout.template ='plotly_dark'\n\nfig.show()","a0cf5202":"fig = px.scatter(x =weights_comparison['GC%'], y =weights_comparison['molecular-Weight'],color = weights_comparison[\"Virus\"])\nfig.update_layout(title_text = 'Virus Scatter Plot',xaxis_title=\"guanine-Cytosine%\",yaxis_title = \"Molecular Mass\"\n)\nfig.layout.template ='plotly_dark'\nfig.show()","a7ebde7f":"from Levenshtein import distance as levenshtein_distance,seqratio\nsimilarity = pd.DataFrame({\"Virus\":[\"SARS-CoV(SARS)\",\"MERS\",\"EBOLA\",\"Civet-SARS\",\"Bat-SARS\"],\"Percentage\":[seqratio(COV2,SARS_Cov),seqratio(COV2,MERSV),seqratio(COV2,EBOLAV),seqratio(COV2,Civet_SARS),seqratio(COV2,Bat_SARS)]})\nsimilarity[\"Percentage\"] = similarity[\"Percentage\"]*100","50a3e9af":"similarity.style.background_gradient(cmap='Reds')\n","92773c8c":"color =['crimson','lightslategray','lightslategray','crimson','crimson','crimson']\nfig = go.Figure(data=[go.Bar(x = similarity[\"Virus\"],  y =similarity['Percentage'],marker_color = color)])\nfig.update_layout(title_text ='Percentage Similarity(Genome)')\nfig.layout.template ='plotly_dark'\nfig.show()","006abeeb":"isolation_source = pd.DataFrame(bio_details['Isolation_Source'].value_counts()).reset_index()\nisolation_source.columns = ['Isolation_Source','Values']\nisolation_source.style.background_gradient(cmap='Greens')","11a4b81b":"fig = px.pie(isolation_source, values='Values', names='Isolation_Source', title='Isolation_Sources')\nfig.show()","bbc5f3da":"China_data = covid_clean[covid_clean[\"country_code\"] == 'CN'].groupby('Date').sum().reset_index()\nmin(China_data['Date'])","30f185e9":"model_df =pd.DataFrame()\nmodel_df['S'] = 1437731640 - China_data['Confirmed']\nmodel_df['I'] = China_data['Confirmed']\nmodel_df['R'] = China_data['Recovered']\nmodel_df['T'] = (China_data['Date']-min(China_data['Date'])).apply(lambda x:str(x).split(' ')[0]).astype(int)\nfor v in model_df.columns:\n    model_df[f\"d{v}\/dT\"] = model_df[v].diff() \/ model_df[\"T\"].diff()","2e99f70b":"plt.figure(figsize = (16,16))\nsns.heatmap(model_df.head().corr(),annot = True,linewidths=0.1,cmap = 'icefire')\nplt.plot()","f23e9daa":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=model_df['dS\/dT'], x=model_df['T'],\n                    mode='lines',\n                    name='dS\/dT'))\nfig.add_trace(go.Scatter(y=model_df['dI\/dT'], x=model_df['T'],\n                    mode='lines',\n                    name='dI\/dT'))\nfig.add_trace(go.Scatter(y=model_df['dR\/dT'], x=model_df['T'],\n                    mode='lines',\n                    name='dR\/dT'))\n\nfig.update_layout(barmode='stack',title_text ='Differential Rates of Change ')\nfig.layout.template ='plotly_dark'\n\nfig.show()","3f005340":"#covid_clean.groupby(['Date','Country\/Region']).sum()\nchina_model = covid_clean[covid_clean['country_code'] == 'CN'].groupby('Date').sum().reset_index()\nchina_model['nth Day'] = (china_model['Date'] - min(china_model['Date'])).apply(lambda x:str(x).split(' ')[0]).astype(int)\nfig = px.line(x = china_model['Date'],y = china_model['Deaths'])\nfig.update_layout(title_text ='China:Confirmed Cases Cummulative')\nfig.layout.template ='plotly_dark'\n\nfig.show()","8f33a39d":"a = list(china_model[china_model['Date'] == min(china_model['Date'])]['Confirmed']) \nfor i in range(1,china_model.shape[0]):\n     a.append(china_model['Confirmed'].iloc[i]-china_model['Confirmed'].iloc[i-1])\nchina_model['Day_confirmed'] = a\n\nb = list(china_model[china_model['Date'] == min(china_model['Date'])]['Deaths']) \nfor i in range(1,china_model.shape[0]):\n     b.append(china_model['Deaths'].iloc[i]-china_model['Deaths'].iloc[i-1])\nchina_model['Day_deaths'] = b\n\nc = list(china_model[china_model['Date'] == min(china_model['Date'])]['Recovered']) \nfor i in range(1,china_model.shape[0]):\n     c.append(china_model['Recovered'].iloc[i]-china_model['Recovered'].iloc[i-1])\nchina_model['Day_Recovered'] = c","50092f07":"\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=china_model['nth Day'], y=china_model['Day_confirmed'],\n                    mode='lines',\n                    name='Day confirmed'))\nfig.add_trace(go.Scatter(x=china_model['nth Day'], y=china_model['Day_deaths'],\n                    mode='lines',\n                    name='Day deaths'))\nfig.add_trace(go.Scatter(x=china_model['nth Day'], y=china_model['Day_Recovered'],\n                    mode='lines',\n                    name='Day Recovered'))\n\nfig.update_layout(barmode='stack',title_text ='China cases:day wise')\n\nfig.layout.template ='plotly_dark'\n\nfig.show()\n","8be04c14":"Oronasopharynx and Lungs seem to be the best Isolation Sources to test for Covid-19.","73cfefa4":"We are considering Chinese Population for 2020-01-22 as 1437731640 [source](http:\/\/https:\/\/www.worldometers.info\/world-population\/china-population\/)","393bfbb5":"**SIR model with vital dynamics: **\n\nHowever in a population with vital dynamics, new births can provide more susceptible individuals to the population, sustaining an epidemic or allowing new introductions to spread throughout the population. In a realistic population like this, disease dynamics will reach a steady state. This is the case when diseases are endemic to a region.\n\n\nLet,\n![](https:\/\/tinyurl.com\/u64yapz) and ![](https:\/\/tinyurl.com\/w9dz2mu) \nrepresent the birth and death rates, respectively, for the model. To maintain a constant population, assume that   \n![](https:\/\/tinyurl.com\/shsb7le)\n\nIn steady state\n![](https:\/\/tinyurl.com\/wtosk3m) \nThe ODE then becomes:\n\n![](http:\/\/https:\/\/tinyurl.com\/w79y4y8)","4167bbb0":"There is perfectly negative correlation between I and S.\nThere is high correlation between I and R which means as cases of Infection increase,the Recovered infection increase.\ndS\/dT(rate of change of Susceptible Cases) is negative correlated with dI\/dT which means as rate of susceptible cases decreases,rate of infected cases will increase.","6b34ddc6":"**Visualizations**","da09186a":"[](http:\/\/)You can check out a great Kernel on SIR modeling already done [here](https:\/\/www.kaggle.com\/lisphilar\/covid-19-data-with-sir-model\/)","4db4846f":"Loading SARS-COV-2 genome sequence along with EBOLAV,SARS-COV,Bat-SARS,Civet-SARS","353269f3":"SARS-COV-2(Corona Virus) is easily identifiable from EBOLA virus and other SARS and MERS virus because of low GC% and  High Molecular Weight. SARS-COV-1(SARS epidemic 2002) and MERS are much more alike to SARS affecting Bats and Civets atleast in this matter.This would suggest a intermediate host between these animals and Humans.\n\nAccording to WHO [report](https:\/\/www.who.int\/docs\/default-source\/coronaviruse\/situation-reports\/20200221-sitrep-32-covid-19.pdf?sfvrsn=4802d089_2):\n>  ...it is believed that the virus jumped the species barrier to humans from another intermediate animal host. This\nintermediate animal host could be a domestic food animal, a wild animal, or a domesticated wild animal which has\nnot yet been identified..","821717c2":"**Introduction to epidemic modelling**","b8a4c26d":"**Genome Camparision of SARS-COV-1,COVID-19,MERS,BAT-SARS,Civet SARS and EBOLA**","c4ab56f9":"![](https:\/\/tinyurl.com\/w79y4y8)","d8abb1b7":"**SIRS MODEL with Vital Dynamics:**\nThe SIR model assumes people carry lifelong immunity to a disease upon recovery; this is the case for a variety of diseases. For another class of airborne diseases, for example seasonal influenza, an individual\u2019s immunity may wane over time. In this case, the SIRS model is used to allow recovered individuals to return to a susceptible state.\n\n![](https:\/\/tinyurl.com\/wlpxlqy)\n\nwhere, ![](https:\/\/institutefordiseasemodeling.github.io\/Documentation\/malaria\/_images\/math\/e0355a363dcd9bc715a43db6e1d37c3f42982fd3.png) is total population\n\n\nSources: [Institute for disease modelling.](https:\/\/institutefordiseasemodeling.github.io\/Documentation\/malaria\/model-sir.html#id9)\n\nFuthermore, there are other models like SEIR,SEIT,SEIRS,etc which do not describe SARS-COV-2 epidemic properly as they assume a exposed parameter along with Infected. According to WHO, COVID may be transmitted even without symptoms which rules out any practical distinction between exposure and Infection. \n\nAlso,applying Time-series forecasting models like Prophet,etc would be pretty useless because they assume growth of epidemic with time to be constant and\/or Linear. \n\nConsidering the high rate of growth of Covid epidemic,it is preferable to use a SIRS model without Vital Dynamics as at a current rate of growth birth rate and death rate of a population do not play a great role.\nAccording to Wikipedia:\n> **The dynamics of an epidemic, for example the flu, are often much faster than the dynamics of birth and death, therefore, birth and death are often omitted in simple compartmental models. **\n\n\n","673f1f36":"**China Covid Analysis**","aaa200d2":"\nCoronavirus disease 2019 (COVID-19) is an infectious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2),virus closely related to the SARS virus.\n\nThe virus first emerged in Wuhan, Hubei, China and is the cause of the 2019\u201320 coronavirus pandemic.\n\nWhile the majority of cases result in mild symptoms,some progress to pneumonia and multi-organ failure.\n\nThe infection is spread from one person to others via respiratory droplets produced from the airways, often during coughing. Hand washing, maintaining distance from other people, and not touching one's face with unwashed hands are measures recommended to prevent the disease.It is also recommended to cover one's nose and mouth with a tissue or a bent elbow when coughing.\n\nMasks are recommended for those who suspect they have the virus and for those who are taking care of someone with a suspected infection, but they are not recommended for the general public.\n\nThere is no vaccine or specific antiviral treatment.Management involves treatment of symptoms, supportive care, and experimental measures.\n\nSource: https:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019\n\nIn this Notebook,we shall try to use various visualization Techniques to find out inferences about the pandemic.\n\n","9e97830b":"WE Can see SARS-COV2(Corona Virus) has very high similarity in its Genome Sequence with SARS virus infecting Bats and Civets and SARSr-COV1(SARS infection virus).It is Least similar to EBOLA.\n\nNote:We have taken Levenshtein distance as our metric for comparison.","9cd857d8":"**Loading appropriate Packages and Data Preprocessing.**","65276866":"**Clean dataset with ISO2 country names and continent names**","50fbb4aa":"**Please,visit this [link](https:\/\/www.iban.com\/country-codes) to identify countries through ISO2 and ISO3 country naming convention which has been used in this notebook to avoid any confusion. **","f8be8ce3":"SIR Model:\n    SIR stands for Susceptible Infectious Recovered\n![SIR model](https:\/\/tinyurl.com\/ro7bfse)  \n\n> The SIR model is one of the simplest compartmental models, and many models are derivations of this basic form. The model consists of three compartments: S for the number of susceptible, I for the number of infectious, and R for the number recovered (or immune) individuals\n\n[More reading material](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology) \n\n**SIR model without vital dynamics**\nIf the course of the infection is short (emergent outbreak) compared with the lifetime of an individual and the disease is non-fatal, vital dynamics (birth and death) can be ignored.Equations for such a model can be written as:\n\n![](https:\/\/tinyurl.com\/qp9rmmr)\n\nwhere ![](https:\/\/institutefordiseasemodeling.github.io\/Documentation\/malaria\/_images\/math\/e0355a363dcd9bc715a43db6e1d37c3f42982fd3.png) is Total population.\n","7f6ed817":"**Model of our choice:**\n\n**SIRS Model without Vital Dynamics** :\n\nWhy SIRS not SIR?:\n[Cases](https:\/\/globalnews.ca\/news\/6623287\/coronavirus-multiple-infections\/) of reinfection of COVID-19 have come to news highlighting that survivors may or may not develop immunity.\n\nModel Equations:\n\n![](https:\/\/tinyurl.com\/vj8jmj8) \n\n"}}