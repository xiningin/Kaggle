{"cell_type":{"4b965202":"code","73ea5f1c":"code","1b0bd45e":"code","3bd248d5":"code","82e01d06":"code","98e4fb31":"code","f7d51b6e":"code","0d4e5406":"code","a31b79f1":"markdown","4bb25283":"markdown","f708b5d8":"markdown","ffc17b30":"markdown"},"source":{"4b965202":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\n\n#import xgboost as xgb\nfrom scipy.sparse import vstack, csr_matrix, save_npz, load_npz\nfrom sklearn.model_selection import StratifiedKFold, KFold\n\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.utils import check_array\nfrom scipy import sparse\n\n# Scalers\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import shuffle\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\nimport gc\ngc.enable()","73ea5f1c":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }","1b0bd45e":"#Reduce the memory usage - Inspired by Panchajanya Banerjee\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","3bd248d5":"print('Download Train and Test Data.\\n')\ntrain = reduce_mem_usage(pd.read_csv('..\/input\/train.csv', dtype=dtypes, low_memory=True))\ntrain['MachineIdentifier'] = train.index.astype('uint32')\ntest  = reduce_mem_usage(pd.read_csv('..\/input\/test.csv',  dtype=dtypes, low_memory=True))\ntest['MachineIdentifier']  = test.index.astype('uint32')\n\ngc.collect()","82e01d06":"print('Transform all features to category.\\n')\nfor usecol in train.columns.tolist()[1:-1]:\n\n    train[usecol] = train[usecol].astype('str')\n    test[usecol] = test[usecol].astype('str')\n    \n    #Fit LabelEncoder\n    le = LabelEncoder().fit(\n            np.unique(train[usecol].unique().tolist()+\n                      test[usecol].unique().tolist()))\n\n    #At the end 0 will be used for dropped values\n    train[usecol] = le.transform(train[usecol])+1\n    test[usecol]  = le.transform(test[usecol])+1\n\n    agg_tr = (train\n              .groupby([usecol])\n              .aggregate({'MachineIdentifier':'count'})\n              .reset_index()\n              .rename({'MachineIdentifier':'Train'}, axis=1))\n    agg_te = (test\n              .groupby([usecol])\n              .aggregate({'MachineIdentifier':'count'})\n              .reset_index()\n              .rename({'MachineIdentifier':'Test'}, axis=1))\n\n    agg = pd.merge(agg_tr, agg_te, on=usecol, how='outer').replace(np.nan, 0)\n    #Select values with more than 1000 observations\n    agg = agg[(agg['Train'] > 1000)].reset_index(drop=True)\n    agg['Total'] = agg['Train'] + agg['Test']\n    #Drop unbalanced values\n    agg = agg[(agg['Train'] \/ agg['Total'] > 0.2) & (agg['Train'] \/ agg['Total'] < 0.8)]\n    agg[usecol+'Copy'] = agg[usecol]\n\n    train[usecol] = (pd.merge(train[[usecol]], \n                              agg[[usecol, usecol+'Copy']], \n                              on=usecol, how='left')[usecol+'Copy']\n                     .replace(np.nan, 0).astype('int').astype('category'))\n\n    test[usecol]  = (pd.merge(test[[usecol]], \n                              agg[[usecol, usecol+'Copy']], \n                              on=usecol, how='left')[usecol+'Copy']\n                     .replace(np.nan, 0).astype('int').astype('category'))\n\n    del le, agg_tr, agg_te, agg, usecol\n    gc.collect()\n          \ny_train = np.array(train['HasDetections'])\ntrain_ids = train.index\ntest_ids  = test.index\n\ndel train['HasDetections'], train['MachineIdentifier'], test['MachineIdentifier']\ngc.collect()","98e4fb31":"#Fit OneHotEncoder\nohe = OneHotEncoder(categories='auto', sparse=True, dtype='uint8').fit(train)\n\n#Transform data using small groups to reduce memory usage\nm = 100000\ntrain = vstack([ohe.transform(train[i*m:(i+1)*m]) for i in range(train.shape[0] \/\/ m + 1)])\ntest  = vstack([ohe.transform(test[i*m:(i+1)*m])  for i in range(test.shape[0] \/\/ m +  1)])\n\nsave_npz('train.npz', train, compressed=True)\nsave_npz('test.npz',  test,  compressed=True)\n\ndel ohe, train, test\ngc.collect()","f7d51b6e":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nskf.get_n_splits(train_ids, y_train)\nlgb_test_result_1  = np.zeros(test_ids.shape[0])\noof_1= np.zeros(train_ids.shape[0])\n\ncounter = 0\n\nprint('\\nLightGBM\\n')\n\nfor train_index, test_index in skf.split(train_ids, y_train):\n    \n    print('Fold {}\\n'.format(counter + 1))\n    \n    train = load_npz('train.npz')\n    X_fit = vstack([train[train_index[i*m:(i+1)*m]] for i in range(train_index.shape[0] \/\/ m + 1)])\n    X_val = vstack([train[test_index[i*m:(i+1)*m]]  for i in range(test_index.shape[0] \/\/  m + 1)])\n    X_fit, X_val = csr_matrix(X_fit, dtype='float32'), csr_matrix(X_val, dtype='float32')\n    y_fit, y_val = y_train[train_index], y_train[test_index]\n    \n    \n    del train\n    gc.collect()\n\n    lgb_model = lgb.LGBMClassifier(max_depth=-1,\n                                   n_estimators=30000,\n                                   learning_rate=0.05,\n                                   num_leaves=2**12-1,\n                                   colsample_bytree=0.28,\n                                   objective='binary', \n                                   n_jobs=-1)\n                               \n    lgb_model.fit(X_fit, y_fit, eval_metric='auc', \n                  eval_set=[(X_val, y_val)], \n                  verbose=100, early_stopping_rounds=100)\n                  \n    oof_1[test_index] += lgb_model.predict_proba(X_val)[:,1]\n    \n    del X_fit, X_val, y_fit, y_val, train_index, test_index\n    gc.collect()\n    \n    test = load_npz('test.npz')\n    test = csr_matrix(test, dtype='float32')\n    lgb_test_result_1 += lgb_model.predict_proba(test)[:,1]\n    counter += 1\n    \n    del test\n    gc.collect()","0d4e5406":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['HasDetections'] = (lgb_test_result_1 \/ counter)\nsubmission.to_csv('lgb_submission.csv', index=False)","a31b79f1":"Feature Engineering","4bb25283":"Now Build the Stratified K Fold Model and generate predictions","f708b5d8":"Inspired by \n\n* Theo Viel's kernel (https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data)\n* Vladislav Bogorod's Kernel https:\/\/www.kaggle.com\/bogorodvo\/lightgbm-baseline-model-using-sparse-matrix\n\nI am using Light GBM Classifier on a Stratified K Fold Technique.","ffc17b30":"Now Build the K Fold Model and generate predictions"}}