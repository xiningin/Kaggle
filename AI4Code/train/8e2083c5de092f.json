{"cell_type":{"274ab0d9":"code","54ee1f9b":"code","4149c6de":"code","58e1dc86":"code","d0db3c96":"code","31c97a07":"code","6babc0e1":"code","81dbd1e5":"code","faa277e9":"code","762d42b3":"code","7cade1dc":"code","22381b7a":"code","4e45daf2":"code","97eb1b14":"code","3ae8bdc4":"code","5409abfb":"code","1780f646":"code","dd03cd9d":"code","8ea28b35":"code","0605aeb9":"code","ac789f90":"code","0d7468ed":"code","b39976d7":"code","6ec4e6ee":"code","d5ff99a5":"code","91f81f44":"code","08e9b514":"code","3454b633":"markdown","a8b9ceab":"markdown","65c9e460":"markdown","47b5956e":"markdown","b51db44a":"markdown","dfd9d907":"markdown","85681e8c":"markdown","7e64e7a0":"markdown","fbd263c4":"markdown","fb685cab":"markdown"},"source":{"274ab0d9":"import pandas as pd \nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt \nimport tensorflow as tf ","54ee1f9b":"df = pd.read_csv('..\/input\/heart-disease-health-indicators-dataset\/heart_disease_health_indicators_BRFSS2015.csv')\ndf.head()","4149c6de":"df.info()","58e1dc86":"sns.countplot(data =df , x ='HeartDiseaseorAttack')","d0db3c96":"df.isnull().sum()","31c97a07":"df.describe()","6babc0e1":"sns.scatterplot(data = df , x ='Education' , y ='BMI',hue = 'HeartDiseaseorAttack')","81dbd1e5":"X = df.drop('HeartDiseaseorAttack',axis =1)\ny = df['HeartDiseaseorAttack']","faa277e9":"from imblearn.under_sampling import RandomUnderSampler\nundersample = RandomUnderSampler(sampling_strategy=0.5)\nX_under, y_under = undersample.fit_resample(X, y)","762d42b3":"X_under.shape , y_under.shape","7cade1dc":"from sklearn.model_selection import train_test_split","22381b7a":"X_train, X_test, y_train, y_test = train_test_split(X_under, y_under, test_size=0.20, random_state=101)","4e45daf2":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","97eb1b14":"# set seed to avoid changing results : \n\ntf.random.set_seed(42)\n\n# Create a deep learning model consist of : = > * 3 hidden layers * 4 Hidden units * Set activation of \"relu\" ,\"Sigmoid\"\n# set optimizer \"Adam with it's defult learning rate 0.001 \"\n\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Dense(4,activation = 'relu'),\n  tf.keras.layers.Dense(4,activation = 'relu'),\n  tf.keras.layers.Dense(1,activation = 'sigmoid')                            \n])\n\n# model compile : \n\nmodel.compile(loss = 'binary_crossentropy',\n                optimizer = tf.keras.optimizers.Adam(lr=0.001),\n                metrics = ['accuracy'])\n\n# Fit the model on data : \n\nhistory = model.fit(X_train,y_train,epochs = 100)","3ae8bdc4":"pd.DataFrame(history.history).plot()\nplt.ylabel(\"loss\")\nplt.xlabel(\"accuracy\")","5409abfb":"model.evaluate(X_test,y_test)","1780f646":"# set seed to avoid changing results : \n\ntf.random.set_seed(42)\n\n# Create a deep learning model consist of : = > * 3 hidden layers * 4 Hidden units * Set activation of \"relu\" ,\"Sigmoid\"\n# set optimizer \"Adam with it's defult learning rate 0.001 \"\n\nmodel_2 = tf.keras.Sequential([\n  tf.keras.layers.Dense(6,activation = 'relu'),\n  tf.keras.layers.Dense(6,activation = 'relu'),\n  tf.keras.layers.Dense(6,activation = 'relu'),\n  tf.keras.layers.Dense(1,activation = 'sigmoid')                            \n])\n\n# model compile : \n\nmodel_2.compile(loss = 'binary_crossentropy',\n                optimizer = tf.keras.optimizers.Adam(lr=0.001),\n                metrics = ['accuracy'])\n\n# Fit the model on data : \n\nhistory_2 = model_2.fit(X_train,y_train,epochs = 100)","dd03cd9d":"model_2.evaluate(X_test,y_test)","8ea28b35":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Now we need to know the best K value \"Lowest error rate for created loop\"\n\ntest_error_rate = []\n\nfor k in range(1,30):\n    knn_model = KNeighborsClassifier(n_neighbors = k )\n    knn_model.fit(X_train , y_train)\n    y_pred = knn_model.predict(X_test)\n    error = 1 - accuracy_score(y_test , y_pred)\n    \n    test_error_rate.append(error)","0605aeb9":"# Lowest error rate is 18 , so this is the k value :\nplt.figure(figsize=(8,4),dpi = 150)\nplt.plot(range(1,30),test_error_rate)","ac789f90":"knn_model = KNeighborsClassifier(n_neighbors=27)\nknn_model.fit(X_train , y_train)","0d7468ed":"y_pred = knn_model.predict(X_test)","b39976d7":"# Now we are going to define function contain all needed metrixes , that will need it to know the model accuracy \n\nfrom sklearn.metrics import accuracy_score , plot_confusion_matrix , plot_roc_curve , plot_precision_recall_curve , classification_report\n\ndef metrics(model):\n    y_pred = model.predict(X_test)\n    print(classification_report(y_test,y_pred))\n    plot_confusion_matrix(model , X_test , y_test)\n    plot_roc_curve(model , X_test , y_test)\n    plot_precision_recall_curve(model , X_test , y_test)\n","6ec4e6ee":"metrics(knn_model)","d5ff99a5":"# Create logisticRegression model and fit it on scaled X train \nfrom sklearn.linear_model import LogisticRegression\nlg_model = LogisticRegression()\nlg_model.fit(X_train,y_train)\ny_pred = lg_model.predict(X_test)\nmetrics(lg_model)","91f81f44":"'''from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {'C':[0.001,0.01,1]}\nsvc = SVC()\ngrid_model = GridSearchCV(svc,param_grid)\ngrid_mtree_model.fit(X_train , y_train)\ny_pred = grid_model.predict(X_test)\nmetrics(grid_model)'''","08e9b514":"from sklearn.tree import DecisionTreeClassifier\ntree_model = DecisionTreeClassifier()\ntree_model.fit(X_train , y_train)\ny_pred = tree_model.predict(X_test)\nmetrics(tree_model)","3454b633":"# Train test split : ","a8b9ceab":"# Now we are going to use Neural Network for Binary classfication","65c9e460":"# Second_model","47b5956e":"# Scaling data : ","b51db44a":"# Loss VS Accuracy :\n- As we see we have to develop the model to get high accuracy .\n- And lets get model_evaluation based on test data . ","dfd9d907":"# Metrics to evaluate the model : ","85681e8c":"# As we see on the below chart there is imbalance data issue ; so we have to solve it : ","7e64e7a0":"# Now we are going to solve of imbalance : ","fbd263c4":"# Logistic Regression ","fb685cab":"# KNN ALGORITHM : "}}