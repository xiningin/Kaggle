{"cell_type":{"2126e9e4":"code","b910397a":"code","d0bf653a":"code","a2f078ab":"code","c7d9d30e":"code","f82aeb6e":"code","4b75dfc1":"code","33722768":"code","c38ba56f":"code","8ad345ba":"code","cb1d7194":"code","5199dc24":"code","4fab70e1":"code","2d9448c9":"code","7c7db88a":"code","6ac6db2f":"code","95e51d74":"code","de19f2df":"code","33a930bb":"code","518791b4":"code","51e7b1a9":"code","ca177c35":"markdown","962d8638":"markdown","613b89f8":"markdown"},"source":{"2126e9e4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nfrom sklearn.metrics import accuracy_score\nfrom kaggle.competitions import twosigmanews\n\n# Interactive graphs\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls","b910397a":"env = twosigmanews.make_env()\n(market_train, news_train) = env.get_training_data()","d0bf653a":"#market_train.loc[market_train['assetCode'] == 'AAPL.O', ['assetCode']]\ndata = []\ndf = market_train[(market_train['assetCode'] == 'AAPL.O')]\n\ndata.append(go.Scatter(\n    x = df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n    y = df['close'].values,\n    name = 'APPL.O'\n))\n\nlayout = go.Layout(dict(title = \"Closing prices of Apple\",\n                       xaxis = dict(title = 'Year'),\n                       yaxis = dict(title = 'Price (USD)'),\n                       ), legend = dict(\n                        orientation='h'))\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","a2f078ab":"data = []\ndf = df.loc[pd.to_datetime(df['time']) >= pd.to_datetime('2014-06-09').tz_localize('UTC')]\n\ndata.append(go.Scatter(\n    x = df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n    y = df['close'].values,\n    name = 'APPL.O'\n))\n\nlayout = go.Layout(dict(title = \"Closing prices of Apple\",\n                       xaxis = dict(title = 'Year'),\n                       yaxis = dict(title = 'Price (USD)'),\n                       ), legend = dict(\n                        orientation='h'))\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","c7d9d30e":"news_df = news_train[(news_train['assetName'] == 'Apple Inc')]\nnews_df = news_df.loc[pd.to_datetime(news_df['time']) >= pd.to_datetime('2014-06-09').tz_localize('UTC')]\n\n# time = pd.to_datetime('2014-06-09').tz_localize('UTC')\n# time += pd.Timedelta(days=1)\n# time\n    \nstart_day = pd.to_datetime('2014-06-09').tz_localize('UTC')\nday_after = pd.to_datetime('2014-06-10').tz_localize('UTC')\nsent_count = 0\nsent_neg_total = 0\nsent_neut_total = 0\nsent_pos_total = 0\nsent_neg = []\nsent_neut = []\nsent_pos = []\ndates = []\n\n# Function that calculates the average sentiment for each day\nfor index, row in news_df.iterrows():\n    if pd.to_datetime(row['time']) > start_day and pd.to_datetime(row['time']) < day_after:\n        sent_count += 1\n        sent_neg_total += row['sentimentNegative']\n        sent_neut_total += row['sentimentNeutral']\n        sent_pos_total += row['sentimentPositive']\n    else:\n        if sent_count == 0:\n            sent_count = 1\n        sent_neg.append(sent_neg_total\/sent_count)\n        sent_neut.append(sent_neut_total\/sent_count)\n        sent_pos.append(sent_pos_total\/sent_count)\n        sent_count = 0\n        sent_neg_total = 0\n        sent_neut_total = 0\n        sent_pos_total = 0\n        dates.append(start_day)\n        start_day += pd.Timedelta(days=1)\n        day_after += pd.Timedelta(days=1)\n\n# Plot average sentiment values for each day\nneg_sent = go.Scatter(\n    x = dates,\n    y = sent_neg,\n    mode = 'markers',\n    name = 'Negative Sentiment' \n)\n\nneut_sent = go.Scatter(\n    x = dates,\n    y = sent_neut,\n    mode = 'markers',\n    name = 'Neutral Sentiment' \n)\n\npos_sent = go.Scatter(\n    x = dates,\n    y = sent_pos,\n    mode = 'markers',\n    name = 'Positive Sentiment' \n)\n\ndata = [neg_sent, neut_sent, pos_sent]\n\nlayout = go.Layout(dict(title = \"Sentiment of Apple\",\n                       xaxis = dict(title = 'Year'),\n                       yaxis = dict(title = 'Sentiment Value'),\n                       ), legend = dict(\n                        orientation='h'))\npy.iplot(dict(data=data, layout=layout), filename='line-mode')\n\n\n######################################################################################\n# neg_sent = go.Scatter(\n#     x = news_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n#     y = news_df['sentimentNegative'].values,\n#     mode = 'markers',\n#     name = 'Negative Sentiment' \n# )\n\n# neut_sent = go.Scatter(\n#     x = news_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n#     y = news_df['sentimentNeutral'].values,\n#     mode = 'markers',\n#     name = 'Neutral Sentiment' \n# )\n\n# pos_sent = go.Scatter(\n#     x = news_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n#     y = news_df['sentimentPositive'].values,\n#     mode = 'markers',\n#     name = 'Positive Sentiment' \n# )\n\n# data = [neg_sent, neut_sent, pos_sent]\n\n# layout = go.Layout(dict(title = \"Sentiment of Apple\",\n#                        xaxis = dict(title = 'Year'),\n#                        yaxis = dict(title = 'Sentiment Value'),\n#                        ), legend = dict(\n#                         orientation='h'))\n# py.iplot(dict(data=data, layout=layout), filename='line-mode')","f82aeb6e":"news_df = news_train[(news_train['assetName'] == 'Apple Inc')]\nnews_df = news_df.loc[pd.to_datetime(news_df['time']) >= pd.to_datetime('2014-06-09').tz_localize('UTC')]\n\n# time = pd.to_datetime('2014-06-09').tz_localize('UTC')\n# time += pd.Timedelta(days=1)\n# time\n    \nstart_day = pd.to_datetime('2014-06-09').tz_localize('UTC')\nday_after = pd.to_datetime('2014-06-10').tz_localize('UTC')\nsent_count = 0\nsent_neg_total = 0\nsent_neut_total = 0\nsent_pos_total = 0\nsent_overall = []\ndates = []\n\n# Function that calculates the average sentiment for each day\nfor index, row in news_df.iterrows():\n    if pd.to_datetime(row['time']) > start_day and pd.to_datetime(row['time']) < day_after:\n        sent_count += 1\n        sent_neg_total += row['sentimentNegative']\n        sent_neut_total += row['sentimentNeutral']\n        sent_pos_total += row['sentimentPositive']\n    else:\n        if sent_count == 0:\n            start_day += pd.Timedelta(days=1)\n            day_after += pd.Timedelta(days=1)\n            sent_count = 0\n            sent_neg_total = 0\n            sent_neut_total = 0\n            sent_pos_total = 0\n        else:\n            sent_neg_total = sent_neg_total\/sent_count\n            sent_neut_total = sent_neut_total\/sent_count\n            sent_pos_total = sent_pos_total\/sent_count\n            sent_overall.append(sent_pos_total - sent_neg_total)\n            sent_count = 0\n            sent_neg_total = 0\n            sent_neut_total = 0\n            sent_pos_total = 0\n            dates.append(start_day)\n            start_day += pd.Timedelta(days=1)\n            day_after += pd.Timedelta(days=1)\n\n# Plot average sentiment values for each day\noverall_sentiment = go.Scatter(\n    x = dates,\n    y = sent_overall,\n#     mode = 'markers',\n    name = 'Overall Sentiment Score' \n)\n\ndata = [overall_sentiment]\n\nlayout = go.Layout(dict(title = \"Sentiment of Apple\",\n                       xaxis = dict(title = 'Year'),\n                       yaxis = dict(title = 'Sentiment Value'),\n                       ), legend = dict(\n                        orientation='h'))\npy.iplot(dict(data=data, layout=layout), filename='line-mode')","4b75dfc1":"apple_close_price = (go.Scatter(\n    x = df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n    y = df['close'].values,\n    name = 'APPL.O'\n))\n\ndata = [overall_sentiment, apple_close_price]\n\nlayout = go.Layout(dict(title = \"Sentiment of Apple\",\n                       xaxis = dict(title = 'Year'),\n                       yaxis = dict(title = 'Sentiment Value'),\n                       ), legend = dict(\n                        orientation='h'))\npy.iplot(dict(data=data, layout=layout), filename='line-mode')","33722768":"market_train.loc[market_train['assetCode'] == 'A.N', ['time', 'assetCode']]\n","c38ba56f":"target_col = ['returnsOpenNextMktres10']\ncat_cols = ['assetCode']\nnum_cols = ['volume', 'close', 'open',\n       'returnsClosePrevRaw1', 'returnsOpenPrevRaw1',\n       'returnsClosePrevMktres1', 'returnsOpenPrevMktres1',\n       'returnsClosePrevRaw10', 'returnsOpenPrevRaw10',\n       'returnsClosePrevMktres10', 'returnsOpenPrevMktres10']","8ad345ba":"from sklearn.model_selection import train_test_split\n\nmarket_train = market_train.loc[pd.to_datetime(market_train['time']) >= pd.to_datetime('2009-01-01').tz_localize('UTC')]\n\ntrain_indices, val_indices = train_test_split(market_train.index.values, test_size = 0.25, random_state = 23)","cb1d7194":"# Handles categorical variables\n\ndef encode(encoder, x):\n    len_encoder = len(encoder)\n    try:\n        id = encoder[x]\n    except KeyError:\n        id = len_encoder\n    return id\n\nencoders = [{} for cat in cat_cols]\n\nfor i, cat in enumerate(cat_cols):\n    print('encoding %s ...' % cat, end = ' ')\n    encoders[i] = {l: id for id, l in enumerate(market_train.loc[train_indices, cat].astype(str).unique())}\n    market_train[cat] = market_train[cat].astype(str).apply(lambda x: encode(encoders[i], x))\n    print('Done')\n    \nembed_sizes = [len(encoder) + 1 for encoder in encoders]","5199dc24":"encoders","4fab70e1":"# Handles numerical variables\nfrom sklearn.preprocessing import StandardScaler\nfrom datetime import datetime\n\nmarket_train[num_cols] = market_train[num_cols].fillna(0)\nprint('scaling numerical columns')\n\nscaler = StandardScaler()\nprint(market_train['time'].dtypes)\nmarket_train[num_cols] = scaler.fit_transform(market_train[num_cols])","2d9448c9":"# Prepare data and get variables to calculate scoring metric\ndef get_input(market_train, indices):\n    X_num = market_train.loc[indices, num_cols].values\n    X = {'num': X_num}\n    for cat in cat_cols:\n        X[cat] = market_train.loc[indices, cat_cols].values\n    y = (market_train.loc[indices, 'returnsOpenNextMktres10'] >= 0).values\n    r = market_train.loc[indices, 'returnsOpenNextMktres10'].values\n    u = market_train.loc[indices, 'universe']\n    d = market_train.loc[indices, 'time'].dt.date\n    return X, y, r, u, d # r, u, and d are used to calculate the scoring metric\n\nX_train, y_train, r_train, u_train, d_train = get_input(market_train, train_indices)\nX_valid, y_valid, r_valid, u_valid, d_valid = get_input(market_train, val_indices)","7c7db88a":"# Magic XG Boost Model\nfrom xgboost import XGBClassifier\nimport warnings\nwarnings.filterwarnings(action='ignore',category=DeprecationWarning)\n\nmodel = XGBClassifier(n_jobs = 4, n_estimators = 47, max_depth = 6)\nmodel.fit(X_train['num'], y_train.astype(int))\nconfidence_valid = model.predict(X_valid['num'])*2-1\nscore = accuracy_score(confidence_valid>0, y_valid)\nprint(score)","6ac6db2f":"# Calculation of actual metric that is used for final score\nr_valid = r_valid.clip(-1,1) # get rid out outliers\nx_t_i = confidence_valid * r_valid * u_valid\ndata = {'day': d_valid, 'x_t_i' : x_t_i}\ndf = pd.DataFrame(data)\nx_t = df.groupby('day').sum().values.flatten()\nmean = np.mean(x_t)\nstd = np.std(x_t)\nscore_valid = mean \/ std\nprint(score_valid)","95e51d74":"r_valid","de19f2df":"x_t_i","33a930bb":"confidence_valid","518791b4":"y_valid","51e7b1a9":"plt.hist(confidence_valid, bins = 'auto')\nplt.title(\"predicted confidence\")\nplt.show()","ca177c35":"**Now I am going to try and average each sentiment value into one. I will most likely need to have a weighting function, but this can come next. The reason for this is each news document has different urgency, sentiment word count, etc and those with higher urgency and more sentiment word count should probabaly be weighted more.**","962d8638":"**Okay, still need to do something with weights and I do not use neutral value - not sure how to incorporate this. What I'm going to try to do now is combine the closing price graph with the overall sentiment to try and observe a correlation.**","613b89f8":"**This is my first try to find the average sentiment for Apple. It looks like I should not keep all three (pos, neut, neg) in one graph as it is really hard to tell the overall sentiment. So...perhaps I need to make a function to determine the \"overall\" sentiment of the day. This way there will only be one datapoint per day and we could overlay this with the closing prices.**"}}