{"cell_type":{"a6f01f6b":"code","b4a8bd1e":"code","a0428b2d":"code","d1e33f39":"code","529798d2":"code","3d3ed1df":"code","0bb05922":"code","988fe9e9":"code","a4a0c7a7":"code","a94020ec":"code","96b8b900":"code","f4bde0d8":"code","9db7b32e":"code","a9490eca":"code","c7720668":"code","55e25225":"code","80a51ebb":"code","bebea560":"code","70e0cb5c":"code","4c1a2a23":"code","11307dc4":"code","392b012d":"code","4b41fc93":"code","8965aaa3":"code","1021fdb9":"code","61f53b00":"markdown","a5364bf2":"markdown","379d293a":"markdown","3828be17":"markdown","bcca0100":"markdown"},"source":{"a6f01f6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4a8bd1e":"data = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndata.head()","a0428b2d":"data = data.sort_values(by=\"age\")","d1e33f39":"# check on None\ndata.isnull().sum()","529798d2":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Count patients\nage_count = pd.DataFrame(data.groupby(\"age\").sex.count()).reset_index()\nage_count = age_count.rename(columns={'age':'age', 'sex':'count_person'})\nage_count.head()","3d3ed1df":"age_count[age_count.count_person == age_count.count_person.max()] #most patients aged","0bb05922":"plt.figure(figsize=(20,6))\nsns.barplot(x=age_count.age, y=age_count.count_person)","988fe9e9":"age = pd.DataFrame(data.groupby(\"age\").target.sum()).reset_index()\nage[\"ill\"] = age.target \/ age_count.count_person # % ill patients\nage.head()","a4a0c7a7":"plt.figure(figsize=(20,6))\nsns.barplot(x=age.age, y=age.ill)","a94020ec":"min_age = data.age.min()\nmax_age = data.age.max()\nn = data.age.count()\nprint(min_age, max_age, n)\n\nimport math\n\n# to determine the size of the interval, we use the Sturges formula\n\nh = round((max_age - min_age) \/ (1 + math.log(n,2))) \n\nprint(h)\n\n# we divide the initial data into m intervals\n\nm = 1 + math.ceil(math.log(n, 2))\n\nprint(m)\n\n# initial value\n\nx_start = min_age - round(h\/2)\n\nprint(x_start)\n\n# we get intervals\n\nintervals = []\nfor i in range(m):\n    \n    interval = [x_start, x_start + h]\n    intervals.append(interval)\n    x_start = interval[1]\n\nprint(intervals)","96b8b900":"X = pd.DataFrame()\ni = 0\nfor interval in intervals:\n    i = i + 1\n    value = []\n    if i == m:\n        for value_col in data.age:\n            if value_col <= int(interval[1]) and value_col >= int(interval[0]):\n                val = 1\n            else:\n                val = 0\n            value.append(val)\n    else:\n        for value_col in data.age:\n            if value_col < int(interval[1]) and value_col >= int(interval[0]):\n                val = 1\n            else:\n                val = 0\n            value.append(val)\n    \n    X[\"[\"+str(interval[0])+\" ,\"+str(interval[1]) + \")\"] = value","f4bde0d8":"X.head()","9db7b32e":"X[\"sex\"] = data.sex\nX[\"cp\"] = data.cp\nX[\"trestbps\"] = data.trestbps\nX[\"chol\"] = data.chol\nX[\"fbs\"] = data.fbs\nX[\"restecg\"] = data.restecg\nX[\"thalach\"] = data.thalach\nX[\"exang\"] = data.exang\nX[\"oldpeak\"] = data.oldpeak\nX[\"slope\"] = data.slope\nX[\"ca\"] = data.ca\nX[\"thal\"] = data.thal","a9490eca":"X.head()","c7720668":"data.head()","55e25225":"data.target.unique()","80a51ebb":"def norm(column):\n    x_min = column.min()\n    x_max = column.max()\n    \n    column = (column - x_min) \/ (x_max - x_min)\n    return column","bebea560":"X.cp = norm(X.cp)\nX.trestbps = norm(X.trestbps)\nX.chol = norm(X.chol)\nX.restecg = norm(X.restecg)\nX.thalach = norm(X.thalach)\nX.oldpeak = norm(X.oldpeak)\nX.slope = norm(X.slope)\nX.ca = norm(X.ca)\nX.thal = norm(X.thal)\nX.head()","70e0cb5c":"y = data.target","4c1a2a23":"X.shape[0] == y.shape[0]","11307dc4":"from sklearn.model_selection import train_test_split\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.10, random_state=0)\n","392b012d":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import cross_val_score\n\nmodel = MLPClassifier(solver='adam', alpha=0.00001, hidden_layer_sizes=(150,), random_state=0)\n\nscore = cross_val_score(model, train_X, train_y, cv=3)\nscore","4b41fc93":"model.fit(train_X, train_y)","8965aaa3":"predict = model.predict(test_X)\n\nsumm = 0\nn = predict.size\nys = np.array(test_y)\nfor i in range(n):\n    if predict[i] == ys[i]:\n        summ = summ + 1\nsumm\/n\n","1021fdb9":"model.fit(X, y)\n\nfrom joblib import dump\ndump(model, 'classificator_heart_disease.joblib')\n\n","61f53b00":"most patients are aged 58 but heart disease not all patients","a5364bf2":"# Age\n\ndivide the age into intervals","379d293a":"# preparing data for training","3828be17":"# Let's see the data","bcca0100":"# Model and train"}}