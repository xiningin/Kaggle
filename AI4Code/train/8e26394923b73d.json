{"cell_type":{"3ccb9951":"code","ed558a34":"code","cff95362":"code","fbffa179":"code","2ef60246":"code","4404db8d":"code","b1148ecf":"code","a8e06558":"code","635be239":"code","0e600abc":"code","b5799e8b":"code","933119bd":"code","8977d722":"code","6c94585d":"code","31531828":"code","8ad4eeef":"code","10c249e7":"code","c02f85e0":"code","b923edcf":"code","369d82de":"code","61f73051":"code","2291f2d9":"code","afc0bee6":"code","b6c7ce3b":"code","6fc307d4":"markdown","f18cd499":"markdown","8436ba7e":"markdown","fea24b21":"markdown","2cd60537":"markdown","f9b8bda2":"markdown"},"source":{"3ccb9951":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n","ed558a34":"train_df=pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_df.head()","cff95362":"test_df=pd.read_csv('..\/input\/titanic\/test.csv')\ntest_df.head()","fbffa179":"train_df.info()\n","2ef60246":"test_df.info()","4404db8d":"train_df = train_df.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)\ntest_df    = test_df.drop(['Name','Ticket'], axis=1)","b1148ecf":"train_df.head()","a8e06558":"test_df.head()","635be239":"train_df.describe()","0e600abc":"#VISUALIZATION COLUMN WISE\n#FARE\nplt.figure(figsize=(10,7))\nsns.barplot(train_df['Survived'],train_df['Fare'])\n","b5799e8b":"plt.figure(figsize=(10,7))\nsns.barplot(train_df['Survived'],train_df['Age'])\n","933119bd":"sns.regplot(train_df['Age'],train_df['Fare'])","8977d722":"plt.figure(figsize=(14,6))\nsns.countplot(x='Survived',hue='Sex',data=train_df)\nplt.title('people category by Sex and Survival')","6c94585d":"plt.figure(figsize=(14,6))\nsns.heatmap(train_df.corr(),annot=True)\nplt.title(\"Correlation of the following data\");","31531828":"total = train_df.isnull().sum().sort_values(ascending=False)\npercent_1 = train_df.isnull().sum()\/train_df.isnull().count()*100\npercent_2 = (round(percent_1, 1)).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent_2], axis=1, keys=['Total', '%'])\nmissing_data.head(5)","8ad4eeef":"#FILLING ALL MISSING VALUES\n#FARE\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n#AGE\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].fillna(0)\n    dataset['Age'] = dataset['Age'].astype(int)","10c249e7":"train_df['Embarked'].value_counts()\ntrain_df['Embarked'].fillna(value='S',inplace=True)\nembark = {\"S\": 1, \"Q\": 2,\"C\":3}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(embark)\n","c02f85e0":"genders = {\"male\": 0, \"female\": 1}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genders)","b923edcf":"from sklearn.model_selection import train_test_split,KFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\ntrain_df['female']=train_df['Sex']=='female'\n\nX = train_df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].values\n\ny = train_df['Survived']\n\nX_train,X_test,y_train,y_test=train_test_split(X,y)","369d82de":"from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score\n\nmodel0 = RandomForestClassifier(n_estimators=100)\nmodel0.fit(X_train, y_train)\n\nY_prediction = model0.predict(X_test)\n\nNATURE=model0.score(X_train, y_train)\nprint(NATURE)\n    \n","61f73051":"from sklearn.neural_network import MLPClassifier\n\nmodel1=MLPClassifier(max_iter=1500,hidden_layer_sizes=(500,1000,500),alpha=1e-5,solver='adam',random_state=26)\nmodel1.fit(X_train,y_train)\n\ny_prediction=model1.predict(X_test)\n\nHUMANS=model1.score(X_train,y_train)\nprint(HUMANS)","2291f2d9":"winner = pd.DataFrame({\n    'Model': ['FOREST','NEURONS'],\n    'Score': [NATURE,HUMANS]})\nwin_model = winner.sort_values(by='Score', ascending=False)\nwin_model = winner.set_index('Score')\nwin_model.head(9)","afc0bee6":"features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\nX_test = pd.get_dummies(test_df[features])\npredictions = model0.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","b6c7ce3b":"sub=pd.read_csv('.\/submission.csv')\nsub.head()","6fc307d4":"# **IMPORTING LIBRARIES**","f18cd499":"DO UPVOTE IF YOU LIKE IT","8436ba7e":"# FILLING MISSING VALUES","fea24b21":"# BUILDING MODEL","2cd60537":"# ***SUBMISSION***","f9b8bda2":"**VISUALIZATION**"}}