{"cell_type":{"f3f7223e":"code","52ddb129":"code","8898f386":"code","87fce675":"code","d3e3acc8":"code","e9262f27":"code","041477fa":"code","3d677025":"code","cd57720e":"code","99dcfbb1":"code","75aa9f31":"code","8debcade":"markdown","1aa0e767":"markdown","70573205":"markdown","9ed9d31f":"markdown","e5eb0493":"markdown","9252b271":"markdown"},"source":{"f3f7223e":"# Import modules\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\n# If you decide to increase or decrease the font size in figures later, you can turn on the following line of code.\n# plt.rcParams.update({'font.size': 16}) \n\n# Set the backend of matplotlib to the 'inline' backend so that plots appear below the code that produces them\n# (See details at the bottom of this webpage: https:\/\/ipython.readthedocs.io\/en\/stable\/interactive\/plotting.html)\n%matplotlib inline","52ddb129":"# These are the data points for the 47ohm resistor (R1) when it is charging\nt1c = np.array([1.34,1.8,2.42,3.25,4.36,5.86,7.87,10.57,14.19,19.05,25.58,34.35,46.12,61.93,83.15,111.65,149.92,201.3,270.3,362.94])\nV1c = np.array([0.026,0.046,0.077,0.108,0.138,0.167,0.233,0.302,0.41,0.528,0.667,0.844,1.058,1.293,1.558,1.836,2.122,2.391,2.619,2.794])\n\n# These are the data points for the 47ohm resistor (R1) when it is discharging\nt1d = np.array([1.34,1.8,2.42,3.25,4.36,5.85,7.85,10.54,14.15,19,25.51,34.24,45.96,61.7,82.82,111.17,149.24,200.33,268.93,361])\nV1d = np.array([2.717,2.712,2.67,2.649,2.628,2.607,2.571,2.514,2.439,2.363,2.257,2.12,1.958,1.753,1.509,1.223,0.922,0.625,0.374,0.194])\n","8898f386":"# Plotting the 47 ohm resistor charging\nplt.figure('100 charging')\nplt.plot(t1c, V1c, 'kx')\n\n# Attach labels and title\nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$V$ (volts)')\nplt.title('Time-Voltage plot during charging when connected to 47$\\Omega$ resistor')\n\n# Display the figure\nplt.show()\n\n","87fce675":"# Since the circuit is attached to a V0 = 3V battery we anticipate that it will have the equation V = V0*(1-exp(-t\/tau)) meaning that if we take DV = V0 - V \n# we should get a decaying exponential just like during discharging\nplt.figure('100 charging voltagediff')\n# Define array to subtract V1c from\nV0 = 3*np.ones(20)\n\nDV1 = V0 - V1c\n\n\n\n# Plotting this\nplt.plot(t1c, DV1, 'kx')\nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\Delta V$ (volts)')\nplt.title('Plot of $\\Delta V = V_0 - V$ vs time during charging')\n\n# Display the figure\nplt.show()\n","d3e3acc8":"# Plotting the 47 ohm resistor charging\nplt.figure('47 discharging')\nplt.plot(t1d, V1d, 'kx')\n\n# Attach labels and title \nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$V$ (volts)')\nplt.title('Time-Voltage plot during discharging when connected to 47$\\Omega$ resistor')\n\n# Display the figure\nplt.show()\n","e9262f27":"# Set the figure to save\nplt.figure('Test Figure') \n\n# Save the figure as a file in png, pdf or other formats\nplt.savefig('TestFigure.png', bbox_inches='tight') # The output figure is saved to your project folder by default.\n#plt.savefig('TestFigure.pdf', bbox_inches='tight')\n\n# It's possible to save the figure in png by drag-and-drop: click on the output figure and drag it to a folder on your computer.","041477fa":"# Here we plot the natural log of DV = V0-V against time during the charging of the capacitor, this should give us a straight line whose \n# gradient is the inverse of the time constant\n\n# Plot Logs against time\nplt.plot(t1c, np.log(DV1), 'rx')\n\n\n# Attach labels and title \nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\ln(\\Delta V)$ ')\nplt.title('$ln(\\Delta V)$ vs $t$ during charging')\n\n# Display the figure\nplt.show()\n","3d677025":"# Doing the same for discharging\nplt.plot(t1d, np.log(V1d), 'bx')\n\n# Attach labels and title \nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\ln(V)$ ')\nplt.title('$\\ln(V)$ vs $t$ during discharging')\n\n# Display the figure\nplt.show()\n","cd57720e":"# Find the line of best fit for the data\nslope, intercept, r_value, p_value, std_err = stats.linregress(t1d, np.log(DV1))\n\nprint(slope, intercept, std_err)\nName = str(np.round(slope,5))+'*t+'+str(np.round(intercept,5))\n\n# Create the line of best fit from the linear fit above\nline = slope*t1d + intercept\n\n# Plot the line of best fit \nplt.plot(t1d, line, 'r', label=Name)\nplt.plot(t1d, np.log(DV1),'kd')\n\n# Attach labels and title\nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\ln(\\Delta V)$ ')\nplt.title('$\\ln(\\Delta V)$ vs $t$ during discharging')\n\n# Add a grid to the plot\nplt.grid(alpha=.4,linestyle='--')\n\n# Show the legend in the plot\nplt.legend()\n\n# Display the figure\nplt.show()\n\n","99dcfbb1":"# Find the line of best fit for the data\nslope1, intercept1, r_value, p_value, std_err1 = stats.linregress(t1d, np.log(V1d))\n\nprint(slope1, intercept1, std_err1)\nName1 = str(np.round(slope1,5))+'*t+'+str(np.round(intercept1,5))\n\n# Create the line of best fit from the linear fit above\nline1 = slope1*t1d + intercept1\n\n# Plot the line of best fit \nplt.plot(t1d, line1, 'b', label=Name1)\nplt.plot(t1d, np.log(V1d),'kd')\n\n# Attach labels and title\nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\ln(V)$ ')\nplt.title('$\\ln(V)$ vs $t$ during discharging')\n\n# Add a grid to the plot\nplt.grid(alpha=.4,linestyle='--')\n\n# Show the legend in the plot\nplt.legend()\n\n# Display the figure\nplt.show()\n\n","75aa9f31":"slope_av = 0.5 * (slope+slope1)\n\ntau = -1\/slope_av\n\nR1exact = 99.1\n\nC = tau\/R1exact\n\nrR = 0.05\n\nrC = np.sqrt(rR ** 2 + ((std_err + std_err1)) ** 2)\n\nprint(' The time constant is: ',tau,'\\n','this gives a capacitance of: ',C, '\\n','with relative error equal to: ',rC)","8debcade":"# Compute natural logarithms\n\nSuppose we work out the relationship between $x$ and $y$ is an exponential one in our analysis, we can compute the values of $\\ln(y)$ to linearise the data and plot $x$ vs $\\ln{(y)}$. We will use the first dataset as an example below.","1aa0e767":"# Scatter plot for charging and discharging an RC circuit with 47$\\Omega$ resistor","70573205":"# PHYSICS 121 Lab 1 *RC* Circuits\n\nThis notebook is used to calculate the time constant of the an RC circuit from the values of the voltage under charging or discharging when connected to a 100$\\Omega$ resistor\n","9ed9d31f":"We now use the `plt.plot` function to produce a scatter plot:","e5eb0493":"# Save a figure as a file\n\nTo save the figure with two datasets as a file, we will make use of 'savefig'.","9252b271":"# Fit linear models to data\n\nWe can now find the line of best fit in the linearised data by using *simple linear regression*."}}