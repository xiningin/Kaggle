{"cell_type":{"1c621bff":"code","b4214c50":"code","d717c0db":"code","eb1b21b6":"code","0fa0ccfb":"code","8bcc8ae7":"code","6bce9422":"code","4ffd44ab":"code","08902191":"code","2217a1f8":"code","143d32f1":"code","0222f7b6":"code","23aebc76":"code","ca0d09ec":"code","0e87fd6d":"code","6ab7ce3b":"code","3cb1e342":"code","d6f4f34a":"code","7d73a7e1":"code","18116d4f":"code","5ee34ad3":"code","816d2a49":"code","a7967b20":"code","5d5c58ce":"code","88fb7d31":"code","1e3b46c5":"code","bac07a10":"code","df70509b":"code","bffa70c1":"code","016843ea":"code","a5dc20c8":"code","eeb6b7ec":"markdown","c490f6ce":"markdown","e7a7299c":"markdown","2a625959":"markdown","421797a6":"markdown","ac3c1c4b":"markdown","921bedf1":"markdown","4e9a56d3":"markdown","ac8753b7":"markdown","ebeb2872":"markdown","1c706357":"markdown"},"source":{"1c621bff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4214c50":"hn = pd.read_csv(\"\/kaggle\/input\/hacker_news.csv\")\nhn.head()","d717c0db":"title = hn[\"title\"]\ntitle.head(10)","eb1b21b6":"# creat a pattern for regular expression\npattern = r\"[Pp]ython\" # [] is a set","0fa0ccfb":"title.str.contains(pattern).sum()","8bcc8ae7":"# To see title have Python or not.\ntitle[title.str.contains(pattern)]","6bce9422":"# RE using Python\nimport re","4ffd44ab":"python = 0\n\nfor i in title:\n    if re.search(pattern,i):\n        python += 1","08902191":"python ","2217a1f8":"pattern = r\"[12][0-9][0-9][0-9]\"\npattern = r\"[12][0-9]{3}\"","143d32f1":"# Now check the \"email\", \"e_mail\" in (hn) dataframe\npattern = r\"e_?mail\"","0222f7b6":"title.str.contains(pattern).sum()","23aebc76":"title[title.str.contains(pattern)]","ca0d09ec":"# To check [pdf] & [videos] in hn\npattern = r\"(\\[\\w+\\])\"","0e87fd6d":"title[title.str.contains(pattern)].head()","6ab7ce3b":"title.str.extract(pattern).head()","3cb1e342":"title.str.extract(pattern).iloc[100]","d6f4f34a":"# If we have this type of sentence then\n# \"Javascript\"\n# \"javaScript\"\n# \"Java\"\n# \"java\"\npattern = \"[Jj]ava[^Ss]\"","7d73a7e1":"\"I am Java lover\"\n\"I am Java lover and JavaScript\"\n\"I am Javaprogramming lover\"\n\"I am Java\"","18116d4f":"if re.search(pattern,\"I am Java\"):\n    print(\"I found\")","5ee34ad3":"pat = r\"\\b[Jj]ava\\b\" # word boundry character ","816d2a49":"if re.search(pat,\"I am Java\"):\n    print(\"I found\")","a7967b20":"pat = r\"\\b[Jj]ava\\w*\\b\"","5d5c58ce":"if re.search(pat,\"I am Javaprogramming lover\"):\n    print(\"I found\")","88fb7d31":"pattern = r\"^\\[\\w+\\]\"","1e3b46c5":"title[title.str.contains(pattern)].head()","bac07a10":"pattern = r\"\\[\\w+\\]$\"\n\ntitle[title.str.contains(pattern)].head()","df70509b":"pat = r\"\\b[Cc]\\b[^+]\"","bffa70c1":"title[title.str.contains(pat)].head()","016843ea":"pat = r\"\\b(?<!Series\\s)[Cc]\\b\"","a5dc20c8":"title[title.str.contains(pat)].head()","eeb6b7ec":"Hope you guys have learnt how the whole process of Regular Expression . ","c490f6ce":"There are some other common character classes which we'll use a lot.\n\n* Digit -> **`\\d`** any digit character(equivalent to [0-9])\n* Word -> **`\\w`** any digit, uppercase, lowercase or underscore character (equivalent to [A-Za-z0-9_]). Does not include any special character \n* Whitepace -> **`\\s`** any space, tab or linebreak character\n* Dot -> **`.`**  any character or special character except newline","e7a7299c":" a{3} -> The character `a` three times\n\n a{3,5} ->The character `a` three, four or five times\n\n a{,3} ->The character `a` zero, one, two or three times\n\n a{8,} ->The character `a` eight or more times","2a625959":"If we wanted to write a pattern that matches the numbers in text from 1000 to 2999 we could write the regular expression\n\n[1-2][0-9][0-9][0-9] or [1-2][0-9]{3} (this type of regular expression syntax is called a `quantifier`. In this case, its a numeric quantifier).\n\nQuantifiers specify how many of the previous character our pattern requires, which can help us when we want to match substrings of specific lengths","421797a6":"Summary of syntax for some of the regex character classes:\n\n* set ->[fud] either f,u or d\n* range -> [a-e] any of the charachter a,b,c,d or e\n* range -> [0-3] any of the charachter 0,1,2 or 3\n* range -> [A-Z] any uppercase letter\n* set+range -> [A-Za-z] any uppercase or lower case letter [Aa-Zz]","ac3c1c4b":"In addition to numeric quantifiers, there are single characters in regex that specify some common quantifiers that we're likely to use. A summary of them is below.\n\na* -> equivalent to a{0,} zero or more\n\na+ -> equivalent to a{1,} one or more\n\na? -> equivalent to a{0,1} zero or one (optional)","921bedf1":"A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. Regular expressions are widely used in UNIX world.\n\nThe Python module re provides full support for Perl-like regular expressions in Python. The re module raises the exception re.error if an error occurs while compiling or using a regular expression.\n\nWe would cover two important functions, which would be used to handle regular expressions. But a small thing first: There are various characters, which would have special meaning when they are used in regular expression. To avoid any confusion while dealing with regular expressions, we would use Raw Strings as **r'expression'**.","4e9a56d3":"# Regular Expression ","ac8753b7":"# Please Upvote this notebook if it has helped you in any ways! Thank you:)","ebeb2872":"### Negative set\n\n* Negative Set -> [^fud] any charachter except f,u or d\n* Negative Set -> [^1-3Z\\s] any charachter except 1,2,3,Z or Whitespace character\n* Negative Digit -> \\D any charachter except Digit character\n* Negative Word -> \\W any charachter except word character\n* Negative whitespace -> \\S any charachter except space character","1c706357":"### Lookarounds\n\n* positive lookahead  zzz(?=abc)  match zzz only when it is followed by abc\n* negative lookahead  zzz(?!abc)  match zzz only when it is not followed by abc\n* positive lookbehind (?<=abc)zzz match zzz only when it is preceded by abc\n* negative lookbehind (?<!abc)zzz match zzz only when it is not preceded by abc"}}