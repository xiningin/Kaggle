{"cell_type":{"797e2a9f":"code","ef181a30":"code","6350989a":"code","2d08bb44":"code","cae56f60":"code","c640a1c1":"code","90c3a5e5":"code","6a9d3550":"code","e7563218":"code","6446bb31":"code","43856f11":"code","43726bf9":"code","3b3aaf1c":"code","01d49937":"code","4dc6dde4":"code","700e2d7a":"code","8d7f5284":"code","bd172059":"code","f5fc4af2":"code","f870a9f8":"code","01c35bfa":"code","bfb1e406":"code","410ca5f6":"code","91c93254":"code","643347a5":"code","03d79053":"code","5b65db6d":"code","0205bd0f":"code","8893e5d6":"code","2d1fc279":"code","ddc65002":"code","d95b5154":"code","988b7d25":"code","e50cc201":"markdown","869417d3":"markdown","3135fe15":"markdown","a44a40f4":"markdown","12fe919f":"markdown","7e792324":"markdown","c72e616d":"markdown","fb117232":"markdown","ecc0cbda":"markdown","f8437110":"markdown","878802fc":"markdown","e37e2bf2":"markdown","47a556d3":"markdown","a7f55e13":"markdown","5a348c50":"markdown","a4ea6103":"markdown","d31a0f55":"markdown","130ed39b":"markdown","d9fbb339":"markdown","bb9e1848":"markdown","fc105c23":"markdown","458f7c5a":"markdown","5c9cca54":"markdown","a1540b70":"markdown","a7d63c7c":"markdown","003bf33a":"markdown"},"source":{"797e2a9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport os\nimport re \nimport plotly\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom scipy.stats import ttest_ind\nfrom itertools import combinations\nfrom collections import Counter\n\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom plotly.subplots import make_subplots\nfrom sklearn.preprocessing import MinMaxScaler\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\nimport myfunction as mf\n\n# \u0421\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\npd.set_option('display.max_rows', 50) # \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a\npd.set_option('display.max_columns', 100) # \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\nimport warnings; warnings.simplefilter('ignore') #  \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0430\u044e\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ef181a30":"# \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED \u0438 \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\nRANDOM_SEED = 42\n!pip freeze > requirements.txt","6350989a":"# \u0427\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b\nDATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR + '\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR + 'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR + '\/sample_submission.csv')\n\n# \u0412\u0410\u0416\u041d\u041e! \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\n\n# \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0432\u043e\u0434\u043a\u0443 \u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nmf.brief_summary(df_train)\n","2d08bb44":"#data = mf.drop_dublle(data, ['ID_TA', 'sample'])","cae56f60":"# \u0432\u044b\u0432\u043e\u0434 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u0438\n    \nmf.view_count_in_chain(data)\ndata = mf.calc_count_in_chain(data) ","c640a1c1":"# \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\ndata = mf.string_to_list_distribution(data, 'City')\n# \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c, \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u043e\u0431\u0449\u0443\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 restorans_in_city \ndata = mf.view_horiz_bar_n_table(data, 'City', 'restaurants_in_city') ","90c3a5e5":"# \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0438 \u0440\u0435\u0434\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f City\n\n# \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f\u043c\u0438 city_is_the_capital, population_city, country\ndata = mf.city_expansion_features(data)","6a9d3550":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 'Empty'\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a empty_cuisine_style, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c '1' \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Cuisine Style, \u0434\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c '0'\n\n# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043e \u0438\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f - \u043f\u0440\u0438\u0437\u043d\u0430\u043a code_cuisine_style\n\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a - \u043f\u0440\u0438\u0437\u043d\u0430\u043a list_cuisine_style\n\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0440\u0435\u0434\u043a\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043a\u0443\u0445\u043d\u0438, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c unique_style. \u0421\u0447\u0438\u0442\u0430\u0435\u043c, \u0447\u0442\u043e \u0440\u0435\u0434\u043a\u0438\u0435 \u043a\u0443\u0445\u043d\u0438 - \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 23 (\u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0440\u0435\u0436\u0435 20 \u0440\u0430\u0437)\n\n# \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c - \u043f\u0440\u0438\u0437\u043d\u0430\u043a count_cuisine_style. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\n# \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n# \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u0434\u043b\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n\n# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0439 \u043a\u0430\u043a \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c\n    \n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0440\u0435\u0434\u043a\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043a\u0443\u0445\u043d\u0438. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e unique_border - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438.\ndata = mf.string_to_list_distribution(data, 'Cuisine Style')\ndata = mf.cuisine_distribution(data, 'list_cuisine_style')\ndata = mf.rife_rare_distribution(data, 'list_cuisine_style',.2,.03)\ndata = mf.localisation_cuisine_country(data) # \u0438\u0434\u0435\u044e \u043f\u043e\u0437\u0430\u0438\u043c\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0443 (\u0441)Rezinko Mikhail\ndata = mf.view_histogrm_n_boxplot(data, 'count_cuisine_style')","e7563218":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u0445 \u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0435\u0434\u043a\u0438\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ndata = mf.rife_rare_distribution(data, 'list_cuisine_style', .25, .02)","6446bb31":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432 10 \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445:\nmf.view_attribute_based_distribution(data, 'Ranking', 'City', 10)","43856f11":"# \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u0441\u043a\u0432\u043e\u0437\u043d\u043e\u0435 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\n# \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432 total_ranking\n\n# \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 standard_ranking\n\ndata = mf.ranking_distribution(data)\ndata = mf.add_ranking_distribution(data)\n\nmf.view_attribute_based_distribution(data, 'total_ranking', 'City', 10)\nmf.view_attribute_based_distribution(data, 'standard_ranking', 'City', 10)\nmf.view_attribute_based_distribution(data, 'norm_ranking_on_population', 'City', 10)\nmf.view_attribute_based_distribution(data, 'norm_ranking_on_tourists', 'City', 10)\nmf.view_attribute_based_distribution(data, 'norm_ranking_on_max_rank', 'City', 10)\nmf.view_attribute_based_distribution(data, 'norm_ranking_on_restaurant', 'City', 10)","43726bf9":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a empty_price_range, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c '1' \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Price Range, \u0434\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c '0'\n\n# \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044e {'$':1, '$$ - $$$':2, '$$$$':3}\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u043e\u0439, \u0442.\u0435. 2\n\ndata = mf.price_distribution(data, 2)\nmf.view_price_info(data)\ndata = mf.mean_price_in_city(data)\nmf.view_mean_price(data)","3b3aaf1c":"# \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043a \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443\ndata.rename(columns={'Number of Reviews': 'number_of_reviews'}, inplace=True)\n\n# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ndata['empty_number_of_reviews'] = pd.isna(data['number_of_reviews']).astype('float64')\n\n# \u0432\u044b\u0432\u043e\u0434 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\ndata = mf.view_histogrm_n_boxplot(data, 'number_of_reviews')\n# \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0439 \u043a\u0430\u043a \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0432\u044e","01d49937":"# \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u0432\u043b\u044f\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 log_number_of_reviews:\nmf.view_attribute_based_distribution(data, 'log_number_of_reviews', 'City', 5)\nmf.view_attribute_based_distribution(data, 'log_number_of_reviews', 'Price Range', 4)\nmf.view_attribute_based_distribution(data, 'log_number_of_reviews', 'count_cuisine_style', 8)\n\n# \u0432 \u0446\u0435\u043b\u044f\u0445 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043d\u043e\u0432\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 log_number_of_reviews \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0438 \u0440\u0430\u0441\u0447\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \nmf.view_histogram_n_outliers(data, 'number_of_reviews', 'log', 160)","4dc6dde4":"# \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 10 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u0445, \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0445, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445\ndata['outliers_number_of_reviews'] = pd.DataFrame(data['log_number_of_reviews'] > 8.56).astype('float64')\ndata.loc[data['log_number_of_reviews'] > 8.56, 'number_of_reviews']=None","700e2d7a":"# \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 \u0441\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u044b \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a review_words_list\n# \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u044b 1 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 empty_review\n\n# \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u043b\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u0443\u044e \u0438 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u043e\u043a\u0440\u0430\u0441\u043a\u0443. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u043e\u0432 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 count_pos_words\n# \u0438 count_neg_words \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 \u0441\u043b\u043e\u0432\u0430 'not' \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f 1.\n\ndata = mf.review_text_distribution(data)","8d7f5284":"# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0438\u0437 Reviews \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0430\u0442\u0430\u0445 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n# \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u043b\u0443\u0447\u0435, \u043d\u0443\u043b\u0435\u0432\u0430\u044f \u043e\u0442\u043c\u0435\u0442\u043a\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \n# \u0434\u043d\u044e \u0432\u044b\u0445\u043e\u0434\u0430 \u0441\u0430\u043c\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \ndata = mf.data_review_distribution(data)\n\n# \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043d\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0432\u0435\u0439\u0448\u0435\u0439 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c \u043c\u0435\u0436\u0434\u0443 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f\u043c\u0438\nfig = px.scatter(data[data['review_date_count'] == 2], x=\"review_date_min\", y=\"review_date_delta\",\n                marginal_x='histogram', marginal_y='histogram',\n                trendline='ols', trendline_color_override='darkblue')\nfig.show()","bd172059":"data = mf.view_histogrm_n_boxplot(data, 'review_date_min')\ndata = mf.view_histogrm_n_boxplot(data, 'review_date_delta')","f5fc4af2":"# \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 review_date_olded \u0438 review_date_delta    \nmf.view_histogram_n_outliers(data, 'review_date_min', 'all', 200)\nmf.view_histogram_n_outliers(data, 'review_date_delta', 'lin', 200)","f870a9f8":"# \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b\ndata.replace(np.inf, 1, inplace=True)\ndata.replace(-np.inf, 0, inplace=True)\ndata = data.fillna(0)\n\nmf.show_heatmap(data[data['sample'] == 1].drop(['sample'], axis=1))","01c35bfa":"# \u0418\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u043a\u0440\u0443\u0433 Ranking \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c standard_ranking \u043a\u0430\u043a \u0438\u043c\u0435\u044e\u0449\u0438\u0439 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndata.drop(['total_ranking'], axis=1, inplace=True, errors='ignore')\n\n# \u0418\u0437 \u043f\u0430\u0440 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c\ndata.drop(['log_count_cuisine_style', 'log_number_of_reviews', 'log_review_date_min', 'log_review_date_delta'], axis=1, inplace=True, errors='ignore')\n\n# \u041f\u0440\u0438\u0437\u043d\u0430\u043a outliers_number_of_reviews \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 - \u0443\u0434\u0430\u043b\u044f\u0435\u043c\ndata.drop(['outliers_number_of_reviews'], axis=1, inplace=True, errors='ignore')\n\n# \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 empty_review \u0438 review_date_count, \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b\n#data['empty_review_date_count'] = data['empty_review'] + data['review_date_count']\n#data.drop(['empty_review'], axis=1, inplace=True, errors='ignore')\n\nmf.show_heatmap(data[data['sample'] == 1].drop(['sample'], axis=1))","bfb1e406":"#list_for_pca = ['empty_review', 'review_date_count', 'empty_number_of_reviews', 'count_review_words', 'code_review_words', 'number_of_reviews']\n#data = mf.pca_distribution(data, list_for_pca, 'pca_review')\n\n#list_for_pca = ['code_city', 'restaurants_in_city', 'population_city', 'code_country', 'count_city_tourists', 'count_in_chain', 'city_is_the_capital']\n#data = mf.pca_distribution(data, list_for_pca, 'pca_city', [0,1,1,0,0,1,0])\n\n#list_for_pca = ['code_cuisine_style', 'empty_cuisine_style', 'rare_cuisine_style', 'local_cuisine']\n#data = mf.pca_distribution(data, list_for_pca, 'pca_cuisine')\n\nlist_for_pca = ['Ranking', 'count_in_chain', 'standard_ranking', 'restaurants_in_city', 'population_city']\ndata = mf.pca_distribution(data, list_for_pca, 'pca_ranking', [1,0,1,0,0])\n","410ca5f6":"data.sample(2)","91c93254":"# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 1000 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u0430, \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b\n#data['restaurant_on_population'] = data['restaurants_in_city'] \/ data['population_city'] \/ 1000\n\n# \u0447\u0438\u0441\u043b\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0436\u0438\u0442\u0435\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430\n#data['tourists_on_population'] = data['count_city_tourists'] \/ data['population_city']\n\n# \u0447\u0430\u0441\u0442\u043d\u043e\u0435 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f Ranking \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 (restaurants_in_city)\n#data['ranking_on_count_restaurant'] = data['Ranking'] \/ data['restaurants_in_city']\n\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 10 000 \u0436\u0438\u0442\u0435\u043b\u0435\u0439\n#data['review_on_population'] = data['number_of_reviews'] \/ data['population_city'] \/ 10000\n\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 100 000 \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432\n#data['review_on_tourists'] = data['number_of_reviews'] \/ data['population_city'] \/ 100000\n\n# \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432 \u043a \u0436\u0438\u0442\u0435\u043b\u044f\u043c\n#data['tourists_on_population'] = data['count_city_tourists'] \/ data['population_city']\n\n#data.drop(['city_is_the_capital', 'code_cuisine_style', 'local_cuisine', 'empty_number_of_reviews',\n#          'review_date_count', 'empty_review_date_count', 'count_neg_words'], axis=1, inplace=True, errors='ignore')\n\n#mf.show_heatmap(data[data['sample'] == 1].drop(['sample'], axis=1))\n","643347a5":"data = mf.prep_dummies(data, 'name_chain', 1, 'ch_')#\n#data = mf.prep_dummies(data, 'list_city')\n#data = mf.prep_dummies(data, 'list_country')\n#data = mf.prep_dummies(data, 'list_cuisine_style', .85, 'cs_')\n#positive_words, negative_words = mf.read_positive_words()\n#data = mf.prep_dummies(data, 'list_review_words', .3, 'w_', positive_words) # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \"\u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\"","03d79053":"data = mf.read_dataframes() # \u0447\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndata = mf.drop_dublle(data, ['ID_TA', 'sample']) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0435\u0439\ndata.rename(columns={'Number of Reviews': 'number_of_reviews'}, inplace=True)\n#data['empty_number_of_reviews'] = pd.isna(data['number_of_reviews']).astype('float64')\ndata = mf.string_to_list_distribution(data, 'City') # \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a 'list_city'\n\ndata = mf.ranking_distribution(data)\ndata = mf.city_expansion_features(data)\ndata = mf.add_ranking_distribution(data)\n#list_for_pca = ['norm_ranking_on_max_rank', 'norm_ranking_on_restaurant', 'norm_ranking_on_population', 'norm_ranking_on_tourists']\n#data = mf.pca_distribution(data, list_for_pca, 'pca_norm_ranking', [1,1,0,0])\n\ndata = mf.calc_count_in_chain(data)\n#data = mf.prep_dummies(data, 'name_chain', 1, 'ch_') # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndata = mf.prep_dummies(data, 'list_city') # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndata = mf.review_text_distribution(data)\n#positive_words, negative_words = mf.read_positive_words()\n#data = mf.prep_dummies(data, 'list_review_words', .3, 'w_', positive_words) # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \"\u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\"\n\n#data = mf.price_distribution(data, 2)\n#data = mf.mean_price_in_city(data)\n\n#data = mf.string_to_list_distribution(data, 'Cuisine Style')\n#data = mf.cuisine_distribution(data, 'list_cuisine_style')\n#data = mf.rife_rare_distribution(data, 'list_cuisine_style',.3,.01)\n#data = mf.city_expansion_features(data)\n#data = mf.localisation_cuisine_country(data)\n#data = mf.prep_dummies(data, 'list_cuisine_style', .85, 'cs_')\n\n#data = mf.data_review_distribution(data)\n\n#data['outliers_date_min'] = pd.DataFrame(data['review_date_min'] > 1122.5).astype('float64')\n#data.loc[data['review_date_min'] > 1122.5, 'number_of_reviews']=None\n#data['outliers_date_delta'] = pd.DataFrame(data['review_date_delta'] > 355.5).astype('float64')\n#data.loc[data['review_date_delta'] > 355.5, 'number_of_reviews']=None\n\n#data['empty_number_of_reviews'] = pd.isna(data['number_of_reviews']).astype('float64')\n\n#data = mf.ranking_distribution(data)\n#list_for_pca = ['Ranking', 'standard_ranking', 'total_ranking']\n#data = mf.pca_distribution(data, list_for_pca, 'pca_ranking',[1,1,1])\n#data['ranking_power'] = data['Ranking']* data['Ranking']\n#data['ranking_copy'] = data['Ranking']\n\ndata['log_number_of_reviews'] = np.log1p(data['number_of_reviews'])\n#data['log_review_date_min'] = np.log1p(data['review_date_min'])\n#data['log_review_date_delta'] = np.log1p(data['review_date_delta'])\n\n#data['outliers_number_of_reviews'] = pd.DataFrame(data['log_number_of_reviews'] > 8.56).astype('float64')\n#data.loc[data['log_number_of_reviews'] > 8.56, 'number_of_reviews']=None\n\ndata.drop(['count_in_chain', 'code_review_words',\n           'count_pos_words', 'count_neg_words'], axis=1, inplace=True, errors='ignore')\ndata.drop(['norm_ranking_on_population', 'norm_ranking_on_tourists', 'total_ranking', 'standard_ranking', 'count_city_tourists'], axis=1, inplace=True, errors='ignore')","5b65db6d":"data = data.fillna(0)\n# \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u043c\u0438\u043d-\u043c\u0430\u043a\u0441 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f (\u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432)\ndata = mf.normalisation(data, MinMaxScaler(), ['Rating', 'sample'])\n\ndf_preproc = mf.delete_string_sign(data)","0205bd0f":"display(df_preproc.sample(2))\ndisplay(data.describe().head(1))","8893e5d6":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\n\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data[['Rating']]           # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)\n\n# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","2d1fc279":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","ddc65002":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)\ny_pred = np.array([5.0 if x>5 else x for x in list(np.round(y_pred * 2) \/ 2)])\n\n# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nMAE = metrics.mean_absolute_error(y_test, y_pred)\ntry: title = 'MAE: '+str(MAE)+' <-- '+str(old_MAE)\nexcept: title = 'MAE: '+str(MAE)\nold_MAE = MAE\n\nlayout =go.Layout(\n              autosize=False,\n              width=1000,\n              height=500)\nfig = go.Figure(layout = layout)\nfig.add_trace(go.Bar(x = model.feature_importances_, y = X.columns, orientation='h')), \nfig.update_layout(title = title, title_x = 0.5,\n                  yaxis={'categoryorder':'total descending'},\n                  margin = dict(l=200, r=100, t=50, b=0), showlegend=False)\nfig.update_yaxes(range=(-.5, 20.5))\nfig.show()","d95b5154":"'''\n# \u0431\u043b\u043e\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nlist_importance_sign = list(feat_importances.nlargest(len(train_data.columns)-1).index)\nmin_MAE = round(MAE,3)\nprint(f\"min_MAE = {min_MAE}\")\nremove_list = []\nlog = []\ndelta =0.001\nfor i in range(0,len(list_importance_sign),1):\n    col = list_importance_sign[i]\n    print(f\"{i}.{col}\")\n#     ###\n    train_data = data.query('sample == 1').drop(['sample'], axis=1)\n    test_data = data.query('sample == 0').drop(['sample'], axis=1)\n\n    y = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\n    X = train_data.drop(['Rating']+[col], axis=1)\n\n    # \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    # \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n    print(test_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape)\n\n    model.fit(X_train, y_train)\n\n    y_pred = model.predict(X_test)\n\n    y_pred = np.array([5.0 if x>5 else x for x in list(np.round(y_pred * 2) \/ 2)])\n    temp_MAE = metrics.mean_absolute_error(y_test, y_pred)\n#     ###\n    print(temp_MAE)\n    log.append([col, temp_MAE])\n    if round(temp_MAE,3) <= min_MAE-delta:\n        remove_list.append(col)\n        print(f\"\u0443\u0434\u0430\u043b\u044f\u0435\u043c:= {col}\")\n    else:\n        print(f\"\u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c:= {col}\")\nprint(f\"i={i}\")\nprint(f\"remove_list: {remove_list}\")\nprint(f\"log_list: {log}\")\n'''","988b7d25":"test_data = test_data.drop(['Rating'], axis=1)\npredict_submission = model.predict(test_data)\npredict_submission = np.array([5.0 if x>5 else x for x in list(np.round(predict_submission * 2) \/ 2)])\n\nsample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","e50cc201":"## 2.10 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0444\u0438\u0447\u0435\u0439)","869417d3":"## 4.3. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","3135fe15":"> ### 2.9.2. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","a44a40f4":"> # What's next?\n\u0418\u043b\u0438 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n* \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u044b \u0444\u043e\u0440\u043c\u0430\u0442\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n* \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0442\u0432\u043e\u0440\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u0432\u0435\u0441\u044c\u043c\u0430 \u0443\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439! \u0423\u0434\u0430\u0447\u0438 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438!\n","12fe919f":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 kaggle","7e792324":"## 3.4. \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","c72e616d":"# 2. \u0420\u0430\u0437\u0432\u0435\u0434\u044b\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (EDA)\n## 2.1. Restaurant_id \n","fb117232":"## 2.7. Number of Reviews","ecc0cbda":"> #### Report \u0420\u0430\u0437\u0432\u0435\u0434\u044b\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (EDA)\n> \u0418\u0441\u043f\u043e\u043b\u044c\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043a\u0430\u0442\u0430\u0441\u0442\u0440\u043e\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e. \u0412 \u0446\u0435\u043b\u044f\u0445 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043b\u044f \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 MAE) \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043d\u0430 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435.\n\n# 3. \u041f\u0440\u0435\u0434\u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (Data Preprocessing)\n## 3.1. \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043c\u0430\u043d\u0435\u0432\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u0435\u0441\u044c \u043a\u043e\u0434, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0449\u0438\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0443, \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432 \u044d\u0442\u043e\u0439 \u044f\u0447\u0435\u0439\u043a\u0435. \u041f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u044f\u0447\u0435\u043a\u0435 \u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0447\u0442\u043e \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","f8437110":"##### Report from Number of Reviews\n> \u041f\u0440\u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0432\u044e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0447\u0442\u043e \u0432 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u043d\u043d\u0438\u0445 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0445 \u0440\u0435\u0432\u044e \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0447\u0430\u0449\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \u043e \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 (Price Range).\n\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0432\u044e.\n\n> \u0412\u044b\u044f\u0432\u043b\u0435\u043d\u044b \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b 10 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n## 2.8. Reviews\n> ### 2.8.1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u043e\u0432","878802fc":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u043b\u044f\u0446\u0438\u044e \u0441 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u044e, \u0447\u0442\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a standard_ranking\n## 2.5. Rating","e37e2bf2":">###  2.2.1. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432","47a556d3":"> \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Reviews \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430. \u041f\u043e\u0437\u0434\u043d\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 review_words_list, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 \u0441\u043b\u043e\u0432 \u0432 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.\n> ### 2.8.2 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u0430\u0442\u0430\u0445 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u043e\u0432","a7f55e13":"## 3.3. \u041f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c","5a348c50":"## 2.4. Ranking","a4ea6103":"## 4.2. \u0412\u044b\u0431\u043e\u0440 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n","d31a0f55":"##### \u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430: SkillFactory\n##### \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: Data Science\n##### \u0413\u0440\u0443\u043f\u043f\u0430: DST-17\n### \u042e\u043d\u0438\u0442 3. \u041f\u0440\u043e\u0435\u043a\u0442: \"\u041e \u0432\u043a\u0443\u0441\u043d\u043e\u0439 \u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0439 \u043f\u0438\u0449\u0435\"\n#### \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440 \u042e\u0448\u043c\u0430\u043d\u043e\u0432\n\n![title](https:\/\/raw.githubusercontent.com\/vyushmanov\/skillfactory_rds\/master\/module_3\/rating_pic.jpg)\n\n![title](https:\/\/raw.githubusercontent.com\/vyushmanov\/skillfactory_rds\/master\/module_3\/TA_logo.JPG)\n\n\n# 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n","130ed39b":"## 2.9. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n> ### 2.9.1. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439","d9fbb339":"\n## 2.6. Price Range","bb9e1848":"> ### 2.9.3. \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (PCA)","fc105c23":"## 2.3. Cuisine Style","458f7c5a":"## 2.11. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","5c9cca54":"## 3.2. \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","a1540b70":"## 2.2. City\n\n>### 2.2.1. \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","a7d63c7c":"### \u0421\u043e\u0441\u0442\u0430\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435:\n* ____ - \u0434\u0430\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.\n\u043f\u043e\u043b - \u0434\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n\u0432\u043e\u0437\u0440\u0430\u0441\u0442 - \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\ncar - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b, \u0434\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\ncar_type - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438, \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u0432\u043e\u0438\u0447\u043d\u0430\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\nDec_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\ngood_work - \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u043c\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u0434\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\nscore_bki - \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 BKI (\u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438), \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\nbki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 (\u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438), \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\nregion_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\nhome_address - \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\nwork_address - \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0430\u0434\u0440\u0435\u0441\u043e\u0432, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\n\u0434\u043e\u0445\u043e\u0434 - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0434\u043e\u0445\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\nsna - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0441\u0432\u044f\u0437\u0438 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\nfirst_time - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\nforeign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\ndefault - \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c, \u0434\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.\n\n\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a __ID_TA__ \u0438\u043c\u0435\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u043d\u044c\u0448\u0435\u0435, \u0447\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0423\u0434\u0430\u043b\u0438\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b.","003bf33a":"# 4. Model \n## 4.1. \u0422\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"}}