{"cell_type":{"5220ce39":"code","a7134876":"code","598ad7de":"code","91fb2270":"code","81360777":"code","395f7642":"code","1fc21d11":"code","3615c23a":"code","3a3b2e94":"code","b7e56ba0":"code","56fa4ae5":"code","cdf029bf":"code","a0278127":"code","7bb32fb4":"code","a1d3031a":"code","1fb17b8f":"code","0fb0532e":"code","ad786f4e":"code","aebf6b3e":"code","c7f61abb":"code","ddd1774e":"code","136b17a2":"code","8fc8fb8f":"code","99e865da":"code","d2f75aa6":"code","2ed48a80":"code","1ea7daaf":"code","9ad1c6c4":"code","19d4ce68":"code","92ad29c3":"code","06ce1f82":"code","183abe3b":"markdown"},"source":{"5220ce39":"import os\nos.listdir('..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset')","a7134876":"loc1='..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal'\nloc2='..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID'\nloc3='..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Lung_Opacity'\nloc4='..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Viral Pneumonia'","598ad7de":"import cv2\nfrom tqdm import tqdm\nfeatures = []\n\nfor img in tqdm(os.listdir(loc1)):\n    f = cv2.imread(os.path.join(loc1,img),0)\n    fr = cv2.resize(f,(70,70))\n    features.append(fr)\n\nfor img in tqdm(os.listdir(loc2)):\n    f = cv2.imread(os.path.join(loc2,img),0)\n    fr = cv2.resize(f,(70,70))\n    features.append(fr)\n    \nfor img in tqdm(os.listdir(loc3)):\n    f = cv2.imread(os.path.join(loc3,img),0)\n    fr = cv2.resize(f,(70,70))\n    features.append(fr)\n    \nfor img in tqdm(os.listdir(loc4)):\n    f = cv2.imread(os.path.join(loc4,img),0)\n    fr = cv2.resize(f,(70,70))\n    features.append(fr)","91fb2270":"import numpy as np\nft = np.array(features)","81360777":"ft.shape","395f7642":"labels = []\n\nfor img in tqdm(os.listdir(loc1)):\n    labels.append(0)\n\nfor img in tqdm(os.listdir(loc2)):\n    labels.append(1)\n    \nfor img in tqdm(os.listdir(loc3)):\n    labels.append(2)\n    \nfor img in tqdm(os.listdir(loc4)):\n    labels.append(3)","1fc21d11":"lb = np.array(labels)","3615c23a":"print(ft.shape)\nprint(lb.shape)","3a3b2e94":"import pandas as pd\ndfc = pd.concat((pd.DataFrame(lb.reshape(21165,1)) , \n                 pd.DataFrame(ft.reshape(21165,4900))),\n                axis = 1)\n\ndfc.to_csv('lungs_data.csv')","b7e56ba0":"data = pd.read_csv('.\/lungs_data.csv',index_col=0)","56fa4ae5":"data.head()","cdf029bf":"X = ft.reshape(21165,4900)\nY = lb.reshape(21165,1)","a0278127":"#Create neural network model\nfrom keras import models\nfrom keras import layers\nfrom keras.utils import to_categorical\nfrom keras import optimizers","7bb32fb4":"model = models.Sequential()\n\nmodel.add(layers.Dense(512,activation='relu',input_dim=X.shape[1]))\nmodel.add(layers.Dropout(0.3))\n\nmodel.add(layers.Dense(256,activation='relu'))\nmodel.add(layers.Dropout(0.3))\n\nmodel.add(layers.Dense(512,activation='relu'))\nmodel.add(layers.Dropout(0.3))\n\nmodel.add(layers.Dense(256,activation='relu'))\nmodel.add(layers.Dropout(0.3))\n\nmodel.add(layers.Dense(512,activation='relu'))\nmodel.add(layers.Dropout(0.3))\n\nmodel.add(layers.Dense(256,activation='relu'))\nmodel.add(layers.Dropout(0.3))\n\nmodel.add(layers.Dense(4,activation='softmax'))","a1d3031a":"model.summary()","1fb17b8f":"model.compile(optimizer='sgd',\n             loss = 'categorical_crossentropy',\n             metrics=['accuracy'])","0fb0532e":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,train_size=0.8)","ad786f4e":"#Normalize the input value\nxtrain_n = xtrain\/xtrain.max()\nxtest_n = xtest\/xtest.max()","aebf6b3e":"#One hot encoding\nytrain_h = to_categorical(ytrain)\nytest_h = to_categorical(ytest)","c7f61abb":"model.fit(xtrain_n,ytrain_h,\n         epochs=100,\n         validation_data = (xtest_n,ytest_h))","ddd1774e":"model.evaluate(xtrain_n,ytrain_h)","136b17a2":"model.evaluate(xtest_n,ytest_h)","8fc8fb8f":"xtrain_n.shape","99e865da":"xtest_n[78].shape","d2f75aa6":"Predictions = np.array(['Normal','Covid','Lung_Opacity','Viral'])","2ed48a80":"import numpy as np\nnp.argmax(model.predict(xtest_n[78].reshape(1,4900)))","1ea7daaf":"print(Predictions[np.argmax(model.predict(xtest_n[78].reshape(1,4900)))])\nprint('Actual Label',Predictions[ytest[78]])\n\nimport matplotlib.pyplot as plt\nplt.imshow(xtest_n[78].reshape(70,70),cmap='gray')\nplt.show()","9ad1c6c4":"print(Predictions[np.argmax(model.predict(xtest_n[7].reshape(1,4900)))])\nprint('Actual Label',Predictions[ytest[7]])\n\nimport matplotlib.pyplot as plt\nplt.imshow(xtest_n[7].reshape(70,70),cmap='gray')\nplt.show()","19d4ce68":"ytest\nypred = []\nfor val in model.predict(xtest_n):\n    ypred.append(np.argmax(val))","92ad29c3":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(ytest,ypred)","06ce1f82":"from sklearn.metrics import roc_curve,roc_auc_score\n\n#area under curve\nauc = roc_auc_score(ytest,ypred)\nprint(auc)\n\n#Claculate roc curve\nfpr,tpr,_ = roc_curve(ytest,ypred)\n\n#plot the roc,auc curve\nplt.plot(fpr,tpr,marker='.')\n\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\n\nplt.show()","183abe3b":"**Confusion matrix to analyse categorical accuracy**"}}