{"cell_type":{"5db2c81e":"code","91d367f5":"code","c7d46843":"code","b8f447a2":"code","8080fab8":"code","71cc189b":"code","efb9cf87":"code","b4c5817e":"code","76ea8db9":"code","11bd14bf":"code","797a9f7f":"code","5f192867":"code","4b20ca1b":"code","bac46f90":"code","f18fff40":"code","97159c2d":"code","f6357e5e":"code","61fdc7ae":"code","719cb559":"code","c2fe3aed":"code","e7ec61b3":"code","697b3a52":"code","cc127e3b":"code","5ef5c6bd":"code","ca0fed40":"code","6be842e6":"code","2abb2c14":"code","15c566d4":"markdown","63c4e753":"markdown","5110ba0a":"markdown","d3ba88d8":"markdown","239ad4c3":"markdown","3cea5e6d":"markdown","e51c6df1":"markdown","89f6ff4d":"markdown","ff9887b0":"markdown","77d9fa74":"markdown","894a6c7a":"markdown"},"source":{"5db2c81e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91d367f5":"!pip install bar_chart_race\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px \nimport glob\nimport bar_chart_race as bcr","c7d46843":"custom_colors = [\"#6b2fbb\",\"#132ed1\",\"#3f47fe\",\"#d6e0f0\",\"#117f2d\",\"#50ef39\",\"#38fedc\",\"#71491e\",\"#c51111\",\"#ed54ba\",\"#ef7d0d\",\"#f5f557\"]\ncustomPalette = sns.set_palette(sns.color_palette(custom_colors))","b8f447a2":"sns.palplot(sns.color_palette(custom_colors),size=0.8)\nplt.tick_params(axis='both', labelsize=0, length = 0)","8080fab8":"path = '..\/input\/among-us-dataset' \nall_files = glob.glob(path + \"\/*.csv\")","71cc189b":"li = []\nidx = 0\nusr = 0\n\nfor filename in all_files:\n    usr+=1\n    df = pd.read_csv(filename, index_col=None, header=0)\n    df['User ID']=usr\n    li.append(df)","efb9cf87":"li[9].head()","b4c5817e":"df_merged = pd.concat(li)\ndf_merged = df_merged.reset_index(drop=True)","76ea8db9":"df_merged[['Region','Game Code']] = df_merged['Region\/Game Code'].str.split(\"\/\",expand=True) \ndf_merged = df_merged.drop(columns=['Region\/Game Code'])","11bd14bf":"df_merged.head()","797a9f7f":"timezones=[]\nfor index, row in df_merged.iterrows():\n    tz = df_merged['Game Completed Date'][index][-3:]\n    if tz not in timezones:\n        timezones.append(tz)","5f192867":"timezones","4b20ca1b":"date_val = []\ntime_val = []\nfor index, row in df_merged.iterrows():\n    st = df_merged['Game Completed Date'][index].split()\n    date=st[0]\n    t=st[2]+' '+st[3]\n    time=pd.to_datetime(t).strftime('%H:%M:%S')\n    date_val.append(date)\n    time_val.append(time)","bac46f90":"df_merged['Game Date'] = date_val\ndf_merged['Game Time'] = time_val\n\ndf_merged = df_merged.drop(columns=['Game Completed Date'])","f18fff40":"def convertToMinutes(col):\n    for index, row in df_merged.iterrows():\n        ts = df_merged[col][index]\n        if ts=='-':\n            pass\n        else:\n            ts = ts[:2]+':'+ts[4:6]\n            ftr = [60,1]\n            t = round(sum([a*b for a,b in zip(ftr, [int(i) for i in ts.split(\":\")])])\/60,2)\n            df_merged[col][index] = t","97159c2d":"convertToMinutes('Game Length')\nconvertToMinutes('Time to complete all tasks')","f6357e5e":"df_merged['Game Length'] = df_merged['Game Length'].astype(float)\ndf_merged.head() ","61fdc7ae":"df_m= df_merged.groupby(['Game Date','User ID'], as_index=False)['Game Length'].mean()\ndf_m['User ID'] = df_m['User ID'].astype(str)\ndf_m['User ID'] = 'User '+ df_m['User ID']\ndf_plot = df_m.pivot(index='Game Date', columns='User ID', values='Game Length')","719cb559":"bcr.bar_chart_race(df=df_plot,\n                   orientation='h',\n                   sort='desc',\n                   n_bars=10,\n                   label_bars=True,\n                   steps_per_period=10,\n                   period_length=800,\n                   figsize=(4, 6),\n                   cmap='dark12',\n                   title='Average game length of users over time',\n                   bar_label_size=7,\n                   tick_label_size=7,\n                   fig=None\n                  )","c2fe3aed":"win=[]\nloss=[]\nfor i in range(0,len(li)):\n    x = li[i]['Outcome'].value_counts()\n    win.append(x[0])\n    loss.append(x[1])","e7ec61b3":"dfo = pd.DataFrame(list(zip(win, loss)), columns = ['Win', 'Loss'])\ndfo['User'] = (dfo.index+1).astype(str)\ndfo['User'] = 'User '+ dfo['User']","697b3a52":"fig = go.Figure()\nfor col in dfo.columns[0:1]:\n    fig.add_trace(go.Bar(x=dfo[col],\n                         y=dfo['User'],\n                         orientation='h',\n                         name=col,\n                         marker = dict(color = 'rgba(152, 190, 231, 1)',\n                             line=dict(color=custom_colors[2],width=1)),\n                         hovertemplate = \"%{y}: %{x}\"))\nfor col in dfo.columns[1:2]:\n    fig.add_trace(go.Bar(x=-dfo[col].values,\n                         y =dfo['User'],\n                         orientation='h',\n                         name= col,\n                         customdata=dfo[col],\n                         marker = dict(color = 'rgba(239, 77, 77, 0.5)',\n                              line=dict(color=custom_colors[8],width=1)),\n                         hovertemplate=\"%{y}: %{customdata}\"))    \n    \nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.imgur.com\/Y27mTUq.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.7, y=1.05,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"right\", yanchor=\"bottom\"\n    )\n)\n    \nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.imgur.com\/z7Me2CG.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.3, y=1.05,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"right\", yanchor=\"bottom\"\n    )\n)\nfig.add_layout_image(dict(\n   source= \"https:\/\/i.imgur.com\/PomunFA.png\",\n   xref= \"x\",\n   yref= \"y\",\n   x= -20,\n   y= 5,\n   sizex= 50,\n   sizey= 60,\n   sizing= \"contain\",\n   opacity= 0.8,\n   visible = True,\n   layer= \"above\")\n)\n\nfig.update_layout(barmode='relative', \n                  height=700, \n                  width=1000, \n                  yaxis_autorange='reversed',\n                  bargap=0.01,\n                  legend_orientation ='h',\n                  legend_x=-0.05, legend_y=1.1,\n                  title=\"Game Outcome\",\n                  title_x=0.39,\n                  legend=dict(\n                    yanchor=\"top\",\n                    y=0.99,\n                    xanchor=\"left\",\n                    x=1),\n                  template=\"plotly_white\",paper_bgcolor='#F8F8F8'\n                 )\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","cc127e3b":"df_crewmate = df_merged[df_merged['Team'] == 'Crewmate']\ndf_imposter = df_merged[df_merged['Team'] == 'Imposter']\n\nvalue_counts = df_crewmate.groupby('User ID')['Ejected'].value_counts()\ndfc = pd.DataFrame(value_counts.unstack(level=-1))\ndfc = dfc.fillna(0)\ndfc['User ID'] = dfc.reset_index().index+1","5ef5c6bd":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=dfc['User ID'],\n    y=dfc['Yes'],\n    marker=dict(color=custom_colors[9], size=12),\n    mode=\"markers+lines\",\n    connectgaps= True,\n    name=\"Yes\",\n))\n\nfig.add_trace(go.Scatter(\n    x=dfc['User ID'],\n    y=dfc['No'],\n    marker=dict(color=custom_colors[4], size=12),\n    mode=\"markers+lines\",\n    connectgaps= True,\n    name=\"No\",\n))\n\nfig.add_layout_image(dict(\n   source= \"https:\/\/i.imgur.com\/BtZqOvN.png\",\n   xref= \"x\",\n   yref= \"y\",\n   x= 8,\n   y= 80,\n   sizex= 60,\n   sizey= 60,\n   sizing= \"contain\",\n   opacity= 0.5,\n   visible = True,\n   layer= \"below\")\n)\n\nfig.update_layout(title=\"Crewmates and whether they were eliminated from the game\",\n                  yaxis_title=\"Count\",\n                 xaxis=dict(\n                    title='User ID',\n                    tickmode='linear'),\n                 template=\"plotly_white\",height=700,width=1000)\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","ca0fed40":"tc,ti = df_merged['Team'].value_counts()\ncw,cl = df_crewmate['Outcome'].value_counts()\niw,il = df_imposter['Outcome'].value_counts()","6be842e6":"node_color = [\"#4d194d\", \"#abc4ff\", \"#deaaff\", \"#c8e7ff\",\"#E08DAC\"]\n\nlink_color = [\"#bde0fe\",\"#cdb4db\", \"#ccdbfd\", \"#e2eafc\", \"#f3c4fb\",\"#ffcbf2\"]\n\nfig = go.Figure(\n            go.Sankey(\n                    node = {\n                    \"label\": ['Total Games','Crewmate', 'Imposter','Won','Lost'],\n                    \"color\" : node_color\n                    },\n                    link = dict(\n                        source = [0, 0, 1, 1, 2, 2],\n                        target = [1, 2, 3, 4, 3, 4],\n                        value = [tc, ti, cw, cl, iw,il],\n                        color = link_color)\n                    )\n                )\nfig.update_layout(title=\"Combined Game Stats\",\n                   paper_bgcolor='#FCFCFC',\n                   height=700,\n                   template=\"plotly_white\")\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","2abb2c14":"fig = px.sunburst(df_merged, path=['User ID','Team', 'Outcome'],color_discrete_sequence=custom_colors) \nfig","15c566d4":"![](https:\/\/media1.tenor.com\/images\/958277b6110090263b3b2190cc04ad9c\/tenor.gif?itemid=19354055)","63c4e753":"<div>  \n<h3><center style=\"background-color:#8394bf; color:white;\"><strong>Merging all the files<\/strong><\/center><\/h3>\n<\/div>","5110ba0a":"<div>\n <img src=\"https:\/\/i.imgur.com\/6MgzTEM.gif\">\n\n<br>\nAmong Us, a 2018 game, gained a lot of popularity during the summer of 2020. \nThis dataset contains game stats of different users. \n<br>\n <br>\n<\/div>\n\n> \ud83d\udcd6 **Dataset columns description**:\n* `Game Completed Date` : Game completion date\n* `Team` : Team of the player\n* `Outcome` : Result of the game\n* `Task completed` : Number of tasks completed by a crewmate\n* `All taks completed` : Whether all the tasks were completed by the crewmates during the game\n* `Murdered` : Whether a crewmate was murdered or not\n* `Imposter Kills` : Number of crewmates killed by imposters\n* `Game length` : Duration of the game\n* `Ejected` : Whether a player was removed during the game\n* `Sabotages fixed` : Number of sabotages fixed by by the crewmates\n* `Time to complete all tasks` : Time taken by crewmates to complete all the tasks\n* `Rank Change` : After playing 3 games, players are assigned a competitive rank that is affected by every game played\n* `Region\/Game Code` : Server Region and game code of a match","d3ba88d8":"\ud83d\udea7 Work in progress","239ad4c3":"<div>\n    <h1><center style=\"background-color:#8394bf; color:white;\">EDA<\/center><\/h1>\n<\/div>","3cea5e6d":"<div>  \n<h3><center style=\"background-color:#8394bf; color:white;\"><strong>Custom color palette\ud83c\udfa8<\/strong><\/center><\/h3>\n<\/div>","e51c6df1":"Used a new library called bar chart race for this viz\ud83c\udfa8\n\n[Documentation](https:\/\/github.com\/dexplo\/bar_chart_race)","89f6ff4d":"<div>\n    <h1><center style=\"background-color:#8394bf; color:white;\">Among Us<\/center><\/h1>\n<\/div>","ff9887b0":"<div>  \n<h3><center style=\"background-color:#8394bf; color:white;\"><strong>Importing Libraries \ud83d\udcda<\/strong><\/center><\/h3>\n<\/div>","77d9fa74":"<div>  \n<h3><center style=\"background-color:#8394bf; color:white;\"><strong>Modifying existing dataset columns<\/strong><\/center><\/h3>\n<\/div>","894a6c7a":"> \ud83d\udccc Note: Since there is just one time zone in our dataset, we can safely drop this value."}}