{"cell_type":{"6ea7b9c9":"code","97cc4c92":"code","591d34d8":"code","64ab005b":"code","4817bb4f":"code","6f443098":"code","0e1775df":"code","d5c9d11f":"code","e5f58925":"code","4d1ed097":"code","7887fb75":"code","e136d996":"code","9feddf40":"code","5e4e5ebe":"code","ae1103da":"markdown","5476dc4a":"markdown","f8a033c7":"markdown","c262b53f":"markdown","a2430c30":"markdown","d2760c53":"markdown","d5d7ccf3":"markdown","00ba6993":"markdown","de8d3ca3":"markdown","eefdb99f":"markdown","a2ff777c":"markdown"},"source":{"6ea7b9c9":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQl4Yq4DqTmBPdA07AtrQ6r1r43FOiryUHdPziakTTpDIUmXqPn',width=400,height=400)","97cc4c92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","591d34d8":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQ9uUbVfIIl2Q3fcSuNg0B_YM9Jj57KkXDEj68__leCB7_Kx3Kr',width=400,height=400)","64ab005b":"import json\nfile_path = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/comm_use_subset\/comm_use_subset\/129341a52b43ccd59368d094950322d983ebe223.json'\nwith open(file_path) as json_file:\n     json_file = json.load(json_file)\njson_file","4817bb4f":"import numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\ndef plotWordFrequency(input):\n    f = open(json_file,'r')\n    words = [x for y in [l.split() for l in f.readlines()] for x in y]\n    data = sorted([(w, words.count(w)) for w in set(words)], key = lambda x:x[1], reverse=True)[:40] \n    most_words = [x[0] for x in data]\n    times_used = [int(x[1]) for x in data]\n    plt.figure(figsize=(20,10))\n    plt.bar(x=sorted(most_words), height=times_used, color = 'grey', edgecolor = 'black',  width=.5)\n    plt.xticks(rotation=45, fontsize=18)\n    plt.yticks(rotation=0, fontsize=18)\n    plt.xlabel('Most Common Words:', fontsize=18)\n    plt.ylabel('Number of Occurences:', fontsize=18)\n    plt.title('Most Commonly Used Words: %s' % (json_file), fontsize=24)\n    plt.show()","6f443098":"json_file = '..\/input\/CORD-19-research-challenge\/2020-03-13\/comm_use_subset\/comm_use_subset\/129341a52b43ccd59368d094950322d983ebe223.json'\nplotWordFrequency(json_file)","0e1775df":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAASEAAACuCAMAAABOUkuQAAAAjVBMVEX\/\/\/\/+\/v4AAACHh4dxcXH6+vpubm7z8\/Onp6f39\/f7+\/upqanr6+vv7+9JSUng4ODR0dEhISGAgICwsLDX19fMzMze3t62trZoaGhPT0+VlZXm5uaCgoLAwMBSUlJlZWVcXFw1NTWfn5+YmJg7OzstLS1ERESPj48nJye8vLwwMDAaGho4ODgLCwsUFBRMlHYfAAAT\/0lEQVR4nO1dCXeyvBKehH2n7IgsohWxffv\/f96dgIC2VupCy3ePzykVcUzikMyWSQA4BSGE\/WNncDjBM9Jef6JlkCoBUS0JQLEU9s9orhJ4sqgBIdKiAqjEzIJcLEDKncL660bNCdhbtKwCTwSfSxcgu4sQfAesUpbL4K8bNw\/geEorSDmw8nWNbOI90GOwN69vVP7rts0DyKEaObSEICpDZBZyKCnwer6l2l+3bRZgGqvmQM+ShZYUeuSlvFQx1tT825NDDdgoKwH8aK2AG8mgalEpoBrLNs8+1KA1e4jav28vAtjOy1MONWhsQ9KZigfLEV+3H88+dBmJvXly6CJM+uxDl+GnqyeHLkL3N09JfRFvz1E2ivjZhy5CMbZPDl2E+bSpR2DLr88+dBnkKYfGYD45dBFV8e8phy5i4TzjQ2N4yqERKE85dBEEhCeHLoI8ddkYluJTl13GWvx4cmgET102gqekHsOTQ2N4cugYR5lCfWLVk0PHaPPQ2pnFw\/85c8jNpV9OACN9lt5wgcyVQwQ8Ste\/nyCnhDxaiTEPimOKRtOSmXIIQIqpDfC7fQhgsXFY7hnna2vQFqC7YTjfKKyRAIFJM1E\/j2H23nagCsFvMqwyCCmd+3zZdBzqMj3IqQLzBw7pGV6JsrlyiN1Pw5uwB3XJMJ80vM9GGelGGYEyn6nniloWSEbdCeUQ+fTa3pVUBHBMJqlj0UCWzbYPkXWkJ5TyU8ohmW72tEiPKiVwOuxY6l70MU9JHTBd7\/LJlLrMDQWVt4vLRMVqpn1IKd69aWsgwGENopVdJgtmm4Mm6JObQoYpFnK6vkzEz3benkxtLHpyYCQ6CCO1aOuZ5sJOv2xJ8GRnbf3gPmTz5NDvwNAcZYRkM1+b2jCpP6VNjbpsG0UbZ2SJ1IwzPYMP1PdTeh2QVkmS1\/kI1Wwj+USoMmtaYb1Ebc+PafvKmelsUCenp2SRV8jVMnUuE5XFTOVQt75iUrfMCn1FGhPVM56V9kNCJozCEpAS3VgkY1SzlUOQsOWTkxpFWpHnhTRC5M41w4q4\/D8W+5gyQMT+acZIL32dqz2UUCrWwpSCmoDthrXpjzrIMx1lOqU1sEWDE\/LIl2U5lC\/rsvnOBoFlC+zlF6Y6RqqYK4ca194LR1XxHTX8UFPOdb6MNV2gtJoyTs2KNowRqtn6Zc188I6OhLfux7YakdTxLHVZt79NkEpTWowJm7QckUOztBjJ8UzWhJK64iAw07Ea5qjLGGtU5bAAfjqT0RPxnxKPWYxz5BDjkRNPPmkfMp8GxJGtc+aZP9RkxiyaEab4kzEpyNlGVduvfYh0u3uRxl6dBYf6zC\/oBE\/xzjJjQI0Yp7ocjQdH9xerpfMRfhF15FOqwzw4dGy6NWcquty1o6h7Gk1XrR4yXfmZ6ey9bqFn6AatVTYLDgFIa99IfFvXDUNvYPg40qQ68tl7dviJnqQPn4c92ytrU4OgCEWfvVFnwiGO0mhL\/xXF\/r0QozyKonz1kUWiKOLbAq9t6C7a0NVIwOvKWr+5HIoucDXYPKi6kWznYTHKlEJJaVJTasOaZ61PmAgCP7eQfTzw9BVf\/z2OQyyvIwzdrxE0\/KDUIA\/AMKH+sxy0U03O3tkGqGkA1qtphJTKsOAD19MU6Z1miklfVEPGEfZllN1hMRGoRVkuv\/hlpOWQ44MXgWLlf7TOlXzWGP1\/Q4LEfAsSSrlyhZqs+leCvfRbujPl3GF2O8lQ7UnTYK2BX1h8yIj+aocm9exVAW8eeAFa1Oi11vKOcqhXGtpvI+43638CfnxulDWpej7b3itl59zyT+LU2Ijlx0uPXXfyj9LdC6Uvu9XmBc\/+0f3m9XVHd7vmgy942+r3mEie67raOTnUdcxmwP1RHiPeQFn7AnfxtpPXqOUrSnO3jFz5jW7cD5q5Is2+kmtaqNzeh+wwXXKcMxYf4mY2o+ihqVanaFNvAuD2FmxQi6WiDVL98D1aJd0IEMIImVvuZmAPnaDrE41vJvnDUosHe2h2gUZXVOgjZOG8dqzsYsdNAGS5Cw7XJpmeVpLGdj+vMgaI5rxGWRs5a\/kkaYcIUbtJ9OOdfC9EjMy5zi\/GSAY\/VnIPyYxTxRp9WV5sxmal+blmC6PFVGZMz0w8YTaWggZy9TJXDnn\/mvVlE0bym1lp\/fLwnd8o60BA39B02i7ka642mgybuvuZcoiAtZg0xQoLltFiHEtsz2Y5X9ZCYi2bkkPryvNsZWSqY8ajzIipP20dpX2o6mI7ZhFjPAu0qUuw+QcGFT+jfnEc3hjppEm4mieHCFHLrS7s6OV057uQBF7gSyMcmnFOPrMYhaKZDZoEKOFc1x3to1Iym11PhykhPPP8VpcZwVEG0aOXC2lV5uYjmYCzlUOUpsIZSf1IBhFYWqXBjeb9z2K+rIHBHYHSwsGjOr7GLR+6Lhg7au46xehCv5n2IY0ToDwjIx7KIdkFf3QhrRHMZL7saPqDDGH+kykR8lj7kUBNIz4a60Mv1+kycvIyJVDbVy8T2kKN52chhBGuS9Z1++QT6LblmRzNevLJc\/LHca0cIr\/FITUopvU6CNuRYHWyI8FZsmt3PT0E1ifnkEFZ7GPae\/GTHQmuzh9ihuhoWO4RSFoBOem9YDsSROfXKHbbylydYYVfUP5R5yCPJu1Ict7uIDVhFUbMf7sjQTvvSq7P0mMPYzqkgU\/LoaZsT54wn1qxEi\/1rfOeK\/txRpOPezWHsP+nAhj+HdPBP6sIi5fepvNbAexc5HlePD+jSFSSbLzmeWbX6zIm3gvKT63Q8PYplC6nrAIkSUrPW4x4e5wXlscoXftEk1aTGSuaTd2JWFWBe9savG4Se8iuPZtn5GXbPD4\/X8boIxTk9cfq\/fr4EHY9r7J+Q+XfhM53ISfXjmCohw+dZC1w53PykQRy5JBeOzfkoHWsmekDl7FZWhPT8B1nuTYcx+mYcGjvYasPtmdDmUbfmS4Nh\/Ab4u62GOO0Sy7uAoFq4W1RABu2V1WBk3jIEcmHJAAjDGwSlKS2baanFDvIy\/OZDawXcAHj9pq\/Yc8GOQrgV9zX2yDFKsgya58QKWHOM0FrFaBpUGiLmKwTblFudJb3Anasf\/NDegmWU1po4C3XkDhrJeEqyVg4iVAtPVjj4ToppEsXjxI8pxQCjpMMjtJ4wSVQLj0iL1NwlzWEePiODAFXsVCYJDmVri6WllA6AWhLvyGykcA\/VKUvK0lZO4awQIISCRhRjVX5DVHJ2iLo1dJQOE6HBbZFcxhR2BBhewSPw5I4TlGRQMIGq6XjwQIHjf7ePLwWf94C60x1vkYTJQLXDdDUNSVHKgAKHZmG3Uc3x9fbv+45kOMIfDM37LiwksIM9MJMlTxOBQdtgYW5hHXMQ7rllTrLdNQAdFHEnhLFqcKbJXDmAo8SXNMhYVygisj0YFtYem7aUm6mwMcaVEiEBFDGIlYVSbZZJFiVZRSmD6KpEcd0gYsrkE0eCXnJzwolom+JHmdI1LTFxZIqbE8FJRLUcQ5+HBtJnAVJEdfYlpSg\/iFKJsHCxR+nb4D4KoTVgUMWcii2NSPHnqFD3awNysdcKEds9tJT1PYQBDxw2KoKe2XLvFQ8mGmCwl0RDgSG13zYEpIDATmUciBSjkoaSjiUoqikIyBdCc0htO1ghIkt6JSKrDRyaMtQVVuKQIbquraQxnPUClX2IESOyI4WJ8ihLHWWiVhWxRo7WsVGmd0sIzfHYlA6W+faP+Z+yNVpXRL1EOkY7ItBxavdcO3+yNHgJUNJ\/Zs+3a5bf3iUW3aUeXYoQtqhb1\/QZgmh2qZdYXP6DKyjxh7XC+0v8UODxVeDRqOFLNAalKmUGl5qZ75AgtQu0Onji9A1R7cvXr2iLuvYQHpeHTW7Dwkd86FfP9hniA1tH+JHZCiZHBU7uM1Dhhn0\/9oSwKLtQ9P7b7dfOvoedNdbdqkw0A38g8MPqRv3pXAiFnKqRL7EFyF1qvHlaw99SuCF2r589D3t4ZO0Uj5f+nlDCDk+mABoBLJiNV4YSRJyQnsJ8lyfaNKP0eu\/edQ9+xF98nlb\/tDPL6JaznQPK\/YTx9JUv\/0mHAu4E06frIQk4z2IYa7ZMbev+WGTGI3HK7FBZVjH8Q3WZWSpk12DHPseynzm7U9xu0+D6qvgeTwxCidPk9gpTpdDK9dFVPYsHNzpFjLwFU70lqoOuqhXJ0CO9Ex\/P\/ps6EEVDpqvPz8yMAbaQfcMbFKHGo4rOXrtjYa+QwiZwVYYgp9CwIcByvzW65DRbHUKNbTrrROPpeL3MLyN9lUqfr59PYG7kE5\/wjevX4r8ck4+EZ7pMVLy+QsETr99RkOy6OkGvY6KvZE3NhrFG4NAkqNNredqYirodUhG9mMOAclEHyytBl2rBUlzJSV0JTXUEkjlBHy0TD3ZxyMFo0zRSFmqQugKELqGtyx14ssB2A2RBwkSYimguKGiuK6i1rJBUq0thRFZMqsKS9JCVUIirEYitcuqssAvg6YqS0M3XE6xLSatQyyFLQGrm1Ksvj2WnKq6XGNJSOC6khDKOmENTpkfv8VbuWYRRNXlFUFZlAevw+OYDb3Q0euIfswhyYvfeKhWMbj7WE\/ft4G1ffWS932omKtQifZrcFYiLFcFEhTJK90yx9VYUOpllIZSsVqAiJ4dv69gvY9UbbUBe7VKvN02SOK9r5v7EIpVCfyKI+U+R6IM6tfMSF9Ny8OqjO1rCtm+FKK9jEQOVEhU7gsjRQEQb3dBsl8FyXaFfuJrCTkSOHhwq0LSViakq70R7FdesF25UrEPyYYZ4Y6rZ4kl+Y5UVtraQE8XkkLhZD220sL1IbI988ccyna0xK7JNiXsDkUih0MFQRKIgBfZQSQBFYMivVFRX9GtUtFC6oiaQ22IDiVISlMKYefCgYgRqG015FAV9FW1JbXVqBJztbTcGEpSm1KUpqquPXgwf0xhpXWlNDMAnFhD5YOcVxLhImY\/J\/wy5ZNUXBelAR5f\/VwOef77F1124vYMV\/GHcWzhZ0RD4NmMkEtfO6n0SUjcGVsjLNNZ6c8fgbRxM0SrZopsafs\/zo4kV+1hVeH4gtZnZQ13Kb0QOrjrp3ls96p7Czlui8W2KQYUnexF59ZjUaEjfJ0vQ0fY9m3Pxn\/t4fns8H0POVSmaYpnHntxaN584DE6rzm8A61+VzfCAbN5Q4Fu4Ulwo2F9WiAZbPSrDa2v82VCSe\/G++jGRyM\/yLBAyqiPw\/kxBm3vx7K5wuuY9DX3Y30\/gxB3JEcd5Bh79hR5ocXtBR0XCdCbsnDV6D3zNArBFu9FxN2fPUaUtZiAJk68cmEU\/nr3iUMPmuO5u5TPXvkfgZzbfflubQ0nXtaNRRwFEP8SZ3M\/HtCsL2Grm8r4o1nLT1WezY65t1mPmdL\/bLP+EtQ+Kt\/2lfnk5M8F\/aTKQd48OXQO\/byM+uxDX2EVJluBTKSiyf14cugLeF+I0f2UctpyCMyZznXciruF+8aAotlnkOWgeQ63fMu4q1GNkzwCt1Rz\/5bfBw61OWhezt+CmIo3fe9KrN6u\/454RVjjG7BRJrHIXO5d78UdUG\/vb8cPwBU3fOl+E7OR1BXKnsy72Xj+FQ6RGzhEHuEPPALh++9wKJ6+lomQfJMe+VAQCNzpa5kGvxKWmMlwuQ3k\/vDITyr5L\/PoVxr\/mPjAdBgS6Y5iWUc5Cd176BL0+guP6F9DDsRxcHlmOMo1bM+bi11Yq09iOkrAOEr1uLfuz0XMkENeBaDzfZomeCVJwGE6fsh+G6ZYlKS\/1fy1cy3nQNiKgSCLihDcLI\/SGTIIbBE5tB3e+1UiQtH4PCp8scW94QFX5tgmoj9B4zXakZGYybrUreyuybeJYOeGbm8hzLaeysdFYnMVTUUnXhQp8CmAwpuRUJmZ52f51og+vDgP0zj2IZaqLBrbjHYUBESPJYTnyTrE2zPyPNE\/gb2L8mKvFkYiJpq+KD3Wh3KfZC5H2JMHtTX+ccSKUpGEa+xDW98o9CQXMi820nvXUmOPQQ7txDxWGIeC7fhXfh02z1YSB69RtE3EipeRQzwbZbmV+xww\/xegRJO3cBc4AgMHCsOK8K2eqaHI\/zy\/6yxI24dExVivy5B16If8pseCyaHElLAPuelSWa7tKskBO0+hVB9sEYC7NCJZ1FPerxiH8DOdFLYvQqaVxBnZBWEUnRzSK61s5dD8cNBlqchbAueEjl2C6C8lcBTPZLdYLXMN6sjRbRlsWYqCpQEB7yTAG4tIu1Naswq4wMvyolQbXfaY3zQFzmVflt+5kw9VN\/PTXT+GPeEC+P8X\/Jcdyt\/Af9rj\/hU0qwD\/uhFzBfkUszlZT\/Awrg1rG7qwwqcP5gvSLiLtG61Ct\/XBsPzwAbX0Tl8fTWme4R6iFapM+yDu+3FoHRn81kRnzwVhFrStPKbtjEFJUNuDd+xnMePSPwvcfTRzMwD7kGFYnTVIiBBufPAjLZMkl47u+\/jTSrC7bMLcB5JYVrM8zI7RgF2LAeghP\/c+hJ6aUyx6Vig1+vKLAH00yX0de+bnjytBDpXsT107jsP28JS2IInANq9kzuLMOSTFoKCf7W+zrNnqwGF5qnKBrY7vSzE\/QSg3DxL165qNNsYhP87e3lXGoVkziPWhDKSMrScKPI8pffTwE755fPi322dcXQl6xSX7I6nraja7LRtQhSYPw4\/mP8pM1o3wXjoOz\/Ze4X01CwMPuxN7StZjchdRUlvsr3tLhJSxxZawen\/efYjFo0v2R\/r3oSUtUFrgzymlB93efgXiMEnQpVb3\/+YOctr67upjvZHDVEo3E3T8+sRv4X84Diw+B73WVQAAAABJRU5ErkJggg==',width=400,height=400)","d5c9d11f":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAVgAAACSCAMAAAA3tiIUAAAAh1BMVEX\/\/\/\/t7e3p6enIyMjm5ub7+\/sAAADu7u7y8vL4+Pjb29vCwsLh4eH19fXR0dHNzc28vLyfn5+4uLiqqqqxsbGoqKhra2uZmZl0dHR8fHyVlZWJiYmKiopwcHBJSUmBgYFXV1dlZWVQUFBcXFxDQ0M+Pj4xMTE5OTkpKSkgICAXFxcODg4iIiKWSrOaAAAW6ElEQVR4nO1dCXujOq8Wi4nxxr5mISRdZr5z\/v\/vuzJJO52pDQWa08x9qmcmoTFg8VqWJVk24H3TTQjcb7oJwTd90zd90zd9kybH\/2oO\/p\/SY\/DVHPw\/pcNfC2zx+L9efTUTdjoE+dMp+mouFlAUHKvgf1\/NhZ0OwY8yCJyvZmM+qcxnD3fc3bQq8ILdV7Mxn9znf55+3jmwIth\/NRvz6Ri4UC4GNm\/bNv\/jN\/6pPrMGlgfJZ9yKt21F3\/\/q\/3nwOXQOqiZYDOzJYwz5kfr45aPRQyHRf5EQP0L8IPpILqrhMfi3D4Jl1\/5BZSTiExAI3zIMuxd2fRlKqcvIZ1QGsj4kWbe0sY4b\/dkdjg50DyVxz6eT3DLsvA+HDsThIQbv4SGD47l1Tod2SQ3JNj+WbCF7v9NeAnmAGnk5HrYg+8MewvNJm0Tu8VDCjnWnh2eoDg\/iU6pbRefT+STTCqKO1ZD7PAr36Q5h6HLwoVSQkAOFA30WcBSw\/WKrqTmdnws4C8CG2kZtDHlWpXBAdpMK2dWiu2eqQZi\/lk9NRy3q7eF43OUZHqlD2Q\/AuueghSP+QkuALTtJeDoej97XMrvfQHggvYQHzcv+dDzmtQMt4kn3QUcQWBwv0ufjsflaPjUNwCaIqRdtgYm9QFnVwHIIG6\/3IaUnFGsXgX0gIL64i+1x5CppKeHsgPAbBlRhJ9KqwHPIlreM7\/QIB5B+SnUMSY+VJCaeUBGoyPec+P3oaaTDgNWpPHhwLg80PdVlu9WcPjVnqh76FrLTcQuPFNRTfVwzBAlk82JuIKPcjxQoJbjDP8iopn1f9zWcJbDn+iT95+bBDZ\/3z8gue26Om10U1HVNyv7wp52zjA676qnDTkpyIZIodlKViHbDP3axHw5fDD0jwvBY+OA6+jeX4djqaNh9\/PDxj826EajeZz+2g9UVppGfRdyJeCoS54OMwsATu\/JCNXeSYUNLQXVzb5B5R+rGw4f5HLMrfEKJw5EHO4FgCKyfqoJVvhf6TPiT5F6\/3OsxHgzH119ePl7\/+Ci9N4UfCerqw3DoKZF73PfilBW+R3z20Zu6v\/Py6+PK5PWEOYyOaLcCbaFEt7tP1IYxjwlHSS\/EVv2UhltE5D2w3qGseTUcuiSiqAaYcJWM0Cz9QkbBKt20iixaKhSfYygvoXfAkoo7NnbIV46JdrUhVb4zOozEvyNgUYOnbWsZ\/O4TWGCKeaZieU8Sq9lUkbnP36nEwkOSPW1Nlpt7V8CWXfzUmqOHXzkrZq+bPGurwOBryC8UBAOw6Bo3V6vgz5PvVGLT0zErTF78fUmsOvRbnhnPvk+JhVApo+66M3MLPUIVGk++T3ML+1gWm124+5LYso1zi2F4pxJ7lMQsCXdlbkEpLGzeLbD7silNv8v7UgW7vinNcz73qgqsdF+qYITuVGKt9A3surpFkf0FLi1skM2\/avAiT8wc+7ozYE+eb\/Gx79VBOCph1v73pQrqVDCLWXCfEgtJlZjnpe8L2BzZ3JjPvktgaV4kfwGwJM+SvwtY4uiJCFPJXQW6YWDz79KxNrqzwWuE7lJi4ZpYZaB7UgVgZ\/NugW3qbWcsuCWwZDyT2ABs0u8ay0U3BXai74zYsQ\/WW44Cy45rVFsznj9osmNt8joFrH9cE0vIg\/GrR+o+9V1tLBgHlgdrUty4uZO8kAHY5rStF0msCmbkdLwj1oyn74wFui8ZRu9pQhV8SsqqhQzAhkJZrK0pVXBLRsfq7trqJWwoEGQQjCrikdvq2C4YvbkB2KzOjq\/aQBAmgInNhdFb6tg0GNd49rp1itHLHF0qeE5zr1AJ8\/Dhbghsfh4tNgD7rNNBXy\/345jyOFWZZvSWwKoHWz+50Ejd2b55mVVmTHEnVonfUh66d+UgQHTe\/VrhwUTEHcVzkVBO3Lt0EIjrKvVS6lOO5LHUySgqtf+INyNXf\/7iukz9amlfxop7EYvdTN6p50XzpKre5kG8Mn9XnhfJM2TzN6vgF3d3CSzxeqWOxpJ7AhZY6anaguB9el5RryIjw\/cVhBG9Z0ndulNVgOPebvffu7QTZBi8\/N3XuLQTNGJunfbmlKib5m7JcTAMwB53Xm8GdmqUvalAj03NJJk5XHBLid0HdtcfzFMzyba26ILxRvKCz1mrMbvuaFMZ118t07HU3bng8NgBpxX2FS2qGr2LKT9W5BaAJnQs3VkjacSvHaBegswm3ozlN29oJLp1tOC3zCpwm0MOqu8VZIdu8WplU4qR\/REW9\/WweyxAlCcP+HHk\/mM0Fo8t6yXRLQuxbb+DtKlTaMtmcbzOAGzb1\/vPHrxo029BNX0ORV0u22XEXjfNAIwJG0sHL50crpdLQbxcRxvWIGQEUnMPWGNu6YRbX2tCb2HvsjsIyc+kKoxFsyU2pJqk\/i+vBxd6fyM6DsZ7YNOfbVV9Wl5B+MJZ+MqsNHM6lXE3triD89hYMBtY6TpGct8DUs6eQfCRTcs184GlH+a0CMZVxMjg9ciVcS7gpi6tGF8HbAD2nKvIIrG3NFQ3+TgKI416dqXR0ripS+uNbwphsmOVmc0bu7RiO26GjVkFzaI5r3XUzHYQWmTTMsDc0qVdMZkoM\/4FSXHjE1GmvII8ts1e3jRWMOE3jLq07dFYcF9BmLoobTvX3GcQhhzy9mQquKmOFWZD5IVMg1e6b8zKdELHhvktp2lHGtUvzVsbTlkFq3bX2s82t2RztjXGOLDrgjByYh+bMWAlNZtq46ogD9ZsnVPPBhZdClvixbgqiII1W7wUE3kpY4uUJTwaC6aAXZNgMl9iewbloqmZzc81OjiZkJ8xOzbmR2PBxOC1amvUera51WSRJdB9m3hsGGlSbZCq4WiB1+dZ2uQmVoGbauJ9MHynsRlf41pabhPy26iCIXgg\/fIaRZhfd9KbVybe1Nyq\/hktNgAbn20rE6fMrdG+MUXx4hQjvV\/B7z9QcIYh\/5bAWmaDXnl4D+HDO3xkeGX0lnZs9DSeyTuWxtklv+ZJ0giyOI\/TWN3YQRgfEkw6tv9tcUcWEdQocawZvamDYN4i4ZXGVia+3a8gZCFXibsLeWhbr\/Zy5rp96sZNClPYkKm367wcJZWX+5XkZGzvK32vdJWALAe2qJtfoSbJVO7FsZeLKc8rC8adpwmaDazX797GihymkM04SsWU58VXOQg8mMgXt5a8TeME7W+hspdD6GHKjl0F7GxV8EygexssIrrdL4yOP3qYrnFpk+UOwq5NjDtgT2xdsi5VfvfP7MTjJj9\/wdYlK8KGoMym\/oQqSFZ5ivPjscBsEwgTqoA9rZGAFZ5X67tmO3Y8CLNOx\/bBaKK0aS1tDP2iOa944c7pG00UgaXDkeWsETv2B5hjBRM7xaULgzCXydEycC9TuhamDLtxumBJMZqS2GWMslS\/rC9KnuLhrX2xxYMfyzYsS\/MQPS6xxTJVwAfyzsHlILWEWA3m1r60WT7jEpsuk1glhoaPDs4gAb5FnyywoSd07MLBiw+eN2mCy7y+ZauEWWtpJyRW2jbmGCfFNo7jyCKIKH5vxOcBOxXoXvb6F67ZdLQq0Hw77BOAvc309xVYrWOXAauSDSzZ0IwsCxtegT0GQvO9+TCwfsKAL8vdWmaNXYFtA74M2M2D34dHU8nE4LUw0H0BVlb\/hM4cYMmBdWJnPnki8XhhPPYC7Ebs6GYRsM6jfneHsWhcYt3zItV1ldjTTIkljxuol80gLFxLewGWooOwUBV4MThL4rHpGomlxUnOklgQBZBm0fT3KomVWaD+48FroYNwAdaR4MwDdozGVcEqiZXV0sFLlvuy7E0lE+aWN5GGZ6ELsJuNT+cB25RleV6WH7vMaLiqgnSxKlBW83ki0L2M3+vgVQbOPKvA3drvOTXntahrXYFVtbts8BoSL8wITunYRZ7iwsFrPDNivMZgIlZtplc7drmDwLZH4+\/jwK7SsTKZaW4hieq0aDIxDswJ6xN0AdaR7kVnzQe2qBvLmx5vEuh+9bxmqoJ4b2l+mI4VjC99stAVWMoWAhvudjtzxROB7lUSO9\/zSrrEOMTCZKB7nSpYbBXo9d+LliOt87y2wUw7Fp902y\/a5nQVsJTtlg5eNM498wB\/S2Cbf2aqAsJzvmw3zoWB7hcdSxaqAnnwWLzEpV2lCqiqZg5efcq806JNI1d5XjT9d6Ed6+qUlP8w2\/B3HfvhsGH4jGpgvyhWsEpiaXwdDBbECpquM1uktwE2lEhQBht9EH440M26rrNJnu3hYk18FzQ6YyZO57n1r0GYpbECmie\/T7xLoM6w49LEFnz\/LErpjgtN+XOQZPqg+ujUDImT\/I8fwzD0B\/\/vhnbsiljBQQnvtwy1TOQ4ULhTwC6NFQxTM3AMfDlraubIhTr9HujmEeepN5m7tc4qWBw2dB5CIn\/TsY6KoowxaUuJIvq1oEwUQT4csHl5Ji+DVzsMXh\/WseTRJeSPeKyMuKhkTPxxO3ZhfuyLudU4S3Vs1\/z+hmPHTz0PtYMtunUFNgkysRhY2QWbeeaW2DZ\/vnRMsihWuT8V3Vo1eK2Y8zITuSZH2WmdHbuf69KaaXhB+kScbVV0a4WO3e66zvhK5lvOeYXnwJ8HbKvZNE8mktu4tEKbL6QI1GDHuLMlNm7xUc3X3C4II5N\/ZzoIrMELLQzdZPCKqgwp3wWF\/s4SS5B0LPHY8vvEDMLSTJgLsPVsVWAXS5uODfPBjt0G+8GOjefFj5VAcy7U2YZEHzizU4x85Zj3bpkAlk1k5FroOjXjezODMJKHO4vusQHrsGHrDBaowbIL53m211jBRlwm6eaHDR\/o3jeutLBNJoZDkli0DdpoOBrfX\/VPukpsf8mE+TiwZ5aomatmHHW1RKuhEekiYJ3r52xg\/TM0cDQWWRwE5gkkPwkKXx+weT3sasdGxbzJxPAR2bQkbEwAi+bWCmCp3CycQTjVShlXf9usAsZ0wigaeJnUeaPuEmCRX2fmLG1T0Pcrki4n21TBJ0gs5T+XBmE2DJTZKrBJ7EsaXj5gtBBYupkHbKjA6mFNSWy2AtjlmTB2sujYK7B5kC4HdoFVMELjEovmFr0rYG2DF3sJVHrLgaX5efbUjJ1GJXYjTmoFsItTjOi+bhrjqplxVbAOWEeSeTqWNMjmIqvAoXDR50uBXS6xgs3aCIK9ZIutUAUvNCuvgKl5izuuqsC7DgbLgFXd4kyY\/rH6YfrdNv3NXpRPvGrwmgtsc2r\/Z56ltU1\/v+rYFcA6NFxqbpFDwsxve7BKLL0IwkX5LNOxLJ2rY0952s61YwdG2VVnLQSWLs2Egdw7GKNbVmDVUCE6CEOV\/kxgL5PK83O3ovxczlQFkXPRkrsLNvNiMdGrVbBUFchQzrJjN8lA1am6fM9L8RdJkSRFsT0X+jspzL3bpGM31nCR5eHIlcFTe\/meN5XkaO6Soj1dvpP5Sc9HGprzCr7yPQjv+W0U9H\/VhmZw9Mwubeg768ldeJP3zmudst6SeOxbNi2dQS9sbuZeOLIQg8SWHW\/eE\/WNbo7\/geu1urF3gY90Ds+y4fEbMrQHaAl595NNqbi\/L4QWeo8d+j5897Gca37qxvccfXPqDwgNFoQt6vSWkiMKnXXNnWVzvbfEzvVIUve1EiMj7P37M0qzoHmn5uEtJ+c4BojfB\/SPU4xoIo9eMf5yrbcVp9BDXsaQdnlRe0kHrKylzQx6S33nQrerXbbbM0hKBUXD81J1FfByS2zbQb6hg6on60kQFbIrU8g6kXQJEXstMqKsEyjayCszoE0nYbfdm+0LlBAi8rwUJYeqLKDUe0HzLT4v\/paVHjC8YdjszKuM\/qSm238UWJ72smR7enZ7xh7lA2uiTGatWVB+I5ZsdlpN1l7D6ngnD\/TJjY7uT6f3c7qNt9PAts3JIme\/SAPLPPeBPvq8oz83J9UmCOxJNqyP6Ik1quf5Nk38ZzOwtDwn0BX8LE8upwf\/AmwZnsgz9fbs6B9Vkm+5+aVH74mnH9WxPBfbJuaQqYZgB+shQ6j76gPAbk\/lv9ARqHkedq2AlvXg5XiHnZuUB\/4BYPH0ydW7GlinrB9oCYWCTjw3da4tPDSC96D\/Ek9Nne1caMxNhAZZnmyp2EIf1vWzOwAbR9AKvOG5btRjU3s9dr9pbsHv5cc9kjiD+shK\/+zWIQJ7hiJ+dLfttClLDqEsvCb3ap7JmnfugZ41sEfYqrPfx92Ujg1P4Qfs+8TznSpRPzbYalv\/Bz35Edr14oAdrCfy4HC3jwSPW\/ZkltgucZKso1pmcjzJ7weJ7d0HcgZV05yehFK71DNaUX+Qf\/aPHzjtQixCuxnyOoaMuCkk4DFeF0Oi1zgJrjffi7NuwyJEKKkVXsz0R0qzJvHSqYmz8EGOb4E2kFc3O6fbVk4BkO0ORDQ77IxO1uRQECxNgHao65NdZtldpsVTcomPVoTbrvIzHZ5iaR2BvmGdAsMbkm31ER\/OP0SHiY2r7oHCJ\/Ys5uwUrM7dx4aYW1GYZ3mxbNOU\/5TSAtmcsyyardli55u+6Zu+6Zu+6ZuupM3nVfsEr6rZQiG58YvnP5v4xYjZ\/AqwZ+q3QJHwtT+pwBMgCgYpmsd6LWNOIS6mXdHQMnXjDQ7qq6ktBls6VdakW4FOhOf9au4JExFr\/fNWlyjV669kMnH6wtPbmvBi1+ZmXguUB+gFgc+Bo93tOzHZSB2XlbGz2brAtkR7S5zJeKOBvb6pLYHCc0P0Y3L9xnggQ6WMgx8Tqc8XnOBfG8XIjlHlxpJt\/Q3eBRysy9VPEilwIgGSI07hjuWKQRgjxlJuPBF2vm5mB7gP+siNKR1e4oWeqU7irBnELlYm8W9dM56GzzE8itTLZ4B54Og9MLlAYPXrtDYRHsMGn8xjqX660BHcwz80ElSzjIVUunEYYmX6XIGPHFLEJUmFCvVuDgUb7qgv4l7FIq6TxXz9hjEfWXXwYhoiT4RKvSsuFVHBmCdJ7gn04BLYeAkCRRA6NyFAC5+TrAgphWKQWHQJiUdi4PhACVUpeohaWhHgWIQ+urdeKnN8Erxl3m64yEnCJJ6ZU56FSlW+YnqROQkjvwvzTQX6dU45fqabAh1IYGJHMtkCRwx4BpnbQYW3DRPAy1JXxBk+zY4U2JU4hDJi6GSmG5IKwhnNuRdTDRZ1eetiGUHwYOcKXrkZyX10onMZ5YPwZYQmqcQuF+acy0K\/padgCSR+C1WI\/myNJyUqxlIhWK6vaF2ECGuCmHLB3QoKFBilQzGFjCFlLfKE\/11V6ChOqt87h\/XHiRcmzFcF9UQSYnshwrnefxnLI6495YoN\/b1CYLE3pRpYnlXRAGweDt0DYY5RAvX7TVMeqxyox\/FcliZhHOpAcZFpAcKnIHmOxQLlNnL0pXjsVTq8xhAvJgrgHIHFX3xsQ93x8HDoL0mKDdGi3GoGsCav0Jvr+ZcXPhYc\/8WIfBrHOYplPKgCPhTgFQwL+aAKRIXdLSf4mw9h6lEtGCqtFMqacrE35QlqHKwyIlBEVLiZUEMFXstTkReCO8oROsKhA1fYURGhmOGFsQ+eUkPw13PimIQIReVhf9WqAXsRykIBuZNrT1fP97b6rgOwFA8Q2AoypnyEBgoN7BA7yTY6xlIgUDkKje6IGfZAbEo8uyVpiBCwqNAoKgHcVXg1Q3mrNvpRM2zKQc9qYJUGVvm+1uI0RQ3iARlWFeYbJ84HYPFP7BaeYBpYggBTSH2Zcxje1ONzmetWReY096HDub5CDvwyLS+Ep6h8tDy8AptAi1qi8AvIEHTdfRHIEAqE0Hebi471cgJpyBl3PIdpkdYDRwMpLaBFpjO8d+Gq7P8AFrpM4TCzG8YAAAAASUVORK5CYII=',width=400,height=400)\n","e5f58925":"import pronouncing\nimport markovify\nimport re\nimport random\nimport numpy as np\nimport os\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import LSTM \nfrom keras.layers.core import Dense","4d1ed097":"def create_network(depth):\n    model = Sequential()\n    model.add(LSTM(4, input_shape=(2, 2), return_sequences=True))\n    for i in range(depth):\n        model.add(LSTM(8, return_sequences=True))\n    model.add(LSTM(2, return_sequences=True))\n    model.summary()\n    model.compile(optimizer='rmsprop',\n              loss='mse')\n    if artist + \".rap\" in os.listdir(\".\") and train_mode == False:\n        model.load_weights(str(artist + \".rap\"))\n        print(\"loading saved network: \" + str(artist) + \".rap\") \n    return model","7887fb75":"def rhyme(line, rhyme_list):\n    word = re.sub(r\"\\W+\", '', line.split(\" \")[-1]).lower()\n    rhymeslist = pronouncing.rhymes(word)\n    rhymeslistends = []\n    for i in rhymeslist:\n        rhymeslistends.append(i[-2:])\n    try:\n        rhymescheme = max(set(rhymeslistends), key=rhymeslistends.count)\n    except Exception:\n        rhymescheme = word[-2:]\n    try:\n        float_rhyme = rhyme_list.index(rhymescheme)\n        float_rhyme = float_rhyme \/ float(len(rhyme_list))\n        return float_rhyme\n    except Exception:\n        float_rhyme = None\n        return float_rhyme","e136d996":"def generate_lyrics(text_model, text_file):\n    bars = []\n    last_words = []\n    lyriclength = len(open(text_file,encoding='utf-8').read().split(\"\\n\"))\n    count = 0\n    markov_model = markov(text_file)\n    \n    while len(bars) < lyriclength \/ 9 and count < lyriclength * 2:\n        bar = markov_model.make_sentence(max_overlap_ratio = .49, tries=100)\n        if type(bar) != type(None) and syllables(bar) < 1:\n            def get_last_word(bar):\n                last_word = bar.split(\" \")[-1]\n                if last_word[-1] in \"!.?,\":\n                    last_word = last_word[:-1]\n                return last_word\n            last_word = get_last_word(bar)\n            if bar not in bars and last_words.count(last_word) < 3:\n                bars.append(bar)\n                last_words.append(last_word)\n                count += 1\n    return bars","9feddf40":"def compose_rap(lines, rhyme_list, lyrics_file, model):\n    rap_vectors = []\n    human_lyrics = split_lyrics_file(lyrics_file)\n    initial_index = random.choice(range(len(human_lyrics) - 1))\n    initial_lines = human_lyrics[initial_index:initial_index + 2]\n    starting_input = []\n    for line in initial_lines:\n        starting_input.append([syllables(line), rhyme(line, rhyme_list)])\n    starting_vectors = model.predict(np.array([starting_input]).flatten().reshape(1, 2, 2))\n    rap_vectors.append(starting_vectors)\n    for i in range(100):\n        rap_vectors.append(model.predict(np.array([rap_vectors[-1]]).flatten().reshape(1, 2, 2)))\n    return rap_vectors","5e4e5ebe":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSbFh3PrRssSQE3_pjUeWDaabWjCldlo4I0ZueZ_xD3VOiNeatz',width=400,height=400)","ae1103da":"degruyter.com - Reference values of fecal calgranulin C (S100A12) in school aged children and adolescents\n\nCalgranulin C (S100A12) is an emerging marker of inflammation. It is exclusively released by activated neutrophils which makes this marker potentially more specific for inflammatory bowel disease (IBD) compared to established stool markers including calprotectin and lactoferrin. We aimed to establish a reference value for S100A12 in healthy children and investigated whether S100A12 levels can discriminate children with IBD from healthy controls. https:\/\/www.degruyter.com\/view\/j\/cclm.2018.56.issue-1\/cclm-2017-0152\/cclm-2017-0152.xml?lang=en","5476dc4a":"amsdottorato.unibo.it","f8a033c7":"researchgate.net","c262b53f":"#Everyone Wants Tom Brady's Poo","a2430c30":"#Codes from Paul (Paul Timothy Mooney) ","d2760c53":"Effect of selected gastrointestinal parasites and viral agents on fecal S100A12 concentrations in puppies as a potential comparative model.\n\n#Heilmann RM1,2, Grellet A3, Gr\u00fctzner N4,5, Cranford SM4, Suchodolski JS4, Chastant-Maillard S3, Steiner JM4.\nAbstract\n\nPrevious data suggest that fecal S100A12 has clinical utility as a biomarker of chronic gastrointestinal inflammation (idiopathic inflammatory bowel disease) in both people and dogs, but the effect of gastrointestinal pathogens on fecal S100A12 concentrations is largely unknown. The role of S100A12 in parasite and viral infections is also difficult to study in traditional animal models due to the lack of S100A12 expression in rodents. Thus, the aim of this study was to evaluate fecal S100A12 concentrations in a cohort of puppies with intestinal parasites (Cystoisospora spp., Toxocara canis, Giardia sp.) and viral agents that are frequently encountered and known to cause gastrointestinal signs in dogs (`CORONAVIRUS`, parvovirus) as a comparative model.https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/29665827","d5d7ccf3":"semanticscholar.org","00ba6993":"researchgate.net","de8d3ca3":"Abbreviations CCV: canine `CORONAVIRUS`; CPV2: canine parvovirus type 2; EN-RAGE: RAGEbinding protein; IBD: inflammatory bowel disease; IQR: interquartile range; MMPs: matrix metalloproteinases; NF-kB: nuclear factor kappa B; RAGE: receptor of advanced glycation end products; REML: restricted maximum likelihood; S100A12: S100A12 protein',","eefdb99f":"<iframe width=\"917\" height=\"516\" src=\"https:\/\/www.youtube.com\/embed\/4TPmHImjqPQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","a2ff777c":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke"}}