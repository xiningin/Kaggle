{"cell_type":{"d204866d":"code","bb18aa3a":"code","d0ff87d3":"code","355ff7ea":"code","946c9530":"code","5896caf7":"code","1a4a0e34":"code","f3534736":"code","58c59dbc":"code","4acf3d93":"code","2f0ee9ce":"code","cae84d88":"code","4bd12bcc":"code","24d14b8f":"code","02d49941":"code","14c4ae3a":"code","6fc4eccd":"code","d5af08c3":"code","bc5c6db0":"code","33a76831":"code","ce401d30":"markdown","34a606dc":"markdown","eb90a2f4":"markdown","a823a99c":"markdown","587287cd":"markdown","5c46a36b":"markdown","e013c02c":"markdown","9bfbc012":"markdown","b295b4e1":"markdown","d5f60338":"markdown","9903aec0":"markdown","3575fbf8":"markdown","296ea7ff":"markdown","e458b0c7":"markdown","0ea2516e":"markdown","35e285e1":"markdown","b6946328":"markdown","95b2aa12":"markdown","2341f4d0":"markdown","df4d984c":"markdown","5a836c67":"markdown","a6095713":"markdown"},"source":{"d204866d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport json\nimport ast\nimport datetime as dt\nfrom dateutil import tz\nfrom dateutil import parser\nimport matplotlib.pyplot as plt\nimport time\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint('\\n'.join(os.listdir(\"..\/input\")))\n\n# Any results you write to the current directory are saved as output.","bb18aa3a":"intervals = (\n    ('weeks', 604800),  # 60 * 60 * 24 * 7\n    ('days', 86400),    # 60 * 60 * 24\n    ('hours', 3600),    # 60 * 60\n    ('minutes', 60),\n    ('seconds', 1),\n    )\n\n\ndef get_nlargest_incident_id(n, df):\n    return df.groupby(by=\"Incident Type Id\",sort=True, as_index=False).count().nlargest(n, 'Create Time')[\"Incident Type Id\"].values\n\ndef display_time(seconds, granularity=10):\n    result = []\n\n    for name, count in intervals:\n        value = seconds \/\/ count\n        if value:\n            seconds -= value * count\n            if value == 1:\n                name = name.rstrip('s')\n            result.append(\"{} {}\".format(value, name))\n    return ', '.join(result[:granularity])\n\ndef map_x(x):\n    if x.hour < 6:\n        return \"00AM-6AM\"\n    if x.hour < 12 and x.hour > 6:\n        return \"6AM-12PM\"\n    if x.hour >= 12 and x.hour<18:\n        return \"12PM-6PM\"\n    if x.hour > 18:\n        return \"6PM-00AM\"\n    \ndef prep_data(df):\n    df['Create Time'] = df['Create Time'].fillna(df['Closed Time'])\n    df['Closed Time'] = df['Closed Time'].fillna(df['Create Time'])\n    df[\"time_between_creation_and_closed_seconds\"] = df.apply(lambda x: abs((parser.parse(x[\"Closed Time\"]) - parser.parse(x[\"Create Time\"])).seconds), axis=1)\n    df[\"time_of_the_day\"] = df[\"Create Time\"].map(lambda x:map_x(parser.parse(x)))\n    df.replace(r'', np.nan, regex=True, inplace=True)\n    df[\"Area Id\"].fillna(-1, inplace=True)\n    df[\"Beat\"].fillna(\"Unknown\", inplace=True)\n    df[\"Priority\"].fillna(\"-1\", inplace=True)\n    df[\"Priority\"].astype(int)\n    df.drop([\"Agency\", \"Event Number\"], inplace=True, axis=1)\n    df[\"day_of_the_month\"] = df[\"Create Time\"].apply(lambda x: parser.parse(x).day)\n    df[\"day_of_the_week\"] = df[\"day_of_the_month\"].apply(lambda x: (x % 7) + 1)\n    df[\"month_of_the_year\"] = df[\"Create Time\"].apply(lambda x: parser.parse(x).month)\n    return df","d0ff87d3":"crimes_2011 = pd.read_csv(\"..\/input\/records-for-2011.csv\")\ncrimes_2011.drop(index=[180015], inplace=True)\ncrimes_2011 = prep_data(crimes_2011)\ncrimes_2011.rename(index=str, columns={\"Location\": \"address\"}, inplace=True)\ncrimes_2011[\"Priority\"].replace(0.0, 1.0, inplace=True)\ncrimes_2011[\"Priority\"] = crimes_2011[\"Priority\"].astype(int)\ncrimes_2011.head(2)","355ff7ea":"crimes_2012 = pd.read_csv(\"..\/input\/records-for-2012.csv\")\ncrimes_2012.dropna(thresh=9, inplace=True)\ncrimes_2012[\"needs_recoding\"] = crimes_2012[\"Location 1\"].apply(lambda x:\n                                                                     ast.literal_eval(x)[\"needs_recoding\"])\ncrimes_2012[\"address\"] = crimes_2012[\"Location 1\"].apply(lambda x:\n                                                                     ast.literal_eval(ast.literal_eval(x)[\"human_address\"])[\"address\"])\ncrimes_2012[\"address\"] = crimes_2012[\"address\"].apply(lambda x:x.replace(\"&amp;\", \"&\"))\ncrimes_2012.drop(columns=[\"Location 1\"], inplace=True)\ncrimes_2012 = prep_data(crimes_2012)\ncrimes_2012[\"Priority\"] = crimes_2012[\"Priority\"].astype(int)\ncrimes_2012.head(2)","946c9530":"crimes_2013 = pd.read_csv(\"..\/input\/records-for-2013.csv\")\ncrimes_2013.dropna(thresh=9, inplace=True)\ncrimes_2013 = prep_data(crimes_2013)\ncrimes_2013.rename(index=str, columns={\"Location \": \"address\"}, inplace=True)\ncrimes_2013[\"Area Id\"] = crimes_2013[\"Area Id\"].astype(int)\ncrimes_2013[\"Priority\"].replace(0.0, 1.0, inplace=True)\ncrimes_2013[\"Priority\"] = crimes_2013[\"Priority\"].astype(int)\ncrimes_2013.head(2)","5896caf7":"crimes_2014 = prep_data(pd.read_csv(\"..\/input\/records-for-2014.csv\"))\ncrimes_2014[\"needs_recoding\"] = crimes_2014[\"Location 1\"].apply(lambda x:\n                                                                     ast.literal_eval(x)[\"needs_recoding\"])\ncrimes_2014[\"address\"] = crimes_2014[\"Location 1\"].apply(lambda x:\n                                                                     ast.literal_eval(ast.literal_eval(x)[\"human_address\"])[\"address\"])\ncrimes_2014[\"address\"] = crimes_2014[\"address\"].apply(lambda x:x.replace(\"&amp;\", \"&\"))\ncrimes_2014.drop(columns=[\"Location 1\"], inplace=True)\ncrimes_2014.head(2)","1a4a0e34":"crimes_2015 = prep_data(pd.read_csv(\"..\/input\/records-for-2015.csv\"))\ncrimes_2015.rename(index=str, columns={\"Location\": \"address\"}, inplace=True)\ncrimes_2015[\"Priority\"].replace(0.0, 1.0, inplace=True)\ncrimes_2015[\"Priority\"] = crimes_2015[\"Priority\"].astype(int)\ncrimes_2015.head(2)","f3534736":"crimes_2016 = pd.read_csv(\"..\/input\/records-for-2016.csv\")\ncrimes_2016.dropna(thresh=9, inplace=True)\ncrimes_2016 = prep_data(crimes_2016)\ncrimes_2016.rename(index=str, columns={\"Location\": \"address\"}, inplace=True)\ncrimes_2016[\"Priority\"] = crimes_2016[\"Priority\"].astype(int)\ncrimes_2016.head(2)","58c59dbc":"fig, ax = plt.subplots(nrows=2, ncols=3)\nplt.subplots_adjust(left=0, right=2.5, top=3, bottom=1)\ncrimes_list = [crimes_2011, crimes_2012, crimes_2013, crimes_2014, crimes_2015, crimes_2016]\ni = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(2011 + i))\n        sns.countplot(data=crimes_list[i], x=\"Priority\", ax=col, palette=\"Set1\")\n        i+=1","4acf3d93":"fig, ax = plt.subplots(nrows=2, ncols=3)\nplt.subplots_adjust(left=0, right=2.5, top=3, bottom=1)\ni = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(2011 + i))\n        sns.countplot(data=crimes_list[i], x=\"Priority\", hue=\"time_of_the_day\", palette=\"Set1\", ax=col)\n        i+=1\n","2f0ee9ce":"fig, ax = plt.subplots(nrows=2, ncols=3)\nplt.subplots_adjust(left=0, right=2.5, top=3, bottom=1)\ni = 0\nnlargest = [set(get_nlargest_incident_id(10, x)) for x in crimes_list]\nprint(\"From 2011 to 2016 Top 10 Common Incident Types are: {}\".format(str(set.intersection(*nlargest))))\nfor row in ax:\n    for col in row:\n        col.set_title(str(2011 + i))\n        sns.countplot(data=crimes_list[i].loc[crimes_list[i]['Incident Type Id'].isin(nlargest[i])], x=\"Incident Type Id\", hue=\"Priority\", palette=\"Set1\", ax=col)\n        i += 1","cae84d88":"for i, crime_year in enumerate(crimes_list):\n    avg_response_prio_1 = display_time(crime_year[crime_year[\"Priority\"] == 1][\"time_between_creation_and_closed_seconds\"].mean())\n    max_response_prio_1 = display_time(crime_year[crime_year[\"Priority\"] == 1][\"time_between_creation_and_closed_seconds\"].max())\n\n    avg_response_prio_2 = display_time(crime_year[crime_year[\"Priority\"] == 2][\"time_between_creation_and_closed_seconds\"].mean())\n    max_response_prio_2 = display_time(crime_year[crime_year[\"Priority\"] == 2][\"time_between_creation_and_closed_seconds\"].max())\n    print(\"Year \" + str(2011 + i) +\":\\n\")\n    print(\"\"\"The average time it takes to close a call (Priority 1):\\n\\t Max: {}\\n\\t Average: {} \\n\\n \nThe average time it takes to close a call (Priority 2): \\n\\t max: {}\\n\\t average: {}\"\"\".format(max_response_prio_1, avg_response_prio_1, max_response_prio_2, avg_response_prio_2))\n    print(\"=======================================================================================\\n\")","4bd12bcc":"fig, ax = plt.subplots(nrows=6, ncols=3)\nplt.subplots_adjust(left=0, right=3, top=12, bottom=0)\ni_list = 0\nfor i, row in enumerate(ax):\n    for j, col in enumerate(row):\n        year_string = str(2011 + i)\n        \n        if j == 1:\n            month_or_day = 'Day of The Month'\n            title = year_string+ '\\n' + month_or_day +'\\n Crime Count'\n            col.set_title(title)\n            col.set_xticklabels(col.get_xticklabels(), rotation=90)\n            sns.countplot(data=crimes_list[i_list], x=\"day_of_the_month\" ,palette=\"Set1\", ax=col)\n        elif j == 2:\n            month_or_day = 'Month of The Year'\n            title = year_string + '\\n' + month_or_day +'\\n Crime Count'\n            col.set_title(title)\n            sns.countplot(data=crimes_list[i_list], x=\"month_of_the_year\",palette=\"Set1\", ax=col)\n        else:\n            month_or_day = 'Day of The Week'\n            title = year_string+ '\\n' + month_or_day +'\\n Crime Count'\n            col.set_title(title)\n            sns.countplot(data=crimes_list[i_list], x=\"day_of_the_week\" ,palette=\"Set1\", ax=col)\n            \n    i_list += 1","24d14b8f":"fig, ax = plt.subplots(nrows=2, ncols=3)\nplt.subplots_adjust(left=0, right=2.5, top=3, bottom=1)\ni = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(2011 + i))\n        #sns.countplot(data=crimes_list[i].loc[crimes_list[i]['Incident Type Id'].isin(nlargest[i])], x=\"Incident Type Id\", hue=\"Priority\", palette=\"Set1\", ax=col)\n        temp = crimes_list[i].groupby(by=[\"Beat\", \"Priority\"],sort=True, as_index=False).count().rename(index=str, columns={\"Create Time\": \"Count\"})[[\"Beat\", \"Priority\", \"Count\", \"time_of_the_day\"]]\n        beats_prio_1 = list(temp[temp[\"Priority\"] == 1].nlargest(5, \"Count\")[\"Beat\"].values)\n        beats_prio_2 = list(temp[temp[\"Priority\"] == 2].nlargest(5, \"Count\")[\"Beat\"].values)\n        print(\"Year \" + str(2011 +i ) +\":\\n\")\n        print(\"The Beats With the Most Reports (Priority 1, Decending Order): {} \\nThe Beats With the Most Reports (Priority 2, Decending Order): {} \\nUnique Beats: {}\".format(str(beats_prio_1), str(beats_prio_2), str(list(set(beats_prio_1)|set(beats_prio_2)))))\n        print(\"Common Beats: {}\".format(str(list(set(beats_prio_1) & set(beats_prio_2)))))\n        sns.barplot(data=temp[temp[\"Beat\"].isin(beats_prio_1 + beats_prio_2)], x=\"Beat\", y=\"Count\", hue=\"Priority\",palette=\"Set1\", ax=col)\n        print(\"=======================================================================================\\n\")\n        i += 1\n","02d49941":"fig, ax = plt.subplots(nrows=2, ncols=3)\nplt.subplots_adjust(left=0, right=2.5, top=3, bottom=1)\ni = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(2011 + i))\n        temp = crimes_list[i].groupby(by=[\"Beat\", \"Priority\"],sort=True, as_index=False).count().rename(index=str, columns={\"Create Time\": \"Count\"})[[\"Beat\", \"Priority\", \"Count\", \"time_of_the_day\"]]\n        beats_prio_1 = list(temp[temp[\"Priority\"] == 1].nlargest(5, \"Count\")[\"Beat\"].values)\n        beats_prio_2 = list(temp[temp[\"Priority\"] == 2].nlargest(5, \"Count\")[\"Beat\"].values)\n        sns.countplot(data=crimes_list[i][crimes_list[i][\"Beat\"].isin(beats_prio_1 + beats_prio_2)], x=\"Beat\", hue=\"time_of_the_day\",palette=\"Set1\", ax=col)\n        i += 1","14c4ae3a":"fig, ax = plt.subplots(nrows=2, ncols=3)\nplt.subplots_adjust(left=0, right=3, top=3, bottom=1)\ni = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(2011 + i))\n        temp = crimes_list[i].groupby(by=[\"address\", \"Priority\"],sort=True, as_index=False).count().rename(index=str, columns={\"Create Time\": \"Count\"})[[\"address\", \"Priority\", \"Count\", \"time_of_the_day\"]]\n        bad_streets = temp.nlargest(3,\"Count\")[\"address\"].values\n        print(\"Year \" + str(2011 + i) +\": \\n\")\n        print(\"Top 3 Worst Streets are:\\n\\t\" + '\\n\\t'.join(bad_streets))\n        print(\"=========================================================\")\n        sns.countplot(data=crimes_list[i][crimes_list[i][\"address\"].isin(bad_streets)], x=\"address\", hue=\"Priority\", palette=\"Set1\", ax=col)\n        i += 1\n","6fc4eccd":"for i, x in enumerate(crimes_list):\n    x[\"Year\"] = 2011 + i\ncombined = crimes_2011\nfor x in range(1,len(crimes_list)):\n    combined = combined.append(crimes_list[x], ignore_index=True)\ncombined.tail(5)","d5af08c3":"temp = combined.groupby(by=[\"Year\", \"Priority\"]).mean()\nprio_1 = temp.loc[list(zip(range(2011,2017),[1.0] * 6))][\"time_between_creation_and_closed_seconds\"]\nprio_2 = temp.loc[list(zip(range(2011,2017),[2.0] * 6))][\"time_between_creation_and_closed_seconds\"]\nplt.plot(range(2011, 2017),prio_1, marker='o', markerfacecolor='black', markersize=8, color='skyblue', linewidth=2, label=\"Avg Closing Time Priority 1\")\nplt.plot(range(2011, 2017), prio_2, marker='*',color=\"red\", markersize=10, markerfacecolor='black', linewidth=2, label=\"Avg Closing Time Priority 2\")\nplt.legend()","bc5c6db0":"beats_list = combined.groupby(by=[\"Beat\"], as_index=False).count().nlargest(5, \"Create Time\")[\"Beat\"].values\nsns.catplot(x=\"Beat\",hue=\"Year\",  y=\"Create Time\",\n                 data=combined[combined[\"Beat\"].isin(beats_list)].groupby(by=[\"Year\", \"Beat\"], as_index=False).count()[[\"Year\", \"Beat\", \"Create Time\"]].reset_index(),\n                 kind=\"bar\")","33a76831":"address_list = combined.groupby(by=[\"address\"], as_index=False).count().nlargest(3, \"Create Time\")[\"address\"].values\nsns.catplot(y=\"address\",hue=\"Year\",  x=\"Create Time\",\n                 data=combined[combined[\"address\"].isin(address_list)].groupby(by=[\"Year\", \"address\"], as_index=False).count()[[\"Year\", \"address\", \"Create Time\"]].reset_index(),\n                 kind=\"bar\",orient=\"h\")","ce401d30":"# Top Dangerous Beats\n--------------------\n","34a606dc":"# Terminology <a id=\"1\"><\/a>\n----------------------------\n## Area Id\nOakland is divided into areas, the following map shows the divison of the city into area codes:\n\n![area map](http:\/\/ww2.kqed.org\/news\/wp-content\/uploads\/sites\/10\/2013\/10\/Screen-Shot-2013-10-14-at-8.28.43-PM-659x591-e1381880503593.png)\n\n## Beat  \nIn police terminology, a beat is the territory and time that a police officer patrols.\nBeat police typically patrol on foot or bicycle which provides more interaction between police and community members.\n\n### Oakland Beats Map\n![Beat map](http:\/\/www.panil.org\/ncpc\/beat9x_map.jpg)\n\n## Priority\n   ### PRIORITY 1:\n   > Emergency call which requires immediate response and there is reason to believe that an\n   > immediate threat to life exists.\n   ### PRIORITY 2: \n   > Emergency call which requires immediate response and there exists an immediate and\n   > substantial risk of major property loss or damage.\n   \n","eb90a2f4":"# Your Constructive Criticism is Welcome\n-------------------------\nI am a newbie and I have big passion towards  data science ! \n\nAny little piece of advice means a lot to me !","a823a99c":"## 2011\n","587287cd":"## 2014","5c46a36b":"# Analysis Through Time <a id=\"5\"><\/a>\n-----------------------------------------------\n","e013c02c":"# Data Head <a id=\"3\"><\/a>\n-------------------------------------","9bfbc012":"## 2015","b295b4e1":"## Incident type ID\n","d5f60338":"# Analysis for Each Year <a id=\"4\"><\/a>\n--------------------------","9903aec0":"# Table of Contents\n--------------------\n1. [ Terminology ](#1)\n2. [Packages Import & Util functions ](#2)\n3. [Data Import  & Data Head](#3)\n4. [Analysis for Each Year](#4)\n5. [Analysis Through Time](#5)","3575fbf8":"# Packages Import <a id=\"2\"><\/a>\n---------------------------","296ea7ff":"# Top 3 Worst Streets Through Time","e458b0c7":"## 2012\n","0ea2516e":"## 2016","35e285e1":"## Util functions","b6946328":"## 2013\n","95b2aa12":"# Do People Commit Less Crimes on Weekends \\ Speific Months ?\n\nThe decrease of crimes committed on the 31th is becuase not every month has 31 days, same for september since september has 28 days, so there are 2 to 3 less days  to commit crimes.\n\n## We can observe that people do commit less crimes on weekends !","2341f4d0":"# Time It Takes to Handle a Report\n-----------------\nShowing the maximum and average time from creation (Create Time) to closing it (Closed Time). ","df4d984c":"# Worst Beats Through Time\n\n","5a836c67":"## Priority Reports Count With Respect to the Time of the Day","a6095713":"## Top 3 Worst Streets"}}