{"cell_type":{"7c0d69ad":"code","3524f6c2":"code","25b7896a":"code","91b1a9df":"code","2c45a4af":"code","01078d37":"code","27f19e79":"code","5690c63a":"code","5854e8e5":"code","8a65b22f":"code","15492b86":"code","a19902f5":"code","3b9a6f0e":"code","3b7c96e1":"code","d49d3ba7":"code","1b8bca8b":"code","a40b3cf0":"code","b64d0470":"code","3fcf07a9":"code","c566c500":"code","9d8abe3e":"code","e9076ecc":"code","edd59c33":"code","ba45fb9c":"markdown","c71f882f":"markdown","1d61a98c":"markdown","cda11acd":"markdown","b88abe7d":"markdown","6214f93b":"markdown","744ab40b":"markdown","a3aab076":"markdown","0e7e14bf":"markdown","dfef74a3":"markdown","453b2cb9":"markdown","025033e8":"markdown","76a96d88":"markdown","46755053":"markdown","f746207c":"markdown"},"source":{"7c0d69ad":"# Import packages\nimport pandas as pd\nimport numpy as np\nimport os\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import RFE, SelectKBest, SelectFromModel, chi2, f_classif\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, roc_auc_score, precision_score, recall_score, f1_score\nfrom sklearn.svm import LinearSVC\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt","3524f6c2":"csv_filepath = \"..\/input\/heart-disease-uci\/heart.csv\"","25b7896a":"df = pd.read_csv(csv_filepath, na_values=['na', '--'])\n\n# See the dataset\ndisplay(df.head())\n\n# Check info\ndisplay(df.info())    ","91b1a9df":"# Describe columns\nprint(df.describe(include='all'))","2c45a4af":"# To identify the total missing values \nprint(df.isnull().sum())","01078d37":"# Split feature and target vectors\nX = df.drop([\"target\"], axis=1)\nY = df[\"target\"]","27f19e79":"def RF_model(X, Y):\n  # define the model \n  model = RandomForestClassifier(criterion=\"entropy\", random_state=42)\n  # Train the model\n  model.fit(X, Y)\n\n  return model\n\n# Calculate metrics\ndef cal_accuracy(model, X_test_scaled, Y_test):\n  # Predict model\n  y_pred = model.predict(X_test_scaled)\n\n  # Calculate metrics for evaluating the model\n  roc = roc_auc_score(Y_test, y_pred)\n  print('roc score is : {}'.format(roc))\n\n  accuracy = accuracy_score(Y_test, y_pred)\n  print('Accuracy score is : {}'.format(accuracy))\n\n  precision = precision_score(Y_test, y_pred)\n  print('Precision score is : {}'.format(precision))\n\n  recall = recall_score(Y_test, y_pred)\n  print('Recall score is : {}'.format(recall))\n\n  f1 = f1_score(Y_test, y_pred)\n  print('f1 score is : {}'.format(f1))\n\n  return accuracy, roc, precision, recall, f1\n\ndef train_model(X, Y):\n  # Split data to train and test\n  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=42)\n\n  # Normalize feature's values\n  scaler = StandardScaler().fit(X_train)\n  X_train_scaled = scaler.transform(X_train)\n  X_test_scaled = scaler.transform(X_test)\n\n  # Call the RF_model \n  model = RF_model(X_train_scaled, Y_train)\n\n  # Make predictions on test dataset and calculate metrics.\n  accuracy, roc, precision, recall, f1 = cal_accuracy(model, X_test_scaled, Y_test)\n\n  return accuracy, roc, precision, recall, f1\n\ndef evaluate_model(X, Y):\n  # Train the model and compute metrics\n  accuracy, roc, precision, recall, f1 = train_model(X, Y)\n\n  # Display all metrics in a dataframe\n  metrics_df = pd.DataFrame([[accuracy, roc, precision, recall, f1, X.shape[1]]], \n                            columns=[\"Accuracy\", \"ROC\", \"Precision\", \"Recall\", \"F1 Score\", \"Feature Count\"])\n\n  return metrics_df","5690c63a":"metrics_df = evaluate_model(X, Y) \nmetrics_df.index = [\"All features\"]\n\nresults = metrics_df\ndisplay(metrics_df.head())","5854e8e5":"# correlation matrix\ncor = df.corr()\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(cor, annot=True, cmap=plt.cm.PuBu)\nplt.show()","8a65b22f":"# Get value of the correlation\ntarget_correlation = abs(cor[\"target\"])\n\n# Select highly correlated features (thresold = 0.2)\nhigh_corr_feature = target_correlation[target_correlation > 0.2]\n\n# Determine the name of features\nnames = []\nfor idx, value in high_corr_feature.iteritems():\n  names.append(idx)\n\n# Remove the name of target value\nnames.remove(\"target\")\nprint(\"features are strongly correlated with the target : {}\".format(names))","15492b86":"# Check the new features with the model\ndf_strong_feature = evaluate_model(df[names], Y)\ndf_strong_feature.index = [\"Strong Features\"]\n\n# Add to the previous results\nresults = results.append(df_strong_feature)\ndisplay(results.head())","a19902f5":"# Correlation with strong features\n# correlation matrix\ncor_features = df[names].corr()\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(cor_features, annot=True, cmap=plt.cm.PuBu)\nplt.show()","3b9a6f0e":"# Select a subset of features\nnew_feature_corr = df[['cp', 'thalach', 'exang', 'oldpeak', 'slope']].corr()\n\nplt.figure(figsize=(12,10))\nsns.heatmap(new_feature_corr, annot=True, cmap=plt.cm.Blues)\nplt.show()","3b7c96e1":"# Check the name of subsets in highl correlation with other features list and then remove them\nsubset_features = [i for i in names if i not in ['cp', 'thalach', 'exang', 'oldpeak']]\n\n# Check the new features with the model\nsubset_features_df = evaluate_model(df[subset_features], Y)\nsubset_features_df.index= [\"Subset Features\"]\n\nresults = results.append(subset_features_df)\nresults.head()","d49d3ba7":"def univariate_selection():\n  # Split data to train and test\n  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=42)\n\n  # Normalize feature's values\n  scaler = StandardScaler().fit(X_train)\n  X_train_scaled = scaler.transform(X_train)\n  X_test_scaled = scaler.transform(X_test)\n\n  # Using SelectKBest method we can select top 7 features based on f-test\n  selector = SelectKBest(f_classif, k=7)\n\n  # Fit selector to scaled data, then transform it\n  X_new = selector.fit_transform(X_train_scaled, Y_train)\n  \n  # See the results\n  feature_index = selector.get_support()\n  # Romove the target value fro dataframe\n  df_new = df.drop(\"target\", axis=1)\n  for name, idx in zip(df_new.columns, feature_index):\n    print(\"%s: %s\" % (name, idx))\n\n  # Drop the target variable\n  feature_names = df.drop(\"target\", axis=1).columns[feature_index]\n\n  return feature_names","1b8bca8b":"names_univariate_feature = univariate_selection()\n\n# Check the univariate features with the model\ndf_univariate_feature = evaluate_model(df[names_univariate_feature], Y)\ndf_univariate_feature.index = [\"F-test\"]\n\n# Add to the previous results\nresults = results.append(df_univariate_feature)\ndisplay(results.head())","a40b3cf0":"def recursive_feature_selection():\n  # Split data to train and test\n  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=42)\n\n  # Normalize feature's values\n  scaler = StandardScaler().fit(X_train)\n  X_train_scaled = scaler.transform(X_train)\n  X_test_scaled = scaler.transform(X_test)\n\n  # Set the model\n  RF_model = RandomForestClassifier(criterion=\"entropy\", random_state=42)\n\n  # Wrap RFE around the model\n  rfe = RFE(RF_model, 7)\n\n  # Train the RFE\n  rfe.fit(X_train_scaled, Y_train)\n  feature_names = df.drop(\"target\", axis=1).columns[rfe.get_support()]\n\n  return feature_names","b64d0470":"feature_names_rfe = recursive_feature_selection()\n\n# Check the rfe features with the model\ndf_rfe_feature = evaluate_model(df[feature_names_rfe], Y)\ndf_rfe_feature.index = [\"RFE\"]\n\n# Add to the previous results\nresults = results.append(df_rfe_feature)\ndisplay(results.head())","3fcf07a9":"# Get Feature importance from RandomForestClassifier model\ndef tree_based_feature_importance_fn(X, Y):\n  # Split data to train and test\n  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=42)\n\n  # Normalize feature's values\n  scaler = StandardScaler().fit(X_train)\n  X_train_scaled = scaler.transform(X_train)\n  X_test_scaled = scaler.transform(X_test)\n\n  # Set the model\n  rf_model = RandomForestClassifier()\n  rf_model = rf_model.fit(X_train_scaled, Y_train)\n\n  # Plot feature importance\n  plt.figure(figsize=(12,10))\n  feature_importance = pd.Series(rf_model.feature_importances_, index=X.columns)\n  feature_importance.sort_values(ascending=False).plot(kind='barh')\n  plt.show()\n\n  return rf_model\n\ndef select_features(model):\n  \n  # Set the model\n  selection = SelectFromModel(model, prefit=True, threshold=0.013)\n\n  # see the selected features\n  selected_features = selection.get_support()\n  feature_names = df.drop(\"target\", axis=1).columns[selected_features]\n\n  return feature_names","c566c500":"tree_based_model = tree_based_feature_importance_fn(X, Y)\nfeature_names = select_features(tree_based_model)","9d8abe3e":"# Check the rfe features with the model\ndf_feature_importance = evaluate_model(df[feature_names], Y)\ndf_feature_importance.index = [\"Feature Importance\"]\n\n# Add to the previous results\nresults = results.append(df_feature_importance)\ndisplay(results.head(n=10))","e9076ecc":"def l1_regularization_fn(X, Y):\n  # Split data to train and test\n  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=42)\n\n  # Normalize feature's values\n  scaler = StandardScaler().fit(X_train)\n  X_train_scaled = scaler.transform(X_train)\n  X_test_scaled = scaler.transform(X_test)\n\n  # Select L1 regulated features from LinearSVC model\n  model = LinearSVC(C=1, penalty=\"l1\", dual=False)   # Prefer dual=False when n_samples > n_features\n  selection = SelectFromModel(model)\n  selection.fit(X_train_scaled, Y_train)\n\n  # Determine feature selected\n  feature_selected = selection.get_support()\n  feature_names = df.drop(\"target\", axis=1).columns[feature_selected]\n\n  return feature_names","edd59c33":"lr_regularization_feature_names = l1_regularization_fn(X, Y)\n\n# Check the rfe features with the model\ndf_l1_regularization = evaluate_model(df[lr_regularization_feature_names], Y)\ndf_l1_regularization.index = [\"L1 Regularization\"]\n\n# Add to the previous results\nresults = results.append(df_l1_regularization)\ndisplay(results.head(n=10))","ba45fb9c":"**Feature Selection**\n\nUsing feature selection, we can select the set of features that are most relevant to the target variable. This ends up reducing the complexity of the model, as well as minimizing the resources required for training and inference.","c71f882f":"**Recursive Feature Elimination**\n\nWe are going to use Recursive Feature Elimination, which wraps around the selected model (random forest in this case) to perform feature selection.\n\nOne of the popular libraries in Python which can be used to perform wrapper method for feature selection is Recursive Feature Elimination from Scikit-learn.\n\nFor more details, you can visit [official doc](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_selection.RFE.html) ","1d61a98c":"**Split the data**\n\nNow, we split the dataset into feature vectors X and target vector (stroke) Y to fit a RandomForestClassifier. ","cda11acd":"**Check NaN values and remove the unwanted features**","b88abe7d":"**Subset of features**","6214f93b":"**1- Univariate Selection with Sci-Kit Learn**\n\nScikit learn have several methods which can be used for feature selection\/dimensionality reduction on sample sets. For more information, you can visit [this](https:\/\/scikit-learn.org\/stable\/modules\/feature_selection.html#univariate-feature-selection) website.\n\nIn this section, we are going to use SelectKBest() method to select the top 10 features.","744ab40b":"**Embedded Methods**\n\nEmbedded methods using the construction of the machine learning algorithm complete the feature selection process.\\\nIn fact, embedded methods tackle those problems encountering with the filter and wrapper methods.","a3aab076":"In this section, we want to explore two embedded feature selection namely tree-based methods and regularization.\n\n**1- Tree-based methods**\n\nTree-based algorithms and models, such as random forest, are well-established algorithms that are able to specify the feature importance to select features.\n\nIn order to select features from the trained model, we can use [SelectFromModel](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_selection.SelectFromModel.html).","0e7e14bf":"\n**Calculate and Visualize the Correlation Matrix**\n\nTo find which feature has the highest correlation.","dfef74a3":"**Correlation with the target variable (Stroke)**","453b2cb9":"**Random Forest Model**","025033e8":"**2- Wrapper Methods**\n\nWrapper methods use a specific machine learning algorithm for feature selection process trying to measure the effectiveness of a particular subset of features.\n\nMost commonly used techniques under wrapper methods are:\n\n1- Forward selection : uses k-fold cross validation scores to decide which features to add or remove\n\n2- Backward elimination: starts with all predictors and eliminates one-by-one iteratively. One of the most popular algorithms is Recursive Feature Elimination (RFE) which eliminates less important predictors based on feature importance ranking.\n\n3- Bi-directional elimination(Stepwise Selection): is based on a combination of forward selection and backward elimination.","76a96d88":"**L1 Regularization**\n\nL1 regularization adds a penalty to the loss function which leads to the least important features being eliminated.\n\nFor learning algorithm, we can use Linear Support Vector Classification or LinearSVC (for more information, see [this](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.LinearSVC.html) document). \n\nMoreover, after training the LinearSVC model, we use SelectFromModel() to select features.","46755053":"**2- Regularization**\n\nRegularization introduces a penalty  to the different parameters of a model to reduce its freedom. \n\nThere are three main types of regularization for linear models which we are going to use **lasso regression or L1 regularization** in this stage.","f746207c":"**Filter methods for feature selection**\n\nThere are three ways to filter the features."}}