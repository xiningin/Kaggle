{"cell_type":{"82bc5ea2":"code","ab4f6f16":"code","e9bacdf4":"code","5143a452":"code","ab815b25":"code","222b821e":"code","94d561d2":"code","b7696f7c":"code","d9d6ebec":"code","56a6745d":"code","0b6a08c2":"code","95168780":"code","d6ecbf91":"code","3a578ff6":"code","e531462e":"code","eea8d641":"code","157db0eb":"code","8af18d5f":"code","eb24552a":"code","665d0808":"code","e7496a03":"code","419995b3":"code","763b7a7d":"code","04310c13":"code","82c82b95":"code","fdbeb045":"code","d37f870a":"code","8ca2e9a5":"code","1decd000":"markdown","ea7acc54":"markdown","fc9a2e20":"markdown","0669d20c":"markdown","8c855e4d":"markdown","bc68ca3f":"markdown","26413c90":"markdown","e2d37627":"markdown","9ed0ad74":"markdown","a1b142dc":"markdown","fe3c1823":"markdown"},"source":{"82bc5ea2":"!pip install -U tensorflow_datasets","ab4f6f16":"from __future__ import absolute_import, division, print_function, unicode_literals\n\n\n# Import TensorFlow and TensorFlow Datasets\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\ntf.logging.set_verbosity(tf.logging.ERROR)\n\n# Helper libraries\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Improve progress bar display\nimport tqdm\nimport tqdm.auto\ntqdm.tqdm = tqdm.auto.tqdm\n\n\nprint(tf.__version__)\n\n# This will go away in the future.\n# If this gives an error, you might be running TensorFlow 2 or above\n# If so, the just comment out this line and run this cell again\ntf.enable_eager_execution() ","e9bacdf4":"Import the dataset ","5143a452":"dataset, metadata = tfds.load('fashion_mnist', as_supervised=True, with_info=True)\ntrain_dataset, test_dataset = dataset['train'], dataset['test']","ab815b25":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal',      'Shirt',   'Sneaker',  'Bag',   'Ankle boot']","222b821e":"num_train_examples = metadata.splits['train'].num_examples\nnum_test_examples = metadata.splits['test'].num_examples\nprint(\"Number of training examples: {}\".format(num_train_examples))\nprint(\"Number of test examples:     {}\".format(num_test_examples))","94d561d2":"def normalize(images, labels):\n  images = tf.cast(images, tf.float32)\n  images \/= 255\n  return images, labels\n\n# The map function applies the normalize function to each element in the train\n# and test datasets\ntrain_dataset =  train_dataset.map(normalize)\ntest_dataset  =  test_dataset.map(normalize)","b7696f7c":"# Take a single image, and remove the color dimension by reshaping\nfor image, label in test_dataset.take(1):\n  break\nimage = image.numpy().reshape((28,28))\n\n# Plot the image - voila a piece of fashion clothing\nplt.figure()\nplt.imshow(image, cmap=plt.cm.binary)\nplt.colorbar()\nplt.grid(False)\nplt.show()","d9d6ebec":"plt.figure(figsize=(10,10))\ni = 0\nfor (image, label) in test_dataset.take(25):\n    image = image.numpy().reshape((28,28))\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(image, cmap=plt.cm.binary)\n    plt.xlabel(class_names[label])\n    i += 1\nplt.show()","56a6745d":"model = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28, 1)),\n    tf.keras.layers.Dense(128, activation=tf.nn.relu),\n    tf.keras.layers.Dense(10,  activation=tf.nn.softmax)\n])","0b6a08c2":"model.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","95168780":"BATCH_SIZE = 32\ntrain_dataset = train_dataset.repeat().shuffle(num_train_examples).batch(BATCH_SIZE)\ntest_dataset = test_dataset.batch(BATCH_SIZE)","d6ecbf91":"model.fit(train_dataset, epochs=5, steps_per_epoch=math.ceil(num_train_examples\/BATCH_SIZE))","3a578ff6":"test_loss, test_accuracy = model.evaluate(test_dataset, steps=math.ceil(num_test_examples\/32))\nprint('Accuracy on test dataset:', test_accuracy)","e531462e":"for test_images, test_labels in test_dataset.take(1):\n  test_images = test_images.numpy()\n  test_labels = test_labels.numpy()\n  predictions = model.predict(test_images)","eea8d641":"predictions.shape","157db0eb":"predictions[0]","8af18d5f":"np.argmax(predictions[0])","eb24552a":"test_labels[0]","665d0808":"def plot_image(i, predictions_array, true_labels, images):\n  predictions_array, true_label, img = predictions_array[i], true_labels[i], images[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n  \n  plt.imshow(img[...,0], cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n  \n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  predictions_array, true_label = predictions_array[i], true_label[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1]) \n  predicted_label = np.argmax(predictions_array)\n \n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","e7496a03":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions, test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions,  test_labels)","419995b3":"i = 12\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions, test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions,  test_labels)","763b7a7d":"# Plot the first X test images, their predicted label, and the true label\n# Color correct predictions in blue, incorrect predictions in red\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions, test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions, test_labels)","04310c13":"# Grab an image from the test dataset\nimg = test_images[0]\n\nprint(img.shape)","82c82b95":"# Add the image to a batch where it's the only member.\nimg = np.array([img])\n\nprint(img.shape)","fdbeb045":"predictions_single = model.predict(img)\n\nprint(predictions_single)","d37f870a":"plot_value_array(0, predictions_single, test_labels)\n_ = plt.xticks(range(10), class_names, rotation=45)","8ca2e9a5":"np.argmax(predictions_single[0])","1decd000":"Display 25 images","ea7acc54":"Evluate the accuracy","fc9a2e20":"Build the model","0669d20c":"In this tutorial,we'll build and train a neural network to classify images of clothing, like sneakers and shirts.","8c855e4d":"Make predicitons and explore","bc68ca3f":"Compile the model","26413c90":"Preprocess of data","e2d37627":"We'll need TensorFlow Datasets, an API that simplifies downloading and accessing datasets, and provides several sample datasets to work with. We're also using a few helper libraries.","9ed0ad74":"Explore the data","a1b142dc":"Train the model","fe3c1823":"Explore the preprocess data"}}