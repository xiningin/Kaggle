{"cell_type":{"3ef25f2e":"code","49424706":"code","3e822e53":"code","0991b040":"code","15cbf380":"code","ab577be0":"code","3b4e44c4":"markdown","ad80d178":"markdown","4df24be7":"markdown","ee39eb91":"markdown","d4b9b880":"markdown","fd64e9ba":"markdown","1de276a9":"markdown"},"source":{"3ef25f2e":"# idx [1..14] of the earthquake you'd like to animate\n# first (0) and last (15) are note full cycles!!!\nEARTHQUAKE = 1\n\n# Datapoints inside the window; Set this lower if you'd like to zoom in.\nWINDOW_SIZE = 150000\n\n# Window step size\nSTEP_SIZE = WINDOW_SIZE \/\/ 5\n\n# Refresh interval; lower=faster animation\nREFRESH_INTERVAL = 100","49424706":"import numpy as np\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nfrom IPython.display import HTML\nfrom scipy import signal\n\nearthquakes = [5656574, 50085878, 104677356, 138772453, 187641820, 218652630, 245829585, 307838917,\n               338276287, 375377848, 419368880, 461811623, 495800225, 528777115, 585568144, 621985673]\n\ntrain_df = pd.read_csv('..\/input\/train.csv', nrows=earthquakes[EARTHQUAKE + 1] - earthquakes[EARTHQUAKE],\n                       skiprows = earthquakes[EARTHQUAKE] + 1,\n                       names=['acoustic_data', 'ttf'],\n                       dtype={'acoustic_data': np.int16, 'time_to_failure': np.float32},)","3e822e53":"%matplotlib inline\n\nad = train_df.acoustic_data.values#[::5]\nttf = train_df.ttf.values#[::5]\n\ndef animate(i):\n    line.set_ydata(ad[i*STEP_SIZE:i*STEP_SIZE + WINDOW_SIZE])\n    ax.set_xlabel('TTF {0:.8f}'.format(ttf[i*STEP_SIZE + WINDOW_SIZE]))\n\nfig, ax = plt.subplots(figsize=(9,4))\nax.set(xlim=(0,WINDOW_SIZE), ylim=(-175, 175))\n\nline = ax.plot(train_df.iloc[0:WINDOW_SIZE], lw=1)[0]\nanim = matplotlib.animation.FuncAnimation(fig, animate, frames=(len(ad) - WINDOW_SIZE) \/\/ STEP_SIZE,\n                                          interval=REFRESH_INTERVAL, repeat=True)\n\n# You can save the animation\n# anim.save('acoustic_data.gif', writer='imagemagick')\n\n# Show the animation (does not work in kernel)\n# plt.show()\n\n# Remove this plt.close() in your experiment.\nplt.close()","0991b040":"# Low, High \"bandpass\" frequencies\nFREQUENCY_BAND = (45000, 55000)","15cbf380":"%matplotlib inline\n\ndef animate_freqs(i):\n    x = ad[i*STEP_SIZE:i*STEP_SIZE + WINDOW_SIZE]\n    frequencies, power_spectrum = signal.periodogram(x, 4000000, scaling='spectrum')\n    idx = (frequencies >= FREQUENCY_BAND[0]) & (frequencies <= FREQUENCY_BAND[1])\n    line.set_data(frequencies[idx].astype(np.int32), power_spectrum[idx])\n    ax.set_xlabel('TTF {0:.8f}'.format(ttf[i*STEP_SIZE + WINDOW_SIZE]))\n\nfig, ax = plt.subplots(figsize=(9,4))\n\n# !!!! If you don't see anything on the plot, try to adjust the `ylim` argument !!!!\nax.set(xlim=FREQUENCY_BAND, ylim=(0, .005))\nax.set_title(\"{}Hz - {}Hz\".format(FREQUENCY_BAND[0], FREQUENCY_BAND[1]))\n\nfrequencies, power_spectrum = signal.periodogram(ad[0:WINDOW_SIZE], 4000000, scaling='spectrum')      \nidx = (frequencies >= FREQUENCY_BAND[0]) & (frequencies <= FREQUENCY_BAND[1])\nline = ax.plot(frequencies[idx].astype(np.int32), power_spectrum[idx], lw=1)[0]\n\nanim = matplotlib.animation.FuncAnimation(fig, animate_freqs, frames=(len(ad) - WINDOW_SIZE) \/\/ STEP_SIZE,\n                                          interval=REFRESH_INTERVAL, repeat=True)\n\n# You can save the animation\n# anim.save('frequency_{}_{}.gif'.format(FREQUENCY_BAND[0], FREQUENCY_BAND[1]), writer='imagemagick')\n\n\n# Show the animation (does not work in kernel)\n# plt.show()\n\n# Remove this plt.close() in your experiment.\nplt.close()","ab577be0":"# This should help to adjust the ylim argument.\nfrequencies, power_spectrum = signal.periodogram(ad[0:WINDOW_SIZE], 4000000, scaling='spectrum')\nidx = (frequencies >= FREQUENCY_BAND[0]) & (frequencies <= FREQUENCY_BAND[1])\npd.Series(power_spectrum[idx]).describe()","3b4e44c4":"**Thanks for playing ;) Do not forget to vote!** ","ad80d178":"![SignalAnim](https:\/\/i.imgur.com\/5ndR48p.gif)","4df24be7":".","ee39eb91":"## Frequency band animation","d4b9b880":"![FrequencyAnim](https:\/\/i.imgur.com\/zgdLQa2.gif)","fd64e9ba":"# Signal and frequency data animation\n\nThis is a simple script to visualize the acoustic data (or a frequency band) changes over time.\n\n\n*Note: The animation does not work in the static result of the kernel (I replaced it with an animated gif), but you can execute the animations in kernel-editor mode.*\n\n\n-----------------------------------------------------------------------------------","1de276a9":"## Acoustic data animation"}}